
DasAltimeter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005ec4  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000045c  20000000  00005ec4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000001b0  20000460  00006330  00020460  2**4
                  ALLOC
  3 .stack        00002000  20000610  000064e0  00020460  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  0002045c  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020484  2**0
                  CONTENTS, READONLY
  6 .debug_info   00020140  00000000  00000000  000204dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002653  00000000  00000000  0004061d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000270f  00000000  00000000  00042c70  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000408  00000000  00000000  0004537f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000d20  00000000  00000000  00045787  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00015efc  00000000  00000000  000464a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00009433  00000000  00000000  0005c3a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00072946  00000000  00000000  000657d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001040  00000000  00000000  000d811c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
 *         retrieved from cpu registers.
 */
void SystemCoreClockUpdate(void)
{
	// Not implemented
	SystemCoreClock = __SYSTEM_CLOCK;
       0:	20002610 	.word	0x20002610
       4:	00000119 	.word	0x00000119
	return;
}
       8:	00000115 	.word	0x00000115
       c:	00000115 	.word	0x00000115
	...
      2c:	00000115 	.word	0x00000115
	...
      38:	00000115 	.word	0x00000115
      3c:	00000115 	.word	0x00000115
      40:	00000115 	.word	0x00000115
      44:	00000115 	.word	0x00000115
      48:	00000115 	.word	0x00000115
      4c:	000011c1 	.word	0x000011c1
      50:	00000115 	.word	0x00000115
      54:	00000115 	.word	0x00000115
      58:	00000115 	.word	0x00000115
      5c:	00000115 	.word	0x00000115
      60:	00000115 	.word	0x00000115
      64:	00000115 	.word	0x00000115
      68:	00000115 	.word	0x00000115
      6c:	00000115 	.word	0x00000115
      70:	00000115 	.word	0x00000115
      74:	00000115 	.word	0x00000115
      78:	00000115 	.word	0x00000115
      7c:	00000115 	.word	0x00000115
      80:	00000115 	.word	0x00000115
      84:	00000115 	.word	0x00000115
      88:	00000115 	.word	0x00000115
      8c:	00001261 	.word	0x00001261
      90:	000012c9 	.word	0x000012c9
	...
      9c:	00000115 	.word	0x00000115
      a0:	00000115 	.word	0x00000115
      a4:	00000115 	.word	0x00000115
      a8:	00000115 	.word	0x00000115
      ac:	00000115 	.word	0x00000115
      b0:	00000000 	.word	0x00000000

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000460 	.word	0x20000460
      d4:	00000000 	.word	0x00000000
      d8:	00005ec4 	.word	0x00005ec4

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000464 	.word	0x20000464
     108:	00005ec4 	.word	0x00005ec4
     10c:	00005ec4 	.word	0x00005ec4
     110:	00000000 	.word	0x00000000

00000114 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     114:	e7fe      	b.n	114 <Dummy_Handler>
	...

00000118 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
     118:	4821      	ldr	r0, [pc, #132]	; (1a0 <Reset_Handler+0x88>)
     11a:	4922      	ldr	r1, [pc, #136]	; (1a4 <Reset_Handler+0x8c>)
     11c:	b570      	push	{r4, r5, r6, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
     11e:	4288      	cmp	r0, r1
     120:	d002      	beq.n	128 <Reset_Handler+0x10>
     122:	2300      	movs	r3, #0
                for (; pDest < &_erelocate;) {
     124:	4c20      	ldr	r4, [pc, #128]	; (1a8 <Reset_Handler+0x90>)
     126:	e003      	b.n	130 <Reset_Handler+0x18>
     128:	4b20      	ldr	r3, [pc, #128]	; (1ac <Reset_Handler+0x94>)
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     12a:	4a21      	ldr	r2, [pc, #132]	; (1b0 <Reset_Handler+0x98>)
                *pDest++ = 0;
     12c:	2100      	movs	r1, #0
     12e:	e006      	b.n	13e <Reset_Handler+0x26>
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
     130:	18ca      	adds	r2, r1, r3
     132:	42a2      	cmp	r2, r4
     134:	d2f8      	bcs.n	128 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
     136:	58c5      	ldr	r5, [r0, r3]
     138:	3304      	adds	r3, #4
     13a:	6015      	str	r5, [r2, #0]
     13c:	e7f8      	b.n	130 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     13e:	4293      	cmp	r3, r2
     140:	d201      	bcs.n	146 <Reset_Handler+0x2e>
                *pDest++ = 0;
     142:	c302      	stmia	r3!, {r1}
     144:	e7fb      	b.n	13e <Reset_Handler+0x26>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     146:	21ff      	movs	r1, #255	; 0xff

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     148:	2402      	movs	r4, #2
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     14a:	2503      	movs	r5, #3
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     14c:	4b19      	ldr	r3, [pc, #100]	; (1b4 <Reset_Handler+0x9c>)
     14e:	4a1a      	ldr	r2, [pc, #104]	; (1b8 <Reset_Handler+0xa0>)
     150:	438b      	bics	r3, r1

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     152:	260c      	movs	r6, #12
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     154:	6093      	str	r3, [r2, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     156:	2208      	movs	r2, #8
        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     158:	4b18      	ldr	r3, [pc, #96]	; (1bc <Reset_Handler+0xa4>)
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     15a:	4919      	ldr	r1, [pc, #100]	; (1c0 <Reset_Handler+0xa8>)
        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     15c:	625c      	str	r4, [r3, #36]	; 0x24
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     15e:	78cb      	ldrb	r3, [r1, #3]
     160:	43ab      	bics	r3, r5
     162:	4323      	orrs	r3, r4
     164:	70cb      	strb	r3, [r1, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     166:	78cb      	ldrb	r3, [r1, #3]
     168:	43b3      	bics	r3, r6
     16a:	4313      	orrs	r3, r2
     16c:	70cb      	strb	r3, [r1, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
     16e:	2130      	movs	r1, #48	; 0x30
     170:	4b14      	ldr	r3, [pc, #80]	; (1c4 <Reset_Handler+0xac>)
     172:	7b98      	ldrb	r0, [r3, #14]
     174:	4388      	bics	r0, r1
     176:	3910      	subs	r1, #16
     178:	4308      	orrs	r0, r1
     17a:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     17c:	7b99      	ldrb	r1, [r3, #14]
     17e:	43b1      	bics	r1, r6
     180:	4311      	orrs	r1, r2
     182:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
     184:	2180      	movs	r1, #128	; 0x80
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
        DMAC->QOSCTRL.bit.FQOS = 2;
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     186:	7b9a      	ldrb	r2, [r3, #14]
     188:	43aa      	bics	r2, r5
     18a:	4322      	orrs	r2, r4
     18c:	739a      	strb	r2, [r3, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
     18e:	4a0e      	ldr	r2, [pc, #56]	; (1c8 <Reset_Handler+0xb0>)
     190:	6853      	ldr	r3, [r2, #4]
     192:	430b      	orrs	r3, r1
     194:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
     196:	4b0d      	ldr	r3, [pc, #52]	; (1cc <Reset_Handler+0xb4>)
     198:	4798      	blx	r3

        /* Branch to main function */
        main();
     19a:	4b0d      	ldr	r3, [pc, #52]	; (1d0 <Reset_Handler+0xb8>)
     19c:	4798      	blx	r3
     19e:	e7fe      	b.n	19e <Reset_Handler+0x86>
     1a0:	00005ec4 	.word	0x00005ec4
     1a4:	20000000 	.word	0x20000000
     1a8:	2000045c 	.word	0x2000045c
     1ac:	20000460 	.word	0x20000460
     1b0:	20000610 	.word	0x20000610
     1b4:	00000000 	.word	0x00000000
     1b8:	e000ed00 	.word	0xe000ed00
     1bc:	410070fc 	.word	0x410070fc
     1c0:	41005000 	.word	0x41005000
     1c4:	41004800 	.word	0x41004800
     1c8:	41004000 	.word	0x41004000
     1cc:	00005a91 	.word	0x00005a91
     1d0:	00000bad 	.word	0x00000bad

000001d4 <SystemInit>:
     1d4:	4a01      	ldr	r2, [pc, #4]	; (1dc <SystemInit+0x8>)
     1d6:	4b02      	ldr	r3, [pc, #8]	; (1e0 <SystemInit+0xc>)
     1d8:	601a      	str	r2, [r3, #0]
     1da:	4770      	bx	lr
     1dc:	000f4240 	.word	0x000f4240
     1e0:	20000000 	.word	0x20000000

000001e4 <AT25SFChipErase>:
    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
    pinHigh(cs_mem);
}

void AT25SFChipErase() {
     1e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     1e6:	2580      	movs	r5, #128	; 0x80
     1e8:	4c09      	ldr	r4, [pc, #36]	; (210 <AT25SFChipErase+0x2c>)
     1ea:	02ed      	lsls	r5, r5, #11

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
     1ec:	4f09      	ldr	r7, [pc, #36]	; (214 <AT25SFChipErase+0x30>)
     1ee:	6165      	str	r5, [r4, #20]
     1f0:	2106      	movs	r1, #6
     1f2:	2001      	movs	r0, #1
     1f4:	47b8      	blx	r7
     1f6:	4e08      	ldr	r6, [pc, #32]	; (218 <AT25SFChipErase+0x34>)
    pinHigh(cs_mem);

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_CHIP_ERASE);
     1f8:	2160      	movs	r1, #96	; 0x60
}

void AT25SFChipErase() {

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
     1fa:	7030      	strb	r0, [r6, #0]
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     1fc:	61a5      	str	r5, [r4, #24]
    pinHigh(cs_mem);

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_CHIP_ERASE);
     1fe:	2001      	movs	r0, #1
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     200:	6165      	str	r5, [r4, #20]
     202:	47b8      	blx	r7
    pinHigh(cs_mem);

    delay_ms(30000);
     204:	4b05      	ldr	r3, [pc, #20]	; (21c <AT25SFChipErase+0x38>)
    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
    pinHigh(cs_mem);

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_CHIP_ERASE);
     206:	7030      	strb	r0, [r6, #0]
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     208:	61a5      	str	r5, [r4, #24]
    pinHigh(cs_mem);

    delay_ms(30000);
     20a:	4805      	ldr	r0, [pc, #20]	; (220 <AT25SFChipErase+0x3c>)
     20c:	4798      	blx	r3
}
     20e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     210:	41004400 	.word	0x41004400
     214:	00002651 	.word	0x00002651
     218:	20000480 	.word	0x20000480
     21c:	00001191 	.word	0x00001191
     220:	00007530 	.word	0x00007530

00000224 <AT25SFGetByte>:

uint8_t AT25SFGetByte(uint32_t address) {
     224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     226:	2380      	movs	r3, #128	; 0x80
     228:	4f0f      	ldr	r7, [pc, #60]	; (268 <AT25SFGetByte+0x44>)
     22a:	02db      	lsls	r3, r3, #11
     22c:	617b      	str	r3, [r7, #20]
     22e:	0005      	movs	r5, r0

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_SLOWREAD_ARRAY);
     230:	4c0e      	ldr	r4, [pc, #56]	; (26c <AT25SFGetByte+0x48>)
     232:	2103      	movs	r1, #3
     234:	2001      	movs	r0, #1
     236:	47a0      	blx	r4
     238:	4e0d      	ldr	r6, [pc, #52]	; (270 <AT25SFGetByte+0x4c>)
    dummy_rx = spiDataTransfer(SPI1,((address & 0xFF0000) >> 16));
     23a:	0c29      	lsrs	r1, r5, #16
}

uint8_t AT25SFGetByte(uint32_t address) {

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_SLOWREAD_ARRAY);
     23c:	7030      	strb	r0, [r6, #0]
    dummy_rx = spiDataTransfer(SPI1,((address & 0xFF0000) >> 16));
     23e:	b2c9      	uxtb	r1, r1
     240:	2001      	movs	r0, #1
     242:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1,((address & 0x00FF00) >>  8));
     244:	0a29      	lsrs	r1, r5, #8

uint8_t AT25SFGetByte(uint32_t address) {

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_SLOWREAD_ARRAY);
    dummy_rx = spiDataTransfer(SPI1,((address & 0xFF0000) >> 16));
     246:	7030      	strb	r0, [r6, #0]
    dummy_rx = spiDataTransfer(SPI1,((address & 0x00FF00) >>  8));
     248:	b2c9      	uxtb	r1, r1
     24a:	2001      	movs	r0, #1
     24c:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1,((address & 0x0000FF) >>  0));
     24e:	b2e9      	uxtb	r1, r5
uint8_t AT25SFGetByte(uint32_t address) {

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_SLOWREAD_ARRAY);
    dummy_rx = spiDataTransfer(SPI1,((address & 0xFF0000) >> 16));
    dummy_rx = spiDataTransfer(SPI1,((address & 0x00FF00) >>  8));
     250:	7030      	strb	r0, [r6, #0]
    dummy_rx = spiDataTransfer(SPI1,((address & 0x0000FF) >>  0));
     252:	2001      	movs	r0, #1
     254:	47a0      	blx	r4
     256:	7030      	strb	r0, [r6, #0]
     258:	0001      	movs	r1, r0

    uint8_t _byte = spiDataTransfer(SPI1,dummy_rx);
     25a:	2001      	movs	r0, #1
     25c:	47a0      	blx	r4
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     25e:	2380      	movs	r3, #128	; 0x80
     260:	02db      	lsls	r3, r3, #11
     262:	61bb      	str	r3, [r7, #24]
    pinHigh(cs_mem);

    return _byte;
}
     264:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     266:	46c0      	nop			; (mov r8, r8)
     268:	41004400 	.word	0x41004400
     26c:	00002651 	.word	0x00002651
     270:	20000480 	.word	0x20000480

00000274 <AT25SFWriteBytes>:
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     274:	2380      	movs	r3, #128	; 0x80

void AT25SFWriteBytes(uint32_t address, u8_t len, uint8_t *bytes) {
     276:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     278:	4e19      	ldr	r6, [pc, #100]	; (2e0 <AT25SFWriteBytes+0x6c>)
     27a:	02db      	lsls	r3, r3, #11
     27c:	9201      	str	r2, [sp, #4]
     27e:	0007      	movs	r7, r0


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
     280:	4c18      	ldr	r4, [pc, #96]	; (2e4 <AT25SFWriteBytes+0x70>)
    pinHigh(cs_mem);

    return _byte;
}

void AT25SFWriteBytes(uint32_t address, u8_t len, uint8_t *bytes) {
     282:	9100      	str	r1, [sp, #0]


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
     284:	2001      	movs	r0, #1
     286:	6173      	str	r3, [r6, #20]
     288:	2106      	movs	r1, #6
     28a:	47a0      	blx	r4
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     28c:	2380      	movs	r3, #128	; 0x80
     28e:	4d16      	ldr	r5, [pc, #88]	; (2e8 <AT25SFWriteBytes+0x74>)
     290:	02db      	lsls	r3, r3, #11
     292:	7028      	strb	r0, [r5, #0]
    pinHigh(cs_mem);

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_PROGRAM);
     294:	2102      	movs	r1, #2
     296:	61b3      	str	r3, [r6, #24]
     298:	2001      	movs	r0, #1
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     29a:	6173      	str	r3, [r6, #20]
     29c:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1,((address & 0xFF0000) >> 16));
     29e:	0c39      	lsrs	r1, r7, #16
    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
    pinHigh(cs_mem);

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_PROGRAM);
     2a0:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1,((address & 0xFF0000) >> 16));
     2a2:	b2c9      	uxtb	r1, r1
     2a4:	2001      	movs	r0, #1
     2a6:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1,((address & 0x00FF00) >>  8));
     2a8:	0a39      	lsrs	r1, r7, #8
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
    pinHigh(cs_mem);

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_PROGRAM);
    dummy_rx = spiDataTransfer(SPI1,((address & 0xFF0000) >> 16));
     2aa:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1,((address & 0x00FF00) >>  8));
     2ac:	b2c9      	uxtb	r1, r1
     2ae:	2001      	movs	r0, #1
     2b0:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1,((address & 0x0000FF) >>  0));
     2b2:	b2f9      	uxtb	r1, r7
    pinHigh(cs_mem);

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_PROGRAM);
    dummy_rx = spiDataTransfer(SPI1,((address & 0xFF0000) >> 16));
    dummy_rx = spiDataTransfer(SPI1,((address & 0x00FF00) >>  8));
     2b4:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1,((address & 0x0000FF) >>  0));
     2b6:	2001      	movs	r0, #1
     2b8:	47a0      	blx	r4
     2ba:	9b00      	ldr	r3, [sp, #0]
     2bc:	9f01      	ldr	r7, [sp, #4]
     2be:	7028      	strb	r0, [r5, #0]
     2c0:	18fb      	adds	r3, r7, r3
     2c2:	9300      	str	r3, [sp, #0]

    for (u8_t pos = 0; pos < len; ++pos) {
     2c4:	9b00      	ldr	r3, [sp, #0]
     2c6:	429f      	cmp	r7, r3
     2c8:	d005      	beq.n	2d6 <AT25SFWriteBytes+0x62>
        dummy_rx = spiDataTransfer(SPI1, bytes[pos]);
     2ca:	7839      	ldrb	r1, [r7, #0]
     2cc:	2001      	movs	r0, #1
     2ce:	47a0      	blx	r4
     2d0:	3701      	adds	r7, #1
     2d2:	7028      	strb	r0, [r5, #0]
     2d4:	e7f6      	b.n	2c4 <AT25SFWriteBytes+0x50>
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     2d6:	2380      	movs	r3, #128	; 0x80
     2d8:	02db      	lsls	r3, r3, #11
     2da:	61b3      	str	r3, [r6, #24]
    }

    pinHigh(cs_mem);

}
     2dc:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
     2de:	46c0      	nop			; (mov r8, r8)
     2e0:	41004400 	.word	0x41004400
     2e4:	00002651 	.word	0x00002651
     2e8:	20000480 	.word	0x20000480

000002ec <AT25SEWritePage>:
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     2ec:	2380      	movs	r3, #128	; 0x80
    delay_ms(70);

}


u8_t AT25SEWritePage(u32_t startingAddress, u8_t *data) {
     2ee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     2f0:	4e18      	ldr	r6, [pc, #96]	; (354 <AT25SEWritePage+0x68>)
     2f2:	02db      	lsls	r3, r3, #11
     2f4:	0007      	movs	r7, r0

    u8_t bytesSent = 0;


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
     2f6:	4d18      	ldr	r5, [pc, #96]	; (358 <AT25SEWritePage+0x6c>)
    delay_ms(70);

}


u8_t AT25SEWritePage(u32_t startingAddress, u8_t *data) {
     2f8:	9101      	str	r1, [sp, #4]

    u8_t bytesSent = 0;


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
     2fa:	2001      	movs	r0, #1
     2fc:	6173      	str	r3, [r6, #20]
     2fe:	2106      	movs	r1, #6
     300:	47a8      	blx	r5
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     302:	2380      	movs	r3, #128	; 0x80
     304:	4c15      	ldr	r4, [pc, #84]	; (35c <AT25SEWritePage+0x70>)
     306:	02db      	lsls	r3, r3, #11
     308:	7020      	strb	r0, [r4, #0]
    pinHigh(cs_mem);


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_PROGRAM);
     30a:	2102      	movs	r1, #2
     30c:	61b3      	str	r3, [r6, #24]
     30e:	2001      	movs	r0, #1
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     310:	6173      	str	r3, [r6, #20]
     312:	47a8      	blx	r5
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     314:	0c39      	lsrs	r1, r7, #16
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
    pinHigh(cs_mem);


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_PROGRAM);
     316:	7020      	strb	r0, [r4, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     318:	b2c9      	uxtb	r1, r1
     31a:	2001      	movs	r0, #1
     31c:	47a8      	blx	r5
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     31e:	0a39      	lsrs	r1, r7, #8
    pinHigh(cs_mem);


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_PROGRAM);
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     320:	7020      	strb	r0, [r4, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     322:	b2c9      	uxtb	r1, r1
     324:	2001      	movs	r0, #1
     326:	47a8      	blx	r5
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
     328:	b2f9      	uxtb	r1, r7


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_PROGRAM);
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     32a:	7020      	strb	r0, [r4, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
     32c:	2001      	movs	r0, #1
     32e:	47a8      	blx	r5
     330:	9f01      	ldr	r7, [sp, #4]
     332:	7020      	strb	r0, [r4, #0]
     334:	1c7b      	adds	r3, r7, #1
     336:	33ff      	adds	r3, #255	; 0xff
     338:	9301      	str	r3, [sp, #4]


    for (u16_t pos = 0; pos < 256; ++pos) {
        ++bytesSent;
        dummy_rx = spiDataTransfer(SPI1,data[pos]);
     33a:	7839      	ldrb	r1, [r7, #0]
     33c:	2001      	movs	r0, #1
     33e:	47a8      	blx	r5
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));


    for (u16_t pos = 0; pos < 256; ++pos) {
     340:	9b01      	ldr	r3, [sp, #4]
     342:	3701      	adds	r7, #1
        ++bytesSent;
        dummy_rx = spiDataTransfer(SPI1,data[pos]);
     344:	7020      	strb	r0, [r4, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));


    for (u16_t pos = 0; pos < 256; ++pos) {
     346:	429f      	cmp	r7, r3
     348:	d1f7      	bne.n	33a <AT25SEWritePage+0x4e>
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     34a:	2380      	movs	r3, #128	; 0x80
     34c:	02db      	lsls	r3, r3, #11
     34e:	61b3      	str	r3, [r6, #24]
    }
    pinHigh(cs_mem);


    return bytesSent;
}
     350:	2000      	movs	r0, #0
     352:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
     354:	41004400 	.word	0x41004400
     358:	00002651 	.word	0x00002651
     35c:	20000480 	.word	0x20000480

00000360 <AT25SEreadSample>:
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     360:	2380      	movs	r3, #128	; 0x80

void AT25SEreadSample(u32_t startingAddress, u8_t len, u8_t *data) {
     362:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     364:	4f17      	ldr	r7, [pc, #92]	; (3c4 <AT25SEreadSample+0x64>)
     366:	02db      	lsls	r3, r3, #11
     368:	9201      	str	r2, [sp, #4]
     36a:	0006      	movs	r6, r0

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
     36c:	4c16      	ldr	r4, [pc, #88]	; (3c8 <AT25SEreadSample+0x68>)


    return bytesSent;
}

void AT25SEreadSample(u32_t startingAddress, u8_t len, u8_t *data) {
     36e:	9100      	str	r1, [sp, #0]

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
     370:	2001      	movs	r0, #1
     372:	617b      	str	r3, [r7, #20]
     374:	210b      	movs	r1, #11
     376:	47a0      	blx	r4
     378:	4d14      	ldr	r5, [pc, #80]	; (3cc <AT25SEreadSample+0x6c>)
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     37a:	0c31      	lsrs	r1, r6, #16
}

void AT25SEreadSample(u32_t startingAddress, u8_t len, u8_t *data) {

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
     37c:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     37e:	b2c9      	uxtb	r1, r1
     380:	2001      	movs	r0, #1
     382:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     384:	0a31      	lsrs	r1, r6, #8

void AT25SEreadSample(u32_t startingAddress, u8_t len, u8_t *data) {

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     386:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     388:	b2c9      	uxtb	r1, r1
     38a:	2001      	movs	r0, #1
     38c:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
     38e:	b2f1      	uxtb	r1, r6
void AT25SEreadSample(u32_t startingAddress, u8_t len, u8_t *data) {

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     390:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
     392:	2001      	movs	r0, #1
     394:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1, 0xFF);
     396:	21ff      	movs	r1, #255	; 0xff

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
     398:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1, 0xFF);
     39a:	2001      	movs	r0, #1
     39c:	47a0      	blx	r4
     39e:	9b00      	ldr	r3, [sp, #0]
     3a0:	9e01      	ldr	r6, [sp, #4]
     3a2:	7028      	strb	r0, [r5, #0]
     3a4:	18f3      	adds	r3, r6, r3
     3a6:	9300      	str	r3, [sp, #0]


    for (u8_t pos = 0; pos < len; ++pos) {
     3a8:	9b00      	ldr	r3, [sp, #0]
     3aa:	429e      	cmp	r6, r3
     3ac:	d005      	beq.n	3ba <AT25SEreadSample+0x5a>
        data[pos] = spiDataTransfer(SPI1,dummy_rx);
     3ae:	7829      	ldrb	r1, [r5, #0]
     3b0:	2001      	movs	r0, #1
     3b2:	47a0      	blx	r4
     3b4:	7030      	strb	r0, [r6, #0]
     3b6:	3601      	adds	r6, #1
     3b8:	e7f6      	b.n	3a8 <AT25SEreadSample+0x48>
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     3ba:	2380      	movs	r3, #128	; 0x80
     3bc:	02db      	lsls	r3, r3, #11
     3be:	61bb      	str	r3, [r7, #24]
    }
    pinHigh(cs_mem);

}
     3c0:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
     3c2:	46c0      	nop			; (mov r8, r8)
     3c4:	41004400 	.word	0x41004400
     3c8:	00002651 	.word	0x00002651
     3cc:	20000480 	.word	0x20000480

000003d0 <AT25SEreadPage>:
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     3d0:	2380      	movs	r3, #128	; 0x80

void AT25SEreadPage(u32_t startingAddress, u8_t *data) {
     3d2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     3d4:	4f16      	ldr	r7, [pc, #88]	; (430 <AT25SEreadPage+0x60>)
     3d6:	02db      	lsls	r3, r3, #11
     3d8:	0006      	movs	r6, r0


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
     3da:	4c16      	ldr	r4, [pc, #88]	; (434 <AT25SEreadPage+0x64>)
    }
    pinHigh(cs_mem);

}

void AT25SEreadPage(u32_t startingAddress, u8_t *data) {
     3dc:	9101      	str	r1, [sp, #4]


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
     3de:	2001      	movs	r0, #1
     3e0:	617b      	str	r3, [r7, #20]
     3e2:	210b      	movs	r1, #11
     3e4:	47a0      	blx	r4
     3e6:	4d14      	ldr	r5, [pc, #80]	; (438 <AT25SEreadPage+0x68>)
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     3e8:	0c31      	lsrs	r1, r6, #16

void AT25SEreadPage(u32_t startingAddress, u8_t *data) {


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
     3ea:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     3ec:	b2c9      	uxtb	r1, r1
     3ee:	2001      	movs	r0, #1
     3f0:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     3f2:	0a31      	lsrs	r1, r6, #8
void AT25SEreadPage(u32_t startingAddress, u8_t *data) {


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     3f4:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     3f6:	b2c9      	uxtb	r1, r1
     3f8:	2001      	movs	r0, #1
     3fa:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
     3fc:	b2f1      	uxtb	r1, r6


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     3fe:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
     400:	2001      	movs	r0, #1
     402:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1, 0xFF);
     404:	21ff      	movs	r1, #255	; 0xff

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
     406:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1, 0xFF);
     408:	2001      	movs	r0, #1
     40a:	47a0      	blx	r4
     40c:	9e01      	ldr	r6, [sp, #4]
     40e:	7028      	strb	r0, [r5, #0]
     410:	1c73      	adds	r3, r6, #1
     412:	33ff      	adds	r3, #255	; 0xff
     414:	9301      	str	r3, [sp, #4]


    for (u16_t pos = 0; pos < 256; ++pos) {
        data[pos] = spiDataTransfer(SPI1,dummy_rx);
     416:	7829      	ldrb	r1, [r5, #0]
     418:	2001      	movs	r0, #1
     41a:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
    dummy_rx = spiDataTransfer(SPI1, 0xFF);


    for (u16_t pos = 0; pos < 256; ++pos) {
     41c:	9b01      	ldr	r3, [sp, #4]
        data[pos] = spiDataTransfer(SPI1,dummy_rx);
     41e:	7030      	strb	r0, [r6, #0]
     420:	3601      	adds	r6, #1
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
    dummy_rx = spiDataTransfer(SPI1, 0xFF);


    for (u16_t pos = 0; pos < 256; ++pos) {
     422:	429e      	cmp	r6, r3
     424:	d1f7      	bne.n	416 <AT25SEreadPage+0x46>
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     426:	2380      	movs	r3, #128	; 0x80
     428:	02db      	lsls	r3, r3, #11
     42a:	61bb      	str	r3, [r7, #24]
        data[pos] = spiDataTransfer(SPI1,dummy_rx);
    }
    pinHigh(cs_mem);

}
     42c:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
     42e:	46c0      	nop			; (mov r8, r8)
     430:	41004400 	.word	0x41004400
     434:	00002651 	.word	0x00002651
     438:	20000480 	.word	0x20000480

0000043c <readMS5803AdcResults>:
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     43c:	2280      	movs	r2, #128	; 0x80
     43e:	4b28      	ldr	r3, [pc, #160]	; (4e0 <readMS5803AdcResults+0xa4>)
     440:	0212      	lsls	r2, r2, #8
#include <boardDefines.h>
#include <math.h>
//#include <tgmath.h>


u32_t readMS5803AdcResults() {
     442:	b5f0      	push	{r4, r5, r6, r7, lr}
     444:	615a      	str	r2, [r3, #20]
    pinLow(cs_baro);
//    dummy_rx = spiDataTransfer(SPI1, cmdAdcRead_);
//    u8_t _byte1 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte2 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte3 = spiDataTransfer(SPI1,dummy_tx);
    byteOut(spi2SCK,spi2MOSI, cmdAdcRead_);
     446:	2300      	movs	r3, #0
     448:	4d26      	ldr	r5, [pc, #152]	; (4e4 <readMS5803AdcResults+0xa8>)
#include <boardDefines.h>
#include <math.h>
//#include <tgmath.h>


u32_t readMS5803AdcResults() {
     44a:	b087      	sub	sp, #28
    pinLow(cs_baro);
//    dummy_rx = spiDataTransfer(SPI1, cmdAdcRead_);
//    u8_t _byte1 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte2 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte3 = spiDataTransfer(SPI1,dummy_tx);
    byteOut(spi2SCK,spi2MOSI, cmdAdcRead_);
     44c:	9300      	str	r3, [sp, #0]
     44e:	786b      	ldrb	r3, [r5, #1]
     450:	7828      	ldrb	r0, [r5, #0]
     452:	78aa      	ldrb	r2, [r5, #2]
     454:	021b      	lsls	r3, r3, #8
     456:	4303      	orrs	r3, r0
     458:	0412      	lsls	r2, r2, #16
     45a:	0019      	movs	r1, r3
     45c:	0013      	movs	r3, r2
     45e:	430b      	orrs	r3, r1
     460:	79a9      	ldrb	r1, [r5, #6]
     462:	796f      	ldrb	r7, [r5, #5]
     464:	79ec      	ldrb	r4, [r5, #7]
     466:	0209      	lsls	r1, r1, #8
     468:	4339      	orrs	r1, r7
     46a:	0424      	lsls	r4, r4, #16
     46c:	0008      	movs	r0, r1
     46e:	0021      	movs	r1, r4
     470:	7a2c      	ldrb	r4, [r5, #8]
     472:	78ea      	ldrb	r2, [r5, #3]
     474:	7a6f      	ldrb	r7, [r5, #9]
     476:	4301      	orrs	r1, r0
     478:	0624      	lsls	r4, r4, #24
     47a:	430c      	orrs	r4, r1
     47c:	0612      	lsls	r2, r2, #24
     47e:	431a      	orrs	r2, r3
     480:	0020      	movs	r0, r4
     482:	792b      	ldrb	r3, [r5, #4]
     484:	0039      	movs	r1, r7
     486:	4e18      	ldr	r6, [pc, #96]	; (4e8 <readMS5803AdcResults+0xac>)
     488:	47b0      	blx	r6
    u8_t _byte1 = byteIn(spi2SCK,spi2MISO);
     48a:	7aeb      	ldrb	r3, [r5, #11]
     48c:	7aa9      	ldrb	r1, [r5, #10]
     48e:	021b      	lsls	r3, r3, #8
     490:	430b      	orrs	r3, r1
     492:	001a      	movs	r2, r3
     494:	7b2b      	ldrb	r3, [r5, #12]
     496:	4e15      	ldr	r6, [pc, #84]	; (4ec <readMS5803AdcResults+0xb0>)
     498:	041b      	lsls	r3, r3, #16
     49a:	4313      	orrs	r3, r2
     49c:	7b6a      	ldrb	r2, [r5, #13]
     49e:	7bad      	ldrb	r5, [r5, #14]
     4a0:	0612      	lsls	r2, r2, #24
     4a2:	431a      	orrs	r2, r3
     4a4:	0039      	movs	r1, r7
     4a6:	002b      	movs	r3, r5
     4a8:	0020      	movs	r0, r4
     4aa:	9203      	str	r2, [sp, #12]
     4ac:	47b0      	blx	r6
    u8_t _byte2 = byteIn(spi2SCK,spi2MISO);
     4ae:	9a03      	ldr	r2, [sp, #12]
//    dummy_rx = spiDataTransfer(SPI1, cmdAdcRead_);
//    u8_t _byte1 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte2 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte3 = spiDataTransfer(SPI1,dummy_tx);
    byteOut(spi2SCK,spi2MOSI, cmdAdcRead_);
    u8_t _byte1 = byteIn(spi2SCK,spi2MISO);
     4b0:	9004      	str	r0, [sp, #16]
    u8_t _byte2 = byteIn(spi2SCK,spi2MISO);
     4b2:	002b      	movs	r3, r5
     4b4:	0039      	movs	r1, r7
     4b6:	0020      	movs	r0, r4
     4b8:	47b0      	blx	r6
    u8_t _byte3 = byteIn(spi2SCK,spi2MISO);
     4ba:	9a03      	ldr	r2, [sp, #12]
//    u8_t _byte1 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte2 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte3 = spiDataTransfer(SPI1,dummy_tx);
    byteOut(spi2SCK,spi2MOSI, cmdAdcRead_);
    u8_t _byte1 = byteIn(spi2SCK,spi2MISO);
    u8_t _byte2 = byteIn(spi2SCK,spi2MISO);
     4bc:	9005      	str	r0, [sp, #20]
    u8_t _byte3 = byteIn(spi2SCK,spi2MISO);
     4be:	002b      	movs	r3, r5
     4c0:	0020      	movs	r0, r4
     4c2:	0039      	movs	r1, r7
     4c4:	47b0      	blx	r6
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     4c6:	2280      	movs	r2, #128	; 0x80
     4c8:	4b05      	ldr	r3, [pc, #20]	; (4e0 <readMS5803AdcResults+0xa4>)
     4ca:	0212      	lsls	r2, r2, #8
     4cc:	619a      	str	r2, [r3, #24]
    pinHigh(cs_baro);

    u32_t _receive = (_byte1 << 16) | (_byte2 << 8) | (_byte3);
    return _receive;
     4ce:	9b04      	ldr	r3, [sp, #16]
     4d0:	9a05      	ldr	r2, [sp, #20]
     4d2:	041b      	lsls	r3, r3, #16
     4d4:	0215      	lsls	r5, r2, #8
     4d6:	431d      	orrs	r5, r3
     4d8:	4328      	orrs	r0, r5
}
     4da:	b007      	add	sp, #28
     4dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
     4de:	46c0      	nop			; (mov r8, r8)
     4e0:	41004400 	.word	0x41004400
     4e4:	00005c94 	.word	0x00005c94
     4e8:	00000eb9 	.word	0x00000eb9
     4ec:	00000f25 	.word	0x00000f25

000004f0 <ConvertPressureTemperature>:

void ConvertPressureTemperature(Barometer *my_barometer) {
     4f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    const u16_t C1 = my_barometer->coefficients_[0];
     4f2:	8803      	ldrh	r3, [r0, #0]

    u32_t _receive = (_byte1 << 16) | (_byte2 << 8) | (_byte3);
    return _receive;
}

void ConvertPressureTemperature(Barometer *my_barometer) {
     4f4:	b087      	sub	sp, #28
    const u16_t C1 = my_barometer->coefficients_[0];
     4f6:	9300      	str	r3, [sp, #0]
    const u16_t C2 = my_barometer->coefficients_[1];
     4f8:	8843      	ldrh	r3, [r0, #2]

    u32_t _receive = (_byte1 << 16) | (_byte2 << 8) | (_byte3);
    return _receive;
}

void ConvertPressureTemperature(Barometer *my_barometer) {
     4fa:	0004      	movs	r4, r0
    const u16_t C1 = my_barometer->coefficients_[0];
    const u16_t C2 = my_barometer->coefficients_[1];
     4fc:	9304      	str	r3, [sp, #16]
    const u16_t C3 = my_barometer->coefficients_[2];
    const u16_t C4 = my_barometer->coefficients_[3];
     4fe:	88c3      	ldrh	r3, [r0, #6]
}

void ConvertPressureTemperature(Barometer *my_barometer) {
    const u16_t C1 = my_barometer->coefficients_[0];
    const u16_t C2 = my_barometer->coefficients_[1];
    const u16_t C3 = my_barometer->coefficients_[2];
     500:	8886      	ldrh	r6, [r0, #4]
    const u16_t C4 = my_barometer->coefficients_[3];
     502:	9305      	str	r3, [sp, #20]
    const u16_t C5 = my_barometer->coefficients_[4];
    const u16_t C6 = my_barometer->coefficients_[5];

    // calculate 1st order pressure and temperature (MS5607 1st order algorithm)
    const  int32_t dT = (my_barometer->rawTempatureData) - ((int32_t)C5 << 8);
    my_barometer->temperatureCelcus  = 2000 + (((int64_t)dT * C6) >> 23) ;
     504:	8905      	ldrh	r5, [r0, #8]
     506:	6903      	ldr	r3, [r0, #16]
     508:	022d      	lsls	r5, r5, #8
     50a:	1b5b      	subs	r3, r3, r5
     50c:	2500      	movs	r5, #0
     50e:	9302      	str	r3, [sp, #8]
     510:	17db      	asrs	r3, r3, #31
     512:	9303      	str	r3, [sp, #12]
     514:	8940      	ldrh	r0, [r0, #10]
     516:	4f1f      	ldr	r7, [pc, #124]	; (594 <ConvertPressureTemperature+0xa4>)
     518:	9a02      	ldr	r2, [sp, #8]
     51a:	0029      	movs	r1, r5
     51c:	47b8      	blx	r7
     51e:	23fa      	movs	r3, #250	; 0xfa
     520:	0249      	lsls	r1, r1, #9
     522:	0dc0      	lsrs	r0, r0, #23
     524:	4308      	orrs	r0, r1
     526:	00db      	lsls	r3, r3, #3
     528:	18c0      	adds	r0, r0, r3
     52a:	6160      	str	r0, [r4, #20]

    const  int64_t OFF   = ((int64_t)C2 << 16) + ((C4 * (int64_t)dT) >> 7);
    const  int64_t SENS  =  ((int64_t)C1 << 15) + ((C3 * (int64_t)dT) >> 8);
    my_barometer->pressureMbar = ((((my_barometer->rawPressureData * SENS) >> 21) - OFF) >> 15);
     52c:	9a02      	ldr	r2, [sp, #8]
     52e:	9b03      	ldr	r3, [sp, #12]
     530:	0030      	movs	r0, r6
     532:	0029      	movs	r1, r5
     534:	47b8      	blx	r7
     536:	060b      	lsls	r3, r1, #24
     538:	120f      	asrs	r7, r1, #8
     53a:	0a06      	lsrs	r6, r0, #8
     53c:	9900      	ldr	r1, [sp, #0]
     53e:	431e      	orrs	r6, r3
     540:	03ca      	lsls	r2, r1, #15
     542:	002b      	movs	r3, r5
     544:	0030      	movs	r0, r6
     546:	0039      	movs	r1, r7
     548:	4e12      	ldr	r6, [pc, #72]	; (594 <ConvertPressureTemperature+0xa4>)
     54a:	1880      	adds	r0, r0, r2
     54c:	4159      	adcs	r1, r3
     54e:	68e2      	ldr	r2, [r4, #12]
     550:	47b0      	blx	r6
     552:	02cb      	lsls	r3, r1, #11
     554:	0d42      	lsrs	r2, r0, #21
     556:	431a      	orrs	r2, r3
     558:	154b      	asrs	r3, r1, #21
     55a:	9200      	str	r2, [sp, #0]
     55c:	9301      	str	r3, [sp, #4]
     55e:	9a02      	ldr	r2, [sp, #8]
     560:	9b03      	ldr	r3, [sp, #12]
     562:	4e0c      	ldr	r6, [pc, #48]	; (594 <ConvertPressureTemperature+0xa4>)
     564:	9805      	ldr	r0, [sp, #20]
     566:	0029      	movs	r1, r5
     568:	47b0      	blx	r6
     56a:	064b      	lsls	r3, r1, #25
     56c:	09c6      	lsrs	r6, r0, #7
     56e:	431e      	orrs	r6, r3
     570:	002b      	movs	r3, r5
     572:	11cf      	asrs	r7, r1, #7
     574:	9904      	ldr	r1, [sp, #16]
     576:	040a      	lsls	r2, r1, #16
     578:	1992      	adds	r2, r2, r6
     57a:	417b      	adcs	r3, r7
     57c:	9800      	ldr	r0, [sp, #0]
     57e:	9901      	ldr	r1, [sp, #4]
     580:	1a80      	subs	r0, r0, r2
     582:	4199      	sbcs	r1, r3
     584:	000a      	movs	r2, r1
     586:	0453      	lsls	r3, r2, #17
     588:	0bc2      	lsrs	r2, r0, #15
     58a:	431a      	orrs	r2, r3
     58c:	61e2      	str	r2, [r4, #28]

}
     58e:	b007      	add	sp, #28
     590:	bdf0      	pop	{r4, r5, r6, r7, pc}
     592:	46c0      	nop			; (mov r8, r8)
     594:	000039a1 	.word	0x000039a1

00000598 <paToFeetNOAA>:

void paToFeetNOAA(Barometer *my_barometer) {
     598:	b570      	push	{r4, r5, r6, lr}

    double lower =(((double)(my_barometer->pressureMbar)/10)/1013.25);
    double exponent = 0.190284;

    double altFeet = (1-pow(lower,exponent))*145366.45;
     59a:	4b0f      	ldr	r3, [pc, #60]	; (5d8 <paToFeetNOAA+0x40>)
    const  int64_t SENS  =  ((int64_t)C1 << 15) + ((C3 * (int64_t)dT) >> 8);
    my_barometer->pressureMbar = ((((my_barometer->rawPressureData * SENS) >> 21) - OFF) >> 15);

}

void paToFeetNOAA(Barometer *my_barometer) {
     59c:	0004      	movs	r4, r0

    double lower =(((double)(my_barometer->pressureMbar)/10)/1013.25);
    double exponent = 0.190284;

    double altFeet = (1-pow(lower,exponent))*145366.45;
     59e:	69c0      	ldr	r0, [r0, #28]
     5a0:	4798      	blx	r3
     5a2:	4d0e      	ldr	r5, [pc, #56]	; (5dc <paToFeetNOAA+0x44>)
     5a4:	2200      	movs	r2, #0
     5a6:	4b0e      	ldr	r3, [pc, #56]	; (5e0 <paToFeetNOAA+0x48>)
     5a8:	47a8      	blx	r5
     5aa:	2200      	movs	r2, #0
     5ac:	4b0d      	ldr	r3, [pc, #52]	; (5e4 <paToFeetNOAA+0x4c>)
     5ae:	47a8      	blx	r5
     5b0:	4a0d      	ldr	r2, [pc, #52]	; (5e8 <paToFeetNOAA+0x50>)
     5b2:	4b0e      	ldr	r3, [pc, #56]	; (5ec <paToFeetNOAA+0x54>)
     5b4:	4d0e      	ldr	r5, [pc, #56]	; (5f0 <paToFeetNOAA+0x58>)
     5b6:	47a8      	blx	r5
     5b8:	4d0e      	ldr	r5, [pc, #56]	; (5f4 <paToFeetNOAA+0x5c>)
     5ba:	0002      	movs	r2, r0
     5bc:	000b      	movs	r3, r1
     5be:	2000      	movs	r0, #0
     5c0:	490d      	ldr	r1, [pc, #52]	; (5f8 <paToFeetNOAA+0x60>)
     5c2:	47a8      	blx	r5
     5c4:	4a0d      	ldr	r2, [pc, #52]	; (5fc <paToFeetNOAA+0x64>)
     5c6:	4d0e      	ldr	r5, [pc, #56]	; (600 <paToFeetNOAA+0x68>)
     5c8:	4b0e      	ldr	r3, [pc, #56]	; (604 <paToFeetNOAA+0x6c>)
     5ca:	47a8      	blx	r5
    my_barometer->altitudefeet = altFeet;
    my_barometer->heightFeet = altFeet;
     5cc:	4b0e      	ldr	r3, [pc, #56]	; (608 <paToFeetNOAA+0x70>)

    double lower =(((double)(my_barometer->pressureMbar)/10)/1013.25);
    double exponent = 0.190284;

    double altFeet = (1-pow(lower,exponent))*145366.45;
    my_barometer->altitudefeet = altFeet;
     5ce:	62a0      	str	r0, [r4, #40]	; 0x28
     5d0:	62e1      	str	r1, [r4, #44]	; 0x2c
    my_barometer->heightFeet = altFeet;
     5d2:	4798      	blx	r3
     5d4:	6260      	str	r0, [r4, #36]	; 0x24

}
     5d6:	bd70      	pop	{r4, r5, r6, pc}
     5d8:	0000567d 	.word	0x0000567d
     5dc:	000041ed 	.word	0x000041ed
     5e0:	40240000 	.word	0x40240000
     5e4:	408faa00 	.word	0x408faa00
     5e8:	e279dd3c 	.word	0xe279dd3c
     5ec:	3fc85b39 	.word	0x3fc85b39
     5f0:	00002691 	.word	0x00002691
     5f4:	00004f29 	.word	0x00004f29
     5f8:	3ff00000 	.word	0x3ff00000
     5fc:	9999999a 	.word	0x9999999a
     600:	00004a35 	.word	0x00004a35
     604:	4101beb3 	.word	0x4101beb3
     608:	000039f9 	.word	0x000039f9

0000060c <readMS5803Coefficients>:
            my_barometer->heightCm = (z1 + (((pa1 - my_barometer->pressurePa) * (z2 - z1)) >> 10));
        }
    }
}

void readMS5803Coefficients(Barometer *my_barometer) {
     60c:	b5f0      	push	{r4, r5, r6, r7, lr}
     60e:	27a2      	movs	r7, #162	; 0xa2
     610:	b087      	sub	sp, #28
     612:	9002      	str	r0, [sp, #8]

    u8_t dummy_tx = 0xFF;
    u8_t dummy_rx;

    for (u8_t coeff_num = 0; coeff_num < 6 ; ++coeff_num ) {
        delay_us(600);
     614:	2096      	movs	r0, #150	; 0x96
     616:	4c2b      	ldr	r4, [pc, #172]	; (6c4 <readMS5803Coefficients+0xb8>)
     618:	0080      	lsls	r0, r0, #2
     61a:	47a0      	blx	r4
        u8_t _cmd = MS5803_CMD_PROM_READ + ((coeff_num+1)*2);
        delay_us(600);
     61c:	2096      	movs	r0, #150	; 0x96
     61e:	0080      	lsls	r0, r0, #2
     620:	47a0      	blx	r4
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     622:	2280      	movs	r2, #128	; 0x80
        pinLow(cs_baro);
//      dummy_rx = spiDataTransfer(SPI1, _cmd);
//      u8_t _byte1 = spiDataTransfer(SPI1,dummy_tx);
//      u8_t _byte2 = spiDataTransfer(SPI1,dummy_tx);
        byteOut(spi2SCK,spi2MOSI, _cmd);
     624:	4c28      	ldr	r4, [pc, #160]	; (6c8 <readMS5803Coefficients+0xbc>)
     626:	4b29      	ldr	r3, [pc, #164]	; (6cc <readMS5803Coefficients+0xc0>)
     628:	0212      	lsls	r2, r2, #8
     62a:	615a      	str	r2, [r3, #20]
     62c:	7863      	ldrb	r3, [r4, #1]
     62e:	7820      	ldrb	r0, [r4, #0]
     630:	78a2      	ldrb	r2, [r4, #2]
     632:	021b      	lsls	r3, r3, #8
     634:	4303      	orrs	r3, r0
     636:	0412      	lsls	r2, r2, #16
     638:	0019      	movs	r1, r3
     63a:	0013      	movs	r3, r2
     63c:	430b      	orrs	r3, r1
     63e:	79a1      	ldrb	r1, [r4, #6]
     640:	7966      	ldrb	r6, [r4, #5]
     642:	0209      	lsls	r1, r1, #8
     644:	4331      	orrs	r1, r6
     646:	0008      	movs	r0, r1
     648:	79e1      	ldrb	r1, [r4, #7]
     64a:	78e2      	ldrb	r2, [r4, #3]
     64c:	0409      	lsls	r1, r1, #16
     64e:	4301      	orrs	r1, r0
     650:	7a20      	ldrb	r0, [r4, #8]
     652:	7a66      	ldrb	r6, [r4, #9]
     654:	0612      	lsls	r2, r2, #24
     656:	0600      	lsls	r0, r0, #24
     658:	4308      	orrs	r0, r1
     65a:	431a      	orrs	r2, r3
     65c:	9700      	str	r7, [sp, #0]
     65e:	7923      	ldrb	r3, [r4, #4]
     660:	0031      	movs	r1, r6
     662:	4d1b      	ldr	r5, [pc, #108]	; (6d0 <readMS5803Coefficients+0xc4>)
     664:	9003      	str	r0, [sp, #12]
     666:	47a8      	blx	r5
        u8_t _byte1 = byteIn(spi2SCK,spi2MISO);
     668:	7ae3      	ldrb	r3, [r4, #11]
     66a:	0020      	movs	r0, r4
     66c:	7aa1      	ldrb	r1, [r4, #10]
     66e:	7b24      	ldrb	r4, [r4, #12]
     670:	021b      	lsls	r3, r3, #8
     672:	430b      	orrs	r3, r1
     674:	0424      	lsls	r4, r4, #16
     676:	001a      	movs	r2, r3
     678:	0023      	movs	r3, r4
     67a:	7b44      	ldrb	r4, [r0, #13]
     67c:	7b85      	ldrb	r5, [r0, #14]
     67e:	4313      	orrs	r3, r2
     680:	0624      	lsls	r4, r4, #24
     682:	431c      	orrs	r4, r3
     684:	0022      	movs	r2, r4
     686:	002b      	movs	r3, r5
     688:	9404      	str	r4, [sp, #16]
     68a:	0031      	movs	r1, r6
     68c:	4c11      	ldr	r4, [pc, #68]	; (6d4 <readMS5803Coefficients+0xc8>)
     68e:	9803      	ldr	r0, [sp, #12]
     690:	47a0      	blx	r4
        u8_t _byte2 = byteIn(spi2SCK,spi2MISO);
     692:	002b      	movs	r3, r5
        pinLow(cs_baro);
//      dummy_rx = spiDataTransfer(SPI1, _cmd);
//      u8_t _byte1 = spiDataTransfer(SPI1,dummy_tx);
//      u8_t _byte2 = spiDataTransfer(SPI1,dummy_tx);
        byteOut(spi2SCK,spi2MOSI, _cmd);
        u8_t _byte1 = byteIn(spi2SCK,spi2MISO);
     694:	9005      	str	r0, [sp, #20]
        u8_t _byte2 = byteIn(spi2SCK,spi2MISO);
     696:	9a04      	ldr	r2, [sp, #16]
     698:	9803      	ldr	r0, [sp, #12]
     69a:	0031      	movs	r1, r6
     69c:	4c0d      	ldr	r4, [pc, #52]	; (6d4 <readMS5803Coefficients+0xc8>)
     69e:	47a0      	blx	r4
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     6a0:	2280      	movs	r2, #128	; 0x80
     6a2:	4b0a      	ldr	r3, [pc, #40]	; (6cc <readMS5803Coefficients+0xc0>)
     6a4:	0212      	lsls	r2, r2, #8
     6a6:	619a      	str	r2, [r3, #24]
        pinHigh(cs_baro);
        my_barometer->coefficients_[coeff_num] = (_byte1 << 8) | _byte2;
     6a8:	9b05      	ldr	r3, [sp, #20]
     6aa:	021d      	lsls	r5, r3, #8
     6ac:	9b02      	ldr	r3, [sp, #8]
     6ae:	4328      	orrs	r0, r5
     6b0:	8018      	strh	r0, [r3, #0]
     6b2:	1cbb      	adds	r3, r7, #2
     6b4:	b2df      	uxtb	r7, r3
     6b6:	9b02      	ldr	r3, [sp, #8]
     6b8:	3302      	adds	r3, #2
     6ba:	9302      	str	r3, [sp, #8]
void readMS5803Coefficients(Barometer *my_barometer) {

    u8_t dummy_tx = 0xFF;
    u8_t dummy_rx;

    for (u8_t coeff_num = 0; coeff_num < 6 ; ++coeff_num ) {
     6bc:	2fae      	cmp	r7, #174	; 0xae
     6be:	d1a9      	bne.n	614 <readMS5803Coefficients+0x8>
        u8_t _byte2 = byteIn(spi2SCK,spi2MISO);
        pinHigh(cs_baro);
        my_barometer->coefficients_[coeff_num] = (_byte1 << 8) | _byte2;
    }

}
     6c0:	b007      	add	sp, #28
     6c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
     6c4:	00001161 	.word	0x00001161
     6c8:	00005c94 	.word	0x00005c94
     6cc:	41004400 	.word	0x41004400
     6d0:	00000eb9 	.word	0x00000eb9
     6d4:	00000f25 	.word	0x00000f25

000006d8 <initMS5803Barometer>:

void initMS5803Barometer(Barometer *my_barometer) {
     6d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     6da:	2680      	movs	r6, #128	; 0x80
    u8_t dummy_tx = 0xFF;
    u8_t dummy_rx;

    pinLow(cs_baro);
//   dummy_rx = spiDataTransfer(SPI1, MS5803_CMD_RES);
    byteOut(spi2SCK,spi2MOSI, MS5803_CMD_RES);
     6dc:	231e      	movs	r3, #30
     6de:	491a      	ldr	r1, [pc, #104]	; (748 <initMS5803Barometer+0x70>)
     6e0:	4d1a      	ldr	r5, [pc, #104]	; (74c <initMS5803Barometer+0x74>)
     6e2:	0236      	lsls	r6, r6, #8
     6e4:	616e      	str	r6, [r5, #20]
     6e6:	9300      	str	r3, [sp, #0]
     6e8:	784b      	ldrb	r3, [r1, #1]
     6ea:	780a      	ldrb	r2, [r1, #0]
     6ec:	021b      	lsls	r3, r3, #8
     6ee:	4313      	orrs	r3, r2
     6f0:	788a      	ldrb	r2, [r1, #2]
        my_barometer->coefficients_[coeff_num] = (_byte1 << 8) | _byte2;
    }

}

void initMS5803Barometer(Barometer *my_barometer) {
     6f2:	0004      	movs	r4, r0
    u8_t dummy_tx = 0xFF;
    u8_t dummy_rx;

    pinLow(cs_baro);
//   dummy_rx = spiDataTransfer(SPI1, MS5803_CMD_RES);
    byteOut(spi2SCK,spi2MOSI, MS5803_CMD_RES);
     6f4:	0412      	lsls	r2, r2, #16
     6f6:	0018      	movs	r0, r3
     6f8:	0013      	movs	r3, r2
     6fa:	78ca      	ldrb	r2, [r1, #3]
     6fc:	4303      	orrs	r3, r0
     6fe:	0612      	lsls	r2, r2, #24
     700:	1d4f      	adds	r7, r1, #5
     702:	431a      	orrs	r2, r3
     704:	7948      	ldrb	r0, [r1, #5]
     706:	790b      	ldrb	r3, [r1, #4]
     708:	7989      	ldrb	r1, [r1, #6]
     70a:	0209      	lsls	r1, r1, #8
     70c:	4301      	orrs	r1, r0
     70e:	78b8      	ldrb	r0, [r7, #2]
     710:	0400      	lsls	r0, r0, #16
     712:	4301      	orrs	r1, r0
     714:	78f8      	ldrb	r0, [r7, #3]
     716:	0600      	lsls	r0, r0, #24
     718:	4308      	orrs	r0, r1
     71a:	7939      	ldrb	r1, [r7, #4]
     71c:	4f0c      	ldr	r7, [pc, #48]	; (750 <initMS5803Barometer+0x78>)
     71e:	47b8      	blx	r7
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     720:	61ae      	str	r6, [r5, #24]
    pinHigh(cs_baro);
    delay_ms(200);
     722:	20c8      	movs	r0, #200	; 0xc8
     724:	4b0b      	ldr	r3, [pc, #44]	; (754 <initMS5803Barometer+0x7c>)
     726:	4798      	blx	r3
    readMS5803Coefficients(my_barometer);
     728:	0020      	movs	r0, r4
     72a:	4b0b      	ldr	r3, [pc, #44]	; (758 <initMS5803Barometer+0x80>)
     72c:	4798      	blx	r3

    my_barometer->heightCm = 4000;
     72e:	23fa      	movs	r3, #250	; 0xfa
     730:	011b      	lsls	r3, r3, #4
     732:	6223      	str	r3, [r4, #32]
    my_barometer->pressurePa = 10000;
     734:	4b09      	ldr	r3, [pc, #36]	; (75c <initMS5803Barometer+0x84>)
     736:	61a3      	str	r3, [r4, #24]
    my_barometer->rawPressureData = 4311550;
     738:	4b09      	ldr	r3, [pc, #36]	; (760 <initMS5803Barometer+0x88>)
     73a:	60e3      	str	r3, [r4, #12]
    my_barometer->rawTempatureData = 8387300;
     73c:	4b09      	ldr	r3, [pc, #36]	; (764 <initMS5803Barometer+0x8c>)
     73e:	6123      	str	r3, [r4, #16]
    my_barometer->temperatureCelcus = 2000;
     740:	23fa      	movs	r3, #250	; 0xfa
     742:	00db      	lsls	r3, r3, #3
     744:	6163      	str	r3, [r4, #20]




}
     746:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
     748:	00005c94 	.word	0x00005c94
     74c:	41004400 	.word	0x41004400
     750:	00000eb9 	.word	0x00000eb9
     754:	00001191 	.word	0x00001191
     758:	0000060d 	.word	0x0000060d
     75c:	00002710 	.word	0x00002710
     760:	0041c9fe 	.word	0x0041c9fe
     764:	007ffae4 	.word	0x007ffae4

00000768 <init>:
#include <util.h>
#include <boardDefines.h>
#include "math.h"


void init() {
     768:	b5f0      	push	{r4, r5, r6, r7, lr}
    SystemInit();
     76a:	4bbf      	ldr	r3, [pc, #764]	; (a68 <init+0x300>)
#include <util.h>
#include <boardDefines.h>
#include "math.h"


void init() {
     76c:	b085      	sub	sp, #20
    SystemInit();
     76e:	4798      	blx	r3
    GclkInit();
     770:	4bbe      	ldr	r3, [pc, #760]	; (a6c <init+0x304>)
     772:	4798      	blx	r3
    RtcInit();
     774:	4bbe      	ldr	r3, [pc, #760]	; (a70 <init+0x308>)
     776:	4798      	blx	r3
    delayInit();
     778:	4bbe      	ldr	r3, [pc, #760]	; (a74 <init+0x30c>)
     77a:	4798      	blx	r3
    adcInit();
     77c:	4bbe      	ldr	r3, [pc, #760]	; (a78 <init+0x310>)
     77e:	4798      	blx	r3
    dmaInit();
     780:	4bbe      	ldr	r3, [pc, #760]	; (a7c <init+0x314>)
     782:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     784:	2240      	movs	r2, #64	; 0x40
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     786:	21c1      	movs	r1, #193	; 0xc1

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     788:	4bbd      	ldr	r3, [pc, #756]	; (a80 <init+0x318>)
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     78a:	0089      	lsls	r1, r1, #2

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     78c:	601a      	str	r2, [r3, #0]
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     78e:	5858      	ldr	r0, [r3, r1]
     790:	4abc      	ldr	r2, [pc, #752]	; (a84 <init+0x31c>)
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     792:	2401      	movs	r4, #1
     794:	4002      	ands	r2, r0
     796:	505a      	str	r2, [r3, r1]
     798:	4bbb      	ldr	r3, [pc, #748]	; (a88 <init+0x320>)

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     79a:	2510      	movs	r5, #16
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     79c:	0019      	movs	r1, r3
     79e:	3154      	adds	r1, #84	; 0x54
     7a0:	780a      	ldrb	r2, [r1, #0]

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     7a2:	0018      	movs	r0, r3
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     7a4:	43a2      	bics	r2, r4
     7a6:	700a      	strb	r2, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     7a8:	2280      	movs	r2, #128	; 0x80
     7aa:	0352      	lsls	r2, r2, #13
     7ac:	609a      	str	r2, [r3, #8]

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     7ae:	220f      	movs	r2, #15
     7b0:	3033      	adds	r0, #51	; 0x33
     7b2:	7801      	ldrb	r1, [r0, #0]
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     7b4:	001e      	movs	r6, r3

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     7b6:	4391      	bics	r1, r2
     7b8:	4321      	orrs	r1, r4
     7ba:	7001      	strb	r1, [r0, #0]
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     7bc:	7cc1      	ldrb	r1, [r0, #19]
     7be:	36c3      	adds	r6, #195	; 0xc3
     7c0:	4321      	orrs	r1, r4
     7c2:	74c1      	strb	r1, [r0, #19]

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     7c4:	0019      	movs	r1, r3
     7c6:	31b1      	adds	r1, #177	; 0xb1
     7c8:	7808      	ldrb	r0, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     7ca:	001f      	movs	r7, r3

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     7cc:	4010      	ands	r0, r2
     7ce:	4328      	orrs	r0, r5
     7d0:	7008      	strb	r0, [r1, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     7d2:	7830      	ldrb	r0, [r6, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     7d4:	3788      	adds	r7, #136	; 0x88
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     7d6:	4320      	orrs	r0, r4
     7d8:	7030      	strb	r0, [r6, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     7da:	7808      	ldrb	r0, [r1, #0]
     7dc:	4010      	ands	r0, r2
     7de:	4328      	orrs	r0, r5
     7e0:	7008      	strb	r0, [r1, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     7e2:	7830      	ldrb	r0, [r6, #0]
     7e4:	4320      	orrs	r0, r4
     7e6:	7030      	strb	r0, [r6, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     7e8:	7d30      	ldrb	r0, [r6, #20]
     7ea:	43a0      	bics	r0, r4
     7ec:	7530      	strb	r0, [r6, #20]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     7ee:	2080      	movs	r0, #128	; 0x80
     7f0:	0400      	lsls	r0, r0, #16
     7f2:	9703      	str	r7, [sp, #12]
     7f4:	6038      	str	r0, [r7, #0]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     7f6:	60f8      	str	r0, [r7, #12]

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     7f8:	7808      	ldrb	r0, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     7fa:	003e      	movs	r6, r7

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     7fc:	4390      	bics	r0, r2
     7fe:	4320      	orrs	r0, r4
     800:	7008      	strb	r0, [r1, #0]
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     802:	20c2      	movs	r0, #194	; 0xc2
     804:	4684      	mov	ip, r0
     806:	449c      	add	ip, r3
     808:	4660      	mov	r0, ip
     80a:	4667      	mov	r7, ip
     80c:	7800      	ldrb	r0, [r0, #0]
     80e:	4320      	orrs	r0, r4
     810:	7038      	strb	r0, [r7, #0]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     812:	7808      	ldrb	r0, [r1, #0]
     814:	4390      	bics	r0, r2
     816:	4320      	orrs	r0, r4
     818:	7008      	strb	r0, [r1, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     81a:	0018      	movs	r0, r3
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     81c:	7839      	ldrb	r1, [r7, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     81e:	30d6      	adds	r0, #214	; 0xd6
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     820:	4321      	orrs	r1, r4
     822:	7039      	strb	r1, [r7, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     824:	7801      	ldrb	r1, [r0, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     826:	2702      	movs	r7, #2
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     828:	43a1      	bics	r1, r4
     82a:	7001      	strb	r1, [r0, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     82c:	2180      	movs	r1, #128	; 0x80
     82e:	9803      	ldr	r0, [sp, #12]
     830:	03c9      	lsls	r1, r1, #15
     832:	6001      	str	r1, [r0, #0]

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     834:	0018      	movs	r0, r3
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     836:	60f1      	str	r1, [r6, #12]

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     838:	3031      	adds	r0, #49	; 0x31
     83a:	7801      	ldrb	r1, [r0, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     83c:	3e3f      	subs	r6, #63	; 0x3f

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     83e:	4011      	ands	r1, r2
     840:	430d      	orrs	r5, r1
     842:	7005      	strb	r5, [r0, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     844:	001d      	movs	r5, r3
     846:	3543      	adds	r5, #67	; 0x43
     848:	7829      	ldrb	r1, [r5, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     84a:	46bc      	mov	ip, r7
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     84c:	4321      	orrs	r1, r4
     84e:	7029      	strb	r1, [r5, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     850:	7da9      	ldrb	r1, [r5, #22]
     852:	3505      	adds	r5, #5
     854:	43a1      	bics	r1, r4
     856:	7469      	strb	r1, [r5, #17]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     858:	2180      	movs	r1, #128	; 0x80
     85a:	0489      	lsls	r1, r1, #18
     85c:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     85e:	6159      	str	r1, [r3, #20]

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     860:	7801      	ldrb	r1, [r0, #0]
     862:	4391      	bics	r1, r2
     864:	4321      	orrs	r1, r4
     866:	7001      	strb	r1, [r0, #0]
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     868:	7c41      	ldrb	r1, [r0, #17]
     86a:	3011      	adds	r0, #17
     86c:	4321      	orrs	r1, r4
     86e:	7001      	strb	r1, [r0, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     870:	7d81      	ldrb	r1, [r0, #22]
     872:	43a1      	bics	r1, r4
     874:	7581      	strb	r1, [r0, #22]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     876:	2180      	movs	r1, #128	; 0x80
     878:	0449      	lsls	r1, r1, #17
     87a:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     87c:	6159      	str	r1, [r3, #20]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     87e:	7829      	ldrb	r1, [r5, #0]
     880:	43a1      	bics	r1, r4
     882:	7029      	strb	r1, [r5, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     884:	2180      	movs	r1, #128	; 0x80
     886:	0049      	lsls	r1, r1, #1
     888:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     88a:	7831      	ldrb	r1, [r6, #0]
     88c:	43a1      	bics	r1, r4
     88e:	7031      	strb	r1, [r6, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     890:	2180      	movs	r1, #128	; 0x80
     892:	0089      	lsls	r1, r1, #2
     894:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     896:	0019      	movs	r1, r3
     898:	314b      	adds	r1, #75	; 0x4b
     89a:	7808      	ldrb	r0, [r1, #0]
     89c:	43a0      	bics	r0, r4
     89e:	7008      	strb	r0, [r1, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     8a0:	7808      	ldrb	r0, [r1, #0]
     8a2:	4338      	orrs	r0, r7
     8a4:	7008      	strb	r0, [r1, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     8a6:	2080      	movs	r0, #128	; 0x80
     8a8:	0100      	lsls	r0, r0, #4
     8aa:	6058      	str	r0, [r3, #4]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     8ac:	4877      	ldr	r0, [pc, #476]	; (a8c <init+0x324>)
     8ae:	371e      	adds	r7, #30
     8b0:	7800      	ldrb	r0, [r0, #0]
     8b2:	4010      	ands	r0, r2
     8b4:	4338      	orrs	r0, r7
     8b6:	4f75      	ldr	r7, [pc, #468]	; (a8c <init+0x324>)
     8b8:	7038      	strb	r0, [r7, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     8ba:	7808      	ldrb	r0, [r1, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     8bc:	2720      	movs	r7, #32
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     8be:	4320      	orrs	r0, r4
     8c0:	7008      	strb	r0, [r1, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     8c2:	0018      	movs	r0, r3
     8c4:	3034      	adds	r0, #52	; 0x34
     8c6:	7801      	ldrb	r1, [r0, #0]
     8c8:	4011      	ands	r1, r2
     8ca:	4339      	orrs	r1, r7
     8cc:	7001      	strb	r1, [r0, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     8ce:	7831      	ldrb	r1, [r6, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     8d0:	4667      	mov	r7, ip
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     8d2:	4321      	orrs	r1, r4
     8d4:	7031      	strb	r1, [r6, #0]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     8d6:	4666      	mov	r6, ip
     8d8:	7801      	ldrb	r1, [r0, #0]
     8da:	4391      	bics	r1, r2
     8dc:	4331      	orrs	r1, r6
     8de:	7001      	strb	r1, [r0, #0]
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     8e0:	7829      	ldrb	r1, [r5, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     8e2:	3096      	adds	r0, #150	; 0x96
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     8e4:	4321      	orrs	r1, r4
     8e6:	7029      	strb	r1, [r5, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     8e8:	7801      	ldrb	r1, [r0, #0]
     8ea:	001e      	movs	r6, r3
     8ec:	43a1      	bics	r1, r4
     8ee:	7001      	strb	r1, [r0, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     8f0:	2180      	movs	r1, #128	; 0x80
     8f2:	9803      	ldr	r0, [sp, #12]
     8f4:	00c9      	lsls	r1, r1, #3
     8f6:	6001      	str	r1, [r0, #0]
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     8f8:	0018      	movs	r0, r3
     8fa:	3098      	adds	r0, #152	; 0x98
     8fc:	6001      	str	r1, [r0, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     8fe:	78a8      	ldrb	r0, [r5, #2]
     900:	3651      	adds	r6, #81	; 0x51
     902:	43a0      	bics	r0, r4
     904:	70a8      	strb	r0, [r5, #2]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     906:	6099      	str	r1, [r3, #8]
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     908:	6199      	str	r1, [r3, #24]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     90a:	7a29      	ldrb	r1, [r5, #8]
     90c:	43a1      	bics	r1, r4
     90e:	7229      	strb	r1, [r5, #8]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     910:	2180      	movs	r1, #128	; 0x80
     912:	0249      	lsls	r1, r1, #9
     914:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     916:	7831      	ldrb	r1, [r6, #0]
     918:	43a1      	bics	r1, r4
     91a:	7031      	strb	r1, [r6, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     91c:	2180      	movs	r1, #128	; 0x80
     91e:	0289      	lsls	r1, r1, #10
     920:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     922:	0019      	movs	r1, r3
     924:	3153      	adds	r1, #83	; 0x53
     926:	7808      	ldrb	r0, [r1, #0]
     928:	43a0      	bics	r0, r4
     92a:	7008      	strb	r0, [r1, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     92c:	7808      	ldrb	r0, [r1, #0]
     92e:	4338      	orrs	r0, r7
     930:	7008      	strb	r0, [r1, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     932:	001f      	movs	r7, r3


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     934:	2080      	movs	r0, #128	; 0x80
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     936:	3739      	adds	r7, #57	; 0x39


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     938:	0300      	lsls	r0, r0, #12
     93a:	6058      	str	r0, [r3, #4]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     93c:	9703      	str	r7, [sp, #12]
     93e:	7838      	ldrb	r0, [r7, #0]
     940:	2720      	movs	r7, #32
     942:	4010      	ands	r0, r2
     944:	4338      	orrs	r0, r7
     946:	9f03      	ldr	r7, [sp, #12]
     948:	7038      	strb	r0, [r7, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     94a:	7808      	ldrb	r0, [r1, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     94c:	2720      	movs	r7, #32
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     94e:	4320      	orrs	r0, r4
     950:	7008      	strb	r0, [r1, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     952:	0018      	movs	r0, r3
     954:	3038      	adds	r0, #56	; 0x38
     956:	7801      	ldrb	r1, [r0, #0]
     958:	4011      	ands	r1, r2
     95a:	4339      	orrs	r1, r7
     95c:	7001      	strb	r1, [r0, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     95e:	7831      	ldrb	r1, [r6, #0]
     960:	4321      	orrs	r1, r4
     962:	7031      	strb	r1, [r6, #0]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     964:	4666      	mov	r6, ip
     966:	7801      	ldrb	r1, [r0, #0]
     968:	4391      	bics	r1, r2
     96a:	4331      	orrs	r1, r6
     96c:	7001      	strb	r1, [r0, #0]
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     96e:	7a29      	ldrb	r1, [r5, #8]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     970:	3014      	adds	r0, #20
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     972:	4321      	orrs	r1, r4
     974:	7229      	strb	r1, [r5, #8]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     976:	7981      	ldrb	r1, [r0, #6]
     978:	43a1      	bics	r1, r4
     97a:	7181      	strb	r1, [r0, #6]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     97c:	2180      	movs	r1, #128	; 0x80
     97e:	02c9      	lsls	r1, r1, #11
     980:	6099      	str	r1, [r3, #8]
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     982:	6199      	str	r1, [r3, #24]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     984:	7801      	ldrb	r1, [r0, #0]
     986:	43a1      	bics	r1, r4
     988:	7001      	strb	r1, [r0, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     98a:	2180      	movs	r1, #128	; 0x80
     98c:	0149      	lsls	r1, r1, #5
     98e:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     990:	7881      	ldrb	r1, [r0, #2]
     992:	43a1      	bics	r1, r4
     994:	7081      	strb	r1, [r0, #2]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     996:	2180      	movs	r1, #128	; 0x80
     998:	01c9      	lsls	r1, r1, #7
     99a:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     99c:	0019      	movs	r1, r3
     99e:	314d      	adds	r1, #77	; 0x4d
     9a0:	7808      	ldrb	r0, [r1, #0]
     9a2:	43a0      	bics	r0, r4
     9a4:	7008      	strb	r0, [r1, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     9a6:	7808      	ldrb	r0, [r1, #0]
     9a8:	4330      	orrs	r0, r6
     9aa:	7008      	strb	r0, [r1, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     9ac:	2180      	movs	r1, #128	; 0x80
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     9ae:	0018      	movs	r0, r3


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     9b0:	0189      	lsls	r1, r1, #6
     9b2:	6059      	str	r1, [r3, #4]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     9b4:	304f      	adds	r0, #79	; 0x4f
     9b6:	7801      	ldrb	r1, [r0, #0]
     9b8:	43a1      	bics	r1, r4
     9ba:	7001      	strb	r1, [r0, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     9bc:	2180      	movs	r1, #128	; 0x80
     9be:	0209      	lsls	r1, r1, #8
     9c0:	6099      	str	r1, [r3, #8]
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     9c2:	6199      	str	r1, [r3, #24]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     9c4:	0019      	movs	r1, r3
     9c6:	3155      	adds	r1, #85	; 0x55
     9c8:	7808      	ldrb	r0, [r1, #0]
     9ca:	43a0      	bics	r0, r4
     9cc:	7008      	strb	r0, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     9ce:	2080      	movs	r0, #128	; 0x80
     9d0:	0380      	lsls	r0, r0, #14
     9d2:	6098      	str	r0, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
}


inline static void pinCfg(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].reg = p.cfg;
     9d4:	2040      	movs	r0, #64	; 0x40
     9d6:	7008      	strb	r0, [r1, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     9d8:	7848      	ldrb	r0, [r1, #1]
     9da:	43a0      	bics	r0, r4
     9dc:	7048      	strb	r0, [r1, #1]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     9de:	2080      	movs	r0, #128	; 0x80
     9e0:	03c0      	lsls	r0, r0, #15
     9e2:	6098      	str	r0, [r3, #8]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     9e4:	0018      	movs	r0, r3
     9e6:	303b      	adds	r0, #59	; 0x3b
     9e8:	7805      	ldrb	r5, [r0, #0]
     9ea:	4395      	bics	r5, r2
     9ec:	4335      	orrs	r5, r6
     9ee:	7005      	strb	r5, [r0, #0]
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     9f0:	784d      	ldrb	r5, [r1, #1]
     9f2:	4325      	orrs	r5, r4
     9f4:	704d      	strb	r5, [r1, #1]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     9f6:	788d      	ldrb	r5, [r1, #2]
     9f8:	43a5      	bics	r5, r4
     9fa:	708d      	strb	r5, [r1, #2]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     9fc:	788d      	ldrb	r5, [r1, #2]
     9fe:	4335      	orrs	r5, r6
     a00:	708d      	strb	r5, [r1, #2]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     a02:	2580      	movs	r5, #128	; 0x80
     a04:	042d      	lsls	r5, r5, #16
     a06:	605d      	str	r5, [r3, #4]

//    sercomClockEnable(SPI2, 3, 4);
//   sercomSpiMasterInit(SPI2, 3, 0, 0, 0, 0x00);

    sercomClockEnable(SPI0, 3, 4);
    sercomSpiMasterInit(SPI0, 3, 0, 0, 0, 0x00);
     a08:	2500      	movs	r5, #0
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     a0a:	7803      	ldrb	r3, [r0, #0]
    pinMux(RxPo);

//    sercomClockEnable(SPI2, 3, 4);
//   sercomSpiMasterInit(SPI2, 3, 0, 0, 0, 0x00);

    sercomClockEnable(SPI0, 3, 4);
     a0c:	4e20      	ldr	r6, [pc, #128]	; (a90 <init+0x328>)
     a0e:	401a      	ands	r2, r3
     a10:	433a      	orrs	r2, r7
     a12:	7002      	strb	r2, [r0, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     a14:	788b      	ldrb	r3, [r1, #2]
     a16:	2204      	movs	r2, #4
     a18:	4323      	orrs	r3, r4
     a1a:	708b      	strb	r3, [r1, #2]
     a1c:	2000      	movs	r0, #0
     a1e:	2103      	movs	r1, #3
     a20:	47b0      	blx	r6
    sercomSpiMasterInit(SPI0, 3, 0, 0, 0, 0x00);
     a22:	002b      	movs	r3, r5
     a24:	002a      	movs	r2, r5
     a26:	0028      	movs	r0, r5
     a28:	4f1a      	ldr	r7, [pc, #104]	; (a94 <init+0x32c>)
     a2a:	9501      	str	r5, [sp, #4]
     a2c:	9500      	str	r5, [sp, #0]
     a2e:	2103      	movs	r1, #3
     a30:	47b8      	blx	r7

    sercomClockEnable(SPI1, 3, 4);
     a32:	0020      	movs	r0, r4
     a34:	2204      	movs	r2, #4
     a36:	2103      	movs	r1, #3
     a38:	47b0      	blx	r6
    sercomSpiMasterInit(SPI1, 3, 0, 0, 0, 0x00);
     a3a:	002b      	movs	r3, r5
     a3c:	002a      	movs	r2, r5
     a3e:	0020      	movs	r0, r4
     a40:	9501      	str	r5, [sp, #4]
     a42:	9500      	str	r5, [sp, #0]
     a44:	2103      	movs	r1, #3
     a46:	47b8      	blx	r7

    sercomClockEnable(USART3, 4, 8);
     a48:	2208      	movs	r2, #8
     a4a:	2104      	movs	r1, #4
     a4c:	2003      	movs	r0, #3
     a4e:	47b0      	blx	r6
    sercomUartInit(USART3,1,0,62180);
     a50:	0021      	movs	r1, r4
     a52:	002a      	movs	r2, r5
     a54:	2003      	movs	r0, #3
     a56:	4b10      	ldr	r3, [pc, #64]	; (a98 <init+0x330>)
     a58:	4c10      	ldr	r4, [pc, #64]	; (a9c <init+0x334>)
     a5a:	47a0      	blx	r4

    TC4Init();
     a5c:	4b10      	ldr	r3, [pc, #64]	; (aa0 <init+0x338>)
     a5e:	4798      	blx	r3
    TC5Init();
     a60:	4b10      	ldr	r3, [pc, #64]	; (aa4 <init+0x33c>)
     a62:	4798      	blx	r3
}
     a64:	b005      	add	sp, #20
     a66:	bdf0      	pop	{r4, r5, r6, r7, pc}
     a68:	000001d5 	.word	0x000001d5
     a6c:	00000fed 	.word	0x00000fed
     a70:	00001075 	.word	0x00001075
     a74:	00001141 	.word	0x00001141
     a78:	00000dd5 	.word	0x00000dd5
     a7c:	000012e1 	.word	0x000012e1
     a80:	e000e100 	.word	0xe000e100
     a84:	ff00ffff 	.word	0xff00ffff
     a88:	41004400 	.word	0x41004400
     a8c:	41004435 	.word	0x41004435
     a90:	00002545 	.word	0x00002545
     a94:	000025a9 	.word	0x000025a9
     a98:	0000f2e4 	.word	0x0000f2e4
     a9c:	0000260d 	.word	0x0000260d
     aa0:	00001211 	.word	0x00001211
     aa4:	00001279 	.word	0x00001279

00000aa8 <startUp>:

void startUp(Altimeter *my_altimeter) {
     aa8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     aaa:	0007      	movs	r7, r0

    beep(400);
     aac:	20c8      	movs	r0, #200	; 0xc8
     aae:	4b32      	ldr	r3, [pc, #200]	; (b78 <startUp+0xd0>)
     ab0:	0040      	lsls	r0, r0, #1
     ab2:	4798      	blx	r3

    u32_t startupTime = millis();
     ab4:	4c31      	ldr	r4, [pc, #196]	; (b7c <startUp+0xd4>)
     ab6:	47a0      	blx	r4
     ab8:	0006      	movs	r6, r0
     aba:	9401      	str	r4, [sp, #4]

    while((millis() - startupTime) < 15000) {
     abc:	9b01      	ldr	r3, [sp, #4]
     abe:	4798      	blx	r3
     ac0:	4b2f      	ldr	r3, [pc, #188]	; (b80 <startUp+0xd8>)
     ac2:	1b80      	subs	r0, r0, r6
     ac4:	4298      	cmp	r0, r3
     ac6:	d854      	bhi.n	b72 <startUp+0xca>

        if (USARTconnectionAvaliable()) {
     ac8:	4b2e      	ldr	r3, [pc, #184]	; (b84 <startUp+0xdc>)
     aca:	4798      	blx	r3
     acc:	2800      	cmp	r0, #0
     ace:	d0f5      	beq.n	abc <startUp+0x14>

            my_altimeter->myFlightState = flightIdle;
     ad0:	2301      	movs	r3, #1

            //wait for user to tell us what they want
            while(sercom(USART3)->SPI.INTFLAG.bit.RXC == 0);
     ad2:	4a2d      	ldr	r2, [pc, #180]	; (b88 <startUp+0xe0>)

    while((millis() - startupTime) < 15000) {

        if (USARTconnectionAvaliable()) {

            my_altimeter->myFlightState = flightIdle;
     ad4:	703b      	strb	r3, [r7, #0]

            //wait for user to tell us what they want
            while(sercom(USART3)->SPI.INTFLAG.bit.RXC == 0);
     ad6:	7e13      	ldrb	r3, [r2, #24]
     ad8:	075b      	lsls	r3, r3, #29
     ada:	d5fc      	bpl.n	ad6 <startUp+0x2e>
            u8_t option = usartDataIn(USART3);
     adc:	2003      	movs	r0, #3
     ade:	4d2b      	ldr	r5, [pc, #172]	; (b8c <startUp+0xe4>)
     ae0:	47a8      	blx	r5
     ae2:	1e04      	subs	r4, r0, #0

            //user wants to read flight logs
            if (option == 0x4C) {
     ae4:	2c4c      	cmp	r4, #76	; 0x4c
     ae6:	d13c      	bne.n	b62 <startUp+0xba>
     ae8:	2400      	movs	r4, #0

                //send list of available flight logs
                for (u8_t flightLog = 0; flightLog < 11; ++flightLog) {

                    if (isFlightLogged(flightLog)) {
     aea:	0020      	movs	r0, r4
     aec:	4b28      	ldr	r3, [pc, #160]	; (b90 <startUp+0xe8>)
     aee:	4798      	blx	r3
     af0:	2800      	cmp	r0, #0
     af2:	d005      	beq.n	b00 <startUp+0x58>

                        usartDataOut(USART3, flightLog + 0x30);
     af4:	0021      	movs	r1, r4
     af6:	3130      	adds	r1, #48	; 0x30
     af8:	b2c9      	uxtb	r1, r1
     afa:	2003      	movs	r0, #3
     afc:	4b25      	ldr	r3, [pc, #148]	; (b94 <startUp+0xec>)
     afe:	4798      	blx	r3

            //user wants to read flight logs
            if (option == 0x4C) {

                //send list of available flight logs
                for (u8_t flightLog = 0; flightLog < 11; ++flightLog) {
     b00:	3401      	adds	r4, #1
     b02:	b2e4      	uxtb	r4, r4
     b04:	2c0b      	cmp	r4, #11
     b06:	d1f0      	bne.n	aea <startUp+0x42>

                        usartDataOut(USART3, flightLog + 0x30);
                    }
                }
                //done sending flight numbers
                usartDataOut(USART3, 0x0F);
     b08:	210f      	movs	r1, #15
     b0a:	2003      	movs	r0, #3
     b0c:	4c21      	ldr	r4, [pc, #132]	; (b94 <startUp+0xec>)
     b0e:	47a0      	blx	r4

                //wait for user to pick which flight to read
                while(sercom(USART3)->SPI.INTFLAG.bit.RXC == 0);
     b10:	4b1d      	ldr	r3, [pc, #116]	; (b88 <startUp+0xe0>)
     b12:	7e1b      	ldrb	r3, [r3, #24]
     b14:	075b      	lsls	r3, r3, #29
     b16:	d5fb      	bpl.n	b10 <startUp+0x68>
                u8_t flightToRead = usartDataIn(USART3) - 0x30;
     b18:	2003      	movs	r0, #3
     b1a:	47a8      	blx	r5
     b1c:	3830      	subs	r0, #48	; 0x30
     b1e:	b2c5      	uxtb	r5, r0


                u32_t flightStartAddress = getFlightStartAddress(flightToRead);
     b20:	0028      	movs	r0, r5
     b22:	4b1d      	ldr	r3, [pc, #116]	; (b98 <startUp+0xf0>)
     b24:	4798      	blx	r3
                u32_t flightEndAddress = FindFlightEndingAddress(flightToRead);
     b26:	4b1d      	ldr	r3, [pc, #116]	; (b9c <startUp+0xf4>)
                //wait for user to pick which flight to read
                while(sercom(USART3)->SPI.INTFLAG.bit.RXC == 0);
                u8_t flightToRead = usartDataIn(USART3) - 0x30;


                u32_t flightStartAddress = getFlightStartAddress(flightToRead);
     b28:	0007      	movs	r7, r0
                u32_t flightEndAddress = FindFlightEndingAddress(flightToRead);
     b2a:	0028      	movs	r0, r5
     b2c:	4798      	blx	r3
     b2e:	0006      	movs	r6, r0

                //inform of page numbers
                u16_t pagesToSend = (flightEndAddress  - flightStartAddress) >> 8;
     b30:	1bc5      	subs	r5, r0, r7
     b32:	0a2d      	lsrs	r5, r5, #8
                usartDataOut(USART3, pagesToSend >> 0);
     b34:	b2e9      	uxtb	r1, r5
     b36:	2003      	movs	r0, #3
     b38:	47a0      	blx	r4
                usartDataOut(USART3, pagesToSend >> 8);
     b3a:	b2a9      	uxth	r1, r5
     b3c:	0a09      	lsrs	r1, r1, #8
     b3e:	2003      	movs	r0, #3
     b40:	47a0      	blx	r4

                //send flight end address for % full
                usartDataOut(USART3, flightEndAddress >> 0);
     b42:	b2f1      	uxtb	r1, r6
     b44:	2003      	movs	r0, #3
     b46:	47a0      	blx	r4
                usartDataOut(USART3, flightEndAddress >> 8);
     b48:	0a31      	lsrs	r1, r6, #8
     b4a:	b2c9      	uxtb	r1, r1
     b4c:	2003      	movs	r0, #3
     b4e:	47a0      	blx	r4
                usartDataOut(USART3, flightEndAddress >> 16);
     b50:	0c31      	lsrs	r1, r6, #16
     b52:	b2c9      	uxtb	r1, r1
     b54:	2003      	movs	r0, #3
     b56:	47a0      	blx	r4



                //USART out the flights pages
                sendTheasePagesToComputer(flightStartAddress, flightEndAddress);
     b58:	0031      	movs	r1, r6
     b5a:	0038      	movs	r0, r7
     b5c:	4b10      	ldr	r3, [pc, #64]	; (ba0 <startUp+0xf8>)
     b5e:	4798      	blx	r3

                break;
     b60:	e007      	b.n	b72 <startUp+0xca>
            }
            //user wants to erase chip
            if (option == 0x45) { // 'E'
     b62:	2845      	cmp	r0, #69	; 0x45
     b64:	d1aa      	bne.n	abc <startUp+0x14>
                AT25SFChipErase();
     b66:	4b0f      	ldr	r3, [pc, #60]	; (ba4 <startUp+0xfc>)
     b68:	4798      	blx	r3

                usartDataOut(USART3, 'E');
     b6a:	0021      	movs	r1, r4
     b6c:	2003      	movs	r0, #3
     b6e:	4b09      	ldr	r3, [pc, #36]	; (b94 <startUp+0xec>)
     b70:	4798      	blx	r3

            }
        }
    }

    startupJingle();
     b72:	4b0d      	ldr	r3, [pc, #52]	; (ba8 <startUp+0x100>)
     b74:	4798      	blx	r3
}
     b76:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
     b78:	00000f79 	.word	0x00000f79
     b7c:	000011dd 	.word	0x000011dd
     b80:	00003a97 	.word	0x00003a97
     b84:	00000d59 	.word	0x00000d59
     b88:	42001400 	.word	0x42001400
     b8c:	00002681 	.word	0x00002681
     b90:	00002005 	.word	0x00002005
     b94:	00002669 	.word	0x00002669
     b98:	00001fdd 	.word	0x00001fdd
     b9c:	00002051 	.word	0x00002051
     ba0:	00000d8d 	.word	0x00000d8d
     ba4:	000001e5 	.word	0x000001e5
     ba8:	00000fb5 	.word	0x00000fb5

00000bac <main>:

int main(void) {
     bac:	b5f0      	push	{r4, r5, r6, r7, lr}
     bae:	4c45      	ldr	r4, [pc, #276]	; (cc4 <main+0x118>)

    init();
     bb0:	4b45      	ldr	r3, [pc, #276]	; (cc8 <main+0x11c>)
    }

    startupJingle();
}

int main(void) {
     bb2:	44a5      	add	sp, r4

    init();

    Altimeter my_altimeter;
    my_altimeter.myFlightState = flightStatrup;
     bb4:	2400      	movs	r4, #0
    startupJingle();
}

int main(void) {

    init();
     bb6:	4798      	blx	r3

    Altimeter my_altimeter;
    my_altimeter.myFlightState = flightStatrup;
     bb8:	ab02      	add	r3, sp, #8
     bba:	701c      	strb	r4, [r3, #0]
    initMS5803Barometer(&my_altimeter.myBarometer);
     bbc:	a804      	add	r0, sp, #16
     bbe:	4b43      	ldr	r3, [pc, #268]	; (ccc <main+0x120>)
     bc0:	4798      	blx	r3
    IMUinit();
     bc2:	4b43      	ldr	r3, [pc, #268]	; (cd0 <main+0x124>)
     bc4:	4798      	blx	r3

    my_altimeter.myFlashMemory.pageLocation = 0x00;
     bc6:	2381      	movs	r3, #129	; 0x81
     bc8:	aa02      	add	r2, sp, #8
     bca:	009b      	lsls	r3, r3, #2
    my_altimeter.myFlashMemory.pageReady = false;
     bcc:	4f41      	ldr	r7, [pc, #260]	; (cd4 <main+0x128>)
    Altimeter my_altimeter;
    my_altimeter.myFlightState = flightStatrup;
    initMS5803Barometer(&my_altimeter.myBarometer);
    IMUinit();

    my_altimeter.myFlashMemory.pageLocation = 0x00;
     bce:	54d4      	strb	r4, [r2, r3]
    my_altimeter.myFlashMemory.pageReady = false;


    /* this looks for a USART connection	 */
    startUp(&my_altimeter);
     bd0:	0010      	movs	r0, r2
     bd2:	4b41      	ldr	r3, [pc, #260]	; (cd8 <main+0x12c>)
    my_altimeter.myFlightState = flightStatrup;
    initMS5803Barometer(&my_altimeter.myBarometer);
    IMUinit();

    my_altimeter.myFlashMemory.pageLocation = 0x00;
    my_altimeter.myFlashMemory.pageReady = false;
     bd4:	55d4      	strb	r4, [r2, r7]


    /* this looks for a USART connection	 */
    startUp(&my_altimeter);
     bd6:	4798      	blx	r3

    //my_altimeter.myFlightState = flightIdle;


    flight(&my_altimeter);
     bd8:	a802      	add	r0, sp, #8
     bda:	4c40      	ldr	r4, [pc, #256]	; (cdc <main+0x130>)
     bdc:	47a0      	blx	r4

    sampleTaken();
     bde:	4d40      	ldr	r5, [pc, #256]	; (ce0 <main+0x134>)
     be0:	47a8      	blx	r5

    computeKalmanGains(&my_altimeter.myKalmanFilter);
     be2:	a814      	add	r0, sp, #80	; 0x50
     be4:	4b3f      	ldr	r3, [pc, #252]	; (ce4 <main+0x138>)
     be6:	4798      	blx	r3

    u32_t timeNow = millis();
     be8:	4e3f      	ldr	r6, [pc, #252]	; (ce8 <main+0x13c>)
     bea:	47b0      	blx	r6
     bec:	9701      	str	r7, [sp, #4]
     bee:	9000      	str	r0, [sp, #0]
    while((millis() - timeNow) < 4000) {
     bf0:	47b0      	blx	r6
     bf2:	9b00      	ldr	r3, [sp, #0]
     bf4:	1ac0      	subs	r0, r0, r3
     bf6:	4b3d      	ldr	r3, [pc, #244]	; (cec <main+0x140>)
     bf8:	4298      	cmp	r0, r3
     bfa:	d808      	bhi.n	c0e <main+0x62>
        sampleTick(&my_altimeter);
     bfc:	a802      	add	r0, sp, #8
     bfe:	4b3c      	ldr	r3, [pc, #240]	; (cf0 <main+0x144>)
     c00:	4798      	blx	r3
        computeKalmanStates(&my_altimeter);
     c02:	a802      	add	r0, sp, #8
     c04:	4b3b      	ldr	r3, [pc, #236]	; (cf4 <main+0x148>)
     c06:	4798      	blx	r3
        flight(&my_altimeter);
     c08:	a802      	add	r0, sp, #8
     c0a:	47a0      	blx	r4
     c0c:	e7f0      	b.n	bf0 <main+0x44>
    }

    if (my_altimeter.myFlightState != flightIdle) {
     c0e:	ab02      	add	r3, sp, #8
     c10:	781b      	ldrb	r3, [r3, #0]
     c12:	2b01      	cmp	r3, #1
     c14:	d005      	beq.n	c22 <main+0x76>
        findNewFlightStart(&my_altimeter);
     c16:	a802      	add	r0, sp, #8
     c18:	4b37      	ldr	r3, [pc, #220]	; (cf8 <main+0x14c>)
     c1a:	4798      	blx	r3
        logFlight(&my_altimeter);
     c1c:	a802      	add	r0, sp, #8
     c1e:	4b37      	ldr	r3, [pc, #220]	; (cfc <main+0x150>)
     c20:	4798      	blx	r3
    }

    sampleTaken();
     c22:	47a8      	blx	r5
    writeLog = false;
     c24:	2300      	movs	r3, #0
            flight(&my_altimeter);
            computeKalmanStates(&my_altimeter);


            if (my_altimeter.batFloat < 3.5) {
                my_altimeter.myFlightState = flightIdle;
     c26:	2701      	movs	r7, #1
        findNewFlightStart(&my_altimeter);
        logFlight(&my_altimeter);
    }

    sampleTaken();
    writeLog = false;
     c28:	4d35      	ldr	r5, [pc, #212]	; (d00 <main+0x154>)
     c2a:	702b      	strb	r3, [r5, #0]


    while (1) {

        if (takeSample()) {
     c2c:	4b35      	ldr	r3, [pc, #212]	; (d04 <main+0x158>)
     c2e:	4798      	blx	r3
     c30:	2800      	cmp	r0, #0
     c32:	d029      	beq.n	c88 <main+0xdc>
            sampleTick(&my_altimeter);
     c34:	4b2e      	ldr	r3, [pc, #184]	; (cf0 <main+0x144>)
     c36:	a802      	add	r0, sp, #8
     c38:	4798      	blx	r3
            flight(&my_altimeter);
     c3a:	a802      	add	r0, sp, #8
     c3c:	47a0      	blx	r4
            computeKalmanStates(&my_altimeter);
     c3e:	a802      	add	r0, sp, #8
     c40:	4b2c      	ldr	r3, [pc, #176]	; (cf4 <main+0x148>)
     c42:	4798      	blx	r3


            if (my_altimeter.batFloat < 3.5) {
     c44:	22c3      	movs	r2, #195	; 0xc3
     c46:	ab02      	add	r3, sp, #8
     c48:	0092      	lsls	r2, r2, #2
     c4a:	5898      	ldr	r0, [r3, r2]
     c4c:	492e      	ldr	r1, [pc, #184]	; (d08 <main+0x15c>)
     c4e:	4b2f      	ldr	r3, [pc, #188]	; (d0c <main+0x160>)
     c50:	4798      	blx	r3
     c52:	2800      	cmp	r0, #0
     c54:	d018      	beq.n	c88 <main+0xdc>
                my_altimeter.myFlightState = flightIdle;
                beep(300);
     c56:	2096      	movs	r0, #150	; 0x96
            flight(&my_altimeter);
            computeKalmanStates(&my_altimeter);


            if (my_altimeter.batFloat < 3.5) {
                my_altimeter.myFlightState = flightIdle;
     c58:	ab02      	add	r3, sp, #8
                beep(300);
     c5a:	0040      	lsls	r0, r0, #1
     c5c:	4e2c      	ldr	r6, [pc, #176]	; (d10 <main+0x164>)
            flight(&my_altimeter);
            computeKalmanStates(&my_altimeter);


            if (my_altimeter.batFloat < 3.5) {
                my_altimeter.myFlightState = flightIdle;
     c5e:	701f      	strb	r7, [r3, #0]
                beep(300);
     c60:	47b0      	blx	r6
                delay_ms(80);
     c62:	4b2c      	ldr	r3, [pc, #176]	; (d14 <main+0x168>)
     c64:	2050      	movs	r0, #80	; 0x50
     c66:	4798      	blx	r3
                beep(300);
     c68:	2096      	movs	r0, #150	; 0x96
     c6a:	0040      	lsls	r0, r0, #1
     c6c:	47b0      	blx	r6
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     c6e:	2280      	movs	r2, #128	; 0x80
     c70:	4b29      	ldr	r3, [pc, #164]	; (d18 <main+0x16c>)
     c72:	0392      	lsls	r2, r2, #14
     c74:	615a      	str	r2, [r3, #20]
     c76:	2280      	movs	r2, #128	; 0x80
     c78:	0352      	lsls	r2, r2, #13
     c7a:	615a      	str	r2, [r3, #20]
                pinLow(buzzerPin);
                pinLow(LedPin);
                TC4->COUNT8.CTRLA.reg = 0;
     c7c:	2300      	movs	r3, #0
     c7e:	4a27      	ldr	r2, [pc, #156]	; (d1c <main+0x170>)
     c80:	8013      	strh	r3, [r2, #0]
                TC5->COUNT8.CTRLA.reg = 0;
     c82:	4a27      	ldr	r2, [pc, #156]	; (d20 <main+0x174>)
     c84:	8013      	strh	r3, [r2, #0]
                writeLog = false;
     c86:	702b      	strb	r3, [r5, #0]
            }
        }

        if (writeLog) {
     c88:	782b      	ldrb	r3, [r5, #0]
     c8a:	2b00      	cmp	r3, #0
     c8c:	d0ce      	beq.n	c2c <main+0x80>
            writeLog = false;
     c8e:	2600      	movs	r6, #0



            logSensors(&my_altimeter);
     c90:	4b24      	ldr	r3, [pc, #144]	; (d24 <main+0x178>)
     c92:	a802      	add	r0, sp, #8
                writeLog = false;
            }
        }

        if (writeLog) {
            writeLog = false;
     c94:	702e      	strb	r6, [r5, #0]



            logSensors(&my_altimeter);
     c96:	4798      	blx	r3

            if (my_altimeter.myFlashMemory.pageReady) {
     c98:	9a01      	ldr	r2, [sp, #4]
     c9a:	ab02      	add	r3, sp, #8
     c9c:	5c9b      	ldrb	r3, [r3, r2]
     c9e:	42b3      	cmp	r3, r6
     ca0:	d0c4      	beq.n	c2c <main+0x80>
                my_altimeter.myFlashMemory.pageReady = false;
     ca2:	4b0c      	ldr	r3, [pc, #48]	; (cd4 <main+0x128>)
     ca4:	aa02      	add	r2, sp, #8
     ca6:	54d6      	strb	r6, [r2, r3]
}


inline static void pinToggle(Pin p) {
    PORT->Group[p.group].OUTTGL.reg = (1<<p.pin);
     ca8:	2280      	movs	r2, #128	; 0x80
     caa:	4b1b      	ldr	r3, [pc, #108]	; (d18 <main+0x16c>)
     cac:	0352      	lsls	r2, r2, #13
     cae:	61da      	str	r2, [r3, #28]

                pinToggle(LedPin);

                u8_t bytesWritten = AT25SEWritePage(my_altimeter.myFlashMemory.currentAddress,my_altimeter.myFlashMemory.pageToWrite);
     cb0:	a943      	add	r1, sp, #268	; 0x10c
     cb2:	4b1d      	ldr	r3, [pc, #116]	; (d28 <main+0x17c>)
     cb4:	9841      	ldr	r0, [sp, #260]	; 0x104
     cb6:	4798      	blx	r3
                my_altimeter.myFlashMemory.currentAddress = (my_altimeter.myFlashMemory.currentAddress + 0x100);
     cb8:	9b41      	ldr	r3, [sp, #260]	; 0x104
     cba:	3301      	adds	r3, #1
     cbc:	33ff      	adds	r3, #255	; 0xff
     cbe:	9341      	str	r3, [sp, #260]	; 0x104
     cc0:	e7b4      	b.n	c2c <main+0x80>
     cc2:	46c0      	nop			; (mov r8, r8)
     cc4:	fffffcd4 	.word	0xfffffcd4
     cc8:	00000769 	.word	0x00000769
     ccc:	000006d9 	.word	0x000006d9
     cd0:	00000d2d 	.word	0x00000d2d
     cd4:	00000305 	.word	0x00000305
     cd8:	00000aa9 	.word	0x00000aa9
     cdc:	00001341 	.word	0x00001341
     ce0:	00002141 	.word	0x00002141
     ce4:	00001495 	.word	0x00001495
     ce8:	000011dd 	.word	0x000011dd
     cec:	00000f9f 	.word	0x00000f9f
     cf0:	0000214d 	.word	0x0000214d
     cf4:	00001c19 	.word	0x00001c19
     cf8:	00002081 	.word	0x00002081
     cfc:	00001ee5 	.word	0x00001ee5
     d00:	20000481 	.word	0x20000481
     d04:	00002129 	.word	0x00002129
     d08:	40600000 	.word	0x40600000
     d0c:	00003951 	.word	0x00003951
     d10:	00000f79 	.word	0x00000f79
     d14:	00001191 	.word	0x00001191
     d18:	41004400 	.word	0x41004400
     d1c:	42003000 	.word	0x42003000
     d20:	42003400 	.word	0x42003400
     d24:	00001f45 	.word	0x00001f45
     d28:	000002ed 	.word	0x000002ed

00000d2c <IMUinit>:
#include <util.h>
#include <boardDefines.h>


void IMUinit() {
     d2c:	b570      	push	{r4, r5, r6, lr}
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     d2e:	4c08      	ldr	r4, [pc, #32]	; (d50 <IMUinit+0x24>)
     d30:	2580      	movs	r5, #128	; 0x80
     d32:	0023      	movs	r3, r4
     d34:	00ed      	lsls	r5, r5, #3
     d36:	3394      	adds	r3, #148	; 0x94
     d38:	601d      	str	r5, [r3, #0]

    uint8_t dummy_Tx = 0xFF;
    uint8_t dummy_rx;

    pinLow(cs_accel);
    dummy_rx = spiDataTransfer(SPI0, BMI_ACCEL_PMU_RANGE);
     d3a:	4e06      	ldr	r6, [pc, #24]	; (d54 <IMUinit+0x28>)
     d3c:	210f      	movs	r1, #15
     d3e:	2000      	movs	r0, #0
     d40:	47b0      	blx	r6
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     d42:	3498      	adds	r4, #152	; 0x98
    dummy_rx = spiDataTransfer(SPI0, BMI_ACCEL_16G_RANGE);
     d44:	210c      	movs	r1, #12
     d46:	2000      	movs	r0, #0
     d48:	47b0      	blx	r6
     d4a:	6025      	str	r5, [r4, #0]
    pinHigh(cs_accel);

}
     d4c:	bd70      	pop	{r4, r5, r6, pc}
     d4e:	46c0      	nop			; (mov r8, r8)
     d50:	41004400 	.word	0x41004400
     d54:	00002651 	.word	0x00002651

00000d58 <USARTconnectionAvaliable>:

bool USARTconnectionAvaliable(){
     d58:	b510      	push	{r4, lr}

	if (sercom(USART3)->SPI.INTFLAG.bit.RXC == 1) {
     d5a:	4b09      	ldr	r3, [pc, #36]	; (d80 <USARTconnectionAvaliable+0x28>)
     d5c:	7e1c      	ldrb	r4, [r3, #24]
     d5e:	0764      	lsls	r4, r4, #29
     d60:	0fe4      	lsrs	r4, r4, #31
     d62:	2c01      	cmp	r4, #1
     d64:	d001      	beq.n	d6a <USARTconnectionAvaliable+0x12>
			}
			else{
				return false;
			}
	}
		return false;
     d66:	2000      	movs	r0, #0
     d68:	e009      	b.n	d7e <USARTconnectionAvaliable+0x26>
}

bool USARTconnectionAvaliable(){

	if (sercom(USART3)->SPI.INTFLAG.bit.RXC == 1) {
		u8_t connectAttempt = usartDataIn(USART3);
     d6a:	2003      	movs	r0, #3
     d6c:	4b05      	ldr	r3, [pc, #20]	; (d84 <USARTconnectionAvaliable+0x2c>)
     d6e:	4798      	blx	r3
     d70:	1e01      	subs	r1, r0, #0
            if (connectAttempt == 0x48) {
     d72:	2948      	cmp	r1, #72	; 0x48
     d74:	d1f7      	bne.n	d66 <USARTconnectionAvaliable+0xe>
				usartDataOut(USART3, 'H');
     d76:	2003      	movs	r0, #3
     d78:	4b03      	ldr	r3, [pc, #12]	; (d88 <USARTconnectionAvaliable+0x30>)
     d7a:	4798      	blx	r3
				return true;
     d7c:	0020      	movs	r0, r4
			else{
				return false;
			}
	}
		return false;
  }
     d7e:	bd10      	pop	{r4, pc}
     d80:	42001400 	.word	0x42001400
     d84:	00002681 	.word	0x00002681
     d88:	00002669 	.word	0x00002669

00000d8c <sendTheasePagesToComputer>:

void sendTheasePagesToComputer(u32_t firstPage, u32_t lastPage){
     d8c:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (u16_t page = 0; page <= pagesToSend; ++page) {

        u8_t data[256];
        AT25SEreadPage(pageToReadAddress , data);

        for (u16_t dataByte = 0; dataByte < 256; ++dataByte) {
     d8e:	2780      	movs	r7, #128	; 0x80
			}
	}
		return false;
  }

void sendTheasePagesToComputer(u32_t firstPage, u32_t lastPage){
     d90:	0005      	movs	r5, r0
	
    u16_t pagesToSend = (lastPage - firstPage) >> 8;
	
	u32_t pageToReadAddress = firstPage;

	for (u16_t page = 0; page <= pagesToSend; ++page) {
     d92:	2400      	movs	r4, #0
		return false;
  }

void sendTheasePagesToComputer(u32_t firstPage, u32_t lastPage){
	
    u16_t pagesToSend = (lastPage - firstPage) >> 8;
     d94:	1a09      	subs	r1, r1, r0
     d96:	0a09      	lsrs	r1, r1, #8
			}
	}
		return false;
  }

void sendTheasePagesToComputer(u32_t firstPage, u32_t lastPage){
     d98:	b0c3      	sub	sp, #268	; 0x10c
	
    u16_t pagesToSend = (lastPage - firstPage) >> 8;
     d9a:	b28b      	uxth	r3, r1
     d9c:	9301      	str	r3, [sp, #4]
	for (u16_t page = 0; page <= pagesToSend; ++page) {

        u8_t data[256];
        AT25SEreadPage(pageToReadAddress , data);

        for (u16_t dataByte = 0; dataByte < 256; ++dataByte) {
     d9e:	007f      	lsls	r7, r7, #1
	u32_t pageToReadAddress = firstPage;

	for (u16_t page = 0; page <= pagesToSend; ++page) {

        u8_t data[256];
        AT25SEreadPage(pageToReadAddress , data);
     da0:	a902      	add	r1, sp, #8
     da2:	0028      	movs	r0, r5
     da4:	4b09      	ldr	r3, [pc, #36]	; (dcc <sendTheasePagesToComputer+0x40>)
     da6:	4798      	blx	r3
     da8:	2600      	movs	r6, #0

        for (u16_t dataByte = 0; dataByte < 256; ++dataByte) {
			usartDataOut(USART3, data[dataByte]);
     daa:	ab02      	add	r3, sp, #8
     dac:	5d99      	ldrb	r1, [r3, r6]
     dae:	2003      	movs	r0, #3
     db0:	4b07      	ldr	r3, [pc, #28]	; (dd0 <sendTheasePagesToComputer+0x44>)
     db2:	3601      	adds	r6, #1
     db4:	4798      	blx	r3
	for (u16_t page = 0; page <= pagesToSend; ++page) {

        u8_t data[256];
        AT25SEreadPage(pageToReadAddress , data);

        for (u16_t dataByte = 0; dataByte < 256; ++dataByte) {
     db6:	42be      	cmp	r6, r7
     db8:	d1f7      	bne.n	daa <sendTheasePagesToComputer+0x1e>
	
    u16_t pagesToSend = (lastPage - firstPage) >> 8;
	
	u32_t pageToReadAddress = firstPage;

	for (u16_t page = 0; page <= pagesToSend; ++page) {
     dba:	3401      	adds	r4, #1
     dbc:	9b01      	ldr	r3, [sp, #4]

        for (u16_t dataByte = 0; dataByte < 256; ++dataByte) {
			usartDataOut(USART3, data[dataByte]);
            }

        pageToReadAddress = pageToReadAddress + 0x100;
     dbe:	3501      	adds	r5, #1
	
    u16_t pagesToSend = (lastPage - firstPage) >> 8;
	
	u32_t pageToReadAddress = firstPage;

	for (u16_t page = 0; page <= pagesToSend; ++page) {
     dc0:	b2a4      	uxth	r4, r4

        for (u16_t dataByte = 0; dataByte < 256; ++dataByte) {
			usartDataOut(USART3, data[dataByte]);
            }

        pageToReadAddress = pageToReadAddress + 0x100;
     dc2:	35ff      	adds	r5, #255	; 0xff
	
    u16_t pagesToSend = (lastPage - firstPage) >> 8;
	
	u32_t pageToReadAddress = firstPage;

	for (u16_t page = 0; page <= pagesToSend; ++page) {
     dc4:	42a3      	cmp	r3, r4
     dc6:	d2eb      	bcs.n	da0 <sendTheasePagesToComputer+0x14>
			usartDataOut(USART3, data[dataByte]);
            }

        pageToReadAddress = pageToReadAddress + 0x100;
    }
 }
     dc8:	b043      	add	sp, #268	; 0x10c
     dca:	bdf0      	pop	{r4, r5, r6, r7, pc}
     dcc:	000003d1 	.word	0x000003d1
     dd0:	00002669 	.word	0x00002669

00000dd4 <adcInit>:
#include <util.h>

void adcInit() {

    // set up clock
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;
     dd4:	2180      	movs	r1, #128	; 0x80


#include <util.h>

void adcInit() {
     dd6:	b510      	push	{r4, lr}

    // set up clock
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;
     dd8:	4a10      	ldr	r2, [pc, #64]	; (e1c <adcInit+0x48>)
     dda:	0249      	lsls	r1, r1, #9
     ddc:	6a13      	ldr	r3, [r2, #32]
    // divide prescaler by 512 (93.75KHz), max adc freq is 2.1MHz
    ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |
                     ADC_CTRLB_RESSEL_12BIT;

    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
     dde:	4810      	ldr	r0, [pc, #64]	; (e20 <adcInit+0x4c>)
#include <util.h>

void adcInit() {

    // set up clock
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;
     de0:	430b      	orrs	r3, r1
     de2:	6213      	str	r3, [r2, #32]

    // divide prescaler by 512 (93.75KHz), max adc freq is 2.1MHz
    ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |
     de4:	23e0      	movs	r3, #224	; 0xe0
     de6:	490f      	ldr	r1, [pc, #60]	; (e24 <adcInit+0x50>)
                     ADC_CTRLB_RESSEL_12BIT;

    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
     de8:	4a0f      	ldr	r2, [pc, #60]	; (e28 <adcInit+0x54>)

    // set up clock
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;

    // divide prescaler by 512 (93.75KHz), max adc freq is 2.1MHz
    ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |
     dea:	00db      	lsls	r3, r3, #3
     dec:	808b      	strh	r3, [r1, #4]
                     ADC_CTRLB_RESSEL_12BIT;

    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
     dee:	8050      	strh	r0, [r2, #2]
                        GCLK_CLKCTRL_GEN(0) |
                        GCLK_CLKCTRL_ID(ADC_GCLK_ID);

    ADC->CALIB.reg =
        ADC_CALIB_BIAS_CAL(
     df0:	4a0e      	ldr	r2, [pc, #56]	; (e2c <adcInit+0x58>)
    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(0) |
                        GCLK_CLKCTRL_ID(ADC_GCLK_ID);

    ADC->CALIB.reg =
     df2:	6812      	ldr	r2, [r2, #0]
     df4:	0150      	lsls	r0, r2, #5
     df6:	4018      	ands	r0, r3
     df8:	4b0d      	ldr	r3, [pc, #52]	; (e30 <adcInit+0x5c>)
     dfa:	0154      	lsls	r4, r2, #5
     dfc:	681a      	ldr	r2, [r3, #0]
     dfe:	0ed3      	lsrs	r3, r2, #27
     e00:	4323      	orrs	r3, r4
     e02:	b2da      	uxtb	r2, r3
     e04:	0003      	movs	r3, r0
     e06:	4313      	orrs	r3, r2
     e08:	850b      	strh	r3, [r1, #40]	; 0x28
        ) |
        ADC_CALIB_LINEARITY_CAL(
            (*(uint64_t *)ADC_FUSES_LINEARITY_0_ADDR >> ADC_FUSES_LINEARITY_0_Pos)
        );

    ADC->REFCTRL.reg = ADC_REFCTRL_REFSEL_INTVCC1;
     e0a:	2302      	movs	r3, #2
     e0c:	704b      	strb	r3, [r1, #1]

    ADC->CTRLA.reg = ADC_CTRLA_ENABLE; // enable
     e0e:	700b      	strb	r3, [r1, #0]
    while(ADC->STATUS.reg & ADC_STATUS_SYNCBUSY);
     e10:	7e4b      	ldrb	r3, [r1, #25]
     e12:	b25b      	sxtb	r3, r3
     e14:	2b00      	cmp	r3, #0
     e16:	dbfb      	blt.n	e10 <adcInit+0x3c>
}
     e18:	bd10      	pop	{r4, pc}
     e1a:	46c0      	nop			; (mov r8, r8)
     e1c:	40000400 	.word	0x40000400
     e20:	0000401e 	.word	0x0000401e
     e24:	42004000 	.word	0x42004000
     e28:	40000c00 	.word	0x40000c00
     e2c:	00806024 	.word	0x00806024
     e30:	00806020 	.word	0x00806020

00000e34 <adcSample>:



u16_t adcSample() {
    ADC->SWTRIG.reg = ADC_SWTRIG_START;
     e34:	2202      	movs	r2, #2
     e36:	4b05      	ldr	r3, [pc, #20]	; (e4c <adcSample+0x18>)
     e38:	731a      	strb	r2, [r3, #12]
    while(!(ADC->INTFLAG.reg & ADC_INTFLAG_RESRDY)); // wait until result is ready
     e3a:	3a01      	subs	r2, #1
     e3c:	7e19      	ldrb	r1, [r3, #24]
     e3e:	4211      	tst	r1, r2
     e40:	d0fc      	beq.n	e3c <adcSample+0x8>
    return ADC->RESULT.reg;
     e42:	4b02      	ldr	r3, [pc, #8]	; (e4c <adcSample+0x18>)
     e44:	8b58      	ldrh	r0, [r3, #26]
     e46:	b280      	uxth	r0, r0
}
     e48:	4770      	bx	lr
     e4a:	46c0      	nop			; (mov r8, r8)
     e4c:	42004000 	.word	0x42004000

00000e50 <adc_read>:


u16_t adc_read(Pin p) {
     e50:	b537      	push	{r0, r1, r2, r4, r5, lr}
    u16_t buad;

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
     e52:	2501      	movs	r5, #1
     e54:	0c02      	lsrs	r2, r0, #16
     e56:	b2d4      	uxtb	r4, r2
     e58:	9000      	str	r0, [sp, #0]
     e5a:	0e00      	lsrs	r0, r0, #24
     e5c:	9101      	str	r1, [sp, #4]
     e5e:	0842      	lsrs	r2, r0, #1
     e60:	01e3      	lsls	r3, r4, #7
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     e62:	4911      	ldr	r1, [pc, #68]	; (ea8 <adc_read+0x58>)
     e64:	18d2      	adds	r2, r2, r3
     e66:	1852      	adds	r2, r2, r1
    u16_t buad;

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
     e68:	4228      	tst	r0, r5
     e6a:	d005      	beq.n	e78 <adc_read+0x28>
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     e6c:	210f      	movs	r1, #15
     e6e:	7814      	ldrb	r4, [r2, #0]
     e70:	4021      	ands	r1, r4
     e72:	2410      	movs	r4, #16
     e74:	4321      	orrs	r1, r4
     e76:	e003      	b.n	e80 <adc_read+0x30>
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     e78:	240f      	movs	r4, #15
     e7a:	7811      	ldrb	r1, [r2, #0]
     e7c:	43a1      	bics	r1, r4
     e7e:	4329      	orrs	r1, r5
     e80:	7011      	strb	r1, [r2, #0]
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     e82:	2101      	movs	r1, #1
     e84:	4a09      	ldr	r2, [pc, #36]	; (eac <adc_read+0x5c>)
     e86:	18c3      	adds	r3, r0, r3
     e88:	189b      	adds	r3, r3, r2
     e8a:	781a      	ldrb	r2, [r3, #0]
     e8c:	430a      	orrs	r2, r1
     e8e:	701a      	strb	r2, [r3, #0]
    // switch pin mux to analog in
    pinAnalog(p);

    ADC->INPUTCTRL.reg = (ADC_INPUTCTRL_MUXPOS(p.chan) // select from proper pin
                          | ADC_INPUTCTRL_MUXNEG_GND // 0 = gnd
                          | ADC_INPUTCTRL_GAIN_1X);
     e90:	466b      	mov	r3, sp
     e92:	791a      	ldrb	r2, [r3, #4]
     e94:	231f      	movs	r3, #31
     e96:	4013      	ands	r3, r2
     e98:	22c0      	movs	r2, #192	; 0xc0
     e9a:	0152      	lsls	r2, r2, #5
     e9c:	4313      	orrs	r3, r2

u16_t adc_read(Pin p) {
    // switch pin mux to analog in
    pinAnalog(p);

    ADC->INPUTCTRL.reg = (ADC_INPUTCTRL_MUXPOS(p.chan) // select from proper pin
     e9e:	4a04      	ldr	r2, [pc, #16]	; (eb0 <adc_read+0x60>)
     ea0:	6113      	str	r3, [r2, #16]
                          | ADC_INPUTCTRL_MUXNEG_GND // 0 = gnd
                          | ADC_INPUTCTRL_GAIN_1X);

    return adcSample();
     ea2:	4b04      	ldr	r3, [pc, #16]	; (eb4 <adc_read+0x64>)
     ea4:	4798      	blx	r3
     ea6:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
     ea8:	41004430 	.word	0x41004430
     eac:	41004440 	.word	0x41004440
     eb0:	42004000 	.word	0x42004000
     eb4:	00000e35 	.word	0x00000e35

00000eb8 <byteOut>:





void byteOut(Pin SCK_PIN, Pin MOSI_PIN, uint8_t byte) {
     eb8:	0c01      	lsrs	r1, r0, #16
     eba:	0c13      	lsrs	r3, r2, #16
     ebc:	b5f0      	push	{r4, r5, r6, r7, lr}
     ebe:	b2cd      	uxtb	r5, r1
     ec0:	b2d9      	uxtb	r1, r3
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     ec2:	2301      	movs	r3, #1
     ec4:	001e      	movs	r6, r3
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     ec6:	0e12      	lsrs	r2, r2, #24
     ec8:	4093      	lsls	r3, r2
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     eca:	0e00      	lsrs	r0, r0, #24
     ecc:	4086      	lsls	r6, r0
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     ece:	001a      	movs	r2, r3
     ed0:	2308      	movs	r3, #8
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     ed2:	0030      	movs	r0, r6
     ed4:	4e11      	ldr	r6, [pc, #68]	; (f1c <byteOut+0x64>)
     ed6:	01c9      	lsls	r1, r1, #7
     ed8:	b087      	sub	sp, #28
     eda:	198f      	adds	r7, r1, r6
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     edc:	4e10      	ldr	r6, [pc, #64]	; (f20 <byteOut+0x68>)
     ede:	ac0c      	add	r4, sp, #48	; 0x30
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     ee0:	01ed      	lsls	r5, r5, #7
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     ee2:	19ae      	adds	r6, r5, r6
     ee4:	7824      	ldrb	r4, [r4, #0]
     ee6:	9601      	str	r6, [sp, #4]
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     ee8:	4e0c      	ldr	r6, [pc, #48]	; (f1c <byteOut+0x64>)
     eea:	46b4      	mov	ip, r6
     eec:	44ac      	add	ip, r5
     eee:	4666      	mov	r6, ip
     ef0:	6030      	str	r0, [r6, #0]

	for (uint8_t i = 0; i<8; ++i) {
		pinLow(SCK_PIN);
		if (byte & 0x80) {
     ef2:	b266      	sxtb	r6, r4
     ef4:	2e00      	cmp	r6, #0
     ef6:	da05      	bge.n	f04 <byteOut+0x4c>
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     ef8:	4e09      	ldr	r6, [pc, #36]	; (f20 <byteOut+0x68>)
     efa:	46b4      	mov	ip, r6
     efc:	448c      	add	ip, r1
     efe:	4666      	mov	r6, ip
     f00:	6032      	str	r2, [r6, #0]
     f02:	e000      	b.n	f06 <byteOut+0x4e>
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     f04:	603a      	str	r2, [r7, #0]
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     f06:	9e01      	ldr	r6, [sp, #4]
     f08:	3b01      	subs	r3, #1
			pinHigh(MOSI_PIN);
			} else {
			pinLow(MOSI_PIN);
		}
		pinHigh(SCK_PIN);
		byte <<= 1;
     f0a:	0064      	lsls	r4, r4, #1
     f0c:	b2db      	uxtb	r3, r3
     f0e:	6030      	str	r0, [r6, #0]
     f10:	b2e4      	uxtb	r4, r4



void byteOut(Pin SCK_PIN, Pin MOSI_PIN, uint8_t byte) {

	for (uint8_t i = 0; i<8; ++i) {
     f12:	2b00      	cmp	r3, #0
     f14:	d1e8      	bne.n	ee8 <byteOut+0x30>
			pinLow(MOSI_PIN);
		}
		pinHigh(SCK_PIN);
		byte <<= 1;
	}
}
     f16:	b007      	add	sp, #28
     f18:	bdf0      	pop	{r4, r5, r6, r7, pc}
     f1a:	46c0      	nop			; (mov r8, r8)
     f1c:	41004414 	.word	0x41004414
     f20:	41004418 	.word	0x41004418

00000f24 <byteIn>:

uint8_t byteIn(Pin SCK_PIN, Pin MISO_PIN) {
     f24:	b5f0      	push	{r4, r5, r6, r7, lr}
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     f26:	2501      	movs	r5, #1
     f28:	b085      	sub	sp, #20
     f2a:	9103      	str	r1, [sp, #12]
     f2c:	0011      	movs	r1, r2
     f2e:	0c06      	lsrs	r6, r0, #16
     f30:	9301      	str	r3, [sp, #4]
     f32:	b2f3      	uxtb	r3, r6
     f34:	002e      	movs	r6, r5
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     f36:	0e09      	lsrs	r1, r1, #24
     f38:	0c14      	lsrs	r4, r2, #16
     f3a:	9002      	str	r0, [sp, #8]
     f3c:	9200      	str	r2, [sp, #0]
     f3e:	408d      	lsls	r5, r1
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     f40:	0e02      	lsrs	r2, r0, #24
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     f42:	2108      	movs	r1, #8
	uint8_t byte = 0x00;
     f44:	2000      	movs	r0, #0
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     f46:	4096      	lsls	r6, r2
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     f48:	b2e2      	uxtb	r2, r4
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     f4a:	4c0a      	ldr	r4, [pc, #40]	; (f74 <byteIn+0x50>)
     f4c:	01db      	lsls	r3, r3, #7
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     f4e:	01d2      	lsls	r2, r2, #7
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     f50:	191b      	adds	r3, r3, r4
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     f52:	1912      	adds	r2, r2, r4
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     f54:	615e      	str	r6, [r3, #20]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     f56:	6a14      	ldr	r4, [r2, #32]

	for (uint8_t i = 0; i<8; ++i) {
		pinLow(SCK_PIN);
		byte = (byte << 1 ) | pinRead(MISO_PIN);
     f58:	0040      	lsls	r0, r0, #1
     f5a:	402c      	ands	r4, r5
     f5c:	1e67      	subs	r7, r4, #1
     f5e:	41bc      	sbcs	r4, r7
     f60:	3901      	subs	r1, #1
     f62:	4304      	orrs	r4, r0
     f64:	b2c9      	uxtb	r1, r1
     f66:	b2e0      	uxtb	r0, r4
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     f68:	619e      	str	r6, [r3, #24]
}

uint8_t byteIn(Pin SCK_PIN, Pin MISO_PIN) {
	uint8_t byte = 0x00;

	for (uint8_t i = 0; i<8; ++i) {
     f6a:	2900      	cmp	r1, #0
     f6c:	d1f2      	bne.n	f54 <byteIn+0x30>
		pinLow(SCK_PIN);
		byte = (byte << 1 ) | pinRead(MISO_PIN);
		pinHigh(SCK_PIN);
	}
	return byte;
     f6e:	b005      	add	sp, #20
     f70:	bdf0      	pop	{r4, r5, r6, r7, pc}
     f72:	46c0      	nop			; (mov r8, r8)
     f74:	41004400 	.word	0x41004400

00000f78 <beep>:
#include <util.h>
#include <boardDefines.h>


void beep(u16_t toggles) {
     f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
}


inline static void pinToggle(Pin p) {
    PORT->Group[p.group].OUTTGL.reg = (1<<p.pin);
     f7a:	2380      	movs	r3, #128	; 0x80
     f7c:	2780      	movs	r7, #128	; 0x80
     f7e:	0006      	movs	r6, r0

    pinToggle(LedPin);
    for (u16_t buzz = 0; buzz < toggles; ++buzz) {
     f80:	2500      	movs	r5, #0
     f82:	4c0a      	ldr	r4, [pc, #40]	; (fac <beep+0x34>)
     f84:	035b      	lsls	r3, r3, #13
     f86:	61e3      	str	r3, [r4, #28]
     f88:	03bf      	lsls	r7, r7, #14
     f8a:	42b5      	cmp	r5, r6
     f8c:	d006      	beq.n	f9c <beep+0x24>
     f8e:	61e7      	str	r7, [r4, #28]
        pinToggle(buzzerPin);
        delay_us(122);
     f90:	207a      	movs	r0, #122	; 0x7a
     f92:	4b07      	ldr	r3, [pc, #28]	; (fb0 <beep+0x38>)


void beep(u16_t toggles) {

    pinToggle(LedPin);
    for (u16_t buzz = 0; buzz < toggles; ++buzz) {
     f94:	3501      	adds	r5, #1
        pinToggle(buzzerPin);
        delay_us(122);
     f96:	4798      	blx	r3


void beep(u16_t toggles) {

    pinToggle(LedPin);
    for (u16_t buzz = 0; buzz < toggles; ++buzz) {
     f98:	b2ad      	uxth	r5, r5
     f9a:	e7f6      	b.n	f8a <beep+0x12>
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     f9c:	2380      	movs	r3, #128	; 0x80
     f9e:	039b      	lsls	r3, r3, #14
     fa0:	6163      	str	r3, [r4, #20]
}


inline static void pinToggle(Pin p) {
    PORT->Group[p.group].OUTTGL.reg = (1<<p.pin);
     fa2:	2380      	movs	r3, #128	; 0x80
     fa4:	035b      	lsls	r3, r3, #13
     fa6:	61e3      	str	r3, [r4, #28]
        pinToggle(buzzerPin);
        delay_us(122);
    }
    pinLow(buzzerPin);
    pinToggle(LedPin);
}
     fa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     faa:	46c0      	nop			; (mov r8, r8)
     fac:	41004400 	.word	0x41004400
     fb0:	00001161 	.word	0x00001161

00000fb4 <startupJingle>:

void startupJingle(){
     fb4:	b570      	push	{r4, r5, r6, lr}
    beep(300);
     fb6:	2696      	movs	r6, #150	; 0x96
     fb8:	0076      	lsls	r6, r6, #1
     fba:	4d0a      	ldr	r5, [pc, #40]	; (fe4 <startupJingle+0x30>)
     fbc:	0030      	movs	r0, r6
     fbe:	47a8      	blx	r5
    delay_ms(80);
     fc0:	4c09      	ldr	r4, [pc, #36]	; (fe8 <startupJingle+0x34>)
     fc2:	2050      	movs	r0, #80	; 0x50
     fc4:	47a0      	blx	r4
    beep(300);
     fc6:	0030      	movs	r0, r6
     fc8:	47a8      	blx	r5
    delay_ms(250);
     fca:	20fa      	movs	r0, #250	; 0xfa
     fcc:	47a0      	blx	r4
    beep(300);
     fce:	0030      	movs	r0, r6
     fd0:	47a8      	blx	r5
    delay_ms(80);
     fd2:	2050      	movs	r0, #80	; 0x50
     fd4:	47a0      	blx	r4
    beep(300);
     fd6:	0030      	movs	r0, r6
     fd8:	47a8      	blx	r5
    delay_ms(500);
     fda:	20fa      	movs	r0, #250	; 0xfa
     fdc:	0040      	lsls	r0, r0, #1
     fde:	47a0      	blx	r4
}
     fe0:	bd70      	pop	{r4, r5, r6, pc}
     fe2:	46c0      	nop			; (mov r8, r8)
     fe4:	00000f79 	.word	0x00000f79
     fe8:	00001191 	.word	0x00001191

00000fec <GclkInit>:
static uint32_t cycles_per_us = 48000000UL / 1000000;

void GclkInit() {


    SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     fec:	23c2      	movs	r3, #194	; 0xc2
                           SYSCTRL_INTFLAG_DFLLRDY;
    NVMCTRL->CTRLB.reg |= NVMCTRL_CTRLB_RWS_HALF;
     fee:	2002      	movs	r0, #2


static uint32_t cycles_per_ms = 48000000UL / 1000;
static uint32_t cycles_per_us = 48000000UL / 1000000;

void GclkInit() {
     ff0:	b510      	push	{r4, lr}


    SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     ff2:	4916      	ldr	r1, [pc, #88]	; (104c <GclkInit+0x60>)
                           SYSCTRL_INTFLAG_DFLLRDY;
    NVMCTRL->CTRLB.reg |= NVMCTRL_CTRLB_RWS_HALF;
     ff4:	4a16      	ldr	r2, [pc, #88]	; (1050 <GclkInit+0x64>)
static uint32_t cycles_per_us = 48000000UL / 1000000;

void GclkInit() {


    SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     ff6:	00db      	lsls	r3, r3, #3
     ff8:	608b      	str	r3, [r1, #8]
                           SYSCTRL_INTFLAG_DFLLRDY;
    NVMCTRL->CTRLB.reg |= NVMCTRL_CTRLB_RWS_HALF;
     ffa:	6853      	ldr	r3, [r2, #4]
     ffc:	4303      	orrs	r3, r0
     ffe:	6053      	str	r3, [r2, #4]

#define NVM_DFLL_COARSE_POS    58
#define NVM_DFLL_COARSE_SIZE   6
#define NVM_DFLL_FINE_POS      64
#define NVM_DFLL_FINE_SIZE     10
    uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    1000:	4b14      	ldr	r3, [pc, #80]	; (1054 <GclkInit+0x68>)
    1002:	681a      	ldr	r2, [r3, #0]
    1004:	0e92      	lsrs	r2, r2, #26
                         + (NVM_DFLL_COARSE_POS / 32))
                       >> (NVM_DFLL_COARSE_POS % 32))
                     & ((1 << NVM_DFLL_COARSE_SIZE) - 1);
    if (coarse == 0x3f) {
    1006:	2a3f      	cmp	r2, #63	; 0x3f
    1008:	d100      	bne.n	100c <GclkInit+0x20>
        coarse = 0x1f;
    100a:	3a20      	subs	r2, #32
    }
    uint32_t fine =( *((uint32_t *)(NVMCTRL_OTP4)
                       + (NVM_DFLL_FINE_POS / 32))
                     >> (NVM_DFLL_FINE_POS % 32))
    100c:	4b12      	ldr	r3, [pc, #72]	; (1058 <GclkInit+0x6c>)
                   & ((1 << NVM_DFLL_FINE_SIZE) - 1);
    if (fine == 0x3ff) {
    100e:	4813      	ldr	r0, [pc, #76]	; (105c <GclkInit+0x70>)
                       >> (NVM_DFLL_COARSE_POS % 32))
                     & ((1 << NVM_DFLL_COARSE_SIZE) - 1);
    if (coarse == 0x3f) {
        coarse = 0x1f;
    }
    uint32_t fine =( *((uint32_t *)(NVMCTRL_OTP4)
    1010:	681b      	ldr	r3, [r3, #0]
    1012:	059b      	lsls	r3, r3, #22
    1014:	0d9b      	lsrs	r3, r3, #22
                       + (NVM_DFLL_FINE_POS / 32))
                     >> (NVM_DFLL_FINE_POS % 32))
                   & ((1 << NVM_DFLL_FINE_SIZE) - 1);
    if (fine == 0x3ff) {
    1016:	4283      	cmp	r3, r0
    1018:	d100      	bne.n	101c <GclkInit+0x30>
        fine = 0x1ff;
    101a:	4b11      	ldr	r3, [pc, #68]	; (1060 <GclkInit+0x74>)
    }


    // Disable ONDEMAND mode while writing configurations (errata 9905)
    SYSCTRL->DFLLCTRL.reg = dfll_ctrl_usb & ~SYSCTRL_DFLLCTRL_ONDEMAND;
    101c:	4811      	ldr	r0, [pc, #68]	; (1064 <GclkInit+0x78>)
    101e:	8488      	strh	r0, [r1, #36]	; 0x24
    while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_DFLLRDY)) == 0);
    1020:	2010      	movs	r0, #16
    1022:	68cc      	ldr	r4, [r1, #12]
    1024:	4204      	tst	r4, r0
    1026:	d0fc      	beq.n	1022 <GclkInit+0x36>
    SYSCTRL->DFLLVAL.reg = SYSCTRL_DFLLVAL_COARSE(coarse) | SYSCTRL_DFLLVAL_FINE(fine);
    1028:	0292      	lsls	r2, r2, #10
    102a:	4313      	orrs	r3, r2
    102c:	4a07      	ldr	r2, [pc, #28]	; (104c <GclkInit+0x60>)
    102e:	6293      	str	r3, [r2, #40]	; 0x28


    //Wait and see if the DFLL output is good . . .
    while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_DFLLRDY)) == 0);
    1030:	2310      	movs	r3, #16
    1032:	68ca      	ldr	r2, [r1, #12]
    1034:	421a      	tst	r2, r3
    1036:	d0fc      	beq.n	1032 <GclkInit+0x46>


    SYSCTRL->DFLLCTRL.reg = dfll_ctrl_usb;
    1038:	4a0b      	ldr	r2, [pc, #44]	; (1068 <GclkInit+0x7c>)
    103a:	4b04      	ldr	r3, [pc, #16]	; (104c <GclkInit+0x60>)
    103c:	849a      	strh	r2, [r3, #36]	; 0x24


    //For generic clock generator 0, select the DFLL48 Clock as input
    GCLK->GENDIV.reg  = (GCLK_GENDIV_DIV(1)  | GCLK_GENDIV_ID(0));
    103e:	2280      	movs	r2, #128	; 0x80
    1040:	4b0a      	ldr	r3, [pc, #40]	; (106c <GclkInit+0x80>)
    1042:	0052      	lsls	r2, r2, #1
    1044:	609a      	str	r2, [r3, #8]
    GCLK->GENCTRL.reg = (GCLK_GENCTRL_ID(0)  | (GCLK_GENCTRL_SRC_DFLL48M) | (GCLK_GENCTRL_GENEN));
    1046:	4a0a      	ldr	r2, [pc, #40]	; (1070 <GclkInit+0x84>)
    1048:	605a      	str	r2, [r3, #4]
}
    104a:	bd10      	pop	{r4, pc}
    104c:	40000800 	.word	0x40000800
    1050:	41004000 	.word	0x41004000
    1054:	00806024 	.word	0x00806024
    1058:	00806028 	.word	0x00806028
    105c:	000003ff 	.word	0x000003ff
    1060:	000001ff 	.word	0x000001ff
    1064:	00000522 	.word	0x00000522
    1068:	000005a2 	.word	0x000005a2
    106c:	40000c00 	.word	0x40000c00
    1070:	00010700 	.word	0x00010700

00001074 <RtcInit>:

void RtcInit() {
	
	    // start and enable external 32k crystal
	    SYSCTRL->XOSC32K.reg = SYSCTRL_XOSC32K_ENABLE |
    1074:	4a1d      	ldr	r2, [pc, #116]	; (10ec <RtcInit+0x78>)
    1076:	4b1e      	ldr	r3, [pc, #120]	; (10f0 <RtcInit+0x7c>)
    1078:	829a      	strh	r2, [r3, #20]
	    SYSCTRL_XOSC32K_XTALEN |
	    SYSCTRL_XOSC32K_EN32K |
	    ( 6 << SYSCTRL_OSC32K_STARTUP_Pos);

	    //wait for crystal to warm up
	    while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_XOSC32KRDY)) == 0);
    107a:	2202      	movs	r2, #2
    107c:	68d9      	ldr	r1, [r3, #12]
    107e:	4211      	tst	r1, r2
    1080:	d0fc      	beq.n	107c <RtcInit+0x8>
*/




    GCLK->GENDIV.reg = GCLK_GENDIV_ID(2) | GCLK_GENDIV_DIV(1);
    1082:	2281      	movs	r2, #129	; 0x81
    1084:	4b1b      	ldr	r3, [pc, #108]	; (10f4 <RtcInit+0x80>)
    1086:	0052      	lsls	r2, r2, #1
    1088:	609a      	str	r2, [r3, #8]

    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(2) |
    108a:	4a1b      	ldr	r2, [pc, #108]	; (10f8 <RtcInit+0x84>)
    108c:	605a      	str	r2, [r3, #4]
                        GCLK_GENCTRL_SRC(GCLK_GENCTRL_SRC_XOSC32K) |
                        GCLK_GENCTRL_IDC |
                        GCLK_GENCTRL_RUNSTDBY |
                        GCLK_GENCTRL_GENEN;
    while (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY);
    108e:	785a      	ldrb	r2, [r3, #1]
    1090:	b252      	sxtb	r2, r2
    1092:	2a00      	cmp	r2, #0
    1094:	dbfb      	blt.n	108e <RtcInit+0x1a>

// Configure RTC
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(RTC_GCLK_ID) |
    1096:	4a19      	ldr	r2, [pc, #100]	; (10fc <RtcInit+0x88>)
    1098:	4b16      	ldr	r3, [pc, #88]	; (10f4 <RtcInit+0x80>)
    109a:	805a      	strh	r2, [r3, #2]
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    RTC->MODE1.CTRL.reg = RTC_MODE1_CTRL_MODE_COUNT16;
    109c:	2204      	movs	r2, #4
    109e:	4b18      	ldr	r3, [pc, #96]	; (1100 <RtcInit+0x8c>)
    10a0:	801a      	strh	r2, [r3, #0]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
    10a2:	7a9a      	ldrb	r2, [r3, #10]
    10a4:	4916      	ldr	r1, [pc, #88]	; (1100 <RtcInit+0x8c>)
    10a6:	09d2      	lsrs	r2, r2, #7
    10a8:	d1fb      	bne.n	10a2 <RtcInit+0x2e>

// Prescaler needs to be enabled separately from the mode for some reason
    RTC->MODE1.CTRL.reg |= RTC_MODE1_CTRL_PRESCALER_DIV32;
    10aa:	20a0      	movs	r0, #160	; 0xa0
    10ac:	880a      	ldrh	r2, [r1, #0]
    10ae:	00c0      	lsls	r0, r0, #3
    10b0:	4302      	orrs	r2, r0
    10b2:	800a      	strh	r2, [r1, #0]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
    10b4:	7a9a      	ldrb	r2, [r3, #10]
    10b6:	09d2      	lsrs	r2, r2, #7
    10b8:	d1fc      	bne.n	10b4 <RtcInit+0x40>

    RTC->MODE1.PER.reg = 998;
    10ba:	4912      	ldr	r1, [pc, #72]	; (1104 <RtcInit+0x90>)
    10bc:	4a10      	ldr	r2, [pc, #64]	; (1100 <RtcInit+0x8c>)
    10be:	8291      	strh	r1, [r2, #20]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
    10c0:	7a99      	ldrb	r1, [r3, #10]
    10c2:	4a0f      	ldr	r2, [pc, #60]	; (1100 <RtcInit+0x8c>)
    10c4:	09c9      	lsrs	r1, r1, #7
    10c6:	d1fb      	bne.n	10c0 <RtcInit+0x4c>

    RTC->MODE1.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_ADDR(0x10);
    10c8:	8851      	ldrh	r1, [r2, #2]
    10ca:	480f      	ldr	r0, [pc, #60]	; (1108 <RtcInit+0x94>)
    10cc:	4301      	orrs	r1, r0
    10ce:	8051      	strh	r1, [r2, #2]

    RTC->MODE1.INTENSET.reg = RTC_MODE1_INTENSET_OVF;
    10d0:	2180      	movs	r1, #128	; 0x80

    RTC->MODE1.CTRL.bit.ENABLE = 1;
    10d2:	2002      	movs	r0, #2
    RTC->MODE1.PER.reg = 998;
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);

    RTC->MODE1.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_ADDR(0x10);

    RTC->MODE1.INTENSET.reg = RTC_MODE1_INTENSET_OVF;
    10d4:	71d1      	strb	r1, [r2, #7]

    RTC->MODE1.CTRL.bit.ENABLE = 1;
    10d6:	8811      	ldrh	r1, [r2, #0]
    10d8:	4301      	orrs	r1, r0
    10da:	8011      	strh	r1, [r2, #0]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
    10dc:	7a9a      	ldrb	r2, [r3, #10]
    10de:	09d2      	lsrs	r2, r2, #7
    10e0:	d1fc      	bne.n	10dc <RtcInit+0x68>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
    10e2:	4b0a      	ldr	r3, [pc, #40]	; (110c <RtcInit+0x98>)
    10e4:	3208      	adds	r2, #8
    10e6:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(RTC_IRQn);
}
    10e8:	4770      	bx	lr
    10ea:	46c0      	nop			; (mov r8, r8)
    10ec:	0000060e 	.word	0x0000060e
    10f0:	40000800 	.word	0x40000800
    10f4:	40000c00 	.word	0x40000c00
    10f8:	00230002 	.word	0x00230002
    10fc:	00004204 	.word	0x00004204
    1100:	40001400 	.word	0x40001400
    1104:	000003e6 	.word	0x000003e6
    1108:	00004010 	.word	0x00004010
    110c:	e000e100 	.word	0xe000e100

00001110 <gclkEnable>:


void gclkEnable(u32_t id, u32_t src, u32_t div) {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
    1110:	230f      	movs	r3, #15
    1112:	4018      	ands	r0, r3
    1114:	4b08      	ldr	r3, [pc, #32]	; (1138 <gclkEnable+0x28>)
    1116:	0212      	lsls	r2, r2, #8
    1118:	401a      	ands	r2, r3
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
    111a:	23f8      	movs	r3, #248	; 0xf8
    111c:	0209      	lsls	r1, r1, #8
    111e:	015b      	lsls	r3, r3, #5
    1120:	4019      	ands	r1, r3
    1122:	2380      	movs	r3, #128	; 0x80

    NVIC_EnableIRQ(RTC_IRQn);
}


void gclkEnable(u32_t id, u32_t src, u32_t div) {
    1124:	b510      	push	{r4, lr}
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
    1126:	025b      	lsls	r3, r3, #9
    NVIC_EnableIRQ(RTC_IRQn);
}


void gclkEnable(u32_t id, u32_t src, u32_t div) {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
    1128:	4c04      	ldr	r4, [pc, #16]	; (113c <gclkEnable+0x2c>)
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
    112a:	4319      	orrs	r1, r3
    NVIC_EnableIRQ(RTC_IRQn);
}


void gclkEnable(u32_t id, u32_t src, u32_t div) {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
    112c:	4302      	orrs	r2, r0
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
    112e:	4308      	orrs	r0, r1
    NVIC_EnableIRQ(RTC_IRQn);
}


void gclkEnable(u32_t id, u32_t src, u32_t div) {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
    1130:	60a2      	str	r2, [r4, #8]
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
    1132:	6060      	str	r0, [r4, #4]
}
    1134:	bd10      	pop	{r4, pc}
    1136:	46c0      	nop			; (mov r8, r8)
    1138:	00ffff00 	.word	0x00ffff00
    113c:	40000c00 	.word	0x40000c00

00001140 <delayInit>:


void delayInit(void) {
    cycles_per_ms = 48000000UL;
    cycles_per_ms /= 1000;
    1140:	4b04      	ldr	r3, [pc, #16]	; (1154 <delayInit+0x14>)
    1142:	4a05      	ldr	r2, [pc, #20]	; (1158 <delayInit+0x18>)
    1144:	601a      	str	r2, [r3, #0]
    cycles_per_us = cycles_per_ms / 1000;
    1146:	2230      	movs	r2, #48	; 0x30
    1148:	605a      	str	r2, [r3, #4]

    SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    114a:	4b04      	ldr	r3, [pc, #16]	; (115c <delayInit+0x1c>)
    114c:	3a2b      	subs	r2, #43	; 0x2b
    114e:	601a      	str	r2, [r3, #0]
}
    1150:	4770      	bx	lr
    1152:	46c0      	nop			; (mov r8, r8)
    1154:	20000004 	.word	0x20000004
    1158:	0000bb80 	.word	0x0000bb80
    115c:	e000e010 	.word	0xe000e010

00001160 <delay_us>:
/**
 * \brief Delay loop to delay at least n number of microseconds
 *
 * \param n  Number of microseconds to wait
 */
void delay_us(uint32_t n) {
    1160:	b570      	push	{r4, r5, r6, lr}
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
        SysTick->VAL = 0;

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    1162:	2480      	movs	r4, #128	; 0x80

static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
        SysTick->VAL = 0;
    1164:	2100      	movs	r1, #0
    while (n--) {
        /* Devide up to blocks of 10u */
        delay_cycles(cycles_per_us);
    1166:	4b08      	ldr	r3, [pc, #32]	; (1188 <delay_us+0x28>)


static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
    1168:	4a08      	ldr	r2, [pc, #32]	; (118c <delay_us+0x2c>)
    116a:	685b      	ldr	r3, [r3, #4]
        SysTick->VAL = 0;

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    116c:	0264      	lsls	r4, r4, #9
 * \brief Delay loop to delay at least n number of microseconds
 *
 * \param n  Number of microseconds to wait
 */
void delay_us(uint32_t n) {
    while (n--) {
    116e:	3801      	subs	r0, #1
    1170:	d308      	bcc.n	1184 <delay_us+0x24>



static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
    1172:	2b00      	cmp	r3, #0
    1174:	d0fb      	beq.n	116e <delay_us+0xe>
    1176:	4e05      	ldr	r6, [pc, #20]	; (118c <delay_us+0x2c>)
        SysTick->LOAD = n;
    1178:	6053      	str	r3, [r2, #4]
        SysTick->VAL = 0;
    117a:	6091      	str	r1, [r2, #8]

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    117c:	6835      	ldr	r5, [r6, #0]
    117e:	4225      	tst	r5, r4
    1180:	d0fc      	beq.n	117c <delay_us+0x1c>
    1182:	e7f4      	b.n	116e <delay_us+0xe>
        /* Devide up to blocks of 10u */
        delay_cycles(cycles_per_us);
    }
}
    1184:	bd70      	pop	{r4, r5, r6, pc}
    1186:	46c0      	nop			; (mov r8, r8)
    1188:	20000004 	.word	0x20000004
    118c:	e000e010 	.word	0xe000e010

00001190 <delay_ms>:
/**
 * \brief Delay loop to delay at least n number of milliseconds
 *
 * \param n  Number of milliseconds to wait
 */
void delay_ms(uint32_t n) {
    1190:	b570      	push	{r4, r5, r6, lr}
    1192:	2480      	movs	r4, #128	; 0x80

static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
        SysTick->VAL = 0;
    1194:	2100      	movs	r1, #0
    while (n--) {
        /* Devide up to blocks of 1ms */
        delay_cycles(cycles_per_ms);
    1196:	4b08      	ldr	r3, [pc, #32]	; (11b8 <delay_ms+0x28>)


static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
    1198:	4a08      	ldr	r2, [pc, #32]	; (11bc <delay_ms+0x2c>)
    119a:	681b      	ldr	r3, [r3, #0]
        SysTick->VAL = 0;

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    119c:	0264      	lsls	r4, r4, #9
 * \brief Delay loop to delay at least n number of milliseconds
 *
 * \param n  Number of milliseconds to wait
 */
void delay_ms(uint32_t n) {
    while (n--) {
    119e:	3801      	subs	r0, #1
    11a0:	d308      	bcc.n	11b4 <delay_ms+0x24>



static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
    11a2:	2b00      	cmp	r3, #0
    11a4:	d0fb      	beq.n	119e <delay_ms+0xe>
    11a6:	4e05      	ldr	r6, [pc, #20]	; (11bc <delay_ms+0x2c>)
        SysTick->LOAD = n;
    11a8:	6053      	str	r3, [r2, #4]
        SysTick->VAL = 0;
    11aa:	6091      	str	r1, [r2, #8]

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    11ac:	6835      	ldr	r5, [r6, #0]
    11ae:	4225      	tst	r5, r4
    11b0:	d0fc      	beq.n	11ac <delay_ms+0x1c>
    11b2:	e7f4      	b.n	119e <delay_ms+0xe>
        /* Devide up to blocks of 1ms */
        delay_cycles(cycles_per_ms);
    }
}
    11b4:	bd70      	pop	{r4, r5, r6, pc}
    11b6:	46c0      	nop			; (mov r8, r8)
    11b8:	20000004 	.word	0x20000004
    11bc:	e000e010 	.word	0xe000e010

000011c0 <RTC_Handler>:


volatile uint32_t time_ms = 0;

void RTC_Handler(void) {
    time_ms += 1000;
    11c0:	21fa      	movs	r1, #250	; 0xfa
    11c2:	4a04      	ldr	r2, [pc, #16]	; (11d4 <RTC_Handler+0x14>)
    11c4:	0089      	lsls	r1, r1, #2
    11c6:	6813      	ldr	r3, [r2, #0]
    11c8:	185b      	adds	r3, r3, r1
    11ca:	6013      	str	r3, [r2, #0]
    RTC->MODE1.INTFLAG.reg = 0xFF;
    11cc:	22ff      	movs	r2, #255	; 0xff
    11ce:	4b02      	ldr	r3, [pc, #8]	; (11d8 <RTC_Handler+0x18>)
    11d0:	721a      	strb	r2, [r3, #8]
}
    11d2:	4770      	bx	lr
    11d4:	2000047c 	.word	0x2000047c
    11d8:	40001400 	.word	0x40001400

000011dc <millis>:

uint32_t millis(void) {
    11dc:	b530      	push	{r4, r5, lr}
    uint32_t ms;
    ATOMIC_SECTION_ENTER
    11de:	f3ef 8110 	mrs	r1, PRIMASK
    11e2:	b672      	cpsid	i
    ms = time_ms + RTC->MODE1.COUNT.reg;
    11e4:	4a08      	ldr	r2, [pc, #32]	; (1208 <millis+0x2c>)
    11e6:	4d09      	ldr	r5, [pc, #36]	; (120c <millis+0x30>)
    11e8:	8a10      	ldrh	r0, [r2, #16]
    11ea:	682b      	ldr	r3, [r5, #0]
    if (RTC->MODE1.INTFLAG.bit.OVF)
    11ec:	7a14      	ldrb	r4, [r2, #8]
}

uint32_t millis(void) {
    uint32_t ms;
    ATOMIC_SECTION_ENTER
    ms = time_ms + RTC->MODE1.COUNT.reg;
    11ee:	b280      	uxth	r0, r0
    if (RTC->MODE1.INTFLAG.bit.OVF)
    11f0:	09e4      	lsrs	r4, r4, #7
    11f2:	d004      	beq.n	11fe <millis+0x22>
        ms = time_ms + RTC->MODE1.COUNT.reg + 1000;
    11f4:	8a13      	ldrh	r3, [r2, #16]
    11f6:	22fa      	movs	r2, #250	; 0xfa
    11f8:	6828      	ldr	r0, [r5, #0]
    11fa:	0092      	lsls	r2, r2, #2
    11fc:	1880      	adds	r0, r0, r2
    11fe:	18c0      	adds	r0, r0, r3
    ATOMIC_SECTION_LEAVE
    1200:	f381 8810 	msr	PRIMASK, r1
    return ms;
}
    1204:	bd30      	pop	{r4, r5, pc}
    1206:	46c0      	nop			; (mov r8, r8)
    1208:	40001400 	.word	0x40001400
    120c:	2000047c 	.word	0x2000047c

00001210 <TC4Init>:

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC4_GCLK_ID) |
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC4;
    1210:	2180      	movs	r1, #128	; 0x80
    return ms;
}

void TC4Init() {

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC4_GCLK_ID) |
    1212:	4a0d      	ldr	r2, [pc, #52]	; (1248 <TC4Init+0x38>)
    1214:	4b0d      	ldr	r3, [pc, #52]	; (124c <TC4Init+0x3c>)
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC4;
    1216:	0149      	lsls	r1, r1, #5
    return ms;
}

void TC4Init() {

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC4_GCLK_ID) |
    1218:	805a      	strh	r2, [r3, #2]
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC4;
    121a:	4a0d      	ldr	r2, [pc, #52]	; (1250 <TC4Init+0x40>)
    121c:	6a13      	ldr	r3, [r2, #32]
    121e:	430b      	orrs	r3, r1
    1220:	6213      	str	r3, [r2, #32]

    TC4->COUNT8.CTRLA.reg = TC_CTRLA_MODE_COUNT8 |
    1222:	4b0c      	ldr	r3, [pc, #48]	; (1254 <TC4Init+0x44>)
    1224:	4a0c      	ldr	r2, [pc, #48]	; (1258 <TC4Init+0x48>)

    TC4->COUNT8.INTENSET.reg = TC_INTENSET_OVF;

    TC4->COUNT8.EVCTRL.reg = TC_EVCTRL_OVFEO;

    TC4->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
    1226:	2102      	movs	r1, #2
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC4;

    TC4->COUNT8.CTRLA.reg = TC_CTRLA_MODE_COUNT8 |
    1228:	801a      	strh	r2, [r3, #0]
                            TC_CTRLA_RUNSTDBY |
                            TC_CTRLA_PRESCALER_DIV2;
    TC4->COUNT8.PER.reg = 0x41;
    122a:	2241      	movs	r2, #65	; 0x41
    122c:	751a      	strb	r2, [r3, #20]

    TC4->COUNT8.INTENSET.reg = TC_INTENSET_OVF;
    122e:	3a40      	subs	r2, #64	; 0x40
    1230:	735a      	strb	r2, [r3, #13]

    TC4->COUNT8.EVCTRL.reg = TC_EVCTRL_OVFEO;
    1232:	32ff      	adds	r2, #255	; 0xff
    1234:	815a      	strh	r2, [r3, #10]

    TC4->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
    1236:	881a      	ldrh	r2, [r3, #0]
    1238:	430a      	orrs	r2, r1
    123a:	801a      	strh	r2, [r3, #0]
    123c:	2280      	movs	r2, #128	; 0x80
    123e:	4b07      	ldr	r3, [pc, #28]	; (125c <TC4Init+0x4c>)
    1240:	0312      	lsls	r2, r2, #12
    1242:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(TC4_IRQn);
}
    1244:	4770      	bx	lr
    1246:	46c0      	nop			; (mov r8, r8)
    1248:	0000421c 	.word	0x0000421c
    124c:	40000c00 	.word	0x40000c00
    1250:	40000400 	.word	0x40000400
    1254:	42003000 	.word	0x42003000
    1258:	00000904 	.word	0x00000904
    125c:	e000e100 	.word	0xe000e100

00001260 <TC4_Handler>:

void TC4_Handler( void ) {
    TC4->COUNT8.INTFLAG.reg = 0xFF;
    1260:	22ff      	movs	r2, #255	; 0xff
    TC4->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;

    NVIC_EnableIRQ(TC4_IRQn);
}

void TC4_Handler( void ) {
    1262:	b510      	push	{r4, lr}
    TC4->COUNT8.INTFLAG.reg = 0xFF;
    1264:	4b02      	ldr	r3, [pc, #8]	; (1270 <TC4_Handler+0x10>)
    1266:	739a      	strb	r2, [r3, #14]
    pullSample();
    1268:	4b02      	ldr	r3, [pc, #8]	; (1274 <TC4_Handler+0x14>)
    126a:	4798      	blx	r3
}
    126c:	bd10      	pop	{r4, pc}
    126e:	46c0      	nop			; (mov r8, r8)
    1270:	42003000 	.word	0x42003000
    1274:	00002135 	.word	0x00002135

00001278 <TC5Init>:

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC5_GCLK_ID) |
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC5;
    1278:	2180      	movs	r1, #128	; 0x80
    pullSample();
}

void TC5Init() {

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC5_GCLK_ID) |
    127a:	4a0d      	ldr	r2, [pc, #52]	; (12b0 <TC5Init+0x38>)
    127c:	4b0d      	ldr	r3, [pc, #52]	; (12b4 <TC5Init+0x3c>)
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC5;
    127e:	0189      	lsls	r1, r1, #6
    pullSample();
}

void TC5Init() {

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC5_GCLK_ID) |
    1280:	805a      	strh	r2, [r3, #2]
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC5;
    1282:	4a0d      	ldr	r2, [pc, #52]	; (12b8 <TC5Init+0x40>)
    1284:	6a13      	ldr	r3, [r2, #32]
    1286:	430b      	orrs	r3, r1
    1288:	6213      	str	r3, [r2, #32]

    TC5->COUNT8.CTRLA.reg = TC_CTRLA_MODE_COUNT8 |
    128a:	4b0c      	ldr	r3, [pc, #48]	; (12bc <TC5Init+0x44>)
    128c:	4a0c      	ldr	r2, [pc, #48]	; (12c0 <TC5Init+0x48>)

    TC5->COUNT8.INTENSET.reg = TC_INTENSET_OVF;

    TC5->COUNT8.EVCTRL.reg = TC_EVCTRL_OVFEO;

    TC5->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
    128e:	2102      	movs	r1, #2
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC5;

    TC5->COUNT8.CTRLA.reg = TC_CTRLA_MODE_COUNT8 |
    1290:	801a      	strh	r2, [r3, #0]
                            TC_CTRLA_RUNSTDBY |
                            TC_CTRLA_PRESCALER_DIV64;
							
    TC5->COUNT8.PER.reg = 0x20;
    1292:	2220      	movs	r2, #32
    1294:	751a      	strb	r2, [r3, #20]

    TC5->COUNT8.INTENSET.reg = TC_INTENSET_OVF;
    1296:	3a1f      	subs	r2, #31
    1298:	735a      	strb	r2, [r3, #13]

    TC5->COUNT8.EVCTRL.reg = TC_EVCTRL_OVFEO;
    129a:	32ff      	adds	r2, #255	; 0xff
    129c:	815a      	strh	r2, [r3, #10]

    TC5->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
    129e:	881a      	ldrh	r2, [r3, #0]
    12a0:	430a      	orrs	r2, r1
    12a2:	801a      	strh	r2, [r3, #0]
    12a4:	2280      	movs	r2, #128	; 0x80
    12a6:	4b07      	ldr	r3, [pc, #28]	; (12c4 <TC5Init+0x4c>)
    12a8:	0352      	lsls	r2, r2, #13
    12aa:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(TC5_IRQn);
}
    12ac:	4770      	bx	lr
    12ae:	46c0      	nop			; (mov r8, r8)
    12b0:	0000421c 	.word	0x0000421c
    12b4:	40000c00 	.word	0x40000c00
    12b8:	40000400 	.word	0x40000400
    12bc:	42003400 	.word	0x42003400
    12c0:	00000d04 	.word	0x00000d04
    12c4:	e000e100 	.word	0xe000e100

000012c8 <TC5_Handler>:

void TC5_Handler( void ) {
    TC5->COUNT8.INTFLAG.reg = 0xFF;
    12c8:	22ff      	movs	r2, #255	; 0xff
    12ca:	4b03      	ldr	r3, [pc, #12]	; (12d8 <TC5_Handler+0x10>)
    12cc:	739a      	strb	r2, [r3, #14]
    writeLog = true;
    12ce:	4b03      	ldr	r3, [pc, #12]	; (12dc <TC5_Handler+0x14>)
    12d0:	3afe      	subs	r2, #254	; 0xfe
    12d2:	701a      	strb	r2, [r3, #0]
}
    12d4:	4770      	bx	lr
    12d6:	46c0      	nop			; (mov r8, r8)
    12d8:	42003400 	.word	0x42003400
    12dc:	20000481 	.word	0x20000481

000012e0 <dmaInit>:
#include <util.h>

DMA_DESC_ALIGN DmacDescriptor dma_descriptors[12];
DMA_DESC_ALIGN DmacDescriptor dma_descriptors_wb[12];

void dmaInit() {
    12e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	memset(&dma_descriptors, 0, sizeof(dma_descriptors));
    12e2:	27c0      	movs	r7, #192	; 0xc0
    12e4:	4d10      	ldr	r5, [pc, #64]	; (1328 <dmaInit+0x48>)
    12e6:	003a      	movs	r2, r7
    12e8:	4e10      	ldr	r6, [pc, #64]	; (132c <dmaInit+0x4c>)
    12ea:	0028      	movs	r0, r5
    12ec:	2100      	movs	r1, #0
    12ee:	47b0      	blx	r6
	memset(&dma_descriptors_wb, 0, sizeof(dma_descriptors_wb));
    12f0:	4c0f      	ldr	r4, [pc, #60]	; (1330 <dmaInit+0x50>)
    12f2:	003a      	movs	r2, r7
    12f4:	2100      	movs	r1, #0
    12f6:	0020      	movs	r0, r4
    12f8:	47b0      	blx	r6

	PM->AHBMASK.reg |= PM_AHBMASK_DMAC;
    12fa:	2120      	movs	r1, #32
    12fc:	4b0d      	ldr	r3, [pc, #52]	; (1334 <dmaInit+0x54>)
    12fe:	695a      	ldr	r2, [r3, #20]
    1300:	430a      	orrs	r2, r1
    1302:	615a      	str	r2, [r3, #20]
	PM->APBBMASK.reg |= PM_APBBMASK_DMAC;
    1304:	69da      	ldr	r2, [r3, #28]
    1306:	3910      	subs	r1, #16
    1308:	430a      	orrs	r2, r1
    130a:	61da      	str	r2, [r3, #28]

	DMAC->CTRL.bit.DMAENABLE = 0;
    130c:	4b0a      	ldr	r3, [pc, #40]	; (1338 <dmaInit+0x58>)
    130e:	390e      	subs	r1, #14
    1310:	881a      	ldrh	r2, [r3, #0]
    1312:	438a      	bics	r2, r1
    1314:	801a      	strh	r2, [r3, #0]
	DMAC->CTRL.bit.SWRST = 1;
    1316:	881a      	ldrh	r2, [r3, #0]
    1318:	3901      	subs	r1, #1
    131a:	430a      	orrs	r2, r1
    131c:	801a      	strh	r2, [r3, #0]

	DMAC->BASEADDR.reg = (unsigned) &dma_descriptors;
	DMAC->WRBADDR.reg = (unsigned) &dma_descriptors_wb;

	DMAC->CTRL.reg = DMAC_CTRL_DMAENABLE | DMAC_CTRL_LVLEN(0xf);
    131e:	4a07      	ldr	r2, [pc, #28]	; (133c <dmaInit+0x5c>)
	PM->APBBMASK.reg |= PM_APBBMASK_DMAC;

	DMAC->CTRL.bit.DMAENABLE = 0;
	DMAC->CTRL.bit.SWRST = 1;

	DMAC->BASEADDR.reg = (unsigned) &dma_descriptors;
    1320:	635d      	str	r5, [r3, #52]	; 0x34
	DMAC->WRBADDR.reg = (unsigned) &dma_descriptors_wb;
    1322:	639c      	str	r4, [r3, #56]	; 0x38

	DMAC->CTRL.reg = DMAC_CTRL_DMAENABLE | DMAC_CTRL_LVLEN(0xf);
    1324:	801a      	strh	r2, [r3, #0]
}
    1326:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1328:	20000550 	.word	0x20000550
    132c:	00005ad9 	.word	0x00005ad9
    1330:	20000490 	.word	0x20000490
    1334:	40000400 	.word	0x40000400
    1338:	41004800 	.word	0x41004800
    133c:	00000f02 	.word	0x00000f02

00001340 <flight>:
#include <util.h>
#include <boardDefines.h>



void flight(Altimeter *my_altimeter) {
    1340:	b5f0      	push	{r4, r5, r6, r7, lr}



    switch(my_altimeter->myFlightState) {
    1342:	7803      	ldrb	r3, [r0, #0]
#include <util.h>
#include <boardDefines.h>



void flight(Altimeter *my_altimeter) {
    1344:	b085      	sub	sp, #20
    1346:	0004      	movs	r4, r0



    switch(my_altimeter->myFlightState) {
    1348:	2b00      	cmp	r3, #0
    134a:	d008      	beq.n	135e <flight+0x1e>
    134c:	2b01      	cmp	r3, #1
    134e:	d000      	beq.n	1352 <flight+0x12>
    1350:	e088      	b.n	1464 <flight+0x124>
        }


        break;
    case flightIdle:
           TC4->COUNT8.CTRLA.reg = 0;
    1352:	2300      	movs	r3, #0
    1354:	4a44      	ldr	r2, [pc, #272]	; (1468 <flight+0x128>)
    1356:	8013      	strh	r3, [r2, #0]
           TC5->COUNT8.CTRLA.reg = 0;
    1358:	4a44      	ldr	r2, [pc, #272]	; (146c <flight+0x12c>)
    135a:	8013      	strh	r3, [r2, #0]

        break;
    }


}
    135c:	e082      	b.n	1464 <flight+0x124>


    switch(my_altimeter->myFlightState) {
    case flightStatrup:

        my_altimeter->myIMU.gravityOffsetBuffer = 	my_altimeter->myIMU.gravityOffsetBuffer*0.5 + my_altimeter->myIMU.accelZ*0.5;
    135e:	0003      	movs	r3, r0
    1360:	33b8      	adds	r3, #184	; 0xb8
    1362:	6818      	ldr	r0, [r3, #0]
    1364:	4d42      	ldr	r5, [pc, #264]	; (1470 <flight+0x130>)
    1366:	9300      	str	r3, [sp, #0]
    1368:	47a8      	blx	r5
    136a:	2200      	movs	r2, #0
    136c:	4e41      	ldr	r6, [pc, #260]	; (1474 <flight+0x134>)
    136e:	4b42      	ldr	r3, [pc, #264]	; (1478 <flight+0x138>)
    1370:	47b0      	blx	r6
    1372:	0023      	movs	r3, r4
    1374:	33cc      	adds	r3, #204	; 0xcc
    1376:	0006      	movs	r6, r0
    1378:	6818      	ldr	r0, [r3, #0]
    137a:	000f      	movs	r7, r1
    137c:	47a8      	blx	r5
    137e:	4d3d      	ldr	r5, [pc, #244]	; (1474 <flight+0x134>)
    1380:	2200      	movs	r2, #0
    1382:	4b3d      	ldr	r3, [pc, #244]	; (1478 <flight+0x138>)
    1384:	47a8      	blx	r5
    1386:	4d3d      	ldr	r5, [pc, #244]	; (147c <flight+0x13c>)
    1388:	0002      	movs	r2, r0
    138a:	000b      	movs	r3, r1
    138c:	0030      	movs	r0, r6
    138e:	0039      	movs	r1, r7
    1390:	47a8      	blx	r5
    1392:	4b3b      	ldr	r3, [pc, #236]	; (1480 <flight+0x140>)
    1394:	4798      	blx	r3
    1396:	9b00      	ldr	r3, [sp, #0]
        my_altimeter->myIMU.gravityOffsetBufferRaw = 	my_altimeter->myIMU.gravityOffsetBufferRaw*0.5 + my_altimeter->myIMU.accelZRaw*0.5;
    1398:	4d3a      	ldr	r5, [pc, #232]	; (1484 <flight+0x144>)


    switch(my_altimeter->myFlightState) {
    case flightStatrup:

        my_altimeter->myIMU.gravityOffsetBuffer = 	my_altimeter->myIMU.gravityOffsetBuffer*0.5 + my_altimeter->myIMU.accelZ*0.5;
    139a:	6018      	str	r0, [r3, #0]
        my_altimeter->myIMU.gravityOffsetBufferRaw = 	my_altimeter->myIMU.gravityOffsetBufferRaw*0.5 + my_altimeter->myIMU.accelZRaw*0.5;
    139c:	0023      	movs	r3, r4
    139e:	33bc      	adds	r3, #188	; 0xbc
    13a0:	9301      	str	r3, [sp, #4]
    13a2:	8818      	ldrh	r0, [r3, #0]
    13a4:	47a8      	blx	r5
    13a6:	2200      	movs	r2, #0
    13a8:	4e32      	ldr	r6, [pc, #200]	; (1474 <flight+0x134>)
    13aa:	4b33      	ldr	r3, [pc, #204]	; (1478 <flight+0x138>)
    13ac:	47b0      	blx	r6
    13ae:	0023      	movs	r3, r4
    13b0:	33e4      	adds	r3, #228	; 0xe4
    13b2:	0006      	movs	r6, r0
    13b4:	8818      	ldrh	r0, [r3, #0]
    13b6:	000f      	movs	r7, r1
    13b8:	47a8      	blx	r5
    13ba:	4d2e      	ldr	r5, [pc, #184]	; (1474 <flight+0x134>)
    13bc:	2200      	movs	r2, #0
    13be:	4b2e      	ldr	r3, [pc, #184]	; (1478 <flight+0x138>)
    13c0:	47a8      	blx	r5
    13c2:	4d2e      	ldr	r5, [pc, #184]	; (147c <flight+0x13c>)
    13c4:	0002      	movs	r2, r0
    13c6:	000b      	movs	r3, r1
    13c8:	0030      	movs	r0, r6
    13ca:	0039      	movs	r1, r7
    13cc:	47a8      	blx	r5
    13ce:	4b2e      	ldr	r3, [pc, #184]	; (1488 <flight+0x148>)
    13d0:	4798      	blx	r3
    13d2:	9b01      	ldr	r3, [sp, #4]
        my_altimeter->myBarometer.groundOffsetBuffer = my_altimeter->myBarometer.groundOffsetBuffer*0.5 + my_altimeter->myBarometer.heightCm*0.5;
    13d4:	4d2d      	ldr	r5, [pc, #180]	; (148c <flight+0x14c>)

    switch(my_altimeter->myFlightState) {
    case flightStatrup:

        my_altimeter->myIMU.gravityOffsetBuffer = 	my_altimeter->myIMU.gravityOffsetBuffer*0.5 + my_altimeter->myIMU.accelZ*0.5;
        my_altimeter->myIMU.gravityOffsetBufferRaw = 	my_altimeter->myIMU.gravityOffsetBufferRaw*0.5 + my_altimeter->myIMU.accelZRaw*0.5;
    13d6:	8018      	strh	r0, [r3, #0]
        my_altimeter->myBarometer.groundOffsetBuffer = my_altimeter->myBarometer.groundOffsetBuffer*0.5 + my_altimeter->myBarometer.heightCm*0.5;
    13d8:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    13da:	47a8      	blx	r5
    13dc:	2200      	movs	r2, #0
    13de:	4b26      	ldr	r3, [pc, #152]	; (1478 <flight+0x138>)
    13e0:	4e24      	ldr	r6, [pc, #144]	; (1474 <flight+0x134>)
    13e2:	47b0      	blx	r6
    13e4:	9002      	str	r0, [sp, #8]
    13e6:	9103      	str	r1, [sp, #12]
    13e8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    13ea:	47a8      	blx	r5
    13ec:	2200      	movs	r2, #0
    13ee:	4b22      	ldr	r3, [pc, #136]	; (1478 <flight+0x138>)
    13f0:	47b0      	blx	r6
    13f2:	4e22      	ldr	r6, [pc, #136]	; (147c <flight+0x13c>)
    13f4:	0002      	movs	r2, r0
    13f6:	000b      	movs	r3, r1
    13f8:	9802      	ldr	r0, [sp, #8]
    13fa:	9903      	ldr	r1, [sp, #12]
    13fc:	47b0      	blx	r6
    13fe:	4b22      	ldr	r3, [pc, #136]	; (1488 <flight+0x148>)
    1400:	4798      	blx	r3
    1402:	63e0      	str	r0, [r4, #60]	; 0x3c
        my_altimeter->myBarometer.groundTemperatureBuffer = my_altimeter->myBarometer.groundTemperatureBuffer*0.5 + my_altimeter->myBarometer.temperatureCelcus*0.5;
    1404:	6c60      	ldr	r0, [r4, #68]	; 0x44
    1406:	47a8      	blx	r5
    1408:	2200      	movs	r2, #0
    140a:	4b1b      	ldr	r3, [pc, #108]	; (1478 <flight+0x138>)
    140c:	4e19      	ldr	r6, [pc, #100]	; (1474 <flight+0x134>)
    140e:	47b0      	blx	r6
    1410:	0006      	movs	r6, r0
    1412:	69e0      	ldr	r0, [r4, #28]
    1414:	000f      	movs	r7, r1
    1416:	47a8      	blx	r5
    1418:	4d16      	ldr	r5, [pc, #88]	; (1474 <flight+0x134>)
    141a:	2200      	movs	r2, #0
    141c:	4b16      	ldr	r3, [pc, #88]	; (1478 <flight+0x138>)
    141e:	47a8      	blx	r5
    1420:	4d16      	ldr	r5, [pc, #88]	; (147c <flight+0x13c>)
    1422:	0002      	movs	r2, r0
    1424:	000b      	movs	r3, r1
    1426:	0030      	movs	r0, r6
    1428:	0039      	movs	r1, r7
    142a:	47a8      	blx	r5
    142c:	4b16      	ldr	r3, [pc, #88]	; (1488 <flight+0x148>)
    142e:	4798      	blx	r3


        if ((millis() - my_altimeter->myIMU.offsetBufferTime) > 2000) {
    1430:	0025      	movs	r5, r4
    case flightStatrup:

        my_altimeter->myIMU.gravityOffsetBuffer = 	my_altimeter->myIMU.gravityOffsetBuffer*0.5 + my_altimeter->myIMU.accelZ*0.5;
        my_altimeter->myIMU.gravityOffsetBufferRaw = 	my_altimeter->myIMU.gravityOffsetBufferRaw*0.5 + my_altimeter->myIMU.accelZRaw*0.5;
        my_altimeter->myBarometer.groundOffsetBuffer = my_altimeter->myBarometer.groundOffsetBuffer*0.5 + my_altimeter->myBarometer.heightCm*0.5;
        my_altimeter->myBarometer.groundTemperatureBuffer = my_altimeter->myBarometer.groundTemperatureBuffer*0.5 + my_altimeter->myBarometer.temperatureCelcus*0.5;
    1432:	6460      	str	r0, [r4, #68]	; 0x44


        if ((millis() - my_altimeter->myIMU.offsetBufferTime) > 2000) {
    1434:	4e16      	ldr	r6, [pc, #88]	; (1490 <flight+0x150>)
    1436:	47b0      	blx	r6
    1438:	35b0      	adds	r5, #176	; 0xb0
    143a:	682b      	ldr	r3, [r5, #0]
    143c:	1ac0      	subs	r0, r0, r3
    143e:	23fa      	movs	r3, #250	; 0xfa
    1440:	00db      	lsls	r3, r3, #3
    1442:	4298      	cmp	r0, r3
    1444:	d90e      	bls.n	1464 <flight+0x124>
            //recursive filter
            my_altimeter->myBarometer.groundOffset = my_altimeter->myBarometer.groundOffsetBuffer;
    1446:	6be3      	ldr	r3, [r4, #60]	; 0x3c
            my_altimeter->myBarometer.groundTemperature = my_altimeter->myBarometer.groundTemperatureBuffer;
            my_altimeter->myIMU.gravityOffset = my_altimeter->myIMU.gravityOffsetBuffer;
    1448:	9a00      	ldr	r2, [sp, #0]
        my_altimeter->myBarometer.groundTemperatureBuffer = my_altimeter->myBarometer.groundTemperatureBuffer*0.5 + my_altimeter->myBarometer.temperatureCelcus*0.5;


        if ((millis() - my_altimeter->myIMU.offsetBufferTime) > 2000) {
            //recursive filter
            my_altimeter->myBarometer.groundOffset = my_altimeter->myBarometer.groundOffsetBuffer;
    144a:	63a3      	str	r3, [r4, #56]	; 0x38
            my_altimeter->myBarometer.groundTemperature = my_altimeter->myBarometer.groundTemperatureBuffer;
    144c:	6c63      	ldr	r3, [r4, #68]	; 0x44
            my_altimeter->myIMU.gravityOffset = my_altimeter->myIMU.gravityOffsetBuffer;
    144e:	6812      	ldr	r2, [r2, #0]


        if ((millis() - my_altimeter->myIMU.offsetBufferTime) > 2000) {
            //recursive filter
            my_altimeter->myBarometer.groundOffset = my_altimeter->myBarometer.groundOffsetBuffer;
            my_altimeter->myBarometer.groundTemperature = my_altimeter->myBarometer.groundTemperatureBuffer;
    1450:	6423      	str	r3, [r4, #64]	; 0x40
            my_altimeter->myIMU.gravityOffset = my_altimeter->myIMU.gravityOffsetBuffer;
    1452:	0023      	movs	r3, r4
    1454:	33b4      	adds	r3, #180	; 0xb4
    1456:	601a      	str	r2, [r3, #0]
            my_altimeter->myIMU.gravityOffsetRaw = my_altimeter->myIMU.gravityOffsetBufferRaw;
    1458:	9b01      	ldr	r3, [sp, #4]
    145a:	34be      	adds	r4, #190	; 0xbe
    145c:	881b      	ldrh	r3, [r3, #0]
    145e:	8023      	strh	r3, [r4, #0]
            my_altimeter->myIMU.offsetBufferTime = millis();
    1460:	47b0      	blx	r6
    1462:	6028      	str	r0, [r5, #0]

        break;
    }


}
    1464:	b005      	add	sp, #20
    1466:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1468:	42003000 	.word	0x42003000
    146c:	42003400 	.word	0x42003400
    1470:	00005771 	.word	0x00005771
    1474:	00004a35 	.word	0x00004a35
    1478:	3fe00000 	.word	0x3fe00000
    147c:	00003b95 	.word	0x00003b95
    1480:	00005819 	.word	0x00005819
    1484:	0000567d 	.word	0x0000567d
    1488:	000039f9 	.word	0x000039f9
    148c:	00005701 	.word	0x00005701
    1490:	000011dd 	.word	0x000011dd

00001494 <computeKalmanGains>:

double altitude_variance = ALTITUDESIGMA*ALTITUDESIGMA;
double acceleration_variance = ACCELERATIONSIGMA*ACCELERATIONSIGMA;
double model_variance  = MODELSIGMA*MODELSIGMA;

void computeKalmanGains(kalmanFilter *my_kalmanFilter) {
    1494:	b5f0      	push	{r4, r5, r6, r7, lr}


    for( i = 0; i <= 2; i++)
        for( j = 0; j <=1; j++) {
            lastkgain[i][j] = .001;
            kgain[i][j] = 1.0;
    1496:	2200      	movs	r2, #0

double altitude_variance = ALTITUDESIGMA*ALTITUDESIGMA;
double acceleration_variance = ACCELERATIONSIGMA*ACCELERATIONSIGMA;
double model_variance  = MODELSIGMA*MODELSIGMA;

void computeKalmanGains(kalmanFilter *my_kalmanFilter) {
    1498:	2400      	movs	r4, #0
    149a:	b0cd      	sub	sp, #308	; 0x134
    149c:	9033      	str	r0, [sp, #204]	; 0xcc



    for( i = 0; i <= 2; i++)
        for( j = 0; j <=1; j++) {
            lastkgain[i][j] = .001;
    149e:	49dc      	ldr	r1, [pc, #880]	; (1810 <computeKalmanGains+0x37c>)
    14a0:	48dc      	ldr	r0, [pc, #880]	; (1814 <computeKalmanGains+0x380>)
            kgain[i][j] = 1.0;
    14a2:	4bdd      	ldr	r3, [pc, #884]	; (1818 <computeKalmanGains+0x384>)
    14a4:	ad40      	add	r5, sp, #256	; 0x100
    14a6:	af34      	add	r7, sp, #208	; 0xd0
    14a8:	192e      	adds	r6, r5, r4
    14aa:	19e5      	adds	r5, r4, r7
    14ac:	3410      	adds	r4, #16



    for( i = 0; i <= 2; i++)
        for( j = 0; j <=1; j++) {
            lastkgain[i][j] = .001;
    14ae:	6030      	str	r0, [r6, #0]
    14b0:	6071      	str	r1, [r6, #4]
            kgain[i][j] = 1.0;
    14b2:	602a      	str	r2, [r5, #0]
    14b4:	606b      	str	r3, [r5, #4]



    for( i = 0; i <= 2; i++)
        for( j = 0; j <=1; j++) {
            lastkgain[i][j] = .001;
    14b6:	60b0      	str	r0, [r6, #8]
    14b8:	60f1      	str	r1, [r6, #12]
            kgain[i][j] = 1.0;
    14ba:	60aa      	str	r2, [r5, #8]
    14bc:	60eb      	str	r3, [r5, #12]
    phit[2][1]    = dt;
    phit[2][0]    = dt*dt/2.0;



    for( i = 0; i <= 2; i++)
    14be:	2c30      	cmp	r4, #48	; 0x30
    14c0:	d1f0      	bne.n	14a4 <computeKalmanGains+0x10>
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
        pestp[2][1] = term[2][0] * phit[0][1] + term[2][1] * phit[1][1] + term[2][2] * phit[2][1];
        pestp[2][2] = term[2][0] * phit[0][2] + term[2][1] * phit[1][2] + term[2][2] * phit[2][2];

        pestp[2][2] = pestp[2][2] + model_variance;
    14c2:	4bd6      	ldr	r3, [pc, #856]	; (181c <computeKalmanGains+0x388>)
    14c4:	6819      	ldr	r1, [r3, #0]
    14c6:	685a      	ldr	r2, [r3, #4]
    14c8:	912c      	str	r1, [sp, #176]	; 0xb0
    14ca:	922d      	str	r2, [sp, #180]	; 0xb4
        /*
          Calculate Kalman Gain
        */
        det = (pestp[0][0]+altitude_variance)*(pestp[2][2] + acceleration_variance) - pestp[2][0] * pestp[0][2];
    14cc:	6899      	ldr	r1, [r3, #8]
    14ce:	68da      	ldr	r2, [r3, #12]
    14d0:	695c      	ldr	r4, [r3, #20]
    14d2:	691b      	ldr	r3, [r3, #16]
    14d4:	9330      	str	r3, [sp, #192]	; 0xc0
    14d6:	9431      	str	r4, [sp, #196]	; 0xc4
    14d8:	2300      	movs	r3, #0
    14da:	4cd1      	ldr	r4, [pc, #836]	; (1820 <computeKalmanGains+0x38c>)
    14dc:	912e      	str	r1, [sp, #184]	; 0xb8
    14de:	922f      	str	r2, [sp, #188]	; 0xbc
    14e0:	9302      	str	r3, [sp, #8]
    14e2:	9403      	str	r4, [sp, #12]
    14e4:	2300      	movs	r3, #0
    14e6:	2400      	movs	r4, #0
    14e8:	930c      	str	r3, [sp, #48]	; 0x30
    14ea:	940d      	str	r4, [sp, #52]	; 0x34
    14ec:	930a      	str	r3, [sp, #40]	; 0x28
    14ee:	940b      	str	r4, [sp, #44]	; 0x2c
    14f0:	9304      	str	r3, [sp, #16]
    14f2:	9405      	str	r4, [sp, #20]
    14f4:	2300      	movs	r3, #0
    14f6:	4cca      	ldr	r4, [pc, #808]	; (1820 <computeKalmanGains+0x38c>)
    14f8:	9308      	str	r3, [sp, #32]
    14fa:	9409      	str	r4, [sp, #36]	; 0x24
    14fc:	2300      	movs	r3, #0
    14fe:	2400      	movs	r4, #0
    1500:	9306      	str	r3, [sp, #24]
    1502:	9407      	str	r4, [sp, #28]
    1504:	9310      	str	r3, [sp, #64]	; 0x40
    1506:	9411      	str	r4, [sp, #68]	; 0x44
    1508:	931a      	str	r3, [sp, #104]	; 0x68
    150a:	941b      	str	r4, [sp, #108]	; 0x6c
    150c:	2480      	movs	r4, #128	; 0x80
    150e:	2300      	movs	r3, #0
    1510:	05e4      	lsls	r4, r4, #23
    1512:	9318      	str	r3, [sp, #96]	; 0x60
    1514:	9419      	str	r4, [sp, #100]	; 0x64
    1516:	2300      	movs	r3, #0
    1518:	931d      	str	r3, [sp, #116]	; 0x74

    /* Compute the Kalman gain matrix. */
    while(1) {
        /* Propagate state covariance */

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
    151a:	4dc2      	ldr	r5, [pc, #776]	; (1824 <computeKalmanGains+0x390>)
    151c:	4abd      	ldr	r2, [pc, #756]	; (1814 <computeKalmanGains+0x380>)
    151e:	4bc2      	ldr	r3, [pc, #776]	; (1828 <computeKalmanGains+0x394>)
    1520:	9806      	ldr	r0, [sp, #24]
    1522:	9907      	ldr	r1, [sp, #28]
    1524:	47a8      	blx	r5
    1526:	9a18      	ldr	r2, [sp, #96]	; 0x60
    1528:	9b19      	ldr	r3, [sp, #100]	; 0x64
    152a:	4cc0      	ldr	r4, [pc, #768]	; (182c <computeKalmanGains+0x398>)
    152c:	47a0      	blx	r4
    152e:	4ac0      	ldr	r2, [pc, #768]	; (1830 <computeKalmanGains+0x39c>)
    1530:	0006      	movs	r6, r0
    1532:	000f      	movs	r7, r1
    1534:	980a      	ldr	r0, [sp, #40]	; 0x28
    1536:	990b      	ldr	r1, [sp, #44]	; 0x2c
    1538:	4bbe      	ldr	r3, [pc, #760]	; (1834 <computeKalmanGains+0x3a0>)
    153a:	47a8      	blx	r5
    153c:	0002      	movs	r2, r0
    153e:	000b      	movs	r3, r1
    1540:	0030      	movs	r0, r6
    1542:	0039      	movs	r1, r7
    1544:	47a0      	blx	r4
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
    1546:	4ab3      	ldr	r2, [pc, #716]	; (1814 <computeKalmanGains+0x380>)

    /* Compute the Kalman gain matrix. */
    while(1) {
        /* Propagate state covariance */

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
    1548:	9012      	str	r0, [sp, #72]	; 0x48
    154a:	9113      	str	r1, [sp, #76]	; 0x4c
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
    154c:	9808      	ldr	r0, [sp, #32]
    154e:	9909      	ldr	r1, [sp, #36]	; 0x24
    1550:	4bb5      	ldr	r3, [pc, #724]	; (1828 <computeKalmanGains+0x394>)
    1552:	47a8      	blx	r5
    1554:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    1556:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    1558:	47a0      	blx	r4
    155a:	4ab5      	ldr	r2, [pc, #724]	; (1830 <computeKalmanGains+0x39c>)
    155c:	0006      	movs	r6, r0
    155e:	000f      	movs	r7, r1
    1560:	980c      	ldr	r0, [sp, #48]	; 0x30
    1562:	990d      	ldr	r1, [sp, #52]	; 0x34
    1564:	4bb3      	ldr	r3, [pc, #716]	; (1834 <computeKalmanGains+0x3a0>)
    1566:	47a8      	blx	r5
    1568:	0002      	movs	r2, r0
    156a:	000b      	movs	r3, r1
    156c:	0030      	movs	r0, r6
    156e:	0039      	movs	r1, r7
    1570:	47a0      	blx	r4
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
    1572:	4aa8      	ldr	r2, [pc, #672]	; (1814 <computeKalmanGains+0x380>)
    /* Compute the Kalman gain matrix. */
    while(1) {
        /* Propagate state covariance */

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
    1574:	9000      	str	r0, [sp, #0]
    1576:	9101      	str	r1, [sp, #4]
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
    1578:	9804      	ldr	r0, [sp, #16]
    157a:	9905      	ldr	r1, [sp, #20]
    157c:	4baa      	ldr	r3, [pc, #680]	; (1828 <computeKalmanGains+0x394>)
    157e:	47a8      	blx	r5
    1580:	9a10      	ldr	r2, [sp, #64]	; 0x40
    1582:	9b11      	ldr	r3, [sp, #68]	; 0x44
    1584:	47a0      	blx	r4
    1586:	4aaa      	ldr	r2, [pc, #680]	; (1830 <computeKalmanGains+0x39c>)
    1588:	0006      	movs	r6, r0
    158a:	000f      	movs	r7, r1
    158c:	9802      	ldr	r0, [sp, #8]
    158e:	9903      	ldr	r1, [sp, #12]
    1590:	4ba8      	ldr	r3, [pc, #672]	; (1834 <computeKalmanGains+0x3a0>)
    1592:	47a8      	blx	r5
    1594:	0002      	movs	r2, r0
    1596:	000b      	movs	r3, r1
    1598:	0030      	movs	r0, r6
    159a:	0039      	movs	r1, r7
    159c:	47a0      	blx	r4
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
    159e:	2200      	movs	r2, #0
    while(1) {
        /* Propagate state covariance */

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
    15a0:	900e      	str	r0, [sp, #56]	; 0x38
    15a2:	910f      	str	r1, [sp, #60]	; 0x3c
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
    15a4:	9818      	ldr	r0, [sp, #96]	; 0x60
    15a6:	9919      	ldr	r1, [sp, #100]	; 0x64
    15a8:	2300      	movs	r3, #0
    15aa:	47a8      	blx	r5
    15ac:	9a06      	ldr	r2, [sp, #24]
    15ae:	9b07      	ldr	r3, [sp, #28]
    15b0:	9014      	str	r0, [sp, #80]	; 0x50
    15b2:	9115      	str	r1, [sp, #84]	; 0x54
    15b4:	47a0      	blx	r4
    15b6:	4a97      	ldr	r2, [pc, #604]	; (1814 <computeKalmanGains+0x380>)
    15b8:	0006      	movs	r6, r0
    15ba:	000f      	movs	r7, r1
    15bc:	980a      	ldr	r0, [sp, #40]	; 0x28
    15be:	990b      	ldr	r1, [sp, #44]	; 0x2c
    15c0:	4b99      	ldr	r3, [pc, #612]	; (1828 <computeKalmanGains+0x394>)
    15c2:	47a8      	blx	r5
    15c4:	0002      	movs	r2, r0
    15c6:	000b      	movs	r3, r1
    15c8:	0030      	movs	r0, r6
    15ca:	0039      	movs	r1, r7
    15cc:	47a0      	blx	r4
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
    15ce:	2200      	movs	r2, #0
        /* Propagate state covariance */

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
    15d0:	9016      	str	r0, [sp, #88]	; 0x58
    15d2:	9117      	str	r1, [sp, #92]	; 0x5c
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
    15d4:	981a      	ldr	r0, [sp, #104]	; 0x68
    15d6:	991b      	ldr	r1, [sp, #108]	; 0x6c
    15d8:	2300      	movs	r3, #0
    15da:	47a8      	blx	r5
    15dc:	9a08      	ldr	r2, [sp, #32]
    15de:	9b09      	ldr	r3, [sp, #36]	; 0x24
    15e0:	9018      	str	r0, [sp, #96]	; 0x60
    15e2:	9119      	str	r1, [sp, #100]	; 0x64
    15e4:	47a0      	blx	r4
    15e6:	4a8b      	ldr	r2, [pc, #556]	; (1814 <computeKalmanGains+0x380>)
    15e8:	0006      	movs	r6, r0
    15ea:	000f      	movs	r7, r1
    15ec:	980c      	ldr	r0, [sp, #48]	; 0x30
    15ee:	990d      	ldr	r1, [sp, #52]	; 0x34
    15f0:	4b8d      	ldr	r3, [pc, #564]	; (1828 <computeKalmanGains+0x394>)
    15f2:	47a8      	blx	r5
    15f4:	0002      	movs	r2, r0
    15f6:	000b      	movs	r3, r1
    15f8:	0030      	movs	r0, r6
    15fa:	0039      	movs	r1, r7
    15fc:	47a0      	blx	r4
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
    15fe:	2200      	movs	r2, #0

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
    1600:	901e      	str	r0, [sp, #120]	; 0x78
    1602:	911f      	str	r1, [sp, #124]	; 0x7c
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
    1604:	9810      	ldr	r0, [sp, #64]	; 0x40
    1606:	9911      	ldr	r1, [sp, #68]	; 0x44
    1608:	2300      	movs	r3, #0
    160a:	47a8      	blx	r5
    160c:	9a04      	ldr	r2, [sp, #16]
    160e:	9b05      	ldr	r3, [sp, #20]
    1610:	0006      	movs	r6, r0
    1612:	000f      	movs	r7, r1
    1614:	47a0      	blx	r4
    1616:	4a7f      	ldr	r2, [pc, #508]	; (1814 <computeKalmanGains+0x380>)
    1618:	9010      	str	r0, [sp, #64]	; 0x40
    161a:	9111      	str	r1, [sp, #68]	; 0x44
    161c:	9802      	ldr	r0, [sp, #8]
    161e:	9903      	ldr	r1, [sp, #12]
    1620:	4b81      	ldr	r3, [pc, #516]	; (1828 <computeKalmanGains+0x394>)
    1622:	47a8      	blx	r5
    1624:	0002      	movs	r2, r0
    1626:	000b      	movs	r3, r1
    1628:	9810      	ldr	r0, [sp, #64]	; 0x40
    162a:	9911      	ldr	r1, [sp, #68]	; 0x44
    162c:	47a0      	blx	r4
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
    162e:	2200      	movs	r2, #0
        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
    1630:	9020      	str	r0, [sp, #128]	; 0x80
    1632:	9121      	str	r1, [sp, #132]	; 0x84
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
    1634:	9806      	ldr	r0, [sp, #24]
    1636:	9907      	ldr	r1, [sp, #28]
    1638:	2300      	movs	r3, #0
    163a:	47a8      	blx	r5
    163c:	9a14      	ldr	r2, [sp, #80]	; 0x50
    163e:	9b15      	ldr	r3, [sp, #84]	; 0x54
    1640:	47a0      	blx	r4
    1642:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    1644:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1646:	47a0      	blx	r4
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
    1648:	2200      	movs	r2, #0
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
    164a:	900a      	str	r0, [sp, #40]	; 0x28
    164c:	910b      	str	r1, [sp, #44]	; 0x2c
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
    164e:	9808      	ldr	r0, [sp, #32]
    1650:	9909      	ldr	r1, [sp, #36]	; 0x24
    1652:	2300      	movs	r3, #0
    1654:	47a8      	blx	r5
    1656:	9a18      	ldr	r2, [sp, #96]	; 0x60
    1658:	9b19      	ldr	r3, [sp, #100]	; 0x64
    165a:	47a0      	blx	r4
    165c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    165e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1660:	47a0      	blx	r4
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];
    1662:	2200      	movs	r2, #0
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
    1664:	9006      	str	r0, [sp, #24]
    1666:	9107      	str	r1, [sp, #28]
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];
    1668:	9804      	ldr	r0, [sp, #16]
    166a:	9905      	ldr	r1, [sp, #20]
    166c:	2300      	movs	r3, #0
    166e:	47a8      	blx	r5
    1670:	0032      	movs	r2, r6
    1672:	003b      	movs	r3, r7
    1674:	47a0      	blx	r4
    1676:	9a02      	ldr	r2, [sp, #8]
    1678:	9b03      	ldr	r3, [sp, #12]
    167a:	47a0      	blx	r4

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
    167c:	4a65      	ldr	r2, [pc, #404]	; (1814 <computeKalmanGains+0x380>)
    167e:	4b6a      	ldr	r3, [pc, #424]	; (1828 <computeKalmanGains+0x394>)
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];
    1680:	9002      	str	r0, [sp, #8]
    1682:	9103      	str	r1, [sp, #12]

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
    1684:	9800      	ldr	r0, [sp, #0]
    1686:	9901      	ldr	r1, [sp, #4]
    1688:	47a8      	blx	r5
    168a:	9a12      	ldr	r2, [sp, #72]	; 0x48
    168c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    168e:	47a0      	blx	r4
    1690:	4a67      	ldr	r2, [pc, #412]	; (1830 <computeKalmanGains+0x39c>)
    1692:	0006      	movs	r6, r0
    1694:	000f      	movs	r7, r1
    1696:	980e      	ldr	r0, [sp, #56]	; 0x38
    1698:	990f      	ldr	r1, [sp, #60]	; 0x3c
    169a:	4b66      	ldr	r3, [pc, #408]	; (1834 <computeKalmanGains+0x3a0>)
    169c:	47a8      	blx	r5
    169e:	0002      	movs	r2, r0
    16a0:	000b      	movs	r3, r1
    16a2:	0030      	movs	r0, r6
    16a4:	0039      	movs	r1, r7
    16a6:	47a0      	blx	r4
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
    16a8:	2200      	movs	r2, #0
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
    16aa:	9008      	str	r0, [sp, #32]
    16ac:	9109      	str	r1, [sp, #36]	; 0x24
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
    16ae:	9812      	ldr	r0, [sp, #72]	; 0x48
    16b0:	9913      	ldr	r1, [sp, #76]	; 0x4c
    16b2:	2300      	movs	r3, #0
    16b4:	47a8      	blx	r5
    16b6:	0006      	movs	r6, r0
    16b8:	000f      	movs	r7, r1
    16ba:	0002      	movs	r2, r0
    16bc:	000b      	movs	r3, r1
    16be:	9800      	ldr	r0, [sp, #0]
    16c0:	9901      	ldr	r1, [sp, #4]
    16c2:	47a0      	blx	r4
    16c4:	4a53      	ldr	r2, [pc, #332]	; (1814 <computeKalmanGains+0x380>)
    16c6:	9004      	str	r0, [sp, #16]
    16c8:	9105      	str	r1, [sp, #20]
    16ca:	980e      	ldr	r0, [sp, #56]	; 0x38
    16cc:	990f      	ldr	r1, [sp, #60]	; 0x3c
    16ce:	4b56      	ldr	r3, [pc, #344]	; (1828 <computeKalmanGains+0x394>)
    16d0:	47a8      	blx	r5
    16d2:	0002      	movs	r2, r0
    16d4:	000b      	movs	r3, r1
    16d6:	9804      	ldr	r0, [sp, #16]
    16d8:	9905      	ldr	r1, [sp, #20]
    16da:	47a0      	blx	r4
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
    16dc:	2200      	movs	r2, #0
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
    16de:	9026      	str	r0, [sp, #152]	; 0x98
    16e0:	9127      	str	r1, [sp, #156]	; 0x9c
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
    16e2:	9800      	ldr	r0, [sp, #0]
    16e4:	9901      	ldr	r1, [sp, #4]
    16e6:	2300      	movs	r3, #0
    16e8:	47a8      	blx	r5
    16ea:	0032      	movs	r2, r6
    16ec:	003b      	movs	r3, r7
    16ee:	47a0      	blx	r4
    16f0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    16f2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    16f4:	47a0      	blx	r4
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
    16f6:	4a47      	ldr	r2, [pc, #284]	; (1814 <computeKalmanGains+0x380>)
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
    16f8:	9112      	str	r1, [sp, #72]	; 0x48
    16fa:	9004      	str	r0, [sp, #16]
    16fc:	9114      	str	r1, [sp, #80]	; 0x50
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
    16fe:	4b4a      	ldr	r3, [pc, #296]	; (1828 <computeKalmanGains+0x394>)
    1700:	981e      	ldr	r0, [sp, #120]	; 0x78
    1702:	991f      	ldr	r1, [sp, #124]	; 0x7c
    1704:	47a8      	blx	r5
    1706:	9a16      	ldr	r2, [sp, #88]	; 0x58
    1708:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    170a:	47a0      	blx	r4
    170c:	4a48      	ldr	r2, [pc, #288]	; (1830 <computeKalmanGains+0x39c>)
    170e:	0006      	movs	r6, r0
    1710:	000f      	movs	r7, r1
    1712:	9820      	ldr	r0, [sp, #128]	; 0x80
    1714:	9921      	ldr	r1, [sp, #132]	; 0x84
    1716:	4b47      	ldr	r3, [pc, #284]	; (1834 <computeKalmanGains+0x3a0>)
    1718:	47a8      	blx	r5
    171a:	0002      	movs	r2, r0
    171c:	000b      	movs	r3, r1
    171e:	0030      	movs	r0, r6
    1720:	0039      	movs	r1, r7
    1722:	47a0      	blx	r4
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
    1724:	2200      	movs	r2, #0
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
    1726:	9022      	str	r0, [sp, #136]	; 0x88
    1728:	9123      	str	r1, [sp, #140]	; 0x8c
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
    172a:	9816      	ldr	r0, [sp, #88]	; 0x58
    172c:	9917      	ldr	r1, [sp, #92]	; 0x5c
    172e:	2300      	movs	r3, #0
    1730:	47a8      	blx	r5
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
    1732:	2200      	movs	r2, #0

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
    1734:	9028      	str	r0, [sp, #160]	; 0xa0
    1736:	9129      	str	r1, [sp, #164]	; 0xa4
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
    1738:	981e      	ldr	r0, [sp, #120]	; 0x78
    173a:	991f      	ldr	r1, [sp, #124]	; 0x7c
    173c:	2300      	movs	r3, #0
    173e:	47a8      	blx	r5
    1740:	9a28      	ldr	r2, [sp, #160]	; 0xa0
    1742:	9b29      	ldr	r3, [sp, #164]	; 0xa4
    1744:	47a0      	blx	r4
    1746:	9a20      	ldr	r2, [sp, #128]	; 0x80
    1748:	9b21      	ldr	r3, [sp, #132]	; 0x84
    174a:	47a0      	blx	r4
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
    174c:	4a31      	ldr	r2, [pc, #196]	; (1814 <computeKalmanGains+0x380>)
        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
    174e:	9024      	str	r0, [sp, #144]	; 0x90
    1750:	9125      	str	r1, [sp, #148]	; 0x94
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
    1752:	9806      	ldr	r0, [sp, #24]
    1754:	9907      	ldr	r1, [sp, #28]
    1756:	4b34      	ldr	r3, [pc, #208]	; (1828 <computeKalmanGains+0x394>)
    1758:	47a8      	blx	r5
    175a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    175c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    175e:	47a0      	blx	r4
    1760:	4a33      	ldr	r2, [pc, #204]	; (1830 <computeKalmanGains+0x39c>)
    1762:	0006      	movs	r6, r0
    1764:	000f      	movs	r7, r1
    1766:	9802      	ldr	r0, [sp, #8]
    1768:	9903      	ldr	r1, [sp, #12]
    176a:	4b32      	ldr	r3, [pc, #200]	; (1834 <computeKalmanGains+0x3a0>)
    176c:	47a8      	blx	r5
    176e:	0002      	movs	r2, r0
    1770:	000b      	movs	r3, r1
    1772:	0030      	movs	r0, r6
    1774:	0039      	movs	r1, r7
    1776:	47a0      	blx	r4
        pestp[2][1] = term[2][0] * phit[0][1] + term[2][1] * phit[1][1] + term[2][2] * phit[2][1];
    1778:	2200      	movs	r2, #0
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
    177a:	9000      	str	r0, [sp, #0]
    177c:	9101      	str	r1, [sp, #4]
        pestp[2][1] = term[2][0] * phit[0][1] + term[2][1] * phit[1][1] + term[2][2] * phit[2][1];
    177e:	980a      	ldr	r0, [sp, #40]	; 0x28
    1780:	990b      	ldr	r1, [sp, #44]	; 0x2c
    1782:	2300      	movs	r3, #0
    1784:	47a8      	blx	r5
    1786:	0006      	movs	r6, r0
    1788:	000f      	movs	r7, r1
    178a:	0002      	movs	r2, r0
    178c:	000b      	movs	r3, r1
    178e:	9806      	ldr	r0, [sp, #24]
    1790:	9907      	ldr	r1, [sp, #28]
    1792:	47a0      	blx	r4
    1794:	4a1f      	ldr	r2, [pc, #124]	; (1814 <computeKalmanGains+0x380>)
    1796:	900a      	str	r0, [sp, #40]	; 0x28
    1798:	910b      	str	r1, [sp, #44]	; 0x2c
    179a:	9802      	ldr	r0, [sp, #8]
    179c:	9903      	ldr	r1, [sp, #12]
    179e:	4b22      	ldr	r3, [pc, #136]	; (1828 <computeKalmanGains+0x394>)
    17a0:	47a8      	blx	r5
    17a2:	0002      	movs	r2, r0
    17a4:	000b      	movs	r3, r1
    17a6:	980a      	ldr	r0, [sp, #40]	; 0x28
    17a8:	990b      	ldr	r1, [sp, #44]	; 0x2c
    17aa:	47a0      	blx	r4
        pestp[2][2] = term[2][0] * phit[0][2] + term[2][1] * phit[1][2] + term[2][2] * phit[2][2];

        pestp[2][2] = pestp[2][2] + model_variance;
    17ac:	2200      	movs	r2, #0
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
        pestp[2][1] = term[2][0] * phit[0][1] + term[2][1] * phit[1][1] + term[2][2] * phit[2][1];
    17ae:	900c      	str	r0, [sp, #48]	; 0x30
    17b0:	910d      	str	r1, [sp, #52]	; 0x34
        pestp[2][2] = term[2][0] * phit[0][2] + term[2][1] * phit[1][2] + term[2][2] * phit[2][2];

        pestp[2][2] = pestp[2][2] + model_variance;
    17b2:	9806      	ldr	r0, [sp, #24]
    17b4:	9907      	ldr	r1, [sp, #28]
    17b6:	2300      	movs	r3, #0
    17b8:	47a8      	blx	r5
    17ba:	0032      	movs	r2, r6
    17bc:	003b      	movs	r3, r7
    17be:	47a0      	blx	r4
    17c0:	9a02      	ldr	r2, [sp, #8]
    17c2:	9b03      	ldr	r3, [sp, #12]
    17c4:	47a0      	blx	r4
    17c6:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
    17c8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    17ca:	47a0      	blx	r4
        /*
          Calculate Kalman Gain
        */
        det = (pestp[0][0]+altitude_variance)*(pestp[2][2] + acceleration_variance) - pestp[2][0] * pestp[0][2];
    17cc:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
    17ce:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
        pestp[2][1] = term[2][0] * phit[0][1] + term[2][1] * phit[1][1] + term[2][2] * phit[2][1];
        pestp[2][2] = term[2][0] * phit[0][2] + term[2][1] * phit[1][2] + term[2][2] * phit[2][2];

        pestp[2][2] = pestp[2][2] + model_variance;
    17d0:	9002      	str	r0, [sp, #8]
    17d2:	9103      	str	r1, [sp, #12]
        /*
          Calculate Kalman Gain
        */
        det = (pestp[0][0]+altitude_variance)*(pestp[2][2] + acceleration_variance) - pestp[2][0] * pestp[0][2];
    17d4:	9808      	ldr	r0, [sp, #32]
    17d6:	9909      	ldr	r1, [sp, #36]	; 0x24
    17d8:	47a0      	blx	r4
    17da:	9a30      	ldr	r2, [sp, #192]	; 0xc0
    17dc:	9b31      	ldr	r3, [sp, #196]	; 0xc4
    17de:	900a      	str	r0, [sp, #40]	; 0x28
    17e0:	910b      	str	r1, [sp, #44]	; 0x2c
    17e2:	9802      	ldr	r0, [sp, #8]
    17e4:	9903      	ldr	r1, [sp, #12]
    17e6:	47a0      	blx	r4
    17e8:	900e      	str	r0, [sp, #56]	; 0x38
    17ea:	910f      	str	r1, [sp, #60]	; 0x3c
    17ec:	9a00      	ldr	r2, [sp, #0]
    17ee:	9b01      	ldr	r3, [sp, #4]
    17f0:	9804      	ldr	r0, [sp, #16]
    17f2:	9914      	ldr	r1, [sp, #80]	; 0x50
    17f4:	47a8      	blx	r5
    17f6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    17f8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    17fa:	9010      	str	r0, [sp, #64]	; 0x40
    17fc:	9111      	str	r1, [sp, #68]	; 0x44
    17fe:	980a      	ldr	r0, [sp, #40]	; 0x28
    1800:	990b      	ldr	r1, [sp, #44]	; 0x2c
    1802:	47a8      	blx	r5
    1804:	9a10      	ldr	r2, [sp, #64]	; 0x40
    1806:	9b11      	ldr	r3, [sp, #68]	; 0x44
    1808:	4e0b      	ldr	r6, [pc, #44]	; (1838 <computeKalmanGains+0x3a4>)
    180a:	47b0      	blx	r6
    180c:	e016      	b.n	183c <computeKalmanGains+0x3a8>
    180e:	46c0      	nop			; (mov r8, r8)
    1810:	3f50624d 	.word	0x3f50624d
    1814:	d2f1a9fc 	.word	0xd2f1a9fc
    1818:	3ff00000 	.word	0x3ff00000
    181c:	20000010 	.word	0x20000010
    1820:	40220000 	.word	0x40220000
    1824:	00004a35 	.word	0x00004a35
    1828:	3f80624d 	.word	0x3f80624d
    182c:	00003b95 	.word	0x00003b95
    1830:	a0b5ed8d 	.word	0xa0b5ed8d
    1834:	3f00c6f7 	.word	0x3f00c6f7
    1838:	00004f29 	.word	0x00004f29


        kgain[0][0] = (pestp[0][0] * (pestp[2][2] + acceleration_variance) - pestp[0][2] * pestp[2][0])/det;
    183c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    183e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c

        pestp[2][2] = pestp[2][2] + model_variance;
        /*
          Calculate Kalman Gain
        */
        det = (pestp[0][0]+altitude_variance)*(pestp[2][2] + acceleration_variance) - pestp[2][0] * pestp[0][2];
    1840:	9006      	str	r0, [sp, #24]
    1842:	9107      	str	r1, [sp, #28]


        kgain[0][0] = (pestp[0][0] * (pestp[2][2] + acceleration_variance) - pestp[0][2] * pestp[2][0])/det;
    1844:	9808      	ldr	r0, [sp, #32]
    1846:	9909      	ldr	r1, [sp, #36]	; 0x24
    1848:	47a8      	blx	r5
    184a:	9a10      	ldr	r2, [sp, #64]	; 0x40
    184c:	9b11      	ldr	r3, [sp, #68]	; 0x44
    184e:	47b0      	blx	r6
    1850:	9a06      	ldr	r2, [sp, #24]
    1852:	9b07      	ldr	r3, [sp, #28]
    1854:	4edc      	ldr	r6, [pc, #880]	; (1bc8 <computeKalmanGains+0x734>)
    1856:	47b0      	blx	r6
    1858:	0002      	movs	r2, r0
    185a:	000b      	movs	r3, r1
    185c:	9234      	str	r2, [sp, #208]	; 0xd0
    185e:	9335      	str	r3, [sp, #212]	; 0xd4

        kgain[0][1] = (pestp[0][0] * (-pestp[0][2]) + pestp[0][2] * (pestp[0][0] + altitude_variance))/det;
    1860:	2280      	movs	r2, #128	; 0x80
    1862:	0612      	lsls	r2, r2, #24
    1864:	4694      	mov	ip, r2
    1866:	9b12      	ldr	r3, [sp, #72]	; 0x48
    1868:	9a04      	ldr	r2, [sp, #16]
    186a:	4463      	add	r3, ip
    186c:	9318      	str	r3, [sp, #96]	; 0x60
    186e:	9b18      	ldr	r3, [sp, #96]	; 0x60
          Calculate Kalman Gain
        */
        det = (pestp[0][0]+altitude_variance)*(pestp[2][2] + acceleration_variance) - pestp[2][0] * pestp[0][2];


        kgain[0][0] = (pestp[0][0] * (pestp[2][2] + acceleration_variance) - pestp[0][2] * pestp[2][0])/det;
    1870:	901a      	str	r0, [sp, #104]	; 0x68
    1872:	911b      	str	r1, [sp, #108]	; 0x6c

        kgain[0][1] = (pestp[0][0] * (-pestp[0][2]) + pestp[0][2] * (pestp[0][0] + altitude_variance))/det;
    1874:	9808      	ldr	r0, [sp, #32]
    1876:	9909      	ldr	r1, [sp, #36]	; 0x24
    1878:	47a8      	blx	r5
    187a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    187c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    187e:	0006      	movs	r6, r0
    1880:	000f      	movs	r7, r1
    1882:	9804      	ldr	r0, [sp, #16]
    1884:	9914      	ldr	r1, [sp, #80]	; 0x50
    1886:	47a8      	blx	r5
    1888:	0002      	movs	r2, r0
    188a:	000b      	movs	r3, r1
    188c:	0030      	movs	r0, r6
    188e:	0039      	movs	r1, r7
    1890:	47a0      	blx	r4
    1892:	9a06      	ldr	r2, [sp, #24]
    1894:	9b07      	ldr	r3, [sp, #28]
    1896:	4ecc      	ldr	r6, [pc, #816]	; (1bc8 <computeKalmanGains+0x734>)
    1898:	47b0      	blx	r6
    189a:	0002      	movs	r2, r0
    189c:	000b      	movs	r3, r1
    189e:	9010      	str	r0, [sp, #64]	; 0x40
    18a0:	9111      	str	r1, [sp, #68]	; 0x44
    18a2:	9236      	str	r2, [sp, #216]	; 0xd8
    18a4:	9337      	str	r3, [sp, #220]	; 0xdc

        kgain[1][0] = (pestp[1][0] * (pestp[2][2] + acceleration_variance) - pestp[1][2] * pestp[2][0])/det;
    18a6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    18a8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    18aa:	9822      	ldr	r0, [sp, #136]	; 0x88
    18ac:	9923      	ldr	r1, [sp, #140]	; 0x8c
    18ae:	47a8      	blx	r5
    18b0:	9a00      	ldr	r2, [sp, #0]
    18b2:	9b01      	ldr	r3, [sp, #4]
    18b4:	0006      	movs	r6, r0
    18b6:	000f      	movs	r7, r1
    18b8:	9824      	ldr	r0, [sp, #144]	; 0x90
    18ba:	9925      	ldr	r1, [sp, #148]	; 0x94
    18bc:	47a8      	blx	r5
    18be:	0002      	movs	r2, r0
    18c0:	000b      	movs	r3, r1
    18c2:	0030      	movs	r0, r6
    18c4:	0039      	movs	r1, r7
    18c6:	4ec1      	ldr	r6, [pc, #772]	; (1bcc <computeKalmanGains+0x738>)
    18c8:	47b0      	blx	r6
    18ca:	9a06      	ldr	r2, [sp, #24]
    18cc:	9b07      	ldr	r3, [sp, #28]
    18ce:	4ebe      	ldr	r6, [pc, #760]	; (1bc8 <computeKalmanGains+0x734>)
    18d0:	47b0      	blx	r6
    18d2:	0002      	movs	r2, r0
    18d4:	000b      	movs	r3, r1
    18d6:	9132      	str	r1, [sp, #200]	; 0xc8
    18d8:	9238      	str	r2, [sp, #224]	; 0xe0
    18da:	9339      	str	r3, [sp, #228]	; 0xe4
    18dc:	9016      	str	r0, [sp, #88]	; 0x58

        kgain[1][1] = (pestp[1][0] * (-pestp[0][2]) + pestp[1][2] * (pestp[0][0] + altitude_variance))/det;
    18de:	9a04      	ldr	r2, [sp, #16]
    18e0:	9b18      	ldr	r3, [sp, #96]	; 0x60
    18e2:	9822      	ldr	r0, [sp, #136]	; 0x88
    18e4:	9923      	ldr	r1, [sp, #140]	; 0x8c
    18e6:	47a8      	blx	r5
    18e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    18ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    18ec:	0006      	movs	r6, r0
    18ee:	000f      	movs	r7, r1
    18f0:	9824      	ldr	r0, [sp, #144]	; 0x90
    18f2:	9925      	ldr	r1, [sp, #148]	; 0x94
    18f4:	47a8      	blx	r5
    18f6:	0002      	movs	r2, r0
    18f8:	000b      	movs	r3, r1
    18fa:	0030      	movs	r0, r6
    18fc:	0039      	movs	r1, r7
    18fe:	47a0      	blx	r4
    1900:	9a06      	ldr	r2, [sp, #24]
    1902:	9b07      	ldr	r3, [sp, #28]
    1904:	4eb0      	ldr	r6, [pc, #704]	; (1bc8 <computeKalmanGains+0x734>)
    1906:	47b0      	blx	r6
    1908:	0002      	movs	r2, r0
    190a:	000b      	movs	r3, r1
    190c:	9012      	str	r0, [sp, #72]	; 0x48
    190e:	9113      	str	r1, [sp, #76]	; 0x4c

        kgain[2][0] = (pestp[2][0] * (pestp[2][2] + acceleration_variance) - pestp[2][2] * pestp[2][0])/det;
    1910:	9800      	ldr	r0, [sp, #0]
    1912:	9901      	ldr	r1, [sp, #4]

        kgain[0][1] = (pestp[0][0] * (-pestp[0][2]) + pestp[0][2] * (pestp[0][0] + altitude_variance))/det;

        kgain[1][0] = (pestp[1][0] * (pestp[2][2] + acceleration_variance) - pestp[1][2] * pestp[2][0])/det;

        kgain[1][1] = (pestp[1][0] * (-pestp[0][2]) + pestp[1][2] * (pestp[0][0] + altitude_variance))/det;
    1914:	923a      	str	r2, [sp, #232]	; 0xe8
    1916:	933b      	str	r3, [sp, #236]	; 0xec

        kgain[2][0] = (pestp[2][0] * (pestp[2][2] + acceleration_variance) - pestp[2][2] * pestp[2][0])/det;
    1918:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    191a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    191c:	47a8      	blx	r5
    191e:	9a02      	ldr	r2, [sp, #8]
    1920:	9b03      	ldr	r3, [sp, #12]
    1922:	0006      	movs	r6, r0
    1924:	000f      	movs	r7, r1
    1926:	9800      	ldr	r0, [sp, #0]
    1928:	9901      	ldr	r1, [sp, #4]
    192a:	47a8      	blx	r5
    192c:	0002      	movs	r2, r0
    192e:	000b      	movs	r3, r1
    1930:	0030      	movs	r0, r6
    1932:	0039      	movs	r1, r7
    1934:	4ea5      	ldr	r6, [pc, #660]	; (1bcc <computeKalmanGains+0x738>)
    1936:	47b0      	blx	r6
    1938:	9a06      	ldr	r2, [sp, #24]
    193a:	9b07      	ldr	r3, [sp, #28]
    193c:	4ea2      	ldr	r6, [pc, #648]	; (1bc8 <computeKalmanGains+0x734>)
    193e:	47b0      	blx	r6
    1940:	0002      	movs	r2, r0
    1942:	000b      	movs	r3, r1
    1944:	900e      	str	r0, [sp, #56]	; 0x38
    1946:	910f      	str	r1, [sp, #60]	; 0x3c

        kgain[2][1] = (pestp[2][0] * (-pestp[0][2]) + pestp[2][2] * (pestp[0][0] + altitude_variance))/det;
    1948:	9800      	ldr	r0, [sp, #0]
    194a:	9901      	ldr	r1, [sp, #4]

        kgain[1][0] = (pestp[1][0] * (pestp[2][2] + acceleration_variance) - pestp[1][2] * pestp[2][0])/det;

        kgain[1][1] = (pestp[1][0] * (-pestp[0][2]) + pestp[1][2] * (pestp[0][0] + altitude_variance))/det;

        kgain[2][0] = (pestp[2][0] * (pestp[2][2] + acceleration_variance) - pestp[2][2] * pestp[2][0])/det;
    194c:	923c      	str	r2, [sp, #240]	; 0xf0
    194e:	933d      	str	r3, [sp, #244]	; 0xf4

        kgain[2][1] = (pestp[2][0] * (-pestp[0][2]) + pestp[2][2] * (pestp[0][0] + altitude_variance))/det;
    1950:	9b18      	ldr	r3, [sp, #96]	; 0x60
    1952:	9a04      	ldr	r2, [sp, #16]
    1954:	47a8      	blx	r5
    1956:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    1958:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    195a:	0006      	movs	r6, r0
    195c:	000f      	movs	r7, r1
    195e:	9802      	ldr	r0, [sp, #8]
    1960:	9903      	ldr	r1, [sp, #12]
    1962:	47a8      	blx	r5
    1964:	0002      	movs	r2, r0
    1966:	000b      	movs	r3, r1
    1968:	0030      	movs	r0, r6
    196a:	0039      	movs	r1, r7
    196c:	47a0      	blx	r4
    196e:	9a06      	ldr	r2, [sp, #24]
    1970:	9b07      	ldr	r3, [sp, #28]
    1972:	4e95      	ldr	r6, [pc, #596]	; (1bc8 <computeKalmanGains+0x734>)
    1974:	47b0      	blx	r6
    1976:	0002      	movs	r2, r0
    1978:	000b      	movs	r3, r1
    197a:	902a      	str	r0, [sp, #168]	; 0xa8
    197c:	912b      	str	r1, [sp, #172]	; 0xac

        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
    197e:	4e93      	ldr	r6, [pc, #588]	; (1bcc <computeKalmanGains+0x738>)

        kgain[1][1] = (pestp[1][0] * (-pestp[0][2]) + pestp[1][2] * (pestp[0][0] + altitude_variance))/det;

        kgain[2][0] = (pestp[2][0] * (pestp[2][2] + acceleration_variance) - pestp[2][2] * pestp[2][0])/det;

        kgain[2][1] = (pestp[2][0] * (-pestp[0][2]) + pestp[2][2] * (pestp[0][0] + altitude_variance))/det;
    1980:	923e      	str	r2, [sp, #248]	; 0xf8
    1982:	933f      	str	r3, [sp, #252]	; 0xfc

        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
    1984:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    1986:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    1988:	2000      	movs	r0, #0
    198a:	4991      	ldr	r1, [pc, #580]	; (1bd0 <computeKalmanGains+0x73c>)
    198c:	47b0      	blx	r6
    198e:	0002      	movs	r2, r0
    1990:	000b      	movs	r3, r1
    1992:	9006      	str	r0, [sp, #24]
    1994:	9107      	str	r1, [sp, #28]
    1996:	9808      	ldr	r0, [sp, #32]
    1998:	9909      	ldr	r1, [sp, #36]	; 0x24
    199a:	47a8      	blx	r5
    199c:	9a10      	ldr	r2, [sp, #64]	; 0x40
    199e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    19a0:	0006      	movs	r6, r0
    19a2:	000f      	movs	r7, r1
    19a4:	9800      	ldr	r0, [sp, #0]
    19a6:	9901      	ldr	r1, [sp, #4]
    19a8:	47a8      	blx	r5
    19aa:	0002      	movs	r2, r0
    19ac:	000b      	movs	r3, r1
    19ae:	0030      	movs	r0, r6
    19b0:	0039      	movs	r1, r7
    19b2:	4e86      	ldr	r6, [pc, #536]	; (1bcc <computeKalmanGains+0x738>)
    19b4:	47b0      	blx	r6
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
    19b6:	9a06      	ldr	r2, [sp, #24]
    19b8:	9b07      	ldr	r3, [sp, #28]

        kgain[2][0] = (pestp[2][0] * (pestp[2][2] + acceleration_variance) - pestp[2][2] * pestp[2][0])/det;

        kgain[2][1] = (pestp[2][0] * (-pestp[0][2]) + pestp[2][2] * (pestp[0][0] + altitude_variance))/det;

        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
    19ba:	9018      	str	r0, [sp, #96]	; 0x60
    19bc:	9119      	str	r1, [sp, #100]	; 0x64
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
    19be:	9826      	ldr	r0, [sp, #152]	; 0x98
    19c0:	9927      	ldr	r1, [sp, #156]	; 0x9c
    19c2:	47a8      	blx	r5
    19c4:	9a10      	ldr	r2, [sp, #64]	; 0x40
    19c6:	9b11      	ldr	r3, [sp, #68]	; 0x44
    19c8:	0006      	movs	r6, r0
    19ca:	000f      	movs	r7, r1
    19cc:	980c      	ldr	r0, [sp, #48]	; 0x30
    19ce:	990d      	ldr	r1, [sp, #52]	; 0x34
    19d0:	47a8      	blx	r5
    19d2:	0002      	movs	r2, r0
    19d4:	000b      	movs	r3, r1
    19d6:	0030      	movs	r0, r6
    19d8:	0039      	movs	r1, r7
    19da:	4e7c      	ldr	r6, [pc, #496]	; (1bcc <computeKalmanGains+0x738>)
    19dc:	47b0      	blx	r6
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
    19de:	9a06      	ldr	r2, [sp, #24]
    19e0:	9b07      	ldr	r3, [sp, #28]
        kgain[2][0] = (pestp[2][0] * (pestp[2][2] + acceleration_variance) - pestp[2][2] * pestp[2][0])/det;

        kgain[2][1] = (pestp[2][0] * (-pestp[0][2]) + pestp[2][2] * (pestp[0][0] + altitude_variance))/det;

        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
    19e2:	901a      	str	r0, [sp, #104]	; 0x68
    19e4:	911b      	str	r1, [sp, #108]	; 0x6c
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
    19e6:	9804      	ldr	r0, [sp, #16]
    19e8:	9914      	ldr	r1, [sp, #80]	; 0x50
    19ea:	47a8      	blx	r5
    19ec:	9a10      	ldr	r2, [sp, #64]	; 0x40
    19ee:	9b11      	ldr	r3, [sp, #68]	; 0x44
    19f0:	0006      	movs	r6, r0
    19f2:	000f      	movs	r7, r1
    19f4:	9802      	ldr	r0, [sp, #8]
    19f6:	9903      	ldr	r1, [sp, #12]
    19f8:	47a8      	blx	r5
    19fa:	0002      	movs	r2, r0
    19fc:	000b      	movs	r3, r1
    19fe:	0030      	movs	r0, r6
    1a00:	0039      	movs	r1, r7
    1a02:	4e72      	ldr	r6, [pc, #456]	; (1bcc <computeKalmanGains+0x738>)
    1a04:	47b0      	blx	r6
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
    1a06:	2280      	movs	r2, #128	; 0x80
    1a08:	0612      	lsls	r2, r2, #24
    1a0a:	4694      	mov	ip, r2
    1a0c:	9b32      	ldr	r3, [sp, #200]	; 0xc8
    1a0e:	9a16      	ldr	r2, [sp, #88]	; 0x58
    1a10:	4463      	add	r3, ip
    1a12:	930a      	str	r3, [sp, #40]	; 0x28
    1a14:	9b0a      	ldr	r3, [sp, #40]	; 0x28

        kgain[2][1] = (pestp[2][0] * (-pestp[0][2]) + pestp[2][2] * (pestp[0][0] + altitude_variance))/det;

        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
    1a16:	9010      	str	r0, [sp, #64]	; 0x40
    1a18:	9111      	str	r1, [sp, #68]	; 0x44
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
    1a1a:	9808      	ldr	r0, [sp, #32]
    1a1c:	9909      	ldr	r1, [sp, #36]	; 0x24
    1a1e:	47a8      	blx	r5
    1a20:	9a22      	ldr	r2, [sp, #136]	; 0x88
    1a22:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    1a24:	47a0      	blx	r4
    1a26:	9a12      	ldr	r2, [sp, #72]	; 0x48
    1a28:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    1a2a:	0006      	movs	r6, r0
    1a2c:	000f      	movs	r7, r1
    1a2e:	9800      	ldr	r0, [sp, #0]
    1a30:	9901      	ldr	r1, [sp, #4]
    1a32:	47a8      	blx	r5
    1a34:	0002      	movs	r2, r0
    1a36:	000b      	movs	r3, r1
    1a38:	0030      	movs	r0, r6
    1a3a:	0039      	movs	r1, r7
    1a3c:	4e63      	ldr	r6, [pc, #396]	; (1bcc <computeKalmanGains+0x738>)
    1a3e:	47b0      	blx	r6
        pest[1][1] = pestp[0][1] * (-kgain[1][0]) + pestp[1][1] - kgain[1][1]*pestp[2][1];
    1a40:	9a28      	ldr	r2, [sp, #160]	; 0xa0
    1a42:	9b29      	ldr	r3, [sp, #164]	; 0xa4
        kgain[2][1] = (pestp[2][0] * (-pestp[0][2]) + pestp[2][2] * (pestp[0][0] + altitude_variance))/det;

        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
    1a44:	9006      	str	r0, [sp, #24]
    1a46:	9107      	str	r1, [sp, #28]
        pest[1][1] = pestp[0][1] * (-kgain[1][0]) + pestp[1][1] - kgain[1][1]*pestp[2][1];
    1a48:	981e      	ldr	r0, [sp, #120]	; 0x78
    1a4a:	991f      	ldr	r1, [sp, #124]	; 0x7c
    1a4c:	47a0      	blx	r4
    1a4e:	4a61      	ldr	r2, [pc, #388]	; (1bd4 <computeKalmanGains+0x740>)
    1a50:	0006      	movs	r6, r0
    1a52:	000f      	movs	r7, r1
    1a54:	9820      	ldr	r0, [sp, #128]	; 0x80
    1a56:	9921      	ldr	r1, [sp, #132]	; 0x84
    1a58:	4b5f      	ldr	r3, [pc, #380]	; (1bd8 <computeKalmanGains+0x744>)
    1a5a:	47a8      	blx	r5
    1a5c:	0002      	movs	r2, r0
    1a5e:	000b      	movs	r3, r1
    1a60:	0030      	movs	r0, r6
    1a62:	0039      	movs	r1, r7
    1a64:	47a0      	blx	r4
    1a66:	9a16      	ldr	r2, [sp, #88]	; 0x58
    1a68:	0006      	movs	r6, r0
    1a6a:	000f      	movs	r7, r1
    1a6c:	9826      	ldr	r0, [sp, #152]	; 0x98
    1a6e:	9927      	ldr	r1, [sp, #156]	; 0x9c
    1a70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1a72:	47a8      	blx	r5
    1a74:	0002      	movs	r2, r0
    1a76:	000b      	movs	r3, r1
    1a78:	0030      	movs	r0, r6
    1a7a:	0039      	movs	r1, r7
    1a7c:	47a0      	blx	r4
    1a7e:	9a12      	ldr	r2, [sp, #72]	; 0x48
    1a80:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    1a82:	0006      	movs	r6, r0
    1a84:	000f      	movs	r7, r1
    1a86:	980c      	ldr	r0, [sp, #48]	; 0x30
    1a88:	990d      	ldr	r1, [sp, #52]	; 0x34
    1a8a:	47a8      	blx	r5
    1a8c:	0002      	movs	r2, r0
    1a8e:	000b      	movs	r3, r1
    1a90:	0030      	movs	r0, r6
    1a92:	0039      	movs	r1, r7
    1a94:	4e4d      	ldr	r6, [pc, #308]	; (1bcc <computeKalmanGains+0x738>)
    1a96:	47b0      	blx	r6
        pest[1][2] = pestp[0][2] * (-kgain[1][0]) + pestp[1][2] - kgain[1][1]*pestp[2][2];
    1a98:	9b0a      	ldr	r3, [sp, #40]	; 0x28

        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
        pest[1][1] = pestp[0][1] * (-kgain[1][0]) + pestp[1][1] - kgain[1][1]*pestp[2][1];
    1a9a:	9008      	str	r0, [sp, #32]
    1a9c:	9109      	str	r1, [sp, #36]	; 0x24
        pest[1][2] = pestp[0][2] * (-kgain[1][0]) + pestp[1][2] - kgain[1][1]*pestp[2][2];
    1a9e:	9a16      	ldr	r2, [sp, #88]	; 0x58
    1aa0:	9804      	ldr	r0, [sp, #16]
    1aa2:	9914      	ldr	r1, [sp, #80]	; 0x50
    1aa4:	47a8      	blx	r5
    1aa6:	9a24      	ldr	r2, [sp, #144]	; 0x90
    1aa8:	9b25      	ldr	r3, [sp, #148]	; 0x94
    1aaa:	47a0      	blx	r4
    1aac:	9a12      	ldr	r2, [sp, #72]	; 0x48
    1aae:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    1ab0:	0006      	movs	r6, r0
    1ab2:	000f      	movs	r7, r1
    1ab4:	9802      	ldr	r0, [sp, #8]
    1ab6:	9903      	ldr	r1, [sp, #12]
    1ab8:	47a8      	blx	r5
    1aba:	4c44      	ldr	r4, [pc, #272]	; (1bcc <computeKalmanGains+0x738>)
    1abc:	0002      	movs	r2, r0
    1abe:	000b      	movs	r3, r1
    1ac0:	0030      	movs	r0, r6
    1ac2:	0039      	movs	r1, r7
    1ac4:	47a0      	blx	r4
        pest[2][0] = (1.0 - kgain[2][1]) * pestp[2][0] - kgain[2][0] * pestp[2][0];
    1ac6:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
    1ac8:	9b2b      	ldr	r3, [sp, #172]	; 0xac
        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
        pest[1][1] = pestp[0][1] * (-kgain[1][0]) + pestp[1][1] - kgain[1][1]*pestp[2][1];
        pest[1][2] = pestp[0][2] * (-kgain[1][0]) + pestp[1][2] - kgain[1][1]*pestp[2][2];
    1aca:	9004      	str	r0, [sp, #16]
    1acc:	9105      	str	r1, [sp, #20]
        pest[2][0] = (1.0 - kgain[2][1]) * pestp[2][0] - kgain[2][0] * pestp[2][0];
    1ace:	2000      	movs	r0, #0
    1ad0:	493f      	ldr	r1, [pc, #252]	; (1bd0 <computeKalmanGains+0x73c>)
    1ad2:	47a0      	blx	r4
    1ad4:	0002      	movs	r2, r0
    1ad6:	000b      	movs	r3, r1
    1ad8:	9012      	str	r0, [sp, #72]	; 0x48
    1ada:	9113      	str	r1, [sp, #76]	; 0x4c
    1adc:	9800      	ldr	r0, [sp, #0]
    1ade:	9901      	ldr	r1, [sp, #4]
    1ae0:	47a8      	blx	r5
    1ae2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    1ae4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1ae6:	0006      	movs	r6, r0
    1ae8:	000f      	movs	r7, r1
    1aea:	9800      	ldr	r0, [sp, #0]
    1aec:	9901      	ldr	r1, [sp, #4]
    1aee:	47a8      	blx	r5
    1af0:	0002      	movs	r2, r0
    1af2:	000b      	movs	r3, r1
    1af4:	0030      	movs	r0, r6
    1af6:	0039      	movs	r1, r7
    1af8:	47a0      	blx	r4
        pest[2][1] = (1.0 - kgain[2][1]) * pestp[2][1] - kgain[2][0] * pestp[2][1];
    1afa:	9a12      	ldr	r2, [sp, #72]	; 0x48
    1afc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
        pest[1][1] = pestp[0][1] * (-kgain[1][0]) + pestp[1][1] - kgain[1][1]*pestp[2][1];
        pest[1][2] = pestp[0][2] * (-kgain[1][0]) + pestp[1][2] - kgain[1][1]*pestp[2][2];
        pest[2][0] = (1.0 - kgain[2][1]) * pestp[2][0] - kgain[2][0] * pestp[2][0];
    1afe:	900a      	str	r0, [sp, #40]	; 0x28
    1b00:	910b      	str	r1, [sp, #44]	; 0x2c
        pest[2][1] = (1.0 - kgain[2][1]) * pestp[2][1] - kgain[2][0] * pestp[2][1];
    1b02:	980c      	ldr	r0, [sp, #48]	; 0x30
    1b04:	990d      	ldr	r1, [sp, #52]	; 0x34
    1b06:	47a8      	blx	r5
    1b08:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    1b0a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1b0c:	0006      	movs	r6, r0
    1b0e:	000f      	movs	r7, r1
    1b10:	980c      	ldr	r0, [sp, #48]	; 0x30
    1b12:	990d      	ldr	r1, [sp, #52]	; 0x34
    1b14:	47a8      	blx	r5
    1b16:	0002      	movs	r2, r0
    1b18:	000b      	movs	r3, r1
    1b1a:	0030      	movs	r0, r6
    1b1c:	0039      	movs	r1, r7
    1b1e:	47a0      	blx	r4
    1b20:	900c      	str	r0, [sp, #48]	; 0x30
    1b22:	910d      	str	r1, [sp, #52]	; 0x34
        pest[2][2] = (1.0 - kgain[2][1]) * pestp[2][2] - kgain[2][0] * pestp[2][2];
    1b24:	9a12      	ldr	r2, [sp, #72]	; 0x48
    1b26:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    1b28:	9802      	ldr	r0, [sp, #8]
    1b2a:	9903      	ldr	r1, [sp, #12]
    1b2c:	47a8      	blx	r5
    1b2e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    1b30:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1b32:	0006      	movs	r6, r0
    1b34:	000f      	movs	r7, r1
    1b36:	9802      	ldr	r0, [sp, #8]
    1b38:	9903      	ldr	r1, [sp, #12]
    1b3a:	47a8      	blx	r5
    1b3c:	000b      	movs	r3, r1
    1b3e:	0002      	movs	r2, r0
    1b40:	0039      	movs	r1, r7
    1b42:	0030      	movs	r0, r6
    1b44:	47a0      	blx	r4
         * time through the mill. Because I have noticed very early convergance
         * in a few cases (< 20 iterations) I am delaying this for at least
         * 100 iterations.
         */
        notdone = 0;
        k++;
    1b46:	2400      	movs	r4, #0
    1b48:	9b1d      	ldr	r3, [sp, #116]	; 0x74
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
        pest[1][1] = pestp[0][1] * (-kgain[1][0]) + pestp[1][1] - kgain[1][1]*pestp[2][1];
        pest[1][2] = pestp[0][2] * (-kgain[1][0]) + pestp[1][2] - kgain[1][1]*pestp[2][2];
        pest[2][0] = (1.0 - kgain[2][1]) * pestp[2][0] - kgain[2][0] * pestp[2][0];
        pest[2][1] = (1.0 - kgain[2][1]) * pestp[2][1] - kgain[2][0] * pestp[2][1];
        pest[2][2] = (1.0 - kgain[2][1]) * pestp[2][2] - kgain[2][0] * pestp[2][2];
    1b4a:	9002      	str	r0, [sp, #8]
    1b4c:	9103      	str	r1, [sp, #12]
         * time through the mill. Because I have noticed very early convergance
         * in a few cases (< 20 iterations) I am delaying this for at least
         * 100 iterations.
         */
        notdone = 0;
        k++;
    1b4e:	3301      	adds	r3, #1
    1b50:	931d      	str	r3, [sp, #116]	; 0x74
        for( i = 0; i <= 2; i++)
            for( j = 0; j <= 1; j++) {
                if( (kgain[i][j] - lastkgain[i][j])/lastkgain[i][j] > 0.00001)
    1b52:	ab34      	add	r3, sp, #208	; 0xd0
    1b54:	9316      	str	r3, [sp, #88]	; 0x58
    1b56:	4b1d      	ldr	r3, [pc, #116]	; (1bcc <computeKalmanGains+0x738>)
        /* Check for convergance. Criteria is less than .001% change from last
         * time through the mill. Because I have noticed very early convergance
         * in a few cases (< 20 iterations) I am delaying this for at least
         * 100 iterations.
         */
        notdone = 0;
    1b58:	940e      	str	r4, [sp, #56]	; 0x38
        k++;
        for( i = 0; i <= 2; i++)
            for( j = 0; j <= 1; j++) {
                if( (kgain[i][j] - lastkgain[i][j])/lastkgain[i][j] > 0.00001)
    1b5a:	931e      	str	r3, [sp, #120]	; 0x78
    1b5c:	ab40      	add	r3, sp, #256	; 0x100
    1b5e:	191b      	adds	r3, r3, r4
    1b60:	9312      	str	r3, [sp, #72]	; 0x48

        pestp[2][2] = pestp[2][2] + model_variance;
        /*
          Calculate Kalman Gain
        */
        det = (pestp[0][0]+altitude_variance)*(pestp[2][2] + acceleration_variance) - pestp[2][0] * pestp[0][2];
    1b62:	2300      	movs	r3, #0
    1b64:	9300      	str	r3, [sp, #0]
         */
        notdone = 0;
        k++;
        for( i = 0; i <= 2; i++)
            for( j = 0; j <= 1; j++) {
                if( (kgain[i][j] - lastkgain[i][j])/lastkgain[i][j] > 0.00001)
    1b66:	9b00      	ldr	r3, [sp, #0]
    1b68:	9a16      	ldr	r2, [sp, #88]	; 0x58
    1b6a:	18e3      	adds	r3, r4, r3
    1b6c:	18d3      	adds	r3, r2, r3
    1b6e:	681a      	ldr	r2, [r3, #0]
    1b70:	685b      	ldr	r3, [r3, #4]
    1b72:	9214      	str	r2, [sp, #80]	; 0x50
    1b74:	9315      	str	r3, [sp, #84]	; 0x54
    1b76:	9814      	ldr	r0, [sp, #80]	; 0x50
    1b78:	9915      	ldr	r1, [sp, #84]	; 0x54
    1b7a:	9b12      	ldr	r3, [sp, #72]	; 0x48
    1b7c:	9d1e      	ldr	r5, [sp, #120]	; 0x78
    1b7e:	681e      	ldr	r6, [r3, #0]
    1b80:	685f      	ldr	r7, [r3, #4]
    1b82:	0032      	movs	r2, r6
    1b84:	003b      	movs	r3, r7
    1b86:	47a8      	blx	r5
    1b88:	0032      	movs	r2, r6
    1b8a:	003b      	movs	r3, r7
    1b8c:	4d0e      	ldr	r5, [pc, #56]	; (1bc8 <computeKalmanGains+0x734>)
    1b8e:	47a8      	blx	r5
    1b90:	4b12      	ldr	r3, [pc, #72]	; (1bdc <computeKalmanGains+0x748>)
    1b92:	4a13      	ldr	r2, [pc, #76]	; (1be0 <computeKalmanGains+0x74c>)
    1b94:	4e13      	ldr	r6, [pc, #76]	; (1be4 <computeKalmanGains+0x750>)
    1b96:	47b0      	blx	r6
                    notdone++;
    1b98:	1e43      	subs	r3, r0, #1
    1b9a:	4198      	sbcs	r0, r3
    1b9c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
                lastkgain[i][j] = kgain[i][j];
    1b9e:	9912      	ldr	r1, [sp, #72]	; 0x48
        notdone = 0;
        k++;
        for( i = 0; i <= 2; i++)
            for( j = 0; j <= 1; j++) {
                if( (kgain[i][j] - lastkgain[i][j])/lastkgain[i][j] > 0.00001)
                    notdone++;
    1ba0:	181b      	adds	r3, r3, r0
    1ba2:	930e      	str	r3, [sp, #56]	; 0x38
                lastkgain[i][j] = kgain[i][j];
    1ba4:	9a14      	ldr	r2, [sp, #80]	; 0x50
    1ba6:	9b15      	ldr	r3, [sp, #84]	; 0x54
    1ba8:	c10c      	stmia	r1!, {r2, r3}
    1baa:	9b00      	ldr	r3, [sp, #0]
    1bac:	9112      	str	r1, [sp, #72]	; 0x48
    1bae:	3308      	adds	r3, #8
    1bb0:	9300      	str	r3, [sp, #0]
         * 100 iterations.
         */
        notdone = 0;
        k++;
        for( i = 0; i <= 2; i++)
            for( j = 0; j <= 1; j++) {
    1bb2:	2b10      	cmp	r3, #16
    1bb4:	d1d7      	bne.n	1b66 <computeKalmanGains+0x6d2>
    1bb6:	3410      	adds	r4, #16
         * in a few cases (< 20 iterations) I am delaying this for at least
         * 100 iterations.
         */
        notdone = 0;
        k++;
        for( i = 0; i <= 2; i++)
    1bb8:	2c30      	cmp	r4, #48	; 0x30
    1bba:	d1cf      	bne.n	1b5c <computeKalmanGains+0x6c8>
            for( j = 0; j <= 1; j++) {
                if( (kgain[i][j] - lastkgain[i][j])/lastkgain[i][j] > 0.00001)
                    notdone++;
                lastkgain[i][j] = kgain[i][j];
            }
        if( notdone || k < 100)
    1bbc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    1bbe:	2b00      	cmp	r3, #0
    1bc0:	d000      	beq.n	1bc4 <computeKalmanGains+0x730>
    1bc2:	e4aa      	b.n	151a <computeKalmanGains+0x86>
    1bc4:	e010      	b.n	1be8 <computeKalmanGains+0x754>
    1bc6:	46c0      	nop			; (mov r8, r8)
    1bc8:	000041ed 	.word	0x000041ed
    1bcc:	00004f29 	.word	0x00004f29
    1bd0:	3ff00000 	.word	0x3ff00000
    1bd4:	d2f1a9fc 	.word	0xd2f1a9fc
    1bd8:	3f80624d 	.word	0x3f80624d
    1bdc:	3ee4f8b5 	.word	0x3ee4f8b5
    1be0:	88e368f1 	.word	0x88e368f1
    1be4:	00003905 	.word	0x00003905
    1be8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    1bea:	2b63      	cmp	r3, #99	; 0x63
    1bec:	dc00      	bgt.n	1bf0 <computeKalmanGains+0x75c>
    1bee:	e494      	b.n	151a <computeKalmanGains+0x86>
    1bf0:	9b33      	ldr	r3, [sp, #204]	; 0xcc
    1bf2:	aa36      	add	r2, sp, #216	; 0xd8
    1bf4:	0019      	movs	r1, r3
    1bf6:	3130      	adds	r1, #48	; 0x30
            break;
    }

    for( i = 0; i <= 2; i++) {
        for( j = 0; j <=1; j++) {
            my_kalmanFilter->kgain[i][j] = kgain[i][j];
    1bf8:	0010      	movs	r0, r2
    1bfa:	3808      	subs	r0, #8
    1bfc:	6804      	ldr	r4, [r0, #0]
    1bfe:	6845      	ldr	r5, [r0, #4]
    1c00:	601c      	str	r4, [r3, #0]
    1c02:	605d      	str	r5, [r3, #4]
    1c04:	6814      	ldr	r4, [r2, #0]
    1c06:	6855      	ldr	r5, [r2, #4]
    1c08:	609c      	str	r4, [r3, #8]
    1c0a:	60dd      	str	r5, [r3, #12]
    1c0c:	3310      	adds	r3, #16
    1c0e:	3210      	adds	r2, #16
            continue;
        else
            break;
    }

    for( i = 0; i <= 2; i++) {
    1c10:	4299      	cmp	r1, r3
    1c12:	d1f1      	bne.n	1bf8 <computeKalmanGains+0x764>
        for( j = 0; j <=1; j++) {
            my_kalmanFilter->kgain[i][j] = kgain[i][j];
        }
    }
}
    1c14:	b04d      	add	sp, #308	; 0x134
    1c16:	bdf0      	pop	{r4, r5, r6, r7, pc}

00001c18 <computeKalmanStates>:
void computeKalmanStates(Altimeter *my_altimeter) {

    double alt_inovation, accel_inovation;


    double accel = my_altimeter->myIMU.accelZ*32.17417;
    1c18:	0003      	movs	r3, r0
            my_kalmanFilter->kgain[i][j] = kgain[i][j];
        }
    }
}

void computeKalmanStates(Altimeter *my_altimeter) {
    1c1a:	b5f0      	push	{r4, r5, r6, r7, lr}

    double alt_inovation, accel_inovation;


    double accel = my_altimeter->myIMU.accelZ*32.17417;
    1c1c:	33cc      	adds	r3, #204	; 0xcc
            my_kalmanFilter->kgain[i][j] = kgain[i][j];
        }
    }
}

void computeKalmanStates(Altimeter *my_altimeter) {
    1c1e:	b091      	sub	sp, #68	; 0x44
    1c20:	0005      	movs	r5, r0

    double alt_inovation, accel_inovation;


    double accel = my_altimeter->myIMU.accelZ*32.17417;
    1c22:	6818      	ldr	r0, [r3, #0]
    1c24:	4b77      	ldr	r3, [pc, #476]	; (1e04 <computeKalmanStates+0x1ec>)
    1c26:	4798      	blx	r3
    1c28:	4a77      	ldr	r2, [pc, #476]	; (1e08 <computeKalmanStates+0x1f0>)
    1c2a:	4b78      	ldr	r3, [pc, #480]	; (1e0c <computeKalmanStates+0x1f4>)
    1c2c:	4c78      	ldr	r4, [pc, #480]	; (1e10 <computeKalmanStates+0x1f8>)
    1c2e:	47a0      	blx	r4
    double pressure = my_altimeter->myBarometer.altitudefeet;
    1c30:	6b2e      	ldr	r6, [r5, #48]	; 0x30
    1c32:	6b6f      	ldr	r7, [r5, #52]	; 0x34
void computeKalmanStates(Altimeter *my_altimeter) {

    double alt_inovation, accel_inovation;


    double accel = my_altimeter->myIMU.accelZ*32.17417;
    1c34:	9000      	str	r0, [sp, #0]
    1c36:	9101      	str	r1, [sp, #4]

    phi[0][1]    = dt;
    phi[1][2]    = dt;
    phi[0][2]    = dt*dt/2.0;

    if (my_altimeter->myKalmanFilter.est[0] == 0) {
    1c38:	6fa8      	ldr	r0, [r5, #120]	; 0x78
    1c3a:	6fe9      	ldr	r1, [r5, #124]	; 0x7c
    1c3c:	2200      	movs	r2, #0
    1c3e:	2300      	movs	r3, #0
    1c40:	4c74      	ldr	r4, [pc, #464]	; (1e14 <computeKalmanStates+0x1fc>)
    1c42:	47a0      	blx	r4
    1c44:	2800      	cmp	r0, #0
    1c46:	d001      	beq.n	1c4c <computeKalmanStates+0x34>
        my_altimeter->myKalmanFilter.est[0] = pressure;
    1c48:	67ae      	str	r6, [r5, #120]	; 0x78
    1c4a:	67ef      	str	r7, [r5, #124]	; 0x7c
    }

    /* Compute the innovations */
    alt_inovation = pressure - my_altimeter->myKalmanFilter.estp[0];
    1c4c:	002b      	movs	r3, r5
    1c4e:	3390      	adds	r3, #144	; 0x90
    1c50:	4c71      	ldr	r4, [pc, #452]	; (1e18 <computeKalmanStates+0x200>)
    1c52:	9308      	str	r3, [sp, #32]
    1c54:	0030      	movs	r0, r6
    1c56:	681a      	ldr	r2, [r3, #0]
    1c58:	685b      	ldr	r3, [r3, #4]
    1c5a:	0039      	movs	r1, r7
    1c5c:	47a0      	blx	r4
    accel_inovation = accel - my_altimeter->myKalmanFilter.estp[2];
    1c5e:	002b      	movs	r3, r5
    1c60:	33a0      	adds	r3, #160	; 0xa0
    if (my_altimeter->myKalmanFilter.est[0] == 0) {
        my_altimeter->myKalmanFilter.est[0] = pressure;
    }

    /* Compute the innovations */
    alt_inovation = pressure - my_altimeter->myKalmanFilter.estp[0];
    1c62:	9004      	str	r0, [sp, #16]
    1c64:	9105      	str	r1, [sp, #20]
    accel_inovation = accel - my_altimeter->myKalmanFilter.estp[2];
    1c66:	9800      	ldr	r0, [sp, #0]
    1c68:	9901      	ldr	r1, [sp, #4]
    1c6a:	930b      	str	r3, [sp, #44]	; 0x2c
    1c6c:	681a      	ldr	r2, [r3, #0]
    1c6e:	685b      	ldr	r3, [r3, #4]
    1c70:	47a0      	blx	r4


    /* Propagate state */
    my_altimeter->myKalmanFilter.estp[0] = phi[0][0] * my_altimeter->myKalmanFilter.est[0] + phi[0][1] * my_altimeter->myKalmanFilter.est[1] + phi[0][2] * my_altimeter->myKalmanFilter.est[2];
    1c72:	6fae      	ldr	r6, [r5, #120]	; 0x78
    1c74:	6fef      	ldr	r7, [r5, #124]	; 0x7c
    1c76:	002b      	movs	r3, r5
    1c78:	3380      	adds	r3, #128	; 0x80
    1c7a:	930c      	str	r3, [sp, #48]	; 0x30
    1c7c:	685c      	ldr	r4, [r3, #4]
    1c7e:	681b      	ldr	r3, [r3, #0]
    1c80:	9300      	str	r3, [sp, #0]
    1c82:	9401      	str	r4, [sp, #4]
    1c84:	002b      	movs	r3, r5
    1c86:	3388      	adds	r3, #136	; 0x88
        my_altimeter->myKalmanFilter.est[0] = pressure;
    }

    /* Compute the innovations */
    alt_inovation = pressure - my_altimeter->myKalmanFilter.estp[0];
    accel_inovation = accel - my_altimeter->myKalmanFilter.estp[2];
    1c88:	9006      	str	r0, [sp, #24]
    1c8a:	9107      	str	r1, [sp, #28]


    /* Propagate state */
    my_altimeter->myKalmanFilter.estp[0] = phi[0][0] * my_altimeter->myKalmanFilter.est[0] + phi[0][1] * my_altimeter->myKalmanFilter.est[1] + phi[0][2] * my_altimeter->myKalmanFilter.est[2];
    1c8c:	9800      	ldr	r0, [sp, #0]
    1c8e:	9901      	ldr	r1, [sp, #4]
    1c90:	930d      	str	r3, [sp, #52]	; 0x34
    1c92:	4a62      	ldr	r2, [pc, #392]	; (1e1c <computeKalmanStates+0x204>)
    1c94:	685c      	ldr	r4, [r3, #4]
    1c96:	681b      	ldr	r3, [r3, #0]
    1c98:	9302      	str	r3, [sp, #8]
    1c9a:	9403      	str	r4, [sp, #12]
    1c9c:	4c5c      	ldr	r4, [pc, #368]	; (1e10 <computeKalmanStates+0x1f8>)
    1c9e:	4b60      	ldr	r3, [pc, #384]	; (1e20 <computeKalmanStates+0x208>)
    1ca0:	47a0      	blx	r4
    1ca2:	0032      	movs	r2, r6
    1ca4:	003b      	movs	r3, r7
    1ca6:	4c5f      	ldr	r4, [pc, #380]	; (1e24 <computeKalmanStates+0x20c>)
    1ca8:	47a0      	blx	r4
    1caa:	4c59      	ldr	r4, [pc, #356]	; (1e10 <computeKalmanStates+0x1f8>)
    1cac:	900e      	str	r0, [sp, #56]	; 0x38
    1cae:	910f      	str	r1, [sp, #60]	; 0x3c
    1cb0:	9802      	ldr	r0, [sp, #8]
    1cb2:	9903      	ldr	r1, [sp, #12]
    1cb4:	4a5c      	ldr	r2, [pc, #368]	; (1e28 <computeKalmanStates+0x210>)
    1cb6:	4b5d      	ldr	r3, [pc, #372]	; (1e2c <computeKalmanStates+0x214>)
    1cb8:	47a0      	blx	r4
    1cba:	4c5a      	ldr	r4, [pc, #360]	; (1e24 <computeKalmanStates+0x20c>)
    1cbc:	0002      	movs	r2, r0
    1cbe:	000b      	movs	r3, r1
    1cc0:	980e      	ldr	r0, [sp, #56]	; 0x38
    1cc2:	990f      	ldr	r1, [sp, #60]	; 0x3c
    1cc4:	47a0      	blx	r4
    1cc6:	900e      	str	r0, [sp, #56]	; 0x38
    1cc8:	910f      	str	r1, [sp, #60]	; 0x3c
    1cca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    1ccc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1cce:	9908      	ldr	r1, [sp, #32]
    my_altimeter->myKalmanFilter.estp[1] = phi[1][0] * my_altimeter->myKalmanFilter.est[0] + phi[1][1] * my_altimeter->myKalmanFilter.est[1] + phi[1][2] * my_altimeter->myKalmanFilter.est[2];
    1cd0:	4c4f      	ldr	r4, [pc, #316]	; (1e10 <computeKalmanStates+0x1f8>)
    alt_inovation = pressure - my_altimeter->myKalmanFilter.estp[0];
    accel_inovation = accel - my_altimeter->myKalmanFilter.estp[2];


    /* Propagate state */
    my_altimeter->myKalmanFilter.estp[0] = phi[0][0] * my_altimeter->myKalmanFilter.est[0] + phi[0][1] * my_altimeter->myKalmanFilter.est[1] + phi[0][2] * my_altimeter->myKalmanFilter.est[2];
    1cd2:	600a      	str	r2, [r1, #0]
    1cd4:	604b      	str	r3, [r1, #4]
    my_altimeter->myKalmanFilter.estp[1] = phi[1][0] * my_altimeter->myKalmanFilter.est[0] + phi[1][1] * my_altimeter->myKalmanFilter.est[1] + phi[1][2] * my_altimeter->myKalmanFilter.est[2];
    1cd6:	0030      	movs	r0, r6
    1cd8:	2200      	movs	r2, #0
    1cda:	2300      	movs	r3, #0
    1cdc:	0039      	movs	r1, r7
    1cde:	47a0      	blx	r4
    1ce0:	4c50      	ldr	r4, [pc, #320]	; (1e24 <computeKalmanStates+0x20c>)
    1ce2:	9008      	str	r0, [sp, #32]
    1ce4:	9109      	str	r1, [sp, #36]	; 0x24
    1ce6:	0002      	movs	r2, r0
    1ce8:	000b      	movs	r3, r1
    1cea:	9800      	ldr	r0, [sp, #0]
    1cec:	9901      	ldr	r1, [sp, #4]
    1cee:	47a0      	blx	r4
    1cf0:	4c47      	ldr	r4, [pc, #284]	; (1e10 <computeKalmanStates+0x1f8>)
    1cf2:	0006      	movs	r6, r0
    1cf4:	000f      	movs	r7, r1
    1cf6:	9802      	ldr	r0, [sp, #8]
    1cf8:	9903      	ldr	r1, [sp, #12]
    1cfa:	4a48      	ldr	r2, [pc, #288]	; (1e1c <computeKalmanStates+0x204>)
    1cfc:	4b48      	ldr	r3, [pc, #288]	; (1e20 <computeKalmanStates+0x208>)
    1cfe:	47a0      	blx	r4
    1d00:	4c48      	ldr	r4, [pc, #288]	; (1e24 <computeKalmanStates+0x20c>)
    1d02:	0002      	movs	r2, r0
    1d04:	000b      	movs	r3, r1
    1d06:	0030      	movs	r0, r6
    1d08:	0039      	movs	r1, r7
    1d0a:	47a0      	blx	r4
    1d0c:	002b      	movs	r3, r5
    1d0e:	0006      	movs	r6, r0
    1d10:	000f      	movs	r7, r1
    1d12:	3398      	adds	r3, #152	; 0x98
    1d14:	601e      	str	r6, [r3, #0]
    1d16:	605f      	str	r7, [r3, #4]
    my_altimeter->myKalmanFilter.estp[2] = phi[2][0] * my_altimeter->myKalmanFilter.est[0] + phi[2][1] * my_altimeter->myKalmanFilter.est[1] + phi[2][2] * my_altimeter->myKalmanFilter.est[2];
    1d18:	9800      	ldr	r0, [sp, #0]
    1d1a:	9901      	ldr	r1, [sp, #4]
    1d1c:	4c3c      	ldr	r4, [pc, #240]	; (1e10 <computeKalmanStates+0x1f8>)
    1d1e:	2200      	movs	r2, #0
    1d20:	2300      	movs	r3, #0
    1d22:	47a0      	blx	r4
    1d24:	9a08      	ldr	r2, [sp, #32]
    1d26:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1d28:	4c3e      	ldr	r4, [pc, #248]	; (1e24 <computeKalmanStates+0x20c>)
    1d2a:	47a0      	blx	r4
    1d2c:	9a02      	ldr	r2, [sp, #8]
    1d2e:	9b03      	ldr	r3, [sp, #12]
    1d30:	47a0      	blx	r4
    1d32:	9000      	str	r0, [sp, #0]
    1d34:	9101      	str	r1, [sp, #4]
    1d36:	9a00      	ldr	r2, [sp, #0]
    1d38:	9b01      	ldr	r3, [sp, #4]
    1d3a:	990b      	ldr	r1, [sp, #44]	; 0x2c

    /*
    Update state
    */
    my_altimeter->myKalmanFilter.est[0] = my_altimeter->myKalmanFilter.estp[0] + my_altimeter->myKalmanFilter.kgain[0][0] * alt_inovation + my_altimeter->myKalmanFilter.kgain[0][1] * accel_inovation;
    1d3c:	4c34      	ldr	r4, [pc, #208]	; (1e10 <computeKalmanStates+0x1f8>)


    /* Propagate state */
    my_altimeter->myKalmanFilter.estp[0] = phi[0][0] * my_altimeter->myKalmanFilter.est[0] + phi[0][1] * my_altimeter->myKalmanFilter.est[1] + phi[0][2] * my_altimeter->myKalmanFilter.est[2];
    my_altimeter->myKalmanFilter.estp[1] = phi[1][0] * my_altimeter->myKalmanFilter.est[0] + phi[1][1] * my_altimeter->myKalmanFilter.est[1] + phi[1][2] * my_altimeter->myKalmanFilter.est[2];
    my_altimeter->myKalmanFilter.estp[2] = phi[2][0] * my_altimeter->myKalmanFilter.est[0] + phi[2][1] * my_altimeter->myKalmanFilter.est[1] + phi[2][2] * my_altimeter->myKalmanFilter.est[2];
    1d3e:	600a      	str	r2, [r1, #0]
    1d40:	604b      	str	r3, [r1, #4]

    /*
    Update state
    */
    my_altimeter->myKalmanFilter.est[0] = my_altimeter->myKalmanFilter.estp[0] + my_altimeter->myKalmanFilter.kgain[0][0] * alt_inovation + my_altimeter->myKalmanFilter.kgain[0][1] * accel_inovation;
    1d42:	6caa      	ldr	r2, [r5, #72]	; 0x48
    1d44:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
    1d46:	9804      	ldr	r0, [sp, #16]
    1d48:	9905      	ldr	r1, [sp, #20]
    1d4a:	47a0      	blx	r4
    1d4c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    1d4e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1d50:	4c34      	ldr	r4, [pc, #208]	; (1e24 <computeKalmanStates+0x20c>)
    1d52:	47a0      	blx	r4
    1d54:	6d2a      	ldr	r2, [r5, #80]	; 0x50
    1d56:	6d6b      	ldr	r3, [r5, #84]	; 0x54
    1d58:	9002      	str	r0, [sp, #8]
    1d5a:	9103      	str	r1, [sp, #12]
    1d5c:	9806      	ldr	r0, [sp, #24]
    1d5e:	9907      	ldr	r1, [sp, #28]
    1d60:	4c2b      	ldr	r4, [pc, #172]	; (1e10 <computeKalmanStates+0x1f8>)
    1d62:	47a0      	blx	r4
    1d64:	4c2f      	ldr	r4, [pc, #188]	; (1e24 <computeKalmanStates+0x20c>)
    1d66:	0002      	movs	r2, r0
    1d68:	000b      	movs	r3, r1
    1d6a:	9802      	ldr	r0, [sp, #8]
    1d6c:	9903      	ldr	r1, [sp, #12]
    1d6e:	47a0      	blx	r4
    1d70:	0002      	movs	r2, r0
    1d72:	000b      	movs	r3, r1
    1d74:	9002      	str	r0, [sp, #8]
    1d76:	9103      	str	r1, [sp, #12]
    my_altimeter->myKalmanFilter.est[1] = my_altimeter->myKalmanFilter.estp[1] + my_altimeter->myKalmanFilter.kgain[1][0] * alt_inovation + my_altimeter->myKalmanFilter.kgain[1][1] * accel_inovation;
    1d78:	9804      	ldr	r0, [sp, #16]
    1d7a:	9905      	ldr	r1, [sp, #20]
    my_altimeter->myKalmanFilter.estp[2] = phi[2][0] * my_altimeter->myKalmanFilter.est[0] + phi[2][1] * my_altimeter->myKalmanFilter.est[1] + phi[2][2] * my_altimeter->myKalmanFilter.est[2];

    /*
    Update state
    */
    my_altimeter->myKalmanFilter.est[0] = my_altimeter->myKalmanFilter.estp[0] + my_altimeter->myKalmanFilter.kgain[0][0] * alt_inovation + my_altimeter->myKalmanFilter.kgain[0][1] * accel_inovation;
    1d7c:	67aa      	str	r2, [r5, #120]	; 0x78
    1d7e:	67eb      	str	r3, [r5, #124]	; 0x7c
    my_altimeter->myKalmanFilter.est[1] = my_altimeter->myKalmanFilter.estp[1] + my_altimeter->myKalmanFilter.kgain[1][0] * alt_inovation + my_altimeter->myKalmanFilter.kgain[1][1] * accel_inovation;
    1d80:	6daa      	ldr	r2, [r5, #88]	; 0x58
    1d82:	6deb      	ldr	r3, [r5, #92]	; 0x5c
    1d84:	4c22      	ldr	r4, [pc, #136]	; (1e10 <computeKalmanStates+0x1f8>)
    1d86:	47a0      	blx	r4
    1d88:	0032      	movs	r2, r6
    1d8a:	003b      	movs	r3, r7
    1d8c:	4c25      	ldr	r4, [pc, #148]	; (1e24 <computeKalmanStates+0x20c>)
    1d8e:	47a0      	blx	r4
    1d90:	6e2a      	ldr	r2, [r5, #96]	; 0x60
    1d92:	6e6b      	ldr	r3, [r5, #100]	; 0x64
    1d94:	0006      	movs	r6, r0
    1d96:	000f      	movs	r7, r1
    1d98:	9806      	ldr	r0, [sp, #24]
    1d9a:	9907      	ldr	r1, [sp, #28]
    1d9c:	4c1c      	ldr	r4, [pc, #112]	; (1e10 <computeKalmanStates+0x1f8>)
    1d9e:	47a0      	blx	r4
    1da0:	4c20      	ldr	r4, [pc, #128]	; (1e24 <computeKalmanStates+0x20c>)
    1da2:	0002      	movs	r2, r0
    1da4:	000b      	movs	r3, r1
    1da6:	0030      	movs	r0, r6
    1da8:	0039      	movs	r1, r7
    1daa:	47a0      	blx	r4
    1dac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    my_altimeter->myKalmanFilter.est[2] = my_altimeter->myKalmanFilter.estp[2] + my_altimeter->myKalmanFilter.kgain[2][0] * alt_inovation + my_altimeter->myKalmanFilter.kgain[2][1] * accel_inovation;
    1dae:	4c18      	ldr	r4, [pc, #96]	; (1e10 <computeKalmanStates+0x1f8>)

    /*
    Update state
    */
    my_altimeter->myKalmanFilter.est[0] = my_altimeter->myKalmanFilter.estp[0] + my_altimeter->myKalmanFilter.kgain[0][0] * alt_inovation + my_altimeter->myKalmanFilter.kgain[0][1] * accel_inovation;
    my_altimeter->myKalmanFilter.est[1] = my_altimeter->myKalmanFilter.estp[1] + my_altimeter->myKalmanFilter.kgain[1][0] * alt_inovation + my_altimeter->myKalmanFilter.kgain[1][1] * accel_inovation;
    1db0:	6018      	str	r0, [r3, #0]
    1db2:	6059      	str	r1, [r3, #4]
    my_altimeter->myKalmanFilter.est[2] = my_altimeter->myKalmanFilter.estp[2] + my_altimeter->myKalmanFilter.kgain[2][0] * alt_inovation + my_altimeter->myKalmanFilter.kgain[2][1] * accel_inovation;
    1db4:	9804      	ldr	r0, [sp, #16]
    1db6:	9905      	ldr	r1, [sp, #20]
    1db8:	6eaa      	ldr	r2, [r5, #104]	; 0x68
    1dba:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
    1dbc:	47a0      	blx	r4
    1dbe:	9a00      	ldr	r2, [sp, #0]
    1dc0:	9b01      	ldr	r3, [sp, #4]
    1dc2:	4c18      	ldr	r4, [pc, #96]	; (1e24 <computeKalmanStates+0x20c>)
    1dc4:	47a0      	blx	r4
    1dc6:	6f2a      	ldr	r2, [r5, #112]	; 0x70
    1dc8:	6f6b      	ldr	r3, [r5, #116]	; 0x74
    1dca:	0006      	movs	r6, r0
    1dcc:	000f      	movs	r7, r1
    1dce:	9806      	ldr	r0, [sp, #24]
    1dd0:	9907      	ldr	r1, [sp, #28]
    1dd2:	4c0f      	ldr	r4, [pc, #60]	; (1e10 <computeKalmanStates+0x1f8>)
    1dd4:	47a0      	blx	r4
    1dd6:	4c13      	ldr	r4, [pc, #76]	; (1e24 <computeKalmanStates+0x20c>)
    1dd8:	0002      	movs	r2, r0
    1dda:	000b      	movs	r3, r1
    1ddc:	0030      	movs	r0, r6
    1dde:	0039      	movs	r1, r7
    1de0:	47a0      	blx	r4
    1de2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1de4:	6018      	str	r0, [r3, #0]
    1de6:	6059      	str	r1, [r3, #4]

    my_altimeter->myKalmanFilter.kalmanAccel = my_altimeter->myKalmanFilter.est[2];
    1de8:	4b11      	ldr	r3, [pc, #68]	; (1e30 <computeKalmanStates+0x218>)
    1dea:	4798      	blx	r3
    1dec:	002b      	movs	r3, r5
    1dee:	33a8      	adds	r3, #168	; 0xa8
    1df0:	8018      	strh	r0, [r3, #0]
    my_altimeter->myKalmanFilter.kalmanAltitude = my_altimeter->myKalmanFilter.est[0];
    1df2:	9802      	ldr	r0, [sp, #8]
    1df4:	9903      	ldr	r1, [sp, #12]
    1df6:	4b0f      	ldr	r3, [pc, #60]	; (1e34 <computeKalmanStates+0x21c>)
    1df8:	4798      	blx	r3
    1dfa:	35ac      	adds	r5, #172	; 0xac
    1dfc:	6028      	str	r0, [r5, #0]


}
    1dfe:	b011      	add	sp, #68	; 0x44
    1e00:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1e02:	46c0      	nop			; (mov r8, r8)
    1e04:	00005771 	.word	0x00005771
    1e08:	33daf8df 	.word	0x33daf8df
    1e0c:	4040164b 	.word	0x4040164b
    1e10:	00004a35 	.word	0x00004a35
    1e14:	000038d1 	.word	0x000038d1
    1e18:	00004f29 	.word	0x00004f29
    1e1c:	d2f1a9fc 	.word	0xd2f1a9fc
    1e20:	3f80624d 	.word	0x3f80624d
    1e24:	00003b95 	.word	0x00003b95
    1e28:	a0b5ed8d 	.word	0xa0b5ed8d
    1e2c:	3f00c6f7 	.word	0x3f00c6f7
    1e30:	00005611 	.word	0x00005611
    1e34:	000039f9 	.word	0x000039f9

00001e38 <makePage>:
#include <log.h>
#include <flight.h>
#include <boardDefines.h>


void makePage(Altimeter *my_altimeter, u8_t bytesToWrite, u8_t *data) {
    1e38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}


    u8_t location = my_altimeter->myFlashMemory.pageLocation;
    1e3a:	2681      	movs	r6, #129	; 0x81
    1e3c:	00b6      	lsls	r6, r6, #2
    1e3e:	5d85      	ldrb	r5, [r0, r6]
#include <log.h>
#include <flight.h>
#include <boardDefines.h>


void makePage(Altimeter *my_altimeter, u8_t bytesToWrite, u8_t *data) {
    1e40:	9200      	str	r2, [sp, #0]


    u8_t location = my_altimeter->myFlashMemory.pageLocation;
    u8_t bytesWritten = 0;

    if ((location + bytesToWrite) >= 0xFF) {
    1e42:	194b      	adds	r3, r1, r5
    1e44:	2bfe      	cmp	r3, #254	; 0xfe
    1e46:	dc03      	bgt.n	1e50 <makePage+0x18>
    1e48:	2300      	movs	r3, #0
        }

        my_altimeter->myFlashMemory.pageReady = true;

    } else {
        for (u16_t dataByte = 0; dataByte <= bytesToWrite; ++dataByte) {
    1e4a:	b289      	uxth	r1, r1
            my_altimeter->myFlashMemory.pageBuffer[(dataByte + location)] = data[dataByte];
    1e4c:	1947      	adds	r7, r0, r5
    1e4e:	e034      	b.n	1eba <makePage+0x82>
    1e50:	2300      	movs	r3, #0

    u8_t location = my_altimeter->myFlashMemory.pageLocation;
    u8_t bytesWritten = 0;

    if ((location + bytesToWrite) >= 0xFF) {
        for (u16_t dataByte = 0; (dataByte + location) < 0xFF; ++dataByte) {
    1e52:	195c      	adds	r4, r3, r5
    1e54:	b2de      	uxtb	r6, r3
    1e56:	2cfe      	cmp	r4, #254	; 0xfe
    1e58:	dc08      	bgt.n	1e6c <makePage+0x34>
            my_altimeter->myFlashMemory.pageBuffer[(dataByte + location)] = data[dataByte];
    1e5a:	9a00      	ldr	r2, [sp, #0]
    1e5c:	4f1f      	ldr	r7, [pc, #124]	; (1edc <makePage+0xa4>)
    1e5e:	5cd6      	ldrb	r6, [r2, r3]
    1e60:	1904      	adds	r4, r0, r4
    1e62:	19e4      	adds	r4, r4, r7

    u8_t location = my_altimeter->myFlashMemory.pageLocation;
    u8_t bytesWritten = 0;

    if ((location + bytesToWrite) >= 0xFF) {
        for (u16_t dataByte = 0; (dataByte + location) < 0xFF; ++dataByte) {
    1e64:	3301      	adds	r3, #1
            my_altimeter->myFlashMemory.pageBuffer[(dataByte + location)] = data[dataByte];
    1e66:	7026      	strb	r6, [r4, #0]

    u8_t location = my_altimeter->myFlashMemory.pageLocation;
    u8_t bytesWritten = 0;

    if ((location + bytesToWrite) >= 0xFF) {
        for (u16_t dataByte = 0; (dataByte + location) < 0xFF; ++dataByte) {
    1e68:	b29b      	uxth	r3, r3
    1e6a:	e7f2      	b.n	1e52 <makePage+0x1a>
            my_altimeter->myFlashMemory.pageBuffer[(dataByte + location)] = data[dataByte];
            bytesWritten++;
        }
        my_altimeter->myFlashMemory.pageLocation = 0x00;
    1e6c:	2381      	movs	r3, #129	; 0x81
    1e6e:	2500      	movs	r5, #0
    1e70:	009b      	lsls	r3, r3, #2
    1e72:	54c5      	strb	r5, [r0, r3]
    1e74:	4b19      	ldr	r3, [pc, #100]	; (1edc <makePage+0xa4>)
    1e76:	18c4      	adds	r4, r0, r3
    1e78:	4b19      	ldr	r3, [pc, #100]	; (1ee0 <makePage+0xa8>)
    1e7a:	18c3      	adds	r3, r0, r3
    1e7c:	9301      	str	r3, [sp, #4]
    1e7e:	0023      	movs	r3, r4
        for(u16_t i = 0; i <= 0xFF; ++i) {
            my_altimeter->myFlashMemory.pageToWrite[i] = my_altimeter->myFlashMemory.pageBuffer[i];
    1e80:	781f      	ldrb	r7, [r3, #0]
    1e82:	46bc      	mov	ip, r7
    1e84:	4662      	mov	r2, ip
    1e86:	1e9f      	subs	r7, r3, #2
    1e88:	3fff      	subs	r7, #255	; 0xff
    1e8a:	703a      	strb	r2, [r7, #0]
        for (u16_t dataByte = 0; (dataByte + location) < 0xFF; ++dataByte) {
            my_altimeter->myFlashMemory.pageBuffer[(dataByte + location)] = data[dataByte];
            bytesWritten++;
        }
        my_altimeter->myFlashMemory.pageLocation = 0x00;
        for(u16_t i = 0; i <= 0xFF; ++i) {
    1e8c:	9a01      	ldr	r2, [sp, #4]
            my_altimeter->myFlashMemory.pageToWrite[i] = my_altimeter->myFlashMemory.pageBuffer[i];
            my_altimeter->myFlashMemory.pageBuffer[i] = 0;
    1e8e:	701d      	strb	r5, [r3, #0]
    1e90:	3301      	adds	r3, #1
        for (u16_t dataByte = 0; (dataByte + location) < 0xFF; ++dataByte) {
            my_altimeter->myFlashMemory.pageBuffer[(dataByte + location)] = data[dataByte];
            bytesWritten++;
        }
        my_altimeter->myFlashMemory.pageLocation = 0x00;
        for(u16_t i = 0; i <= 0xFF; ++i) {
    1e92:	4293      	cmp	r3, r2
    1e94:	d1f4      	bne.n	1e80 <makePage+0x48>
            my_altimeter->myFlashMemory.pageBuffer[i] = 0;
        }
        for (u8_t dataByte = 0; bytesWritten < bytesToWrite; ++dataByte) {
            my_altimeter->myFlashMemory.pageBuffer[dataByte] = data[bytesWritten];
            bytesWritten++;
            my_altimeter->myFlashMemory.pageLocation = dataByte + 1;
    1e96:	2581      	movs	r5, #129	; 0x81
    1e98:	0033      	movs	r3, r6
    1e9a:	00ad      	lsls	r5, r5, #2
        my_altimeter->myFlashMemory.pageLocation = 0x00;
        for(u16_t i = 0; i <= 0xFF; ++i) {
            my_altimeter->myFlashMemory.pageToWrite[i] = my_altimeter->myFlashMemory.pageBuffer[i];
            my_altimeter->myFlashMemory.pageBuffer[i] = 0;
        }
        for (u8_t dataByte = 0; bytesWritten < bytesToWrite; ++dataByte) {
    1e9c:	428b      	cmp	r3, r1
    1e9e:	d208      	bcs.n	1eb2 <makePage+0x7a>
            my_altimeter->myFlashMemory.pageBuffer[dataByte] = data[bytesWritten];
    1ea0:	9a00      	ldr	r2, [sp, #0]
    1ea2:	5cd7      	ldrb	r7, [r2, r3]
            bytesWritten++;
    1ea4:	3301      	adds	r3, #1
    1ea6:	b2db      	uxtb	r3, r3
        for(u16_t i = 0; i <= 0xFF; ++i) {
            my_altimeter->myFlashMemory.pageToWrite[i] = my_altimeter->myFlashMemory.pageBuffer[i];
            my_altimeter->myFlashMemory.pageBuffer[i] = 0;
        }
        for (u8_t dataByte = 0; bytesWritten < bytesToWrite; ++dataByte) {
            my_altimeter->myFlashMemory.pageBuffer[dataByte] = data[bytesWritten];
    1ea8:	7027      	strb	r7, [r4, #0]
            bytesWritten++;
            my_altimeter->myFlashMemory.pageLocation = dataByte + 1;
    1eaa:	1b9f      	subs	r7, r3, r6
    1eac:	5547      	strb	r7, [r0, r5]
    1eae:	3401      	adds	r4, #1
    1eb0:	e7f4      	b.n	1e9c <makePage+0x64>
        }

        my_altimeter->myFlashMemory.pageReady = true;
    1eb2:	2201      	movs	r2, #1
    1eb4:	4b0a      	ldr	r3, [pc, #40]	; (1ee0 <makePage+0xa8>)
    1eb6:	54c2      	strb	r2, [r0, r3]
    1eb8:	e00f      	b.n	1eda <makePage+0xa2>
    1eba:	1c5c      	adds	r4, r3, #1
    1ebc:	b2a4      	uxth	r4, r4

    } else {
        for (u16_t dataByte = 0; dataByte <= bytesToWrite; ++dataByte) {
    1ebe:	428b      	cmp	r3, r1
    1ec0:	d80b      	bhi.n	1eda <makePage+0xa2>
            my_altimeter->myFlashMemory.pageBuffer[(dataByte + location)] = data[dataByte];
    1ec2:	9a00      	ldr	r2, [sp, #0]
    1ec4:	5cd2      	ldrb	r2, [r2, r3]
    1ec6:	18fb      	adds	r3, r7, r3
    1ec8:	4694      	mov	ip, r2
    1eca:	4a04      	ldr	r2, [pc, #16]	; (1edc <makePage+0xa4>)
    1ecc:	189b      	adds	r3, r3, r2
    1ece:	4662      	mov	r2, ip
    1ed0:	701a      	strb	r2, [r3, #0]
            bytesWritten++;
            my_altimeter->myFlashMemory.pageLocation = location + dataByte + 1;
    1ed2:	192b      	adds	r3, r5, r4
    1ed4:	5583      	strb	r3, [r0, r6]
    1ed6:	0023      	movs	r3, r4
    1ed8:	e7ef      	b.n	1eba <makePage+0x82>
        }

    }
}
    1eda:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    1edc:	00000205 	.word	0x00000205
    1ee0:	00000305 	.word	0x00000305

00001ee4 <logFlight>:


void logFlight(Altimeter *my_altimeter) {
    1ee4:	b51f      	push	{r0, r1, r2, r3, r4, lr}

    u8_t bytesToSend = 16;
    u8_t dataToSend[16];

    dataToSend[0] = FLIGHT_LOG;
    1ee6:	2346      	movs	r3, #70	; 0x46
    1ee8:	466a      	mov	r2, sp
    1eea:	7013      	strb	r3, [r2, #0]
    dataToSend[1] = my_altimeter->flightNumb;
    1eec:	7843      	ldrb	r3, [r0, #1]

    dataToSend[2] = my_altimeter->myIMU.offsetBufferTime >> 0;
    dataToSend[3] = my_altimeter->myIMU.offsetBufferTime >> 8;
    1eee:	4669      	mov	r1, sp

    u8_t bytesToSend = 16;
    u8_t dataToSend[16];

    dataToSend[0] = FLIGHT_LOG;
    dataToSend[1] = my_altimeter->flightNumb;
    1ef0:	7053      	strb	r3, [r2, #1]

    dataToSend[2] = my_altimeter->myIMU.offsetBufferTime >> 0;
    1ef2:	0003      	movs	r3, r0
    1ef4:	33b0      	adds	r3, #176	; 0xb0
    1ef6:	681b      	ldr	r3, [r3, #0]
    1ef8:	7093      	strb	r3, [r2, #2]
    dataToSend[3] = my_altimeter->myIMU.offsetBufferTime >> 8;
    1efa:	0a1a      	lsrs	r2, r3, #8
    1efc:	70ca      	strb	r2, [r1, #3]
    dataToSend[4] = my_altimeter->myIMU.offsetBufferTime >> 16;
    1efe:	0c1a      	lsrs	r2, r3, #16
    dataToSend[5] = my_altimeter->myIMU.offsetBufferTime >> 24;
    1f00:	0e1b      	lsrs	r3, r3, #24
    1f02:	714b      	strb	r3, [r1, #5]

    dataToSend[6] = my_altimeter->myBarometer.groundOffset >> 0;
    1f04:	6b83      	ldr	r3, [r0, #56]	; 0x38
    dataToSend[0] = FLIGHT_LOG;
    dataToSend[1] = my_altimeter->flightNumb;

    dataToSend[2] = my_altimeter->myIMU.offsetBufferTime >> 0;
    dataToSend[3] = my_altimeter->myIMU.offsetBufferTime >> 8;
    dataToSend[4] = my_altimeter->myIMU.offsetBufferTime >> 16;
    1f06:	710a      	strb	r2, [r1, #4]
    dataToSend[5] = my_altimeter->myIMU.offsetBufferTime >> 24;

    dataToSend[6] = my_altimeter->myBarometer.groundOffset >> 0;
    dataToSend[7] = my_altimeter->myBarometer.groundOffset >> 8;
    1f08:	0a1a      	lsrs	r2, r3, #8
    dataToSend[2] = my_altimeter->myIMU.offsetBufferTime >> 0;
    dataToSend[3] = my_altimeter->myIMU.offsetBufferTime >> 8;
    dataToSend[4] = my_altimeter->myIMU.offsetBufferTime >> 16;
    dataToSend[5] = my_altimeter->myIMU.offsetBufferTime >> 24;

    dataToSend[6] = my_altimeter->myBarometer.groundOffset >> 0;
    1f0a:	718b      	strb	r3, [r1, #6]
    dataToSend[7] = my_altimeter->myBarometer.groundOffset >> 8;
    1f0c:	71ca      	strb	r2, [r1, #7]
    dataToSend[8] = my_altimeter->myBarometer.groundOffset >> 16;
    1f0e:	0c1a      	lsrs	r2, r3, #16
    dataToSend[9] = my_altimeter->myBarometer.groundOffset >> 24;
    1f10:	0e1b      	lsrs	r3, r3, #24
    1f12:	724b      	strb	r3, [r1, #9]

    dataToSend[10] = my_altimeter->myBarometer.groundTemperature >> 0;
    1f14:	6c03      	ldr	r3, [r0, #64]	; 0x40
    dataToSend[4] = my_altimeter->myIMU.offsetBufferTime >> 16;
    dataToSend[5] = my_altimeter->myIMU.offsetBufferTime >> 24;

    dataToSend[6] = my_altimeter->myBarometer.groundOffset >> 0;
    dataToSend[7] = my_altimeter->myBarometer.groundOffset >> 8;
    dataToSend[8] = my_altimeter->myBarometer.groundOffset >> 16;
    1f16:	720a      	strb	r2, [r1, #8]
    dataToSend[9] = my_altimeter->myBarometer.groundOffset >> 24;

    dataToSend[10] = my_altimeter->myBarometer.groundTemperature >> 0;
    dataToSend[11] = my_altimeter->myBarometer.groundTemperature >> 8;
    1f18:	0a1a      	lsrs	r2, r3, #8
    dataToSend[6] = my_altimeter->myBarometer.groundOffset >> 0;
    dataToSend[7] = my_altimeter->myBarometer.groundOffset >> 8;
    dataToSend[8] = my_altimeter->myBarometer.groundOffset >> 16;
    dataToSend[9] = my_altimeter->myBarometer.groundOffset >> 24;

    dataToSend[10] = my_altimeter->myBarometer.groundTemperature >> 0;
    1f1a:	728b      	strb	r3, [r1, #10]
    dataToSend[11] = my_altimeter->myBarometer.groundTemperature >> 8;
    1f1c:	72ca      	strb	r2, [r1, #11]
    dataToSend[12] = my_altimeter->myBarometer.groundTemperature >> 16;
    1f1e:	0c1a      	lsrs	r2, r3, #16
    dataToSend[13] = my_altimeter->myBarometer.groundTemperature >> 24;
    1f20:	0e1b      	lsrs	r3, r3, #24
    1f22:	734b      	strb	r3, [r1, #13]

    dataToSend[14] = my_altimeter->myIMU.gravityOffsetRaw >> 0;
    1f24:	0003      	movs	r3, r0
    dataToSend[8] = my_altimeter->myBarometer.groundOffset >> 16;
    dataToSend[9] = my_altimeter->myBarometer.groundOffset >> 24;

    dataToSend[10] = my_altimeter->myBarometer.groundTemperature >> 0;
    dataToSend[11] = my_altimeter->myBarometer.groundTemperature >> 8;
    dataToSend[12] = my_altimeter->myBarometer.groundTemperature >> 16;
    1f26:	730a      	strb	r2, [r1, #12]
    dataToSend[13] = my_altimeter->myBarometer.groundTemperature >> 24;

    dataToSend[14] = my_altimeter->myIMU.gravityOffsetRaw >> 0;
    1f28:	33be      	adds	r3, #190	; 0xbe
    1f2a:	881b      	ldrh	r3, [r3, #0]
    dataToSend[9] = my_altimeter->myBarometer.groundOffset >> 24;

    dataToSend[10] = my_altimeter->myBarometer.groundTemperature >> 0;
    dataToSend[11] = my_altimeter->myBarometer.groundTemperature >> 8;
    dataToSend[12] = my_altimeter->myBarometer.groundTemperature >> 16;
    dataToSend[13] = my_altimeter->myBarometer.groundTemperature >> 24;
    1f2c:	466a      	mov	r2, sp

    dataToSend[14] = my_altimeter->myIMU.gravityOffsetRaw >> 0;
    1f2e:	738b      	strb	r3, [r1, #14]
    dataToSend[15] = my_altimeter->myIMU.gravityOffsetRaw >> 8;
    1f30:	0a1b      	lsrs	r3, r3, #8
    1f32:	73cb      	strb	r3, [r1, #15]

    makePage(my_altimeter, bytesToSend, dataToSend);
    1f34:	2110      	movs	r1, #16
    1f36:	4b02      	ldr	r3, [pc, #8]	; (1f40 <logFlight+0x5c>)
    1f38:	4798      	blx	r3
}
    1f3a:	b005      	add	sp, #20
    1f3c:	bd00      	pop	{pc}
    1f3e:	46c0      	nop			; (mov r8, r8)
    1f40:	00001e39 	.word	0x00001e39

00001f44 <logSensors>:

void logSensors(Altimeter *my_altimeter) {
    1f44:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

    u8_t bytesToSend = 23;
    u8_t dataToSend[23];

    dataToSend[0] = SENSOR_LOG;
    1f46:	2341      	movs	r3, #65	; 0x41
    1f48:	466a      	mov	r2, sp
    1f4a:	7013      	strb	r3, [r2, #0]
    dataToSend[1] = my_altimeter->sampleTick >> 0;
    1f4c:	23c6      	movs	r3, #198	; 0xc6
    dataToSend[2] = my_altimeter->sampleTick >> 8;
    1f4e:	4669      	mov	r1, sp

    u8_t bytesToSend = 23;
    u8_t dataToSend[23];

    dataToSend[0] = SENSOR_LOG;
    dataToSend[1] = my_altimeter->sampleTick >> 0;
    1f50:	009b      	lsls	r3, r3, #2
    1f52:	58c3      	ldr	r3, [r0, r3]
    1f54:	7053      	strb	r3, [r2, #1]
    dataToSend[2] = my_altimeter->sampleTick >> 8;
    1f56:	0a1a      	lsrs	r2, r3, #8
    1f58:	708a      	strb	r2, [r1, #2]
    dataToSend[3] = my_altimeter->sampleTick >> 16;
    1f5a:	0c1a      	lsrs	r2, r3, #16
    dataToSend[4] = my_altimeter->sampleTick >> 24;
    1f5c:	0e1b      	lsrs	r3, r3, #24
    1f5e:	710b      	strb	r3, [r1, #4]
    //dataToSend[5] = my_altimeter->myBarometer.heightFeet >> 0;
    //dataToSend[6] = my_altimeter->myBarometer.heightFeet >> 8;
    //dataToSend[7] = my_altimeter->myBarometer.heightFeet >> 16;
    //dataToSend[8] = my_altimeter->myBarometer.heightFeet >> 24;

    dataToSend[5] = my_altimeter->myKalmanFilter.kalmanAltitude >> 0;
    1f60:	0003      	movs	r3, r0
    1f62:	33ac      	adds	r3, #172	; 0xac
    1f64:	681b      	ldr	r3, [r3, #0]
    u8_t dataToSend[23];

    dataToSend[0] = SENSOR_LOG;
    dataToSend[1] = my_altimeter->sampleTick >> 0;
    dataToSend[2] = my_altimeter->sampleTick >> 8;
    dataToSend[3] = my_altimeter->sampleTick >> 16;
    1f66:	70ca      	strb	r2, [r1, #3]
    //dataToSend[6] = my_altimeter->myBarometer.heightFeet >> 8;
    //dataToSend[7] = my_altimeter->myBarometer.heightFeet >> 16;
    //dataToSend[8] = my_altimeter->myBarometer.heightFeet >> 24;

    dataToSend[5] = my_altimeter->myKalmanFilter.kalmanAltitude >> 0;
    dataToSend[6] = my_altimeter->myKalmanFilter.kalmanAltitude >> 8;
    1f68:	0a1a      	lsrs	r2, r3, #8
    //dataToSend[5] = my_altimeter->myBarometer.heightFeet >> 0;
    //dataToSend[6] = my_altimeter->myBarometer.heightFeet >> 8;
    //dataToSend[7] = my_altimeter->myBarometer.heightFeet >> 16;
    //dataToSend[8] = my_altimeter->myBarometer.heightFeet >> 24;

    dataToSend[5] = my_altimeter->myKalmanFilter.kalmanAltitude >> 0;
    1f6a:	714b      	strb	r3, [r1, #5]
    dataToSend[6] = my_altimeter->myKalmanFilter.kalmanAltitude >> 8;
    1f6c:	718a      	strb	r2, [r1, #6]
    dataToSend[7] = my_altimeter->myKalmanFilter.kalmanAltitude >> 16;
    1f6e:	0c1a      	lsrs	r2, r3, #16
    dataToSend[8] = my_altimeter->myKalmanFilter.kalmanAltitude >> 24;
    1f70:	0e1b      	lsrs	r3, r3, #24
    1f72:	720b      	strb	r3, [r1, #8]

    dataToSend[9] = my_altimeter->myIMU.accelXRaw >> 0;
    1f74:	0003      	movs	r3, r0
    //dataToSend[7] = my_altimeter->myBarometer.heightFeet >> 16;
    //dataToSend[8] = my_altimeter->myBarometer.heightFeet >> 24;

    dataToSend[5] = my_altimeter->myKalmanFilter.kalmanAltitude >> 0;
    dataToSend[6] = my_altimeter->myKalmanFilter.kalmanAltitude >> 8;
    dataToSend[7] = my_altimeter->myKalmanFilter.kalmanAltitude >> 16;
    1f76:	71ca      	strb	r2, [r1, #7]
    dataToSend[8] = my_altimeter->myKalmanFilter.kalmanAltitude >> 24;

    dataToSend[9] = my_altimeter->myIMU.accelXRaw >> 0;
    1f78:	33dc      	adds	r3, #220	; 0xdc
    1f7a:	881b      	ldrh	r3, [r3, #0]
    1f7c:	724b      	strb	r3, [r1, #9]
    dataToSend[10] = my_altimeter->myIMU.accelXRaw >> 8;
    1f7e:	0a1b      	lsrs	r3, r3, #8
    1f80:	728b      	strb	r3, [r1, #10]
    dataToSend[11] = my_altimeter->myIMU.accelYRaw >> 0;
    1f82:	0003      	movs	r3, r0
    1f84:	33e0      	adds	r3, #224	; 0xe0
    1f86:	881b      	ldrh	r3, [r3, #0]
    1f88:	72cb      	strb	r3, [r1, #11]
    dataToSend[12] = my_altimeter->myIMU.accelYRaw >> 8;
    1f8a:	0a1b      	lsrs	r3, r3, #8
    1f8c:	730b      	strb	r3, [r1, #12]
    //dataToSend[13] = my_altimeter->myIMU.accelZRaw >> 0;
    //dataToSend[14] = my_altimeter->myIMU.accelZRaw >> 8;
    dataToSend[13] = my_altimeter->myKalmanFilter.kalmanAccel >> 0;
    1f8e:	0003      	movs	r3, r0
    1f90:	33a8      	adds	r3, #168	; 0xa8
    1f92:	2200      	movs	r2, #0
    1f94:	5e9b      	ldrsh	r3, [r3, r2]
    1f96:	466a      	mov	r2, sp
    1f98:	734b      	strb	r3, [r1, #13]
    dataToSend[14] = my_altimeter->myKalmanFilter.kalmanAccel >> 8;
    1f9a:	121b      	asrs	r3, r3, #8
    1f9c:	738b      	strb	r3, [r1, #14]

    dataToSend[15] = my_altimeter->myIMU.gyroXRaw >> 0;
    1f9e:	0003      	movs	r3, r0
    1fa0:	33e8      	adds	r3, #232	; 0xe8
    1fa2:	881b      	ldrh	r3, [r3, #0]
    1fa4:	73cb      	strb	r3, [r1, #15]
    dataToSend[16] = my_altimeter->myIMU.gyroXRaw >> 8;
    1fa6:	0a1b      	lsrs	r3, r3, #8
    1fa8:	740b      	strb	r3, [r1, #16]
    dataToSend[17] = my_altimeter->myIMU.gyroYRaw >> 0;
    1faa:	0003      	movs	r3, r0
    1fac:	33ec      	adds	r3, #236	; 0xec
    1fae:	881b      	ldrh	r3, [r3, #0]
    1fb0:	744b      	strb	r3, [r1, #17]
    dataToSend[18] = my_altimeter->myIMU.gyroYRaw >> 8;
    1fb2:	0a1b      	lsrs	r3, r3, #8
    1fb4:	748b      	strb	r3, [r1, #18]
    dataToSend[19] = my_altimeter->myIMU.gyroZRaw >> 0;
    1fb6:	0003      	movs	r3, r0
    1fb8:	33f0      	adds	r3, #240	; 0xf0
    1fba:	881b      	ldrh	r3, [r3, #0]
    1fbc:	74cb      	strb	r3, [r1, #19]
    dataToSend[20] = my_altimeter->myIMU.gyroZRaw >> 8;
    1fbe:	0a1b      	lsrs	r3, r3, #8
    1fc0:	750b      	strb	r3, [r1, #20]

    dataToSend[21] = my_altimeter->myAnalogAccelerometer.analogRaw >> 0;
    1fc2:	0003      	movs	r3, r0
    1fc4:	33f4      	adds	r3, #244	; 0xf4
    1fc6:	881b      	ldrh	r3, [r3, #0]
    1fc8:	754b      	strb	r3, [r1, #21]
    dataToSend[22] = my_altimeter->myAnalogAccelerometer.analogRaw >> 8;
    1fca:	0a1b      	lsrs	r3, r3, #8
    1fcc:	758b      	strb	r3, [r1, #22]

    makePage(my_altimeter, bytesToSend, dataToSend);
    1fce:	2117      	movs	r1, #23
    1fd0:	4b01      	ldr	r3, [pc, #4]	; (1fd8 <logSensors+0x94>)
    1fd2:	4798      	blx	r3
}
    1fd4:	b007      	add	sp, #28
    1fd6:	bd00      	pop	{pc}
    1fd8:	00001e39 	.word	0x00001e39

00001fdc <getFlightStartAddress>:



u32_t getFlightStartAddress(u8_t flightToFind) {
    1fdc:	b513      	push	{r0, r1, r4, lr}

    u8_t addressToCheck[3];

    u16_t flightAddressLoc = FLIGHTZEROSTART + (flightToFind * 0x03);

    AT25SEreadSample(flightAddressLoc, 0x03, addressToCheck);
    1fde:	2103      	movs	r1, #3
    1fe0:	4348      	muls	r0, r1
    1fe2:	ac01      	add	r4, sp, #4
    1fe4:	3001      	adds	r0, #1
    1fe6:	30ff      	adds	r0, #255	; 0xff
    1fe8:	0022      	movs	r2, r4
    1fea:	4b05      	ldr	r3, [pc, #20]	; (2000 <STACK_SIZE>)
    1fec:	4798      	blx	r3

    u32_t flightStartAddress = addressToCheck[0] << 0 | addressToCheck[1] << 8 | addressToCheck[2] << 16;
    1fee:	7860      	ldrb	r0, [r4, #1]
    1ff0:	78a3      	ldrb	r3, [r4, #2]
    1ff2:	0200      	lsls	r0, r0, #8
    1ff4:	041b      	lsls	r3, r3, #16
    1ff6:	4318      	orrs	r0, r3
    1ff8:	7823      	ldrb	r3, [r4, #0]
    1ffa:	4318      	orrs	r0, r3

    return flightStartAddress;
}
    1ffc:	bd16      	pop	{r1, r2, r4, pc}
    1ffe:	46c0      	nop			; (mov r8, r8)
    2000:	00000361 	.word	0x00000361

00002004 <isFlightLogged>:

bool isFlightLogged(u8_t flightNumbToCheck) {
    2004:	b510      	push	{r4, lr}

    u32_t possibleStart = getFlightStartAddress(flightNumbToCheck);
    2006:	4b04      	ldr	r3, [pc, #16]	; (2018 <isFlightLogged+0x14>)
    2008:	4798      	blx	r3
    200a:	4b04      	ldr	r3, [pc, #16]	; (201c <isFlightLogged+0x18>)
    if (possibleStart == 0xFFFFFF) {
        return false;
    } else {
        return true;
    }
}
    200c:	18c0      	adds	r0, r0, r3
    200e:	1e43      	subs	r3, r0, #1
    2010:	4198      	sbcs	r0, r3
    2012:	b2c0      	uxtb	r0, r0
    2014:	bd10      	pop	{r4, pc}
    2016:	46c0      	nop			; (mov r8, r8)
    2018:	00001fdd 	.word	0x00001fdd
    201c:	ff000001 	.word	0xff000001

00002020 <findNextBlankPage>:


u32_t findNextBlankPage(u8_t lastFlightStart) {
    2020:	b510      	push	{r4, lr}

    u32_t byteToCheckAddress = getFlightStartAddress(lastFlightStart);
    2022:	4b09      	ldr	r3, [pc, #36]	; (2048 <findNextBlankPage+0x28>)
    2024:	4798      	blx	r3
    2026:	0004      	movs	r4, r0

    bool flightEndFound = false;
    while (!flightEndFound) {

        u8_t byteToCheck = AT25SFGetByte(byteToCheckAddress);
    2028:	0020      	movs	r0, r4
    202a:	4b08      	ldr	r3, [pc, #32]	; (204c <findNextBlankPage+0x2c>)
    202c:	4798      	blx	r3

        if (byteToCheck == 0x41) {
    202e:	2841      	cmp	r0, #65	; 0x41
    2030:	d101      	bne.n	2036 <findNextBlankPage+0x16>
            byteToCheckAddress += 24;
    2032:	3418      	adds	r4, #24
    2034:	e7f8      	b.n	2028 <findNextBlankPage+0x8>
        } else if (byteToCheck == 0x46) {
    2036:	2846      	cmp	r0, #70	; 0x46
    2038:	d101      	bne.n	203e <findNextBlankPage+0x1e>
            byteToCheckAddress += 17;
    203a:	3411      	adds	r4, #17
    203c:	e7f4      	b.n	2028 <findNextBlankPage+0x8>
        } else if (byteToCheck == 0xFF) {
    203e:	28ff      	cmp	r0, #255	; 0xff
    2040:	d1f2      	bne.n	2028 <findNextBlankPage+0x8>
            return ((byteToCheckAddress >> 8) << 8);
    2042:	4384      	bics	r4, r0
    2044:	0020      	movs	r0, r4
        }
    }
}
    2046:	bd10      	pop	{r4, pc}
    2048:	00001fdd 	.word	0x00001fdd
    204c:	00000225 	.word	0x00000225

00002050 <FindFlightEndingAddress>:

u32_t FindFlightEndingAddress(u8_t findThisFlightsEnd) {
    2050:	b570      	push	{r4, r5, r6, lr}

    u8_t nextFlight = findThisFlightsEnd + 1;
    2052:	1c44      	adds	r4, r0, #1
    2054:	b2e4      	uxtb	r4, r4
            return ((byteToCheckAddress >> 8) << 8);
        }
    }
}

u32_t FindFlightEndingAddress(u8_t findThisFlightsEnd) {
    2056:	0005      	movs	r5, r0

    u8_t nextFlight = findThisFlightsEnd + 1;
    u32_t thisFlightsEndingAddress;

    if (isFlightLogged(nextFlight)) {
    2058:	4b06      	ldr	r3, [pc, #24]	; (2074 <FindFlightEndingAddress+0x24>)
    205a:	0020      	movs	r0, r4
    205c:	4798      	blx	r3
    205e:	2800      	cmp	r0, #0
    2060:	d002      	beq.n	2068 <FindFlightEndingAddress+0x18>
        thisFlightsEndingAddress = getFlightStartAddress(nextFlight) - 0x100;
    2062:	0020      	movs	r0, r4
    2064:	4b04      	ldr	r3, [pc, #16]	; (2078 <FindFlightEndingAddress+0x28>)
    2066:	e001      	b.n	206c <FindFlightEndingAddress+0x1c>
    } else {
        thisFlightsEndingAddress = findNextBlankPage(findThisFlightsEnd) - 0x100;
    2068:	0028      	movs	r0, r5
    206a:	4b04      	ldr	r3, [pc, #16]	; (207c <FindFlightEndingAddress+0x2c>)
    206c:	4798      	blx	r3
    206e:	3801      	subs	r0, #1
    2070:	38ff      	subs	r0, #255	; 0xff
    }
    return thisFlightsEndingAddress;
}
    2072:	bd70      	pop	{r4, r5, r6, pc}
    2074:	00002005 	.word	0x00002005
    2078:	00001fdd 	.word	0x00001fdd
    207c:	00002021 	.word	0x00002021

00002080 <findNewFlightStart>:


void findNewFlightStart(Altimeter *my_altimeter) {
    2080:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2082:	0006      	movs	r6, r0

    for (u8_t flightNumbToCheck = 0; flightNumbToCheck < 11; ++flightNumbToCheck) {
    2084:	2400      	movs	r4, #0

        if (!isFlightLogged(flightNumbToCheck)) {
    2086:	0020      	movs	r0, r4
    2088:	4b21      	ldr	r3, [pc, #132]	; (2110 <findNewFlightStart+0x90>)
    208a:	4798      	blx	r3
    208c:	2800      	cmp	r0, #0
    208e:	d139      	bne.n	2104 <findNewFlightStart+0x84>
    2090:	0037      	movs	r7, r6
    2092:	ad01      	add	r5, sp, #4
    2094:	37fc      	adds	r7, #252	; 0xfc

            if (flightNumbToCheck > 0) {
    2096:	2c00      	cmp	r4, #0
    2098:	d014      	beq.n	20c4 <findNewFlightStart+0x44>
                u32_t startAddress = findNextBlankPage(flightNumbToCheck - 1) + 0x100;
    209a:	1e60      	subs	r0, r4, #1
    209c:	4b1d      	ldr	r3, [pc, #116]	; (2114 <findNewFlightStart+0x94>)
    209e:	b2c0      	uxtb	r0, r0
    20a0:	4798      	blx	r3
                my_altimeter->myFlashMemory.currentAddress = startAddress;

                u8_t address[3] = {startAddress >> 16, startAddress >> 8, startAddress >> 0};

                u16_t flightAddressLoc = FLIGHTZEROSTART + (flightNumbToCheck * 0x03);
                AT25SFWriteBytes(flightAddressLoc, 3, address);
    20a2:	2103      	movs	r1, #3
    for (u8_t flightNumbToCheck = 0; flightNumbToCheck < 11; ++flightNumbToCheck) {

        if (!isFlightLogged(flightNumbToCheck)) {

            if (flightNumbToCheck > 0) {
                u32_t startAddress = findNextBlankPage(flightNumbToCheck - 1) + 0x100;
    20a4:	3001      	adds	r0, #1
    20a6:	30ff      	adds	r0, #255	; 0xff
                my_altimeter->myFlashMemory.currentAddress = startAddress;

                u8_t address[3] = {startAddress >> 16, startAddress >> 8, startAddress >> 0};
    20a8:	0c03      	lsrs	r3, r0, #16

        if (!isFlightLogged(flightNumbToCheck)) {

            if (flightNumbToCheck > 0) {
                u32_t startAddress = findNextBlankPage(flightNumbToCheck - 1) + 0x100;
                my_altimeter->myFlashMemory.currentAddress = startAddress;
    20aa:	6038      	str	r0, [r7, #0]

                u8_t address[3] = {startAddress >> 16, startAddress >> 8, startAddress >> 0};
    20ac:	702b      	strb	r3, [r5, #0]
    20ae:	70a8      	strb	r0, [r5, #2]
    20b0:	0a03      	lsrs	r3, r0, #8

                u16_t flightAddressLoc = FLIGHTZEROSTART + (flightNumbToCheck * 0x03);
                AT25SFWriteBytes(flightAddressLoc, 3, address);
    20b2:	0008      	movs	r0, r1
    20b4:	4360      	muls	r0, r4
    20b6:	3001      	adds	r0, #1

            if (flightNumbToCheck > 0) {
                u32_t startAddress = findNextBlankPage(flightNumbToCheck - 1) + 0x100;
                my_altimeter->myFlashMemory.currentAddress = startAddress;

                u8_t address[3] = {startAddress >> 16, startAddress >> 8, startAddress >> 0};
    20b8:	706b      	strb	r3, [r5, #1]

                u16_t flightAddressLoc = FLIGHTZEROSTART + (flightNumbToCheck * 0x03);
                AT25SFWriteBytes(flightAddressLoc, 3, address);
    20ba:	30ff      	adds	r0, #255	; 0xff
    20bc:	002a      	movs	r2, r5
    20be:	4b16      	ldr	r3, [pc, #88]	; (2118 <findNewFlightStart+0x98>)
    20c0:	4798      	blx	r3
    20c2:	e00f      	b.n	20e4 <findNewFlightStart+0x64>

                // for flight 0, starting address is always 0x00100 (beginning of second 4k block)
            } else {
                u8_t address[3] = {0x00,0x10,0x00};
    20c4:	2310      	movs	r3, #16
                AT25SFWriteBytes(FLIGHTZEROSTART, 3, address);
    20c6:	2080      	movs	r0, #128	; 0x80
                u16_t flightAddressLoc = FLIGHTZEROSTART + (flightNumbToCheck * 0x03);
                AT25SFWriteBytes(flightAddressLoc, 3, address);

                // for flight 0, starting address is always 0x00100 (beginning of second 4k block)
            } else {
                u8_t address[3] = {0x00,0x10,0x00};
    20c8:	706b      	strb	r3, [r5, #1]
                AT25SFWriteBytes(FLIGHTZEROSTART, 3, address);
    20ca:	0040      	lsls	r0, r0, #1
    20cc:	4b12      	ldr	r3, [pc, #72]	; (2118 <findNewFlightStart+0x98>)
    20ce:	002a      	movs	r2, r5
    20d0:	2103      	movs	r1, #3
                u16_t flightAddressLoc = FLIGHTZEROSTART + (flightNumbToCheck * 0x03);
                AT25SFWriteBytes(flightAddressLoc, 3, address);

                // for flight 0, starting address is always 0x00100 (beginning of second 4k block)
            } else {
                u8_t address[3] = {0x00,0x10,0x00};
    20d2:	702c      	strb	r4, [r5, #0]
    20d4:	70ac      	strb	r4, [r5, #2]
                AT25SFWriteBytes(FLIGHTZEROSTART, 3, address);
    20d6:	4798      	blx	r3
                my_altimeter->myFlashMemory.currentAddress = 0x001000;
    20d8:	2380      	movs	r3, #128	; 0x80
    20da:	015b      	lsls	r3, r3, #5
    20dc:	603b      	str	r3, [r7, #0]
                beep(1500);
    20de:	480f      	ldr	r0, [pc, #60]	; (211c <findNewFlightStart+0x9c>)
    20e0:	4b0f      	ldr	r3, [pc, #60]	; (2120 <findNewFlightStart+0xa0>)
    20e2:	4798      	blx	r3
            }
            my_altimeter->flightNumb = flightNumbToCheck;
    20e4:	7074      	strb	r4, [r6, #1]

            while (flightNumbToCheck > 0) {
                beep(500);
    20e6:	20fa      	movs	r0, #250	; 0xfa
    20e8:	4d0e      	ldr	r5, [pc, #56]	; (2124 <findNewFlightStart+0xa4>)
    20ea:	0040      	lsls	r0, r0, #1
                my_altimeter->myFlashMemory.currentAddress = 0x001000;
                beep(1500);
            }
            my_altimeter->flightNumb = flightNumbToCheck;

            while (flightNumbToCheck > 0) {
    20ec:	2c00      	cmp	r4, #0
    20ee:	d007      	beq.n	2100 <findNewFlightStart+0x80>
                beep(500);
    20f0:	4b0b      	ldr	r3, [pc, #44]	; (2120 <findNewFlightStart+0xa0>)
    20f2:	4798      	blx	r3
                delay_ms(500);
    20f4:	20fa      	movs	r0, #250	; 0xfa
                --flightNumbToCheck;
    20f6:	3c01      	subs	r4, #1
            }
            my_altimeter->flightNumb = flightNumbToCheck;

            while (flightNumbToCheck > 0) {
                beep(500);
                delay_ms(500);
    20f8:	0040      	lsls	r0, r0, #1
    20fa:	47a8      	blx	r5
                --flightNumbToCheck;
    20fc:	b2e4      	uxtb	r4, r4
    20fe:	e7f2      	b.n	20e6 <findNewFlightStart+0x66>
            }
            delay_ms(500);
    2100:	47a8      	blx	r5
            break;
    2102:	e003      	b.n	210c <findNewFlightStart+0x8c>
}


void findNewFlightStart(Altimeter *my_altimeter) {

    for (u8_t flightNumbToCheck = 0; flightNumbToCheck < 11; ++flightNumbToCheck) {
    2104:	3401      	adds	r4, #1
    2106:	b2e4      	uxtb	r4, r4
    2108:	2c0b      	cmp	r4, #11
    210a:	d1bc      	bne.n	2086 <findNewFlightStart+0x6>
            }
            delay_ms(500);
            break;
        }
    }
}
    210c:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    210e:	46c0      	nop			; (mov r8, r8)
    2110:	00002005 	.word	0x00002005
    2114:	00002021 	.word	0x00002021
    2118:	00000275 	.word	0x00000275
    211c:	000005dc 	.word	0x000005dc
    2120:	00000f79 	.word	0x00000f79
    2124:	00001191 	.word	0x00001191

00002128 <takeSample>:
#include <util.h>
#include <boardDefines.h>
#include <MS5803.h>

bool takeSample() {
    return SampleBool;
    2128:	4b01      	ldr	r3, [pc, #4]	; (2130 <takeSample+0x8>)
    212a:	7818      	ldrb	r0, [r3, #0]
}
    212c:	4770      	bx	lr
    212e:	46c0      	nop			; (mov r8, r8)
    2130:	20000483 	.word	0x20000483

00002134 <pullSample>:

void pullSample() {
    SampleBool = true;
    2134:	2201      	movs	r2, #1
    2136:	4b01      	ldr	r3, [pc, #4]	; (213c <pullSample+0x8>)
    2138:	701a      	strb	r2, [r3, #0]
}
    213a:	4770      	bx	lr
    213c:	20000483 	.word	0x20000483

00002140 <sampleTaken>:

void sampleTaken() {
    SampleBool = false;
    2140:	2200      	movs	r2, #0
    2142:	4b01      	ldr	r3, [pc, #4]	; (2148 <sampleTaken+0x8>)
    2144:	701a      	strb	r2, [r3, #0]
}
    2146:	4770      	bx	lr
    2148:	20000483 	.word	0x20000483

0000214c <sampleTick>:




void sampleTick(Altimeter *my_altimeter) {
    SampleBool = false;
    214c:	2200      	movs	r2, #0





void sampleTick(Altimeter *my_altimeter) {
    214e:	b5f0      	push	{r4, r5, r6, r7, lr}
    SampleBool = false;

	// take last samples time to discover Dt before setting new time
    my_altimeter->tickDelta = millis() - my_altimeter->sampleTick;
    2150:	25c6      	movs	r5, #198	; 0xc6





void sampleTick(Altimeter *my_altimeter) {
    2152:	0004      	movs	r4, r0
    SampleBool = false;
    2154:	4be3      	ldr	r3, [pc, #908]	; (24e4 <sampleTick+0x398>)





void sampleTick(Altimeter *my_altimeter) {
    2156:	b087      	sub	sp, #28
    SampleBool = false;

	// take last samples time to discover Dt before setting new time
    my_altimeter->tickDelta = millis() - my_altimeter->sampleTick;
    2158:	4ee3      	ldr	r6, [pc, #908]	; (24e8 <sampleTick+0x39c>)




void sampleTick(Altimeter *my_altimeter) {
    SampleBool = false;
    215a:	701a      	strb	r2, [r3, #0]

	// take last samples time to discover Dt before setting new time
    my_altimeter->tickDelta = millis() - my_altimeter->sampleTick;
    215c:	47b0      	blx	r6
    215e:	00ad      	lsls	r5, r5, #2
    2160:	5963      	ldr	r3, [r4, r5]
    2162:	1ac0      	subs	r0, r0, r3
    2164:	23c7      	movs	r3, #199	; 0xc7
    2166:	009b      	lsls	r3, r3, #2
    2168:	50e0      	str	r0, [r4, r3]
    my_altimeter->sampleTick = millis();
    216a:	47b0      	blx	r6
    216c:	5160      	str	r0, [r4, r5]

    my_altimeter->batV = adc_read(senseBatPin);
    216e:	4ddf      	ldr	r5, [pc, #892]	; (24ec <sampleTick+0x3a0>)
    2170:	4edf      	ldr	r6, [pc, #892]	; (24f0 <sampleTick+0x3a4>)
    2172:	786b      	ldrb	r3, [r5, #1]
    2174:	7829      	ldrb	r1, [r5, #0]
    2176:	78a8      	ldrb	r0, [r5, #2]
    2178:	021b      	lsls	r3, r3, #8
    217a:	430b      	orrs	r3, r1
    217c:	0400      	lsls	r0, r0, #16
    217e:	001a      	movs	r2, r3
    2180:	0003      	movs	r3, r0
    2182:	78e8      	ldrb	r0, [r5, #3]
    2184:	4313      	orrs	r3, r2
    2186:	0600      	lsls	r0, r0, #24
    2188:	7929      	ldrb	r1, [r5, #4]
    218a:	4318      	orrs	r0, r3
    218c:	47b0      	blx	r6
    218e:	23c2      	movs	r3, #194	; 0xc2
    2190:	009b      	lsls	r3, r3, #2
    2192:	52e0      	strh	r0, [r4, r3]
    my_altimeter->batV = my_altimeter->batV;
    my_altimeter->batFloat = my_altimeter->batV * 0.0019;
    2194:	4bd7      	ldr	r3, [pc, #860]	; (24f4 <sampleTick+0x3a8>)
    2196:	4798      	blx	r3
    2198:	4ad7      	ldr	r2, [pc, #860]	; (24f8 <sampleTick+0x3ac>)
    219a:	4fd8      	ldr	r7, [pc, #864]	; (24fc <sampleTick+0x3b0>)
    219c:	4bd8      	ldr	r3, [pc, #864]	; (2500 <sampleTick+0x3b4>)
    219e:	47b8      	blx	r7
    21a0:	4bd8      	ldr	r3, [pc, #864]	; (2504 <sampleTick+0x3b8>)
    21a2:	4798      	blx	r3
    21a4:	23c3      	movs	r3, #195	; 0xc3
    21a6:	009b      	lsls	r3, r3, #2
    21a8:	50e0      	str	r0, [r4, r3]

    my_altimeter->senseA = adc_read(senseAPin);
    21aa:	79ab      	ldrb	r3, [r5, #6]
    21ac:	7969      	ldrb	r1, [r5, #5]
    21ae:	79e8      	ldrb	r0, [r5, #7]
    21b0:	021b      	lsls	r3, r3, #8
    21b2:	430b      	orrs	r3, r1
    21b4:	0400      	lsls	r0, r0, #16
    21b6:	001a      	movs	r2, r3
    21b8:	0003      	movs	r3, r0
    21ba:	7a28      	ldrb	r0, [r5, #8]
    21bc:	4313      	orrs	r3, r2
    21be:	0600      	lsls	r0, r0, #24
    21c0:	7a69      	ldrb	r1, [r5, #9]
    21c2:	4318      	orrs	r0, r3
    21c4:	47b0      	blx	r6
    21c6:	23c4      	movs	r3, #196	; 0xc4
    21c8:	009b      	lsls	r3, r3, #2
    21ca:	52e0      	strh	r0, [r4, r3]
    my_altimeter->senseB = adc_read(senseBPin);
    21cc:	7aeb      	ldrb	r3, [r5, #11]
    21ce:	7aa9      	ldrb	r1, [r5, #10]
    21d0:	7b28      	ldrb	r0, [r5, #12]
    21d2:	021b      	lsls	r3, r3, #8
    21d4:	430b      	orrs	r3, r1
    21d6:	0400      	lsls	r0, r0, #16
    21d8:	001a      	movs	r2, r3
    21da:	0003      	movs	r3, r0
    21dc:	7b68      	ldrb	r0, [r5, #13]
    21de:	4313      	orrs	r3, r2
    21e0:	0600      	lsls	r0, r0, #24
    21e2:	7ba9      	ldrb	r1, [r5, #14]
    21e4:	4318      	orrs	r0, r3
    21e6:	47b0      	blx	r6
    21e8:	4bc7      	ldr	r3, [pc, #796]	; (2508 <sampleTick+0x3bc>)
    my_altimeter->senseC = adc_read(senseCPin);
    21ea:	7be9      	ldrb	r1, [r5, #15]
    my_altimeter->batV = adc_read(senseBatPin);
    my_altimeter->batV = my_altimeter->batV;
    my_altimeter->batFloat = my_altimeter->batV * 0.0019;

    my_altimeter->senseA = adc_read(senseAPin);
    my_altimeter->senseB = adc_read(senseBPin);
    21ec:	52e0      	strh	r0, [r4, r3]
    my_altimeter->senseC = adc_read(senseCPin);
    21ee:	7c2b      	ldrb	r3, [r5, #16]
    21f0:	7c68      	ldrb	r0, [r5, #17]
    21f2:	021b      	lsls	r3, r3, #8
    21f4:	430b      	orrs	r3, r1
    21f6:	0400      	lsls	r0, r0, #16
    21f8:	001a      	movs	r2, r3
    21fa:	0003      	movs	r3, r0
    21fc:	7ca8      	ldrb	r0, [r5, #18]
    21fe:	4313      	orrs	r3, r2
    2200:	0600      	lsls	r0, r0, #24
    2202:	7ce9      	ldrb	r1, [r5, #19]
    2204:	4318      	orrs	r0, r3
    2206:	47b0      	blx	r6
    2208:	23c5      	movs	r3, #197	; 0xc5
    220a:	009b      	lsls	r3, r3, #2
    220c:	52e0      	strh	r0, [r4, r3]
    my_altimeter->senseD = adc_read(senseDPin);
    220e:	7d6b      	ldrb	r3, [r5, #21]
    2210:	7d29      	ldrb	r1, [r5, #20]
    2212:	7da8      	ldrb	r0, [r5, #22]
    2214:	021b      	lsls	r3, r3, #8
    2216:	430b      	orrs	r3, r1
    2218:	0400      	lsls	r0, r0, #16
    221a:	001a      	movs	r2, r3
    221c:	0003      	movs	r3, r0
    221e:	7de8      	ldrb	r0, [r5, #23]
    2220:	4313      	orrs	r3, r2
    2222:	0600      	lsls	r0, r0, #24
    2224:	7e29      	ldrb	r1, [r5, #24]
    2226:	4318      	orrs	r0, r3
    2228:	47b0      	blx	r6
    222a:	4bb8      	ldr	r3, [pc, #736]	; (250c <sampleTick+0x3c0>)

    my_altimeter->myAnalogAccelerometer.analogRaw = adc_read(analogAccelPin);
    222c:	7e69      	ldrb	r1, [r5, #25]
    my_altimeter->batFloat = my_altimeter->batV * 0.0019;

    my_altimeter->senseA = adc_read(senseAPin);
    my_altimeter->senseB = adc_read(senseBPin);
    my_altimeter->senseC = adc_read(senseCPin);
    my_altimeter->senseD = adc_read(senseDPin);
    222e:	52e0      	strh	r0, [r4, r3]

    my_altimeter->myAnalogAccelerometer.analogRaw = adc_read(analogAccelPin);
    2230:	7eab      	ldrb	r3, [r5, #26]
    2232:	7ee8      	ldrb	r0, [r5, #27]
    2234:	021b      	lsls	r3, r3, #8
    2236:	430b      	orrs	r3, r1
    2238:	0400      	lsls	r0, r0, #16
    223a:	001a      	movs	r2, r3
    223c:	0003      	movs	r3, r0
    223e:	7f28      	ldrb	r0, [r5, #28]
    2240:	4313      	orrs	r3, r2
    2242:	0600      	lsls	r0, r0, #24
    2244:	7f69      	ldrb	r1, [r5, #29]
    2246:	4318      	orrs	r0, r3
    2248:	47b0      	blx	r6
    224a:	0023      	movs	r3, r4
    224c:	33f4      	adds	r3, #244	; 0xf4
    224e:	8018      	strh	r0, [r3, #0]
    my_altimeter->myAnalogAccelerometer.analogAccel = (my_altimeter->myAnalogAccelerometer.analogRaw - 3900) * -0.0154;
    2250:	4baf      	ldr	r3, [pc, #700]	; (2510 <sampleTick+0x3c4>)
    2252:	0026      	movs	r6, r4
    2254:	18c0      	adds	r0, r0, r3
    2256:	4ba7      	ldr	r3, [pc, #668]	; (24f4 <sampleTick+0x3a8>)
    2258:	4798      	blx	r3
    225a:	4aae      	ldr	r2, [pc, #696]	; (2514 <sampleTick+0x3c8>)
    225c:	4fa7      	ldr	r7, [pc, #668]	; (24fc <sampleTick+0x3b0>)
    225e:	4bae      	ldr	r3, [pc, #696]	; (2518 <sampleTick+0x3cc>)
    2260:	47b8      	blx	r7
    2262:	4ba8      	ldr	r3, [pc, #672]	; (2504 <sampleTick+0x3b8>)
    2264:	4798      	blx	r3

    my_altimeter->myIMU.perviousAccelX = my_altimeter->myIMU.accelX;
    2266:	0022      	movs	r2, r4
    2268:	0023      	movs	r3, r4
    226a:	32c0      	adds	r2, #192	; 0xc0
    226c:	9204      	str	r2, [sp, #16]
    226e:	6812      	ldr	r2, [r2, #0]
    my_altimeter->senseB = adc_read(senseBPin);
    my_altimeter->senseC = adc_read(senseCPin);
    my_altimeter->senseD = adc_read(senseDPin);

    my_altimeter->myAnalogAccelerometer.analogRaw = adc_read(analogAccelPin);
    my_altimeter->myAnalogAccelerometer.analogAccel = (my_altimeter->myAnalogAccelerometer.analogRaw - 3900) * -0.0154;
    2270:	36f8      	adds	r6, #248	; 0xf8

    my_altimeter->myIMU.perviousAccelX = my_altimeter->myIMU.accelX;
    2272:	33c4      	adds	r3, #196	; 0xc4
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    2274:	2780      	movs	r7, #128	; 0x80
    my_altimeter->senseB = adc_read(senseBPin);
    my_altimeter->senseC = adc_read(senseCPin);
    my_altimeter->senseD = adc_read(senseDPin);

    my_altimeter->myAnalogAccelerometer.analogRaw = adc_read(analogAccelPin);
    my_altimeter->myAnalogAccelerometer.analogAccel = (my_altimeter->myAnalogAccelerometer.analogRaw - 3900) * -0.0154;
    2276:	6030      	str	r0, [r6, #0]

    my_altimeter->myIMU.perviousAccelX = my_altimeter->myIMU.accelX;
    2278:	601a      	str	r2, [r3, #0]
    uint8_t dummy_Tx = 0xFF;
    uint8_t dummy_rx;

    pinLow(cs_baro);
    // dummy_rx = spiDataTransfer(SPI2, 0x50);
    byteOut(spi2SCK,spi2MOSI, 0x50);
    227a:	2250      	movs	r2, #80	; 0x50
    227c:	4ba7      	ldr	r3, [pc, #668]	; (251c <sampleTick+0x3d0>)
    227e:	023f      	lsls	r7, r7, #8
    2280:	615f      	str	r7, [r3, #20]
    2282:	002e      	movs	r6, r5
    2284:	9200      	str	r2, [sp, #0]
    2286:	7fea      	ldrb	r2, [r5, #31]
    2288:	7fa8      	ldrb	r0, [r5, #30]
    228a:	0212      	lsls	r2, r2, #8
    228c:	4302      	orrs	r2, r0
    228e:	0011      	movs	r1, r2
    2290:	002b      	movs	r3, r5
    2292:	361e      	adds	r6, #30
    2294:	78b2      	ldrb	r2, [r6, #2]
    2296:	3323      	adds	r3, #35	; 0x23
    2298:	0412      	lsls	r2, r2, #16
    229a:	430a      	orrs	r2, r1
    229c:	78f1      	ldrb	r1, [r6, #3]
    229e:	7818      	ldrb	r0, [r3, #0]
    22a0:	0609      	lsls	r1, r1, #24
    22a2:	4311      	orrs	r1, r2
    22a4:	7932      	ldrb	r2, [r6, #4]
    22a6:	789d      	ldrb	r5, [r3, #2]
    22a8:	9203      	str	r2, [sp, #12]
    22aa:	785a      	ldrb	r2, [r3, #1]
    22ac:	042d      	lsls	r5, r5, #16
    22ae:	0212      	lsls	r2, r2, #8
    22b0:	4302      	orrs	r2, r0
    22b2:	9102      	str	r1, [sp, #8]
    22b4:	0011      	movs	r1, r2
    22b6:	002a      	movs	r2, r5
    22b8:	78dd      	ldrb	r5, [r3, #3]
    22ba:	791b      	ldrb	r3, [r3, #4]
    22bc:	430a      	orrs	r2, r1
    22be:	062d      	lsls	r5, r5, #24
    22c0:	4315      	orrs	r5, r2
    22c2:	9305      	str	r3, [sp, #20]
    22c4:	9a02      	ldr	r2, [sp, #8]
    22c6:	9905      	ldr	r1, [sp, #20]
    22c8:	9b03      	ldr	r3, [sp, #12]
    22ca:	0028      	movs	r0, r5
    22cc:	4e94      	ldr	r6, [pc, #592]	; (2520 <sampleTick+0x3d4>)
    22ce:	47b0      	blx	r6
    pinHigh(cs_baro);
    delay_us(500);
    22d0:	20fa      	movs	r0, #250	; 0xfa
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    22d2:	4b92      	ldr	r3, [pc, #584]	; (251c <sampleTick+0x3d0>)
    22d4:	0040      	lsls	r0, r0, #1
    22d6:	619f      	str	r7, [r3, #24]
    22d8:	4b92      	ldr	r3, [pc, #584]	; (2524 <sampleTick+0x3d8>)
    22da:	4798      	blx	r3
    my_altimeter->myBarometer.rawTempatureData = readMS5803AdcResults();
    22dc:	4b92      	ldr	r3, [pc, #584]	; (2528 <sampleTick+0x3dc>)
    22de:	4798      	blx	r3
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    22e0:	4b8e      	ldr	r3, [pc, #568]	; (251c <sampleTick+0x3d0>)
    22e2:	61a0      	str	r0, [r4, #24]
    22e4:	615f      	str	r7, [r3, #20]

    pinLow(cs_baro);
    //  dummy_rx = spiDataTransfer(SPI2, 0x42);
    byteOut(spi2SCK,spi2MOSI, 0x46);
    22e6:	2346      	movs	r3, #70	; 0x46
    22e8:	9a02      	ldr	r2, [sp, #8]
    22ea:	9300      	str	r3, [sp, #0]
    22ec:	0028      	movs	r0, r5
    22ee:	9b03      	ldr	r3, [sp, #12]
    22f0:	9905      	ldr	r1, [sp, #20]
    22f2:	47b0      	blx	r6
    22f4:	2280      	movs	r2, #128	; 0x80
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    22f6:	4b89      	ldr	r3, [pc, #548]	; (251c <sampleTick+0x3d0>)
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    22f8:	00d2      	lsls	r2, r2, #3
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    22fa:	619f      	str	r7, [r3, #24]
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    22fc:	4b8b      	ldr	r3, [pc, #556]	; (252c <sampleTick+0x3e0>)



// Accel data
    pinLow(cs_accel);
    dummy_rx = spiDataTransfer(SPI0, BMI055_X_ACC_LSB | BMI055_READ_REG);
    22fe:	4e8c      	ldr	r6, [pc, #560]	; (2530 <sampleTick+0x3e4>)
    2300:	601a      	str	r2, [r3, #0]
    2302:	2182      	movs	r1, #130	; 0x82
    2304:	2000      	movs	r0, #0
    2306:	47b0      	blx	r6

    my_altimeter->myIMU.accelXRaw = spiDataTransfer(SPI0,dummy_Tx);
    2308:	21ff      	movs	r1, #255	; 0xff
    230a:	2000      	movs	r0, #0
    230c:	47b0      	blx	r6
    230e:	0023      	movs	r3, r4
    2310:	33dc      	adds	r3, #220	; 0xdc
    2312:	8018      	strh	r0, [r3, #0]
    2314:	0005      	movs	r5, r0
    my_altimeter->myIMU.accelXRaw = my_altimeter->myIMU.accelXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    2316:	21ff      	movs	r1, #255	; 0xff
    2318:	2000      	movs	r0, #0

// Accel data
    pinLow(cs_accel);
    dummy_rx = spiDataTransfer(SPI0, BMI055_X_ACC_LSB | BMI055_READ_REG);

    my_altimeter->myIMU.accelXRaw = spiDataTransfer(SPI0,dummy_Tx);
    231a:	9302      	str	r3, [sp, #8]
    my_altimeter->myIMU.accelXRaw = my_altimeter->myIMU.accelXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    231c:	47b0      	blx	r6
    231e:	9b02      	ldr	r3, [sp, #8]
    2320:	0200      	lsls	r0, r0, #8
    2322:	4305      	orrs	r5, r0
    2324:	801d      	strh	r5, [r3, #0]
    my_altimeter->myIMU.accelYRaw = spiDataTransfer(SPI0,dummy_Tx);
    2326:	21ff      	movs	r1, #255	; 0xff
    2328:	2000      	movs	r0, #0
    232a:	47b0      	blx	r6
    232c:	0023      	movs	r3, r4
    232e:	33e0      	adds	r3, #224	; 0xe0
    2330:	8018      	strh	r0, [r3, #0]
    2332:	0005      	movs	r5, r0
    my_altimeter->myIMU.accelYRaw = my_altimeter->myIMU.accelYRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    2334:	21ff      	movs	r1, #255	; 0xff
    2336:	2000      	movs	r0, #0
    pinLow(cs_accel);
    dummy_rx = spiDataTransfer(SPI0, BMI055_X_ACC_LSB | BMI055_READ_REG);

    my_altimeter->myIMU.accelXRaw = spiDataTransfer(SPI0,dummy_Tx);
    my_altimeter->myIMU.accelXRaw = my_altimeter->myIMU.accelXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    my_altimeter->myIMU.accelYRaw = spiDataTransfer(SPI0,dummy_Tx);
    2338:	9303      	str	r3, [sp, #12]
    my_altimeter->myIMU.accelYRaw = my_altimeter->myIMU.accelYRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    233a:	47b0      	blx	r6
    233c:	9b03      	ldr	r3, [sp, #12]
    233e:	0200      	lsls	r0, r0, #8
    2340:	4305      	orrs	r5, r0
    2342:	801d      	strh	r5, [r3, #0]
    my_altimeter->myIMU.accelZRaw = spiDataTransfer(SPI0,dummy_Tx);
    2344:	21ff      	movs	r1, #255	; 0xff
    2346:	0025      	movs	r5, r4
    2348:	2000      	movs	r0, #0
    234a:	47b0      	blx	r6
    234c:	35e4      	adds	r5, #228	; 0xe4
    234e:	8028      	strh	r0, [r5, #0]
    my_altimeter->myIMU.accelZRaw = my_altimeter->myIMU.accelZRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    2350:	21ff      	movs	r1, #255	; 0xff

    my_altimeter->myIMU.accelXRaw = spiDataTransfer(SPI0,dummy_Tx);
    my_altimeter->myIMU.accelXRaw = my_altimeter->myIMU.accelXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    my_altimeter->myIMU.accelYRaw = spiDataTransfer(SPI0,dummy_Tx);
    my_altimeter->myIMU.accelYRaw = my_altimeter->myIMU.accelYRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    my_altimeter->myIMU.accelZRaw = spiDataTransfer(SPI0,dummy_Tx);
    2352:	0007      	movs	r7, r0
    my_altimeter->myIMU.accelZRaw = my_altimeter->myIMU.accelZRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    2354:	2000      	movs	r0, #0
    2356:	47b0      	blx	r6
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    2358:	2280      	movs	r2, #128	; 0x80
    235a:	0200      	lsls	r0, r0, #8
    235c:	4b75      	ldr	r3, [pc, #468]	; (2534 <sampleTick+0x3e8>)
    235e:	4307      	orrs	r7, r0
    2360:	00d2      	lsls	r2, r2, #3
    2362:	802f      	strh	r7, [r5, #0]
    2364:	601a      	str	r2, [r3, #0]

    pinHigh(cs_accel);

    bool negativeX = ( my_altimeter->myIMU.accelXRaw & (1<<15)) != 0;
    2366:	9b02      	ldr	r3, [sp, #8]
    bool negativeY =  ( my_altimeter->myIMU.accelYRaw & (1<<15)) != 0;
    bool negativeZ =  ( my_altimeter->myIMU.accelZRaw & (1<<15)) != 0;

    my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXRaw;
    my_altimeter->myIMU.accelYint = my_altimeter->myIMU.accelYRaw;
    my_altimeter->myIMU.accelZint = my_altimeter->myIMU.accelZRaw;
    2368:	0027      	movs	r7, r4
    my_altimeter->myIMU.accelZRaw = spiDataTransfer(SPI0,dummy_Tx);
    my_altimeter->myIMU.accelZRaw = my_altimeter->myIMU.accelZRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);

    pinHigh(cs_accel);

    bool negativeX = ( my_altimeter->myIMU.accelXRaw & (1<<15)) != 0;
    236a:	2000      	movs	r0, #0
    236c:	5e18      	ldrsh	r0, [r3, r0]
    bool negativeY =  ( my_altimeter->myIMU.accelYRaw & (1<<15)) != 0;
    236e:	9b03      	ldr	r3, [sp, #12]
    bool negativeZ =  ( my_altimeter->myIMU.accelZRaw & (1<<15)) != 0;

    my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXRaw;
    my_altimeter->myIMU.accelYint = my_altimeter->myIMU.accelYRaw;
    2370:	3d02      	subs	r5, #2
    my_altimeter->myIMU.accelZRaw = my_altimeter->myIMU.accelZRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);

    pinHigh(cs_accel);

    bool negativeX = ( my_altimeter->myIMU.accelXRaw & (1<<15)) != 0;
    bool negativeY =  ( my_altimeter->myIMU.accelYRaw & (1<<15)) != 0;
    2372:	2200      	movs	r2, #0
    2374:	5e9a      	ldrsh	r2, [r3, r2]
    bool negativeZ =  ( my_altimeter->myIMU.accelZRaw & (1<<15)) != 0;
    2376:	2102      	movs	r1, #2
    2378:	5e6b      	ldrsh	r3, [r5, r1]

    if (negativeX) {
        my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXint | ~((1 << 16) - 1);
        my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXint >> 4;
    } else {
        my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXint >> 4;
    237a:	0021      	movs	r1, r4
    bool negativeY =  ( my_altimeter->myIMU.accelYRaw & (1<<15)) != 0;
    bool negativeZ =  ( my_altimeter->myIMU.accelZRaw & (1<<15)) != 0;

    my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXRaw;
    my_altimeter->myIMU.accelYint = my_altimeter->myIMU.accelYRaw;
    my_altimeter->myIMU.accelZint = my_altimeter->myIMU.accelZRaw;
    237c:	37e6      	adds	r7, #230	; 0xe6
    237e:	1112      	asrs	r2, r2, #4

    if (negativeX) {
        my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXint | ~((1 << 16) - 1);
        my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXint >> 4;
    } else {
        my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXint >> 4;
    2380:	1100      	asrs	r0, r0, #4
    2382:	31de      	adds	r1, #222	; 0xde
    2384:	111b      	asrs	r3, r3, #4
    bool negativeX = ( my_altimeter->myIMU.accelXRaw & (1<<15)) != 0;
    bool negativeY =  ( my_altimeter->myIMU.accelYRaw & (1<<15)) != 0;
    bool negativeZ =  ( my_altimeter->myIMU.accelZRaw & (1<<15)) != 0;

    my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXRaw;
    my_altimeter->myIMU.accelYint = my_altimeter->myIMU.accelYRaw;
    2386:	9502      	str	r5, [sp, #8]

    if (negativeX) {
        my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXint | ~((1 << 16) - 1);
        my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXint >> 4;
    } else {
        my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXint >> 4;
    2388:	8008      	strh	r0, [r1, #0]
    }
    if (negativeY) {
        my_altimeter->myIMU.accelYint = my_altimeter->myIMU.accelYint | ~((1 << 16) - 1);
        my_altimeter->myIMU.accelYint = my_altimeter->myIMU.accelYint >> 4;
    } else {
        my_altimeter->myIMU.accelYint = my_altimeter->myIMU.accelYint >> 4;
    238a:	802a      	strh	r2, [r5, #0]
    }
    if (negativeZ) {
        my_altimeter->myIMU.accelZint = my_altimeter->myIMU.accelZint | ~((1 << 16) - 1);
        my_altimeter->myIMU.accelZint = my_altimeter->myIMU.accelZint >> 4;
    } else {
        my_altimeter->myIMU.accelZint = my_altimeter->myIMU.accelZint >> 4;
    238c:	803b      	strh	r3, [r7, #0]
    }

    my_altimeter->myIMU.accelX = my_altimeter->myIMU.accelXint * BMI055_ACCEL_16G_DIV;
    238e:	4b59      	ldr	r3, [pc, #356]	; (24f4 <sampleTick+0x3a8>)
    2390:	4798      	blx	r3
    2392:	23fe      	movs	r3, #254	; 0xfe
    2394:	2200      	movs	r2, #0
    2396:	4d59      	ldr	r5, [pc, #356]	; (24fc <sampleTick+0x3b0>)
    2398:	059b      	lsls	r3, r3, #22
    239a:	47a8      	blx	r5
    239c:	4b59      	ldr	r3, [pc, #356]	; (2504 <sampleTick+0x3b8>)
    239e:	4798      	blx	r3
    23a0:	9b04      	ldr	r3, [sp, #16]
    23a2:	6018      	str	r0, [r3, #0]
    my_altimeter->myIMU.accelY = my_altimeter->myIMU.accelYint * BMI055_ACCEL_16G_DIV;
    23a4:	0023      	movs	r3, r4
    23a6:	33c8      	adds	r3, #200	; 0xc8
    23a8:	9303      	str	r3, [sp, #12]
    23aa:	9b02      	ldr	r3, [sp, #8]
    23ac:	2000      	movs	r0, #0
    23ae:	5e18      	ldrsh	r0, [r3, r0]
    23b0:	4b50      	ldr	r3, [pc, #320]	; (24f4 <sampleTick+0x3a8>)
    23b2:	4798      	blx	r3
    23b4:	23fe      	movs	r3, #254	; 0xfe
    23b6:	2200      	movs	r2, #0
    23b8:	059b      	lsls	r3, r3, #22
    23ba:	47a8      	blx	r5
    23bc:	4b51      	ldr	r3, [pc, #324]	; (2504 <sampleTick+0x3b8>)
    23be:	4798      	blx	r3
    23c0:	9b03      	ldr	r3, [sp, #12]
    my_altimeter->myIMU.accelZ = my_altimeter->myIMU.accelZint * BMI055_ACCEL_16G_DIV;
    23c2:	0025      	movs	r5, r4
    } else {
        my_altimeter->myIMU.accelZint = my_altimeter->myIMU.accelZint >> 4;
    }

    my_altimeter->myIMU.accelX = my_altimeter->myIMU.accelXint * BMI055_ACCEL_16G_DIV;
    my_altimeter->myIMU.accelY = my_altimeter->myIMU.accelYint * BMI055_ACCEL_16G_DIV;
    23c4:	6018      	str	r0, [r3, #0]
    my_altimeter->myIMU.accelZ = my_altimeter->myIMU.accelZint * BMI055_ACCEL_16G_DIV;
    23c6:	2300      	movs	r3, #0
    23c8:	5ef8      	ldrsh	r0, [r7, r3]
    23ca:	4b4a      	ldr	r3, [pc, #296]	; (24f4 <sampleTick+0x3a8>)
    23cc:	4798      	blx	r3
    23ce:	23fe      	movs	r3, #254	; 0xfe
    23d0:	2200      	movs	r2, #0
    23d2:	4f4a      	ldr	r7, [pc, #296]	; (24fc <sampleTick+0x3b0>)
    23d4:	059b      	lsls	r3, r3, #22
    23d6:	47b8      	blx	r7
    23d8:	4b4a      	ldr	r3, [pc, #296]	; (2504 <sampleTick+0x3b8>)
    23da:	4798      	blx	r3
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    23dc:	2280      	movs	r2, #128	; 0x80
    23de:	4b4f      	ldr	r3, [pc, #316]	; (251c <sampleTick+0x3d0>)
    23e0:	00d2      	lsls	r2, r2, #3
    23e2:	35cc      	adds	r5, #204	; 0xcc
    23e4:	6028      	str	r0, [r5, #0]


    // Gyro data
    pinLow(cs_gyro);
    dummy_rx = spiDataTransfer(SPI0, BMI055_X_GYRO_LSB | BMI055_READ_REG);
    23e6:	2182      	movs	r1, #130	; 0x82
    23e8:	615a      	str	r2, [r3, #20]
    23ea:	2000      	movs	r0, #0
    23ec:	47b0      	blx	r6
    my_altimeter->myIMU.gyroXRaw = spiDataTransfer(SPI0,dummy_Tx);
    23ee:	21ff      	movs	r1, #255	; 0xff
    23f0:	2000      	movs	r0, #0
    23f2:	47b0      	blx	r6
    23f4:	0023      	movs	r3, r4
    23f6:	33e8      	adds	r3, #232	; 0xe8
    23f8:	8018      	strh	r0, [r3, #0]
    23fa:	0005      	movs	r5, r0
    my_altimeter->myIMU.gyroXRaw = my_altimeter->myIMU.gyroXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    23fc:	21ff      	movs	r1, #255	; 0xff
    23fe:	2000      	movs	r0, #0


    // Gyro data
    pinLow(cs_gyro);
    dummy_rx = spiDataTransfer(SPI0, BMI055_X_GYRO_LSB | BMI055_READ_REG);
    my_altimeter->myIMU.gyroXRaw = spiDataTransfer(SPI0,dummy_Tx);
    2400:	9302      	str	r3, [sp, #8]
    my_altimeter->myIMU.gyroXRaw = my_altimeter->myIMU.gyroXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    2402:	47b0      	blx	r6
    2404:	9b02      	ldr	r3, [sp, #8]
    2406:	0200      	lsls	r0, r0, #8
    2408:	4305      	orrs	r5, r0
    240a:	801d      	strh	r5, [r3, #0]
    my_altimeter->myIMU.gyroYRaw = spiDataTransfer(SPI0,dummy_Tx);
    240c:	21ff      	movs	r1, #255	; 0xff
    240e:	2000      	movs	r0, #0
    2410:	47b0      	blx	r6
    2412:	0023      	movs	r3, r4
    2414:	33ec      	adds	r3, #236	; 0xec
    2416:	8018      	strh	r0, [r3, #0]
    2418:	0005      	movs	r5, r0
    my_altimeter->myIMU.gyroYRaw = my_altimeter->myIMU.gyroYRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    241a:	21ff      	movs	r1, #255	; 0xff
    241c:	2000      	movs	r0, #0
    // Gyro data
    pinLow(cs_gyro);
    dummy_rx = spiDataTransfer(SPI0, BMI055_X_GYRO_LSB | BMI055_READ_REG);
    my_altimeter->myIMU.gyroXRaw = spiDataTransfer(SPI0,dummy_Tx);
    my_altimeter->myIMU.gyroXRaw = my_altimeter->myIMU.gyroXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    my_altimeter->myIMU.gyroYRaw = spiDataTransfer(SPI0,dummy_Tx);
    241e:	9303      	str	r3, [sp, #12]
    my_altimeter->myIMU.gyroYRaw = my_altimeter->myIMU.gyroYRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    2420:	47b0      	blx	r6
    2422:	9b03      	ldr	r3, [sp, #12]
    2424:	0200      	lsls	r0, r0, #8
    2426:	4305      	orrs	r5, r0
    2428:	801d      	strh	r5, [r3, #0]
    my_altimeter->myIMU.gyroZRaw = spiDataTransfer(SPI0,dummy_Tx);
    242a:	21ff      	movs	r1, #255	; 0xff
    242c:	0025      	movs	r5, r4
    242e:	2000      	movs	r0, #0
    2430:	47b0      	blx	r6
    2432:	35f0      	adds	r5, #240	; 0xf0
    2434:	8028      	strh	r0, [r5, #0]
    my_altimeter->myIMU.gyroZRaw = my_altimeter->myIMU.gyroZRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    2436:	21ff      	movs	r1, #255	; 0xff
    dummy_rx = spiDataTransfer(SPI0, BMI055_X_GYRO_LSB | BMI055_READ_REG);
    my_altimeter->myIMU.gyroXRaw = spiDataTransfer(SPI0,dummy_Tx);
    my_altimeter->myIMU.gyroXRaw = my_altimeter->myIMU.gyroXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    my_altimeter->myIMU.gyroYRaw = spiDataTransfer(SPI0,dummy_Tx);
    my_altimeter->myIMU.gyroYRaw = my_altimeter->myIMU.gyroYRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    my_altimeter->myIMU.gyroZRaw = spiDataTransfer(SPI0,dummy_Tx);
    2438:	0007      	movs	r7, r0
    my_altimeter->myIMU.gyroZRaw = my_altimeter->myIMU.gyroZRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    243a:	2000      	movs	r0, #0
    243c:	47b0      	blx	r6
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    243e:	2280      	movs	r2, #128	; 0x80
    2440:	0200      	lsls	r0, r0, #8
    2442:	4b36      	ldr	r3, [pc, #216]	; (251c <sampleTick+0x3d0>)
    2444:	4307      	orrs	r7, r0
    2446:	00d2      	lsls	r2, r2, #3
    2448:	802f      	strh	r7, [r5, #0]
    244a:	619a      	str	r2, [r3, #24]
    pinHigh(cs_gyro);

    bool negativeXgyro = (my_altimeter->myIMU.gyroXRaw & (1<<15)) != 0;
    244c:	9b02      	ldr	r3, [sp, #8]
    bool negativeYgyro = (my_altimeter->myIMU.gyroYRaw & (1<<15)) != 0;
    bool negativeZgyro = (my_altimeter->myIMU.gyroZRaw & (1<<15)) != 0;

    my_altimeter->myIMU.gyroXint = my_altimeter->myIMU.gyroXRaw;
    my_altimeter->myIMU.gyroYint = my_altimeter->myIMU.gyroYRaw;
    244e:	0026      	movs	r6, r4
    my_altimeter->myIMU.gyroYRaw = my_altimeter->myIMU.gyroYRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    my_altimeter->myIMU.gyroZRaw = spiDataTransfer(SPI0,dummy_Tx);
    my_altimeter->myIMU.gyroZRaw = my_altimeter->myIMU.gyroZRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    pinHigh(cs_gyro);

    bool negativeXgyro = (my_altimeter->myIMU.gyroXRaw & (1<<15)) != 0;
    2450:	2000      	movs	r0, #0
    2452:	5e18      	ldrsh	r0, [r3, r0]
    bool negativeYgyro = (my_altimeter->myIMU.gyroYRaw & (1<<15)) != 0;
    2454:	9b03      	ldr	r3, [sp, #12]
        my_altimeter->myIMU.gyroZint = my_altimeter->myIMU.gyroZint >> 4;
    } else {
        my_altimeter->myIMU.gyroZint = my_altimeter->myIMU.gyroZint >> 4;
    }

    my_altimeter->myIMU.gyroX = my_altimeter->myIMU.gyroXint * BMI055_GYRO_2000DS_DIV;
    2456:	0027      	movs	r7, r4
    my_altimeter->myIMU.gyroZRaw = spiDataTransfer(SPI0,dummy_Tx);
    my_altimeter->myIMU.gyroZRaw = my_altimeter->myIMU.gyroZRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    pinHigh(cs_gyro);

    bool negativeXgyro = (my_altimeter->myIMU.gyroXRaw & (1<<15)) != 0;
    bool negativeYgyro = (my_altimeter->myIMU.gyroYRaw & (1<<15)) != 0;
    2458:	2200      	movs	r2, #0
    245a:	5e9a      	ldrsh	r2, [r3, r2]
    bool negativeZgyro = (my_altimeter->myIMU.gyroZRaw & (1<<15)) != 0;
    245c:	2100      	movs	r1, #0
    245e:	5e6b      	ldrsh	r3, [r5, r1]

    if (negativeXgyro) {
        my_altimeter->myIMU.gyroXint = my_altimeter->myIMU.gyroXint | ~((1 << 16) - 1);
        my_altimeter->myIMU.gyroXint = my_altimeter->myIMU.gyroXint >> 4;
    } else {
        my_altimeter->myIMU.gyroXint = my_altimeter->myIMU.gyroXint >> 4;
    2460:	0021      	movs	r1, r4
    bool negativeXgyro = (my_altimeter->myIMU.gyroXRaw & (1<<15)) != 0;
    bool negativeYgyro = (my_altimeter->myIMU.gyroYRaw & (1<<15)) != 0;
    bool negativeZgyro = (my_altimeter->myIMU.gyroZRaw & (1<<15)) != 0;

    my_altimeter->myIMU.gyroXint = my_altimeter->myIMU.gyroXRaw;
    my_altimeter->myIMU.gyroYint = my_altimeter->myIMU.gyroYRaw;
    2462:	36ee      	adds	r6, #238	; 0xee
    2464:	1112      	asrs	r2, r2, #4

    if (negativeXgyro) {
        my_altimeter->myIMU.gyroXint = my_altimeter->myIMU.gyroXint | ~((1 << 16) - 1);
        my_altimeter->myIMU.gyroXint = my_altimeter->myIMU.gyroXint >> 4;
    } else {
        my_altimeter->myIMU.gyroXint = my_altimeter->myIMU.gyroXint >> 4;
    2466:	1100      	asrs	r0, r0, #4
    2468:	31ea      	adds	r1, #234	; 0xea
    246a:	111b      	asrs	r3, r3, #4
        my_altimeter->myIMU.gyroZint = my_altimeter->myIMU.gyroZint >> 4;
    } else {
        my_altimeter->myIMU.gyroZint = my_altimeter->myIMU.gyroZint >> 4;
    }

    my_altimeter->myIMU.gyroX = my_altimeter->myIMU.gyroXint * BMI055_GYRO_2000DS_DIV;
    246c:	37d0      	adds	r7, #208	; 0xd0

    if (negativeXgyro) {
        my_altimeter->myIMU.gyroXint = my_altimeter->myIMU.gyroXint | ~((1 << 16) - 1);
        my_altimeter->myIMU.gyroXint = my_altimeter->myIMU.gyroXint >> 4;
    } else {
        my_altimeter->myIMU.gyroXint = my_altimeter->myIMU.gyroXint >> 4;
    246e:	8008      	strh	r0, [r1, #0]
        my_altimeter->myIMU.gyroZint = my_altimeter->myIMU.gyroZint >> 4;
    } else {
        my_altimeter->myIMU.gyroZint = my_altimeter->myIMU.gyroZint >> 4;
    }

    my_altimeter->myIMU.gyroX = my_altimeter->myIMU.gyroXint * BMI055_GYRO_2000DS_DIV;
    2470:	9702      	str	r7, [sp, #8]

    if (negativeYgyro) {
        my_altimeter->myIMU.gyroYint = my_altimeter->myIMU.gyroYint | ~((1 << 16) - 1);
        my_altimeter->myIMU.gyroYint = my_altimeter->myIMU.gyroYint >> 4;
    } else {
        my_altimeter->myIMU.gyroYint = my_altimeter->myIMU.gyroYint >> 4;
    2472:	8032      	strh	r2, [r6, #0]

    if (negativeZgyro) {
        my_altimeter->myIMU.gyroZint = my_altimeter->myIMU.gyroZint | ~((1 << 16) - 1);
        my_altimeter->myIMU.gyroZint = my_altimeter->myIMU.gyroZint >> 4;
    } else {
        my_altimeter->myIMU.gyroZint = my_altimeter->myIMU.gyroZint >> 4;
    2474:	806b      	strh	r3, [r5, #2]
    }

    my_altimeter->myIMU.gyroX = my_altimeter->myIMU.gyroXint * BMI055_GYRO_2000DS_DIV;
    2476:	4b1f      	ldr	r3, [pc, #124]	; (24f4 <sampleTick+0x3a8>)
    2478:	4798      	blx	r3
    247a:	23fe      	movs	r3, #254	; 0xfe
    247c:	2200      	movs	r2, #0
    247e:	4f1f      	ldr	r7, [pc, #124]	; (24fc <sampleTick+0x3b0>)
    2480:	059b      	lsls	r3, r3, #22
    2482:	47b8      	blx	r7
    2484:	4b1f      	ldr	r3, [pc, #124]	; (2504 <sampleTick+0x3b8>)
    2486:	4798      	blx	r3
    2488:	9b02      	ldr	r3, [sp, #8]
    my_altimeter->myIMU.gyroY = my_altimeter->myIMU.gyroYint * BMI055_GYRO_2000DS_DIV;
    248a:	0027      	movs	r7, r4
        my_altimeter->myIMU.gyroZint = my_altimeter->myIMU.gyroZint >> 4;
    } else {
        my_altimeter->myIMU.gyroZint = my_altimeter->myIMU.gyroZint >> 4;
    }

    my_altimeter->myIMU.gyroX = my_altimeter->myIMU.gyroXint * BMI055_GYRO_2000DS_DIV;
    248c:	6018      	str	r0, [r3, #0]
    my_altimeter->myIMU.gyroY = my_altimeter->myIMU.gyroYint * BMI055_GYRO_2000DS_DIV;
    248e:	2300      	movs	r3, #0
    2490:	5ef0      	ldrsh	r0, [r6, r3]
    2492:	4b18      	ldr	r3, [pc, #96]	; (24f4 <sampleTick+0x3a8>)
    2494:	4798      	blx	r3
    2496:	23fe      	movs	r3, #254	; 0xfe
    2498:	2200      	movs	r2, #0
    249a:	4e18      	ldr	r6, [pc, #96]	; (24fc <sampleTick+0x3b0>)
    249c:	059b      	lsls	r3, r3, #22
    249e:	47b0      	blx	r6
    24a0:	4b18      	ldr	r3, [pc, #96]	; (2504 <sampleTick+0x3b8>)
    24a2:	4798      	blx	r3
    24a4:	37d4      	adds	r7, #212	; 0xd4
    24a6:	6038      	str	r0, [r7, #0]
    my_altimeter->myIMU.gyroZ = my_altimeter->myIMU.gyroZint * BMI055_GYRO_2000DS_DIV;
    24a8:	2302      	movs	r3, #2
    24aa:	5ee8      	ldrsh	r0, [r5, r3]
    24ac:	4b11      	ldr	r3, [pc, #68]	; (24f4 <sampleTick+0x3a8>)
    24ae:	4798      	blx	r3
    24b0:	23fe      	movs	r3, #254	; 0xfe
    24b2:	2200      	movs	r2, #0
    24b4:	4d11      	ldr	r5, [pc, #68]	; (24fc <sampleTick+0x3b0>)
    24b6:	059b      	lsls	r3, r3, #22
    24b8:	47a8      	blx	r5
    24ba:	0026      	movs	r6, r4
    24bc:	4b11      	ldr	r3, [pc, #68]	; (2504 <sampleTick+0x3b8>)
    24be:	4798      	blx	r3
    24c0:	36d8      	adds	r6, #216	; 0xd8
    24c2:	6030      	str	r0, [r6, #0]

    //delay_us(800);
    delay_ms(5);
    24c4:	4b1c      	ldr	r3, [pc, #112]	; (2538 <sampleTick+0x3ec>)
    24c6:	2005      	movs	r0, #5
    24c8:	4798      	blx	r3
    my_altimeter->myBarometer.rawPressureData = readMS5803AdcResults();
    24ca:	4b17      	ldr	r3, [pc, #92]	; (2528 <sampleTick+0x3dc>)
    24cc:	4798      	blx	r3
    ConvertPressureTemperature(&my_altimeter->myBarometer);
    24ce:	3408      	adds	r4, #8
    my_altimeter->myIMU.gyroY = my_altimeter->myIMU.gyroYint * BMI055_GYRO_2000DS_DIV;
    my_altimeter->myIMU.gyroZ = my_altimeter->myIMU.gyroZint * BMI055_GYRO_2000DS_DIV;

    //delay_us(800);
    delay_ms(5);
    my_altimeter->myBarometer.rawPressureData = readMS5803AdcResults();
    24d0:	60e0      	str	r0, [r4, #12]
    ConvertPressureTemperature(&my_altimeter->myBarometer);
    24d2:	4b1a      	ldr	r3, [pc, #104]	; (253c <sampleTick+0x3f0>)
    24d4:	0020      	movs	r0, r4
    24d6:	4798      	blx	r3
    paToFeetNOAA(&my_altimeter->myBarometer);
    24d8:	0020      	movs	r0, r4
    24da:	4b19      	ldr	r3, [pc, #100]	; (2540 <sampleTick+0x3f4>)
    24dc:	4798      	blx	r3


}
    24de:	b007      	add	sp, #28
    24e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    24e2:	46c0      	nop			; (mov r8, r8)
    24e4:	20000483 	.word	0x20000483
    24e8:	000011dd 	.word	0x000011dd
    24ec:	00005dd8 	.word	0x00005dd8
    24f0:	00000e51 	.word	0x00000e51
    24f4:	0000567d 	.word	0x0000567d
    24f8:	77318fc5 	.word	0x77318fc5
    24fc:	00004a35 	.word	0x00004a35
    2500:	3f5f212d 	.word	0x3f5f212d
    2504:	00005819 	.word	0x00005819
    2508:	00000312 	.word	0x00000312
    250c:	00000316 	.word	0x00000316
    2510:	fffff0c4 	.word	0xfffff0c4
    2514:	02de00d2 	.word	0x02de00d2
    2518:	bf8f8a09 	.word	0xbf8f8a09
    251c:	41004400 	.word	0x41004400
    2520:	00000eb9 	.word	0x00000eb9
    2524:	00001161 	.word	0x00001161
    2528:	0000043d 	.word	0x0000043d
    252c:	41004494 	.word	0x41004494
    2530:	00002651 	.word	0x00002651
    2534:	41004498 	.word	0x41004498
    2538:	00001191 	.word	0x00001191
    253c:	000004f1 	.word	0x000004f1
    2540:	00000599 	.word	0x00000599

00002544 <sercomClockEnable>:
#include <util.h>

void sercomClockEnable(SercomId id, uint32_t clock_channel, u8_t divider) {
    2544:	b570      	push	{r4, r5, r6, lr}
    2546:	0004      	movs	r4, r0
    // prevent this clock write from changing any other clocks
    PM->APBCMASK.reg |= 1 << (PM_APBCMASK_SERCOM0_Pos + id);
    2548:	2301      	movs	r3, #1
    254a:	1ca6      	adds	r6, r4, #2
    254c:	40b3      	lsls	r3, r6
    254e:	480d      	ldr	r0, [pc, #52]	; (2584 <sercomClockEnable+0x40>)
#include <util.h>

void sercomClockEnable(SercomId id, uint32_t clock_channel, u8_t divider) {
    2550:	000d      	movs	r5, r1
    // prevent this clock write from changing any other clocks
    PM->APBCMASK.reg |= 1 << (PM_APBCMASK_SERCOM0_Pos + id);
    2552:	6a01      	ldr	r1, [r0, #32]
    2554:	430b      	orrs	r3, r1
    2556:	6203      	str	r3, [r0, #32]


    if (clock_channel != 0) {
    2558:	2d00      	cmp	r5, #0
    255a:	d003      	beq.n	2564 <sercomClockEnable+0x20>
        // clock generators 3-8 have 8 division factor bits - DIV[7:0]
        gclkEnable(clock_channel, GCLK_SOURCE_DFLL48M, divider);
    255c:	2107      	movs	r1, #7
    255e:	0028      	movs	r0, r5
    2560:	4b09      	ldr	r3, [pc, #36]	; (2588 <sercomClockEnable+0x44>)
    2562:	4798      	blx	r3
    }


    // attach clock
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
    2564:	22f0      	movs	r2, #240	; 0xf0
    2566:	2080      	movs	r0, #128	; 0x80
    2568:	0229      	lsls	r1, r5, #8
    256a:	0112      	lsls	r2, r2, #4
    256c:	4011      	ands	r1, r2
    256e:	01c0      	lsls	r0, r0, #7
    2570:	4301      	orrs	r1, r0
    2572:	0020      	movs	r0, r4
    2574:	3014      	adds	r0, #20
    2576:	223f      	movs	r2, #63	; 0x3f
    2578:	0003      	movs	r3, r0
    257a:	4013      	ands	r3, r2
    257c:	4319      	orrs	r1, r3
    257e:	4b03      	ldr	r3, [pc, #12]	; (258c <sercomClockEnable+0x48>)
    2580:	8059      	strh	r1, [r3, #2]
                        GCLK_CLKCTRL_GEN(clock_channel) |
                        GCLK_CLKCTRL_ID(SERCOM0_GCLK_ID_CORE + id);
}
    2582:	bd70      	pop	{r4, r5, r6, pc}
    2584:	40000400 	.word	0x40000400
    2588:	00001111 	.word	0x00001111
    258c:	40000c00 	.word	0x40000c00

00002590 <sercomReset>:
#include <sample.h>
#include <kalmanGains.h>

//dma.c
inline static Sercom* sercom(SercomId id) {
    return (Sercom*) (0x42000800U + id * 1024);
    2590:	4b04      	ldr	r3, [pc, #16]	; (25a4 <sercomReset+0x14>)
    2592:	0280      	lsls	r0, r0, #10
    2594:	18c0      	adds	r0, r0, r3


void sercomReset(SercomId id) {
    sercom(id)->SPI.CTRLA.reg = SERCOM_SPI_CTRLA_SWRST;
    2596:	2301      	movs	r3, #1
    2598:	6003      	str	r3, [r0, #0]
    while(sercom(id)->SPI.CTRLA.reg & SERCOM_SPI_CTRLA_SWRST);
    259a:	6802      	ldr	r2, [r0, #0]
    259c:	421a      	tst	r2, r3
    259e:	d1fc      	bne.n	259a <sercomReset+0xa>
}
    25a0:	4770      	bx	lr
    25a2:	46c0      	nop			; (mov r8, r8)
    25a4:	42000800 	.word	0x42000800

000025a8 <sercomSpiMasterInit>:
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
}


void sercomSpiMasterInit(SercomId id, u32_t dipo, u32_t dopo, bool cpol, bool cpha, u8_t baud) {
    25a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    25aa:	0004      	movs	r4, r0
    25ac:	9300      	str	r3, [sp, #0]
    25ae:	ab08      	add	r3, sp, #32
    25b0:	781b      	ldrb	r3, [r3, #0]
    25b2:	000e      	movs	r6, r1
    25b4:	9301      	str	r3, [sp, #4]
    25b6:	ab09      	add	r3, sp, #36	; 0x24
    25b8:	781f      	ldrb	r7, [r3, #0]

    sercomReset(id);
    25ba:	4b12      	ldr	r3, [pc, #72]	; (2604 <sercomSpiMasterInit+0x5c>)
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
}


void sercomSpiMasterInit(SercomId id, u32_t dipo, u32_t dopo, bool cpol, bool cpha, u8_t baud) {
    25bc:	0015      	movs	r5, r2

    sercomReset(id);
    25be:	4798      	blx	r3
    25c0:	4b11      	ldr	r3, [pc, #68]	; (2608 <sercomSpiMasterInit+0x60>)
    25c2:	02a4      	lsls	r4, r4, #10
    25c4:	18e4      	adds	r4, r4, r3

    sercom(id)->SPI.CTRLB.reg
        = SERCOM_SPI_CTRLB_RXEN;
    25c6:	2380      	movs	r3, #128	; 0x80
    25c8:	029b      	lsls	r3, r3, #10
    25ca:	6063      	str	r3, [r4, #4]
    25cc:	23c0      	movs	r3, #192	; 0xc0
    sercom(id)->SPI.BAUD.reg = baud;

    sercom(id)->SPI.CTRLA.reg
        = SERCOM_SPI_CTRLA_ENABLE
          | SERCOM_SPI_CTRLA_MODE_SPI_MASTER
          | SERCOM_SPI_CTRLA_DIPO(dipo)
    25ce:	21c0      	movs	r1, #192	; 0xc0
    25d0:	042d      	lsls	r5, r5, #16
    25d2:	029b      	lsls	r3, r3, #10
    25d4:	402b      	ands	r3, r5
    25d6:	250e      	movs	r5, #14
    25d8:	0536      	lsls	r6, r6, #20
    25da:	0389      	lsls	r1, r1, #14
    25dc:	4031      	ands	r1, r6
          | SERCOM_SPI_CTRLA_DOPO(dopo)
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
    25de:	9e00      	ldr	r6, [sp, #0]
    25e0:	431d      	orrs	r5, r3
    25e2:	1e73      	subs	r3, r6, #1
    25e4:	419e      	sbcs	r6, r3
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
    25e6:	9b01      	ldr	r3, [sp, #4]
    sercom(id)->SPI.CTRLA.reg
        = SERCOM_SPI_CTRLA_ENABLE
          | SERCOM_SPI_CTRLA_MODE_SPI_MASTER
          | SERCOM_SPI_CTRLA_DIPO(dipo)
          | SERCOM_SPI_CTRLA_DOPO(dopo)
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
    25e8:	0772      	lsls	r2, r6, #29
    25ea:	430d      	orrs	r5, r1
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
    25ec:	432a      	orrs	r2, r5
    25ee:	1e59      	subs	r1, r3, #1
    25f0:	418b      	sbcs	r3, r1
    25f2:	0016      	movs	r6, r2
    25f4:	071b      	lsls	r3, r3, #28
    25f6:	431e      	orrs	r6, r3
    sercomReset(id);

    sercom(id)->SPI.CTRLB.reg
        = SERCOM_SPI_CTRLB_RXEN;

    sercom(id)->SPI.BAUD.reg = baud;
    25f8:	7327      	strb	r7, [r4, #12]

    sercom(id)->SPI.CTRLA.reg
        = SERCOM_SPI_CTRLA_ENABLE
    25fa:	6026      	str	r6, [r4, #0]
        };
    }
}

static inline void SPI_sync(SercomId id) {
    while  (sercom(id)->SPI.SYNCBUSY.bit.CTRLB);
    25fc:	69e3      	ldr	r3, [r4, #28]
    25fe:	075b      	lsls	r3, r3, #29
    2600:	d4fc      	bmi.n	25fc <sercomSpiMasterInit+0x54>
          | SERCOM_SPI_CTRLA_DOPO(dopo)
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);

    SPI_sync(id);
}
    2602:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    2604:	00002591 	.word	0x00002591
    2608:	42000800 	.word	0x42000800

0000260c <sercomUartInit>:




void sercomUartInit(SercomId id, u32_t rxpo, u32_t txpo, u32_t baud) {
    260c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    260e:	0007      	movs	r7, r0
    2610:	001e      	movs	r6, r3
    sercomReset(id);
    2612:	4b0c      	ldr	r3, [pc, #48]	; (2644 <sercomUartInit+0x38>)
}




void sercomUartInit(SercomId id, u32_t rxpo, u32_t txpo, u32_t baud) {
    2614:	000d      	movs	r5, r1
    2616:	0014      	movs	r4, r2
    sercomReset(id);
    2618:	4798      	blx	r3
#include <sample.h>
#include <kalmanGains.h>

//dma.c
inline static Sercom* sercom(SercomId id) {
    return (Sercom*) (0x42000800U + id * 1024);
    261a:	4b0b      	ldr	r3, [pc, #44]	; (2648 <sercomUartInit+0x3c>)
    261c:	02b8      	lsls	r0, r7, #10
    261e:	18c0      	adds	r0, r0, r3
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    2620:	2304      	movs	r3, #4
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    2622:	22c0      	movs	r2, #192	; 0xc0



void sercomUartInit(SercomId id, u32_t rxpo, u32_t txpo, u32_t baud) {
    sercomReset(id);
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    2624:	6003      	str	r3, [r0, #0]
    sercom(id)->USART.BAUD.reg = baud;
    sercom(id)->USART.CTRLB.reg
        = SERCOM_USART_CTRLB_RXEN
    2626:	23c0      	movs	r3, #192	; 0xc0
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    2628:	0529      	lsls	r1, r5, #20
    262a:	0392      	lsls	r2, r2, #14
    262c:	4011      	ands	r1, r2
    262e:	4a07      	ldr	r2, [pc, #28]	; (264c <sercomUartInit+0x40>)


void sercomUartInit(SercomId id, u32_t rxpo, u32_t txpo, u32_t baud) {
    sercomReset(id);
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    sercom(id)->USART.BAUD.reg = baud;
    2630:	b2b6      	uxth	r6, r6
    sercom(id)->USART.CTRLB.reg
        = SERCOM_USART_CTRLB_RXEN
    2632:	029b      	lsls	r3, r3, #10
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    2634:	0424      	lsls	r4, r4, #16


void sercomUartInit(SercomId id, u32_t rxpo, u32_t txpo, u32_t baud) {
    sercomReset(id);
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    sercom(id)->USART.BAUD.reg = baud;
    2636:	8186      	strh	r6, [r0, #12]
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    2638:	4311      	orrs	r1, r2
void sercomUartInit(SercomId id, u32_t rxpo, u32_t txpo, u32_t baud) {
    sercomReset(id);
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    sercom(id)->USART.BAUD.reg = baud;
    sercom(id)->USART.CTRLB.reg
        = SERCOM_USART_CTRLB_RXEN
    263a:	6043      	str	r3, [r0, #4]
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    263c:	4023      	ands	r3, r4
    263e:	430b      	orrs	r3, r1
    sercom(id)->USART.BAUD.reg = baud;
    sercom(id)->USART.CTRLB.reg
        = SERCOM_USART_CTRLB_RXEN
          | SERCOM_USART_CTRLB_TXEN;
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
    2640:	6003      	str	r3, [r0, #0]
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
}
    2642:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2644:	00002591 	.word	0x00002591
    2648:	42000800 	.word	0x42000800
    264c:	40000006 	.word	0x40000006

00002650 <spiDataTransfer>:
    2650:	4b04      	ldr	r3, [pc, #16]	; (2664 <spiDataTransfer+0x14>)
    2652:	0280      	lsls	r0, r0, #10
    2654:	18c0      	adds	r0, r0, r3

u8_t spiDataTransfer(SercomId id, u8_t data) {
    sercom(id)->SPI.DATA.reg = data;
    2656:	6281      	str	r1, [r0, #40]	; 0x28
    while(sercom(id)->SPI.INTFLAG.bit.RXC == 0);
    2658:	7e03      	ldrb	r3, [r0, #24]
    265a:	075b      	lsls	r3, r3, #29
    265c:	d5fc      	bpl.n	2658 <spiDataTransfer+0x8>
    return sercom(id)->SPI.DATA.reg;
    265e:	6a80      	ldr	r0, [r0, #40]	; 0x28
    2660:	b2c0      	uxtb	r0, r0
}
    2662:	4770      	bx	lr
    2664:	42000800 	.word	0x42000800

00002668 <usartDataOut>:
    2668:	4b04      	ldr	r3, [pc, #16]	; (267c <usartDataOut+0x14>)
    266a:	0280      	lsls	r0, r0, #10
    266c:	18c0      	adds	r0, r0, r3
    while(sercom(id)->SPI.INTFLAG.bit.DRE == 0);
    return sercom(id)->SPI.DATA.reg;
}

void usartDataOut(SercomId id, u8_t data) {
    sercom(id)->USART.DATA.reg = data;
    266e:	b289      	uxth	r1, r1
    2670:	8501      	strh	r1, [r0, #40]	; 0x28
    while(sercom(id)->USART.INTFLAG.bit.DRE == 0);
    2672:	7e03      	ldrb	r3, [r0, #24]
    2674:	07db      	lsls	r3, r3, #31
    2676:	d5fc      	bpl.n	2672 <usartDataOut+0xa>
}
    2678:	4770      	bx	lr
    267a:	46c0      	nop			; (mov r8, r8)
    267c:	42000800 	.word	0x42000800

00002680 <usartDataIn>:
    2680:	4b02      	ldr	r3, [pc, #8]	; (268c <usartDataIn+0xc>)
    2682:	0280      	lsls	r0, r0, #10
    2684:	18c0      	adds	r0, r0, r3

u8_t usartDataIn(SercomId id) {
    return sercom(id)->USART.DATA.reg;
    2686:	8d00      	ldrh	r0, [r0, #40]	; 0x28
    2688:	b2c0      	uxtb	r0, r0
    268a:	4770      	bx	lr
    268c:	42000800 	.word	0x42000800

00002690 <pow>:
    2690:	b5f0      	push	{r4, r5, r6, r7, lr}
    2692:	465f      	mov	r7, fp
    2694:	464d      	mov	r5, r9
    2696:	4656      	mov	r6, sl
    2698:	4644      	mov	r4, r8
    269a:	b4f0      	push	{r4, r5, r6, r7}
    269c:	b091      	sub	sp, #68	; 0x44
    269e:	001f      	movs	r7, r3
    26a0:	0004      	movs	r4, r0
    26a2:	000d      	movs	r5, r1
    26a4:	0016      	movs	r6, r2
    26a6:	f000 f9af 	bl	2a08 <__ieee754_pow>
    26aa:	4bcf      	ldr	r3, [pc, #828]	; (29e8 <pow+0x358>)
    26ac:	9002      	str	r0, [sp, #8]
    26ae:	9103      	str	r1, [sp, #12]
    26b0:	469b      	mov	fp, r3
    26b2:	781b      	ldrb	r3, [r3, #0]
    26b4:	b25b      	sxtb	r3, r3
    26b6:	4699      	mov	r9, r3
    26b8:	3301      	adds	r3, #1
    26ba:	d04f      	beq.n	275c <pow+0xcc>
    26bc:	0032      	movs	r2, r6
    26be:	003b      	movs	r3, r7
    26c0:	0030      	movs	r0, r6
    26c2:	0039      	movs	r1, r7
    26c4:	f002 ff84 	bl	55d0 <__aeabi_dcmpun>
    26c8:	9000      	str	r0, [sp, #0]
    26ca:	2800      	cmp	r0, #0
    26cc:	d146      	bne.n	275c <pow+0xcc>
    26ce:	0022      	movs	r2, r4
    26d0:	002b      	movs	r3, r5
    26d2:	0020      	movs	r0, r4
    26d4:	0029      	movs	r1, r5
    26d6:	f002 ff7b 	bl	55d0 <__aeabi_dcmpun>
    26da:	2200      	movs	r2, #0
    26dc:	4682      	mov	sl, r0
    26de:	2800      	cmp	r0, #0
    26e0:	d134      	bne.n	274c <pow+0xbc>
    26e2:	2300      	movs	r3, #0
    26e4:	0020      	movs	r0, r4
    26e6:	0029      	movs	r1, r5
    26e8:	f001 f8f2 	bl	38d0 <__aeabi_dcmpeq>
    26ec:	2800      	cmp	r0, #0
    26ee:	d03a      	beq.n	2766 <pow+0xd6>
    26f0:	2200      	movs	r2, #0
    26f2:	2300      	movs	r3, #0
    26f4:	0030      	movs	r0, r6
    26f6:	0039      	movs	r1, r7
    26f8:	f001 f8ea 	bl	38d0 <__aeabi_dcmpeq>
    26fc:	9005      	str	r0, [sp, #20]
    26fe:	2800      	cmp	r0, #0
    2700:	d100      	bne.n	2704 <pow+0x74>
    2702:	e074      	b.n	27ee <pow+0x15e>
    2704:	ab06      	add	r3, sp, #24
    2706:	4698      	mov	r8, r3
    2708:	2301      	movs	r3, #1
    270a:	4642      	mov	r2, r8
    270c:	9306      	str	r3, [sp, #24]
    270e:	4bb7      	ldr	r3, [pc, #732]	; (29ec <pow+0x35c>)
    2710:	6053      	str	r3, [r2, #4]
    2712:	4643      	mov	r3, r8
    2714:	4652      	mov	r2, sl
    2716:	609c      	str	r4, [r3, #8]
    2718:	60dd      	str	r5, [r3, #12]
    271a:	621a      	str	r2, [r3, #32]
    271c:	611e      	str	r6, [r3, #16]
    271e:	615f      	str	r7, [r3, #20]
    2720:	4642      	mov	r2, r8
    2722:	2300      	movs	r3, #0
    2724:	2400      	movs	r4, #0
    2726:	6193      	str	r3, [r2, #24]
    2728:	61d4      	str	r4, [r2, #28]
    272a:	464b      	mov	r3, r9
    272c:	2b00      	cmp	r3, #0
    272e:	d100      	bne.n	2732 <pow+0xa2>
    2730:	e094      	b.n	285c <pow+0x1cc>
    2732:	2300      	movs	r3, #0
    2734:	4cae      	ldr	r4, [pc, #696]	; (29f0 <pow+0x360>)
    2736:	9300      	str	r3, [sp, #0]
    2738:	9401      	str	r4, [sp, #4]
    273a:	9800      	ldr	r0, [sp, #0]
    273c:	9901      	ldr	r1, [sp, #4]
    273e:	b011      	add	sp, #68	; 0x44
    2740:	bc3c      	pop	{r2, r3, r4, r5}
    2742:	4690      	mov	r8, r2
    2744:	4699      	mov	r9, r3
    2746:	46a2      	mov	sl, r4
    2748:	46ab      	mov	fp, r5
    274a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    274c:	2300      	movs	r3, #0
    274e:	0030      	movs	r0, r6
    2750:	0039      	movs	r1, r7
    2752:	f001 f8bd 	bl	38d0 <__aeabi_dcmpeq>
    2756:	2800      	cmp	r0, #0
    2758:	d000      	beq.n	275c <pow+0xcc>
    275a:	e0eb      	b.n	2934 <pow+0x2a4>
    275c:	9b02      	ldr	r3, [sp, #8]
    275e:	9c03      	ldr	r4, [sp, #12]
    2760:	9300      	str	r3, [sp, #0]
    2762:	9401      	str	r4, [sp, #4]
    2764:	e7e9      	b.n	273a <pow+0xaa>
    2766:	9802      	ldr	r0, [sp, #8]
    2768:	9903      	ldr	r1, [sp, #12]
    276a:	f000 ff7d 	bl	3668 <finite>
    276e:	4681      	mov	r9, r0
    2770:	2800      	cmp	r0, #0
    2772:	d100      	bne.n	2776 <pow+0xe6>
    2774:	e086      	b.n	2884 <pow+0x1f4>
    2776:	9802      	ldr	r0, [sp, #8]
    2778:	9903      	ldr	r1, [sp, #12]
    277a:	2200      	movs	r2, #0
    277c:	2300      	movs	r3, #0
    277e:	f001 f8a7 	bl	38d0 <__aeabi_dcmpeq>
    2782:	2800      	cmp	r0, #0
    2784:	d0ea      	beq.n	275c <pow+0xcc>
    2786:	0020      	movs	r0, r4
    2788:	0029      	movs	r1, r5
    278a:	f000 ff6d 	bl	3668 <finite>
    278e:	9a02      	ldr	r2, [sp, #8]
    2790:	9b03      	ldr	r3, [sp, #12]
    2792:	9200      	str	r2, [sp, #0]
    2794:	9301      	str	r3, [sp, #4]
    2796:	2800      	cmp	r0, #0
    2798:	d0cf      	beq.n	273a <pow+0xaa>
    279a:	0030      	movs	r0, r6
    279c:	0039      	movs	r1, r7
    279e:	f000 ff63 	bl	3668 <finite>
    27a2:	9a02      	ldr	r2, [sp, #8]
    27a4:	9b03      	ldr	r3, [sp, #12]
    27a6:	9200      	str	r2, [sp, #0]
    27a8:	9301      	str	r3, [sp, #4]
    27aa:	2800      	cmp	r0, #0
    27ac:	d0c5      	beq.n	273a <pow+0xaa>
    27ae:	ab06      	add	r3, sp, #24
    27b0:	4698      	mov	r8, r3
    27b2:	2304      	movs	r3, #4
    27b4:	4642      	mov	r2, r8
    27b6:	9306      	str	r3, [sp, #24]
    27b8:	4b8c      	ldr	r3, [pc, #560]	; (29ec <pow+0x35c>)
    27ba:	6094      	str	r4, [r2, #8]
    27bc:	60d5      	str	r5, [r2, #12]
    27be:	6053      	str	r3, [r2, #4]
    27c0:	2300      	movs	r3, #0
    27c2:	2400      	movs	r4, #0
    27c4:	6213      	str	r3, [r2, #32]
    27c6:	2300      	movs	r3, #0
    27c8:	6193      	str	r3, [r2, #24]
    27ca:	61d4      	str	r4, [r2, #28]
    27cc:	465b      	mov	r3, fp
    27ce:	781b      	ldrb	r3, [r3, #0]
    27d0:	6116      	str	r6, [r2, #16]
    27d2:	6157      	str	r7, [r2, #20]
    27d4:	b25b      	sxtb	r3, r3
    27d6:	2b02      	cmp	r3, #2
    27d8:	d004      	beq.n	27e4 <pow+0x154>
    27da:	4640      	mov	r0, r8
    27dc:	f000 ff4e 	bl	367c <matherr>
    27e0:	2800      	cmp	r0, #0
    27e2:	d140      	bne.n	2866 <pow+0x1d6>
    27e4:	f003 f94e 	bl	5a84 <__errno>
    27e8:	2322      	movs	r3, #34	; 0x22
    27ea:	6003      	str	r3, [r0, #0]
    27ec:	e03b      	b.n	2866 <pow+0x1d6>
    27ee:	0030      	movs	r0, r6
    27f0:	0039      	movs	r1, r7
    27f2:	f000 ff39 	bl	3668 <finite>
    27f6:	9a02      	ldr	r2, [sp, #8]
    27f8:	9b03      	ldr	r3, [sp, #12]
    27fa:	9200      	str	r2, [sp, #0]
    27fc:	9301      	str	r3, [sp, #4]
    27fe:	2800      	cmp	r0, #0
    2800:	d09b      	beq.n	273a <pow+0xaa>
    2802:	2200      	movs	r2, #0
    2804:	2300      	movs	r3, #0
    2806:	0030      	movs	r0, r6
    2808:	0039      	movs	r1, r7
    280a:	f001 f867 	bl	38dc <__aeabi_dcmplt>
    280e:	2800      	cmp	r0, #0
    2810:	d100      	bne.n	2814 <pow+0x184>
    2812:	e792      	b.n	273a <pow+0xaa>
    2814:	ab06      	add	r3, sp, #24
    2816:	4698      	mov	r8, r3
    2818:	2301      	movs	r3, #1
    281a:	4642      	mov	r2, r8
    281c:	9306      	str	r3, [sp, #24]
    281e:	4b73      	ldr	r3, [pc, #460]	; (29ec <pow+0x35c>)
    2820:	6053      	str	r3, [r2, #4]
    2822:	4643      	mov	r3, r8
    2824:	9a05      	ldr	r2, [sp, #20]
    2826:	609c      	str	r4, [r3, #8]
    2828:	60dd      	str	r5, [r3, #12]
    282a:	621a      	str	r2, [r3, #32]
    282c:	611e      	str	r6, [r3, #16]
    282e:	615f      	str	r7, [r3, #20]
    2830:	465b      	mov	r3, fp
    2832:	781b      	ldrb	r3, [r3, #0]
    2834:	b25b      	sxtb	r3, r3
    2836:	2b00      	cmp	r3, #0
    2838:	d00b      	beq.n	2852 <pow+0x1c2>
    283a:	2000      	movs	r0, #0
    283c:	4642      	mov	r2, r8
    283e:	496d      	ldr	r1, [pc, #436]	; (29f4 <pow+0x364>)
    2840:	6190      	str	r0, [r2, #24]
    2842:	61d1      	str	r1, [r2, #28]
    2844:	2b02      	cmp	r3, #2
    2846:	d109      	bne.n	285c <pow+0x1cc>
    2848:	f003 f91c 	bl	5a84 <__errno>
    284c:	2321      	movs	r3, #33	; 0x21
    284e:	6003      	str	r3, [r0, #0]
    2850:	e009      	b.n	2866 <pow+0x1d6>
    2852:	4642      	mov	r2, r8
    2854:	2300      	movs	r3, #0
    2856:	2400      	movs	r4, #0
    2858:	6193      	str	r3, [r2, #24]
    285a:	61d4      	str	r4, [r2, #28]
    285c:	4640      	mov	r0, r8
    285e:	f000 ff0d 	bl	367c <matherr>
    2862:	2800      	cmp	r0, #0
    2864:	d0f0      	beq.n	2848 <pow+0x1b8>
    2866:	4643      	mov	r3, r8
    2868:	6a1b      	ldr	r3, [r3, #32]
    286a:	2b00      	cmp	r3, #0
    286c:	d004      	beq.n	2878 <pow+0x1e8>
    286e:	f003 f909 	bl	5a84 <__errno>
    2872:	4643      	mov	r3, r8
    2874:	6a1b      	ldr	r3, [r3, #32]
    2876:	6003      	str	r3, [r0, #0]
    2878:	4643      	mov	r3, r8
    287a:	69dc      	ldr	r4, [r3, #28]
    287c:	699b      	ldr	r3, [r3, #24]
    287e:	9300      	str	r3, [sp, #0]
    2880:	9401      	str	r4, [sp, #4]
    2882:	e75a      	b.n	273a <pow+0xaa>
    2884:	0020      	movs	r0, r4
    2886:	0029      	movs	r1, r5
    2888:	f000 feee 	bl	3668 <finite>
    288c:	2800      	cmp	r0, #0
    288e:	d100      	bne.n	2892 <pow+0x202>
    2890:	e771      	b.n	2776 <pow+0xe6>
    2892:	0030      	movs	r0, r6
    2894:	0039      	movs	r1, r7
    2896:	f000 fee7 	bl	3668 <finite>
    289a:	2800      	cmp	r0, #0
    289c:	d100      	bne.n	28a0 <pow+0x210>
    289e:	e76a      	b.n	2776 <pow+0xe6>
    28a0:	9802      	ldr	r0, [sp, #8]
    28a2:	9903      	ldr	r1, [sp, #12]
    28a4:	000b      	movs	r3, r1
    28a6:	0002      	movs	r2, r0
    28a8:	f002 fe92 	bl	55d0 <__aeabi_dcmpun>
    28ac:	ab06      	add	r3, sp, #24
    28ae:	4698      	mov	r8, r3
    28b0:	2800      	cmp	r0, #0
    28b2:	d17a      	bne.n	29aa <pow+0x31a>
    28b4:	2303      	movs	r3, #3
    28b6:	4642      	mov	r2, r8
    28b8:	9306      	str	r3, [sp, #24]
    28ba:	4b4c      	ldr	r3, [pc, #304]	; (29ec <pow+0x35c>)
    28bc:	6210      	str	r0, [r2, #32]
    28be:	6053      	str	r3, [r2, #4]
    28c0:	465b      	mov	r3, fp
    28c2:	781b      	ldrb	r3, [r3, #0]
    28c4:	6094      	str	r4, [r2, #8]
    28c6:	60d5      	str	r5, [r2, #12]
    28c8:	b25b      	sxtb	r3, r3
    28ca:	6116      	str	r6, [r2, #16]
    28cc:	6157      	str	r7, [r2, #20]
    28ce:	4699      	mov	r9, r3
    28d0:	2b00      	cmp	r3, #0
    28d2:	d148      	bne.n	2966 <pow+0x2d6>
    28d4:	22e0      	movs	r2, #224	; 0xe0
    28d6:	4641      	mov	r1, r8
    28d8:	4b47      	ldr	r3, [pc, #284]	; (29f8 <pow+0x368>)
    28da:	0612      	lsls	r2, r2, #24
    28dc:	618a      	str	r2, [r1, #24]
    28de:	61cb      	str	r3, [r1, #28]
    28e0:	0020      	movs	r0, r4
    28e2:	2200      	movs	r2, #0
    28e4:	2300      	movs	r3, #0
    28e6:	0029      	movs	r1, r5
    28e8:	f000 fff8 	bl	38dc <__aeabi_dcmplt>
    28ec:	2800      	cmp	r0, #0
    28ee:	d100      	bne.n	28f2 <pow+0x262>
    28f0:	e773      	b.n	27da <pow+0x14a>
    28f2:	2200      	movs	r2, #0
    28f4:	4b41      	ldr	r3, [pc, #260]	; (29fc <pow+0x36c>)
    28f6:	0030      	movs	r0, r6
    28f8:	0039      	movs	r1, r7
    28fa:	f002 f89b 	bl	4a34 <__aeabi_dmul>
    28fe:	0004      	movs	r4, r0
    2900:	000d      	movs	r5, r1
    2902:	f000 fec3 	bl	368c <rint>
    2906:	0002      	movs	r2, r0
    2908:	000b      	movs	r3, r1
    290a:	0020      	movs	r0, r4
    290c:	0029      	movs	r1, r5
    290e:	f000 ffdf 	bl	38d0 <__aeabi_dcmpeq>
    2912:	2800      	cmp	r0, #0
    2914:	d105      	bne.n	2922 <pow+0x292>
    2916:	22e0      	movs	r2, #224	; 0xe0
    2918:	4b39      	ldr	r3, [pc, #228]	; (2a00 <pow+0x370>)
    291a:	0612      	lsls	r2, r2, #24
    291c:	4641      	mov	r1, r8
    291e:	618a      	str	r2, [r1, #24]
    2920:	61cb      	str	r3, [r1, #28]
    2922:	465b      	mov	r3, fp
    2924:	781b      	ldrb	r3, [r3, #0]
    2926:	b25b      	sxtb	r3, r3
    2928:	4699      	mov	r9, r3
    292a:	464b      	mov	r3, r9
    292c:	2b02      	cmp	r3, #2
    292e:	d000      	beq.n	2932 <pow+0x2a2>
    2930:	e753      	b.n	27da <pow+0x14a>
    2932:	e757      	b.n	27e4 <pow+0x154>
    2934:	ab06      	add	r3, sp, #24
    2936:	4698      	mov	r8, r3
    2938:	2301      	movs	r3, #1
    293a:	4642      	mov	r2, r8
    293c:	9306      	str	r3, [sp, #24]
    293e:	4b2b      	ldr	r3, [pc, #172]	; (29ec <pow+0x35c>)
    2940:	6053      	str	r3, [r2, #4]
    2942:	4643      	mov	r3, r8
    2944:	609c      	str	r4, [r3, #8]
    2946:	60dd      	str	r5, [r3, #12]
    2948:	2400      	movs	r4, #0
    294a:	9a00      	ldr	r2, [sp, #0]
    294c:	4d28      	ldr	r5, [pc, #160]	; (29f0 <pow+0x360>)
    294e:	621a      	str	r2, [r3, #32]
    2950:	611e      	str	r6, [r3, #16]
    2952:	615f      	str	r7, [r3, #20]
    2954:	619c      	str	r4, [r3, #24]
    2956:	61dd      	str	r5, [r3, #28]
    2958:	464b      	mov	r3, r9
    295a:	9400      	str	r4, [sp, #0]
    295c:	9501      	str	r5, [sp, #4]
    295e:	2b02      	cmp	r3, #2
    2960:	d000      	beq.n	2964 <pow+0x2d4>
    2962:	e77b      	b.n	285c <pow+0x1cc>
    2964:	e6e9      	b.n	273a <pow+0xaa>
    2966:	2200      	movs	r2, #0
    2968:	4641      	mov	r1, r8
    296a:	4b26      	ldr	r3, [pc, #152]	; (2a04 <pow+0x374>)
    296c:	0020      	movs	r0, r4
    296e:	618a      	str	r2, [r1, #24]
    2970:	61cb      	str	r3, [r1, #28]
    2972:	2200      	movs	r2, #0
    2974:	2300      	movs	r3, #0
    2976:	0029      	movs	r1, r5
    2978:	f000 ffb0 	bl	38dc <__aeabi_dcmplt>
    297c:	2800      	cmp	r0, #0
    297e:	d0d4      	beq.n	292a <pow+0x29a>
    2980:	2200      	movs	r2, #0
    2982:	4b1e      	ldr	r3, [pc, #120]	; (29fc <pow+0x36c>)
    2984:	0030      	movs	r0, r6
    2986:	0039      	movs	r1, r7
    2988:	f002 f854 	bl	4a34 <__aeabi_dmul>
    298c:	0004      	movs	r4, r0
    298e:	000d      	movs	r5, r1
    2990:	f000 fe7c 	bl	368c <rint>
    2994:	0002      	movs	r2, r0
    2996:	000b      	movs	r3, r1
    2998:	0020      	movs	r0, r4
    299a:	0029      	movs	r1, r5
    299c:	f000 ff98 	bl	38d0 <__aeabi_dcmpeq>
    29a0:	2800      	cmp	r0, #0
    29a2:	d1be      	bne.n	2922 <pow+0x292>
    29a4:	2200      	movs	r2, #0
    29a6:	4b13      	ldr	r3, [pc, #76]	; (29f4 <pow+0x364>)
    29a8:	e7b8      	b.n	291c <pow+0x28c>
    29aa:	2301      	movs	r3, #1
    29ac:	4642      	mov	r2, r8
    29ae:	9306      	str	r3, [sp, #24]
    29b0:	4b0e      	ldr	r3, [pc, #56]	; (29ec <pow+0x35c>)
    29b2:	6053      	str	r3, [r2, #4]
    29b4:	4643      	mov	r3, r8
    29b6:	464a      	mov	r2, r9
    29b8:	609c      	str	r4, [r3, #8]
    29ba:	60dd      	str	r5, [r3, #12]
    29bc:	621a      	str	r2, [r3, #32]
    29be:	611e      	str	r6, [r3, #16]
    29c0:	615f      	str	r7, [r3, #20]
    29c2:	2400      	movs	r4, #0
    29c4:	465b      	mov	r3, fp
    29c6:	571c      	ldrsb	r4, [r3, r4]
    29c8:	2c00      	cmp	r4, #0
    29ca:	d100      	bne.n	29ce <pow+0x33e>
    29cc:	e741      	b.n	2852 <pow+0x1c2>
    29ce:	2300      	movs	r3, #0
    29d0:	2200      	movs	r2, #0
    29d2:	0019      	movs	r1, r3
    29d4:	0010      	movs	r0, r2
    29d6:	f001 fc09 	bl	41ec <__aeabi_ddiv>
    29da:	4643      	mov	r3, r8
    29dc:	6198      	str	r0, [r3, #24]
    29de:	61d9      	str	r1, [r3, #28]
    29e0:	2c02      	cmp	r4, #2
    29e2:	d100      	bne.n	29e6 <pow+0x356>
    29e4:	e730      	b.n	2848 <pow+0x1b8>
    29e6:	e739      	b.n	285c <pow+0x1cc>
    29e8:	20000028 	.word	0x20000028
    29ec:	00005e00 	.word	0x00005e00
    29f0:	3ff00000 	.word	0x3ff00000
    29f4:	fff00000 	.word	0xfff00000
    29f8:	47efffff 	.word	0x47efffff
    29fc:	3fe00000 	.word	0x3fe00000
    2a00:	c7efffff 	.word	0xc7efffff
    2a04:	7ff00000 	.word	0x7ff00000

00002a08 <__ieee754_pow>:
    2a08:	b5f0      	push	{r4, r5, r6, r7, lr}
    2a0a:	4656      	mov	r6, sl
    2a0c:	464d      	mov	r5, r9
    2a0e:	4644      	mov	r4, r8
    2a10:	465f      	mov	r7, fp
    2a12:	b4f0      	push	{r4, r5, r6, r7}
    2a14:	001c      	movs	r4, r3
    2a16:	0013      	movs	r3, r2
    2a18:	0067      	lsls	r7, r4, #1
    2a1a:	b091      	sub	sp, #68	; 0x44
    2a1c:	087f      	lsrs	r7, r7, #1
    2a1e:	9300      	str	r3, [sp, #0]
    2a20:	9401      	str	r4, [sp, #4]
    2a22:	0006      	movs	r6, r0
    2a24:	000d      	movs	r5, r1
    2a26:	4680      	mov	r8, r0
    2a28:	4689      	mov	r9, r1
    2a2a:	46a2      	mov	sl, r4
    2a2c:	433b      	orrs	r3, r7
    2a2e:	d032      	beq.n	2a96 <__ieee754_pow+0x8e>
    2a30:	4b6e      	ldr	r3, [pc, #440]	; (2bec <__ieee754_pow+0x1e4>)
    2a32:	006c      	lsls	r4, r5, #1
    2a34:	0864      	lsrs	r4, r4, #1
    2a36:	429c      	cmp	r4, r3
    2a38:	dc29      	bgt.n	2a8e <__ieee754_pow+0x86>
    2a3a:	d026      	beq.n	2a8a <__ieee754_pow+0x82>
    2a3c:	429f      	cmp	r7, r3
    2a3e:	dc26      	bgt.n	2a8e <__ieee754_pow+0x86>
    2a40:	4b6a      	ldr	r3, [pc, #424]	; (2bec <__ieee754_pow+0x1e4>)
    2a42:	429f      	cmp	r7, r3
    2a44:	d100      	bne.n	2a48 <__ieee754_pow+0x40>
    2a46:	e089      	b.n	2b5c <__ieee754_pow+0x154>
    2a48:	2300      	movs	r3, #0
    2a4a:	469b      	mov	fp, r3
    2a4c:	464b      	mov	r3, r9
    2a4e:	2b00      	cmp	r3, #0
    2a50:	da00      	bge.n	2a54 <__ieee754_pow+0x4c>
    2a52:	e087      	b.n	2b64 <__ieee754_pow+0x15c>
    2a54:	2a00      	cmp	r2, #0
    2a56:	d12f      	bne.n	2ab8 <__ieee754_pow+0xb0>
    2a58:	4b64      	ldr	r3, [pc, #400]	; (2bec <__ieee754_pow+0x1e4>)
    2a5a:	429f      	cmp	r7, r3
    2a5c:	d100      	bne.n	2a60 <__ieee754_pow+0x58>
    2a5e:	e09f      	b.n	2ba0 <__ieee754_pow+0x198>
    2a60:	4b63      	ldr	r3, [pc, #396]	; (2bf0 <__ieee754_pow+0x1e8>)
    2a62:	429f      	cmp	r7, r3
    2a64:	d05d      	beq.n	2b22 <__ieee754_pow+0x11a>
    2a66:	2380      	movs	r3, #128	; 0x80
    2a68:	05db      	lsls	r3, r3, #23
    2a6a:	459a      	cmp	sl, r3
    2a6c:	d101      	bne.n	2a72 <__ieee754_pow+0x6a>
    2a6e:	f000 fbc1 	bl	31f4 <__ieee754_pow+0x7ec>
    2a72:	4b60      	ldr	r3, [pc, #384]	; (2bf4 <__ieee754_pow+0x1ec>)
    2a74:	459a      	cmp	sl, r3
    2a76:	d11f      	bne.n	2ab8 <__ieee754_pow+0xb0>
    2a78:	464b      	mov	r3, r9
    2a7a:	2b00      	cmp	r3, #0
    2a7c:	db1c      	blt.n	2ab8 <__ieee754_pow+0xb0>
    2a7e:	0030      	movs	r0, r6
    2a80:	0029      	movs	r1, r5
    2a82:	f000 fcf7 	bl	3474 <__ieee754_sqrt>
    2a86:	0006      	movs	r6, r0
    2a88:	e007      	b.n	2a9a <__ieee754_pow+0x92>
    2a8a:	2800      	cmp	r0, #0
    2a8c:	d00d      	beq.n	2aaa <__ieee754_pow+0xa2>
    2a8e:	4b5a      	ldr	r3, [pc, #360]	; (2bf8 <__ieee754_pow+0x1f0>)
    2a90:	18e0      	adds	r0, r4, r3
    2a92:	4330      	orrs	r0, r6
    2a94:	d10b      	bne.n	2aae <__ieee754_pow+0xa6>
    2a96:	2600      	movs	r6, #0
    2a98:	4955      	ldr	r1, [pc, #340]	; (2bf0 <__ieee754_pow+0x1e8>)
    2a9a:	0030      	movs	r0, r6
    2a9c:	b011      	add	sp, #68	; 0x44
    2a9e:	bc3c      	pop	{r2, r3, r4, r5}
    2aa0:	4690      	mov	r8, r2
    2aa2:	4699      	mov	r9, r3
    2aa4:	46a2      	mov	sl, r4
    2aa6:	46ab      	mov	fp, r5
    2aa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2aaa:	42a7      	cmp	r7, r4
    2aac:	ddc8      	ble.n	2a40 <__ieee754_pow+0x38>
    2aae:	4853      	ldr	r0, [pc, #332]	; (2bfc <__ieee754_pow+0x1f4>)
    2ab0:	f000 fde6 	bl	3680 <nan>
    2ab4:	0006      	movs	r6, r0
    2ab6:	e7f0      	b.n	2a9a <__ieee754_pow+0x92>
    2ab8:	0030      	movs	r0, r6
    2aba:	0029      	movs	r1, r5
    2abc:	f000 fdd0 	bl	3660 <fabs>
    2ac0:	4643      	mov	r3, r8
    2ac2:	2b00      	cmp	r3, #0
    2ac4:	d01d      	beq.n	2b02 <__ieee754_pow+0xfa>
    2ac6:	0feb      	lsrs	r3, r5, #31
    2ac8:	3b01      	subs	r3, #1
    2aca:	4698      	mov	r8, r3
    2acc:	465b      	mov	r3, fp
    2ace:	4642      	mov	r2, r8
    2ad0:	4313      	orrs	r3, r2
    2ad2:	d079      	beq.n	2bc8 <__ieee754_pow+0x1c0>
    2ad4:	4b4a      	ldr	r3, [pc, #296]	; (2c00 <__ieee754_pow+0x1f8>)
    2ad6:	429f      	cmp	r7, r3
    2ad8:	dc00      	bgt.n	2adc <__ieee754_pow+0xd4>
    2ada:	e09f      	b.n	2c1c <__ieee754_pow+0x214>
    2adc:	4b49      	ldr	r3, [pc, #292]	; (2c04 <__ieee754_pow+0x1fc>)
    2ade:	429f      	cmp	r7, r3
    2ae0:	dc01      	bgt.n	2ae6 <__ieee754_pow+0xde>
    2ae2:	f000 fbce 	bl	3282 <__ieee754_pow+0x87a>
    2ae6:	4b48      	ldr	r3, [pc, #288]	; (2c08 <__ieee754_pow+0x200>)
    2ae8:	429c      	cmp	r4, r3
    2aea:	dd79      	ble.n	2be0 <__ieee754_pow+0x1d8>
    2aec:	4653      	mov	r3, sl
    2aee:	2b00      	cmp	r3, #0
    2af0:	dd79      	ble.n	2be6 <__ieee754_pow+0x1de>
    2af2:	4a46      	ldr	r2, [pc, #280]	; (2c0c <__ieee754_pow+0x204>)
    2af4:	4b46      	ldr	r3, [pc, #280]	; (2c10 <__ieee754_pow+0x208>)
    2af6:	0010      	movs	r0, r2
    2af8:	0019      	movs	r1, r3
    2afa:	f001 ff9b 	bl	4a34 <__aeabi_dmul>
    2afe:	0006      	movs	r6, r0
    2b00:	e7cb      	b.n	2a9a <__ieee754_pow+0x92>
    2b02:	2c00      	cmp	r4, #0
    2b04:	d004      	beq.n	2b10 <__ieee754_pow+0x108>
    2b06:	4a3a      	ldr	r2, [pc, #232]	; (2bf0 <__ieee754_pow+0x1e8>)
    2b08:	00ab      	lsls	r3, r5, #2
    2b0a:	089b      	lsrs	r3, r3, #2
    2b0c:	4293      	cmp	r3, r2
    2b0e:	d1da      	bne.n	2ac6 <__ieee754_pow+0xbe>
    2b10:	4653      	mov	r3, sl
    2b12:	2b00      	cmp	r3, #0
    2b14:	da00      	bge.n	2b18 <__ieee754_pow+0x110>
    2b16:	e3ad      	b.n	3274 <__ieee754_pow+0x86c>
    2b18:	464b      	mov	r3, r9
    2b1a:	2b00      	cmp	r3, #0
    2b1c:	db0d      	blt.n	2b3a <__ieee754_pow+0x132>
    2b1e:	0006      	movs	r6, r0
    2b20:	e7bb      	b.n	2a9a <__ieee754_pow+0x92>
    2b22:	4653      	mov	r3, sl
    2b24:	0029      	movs	r1, r5
    2b26:	2b00      	cmp	r3, #0
    2b28:	dab7      	bge.n	2a9a <__ieee754_pow+0x92>
    2b2a:	0032      	movs	r2, r6
    2b2c:	002b      	movs	r3, r5
    2b2e:	2000      	movs	r0, #0
    2b30:	492f      	ldr	r1, [pc, #188]	; (2bf0 <__ieee754_pow+0x1e8>)
    2b32:	f001 fb5b 	bl	41ec <__aeabi_ddiv>
    2b36:	0006      	movs	r6, r0
    2b38:	e7af      	b.n	2a9a <__ieee754_pow+0x92>
    2b3a:	4b2f      	ldr	r3, [pc, #188]	; (2bf8 <__ieee754_pow+0x1f0>)
    2b3c:	469c      	mov	ip, r3
    2b3e:	465b      	mov	r3, fp
    2b40:	4464      	add	r4, ip
    2b42:	431c      	orrs	r4, r3
    2b44:	d101      	bne.n	2b4a <__ieee754_pow+0x142>
    2b46:	f000 fc2b 	bl	33a0 <__ieee754_pow+0x998>
    2b4a:	465b      	mov	r3, fp
    2b4c:	0006      	movs	r6, r0
    2b4e:	2b01      	cmp	r3, #1
    2b50:	d1a3      	bne.n	2a9a <__ieee754_pow+0x92>
    2b52:	2380      	movs	r3, #128	; 0x80
    2b54:	061b      	lsls	r3, r3, #24
    2b56:	469c      	mov	ip, r3
    2b58:	4461      	add	r1, ip
    2b5a:	e79e      	b.n	2a9a <__ieee754_pow+0x92>
    2b5c:	2a00      	cmp	r2, #0
    2b5e:	d100      	bne.n	2b62 <__ieee754_pow+0x15a>
    2b60:	e772      	b.n	2a48 <__ieee754_pow+0x40>
    2b62:	e794      	b.n	2a8e <__ieee754_pow+0x86>
    2b64:	4b2b      	ldr	r3, [pc, #172]	; (2c14 <__ieee754_pow+0x20c>)
    2b66:	429f      	cmp	r7, r3
    2b68:	dc2b      	bgt.n	2bc2 <__ieee754_pow+0x1ba>
    2b6a:	4b27      	ldr	r3, [pc, #156]	; (2c08 <__ieee754_pow+0x200>)
    2b6c:	429f      	cmp	r7, r3
    2b6e:	dc00      	bgt.n	2b72 <__ieee754_pow+0x16a>
    2b70:	e770      	b.n	2a54 <__ieee754_pow+0x4c>
    2b72:	4929      	ldr	r1, [pc, #164]	; (2c18 <__ieee754_pow+0x210>)
    2b74:	153b      	asrs	r3, r7, #20
    2b76:	468c      	mov	ip, r1
    2b78:	4463      	add	r3, ip
    2b7a:	2b14      	cmp	r3, #20
    2b7c:	dc01      	bgt.n	2b82 <__ieee754_pow+0x17a>
    2b7e:	f000 fbf2 	bl	3366 <__ieee754_pow+0x95e>
    2b82:	2134      	movs	r1, #52	; 0x34
    2b84:	1acb      	subs	r3, r1, r3
    2b86:	9900      	ldr	r1, [sp, #0]
    2b88:	40d9      	lsrs	r1, r3
    2b8a:	0008      	movs	r0, r1
    2b8c:	4098      	lsls	r0, r3
    2b8e:	4282      	cmp	r2, r0
    2b90:	d000      	beq.n	2b94 <__ieee754_pow+0x18c>
    2b92:	e75f      	b.n	2a54 <__ieee754_pow+0x4c>
    2b94:	2301      	movs	r3, #1
    2b96:	4019      	ands	r1, r3
    2b98:	3301      	adds	r3, #1
    2b9a:	1a5b      	subs	r3, r3, r1
    2b9c:	469b      	mov	fp, r3
    2b9e:	e759      	b.n	2a54 <__ieee754_pow+0x4c>
    2ba0:	4b15      	ldr	r3, [pc, #84]	; (2bf8 <__ieee754_pow+0x1f0>)
    2ba2:	18e0      	adds	r0, r4, r3
    2ba4:	4306      	orrs	r6, r0
    2ba6:	d100      	bne.n	2baa <__ieee754_pow+0x1a2>
    2ba8:	e775      	b.n	2a96 <__ieee754_pow+0x8e>
    2baa:	4b17      	ldr	r3, [pc, #92]	; (2c08 <__ieee754_pow+0x200>)
    2bac:	429c      	cmp	r4, r3
    2bae:	dc00      	bgt.n	2bb2 <__ieee754_pow+0x1aa>
    2bb0:	e351      	b.n	3256 <__ieee754_pow+0x84e>
    2bb2:	4653      	mov	r3, sl
    2bb4:	2b00      	cmp	r3, #0
    2bb6:	db16      	blt.n	2be6 <__ieee754_pow+0x1de>
    2bb8:	9b00      	ldr	r3, [sp, #0]
    2bba:	9c01      	ldr	r4, [sp, #4]
    2bbc:	001e      	movs	r6, r3
    2bbe:	0021      	movs	r1, r4
    2bc0:	e76b      	b.n	2a9a <__ieee754_pow+0x92>
    2bc2:	2302      	movs	r3, #2
    2bc4:	469b      	mov	fp, r3
    2bc6:	e745      	b.n	2a54 <__ieee754_pow+0x4c>
    2bc8:	0032      	movs	r2, r6
    2bca:	002b      	movs	r3, r5
    2bcc:	0030      	movs	r0, r6
    2bce:	0029      	movs	r1, r5
    2bd0:	f002 f9aa 	bl	4f28 <__aeabi_dsub>
    2bd4:	0002      	movs	r2, r0
    2bd6:	000b      	movs	r3, r1
    2bd8:	f001 fb08 	bl	41ec <__aeabi_ddiv>
    2bdc:	0006      	movs	r6, r0
    2bde:	e75c      	b.n	2a9a <__ieee754_pow+0x92>
    2be0:	4653      	mov	r3, sl
    2be2:	2b00      	cmp	r3, #0
    2be4:	db85      	blt.n	2af2 <__ieee754_pow+0xea>
    2be6:	2600      	movs	r6, #0
    2be8:	2100      	movs	r1, #0
    2bea:	e756      	b.n	2a9a <__ieee754_pow+0x92>
    2bec:	7ff00000 	.word	0x7ff00000
    2bf0:	3ff00000 	.word	0x3ff00000
    2bf4:	3fe00000 	.word	0x3fe00000
    2bf8:	c0100000 	.word	0xc0100000
    2bfc:	00005e04 	.word	0x00005e04
    2c00:	41e00000 	.word	0x41e00000
    2c04:	43f00000 	.word	0x43f00000
    2c08:	3fefffff 	.word	0x3fefffff
    2c0c:	8800759c 	.word	0x8800759c
    2c10:	7e37e43c 	.word	0x7e37e43c
    2c14:	433fffff 	.word	0x433fffff
    2c18:	fffffc01 	.word	0xfffffc01
    2c1c:	4be8      	ldr	r3, [pc, #928]	; (2fc0 <__ieee754_pow+0x5b8>)
    2c1e:	2200      	movs	r2, #0
    2c20:	429c      	cmp	r4, r3
    2c22:	dc06      	bgt.n	2c32 <__ieee754_pow+0x22a>
    2c24:	2200      	movs	r2, #0
    2c26:	4be7      	ldr	r3, [pc, #924]	; (2fc4 <__ieee754_pow+0x5bc>)
    2c28:	f001 ff04 	bl	4a34 <__aeabi_dmul>
    2c2c:	2235      	movs	r2, #53	; 0x35
    2c2e:	000c      	movs	r4, r1
    2c30:	4252      	negs	r2, r2
    2c32:	4de5      	ldr	r5, [pc, #916]	; (2fc8 <__ieee754_pow+0x5c0>)
    2c34:	1523      	asrs	r3, r4, #20
    2c36:	46ac      	mov	ip, r5
    2c38:	4463      	add	r3, ip
    2c3a:	4699      	mov	r9, r3
    2c3c:	0324      	lsls	r4, r4, #12
    2c3e:	4de3      	ldr	r5, [pc, #908]	; (2fcc <__ieee754_pow+0x5c4>)
    2c40:	4be3      	ldr	r3, [pc, #908]	; (2fd0 <__ieee754_pow+0x5c8>)
    2c42:	0b24      	lsrs	r4, r4, #12
    2c44:	4491      	add	r9, r2
    2c46:	4325      	orrs	r5, r4
    2c48:	429c      	cmp	r4, r3
    2c4a:	dd09      	ble.n	2c60 <__ieee754_pow+0x258>
    2c4c:	4be1      	ldr	r3, [pc, #900]	; (2fd4 <__ieee754_pow+0x5cc>)
    2c4e:	429c      	cmp	r4, r3
    2c50:	dc00      	bgt.n	2c54 <__ieee754_pow+0x24c>
    2c52:	e3a9      	b.n	33a8 <__ieee754_pow+0x9a0>
    2c54:	2301      	movs	r3, #1
    2c56:	469c      	mov	ip, r3
    2c58:	4bdf      	ldr	r3, [pc, #892]	; (2fd8 <__ieee754_pow+0x5d0>)
    2c5a:	44e1      	add	r9, ip
    2c5c:	469c      	mov	ip, r3
    2c5e:	4465      	add	r5, ip
    2c60:	2300      	movs	r3, #0
    2c62:	2400      	movs	r4, #0
    2c64:	2200      	movs	r2, #0
    2c66:	9308      	str	r3, [sp, #32]
    2c68:	9409      	str	r4, [sp, #36]	; 0x24
    2c6a:	930c      	str	r3, [sp, #48]	; 0x30
    2c6c:	940d      	str	r4, [sp, #52]	; 0x34
    2c6e:	2400      	movs	r4, #0
    2c70:	4bd6      	ldr	r3, [pc, #856]	; (2fcc <__ieee754_pow+0x5c4>)
    2c72:	9206      	str	r2, [sp, #24]
    2c74:	9307      	str	r3, [sp, #28]
    2c76:	9a06      	ldr	r2, [sp, #24]
    2c78:	9b07      	ldr	r3, [sp, #28]
    2c7a:	0029      	movs	r1, r5
    2c7c:	900a      	str	r0, [sp, #40]	; 0x28
    2c7e:	910b      	str	r1, [sp, #44]	; 0x2c
    2c80:	f002 f952 	bl	4f28 <__aeabi_dsub>
    2c84:	9a06      	ldr	r2, [sp, #24]
    2c86:	9b07      	ldr	r3, [sp, #28]
    2c88:	0006      	movs	r6, r0
    2c8a:	000f      	movs	r7, r1
    2c8c:	980a      	ldr	r0, [sp, #40]	; 0x28
    2c8e:	990b      	ldr	r1, [sp, #44]	; 0x2c
    2c90:	f000 ff80 	bl	3b94 <__aeabi_dadd>
    2c94:	0002      	movs	r2, r0
    2c96:	000b      	movs	r3, r1
    2c98:	2000      	movs	r0, #0
    2c9a:	49cc      	ldr	r1, [pc, #816]	; (2fcc <__ieee754_pow+0x5c4>)
    2c9c:	f001 faa6 	bl	41ec <__aeabi_ddiv>
    2ca0:	000a      	movs	r2, r1
    2ca2:	0001      	movs	r1, r0
    2ca4:	0013      	movs	r3, r2
    2ca6:	910e      	str	r1, [sp, #56]	; 0x38
    2ca8:	920f      	str	r2, [sp, #60]	; 0x3c
    2caa:	0002      	movs	r2, r0
    2cac:	0039      	movs	r1, r7
    2cae:	0030      	movs	r0, r6
    2cb0:	f001 fec0 	bl	4a34 <__aeabi_dmul>
    2cb4:	000a      	movs	r2, r1
    2cb6:	0001      	movs	r1, r0
    2cb8:	2080      	movs	r0, #128	; 0x80
    2cba:	9104      	str	r1, [sp, #16]
    2cbc:	9205      	str	r2, [sp, #20]
    2cbe:	0013      	movs	r3, r2
    2cc0:	2200      	movs	r2, #0
    2cc2:	2180      	movs	r1, #128	; 0x80
    2cc4:	0300      	lsls	r0, r0, #12
    2cc6:	4684      	mov	ip, r0
    2cc8:	9202      	str	r2, [sp, #8]
    2cca:	9303      	str	r3, [sp, #12]
    2ccc:	2200      	movs	r2, #0
    2cce:	0589      	lsls	r1, r1, #22
    2cd0:	106d      	asrs	r5, r5, #1
    2cd2:	430d      	orrs	r5, r1
    2cd4:	4465      	add	r5, ip
    2cd6:	192b      	adds	r3, r5, r4
    2cd8:	9802      	ldr	r0, [sp, #8]
    2cda:	9903      	ldr	r1, [sp, #12]
    2cdc:	0014      	movs	r4, r2
    2cde:	001d      	movs	r5, r3
    2ce0:	f001 fea8 	bl	4a34 <__aeabi_dmul>
    2ce4:	0002      	movs	r2, r0
    2ce6:	000b      	movs	r3, r1
    2ce8:	0030      	movs	r0, r6
    2cea:	0039      	movs	r1, r7
    2cec:	f002 f91c 	bl	4f28 <__aeabi_dsub>
    2cf0:	9a06      	ldr	r2, [sp, #24]
    2cf2:	9b07      	ldr	r3, [sp, #28]
    2cf4:	0006      	movs	r6, r0
    2cf6:	000f      	movs	r7, r1
    2cf8:	0020      	movs	r0, r4
    2cfa:	0029      	movs	r1, r5
    2cfc:	f002 f914 	bl	4f28 <__aeabi_dsub>
    2d00:	0002      	movs	r2, r0
    2d02:	000b      	movs	r3, r1
    2d04:	980a      	ldr	r0, [sp, #40]	; 0x28
    2d06:	990b      	ldr	r1, [sp, #44]	; 0x2c
    2d08:	f002 f90e 	bl	4f28 <__aeabi_dsub>
    2d0c:	9a02      	ldr	r2, [sp, #8]
    2d0e:	9b03      	ldr	r3, [sp, #12]
    2d10:	f001 fe90 	bl	4a34 <__aeabi_dmul>
    2d14:	0002      	movs	r2, r0
    2d16:	000b      	movs	r3, r1
    2d18:	0030      	movs	r0, r6
    2d1a:	0039      	movs	r1, r7
    2d1c:	f002 f904 	bl	4f28 <__aeabi_dsub>
    2d20:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    2d22:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    2d24:	f001 fe86 	bl	4a34 <__aeabi_dmul>
    2d28:	9d04      	ldr	r5, [sp, #16]
    2d2a:	9e05      	ldr	r6, [sp, #20]
    2d2c:	9006      	str	r0, [sp, #24]
    2d2e:	9107      	str	r1, [sp, #28]
    2d30:	002a      	movs	r2, r5
    2d32:	0033      	movs	r3, r6
    2d34:	0028      	movs	r0, r5
    2d36:	0031      	movs	r1, r6
    2d38:	f001 fe7c 	bl	4a34 <__aeabi_dmul>
    2d3c:	0006      	movs	r6, r0
    2d3e:	000f      	movs	r7, r1
    2d40:	4aa6      	ldr	r2, [pc, #664]	; (2fdc <__ieee754_pow+0x5d4>)
    2d42:	4ba7      	ldr	r3, [pc, #668]	; (2fe0 <__ieee754_pow+0x5d8>)
    2d44:	f001 fe76 	bl	4a34 <__aeabi_dmul>
    2d48:	4aa6      	ldr	r2, [pc, #664]	; (2fe4 <__ieee754_pow+0x5dc>)
    2d4a:	4ba7      	ldr	r3, [pc, #668]	; (2fe8 <__ieee754_pow+0x5e0>)
    2d4c:	f000 ff22 	bl	3b94 <__aeabi_dadd>
    2d50:	0032      	movs	r2, r6
    2d52:	003b      	movs	r3, r7
    2d54:	f001 fe6e 	bl	4a34 <__aeabi_dmul>
    2d58:	4aa4      	ldr	r2, [pc, #656]	; (2fec <__ieee754_pow+0x5e4>)
    2d5a:	4ba5      	ldr	r3, [pc, #660]	; (2ff0 <__ieee754_pow+0x5e8>)
    2d5c:	f000 ff1a 	bl	3b94 <__aeabi_dadd>
    2d60:	0032      	movs	r2, r6
    2d62:	003b      	movs	r3, r7
    2d64:	f001 fe66 	bl	4a34 <__aeabi_dmul>
    2d68:	4aa2      	ldr	r2, [pc, #648]	; (2ff4 <__ieee754_pow+0x5ec>)
    2d6a:	4ba3      	ldr	r3, [pc, #652]	; (2ff8 <__ieee754_pow+0x5f0>)
    2d6c:	f000 ff12 	bl	3b94 <__aeabi_dadd>
    2d70:	0032      	movs	r2, r6
    2d72:	003b      	movs	r3, r7
    2d74:	f001 fe5e 	bl	4a34 <__aeabi_dmul>
    2d78:	4aa0      	ldr	r2, [pc, #640]	; (2ffc <__ieee754_pow+0x5f4>)
    2d7a:	4ba1      	ldr	r3, [pc, #644]	; (3000 <__ieee754_pow+0x5f8>)
    2d7c:	f000 ff0a 	bl	3b94 <__aeabi_dadd>
    2d80:	0032      	movs	r2, r6
    2d82:	003b      	movs	r3, r7
    2d84:	f001 fe56 	bl	4a34 <__aeabi_dmul>
    2d88:	4a9e      	ldr	r2, [pc, #632]	; (3004 <__ieee754_pow+0x5fc>)
    2d8a:	4b9f      	ldr	r3, [pc, #636]	; (3008 <__ieee754_pow+0x600>)
    2d8c:	f000 ff02 	bl	3b94 <__aeabi_dadd>
    2d90:	0032      	movs	r2, r6
    2d92:	0004      	movs	r4, r0
    2d94:	000d      	movs	r5, r1
    2d96:	003b      	movs	r3, r7
    2d98:	0030      	movs	r0, r6
    2d9a:	0039      	movs	r1, r7
    2d9c:	f001 fe4a 	bl	4a34 <__aeabi_dmul>
    2da0:	0002      	movs	r2, r0
    2da2:	000b      	movs	r3, r1
    2da4:	0020      	movs	r0, r4
    2da6:	0029      	movs	r1, r5
    2da8:	f001 fe44 	bl	4a34 <__aeabi_dmul>
    2dac:	9e02      	ldr	r6, [sp, #8]
    2dae:	9f03      	ldr	r7, [sp, #12]
    2db0:	0004      	movs	r4, r0
    2db2:	000d      	movs	r5, r1
    2db4:	9804      	ldr	r0, [sp, #16]
    2db6:	9905      	ldr	r1, [sp, #20]
    2db8:	0032      	movs	r2, r6
    2dba:	003b      	movs	r3, r7
    2dbc:	f000 feea 	bl	3b94 <__aeabi_dadd>
    2dc0:	9a06      	ldr	r2, [sp, #24]
    2dc2:	9b07      	ldr	r3, [sp, #28]
    2dc4:	f001 fe36 	bl	4a34 <__aeabi_dmul>
    2dc8:	0022      	movs	r2, r4
    2dca:	002b      	movs	r3, r5
    2dcc:	f000 fee2 	bl	3b94 <__aeabi_dadd>
    2dd0:	0032      	movs	r2, r6
    2dd2:	900a      	str	r0, [sp, #40]	; 0x28
    2dd4:	910b      	str	r1, [sp, #44]	; 0x2c
    2dd6:	003b      	movs	r3, r7
    2dd8:	0030      	movs	r0, r6
    2dda:	0039      	movs	r1, r7
    2ddc:	9602      	str	r6, [sp, #8]
    2dde:	9703      	str	r7, [sp, #12]
    2de0:	f001 fe28 	bl	4a34 <__aeabi_dmul>
    2de4:	2200      	movs	r2, #0
    2de6:	4b89      	ldr	r3, [pc, #548]	; (300c <__ieee754_pow+0x604>)
    2de8:	0004      	movs	r4, r0
    2dea:	000d      	movs	r5, r1
    2dec:	f000 fed2 	bl	3b94 <__aeabi_dadd>
    2df0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    2df2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    2df4:	f000 fece 	bl	3b94 <__aeabi_dadd>
    2df8:	2600      	movs	r6, #0
    2dfa:	000f      	movs	r7, r1
    2dfc:	0032      	movs	r2, r6
    2dfe:	000b      	movs	r3, r1
    2e00:	9802      	ldr	r0, [sp, #8]
    2e02:	9903      	ldr	r1, [sp, #12]
    2e04:	f001 fe16 	bl	4a34 <__aeabi_dmul>
    2e08:	2200      	movs	r2, #0
    2e0a:	9002      	str	r0, [sp, #8]
    2e0c:	9103      	str	r1, [sp, #12]
    2e0e:	4b7f      	ldr	r3, [pc, #508]	; (300c <__ieee754_pow+0x604>)
    2e10:	0030      	movs	r0, r6
    2e12:	0039      	movs	r1, r7
    2e14:	f002 f888 	bl	4f28 <__aeabi_dsub>
    2e18:	0022      	movs	r2, r4
    2e1a:	002b      	movs	r3, r5
    2e1c:	f002 f884 	bl	4f28 <__aeabi_dsub>
    2e20:	0002      	movs	r2, r0
    2e22:	000b      	movs	r3, r1
    2e24:	980a      	ldr	r0, [sp, #40]	; 0x28
    2e26:	990b      	ldr	r1, [sp, #44]	; 0x2c
    2e28:	f002 f87e 	bl	4f28 <__aeabi_dsub>
    2e2c:	9a04      	ldr	r2, [sp, #16]
    2e2e:	9b05      	ldr	r3, [sp, #20]
    2e30:	f001 fe00 	bl	4a34 <__aeabi_dmul>
    2e34:	0032      	movs	r2, r6
    2e36:	0004      	movs	r4, r0
    2e38:	000d      	movs	r5, r1
    2e3a:	9806      	ldr	r0, [sp, #24]
    2e3c:	9907      	ldr	r1, [sp, #28]
    2e3e:	003b      	movs	r3, r7
    2e40:	f001 fdf8 	bl	4a34 <__aeabi_dmul>
    2e44:	0002      	movs	r2, r0
    2e46:	000b      	movs	r3, r1
    2e48:	0020      	movs	r0, r4
    2e4a:	0029      	movs	r1, r5
    2e4c:	f000 fea2 	bl	3b94 <__aeabi_dadd>
    2e50:	0004      	movs	r4, r0
    2e52:	000d      	movs	r5, r1
    2e54:	0002      	movs	r2, r0
    2e56:	000b      	movs	r3, r1
    2e58:	9802      	ldr	r0, [sp, #8]
    2e5a:	9903      	ldr	r1, [sp, #12]
    2e5c:	f000 fe9a 	bl	3b94 <__aeabi_dadd>
    2e60:	2600      	movs	r6, #0
    2e62:	22e0      	movs	r2, #224	; 0xe0
    2e64:	4b6a      	ldr	r3, [pc, #424]	; (3010 <__ieee754_pow+0x608>)
    2e66:	0612      	lsls	r2, r2, #24
    2e68:	0030      	movs	r0, r6
    2e6a:	000f      	movs	r7, r1
    2e6c:	f001 fde2 	bl	4a34 <__aeabi_dmul>
    2e70:	9a02      	ldr	r2, [sp, #8]
    2e72:	9b03      	ldr	r3, [sp, #12]
    2e74:	9004      	str	r0, [sp, #16]
    2e76:	9105      	str	r1, [sp, #20]
    2e78:	0030      	movs	r0, r6
    2e7a:	0039      	movs	r1, r7
    2e7c:	f002 f854 	bl	4f28 <__aeabi_dsub>
    2e80:	0002      	movs	r2, r0
    2e82:	000b      	movs	r3, r1
    2e84:	0020      	movs	r0, r4
    2e86:	0029      	movs	r1, r5
    2e88:	f002 f84e 	bl	4f28 <__aeabi_dsub>
    2e8c:	4a61      	ldr	r2, [pc, #388]	; (3014 <__ieee754_pow+0x60c>)
    2e8e:	4b60      	ldr	r3, [pc, #384]	; (3010 <__ieee754_pow+0x608>)
    2e90:	f001 fdd0 	bl	4a34 <__aeabi_dmul>
    2e94:	4a60      	ldr	r2, [pc, #384]	; (3018 <__ieee754_pow+0x610>)
    2e96:	0004      	movs	r4, r0
    2e98:	000d      	movs	r5, r1
    2e9a:	4b60      	ldr	r3, [pc, #384]	; (301c <__ieee754_pow+0x614>)
    2e9c:	0030      	movs	r0, r6
    2e9e:	0039      	movs	r1, r7
    2ea0:	f001 fdc8 	bl	4a34 <__aeabi_dmul>
    2ea4:	0002      	movs	r2, r0
    2ea6:	000b      	movs	r3, r1
    2ea8:	0020      	movs	r0, r4
    2eaa:	0029      	movs	r1, r5
    2eac:	f000 fe72 	bl	3b94 <__aeabi_dadd>
    2eb0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    2eb2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    2eb4:	f000 fe6e 	bl	3b94 <__aeabi_dadd>
    2eb8:	0006      	movs	r6, r0
    2eba:	4648      	mov	r0, r9
    2ebc:	000f      	movs	r7, r1
    2ebe:	f002 fbdd 	bl	567c <__aeabi_i2d>
    2ec2:	0004      	movs	r4, r0
    2ec4:	000d      	movs	r5, r1
    2ec6:	9804      	ldr	r0, [sp, #16]
    2ec8:	9905      	ldr	r1, [sp, #20]
    2eca:	0032      	movs	r2, r6
    2ecc:	003b      	movs	r3, r7
    2ece:	f000 fe61 	bl	3b94 <__aeabi_dadd>
    2ed2:	9a08      	ldr	r2, [sp, #32]
    2ed4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2ed6:	f000 fe5d 	bl	3b94 <__aeabi_dadd>
    2eda:	0022      	movs	r2, r4
    2edc:	002b      	movs	r3, r5
    2ede:	f000 fe59 	bl	3b94 <__aeabi_dadd>
    2ee2:	2000      	movs	r0, #0
    2ee4:	0022      	movs	r2, r4
    2ee6:	002b      	movs	r3, r5
    2ee8:	9002      	str	r0, [sp, #8]
    2eea:	9103      	str	r1, [sp, #12]
    2eec:	f002 f81c 	bl	4f28 <__aeabi_dsub>
    2ef0:	9a08      	ldr	r2, [sp, #32]
    2ef2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2ef4:	f002 f818 	bl	4f28 <__aeabi_dsub>
    2ef8:	9a04      	ldr	r2, [sp, #16]
    2efa:	9b05      	ldr	r3, [sp, #20]
    2efc:	f002 f814 	bl	4f28 <__aeabi_dsub>
    2f00:	0002      	movs	r2, r0
    2f02:	000b      	movs	r3, r1
    2f04:	0030      	movs	r0, r6
    2f06:	0039      	movs	r1, r7
    2f08:	f002 f80e 	bl	4f28 <__aeabi_dsub>
    2f0c:	9004      	str	r0, [sp, #16]
    2f0e:	9105      	str	r1, [sp, #20]
    2f10:	465b      	mov	r3, fp
    2f12:	4642      	mov	r2, r8
    2f14:	3b01      	subs	r3, #1
    2f16:	4313      	orrs	r3, r2
    2f18:	d100      	bne.n	2f1c <__ieee754_pow+0x514>
    2f1a:	e197      	b.n	324c <__ieee754_pow+0x844>
    2f1c:	2300      	movs	r3, #0
    2f1e:	4c2b      	ldr	r4, [pc, #172]	; (2fcc <__ieee754_pow+0x5c4>)
    2f20:	9306      	str	r3, [sp, #24]
    2f22:	9407      	str	r4, [sp, #28]
    2f24:	9800      	ldr	r0, [sp, #0]
    2f26:	9901      	ldr	r1, [sp, #4]
    2f28:	2600      	movs	r6, #0
    2f2a:	000b      	movs	r3, r1
    2f2c:	0032      	movs	r2, r6
    2f2e:	000f      	movs	r7, r1
    2f30:	f001 fffa 	bl	4f28 <__aeabi_dsub>
    2f34:	9a02      	ldr	r2, [sp, #8]
    2f36:	9b03      	ldr	r3, [sp, #12]
    2f38:	f001 fd7c 	bl	4a34 <__aeabi_dmul>
    2f3c:	9a00      	ldr	r2, [sp, #0]
    2f3e:	9b01      	ldr	r3, [sp, #4]
    2f40:	0004      	movs	r4, r0
    2f42:	000d      	movs	r5, r1
    2f44:	9804      	ldr	r0, [sp, #16]
    2f46:	9905      	ldr	r1, [sp, #20]
    2f48:	f001 fd74 	bl	4a34 <__aeabi_dmul>
    2f4c:	0002      	movs	r2, r0
    2f4e:	000b      	movs	r3, r1
    2f50:	0020      	movs	r0, r4
    2f52:	0029      	movs	r1, r5
    2f54:	f000 fe1e 	bl	3b94 <__aeabi_dadd>
    2f58:	0004      	movs	r4, r0
    2f5a:	000d      	movs	r5, r1
    2f5c:	9802      	ldr	r0, [sp, #8]
    2f5e:	9903      	ldr	r1, [sp, #12]
    2f60:	003b      	movs	r3, r7
    2f62:	0032      	movs	r2, r6
    2f64:	9404      	str	r4, [sp, #16]
    2f66:	9505      	str	r5, [sp, #20]
    2f68:	f001 fd64 	bl	4a34 <__aeabi_dmul>
    2f6c:	9000      	str	r0, [sp, #0]
    2f6e:	9101      	str	r1, [sp, #4]
    2f70:	000b      	movs	r3, r1
    2f72:	0002      	movs	r2, r0
    2f74:	0029      	movs	r1, r5
    2f76:	0020      	movs	r0, r4
    2f78:	f000 fe0c 	bl	3b94 <__aeabi_dadd>
    2f7c:	4b28      	ldr	r3, [pc, #160]	; (3020 <__ieee754_pow+0x618>)
    2f7e:	4681      	mov	r9, r0
    2f80:	1e0f      	subs	r7, r1, #0
    2f82:	468a      	mov	sl, r1
    2f84:	429f      	cmp	r7, r3
    2f86:	dc00      	bgt.n	2f8a <__ieee754_pow+0x582>
    2f88:	e13c      	b.n	3204 <__ieee754_pow+0x7fc>
    2f8a:	4b26      	ldr	r3, [pc, #152]	; (3024 <__ieee754_pow+0x61c>)
    2f8c:	18cb      	adds	r3, r1, r3
    2f8e:	4303      	orrs	r3, r0
    2f90:	d000      	beq.n	2f94 <__ieee754_pow+0x58c>
    2f92:	e1db      	b.n	334c <__ieee754_pow+0x944>
    2f94:	9804      	ldr	r0, [sp, #16]
    2f96:	9905      	ldr	r1, [sp, #20]
    2f98:	4a23      	ldr	r2, [pc, #140]	; (3028 <__ieee754_pow+0x620>)
    2f9a:	4b24      	ldr	r3, [pc, #144]	; (302c <__ieee754_pow+0x624>)
    2f9c:	f000 fdfa 	bl	3b94 <__aeabi_dadd>
    2fa0:	9a00      	ldr	r2, [sp, #0]
    2fa2:	9b01      	ldr	r3, [sp, #4]
    2fa4:	0004      	movs	r4, r0
    2fa6:	000d      	movs	r5, r1
    2fa8:	4648      	mov	r0, r9
    2faa:	0039      	movs	r1, r7
    2fac:	f001 ffbc 	bl	4f28 <__aeabi_dsub>
    2fb0:	0002      	movs	r2, r0
    2fb2:	000b      	movs	r3, r1
    2fb4:	0020      	movs	r0, r4
    2fb6:	0029      	movs	r1, r5
    2fb8:	f000 fca4 	bl	3904 <__aeabi_dcmpgt>
    2fbc:	003e      	movs	r6, r7
    2fbe:	e037      	b.n	3030 <__ieee754_pow+0x628>
    2fc0:	000fffff 	.word	0x000fffff
    2fc4:	43400000 	.word	0x43400000
    2fc8:	fffffc01 	.word	0xfffffc01
    2fcc:	3ff00000 	.word	0x3ff00000
    2fd0:	0003988e 	.word	0x0003988e
    2fd4:	000bb679 	.word	0x000bb679
    2fd8:	fff00000 	.word	0xfff00000
    2fdc:	4a454eef 	.word	0x4a454eef
    2fe0:	3fca7e28 	.word	0x3fca7e28
    2fe4:	93c9db65 	.word	0x93c9db65
    2fe8:	3fcd864a 	.word	0x3fcd864a
    2fec:	a91d4101 	.word	0xa91d4101
    2ff0:	3fd17460 	.word	0x3fd17460
    2ff4:	518f264d 	.word	0x518f264d
    2ff8:	3fd55555 	.word	0x3fd55555
    2ffc:	db6fabff 	.word	0xdb6fabff
    3000:	3fdb6db6 	.word	0x3fdb6db6
    3004:	33333303 	.word	0x33333303
    3008:	3fe33333 	.word	0x3fe33333
    300c:	40080000 	.word	0x40080000
    3010:	3feec709 	.word	0x3feec709
    3014:	dc3a03fd 	.word	0xdc3a03fd
    3018:	145b01f5 	.word	0x145b01f5
    301c:	be3e2fe0 	.word	0xbe3e2fe0
    3020:	408fffff 	.word	0x408fffff
    3024:	bf700000 	.word	0xbf700000
    3028:	652b82fe 	.word	0x652b82fe
    302c:	3c971547 	.word	0x3c971547
    3030:	2800      	cmp	r0, #0
    3032:	d000      	beq.n	3036 <__ieee754_pow+0x62e>
    3034:	e18a      	b.n	334c <__ieee754_pow+0x944>
    3036:	2280      	movs	r2, #128	; 0x80
    3038:	4be7      	ldr	r3, [pc, #924]	; (33d8 <__ieee754_pow+0x9d0>)
    303a:	0352      	lsls	r2, r2, #13
    303c:	469c      	mov	ip, r3
    303e:	0013      	movs	r3, r2
    3040:	1536      	asrs	r6, r6, #20
    3042:	4466      	add	r6, ip
    3044:	4133      	asrs	r3, r6
    3046:	49e5      	ldr	r1, [pc, #916]	; (33dc <__ieee754_pow+0x9d4>)
    3048:	19db      	adds	r3, r3, r7
    304a:	005e      	lsls	r6, r3, #1
    304c:	001c      	movs	r4, r3
    304e:	031b      	lsls	r3, r3, #12
    3050:	468c      	mov	ip, r1
    3052:	0b1b      	lsrs	r3, r3, #12
    3054:	4313      	orrs	r3, r2
    3056:	2214      	movs	r2, #20
    3058:	0d76      	lsrs	r6, r6, #21
    305a:	4fe1      	ldr	r7, [pc, #900]	; (33e0 <__ieee754_pow+0x9d8>)
    305c:	4466      	add	r6, ip
    305e:	4137      	asrs	r7, r6
    3060:	1b96      	subs	r6, r2, r6
    3062:	4133      	asrs	r3, r6
    3064:	4698      	mov	r8, r3
    3066:	4653      	mov	r3, sl
    3068:	43bc      	bics	r4, r7
    306a:	2000      	movs	r0, #0
    306c:	0021      	movs	r1, r4
    306e:	2b00      	cmp	r3, #0
    3070:	da00      	bge.n	3074 <__ieee754_pow+0x66c>
    3072:	e1a9      	b.n	33c8 <__ieee754_pow+0x9c0>
    3074:	0002      	movs	r2, r0
    3076:	000b      	movs	r3, r1
    3078:	9800      	ldr	r0, [sp, #0]
    307a:	9901      	ldr	r1, [sp, #4]
    307c:	f001 ff54 	bl	4f28 <__aeabi_dsub>
    3080:	000b      	movs	r3, r1
    3082:	9000      	str	r0, [sp, #0]
    3084:	9101      	str	r1, [sp, #4]
    3086:	0002      	movs	r2, r0
    3088:	9804      	ldr	r0, [sp, #16]
    308a:	9905      	ldr	r1, [sp, #20]
    308c:	f000 fd82 	bl	3b94 <__aeabi_dadd>
    3090:	4643      	mov	r3, r8
    3092:	051b      	lsls	r3, r3, #20
    3094:	4699      	mov	r9, r3
    3096:	2000      	movs	r0, #0
    3098:	2200      	movs	r2, #0
    309a:	4bd2      	ldr	r3, [pc, #840]	; (33e4 <__ieee754_pow+0x9dc>)
    309c:	0006      	movs	r6, r0
    309e:	000f      	movs	r7, r1
    30a0:	f001 fcc8 	bl	4a34 <__aeabi_dmul>
    30a4:	9a00      	ldr	r2, [sp, #0]
    30a6:	9b01      	ldr	r3, [sp, #4]
    30a8:	9002      	str	r0, [sp, #8]
    30aa:	9103      	str	r1, [sp, #12]
    30ac:	0030      	movs	r0, r6
    30ae:	0039      	movs	r1, r7
    30b0:	f001 ff3a 	bl	4f28 <__aeabi_dsub>
    30b4:	0002      	movs	r2, r0
    30b6:	000b      	movs	r3, r1
    30b8:	9804      	ldr	r0, [sp, #16]
    30ba:	9905      	ldr	r1, [sp, #20]
    30bc:	f001 ff34 	bl	4f28 <__aeabi_dsub>
    30c0:	4ac9      	ldr	r2, [pc, #804]	; (33e8 <__ieee754_pow+0x9e0>)
    30c2:	4bca      	ldr	r3, [pc, #808]	; (33ec <__ieee754_pow+0x9e4>)
    30c4:	f001 fcb6 	bl	4a34 <__aeabi_dmul>
    30c8:	4ac9      	ldr	r2, [pc, #804]	; (33f0 <__ieee754_pow+0x9e8>)
    30ca:	0004      	movs	r4, r0
    30cc:	000d      	movs	r5, r1
    30ce:	4bc9      	ldr	r3, [pc, #804]	; (33f4 <__ieee754_pow+0x9ec>)
    30d0:	0030      	movs	r0, r6
    30d2:	0039      	movs	r1, r7
    30d4:	f001 fcae 	bl	4a34 <__aeabi_dmul>
    30d8:	0002      	movs	r2, r0
    30da:	000b      	movs	r3, r1
    30dc:	0020      	movs	r0, r4
    30de:	0029      	movs	r1, r5
    30e0:	f000 fd58 	bl	3b94 <__aeabi_dadd>
    30e4:	0004      	movs	r4, r0
    30e6:	000d      	movs	r5, r1
    30e8:	0002      	movs	r2, r0
    30ea:	000b      	movs	r3, r1
    30ec:	9802      	ldr	r0, [sp, #8]
    30ee:	9903      	ldr	r1, [sp, #12]
    30f0:	f000 fd50 	bl	3b94 <__aeabi_dadd>
    30f4:	9a02      	ldr	r2, [sp, #8]
    30f6:	9b03      	ldr	r3, [sp, #12]
    30f8:	0006      	movs	r6, r0
    30fa:	000f      	movs	r7, r1
    30fc:	f001 ff14 	bl	4f28 <__aeabi_dsub>
    3100:	0002      	movs	r2, r0
    3102:	000b      	movs	r3, r1
    3104:	0020      	movs	r0, r4
    3106:	0029      	movs	r1, r5
    3108:	f001 ff0e 	bl	4f28 <__aeabi_dsub>
    310c:	0032      	movs	r2, r6
    310e:	9000      	str	r0, [sp, #0]
    3110:	9101      	str	r1, [sp, #4]
    3112:	003b      	movs	r3, r7
    3114:	0030      	movs	r0, r6
    3116:	0039      	movs	r1, r7
    3118:	f001 fc8c 	bl	4a34 <__aeabi_dmul>
    311c:	0004      	movs	r4, r0
    311e:	000d      	movs	r5, r1
    3120:	4ab5      	ldr	r2, [pc, #724]	; (33f8 <__ieee754_pow+0x9f0>)
    3122:	4bb6      	ldr	r3, [pc, #728]	; (33fc <__ieee754_pow+0x9f4>)
    3124:	f001 fc86 	bl	4a34 <__aeabi_dmul>
    3128:	4ab5      	ldr	r2, [pc, #724]	; (3400 <__ieee754_pow+0x9f8>)
    312a:	4bb6      	ldr	r3, [pc, #728]	; (3404 <__ieee754_pow+0x9fc>)
    312c:	f001 fefc 	bl	4f28 <__aeabi_dsub>
    3130:	0022      	movs	r2, r4
    3132:	002b      	movs	r3, r5
    3134:	f001 fc7e 	bl	4a34 <__aeabi_dmul>
    3138:	4ab3      	ldr	r2, [pc, #716]	; (3408 <__ieee754_pow+0xa00>)
    313a:	4bb4      	ldr	r3, [pc, #720]	; (340c <__ieee754_pow+0xa04>)
    313c:	f000 fd2a 	bl	3b94 <__aeabi_dadd>
    3140:	0022      	movs	r2, r4
    3142:	002b      	movs	r3, r5
    3144:	f001 fc76 	bl	4a34 <__aeabi_dmul>
    3148:	4ab1      	ldr	r2, [pc, #708]	; (3410 <__ieee754_pow+0xa08>)
    314a:	4bb2      	ldr	r3, [pc, #712]	; (3414 <__ieee754_pow+0xa0c>)
    314c:	f001 feec 	bl	4f28 <__aeabi_dsub>
    3150:	0022      	movs	r2, r4
    3152:	002b      	movs	r3, r5
    3154:	f001 fc6e 	bl	4a34 <__aeabi_dmul>
    3158:	4aaf      	ldr	r2, [pc, #700]	; (3418 <__ieee754_pow+0xa10>)
    315a:	4bb0      	ldr	r3, [pc, #704]	; (341c <__ieee754_pow+0xa14>)
    315c:	f000 fd1a 	bl	3b94 <__aeabi_dadd>
    3160:	0022      	movs	r2, r4
    3162:	002b      	movs	r3, r5
    3164:	f001 fc66 	bl	4a34 <__aeabi_dmul>
    3168:	0002      	movs	r2, r0
    316a:	000b      	movs	r3, r1
    316c:	0030      	movs	r0, r6
    316e:	0039      	movs	r1, r7
    3170:	f001 feda 	bl	4f28 <__aeabi_dsub>
    3174:	0004      	movs	r4, r0
    3176:	000d      	movs	r5, r1
    3178:	0002      	movs	r2, r0
    317a:	000b      	movs	r3, r1
    317c:	0030      	movs	r0, r6
    317e:	0039      	movs	r1, r7
    3180:	f001 fc58 	bl	4a34 <__aeabi_dmul>
    3184:	2380      	movs	r3, #128	; 0x80
    3186:	9002      	str	r0, [sp, #8]
    3188:	9103      	str	r1, [sp, #12]
    318a:	2200      	movs	r2, #0
    318c:	05db      	lsls	r3, r3, #23
    318e:	0020      	movs	r0, r4
    3190:	0029      	movs	r1, r5
    3192:	f001 fec9 	bl	4f28 <__aeabi_dsub>
    3196:	0002      	movs	r2, r0
    3198:	000b      	movs	r3, r1
    319a:	9802      	ldr	r0, [sp, #8]
    319c:	9903      	ldr	r1, [sp, #12]
    319e:	f001 f825 	bl	41ec <__aeabi_ddiv>
    31a2:	9a00      	ldr	r2, [sp, #0]
    31a4:	9b01      	ldr	r3, [sp, #4]
    31a6:	0004      	movs	r4, r0
    31a8:	000d      	movs	r5, r1
    31aa:	0030      	movs	r0, r6
    31ac:	0039      	movs	r1, r7
    31ae:	f001 fc41 	bl	4a34 <__aeabi_dmul>
    31b2:	9a00      	ldr	r2, [sp, #0]
    31b4:	9b01      	ldr	r3, [sp, #4]
    31b6:	f000 fced 	bl	3b94 <__aeabi_dadd>
    31ba:	0002      	movs	r2, r0
    31bc:	000b      	movs	r3, r1
    31be:	0020      	movs	r0, r4
    31c0:	0029      	movs	r1, r5
    31c2:	f001 feb1 	bl	4f28 <__aeabi_dsub>
    31c6:	0032      	movs	r2, r6
    31c8:	003b      	movs	r3, r7
    31ca:	f001 fead 	bl	4f28 <__aeabi_dsub>
    31ce:	0002      	movs	r2, r0
    31d0:	000b      	movs	r3, r1
    31d2:	2000      	movs	r0, #0
    31d4:	4992      	ldr	r1, [pc, #584]	; (3420 <__ieee754_pow+0xa18>)
    31d6:	f001 fea7 	bl	4f28 <__aeabi_dsub>
    31da:	464b      	mov	r3, r9
    31dc:	185b      	adds	r3, r3, r1
    31de:	151a      	asrs	r2, r3, #20
    31e0:	2a00      	cmp	r2, #0
    31e2:	dc00      	bgt.n	31e6 <__ieee754_pow+0x7de>
    31e4:	e0f4      	b.n	33d0 <__ieee754_pow+0x9c8>
    31e6:	0019      	movs	r1, r3
    31e8:	9a06      	ldr	r2, [sp, #24]
    31ea:	9b07      	ldr	r3, [sp, #28]
    31ec:	f001 fc22 	bl	4a34 <__aeabi_dmul>
    31f0:	0006      	movs	r6, r0
    31f2:	e452      	b.n	2a9a <__ieee754_pow+0x92>
    31f4:	0032      	movs	r2, r6
    31f6:	0030      	movs	r0, r6
    31f8:	002b      	movs	r3, r5
    31fa:	0029      	movs	r1, r5
    31fc:	f001 fc1a 	bl	4a34 <__aeabi_dmul>
    3200:	0006      	movs	r6, r0
    3202:	e44a      	b.n	2a9a <__ieee754_pow+0x92>
    3204:	4b87      	ldr	r3, [pc, #540]	; (3424 <__ieee754_pow+0xa1c>)
    3206:	004e      	lsls	r6, r1, #1
    3208:	0876      	lsrs	r6, r6, #1
    320a:	429e      	cmp	r6, r3
    320c:	dc00      	bgt.n	3210 <__ieee754_pow+0x808>
    320e:	e0bf      	b.n	3390 <__ieee754_pow+0x988>
    3210:	4b85      	ldr	r3, [pc, #532]	; (3428 <__ieee754_pow+0xa20>)
    3212:	18cb      	adds	r3, r1, r3
    3214:	4303      	orrs	r3, r0
    3216:	d10c      	bne.n	3232 <__ieee754_pow+0x82a>
    3218:	9a00      	ldr	r2, [sp, #0]
    321a:	9b01      	ldr	r3, [sp, #4]
    321c:	f001 fe84 	bl	4f28 <__aeabi_dsub>
    3220:	0002      	movs	r2, r0
    3222:	000b      	movs	r3, r1
    3224:	9804      	ldr	r0, [sp, #16]
    3226:	9905      	ldr	r1, [sp, #20]
    3228:	f000 fb62 	bl	38f0 <__aeabi_dcmple>
    322c:	2800      	cmp	r0, #0
    322e:	d100      	bne.n	3232 <__ieee754_pow+0x82a>
    3230:	e701      	b.n	3036 <__ieee754_pow+0x62e>
    3232:	9806      	ldr	r0, [sp, #24]
    3234:	9907      	ldr	r1, [sp, #28]
    3236:	4a7d      	ldr	r2, [pc, #500]	; (342c <__ieee754_pow+0xa24>)
    3238:	4b7d      	ldr	r3, [pc, #500]	; (3430 <__ieee754_pow+0xa28>)
    323a:	f001 fbfb 	bl	4a34 <__aeabi_dmul>
    323e:	4a7b      	ldr	r2, [pc, #492]	; (342c <__ieee754_pow+0xa24>)
    3240:	4b7b      	ldr	r3, [pc, #492]	; (3430 <__ieee754_pow+0xa28>)
    3242:	f001 fbf7 	bl	4a34 <__aeabi_dmul>
    3246:	0006      	movs	r6, r0
    3248:	f7ff fc27 	bl	2a9a <__ieee754_pow+0x92>
    324c:	2300      	movs	r3, #0
    324e:	4c79      	ldr	r4, [pc, #484]	; (3434 <__ieee754_pow+0xa2c>)
    3250:	9306      	str	r3, [sp, #24]
    3252:	9407      	str	r4, [sp, #28]
    3254:	e666      	b.n	2f24 <__ieee754_pow+0x51c>
    3256:	4653      	mov	r3, sl
    3258:	2b00      	cmp	r3, #0
    325a:	db00      	blt.n	325e <__ieee754_pow+0x856>
    325c:	e4c3      	b.n	2be6 <__ieee754_pow+0x1de>
    325e:	9b00      	ldr	r3, [sp, #0]
    3260:	9c01      	ldr	r4, [sp, #4]
    3262:	2280      	movs	r2, #128	; 0x80
    3264:	0612      	lsls	r2, r2, #24
    3266:	001e      	movs	r6, r3
    3268:	4694      	mov	ip, r2
    326a:	0023      	movs	r3, r4
    326c:	4463      	add	r3, ip
    326e:	0019      	movs	r1, r3
    3270:	f7ff fc13 	bl	2a9a <__ieee754_pow+0x92>
    3274:	0002      	movs	r2, r0
    3276:	000b      	movs	r3, r1
    3278:	2000      	movs	r0, #0
    327a:	4969      	ldr	r1, [pc, #420]	; (3420 <__ieee754_pow+0xa18>)
    327c:	f000 ffb6 	bl	41ec <__aeabi_ddiv>
    3280:	e44a      	b.n	2b18 <__ieee754_pow+0x110>
    3282:	4b6d      	ldr	r3, [pc, #436]	; (3438 <__ieee754_pow+0xa30>)
    3284:	429c      	cmp	r4, r3
    3286:	dc00      	bgt.n	328a <__ieee754_pow+0x882>
    3288:	e4aa      	b.n	2be0 <__ieee754_pow+0x1d8>
    328a:	4b65      	ldr	r3, [pc, #404]	; (3420 <__ieee754_pow+0xa18>)
    328c:	429c      	cmp	r4, r3
    328e:	dd01      	ble.n	3294 <__ieee754_pow+0x88c>
    3290:	f7ff fc2c 	bl	2aec <__ieee754_pow+0xe4>
    3294:	2200      	movs	r2, #0
    3296:	4b62      	ldr	r3, [pc, #392]	; (3420 <__ieee754_pow+0xa18>)
    3298:	f001 fe46 	bl	4f28 <__aeabi_dsub>
    329c:	22c0      	movs	r2, #192	; 0xc0
    329e:	4b67      	ldr	r3, [pc, #412]	; (343c <__ieee754_pow+0xa34>)
    32a0:	05d2      	lsls	r2, r2, #23
    32a2:	0004      	movs	r4, r0
    32a4:	000d      	movs	r5, r1
    32a6:	f001 fbc5 	bl	4a34 <__aeabi_dmul>
    32aa:	4a65      	ldr	r2, [pc, #404]	; (3440 <__ieee754_pow+0xa38>)
    32ac:	0006      	movs	r6, r0
    32ae:	000f      	movs	r7, r1
    32b0:	4b64      	ldr	r3, [pc, #400]	; (3444 <__ieee754_pow+0xa3c>)
    32b2:	0020      	movs	r0, r4
    32b4:	0029      	movs	r1, r5
    32b6:	f001 fbbd 	bl	4a34 <__aeabi_dmul>
    32ba:	2200      	movs	r2, #0
    32bc:	9002      	str	r0, [sp, #8]
    32be:	9103      	str	r1, [sp, #12]
    32c0:	4b61      	ldr	r3, [pc, #388]	; (3448 <__ieee754_pow+0xa40>)
    32c2:	0020      	movs	r0, r4
    32c4:	0029      	movs	r1, r5
    32c6:	f001 fbb5 	bl	4a34 <__aeabi_dmul>
    32ca:	0002      	movs	r2, r0
    32cc:	000b      	movs	r3, r1
    32ce:	485f      	ldr	r0, [pc, #380]	; (344c <__ieee754_pow+0xa44>)
    32d0:	495f      	ldr	r1, [pc, #380]	; (3450 <__ieee754_pow+0xa48>)
    32d2:	f001 fe29 	bl	4f28 <__aeabi_dsub>
    32d6:	0022      	movs	r2, r4
    32d8:	002b      	movs	r3, r5
    32da:	f001 fbab 	bl	4a34 <__aeabi_dmul>
    32de:	0002      	movs	r2, r0
    32e0:	000b      	movs	r3, r1
    32e2:	2000      	movs	r0, #0
    32e4:	495b      	ldr	r1, [pc, #364]	; (3454 <__ieee754_pow+0xa4c>)
    32e6:	f001 fe1f 	bl	4f28 <__aeabi_dsub>
    32ea:	0022      	movs	r2, r4
    32ec:	9004      	str	r0, [sp, #16]
    32ee:	9105      	str	r1, [sp, #20]
    32f0:	002b      	movs	r3, r5
    32f2:	0020      	movs	r0, r4
    32f4:	0029      	movs	r1, r5
    32f6:	f001 fb9d 	bl	4a34 <__aeabi_dmul>
    32fa:	0002      	movs	r2, r0
    32fc:	000b      	movs	r3, r1
    32fe:	9804      	ldr	r0, [sp, #16]
    3300:	9905      	ldr	r1, [sp, #20]
    3302:	f001 fb97 	bl	4a34 <__aeabi_dmul>
    3306:	4a54      	ldr	r2, [pc, #336]	; (3458 <__ieee754_pow+0xa50>)
    3308:	4b4c      	ldr	r3, [pc, #304]	; (343c <__ieee754_pow+0xa34>)
    330a:	f001 fb93 	bl	4a34 <__aeabi_dmul>
    330e:	0002      	movs	r2, r0
    3310:	000b      	movs	r3, r1
    3312:	9802      	ldr	r0, [sp, #8]
    3314:	9903      	ldr	r1, [sp, #12]
    3316:	f001 fe07 	bl	4f28 <__aeabi_dsub>
    331a:	0002      	movs	r2, r0
    331c:	000b      	movs	r3, r1
    331e:	0004      	movs	r4, r0
    3320:	000d      	movs	r5, r1
    3322:	0030      	movs	r0, r6
    3324:	0039      	movs	r1, r7
    3326:	f000 fc35 	bl	3b94 <__aeabi_dadd>
    332a:	2200      	movs	r2, #0
    332c:	0010      	movs	r0, r2
    332e:	003b      	movs	r3, r7
    3330:	0032      	movs	r2, r6
    3332:	9002      	str	r0, [sp, #8]
    3334:	9103      	str	r1, [sp, #12]
    3336:	f001 fdf7 	bl	4f28 <__aeabi_dsub>
    333a:	0002      	movs	r2, r0
    333c:	000b      	movs	r3, r1
    333e:	0020      	movs	r0, r4
    3340:	0029      	movs	r1, r5
    3342:	f001 fdf1 	bl	4f28 <__aeabi_dsub>
    3346:	9004      	str	r0, [sp, #16]
    3348:	9105      	str	r1, [sp, #20]
    334a:	e5e1      	b.n	2f10 <__ieee754_pow+0x508>
    334c:	4a43      	ldr	r2, [pc, #268]	; (345c <__ieee754_pow+0xa54>)
    334e:	4b44      	ldr	r3, [pc, #272]	; (3460 <__ieee754_pow+0xa58>)
    3350:	9806      	ldr	r0, [sp, #24]
    3352:	9907      	ldr	r1, [sp, #28]
    3354:	f001 fb6e 	bl	4a34 <__aeabi_dmul>
    3358:	4a40      	ldr	r2, [pc, #256]	; (345c <__ieee754_pow+0xa54>)
    335a:	4b41      	ldr	r3, [pc, #260]	; (3460 <__ieee754_pow+0xa58>)
    335c:	f001 fb6a 	bl	4a34 <__aeabi_dmul>
    3360:	0006      	movs	r6, r0
    3362:	f7ff fb9a 	bl	2a9a <__ieee754_pow+0x92>
    3366:	2a00      	cmp	r2, #0
    3368:	d001      	beq.n	336e <__ieee754_pow+0x966>
    336a:	f7ff fba5 	bl	2ab8 <__ieee754_pow+0xb0>
    336e:	3214      	adds	r2, #20
    3370:	1ad3      	subs	r3, r2, r3
    3372:	003a      	movs	r2, r7
    3374:	411a      	asrs	r2, r3
    3376:	0011      	movs	r1, r2
    3378:	4099      	lsls	r1, r3
    337a:	428f      	cmp	r7, r1
    337c:	d001      	beq.n	3382 <__ieee754_pow+0x97a>
    337e:	f7ff fb6f 	bl	2a60 <__ieee754_pow+0x58>
    3382:	2301      	movs	r3, #1
    3384:	4013      	ands	r3, r2
    3386:	2202      	movs	r2, #2
    3388:	1ad3      	subs	r3, r2, r3
    338a:	469b      	mov	fp, r3
    338c:	f7ff fb68 	bl	2a60 <__ieee754_pow+0x58>
    3390:	4b30      	ldr	r3, [pc, #192]	; (3454 <__ieee754_pow+0xa4c>)
    3392:	429e      	cmp	r6, r3
    3394:	dd00      	ble.n	3398 <__ieee754_pow+0x990>
    3396:	e64e      	b.n	3036 <__ieee754_pow+0x62e>
    3398:	2300      	movs	r3, #0
    339a:	4699      	mov	r9, r3
    339c:	4698      	mov	r8, r3
    339e:	e67a      	b.n	3096 <__ieee754_pow+0x68e>
    33a0:	0002      	movs	r2, r0
    33a2:	000b      	movs	r3, r1
    33a4:	f7ff fc14 	bl	2bd0 <__ieee754_pow+0x1c8>
    33a8:	2380      	movs	r3, #128	; 0x80
    33aa:	4c2e      	ldr	r4, [pc, #184]	; (3464 <__ieee754_pow+0xa5c>)
    33ac:	05db      	lsls	r3, r3, #23
    33ae:	9308      	str	r3, [sp, #32]
    33b0:	9409      	str	r4, [sp, #36]	; 0x24
    33b2:	4b2d      	ldr	r3, [pc, #180]	; (3468 <__ieee754_pow+0xa60>)
    33b4:	4c2d      	ldr	r4, [pc, #180]	; (346c <__ieee754_pow+0xa64>)
    33b6:	2200      	movs	r2, #0
    33b8:	930c      	str	r3, [sp, #48]	; 0x30
    33ba:	940d      	str	r4, [sp, #52]	; 0x34
    33bc:	2480      	movs	r4, #128	; 0x80
    33be:	4b2c      	ldr	r3, [pc, #176]	; (3470 <__ieee754_pow+0xa68>)
    33c0:	02e4      	lsls	r4, r4, #11
    33c2:	9206      	str	r2, [sp, #24]
    33c4:	9307      	str	r3, [sp, #28]
    33c6:	e456      	b.n	2c76 <__ieee754_pow+0x26e>
    33c8:	4643      	mov	r3, r8
    33ca:	425b      	negs	r3, r3
    33cc:	4698      	mov	r8, r3
    33ce:	e651      	b.n	3074 <__ieee754_pow+0x66c>
    33d0:	4642      	mov	r2, r8
    33d2:	f000 f9fd 	bl	37d0 <scalbn>
    33d6:	e707      	b.n	31e8 <__ieee754_pow+0x7e0>
    33d8:	fffffc02 	.word	0xfffffc02
    33dc:	fffffc01 	.word	0xfffffc01
    33e0:	000fffff 	.word	0x000fffff
    33e4:	3fe62e43 	.word	0x3fe62e43
    33e8:	fefa39ef 	.word	0xfefa39ef
    33ec:	3fe62e42 	.word	0x3fe62e42
    33f0:	0ca86c39 	.word	0x0ca86c39
    33f4:	be205c61 	.word	0xbe205c61
    33f8:	72bea4d0 	.word	0x72bea4d0
    33fc:	3e663769 	.word	0x3e663769
    3400:	c5d26bf1 	.word	0xc5d26bf1
    3404:	3ebbbd41 	.word	0x3ebbbd41
    3408:	af25de2c 	.word	0xaf25de2c
    340c:	3f11566a 	.word	0x3f11566a
    3410:	16bebd93 	.word	0x16bebd93
    3414:	3f66c16c 	.word	0x3f66c16c
    3418:	5555553e 	.word	0x5555553e
    341c:	3fc55555 	.word	0x3fc55555
    3420:	3ff00000 	.word	0x3ff00000
    3424:	4090cbff 	.word	0x4090cbff
    3428:	3f6f3400 	.word	0x3f6f3400
    342c:	c2f8f359 	.word	0xc2f8f359
    3430:	01a56e1f 	.word	0x01a56e1f
    3434:	bff00000 	.word	0xbff00000
    3438:	3feffffe 	.word	0x3feffffe
    343c:	3ff71547 	.word	0x3ff71547
    3440:	f85ddf44 	.word	0xf85ddf44
    3444:	3e54ae0b 	.word	0x3e54ae0b
    3448:	3fd00000 	.word	0x3fd00000
    344c:	55555555 	.word	0x55555555
    3450:	3fd55555 	.word	0x3fd55555
    3454:	3fe00000 	.word	0x3fe00000
    3458:	652b82fe 	.word	0x652b82fe
    345c:	8800759c 	.word	0x8800759c
    3460:	7e37e43c 	.word	0x7e37e43c
    3464:	3fe2b803 	.word	0x3fe2b803
    3468:	43cfd006 	.word	0x43cfd006
    346c:	3e4cfdeb 	.word	0x3e4cfdeb
    3470:	3ff80000 	.word	0x3ff80000

00003474 <__ieee754_sqrt>:
    3474:	b5f0      	push	{r4, r5, r6, r7, lr}
    3476:	4656      	mov	r6, sl
    3478:	464d      	mov	r5, r9
    347a:	4644      	mov	r4, r8
    347c:	465f      	mov	r7, fp
    347e:	4b75      	ldr	r3, [pc, #468]	; (3654 <__ieee754_sqrt+0x1e0>)
    3480:	b4f0      	push	{r4, r5, r6, r7}
    3482:	000a      	movs	r2, r1
    3484:	000d      	movs	r5, r1
    3486:	0019      	movs	r1, r3
    3488:	b083      	sub	sp, #12
    348a:	0006      	movs	r6, r0
    348c:	0004      	movs	r4, r0
    348e:	4029      	ands	r1, r5
    3490:	4299      	cmp	r1, r3
    3492:	d100      	bne.n	3496 <__ieee754_sqrt+0x22>
    3494:	e0ba      	b.n	360c <__ieee754_sqrt+0x198>
    3496:	2d00      	cmp	r5, #0
    3498:	dc00      	bgt.n	349c <__ieee754_sqrt+0x28>
    349a:	e094      	b.n	35c6 <__ieee754_sqrt+0x152>
    349c:	152d      	asrs	r5, r5, #20
    349e:	d100      	bne.n	34a2 <__ieee754_sqrt+0x2e>
    34a0:	e0a3      	b.n	35ea <__ieee754_sqrt+0x176>
    34a2:	4b6d      	ldr	r3, [pc, #436]	; (3658 <__ieee754_sqrt+0x1e4>)
    34a4:	0312      	lsls	r2, r2, #12
    34a6:	469c      	mov	ip, r3
    34a8:	2380      	movs	r3, #128	; 0x80
    34aa:	0b12      	lsrs	r2, r2, #12
    34ac:	035b      	lsls	r3, r3, #13
    34ae:	4465      	add	r5, ip
    34b0:	431a      	orrs	r2, r3
    34b2:	07eb      	lsls	r3, r5, #31
    34b4:	d500      	bpl.n	34b8 <__ieee754_sqrt+0x44>
    34b6:	e081      	b.n	35bc <__ieee754_sqrt+0x148>
    34b8:	106b      	asrs	r3, r5, #1
    34ba:	4698      	mov	r8, r3
    34bc:	0fe3      	lsrs	r3, r4, #31
    34be:	189b      	adds	r3, r3, r2
    34c0:	189b      	adds	r3, r3, r2
    34c2:	2280      	movs	r2, #128	; 0x80
    34c4:	2116      	movs	r1, #22
    34c6:	2600      	movs	r6, #0
    34c8:	2700      	movs	r7, #0
    34ca:	0064      	lsls	r4, r4, #1
    34cc:	0392      	lsls	r2, r2, #14
    34ce:	18b8      	adds	r0, r7, r2
    34d0:	4298      	cmp	r0, r3
    34d2:	dc02      	bgt.n	34da <__ieee754_sqrt+0x66>
    34d4:	1887      	adds	r7, r0, r2
    34d6:	1a1b      	subs	r3, r3, r0
    34d8:	18b6      	adds	r6, r6, r2
    34da:	0fe0      	lsrs	r0, r4, #31
    34dc:	005b      	lsls	r3, r3, #1
    34de:	3901      	subs	r1, #1
    34e0:	181b      	adds	r3, r3, r0
    34e2:	0064      	lsls	r4, r4, #1
    34e4:	0852      	lsrs	r2, r2, #1
    34e6:	2900      	cmp	r1, #0
    34e8:	d1f1      	bne.n	34ce <__ieee754_sqrt+0x5a>
    34ea:	2200      	movs	r2, #0
    34ec:	9201      	str	r2, [sp, #4]
    34ee:	4694      	mov	ip, r2
    34f0:	2280      	movs	r2, #128	; 0x80
    34f2:	0612      	lsls	r2, r2, #24
    34f4:	2020      	movs	r0, #32
    34f6:	4691      	mov	r9, r2
    34f8:	e009      	b.n	350e <__ieee754_sqrt+0x9a>
    34fa:	429f      	cmp	r7, r3
    34fc:	d041      	beq.n	3582 <__ieee754_sqrt+0x10e>
    34fe:	0fe1      	lsrs	r1, r4, #31
    3500:	18c9      	adds	r1, r1, r3
    3502:	3801      	subs	r0, #1
    3504:	18cb      	adds	r3, r1, r3
    3506:	0064      	lsls	r4, r4, #1
    3508:	0852      	lsrs	r2, r2, #1
    350a:	2800      	cmp	r0, #0
    350c:	d01e      	beq.n	354c <__ieee754_sqrt+0xd8>
    350e:	4661      	mov	r1, ip
    3510:	1851      	adds	r1, r2, r1
    3512:	429f      	cmp	r7, r3
    3514:	daf1      	bge.n	34fa <__ieee754_sqrt+0x86>
    3516:	188d      	adds	r5, r1, r2
    3518:	46ac      	mov	ip, r5
    351a:	0fcd      	lsrs	r5, r1, #31
    351c:	07ed      	lsls	r5, r5, #31
    351e:	46ba      	mov	sl, r7
    3520:	454d      	cmp	r5, r9
    3522:	d039      	beq.n	3598 <__ieee754_sqrt+0x124>
    3524:	1bdb      	subs	r3, r3, r7
    3526:	428c      	cmp	r4, r1
    3528:	41bf      	sbcs	r7, r7
    352a:	427f      	negs	r7, r7
    352c:	1bdb      	subs	r3, r3, r7
    352e:	1a64      	subs	r4, r4, r1
    3530:	9901      	ldr	r1, [sp, #4]
    3532:	3801      	subs	r0, #1
    3534:	468b      	mov	fp, r1
    3536:	4493      	add	fp, r2
    3538:	4659      	mov	r1, fp
    353a:	9101      	str	r1, [sp, #4]
    353c:	0fe1      	lsrs	r1, r4, #31
    353e:	18c9      	adds	r1, r1, r3
    3540:	4657      	mov	r7, sl
    3542:	18cb      	adds	r3, r1, r3
    3544:	0064      	lsls	r4, r4, #1
    3546:	0852      	lsrs	r2, r2, #1
    3548:	2800      	cmp	r0, #0
    354a:	d1e0      	bne.n	350e <__ieee754_sqrt+0x9a>
    354c:	4323      	orrs	r3, r4
    354e:	d12b      	bne.n	35a8 <__ieee754_sqrt+0x134>
    3550:	9b01      	ldr	r3, [sp, #4]
    3552:	085b      	lsrs	r3, r3, #1
    3554:	4941      	ldr	r1, [pc, #260]	; (365c <__ieee754_sqrt+0x1e8>)
    3556:	1072      	asrs	r2, r6, #1
    3558:	468c      	mov	ip, r1
    355a:	4462      	add	r2, ip
    355c:	07f1      	lsls	r1, r6, #31
    355e:	d502      	bpl.n	3566 <__ieee754_sqrt+0xf2>
    3560:	2180      	movs	r1, #128	; 0x80
    3562:	0609      	lsls	r1, r1, #24
    3564:	430b      	orrs	r3, r1
    3566:	4641      	mov	r1, r8
    3568:	0509      	lsls	r1, r1, #20
    356a:	188d      	adds	r5, r1, r2
    356c:	001e      	movs	r6, r3
    356e:	002f      	movs	r7, r5
    3570:	0030      	movs	r0, r6
    3572:	0039      	movs	r1, r7
    3574:	b003      	add	sp, #12
    3576:	bc3c      	pop	{r2, r3, r4, r5}
    3578:	4690      	mov	r8, r2
    357a:	4699      	mov	r9, r3
    357c:	46a2      	mov	sl, r4
    357e:	46ab      	mov	fp, r5
    3580:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3582:	42a1      	cmp	r1, r4
    3584:	d80e      	bhi.n	35a4 <__ieee754_sqrt+0x130>
    3586:	188d      	adds	r5, r1, r2
    3588:	46ac      	mov	ip, r5
    358a:	0fcd      	lsrs	r5, r1, #31
    358c:	07ed      	lsls	r5, r5, #31
    358e:	454d      	cmp	r5, r9
    3590:	d048      	beq.n	3624 <__ieee754_sqrt+0x1b0>
    3592:	469a      	mov	sl, r3
    3594:	2300      	movs	r3, #0
    3596:	e7ca      	b.n	352e <__ieee754_sqrt+0xba>
    3598:	4665      	mov	r5, ip
    359a:	2d00      	cmp	r5, #0
    359c:	dbc2      	blt.n	3524 <__ieee754_sqrt+0xb0>
    359e:	1c7d      	adds	r5, r7, #1
    35a0:	46aa      	mov	sl, r5
    35a2:	e7bf      	b.n	3524 <__ieee754_sqrt+0xb0>
    35a4:	003b      	movs	r3, r7
    35a6:	e7aa      	b.n	34fe <__ieee754_sqrt+0x8a>
    35a8:	9b01      	ldr	r3, [sp, #4]
    35aa:	3301      	adds	r3, #1
    35ac:	d03e      	beq.n	362c <__ieee754_sqrt+0x1b8>
    35ae:	9a01      	ldr	r2, [sp, #4]
    35b0:	2301      	movs	r3, #1
    35b2:	4694      	mov	ip, r2
    35b4:	4013      	ands	r3, r2
    35b6:	4463      	add	r3, ip
    35b8:	085b      	lsrs	r3, r3, #1
    35ba:	e7cb      	b.n	3554 <__ieee754_sqrt+0xe0>
    35bc:	0fe3      	lsrs	r3, r4, #31
    35be:	0052      	lsls	r2, r2, #1
    35c0:	189a      	adds	r2, r3, r2
    35c2:	0064      	lsls	r4, r4, #1
    35c4:	e778      	b.n	34b8 <__ieee754_sqrt+0x44>
    35c6:	006b      	lsls	r3, r5, #1
    35c8:	085b      	lsrs	r3, r3, #1
    35ca:	4303      	orrs	r3, r0
    35cc:	002f      	movs	r7, r5
    35ce:	2b00      	cmp	r3, #0
    35d0:	d0ce      	beq.n	3570 <__ieee754_sqrt+0xfc>
    35d2:	2500      	movs	r5, #0
    35d4:	2a00      	cmp	r2, #0
    35d6:	d131      	bne.n	363c <__ieee754_sqrt+0x1c8>
    35d8:	0ae2      	lsrs	r2, r4, #11
    35da:	3d15      	subs	r5, #21
    35dc:	0564      	lsls	r4, r4, #21
    35de:	2a00      	cmp	r2, #0
    35e0:	d0fa      	beq.n	35d8 <__ieee754_sqrt+0x164>
    35e2:	2380      	movs	r3, #128	; 0x80
    35e4:	035b      	lsls	r3, r3, #13
    35e6:	421a      	tst	r2, r3
    35e8:	d123      	bne.n	3632 <__ieee754_sqrt+0x1be>
    35ea:	2080      	movs	r0, #128	; 0x80
    35ec:	2300      	movs	r3, #0
    35ee:	0340      	lsls	r0, r0, #13
    35f0:	e000      	b.n	35f4 <__ieee754_sqrt+0x180>
    35f2:	000b      	movs	r3, r1
    35f4:	0052      	lsls	r2, r2, #1
    35f6:	1c59      	adds	r1, r3, #1
    35f8:	4202      	tst	r2, r0
    35fa:	d0fa      	beq.n	35f2 <__ieee754_sqrt+0x17e>
    35fc:	2020      	movs	r0, #32
    35fe:	1a40      	subs	r0, r0, r1
    3600:	1aed      	subs	r5, r5, r3
    3602:	0023      	movs	r3, r4
    3604:	40c3      	lsrs	r3, r0
    3606:	408c      	lsls	r4, r1
    3608:	431a      	orrs	r2, r3
    360a:	e74a      	b.n	34a2 <__ieee754_sqrt+0x2e>
    360c:	0002      	movs	r2, r0
    360e:	002b      	movs	r3, r5
    3610:	0029      	movs	r1, r5
    3612:	f001 fa0f 	bl	4a34 <__aeabi_dmul>
    3616:	0032      	movs	r2, r6
    3618:	002b      	movs	r3, r5
    361a:	f000 fabb 	bl	3b94 <__aeabi_dadd>
    361e:	0006      	movs	r6, r0
    3620:	000f      	movs	r7, r1
    3622:	e7a5      	b.n	3570 <__ieee754_sqrt+0xfc>
    3624:	4665      	mov	r5, ip
    3626:	2d00      	cmp	r5, #0
    3628:	dab9      	bge.n	359e <__ieee754_sqrt+0x12a>
    362a:	e7b2      	b.n	3592 <__ieee754_sqrt+0x11e>
    362c:	3601      	adds	r6, #1
    362e:	2300      	movs	r3, #0
    3630:	e790      	b.n	3554 <__ieee754_sqrt+0xe0>
    3632:	2301      	movs	r3, #1
    3634:	2020      	movs	r0, #32
    3636:	425b      	negs	r3, r3
    3638:	2100      	movs	r1, #0
    363a:	e7e1      	b.n	3600 <__ieee754_sqrt+0x18c>
    363c:	003b      	movs	r3, r7
    363e:	0002      	movs	r2, r0
    3640:	0039      	movs	r1, r7
    3642:	f001 fc71 	bl	4f28 <__aeabi_dsub>
    3646:	0002      	movs	r2, r0
    3648:	000b      	movs	r3, r1
    364a:	f000 fdcf 	bl	41ec <__aeabi_ddiv>
    364e:	0006      	movs	r6, r0
    3650:	000f      	movs	r7, r1
    3652:	e78d      	b.n	3570 <__ieee754_sqrt+0xfc>
    3654:	7ff00000 	.word	0x7ff00000
    3658:	fffffc01 	.word	0xfffffc01
    365c:	3fe00000 	.word	0x3fe00000

00003660 <fabs>:
    3660:	0049      	lsls	r1, r1, #1
    3662:	084b      	lsrs	r3, r1, #1
    3664:	0019      	movs	r1, r3
    3666:	4770      	bx	lr

00003668 <finite>:
    3668:	4b03      	ldr	r3, [pc, #12]	; (3678 <finite+0x10>)
    366a:	0048      	lsls	r0, r1, #1
    366c:	469c      	mov	ip, r3
    366e:	0840      	lsrs	r0, r0, #1
    3670:	4460      	add	r0, ip
    3672:	0fc0      	lsrs	r0, r0, #31
    3674:	4770      	bx	lr
    3676:	46c0      	nop			; (mov r8, r8)
    3678:	80100000 	.word	0x80100000

0000367c <matherr>:
    367c:	2000      	movs	r0, #0
    367e:	4770      	bx	lr

00003680 <nan>:
    3680:	2000      	movs	r0, #0
    3682:	4901      	ldr	r1, [pc, #4]	; (3688 <nan+0x8>)
    3684:	4770      	bx	lr
    3686:	46c0      	nop			; (mov r8, r8)
    3688:	7ff80000 	.word	0x7ff80000

0000368c <rint>:
    368c:	b5f0      	push	{r4, r5, r6, r7, lr}
    368e:	4647      	mov	r7, r8
    3690:	b480      	push	{r7}
    3692:	0fcb      	lsrs	r3, r1, #31
    3694:	4698      	mov	r8, r3
    3696:	4c4a      	ldr	r4, [pc, #296]	; (37c0 <rint+0x134>)
    3698:	004b      	lsls	r3, r1, #1
    369a:	0d5b      	lsrs	r3, r3, #21
    369c:	191e      	adds	r6, r3, r4
    369e:	b082      	sub	sp, #8
    36a0:	0007      	movs	r7, r0
    36a2:	000a      	movs	r2, r1
    36a4:	2e13      	cmp	r6, #19
    36a6:	dc35      	bgt.n	3714 <rint+0x88>
    36a8:	2e00      	cmp	r6, #0
    36aa:	db57      	blt.n	375c <rint+0xd0>
    36ac:	4b45      	ldr	r3, [pc, #276]	; (37c4 <rint+0x138>)
    36ae:	0004      	movs	r4, r0
    36b0:	4133      	asrs	r3, r6
    36b2:	001f      	movs	r7, r3
    36b4:	400f      	ands	r7, r1
    36b6:	4307      	orrs	r7, r0
    36b8:	000d      	movs	r5, r1
    36ba:	2f00      	cmp	r7, #0
    36bc:	d024      	beq.n	3708 <rint+0x7c>
    36be:	085b      	lsrs	r3, r3, #1
    36c0:	001c      	movs	r4, r3
    36c2:	400c      	ands	r4, r1
    36c4:	4320      	orrs	r0, r4
    36c6:	2700      	movs	r7, #0
    36c8:	2800      	cmp	r0, #0
    36ca:	d007      	beq.n	36dc <rint+0x50>
    36cc:	2e13      	cmp	r6, #19
    36ce:	d100      	bne.n	36d2 <rint+0x46>
    36d0:	e072      	b.n	37b8 <rint+0x12c>
    36d2:	2280      	movs	r2, #128	; 0x80
    36d4:	02d2      	lsls	r2, r2, #11
    36d6:	4132      	asrs	r2, r6
    36d8:	4399      	bics	r1, r3
    36da:	430a      	orrs	r2, r1
    36dc:	4643      	mov	r3, r8
    36de:	00de      	lsls	r6, r3, #3
    36e0:	4b39      	ldr	r3, [pc, #228]	; (37c8 <rint+0x13c>)
    36e2:	0011      	movs	r1, r2
    36e4:	199e      	adds	r6, r3, r6
    36e6:	6834      	ldr	r4, [r6, #0]
    36e8:	6875      	ldr	r5, [r6, #4]
    36ea:	0038      	movs	r0, r7
    36ec:	0022      	movs	r2, r4
    36ee:	002b      	movs	r3, r5
    36f0:	f000 fa50 	bl	3b94 <__aeabi_dadd>
    36f4:	9000      	str	r0, [sp, #0]
    36f6:	9101      	str	r1, [sp, #4]
    36f8:	9800      	ldr	r0, [sp, #0]
    36fa:	9901      	ldr	r1, [sp, #4]
    36fc:	0022      	movs	r2, r4
    36fe:	002b      	movs	r3, r5
    3700:	f001 fc12 	bl	4f28 <__aeabi_dsub>
    3704:	0004      	movs	r4, r0
    3706:	000d      	movs	r5, r1
    3708:	0020      	movs	r0, r4
    370a:	0029      	movs	r1, r5
    370c:	b002      	add	sp, #8
    370e:	bc04      	pop	{r2}
    3710:	4690      	mov	r8, r2
    3712:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3714:	2e33      	cmp	r6, #51	; 0x33
    3716:	dd0c      	ble.n	3732 <rint+0xa6>
    3718:	2380      	movs	r3, #128	; 0x80
    371a:	0004      	movs	r4, r0
    371c:	000d      	movs	r5, r1
    371e:	00db      	lsls	r3, r3, #3
    3720:	429e      	cmp	r6, r3
    3722:	d1f1      	bne.n	3708 <rint+0x7c>
    3724:	0002      	movs	r2, r0
    3726:	000b      	movs	r3, r1
    3728:	f000 fa34 	bl	3b94 <__aeabi_dadd>
    372c:	0004      	movs	r4, r0
    372e:	000d      	movs	r5, r1
    3730:	e7ea      	b.n	3708 <rint+0x7c>
    3732:	4c26      	ldr	r4, [pc, #152]	; (37cc <rint+0x140>)
    3734:	000d      	movs	r5, r1
    3736:	46a4      	mov	ip, r4
    3738:	2401      	movs	r4, #1
    373a:	4463      	add	r3, ip
    373c:	4264      	negs	r4, r4
    373e:	40dc      	lsrs	r4, r3
    3740:	46a4      	mov	ip, r4
    3742:	4661      	mov	r1, ip
    3744:	0004      	movs	r4, r0
    3746:	4201      	tst	r1, r0
    3748:	d0de      	beq.n	3708 <rint+0x7c>
    374a:	0849      	lsrs	r1, r1, #1
    374c:	4201      	tst	r1, r0
    374e:	d0c5      	beq.n	36dc <rint+0x50>
    3750:	2780      	movs	r7, #128	; 0x80
    3752:	05ff      	lsls	r7, r7, #23
    3754:	411f      	asrs	r7, r3
    3756:	4388      	bics	r0, r1
    3758:	4307      	orrs	r7, r0
    375a:	e7bf      	b.n	36dc <rint+0x50>
    375c:	004b      	lsls	r3, r1, #1
    375e:	085b      	lsrs	r3, r3, #1
    3760:	4303      	orrs	r3, r0
    3762:	0004      	movs	r4, r0
    3764:	000d      	movs	r5, r1
    3766:	2b00      	cmp	r3, #0
    3768:	d0ce      	beq.n	3708 <rint+0x7c>
    376a:	030b      	lsls	r3, r1, #12
    376c:	0b1b      	lsrs	r3, r3, #12
    376e:	4303      	orrs	r3, r0
    3770:	425a      	negs	r2, r3
    3772:	4313      	orrs	r3, r2
    3774:	2280      	movs	r2, #128	; 0x80
    3776:	0b1b      	lsrs	r3, r3, #12
    3778:	0312      	lsls	r2, r2, #12
    377a:	4013      	ands	r3, r2
    377c:	0c4a      	lsrs	r2, r1, #17
    377e:	0452      	lsls	r2, r2, #17
    3780:	4313      	orrs	r3, r2
    3782:	0019      	movs	r1, r3
    3784:	4643      	mov	r3, r8
    3786:	4a10      	ldr	r2, [pc, #64]	; (37c8 <rint+0x13c>)
    3788:	00db      	lsls	r3, r3, #3
    378a:	18d3      	adds	r3, r2, r3
    378c:	681c      	ldr	r4, [r3, #0]
    378e:	685d      	ldr	r5, [r3, #4]
    3790:	0022      	movs	r2, r4
    3792:	002b      	movs	r3, r5
    3794:	f000 f9fe 	bl	3b94 <__aeabi_dadd>
    3798:	9000      	str	r0, [sp, #0]
    379a:	9101      	str	r1, [sp, #4]
    379c:	9800      	ldr	r0, [sp, #0]
    379e:	9901      	ldr	r1, [sp, #4]
    37a0:	0022      	movs	r2, r4
    37a2:	002b      	movs	r3, r5
    37a4:	f001 fbc0 	bl	4f28 <__aeabi_dsub>
    37a8:	4642      	mov	r2, r8
    37aa:	004b      	lsls	r3, r1, #1
    37ac:	085b      	lsrs	r3, r3, #1
    37ae:	07d6      	lsls	r6, r2, #31
    37b0:	4333      	orrs	r3, r6
    37b2:	0004      	movs	r4, r0
    37b4:	001d      	movs	r5, r3
    37b6:	e7a7      	b.n	3708 <rint+0x7c>
    37b8:	2780      	movs	r7, #128	; 0x80
    37ba:	063f      	lsls	r7, r7, #24
    37bc:	e789      	b.n	36d2 <rint+0x46>
    37be:	46c0      	nop			; (mov r8, r8)
    37c0:	fffffc01 	.word	0xfffffc01
    37c4:	000fffff 	.word	0x000fffff
    37c8:	00005e08 	.word	0x00005e08
    37cc:	fffffbed 	.word	0xfffffbed

000037d0 <scalbn>:
    37d0:	004b      	lsls	r3, r1, #1
    37d2:	b570      	push	{r4, r5, r6, lr}
    37d4:	0d5b      	lsrs	r3, r3, #21
    37d6:	0014      	movs	r4, r2
    37d8:	000a      	movs	r2, r1
    37da:	2b00      	cmp	r3, #0
    37dc:	d11a      	bne.n	3814 <scalbn+0x44>
    37de:	004b      	lsls	r3, r1, #1
    37e0:	085b      	lsrs	r3, r3, #1
    37e2:	4303      	orrs	r3, r0
    37e4:	d015      	beq.n	3812 <scalbn+0x42>
    37e6:	2200      	movs	r2, #0
    37e8:	4b22      	ldr	r3, [pc, #136]	; (3874 <scalbn+0xa4>)
    37ea:	f001 f923 	bl	4a34 <__aeabi_dmul>
    37ee:	4b22      	ldr	r3, [pc, #136]	; (3878 <scalbn+0xa8>)
    37f0:	000a      	movs	r2, r1
    37f2:	429c      	cmp	r4, r3
    37f4:	db22      	blt.n	383c <scalbn+0x6c>
    37f6:	004b      	lsls	r3, r1, #1
    37f8:	0d5b      	lsrs	r3, r3, #21
    37fa:	3b36      	subs	r3, #54	; 0x36
    37fc:	4d1f      	ldr	r5, [pc, #124]	; (387c <scalbn+0xac>)
    37fe:	18e3      	adds	r3, r4, r3
    3800:	42ab      	cmp	r3, r5
    3802:	dc20      	bgt.n	3846 <scalbn+0x76>
    3804:	2b00      	cmp	r3, #0
    3806:	dd0d      	ble.n	3824 <scalbn+0x54>
    3808:	4c1d      	ldr	r4, [pc, #116]	; (3880 <scalbn+0xb0>)
    380a:	051b      	lsls	r3, r3, #20
    380c:	4022      	ands	r2, r4
    380e:	431a      	orrs	r2, r3
    3810:	0011      	movs	r1, r2
    3812:	bd70      	pop	{r4, r5, r6, pc}
    3814:	4d1b      	ldr	r5, [pc, #108]	; (3884 <scalbn+0xb4>)
    3816:	42ab      	cmp	r3, r5
    3818:	d1f0      	bne.n	37fc <scalbn+0x2c>
    381a:	0002      	movs	r2, r0
    381c:	000b      	movs	r3, r1
    381e:	f000 f9b9 	bl	3b94 <__aeabi_dadd>
    3822:	e7f6      	b.n	3812 <scalbn+0x42>
    3824:	001d      	movs	r5, r3
    3826:	3535      	adds	r5, #53	; 0x35
    3828:	da18      	bge.n	385c <scalbn+0x8c>
    382a:	4b17      	ldr	r3, [pc, #92]	; (3888 <scalbn+0xb8>)
    382c:	0002      	movs	r2, r0
    382e:	429c      	cmp	r4, r3
    3830:	dc0a      	bgt.n	3848 <scalbn+0x78>
    3832:	000b      	movs	r3, r1
    3834:	4815      	ldr	r0, [pc, #84]	; (388c <scalbn+0xbc>)
    3836:	4916      	ldr	r1, [pc, #88]	; (3890 <scalbn+0xc0>)
    3838:	f000 f832 	bl	38a0 <copysign>
    383c:	4a13      	ldr	r2, [pc, #76]	; (388c <scalbn+0xbc>)
    383e:	4b14      	ldr	r3, [pc, #80]	; (3890 <scalbn+0xc0>)
    3840:	f001 f8f8 	bl	4a34 <__aeabi_dmul>
    3844:	e7e5      	b.n	3812 <scalbn+0x42>
    3846:	0002      	movs	r2, r0
    3848:	000b      	movs	r3, r1
    384a:	4812      	ldr	r0, [pc, #72]	; (3894 <scalbn+0xc4>)
    384c:	4912      	ldr	r1, [pc, #72]	; (3898 <scalbn+0xc8>)
    384e:	f000 f827 	bl	38a0 <copysign>
    3852:	4a10      	ldr	r2, [pc, #64]	; (3894 <scalbn+0xc4>)
    3854:	4b10      	ldr	r3, [pc, #64]	; (3898 <scalbn+0xc8>)
    3856:	f001 f8ed 	bl	4a34 <__aeabi_dmul>
    385a:	e7da      	b.n	3812 <scalbn+0x42>
    385c:	4c08      	ldr	r4, [pc, #32]	; (3880 <scalbn+0xb0>)
    385e:	3336      	adds	r3, #54	; 0x36
    3860:	4022      	ands	r2, r4
    3862:	051b      	lsls	r3, r3, #20
    3864:	4313      	orrs	r3, r2
    3866:	0019      	movs	r1, r3
    3868:	2200      	movs	r2, #0
    386a:	4b0c      	ldr	r3, [pc, #48]	; (389c <scalbn+0xcc>)
    386c:	f001 f8e2 	bl	4a34 <__aeabi_dmul>
    3870:	e7cf      	b.n	3812 <scalbn+0x42>
    3872:	46c0      	nop			; (mov r8, r8)
    3874:	43500000 	.word	0x43500000
    3878:	ffff3cb0 	.word	0xffff3cb0
    387c:	000007fe 	.word	0x000007fe
    3880:	800fffff 	.word	0x800fffff
    3884:	000007ff 	.word	0x000007ff
    3888:	0000c350 	.word	0x0000c350
    388c:	c2f8f359 	.word	0xc2f8f359
    3890:	01a56e1f 	.word	0x01a56e1f
    3894:	8800759c 	.word	0x8800759c
    3898:	7e37e43c 	.word	0x7e37e43c
    389c:	3c900000 	.word	0x3c900000

000038a0 <copysign>:
    38a0:	b530      	push	{r4, r5, lr}
    38a2:	004a      	lsls	r2, r1, #1
    38a4:	0fdb      	lsrs	r3, r3, #31
    38a6:	07db      	lsls	r3, r3, #31
    38a8:	0852      	lsrs	r2, r2, #1
    38aa:	431a      	orrs	r2, r3
    38ac:	0011      	movs	r1, r2
    38ae:	bd30      	pop	{r4, r5, pc}

000038b0 <__aeabi_cdrcmple>:
    38b0:	4684      	mov	ip, r0
    38b2:	1c10      	adds	r0, r2, #0
    38b4:	4662      	mov	r2, ip
    38b6:	468c      	mov	ip, r1
    38b8:	1c19      	adds	r1, r3, #0
    38ba:	4663      	mov	r3, ip
    38bc:	e000      	b.n	38c0 <__aeabi_cdcmpeq>
    38be:	46c0      	nop			; (mov r8, r8)

000038c0 <__aeabi_cdcmpeq>:
    38c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    38c2:	f001 f84d 	bl	4960 <__ledf2>
    38c6:	2800      	cmp	r0, #0
    38c8:	d401      	bmi.n	38ce <__aeabi_cdcmpeq+0xe>
    38ca:	2100      	movs	r1, #0
    38cc:	42c8      	cmn	r0, r1
    38ce:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

000038d0 <__aeabi_dcmpeq>:
    38d0:	b510      	push	{r4, lr}
    38d2:	f000 ffa1 	bl	4818 <__eqdf2>
    38d6:	4240      	negs	r0, r0
    38d8:	3001      	adds	r0, #1
    38da:	bd10      	pop	{r4, pc}

000038dc <__aeabi_dcmplt>:
    38dc:	b510      	push	{r4, lr}
    38de:	f001 f83f 	bl	4960 <__ledf2>
    38e2:	2800      	cmp	r0, #0
    38e4:	db01      	blt.n	38ea <__aeabi_dcmplt+0xe>
    38e6:	2000      	movs	r0, #0
    38e8:	bd10      	pop	{r4, pc}
    38ea:	2001      	movs	r0, #1
    38ec:	bd10      	pop	{r4, pc}
    38ee:	46c0      	nop			; (mov r8, r8)

000038f0 <__aeabi_dcmple>:
    38f0:	b510      	push	{r4, lr}
    38f2:	f001 f835 	bl	4960 <__ledf2>
    38f6:	2800      	cmp	r0, #0
    38f8:	dd01      	ble.n	38fe <__aeabi_dcmple+0xe>
    38fa:	2000      	movs	r0, #0
    38fc:	bd10      	pop	{r4, pc}
    38fe:	2001      	movs	r0, #1
    3900:	bd10      	pop	{r4, pc}
    3902:	46c0      	nop			; (mov r8, r8)

00003904 <__aeabi_dcmpgt>:
    3904:	b510      	push	{r4, lr}
    3906:	f000 ffc7 	bl	4898 <__gedf2>
    390a:	2800      	cmp	r0, #0
    390c:	dc01      	bgt.n	3912 <__aeabi_dcmpgt+0xe>
    390e:	2000      	movs	r0, #0
    3910:	bd10      	pop	{r4, pc}
    3912:	2001      	movs	r0, #1
    3914:	bd10      	pop	{r4, pc}
    3916:	46c0      	nop			; (mov r8, r8)

00003918 <__aeabi_dcmpge>:
    3918:	b510      	push	{r4, lr}
    391a:	f000 ffbd 	bl	4898 <__gedf2>
    391e:	2800      	cmp	r0, #0
    3920:	da01      	bge.n	3926 <__aeabi_dcmpge+0xe>
    3922:	2000      	movs	r0, #0
    3924:	bd10      	pop	{r4, pc}
    3926:	2001      	movs	r0, #1
    3928:	bd10      	pop	{r4, pc}
    392a:	46c0      	nop			; (mov r8, r8)

0000392c <__aeabi_cfrcmple>:
    392c:	4684      	mov	ip, r0
    392e:	1c08      	adds	r0, r1, #0
    3930:	4661      	mov	r1, ip
    3932:	e7ff      	b.n	3934 <__aeabi_cfcmpeq>

00003934 <__aeabi_cfcmpeq>:
    3934:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    3936:	f000 f8e9 	bl	3b0c <__lesf2>
    393a:	2800      	cmp	r0, #0
    393c:	d401      	bmi.n	3942 <__aeabi_cfcmpeq+0xe>
    393e:	2100      	movs	r1, #0
    3940:	42c8      	cmn	r0, r1
    3942:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00003944 <__aeabi_fcmpeq>:
    3944:	b510      	push	{r4, lr}
    3946:	f000 f875 	bl	3a34 <__eqsf2>
    394a:	4240      	negs	r0, r0
    394c:	3001      	adds	r0, #1
    394e:	bd10      	pop	{r4, pc}

00003950 <__aeabi_fcmplt>:
    3950:	b510      	push	{r4, lr}
    3952:	f000 f8db 	bl	3b0c <__lesf2>
    3956:	2800      	cmp	r0, #0
    3958:	db01      	blt.n	395e <__aeabi_fcmplt+0xe>
    395a:	2000      	movs	r0, #0
    395c:	bd10      	pop	{r4, pc}
    395e:	2001      	movs	r0, #1
    3960:	bd10      	pop	{r4, pc}
    3962:	46c0      	nop			; (mov r8, r8)

00003964 <__aeabi_fcmple>:
    3964:	b510      	push	{r4, lr}
    3966:	f000 f8d1 	bl	3b0c <__lesf2>
    396a:	2800      	cmp	r0, #0
    396c:	dd01      	ble.n	3972 <__aeabi_fcmple+0xe>
    396e:	2000      	movs	r0, #0
    3970:	bd10      	pop	{r4, pc}
    3972:	2001      	movs	r0, #1
    3974:	bd10      	pop	{r4, pc}
    3976:	46c0      	nop			; (mov r8, r8)

00003978 <__aeabi_fcmpgt>:
    3978:	b510      	push	{r4, lr}
    397a:	f000 f883 	bl	3a84 <__gesf2>
    397e:	2800      	cmp	r0, #0
    3980:	dc01      	bgt.n	3986 <__aeabi_fcmpgt+0xe>
    3982:	2000      	movs	r0, #0
    3984:	bd10      	pop	{r4, pc}
    3986:	2001      	movs	r0, #1
    3988:	bd10      	pop	{r4, pc}
    398a:	46c0      	nop			; (mov r8, r8)

0000398c <__aeabi_fcmpge>:
    398c:	b510      	push	{r4, lr}
    398e:	f000 f879 	bl	3a84 <__gesf2>
    3992:	2800      	cmp	r0, #0
    3994:	da01      	bge.n	399a <__aeabi_fcmpge+0xe>
    3996:	2000      	movs	r0, #0
    3998:	bd10      	pop	{r4, pc}
    399a:	2001      	movs	r0, #1
    399c:	bd10      	pop	{r4, pc}
    399e:	46c0      	nop			; (mov r8, r8)

000039a0 <__aeabi_lmul>:
    39a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    39a2:	464f      	mov	r7, r9
    39a4:	4646      	mov	r6, r8
    39a6:	b4c0      	push	{r6, r7}
    39a8:	0416      	lsls	r6, r2, #16
    39aa:	0c36      	lsrs	r6, r6, #16
    39ac:	4699      	mov	r9, r3
    39ae:	0033      	movs	r3, r6
    39b0:	0405      	lsls	r5, r0, #16
    39b2:	0c2c      	lsrs	r4, r5, #16
    39b4:	0c07      	lsrs	r7, r0, #16
    39b6:	0c15      	lsrs	r5, r2, #16
    39b8:	4363      	muls	r3, r4
    39ba:	437e      	muls	r6, r7
    39bc:	436f      	muls	r7, r5
    39be:	4365      	muls	r5, r4
    39c0:	0c1c      	lsrs	r4, r3, #16
    39c2:	19ad      	adds	r5, r5, r6
    39c4:	1964      	adds	r4, r4, r5
    39c6:	469c      	mov	ip, r3
    39c8:	42a6      	cmp	r6, r4
    39ca:	d903      	bls.n	39d4 <__aeabi_lmul+0x34>
    39cc:	2380      	movs	r3, #128	; 0x80
    39ce:	025b      	lsls	r3, r3, #9
    39d0:	4698      	mov	r8, r3
    39d2:	4447      	add	r7, r8
    39d4:	4663      	mov	r3, ip
    39d6:	0c25      	lsrs	r5, r4, #16
    39d8:	19ef      	adds	r7, r5, r7
    39da:	041d      	lsls	r5, r3, #16
    39dc:	464b      	mov	r3, r9
    39de:	434a      	muls	r2, r1
    39e0:	4343      	muls	r3, r0
    39e2:	0c2d      	lsrs	r5, r5, #16
    39e4:	0424      	lsls	r4, r4, #16
    39e6:	1964      	adds	r4, r4, r5
    39e8:	1899      	adds	r1, r3, r2
    39ea:	19c9      	adds	r1, r1, r7
    39ec:	0020      	movs	r0, r4
    39ee:	bc0c      	pop	{r2, r3}
    39f0:	4690      	mov	r8, r2
    39f2:	4699      	mov	r9, r3
    39f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    39f6:	46c0      	nop			; (mov r8, r8)

000039f8 <__aeabi_d2uiz>:
    39f8:	b570      	push	{r4, r5, r6, lr}
    39fa:	2200      	movs	r2, #0
    39fc:	4b0c      	ldr	r3, [pc, #48]	; (3a30 <__aeabi_d2uiz+0x38>)
    39fe:	0004      	movs	r4, r0
    3a00:	000d      	movs	r5, r1
    3a02:	f7ff ff89 	bl	3918 <__aeabi_dcmpge>
    3a06:	2800      	cmp	r0, #0
    3a08:	d104      	bne.n	3a14 <__aeabi_d2uiz+0x1c>
    3a0a:	0020      	movs	r0, r4
    3a0c:	0029      	movs	r1, r5
    3a0e:	f001 fdff 	bl	5610 <__aeabi_d2iz>
    3a12:	bd70      	pop	{r4, r5, r6, pc}
    3a14:	4b06      	ldr	r3, [pc, #24]	; (3a30 <__aeabi_d2uiz+0x38>)
    3a16:	2200      	movs	r2, #0
    3a18:	0020      	movs	r0, r4
    3a1a:	0029      	movs	r1, r5
    3a1c:	f001 fa84 	bl	4f28 <__aeabi_dsub>
    3a20:	f001 fdf6 	bl	5610 <__aeabi_d2iz>
    3a24:	2380      	movs	r3, #128	; 0x80
    3a26:	061b      	lsls	r3, r3, #24
    3a28:	469c      	mov	ip, r3
    3a2a:	4460      	add	r0, ip
    3a2c:	e7f1      	b.n	3a12 <__aeabi_d2uiz+0x1a>
    3a2e:	46c0      	nop			; (mov r8, r8)
    3a30:	41e00000 	.word	0x41e00000

00003a34 <__eqsf2>:
    3a34:	0243      	lsls	r3, r0, #9
    3a36:	b570      	push	{r4, r5, r6, lr}
    3a38:	0042      	lsls	r2, r0, #1
    3a3a:	004c      	lsls	r4, r1, #1
    3a3c:	0a5d      	lsrs	r5, r3, #9
    3a3e:	0fc3      	lsrs	r3, r0, #31
    3a40:	0248      	lsls	r0, r1, #9
    3a42:	0e12      	lsrs	r2, r2, #24
    3a44:	0a46      	lsrs	r6, r0, #9
    3a46:	0e24      	lsrs	r4, r4, #24
    3a48:	0fc9      	lsrs	r1, r1, #31
    3a4a:	2aff      	cmp	r2, #255	; 0xff
    3a4c:	d00f      	beq.n	3a6e <__eqsf2+0x3a>
    3a4e:	2cff      	cmp	r4, #255	; 0xff
    3a50:	d011      	beq.n	3a76 <__eqsf2+0x42>
    3a52:	2001      	movs	r0, #1
    3a54:	42a2      	cmp	r2, r4
    3a56:	d000      	beq.n	3a5a <__eqsf2+0x26>
    3a58:	bd70      	pop	{r4, r5, r6, pc}
    3a5a:	42b5      	cmp	r5, r6
    3a5c:	d1fc      	bne.n	3a58 <__eqsf2+0x24>
    3a5e:	428b      	cmp	r3, r1
    3a60:	d00d      	beq.n	3a7e <__eqsf2+0x4a>
    3a62:	2a00      	cmp	r2, #0
    3a64:	d1f8      	bne.n	3a58 <__eqsf2+0x24>
    3a66:	0028      	movs	r0, r5
    3a68:	1e43      	subs	r3, r0, #1
    3a6a:	4198      	sbcs	r0, r3
    3a6c:	e7f4      	b.n	3a58 <__eqsf2+0x24>
    3a6e:	2001      	movs	r0, #1
    3a70:	2d00      	cmp	r5, #0
    3a72:	d1f1      	bne.n	3a58 <__eqsf2+0x24>
    3a74:	e7eb      	b.n	3a4e <__eqsf2+0x1a>
    3a76:	2001      	movs	r0, #1
    3a78:	2e00      	cmp	r6, #0
    3a7a:	d1ed      	bne.n	3a58 <__eqsf2+0x24>
    3a7c:	e7e9      	b.n	3a52 <__eqsf2+0x1e>
    3a7e:	2000      	movs	r0, #0
    3a80:	e7ea      	b.n	3a58 <__eqsf2+0x24>
    3a82:	46c0      	nop			; (mov r8, r8)

00003a84 <__gesf2>:
    3a84:	0243      	lsls	r3, r0, #9
    3a86:	b5f0      	push	{r4, r5, r6, r7, lr}
    3a88:	0042      	lsls	r2, r0, #1
    3a8a:	0a5d      	lsrs	r5, r3, #9
    3a8c:	0fc3      	lsrs	r3, r0, #31
    3a8e:	0248      	lsls	r0, r1, #9
    3a90:	0a44      	lsrs	r4, r0, #9
    3a92:	0048      	lsls	r0, r1, #1
    3a94:	0e12      	lsrs	r2, r2, #24
    3a96:	0e00      	lsrs	r0, r0, #24
    3a98:	0fc9      	lsrs	r1, r1, #31
    3a9a:	2aff      	cmp	r2, #255	; 0xff
    3a9c:	d01f      	beq.n	3ade <__gesf2+0x5a>
    3a9e:	28ff      	cmp	r0, #255	; 0xff
    3aa0:	d022      	beq.n	3ae8 <__gesf2+0x64>
    3aa2:	2a00      	cmp	r2, #0
    3aa4:	d109      	bne.n	3aba <__gesf2+0x36>
    3aa6:	426e      	negs	r6, r5
    3aa8:	416e      	adcs	r6, r5
    3aaa:	2800      	cmp	r0, #0
    3aac:	d10f      	bne.n	3ace <__gesf2+0x4a>
    3aae:	2c00      	cmp	r4, #0
    3ab0:	d10d      	bne.n	3ace <__gesf2+0x4a>
    3ab2:	2000      	movs	r0, #0
    3ab4:	2d00      	cmp	r5, #0
    3ab6:	d009      	beq.n	3acc <__gesf2+0x48>
    3ab8:	e005      	b.n	3ac6 <__gesf2+0x42>
    3aba:	2800      	cmp	r0, #0
    3abc:	d101      	bne.n	3ac2 <__gesf2+0x3e>
    3abe:	2c00      	cmp	r4, #0
    3ac0:	d001      	beq.n	3ac6 <__gesf2+0x42>
    3ac2:	428b      	cmp	r3, r1
    3ac4:	d013      	beq.n	3aee <__gesf2+0x6a>
    3ac6:	4258      	negs	r0, r3
    3ac8:	2301      	movs	r3, #1
    3aca:	4318      	orrs	r0, r3
    3acc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3ace:	2e00      	cmp	r6, #0
    3ad0:	d0f7      	beq.n	3ac2 <__gesf2+0x3e>
    3ad2:	4248      	negs	r0, r1
    3ad4:	4141      	adcs	r1, r0
    3ad6:	2001      	movs	r0, #1
    3ad8:	4249      	negs	r1, r1
    3ada:	4308      	orrs	r0, r1
    3adc:	e7f6      	b.n	3acc <__gesf2+0x48>
    3ade:	2d00      	cmp	r5, #0
    3ae0:	d0dd      	beq.n	3a9e <__gesf2+0x1a>
    3ae2:	2002      	movs	r0, #2
    3ae4:	4240      	negs	r0, r0
    3ae6:	e7f1      	b.n	3acc <__gesf2+0x48>
    3ae8:	2c00      	cmp	r4, #0
    3aea:	d0da      	beq.n	3aa2 <__gesf2+0x1e>
    3aec:	e7f9      	b.n	3ae2 <__gesf2+0x5e>
    3aee:	4282      	cmp	r2, r0
    3af0:	dce9      	bgt.n	3ac6 <__gesf2+0x42>
    3af2:	db04      	blt.n	3afe <__gesf2+0x7a>
    3af4:	42a5      	cmp	r5, r4
    3af6:	d8e6      	bhi.n	3ac6 <__gesf2+0x42>
    3af8:	2000      	movs	r0, #0
    3afa:	42a5      	cmp	r5, r4
    3afc:	d2e6      	bcs.n	3acc <__gesf2+0x48>
    3afe:	4258      	negs	r0, r3
    3b00:	4143      	adcs	r3, r0
    3b02:	2001      	movs	r0, #1
    3b04:	425b      	negs	r3, r3
    3b06:	4318      	orrs	r0, r3
    3b08:	e7e0      	b.n	3acc <__gesf2+0x48>
    3b0a:	46c0      	nop			; (mov r8, r8)

00003b0c <__lesf2>:
    3b0c:	0243      	lsls	r3, r0, #9
    3b0e:	b5f0      	push	{r4, r5, r6, r7, lr}
    3b10:	0042      	lsls	r2, r0, #1
    3b12:	004c      	lsls	r4, r1, #1
    3b14:	0a5e      	lsrs	r6, r3, #9
    3b16:	0fc3      	lsrs	r3, r0, #31
    3b18:	0248      	lsls	r0, r1, #9
    3b1a:	0e12      	lsrs	r2, r2, #24
    3b1c:	0a45      	lsrs	r5, r0, #9
    3b1e:	0e24      	lsrs	r4, r4, #24
    3b20:	0fc9      	lsrs	r1, r1, #31
    3b22:	2aff      	cmp	r2, #255	; 0xff
    3b24:	d017      	beq.n	3b56 <__lesf2+0x4a>
    3b26:	2cff      	cmp	r4, #255	; 0xff
    3b28:	d019      	beq.n	3b5e <__lesf2+0x52>
    3b2a:	2a00      	cmp	r2, #0
    3b2c:	d10b      	bne.n	3b46 <__lesf2+0x3a>
    3b2e:	4270      	negs	r0, r6
    3b30:	4170      	adcs	r0, r6
    3b32:	2c00      	cmp	r4, #0
    3b34:	d017      	beq.n	3b66 <__lesf2+0x5a>
    3b36:	2800      	cmp	r0, #0
    3b38:	d007      	beq.n	3b4a <__lesf2+0x3e>
    3b3a:	4248      	negs	r0, r1
    3b3c:	4141      	adcs	r1, r0
    3b3e:	2001      	movs	r0, #1
    3b40:	4249      	negs	r1, r1
    3b42:	4308      	orrs	r0, r1
    3b44:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3b46:	2c00      	cmp	r4, #0
    3b48:	d013      	beq.n	3b72 <__lesf2+0x66>
    3b4a:	428b      	cmp	r3, r1
    3b4c:	d014      	beq.n	3b78 <__lesf2+0x6c>
    3b4e:	4258      	negs	r0, r3
    3b50:	2301      	movs	r3, #1
    3b52:	4318      	orrs	r0, r3
    3b54:	e7f6      	b.n	3b44 <__lesf2+0x38>
    3b56:	2002      	movs	r0, #2
    3b58:	2e00      	cmp	r6, #0
    3b5a:	d1f3      	bne.n	3b44 <__lesf2+0x38>
    3b5c:	e7e3      	b.n	3b26 <__lesf2+0x1a>
    3b5e:	2002      	movs	r0, #2
    3b60:	2d00      	cmp	r5, #0
    3b62:	d1ef      	bne.n	3b44 <__lesf2+0x38>
    3b64:	e7e1      	b.n	3b2a <__lesf2+0x1e>
    3b66:	2d00      	cmp	r5, #0
    3b68:	d1e5      	bne.n	3b36 <__lesf2+0x2a>
    3b6a:	2000      	movs	r0, #0
    3b6c:	2e00      	cmp	r6, #0
    3b6e:	d0e9      	beq.n	3b44 <__lesf2+0x38>
    3b70:	e7ed      	b.n	3b4e <__lesf2+0x42>
    3b72:	2d00      	cmp	r5, #0
    3b74:	d1e9      	bne.n	3b4a <__lesf2+0x3e>
    3b76:	e7ea      	b.n	3b4e <__lesf2+0x42>
    3b78:	42a2      	cmp	r2, r4
    3b7a:	dce8      	bgt.n	3b4e <__lesf2+0x42>
    3b7c:	db04      	blt.n	3b88 <__lesf2+0x7c>
    3b7e:	42ae      	cmp	r6, r5
    3b80:	d8e5      	bhi.n	3b4e <__lesf2+0x42>
    3b82:	2000      	movs	r0, #0
    3b84:	42ae      	cmp	r6, r5
    3b86:	d2dd      	bcs.n	3b44 <__lesf2+0x38>
    3b88:	4258      	negs	r0, r3
    3b8a:	4143      	adcs	r3, r0
    3b8c:	2001      	movs	r0, #1
    3b8e:	425b      	negs	r3, r3
    3b90:	4318      	orrs	r0, r3
    3b92:	e7d7      	b.n	3b44 <__lesf2+0x38>

00003b94 <__aeabi_dadd>:
    3b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3b96:	4656      	mov	r6, sl
    3b98:	465f      	mov	r7, fp
    3b9a:	464d      	mov	r5, r9
    3b9c:	4644      	mov	r4, r8
    3b9e:	b4f0      	push	{r4, r5, r6, r7}
    3ba0:	000f      	movs	r7, r1
    3ba2:	0ffd      	lsrs	r5, r7, #31
    3ba4:	46aa      	mov	sl, r5
    3ba6:	0309      	lsls	r1, r1, #12
    3ba8:	007c      	lsls	r4, r7, #1
    3baa:	002e      	movs	r6, r5
    3bac:	005f      	lsls	r7, r3, #1
    3bae:	0f45      	lsrs	r5, r0, #29
    3bb0:	0a49      	lsrs	r1, r1, #9
    3bb2:	0d7f      	lsrs	r7, r7, #21
    3bb4:	4329      	orrs	r1, r5
    3bb6:	00c5      	lsls	r5, r0, #3
    3bb8:	0318      	lsls	r0, r3, #12
    3bba:	46bc      	mov	ip, r7
    3bbc:	0a40      	lsrs	r0, r0, #9
    3bbe:	0f57      	lsrs	r7, r2, #29
    3bc0:	0d64      	lsrs	r4, r4, #21
    3bc2:	0fdb      	lsrs	r3, r3, #31
    3bc4:	4338      	orrs	r0, r7
    3bc6:	00d2      	lsls	r2, r2, #3
    3bc8:	459a      	cmp	sl, r3
    3bca:	d100      	bne.n	3bce <__aeabi_dadd+0x3a>
    3bcc:	e0aa      	b.n	3d24 <__aeabi_dadd+0x190>
    3bce:	4666      	mov	r6, ip
    3bd0:	1ba6      	subs	r6, r4, r6
    3bd2:	2e00      	cmp	r6, #0
    3bd4:	dc00      	bgt.n	3bd8 <__aeabi_dadd+0x44>
    3bd6:	e0ff      	b.n	3dd8 <__aeabi_dadd+0x244>
    3bd8:	4663      	mov	r3, ip
    3bda:	2b00      	cmp	r3, #0
    3bdc:	d139      	bne.n	3c52 <__aeabi_dadd+0xbe>
    3bde:	0003      	movs	r3, r0
    3be0:	4313      	orrs	r3, r2
    3be2:	d000      	beq.n	3be6 <__aeabi_dadd+0x52>
    3be4:	e0d9      	b.n	3d9a <__aeabi_dadd+0x206>
    3be6:	076b      	lsls	r3, r5, #29
    3be8:	d009      	beq.n	3bfe <__aeabi_dadd+0x6a>
    3bea:	230f      	movs	r3, #15
    3bec:	402b      	ands	r3, r5
    3bee:	2b04      	cmp	r3, #4
    3bf0:	d005      	beq.n	3bfe <__aeabi_dadd+0x6a>
    3bf2:	1d2b      	adds	r3, r5, #4
    3bf4:	42ab      	cmp	r3, r5
    3bf6:	41ad      	sbcs	r5, r5
    3bf8:	426d      	negs	r5, r5
    3bfa:	1949      	adds	r1, r1, r5
    3bfc:	001d      	movs	r5, r3
    3bfe:	020b      	lsls	r3, r1, #8
    3c00:	d400      	bmi.n	3c04 <__aeabi_dadd+0x70>
    3c02:	e082      	b.n	3d0a <__aeabi_dadd+0x176>
    3c04:	4bca      	ldr	r3, [pc, #808]	; (3f30 <__aeabi_dadd+0x39c>)
    3c06:	3401      	adds	r4, #1
    3c08:	429c      	cmp	r4, r3
    3c0a:	d100      	bne.n	3c0e <__aeabi_dadd+0x7a>
    3c0c:	e0fe      	b.n	3e0c <__aeabi_dadd+0x278>
    3c0e:	000a      	movs	r2, r1
    3c10:	4656      	mov	r6, sl
    3c12:	4bc8      	ldr	r3, [pc, #800]	; (3f34 <__aeabi_dadd+0x3a0>)
    3c14:	08ed      	lsrs	r5, r5, #3
    3c16:	401a      	ands	r2, r3
    3c18:	0750      	lsls	r0, r2, #29
    3c1a:	0564      	lsls	r4, r4, #21
    3c1c:	0252      	lsls	r2, r2, #9
    3c1e:	4305      	orrs	r5, r0
    3c20:	0b12      	lsrs	r2, r2, #12
    3c22:	0d64      	lsrs	r4, r4, #21
    3c24:	2100      	movs	r1, #0
    3c26:	0312      	lsls	r2, r2, #12
    3c28:	0d0b      	lsrs	r3, r1, #20
    3c2a:	051b      	lsls	r3, r3, #20
    3c2c:	0564      	lsls	r4, r4, #21
    3c2e:	0b12      	lsrs	r2, r2, #12
    3c30:	431a      	orrs	r2, r3
    3c32:	0863      	lsrs	r3, r4, #1
    3c34:	4cc0      	ldr	r4, [pc, #768]	; (3f38 <__aeabi_dadd+0x3a4>)
    3c36:	07f6      	lsls	r6, r6, #31
    3c38:	4014      	ands	r4, r2
    3c3a:	431c      	orrs	r4, r3
    3c3c:	0064      	lsls	r4, r4, #1
    3c3e:	0864      	lsrs	r4, r4, #1
    3c40:	4334      	orrs	r4, r6
    3c42:	0028      	movs	r0, r5
    3c44:	0021      	movs	r1, r4
    3c46:	bc3c      	pop	{r2, r3, r4, r5}
    3c48:	4690      	mov	r8, r2
    3c4a:	4699      	mov	r9, r3
    3c4c:	46a2      	mov	sl, r4
    3c4e:	46ab      	mov	fp, r5
    3c50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3c52:	4bb7      	ldr	r3, [pc, #732]	; (3f30 <__aeabi_dadd+0x39c>)
    3c54:	429c      	cmp	r4, r3
    3c56:	d0c6      	beq.n	3be6 <__aeabi_dadd+0x52>
    3c58:	2380      	movs	r3, #128	; 0x80
    3c5a:	041b      	lsls	r3, r3, #16
    3c5c:	4318      	orrs	r0, r3
    3c5e:	2e38      	cmp	r6, #56	; 0x38
    3c60:	dd00      	ble.n	3c64 <__aeabi_dadd+0xd0>
    3c62:	e0eb      	b.n	3e3c <__aeabi_dadd+0x2a8>
    3c64:	2e1f      	cmp	r6, #31
    3c66:	dd00      	ble.n	3c6a <__aeabi_dadd+0xd6>
    3c68:	e11e      	b.n	3ea8 <__aeabi_dadd+0x314>
    3c6a:	2320      	movs	r3, #32
    3c6c:	1b9b      	subs	r3, r3, r6
    3c6e:	469c      	mov	ip, r3
    3c70:	0003      	movs	r3, r0
    3c72:	4667      	mov	r7, ip
    3c74:	40bb      	lsls	r3, r7
    3c76:	4698      	mov	r8, r3
    3c78:	0013      	movs	r3, r2
    3c7a:	4647      	mov	r7, r8
    3c7c:	40f3      	lsrs	r3, r6
    3c7e:	433b      	orrs	r3, r7
    3c80:	4667      	mov	r7, ip
    3c82:	40ba      	lsls	r2, r7
    3c84:	1e57      	subs	r7, r2, #1
    3c86:	41ba      	sbcs	r2, r7
    3c88:	4313      	orrs	r3, r2
    3c8a:	0002      	movs	r2, r0
    3c8c:	40f2      	lsrs	r2, r6
    3c8e:	1aeb      	subs	r3, r5, r3
    3c90:	429d      	cmp	r5, r3
    3c92:	41b6      	sbcs	r6, r6
    3c94:	001d      	movs	r5, r3
    3c96:	1a8a      	subs	r2, r1, r2
    3c98:	4276      	negs	r6, r6
    3c9a:	1b91      	subs	r1, r2, r6
    3c9c:	020b      	lsls	r3, r1, #8
    3c9e:	d531      	bpl.n	3d04 <__aeabi_dadd+0x170>
    3ca0:	024a      	lsls	r2, r1, #9
    3ca2:	0a56      	lsrs	r6, r2, #9
    3ca4:	2e00      	cmp	r6, #0
    3ca6:	d100      	bne.n	3caa <__aeabi_dadd+0x116>
    3ca8:	e0b4      	b.n	3e14 <__aeabi_dadd+0x280>
    3caa:	0030      	movs	r0, r6
    3cac:	f001 fecc 	bl	5a48 <__clzsi2>
    3cb0:	0003      	movs	r3, r0
    3cb2:	3b08      	subs	r3, #8
    3cb4:	2b1f      	cmp	r3, #31
    3cb6:	dd00      	ble.n	3cba <__aeabi_dadd+0x126>
    3cb8:	e0b5      	b.n	3e26 <__aeabi_dadd+0x292>
    3cba:	2220      	movs	r2, #32
    3cbc:	0029      	movs	r1, r5
    3cbe:	1ad2      	subs	r2, r2, r3
    3cc0:	40d1      	lsrs	r1, r2
    3cc2:	409e      	lsls	r6, r3
    3cc4:	000a      	movs	r2, r1
    3cc6:	409d      	lsls	r5, r3
    3cc8:	4332      	orrs	r2, r6
    3cca:	429c      	cmp	r4, r3
    3ccc:	dd00      	ble.n	3cd0 <__aeabi_dadd+0x13c>
    3cce:	e0b1      	b.n	3e34 <__aeabi_dadd+0x2a0>
    3cd0:	1b1c      	subs	r4, r3, r4
    3cd2:	1c63      	adds	r3, r4, #1
    3cd4:	2b1f      	cmp	r3, #31
    3cd6:	dd00      	ble.n	3cda <__aeabi_dadd+0x146>
    3cd8:	e0d5      	b.n	3e86 <__aeabi_dadd+0x2f2>
    3cda:	2120      	movs	r1, #32
    3cdc:	0014      	movs	r4, r2
    3cde:	0028      	movs	r0, r5
    3ce0:	1ac9      	subs	r1, r1, r3
    3ce2:	408c      	lsls	r4, r1
    3ce4:	40d8      	lsrs	r0, r3
    3ce6:	408d      	lsls	r5, r1
    3ce8:	4304      	orrs	r4, r0
    3cea:	40da      	lsrs	r2, r3
    3cec:	1e68      	subs	r0, r5, #1
    3cee:	4185      	sbcs	r5, r0
    3cf0:	0011      	movs	r1, r2
    3cf2:	4325      	orrs	r5, r4
    3cf4:	2400      	movs	r4, #0
    3cf6:	e776      	b.n	3be6 <__aeabi_dadd+0x52>
    3cf8:	4641      	mov	r1, r8
    3cfa:	4331      	orrs	r1, r6
    3cfc:	d100      	bne.n	3d00 <__aeabi_dadd+0x16c>
    3cfe:	e234      	b.n	416a <__aeabi_dadd+0x5d6>
    3d00:	0031      	movs	r1, r6
    3d02:	4645      	mov	r5, r8
    3d04:	076b      	lsls	r3, r5, #29
    3d06:	d000      	beq.n	3d0a <__aeabi_dadd+0x176>
    3d08:	e76f      	b.n	3bea <__aeabi_dadd+0x56>
    3d0a:	4656      	mov	r6, sl
    3d0c:	0748      	lsls	r0, r1, #29
    3d0e:	08ed      	lsrs	r5, r5, #3
    3d10:	08c9      	lsrs	r1, r1, #3
    3d12:	4305      	orrs	r5, r0
    3d14:	4b86      	ldr	r3, [pc, #536]	; (3f30 <__aeabi_dadd+0x39c>)
    3d16:	429c      	cmp	r4, r3
    3d18:	d035      	beq.n	3d86 <__aeabi_dadd+0x1f2>
    3d1a:	030a      	lsls	r2, r1, #12
    3d1c:	0564      	lsls	r4, r4, #21
    3d1e:	0b12      	lsrs	r2, r2, #12
    3d20:	0d64      	lsrs	r4, r4, #21
    3d22:	e77f      	b.n	3c24 <__aeabi_dadd+0x90>
    3d24:	4663      	mov	r3, ip
    3d26:	1ae3      	subs	r3, r4, r3
    3d28:	469b      	mov	fp, r3
    3d2a:	2b00      	cmp	r3, #0
    3d2c:	dc00      	bgt.n	3d30 <__aeabi_dadd+0x19c>
    3d2e:	e08b      	b.n	3e48 <__aeabi_dadd+0x2b4>
    3d30:	4667      	mov	r7, ip
    3d32:	2f00      	cmp	r7, #0
    3d34:	d03c      	beq.n	3db0 <__aeabi_dadd+0x21c>
    3d36:	4f7e      	ldr	r7, [pc, #504]	; (3f30 <__aeabi_dadd+0x39c>)
    3d38:	42bc      	cmp	r4, r7
    3d3a:	d100      	bne.n	3d3e <__aeabi_dadd+0x1aa>
    3d3c:	e753      	b.n	3be6 <__aeabi_dadd+0x52>
    3d3e:	2780      	movs	r7, #128	; 0x80
    3d40:	043f      	lsls	r7, r7, #16
    3d42:	4338      	orrs	r0, r7
    3d44:	465b      	mov	r3, fp
    3d46:	2b38      	cmp	r3, #56	; 0x38
    3d48:	dc00      	bgt.n	3d4c <__aeabi_dadd+0x1b8>
    3d4a:	e0f7      	b.n	3f3c <__aeabi_dadd+0x3a8>
    3d4c:	4302      	orrs	r2, r0
    3d4e:	1e50      	subs	r0, r2, #1
    3d50:	4182      	sbcs	r2, r0
    3d52:	2000      	movs	r0, #0
    3d54:	b2d2      	uxtb	r2, r2
    3d56:	1953      	adds	r3, r2, r5
    3d58:	1842      	adds	r2, r0, r1
    3d5a:	42ab      	cmp	r3, r5
    3d5c:	4189      	sbcs	r1, r1
    3d5e:	001d      	movs	r5, r3
    3d60:	4249      	negs	r1, r1
    3d62:	1889      	adds	r1, r1, r2
    3d64:	020b      	lsls	r3, r1, #8
    3d66:	d5cd      	bpl.n	3d04 <__aeabi_dadd+0x170>
    3d68:	4b71      	ldr	r3, [pc, #452]	; (3f30 <__aeabi_dadd+0x39c>)
    3d6a:	3401      	adds	r4, #1
    3d6c:	429c      	cmp	r4, r3
    3d6e:	d100      	bne.n	3d72 <__aeabi_dadd+0x1de>
    3d70:	e13d      	b.n	3fee <__aeabi_dadd+0x45a>
    3d72:	2001      	movs	r0, #1
    3d74:	4a6f      	ldr	r2, [pc, #444]	; (3f34 <__aeabi_dadd+0x3a0>)
    3d76:	086b      	lsrs	r3, r5, #1
    3d78:	400a      	ands	r2, r1
    3d7a:	4028      	ands	r0, r5
    3d7c:	4318      	orrs	r0, r3
    3d7e:	07d5      	lsls	r5, r2, #31
    3d80:	4305      	orrs	r5, r0
    3d82:	0851      	lsrs	r1, r2, #1
    3d84:	e72f      	b.n	3be6 <__aeabi_dadd+0x52>
    3d86:	002b      	movs	r3, r5
    3d88:	430b      	orrs	r3, r1
    3d8a:	d100      	bne.n	3d8e <__aeabi_dadd+0x1fa>
    3d8c:	e1cb      	b.n	4126 <__aeabi_dadd+0x592>
    3d8e:	2380      	movs	r3, #128	; 0x80
    3d90:	031b      	lsls	r3, r3, #12
    3d92:	430b      	orrs	r3, r1
    3d94:	031a      	lsls	r2, r3, #12
    3d96:	0b12      	lsrs	r2, r2, #12
    3d98:	e744      	b.n	3c24 <__aeabi_dadd+0x90>
    3d9a:	3e01      	subs	r6, #1
    3d9c:	2e00      	cmp	r6, #0
    3d9e:	d16d      	bne.n	3e7c <__aeabi_dadd+0x2e8>
    3da0:	1aae      	subs	r6, r5, r2
    3da2:	42b5      	cmp	r5, r6
    3da4:	419b      	sbcs	r3, r3
    3da6:	1a09      	subs	r1, r1, r0
    3da8:	425b      	negs	r3, r3
    3daa:	1ac9      	subs	r1, r1, r3
    3dac:	0035      	movs	r5, r6
    3dae:	e775      	b.n	3c9c <__aeabi_dadd+0x108>
    3db0:	0007      	movs	r7, r0
    3db2:	4317      	orrs	r7, r2
    3db4:	d100      	bne.n	3db8 <__aeabi_dadd+0x224>
    3db6:	e716      	b.n	3be6 <__aeabi_dadd+0x52>
    3db8:	2301      	movs	r3, #1
    3dba:	425b      	negs	r3, r3
    3dbc:	469c      	mov	ip, r3
    3dbe:	44e3      	add	fp, ip
    3dc0:	465b      	mov	r3, fp
    3dc2:	2b00      	cmp	r3, #0
    3dc4:	d000      	beq.n	3dc8 <__aeabi_dadd+0x234>
    3dc6:	e0e0      	b.n	3f8a <__aeabi_dadd+0x3f6>
    3dc8:	18aa      	adds	r2, r5, r2
    3dca:	42aa      	cmp	r2, r5
    3dcc:	419b      	sbcs	r3, r3
    3dce:	1809      	adds	r1, r1, r0
    3dd0:	425b      	negs	r3, r3
    3dd2:	1859      	adds	r1, r3, r1
    3dd4:	0015      	movs	r5, r2
    3dd6:	e7c5      	b.n	3d64 <__aeabi_dadd+0x1d0>
    3dd8:	2e00      	cmp	r6, #0
    3dda:	d175      	bne.n	3ec8 <__aeabi_dadd+0x334>
    3ddc:	1c66      	adds	r6, r4, #1
    3dde:	0576      	lsls	r6, r6, #21
    3de0:	0d76      	lsrs	r6, r6, #21
    3de2:	2e01      	cmp	r6, #1
    3de4:	dc00      	bgt.n	3de8 <__aeabi_dadd+0x254>
    3de6:	e0f3      	b.n	3fd0 <__aeabi_dadd+0x43c>
    3de8:	1aae      	subs	r6, r5, r2
    3dea:	46b0      	mov	r8, r6
    3dec:	4545      	cmp	r5, r8
    3dee:	41bf      	sbcs	r7, r7
    3df0:	1a0e      	subs	r6, r1, r0
    3df2:	427f      	negs	r7, r7
    3df4:	1bf6      	subs	r6, r6, r7
    3df6:	0237      	lsls	r7, r6, #8
    3df8:	d400      	bmi.n	3dfc <__aeabi_dadd+0x268>
    3dfa:	e08f      	b.n	3f1c <__aeabi_dadd+0x388>
    3dfc:	1b55      	subs	r5, r2, r5
    3dfe:	42aa      	cmp	r2, r5
    3e00:	41b6      	sbcs	r6, r6
    3e02:	1a41      	subs	r1, r0, r1
    3e04:	4276      	negs	r6, r6
    3e06:	1b8e      	subs	r6, r1, r6
    3e08:	469a      	mov	sl, r3
    3e0a:	e74b      	b.n	3ca4 <__aeabi_dadd+0x110>
    3e0c:	4656      	mov	r6, sl
    3e0e:	2200      	movs	r2, #0
    3e10:	2500      	movs	r5, #0
    3e12:	e707      	b.n	3c24 <__aeabi_dadd+0x90>
    3e14:	0028      	movs	r0, r5
    3e16:	f001 fe17 	bl	5a48 <__clzsi2>
    3e1a:	3020      	adds	r0, #32
    3e1c:	0003      	movs	r3, r0
    3e1e:	3b08      	subs	r3, #8
    3e20:	2b1f      	cmp	r3, #31
    3e22:	dc00      	bgt.n	3e26 <__aeabi_dadd+0x292>
    3e24:	e749      	b.n	3cba <__aeabi_dadd+0x126>
    3e26:	002a      	movs	r2, r5
    3e28:	3828      	subs	r0, #40	; 0x28
    3e2a:	4082      	lsls	r2, r0
    3e2c:	2500      	movs	r5, #0
    3e2e:	429c      	cmp	r4, r3
    3e30:	dc00      	bgt.n	3e34 <__aeabi_dadd+0x2a0>
    3e32:	e74d      	b.n	3cd0 <__aeabi_dadd+0x13c>
    3e34:	493f      	ldr	r1, [pc, #252]	; (3f34 <__aeabi_dadd+0x3a0>)
    3e36:	1ae4      	subs	r4, r4, r3
    3e38:	4011      	ands	r1, r2
    3e3a:	e6d4      	b.n	3be6 <__aeabi_dadd+0x52>
    3e3c:	4302      	orrs	r2, r0
    3e3e:	1e50      	subs	r0, r2, #1
    3e40:	4182      	sbcs	r2, r0
    3e42:	b2d3      	uxtb	r3, r2
    3e44:	2200      	movs	r2, #0
    3e46:	e722      	b.n	3c8e <__aeabi_dadd+0xfa>
    3e48:	2b00      	cmp	r3, #0
    3e4a:	d000      	beq.n	3e4e <__aeabi_dadd+0x2ba>
    3e4c:	e0f3      	b.n	4036 <__aeabi_dadd+0x4a2>
    3e4e:	1c63      	adds	r3, r4, #1
    3e50:	469c      	mov	ip, r3
    3e52:	055b      	lsls	r3, r3, #21
    3e54:	0d5b      	lsrs	r3, r3, #21
    3e56:	2b01      	cmp	r3, #1
    3e58:	dc00      	bgt.n	3e5c <__aeabi_dadd+0x2c8>
    3e5a:	e09f      	b.n	3f9c <__aeabi_dadd+0x408>
    3e5c:	4b34      	ldr	r3, [pc, #208]	; (3f30 <__aeabi_dadd+0x39c>)
    3e5e:	459c      	cmp	ip, r3
    3e60:	d100      	bne.n	3e64 <__aeabi_dadd+0x2d0>
    3e62:	e0c3      	b.n	3fec <__aeabi_dadd+0x458>
    3e64:	18aa      	adds	r2, r5, r2
    3e66:	1809      	adds	r1, r1, r0
    3e68:	42aa      	cmp	r2, r5
    3e6a:	4180      	sbcs	r0, r0
    3e6c:	4240      	negs	r0, r0
    3e6e:	1841      	adds	r1, r0, r1
    3e70:	07cd      	lsls	r5, r1, #31
    3e72:	0852      	lsrs	r2, r2, #1
    3e74:	4315      	orrs	r5, r2
    3e76:	0849      	lsrs	r1, r1, #1
    3e78:	4664      	mov	r4, ip
    3e7a:	e6b4      	b.n	3be6 <__aeabi_dadd+0x52>
    3e7c:	4b2c      	ldr	r3, [pc, #176]	; (3f30 <__aeabi_dadd+0x39c>)
    3e7e:	429c      	cmp	r4, r3
    3e80:	d000      	beq.n	3e84 <__aeabi_dadd+0x2f0>
    3e82:	e6ec      	b.n	3c5e <__aeabi_dadd+0xca>
    3e84:	e6af      	b.n	3be6 <__aeabi_dadd+0x52>
    3e86:	0011      	movs	r1, r2
    3e88:	3c1f      	subs	r4, #31
    3e8a:	40e1      	lsrs	r1, r4
    3e8c:	000c      	movs	r4, r1
    3e8e:	2b20      	cmp	r3, #32
    3e90:	d100      	bne.n	3e94 <__aeabi_dadd+0x300>
    3e92:	e07f      	b.n	3f94 <__aeabi_dadd+0x400>
    3e94:	2140      	movs	r1, #64	; 0x40
    3e96:	1acb      	subs	r3, r1, r3
    3e98:	409a      	lsls	r2, r3
    3e9a:	4315      	orrs	r5, r2
    3e9c:	1e6a      	subs	r2, r5, #1
    3e9e:	4195      	sbcs	r5, r2
    3ea0:	2100      	movs	r1, #0
    3ea2:	4325      	orrs	r5, r4
    3ea4:	2400      	movs	r4, #0
    3ea6:	e72d      	b.n	3d04 <__aeabi_dadd+0x170>
    3ea8:	0033      	movs	r3, r6
    3eaa:	0007      	movs	r7, r0
    3eac:	3b20      	subs	r3, #32
    3eae:	40df      	lsrs	r7, r3
    3eb0:	003b      	movs	r3, r7
    3eb2:	2e20      	cmp	r6, #32
    3eb4:	d070      	beq.n	3f98 <__aeabi_dadd+0x404>
    3eb6:	2740      	movs	r7, #64	; 0x40
    3eb8:	1bbe      	subs	r6, r7, r6
    3eba:	40b0      	lsls	r0, r6
    3ebc:	4302      	orrs	r2, r0
    3ebe:	1e50      	subs	r0, r2, #1
    3ec0:	4182      	sbcs	r2, r0
    3ec2:	4313      	orrs	r3, r2
    3ec4:	2200      	movs	r2, #0
    3ec6:	e6e2      	b.n	3c8e <__aeabi_dadd+0xfa>
    3ec8:	2c00      	cmp	r4, #0
    3eca:	d04f      	beq.n	3f6c <__aeabi_dadd+0x3d8>
    3ecc:	4c18      	ldr	r4, [pc, #96]	; (3f30 <__aeabi_dadd+0x39c>)
    3ece:	45a4      	cmp	ip, r4
    3ed0:	d100      	bne.n	3ed4 <__aeabi_dadd+0x340>
    3ed2:	e0ab      	b.n	402c <__aeabi_dadd+0x498>
    3ed4:	2480      	movs	r4, #128	; 0x80
    3ed6:	0424      	lsls	r4, r4, #16
    3ed8:	4276      	negs	r6, r6
    3eda:	4321      	orrs	r1, r4
    3edc:	2e38      	cmp	r6, #56	; 0x38
    3ede:	dd00      	ble.n	3ee2 <__aeabi_dadd+0x34e>
    3ee0:	e0df      	b.n	40a2 <__aeabi_dadd+0x50e>
    3ee2:	2e1f      	cmp	r6, #31
    3ee4:	dd00      	ble.n	3ee8 <__aeabi_dadd+0x354>
    3ee6:	e143      	b.n	4170 <__aeabi_dadd+0x5dc>
    3ee8:	2720      	movs	r7, #32
    3eea:	1bbc      	subs	r4, r7, r6
    3eec:	46a1      	mov	r9, r4
    3eee:	000c      	movs	r4, r1
    3ef0:	464f      	mov	r7, r9
    3ef2:	40bc      	lsls	r4, r7
    3ef4:	46a0      	mov	r8, r4
    3ef6:	002c      	movs	r4, r5
    3ef8:	4647      	mov	r7, r8
    3efa:	40f4      	lsrs	r4, r6
    3efc:	433c      	orrs	r4, r7
    3efe:	464f      	mov	r7, r9
    3f00:	40bd      	lsls	r5, r7
    3f02:	1e6f      	subs	r7, r5, #1
    3f04:	41bd      	sbcs	r5, r7
    3f06:	40f1      	lsrs	r1, r6
    3f08:	432c      	orrs	r4, r5
    3f0a:	1b15      	subs	r5, r2, r4
    3f0c:	42aa      	cmp	r2, r5
    3f0e:	4192      	sbcs	r2, r2
    3f10:	1a41      	subs	r1, r0, r1
    3f12:	4252      	negs	r2, r2
    3f14:	1a89      	subs	r1, r1, r2
    3f16:	4664      	mov	r4, ip
    3f18:	469a      	mov	sl, r3
    3f1a:	e6bf      	b.n	3c9c <__aeabi_dadd+0x108>
    3f1c:	4641      	mov	r1, r8
    3f1e:	4645      	mov	r5, r8
    3f20:	4331      	orrs	r1, r6
    3f22:	d000      	beq.n	3f26 <__aeabi_dadd+0x392>
    3f24:	e6be      	b.n	3ca4 <__aeabi_dadd+0x110>
    3f26:	2600      	movs	r6, #0
    3f28:	2400      	movs	r4, #0
    3f2a:	2500      	movs	r5, #0
    3f2c:	e6f2      	b.n	3d14 <__aeabi_dadd+0x180>
    3f2e:	46c0      	nop			; (mov r8, r8)
    3f30:	000007ff 	.word	0x000007ff
    3f34:	ff7fffff 	.word	0xff7fffff
    3f38:	800fffff 	.word	0x800fffff
    3f3c:	2b1f      	cmp	r3, #31
    3f3e:	dc59      	bgt.n	3ff4 <__aeabi_dadd+0x460>
    3f40:	2720      	movs	r7, #32
    3f42:	1aff      	subs	r7, r7, r3
    3f44:	46bc      	mov	ip, r7
    3f46:	0007      	movs	r7, r0
    3f48:	4663      	mov	r3, ip
    3f4a:	409f      	lsls	r7, r3
    3f4c:	465b      	mov	r3, fp
    3f4e:	46b9      	mov	r9, r7
    3f50:	0017      	movs	r7, r2
    3f52:	40df      	lsrs	r7, r3
    3f54:	46b8      	mov	r8, r7
    3f56:	464f      	mov	r7, r9
    3f58:	4643      	mov	r3, r8
    3f5a:	431f      	orrs	r7, r3
    3f5c:	4663      	mov	r3, ip
    3f5e:	409a      	lsls	r2, r3
    3f60:	1e53      	subs	r3, r2, #1
    3f62:	419a      	sbcs	r2, r3
    3f64:	465b      	mov	r3, fp
    3f66:	433a      	orrs	r2, r7
    3f68:	40d8      	lsrs	r0, r3
    3f6a:	e6f4      	b.n	3d56 <__aeabi_dadd+0x1c2>
    3f6c:	000c      	movs	r4, r1
    3f6e:	432c      	orrs	r4, r5
    3f70:	d05c      	beq.n	402c <__aeabi_dadd+0x498>
    3f72:	43f6      	mvns	r6, r6
    3f74:	2e00      	cmp	r6, #0
    3f76:	d155      	bne.n	4024 <__aeabi_dadd+0x490>
    3f78:	1b55      	subs	r5, r2, r5
    3f7a:	42aa      	cmp	r2, r5
    3f7c:	41a4      	sbcs	r4, r4
    3f7e:	1a41      	subs	r1, r0, r1
    3f80:	4264      	negs	r4, r4
    3f82:	1b09      	subs	r1, r1, r4
    3f84:	469a      	mov	sl, r3
    3f86:	4664      	mov	r4, ip
    3f88:	e688      	b.n	3c9c <__aeabi_dadd+0x108>
    3f8a:	4f96      	ldr	r7, [pc, #600]	; (41e4 <__aeabi_dadd+0x650>)
    3f8c:	42bc      	cmp	r4, r7
    3f8e:	d000      	beq.n	3f92 <__aeabi_dadd+0x3fe>
    3f90:	e6d8      	b.n	3d44 <__aeabi_dadd+0x1b0>
    3f92:	e628      	b.n	3be6 <__aeabi_dadd+0x52>
    3f94:	2200      	movs	r2, #0
    3f96:	e780      	b.n	3e9a <__aeabi_dadd+0x306>
    3f98:	2000      	movs	r0, #0
    3f9a:	e78f      	b.n	3ebc <__aeabi_dadd+0x328>
    3f9c:	000b      	movs	r3, r1
    3f9e:	432b      	orrs	r3, r5
    3fa0:	2c00      	cmp	r4, #0
    3fa2:	d000      	beq.n	3fa6 <__aeabi_dadd+0x412>
    3fa4:	e0c2      	b.n	412c <__aeabi_dadd+0x598>
    3fa6:	2b00      	cmp	r3, #0
    3fa8:	d100      	bne.n	3fac <__aeabi_dadd+0x418>
    3faa:	e101      	b.n	41b0 <__aeabi_dadd+0x61c>
    3fac:	0003      	movs	r3, r0
    3fae:	4313      	orrs	r3, r2
    3fb0:	d100      	bne.n	3fb4 <__aeabi_dadd+0x420>
    3fb2:	e618      	b.n	3be6 <__aeabi_dadd+0x52>
    3fb4:	18ab      	adds	r3, r5, r2
    3fb6:	42ab      	cmp	r3, r5
    3fb8:	41b6      	sbcs	r6, r6
    3fba:	1809      	adds	r1, r1, r0
    3fbc:	4276      	negs	r6, r6
    3fbe:	1871      	adds	r1, r6, r1
    3fc0:	020a      	lsls	r2, r1, #8
    3fc2:	d400      	bmi.n	3fc6 <__aeabi_dadd+0x432>
    3fc4:	e109      	b.n	41da <__aeabi_dadd+0x646>
    3fc6:	4a88      	ldr	r2, [pc, #544]	; (41e8 <__aeabi_dadd+0x654>)
    3fc8:	001d      	movs	r5, r3
    3fca:	4011      	ands	r1, r2
    3fcc:	4664      	mov	r4, ip
    3fce:	e60a      	b.n	3be6 <__aeabi_dadd+0x52>
    3fd0:	2c00      	cmp	r4, #0
    3fd2:	d15b      	bne.n	408c <__aeabi_dadd+0x4f8>
    3fd4:	000e      	movs	r6, r1
    3fd6:	432e      	orrs	r6, r5
    3fd8:	d000      	beq.n	3fdc <__aeabi_dadd+0x448>
    3fda:	e08a      	b.n	40f2 <__aeabi_dadd+0x55e>
    3fdc:	0001      	movs	r1, r0
    3fde:	4311      	orrs	r1, r2
    3fe0:	d100      	bne.n	3fe4 <__aeabi_dadd+0x450>
    3fe2:	e0c2      	b.n	416a <__aeabi_dadd+0x5d6>
    3fe4:	0001      	movs	r1, r0
    3fe6:	0015      	movs	r5, r2
    3fe8:	469a      	mov	sl, r3
    3fea:	e5fc      	b.n	3be6 <__aeabi_dadd+0x52>
    3fec:	4664      	mov	r4, ip
    3fee:	2100      	movs	r1, #0
    3ff0:	2500      	movs	r5, #0
    3ff2:	e68f      	b.n	3d14 <__aeabi_dadd+0x180>
    3ff4:	2320      	movs	r3, #32
    3ff6:	425b      	negs	r3, r3
    3ff8:	469c      	mov	ip, r3
    3ffa:	44dc      	add	ip, fp
    3ffc:	4663      	mov	r3, ip
    3ffe:	0007      	movs	r7, r0
    4000:	40df      	lsrs	r7, r3
    4002:	465b      	mov	r3, fp
    4004:	46bc      	mov	ip, r7
    4006:	2b20      	cmp	r3, #32
    4008:	d100      	bne.n	400c <__aeabi_dadd+0x478>
    400a:	e0ac      	b.n	4166 <__aeabi_dadd+0x5d2>
    400c:	2340      	movs	r3, #64	; 0x40
    400e:	465f      	mov	r7, fp
    4010:	1bdb      	subs	r3, r3, r7
    4012:	4098      	lsls	r0, r3
    4014:	4302      	orrs	r2, r0
    4016:	1e50      	subs	r0, r2, #1
    4018:	4182      	sbcs	r2, r0
    401a:	4663      	mov	r3, ip
    401c:	4313      	orrs	r3, r2
    401e:	001a      	movs	r2, r3
    4020:	2000      	movs	r0, #0
    4022:	e698      	b.n	3d56 <__aeabi_dadd+0x1c2>
    4024:	4c6f      	ldr	r4, [pc, #444]	; (41e4 <__aeabi_dadd+0x650>)
    4026:	45a4      	cmp	ip, r4
    4028:	d000      	beq.n	402c <__aeabi_dadd+0x498>
    402a:	e757      	b.n	3edc <__aeabi_dadd+0x348>
    402c:	0001      	movs	r1, r0
    402e:	0015      	movs	r5, r2
    4030:	4664      	mov	r4, ip
    4032:	469a      	mov	sl, r3
    4034:	e5d7      	b.n	3be6 <__aeabi_dadd+0x52>
    4036:	2c00      	cmp	r4, #0
    4038:	d139      	bne.n	40ae <__aeabi_dadd+0x51a>
    403a:	000c      	movs	r4, r1
    403c:	432c      	orrs	r4, r5
    403e:	d06e      	beq.n	411e <__aeabi_dadd+0x58a>
    4040:	43db      	mvns	r3, r3
    4042:	2b00      	cmp	r3, #0
    4044:	d01a      	beq.n	407c <__aeabi_dadd+0x4e8>
    4046:	4c67      	ldr	r4, [pc, #412]	; (41e4 <__aeabi_dadd+0x650>)
    4048:	45a4      	cmp	ip, r4
    404a:	d068      	beq.n	411e <__aeabi_dadd+0x58a>
    404c:	2b38      	cmp	r3, #56	; 0x38
    404e:	dd00      	ble.n	4052 <__aeabi_dadd+0x4be>
    4050:	e0a4      	b.n	419c <__aeabi_dadd+0x608>
    4052:	2b1f      	cmp	r3, #31
    4054:	dd00      	ble.n	4058 <__aeabi_dadd+0x4c4>
    4056:	e0ae      	b.n	41b6 <__aeabi_dadd+0x622>
    4058:	2420      	movs	r4, #32
    405a:	000f      	movs	r7, r1
    405c:	1ae4      	subs	r4, r4, r3
    405e:	40a7      	lsls	r7, r4
    4060:	46b9      	mov	r9, r7
    4062:	002f      	movs	r7, r5
    4064:	40df      	lsrs	r7, r3
    4066:	46b8      	mov	r8, r7
    4068:	46a3      	mov	fp, r4
    406a:	464f      	mov	r7, r9
    406c:	4644      	mov	r4, r8
    406e:	4327      	orrs	r7, r4
    4070:	465c      	mov	r4, fp
    4072:	40a5      	lsls	r5, r4
    4074:	1e6c      	subs	r4, r5, #1
    4076:	41a5      	sbcs	r5, r4
    4078:	40d9      	lsrs	r1, r3
    407a:	433d      	orrs	r5, r7
    407c:	18ad      	adds	r5, r5, r2
    407e:	4295      	cmp	r5, r2
    4080:	419b      	sbcs	r3, r3
    4082:	1809      	adds	r1, r1, r0
    4084:	425b      	negs	r3, r3
    4086:	1859      	adds	r1, r3, r1
    4088:	4664      	mov	r4, ip
    408a:	e66b      	b.n	3d64 <__aeabi_dadd+0x1d0>
    408c:	000c      	movs	r4, r1
    408e:	432c      	orrs	r4, r5
    4090:	d115      	bne.n	40be <__aeabi_dadd+0x52a>
    4092:	0001      	movs	r1, r0
    4094:	4311      	orrs	r1, r2
    4096:	d07b      	beq.n	4190 <__aeabi_dadd+0x5fc>
    4098:	0001      	movs	r1, r0
    409a:	0015      	movs	r5, r2
    409c:	469a      	mov	sl, r3
    409e:	4c51      	ldr	r4, [pc, #324]	; (41e4 <__aeabi_dadd+0x650>)
    40a0:	e5a1      	b.n	3be6 <__aeabi_dadd+0x52>
    40a2:	430d      	orrs	r5, r1
    40a4:	1e69      	subs	r1, r5, #1
    40a6:	418d      	sbcs	r5, r1
    40a8:	2100      	movs	r1, #0
    40aa:	b2ec      	uxtb	r4, r5
    40ac:	e72d      	b.n	3f0a <__aeabi_dadd+0x376>
    40ae:	4c4d      	ldr	r4, [pc, #308]	; (41e4 <__aeabi_dadd+0x650>)
    40b0:	45a4      	cmp	ip, r4
    40b2:	d034      	beq.n	411e <__aeabi_dadd+0x58a>
    40b4:	2480      	movs	r4, #128	; 0x80
    40b6:	0424      	lsls	r4, r4, #16
    40b8:	425b      	negs	r3, r3
    40ba:	4321      	orrs	r1, r4
    40bc:	e7c6      	b.n	404c <__aeabi_dadd+0x4b8>
    40be:	0004      	movs	r4, r0
    40c0:	4314      	orrs	r4, r2
    40c2:	d04e      	beq.n	4162 <__aeabi_dadd+0x5ce>
    40c4:	08ed      	lsrs	r5, r5, #3
    40c6:	074c      	lsls	r4, r1, #29
    40c8:	432c      	orrs	r4, r5
    40ca:	2580      	movs	r5, #128	; 0x80
    40cc:	08c9      	lsrs	r1, r1, #3
    40ce:	032d      	lsls	r5, r5, #12
    40d0:	4229      	tst	r1, r5
    40d2:	d008      	beq.n	40e6 <__aeabi_dadd+0x552>
    40d4:	08c6      	lsrs	r6, r0, #3
    40d6:	422e      	tst	r6, r5
    40d8:	d105      	bne.n	40e6 <__aeabi_dadd+0x552>
    40da:	08d2      	lsrs	r2, r2, #3
    40dc:	0741      	lsls	r1, r0, #29
    40de:	4311      	orrs	r1, r2
    40e0:	000c      	movs	r4, r1
    40e2:	469a      	mov	sl, r3
    40e4:	0031      	movs	r1, r6
    40e6:	0f62      	lsrs	r2, r4, #29
    40e8:	00c9      	lsls	r1, r1, #3
    40ea:	00e5      	lsls	r5, r4, #3
    40ec:	4311      	orrs	r1, r2
    40ee:	4c3d      	ldr	r4, [pc, #244]	; (41e4 <__aeabi_dadd+0x650>)
    40f0:	e579      	b.n	3be6 <__aeabi_dadd+0x52>
    40f2:	0006      	movs	r6, r0
    40f4:	4316      	orrs	r6, r2
    40f6:	d100      	bne.n	40fa <__aeabi_dadd+0x566>
    40f8:	e575      	b.n	3be6 <__aeabi_dadd+0x52>
    40fa:	1aae      	subs	r6, r5, r2
    40fc:	46b0      	mov	r8, r6
    40fe:	4545      	cmp	r5, r8
    4100:	41bf      	sbcs	r7, r7
    4102:	1a0e      	subs	r6, r1, r0
    4104:	427f      	negs	r7, r7
    4106:	1bf6      	subs	r6, r6, r7
    4108:	0237      	lsls	r7, r6, #8
    410a:	d400      	bmi.n	410e <__aeabi_dadd+0x57a>
    410c:	e5f4      	b.n	3cf8 <__aeabi_dadd+0x164>
    410e:	1b55      	subs	r5, r2, r5
    4110:	42aa      	cmp	r2, r5
    4112:	41b6      	sbcs	r6, r6
    4114:	1a41      	subs	r1, r0, r1
    4116:	4276      	negs	r6, r6
    4118:	1b89      	subs	r1, r1, r6
    411a:	469a      	mov	sl, r3
    411c:	e563      	b.n	3be6 <__aeabi_dadd+0x52>
    411e:	0001      	movs	r1, r0
    4120:	0015      	movs	r5, r2
    4122:	4664      	mov	r4, ip
    4124:	e55f      	b.n	3be6 <__aeabi_dadd+0x52>
    4126:	2200      	movs	r2, #0
    4128:	2500      	movs	r5, #0
    412a:	e57b      	b.n	3c24 <__aeabi_dadd+0x90>
    412c:	2b00      	cmp	r3, #0
    412e:	d03b      	beq.n	41a8 <__aeabi_dadd+0x614>
    4130:	0003      	movs	r3, r0
    4132:	4313      	orrs	r3, r2
    4134:	d015      	beq.n	4162 <__aeabi_dadd+0x5ce>
    4136:	08ed      	lsrs	r5, r5, #3
    4138:	074b      	lsls	r3, r1, #29
    413a:	432b      	orrs	r3, r5
    413c:	2580      	movs	r5, #128	; 0x80
    413e:	08c9      	lsrs	r1, r1, #3
    4140:	032d      	lsls	r5, r5, #12
    4142:	4229      	tst	r1, r5
    4144:	d007      	beq.n	4156 <__aeabi_dadd+0x5c2>
    4146:	08c4      	lsrs	r4, r0, #3
    4148:	422c      	tst	r4, r5
    414a:	d104      	bne.n	4156 <__aeabi_dadd+0x5c2>
    414c:	0741      	lsls	r1, r0, #29
    414e:	000b      	movs	r3, r1
    4150:	0021      	movs	r1, r4
    4152:	08d2      	lsrs	r2, r2, #3
    4154:	4313      	orrs	r3, r2
    4156:	00c9      	lsls	r1, r1, #3
    4158:	0f5a      	lsrs	r2, r3, #29
    415a:	4311      	orrs	r1, r2
    415c:	00dd      	lsls	r5, r3, #3
    415e:	4c21      	ldr	r4, [pc, #132]	; (41e4 <__aeabi_dadd+0x650>)
    4160:	e541      	b.n	3be6 <__aeabi_dadd+0x52>
    4162:	4c20      	ldr	r4, [pc, #128]	; (41e4 <__aeabi_dadd+0x650>)
    4164:	e53f      	b.n	3be6 <__aeabi_dadd+0x52>
    4166:	2000      	movs	r0, #0
    4168:	e754      	b.n	4014 <__aeabi_dadd+0x480>
    416a:	2600      	movs	r6, #0
    416c:	2500      	movs	r5, #0
    416e:	e5d1      	b.n	3d14 <__aeabi_dadd+0x180>
    4170:	0034      	movs	r4, r6
    4172:	000f      	movs	r7, r1
    4174:	3c20      	subs	r4, #32
    4176:	40e7      	lsrs	r7, r4
    4178:	003c      	movs	r4, r7
    417a:	2e20      	cmp	r6, #32
    417c:	d02b      	beq.n	41d6 <__aeabi_dadd+0x642>
    417e:	2740      	movs	r7, #64	; 0x40
    4180:	1bbe      	subs	r6, r7, r6
    4182:	40b1      	lsls	r1, r6
    4184:	430d      	orrs	r5, r1
    4186:	1e69      	subs	r1, r5, #1
    4188:	418d      	sbcs	r5, r1
    418a:	2100      	movs	r1, #0
    418c:	432c      	orrs	r4, r5
    418e:	e6bc      	b.n	3f0a <__aeabi_dadd+0x376>
    4190:	2180      	movs	r1, #128	; 0x80
    4192:	2600      	movs	r6, #0
    4194:	0309      	lsls	r1, r1, #12
    4196:	4c13      	ldr	r4, [pc, #76]	; (41e4 <__aeabi_dadd+0x650>)
    4198:	2500      	movs	r5, #0
    419a:	e5bb      	b.n	3d14 <__aeabi_dadd+0x180>
    419c:	430d      	orrs	r5, r1
    419e:	1e69      	subs	r1, r5, #1
    41a0:	418d      	sbcs	r5, r1
    41a2:	2100      	movs	r1, #0
    41a4:	b2ed      	uxtb	r5, r5
    41a6:	e769      	b.n	407c <__aeabi_dadd+0x4e8>
    41a8:	0001      	movs	r1, r0
    41aa:	0015      	movs	r5, r2
    41ac:	4c0d      	ldr	r4, [pc, #52]	; (41e4 <__aeabi_dadd+0x650>)
    41ae:	e51a      	b.n	3be6 <__aeabi_dadd+0x52>
    41b0:	0001      	movs	r1, r0
    41b2:	0015      	movs	r5, r2
    41b4:	e517      	b.n	3be6 <__aeabi_dadd+0x52>
    41b6:	001c      	movs	r4, r3
    41b8:	000f      	movs	r7, r1
    41ba:	3c20      	subs	r4, #32
    41bc:	40e7      	lsrs	r7, r4
    41be:	003c      	movs	r4, r7
    41c0:	2b20      	cmp	r3, #32
    41c2:	d00c      	beq.n	41de <__aeabi_dadd+0x64a>
    41c4:	2740      	movs	r7, #64	; 0x40
    41c6:	1afb      	subs	r3, r7, r3
    41c8:	4099      	lsls	r1, r3
    41ca:	430d      	orrs	r5, r1
    41cc:	1e69      	subs	r1, r5, #1
    41ce:	418d      	sbcs	r5, r1
    41d0:	2100      	movs	r1, #0
    41d2:	4325      	orrs	r5, r4
    41d4:	e752      	b.n	407c <__aeabi_dadd+0x4e8>
    41d6:	2100      	movs	r1, #0
    41d8:	e7d4      	b.n	4184 <__aeabi_dadd+0x5f0>
    41da:	001d      	movs	r5, r3
    41dc:	e592      	b.n	3d04 <__aeabi_dadd+0x170>
    41de:	2100      	movs	r1, #0
    41e0:	e7f3      	b.n	41ca <__aeabi_dadd+0x636>
    41e2:	46c0      	nop			; (mov r8, r8)
    41e4:	000007ff 	.word	0x000007ff
    41e8:	ff7fffff 	.word	0xff7fffff

000041ec <__aeabi_ddiv>:
    41ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    41ee:	4656      	mov	r6, sl
    41f0:	464d      	mov	r5, r9
    41f2:	4644      	mov	r4, r8
    41f4:	465f      	mov	r7, fp
    41f6:	b4f0      	push	{r4, r5, r6, r7}
    41f8:	001d      	movs	r5, r3
    41fa:	030e      	lsls	r6, r1, #12
    41fc:	004c      	lsls	r4, r1, #1
    41fe:	0fcb      	lsrs	r3, r1, #31
    4200:	b087      	sub	sp, #28
    4202:	0007      	movs	r7, r0
    4204:	4692      	mov	sl, r2
    4206:	4681      	mov	r9, r0
    4208:	0b36      	lsrs	r6, r6, #12
    420a:	0d64      	lsrs	r4, r4, #21
    420c:	4698      	mov	r8, r3
    420e:	d06a      	beq.n	42e6 <__aeabi_ddiv+0xfa>
    4210:	4b6d      	ldr	r3, [pc, #436]	; (43c8 <__aeabi_ddiv+0x1dc>)
    4212:	429c      	cmp	r4, r3
    4214:	d035      	beq.n	4282 <__aeabi_ddiv+0x96>
    4216:	2280      	movs	r2, #128	; 0x80
    4218:	0f43      	lsrs	r3, r0, #29
    421a:	0412      	lsls	r2, r2, #16
    421c:	4313      	orrs	r3, r2
    421e:	00f6      	lsls	r6, r6, #3
    4220:	431e      	orrs	r6, r3
    4222:	00c3      	lsls	r3, r0, #3
    4224:	4699      	mov	r9, r3
    4226:	4b69      	ldr	r3, [pc, #420]	; (43cc <__aeabi_ddiv+0x1e0>)
    4228:	2700      	movs	r7, #0
    422a:	469c      	mov	ip, r3
    422c:	2300      	movs	r3, #0
    422e:	4464      	add	r4, ip
    4230:	9302      	str	r3, [sp, #8]
    4232:	032b      	lsls	r3, r5, #12
    4234:	0068      	lsls	r0, r5, #1
    4236:	0b1b      	lsrs	r3, r3, #12
    4238:	0fed      	lsrs	r5, r5, #31
    423a:	4651      	mov	r1, sl
    423c:	469b      	mov	fp, r3
    423e:	0d40      	lsrs	r0, r0, #21
    4240:	9500      	str	r5, [sp, #0]
    4242:	d100      	bne.n	4246 <__aeabi_ddiv+0x5a>
    4244:	e078      	b.n	4338 <__aeabi_ddiv+0x14c>
    4246:	4b60      	ldr	r3, [pc, #384]	; (43c8 <__aeabi_ddiv+0x1dc>)
    4248:	4298      	cmp	r0, r3
    424a:	d06c      	beq.n	4326 <__aeabi_ddiv+0x13a>
    424c:	465b      	mov	r3, fp
    424e:	00da      	lsls	r2, r3, #3
    4250:	0f4b      	lsrs	r3, r1, #29
    4252:	2180      	movs	r1, #128	; 0x80
    4254:	0409      	lsls	r1, r1, #16
    4256:	430b      	orrs	r3, r1
    4258:	4313      	orrs	r3, r2
    425a:	469b      	mov	fp, r3
    425c:	4653      	mov	r3, sl
    425e:	00d9      	lsls	r1, r3, #3
    4260:	4b5a      	ldr	r3, [pc, #360]	; (43cc <__aeabi_ddiv+0x1e0>)
    4262:	469c      	mov	ip, r3
    4264:	2300      	movs	r3, #0
    4266:	4460      	add	r0, ip
    4268:	4642      	mov	r2, r8
    426a:	1a20      	subs	r0, r4, r0
    426c:	406a      	eors	r2, r5
    426e:	4692      	mov	sl, r2
    4270:	9001      	str	r0, [sp, #4]
    4272:	431f      	orrs	r7, r3
    4274:	2f0f      	cmp	r7, #15
    4276:	d900      	bls.n	427a <__aeabi_ddiv+0x8e>
    4278:	e0b0      	b.n	43dc <__aeabi_ddiv+0x1f0>
    427a:	4855      	ldr	r0, [pc, #340]	; (43d0 <__aeabi_ddiv+0x1e4>)
    427c:	00bf      	lsls	r7, r7, #2
    427e:	59c0      	ldr	r0, [r0, r7]
    4280:	4687      	mov	pc, r0
    4282:	4337      	orrs	r7, r6
    4284:	d000      	beq.n	4288 <__aeabi_ddiv+0x9c>
    4286:	e088      	b.n	439a <__aeabi_ddiv+0x1ae>
    4288:	2300      	movs	r3, #0
    428a:	4699      	mov	r9, r3
    428c:	3302      	adds	r3, #2
    428e:	2708      	movs	r7, #8
    4290:	2600      	movs	r6, #0
    4292:	9302      	str	r3, [sp, #8]
    4294:	e7cd      	b.n	4232 <__aeabi_ddiv+0x46>
    4296:	4643      	mov	r3, r8
    4298:	46b3      	mov	fp, r6
    429a:	4649      	mov	r1, r9
    429c:	9300      	str	r3, [sp, #0]
    429e:	9b02      	ldr	r3, [sp, #8]
    42a0:	9a00      	ldr	r2, [sp, #0]
    42a2:	4692      	mov	sl, r2
    42a4:	2b02      	cmp	r3, #2
    42a6:	d000      	beq.n	42aa <__aeabi_ddiv+0xbe>
    42a8:	e1bf      	b.n	462a <__aeabi_ddiv+0x43e>
    42aa:	2100      	movs	r1, #0
    42ac:	4653      	mov	r3, sl
    42ae:	2201      	movs	r2, #1
    42b0:	2600      	movs	r6, #0
    42b2:	4689      	mov	r9, r1
    42b4:	401a      	ands	r2, r3
    42b6:	4b44      	ldr	r3, [pc, #272]	; (43c8 <__aeabi_ddiv+0x1dc>)
    42b8:	2100      	movs	r1, #0
    42ba:	0336      	lsls	r6, r6, #12
    42bc:	0d0c      	lsrs	r4, r1, #20
    42be:	0524      	lsls	r4, r4, #20
    42c0:	0b36      	lsrs	r6, r6, #12
    42c2:	4326      	orrs	r6, r4
    42c4:	4c43      	ldr	r4, [pc, #268]	; (43d4 <__aeabi_ddiv+0x1e8>)
    42c6:	051b      	lsls	r3, r3, #20
    42c8:	4026      	ands	r6, r4
    42ca:	431e      	orrs	r6, r3
    42cc:	0076      	lsls	r6, r6, #1
    42ce:	07d2      	lsls	r2, r2, #31
    42d0:	0876      	lsrs	r6, r6, #1
    42d2:	4316      	orrs	r6, r2
    42d4:	4648      	mov	r0, r9
    42d6:	0031      	movs	r1, r6
    42d8:	b007      	add	sp, #28
    42da:	bc3c      	pop	{r2, r3, r4, r5}
    42dc:	4690      	mov	r8, r2
    42de:	4699      	mov	r9, r3
    42e0:	46a2      	mov	sl, r4
    42e2:	46ab      	mov	fp, r5
    42e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    42e6:	0033      	movs	r3, r6
    42e8:	4303      	orrs	r3, r0
    42ea:	d04f      	beq.n	438c <__aeabi_ddiv+0x1a0>
    42ec:	2e00      	cmp	r6, #0
    42ee:	d100      	bne.n	42f2 <__aeabi_ddiv+0x106>
    42f0:	e1bc      	b.n	466c <__aeabi_ddiv+0x480>
    42f2:	0030      	movs	r0, r6
    42f4:	f001 fba8 	bl	5a48 <__clzsi2>
    42f8:	0003      	movs	r3, r0
    42fa:	3b0b      	subs	r3, #11
    42fc:	2b1c      	cmp	r3, #28
    42fe:	dd00      	ble.n	4302 <__aeabi_ddiv+0x116>
    4300:	e1ad      	b.n	465e <__aeabi_ddiv+0x472>
    4302:	221d      	movs	r2, #29
    4304:	0001      	movs	r1, r0
    4306:	1ad3      	subs	r3, r2, r3
    4308:	3908      	subs	r1, #8
    430a:	003a      	movs	r2, r7
    430c:	408f      	lsls	r7, r1
    430e:	408e      	lsls	r6, r1
    4310:	40da      	lsrs	r2, r3
    4312:	46b9      	mov	r9, r7
    4314:	4316      	orrs	r6, r2
    4316:	4b30      	ldr	r3, [pc, #192]	; (43d8 <__aeabi_ddiv+0x1ec>)
    4318:	2700      	movs	r7, #0
    431a:	469c      	mov	ip, r3
    431c:	2300      	movs	r3, #0
    431e:	4460      	add	r0, ip
    4320:	4244      	negs	r4, r0
    4322:	9302      	str	r3, [sp, #8]
    4324:	e785      	b.n	4232 <__aeabi_ddiv+0x46>
    4326:	4653      	mov	r3, sl
    4328:	465a      	mov	r2, fp
    432a:	4313      	orrs	r3, r2
    432c:	d12c      	bne.n	4388 <__aeabi_ddiv+0x19c>
    432e:	2300      	movs	r3, #0
    4330:	2100      	movs	r1, #0
    4332:	469b      	mov	fp, r3
    4334:	3302      	adds	r3, #2
    4336:	e797      	b.n	4268 <__aeabi_ddiv+0x7c>
    4338:	430b      	orrs	r3, r1
    433a:	d020      	beq.n	437e <__aeabi_ddiv+0x192>
    433c:	465b      	mov	r3, fp
    433e:	2b00      	cmp	r3, #0
    4340:	d100      	bne.n	4344 <__aeabi_ddiv+0x158>
    4342:	e19e      	b.n	4682 <__aeabi_ddiv+0x496>
    4344:	4658      	mov	r0, fp
    4346:	f001 fb7f 	bl	5a48 <__clzsi2>
    434a:	0003      	movs	r3, r0
    434c:	3b0b      	subs	r3, #11
    434e:	2b1c      	cmp	r3, #28
    4350:	dd00      	ble.n	4354 <__aeabi_ddiv+0x168>
    4352:	e18f      	b.n	4674 <__aeabi_ddiv+0x488>
    4354:	0002      	movs	r2, r0
    4356:	4659      	mov	r1, fp
    4358:	3a08      	subs	r2, #8
    435a:	4091      	lsls	r1, r2
    435c:	468b      	mov	fp, r1
    435e:	211d      	movs	r1, #29
    4360:	1acb      	subs	r3, r1, r3
    4362:	4651      	mov	r1, sl
    4364:	40d9      	lsrs	r1, r3
    4366:	000b      	movs	r3, r1
    4368:	4659      	mov	r1, fp
    436a:	430b      	orrs	r3, r1
    436c:	4651      	mov	r1, sl
    436e:	469b      	mov	fp, r3
    4370:	4091      	lsls	r1, r2
    4372:	4b19      	ldr	r3, [pc, #100]	; (43d8 <__aeabi_ddiv+0x1ec>)
    4374:	469c      	mov	ip, r3
    4376:	4460      	add	r0, ip
    4378:	4240      	negs	r0, r0
    437a:	2300      	movs	r3, #0
    437c:	e774      	b.n	4268 <__aeabi_ddiv+0x7c>
    437e:	2300      	movs	r3, #0
    4380:	2100      	movs	r1, #0
    4382:	469b      	mov	fp, r3
    4384:	3301      	adds	r3, #1
    4386:	e76f      	b.n	4268 <__aeabi_ddiv+0x7c>
    4388:	2303      	movs	r3, #3
    438a:	e76d      	b.n	4268 <__aeabi_ddiv+0x7c>
    438c:	2300      	movs	r3, #0
    438e:	4699      	mov	r9, r3
    4390:	3301      	adds	r3, #1
    4392:	2704      	movs	r7, #4
    4394:	2600      	movs	r6, #0
    4396:	9302      	str	r3, [sp, #8]
    4398:	e74b      	b.n	4232 <__aeabi_ddiv+0x46>
    439a:	2303      	movs	r3, #3
    439c:	270c      	movs	r7, #12
    439e:	9302      	str	r3, [sp, #8]
    43a0:	e747      	b.n	4232 <__aeabi_ddiv+0x46>
    43a2:	2201      	movs	r2, #1
    43a4:	1ad5      	subs	r5, r2, r3
    43a6:	2d38      	cmp	r5, #56	; 0x38
    43a8:	dc00      	bgt.n	43ac <__aeabi_ddiv+0x1c0>
    43aa:	e1b0      	b.n	470e <__aeabi_ddiv+0x522>
    43ac:	4653      	mov	r3, sl
    43ae:	401a      	ands	r2, r3
    43b0:	2100      	movs	r1, #0
    43b2:	2300      	movs	r3, #0
    43b4:	2600      	movs	r6, #0
    43b6:	4689      	mov	r9, r1
    43b8:	e77e      	b.n	42b8 <__aeabi_ddiv+0xcc>
    43ba:	2300      	movs	r3, #0
    43bc:	2680      	movs	r6, #128	; 0x80
    43be:	4699      	mov	r9, r3
    43c0:	2200      	movs	r2, #0
    43c2:	0336      	lsls	r6, r6, #12
    43c4:	4b00      	ldr	r3, [pc, #0]	; (43c8 <__aeabi_ddiv+0x1dc>)
    43c6:	e777      	b.n	42b8 <__aeabi_ddiv+0xcc>
    43c8:	000007ff 	.word	0x000007ff
    43cc:	fffffc01 	.word	0xfffffc01
    43d0:	00005e18 	.word	0x00005e18
    43d4:	800fffff 	.word	0x800fffff
    43d8:	000003f3 	.word	0x000003f3
    43dc:	455e      	cmp	r6, fp
    43de:	d900      	bls.n	43e2 <__aeabi_ddiv+0x1f6>
    43e0:	e172      	b.n	46c8 <__aeabi_ddiv+0x4dc>
    43e2:	d100      	bne.n	43e6 <__aeabi_ddiv+0x1fa>
    43e4:	e16d      	b.n	46c2 <__aeabi_ddiv+0x4d6>
    43e6:	9b01      	ldr	r3, [sp, #4]
    43e8:	464d      	mov	r5, r9
    43ea:	3b01      	subs	r3, #1
    43ec:	9301      	str	r3, [sp, #4]
    43ee:	2300      	movs	r3, #0
    43f0:	0034      	movs	r4, r6
    43f2:	9302      	str	r3, [sp, #8]
    43f4:	465b      	mov	r3, fp
    43f6:	021e      	lsls	r6, r3, #8
    43f8:	0e0b      	lsrs	r3, r1, #24
    43fa:	431e      	orrs	r6, r3
    43fc:	020b      	lsls	r3, r1, #8
    43fe:	9303      	str	r3, [sp, #12]
    4400:	0c33      	lsrs	r3, r6, #16
    4402:	4699      	mov	r9, r3
    4404:	0433      	lsls	r3, r6, #16
    4406:	0c1b      	lsrs	r3, r3, #16
    4408:	4649      	mov	r1, r9
    440a:	0020      	movs	r0, r4
    440c:	9300      	str	r3, [sp, #0]
    440e:	f001 fa8f 	bl	5930 <__aeabi_uidiv>
    4412:	9b00      	ldr	r3, [sp, #0]
    4414:	0037      	movs	r7, r6
    4416:	4343      	muls	r3, r0
    4418:	0006      	movs	r6, r0
    441a:	4649      	mov	r1, r9
    441c:	0020      	movs	r0, r4
    441e:	4698      	mov	r8, r3
    4420:	f001 fb0c 	bl	5a3c <__aeabi_uidivmod>
    4424:	0c2c      	lsrs	r4, r5, #16
    4426:	0409      	lsls	r1, r1, #16
    4428:	430c      	orrs	r4, r1
    442a:	45a0      	cmp	r8, r4
    442c:	d909      	bls.n	4442 <__aeabi_ddiv+0x256>
    442e:	19e4      	adds	r4, r4, r7
    4430:	1e73      	subs	r3, r6, #1
    4432:	42a7      	cmp	r7, r4
    4434:	d900      	bls.n	4438 <__aeabi_ddiv+0x24c>
    4436:	e15c      	b.n	46f2 <__aeabi_ddiv+0x506>
    4438:	45a0      	cmp	r8, r4
    443a:	d800      	bhi.n	443e <__aeabi_ddiv+0x252>
    443c:	e159      	b.n	46f2 <__aeabi_ddiv+0x506>
    443e:	3e02      	subs	r6, #2
    4440:	19e4      	adds	r4, r4, r7
    4442:	4643      	mov	r3, r8
    4444:	1ae4      	subs	r4, r4, r3
    4446:	4649      	mov	r1, r9
    4448:	0020      	movs	r0, r4
    444a:	f001 fa71 	bl	5930 <__aeabi_uidiv>
    444e:	0003      	movs	r3, r0
    4450:	9a00      	ldr	r2, [sp, #0]
    4452:	4680      	mov	r8, r0
    4454:	4353      	muls	r3, r2
    4456:	4649      	mov	r1, r9
    4458:	0020      	movs	r0, r4
    445a:	469b      	mov	fp, r3
    445c:	f001 faee 	bl	5a3c <__aeabi_uidivmod>
    4460:	042a      	lsls	r2, r5, #16
    4462:	0409      	lsls	r1, r1, #16
    4464:	0c12      	lsrs	r2, r2, #16
    4466:	430a      	orrs	r2, r1
    4468:	4593      	cmp	fp, r2
    446a:	d90d      	bls.n	4488 <__aeabi_ddiv+0x29c>
    446c:	4643      	mov	r3, r8
    446e:	19d2      	adds	r2, r2, r7
    4470:	3b01      	subs	r3, #1
    4472:	4297      	cmp	r7, r2
    4474:	d900      	bls.n	4478 <__aeabi_ddiv+0x28c>
    4476:	e13a      	b.n	46ee <__aeabi_ddiv+0x502>
    4478:	4593      	cmp	fp, r2
    447a:	d800      	bhi.n	447e <__aeabi_ddiv+0x292>
    447c:	e137      	b.n	46ee <__aeabi_ddiv+0x502>
    447e:	2302      	movs	r3, #2
    4480:	425b      	negs	r3, r3
    4482:	469c      	mov	ip, r3
    4484:	19d2      	adds	r2, r2, r7
    4486:	44e0      	add	r8, ip
    4488:	465b      	mov	r3, fp
    448a:	1ad2      	subs	r2, r2, r3
    448c:	4643      	mov	r3, r8
    448e:	0436      	lsls	r6, r6, #16
    4490:	4333      	orrs	r3, r6
    4492:	469b      	mov	fp, r3
    4494:	9903      	ldr	r1, [sp, #12]
    4496:	0c18      	lsrs	r0, r3, #16
    4498:	0c0b      	lsrs	r3, r1, #16
    449a:	001d      	movs	r5, r3
    449c:	9305      	str	r3, [sp, #20]
    449e:	0409      	lsls	r1, r1, #16
    44a0:	465b      	mov	r3, fp
    44a2:	0c09      	lsrs	r1, r1, #16
    44a4:	000c      	movs	r4, r1
    44a6:	041b      	lsls	r3, r3, #16
    44a8:	0c1b      	lsrs	r3, r3, #16
    44aa:	4344      	muls	r4, r0
    44ac:	9104      	str	r1, [sp, #16]
    44ae:	4359      	muls	r1, r3
    44b0:	436b      	muls	r3, r5
    44b2:	4368      	muls	r0, r5
    44b4:	191b      	adds	r3, r3, r4
    44b6:	0c0d      	lsrs	r5, r1, #16
    44b8:	18eb      	adds	r3, r5, r3
    44ba:	429c      	cmp	r4, r3
    44bc:	d903      	bls.n	44c6 <__aeabi_ddiv+0x2da>
    44be:	2480      	movs	r4, #128	; 0x80
    44c0:	0264      	lsls	r4, r4, #9
    44c2:	46a4      	mov	ip, r4
    44c4:	4460      	add	r0, ip
    44c6:	0c1c      	lsrs	r4, r3, #16
    44c8:	0409      	lsls	r1, r1, #16
    44ca:	041b      	lsls	r3, r3, #16
    44cc:	0c09      	lsrs	r1, r1, #16
    44ce:	1820      	adds	r0, r4, r0
    44d0:	185d      	adds	r5, r3, r1
    44d2:	4282      	cmp	r2, r0
    44d4:	d200      	bcs.n	44d8 <__aeabi_ddiv+0x2ec>
    44d6:	e0de      	b.n	4696 <__aeabi_ddiv+0x4aa>
    44d8:	d100      	bne.n	44dc <__aeabi_ddiv+0x2f0>
    44da:	e0d7      	b.n	468c <__aeabi_ddiv+0x4a0>
    44dc:	1a16      	subs	r6, r2, r0
    44de:	9b02      	ldr	r3, [sp, #8]
    44e0:	469c      	mov	ip, r3
    44e2:	1b5d      	subs	r5, r3, r5
    44e4:	45ac      	cmp	ip, r5
    44e6:	419b      	sbcs	r3, r3
    44e8:	425b      	negs	r3, r3
    44ea:	1af6      	subs	r6, r6, r3
    44ec:	42b7      	cmp	r7, r6
    44ee:	d100      	bne.n	44f2 <__aeabi_ddiv+0x306>
    44f0:	e106      	b.n	4700 <__aeabi_ddiv+0x514>
    44f2:	4649      	mov	r1, r9
    44f4:	0030      	movs	r0, r6
    44f6:	f001 fa1b 	bl	5930 <__aeabi_uidiv>
    44fa:	9b00      	ldr	r3, [sp, #0]
    44fc:	0004      	movs	r4, r0
    44fe:	4343      	muls	r3, r0
    4500:	4649      	mov	r1, r9
    4502:	0030      	movs	r0, r6
    4504:	4698      	mov	r8, r3
    4506:	f001 fa99 	bl	5a3c <__aeabi_uidivmod>
    450a:	0c2e      	lsrs	r6, r5, #16
    450c:	0409      	lsls	r1, r1, #16
    450e:	430e      	orrs	r6, r1
    4510:	45b0      	cmp	r8, r6
    4512:	d909      	bls.n	4528 <__aeabi_ddiv+0x33c>
    4514:	19f6      	adds	r6, r6, r7
    4516:	1e63      	subs	r3, r4, #1
    4518:	42b7      	cmp	r7, r6
    451a:	d900      	bls.n	451e <__aeabi_ddiv+0x332>
    451c:	e0f3      	b.n	4706 <__aeabi_ddiv+0x51a>
    451e:	45b0      	cmp	r8, r6
    4520:	d800      	bhi.n	4524 <__aeabi_ddiv+0x338>
    4522:	e0f0      	b.n	4706 <__aeabi_ddiv+0x51a>
    4524:	3c02      	subs	r4, #2
    4526:	19f6      	adds	r6, r6, r7
    4528:	4643      	mov	r3, r8
    452a:	1af3      	subs	r3, r6, r3
    452c:	4649      	mov	r1, r9
    452e:	0018      	movs	r0, r3
    4530:	9302      	str	r3, [sp, #8]
    4532:	f001 f9fd 	bl	5930 <__aeabi_uidiv>
    4536:	9b00      	ldr	r3, [sp, #0]
    4538:	0006      	movs	r6, r0
    453a:	4343      	muls	r3, r0
    453c:	4649      	mov	r1, r9
    453e:	9802      	ldr	r0, [sp, #8]
    4540:	4698      	mov	r8, r3
    4542:	f001 fa7b 	bl	5a3c <__aeabi_uidivmod>
    4546:	042d      	lsls	r5, r5, #16
    4548:	0409      	lsls	r1, r1, #16
    454a:	0c2d      	lsrs	r5, r5, #16
    454c:	430d      	orrs	r5, r1
    454e:	45a8      	cmp	r8, r5
    4550:	d909      	bls.n	4566 <__aeabi_ddiv+0x37a>
    4552:	19ed      	adds	r5, r5, r7
    4554:	1e73      	subs	r3, r6, #1
    4556:	42af      	cmp	r7, r5
    4558:	d900      	bls.n	455c <__aeabi_ddiv+0x370>
    455a:	e0d6      	b.n	470a <__aeabi_ddiv+0x51e>
    455c:	45a8      	cmp	r8, r5
    455e:	d800      	bhi.n	4562 <__aeabi_ddiv+0x376>
    4560:	e0d3      	b.n	470a <__aeabi_ddiv+0x51e>
    4562:	3e02      	subs	r6, #2
    4564:	19ed      	adds	r5, r5, r7
    4566:	0424      	lsls	r4, r4, #16
    4568:	0021      	movs	r1, r4
    456a:	4643      	mov	r3, r8
    456c:	4331      	orrs	r1, r6
    456e:	9e04      	ldr	r6, [sp, #16]
    4570:	9a05      	ldr	r2, [sp, #20]
    4572:	0030      	movs	r0, r6
    4574:	1aed      	subs	r5, r5, r3
    4576:	040b      	lsls	r3, r1, #16
    4578:	0c0c      	lsrs	r4, r1, #16
    457a:	0c1b      	lsrs	r3, r3, #16
    457c:	4358      	muls	r0, r3
    457e:	4366      	muls	r6, r4
    4580:	4353      	muls	r3, r2
    4582:	4354      	muls	r4, r2
    4584:	199a      	adds	r2, r3, r6
    4586:	0c03      	lsrs	r3, r0, #16
    4588:	189b      	adds	r3, r3, r2
    458a:	429e      	cmp	r6, r3
    458c:	d903      	bls.n	4596 <__aeabi_ddiv+0x3aa>
    458e:	2280      	movs	r2, #128	; 0x80
    4590:	0252      	lsls	r2, r2, #9
    4592:	4694      	mov	ip, r2
    4594:	4464      	add	r4, ip
    4596:	0c1a      	lsrs	r2, r3, #16
    4598:	0400      	lsls	r0, r0, #16
    459a:	041b      	lsls	r3, r3, #16
    459c:	0c00      	lsrs	r0, r0, #16
    459e:	1914      	adds	r4, r2, r4
    45a0:	181b      	adds	r3, r3, r0
    45a2:	42a5      	cmp	r5, r4
    45a4:	d350      	bcc.n	4648 <__aeabi_ddiv+0x45c>
    45a6:	d04d      	beq.n	4644 <__aeabi_ddiv+0x458>
    45a8:	2301      	movs	r3, #1
    45aa:	4319      	orrs	r1, r3
    45ac:	4a96      	ldr	r2, [pc, #600]	; (4808 <__aeabi_ddiv+0x61c>)
    45ae:	9b01      	ldr	r3, [sp, #4]
    45b0:	4694      	mov	ip, r2
    45b2:	4463      	add	r3, ip
    45b4:	2b00      	cmp	r3, #0
    45b6:	dc00      	bgt.n	45ba <__aeabi_ddiv+0x3ce>
    45b8:	e6f3      	b.n	43a2 <__aeabi_ddiv+0x1b6>
    45ba:	074a      	lsls	r2, r1, #29
    45bc:	d009      	beq.n	45d2 <__aeabi_ddiv+0x3e6>
    45be:	220f      	movs	r2, #15
    45c0:	400a      	ands	r2, r1
    45c2:	2a04      	cmp	r2, #4
    45c4:	d005      	beq.n	45d2 <__aeabi_ddiv+0x3e6>
    45c6:	1d0a      	adds	r2, r1, #4
    45c8:	428a      	cmp	r2, r1
    45ca:	4189      	sbcs	r1, r1
    45cc:	4249      	negs	r1, r1
    45ce:	448b      	add	fp, r1
    45d0:	0011      	movs	r1, r2
    45d2:	465a      	mov	r2, fp
    45d4:	01d2      	lsls	r2, r2, #7
    45d6:	d508      	bpl.n	45ea <__aeabi_ddiv+0x3fe>
    45d8:	465a      	mov	r2, fp
    45da:	4b8c      	ldr	r3, [pc, #560]	; (480c <__aeabi_ddiv+0x620>)
    45dc:	401a      	ands	r2, r3
    45de:	4693      	mov	fp, r2
    45e0:	2280      	movs	r2, #128	; 0x80
    45e2:	00d2      	lsls	r2, r2, #3
    45e4:	4694      	mov	ip, r2
    45e6:	9b01      	ldr	r3, [sp, #4]
    45e8:	4463      	add	r3, ip
    45ea:	4a89      	ldr	r2, [pc, #548]	; (4810 <__aeabi_ddiv+0x624>)
    45ec:	4293      	cmp	r3, r2
    45ee:	dd00      	ble.n	45f2 <__aeabi_ddiv+0x406>
    45f0:	e65b      	b.n	42aa <__aeabi_ddiv+0xbe>
    45f2:	465a      	mov	r2, fp
    45f4:	08c9      	lsrs	r1, r1, #3
    45f6:	0750      	lsls	r0, r2, #29
    45f8:	4308      	orrs	r0, r1
    45fa:	0256      	lsls	r6, r2, #9
    45fc:	4651      	mov	r1, sl
    45fe:	2201      	movs	r2, #1
    4600:	055b      	lsls	r3, r3, #21
    4602:	4681      	mov	r9, r0
    4604:	0b36      	lsrs	r6, r6, #12
    4606:	0d5b      	lsrs	r3, r3, #21
    4608:	400a      	ands	r2, r1
    460a:	e655      	b.n	42b8 <__aeabi_ddiv+0xcc>
    460c:	2380      	movs	r3, #128	; 0x80
    460e:	031b      	lsls	r3, r3, #12
    4610:	421e      	tst	r6, r3
    4612:	d011      	beq.n	4638 <__aeabi_ddiv+0x44c>
    4614:	465a      	mov	r2, fp
    4616:	421a      	tst	r2, r3
    4618:	d10e      	bne.n	4638 <__aeabi_ddiv+0x44c>
    461a:	465e      	mov	r6, fp
    461c:	431e      	orrs	r6, r3
    461e:	0336      	lsls	r6, r6, #12
    4620:	0b36      	lsrs	r6, r6, #12
    4622:	002a      	movs	r2, r5
    4624:	4689      	mov	r9, r1
    4626:	4b7b      	ldr	r3, [pc, #492]	; (4814 <__aeabi_ddiv+0x628>)
    4628:	e646      	b.n	42b8 <__aeabi_ddiv+0xcc>
    462a:	2b03      	cmp	r3, #3
    462c:	d100      	bne.n	4630 <__aeabi_ddiv+0x444>
    462e:	e0e1      	b.n	47f4 <__aeabi_ddiv+0x608>
    4630:	2b01      	cmp	r3, #1
    4632:	d1bb      	bne.n	45ac <__aeabi_ddiv+0x3c0>
    4634:	401a      	ands	r2, r3
    4636:	e6bb      	b.n	43b0 <__aeabi_ddiv+0x1c4>
    4638:	431e      	orrs	r6, r3
    463a:	0336      	lsls	r6, r6, #12
    463c:	0b36      	lsrs	r6, r6, #12
    463e:	4642      	mov	r2, r8
    4640:	4b74      	ldr	r3, [pc, #464]	; (4814 <__aeabi_ddiv+0x628>)
    4642:	e639      	b.n	42b8 <__aeabi_ddiv+0xcc>
    4644:	2b00      	cmp	r3, #0
    4646:	d0b1      	beq.n	45ac <__aeabi_ddiv+0x3c0>
    4648:	197d      	adds	r5, r7, r5
    464a:	1e4a      	subs	r2, r1, #1
    464c:	42af      	cmp	r7, r5
    464e:	d952      	bls.n	46f6 <__aeabi_ddiv+0x50a>
    4650:	0011      	movs	r1, r2
    4652:	42a5      	cmp	r5, r4
    4654:	d1a8      	bne.n	45a8 <__aeabi_ddiv+0x3bc>
    4656:	9a03      	ldr	r2, [sp, #12]
    4658:	429a      	cmp	r2, r3
    465a:	d1a5      	bne.n	45a8 <__aeabi_ddiv+0x3bc>
    465c:	e7a6      	b.n	45ac <__aeabi_ddiv+0x3c0>
    465e:	0003      	movs	r3, r0
    4660:	003e      	movs	r6, r7
    4662:	3b28      	subs	r3, #40	; 0x28
    4664:	409e      	lsls	r6, r3
    4666:	2300      	movs	r3, #0
    4668:	4699      	mov	r9, r3
    466a:	e654      	b.n	4316 <__aeabi_ddiv+0x12a>
    466c:	f001 f9ec 	bl	5a48 <__clzsi2>
    4670:	3020      	adds	r0, #32
    4672:	e641      	b.n	42f8 <__aeabi_ddiv+0x10c>
    4674:	0003      	movs	r3, r0
    4676:	4652      	mov	r2, sl
    4678:	3b28      	subs	r3, #40	; 0x28
    467a:	409a      	lsls	r2, r3
    467c:	2100      	movs	r1, #0
    467e:	4693      	mov	fp, r2
    4680:	e677      	b.n	4372 <__aeabi_ddiv+0x186>
    4682:	4650      	mov	r0, sl
    4684:	f001 f9e0 	bl	5a48 <__clzsi2>
    4688:	3020      	adds	r0, #32
    468a:	e65e      	b.n	434a <__aeabi_ddiv+0x15e>
    468c:	9b02      	ldr	r3, [sp, #8]
    468e:	2600      	movs	r6, #0
    4690:	42ab      	cmp	r3, r5
    4692:	d300      	bcc.n	4696 <__aeabi_ddiv+0x4aa>
    4694:	e723      	b.n	44de <__aeabi_ddiv+0x2f2>
    4696:	9e03      	ldr	r6, [sp, #12]
    4698:	9902      	ldr	r1, [sp, #8]
    469a:	46b4      	mov	ip, r6
    469c:	4461      	add	r1, ip
    469e:	4688      	mov	r8, r1
    46a0:	45b0      	cmp	r8, r6
    46a2:	41b6      	sbcs	r6, r6
    46a4:	465b      	mov	r3, fp
    46a6:	4276      	negs	r6, r6
    46a8:	19f6      	adds	r6, r6, r7
    46aa:	18b2      	adds	r2, r6, r2
    46ac:	3b01      	subs	r3, #1
    46ae:	9102      	str	r1, [sp, #8]
    46b0:	4297      	cmp	r7, r2
    46b2:	d213      	bcs.n	46dc <__aeabi_ddiv+0x4f0>
    46b4:	4290      	cmp	r0, r2
    46b6:	d84f      	bhi.n	4758 <__aeabi_ddiv+0x56c>
    46b8:	d100      	bne.n	46bc <__aeabi_ddiv+0x4d0>
    46ba:	e08e      	b.n	47da <__aeabi_ddiv+0x5ee>
    46bc:	1a16      	subs	r6, r2, r0
    46be:	469b      	mov	fp, r3
    46c0:	e70d      	b.n	44de <__aeabi_ddiv+0x2f2>
    46c2:	4589      	cmp	r9, r1
    46c4:	d200      	bcs.n	46c8 <__aeabi_ddiv+0x4dc>
    46c6:	e68e      	b.n	43e6 <__aeabi_ddiv+0x1fa>
    46c8:	0874      	lsrs	r4, r6, #1
    46ca:	464b      	mov	r3, r9
    46cc:	07f6      	lsls	r6, r6, #31
    46ce:	0035      	movs	r5, r6
    46d0:	085b      	lsrs	r3, r3, #1
    46d2:	431d      	orrs	r5, r3
    46d4:	464b      	mov	r3, r9
    46d6:	07db      	lsls	r3, r3, #31
    46d8:	9302      	str	r3, [sp, #8]
    46da:	e68b      	b.n	43f4 <__aeabi_ddiv+0x208>
    46dc:	4297      	cmp	r7, r2
    46de:	d1ed      	bne.n	46bc <__aeabi_ddiv+0x4d0>
    46e0:	9903      	ldr	r1, [sp, #12]
    46e2:	9c02      	ldr	r4, [sp, #8]
    46e4:	42a1      	cmp	r1, r4
    46e6:	d9e5      	bls.n	46b4 <__aeabi_ddiv+0x4c8>
    46e8:	1a3e      	subs	r6, r7, r0
    46ea:	469b      	mov	fp, r3
    46ec:	e6f7      	b.n	44de <__aeabi_ddiv+0x2f2>
    46ee:	4698      	mov	r8, r3
    46f0:	e6ca      	b.n	4488 <__aeabi_ddiv+0x29c>
    46f2:	001e      	movs	r6, r3
    46f4:	e6a5      	b.n	4442 <__aeabi_ddiv+0x256>
    46f6:	42ac      	cmp	r4, r5
    46f8:	d83e      	bhi.n	4778 <__aeabi_ddiv+0x58c>
    46fa:	d074      	beq.n	47e6 <__aeabi_ddiv+0x5fa>
    46fc:	0011      	movs	r1, r2
    46fe:	e753      	b.n	45a8 <__aeabi_ddiv+0x3bc>
    4700:	2101      	movs	r1, #1
    4702:	4249      	negs	r1, r1
    4704:	e752      	b.n	45ac <__aeabi_ddiv+0x3c0>
    4706:	001c      	movs	r4, r3
    4708:	e70e      	b.n	4528 <__aeabi_ddiv+0x33c>
    470a:	001e      	movs	r6, r3
    470c:	e72b      	b.n	4566 <__aeabi_ddiv+0x37a>
    470e:	2d1f      	cmp	r5, #31
    4710:	dc3c      	bgt.n	478c <__aeabi_ddiv+0x5a0>
    4712:	2320      	movs	r3, #32
    4714:	000a      	movs	r2, r1
    4716:	4658      	mov	r0, fp
    4718:	1b5b      	subs	r3, r3, r5
    471a:	4098      	lsls	r0, r3
    471c:	40ea      	lsrs	r2, r5
    471e:	4099      	lsls	r1, r3
    4720:	4302      	orrs	r2, r0
    4722:	1e48      	subs	r0, r1, #1
    4724:	4181      	sbcs	r1, r0
    4726:	465e      	mov	r6, fp
    4728:	4311      	orrs	r1, r2
    472a:	40ee      	lsrs	r6, r5
    472c:	074b      	lsls	r3, r1, #29
    472e:	d009      	beq.n	4744 <__aeabi_ddiv+0x558>
    4730:	230f      	movs	r3, #15
    4732:	400b      	ands	r3, r1
    4734:	2b04      	cmp	r3, #4
    4736:	d005      	beq.n	4744 <__aeabi_ddiv+0x558>
    4738:	000b      	movs	r3, r1
    473a:	1d19      	adds	r1, r3, #4
    473c:	4299      	cmp	r1, r3
    473e:	419b      	sbcs	r3, r3
    4740:	425b      	negs	r3, r3
    4742:	18f6      	adds	r6, r6, r3
    4744:	0233      	lsls	r3, r6, #8
    4746:	d53c      	bpl.n	47c2 <__aeabi_ddiv+0x5d6>
    4748:	4653      	mov	r3, sl
    474a:	2201      	movs	r2, #1
    474c:	2100      	movs	r1, #0
    474e:	401a      	ands	r2, r3
    4750:	2600      	movs	r6, #0
    4752:	2301      	movs	r3, #1
    4754:	4689      	mov	r9, r1
    4756:	e5af      	b.n	42b8 <__aeabi_ddiv+0xcc>
    4758:	2302      	movs	r3, #2
    475a:	425b      	negs	r3, r3
    475c:	469c      	mov	ip, r3
    475e:	9c03      	ldr	r4, [sp, #12]
    4760:	44e3      	add	fp, ip
    4762:	46a4      	mov	ip, r4
    4764:	9b02      	ldr	r3, [sp, #8]
    4766:	4463      	add	r3, ip
    4768:	4698      	mov	r8, r3
    476a:	45a0      	cmp	r8, r4
    476c:	41b6      	sbcs	r6, r6
    476e:	4276      	negs	r6, r6
    4770:	19f6      	adds	r6, r6, r7
    4772:	9302      	str	r3, [sp, #8]
    4774:	18b2      	adds	r2, r6, r2
    4776:	e6b1      	b.n	44dc <__aeabi_ddiv+0x2f0>
    4778:	9803      	ldr	r0, [sp, #12]
    477a:	1e8a      	subs	r2, r1, #2
    477c:	0041      	lsls	r1, r0, #1
    477e:	4281      	cmp	r1, r0
    4780:	41b6      	sbcs	r6, r6
    4782:	4276      	negs	r6, r6
    4784:	19f6      	adds	r6, r6, r7
    4786:	19ad      	adds	r5, r5, r6
    4788:	9103      	str	r1, [sp, #12]
    478a:	e761      	b.n	4650 <__aeabi_ddiv+0x464>
    478c:	221f      	movs	r2, #31
    478e:	4252      	negs	r2, r2
    4790:	1ad3      	subs	r3, r2, r3
    4792:	465a      	mov	r2, fp
    4794:	40da      	lsrs	r2, r3
    4796:	0013      	movs	r3, r2
    4798:	2d20      	cmp	r5, #32
    479a:	d029      	beq.n	47f0 <__aeabi_ddiv+0x604>
    479c:	2240      	movs	r2, #64	; 0x40
    479e:	4658      	mov	r0, fp
    47a0:	1b55      	subs	r5, r2, r5
    47a2:	40a8      	lsls	r0, r5
    47a4:	4301      	orrs	r1, r0
    47a6:	1e48      	subs	r0, r1, #1
    47a8:	4181      	sbcs	r1, r0
    47aa:	2007      	movs	r0, #7
    47ac:	430b      	orrs	r3, r1
    47ae:	4018      	ands	r0, r3
    47b0:	2600      	movs	r6, #0
    47b2:	2800      	cmp	r0, #0
    47b4:	d009      	beq.n	47ca <__aeabi_ddiv+0x5de>
    47b6:	220f      	movs	r2, #15
    47b8:	2600      	movs	r6, #0
    47ba:	401a      	ands	r2, r3
    47bc:	0019      	movs	r1, r3
    47be:	2a04      	cmp	r2, #4
    47c0:	d1bb      	bne.n	473a <__aeabi_ddiv+0x54e>
    47c2:	000b      	movs	r3, r1
    47c4:	0770      	lsls	r0, r6, #29
    47c6:	0276      	lsls	r6, r6, #9
    47c8:	0b36      	lsrs	r6, r6, #12
    47ca:	08db      	lsrs	r3, r3, #3
    47cc:	4303      	orrs	r3, r0
    47ce:	4699      	mov	r9, r3
    47d0:	2201      	movs	r2, #1
    47d2:	4653      	mov	r3, sl
    47d4:	401a      	ands	r2, r3
    47d6:	2300      	movs	r3, #0
    47d8:	e56e      	b.n	42b8 <__aeabi_ddiv+0xcc>
    47da:	9902      	ldr	r1, [sp, #8]
    47dc:	428d      	cmp	r5, r1
    47de:	d8bb      	bhi.n	4758 <__aeabi_ddiv+0x56c>
    47e0:	469b      	mov	fp, r3
    47e2:	2600      	movs	r6, #0
    47e4:	e67b      	b.n	44de <__aeabi_ddiv+0x2f2>
    47e6:	9803      	ldr	r0, [sp, #12]
    47e8:	4298      	cmp	r0, r3
    47ea:	d3c5      	bcc.n	4778 <__aeabi_ddiv+0x58c>
    47ec:	0011      	movs	r1, r2
    47ee:	e732      	b.n	4656 <__aeabi_ddiv+0x46a>
    47f0:	2000      	movs	r0, #0
    47f2:	e7d7      	b.n	47a4 <__aeabi_ddiv+0x5b8>
    47f4:	2680      	movs	r6, #128	; 0x80
    47f6:	465b      	mov	r3, fp
    47f8:	0336      	lsls	r6, r6, #12
    47fa:	431e      	orrs	r6, r3
    47fc:	0336      	lsls	r6, r6, #12
    47fe:	0b36      	lsrs	r6, r6, #12
    4800:	9a00      	ldr	r2, [sp, #0]
    4802:	4689      	mov	r9, r1
    4804:	4b03      	ldr	r3, [pc, #12]	; (4814 <__aeabi_ddiv+0x628>)
    4806:	e557      	b.n	42b8 <__aeabi_ddiv+0xcc>
    4808:	000003ff 	.word	0x000003ff
    480c:	feffffff 	.word	0xfeffffff
    4810:	000007fe 	.word	0x000007fe
    4814:	000007ff 	.word	0x000007ff

00004818 <__eqdf2>:
    4818:	b5f0      	push	{r4, r5, r6, r7, lr}
    481a:	465f      	mov	r7, fp
    481c:	4656      	mov	r6, sl
    481e:	464d      	mov	r5, r9
    4820:	4644      	mov	r4, r8
    4822:	b4f0      	push	{r4, r5, r6, r7}
    4824:	031f      	lsls	r7, r3, #12
    4826:	005c      	lsls	r4, r3, #1
    4828:	0fdb      	lsrs	r3, r3, #31
    482a:	469a      	mov	sl, r3
    482c:	4b19      	ldr	r3, [pc, #100]	; (4894 <__eqdf2+0x7c>)
    482e:	030e      	lsls	r6, r1, #12
    4830:	004d      	lsls	r5, r1, #1
    4832:	0fc9      	lsrs	r1, r1, #31
    4834:	4680      	mov	r8, r0
    4836:	0b36      	lsrs	r6, r6, #12
    4838:	0d6d      	lsrs	r5, r5, #21
    483a:	468b      	mov	fp, r1
    483c:	4691      	mov	r9, r2
    483e:	0b3f      	lsrs	r7, r7, #12
    4840:	0d64      	lsrs	r4, r4, #21
    4842:	429d      	cmp	r5, r3
    4844:	d019      	beq.n	487a <__eqdf2+0x62>
    4846:	4b13      	ldr	r3, [pc, #76]	; (4894 <__eqdf2+0x7c>)
    4848:	429c      	cmp	r4, r3
    484a:	d01b      	beq.n	4884 <__eqdf2+0x6c>
    484c:	2301      	movs	r3, #1
    484e:	42a5      	cmp	r5, r4
    4850:	d006      	beq.n	4860 <__eqdf2+0x48>
    4852:	0018      	movs	r0, r3
    4854:	bc3c      	pop	{r2, r3, r4, r5}
    4856:	4690      	mov	r8, r2
    4858:	4699      	mov	r9, r3
    485a:	46a2      	mov	sl, r4
    485c:	46ab      	mov	fp, r5
    485e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4860:	42be      	cmp	r6, r7
    4862:	d1f6      	bne.n	4852 <__eqdf2+0x3a>
    4864:	45c8      	cmp	r8, r9
    4866:	d1f4      	bne.n	4852 <__eqdf2+0x3a>
    4868:	45d3      	cmp	fp, sl
    486a:	d010      	beq.n	488e <__eqdf2+0x76>
    486c:	2d00      	cmp	r5, #0
    486e:	d1f0      	bne.n	4852 <__eqdf2+0x3a>
    4870:	4330      	orrs	r0, r6
    4872:	0003      	movs	r3, r0
    4874:	1e5a      	subs	r2, r3, #1
    4876:	4193      	sbcs	r3, r2
    4878:	e7eb      	b.n	4852 <__eqdf2+0x3a>
    487a:	0031      	movs	r1, r6
    487c:	2301      	movs	r3, #1
    487e:	4301      	orrs	r1, r0
    4880:	d1e7      	bne.n	4852 <__eqdf2+0x3a>
    4882:	e7e0      	b.n	4846 <__eqdf2+0x2e>
    4884:	433a      	orrs	r2, r7
    4886:	2301      	movs	r3, #1
    4888:	2a00      	cmp	r2, #0
    488a:	d1e2      	bne.n	4852 <__eqdf2+0x3a>
    488c:	e7de      	b.n	484c <__eqdf2+0x34>
    488e:	2300      	movs	r3, #0
    4890:	e7df      	b.n	4852 <__eqdf2+0x3a>
    4892:	46c0      	nop			; (mov r8, r8)
    4894:	000007ff 	.word	0x000007ff

00004898 <__gedf2>:
    4898:	b5f0      	push	{r4, r5, r6, r7, lr}
    489a:	465f      	mov	r7, fp
    489c:	4644      	mov	r4, r8
    489e:	4656      	mov	r6, sl
    48a0:	464d      	mov	r5, r9
    48a2:	b4f0      	push	{r4, r5, r6, r7}
    48a4:	031f      	lsls	r7, r3, #12
    48a6:	0b3c      	lsrs	r4, r7, #12
    48a8:	4f2c      	ldr	r7, [pc, #176]	; (495c <__gedf2+0xc4>)
    48aa:	030e      	lsls	r6, r1, #12
    48ac:	004d      	lsls	r5, r1, #1
    48ae:	46a3      	mov	fp, r4
    48b0:	005c      	lsls	r4, r3, #1
    48b2:	4684      	mov	ip, r0
    48b4:	0b36      	lsrs	r6, r6, #12
    48b6:	0d6d      	lsrs	r5, r5, #21
    48b8:	0fc9      	lsrs	r1, r1, #31
    48ba:	4690      	mov	r8, r2
    48bc:	0d64      	lsrs	r4, r4, #21
    48be:	0fdb      	lsrs	r3, r3, #31
    48c0:	42bd      	cmp	r5, r7
    48c2:	d02b      	beq.n	491c <__gedf2+0x84>
    48c4:	4f25      	ldr	r7, [pc, #148]	; (495c <__gedf2+0xc4>)
    48c6:	42bc      	cmp	r4, r7
    48c8:	d02e      	beq.n	4928 <__gedf2+0x90>
    48ca:	2d00      	cmp	r5, #0
    48cc:	d10e      	bne.n	48ec <__gedf2+0x54>
    48ce:	4330      	orrs	r0, r6
    48d0:	0007      	movs	r7, r0
    48d2:	4681      	mov	r9, r0
    48d4:	4278      	negs	r0, r7
    48d6:	4178      	adcs	r0, r7
    48d8:	2c00      	cmp	r4, #0
    48da:	d117      	bne.n	490c <__gedf2+0x74>
    48dc:	465f      	mov	r7, fp
    48de:	433a      	orrs	r2, r7
    48e0:	d114      	bne.n	490c <__gedf2+0x74>
    48e2:	464b      	mov	r3, r9
    48e4:	2000      	movs	r0, #0
    48e6:	2b00      	cmp	r3, #0
    48e8:	d00a      	beq.n	4900 <__gedf2+0x68>
    48ea:	e006      	b.n	48fa <__gedf2+0x62>
    48ec:	2c00      	cmp	r4, #0
    48ee:	d102      	bne.n	48f6 <__gedf2+0x5e>
    48f0:	4658      	mov	r0, fp
    48f2:	4302      	orrs	r2, r0
    48f4:	d001      	beq.n	48fa <__gedf2+0x62>
    48f6:	4299      	cmp	r1, r3
    48f8:	d01a      	beq.n	4930 <__gedf2+0x98>
    48fa:	2301      	movs	r3, #1
    48fc:	4248      	negs	r0, r1
    48fe:	4318      	orrs	r0, r3
    4900:	bc3c      	pop	{r2, r3, r4, r5}
    4902:	4690      	mov	r8, r2
    4904:	4699      	mov	r9, r3
    4906:	46a2      	mov	sl, r4
    4908:	46ab      	mov	fp, r5
    490a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    490c:	2800      	cmp	r0, #0
    490e:	d0f2      	beq.n	48f6 <__gedf2+0x5e>
    4910:	4258      	negs	r0, r3
    4912:	4158      	adcs	r0, r3
    4914:	2201      	movs	r2, #1
    4916:	4240      	negs	r0, r0
    4918:	4310      	orrs	r0, r2
    491a:	e7f1      	b.n	4900 <__gedf2+0x68>
    491c:	0037      	movs	r7, r6
    491e:	4307      	orrs	r7, r0
    4920:	d0d0      	beq.n	48c4 <__gedf2+0x2c>
    4922:	2002      	movs	r0, #2
    4924:	4240      	negs	r0, r0
    4926:	e7eb      	b.n	4900 <__gedf2+0x68>
    4928:	465f      	mov	r7, fp
    492a:	4317      	orrs	r7, r2
    492c:	d0cd      	beq.n	48ca <__gedf2+0x32>
    492e:	e7f8      	b.n	4922 <__gedf2+0x8a>
    4930:	42a5      	cmp	r5, r4
    4932:	dce2      	bgt.n	48fa <__gedf2+0x62>
    4934:	db05      	blt.n	4942 <__gedf2+0xaa>
    4936:	455e      	cmp	r6, fp
    4938:	d8df      	bhi.n	48fa <__gedf2+0x62>
    493a:	d008      	beq.n	494e <__gedf2+0xb6>
    493c:	2000      	movs	r0, #0
    493e:	455e      	cmp	r6, fp
    4940:	d2de      	bcs.n	4900 <__gedf2+0x68>
    4942:	4248      	negs	r0, r1
    4944:	4148      	adcs	r0, r1
    4946:	2301      	movs	r3, #1
    4948:	4240      	negs	r0, r0
    494a:	4318      	orrs	r0, r3
    494c:	e7d8      	b.n	4900 <__gedf2+0x68>
    494e:	45c4      	cmp	ip, r8
    4950:	d8d3      	bhi.n	48fa <__gedf2+0x62>
    4952:	2000      	movs	r0, #0
    4954:	45c4      	cmp	ip, r8
    4956:	d3f4      	bcc.n	4942 <__gedf2+0xaa>
    4958:	e7d2      	b.n	4900 <__gedf2+0x68>
    495a:	46c0      	nop			; (mov r8, r8)
    495c:	000007ff 	.word	0x000007ff

00004960 <__ledf2>:
    4960:	b5f0      	push	{r4, r5, r6, r7, lr}
    4962:	465f      	mov	r7, fp
    4964:	464d      	mov	r5, r9
    4966:	4644      	mov	r4, r8
    4968:	4656      	mov	r6, sl
    496a:	b4f0      	push	{r4, r5, r6, r7}
    496c:	031c      	lsls	r4, r3, #12
    496e:	0b24      	lsrs	r4, r4, #12
    4970:	46a4      	mov	ip, r4
    4972:	4c2f      	ldr	r4, [pc, #188]	; (4a30 <__ledf2+0xd0>)
    4974:	030f      	lsls	r7, r1, #12
    4976:	004d      	lsls	r5, r1, #1
    4978:	005e      	lsls	r6, r3, #1
    497a:	0fc9      	lsrs	r1, r1, #31
    497c:	4680      	mov	r8, r0
    497e:	0b3f      	lsrs	r7, r7, #12
    4980:	0d6d      	lsrs	r5, r5, #21
    4982:	468b      	mov	fp, r1
    4984:	4691      	mov	r9, r2
    4986:	0d76      	lsrs	r6, r6, #21
    4988:	0fdb      	lsrs	r3, r3, #31
    498a:	42a5      	cmp	r5, r4
    498c:	d020      	beq.n	49d0 <__ledf2+0x70>
    498e:	4c28      	ldr	r4, [pc, #160]	; (4a30 <__ledf2+0xd0>)
    4990:	42a6      	cmp	r6, r4
    4992:	d022      	beq.n	49da <__ledf2+0x7a>
    4994:	2d00      	cmp	r5, #0
    4996:	d112      	bne.n	49be <__ledf2+0x5e>
    4998:	4338      	orrs	r0, r7
    499a:	4244      	negs	r4, r0
    499c:	4144      	adcs	r4, r0
    499e:	2e00      	cmp	r6, #0
    49a0:	d020      	beq.n	49e4 <__ledf2+0x84>
    49a2:	2c00      	cmp	r4, #0
    49a4:	d00d      	beq.n	49c2 <__ledf2+0x62>
    49a6:	425c      	negs	r4, r3
    49a8:	4163      	adcs	r3, r4
    49aa:	2401      	movs	r4, #1
    49ac:	425b      	negs	r3, r3
    49ae:	431c      	orrs	r4, r3
    49b0:	0020      	movs	r0, r4
    49b2:	bc3c      	pop	{r2, r3, r4, r5}
    49b4:	4690      	mov	r8, r2
    49b6:	4699      	mov	r9, r3
    49b8:	46a2      	mov	sl, r4
    49ba:	46ab      	mov	fp, r5
    49bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    49be:	2e00      	cmp	r6, #0
    49c0:	d017      	beq.n	49f2 <__ledf2+0x92>
    49c2:	455b      	cmp	r3, fp
    49c4:	d019      	beq.n	49fa <__ledf2+0x9a>
    49c6:	465b      	mov	r3, fp
    49c8:	425c      	negs	r4, r3
    49ca:	2301      	movs	r3, #1
    49cc:	431c      	orrs	r4, r3
    49ce:	e7ef      	b.n	49b0 <__ledf2+0x50>
    49d0:	0039      	movs	r1, r7
    49d2:	2402      	movs	r4, #2
    49d4:	4301      	orrs	r1, r0
    49d6:	d1eb      	bne.n	49b0 <__ledf2+0x50>
    49d8:	e7d9      	b.n	498e <__ledf2+0x2e>
    49da:	4661      	mov	r1, ip
    49dc:	2402      	movs	r4, #2
    49de:	4311      	orrs	r1, r2
    49e0:	d1e6      	bne.n	49b0 <__ledf2+0x50>
    49e2:	e7d7      	b.n	4994 <__ledf2+0x34>
    49e4:	4661      	mov	r1, ip
    49e6:	430a      	orrs	r2, r1
    49e8:	d1db      	bne.n	49a2 <__ledf2+0x42>
    49ea:	2400      	movs	r4, #0
    49ec:	2800      	cmp	r0, #0
    49ee:	d0df      	beq.n	49b0 <__ledf2+0x50>
    49f0:	e7e9      	b.n	49c6 <__ledf2+0x66>
    49f2:	4661      	mov	r1, ip
    49f4:	430a      	orrs	r2, r1
    49f6:	d1e4      	bne.n	49c2 <__ledf2+0x62>
    49f8:	e7e5      	b.n	49c6 <__ledf2+0x66>
    49fa:	42b5      	cmp	r5, r6
    49fc:	dd03      	ble.n	4a06 <__ledf2+0xa6>
    49fe:	2201      	movs	r2, #1
    4a00:	425c      	negs	r4, r3
    4a02:	4314      	orrs	r4, r2
    4a04:	e7d4      	b.n	49b0 <__ledf2+0x50>
    4a06:	42b5      	cmp	r5, r6
    4a08:	dbcd      	blt.n	49a6 <__ledf2+0x46>
    4a0a:	4567      	cmp	r7, ip
    4a0c:	d8db      	bhi.n	49c6 <__ledf2+0x66>
    4a0e:	d009      	beq.n	4a24 <__ledf2+0xc4>
    4a10:	2400      	movs	r4, #0
    4a12:	4567      	cmp	r7, ip
    4a14:	d2cc      	bcs.n	49b0 <__ledf2+0x50>
    4a16:	4659      	mov	r1, fp
    4a18:	424c      	negs	r4, r1
    4a1a:	4161      	adcs	r1, r4
    4a1c:	2401      	movs	r4, #1
    4a1e:	4249      	negs	r1, r1
    4a20:	430c      	orrs	r4, r1
    4a22:	e7c5      	b.n	49b0 <__ledf2+0x50>
    4a24:	45c8      	cmp	r8, r9
    4a26:	d8ce      	bhi.n	49c6 <__ledf2+0x66>
    4a28:	2400      	movs	r4, #0
    4a2a:	45c8      	cmp	r8, r9
    4a2c:	d3f3      	bcc.n	4a16 <__ledf2+0xb6>
    4a2e:	e7bf      	b.n	49b0 <__ledf2+0x50>
    4a30:	000007ff 	.word	0x000007ff

00004a34 <__aeabi_dmul>:
    4a34:	b5f0      	push	{r4, r5, r6, r7, lr}
    4a36:	465f      	mov	r7, fp
    4a38:	4656      	mov	r6, sl
    4a3a:	464d      	mov	r5, r9
    4a3c:	4644      	mov	r4, r8
    4a3e:	b4f0      	push	{r4, r5, r6, r7}
    4a40:	030d      	lsls	r5, r1, #12
    4a42:	4699      	mov	r9, r3
    4a44:	004e      	lsls	r6, r1, #1
    4a46:	0b2b      	lsrs	r3, r5, #12
    4a48:	b087      	sub	sp, #28
    4a4a:	0007      	movs	r7, r0
    4a4c:	4692      	mov	sl, r2
    4a4e:	4680      	mov	r8, r0
    4a50:	469b      	mov	fp, r3
    4a52:	0d76      	lsrs	r6, r6, #21
    4a54:	0fcc      	lsrs	r4, r1, #31
    4a56:	2e00      	cmp	r6, #0
    4a58:	d069      	beq.n	4b2e <__aeabi_dmul+0xfa>
    4a5a:	4b6d      	ldr	r3, [pc, #436]	; (4c10 <__aeabi_dmul+0x1dc>)
    4a5c:	429e      	cmp	r6, r3
    4a5e:	d035      	beq.n	4acc <__aeabi_dmul+0x98>
    4a60:	465b      	mov	r3, fp
    4a62:	2280      	movs	r2, #128	; 0x80
    4a64:	00dd      	lsls	r5, r3, #3
    4a66:	0412      	lsls	r2, r2, #16
    4a68:	0f43      	lsrs	r3, r0, #29
    4a6a:	4313      	orrs	r3, r2
    4a6c:	432b      	orrs	r3, r5
    4a6e:	469b      	mov	fp, r3
    4a70:	00c3      	lsls	r3, r0, #3
    4a72:	4698      	mov	r8, r3
    4a74:	4b67      	ldr	r3, [pc, #412]	; (4c14 <__aeabi_dmul+0x1e0>)
    4a76:	2700      	movs	r7, #0
    4a78:	469c      	mov	ip, r3
    4a7a:	2300      	movs	r3, #0
    4a7c:	4466      	add	r6, ip
    4a7e:	9301      	str	r3, [sp, #4]
    4a80:	464a      	mov	r2, r9
    4a82:	0315      	lsls	r5, r2, #12
    4a84:	0050      	lsls	r0, r2, #1
    4a86:	0fd2      	lsrs	r2, r2, #31
    4a88:	4653      	mov	r3, sl
    4a8a:	0b2d      	lsrs	r5, r5, #12
    4a8c:	0d40      	lsrs	r0, r0, #21
    4a8e:	4691      	mov	r9, r2
    4a90:	d100      	bne.n	4a94 <__aeabi_dmul+0x60>
    4a92:	e076      	b.n	4b82 <__aeabi_dmul+0x14e>
    4a94:	4a5e      	ldr	r2, [pc, #376]	; (4c10 <__aeabi_dmul+0x1dc>)
    4a96:	4290      	cmp	r0, r2
    4a98:	d06c      	beq.n	4b74 <__aeabi_dmul+0x140>
    4a9a:	2280      	movs	r2, #128	; 0x80
    4a9c:	0f5b      	lsrs	r3, r3, #29
    4a9e:	0412      	lsls	r2, r2, #16
    4aa0:	4313      	orrs	r3, r2
    4aa2:	4a5c      	ldr	r2, [pc, #368]	; (4c14 <__aeabi_dmul+0x1e0>)
    4aa4:	00ed      	lsls	r5, r5, #3
    4aa6:	4694      	mov	ip, r2
    4aa8:	431d      	orrs	r5, r3
    4aaa:	4653      	mov	r3, sl
    4aac:	2200      	movs	r2, #0
    4aae:	00db      	lsls	r3, r3, #3
    4ab0:	4460      	add	r0, ip
    4ab2:	4649      	mov	r1, r9
    4ab4:	1836      	adds	r6, r6, r0
    4ab6:	1c70      	adds	r0, r6, #1
    4ab8:	4061      	eors	r1, r4
    4aba:	9002      	str	r0, [sp, #8]
    4abc:	4317      	orrs	r7, r2
    4abe:	2f0f      	cmp	r7, #15
    4ac0:	d900      	bls.n	4ac4 <__aeabi_dmul+0x90>
    4ac2:	e0af      	b.n	4c24 <__aeabi_dmul+0x1f0>
    4ac4:	4854      	ldr	r0, [pc, #336]	; (4c18 <__aeabi_dmul+0x1e4>)
    4ac6:	00bf      	lsls	r7, r7, #2
    4ac8:	59c7      	ldr	r7, [r0, r7]
    4aca:	46bf      	mov	pc, r7
    4acc:	465b      	mov	r3, fp
    4ace:	431f      	orrs	r7, r3
    4ad0:	d000      	beq.n	4ad4 <__aeabi_dmul+0xa0>
    4ad2:	e088      	b.n	4be6 <__aeabi_dmul+0x1b2>
    4ad4:	2300      	movs	r3, #0
    4ad6:	469b      	mov	fp, r3
    4ad8:	4698      	mov	r8, r3
    4ada:	3302      	adds	r3, #2
    4adc:	2708      	movs	r7, #8
    4ade:	9301      	str	r3, [sp, #4]
    4ae0:	e7ce      	b.n	4a80 <__aeabi_dmul+0x4c>
    4ae2:	4649      	mov	r1, r9
    4ae4:	2a02      	cmp	r2, #2
    4ae6:	d06a      	beq.n	4bbe <__aeabi_dmul+0x18a>
    4ae8:	2a03      	cmp	r2, #3
    4aea:	d100      	bne.n	4aee <__aeabi_dmul+0xba>
    4aec:	e209      	b.n	4f02 <__aeabi_dmul+0x4ce>
    4aee:	2a01      	cmp	r2, #1
    4af0:	d000      	beq.n	4af4 <__aeabi_dmul+0xc0>
    4af2:	e1bb      	b.n	4e6c <__aeabi_dmul+0x438>
    4af4:	4011      	ands	r1, r2
    4af6:	2200      	movs	r2, #0
    4af8:	2300      	movs	r3, #0
    4afa:	2500      	movs	r5, #0
    4afc:	4690      	mov	r8, r2
    4afe:	b2cc      	uxtb	r4, r1
    4b00:	2100      	movs	r1, #0
    4b02:	032d      	lsls	r5, r5, #12
    4b04:	0d0a      	lsrs	r2, r1, #20
    4b06:	0512      	lsls	r2, r2, #20
    4b08:	0b2d      	lsrs	r5, r5, #12
    4b0a:	4315      	orrs	r5, r2
    4b0c:	4a43      	ldr	r2, [pc, #268]	; (4c1c <__aeabi_dmul+0x1e8>)
    4b0e:	051b      	lsls	r3, r3, #20
    4b10:	4015      	ands	r5, r2
    4b12:	431d      	orrs	r5, r3
    4b14:	006d      	lsls	r5, r5, #1
    4b16:	07e4      	lsls	r4, r4, #31
    4b18:	086d      	lsrs	r5, r5, #1
    4b1a:	4325      	orrs	r5, r4
    4b1c:	4640      	mov	r0, r8
    4b1e:	0029      	movs	r1, r5
    4b20:	b007      	add	sp, #28
    4b22:	bc3c      	pop	{r2, r3, r4, r5}
    4b24:	4690      	mov	r8, r2
    4b26:	4699      	mov	r9, r3
    4b28:	46a2      	mov	sl, r4
    4b2a:	46ab      	mov	fp, r5
    4b2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4b2e:	4303      	orrs	r3, r0
    4b30:	d052      	beq.n	4bd8 <__aeabi_dmul+0x1a4>
    4b32:	465b      	mov	r3, fp
    4b34:	2b00      	cmp	r3, #0
    4b36:	d100      	bne.n	4b3a <__aeabi_dmul+0x106>
    4b38:	e18a      	b.n	4e50 <__aeabi_dmul+0x41c>
    4b3a:	4658      	mov	r0, fp
    4b3c:	f000 ff84 	bl	5a48 <__clzsi2>
    4b40:	0003      	movs	r3, r0
    4b42:	3b0b      	subs	r3, #11
    4b44:	2b1c      	cmp	r3, #28
    4b46:	dd00      	ble.n	4b4a <__aeabi_dmul+0x116>
    4b48:	e17b      	b.n	4e42 <__aeabi_dmul+0x40e>
    4b4a:	221d      	movs	r2, #29
    4b4c:	1ad3      	subs	r3, r2, r3
    4b4e:	003a      	movs	r2, r7
    4b50:	0001      	movs	r1, r0
    4b52:	465d      	mov	r5, fp
    4b54:	40da      	lsrs	r2, r3
    4b56:	3908      	subs	r1, #8
    4b58:	408d      	lsls	r5, r1
    4b5a:	0013      	movs	r3, r2
    4b5c:	408f      	lsls	r7, r1
    4b5e:	432b      	orrs	r3, r5
    4b60:	469b      	mov	fp, r3
    4b62:	46b8      	mov	r8, r7
    4b64:	4b2e      	ldr	r3, [pc, #184]	; (4c20 <__aeabi_dmul+0x1ec>)
    4b66:	2700      	movs	r7, #0
    4b68:	469c      	mov	ip, r3
    4b6a:	2300      	movs	r3, #0
    4b6c:	4460      	add	r0, ip
    4b6e:	4246      	negs	r6, r0
    4b70:	9301      	str	r3, [sp, #4]
    4b72:	e785      	b.n	4a80 <__aeabi_dmul+0x4c>
    4b74:	4652      	mov	r2, sl
    4b76:	432a      	orrs	r2, r5
    4b78:	d12c      	bne.n	4bd4 <__aeabi_dmul+0x1a0>
    4b7a:	2500      	movs	r5, #0
    4b7c:	2300      	movs	r3, #0
    4b7e:	2202      	movs	r2, #2
    4b80:	e797      	b.n	4ab2 <__aeabi_dmul+0x7e>
    4b82:	4652      	mov	r2, sl
    4b84:	432a      	orrs	r2, r5
    4b86:	d021      	beq.n	4bcc <__aeabi_dmul+0x198>
    4b88:	2d00      	cmp	r5, #0
    4b8a:	d100      	bne.n	4b8e <__aeabi_dmul+0x15a>
    4b8c:	e154      	b.n	4e38 <__aeabi_dmul+0x404>
    4b8e:	0028      	movs	r0, r5
    4b90:	f000 ff5a 	bl	5a48 <__clzsi2>
    4b94:	0003      	movs	r3, r0
    4b96:	3b0b      	subs	r3, #11
    4b98:	2b1c      	cmp	r3, #28
    4b9a:	dd00      	ble.n	4b9e <__aeabi_dmul+0x16a>
    4b9c:	e146      	b.n	4e2c <__aeabi_dmul+0x3f8>
    4b9e:	211d      	movs	r1, #29
    4ba0:	1acb      	subs	r3, r1, r3
    4ba2:	4651      	mov	r1, sl
    4ba4:	0002      	movs	r2, r0
    4ba6:	40d9      	lsrs	r1, r3
    4ba8:	4653      	mov	r3, sl
    4baa:	3a08      	subs	r2, #8
    4bac:	4095      	lsls	r5, r2
    4bae:	4093      	lsls	r3, r2
    4bb0:	430d      	orrs	r5, r1
    4bb2:	4a1b      	ldr	r2, [pc, #108]	; (4c20 <__aeabi_dmul+0x1ec>)
    4bb4:	4694      	mov	ip, r2
    4bb6:	4460      	add	r0, ip
    4bb8:	4240      	negs	r0, r0
    4bba:	2200      	movs	r2, #0
    4bbc:	e779      	b.n	4ab2 <__aeabi_dmul+0x7e>
    4bbe:	2401      	movs	r4, #1
    4bc0:	2200      	movs	r2, #0
    4bc2:	400c      	ands	r4, r1
    4bc4:	4b12      	ldr	r3, [pc, #72]	; (4c10 <__aeabi_dmul+0x1dc>)
    4bc6:	2500      	movs	r5, #0
    4bc8:	4690      	mov	r8, r2
    4bca:	e799      	b.n	4b00 <__aeabi_dmul+0xcc>
    4bcc:	2500      	movs	r5, #0
    4bce:	2300      	movs	r3, #0
    4bd0:	2201      	movs	r2, #1
    4bd2:	e76e      	b.n	4ab2 <__aeabi_dmul+0x7e>
    4bd4:	2203      	movs	r2, #3
    4bd6:	e76c      	b.n	4ab2 <__aeabi_dmul+0x7e>
    4bd8:	2300      	movs	r3, #0
    4bda:	469b      	mov	fp, r3
    4bdc:	4698      	mov	r8, r3
    4bde:	3301      	adds	r3, #1
    4be0:	2704      	movs	r7, #4
    4be2:	9301      	str	r3, [sp, #4]
    4be4:	e74c      	b.n	4a80 <__aeabi_dmul+0x4c>
    4be6:	2303      	movs	r3, #3
    4be8:	270c      	movs	r7, #12
    4bea:	9301      	str	r3, [sp, #4]
    4bec:	e748      	b.n	4a80 <__aeabi_dmul+0x4c>
    4bee:	2300      	movs	r3, #0
    4bf0:	2580      	movs	r5, #128	; 0x80
    4bf2:	4698      	mov	r8, r3
    4bf4:	2400      	movs	r4, #0
    4bf6:	032d      	lsls	r5, r5, #12
    4bf8:	4b05      	ldr	r3, [pc, #20]	; (4c10 <__aeabi_dmul+0x1dc>)
    4bfa:	e781      	b.n	4b00 <__aeabi_dmul+0xcc>
    4bfc:	465d      	mov	r5, fp
    4bfe:	4643      	mov	r3, r8
    4c00:	9a01      	ldr	r2, [sp, #4]
    4c02:	e76f      	b.n	4ae4 <__aeabi_dmul+0xb0>
    4c04:	465d      	mov	r5, fp
    4c06:	4643      	mov	r3, r8
    4c08:	0021      	movs	r1, r4
    4c0a:	9a01      	ldr	r2, [sp, #4]
    4c0c:	e76a      	b.n	4ae4 <__aeabi_dmul+0xb0>
    4c0e:	46c0      	nop			; (mov r8, r8)
    4c10:	000007ff 	.word	0x000007ff
    4c14:	fffffc01 	.word	0xfffffc01
    4c18:	00005e58 	.word	0x00005e58
    4c1c:	800fffff 	.word	0x800fffff
    4c20:	000003f3 	.word	0x000003f3
    4c24:	4642      	mov	r2, r8
    4c26:	0c12      	lsrs	r2, r2, #16
    4c28:	4691      	mov	r9, r2
    4c2a:	0c1a      	lsrs	r2, r3, #16
    4c2c:	4694      	mov	ip, r2
    4c2e:	4642      	mov	r2, r8
    4c30:	0417      	lsls	r7, r2, #16
    4c32:	464a      	mov	r2, r9
    4c34:	041b      	lsls	r3, r3, #16
    4c36:	0c1b      	lsrs	r3, r3, #16
    4c38:	435a      	muls	r2, r3
    4c3a:	4660      	mov	r0, ip
    4c3c:	4690      	mov	r8, r2
    4c3e:	464a      	mov	r2, r9
    4c40:	4342      	muls	r2, r0
    4c42:	0010      	movs	r0, r2
    4c44:	9203      	str	r2, [sp, #12]
    4c46:	4662      	mov	r2, ip
    4c48:	001c      	movs	r4, r3
    4c4a:	0c3f      	lsrs	r7, r7, #16
    4c4c:	437a      	muls	r2, r7
    4c4e:	437c      	muls	r4, r7
    4c50:	4442      	add	r2, r8
    4c52:	9201      	str	r2, [sp, #4]
    4c54:	0c22      	lsrs	r2, r4, #16
    4c56:	4692      	mov	sl, r2
    4c58:	9a01      	ldr	r2, [sp, #4]
    4c5a:	4452      	add	r2, sl
    4c5c:	4590      	cmp	r8, r2
    4c5e:	d906      	bls.n	4c6e <__aeabi_dmul+0x23a>
    4c60:	4682      	mov	sl, r0
    4c62:	2080      	movs	r0, #128	; 0x80
    4c64:	0240      	lsls	r0, r0, #9
    4c66:	4680      	mov	r8, r0
    4c68:	44c2      	add	sl, r8
    4c6a:	4650      	mov	r0, sl
    4c6c:	9003      	str	r0, [sp, #12]
    4c6e:	0c10      	lsrs	r0, r2, #16
    4c70:	9004      	str	r0, [sp, #16]
    4c72:	4648      	mov	r0, r9
    4c74:	0424      	lsls	r4, r4, #16
    4c76:	0c24      	lsrs	r4, r4, #16
    4c78:	0412      	lsls	r2, r2, #16
    4c7a:	1912      	adds	r2, r2, r4
    4c7c:	9205      	str	r2, [sp, #20]
    4c7e:	0c2a      	lsrs	r2, r5, #16
    4c80:	042d      	lsls	r5, r5, #16
    4c82:	0c2d      	lsrs	r5, r5, #16
    4c84:	4368      	muls	r0, r5
    4c86:	002c      	movs	r4, r5
    4c88:	4682      	mov	sl, r0
    4c8a:	4648      	mov	r0, r9
    4c8c:	437c      	muls	r4, r7
    4c8e:	4350      	muls	r0, r2
    4c90:	4681      	mov	r9, r0
    4c92:	0c20      	lsrs	r0, r4, #16
    4c94:	4680      	mov	r8, r0
    4c96:	4357      	muls	r7, r2
    4c98:	4457      	add	r7, sl
    4c9a:	4447      	add	r7, r8
    4c9c:	45ba      	cmp	sl, r7
    4c9e:	d903      	bls.n	4ca8 <__aeabi_dmul+0x274>
    4ca0:	2080      	movs	r0, #128	; 0x80
    4ca2:	0240      	lsls	r0, r0, #9
    4ca4:	4680      	mov	r8, r0
    4ca6:	44c1      	add	r9, r8
    4ca8:	0c38      	lsrs	r0, r7, #16
    4caa:	043f      	lsls	r7, r7, #16
    4cac:	46b8      	mov	r8, r7
    4cae:	4448      	add	r0, r9
    4cb0:	0424      	lsls	r4, r4, #16
    4cb2:	0c24      	lsrs	r4, r4, #16
    4cb4:	9001      	str	r0, [sp, #4]
    4cb6:	9804      	ldr	r0, [sp, #16]
    4cb8:	44a0      	add	r8, r4
    4cba:	4440      	add	r0, r8
    4cbc:	9004      	str	r0, [sp, #16]
    4cbe:	4658      	mov	r0, fp
    4cc0:	0c00      	lsrs	r0, r0, #16
    4cc2:	4681      	mov	r9, r0
    4cc4:	4658      	mov	r0, fp
    4cc6:	0404      	lsls	r4, r0, #16
    4cc8:	0c20      	lsrs	r0, r4, #16
    4cca:	4682      	mov	sl, r0
    4ccc:	0007      	movs	r7, r0
    4cce:	4648      	mov	r0, r9
    4cd0:	435f      	muls	r7, r3
    4cd2:	464c      	mov	r4, r9
    4cd4:	4343      	muls	r3, r0
    4cd6:	4660      	mov	r0, ip
    4cd8:	4360      	muls	r0, r4
    4cda:	4664      	mov	r4, ip
    4cdc:	4683      	mov	fp, r0
    4cde:	4650      	mov	r0, sl
    4ce0:	4344      	muls	r4, r0
    4ce2:	0c38      	lsrs	r0, r7, #16
    4ce4:	4684      	mov	ip, r0
    4ce6:	18e4      	adds	r4, r4, r3
    4ce8:	4464      	add	r4, ip
    4cea:	42a3      	cmp	r3, r4
    4cec:	d903      	bls.n	4cf6 <__aeabi_dmul+0x2c2>
    4cee:	2380      	movs	r3, #128	; 0x80
    4cf0:	025b      	lsls	r3, r3, #9
    4cf2:	469c      	mov	ip, r3
    4cf4:	44e3      	add	fp, ip
    4cf6:	4648      	mov	r0, r9
    4cf8:	043f      	lsls	r7, r7, #16
    4cfa:	0c23      	lsrs	r3, r4, #16
    4cfc:	0c3f      	lsrs	r7, r7, #16
    4cfe:	0424      	lsls	r4, r4, #16
    4d00:	19e4      	adds	r4, r4, r7
    4d02:	4657      	mov	r7, sl
    4d04:	4368      	muls	r0, r5
    4d06:	436f      	muls	r7, r5
    4d08:	4684      	mov	ip, r0
    4d0a:	464d      	mov	r5, r9
    4d0c:	4650      	mov	r0, sl
    4d0e:	4355      	muls	r5, r2
    4d10:	4342      	muls	r2, r0
    4d12:	0c38      	lsrs	r0, r7, #16
    4d14:	4681      	mov	r9, r0
    4d16:	4462      	add	r2, ip
    4d18:	444a      	add	r2, r9
    4d1a:	445b      	add	r3, fp
    4d1c:	4594      	cmp	ip, r2
    4d1e:	d903      	bls.n	4d28 <__aeabi_dmul+0x2f4>
    4d20:	2080      	movs	r0, #128	; 0x80
    4d22:	0240      	lsls	r0, r0, #9
    4d24:	4684      	mov	ip, r0
    4d26:	4465      	add	r5, ip
    4d28:	9803      	ldr	r0, [sp, #12]
    4d2a:	043f      	lsls	r7, r7, #16
    4d2c:	4683      	mov	fp, r0
    4d2e:	9804      	ldr	r0, [sp, #16]
    4d30:	0c3f      	lsrs	r7, r7, #16
    4d32:	4684      	mov	ip, r0
    4d34:	44e3      	add	fp, ip
    4d36:	45c3      	cmp	fp, r8
    4d38:	4180      	sbcs	r0, r0
    4d3a:	4240      	negs	r0, r0
    4d3c:	4682      	mov	sl, r0
    4d3e:	0410      	lsls	r0, r2, #16
    4d40:	4684      	mov	ip, r0
    4d42:	9801      	ldr	r0, [sp, #4]
    4d44:	4467      	add	r7, ip
    4d46:	4684      	mov	ip, r0
    4d48:	4467      	add	r7, ip
    4d4a:	44a3      	add	fp, r4
    4d4c:	46bc      	mov	ip, r7
    4d4e:	45a3      	cmp	fp, r4
    4d50:	41a4      	sbcs	r4, r4
    4d52:	4699      	mov	r9, r3
    4d54:	44d4      	add	ip, sl
    4d56:	4264      	negs	r4, r4
    4d58:	4287      	cmp	r7, r0
    4d5a:	41bf      	sbcs	r7, r7
    4d5c:	45d4      	cmp	ip, sl
    4d5e:	4180      	sbcs	r0, r0
    4d60:	44e1      	add	r9, ip
    4d62:	46a0      	mov	r8, r4
    4d64:	4599      	cmp	r9, r3
    4d66:	419b      	sbcs	r3, r3
    4d68:	427f      	negs	r7, r7
    4d6a:	4240      	negs	r0, r0
    4d6c:	44c8      	add	r8, r9
    4d6e:	4307      	orrs	r7, r0
    4d70:	0c12      	lsrs	r2, r2, #16
    4d72:	18ba      	adds	r2, r7, r2
    4d74:	45a0      	cmp	r8, r4
    4d76:	41a4      	sbcs	r4, r4
    4d78:	425f      	negs	r7, r3
    4d7a:	003b      	movs	r3, r7
    4d7c:	4264      	negs	r4, r4
    4d7e:	4323      	orrs	r3, r4
    4d80:	18d7      	adds	r7, r2, r3
    4d82:	4643      	mov	r3, r8
    4d84:	197d      	adds	r5, r7, r5
    4d86:	0ddb      	lsrs	r3, r3, #23
    4d88:	026d      	lsls	r5, r5, #9
    4d8a:	431d      	orrs	r5, r3
    4d8c:	465b      	mov	r3, fp
    4d8e:	025a      	lsls	r2, r3, #9
    4d90:	9b05      	ldr	r3, [sp, #20]
    4d92:	431a      	orrs	r2, r3
    4d94:	1e53      	subs	r3, r2, #1
    4d96:	419a      	sbcs	r2, r3
    4d98:	465b      	mov	r3, fp
    4d9a:	0ddb      	lsrs	r3, r3, #23
    4d9c:	431a      	orrs	r2, r3
    4d9e:	4643      	mov	r3, r8
    4da0:	025b      	lsls	r3, r3, #9
    4da2:	4313      	orrs	r3, r2
    4da4:	01ea      	lsls	r2, r5, #7
    4da6:	d507      	bpl.n	4db8 <__aeabi_dmul+0x384>
    4da8:	2201      	movs	r2, #1
    4daa:	085c      	lsrs	r4, r3, #1
    4dac:	4013      	ands	r3, r2
    4dae:	4323      	orrs	r3, r4
    4db0:	07ea      	lsls	r2, r5, #31
    4db2:	9e02      	ldr	r6, [sp, #8]
    4db4:	4313      	orrs	r3, r2
    4db6:	086d      	lsrs	r5, r5, #1
    4db8:	4a57      	ldr	r2, [pc, #348]	; (4f18 <__aeabi_dmul+0x4e4>)
    4dba:	18b2      	adds	r2, r6, r2
    4dbc:	2a00      	cmp	r2, #0
    4dbe:	dd4b      	ble.n	4e58 <__aeabi_dmul+0x424>
    4dc0:	0758      	lsls	r0, r3, #29
    4dc2:	d009      	beq.n	4dd8 <__aeabi_dmul+0x3a4>
    4dc4:	200f      	movs	r0, #15
    4dc6:	4018      	ands	r0, r3
    4dc8:	2804      	cmp	r0, #4
    4dca:	d005      	beq.n	4dd8 <__aeabi_dmul+0x3a4>
    4dcc:	1d18      	adds	r0, r3, #4
    4dce:	4298      	cmp	r0, r3
    4dd0:	419b      	sbcs	r3, r3
    4dd2:	425b      	negs	r3, r3
    4dd4:	18ed      	adds	r5, r5, r3
    4dd6:	0003      	movs	r3, r0
    4dd8:	01e8      	lsls	r0, r5, #7
    4dda:	d504      	bpl.n	4de6 <__aeabi_dmul+0x3b2>
    4ddc:	4a4f      	ldr	r2, [pc, #316]	; (4f1c <__aeabi_dmul+0x4e8>)
    4dde:	4015      	ands	r5, r2
    4de0:	2280      	movs	r2, #128	; 0x80
    4de2:	00d2      	lsls	r2, r2, #3
    4de4:	18b2      	adds	r2, r6, r2
    4de6:	484e      	ldr	r0, [pc, #312]	; (4f20 <__aeabi_dmul+0x4ec>)
    4de8:	4282      	cmp	r2, r0
    4dea:	dd00      	ble.n	4dee <__aeabi_dmul+0x3ba>
    4dec:	e6e7      	b.n	4bbe <__aeabi_dmul+0x18a>
    4dee:	2401      	movs	r4, #1
    4df0:	08db      	lsrs	r3, r3, #3
    4df2:	0768      	lsls	r0, r5, #29
    4df4:	4318      	orrs	r0, r3
    4df6:	026d      	lsls	r5, r5, #9
    4df8:	0553      	lsls	r3, r2, #21
    4dfa:	4680      	mov	r8, r0
    4dfc:	0b2d      	lsrs	r5, r5, #12
    4dfe:	0d5b      	lsrs	r3, r3, #21
    4e00:	400c      	ands	r4, r1
    4e02:	e67d      	b.n	4b00 <__aeabi_dmul+0xcc>
    4e04:	2280      	movs	r2, #128	; 0x80
    4e06:	4659      	mov	r1, fp
    4e08:	0312      	lsls	r2, r2, #12
    4e0a:	4211      	tst	r1, r2
    4e0c:	d008      	beq.n	4e20 <__aeabi_dmul+0x3ec>
    4e0e:	4215      	tst	r5, r2
    4e10:	d106      	bne.n	4e20 <__aeabi_dmul+0x3ec>
    4e12:	4315      	orrs	r5, r2
    4e14:	032d      	lsls	r5, r5, #12
    4e16:	4698      	mov	r8, r3
    4e18:	0b2d      	lsrs	r5, r5, #12
    4e1a:	464c      	mov	r4, r9
    4e1c:	4b41      	ldr	r3, [pc, #260]	; (4f24 <__aeabi_dmul+0x4f0>)
    4e1e:	e66f      	b.n	4b00 <__aeabi_dmul+0xcc>
    4e20:	465d      	mov	r5, fp
    4e22:	4315      	orrs	r5, r2
    4e24:	032d      	lsls	r5, r5, #12
    4e26:	0b2d      	lsrs	r5, r5, #12
    4e28:	4b3e      	ldr	r3, [pc, #248]	; (4f24 <__aeabi_dmul+0x4f0>)
    4e2a:	e669      	b.n	4b00 <__aeabi_dmul+0xcc>
    4e2c:	0003      	movs	r3, r0
    4e2e:	4655      	mov	r5, sl
    4e30:	3b28      	subs	r3, #40	; 0x28
    4e32:	409d      	lsls	r5, r3
    4e34:	2300      	movs	r3, #0
    4e36:	e6bc      	b.n	4bb2 <__aeabi_dmul+0x17e>
    4e38:	4650      	mov	r0, sl
    4e3a:	f000 fe05 	bl	5a48 <__clzsi2>
    4e3e:	3020      	adds	r0, #32
    4e40:	e6a8      	b.n	4b94 <__aeabi_dmul+0x160>
    4e42:	0003      	movs	r3, r0
    4e44:	3b28      	subs	r3, #40	; 0x28
    4e46:	409f      	lsls	r7, r3
    4e48:	2300      	movs	r3, #0
    4e4a:	46bb      	mov	fp, r7
    4e4c:	4698      	mov	r8, r3
    4e4e:	e689      	b.n	4b64 <__aeabi_dmul+0x130>
    4e50:	f000 fdfa 	bl	5a48 <__clzsi2>
    4e54:	3020      	adds	r0, #32
    4e56:	e673      	b.n	4b40 <__aeabi_dmul+0x10c>
    4e58:	2401      	movs	r4, #1
    4e5a:	1aa6      	subs	r6, r4, r2
    4e5c:	2e38      	cmp	r6, #56	; 0x38
    4e5e:	dd07      	ble.n	4e70 <__aeabi_dmul+0x43c>
    4e60:	2200      	movs	r2, #0
    4e62:	400c      	ands	r4, r1
    4e64:	2300      	movs	r3, #0
    4e66:	2500      	movs	r5, #0
    4e68:	4690      	mov	r8, r2
    4e6a:	e649      	b.n	4b00 <__aeabi_dmul+0xcc>
    4e6c:	9e02      	ldr	r6, [sp, #8]
    4e6e:	e7a3      	b.n	4db8 <__aeabi_dmul+0x384>
    4e70:	2e1f      	cmp	r6, #31
    4e72:	dc20      	bgt.n	4eb6 <__aeabi_dmul+0x482>
    4e74:	2220      	movs	r2, #32
    4e76:	002c      	movs	r4, r5
    4e78:	0018      	movs	r0, r3
    4e7a:	1b92      	subs	r2, r2, r6
    4e7c:	40f0      	lsrs	r0, r6
    4e7e:	4094      	lsls	r4, r2
    4e80:	4093      	lsls	r3, r2
    4e82:	4304      	orrs	r4, r0
    4e84:	1e58      	subs	r0, r3, #1
    4e86:	4183      	sbcs	r3, r0
    4e88:	431c      	orrs	r4, r3
    4e8a:	40f5      	lsrs	r5, r6
    4e8c:	0763      	lsls	r3, r4, #29
    4e8e:	d009      	beq.n	4ea4 <__aeabi_dmul+0x470>
    4e90:	230f      	movs	r3, #15
    4e92:	4023      	ands	r3, r4
    4e94:	2b04      	cmp	r3, #4
    4e96:	d005      	beq.n	4ea4 <__aeabi_dmul+0x470>
    4e98:	0023      	movs	r3, r4
    4e9a:	1d1c      	adds	r4, r3, #4
    4e9c:	429c      	cmp	r4, r3
    4e9e:	4192      	sbcs	r2, r2
    4ea0:	4252      	negs	r2, r2
    4ea2:	18ad      	adds	r5, r5, r2
    4ea4:	022b      	lsls	r3, r5, #8
    4ea6:	d51f      	bpl.n	4ee8 <__aeabi_dmul+0x4b4>
    4ea8:	2401      	movs	r4, #1
    4eaa:	2200      	movs	r2, #0
    4eac:	400c      	ands	r4, r1
    4eae:	2301      	movs	r3, #1
    4eb0:	2500      	movs	r5, #0
    4eb2:	4690      	mov	r8, r2
    4eb4:	e624      	b.n	4b00 <__aeabi_dmul+0xcc>
    4eb6:	201f      	movs	r0, #31
    4eb8:	002c      	movs	r4, r5
    4eba:	4240      	negs	r0, r0
    4ebc:	1a82      	subs	r2, r0, r2
    4ebe:	40d4      	lsrs	r4, r2
    4ec0:	2e20      	cmp	r6, #32
    4ec2:	d01c      	beq.n	4efe <__aeabi_dmul+0x4ca>
    4ec4:	2240      	movs	r2, #64	; 0x40
    4ec6:	1b96      	subs	r6, r2, r6
    4ec8:	40b5      	lsls	r5, r6
    4eca:	432b      	orrs	r3, r5
    4ecc:	1e58      	subs	r0, r3, #1
    4ece:	4183      	sbcs	r3, r0
    4ed0:	2007      	movs	r0, #7
    4ed2:	4323      	orrs	r3, r4
    4ed4:	4018      	ands	r0, r3
    4ed6:	2500      	movs	r5, #0
    4ed8:	2800      	cmp	r0, #0
    4eda:	d009      	beq.n	4ef0 <__aeabi_dmul+0x4bc>
    4edc:	220f      	movs	r2, #15
    4ede:	2500      	movs	r5, #0
    4ee0:	401a      	ands	r2, r3
    4ee2:	001c      	movs	r4, r3
    4ee4:	2a04      	cmp	r2, #4
    4ee6:	d1d8      	bne.n	4e9a <__aeabi_dmul+0x466>
    4ee8:	0023      	movs	r3, r4
    4eea:	0768      	lsls	r0, r5, #29
    4eec:	026d      	lsls	r5, r5, #9
    4eee:	0b2d      	lsrs	r5, r5, #12
    4ef0:	2401      	movs	r4, #1
    4ef2:	08db      	lsrs	r3, r3, #3
    4ef4:	4303      	orrs	r3, r0
    4ef6:	4698      	mov	r8, r3
    4ef8:	400c      	ands	r4, r1
    4efa:	2300      	movs	r3, #0
    4efc:	e600      	b.n	4b00 <__aeabi_dmul+0xcc>
    4efe:	2500      	movs	r5, #0
    4f00:	e7e3      	b.n	4eca <__aeabi_dmul+0x496>
    4f02:	2280      	movs	r2, #128	; 0x80
    4f04:	2401      	movs	r4, #1
    4f06:	0312      	lsls	r2, r2, #12
    4f08:	4315      	orrs	r5, r2
    4f0a:	032d      	lsls	r5, r5, #12
    4f0c:	4698      	mov	r8, r3
    4f0e:	0b2d      	lsrs	r5, r5, #12
    4f10:	400c      	ands	r4, r1
    4f12:	4b04      	ldr	r3, [pc, #16]	; (4f24 <__aeabi_dmul+0x4f0>)
    4f14:	e5f4      	b.n	4b00 <__aeabi_dmul+0xcc>
    4f16:	46c0      	nop			; (mov r8, r8)
    4f18:	000003ff 	.word	0x000003ff
    4f1c:	feffffff 	.word	0xfeffffff
    4f20:	000007fe 	.word	0x000007fe
    4f24:	000007ff 	.word	0x000007ff

00004f28 <__aeabi_dsub>:
    4f28:	b5f0      	push	{r4, r5, r6, r7, lr}
    4f2a:	4657      	mov	r7, sl
    4f2c:	464e      	mov	r6, r9
    4f2e:	4645      	mov	r5, r8
    4f30:	b4e0      	push	{r5, r6, r7}
    4f32:	000e      	movs	r6, r1
    4f34:	0011      	movs	r1, r2
    4f36:	0ff2      	lsrs	r2, r6, #31
    4f38:	4692      	mov	sl, r2
    4f3a:	00c5      	lsls	r5, r0, #3
    4f3c:	0f42      	lsrs	r2, r0, #29
    4f3e:	0318      	lsls	r0, r3, #12
    4f40:	0337      	lsls	r7, r6, #12
    4f42:	0074      	lsls	r4, r6, #1
    4f44:	0a40      	lsrs	r0, r0, #9
    4f46:	0f4e      	lsrs	r6, r1, #29
    4f48:	0a7f      	lsrs	r7, r7, #9
    4f4a:	4330      	orrs	r0, r6
    4f4c:	4ecf      	ldr	r6, [pc, #828]	; (528c <__aeabi_dsub+0x364>)
    4f4e:	4317      	orrs	r7, r2
    4f50:	005a      	lsls	r2, r3, #1
    4f52:	0d64      	lsrs	r4, r4, #21
    4f54:	0d52      	lsrs	r2, r2, #21
    4f56:	0fdb      	lsrs	r3, r3, #31
    4f58:	00c9      	lsls	r1, r1, #3
    4f5a:	42b2      	cmp	r2, r6
    4f5c:	d100      	bne.n	4f60 <__aeabi_dsub+0x38>
    4f5e:	e0e5      	b.n	512c <__aeabi_dsub+0x204>
    4f60:	2601      	movs	r6, #1
    4f62:	4073      	eors	r3, r6
    4f64:	1aa6      	subs	r6, r4, r2
    4f66:	46b4      	mov	ip, r6
    4f68:	4553      	cmp	r3, sl
    4f6a:	d100      	bne.n	4f6e <__aeabi_dsub+0x46>
    4f6c:	e0af      	b.n	50ce <__aeabi_dsub+0x1a6>
    4f6e:	2e00      	cmp	r6, #0
    4f70:	dc00      	bgt.n	4f74 <__aeabi_dsub+0x4c>
    4f72:	e10d      	b.n	5190 <__aeabi_dsub+0x268>
    4f74:	2a00      	cmp	r2, #0
    4f76:	d13a      	bne.n	4fee <__aeabi_dsub+0xc6>
    4f78:	0003      	movs	r3, r0
    4f7a:	430b      	orrs	r3, r1
    4f7c:	d000      	beq.n	4f80 <__aeabi_dsub+0x58>
    4f7e:	e0e4      	b.n	514a <__aeabi_dsub+0x222>
    4f80:	076b      	lsls	r3, r5, #29
    4f82:	d009      	beq.n	4f98 <__aeabi_dsub+0x70>
    4f84:	230f      	movs	r3, #15
    4f86:	402b      	ands	r3, r5
    4f88:	2b04      	cmp	r3, #4
    4f8a:	d005      	beq.n	4f98 <__aeabi_dsub+0x70>
    4f8c:	1d2b      	adds	r3, r5, #4
    4f8e:	42ab      	cmp	r3, r5
    4f90:	41ad      	sbcs	r5, r5
    4f92:	426d      	negs	r5, r5
    4f94:	197f      	adds	r7, r7, r5
    4f96:	001d      	movs	r5, r3
    4f98:	023b      	lsls	r3, r7, #8
    4f9a:	d400      	bmi.n	4f9e <__aeabi_dsub+0x76>
    4f9c:	e088      	b.n	50b0 <__aeabi_dsub+0x188>
    4f9e:	4bbb      	ldr	r3, [pc, #748]	; (528c <__aeabi_dsub+0x364>)
    4fa0:	3401      	adds	r4, #1
    4fa2:	429c      	cmp	r4, r3
    4fa4:	d100      	bne.n	4fa8 <__aeabi_dsub+0x80>
    4fa6:	e110      	b.n	51ca <__aeabi_dsub+0x2a2>
    4fa8:	003a      	movs	r2, r7
    4faa:	4bb9      	ldr	r3, [pc, #740]	; (5290 <__aeabi_dsub+0x368>)
    4fac:	4651      	mov	r1, sl
    4fae:	401a      	ands	r2, r3
    4fb0:	2301      	movs	r3, #1
    4fb2:	0750      	lsls	r0, r2, #29
    4fb4:	08ed      	lsrs	r5, r5, #3
    4fb6:	0252      	lsls	r2, r2, #9
    4fb8:	0564      	lsls	r4, r4, #21
    4fba:	4305      	orrs	r5, r0
    4fbc:	0b12      	lsrs	r2, r2, #12
    4fbe:	0d64      	lsrs	r4, r4, #21
    4fc0:	400b      	ands	r3, r1
    4fc2:	2100      	movs	r1, #0
    4fc4:	0028      	movs	r0, r5
    4fc6:	0312      	lsls	r2, r2, #12
    4fc8:	0d0d      	lsrs	r5, r1, #20
    4fca:	0b12      	lsrs	r2, r2, #12
    4fcc:	0564      	lsls	r4, r4, #21
    4fce:	052d      	lsls	r5, r5, #20
    4fd0:	4315      	orrs	r5, r2
    4fd2:	0862      	lsrs	r2, r4, #1
    4fd4:	4caf      	ldr	r4, [pc, #700]	; (5294 <__aeabi_dsub+0x36c>)
    4fd6:	07db      	lsls	r3, r3, #31
    4fd8:	402c      	ands	r4, r5
    4fda:	4314      	orrs	r4, r2
    4fdc:	0064      	lsls	r4, r4, #1
    4fde:	0864      	lsrs	r4, r4, #1
    4fe0:	431c      	orrs	r4, r3
    4fe2:	0021      	movs	r1, r4
    4fe4:	bc1c      	pop	{r2, r3, r4}
    4fe6:	4690      	mov	r8, r2
    4fe8:	4699      	mov	r9, r3
    4fea:	46a2      	mov	sl, r4
    4fec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4fee:	4ba7      	ldr	r3, [pc, #668]	; (528c <__aeabi_dsub+0x364>)
    4ff0:	429c      	cmp	r4, r3
    4ff2:	d0c5      	beq.n	4f80 <__aeabi_dsub+0x58>
    4ff4:	2380      	movs	r3, #128	; 0x80
    4ff6:	041b      	lsls	r3, r3, #16
    4ff8:	4318      	orrs	r0, r3
    4ffa:	4663      	mov	r3, ip
    4ffc:	2b38      	cmp	r3, #56	; 0x38
    4ffe:	dd00      	ble.n	5002 <__aeabi_dsub+0xda>
    5000:	e0fd      	b.n	51fe <__aeabi_dsub+0x2d6>
    5002:	2b1f      	cmp	r3, #31
    5004:	dd00      	ble.n	5008 <__aeabi_dsub+0xe0>
    5006:	e130      	b.n	526a <__aeabi_dsub+0x342>
    5008:	4662      	mov	r2, ip
    500a:	2320      	movs	r3, #32
    500c:	1a9b      	subs	r3, r3, r2
    500e:	0002      	movs	r2, r0
    5010:	409a      	lsls	r2, r3
    5012:	4666      	mov	r6, ip
    5014:	4690      	mov	r8, r2
    5016:	000a      	movs	r2, r1
    5018:	4099      	lsls	r1, r3
    501a:	40f2      	lsrs	r2, r6
    501c:	4646      	mov	r6, r8
    501e:	1e4b      	subs	r3, r1, #1
    5020:	4199      	sbcs	r1, r3
    5022:	4332      	orrs	r2, r6
    5024:	4311      	orrs	r1, r2
    5026:	4663      	mov	r3, ip
    5028:	0002      	movs	r2, r0
    502a:	40da      	lsrs	r2, r3
    502c:	1a69      	subs	r1, r5, r1
    502e:	428d      	cmp	r5, r1
    5030:	419b      	sbcs	r3, r3
    5032:	000d      	movs	r5, r1
    5034:	1aba      	subs	r2, r7, r2
    5036:	425b      	negs	r3, r3
    5038:	1ad7      	subs	r7, r2, r3
    503a:	023b      	lsls	r3, r7, #8
    503c:	d535      	bpl.n	50aa <__aeabi_dsub+0x182>
    503e:	027a      	lsls	r2, r7, #9
    5040:	0a53      	lsrs	r3, r2, #9
    5042:	4698      	mov	r8, r3
    5044:	4643      	mov	r3, r8
    5046:	2b00      	cmp	r3, #0
    5048:	d100      	bne.n	504c <__aeabi_dsub+0x124>
    504a:	e0c4      	b.n	51d6 <__aeabi_dsub+0x2ae>
    504c:	4640      	mov	r0, r8
    504e:	f000 fcfb 	bl	5a48 <__clzsi2>
    5052:	0003      	movs	r3, r0
    5054:	3b08      	subs	r3, #8
    5056:	2b1f      	cmp	r3, #31
    5058:	dd00      	ble.n	505c <__aeabi_dsub+0x134>
    505a:	e0c5      	b.n	51e8 <__aeabi_dsub+0x2c0>
    505c:	2220      	movs	r2, #32
    505e:	0029      	movs	r1, r5
    5060:	1ad2      	subs	r2, r2, r3
    5062:	4647      	mov	r7, r8
    5064:	40d1      	lsrs	r1, r2
    5066:	409f      	lsls	r7, r3
    5068:	000a      	movs	r2, r1
    506a:	409d      	lsls	r5, r3
    506c:	433a      	orrs	r2, r7
    506e:	429c      	cmp	r4, r3
    5070:	dd00      	ble.n	5074 <__aeabi_dsub+0x14c>
    5072:	e0c0      	b.n	51f6 <__aeabi_dsub+0x2ce>
    5074:	1b1c      	subs	r4, r3, r4
    5076:	1c63      	adds	r3, r4, #1
    5078:	2b1f      	cmp	r3, #31
    507a:	dd00      	ble.n	507e <__aeabi_dsub+0x156>
    507c:	e0e4      	b.n	5248 <__aeabi_dsub+0x320>
    507e:	2120      	movs	r1, #32
    5080:	0014      	movs	r4, r2
    5082:	0028      	movs	r0, r5
    5084:	1ac9      	subs	r1, r1, r3
    5086:	40d8      	lsrs	r0, r3
    5088:	408c      	lsls	r4, r1
    508a:	408d      	lsls	r5, r1
    508c:	4304      	orrs	r4, r0
    508e:	40da      	lsrs	r2, r3
    5090:	1e68      	subs	r0, r5, #1
    5092:	4185      	sbcs	r5, r0
    5094:	0017      	movs	r7, r2
    5096:	4325      	orrs	r5, r4
    5098:	2400      	movs	r4, #0
    509a:	e771      	b.n	4f80 <__aeabi_dsub+0x58>
    509c:	4642      	mov	r2, r8
    509e:	4663      	mov	r3, ip
    50a0:	431a      	orrs	r2, r3
    50a2:	d100      	bne.n	50a6 <__aeabi_dsub+0x17e>
    50a4:	e24c      	b.n	5540 <__aeabi_dsub+0x618>
    50a6:	4667      	mov	r7, ip
    50a8:	4645      	mov	r5, r8
    50aa:	076b      	lsls	r3, r5, #29
    50ac:	d000      	beq.n	50b0 <__aeabi_dsub+0x188>
    50ae:	e769      	b.n	4f84 <__aeabi_dsub+0x5c>
    50b0:	2301      	movs	r3, #1
    50b2:	4651      	mov	r1, sl
    50b4:	0778      	lsls	r0, r7, #29
    50b6:	08ed      	lsrs	r5, r5, #3
    50b8:	08fa      	lsrs	r2, r7, #3
    50ba:	400b      	ands	r3, r1
    50bc:	4305      	orrs	r5, r0
    50be:	4973      	ldr	r1, [pc, #460]	; (528c <__aeabi_dsub+0x364>)
    50c0:	428c      	cmp	r4, r1
    50c2:	d038      	beq.n	5136 <__aeabi_dsub+0x20e>
    50c4:	0312      	lsls	r2, r2, #12
    50c6:	0564      	lsls	r4, r4, #21
    50c8:	0b12      	lsrs	r2, r2, #12
    50ca:	0d64      	lsrs	r4, r4, #21
    50cc:	e779      	b.n	4fc2 <__aeabi_dsub+0x9a>
    50ce:	2e00      	cmp	r6, #0
    50d0:	dc00      	bgt.n	50d4 <__aeabi_dsub+0x1ac>
    50d2:	e09a      	b.n	520a <__aeabi_dsub+0x2e2>
    50d4:	2a00      	cmp	r2, #0
    50d6:	d047      	beq.n	5168 <__aeabi_dsub+0x240>
    50d8:	4a6c      	ldr	r2, [pc, #432]	; (528c <__aeabi_dsub+0x364>)
    50da:	4294      	cmp	r4, r2
    50dc:	d100      	bne.n	50e0 <__aeabi_dsub+0x1b8>
    50de:	e74f      	b.n	4f80 <__aeabi_dsub+0x58>
    50e0:	2280      	movs	r2, #128	; 0x80
    50e2:	0412      	lsls	r2, r2, #16
    50e4:	4310      	orrs	r0, r2
    50e6:	4662      	mov	r2, ip
    50e8:	2a38      	cmp	r2, #56	; 0x38
    50ea:	dc00      	bgt.n	50ee <__aeabi_dsub+0x1c6>
    50ec:	e108      	b.n	5300 <__aeabi_dsub+0x3d8>
    50ee:	4301      	orrs	r1, r0
    50f0:	1e48      	subs	r0, r1, #1
    50f2:	4181      	sbcs	r1, r0
    50f4:	2200      	movs	r2, #0
    50f6:	b2c9      	uxtb	r1, r1
    50f8:	1949      	adds	r1, r1, r5
    50fa:	19d2      	adds	r2, r2, r7
    50fc:	42a9      	cmp	r1, r5
    50fe:	41bf      	sbcs	r7, r7
    5100:	000d      	movs	r5, r1
    5102:	427f      	negs	r7, r7
    5104:	18bf      	adds	r7, r7, r2
    5106:	023a      	lsls	r2, r7, #8
    5108:	d400      	bmi.n	510c <__aeabi_dsub+0x1e4>
    510a:	e142      	b.n	5392 <__aeabi_dsub+0x46a>
    510c:	4a5f      	ldr	r2, [pc, #380]	; (528c <__aeabi_dsub+0x364>)
    510e:	3401      	adds	r4, #1
    5110:	4294      	cmp	r4, r2
    5112:	d100      	bne.n	5116 <__aeabi_dsub+0x1ee>
    5114:	e14e      	b.n	53b4 <__aeabi_dsub+0x48c>
    5116:	2001      	movs	r0, #1
    5118:	4a5d      	ldr	r2, [pc, #372]	; (5290 <__aeabi_dsub+0x368>)
    511a:	0869      	lsrs	r1, r5, #1
    511c:	403a      	ands	r2, r7
    511e:	4028      	ands	r0, r5
    5120:	4308      	orrs	r0, r1
    5122:	07d5      	lsls	r5, r2, #31
    5124:	4305      	orrs	r5, r0
    5126:	0857      	lsrs	r7, r2, #1
    5128:	469a      	mov	sl, r3
    512a:	e729      	b.n	4f80 <__aeabi_dsub+0x58>
    512c:	0006      	movs	r6, r0
    512e:	430e      	orrs	r6, r1
    5130:	d000      	beq.n	5134 <__aeabi_dsub+0x20c>
    5132:	e717      	b.n	4f64 <__aeabi_dsub+0x3c>
    5134:	e714      	b.n	4f60 <__aeabi_dsub+0x38>
    5136:	0029      	movs	r1, r5
    5138:	4311      	orrs	r1, r2
    513a:	d100      	bne.n	513e <__aeabi_dsub+0x216>
    513c:	e1f9      	b.n	5532 <__aeabi_dsub+0x60a>
    513e:	2180      	movs	r1, #128	; 0x80
    5140:	0309      	lsls	r1, r1, #12
    5142:	430a      	orrs	r2, r1
    5144:	0312      	lsls	r2, r2, #12
    5146:	0b12      	lsrs	r2, r2, #12
    5148:	e73b      	b.n	4fc2 <__aeabi_dsub+0x9a>
    514a:	2301      	movs	r3, #1
    514c:	425b      	negs	r3, r3
    514e:	4698      	mov	r8, r3
    5150:	44c4      	add	ip, r8
    5152:	4663      	mov	r3, ip
    5154:	2b00      	cmp	r3, #0
    5156:	d172      	bne.n	523e <__aeabi_dsub+0x316>
    5158:	1a69      	subs	r1, r5, r1
    515a:	428d      	cmp	r5, r1
    515c:	419b      	sbcs	r3, r3
    515e:	1a3f      	subs	r7, r7, r0
    5160:	425b      	negs	r3, r3
    5162:	1aff      	subs	r7, r7, r3
    5164:	000d      	movs	r5, r1
    5166:	e768      	b.n	503a <__aeabi_dsub+0x112>
    5168:	0002      	movs	r2, r0
    516a:	430a      	orrs	r2, r1
    516c:	d100      	bne.n	5170 <__aeabi_dsub+0x248>
    516e:	e707      	b.n	4f80 <__aeabi_dsub+0x58>
    5170:	2201      	movs	r2, #1
    5172:	4252      	negs	r2, r2
    5174:	4690      	mov	r8, r2
    5176:	44c4      	add	ip, r8
    5178:	4662      	mov	r2, ip
    517a:	2a00      	cmp	r2, #0
    517c:	d000      	beq.n	5180 <__aeabi_dsub+0x258>
    517e:	e0e6      	b.n	534e <__aeabi_dsub+0x426>
    5180:	1869      	adds	r1, r5, r1
    5182:	42a9      	cmp	r1, r5
    5184:	41b6      	sbcs	r6, r6
    5186:	183f      	adds	r7, r7, r0
    5188:	4276      	negs	r6, r6
    518a:	19f7      	adds	r7, r6, r7
    518c:	000d      	movs	r5, r1
    518e:	e7ba      	b.n	5106 <__aeabi_dsub+0x1de>
    5190:	2e00      	cmp	r6, #0
    5192:	d000      	beq.n	5196 <__aeabi_dsub+0x26e>
    5194:	e080      	b.n	5298 <__aeabi_dsub+0x370>
    5196:	1c62      	adds	r2, r4, #1
    5198:	0552      	lsls	r2, r2, #21
    519a:	0d52      	lsrs	r2, r2, #21
    519c:	2a01      	cmp	r2, #1
    519e:	dc00      	bgt.n	51a2 <__aeabi_dsub+0x27a>
    51a0:	e0f9      	b.n	5396 <__aeabi_dsub+0x46e>
    51a2:	1a6a      	subs	r2, r5, r1
    51a4:	4691      	mov	r9, r2
    51a6:	454d      	cmp	r5, r9
    51a8:	41b6      	sbcs	r6, r6
    51aa:	1a3a      	subs	r2, r7, r0
    51ac:	4276      	negs	r6, r6
    51ae:	1b92      	subs	r2, r2, r6
    51b0:	4690      	mov	r8, r2
    51b2:	0212      	lsls	r2, r2, #8
    51b4:	d400      	bmi.n	51b8 <__aeabi_dsub+0x290>
    51b6:	e099      	b.n	52ec <__aeabi_dsub+0x3c4>
    51b8:	1b4d      	subs	r5, r1, r5
    51ba:	42a9      	cmp	r1, r5
    51bc:	4189      	sbcs	r1, r1
    51be:	1bc7      	subs	r7, r0, r7
    51c0:	4249      	negs	r1, r1
    51c2:	1a7a      	subs	r2, r7, r1
    51c4:	4690      	mov	r8, r2
    51c6:	469a      	mov	sl, r3
    51c8:	e73c      	b.n	5044 <__aeabi_dsub+0x11c>
    51ca:	4652      	mov	r2, sl
    51cc:	2301      	movs	r3, #1
    51ce:	2500      	movs	r5, #0
    51d0:	4013      	ands	r3, r2
    51d2:	2200      	movs	r2, #0
    51d4:	e6f5      	b.n	4fc2 <__aeabi_dsub+0x9a>
    51d6:	0028      	movs	r0, r5
    51d8:	f000 fc36 	bl	5a48 <__clzsi2>
    51dc:	3020      	adds	r0, #32
    51de:	0003      	movs	r3, r0
    51e0:	3b08      	subs	r3, #8
    51e2:	2b1f      	cmp	r3, #31
    51e4:	dc00      	bgt.n	51e8 <__aeabi_dsub+0x2c0>
    51e6:	e739      	b.n	505c <__aeabi_dsub+0x134>
    51e8:	002a      	movs	r2, r5
    51ea:	3828      	subs	r0, #40	; 0x28
    51ec:	4082      	lsls	r2, r0
    51ee:	2500      	movs	r5, #0
    51f0:	429c      	cmp	r4, r3
    51f2:	dc00      	bgt.n	51f6 <__aeabi_dsub+0x2ce>
    51f4:	e73e      	b.n	5074 <__aeabi_dsub+0x14c>
    51f6:	4f26      	ldr	r7, [pc, #152]	; (5290 <__aeabi_dsub+0x368>)
    51f8:	1ae4      	subs	r4, r4, r3
    51fa:	4017      	ands	r7, r2
    51fc:	e6c0      	b.n	4f80 <__aeabi_dsub+0x58>
    51fe:	4301      	orrs	r1, r0
    5200:	1e48      	subs	r0, r1, #1
    5202:	4181      	sbcs	r1, r0
    5204:	2200      	movs	r2, #0
    5206:	b2c9      	uxtb	r1, r1
    5208:	e710      	b.n	502c <__aeabi_dsub+0x104>
    520a:	2e00      	cmp	r6, #0
    520c:	d000      	beq.n	5210 <__aeabi_dsub+0x2e8>
    520e:	e0f1      	b.n	53f4 <__aeabi_dsub+0x4cc>
    5210:	1c62      	adds	r2, r4, #1
    5212:	4694      	mov	ip, r2
    5214:	0552      	lsls	r2, r2, #21
    5216:	0d52      	lsrs	r2, r2, #21
    5218:	2a01      	cmp	r2, #1
    521a:	dc00      	bgt.n	521e <__aeabi_dsub+0x2f6>
    521c:	e0a0      	b.n	5360 <__aeabi_dsub+0x438>
    521e:	4a1b      	ldr	r2, [pc, #108]	; (528c <__aeabi_dsub+0x364>)
    5220:	4594      	cmp	ip, r2
    5222:	d100      	bne.n	5226 <__aeabi_dsub+0x2fe>
    5224:	e0c5      	b.n	53b2 <__aeabi_dsub+0x48a>
    5226:	1869      	adds	r1, r5, r1
    5228:	42a9      	cmp	r1, r5
    522a:	4192      	sbcs	r2, r2
    522c:	183f      	adds	r7, r7, r0
    522e:	4252      	negs	r2, r2
    5230:	19d2      	adds	r2, r2, r7
    5232:	0849      	lsrs	r1, r1, #1
    5234:	07d5      	lsls	r5, r2, #31
    5236:	430d      	orrs	r5, r1
    5238:	0857      	lsrs	r7, r2, #1
    523a:	4664      	mov	r4, ip
    523c:	e6a0      	b.n	4f80 <__aeabi_dsub+0x58>
    523e:	4b13      	ldr	r3, [pc, #76]	; (528c <__aeabi_dsub+0x364>)
    5240:	429c      	cmp	r4, r3
    5242:	d000      	beq.n	5246 <__aeabi_dsub+0x31e>
    5244:	e6d9      	b.n	4ffa <__aeabi_dsub+0xd2>
    5246:	e69b      	b.n	4f80 <__aeabi_dsub+0x58>
    5248:	0011      	movs	r1, r2
    524a:	3c1f      	subs	r4, #31
    524c:	40e1      	lsrs	r1, r4
    524e:	000c      	movs	r4, r1
    5250:	2b20      	cmp	r3, #32
    5252:	d100      	bne.n	5256 <__aeabi_dsub+0x32e>
    5254:	e080      	b.n	5358 <__aeabi_dsub+0x430>
    5256:	2140      	movs	r1, #64	; 0x40
    5258:	1acb      	subs	r3, r1, r3
    525a:	409a      	lsls	r2, r3
    525c:	4315      	orrs	r5, r2
    525e:	1e6a      	subs	r2, r5, #1
    5260:	4195      	sbcs	r5, r2
    5262:	2700      	movs	r7, #0
    5264:	4325      	orrs	r5, r4
    5266:	2400      	movs	r4, #0
    5268:	e71f      	b.n	50aa <__aeabi_dsub+0x182>
    526a:	4663      	mov	r3, ip
    526c:	0002      	movs	r2, r0
    526e:	3b20      	subs	r3, #32
    5270:	40da      	lsrs	r2, r3
    5272:	4663      	mov	r3, ip
    5274:	2b20      	cmp	r3, #32
    5276:	d071      	beq.n	535c <__aeabi_dsub+0x434>
    5278:	2340      	movs	r3, #64	; 0x40
    527a:	4666      	mov	r6, ip
    527c:	1b9b      	subs	r3, r3, r6
    527e:	4098      	lsls	r0, r3
    5280:	4301      	orrs	r1, r0
    5282:	1e48      	subs	r0, r1, #1
    5284:	4181      	sbcs	r1, r0
    5286:	4311      	orrs	r1, r2
    5288:	2200      	movs	r2, #0
    528a:	e6cf      	b.n	502c <__aeabi_dsub+0x104>
    528c:	000007ff 	.word	0x000007ff
    5290:	ff7fffff 	.word	0xff7fffff
    5294:	800fffff 	.word	0x800fffff
    5298:	2c00      	cmp	r4, #0
    529a:	d048      	beq.n	532e <__aeabi_dsub+0x406>
    529c:	4cca      	ldr	r4, [pc, #808]	; (55c8 <__aeabi_dsub+0x6a0>)
    529e:	42a2      	cmp	r2, r4
    52a0:	d100      	bne.n	52a4 <__aeabi_dsub+0x37c>
    52a2:	e0a2      	b.n	53ea <__aeabi_dsub+0x4c2>
    52a4:	4274      	negs	r4, r6
    52a6:	46a1      	mov	r9, r4
    52a8:	2480      	movs	r4, #128	; 0x80
    52aa:	0424      	lsls	r4, r4, #16
    52ac:	4327      	orrs	r7, r4
    52ae:	464c      	mov	r4, r9
    52b0:	2c38      	cmp	r4, #56	; 0x38
    52b2:	dd00      	ble.n	52b6 <__aeabi_dsub+0x38e>
    52b4:	e0db      	b.n	546e <__aeabi_dsub+0x546>
    52b6:	2c1f      	cmp	r4, #31
    52b8:	dd00      	ble.n	52bc <__aeabi_dsub+0x394>
    52ba:	e144      	b.n	5546 <__aeabi_dsub+0x61e>
    52bc:	464e      	mov	r6, r9
    52be:	2420      	movs	r4, #32
    52c0:	1ba4      	subs	r4, r4, r6
    52c2:	003e      	movs	r6, r7
    52c4:	40a6      	lsls	r6, r4
    52c6:	46a2      	mov	sl, r4
    52c8:	46b0      	mov	r8, r6
    52ca:	464c      	mov	r4, r9
    52cc:	002e      	movs	r6, r5
    52ce:	40e6      	lsrs	r6, r4
    52d0:	46b4      	mov	ip, r6
    52d2:	4646      	mov	r6, r8
    52d4:	4664      	mov	r4, ip
    52d6:	4326      	orrs	r6, r4
    52d8:	4654      	mov	r4, sl
    52da:	40a5      	lsls	r5, r4
    52dc:	1e6c      	subs	r4, r5, #1
    52de:	41a5      	sbcs	r5, r4
    52e0:	0034      	movs	r4, r6
    52e2:	432c      	orrs	r4, r5
    52e4:	464d      	mov	r5, r9
    52e6:	40ef      	lsrs	r7, r5
    52e8:	1b0d      	subs	r5, r1, r4
    52ea:	e028      	b.n	533e <__aeabi_dsub+0x416>
    52ec:	464a      	mov	r2, r9
    52ee:	4643      	mov	r3, r8
    52f0:	464d      	mov	r5, r9
    52f2:	431a      	orrs	r2, r3
    52f4:	d000      	beq.n	52f8 <__aeabi_dsub+0x3d0>
    52f6:	e6a5      	b.n	5044 <__aeabi_dsub+0x11c>
    52f8:	2300      	movs	r3, #0
    52fa:	2400      	movs	r4, #0
    52fc:	2500      	movs	r5, #0
    52fe:	e6de      	b.n	50be <__aeabi_dsub+0x196>
    5300:	2a1f      	cmp	r2, #31
    5302:	dc5a      	bgt.n	53ba <__aeabi_dsub+0x492>
    5304:	4666      	mov	r6, ip
    5306:	2220      	movs	r2, #32
    5308:	1b92      	subs	r2, r2, r6
    530a:	0006      	movs	r6, r0
    530c:	4096      	lsls	r6, r2
    530e:	4691      	mov	r9, r2
    5310:	46b0      	mov	r8, r6
    5312:	4662      	mov	r2, ip
    5314:	000e      	movs	r6, r1
    5316:	40d6      	lsrs	r6, r2
    5318:	4642      	mov	r2, r8
    531a:	4316      	orrs	r6, r2
    531c:	464a      	mov	r2, r9
    531e:	4091      	lsls	r1, r2
    5320:	1e4a      	subs	r2, r1, #1
    5322:	4191      	sbcs	r1, r2
    5324:	0002      	movs	r2, r0
    5326:	4660      	mov	r0, ip
    5328:	4331      	orrs	r1, r6
    532a:	40c2      	lsrs	r2, r0
    532c:	e6e4      	b.n	50f8 <__aeabi_dsub+0x1d0>
    532e:	003c      	movs	r4, r7
    5330:	432c      	orrs	r4, r5
    5332:	d05a      	beq.n	53ea <__aeabi_dsub+0x4c2>
    5334:	43f4      	mvns	r4, r6
    5336:	46a1      	mov	r9, r4
    5338:	2c00      	cmp	r4, #0
    533a:	d152      	bne.n	53e2 <__aeabi_dsub+0x4ba>
    533c:	1b4d      	subs	r5, r1, r5
    533e:	42a9      	cmp	r1, r5
    5340:	4189      	sbcs	r1, r1
    5342:	1bc7      	subs	r7, r0, r7
    5344:	4249      	negs	r1, r1
    5346:	1a7f      	subs	r7, r7, r1
    5348:	0014      	movs	r4, r2
    534a:	469a      	mov	sl, r3
    534c:	e675      	b.n	503a <__aeabi_dsub+0x112>
    534e:	4a9e      	ldr	r2, [pc, #632]	; (55c8 <__aeabi_dsub+0x6a0>)
    5350:	4294      	cmp	r4, r2
    5352:	d000      	beq.n	5356 <__aeabi_dsub+0x42e>
    5354:	e6c7      	b.n	50e6 <__aeabi_dsub+0x1be>
    5356:	e613      	b.n	4f80 <__aeabi_dsub+0x58>
    5358:	2200      	movs	r2, #0
    535a:	e77f      	b.n	525c <__aeabi_dsub+0x334>
    535c:	2000      	movs	r0, #0
    535e:	e78f      	b.n	5280 <__aeabi_dsub+0x358>
    5360:	2c00      	cmp	r4, #0
    5362:	d000      	beq.n	5366 <__aeabi_dsub+0x43e>
    5364:	e0c8      	b.n	54f8 <__aeabi_dsub+0x5d0>
    5366:	003b      	movs	r3, r7
    5368:	432b      	orrs	r3, r5
    536a:	d100      	bne.n	536e <__aeabi_dsub+0x446>
    536c:	e10f      	b.n	558e <__aeabi_dsub+0x666>
    536e:	0003      	movs	r3, r0
    5370:	430b      	orrs	r3, r1
    5372:	d100      	bne.n	5376 <__aeabi_dsub+0x44e>
    5374:	e604      	b.n	4f80 <__aeabi_dsub+0x58>
    5376:	1869      	adds	r1, r5, r1
    5378:	42a9      	cmp	r1, r5
    537a:	419b      	sbcs	r3, r3
    537c:	183f      	adds	r7, r7, r0
    537e:	425b      	negs	r3, r3
    5380:	19df      	adds	r7, r3, r7
    5382:	023b      	lsls	r3, r7, #8
    5384:	d400      	bmi.n	5388 <__aeabi_dsub+0x460>
    5386:	e11a      	b.n	55be <__aeabi_dsub+0x696>
    5388:	4b90      	ldr	r3, [pc, #576]	; (55cc <__aeabi_dsub+0x6a4>)
    538a:	000d      	movs	r5, r1
    538c:	401f      	ands	r7, r3
    538e:	4664      	mov	r4, ip
    5390:	e5f6      	b.n	4f80 <__aeabi_dsub+0x58>
    5392:	469a      	mov	sl, r3
    5394:	e689      	b.n	50aa <__aeabi_dsub+0x182>
    5396:	003a      	movs	r2, r7
    5398:	432a      	orrs	r2, r5
    539a:	2c00      	cmp	r4, #0
    539c:	d15c      	bne.n	5458 <__aeabi_dsub+0x530>
    539e:	2a00      	cmp	r2, #0
    53a0:	d175      	bne.n	548e <__aeabi_dsub+0x566>
    53a2:	0002      	movs	r2, r0
    53a4:	430a      	orrs	r2, r1
    53a6:	d100      	bne.n	53aa <__aeabi_dsub+0x482>
    53a8:	e0ca      	b.n	5540 <__aeabi_dsub+0x618>
    53aa:	0007      	movs	r7, r0
    53ac:	000d      	movs	r5, r1
    53ae:	469a      	mov	sl, r3
    53b0:	e5e6      	b.n	4f80 <__aeabi_dsub+0x58>
    53b2:	4664      	mov	r4, ip
    53b4:	2200      	movs	r2, #0
    53b6:	2500      	movs	r5, #0
    53b8:	e681      	b.n	50be <__aeabi_dsub+0x196>
    53ba:	4662      	mov	r2, ip
    53bc:	0006      	movs	r6, r0
    53be:	3a20      	subs	r2, #32
    53c0:	40d6      	lsrs	r6, r2
    53c2:	4662      	mov	r2, ip
    53c4:	46b0      	mov	r8, r6
    53c6:	2a20      	cmp	r2, #32
    53c8:	d100      	bne.n	53cc <__aeabi_dsub+0x4a4>
    53ca:	e0b7      	b.n	553c <__aeabi_dsub+0x614>
    53cc:	2240      	movs	r2, #64	; 0x40
    53ce:	4666      	mov	r6, ip
    53d0:	1b92      	subs	r2, r2, r6
    53d2:	4090      	lsls	r0, r2
    53d4:	4301      	orrs	r1, r0
    53d6:	4642      	mov	r2, r8
    53d8:	1e48      	subs	r0, r1, #1
    53da:	4181      	sbcs	r1, r0
    53dc:	4311      	orrs	r1, r2
    53de:	2200      	movs	r2, #0
    53e0:	e68a      	b.n	50f8 <__aeabi_dsub+0x1d0>
    53e2:	4c79      	ldr	r4, [pc, #484]	; (55c8 <__aeabi_dsub+0x6a0>)
    53e4:	42a2      	cmp	r2, r4
    53e6:	d000      	beq.n	53ea <__aeabi_dsub+0x4c2>
    53e8:	e761      	b.n	52ae <__aeabi_dsub+0x386>
    53ea:	0007      	movs	r7, r0
    53ec:	000d      	movs	r5, r1
    53ee:	0014      	movs	r4, r2
    53f0:	469a      	mov	sl, r3
    53f2:	e5c5      	b.n	4f80 <__aeabi_dsub+0x58>
    53f4:	2c00      	cmp	r4, #0
    53f6:	d141      	bne.n	547c <__aeabi_dsub+0x554>
    53f8:	003c      	movs	r4, r7
    53fa:	432c      	orrs	r4, r5
    53fc:	d078      	beq.n	54f0 <__aeabi_dsub+0x5c8>
    53fe:	43f4      	mvns	r4, r6
    5400:	46a1      	mov	r9, r4
    5402:	2c00      	cmp	r4, #0
    5404:	d020      	beq.n	5448 <__aeabi_dsub+0x520>
    5406:	4c70      	ldr	r4, [pc, #448]	; (55c8 <__aeabi_dsub+0x6a0>)
    5408:	42a2      	cmp	r2, r4
    540a:	d071      	beq.n	54f0 <__aeabi_dsub+0x5c8>
    540c:	464c      	mov	r4, r9
    540e:	2c38      	cmp	r4, #56	; 0x38
    5410:	dd00      	ble.n	5414 <__aeabi_dsub+0x4ec>
    5412:	e0b2      	b.n	557a <__aeabi_dsub+0x652>
    5414:	2c1f      	cmp	r4, #31
    5416:	dd00      	ble.n	541a <__aeabi_dsub+0x4f2>
    5418:	e0bc      	b.n	5594 <__aeabi_dsub+0x66c>
    541a:	2620      	movs	r6, #32
    541c:	1b34      	subs	r4, r6, r4
    541e:	46a2      	mov	sl, r4
    5420:	003c      	movs	r4, r7
    5422:	4656      	mov	r6, sl
    5424:	40b4      	lsls	r4, r6
    5426:	464e      	mov	r6, r9
    5428:	46a0      	mov	r8, r4
    542a:	002c      	movs	r4, r5
    542c:	40f4      	lsrs	r4, r6
    542e:	46a4      	mov	ip, r4
    5430:	4644      	mov	r4, r8
    5432:	4666      	mov	r6, ip
    5434:	4334      	orrs	r4, r6
    5436:	46a4      	mov	ip, r4
    5438:	4654      	mov	r4, sl
    543a:	40a5      	lsls	r5, r4
    543c:	4664      	mov	r4, ip
    543e:	1e6e      	subs	r6, r5, #1
    5440:	41b5      	sbcs	r5, r6
    5442:	4325      	orrs	r5, r4
    5444:	464c      	mov	r4, r9
    5446:	40e7      	lsrs	r7, r4
    5448:	186d      	adds	r5, r5, r1
    544a:	428d      	cmp	r5, r1
    544c:	4189      	sbcs	r1, r1
    544e:	183f      	adds	r7, r7, r0
    5450:	4249      	negs	r1, r1
    5452:	19cf      	adds	r7, r1, r7
    5454:	0014      	movs	r4, r2
    5456:	e656      	b.n	5106 <__aeabi_dsub+0x1de>
    5458:	2a00      	cmp	r2, #0
    545a:	d12f      	bne.n	54bc <__aeabi_dsub+0x594>
    545c:	0002      	movs	r2, r0
    545e:	430a      	orrs	r2, r1
    5460:	d100      	bne.n	5464 <__aeabi_dsub+0x53c>
    5462:	e084      	b.n	556e <__aeabi_dsub+0x646>
    5464:	0007      	movs	r7, r0
    5466:	000d      	movs	r5, r1
    5468:	469a      	mov	sl, r3
    546a:	4c57      	ldr	r4, [pc, #348]	; (55c8 <__aeabi_dsub+0x6a0>)
    546c:	e588      	b.n	4f80 <__aeabi_dsub+0x58>
    546e:	433d      	orrs	r5, r7
    5470:	1e6f      	subs	r7, r5, #1
    5472:	41bd      	sbcs	r5, r7
    5474:	b2ec      	uxtb	r4, r5
    5476:	2700      	movs	r7, #0
    5478:	1b0d      	subs	r5, r1, r4
    547a:	e760      	b.n	533e <__aeabi_dsub+0x416>
    547c:	4c52      	ldr	r4, [pc, #328]	; (55c8 <__aeabi_dsub+0x6a0>)
    547e:	42a2      	cmp	r2, r4
    5480:	d036      	beq.n	54f0 <__aeabi_dsub+0x5c8>
    5482:	4274      	negs	r4, r6
    5484:	2680      	movs	r6, #128	; 0x80
    5486:	0436      	lsls	r6, r6, #16
    5488:	46a1      	mov	r9, r4
    548a:	4337      	orrs	r7, r6
    548c:	e7be      	b.n	540c <__aeabi_dsub+0x4e4>
    548e:	0002      	movs	r2, r0
    5490:	430a      	orrs	r2, r1
    5492:	d100      	bne.n	5496 <__aeabi_dsub+0x56e>
    5494:	e574      	b.n	4f80 <__aeabi_dsub+0x58>
    5496:	1a6a      	subs	r2, r5, r1
    5498:	4690      	mov	r8, r2
    549a:	4545      	cmp	r5, r8
    549c:	41b6      	sbcs	r6, r6
    549e:	1a3a      	subs	r2, r7, r0
    54a0:	4276      	negs	r6, r6
    54a2:	1b92      	subs	r2, r2, r6
    54a4:	4694      	mov	ip, r2
    54a6:	0212      	lsls	r2, r2, #8
    54a8:	d400      	bmi.n	54ac <__aeabi_dsub+0x584>
    54aa:	e5f7      	b.n	509c <__aeabi_dsub+0x174>
    54ac:	1b4d      	subs	r5, r1, r5
    54ae:	42a9      	cmp	r1, r5
    54b0:	4189      	sbcs	r1, r1
    54b2:	1bc7      	subs	r7, r0, r7
    54b4:	4249      	negs	r1, r1
    54b6:	1a7f      	subs	r7, r7, r1
    54b8:	469a      	mov	sl, r3
    54ba:	e561      	b.n	4f80 <__aeabi_dsub+0x58>
    54bc:	0002      	movs	r2, r0
    54be:	430a      	orrs	r2, r1
    54c0:	d03a      	beq.n	5538 <__aeabi_dsub+0x610>
    54c2:	08ed      	lsrs	r5, r5, #3
    54c4:	077c      	lsls	r4, r7, #29
    54c6:	432c      	orrs	r4, r5
    54c8:	2580      	movs	r5, #128	; 0x80
    54ca:	08fa      	lsrs	r2, r7, #3
    54cc:	032d      	lsls	r5, r5, #12
    54ce:	422a      	tst	r2, r5
    54d0:	d008      	beq.n	54e4 <__aeabi_dsub+0x5bc>
    54d2:	08c7      	lsrs	r7, r0, #3
    54d4:	422f      	tst	r7, r5
    54d6:	d105      	bne.n	54e4 <__aeabi_dsub+0x5bc>
    54d8:	0745      	lsls	r5, r0, #29
    54da:	002c      	movs	r4, r5
    54dc:	003a      	movs	r2, r7
    54de:	469a      	mov	sl, r3
    54e0:	08c9      	lsrs	r1, r1, #3
    54e2:	430c      	orrs	r4, r1
    54e4:	0f67      	lsrs	r7, r4, #29
    54e6:	00d2      	lsls	r2, r2, #3
    54e8:	00e5      	lsls	r5, r4, #3
    54ea:	4317      	orrs	r7, r2
    54ec:	4c36      	ldr	r4, [pc, #216]	; (55c8 <__aeabi_dsub+0x6a0>)
    54ee:	e547      	b.n	4f80 <__aeabi_dsub+0x58>
    54f0:	0007      	movs	r7, r0
    54f2:	000d      	movs	r5, r1
    54f4:	0014      	movs	r4, r2
    54f6:	e543      	b.n	4f80 <__aeabi_dsub+0x58>
    54f8:	003a      	movs	r2, r7
    54fa:	432a      	orrs	r2, r5
    54fc:	d043      	beq.n	5586 <__aeabi_dsub+0x65e>
    54fe:	0002      	movs	r2, r0
    5500:	430a      	orrs	r2, r1
    5502:	d019      	beq.n	5538 <__aeabi_dsub+0x610>
    5504:	08ed      	lsrs	r5, r5, #3
    5506:	077c      	lsls	r4, r7, #29
    5508:	432c      	orrs	r4, r5
    550a:	2580      	movs	r5, #128	; 0x80
    550c:	08fa      	lsrs	r2, r7, #3
    550e:	032d      	lsls	r5, r5, #12
    5510:	422a      	tst	r2, r5
    5512:	d007      	beq.n	5524 <__aeabi_dsub+0x5fc>
    5514:	08c6      	lsrs	r6, r0, #3
    5516:	422e      	tst	r6, r5
    5518:	d104      	bne.n	5524 <__aeabi_dsub+0x5fc>
    551a:	0747      	lsls	r7, r0, #29
    551c:	003c      	movs	r4, r7
    551e:	0032      	movs	r2, r6
    5520:	08c9      	lsrs	r1, r1, #3
    5522:	430c      	orrs	r4, r1
    5524:	00d7      	lsls	r7, r2, #3
    5526:	0f62      	lsrs	r2, r4, #29
    5528:	00e5      	lsls	r5, r4, #3
    552a:	4317      	orrs	r7, r2
    552c:	469a      	mov	sl, r3
    552e:	4c26      	ldr	r4, [pc, #152]	; (55c8 <__aeabi_dsub+0x6a0>)
    5530:	e526      	b.n	4f80 <__aeabi_dsub+0x58>
    5532:	2200      	movs	r2, #0
    5534:	2500      	movs	r5, #0
    5536:	e544      	b.n	4fc2 <__aeabi_dsub+0x9a>
    5538:	4c23      	ldr	r4, [pc, #140]	; (55c8 <__aeabi_dsub+0x6a0>)
    553a:	e521      	b.n	4f80 <__aeabi_dsub+0x58>
    553c:	2000      	movs	r0, #0
    553e:	e749      	b.n	53d4 <__aeabi_dsub+0x4ac>
    5540:	2300      	movs	r3, #0
    5542:	2500      	movs	r5, #0
    5544:	e5bb      	b.n	50be <__aeabi_dsub+0x196>
    5546:	464c      	mov	r4, r9
    5548:	003e      	movs	r6, r7
    554a:	3c20      	subs	r4, #32
    554c:	40e6      	lsrs	r6, r4
    554e:	464c      	mov	r4, r9
    5550:	46b4      	mov	ip, r6
    5552:	2c20      	cmp	r4, #32
    5554:	d031      	beq.n	55ba <__aeabi_dsub+0x692>
    5556:	2440      	movs	r4, #64	; 0x40
    5558:	464e      	mov	r6, r9
    555a:	1ba6      	subs	r6, r4, r6
    555c:	40b7      	lsls	r7, r6
    555e:	433d      	orrs	r5, r7
    5560:	1e6c      	subs	r4, r5, #1
    5562:	41a5      	sbcs	r5, r4
    5564:	4664      	mov	r4, ip
    5566:	432c      	orrs	r4, r5
    5568:	2700      	movs	r7, #0
    556a:	1b0d      	subs	r5, r1, r4
    556c:	e6e7      	b.n	533e <__aeabi_dsub+0x416>
    556e:	2280      	movs	r2, #128	; 0x80
    5570:	2300      	movs	r3, #0
    5572:	0312      	lsls	r2, r2, #12
    5574:	4c14      	ldr	r4, [pc, #80]	; (55c8 <__aeabi_dsub+0x6a0>)
    5576:	2500      	movs	r5, #0
    5578:	e5a1      	b.n	50be <__aeabi_dsub+0x196>
    557a:	433d      	orrs	r5, r7
    557c:	1e6f      	subs	r7, r5, #1
    557e:	41bd      	sbcs	r5, r7
    5580:	2700      	movs	r7, #0
    5582:	b2ed      	uxtb	r5, r5
    5584:	e760      	b.n	5448 <__aeabi_dsub+0x520>
    5586:	0007      	movs	r7, r0
    5588:	000d      	movs	r5, r1
    558a:	4c0f      	ldr	r4, [pc, #60]	; (55c8 <__aeabi_dsub+0x6a0>)
    558c:	e4f8      	b.n	4f80 <__aeabi_dsub+0x58>
    558e:	0007      	movs	r7, r0
    5590:	000d      	movs	r5, r1
    5592:	e4f5      	b.n	4f80 <__aeabi_dsub+0x58>
    5594:	464e      	mov	r6, r9
    5596:	003c      	movs	r4, r7
    5598:	3e20      	subs	r6, #32
    559a:	40f4      	lsrs	r4, r6
    559c:	46a0      	mov	r8, r4
    559e:	464c      	mov	r4, r9
    55a0:	2c20      	cmp	r4, #32
    55a2:	d00e      	beq.n	55c2 <__aeabi_dsub+0x69a>
    55a4:	2440      	movs	r4, #64	; 0x40
    55a6:	464e      	mov	r6, r9
    55a8:	1ba4      	subs	r4, r4, r6
    55aa:	40a7      	lsls	r7, r4
    55ac:	433d      	orrs	r5, r7
    55ae:	1e6f      	subs	r7, r5, #1
    55b0:	41bd      	sbcs	r5, r7
    55b2:	4644      	mov	r4, r8
    55b4:	2700      	movs	r7, #0
    55b6:	4325      	orrs	r5, r4
    55b8:	e746      	b.n	5448 <__aeabi_dsub+0x520>
    55ba:	2700      	movs	r7, #0
    55bc:	e7cf      	b.n	555e <__aeabi_dsub+0x636>
    55be:	000d      	movs	r5, r1
    55c0:	e573      	b.n	50aa <__aeabi_dsub+0x182>
    55c2:	2700      	movs	r7, #0
    55c4:	e7f2      	b.n	55ac <__aeabi_dsub+0x684>
    55c6:	46c0      	nop			; (mov r8, r8)
    55c8:	000007ff 	.word	0x000007ff
    55cc:	ff7fffff 	.word	0xff7fffff

000055d0 <__aeabi_dcmpun>:
    55d0:	b570      	push	{r4, r5, r6, lr}
    55d2:	4e0e      	ldr	r6, [pc, #56]	; (560c <__aeabi_dcmpun+0x3c>)
    55d4:	030c      	lsls	r4, r1, #12
    55d6:	031d      	lsls	r5, r3, #12
    55d8:	0049      	lsls	r1, r1, #1
    55da:	005b      	lsls	r3, r3, #1
    55dc:	0b24      	lsrs	r4, r4, #12
    55de:	0d49      	lsrs	r1, r1, #21
    55e0:	0b2d      	lsrs	r5, r5, #12
    55e2:	0d5b      	lsrs	r3, r3, #21
    55e4:	42b1      	cmp	r1, r6
    55e6:	d004      	beq.n	55f2 <__aeabi_dcmpun+0x22>
    55e8:	4908      	ldr	r1, [pc, #32]	; (560c <__aeabi_dcmpun+0x3c>)
    55ea:	2000      	movs	r0, #0
    55ec:	428b      	cmp	r3, r1
    55ee:	d008      	beq.n	5602 <__aeabi_dcmpun+0x32>
    55f0:	bd70      	pop	{r4, r5, r6, pc}
    55f2:	4304      	orrs	r4, r0
    55f4:	2001      	movs	r0, #1
    55f6:	2c00      	cmp	r4, #0
    55f8:	d1fa      	bne.n	55f0 <__aeabi_dcmpun+0x20>
    55fa:	4904      	ldr	r1, [pc, #16]	; (560c <__aeabi_dcmpun+0x3c>)
    55fc:	2000      	movs	r0, #0
    55fe:	428b      	cmp	r3, r1
    5600:	d1f6      	bne.n	55f0 <__aeabi_dcmpun+0x20>
    5602:	4315      	orrs	r5, r2
    5604:	0028      	movs	r0, r5
    5606:	1e45      	subs	r5, r0, #1
    5608:	41a8      	sbcs	r0, r5
    560a:	e7f1      	b.n	55f0 <__aeabi_dcmpun+0x20>
    560c:	000007ff 	.word	0x000007ff

00005610 <__aeabi_d2iz>:
    5610:	030b      	lsls	r3, r1, #12
    5612:	b530      	push	{r4, r5, lr}
    5614:	4d13      	ldr	r5, [pc, #76]	; (5664 <__aeabi_d2iz+0x54>)
    5616:	0b1a      	lsrs	r2, r3, #12
    5618:	004b      	lsls	r3, r1, #1
    561a:	0d5b      	lsrs	r3, r3, #21
    561c:	0fc9      	lsrs	r1, r1, #31
    561e:	2400      	movs	r4, #0
    5620:	42ab      	cmp	r3, r5
    5622:	dd11      	ble.n	5648 <__aeabi_d2iz+0x38>
    5624:	4c10      	ldr	r4, [pc, #64]	; (5668 <__aeabi_d2iz+0x58>)
    5626:	42a3      	cmp	r3, r4
    5628:	dc10      	bgt.n	564c <__aeabi_d2iz+0x3c>
    562a:	2480      	movs	r4, #128	; 0x80
    562c:	0364      	lsls	r4, r4, #13
    562e:	4322      	orrs	r2, r4
    5630:	4c0e      	ldr	r4, [pc, #56]	; (566c <__aeabi_d2iz+0x5c>)
    5632:	1ae4      	subs	r4, r4, r3
    5634:	2c1f      	cmp	r4, #31
    5636:	dd0c      	ble.n	5652 <__aeabi_d2iz+0x42>
    5638:	480d      	ldr	r0, [pc, #52]	; (5670 <__aeabi_d2iz+0x60>)
    563a:	1ac3      	subs	r3, r0, r3
    563c:	40da      	lsrs	r2, r3
    563e:	0013      	movs	r3, r2
    5640:	425c      	negs	r4, r3
    5642:	2900      	cmp	r1, #0
    5644:	d100      	bne.n	5648 <__aeabi_d2iz+0x38>
    5646:	001c      	movs	r4, r3
    5648:	0020      	movs	r0, r4
    564a:	bd30      	pop	{r4, r5, pc}
    564c:	4b09      	ldr	r3, [pc, #36]	; (5674 <__aeabi_d2iz+0x64>)
    564e:	18cc      	adds	r4, r1, r3
    5650:	e7fa      	b.n	5648 <__aeabi_d2iz+0x38>
    5652:	40e0      	lsrs	r0, r4
    5654:	4c08      	ldr	r4, [pc, #32]	; (5678 <__aeabi_d2iz+0x68>)
    5656:	46a4      	mov	ip, r4
    5658:	4463      	add	r3, ip
    565a:	409a      	lsls	r2, r3
    565c:	0013      	movs	r3, r2
    565e:	4303      	orrs	r3, r0
    5660:	e7ee      	b.n	5640 <__aeabi_d2iz+0x30>
    5662:	46c0      	nop			; (mov r8, r8)
    5664:	000003fe 	.word	0x000003fe
    5668:	0000041d 	.word	0x0000041d
    566c:	00000433 	.word	0x00000433
    5670:	00000413 	.word	0x00000413
    5674:	7fffffff 	.word	0x7fffffff
    5678:	fffffbed 	.word	0xfffffbed

0000567c <__aeabi_i2d>:
    567c:	b570      	push	{r4, r5, r6, lr}
    567e:	2800      	cmp	r0, #0
    5680:	d030      	beq.n	56e4 <__aeabi_i2d+0x68>
    5682:	17c3      	asrs	r3, r0, #31
    5684:	18c4      	adds	r4, r0, r3
    5686:	405c      	eors	r4, r3
    5688:	0fc5      	lsrs	r5, r0, #31
    568a:	0020      	movs	r0, r4
    568c:	f000 f9dc 	bl	5a48 <__clzsi2>
    5690:	4b17      	ldr	r3, [pc, #92]	; (56f0 <__aeabi_i2d+0x74>)
    5692:	4a18      	ldr	r2, [pc, #96]	; (56f4 <__aeabi_i2d+0x78>)
    5694:	1a1b      	subs	r3, r3, r0
    5696:	1ad2      	subs	r2, r2, r3
    5698:	2a1f      	cmp	r2, #31
    569a:	dd18      	ble.n	56ce <__aeabi_i2d+0x52>
    569c:	4a16      	ldr	r2, [pc, #88]	; (56f8 <__aeabi_i2d+0x7c>)
    569e:	1ad2      	subs	r2, r2, r3
    56a0:	4094      	lsls	r4, r2
    56a2:	2200      	movs	r2, #0
    56a4:	0324      	lsls	r4, r4, #12
    56a6:	055b      	lsls	r3, r3, #21
    56a8:	0b24      	lsrs	r4, r4, #12
    56aa:	0d5b      	lsrs	r3, r3, #21
    56ac:	2100      	movs	r1, #0
    56ae:	0010      	movs	r0, r2
    56b0:	0324      	lsls	r4, r4, #12
    56b2:	0d0a      	lsrs	r2, r1, #20
    56b4:	0512      	lsls	r2, r2, #20
    56b6:	0b24      	lsrs	r4, r4, #12
    56b8:	4314      	orrs	r4, r2
    56ba:	4a10      	ldr	r2, [pc, #64]	; (56fc <__aeabi_i2d+0x80>)
    56bc:	051b      	lsls	r3, r3, #20
    56be:	4014      	ands	r4, r2
    56c0:	431c      	orrs	r4, r3
    56c2:	0064      	lsls	r4, r4, #1
    56c4:	07ed      	lsls	r5, r5, #31
    56c6:	0864      	lsrs	r4, r4, #1
    56c8:	432c      	orrs	r4, r5
    56ca:	0021      	movs	r1, r4
    56cc:	bd70      	pop	{r4, r5, r6, pc}
    56ce:	0021      	movs	r1, r4
    56d0:	4091      	lsls	r1, r2
    56d2:	000a      	movs	r2, r1
    56d4:	210b      	movs	r1, #11
    56d6:	1a08      	subs	r0, r1, r0
    56d8:	40c4      	lsrs	r4, r0
    56da:	055b      	lsls	r3, r3, #21
    56dc:	0324      	lsls	r4, r4, #12
    56de:	0b24      	lsrs	r4, r4, #12
    56e0:	0d5b      	lsrs	r3, r3, #21
    56e2:	e7e3      	b.n	56ac <__aeabi_i2d+0x30>
    56e4:	2500      	movs	r5, #0
    56e6:	2300      	movs	r3, #0
    56e8:	2400      	movs	r4, #0
    56ea:	2200      	movs	r2, #0
    56ec:	e7de      	b.n	56ac <__aeabi_i2d+0x30>
    56ee:	46c0      	nop			; (mov r8, r8)
    56f0:	0000041e 	.word	0x0000041e
    56f4:	00000433 	.word	0x00000433
    56f8:	00000413 	.word	0x00000413
    56fc:	800fffff 	.word	0x800fffff

00005700 <__aeabi_ui2d>:
    5700:	b570      	push	{r4, r5, r6, lr}
    5702:	1e05      	subs	r5, r0, #0
    5704:	d028      	beq.n	5758 <__aeabi_ui2d+0x58>
    5706:	f000 f99f 	bl	5a48 <__clzsi2>
    570a:	4b15      	ldr	r3, [pc, #84]	; (5760 <__aeabi_ui2d+0x60>)
    570c:	4a15      	ldr	r2, [pc, #84]	; (5764 <__aeabi_ui2d+0x64>)
    570e:	1a1b      	subs	r3, r3, r0
    5710:	1ad2      	subs	r2, r2, r3
    5712:	2a1f      	cmp	r2, #31
    5714:	dd16      	ble.n	5744 <__aeabi_ui2d+0x44>
    5716:	002c      	movs	r4, r5
    5718:	4a13      	ldr	r2, [pc, #76]	; (5768 <__aeabi_ui2d+0x68>)
    571a:	2500      	movs	r5, #0
    571c:	1ad2      	subs	r2, r2, r3
    571e:	4094      	lsls	r4, r2
    5720:	055a      	lsls	r2, r3, #21
    5722:	0324      	lsls	r4, r4, #12
    5724:	0b24      	lsrs	r4, r4, #12
    5726:	0d52      	lsrs	r2, r2, #21
    5728:	2100      	movs	r1, #0
    572a:	0324      	lsls	r4, r4, #12
    572c:	0d0b      	lsrs	r3, r1, #20
    572e:	0b24      	lsrs	r4, r4, #12
    5730:	051b      	lsls	r3, r3, #20
    5732:	4323      	orrs	r3, r4
    5734:	4c0d      	ldr	r4, [pc, #52]	; (576c <__aeabi_ui2d+0x6c>)
    5736:	0512      	lsls	r2, r2, #20
    5738:	4023      	ands	r3, r4
    573a:	4313      	orrs	r3, r2
    573c:	005b      	lsls	r3, r3, #1
    573e:	0028      	movs	r0, r5
    5740:	0859      	lsrs	r1, r3, #1
    5742:	bd70      	pop	{r4, r5, r6, pc}
    5744:	210b      	movs	r1, #11
    5746:	002c      	movs	r4, r5
    5748:	1a08      	subs	r0, r1, r0
    574a:	40c4      	lsrs	r4, r0
    574c:	4095      	lsls	r5, r2
    574e:	0324      	lsls	r4, r4, #12
    5750:	055a      	lsls	r2, r3, #21
    5752:	0b24      	lsrs	r4, r4, #12
    5754:	0d52      	lsrs	r2, r2, #21
    5756:	e7e7      	b.n	5728 <__aeabi_ui2d+0x28>
    5758:	2200      	movs	r2, #0
    575a:	2400      	movs	r4, #0
    575c:	e7e4      	b.n	5728 <__aeabi_ui2d+0x28>
    575e:	46c0      	nop			; (mov r8, r8)
    5760:	0000041e 	.word	0x0000041e
    5764:	00000433 	.word	0x00000433
    5768:	00000413 	.word	0x00000413
    576c:	800fffff 	.word	0x800fffff

00005770 <__aeabi_f2d>:
    5770:	0042      	lsls	r2, r0, #1
    5772:	0e12      	lsrs	r2, r2, #24
    5774:	1c51      	adds	r1, r2, #1
    5776:	0243      	lsls	r3, r0, #9
    5778:	b2c9      	uxtb	r1, r1
    577a:	b570      	push	{r4, r5, r6, lr}
    577c:	0a5d      	lsrs	r5, r3, #9
    577e:	0fc4      	lsrs	r4, r0, #31
    5780:	2901      	cmp	r1, #1
    5782:	dd15      	ble.n	57b0 <__aeabi_f2d+0x40>
    5784:	21e0      	movs	r1, #224	; 0xe0
    5786:	0089      	lsls	r1, r1, #2
    5788:	468c      	mov	ip, r1
    578a:	076d      	lsls	r5, r5, #29
    578c:	0b1b      	lsrs	r3, r3, #12
    578e:	4462      	add	r2, ip
    5790:	2100      	movs	r1, #0
    5792:	0028      	movs	r0, r5
    5794:	0d0d      	lsrs	r5, r1, #20
    5796:	052d      	lsls	r5, r5, #20
    5798:	432b      	orrs	r3, r5
    579a:	4d1c      	ldr	r5, [pc, #112]	; (580c <__aeabi_f2d+0x9c>)
    579c:	0552      	lsls	r2, r2, #21
    579e:	402b      	ands	r3, r5
    57a0:	0852      	lsrs	r2, r2, #1
    57a2:	4313      	orrs	r3, r2
    57a4:	005b      	lsls	r3, r3, #1
    57a6:	07e4      	lsls	r4, r4, #31
    57a8:	085b      	lsrs	r3, r3, #1
    57aa:	4323      	orrs	r3, r4
    57ac:	0019      	movs	r1, r3
    57ae:	bd70      	pop	{r4, r5, r6, pc}
    57b0:	2a00      	cmp	r2, #0
    57b2:	d115      	bne.n	57e0 <__aeabi_f2d+0x70>
    57b4:	2d00      	cmp	r5, #0
    57b6:	d01f      	beq.n	57f8 <__aeabi_f2d+0x88>
    57b8:	0028      	movs	r0, r5
    57ba:	f000 f945 	bl	5a48 <__clzsi2>
    57be:	280a      	cmp	r0, #10
    57c0:	dc1d      	bgt.n	57fe <__aeabi_f2d+0x8e>
    57c2:	230b      	movs	r3, #11
    57c4:	002a      	movs	r2, r5
    57c6:	1a1b      	subs	r3, r3, r0
    57c8:	40da      	lsrs	r2, r3
    57ca:	0013      	movs	r3, r2
    57cc:	0002      	movs	r2, r0
    57ce:	3215      	adds	r2, #21
    57d0:	4095      	lsls	r5, r2
    57d2:	4a0f      	ldr	r2, [pc, #60]	; (5810 <__aeabi_f2d+0xa0>)
    57d4:	031b      	lsls	r3, r3, #12
    57d6:	1a12      	subs	r2, r2, r0
    57d8:	0552      	lsls	r2, r2, #21
    57da:	0b1b      	lsrs	r3, r3, #12
    57dc:	0d52      	lsrs	r2, r2, #21
    57de:	e7d7      	b.n	5790 <__aeabi_f2d+0x20>
    57e0:	2d00      	cmp	r5, #0
    57e2:	d006      	beq.n	57f2 <__aeabi_f2d+0x82>
    57e4:	2280      	movs	r2, #128	; 0x80
    57e6:	0b1b      	lsrs	r3, r3, #12
    57e8:	0312      	lsls	r2, r2, #12
    57ea:	4313      	orrs	r3, r2
    57ec:	076d      	lsls	r5, r5, #29
    57ee:	4a09      	ldr	r2, [pc, #36]	; (5814 <__aeabi_f2d+0xa4>)
    57f0:	e7ce      	b.n	5790 <__aeabi_f2d+0x20>
    57f2:	4a08      	ldr	r2, [pc, #32]	; (5814 <__aeabi_f2d+0xa4>)
    57f4:	2300      	movs	r3, #0
    57f6:	e7cb      	b.n	5790 <__aeabi_f2d+0x20>
    57f8:	2200      	movs	r2, #0
    57fa:	2300      	movs	r3, #0
    57fc:	e7c8      	b.n	5790 <__aeabi_f2d+0x20>
    57fe:	0003      	movs	r3, r0
    5800:	3b0b      	subs	r3, #11
    5802:	409d      	lsls	r5, r3
    5804:	002b      	movs	r3, r5
    5806:	2500      	movs	r5, #0
    5808:	e7e3      	b.n	57d2 <__aeabi_f2d+0x62>
    580a:	46c0      	nop			; (mov r8, r8)
    580c:	800fffff 	.word	0x800fffff
    5810:	00000389 	.word	0x00000389
    5814:	000007ff 	.word	0x000007ff

00005818 <__aeabi_d2f>:
    5818:	004b      	lsls	r3, r1, #1
    581a:	b570      	push	{r4, r5, r6, lr}
    581c:	0d5e      	lsrs	r6, r3, #21
    581e:	030c      	lsls	r4, r1, #12
    5820:	1c75      	adds	r5, r6, #1
    5822:	0a64      	lsrs	r4, r4, #9
    5824:	0f42      	lsrs	r2, r0, #29
    5826:	056d      	lsls	r5, r5, #21
    5828:	4322      	orrs	r2, r4
    582a:	0fc9      	lsrs	r1, r1, #31
    582c:	00c4      	lsls	r4, r0, #3
    582e:	0d6d      	lsrs	r5, r5, #21
    5830:	2d01      	cmp	r5, #1
    5832:	dd2a      	ble.n	588a <__aeabi_d2f+0x72>
    5834:	4b3b      	ldr	r3, [pc, #236]	; (5924 <__aeabi_d2f+0x10c>)
    5836:	18f3      	adds	r3, r6, r3
    5838:	2bfe      	cmp	r3, #254	; 0xfe
    583a:	dc1a      	bgt.n	5872 <__aeabi_d2f+0x5a>
    583c:	2b00      	cmp	r3, #0
    583e:	dd42      	ble.n	58c6 <__aeabi_d2f+0xae>
    5840:	0180      	lsls	r0, r0, #6
    5842:	1e45      	subs	r5, r0, #1
    5844:	41a8      	sbcs	r0, r5
    5846:	00d2      	lsls	r2, r2, #3
    5848:	4310      	orrs	r0, r2
    584a:	0f62      	lsrs	r2, r4, #29
    584c:	4302      	orrs	r2, r0
    584e:	0750      	lsls	r0, r2, #29
    5850:	d004      	beq.n	585c <__aeabi_d2f+0x44>
    5852:	200f      	movs	r0, #15
    5854:	4010      	ands	r0, r2
    5856:	2804      	cmp	r0, #4
    5858:	d000      	beq.n	585c <__aeabi_d2f+0x44>
    585a:	3204      	adds	r2, #4
    585c:	2080      	movs	r0, #128	; 0x80
    585e:	04c0      	lsls	r0, r0, #19
    5860:	4010      	ands	r0, r2
    5862:	d021      	beq.n	58a8 <__aeabi_d2f+0x90>
    5864:	3301      	adds	r3, #1
    5866:	2bff      	cmp	r3, #255	; 0xff
    5868:	d003      	beq.n	5872 <__aeabi_d2f+0x5a>
    586a:	0192      	lsls	r2, r2, #6
    586c:	0a52      	lsrs	r2, r2, #9
    586e:	b2db      	uxtb	r3, r3
    5870:	e001      	b.n	5876 <__aeabi_d2f+0x5e>
    5872:	23ff      	movs	r3, #255	; 0xff
    5874:	2200      	movs	r2, #0
    5876:	0252      	lsls	r2, r2, #9
    5878:	0a52      	lsrs	r2, r2, #9
    587a:	05db      	lsls	r3, r3, #23
    587c:	4313      	orrs	r3, r2
    587e:	005b      	lsls	r3, r3, #1
    5880:	07c9      	lsls	r1, r1, #31
    5882:	085b      	lsrs	r3, r3, #1
    5884:	430b      	orrs	r3, r1
    5886:	0018      	movs	r0, r3
    5888:	bd70      	pop	{r4, r5, r6, pc}
    588a:	2e00      	cmp	r6, #0
    588c:	d007      	beq.n	589e <__aeabi_d2f+0x86>
    588e:	4314      	orrs	r4, r2
    5890:	d0ef      	beq.n	5872 <__aeabi_d2f+0x5a>
    5892:	2080      	movs	r0, #128	; 0x80
    5894:	00d2      	lsls	r2, r2, #3
    5896:	0480      	lsls	r0, r0, #18
    5898:	4302      	orrs	r2, r0
    589a:	23ff      	movs	r3, #255	; 0xff
    589c:	e7d7      	b.n	584e <__aeabi_d2f+0x36>
    589e:	4322      	orrs	r2, r4
    58a0:	2300      	movs	r3, #0
    58a2:	2a00      	cmp	r2, #0
    58a4:	d003      	beq.n	58ae <__aeabi_d2f+0x96>
    58a6:	2205      	movs	r2, #5
    58a8:	08d2      	lsrs	r2, r2, #3
    58aa:	2bff      	cmp	r3, #255	; 0xff
    58ac:	d003      	beq.n	58b6 <__aeabi_d2f+0x9e>
    58ae:	0252      	lsls	r2, r2, #9
    58b0:	0a52      	lsrs	r2, r2, #9
    58b2:	b2db      	uxtb	r3, r3
    58b4:	e7df      	b.n	5876 <__aeabi_d2f+0x5e>
    58b6:	2a00      	cmp	r2, #0
    58b8:	d032      	beq.n	5920 <__aeabi_d2f+0x108>
    58ba:	2080      	movs	r0, #128	; 0x80
    58bc:	03c0      	lsls	r0, r0, #15
    58be:	4302      	orrs	r2, r0
    58c0:	0252      	lsls	r2, r2, #9
    58c2:	0a52      	lsrs	r2, r2, #9
    58c4:	e7d7      	b.n	5876 <__aeabi_d2f+0x5e>
    58c6:	0018      	movs	r0, r3
    58c8:	3017      	adds	r0, #23
    58ca:	db14      	blt.n	58f6 <__aeabi_d2f+0xde>
    58cc:	2080      	movs	r0, #128	; 0x80
    58ce:	0400      	lsls	r0, r0, #16
    58d0:	4302      	orrs	r2, r0
    58d2:	201e      	movs	r0, #30
    58d4:	1ac0      	subs	r0, r0, r3
    58d6:	281f      	cmp	r0, #31
    58d8:	dc0f      	bgt.n	58fa <__aeabi_d2f+0xe2>
    58da:	0025      	movs	r5, r4
    58dc:	4b12      	ldr	r3, [pc, #72]	; (5928 <__aeabi_d2f+0x110>)
    58de:	18f3      	adds	r3, r6, r3
    58e0:	409d      	lsls	r5, r3
    58e2:	1e6e      	subs	r6, r5, #1
    58e4:	41b5      	sbcs	r5, r6
    58e6:	409a      	lsls	r2, r3
    58e8:	002b      	movs	r3, r5
    58ea:	4313      	orrs	r3, r2
    58ec:	0022      	movs	r2, r4
    58ee:	40c2      	lsrs	r2, r0
    58f0:	431a      	orrs	r2, r3
    58f2:	2300      	movs	r3, #0
    58f4:	e7ab      	b.n	584e <__aeabi_d2f+0x36>
    58f6:	2300      	movs	r3, #0
    58f8:	e7d5      	b.n	58a6 <__aeabi_d2f+0x8e>
    58fa:	2502      	movs	r5, #2
    58fc:	426d      	negs	r5, r5
    58fe:	1aeb      	subs	r3, r5, r3
    5900:	0015      	movs	r5, r2
    5902:	40dd      	lsrs	r5, r3
    5904:	2820      	cmp	r0, #32
    5906:	d009      	beq.n	591c <__aeabi_d2f+0x104>
    5908:	4b08      	ldr	r3, [pc, #32]	; (592c <__aeabi_d2f+0x114>)
    590a:	18f3      	adds	r3, r6, r3
    590c:	409a      	lsls	r2, r3
    590e:	4314      	orrs	r4, r2
    5910:	1e62      	subs	r2, r4, #1
    5912:	4194      	sbcs	r4, r2
    5914:	0022      	movs	r2, r4
    5916:	2300      	movs	r3, #0
    5918:	432a      	orrs	r2, r5
    591a:	e798      	b.n	584e <__aeabi_d2f+0x36>
    591c:	2200      	movs	r2, #0
    591e:	e7f6      	b.n	590e <__aeabi_d2f+0xf6>
    5920:	2200      	movs	r2, #0
    5922:	e7a8      	b.n	5876 <__aeabi_d2f+0x5e>
    5924:	fffffc80 	.word	0xfffffc80
    5928:	fffffc82 	.word	0xfffffc82
    592c:	fffffca2 	.word	0xfffffca2

00005930 <__aeabi_uidiv>:
    5930:	2200      	movs	r2, #0
    5932:	0843      	lsrs	r3, r0, #1
    5934:	428b      	cmp	r3, r1
    5936:	d374      	bcc.n	5a22 <__aeabi_uidiv+0xf2>
    5938:	0903      	lsrs	r3, r0, #4
    593a:	428b      	cmp	r3, r1
    593c:	d35f      	bcc.n	59fe <__aeabi_uidiv+0xce>
    593e:	0a03      	lsrs	r3, r0, #8
    5940:	428b      	cmp	r3, r1
    5942:	d344      	bcc.n	59ce <__aeabi_uidiv+0x9e>
    5944:	0b03      	lsrs	r3, r0, #12
    5946:	428b      	cmp	r3, r1
    5948:	d328      	bcc.n	599c <__aeabi_uidiv+0x6c>
    594a:	0c03      	lsrs	r3, r0, #16
    594c:	428b      	cmp	r3, r1
    594e:	d30d      	bcc.n	596c <__aeabi_uidiv+0x3c>
    5950:	22ff      	movs	r2, #255	; 0xff
    5952:	0209      	lsls	r1, r1, #8
    5954:	ba12      	rev	r2, r2
    5956:	0c03      	lsrs	r3, r0, #16
    5958:	428b      	cmp	r3, r1
    595a:	d302      	bcc.n	5962 <__aeabi_uidiv+0x32>
    595c:	1212      	asrs	r2, r2, #8
    595e:	0209      	lsls	r1, r1, #8
    5960:	d065      	beq.n	5a2e <__aeabi_uidiv+0xfe>
    5962:	0b03      	lsrs	r3, r0, #12
    5964:	428b      	cmp	r3, r1
    5966:	d319      	bcc.n	599c <__aeabi_uidiv+0x6c>
    5968:	e000      	b.n	596c <__aeabi_uidiv+0x3c>
    596a:	0a09      	lsrs	r1, r1, #8
    596c:	0bc3      	lsrs	r3, r0, #15
    596e:	428b      	cmp	r3, r1
    5970:	d301      	bcc.n	5976 <__aeabi_uidiv+0x46>
    5972:	03cb      	lsls	r3, r1, #15
    5974:	1ac0      	subs	r0, r0, r3
    5976:	4152      	adcs	r2, r2
    5978:	0b83      	lsrs	r3, r0, #14
    597a:	428b      	cmp	r3, r1
    597c:	d301      	bcc.n	5982 <__aeabi_uidiv+0x52>
    597e:	038b      	lsls	r3, r1, #14
    5980:	1ac0      	subs	r0, r0, r3
    5982:	4152      	adcs	r2, r2
    5984:	0b43      	lsrs	r3, r0, #13
    5986:	428b      	cmp	r3, r1
    5988:	d301      	bcc.n	598e <__aeabi_uidiv+0x5e>
    598a:	034b      	lsls	r3, r1, #13
    598c:	1ac0      	subs	r0, r0, r3
    598e:	4152      	adcs	r2, r2
    5990:	0b03      	lsrs	r3, r0, #12
    5992:	428b      	cmp	r3, r1
    5994:	d301      	bcc.n	599a <__aeabi_uidiv+0x6a>
    5996:	030b      	lsls	r3, r1, #12
    5998:	1ac0      	subs	r0, r0, r3
    599a:	4152      	adcs	r2, r2
    599c:	0ac3      	lsrs	r3, r0, #11
    599e:	428b      	cmp	r3, r1
    59a0:	d301      	bcc.n	59a6 <__aeabi_uidiv+0x76>
    59a2:	02cb      	lsls	r3, r1, #11
    59a4:	1ac0      	subs	r0, r0, r3
    59a6:	4152      	adcs	r2, r2
    59a8:	0a83      	lsrs	r3, r0, #10
    59aa:	428b      	cmp	r3, r1
    59ac:	d301      	bcc.n	59b2 <__aeabi_uidiv+0x82>
    59ae:	028b      	lsls	r3, r1, #10
    59b0:	1ac0      	subs	r0, r0, r3
    59b2:	4152      	adcs	r2, r2
    59b4:	0a43      	lsrs	r3, r0, #9
    59b6:	428b      	cmp	r3, r1
    59b8:	d301      	bcc.n	59be <__aeabi_uidiv+0x8e>
    59ba:	024b      	lsls	r3, r1, #9
    59bc:	1ac0      	subs	r0, r0, r3
    59be:	4152      	adcs	r2, r2
    59c0:	0a03      	lsrs	r3, r0, #8
    59c2:	428b      	cmp	r3, r1
    59c4:	d301      	bcc.n	59ca <__aeabi_uidiv+0x9a>
    59c6:	020b      	lsls	r3, r1, #8
    59c8:	1ac0      	subs	r0, r0, r3
    59ca:	4152      	adcs	r2, r2
    59cc:	d2cd      	bcs.n	596a <__aeabi_uidiv+0x3a>
    59ce:	09c3      	lsrs	r3, r0, #7
    59d0:	428b      	cmp	r3, r1
    59d2:	d301      	bcc.n	59d8 <__aeabi_uidiv+0xa8>
    59d4:	01cb      	lsls	r3, r1, #7
    59d6:	1ac0      	subs	r0, r0, r3
    59d8:	4152      	adcs	r2, r2
    59da:	0983      	lsrs	r3, r0, #6
    59dc:	428b      	cmp	r3, r1
    59de:	d301      	bcc.n	59e4 <__aeabi_uidiv+0xb4>
    59e0:	018b      	lsls	r3, r1, #6
    59e2:	1ac0      	subs	r0, r0, r3
    59e4:	4152      	adcs	r2, r2
    59e6:	0943      	lsrs	r3, r0, #5
    59e8:	428b      	cmp	r3, r1
    59ea:	d301      	bcc.n	59f0 <__aeabi_uidiv+0xc0>
    59ec:	014b      	lsls	r3, r1, #5
    59ee:	1ac0      	subs	r0, r0, r3
    59f0:	4152      	adcs	r2, r2
    59f2:	0903      	lsrs	r3, r0, #4
    59f4:	428b      	cmp	r3, r1
    59f6:	d301      	bcc.n	59fc <__aeabi_uidiv+0xcc>
    59f8:	010b      	lsls	r3, r1, #4
    59fa:	1ac0      	subs	r0, r0, r3
    59fc:	4152      	adcs	r2, r2
    59fe:	08c3      	lsrs	r3, r0, #3
    5a00:	428b      	cmp	r3, r1
    5a02:	d301      	bcc.n	5a08 <__aeabi_uidiv+0xd8>
    5a04:	00cb      	lsls	r3, r1, #3
    5a06:	1ac0      	subs	r0, r0, r3
    5a08:	4152      	adcs	r2, r2
    5a0a:	0883      	lsrs	r3, r0, #2
    5a0c:	428b      	cmp	r3, r1
    5a0e:	d301      	bcc.n	5a14 <__aeabi_uidiv+0xe4>
    5a10:	008b      	lsls	r3, r1, #2
    5a12:	1ac0      	subs	r0, r0, r3
    5a14:	4152      	adcs	r2, r2
    5a16:	0843      	lsrs	r3, r0, #1
    5a18:	428b      	cmp	r3, r1
    5a1a:	d301      	bcc.n	5a20 <__aeabi_uidiv+0xf0>
    5a1c:	004b      	lsls	r3, r1, #1
    5a1e:	1ac0      	subs	r0, r0, r3
    5a20:	4152      	adcs	r2, r2
    5a22:	1a41      	subs	r1, r0, r1
    5a24:	d200      	bcs.n	5a28 <__aeabi_uidiv+0xf8>
    5a26:	4601      	mov	r1, r0
    5a28:	4152      	adcs	r2, r2
    5a2a:	4610      	mov	r0, r2
    5a2c:	4770      	bx	lr
    5a2e:	e7ff      	b.n	5a30 <__aeabi_uidiv+0x100>
    5a30:	b501      	push	{r0, lr}
    5a32:	2000      	movs	r0, #0
    5a34:	f000 f806 	bl	5a44 <__aeabi_idiv0>
    5a38:	bd02      	pop	{r1, pc}
    5a3a:	46c0      	nop			; (mov r8, r8)

00005a3c <__aeabi_uidivmod>:
    5a3c:	2900      	cmp	r1, #0
    5a3e:	d0f7      	beq.n	5a30 <__aeabi_uidiv+0x100>
    5a40:	e776      	b.n	5930 <__aeabi_uidiv>
    5a42:	4770      	bx	lr

00005a44 <__aeabi_idiv0>:
    5a44:	4770      	bx	lr
    5a46:	46c0      	nop			; (mov r8, r8)

00005a48 <__clzsi2>:
    5a48:	211c      	movs	r1, #28
    5a4a:	2301      	movs	r3, #1
    5a4c:	041b      	lsls	r3, r3, #16
    5a4e:	4298      	cmp	r0, r3
    5a50:	d301      	bcc.n	5a56 <__clzsi2+0xe>
    5a52:	0c00      	lsrs	r0, r0, #16
    5a54:	3910      	subs	r1, #16
    5a56:	0a1b      	lsrs	r3, r3, #8
    5a58:	4298      	cmp	r0, r3
    5a5a:	d301      	bcc.n	5a60 <__clzsi2+0x18>
    5a5c:	0a00      	lsrs	r0, r0, #8
    5a5e:	3908      	subs	r1, #8
    5a60:	091b      	lsrs	r3, r3, #4
    5a62:	4298      	cmp	r0, r3
    5a64:	d301      	bcc.n	5a6a <__clzsi2+0x22>
    5a66:	0900      	lsrs	r0, r0, #4
    5a68:	3904      	subs	r1, #4
    5a6a:	a202      	add	r2, pc, #8	; (adr r2, 5a74 <__clzsi2+0x2c>)
    5a6c:	5c10      	ldrb	r0, [r2, r0]
    5a6e:	1840      	adds	r0, r0, r1
    5a70:	4770      	bx	lr
    5a72:	46c0      	nop			; (mov r8, r8)
    5a74:	02020304 	.word	0x02020304
    5a78:	01010101 	.word	0x01010101
	...

00005a84 <__errno>:
    5a84:	4b01      	ldr	r3, [pc, #4]	; (5a8c <__errno+0x8>)
    5a86:	6818      	ldr	r0, [r3, #0]
    5a88:	4770      	bx	lr
    5a8a:	46c0      	nop			; (mov r8, r8)
    5a8c:	20000458 	.word	0x20000458

00005a90 <__libc_init_array>:
    5a90:	b570      	push	{r4, r5, r6, lr}
    5a92:	4e0d      	ldr	r6, [pc, #52]	; (5ac8 <__libc_init_array+0x38>)
    5a94:	4d0d      	ldr	r5, [pc, #52]	; (5acc <__libc_init_array+0x3c>)
    5a96:	2400      	movs	r4, #0
    5a98:	1bad      	subs	r5, r5, r6
    5a9a:	10ad      	asrs	r5, r5, #2
    5a9c:	d005      	beq.n	5aaa <__libc_init_array+0x1a>
    5a9e:	00a3      	lsls	r3, r4, #2
    5aa0:	58f3      	ldr	r3, [r6, r3]
    5aa2:	3401      	adds	r4, #1
    5aa4:	4798      	blx	r3
    5aa6:	42a5      	cmp	r5, r4
    5aa8:	d1f9      	bne.n	5a9e <__libc_init_array+0xe>
    5aaa:	f000 f9f9 	bl	5ea0 <_init>
    5aae:	4e08      	ldr	r6, [pc, #32]	; (5ad0 <__libc_init_array+0x40>)
    5ab0:	4d08      	ldr	r5, [pc, #32]	; (5ad4 <__libc_init_array+0x44>)
    5ab2:	2400      	movs	r4, #0
    5ab4:	1bad      	subs	r5, r5, r6
    5ab6:	10ad      	asrs	r5, r5, #2
    5ab8:	d005      	beq.n	5ac6 <__libc_init_array+0x36>
    5aba:	00a3      	lsls	r3, r4, #2
    5abc:	58f3      	ldr	r3, [r6, r3]
    5abe:	3401      	adds	r4, #1
    5ac0:	4798      	blx	r3
    5ac2:	42a5      	cmp	r5, r4
    5ac4:	d1f9      	bne.n	5aba <__libc_init_array+0x2a>
    5ac6:	bd70      	pop	{r4, r5, r6, pc}
    5ac8:	00005eac 	.word	0x00005eac
    5acc:	00005eac 	.word	0x00005eac
    5ad0:	00005eac 	.word	0x00005eac
    5ad4:	00005eb4 	.word	0x00005eb4

00005ad8 <memset>:
    5ad8:	b570      	push	{r4, r5, r6, lr}
    5ada:	0783      	lsls	r3, r0, #30
    5adc:	d03f      	beq.n	5b5e <memset+0x86>
    5ade:	1e54      	subs	r4, r2, #1
    5ae0:	2a00      	cmp	r2, #0
    5ae2:	d03b      	beq.n	5b5c <memset+0x84>
    5ae4:	b2ce      	uxtb	r6, r1
    5ae6:	0003      	movs	r3, r0
    5ae8:	2503      	movs	r5, #3
    5aea:	e003      	b.n	5af4 <memset+0x1c>
    5aec:	1e62      	subs	r2, r4, #1
    5aee:	2c00      	cmp	r4, #0
    5af0:	d034      	beq.n	5b5c <memset+0x84>
    5af2:	0014      	movs	r4, r2
    5af4:	3301      	adds	r3, #1
    5af6:	1e5a      	subs	r2, r3, #1
    5af8:	7016      	strb	r6, [r2, #0]
    5afa:	422b      	tst	r3, r5
    5afc:	d1f6      	bne.n	5aec <memset+0x14>
    5afe:	2c03      	cmp	r4, #3
    5b00:	d924      	bls.n	5b4c <memset+0x74>
    5b02:	25ff      	movs	r5, #255	; 0xff
    5b04:	400d      	ands	r5, r1
    5b06:	022a      	lsls	r2, r5, #8
    5b08:	4315      	orrs	r5, r2
    5b0a:	042a      	lsls	r2, r5, #16
    5b0c:	4315      	orrs	r5, r2
    5b0e:	2c0f      	cmp	r4, #15
    5b10:	d911      	bls.n	5b36 <memset+0x5e>
    5b12:	0026      	movs	r6, r4
    5b14:	3e10      	subs	r6, #16
    5b16:	0936      	lsrs	r6, r6, #4
    5b18:	3601      	adds	r6, #1
    5b1a:	0136      	lsls	r6, r6, #4
    5b1c:	001a      	movs	r2, r3
    5b1e:	199b      	adds	r3, r3, r6
    5b20:	6015      	str	r5, [r2, #0]
    5b22:	6055      	str	r5, [r2, #4]
    5b24:	6095      	str	r5, [r2, #8]
    5b26:	60d5      	str	r5, [r2, #12]
    5b28:	3210      	adds	r2, #16
    5b2a:	4293      	cmp	r3, r2
    5b2c:	d1f8      	bne.n	5b20 <memset+0x48>
    5b2e:	220f      	movs	r2, #15
    5b30:	4014      	ands	r4, r2
    5b32:	2c03      	cmp	r4, #3
    5b34:	d90a      	bls.n	5b4c <memset+0x74>
    5b36:	1f26      	subs	r6, r4, #4
    5b38:	08b6      	lsrs	r6, r6, #2
    5b3a:	3601      	adds	r6, #1
    5b3c:	00b6      	lsls	r6, r6, #2
    5b3e:	001a      	movs	r2, r3
    5b40:	199b      	adds	r3, r3, r6
    5b42:	c220      	stmia	r2!, {r5}
    5b44:	4293      	cmp	r3, r2
    5b46:	d1fc      	bne.n	5b42 <memset+0x6a>
    5b48:	2203      	movs	r2, #3
    5b4a:	4014      	ands	r4, r2
    5b4c:	2c00      	cmp	r4, #0
    5b4e:	d005      	beq.n	5b5c <memset+0x84>
    5b50:	b2c9      	uxtb	r1, r1
    5b52:	191c      	adds	r4, r3, r4
    5b54:	7019      	strb	r1, [r3, #0]
    5b56:	3301      	adds	r3, #1
    5b58:	429c      	cmp	r4, r3
    5b5a:	d1fb      	bne.n	5b54 <memset+0x7c>
    5b5c:	bd70      	pop	{r4, r5, r6, pc}
    5b5e:	0014      	movs	r4, r2
    5b60:	0003      	movs	r3, r0
    5b62:	e7cc      	b.n	5afe <memset+0x26>

00005b64 <register_fini>:
    5b64:	4b03      	ldr	r3, [pc, #12]	; (5b74 <register_fini+0x10>)
    5b66:	b510      	push	{r4, lr}
    5b68:	2b00      	cmp	r3, #0
    5b6a:	d002      	beq.n	5b72 <register_fini+0xe>
    5b6c:	4802      	ldr	r0, [pc, #8]	; (5b78 <register_fini+0x14>)
    5b6e:	f000 f805 	bl	5b7c <atexit>
    5b72:	bd10      	pop	{r4, pc}
    5b74:	00000000 	.word	0x00000000
    5b78:	00005b8d 	.word	0x00005b8d

00005b7c <atexit>:
    5b7c:	b510      	push	{r4, lr}
    5b7e:	0001      	movs	r1, r0
    5b80:	2300      	movs	r3, #0
    5b82:	2200      	movs	r2, #0
    5b84:	2000      	movs	r0, #0
    5b86:	f000 f81b 	bl	5bc0 <__register_exitproc>
    5b8a:	bd10      	pop	{r4, pc}

00005b8c <__libc_fini_array>:
    5b8c:	b570      	push	{r4, r5, r6, lr}
    5b8e:	4b09      	ldr	r3, [pc, #36]	; (5bb4 <__libc_fini_array+0x28>)
    5b90:	4c09      	ldr	r4, [pc, #36]	; (5bb8 <__libc_fini_array+0x2c>)
    5b92:	1ae4      	subs	r4, r4, r3
    5b94:	10a4      	asrs	r4, r4, #2
    5b96:	d009      	beq.n	5bac <__libc_fini_array+0x20>
    5b98:	4a08      	ldr	r2, [pc, #32]	; (5bbc <__libc_fini_array+0x30>)
    5b9a:	18a5      	adds	r5, r4, r2
    5b9c:	00ad      	lsls	r5, r5, #2
    5b9e:	18ed      	adds	r5, r5, r3
    5ba0:	682b      	ldr	r3, [r5, #0]
    5ba2:	3c01      	subs	r4, #1
    5ba4:	4798      	blx	r3
    5ba6:	3d04      	subs	r5, #4
    5ba8:	2c00      	cmp	r4, #0
    5baa:	d1f9      	bne.n	5ba0 <__libc_fini_array+0x14>
    5bac:	f000 f982 	bl	5eb4 <_fini>
    5bb0:	bd70      	pop	{r4, r5, r6, pc}
    5bb2:	46c0      	nop			; (mov r8, r8)
    5bb4:	00005ec0 	.word	0x00005ec0
    5bb8:	00005ec4 	.word	0x00005ec4
    5bbc:	3fffffff 	.word	0x3fffffff

00005bc0 <__register_exitproc>:
    5bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5bc2:	4644      	mov	r4, r8
    5bc4:	465f      	mov	r7, fp
    5bc6:	4656      	mov	r6, sl
    5bc8:	464d      	mov	r5, r9
    5bca:	469b      	mov	fp, r3
    5bcc:	4b2f      	ldr	r3, [pc, #188]	; (5c8c <__register_exitproc+0xcc>)
    5bce:	b4f0      	push	{r4, r5, r6, r7}
    5bd0:	681c      	ldr	r4, [r3, #0]
    5bd2:	23a4      	movs	r3, #164	; 0xa4
    5bd4:	005b      	lsls	r3, r3, #1
    5bd6:	0005      	movs	r5, r0
    5bd8:	58e0      	ldr	r0, [r4, r3]
    5bda:	000e      	movs	r6, r1
    5bdc:	4690      	mov	r8, r2
    5bde:	2800      	cmp	r0, #0
    5be0:	d04b      	beq.n	5c7a <__register_exitproc+0xba>
    5be2:	6843      	ldr	r3, [r0, #4]
    5be4:	2b1f      	cmp	r3, #31
    5be6:	dc0d      	bgt.n	5c04 <__register_exitproc+0x44>
    5be8:	1c5c      	adds	r4, r3, #1
    5bea:	2d00      	cmp	r5, #0
    5bec:	d121      	bne.n	5c32 <__register_exitproc+0x72>
    5bee:	3302      	adds	r3, #2
    5bf0:	009b      	lsls	r3, r3, #2
    5bf2:	6044      	str	r4, [r0, #4]
    5bf4:	501e      	str	r6, [r3, r0]
    5bf6:	2000      	movs	r0, #0
    5bf8:	bc3c      	pop	{r2, r3, r4, r5}
    5bfa:	4690      	mov	r8, r2
    5bfc:	4699      	mov	r9, r3
    5bfe:	46a2      	mov	sl, r4
    5c00:	46ab      	mov	fp, r5
    5c02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5c04:	4b22      	ldr	r3, [pc, #136]	; (5c90 <__register_exitproc+0xd0>)
    5c06:	2b00      	cmp	r3, #0
    5c08:	d03c      	beq.n	5c84 <__register_exitproc+0xc4>
    5c0a:	20c8      	movs	r0, #200	; 0xc8
    5c0c:	0040      	lsls	r0, r0, #1
    5c0e:	e000      	b.n	5c12 <__register_exitproc+0x52>
    5c10:	bf00      	nop
    5c12:	2800      	cmp	r0, #0
    5c14:	d036      	beq.n	5c84 <__register_exitproc+0xc4>
    5c16:	22a4      	movs	r2, #164	; 0xa4
    5c18:	2300      	movs	r3, #0
    5c1a:	0052      	lsls	r2, r2, #1
    5c1c:	58a1      	ldr	r1, [r4, r2]
    5c1e:	6043      	str	r3, [r0, #4]
    5c20:	6001      	str	r1, [r0, #0]
    5c22:	50a0      	str	r0, [r4, r2]
    5c24:	3240      	adds	r2, #64	; 0x40
    5c26:	5083      	str	r3, [r0, r2]
    5c28:	3204      	adds	r2, #4
    5c2a:	5083      	str	r3, [r0, r2]
    5c2c:	2401      	movs	r4, #1
    5c2e:	2d00      	cmp	r5, #0
    5c30:	d0dd      	beq.n	5bee <__register_exitproc+0x2e>
    5c32:	009a      	lsls	r2, r3, #2
    5c34:	4691      	mov	r9, r2
    5c36:	4481      	add	r9, r0
    5c38:	4642      	mov	r2, r8
    5c3a:	2188      	movs	r1, #136	; 0x88
    5c3c:	464f      	mov	r7, r9
    5c3e:	507a      	str	r2, [r7, r1]
    5c40:	22c4      	movs	r2, #196	; 0xc4
    5c42:	0052      	lsls	r2, r2, #1
    5c44:	4690      	mov	r8, r2
    5c46:	4480      	add	r8, r0
    5c48:	4642      	mov	r2, r8
    5c4a:	3987      	subs	r1, #135	; 0x87
    5c4c:	4099      	lsls	r1, r3
    5c4e:	6812      	ldr	r2, [r2, #0]
    5c50:	468a      	mov	sl, r1
    5c52:	430a      	orrs	r2, r1
    5c54:	4694      	mov	ip, r2
    5c56:	4642      	mov	r2, r8
    5c58:	4661      	mov	r1, ip
    5c5a:	6011      	str	r1, [r2, #0]
    5c5c:	2284      	movs	r2, #132	; 0x84
    5c5e:	4649      	mov	r1, r9
    5c60:	465f      	mov	r7, fp
    5c62:	0052      	lsls	r2, r2, #1
    5c64:	508f      	str	r7, [r1, r2]
    5c66:	2d02      	cmp	r5, #2
    5c68:	d1c1      	bne.n	5bee <__register_exitproc+0x2e>
    5c6a:	0002      	movs	r2, r0
    5c6c:	4655      	mov	r5, sl
    5c6e:	328d      	adds	r2, #141	; 0x8d
    5c70:	32ff      	adds	r2, #255	; 0xff
    5c72:	6811      	ldr	r1, [r2, #0]
    5c74:	430d      	orrs	r5, r1
    5c76:	6015      	str	r5, [r2, #0]
    5c78:	e7b9      	b.n	5bee <__register_exitproc+0x2e>
    5c7a:	0020      	movs	r0, r4
    5c7c:	304d      	adds	r0, #77	; 0x4d
    5c7e:	30ff      	adds	r0, #255	; 0xff
    5c80:	50e0      	str	r0, [r4, r3]
    5c82:	e7ae      	b.n	5be2 <__register_exitproc+0x22>
    5c84:	2001      	movs	r0, #1
    5c86:	4240      	negs	r0, r0
    5c88:	e7b6      	b.n	5bf8 <__register_exitproc+0x38>
    5c8a:	46c0      	nop			; (mov r8, r8)
    5c8c:	00005e9c 	.word	0x00005e9c
    5c90:	00000000 	.word	0x00000000

00005c94 <spi2MOSI>:
    5c94:	0c000002 00000200                                .....

00005c99 <spi2SCK>:
    5c99:	0e000002 00000200                                .....

00005c9e <spi2MISO>:
    5c9e:	0d000002 8d200000                                ......

00005ca4 <lookupTable.12491>:
    5ca4:	ffff8d20 ffffada1 ffffce64 ffffef6c      .......d...l...
    5cb4:	000010b7 0000324a 00005425 00007649     ....J2..%T..Iv..
    5cc4:	000098b7 0000bb72 0000de79 000101d0     ....r...y.......
    5cd4:	00012576 0001496f 00016dbc 0001925e     v%..oI...m..^...
    5ce4:	0001b758 0001dcaa 00020258 00022862     X.......X...b(..
    5cf4:	00024ecc 00027596 00029cc4 0002c457     .N...u......W...
    5d04:	0002ec52 000314b7 00033d89 000366ca     R........=...f..
    5d14:	0003907d 0003baa4 0003e544 0004105e     }.......D...^...
    5d24:	00043bf6 0004680e 000494ac 0004c1d1     .;...h..........
    5d34:	0004ef81 00051dc1 00054c95 00057c00     .........L...|..
    5d44:	0005ac07 0005dcae 00060dfb 00063ff2     .............?..
    5d54:	00067298 0006a5f4 0006da09 00070ee0     .r..............
    5d64:	0007447d 00077ae8 0007b228 0007ea44     }D...z..(...D...
    5d74:	00082344 00085d30 00089810 0008d3ef     D#..0]..........
    5d84:	000910d6 00094ecf 00098de5 0009ce23     .....N......#...
    5d94:	000a0f98 000a524f 000a9657 000adbbf     ....OR..W.......
    5da4:	000b2298 000b6af3 000bb4e2 000c007b     ."...j......{...
    5db4:	000c4dd4 000c9d03 000cee23 000d4150     .M......#...PA..
    5dc4:	000d96a9 000dee4e 000e4865 000ea516     ....N...eH......
    5dd4:	000f048e                                ....

00005dd8 <senseBatPin>:
    5dd8:	06000000 01000106                                .....

00005ddd <senseAPin>:
    5ddd:	03010001 0100010b                                .....

00005de2 <senseBPin>:
    5de2:	02010001 0000000a                                .....

00005de7 <senseCPin>:
    5de7:	03000000 00000001                                .....

00005dec <senseDPin>:
    5dec:	02000000 00000000                                .....

00005df1 <analogAccelPin>:
    5df1:	07000000 00000207                                .....

00005df6 <spi2MOSI>:
    5df6:	0c000002 00000200                                .....

00005dfb <spi2SCK>:
    5dfb:	0e000002 776f7000 00000000 00000000              .....pow.....

00005e08 <TWO52>:
    5e08:	00000000 43300000 00000000 c3300000     ......0C......0.
    5e18:	000043dc 000042aa 000043b0 000042a0     .C...B...C...B..
    5e28:	000043b0 000043ba 000043b0 000042a0     .C...C...C...B..
    5e38:	000042aa 000042aa 000043ba 000042a0     .B...B...C...B..
    5e48:	00004296 00004296 00004296 0000460c     .B...B...B...F..
    5e58:	00004c24 00004ae4 00004ae4 00004ae2     $L...J...J...J..
    5e68:	00004bfc 00004bfc 00004bee 00004ae2     .K...K...K...J..
    5e78:	00004bfc 00004bee 00004bfc 00004ae2     .K...K...K...J..
    5e88:	00004c04 00004c04 00004c04 00004e04     .L...L...L...N..
    5e98:	00000043                                C...

00005e9c <_global_impure_ptr>:
    5e9c:	20000030                                0.. 

00005ea0 <_init>:
    5ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5ea2:	46c0      	nop			; (mov r8, r8)
    5ea4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    5ea6:	bc08      	pop	{r3}
    5ea8:	469e      	mov	lr, r3
    5eaa:	4770      	bx	lr

00005eac <__init_array_start>:
    5eac:	00005b65 	.word	0x00005b65

00005eb0 <__frame_dummy_init_array_entry>:
    5eb0:	000000dd                                ....

00005eb4 <_fini>:
    5eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5eb6:	46c0      	nop			; (mov r8, r8)
    5eb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    5eba:	bc08      	pop	{r3}
    5ebc:	469e      	mov	lr, r3
    5ebe:	4770      	bx	lr

00005ec0 <__fini_array_start>:
    5ec0:	000000b5 	.word	0x000000b5
