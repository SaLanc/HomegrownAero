
DasAltimeter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002a1c  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000438  20000000  00002a1c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000001b0  20000440  00002e60  00020440  2**4
                  ALLOC
  3 .stack        00002000  200005f0  00003010  00020440  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020438  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020460  2**0
                  CONTENTS, READONLY
  6 .debug_info   000191d7  00000000  00000000  000204b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002206  00000000  00000000  00039690  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00001a07  00000000  00000000  0003b896  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000368  00000000  00000000  0003d29d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000bc8  00000000  00000000  0003d605  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000156be  00000000  00000000  0003e1cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00008748  00000000  00000000  0005388b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00072462  00000000  00000000  0005bfd3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000a20  00000000  00000000  000ce438  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
 *         retrieved from cpu registers.
 */
void SystemCoreClockUpdate(void)
{
	// Not implemented
	SystemCoreClock = __SYSTEM_CLOCK;
       0:	200025f0 	.word	0x200025f0
       4:	00000119 	.word	0x00000119
	return;
}
       8:	00000115 	.word	0x00000115
       c:	00000115 	.word	0x00000115
	...
      2c:	00000115 	.word	0x00000115
	...
      38:	00000115 	.word	0x00000115
      3c:	00000115 	.word	0x00000115
      40:	00000115 	.word	0x00000115
      44:	00000115 	.word	0x00000115
      48:	00000115 	.word	0x00000115
      4c:	00000fa9 	.word	0x00000fa9
      50:	00000115 	.word	0x00000115
      54:	00000115 	.word	0x00000115
      58:	00000115 	.word	0x00000115
      5c:	00000115 	.word	0x00000115
      60:	00000115 	.word	0x00000115
      64:	00000115 	.word	0x00000115
      68:	00000115 	.word	0x00000115
      6c:	00000115 	.word	0x00000115
      70:	00000115 	.word	0x00000115
      74:	00000115 	.word	0x00000115
      78:	00000115 	.word	0x00000115
      7c:	00000115 	.word	0x00000115
      80:	00000115 	.word	0x00000115
      84:	00000115 	.word	0x00000115
      88:	00000115 	.word	0x00000115
      8c:	00001049 	.word	0x00001049
      90:	000010b1 	.word	0x000010b1
	...
      9c:	00000115 	.word	0x00000115
      a0:	00000115 	.word	0x00000115
      a4:	00000115 	.word	0x00000115
      a8:	00000115 	.word	0x00000115
      ac:	00000115 	.word	0x00000115
      b0:	00000000 	.word	0x00000000

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000440 	.word	0x20000440
      d4:	00000000 	.word	0x00000000
      d8:	00002a1c 	.word	0x00002a1c

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000444 	.word	0x20000444
     108:	00002a1c 	.word	0x00002a1c
     10c:	00002a1c 	.word	0x00002a1c
     110:	00000000 	.word	0x00000000

00000114 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     114:	e7fe      	b.n	114 <Dummy_Handler>
	...

00000118 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
     118:	4821      	ldr	r0, [pc, #132]	; (1a0 <Reset_Handler+0x88>)
     11a:	4922      	ldr	r1, [pc, #136]	; (1a4 <Reset_Handler+0x8c>)
     11c:	b570      	push	{r4, r5, r6, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
     11e:	4288      	cmp	r0, r1
     120:	d002      	beq.n	128 <Reset_Handler+0x10>
     122:	2300      	movs	r3, #0
                for (; pDest < &_erelocate;) {
     124:	4c20      	ldr	r4, [pc, #128]	; (1a8 <Reset_Handler+0x90>)
     126:	e003      	b.n	130 <Reset_Handler+0x18>
     128:	4b20      	ldr	r3, [pc, #128]	; (1ac <Reset_Handler+0x94>)
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     12a:	4a21      	ldr	r2, [pc, #132]	; (1b0 <Reset_Handler+0x98>)
                *pDest++ = 0;
     12c:	2100      	movs	r1, #0
     12e:	e006      	b.n	13e <Reset_Handler+0x26>
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
     130:	18ca      	adds	r2, r1, r3
     132:	42a2      	cmp	r2, r4
     134:	d2f8      	bcs.n	128 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
     136:	58c5      	ldr	r5, [r0, r3]
     138:	3304      	adds	r3, #4
     13a:	6015      	str	r5, [r2, #0]
     13c:	e7f8      	b.n	130 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     13e:	4293      	cmp	r3, r2
     140:	d201      	bcs.n	146 <Reset_Handler+0x2e>
                *pDest++ = 0;
     142:	c302      	stmia	r3!, {r1}
     144:	e7fb      	b.n	13e <Reset_Handler+0x26>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     146:	21ff      	movs	r1, #255	; 0xff

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     148:	2402      	movs	r4, #2
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     14a:	2503      	movs	r5, #3
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     14c:	4b19      	ldr	r3, [pc, #100]	; (1b4 <Reset_Handler+0x9c>)
     14e:	4a1a      	ldr	r2, [pc, #104]	; (1b8 <Reset_Handler+0xa0>)
     150:	438b      	bics	r3, r1

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     152:	260c      	movs	r6, #12
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     154:	6093      	str	r3, [r2, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     156:	2208      	movs	r2, #8
        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     158:	4b18      	ldr	r3, [pc, #96]	; (1bc <Reset_Handler+0xa4>)
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     15a:	4919      	ldr	r1, [pc, #100]	; (1c0 <Reset_Handler+0xa8>)
        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     15c:	625c      	str	r4, [r3, #36]	; 0x24
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     15e:	78cb      	ldrb	r3, [r1, #3]
     160:	43ab      	bics	r3, r5
     162:	4323      	orrs	r3, r4
     164:	70cb      	strb	r3, [r1, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     166:	78cb      	ldrb	r3, [r1, #3]
     168:	43b3      	bics	r3, r6
     16a:	4313      	orrs	r3, r2
     16c:	70cb      	strb	r3, [r1, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
     16e:	2130      	movs	r1, #48	; 0x30
     170:	4b14      	ldr	r3, [pc, #80]	; (1c4 <Reset_Handler+0xac>)
     172:	7b98      	ldrb	r0, [r3, #14]
     174:	4388      	bics	r0, r1
     176:	3910      	subs	r1, #16
     178:	4308      	orrs	r0, r1
     17a:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     17c:	7b99      	ldrb	r1, [r3, #14]
     17e:	43b1      	bics	r1, r6
     180:	4311      	orrs	r1, r2
     182:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
     184:	2180      	movs	r1, #128	; 0x80
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
        DMAC->QOSCTRL.bit.FQOS = 2;
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     186:	7b9a      	ldrb	r2, [r3, #14]
     188:	43aa      	bics	r2, r5
     18a:	4322      	orrs	r2, r4
     18c:	739a      	strb	r2, [r3, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
     18e:	4a0e      	ldr	r2, [pc, #56]	; (1c8 <Reset_Handler+0xb0>)
     190:	6853      	ldr	r3, [r2, #4]
     192:	430b      	orrs	r3, r1
     194:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
     196:	4b0d      	ldr	r3, [pc, #52]	; (1cc <Reset_Handler+0xb4>)
     198:	4798      	blx	r3

        /* Branch to main function */
        main();
     19a:	4b0d      	ldr	r3, [pc, #52]	; (1d0 <Reset_Handler+0xb8>)
     19c:	4798      	blx	r3
     19e:	e7fe      	b.n	19e <Reset_Handler+0x86>
     1a0:	00002a1c 	.word	0x00002a1c
     1a4:	20000000 	.word	0x20000000
     1a8:	20000438 	.word	0x20000438
     1ac:	20000440 	.word	0x20000440
     1b0:	200005f0 	.word	0x200005f0
     1b4:	00000000 	.word	0x00000000
     1b8:	e000ed00 	.word	0xe000ed00
     1bc:	410070fc 	.word	0x410070fc
     1c0:	41005000 	.word	0x41005000
     1c4:	41004800 	.word	0x41004800
     1c8:	41004000 	.word	0x41004000
     1cc:	00002641 	.word	0x00002641
     1d0:	00000a71 	.word	0x00000a71

000001d4 <SystemInit>:
     1d4:	4a01      	ldr	r2, [pc, #4]	; (1dc <SystemInit+0x8>)
     1d6:	4b02      	ldr	r3, [pc, #8]	; (1e0 <SystemInit+0xc>)
     1d8:	601a      	str	r2, [r3, #0]
     1da:	4770      	bx	lr
     1dc:	000f4240 	.word	0x000f4240
     1e0:	20000000 	.word	0x20000000

000001e4 <AT25SFErace4KBlock>:
    pinHigh(cs_mem);

    delay_ms(300);
}

void AT25SFErace4KBlock(uint8_t blockToErace) {
     1e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     1e6:	2780      	movs	r7, #128	; 0x80
     1e8:	4e12      	ldr	r6, [pc, #72]	; (234 <AT25SFErace4KBlock+0x50>)
     1ea:	02ff      	lsls	r7, r7, #11

    uint32_t address = 0x001000*blockToErace;
     1ec:	0303      	lsls	r3, r0, #12

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
     1ee:	4d12      	ldr	r5, [pc, #72]	; (238 <AT25SFErace4KBlock+0x54>)
    delay_ms(300);
}

void AT25SFErace4KBlock(uint8_t blockToErace) {

    uint32_t address = 0x001000*blockToErace;
     1f0:	9301      	str	r3, [sp, #4]

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
     1f2:	2106      	movs	r1, #6
     1f4:	6177      	str	r7, [r6, #20]
     1f6:	2001      	movs	r0, #1
     1f8:	47a8      	blx	r5
     1fa:	4c10      	ldr	r4, [pc, #64]	; (23c <AT25SFErace4KBlock+0x58>)
    pinHigh(cs_mem);

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_04K_ERASE);
     1fc:	2120      	movs	r1, #32
void AT25SFErace4KBlock(uint8_t blockToErace) {

    uint32_t address = 0x001000*blockToErace;

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
     1fe:	7020      	strb	r0, [r4, #0]
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     200:	61b7      	str	r7, [r6, #24]
    pinHigh(cs_mem);

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_04K_ERASE);
     202:	2001      	movs	r0, #1
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     204:	6177      	str	r7, [r6, #20]
     206:	47a8      	blx	r5
    dummy_rx = spiDataTransfer(SPI1,((address & 0xFF0000) >> 16));
     208:	9b01      	ldr	r3, [sp, #4]
    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
    pinHigh(cs_mem);

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_04K_ERASE);
     20a:	7020      	strb	r0, [r4, #0]
    dummy_rx = spiDataTransfer(SPI1,((address & 0xFF0000) >> 16));
     20c:	0c19      	lsrs	r1, r3, #16
     20e:	2001      	movs	r0, #1
     210:	47a8      	blx	r5
    dummy_rx = spiDataTransfer(SPI1,((address & 0x00FF00) >>  8));
     212:	9b01      	ldr	r3, [sp, #4]
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
    pinHigh(cs_mem);

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_04K_ERASE);
    dummy_rx = spiDataTransfer(SPI1,((address & 0xFF0000) >> 16));
     214:	7020      	strb	r0, [r4, #0]
    dummy_rx = spiDataTransfer(SPI1,((address & 0x00FF00) >>  8));
     216:	0a18      	lsrs	r0, r3, #8
     218:	b2c1      	uxtb	r1, r0
     21a:	2001      	movs	r0, #1
     21c:	47a8      	blx	r5
    dummy_rx = spiDataTransfer(SPI1,((address & 0x0000FF) >>  0));
     21e:	2100      	movs	r1, #0
    pinHigh(cs_mem);

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_04K_ERASE);
    dummy_rx = spiDataTransfer(SPI1,((address & 0xFF0000) >> 16));
    dummy_rx = spiDataTransfer(SPI1,((address & 0x00FF00) >>  8));
     220:	7020      	strb	r0, [r4, #0]
    dummy_rx = spiDataTransfer(SPI1,((address & 0x0000FF) >>  0));
     222:	2001      	movs	r0, #1
     224:	47a8      	blx	r5
    pinHigh(cs_mem);

    delay_ms(70);
     226:	4b06      	ldr	r3, [pc, #24]	; (240 <AT25SFErace4KBlock+0x5c>)

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_04K_ERASE);
    dummy_rx = spiDataTransfer(SPI1,((address & 0xFF0000) >> 16));
    dummy_rx = spiDataTransfer(SPI1,((address & 0x00FF00) >>  8));
    dummy_rx = spiDataTransfer(SPI1,((address & 0x0000FF) >>  0));
     228:	7020      	strb	r0, [r4, #0]
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     22a:	61b7      	str	r7, [r6, #24]
    pinHigh(cs_mem);

    delay_ms(70);
     22c:	2046      	movs	r0, #70	; 0x46
     22e:	4798      	blx	r3

}
     230:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
     232:	46c0      	nop			; (mov r8, r8)
     234:	41004400 	.word	0x41004400
     238:	0000177d 	.word	0x0000177d
     23c:	20000460 	.word	0x20000460
     240:	00000f79 	.word	0x00000f79

00000244 <AT25SEWritePage>:
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     244:	2380      	movs	r3, #128	; 0x80


u8_t AT25SEWritePage(u32_t startingAddress, u8_t *data) {
     246:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     248:	4e1b      	ldr	r6, [pc, #108]	; (2b8 <AT25SEWritePage+0x74>)
     24a:	02db      	lsls	r3, r3, #11
     24c:	0007      	movs	r7, r0

    u8_t bytesSent = 0;
	
    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
     24e:	4d1b      	ldr	r5, [pc, #108]	; (2bc <AT25SEWritePage+0x78>)
    delay_ms(70);

}


u8_t AT25SEWritePage(u32_t startingAddress, u8_t *data) {
     250:	9101      	str	r1, [sp, #4]

    u8_t bytesSent = 0;
	
    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
     252:	2001      	movs	r0, #1
     254:	2106      	movs	r1, #6
     256:	6173      	str	r3, [r6, #20]
     258:	47a8      	blx	r5
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     25a:	2380      	movs	r3, #128	; 0x80
     25c:	4c18      	ldr	r4, [pc, #96]	; (2c0 <AT25SEWritePage+0x7c>)
     25e:	02db      	lsls	r3, r3, #11
     260:	7020      	strb	r0, [r4, #0]
     262:	61b3      	str	r3, [r6, #24]
    pinHigh(cs_mem);
	
	delay_ms(3);
     264:	2003      	movs	r0, #3
     266:	4b17      	ldr	r3, [pc, #92]	; (2c4 <AT25SEWritePage+0x80>)
     268:	4798      	blx	r3
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     26a:	2380      	movs	r3, #128	; 0x80
     26c:	02db      	lsls	r3, r3, #11
     26e:	6173      	str	r3, [r6, #20]

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_PROGRAM);
     270:	2102      	movs	r1, #2
     272:	2001      	movs	r0, #1
     274:	47a8      	blx	r5
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     276:	0c39      	lsrs	r1, r7, #16
    pinHigh(cs_mem);
	
	delay_ms(3);

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_PROGRAM);
     278:	7020      	strb	r0, [r4, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     27a:	b2c9      	uxtb	r1, r1
     27c:	2001      	movs	r0, #1
     27e:	47a8      	blx	r5
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     280:	0a39      	lsrs	r1, r7, #8
	
	delay_ms(3);

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_PROGRAM);
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     282:	7020      	strb	r0, [r4, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     284:	b2c9      	uxtb	r1, r1
     286:	2001      	movs	r0, #1
     288:	47a8      	blx	r5
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
     28a:	b2f9      	uxtb	r1, r7
	delay_ms(3);

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_PROGRAM);
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     28c:	7020      	strb	r0, [r4, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
     28e:	2001      	movs	r0, #1
     290:	47a8      	blx	r5
     292:	9f01      	ldr	r7, [sp, #4]
     294:	7020      	strb	r0, [r4, #0]
     296:	003b      	movs	r3, r7
     298:	33ff      	adds	r3, #255	; 0xff
     29a:	9301      	str	r3, [sp, #4]


    for (u8_t pos = 0; pos < 255; ++pos) {
        ++bytesSent;
        dummy_rx = spiDataTransfer(SPI1,data[pos]);
     29c:	7839      	ldrb	r1, [r7, #0]
     29e:	2001      	movs	r0, #1
     2a0:	47a8      	blx	r5
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));


    for (u8_t pos = 0; pos < 255; ++pos) {
     2a2:	9b01      	ldr	r3, [sp, #4]
     2a4:	3701      	adds	r7, #1
        ++bytesSent;
        dummy_rx = spiDataTransfer(SPI1,data[pos]);
     2a6:	7020      	strb	r0, [r4, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));


    for (u8_t pos = 0; pos < 255; ++pos) {
     2a8:	429f      	cmp	r7, r3
     2aa:	d1f7      	bne.n	29c <AT25SEWritePage+0x58>
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     2ac:	2380      	movs	r3, #128	; 0x80
     2ae:	02db      	lsls	r3, r3, #11
     2b0:	61b3      	str	r3, [r6, #24]
    }
    pinHigh(cs_mem);


    return bytesSent;
}
     2b2:	20ff      	movs	r0, #255	; 0xff
     2b4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
     2b6:	46c0      	nop			; (mov r8, r8)
     2b8:	41004400 	.word	0x41004400
     2bc:	0000177d 	.word	0x0000177d
     2c0:	20000460 	.word	0x20000460
     2c4:	00000f79 	.word	0x00000f79

000002c8 <AT25SEreadPage>:
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     2c8:	2380      	movs	r3, #128	; 0x80
    }
    pinHigh(cs_mem);

}

void AT25SEreadPage(u32_t startingAddress, u8_t *data) {
     2ca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     2cc:	4f16      	ldr	r7, [pc, #88]	; (328 <AT25SEreadPage+0x60>)
     2ce:	02db      	lsls	r3, r3, #11
     2d0:	0006      	movs	r6, r0


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
     2d2:	4c16      	ldr	r4, [pc, #88]	; (32c <AT25SEreadPage+0x64>)
    }
    pinHigh(cs_mem);

}

void AT25SEreadPage(u32_t startingAddress, u8_t *data) {
     2d4:	9101      	str	r1, [sp, #4]


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
     2d6:	2001      	movs	r0, #1
     2d8:	617b      	str	r3, [r7, #20]
     2da:	210b      	movs	r1, #11
     2dc:	47a0      	blx	r4
     2de:	4d14      	ldr	r5, [pc, #80]	; (330 <AT25SEreadPage+0x68>)
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     2e0:	0c31      	lsrs	r1, r6, #16

void AT25SEreadPage(u32_t startingAddress, u8_t *data) {


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
     2e2:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     2e4:	b2c9      	uxtb	r1, r1
     2e6:	2001      	movs	r0, #1
     2e8:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     2ea:	0a31      	lsrs	r1, r6, #8
void AT25SEreadPage(u32_t startingAddress, u8_t *data) {


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     2ec:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     2ee:	b2c9      	uxtb	r1, r1
     2f0:	2001      	movs	r0, #1
     2f2:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
     2f4:	b2f1      	uxtb	r1, r6


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     2f6:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
     2f8:	2001      	movs	r0, #1
     2fa:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1, 0xFF);
     2fc:	21ff      	movs	r1, #255	; 0xff

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
     2fe:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1, 0xFF);
     300:	2001      	movs	r0, #1
     302:	47a0      	blx	r4
     304:	9e01      	ldr	r6, [sp, #4]
     306:	7028      	strb	r0, [r5, #0]
     308:	0033      	movs	r3, r6
     30a:	33ff      	adds	r3, #255	; 0xff
     30c:	9301      	str	r3, [sp, #4]


    for (u8_t pos = 0; pos < 255; ++pos) {
        data[pos] = spiDataTransfer(SPI1,dummy_rx);
     30e:	7829      	ldrb	r1, [r5, #0]
     310:	2001      	movs	r0, #1
     312:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
    dummy_rx = spiDataTransfer(SPI1, 0xFF);


    for (u8_t pos = 0; pos < 255; ++pos) {
     314:	9b01      	ldr	r3, [sp, #4]
        data[pos] = spiDataTransfer(SPI1,dummy_rx);
     316:	7030      	strb	r0, [r6, #0]
     318:	3601      	adds	r6, #1
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
    dummy_rx = spiDataTransfer(SPI1, 0xFF);


    for (u8_t pos = 0; pos < 255; ++pos) {
     31a:	429e      	cmp	r6, r3
     31c:	d1f7      	bne.n	30e <AT25SEreadPage+0x46>
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     31e:	2380      	movs	r3, #128	; 0x80
     320:	02db      	lsls	r3, r3, #11
     322:	61bb      	str	r3, [r7, #24]
        data[pos] = spiDataTransfer(SPI1,dummy_rx);
    }
    pinHigh(cs_mem);

     324:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
     326:	46c0      	nop			; (mov r8, r8)
     328:	41004400 	.word	0x41004400
     32c:	0000177d 	.word	0x0000177d
     330:	20000460 	.word	0x20000460

00000334 <readMS5803AdcResults>:
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     334:	2280      	movs	r2, #128	; 0x80
     336:	4b28      	ldr	r3, [pc, #160]	; (3d8 <readMS5803AdcResults+0xa4>)
     338:	0212      	lsls	r2, r2, #8
#include <MS5803.h>
#include <boardDefines.h>
#include <math.h>


u32_t readMS5803AdcResults() {
     33a:	b5f0      	push	{r4, r5, r6, r7, lr}
     33c:	615a      	str	r2, [r3, #20]
    pinLow(cs_baro);
//    dummy_rx = spiDataTransfer(SPI1, cmdAdcRead_);
//    u8_t _byte1 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte2 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte3 = spiDataTransfer(SPI1,dummy_tx);
    byteOut(spi2SCK,spi2MOSI, cmdAdcRead_);
     33e:	2300      	movs	r3, #0
     340:	4d26      	ldr	r5, [pc, #152]	; (3dc <readMS5803AdcResults+0xa8>)
#include <MS5803.h>
#include <boardDefines.h>
#include <math.h>


u32_t readMS5803AdcResults() {
     342:	b087      	sub	sp, #28
    pinLow(cs_baro);
//    dummy_rx = spiDataTransfer(SPI1, cmdAdcRead_);
//    u8_t _byte1 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte2 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte3 = spiDataTransfer(SPI1,dummy_tx);
    byteOut(spi2SCK,spi2MOSI, cmdAdcRead_);
     344:	9300      	str	r3, [sp, #0]
     346:	786b      	ldrb	r3, [r5, #1]
     348:	7828      	ldrb	r0, [r5, #0]
     34a:	78aa      	ldrb	r2, [r5, #2]
     34c:	021b      	lsls	r3, r3, #8
     34e:	4303      	orrs	r3, r0
     350:	0412      	lsls	r2, r2, #16
     352:	0019      	movs	r1, r3
     354:	0013      	movs	r3, r2
     356:	430b      	orrs	r3, r1
     358:	79a9      	ldrb	r1, [r5, #6]
     35a:	796f      	ldrb	r7, [r5, #5]
     35c:	79ec      	ldrb	r4, [r5, #7]
     35e:	0209      	lsls	r1, r1, #8
     360:	4339      	orrs	r1, r7
     362:	0424      	lsls	r4, r4, #16
     364:	0008      	movs	r0, r1
     366:	0021      	movs	r1, r4
     368:	7a2c      	ldrb	r4, [r5, #8]
     36a:	78ea      	ldrb	r2, [r5, #3]
     36c:	7a6f      	ldrb	r7, [r5, #9]
     36e:	4301      	orrs	r1, r0
     370:	0624      	lsls	r4, r4, #24
     372:	430c      	orrs	r4, r1
     374:	0612      	lsls	r2, r2, #24
     376:	431a      	orrs	r2, r3
     378:	0020      	movs	r0, r4
     37a:	792b      	ldrb	r3, [r5, #4]
     37c:	0039      	movs	r1, r7
     37e:	4e18      	ldr	r6, [pc, #96]	; (3e0 <readMS5803AdcResults+0xac>)
     380:	47b0      	blx	r6
    u8_t _byte1 = byteIn(spi2SCK,spi2MISO);
     382:	7aeb      	ldrb	r3, [r5, #11]
     384:	7aa9      	ldrb	r1, [r5, #10]
     386:	021b      	lsls	r3, r3, #8
     388:	430b      	orrs	r3, r1
     38a:	001a      	movs	r2, r3
     38c:	7b2b      	ldrb	r3, [r5, #12]
     38e:	4e15      	ldr	r6, [pc, #84]	; (3e4 <readMS5803AdcResults+0xb0>)
     390:	041b      	lsls	r3, r3, #16
     392:	4313      	orrs	r3, r2
     394:	7b6a      	ldrb	r2, [r5, #13]
     396:	7bad      	ldrb	r5, [r5, #14]
     398:	0612      	lsls	r2, r2, #24
     39a:	431a      	orrs	r2, r3
     39c:	0039      	movs	r1, r7
     39e:	002b      	movs	r3, r5
     3a0:	0020      	movs	r0, r4
     3a2:	9203      	str	r2, [sp, #12]
     3a4:	47b0      	blx	r6
    u8_t _byte2 = byteIn(spi2SCK,spi2MISO);
     3a6:	9a03      	ldr	r2, [sp, #12]
//    dummy_rx = spiDataTransfer(SPI1, cmdAdcRead_);
//    u8_t _byte1 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte2 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte3 = spiDataTransfer(SPI1,dummy_tx);
    byteOut(spi2SCK,spi2MOSI, cmdAdcRead_);
    u8_t _byte1 = byteIn(spi2SCK,spi2MISO);
     3a8:	9004      	str	r0, [sp, #16]
    u8_t _byte2 = byteIn(spi2SCK,spi2MISO);
     3aa:	002b      	movs	r3, r5
     3ac:	0039      	movs	r1, r7
     3ae:	0020      	movs	r0, r4
     3b0:	47b0      	blx	r6
    u8_t _byte3 = byteIn(spi2SCK,spi2MISO);
     3b2:	9a03      	ldr	r2, [sp, #12]
//    u8_t _byte1 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte2 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte3 = spiDataTransfer(SPI1,dummy_tx);
    byteOut(spi2SCK,spi2MOSI, cmdAdcRead_);
    u8_t _byte1 = byteIn(spi2SCK,spi2MISO);
    u8_t _byte2 = byteIn(spi2SCK,spi2MISO);
     3b4:	9005      	str	r0, [sp, #20]
    u8_t _byte3 = byteIn(spi2SCK,spi2MISO);
     3b6:	002b      	movs	r3, r5
     3b8:	0020      	movs	r0, r4
     3ba:	0039      	movs	r1, r7
     3bc:	47b0      	blx	r6
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     3be:	2280      	movs	r2, #128	; 0x80
     3c0:	4b05      	ldr	r3, [pc, #20]	; (3d8 <readMS5803AdcResults+0xa4>)
     3c2:	0212      	lsls	r2, r2, #8
     3c4:	619a      	str	r2, [r3, #24]
    pinHigh(cs_baro);

    u32_t _receive = (_byte1 << 16) | (_byte2 << 8) | (_byte3);
    return _receive;
     3c6:	9b04      	ldr	r3, [sp, #16]
     3c8:	9a05      	ldr	r2, [sp, #20]
     3ca:	041b      	lsls	r3, r3, #16
     3cc:	0215      	lsls	r5, r2, #8
     3ce:	431d      	orrs	r5, r3
     3d0:	4328      	orrs	r0, r5
}
     3d2:	b007      	add	sp, #28
     3d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
     3d6:	46c0      	nop			; (mov r8, r8)
     3d8:	41004400 	.word	0x41004400
     3dc:	00002844 	.word	0x00002844
     3e0:	00000c95 	.word	0x00000c95
     3e4:	00000d01 	.word	0x00000d01

000003e8 <ConvertPressureTemperature>:

void ConvertPressureTemperature(Barometer *my_barometer) {
     3e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    volatile const u16_t C1 = my_barometer->coefficients_[0];
    volatile const u16_t C2 = my_barometer->coefficients_[1];
    volatile const u16_t C3 = my_barometer->coefficients_[2];
    volatile const u16_t C4 = my_barometer->coefficients_[3];
     3ea:	240a      	movs	r4, #10

    u32_t _receive = (_byte1 << 16) | (_byte2 << 8) | (_byte3);
    return _receive;
}

void ConvertPressureTemperature(Barometer *my_barometer) {
     3ec:	b08d      	sub	sp, #52	; 0x34
    volatile const u16_t C1 = my_barometer->coefficients_[0];
     3ee:	8803      	ldrh	r3, [r0, #0]
     3f0:	aa04      	add	r2, sp, #16
     3f2:	8093      	strh	r3, [r2, #4]
    volatile const u16_t C2 = my_barometer->coefficients_[1];
     3f4:	8843      	ldrh	r3, [r0, #2]
    volatile const u16_t C3 = my_barometer->coefficients_[2];
    volatile const u16_t C4 = my_barometer->coefficients_[3];
     3f6:	18a4      	adds	r4, r4, r2
    return _receive;
}

void ConvertPressureTemperature(Barometer *my_barometer) {
    volatile const u16_t C1 = my_barometer->coefficients_[0];
    volatile const u16_t C2 = my_barometer->coefficients_[1];
     3f8:	80d3      	strh	r3, [r2, #6]
    volatile const u16_t C3 = my_barometer->coefficients_[2];
     3fa:	8883      	ldrh	r3, [r0, #4]
    return _receive;
}

void ConvertPressureTemperature(Barometer *my_barometer) {
    volatile const u16_t C1 = my_barometer->coefficients_[0];
    volatile const u16_t C2 = my_barometer->coefficients_[1];
     3fc:	1d95      	adds	r5, r2, #6
    volatile const u16_t C3 = my_barometer->coefficients_[2];
     3fe:	8113      	strh	r3, [r2, #8]
    volatile const u16_t C4 = my_barometer->coefficients_[3];
     400:	88c3      	ldrh	r3, [r0, #6]
     402:	9401      	str	r4, [sp, #4]
     404:	8023      	strh	r3, [r4, #0]
    volatile const u16_t C5 = my_barometer->coefficients_[4];
     406:	8903      	ldrh	r3, [r0, #8]
     408:	aa07      	add	r2, sp, #28
     40a:	8013      	strh	r3, [r2, #0]
    volatile const u16_t C6 = my_barometer->coefficients_[5];
     40c:	230e      	movs	r3, #14

    u32_t _receive = (_byte1 << 16) | (_byte2 << 8) | (_byte3);
    return _receive;
}

void ConvertPressureTemperature(Barometer *my_barometer) {
     40e:	0007      	movs	r7, r0
    volatile const u16_t C1 = my_barometer->coefficients_[0];
    volatile const u16_t C2 = my_barometer->coefficients_[1];
    volatile const u16_t C3 = my_barometer->coefficients_[2];
    volatile const u16_t C4 = my_barometer->coefficients_[3];
    volatile const u16_t C5 = my_barometer->coefficients_[4];
    volatile const u16_t C6 = my_barometer->coefficients_[5];
     410:	8941      	ldrh	r1, [r0, #10]
     412:	a804      	add	r0, sp, #16
     414:	181b      	adds	r3, r3, r0
     416:	8019      	strh	r1, [r3, #0]

    // calculate 1st order pressure and temperature (MS5607 1st order algorithm)
    const  int32_t dT = (my_barometer->rawTempatureData) - ((int32_t)C5 << 8);
     418:	8816      	ldrh	r6, [r2, #0]
    my_barometer->temperatureCelcus  = 2000 + (((int64_t)dT * C6) >> 32) ;
     41a:	693a      	ldr	r2, [r7, #16]
     41c:	0236      	lsls	r6, r6, #8
     41e:	8818      	ldrh	r0, [r3, #0]
     420:	1b96      	subs	r6, r2, r6
     422:	17f2      	asrs	r2, r6, #31
     424:	4c2a      	ldr	r4, [pc, #168]	; (4d0 <ConvertPressureTemperature+0xe8>)
     426:	9203      	str	r2, [sp, #12]
     428:	17f3      	asrs	r3, r6, #31
     42a:	0032      	movs	r2, r6
     42c:	b280      	uxth	r0, r0
     42e:	2100      	movs	r1, #0
     430:	47a0      	blx	r4
     432:	23fa      	movs	r3, #250	; 0xfa
     434:	00db      	lsls	r3, r3, #3
     436:	18c9      	adds	r1, r1, r3

    volatile const  int64_t OFF   = ((int64_t)C2 << 16) + (((C4 * (int64_t)dT)) >> 7);
     438:	882b      	ldrh	r3, [r5, #0]
    volatile const u16_t C5 = my_barometer->coefficients_[4];
    volatile const u16_t C6 = my_barometer->coefficients_[5];

    // calculate 1st order pressure and temperature (MS5607 1st order algorithm)
    const  int32_t dT = (my_barometer->rawTempatureData) - ((int32_t)C5 << 8);
    my_barometer->temperatureCelcus  = 2000 + (((int64_t)dT * C6) >> 32) ;
     43a:	6179      	str	r1, [r7, #20]

    volatile const  int64_t OFF   = ((int64_t)C2 << 16) + (((C4 * (int64_t)dT)) >> 7);
     43c:	b29b      	uxth	r3, r3
     43e:	9302      	str	r3, [sp, #8]
     440:	9b01      	ldr	r3, [sp, #4]
     442:	0032      	movs	r2, r6
     444:	8818      	ldrh	r0, [r3, #0]
     446:	2100      	movs	r1, #0
     448:	17f3      	asrs	r3, r6, #31
     44a:	b280      	uxth	r0, r0
     44c:	47a0      	blx	r4
     44e:	064b      	lsls	r3, r1, #25
     450:	09c4      	lsrs	r4, r0, #7
     452:	431c      	orrs	r4, r3
     454:	2300      	movs	r3, #0
     456:	11cd      	asrs	r5, r1, #7
     458:	9902      	ldr	r1, [sp, #8]
     45a:	040a      	lsls	r2, r1, #16
     45c:	1912      	adds	r2, r2, r4
     45e:	416b      	adcs	r3, r5
     460:	9208      	str	r2, [sp, #32]
     462:	9309      	str	r3, [sp, #36]	; 0x24
    volatile const  int64_t SENS  =  ((int64_t)C1 << 15) + (((C3 * (int64_t)dT)) >> 8);
     464:	ab04      	add	r3, sp, #16
     466:	889c      	ldrh	r4, [r3, #4]
     468:	8918      	ldrh	r0, [r3, #8]
     46a:	0032      	movs	r2, r6
     46c:	9b03      	ldr	r3, [sp, #12]
     46e:	4d18      	ldr	r5, [pc, #96]	; (4d0 <ConvertPressureTemperature+0xe8>)
     470:	b280      	uxth	r0, r0
     472:	2100      	movs	r1, #0
     474:	47a8      	blx	r5
     476:	060b      	lsls	r3, r1, #24
     478:	0a05      	lsrs	r5, r0, #8
     47a:	431d      	orrs	r5, r3
     47c:	2300      	movs	r3, #0
     47e:	b2a4      	uxth	r4, r4
     480:	120e      	asrs	r6, r1, #8
     482:	03e2      	lsls	r2, r4, #15
     484:	1952      	adds	r2, r2, r5
     486:	4173      	adcs	r3, r6
     488:	920a      	str	r2, [sp, #40]	; 0x28
     48a:	930b      	str	r3, [sp, #44]	; 0x2c
    my_barometer->pressureMbar = (((my_barometer->rawPressureData * SENS) / 2097152) - OFF) / 32768;
     48c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
     48e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
     490:	9c08      	ldr	r4, [sp, #32]
     492:	9d09      	ldr	r5, [sp, #36]	; 0x24
     494:	4e0e      	ldr	r6, [pc, #56]	; (4d0 <ConvertPressureTemperature+0xe8>)
     496:	68f8      	ldr	r0, [r7, #12]
     498:	2100      	movs	r1, #0
     49a:	47b0      	blx	r6
     49c:	2300      	movs	r3, #0
     49e:	17ce      	asrs	r6, r1, #31
     4a0:	02f6      	lsls	r6, r6, #11
     4a2:	0af2      	lsrs	r2, r6, #11
     4a4:	1880      	adds	r0, r0, r2
     4a6:	4159      	adcs	r1, r3
     4a8:	02ce      	lsls	r6, r1, #11
     4aa:	0d42      	lsrs	r2, r0, #21
     4ac:	4332      	orrs	r2, r6
     4ae:	154b      	asrs	r3, r1, #21
     4b0:	1b12      	subs	r2, r2, r4
     4b2:	41ab      	sbcs	r3, r5
     4b4:	2100      	movs	r1, #0
     4b6:	17dc      	asrs	r4, r3, #31
     4b8:	0464      	lsls	r4, r4, #17
     4ba:	0c60      	lsrs	r0, r4, #17
     4bc:	1812      	adds	r2, r2, r0
     4be:	414b      	adcs	r3, r1
     4c0:	0011      	movs	r1, r2
     4c2:	045b      	lsls	r3, r3, #17
     4c4:	0bca      	lsrs	r2, r1, #15
     4c6:	431a      	orrs	r2, r3
     4c8:	61fa      	str	r2, [r7, #28]
}
     4ca:	b00d      	add	sp, #52	; 0x34
     4cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
     4ce:	46c0      	nop			; (mov r8, r8)
     4d0:	000017ad 	.word	0x000017ad

000004d4 <pascalToCent>:
        748275, 767202, 786555, 806356, 826627,
        847395, 868688, 890537, 912974, 936037,
        959766, 984206
    };

    my_barometer->pressurePa = my_barometer->pressureMbar *10;
     4d4:	220a      	movs	r2, #10
     4d6:	69c3      	ldr	r3, [r0, #28]
    double altFeet = (1-pow((my_barometer->pressurePa/1013.25),(0.190284)))*145366.45;
    my_barometer->heightFeet = (float)altFeet;

}

void pascalToCent(Barometer *my_barometer) {
     4d8:	b570      	push	{r4, r5, r6, lr}
        748275, 767202, 786555, 806356, 826627,
        847395, 868688, 890537, 912974, 936037,
        959766, 984206
    };

    my_barometer->pressurePa = my_barometer->pressureMbar *10;
     4da:	435a      	muls	r2, r3

    if (my_barometer->pressurePa > PA_INIT)
     4dc:	4c0e      	ldr	r4, [pc, #56]	; (518 <pascalToCent+0x44>)
        748275, 767202, 786555, 806356, 826627,
        847395, 868688, 890537, 912974, 936037,
        959766, 984206
    };

    my_barometer->pressurePa = my_barometer->pressureMbar *10;
     4de:	6182      	str	r2, [r0, #24]

    if (my_barometer->pressurePa > PA_INIT)
     4e0:	42a2      	cmp	r2, r4
     4e2:	d901      	bls.n	4e8 <pascalToCent+0x14>
        my_barometer->heightCm = lookupTable[0];
     4e4:	4b0d      	ldr	r3, [pc, #52]	; (51c <pascalToCent+0x48>)
     4e6:	e015      	b.n	514 <pascalToCent+0x40>
    else {
        const int32_t inx = (PA_INIT - my_barometer->pressurePa) >> 10;
     4e8:	1aa3      	subs	r3, r4, r2
     4ea:	0a9b      	lsrs	r3, r3, #10
        if (inx >= PZLUT_ENTRIES - 1)
     4ec:	2b4b      	cmp	r3, #75	; 0x4b
     4ee:	d901      	bls.n	4f4 <pascalToCent+0x20>
            my_barometer->heightCm = lookupTable[PZLUT_ENTRIES - 1];
     4f0:	4b0b      	ldr	r3, [pc, #44]	; (520 <pascalToCent+0x4c>)
     4f2:	e00f      	b.n	514 <pascalToCent+0x40>
        else {
            const int32_t pa1 = PA_INIT - (inx << 10);
            const int32_t z1 = lookupTable[inx];
     4f4:	4d0b      	ldr	r5, [pc, #44]	; (524 <pascalToCent+0x50>)
     4f6:	0099      	lsls	r1, r3, #2
            const int32_t z2 = lookupTable[inx + 1];
            my_barometer->heightCm = (z1 + (((pa1 - my_barometer->pressurePa) * (z2 - z1)) >> 10));
     4f8:	029e      	lsls	r6, r3, #10
        if (inx >= PZLUT_ENTRIES - 1)
            my_barometer->heightCm = lookupTable[PZLUT_ENTRIES - 1];
        else {
            const int32_t pa1 = PA_INIT - (inx << 10);
            const int32_t z1 = lookupTable[inx];
            const int32_t z2 = lookupTable[inx + 1];
     4fa:	3301      	adds	r3, #1
     4fc:	009b      	lsls	r3, r3, #2
     4fe:	18eb      	adds	r3, r5, r3
        const int32_t inx = (PA_INIT - my_barometer->pressurePa) >> 10;
        if (inx >= PZLUT_ENTRIES - 1)
            my_barometer->heightCm = lookupTable[PZLUT_ENTRIES - 1];
        else {
            const int32_t pa1 = PA_INIT - (inx << 10);
            const int32_t z1 = lookupTable[inx];
     500:	1869      	adds	r1, r5, r1
            const int32_t z2 = lookupTable[inx + 1];
            my_barometer->heightCm = (z1 + (((pa1 - my_barometer->pressurePa) * (z2 - z1)) >> 10));
     502:	1ba4      	subs	r4, r4, r6
        const int32_t inx = (PA_INIT - my_barometer->pressurePa) >> 10;
        if (inx >= PZLUT_ENTRIES - 1)
            my_barometer->heightCm = lookupTable[PZLUT_ENTRIES - 1];
        else {
            const int32_t pa1 = PA_INIT - (inx << 10);
            const int32_t z1 = lookupTable[inx];
     504:	6909      	ldr	r1, [r1, #16]
            const int32_t z2 = lookupTable[inx + 1];
            my_barometer->heightCm = (z1 + (((pa1 - my_barometer->pressurePa) * (z2 - z1)) >> 10));
     506:	1aa4      	subs	r4, r4, r2
     508:	691a      	ldr	r2, [r3, #16]
     50a:	1a52      	subs	r2, r2, r1
     50c:	0013      	movs	r3, r2
     50e:	4363      	muls	r3, r4
     510:	0a9b      	lsrs	r3, r3, #10
     512:	185b      	adds	r3, r3, r1
     514:	6203      	str	r3, [r0, #32]
        }
    }
}
     516:	bd70      	pop	{r4, r5, r6, pc}
     518:	000199cc 	.word	0x000199cc
     51c:	ffff8d20 	.word	0xffff8d20
     520:	000f048e 	.word	0x000f048e
     524:	00002844 	.word	0x00002844

00000528 <readMS5803Coefficients>:

void readMS5803Coefficients(Barometer *my_barometer) {
     528:	b5f0      	push	{r4, r5, r6, r7, lr}
     52a:	27a2      	movs	r7, #162	; 0xa2
     52c:	b087      	sub	sp, #28
     52e:	9002      	str	r0, [sp, #8]

    u8_t dummy_tx = 0xFF;
    u8_t dummy_rx;

    for (u8_t coeff_num = 0; coeff_num < 6 ; ++coeff_num ) {
        delay_us(600);
     530:	2096      	movs	r0, #150	; 0x96
     532:	4c2b      	ldr	r4, [pc, #172]	; (5e0 <readMS5803Coefficients+0xb8>)
     534:	0080      	lsls	r0, r0, #2
     536:	47a0      	blx	r4
        u8_t _cmd = MS5803_CMD_PROM_READ + ((coeff_num+1)*2);
        delay_us(600);
     538:	2096      	movs	r0, #150	; 0x96
     53a:	0080      	lsls	r0, r0, #2
     53c:	47a0      	blx	r4
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     53e:	2280      	movs	r2, #128	; 0x80
        pinLow(cs_baro);
//      dummy_rx = spiDataTransfer(SPI1, _cmd);
//      u8_t _byte1 = spiDataTransfer(SPI1,dummy_tx);
//      u8_t _byte2 = spiDataTransfer(SPI1,dummy_tx);
        byteOut(spi2SCK,spi2MOSI, _cmd);
     540:	4c28      	ldr	r4, [pc, #160]	; (5e4 <readMS5803Coefficients+0xbc>)
     542:	4b29      	ldr	r3, [pc, #164]	; (5e8 <readMS5803Coefficients+0xc0>)
     544:	0212      	lsls	r2, r2, #8
     546:	615a      	str	r2, [r3, #20]
     548:	7863      	ldrb	r3, [r4, #1]
     54a:	7820      	ldrb	r0, [r4, #0]
     54c:	78a2      	ldrb	r2, [r4, #2]
     54e:	021b      	lsls	r3, r3, #8
     550:	4303      	orrs	r3, r0
     552:	0412      	lsls	r2, r2, #16
     554:	0019      	movs	r1, r3
     556:	0013      	movs	r3, r2
     558:	430b      	orrs	r3, r1
     55a:	79a1      	ldrb	r1, [r4, #6]
     55c:	7966      	ldrb	r6, [r4, #5]
     55e:	0209      	lsls	r1, r1, #8
     560:	4331      	orrs	r1, r6
     562:	0008      	movs	r0, r1
     564:	79e1      	ldrb	r1, [r4, #7]
     566:	78e2      	ldrb	r2, [r4, #3]
     568:	0409      	lsls	r1, r1, #16
     56a:	4301      	orrs	r1, r0
     56c:	7a20      	ldrb	r0, [r4, #8]
     56e:	7a66      	ldrb	r6, [r4, #9]
     570:	0612      	lsls	r2, r2, #24
     572:	0600      	lsls	r0, r0, #24
     574:	4308      	orrs	r0, r1
     576:	431a      	orrs	r2, r3
     578:	9700      	str	r7, [sp, #0]
     57a:	7923      	ldrb	r3, [r4, #4]
     57c:	0031      	movs	r1, r6
     57e:	4d1b      	ldr	r5, [pc, #108]	; (5ec <readMS5803Coefficients+0xc4>)
     580:	9003      	str	r0, [sp, #12]
     582:	47a8      	blx	r5
        u8_t _byte1 = byteIn(spi2SCK,spi2MISO);
     584:	7ae3      	ldrb	r3, [r4, #11]
     586:	0020      	movs	r0, r4
     588:	7aa1      	ldrb	r1, [r4, #10]
     58a:	7b24      	ldrb	r4, [r4, #12]
     58c:	021b      	lsls	r3, r3, #8
     58e:	430b      	orrs	r3, r1
     590:	0424      	lsls	r4, r4, #16
     592:	001a      	movs	r2, r3
     594:	0023      	movs	r3, r4
     596:	7b44      	ldrb	r4, [r0, #13]
     598:	7b85      	ldrb	r5, [r0, #14]
     59a:	4313      	orrs	r3, r2
     59c:	0624      	lsls	r4, r4, #24
     59e:	431c      	orrs	r4, r3
     5a0:	0022      	movs	r2, r4
     5a2:	002b      	movs	r3, r5
     5a4:	9404      	str	r4, [sp, #16]
     5a6:	0031      	movs	r1, r6
     5a8:	4c11      	ldr	r4, [pc, #68]	; (5f0 <readMS5803Coefficients+0xc8>)
     5aa:	9803      	ldr	r0, [sp, #12]
     5ac:	47a0      	blx	r4
        u8_t _byte2 = byteIn(spi2SCK,spi2MISO);
     5ae:	002b      	movs	r3, r5
        pinLow(cs_baro);
//      dummy_rx = spiDataTransfer(SPI1, _cmd);
//      u8_t _byte1 = spiDataTransfer(SPI1,dummy_tx);
//      u8_t _byte2 = spiDataTransfer(SPI1,dummy_tx);
        byteOut(spi2SCK,spi2MOSI, _cmd);
        u8_t _byte1 = byteIn(spi2SCK,spi2MISO);
     5b0:	9005      	str	r0, [sp, #20]
        u8_t _byte2 = byteIn(spi2SCK,spi2MISO);
     5b2:	9a04      	ldr	r2, [sp, #16]
     5b4:	9803      	ldr	r0, [sp, #12]
     5b6:	0031      	movs	r1, r6
     5b8:	4c0d      	ldr	r4, [pc, #52]	; (5f0 <readMS5803Coefficients+0xc8>)
     5ba:	47a0      	blx	r4
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     5bc:	2280      	movs	r2, #128	; 0x80
     5be:	4b0a      	ldr	r3, [pc, #40]	; (5e8 <readMS5803Coefficients+0xc0>)
     5c0:	0212      	lsls	r2, r2, #8
     5c2:	619a      	str	r2, [r3, #24]
        pinHigh(cs_baro);
        my_barometer->coefficients_[coeff_num] = (_byte1 << 8) | _byte2;
     5c4:	9b05      	ldr	r3, [sp, #20]
     5c6:	021d      	lsls	r5, r3, #8
     5c8:	9b02      	ldr	r3, [sp, #8]
     5ca:	4328      	orrs	r0, r5
     5cc:	8018      	strh	r0, [r3, #0]
     5ce:	1cbb      	adds	r3, r7, #2
     5d0:	b2df      	uxtb	r7, r3
     5d2:	9b02      	ldr	r3, [sp, #8]
     5d4:	3302      	adds	r3, #2
     5d6:	9302      	str	r3, [sp, #8]
void readMS5803Coefficients(Barometer *my_barometer) {

    u8_t dummy_tx = 0xFF;
    u8_t dummy_rx;

    for (u8_t coeff_num = 0; coeff_num < 6 ; ++coeff_num ) {
     5d8:	2fae      	cmp	r7, #174	; 0xae
     5da:	d1a9      	bne.n	530 <readMS5803Coefficients+0x8>
        u8_t _byte2 = byteIn(spi2SCK,spi2MISO);
        pinHigh(cs_baro);
        my_barometer->coefficients_[coeff_num] = (_byte1 << 8) | _byte2;
    }

}
     5dc:	b007      	add	sp, #28
     5de:	bdf0      	pop	{r4, r5, r6, r7, pc}
     5e0:	00000f49 	.word	0x00000f49
     5e4:	00002844 	.word	0x00002844
     5e8:	41004400 	.word	0x41004400
     5ec:	00000c95 	.word	0x00000c95
     5f0:	00000d01 	.word	0x00000d01

000005f4 <initMS5803Barometer>:

void initMS5803Barometer(Barometer *my_barometer) {
     5f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     5f6:	2680      	movs	r6, #128	; 0x80
    u8_t dummy_tx = 0xFF;
    u8_t dummy_rx;

    pinLow(cs_baro);
//   dummy_rx = spiDataTransfer(SPI1, MS5803_CMD_RES);
    byteOut(spi2SCK,spi2MOSI, MS5803_CMD_RES);
     5f8:	231e      	movs	r3, #30
     5fa:	491a      	ldr	r1, [pc, #104]	; (664 <initMS5803Barometer+0x70>)
     5fc:	4d1a      	ldr	r5, [pc, #104]	; (668 <initMS5803Barometer+0x74>)
     5fe:	0236      	lsls	r6, r6, #8
     600:	616e      	str	r6, [r5, #20]
     602:	9300      	str	r3, [sp, #0]
     604:	784b      	ldrb	r3, [r1, #1]
     606:	780a      	ldrb	r2, [r1, #0]
     608:	021b      	lsls	r3, r3, #8
     60a:	4313      	orrs	r3, r2
     60c:	788a      	ldrb	r2, [r1, #2]
        my_barometer->coefficients_[coeff_num] = (_byte1 << 8) | _byte2;
    }

}

void initMS5803Barometer(Barometer *my_barometer) {
     60e:	0004      	movs	r4, r0
    u8_t dummy_tx = 0xFF;
    u8_t dummy_rx;

    pinLow(cs_baro);
//   dummy_rx = spiDataTransfer(SPI1, MS5803_CMD_RES);
    byteOut(spi2SCK,spi2MOSI, MS5803_CMD_RES);
     610:	0412      	lsls	r2, r2, #16
     612:	0018      	movs	r0, r3
     614:	0013      	movs	r3, r2
     616:	78ca      	ldrb	r2, [r1, #3]
     618:	4303      	orrs	r3, r0
     61a:	0612      	lsls	r2, r2, #24
     61c:	1d4f      	adds	r7, r1, #5
     61e:	431a      	orrs	r2, r3
     620:	7948      	ldrb	r0, [r1, #5]
     622:	790b      	ldrb	r3, [r1, #4]
     624:	7989      	ldrb	r1, [r1, #6]
     626:	0209      	lsls	r1, r1, #8
     628:	4301      	orrs	r1, r0
     62a:	78b8      	ldrb	r0, [r7, #2]
     62c:	0400      	lsls	r0, r0, #16
     62e:	4301      	orrs	r1, r0
     630:	78f8      	ldrb	r0, [r7, #3]
     632:	0600      	lsls	r0, r0, #24
     634:	4308      	orrs	r0, r1
     636:	7939      	ldrb	r1, [r7, #4]
     638:	4f0c      	ldr	r7, [pc, #48]	; (66c <initMS5803Barometer+0x78>)
     63a:	47b8      	blx	r7
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     63c:	61ae      	str	r6, [r5, #24]
    pinHigh(cs_baro);
    delay_ms(200);
     63e:	20c8      	movs	r0, #200	; 0xc8
     640:	4b0b      	ldr	r3, [pc, #44]	; (670 <initMS5803Barometer+0x7c>)
     642:	4798      	blx	r3
    readMS5803Coefficients(my_barometer);
     644:	0020      	movs	r0, r4
     646:	4b0b      	ldr	r3, [pc, #44]	; (674 <initMS5803Barometer+0x80>)
     648:	4798      	blx	r3

    my_barometer->heightCm = 4000;
     64a:	23fa      	movs	r3, #250	; 0xfa
     64c:	011b      	lsls	r3, r3, #4
     64e:	6223      	str	r3, [r4, #32]
    my_barometer->pressurePa = 10000;
     650:	4b09      	ldr	r3, [pc, #36]	; (678 <initMS5803Barometer+0x84>)
     652:	61a3      	str	r3, [r4, #24]
    my_barometer->rawPressureData = 4311550;
     654:	4b09      	ldr	r3, [pc, #36]	; (67c <initMS5803Barometer+0x88>)
     656:	60e3      	str	r3, [r4, #12]
    my_barometer->rawTempatureData = 8387300;
     658:	4b09      	ldr	r3, [pc, #36]	; (680 <initMS5803Barometer+0x8c>)
     65a:	6123      	str	r3, [r4, #16]
    my_barometer->temperatureCelcus = 2000;
     65c:	23fa      	movs	r3, #250	; 0xfa
     65e:	00db      	lsls	r3, r3, #3
     660:	6163      	str	r3, [r4, #20]




}
     662:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
     664:	00002844 	.word	0x00002844
     668:	41004400 	.word	0x41004400
     66c:	00000c95 	.word	0x00000c95
     670:	00000f79 	.word	0x00000f79
     674:	00000529 	.word	0x00000529
     678:	00002710 	.word	0x00002710
     67c:	0041c9fe 	.word	0x0041c9fe
     680:	007ffae4 	.word	0x007ffae4

00000684 <init>:
#include "math.h"




void init() {
     684:	b5f0      	push	{r4, r5, r6, r7, lr}
    SystemInit();
     686:	4bbf      	ldr	r3, [pc, #764]	; (984 <init+0x300>)
#include "math.h"




void init() {
     688:	b085      	sub	sp, #20
    SystemInit();
     68a:	4798      	blx	r3
    GclkInit();
     68c:	4bbe      	ldr	r3, [pc, #760]	; (988 <init+0x304>)
     68e:	4798      	blx	r3
    RtcInit();
     690:	4bbe      	ldr	r3, [pc, #760]	; (98c <init+0x308>)
     692:	4798      	blx	r3
    delayInit();
     694:	4bbe      	ldr	r3, [pc, #760]	; (990 <init+0x30c>)
     696:	4798      	blx	r3
    adcInit();
     698:	4bbe      	ldr	r3, [pc, #760]	; (994 <init+0x310>)
     69a:	4798      	blx	r3
    dmaInit();
     69c:	4bbe      	ldr	r3, [pc, #760]	; (998 <init+0x314>)
     69e:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     6a0:	2240      	movs	r2, #64	; 0x40
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     6a2:	21c1      	movs	r1, #193	; 0xc1

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     6a4:	4bbd      	ldr	r3, [pc, #756]	; (99c <init+0x318>)
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     6a6:	0089      	lsls	r1, r1, #2

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     6a8:	601a      	str	r2, [r3, #0]
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     6aa:	5858      	ldr	r0, [r3, r1]
     6ac:	4abc      	ldr	r2, [pc, #752]	; (9a0 <init+0x31c>)
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     6ae:	2401      	movs	r4, #1
     6b0:	4002      	ands	r2, r0
     6b2:	505a      	str	r2, [r3, r1]
     6b4:	4bbb      	ldr	r3, [pc, #748]	; (9a4 <init+0x320>)

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     6b6:	2510      	movs	r5, #16
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     6b8:	0019      	movs	r1, r3
     6ba:	3154      	adds	r1, #84	; 0x54
     6bc:	780a      	ldrb	r2, [r1, #0]

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     6be:	0018      	movs	r0, r3
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     6c0:	43a2      	bics	r2, r4
     6c2:	700a      	strb	r2, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     6c4:	2280      	movs	r2, #128	; 0x80
     6c6:	0352      	lsls	r2, r2, #13
     6c8:	609a      	str	r2, [r3, #8]

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     6ca:	220f      	movs	r2, #15
     6cc:	3033      	adds	r0, #51	; 0x33
     6ce:	7801      	ldrb	r1, [r0, #0]
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     6d0:	001e      	movs	r6, r3

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     6d2:	4391      	bics	r1, r2
     6d4:	4321      	orrs	r1, r4
     6d6:	7001      	strb	r1, [r0, #0]
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     6d8:	7cc1      	ldrb	r1, [r0, #19]
     6da:	36c3      	adds	r6, #195	; 0xc3
     6dc:	4321      	orrs	r1, r4
     6de:	74c1      	strb	r1, [r0, #19]

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     6e0:	0019      	movs	r1, r3
     6e2:	31b1      	adds	r1, #177	; 0xb1
     6e4:	7808      	ldrb	r0, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     6e6:	001f      	movs	r7, r3

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     6e8:	4010      	ands	r0, r2
     6ea:	4328      	orrs	r0, r5
     6ec:	7008      	strb	r0, [r1, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     6ee:	7830      	ldrb	r0, [r6, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     6f0:	3788      	adds	r7, #136	; 0x88
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     6f2:	4320      	orrs	r0, r4
     6f4:	7030      	strb	r0, [r6, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     6f6:	7808      	ldrb	r0, [r1, #0]
     6f8:	4010      	ands	r0, r2
     6fa:	4328      	orrs	r0, r5
     6fc:	7008      	strb	r0, [r1, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     6fe:	7830      	ldrb	r0, [r6, #0]
     700:	4320      	orrs	r0, r4
     702:	7030      	strb	r0, [r6, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     704:	7d30      	ldrb	r0, [r6, #20]
     706:	43a0      	bics	r0, r4
     708:	7530      	strb	r0, [r6, #20]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     70a:	2080      	movs	r0, #128	; 0x80
     70c:	0400      	lsls	r0, r0, #16
     70e:	9703      	str	r7, [sp, #12]
     710:	6038      	str	r0, [r7, #0]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     712:	60f8      	str	r0, [r7, #12]

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     714:	7808      	ldrb	r0, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     716:	003e      	movs	r6, r7

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     718:	4390      	bics	r0, r2
     71a:	4320      	orrs	r0, r4
     71c:	7008      	strb	r0, [r1, #0]
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     71e:	20c2      	movs	r0, #194	; 0xc2
     720:	4684      	mov	ip, r0
     722:	449c      	add	ip, r3
     724:	4660      	mov	r0, ip
     726:	4667      	mov	r7, ip
     728:	7800      	ldrb	r0, [r0, #0]
     72a:	4320      	orrs	r0, r4
     72c:	7038      	strb	r0, [r7, #0]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     72e:	7808      	ldrb	r0, [r1, #0]
     730:	4390      	bics	r0, r2
     732:	4320      	orrs	r0, r4
     734:	7008      	strb	r0, [r1, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     736:	0018      	movs	r0, r3
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     738:	7839      	ldrb	r1, [r7, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     73a:	30d6      	adds	r0, #214	; 0xd6
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     73c:	4321      	orrs	r1, r4
     73e:	7039      	strb	r1, [r7, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     740:	7801      	ldrb	r1, [r0, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     742:	2702      	movs	r7, #2
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     744:	43a1      	bics	r1, r4
     746:	7001      	strb	r1, [r0, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     748:	2180      	movs	r1, #128	; 0x80
     74a:	9803      	ldr	r0, [sp, #12]
     74c:	03c9      	lsls	r1, r1, #15
     74e:	6001      	str	r1, [r0, #0]

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     750:	0018      	movs	r0, r3
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     752:	60f1      	str	r1, [r6, #12]

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     754:	3031      	adds	r0, #49	; 0x31
     756:	7801      	ldrb	r1, [r0, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     758:	3e3f      	subs	r6, #63	; 0x3f

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     75a:	4011      	ands	r1, r2
     75c:	430d      	orrs	r5, r1
     75e:	7005      	strb	r5, [r0, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     760:	001d      	movs	r5, r3
     762:	3543      	adds	r5, #67	; 0x43
     764:	7829      	ldrb	r1, [r5, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     766:	46bc      	mov	ip, r7
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     768:	4321      	orrs	r1, r4
     76a:	7029      	strb	r1, [r5, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     76c:	7da9      	ldrb	r1, [r5, #22]
     76e:	3505      	adds	r5, #5
     770:	43a1      	bics	r1, r4
     772:	7469      	strb	r1, [r5, #17]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     774:	2180      	movs	r1, #128	; 0x80
     776:	0489      	lsls	r1, r1, #18
     778:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     77a:	6159      	str	r1, [r3, #20]

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     77c:	7801      	ldrb	r1, [r0, #0]
     77e:	4391      	bics	r1, r2
     780:	4321      	orrs	r1, r4
     782:	7001      	strb	r1, [r0, #0]
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     784:	7c41      	ldrb	r1, [r0, #17]
     786:	3011      	adds	r0, #17
     788:	4321      	orrs	r1, r4
     78a:	7001      	strb	r1, [r0, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     78c:	7d81      	ldrb	r1, [r0, #22]
     78e:	43a1      	bics	r1, r4
     790:	7581      	strb	r1, [r0, #22]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     792:	2180      	movs	r1, #128	; 0x80
     794:	0449      	lsls	r1, r1, #17
     796:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     798:	6159      	str	r1, [r3, #20]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     79a:	7829      	ldrb	r1, [r5, #0]
     79c:	43a1      	bics	r1, r4
     79e:	7029      	strb	r1, [r5, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     7a0:	2180      	movs	r1, #128	; 0x80
     7a2:	0049      	lsls	r1, r1, #1
     7a4:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     7a6:	7831      	ldrb	r1, [r6, #0]
     7a8:	43a1      	bics	r1, r4
     7aa:	7031      	strb	r1, [r6, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     7ac:	2180      	movs	r1, #128	; 0x80
     7ae:	0089      	lsls	r1, r1, #2
     7b0:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     7b2:	0019      	movs	r1, r3
     7b4:	314b      	adds	r1, #75	; 0x4b
     7b6:	7808      	ldrb	r0, [r1, #0]
     7b8:	43a0      	bics	r0, r4
     7ba:	7008      	strb	r0, [r1, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     7bc:	7808      	ldrb	r0, [r1, #0]
     7be:	4338      	orrs	r0, r7
     7c0:	7008      	strb	r0, [r1, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     7c2:	2080      	movs	r0, #128	; 0x80
     7c4:	0100      	lsls	r0, r0, #4
     7c6:	6058      	str	r0, [r3, #4]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     7c8:	4877      	ldr	r0, [pc, #476]	; (9a8 <init+0x324>)
     7ca:	371e      	adds	r7, #30
     7cc:	7800      	ldrb	r0, [r0, #0]
     7ce:	4010      	ands	r0, r2
     7d0:	4338      	orrs	r0, r7
     7d2:	4f75      	ldr	r7, [pc, #468]	; (9a8 <init+0x324>)
     7d4:	7038      	strb	r0, [r7, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     7d6:	7808      	ldrb	r0, [r1, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     7d8:	2720      	movs	r7, #32
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     7da:	4320      	orrs	r0, r4
     7dc:	7008      	strb	r0, [r1, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     7de:	0018      	movs	r0, r3
     7e0:	3034      	adds	r0, #52	; 0x34
     7e2:	7801      	ldrb	r1, [r0, #0]
     7e4:	4011      	ands	r1, r2
     7e6:	4339      	orrs	r1, r7
     7e8:	7001      	strb	r1, [r0, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     7ea:	7831      	ldrb	r1, [r6, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     7ec:	4667      	mov	r7, ip
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     7ee:	4321      	orrs	r1, r4
     7f0:	7031      	strb	r1, [r6, #0]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     7f2:	4666      	mov	r6, ip
     7f4:	7801      	ldrb	r1, [r0, #0]
     7f6:	4391      	bics	r1, r2
     7f8:	4331      	orrs	r1, r6
     7fa:	7001      	strb	r1, [r0, #0]
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     7fc:	7829      	ldrb	r1, [r5, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     7fe:	3096      	adds	r0, #150	; 0x96
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     800:	4321      	orrs	r1, r4
     802:	7029      	strb	r1, [r5, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     804:	7801      	ldrb	r1, [r0, #0]
     806:	001e      	movs	r6, r3
     808:	43a1      	bics	r1, r4
     80a:	7001      	strb	r1, [r0, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     80c:	2180      	movs	r1, #128	; 0x80
     80e:	9803      	ldr	r0, [sp, #12]
     810:	00c9      	lsls	r1, r1, #3
     812:	6001      	str	r1, [r0, #0]
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     814:	0018      	movs	r0, r3
     816:	3098      	adds	r0, #152	; 0x98
     818:	6001      	str	r1, [r0, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     81a:	78a8      	ldrb	r0, [r5, #2]
     81c:	3651      	adds	r6, #81	; 0x51
     81e:	43a0      	bics	r0, r4
     820:	70a8      	strb	r0, [r5, #2]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     822:	6099      	str	r1, [r3, #8]
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     824:	6199      	str	r1, [r3, #24]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     826:	7a29      	ldrb	r1, [r5, #8]
     828:	43a1      	bics	r1, r4
     82a:	7229      	strb	r1, [r5, #8]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     82c:	2180      	movs	r1, #128	; 0x80
     82e:	0249      	lsls	r1, r1, #9
     830:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     832:	7831      	ldrb	r1, [r6, #0]
     834:	43a1      	bics	r1, r4
     836:	7031      	strb	r1, [r6, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     838:	2180      	movs	r1, #128	; 0x80
     83a:	0289      	lsls	r1, r1, #10
     83c:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     83e:	0019      	movs	r1, r3
     840:	3153      	adds	r1, #83	; 0x53
     842:	7808      	ldrb	r0, [r1, #0]
     844:	43a0      	bics	r0, r4
     846:	7008      	strb	r0, [r1, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     848:	7808      	ldrb	r0, [r1, #0]
     84a:	4338      	orrs	r0, r7
     84c:	7008      	strb	r0, [r1, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     84e:	001f      	movs	r7, r3


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     850:	2080      	movs	r0, #128	; 0x80
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     852:	3739      	adds	r7, #57	; 0x39


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     854:	0300      	lsls	r0, r0, #12
     856:	6058      	str	r0, [r3, #4]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     858:	9703      	str	r7, [sp, #12]
     85a:	7838      	ldrb	r0, [r7, #0]
     85c:	2720      	movs	r7, #32
     85e:	4010      	ands	r0, r2
     860:	4338      	orrs	r0, r7
     862:	9f03      	ldr	r7, [sp, #12]
     864:	7038      	strb	r0, [r7, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     866:	7808      	ldrb	r0, [r1, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     868:	2720      	movs	r7, #32
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     86a:	4320      	orrs	r0, r4
     86c:	7008      	strb	r0, [r1, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     86e:	0018      	movs	r0, r3
     870:	3038      	adds	r0, #56	; 0x38
     872:	7801      	ldrb	r1, [r0, #0]
     874:	4011      	ands	r1, r2
     876:	4339      	orrs	r1, r7
     878:	7001      	strb	r1, [r0, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     87a:	7831      	ldrb	r1, [r6, #0]
     87c:	4321      	orrs	r1, r4
     87e:	7031      	strb	r1, [r6, #0]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     880:	4666      	mov	r6, ip
     882:	7801      	ldrb	r1, [r0, #0]
     884:	4391      	bics	r1, r2
     886:	4331      	orrs	r1, r6
     888:	7001      	strb	r1, [r0, #0]
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     88a:	7a29      	ldrb	r1, [r5, #8]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     88c:	3014      	adds	r0, #20
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     88e:	4321      	orrs	r1, r4
     890:	7229      	strb	r1, [r5, #8]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     892:	7981      	ldrb	r1, [r0, #6]
     894:	43a1      	bics	r1, r4
     896:	7181      	strb	r1, [r0, #6]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     898:	2180      	movs	r1, #128	; 0x80
     89a:	02c9      	lsls	r1, r1, #11
     89c:	6099      	str	r1, [r3, #8]
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     89e:	6199      	str	r1, [r3, #24]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     8a0:	7801      	ldrb	r1, [r0, #0]
     8a2:	43a1      	bics	r1, r4
     8a4:	7001      	strb	r1, [r0, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     8a6:	2180      	movs	r1, #128	; 0x80
     8a8:	0149      	lsls	r1, r1, #5
     8aa:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     8ac:	7881      	ldrb	r1, [r0, #2]
     8ae:	43a1      	bics	r1, r4
     8b0:	7081      	strb	r1, [r0, #2]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     8b2:	2180      	movs	r1, #128	; 0x80
     8b4:	01c9      	lsls	r1, r1, #7
     8b6:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     8b8:	0019      	movs	r1, r3
     8ba:	314d      	adds	r1, #77	; 0x4d
     8bc:	7808      	ldrb	r0, [r1, #0]
     8be:	43a0      	bics	r0, r4
     8c0:	7008      	strb	r0, [r1, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     8c2:	7808      	ldrb	r0, [r1, #0]
     8c4:	4330      	orrs	r0, r6
     8c6:	7008      	strb	r0, [r1, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     8c8:	2180      	movs	r1, #128	; 0x80
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     8ca:	0018      	movs	r0, r3


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     8cc:	0189      	lsls	r1, r1, #6
     8ce:	6059      	str	r1, [r3, #4]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     8d0:	304f      	adds	r0, #79	; 0x4f
     8d2:	7801      	ldrb	r1, [r0, #0]
     8d4:	43a1      	bics	r1, r4
     8d6:	7001      	strb	r1, [r0, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     8d8:	2180      	movs	r1, #128	; 0x80
     8da:	0209      	lsls	r1, r1, #8
     8dc:	6099      	str	r1, [r3, #8]
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     8de:	6199      	str	r1, [r3, #24]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     8e0:	0019      	movs	r1, r3
     8e2:	3155      	adds	r1, #85	; 0x55
     8e4:	7808      	ldrb	r0, [r1, #0]
     8e6:	43a0      	bics	r0, r4
     8e8:	7008      	strb	r0, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     8ea:	2080      	movs	r0, #128	; 0x80
     8ec:	0380      	lsls	r0, r0, #14
     8ee:	6098      	str	r0, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
}


inline static void pinCfg(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].reg = p.cfg;
     8f0:	2040      	movs	r0, #64	; 0x40
     8f2:	7008      	strb	r0, [r1, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     8f4:	7848      	ldrb	r0, [r1, #1]
     8f6:	43a0      	bics	r0, r4
     8f8:	7048      	strb	r0, [r1, #1]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     8fa:	2080      	movs	r0, #128	; 0x80
     8fc:	03c0      	lsls	r0, r0, #15
     8fe:	6098      	str	r0, [r3, #8]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     900:	0018      	movs	r0, r3
     902:	303b      	adds	r0, #59	; 0x3b
     904:	7805      	ldrb	r5, [r0, #0]
     906:	4395      	bics	r5, r2
     908:	4335      	orrs	r5, r6
     90a:	7005      	strb	r5, [r0, #0]
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     90c:	784d      	ldrb	r5, [r1, #1]
     90e:	4325      	orrs	r5, r4
     910:	704d      	strb	r5, [r1, #1]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     912:	788d      	ldrb	r5, [r1, #2]
     914:	43a5      	bics	r5, r4
     916:	708d      	strb	r5, [r1, #2]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     918:	788d      	ldrb	r5, [r1, #2]
     91a:	4335      	orrs	r5, r6
     91c:	708d      	strb	r5, [r1, #2]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     91e:	2580      	movs	r5, #128	; 0x80
     920:	042d      	lsls	r5, r5, #16
     922:	605d      	str	r5, [r3, #4]

//    sercomClockEnable(SPI2, 3, 4);
//   sercomSpiMasterInit(SPI2, 3, 0, 0, 0, 0x00);

    sercomClockEnable(SPI0, 3, 4);
    sercomSpiMasterInit(SPI0, 3, 0, 0, 0, 0x00);
     924:	2500      	movs	r5, #0
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     926:	7803      	ldrb	r3, [r0, #0]
    pinMux(RxPo);

//    sercomClockEnable(SPI2, 3, 4);
//   sercomSpiMasterInit(SPI2, 3, 0, 0, 0, 0x00);

    sercomClockEnable(SPI0, 3, 4);
     928:	4e20      	ldr	r6, [pc, #128]	; (9ac <init+0x328>)
     92a:	401a      	ands	r2, r3
     92c:	433a      	orrs	r2, r7
     92e:	7002      	strb	r2, [r0, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     930:	788b      	ldrb	r3, [r1, #2]
     932:	2204      	movs	r2, #4
     934:	4323      	orrs	r3, r4
     936:	708b      	strb	r3, [r1, #2]
     938:	2000      	movs	r0, #0
     93a:	2103      	movs	r1, #3
     93c:	47b0      	blx	r6
    sercomSpiMasterInit(SPI0, 3, 0, 0, 0, 0x00);
     93e:	002b      	movs	r3, r5
     940:	002a      	movs	r2, r5
     942:	0028      	movs	r0, r5
     944:	4f1a      	ldr	r7, [pc, #104]	; (9b0 <init+0x32c>)
     946:	9501      	str	r5, [sp, #4]
     948:	9500      	str	r5, [sp, #0]
     94a:	2103      	movs	r1, #3
     94c:	47b8      	blx	r7

    sercomClockEnable(SPI1, 3, 4);
     94e:	0020      	movs	r0, r4
     950:	2204      	movs	r2, #4
     952:	2103      	movs	r1, #3
     954:	47b0      	blx	r6
    sercomSpiMasterInit(SPI1, 3, 0, 0, 0, 0x00);
     956:	002b      	movs	r3, r5
     958:	002a      	movs	r2, r5
     95a:	0020      	movs	r0, r4
     95c:	9501      	str	r5, [sp, #4]
     95e:	9500      	str	r5, [sp, #0]
     960:	2103      	movs	r1, #3
     962:	47b8      	blx	r7

    sercomClockEnable(USART3, 4, 8);
     964:	2208      	movs	r2, #8
     966:	2104      	movs	r1, #4
     968:	2003      	movs	r0, #3
     96a:	47b0      	blx	r6
    sercomUartInit(USART3,1,0,63858);
     96c:	0021      	movs	r1, r4
     96e:	002a      	movs	r2, r5
     970:	2003      	movs	r0, #3
     972:	4b10      	ldr	r3, [pc, #64]	; (9b4 <init+0x330>)
     974:	4c10      	ldr	r4, [pc, #64]	; (9b8 <init+0x334>)
     976:	47a0      	blx	r4

    TC4Init();
     978:	4b10      	ldr	r3, [pc, #64]	; (9bc <init+0x338>)
     97a:	4798      	blx	r3
    TC5Init();
     97c:	4b10      	ldr	r3, [pc, #64]	; (9c0 <init+0x33c>)
     97e:	4798      	blx	r3
}
     980:	b005      	add	sp, #20
     982:	bdf0      	pop	{r4, r5, r6, r7, pc}
     984:	000001d5 	.word	0x000001d5
     988:	00000d91 	.word	0x00000d91
     98c:	00000e29 	.word	0x00000e29
     990:	00000f29 	.word	0x00000f29
     994:	00000bb1 	.word	0x00000bb1
     998:	000010c9 	.word	0x000010c9
     99c:	e000e100 	.word	0xe000e100
     9a0:	ff00ffff 	.word	0xff00ffff
     9a4:	41004400 	.word	0x41004400
     9a8:	41004435 	.word	0x41004435
     9ac:	00001671 	.word	0x00001671
     9b0:	000016d5 	.word	0x000016d5
     9b4:	0000f972 	.word	0x0000f972
     9b8:	00001739 	.word	0x00001739
     9bc:	00000ff9 	.word	0x00000ff9
     9c0:	00001061 	.word	0x00001061

000009c4 <startUp>:

void startUp(Altimeter *my_altimeter) {
     9c4:	b5f0      	push	{r4, r5, r6, r7, lr}
     9c6:	0005      	movs	r5, r0


    beep(400);
     9c8:	20c8      	movs	r0, #200	; 0xc8

    TC4Init();
    TC5Init();
}

void startUp(Altimeter *my_altimeter) {
     9ca:	4c21      	ldr	r4, [pc, #132]	; (a50 <startUp+0x8c>)


    beep(400);
     9cc:	0040      	lsls	r0, r0, #1

    TC4Init();
    TC5Init();
}

void startUp(Altimeter *my_altimeter) {
     9ce:	44a5      	add	sp, r4


    beep(400);
     9d0:	4c20      	ldr	r4, [pc, #128]	; (a54 <startUp+0x90>)
     9d2:	47a0      	blx	r4

    u32_t startupTime = millis();
     9d4:	4b20      	ldr	r3, [pc, #128]	; (a58 <startUp+0x94>)
     9d6:	4798      	blx	r3

    sampleTick(my_altimeter);
     9d8:	0028      	movs	r0, r5
     9da:	4f20      	ldr	r7, [pc, #128]	; (a5c <startUp+0x98>)
     9dc:	47b8      	blx	r7
    flight(my_altimeter);
     9de:	0028      	movs	r0, r5
     9e0:	4b1f      	ldr	r3, [pc, #124]	; (a60 <startUp+0x9c>)
     9e2:	4798      	blx	r3
//        if (sercom(USART3)->SPI.INTFLAG.bit.RXC == 1) {
//            u8_t data1 = usartDataIn(USART3);
//            if (data1 == 0x41) {

    u8_t pagesToSend = 3;
    volatile u32_t addressToSend = my_altimeter->myFlashMemory.currentAddress;
     9e4:	6feb      	ldr	r3, [r5, #124]	; 0x7c

    usartDataOut(USART3, 'T');
     9e6:	4e1f      	ldr	r6, [pc, #124]	; (a64 <startUp+0xa0>)
     9e8:	2154      	movs	r1, #84	; 0x54
     9ea:	2003      	movs	r0, #3
//        if (sercom(USART3)->SPI.INTFLAG.bit.RXC == 1) {
//            u8_t data1 = usartDataIn(USART3);
//            if (data1 == 0x41) {

    u8_t pagesToSend = 3;
    volatile u32_t addressToSend = my_altimeter->myFlashMemory.currentAddress;
     9ec:	9301      	str	r3, [sp, #4]

    usartDataOut(USART3, 'T');
     9ee:	47b0      	blx	r6
    usartDataOut(USART3, pagesToSend);
     9f0:	2103      	movs	r1, #3
     9f2:	0008      	movs	r0, r1
     9f4:	47b0      	blx	r6
    volatile u8_t data2[255];

    uint8_t dummy_rx;


    AT25SEreadPage(addressToSend, data);
     9f6:	4e1c      	ldr	r6, [pc, #112]	; (a68 <startUp+0xa4>)
     9f8:	9801      	ldr	r0, [sp, #4]
     9fa:	a902      	add	r1, sp, #8
     9fc:	47b0      	blx	r6
    AT25SEreadPage(addressToSend + 0x100, data1);
     9fe:	9801      	ldr	r0, [sp, #4]
     a00:	a942      	add	r1, sp, #264	; 0x108
     a02:	3001      	adds	r0, #1
     a04:	30ff      	adds	r0, #255	; 0xff
     a06:	47b0      	blx	r6
    AT25SEreadPage(addressToSend + 0x200, data2);
     a08:	2380      	movs	r3, #128	; 0x80
     a0a:	9801      	ldr	r0, [sp, #4]
     a0c:	009b      	lsls	r3, r3, #2
     a0e:	a982      	add	r1, sp, #520	; 0x208
     a10:	18c0      	adds	r0, r0, r3
     a12:	47b0      	blx	r6
//    }

    sampleTick(my_altimeter);
    flight(my_altimeter);

    beep(300);
     a14:	2696      	movs	r6, #150	; 0x96
    //              break;
    //          }
    //      }
//    }

    sampleTick(my_altimeter);
     a16:	0028      	movs	r0, r5
    flight(my_altimeter);

    beep(300);
     a18:	0076      	lsls	r6, r6, #1
    //              break;
    //          }
    //      }
//    }

    sampleTick(my_altimeter);
     a1a:	47b8      	blx	r7
    flight(my_altimeter);
     a1c:	4b10      	ldr	r3, [pc, #64]	; (a60 <startUp+0x9c>)
     a1e:	0028      	movs	r0, r5
     a20:	4798      	blx	r3

    beep(300);
     a22:	0030      	movs	r0, r6
     a24:	47a0      	blx	r4
    delay_ms(80);
     a26:	4d11      	ldr	r5, [pc, #68]	; (a6c <startUp+0xa8>)
     a28:	2050      	movs	r0, #80	; 0x50
     a2a:	47a8      	blx	r5
    beep(300);
     a2c:	0030      	movs	r0, r6
     a2e:	47a0      	blx	r4
    delay_ms(250);
     a30:	20fa      	movs	r0, #250	; 0xfa
     a32:	47a8      	blx	r5
    beep(300);
     a34:	0030      	movs	r0, r6
     a36:	47a0      	blx	r4
    delay_ms(80);
     a38:	2050      	movs	r0, #80	; 0x50
     a3a:	47a8      	blx	r5
    beep(300);
     a3c:	0030      	movs	r0, r6
     a3e:	47a0      	blx	r4
    delay_ms(500);
     a40:	20fa      	movs	r0, #250	; 0xfa
     a42:	0040      	lsls	r0, r0, #1
     a44:	47a8      	blx	r5


}
     a46:	23c3      	movs	r3, #195	; 0xc3
     a48:	009b      	lsls	r3, r3, #2
     a4a:	449d      	add	sp, r3
     a4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     a4e:	46c0      	nop			; (mov r8, r8)
     a50:	fffffcf4 	.word	0xfffffcf4
     a54:	00000d55 	.word	0x00000d55
     a58:	00000fc5 	.word	0x00000fc5
     a5c:	000012cd 	.word	0x000012cd
     a60:	00001129 	.word	0x00001129
     a64:	00001795 	.word	0x00001795
     a68:	000002c9 	.word	0x000002c9
     a6c:	00000f79 	.word	0x00000f79

00000a70 <main>:



int main(void) {
     a70:	b5f0      	push	{r4, r5, r6, r7, lr}

    init();

    Altimeter my_altimeter;
    my_altimeter.myFlightState = flightStatrup;
     a72:	2700      	movs	r7, #0

}



int main(void) {
     a74:	4c34      	ldr	r4, [pc, #208]	; (b48 <main+0xd8>)

    init();
     a76:	4b35      	ldr	r3, [pc, #212]	; (b4c <main+0xdc>)

}



int main(void) {
     a78:	44a5      	add	sp, r4

    init();
     a7a:	4798      	blx	r3

    Altimeter my_altimeter;
    my_altimeter.myFlightState = flightStatrup;
     a7c:	ac03      	add	r4, sp, #12
    initMS5803Barometer(&my_altimeter.myBarometer);
     a7e:	4b34      	ldr	r3, [pc, #208]	; (b50 <main+0xe0>)
     a80:	a804      	add	r0, sp, #16
int main(void) {

    init();

    Altimeter my_altimeter;
    my_altimeter.myFlightState = flightStatrup;
     a82:	7027      	strb	r7, [r4, #0]
    initMS5803Barometer(&my_altimeter.myBarometer);
     a84:	4798      	blx	r3
    IMUinit();
     a86:	4b33      	ldr	r3, [pc, #204]	; (b54 <main+0xe4>)
     a88:	4798      	blx	r3

    sampleTick(&my_altimeter);
     a8a:	4e33      	ldr	r6, [pc, #204]	; (b58 <main+0xe8>)
     a8c:	0020      	movs	r0, r4
     a8e:	47b0      	blx	r6

    my_altimeter.myFlashMemory.pageLocation = 0x00;
     a90:	2380      	movs	r3, #128	; 0x80
     a92:	33ff      	adds	r3, #255	; 0xff
     a94:	54e7      	strb	r7, [r4, r3]
    my_altimeter.myFlashMemory.currentAddress = 0x000500;
     a96:	23a0      	movs	r3, #160	; 0xa0
     a98:	00db      	lsls	r3, r3, #3
     a9a:	67e3      	str	r3, [r4, #124]	; 0x7c


    /* this looks for a USART connection	 */
    startUp(&my_altimeter);
     a9c:	0020      	movs	r0, r4
     a9e:	4b2f      	ldr	r3, [pc, #188]	; (b5c <main+0xec>)
     aa0:	4798      	blx	r3

    volatile u8_t byte1 = my_altimeter.myFlashMemory.currentAddress >> 0;
     aa2:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
     aa4:	aa02      	add	r2, sp, #8
     aa6:	b2d9      	uxtb	r1, r3
     aa8:	7051      	strb	r1, [r2, #1]
    volatile u8_t byte2 = my_altimeter.myFlashMemory.currentAddress >> 8;
     aaa:	0a1a      	lsrs	r2, r3, #8
     aac:	a902      	add	r1, sp, #8
     aae:	b2d2      	uxtb	r2, r2
    volatile u8_t byte3 = my_altimeter.myFlashMemory.currentAddress >> 16;
     ab0:	0c1b      	lsrs	r3, r3, #16

    /* this looks for a USART connection	 */
    startUp(&my_altimeter);

    volatile u8_t byte1 = my_altimeter.myFlashMemory.currentAddress >> 0;
    volatile u8_t byte2 = my_altimeter.myFlashMemory.currentAddress >> 8;
     ab2:	708a      	strb	r2, [r1, #2]
    volatile u8_t byte3 = my_altimeter.myFlashMemory.currentAddress >> 16;
     ab4:	b2db      	uxtb	r3, r3
     ab6:	aa02      	add	r2, sp, #8
     ab8:	70d3      	strb	r3, [r2, #3]




    AT25SFErace4KBlock(0x000000);
     aba:	0038      	movs	r0, r7
     abc:	4b28      	ldr	r3, [pc, #160]	; (b60 <main+0xf0>)
     abe:	4798      	blx	r3

    //logSensors(&my_altimeter);
    delay_ms(5);
     ac0:	2005      	movs	r0, #5
     ac2:	4d28      	ldr	r5, [pc, #160]	; (b64 <main+0xf4>)
     ac4:	47a8      	blx	r5
     ac6:	9601      	str	r6, [sp, #4]
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
}


inline static void pinToggle(Pin p) {
    PORT->Group[p.group].OUTTGL.reg = (1<<p.pin);
     ac8:	2680      	movs	r6, #128	; 0x80

    u8_t pagesWritten = 0;
     aca:	9700      	str	r7, [sp, #0]
     acc:	0376      	lsls	r6, r6, #13



    while (1) {

        if (takeSample) {
     ace:	4f26      	ldr	r7, [pc, #152]	; (b68 <main+0xf8>)
     ad0:	783b      	ldrb	r3, [r7, #0]
     ad2:	2b00      	cmp	r3, #0
     ad4:	d007      	beq.n	ae6 <main+0x76>
            sampleTick(&my_altimeter);
     ad6:	0020      	movs	r0, r4
     ad8:	9b01      	ldr	r3, [sp, #4]
     ada:	4798      	blx	r3
            flight(&my_altimeter);
     adc:	4b23      	ldr	r3, [pc, #140]	; (b6c <main+0xfc>)
     ade:	0020      	movs	r0, r4
     ae0:	4798      	blx	r3
            takeSample = false;
     ae2:	2300      	movs	r3, #0
     ae4:	703b      	strb	r3, [r7, #0]

        }


        if (writeLog) {
     ae6:	4b22      	ldr	r3, [pc, #136]	; (b70 <main+0x100>)
     ae8:	781a      	ldrb	r2, [r3, #0]
     aea:	2a00      	cmp	r2, #0
     aec:	d0ef      	beq.n	ace <main+0x5e>
            writeLog = false;
     aee:	2200      	movs	r2, #0
     af0:	701a      	strb	r2, [r3, #0]

            if (my_altimeter.myFlashMemory.pageReady) {
     af2:	4b20      	ldr	r3, [pc, #128]	; (b74 <main+0x104>)
     af4:	5ce2      	ldrb	r2, [r4, r3]
     af6:	2a00      	cmp	r2, #0
     af8:	d022      	beq.n	b40 <main+0xd0>
                my_altimeter.myFlashMemory.pageReady = false;
     afa:	2200      	movs	r2, #0
     afc:	4f1e      	ldr	r7, [pc, #120]	; (b78 <main+0x108>)
     afe:	54e2      	strb	r2, [r4, r3]

                pinToggle(LedPin);
                delay_ms(80);
     b00:	2050      	movs	r0, #80	; 0x50
     b02:	61fe      	str	r6, [r7, #28]
     b04:	47a8      	blx	r5
     b06:	61fe      	str	r6, [r7, #28]
                pinToggle(LedPin);

                if (pagesWritten <= 0) {
     b08:	9b00      	ldr	r3, [sp, #0]
     b0a:	2b00      	cmp	r3, #0
     b0c:	d106      	bne.n	b1c <main+0xac>
                    u8_t bytesWritten = AT25SEWritePage(my_altimeter.myFlashMemory.currentAddress,my_altimeter.myFlashMemory.pageToWrite);
     b0e:	4b1b      	ldr	r3, [pc, #108]	; (b7c <main+0x10c>)
     b10:	a923      	add	r1, sp, #140	; 0x8c
     b12:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
     b14:	4798      	blx	r3
                    pagesWritten++;
     b16:	2301      	movs	r3, #1
     b18:	9300      	str	r3, [sp, #0]
     b1a:	e00d      	b.n	b38 <main+0xc8>

                } else {
                    // u8_t bytesWritten = AT25SEWritePage(my_altimeter.myFlashMemory.currentAddress,0xFF);
                    delay_ms(80);
     b1c:	2050      	movs	r0, #80	; 0x50
     b1e:	47a8      	blx	r5
                    pinToggle(LedPin);
                    delay_ms(80);
     b20:	2050      	movs	r0, #80	; 0x50
     b22:	61fe      	str	r6, [r7, #28]
     b24:	47a8      	blx	r5
                    pinToggle(LedPin);
                    delay_ms(80);
     b26:	2050      	movs	r0, #80	; 0x50
     b28:	61fe      	str	r6, [r7, #28]
     b2a:	47a8      	blx	r5
                    pinToggle(LedPin);
                    delay_ms(80);
     b2c:	2050      	movs	r0, #80	; 0x50
     b2e:	61fe      	str	r6, [r7, #28]
     b30:	47a8      	blx	r5
     b32:	61fe      	str	r6, [r7, #28]
                    pinToggle(LedPin);
                    delay_ms(80);
     b34:	2050      	movs	r0, #80	; 0x50
     b36:	47a8      	blx	r5

                }

                my_altimeter.myFlashMemory.currentAddress = my_altimeter.myFlashMemory.currentAddress + 0x100;
     b38:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
     b3a:	3301      	adds	r3, #1
     b3c:	33ff      	adds	r3, #255	; 0xff
     b3e:	67e3      	str	r3, [r4, #124]	; 0x7c

            }


            logSensors(&my_altimeter);
     b40:	0020      	movs	r0, r4
     b42:	4b0f      	ldr	r3, [pc, #60]	; (b80 <main+0x110>)
     b44:	4798      	blx	r3
     b46:	e7c2      	b.n	ace <main+0x5e>
     b48:	fffffd5c 	.word	0xfffffd5c
     b4c:	00000685 	.word	0x00000685
     b50:	000005f5 	.word	0x000005f5
     b54:	00000b85 	.word	0x00000b85
     b58:	000012cd 	.word	0x000012cd
     b5c:	000009c5 	.word	0x000009c5
     b60:	000001e5 	.word	0x000001e5
     b64:	00000f79 	.word	0x00000f79
     b68:	20000463 	.word	0x20000463
     b6c:	00001129 	.word	0x00001129
     b70:	20000461 	.word	0x20000461
     b74:	0000027f 	.word	0x0000027f
     b78:	41004400 	.word	0x41004400
     b7c:	00000245 	.word	0x00000245
     b80:	000011c5 	.word	0x000011c5

00000b84 <IMUinit>:
#include <util.h>
#include <boardDefines.h>


void IMUinit() {
     b84:	b570      	push	{r4, r5, r6, lr}
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     b86:	4c08      	ldr	r4, [pc, #32]	; (ba8 <IMUinit+0x24>)
     b88:	2580      	movs	r5, #128	; 0x80
     b8a:	0023      	movs	r3, r4
     b8c:	00ed      	lsls	r5, r5, #3
     b8e:	3394      	adds	r3, #148	; 0x94
     b90:	601d      	str	r5, [r3, #0]

    uint8_t dummy_Tx = 0xFF;
    uint8_t dummy_rx;

    pinLow(cs_accel);
    dummy_rx = spiDataTransfer(SPI0, BMI_ACCEL_PMU_RANGE);
     b92:	4e06      	ldr	r6, [pc, #24]	; (bac <IMUinit+0x28>)
     b94:	210f      	movs	r1, #15
     b96:	2000      	movs	r0, #0
     b98:	47b0      	blx	r6
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     b9a:	3498      	adds	r4, #152	; 0x98
    dummy_rx = spiDataTransfer(SPI0, BMI_ACCEL_16G_RANGE);
     b9c:	210c      	movs	r1, #12
     b9e:	2000      	movs	r0, #0
     ba0:	47b0      	blx	r6
     ba2:	6025      	str	r5, [r4, #0]
    pinHigh(cs_accel);

}
     ba4:	bd70      	pop	{r4, r5, r6, pc}
     ba6:	46c0      	nop			; (mov r8, r8)
     ba8:	41004400 	.word	0x41004400
     bac:	0000177d 	.word	0x0000177d

00000bb0 <adcInit>:
#include <util.h>

void adcInit() {

    // set up clock
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;
     bb0:	2180      	movs	r1, #128	; 0x80


#include <util.h>

void adcInit() {
     bb2:	b510      	push	{r4, lr}

    // set up clock
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;
     bb4:	4a10      	ldr	r2, [pc, #64]	; (bf8 <adcInit+0x48>)
     bb6:	0249      	lsls	r1, r1, #9
     bb8:	6a13      	ldr	r3, [r2, #32]
    // divide prescaler by 512 (93.75KHz), max adc freq is 2.1MHz
    ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |
                     ADC_CTRLB_RESSEL_12BIT;

    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
     bba:	4810      	ldr	r0, [pc, #64]	; (bfc <adcInit+0x4c>)
#include <util.h>

void adcInit() {

    // set up clock
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;
     bbc:	430b      	orrs	r3, r1
     bbe:	6213      	str	r3, [r2, #32]

    // divide prescaler by 512 (93.75KHz), max adc freq is 2.1MHz
    ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |
     bc0:	23e0      	movs	r3, #224	; 0xe0
     bc2:	490f      	ldr	r1, [pc, #60]	; (c00 <adcInit+0x50>)
                     ADC_CTRLB_RESSEL_12BIT;

    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
     bc4:	4a0f      	ldr	r2, [pc, #60]	; (c04 <adcInit+0x54>)

    // set up clock
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;

    // divide prescaler by 512 (93.75KHz), max adc freq is 2.1MHz
    ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |
     bc6:	00db      	lsls	r3, r3, #3
     bc8:	808b      	strh	r3, [r1, #4]
                     ADC_CTRLB_RESSEL_12BIT;

    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
     bca:	8050      	strh	r0, [r2, #2]
                        GCLK_CLKCTRL_GEN(0) |
                        GCLK_CLKCTRL_ID(ADC_GCLK_ID);

    ADC->CALIB.reg =
        ADC_CALIB_BIAS_CAL(
     bcc:	4a0e      	ldr	r2, [pc, #56]	; (c08 <adcInit+0x58>)
    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(0) |
                        GCLK_CLKCTRL_ID(ADC_GCLK_ID);

    ADC->CALIB.reg =
     bce:	6812      	ldr	r2, [r2, #0]
     bd0:	0150      	lsls	r0, r2, #5
     bd2:	4018      	ands	r0, r3
     bd4:	4b0d      	ldr	r3, [pc, #52]	; (c0c <adcInit+0x5c>)
     bd6:	0154      	lsls	r4, r2, #5
     bd8:	681a      	ldr	r2, [r3, #0]
     bda:	0ed3      	lsrs	r3, r2, #27
     bdc:	4323      	orrs	r3, r4
     bde:	b2da      	uxtb	r2, r3
     be0:	0003      	movs	r3, r0
     be2:	4313      	orrs	r3, r2
     be4:	850b      	strh	r3, [r1, #40]	; 0x28
        ) |
        ADC_CALIB_LINEARITY_CAL(
            (*(uint64_t *)ADC_FUSES_LINEARITY_0_ADDR >> ADC_FUSES_LINEARITY_0_Pos)
        );

    ADC->REFCTRL.reg = ADC_REFCTRL_REFSEL_INTVCC1;
     be6:	2302      	movs	r3, #2
     be8:	704b      	strb	r3, [r1, #1]

    ADC->CTRLA.reg = ADC_CTRLA_ENABLE; // enable
     bea:	700b      	strb	r3, [r1, #0]
    while(ADC->STATUS.reg & ADC_STATUS_SYNCBUSY);
     bec:	7e4b      	ldrb	r3, [r1, #25]
     bee:	b25b      	sxtb	r3, r3
     bf0:	2b00      	cmp	r3, #0
     bf2:	dbfb      	blt.n	bec <adcInit+0x3c>
}
     bf4:	bd10      	pop	{r4, pc}
     bf6:	46c0      	nop			; (mov r8, r8)
     bf8:	40000400 	.word	0x40000400
     bfc:	0000401e 	.word	0x0000401e
     c00:	42004000 	.word	0x42004000
     c04:	40000c00 	.word	0x40000c00
     c08:	00806024 	.word	0x00806024
     c0c:	00806020 	.word	0x00806020

00000c10 <adcSample>:



u16_t adcSample() {
    ADC->SWTRIG.reg = ADC_SWTRIG_START;
     c10:	2202      	movs	r2, #2
     c12:	4b05      	ldr	r3, [pc, #20]	; (c28 <adcSample+0x18>)
     c14:	731a      	strb	r2, [r3, #12]
    while(!(ADC->INTFLAG.reg & ADC_INTFLAG_RESRDY)); // wait until result is ready
     c16:	3a01      	subs	r2, #1
     c18:	7e19      	ldrb	r1, [r3, #24]
     c1a:	4211      	tst	r1, r2
     c1c:	d0fc      	beq.n	c18 <adcSample+0x8>
    return ADC->RESULT.reg;
     c1e:	4b02      	ldr	r3, [pc, #8]	; (c28 <adcSample+0x18>)
     c20:	8b58      	ldrh	r0, [r3, #26]
     c22:	b280      	uxth	r0, r0
}
     c24:	4770      	bx	lr
     c26:	46c0      	nop			; (mov r8, r8)
     c28:	42004000 	.word	0x42004000

00000c2c <adc_read>:


u16_t adc_read(Pin p) {
     c2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    u16_t buad;

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
     c2e:	2501      	movs	r5, #1
     c30:	0c02      	lsrs	r2, r0, #16
     c32:	b2d4      	uxtb	r4, r2
     c34:	9000      	str	r0, [sp, #0]
     c36:	0e00      	lsrs	r0, r0, #24
     c38:	9101      	str	r1, [sp, #4]
     c3a:	0842      	lsrs	r2, r0, #1
     c3c:	01e3      	lsls	r3, r4, #7
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     c3e:	4911      	ldr	r1, [pc, #68]	; (c84 <adc_read+0x58>)
     c40:	18d2      	adds	r2, r2, r3
     c42:	1852      	adds	r2, r2, r1
    u16_t buad;

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
     c44:	4228      	tst	r0, r5
     c46:	d005      	beq.n	c54 <adc_read+0x28>
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     c48:	210f      	movs	r1, #15
     c4a:	7814      	ldrb	r4, [r2, #0]
     c4c:	4021      	ands	r1, r4
     c4e:	2410      	movs	r4, #16
     c50:	4321      	orrs	r1, r4
     c52:	e003      	b.n	c5c <adc_read+0x30>
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     c54:	240f      	movs	r4, #15
     c56:	7811      	ldrb	r1, [r2, #0]
     c58:	43a1      	bics	r1, r4
     c5a:	4329      	orrs	r1, r5
     c5c:	7011      	strb	r1, [r2, #0]
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     c5e:	2101      	movs	r1, #1
     c60:	4a09      	ldr	r2, [pc, #36]	; (c88 <adc_read+0x5c>)
     c62:	18c3      	adds	r3, r0, r3
     c64:	189b      	adds	r3, r3, r2
     c66:	781a      	ldrb	r2, [r3, #0]
     c68:	430a      	orrs	r2, r1
     c6a:	701a      	strb	r2, [r3, #0]
    // switch pin mux to analog in
    pinAnalog(p);

    ADC->INPUTCTRL.reg = (ADC_INPUTCTRL_MUXPOS(p.chan) // select from proper pin
                          | ADC_INPUTCTRL_MUXNEG_GND // 0 = gnd
                          | ADC_INPUTCTRL_GAIN_1X);
     c6c:	466b      	mov	r3, sp
     c6e:	791a      	ldrb	r2, [r3, #4]
     c70:	231f      	movs	r3, #31
     c72:	4013      	ands	r3, r2
     c74:	22c0      	movs	r2, #192	; 0xc0
     c76:	0152      	lsls	r2, r2, #5
     c78:	4313      	orrs	r3, r2

u16_t adc_read(Pin p) {
    // switch pin mux to analog in
    pinAnalog(p);

    ADC->INPUTCTRL.reg = (ADC_INPUTCTRL_MUXPOS(p.chan) // select from proper pin
     c7a:	4a04      	ldr	r2, [pc, #16]	; (c8c <adc_read+0x60>)
     c7c:	6113      	str	r3, [r2, #16]
                          | ADC_INPUTCTRL_MUXNEG_GND // 0 = gnd
                          | ADC_INPUTCTRL_GAIN_1X);

    return adcSample();
     c7e:	4b04      	ldr	r3, [pc, #16]	; (c90 <adc_read+0x64>)
     c80:	4798      	blx	r3
     c82:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
     c84:	41004430 	.word	0x41004430
     c88:	41004440 	.word	0x41004440
     c8c:	42004000 	.word	0x42004000
     c90:	00000c11 	.word	0x00000c11

00000c94 <byteOut>:





void byteOut(Pin SCK_PIN, Pin MOSI_PIN, uint8_t byte) {
     c94:	0c01      	lsrs	r1, r0, #16
     c96:	0c13      	lsrs	r3, r2, #16
     c98:	b5f0      	push	{r4, r5, r6, r7, lr}
     c9a:	b2cd      	uxtb	r5, r1
     c9c:	b2d9      	uxtb	r1, r3
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     c9e:	2301      	movs	r3, #1
     ca0:	001e      	movs	r6, r3
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     ca2:	0e12      	lsrs	r2, r2, #24
     ca4:	4093      	lsls	r3, r2
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     ca6:	0e00      	lsrs	r0, r0, #24
     ca8:	4086      	lsls	r6, r0
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     caa:	001a      	movs	r2, r3
     cac:	2308      	movs	r3, #8
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     cae:	0030      	movs	r0, r6
     cb0:	4e11      	ldr	r6, [pc, #68]	; (cf8 <byteOut+0x64>)
     cb2:	01c9      	lsls	r1, r1, #7
     cb4:	b087      	sub	sp, #28
     cb6:	198f      	adds	r7, r1, r6
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     cb8:	4e10      	ldr	r6, [pc, #64]	; (cfc <byteOut+0x68>)
     cba:	ac0c      	add	r4, sp, #48	; 0x30
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     cbc:	01ed      	lsls	r5, r5, #7
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     cbe:	19ae      	adds	r6, r5, r6
     cc0:	7824      	ldrb	r4, [r4, #0]
     cc2:	9601      	str	r6, [sp, #4]
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     cc4:	4e0c      	ldr	r6, [pc, #48]	; (cf8 <byteOut+0x64>)
     cc6:	46b4      	mov	ip, r6
     cc8:	44ac      	add	ip, r5
     cca:	4666      	mov	r6, ip
     ccc:	6030      	str	r0, [r6, #0]

	for (uint8_t i = 0; i<8; ++i) {
		pinLow(SCK_PIN);
		if (byte & 0x80) {
     cce:	b266      	sxtb	r6, r4
     cd0:	2e00      	cmp	r6, #0
     cd2:	da05      	bge.n	ce0 <byteOut+0x4c>
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     cd4:	4e09      	ldr	r6, [pc, #36]	; (cfc <byteOut+0x68>)
     cd6:	46b4      	mov	ip, r6
     cd8:	448c      	add	ip, r1
     cda:	4666      	mov	r6, ip
     cdc:	6032      	str	r2, [r6, #0]
     cde:	e000      	b.n	ce2 <byteOut+0x4e>
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     ce0:	603a      	str	r2, [r7, #0]
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     ce2:	9e01      	ldr	r6, [sp, #4]
     ce4:	3b01      	subs	r3, #1
			pinHigh(MOSI_PIN);
			} else {
			pinLow(MOSI_PIN);
		}
		pinHigh(SCK_PIN);
		byte <<= 1;
     ce6:	0064      	lsls	r4, r4, #1
     ce8:	b2db      	uxtb	r3, r3
     cea:	6030      	str	r0, [r6, #0]
     cec:	b2e4      	uxtb	r4, r4



void byteOut(Pin SCK_PIN, Pin MOSI_PIN, uint8_t byte) {

	for (uint8_t i = 0; i<8; ++i) {
     cee:	2b00      	cmp	r3, #0
     cf0:	d1e8      	bne.n	cc4 <byteOut+0x30>
			pinLow(MOSI_PIN);
		}
		pinHigh(SCK_PIN);
		byte <<= 1;
	}
}
     cf2:	b007      	add	sp, #28
     cf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
     cf6:	46c0      	nop			; (mov r8, r8)
     cf8:	41004414 	.word	0x41004414
     cfc:	41004418 	.word	0x41004418

00000d00 <byteIn>:

uint8_t byteIn(Pin SCK_PIN, Pin MISO_PIN) {
     d00:	b5f0      	push	{r4, r5, r6, r7, lr}
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     d02:	2501      	movs	r5, #1
     d04:	b085      	sub	sp, #20
     d06:	9103      	str	r1, [sp, #12]
     d08:	0011      	movs	r1, r2
     d0a:	0c06      	lsrs	r6, r0, #16
     d0c:	9301      	str	r3, [sp, #4]
     d0e:	b2f3      	uxtb	r3, r6
     d10:	002e      	movs	r6, r5
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     d12:	0e09      	lsrs	r1, r1, #24
     d14:	0c14      	lsrs	r4, r2, #16
     d16:	9002      	str	r0, [sp, #8]
     d18:	9200      	str	r2, [sp, #0]
     d1a:	408d      	lsls	r5, r1
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     d1c:	0e02      	lsrs	r2, r0, #24
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     d1e:	2108      	movs	r1, #8
	uint8_t byte = 0x00;
     d20:	2000      	movs	r0, #0
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     d22:	4096      	lsls	r6, r2
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     d24:	b2e2      	uxtb	r2, r4
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     d26:	4c0a      	ldr	r4, [pc, #40]	; (d50 <byteIn+0x50>)
     d28:	01db      	lsls	r3, r3, #7
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     d2a:	01d2      	lsls	r2, r2, #7
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     d2c:	191b      	adds	r3, r3, r4
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     d2e:	1912      	adds	r2, r2, r4
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     d30:	615e      	str	r6, [r3, #20]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     d32:	6a14      	ldr	r4, [r2, #32]

	for (uint8_t i = 0; i<8; ++i) {
		pinLow(SCK_PIN);
		byte = (byte << 1 ) | pinRead(MISO_PIN);
     d34:	0040      	lsls	r0, r0, #1
     d36:	402c      	ands	r4, r5
     d38:	1e67      	subs	r7, r4, #1
     d3a:	41bc      	sbcs	r4, r7
     d3c:	3901      	subs	r1, #1
     d3e:	4304      	orrs	r4, r0
     d40:	b2c9      	uxtb	r1, r1
     d42:	b2e0      	uxtb	r0, r4
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     d44:	619e      	str	r6, [r3, #24]
}

uint8_t byteIn(Pin SCK_PIN, Pin MISO_PIN) {
	uint8_t byte = 0x00;

	for (uint8_t i = 0; i<8; ++i) {
     d46:	2900      	cmp	r1, #0
     d48:	d1f2      	bne.n	d30 <byteIn+0x30>
		pinLow(SCK_PIN);
		byte = (byte << 1 ) | pinRead(MISO_PIN);
		pinHigh(SCK_PIN);
	}
	return byte;
     d4a:	b005      	add	sp, #20
     d4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     d4e:	46c0      	nop			; (mov r8, r8)
     d50:	41004400 	.word	0x41004400

00000d54 <beep>:
#include <util.h>
#include <boardDefines.h>


void beep(u16_t toggles) {
     d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
}


inline static void pinToggle(Pin p) {
    PORT->Group[p.group].OUTTGL.reg = (1<<p.pin);
     d56:	2380      	movs	r3, #128	; 0x80
     d58:	2780      	movs	r7, #128	; 0x80
     d5a:	0006      	movs	r6, r0

    pinToggle(LedPin);
    for (u16_t buzz = 0; buzz < toggles; ++buzz) {
     d5c:	2500      	movs	r5, #0
     d5e:	4c0a      	ldr	r4, [pc, #40]	; (d88 <beep+0x34>)
     d60:	035b      	lsls	r3, r3, #13
     d62:	61e3      	str	r3, [r4, #28]
     d64:	03bf      	lsls	r7, r7, #14
     d66:	42b5      	cmp	r5, r6
     d68:	d006      	beq.n	d78 <beep+0x24>
     d6a:	61e7      	str	r7, [r4, #28]
        pinToggle(buzzerPin);
        delay_us(122);
     d6c:	207a      	movs	r0, #122	; 0x7a
     d6e:	4b07      	ldr	r3, [pc, #28]	; (d8c <beep+0x38>)


void beep(u16_t toggles) {

    pinToggle(LedPin);
    for (u16_t buzz = 0; buzz < toggles; ++buzz) {
     d70:	3501      	adds	r5, #1
        pinToggle(buzzerPin);
        delay_us(122);
     d72:	4798      	blx	r3


void beep(u16_t toggles) {

    pinToggle(LedPin);
    for (u16_t buzz = 0; buzz < toggles; ++buzz) {
     d74:	b2ad      	uxth	r5, r5
     d76:	e7f6      	b.n	d66 <beep+0x12>
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     d78:	2380      	movs	r3, #128	; 0x80
     d7a:	039b      	lsls	r3, r3, #14
     d7c:	6163      	str	r3, [r4, #20]
}


inline static void pinToggle(Pin p) {
    PORT->Group[p.group].OUTTGL.reg = (1<<p.pin);
     d7e:	2380      	movs	r3, #128	; 0x80
     d80:	035b      	lsls	r3, r3, #13
     d82:	61e3      	str	r3, [r4, #28]
    }
    pinLow(buzzerPin);
    pinToggle(LedPin);


}
     d84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     d86:	46c0      	nop			; (mov r8, r8)
     d88:	41004400 	.word	0x41004400
     d8c:	00000f49 	.word	0x00000f49

00000d90 <GclkInit>:
static uint32_t cycles_per_us = 48000000UL / 1000000;

void GclkInit() {


    SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     d90:	23c2      	movs	r3, #194	; 0xc2
     d92:	4a1a      	ldr	r2, [pc, #104]	; (dfc <GclkInit+0x6c>)
     d94:	00db      	lsls	r3, r3, #3


static uint32_t cycles_per_ms = 48000000UL / 1000;
static uint32_t cycles_per_us = 48000000UL / 1000000;

void GclkInit() {
     d96:	b510      	push	{r4, lr}


    SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     d98:	6093      	str	r3, [r2, #8]
                           SYSCTRL_INTFLAG_DFLLRDY;
    NVMCTRL->CTRLB.reg |= NVMCTRL_CTRLB_RWS_HALF;
     d9a:	2302      	movs	r3, #2
     d9c:	4818      	ldr	r0, [pc, #96]	; (e00 <GclkInit+0x70>)
     d9e:	6841      	ldr	r1, [r0, #4]
     da0:	4319      	orrs	r1, r3
     da2:	6041      	str	r1, [r0, #4]


    // start and enable external 32k crystal
    SYSCTRL->XOSC32K.reg = SYSCTRL_XOSC32K_ENABLE |
     da4:	4917      	ldr	r1, [pc, #92]	; (e04 <GclkInit+0x74>)
     da6:	8291      	strh	r1, [r2, #20]
                           SYSCTRL_XOSC32K_XTALEN |
                           SYSCTRL_XOSC32K_EN32K |
                           ( 6 << SYSCTRL_OSC32K_STARTUP_Pos);

    //wait for crystal to warm up
    while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_XOSC32KRDY)) == 0);
     da8:	68d1      	ldr	r1, [r2, #12]
     daa:	4219      	tst	r1, r3
     dac:	d0fc      	beq.n	da8 <GclkInit+0x18>

#define NVM_DFLL_COARSE_POS    58
#define NVM_DFLL_COARSE_SIZE   6
#define NVM_DFLL_FINE_POS      64
#define NVM_DFLL_FINE_SIZE     10
    uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
     dae:	4b16      	ldr	r3, [pc, #88]	; (e08 <GclkInit+0x78>)
     db0:	6819      	ldr	r1, [r3, #0]
     db2:	0e89      	lsrs	r1, r1, #26
                         + (NVM_DFLL_COARSE_POS / 32))
                       >> (NVM_DFLL_COARSE_POS % 32))
                     & ((1 << NVM_DFLL_COARSE_SIZE) - 1);
    if (coarse == 0x3f) {
     db4:	293f      	cmp	r1, #63	; 0x3f
     db6:	d100      	bne.n	dba <GclkInit+0x2a>
        coarse = 0x1f;
     db8:	3920      	subs	r1, #32
    }
    uint32_t fine =( *((uint32_t *)(NVMCTRL_OTP4)
                       + (NVM_DFLL_FINE_POS / 32))
                     >> (NVM_DFLL_FINE_POS % 32))
     dba:	4b14      	ldr	r3, [pc, #80]	; (e0c <GclkInit+0x7c>)
                   & ((1 << NVM_DFLL_FINE_SIZE) - 1);
    if (fine == 0x3ff) {
     dbc:	4814      	ldr	r0, [pc, #80]	; (e10 <GclkInit+0x80>)
                       >> (NVM_DFLL_COARSE_POS % 32))
                     & ((1 << NVM_DFLL_COARSE_SIZE) - 1);
    if (coarse == 0x3f) {
        coarse = 0x1f;
    }
    uint32_t fine =( *((uint32_t *)(NVMCTRL_OTP4)
     dbe:	681b      	ldr	r3, [r3, #0]
     dc0:	059b      	lsls	r3, r3, #22
     dc2:	0d9b      	lsrs	r3, r3, #22
                       + (NVM_DFLL_FINE_POS / 32))
                     >> (NVM_DFLL_FINE_POS % 32))
                   & ((1 << NVM_DFLL_FINE_SIZE) - 1);
    if (fine == 0x3ff) {
     dc4:	4283      	cmp	r3, r0
     dc6:	d100      	bne.n	dca <GclkInit+0x3a>
        fine = 0x1ff;
     dc8:	4b12      	ldr	r3, [pc, #72]	; (e14 <GclkInit+0x84>)
    }


    // Disable ONDEMAND mode while writing configurations (errata 9905)
    SYSCTRL->DFLLCTRL.reg = dfll_ctrl_usb & ~SYSCTRL_DFLLCTRL_ONDEMAND;
     dca:	4813      	ldr	r0, [pc, #76]	; (e18 <GclkInit+0x88>)
     dcc:	8490      	strh	r0, [r2, #36]	; 0x24
    while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_DFLLRDY)) == 0);
     dce:	2010      	movs	r0, #16
     dd0:	68d4      	ldr	r4, [r2, #12]
     dd2:	4204      	tst	r4, r0
     dd4:	d0fc      	beq.n	dd0 <GclkInit+0x40>
    SYSCTRL->DFLLVAL.reg = SYSCTRL_DFLLVAL_COARSE(coarse) | SYSCTRL_DFLLVAL_FINE(fine);
     dd6:	0289      	lsls	r1, r1, #10
     dd8:	430b      	orrs	r3, r1
     dda:	4908      	ldr	r1, [pc, #32]	; (dfc <GclkInit+0x6c>)
     ddc:	628b      	str	r3, [r1, #40]	; 0x28


    //Wait and see if the DFLL output is good . . .
    while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_DFLLRDY)) == 0);
     dde:	2310      	movs	r3, #16
     de0:	68d1      	ldr	r1, [r2, #12]
     de2:	4219      	tst	r1, r3
     de4:	d0fc      	beq.n	de0 <GclkInit+0x50>


    SYSCTRL->DFLLCTRL.reg = dfll_ctrl_usb;
     de6:	4a0d      	ldr	r2, [pc, #52]	; (e1c <GclkInit+0x8c>)
     de8:	4b04      	ldr	r3, [pc, #16]	; (dfc <GclkInit+0x6c>)
     dea:	849a      	strh	r2, [r3, #36]	; 0x24


    //For generic clock generator 0, select the DFLL48 Clock as input
    GCLK->GENDIV.reg  = (GCLK_GENDIV_DIV(1)  | GCLK_GENDIV_ID(0));
     dec:	2280      	movs	r2, #128	; 0x80
     dee:	4b0c      	ldr	r3, [pc, #48]	; (e20 <GclkInit+0x90>)
     df0:	0052      	lsls	r2, r2, #1
     df2:	609a      	str	r2, [r3, #8]
    GCLK->GENCTRL.reg = (GCLK_GENCTRL_ID(0)  | (GCLK_GENCTRL_SRC_DFLL48M) | (GCLK_GENCTRL_GENEN));
     df4:	4a0b      	ldr	r2, [pc, #44]	; (e24 <GclkInit+0x94>)
     df6:	605a      	str	r2, [r3, #4]
}
     df8:	bd10      	pop	{r4, pc}
     dfa:	46c0      	nop			; (mov r8, r8)
     dfc:	40000800 	.word	0x40000800
     e00:	41004000 	.word	0x41004000
     e04:	0000060e 	.word	0x0000060e
     e08:	00806024 	.word	0x00806024
     e0c:	00806028 	.word	0x00806028
     e10:	000003ff 	.word	0x000003ff
     e14:	000001ff 	.word	0x000001ff
     e18:	00000522 	.word	0x00000522
     e1c:	000005a2 	.word	0x000005a2
     e20:	40000c00 	.word	0x40000c00
     e24:	00010700 	.word	0x00010700

00000e28 <RtcInit>:

void RtcInit() {

    SYSCTRL->OSC32K.reg = SYSCTRL_OSC32K_ENABLE |
     e28:	4b27      	ldr	r3, [pc, #156]	; (ec8 <RtcInit+0xa0>)
     e2a:	4a28      	ldr	r2, [pc, #160]	; (ecc <RtcInit+0xa4>)
                          SYSCTRL_OSC32K_EN32K |
                          ( 6 << SYSCTRL_OSC32K_STARTUP_Pos);


    SYSCTRL->OSC32K.bit.CALIB =
     e2c:	4828      	ldr	r0, [pc, #160]	; (ed0 <RtcInit+0xa8>)
    GCLK->GENCTRL.reg = (GCLK_GENCTRL_ID(0)  | (GCLK_GENCTRL_SRC_DFLL48M) | (GCLK_GENCTRL_GENEN));
}

void RtcInit() {

    SYSCTRL->OSC32K.reg = SYSCTRL_OSC32K_ENABLE |
     e2e:	619a      	str	r2, [r3, #24]
                          SYSCTRL_OSC32K_EN32K |
                          ( 6 << SYSCTRL_OSC32K_STARTUP_Pos);


    SYSCTRL->OSC32K.bit.CALIB =
        ((*(uint32_t *)FUSES_OSC32K_CAL_ADDR >>
     e30:	4a28      	ldr	r2, [pc, #160]	; (ed4 <RtcInit+0xac>)
    SYSCTRL->OSC32K.reg = SYSCTRL_OSC32K_ENABLE |
                          SYSCTRL_OSC32K_EN32K |
                          ( 6 << SYSCTRL_OSC32K_STARTUP_Pos);


    SYSCTRL->OSC32K.bit.CALIB =
     e32:	6999      	ldr	r1, [r3, #24]
     e34:	6812      	ldr	r2, [r2, #0]
     e36:	4001      	ands	r1, r0
     e38:	04d2      	lsls	r2, r2, #19
     e3a:	0e52      	lsrs	r2, r2, #25
     e3c:	0412      	lsls	r2, r2, #16
     e3e:	4311      	orrs	r1, r2
     e40:	6199      	str	r1, [r3, #24]
        ((*(uint32_t *)FUSES_OSC32K_CAL_ADDR >>
          FUSES_OSC32K_CAL_Pos) & 0x7Ful);

    SYSCTRL->OSC32K.reg = SYSCTRL_OSC32K_STARTUP( 0x6u ) | /* cf table 15.10 of product datasheet in chapter 15.8.6 */
     e42:	4925      	ldr	r1, [pc, #148]	; (ed8 <RtcInit+0xb0>)
     e44:	6199      	str	r1, [r3, #24]
                          SYSCTRL_OSC32K_EN32K;
    SYSCTRL->OSC32K.bit.CALIB =
     e46:	6999      	ldr	r1, [r3, #24]
     e48:	4008      	ands	r0, r1
        ((*(uint32_t *)FUSES_OSC32K_CAL_ADDR >>
          FUSES_OSC32K_CAL_Pos) & 0x7Ful);

    SYSCTRL->OSC32K.bit.ENABLE = 1; /* separate call, as described in chapter 15.6.3 */
     e4a:	2102      	movs	r1, #2
        ((*(uint32_t *)FUSES_OSC32K_CAL_ADDR >>
          FUSES_OSC32K_CAL_Pos) & 0x7Ful);

    SYSCTRL->OSC32K.reg = SYSCTRL_OSC32K_STARTUP( 0x6u ) | /* cf table 15.10 of product datasheet in chapter 15.8.6 */
                          SYSCTRL_OSC32K_EN32K;
    SYSCTRL->OSC32K.bit.CALIB =
     e4c:	4302      	orrs	r2, r0
     e4e:	619a      	str	r2, [r3, #24]
        ((*(uint32_t *)FUSES_OSC32K_CAL_ADDR >>
          FUSES_OSC32K_CAL_Pos) & 0x7Ful);

    SYSCTRL->OSC32K.bit.ENABLE = 1; /* separate call, as described in chapter 15.6.3 */
     e50:	699a      	ldr	r2, [r3, #24]
     e52:	430a      	orrs	r2, r1
     e54:	619a      	str	r2, [r3, #24]

    while (  (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_OSC32KRDY) == 0 ) {
     e56:	2204      	movs	r2, #4
     e58:	68d9      	ldr	r1, [r3, #12]
     e5a:	4211      	tst	r1, r2
     e5c:	d0fc      	beq.n	e58 <RtcInit+0x30>





    GCLK->GENDIV.reg = GCLK_GENDIV_ID(2) | GCLK_GENDIV_DIV(1);
     e5e:	2281      	movs	r2, #129	; 0x81
     e60:	4b1e      	ldr	r3, [pc, #120]	; (edc <RtcInit+0xb4>)
     e62:	0052      	lsls	r2, r2, #1
     e64:	609a      	str	r2, [r3, #8]

    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(2) |
     e66:	4a1e      	ldr	r2, [pc, #120]	; (ee0 <RtcInit+0xb8>)
     e68:	605a      	str	r2, [r3, #4]
                        GCLK_GENCTRL_SRC(GCLK_GENCTRL_SRC_XOSC32K) |
                        GCLK_GENCTRL_IDC |
                        GCLK_GENCTRL_RUNSTDBY |
                        GCLK_GENCTRL_GENEN;
    while (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY);
     e6a:	785a      	ldrb	r2, [r3, #1]
     e6c:	b252      	sxtb	r2, r2
     e6e:	2a00      	cmp	r2, #0
     e70:	dbfb      	blt.n	e6a <RtcInit+0x42>

// Configure RTC
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(RTC_GCLK_ID) |
     e72:	4a1c      	ldr	r2, [pc, #112]	; (ee4 <RtcInit+0xbc>)
     e74:	4b19      	ldr	r3, [pc, #100]	; (edc <RtcInit+0xb4>)
     e76:	805a      	strh	r2, [r3, #2]
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    RTC->MODE1.CTRL.reg = RTC_MODE1_CTRL_MODE_COUNT16;
     e78:	2204      	movs	r2, #4
     e7a:	4b1b      	ldr	r3, [pc, #108]	; (ee8 <RtcInit+0xc0>)
     e7c:	801a      	strh	r2, [r3, #0]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     e7e:	7a9a      	ldrb	r2, [r3, #10]
     e80:	4919      	ldr	r1, [pc, #100]	; (ee8 <RtcInit+0xc0>)
     e82:	09d2      	lsrs	r2, r2, #7
     e84:	d1fb      	bne.n	e7e <RtcInit+0x56>

// Prescaler needs to be enabled separately from the mode for some reason
    RTC->MODE1.CTRL.reg |= RTC_MODE1_CTRL_PRESCALER_DIV32;
     e86:	20a0      	movs	r0, #160	; 0xa0
     e88:	880a      	ldrh	r2, [r1, #0]
     e8a:	00c0      	lsls	r0, r0, #3
     e8c:	4302      	orrs	r2, r0
     e8e:	800a      	strh	r2, [r1, #0]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     e90:	7a9a      	ldrb	r2, [r3, #10]
     e92:	09d2      	lsrs	r2, r2, #7
     e94:	d1fc      	bne.n	e90 <RtcInit+0x68>

    RTC->MODE1.PER.reg = 998;
     e96:	4915      	ldr	r1, [pc, #84]	; (eec <RtcInit+0xc4>)
     e98:	4a13      	ldr	r2, [pc, #76]	; (ee8 <RtcInit+0xc0>)
     e9a:	8291      	strh	r1, [r2, #20]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     e9c:	7a99      	ldrb	r1, [r3, #10]
     e9e:	4a12      	ldr	r2, [pc, #72]	; (ee8 <RtcInit+0xc0>)
     ea0:	09c9      	lsrs	r1, r1, #7
     ea2:	d1fb      	bne.n	e9c <RtcInit+0x74>

    RTC->MODE1.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_ADDR(0x10);
     ea4:	8851      	ldrh	r1, [r2, #2]
     ea6:	4812      	ldr	r0, [pc, #72]	; (ef0 <RtcInit+0xc8>)
     ea8:	4301      	orrs	r1, r0
     eaa:	8051      	strh	r1, [r2, #2]

    RTC->MODE1.INTENSET.reg = RTC_MODE1_INTENSET_OVF;
     eac:	2180      	movs	r1, #128	; 0x80

    RTC->MODE1.CTRL.bit.ENABLE = 1;
     eae:	2002      	movs	r0, #2
    RTC->MODE1.PER.reg = 998;
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);

    RTC->MODE1.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_ADDR(0x10);

    RTC->MODE1.INTENSET.reg = RTC_MODE1_INTENSET_OVF;
     eb0:	71d1      	strb	r1, [r2, #7]

    RTC->MODE1.CTRL.bit.ENABLE = 1;
     eb2:	8811      	ldrh	r1, [r2, #0]
     eb4:	4301      	orrs	r1, r0
     eb6:	8011      	strh	r1, [r2, #0]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     eb8:	7a9a      	ldrb	r2, [r3, #10]
     eba:	09d2      	lsrs	r2, r2, #7
     ebc:	d1fc      	bne.n	eb8 <RtcInit+0x90>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     ebe:	4b0d      	ldr	r3, [pc, #52]	; (ef4 <RtcInit+0xcc>)
     ec0:	3208      	adds	r2, #8
     ec2:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(RTC_IRQn);
}
     ec4:	4770      	bx	lr
     ec6:	46c0      	nop			; (mov r8, r8)
     ec8:	40000800 	.word	0x40000800
     ecc:	00000606 	.word	0x00000606
     ed0:	ff80ffff 	.word	0xff80ffff
     ed4:	00806024 	.word	0x00806024
     ed8:	00000604 	.word	0x00000604
     edc:	40000c00 	.word	0x40000c00
     ee0:	00230002 	.word	0x00230002
     ee4:	00004204 	.word	0x00004204
     ee8:	40001400 	.word	0x40001400
     eec:	000003e6 	.word	0x000003e6
     ef0:	00004010 	.word	0x00004010
     ef4:	e000e100 	.word	0xe000e100

00000ef8 <gclkEnable>:


void gclkEnable(u32_t id, u32_t src, u32_t div) {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
     ef8:	230f      	movs	r3, #15
     efa:	4018      	ands	r0, r3
     efc:	4b08      	ldr	r3, [pc, #32]	; (f20 <gclkEnable+0x28>)
     efe:	0212      	lsls	r2, r2, #8
     f00:	401a      	ands	r2, r3
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     f02:	23f8      	movs	r3, #248	; 0xf8
     f04:	0209      	lsls	r1, r1, #8
     f06:	015b      	lsls	r3, r3, #5
     f08:	4019      	ands	r1, r3
     f0a:	2380      	movs	r3, #128	; 0x80

    NVIC_EnableIRQ(RTC_IRQn);
}


void gclkEnable(u32_t id, u32_t src, u32_t div) {
     f0c:	b510      	push	{r4, lr}
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     f0e:	025b      	lsls	r3, r3, #9
    NVIC_EnableIRQ(RTC_IRQn);
}


void gclkEnable(u32_t id, u32_t src, u32_t div) {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
     f10:	4c04      	ldr	r4, [pc, #16]	; (f24 <gclkEnable+0x2c>)
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     f12:	4319      	orrs	r1, r3
    NVIC_EnableIRQ(RTC_IRQn);
}


void gclkEnable(u32_t id, u32_t src, u32_t div) {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
     f14:	4302      	orrs	r2, r0
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     f16:	4308      	orrs	r0, r1
    NVIC_EnableIRQ(RTC_IRQn);
}


void gclkEnable(u32_t id, u32_t src, u32_t div) {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
     f18:	60a2      	str	r2, [r4, #8]
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     f1a:	6060      	str	r0, [r4, #4]
}
     f1c:	bd10      	pop	{r4, pc}
     f1e:	46c0      	nop			; (mov r8, r8)
     f20:	00ffff00 	.word	0x00ffff00
     f24:	40000c00 	.word	0x40000c00

00000f28 <delayInit>:


void delayInit(void) {
    cycles_per_ms = 48000000UL;
    cycles_per_ms /= 1000;
     f28:	4b04      	ldr	r3, [pc, #16]	; (f3c <delayInit+0x14>)
     f2a:	4a05      	ldr	r2, [pc, #20]	; (f40 <delayInit+0x18>)
     f2c:	601a      	str	r2, [r3, #0]
    cycles_per_us = cycles_per_ms / 1000;
     f2e:	2230      	movs	r2, #48	; 0x30
     f30:	605a      	str	r2, [r3, #4]

    SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     f32:	4b04      	ldr	r3, [pc, #16]	; (f44 <delayInit+0x1c>)
     f34:	3a2b      	subs	r2, #43	; 0x2b
     f36:	601a      	str	r2, [r3, #0]
}
     f38:	4770      	bx	lr
     f3a:	46c0      	nop			; (mov r8, r8)
     f3c:	20000004 	.word	0x20000004
     f40:	0000bb80 	.word	0x0000bb80
     f44:	e000e010 	.word	0xe000e010

00000f48 <delay_us>:
/**
 * \brief Delay loop to delay at least n number of microseconds
 *
 * \param n  Number of microseconds to wait
 */
void delay_us(uint32_t n) {
     f48:	b570      	push	{r4, r5, r6, lr}
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
        SysTick->VAL = 0;

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     f4a:	2480      	movs	r4, #128	; 0x80

static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
        SysTick->VAL = 0;
     f4c:	2100      	movs	r1, #0
    while (n--) {
        /* Devide up to blocks of 10u */
        delay_cycles(cycles_per_us);
     f4e:	4b08      	ldr	r3, [pc, #32]	; (f70 <delay_us+0x28>)


static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
     f50:	4a08      	ldr	r2, [pc, #32]	; (f74 <delay_us+0x2c>)
     f52:	685b      	ldr	r3, [r3, #4]
        SysTick->VAL = 0;

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     f54:	0264      	lsls	r4, r4, #9
 * \brief Delay loop to delay at least n number of microseconds
 *
 * \param n  Number of microseconds to wait
 */
void delay_us(uint32_t n) {
    while (n--) {
     f56:	3801      	subs	r0, #1
     f58:	d308      	bcc.n	f6c <delay_us+0x24>



static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
     f5a:	2b00      	cmp	r3, #0
     f5c:	d0fb      	beq.n	f56 <delay_us+0xe>
     f5e:	4e05      	ldr	r6, [pc, #20]	; (f74 <delay_us+0x2c>)
        SysTick->LOAD = n;
     f60:	6053      	str	r3, [r2, #4]
        SysTick->VAL = 0;
     f62:	6091      	str	r1, [r2, #8]

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     f64:	6835      	ldr	r5, [r6, #0]
     f66:	4225      	tst	r5, r4
     f68:	d0fc      	beq.n	f64 <delay_us+0x1c>
     f6a:	e7f4      	b.n	f56 <delay_us+0xe>
        /* Devide up to blocks of 10u */
        delay_cycles(cycles_per_us);
    }
}
     f6c:	bd70      	pop	{r4, r5, r6, pc}
     f6e:	46c0      	nop			; (mov r8, r8)
     f70:	20000004 	.word	0x20000004
     f74:	e000e010 	.word	0xe000e010

00000f78 <delay_ms>:
/**
 * \brief Delay loop to delay at least n number of milliseconds
 *
 * \param n  Number of milliseconds to wait
 */
void delay_ms(uint32_t n) {
     f78:	b570      	push	{r4, r5, r6, lr}
     f7a:	2480      	movs	r4, #128	; 0x80

static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
        SysTick->VAL = 0;
     f7c:	2100      	movs	r1, #0
    while (n--) {
        /* Devide up to blocks of 1ms */
        delay_cycles(cycles_per_ms);
     f7e:	4b08      	ldr	r3, [pc, #32]	; (fa0 <delay_ms+0x28>)


static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
     f80:	4a08      	ldr	r2, [pc, #32]	; (fa4 <delay_ms+0x2c>)
     f82:	681b      	ldr	r3, [r3, #0]
        SysTick->VAL = 0;

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     f84:	0264      	lsls	r4, r4, #9
 * \brief Delay loop to delay at least n number of milliseconds
 *
 * \param n  Number of milliseconds to wait
 */
void delay_ms(uint32_t n) {
    while (n--) {
     f86:	3801      	subs	r0, #1
     f88:	d308      	bcc.n	f9c <delay_ms+0x24>



static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
     f8a:	2b00      	cmp	r3, #0
     f8c:	d0fb      	beq.n	f86 <delay_ms+0xe>
     f8e:	4e05      	ldr	r6, [pc, #20]	; (fa4 <delay_ms+0x2c>)
        SysTick->LOAD = n;
     f90:	6053      	str	r3, [r2, #4]
        SysTick->VAL = 0;
     f92:	6091      	str	r1, [r2, #8]

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     f94:	6835      	ldr	r5, [r6, #0]
     f96:	4225      	tst	r5, r4
     f98:	d0fc      	beq.n	f94 <delay_ms+0x1c>
     f9a:	e7f4      	b.n	f86 <delay_ms+0xe>
        /* Devide up to blocks of 1ms */
        delay_cycles(cycles_per_ms);
    }
}
     f9c:	bd70      	pop	{r4, r5, r6, pc}
     f9e:	46c0      	nop			; (mov r8, r8)
     fa0:	20000004 	.word	0x20000004
     fa4:	e000e010 	.word	0xe000e010

00000fa8 <RTC_Handler>:


volatile uint32_t time_ms = 0;

void RTC_Handler(void) {
    time_ms += 1000;
     fa8:	21fa      	movs	r1, #250	; 0xfa
     faa:	4a04      	ldr	r2, [pc, #16]	; (fbc <RTC_Handler+0x14>)
     fac:	0089      	lsls	r1, r1, #2
     fae:	6813      	ldr	r3, [r2, #0]
     fb0:	185b      	adds	r3, r3, r1
     fb2:	6013      	str	r3, [r2, #0]
    RTC->MODE1.INTFLAG.reg = 0xFF;
     fb4:	22ff      	movs	r2, #255	; 0xff
     fb6:	4b02      	ldr	r3, [pc, #8]	; (fc0 <RTC_Handler+0x18>)
     fb8:	721a      	strb	r2, [r3, #8]
}
     fba:	4770      	bx	lr
     fbc:	2000045c 	.word	0x2000045c
     fc0:	40001400 	.word	0x40001400

00000fc4 <millis>:

uint32_t millis(void) {
     fc4:	b530      	push	{r4, r5, lr}
    uint32_t ms;
    ATOMIC_SECTION_ENTER
     fc6:	f3ef 8110 	mrs	r1, PRIMASK
     fca:	b672      	cpsid	i
    ms = time_ms + RTC->MODE1.COUNT.reg;
     fcc:	4a08      	ldr	r2, [pc, #32]	; (ff0 <millis+0x2c>)
     fce:	4d09      	ldr	r5, [pc, #36]	; (ff4 <millis+0x30>)
     fd0:	8a10      	ldrh	r0, [r2, #16]
     fd2:	682b      	ldr	r3, [r5, #0]
    if (RTC->MODE1.INTFLAG.bit.OVF)
     fd4:	7a14      	ldrb	r4, [r2, #8]
}

uint32_t millis(void) {
    uint32_t ms;
    ATOMIC_SECTION_ENTER
    ms = time_ms + RTC->MODE1.COUNT.reg;
     fd6:	b280      	uxth	r0, r0
    if (RTC->MODE1.INTFLAG.bit.OVF)
     fd8:	09e4      	lsrs	r4, r4, #7
     fda:	d004      	beq.n	fe6 <millis+0x22>
        ms = time_ms + RTC->MODE1.COUNT.reg + 1000;
     fdc:	8a13      	ldrh	r3, [r2, #16]
     fde:	22fa      	movs	r2, #250	; 0xfa
     fe0:	6828      	ldr	r0, [r5, #0]
     fe2:	0092      	lsls	r2, r2, #2
     fe4:	1880      	adds	r0, r0, r2
     fe6:	18c0      	adds	r0, r0, r3
    ATOMIC_SECTION_LEAVE
     fe8:	f381 8810 	msr	PRIMASK, r1
    return ms;
}
     fec:	bd30      	pop	{r4, r5, pc}
     fee:	46c0      	nop			; (mov r8, r8)
     ff0:	40001400 	.word	0x40001400
     ff4:	2000045c 	.word	0x2000045c

00000ff8 <TC4Init>:

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC4_GCLK_ID) |
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC4;
     ff8:	2180      	movs	r1, #128	; 0x80
    return ms;
}

void TC4Init() {

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC4_GCLK_ID) |
     ffa:	4a0d      	ldr	r2, [pc, #52]	; (1030 <TC4Init+0x38>)
     ffc:	4b0d      	ldr	r3, [pc, #52]	; (1034 <TC4Init+0x3c>)
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC4;
     ffe:	0149      	lsls	r1, r1, #5
    return ms;
}

void TC4Init() {

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC4_GCLK_ID) |
    1000:	805a      	strh	r2, [r3, #2]
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC4;
    1002:	4a0d      	ldr	r2, [pc, #52]	; (1038 <TC4Init+0x40>)
    1004:	6a13      	ldr	r3, [r2, #32]
    1006:	430b      	orrs	r3, r1
    1008:	6213      	str	r3, [r2, #32]

    TC4->COUNT8.CTRLA.reg = TC_CTRLA_MODE_COUNT8 |
    100a:	4b0c      	ldr	r3, [pc, #48]	; (103c <TC4Init+0x44>)
    100c:	4a0c      	ldr	r2, [pc, #48]	; (1040 <TC4Init+0x48>)

    TC4->COUNT8.INTENSET.reg = TC_INTENSET_OVF;

    TC4->COUNT8.EVCTRL.reg = TC_EVCTRL_OVFEO;

    TC4->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
    100e:	2102      	movs	r1, #2
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC4;

    TC4->COUNT8.CTRLA.reg = TC_CTRLA_MODE_COUNT8 |
    1010:	801a      	strh	r2, [r3, #0]
                            TC_CTRLA_RUNSTDBY |
                            TC_CTRLA_PRESCALER_DIV2;
    TC4->COUNT8.PER.reg = 0x41;
    1012:	2241      	movs	r2, #65	; 0x41
    1014:	751a      	strb	r2, [r3, #20]

    TC4->COUNT8.INTENSET.reg = TC_INTENSET_OVF;
    1016:	3a40      	subs	r2, #64	; 0x40
    1018:	735a      	strb	r2, [r3, #13]

    TC4->COUNT8.EVCTRL.reg = TC_EVCTRL_OVFEO;
    101a:	32ff      	adds	r2, #255	; 0xff
    101c:	815a      	strh	r2, [r3, #10]

    TC4->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
    101e:	881a      	ldrh	r2, [r3, #0]
    1020:	430a      	orrs	r2, r1
    1022:	801a      	strh	r2, [r3, #0]
    1024:	2280      	movs	r2, #128	; 0x80
    1026:	4b07      	ldr	r3, [pc, #28]	; (1044 <TC4Init+0x4c>)
    1028:	0312      	lsls	r2, r2, #12
    102a:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(TC4_IRQn);
}
    102c:	4770      	bx	lr
    102e:	46c0      	nop			; (mov r8, r8)
    1030:	0000421c 	.word	0x0000421c
    1034:	40000c00 	.word	0x40000c00
    1038:	40000400 	.word	0x40000400
    103c:	42003000 	.word	0x42003000
    1040:	00000904 	.word	0x00000904
    1044:	e000e100 	.word	0xe000e100

00001048 <TC4_Handler>:

void TC4_Handler( void ) {
    TC4->COUNT8.INTFLAG.reg = 0xFF;
    1048:	22ff      	movs	r2, #255	; 0xff
    104a:	4b03      	ldr	r3, [pc, #12]	; (1058 <TC4_Handler+0x10>)
    104c:	739a      	strb	r2, [r3, #14]
    takeSample = true;
    104e:	4b03      	ldr	r3, [pc, #12]	; (105c <TC4_Handler+0x14>)
    1050:	3afe      	subs	r2, #254	; 0xfe
    1052:	701a      	strb	r2, [r3, #0]
}
    1054:	4770      	bx	lr
    1056:	46c0      	nop			; (mov r8, r8)
    1058:	42003000 	.word	0x42003000
    105c:	20000463 	.word	0x20000463

00001060 <TC5Init>:

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC5_GCLK_ID) |
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC5;
    1060:	2180      	movs	r1, #128	; 0x80
    takeSample = true;
}

void TC5Init() {

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC5_GCLK_ID) |
    1062:	4a0d      	ldr	r2, [pc, #52]	; (1098 <TC5Init+0x38>)
    1064:	4b0d      	ldr	r3, [pc, #52]	; (109c <TC5Init+0x3c>)
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC5;
    1066:	0189      	lsls	r1, r1, #6
    takeSample = true;
}

void TC5Init() {

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC5_GCLK_ID) |
    1068:	805a      	strh	r2, [r3, #2]
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC5;
    106a:	4a0d      	ldr	r2, [pc, #52]	; (10a0 <TC5Init+0x40>)
    106c:	6a13      	ldr	r3, [r2, #32]
    106e:	430b      	orrs	r3, r1
    1070:	6213      	str	r3, [r2, #32]

    TC5->COUNT8.CTRLA.reg = TC_CTRLA_MODE_COUNT8 |
    1072:	4b0c      	ldr	r3, [pc, #48]	; (10a4 <TC5Init+0x44>)
    1074:	4a0c      	ldr	r2, [pc, #48]	; (10a8 <TC5Init+0x48>)

    TC5->COUNT8.INTENSET.reg = TC_INTENSET_OVF;

    TC5->COUNT8.EVCTRL.reg = TC_EVCTRL_OVFEO;

    TC5->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
    1076:	2102      	movs	r1, #2
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC5;

    TC5->COUNT8.CTRLA.reg = TC_CTRLA_MODE_COUNT8 |
    1078:	801a      	strh	r2, [r3, #0]
                            TC_CTRLA_RUNSTDBY |
                            TC_CTRLA_PRESCALER_DIV256;
							
    TC5->COUNT8.PER.reg = 0x20;
    107a:	2220      	movs	r2, #32
    107c:	751a      	strb	r2, [r3, #20]

    TC5->COUNT8.INTENSET.reg = TC_INTENSET_OVF;
    107e:	3a1f      	subs	r2, #31
    1080:	735a      	strb	r2, [r3, #13]

    TC5->COUNT8.EVCTRL.reg = TC_EVCTRL_OVFEO;
    1082:	32ff      	adds	r2, #255	; 0xff
    1084:	815a      	strh	r2, [r3, #10]

    TC5->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
    1086:	881a      	ldrh	r2, [r3, #0]
    1088:	430a      	orrs	r2, r1
    108a:	801a      	strh	r2, [r3, #0]
    108c:	2280      	movs	r2, #128	; 0x80
    108e:	4b07      	ldr	r3, [pc, #28]	; (10ac <TC5Init+0x4c>)
    1090:	0352      	lsls	r2, r2, #13
    1092:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(TC5_IRQn);
}
    1094:	4770      	bx	lr
    1096:	46c0      	nop			; (mov r8, r8)
    1098:	0000421c 	.word	0x0000421c
    109c:	40000c00 	.word	0x40000c00
    10a0:	40000400 	.word	0x40000400
    10a4:	42003400 	.word	0x42003400
    10a8:	00000e04 	.word	0x00000e04
    10ac:	e000e100 	.word	0xe000e100

000010b0 <TC5_Handler>:

void TC5_Handler( void ) {
    TC5->COUNT8.INTFLAG.reg = 0xFF;
    10b0:	22ff      	movs	r2, #255	; 0xff
    10b2:	4b03      	ldr	r3, [pc, #12]	; (10c0 <TC5_Handler+0x10>)
    10b4:	739a      	strb	r2, [r3, #14]
    writeLog = true;
    10b6:	4b03      	ldr	r3, [pc, #12]	; (10c4 <TC5_Handler+0x14>)
    10b8:	3afe      	subs	r2, #254	; 0xfe
    10ba:	701a      	strb	r2, [r3, #0]
    10bc:	4770      	bx	lr
    10be:	46c0      	nop			; (mov r8, r8)
    10c0:	42003400 	.word	0x42003400
    10c4:	20000461 	.word	0x20000461

000010c8 <dmaInit>:
#include <util.h>

DMA_DESC_ALIGN DmacDescriptor dma_descriptors[12];
DMA_DESC_ALIGN DmacDescriptor dma_descriptors_wb[12];

void dmaInit() {
    10c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	memset(&dma_descriptors, 0, sizeof(dma_descriptors));
    10ca:	27c0      	movs	r7, #192	; 0xc0
    10cc:	4d10      	ldr	r5, [pc, #64]	; (1110 <dmaInit+0x48>)
    10ce:	003a      	movs	r2, r7
    10d0:	4e10      	ldr	r6, [pc, #64]	; (1114 <dmaInit+0x4c>)
    10d2:	0028      	movs	r0, r5
    10d4:	2100      	movs	r1, #0
    10d6:	47b0      	blx	r6
	memset(&dma_descriptors_wb, 0, sizeof(dma_descriptors_wb));
    10d8:	4c0f      	ldr	r4, [pc, #60]	; (1118 <dmaInit+0x50>)
    10da:	003a      	movs	r2, r7
    10dc:	2100      	movs	r1, #0
    10de:	0020      	movs	r0, r4
    10e0:	47b0      	blx	r6

	PM->AHBMASK.reg |= PM_AHBMASK_DMAC;
    10e2:	2120      	movs	r1, #32
    10e4:	4b0d      	ldr	r3, [pc, #52]	; (111c <dmaInit+0x54>)
    10e6:	695a      	ldr	r2, [r3, #20]
    10e8:	430a      	orrs	r2, r1
    10ea:	615a      	str	r2, [r3, #20]
	PM->APBBMASK.reg |= PM_APBBMASK_DMAC;
    10ec:	69da      	ldr	r2, [r3, #28]
    10ee:	3910      	subs	r1, #16
    10f0:	430a      	orrs	r2, r1
    10f2:	61da      	str	r2, [r3, #28]

	DMAC->CTRL.bit.DMAENABLE = 0;
    10f4:	4b0a      	ldr	r3, [pc, #40]	; (1120 <dmaInit+0x58>)
    10f6:	390e      	subs	r1, #14
    10f8:	881a      	ldrh	r2, [r3, #0]
    10fa:	438a      	bics	r2, r1
    10fc:	801a      	strh	r2, [r3, #0]
	DMAC->CTRL.bit.SWRST = 1;
    10fe:	881a      	ldrh	r2, [r3, #0]
    1100:	3901      	subs	r1, #1
    1102:	430a      	orrs	r2, r1
    1104:	801a      	strh	r2, [r3, #0]

	DMAC->BASEADDR.reg = (unsigned) &dma_descriptors;
	DMAC->WRBADDR.reg = (unsigned) &dma_descriptors_wb;

	DMAC->CTRL.reg = DMAC_CTRL_DMAENABLE | DMAC_CTRL_LVLEN(0xf);
    1106:	4a07      	ldr	r2, [pc, #28]	; (1124 <dmaInit+0x5c>)
	PM->APBBMASK.reg |= PM_APBBMASK_DMAC;

	DMAC->CTRL.bit.DMAENABLE = 0;
	DMAC->CTRL.bit.SWRST = 1;

	DMAC->BASEADDR.reg = (unsigned) &dma_descriptors;
    1108:	635d      	str	r5, [r3, #52]	; 0x34
	DMAC->WRBADDR.reg = (unsigned) &dma_descriptors_wb;
    110a:	639c      	str	r4, [r3, #56]	; 0x38

	DMAC->CTRL.reg = DMAC_CTRL_DMAENABLE | DMAC_CTRL_LVLEN(0xf);
    110c:	801a      	strh	r2, [r3, #0]
}
    110e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1110:	20000530 	.word	0x20000530
    1114:	00002689 	.word	0x00002689
    1118:	20000470 	.word	0x20000470
    111c:	40000400 	.word	0x40000400
    1120:	41004800 	.word	0x41004800
    1124:	00000f02 	.word	0x00000f02

00001128 <flight>:
#include <util.h>
#include <boardDefines.h>



void flight(Altimeter *my_altimeter) {
    1128:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}



    switch(my_altimeter->myFlightState) {
    112a:	7803      	ldrb	r3, [r0, #0]
#include <util.h>
#include <boardDefines.h>



void flight(Altimeter *my_altimeter) {
    112c:	0004      	movs	r4, r0



    switch(my_altimeter->myFlightState) {
    112e:	2b00      	cmp	r3, #0
    1130:	d13b      	bne.n	11aa <flight+0x82>
    case flightStatrup:

        my_altimeter->myIMU.gravityOffsetBuffer = 	my_altimeter->myIMU.gravityOffsetBuffer*0.5 + my_altimeter->myIMU.accelZ*0.5;
    1132:	4d1e      	ldr	r5, [pc, #120]	; (11ac <flight+0x84>)
    1134:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
    1136:	47a8      	blx	r5
    1138:	4e1d      	ldr	r6, [pc, #116]	; (11b0 <flight+0x88>)
    113a:	2200      	movs	r2, #0
    113c:	4b1d      	ldr	r3, [pc, #116]	; (11b4 <flight+0x8c>)
    113e:	47b0      	blx	r6
    1140:	9000      	str	r0, [sp, #0]
    1142:	9101      	str	r1, [sp, #4]
    1144:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
    1146:	47a8      	blx	r5
    1148:	2200      	movs	r2, #0
    114a:	4b1a      	ldr	r3, [pc, #104]	; (11b4 <flight+0x8c>)
    114c:	47b0      	blx	r6
    114e:	4e1a      	ldr	r6, [pc, #104]	; (11b8 <flight+0x90>)
    1150:	0002      	movs	r2, r0
    1152:	000b      	movs	r3, r1
    1154:	9800      	ldr	r0, [sp, #0]
    1156:	9901      	ldr	r1, [sp, #4]
    1158:	47b0      	blx	r6
    115a:	4b18      	ldr	r3, [pc, #96]	; (11bc <flight+0x94>)
    115c:	4798      	blx	r3
    115e:	63e0      	str	r0, [r4, #60]	; 0x3c

        my_altimeter->myBarometer.groundOffsetBuffer = my_altimeter->myBarometer.groundOffsetBuffer*0.5 + my_altimeter->myBarometer.heightFeet*0.5;
    1160:	6b20      	ldr	r0, [r4, #48]	; 0x30
    1162:	47a8      	blx	r5
    1164:	2200      	movs	r2, #0
    1166:	4b13      	ldr	r3, [pc, #76]	; (11b4 <flight+0x8c>)
    1168:	4e11      	ldr	r6, [pc, #68]	; (11b0 <flight+0x88>)
    116a:	47b0      	blx	r6
    116c:	0006      	movs	r6, r0
    116e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    1170:	000f      	movs	r7, r1
    1172:	47a8      	blx	r5
    1174:	4d0e      	ldr	r5, [pc, #56]	; (11b0 <flight+0x88>)
    1176:	2200      	movs	r2, #0
    1178:	4b0e      	ldr	r3, [pc, #56]	; (11b4 <flight+0x8c>)
    117a:	47a8      	blx	r5
    117c:	4d0e      	ldr	r5, [pc, #56]	; (11b8 <flight+0x90>)
    117e:	0002      	movs	r2, r0
    1180:	000b      	movs	r3, r1
    1182:	0030      	movs	r0, r6
    1184:	0039      	movs	r1, r7
    1186:	47a8      	blx	r5
    1188:	4b0c      	ldr	r3, [pc, #48]	; (11bc <flight+0x94>)
    118a:	4798      	blx	r3

        if ((millis() - my_altimeter->myIMU.offsetBufferTime) > 2000) {
    118c:	4d0c      	ldr	r5, [pc, #48]	; (11c0 <flight+0x98>)
    switch(my_altimeter->myFlightState) {
    case flightStatrup:

        my_altimeter->myIMU.gravityOffsetBuffer = 	my_altimeter->myIMU.gravityOffsetBuffer*0.5 + my_altimeter->myIMU.accelZ*0.5;

        my_altimeter->myBarometer.groundOffsetBuffer = my_altimeter->myBarometer.groundOffsetBuffer*0.5 + my_altimeter->myBarometer.heightFeet*0.5;
    118e:	6320      	str	r0, [r4, #48]	; 0x30

        if ((millis() - my_altimeter->myIMU.offsetBufferTime) > 2000) {
    1190:	47a8      	blx	r5
    1192:	6b63      	ldr	r3, [r4, #52]	; 0x34
    1194:	1ac0      	subs	r0, r0, r3
    1196:	23fa      	movs	r3, #250	; 0xfa
    1198:	00db      	lsls	r3, r3, #3
    119a:	4298      	cmp	r0, r3
    119c:	d905      	bls.n	11aa <flight+0x82>
            //recursive filter
            my_altimeter->myBarometer.groundOffset = my_altimeter->myBarometer.groundOffsetBuffer;
    119e:	6b23      	ldr	r3, [r4, #48]	; 0x30
    11a0:	62e3      	str	r3, [r4, #44]	; 0x2c
            my_altimeter->myIMU.gravityOffset = my_altimeter->myIMU.gravityOffsetBuffer;
    11a2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    11a4:	63a3      	str	r3, [r4, #56]	; 0x38
            my_altimeter->myIMU.offsetBufferTime = millis();
    11a6:	47a8      	blx	r5
    11a8:	6360      	str	r0, [r4, #52]	; 0x34

        break;
    }


    11aa:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    11ac:	00002445 	.word	0x00002445
    11b0:	00001e5d 	.word	0x00001e5d
    11b4:	3fe00000 	.word	0x3fe00000
    11b8:	00001805 	.word	0x00001805
    11bc:	000024ed 	.word	0x000024ed
    11c0:	00000fc5 	.word	0x00000fc5

000011c4 <logSensors>:
#include <boardDefines.h>




void logSensors(Altimeter *my_altimeter) {
    11c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    11c6:	b087      	sub	sp, #28

    u8_t bytesToSend = 23;
    u8_t dataToSend[23];


    dataToSend[0] = SENSOR_LOG;
    11c8:	466a      	mov	r2, sp
    11ca:	2341      	movs	r3, #65	; 0x41
    11cc:	7013      	strb	r3, [r2, #0]
    dataToSend[1] = my_altimeter->sampleTick >> 0;
    11ce:	23a3      	movs	r3, #163	; 0xa3
    dataToSend[2] = my_altimeter->sampleTick >> 8;
    11d0:	4669      	mov	r1, sp
    u8_t bytesToSend = 23;
    u8_t dataToSend[23];


    dataToSend[0] = SENSOR_LOG;
    dataToSend[1] = my_altimeter->sampleTick >> 0;
    11d2:	009b      	lsls	r3, r3, #2
    11d4:	58c3      	ldr	r3, [r0, r3]
    dataToSend[20] = my_altimeter->myIMU.gyroZRaw >> 8;

    dataToSend[21] = my_altimeter->myAnalogAccelerometer.analogRaw >> 0;
    dataToSend[22] = my_altimeter->myAnalogAccelerometer.analogRaw >> 8;

    u8_t location = my_altimeter->myFlashMemory.pageLocation;
    11d6:	2480      	movs	r4, #128	; 0x80
    u8_t bytesToSend = 23;
    u8_t dataToSend[23];


    dataToSend[0] = SENSOR_LOG;
    dataToSend[1] = my_altimeter->sampleTick >> 0;
    11d8:	7053      	strb	r3, [r2, #1]
    dataToSend[2] = my_altimeter->sampleTick >> 8;
    11da:	0a1a      	lsrs	r2, r3, #8
    11dc:	708a      	strb	r2, [r1, #2]
    dataToSend[3] = my_altimeter->sampleTick >> 16;
    11de:	0c1a      	lsrs	r2, r3, #16
    dataToSend[4] = my_altimeter->sampleTick >> 24;
    11e0:	0e1b      	lsrs	r3, r3, #24
    11e2:	710b      	strb	r3, [r1, #4]

    dataToSend[5] = my_altimeter->myBarometer.heightCm >> 0;
    11e4:	6a43      	ldr	r3, [r0, #36]	; 0x24


    dataToSend[0] = SENSOR_LOG;
    dataToSend[1] = my_altimeter->sampleTick >> 0;
    dataToSend[2] = my_altimeter->sampleTick >> 8;
    dataToSend[3] = my_altimeter->sampleTick >> 16;
    11e6:	70ca      	strb	r2, [r1, #3]
    dataToSend[4] = my_altimeter->sampleTick >> 24;

    dataToSend[5] = my_altimeter->myBarometer.heightCm >> 0;
    dataToSend[6] = my_altimeter->myBarometer.heightCm >> 8;
    11e8:	0a1a      	lsrs	r2, r3, #8
    dataToSend[1] = my_altimeter->sampleTick >> 0;
    dataToSend[2] = my_altimeter->sampleTick >> 8;
    dataToSend[3] = my_altimeter->sampleTick >> 16;
    dataToSend[4] = my_altimeter->sampleTick >> 24;

    dataToSend[5] = my_altimeter->myBarometer.heightCm >> 0;
    11ea:	714b      	strb	r3, [r1, #5]
    dataToSend[6] = my_altimeter->myBarometer.heightCm >> 8;
    11ec:	718a      	strb	r2, [r1, #6]
    dataToSend[7] = my_altimeter->myBarometer.heightCm >> 16;
    11ee:	0c1a      	lsrs	r2, r3, #16
    dataToSend[8] = my_altimeter->myBarometer.heightCm >> 24;
    11f0:	0e1b      	lsrs	r3, r3, #24
    11f2:	720b      	strb	r3, [r1, #8]

    dataToSend[9] = my_altimeter->myIMU.accelXRaw >> 0;
    11f4:	0003      	movs	r3, r0
    dataToSend[3] = my_altimeter->sampleTick >> 16;
    dataToSend[4] = my_altimeter->sampleTick >> 24;

    dataToSend[5] = my_altimeter->myBarometer.heightCm >> 0;
    dataToSend[6] = my_altimeter->myBarometer.heightCm >> 8;
    dataToSend[7] = my_altimeter->myBarometer.heightCm >> 16;
    11f6:	71ca      	strb	r2, [r1, #7]
    dataToSend[8] = my_altimeter->myBarometer.heightCm >> 24;

    dataToSend[9] = my_altimeter->myIMU.accelXRaw >> 0;
    11f8:	335c      	adds	r3, #92	; 0x5c
    11fa:	881b      	ldrh	r3, [r3, #0]
    dataToSend[20] = my_altimeter->myIMU.gyroZRaw >> 8;

    dataToSend[21] = my_altimeter->myAnalogAccelerometer.analogRaw >> 0;
    dataToSend[22] = my_altimeter->myAnalogAccelerometer.analogRaw >> 8;

    u8_t location = my_altimeter->myFlashMemory.pageLocation;
    11fc:	34ff      	adds	r4, #255	; 0xff
    dataToSend[5] = my_altimeter->myBarometer.heightCm >> 0;
    dataToSend[6] = my_altimeter->myBarometer.heightCm >> 8;
    dataToSend[7] = my_altimeter->myBarometer.heightCm >> 16;
    dataToSend[8] = my_altimeter->myBarometer.heightCm >> 24;

    dataToSend[9] = my_altimeter->myIMU.accelXRaw >> 0;
    11fe:	724b      	strb	r3, [r1, #9]
    dataToSend[10] = my_altimeter->myIMU.accelXRaw >> 8;
    1200:	0a1b      	lsrs	r3, r3, #8
    1202:	728b      	strb	r3, [r1, #10]
    dataToSend[11] = my_altimeter->myIMU.accelYRaw >> 0;
    1204:	0003      	movs	r3, r0
    1206:	3360      	adds	r3, #96	; 0x60
    1208:	881b      	ldrh	r3, [r3, #0]
    120a:	72cb      	strb	r3, [r1, #11]
    dataToSend[12] = my_altimeter->myIMU.accelYRaw >> 8;
    120c:	0a1b      	lsrs	r3, r3, #8
    120e:	730b      	strb	r3, [r1, #12]
    dataToSend[13] = my_altimeter->myIMU.accelZRaw >> 0;
    1210:	0003      	movs	r3, r0
    1212:	3364      	adds	r3, #100	; 0x64
    1214:	881b      	ldrh	r3, [r3, #0]
    1216:	734b      	strb	r3, [r1, #13]
    dataToSend[14] = my_altimeter->myIMU.accelZRaw >> 8;
    1218:	0a1b      	lsrs	r3, r3, #8
    121a:	738b      	strb	r3, [r1, #14]

    dataToSend[15] = my_altimeter->myIMU.gyroXRaw >> 0;
    121c:	0003      	movs	r3, r0
    121e:	3368      	adds	r3, #104	; 0x68
    1220:	881b      	ldrh	r3, [r3, #0]
    1222:	73cb      	strb	r3, [r1, #15]
    dataToSend[16] = my_altimeter->myIMU.gyroXRaw >> 8;
    1224:	0a1b      	lsrs	r3, r3, #8
    1226:	740b      	strb	r3, [r1, #16]
    dataToSend[17] = my_altimeter->myIMU.gyroYRaw >> 0;
    1228:	0003      	movs	r3, r0
    122a:	336c      	adds	r3, #108	; 0x6c
    122c:	881b      	ldrh	r3, [r3, #0]
    122e:	744b      	strb	r3, [r1, #17]
    dataToSend[18] = my_altimeter->myIMU.gyroYRaw >> 8;
    1230:	0a1b      	lsrs	r3, r3, #8
    1232:	748b      	strb	r3, [r1, #18]
    dataToSend[19] = my_altimeter->myIMU.gyroZRaw >> 0;
    1234:	0003      	movs	r3, r0
    1236:	3370      	adds	r3, #112	; 0x70
    1238:	881b      	ldrh	r3, [r3, #0]
    123a:	74cb      	strb	r3, [r1, #19]
    dataToSend[20] = my_altimeter->myIMU.gyroZRaw >> 8;
    123c:	0a1b      	lsrs	r3, r3, #8
    123e:	750b      	strb	r3, [r1, #20]

    dataToSend[21] = my_altimeter->myAnalogAccelerometer.analogRaw >> 0;
    1240:	0003      	movs	r3, r0
    1242:	3374      	adds	r3, #116	; 0x74
    1244:	881b      	ldrh	r3, [r3, #0]
    1246:	754b      	strb	r3, [r1, #21]
    dataToSend[22] = my_altimeter->myAnalogAccelerometer.analogRaw >> 8;
    1248:	0a1b      	lsrs	r3, r3, #8
    124a:	758b      	strb	r3, [r1, #22]

    u8_t location = my_altimeter->myFlashMemory.pageLocation;
    124c:	5d02      	ldrb	r2, [r0, r4]
    124e:	2300      	movs	r3, #0
    u8_t bytesWritten = 0;

    if ((location + bytesToSend) > 0xFF) {
    1250:	2ae8      	cmp	r2, #232	; 0xe8
    1252:	dd2c      	ble.n	12ae <logSensors+0xea>
        for (u8_t dataByte = 0; (dataByte + location) < 0xFF; ++dataByte) {
    1254:	18d1      	adds	r1, r2, r3
    1256:	29fe      	cmp	r1, #254	; 0xfe
    1258:	dc08      	bgt.n	126c <logSensors+0xa8>
            my_altimeter->myFlashMemory.pageBuffer[(dataByte + location)] = dataToSend[dataByte];
    125a:	466d      	mov	r5, sp
    125c:	1841      	adds	r1, r0, r1
    125e:	5ced      	ldrb	r5, [r5, r3]
    1260:	3181      	adds	r1, #129	; 0x81
    1262:	31ff      	adds	r1, #255	; 0xff
            bytesWritten++;
    1264:	3301      	adds	r3, #1
    u8_t location = my_altimeter->myFlashMemory.pageLocation;
    u8_t bytesWritten = 0;

    if ((location + bytesToSend) > 0xFF) {
        for (u8_t dataByte = 0; (dataByte + location) < 0xFF; ++dataByte) {
            my_altimeter->myFlashMemory.pageBuffer[(dataByte + location)] = dataToSend[dataByte];
    1266:	700d      	strb	r5, [r1, #0]
            bytesWritten++;
    1268:	b2db      	uxtb	r3, r3
    126a:	e7f3      	b.n	1254 <logSensors+0x90>
    126c:	0002      	movs	r2, r0
        }


        for(u8_t i = 0; i < 0xFF; ++i) {
            my_altimeter->myFlashMemory.pageToWrite[i] = my_altimeter->myFlashMemory.pageBuffer[i];
            my_altimeter->myFlashMemory.pageBuffer[i] = 0;
    126e:	2500      	movs	r5, #0
    1270:	4915      	ldr	r1, [pc, #84]	; (12c8 <logSensors+0x104>)
    1272:	3281      	adds	r2, #129	; 0x81
    1274:	32ff      	adds	r2, #255	; 0xff
    1276:	1841      	adds	r1, r0, r1
            bytesWritten++;
        }


        for(u8_t i = 0; i < 0xFF; ++i) {
            my_altimeter->myFlashMemory.pageToWrite[i] = my_altimeter->myFlashMemory.pageBuffer[i];
    1278:	7817      	ldrb	r7, [r2, #0]
    127a:	1e56      	subs	r6, r2, #1
    127c:	3eff      	subs	r6, #255	; 0xff
    127e:	7037      	strb	r7, [r6, #0]
            my_altimeter->myFlashMemory.pageBuffer[i] = 0;
    1280:	7015      	strb	r5, [r2, #0]
    1282:	3201      	adds	r2, #1
            my_altimeter->myFlashMemory.pageBuffer[(dataByte + location)] = dataToSend[dataByte];
            bytesWritten++;
        }


        for(u8_t i = 0; i < 0xFF; ++i) {
    1284:	4291      	cmp	r1, r2
    1286:	d1f7      	bne.n	1278 <logSensors+0xb4>
    1288:	2200      	movs	r2, #0
    128a:	b2d5      	uxtb	r5, r2
            my_altimeter->myFlashMemory.pageToWrite[i] = my_altimeter->myFlashMemory.pageBuffer[i];
            my_altimeter->myFlashMemory.pageBuffer[i] = 0;
        }

        for (u8_t dataByte = 0; bytesWritten <= bytesToSend; ++dataByte) {
    128c:	1959      	adds	r1, r3, r5
    128e:	b2c9      	uxtb	r1, r1
    1290:	2917      	cmp	r1, #23
    1292:	d808      	bhi.n	12a6 <logSensors+0xe2>
            my_altimeter->myFlashMemory.pageBuffer[dataByte] = dataToSend[dataByte];
    1294:	0011      	movs	r1, r2
    1296:	466e      	mov	r6, sp
    1298:	3181      	adds	r1, #129	; 0x81
    129a:	5cb6      	ldrb	r6, [r6, r2]
    129c:	31ff      	adds	r1, #255	; 0xff
    129e:	5446      	strb	r6, [r0, r1]
    12a0:	3201      	adds	r2, #1
            bytesWritten++;

            my_altimeter->myFlashMemory.pageLocation = dataByte; // fix this (iterates every step)
    12a2:	5505      	strb	r5, [r0, r4]
    12a4:	e7f1      	b.n	128a <logSensors+0xc6>
        }

        my_altimeter->myFlashMemory.pageReady = true;
    12a6:	2201      	movs	r2, #1
    12a8:	4b07      	ldr	r3, [pc, #28]	; (12c8 <logSensors+0x104>)
    12aa:	54c2      	strb	r2, [r0, r3]
    12ac:	e00a      	b.n	12c4 <logSensors+0x100>


    } else {

        for (u8_t dataByte = 0; bytesWritten <= bytesToSend; ++dataByte) {
            my_altimeter->myFlashMemory.pageBuffer[(dataByte + location)] = dataToSend[dataByte];
    12ae:	466d      	mov	r5, sp
    12b0:	1899      	adds	r1, r3, r2
    12b2:	5ced      	ldrb	r5, [r5, r3]
    12b4:	3181      	adds	r1, #129	; 0x81
    12b6:	31ff      	adds	r1, #255	; 0xff
    12b8:	3301      	adds	r3, #1
    12ba:	5445      	strb	r5, [r0, r1]
        my_altimeter->myFlashMemory.pageReady = true;


    } else {

        for (u8_t dataByte = 0; bytesWritten <= bytesToSend; ++dataByte) {
    12bc:	2b18      	cmp	r3, #24
    12be:	d1f6      	bne.n	12ae <logSensors+0xea>
            my_altimeter->myFlashMemory.pageBuffer[(dataByte + location)] = dataToSend[dataByte];
            bytesWritten++;
        }
        my_altimeter->myFlashMemory.pageLocation = location + bytesWritten;
    12c0:	3218      	adds	r2, #24
    12c2:	5502      	strb	r2, [r0, r4]

    }

//u8_t bytesSent = AT25SEWritePage(my_altimeter->currentAddress,bytesToSend,dataToSend);

}
    12c4:	b007      	add	sp, #28
    12c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    12c8:	0000027f 	.word	0x0000027f

000012cc <sampleTick>:
#include <boardDefines.h>
#include <MS5803.h>



void sampleTick(Altimeter *my_altimeter) {
    12cc:	b5f0      	push	{r4, r5, r6, r7, lr}

    my_altimeter->sampleTick = millis();
    12ce:	4bd1      	ldr	r3, [pc, #836]	; (1614 <sampleTick+0x348>)
#include <boardDefines.h>
#include <MS5803.h>



void sampleTick(Altimeter *my_altimeter) {
    12d0:	b087      	sub	sp, #28
    12d2:	0004      	movs	r4, r0

    my_altimeter->sampleTick = millis();
    12d4:	4798      	blx	r3
    12d6:	23a3      	movs	r3, #163	; 0xa3

    my_altimeter->batV = adc_read(senseBatPin);
    12d8:	4dcf      	ldr	r5, [pc, #828]	; (1618 <sampleTick+0x34c>)



void sampleTick(Altimeter *my_altimeter) {

    my_altimeter->sampleTick = millis();
    12da:	009b      	lsls	r3, r3, #2
    12dc:	50e0      	str	r0, [r4, r3]

    my_altimeter->batV = adc_read(senseBatPin);
    12de:	786b      	ldrb	r3, [r5, #1]
    12e0:	7829      	ldrb	r1, [r5, #0]
    12e2:	78a8      	ldrb	r0, [r5, #2]
    12e4:	021b      	lsls	r3, r3, #8
    12e6:	430b      	orrs	r3, r1
    12e8:	0400      	lsls	r0, r0, #16
    12ea:	001a      	movs	r2, r3
    12ec:	0003      	movs	r3, r0
    12ee:	78e8      	ldrb	r0, [r5, #3]
    12f0:	4313      	orrs	r3, r2
    12f2:	0600      	lsls	r0, r0, #24
    12f4:	4ec9      	ldr	r6, [pc, #804]	; (161c <sampleTick+0x350>)
    12f6:	7929      	ldrb	r1, [r5, #4]
    12f8:	4318      	orrs	r0, r3
    12fa:	47b0      	blx	r6
    12fc:	23a0      	movs	r3, #160	; 0xa0
    12fe:	009b      	lsls	r3, r3, #2
    1300:	52e0      	strh	r0, [r4, r3]
    my_altimeter->batV = my_altimeter->batV;
    my_altimeter->senseA = adc_read(senseAPin);
    1302:	79ab      	ldrb	r3, [r5, #6]
    1304:	7969      	ldrb	r1, [r5, #5]
    1306:	79e8      	ldrb	r0, [r5, #7]
    1308:	021b      	lsls	r3, r3, #8
    130a:	430b      	orrs	r3, r1
    130c:	0400      	lsls	r0, r0, #16
    130e:	001a      	movs	r2, r3
    1310:	0003      	movs	r3, r0
    1312:	7a28      	ldrb	r0, [r5, #8]
    1314:	4313      	orrs	r3, r2
    1316:	0600      	lsls	r0, r0, #24
    1318:	7a69      	ldrb	r1, [r5, #9]
    131a:	4318      	orrs	r0, r3
    131c:	47b0      	blx	r6
    131e:	4bc0      	ldr	r3, [pc, #768]	; (1620 <sampleTick+0x354>)
    my_altimeter->senseB = adc_read(senseBPin);
    1320:	7aa9      	ldrb	r1, [r5, #10]

    my_altimeter->sampleTick = millis();

    my_altimeter->batV = adc_read(senseBatPin);
    my_altimeter->batV = my_altimeter->batV;
    my_altimeter->senseA = adc_read(senseAPin);
    1322:	52e0      	strh	r0, [r4, r3]
    my_altimeter->senseB = adc_read(senseBPin);
    1324:	7aeb      	ldrb	r3, [r5, #11]
    1326:	7b28      	ldrb	r0, [r5, #12]
    1328:	021b      	lsls	r3, r3, #8
    132a:	430b      	orrs	r3, r1
    132c:	0400      	lsls	r0, r0, #16
    132e:	001a      	movs	r2, r3
    1330:	0003      	movs	r3, r0
    1332:	7b68      	ldrb	r0, [r5, #13]
    1334:	4313      	orrs	r3, r2
    1336:	0600      	lsls	r0, r0, #24
    1338:	7ba9      	ldrb	r1, [r5, #14]
    133a:	4318      	orrs	r0, r3
    133c:	47b0      	blx	r6
    133e:	23a1      	movs	r3, #161	; 0xa1
    1340:	009b      	lsls	r3, r3, #2
    1342:	52e0      	strh	r0, [r4, r3]
    my_altimeter->senseC = adc_read(senseCPin);
    1344:	7c2b      	ldrb	r3, [r5, #16]
    1346:	7be9      	ldrb	r1, [r5, #15]
    1348:	7c68      	ldrb	r0, [r5, #17]
    134a:	021b      	lsls	r3, r3, #8
    134c:	430b      	orrs	r3, r1
    134e:	0400      	lsls	r0, r0, #16
    1350:	001a      	movs	r2, r3
    1352:	0003      	movs	r3, r0
    1354:	7ca8      	ldrb	r0, [r5, #18]
    1356:	4313      	orrs	r3, r2
    1358:	0600      	lsls	r0, r0, #24
    135a:	7ce9      	ldrb	r1, [r5, #19]
    135c:	4318      	orrs	r0, r3
    135e:	47b0      	blx	r6
    1360:	4bb0      	ldr	r3, [pc, #704]	; (1624 <sampleTick+0x358>)
    my_altimeter->senseD = adc_read(senseDPin);
    1362:	7d29      	ldrb	r1, [r5, #20]

    my_altimeter->batV = adc_read(senseBatPin);
    my_altimeter->batV = my_altimeter->batV;
    my_altimeter->senseA = adc_read(senseAPin);
    my_altimeter->senseB = adc_read(senseBPin);
    my_altimeter->senseC = adc_read(senseCPin);
    1364:	52e0      	strh	r0, [r4, r3]
    my_altimeter->senseD = adc_read(senseDPin);
    1366:	7d6b      	ldrb	r3, [r5, #21]
    1368:	7da8      	ldrb	r0, [r5, #22]
    136a:	021b      	lsls	r3, r3, #8
    136c:	430b      	orrs	r3, r1
    136e:	0400      	lsls	r0, r0, #16
    1370:	001a      	movs	r2, r3
    1372:	0003      	movs	r3, r0
    1374:	7de8      	ldrb	r0, [r5, #23]
    1376:	4313      	orrs	r3, r2
    1378:	0600      	lsls	r0, r0, #24
    137a:	7e29      	ldrb	r1, [r5, #24]
    137c:	4318      	orrs	r0, r3
    137e:	47b0      	blx	r6
    1380:	23a2      	movs	r3, #162	; 0xa2
    1382:	009b      	lsls	r3, r3, #2
    1384:	52e0      	strh	r0, [r4, r3]




    my_altimeter->myAnalogAccelerometer.analogRaw = adc_read(analogAccelPin);
    1386:	7eab      	ldrb	r3, [r5, #26]
    1388:	7e69      	ldrb	r1, [r5, #25]
    138a:	7ee8      	ldrb	r0, [r5, #27]
    138c:	021b      	lsls	r3, r3, #8
    138e:	430b      	orrs	r3, r1
    1390:	0400      	lsls	r0, r0, #16
    1392:	001a      	movs	r2, r3
    1394:	0003      	movs	r3, r0
    1396:	7f28      	ldrb	r0, [r5, #28]
    1398:	4313      	orrs	r3, r2
    139a:	0600      	lsls	r0, r0, #24
    139c:	7f69      	ldrb	r1, [r5, #29]
    139e:	4318      	orrs	r0, r3
    13a0:	47b0      	blx	r6
    13a2:	0023      	movs	r3, r4
    13a4:	3374      	adds	r3, #116	; 0x74
    13a6:	8018      	strh	r0, [r3, #0]
    my_altimeter->myAnalogAccelerometer.analogAccel = (my_altimeter->myAnalogAccelerometer.analogRaw - 3900) * -0.0154;
    13a8:	4b9f      	ldr	r3, [pc, #636]	; (1628 <sampleTick+0x35c>)
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    13aa:	2780      	movs	r7, #128	; 0x80
    13ac:	18c0      	adds	r0, r0, r3
    13ae:	4b9f      	ldr	r3, [pc, #636]	; (162c <sampleTick+0x360>)
    13b0:	4798      	blx	r3
    13b2:	4a9f      	ldr	r2, [pc, #636]	; (1630 <sampleTick+0x364>)
    13b4:	4e9f      	ldr	r6, [pc, #636]	; (1634 <sampleTick+0x368>)
    13b6:	4ba0      	ldr	r3, [pc, #640]	; (1638 <sampleTick+0x36c>)
    13b8:	47b0      	blx	r6
    13ba:	4ba0      	ldr	r3, [pc, #640]	; (163c <sampleTick+0x370>)
    13bc:	4798      	blx	r3
    uint8_t dummy_Tx = 0xFF;
    uint8_t dummy_rx;

    pinLow(cs_baro);
    // dummy_rx = spiDataTransfer(SPI2, 0x50);
    byteOut(spi2SCK,spi2MOSI, 0x50);
    13be:	2250      	movs	r2, #80	; 0x50


    my_altimeter->myAnalogAccelerometer.analogRaw = adc_read(analogAccelPin);
    my_altimeter->myAnalogAccelerometer.analogAccel = (my_altimeter->myAnalogAccelerometer.analogRaw - 3900) * -0.0154;

    my_altimeter->myIMU.perviousAccelX = my_altimeter->myIMU.accelX;
    13c0:	6c23      	ldr	r3, [r4, #64]	; 0x40
    13c2:	023f      	lsls	r7, r7, #8
    13c4:	6463      	str	r3, [r4, #68]	; 0x44
    13c6:	4b9e      	ldr	r3, [pc, #632]	; (1640 <sampleTick+0x374>)




    my_altimeter->myAnalogAccelerometer.analogRaw = adc_read(analogAccelPin);
    my_altimeter->myAnalogAccelerometer.analogAccel = (my_altimeter->myAnalogAccelerometer.analogRaw - 3900) * -0.0154;
    13c8:	67a0      	str	r0, [r4, #120]	; 0x78
    uint8_t dummy_Tx = 0xFF;
    uint8_t dummy_rx;

    pinLow(cs_baro);
    // dummy_rx = spiDataTransfer(SPI2, 0x50);
    byteOut(spi2SCK,spi2MOSI, 0x50);
    13ca:	002e      	movs	r6, r5
    13cc:	615f      	str	r7, [r3, #20]
    13ce:	9200      	str	r2, [sp, #0]
    13d0:	7fea      	ldrb	r2, [r5, #31]
    13d2:	7fa8      	ldrb	r0, [r5, #30]
    13d4:	0212      	lsls	r2, r2, #8
    13d6:	4302      	orrs	r2, r0
    13d8:	0011      	movs	r1, r2
    13da:	002b      	movs	r3, r5
    13dc:	361e      	adds	r6, #30
    13de:	78b2      	ldrb	r2, [r6, #2]
    13e0:	3323      	adds	r3, #35	; 0x23
    13e2:	0412      	lsls	r2, r2, #16
    13e4:	430a      	orrs	r2, r1
    13e6:	78f1      	ldrb	r1, [r6, #3]
    13e8:	7818      	ldrb	r0, [r3, #0]
    13ea:	0609      	lsls	r1, r1, #24
    13ec:	4311      	orrs	r1, r2
    13ee:	7932      	ldrb	r2, [r6, #4]
    13f0:	789d      	ldrb	r5, [r3, #2]
    13f2:	9204      	str	r2, [sp, #16]
    13f4:	785a      	ldrb	r2, [r3, #1]
    13f6:	042d      	lsls	r5, r5, #16
    13f8:	0212      	lsls	r2, r2, #8
    13fa:	4302      	orrs	r2, r0
    13fc:	9103      	str	r1, [sp, #12]
    13fe:	0011      	movs	r1, r2
    1400:	002a      	movs	r2, r5
    1402:	78dd      	ldrb	r5, [r3, #3]
    1404:	791b      	ldrb	r3, [r3, #4]
    1406:	430a      	orrs	r2, r1
    1408:	062d      	lsls	r5, r5, #24
    140a:	4315      	orrs	r5, r2
    140c:	9305      	str	r3, [sp, #20]
    140e:	9a03      	ldr	r2, [sp, #12]
    1410:	9905      	ldr	r1, [sp, #20]
    1412:	9b04      	ldr	r3, [sp, #16]
    1414:	0028      	movs	r0, r5
    1416:	4e8b      	ldr	r6, [pc, #556]	; (1644 <sampleTick+0x378>)
    1418:	47b0      	blx	r6
    pinHigh(cs_baro);
    delay_us(500);
    141a:	20fa      	movs	r0, #250	; 0xfa
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    141c:	4b88      	ldr	r3, [pc, #544]	; (1640 <sampleTick+0x374>)
    141e:	0040      	lsls	r0, r0, #1
    1420:	619f      	str	r7, [r3, #24]
    1422:	4b89      	ldr	r3, [pc, #548]	; (1648 <sampleTick+0x37c>)
    1424:	4798      	blx	r3
    my_altimeter->myBarometer.rawTempatureData = readMS5803AdcResults();
    1426:	4b89      	ldr	r3, [pc, #548]	; (164c <sampleTick+0x380>)
    1428:	4798      	blx	r3
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    142a:	4b85      	ldr	r3, [pc, #532]	; (1640 <sampleTick+0x374>)
    142c:	6160      	str	r0, [r4, #20]
    142e:	615f      	str	r7, [r3, #20]

    pinLow(cs_baro);
    //  dummy_rx = spiDataTransfer(SPI2, 0x42);
    byteOut(spi2SCK,spi2MOSI, 0x42);
    1430:	2342      	movs	r3, #66	; 0x42
    1432:	9a03      	ldr	r2, [sp, #12]
    1434:	9300      	str	r3, [sp, #0]
    1436:	0028      	movs	r0, r5
    1438:	9b04      	ldr	r3, [sp, #16]
    143a:	9905      	ldr	r1, [sp, #20]
    143c:	47b0      	blx	r6
    143e:	2280      	movs	r2, #128	; 0x80
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    1440:	4b7f      	ldr	r3, [pc, #508]	; (1640 <sampleTick+0x374>)
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    1442:	00d2      	lsls	r2, r2, #3
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    1444:	619f      	str	r7, [r3, #24]
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    1446:	4b82      	ldr	r3, [pc, #520]	; (1650 <sampleTick+0x384>)



// Accel data
    pinLow(cs_accel);
    dummy_rx = spiDataTransfer(SPI0, BMI055_X_ACC_LSB | BMI055_READ_REG);
    1448:	4f82      	ldr	r7, [pc, #520]	; (1654 <sampleTick+0x388>)
    144a:	601a      	str	r2, [r3, #0]
    144c:	2182      	movs	r1, #130	; 0x82
    144e:	2000      	movs	r0, #0
    1450:	47b8      	blx	r7

    my_altimeter->myIMU.accelXRaw = spiDataTransfer(SPI0,dummy_Tx);
    1452:	21ff      	movs	r1, #255	; 0xff
    1454:	2000      	movs	r0, #0
    1456:	47b8      	blx	r7
    1458:	0023      	movs	r3, r4
    145a:	335c      	adds	r3, #92	; 0x5c
    145c:	8018      	strh	r0, [r3, #0]
    145e:	0005      	movs	r5, r0
    my_altimeter->myIMU.accelXRaw = my_altimeter->myIMU.accelXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    1460:	21ff      	movs	r1, #255	; 0xff
    1462:	2000      	movs	r0, #0

// Accel data
    pinLow(cs_accel);
    dummy_rx = spiDataTransfer(SPI0, BMI055_X_ACC_LSB | BMI055_READ_REG);

    my_altimeter->myIMU.accelXRaw = spiDataTransfer(SPI0,dummy_Tx);
    1464:	9303      	str	r3, [sp, #12]
    my_altimeter->myIMU.accelXRaw = my_altimeter->myIMU.accelXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    1466:	47b8      	blx	r7
    1468:	9b03      	ldr	r3, [sp, #12]
    146a:	0200      	lsls	r0, r0, #8
    146c:	4305      	orrs	r5, r0
    146e:	801d      	strh	r5, [r3, #0]
    my_altimeter->myIMU.accelYRaw = spiDataTransfer(SPI0,dummy_Tx);
    1470:	21ff      	movs	r1, #255	; 0xff
    1472:	0026      	movs	r6, r4
    1474:	2000      	movs	r0, #0
    1476:	47b8      	blx	r7
    1478:	3660      	adds	r6, #96	; 0x60
    147a:	8030      	strh	r0, [r6, #0]
    147c:	0005      	movs	r5, r0
    my_altimeter->myIMU.accelYRaw = my_altimeter->myIMU.accelYRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    147e:	21ff      	movs	r1, #255	; 0xff
    1480:	2000      	movs	r0, #0
    1482:	47b8      	blx	r7
    1484:	0200      	lsls	r0, r0, #8
    1486:	4305      	orrs	r5, r0
    1488:	8035      	strh	r5, [r6, #0]
    my_altimeter->myIMU.accelZRaw = spiDataTransfer(SPI0,dummy_Tx);
    148a:	21ff      	movs	r1, #255	; 0xff
    148c:	2000      	movs	r0, #0
    148e:	47b8      	blx	r7
    1490:	466b      	mov	r3, sp
    1492:	0025      	movs	r5, r4
    1494:	9004      	str	r0, [sp, #16]
    1496:	8a1b      	ldrh	r3, [r3, #16]
    1498:	3564      	adds	r5, #100	; 0x64
    149a:	802b      	strh	r3, [r5, #0]
    my_altimeter->myIMU.accelZRaw = my_altimeter->myIMU.accelZRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    149c:	21ff      	movs	r1, #255	; 0xff
    149e:	2000      	movs	r0, #0
    14a0:	47b8      	blx	r7
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    14a2:	2280      	movs	r2, #128	; 0x80
    14a4:	9b04      	ldr	r3, [sp, #16]
    14a6:	0200      	lsls	r0, r0, #8
    14a8:	4303      	orrs	r3, r0
    14aa:	802b      	strh	r3, [r5, #0]
    14ac:	4b6a      	ldr	r3, [pc, #424]	; (1658 <sampleTick+0x38c>)
    14ae:	00d2      	lsls	r2, r2, #3
    14b0:	601a      	str	r2, [r3, #0]

    pinHigh(cs_accel);

    bool negativeX = ( my_altimeter->myIMU.accelXRaw & (1<<15)) != 0;
    14b2:	9b03      	ldr	r3, [sp, #12]
    bool negativeY =  ( my_altimeter->myIMU.accelYRaw & (1<<15)) != 0;
    bool negativeZ =  ( my_altimeter->myIMU.accelZRaw & (1<<15)) != 0;

    my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXRaw;
    my_altimeter->myIMU.accelYint = my_altimeter->myIMU.accelYRaw;
    14b4:	3d02      	subs	r5, #2
    my_altimeter->myIMU.accelZRaw = spiDataTransfer(SPI0,dummy_Tx);
    my_altimeter->myIMU.accelZRaw = my_altimeter->myIMU.accelZRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);

    pinHigh(cs_accel);

    bool negativeX = ( my_altimeter->myIMU.accelXRaw & (1<<15)) != 0;
    14b6:	2000      	movs	r0, #0
    14b8:	5e18      	ldrsh	r0, [r3, r0]
    bool negativeY =  ( my_altimeter->myIMU.accelYRaw & (1<<15)) != 0;
    14ba:	2300      	movs	r3, #0
    14bc:	5ef2      	ldrsh	r2, [r6, r3]
    bool negativeZ =  ( my_altimeter->myIMU.accelZRaw & (1<<15)) != 0;
    14be:	2102      	movs	r1, #2
    14c0:	5e6b      	ldrsh	r3, [r5, r1]

    if (negativeX) {
        my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXint | ~((1 << 16) - 1);
        my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXint >> 4;
    } else {
        my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXint >> 4;
    14c2:	0021      	movs	r1, r4
    14c4:	1112      	asrs	r2, r2, #4
    14c6:	1100      	asrs	r0, r0, #4
    14c8:	315e      	adds	r1, #94	; 0x5e
    14ca:	111b      	asrs	r3, r3, #4
    bool negativeX = ( my_altimeter->myIMU.accelXRaw & (1<<15)) != 0;
    bool negativeY =  ( my_altimeter->myIMU.accelYRaw & (1<<15)) != 0;
    bool negativeZ =  ( my_altimeter->myIMU.accelZRaw & (1<<15)) != 0;

    my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXRaw;
    my_altimeter->myIMU.accelYint = my_altimeter->myIMU.accelYRaw;
    14cc:	9503      	str	r5, [sp, #12]

    if (negativeX) {
        my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXint | ~((1 << 16) - 1);
        my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXint >> 4;
    } else {
        my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXint >> 4;
    14ce:	8008      	strh	r0, [r1, #0]

    if (negativeY) {
        my_altimeter->myIMU.accelYint = my_altimeter->myIMU.accelYint | ~((1 << 16) - 1);
        my_altimeter->myIMU.accelYint = my_altimeter->myIMU.accelYint >> 4;
    } else {
        my_altimeter->myIMU.accelYint = my_altimeter->myIMU.accelYint >> 4;
    14d0:	802a      	strh	r2, [r5, #0]

    if (negativeZ) {
        my_altimeter->myIMU.accelZint = my_altimeter->myIMU.accelZint | ~((1 << 16) - 1);
        my_altimeter->myIMU.accelZint = my_altimeter->myIMU.accelZint >> 4;
    } else {
        my_altimeter->myIMU.accelZint = my_altimeter->myIMU.accelZint >> 4;
    14d2:	80f3      	strh	r3, [r6, #6]
    }

    my_altimeter->myIMU.accelX = my_altimeter->myIMU.accelXint * BMI055_ACCEL_16G_DIV;
    14d4:	4b55      	ldr	r3, [pc, #340]	; (162c <sampleTick+0x360>)
    14d6:	4798      	blx	r3
    14d8:	23fe      	movs	r3, #254	; 0xfe
    14da:	4d56      	ldr	r5, [pc, #344]	; (1634 <sampleTick+0x368>)
    14dc:	2200      	movs	r2, #0
    14de:	059b      	lsls	r3, r3, #22
    14e0:	47a8      	blx	r5
    14e2:	4b56      	ldr	r3, [pc, #344]	; (163c <sampleTick+0x370>)
    14e4:	4798      	blx	r3
    my_altimeter->myIMU.accelY = my_altimeter->myIMU.accelYint * BMI055_ACCEL_16G_DIV;
    14e6:	9b03      	ldr	r3, [sp, #12]
        my_altimeter->myIMU.accelZint = my_altimeter->myIMU.accelZint >> 4;
    } else {
        my_altimeter->myIMU.accelZint = my_altimeter->myIMU.accelZint >> 4;
    }

    my_altimeter->myIMU.accelX = my_altimeter->myIMU.accelXint * BMI055_ACCEL_16G_DIV;
    14e8:	6420      	str	r0, [r4, #64]	; 0x40
    my_altimeter->myIMU.accelY = my_altimeter->myIMU.accelYint * BMI055_ACCEL_16G_DIV;
    14ea:	2000      	movs	r0, #0
    14ec:	5e18      	ldrsh	r0, [r3, r0]
    14ee:	4b4f      	ldr	r3, [pc, #316]	; (162c <sampleTick+0x360>)
    14f0:	4798      	blx	r3
    14f2:	23fe      	movs	r3, #254	; 0xfe
    14f4:	2200      	movs	r2, #0
    14f6:	059b      	lsls	r3, r3, #22
    14f8:	47a8      	blx	r5
    14fa:	4b50      	ldr	r3, [pc, #320]	; (163c <sampleTick+0x370>)
    14fc:	4798      	blx	r3
    14fe:	64a0      	str	r0, [r4, #72]	; 0x48
    my_altimeter->myIMU.accelZ = my_altimeter->myIMU.accelZint * BMI055_ACCEL_16G_DIV;
    1500:	2306      	movs	r3, #6
    1502:	5ef0      	ldrsh	r0, [r6, r3]
    1504:	4b49      	ldr	r3, [pc, #292]	; (162c <sampleTick+0x360>)
    1506:	4798      	blx	r3
    1508:	23fe      	movs	r3, #254	; 0xfe
    150a:	2200      	movs	r2, #0
    150c:	059b      	lsls	r3, r3, #22
    150e:	47a8      	blx	r5
    1510:	4b4a      	ldr	r3, [pc, #296]	; (163c <sampleTick+0x370>)
    1512:	4798      	blx	r3
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    1514:	2280      	movs	r2, #128	; 0x80
    1516:	4b4a      	ldr	r3, [pc, #296]	; (1640 <sampleTick+0x374>)
    1518:	00d2      	lsls	r2, r2, #3
    151a:	64e0      	str	r0, [r4, #76]	; 0x4c


    // Gyro data
    pinLow(cs_gyro);
    dummy_rx = spiDataTransfer(SPI0, BMI055_X_GYRO_LSB | BMI055_READ_REG);
    151c:	2182      	movs	r1, #130	; 0x82
    151e:	615a      	str	r2, [r3, #20]
    1520:	2000      	movs	r0, #0
    1522:	47b8      	blx	r7
    my_altimeter->myIMU.gyroXRaw = spiDataTransfer(SPI0,dummy_Tx);
    1524:	21ff      	movs	r1, #255	; 0xff
    1526:	2000      	movs	r0, #0
    1528:	47b8      	blx	r7
    152a:	0023      	movs	r3, r4
    152c:	3368      	adds	r3, #104	; 0x68
    152e:	8018      	strh	r0, [r3, #0]
    1530:	0005      	movs	r5, r0
    my_altimeter->myIMU.gyroXRaw = my_altimeter->myIMU.gyroXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    1532:	21ff      	movs	r1, #255	; 0xff
    1534:	2000      	movs	r0, #0


    // Gyro data
    pinLow(cs_gyro);
    dummy_rx = spiDataTransfer(SPI0, BMI055_X_GYRO_LSB | BMI055_READ_REG);
    my_altimeter->myIMU.gyroXRaw = spiDataTransfer(SPI0,dummy_Tx);
    1536:	9303      	str	r3, [sp, #12]
    my_altimeter->myIMU.gyroXRaw = my_altimeter->myIMU.gyroXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    1538:	47b8      	blx	r7
    153a:	9b03      	ldr	r3, [sp, #12]
    153c:	0200      	lsls	r0, r0, #8
    153e:	4305      	orrs	r5, r0
    1540:	801d      	strh	r5, [r3, #0]
    my_altimeter->myIMU.gyroYRaw = spiDataTransfer(SPI0,dummy_Tx);
    1542:	21ff      	movs	r1, #255	; 0xff
    1544:	2000      	movs	r0, #0
    1546:	47b8      	blx	r7
    my_altimeter->myIMU.gyroYRaw = my_altimeter->myIMU.gyroYRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    1548:	21ff      	movs	r1, #255	; 0xff
    // Gyro data
    pinLow(cs_gyro);
    dummy_rx = spiDataTransfer(SPI0, BMI055_X_GYRO_LSB | BMI055_READ_REG);
    my_altimeter->myIMU.gyroXRaw = spiDataTransfer(SPI0,dummy_Tx);
    my_altimeter->myIMU.gyroXRaw = my_altimeter->myIMU.gyroXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    my_altimeter->myIMU.gyroYRaw = spiDataTransfer(SPI0,dummy_Tx);
    154a:	81b0      	strh	r0, [r6, #12]
    154c:	0005      	movs	r5, r0
    my_altimeter->myIMU.gyroYRaw = my_altimeter->myIMU.gyroYRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    154e:	2000      	movs	r0, #0
    1550:	47b8      	blx	r7
    1552:	0200      	lsls	r0, r0, #8
    1554:	4305      	orrs	r5, r0
    1556:	81b5      	strh	r5, [r6, #12]
    my_altimeter->myIMU.gyroZRaw = spiDataTransfer(SPI0,dummy_Tx);
    1558:	21ff      	movs	r1, #255	; 0xff
    155a:	2000      	movs	r0, #0
    155c:	47b8      	blx	r7
    155e:	466b      	mov	r3, sp
    1560:	0025      	movs	r5, r4
    1562:	9004      	str	r0, [sp, #16]
    1564:	8a1b      	ldrh	r3, [r3, #16]
    1566:	3570      	adds	r5, #112	; 0x70
    1568:	802b      	strh	r3, [r5, #0]
    my_altimeter->myIMU.gyroZRaw = my_altimeter->myIMU.gyroZRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    156a:	21ff      	movs	r1, #255	; 0xff
    156c:	2000      	movs	r0, #0
    156e:	47b8      	blx	r7
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    1570:	2280      	movs	r2, #128	; 0x80
    1572:	9f04      	ldr	r7, [sp, #16]
    1574:	0200      	lsls	r0, r0, #8
    1576:	4b32      	ldr	r3, [pc, #200]	; (1640 <sampleTick+0x374>)
    1578:	4307      	orrs	r7, r0
    157a:	00d2      	lsls	r2, r2, #3
    157c:	802f      	strh	r7, [r5, #0]
    157e:	619a      	str	r2, [r3, #24]
    pinHigh(cs_gyro);

    bool negativeXgyro = (my_altimeter->myIMU.gyroXRaw & (1<<15)) != 0;
    1580:	9b03      	ldr	r3, [sp, #12]
    1582:	2000      	movs	r0, #0
    1584:	5e18      	ldrsh	r0, [r3, r0]
    bool negativeYgyro = (my_altimeter->myIMU.gyroYRaw & (1<<15)) != 0;
    1586:	230c      	movs	r3, #12
    1588:	5ef2      	ldrsh	r2, [r6, r3]
    bool negativeZgyro = (my_altimeter->myIMU.gyroZRaw & (1<<15)) != 0;
    158a:	2100      	movs	r1, #0
    158c:	5e6b      	ldrsh	r3, [r5, r1]

    if (negativeXgyro) {
        my_altimeter->myIMU.gyroXint = my_altimeter->myIMU.gyroXint | ~((1 << 16) - 1);
        my_altimeter->myIMU.gyroXint = my_altimeter->myIMU.gyroXint >> 4;
    } else {
        my_altimeter->myIMU.gyroXint = my_altimeter->myIMU.gyroXint >> 4;
    158e:	0021      	movs	r1, r4
    1590:	1112      	asrs	r2, r2, #4
    1592:	1100      	asrs	r0, r0, #4
    1594:	316a      	adds	r1, #106	; 0x6a
    1596:	111b      	asrs	r3, r3, #4
    1598:	8008      	strh	r0, [r1, #0]

    if (negativeYgyro) {
        my_altimeter->myIMU.gyroYint = my_altimeter->myIMU.gyroYint | ~((1 << 16) - 1);
        my_altimeter->myIMU.gyroYint = my_altimeter->myIMU.gyroYint >> 4;
    } else {
        my_altimeter->myIMU.gyroYint = my_altimeter->myIMU.gyroYint >> 4;
    159a:	81f2      	strh	r2, [r6, #14]

    if (negativeZgyro) {
        my_altimeter->myIMU.gyroZint = my_altimeter->myIMU.gyroZint | ~((1 << 16) - 1);
        my_altimeter->myIMU.gyroZint = my_altimeter->myIMU.gyroZint >> 4;
    } else {
        my_altimeter->myIMU.gyroZint = my_altimeter->myIMU.gyroZint >> 4;
    159c:	806b      	strh	r3, [r5, #2]
    }


    my_altimeter->myIMU.gyroX = my_altimeter->myIMU.gyroXint * BMI055_GYRO_2000DS_DIV;
    159e:	4b23      	ldr	r3, [pc, #140]	; (162c <sampleTick+0x360>)
    15a0:	4798      	blx	r3
    15a2:	23fe      	movs	r3, #254	; 0xfe
    15a4:	4f23      	ldr	r7, [pc, #140]	; (1634 <sampleTick+0x368>)
    15a6:	2200      	movs	r2, #0
    15a8:	059b      	lsls	r3, r3, #22
    15aa:	47b8      	blx	r7
    15ac:	4b23      	ldr	r3, [pc, #140]	; (163c <sampleTick+0x370>)
    15ae:	4798      	blx	r3
    15b0:	6520      	str	r0, [r4, #80]	; 0x50
    my_altimeter->myIMU.gyroY = my_altimeter->myIMU.gyroYint * BMI055_GYRO_2000DS_DIV;
    15b2:	230e      	movs	r3, #14
    15b4:	5ef0      	ldrsh	r0, [r6, r3]
    15b6:	4b1d      	ldr	r3, [pc, #116]	; (162c <sampleTick+0x360>)
    15b8:	4798      	blx	r3
    15ba:	23fe      	movs	r3, #254	; 0xfe
    15bc:	2200      	movs	r2, #0
    15be:	059b      	lsls	r3, r3, #22
    15c0:	47b8      	blx	r7
    15c2:	4b1e      	ldr	r3, [pc, #120]	; (163c <sampleTick+0x370>)
    15c4:	4798      	blx	r3
    15c6:	6560      	str	r0, [r4, #84]	; 0x54
    my_altimeter->myIMU.gyroZ = my_altimeter->myIMU.gyroZint * BMI055_GYRO_2000DS_DIV;
    15c8:	2302      	movs	r3, #2
    15ca:	5ee8      	ldrsh	r0, [r5, r3]
    15cc:	4b17      	ldr	r3, [pc, #92]	; (162c <sampleTick+0x360>)
    15ce:	4798      	blx	r3
    15d0:	23fe      	movs	r3, #254	; 0xfe
    15d2:	2200      	movs	r2, #0
    15d4:	059b      	lsls	r3, r3, #22
    15d6:	47b8      	blx	r7
    15d8:	4b18      	ldr	r3, [pc, #96]	; (163c <sampleTick+0x370>)
    15da:	4798      	blx	r3
    15dc:	65a0      	str	r0, [r4, #88]	; 0x58

    delay_us(800);
    15de:	20c8      	movs	r0, #200	; 0xc8
    15e0:	4b19      	ldr	r3, [pc, #100]	; (1648 <sampleTick+0x37c>)
    15e2:	0080      	lsls	r0, r0, #2
    15e4:	4798      	blx	r3
    my_altimeter->myBarometer.rawPressureData = readMS5803AdcResults();
    15e6:	4b19      	ldr	r3, [pc, #100]	; (164c <sampleTick+0x380>)
    15e8:	4798      	blx	r3
    ConvertPressureTemperature(&my_altimeter->myBarometer);
    15ea:	1d25      	adds	r5, r4, #4
    my_altimeter->myIMU.gyroX = my_altimeter->myIMU.gyroXint * BMI055_GYRO_2000DS_DIV;
    my_altimeter->myIMU.gyroY = my_altimeter->myIMU.gyroYint * BMI055_GYRO_2000DS_DIV;
    my_altimeter->myIMU.gyroZ = my_altimeter->myIMU.gyroZint * BMI055_GYRO_2000DS_DIV;

    delay_us(800);
    my_altimeter->myBarometer.rawPressureData = readMS5803AdcResults();
    15ec:	6120      	str	r0, [r4, #16]
    ConvertPressureTemperature(&my_altimeter->myBarometer);
    15ee:	4b1b      	ldr	r3, [pc, #108]	; (165c <sampleTick+0x390>)
    15f0:	0028      	movs	r0, r5
    15f2:	4798      	blx	r3
    pascalToCent(&my_altimeter->myBarometer);
    15f4:	0028      	movs	r0, r5
    15f6:	4b1a      	ldr	r3, [pc, #104]	; (1660 <sampleTick+0x394>)
    15f8:	4798      	blx	r3
    my_altimeter->myBarometer.heightFeet = 0.03281 * my_altimeter->myBarometer.heightCm;
    15fa:	4b1a      	ldr	r3, [pc, #104]	; (1664 <sampleTick+0x398>)
    15fc:	6a60      	ldr	r0, [r4, #36]	; 0x24
    15fe:	4798      	blx	r3
    1600:	4a19      	ldr	r2, [pc, #100]	; (1668 <sampleTick+0x39c>)
    1602:	4b1a      	ldr	r3, [pc, #104]	; (166c <sampleTick+0x3a0>)
    1604:	4d0b      	ldr	r5, [pc, #44]	; (1634 <sampleTick+0x368>)
    1606:	47a8      	blx	r5
    1608:	4b0c      	ldr	r3, [pc, #48]	; (163c <sampleTick+0x370>)
    160a:	4798      	blx	r3
    160c:	62a0      	str	r0, [r4, #40]	; 0x28


}
    160e:	b007      	add	sp, #28
    1610:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1612:	46c0      	nop			; (mov r8, r8)
    1614:	00000fc5 	.word	0x00000fc5
    1618:	00002988 	.word	0x00002988
    161c:	00000c2d 	.word	0x00000c2d
    1620:	00000282 	.word	0x00000282
    1624:	00000286 	.word	0x00000286
    1628:	fffff0c4 	.word	0xfffff0c4
    162c:	00002351 	.word	0x00002351
    1630:	02de00d2 	.word	0x02de00d2
    1634:	00001e5d 	.word	0x00001e5d
    1638:	bf8f8a09 	.word	0xbf8f8a09
    163c:	000024ed 	.word	0x000024ed
    1640:	41004400 	.word	0x41004400
    1644:	00000c95 	.word	0x00000c95
    1648:	00000f49 	.word	0x00000f49
    164c:	00000335 	.word	0x00000335
    1650:	41004494 	.word	0x41004494
    1654:	0000177d 	.word	0x0000177d
    1658:	41004498 	.word	0x41004498
    165c:	000003e9 	.word	0x000003e9
    1660:	000004d5 	.word	0x000004d5
    1664:	000023d5 	.word	0x000023d5
    1668:	e9f6a93f 	.word	0xe9f6a93f
    166c:	3fa0cc78 	.word	0x3fa0cc78

00001670 <sercomClockEnable>:
#include <util.h>

void sercomClockEnable(SercomId id, uint32_t clock_channel, u8_t divider) {
    1670:	b570      	push	{r4, r5, r6, lr}
    1672:	0004      	movs	r4, r0
    // prevent this clock write from changing any other clocks
    PM->APBCMASK.reg |= 1 << (PM_APBCMASK_SERCOM0_Pos + id);
    1674:	2301      	movs	r3, #1
    1676:	1ca6      	adds	r6, r4, #2
    1678:	40b3      	lsls	r3, r6
    167a:	480d      	ldr	r0, [pc, #52]	; (16b0 <sercomClockEnable+0x40>)
#include <util.h>

void sercomClockEnable(SercomId id, uint32_t clock_channel, u8_t divider) {
    167c:	000d      	movs	r5, r1
    // prevent this clock write from changing any other clocks
    PM->APBCMASK.reg |= 1 << (PM_APBCMASK_SERCOM0_Pos + id);
    167e:	6a01      	ldr	r1, [r0, #32]
    1680:	430b      	orrs	r3, r1
    1682:	6203      	str	r3, [r0, #32]


    if (clock_channel != 0) {
    1684:	2d00      	cmp	r5, #0
    1686:	d003      	beq.n	1690 <sercomClockEnable+0x20>
        // clock generators 3-8 have 8 division factor bits - DIV[7:0]
        gclkEnable(clock_channel, GCLK_SOURCE_DFLL48M, divider);
    1688:	2107      	movs	r1, #7
    168a:	0028      	movs	r0, r5
    168c:	4b09      	ldr	r3, [pc, #36]	; (16b4 <sercomClockEnable+0x44>)
    168e:	4798      	blx	r3
    }


    // attach clock
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
    1690:	22f0      	movs	r2, #240	; 0xf0
    1692:	2080      	movs	r0, #128	; 0x80
    1694:	0229      	lsls	r1, r5, #8
    1696:	0112      	lsls	r2, r2, #4
    1698:	4011      	ands	r1, r2
    169a:	01c0      	lsls	r0, r0, #7
    169c:	4301      	orrs	r1, r0
    169e:	0020      	movs	r0, r4
    16a0:	3014      	adds	r0, #20
    16a2:	223f      	movs	r2, #63	; 0x3f
    16a4:	0003      	movs	r3, r0
    16a6:	4013      	ands	r3, r2
    16a8:	4319      	orrs	r1, r3
    16aa:	4b03      	ldr	r3, [pc, #12]	; (16b8 <sercomClockEnable+0x48>)
    16ac:	8059      	strh	r1, [r3, #2]
                        GCLK_CLKCTRL_GEN(clock_channel) |
                        GCLK_CLKCTRL_ID(SERCOM0_GCLK_ID_CORE + id);
}
    16ae:	bd70      	pop	{r4, r5, r6, pc}
    16b0:	40000400 	.word	0x40000400
    16b4:	00000ef9 	.word	0x00000ef9
    16b8:	40000c00 	.word	0x40000c00

000016bc <sercomReset>:
//sample.c
void sampleTick(Altimeter *my_altimeter);

//dma.c
inline static Sercom* sercom(SercomId id) {
    return (Sercom*) (0x42000800U + id * 1024);
    16bc:	4b04      	ldr	r3, [pc, #16]	; (16d0 <sercomReset+0x14>)
    16be:	0280      	lsls	r0, r0, #10
    16c0:	18c0      	adds	r0, r0, r3


void sercomReset(SercomId id) {
    sercom(id)->SPI.CTRLA.reg = SERCOM_SPI_CTRLA_SWRST;
    16c2:	2301      	movs	r3, #1
    16c4:	6003      	str	r3, [r0, #0]
    while(sercom(id)->SPI.CTRLA.reg & SERCOM_SPI_CTRLA_SWRST);
    16c6:	6802      	ldr	r2, [r0, #0]
    16c8:	421a      	tst	r2, r3
    16ca:	d1fc      	bne.n	16c6 <sercomReset+0xa>
}
    16cc:	4770      	bx	lr
    16ce:	46c0      	nop			; (mov r8, r8)
    16d0:	42000800 	.word	0x42000800

000016d4 <sercomSpiMasterInit>:
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
}


void sercomSpiMasterInit(SercomId id, u32_t dipo, u32_t dopo, bool cpol, bool cpha, u8_t baud) {
    16d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    16d6:	0004      	movs	r4, r0
    16d8:	9300      	str	r3, [sp, #0]
    16da:	ab08      	add	r3, sp, #32
    16dc:	781b      	ldrb	r3, [r3, #0]
    16de:	000e      	movs	r6, r1
    16e0:	9301      	str	r3, [sp, #4]
    16e2:	ab09      	add	r3, sp, #36	; 0x24
    16e4:	781f      	ldrb	r7, [r3, #0]

    sercomReset(id);
    16e6:	4b12      	ldr	r3, [pc, #72]	; (1730 <sercomSpiMasterInit+0x5c>)
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
}


void sercomSpiMasterInit(SercomId id, u32_t dipo, u32_t dopo, bool cpol, bool cpha, u8_t baud) {
    16e8:	0015      	movs	r5, r2

    sercomReset(id);
    16ea:	4798      	blx	r3
    16ec:	4b11      	ldr	r3, [pc, #68]	; (1734 <sercomSpiMasterInit+0x60>)
    16ee:	02a4      	lsls	r4, r4, #10
    16f0:	18e4      	adds	r4, r4, r3

    sercom(id)->SPI.CTRLB.reg
        = SERCOM_SPI_CTRLB_RXEN;
    16f2:	2380      	movs	r3, #128	; 0x80
    16f4:	029b      	lsls	r3, r3, #10
    16f6:	6063      	str	r3, [r4, #4]
    16f8:	23c0      	movs	r3, #192	; 0xc0
    sercom(id)->SPI.BAUD.reg = baud;

    sercom(id)->SPI.CTRLA.reg
        = SERCOM_SPI_CTRLA_ENABLE
          | SERCOM_SPI_CTRLA_MODE_SPI_MASTER
          | SERCOM_SPI_CTRLA_DIPO(dipo)
    16fa:	21c0      	movs	r1, #192	; 0xc0
    16fc:	042d      	lsls	r5, r5, #16
    16fe:	029b      	lsls	r3, r3, #10
    1700:	402b      	ands	r3, r5
    1702:	250e      	movs	r5, #14
    1704:	0536      	lsls	r6, r6, #20
    1706:	0389      	lsls	r1, r1, #14
    1708:	4031      	ands	r1, r6
          | SERCOM_SPI_CTRLA_DOPO(dopo)
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
    170a:	9e00      	ldr	r6, [sp, #0]
    170c:	431d      	orrs	r5, r3
    170e:	1e73      	subs	r3, r6, #1
    1710:	419e      	sbcs	r6, r3
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
    1712:	9b01      	ldr	r3, [sp, #4]
    sercom(id)->SPI.CTRLA.reg
        = SERCOM_SPI_CTRLA_ENABLE
          | SERCOM_SPI_CTRLA_MODE_SPI_MASTER
          | SERCOM_SPI_CTRLA_DIPO(dipo)
          | SERCOM_SPI_CTRLA_DOPO(dopo)
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
    1714:	0772      	lsls	r2, r6, #29
    1716:	430d      	orrs	r5, r1
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
    1718:	432a      	orrs	r2, r5
    171a:	1e59      	subs	r1, r3, #1
    171c:	418b      	sbcs	r3, r1
    171e:	0016      	movs	r6, r2
    1720:	071b      	lsls	r3, r3, #28
    1722:	431e      	orrs	r6, r3
    sercomReset(id);

    sercom(id)->SPI.CTRLB.reg
        = SERCOM_SPI_CTRLB_RXEN;

    sercom(id)->SPI.BAUD.reg = baud;
    1724:	7327      	strb	r7, [r4, #12]

    sercom(id)->SPI.CTRLA.reg
        = SERCOM_SPI_CTRLA_ENABLE
    1726:	6026      	str	r6, [r4, #0]
        };
    }
}

static inline void SPI_sync(SercomId id) {
    while  (sercom(id)->SPI.SYNCBUSY.bit.CTRLB);
    1728:	69e3      	ldr	r3, [r4, #28]
    172a:	075b      	lsls	r3, r3, #29
    172c:	d4fc      	bmi.n	1728 <sercomSpiMasterInit+0x54>
          | SERCOM_SPI_CTRLA_DOPO(dopo)
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);

    SPI_sync(id);
}
    172e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    1730:	000016bd 	.word	0x000016bd
    1734:	42000800 	.word	0x42000800

00001738 <sercomUartInit>:




void sercomUartInit(SercomId id, u32_t rxpo, u32_t txpo, u32_t baud) {
    1738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    173a:	0007      	movs	r7, r0
    173c:	001e      	movs	r6, r3
    sercomReset(id);
    173e:	4b0c      	ldr	r3, [pc, #48]	; (1770 <sercomUartInit+0x38>)
}




void sercomUartInit(SercomId id, u32_t rxpo, u32_t txpo, u32_t baud) {
    1740:	000d      	movs	r5, r1
    1742:	0014      	movs	r4, r2
    sercomReset(id);
    1744:	4798      	blx	r3
//sample.c
void sampleTick(Altimeter *my_altimeter);

//dma.c
inline static Sercom* sercom(SercomId id) {
    return (Sercom*) (0x42000800U + id * 1024);
    1746:	4b0b      	ldr	r3, [pc, #44]	; (1774 <sercomUartInit+0x3c>)
    1748:	02b8      	lsls	r0, r7, #10
    174a:	18c0      	adds	r0, r0, r3
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    174c:	2304      	movs	r3, #4
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    174e:	22c0      	movs	r2, #192	; 0xc0



void sercomUartInit(SercomId id, u32_t rxpo, u32_t txpo, u32_t baud) {
    sercomReset(id);
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    1750:	6003      	str	r3, [r0, #0]
    sercom(id)->USART.BAUD.reg = baud;
    sercom(id)->USART.CTRLB.reg
        = SERCOM_USART_CTRLB_RXEN
    1752:	23c0      	movs	r3, #192	; 0xc0
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    1754:	0529      	lsls	r1, r5, #20
    1756:	0392      	lsls	r2, r2, #14
    1758:	4011      	ands	r1, r2
    175a:	4a07      	ldr	r2, [pc, #28]	; (1778 <sercomUartInit+0x40>)


void sercomUartInit(SercomId id, u32_t rxpo, u32_t txpo, u32_t baud) {
    sercomReset(id);
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    sercom(id)->USART.BAUD.reg = baud;
    175c:	b2b6      	uxth	r6, r6
    sercom(id)->USART.CTRLB.reg
        = SERCOM_USART_CTRLB_RXEN
    175e:	029b      	lsls	r3, r3, #10
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    1760:	0424      	lsls	r4, r4, #16


void sercomUartInit(SercomId id, u32_t rxpo, u32_t txpo, u32_t baud) {
    sercomReset(id);
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    sercom(id)->USART.BAUD.reg = baud;
    1762:	8186      	strh	r6, [r0, #12]
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    1764:	4311      	orrs	r1, r2
void sercomUartInit(SercomId id, u32_t rxpo, u32_t txpo, u32_t baud) {
    sercomReset(id);
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    sercom(id)->USART.BAUD.reg = baud;
    sercom(id)->USART.CTRLB.reg
        = SERCOM_USART_CTRLB_RXEN
    1766:	6043      	str	r3, [r0, #4]
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    1768:	4023      	ands	r3, r4
    176a:	430b      	orrs	r3, r1
    sercom(id)->USART.BAUD.reg = baud;
    sercom(id)->USART.CTRLB.reg
        = SERCOM_USART_CTRLB_RXEN
          | SERCOM_USART_CTRLB_TXEN;
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
    176c:	6003      	str	r3, [r0, #0]
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
}
    176e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1770:	000016bd 	.word	0x000016bd
    1774:	42000800 	.word	0x42000800
    1778:	40000006 	.word	0x40000006

0000177c <spiDataTransfer>:
    177c:	4b04      	ldr	r3, [pc, #16]	; (1790 <spiDataTransfer+0x14>)
    177e:	0280      	lsls	r0, r0, #10
    1780:	18c0      	adds	r0, r0, r3

u8_t spiDataTransfer(SercomId id, u8_t data) {
    sercom(id)->SPI.DATA.reg = data;
    1782:	6281      	str	r1, [r0, #40]	; 0x28
    while(sercom(id)->SPI.INTFLAG.bit.RXC == 0);
    1784:	7e03      	ldrb	r3, [r0, #24]
    1786:	075b      	lsls	r3, r3, #29
    1788:	d5fc      	bpl.n	1784 <spiDataTransfer+0x8>
    return sercom(id)->SPI.DATA.reg;
    178a:	6a80      	ldr	r0, [r0, #40]	; 0x28
    178c:	b2c0      	uxtb	r0, r0
}
    178e:	4770      	bx	lr
    1790:	42000800 	.word	0x42000800

00001794 <usartDataOut>:
    1794:	4b04      	ldr	r3, [pc, #16]	; (17a8 <usartDataOut+0x14>)
    1796:	0280      	lsls	r0, r0, #10
    1798:	18c0      	adds	r0, r0, r3
    while(sercom(id)->SPI.INTFLAG.bit.DRE == 0);
    return sercom(id)->SPI.DATA.reg;
}

void usartDataOut(SercomId id, u8_t data) {
    sercom(id)->USART.DATA.reg = data;
    179a:	b289      	uxth	r1, r1
    179c:	8501      	strh	r1, [r0, #40]	; 0x28
    while(sercom(id)->USART.INTFLAG.bit.DRE == 0);
    179e:	7e03      	ldrb	r3, [r0, #24]
    17a0:	07db      	lsls	r3, r3, #31
    17a2:	d5fc      	bpl.n	179e <usartDataOut+0xa>
}
    17a4:	4770      	bx	lr
    17a6:	46c0      	nop			; (mov r8, r8)
    17a8:	42000800 	.word	0x42000800

000017ac <__aeabi_lmul>:
    17ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    17ae:	464f      	mov	r7, r9
    17b0:	4646      	mov	r6, r8
    17b2:	b4c0      	push	{r6, r7}
    17b4:	0416      	lsls	r6, r2, #16
    17b6:	0c36      	lsrs	r6, r6, #16
    17b8:	4699      	mov	r9, r3
    17ba:	0033      	movs	r3, r6
    17bc:	0405      	lsls	r5, r0, #16
    17be:	0c2c      	lsrs	r4, r5, #16
    17c0:	0c07      	lsrs	r7, r0, #16
    17c2:	0c15      	lsrs	r5, r2, #16
    17c4:	4363      	muls	r3, r4
    17c6:	437e      	muls	r6, r7
    17c8:	436f      	muls	r7, r5
    17ca:	4365      	muls	r5, r4
    17cc:	0c1c      	lsrs	r4, r3, #16
    17ce:	19ad      	adds	r5, r5, r6
    17d0:	1964      	adds	r4, r4, r5
    17d2:	469c      	mov	ip, r3
    17d4:	42a6      	cmp	r6, r4
    17d6:	d903      	bls.n	17e0 <__aeabi_lmul+0x34>
    17d8:	2380      	movs	r3, #128	; 0x80
    17da:	025b      	lsls	r3, r3, #9
    17dc:	4698      	mov	r8, r3
    17de:	4447      	add	r7, r8
    17e0:	4663      	mov	r3, ip
    17e2:	0c25      	lsrs	r5, r4, #16
    17e4:	19ef      	adds	r7, r5, r7
    17e6:	041d      	lsls	r5, r3, #16
    17e8:	464b      	mov	r3, r9
    17ea:	434a      	muls	r2, r1
    17ec:	4343      	muls	r3, r0
    17ee:	0c2d      	lsrs	r5, r5, #16
    17f0:	0424      	lsls	r4, r4, #16
    17f2:	1964      	adds	r4, r4, r5
    17f4:	1899      	adds	r1, r3, r2
    17f6:	19c9      	adds	r1, r1, r7
    17f8:	0020      	movs	r0, r4
    17fa:	bc0c      	pop	{r2, r3}
    17fc:	4690      	mov	r8, r2
    17fe:	4699      	mov	r9, r3
    1800:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1802:	46c0      	nop			; (mov r8, r8)

00001804 <__aeabi_dadd>:
    1804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1806:	4656      	mov	r6, sl
    1808:	465f      	mov	r7, fp
    180a:	464d      	mov	r5, r9
    180c:	4644      	mov	r4, r8
    180e:	b4f0      	push	{r4, r5, r6, r7}
    1810:	000f      	movs	r7, r1
    1812:	0ffd      	lsrs	r5, r7, #31
    1814:	46aa      	mov	sl, r5
    1816:	0309      	lsls	r1, r1, #12
    1818:	007c      	lsls	r4, r7, #1
    181a:	002e      	movs	r6, r5
    181c:	005f      	lsls	r7, r3, #1
    181e:	0f45      	lsrs	r5, r0, #29
    1820:	0a49      	lsrs	r1, r1, #9
    1822:	0d7f      	lsrs	r7, r7, #21
    1824:	4329      	orrs	r1, r5
    1826:	00c5      	lsls	r5, r0, #3
    1828:	0318      	lsls	r0, r3, #12
    182a:	46bc      	mov	ip, r7
    182c:	0a40      	lsrs	r0, r0, #9
    182e:	0f57      	lsrs	r7, r2, #29
    1830:	0d64      	lsrs	r4, r4, #21
    1832:	0fdb      	lsrs	r3, r3, #31
    1834:	4338      	orrs	r0, r7
    1836:	00d2      	lsls	r2, r2, #3
    1838:	459a      	cmp	sl, r3
    183a:	d100      	bne.n	183e <__aeabi_dadd+0x3a>
    183c:	e0aa      	b.n	1994 <__aeabi_dadd+0x190>
    183e:	4666      	mov	r6, ip
    1840:	1ba6      	subs	r6, r4, r6
    1842:	2e00      	cmp	r6, #0
    1844:	dc00      	bgt.n	1848 <__aeabi_dadd+0x44>
    1846:	e0ff      	b.n	1a48 <__aeabi_dadd+0x244>
    1848:	4663      	mov	r3, ip
    184a:	2b00      	cmp	r3, #0
    184c:	d139      	bne.n	18c2 <__aeabi_dadd+0xbe>
    184e:	0003      	movs	r3, r0
    1850:	4313      	orrs	r3, r2
    1852:	d000      	beq.n	1856 <__aeabi_dadd+0x52>
    1854:	e0d9      	b.n	1a0a <__aeabi_dadd+0x206>
    1856:	076b      	lsls	r3, r5, #29
    1858:	d009      	beq.n	186e <__aeabi_dadd+0x6a>
    185a:	230f      	movs	r3, #15
    185c:	402b      	ands	r3, r5
    185e:	2b04      	cmp	r3, #4
    1860:	d005      	beq.n	186e <__aeabi_dadd+0x6a>
    1862:	1d2b      	adds	r3, r5, #4
    1864:	42ab      	cmp	r3, r5
    1866:	41ad      	sbcs	r5, r5
    1868:	426d      	negs	r5, r5
    186a:	1949      	adds	r1, r1, r5
    186c:	001d      	movs	r5, r3
    186e:	020b      	lsls	r3, r1, #8
    1870:	d400      	bmi.n	1874 <__aeabi_dadd+0x70>
    1872:	e082      	b.n	197a <__aeabi_dadd+0x176>
    1874:	4bca      	ldr	r3, [pc, #808]	; (1ba0 <__aeabi_dadd+0x39c>)
    1876:	3401      	adds	r4, #1
    1878:	429c      	cmp	r4, r3
    187a:	d100      	bne.n	187e <__aeabi_dadd+0x7a>
    187c:	e0fe      	b.n	1a7c <__aeabi_dadd+0x278>
    187e:	000a      	movs	r2, r1
    1880:	4656      	mov	r6, sl
    1882:	4bc8      	ldr	r3, [pc, #800]	; (1ba4 <__aeabi_dadd+0x3a0>)
    1884:	08ed      	lsrs	r5, r5, #3
    1886:	401a      	ands	r2, r3
    1888:	0750      	lsls	r0, r2, #29
    188a:	0564      	lsls	r4, r4, #21
    188c:	0252      	lsls	r2, r2, #9
    188e:	4305      	orrs	r5, r0
    1890:	0b12      	lsrs	r2, r2, #12
    1892:	0d64      	lsrs	r4, r4, #21
    1894:	2100      	movs	r1, #0
    1896:	0312      	lsls	r2, r2, #12
    1898:	0d0b      	lsrs	r3, r1, #20
    189a:	051b      	lsls	r3, r3, #20
    189c:	0564      	lsls	r4, r4, #21
    189e:	0b12      	lsrs	r2, r2, #12
    18a0:	431a      	orrs	r2, r3
    18a2:	0863      	lsrs	r3, r4, #1
    18a4:	4cc0      	ldr	r4, [pc, #768]	; (1ba8 <__aeabi_dadd+0x3a4>)
    18a6:	07f6      	lsls	r6, r6, #31
    18a8:	4014      	ands	r4, r2
    18aa:	431c      	orrs	r4, r3
    18ac:	0064      	lsls	r4, r4, #1
    18ae:	0864      	lsrs	r4, r4, #1
    18b0:	4334      	orrs	r4, r6
    18b2:	0028      	movs	r0, r5
    18b4:	0021      	movs	r1, r4
    18b6:	bc3c      	pop	{r2, r3, r4, r5}
    18b8:	4690      	mov	r8, r2
    18ba:	4699      	mov	r9, r3
    18bc:	46a2      	mov	sl, r4
    18be:	46ab      	mov	fp, r5
    18c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    18c2:	4bb7      	ldr	r3, [pc, #732]	; (1ba0 <__aeabi_dadd+0x39c>)
    18c4:	429c      	cmp	r4, r3
    18c6:	d0c6      	beq.n	1856 <__aeabi_dadd+0x52>
    18c8:	2380      	movs	r3, #128	; 0x80
    18ca:	041b      	lsls	r3, r3, #16
    18cc:	4318      	orrs	r0, r3
    18ce:	2e38      	cmp	r6, #56	; 0x38
    18d0:	dd00      	ble.n	18d4 <__aeabi_dadd+0xd0>
    18d2:	e0eb      	b.n	1aac <__aeabi_dadd+0x2a8>
    18d4:	2e1f      	cmp	r6, #31
    18d6:	dd00      	ble.n	18da <__aeabi_dadd+0xd6>
    18d8:	e11e      	b.n	1b18 <__aeabi_dadd+0x314>
    18da:	2320      	movs	r3, #32
    18dc:	1b9b      	subs	r3, r3, r6
    18de:	469c      	mov	ip, r3
    18e0:	0003      	movs	r3, r0
    18e2:	4667      	mov	r7, ip
    18e4:	40bb      	lsls	r3, r7
    18e6:	4698      	mov	r8, r3
    18e8:	0013      	movs	r3, r2
    18ea:	4647      	mov	r7, r8
    18ec:	40f3      	lsrs	r3, r6
    18ee:	433b      	orrs	r3, r7
    18f0:	4667      	mov	r7, ip
    18f2:	40ba      	lsls	r2, r7
    18f4:	1e57      	subs	r7, r2, #1
    18f6:	41ba      	sbcs	r2, r7
    18f8:	4313      	orrs	r3, r2
    18fa:	0002      	movs	r2, r0
    18fc:	40f2      	lsrs	r2, r6
    18fe:	1aeb      	subs	r3, r5, r3
    1900:	429d      	cmp	r5, r3
    1902:	41b6      	sbcs	r6, r6
    1904:	001d      	movs	r5, r3
    1906:	1a8a      	subs	r2, r1, r2
    1908:	4276      	negs	r6, r6
    190a:	1b91      	subs	r1, r2, r6
    190c:	020b      	lsls	r3, r1, #8
    190e:	d531      	bpl.n	1974 <__aeabi_dadd+0x170>
    1910:	024a      	lsls	r2, r1, #9
    1912:	0a56      	lsrs	r6, r2, #9
    1914:	2e00      	cmp	r6, #0
    1916:	d100      	bne.n	191a <__aeabi_dadd+0x116>
    1918:	e0b4      	b.n	1a84 <__aeabi_dadd+0x280>
    191a:	0030      	movs	r0, r6
    191c:	f000 fe72 	bl	2604 <__clzsi2>
    1920:	0003      	movs	r3, r0
    1922:	3b08      	subs	r3, #8
    1924:	2b1f      	cmp	r3, #31
    1926:	dd00      	ble.n	192a <__aeabi_dadd+0x126>
    1928:	e0b5      	b.n	1a96 <__aeabi_dadd+0x292>
    192a:	2220      	movs	r2, #32
    192c:	0029      	movs	r1, r5
    192e:	1ad2      	subs	r2, r2, r3
    1930:	40d1      	lsrs	r1, r2
    1932:	409e      	lsls	r6, r3
    1934:	000a      	movs	r2, r1
    1936:	409d      	lsls	r5, r3
    1938:	4332      	orrs	r2, r6
    193a:	429c      	cmp	r4, r3
    193c:	dd00      	ble.n	1940 <__aeabi_dadd+0x13c>
    193e:	e0b1      	b.n	1aa4 <__aeabi_dadd+0x2a0>
    1940:	1b1c      	subs	r4, r3, r4
    1942:	1c63      	adds	r3, r4, #1
    1944:	2b1f      	cmp	r3, #31
    1946:	dd00      	ble.n	194a <__aeabi_dadd+0x146>
    1948:	e0d5      	b.n	1af6 <__aeabi_dadd+0x2f2>
    194a:	2120      	movs	r1, #32
    194c:	0014      	movs	r4, r2
    194e:	0028      	movs	r0, r5
    1950:	1ac9      	subs	r1, r1, r3
    1952:	408c      	lsls	r4, r1
    1954:	40d8      	lsrs	r0, r3
    1956:	408d      	lsls	r5, r1
    1958:	4304      	orrs	r4, r0
    195a:	40da      	lsrs	r2, r3
    195c:	1e68      	subs	r0, r5, #1
    195e:	4185      	sbcs	r5, r0
    1960:	0011      	movs	r1, r2
    1962:	4325      	orrs	r5, r4
    1964:	2400      	movs	r4, #0
    1966:	e776      	b.n	1856 <__aeabi_dadd+0x52>
    1968:	4641      	mov	r1, r8
    196a:	4331      	orrs	r1, r6
    196c:	d100      	bne.n	1970 <__aeabi_dadd+0x16c>
    196e:	e234      	b.n	1dda <__aeabi_dadd+0x5d6>
    1970:	0031      	movs	r1, r6
    1972:	4645      	mov	r5, r8
    1974:	076b      	lsls	r3, r5, #29
    1976:	d000      	beq.n	197a <__aeabi_dadd+0x176>
    1978:	e76f      	b.n	185a <__aeabi_dadd+0x56>
    197a:	4656      	mov	r6, sl
    197c:	0748      	lsls	r0, r1, #29
    197e:	08ed      	lsrs	r5, r5, #3
    1980:	08c9      	lsrs	r1, r1, #3
    1982:	4305      	orrs	r5, r0
    1984:	4b86      	ldr	r3, [pc, #536]	; (1ba0 <__aeabi_dadd+0x39c>)
    1986:	429c      	cmp	r4, r3
    1988:	d035      	beq.n	19f6 <__aeabi_dadd+0x1f2>
    198a:	030a      	lsls	r2, r1, #12
    198c:	0564      	lsls	r4, r4, #21
    198e:	0b12      	lsrs	r2, r2, #12
    1990:	0d64      	lsrs	r4, r4, #21
    1992:	e77f      	b.n	1894 <__aeabi_dadd+0x90>
    1994:	4663      	mov	r3, ip
    1996:	1ae3      	subs	r3, r4, r3
    1998:	469b      	mov	fp, r3
    199a:	2b00      	cmp	r3, #0
    199c:	dc00      	bgt.n	19a0 <__aeabi_dadd+0x19c>
    199e:	e08b      	b.n	1ab8 <__aeabi_dadd+0x2b4>
    19a0:	4667      	mov	r7, ip
    19a2:	2f00      	cmp	r7, #0
    19a4:	d03c      	beq.n	1a20 <__aeabi_dadd+0x21c>
    19a6:	4f7e      	ldr	r7, [pc, #504]	; (1ba0 <__aeabi_dadd+0x39c>)
    19a8:	42bc      	cmp	r4, r7
    19aa:	d100      	bne.n	19ae <__aeabi_dadd+0x1aa>
    19ac:	e753      	b.n	1856 <__aeabi_dadd+0x52>
    19ae:	2780      	movs	r7, #128	; 0x80
    19b0:	043f      	lsls	r7, r7, #16
    19b2:	4338      	orrs	r0, r7
    19b4:	465b      	mov	r3, fp
    19b6:	2b38      	cmp	r3, #56	; 0x38
    19b8:	dc00      	bgt.n	19bc <__aeabi_dadd+0x1b8>
    19ba:	e0f7      	b.n	1bac <__aeabi_dadd+0x3a8>
    19bc:	4302      	orrs	r2, r0
    19be:	1e50      	subs	r0, r2, #1
    19c0:	4182      	sbcs	r2, r0
    19c2:	2000      	movs	r0, #0
    19c4:	b2d2      	uxtb	r2, r2
    19c6:	1953      	adds	r3, r2, r5
    19c8:	1842      	adds	r2, r0, r1
    19ca:	42ab      	cmp	r3, r5
    19cc:	4189      	sbcs	r1, r1
    19ce:	001d      	movs	r5, r3
    19d0:	4249      	negs	r1, r1
    19d2:	1889      	adds	r1, r1, r2
    19d4:	020b      	lsls	r3, r1, #8
    19d6:	d5cd      	bpl.n	1974 <__aeabi_dadd+0x170>
    19d8:	4b71      	ldr	r3, [pc, #452]	; (1ba0 <__aeabi_dadd+0x39c>)
    19da:	3401      	adds	r4, #1
    19dc:	429c      	cmp	r4, r3
    19de:	d100      	bne.n	19e2 <__aeabi_dadd+0x1de>
    19e0:	e13d      	b.n	1c5e <__aeabi_dadd+0x45a>
    19e2:	2001      	movs	r0, #1
    19e4:	4a6f      	ldr	r2, [pc, #444]	; (1ba4 <__aeabi_dadd+0x3a0>)
    19e6:	086b      	lsrs	r3, r5, #1
    19e8:	400a      	ands	r2, r1
    19ea:	4028      	ands	r0, r5
    19ec:	4318      	orrs	r0, r3
    19ee:	07d5      	lsls	r5, r2, #31
    19f0:	4305      	orrs	r5, r0
    19f2:	0851      	lsrs	r1, r2, #1
    19f4:	e72f      	b.n	1856 <__aeabi_dadd+0x52>
    19f6:	002b      	movs	r3, r5
    19f8:	430b      	orrs	r3, r1
    19fa:	d100      	bne.n	19fe <__aeabi_dadd+0x1fa>
    19fc:	e1cb      	b.n	1d96 <__aeabi_dadd+0x592>
    19fe:	2380      	movs	r3, #128	; 0x80
    1a00:	031b      	lsls	r3, r3, #12
    1a02:	430b      	orrs	r3, r1
    1a04:	031a      	lsls	r2, r3, #12
    1a06:	0b12      	lsrs	r2, r2, #12
    1a08:	e744      	b.n	1894 <__aeabi_dadd+0x90>
    1a0a:	3e01      	subs	r6, #1
    1a0c:	2e00      	cmp	r6, #0
    1a0e:	d16d      	bne.n	1aec <__aeabi_dadd+0x2e8>
    1a10:	1aae      	subs	r6, r5, r2
    1a12:	42b5      	cmp	r5, r6
    1a14:	419b      	sbcs	r3, r3
    1a16:	1a09      	subs	r1, r1, r0
    1a18:	425b      	negs	r3, r3
    1a1a:	1ac9      	subs	r1, r1, r3
    1a1c:	0035      	movs	r5, r6
    1a1e:	e775      	b.n	190c <__aeabi_dadd+0x108>
    1a20:	0007      	movs	r7, r0
    1a22:	4317      	orrs	r7, r2
    1a24:	d100      	bne.n	1a28 <__aeabi_dadd+0x224>
    1a26:	e716      	b.n	1856 <__aeabi_dadd+0x52>
    1a28:	2301      	movs	r3, #1
    1a2a:	425b      	negs	r3, r3
    1a2c:	469c      	mov	ip, r3
    1a2e:	44e3      	add	fp, ip
    1a30:	465b      	mov	r3, fp
    1a32:	2b00      	cmp	r3, #0
    1a34:	d000      	beq.n	1a38 <__aeabi_dadd+0x234>
    1a36:	e0e0      	b.n	1bfa <__aeabi_dadd+0x3f6>
    1a38:	18aa      	adds	r2, r5, r2
    1a3a:	42aa      	cmp	r2, r5
    1a3c:	419b      	sbcs	r3, r3
    1a3e:	1809      	adds	r1, r1, r0
    1a40:	425b      	negs	r3, r3
    1a42:	1859      	adds	r1, r3, r1
    1a44:	0015      	movs	r5, r2
    1a46:	e7c5      	b.n	19d4 <__aeabi_dadd+0x1d0>
    1a48:	2e00      	cmp	r6, #0
    1a4a:	d175      	bne.n	1b38 <__aeabi_dadd+0x334>
    1a4c:	1c66      	adds	r6, r4, #1
    1a4e:	0576      	lsls	r6, r6, #21
    1a50:	0d76      	lsrs	r6, r6, #21
    1a52:	2e01      	cmp	r6, #1
    1a54:	dc00      	bgt.n	1a58 <__aeabi_dadd+0x254>
    1a56:	e0f3      	b.n	1c40 <__aeabi_dadd+0x43c>
    1a58:	1aae      	subs	r6, r5, r2
    1a5a:	46b0      	mov	r8, r6
    1a5c:	4545      	cmp	r5, r8
    1a5e:	41bf      	sbcs	r7, r7
    1a60:	1a0e      	subs	r6, r1, r0
    1a62:	427f      	negs	r7, r7
    1a64:	1bf6      	subs	r6, r6, r7
    1a66:	0237      	lsls	r7, r6, #8
    1a68:	d400      	bmi.n	1a6c <__aeabi_dadd+0x268>
    1a6a:	e08f      	b.n	1b8c <__aeabi_dadd+0x388>
    1a6c:	1b55      	subs	r5, r2, r5
    1a6e:	42aa      	cmp	r2, r5
    1a70:	41b6      	sbcs	r6, r6
    1a72:	1a41      	subs	r1, r0, r1
    1a74:	4276      	negs	r6, r6
    1a76:	1b8e      	subs	r6, r1, r6
    1a78:	469a      	mov	sl, r3
    1a7a:	e74b      	b.n	1914 <__aeabi_dadd+0x110>
    1a7c:	4656      	mov	r6, sl
    1a7e:	2200      	movs	r2, #0
    1a80:	2500      	movs	r5, #0
    1a82:	e707      	b.n	1894 <__aeabi_dadd+0x90>
    1a84:	0028      	movs	r0, r5
    1a86:	f000 fdbd 	bl	2604 <__clzsi2>
    1a8a:	3020      	adds	r0, #32
    1a8c:	0003      	movs	r3, r0
    1a8e:	3b08      	subs	r3, #8
    1a90:	2b1f      	cmp	r3, #31
    1a92:	dc00      	bgt.n	1a96 <__aeabi_dadd+0x292>
    1a94:	e749      	b.n	192a <__aeabi_dadd+0x126>
    1a96:	002a      	movs	r2, r5
    1a98:	3828      	subs	r0, #40	; 0x28
    1a9a:	4082      	lsls	r2, r0
    1a9c:	2500      	movs	r5, #0
    1a9e:	429c      	cmp	r4, r3
    1aa0:	dc00      	bgt.n	1aa4 <__aeabi_dadd+0x2a0>
    1aa2:	e74d      	b.n	1940 <__aeabi_dadd+0x13c>
    1aa4:	493f      	ldr	r1, [pc, #252]	; (1ba4 <__aeabi_dadd+0x3a0>)
    1aa6:	1ae4      	subs	r4, r4, r3
    1aa8:	4011      	ands	r1, r2
    1aaa:	e6d4      	b.n	1856 <__aeabi_dadd+0x52>
    1aac:	4302      	orrs	r2, r0
    1aae:	1e50      	subs	r0, r2, #1
    1ab0:	4182      	sbcs	r2, r0
    1ab2:	b2d3      	uxtb	r3, r2
    1ab4:	2200      	movs	r2, #0
    1ab6:	e722      	b.n	18fe <__aeabi_dadd+0xfa>
    1ab8:	2b00      	cmp	r3, #0
    1aba:	d000      	beq.n	1abe <__aeabi_dadd+0x2ba>
    1abc:	e0f3      	b.n	1ca6 <__aeabi_dadd+0x4a2>
    1abe:	1c63      	adds	r3, r4, #1
    1ac0:	469c      	mov	ip, r3
    1ac2:	055b      	lsls	r3, r3, #21
    1ac4:	0d5b      	lsrs	r3, r3, #21
    1ac6:	2b01      	cmp	r3, #1
    1ac8:	dc00      	bgt.n	1acc <__aeabi_dadd+0x2c8>
    1aca:	e09f      	b.n	1c0c <__aeabi_dadd+0x408>
    1acc:	4b34      	ldr	r3, [pc, #208]	; (1ba0 <__aeabi_dadd+0x39c>)
    1ace:	459c      	cmp	ip, r3
    1ad0:	d100      	bne.n	1ad4 <__aeabi_dadd+0x2d0>
    1ad2:	e0c3      	b.n	1c5c <__aeabi_dadd+0x458>
    1ad4:	18aa      	adds	r2, r5, r2
    1ad6:	1809      	adds	r1, r1, r0
    1ad8:	42aa      	cmp	r2, r5
    1ada:	4180      	sbcs	r0, r0
    1adc:	4240      	negs	r0, r0
    1ade:	1841      	adds	r1, r0, r1
    1ae0:	07cd      	lsls	r5, r1, #31
    1ae2:	0852      	lsrs	r2, r2, #1
    1ae4:	4315      	orrs	r5, r2
    1ae6:	0849      	lsrs	r1, r1, #1
    1ae8:	4664      	mov	r4, ip
    1aea:	e6b4      	b.n	1856 <__aeabi_dadd+0x52>
    1aec:	4b2c      	ldr	r3, [pc, #176]	; (1ba0 <__aeabi_dadd+0x39c>)
    1aee:	429c      	cmp	r4, r3
    1af0:	d000      	beq.n	1af4 <__aeabi_dadd+0x2f0>
    1af2:	e6ec      	b.n	18ce <__aeabi_dadd+0xca>
    1af4:	e6af      	b.n	1856 <__aeabi_dadd+0x52>
    1af6:	0011      	movs	r1, r2
    1af8:	3c1f      	subs	r4, #31
    1afa:	40e1      	lsrs	r1, r4
    1afc:	000c      	movs	r4, r1
    1afe:	2b20      	cmp	r3, #32
    1b00:	d100      	bne.n	1b04 <__aeabi_dadd+0x300>
    1b02:	e07f      	b.n	1c04 <__aeabi_dadd+0x400>
    1b04:	2140      	movs	r1, #64	; 0x40
    1b06:	1acb      	subs	r3, r1, r3
    1b08:	409a      	lsls	r2, r3
    1b0a:	4315      	orrs	r5, r2
    1b0c:	1e6a      	subs	r2, r5, #1
    1b0e:	4195      	sbcs	r5, r2
    1b10:	2100      	movs	r1, #0
    1b12:	4325      	orrs	r5, r4
    1b14:	2400      	movs	r4, #0
    1b16:	e72d      	b.n	1974 <__aeabi_dadd+0x170>
    1b18:	0033      	movs	r3, r6
    1b1a:	0007      	movs	r7, r0
    1b1c:	3b20      	subs	r3, #32
    1b1e:	40df      	lsrs	r7, r3
    1b20:	003b      	movs	r3, r7
    1b22:	2e20      	cmp	r6, #32
    1b24:	d070      	beq.n	1c08 <__aeabi_dadd+0x404>
    1b26:	2740      	movs	r7, #64	; 0x40
    1b28:	1bbe      	subs	r6, r7, r6
    1b2a:	40b0      	lsls	r0, r6
    1b2c:	4302      	orrs	r2, r0
    1b2e:	1e50      	subs	r0, r2, #1
    1b30:	4182      	sbcs	r2, r0
    1b32:	4313      	orrs	r3, r2
    1b34:	2200      	movs	r2, #0
    1b36:	e6e2      	b.n	18fe <__aeabi_dadd+0xfa>
    1b38:	2c00      	cmp	r4, #0
    1b3a:	d04f      	beq.n	1bdc <__aeabi_dadd+0x3d8>
    1b3c:	4c18      	ldr	r4, [pc, #96]	; (1ba0 <__aeabi_dadd+0x39c>)
    1b3e:	45a4      	cmp	ip, r4
    1b40:	d100      	bne.n	1b44 <__aeabi_dadd+0x340>
    1b42:	e0ab      	b.n	1c9c <__aeabi_dadd+0x498>
    1b44:	2480      	movs	r4, #128	; 0x80
    1b46:	0424      	lsls	r4, r4, #16
    1b48:	4276      	negs	r6, r6
    1b4a:	4321      	orrs	r1, r4
    1b4c:	2e38      	cmp	r6, #56	; 0x38
    1b4e:	dd00      	ble.n	1b52 <__aeabi_dadd+0x34e>
    1b50:	e0df      	b.n	1d12 <__aeabi_dadd+0x50e>
    1b52:	2e1f      	cmp	r6, #31
    1b54:	dd00      	ble.n	1b58 <__aeabi_dadd+0x354>
    1b56:	e143      	b.n	1de0 <__aeabi_dadd+0x5dc>
    1b58:	2720      	movs	r7, #32
    1b5a:	1bbc      	subs	r4, r7, r6
    1b5c:	46a1      	mov	r9, r4
    1b5e:	000c      	movs	r4, r1
    1b60:	464f      	mov	r7, r9
    1b62:	40bc      	lsls	r4, r7
    1b64:	46a0      	mov	r8, r4
    1b66:	002c      	movs	r4, r5
    1b68:	4647      	mov	r7, r8
    1b6a:	40f4      	lsrs	r4, r6
    1b6c:	433c      	orrs	r4, r7
    1b6e:	464f      	mov	r7, r9
    1b70:	40bd      	lsls	r5, r7
    1b72:	1e6f      	subs	r7, r5, #1
    1b74:	41bd      	sbcs	r5, r7
    1b76:	40f1      	lsrs	r1, r6
    1b78:	432c      	orrs	r4, r5
    1b7a:	1b15      	subs	r5, r2, r4
    1b7c:	42aa      	cmp	r2, r5
    1b7e:	4192      	sbcs	r2, r2
    1b80:	1a41      	subs	r1, r0, r1
    1b82:	4252      	negs	r2, r2
    1b84:	1a89      	subs	r1, r1, r2
    1b86:	4664      	mov	r4, ip
    1b88:	469a      	mov	sl, r3
    1b8a:	e6bf      	b.n	190c <__aeabi_dadd+0x108>
    1b8c:	4641      	mov	r1, r8
    1b8e:	4645      	mov	r5, r8
    1b90:	4331      	orrs	r1, r6
    1b92:	d000      	beq.n	1b96 <__aeabi_dadd+0x392>
    1b94:	e6be      	b.n	1914 <__aeabi_dadd+0x110>
    1b96:	2600      	movs	r6, #0
    1b98:	2400      	movs	r4, #0
    1b9a:	2500      	movs	r5, #0
    1b9c:	e6f2      	b.n	1984 <__aeabi_dadd+0x180>
    1b9e:	46c0      	nop			; (mov r8, r8)
    1ba0:	000007ff 	.word	0x000007ff
    1ba4:	ff7fffff 	.word	0xff7fffff
    1ba8:	800fffff 	.word	0x800fffff
    1bac:	2b1f      	cmp	r3, #31
    1bae:	dc59      	bgt.n	1c64 <__aeabi_dadd+0x460>
    1bb0:	2720      	movs	r7, #32
    1bb2:	1aff      	subs	r7, r7, r3
    1bb4:	46bc      	mov	ip, r7
    1bb6:	0007      	movs	r7, r0
    1bb8:	4663      	mov	r3, ip
    1bba:	409f      	lsls	r7, r3
    1bbc:	465b      	mov	r3, fp
    1bbe:	46b9      	mov	r9, r7
    1bc0:	0017      	movs	r7, r2
    1bc2:	40df      	lsrs	r7, r3
    1bc4:	46b8      	mov	r8, r7
    1bc6:	464f      	mov	r7, r9
    1bc8:	4643      	mov	r3, r8
    1bca:	431f      	orrs	r7, r3
    1bcc:	4663      	mov	r3, ip
    1bce:	409a      	lsls	r2, r3
    1bd0:	1e53      	subs	r3, r2, #1
    1bd2:	419a      	sbcs	r2, r3
    1bd4:	465b      	mov	r3, fp
    1bd6:	433a      	orrs	r2, r7
    1bd8:	40d8      	lsrs	r0, r3
    1bda:	e6f4      	b.n	19c6 <__aeabi_dadd+0x1c2>
    1bdc:	000c      	movs	r4, r1
    1bde:	432c      	orrs	r4, r5
    1be0:	d05c      	beq.n	1c9c <__aeabi_dadd+0x498>
    1be2:	43f6      	mvns	r6, r6
    1be4:	2e00      	cmp	r6, #0
    1be6:	d155      	bne.n	1c94 <__aeabi_dadd+0x490>
    1be8:	1b55      	subs	r5, r2, r5
    1bea:	42aa      	cmp	r2, r5
    1bec:	41a4      	sbcs	r4, r4
    1bee:	1a41      	subs	r1, r0, r1
    1bf0:	4264      	negs	r4, r4
    1bf2:	1b09      	subs	r1, r1, r4
    1bf4:	469a      	mov	sl, r3
    1bf6:	4664      	mov	r4, ip
    1bf8:	e688      	b.n	190c <__aeabi_dadd+0x108>
    1bfa:	4f96      	ldr	r7, [pc, #600]	; (1e54 <__aeabi_dadd+0x650>)
    1bfc:	42bc      	cmp	r4, r7
    1bfe:	d000      	beq.n	1c02 <__aeabi_dadd+0x3fe>
    1c00:	e6d8      	b.n	19b4 <__aeabi_dadd+0x1b0>
    1c02:	e628      	b.n	1856 <__aeabi_dadd+0x52>
    1c04:	2200      	movs	r2, #0
    1c06:	e780      	b.n	1b0a <__aeabi_dadd+0x306>
    1c08:	2000      	movs	r0, #0
    1c0a:	e78f      	b.n	1b2c <__aeabi_dadd+0x328>
    1c0c:	000b      	movs	r3, r1
    1c0e:	432b      	orrs	r3, r5
    1c10:	2c00      	cmp	r4, #0
    1c12:	d000      	beq.n	1c16 <__aeabi_dadd+0x412>
    1c14:	e0c2      	b.n	1d9c <__aeabi_dadd+0x598>
    1c16:	2b00      	cmp	r3, #0
    1c18:	d100      	bne.n	1c1c <__aeabi_dadd+0x418>
    1c1a:	e101      	b.n	1e20 <__aeabi_dadd+0x61c>
    1c1c:	0003      	movs	r3, r0
    1c1e:	4313      	orrs	r3, r2
    1c20:	d100      	bne.n	1c24 <__aeabi_dadd+0x420>
    1c22:	e618      	b.n	1856 <__aeabi_dadd+0x52>
    1c24:	18ab      	adds	r3, r5, r2
    1c26:	42ab      	cmp	r3, r5
    1c28:	41b6      	sbcs	r6, r6
    1c2a:	1809      	adds	r1, r1, r0
    1c2c:	4276      	negs	r6, r6
    1c2e:	1871      	adds	r1, r6, r1
    1c30:	020a      	lsls	r2, r1, #8
    1c32:	d400      	bmi.n	1c36 <__aeabi_dadd+0x432>
    1c34:	e109      	b.n	1e4a <__aeabi_dadd+0x646>
    1c36:	4a88      	ldr	r2, [pc, #544]	; (1e58 <__aeabi_dadd+0x654>)
    1c38:	001d      	movs	r5, r3
    1c3a:	4011      	ands	r1, r2
    1c3c:	4664      	mov	r4, ip
    1c3e:	e60a      	b.n	1856 <__aeabi_dadd+0x52>
    1c40:	2c00      	cmp	r4, #0
    1c42:	d15b      	bne.n	1cfc <__aeabi_dadd+0x4f8>
    1c44:	000e      	movs	r6, r1
    1c46:	432e      	orrs	r6, r5
    1c48:	d000      	beq.n	1c4c <__aeabi_dadd+0x448>
    1c4a:	e08a      	b.n	1d62 <__aeabi_dadd+0x55e>
    1c4c:	0001      	movs	r1, r0
    1c4e:	4311      	orrs	r1, r2
    1c50:	d100      	bne.n	1c54 <__aeabi_dadd+0x450>
    1c52:	e0c2      	b.n	1dda <__aeabi_dadd+0x5d6>
    1c54:	0001      	movs	r1, r0
    1c56:	0015      	movs	r5, r2
    1c58:	469a      	mov	sl, r3
    1c5a:	e5fc      	b.n	1856 <__aeabi_dadd+0x52>
    1c5c:	4664      	mov	r4, ip
    1c5e:	2100      	movs	r1, #0
    1c60:	2500      	movs	r5, #0
    1c62:	e68f      	b.n	1984 <__aeabi_dadd+0x180>
    1c64:	2320      	movs	r3, #32
    1c66:	425b      	negs	r3, r3
    1c68:	469c      	mov	ip, r3
    1c6a:	44dc      	add	ip, fp
    1c6c:	4663      	mov	r3, ip
    1c6e:	0007      	movs	r7, r0
    1c70:	40df      	lsrs	r7, r3
    1c72:	465b      	mov	r3, fp
    1c74:	46bc      	mov	ip, r7
    1c76:	2b20      	cmp	r3, #32
    1c78:	d100      	bne.n	1c7c <__aeabi_dadd+0x478>
    1c7a:	e0ac      	b.n	1dd6 <__aeabi_dadd+0x5d2>
    1c7c:	2340      	movs	r3, #64	; 0x40
    1c7e:	465f      	mov	r7, fp
    1c80:	1bdb      	subs	r3, r3, r7
    1c82:	4098      	lsls	r0, r3
    1c84:	4302      	orrs	r2, r0
    1c86:	1e50      	subs	r0, r2, #1
    1c88:	4182      	sbcs	r2, r0
    1c8a:	4663      	mov	r3, ip
    1c8c:	4313      	orrs	r3, r2
    1c8e:	001a      	movs	r2, r3
    1c90:	2000      	movs	r0, #0
    1c92:	e698      	b.n	19c6 <__aeabi_dadd+0x1c2>
    1c94:	4c6f      	ldr	r4, [pc, #444]	; (1e54 <__aeabi_dadd+0x650>)
    1c96:	45a4      	cmp	ip, r4
    1c98:	d000      	beq.n	1c9c <__aeabi_dadd+0x498>
    1c9a:	e757      	b.n	1b4c <__aeabi_dadd+0x348>
    1c9c:	0001      	movs	r1, r0
    1c9e:	0015      	movs	r5, r2
    1ca0:	4664      	mov	r4, ip
    1ca2:	469a      	mov	sl, r3
    1ca4:	e5d7      	b.n	1856 <__aeabi_dadd+0x52>
    1ca6:	2c00      	cmp	r4, #0
    1ca8:	d139      	bne.n	1d1e <__aeabi_dadd+0x51a>
    1caa:	000c      	movs	r4, r1
    1cac:	432c      	orrs	r4, r5
    1cae:	d06e      	beq.n	1d8e <__aeabi_dadd+0x58a>
    1cb0:	43db      	mvns	r3, r3
    1cb2:	2b00      	cmp	r3, #0
    1cb4:	d01a      	beq.n	1cec <__aeabi_dadd+0x4e8>
    1cb6:	4c67      	ldr	r4, [pc, #412]	; (1e54 <__aeabi_dadd+0x650>)
    1cb8:	45a4      	cmp	ip, r4
    1cba:	d068      	beq.n	1d8e <__aeabi_dadd+0x58a>
    1cbc:	2b38      	cmp	r3, #56	; 0x38
    1cbe:	dd00      	ble.n	1cc2 <__aeabi_dadd+0x4be>
    1cc0:	e0a4      	b.n	1e0c <__aeabi_dadd+0x608>
    1cc2:	2b1f      	cmp	r3, #31
    1cc4:	dd00      	ble.n	1cc8 <__aeabi_dadd+0x4c4>
    1cc6:	e0ae      	b.n	1e26 <__aeabi_dadd+0x622>
    1cc8:	2420      	movs	r4, #32
    1cca:	000f      	movs	r7, r1
    1ccc:	1ae4      	subs	r4, r4, r3
    1cce:	40a7      	lsls	r7, r4
    1cd0:	46b9      	mov	r9, r7
    1cd2:	002f      	movs	r7, r5
    1cd4:	40df      	lsrs	r7, r3
    1cd6:	46b8      	mov	r8, r7
    1cd8:	46a3      	mov	fp, r4
    1cda:	464f      	mov	r7, r9
    1cdc:	4644      	mov	r4, r8
    1cde:	4327      	orrs	r7, r4
    1ce0:	465c      	mov	r4, fp
    1ce2:	40a5      	lsls	r5, r4
    1ce4:	1e6c      	subs	r4, r5, #1
    1ce6:	41a5      	sbcs	r5, r4
    1ce8:	40d9      	lsrs	r1, r3
    1cea:	433d      	orrs	r5, r7
    1cec:	18ad      	adds	r5, r5, r2
    1cee:	4295      	cmp	r5, r2
    1cf0:	419b      	sbcs	r3, r3
    1cf2:	1809      	adds	r1, r1, r0
    1cf4:	425b      	negs	r3, r3
    1cf6:	1859      	adds	r1, r3, r1
    1cf8:	4664      	mov	r4, ip
    1cfa:	e66b      	b.n	19d4 <__aeabi_dadd+0x1d0>
    1cfc:	000c      	movs	r4, r1
    1cfe:	432c      	orrs	r4, r5
    1d00:	d115      	bne.n	1d2e <__aeabi_dadd+0x52a>
    1d02:	0001      	movs	r1, r0
    1d04:	4311      	orrs	r1, r2
    1d06:	d07b      	beq.n	1e00 <__aeabi_dadd+0x5fc>
    1d08:	0001      	movs	r1, r0
    1d0a:	0015      	movs	r5, r2
    1d0c:	469a      	mov	sl, r3
    1d0e:	4c51      	ldr	r4, [pc, #324]	; (1e54 <__aeabi_dadd+0x650>)
    1d10:	e5a1      	b.n	1856 <__aeabi_dadd+0x52>
    1d12:	430d      	orrs	r5, r1
    1d14:	1e69      	subs	r1, r5, #1
    1d16:	418d      	sbcs	r5, r1
    1d18:	2100      	movs	r1, #0
    1d1a:	b2ec      	uxtb	r4, r5
    1d1c:	e72d      	b.n	1b7a <__aeabi_dadd+0x376>
    1d1e:	4c4d      	ldr	r4, [pc, #308]	; (1e54 <__aeabi_dadd+0x650>)
    1d20:	45a4      	cmp	ip, r4
    1d22:	d034      	beq.n	1d8e <__aeabi_dadd+0x58a>
    1d24:	2480      	movs	r4, #128	; 0x80
    1d26:	0424      	lsls	r4, r4, #16
    1d28:	425b      	negs	r3, r3
    1d2a:	4321      	orrs	r1, r4
    1d2c:	e7c6      	b.n	1cbc <__aeabi_dadd+0x4b8>
    1d2e:	0004      	movs	r4, r0
    1d30:	4314      	orrs	r4, r2
    1d32:	d04e      	beq.n	1dd2 <__aeabi_dadd+0x5ce>
    1d34:	08ed      	lsrs	r5, r5, #3
    1d36:	074c      	lsls	r4, r1, #29
    1d38:	432c      	orrs	r4, r5
    1d3a:	2580      	movs	r5, #128	; 0x80
    1d3c:	08c9      	lsrs	r1, r1, #3
    1d3e:	032d      	lsls	r5, r5, #12
    1d40:	4229      	tst	r1, r5
    1d42:	d008      	beq.n	1d56 <__aeabi_dadd+0x552>
    1d44:	08c6      	lsrs	r6, r0, #3
    1d46:	422e      	tst	r6, r5
    1d48:	d105      	bne.n	1d56 <__aeabi_dadd+0x552>
    1d4a:	08d2      	lsrs	r2, r2, #3
    1d4c:	0741      	lsls	r1, r0, #29
    1d4e:	4311      	orrs	r1, r2
    1d50:	000c      	movs	r4, r1
    1d52:	469a      	mov	sl, r3
    1d54:	0031      	movs	r1, r6
    1d56:	0f62      	lsrs	r2, r4, #29
    1d58:	00c9      	lsls	r1, r1, #3
    1d5a:	00e5      	lsls	r5, r4, #3
    1d5c:	4311      	orrs	r1, r2
    1d5e:	4c3d      	ldr	r4, [pc, #244]	; (1e54 <__aeabi_dadd+0x650>)
    1d60:	e579      	b.n	1856 <__aeabi_dadd+0x52>
    1d62:	0006      	movs	r6, r0
    1d64:	4316      	orrs	r6, r2
    1d66:	d100      	bne.n	1d6a <__aeabi_dadd+0x566>
    1d68:	e575      	b.n	1856 <__aeabi_dadd+0x52>
    1d6a:	1aae      	subs	r6, r5, r2
    1d6c:	46b0      	mov	r8, r6
    1d6e:	4545      	cmp	r5, r8
    1d70:	41bf      	sbcs	r7, r7
    1d72:	1a0e      	subs	r6, r1, r0
    1d74:	427f      	negs	r7, r7
    1d76:	1bf6      	subs	r6, r6, r7
    1d78:	0237      	lsls	r7, r6, #8
    1d7a:	d400      	bmi.n	1d7e <__aeabi_dadd+0x57a>
    1d7c:	e5f4      	b.n	1968 <__aeabi_dadd+0x164>
    1d7e:	1b55      	subs	r5, r2, r5
    1d80:	42aa      	cmp	r2, r5
    1d82:	41b6      	sbcs	r6, r6
    1d84:	1a41      	subs	r1, r0, r1
    1d86:	4276      	negs	r6, r6
    1d88:	1b89      	subs	r1, r1, r6
    1d8a:	469a      	mov	sl, r3
    1d8c:	e563      	b.n	1856 <__aeabi_dadd+0x52>
    1d8e:	0001      	movs	r1, r0
    1d90:	0015      	movs	r5, r2
    1d92:	4664      	mov	r4, ip
    1d94:	e55f      	b.n	1856 <__aeabi_dadd+0x52>
    1d96:	2200      	movs	r2, #0
    1d98:	2500      	movs	r5, #0
    1d9a:	e57b      	b.n	1894 <__aeabi_dadd+0x90>
    1d9c:	2b00      	cmp	r3, #0
    1d9e:	d03b      	beq.n	1e18 <__aeabi_dadd+0x614>
    1da0:	0003      	movs	r3, r0
    1da2:	4313      	orrs	r3, r2
    1da4:	d015      	beq.n	1dd2 <__aeabi_dadd+0x5ce>
    1da6:	08ed      	lsrs	r5, r5, #3
    1da8:	074b      	lsls	r3, r1, #29
    1daa:	432b      	orrs	r3, r5
    1dac:	2580      	movs	r5, #128	; 0x80
    1dae:	08c9      	lsrs	r1, r1, #3
    1db0:	032d      	lsls	r5, r5, #12
    1db2:	4229      	tst	r1, r5
    1db4:	d007      	beq.n	1dc6 <__aeabi_dadd+0x5c2>
    1db6:	08c4      	lsrs	r4, r0, #3
    1db8:	422c      	tst	r4, r5
    1dba:	d104      	bne.n	1dc6 <__aeabi_dadd+0x5c2>
    1dbc:	0741      	lsls	r1, r0, #29
    1dbe:	000b      	movs	r3, r1
    1dc0:	0021      	movs	r1, r4
    1dc2:	08d2      	lsrs	r2, r2, #3
    1dc4:	4313      	orrs	r3, r2
    1dc6:	00c9      	lsls	r1, r1, #3
    1dc8:	0f5a      	lsrs	r2, r3, #29
    1dca:	4311      	orrs	r1, r2
    1dcc:	00dd      	lsls	r5, r3, #3
    1dce:	4c21      	ldr	r4, [pc, #132]	; (1e54 <__aeabi_dadd+0x650>)
    1dd0:	e541      	b.n	1856 <__aeabi_dadd+0x52>
    1dd2:	4c20      	ldr	r4, [pc, #128]	; (1e54 <__aeabi_dadd+0x650>)
    1dd4:	e53f      	b.n	1856 <__aeabi_dadd+0x52>
    1dd6:	2000      	movs	r0, #0
    1dd8:	e754      	b.n	1c84 <__aeabi_dadd+0x480>
    1dda:	2600      	movs	r6, #0
    1ddc:	2500      	movs	r5, #0
    1dde:	e5d1      	b.n	1984 <__aeabi_dadd+0x180>
    1de0:	0034      	movs	r4, r6
    1de2:	000f      	movs	r7, r1
    1de4:	3c20      	subs	r4, #32
    1de6:	40e7      	lsrs	r7, r4
    1de8:	003c      	movs	r4, r7
    1dea:	2e20      	cmp	r6, #32
    1dec:	d02b      	beq.n	1e46 <__aeabi_dadd+0x642>
    1dee:	2740      	movs	r7, #64	; 0x40
    1df0:	1bbe      	subs	r6, r7, r6
    1df2:	40b1      	lsls	r1, r6
    1df4:	430d      	orrs	r5, r1
    1df6:	1e69      	subs	r1, r5, #1
    1df8:	418d      	sbcs	r5, r1
    1dfa:	2100      	movs	r1, #0
    1dfc:	432c      	orrs	r4, r5
    1dfe:	e6bc      	b.n	1b7a <__aeabi_dadd+0x376>
    1e00:	2180      	movs	r1, #128	; 0x80
    1e02:	2600      	movs	r6, #0
    1e04:	0309      	lsls	r1, r1, #12
    1e06:	4c13      	ldr	r4, [pc, #76]	; (1e54 <__aeabi_dadd+0x650>)
    1e08:	2500      	movs	r5, #0
    1e0a:	e5bb      	b.n	1984 <__aeabi_dadd+0x180>
    1e0c:	430d      	orrs	r5, r1
    1e0e:	1e69      	subs	r1, r5, #1
    1e10:	418d      	sbcs	r5, r1
    1e12:	2100      	movs	r1, #0
    1e14:	b2ed      	uxtb	r5, r5
    1e16:	e769      	b.n	1cec <__aeabi_dadd+0x4e8>
    1e18:	0001      	movs	r1, r0
    1e1a:	0015      	movs	r5, r2
    1e1c:	4c0d      	ldr	r4, [pc, #52]	; (1e54 <__aeabi_dadd+0x650>)
    1e1e:	e51a      	b.n	1856 <__aeabi_dadd+0x52>
    1e20:	0001      	movs	r1, r0
    1e22:	0015      	movs	r5, r2
    1e24:	e517      	b.n	1856 <__aeabi_dadd+0x52>
    1e26:	001c      	movs	r4, r3
    1e28:	000f      	movs	r7, r1
    1e2a:	3c20      	subs	r4, #32
    1e2c:	40e7      	lsrs	r7, r4
    1e2e:	003c      	movs	r4, r7
    1e30:	2b20      	cmp	r3, #32
    1e32:	d00c      	beq.n	1e4e <__aeabi_dadd+0x64a>
    1e34:	2740      	movs	r7, #64	; 0x40
    1e36:	1afb      	subs	r3, r7, r3
    1e38:	4099      	lsls	r1, r3
    1e3a:	430d      	orrs	r5, r1
    1e3c:	1e69      	subs	r1, r5, #1
    1e3e:	418d      	sbcs	r5, r1
    1e40:	2100      	movs	r1, #0
    1e42:	4325      	orrs	r5, r4
    1e44:	e752      	b.n	1cec <__aeabi_dadd+0x4e8>
    1e46:	2100      	movs	r1, #0
    1e48:	e7d4      	b.n	1df4 <__aeabi_dadd+0x5f0>
    1e4a:	001d      	movs	r5, r3
    1e4c:	e592      	b.n	1974 <__aeabi_dadd+0x170>
    1e4e:	2100      	movs	r1, #0
    1e50:	e7f3      	b.n	1e3a <__aeabi_dadd+0x636>
    1e52:	46c0      	nop			; (mov r8, r8)
    1e54:	000007ff 	.word	0x000007ff
    1e58:	ff7fffff 	.word	0xff7fffff

00001e5c <__aeabi_dmul>:
    1e5c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1e5e:	465f      	mov	r7, fp
    1e60:	4656      	mov	r6, sl
    1e62:	464d      	mov	r5, r9
    1e64:	4644      	mov	r4, r8
    1e66:	b4f0      	push	{r4, r5, r6, r7}
    1e68:	030d      	lsls	r5, r1, #12
    1e6a:	4699      	mov	r9, r3
    1e6c:	004e      	lsls	r6, r1, #1
    1e6e:	0b2b      	lsrs	r3, r5, #12
    1e70:	b087      	sub	sp, #28
    1e72:	0007      	movs	r7, r0
    1e74:	4692      	mov	sl, r2
    1e76:	4680      	mov	r8, r0
    1e78:	469b      	mov	fp, r3
    1e7a:	0d76      	lsrs	r6, r6, #21
    1e7c:	0fcc      	lsrs	r4, r1, #31
    1e7e:	2e00      	cmp	r6, #0
    1e80:	d069      	beq.n	1f56 <__aeabi_dmul+0xfa>
    1e82:	4b6d      	ldr	r3, [pc, #436]	; (2038 <STACK_SIZE+0x38>)
    1e84:	429e      	cmp	r6, r3
    1e86:	d035      	beq.n	1ef4 <__aeabi_dmul+0x98>
    1e88:	465b      	mov	r3, fp
    1e8a:	2280      	movs	r2, #128	; 0x80
    1e8c:	00dd      	lsls	r5, r3, #3
    1e8e:	0412      	lsls	r2, r2, #16
    1e90:	0f43      	lsrs	r3, r0, #29
    1e92:	4313      	orrs	r3, r2
    1e94:	432b      	orrs	r3, r5
    1e96:	469b      	mov	fp, r3
    1e98:	00c3      	lsls	r3, r0, #3
    1e9a:	4698      	mov	r8, r3
    1e9c:	4b67      	ldr	r3, [pc, #412]	; (203c <STACK_SIZE+0x3c>)
    1e9e:	2700      	movs	r7, #0
    1ea0:	469c      	mov	ip, r3
    1ea2:	2300      	movs	r3, #0
    1ea4:	4466      	add	r6, ip
    1ea6:	9301      	str	r3, [sp, #4]
    1ea8:	464a      	mov	r2, r9
    1eaa:	0315      	lsls	r5, r2, #12
    1eac:	0050      	lsls	r0, r2, #1
    1eae:	0fd2      	lsrs	r2, r2, #31
    1eb0:	4653      	mov	r3, sl
    1eb2:	0b2d      	lsrs	r5, r5, #12
    1eb4:	0d40      	lsrs	r0, r0, #21
    1eb6:	4691      	mov	r9, r2
    1eb8:	d100      	bne.n	1ebc <__aeabi_dmul+0x60>
    1eba:	e076      	b.n	1faa <__aeabi_dmul+0x14e>
    1ebc:	4a5e      	ldr	r2, [pc, #376]	; (2038 <STACK_SIZE+0x38>)
    1ebe:	4290      	cmp	r0, r2
    1ec0:	d06c      	beq.n	1f9c <__aeabi_dmul+0x140>
    1ec2:	2280      	movs	r2, #128	; 0x80
    1ec4:	0f5b      	lsrs	r3, r3, #29
    1ec6:	0412      	lsls	r2, r2, #16
    1ec8:	4313      	orrs	r3, r2
    1eca:	4a5c      	ldr	r2, [pc, #368]	; (203c <STACK_SIZE+0x3c>)
    1ecc:	00ed      	lsls	r5, r5, #3
    1ece:	4694      	mov	ip, r2
    1ed0:	431d      	orrs	r5, r3
    1ed2:	4653      	mov	r3, sl
    1ed4:	2200      	movs	r2, #0
    1ed6:	00db      	lsls	r3, r3, #3
    1ed8:	4460      	add	r0, ip
    1eda:	4649      	mov	r1, r9
    1edc:	1836      	adds	r6, r6, r0
    1ede:	1c70      	adds	r0, r6, #1
    1ee0:	4061      	eors	r1, r4
    1ee2:	9002      	str	r0, [sp, #8]
    1ee4:	4317      	orrs	r7, r2
    1ee6:	2f0f      	cmp	r7, #15
    1ee8:	d900      	bls.n	1eec <__aeabi_dmul+0x90>
    1eea:	e0af      	b.n	204c <STACK_SIZE+0x4c>
    1eec:	4854      	ldr	r0, [pc, #336]	; (2040 <STACK_SIZE+0x40>)
    1eee:	00bf      	lsls	r7, r7, #2
    1ef0:	59c7      	ldr	r7, [r0, r7]
    1ef2:	46bf      	mov	pc, r7
    1ef4:	465b      	mov	r3, fp
    1ef6:	431f      	orrs	r7, r3
    1ef8:	d000      	beq.n	1efc <__aeabi_dmul+0xa0>
    1efa:	e088      	b.n	200e <STACK_SIZE+0xe>
    1efc:	2300      	movs	r3, #0
    1efe:	469b      	mov	fp, r3
    1f00:	4698      	mov	r8, r3
    1f02:	3302      	adds	r3, #2
    1f04:	2708      	movs	r7, #8
    1f06:	9301      	str	r3, [sp, #4]
    1f08:	e7ce      	b.n	1ea8 <__aeabi_dmul+0x4c>
    1f0a:	4649      	mov	r1, r9
    1f0c:	2a02      	cmp	r2, #2
    1f0e:	d06a      	beq.n	1fe6 <__aeabi_dmul+0x18a>
    1f10:	2a03      	cmp	r2, #3
    1f12:	d100      	bne.n	1f16 <__aeabi_dmul+0xba>
    1f14:	e209      	b.n	232a <STACK_SIZE+0x32a>
    1f16:	2a01      	cmp	r2, #1
    1f18:	d000      	beq.n	1f1c <__aeabi_dmul+0xc0>
    1f1a:	e1bb      	b.n	2294 <STACK_SIZE+0x294>
    1f1c:	4011      	ands	r1, r2
    1f1e:	2200      	movs	r2, #0
    1f20:	2300      	movs	r3, #0
    1f22:	2500      	movs	r5, #0
    1f24:	4690      	mov	r8, r2
    1f26:	b2cc      	uxtb	r4, r1
    1f28:	2100      	movs	r1, #0
    1f2a:	032d      	lsls	r5, r5, #12
    1f2c:	0d0a      	lsrs	r2, r1, #20
    1f2e:	0512      	lsls	r2, r2, #20
    1f30:	0b2d      	lsrs	r5, r5, #12
    1f32:	4315      	orrs	r5, r2
    1f34:	4a43      	ldr	r2, [pc, #268]	; (2044 <STACK_SIZE+0x44>)
    1f36:	051b      	lsls	r3, r3, #20
    1f38:	4015      	ands	r5, r2
    1f3a:	431d      	orrs	r5, r3
    1f3c:	006d      	lsls	r5, r5, #1
    1f3e:	07e4      	lsls	r4, r4, #31
    1f40:	086d      	lsrs	r5, r5, #1
    1f42:	4325      	orrs	r5, r4
    1f44:	4640      	mov	r0, r8
    1f46:	0029      	movs	r1, r5
    1f48:	b007      	add	sp, #28
    1f4a:	bc3c      	pop	{r2, r3, r4, r5}
    1f4c:	4690      	mov	r8, r2
    1f4e:	4699      	mov	r9, r3
    1f50:	46a2      	mov	sl, r4
    1f52:	46ab      	mov	fp, r5
    1f54:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1f56:	4303      	orrs	r3, r0
    1f58:	d052      	beq.n	2000 <STACK_SIZE>
    1f5a:	465b      	mov	r3, fp
    1f5c:	2b00      	cmp	r3, #0
    1f5e:	d100      	bne.n	1f62 <__aeabi_dmul+0x106>
    1f60:	e18a      	b.n	2278 <STACK_SIZE+0x278>
    1f62:	4658      	mov	r0, fp
    1f64:	f000 fb4e 	bl	2604 <__clzsi2>
    1f68:	0003      	movs	r3, r0
    1f6a:	3b0b      	subs	r3, #11
    1f6c:	2b1c      	cmp	r3, #28
    1f6e:	dd00      	ble.n	1f72 <__aeabi_dmul+0x116>
    1f70:	e17b      	b.n	226a <STACK_SIZE+0x26a>
    1f72:	221d      	movs	r2, #29
    1f74:	1ad3      	subs	r3, r2, r3
    1f76:	003a      	movs	r2, r7
    1f78:	0001      	movs	r1, r0
    1f7a:	465d      	mov	r5, fp
    1f7c:	40da      	lsrs	r2, r3
    1f7e:	3908      	subs	r1, #8
    1f80:	408d      	lsls	r5, r1
    1f82:	0013      	movs	r3, r2
    1f84:	408f      	lsls	r7, r1
    1f86:	432b      	orrs	r3, r5
    1f88:	469b      	mov	fp, r3
    1f8a:	46b8      	mov	r8, r7
    1f8c:	4b2e      	ldr	r3, [pc, #184]	; (2048 <STACK_SIZE+0x48>)
    1f8e:	2700      	movs	r7, #0
    1f90:	469c      	mov	ip, r3
    1f92:	2300      	movs	r3, #0
    1f94:	4460      	add	r0, ip
    1f96:	4246      	negs	r6, r0
    1f98:	9301      	str	r3, [sp, #4]
    1f9a:	e785      	b.n	1ea8 <__aeabi_dmul+0x4c>
    1f9c:	4652      	mov	r2, sl
    1f9e:	432a      	orrs	r2, r5
    1fa0:	d12c      	bne.n	1ffc <__aeabi_dmul+0x1a0>
    1fa2:	2500      	movs	r5, #0
    1fa4:	2300      	movs	r3, #0
    1fa6:	2202      	movs	r2, #2
    1fa8:	e797      	b.n	1eda <__aeabi_dmul+0x7e>
    1faa:	4652      	mov	r2, sl
    1fac:	432a      	orrs	r2, r5
    1fae:	d021      	beq.n	1ff4 <__aeabi_dmul+0x198>
    1fb0:	2d00      	cmp	r5, #0
    1fb2:	d100      	bne.n	1fb6 <__aeabi_dmul+0x15a>
    1fb4:	e154      	b.n	2260 <STACK_SIZE+0x260>
    1fb6:	0028      	movs	r0, r5
    1fb8:	f000 fb24 	bl	2604 <__clzsi2>
    1fbc:	0003      	movs	r3, r0
    1fbe:	3b0b      	subs	r3, #11
    1fc0:	2b1c      	cmp	r3, #28
    1fc2:	dd00      	ble.n	1fc6 <__aeabi_dmul+0x16a>
    1fc4:	e146      	b.n	2254 <STACK_SIZE+0x254>
    1fc6:	211d      	movs	r1, #29
    1fc8:	1acb      	subs	r3, r1, r3
    1fca:	4651      	mov	r1, sl
    1fcc:	0002      	movs	r2, r0
    1fce:	40d9      	lsrs	r1, r3
    1fd0:	4653      	mov	r3, sl
    1fd2:	3a08      	subs	r2, #8
    1fd4:	4095      	lsls	r5, r2
    1fd6:	4093      	lsls	r3, r2
    1fd8:	430d      	orrs	r5, r1
    1fda:	4a1b      	ldr	r2, [pc, #108]	; (2048 <STACK_SIZE+0x48>)
    1fdc:	4694      	mov	ip, r2
    1fde:	4460      	add	r0, ip
    1fe0:	4240      	negs	r0, r0
    1fe2:	2200      	movs	r2, #0
    1fe4:	e779      	b.n	1eda <__aeabi_dmul+0x7e>
    1fe6:	2401      	movs	r4, #1
    1fe8:	2200      	movs	r2, #0
    1fea:	400c      	ands	r4, r1
    1fec:	4b12      	ldr	r3, [pc, #72]	; (2038 <STACK_SIZE+0x38>)
    1fee:	2500      	movs	r5, #0
    1ff0:	4690      	mov	r8, r2
    1ff2:	e799      	b.n	1f28 <__aeabi_dmul+0xcc>
    1ff4:	2500      	movs	r5, #0
    1ff6:	2300      	movs	r3, #0
    1ff8:	2201      	movs	r2, #1
    1ffa:	e76e      	b.n	1eda <__aeabi_dmul+0x7e>
    1ffc:	2203      	movs	r2, #3
    1ffe:	e76c      	b.n	1eda <__aeabi_dmul+0x7e>
    2000:	2300      	movs	r3, #0
    2002:	469b      	mov	fp, r3
    2004:	4698      	mov	r8, r3
    2006:	3301      	adds	r3, #1
    2008:	2704      	movs	r7, #4
    200a:	9301      	str	r3, [sp, #4]
    200c:	e74c      	b.n	1ea8 <__aeabi_dmul+0x4c>
    200e:	2303      	movs	r3, #3
    2010:	270c      	movs	r7, #12
    2012:	9301      	str	r3, [sp, #4]
    2014:	e748      	b.n	1ea8 <__aeabi_dmul+0x4c>
    2016:	2300      	movs	r3, #0
    2018:	2580      	movs	r5, #128	; 0x80
    201a:	4698      	mov	r8, r3
    201c:	2400      	movs	r4, #0
    201e:	032d      	lsls	r5, r5, #12
    2020:	4b05      	ldr	r3, [pc, #20]	; (2038 <STACK_SIZE+0x38>)
    2022:	e781      	b.n	1f28 <__aeabi_dmul+0xcc>
    2024:	465d      	mov	r5, fp
    2026:	4643      	mov	r3, r8
    2028:	9a01      	ldr	r2, [sp, #4]
    202a:	e76f      	b.n	1f0c <__aeabi_dmul+0xb0>
    202c:	465d      	mov	r5, fp
    202e:	4643      	mov	r3, r8
    2030:	0021      	movs	r1, r4
    2032:	9a01      	ldr	r2, [sp, #4]
    2034:	e76a      	b.n	1f0c <__aeabi_dmul+0xb0>
    2036:	46c0      	nop			; (mov r8, r8)
    2038:	000007ff 	.word	0x000007ff
    203c:	fffffc01 	.word	0xfffffc01
    2040:	000029b0 	.word	0x000029b0
    2044:	800fffff 	.word	0x800fffff
    2048:	000003f3 	.word	0x000003f3
    204c:	4642      	mov	r2, r8
    204e:	0c12      	lsrs	r2, r2, #16
    2050:	4691      	mov	r9, r2
    2052:	0c1a      	lsrs	r2, r3, #16
    2054:	4694      	mov	ip, r2
    2056:	4642      	mov	r2, r8
    2058:	0417      	lsls	r7, r2, #16
    205a:	464a      	mov	r2, r9
    205c:	041b      	lsls	r3, r3, #16
    205e:	0c1b      	lsrs	r3, r3, #16
    2060:	435a      	muls	r2, r3
    2062:	4660      	mov	r0, ip
    2064:	4690      	mov	r8, r2
    2066:	464a      	mov	r2, r9
    2068:	4342      	muls	r2, r0
    206a:	0010      	movs	r0, r2
    206c:	9203      	str	r2, [sp, #12]
    206e:	4662      	mov	r2, ip
    2070:	001c      	movs	r4, r3
    2072:	0c3f      	lsrs	r7, r7, #16
    2074:	437a      	muls	r2, r7
    2076:	437c      	muls	r4, r7
    2078:	4442      	add	r2, r8
    207a:	9201      	str	r2, [sp, #4]
    207c:	0c22      	lsrs	r2, r4, #16
    207e:	4692      	mov	sl, r2
    2080:	9a01      	ldr	r2, [sp, #4]
    2082:	4452      	add	r2, sl
    2084:	4590      	cmp	r8, r2
    2086:	d906      	bls.n	2096 <STACK_SIZE+0x96>
    2088:	4682      	mov	sl, r0
    208a:	2080      	movs	r0, #128	; 0x80
    208c:	0240      	lsls	r0, r0, #9
    208e:	4680      	mov	r8, r0
    2090:	44c2      	add	sl, r8
    2092:	4650      	mov	r0, sl
    2094:	9003      	str	r0, [sp, #12]
    2096:	0c10      	lsrs	r0, r2, #16
    2098:	9004      	str	r0, [sp, #16]
    209a:	4648      	mov	r0, r9
    209c:	0424      	lsls	r4, r4, #16
    209e:	0c24      	lsrs	r4, r4, #16
    20a0:	0412      	lsls	r2, r2, #16
    20a2:	1912      	adds	r2, r2, r4
    20a4:	9205      	str	r2, [sp, #20]
    20a6:	0c2a      	lsrs	r2, r5, #16
    20a8:	042d      	lsls	r5, r5, #16
    20aa:	0c2d      	lsrs	r5, r5, #16
    20ac:	4368      	muls	r0, r5
    20ae:	002c      	movs	r4, r5
    20b0:	4682      	mov	sl, r0
    20b2:	4648      	mov	r0, r9
    20b4:	437c      	muls	r4, r7
    20b6:	4350      	muls	r0, r2
    20b8:	4681      	mov	r9, r0
    20ba:	0c20      	lsrs	r0, r4, #16
    20bc:	4680      	mov	r8, r0
    20be:	4357      	muls	r7, r2
    20c0:	4457      	add	r7, sl
    20c2:	4447      	add	r7, r8
    20c4:	45ba      	cmp	sl, r7
    20c6:	d903      	bls.n	20d0 <STACK_SIZE+0xd0>
    20c8:	2080      	movs	r0, #128	; 0x80
    20ca:	0240      	lsls	r0, r0, #9
    20cc:	4680      	mov	r8, r0
    20ce:	44c1      	add	r9, r8
    20d0:	0c38      	lsrs	r0, r7, #16
    20d2:	043f      	lsls	r7, r7, #16
    20d4:	46b8      	mov	r8, r7
    20d6:	4448      	add	r0, r9
    20d8:	0424      	lsls	r4, r4, #16
    20da:	0c24      	lsrs	r4, r4, #16
    20dc:	9001      	str	r0, [sp, #4]
    20de:	9804      	ldr	r0, [sp, #16]
    20e0:	44a0      	add	r8, r4
    20e2:	4440      	add	r0, r8
    20e4:	9004      	str	r0, [sp, #16]
    20e6:	4658      	mov	r0, fp
    20e8:	0c00      	lsrs	r0, r0, #16
    20ea:	4681      	mov	r9, r0
    20ec:	4658      	mov	r0, fp
    20ee:	0404      	lsls	r4, r0, #16
    20f0:	0c20      	lsrs	r0, r4, #16
    20f2:	4682      	mov	sl, r0
    20f4:	0007      	movs	r7, r0
    20f6:	4648      	mov	r0, r9
    20f8:	435f      	muls	r7, r3
    20fa:	464c      	mov	r4, r9
    20fc:	4343      	muls	r3, r0
    20fe:	4660      	mov	r0, ip
    2100:	4360      	muls	r0, r4
    2102:	4664      	mov	r4, ip
    2104:	4683      	mov	fp, r0
    2106:	4650      	mov	r0, sl
    2108:	4344      	muls	r4, r0
    210a:	0c38      	lsrs	r0, r7, #16
    210c:	4684      	mov	ip, r0
    210e:	18e4      	adds	r4, r4, r3
    2110:	4464      	add	r4, ip
    2112:	42a3      	cmp	r3, r4
    2114:	d903      	bls.n	211e <STACK_SIZE+0x11e>
    2116:	2380      	movs	r3, #128	; 0x80
    2118:	025b      	lsls	r3, r3, #9
    211a:	469c      	mov	ip, r3
    211c:	44e3      	add	fp, ip
    211e:	4648      	mov	r0, r9
    2120:	043f      	lsls	r7, r7, #16
    2122:	0c23      	lsrs	r3, r4, #16
    2124:	0c3f      	lsrs	r7, r7, #16
    2126:	0424      	lsls	r4, r4, #16
    2128:	19e4      	adds	r4, r4, r7
    212a:	4657      	mov	r7, sl
    212c:	4368      	muls	r0, r5
    212e:	436f      	muls	r7, r5
    2130:	4684      	mov	ip, r0
    2132:	464d      	mov	r5, r9
    2134:	4650      	mov	r0, sl
    2136:	4355      	muls	r5, r2
    2138:	4342      	muls	r2, r0
    213a:	0c38      	lsrs	r0, r7, #16
    213c:	4681      	mov	r9, r0
    213e:	4462      	add	r2, ip
    2140:	444a      	add	r2, r9
    2142:	445b      	add	r3, fp
    2144:	4594      	cmp	ip, r2
    2146:	d903      	bls.n	2150 <STACK_SIZE+0x150>
    2148:	2080      	movs	r0, #128	; 0x80
    214a:	0240      	lsls	r0, r0, #9
    214c:	4684      	mov	ip, r0
    214e:	4465      	add	r5, ip
    2150:	9803      	ldr	r0, [sp, #12]
    2152:	043f      	lsls	r7, r7, #16
    2154:	4683      	mov	fp, r0
    2156:	9804      	ldr	r0, [sp, #16]
    2158:	0c3f      	lsrs	r7, r7, #16
    215a:	4684      	mov	ip, r0
    215c:	44e3      	add	fp, ip
    215e:	45c3      	cmp	fp, r8
    2160:	4180      	sbcs	r0, r0
    2162:	4240      	negs	r0, r0
    2164:	4682      	mov	sl, r0
    2166:	0410      	lsls	r0, r2, #16
    2168:	4684      	mov	ip, r0
    216a:	9801      	ldr	r0, [sp, #4]
    216c:	4467      	add	r7, ip
    216e:	4684      	mov	ip, r0
    2170:	4467      	add	r7, ip
    2172:	44a3      	add	fp, r4
    2174:	46bc      	mov	ip, r7
    2176:	45a3      	cmp	fp, r4
    2178:	41a4      	sbcs	r4, r4
    217a:	4699      	mov	r9, r3
    217c:	44d4      	add	ip, sl
    217e:	4264      	negs	r4, r4
    2180:	4287      	cmp	r7, r0
    2182:	41bf      	sbcs	r7, r7
    2184:	45d4      	cmp	ip, sl
    2186:	4180      	sbcs	r0, r0
    2188:	44e1      	add	r9, ip
    218a:	46a0      	mov	r8, r4
    218c:	4599      	cmp	r9, r3
    218e:	419b      	sbcs	r3, r3
    2190:	427f      	negs	r7, r7
    2192:	4240      	negs	r0, r0
    2194:	44c8      	add	r8, r9
    2196:	4307      	orrs	r7, r0
    2198:	0c12      	lsrs	r2, r2, #16
    219a:	18ba      	adds	r2, r7, r2
    219c:	45a0      	cmp	r8, r4
    219e:	41a4      	sbcs	r4, r4
    21a0:	425f      	negs	r7, r3
    21a2:	003b      	movs	r3, r7
    21a4:	4264      	negs	r4, r4
    21a6:	4323      	orrs	r3, r4
    21a8:	18d7      	adds	r7, r2, r3
    21aa:	4643      	mov	r3, r8
    21ac:	197d      	adds	r5, r7, r5
    21ae:	0ddb      	lsrs	r3, r3, #23
    21b0:	026d      	lsls	r5, r5, #9
    21b2:	431d      	orrs	r5, r3
    21b4:	465b      	mov	r3, fp
    21b6:	025a      	lsls	r2, r3, #9
    21b8:	9b05      	ldr	r3, [sp, #20]
    21ba:	431a      	orrs	r2, r3
    21bc:	1e53      	subs	r3, r2, #1
    21be:	419a      	sbcs	r2, r3
    21c0:	465b      	mov	r3, fp
    21c2:	0ddb      	lsrs	r3, r3, #23
    21c4:	431a      	orrs	r2, r3
    21c6:	4643      	mov	r3, r8
    21c8:	025b      	lsls	r3, r3, #9
    21ca:	4313      	orrs	r3, r2
    21cc:	01ea      	lsls	r2, r5, #7
    21ce:	d507      	bpl.n	21e0 <STACK_SIZE+0x1e0>
    21d0:	2201      	movs	r2, #1
    21d2:	085c      	lsrs	r4, r3, #1
    21d4:	4013      	ands	r3, r2
    21d6:	4323      	orrs	r3, r4
    21d8:	07ea      	lsls	r2, r5, #31
    21da:	9e02      	ldr	r6, [sp, #8]
    21dc:	4313      	orrs	r3, r2
    21de:	086d      	lsrs	r5, r5, #1
    21e0:	4a57      	ldr	r2, [pc, #348]	; (2340 <STACK_SIZE+0x340>)
    21e2:	18b2      	adds	r2, r6, r2
    21e4:	2a00      	cmp	r2, #0
    21e6:	dd4b      	ble.n	2280 <STACK_SIZE+0x280>
    21e8:	0758      	lsls	r0, r3, #29
    21ea:	d009      	beq.n	2200 <STACK_SIZE+0x200>
    21ec:	200f      	movs	r0, #15
    21ee:	4018      	ands	r0, r3
    21f0:	2804      	cmp	r0, #4
    21f2:	d005      	beq.n	2200 <STACK_SIZE+0x200>
    21f4:	1d18      	adds	r0, r3, #4
    21f6:	4298      	cmp	r0, r3
    21f8:	419b      	sbcs	r3, r3
    21fa:	425b      	negs	r3, r3
    21fc:	18ed      	adds	r5, r5, r3
    21fe:	0003      	movs	r3, r0
    2200:	01e8      	lsls	r0, r5, #7
    2202:	d504      	bpl.n	220e <STACK_SIZE+0x20e>
    2204:	4a4f      	ldr	r2, [pc, #316]	; (2344 <STACK_SIZE+0x344>)
    2206:	4015      	ands	r5, r2
    2208:	2280      	movs	r2, #128	; 0x80
    220a:	00d2      	lsls	r2, r2, #3
    220c:	18b2      	adds	r2, r6, r2
    220e:	484e      	ldr	r0, [pc, #312]	; (2348 <STACK_SIZE+0x348>)
    2210:	4282      	cmp	r2, r0
    2212:	dd00      	ble.n	2216 <STACK_SIZE+0x216>
    2214:	e6e7      	b.n	1fe6 <__aeabi_dmul+0x18a>
    2216:	2401      	movs	r4, #1
    2218:	08db      	lsrs	r3, r3, #3
    221a:	0768      	lsls	r0, r5, #29
    221c:	4318      	orrs	r0, r3
    221e:	026d      	lsls	r5, r5, #9
    2220:	0553      	lsls	r3, r2, #21
    2222:	4680      	mov	r8, r0
    2224:	0b2d      	lsrs	r5, r5, #12
    2226:	0d5b      	lsrs	r3, r3, #21
    2228:	400c      	ands	r4, r1
    222a:	e67d      	b.n	1f28 <__aeabi_dmul+0xcc>
    222c:	2280      	movs	r2, #128	; 0x80
    222e:	4659      	mov	r1, fp
    2230:	0312      	lsls	r2, r2, #12
    2232:	4211      	tst	r1, r2
    2234:	d008      	beq.n	2248 <STACK_SIZE+0x248>
    2236:	4215      	tst	r5, r2
    2238:	d106      	bne.n	2248 <STACK_SIZE+0x248>
    223a:	4315      	orrs	r5, r2
    223c:	032d      	lsls	r5, r5, #12
    223e:	4698      	mov	r8, r3
    2240:	0b2d      	lsrs	r5, r5, #12
    2242:	464c      	mov	r4, r9
    2244:	4b41      	ldr	r3, [pc, #260]	; (234c <STACK_SIZE+0x34c>)
    2246:	e66f      	b.n	1f28 <__aeabi_dmul+0xcc>
    2248:	465d      	mov	r5, fp
    224a:	4315      	orrs	r5, r2
    224c:	032d      	lsls	r5, r5, #12
    224e:	0b2d      	lsrs	r5, r5, #12
    2250:	4b3e      	ldr	r3, [pc, #248]	; (234c <STACK_SIZE+0x34c>)
    2252:	e669      	b.n	1f28 <__aeabi_dmul+0xcc>
    2254:	0003      	movs	r3, r0
    2256:	4655      	mov	r5, sl
    2258:	3b28      	subs	r3, #40	; 0x28
    225a:	409d      	lsls	r5, r3
    225c:	2300      	movs	r3, #0
    225e:	e6bc      	b.n	1fda <__aeabi_dmul+0x17e>
    2260:	4650      	mov	r0, sl
    2262:	f000 f9cf 	bl	2604 <__clzsi2>
    2266:	3020      	adds	r0, #32
    2268:	e6a8      	b.n	1fbc <__aeabi_dmul+0x160>
    226a:	0003      	movs	r3, r0
    226c:	3b28      	subs	r3, #40	; 0x28
    226e:	409f      	lsls	r7, r3
    2270:	2300      	movs	r3, #0
    2272:	46bb      	mov	fp, r7
    2274:	4698      	mov	r8, r3
    2276:	e689      	b.n	1f8c <__aeabi_dmul+0x130>
    2278:	f000 f9c4 	bl	2604 <__clzsi2>
    227c:	3020      	adds	r0, #32
    227e:	e673      	b.n	1f68 <__aeabi_dmul+0x10c>
    2280:	2401      	movs	r4, #1
    2282:	1aa6      	subs	r6, r4, r2
    2284:	2e38      	cmp	r6, #56	; 0x38
    2286:	dd07      	ble.n	2298 <STACK_SIZE+0x298>
    2288:	2200      	movs	r2, #0
    228a:	400c      	ands	r4, r1
    228c:	2300      	movs	r3, #0
    228e:	2500      	movs	r5, #0
    2290:	4690      	mov	r8, r2
    2292:	e649      	b.n	1f28 <__aeabi_dmul+0xcc>
    2294:	9e02      	ldr	r6, [sp, #8]
    2296:	e7a3      	b.n	21e0 <STACK_SIZE+0x1e0>
    2298:	2e1f      	cmp	r6, #31
    229a:	dc20      	bgt.n	22de <STACK_SIZE+0x2de>
    229c:	2220      	movs	r2, #32
    229e:	002c      	movs	r4, r5
    22a0:	0018      	movs	r0, r3
    22a2:	1b92      	subs	r2, r2, r6
    22a4:	40f0      	lsrs	r0, r6
    22a6:	4094      	lsls	r4, r2
    22a8:	4093      	lsls	r3, r2
    22aa:	4304      	orrs	r4, r0
    22ac:	1e58      	subs	r0, r3, #1
    22ae:	4183      	sbcs	r3, r0
    22b0:	431c      	orrs	r4, r3
    22b2:	40f5      	lsrs	r5, r6
    22b4:	0763      	lsls	r3, r4, #29
    22b6:	d009      	beq.n	22cc <STACK_SIZE+0x2cc>
    22b8:	230f      	movs	r3, #15
    22ba:	4023      	ands	r3, r4
    22bc:	2b04      	cmp	r3, #4
    22be:	d005      	beq.n	22cc <STACK_SIZE+0x2cc>
    22c0:	0023      	movs	r3, r4
    22c2:	1d1c      	adds	r4, r3, #4
    22c4:	429c      	cmp	r4, r3
    22c6:	4192      	sbcs	r2, r2
    22c8:	4252      	negs	r2, r2
    22ca:	18ad      	adds	r5, r5, r2
    22cc:	022b      	lsls	r3, r5, #8
    22ce:	d51f      	bpl.n	2310 <STACK_SIZE+0x310>
    22d0:	2401      	movs	r4, #1
    22d2:	2200      	movs	r2, #0
    22d4:	400c      	ands	r4, r1
    22d6:	2301      	movs	r3, #1
    22d8:	2500      	movs	r5, #0
    22da:	4690      	mov	r8, r2
    22dc:	e624      	b.n	1f28 <__aeabi_dmul+0xcc>
    22de:	201f      	movs	r0, #31
    22e0:	002c      	movs	r4, r5
    22e2:	4240      	negs	r0, r0
    22e4:	1a82      	subs	r2, r0, r2
    22e6:	40d4      	lsrs	r4, r2
    22e8:	2e20      	cmp	r6, #32
    22ea:	d01c      	beq.n	2326 <STACK_SIZE+0x326>
    22ec:	2240      	movs	r2, #64	; 0x40
    22ee:	1b96      	subs	r6, r2, r6
    22f0:	40b5      	lsls	r5, r6
    22f2:	432b      	orrs	r3, r5
    22f4:	1e58      	subs	r0, r3, #1
    22f6:	4183      	sbcs	r3, r0
    22f8:	2007      	movs	r0, #7
    22fa:	4323      	orrs	r3, r4
    22fc:	4018      	ands	r0, r3
    22fe:	2500      	movs	r5, #0
    2300:	2800      	cmp	r0, #0
    2302:	d009      	beq.n	2318 <STACK_SIZE+0x318>
    2304:	220f      	movs	r2, #15
    2306:	2500      	movs	r5, #0
    2308:	401a      	ands	r2, r3
    230a:	001c      	movs	r4, r3
    230c:	2a04      	cmp	r2, #4
    230e:	d1d8      	bne.n	22c2 <STACK_SIZE+0x2c2>
    2310:	0023      	movs	r3, r4
    2312:	0768      	lsls	r0, r5, #29
    2314:	026d      	lsls	r5, r5, #9
    2316:	0b2d      	lsrs	r5, r5, #12
    2318:	2401      	movs	r4, #1
    231a:	08db      	lsrs	r3, r3, #3
    231c:	4303      	orrs	r3, r0
    231e:	4698      	mov	r8, r3
    2320:	400c      	ands	r4, r1
    2322:	2300      	movs	r3, #0
    2324:	e600      	b.n	1f28 <__aeabi_dmul+0xcc>
    2326:	2500      	movs	r5, #0
    2328:	e7e3      	b.n	22f2 <STACK_SIZE+0x2f2>
    232a:	2280      	movs	r2, #128	; 0x80
    232c:	2401      	movs	r4, #1
    232e:	0312      	lsls	r2, r2, #12
    2330:	4315      	orrs	r5, r2
    2332:	032d      	lsls	r5, r5, #12
    2334:	4698      	mov	r8, r3
    2336:	0b2d      	lsrs	r5, r5, #12
    2338:	400c      	ands	r4, r1
    233a:	4b04      	ldr	r3, [pc, #16]	; (234c <STACK_SIZE+0x34c>)
    233c:	e5f4      	b.n	1f28 <__aeabi_dmul+0xcc>
    233e:	46c0      	nop			; (mov r8, r8)
    2340:	000003ff 	.word	0x000003ff
    2344:	feffffff 	.word	0xfeffffff
    2348:	000007fe 	.word	0x000007fe
    234c:	000007ff 	.word	0x000007ff

00002350 <__aeabi_i2d>:
    2350:	b570      	push	{r4, r5, r6, lr}
    2352:	2800      	cmp	r0, #0
    2354:	d030      	beq.n	23b8 <__aeabi_i2d+0x68>
    2356:	17c3      	asrs	r3, r0, #31
    2358:	18c4      	adds	r4, r0, r3
    235a:	405c      	eors	r4, r3
    235c:	0fc5      	lsrs	r5, r0, #31
    235e:	0020      	movs	r0, r4
    2360:	f000 f950 	bl	2604 <__clzsi2>
    2364:	4b17      	ldr	r3, [pc, #92]	; (23c4 <__aeabi_i2d+0x74>)
    2366:	4a18      	ldr	r2, [pc, #96]	; (23c8 <__aeabi_i2d+0x78>)
    2368:	1a1b      	subs	r3, r3, r0
    236a:	1ad2      	subs	r2, r2, r3
    236c:	2a1f      	cmp	r2, #31
    236e:	dd18      	ble.n	23a2 <__aeabi_i2d+0x52>
    2370:	4a16      	ldr	r2, [pc, #88]	; (23cc <__aeabi_i2d+0x7c>)
    2372:	1ad2      	subs	r2, r2, r3
    2374:	4094      	lsls	r4, r2
    2376:	2200      	movs	r2, #0
    2378:	0324      	lsls	r4, r4, #12
    237a:	055b      	lsls	r3, r3, #21
    237c:	0b24      	lsrs	r4, r4, #12
    237e:	0d5b      	lsrs	r3, r3, #21
    2380:	2100      	movs	r1, #0
    2382:	0010      	movs	r0, r2
    2384:	0324      	lsls	r4, r4, #12
    2386:	0d0a      	lsrs	r2, r1, #20
    2388:	0512      	lsls	r2, r2, #20
    238a:	0b24      	lsrs	r4, r4, #12
    238c:	4314      	orrs	r4, r2
    238e:	4a10      	ldr	r2, [pc, #64]	; (23d0 <__aeabi_i2d+0x80>)
    2390:	051b      	lsls	r3, r3, #20
    2392:	4014      	ands	r4, r2
    2394:	431c      	orrs	r4, r3
    2396:	0064      	lsls	r4, r4, #1
    2398:	07ed      	lsls	r5, r5, #31
    239a:	0864      	lsrs	r4, r4, #1
    239c:	432c      	orrs	r4, r5
    239e:	0021      	movs	r1, r4
    23a0:	bd70      	pop	{r4, r5, r6, pc}
    23a2:	0021      	movs	r1, r4
    23a4:	4091      	lsls	r1, r2
    23a6:	000a      	movs	r2, r1
    23a8:	210b      	movs	r1, #11
    23aa:	1a08      	subs	r0, r1, r0
    23ac:	40c4      	lsrs	r4, r0
    23ae:	055b      	lsls	r3, r3, #21
    23b0:	0324      	lsls	r4, r4, #12
    23b2:	0b24      	lsrs	r4, r4, #12
    23b4:	0d5b      	lsrs	r3, r3, #21
    23b6:	e7e3      	b.n	2380 <__aeabi_i2d+0x30>
    23b8:	2500      	movs	r5, #0
    23ba:	2300      	movs	r3, #0
    23bc:	2400      	movs	r4, #0
    23be:	2200      	movs	r2, #0
    23c0:	e7de      	b.n	2380 <__aeabi_i2d+0x30>
    23c2:	46c0      	nop			; (mov r8, r8)
    23c4:	0000041e 	.word	0x0000041e
    23c8:	00000433 	.word	0x00000433
    23cc:	00000413 	.word	0x00000413
    23d0:	800fffff 	.word	0x800fffff

000023d4 <__aeabi_ui2d>:
    23d4:	b570      	push	{r4, r5, r6, lr}
    23d6:	1e05      	subs	r5, r0, #0
    23d8:	d028      	beq.n	242c <__aeabi_ui2d+0x58>
    23da:	f000 f913 	bl	2604 <__clzsi2>
    23de:	4b15      	ldr	r3, [pc, #84]	; (2434 <__aeabi_ui2d+0x60>)
    23e0:	4a15      	ldr	r2, [pc, #84]	; (2438 <__aeabi_ui2d+0x64>)
    23e2:	1a1b      	subs	r3, r3, r0
    23e4:	1ad2      	subs	r2, r2, r3
    23e6:	2a1f      	cmp	r2, #31
    23e8:	dd16      	ble.n	2418 <__aeabi_ui2d+0x44>
    23ea:	002c      	movs	r4, r5
    23ec:	4a13      	ldr	r2, [pc, #76]	; (243c <__aeabi_ui2d+0x68>)
    23ee:	2500      	movs	r5, #0
    23f0:	1ad2      	subs	r2, r2, r3
    23f2:	4094      	lsls	r4, r2
    23f4:	055a      	lsls	r2, r3, #21
    23f6:	0324      	lsls	r4, r4, #12
    23f8:	0b24      	lsrs	r4, r4, #12
    23fa:	0d52      	lsrs	r2, r2, #21
    23fc:	2100      	movs	r1, #0
    23fe:	0324      	lsls	r4, r4, #12
    2400:	0d0b      	lsrs	r3, r1, #20
    2402:	0b24      	lsrs	r4, r4, #12
    2404:	051b      	lsls	r3, r3, #20
    2406:	4323      	orrs	r3, r4
    2408:	4c0d      	ldr	r4, [pc, #52]	; (2440 <__aeabi_ui2d+0x6c>)
    240a:	0512      	lsls	r2, r2, #20
    240c:	4023      	ands	r3, r4
    240e:	4313      	orrs	r3, r2
    2410:	005b      	lsls	r3, r3, #1
    2412:	0028      	movs	r0, r5
    2414:	0859      	lsrs	r1, r3, #1
    2416:	bd70      	pop	{r4, r5, r6, pc}
    2418:	210b      	movs	r1, #11
    241a:	002c      	movs	r4, r5
    241c:	1a08      	subs	r0, r1, r0
    241e:	40c4      	lsrs	r4, r0
    2420:	4095      	lsls	r5, r2
    2422:	0324      	lsls	r4, r4, #12
    2424:	055a      	lsls	r2, r3, #21
    2426:	0b24      	lsrs	r4, r4, #12
    2428:	0d52      	lsrs	r2, r2, #21
    242a:	e7e7      	b.n	23fc <__aeabi_ui2d+0x28>
    242c:	2200      	movs	r2, #0
    242e:	2400      	movs	r4, #0
    2430:	e7e4      	b.n	23fc <__aeabi_ui2d+0x28>
    2432:	46c0      	nop			; (mov r8, r8)
    2434:	0000041e 	.word	0x0000041e
    2438:	00000433 	.word	0x00000433
    243c:	00000413 	.word	0x00000413
    2440:	800fffff 	.word	0x800fffff

00002444 <__aeabi_f2d>:
    2444:	0042      	lsls	r2, r0, #1
    2446:	0e12      	lsrs	r2, r2, #24
    2448:	1c51      	adds	r1, r2, #1
    244a:	0243      	lsls	r3, r0, #9
    244c:	b2c9      	uxtb	r1, r1
    244e:	b570      	push	{r4, r5, r6, lr}
    2450:	0a5d      	lsrs	r5, r3, #9
    2452:	0fc4      	lsrs	r4, r0, #31
    2454:	2901      	cmp	r1, #1
    2456:	dd15      	ble.n	2484 <__aeabi_f2d+0x40>
    2458:	21e0      	movs	r1, #224	; 0xe0
    245a:	0089      	lsls	r1, r1, #2
    245c:	468c      	mov	ip, r1
    245e:	076d      	lsls	r5, r5, #29
    2460:	0b1b      	lsrs	r3, r3, #12
    2462:	4462      	add	r2, ip
    2464:	2100      	movs	r1, #0
    2466:	0028      	movs	r0, r5
    2468:	0d0d      	lsrs	r5, r1, #20
    246a:	052d      	lsls	r5, r5, #20
    246c:	432b      	orrs	r3, r5
    246e:	4d1c      	ldr	r5, [pc, #112]	; (24e0 <__aeabi_f2d+0x9c>)
    2470:	0552      	lsls	r2, r2, #21
    2472:	402b      	ands	r3, r5
    2474:	0852      	lsrs	r2, r2, #1
    2476:	4313      	orrs	r3, r2
    2478:	005b      	lsls	r3, r3, #1
    247a:	07e4      	lsls	r4, r4, #31
    247c:	085b      	lsrs	r3, r3, #1
    247e:	4323      	orrs	r3, r4
    2480:	0019      	movs	r1, r3
    2482:	bd70      	pop	{r4, r5, r6, pc}
    2484:	2a00      	cmp	r2, #0
    2486:	d115      	bne.n	24b4 <__aeabi_f2d+0x70>
    2488:	2d00      	cmp	r5, #0
    248a:	d01f      	beq.n	24cc <__aeabi_f2d+0x88>
    248c:	0028      	movs	r0, r5
    248e:	f000 f8b9 	bl	2604 <__clzsi2>
    2492:	280a      	cmp	r0, #10
    2494:	dc1d      	bgt.n	24d2 <__aeabi_f2d+0x8e>
    2496:	230b      	movs	r3, #11
    2498:	002a      	movs	r2, r5
    249a:	1a1b      	subs	r3, r3, r0
    249c:	40da      	lsrs	r2, r3
    249e:	0013      	movs	r3, r2
    24a0:	0002      	movs	r2, r0
    24a2:	3215      	adds	r2, #21
    24a4:	4095      	lsls	r5, r2
    24a6:	4a0f      	ldr	r2, [pc, #60]	; (24e4 <__aeabi_f2d+0xa0>)
    24a8:	031b      	lsls	r3, r3, #12
    24aa:	1a12      	subs	r2, r2, r0
    24ac:	0552      	lsls	r2, r2, #21
    24ae:	0b1b      	lsrs	r3, r3, #12
    24b0:	0d52      	lsrs	r2, r2, #21
    24b2:	e7d7      	b.n	2464 <__aeabi_f2d+0x20>
    24b4:	2d00      	cmp	r5, #0
    24b6:	d006      	beq.n	24c6 <__aeabi_f2d+0x82>
    24b8:	2280      	movs	r2, #128	; 0x80
    24ba:	0b1b      	lsrs	r3, r3, #12
    24bc:	0312      	lsls	r2, r2, #12
    24be:	4313      	orrs	r3, r2
    24c0:	076d      	lsls	r5, r5, #29
    24c2:	4a09      	ldr	r2, [pc, #36]	; (24e8 <__aeabi_f2d+0xa4>)
    24c4:	e7ce      	b.n	2464 <__aeabi_f2d+0x20>
    24c6:	4a08      	ldr	r2, [pc, #32]	; (24e8 <__aeabi_f2d+0xa4>)
    24c8:	2300      	movs	r3, #0
    24ca:	e7cb      	b.n	2464 <__aeabi_f2d+0x20>
    24cc:	2200      	movs	r2, #0
    24ce:	2300      	movs	r3, #0
    24d0:	e7c8      	b.n	2464 <__aeabi_f2d+0x20>
    24d2:	0003      	movs	r3, r0
    24d4:	3b0b      	subs	r3, #11
    24d6:	409d      	lsls	r5, r3
    24d8:	002b      	movs	r3, r5
    24da:	2500      	movs	r5, #0
    24dc:	e7e3      	b.n	24a6 <__aeabi_f2d+0x62>
    24de:	46c0      	nop			; (mov r8, r8)
    24e0:	800fffff 	.word	0x800fffff
    24e4:	00000389 	.word	0x00000389
    24e8:	000007ff 	.word	0x000007ff

000024ec <__aeabi_d2f>:
    24ec:	004b      	lsls	r3, r1, #1
    24ee:	b570      	push	{r4, r5, r6, lr}
    24f0:	0d5e      	lsrs	r6, r3, #21
    24f2:	030c      	lsls	r4, r1, #12
    24f4:	1c75      	adds	r5, r6, #1
    24f6:	0a64      	lsrs	r4, r4, #9
    24f8:	0f42      	lsrs	r2, r0, #29
    24fa:	056d      	lsls	r5, r5, #21
    24fc:	4322      	orrs	r2, r4
    24fe:	0fc9      	lsrs	r1, r1, #31
    2500:	00c4      	lsls	r4, r0, #3
    2502:	0d6d      	lsrs	r5, r5, #21
    2504:	2d01      	cmp	r5, #1
    2506:	dd2a      	ble.n	255e <__aeabi_d2f+0x72>
    2508:	4b3b      	ldr	r3, [pc, #236]	; (25f8 <__aeabi_d2f+0x10c>)
    250a:	18f3      	adds	r3, r6, r3
    250c:	2bfe      	cmp	r3, #254	; 0xfe
    250e:	dc1a      	bgt.n	2546 <__aeabi_d2f+0x5a>
    2510:	2b00      	cmp	r3, #0
    2512:	dd42      	ble.n	259a <__aeabi_d2f+0xae>
    2514:	0180      	lsls	r0, r0, #6
    2516:	1e45      	subs	r5, r0, #1
    2518:	41a8      	sbcs	r0, r5
    251a:	00d2      	lsls	r2, r2, #3
    251c:	4310      	orrs	r0, r2
    251e:	0f62      	lsrs	r2, r4, #29
    2520:	4302      	orrs	r2, r0
    2522:	0750      	lsls	r0, r2, #29
    2524:	d004      	beq.n	2530 <__aeabi_d2f+0x44>
    2526:	200f      	movs	r0, #15
    2528:	4010      	ands	r0, r2
    252a:	2804      	cmp	r0, #4
    252c:	d000      	beq.n	2530 <__aeabi_d2f+0x44>
    252e:	3204      	adds	r2, #4
    2530:	2080      	movs	r0, #128	; 0x80
    2532:	04c0      	lsls	r0, r0, #19
    2534:	4010      	ands	r0, r2
    2536:	d021      	beq.n	257c <__aeabi_d2f+0x90>
    2538:	3301      	adds	r3, #1
    253a:	2bff      	cmp	r3, #255	; 0xff
    253c:	d003      	beq.n	2546 <__aeabi_d2f+0x5a>
    253e:	0192      	lsls	r2, r2, #6
    2540:	0a52      	lsrs	r2, r2, #9
    2542:	b2db      	uxtb	r3, r3
    2544:	e001      	b.n	254a <__aeabi_d2f+0x5e>
    2546:	23ff      	movs	r3, #255	; 0xff
    2548:	2200      	movs	r2, #0
    254a:	0252      	lsls	r2, r2, #9
    254c:	0a52      	lsrs	r2, r2, #9
    254e:	05db      	lsls	r3, r3, #23
    2550:	4313      	orrs	r3, r2
    2552:	005b      	lsls	r3, r3, #1
    2554:	07c9      	lsls	r1, r1, #31
    2556:	085b      	lsrs	r3, r3, #1
    2558:	430b      	orrs	r3, r1
    255a:	0018      	movs	r0, r3
    255c:	bd70      	pop	{r4, r5, r6, pc}
    255e:	2e00      	cmp	r6, #0
    2560:	d007      	beq.n	2572 <__aeabi_d2f+0x86>
    2562:	4314      	orrs	r4, r2
    2564:	d0ef      	beq.n	2546 <__aeabi_d2f+0x5a>
    2566:	2080      	movs	r0, #128	; 0x80
    2568:	00d2      	lsls	r2, r2, #3
    256a:	0480      	lsls	r0, r0, #18
    256c:	4302      	orrs	r2, r0
    256e:	23ff      	movs	r3, #255	; 0xff
    2570:	e7d7      	b.n	2522 <__aeabi_d2f+0x36>
    2572:	4322      	orrs	r2, r4
    2574:	2300      	movs	r3, #0
    2576:	2a00      	cmp	r2, #0
    2578:	d003      	beq.n	2582 <__aeabi_d2f+0x96>
    257a:	2205      	movs	r2, #5
    257c:	08d2      	lsrs	r2, r2, #3
    257e:	2bff      	cmp	r3, #255	; 0xff
    2580:	d003      	beq.n	258a <__aeabi_d2f+0x9e>
    2582:	0252      	lsls	r2, r2, #9
    2584:	0a52      	lsrs	r2, r2, #9
    2586:	b2db      	uxtb	r3, r3
    2588:	e7df      	b.n	254a <__aeabi_d2f+0x5e>
    258a:	2a00      	cmp	r2, #0
    258c:	d032      	beq.n	25f4 <__aeabi_d2f+0x108>
    258e:	2080      	movs	r0, #128	; 0x80
    2590:	03c0      	lsls	r0, r0, #15
    2592:	4302      	orrs	r2, r0
    2594:	0252      	lsls	r2, r2, #9
    2596:	0a52      	lsrs	r2, r2, #9
    2598:	e7d7      	b.n	254a <__aeabi_d2f+0x5e>
    259a:	0018      	movs	r0, r3
    259c:	3017      	adds	r0, #23
    259e:	db14      	blt.n	25ca <__aeabi_d2f+0xde>
    25a0:	2080      	movs	r0, #128	; 0x80
    25a2:	0400      	lsls	r0, r0, #16
    25a4:	4302      	orrs	r2, r0
    25a6:	201e      	movs	r0, #30
    25a8:	1ac0      	subs	r0, r0, r3
    25aa:	281f      	cmp	r0, #31
    25ac:	dc0f      	bgt.n	25ce <__aeabi_d2f+0xe2>
    25ae:	0025      	movs	r5, r4
    25b0:	4b12      	ldr	r3, [pc, #72]	; (25fc <__aeabi_d2f+0x110>)
    25b2:	18f3      	adds	r3, r6, r3
    25b4:	409d      	lsls	r5, r3
    25b6:	1e6e      	subs	r6, r5, #1
    25b8:	41b5      	sbcs	r5, r6
    25ba:	409a      	lsls	r2, r3
    25bc:	002b      	movs	r3, r5
    25be:	4313      	orrs	r3, r2
    25c0:	0022      	movs	r2, r4
    25c2:	40c2      	lsrs	r2, r0
    25c4:	431a      	orrs	r2, r3
    25c6:	2300      	movs	r3, #0
    25c8:	e7ab      	b.n	2522 <__aeabi_d2f+0x36>
    25ca:	2300      	movs	r3, #0
    25cc:	e7d5      	b.n	257a <__aeabi_d2f+0x8e>
    25ce:	2502      	movs	r5, #2
    25d0:	426d      	negs	r5, r5
    25d2:	1aeb      	subs	r3, r5, r3
    25d4:	0015      	movs	r5, r2
    25d6:	40dd      	lsrs	r5, r3
    25d8:	2820      	cmp	r0, #32
    25da:	d009      	beq.n	25f0 <__aeabi_d2f+0x104>
    25dc:	4b08      	ldr	r3, [pc, #32]	; (2600 <__aeabi_d2f+0x114>)
    25de:	18f3      	adds	r3, r6, r3
    25e0:	409a      	lsls	r2, r3
    25e2:	4314      	orrs	r4, r2
    25e4:	1e62      	subs	r2, r4, #1
    25e6:	4194      	sbcs	r4, r2
    25e8:	0022      	movs	r2, r4
    25ea:	2300      	movs	r3, #0
    25ec:	432a      	orrs	r2, r5
    25ee:	e798      	b.n	2522 <__aeabi_d2f+0x36>
    25f0:	2200      	movs	r2, #0
    25f2:	e7f6      	b.n	25e2 <__aeabi_d2f+0xf6>
    25f4:	2200      	movs	r2, #0
    25f6:	e7a8      	b.n	254a <__aeabi_d2f+0x5e>
    25f8:	fffffc80 	.word	0xfffffc80
    25fc:	fffffc82 	.word	0xfffffc82
    2600:	fffffca2 	.word	0xfffffca2

00002604 <__clzsi2>:
    2604:	211c      	movs	r1, #28
    2606:	2301      	movs	r3, #1
    2608:	041b      	lsls	r3, r3, #16
    260a:	4298      	cmp	r0, r3
    260c:	d301      	bcc.n	2612 <__clzsi2+0xe>
    260e:	0c00      	lsrs	r0, r0, #16
    2610:	3910      	subs	r1, #16
    2612:	0a1b      	lsrs	r3, r3, #8
    2614:	4298      	cmp	r0, r3
    2616:	d301      	bcc.n	261c <__clzsi2+0x18>
    2618:	0a00      	lsrs	r0, r0, #8
    261a:	3908      	subs	r1, #8
    261c:	091b      	lsrs	r3, r3, #4
    261e:	4298      	cmp	r0, r3
    2620:	d301      	bcc.n	2626 <__clzsi2+0x22>
    2622:	0900      	lsrs	r0, r0, #4
    2624:	3904      	subs	r1, #4
    2626:	a202      	add	r2, pc, #8	; (adr r2, 2630 <__clzsi2+0x2c>)
    2628:	5c10      	ldrb	r0, [r2, r0]
    262a:	1840      	adds	r0, r0, r1
    262c:	4770      	bx	lr
    262e:	46c0      	nop			; (mov r8, r8)
    2630:	02020304 	.word	0x02020304
    2634:	01010101 	.word	0x01010101
	...

00002640 <__libc_init_array>:
    2640:	b570      	push	{r4, r5, r6, lr}
    2642:	4e0d      	ldr	r6, [pc, #52]	; (2678 <__libc_init_array+0x38>)
    2644:	4d0d      	ldr	r5, [pc, #52]	; (267c <__libc_init_array+0x3c>)
    2646:	2400      	movs	r4, #0
    2648:	1bad      	subs	r5, r5, r6
    264a:	10ad      	asrs	r5, r5, #2
    264c:	d005      	beq.n	265a <__libc_init_array+0x1a>
    264e:	00a3      	lsls	r3, r4, #2
    2650:	58f3      	ldr	r3, [r6, r3]
    2652:	3401      	adds	r4, #1
    2654:	4798      	blx	r3
    2656:	42a5      	cmp	r5, r4
    2658:	d1f9      	bne.n	264e <__libc_init_array+0xe>
    265a:	f000 f9cd 	bl	29f8 <_init>
    265e:	4e08      	ldr	r6, [pc, #32]	; (2680 <__libc_init_array+0x40>)
    2660:	4d08      	ldr	r5, [pc, #32]	; (2684 <__libc_init_array+0x44>)
    2662:	2400      	movs	r4, #0
    2664:	1bad      	subs	r5, r5, r6
    2666:	10ad      	asrs	r5, r5, #2
    2668:	d005      	beq.n	2676 <__libc_init_array+0x36>
    266a:	00a3      	lsls	r3, r4, #2
    266c:	58f3      	ldr	r3, [r6, r3]
    266e:	3401      	adds	r4, #1
    2670:	4798      	blx	r3
    2672:	42a5      	cmp	r5, r4
    2674:	d1f9      	bne.n	266a <__libc_init_array+0x2a>
    2676:	bd70      	pop	{r4, r5, r6, pc}
    2678:	00002a04 	.word	0x00002a04
    267c:	00002a04 	.word	0x00002a04
    2680:	00002a04 	.word	0x00002a04
    2684:	00002a0c 	.word	0x00002a0c

00002688 <memset>:
    2688:	b570      	push	{r4, r5, r6, lr}
    268a:	0783      	lsls	r3, r0, #30
    268c:	d03f      	beq.n	270e <memset+0x86>
    268e:	1e54      	subs	r4, r2, #1
    2690:	2a00      	cmp	r2, #0
    2692:	d03b      	beq.n	270c <memset+0x84>
    2694:	b2ce      	uxtb	r6, r1
    2696:	0003      	movs	r3, r0
    2698:	2503      	movs	r5, #3
    269a:	e003      	b.n	26a4 <memset+0x1c>
    269c:	1e62      	subs	r2, r4, #1
    269e:	2c00      	cmp	r4, #0
    26a0:	d034      	beq.n	270c <memset+0x84>
    26a2:	0014      	movs	r4, r2
    26a4:	3301      	adds	r3, #1
    26a6:	1e5a      	subs	r2, r3, #1
    26a8:	7016      	strb	r6, [r2, #0]
    26aa:	422b      	tst	r3, r5
    26ac:	d1f6      	bne.n	269c <memset+0x14>
    26ae:	2c03      	cmp	r4, #3
    26b0:	d924      	bls.n	26fc <memset+0x74>
    26b2:	25ff      	movs	r5, #255	; 0xff
    26b4:	400d      	ands	r5, r1
    26b6:	022a      	lsls	r2, r5, #8
    26b8:	4315      	orrs	r5, r2
    26ba:	042a      	lsls	r2, r5, #16
    26bc:	4315      	orrs	r5, r2
    26be:	2c0f      	cmp	r4, #15
    26c0:	d911      	bls.n	26e6 <memset+0x5e>
    26c2:	0026      	movs	r6, r4
    26c4:	3e10      	subs	r6, #16
    26c6:	0936      	lsrs	r6, r6, #4
    26c8:	3601      	adds	r6, #1
    26ca:	0136      	lsls	r6, r6, #4
    26cc:	001a      	movs	r2, r3
    26ce:	199b      	adds	r3, r3, r6
    26d0:	6015      	str	r5, [r2, #0]
    26d2:	6055      	str	r5, [r2, #4]
    26d4:	6095      	str	r5, [r2, #8]
    26d6:	60d5      	str	r5, [r2, #12]
    26d8:	3210      	adds	r2, #16
    26da:	4293      	cmp	r3, r2
    26dc:	d1f8      	bne.n	26d0 <memset+0x48>
    26de:	220f      	movs	r2, #15
    26e0:	4014      	ands	r4, r2
    26e2:	2c03      	cmp	r4, #3
    26e4:	d90a      	bls.n	26fc <memset+0x74>
    26e6:	1f26      	subs	r6, r4, #4
    26e8:	08b6      	lsrs	r6, r6, #2
    26ea:	3601      	adds	r6, #1
    26ec:	00b6      	lsls	r6, r6, #2
    26ee:	001a      	movs	r2, r3
    26f0:	199b      	adds	r3, r3, r6
    26f2:	c220      	stmia	r2!, {r5}
    26f4:	4293      	cmp	r3, r2
    26f6:	d1fc      	bne.n	26f2 <memset+0x6a>
    26f8:	2203      	movs	r2, #3
    26fa:	4014      	ands	r4, r2
    26fc:	2c00      	cmp	r4, #0
    26fe:	d005      	beq.n	270c <memset+0x84>
    2700:	b2c9      	uxtb	r1, r1
    2702:	191c      	adds	r4, r3, r4
    2704:	7019      	strb	r1, [r3, #0]
    2706:	3301      	adds	r3, #1
    2708:	429c      	cmp	r4, r3
    270a:	d1fb      	bne.n	2704 <memset+0x7c>
    270c:	bd70      	pop	{r4, r5, r6, pc}
    270e:	0014      	movs	r4, r2
    2710:	0003      	movs	r3, r0
    2712:	e7cc      	b.n	26ae <memset+0x26>

00002714 <register_fini>:
    2714:	4b03      	ldr	r3, [pc, #12]	; (2724 <register_fini+0x10>)
    2716:	b510      	push	{r4, lr}
    2718:	2b00      	cmp	r3, #0
    271a:	d002      	beq.n	2722 <register_fini+0xe>
    271c:	4802      	ldr	r0, [pc, #8]	; (2728 <register_fini+0x14>)
    271e:	f000 f805 	bl	272c <atexit>
    2722:	bd10      	pop	{r4, pc}
    2724:	00000000 	.word	0x00000000
    2728:	0000273d 	.word	0x0000273d

0000272c <atexit>:
    272c:	b510      	push	{r4, lr}
    272e:	0001      	movs	r1, r0
    2730:	2300      	movs	r3, #0
    2732:	2200      	movs	r2, #0
    2734:	2000      	movs	r0, #0
    2736:	f000 f81b 	bl	2770 <__register_exitproc>
    273a:	bd10      	pop	{r4, pc}

0000273c <__libc_fini_array>:
    273c:	b570      	push	{r4, r5, r6, lr}
    273e:	4b09      	ldr	r3, [pc, #36]	; (2764 <__libc_fini_array+0x28>)
    2740:	4c09      	ldr	r4, [pc, #36]	; (2768 <__libc_fini_array+0x2c>)
    2742:	1ae4      	subs	r4, r4, r3
    2744:	10a4      	asrs	r4, r4, #2
    2746:	d009      	beq.n	275c <__libc_fini_array+0x20>
    2748:	4a08      	ldr	r2, [pc, #32]	; (276c <__libc_fini_array+0x30>)
    274a:	18a5      	adds	r5, r4, r2
    274c:	00ad      	lsls	r5, r5, #2
    274e:	18ed      	adds	r5, r5, r3
    2750:	682b      	ldr	r3, [r5, #0]
    2752:	3c01      	subs	r4, #1
    2754:	4798      	blx	r3
    2756:	3d04      	subs	r5, #4
    2758:	2c00      	cmp	r4, #0
    275a:	d1f9      	bne.n	2750 <__libc_fini_array+0x14>
    275c:	f000 f956 	bl	2a0c <_fini>
    2760:	bd70      	pop	{r4, r5, r6, pc}
    2762:	46c0      	nop			; (mov r8, r8)
    2764:	00002a18 	.word	0x00002a18
    2768:	00002a1c 	.word	0x00002a1c
    276c:	3fffffff 	.word	0x3fffffff

00002770 <__register_exitproc>:
    2770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2772:	4644      	mov	r4, r8
    2774:	465f      	mov	r7, fp
    2776:	4656      	mov	r6, sl
    2778:	464d      	mov	r5, r9
    277a:	469b      	mov	fp, r3
    277c:	4b2f      	ldr	r3, [pc, #188]	; (283c <__register_exitproc+0xcc>)
    277e:	b4f0      	push	{r4, r5, r6, r7}
    2780:	681c      	ldr	r4, [r3, #0]
    2782:	23a4      	movs	r3, #164	; 0xa4
    2784:	005b      	lsls	r3, r3, #1
    2786:	0005      	movs	r5, r0
    2788:	58e0      	ldr	r0, [r4, r3]
    278a:	000e      	movs	r6, r1
    278c:	4690      	mov	r8, r2
    278e:	2800      	cmp	r0, #0
    2790:	d04b      	beq.n	282a <__register_exitproc+0xba>
    2792:	6843      	ldr	r3, [r0, #4]
    2794:	2b1f      	cmp	r3, #31
    2796:	dc0d      	bgt.n	27b4 <__register_exitproc+0x44>
    2798:	1c5c      	adds	r4, r3, #1
    279a:	2d00      	cmp	r5, #0
    279c:	d121      	bne.n	27e2 <__register_exitproc+0x72>
    279e:	3302      	adds	r3, #2
    27a0:	009b      	lsls	r3, r3, #2
    27a2:	6044      	str	r4, [r0, #4]
    27a4:	501e      	str	r6, [r3, r0]
    27a6:	2000      	movs	r0, #0
    27a8:	bc3c      	pop	{r2, r3, r4, r5}
    27aa:	4690      	mov	r8, r2
    27ac:	4699      	mov	r9, r3
    27ae:	46a2      	mov	sl, r4
    27b0:	46ab      	mov	fp, r5
    27b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    27b4:	4b22      	ldr	r3, [pc, #136]	; (2840 <__register_exitproc+0xd0>)
    27b6:	2b00      	cmp	r3, #0
    27b8:	d03c      	beq.n	2834 <__register_exitproc+0xc4>
    27ba:	20c8      	movs	r0, #200	; 0xc8
    27bc:	0040      	lsls	r0, r0, #1
    27be:	e000      	b.n	27c2 <__register_exitproc+0x52>
    27c0:	bf00      	nop
    27c2:	2800      	cmp	r0, #0
    27c4:	d036      	beq.n	2834 <__register_exitproc+0xc4>
    27c6:	22a4      	movs	r2, #164	; 0xa4
    27c8:	2300      	movs	r3, #0
    27ca:	0052      	lsls	r2, r2, #1
    27cc:	58a1      	ldr	r1, [r4, r2]
    27ce:	6043      	str	r3, [r0, #4]
    27d0:	6001      	str	r1, [r0, #0]
    27d2:	50a0      	str	r0, [r4, r2]
    27d4:	3240      	adds	r2, #64	; 0x40
    27d6:	5083      	str	r3, [r0, r2]
    27d8:	3204      	adds	r2, #4
    27da:	5083      	str	r3, [r0, r2]
    27dc:	2401      	movs	r4, #1
    27de:	2d00      	cmp	r5, #0
    27e0:	d0dd      	beq.n	279e <__register_exitproc+0x2e>
    27e2:	009a      	lsls	r2, r3, #2
    27e4:	4691      	mov	r9, r2
    27e6:	4481      	add	r9, r0
    27e8:	4642      	mov	r2, r8
    27ea:	2188      	movs	r1, #136	; 0x88
    27ec:	464f      	mov	r7, r9
    27ee:	507a      	str	r2, [r7, r1]
    27f0:	22c4      	movs	r2, #196	; 0xc4
    27f2:	0052      	lsls	r2, r2, #1
    27f4:	4690      	mov	r8, r2
    27f6:	4480      	add	r8, r0
    27f8:	4642      	mov	r2, r8
    27fa:	3987      	subs	r1, #135	; 0x87
    27fc:	4099      	lsls	r1, r3
    27fe:	6812      	ldr	r2, [r2, #0]
    2800:	468a      	mov	sl, r1
    2802:	430a      	orrs	r2, r1
    2804:	4694      	mov	ip, r2
    2806:	4642      	mov	r2, r8
    2808:	4661      	mov	r1, ip
    280a:	6011      	str	r1, [r2, #0]
    280c:	2284      	movs	r2, #132	; 0x84
    280e:	4649      	mov	r1, r9
    2810:	465f      	mov	r7, fp
    2812:	0052      	lsls	r2, r2, #1
    2814:	508f      	str	r7, [r1, r2]
    2816:	2d02      	cmp	r5, #2
    2818:	d1c1      	bne.n	279e <__register_exitproc+0x2e>
    281a:	0002      	movs	r2, r0
    281c:	4655      	mov	r5, sl
    281e:	328d      	adds	r2, #141	; 0x8d
    2820:	32ff      	adds	r2, #255	; 0xff
    2822:	6811      	ldr	r1, [r2, #0]
    2824:	430d      	orrs	r5, r1
    2826:	6015      	str	r5, [r2, #0]
    2828:	e7b9      	b.n	279e <__register_exitproc+0x2e>
    282a:	0020      	movs	r0, r4
    282c:	304d      	adds	r0, #77	; 0x4d
    282e:	30ff      	adds	r0, #255	; 0xff
    2830:	50e0      	str	r0, [r4, r3]
    2832:	e7ae      	b.n	2792 <__register_exitproc+0x22>
    2834:	2001      	movs	r0, #1
    2836:	4240      	negs	r0, r0
    2838:	e7b6      	b.n	27a8 <__register_exitproc+0x38>
    283a:	46c0      	nop			; (mov r8, r8)
    283c:	000029f4 	.word	0x000029f4
    2840:	00000000 	.word	0x00000000

00002844 <spi2MOSI>:
    2844:	0c000002 00000200                                .....

00002849 <spi2SCK>:
    2849:	0e000002 00000200                                .....

0000284e <spi2MISO>:
    284e:	0d000002 8d200000                                ......

00002854 <lookupTable.12442>:
    2854:	ffff8d20 ffffada1 ffffce64 ffffef6c      .......d...l...
    2864:	000010b7 0000324a 00005425 00007649     ....J2..%T..Iv..
    2874:	000098b7 0000bb72 0000de79 000101d0     ....r...y.......
    2884:	00012576 0001496f 00016dbc 0001925e     v%..oI...m..^...
    2894:	0001b758 0001dcaa 00020258 00022862     X.......X...b(..
    28a4:	00024ecc 00027596 00029cc4 0002c457     .N...u......W...
    28b4:	0002ec52 000314b7 00033d89 000366ca     R........=...f..
    28c4:	0003907d 0003baa4 0003e544 0004105e     }.......D...^...
    28d4:	00043bf6 0004680e 000494ac 0004c1d1     .;...h..........
    28e4:	0004ef81 00051dc1 00054c95 00057c00     .........L...|..
    28f4:	0005ac07 0005dcae 00060dfb 00063ff2     .............?..
    2904:	00067298 0006a5f4 0006da09 00070ee0     .r..............
    2914:	0007447d 00077ae8 0007b228 0007ea44     }D...z..(...D...
    2924:	00082344 00085d30 00089810 0008d3ef     D#..0]..........
    2934:	000910d6 00094ecf 00098de5 0009ce23     .....N......#...
    2944:	000a0f98 000a524f 000a9657 000adbbf     ....OR..W.......
    2954:	000b2298 000b6af3 000bb4e2 000c007b     ."...j......{...
    2964:	000c4dd4 000c9d03 000cee23 000d4150     .M......#...PA..
    2974:	000d96a9 000dee4e 000e4865 000ea516     ....N...eH......
    2984:	000f048e                                ....

00002988 <senseBatPin>:
    2988:	06000000 01000106                                .....

0000298d <senseAPin>:
    298d:	03010001 0100010b                                .....

00002992 <senseBPin>:
    2992:	02010001 0000000a                                .....

00002997 <senseCPin>:
    2997:	03000000 00000001                                .....

0000299c <senseDPin>:
    299c:	02000000 00000000                                .....

000029a1 <analogAccelPin>:
    29a1:	07000000 00000207                                .....

000029a6 <spi2MOSI>:
    29a6:	0c000002 00000200                                .....

000029ab <spi2SCK>:
    29ab:	0e000002 00204c00 001f0c00 001f0c00     .....L .........
    29bb:	001f0a00 00202400 00202400 00201600     .....$ ..$ ... .
    29cb:	001f0a00 00202400 00201600 00202400     .....$ ... ..$ .
    29db:	001f0a00 00202c00 00202c00 00202c00     ....., .., .., .
    29eb:	00222c00 00004300 00001000                       .,"..C...

000029f4 <_global_impure_ptr>:
    29f4:	20000010                                ... 

000029f8 <_init>:
    29f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    29fa:	46c0      	nop			; (mov r8, r8)
    29fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
    29fe:	bc08      	pop	{r3}
    2a00:	469e      	mov	lr, r3
    2a02:	4770      	bx	lr

00002a04 <__init_array_start>:
    2a04:	00002715 	.word	0x00002715

00002a08 <__frame_dummy_init_array_entry>:
    2a08:	000000dd                                ....

00002a0c <_fini>:
    2a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2a0e:	46c0      	nop			; (mov r8, r8)
    2a10:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2a12:	bc08      	pop	{r3}
    2a14:	469e      	mov	lr, r3
    2a16:	4770      	bx	lr

00002a18 <__fini_array_start>:
    2a18:	000000b5 	.word	0x000000b5
