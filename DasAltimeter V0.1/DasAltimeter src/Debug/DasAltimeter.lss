
DasAltimeter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000028d8  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000438  20000000  000028d8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000001b0  20000440  00002d20  00020440  2**4
                  ALLOC
  3 .stack        00002000  200005f0  00002ed0  00020440  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020438  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020460  2**0
                  CONTENTS, READONLY
  6 .debug_info   0001a044  00000000  00000000  000204b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001f54  00000000  00000000  0003a4fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00001990  00000000  00000000  0003c451  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000348  00000000  00000000  0003dde1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000b40  00000000  00000000  0003e129  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000151fc  00000000  00000000  0003ec69  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00007dae  00000000  00000000  00053e65  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000723a4  00000000  00000000  0005bc13  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000009ec  00000000  00000000  000cdfb8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
 *         retrieved from cpu registers.
 */
void SystemCoreClockUpdate(void)
{
	// Not implemented
	SystemCoreClock = __SYSTEM_CLOCK;
       0:	200025f0 	.word	0x200025f0
       4:	00000119 	.word	0x00000119
	return;
}
       8:	00000115 	.word	0x00000115
       c:	00000115 	.word	0x00000115
	...
      2c:	00000115 	.word	0x00000115
	...
      38:	00000115 	.word	0x00000115
      3c:	00000115 	.word	0x00000115
      40:	00000115 	.word	0x00000115
      44:	00000115 	.word	0x00000115
      48:	00000115 	.word	0x00000115
      4c:	00000ec9 	.word	0x00000ec9
      50:	00000115 	.word	0x00000115
      54:	00000115 	.word	0x00000115
      58:	00000115 	.word	0x00000115
      5c:	00000115 	.word	0x00000115
      60:	00000115 	.word	0x00000115
      64:	00000115 	.word	0x00000115
      68:	00000115 	.word	0x00000115
      6c:	00000115 	.word	0x00000115
      70:	00000115 	.word	0x00000115
      74:	00000115 	.word	0x00000115
      78:	00000115 	.word	0x00000115
      7c:	00000115 	.word	0x00000115
      80:	00000115 	.word	0x00000115
      84:	00000115 	.word	0x00000115
      88:	00000115 	.word	0x00000115
      8c:	00000f69 	.word	0x00000f69
      90:	00000fd1 	.word	0x00000fd1
	...
      9c:	00000115 	.word	0x00000115
      a0:	00000115 	.word	0x00000115
      a4:	00000115 	.word	0x00000115
      a8:	00000115 	.word	0x00000115
      ac:	00000115 	.word	0x00000115
      b0:	00000000 	.word	0x00000000

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000440 	.word	0x20000440
      d4:	00000000 	.word	0x00000000
      d8:	000028d8 	.word	0x000028d8

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000444 	.word	0x20000444
     108:	000028d8 	.word	0x000028d8
     10c:	000028d8 	.word	0x000028d8
     110:	00000000 	.word	0x00000000

00000114 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     114:	e7fe      	b.n	114 <Dummy_Handler>
	...

00000118 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
     118:	4821      	ldr	r0, [pc, #132]	; (1a0 <Reset_Handler+0x88>)
     11a:	4922      	ldr	r1, [pc, #136]	; (1a4 <Reset_Handler+0x8c>)
     11c:	b570      	push	{r4, r5, r6, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
     11e:	4288      	cmp	r0, r1
     120:	d002      	beq.n	128 <Reset_Handler+0x10>
     122:	2300      	movs	r3, #0
                for (; pDest < &_erelocate;) {
     124:	4c20      	ldr	r4, [pc, #128]	; (1a8 <Reset_Handler+0x90>)
     126:	e003      	b.n	130 <Reset_Handler+0x18>
     128:	4b20      	ldr	r3, [pc, #128]	; (1ac <Reset_Handler+0x94>)
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     12a:	4a21      	ldr	r2, [pc, #132]	; (1b0 <Reset_Handler+0x98>)
                *pDest++ = 0;
     12c:	2100      	movs	r1, #0
     12e:	e006      	b.n	13e <Reset_Handler+0x26>
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
     130:	18ca      	adds	r2, r1, r3
     132:	42a2      	cmp	r2, r4
     134:	d2f8      	bcs.n	128 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
     136:	58c5      	ldr	r5, [r0, r3]
     138:	3304      	adds	r3, #4
     13a:	6015      	str	r5, [r2, #0]
     13c:	e7f8      	b.n	130 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     13e:	4293      	cmp	r3, r2
     140:	d201      	bcs.n	146 <Reset_Handler+0x2e>
                *pDest++ = 0;
     142:	c302      	stmia	r3!, {r1}
     144:	e7fb      	b.n	13e <Reset_Handler+0x26>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     146:	21ff      	movs	r1, #255	; 0xff

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     148:	2402      	movs	r4, #2
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     14a:	2503      	movs	r5, #3
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     14c:	4b19      	ldr	r3, [pc, #100]	; (1b4 <Reset_Handler+0x9c>)
     14e:	4a1a      	ldr	r2, [pc, #104]	; (1b8 <Reset_Handler+0xa0>)
     150:	438b      	bics	r3, r1

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     152:	260c      	movs	r6, #12
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     154:	6093      	str	r3, [r2, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     156:	2208      	movs	r2, #8
        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     158:	4b18      	ldr	r3, [pc, #96]	; (1bc <Reset_Handler+0xa4>)
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     15a:	4919      	ldr	r1, [pc, #100]	; (1c0 <Reset_Handler+0xa8>)
        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     15c:	625c      	str	r4, [r3, #36]	; 0x24
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     15e:	78cb      	ldrb	r3, [r1, #3]
     160:	43ab      	bics	r3, r5
     162:	4323      	orrs	r3, r4
     164:	70cb      	strb	r3, [r1, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     166:	78cb      	ldrb	r3, [r1, #3]
     168:	43b3      	bics	r3, r6
     16a:	4313      	orrs	r3, r2
     16c:	70cb      	strb	r3, [r1, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
     16e:	2130      	movs	r1, #48	; 0x30
     170:	4b14      	ldr	r3, [pc, #80]	; (1c4 <Reset_Handler+0xac>)
     172:	7b98      	ldrb	r0, [r3, #14]
     174:	4388      	bics	r0, r1
     176:	3910      	subs	r1, #16
     178:	4308      	orrs	r0, r1
     17a:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     17c:	7b99      	ldrb	r1, [r3, #14]
     17e:	43b1      	bics	r1, r6
     180:	4311      	orrs	r1, r2
     182:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
     184:	2180      	movs	r1, #128	; 0x80
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
        DMAC->QOSCTRL.bit.FQOS = 2;
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     186:	7b9a      	ldrb	r2, [r3, #14]
     188:	43aa      	bics	r2, r5
     18a:	4322      	orrs	r2, r4
     18c:	739a      	strb	r2, [r3, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
     18e:	4a0e      	ldr	r2, [pc, #56]	; (1c8 <Reset_Handler+0xb0>)
     190:	6853      	ldr	r3, [r2, #4]
     192:	430b      	orrs	r3, r1
     194:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
     196:	4b0d      	ldr	r3, [pc, #52]	; (1cc <Reset_Handler+0xb4>)
     198:	4798      	blx	r3

        /* Branch to main function */
        main();
     19a:	4b0d      	ldr	r3, [pc, #52]	; (1d0 <Reset_Handler+0xb8>)
     19c:	4798      	blx	r3
     19e:	e7fe      	b.n	19e <Reset_Handler+0x86>
     1a0:	000028d8 	.word	0x000028d8
     1a4:	20000000 	.word	0x20000000
     1a8:	20000438 	.word	0x20000438
     1ac:	20000440 	.word	0x20000440
     1b0:	200005f0 	.word	0x200005f0
     1b4:	00000000 	.word	0x00000000
     1b8:	e000ed00 	.word	0xe000ed00
     1bc:	410070fc 	.word	0x410070fc
     1c0:	41005000 	.word	0x41005000
     1c4:	41004800 	.word	0x41004800
     1c8:	41004000 	.word	0x41004000
     1cc:	000024fd 	.word	0x000024fd
     1d0:	00000a51 	.word	0x00000a51

000001d4 <SystemInit>:
     1d4:	4a01      	ldr	r2, [pc, #4]	; (1dc <SystemInit+0x8>)
     1d6:	4b02      	ldr	r3, [pc, #8]	; (1e0 <SystemInit+0xc>)
     1d8:	601a      	str	r2, [r3, #0]
     1da:	4770      	bx	lr
     1dc:	000f4240 	.word	0x000f4240
     1e0:	20000000 	.word	0x20000000

000001e4 <AT25SFErace4KBlock>:
    pinHigh(cs_mem);

    delay_ms(300);
}

void AT25SFErace4KBlock(uint8_t blockToErace) {
     1e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     1e6:	2780      	movs	r7, #128	; 0x80
     1e8:	4e12      	ldr	r6, [pc, #72]	; (234 <AT25SFErace4KBlock+0x50>)
     1ea:	02ff      	lsls	r7, r7, #11

    uint32_t address = 0x001000*blockToErace;
     1ec:	0303      	lsls	r3, r0, #12

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
     1ee:	4d12      	ldr	r5, [pc, #72]	; (238 <AT25SFErace4KBlock+0x54>)
    delay_ms(300);
}

void AT25SFErace4KBlock(uint8_t blockToErace) {

    uint32_t address = 0x001000*blockToErace;
     1f0:	9301      	str	r3, [sp, #4]

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
     1f2:	2106      	movs	r1, #6
     1f4:	6177      	str	r7, [r6, #20]
     1f6:	2001      	movs	r0, #1
     1f8:	47a8      	blx	r5
     1fa:	4c10      	ldr	r4, [pc, #64]	; (23c <AT25SFErace4KBlock+0x58>)
    pinHigh(cs_mem);

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_04K_ERASE);
     1fc:	2120      	movs	r1, #32
void AT25SFErace4KBlock(uint8_t blockToErace) {

    uint32_t address = 0x001000*blockToErace;

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
     1fe:	7020      	strb	r0, [r4, #0]
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     200:	61b7      	str	r7, [r6, #24]
    pinHigh(cs_mem);

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_04K_ERASE);
     202:	2001      	movs	r0, #1
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     204:	6177      	str	r7, [r6, #20]
     206:	47a8      	blx	r5
    dummy_rx = spiDataTransfer(SPI1,((address & 0xFF0000) >> 16));
     208:	9b01      	ldr	r3, [sp, #4]
    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
    pinHigh(cs_mem);

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_04K_ERASE);
     20a:	7020      	strb	r0, [r4, #0]
    dummy_rx = spiDataTransfer(SPI1,((address & 0xFF0000) >> 16));
     20c:	0c19      	lsrs	r1, r3, #16
     20e:	2001      	movs	r0, #1
     210:	47a8      	blx	r5
    dummy_rx = spiDataTransfer(SPI1,((address & 0x00FF00) >>  8));
     212:	9b01      	ldr	r3, [sp, #4]
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
    pinHigh(cs_mem);

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_04K_ERASE);
    dummy_rx = spiDataTransfer(SPI1,((address & 0xFF0000) >> 16));
     214:	7020      	strb	r0, [r4, #0]
    dummy_rx = spiDataTransfer(SPI1,((address & 0x00FF00) >>  8));
     216:	0a18      	lsrs	r0, r3, #8
     218:	b2c1      	uxtb	r1, r0
     21a:	2001      	movs	r0, #1
     21c:	47a8      	blx	r5
    dummy_rx = spiDataTransfer(SPI1,((address & 0x0000FF) >>  0));
     21e:	2100      	movs	r1, #0
    pinHigh(cs_mem);

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_04K_ERASE);
    dummy_rx = spiDataTransfer(SPI1,((address & 0xFF0000) >> 16));
    dummy_rx = spiDataTransfer(SPI1,((address & 0x00FF00) >>  8));
     220:	7020      	strb	r0, [r4, #0]
    dummy_rx = spiDataTransfer(SPI1,((address & 0x0000FF) >>  0));
     222:	2001      	movs	r0, #1
     224:	47a8      	blx	r5
    pinHigh(cs_mem);

    delay_ms(70);
     226:	4b06      	ldr	r3, [pc, #24]	; (240 <AT25SFErace4KBlock+0x5c>)

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_04K_ERASE);
    dummy_rx = spiDataTransfer(SPI1,((address & 0xFF0000) >> 16));
    dummy_rx = spiDataTransfer(SPI1,((address & 0x00FF00) >>  8));
    dummy_rx = spiDataTransfer(SPI1,((address & 0x0000FF) >>  0));
     228:	7020      	strb	r0, [r4, #0]
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     22a:	61b7      	str	r7, [r6, #24]
    pinHigh(cs_mem);

    delay_ms(70);
     22c:	2046      	movs	r0, #70	; 0x46
     22e:	4798      	blx	r3

}
     230:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
     232:	46c0      	nop			; (mov r8, r8)
     234:	41004400 	.word	0x41004400
     238:	00001629 	.word	0x00001629
     23c:	20000460 	.word	0x20000460
     240:	00000e99 	.word	0x00000e99

00000244 <AT25SEWritePage>:

    return bytesSent;
}


u8_t AT25SEWritePage(u8_t startingAddress, u8_t len, u8_t *data) {
     244:	b5f0      	push	{r4, r5, r6, r7, lr}
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     246:	2580      	movs	r5, #128	; 0x80
     248:	4f18      	ldr	r7, [pc, #96]	; (2ac <AT25SEWritePage+0x68>)
     24a:	b085      	sub	sp, #20
     24c:	02ed      	lsls	r5, r5, #11
     24e:	9203      	str	r2, [sp, #12]

    u8_t bytesSent = 0;

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
     250:	4e17      	ldr	r6, [pc, #92]	; (2b0 <AT25SEWritePage+0x6c>)

    return bytesSent;
}


u8_t AT25SEWritePage(u8_t startingAddress, u8_t len, u8_t *data) {
     252:	9002      	str	r0, [sp, #8]
     254:	9101      	str	r1, [sp, #4]

    u8_t bytesSent = 0;

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
     256:	2001      	movs	r0, #1
     258:	617d      	str	r5, [r7, #20]
     25a:	2106      	movs	r1, #6
     25c:	47b0      	blx	r6
     25e:	4c15      	ldr	r4, [pc, #84]	; (2b4 <AT25SEWritePage+0x70>)
    pinHigh(cs_mem);

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_PROGRAM);
     260:	2102      	movs	r1, #2
u8_t AT25SEWritePage(u8_t startingAddress, u8_t len, u8_t *data) {

    u8_t bytesSent = 0;

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
     262:	7020      	strb	r0, [r4, #0]
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     264:	61bd      	str	r5, [r7, #24]
    pinHigh(cs_mem);

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_PROGRAM);
     266:	2001      	movs	r0, #1
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     268:	617d      	str	r5, [r7, #20]
     26a:	47b0      	blx	r6
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     26c:	2100      	movs	r1, #0
    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
    pinHigh(cs_mem);

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_PROGRAM);
     26e:	7020      	strb	r0, [r4, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     270:	2001      	movs	r0, #1
     272:	47b0      	blx	r6
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     274:	2100      	movs	r1, #0
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
    pinHigh(cs_mem);

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_PROGRAM);
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     276:	7020      	strb	r0, [r4, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     278:	2001      	movs	r0, #1
     27a:	47b0      	blx	r6
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
     27c:	9902      	ldr	r1, [sp, #8]
    pinHigh(cs_mem);

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_PROGRAM);
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     27e:	7020      	strb	r0, [r4, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
     280:	2001      	movs	r0, #1
     282:	47b0      	blx	r6
     284:	9d03      	ldr	r5, [sp, #12]
     286:	9b01      	ldr	r3, [sp, #4]
     288:	7020      	strb	r0, [r4, #0]
     28a:	18eb      	adds	r3, r5, r3
     28c:	9302      	str	r3, [sp, #8]

    for (u8_t pos = 0; pos < len; ++pos) {
     28e:	9b02      	ldr	r3, [sp, #8]
     290:	429d      	cmp	r5, r3
     292:	d005      	beq.n	2a0 <AT25SEWritePage+0x5c>
        ++bytesSent;
        dummy_rx = spiDataTransfer(SPI1,data[pos]);
     294:	7829      	ldrb	r1, [r5, #0]
     296:	2001      	movs	r0, #1
     298:	47b0      	blx	r6
     29a:	3501      	adds	r5, #1
     29c:	7020      	strb	r0, [r4, #0]
     29e:	e7f6      	b.n	28e <AT25SEWritePage+0x4a>
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     2a0:	2380      	movs	r3, #128	; 0x80
     2a2:	02db      	lsls	r3, r3, #11
     2a4:	61bb      	str	r3, [r7, #24]
    }
    pinHigh(cs_mem);


    return bytesSent;
}
     2a6:	9801      	ldr	r0, [sp, #4]
     2a8:	b005      	add	sp, #20
     2aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
     2ac:	41004400 	.word	0x41004400
     2b0:	00001629 	.word	0x00001629
     2b4:	20000460 	.word	0x20000460

000002b8 <AT25SEreadSample>:
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     2b8:	2380      	movs	r3, #128	; 0x80

void AT25SEreadSample(u8_t startingAddress, u8_t len, u8_t *data) {
     2ba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     2bc:	4f14      	ldr	r7, [pc, #80]	; (310 <AT25SEreadSample+0x58>)
     2be:	02db      	lsls	r3, r3, #11
     2c0:	9201      	str	r2, [sp, #4]

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_SLOWREAD_ARRAY);
     2c2:	4d14      	ldr	r5, [pc, #80]	; (314 <AT25SEreadSample+0x5c>)


    return bytesSent;
}

void AT25SEreadSample(u8_t startingAddress, u8_t len, u8_t *data) {
     2c4:	0004      	movs	r4, r0
     2c6:	9100      	str	r1, [sp, #0]

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_SLOWREAD_ARRAY);
     2c8:	2001      	movs	r0, #1
     2ca:	617b      	str	r3, [r7, #20]
     2cc:	2103      	movs	r1, #3
     2ce:	47a8      	blx	r5
     2d0:	4e11      	ldr	r6, [pc, #68]	; (318 <AT25SEreadSample+0x60>)
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     2d2:	2100      	movs	r1, #0
}

void AT25SEreadSample(u8_t startingAddress, u8_t len, u8_t *data) {

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_SLOWREAD_ARRAY);
     2d4:	7030      	strb	r0, [r6, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     2d6:	2001      	movs	r0, #1
     2d8:	47a8      	blx	r5
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     2da:	2100      	movs	r1, #0

void AT25SEreadSample(u8_t startingAddress, u8_t len, u8_t *data) {

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_SLOWREAD_ARRAY);
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     2dc:	7030      	strb	r0, [r6, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     2de:	2001      	movs	r0, #1
     2e0:	47a8      	blx	r5
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
     2e2:	0021      	movs	r1, r4
void AT25SEreadSample(u8_t startingAddress, u8_t len, u8_t *data) {

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_SLOWREAD_ARRAY);
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     2e4:	7030      	strb	r0, [r6, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
     2e6:	2001      	movs	r0, #1
     2e8:	47a8      	blx	r5
     2ea:	9b00      	ldr	r3, [sp, #0]
     2ec:	9c01      	ldr	r4, [sp, #4]
     2ee:	7030      	strb	r0, [r6, #0]
     2f0:	18e3      	adds	r3, r4, r3
     2f2:	9300      	str	r3, [sp, #0]

    for (u8_t pos = 0; pos < len; ++pos) {
     2f4:	9b00      	ldr	r3, [sp, #0]
     2f6:	429c      	cmp	r4, r3
     2f8:	d005      	beq.n	306 <AT25SEreadSample+0x4e>
        data[pos] = spiDataTransfer(SPI1,dummy_rx);
     2fa:	7831      	ldrb	r1, [r6, #0]
     2fc:	2001      	movs	r0, #1
     2fe:	47a8      	blx	r5
     300:	7020      	strb	r0, [r4, #0]
     302:	3401      	adds	r4, #1
     304:	e7f6      	b.n	2f4 <AT25SEreadSample+0x3c>
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     306:	2380      	movs	r3, #128	; 0x80
     308:	02db      	lsls	r3, r3, #11
     30a:	61bb      	str	r3, [r7, #24]
    }
    pinHigh(cs_mem);

     30c:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
     30e:	46c0      	nop			; (mov r8, r8)
     310:	41004400 	.word	0x41004400
     314:	00001629 	.word	0x00001629
     318:	20000460 	.word	0x20000460

0000031c <readMS5803AdcResults>:
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     31c:	2280      	movs	r2, #128	; 0x80
     31e:	4b28      	ldr	r3, [pc, #160]	; (3c0 <readMS5803AdcResults+0xa4>)
     320:	0212      	lsls	r2, r2, #8
#include <MS5803.h>
#include <boardDefines.h>
#include <math.h>


u32_t readMS5803AdcResults() {
     322:	b5f0      	push	{r4, r5, r6, r7, lr}
     324:	615a      	str	r2, [r3, #20]
    pinLow(cs_baro);
//    dummy_rx = spiDataTransfer(SPI1, cmdAdcRead_);
//    u8_t _byte1 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte2 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte3 = spiDataTransfer(SPI1,dummy_tx);
    byteOut(spi2SCK,spi2MOSI, cmdAdcRead_);
     326:	2300      	movs	r3, #0
     328:	4d26      	ldr	r5, [pc, #152]	; (3c4 <readMS5803AdcResults+0xa8>)
#include <MS5803.h>
#include <boardDefines.h>
#include <math.h>


u32_t readMS5803AdcResults() {
     32a:	b087      	sub	sp, #28
    pinLow(cs_baro);
//    dummy_rx = spiDataTransfer(SPI1, cmdAdcRead_);
//    u8_t _byte1 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte2 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte3 = spiDataTransfer(SPI1,dummy_tx);
    byteOut(spi2SCK,spi2MOSI, cmdAdcRead_);
     32c:	9300      	str	r3, [sp, #0]
     32e:	786b      	ldrb	r3, [r5, #1]
     330:	7828      	ldrb	r0, [r5, #0]
     332:	78aa      	ldrb	r2, [r5, #2]
     334:	021b      	lsls	r3, r3, #8
     336:	4303      	orrs	r3, r0
     338:	0412      	lsls	r2, r2, #16
     33a:	0019      	movs	r1, r3
     33c:	0013      	movs	r3, r2
     33e:	430b      	orrs	r3, r1
     340:	79a9      	ldrb	r1, [r5, #6]
     342:	796f      	ldrb	r7, [r5, #5]
     344:	79ec      	ldrb	r4, [r5, #7]
     346:	0209      	lsls	r1, r1, #8
     348:	4339      	orrs	r1, r7
     34a:	0424      	lsls	r4, r4, #16
     34c:	0008      	movs	r0, r1
     34e:	0021      	movs	r1, r4
     350:	7a2c      	ldrb	r4, [r5, #8]
     352:	78ea      	ldrb	r2, [r5, #3]
     354:	7a6f      	ldrb	r7, [r5, #9]
     356:	4301      	orrs	r1, r0
     358:	0624      	lsls	r4, r4, #24
     35a:	430c      	orrs	r4, r1
     35c:	0612      	lsls	r2, r2, #24
     35e:	431a      	orrs	r2, r3
     360:	0020      	movs	r0, r4
     362:	792b      	ldrb	r3, [r5, #4]
     364:	0039      	movs	r1, r7
     366:	4e18      	ldr	r6, [pc, #96]	; (3c8 <readMS5803AdcResults+0xac>)
     368:	47b0      	blx	r6
    u8_t _byte1 = byteIn(spi2SCK,spi2MISO);
     36a:	7aeb      	ldrb	r3, [r5, #11]
     36c:	7aa9      	ldrb	r1, [r5, #10]
     36e:	021b      	lsls	r3, r3, #8
     370:	430b      	orrs	r3, r1
     372:	001a      	movs	r2, r3
     374:	7b2b      	ldrb	r3, [r5, #12]
     376:	4e15      	ldr	r6, [pc, #84]	; (3cc <readMS5803AdcResults+0xb0>)
     378:	041b      	lsls	r3, r3, #16
     37a:	4313      	orrs	r3, r2
     37c:	7b6a      	ldrb	r2, [r5, #13]
     37e:	7bad      	ldrb	r5, [r5, #14]
     380:	0612      	lsls	r2, r2, #24
     382:	431a      	orrs	r2, r3
     384:	0039      	movs	r1, r7
     386:	002b      	movs	r3, r5
     388:	0020      	movs	r0, r4
     38a:	9203      	str	r2, [sp, #12]
     38c:	47b0      	blx	r6
    u8_t _byte2 = byteIn(spi2SCK,spi2MISO);
     38e:	9a03      	ldr	r2, [sp, #12]
//    dummy_rx = spiDataTransfer(SPI1, cmdAdcRead_);
//    u8_t _byte1 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte2 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte3 = spiDataTransfer(SPI1,dummy_tx);
    byteOut(spi2SCK,spi2MOSI, cmdAdcRead_);
    u8_t _byte1 = byteIn(spi2SCK,spi2MISO);
     390:	9004      	str	r0, [sp, #16]
    u8_t _byte2 = byteIn(spi2SCK,spi2MISO);
     392:	002b      	movs	r3, r5
     394:	0039      	movs	r1, r7
     396:	0020      	movs	r0, r4
     398:	47b0      	blx	r6
    u8_t _byte3 = byteIn(spi2SCK,spi2MISO);
     39a:	9a03      	ldr	r2, [sp, #12]
//    u8_t _byte1 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte2 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte3 = spiDataTransfer(SPI1,dummy_tx);
    byteOut(spi2SCK,spi2MOSI, cmdAdcRead_);
    u8_t _byte1 = byteIn(spi2SCK,spi2MISO);
    u8_t _byte2 = byteIn(spi2SCK,spi2MISO);
     39c:	9005      	str	r0, [sp, #20]
    u8_t _byte3 = byteIn(spi2SCK,spi2MISO);
     39e:	002b      	movs	r3, r5
     3a0:	0020      	movs	r0, r4
     3a2:	0039      	movs	r1, r7
     3a4:	47b0      	blx	r6
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     3a6:	2280      	movs	r2, #128	; 0x80
     3a8:	4b05      	ldr	r3, [pc, #20]	; (3c0 <readMS5803AdcResults+0xa4>)
     3aa:	0212      	lsls	r2, r2, #8
     3ac:	619a      	str	r2, [r3, #24]
    pinHigh(cs_baro);

    u32_t _receive = (_byte1 << 16) | (_byte2 << 8) | (_byte3);
    return _receive;
     3ae:	9b04      	ldr	r3, [sp, #16]
     3b0:	9a05      	ldr	r2, [sp, #20]
     3b2:	041b      	lsls	r3, r3, #16
     3b4:	0215      	lsls	r5, r2, #8
     3b6:	431d      	orrs	r5, r3
     3b8:	4328      	orrs	r0, r5
}
     3ba:	b007      	add	sp, #28
     3bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
     3be:	46c0      	nop			; (mov r8, r8)
     3c0:	41004400 	.word	0x41004400
     3c4:	00002700 	.word	0x00002700
     3c8:	00000bf1 	.word	0x00000bf1
     3cc:	00000c5d 	.word	0x00000c5d

000003d0 <ConvertPressureTemperature>:

void ConvertPressureTemperature(Barometer *my_barometer) {
     3d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    volatile const u16_t C1 = my_barometer->coefficients_[0];
    volatile const u16_t C2 = my_barometer->coefficients_[1];
    volatile const u16_t C3 = my_barometer->coefficients_[2];
    volatile const u16_t C4 = my_barometer->coefficients_[3];
     3d2:	240a      	movs	r4, #10

    u32_t _receive = (_byte1 << 16) | (_byte2 << 8) | (_byte3);
    return _receive;
}

void ConvertPressureTemperature(Barometer *my_barometer) {
     3d4:	b08d      	sub	sp, #52	; 0x34
    volatile const u16_t C1 = my_barometer->coefficients_[0];
     3d6:	8803      	ldrh	r3, [r0, #0]
     3d8:	aa04      	add	r2, sp, #16
     3da:	8093      	strh	r3, [r2, #4]
    volatile const u16_t C2 = my_barometer->coefficients_[1];
     3dc:	8843      	ldrh	r3, [r0, #2]
    volatile const u16_t C3 = my_barometer->coefficients_[2];
    volatile const u16_t C4 = my_barometer->coefficients_[3];
     3de:	18a4      	adds	r4, r4, r2
    return _receive;
}

void ConvertPressureTemperature(Barometer *my_barometer) {
    volatile const u16_t C1 = my_barometer->coefficients_[0];
    volatile const u16_t C2 = my_barometer->coefficients_[1];
     3e0:	80d3      	strh	r3, [r2, #6]
    volatile const u16_t C3 = my_barometer->coefficients_[2];
     3e2:	8883      	ldrh	r3, [r0, #4]
    return _receive;
}

void ConvertPressureTemperature(Barometer *my_barometer) {
    volatile const u16_t C1 = my_barometer->coefficients_[0];
    volatile const u16_t C2 = my_barometer->coefficients_[1];
     3e4:	1d95      	adds	r5, r2, #6
    volatile const u16_t C3 = my_barometer->coefficients_[2];
     3e6:	8113      	strh	r3, [r2, #8]
    volatile const u16_t C4 = my_barometer->coefficients_[3];
     3e8:	88c3      	ldrh	r3, [r0, #6]
     3ea:	9401      	str	r4, [sp, #4]
     3ec:	8023      	strh	r3, [r4, #0]
    volatile const u16_t C5 = my_barometer->coefficients_[4];
     3ee:	8903      	ldrh	r3, [r0, #8]
     3f0:	aa07      	add	r2, sp, #28
     3f2:	8013      	strh	r3, [r2, #0]
    volatile const u16_t C6 = my_barometer->coefficients_[5];
     3f4:	230e      	movs	r3, #14

    u32_t _receive = (_byte1 << 16) | (_byte2 << 8) | (_byte3);
    return _receive;
}

void ConvertPressureTemperature(Barometer *my_barometer) {
     3f6:	0007      	movs	r7, r0
    volatile const u16_t C1 = my_barometer->coefficients_[0];
    volatile const u16_t C2 = my_barometer->coefficients_[1];
    volatile const u16_t C3 = my_barometer->coefficients_[2];
    volatile const u16_t C4 = my_barometer->coefficients_[3];
    volatile const u16_t C5 = my_barometer->coefficients_[4];
    volatile const u16_t C6 = my_barometer->coefficients_[5];
     3f8:	8941      	ldrh	r1, [r0, #10]
     3fa:	a804      	add	r0, sp, #16
     3fc:	181b      	adds	r3, r3, r0
     3fe:	8019      	strh	r1, [r3, #0]

    // calculate 1st order pressure and temperature (MS5607 1st order algorithm)
    const  int32_t dT = (my_barometer->rawTempatureData) - ((int32_t)C5 << 8);
     400:	8816      	ldrh	r6, [r2, #0]
    my_barometer->temperatureCelcus  = 2000 + (((int64_t)dT * C6) >> 32) ;
     402:	693a      	ldr	r2, [r7, #16]
     404:	0236      	lsls	r6, r6, #8
     406:	8818      	ldrh	r0, [r3, #0]
     408:	1b96      	subs	r6, r2, r6
     40a:	17f2      	asrs	r2, r6, #31
     40c:	4c2a      	ldr	r4, [pc, #168]	; (4b8 <ConvertPressureTemperature+0xe8>)
     40e:	9203      	str	r2, [sp, #12]
     410:	17f3      	asrs	r3, r6, #31
     412:	0032      	movs	r2, r6
     414:	b280      	uxth	r0, r0
     416:	2100      	movs	r1, #0
     418:	47a0      	blx	r4
     41a:	23fa      	movs	r3, #250	; 0xfa
     41c:	00db      	lsls	r3, r3, #3
     41e:	18c9      	adds	r1, r1, r3

    volatile const  int64_t OFF   = ((int64_t)C2 << 16) + (((C4 * (int64_t)dT)) >> 7);
     420:	882b      	ldrh	r3, [r5, #0]
    volatile const u16_t C5 = my_barometer->coefficients_[4];
    volatile const u16_t C6 = my_barometer->coefficients_[5];

    // calculate 1st order pressure and temperature (MS5607 1st order algorithm)
    const  int32_t dT = (my_barometer->rawTempatureData) - ((int32_t)C5 << 8);
    my_barometer->temperatureCelcus  = 2000 + (((int64_t)dT * C6) >> 32) ;
     422:	6179      	str	r1, [r7, #20]

    volatile const  int64_t OFF   = ((int64_t)C2 << 16) + (((C4 * (int64_t)dT)) >> 7);
     424:	b29b      	uxth	r3, r3
     426:	9302      	str	r3, [sp, #8]
     428:	9b01      	ldr	r3, [sp, #4]
     42a:	0032      	movs	r2, r6
     42c:	8818      	ldrh	r0, [r3, #0]
     42e:	2100      	movs	r1, #0
     430:	17f3      	asrs	r3, r6, #31
     432:	b280      	uxth	r0, r0
     434:	47a0      	blx	r4
     436:	064b      	lsls	r3, r1, #25
     438:	09c4      	lsrs	r4, r0, #7
     43a:	431c      	orrs	r4, r3
     43c:	2300      	movs	r3, #0
     43e:	11cd      	asrs	r5, r1, #7
     440:	9902      	ldr	r1, [sp, #8]
     442:	040a      	lsls	r2, r1, #16
     444:	1912      	adds	r2, r2, r4
     446:	416b      	adcs	r3, r5
     448:	9208      	str	r2, [sp, #32]
     44a:	9309      	str	r3, [sp, #36]	; 0x24
    volatile const  int64_t SENS  =  ((int64_t)C1 << 15) + (((C3 * (int64_t)dT)) >> 8);
     44c:	ab04      	add	r3, sp, #16
     44e:	889c      	ldrh	r4, [r3, #4]
     450:	8918      	ldrh	r0, [r3, #8]
     452:	0032      	movs	r2, r6
     454:	9b03      	ldr	r3, [sp, #12]
     456:	4d18      	ldr	r5, [pc, #96]	; (4b8 <ConvertPressureTemperature+0xe8>)
     458:	b280      	uxth	r0, r0
     45a:	2100      	movs	r1, #0
     45c:	47a8      	blx	r5
     45e:	060b      	lsls	r3, r1, #24
     460:	0a05      	lsrs	r5, r0, #8
     462:	431d      	orrs	r5, r3
     464:	2300      	movs	r3, #0
     466:	b2a4      	uxth	r4, r4
     468:	120e      	asrs	r6, r1, #8
     46a:	03e2      	lsls	r2, r4, #15
     46c:	1952      	adds	r2, r2, r5
     46e:	4173      	adcs	r3, r6
     470:	920a      	str	r2, [sp, #40]	; 0x28
     472:	930b      	str	r3, [sp, #44]	; 0x2c
    my_barometer->pressureMbar = (((my_barometer->rawPressureData * SENS) / 2097152) - OFF) / 32768;
     474:	9a0a      	ldr	r2, [sp, #40]	; 0x28
     476:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
     478:	9c08      	ldr	r4, [sp, #32]
     47a:	9d09      	ldr	r5, [sp, #36]	; 0x24
     47c:	4e0e      	ldr	r6, [pc, #56]	; (4b8 <ConvertPressureTemperature+0xe8>)
     47e:	68f8      	ldr	r0, [r7, #12]
     480:	2100      	movs	r1, #0
     482:	47b0      	blx	r6
     484:	2300      	movs	r3, #0
     486:	17ce      	asrs	r6, r1, #31
     488:	02f6      	lsls	r6, r6, #11
     48a:	0af2      	lsrs	r2, r6, #11
     48c:	1880      	adds	r0, r0, r2
     48e:	4159      	adcs	r1, r3
     490:	02ce      	lsls	r6, r1, #11
     492:	0d42      	lsrs	r2, r0, #21
     494:	4332      	orrs	r2, r6
     496:	154b      	asrs	r3, r1, #21
     498:	1b12      	subs	r2, r2, r4
     49a:	41ab      	sbcs	r3, r5
     49c:	2100      	movs	r1, #0
     49e:	17dc      	asrs	r4, r3, #31
     4a0:	0464      	lsls	r4, r4, #17
     4a2:	0c60      	lsrs	r0, r4, #17
     4a4:	1812      	adds	r2, r2, r0
     4a6:	414b      	adcs	r3, r1
     4a8:	0011      	movs	r1, r2
     4aa:	045b      	lsls	r3, r3, #17
     4ac:	0bca      	lsrs	r2, r1, #15
     4ae:	431a      	orrs	r2, r3
     4b0:	61fa      	str	r2, [r7, #28]
}
     4b2:	b00d      	add	sp, #52	; 0x34
     4b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
     4b6:	46c0      	nop			; (mov r8, r8)
     4b8:	00001669 	.word	0x00001669

000004bc <pascalToCent>:
        748275, 767202, 786555, 806356, 826627,
        847395, 868688, 890537, 912974, 936037,
        959766, 984206
    };

    my_barometer->pressurePa = my_barometer->pressureMbar *10;
     4bc:	220a      	movs	r2, #10
     4be:	69c3      	ldr	r3, [r0, #28]
    double altFeet = (1-pow((my_barometer->pressurePa/1013.25),(0.190284)))*145366.45;
    my_barometer->heightFeet = (float)altFeet;

}

void pascalToCent(Barometer *my_barometer) {
     4c0:	b570      	push	{r4, r5, r6, lr}
        748275, 767202, 786555, 806356, 826627,
        847395, 868688, 890537, 912974, 936037,
        959766, 984206
    };

    my_barometer->pressurePa = my_barometer->pressureMbar *10;
     4c2:	435a      	muls	r2, r3

    if (my_barometer->pressurePa > PA_INIT)
     4c4:	4c0e      	ldr	r4, [pc, #56]	; (500 <pascalToCent+0x44>)
        748275, 767202, 786555, 806356, 826627,
        847395, 868688, 890537, 912974, 936037,
        959766, 984206
    };

    my_barometer->pressurePa = my_barometer->pressureMbar *10;
     4c6:	6182      	str	r2, [r0, #24]

    if (my_barometer->pressurePa > PA_INIT)
     4c8:	42a2      	cmp	r2, r4
     4ca:	d901      	bls.n	4d0 <pascalToCent+0x14>
        my_barometer->heightCm = lookupTable[0];
     4cc:	4b0d      	ldr	r3, [pc, #52]	; (504 <pascalToCent+0x48>)
     4ce:	e015      	b.n	4fc <pascalToCent+0x40>
    else {
        const int32_t inx = (PA_INIT - my_barometer->pressurePa) >> 10;
     4d0:	1aa3      	subs	r3, r4, r2
     4d2:	0a9b      	lsrs	r3, r3, #10
        if (inx >= PZLUT_ENTRIES - 1)
     4d4:	2b4b      	cmp	r3, #75	; 0x4b
     4d6:	d901      	bls.n	4dc <pascalToCent+0x20>
            my_barometer->heightCm = lookupTable[PZLUT_ENTRIES - 1];
     4d8:	4b0b      	ldr	r3, [pc, #44]	; (508 <pascalToCent+0x4c>)
     4da:	e00f      	b.n	4fc <pascalToCent+0x40>
        else {
            const int32_t pa1 = PA_INIT - (inx << 10);
            const int32_t z1 = lookupTable[inx];
     4dc:	4d0b      	ldr	r5, [pc, #44]	; (50c <pascalToCent+0x50>)
     4de:	0099      	lsls	r1, r3, #2
            const int32_t z2 = lookupTable[inx + 1];
            my_barometer->heightCm = (z1 + (((pa1 - my_barometer->pressurePa) * (z2 - z1)) >> 10));
     4e0:	029e      	lsls	r6, r3, #10
        if (inx >= PZLUT_ENTRIES - 1)
            my_barometer->heightCm = lookupTable[PZLUT_ENTRIES - 1];
        else {
            const int32_t pa1 = PA_INIT - (inx << 10);
            const int32_t z1 = lookupTable[inx];
            const int32_t z2 = lookupTable[inx + 1];
     4e2:	3301      	adds	r3, #1
     4e4:	009b      	lsls	r3, r3, #2
     4e6:	18eb      	adds	r3, r5, r3
        const int32_t inx = (PA_INIT - my_barometer->pressurePa) >> 10;
        if (inx >= PZLUT_ENTRIES - 1)
            my_barometer->heightCm = lookupTable[PZLUT_ENTRIES - 1];
        else {
            const int32_t pa1 = PA_INIT - (inx << 10);
            const int32_t z1 = lookupTable[inx];
     4e8:	1869      	adds	r1, r5, r1
            const int32_t z2 = lookupTable[inx + 1];
            my_barometer->heightCm = (z1 + (((pa1 - my_barometer->pressurePa) * (z2 - z1)) >> 10));
     4ea:	1ba4      	subs	r4, r4, r6
        const int32_t inx = (PA_INIT - my_barometer->pressurePa) >> 10;
        if (inx >= PZLUT_ENTRIES - 1)
            my_barometer->heightCm = lookupTable[PZLUT_ENTRIES - 1];
        else {
            const int32_t pa1 = PA_INIT - (inx << 10);
            const int32_t z1 = lookupTable[inx];
     4ec:	6909      	ldr	r1, [r1, #16]
            const int32_t z2 = lookupTable[inx + 1];
            my_barometer->heightCm = (z1 + (((pa1 - my_barometer->pressurePa) * (z2 - z1)) >> 10));
     4ee:	1aa4      	subs	r4, r4, r2
     4f0:	691a      	ldr	r2, [r3, #16]
     4f2:	1a52      	subs	r2, r2, r1
     4f4:	0013      	movs	r3, r2
     4f6:	4363      	muls	r3, r4
     4f8:	0a9b      	lsrs	r3, r3, #10
     4fa:	185b      	adds	r3, r3, r1
     4fc:	6203      	str	r3, [r0, #32]
        }
    }
}
     4fe:	bd70      	pop	{r4, r5, r6, pc}
     500:	000199cc 	.word	0x000199cc
     504:	ffff8d20 	.word	0xffff8d20
     508:	000f048e 	.word	0x000f048e
     50c:	00002700 	.word	0x00002700

00000510 <readMS5803Coefficients>:

void readMS5803Coefficients(Barometer *my_barometer) {
     510:	b5f0      	push	{r4, r5, r6, r7, lr}
     512:	27a2      	movs	r7, #162	; 0xa2
     514:	b087      	sub	sp, #28
     516:	9002      	str	r0, [sp, #8]

    u8_t dummy_tx = 0xFF;
    u8_t dummy_rx;

    for (u8_t coeff_num = 0; coeff_num < 6 ; ++coeff_num ) {
        delay_us(600);
     518:	2096      	movs	r0, #150	; 0x96
     51a:	4c2b      	ldr	r4, [pc, #172]	; (5c8 <readMS5803Coefficients+0xb8>)
     51c:	0080      	lsls	r0, r0, #2
     51e:	47a0      	blx	r4
        u8_t _cmd = MS5803_CMD_PROM_READ + ((coeff_num+1)*2);
        delay_us(600);
     520:	2096      	movs	r0, #150	; 0x96
     522:	0080      	lsls	r0, r0, #2
     524:	47a0      	blx	r4
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     526:	2280      	movs	r2, #128	; 0x80
        pinLow(cs_baro);
//      dummy_rx = spiDataTransfer(SPI1, _cmd);
//      u8_t _byte1 = spiDataTransfer(SPI1,dummy_tx);
//      u8_t _byte2 = spiDataTransfer(SPI1,dummy_tx);
        byteOut(spi2SCK,spi2MOSI, _cmd);
     528:	4c28      	ldr	r4, [pc, #160]	; (5cc <readMS5803Coefficients+0xbc>)
     52a:	4b29      	ldr	r3, [pc, #164]	; (5d0 <readMS5803Coefficients+0xc0>)
     52c:	0212      	lsls	r2, r2, #8
     52e:	615a      	str	r2, [r3, #20]
     530:	7863      	ldrb	r3, [r4, #1]
     532:	7820      	ldrb	r0, [r4, #0]
     534:	78a2      	ldrb	r2, [r4, #2]
     536:	021b      	lsls	r3, r3, #8
     538:	4303      	orrs	r3, r0
     53a:	0412      	lsls	r2, r2, #16
     53c:	0019      	movs	r1, r3
     53e:	0013      	movs	r3, r2
     540:	430b      	orrs	r3, r1
     542:	79a1      	ldrb	r1, [r4, #6]
     544:	7966      	ldrb	r6, [r4, #5]
     546:	0209      	lsls	r1, r1, #8
     548:	4331      	orrs	r1, r6
     54a:	0008      	movs	r0, r1
     54c:	79e1      	ldrb	r1, [r4, #7]
     54e:	78e2      	ldrb	r2, [r4, #3]
     550:	0409      	lsls	r1, r1, #16
     552:	4301      	orrs	r1, r0
     554:	7a20      	ldrb	r0, [r4, #8]
     556:	7a66      	ldrb	r6, [r4, #9]
     558:	0612      	lsls	r2, r2, #24
     55a:	0600      	lsls	r0, r0, #24
     55c:	4308      	orrs	r0, r1
     55e:	431a      	orrs	r2, r3
     560:	9700      	str	r7, [sp, #0]
     562:	7923      	ldrb	r3, [r4, #4]
     564:	0031      	movs	r1, r6
     566:	4d1b      	ldr	r5, [pc, #108]	; (5d4 <readMS5803Coefficients+0xc4>)
     568:	9003      	str	r0, [sp, #12]
     56a:	47a8      	blx	r5
        u8_t _byte1 = byteIn(spi2SCK,spi2MISO);
     56c:	7ae3      	ldrb	r3, [r4, #11]
     56e:	0020      	movs	r0, r4
     570:	7aa1      	ldrb	r1, [r4, #10]
     572:	7b24      	ldrb	r4, [r4, #12]
     574:	021b      	lsls	r3, r3, #8
     576:	430b      	orrs	r3, r1
     578:	0424      	lsls	r4, r4, #16
     57a:	001a      	movs	r2, r3
     57c:	0023      	movs	r3, r4
     57e:	7b44      	ldrb	r4, [r0, #13]
     580:	7b85      	ldrb	r5, [r0, #14]
     582:	4313      	orrs	r3, r2
     584:	0624      	lsls	r4, r4, #24
     586:	431c      	orrs	r4, r3
     588:	0022      	movs	r2, r4
     58a:	002b      	movs	r3, r5
     58c:	9404      	str	r4, [sp, #16]
     58e:	0031      	movs	r1, r6
     590:	4c11      	ldr	r4, [pc, #68]	; (5d8 <readMS5803Coefficients+0xc8>)
     592:	9803      	ldr	r0, [sp, #12]
     594:	47a0      	blx	r4
        u8_t _byte2 = byteIn(spi2SCK,spi2MISO);
     596:	002b      	movs	r3, r5
        pinLow(cs_baro);
//      dummy_rx = spiDataTransfer(SPI1, _cmd);
//      u8_t _byte1 = spiDataTransfer(SPI1,dummy_tx);
//      u8_t _byte2 = spiDataTransfer(SPI1,dummy_tx);
        byteOut(spi2SCK,spi2MOSI, _cmd);
        u8_t _byte1 = byteIn(spi2SCK,spi2MISO);
     598:	9005      	str	r0, [sp, #20]
        u8_t _byte2 = byteIn(spi2SCK,spi2MISO);
     59a:	9a04      	ldr	r2, [sp, #16]
     59c:	9803      	ldr	r0, [sp, #12]
     59e:	0031      	movs	r1, r6
     5a0:	4c0d      	ldr	r4, [pc, #52]	; (5d8 <readMS5803Coefficients+0xc8>)
     5a2:	47a0      	blx	r4
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     5a4:	2280      	movs	r2, #128	; 0x80
     5a6:	4b0a      	ldr	r3, [pc, #40]	; (5d0 <readMS5803Coefficients+0xc0>)
     5a8:	0212      	lsls	r2, r2, #8
     5aa:	619a      	str	r2, [r3, #24]
        pinHigh(cs_baro);
        my_barometer->coefficients_[coeff_num] = (_byte1 << 8) | _byte2;
     5ac:	9b05      	ldr	r3, [sp, #20]
     5ae:	021d      	lsls	r5, r3, #8
     5b0:	9b02      	ldr	r3, [sp, #8]
     5b2:	4328      	orrs	r0, r5
     5b4:	8018      	strh	r0, [r3, #0]
     5b6:	1cbb      	adds	r3, r7, #2
     5b8:	b2df      	uxtb	r7, r3
     5ba:	9b02      	ldr	r3, [sp, #8]
     5bc:	3302      	adds	r3, #2
     5be:	9302      	str	r3, [sp, #8]
void readMS5803Coefficients(Barometer *my_barometer) {

    u8_t dummy_tx = 0xFF;
    u8_t dummy_rx;

    for (u8_t coeff_num = 0; coeff_num < 6 ; ++coeff_num ) {
     5c0:	2fae      	cmp	r7, #174	; 0xae
     5c2:	d1a9      	bne.n	518 <readMS5803Coefficients+0x8>
        u8_t _byte2 = byteIn(spi2SCK,spi2MISO);
        pinHigh(cs_baro);
        my_barometer->coefficients_[coeff_num] = (_byte1 << 8) | _byte2;
    }

}
     5c4:	b007      	add	sp, #28
     5c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
     5c8:	00000e69 	.word	0x00000e69
     5cc:	00002700 	.word	0x00002700
     5d0:	41004400 	.word	0x41004400
     5d4:	00000bf1 	.word	0x00000bf1
     5d8:	00000c5d 	.word	0x00000c5d

000005dc <initMS5803Barometer>:

void initMS5803Barometer(Barometer *my_barometer) {
     5dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     5de:	2680      	movs	r6, #128	; 0x80
    u8_t dummy_tx = 0xFF;
    u8_t dummy_rx;

    pinLow(cs_baro);
//   dummy_rx = spiDataTransfer(SPI1, MS5803_CMD_RES);
    byteOut(spi2SCK,spi2MOSI, MS5803_CMD_RES);
     5e0:	231e      	movs	r3, #30
     5e2:	491a      	ldr	r1, [pc, #104]	; (64c <initMS5803Barometer+0x70>)
     5e4:	4d1a      	ldr	r5, [pc, #104]	; (650 <initMS5803Barometer+0x74>)
     5e6:	0236      	lsls	r6, r6, #8
     5e8:	616e      	str	r6, [r5, #20]
     5ea:	9300      	str	r3, [sp, #0]
     5ec:	784b      	ldrb	r3, [r1, #1]
     5ee:	780a      	ldrb	r2, [r1, #0]
     5f0:	021b      	lsls	r3, r3, #8
     5f2:	4313      	orrs	r3, r2
     5f4:	788a      	ldrb	r2, [r1, #2]
        my_barometer->coefficients_[coeff_num] = (_byte1 << 8) | _byte2;
    }

}

void initMS5803Barometer(Barometer *my_barometer) {
     5f6:	0004      	movs	r4, r0
    u8_t dummy_tx = 0xFF;
    u8_t dummy_rx;

    pinLow(cs_baro);
//   dummy_rx = spiDataTransfer(SPI1, MS5803_CMD_RES);
    byteOut(spi2SCK,spi2MOSI, MS5803_CMD_RES);
     5f8:	0412      	lsls	r2, r2, #16
     5fa:	0018      	movs	r0, r3
     5fc:	0013      	movs	r3, r2
     5fe:	78ca      	ldrb	r2, [r1, #3]
     600:	4303      	orrs	r3, r0
     602:	0612      	lsls	r2, r2, #24
     604:	1d4f      	adds	r7, r1, #5
     606:	431a      	orrs	r2, r3
     608:	7948      	ldrb	r0, [r1, #5]
     60a:	790b      	ldrb	r3, [r1, #4]
     60c:	7989      	ldrb	r1, [r1, #6]
     60e:	0209      	lsls	r1, r1, #8
     610:	4301      	orrs	r1, r0
     612:	78b8      	ldrb	r0, [r7, #2]
     614:	0400      	lsls	r0, r0, #16
     616:	4301      	orrs	r1, r0
     618:	78f8      	ldrb	r0, [r7, #3]
     61a:	0600      	lsls	r0, r0, #24
     61c:	4308      	orrs	r0, r1
     61e:	7939      	ldrb	r1, [r7, #4]
     620:	4f0c      	ldr	r7, [pc, #48]	; (654 <initMS5803Barometer+0x78>)
     622:	47b8      	blx	r7
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     624:	61ae      	str	r6, [r5, #24]
    pinHigh(cs_baro);
    delay_ms(200);
     626:	20c8      	movs	r0, #200	; 0xc8
     628:	4b0b      	ldr	r3, [pc, #44]	; (658 <initMS5803Barometer+0x7c>)
     62a:	4798      	blx	r3
    readMS5803Coefficients(my_barometer);
     62c:	0020      	movs	r0, r4
     62e:	4b0b      	ldr	r3, [pc, #44]	; (65c <initMS5803Barometer+0x80>)
     630:	4798      	blx	r3

    my_barometer->heightCm = 4000;
     632:	23fa      	movs	r3, #250	; 0xfa
     634:	011b      	lsls	r3, r3, #4
     636:	6223      	str	r3, [r4, #32]
    my_barometer->pressurePa = 10000;
     638:	4b09      	ldr	r3, [pc, #36]	; (660 <initMS5803Barometer+0x84>)
     63a:	61a3      	str	r3, [r4, #24]
    my_barometer->rawPressureData = 4311550;
     63c:	4b09      	ldr	r3, [pc, #36]	; (664 <initMS5803Barometer+0x88>)
     63e:	60e3      	str	r3, [r4, #12]
    my_barometer->rawTempatureData = 8387300;
     640:	4b09      	ldr	r3, [pc, #36]	; (668 <initMS5803Barometer+0x8c>)
     642:	6123      	str	r3, [r4, #16]
    my_barometer->temperatureCelcus = 2000;
     644:	23fa      	movs	r3, #250	; 0xfa
     646:	00db      	lsls	r3, r3, #3
     648:	6163      	str	r3, [r4, #20]




}
     64a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
     64c:	00002700 	.word	0x00002700
     650:	41004400 	.word	0x41004400
     654:	00000bf1 	.word	0x00000bf1
     658:	00000e99 	.word	0x00000e99
     65c:	00000511 	.word	0x00000511
     660:	00002710 	.word	0x00002710
     664:	0041c9fe 	.word	0x0041c9fe
     668:	007ffae4 	.word	0x007ffae4

0000066c <init>:
#include "math.h"




void init() {
     66c:	b5f0      	push	{r4, r5, r6, r7, lr}
    SystemInit();
     66e:	4bbf      	ldr	r3, [pc, #764]	; (96c <init+0x300>)
#include "math.h"




void init() {
     670:	b085      	sub	sp, #20
    SystemInit();
     672:	4798      	blx	r3
    GclkInit();
     674:	4bbe      	ldr	r3, [pc, #760]	; (970 <init+0x304>)
     676:	4798      	blx	r3
    RtcInit();
     678:	4bbe      	ldr	r3, [pc, #760]	; (974 <init+0x308>)
     67a:	4798      	blx	r3
    delayInit();
     67c:	4bbe      	ldr	r3, [pc, #760]	; (978 <init+0x30c>)
     67e:	4798      	blx	r3
    adcInit();
     680:	4bbe      	ldr	r3, [pc, #760]	; (97c <init+0x310>)
     682:	4798      	blx	r3
    dmaInit();
     684:	4bbe      	ldr	r3, [pc, #760]	; (980 <init+0x314>)
     686:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     688:	2240      	movs	r2, #64	; 0x40
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     68a:	21c1      	movs	r1, #193	; 0xc1

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     68c:	4bbd      	ldr	r3, [pc, #756]	; (984 <init+0x318>)
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     68e:	0089      	lsls	r1, r1, #2

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     690:	601a      	str	r2, [r3, #0]
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     692:	5858      	ldr	r0, [r3, r1]
     694:	4abc      	ldr	r2, [pc, #752]	; (988 <init+0x31c>)
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     696:	2401      	movs	r4, #1
     698:	4002      	ands	r2, r0
     69a:	505a      	str	r2, [r3, r1]
     69c:	4bbb      	ldr	r3, [pc, #748]	; (98c <init+0x320>)

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     69e:	2510      	movs	r5, #16
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     6a0:	0019      	movs	r1, r3
     6a2:	3154      	adds	r1, #84	; 0x54
     6a4:	780a      	ldrb	r2, [r1, #0]

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     6a6:	0018      	movs	r0, r3
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     6a8:	43a2      	bics	r2, r4
     6aa:	700a      	strb	r2, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     6ac:	2280      	movs	r2, #128	; 0x80
     6ae:	0352      	lsls	r2, r2, #13
     6b0:	609a      	str	r2, [r3, #8]

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     6b2:	220f      	movs	r2, #15
     6b4:	3033      	adds	r0, #51	; 0x33
     6b6:	7801      	ldrb	r1, [r0, #0]
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     6b8:	001e      	movs	r6, r3

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     6ba:	4391      	bics	r1, r2
     6bc:	4321      	orrs	r1, r4
     6be:	7001      	strb	r1, [r0, #0]
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     6c0:	7cc1      	ldrb	r1, [r0, #19]
     6c2:	36c3      	adds	r6, #195	; 0xc3
     6c4:	4321      	orrs	r1, r4
     6c6:	74c1      	strb	r1, [r0, #19]

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     6c8:	0019      	movs	r1, r3
     6ca:	31b1      	adds	r1, #177	; 0xb1
     6cc:	7808      	ldrb	r0, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     6ce:	001f      	movs	r7, r3

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     6d0:	4010      	ands	r0, r2
     6d2:	4328      	orrs	r0, r5
     6d4:	7008      	strb	r0, [r1, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     6d6:	7830      	ldrb	r0, [r6, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     6d8:	3788      	adds	r7, #136	; 0x88
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     6da:	4320      	orrs	r0, r4
     6dc:	7030      	strb	r0, [r6, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     6de:	7808      	ldrb	r0, [r1, #0]
     6e0:	4010      	ands	r0, r2
     6e2:	4328      	orrs	r0, r5
     6e4:	7008      	strb	r0, [r1, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     6e6:	7830      	ldrb	r0, [r6, #0]
     6e8:	4320      	orrs	r0, r4
     6ea:	7030      	strb	r0, [r6, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     6ec:	7d30      	ldrb	r0, [r6, #20]
     6ee:	43a0      	bics	r0, r4
     6f0:	7530      	strb	r0, [r6, #20]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     6f2:	2080      	movs	r0, #128	; 0x80
     6f4:	0400      	lsls	r0, r0, #16
     6f6:	9703      	str	r7, [sp, #12]
     6f8:	6038      	str	r0, [r7, #0]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     6fa:	60f8      	str	r0, [r7, #12]

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     6fc:	7808      	ldrb	r0, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     6fe:	003e      	movs	r6, r7

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     700:	4390      	bics	r0, r2
     702:	4320      	orrs	r0, r4
     704:	7008      	strb	r0, [r1, #0]
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     706:	20c2      	movs	r0, #194	; 0xc2
     708:	4684      	mov	ip, r0
     70a:	449c      	add	ip, r3
     70c:	4660      	mov	r0, ip
     70e:	4667      	mov	r7, ip
     710:	7800      	ldrb	r0, [r0, #0]
     712:	4320      	orrs	r0, r4
     714:	7038      	strb	r0, [r7, #0]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     716:	7808      	ldrb	r0, [r1, #0]
     718:	4390      	bics	r0, r2
     71a:	4320      	orrs	r0, r4
     71c:	7008      	strb	r0, [r1, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     71e:	0018      	movs	r0, r3
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     720:	7839      	ldrb	r1, [r7, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     722:	30d6      	adds	r0, #214	; 0xd6
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     724:	4321      	orrs	r1, r4
     726:	7039      	strb	r1, [r7, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     728:	7801      	ldrb	r1, [r0, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     72a:	2702      	movs	r7, #2
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     72c:	43a1      	bics	r1, r4
     72e:	7001      	strb	r1, [r0, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     730:	2180      	movs	r1, #128	; 0x80
     732:	9803      	ldr	r0, [sp, #12]
     734:	03c9      	lsls	r1, r1, #15
     736:	6001      	str	r1, [r0, #0]

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     738:	0018      	movs	r0, r3
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     73a:	60f1      	str	r1, [r6, #12]

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     73c:	3031      	adds	r0, #49	; 0x31
     73e:	7801      	ldrb	r1, [r0, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     740:	3e3f      	subs	r6, #63	; 0x3f

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     742:	4011      	ands	r1, r2
     744:	430d      	orrs	r5, r1
     746:	7005      	strb	r5, [r0, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     748:	001d      	movs	r5, r3
     74a:	3543      	adds	r5, #67	; 0x43
     74c:	7829      	ldrb	r1, [r5, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     74e:	46bc      	mov	ip, r7
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     750:	4321      	orrs	r1, r4
     752:	7029      	strb	r1, [r5, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     754:	7da9      	ldrb	r1, [r5, #22]
     756:	3505      	adds	r5, #5
     758:	43a1      	bics	r1, r4
     75a:	7469      	strb	r1, [r5, #17]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     75c:	2180      	movs	r1, #128	; 0x80
     75e:	0489      	lsls	r1, r1, #18
     760:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     762:	6159      	str	r1, [r3, #20]

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     764:	7801      	ldrb	r1, [r0, #0]
     766:	4391      	bics	r1, r2
     768:	4321      	orrs	r1, r4
     76a:	7001      	strb	r1, [r0, #0]
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     76c:	7c41      	ldrb	r1, [r0, #17]
     76e:	3011      	adds	r0, #17
     770:	4321      	orrs	r1, r4
     772:	7001      	strb	r1, [r0, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     774:	7d81      	ldrb	r1, [r0, #22]
     776:	43a1      	bics	r1, r4
     778:	7581      	strb	r1, [r0, #22]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     77a:	2180      	movs	r1, #128	; 0x80
     77c:	0449      	lsls	r1, r1, #17
     77e:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     780:	6159      	str	r1, [r3, #20]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     782:	7829      	ldrb	r1, [r5, #0]
     784:	43a1      	bics	r1, r4
     786:	7029      	strb	r1, [r5, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     788:	2180      	movs	r1, #128	; 0x80
     78a:	0049      	lsls	r1, r1, #1
     78c:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     78e:	7831      	ldrb	r1, [r6, #0]
     790:	43a1      	bics	r1, r4
     792:	7031      	strb	r1, [r6, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     794:	2180      	movs	r1, #128	; 0x80
     796:	0089      	lsls	r1, r1, #2
     798:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     79a:	0019      	movs	r1, r3
     79c:	314b      	adds	r1, #75	; 0x4b
     79e:	7808      	ldrb	r0, [r1, #0]
     7a0:	43a0      	bics	r0, r4
     7a2:	7008      	strb	r0, [r1, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     7a4:	7808      	ldrb	r0, [r1, #0]
     7a6:	4338      	orrs	r0, r7
     7a8:	7008      	strb	r0, [r1, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     7aa:	2080      	movs	r0, #128	; 0x80
     7ac:	0100      	lsls	r0, r0, #4
     7ae:	6058      	str	r0, [r3, #4]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     7b0:	4877      	ldr	r0, [pc, #476]	; (990 <init+0x324>)
     7b2:	371e      	adds	r7, #30
     7b4:	7800      	ldrb	r0, [r0, #0]
     7b6:	4010      	ands	r0, r2
     7b8:	4338      	orrs	r0, r7
     7ba:	4f75      	ldr	r7, [pc, #468]	; (990 <init+0x324>)
     7bc:	7038      	strb	r0, [r7, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     7be:	7808      	ldrb	r0, [r1, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     7c0:	2720      	movs	r7, #32
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     7c2:	4320      	orrs	r0, r4
     7c4:	7008      	strb	r0, [r1, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     7c6:	0018      	movs	r0, r3
     7c8:	3034      	adds	r0, #52	; 0x34
     7ca:	7801      	ldrb	r1, [r0, #0]
     7cc:	4011      	ands	r1, r2
     7ce:	4339      	orrs	r1, r7
     7d0:	7001      	strb	r1, [r0, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     7d2:	7831      	ldrb	r1, [r6, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     7d4:	4667      	mov	r7, ip
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     7d6:	4321      	orrs	r1, r4
     7d8:	7031      	strb	r1, [r6, #0]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     7da:	4666      	mov	r6, ip
     7dc:	7801      	ldrb	r1, [r0, #0]
     7de:	4391      	bics	r1, r2
     7e0:	4331      	orrs	r1, r6
     7e2:	7001      	strb	r1, [r0, #0]
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     7e4:	7829      	ldrb	r1, [r5, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     7e6:	3096      	adds	r0, #150	; 0x96
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     7e8:	4321      	orrs	r1, r4
     7ea:	7029      	strb	r1, [r5, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     7ec:	7801      	ldrb	r1, [r0, #0]
     7ee:	001e      	movs	r6, r3
     7f0:	43a1      	bics	r1, r4
     7f2:	7001      	strb	r1, [r0, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     7f4:	2180      	movs	r1, #128	; 0x80
     7f6:	9803      	ldr	r0, [sp, #12]
     7f8:	00c9      	lsls	r1, r1, #3
     7fa:	6001      	str	r1, [r0, #0]
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     7fc:	0018      	movs	r0, r3
     7fe:	3098      	adds	r0, #152	; 0x98
     800:	6001      	str	r1, [r0, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     802:	78a8      	ldrb	r0, [r5, #2]
     804:	3651      	adds	r6, #81	; 0x51
     806:	43a0      	bics	r0, r4
     808:	70a8      	strb	r0, [r5, #2]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     80a:	6099      	str	r1, [r3, #8]
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     80c:	6199      	str	r1, [r3, #24]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     80e:	7a29      	ldrb	r1, [r5, #8]
     810:	43a1      	bics	r1, r4
     812:	7229      	strb	r1, [r5, #8]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     814:	2180      	movs	r1, #128	; 0x80
     816:	0249      	lsls	r1, r1, #9
     818:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     81a:	7831      	ldrb	r1, [r6, #0]
     81c:	43a1      	bics	r1, r4
     81e:	7031      	strb	r1, [r6, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     820:	2180      	movs	r1, #128	; 0x80
     822:	0289      	lsls	r1, r1, #10
     824:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     826:	0019      	movs	r1, r3
     828:	3153      	adds	r1, #83	; 0x53
     82a:	7808      	ldrb	r0, [r1, #0]
     82c:	43a0      	bics	r0, r4
     82e:	7008      	strb	r0, [r1, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     830:	7808      	ldrb	r0, [r1, #0]
     832:	4338      	orrs	r0, r7
     834:	7008      	strb	r0, [r1, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     836:	001f      	movs	r7, r3


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     838:	2080      	movs	r0, #128	; 0x80
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     83a:	3739      	adds	r7, #57	; 0x39


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     83c:	0300      	lsls	r0, r0, #12
     83e:	6058      	str	r0, [r3, #4]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     840:	9703      	str	r7, [sp, #12]
     842:	7838      	ldrb	r0, [r7, #0]
     844:	2720      	movs	r7, #32
     846:	4010      	ands	r0, r2
     848:	4338      	orrs	r0, r7
     84a:	9f03      	ldr	r7, [sp, #12]
     84c:	7038      	strb	r0, [r7, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     84e:	7808      	ldrb	r0, [r1, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     850:	2720      	movs	r7, #32
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     852:	4320      	orrs	r0, r4
     854:	7008      	strb	r0, [r1, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     856:	0018      	movs	r0, r3
     858:	3038      	adds	r0, #56	; 0x38
     85a:	7801      	ldrb	r1, [r0, #0]
     85c:	4011      	ands	r1, r2
     85e:	4339      	orrs	r1, r7
     860:	7001      	strb	r1, [r0, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     862:	7831      	ldrb	r1, [r6, #0]
     864:	4321      	orrs	r1, r4
     866:	7031      	strb	r1, [r6, #0]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     868:	4666      	mov	r6, ip
     86a:	7801      	ldrb	r1, [r0, #0]
     86c:	4391      	bics	r1, r2
     86e:	4331      	orrs	r1, r6
     870:	7001      	strb	r1, [r0, #0]
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     872:	7a29      	ldrb	r1, [r5, #8]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     874:	3014      	adds	r0, #20
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     876:	4321      	orrs	r1, r4
     878:	7229      	strb	r1, [r5, #8]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     87a:	7981      	ldrb	r1, [r0, #6]
     87c:	43a1      	bics	r1, r4
     87e:	7181      	strb	r1, [r0, #6]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     880:	2180      	movs	r1, #128	; 0x80
     882:	02c9      	lsls	r1, r1, #11
     884:	6099      	str	r1, [r3, #8]
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     886:	6199      	str	r1, [r3, #24]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     888:	7801      	ldrb	r1, [r0, #0]
     88a:	43a1      	bics	r1, r4
     88c:	7001      	strb	r1, [r0, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     88e:	2180      	movs	r1, #128	; 0x80
     890:	0149      	lsls	r1, r1, #5
     892:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     894:	7881      	ldrb	r1, [r0, #2]
     896:	43a1      	bics	r1, r4
     898:	7081      	strb	r1, [r0, #2]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     89a:	2180      	movs	r1, #128	; 0x80
     89c:	01c9      	lsls	r1, r1, #7
     89e:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     8a0:	0019      	movs	r1, r3
     8a2:	314d      	adds	r1, #77	; 0x4d
     8a4:	7808      	ldrb	r0, [r1, #0]
     8a6:	43a0      	bics	r0, r4
     8a8:	7008      	strb	r0, [r1, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     8aa:	7808      	ldrb	r0, [r1, #0]
     8ac:	4330      	orrs	r0, r6
     8ae:	7008      	strb	r0, [r1, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     8b0:	2180      	movs	r1, #128	; 0x80
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     8b2:	0018      	movs	r0, r3


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     8b4:	0189      	lsls	r1, r1, #6
     8b6:	6059      	str	r1, [r3, #4]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     8b8:	304f      	adds	r0, #79	; 0x4f
     8ba:	7801      	ldrb	r1, [r0, #0]
     8bc:	43a1      	bics	r1, r4
     8be:	7001      	strb	r1, [r0, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     8c0:	2180      	movs	r1, #128	; 0x80
     8c2:	0209      	lsls	r1, r1, #8
     8c4:	6099      	str	r1, [r3, #8]
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     8c6:	6199      	str	r1, [r3, #24]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     8c8:	0019      	movs	r1, r3
     8ca:	3155      	adds	r1, #85	; 0x55
     8cc:	7808      	ldrb	r0, [r1, #0]
     8ce:	43a0      	bics	r0, r4
     8d0:	7008      	strb	r0, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     8d2:	2080      	movs	r0, #128	; 0x80
     8d4:	0380      	lsls	r0, r0, #14
     8d6:	6098      	str	r0, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
}


inline static void pinCfg(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].reg = p.cfg;
     8d8:	2040      	movs	r0, #64	; 0x40
     8da:	7008      	strb	r0, [r1, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     8dc:	7848      	ldrb	r0, [r1, #1]
     8de:	43a0      	bics	r0, r4
     8e0:	7048      	strb	r0, [r1, #1]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     8e2:	2080      	movs	r0, #128	; 0x80
     8e4:	03c0      	lsls	r0, r0, #15
     8e6:	6098      	str	r0, [r3, #8]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     8e8:	0018      	movs	r0, r3
     8ea:	303b      	adds	r0, #59	; 0x3b
     8ec:	7805      	ldrb	r5, [r0, #0]
     8ee:	4395      	bics	r5, r2
     8f0:	4335      	orrs	r5, r6
     8f2:	7005      	strb	r5, [r0, #0]
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     8f4:	784d      	ldrb	r5, [r1, #1]
     8f6:	4325      	orrs	r5, r4
     8f8:	704d      	strb	r5, [r1, #1]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     8fa:	788d      	ldrb	r5, [r1, #2]
     8fc:	43a5      	bics	r5, r4
     8fe:	708d      	strb	r5, [r1, #2]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     900:	788d      	ldrb	r5, [r1, #2]
     902:	4335      	orrs	r5, r6
     904:	708d      	strb	r5, [r1, #2]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     906:	2580      	movs	r5, #128	; 0x80
     908:	042d      	lsls	r5, r5, #16
     90a:	605d      	str	r5, [r3, #4]

//    sercomClockEnable(SPI2, 3, 4);
//   sercomSpiMasterInit(SPI2, 3, 0, 0, 0, 0x00);

    sercomClockEnable(SPI0, 3, 4);
    sercomSpiMasterInit(SPI0, 3, 0, 0, 0, 0x00);
     90c:	2500      	movs	r5, #0
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     90e:	7803      	ldrb	r3, [r0, #0]
    pinMux(RxPo);

//    sercomClockEnable(SPI2, 3, 4);
//   sercomSpiMasterInit(SPI2, 3, 0, 0, 0, 0x00);

    sercomClockEnable(SPI0, 3, 4);
     910:	4e20      	ldr	r6, [pc, #128]	; (994 <init+0x328>)
     912:	401a      	ands	r2, r3
     914:	433a      	orrs	r2, r7
     916:	7002      	strb	r2, [r0, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     918:	788b      	ldrb	r3, [r1, #2]
     91a:	2204      	movs	r2, #4
     91c:	4323      	orrs	r3, r4
     91e:	708b      	strb	r3, [r1, #2]
     920:	2000      	movs	r0, #0
     922:	2103      	movs	r1, #3
     924:	47b0      	blx	r6
    sercomSpiMasterInit(SPI0, 3, 0, 0, 0, 0x00);
     926:	002b      	movs	r3, r5
     928:	002a      	movs	r2, r5
     92a:	0028      	movs	r0, r5
     92c:	4f1a      	ldr	r7, [pc, #104]	; (998 <init+0x32c>)
     92e:	9501      	str	r5, [sp, #4]
     930:	9500      	str	r5, [sp, #0]
     932:	2103      	movs	r1, #3
     934:	47b8      	blx	r7

    sercomClockEnable(SPI1, 3, 4);
     936:	0020      	movs	r0, r4
     938:	2204      	movs	r2, #4
     93a:	2103      	movs	r1, #3
     93c:	47b0      	blx	r6
    sercomSpiMasterInit(SPI1, 3, 0, 0, 0, 0x00);
     93e:	002b      	movs	r3, r5
     940:	002a      	movs	r2, r5
     942:	0020      	movs	r0, r4
     944:	9501      	str	r5, [sp, #4]
     946:	9500      	str	r5, [sp, #0]
     948:	2103      	movs	r1, #3
     94a:	47b8      	blx	r7

    sercomClockEnable(USART3, 4, 8);
     94c:	2208      	movs	r2, #8
     94e:	2104      	movs	r1, #4
     950:	2003      	movs	r0, #3
     952:	47b0      	blx	r6
    sercomUartInit(USART3,1,0,63858);
     954:	0021      	movs	r1, r4
     956:	002a      	movs	r2, r5
     958:	2003      	movs	r0, #3
     95a:	4b10      	ldr	r3, [pc, #64]	; (99c <init+0x330>)
     95c:	4c10      	ldr	r4, [pc, #64]	; (9a0 <init+0x334>)
     95e:	47a0      	blx	r4

    TC4Init();
     960:	4b10      	ldr	r3, [pc, #64]	; (9a4 <init+0x338>)
     962:	4798      	blx	r3
    TC5Init();
     964:	4b10      	ldr	r3, [pc, #64]	; (9a8 <init+0x33c>)
     966:	4798      	blx	r3
}
     968:	b005      	add	sp, #20
     96a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     96c:	000001d5 	.word	0x000001d5
     970:	00000cb1 	.word	0x00000cb1
     974:	00000d49 	.word	0x00000d49
     978:	00000e49 	.word	0x00000e49
     97c:	00000b0d 	.word	0x00000b0d
     980:	00000fe9 	.word	0x00000fe9
     984:	e000e100 	.word	0xe000e100
     988:	ff00ffff 	.word	0xff00ffff
     98c:	41004400 	.word	0x41004400
     990:	41004435 	.word	0x41004435
     994:	0000151d 	.word	0x0000151d
     998:	00001581 	.word	0x00001581
     99c:	0000f972 	.word	0x0000f972
     9a0:	000015e5 	.word	0x000015e5
     9a4:	00000f19 	.word	0x00000f19
     9a8:	00000f81 	.word	0x00000f81

000009ac <startUp>:

void startUp(Altimeter *my_altimeter) {
     9ac:	b5f0      	push	{r4, r5, r6, r7, lr}

    u32_t startupTime = millis();
     9ae:	4f1e      	ldr	r7, [pc, #120]	; (a28 <startUp+0x7c>)

    TC4Init();
    TC5Init();
}

void startUp(Altimeter *my_altimeter) {
     9b0:	b089      	sub	sp, #36	; 0x24
     9b2:	0004      	movs	r4, r0

    u32_t startupTime = millis();
     9b4:	47b8      	blx	r7

    sampleTick(my_altimeter);
     9b6:	4e1d      	ldr	r6, [pc, #116]	; (a2c <startUp+0x80>)
    TC5Init();
}

void startUp(Altimeter *my_altimeter) {

    u32_t startupTime = millis();
     9b8:	9000      	str	r0, [sp, #0]

    sampleTick(my_altimeter);
     9ba:	0020      	movs	r0, r4
     9bc:	47b0      	blx	r6
    //flight(my_altimeter);

    delay_ms(1000);
     9be:	20fa      	movs	r0, #250	; 0xfa
     9c0:	4d1b      	ldr	r5, [pc, #108]	; (a30 <startUp+0x84>)
     9c2:	0080      	lsls	r0, r0, #2
     9c4:	47a8      	blx	r5
     9c6:	9601      	str	r6, [sp, #4]
    while((millis() - startupTime) < 5000) {
     9c8:	47b8      	blx	r7
     9ca:	9b00      	ldr	r3, [sp, #0]
     9cc:	1ac0      	subs	r0, r0, r3
     9ce:	4b19      	ldr	r3, [pc, #100]	; (a34 <startUp+0x88>)
     9d0:	4298      	cmp	r0, r3
     9d2:	d820      	bhi.n	a16 <startUp+0x6a>


        usartDataOut(USART3,'T');
     9d4:	2154      	movs	r1, #84	; 0x54
     9d6:	2003      	movs	r0, #3
     9d8:	4e17      	ldr	r6, [pc, #92]	; (a38 <startUp+0x8c>)
     9da:	47b0      	blx	r6
        delay_ms(40);
     9dc:	2028      	movs	r0, #40	; 0x28
     9de:	47a8      	blx	r5
        if (sercom(USART3)->SPI.INTFLAG.bit.RXC == 1) {
     9e0:	4b16      	ldr	r3, [pc, #88]	; (a3c <startUp+0x90>)
     9e2:	7e1b      	ldrb	r3, [r3, #24]
     9e4:	075b      	lsls	r3, r3, #29
     9e6:	d5ef      	bpl.n	9c8 <startUp+0x1c>
            u8_t data1 = usartDataIn(USART3);
     9e8:	2003      	movs	r0, #3
     9ea:	4b15      	ldr	r3, [pc, #84]	; (a40 <startUp+0x94>)
     9ec:	4798      	blx	r3
            if (data1 == 0x41) {
     9ee:	2841      	cmp	r0, #65	; 0x41
     9f0:	d1ea      	bne.n	9c8 <startUp+0x1c>

                u8_t bytesToSend = 23;
                u8_t data[23] = {0};
     9f2:	2217      	movs	r2, #23
     9f4:	2100      	movs	r1, #0
     9f6:	4b13      	ldr	r3, [pc, #76]	; (a44 <startUp+0x98>)
     9f8:	a802      	add	r0, sp, #8
     9fa:	4798      	blx	r3

                AT25SEreadSample(my_altimeter->currentAddress, bytesToSend, data);
     9fc:	7920      	ldrb	r0, [r4, #4]
     9fe:	aa02      	add	r2, sp, #8
     a00:	2117      	movs	r1, #23
     a02:	4b11      	ldr	r3, [pc, #68]	; (a48 <startUp+0x9c>)
     a04:	4798      	blx	r3
     a06:	2500      	movs	r5, #0

                for (u8_t dataByte = 0; dataByte < bytesToSend; ++dataByte) {
                    usartDataOut(USART3, data[dataByte]);
     a08:	ab02      	add	r3, sp, #8
     a0a:	5d59      	ldrb	r1, [r3, r5]
     a0c:	2003      	movs	r0, #3
     a0e:	3501      	adds	r5, #1
     a10:	47b0      	blx	r6
                u8_t bytesToSend = 23;
                u8_t data[23] = {0};

                AT25SEreadSample(my_altimeter->currentAddress, bytesToSend, data);

                for (u8_t dataByte = 0; dataByte < bytesToSend; ++dataByte) {
     a12:	2d17      	cmp	r5, #23
     a14:	d1f8      	bne.n	a08 <startUp+0x5c>
                break;
            }
        }
    }

    sampleTick(my_altimeter);
     a16:	0020      	movs	r0, r4
     a18:	9b01      	ldr	r3, [sp, #4]
     a1a:	4798      	blx	r3
    flight(my_altimeter);
     a1c:	0020      	movs	r0, r4
     a1e:	4b0b      	ldr	r3, [pc, #44]	; (a4c <startUp+0xa0>)
     a20:	4798      	blx	r3
}
     a22:	b009      	add	sp, #36	; 0x24
     a24:	bdf0      	pop	{r4, r5, r6, r7, pc}
     a26:	46c0      	nop			; (mov r8, r8)
     a28:	00000ee5 	.word	0x00000ee5
     a2c:	0000117d 	.word	0x0000117d
     a30:	00000e99 	.word	0x00000e99
     a34:	00001387 	.word	0x00001387
     a38:	00001641 	.word	0x00001641
     a3c:	42001400 	.word	0x42001400
     a40:	00001659 	.word	0x00001659
     a44:	00002545 	.word	0x00002545
     a48:	000002b9 	.word	0x000002b9
     a4c:	00001049 	.word	0x00001049

00000a50 <main>:



int main(void) {
     a50:	b5f0      	push	{r4, r5, r6, r7, lr}

    init();

    Altimeter my_altimeter;
    my_altimeter.myFlightState = flightStatrup;
     a52:	2500      	movs	r5, #0
    flight(my_altimeter);
}



int main(void) {
     a54:	b0a7      	sub	sp, #156	; 0x9c

    init();
     a56:	4b16      	ldr	r3, [pc, #88]	; (ab0 <main+0x60>)

    Altimeter my_altimeter;
    my_altimeter.myFlightState = flightStatrup;
     a58:	ac01      	add	r4, sp, #4



int main(void) {

    init();
     a5a:	4798      	blx	r3

    Altimeter my_altimeter;
    my_altimeter.myFlightState = flightStatrup;
    initMS5803Barometer(&my_altimeter.myBarometer);
     a5c:	4b15      	ldr	r3, [pc, #84]	; (ab4 <main+0x64>)
     a5e:	a803      	add	r0, sp, #12
int main(void) {

    init();

    Altimeter my_altimeter;
    my_altimeter.myFlightState = flightStatrup;
     a60:	7025      	strb	r5, [r4, #0]
    initMS5803Barometer(&my_altimeter.myBarometer);
     a62:	4798      	blx	r3
    IMUinit();
     a64:	4b14      	ldr	r3, [pc, #80]	; (ab8 <main+0x68>)
     a66:	4798      	blx	r3

    sampleTick(&my_altimeter);
     a68:	0020      	movs	r0, r4
     a6a:	4e14      	ldr	r6, [pc, #80]	; (abc <main+0x6c>)
     a6c:	47b0      	blx	r6
    // startUp(&my_altimeter);


    u32_t time = 0;
    u32_t lastTime = 0;
    my_altimeter.currentAddress = 0x00000100;
     a6e:	2380      	movs	r3, #128	; 0x80
     a70:	005b      	lsls	r3, r3, #1
     a72:	6063      	str	r3, [r4, #4]

    AT25SFErace4KBlock(my_altimeter.currentAddress);
     a74:	0028      	movs	r0, r5
     a76:	4b12      	ldr	r3, [pc, #72]	; (ac0 <main+0x70>)
     a78:	4798      	blx	r3
    logSensors(&my_altimeter);
     a7a:	0020      	movs	r0, r4
     a7c:	4b11      	ldr	r3, [pc, #68]	; (ac4 <main+0x74>)
     a7e:	4798      	blx	r3
    delay_ms(5);
     a80:	2005      	movs	r0, #5
     a82:	4b11      	ldr	r3, [pc, #68]	; (ac8 <main+0x78>)
     a84:	4798      	blx	r3


    startUp(&my_altimeter);
     a86:	0020      	movs	r0, r4
     a88:	4b10      	ldr	r3, [pc, #64]	; (acc <main+0x7c>)
     a8a:	4798      	blx	r3

    while (1) {
        time = millis();
     a8c:	4b10      	ldr	r3, [pc, #64]	; (ad0 <main+0x80>)
     a8e:	4798      	blx	r3



        if (takeSample) {
     a90:	4f10      	ldr	r7, [pc, #64]	; (ad4 <main+0x84>)
     a92:	783b      	ldrb	r3, [r7, #0]
     a94:	2b00      	cmp	r3, #0
     a96:	d005      	beq.n	aa4 <main+0x54>
            sampleTick(&my_altimeter);
     a98:	0020      	movs	r0, r4
     a9a:	47b0      	blx	r6
            flight(&my_altimeter);
     a9c:	0020      	movs	r0, r4
     a9e:	4b0e      	ldr	r3, [pc, #56]	; (ad8 <main+0x88>)
     aa0:	4798      	blx	r3
            takeSample = false;
     aa2:	703d      	strb	r5, [r7, #0]

        }


        if (writeLog) {
     aa4:	4b0d      	ldr	r3, [pc, #52]	; (adc <main+0x8c>)
     aa6:	781a      	ldrb	r2, [r3, #0]
     aa8:	2a00      	cmp	r2, #0
     aaa:	d0ef      	beq.n	a8c <main+0x3c>
            writeLog = false;
     aac:	701d      	strb	r5, [r3, #0]
     aae:	e7ed      	b.n	a8c <main+0x3c>
     ab0:	0000066d 	.word	0x0000066d
     ab4:	000005dd 	.word	0x000005dd
     ab8:	00000ae1 	.word	0x00000ae1
     abc:	0000117d 	.word	0x0000117d
     ac0:	000001e5 	.word	0x000001e5
     ac4:	000010e5 	.word	0x000010e5
     ac8:	00000e99 	.word	0x00000e99
     acc:	000009ad 	.word	0x000009ad
     ad0:	00000ee5 	.word	0x00000ee5
     ad4:	20000463 	.word	0x20000463
     ad8:	00001049 	.word	0x00001049
     adc:	20000461 	.word	0x20000461

00000ae0 <IMUinit>:
#include <util.h>
#include <boardDefines.h>


void IMUinit() {
     ae0:	b570      	push	{r4, r5, r6, lr}
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     ae2:	4c08      	ldr	r4, [pc, #32]	; (b04 <IMUinit+0x24>)
     ae4:	2580      	movs	r5, #128	; 0x80
     ae6:	0023      	movs	r3, r4
     ae8:	00ed      	lsls	r5, r5, #3
     aea:	3394      	adds	r3, #148	; 0x94
     aec:	601d      	str	r5, [r3, #0]

    uint8_t dummy_Tx = 0xFF;
    uint8_t dummy_rx;

    pinLow(cs_accel);
    dummy_rx = spiDataTransfer(SPI0, BMI_ACCEL_PMU_RANGE);
     aee:	4e06      	ldr	r6, [pc, #24]	; (b08 <IMUinit+0x28>)
     af0:	210f      	movs	r1, #15
     af2:	2000      	movs	r0, #0
     af4:	47b0      	blx	r6
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     af6:	3498      	adds	r4, #152	; 0x98
    dummy_rx = spiDataTransfer(SPI0, BMI_ACCEL_16G_RANGE);
     af8:	210c      	movs	r1, #12
     afa:	2000      	movs	r0, #0
     afc:	47b0      	blx	r6
     afe:	6025      	str	r5, [r4, #0]
    pinHigh(cs_accel);

}
     b00:	bd70      	pop	{r4, r5, r6, pc}
     b02:	46c0      	nop			; (mov r8, r8)
     b04:	41004400 	.word	0x41004400
     b08:	00001629 	.word	0x00001629

00000b0c <adcInit>:
#include <util.h>

void adcInit() {

    // set up clock
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;
     b0c:	2180      	movs	r1, #128	; 0x80


#include <util.h>

void adcInit() {
     b0e:	b510      	push	{r4, lr}

    // set up clock
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;
     b10:	4a10      	ldr	r2, [pc, #64]	; (b54 <adcInit+0x48>)
     b12:	0249      	lsls	r1, r1, #9
     b14:	6a13      	ldr	r3, [r2, #32]
    // divide prescaler by 512 (93.75KHz), max adc freq is 2.1MHz
    ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |
                     ADC_CTRLB_RESSEL_12BIT;

    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
     b16:	4810      	ldr	r0, [pc, #64]	; (b58 <adcInit+0x4c>)
#include <util.h>

void adcInit() {

    // set up clock
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;
     b18:	430b      	orrs	r3, r1
     b1a:	6213      	str	r3, [r2, #32]

    // divide prescaler by 512 (93.75KHz), max adc freq is 2.1MHz
    ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |
     b1c:	23e0      	movs	r3, #224	; 0xe0
     b1e:	490f      	ldr	r1, [pc, #60]	; (b5c <adcInit+0x50>)
                     ADC_CTRLB_RESSEL_12BIT;

    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
     b20:	4a0f      	ldr	r2, [pc, #60]	; (b60 <adcInit+0x54>)

    // set up clock
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;

    // divide prescaler by 512 (93.75KHz), max adc freq is 2.1MHz
    ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |
     b22:	00db      	lsls	r3, r3, #3
     b24:	808b      	strh	r3, [r1, #4]
                     ADC_CTRLB_RESSEL_12BIT;

    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
     b26:	8050      	strh	r0, [r2, #2]
                        GCLK_CLKCTRL_GEN(0) |
                        GCLK_CLKCTRL_ID(ADC_GCLK_ID);

    ADC->CALIB.reg =
        ADC_CALIB_BIAS_CAL(
     b28:	4a0e      	ldr	r2, [pc, #56]	; (b64 <adcInit+0x58>)
    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(0) |
                        GCLK_CLKCTRL_ID(ADC_GCLK_ID);

    ADC->CALIB.reg =
     b2a:	6812      	ldr	r2, [r2, #0]
     b2c:	0150      	lsls	r0, r2, #5
     b2e:	4018      	ands	r0, r3
     b30:	4b0d      	ldr	r3, [pc, #52]	; (b68 <adcInit+0x5c>)
     b32:	0154      	lsls	r4, r2, #5
     b34:	681a      	ldr	r2, [r3, #0]
     b36:	0ed3      	lsrs	r3, r2, #27
     b38:	4323      	orrs	r3, r4
     b3a:	b2da      	uxtb	r2, r3
     b3c:	0003      	movs	r3, r0
     b3e:	4313      	orrs	r3, r2
     b40:	850b      	strh	r3, [r1, #40]	; 0x28
        ) |
        ADC_CALIB_LINEARITY_CAL(
            (*(uint64_t *)ADC_FUSES_LINEARITY_0_ADDR >> ADC_FUSES_LINEARITY_0_Pos)
        );

    ADC->REFCTRL.reg = ADC_REFCTRL_REFSEL_INTVCC1;
     b42:	2302      	movs	r3, #2
     b44:	704b      	strb	r3, [r1, #1]

    ADC->CTRLA.reg = ADC_CTRLA_ENABLE; // enable
     b46:	700b      	strb	r3, [r1, #0]
    while(ADC->STATUS.reg & ADC_STATUS_SYNCBUSY);
     b48:	7e4b      	ldrb	r3, [r1, #25]
     b4a:	b25b      	sxtb	r3, r3
     b4c:	2b00      	cmp	r3, #0
     b4e:	dbfb      	blt.n	b48 <adcInit+0x3c>
}
     b50:	bd10      	pop	{r4, pc}
     b52:	46c0      	nop			; (mov r8, r8)
     b54:	40000400 	.word	0x40000400
     b58:	0000401e 	.word	0x0000401e
     b5c:	42004000 	.word	0x42004000
     b60:	40000c00 	.word	0x40000c00
     b64:	00806024 	.word	0x00806024
     b68:	00806020 	.word	0x00806020

00000b6c <adcSample>:



u16_t adcSample() {
    ADC->SWTRIG.reg = ADC_SWTRIG_START;
     b6c:	2202      	movs	r2, #2
     b6e:	4b05      	ldr	r3, [pc, #20]	; (b84 <adcSample+0x18>)
     b70:	731a      	strb	r2, [r3, #12]
    while(!(ADC->INTFLAG.reg & ADC_INTFLAG_RESRDY)); // wait until result is ready
     b72:	3a01      	subs	r2, #1
     b74:	7e19      	ldrb	r1, [r3, #24]
     b76:	4211      	tst	r1, r2
     b78:	d0fc      	beq.n	b74 <adcSample+0x8>
    return ADC->RESULT.reg;
     b7a:	4b02      	ldr	r3, [pc, #8]	; (b84 <adcSample+0x18>)
     b7c:	8b58      	ldrh	r0, [r3, #26]
     b7e:	b280      	uxth	r0, r0
}
     b80:	4770      	bx	lr
     b82:	46c0      	nop			; (mov r8, r8)
     b84:	42004000 	.word	0x42004000

00000b88 <adc_read>:


u16_t adc_read(Pin p) {
     b88:	b537      	push	{r0, r1, r2, r4, r5, lr}
    u16_t buad;

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
     b8a:	2501      	movs	r5, #1
     b8c:	0c02      	lsrs	r2, r0, #16
     b8e:	b2d4      	uxtb	r4, r2
     b90:	9000      	str	r0, [sp, #0]
     b92:	0e00      	lsrs	r0, r0, #24
     b94:	9101      	str	r1, [sp, #4]
     b96:	0842      	lsrs	r2, r0, #1
     b98:	01e3      	lsls	r3, r4, #7
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     b9a:	4911      	ldr	r1, [pc, #68]	; (be0 <adc_read+0x58>)
     b9c:	18d2      	adds	r2, r2, r3
     b9e:	1852      	adds	r2, r2, r1
    u16_t buad;

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
     ba0:	4228      	tst	r0, r5
     ba2:	d005      	beq.n	bb0 <adc_read+0x28>
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     ba4:	210f      	movs	r1, #15
     ba6:	7814      	ldrb	r4, [r2, #0]
     ba8:	4021      	ands	r1, r4
     baa:	2410      	movs	r4, #16
     bac:	4321      	orrs	r1, r4
     bae:	e003      	b.n	bb8 <adc_read+0x30>
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     bb0:	240f      	movs	r4, #15
     bb2:	7811      	ldrb	r1, [r2, #0]
     bb4:	43a1      	bics	r1, r4
     bb6:	4329      	orrs	r1, r5
     bb8:	7011      	strb	r1, [r2, #0]
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     bba:	2101      	movs	r1, #1
     bbc:	4a09      	ldr	r2, [pc, #36]	; (be4 <adc_read+0x5c>)
     bbe:	18c3      	adds	r3, r0, r3
     bc0:	189b      	adds	r3, r3, r2
     bc2:	781a      	ldrb	r2, [r3, #0]
     bc4:	430a      	orrs	r2, r1
     bc6:	701a      	strb	r2, [r3, #0]
    // switch pin mux to analog in
    pinAnalog(p);

    ADC->INPUTCTRL.reg = (ADC_INPUTCTRL_MUXPOS(p.chan) // select from proper pin
                          | ADC_INPUTCTRL_MUXNEG_GND // 0 = gnd
                          | ADC_INPUTCTRL_GAIN_1X);
     bc8:	466b      	mov	r3, sp
     bca:	791a      	ldrb	r2, [r3, #4]
     bcc:	231f      	movs	r3, #31
     bce:	4013      	ands	r3, r2
     bd0:	22c0      	movs	r2, #192	; 0xc0
     bd2:	0152      	lsls	r2, r2, #5
     bd4:	4313      	orrs	r3, r2

u16_t adc_read(Pin p) {
    // switch pin mux to analog in
    pinAnalog(p);

    ADC->INPUTCTRL.reg = (ADC_INPUTCTRL_MUXPOS(p.chan) // select from proper pin
     bd6:	4a04      	ldr	r2, [pc, #16]	; (be8 <adc_read+0x60>)
     bd8:	6113      	str	r3, [r2, #16]
                          | ADC_INPUTCTRL_MUXNEG_GND // 0 = gnd
                          | ADC_INPUTCTRL_GAIN_1X);

    return adcSample();
     bda:	4b04      	ldr	r3, [pc, #16]	; (bec <adc_read+0x64>)
     bdc:	4798      	blx	r3
     bde:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
     be0:	41004430 	.word	0x41004430
     be4:	41004440 	.word	0x41004440
     be8:	42004000 	.word	0x42004000
     bec:	00000b6d 	.word	0x00000b6d

00000bf0 <byteOut>:





void byteOut(Pin SCK_PIN, Pin MOSI_PIN, uint8_t byte) {
     bf0:	0c01      	lsrs	r1, r0, #16
     bf2:	0c13      	lsrs	r3, r2, #16
     bf4:	b5f0      	push	{r4, r5, r6, r7, lr}
     bf6:	b2cd      	uxtb	r5, r1
     bf8:	b2d9      	uxtb	r1, r3
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     bfa:	2301      	movs	r3, #1
     bfc:	001e      	movs	r6, r3
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     bfe:	0e12      	lsrs	r2, r2, #24
     c00:	4093      	lsls	r3, r2
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     c02:	0e00      	lsrs	r0, r0, #24
     c04:	4086      	lsls	r6, r0
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     c06:	001a      	movs	r2, r3
     c08:	2308      	movs	r3, #8
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     c0a:	0030      	movs	r0, r6
     c0c:	4e11      	ldr	r6, [pc, #68]	; (c54 <byteOut+0x64>)
     c0e:	01c9      	lsls	r1, r1, #7
     c10:	b087      	sub	sp, #28
     c12:	198f      	adds	r7, r1, r6
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     c14:	4e10      	ldr	r6, [pc, #64]	; (c58 <byteOut+0x68>)
     c16:	ac0c      	add	r4, sp, #48	; 0x30
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     c18:	01ed      	lsls	r5, r5, #7
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     c1a:	19ae      	adds	r6, r5, r6
     c1c:	7824      	ldrb	r4, [r4, #0]
     c1e:	9601      	str	r6, [sp, #4]
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     c20:	4e0c      	ldr	r6, [pc, #48]	; (c54 <byteOut+0x64>)
     c22:	46b4      	mov	ip, r6
     c24:	44ac      	add	ip, r5
     c26:	4666      	mov	r6, ip
     c28:	6030      	str	r0, [r6, #0]

	for (uint8_t i = 0; i<8; ++i) {
		pinLow(SCK_PIN);
		if (byte & 0x80) {
     c2a:	b266      	sxtb	r6, r4
     c2c:	2e00      	cmp	r6, #0
     c2e:	da05      	bge.n	c3c <byteOut+0x4c>
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     c30:	4e09      	ldr	r6, [pc, #36]	; (c58 <byteOut+0x68>)
     c32:	46b4      	mov	ip, r6
     c34:	448c      	add	ip, r1
     c36:	4666      	mov	r6, ip
     c38:	6032      	str	r2, [r6, #0]
     c3a:	e000      	b.n	c3e <byteOut+0x4e>
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     c3c:	603a      	str	r2, [r7, #0]
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     c3e:	9e01      	ldr	r6, [sp, #4]
     c40:	3b01      	subs	r3, #1
			pinHigh(MOSI_PIN);
			} else {
			pinLow(MOSI_PIN);
		}
		pinHigh(SCK_PIN);
		byte <<= 1;
     c42:	0064      	lsls	r4, r4, #1
     c44:	b2db      	uxtb	r3, r3
     c46:	6030      	str	r0, [r6, #0]
     c48:	b2e4      	uxtb	r4, r4



void byteOut(Pin SCK_PIN, Pin MOSI_PIN, uint8_t byte) {

	for (uint8_t i = 0; i<8; ++i) {
     c4a:	2b00      	cmp	r3, #0
     c4c:	d1e8      	bne.n	c20 <byteOut+0x30>
			pinLow(MOSI_PIN);
		}
		pinHigh(SCK_PIN);
		byte <<= 1;
	}
}
     c4e:	b007      	add	sp, #28
     c50:	bdf0      	pop	{r4, r5, r6, r7, pc}
     c52:	46c0      	nop			; (mov r8, r8)
     c54:	41004414 	.word	0x41004414
     c58:	41004418 	.word	0x41004418

00000c5c <byteIn>:

uint8_t byteIn(Pin SCK_PIN, Pin MISO_PIN) {
     c5c:	b5f0      	push	{r4, r5, r6, r7, lr}
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     c5e:	2501      	movs	r5, #1
     c60:	b085      	sub	sp, #20
     c62:	9103      	str	r1, [sp, #12]
     c64:	0011      	movs	r1, r2
     c66:	0c06      	lsrs	r6, r0, #16
     c68:	9301      	str	r3, [sp, #4]
     c6a:	b2f3      	uxtb	r3, r6
     c6c:	002e      	movs	r6, r5
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     c6e:	0e09      	lsrs	r1, r1, #24
     c70:	0c14      	lsrs	r4, r2, #16
     c72:	9002      	str	r0, [sp, #8]
     c74:	9200      	str	r2, [sp, #0]
     c76:	408d      	lsls	r5, r1
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     c78:	0e02      	lsrs	r2, r0, #24
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     c7a:	2108      	movs	r1, #8
	uint8_t byte = 0x00;
     c7c:	2000      	movs	r0, #0
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     c7e:	4096      	lsls	r6, r2
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     c80:	b2e2      	uxtb	r2, r4
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     c82:	4c0a      	ldr	r4, [pc, #40]	; (cac <byteIn+0x50>)
     c84:	01db      	lsls	r3, r3, #7
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     c86:	01d2      	lsls	r2, r2, #7
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     c88:	191b      	adds	r3, r3, r4
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     c8a:	1912      	adds	r2, r2, r4
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     c8c:	615e      	str	r6, [r3, #20]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     c8e:	6a14      	ldr	r4, [r2, #32]

	for (uint8_t i = 0; i<8; ++i) {
		pinLow(SCK_PIN);
		byte = (byte << 1 ) | pinRead(MISO_PIN);
     c90:	0040      	lsls	r0, r0, #1
     c92:	402c      	ands	r4, r5
     c94:	1e67      	subs	r7, r4, #1
     c96:	41bc      	sbcs	r4, r7
     c98:	3901      	subs	r1, #1
     c9a:	4304      	orrs	r4, r0
     c9c:	b2c9      	uxtb	r1, r1
     c9e:	b2e0      	uxtb	r0, r4
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     ca0:	619e      	str	r6, [r3, #24]
}

uint8_t byteIn(Pin SCK_PIN, Pin MISO_PIN) {
	uint8_t byte = 0x00;

	for (uint8_t i = 0; i<8; ++i) {
     ca2:	2900      	cmp	r1, #0
     ca4:	d1f2      	bne.n	c8c <byteIn+0x30>
		pinLow(SCK_PIN);
		byte = (byte << 1 ) | pinRead(MISO_PIN);
		pinHigh(SCK_PIN);
	}
	return byte;
     ca6:	b005      	add	sp, #20
     ca8:	bdf0      	pop	{r4, r5, r6, r7, pc}
     caa:	46c0      	nop			; (mov r8, r8)
     cac:	41004400 	.word	0x41004400

00000cb0 <GclkInit>:
static uint32_t cycles_per_us = 48000000UL / 1000000;

void GclkInit() {


    SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     cb0:	23c2      	movs	r3, #194	; 0xc2
     cb2:	4a1a      	ldr	r2, [pc, #104]	; (d1c <GclkInit+0x6c>)
     cb4:	00db      	lsls	r3, r3, #3


static uint32_t cycles_per_ms = 48000000UL / 1000;
static uint32_t cycles_per_us = 48000000UL / 1000000;

void GclkInit() {
     cb6:	b510      	push	{r4, lr}


    SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     cb8:	6093      	str	r3, [r2, #8]
                           SYSCTRL_INTFLAG_DFLLRDY;
    NVMCTRL->CTRLB.reg |= NVMCTRL_CTRLB_RWS_HALF;
     cba:	2302      	movs	r3, #2
     cbc:	4818      	ldr	r0, [pc, #96]	; (d20 <GclkInit+0x70>)
     cbe:	6841      	ldr	r1, [r0, #4]
     cc0:	4319      	orrs	r1, r3
     cc2:	6041      	str	r1, [r0, #4]


    // start and enable external 32k crystal
    SYSCTRL->XOSC32K.reg = SYSCTRL_XOSC32K_ENABLE |
     cc4:	4917      	ldr	r1, [pc, #92]	; (d24 <GclkInit+0x74>)
     cc6:	8291      	strh	r1, [r2, #20]
                           SYSCTRL_XOSC32K_XTALEN |
                           SYSCTRL_XOSC32K_EN32K |
                           ( 6 << SYSCTRL_XOSC32K_STARTUP_Pos);

    //wait for crystal to warm up
    while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_XOSC32KRDY)) == 0);
     cc8:	68d1      	ldr	r1, [r2, #12]
     cca:	4219      	tst	r1, r3
     ccc:	d0fc      	beq.n	cc8 <GclkInit+0x18>

#define NVM_DFLL_COARSE_POS    58
#define NVM_DFLL_COARSE_SIZE   6
#define NVM_DFLL_FINE_POS      64
#define NVM_DFLL_FINE_SIZE     10
    uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
     cce:	4b16      	ldr	r3, [pc, #88]	; (d28 <GclkInit+0x78>)
     cd0:	6819      	ldr	r1, [r3, #0]
     cd2:	0e89      	lsrs	r1, r1, #26
                         + (NVM_DFLL_COARSE_POS / 32))
                       >> (NVM_DFLL_COARSE_POS % 32))
                     & ((1 << NVM_DFLL_COARSE_SIZE) - 1);
    if (coarse == 0x3f) {
     cd4:	293f      	cmp	r1, #63	; 0x3f
     cd6:	d100      	bne.n	cda <GclkInit+0x2a>
        coarse = 0x1f;
     cd8:	3920      	subs	r1, #32
    }
    uint32_t fine =( *((uint32_t *)(NVMCTRL_OTP4)
                       + (NVM_DFLL_FINE_POS / 32))
                     >> (NVM_DFLL_FINE_POS % 32))
     cda:	4b14      	ldr	r3, [pc, #80]	; (d2c <GclkInit+0x7c>)
                   & ((1 << NVM_DFLL_FINE_SIZE) - 1);
    if (fine == 0x3ff) {
     cdc:	4814      	ldr	r0, [pc, #80]	; (d30 <GclkInit+0x80>)
                       >> (NVM_DFLL_COARSE_POS % 32))
                     & ((1 << NVM_DFLL_COARSE_SIZE) - 1);
    if (coarse == 0x3f) {
        coarse = 0x1f;
    }
    uint32_t fine =( *((uint32_t *)(NVMCTRL_OTP4)
     cde:	681b      	ldr	r3, [r3, #0]
     ce0:	059b      	lsls	r3, r3, #22
     ce2:	0d9b      	lsrs	r3, r3, #22
                       + (NVM_DFLL_FINE_POS / 32))
                     >> (NVM_DFLL_FINE_POS % 32))
                   & ((1 << NVM_DFLL_FINE_SIZE) - 1);
    if (fine == 0x3ff) {
     ce4:	4283      	cmp	r3, r0
     ce6:	d100      	bne.n	cea <GclkInit+0x3a>
        fine = 0x1ff;
     ce8:	4b12      	ldr	r3, [pc, #72]	; (d34 <GclkInit+0x84>)
    }


    // Disable ONDEMAND mode while writing configurations (errata 9905)
    SYSCTRL->DFLLCTRL.reg = dfll_ctrl_usb & ~SYSCTRL_DFLLCTRL_ONDEMAND;
     cea:	4813      	ldr	r0, [pc, #76]	; (d38 <GclkInit+0x88>)
     cec:	8490      	strh	r0, [r2, #36]	; 0x24
    while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_DFLLRDY)) == 0);
     cee:	2010      	movs	r0, #16
     cf0:	68d4      	ldr	r4, [r2, #12]
     cf2:	4204      	tst	r4, r0
     cf4:	d0fc      	beq.n	cf0 <GclkInit+0x40>
    SYSCTRL->DFLLVAL.reg = SYSCTRL_DFLLVAL_COARSE(coarse) | SYSCTRL_DFLLVAL_FINE(fine);
     cf6:	0289      	lsls	r1, r1, #10
     cf8:	430b      	orrs	r3, r1
     cfa:	4908      	ldr	r1, [pc, #32]	; (d1c <GclkInit+0x6c>)
     cfc:	628b      	str	r3, [r1, #40]	; 0x28


    //Wait and see if the DFLL output is good . . .
    while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_DFLLRDY)) == 0);
     cfe:	2310      	movs	r3, #16
     d00:	68d1      	ldr	r1, [r2, #12]
     d02:	4219      	tst	r1, r3
     d04:	d0fc      	beq.n	d00 <GclkInit+0x50>


    SYSCTRL->DFLLCTRL.reg = dfll_ctrl_usb;
     d06:	4a0d      	ldr	r2, [pc, #52]	; (d3c <GclkInit+0x8c>)
     d08:	4b04      	ldr	r3, [pc, #16]	; (d1c <GclkInit+0x6c>)
     d0a:	849a      	strh	r2, [r3, #36]	; 0x24


    //For generic clock generator 0, select the DFLL48 Clock as input
    GCLK->GENDIV.reg  = (GCLK_GENDIV_DIV(1)  | GCLK_GENDIV_ID(0));
     d0c:	2280      	movs	r2, #128	; 0x80
     d0e:	4b0c      	ldr	r3, [pc, #48]	; (d40 <GclkInit+0x90>)
     d10:	0052      	lsls	r2, r2, #1
     d12:	609a      	str	r2, [r3, #8]
    GCLK->GENCTRL.reg = (GCLK_GENCTRL_ID(0)  | (GCLK_GENCTRL_SRC_DFLL48M) | (GCLK_GENCTRL_GENEN));
     d14:	4a0b      	ldr	r2, [pc, #44]	; (d44 <GclkInit+0x94>)
     d16:	605a      	str	r2, [r3, #4]
}
     d18:	bd10      	pop	{r4, pc}
     d1a:	46c0      	nop			; (mov r8, r8)
     d1c:	40000800 	.word	0x40000800
     d20:	41004000 	.word	0x41004000
     d24:	0000060e 	.word	0x0000060e
     d28:	00806024 	.word	0x00806024
     d2c:	00806028 	.word	0x00806028
     d30:	000003ff 	.word	0x000003ff
     d34:	000001ff 	.word	0x000001ff
     d38:	00000522 	.word	0x00000522
     d3c:	000005a2 	.word	0x000005a2
     d40:	40000c00 	.word	0x40000c00
     d44:	00010700 	.word	0x00010700

00000d48 <RtcInit>:

void RtcInit() {

    SYSCTRL->OSC32K.reg = SYSCTRL_OSC32K_ENABLE |
     d48:	4b27      	ldr	r3, [pc, #156]	; (de8 <RtcInit+0xa0>)
     d4a:	4a28      	ldr	r2, [pc, #160]	; (dec <RtcInit+0xa4>)
                          SYSCTRL_OSC32K_EN32K |
                          ( 6 << SYSCTRL_OSC32K_STARTUP_Pos);


    SYSCTRL->OSC32K.bit.CALIB =
     d4c:	4828      	ldr	r0, [pc, #160]	; (df0 <RtcInit+0xa8>)
    GCLK->GENCTRL.reg = (GCLK_GENCTRL_ID(0)  | (GCLK_GENCTRL_SRC_DFLL48M) | (GCLK_GENCTRL_GENEN));
}

void RtcInit() {

    SYSCTRL->OSC32K.reg = SYSCTRL_OSC32K_ENABLE |
     d4e:	619a      	str	r2, [r3, #24]
                          SYSCTRL_OSC32K_EN32K |
                          ( 6 << SYSCTRL_OSC32K_STARTUP_Pos);


    SYSCTRL->OSC32K.bit.CALIB =
        ((*(uint32_t *)FUSES_OSC32K_CAL_ADDR >>
     d50:	4a28      	ldr	r2, [pc, #160]	; (df4 <RtcInit+0xac>)
    SYSCTRL->OSC32K.reg = SYSCTRL_OSC32K_ENABLE |
                          SYSCTRL_OSC32K_EN32K |
                          ( 6 << SYSCTRL_OSC32K_STARTUP_Pos);


    SYSCTRL->OSC32K.bit.CALIB =
     d52:	6999      	ldr	r1, [r3, #24]
     d54:	6812      	ldr	r2, [r2, #0]
     d56:	4001      	ands	r1, r0
     d58:	04d2      	lsls	r2, r2, #19
     d5a:	0e52      	lsrs	r2, r2, #25
     d5c:	0412      	lsls	r2, r2, #16
     d5e:	4311      	orrs	r1, r2
     d60:	6199      	str	r1, [r3, #24]
        ((*(uint32_t *)FUSES_OSC32K_CAL_ADDR >>
          FUSES_OSC32K_CAL_Pos) & 0x7Ful);

    SYSCTRL->OSC32K.reg = SYSCTRL_OSC32K_STARTUP( 0x6u ) | /* cf table 15.10 of product datasheet in chapter 15.8.6 */
     d62:	4925      	ldr	r1, [pc, #148]	; (df8 <RtcInit+0xb0>)
     d64:	6199      	str	r1, [r3, #24]
                          SYSCTRL_OSC32K_EN32K;
    SYSCTRL->OSC32K.bit.CALIB =
     d66:	6999      	ldr	r1, [r3, #24]
     d68:	4008      	ands	r0, r1
        ((*(uint32_t *)FUSES_OSC32K_CAL_ADDR >>
          FUSES_OSC32K_CAL_Pos) & 0x7Ful);

    SYSCTRL->OSC32K.bit.ENABLE = 1; /* separate call, as described in chapter 15.6.3 */
     d6a:	2102      	movs	r1, #2
        ((*(uint32_t *)FUSES_OSC32K_CAL_ADDR >>
          FUSES_OSC32K_CAL_Pos) & 0x7Ful);

    SYSCTRL->OSC32K.reg = SYSCTRL_OSC32K_STARTUP( 0x6u ) | /* cf table 15.10 of product datasheet in chapter 15.8.6 */
                          SYSCTRL_OSC32K_EN32K;
    SYSCTRL->OSC32K.bit.CALIB =
     d6c:	4302      	orrs	r2, r0
     d6e:	619a      	str	r2, [r3, #24]
        ((*(uint32_t *)FUSES_OSC32K_CAL_ADDR >>
          FUSES_OSC32K_CAL_Pos) & 0x7Ful);

    SYSCTRL->OSC32K.bit.ENABLE = 1; /* separate call, as described in chapter 15.6.3 */
     d70:	699a      	ldr	r2, [r3, #24]
     d72:	430a      	orrs	r2, r1
     d74:	619a      	str	r2, [r3, #24]

    while (  (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_OSC32KRDY) == 0 ) {
     d76:	2204      	movs	r2, #4
     d78:	68d9      	ldr	r1, [r3, #12]
     d7a:	4211      	tst	r1, r2
     d7c:	d0fc      	beq.n	d78 <RtcInit+0x30>





    GCLK->GENDIV.reg = GCLK_GENDIV_ID(2) | GCLK_GENDIV_DIV(1);
     d7e:	2281      	movs	r2, #129	; 0x81
     d80:	4b1e      	ldr	r3, [pc, #120]	; (dfc <RtcInit+0xb4>)
     d82:	0052      	lsls	r2, r2, #1
     d84:	609a      	str	r2, [r3, #8]

    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(2) |
     d86:	4a1e      	ldr	r2, [pc, #120]	; (e00 <RtcInit+0xb8>)
     d88:	605a      	str	r2, [r3, #4]
                        GCLK_GENCTRL_SRC(GCLK_GENCTRL_SRC_OSC32K) |
                        GCLK_GENCTRL_IDC |
                        GCLK_GENCTRL_RUNSTDBY |
                        GCLK_GENCTRL_GENEN;
    while (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY);
     d8a:	785a      	ldrb	r2, [r3, #1]
     d8c:	b252      	sxtb	r2, r2
     d8e:	2a00      	cmp	r2, #0
     d90:	dbfb      	blt.n	d8a <RtcInit+0x42>

// Configure RTC
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(RTC_GCLK_ID) |
     d92:	4a1c      	ldr	r2, [pc, #112]	; (e04 <RtcInit+0xbc>)
     d94:	4b19      	ldr	r3, [pc, #100]	; (dfc <RtcInit+0xb4>)
     d96:	805a      	strh	r2, [r3, #2]
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    RTC->MODE1.CTRL.reg = RTC_MODE1_CTRL_MODE_COUNT16;
     d98:	2204      	movs	r2, #4
     d9a:	4b1b      	ldr	r3, [pc, #108]	; (e08 <RtcInit+0xc0>)
     d9c:	801a      	strh	r2, [r3, #0]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     d9e:	7a9a      	ldrb	r2, [r3, #10]
     da0:	4919      	ldr	r1, [pc, #100]	; (e08 <RtcInit+0xc0>)
     da2:	09d2      	lsrs	r2, r2, #7
     da4:	d1fb      	bne.n	d9e <RtcInit+0x56>

// Prescaler needs to be enabled separately from the mode for some reason
    RTC->MODE1.CTRL.reg |= RTC_MODE1_CTRL_PRESCALER_DIV32;
     da6:	20a0      	movs	r0, #160	; 0xa0
     da8:	880a      	ldrh	r2, [r1, #0]
     daa:	00c0      	lsls	r0, r0, #3
     dac:	4302      	orrs	r2, r0
     dae:	800a      	strh	r2, [r1, #0]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     db0:	7a9a      	ldrb	r2, [r3, #10]
     db2:	09d2      	lsrs	r2, r2, #7
     db4:	d1fc      	bne.n	db0 <RtcInit+0x68>

    RTC->MODE1.PER.reg = 998;
     db6:	4915      	ldr	r1, [pc, #84]	; (e0c <RtcInit+0xc4>)
     db8:	4a13      	ldr	r2, [pc, #76]	; (e08 <RtcInit+0xc0>)
     dba:	8291      	strh	r1, [r2, #20]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     dbc:	7a99      	ldrb	r1, [r3, #10]
     dbe:	4a12      	ldr	r2, [pc, #72]	; (e08 <RtcInit+0xc0>)
     dc0:	09c9      	lsrs	r1, r1, #7
     dc2:	d1fb      	bne.n	dbc <RtcInit+0x74>

    RTC->MODE1.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_ADDR(0x10);
     dc4:	8851      	ldrh	r1, [r2, #2]
     dc6:	4812      	ldr	r0, [pc, #72]	; (e10 <RtcInit+0xc8>)
     dc8:	4301      	orrs	r1, r0
     dca:	8051      	strh	r1, [r2, #2]

    RTC->MODE1.INTENSET.reg = RTC_MODE1_INTENSET_OVF;
     dcc:	2180      	movs	r1, #128	; 0x80

    RTC->MODE1.CTRL.bit.ENABLE = 1;
     dce:	2002      	movs	r0, #2
    RTC->MODE1.PER.reg = 998;
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);

    RTC->MODE1.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_ADDR(0x10);

    RTC->MODE1.INTENSET.reg = RTC_MODE1_INTENSET_OVF;
     dd0:	71d1      	strb	r1, [r2, #7]

    RTC->MODE1.CTRL.bit.ENABLE = 1;
     dd2:	8811      	ldrh	r1, [r2, #0]
     dd4:	4301      	orrs	r1, r0
     dd6:	8011      	strh	r1, [r2, #0]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     dd8:	7a9a      	ldrb	r2, [r3, #10]
     dda:	09d2      	lsrs	r2, r2, #7
     ddc:	d1fc      	bne.n	dd8 <RtcInit+0x90>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     dde:	4b0d      	ldr	r3, [pc, #52]	; (e14 <RtcInit+0xcc>)
     de0:	3208      	adds	r2, #8
     de2:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(RTC_IRQn);
}
     de4:	4770      	bx	lr
     de6:	46c0      	nop			; (mov r8, r8)
     de8:	40000800 	.word	0x40000800
     dec:	00000606 	.word	0x00000606
     df0:	ff80ffff 	.word	0xff80ffff
     df4:	00806024 	.word	0x00806024
     df8:	00000604 	.word	0x00000604
     dfc:	40000c00 	.word	0x40000c00
     e00:	00230002 	.word	0x00230002
     e04:	00004204 	.word	0x00004204
     e08:	40001400 	.word	0x40001400
     e0c:	000003e6 	.word	0x000003e6
     e10:	00004010 	.word	0x00004010
     e14:	e000e100 	.word	0xe000e100

00000e18 <gclkEnable>:


void gclkEnable(u32_t id, u32_t src, u32_t div) {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
     e18:	230f      	movs	r3, #15
     e1a:	4018      	ands	r0, r3
     e1c:	4b08      	ldr	r3, [pc, #32]	; (e40 <gclkEnable+0x28>)
     e1e:	0212      	lsls	r2, r2, #8
     e20:	401a      	ands	r2, r3
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     e22:	23f8      	movs	r3, #248	; 0xf8
     e24:	0209      	lsls	r1, r1, #8
     e26:	015b      	lsls	r3, r3, #5
     e28:	4019      	ands	r1, r3
     e2a:	2380      	movs	r3, #128	; 0x80

    NVIC_EnableIRQ(RTC_IRQn);
}


void gclkEnable(u32_t id, u32_t src, u32_t div) {
     e2c:	b510      	push	{r4, lr}
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     e2e:	025b      	lsls	r3, r3, #9
    NVIC_EnableIRQ(RTC_IRQn);
}


void gclkEnable(u32_t id, u32_t src, u32_t div) {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
     e30:	4c04      	ldr	r4, [pc, #16]	; (e44 <gclkEnable+0x2c>)
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     e32:	4319      	orrs	r1, r3
    NVIC_EnableIRQ(RTC_IRQn);
}


void gclkEnable(u32_t id, u32_t src, u32_t div) {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
     e34:	4302      	orrs	r2, r0
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     e36:	4308      	orrs	r0, r1
    NVIC_EnableIRQ(RTC_IRQn);
}


void gclkEnable(u32_t id, u32_t src, u32_t div) {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
     e38:	60a2      	str	r2, [r4, #8]
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     e3a:	6060      	str	r0, [r4, #4]
}
     e3c:	bd10      	pop	{r4, pc}
     e3e:	46c0      	nop			; (mov r8, r8)
     e40:	00ffff00 	.word	0x00ffff00
     e44:	40000c00 	.word	0x40000c00

00000e48 <delayInit>:


void delayInit(void) {
    cycles_per_ms = 48000000UL;
    cycles_per_ms /= 1000;
     e48:	4b04      	ldr	r3, [pc, #16]	; (e5c <delayInit+0x14>)
     e4a:	4a05      	ldr	r2, [pc, #20]	; (e60 <delayInit+0x18>)
     e4c:	601a      	str	r2, [r3, #0]
    cycles_per_us = cycles_per_ms / 1000;
     e4e:	2230      	movs	r2, #48	; 0x30
     e50:	605a      	str	r2, [r3, #4]

    SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     e52:	4b04      	ldr	r3, [pc, #16]	; (e64 <delayInit+0x1c>)
     e54:	3a2b      	subs	r2, #43	; 0x2b
     e56:	601a      	str	r2, [r3, #0]
}
     e58:	4770      	bx	lr
     e5a:	46c0      	nop			; (mov r8, r8)
     e5c:	20000004 	.word	0x20000004
     e60:	0000bb80 	.word	0x0000bb80
     e64:	e000e010 	.word	0xe000e010

00000e68 <delay_us>:
/**
 * \brief Delay loop to delay at least n number of microseconds
 *
 * \param n  Number of microseconds to wait
 */
void delay_us(uint32_t n) {
     e68:	b570      	push	{r4, r5, r6, lr}
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
        SysTick->VAL = 0;

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     e6a:	2480      	movs	r4, #128	; 0x80

static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
        SysTick->VAL = 0;
     e6c:	2100      	movs	r1, #0
    while (n--) {
        /* Devide up to blocks of 10u */
        delay_cycles(cycles_per_us);
     e6e:	4b08      	ldr	r3, [pc, #32]	; (e90 <delay_us+0x28>)


static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
     e70:	4a08      	ldr	r2, [pc, #32]	; (e94 <delay_us+0x2c>)
     e72:	685b      	ldr	r3, [r3, #4]
        SysTick->VAL = 0;

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     e74:	0264      	lsls	r4, r4, #9
 * \brief Delay loop to delay at least n number of microseconds
 *
 * \param n  Number of microseconds to wait
 */
void delay_us(uint32_t n) {
    while (n--) {
     e76:	3801      	subs	r0, #1
     e78:	d308      	bcc.n	e8c <delay_us+0x24>



static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
     e7a:	2b00      	cmp	r3, #0
     e7c:	d0fb      	beq.n	e76 <delay_us+0xe>
     e7e:	4e05      	ldr	r6, [pc, #20]	; (e94 <delay_us+0x2c>)
        SysTick->LOAD = n;
     e80:	6053      	str	r3, [r2, #4]
        SysTick->VAL = 0;
     e82:	6091      	str	r1, [r2, #8]

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     e84:	6835      	ldr	r5, [r6, #0]
     e86:	4225      	tst	r5, r4
     e88:	d0fc      	beq.n	e84 <delay_us+0x1c>
     e8a:	e7f4      	b.n	e76 <delay_us+0xe>
        /* Devide up to blocks of 10u */
        delay_cycles(cycles_per_us);
    }
}
     e8c:	bd70      	pop	{r4, r5, r6, pc}
     e8e:	46c0      	nop			; (mov r8, r8)
     e90:	20000004 	.word	0x20000004
     e94:	e000e010 	.word	0xe000e010

00000e98 <delay_ms>:
/**
 * \brief Delay loop to delay at least n number of milliseconds
 *
 * \param n  Number of milliseconds to wait
 */
void delay_ms(uint32_t n) {
     e98:	b570      	push	{r4, r5, r6, lr}
     e9a:	2480      	movs	r4, #128	; 0x80

static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
        SysTick->VAL = 0;
     e9c:	2100      	movs	r1, #0
    while (n--) {
        /* Devide up to blocks of 1ms */
        delay_cycles(cycles_per_ms);
     e9e:	4b08      	ldr	r3, [pc, #32]	; (ec0 <delay_ms+0x28>)


static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
     ea0:	4a08      	ldr	r2, [pc, #32]	; (ec4 <delay_ms+0x2c>)
     ea2:	681b      	ldr	r3, [r3, #0]
        SysTick->VAL = 0;

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     ea4:	0264      	lsls	r4, r4, #9
 * \brief Delay loop to delay at least n number of milliseconds
 *
 * \param n  Number of milliseconds to wait
 */
void delay_ms(uint32_t n) {
    while (n--) {
     ea6:	3801      	subs	r0, #1
     ea8:	d308      	bcc.n	ebc <delay_ms+0x24>



static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
     eaa:	2b00      	cmp	r3, #0
     eac:	d0fb      	beq.n	ea6 <delay_ms+0xe>
     eae:	4e05      	ldr	r6, [pc, #20]	; (ec4 <delay_ms+0x2c>)
        SysTick->LOAD = n;
     eb0:	6053      	str	r3, [r2, #4]
        SysTick->VAL = 0;
     eb2:	6091      	str	r1, [r2, #8]

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     eb4:	6835      	ldr	r5, [r6, #0]
     eb6:	4225      	tst	r5, r4
     eb8:	d0fc      	beq.n	eb4 <delay_ms+0x1c>
     eba:	e7f4      	b.n	ea6 <delay_ms+0xe>
        /* Devide up to blocks of 1ms */
        delay_cycles(cycles_per_ms);
    }
}
     ebc:	bd70      	pop	{r4, r5, r6, pc}
     ebe:	46c0      	nop			; (mov r8, r8)
     ec0:	20000004 	.word	0x20000004
     ec4:	e000e010 	.word	0xe000e010

00000ec8 <RTC_Handler>:


volatile uint32_t time_ms = 0;

void RTC_Handler(void) {
    time_ms += 1000;
     ec8:	21fa      	movs	r1, #250	; 0xfa
     eca:	4a04      	ldr	r2, [pc, #16]	; (edc <RTC_Handler+0x14>)
     ecc:	0089      	lsls	r1, r1, #2
     ece:	6813      	ldr	r3, [r2, #0]
     ed0:	185b      	adds	r3, r3, r1
     ed2:	6013      	str	r3, [r2, #0]
    RTC->MODE1.INTFLAG.reg = 0xFF;
     ed4:	22ff      	movs	r2, #255	; 0xff
     ed6:	4b02      	ldr	r3, [pc, #8]	; (ee0 <RTC_Handler+0x18>)
     ed8:	721a      	strb	r2, [r3, #8]
}
     eda:	4770      	bx	lr
     edc:	2000045c 	.word	0x2000045c
     ee0:	40001400 	.word	0x40001400

00000ee4 <millis>:

uint32_t millis(void) {
     ee4:	b530      	push	{r4, r5, lr}
    uint32_t ms;
    ATOMIC_SECTION_ENTER
     ee6:	f3ef 8110 	mrs	r1, PRIMASK
     eea:	b672      	cpsid	i
    ms = time_ms + RTC->MODE1.COUNT.reg;
     eec:	4a08      	ldr	r2, [pc, #32]	; (f10 <millis+0x2c>)
     eee:	4d09      	ldr	r5, [pc, #36]	; (f14 <millis+0x30>)
     ef0:	8a10      	ldrh	r0, [r2, #16]
     ef2:	682b      	ldr	r3, [r5, #0]
    if (RTC->MODE1.INTFLAG.bit.OVF)
     ef4:	7a14      	ldrb	r4, [r2, #8]
}

uint32_t millis(void) {
    uint32_t ms;
    ATOMIC_SECTION_ENTER
    ms = time_ms + RTC->MODE1.COUNT.reg;
     ef6:	b280      	uxth	r0, r0
    if (RTC->MODE1.INTFLAG.bit.OVF)
     ef8:	09e4      	lsrs	r4, r4, #7
     efa:	d004      	beq.n	f06 <millis+0x22>
        ms = time_ms + RTC->MODE1.COUNT.reg + 1000;
     efc:	8a13      	ldrh	r3, [r2, #16]
     efe:	22fa      	movs	r2, #250	; 0xfa
     f00:	6828      	ldr	r0, [r5, #0]
     f02:	0092      	lsls	r2, r2, #2
     f04:	1880      	adds	r0, r0, r2
     f06:	18c0      	adds	r0, r0, r3
    ATOMIC_SECTION_LEAVE
     f08:	f381 8810 	msr	PRIMASK, r1
    return ms;
}
     f0c:	bd30      	pop	{r4, r5, pc}
     f0e:	46c0      	nop			; (mov r8, r8)
     f10:	40001400 	.word	0x40001400
     f14:	2000045c 	.word	0x2000045c

00000f18 <TC4Init>:

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC4_GCLK_ID) |
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC4;
     f18:	2180      	movs	r1, #128	; 0x80
    return ms;
}

void TC4Init() {

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC4_GCLK_ID) |
     f1a:	4a0d      	ldr	r2, [pc, #52]	; (f50 <TC4Init+0x38>)
     f1c:	4b0d      	ldr	r3, [pc, #52]	; (f54 <TC4Init+0x3c>)
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC4;
     f1e:	0149      	lsls	r1, r1, #5
    return ms;
}

void TC4Init() {

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC4_GCLK_ID) |
     f20:	805a      	strh	r2, [r3, #2]
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC4;
     f22:	4a0d      	ldr	r2, [pc, #52]	; (f58 <TC4Init+0x40>)
     f24:	6a13      	ldr	r3, [r2, #32]
     f26:	430b      	orrs	r3, r1
     f28:	6213      	str	r3, [r2, #32]

    TC4->COUNT8.CTRLA.reg = TC_CTRLA_MODE_COUNT8 |
     f2a:	4b0c      	ldr	r3, [pc, #48]	; (f5c <TC4Init+0x44>)
     f2c:	4a0c      	ldr	r2, [pc, #48]	; (f60 <TC4Init+0x48>)

    TC4->COUNT8.INTENSET.reg = TC_INTENSET_OVF;

    TC4->COUNT8.EVCTRL.reg = TC_EVCTRL_OVFEO;

    TC4->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
     f2e:	2102      	movs	r1, #2
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC4;

    TC4->COUNT8.CTRLA.reg = TC_CTRLA_MODE_COUNT8 |
     f30:	801a      	strh	r2, [r3, #0]
                            TC_CTRLA_RUNSTDBY |
                            TC_CTRLA_PRESCALER_DIV2;
    TC4->COUNT8.PER.reg = 0x41;
     f32:	2241      	movs	r2, #65	; 0x41
     f34:	751a      	strb	r2, [r3, #20]

    TC4->COUNT8.INTENSET.reg = TC_INTENSET_OVF;
     f36:	3a40      	subs	r2, #64	; 0x40
     f38:	735a      	strb	r2, [r3, #13]

    TC4->COUNT8.EVCTRL.reg = TC_EVCTRL_OVFEO;
     f3a:	32ff      	adds	r2, #255	; 0xff
     f3c:	815a      	strh	r2, [r3, #10]

    TC4->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
     f3e:	881a      	ldrh	r2, [r3, #0]
     f40:	430a      	orrs	r2, r1
     f42:	801a      	strh	r2, [r3, #0]
     f44:	2280      	movs	r2, #128	; 0x80
     f46:	4b07      	ldr	r3, [pc, #28]	; (f64 <TC4Init+0x4c>)
     f48:	0312      	lsls	r2, r2, #12
     f4a:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(TC4_IRQn);
}
     f4c:	4770      	bx	lr
     f4e:	46c0      	nop			; (mov r8, r8)
     f50:	0000421c 	.word	0x0000421c
     f54:	40000c00 	.word	0x40000c00
     f58:	40000400 	.word	0x40000400
     f5c:	42003000 	.word	0x42003000
     f60:	00000904 	.word	0x00000904
     f64:	e000e100 	.word	0xe000e100

00000f68 <TC4_Handler>:

void TC4_Handler( void ) {
    TC4->COUNT8.INTFLAG.reg = 0xFF;
     f68:	22ff      	movs	r2, #255	; 0xff
     f6a:	4b03      	ldr	r3, [pc, #12]	; (f78 <TC4_Handler+0x10>)
     f6c:	739a      	strb	r2, [r3, #14]
    takeSample = true;
     f6e:	4b03      	ldr	r3, [pc, #12]	; (f7c <TC4_Handler+0x14>)
     f70:	3afe      	subs	r2, #254	; 0xfe
     f72:	701a      	strb	r2, [r3, #0]
}
     f74:	4770      	bx	lr
     f76:	46c0      	nop			; (mov r8, r8)
     f78:	42003000 	.word	0x42003000
     f7c:	20000463 	.word	0x20000463

00000f80 <TC5Init>:

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC5_GCLK_ID) |
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC5;
     f80:	2180      	movs	r1, #128	; 0x80
    takeSample = true;
}

void TC5Init() {

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC5_GCLK_ID) |
     f82:	4a0d      	ldr	r2, [pc, #52]	; (fb8 <TC5Init+0x38>)
     f84:	4b0d      	ldr	r3, [pc, #52]	; (fbc <TC5Init+0x3c>)
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC5;
     f86:	0189      	lsls	r1, r1, #6
    takeSample = true;
}

void TC5Init() {

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC5_GCLK_ID) |
     f88:	805a      	strh	r2, [r3, #2]
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC5;
     f8a:	4a0d      	ldr	r2, [pc, #52]	; (fc0 <TC5Init+0x40>)
     f8c:	6a13      	ldr	r3, [r2, #32]
     f8e:	430b      	orrs	r3, r1
     f90:	6213      	str	r3, [r2, #32]

    TC5->COUNT8.CTRLA.reg = TC_CTRLA_MODE_COUNT8 |
     f92:	4b0c      	ldr	r3, [pc, #48]	; (fc4 <TC5Init+0x44>)
     f94:	4a0c      	ldr	r2, [pc, #48]	; (fc8 <TC5Init+0x48>)

    TC5->COUNT8.INTENSET.reg = TC_INTENSET_OVF;

    TC5->COUNT8.EVCTRL.reg = TC_EVCTRL_OVFEO;

    TC5->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
     f96:	2102      	movs	r1, #2
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC5;

    TC5->COUNT8.CTRLA.reg = TC_CTRLA_MODE_COUNT8 |
     f98:	801a      	strh	r2, [r3, #0]
                            TC_CTRLA_RUNSTDBY |
                            TC_CTRLA_PRESCALER_DIV256;
    TC5->COUNT8.PER.reg = 0x80;
     f9a:	2280      	movs	r2, #128	; 0x80
     f9c:	751a      	strb	r2, [r3, #20]

    TC5->COUNT8.INTENSET.reg = TC_INTENSET_OVF;
     f9e:	3a7f      	subs	r2, #127	; 0x7f
     fa0:	735a      	strb	r2, [r3, #13]

    TC5->COUNT8.EVCTRL.reg = TC_EVCTRL_OVFEO;
     fa2:	32ff      	adds	r2, #255	; 0xff
     fa4:	815a      	strh	r2, [r3, #10]

    TC5->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
     fa6:	881a      	ldrh	r2, [r3, #0]
     fa8:	430a      	orrs	r2, r1
     faa:	801a      	strh	r2, [r3, #0]
     fac:	2280      	movs	r2, #128	; 0x80
     fae:	4b07      	ldr	r3, [pc, #28]	; (fcc <TC5Init+0x4c>)
     fb0:	0352      	lsls	r2, r2, #13
     fb2:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(TC5_IRQn);
}
     fb4:	4770      	bx	lr
     fb6:	46c0      	nop			; (mov r8, r8)
     fb8:	0000421c 	.word	0x0000421c
     fbc:	40000c00 	.word	0x40000c00
     fc0:	40000400 	.word	0x40000400
     fc4:	42003400 	.word	0x42003400
     fc8:	00000e04 	.word	0x00000e04
     fcc:	e000e100 	.word	0xe000e100

00000fd0 <TC5_Handler>:

void TC5_Handler( void ) {
    TC5->COUNT8.INTFLAG.reg = 0xFF;
     fd0:	22ff      	movs	r2, #255	; 0xff
     fd2:	4b03      	ldr	r3, [pc, #12]	; (fe0 <TC5_Handler+0x10>)
     fd4:	739a      	strb	r2, [r3, #14]
    writeLog = true;
     fd6:	4b03      	ldr	r3, [pc, #12]	; (fe4 <TC5_Handler+0x14>)
     fd8:	3afe      	subs	r2, #254	; 0xfe
     fda:	701a      	strb	r2, [r3, #0]
     fdc:	4770      	bx	lr
     fde:	46c0      	nop			; (mov r8, r8)
     fe0:	42003400 	.word	0x42003400
     fe4:	20000461 	.word	0x20000461

00000fe8 <dmaInit>:
#include <util.h>

DMA_DESC_ALIGN DmacDescriptor dma_descriptors[12];
DMA_DESC_ALIGN DmacDescriptor dma_descriptors_wb[12];

void dmaInit() {
     fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	memset(&dma_descriptors, 0, sizeof(dma_descriptors));
     fea:	27c0      	movs	r7, #192	; 0xc0
     fec:	4d10      	ldr	r5, [pc, #64]	; (1030 <dmaInit+0x48>)
     fee:	003a      	movs	r2, r7
     ff0:	4e10      	ldr	r6, [pc, #64]	; (1034 <dmaInit+0x4c>)
     ff2:	0028      	movs	r0, r5
     ff4:	2100      	movs	r1, #0
     ff6:	47b0      	blx	r6
	memset(&dma_descriptors_wb, 0, sizeof(dma_descriptors_wb));
     ff8:	4c0f      	ldr	r4, [pc, #60]	; (1038 <dmaInit+0x50>)
     ffa:	003a      	movs	r2, r7
     ffc:	2100      	movs	r1, #0
     ffe:	0020      	movs	r0, r4
    1000:	47b0      	blx	r6

	PM->AHBMASK.reg |= PM_AHBMASK_DMAC;
    1002:	2120      	movs	r1, #32
    1004:	4b0d      	ldr	r3, [pc, #52]	; (103c <dmaInit+0x54>)
    1006:	695a      	ldr	r2, [r3, #20]
    1008:	430a      	orrs	r2, r1
    100a:	615a      	str	r2, [r3, #20]
	PM->APBBMASK.reg |= PM_APBBMASK_DMAC;
    100c:	69da      	ldr	r2, [r3, #28]
    100e:	3910      	subs	r1, #16
    1010:	430a      	orrs	r2, r1
    1012:	61da      	str	r2, [r3, #28]

	DMAC->CTRL.bit.DMAENABLE = 0;
    1014:	4b0a      	ldr	r3, [pc, #40]	; (1040 <dmaInit+0x58>)
    1016:	390e      	subs	r1, #14
    1018:	881a      	ldrh	r2, [r3, #0]
    101a:	438a      	bics	r2, r1
    101c:	801a      	strh	r2, [r3, #0]
	DMAC->CTRL.bit.SWRST = 1;
    101e:	881a      	ldrh	r2, [r3, #0]
    1020:	3901      	subs	r1, #1
    1022:	430a      	orrs	r2, r1
    1024:	801a      	strh	r2, [r3, #0]

	DMAC->BASEADDR.reg = (unsigned) &dma_descriptors;
	DMAC->WRBADDR.reg = (unsigned) &dma_descriptors_wb;

	DMAC->CTRL.reg = DMAC_CTRL_DMAENABLE | DMAC_CTRL_LVLEN(0xf);
    1026:	4a07      	ldr	r2, [pc, #28]	; (1044 <dmaInit+0x5c>)
	PM->APBBMASK.reg |= PM_APBBMASK_DMAC;

	DMAC->CTRL.bit.DMAENABLE = 0;
	DMAC->CTRL.bit.SWRST = 1;

	DMAC->BASEADDR.reg = (unsigned) &dma_descriptors;
    1028:	635d      	str	r5, [r3, #52]	; 0x34
	DMAC->WRBADDR.reg = (unsigned) &dma_descriptors_wb;
    102a:	639c      	str	r4, [r3, #56]	; 0x38

	DMAC->CTRL.reg = DMAC_CTRL_DMAENABLE | DMAC_CTRL_LVLEN(0xf);
    102c:	801a      	strh	r2, [r3, #0]
}
    102e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1030:	20000530 	.word	0x20000530
    1034:	00002545 	.word	0x00002545
    1038:	20000470 	.word	0x20000470
    103c:	40000400 	.word	0x40000400
    1040:	41004800 	.word	0x41004800
    1044:	00000f02 	.word	0x00000f02

00001048 <flight>:

void flight(Altimeter *my_altimeter) {



    switch(my_altimeter->myFlightState) {
    1048:	7803      	ldrb	r3, [r0, #0]
#include <util.h>
#include <boardDefines.h>



void flight(Altimeter *my_altimeter) {
    104a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    104c:	0004      	movs	r4, r0



    switch(my_altimeter->myFlightState) {
    104e:	2b00      	cmp	r3, #0
    1050:	d13b      	bne.n	10ca <flight+0x82>
    case flightStatrup:

        my_altimeter->myIMU.gravityOffsetBuffer = 	my_altimeter->myIMU.gravityOffsetBuffer*0.5 + my_altimeter->myIMU.accelZ*0.5;
    1052:	4d1e      	ldr	r5, [pc, #120]	; (10cc <flight+0x84>)
    1054:	6c00      	ldr	r0, [r0, #64]	; 0x40
    1056:	47a8      	blx	r5
    1058:	4e1d      	ldr	r6, [pc, #116]	; (10d0 <flight+0x88>)
    105a:	2200      	movs	r2, #0
    105c:	4b1d      	ldr	r3, [pc, #116]	; (10d4 <flight+0x8c>)
    105e:	47b0      	blx	r6
    1060:	9000      	str	r0, [sp, #0]
    1062:	9101      	str	r1, [sp, #4]
    1064:	6d20      	ldr	r0, [r4, #80]	; 0x50
    1066:	47a8      	blx	r5
    1068:	2200      	movs	r2, #0
    106a:	4b1a      	ldr	r3, [pc, #104]	; (10d4 <flight+0x8c>)
    106c:	47b0      	blx	r6
    106e:	4e1a      	ldr	r6, [pc, #104]	; (10d8 <flight+0x90>)
    1070:	0002      	movs	r2, r0
    1072:	000b      	movs	r3, r1
    1074:	9800      	ldr	r0, [sp, #0]
    1076:	9901      	ldr	r1, [sp, #4]
    1078:	47b0      	blx	r6
    107a:	4b18      	ldr	r3, [pc, #96]	; (10dc <flight+0x94>)
    107c:	4798      	blx	r3
    107e:	6420      	str	r0, [r4, #64]	; 0x40

        my_altimeter->myBarometer.groundOffsetBuffer = my_altimeter->myBarometer.groundOffsetBuffer*0.5 + my_altimeter->myBarometer.heightFeet*0.5;
    1080:	6b60      	ldr	r0, [r4, #52]	; 0x34
    1082:	47a8      	blx	r5
    1084:	2200      	movs	r2, #0
    1086:	4b13      	ldr	r3, [pc, #76]	; (10d4 <flight+0x8c>)
    1088:	4e11      	ldr	r6, [pc, #68]	; (10d0 <flight+0x88>)
    108a:	47b0      	blx	r6
    108c:	0006      	movs	r6, r0
    108e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    1090:	000f      	movs	r7, r1
    1092:	47a8      	blx	r5
    1094:	4d0e      	ldr	r5, [pc, #56]	; (10d0 <flight+0x88>)
    1096:	2200      	movs	r2, #0
    1098:	4b0e      	ldr	r3, [pc, #56]	; (10d4 <flight+0x8c>)
    109a:	47a8      	blx	r5
    109c:	4d0e      	ldr	r5, [pc, #56]	; (10d8 <flight+0x90>)
    109e:	0002      	movs	r2, r0
    10a0:	000b      	movs	r3, r1
    10a2:	0030      	movs	r0, r6
    10a4:	0039      	movs	r1, r7
    10a6:	47a8      	blx	r5
    10a8:	4b0c      	ldr	r3, [pc, #48]	; (10dc <flight+0x94>)
    10aa:	4798      	blx	r3

        if ((millis() - my_altimeter->myIMU.offsetBufferTime) > 2000) {
    10ac:	4d0c      	ldr	r5, [pc, #48]	; (10e0 <flight+0x98>)
    switch(my_altimeter->myFlightState) {
    case flightStatrup:

        my_altimeter->myIMU.gravityOffsetBuffer = 	my_altimeter->myIMU.gravityOffsetBuffer*0.5 + my_altimeter->myIMU.accelZ*0.5;

        my_altimeter->myBarometer.groundOffsetBuffer = my_altimeter->myBarometer.groundOffsetBuffer*0.5 + my_altimeter->myBarometer.heightFeet*0.5;
    10ae:	6360      	str	r0, [r4, #52]	; 0x34

        if ((millis() - my_altimeter->myIMU.offsetBufferTime) > 2000) {
    10b0:	47a8      	blx	r5
    10b2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    10b4:	1ac0      	subs	r0, r0, r3
    10b6:	23fa      	movs	r3, #250	; 0xfa
    10b8:	00db      	lsls	r3, r3, #3
    10ba:	4298      	cmp	r0, r3
    10bc:	d905      	bls.n	10ca <flight+0x82>
            //recursive filter
            my_altimeter->myBarometer.groundOffset = my_altimeter->myBarometer.groundOffsetBuffer;
    10be:	6b63      	ldr	r3, [r4, #52]	; 0x34
    10c0:	6323      	str	r3, [r4, #48]	; 0x30
            my_altimeter->myIMU.gravityOffset = my_altimeter->myIMU.gravityOffsetBuffer;
    10c2:	6c23      	ldr	r3, [r4, #64]	; 0x40
    10c4:	63e3      	str	r3, [r4, #60]	; 0x3c
            my_altimeter->myIMU.offsetBufferTime = millis();
    10c6:	47a8      	blx	r5
    10c8:	63a0      	str	r0, [r4, #56]	; 0x38

        break;
    }


    10ca:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    10cc:	00002301 	.word	0x00002301
    10d0:	00001d19 	.word	0x00001d19
    10d4:	3fe00000 	.word	0x3fe00000
    10d8:	000016c1 	.word	0x000016c1
    10dc:	000023a9 	.word	0x000023a9
    10e0:	00000ee5 	.word	0x00000ee5

000010e4 <logSensors>:
#include <boardDefines.h>




void logSensors(Altimeter *my_altimeter) {
    10e4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

    u8_t bytesToSend = 23;
    u8_t dataToSend[23];


    dataToSend[0] = SENSOR_LOG;
    10e6:	2341      	movs	r3, #65	; 0x41
    10e8:	466a      	mov	r2, sp
    10ea:	7013      	strb	r3, [r2, #0]
    dataToSend[1] = my_altimeter->sampleTick >> 0;
    10ec:	0003      	movs	r3, r0
    dataToSend[2] = my_altimeter->sampleTick >> 8;
    10ee:	4669      	mov	r1, sp
    u8_t bytesToSend = 23;
    u8_t dataToSend[23];


    dataToSend[0] = SENSOR_LOG;
    dataToSend[1] = my_altimeter->sampleTick >> 0;
    10f0:	338c      	adds	r3, #140	; 0x8c
    10f2:	681b      	ldr	r3, [r3, #0]
    10f4:	7053      	strb	r3, [r2, #1]
    dataToSend[2] = my_altimeter->sampleTick >> 8;
    10f6:	0a1a      	lsrs	r2, r3, #8
    10f8:	708a      	strb	r2, [r1, #2]
    dataToSend[3] = my_altimeter->sampleTick >> 16;
    10fa:	0c1a      	lsrs	r2, r3, #16
    dataToSend[4] = my_altimeter->sampleTick >> 24;
    10fc:	0e1b      	lsrs	r3, r3, #24
    10fe:	710b      	strb	r3, [r1, #4]

    dataToSend[5] = my_altimeter->myBarometer.heightCm >> 0;
    1100:	6a83      	ldr	r3, [r0, #40]	; 0x28


    dataToSend[0] = SENSOR_LOG;
    dataToSend[1] = my_altimeter->sampleTick >> 0;
    dataToSend[2] = my_altimeter->sampleTick >> 8;
    dataToSend[3] = my_altimeter->sampleTick >> 16;
    1102:	70ca      	strb	r2, [r1, #3]
    dataToSend[4] = my_altimeter->sampleTick >> 24;

    dataToSend[5] = my_altimeter->myBarometer.heightCm >> 0;
    dataToSend[6] = my_altimeter->myBarometer.heightCm >> 8;
    1104:	0a1a      	lsrs	r2, r3, #8
    dataToSend[1] = my_altimeter->sampleTick >> 0;
    dataToSend[2] = my_altimeter->sampleTick >> 8;
    dataToSend[3] = my_altimeter->sampleTick >> 16;
    dataToSend[4] = my_altimeter->sampleTick >> 24;

    dataToSend[5] = my_altimeter->myBarometer.heightCm >> 0;
    1106:	714b      	strb	r3, [r1, #5]
    dataToSend[6] = my_altimeter->myBarometer.heightCm >> 8;
    1108:	718a      	strb	r2, [r1, #6]
    dataToSend[7] = my_altimeter->myBarometer.heightCm >> 16;
    110a:	0c1a      	lsrs	r2, r3, #16
    dataToSend[8] = my_altimeter->myBarometer.heightCm >> 24;
    110c:	0e1b      	lsrs	r3, r3, #24
    110e:	720b      	strb	r3, [r1, #8]

    dataToSend[9] = my_altimeter->myIMU.accelXRaw >> 0;
    1110:	0003      	movs	r3, r0
    dataToSend[3] = my_altimeter->sampleTick >> 16;
    dataToSend[4] = my_altimeter->sampleTick >> 24;

    dataToSend[5] = my_altimeter->myBarometer.heightCm >> 0;
    dataToSend[6] = my_altimeter->myBarometer.heightCm >> 8;
    dataToSend[7] = my_altimeter->myBarometer.heightCm >> 16;
    1112:	71ca      	strb	r2, [r1, #7]
    dataToSend[8] = my_altimeter->myBarometer.heightCm >> 24;

    dataToSend[9] = my_altimeter->myIMU.accelXRaw >> 0;
    1114:	3360      	adds	r3, #96	; 0x60
    1116:	881b      	ldrh	r3, [r3, #0]
    dataToSend[4] = my_altimeter->sampleTick >> 24;

    dataToSend[5] = my_altimeter->myBarometer.heightCm >> 0;
    dataToSend[6] = my_altimeter->myBarometer.heightCm >> 8;
    dataToSend[7] = my_altimeter->myBarometer.heightCm >> 16;
    dataToSend[8] = my_altimeter->myBarometer.heightCm >> 24;
    1118:	466a      	mov	r2, sp

    dataToSend[9] = my_altimeter->myIMU.accelXRaw >> 0;
    111a:	724b      	strb	r3, [r1, #9]
    dataToSend[10] = my_altimeter->myIMU.accelXRaw >> 8;
    111c:	0a1b      	lsrs	r3, r3, #8
    111e:	728b      	strb	r3, [r1, #10]
    dataToSend[11] = my_altimeter->myIMU.accelYRaw >> 0;
    1120:	0003      	movs	r3, r0
    1122:	3364      	adds	r3, #100	; 0x64
    1124:	881b      	ldrh	r3, [r3, #0]
    1126:	72cb      	strb	r3, [r1, #11]
    dataToSend[12] = my_altimeter->myIMU.accelYRaw >> 8;
    1128:	0a1b      	lsrs	r3, r3, #8
    112a:	730b      	strb	r3, [r1, #12]
    dataToSend[13] = my_altimeter->myIMU.accelZRaw >> 0;
    112c:	0003      	movs	r3, r0
    112e:	3368      	adds	r3, #104	; 0x68
    1130:	881b      	ldrh	r3, [r3, #0]
    1132:	734b      	strb	r3, [r1, #13]
    dataToSend[14] = my_altimeter->myIMU.accelZRaw >> 8;
    1134:	0a1b      	lsrs	r3, r3, #8
    1136:	738b      	strb	r3, [r1, #14]

    dataToSend[15] = my_altimeter->myIMU.gyroXRaw >> 0;
    1138:	0003      	movs	r3, r0
    113a:	336c      	adds	r3, #108	; 0x6c
    113c:	881b      	ldrh	r3, [r3, #0]
    113e:	73cb      	strb	r3, [r1, #15]
    dataToSend[16] = my_altimeter->myIMU.gyroXRaw >> 8;
    1140:	0a1b      	lsrs	r3, r3, #8
    1142:	740b      	strb	r3, [r1, #16]
    dataToSend[17] = my_altimeter->myIMU.gyroYRaw >> 0;
    1144:	0003      	movs	r3, r0
    1146:	3370      	adds	r3, #112	; 0x70
    1148:	881b      	ldrh	r3, [r3, #0]
    114a:	744b      	strb	r3, [r1, #17]
    dataToSend[18] = my_altimeter->myIMU.gyroYRaw >> 8;
    114c:	0a1b      	lsrs	r3, r3, #8
    114e:	748b      	strb	r3, [r1, #18]
    dataToSend[19] = my_altimeter->myIMU.gyroZRaw >> 0;
    1150:	0003      	movs	r3, r0
    1152:	3374      	adds	r3, #116	; 0x74
    1154:	881b      	ldrh	r3, [r3, #0]
    1156:	74cb      	strb	r3, [r1, #19]
    dataToSend[20] = my_altimeter->myIMU.gyroZRaw >> 8;
    1158:	0a1b      	lsrs	r3, r3, #8
    115a:	750b      	strb	r3, [r1, #20]

    dataToSend[21] = my_altimeter->myAnalogAccelerometer.analogRaw >> 0;
    115c:	0003      	movs	r3, r0
    115e:	3378      	adds	r3, #120	; 0x78
    1160:	881b      	ldrh	r3, [r3, #0]
    1162:	754b      	strb	r3, [r1, #21]
    dataToSend[22] = my_altimeter->myAnalogAccelerometer.analogRaw >> 8;
    1164:	0a1b      	lsrs	r3, r3, #8
    1166:	758b      	strb	r3, [r1, #22]


    //for (u8_t dataByte = 0; dataByte < bytesToSend; ++dataByte) {
        //usartDataOut(USART3, dataToSend[dataByte]);
    //}
     u8_t bytesSent = AT25SEWritePage(my_altimeter->currentAddress,bytesToSend,dataToSend);
    1168:	6840      	ldr	r0, [r0, #4]
    116a:	2117      	movs	r1, #23
    116c:	4b02      	ldr	r3, [pc, #8]	; (1178 <logSensors+0x94>)
    116e:	b2c0      	uxtb	r0, r0
    1170:	4798      	blx	r3

}
    1172:	b007      	add	sp, #28
    1174:	bd00      	pop	{pc}
    1176:	46c0      	nop			; (mov r8, r8)
    1178:	00000245 	.word	0x00000245

0000117c <sampleTick>:
#include <boardDefines.h>
#include <MS5803.h>



void sampleTick(Altimeter *my_altimeter) {
    117c:	b5f0      	push	{r4, r5, r6, r7, lr}
    117e:	0004      	movs	r4, r0
    1180:	b087      	sub	sp, #28

    my_altimeter->sampleTick = millis();
    1182:	4bd1      	ldr	r3, [pc, #836]	; (14c8 <sampleTick+0x34c>)
    1184:	4798      	blx	r3
    1186:	0023      	movs	r3, r4

    my_altimeter->batV = adc_read(senseBatPin);
    1188:	4dd0      	ldr	r5, [pc, #832]	; (14cc <sampleTick+0x350>)



void sampleTick(Altimeter *my_altimeter) {

    my_altimeter->sampleTick = millis();
    118a:	338c      	adds	r3, #140	; 0x8c
    118c:	6018      	str	r0, [r3, #0]

    my_altimeter->batV = adc_read(senseBatPin);
    118e:	786b      	ldrb	r3, [r5, #1]
    1190:	7829      	ldrb	r1, [r5, #0]
    1192:	78a8      	ldrb	r0, [r5, #2]
    1194:	021b      	lsls	r3, r3, #8
    1196:	430b      	orrs	r3, r1
    1198:	0400      	lsls	r0, r0, #16
    119a:	001a      	movs	r2, r3
    119c:	0003      	movs	r3, r0
    119e:	78e8      	ldrb	r0, [r5, #3]
    11a0:	4313      	orrs	r3, r2
    11a2:	0600      	lsls	r0, r0, #24
    11a4:	4eca      	ldr	r6, [pc, #808]	; (14d0 <sampleTick+0x354>)
    11a6:	7929      	ldrb	r1, [r5, #4]
    11a8:	4318      	orrs	r0, r3
    11aa:	47b0      	blx	r6
    11ac:	0023      	movs	r3, r4
    11ae:	3380      	adds	r3, #128	; 0x80
    11b0:	8018      	strh	r0, [r3, #0]
    my_altimeter->batV = my_altimeter->batV;
    my_altimeter->senseA = adc_read(senseAPin);
    11b2:	79ab      	ldrb	r3, [r5, #6]
    11b4:	7969      	ldrb	r1, [r5, #5]
    11b6:	79e8      	ldrb	r0, [r5, #7]
    11b8:	021b      	lsls	r3, r3, #8
    11ba:	430b      	orrs	r3, r1
    11bc:	0400      	lsls	r0, r0, #16
    11be:	001a      	movs	r2, r3
    11c0:	0003      	movs	r3, r0
    11c2:	7a28      	ldrb	r0, [r5, #8]
    11c4:	4313      	orrs	r3, r2
    11c6:	0600      	lsls	r0, r0, #24
    11c8:	7a69      	ldrb	r1, [r5, #9]
    11ca:	4318      	orrs	r0, r3
    11cc:	47b0      	blx	r6
    11ce:	0023      	movs	r3, r4
    11d0:	3382      	adds	r3, #130	; 0x82
    11d2:	8018      	strh	r0, [r3, #0]
    my_altimeter->senseB = adc_read(senseBPin);
    11d4:	7aeb      	ldrb	r3, [r5, #11]
    11d6:	7aa9      	ldrb	r1, [r5, #10]
    11d8:	7b28      	ldrb	r0, [r5, #12]
    11da:	021b      	lsls	r3, r3, #8
    11dc:	430b      	orrs	r3, r1
    11de:	0400      	lsls	r0, r0, #16
    11e0:	001a      	movs	r2, r3
    11e2:	0003      	movs	r3, r0
    11e4:	7b68      	ldrb	r0, [r5, #13]
    11e6:	4313      	orrs	r3, r2
    11e8:	0600      	lsls	r0, r0, #24
    11ea:	7ba9      	ldrb	r1, [r5, #14]
    11ec:	4318      	orrs	r0, r3
    11ee:	47b0      	blx	r6
    11f0:	0023      	movs	r3, r4
    11f2:	3384      	adds	r3, #132	; 0x84
    11f4:	8018      	strh	r0, [r3, #0]
    my_altimeter->senseC = adc_read(senseCPin);
    11f6:	7c2b      	ldrb	r3, [r5, #16]
    11f8:	7be9      	ldrb	r1, [r5, #15]
    11fa:	7c68      	ldrb	r0, [r5, #17]
    11fc:	021b      	lsls	r3, r3, #8
    11fe:	430b      	orrs	r3, r1
    1200:	0400      	lsls	r0, r0, #16
    1202:	001a      	movs	r2, r3
    1204:	0003      	movs	r3, r0
    1206:	7ca8      	ldrb	r0, [r5, #18]
    1208:	4313      	orrs	r3, r2
    120a:	0600      	lsls	r0, r0, #24
    120c:	7ce9      	ldrb	r1, [r5, #19]
    120e:	4318      	orrs	r0, r3
    1210:	47b0      	blx	r6
    1212:	0023      	movs	r3, r4
    1214:	3386      	adds	r3, #134	; 0x86
    1216:	8018      	strh	r0, [r3, #0]
    my_altimeter->senseD = adc_read(senseDPin);
    1218:	7d6b      	ldrb	r3, [r5, #21]
    121a:	7d29      	ldrb	r1, [r5, #20]
    121c:	7da8      	ldrb	r0, [r5, #22]
    121e:	021b      	lsls	r3, r3, #8
    1220:	430b      	orrs	r3, r1
    1222:	0400      	lsls	r0, r0, #16
    1224:	001a      	movs	r2, r3
    1226:	0003      	movs	r3, r0
    1228:	7de8      	ldrb	r0, [r5, #23]
    122a:	4313      	orrs	r3, r2
    122c:	0600      	lsls	r0, r0, #24
    122e:	7e29      	ldrb	r1, [r5, #24]
    1230:	4318      	orrs	r0, r3
    1232:	47b0      	blx	r6
    1234:	0023      	movs	r3, r4
    1236:	3388      	adds	r3, #136	; 0x88
    1238:	8018      	strh	r0, [r3, #0]




    my_altimeter->myAnalogAccelerometer.analogRaw = adc_read(analogAccelPin);
    123a:	7eab      	ldrb	r3, [r5, #26]
    123c:	7e69      	ldrb	r1, [r5, #25]
    123e:	7ee8      	ldrb	r0, [r5, #27]
    1240:	021b      	lsls	r3, r3, #8
    1242:	430b      	orrs	r3, r1
    1244:	0400      	lsls	r0, r0, #16
    1246:	001a      	movs	r2, r3
    1248:	0003      	movs	r3, r0
    124a:	7f28      	ldrb	r0, [r5, #28]
    124c:	4313      	orrs	r3, r2
    124e:	0600      	lsls	r0, r0, #24
    1250:	7f69      	ldrb	r1, [r5, #29]
    1252:	4318      	orrs	r0, r3
    1254:	47b0      	blx	r6
    1256:	0023      	movs	r3, r4
    1258:	3378      	adds	r3, #120	; 0x78
    125a:	8018      	strh	r0, [r3, #0]
    my_altimeter->myAnalogAccelerometer.analogAccel = (my_altimeter->myAnalogAccelerometer.analogRaw - 3900) * -0.0154;
    125c:	4b9d      	ldr	r3, [pc, #628]	; (14d4 <sampleTick+0x358>)
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    125e:	2780      	movs	r7, #128	; 0x80
    1260:	18c0      	adds	r0, r0, r3
    1262:	4b9d      	ldr	r3, [pc, #628]	; (14d8 <sampleTick+0x35c>)
    1264:	4798      	blx	r3
    1266:	4a9d      	ldr	r2, [pc, #628]	; (14dc <sampleTick+0x360>)
    1268:	4e9d      	ldr	r6, [pc, #628]	; (14e0 <sampleTick+0x364>)
    126a:	4b9e      	ldr	r3, [pc, #632]	; (14e4 <sampleTick+0x368>)
    126c:	47b0      	blx	r6
    126e:	4b9e      	ldr	r3, [pc, #632]	; (14e8 <sampleTick+0x36c>)
    1270:	4798      	blx	r3
    uint8_t dummy_Tx = 0xFF;
    uint8_t dummy_rx;

    pinLow(cs_baro);
    // dummy_rx = spiDataTransfer(SPI2, 0x50);
    byteOut(spi2SCK,spi2MOSI, 0x50);
    1272:	2250      	movs	r2, #80	; 0x50


    my_altimeter->myAnalogAccelerometer.analogRaw = adc_read(analogAccelPin);
    my_altimeter->myAnalogAccelerometer.analogAccel = (my_altimeter->myAnalogAccelerometer.analogRaw - 3900) * -0.0154;

    my_altimeter->myIMU.perviousAccelX = my_altimeter->myIMU.accelX;
    1274:	6c63      	ldr	r3, [r4, #68]	; 0x44
    1276:	023f      	lsls	r7, r7, #8
    1278:	64a3      	str	r3, [r4, #72]	; 0x48
    127a:	4b9c      	ldr	r3, [pc, #624]	; (14ec <sampleTick+0x370>)




    my_altimeter->myAnalogAccelerometer.analogRaw = adc_read(analogAccelPin);
    my_altimeter->myAnalogAccelerometer.analogAccel = (my_altimeter->myAnalogAccelerometer.analogRaw - 3900) * -0.0154;
    127c:	67e0      	str	r0, [r4, #124]	; 0x7c
    uint8_t dummy_Tx = 0xFF;
    uint8_t dummy_rx;

    pinLow(cs_baro);
    // dummy_rx = spiDataTransfer(SPI2, 0x50);
    byteOut(spi2SCK,spi2MOSI, 0x50);
    127e:	002e      	movs	r6, r5
    1280:	615f      	str	r7, [r3, #20]
    1282:	9200      	str	r2, [sp, #0]
    1284:	7fea      	ldrb	r2, [r5, #31]
    1286:	7fa8      	ldrb	r0, [r5, #30]
    1288:	0212      	lsls	r2, r2, #8
    128a:	4302      	orrs	r2, r0
    128c:	0011      	movs	r1, r2
    128e:	002b      	movs	r3, r5
    1290:	361e      	adds	r6, #30
    1292:	78b2      	ldrb	r2, [r6, #2]
    1294:	3323      	adds	r3, #35	; 0x23
    1296:	0412      	lsls	r2, r2, #16
    1298:	430a      	orrs	r2, r1
    129a:	78f1      	ldrb	r1, [r6, #3]
    129c:	7818      	ldrb	r0, [r3, #0]
    129e:	0609      	lsls	r1, r1, #24
    12a0:	4311      	orrs	r1, r2
    12a2:	7932      	ldrb	r2, [r6, #4]
    12a4:	789d      	ldrb	r5, [r3, #2]
    12a6:	9204      	str	r2, [sp, #16]
    12a8:	785a      	ldrb	r2, [r3, #1]
    12aa:	042d      	lsls	r5, r5, #16
    12ac:	0212      	lsls	r2, r2, #8
    12ae:	4302      	orrs	r2, r0
    12b0:	9103      	str	r1, [sp, #12]
    12b2:	0011      	movs	r1, r2
    12b4:	002a      	movs	r2, r5
    12b6:	78dd      	ldrb	r5, [r3, #3]
    12b8:	791b      	ldrb	r3, [r3, #4]
    12ba:	430a      	orrs	r2, r1
    12bc:	062d      	lsls	r5, r5, #24
    12be:	4315      	orrs	r5, r2
    12c0:	9305      	str	r3, [sp, #20]
    12c2:	9a03      	ldr	r2, [sp, #12]
    12c4:	9905      	ldr	r1, [sp, #20]
    12c6:	9b04      	ldr	r3, [sp, #16]
    12c8:	0028      	movs	r0, r5
    12ca:	4e89      	ldr	r6, [pc, #548]	; (14f0 <sampleTick+0x374>)
    12cc:	47b0      	blx	r6
    pinHigh(cs_baro);
    delay_us(500);
    12ce:	20fa      	movs	r0, #250	; 0xfa
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    12d0:	4b86      	ldr	r3, [pc, #536]	; (14ec <sampleTick+0x370>)
    12d2:	0040      	lsls	r0, r0, #1
    12d4:	619f      	str	r7, [r3, #24]
    12d6:	4b87      	ldr	r3, [pc, #540]	; (14f4 <sampleTick+0x378>)
    12d8:	4798      	blx	r3
    my_altimeter->myBarometer.rawTempatureData = readMS5803AdcResults();
    12da:	4b87      	ldr	r3, [pc, #540]	; (14f8 <sampleTick+0x37c>)
    12dc:	4798      	blx	r3
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    12de:	4b83      	ldr	r3, [pc, #524]	; (14ec <sampleTick+0x370>)
    12e0:	61a0      	str	r0, [r4, #24]
    12e2:	615f      	str	r7, [r3, #20]

    pinLow(cs_baro);
    //  dummy_rx = spiDataTransfer(SPI2, 0x42);
    byteOut(spi2SCK,spi2MOSI, 0x42);
    12e4:	2342      	movs	r3, #66	; 0x42
    12e6:	9a03      	ldr	r2, [sp, #12]
    12e8:	9300      	str	r3, [sp, #0]
    12ea:	0028      	movs	r0, r5
    12ec:	9b04      	ldr	r3, [sp, #16]
    12ee:	9905      	ldr	r1, [sp, #20]
    12f0:	47b0      	blx	r6
    12f2:	2280      	movs	r2, #128	; 0x80
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    12f4:	4b7d      	ldr	r3, [pc, #500]	; (14ec <sampleTick+0x370>)
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    12f6:	00d2      	lsls	r2, r2, #3
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    12f8:	619f      	str	r7, [r3, #24]
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    12fa:	4b80      	ldr	r3, [pc, #512]	; (14fc <sampleTick+0x380>)



// Accel data
    pinLow(cs_accel);
    dummy_rx = spiDataTransfer(SPI0, BMI055_X_ACC_LSB | BMI055_READ_REG);
    12fc:	4f80      	ldr	r7, [pc, #512]	; (1500 <sampleTick+0x384>)
    12fe:	601a      	str	r2, [r3, #0]
    1300:	2182      	movs	r1, #130	; 0x82
    1302:	2000      	movs	r0, #0
    1304:	47b8      	blx	r7

    my_altimeter->myIMU.accelXRaw = spiDataTransfer(SPI0,dummy_Tx);
    1306:	21ff      	movs	r1, #255	; 0xff
    1308:	2000      	movs	r0, #0
    130a:	47b8      	blx	r7
    130c:	0023      	movs	r3, r4
    130e:	3360      	adds	r3, #96	; 0x60
    1310:	8018      	strh	r0, [r3, #0]
    1312:	0005      	movs	r5, r0
    my_altimeter->myIMU.accelXRaw = my_altimeter->myIMU.accelXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    1314:	21ff      	movs	r1, #255	; 0xff
    1316:	2000      	movs	r0, #0

// Accel data
    pinLow(cs_accel);
    dummy_rx = spiDataTransfer(SPI0, BMI055_X_ACC_LSB | BMI055_READ_REG);

    my_altimeter->myIMU.accelXRaw = spiDataTransfer(SPI0,dummy_Tx);
    1318:	9303      	str	r3, [sp, #12]
    my_altimeter->myIMU.accelXRaw = my_altimeter->myIMU.accelXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    131a:	47b8      	blx	r7
    131c:	9b03      	ldr	r3, [sp, #12]
    131e:	0200      	lsls	r0, r0, #8
    1320:	4305      	orrs	r5, r0
    1322:	801d      	strh	r5, [r3, #0]
    my_altimeter->myIMU.accelYRaw = spiDataTransfer(SPI0,dummy_Tx);
    1324:	21ff      	movs	r1, #255	; 0xff
    1326:	0026      	movs	r6, r4
    1328:	2000      	movs	r0, #0
    132a:	47b8      	blx	r7
    132c:	3664      	adds	r6, #100	; 0x64
    132e:	8030      	strh	r0, [r6, #0]
    1330:	0005      	movs	r5, r0
    my_altimeter->myIMU.accelYRaw = my_altimeter->myIMU.accelYRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    1332:	21ff      	movs	r1, #255	; 0xff
    1334:	2000      	movs	r0, #0
    1336:	47b8      	blx	r7
    1338:	0200      	lsls	r0, r0, #8
    133a:	4305      	orrs	r5, r0
    133c:	8035      	strh	r5, [r6, #0]
    my_altimeter->myIMU.accelZRaw = spiDataTransfer(SPI0,dummy_Tx);
    133e:	21ff      	movs	r1, #255	; 0xff
    1340:	2000      	movs	r0, #0
    1342:	47b8      	blx	r7
    1344:	466b      	mov	r3, sp
    1346:	0025      	movs	r5, r4
    1348:	9004      	str	r0, [sp, #16]
    134a:	8a1b      	ldrh	r3, [r3, #16]
    134c:	3568      	adds	r5, #104	; 0x68
    134e:	802b      	strh	r3, [r5, #0]
    my_altimeter->myIMU.accelZRaw = my_altimeter->myIMU.accelZRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    1350:	21ff      	movs	r1, #255	; 0xff
    1352:	2000      	movs	r0, #0
    1354:	47b8      	blx	r7
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    1356:	2280      	movs	r2, #128	; 0x80
    1358:	9b04      	ldr	r3, [sp, #16]
    135a:	0200      	lsls	r0, r0, #8
    135c:	4303      	orrs	r3, r0
    135e:	802b      	strh	r3, [r5, #0]
    1360:	4b68      	ldr	r3, [pc, #416]	; (1504 <sampleTick+0x388>)
    1362:	00d2      	lsls	r2, r2, #3
    1364:	601a      	str	r2, [r3, #0]

    pinHigh(cs_accel);

    bool negativeX = ( my_altimeter->myIMU.accelXRaw & (1<<15)) != 0;
    1366:	9b03      	ldr	r3, [sp, #12]
    bool negativeY =  ( my_altimeter->myIMU.accelYRaw & (1<<15)) != 0;
    bool negativeZ =  ( my_altimeter->myIMU.accelZRaw & (1<<15)) != 0;

    my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXRaw;
    my_altimeter->myIMU.accelYint = my_altimeter->myIMU.accelYRaw;
    1368:	3d02      	subs	r5, #2
    my_altimeter->myIMU.accelZRaw = spiDataTransfer(SPI0,dummy_Tx);
    my_altimeter->myIMU.accelZRaw = my_altimeter->myIMU.accelZRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);

    pinHigh(cs_accel);

    bool negativeX = ( my_altimeter->myIMU.accelXRaw & (1<<15)) != 0;
    136a:	2000      	movs	r0, #0
    136c:	5e18      	ldrsh	r0, [r3, r0]
    bool negativeY =  ( my_altimeter->myIMU.accelYRaw & (1<<15)) != 0;
    136e:	2300      	movs	r3, #0
    1370:	5ef2      	ldrsh	r2, [r6, r3]
    bool negativeZ =  ( my_altimeter->myIMU.accelZRaw & (1<<15)) != 0;
    1372:	2102      	movs	r1, #2
    1374:	5e6b      	ldrsh	r3, [r5, r1]

    if (negativeX) {
        my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXint | ~((1 << 16) - 1);
        my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXint >> 4;
    } else {
        my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXint >> 4;
    1376:	0021      	movs	r1, r4
    1378:	1112      	asrs	r2, r2, #4
    137a:	1100      	asrs	r0, r0, #4
    137c:	3162      	adds	r1, #98	; 0x62
    137e:	111b      	asrs	r3, r3, #4
    bool negativeX = ( my_altimeter->myIMU.accelXRaw & (1<<15)) != 0;
    bool negativeY =  ( my_altimeter->myIMU.accelYRaw & (1<<15)) != 0;
    bool negativeZ =  ( my_altimeter->myIMU.accelZRaw & (1<<15)) != 0;

    my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXRaw;
    my_altimeter->myIMU.accelYint = my_altimeter->myIMU.accelYRaw;
    1380:	9503      	str	r5, [sp, #12]

    if (negativeX) {
        my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXint | ~((1 << 16) - 1);
        my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXint >> 4;
    } else {
        my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXint >> 4;
    1382:	8008      	strh	r0, [r1, #0]

    if (negativeY) {
        my_altimeter->myIMU.accelYint = my_altimeter->myIMU.accelYint | ~((1 << 16) - 1);
        my_altimeter->myIMU.accelYint = my_altimeter->myIMU.accelYint >> 4;
    } else {
        my_altimeter->myIMU.accelYint = my_altimeter->myIMU.accelYint >> 4;
    1384:	802a      	strh	r2, [r5, #0]

    if (negativeZ) {
        my_altimeter->myIMU.accelZint = my_altimeter->myIMU.accelZint | ~((1 << 16) - 1);
        my_altimeter->myIMU.accelZint = my_altimeter->myIMU.accelZint >> 4;
    } else {
        my_altimeter->myIMU.accelZint = my_altimeter->myIMU.accelZint >> 4;
    1386:	80f3      	strh	r3, [r6, #6]
    }

    my_altimeter->myIMU.accelX = my_altimeter->myIMU.accelXint * BMI055_ACCEL_16G_DIV;
    1388:	4b53      	ldr	r3, [pc, #332]	; (14d8 <sampleTick+0x35c>)
    138a:	4798      	blx	r3
    138c:	23fe      	movs	r3, #254	; 0xfe
    138e:	4d54      	ldr	r5, [pc, #336]	; (14e0 <sampleTick+0x364>)
    1390:	2200      	movs	r2, #0
    1392:	059b      	lsls	r3, r3, #22
    1394:	47a8      	blx	r5
    1396:	4b54      	ldr	r3, [pc, #336]	; (14e8 <sampleTick+0x36c>)
    1398:	4798      	blx	r3
    my_altimeter->myIMU.accelY = my_altimeter->myIMU.accelYint * BMI055_ACCEL_16G_DIV;
    139a:	9b03      	ldr	r3, [sp, #12]
        my_altimeter->myIMU.accelZint = my_altimeter->myIMU.accelZint >> 4;
    } else {
        my_altimeter->myIMU.accelZint = my_altimeter->myIMU.accelZint >> 4;
    }

    my_altimeter->myIMU.accelX = my_altimeter->myIMU.accelXint * BMI055_ACCEL_16G_DIV;
    139c:	6460      	str	r0, [r4, #68]	; 0x44
    my_altimeter->myIMU.accelY = my_altimeter->myIMU.accelYint * BMI055_ACCEL_16G_DIV;
    139e:	2000      	movs	r0, #0
    13a0:	5e18      	ldrsh	r0, [r3, r0]
    13a2:	4b4d      	ldr	r3, [pc, #308]	; (14d8 <sampleTick+0x35c>)
    13a4:	4798      	blx	r3
    13a6:	23fe      	movs	r3, #254	; 0xfe
    13a8:	2200      	movs	r2, #0
    13aa:	059b      	lsls	r3, r3, #22
    13ac:	47a8      	blx	r5
    13ae:	4b4e      	ldr	r3, [pc, #312]	; (14e8 <sampleTick+0x36c>)
    13b0:	4798      	blx	r3
    13b2:	64e0      	str	r0, [r4, #76]	; 0x4c
    my_altimeter->myIMU.accelZ = my_altimeter->myIMU.accelZint * BMI055_ACCEL_16G_DIV;
    13b4:	2306      	movs	r3, #6
    13b6:	5ef0      	ldrsh	r0, [r6, r3]
    13b8:	4b47      	ldr	r3, [pc, #284]	; (14d8 <sampleTick+0x35c>)
    13ba:	4798      	blx	r3
    13bc:	23fe      	movs	r3, #254	; 0xfe
    13be:	2200      	movs	r2, #0
    13c0:	059b      	lsls	r3, r3, #22
    13c2:	47a8      	blx	r5
    13c4:	4b48      	ldr	r3, [pc, #288]	; (14e8 <sampleTick+0x36c>)
    13c6:	4798      	blx	r3
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    13c8:	2280      	movs	r2, #128	; 0x80
    13ca:	4b48      	ldr	r3, [pc, #288]	; (14ec <sampleTick+0x370>)
    13cc:	00d2      	lsls	r2, r2, #3
    13ce:	6520      	str	r0, [r4, #80]	; 0x50


    // Gyro data
    pinLow(cs_gyro);
    dummy_rx = spiDataTransfer(SPI0, BMI055_X_GYRO_LSB | BMI055_READ_REG);
    13d0:	2182      	movs	r1, #130	; 0x82
    13d2:	615a      	str	r2, [r3, #20]
    13d4:	2000      	movs	r0, #0
    13d6:	47b8      	blx	r7
    my_altimeter->myIMU.gyroXRaw = spiDataTransfer(SPI0,dummy_Tx);
    13d8:	21ff      	movs	r1, #255	; 0xff
    13da:	2000      	movs	r0, #0
    13dc:	47b8      	blx	r7
    13de:	0023      	movs	r3, r4
    13e0:	336c      	adds	r3, #108	; 0x6c
    13e2:	8018      	strh	r0, [r3, #0]
    13e4:	0005      	movs	r5, r0
    my_altimeter->myIMU.gyroXRaw = my_altimeter->myIMU.gyroXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    13e6:	21ff      	movs	r1, #255	; 0xff
    13e8:	2000      	movs	r0, #0


    // Gyro data
    pinLow(cs_gyro);
    dummy_rx = spiDataTransfer(SPI0, BMI055_X_GYRO_LSB | BMI055_READ_REG);
    my_altimeter->myIMU.gyroXRaw = spiDataTransfer(SPI0,dummy_Tx);
    13ea:	9303      	str	r3, [sp, #12]
    my_altimeter->myIMU.gyroXRaw = my_altimeter->myIMU.gyroXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    13ec:	47b8      	blx	r7
    13ee:	9b03      	ldr	r3, [sp, #12]
    13f0:	0200      	lsls	r0, r0, #8
    13f2:	4305      	orrs	r5, r0
    13f4:	801d      	strh	r5, [r3, #0]
    my_altimeter->myIMU.gyroYRaw = spiDataTransfer(SPI0,dummy_Tx);
    13f6:	21ff      	movs	r1, #255	; 0xff
    13f8:	2000      	movs	r0, #0
    13fa:	47b8      	blx	r7
    my_altimeter->myIMU.gyroYRaw = my_altimeter->myIMU.gyroYRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    13fc:	21ff      	movs	r1, #255	; 0xff
    // Gyro data
    pinLow(cs_gyro);
    dummy_rx = spiDataTransfer(SPI0, BMI055_X_GYRO_LSB | BMI055_READ_REG);
    my_altimeter->myIMU.gyroXRaw = spiDataTransfer(SPI0,dummy_Tx);
    my_altimeter->myIMU.gyroXRaw = my_altimeter->myIMU.gyroXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    my_altimeter->myIMU.gyroYRaw = spiDataTransfer(SPI0,dummy_Tx);
    13fe:	81b0      	strh	r0, [r6, #12]
    1400:	0005      	movs	r5, r0
    my_altimeter->myIMU.gyroYRaw = my_altimeter->myIMU.gyroYRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    1402:	2000      	movs	r0, #0
    1404:	47b8      	blx	r7
    1406:	0200      	lsls	r0, r0, #8
    1408:	4305      	orrs	r5, r0
    140a:	81b5      	strh	r5, [r6, #12]
    my_altimeter->myIMU.gyroZRaw = spiDataTransfer(SPI0,dummy_Tx);
    140c:	21ff      	movs	r1, #255	; 0xff
    140e:	2000      	movs	r0, #0
    1410:	47b8      	blx	r7
    1412:	466b      	mov	r3, sp
    1414:	0025      	movs	r5, r4
    1416:	9004      	str	r0, [sp, #16]
    1418:	8a1b      	ldrh	r3, [r3, #16]
    141a:	3574      	adds	r5, #116	; 0x74
    141c:	802b      	strh	r3, [r5, #0]
    my_altimeter->myIMU.gyroZRaw = my_altimeter->myIMU.gyroZRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    141e:	21ff      	movs	r1, #255	; 0xff
    1420:	2000      	movs	r0, #0
    1422:	47b8      	blx	r7
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    1424:	2280      	movs	r2, #128	; 0x80
    1426:	9f04      	ldr	r7, [sp, #16]
    1428:	0200      	lsls	r0, r0, #8
    142a:	4b30      	ldr	r3, [pc, #192]	; (14ec <sampleTick+0x370>)
    142c:	4307      	orrs	r7, r0
    142e:	00d2      	lsls	r2, r2, #3
    1430:	802f      	strh	r7, [r5, #0]
    1432:	619a      	str	r2, [r3, #24]
    pinHigh(cs_gyro);

    bool negativeXgyro = (my_altimeter->myIMU.gyroXRaw & (1<<15)) != 0;
    1434:	9b03      	ldr	r3, [sp, #12]
    1436:	2000      	movs	r0, #0
    1438:	5e18      	ldrsh	r0, [r3, r0]
    bool negativeYgyro = (my_altimeter->myIMU.gyroYRaw & (1<<15)) != 0;
    143a:	230c      	movs	r3, #12
    143c:	5ef2      	ldrsh	r2, [r6, r3]
    bool negativeZgyro = (my_altimeter->myIMU.gyroZRaw & (1<<15)) != 0;
    143e:	2100      	movs	r1, #0
    1440:	5e6b      	ldrsh	r3, [r5, r1]

    if (negativeXgyro) {
        my_altimeter->myIMU.gyroXint = my_altimeter->myIMU.gyroXint | ~((1 << 16) - 1);
        my_altimeter->myIMU.gyroXint = my_altimeter->myIMU.gyroXint >> 4;
    } else {
        my_altimeter->myIMU.gyroXint = my_altimeter->myIMU.gyroXint >> 4;
    1442:	0021      	movs	r1, r4
    1444:	1112      	asrs	r2, r2, #4
    1446:	1100      	asrs	r0, r0, #4
    1448:	316e      	adds	r1, #110	; 0x6e
    144a:	111b      	asrs	r3, r3, #4
    144c:	8008      	strh	r0, [r1, #0]

    if (negativeYgyro) {
        my_altimeter->myIMU.gyroYint = my_altimeter->myIMU.gyroYint | ~((1 << 16) - 1);
        my_altimeter->myIMU.gyroYint = my_altimeter->myIMU.gyroYint >> 4;
    } else {
        my_altimeter->myIMU.gyroYint = my_altimeter->myIMU.gyroYint >> 4;
    144e:	81f2      	strh	r2, [r6, #14]

    if (negativeZgyro) {
        my_altimeter->myIMU.gyroZint = my_altimeter->myIMU.gyroZint | ~((1 << 16) - 1);
        my_altimeter->myIMU.gyroZint = my_altimeter->myIMU.gyroZint >> 4;
    } else {
        my_altimeter->myIMU.gyroZint = my_altimeter->myIMU.gyroZint >> 4;
    1450:	806b      	strh	r3, [r5, #2]
    }


    my_altimeter->myIMU.gyroX = my_altimeter->myIMU.gyroXint * BMI055_GYRO_2000DS_DIV;
    1452:	4b21      	ldr	r3, [pc, #132]	; (14d8 <sampleTick+0x35c>)
    1454:	4798      	blx	r3
    1456:	23fe      	movs	r3, #254	; 0xfe
    1458:	4f21      	ldr	r7, [pc, #132]	; (14e0 <sampleTick+0x364>)
    145a:	2200      	movs	r2, #0
    145c:	059b      	lsls	r3, r3, #22
    145e:	47b8      	blx	r7
    1460:	4b21      	ldr	r3, [pc, #132]	; (14e8 <sampleTick+0x36c>)
    1462:	4798      	blx	r3
    1464:	6560      	str	r0, [r4, #84]	; 0x54
    my_altimeter->myIMU.gyroY = my_altimeter->myIMU.gyroYint * BMI055_GYRO_2000DS_DIV;
    1466:	230e      	movs	r3, #14
    1468:	5ef0      	ldrsh	r0, [r6, r3]
    146a:	4b1b      	ldr	r3, [pc, #108]	; (14d8 <sampleTick+0x35c>)
    146c:	4798      	blx	r3
    146e:	23fe      	movs	r3, #254	; 0xfe
    1470:	2200      	movs	r2, #0
    1472:	059b      	lsls	r3, r3, #22
    1474:	47b8      	blx	r7
    1476:	4b1c      	ldr	r3, [pc, #112]	; (14e8 <sampleTick+0x36c>)
    1478:	4798      	blx	r3
    147a:	65a0      	str	r0, [r4, #88]	; 0x58
    my_altimeter->myIMU.gyroZ = my_altimeter->myIMU.gyroZint * BMI055_GYRO_2000DS_DIV;
    147c:	2302      	movs	r3, #2
    147e:	5ee8      	ldrsh	r0, [r5, r3]
    1480:	4b15      	ldr	r3, [pc, #84]	; (14d8 <sampleTick+0x35c>)
    1482:	4798      	blx	r3
    1484:	23fe      	movs	r3, #254	; 0xfe
    1486:	2200      	movs	r2, #0
    1488:	059b      	lsls	r3, r3, #22
    148a:	47b8      	blx	r7
    148c:	4b16      	ldr	r3, [pc, #88]	; (14e8 <sampleTick+0x36c>)
    148e:	4798      	blx	r3
    1490:	65e0      	str	r0, [r4, #92]	; 0x5c

    delay_us(800);
    1492:	20c8      	movs	r0, #200	; 0xc8
    1494:	4b17      	ldr	r3, [pc, #92]	; (14f4 <sampleTick+0x378>)
    1496:	0080      	lsls	r0, r0, #2
    1498:	4798      	blx	r3
    my_altimeter->myBarometer.rawPressureData = readMS5803AdcResults();
    ConvertPressureTemperature(&my_altimeter->myBarometer);
    149a:	0025      	movs	r5, r4
    my_altimeter->myIMU.gyroX = my_altimeter->myIMU.gyroXint * BMI055_GYRO_2000DS_DIV;
    my_altimeter->myIMU.gyroY = my_altimeter->myIMU.gyroYint * BMI055_GYRO_2000DS_DIV;
    my_altimeter->myIMU.gyroZ = my_altimeter->myIMU.gyroZint * BMI055_GYRO_2000DS_DIV;

    delay_us(800);
    my_altimeter->myBarometer.rawPressureData = readMS5803AdcResults();
    149c:	4b16      	ldr	r3, [pc, #88]	; (14f8 <sampleTick+0x37c>)
    149e:	4798      	blx	r3
    ConvertPressureTemperature(&my_altimeter->myBarometer);
    14a0:	3508      	adds	r5, #8
    my_altimeter->myIMU.gyroX = my_altimeter->myIMU.gyroXint * BMI055_GYRO_2000DS_DIV;
    my_altimeter->myIMU.gyroY = my_altimeter->myIMU.gyroYint * BMI055_GYRO_2000DS_DIV;
    my_altimeter->myIMU.gyroZ = my_altimeter->myIMU.gyroZint * BMI055_GYRO_2000DS_DIV;

    delay_us(800);
    my_altimeter->myBarometer.rawPressureData = readMS5803AdcResults();
    14a2:	6160      	str	r0, [r4, #20]
    ConvertPressureTemperature(&my_altimeter->myBarometer);
    14a4:	4b18      	ldr	r3, [pc, #96]	; (1508 <sampleTick+0x38c>)
    14a6:	0028      	movs	r0, r5
    14a8:	4798      	blx	r3
    pascalToCent(&my_altimeter->myBarometer);
    14aa:	0028      	movs	r0, r5
    14ac:	4b17      	ldr	r3, [pc, #92]	; (150c <sampleTick+0x390>)
    14ae:	4798      	blx	r3
    my_altimeter->myBarometer.heightFeet = 0.03281 * my_altimeter->myBarometer.heightCm;
    14b0:	4b17      	ldr	r3, [pc, #92]	; (1510 <sampleTick+0x394>)
    14b2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    14b4:	4798      	blx	r3
    14b6:	4a17      	ldr	r2, [pc, #92]	; (1514 <sampleTick+0x398>)
    14b8:	4b17      	ldr	r3, [pc, #92]	; (1518 <sampleTick+0x39c>)
    14ba:	4d09      	ldr	r5, [pc, #36]	; (14e0 <sampleTick+0x364>)
    14bc:	47a8      	blx	r5
    14be:	4b0a      	ldr	r3, [pc, #40]	; (14e8 <sampleTick+0x36c>)
    14c0:	4798      	blx	r3
    14c2:	62e0      	str	r0, [r4, #44]	; 0x2c


}
    14c4:	b007      	add	sp, #28
    14c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    14c8:	00000ee5 	.word	0x00000ee5
    14cc:	00002844 	.word	0x00002844
    14d0:	00000b89 	.word	0x00000b89
    14d4:	fffff0c4 	.word	0xfffff0c4
    14d8:	0000220d 	.word	0x0000220d
    14dc:	02de00d2 	.word	0x02de00d2
    14e0:	00001d19 	.word	0x00001d19
    14e4:	bf8f8a09 	.word	0xbf8f8a09
    14e8:	000023a9 	.word	0x000023a9
    14ec:	41004400 	.word	0x41004400
    14f0:	00000bf1 	.word	0x00000bf1
    14f4:	00000e69 	.word	0x00000e69
    14f8:	0000031d 	.word	0x0000031d
    14fc:	41004494 	.word	0x41004494
    1500:	00001629 	.word	0x00001629
    1504:	41004498 	.word	0x41004498
    1508:	000003d1 	.word	0x000003d1
    150c:	000004bd 	.word	0x000004bd
    1510:	00002291 	.word	0x00002291
    1514:	e9f6a93f 	.word	0xe9f6a93f
    1518:	3fa0cc78 	.word	0x3fa0cc78

0000151c <sercomClockEnable>:
#include <util.h>

void sercomClockEnable(SercomId id, uint32_t clock_channel, u8_t divider) {
    151c:	b570      	push	{r4, r5, r6, lr}
    151e:	0004      	movs	r4, r0
    // prevent this clock write from changing any other clocks
    PM->APBCMASK.reg |= 1 << (PM_APBCMASK_SERCOM0_Pos + id);
    1520:	2301      	movs	r3, #1
    1522:	1ca6      	adds	r6, r4, #2
    1524:	40b3      	lsls	r3, r6
    1526:	480d      	ldr	r0, [pc, #52]	; (155c <sercomClockEnable+0x40>)
#include <util.h>

void sercomClockEnable(SercomId id, uint32_t clock_channel, u8_t divider) {
    1528:	000d      	movs	r5, r1
    // prevent this clock write from changing any other clocks
    PM->APBCMASK.reg |= 1 << (PM_APBCMASK_SERCOM0_Pos + id);
    152a:	6a01      	ldr	r1, [r0, #32]
    152c:	430b      	orrs	r3, r1
    152e:	6203      	str	r3, [r0, #32]


    if (clock_channel != 0) {
    1530:	2d00      	cmp	r5, #0
    1532:	d003      	beq.n	153c <sercomClockEnable+0x20>
        // clock generators 3-8 have 8 division factor bits - DIV[7:0]
        gclkEnable(clock_channel, GCLK_SOURCE_DFLL48M, divider);
    1534:	2107      	movs	r1, #7
    1536:	0028      	movs	r0, r5
    1538:	4b09      	ldr	r3, [pc, #36]	; (1560 <sercomClockEnable+0x44>)
    153a:	4798      	blx	r3
    }


    // attach clock
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
    153c:	22f0      	movs	r2, #240	; 0xf0
    153e:	2080      	movs	r0, #128	; 0x80
    1540:	0229      	lsls	r1, r5, #8
    1542:	0112      	lsls	r2, r2, #4
    1544:	4011      	ands	r1, r2
    1546:	01c0      	lsls	r0, r0, #7
    1548:	4301      	orrs	r1, r0
    154a:	0020      	movs	r0, r4
    154c:	3014      	adds	r0, #20
    154e:	223f      	movs	r2, #63	; 0x3f
    1550:	0003      	movs	r3, r0
    1552:	4013      	ands	r3, r2
    1554:	4319      	orrs	r1, r3
    1556:	4b03      	ldr	r3, [pc, #12]	; (1564 <sercomClockEnable+0x48>)
    1558:	8059      	strh	r1, [r3, #2]
                        GCLK_CLKCTRL_GEN(clock_channel) |
                        GCLK_CLKCTRL_ID(SERCOM0_GCLK_ID_CORE + id);
}
    155a:	bd70      	pop	{r4, r5, r6, pc}
    155c:	40000400 	.word	0x40000400
    1560:	00000e19 	.word	0x00000e19
    1564:	40000c00 	.word	0x40000c00

00001568 <sercomReset>:
//sample.c
void sampleTick(Altimeter *my_altimeter);

//dma.c
inline static Sercom* sercom(SercomId id) {
    return (Sercom*) (0x42000800U + id * 1024);
    1568:	4b04      	ldr	r3, [pc, #16]	; (157c <sercomReset+0x14>)
    156a:	0280      	lsls	r0, r0, #10
    156c:	18c0      	adds	r0, r0, r3


void sercomReset(SercomId id) {
    sercom(id)->SPI.CTRLA.reg = SERCOM_SPI_CTRLA_SWRST;
    156e:	2301      	movs	r3, #1
    1570:	6003      	str	r3, [r0, #0]
    while(sercom(id)->SPI.CTRLA.reg & SERCOM_SPI_CTRLA_SWRST);
    1572:	6802      	ldr	r2, [r0, #0]
    1574:	421a      	tst	r2, r3
    1576:	d1fc      	bne.n	1572 <sercomReset+0xa>
}
    1578:	4770      	bx	lr
    157a:	46c0      	nop			; (mov r8, r8)
    157c:	42000800 	.word	0x42000800

00001580 <sercomSpiMasterInit>:
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
}


void sercomSpiMasterInit(SercomId id, u32_t dipo, u32_t dopo, bool cpol, bool cpha, u8_t baud) {
    1580:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1582:	0004      	movs	r4, r0
    1584:	9300      	str	r3, [sp, #0]
    1586:	ab08      	add	r3, sp, #32
    1588:	781b      	ldrb	r3, [r3, #0]
    158a:	000e      	movs	r6, r1
    158c:	9301      	str	r3, [sp, #4]
    158e:	ab09      	add	r3, sp, #36	; 0x24
    1590:	781f      	ldrb	r7, [r3, #0]

    sercomReset(id);
    1592:	4b12      	ldr	r3, [pc, #72]	; (15dc <sercomSpiMasterInit+0x5c>)
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
}


void sercomSpiMasterInit(SercomId id, u32_t dipo, u32_t dopo, bool cpol, bool cpha, u8_t baud) {
    1594:	0015      	movs	r5, r2

    sercomReset(id);
    1596:	4798      	blx	r3
    1598:	4b11      	ldr	r3, [pc, #68]	; (15e0 <sercomSpiMasterInit+0x60>)
    159a:	02a4      	lsls	r4, r4, #10
    159c:	18e4      	adds	r4, r4, r3

    sercom(id)->SPI.CTRLB.reg
        = SERCOM_SPI_CTRLB_RXEN;
    159e:	2380      	movs	r3, #128	; 0x80
    15a0:	029b      	lsls	r3, r3, #10
    15a2:	6063      	str	r3, [r4, #4]
    15a4:	23c0      	movs	r3, #192	; 0xc0
    sercom(id)->SPI.BAUD.reg = baud;

    sercom(id)->SPI.CTRLA.reg
        = SERCOM_SPI_CTRLA_ENABLE
          | SERCOM_SPI_CTRLA_MODE_SPI_MASTER
          | SERCOM_SPI_CTRLA_DIPO(dipo)
    15a6:	21c0      	movs	r1, #192	; 0xc0
    15a8:	042d      	lsls	r5, r5, #16
    15aa:	029b      	lsls	r3, r3, #10
    15ac:	402b      	ands	r3, r5
    15ae:	250e      	movs	r5, #14
    15b0:	0536      	lsls	r6, r6, #20
    15b2:	0389      	lsls	r1, r1, #14
    15b4:	4031      	ands	r1, r6
          | SERCOM_SPI_CTRLA_DOPO(dopo)
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
    15b6:	9e00      	ldr	r6, [sp, #0]
    15b8:	431d      	orrs	r5, r3
    15ba:	1e73      	subs	r3, r6, #1
    15bc:	419e      	sbcs	r6, r3
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
    15be:	9b01      	ldr	r3, [sp, #4]
    sercom(id)->SPI.CTRLA.reg
        = SERCOM_SPI_CTRLA_ENABLE
          | SERCOM_SPI_CTRLA_MODE_SPI_MASTER
          | SERCOM_SPI_CTRLA_DIPO(dipo)
          | SERCOM_SPI_CTRLA_DOPO(dopo)
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
    15c0:	0772      	lsls	r2, r6, #29
    15c2:	430d      	orrs	r5, r1
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
    15c4:	432a      	orrs	r2, r5
    15c6:	1e59      	subs	r1, r3, #1
    15c8:	418b      	sbcs	r3, r1
    15ca:	0016      	movs	r6, r2
    15cc:	071b      	lsls	r3, r3, #28
    15ce:	431e      	orrs	r6, r3
    sercomReset(id);

    sercom(id)->SPI.CTRLB.reg
        = SERCOM_SPI_CTRLB_RXEN;

    sercom(id)->SPI.BAUD.reg = baud;
    15d0:	7327      	strb	r7, [r4, #12]

    sercom(id)->SPI.CTRLA.reg
        = SERCOM_SPI_CTRLA_ENABLE
    15d2:	6026      	str	r6, [r4, #0]
        };
    }
}

static inline void SPI_sync(SercomId id) {
    while  (sercom(id)->SPI.SYNCBUSY.bit.CTRLB);
    15d4:	69e3      	ldr	r3, [r4, #28]
    15d6:	075b      	lsls	r3, r3, #29
    15d8:	d4fc      	bmi.n	15d4 <sercomSpiMasterInit+0x54>
          | SERCOM_SPI_CTRLA_DOPO(dopo)
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);

    SPI_sync(id);
}
    15da:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    15dc:	00001569 	.word	0x00001569
    15e0:	42000800 	.word	0x42000800

000015e4 <sercomUartInit>:




void sercomUartInit(SercomId id, u32_t rxpo, u32_t txpo, u32_t baud) {
    15e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    15e6:	0007      	movs	r7, r0
    15e8:	001e      	movs	r6, r3
    sercomReset(id);
    15ea:	4b0c      	ldr	r3, [pc, #48]	; (161c <sercomUartInit+0x38>)
}




void sercomUartInit(SercomId id, u32_t rxpo, u32_t txpo, u32_t baud) {
    15ec:	000d      	movs	r5, r1
    15ee:	0014      	movs	r4, r2
    sercomReset(id);
    15f0:	4798      	blx	r3
//sample.c
void sampleTick(Altimeter *my_altimeter);

//dma.c
inline static Sercom* sercom(SercomId id) {
    return (Sercom*) (0x42000800U + id * 1024);
    15f2:	4b0b      	ldr	r3, [pc, #44]	; (1620 <sercomUartInit+0x3c>)
    15f4:	02b8      	lsls	r0, r7, #10
    15f6:	18c0      	adds	r0, r0, r3
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    15f8:	2304      	movs	r3, #4
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    15fa:	22c0      	movs	r2, #192	; 0xc0



void sercomUartInit(SercomId id, u32_t rxpo, u32_t txpo, u32_t baud) {
    sercomReset(id);
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    15fc:	6003      	str	r3, [r0, #0]
    sercom(id)->USART.BAUD.reg = baud;
    sercom(id)->USART.CTRLB.reg
        = SERCOM_USART_CTRLB_RXEN
    15fe:	23c0      	movs	r3, #192	; 0xc0
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    1600:	0529      	lsls	r1, r5, #20
    1602:	0392      	lsls	r2, r2, #14
    1604:	4011      	ands	r1, r2
    1606:	4a07      	ldr	r2, [pc, #28]	; (1624 <sercomUartInit+0x40>)


void sercomUartInit(SercomId id, u32_t rxpo, u32_t txpo, u32_t baud) {
    sercomReset(id);
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    sercom(id)->USART.BAUD.reg = baud;
    1608:	b2b6      	uxth	r6, r6
    sercom(id)->USART.CTRLB.reg
        = SERCOM_USART_CTRLB_RXEN
    160a:	029b      	lsls	r3, r3, #10
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    160c:	0424      	lsls	r4, r4, #16


void sercomUartInit(SercomId id, u32_t rxpo, u32_t txpo, u32_t baud) {
    sercomReset(id);
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    sercom(id)->USART.BAUD.reg = baud;
    160e:	8186      	strh	r6, [r0, #12]
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    1610:	4311      	orrs	r1, r2
void sercomUartInit(SercomId id, u32_t rxpo, u32_t txpo, u32_t baud) {
    sercomReset(id);
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    sercom(id)->USART.BAUD.reg = baud;
    sercom(id)->USART.CTRLB.reg
        = SERCOM_USART_CTRLB_RXEN
    1612:	6043      	str	r3, [r0, #4]
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    1614:	4023      	ands	r3, r4
    1616:	430b      	orrs	r3, r1
    sercom(id)->USART.BAUD.reg = baud;
    sercom(id)->USART.CTRLB.reg
        = SERCOM_USART_CTRLB_RXEN
          | SERCOM_USART_CTRLB_TXEN;
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
    1618:	6003      	str	r3, [r0, #0]
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
}
    161a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    161c:	00001569 	.word	0x00001569
    1620:	42000800 	.word	0x42000800
    1624:	40000006 	.word	0x40000006

00001628 <spiDataTransfer>:
    1628:	4b04      	ldr	r3, [pc, #16]	; (163c <spiDataTransfer+0x14>)
    162a:	0280      	lsls	r0, r0, #10
    162c:	18c0      	adds	r0, r0, r3

u8_t spiDataTransfer(SercomId id, u8_t data) {
    sercom(id)->SPI.DATA.reg = data;
    162e:	6281      	str	r1, [r0, #40]	; 0x28
    while(sercom(id)->SPI.INTFLAG.bit.RXC == 0);
    1630:	7e03      	ldrb	r3, [r0, #24]
    1632:	075b      	lsls	r3, r3, #29
    1634:	d5fc      	bpl.n	1630 <spiDataTransfer+0x8>
    return sercom(id)->SPI.DATA.reg;
    1636:	6a80      	ldr	r0, [r0, #40]	; 0x28
    1638:	b2c0      	uxtb	r0, r0
}
    163a:	4770      	bx	lr
    163c:	42000800 	.word	0x42000800

00001640 <usartDataOut>:
    1640:	4b04      	ldr	r3, [pc, #16]	; (1654 <usartDataOut+0x14>)
    1642:	0280      	lsls	r0, r0, #10
    1644:	18c0      	adds	r0, r0, r3
    while(sercom(id)->SPI.INTFLAG.bit.DRE == 0);
    return sercom(id)->SPI.DATA.reg;
}

void usartDataOut(SercomId id, u8_t data) {
    sercom(id)->USART.DATA.reg = data;
    1646:	b289      	uxth	r1, r1
    1648:	8501      	strh	r1, [r0, #40]	; 0x28
    while(sercom(id)->USART.INTFLAG.bit.DRE == 0);
    164a:	7e03      	ldrb	r3, [r0, #24]
    164c:	07db      	lsls	r3, r3, #31
    164e:	d5fc      	bpl.n	164a <usartDataOut+0xa>
}
    1650:	4770      	bx	lr
    1652:	46c0      	nop			; (mov r8, r8)
    1654:	42000800 	.word	0x42000800

00001658 <usartDataIn>:
    1658:	4b02      	ldr	r3, [pc, #8]	; (1664 <usartDataIn+0xc>)
    165a:	0280      	lsls	r0, r0, #10
    165c:	18c0      	adds	r0, r0, r3

u8_t usartDataIn(SercomId id) {
    return sercom(id)->USART.DATA.reg;
    165e:	8d00      	ldrh	r0, [r0, #40]	; 0x28
    1660:	b2c0      	uxtb	r0, r0
    1662:	4770      	bx	lr
    1664:	42000800 	.word	0x42000800

00001668 <__aeabi_lmul>:
    1668:	b5f0      	push	{r4, r5, r6, r7, lr}
    166a:	464f      	mov	r7, r9
    166c:	4646      	mov	r6, r8
    166e:	b4c0      	push	{r6, r7}
    1670:	0416      	lsls	r6, r2, #16
    1672:	0c36      	lsrs	r6, r6, #16
    1674:	4699      	mov	r9, r3
    1676:	0033      	movs	r3, r6
    1678:	0405      	lsls	r5, r0, #16
    167a:	0c2c      	lsrs	r4, r5, #16
    167c:	0c07      	lsrs	r7, r0, #16
    167e:	0c15      	lsrs	r5, r2, #16
    1680:	4363      	muls	r3, r4
    1682:	437e      	muls	r6, r7
    1684:	436f      	muls	r7, r5
    1686:	4365      	muls	r5, r4
    1688:	0c1c      	lsrs	r4, r3, #16
    168a:	19ad      	adds	r5, r5, r6
    168c:	1964      	adds	r4, r4, r5
    168e:	469c      	mov	ip, r3
    1690:	42a6      	cmp	r6, r4
    1692:	d903      	bls.n	169c <__aeabi_lmul+0x34>
    1694:	2380      	movs	r3, #128	; 0x80
    1696:	025b      	lsls	r3, r3, #9
    1698:	4698      	mov	r8, r3
    169a:	4447      	add	r7, r8
    169c:	4663      	mov	r3, ip
    169e:	0c25      	lsrs	r5, r4, #16
    16a0:	19ef      	adds	r7, r5, r7
    16a2:	041d      	lsls	r5, r3, #16
    16a4:	464b      	mov	r3, r9
    16a6:	434a      	muls	r2, r1
    16a8:	4343      	muls	r3, r0
    16aa:	0c2d      	lsrs	r5, r5, #16
    16ac:	0424      	lsls	r4, r4, #16
    16ae:	1964      	adds	r4, r4, r5
    16b0:	1899      	adds	r1, r3, r2
    16b2:	19c9      	adds	r1, r1, r7
    16b4:	0020      	movs	r0, r4
    16b6:	bc0c      	pop	{r2, r3}
    16b8:	4690      	mov	r8, r2
    16ba:	4699      	mov	r9, r3
    16bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    16be:	46c0      	nop			; (mov r8, r8)

000016c0 <__aeabi_dadd>:
    16c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    16c2:	4656      	mov	r6, sl
    16c4:	465f      	mov	r7, fp
    16c6:	464d      	mov	r5, r9
    16c8:	4644      	mov	r4, r8
    16ca:	b4f0      	push	{r4, r5, r6, r7}
    16cc:	000f      	movs	r7, r1
    16ce:	0ffd      	lsrs	r5, r7, #31
    16d0:	46aa      	mov	sl, r5
    16d2:	0309      	lsls	r1, r1, #12
    16d4:	007c      	lsls	r4, r7, #1
    16d6:	002e      	movs	r6, r5
    16d8:	005f      	lsls	r7, r3, #1
    16da:	0f45      	lsrs	r5, r0, #29
    16dc:	0a49      	lsrs	r1, r1, #9
    16de:	0d7f      	lsrs	r7, r7, #21
    16e0:	4329      	orrs	r1, r5
    16e2:	00c5      	lsls	r5, r0, #3
    16e4:	0318      	lsls	r0, r3, #12
    16e6:	46bc      	mov	ip, r7
    16e8:	0a40      	lsrs	r0, r0, #9
    16ea:	0f57      	lsrs	r7, r2, #29
    16ec:	0d64      	lsrs	r4, r4, #21
    16ee:	0fdb      	lsrs	r3, r3, #31
    16f0:	4338      	orrs	r0, r7
    16f2:	00d2      	lsls	r2, r2, #3
    16f4:	459a      	cmp	sl, r3
    16f6:	d100      	bne.n	16fa <__aeabi_dadd+0x3a>
    16f8:	e0aa      	b.n	1850 <__aeabi_dadd+0x190>
    16fa:	4666      	mov	r6, ip
    16fc:	1ba6      	subs	r6, r4, r6
    16fe:	2e00      	cmp	r6, #0
    1700:	dc00      	bgt.n	1704 <__aeabi_dadd+0x44>
    1702:	e0ff      	b.n	1904 <__aeabi_dadd+0x244>
    1704:	4663      	mov	r3, ip
    1706:	2b00      	cmp	r3, #0
    1708:	d139      	bne.n	177e <__aeabi_dadd+0xbe>
    170a:	0003      	movs	r3, r0
    170c:	4313      	orrs	r3, r2
    170e:	d000      	beq.n	1712 <__aeabi_dadd+0x52>
    1710:	e0d9      	b.n	18c6 <__aeabi_dadd+0x206>
    1712:	076b      	lsls	r3, r5, #29
    1714:	d009      	beq.n	172a <__aeabi_dadd+0x6a>
    1716:	230f      	movs	r3, #15
    1718:	402b      	ands	r3, r5
    171a:	2b04      	cmp	r3, #4
    171c:	d005      	beq.n	172a <__aeabi_dadd+0x6a>
    171e:	1d2b      	adds	r3, r5, #4
    1720:	42ab      	cmp	r3, r5
    1722:	41ad      	sbcs	r5, r5
    1724:	426d      	negs	r5, r5
    1726:	1949      	adds	r1, r1, r5
    1728:	001d      	movs	r5, r3
    172a:	020b      	lsls	r3, r1, #8
    172c:	d400      	bmi.n	1730 <__aeabi_dadd+0x70>
    172e:	e082      	b.n	1836 <__aeabi_dadd+0x176>
    1730:	4bca      	ldr	r3, [pc, #808]	; (1a5c <__aeabi_dadd+0x39c>)
    1732:	3401      	adds	r4, #1
    1734:	429c      	cmp	r4, r3
    1736:	d100      	bne.n	173a <__aeabi_dadd+0x7a>
    1738:	e0fe      	b.n	1938 <__aeabi_dadd+0x278>
    173a:	000a      	movs	r2, r1
    173c:	4656      	mov	r6, sl
    173e:	4bc8      	ldr	r3, [pc, #800]	; (1a60 <__aeabi_dadd+0x3a0>)
    1740:	08ed      	lsrs	r5, r5, #3
    1742:	401a      	ands	r2, r3
    1744:	0750      	lsls	r0, r2, #29
    1746:	0564      	lsls	r4, r4, #21
    1748:	0252      	lsls	r2, r2, #9
    174a:	4305      	orrs	r5, r0
    174c:	0b12      	lsrs	r2, r2, #12
    174e:	0d64      	lsrs	r4, r4, #21
    1750:	2100      	movs	r1, #0
    1752:	0312      	lsls	r2, r2, #12
    1754:	0d0b      	lsrs	r3, r1, #20
    1756:	051b      	lsls	r3, r3, #20
    1758:	0564      	lsls	r4, r4, #21
    175a:	0b12      	lsrs	r2, r2, #12
    175c:	431a      	orrs	r2, r3
    175e:	0863      	lsrs	r3, r4, #1
    1760:	4cc0      	ldr	r4, [pc, #768]	; (1a64 <__aeabi_dadd+0x3a4>)
    1762:	07f6      	lsls	r6, r6, #31
    1764:	4014      	ands	r4, r2
    1766:	431c      	orrs	r4, r3
    1768:	0064      	lsls	r4, r4, #1
    176a:	0864      	lsrs	r4, r4, #1
    176c:	4334      	orrs	r4, r6
    176e:	0028      	movs	r0, r5
    1770:	0021      	movs	r1, r4
    1772:	bc3c      	pop	{r2, r3, r4, r5}
    1774:	4690      	mov	r8, r2
    1776:	4699      	mov	r9, r3
    1778:	46a2      	mov	sl, r4
    177a:	46ab      	mov	fp, r5
    177c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    177e:	4bb7      	ldr	r3, [pc, #732]	; (1a5c <__aeabi_dadd+0x39c>)
    1780:	429c      	cmp	r4, r3
    1782:	d0c6      	beq.n	1712 <__aeabi_dadd+0x52>
    1784:	2380      	movs	r3, #128	; 0x80
    1786:	041b      	lsls	r3, r3, #16
    1788:	4318      	orrs	r0, r3
    178a:	2e38      	cmp	r6, #56	; 0x38
    178c:	dd00      	ble.n	1790 <__aeabi_dadd+0xd0>
    178e:	e0eb      	b.n	1968 <__aeabi_dadd+0x2a8>
    1790:	2e1f      	cmp	r6, #31
    1792:	dd00      	ble.n	1796 <__aeabi_dadd+0xd6>
    1794:	e11e      	b.n	19d4 <__aeabi_dadd+0x314>
    1796:	2320      	movs	r3, #32
    1798:	1b9b      	subs	r3, r3, r6
    179a:	469c      	mov	ip, r3
    179c:	0003      	movs	r3, r0
    179e:	4667      	mov	r7, ip
    17a0:	40bb      	lsls	r3, r7
    17a2:	4698      	mov	r8, r3
    17a4:	0013      	movs	r3, r2
    17a6:	4647      	mov	r7, r8
    17a8:	40f3      	lsrs	r3, r6
    17aa:	433b      	orrs	r3, r7
    17ac:	4667      	mov	r7, ip
    17ae:	40ba      	lsls	r2, r7
    17b0:	1e57      	subs	r7, r2, #1
    17b2:	41ba      	sbcs	r2, r7
    17b4:	4313      	orrs	r3, r2
    17b6:	0002      	movs	r2, r0
    17b8:	40f2      	lsrs	r2, r6
    17ba:	1aeb      	subs	r3, r5, r3
    17bc:	429d      	cmp	r5, r3
    17be:	41b6      	sbcs	r6, r6
    17c0:	001d      	movs	r5, r3
    17c2:	1a8a      	subs	r2, r1, r2
    17c4:	4276      	negs	r6, r6
    17c6:	1b91      	subs	r1, r2, r6
    17c8:	020b      	lsls	r3, r1, #8
    17ca:	d531      	bpl.n	1830 <__aeabi_dadd+0x170>
    17cc:	024a      	lsls	r2, r1, #9
    17ce:	0a56      	lsrs	r6, r2, #9
    17d0:	2e00      	cmp	r6, #0
    17d2:	d100      	bne.n	17d6 <__aeabi_dadd+0x116>
    17d4:	e0b4      	b.n	1940 <__aeabi_dadd+0x280>
    17d6:	0030      	movs	r0, r6
    17d8:	f000 fe72 	bl	24c0 <__clzsi2>
    17dc:	0003      	movs	r3, r0
    17de:	3b08      	subs	r3, #8
    17e0:	2b1f      	cmp	r3, #31
    17e2:	dd00      	ble.n	17e6 <__aeabi_dadd+0x126>
    17e4:	e0b5      	b.n	1952 <__aeabi_dadd+0x292>
    17e6:	2220      	movs	r2, #32
    17e8:	0029      	movs	r1, r5
    17ea:	1ad2      	subs	r2, r2, r3
    17ec:	40d1      	lsrs	r1, r2
    17ee:	409e      	lsls	r6, r3
    17f0:	000a      	movs	r2, r1
    17f2:	409d      	lsls	r5, r3
    17f4:	4332      	orrs	r2, r6
    17f6:	429c      	cmp	r4, r3
    17f8:	dd00      	ble.n	17fc <__aeabi_dadd+0x13c>
    17fa:	e0b1      	b.n	1960 <__aeabi_dadd+0x2a0>
    17fc:	1b1c      	subs	r4, r3, r4
    17fe:	1c63      	adds	r3, r4, #1
    1800:	2b1f      	cmp	r3, #31
    1802:	dd00      	ble.n	1806 <__aeabi_dadd+0x146>
    1804:	e0d5      	b.n	19b2 <__aeabi_dadd+0x2f2>
    1806:	2120      	movs	r1, #32
    1808:	0014      	movs	r4, r2
    180a:	0028      	movs	r0, r5
    180c:	1ac9      	subs	r1, r1, r3
    180e:	408c      	lsls	r4, r1
    1810:	40d8      	lsrs	r0, r3
    1812:	408d      	lsls	r5, r1
    1814:	4304      	orrs	r4, r0
    1816:	40da      	lsrs	r2, r3
    1818:	1e68      	subs	r0, r5, #1
    181a:	4185      	sbcs	r5, r0
    181c:	0011      	movs	r1, r2
    181e:	4325      	orrs	r5, r4
    1820:	2400      	movs	r4, #0
    1822:	e776      	b.n	1712 <__aeabi_dadd+0x52>
    1824:	4641      	mov	r1, r8
    1826:	4331      	orrs	r1, r6
    1828:	d100      	bne.n	182c <__aeabi_dadd+0x16c>
    182a:	e234      	b.n	1c96 <__aeabi_dadd+0x5d6>
    182c:	0031      	movs	r1, r6
    182e:	4645      	mov	r5, r8
    1830:	076b      	lsls	r3, r5, #29
    1832:	d000      	beq.n	1836 <__aeabi_dadd+0x176>
    1834:	e76f      	b.n	1716 <__aeabi_dadd+0x56>
    1836:	4656      	mov	r6, sl
    1838:	0748      	lsls	r0, r1, #29
    183a:	08ed      	lsrs	r5, r5, #3
    183c:	08c9      	lsrs	r1, r1, #3
    183e:	4305      	orrs	r5, r0
    1840:	4b86      	ldr	r3, [pc, #536]	; (1a5c <__aeabi_dadd+0x39c>)
    1842:	429c      	cmp	r4, r3
    1844:	d035      	beq.n	18b2 <__aeabi_dadd+0x1f2>
    1846:	030a      	lsls	r2, r1, #12
    1848:	0564      	lsls	r4, r4, #21
    184a:	0b12      	lsrs	r2, r2, #12
    184c:	0d64      	lsrs	r4, r4, #21
    184e:	e77f      	b.n	1750 <__aeabi_dadd+0x90>
    1850:	4663      	mov	r3, ip
    1852:	1ae3      	subs	r3, r4, r3
    1854:	469b      	mov	fp, r3
    1856:	2b00      	cmp	r3, #0
    1858:	dc00      	bgt.n	185c <__aeabi_dadd+0x19c>
    185a:	e08b      	b.n	1974 <__aeabi_dadd+0x2b4>
    185c:	4667      	mov	r7, ip
    185e:	2f00      	cmp	r7, #0
    1860:	d03c      	beq.n	18dc <__aeabi_dadd+0x21c>
    1862:	4f7e      	ldr	r7, [pc, #504]	; (1a5c <__aeabi_dadd+0x39c>)
    1864:	42bc      	cmp	r4, r7
    1866:	d100      	bne.n	186a <__aeabi_dadd+0x1aa>
    1868:	e753      	b.n	1712 <__aeabi_dadd+0x52>
    186a:	2780      	movs	r7, #128	; 0x80
    186c:	043f      	lsls	r7, r7, #16
    186e:	4338      	orrs	r0, r7
    1870:	465b      	mov	r3, fp
    1872:	2b38      	cmp	r3, #56	; 0x38
    1874:	dc00      	bgt.n	1878 <__aeabi_dadd+0x1b8>
    1876:	e0f7      	b.n	1a68 <__aeabi_dadd+0x3a8>
    1878:	4302      	orrs	r2, r0
    187a:	1e50      	subs	r0, r2, #1
    187c:	4182      	sbcs	r2, r0
    187e:	2000      	movs	r0, #0
    1880:	b2d2      	uxtb	r2, r2
    1882:	1953      	adds	r3, r2, r5
    1884:	1842      	adds	r2, r0, r1
    1886:	42ab      	cmp	r3, r5
    1888:	4189      	sbcs	r1, r1
    188a:	001d      	movs	r5, r3
    188c:	4249      	negs	r1, r1
    188e:	1889      	adds	r1, r1, r2
    1890:	020b      	lsls	r3, r1, #8
    1892:	d5cd      	bpl.n	1830 <__aeabi_dadd+0x170>
    1894:	4b71      	ldr	r3, [pc, #452]	; (1a5c <__aeabi_dadd+0x39c>)
    1896:	3401      	adds	r4, #1
    1898:	429c      	cmp	r4, r3
    189a:	d100      	bne.n	189e <__aeabi_dadd+0x1de>
    189c:	e13d      	b.n	1b1a <__aeabi_dadd+0x45a>
    189e:	2001      	movs	r0, #1
    18a0:	4a6f      	ldr	r2, [pc, #444]	; (1a60 <__aeabi_dadd+0x3a0>)
    18a2:	086b      	lsrs	r3, r5, #1
    18a4:	400a      	ands	r2, r1
    18a6:	4028      	ands	r0, r5
    18a8:	4318      	orrs	r0, r3
    18aa:	07d5      	lsls	r5, r2, #31
    18ac:	4305      	orrs	r5, r0
    18ae:	0851      	lsrs	r1, r2, #1
    18b0:	e72f      	b.n	1712 <__aeabi_dadd+0x52>
    18b2:	002b      	movs	r3, r5
    18b4:	430b      	orrs	r3, r1
    18b6:	d100      	bne.n	18ba <__aeabi_dadd+0x1fa>
    18b8:	e1cb      	b.n	1c52 <__aeabi_dadd+0x592>
    18ba:	2380      	movs	r3, #128	; 0x80
    18bc:	031b      	lsls	r3, r3, #12
    18be:	430b      	orrs	r3, r1
    18c0:	031a      	lsls	r2, r3, #12
    18c2:	0b12      	lsrs	r2, r2, #12
    18c4:	e744      	b.n	1750 <__aeabi_dadd+0x90>
    18c6:	3e01      	subs	r6, #1
    18c8:	2e00      	cmp	r6, #0
    18ca:	d16d      	bne.n	19a8 <__aeabi_dadd+0x2e8>
    18cc:	1aae      	subs	r6, r5, r2
    18ce:	42b5      	cmp	r5, r6
    18d0:	419b      	sbcs	r3, r3
    18d2:	1a09      	subs	r1, r1, r0
    18d4:	425b      	negs	r3, r3
    18d6:	1ac9      	subs	r1, r1, r3
    18d8:	0035      	movs	r5, r6
    18da:	e775      	b.n	17c8 <__aeabi_dadd+0x108>
    18dc:	0007      	movs	r7, r0
    18de:	4317      	orrs	r7, r2
    18e0:	d100      	bne.n	18e4 <__aeabi_dadd+0x224>
    18e2:	e716      	b.n	1712 <__aeabi_dadd+0x52>
    18e4:	2301      	movs	r3, #1
    18e6:	425b      	negs	r3, r3
    18e8:	469c      	mov	ip, r3
    18ea:	44e3      	add	fp, ip
    18ec:	465b      	mov	r3, fp
    18ee:	2b00      	cmp	r3, #0
    18f0:	d000      	beq.n	18f4 <__aeabi_dadd+0x234>
    18f2:	e0e0      	b.n	1ab6 <__aeabi_dadd+0x3f6>
    18f4:	18aa      	adds	r2, r5, r2
    18f6:	42aa      	cmp	r2, r5
    18f8:	419b      	sbcs	r3, r3
    18fa:	1809      	adds	r1, r1, r0
    18fc:	425b      	negs	r3, r3
    18fe:	1859      	adds	r1, r3, r1
    1900:	0015      	movs	r5, r2
    1902:	e7c5      	b.n	1890 <__aeabi_dadd+0x1d0>
    1904:	2e00      	cmp	r6, #0
    1906:	d175      	bne.n	19f4 <__aeabi_dadd+0x334>
    1908:	1c66      	adds	r6, r4, #1
    190a:	0576      	lsls	r6, r6, #21
    190c:	0d76      	lsrs	r6, r6, #21
    190e:	2e01      	cmp	r6, #1
    1910:	dc00      	bgt.n	1914 <__aeabi_dadd+0x254>
    1912:	e0f3      	b.n	1afc <__aeabi_dadd+0x43c>
    1914:	1aae      	subs	r6, r5, r2
    1916:	46b0      	mov	r8, r6
    1918:	4545      	cmp	r5, r8
    191a:	41bf      	sbcs	r7, r7
    191c:	1a0e      	subs	r6, r1, r0
    191e:	427f      	negs	r7, r7
    1920:	1bf6      	subs	r6, r6, r7
    1922:	0237      	lsls	r7, r6, #8
    1924:	d400      	bmi.n	1928 <__aeabi_dadd+0x268>
    1926:	e08f      	b.n	1a48 <__aeabi_dadd+0x388>
    1928:	1b55      	subs	r5, r2, r5
    192a:	42aa      	cmp	r2, r5
    192c:	41b6      	sbcs	r6, r6
    192e:	1a41      	subs	r1, r0, r1
    1930:	4276      	negs	r6, r6
    1932:	1b8e      	subs	r6, r1, r6
    1934:	469a      	mov	sl, r3
    1936:	e74b      	b.n	17d0 <__aeabi_dadd+0x110>
    1938:	4656      	mov	r6, sl
    193a:	2200      	movs	r2, #0
    193c:	2500      	movs	r5, #0
    193e:	e707      	b.n	1750 <__aeabi_dadd+0x90>
    1940:	0028      	movs	r0, r5
    1942:	f000 fdbd 	bl	24c0 <__clzsi2>
    1946:	3020      	adds	r0, #32
    1948:	0003      	movs	r3, r0
    194a:	3b08      	subs	r3, #8
    194c:	2b1f      	cmp	r3, #31
    194e:	dc00      	bgt.n	1952 <__aeabi_dadd+0x292>
    1950:	e749      	b.n	17e6 <__aeabi_dadd+0x126>
    1952:	002a      	movs	r2, r5
    1954:	3828      	subs	r0, #40	; 0x28
    1956:	4082      	lsls	r2, r0
    1958:	2500      	movs	r5, #0
    195a:	429c      	cmp	r4, r3
    195c:	dc00      	bgt.n	1960 <__aeabi_dadd+0x2a0>
    195e:	e74d      	b.n	17fc <__aeabi_dadd+0x13c>
    1960:	493f      	ldr	r1, [pc, #252]	; (1a60 <__aeabi_dadd+0x3a0>)
    1962:	1ae4      	subs	r4, r4, r3
    1964:	4011      	ands	r1, r2
    1966:	e6d4      	b.n	1712 <__aeabi_dadd+0x52>
    1968:	4302      	orrs	r2, r0
    196a:	1e50      	subs	r0, r2, #1
    196c:	4182      	sbcs	r2, r0
    196e:	b2d3      	uxtb	r3, r2
    1970:	2200      	movs	r2, #0
    1972:	e722      	b.n	17ba <__aeabi_dadd+0xfa>
    1974:	2b00      	cmp	r3, #0
    1976:	d000      	beq.n	197a <__aeabi_dadd+0x2ba>
    1978:	e0f3      	b.n	1b62 <__aeabi_dadd+0x4a2>
    197a:	1c63      	adds	r3, r4, #1
    197c:	469c      	mov	ip, r3
    197e:	055b      	lsls	r3, r3, #21
    1980:	0d5b      	lsrs	r3, r3, #21
    1982:	2b01      	cmp	r3, #1
    1984:	dc00      	bgt.n	1988 <__aeabi_dadd+0x2c8>
    1986:	e09f      	b.n	1ac8 <__aeabi_dadd+0x408>
    1988:	4b34      	ldr	r3, [pc, #208]	; (1a5c <__aeabi_dadd+0x39c>)
    198a:	459c      	cmp	ip, r3
    198c:	d100      	bne.n	1990 <__aeabi_dadd+0x2d0>
    198e:	e0c3      	b.n	1b18 <__aeabi_dadd+0x458>
    1990:	18aa      	adds	r2, r5, r2
    1992:	1809      	adds	r1, r1, r0
    1994:	42aa      	cmp	r2, r5
    1996:	4180      	sbcs	r0, r0
    1998:	4240      	negs	r0, r0
    199a:	1841      	adds	r1, r0, r1
    199c:	07cd      	lsls	r5, r1, #31
    199e:	0852      	lsrs	r2, r2, #1
    19a0:	4315      	orrs	r5, r2
    19a2:	0849      	lsrs	r1, r1, #1
    19a4:	4664      	mov	r4, ip
    19a6:	e6b4      	b.n	1712 <__aeabi_dadd+0x52>
    19a8:	4b2c      	ldr	r3, [pc, #176]	; (1a5c <__aeabi_dadd+0x39c>)
    19aa:	429c      	cmp	r4, r3
    19ac:	d000      	beq.n	19b0 <__aeabi_dadd+0x2f0>
    19ae:	e6ec      	b.n	178a <__aeabi_dadd+0xca>
    19b0:	e6af      	b.n	1712 <__aeabi_dadd+0x52>
    19b2:	0011      	movs	r1, r2
    19b4:	3c1f      	subs	r4, #31
    19b6:	40e1      	lsrs	r1, r4
    19b8:	000c      	movs	r4, r1
    19ba:	2b20      	cmp	r3, #32
    19bc:	d100      	bne.n	19c0 <__aeabi_dadd+0x300>
    19be:	e07f      	b.n	1ac0 <__aeabi_dadd+0x400>
    19c0:	2140      	movs	r1, #64	; 0x40
    19c2:	1acb      	subs	r3, r1, r3
    19c4:	409a      	lsls	r2, r3
    19c6:	4315      	orrs	r5, r2
    19c8:	1e6a      	subs	r2, r5, #1
    19ca:	4195      	sbcs	r5, r2
    19cc:	2100      	movs	r1, #0
    19ce:	4325      	orrs	r5, r4
    19d0:	2400      	movs	r4, #0
    19d2:	e72d      	b.n	1830 <__aeabi_dadd+0x170>
    19d4:	0033      	movs	r3, r6
    19d6:	0007      	movs	r7, r0
    19d8:	3b20      	subs	r3, #32
    19da:	40df      	lsrs	r7, r3
    19dc:	003b      	movs	r3, r7
    19de:	2e20      	cmp	r6, #32
    19e0:	d070      	beq.n	1ac4 <__aeabi_dadd+0x404>
    19e2:	2740      	movs	r7, #64	; 0x40
    19e4:	1bbe      	subs	r6, r7, r6
    19e6:	40b0      	lsls	r0, r6
    19e8:	4302      	orrs	r2, r0
    19ea:	1e50      	subs	r0, r2, #1
    19ec:	4182      	sbcs	r2, r0
    19ee:	4313      	orrs	r3, r2
    19f0:	2200      	movs	r2, #0
    19f2:	e6e2      	b.n	17ba <__aeabi_dadd+0xfa>
    19f4:	2c00      	cmp	r4, #0
    19f6:	d04f      	beq.n	1a98 <__aeabi_dadd+0x3d8>
    19f8:	4c18      	ldr	r4, [pc, #96]	; (1a5c <__aeabi_dadd+0x39c>)
    19fa:	45a4      	cmp	ip, r4
    19fc:	d100      	bne.n	1a00 <__aeabi_dadd+0x340>
    19fe:	e0ab      	b.n	1b58 <__aeabi_dadd+0x498>
    1a00:	2480      	movs	r4, #128	; 0x80
    1a02:	0424      	lsls	r4, r4, #16
    1a04:	4276      	negs	r6, r6
    1a06:	4321      	orrs	r1, r4
    1a08:	2e38      	cmp	r6, #56	; 0x38
    1a0a:	dd00      	ble.n	1a0e <__aeabi_dadd+0x34e>
    1a0c:	e0df      	b.n	1bce <__aeabi_dadd+0x50e>
    1a0e:	2e1f      	cmp	r6, #31
    1a10:	dd00      	ble.n	1a14 <__aeabi_dadd+0x354>
    1a12:	e143      	b.n	1c9c <__aeabi_dadd+0x5dc>
    1a14:	2720      	movs	r7, #32
    1a16:	1bbc      	subs	r4, r7, r6
    1a18:	46a1      	mov	r9, r4
    1a1a:	000c      	movs	r4, r1
    1a1c:	464f      	mov	r7, r9
    1a1e:	40bc      	lsls	r4, r7
    1a20:	46a0      	mov	r8, r4
    1a22:	002c      	movs	r4, r5
    1a24:	4647      	mov	r7, r8
    1a26:	40f4      	lsrs	r4, r6
    1a28:	433c      	orrs	r4, r7
    1a2a:	464f      	mov	r7, r9
    1a2c:	40bd      	lsls	r5, r7
    1a2e:	1e6f      	subs	r7, r5, #1
    1a30:	41bd      	sbcs	r5, r7
    1a32:	40f1      	lsrs	r1, r6
    1a34:	432c      	orrs	r4, r5
    1a36:	1b15      	subs	r5, r2, r4
    1a38:	42aa      	cmp	r2, r5
    1a3a:	4192      	sbcs	r2, r2
    1a3c:	1a41      	subs	r1, r0, r1
    1a3e:	4252      	negs	r2, r2
    1a40:	1a89      	subs	r1, r1, r2
    1a42:	4664      	mov	r4, ip
    1a44:	469a      	mov	sl, r3
    1a46:	e6bf      	b.n	17c8 <__aeabi_dadd+0x108>
    1a48:	4641      	mov	r1, r8
    1a4a:	4645      	mov	r5, r8
    1a4c:	4331      	orrs	r1, r6
    1a4e:	d000      	beq.n	1a52 <__aeabi_dadd+0x392>
    1a50:	e6be      	b.n	17d0 <__aeabi_dadd+0x110>
    1a52:	2600      	movs	r6, #0
    1a54:	2400      	movs	r4, #0
    1a56:	2500      	movs	r5, #0
    1a58:	e6f2      	b.n	1840 <__aeabi_dadd+0x180>
    1a5a:	46c0      	nop			; (mov r8, r8)
    1a5c:	000007ff 	.word	0x000007ff
    1a60:	ff7fffff 	.word	0xff7fffff
    1a64:	800fffff 	.word	0x800fffff
    1a68:	2b1f      	cmp	r3, #31
    1a6a:	dc59      	bgt.n	1b20 <__aeabi_dadd+0x460>
    1a6c:	2720      	movs	r7, #32
    1a6e:	1aff      	subs	r7, r7, r3
    1a70:	46bc      	mov	ip, r7
    1a72:	0007      	movs	r7, r0
    1a74:	4663      	mov	r3, ip
    1a76:	409f      	lsls	r7, r3
    1a78:	465b      	mov	r3, fp
    1a7a:	46b9      	mov	r9, r7
    1a7c:	0017      	movs	r7, r2
    1a7e:	40df      	lsrs	r7, r3
    1a80:	46b8      	mov	r8, r7
    1a82:	464f      	mov	r7, r9
    1a84:	4643      	mov	r3, r8
    1a86:	431f      	orrs	r7, r3
    1a88:	4663      	mov	r3, ip
    1a8a:	409a      	lsls	r2, r3
    1a8c:	1e53      	subs	r3, r2, #1
    1a8e:	419a      	sbcs	r2, r3
    1a90:	465b      	mov	r3, fp
    1a92:	433a      	orrs	r2, r7
    1a94:	40d8      	lsrs	r0, r3
    1a96:	e6f4      	b.n	1882 <__aeabi_dadd+0x1c2>
    1a98:	000c      	movs	r4, r1
    1a9a:	432c      	orrs	r4, r5
    1a9c:	d05c      	beq.n	1b58 <__aeabi_dadd+0x498>
    1a9e:	43f6      	mvns	r6, r6
    1aa0:	2e00      	cmp	r6, #0
    1aa2:	d155      	bne.n	1b50 <__aeabi_dadd+0x490>
    1aa4:	1b55      	subs	r5, r2, r5
    1aa6:	42aa      	cmp	r2, r5
    1aa8:	41a4      	sbcs	r4, r4
    1aaa:	1a41      	subs	r1, r0, r1
    1aac:	4264      	negs	r4, r4
    1aae:	1b09      	subs	r1, r1, r4
    1ab0:	469a      	mov	sl, r3
    1ab2:	4664      	mov	r4, ip
    1ab4:	e688      	b.n	17c8 <__aeabi_dadd+0x108>
    1ab6:	4f96      	ldr	r7, [pc, #600]	; (1d10 <__aeabi_dadd+0x650>)
    1ab8:	42bc      	cmp	r4, r7
    1aba:	d000      	beq.n	1abe <__aeabi_dadd+0x3fe>
    1abc:	e6d8      	b.n	1870 <__aeabi_dadd+0x1b0>
    1abe:	e628      	b.n	1712 <__aeabi_dadd+0x52>
    1ac0:	2200      	movs	r2, #0
    1ac2:	e780      	b.n	19c6 <__aeabi_dadd+0x306>
    1ac4:	2000      	movs	r0, #0
    1ac6:	e78f      	b.n	19e8 <__aeabi_dadd+0x328>
    1ac8:	000b      	movs	r3, r1
    1aca:	432b      	orrs	r3, r5
    1acc:	2c00      	cmp	r4, #0
    1ace:	d000      	beq.n	1ad2 <__aeabi_dadd+0x412>
    1ad0:	e0c2      	b.n	1c58 <__aeabi_dadd+0x598>
    1ad2:	2b00      	cmp	r3, #0
    1ad4:	d100      	bne.n	1ad8 <__aeabi_dadd+0x418>
    1ad6:	e101      	b.n	1cdc <__aeabi_dadd+0x61c>
    1ad8:	0003      	movs	r3, r0
    1ada:	4313      	orrs	r3, r2
    1adc:	d100      	bne.n	1ae0 <__aeabi_dadd+0x420>
    1ade:	e618      	b.n	1712 <__aeabi_dadd+0x52>
    1ae0:	18ab      	adds	r3, r5, r2
    1ae2:	42ab      	cmp	r3, r5
    1ae4:	41b6      	sbcs	r6, r6
    1ae6:	1809      	adds	r1, r1, r0
    1ae8:	4276      	negs	r6, r6
    1aea:	1871      	adds	r1, r6, r1
    1aec:	020a      	lsls	r2, r1, #8
    1aee:	d400      	bmi.n	1af2 <__aeabi_dadd+0x432>
    1af0:	e109      	b.n	1d06 <__aeabi_dadd+0x646>
    1af2:	4a88      	ldr	r2, [pc, #544]	; (1d14 <__aeabi_dadd+0x654>)
    1af4:	001d      	movs	r5, r3
    1af6:	4011      	ands	r1, r2
    1af8:	4664      	mov	r4, ip
    1afa:	e60a      	b.n	1712 <__aeabi_dadd+0x52>
    1afc:	2c00      	cmp	r4, #0
    1afe:	d15b      	bne.n	1bb8 <__aeabi_dadd+0x4f8>
    1b00:	000e      	movs	r6, r1
    1b02:	432e      	orrs	r6, r5
    1b04:	d000      	beq.n	1b08 <__aeabi_dadd+0x448>
    1b06:	e08a      	b.n	1c1e <__aeabi_dadd+0x55e>
    1b08:	0001      	movs	r1, r0
    1b0a:	4311      	orrs	r1, r2
    1b0c:	d100      	bne.n	1b10 <__aeabi_dadd+0x450>
    1b0e:	e0c2      	b.n	1c96 <__aeabi_dadd+0x5d6>
    1b10:	0001      	movs	r1, r0
    1b12:	0015      	movs	r5, r2
    1b14:	469a      	mov	sl, r3
    1b16:	e5fc      	b.n	1712 <__aeabi_dadd+0x52>
    1b18:	4664      	mov	r4, ip
    1b1a:	2100      	movs	r1, #0
    1b1c:	2500      	movs	r5, #0
    1b1e:	e68f      	b.n	1840 <__aeabi_dadd+0x180>
    1b20:	2320      	movs	r3, #32
    1b22:	425b      	negs	r3, r3
    1b24:	469c      	mov	ip, r3
    1b26:	44dc      	add	ip, fp
    1b28:	4663      	mov	r3, ip
    1b2a:	0007      	movs	r7, r0
    1b2c:	40df      	lsrs	r7, r3
    1b2e:	465b      	mov	r3, fp
    1b30:	46bc      	mov	ip, r7
    1b32:	2b20      	cmp	r3, #32
    1b34:	d100      	bne.n	1b38 <__aeabi_dadd+0x478>
    1b36:	e0ac      	b.n	1c92 <__aeabi_dadd+0x5d2>
    1b38:	2340      	movs	r3, #64	; 0x40
    1b3a:	465f      	mov	r7, fp
    1b3c:	1bdb      	subs	r3, r3, r7
    1b3e:	4098      	lsls	r0, r3
    1b40:	4302      	orrs	r2, r0
    1b42:	1e50      	subs	r0, r2, #1
    1b44:	4182      	sbcs	r2, r0
    1b46:	4663      	mov	r3, ip
    1b48:	4313      	orrs	r3, r2
    1b4a:	001a      	movs	r2, r3
    1b4c:	2000      	movs	r0, #0
    1b4e:	e698      	b.n	1882 <__aeabi_dadd+0x1c2>
    1b50:	4c6f      	ldr	r4, [pc, #444]	; (1d10 <__aeabi_dadd+0x650>)
    1b52:	45a4      	cmp	ip, r4
    1b54:	d000      	beq.n	1b58 <__aeabi_dadd+0x498>
    1b56:	e757      	b.n	1a08 <__aeabi_dadd+0x348>
    1b58:	0001      	movs	r1, r0
    1b5a:	0015      	movs	r5, r2
    1b5c:	4664      	mov	r4, ip
    1b5e:	469a      	mov	sl, r3
    1b60:	e5d7      	b.n	1712 <__aeabi_dadd+0x52>
    1b62:	2c00      	cmp	r4, #0
    1b64:	d139      	bne.n	1bda <__aeabi_dadd+0x51a>
    1b66:	000c      	movs	r4, r1
    1b68:	432c      	orrs	r4, r5
    1b6a:	d06e      	beq.n	1c4a <__aeabi_dadd+0x58a>
    1b6c:	43db      	mvns	r3, r3
    1b6e:	2b00      	cmp	r3, #0
    1b70:	d01a      	beq.n	1ba8 <__aeabi_dadd+0x4e8>
    1b72:	4c67      	ldr	r4, [pc, #412]	; (1d10 <__aeabi_dadd+0x650>)
    1b74:	45a4      	cmp	ip, r4
    1b76:	d068      	beq.n	1c4a <__aeabi_dadd+0x58a>
    1b78:	2b38      	cmp	r3, #56	; 0x38
    1b7a:	dd00      	ble.n	1b7e <__aeabi_dadd+0x4be>
    1b7c:	e0a4      	b.n	1cc8 <__aeabi_dadd+0x608>
    1b7e:	2b1f      	cmp	r3, #31
    1b80:	dd00      	ble.n	1b84 <__aeabi_dadd+0x4c4>
    1b82:	e0ae      	b.n	1ce2 <__aeabi_dadd+0x622>
    1b84:	2420      	movs	r4, #32
    1b86:	000f      	movs	r7, r1
    1b88:	1ae4      	subs	r4, r4, r3
    1b8a:	40a7      	lsls	r7, r4
    1b8c:	46b9      	mov	r9, r7
    1b8e:	002f      	movs	r7, r5
    1b90:	40df      	lsrs	r7, r3
    1b92:	46b8      	mov	r8, r7
    1b94:	46a3      	mov	fp, r4
    1b96:	464f      	mov	r7, r9
    1b98:	4644      	mov	r4, r8
    1b9a:	4327      	orrs	r7, r4
    1b9c:	465c      	mov	r4, fp
    1b9e:	40a5      	lsls	r5, r4
    1ba0:	1e6c      	subs	r4, r5, #1
    1ba2:	41a5      	sbcs	r5, r4
    1ba4:	40d9      	lsrs	r1, r3
    1ba6:	433d      	orrs	r5, r7
    1ba8:	18ad      	adds	r5, r5, r2
    1baa:	4295      	cmp	r5, r2
    1bac:	419b      	sbcs	r3, r3
    1bae:	1809      	adds	r1, r1, r0
    1bb0:	425b      	negs	r3, r3
    1bb2:	1859      	adds	r1, r3, r1
    1bb4:	4664      	mov	r4, ip
    1bb6:	e66b      	b.n	1890 <__aeabi_dadd+0x1d0>
    1bb8:	000c      	movs	r4, r1
    1bba:	432c      	orrs	r4, r5
    1bbc:	d115      	bne.n	1bea <__aeabi_dadd+0x52a>
    1bbe:	0001      	movs	r1, r0
    1bc0:	4311      	orrs	r1, r2
    1bc2:	d07b      	beq.n	1cbc <__aeabi_dadd+0x5fc>
    1bc4:	0001      	movs	r1, r0
    1bc6:	0015      	movs	r5, r2
    1bc8:	469a      	mov	sl, r3
    1bca:	4c51      	ldr	r4, [pc, #324]	; (1d10 <__aeabi_dadd+0x650>)
    1bcc:	e5a1      	b.n	1712 <__aeabi_dadd+0x52>
    1bce:	430d      	orrs	r5, r1
    1bd0:	1e69      	subs	r1, r5, #1
    1bd2:	418d      	sbcs	r5, r1
    1bd4:	2100      	movs	r1, #0
    1bd6:	b2ec      	uxtb	r4, r5
    1bd8:	e72d      	b.n	1a36 <__aeabi_dadd+0x376>
    1bda:	4c4d      	ldr	r4, [pc, #308]	; (1d10 <__aeabi_dadd+0x650>)
    1bdc:	45a4      	cmp	ip, r4
    1bde:	d034      	beq.n	1c4a <__aeabi_dadd+0x58a>
    1be0:	2480      	movs	r4, #128	; 0x80
    1be2:	0424      	lsls	r4, r4, #16
    1be4:	425b      	negs	r3, r3
    1be6:	4321      	orrs	r1, r4
    1be8:	e7c6      	b.n	1b78 <__aeabi_dadd+0x4b8>
    1bea:	0004      	movs	r4, r0
    1bec:	4314      	orrs	r4, r2
    1bee:	d04e      	beq.n	1c8e <__aeabi_dadd+0x5ce>
    1bf0:	08ed      	lsrs	r5, r5, #3
    1bf2:	074c      	lsls	r4, r1, #29
    1bf4:	432c      	orrs	r4, r5
    1bf6:	2580      	movs	r5, #128	; 0x80
    1bf8:	08c9      	lsrs	r1, r1, #3
    1bfa:	032d      	lsls	r5, r5, #12
    1bfc:	4229      	tst	r1, r5
    1bfe:	d008      	beq.n	1c12 <__aeabi_dadd+0x552>
    1c00:	08c6      	lsrs	r6, r0, #3
    1c02:	422e      	tst	r6, r5
    1c04:	d105      	bne.n	1c12 <__aeabi_dadd+0x552>
    1c06:	08d2      	lsrs	r2, r2, #3
    1c08:	0741      	lsls	r1, r0, #29
    1c0a:	4311      	orrs	r1, r2
    1c0c:	000c      	movs	r4, r1
    1c0e:	469a      	mov	sl, r3
    1c10:	0031      	movs	r1, r6
    1c12:	0f62      	lsrs	r2, r4, #29
    1c14:	00c9      	lsls	r1, r1, #3
    1c16:	00e5      	lsls	r5, r4, #3
    1c18:	4311      	orrs	r1, r2
    1c1a:	4c3d      	ldr	r4, [pc, #244]	; (1d10 <__aeabi_dadd+0x650>)
    1c1c:	e579      	b.n	1712 <__aeabi_dadd+0x52>
    1c1e:	0006      	movs	r6, r0
    1c20:	4316      	orrs	r6, r2
    1c22:	d100      	bne.n	1c26 <__aeabi_dadd+0x566>
    1c24:	e575      	b.n	1712 <__aeabi_dadd+0x52>
    1c26:	1aae      	subs	r6, r5, r2
    1c28:	46b0      	mov	r8, r6
    1c2a:	4545      	cmp	r5, r8
    1c2c:	41bf      	sbcs	r7, r7
    1c2e:	1a0e      	subs	r6, r1, r0
    1c30:	427f      	negs	r7, r7
    1c32:	1bf6      	subs	r6, r6, r7
    1c34:	0237      	lsls	r7, r6, #8
    1c36:	d400      	bmi.n	1c3a <__aeabi_dadd+0x57a>
    1c38:	e5f4      	b.n	1824 <__aeabi_dadd+0x164>
    1c3a:	1b55      	subs	r5, r2, r5
    1c3c:	42aa      	cmp	r2, r5
    1c3e:	41b6      	sbcs	r6, r6
    1c40:	1a41      	subs	r1, r0, r1
    1c42:	4276      	negs	r6, r6
    1c44:	1b89      	subs	r1, r1, r6
    1c46:	469a      	mov	sl, r3
    1c48:	e563      	b.n	1712 <__aeabi_dadd+0x52>
    1c4a:	0001      	movs	r1, r0
    1c4c:	0015      	movs	r5, r2
    1c4e:	4664      	mov	r4, ip
    1c50:	e55f      	b.n	1712 <__aeabi_dadd+0x52>
    1c52:	2200      	movs	r2, #0
    1c54:	2500      	movs	r5, #0
    1c56:	e57b      	b.n	1750 <__aeabi_dadd+0x90>
    1c58:	2b00      	cmp	r3, #0
    1c5a:	d03b      	beq.n	1cd4 <__aeabi_dadd+0x614>
    1c5c:	0003      	movs	r3, r0
    1c5e:	4313      	orrs	r3, r2
    1c60:	d015      	beq.n	1c8e <__aeabi_dadd+0x5ce>
    1c62:	08ed      	lsrs	r5, r5, #3
    1c64:	074b      	lsls	r3, r1, #29
    1c66:	432b      	orrs	r3, r5
    1c68:	2580      	movs	r5, #128	; 0x80
    1c6a:	08c9      	lsrs	r1, r1, #3
    1c6c:	032d      	lsls	r5, r5, #12
    1c6e:	4229      	tst	r1, r5
    1c70:	d007      	beq.n	1c82 <__aeabi_dadd+0x5c2>
    1c72:	08c4      	lsrs	r4, r0, #3
    1c74:	422c      	tst	r4, r5
    1c76:	d104      	bne.n	1c82 <__aeabi_dadd+0x5c2>
    1c78:	0741      	lsls	r1, r0, #29
    1c7a:	000b      	movs	r3, r1
    1c7c:	0021      	movs	r1, r4
    1c7e:	08d2      	lsrs	r2, r2, #3
    1c80:	4313      	orrs	r3, r2
    1c82:	00c9      	lsls	r1, r1, #3
    1c84:	0f5a      	lsrs	r2, r3, #29
    1c86:	4311      	orrs	r1, r2
    1c88:	00dd      	lsls	r5, r3, #3
    1c8a:	4c21      	ldr	r4, [pc, #132]	; (1d10 <__aeabi_dadd+0x650>)
    1c8c:	e541      	b.n	1712 <__aeabi_dadd+0x52>
    1c8e:	4c20      	ldr	r4, [pc, #128]	; (1d10 <__aeabi_dadd+0x650>)
    1c90:	e53f      	b.n	1712 <__aeabi_dadd+0x52>
    1c92:	2000      	movs	r0, #0
    1c94:	e754      	b.n	1b40 <__aeabi_dadd+0x480>
    1c96:	2600      	movs	r6, #0
    1c98:	2500      	movs	r5, #0
    1c9a:	e5d1      	b.n	1840 <__aeabi_dadd+0x180>
    1c9c:	0034      	movs	r4, r6
    1c9e:	000f      	movs	r7, r1
    1ca0:	3c20      	subs	r4, #32
    1ca2:	40e7      	lsrs	r7, r4
    1ca4:	003c      	movs	r4, r7
    1ca6:	2e20      	cmp	r6, #32
    1ca8:	d02b      	beq.n	1d02 <__aeabi_dadd+0x642>
    1caa:	2740      	movs	r7, #64	; 0x40
    1cac:	1bbe      	subs	r6, r7, r6
    1cae:	40b1      	lsls	r1, r6
    1cb0:	430d      	orrs	r5, r1
    1cb2:	1e69      	subs	r1, r5, #1
    1cb4:	418d      	sbcs	r5, r1
    1cb6:	2100      	movs	r1, #0
    1cb8:	432c      	orrs	r4, r5
    1cba:	e6bc      	b.n	1a36 <__aeabi_dadd+0x376>
    1cbc:	2180      	movs	r1, #128	; 0x80
    1cbe:	2600      	movs	r6, #0
    1cc0:	0309      	lsls	r1, r1, #12
    1cc2:	4c13      	ldr	r4, [pc, #76]	; (1d10 <__aeabi_dadd+0x650>)
    1cc4:	2500      	movs	r5, #0
    1cc6:	e5bb      	b.n	1840 <__aeabi_dadd+0x180>
    1cc8:	430d      	orrs	r5, r1
    1cca:	1e69      	subs	r1, r5, #1
    1ccc:	418d      	sbcs	r5, r1
    1cce:	2100      	movs	r1, #0
    1cd0:	b2ed      	uxtb	r5, r5
    1cd2:	e769      	b.n	1ba8 <__aeabi_dadd+0x4e8>
    1cd4:	0001      	movs	r1, r0
    1cd6:	0015      	movs	r5, r2
    1cd8:	4c0d      	ldr	r4, [pc, #52]	; (1d10 <__aeabi_dadd+0x650>)
    1cda:	e51a      	b.n	1712 <__aeabi_dadd+0x52>
    1cdc:	0001      	movs	r1, r0
    1cde:	0015      	movs	r5, r2
    1ce0:	e517      	b.n	1712 <__aeabi_dadd+0x52>
    1ce2:	001c      	movs	r4, r3
    1ce4:	000f      	movs	r7, r1
    1ce6:	3c20      	subs	r4, #32
    1ce8:	40e7      	lsrs	r7, r4
    1cea:	003c      	movs	r4, r7
    1cec:	2b20      	cmp	r3, #32
    1cee:	d00c      	beq.n	1d0a <__aeabi_dadd+0x64a>
    1cf0:	2740      	movs	r7, #64	; 0x40
    1cf2:	1afb      	subs	r3, r7, r3
    1cf4:	4099      	lsls	r1, r3
    1cf6:	430d      	orrs	r5, r1
    1cf8:	1e69      	subs	r1, r5, #1
    1cfa:	418d      	sbcs	r5, r1
    1cfc:	2100      	movs	r1, #0
    1cfe:	4325      	orrs	r5, r4
    1d00:	e752      	b.n	1ba8 <__aeabi_dadd+0x4e8>
    1d02:	2100      	movs	r1, #0
    1d04:	e7d4      	b.n	1cb0 <__aeabi_dadd+0x5f0>
    1d06:	001d      	movs	r5, r3
    1d08:	e592      	b.n	1830 <__aeabi_dadd+0x170>
    1d0a:	2100      	movs	r1, #0
    1d0c:	e7f3      	b.n	1cf6 <__aeabi_dadd+0x636>
    1d0e:	46c0      	nop			; (mov r8, r8)
    1d10:	000007ff 	.word	0x000007ff
    1d14:	ff7fffff 	.word	0xff7fffff

00001d18 <__aeabi_dmul>:
    1d18:	b5f0      	push	{r4, r5, r6, r7, lr}
    1d1a:	465f      	mov	r7, fp
    1d1c:	4656      	mov	r6, sl
    1d1e:	464d      	mov	r5, r9
    1d20:	4644      	mov	r4, r8
    1d22:	b4f0      	push	{r4, r5, r6, r7}
    1d24:	030d      	lsls	r5, r1, #12
    1d26:	4699      	mov	r9, r3
    1d28:	004e      	lsls	r6, r1, #1
    1d2a:	0b2b      	lsrs	r3, r5, #12
    1d2c:	b087      	sub	sp, #28
    1d2e:	0007      	movs	r7, r0
    1d30:	4692      	mov	sl, r2
    1d32:	4680      	mov	r8, r0
    1d34:	469b      	mov	fp, r3
    1d36:	0d76      	lsrs	r6, r6, #21
    1d38:	0fcc      	lsrs	r4, r1, #31
    1d3a:	2e00      	cmp	r6, #0
    1d3c:	d069      	beq.n	1e12 <__aeabi_dmul+0xfa>
    1d3e:	4b6d      	ldr	r3, [pc, #436]	; (1ef4 <__aeabi_dmul+0x1dc>)
    1d40:	429e      	cmp	r6, r3
    1d42:	d035      	beq.n	1db0 <__aeabi_dmul+0x98>
    1d44:	465b      	mov	r3, fp
    1d46:	2280      	movs	r2, #128	; 0x80
    1d48:	00dd      	lsls	r5, r3, #3
    1d4a:	0412      	lsls	r2, r2, #16
    1d4c:	0f43      	lsrs	r3, r0, #29
    1d4e:	4313      	orrs	r3, r2
    1d50:	432b      	orrs	r3, r5
    1d52:	469b      	mov	fp, r3
    1d54:	00c3      	lsls	r3, r0, #3
    1d56:	4698      	mov	r8, r3
    1d58:	4b67      	ldr	r3, [pc, #412]	; (1ef8 <__aeabi_dmul+0x1e0>)
    1d5a:	2700      	movs	r7, #0
    1d5c:	469c      	mov	ip, r3
    1d5e:	2300      	movs	r3, #0
    1d60:	4466      	add	r6, ip
    1d62:	9301      	str	r3, [sp, #4]
    1d64:	464a      	mov	r2, r9
    1d66:	0315      	lsls	r5, r2, #12
    1d68:	0050      	lsls	r0, r2, #1
    1d6a:	0fd2      	lsrs	r2, r2, #31
    1d6c:	4653      	mov	r3, sl
    1d6e:	0b2d      	lsrs	r5, r5, #12
    1d70:	0d40      	lsrs	r0, r0, #21
    1d72:	4691      	mov	r9, r2
    1d74:	d100      	bne.n	1d78 <__aeabi_dmul+0x60>
    1d76:	e076      	b.n	1e66 <__aeabi_dmul+0x14e>
    1d78:	4a5e      	ldr	r2, [pc, #376]	; (1ef4 <__aeabi_dmul+0x1dc>)
    1d7a:	4290      	cmp	r0, r2
    1d7c:	d06c      	beq.n	1e58 <__aeabi_dmul+0x140>
    1d7e:	2280      	movs	r2, #128	; 0x80
    1d80:	0f5b      	lsrs	r3, r3, #29
    1d82:	0412      	lsls	r2, r2, #16
    1d84:	4313      	orrs	r3, r2
    1d86:	4a5c      	ldr	r2, [pc, #368]	; (1ef8 <__aeabi_dmul+0x1e0>)
    1d88:	00ed      	lsls	r5, r5, #3
    1d8a:	4694      	mov	ip, r2
    1d8c:	431d      	orrs	r5, r3
    1d8e:	4653      	mov	r3, sl
    1d90:	2200      	movs	r2, #0
    1d92:	00db      	lsls	r3, r3, #3
    1d94:	4460      	add	r0, ip
    1d96:	4649      	mov	r1, r9
    1d98:	1836      	adds	r6, r6, r0
    1d9a:	1c70      	adds	r0, r6, #1
    1d9c:	4061      	eors	r1, r4
    1d9e:	9002      	str	r0, [sp, #8]
    1da0:	4317      	orrs	r7, r2
    1da2:	2f0f      	cmp	r7, #15
    1da4:	d900      	bls.n	1da8 <__aeabi_dmul+0x90>
    1da6:	e0af      	b.n	1f08 <__aeabi_dmul+0x1f0>
    1da8:	4854      	ldr	r0, [pc, #336]	; (1efc <__aeabi_dmul+0x1e4>)
    1daa:	00bf      	lsls	r7, r7, #2
    1dac:	59c7      	ldr	r7, [r0, r7]
    1dae:	46bf      	mov	pc, r7
    1db0:	465b      	mov	r3, fp
    1db2:	431f      	orrs	r7, r3
    1db4:	d000      	beq.n	1db8 <__aeabi_dmul+0xa0>
    1db6:	e088      	b.n	1eca <__aeabi_dmul+0x1b2>
    1db8:	2300      	movs	r3, #0
    1dba:	469b      	mov	fp, r3
    1dbc:	4698      	mov	r8, r3
    1dbe:	3302      	adds	r3, #2
    1dc0:	2708      	movs	r7, #8
    1dc2:	9301      	str	r3, [sp, #4]
    1dc4:	e7ce      	b.n	1d64 <__aeabi_dmul+0x4c>
    1dc6:	4649      	mov	r1, r9
    1dc8:	2a02      	cmp	r2, #2
    1dca:	d06a      	beq.n	1ea2 <__aeabi_dmul+0x18a>
    1dcc:	2a03      	cmp	r2, #3
    1dce:	d100      	bne.n	1dd2 <__aeabi_dmul+0xba>
    1dd0:	e209      	b.n	21e6 <STACK_SIZE+0x1e6>
    1dd2:	2a01      	cmp	r2, #1
    1dd4:	d000      	beq.n	1dd8 <__aeabi_dmul+0xc0>
    1dd6:	e1bb      	b.n	2150 <STACK_SIZE+0x150>
    1dd8:	4011      	ands	r1, r2
    1dda:	2200      	movs	r2, #0
    1ddc:	2300      	movs	r3, #0
    1dde:	2500      	movs	r5, #0
    1de0:	4690      	mov	r8, r2
    1de2:	b2cc      	uxtb	r4, r1
    1de4:	2100      	movs	r1, #0
    1de6:	032d      	lsls	r5, r5, #12
    1de8:	0d0a      	lsrs	r2, r1, #20
    1dea:	0512      	lsls	r2, r2, #20
    1dec:	0b2d      	lsrs	r5, r5, #12
    1dee:	4315      	orrs	r5, r2
    1df0:	4a43      	ldr	r2, [pc, #268]	; (1f00 <__aeabi_dmul+0x1e8>)
    1df2:	051b      	lsls	r3, r3, #20
    1df4:	4015      	ands	r5, r2
    1df6:	431d      	orrs	r5, r3
    1df8:	006d      	lsls	r5, r5, #1
    1dfa:	07e4      	lsls	r4, r4, #31
    1dfc:	086d      	lsrs	r5, r5, #1
    1dfe:	4325      	orrs	r5, r4
    1e00:	4640      	mov	r0, r8
    1e02:	0029      	movs	r1, r5
    1e04:	b007      	add	sp, #28
    1e06:	bc3c      	pop	{r2, r3, r4, r5}
    1e08:	4690      	mov	r8, r2
    1e0a:	4699      	mov	r9, r3
    1e0c:	46a2      	mov	sl, r4
    1e0e:	46ab      	mov	fp, r5
    1e10:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1e12:	4303      	orrs	r3, r0
    1e14:	d052      	beq.n	1ebc <__aeabi_dmul+0x1a4>
    1e16:	465b      	mov	r3, fp
    1e18:	2b00      	cmp	r3, #0
    1e1a:	d100      	bne.n	1e1e <__aeabi_dmul+0x106>
    1e1c:	e18a      	b.n	2134 <STACK_SIZE+0x134>
    1e1e:	4658      	mov	r0, fp
    1e20:	f000 fb4e 	bl	24c0 <__clzsi2>
    1e24:	0003      	movs	r3, r0
    1e26:	3b0b      	subs	r3, #11
    1e28:	2b1c      	cmp	r3, #28
    1e2a:	dd00      	ble.n	1e2e <__aeabi_dmul+0x116>
    1e2c:	e17b      	b.n	2126 <STACK_SIZE+0x126>
    1e2e:	221d      	movs	r2, #29
    1e30:	1ad3      	subs	r3, r2, r3
    1e32:	003a      	movs	r2, r7
    1e34:	0001      	movs	r1, r0
    1e36:	465d      	mov	r5, fp
    1e38:	40da      	lsrs	r2, r3
    1e3a:	3908      	subs	r1, #8
    1e3c:	408d      	lsls	r5, r1
    1e3e:	0013      	movs	r3, r2
    1e40:	408f      	lsls	r7, r1
    1e42:	432b      	orrs	r3, r5
    1e44:	469b      	mov	fp, r3
    1e46:	46b8      	mov	r8, r7
    1e48:	4b2e      	ldr	r3, [pc, #184]	; (1f04 <__aeabi_dmul+0x1ec>)
    1e4a:	2700      	movs	r7, #0
    1e4c:	469c      	mov	ip, r3
    1e4e:	2300      	movs	r3, #0
    1e50:	4460      	add	r0, ip
    1e52:	4246      	negs	r6, r0
    1e54:	9301      	str	r3, [sp, #4]
    1e56:	e785      	b.n	1d64 <__aeabi_dmul+0x4c>
    1e58:	4652      	mov	r2, sl
    1e5a:	432a      	orrs	r2, r5
    1e5c:	d12c      	bne.n	1eb8 <__aeabi_dmul+0x1a0>
    1e5e:	2500      	movs	r5, #0
    1e60:	2300      	movs	r3, #0
    1e62:	2202      	movs	r2, #2
    1e64:	e797      	b.n	1d96 <__aeabi_dmul+0x7e>
    1e66:	4652      	mov	r2, sl
    1e68:	432a      	orrs	r2, r5
    1e6a:	d021      	beq.n	1eb0 <__aeabi_dmul+0x198>
    1e6c:	2d00      	cmp	r5, #0
    1e6e:	d100      	bne.n	1e72 <__aeabi_dmul+0x15a>
    1e70:	e154      	b.n	211c <STACK_SIZE+0x11c>
    1e72:	0028      	movs	r0, r5
    1e74:	f000 fb24 	bl	24c0 <__clzsi2>
    1e78:	0003      	movs	r3, r0
    1e7a:	3b0b      	subs	r3, #11
    1e7c:	2b1c      	cmp	r3, #28
    1e7e:	dd00      	ble.n	1e82 <__aeabi_dmul+0x16a>
    1e80:	e146      	b.n	2110 <STACK_SIZE+0x110>
    1e82:	211d      	movs	r1, #29
    1e84:	1acb      	subs	r3, r1, r3
    1e86:	4651      	mov	r1, sl
    1e88:	0002      	movs	r2, r0
    1e8a:	40d9      	lsrs	r1, r3
    1e8c:	4653      	mov	r3, sl
    1e8e:	3a08      	subs	r2, #8
    1e90:	4095      	lsls	r5, r2
    1e92:	4093      	lsls	r3, r2
    1e94:	430d      	orrs	r5, r1
    1e96:	4a1b      	ldr	r2, [pc, #108]	; (1f04 <__aeabi_dmul+0x1ec>)
    1e98:	4694      	mov	ip, r2
    1e9a:	4460      	add	r0, ip
    1e9c:	4240      	negs	r0, r0
    1e9e:	2200      	movs	r2, #0
    1ea0:	e779      	b.n	1d96 <__aeabi_dmul+0x7e>
    1ea2:	2401      	movs	r4, #1
    1ea4:	2200      	movs	r2, #0
    1ea6:	400c      	ands	r4, r1
    1ea8:	4b12      	ldr	r3, [pc, #72]	; (1ef4 <__aeabi_dmul+0x1dc>)
    1eaa:	2500      	movs	r5, #0
    1eac:	4690      	mov	r8, r2
    1eae:	e799      	b.n	1de4 <__aeabi_dmul+0xcc>
    1eb0:	2500      	movs	r5, #0
    1eb2:	2300      	movs	r3, #0
    1eb4:	2201      	movs	r2, #1
    1eb6:	e76e      	b.n	1d96 <__aeabi_dmul+0x7e>
    1eb8:	2203      	movs	r2, #3
    1eba:	e76c      	b.n	1d96 <__aeabi_dmul+0x7e>
    1ebc:	2300      	movs	r3, #0
    1ebe:	469b      	mov	fp, r3
    1ec0:	4698      	mov	r8, r3
    1ec2:	3301      	adds	r3, #1
    1ec4:	2704      	movs	r7, #4
    1ec6:	9301      	str	r3, [sp, #4]
    1ec8:	e74c      	b.n	1d64 <__aeabi_dmul+0x4c>
    1eca:	2303      	movs	r3, #3
    1ecc:	270c      	movs	r7, #12
    1ece:	9301      	str	r3, [sp, #4]
    1ed0:	e748      	b.n	1d64 <__aeabi_dmul+0x4c>
    1ed2:	2300      	movs	r3, #0
    1ed4:	2580      	movs	r5, #128	; 0x80
    1ed6:	4698      	mov	r8, r3
    1ed8:	2400      	movs	r4, #0
    1eda:	032d      	lsls	r5, r5, #12
    1edc:	4b05      	ldr	r3, [pc, #20]	; (1ef4 <__aeabi_dmul+0x1dc>)
    1ede:	e781      	b.n	1de4 <__aeabi_dmul+0xcc>
    1ee0:	465d      	mov	r5, fp
    1ee2:	4643      	mov	r3, r8
    1ee4:	9a01      	ldr	r2, [sp, #4]
    1ee6:	e76f      	b.n	1dc8 <__aeabi_dmul+0xb0>
    1ee8:	465d      	mov	r5, fp
    1eea:	4643      	mov	r3, r8
    1eec:	0021      	movs	r1, r4
    1eee:	9a01      	ldr	r2, [sp, #4]
    1ef0:	e76a      	b.n	1dc8 <__aeabi_dmul+0xb0>
    1ef2:	46c0      	nop			; (mov r8, r8)
    1ef4:	000007ff 	.word	0x000007ff
    1ef8:	fffffc01 	.word	0xfffffc01
    1efc:	0000286c 	.word	0x0000286c
    1f00:	800fffff 	.word	0x800fffff
    1f04:	000003f3 	.word	0x000003f3
    1f08:	4642      	mov	r2, r8
    1f0a:	0c12      	lsrs	r2, r2, #16
    1f0c:	4691      	mov	r9, r2
    1f0e:	0c1a      	lsrs	r2, r3, #16
    1f10:	4694      	mov	ip, r2
    1f12:	4642      	mov	r2, r8
    1f14:	0417      	lsls	r7, r2, #16
    1f16:	464a      	mov	r2, r9
    1f18:	041b      	lsls	r3, r3, #16
    1f1a:	0c1b      	lsrs	r3, r3, #16
    1f1c:	435a      	muls	r2, r3
    1f1e:	4660      	mov	r0, ip
    1f20:	4690      	mov	r8, r2
    1f22:	464a      	mov	r2, r9
    1f24:	4342      	muls	r2, r0
    1f26:	0010      	movs	r0, r2
    1f28:	9203      	str	r2, [sp, #12]
    1f2a:	4662      	mov	r2, ip
    1f2c:	001c      	movs	r4, r3
    1f2e:	0c3f      	lsrs	r7, r7, #16
    1f30:	437a      	muls	r2, r7
    1f32:	437c      	muls	r4, r7
    1f34:	4442      	add	r2, r8
    1f36:	9201      	str	r2, [sp, #4]
    1f38:	0c22      	lsrs	r2, r4, #16
    1f3a:	4692      	mov	sl, r2
    1f3c:	9a01      	ldr	r2, [sp, #4]
    1f3e:	4452      	add	r2, sl
    1f40:	4590      	cmp	r8, r2
    1f42:	d906      	bls.n	1f52 <__aeabi_dmul+0x23a>
    1f44:	4682      	mov	sl, r0
    1f46:	2080      	movs	r0, #128	; 0x80
    1f48:	0240      	lsls	r0, r0, #9
    1f4a:	4680      	mov	r8, r0
    1f4c:	44c2      	add	sl, r8
    1f4e:	4650      	mov	r0, sl
    1f50:	9003      	str	r0, [sp, #12]
    1f52:	0c10      	lsrs	r0, r2, #16
    1f54:	9004      	str	r0, [sp, #16]
    1f56:	4648      	mov	r0, r9
    1f58:	0424      	lsls	r4, r4, #16
    1f5a:	0c24      	lsrs	r4, r4, #16
    1f5c:	0412      	lsls	r2, r2, #16
    1f5e:	1912      	adds	r2, r2, r4
    1f60:	9205      	str	r2, [sp, #20]
    1f62:	0c2a      	lsrs	r2, r5, #16
    1f64:	042d      	lsls	r5, r5, #16
    1f66:	0c2d      	lsrs	r5, r5, #16
    1f68:	4368      	muls	r0, r5
    1f6a:	002c      	movs	r4, r5
    1f6c:	4682      	mov	sl, r0
    1f6e:	4648      	mov	r0, r9
    1f70:	437c      	muls	r4, r7
    1f72:	4350      	muls	r0, r2
    1f74:	4681      	mov	r9, r0
    1f76:	0c20      	lsrs	r0, r4, #16
    1f78:	4680      	mov	r8, r0
    1f7a:	4357      	muls	r7, r2
    1f7c:	4457      	add	r7, sl
    1f7e:	4447      	add	r7, r8
    1f80:	45ba      	cmp	sl, r7
    1f82:	d903      	bls.n	1f8c <__aeabi_dmul+0x274>
    1f84:	2080      	movs	r0, #128	; 0x80
    1f86:	0240      	lsls	r0, r0, #9
    1f88:	4680      	mov	r8, r0
    1f8a:	44c1      	add	r9, r8
    1f8c:	0c38      	lsrs	r0, r7, #16
    1f8e:	043f      	lsls	r7, r7, #16
    1f90:	46b8      	mov	r8, r7
    1f92:	4448      	add	r0, r9
    1f94:	0424      	lsls	r4, r4, #16
    1f96:	0c24      	lsrs	r4, r4, #16
    1f98:	9001      	str	r0, [sp, #4]
    1f9a:	9804      	ldr	r0, [sp, #16]
    1f9c:	44a0      	add	r8, r4
    1f9e:	4440      	add	r0, r8
    1fa0:	9004      	str	r0, [sp, #16]
    1fa2:	4658      	mov	r0, fp
    1fa4:	0c00      	lsrs	r0, r0, #16
    1fa6:	4681      	mov	r9, r0
    1fa8:	4658      	mov	r0, fp
    1faa:	0404      	lsls	r4, r0, #16
    1fac:	0c20      	lsrs	r0, r4, #16
    1fae:	4682      	mov	sl, r0
    1fb0:	0007      	movs	r7, r0
    1fb2:	4648      	mov	r0, r9
    1fb4:	435f      	muls	r7, r3
    1fb6:	464c      	mov	r4, r9
    1fb8:	4343      	muls	r3, r0
    1fba:	4660      	mov	r0, ip
    1fbc:	4360      	muls	r0, r4
    1fbe:	4664      	mov	r4, ip
    1fc0:	4683      	mov	fp, r0
    1fc2:	4650      	mov	r0, sl
    1fc4:	4344      	muls	r4, r0
    1fc6:	0c38      	lsrs	r0, r7, #16
    1fc8:	4684      	mov	ip, r0
    1fca:	18e4      	adds	r4, r4, r3
    1fcc:	4464      	add	r4, ip
    1fce:	42a3      	cmp	r3, r4
    1fd0:	d903      	bls.n	1fda <__aeabi_dmul+0x2c2>
    1fd2:	2380      	movs	r3, #128	; 0x80
    1fd4:	025b      	lsls	r3, r3, #9
    1fd6:	469c      	mov	ip, r3
    1fd8:	44e3      	add	fp, ip
    1fda:	4648      	mov	r0, r9
    1fdc:	043f      	lsls	r7, r7, #16
    1fde:	0c23      	lsrs	r3, r4, #16
    1fe0:	0c3f      	lsrs	r7, r7, #16
    1fe2:	0424      	lsls	r4, r4, #16
    1fe4:	19e4      	adds	r4, r4, r7
    1fe6:	4657      	mov	r7, sl
    1fe8:	4368      	muls	r0, r5
    1fea:	436f      	muls	r7, r5
    1fec:	4684      	mov	ip, r0
    1fee:	464d      	mov	r5, r9
    1ff0:	4650      	mov	r0, sl
    1ff2:	4355      	muls	r5, r2
    1ff4:	4342      	muls	r2, r0
    1ff6:	0c38      	lsrs	r0, r7, #16
    1ff8:	4681      	mov	r9, r0
    1ffa:	4462      	add	r2, ip
    1ffc:	444a      	add	r2, r9
    1ffe:	445b      	add	r3, fp
    2000:	4594      	cmp	ip, r2
    2002:	d903      	bls.n	200c <STACK_SIZE+0xc>
    2004:	2080      	movs	r0, #128	; 0x80
    2006:	0240      	lsls	r0, r0, #9
    2008:	4684      	mov	ip, r0
    200a:	4465      	add	r5, ip
    200c:	9803      	ldr	r0, [sp, #12]
    200e:	043f      	lsls	r7, r7, #16
    2010:	4683      	mov	fp, r0
    2012:	9804      	ldr	r0, [sp, #16]
    2014:	0c3f      	lsrs	r7, r7, #16
    2016:	4684      	mov	ip, r0
    2018:	44e3      	add	fp, ip
    201a:	45c3      	cmp	fp, r8
    201c:	4180      	sbcs	r0, r0
    201e:	4240      	negs	r0, r0
    2020:	4682      	mov	sl, r0
    2022:	0410      	lsls	r0, r2, #16
    2024:	4684      	mov	ip, r0
    2026:	9801      	ldr	r0, [sp, #4]
    2028:	4467      	add	r7, ip
    202a:	4684      	mov	ip, r0
    202c:	4467      	add	r7, ip
    202e:	44a3      	add	fp, r4
    2030:	46bc      	mov	ip, r7
    2032:	45a3      	cmp	fp, r4
    2034:	41a4      	sbcs	r4, r4
    2036:	4699      	mov	r9, r3
    2038:	44d4      	add	ip, sl
    203a:	4264      	negs	r4, r4
    203c:	4287      	cmp	r7, r0
    203e:	41bf      	sbcs	r7, r7
    2040:	45d4      	cmp	ip, sl
    2042:	4180      	sbcs	r0, r0
    2044:	44e1      	add	r9, ip
    2046:	46a0      	mov	r8, r4
    2048:	4599      	cmp	r9, r3
    204a:	419b      	sbcs	r3, r3
    204c:	427f      	negs	r7, r7
    204e:	4240      	negs	r0, r0
    2050:	44c8      	add	r8, r9
    2052:	4307      	orrs	r7, r0
    2054:	0c12      	lsrs	r2, r2, #16
    2056:	18ba      	adds	r2, r7, r2
    2058:	45a0      	cmp	r8, r4
    205a:	41a4      	sbcs	r4, r4
    205c:	425f      	negs	r7, r3
    205e:	003b      	movs	r3, r7
    2060:	4264      	negs	r4, r4
    2062:	4323      	orrs	r3, r4
    2064:	18d7      	adds	r7, r2, r3
    2066:	4643      	mov	r3, r8
    2068:	197d      	adds	r5, r7, r5
    206a:	0ddb      	lsrs	r3, r3, #23
    206c:	026d      	lsls	r5, r5, #9
    206e:	431d      	orrs	r5, r3
    2070:	465b      	mov	r3, fp
    2072:	025a      	lsls	r2, r3, #9
    2074:	9b05      	ldr	r3, [sp, #20]
    2076:	431a      	orrs	r2, r3
    2078:	1e53      	subs	r3, r2, #1
    207a:	419a      	sbcs	r2, r3
    207c:	465b      	mov	r3, fp
    207e:	0ddb      	lsrs	r3, r3, #23
    2080:	431a      	orrs	r2, r3
    2082:	4643      	mov	r3, r8
    2084:	025b      	lsls	r3, r3, #9
    2086:	4313      	orrs	r3, r2
    2088:	01ea      	lsls	r2, r5, #7
    208a:	d507      	bpl.n	209c <STACK_SIZE+0x9c>
    208c:	2201      	movs	r2, #1
    208e:	085c      	lsrs	r4, r3, #1
    2090:	4013      	ands	r3, r2
    2092:	4323      	orrs	r3, r4
    2094:	07ea      	lsls	r2, r5, #31
    2096:	9e02      	ldr	r6, [sp, #8]
    2098:	4313      	orrs	r3, r2
    209a:	086d      	lsrs	r5, r5, #1
    209c:	4a57      	ldr	r2, [pc, #348]	; (21fc <STACK_SIZE+0x1fc>)
    209e:	18b2      	adds	r2, r6, r2
    20a0:	2a00      	cmp	r2, #0
    20a2:	dd4b      	ble.n	213c <STACK_SIZE+0x13c>
    20a4:	0758      	lsls	r0, r3, #29
    20a6:	d009      	beq.n	20bc <STACK_SIZE+0xbc>
    20a8:	200f      	movs	r0, #15
    20aa:	4018      	ands	r0, r3
    20ac:	2804      	cmp	r0, #4
    20ae:	d005      	beq.n	20bc <STACK_SIZE+0xbc>
    20b0:	1d18      	adds	r0, r3, #4
    20b2:	4298      	cmp	r0, r3
    20b4:	419b      	sbcs	r3, r3
    20b6:	425b      	negs	r3, r3
    20b8:	18ed      	adds	r5, r5, r3
    20ba:	0003      	movs	r3, r0
    20bc:	01e8      	lsls	r0, r5, #7
    20be:	d504      	bpl.n	20ca <STACK_SIZE+0xca>
    20c0:	4a4f      	ldr	r2, [pc, #316]	; (2200 <STACK_SIZE+0x200>)
    20c2:	4015      	ands	r5, r2
    20c4:	2280      	movs	r2, #128	; 0x80
    20c6:	00d2      	lsls	r2, r2, #3
    20c8:	18b2      	adds	r2, r6, r2
    20ca:	484e      	ldr	r0, [pc, #312]	; (2204 <STACK_SIZE+0x204>)
    20cc:	4282      	cmp	r2, r0
    20ce:	dd00      	ble.n	20d2 <STACK_SIZE+0xd2>
    20d0:	e6e7      	b.n	1ea2 <__aeabi_dmul+0x18a>
    20d2:	2401      	movs	r4, #1
    20d4:	08db      	lsrs	r3, r3, #3
    20d6:	0768      	lsls	r0, r5, #29
    20d8:	4318      	orrs	r0, r3
    20da:	026d      	lsls	r5, r5, #9
    20dc:	0553      	lsls	r3, r2, #21
    20de:	4680      	mov	r8, r0
    20e0:	0b2d      	lsrs	r5, r5, #12
    20e2:	0d5b      	lsrs	r3, r3, #21
    20e4:	400c      	ands	r4, r1
    20e6:	e67d      	b.n	1de4 <__aeabi_dmul+0xcc>
    20e8:	2280      	movs	r2, #128	; 0x80
    20ea:	4659      	mov	r1, fp
    20ec:	0312      	lsls	r2, r2, #12
    20ee:	4211      	tst	r1, r2
    20f0:	d008      	beq.n	2104 <STACK_SIZE+0x104>
    20f2:	4215      	tst	r5, r2
    20f4:	d106      	bne.n	2104 <STACK_SIZE+0x104>
    20f6:	4315      	orrs	r5, r2
    20f8:	032d      	lsls	r5, r5, #12
    20fa:	4698      	mov	r8, r3
    20fc:	0b2d      	lsrs	r5, r5, #12
    20fe:	464c      	mov	r4, r9
    2100:	4b41      	ldr	r3, [pc, #260]	; (2208 <STACK_SIZE+0x208>)
    2102:	e66f      	b.n	1de4 <__aeabi_dmul+0xcc>
    2104:	465d      	mov	r5, fp
    2106:	4315      	orrs	r5, r2
    2108:	032d      	lsls	r5, r5, #12
    210a:	0b2d      	lsrs	r5, r5, #12
    210c:	4b3e      	ldr	r3, [pc, #248]	; (2208 <STACK_SIZE+0x208>)
    210e:	e669      	b.n	1de4 <__aeabi_dmul+0xcc>
    2110:	0003      	movs	r3, r0
    2112:	4655      	mov	r5, sl
    2114:	3b28      	subs	r3, #40	; 0x28
    2116:	409d      	lsls	r5, r3
    2118:	2300      	movs	r3, #0
    211a:	e6bc      	b.n	1e96 <__aeabi_dmul+0x17e>
    211c:	4650      	mov	r0, sl
    211e:	f000 f9cf 	bl	24c0 <__clzsi2>
    2122:	3020      	adds	r0, #32
    2124:	e6a8      	b.n	1e78 <__aeabi_dmul+0x160>
    2126:	0003      	movs	r3, r0
    2128:	3b28      	subs	r3, #40	; 0x28
    212a:	409f      	lsls	r7, r3
    212c:	2300      	movs	r3, #0
    212e:	46bb      	mov	fp, r7
    2130:	4698      	mov	r8, r3
    2132:	e689      	b.n	1e48 <__aeabi_dmul+0x130>
    2134:	f000 f9c4 	bl	24c0 <__clzsi2>
    2138:	3020      	adds	r0, #32
    213a:	e673      	b.n	1e24 <__aeabi_dmul+0x10c>
    213c:	2401      	movs	r4, #1
    213e:	1aa6      	subs	r6, r4, r2
    2140:	2e38      	cmp	r6, #56	; 0x38
    2142:	dd07      	ble.n	2154 <STACK_SIZE+0x154>
    2144:	2200      	movs	r2, #0
    2146:	400c      	ands	r4, r1
    2148:	2300      	movs	r3, #0
    214a:	2500      	movs	r5, #0
    214c:	4690      	mov	r8, r2
    214e:	e649      	b.n	1de4 <__aeabi_dmul+0xcc>
    2150:	9e02      	ldr	r6, [sp, #8]
    2152:	e7a3      	b.n	209c <STACK_SIZE+0x9c>
    2154:	2e1f      	cmp	r6, #31
    2156:	dc20      	bgt.n	219a <STACK_SIZE+0x19a>
    2158:	2220      	movs	r2, #32
    215a:	002c      	movs	r4, r5
    215c:	0018      	movs	r0, r3
    215e:	1b92      	subs	r2, r2, r6
    2160:	40f0      	lsrs	r0, r6
    2162:	4094      	lsls	r4, r2
    2164:	4093      	lsls	r3, r2
    2166:	4304      	orrs	r4, r0
    2168:	1e58      	subs	r0, r3, #1
    216a:	4183      	sbcs	r3, r0
    216c:	431c      	orrs	r4, r3
    216e:	40f5      	lsrs	r5, r6
    2170:	0763      	lsls	r3, r4, #29
    2172:	d009      	beq.n	2188 <STACK_SIZE+0x188>
    2174:	230f      	movs	r3, #15
    2176:	4023      	ands	r3, r4
    2178:	2b04      	cmp	r3, #4
    217a:	d005      	beq.n	2188 <STACK_SIZE+0x188>
    217c:	0023      	movs	r3, r4
    217e:	1d1c      	adds	r4, r3, #4
    2180:	429c      	cmp	r4, r3
    2182:	4192      	sbcs	r2, r2
    2184:	4252      	negs	r2, r2
    2186:	18ad      	adds	r5, r5, r2
    2188:	022b      	lsls	r3, r5, #8
    218a:	d51f      	bpl.n	21cc <STACK_SIZE+0x1cc>
    218c:	2401      	movs	r4, #1
    218e:	2200      	movs	r2, #0
    2190:	400c      	ands	r4, r1
    2192:	2301      	movs	r3, #1
    2194:	2500      	movs	r5, #0
    2196:	4690      	mov	r8, r2
    2198:	e624      	b.n	1de4 <__aeabi_dmul+0xcc>
    219a:	201f      	movs	r0, #31
    219c:	002c      	movs	r4, r5
    219e:	4240      	negs	r0, r0
    21a0:	1a82      	subs	r2, r0, r2
    21a2:	40d4      	lsrs	r4, r2
    21a4:	2e20      	cmp	r6, #32
    21a6:	d01c      	beq.n	21e2 <STACK_SIZE+0x1e2>
    21a8:	2240      	movs	r2, #64	; 0x40
    21aa:	1b96      	subs	r6, r2, r6
    21ac:	40b5      	lsls	r5, r6
    21ae:	432b      	orrs	r3, r5
    21b0:	1e58      	subs	r0, r3, #1
    21b2:	4183      	sbcs	r3, r0
    21b4:	2007      	movs	r0, #7
    21b6:	4323      	orrs	r3, r4
    21b8:	4018      	ands	r0, r3
    21ba:	2500      	movs	r5, #0
    21bc:	2800      	cmp	r0, #0
    21be:	d009      	beq.n	21d4 <STACK_SIZE+0x1d4>
    21c0:	220f      	movs	r2, #15
    21c2:	2500      	movs	r5, #0
    21c4:	401a      	ands	r2, r3
    21c6:	001c      	movs	r4, r3
    21c8:	2a04      	cmp	r2, #4
    21ca:	d1d8      	bne.n	217e <STACK_SIZE+0x17e>
    21cc:	0023      	movs	r3, r4
    21ce:	0768      	lsls	r0, r5, #29
    21d0:	026d      	lsls	r5, r5, #9
    21d2:	0b2d      	lsrs	r5, r5, #12
    21d4:	2401      	movs	r4, #1
    21d6:	08db      	lsrs	r3, r3, #3
    21d8:	4303      	orrs	r3, r0
    21da:	4698      	mov	r8, r3
    21dc:	400c      	ands	r4, r1
    21de:	2300      	movs	r3, #0
    21e0:	e600      	b.n	1de4 <__aeabi_dmul+0xcc>
    21e2:	2500      	movs	r5, #0
    21e4:	e7e3      	b.n	21ae <STACK_SIZE+0x1ae>
    21e6:	2280      	movs	r2, #128	; 0x80
    21e8:	2401      	movs	r4, #1
    21ea:	0312      	lsls	r2, r2, #12
    21ec:	4315      	orrs	r5, r2
    21ee:	032d      	lsls	r5, r5, #12
    21f0:	4698      	mov	r8, r3
    21f2:	0b2d      	lsrs	r5, r5, #12
    21f4:	400c      	ands	r4, r1
    21f6:	4b04      	ldr	r3, [pc, #16]	; (2208 <STACK_SIZE+0x208>)
    21f8:	e5f4      	b.n	1de4 <__aeabi_dmul+0xcc>
    21fa:	46c0      	nop			; (mov r8, r8)
    21fc:	000003ff 	.word	0x000003ff
    2200:	feffffff 	.word	0xfeffffff
    2204:	000007fe 	.word	0x000007fe
    2208:	000007ff 	.word	0x000007ff

0000220c <__aeabi_i2d>:
    220c:	b570      	push	{r4, r5, r6, lr}
    220e:	2800      	cmp	r0, #0
    2210:	d030      	beq.n	2274 <__aeabi_i2d+0x68>
    2212:	17c3      	asrs	r3, r0, #31
    2214:	18c4      	adds	r4, r0, r3
    2216:	405c      	eors	r4, r3
    2218:	0fc5      	lsrs	r5, r0, #31
    221a:	0020      	movs	r0, r4
    221c:	f000 f950 	bl	24c0 <__clzsi2>
    2220:	4b17      	ldr	r3, [pc, #92]	; (2280 <__aeabi_i2d+0x74>)
    2222:	4a18      	ldr	r2, [pc, #96]	; (2284 <__aeabi_i2d+0x78>)
    2224:	1a1b      	subs	r3, r3, r0
    2226:	1ad2      	subs	r2, r2, r3
    2228:	2a1f      	cmp	r2, #31
    222a:	dd18      	ble.n	225e <__aeabi_i2d+0x52>
    222c:	4a16      	ldr	r2, [pc, #88]	; (2288 <__aeabi_i2d+0x7c>)
    222e:	1ad2      	subs	r2, r2, r3
    2230:	4094      	lsls	r4, r2
    2232:	2200      	movs	r2, #0
    2234:	0324      	lsls	r4, r4, #12
    2236:	055b      	lsls	r3, r3, #21
    2238:	0b24      	lsrs	r4, r4, #12
    223a:	0d5b      	lsrs	r3, r3, #21
    223c:	2100      	movs	r1, #0
    223e:	0010      	movs	r0, r2
    2240:	0324      	lsls	r4, r4, #12
    2242:	0d0a      	lsrs	r2, r1, #20
    2244:	0512      	lsls	r2, r2, #20
    2246:	0b24      	lsrs	r4, r4, #12
    2248:	4314      	orrs	r4, r2
    224a:	4a10      	ldr	r2, [pc, #64]	; (228c <__aeabi_i2d+0x80>)
    224c:	051b      	lsls	r3, r3, #20
    224e:	4014      	ands	r4, r2
    2250:	431c      	orrs	r4, r3
    2252:	0064      	lsls	r4, r4, #1
    2254:	07ed      	lsls	r5, r5, #31
    2256:	0864      	lsrs	r4, r4, #1
    2258:	432c      	orrs	r4, r5
    225a:	0021      	movs	r1, r4
    225c:	bd70      	pop	{r4, r5, r6, pc}
    225e:	0021      	movs	r1, r4
    2260:	4091      	lsls	r1, r2
    2262:	000a      	movs	r2, r1
    2264:	210b      	movs	r1, #11
    2266:	1a08      	subs	r0, r1, r0
    2268:	40c4      	lsrs	r4, r0
    226a:	055b      	lsls	r3, r3, #21
    226c:	0324      	lsls	r4, r4, #12
    226e:	0b24      	lsrs	r4, r4, #12
    2270:	0d5b      	lsrs	r3, r3, #21
    2272:	e7e3      	b.n	223c <__aeabi_i2d+0x30>
    2274:	2500      	movs	r5, #0
    2276:	2300      	movs	r3, #0
    2278:	2400      	movs	r4, #0
    227a:	2200      	movs	r2, #0
    227c:	e7de      	b.n	223c <__aeabi_i2d+0x30>
    227e:	46c0      	nop			; (mov r8, r8)
    2280:	0000041e 	.word	0x0000041e
    2284:	00000433 	.word	0x00000433
    2288:	00000413 	.word	0x00000413
    228c:	800fffff 	.word	0x800fffff

00002290 <__aeabi_ui2d>:
    2290:	b570      	push	{r4, r5, r6, lr}
    2292:	1e05      	subs	r5, r0, #0
    2294:	d028      	beq.n	22e8 <__aeabi_ui2d+0x58>
    2296:	f000 f913 	bl	24c0 <__clzsi2>
    229a:	4b15      	ldr	r3, [pc, #84]	; (22f0 <__aeabi_ui2d+0x60>)
    229c:	4a15      	ldr	r2, [pc, #84]	; (22f4 <__aeabi_ui2d+0x64>)
    229e:	1a1b      	subs	r3, r3, r0
    22a0:	1ad2      	subs	r2, r2, r3
    22a2:	2a1f      	cmp	r2, #31
    22a4:	dd16      	ble.n	22d4 <__aeabi_ui2d+0x44>
    22a6:	002c      	movs	r4, r5
    22a8:	4a13      	ldr	r2, [pc, #76]	; (22f8 <__aeabi_ui2d+0x68>)
    22aa:	2500      	movs	r5, #0
    22ac:	1ad2      	subs	r2, r2, r3
    22ae:	4094      	lsls	r4, r2
    22b0:	055a      	lsls	r2, r3, #21
    22b2:	0324      	lsls	r4, r4, #12
    22b4:	0b24      	lsrs	r4, r4, #12
    22b6:	0d52      	lsrs	r2, r2, #21
    22b8:	2100      	movs	r1, #0
    22ba:	0324      	lsls	r4, r4, #12
    22bc:	0d0b      	lsrs	r3, r1, #20
    22be:	0b24      	lsrs	r4, r4, #12
    22c0:	051b      	lsls	r3, r3, #20
    22c2:	4323      	orrs	r3, r4
    22c4:	4c0d      	ldr	r4, [pc, #52]	; (22fc <__aeabi_ui2d+0x6c>)
    22c6:	0512      	lsls	r2, r2, #20
    22c8:	4023      	ands	r3, r4
    22ca:	4313      	orrs	r3, r2
    22cc:	005b      	lsls	r3, r3, #1
    22ce:	0028      	movs	r0, r5
    22d0:	0859      	lsrs	r1, r3, #1
    22d2:	bd70      	pop	{r4, r5, r6, pc}
    22d4:	210b      	movs	r1, #11
    22d6:	002c      	movs	r4, r5
    22d8:	1a08      	subs	r0, r1, r0
    22da:	40c4      	lsrs	r4, r0
    22dc:	4095      	lsls	r5, r2
    22de:	0324      	lsls	r4, r4, #12
    22e0:	055a      	lsls	r2, r3, #21
    22e2:	0b24      	lsrs	r4, r4, #12
    22e4:	0d52      	lsrs	r2, r2, #21
    22e6:	e7e7      	b.n	22b8 <__aeabi_ui2d+0x28>
    22e8:	2200      	movs	r2, #0
    22ea:	2400      	movs	r4, #0
    22ec:	e7e4      	b.n	22b8 <__aeabi_ui2d+0x28>
    22ee:	46c0      	nop			; (mov r8, r8)
    22f0:	0000041e 	.word	0x0000041e
    22f4:	00000433 	.word	0x00000433
    22f8:	00000413 	.word	0x00000413
    22fc:	800fffff 	.word	0x800fffff

00002300 <__aeabi_f2d>:
    2300:	0042      	lsls	r2, r0, #1
    2302:	0e12      	lsrs	r2, r2, #24
    2304:	1c51      	adds	r1, r2, #1
    2306:	0243      	lsls	r3, r0, #9
    2308:	b2c9      	uxtb	r1, r1
    230a:	b570      	push	{r4, r5, r6, lr}
    230c:	0a5d      	lsrs	r5, r3, #9
    230e:	0fc4      	lsrs	r4, r0, #31
    2310:	2901      	cmp	r1, #1
    2312:	dd15      	ble.n	2340 <__aeabi_f2d+0x40>
    2314:	21e0      	movs	r1, #224	; 0xe0
    2316:	0089      	lsls	r1, r1, #2
    2318:	468c      	mov	ip, r1
    231a:	076d      	lsls	r5, r5, #29
    231c:	0b1b      	lsrs	r3, r3, #12
    231e:	4462      	add	r2, ip
    2320:	2100      	movs	r1, #0
    2322:	0028      	movs	r0, r5
    2324:	0d0d      	lsrs	r5, r1, #20
    2326:	052d      	lsls	r5, r5, #20
    2328:	432b      	orrs	r3, r5
    232a:	4d1c      	ldr	r5, [pc, #112]	; (239c <__aeabi_f2d+0x9c>)
    232c:	0552      	lsls	r2, r2, #21
    232e:	402b      	ands	r3, r5
    2330:	0852      	lsrs	r2, r2, #1
    2332:	4313      	orrs	r3, r2
    2334:	005b      	lsls	r3, r3, #1
    2336:	07e4      	lsls	r4, r4, #31
    2338:	085b      	lsrs	r3, r3, #1
    233a:	4323      	orrs	r3, r4
    233c:	0019      	movs	r1, r3
    233e:	bd70      	pop	{r4, r5, r6, pc}
    2340:	2a00      	cmp	r2, #0
    2342:	d115      	bne.n	2370 <__aeabi_f2d+0x70>
    2344:	2d00      	cmp	r5, #0
    2346:	d01f      	beq.n	2388 <__aeabi_f2d+0x88>
    2348:	0028      	movs	r0, r5
    234a:	f000 f8b9 	bl	24c0 <__clzsi2>
    234e:	280a      	cmp	r0, #10
    2350:	dc1d      	bgt.n	238e <__aeabi_f2d+0x8e>
    2352:	230b      	movs	r3, #11
    2354:	002a      	movs	r2, r5
    2356:	1a1b      	subs	r3, r3, r0
    2358:	40da      	lsrs	r2, r3
    235a:	0013      	movs	r3, r2
    235c:	0002      	movs	r2, r0
    235e:	3215      	adds	r2, #21
    2360:	4095      	lsls	r5, r2
    2362:	4a0f      	ldr	r2, [pc, #60]	; (23a0 <__aeabi_f2d+0xa0>)
    2364:	031b      	lsls	r3, r3, #12
    2366:	1a12      	subs	r2, r2, r0
    2368:	0552      	lsls	r2, r2, #21
    236a:	0b1b      	lsrs	r3, r3, #12
    236c:	0d52      	lsrs	r2, r2, #21
    236e:	e7d7      	b.n	2320 <__aeabi_f2d+0x20>
    2370:	2d00      	cmp	r5, #0
    2372:	d006      	beq.n	2382 <__aeabi_f2d+0x82>
    2374:	2280      	movs	r2, #128	; 0x80
    2376:	0b1b      	lsrs	r3, r3, #12
    2378:	0312      	lsls	r2, r2, #12
    237a:	4313      	orrs	r3, r2
    237c:	076d      	lsls	r5, r5, #29
    237e:	4a09      	ldr	r2, [pc, #36]	; (23a4 <__aeabi_f2d+0xa4>)
    2380:	e7ce      	b.n	2320 <__aeabi_f2d+0x20>
    2382:	4a08      	ldr	r2, [pc, #32]	; (23a4 <__aeabi_f2d+0xa4>)
    2384:	2300      	movs	r3, #0
    2386:	e7cb      	b.n	2320 <__aeabi_f2d+0x20>
    2388:	2200      	movs	r2, #0
    238a:	2300      	movs	r3, #0
    238c:	e7c8      	b.n	2320 <__aeabi_f2d+0x20>
    238e:	0003      	movs	r3, r0
    2390:	3b0b      	subs	r3, #11
    2392:	409d      	lsls	r5, r3
    2394:	002b      	movs	r3, r5
    2396:	2500      	movs	r5, #0
    2398:	e7e3      	b.n	2362 <__aeabi_f2d+0x62>
    239a:	46c0      	nop			; (mov r8, r8)
    239c:	800fffff 	.word	0x800fffff
    23a0:	00000389 	.word	0x00000389
    23a4:	000007ff 	.word	0x000007ff

000023a8 <__aeabi_d2f>:
    23a8:	004b      	lsls	r3, r1, #1
    23aa:	b570      	push	{r4, r5, r6, lr}
    23ac:	0d5e      	lsrs	r6, r3, #21
    23ae:	030c      	lsls	r4, r1, #12
    23b0:	1c75      	adds	r5, r6, #1
    23b2:	0a64      	lsrs	r4, r4, #9
    23b4:	0f42      	lsrs	r2, r0, #29
    23b6:	056d      	lsls	r5, r5, #21
    23b8:	4322      	orrs	r2, r4
    23ba:	0fc9      	lsrs	r1, r1, #31
    23bc:	00c4      	lsls	r4, r0, #3
    23be:	0d6d      	lsrs	r5, r5, #21
    23c0:	2d01      	cmp	r5, #1
    23c2:	dd2a      	ble.n	241a <__aeabi_d2f+0x72>
    23c4:	4b3b      	ldr	r3, [pc, #236]	; (24b4 <__aeabi_d2f+0x10c>)
    23c6:	18f3      	adds	r3, r6, r3
    23c8:	2bfe      	cmp	r3, #254	; 0xfe
    23ca:	dc1a      	bgt.n	2402 <__aeabi_d2f+0x5a>
    23cc:	2b00      	cmp	r3, #0
    23ce:	dd42      	ble.n	2456 <__aeabi_d2f+0xae>
    23d0:	0180      	lsls	r0, r0, #6
    23d2:	1e45      	subs	r5, r0, #1
    23d4:	41a8      	sbcs	r0, r5
    23d6:	00d2      	lsls	r2, r2, #3
    23d8:	4310      	orrs	r0, r2
    23da:	0f62      	lsrs	r2, r4, #29
    23dc:	4302      	orrs	r2, r0
    23de:	0750      	lsls	r0, r2, #29
    23e0:	d004      	beq.n	23ec <__aeabi_d2f+0x44>
    23e2:	200f      	movs	r0, #15
    23e4:	4010      	ands	r0, r2
    23e6:	2804      	cmp	r0, #4
    23e8:	d000      	beq.n	23ec <__aeabi_d2f+0x44>
    23ea:	3204      	adds	r2, #4
    23ec:	2080      	movs	r0, #128	; 0x80
    23ee:	04c0      	lsls	r0, r0, #19
    23f0:	4010      	ands	r0, r2
    23f2:	d021      	beq.n	2438 <__aeabi_d2f+0x90>
    23f4:	3301      	adds	r3, #1
    23f6:	2bff      	cmp	r3, #255	; 0xff
    23f8:	d003      	beq.n	2402 <__aeabi_d2f+0x5a>
    23fa:	0192      	lsls	r2, r2, #6
    23fc:	0a52      	lsrs	r2, r2, #9
    23fe:	b2db      	uxtb	r3, r3
    2400:	e001      	b.n	2406 <__aeabi_d2f+0x5e>
    2402:	23ff      	movs	r3, #255	; 0xff
    2404:	2200      	movs	r2, #0
    2406:	0252      	lsls	r2, r2, #9
    2408:	0a52      	lsrs	r2, r2, #9
    240a:	05db      	lsls	r3, r3, #23
    240c:	4313      	orrs	r3, r2
    240e:	005b      	lsls	r3, r3, #1
    2410:	07c9      	lsls	r1, r1, #31
    2412:	085b      	lsrs	r3, r3, #1
    2414:	430b      	orrs	r3, r1
    2416:	0018      	movs	r0, r3
    2418:	bd70      	pop	{r4, r5, r6, pc}
    241a:	2e00      	cmp	r6, #0
    241c:	d007      	beq.n	242e <__aeabi_d2f+0x86>
    241e:	4314      	orrs	r4, r2
    2420:	d0ef      	beq.n	2402 <__aeabi_d2f+0x5a>
    2422:	2080      	movs	r0, #128	; 0x80
    2424:	00d2      	lsls	r2, r2, #3
    2426:	0480      	lsls	r0, r0, #18
    2428:	4302      	orrs	r2, r0
    242a:	23ff      	movs	r3, #255	; 0xff
    242c:	e7d7      	b.n	23de <__aeabi_d2f+0x36>
    242e:	4322      	orrs	r2, r4
    2430:	2300      	movs	r3, #0
    2432:	2a00      	cmp	r2, #0
    2434:	d003      	beq.n	243e <__aeabi_d2f+0x96>
    2436:	2205      	movs	r2, #5
    2438:	08d2      	lsrs	r2, r2, #3
    243a:	2bff      	cmp	r3, #255	; 0xff
    243c:	d003      	beq.n	2446 <__aeabi_d2f+0x9e>
    243e:	0252      	lsls	r2, r2, #9
    2440:	0a52      	lsrs	r2, r2, #9
    2442:	b2db      	uxtb	r3, r3
    2444:	e7df      	b.n	2406 <__aeabi_d2f+0x5e>
    2446:	2a00      	cmp	r2, #0
    2448:	d032      	beq.n	24b0 <__aeabi_d2f+0x108>
    244a:	2080      	movs	r0, #128	; 0x80
    244c:	03c0      	lsls	r0, r0, #15
    244e:	4302      	orrs	r2, r0
    2450:	0252      	lsls	r2, r2, #9
    2452:	0a52      	lsrs	r2, r2, #9
    2454:	e7d7      	b.n	2406 <__aeabi_d2f+0x5e>
    2456:	0018      	movs	r0, r3
    2458:	3017      	adds	r0, #23
    245a:	db14      	blt.n	2486 <__aeabi_d2f+0xde>
    245c:	2080      	movs	r0, #128	; 0x80
    245e:	0400      	lsls	r0, r0, #16
    2460:	4302      	orrs	r2, r0
    2462:	201e      	movs	r0, #30
    2464:	1ac0      	subs	r0, r0, r3
    2466:	281f      	cmp	r0, #31
    2468:	dc0f      	bgt.n	248a <__aeabi_d2f+0xe2>
    246a:	0025      	movs	r5, r4
    246c:	4b12      	ldr	r3, [pc, #72]	; (24b8 <__aeabi_d2f+0x110>)
    246e:	18f3      	adds	r3, r6, r3
    2470:	409d      	lsls	r5, r3
    2472:	1e6e      	subs	r6, r5, #1
    2474:	41b5      	sbcs	r5, r6
    2476:	409a      	lsls	r2, r3
    2478:	002b      	movs	r3, r5
    247a:	4313      	orrs	r3, r2
    247c:	0022      	movs	r2, r4
    247e:	40c2      	lsrs	r2, r0
    2480:	431a      	orrs	r2, r3
    2482:	2300      	movs	r3, #0
    2484:	e7ab      	b.n	23de <__aeabi_d2f+0x36>
    2486:	2300      	movs	r3, #0
    2488:	e7d5      	b.n	2436 <__aeabi_d2f+0x8e>
    248a:	2502      	movs	r5, #2
    248c:	426d      	negs	r5, r5
    248e:	1aeb      	subs	r3, r5, r3
    2490:	0015      	movs	r5, r2
    2492:	40dd      	lsrs	r5, r3
    2494:	2820      	cmp	r0, #32
    2496:	d009      	beq.n	24ac <__aeabi_d2f+0x104>
    2498:	4b08      	ldr	r3, [pc, #32]	; (24bc <__aeabi_d2f+0x114>)
    249a:	18f3      	adds	r3, r6, r3
    249c:	409a      	lsls	r2, r3
    249e:	4314      	orrs	r4, r2
    24a0:	1e62      	subs	r2, r4, #1
    24a2:	4194      	sbcs	r4, r2
    24a4:	0022      	movs	r2, r4
    24a6:	2300      	movs	r3, #0
    24a8:	432a      	orrs	r2, r5
    24aa:	e798      	b.n	23de <__aeabi_d2f+0x36>
    24ac:	2200      	movs	r2, #0
    24ae:	e7f6      	b.n	249e <__aeabi_d2f+0xf6>
    24b0:	2200      	movs	r2, #0
    24b2:	e7a8      	b.n	2406 <__aeabi_d2f+0x5e>
    24b4:	fffffc80 	.word	0xfffffc80
    24b8:	fffffc82 	.word	0xfffffc82
    24bc:	fffffca2 	.word	0xfffffca2

000024c0 <__clzsi2>:
    24c0:	211c      	movs	r1, #28
    24c2:	2301      	movs	r3, #1
    24c4:	041b      	lsls	r3, r3, #16
    24c6:	4298      	cmp	r0, r3
    24c8:	d301      	bcc.n	24ce <__clzsi2+0xe>
    24ca:	0c00      	lsrs	r0, r0, #16
    24cc:	3910      	subs	r1, #16
    24ce:	0a1b      	lsrs	r3, r3, #8
    24d0:	4298      	cmp	r0, r3
    24d2:	d301      	bcc.n	24d8 <__clzsi2+0x18>
    24d4:	0a00      	lsrs	r0, r0, #8
    24d6:	3908      	subs	r1, #8
    24d8:	091b      	lsrs	r3, r3, #4
    24da:	4298      	cmp	r0, r3
    24dc:	d301      	bcc.n	24e2 <__clzsi2+0x22>
    24de:	0900      	lsrs	r0, r0, #4
    24e0:	3904      	subs	r1, #4
    24e2:	a202      	add	r2, pc, #8	; (adr r2, 24ec <__clzsi2+0x2c>)
    24e4:	5c10      	ldrb	r0, [r2, r0]
    24e6:	1840      	adds	r0, r0, r1
    24e8:	4770      	bx	lr
    24ea:	46c0      	nop			; (mov r8, r8)
    24ec:	02020304 	.word	0x02020304
    24f0:	01010101 	.word	0x01010101
	...

000024fc <__libc_init_array>:
    24fc:	b570      	push	{r4, r5, r6, lr}
    24fe:	4e0d      	ldr	r6, [pc, #52]	; (2534 <__libc_init_array+0x38>)
    2500:	4d0d      	ldr	r5, [pc, #52]	; (2538 <__libc_init_array+0x3c>)
    2502:	2400      	movs	r4, #0
    2504:	1bad      	subs	r5, r5, r6
    2506:	10ad      	asrs	r5, r5, #2
    2508:	d005      	beq.n	2516 <__libc_init_array+0x1a>
    250a:	00a3      	lsls	r3, r4, #2
    250c:	58f3      	ldr	r3, [r6, r3]
    250e:	3401      	adds	r4, #1
    2510:	4798      	blx	r3
    2512:	42a5      	cmp	r5, r4
    2514:	d1f9      	bne.n	250a <__libc_init_array+0xe>
    2516:	f000 f9cd 	bl	28b4 <_init>
    251a:	4e08      	ldr	r6, [pc, #32]	; (253c <__libc_init_array+0x40>)
    251c:	4d08      	ldr	r5, [pc, #32]	; (2540 <__libc_init_array+0x44>)
    251e:	2400      	movs	r4, #0
    2520:	1bad      	subs	r5, r5, r6
    2522:	10ad      	asrs	r5, r5, #2
    2524:	d005      	beq.n	2532 <__libc_init_array+0x36>
    2526:	00a3      	lsls	r3, r4, #2
    2528:	58f3      	ldr	r3, [r6, r3]
    252a:	3401      	adds	r4, #1
    252c:	4798      	blx	r3
    252e:	42a5      	cmp	r5, r4
    2530:	d1f9      	bne.n	2526 <__libc_init_array+0x2a>
    2532:	bd70      	pop	{r4, r5, r6, pc}
    2534:	000028c0 	.word	0x000028c0
    2538:	000028c0 	.word	0x000028c0
    253c:	000028c0 	.word	0x000028c0
    2540:	000028c8 	.word	0x000028c8

00002544 <memset>:
    2544:	b570      	push	{r4, r5, r6, lr}
    2546:	0783      	lsls	r3, r0, #30
    2548:	d03f      	beq.n	25ca <memset+0x86>
    254a:	1e54      	subs	r4, r2, #1
    254c:	2a00      	cmp	r2, #0
    254e:	d03b      	beq.n	25c8 <memset+0x84>
    2550:	b2ce      	uxtb	r6, r1
    2552:	0003      	movs	r3, r0
    2554:	2503      	movs	r5, #3
    2556:	e003      	b.n	2560 <memset+0x1c>
    2558:	1e62      	subs	r2, r4, #1
    255a:	2c00      	cmp	r4, #0
    255c:	d034      	beq.n	25c8 <memset+0x84>
    255e:	0014      	movs	r4, r2
    2560:	3301      	adds	r3, #1
    2562:	1e5a      	subs	r2, r3, #1
    2564:	7016      	strb	r6, [r2, #0]
    2566:	422b      	tst	r3, r5
    2568:	d1f6      	bne.n	2558 <memset+0x14>
    256a:	2c03      	cmp	r4, #3
    256c:	d924      	bls.n	25b8 <memset+0x74>
    256e:	25ff      	movs	r5, #255	; 0xff
    2570:	400d      	ands	r5, r1
    2572:	022a      	lsls	r2, r5, #8
    2574:	4315      	orrs	r5, r2
    2576:	042a      	lsls	r2, r5, #16
    2578:	4315      	orrs	r5, r2
    257a:	2c0f      	cmp	r4, #15
    257c:	d911      	bls.n	25a2 <memset+0x5e>
    257e:	0026      	movs	r6, r4
    2580:	3e10      	subs	r6, #16
    2582:	0936      	lsrs	r6, r6, #4
    2584:	3601      	adds	r6, #1
    2586:	0136      	lsls	r6, r6, #4
    2588:	001a      	movs	r2, r3
    258a:	199b      	adds	r3, r3, r6
    258c:	6015      	str	r5, [r2, #0]
    258e:	6055      	str	r5, [r2, #4]
    2590:	6095      	str	r5, [r2, #8]
    2592:	60d5      	str	r5, [r2, #12]
    2594:	3210      	adds	r2, #16
    2596:	4293      	cmp	r3, r2
    2598:	d1f8      	bne.n	258c <memset+0x48>
    259a:	220f      	movs	r2, #15
    259c:	4014      	ands	r4, r2
    259e:	2c03      	cmp	r4, #3
    25a0:	d90a      	bls.n	25b8 <memset+0x74>
    25a2:	1f26      	subs	r6, r4, #4
    25a4:	08b6      	lsrs	r6, r6, #2
    25a6:	3601      	adds	r6, #1
    25a8:	00b6      	lsls	r6, r6, #2
    25aa:	001a      	movs	r2, r3
    25ac:	199b      	adds	r3, r3, r6
    25ae:	c220      	stmia	r2!, {r5}
    25b0:	4293      	cmp	r3, r2
    25b2:	d1fc      	bne.n	25ae <memset+0x6a>
    25b4:	2203      	movs	r2, #3
    25b6:	4014      	ands	r4, r2
    25b8:	2c00      	cmp	r4, #0
    25ba:	d005      	beq.n	25c8 <memset+0x84>
    25bc:	b2c9      	uxtb	r1, r1
    25be:	191c      	adds	r4, r3, r4
    25c0:	7019      	strb	r1, [r3, #0]
    25c2:	3301      	adds	r3, #1
    25c4:	429c      	cmp	r4, r3
    25c6:	d1fb      	bne.n	25c0 <memset+0x7c>
    25c8:	bd70      	pop	{r4, r5, r6, pc}
    25ca:	0014      	movs	r4, r2
    25cc:	0003      	movs	r3, r0
    25ce:	e7cc      	b.n	256a <memset+0x26>

000025d0 <register_fini>:
    25d0:	4b03      	ldr	r3, [pc, #12]	; (25e0 <register_fini+0x10>)
    25d2:	b510      	push	{r4, lr}
    25d4:	2b00      	cmp	r3, #0
    25d6:	d002      	beq.n	25de <register_fini+0xe>
    25d8:	4802      	ldr	r0, [pc, #8]	; (25e4 <register_fini+0x14>)
    25da:	f000 f805 	bl	25e8 <atexit>
    25de:	bd10      	pop	{r4, pc}
    25e0:	00000000 	.word	0x00000000
    25e4:	000025f9 	.word	0x000025f9

000025e8 <atexit>:
    25e8:	b510      	push	{r4, lr}
    25ea:	0001      	movs	r1, r0
    25ec:	2300      	movs	r3, #0
    25ee:	2200      	movs	r2, #0
    25f0:	2000      	movs	r0, #0
    25f2:	f000 f81b 	bl	262c <__register_exitproc>
    25f6:	bd10      	pop	{r4, pc}

000025f8 <__libc_fini_array>:
    25f8:	b570      	push	{r4, r5, r6, lr}
    25fa:	4b09      	ldr	r3, [pc, #36]	; (2620 <__libc_fini_array+0x28>)
    25fc:	4c09      	ldr	r4, [pc, #36]	; (2624 <__libc_fini_array+0x2c>)
    25fe:	1ae4      	subs	r4, r4, r3
    2600:	10a4      	asrs	r4, r4, #2
    2602:	d009      	beq.n	2618 <__libc_fini_array+0x20>
    2604:	4a08      	ldr	r2, [pc, #32]	; (2628 <__libc_fini_array+0x30>)
    2606:	18a5      	adds	r5, r4, r2
    2608:	00ad      	lsls	r5, r5, #2
    260a:	18ed      	adds	r5, r5, r3
    260c:	682b      	ldr	r3, [r5, #0]
    260e:	3c01      	subs	r4, #1
    2610:	4798      	blx	r3
    2612:	3d04      	subs	r5, #4
    2614:	2c00      	cmp	r4, #0
    2616:	d1f9      	bne.n	260c <__libc_fini_array+0x14>
    2618:	f000 f956 	bl	28c8 <_fini>
    261c:	bd70      	pop	{r4, r5, r6, pc}
    261e:	46c0      	nop			; (mov r8, r8)
    2620:	000028d4 	.word	0x000028d4
    2624:	000028d8 	.word	0x000028d8
    2628:	3fffffff 	.word	0x3fffffff

0000262c <__register_exitproc>:
    262c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    262e:	4644      	mov	r4, r8
    2630:	465f      	mov	r7, fp
    2632:	4656      	mov	r6, sl
    2634:	464d      	mov	r5, r9
    2636:	469b      	mov	fp, r3
    2638:	4b2f      	ldr	r3, [pc, #188]	; (26f8 <__register_exitproc+0xcc>)
    263a:	b4f0      	push	{r4, r5, r6, r7}
    263c:	681c      	ldr	r4, [r3, #0]
    263e:	23a4      	movs	r3, #164	; 0xa4
    2640:	005b      	lsls	r3, r3, #1
    2642:	0005      	movs	r5, r0
    2644:	58e0      	ldr	r0, [r4, r3]
    2646:	000e      	movs	r6, r1
    2648:	4690      	mov	r8, r2
    264a:	2800      	cmp	r0, #0
    264c:	d04b      	beq.n	26e6 <__register_exitproc+0xba>
    264e:	6843      	ldr	r3, [r0, #4]
    2650:	2b1f      	cmp	r3, #31
    2652:	dc0d      	bgt.n	2670 <__register_exitproc+0x44>
    2654:	1c5c      	adds	r4, r3, #1
    2656:	2d00      	cmp	r5, #0
    2658:	d121      	bne.n	269e <__register_exitproc+0x72>
    265a:	3302      	adds	r3, #2
    265c:	009b      	lsls	r3, r3, #2
    265e:	6044      	str	r4, [r0, #4]
    2660:	501e      	str	r6, [r3, r0]
    2662:	2000      	movs	r0, #0
    2664:	bc3c      	pop	{r2, r3, r4, r5}
    2666:	4690      	mov	r8, r2
    2668:	4699      	mov	r9, r3
    266a:	46a2      	mov	sl, r4
    266c:	46ab      	mov	fp, r5
    266e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2670:	4b22      	ldr	r3, [pc, #136]	; (26fc <__register_exitproc+0xd0>)
    2672:	2b00      	cmp	r3, #0
    2674:	d03c      	beq.n	26f0 <__register_exitproc+0xc4>
    2676:	20c8      	movs	r0, #200	; 0xc8
    2678:	0040      	lsls	r0, r0, #1
    267a:	e000      	b.n	267e <__register_exitproc+0x52>
    267c:	bf00      	nop
    267e:	2800      	cmp	r0, #0
    2680:	d036      	beq.n	26f0 <__register_exitproc+0xc4>
    2682:	22a4      	movs	r2, #164	; 0xa4
    2684:	2300      	movs	r3, #0
    2686:	0052      	lsls	r2, r2, #1
    2688:	58a1      	ldr	r1, [r4, r2]
    268a:	6043      	str	r3, [r0, #4]
    268c:	6001      	str	r1, [r0, #0]
    268e:	50a0      	str	r0, [r4, r2]
    2690:	3240      	adds	r2, #64	; 0x40
    2692:	5083      	str	r3, [r0, r2]
    2694:	3204      	adds	r2, #4
    2696:	5083      	str	r3, [r0, r2]
    2698:	2401      	movs	r4, #1
    269a:	2d00      	cmp	r5, #0
    269c:	d0dd      	beq.n	265a <__register_exitproc+0x2e>
    269e:	009a      	lsls	r2, r3, #2
    26a0:	4691      	mov	r9, r2
    26a2:	4481      	add	r9, r0
    26a4:	4642      	mov	r2, r8
    26a6:	2188      	movs	r1, #136	; 0x88
    26a8:	464f      	mov	r7, r9
    26aa:	507a      	str	r2, [r7, r1]
    26ac:	22c4      	movs	r2, #196	; 0xc4
    26ae:	0052      	lsls	r2, r2, #1
    26b0:	4690      	mov	r8, r2
    26b2:	4480      	add	r8, r0
    26b4:	4642      	mov	r2, r8
    26b6:	3987      	subs	r1, #135	; 0x87
    26b8:	4099      	lsls	r1, r3
    26ba:	6812      	ldr	r2, [r2, #0]
    26bc:	468a      	mov	sl, r1
    26be:	430a      	orrs	r2, r1
    26c0:	4694      	mov	ip, r2
    26c2:	4642      	mov	r2, r8
    26c4:	4661      	mov	r1, ip
    26c6:	6011      	str	r1, [r2, #0]
    26c8:	2284      	movs	r2, #132	; 0x84
    26ca:	4649      	mov	r1, r9
    26cc:	465f      	mov	r7, fp
    26ce:	0052      	lsls	r2, r2, #1
    26d0:	508f      	str	r7, [r1, r2]
    26d2:	2d02      	cmp	r5, #2
    26d4:	d1c1      	bne.n	265a <__register_exitproc+0x2e>
    26d6:	0002      	movs	r2, r0
    26d8:	4655      	mov	r5, sl
    26da:	328d      	adds	r2, #141	; 0x8d
    26dc:	32ff      	adds	r2, #255	; 0xff
    26de:	6811      	ldr	r1, [r2, #0]
    26e0:	430d      	orrs	r5, r1
    26e2:	6015      	str	r5, [r2, #0]
    26e4:	e7b9      	b.n	265a <__register_exitproc+0x2e>
    26e6:	0020      	movs	r0, r4
    26e8:	304d      	adds	r0, #77	; 0x4d
    26ea:	30ff      	adds	r0, #255	; 0xff
    26ec:	50e0      	str	r0, [r4, r3]
    26ee:	e7ae      	b.n	264e <__register_exitproc+0x22>
    26f0:	2001      	movs	r0, #1
    26f2:	4240      	negs	r0, r0
    26f4:	e7b6      	b.n	2664 <__register_exitproc+0x38>
    26f6:	46c0      	nop			; (mov r8, r8)
    26f8:	000028b0 	.word	0x000028b0
    26fc:	00000000 	.word	0x00000000

00002700 <spi2MOSI>:
    2700:	0c000002 00000200                                .....

00002705 <spi2SCK>:
    2705:	0e000002 00000200                                .....

0000270a <spi2MISO>:
    270a:	0d000002 8d200000                                ......

00002710 <lookupTable.12431>:
    2710:	ffff8d20 ffffada1 ffffce64 ffffef6c      .......d...l...
    2720:	000010b7 0000324a 00005425 00007649     ....J2..%T..Iv..
    2730:	000098b7 0000bb72 0000de79 000101d0     ....r...y.......
    2740:	00012576 0001496f 00016dbc 0001925e     v%..oI...m..^...
    2750:	0001b758 0001dcaa 00020258 00022862     X.......X...b(..
    2760:	00024ecc 00027596 00029cc4 0002c457     .N...u......W...
    2770:	0002ec52 000314b7 00033d89 000366ca     R........=...f..
    2780:	0003907d 0003baa4 0003e544 0004105e     }.......D...^...
    2790:	00043bf6 0004680e 000494ac 0004c1d1     .;...h..........
    27a0:	0004ef81 00051dc1 00054c95 00057c00     .........L...|..
    27b0:	0005ac07 0005dcae 00060dfb 00063ff2     .............?..
    27c0:	00067298 0006a5f4 0006da09 00070ee0     .r..............
    27d0:	0007447d 00077ae8 0007b228 0007ea44     }D...z..(...D...
    27e0:	00082344 00085d30 00089810 0008d3ef     D#..0]..........
    27f0:	000910d6 00094ecf 00098de5 0009ce23     .....N......#...
    2800:	000a0f98 000a524f 000a9657 000adbbf     ....OR..W.......
    2810:	000b2298 000b6af3 000bb4e2 000c007b     ."...j......{...
    2820:	000c4dd4 000c9d03 000cee23 000d4150     .M......#...PA..
    2830:	000d96a9 000dee4e 000e4865 000ea516     ....N...eH......
    2840:	000f048e                                ....

00002844 <senseBatPin>:
    2844:	06000000 01000106                                .....

00002849 <senseAPin>:
    2849:	03010001 0100010b                                .....

0000284e <senseBPin>:
    284e:	02010001 0000000a                                .....

00002853 <senseCPin>:
    2853:	03000000 00000001                                .....

00002858 <senseDPin>:
    2858:	02000000 00000000                                .....

0000285d <analogAccelPin>:
    285d:	07000000 00000207                                .....

00002862 <spi2MOSI>:
    2862:	0c000002 00000200                                .....

00002867 <spi2SCK>:
    2867:	0e000002 001f0800 001dc800 001dc800     ................
    2877:	001dc600 001ee000 001ee000 001ed200     ................
    2887:	001dc600 001ee000 001ed200 001ee000     ................
    2897:	001dc600 001ee800 001ee800 001ee800     ................
    28a7:	0020e800 00004300 00001000                       .. ..C...

000028b0 <_global_impure_ptr>:
    28b0:	20000010                                ... 

000028b4 <_init>:
    28b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    28b6:	46c0      	nop			; (mov r8, r8)
    28b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    28ba:	bc08      	pop	{r3}
    28bc:	469e      	mov	lr, r3
    28be:	4770      	bx	lr

000028c0 <__init_array_start>:
    28c0:	000025d1 	.word	0x000025d1

000028c4 <__frame_dummy_init_array_entry>:
    28c4:	000000dd                                ....

000028c8 <_fini>:
    28c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    28ca:	46c0      	nop			; (mov r8, r8)
    28cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
    28ce:	bc08      	pop	{r3}
    28d0:	469e      	mov	lr, r3
    28d2:	4770      	bx	lr

000028d4 <__fini_array_start>:
    28d4:	000000b5 	.word	0x000000b5
