
DasAltimeter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006488  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000004a0  20000000  00006488  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000330  200004a0  00006928  000204a0  2**3
                  ALLOC
  3 .stack        00002000  200007d0  00006c58  000204a0  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000204a0  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  000204c8  2**0
                  CONTENTS, READONLY
  6 .debug_info   0002843f  00000000  00000000  00020521  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003354  00000000  00000000  00048960  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00002268  00000000  00000000  0004bcb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000003d8  00000000  00000000  0004df1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000d00  00000000  00000000  0004e2f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000167d3  00000000  00000000  0004eff4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00009ec4  00000000  00000000  000657c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00072e00  00000000  00000000  0006f68b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001024  00000000  00000000  000e248c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
 *         retrieved from cpu registers.
 */
void SystemCoreClockUpdate(void)
{
	// Not implemented
	SystemCoreClock = __SYSTEM_CLOCK;
       0:	d0 27 00 20 19 01 00 00 15 01 00 00 15 01 00 00     .'. ............
	...
      2c:	15 01 00 00 00 00 00 00 00 00 00 00 15 01 00 00     ................
      3c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      4c:	7d 0f 00 00 15 01 00 00 15 01 00 00 15 01 00 00     }...............
      5c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      6c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      7c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      8c:	21 10 00 00 89 10 00 00 00 00 00 00 00 00 00 00     !...............
      9c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      ac:	15 01 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200004a0 	.word	0x200004a0
      d4:	00000000 	.word	0x00000000
      d8:	00006488 	.word	0x00006488

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200004a4 	.word	0x200004a4
     108:	00006488 	.word	0x00006488
     10c:	00006488 	.word	0x00006488
     110:	00000000 	.word	0x00000000

00000114 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     114:	e7fe      	b.n	114 <Dummy_Handler>
	...

00000118 <Reset_Handler>:
        if (pSrc != pDest) {
     118:	4821      	ldr	r0, [pc, #132]	; (1a0 <Reset_Handler+0x88>)
     11a:	4922      	ldr	r1, [pc, #136]	; (1a4 <Reset_Handler+0x8c>)
{
     11c:	b570      	push	{r4, r5, r6, lr}
        if (pSrc != pDest) {
     11e:	4288      	cmp	r0, r1
     120:	d004      	beq.n	12c <Reset_Handler+0x14>
     122:	2300      	movs	r3, #0
                for (; pDest < &_erelocate;) {
     124:	4c20      	ldr	r4, [pc, #128]	; (1a8 <Reset_Handler+0x90>)
     126:	18ca      	adds	r2, r1, r3
     128:	42a2      	cmp	r2, r4
     12a:	d332      	bcc.n	192 <Reset_Handler+0x7a>
                *pDest++ = 0;
     12c:	2100      	movs	r1, #0
     12e:	4b1f      	ldr	r3, [pc, #124]	; (1ac <Reset_Handler+0x94>)
        for (pDest = &_szero; pDest < &_ezero;) {
     130:	4a1f      	ldr	r2, [pc, #124]	; (1b0 <Reset_Handler+0x98>)
     132:	4293      	cmp	r3, r2
     134:	d331      	bcc.n	19a <Reset_Handler+0x82>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     136:	21ff      	movs	r1, #255	; 0xff
     138:	4b1e      	ldr	r3, [pc, #120]	; (1b4 <Reset_Handler+0x9c>)
     13a:	4a1f      	ldr	r2, [pc, #124]	; (1b8 <Reset_Handler+0xa0>)
     13c:	438b      	bics	r3, r1
     13e:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     140:	2202      	movs	r2, #2
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     142:	250c      	movs	r5, #12
     144:	2408      	movs	r4, #8
        DMAC->QOSCTRL.bit.DQOS = 2;
     146:	2630      	movs	r6, #48	; 0x30
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     148:	4b1c      	ldr	r3, [pc, #112]	; (1bc <Reset_Handler+0xa4>)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     14a:	481d      	ldr	r0, [pc, #116]	; (1c0 <Reset_Handler+0xa8>)
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     14c:	625a      	str	r2, [r3, #36]	; 0x24
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     14e:	78c3      	ldrb	r3, [r0, #3]
     150:	39fc      	subs	r1, #252	; 0xfc
     152:	438b      	bics	r3, r1
     154:	4313      	orrs	r3, r2
     156:	70c3      	strb	r3, [r0, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     158:	78c3      	ldrb	r3, [r0, #3]
     15a:	43ab      	bics	r3, r5
     15c:	4323      	orrs	r3, r4
     15e:	70c3      	strb	r3, [r0, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
     160:	4b18      	ldr	r3, [pc, #96]	; (1c4 <Reset_Handler+0xac>)
     162:	7b98      	ldrb	r0, [r3, #14]
     164:	43b0      	bics	r0, r6
     166:	0006      	movs	r6, r0
     168:	2020      	movs	r0, #32
     16a:	4330      	orrs	r0, r6
     16c:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     16e:	7b98      	ldrb	r0, [r3, #14]
     170:	43a8      	bics	r0, r5
     172:	4304      	orrs	r4, r0
     174:	739c      	strb	r4, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     176:	7b98      	ldrb	r0, [r3, #14]
     178:	4388      	bics	r0, r1
     17a:	4302      	orrs	r2, r0
     17c:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
     17e:	2380      	movs	r3, #128	; 0x80
     180:	4a11      	ldr	r2, [pc, #68]	; (1c8 <Reset_Handler+0xb0>)
     182:	6851      	ldr	r1, [r2, #4]
     184:	430b      	orrs	r3, r1
     186:	6053      	str	r3, [r2, #4]
        __libc_init_array();
     188:	4b10      	ldr	r3, [pc, #64]	; (1cc <Reset_Handler+0xb4>)
     18a:	4798      	blx	r3
        main();
     18c:	4b10      	ldr	r3, [pc, #64]	; (1d0 <Reset_Handler+0xb8>)
     18e:	4798      	blx	r3
     190:	e7fe      	b.n	190 <Reset_Handler+0x78>
                        *pDest++ = *pSrc++;
     192:	58c5      	ldr	r5, [r0, r3]
     194:	3304      	adds	r3, #4
     196:	6015      	str	r5, [r2, #0]
     198:	e7c5      	b.n	126 <Reset_Handler+0xe>
                *pDest++ = 0;
     19a:	c302      	stmia	r3!, {r1}
     19c:	e7c9      	b.n	132 <Reset_Handler+0x1a>
     19e:	46c0      	nop			; (mov r8, r8)
     1a0:	00006488 	.word	0x00006488
     1a4:	20000000 	.word	0x20000000
     1a8:	200004a0 	.word	0x200004a0
     1ac:	200004a0 	.word	0x200004a0
     1b0:	200007d0 	.word	0x200007d0
     1b4:	00000000 	.word	0x00000000
     1b8:	e000ed00 	.word	0xe000ed00
     1bc:	410070fc 	.word	0x410070fc
     1c0:	41005000 	.word	0x41005000
     1c4:	41004800 	.word	0x41004800
     1c8:	41004000 	.word	0x41004000
     1cc:	000061d9 	.word	0x000061d9
     1d0:	00000a59 	.word	0x00000a59

000001d4 <SystemInit>:
     1d4:	4a01      	ldr	r2, [pc, #4]	; (1dc <SystemInit+0x8>)
     1d6:	4b02      	ldr	r3, [pc, #8]	; (1e0 <SystemInit+0xc>)
     1d8:	601a      	str	r2, [r3, #0]
     1da:	4770      	bx	lr
     1dc:	000f4240 	.word	0x000f4240
     1e0:	20000000 	.word	0x20000000

000001e4 <AT25SFHoldTillReady>:
    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
    pinHigh(cs_mem);
}

void AT25SFHoldTillReady(){
     1e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     1e6:	2380      	movs	r3, #128	; 0x80
     1e8:	4f09      	ldr	r7, [pc, #36]	; (210 <AT25SFHoldTillReady+0x2c>)
     1ea:	02db      	lsls	r3, r3, #11
     1ec:	617b      	str	r3, [r7, #20]
	pinLow(cs_mem);
	dummy_rx = spiDataTransfer(SPI1,OPCODE_READSTATUS);
     1ee:	2105      	movs	r1, #5
     1f0:	2001      	movs	r0, #1
     1f2:	4d08      	ldr	r5, [pc, #32]	; (214 <AT25SFHoldTillReady+0x30>)
     1f4:	47a8      	blx	r5
        while (spiDataTransfer(SPI1,dummy_rx) & 0x01);
     1f6:	2401      	movs	r4, #1
	dummy_rx = spiDataTransfer(SPI1,OPCODE_READSTATUS);
     1f8:	4e07      	ldr	r6, [pc, #28]	; (218 <AT25SFHoldTillReady+0x34>)
     1fa:	7030      	strb	r0, [r6, #0]
        while (spiDataTransfer(SPI1,dummy_rx) & 0x01);
     1fc:	7831      	ldrb	r1, [r6, #0]
     1fe:	0020      	movs	r0, r4
     200:	47a8      	blx	r5
     202:	4220      	tst	r0, r4
     204:	d1fa      	bne.n	1fc <AT25SFHoldTillReady+0x18>
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     206:	2380      	movs	r3, #128	; 0x80
     208:	02db      	lsls	r3, r3, #11
     20a:	61bb      	str	r3, [r7, #24]
	pinHigh(cs_mem);
}
     20c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     20e:	46c0      	nop			; (mov r8, r8)
     210:	41004400 	.word	0x41004400
     214:	00002701 	.word	0x00002701
     218:	200004c0 	.word	0x200004c0

0000021c <AT25SFChipErase>:
void AT25SFChipErase() {
     21c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     21e:	2580      	movs	r5, #128	; 0x80
     220:	4c08      	ldr	r4, [pc, #32]	; (244 <AT25SFChipErase+0x28>)
     222:	02ed      	lsls	r5, r5, #11

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
     224:	4f08      	ldr	r7, [pc, #32]	; (248 <AT25SFChipErase+0x2c>)
     226:	6165      	str	r5, [r4, #20]
     228:	2106      	movs	r1, #6
     22a:	2001      	movs	r0, #1
     22c:	47b8      	blx	r7
     22e:	4e07      	ldr	r6, [pc, #28]	; (24c <AT25SFChipErase+0x30>)
    pinHigh(cs_mem);

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_CHIP_ERASE);
     230:	2160      	movs	r1, #96	; 0x60
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
     232:	7030      	strb	r0, [r6, #0]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     234:	61a5      	str	r5, [r4, #24]
    dummy_rx = spiDataTransfer(SPI1,OPCODE_CHIP_ERASE);
     236:	2001      	movs	r0, #1
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     238:	6165      	str	r5, [r4, #20]
     23a:	47b8      	blx	r7
     23c:	7030      	strb	r0, [r6, #0]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     23e:	61a5      	str	r5, [r4, #24]
    pinHigh(cs_mem);
}
     240:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     242:	46c0      	nop			; (mov r8, r8)
     244:	41004400 	.word	0x41004400
     248:	00002701 	.word	0x00002701
     24c:	200004c0 	.word	0x200004c0

00000250 <AT25SFWriteBytes>:
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     250:	2380      	movs	r3, #128	; 0x80
    pinHigh(cs_mem);

    return _byte;
}

void AT25SFWriteBytes(uint32_t address, u8_t len, uint8_t *bytes) {
     252:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     254:	4c19      	ldr	r4, [pc, #100]	; (2bc <AT25SFWriteBytes+0x6c>)
     256:	02db      	lsls	r3, r3, #11
     258:	9201      	str	r2, [sp, #4]
     25a:	0007      	movs	r7, r0


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
     25c:	4d18      	ldr	r5, [pc, #96]	; (2c0 <AT25SFWriteBytes+0x70>)
void AT25SFWriteBytes(uint32_t address, u8_t len, uint8_t *bytes) {
     25e:	9100      	str	r1, [sp, #0]
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
     260:	2001      	movs	r0, #1
     262:	6163      	str	r3, [r4, #20]
     264:	2106      	movs	r1, #6
     266:	47a8      	blx	r5
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     268:	2380      	movs	r3, #128	; 0x80
     26a:	4e16      	ldr	r6, [pc, #88]	; (2c4 <AT25SFWriteBytes+0x74>)
     26c:	02db      	lsls	r3, r3, #11
     26e:	7030      	strb	r0, [r6, #0]
    pinHigh(cs_mem);

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_PROGRAM);
     270:	2102      	movs	r1, #2
     272:	61a3      	str	r3, [r4, #24]
     274:	2001      	movs	r0, #1
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     276:	6163      	str	r3, [r4, #20]
     278:	47a8      	blx	r5
    dummy_rx = spiDataTransfer(SPI1,((address & 0xFF0000) >> 16));
     27a:	0c39      	lsrs	r1, r7, #16
    dummy_rx = spiDataTransfer(SPI1,OPCODE_PROGRAM);
     27c:	7030      	strb	r0, [r6, #0]
    dummy_rx = spiDataTransfer(SPI1,((address & 0xFF0000) >> 16));
     27e:	b2c9      	uxtb	r1, r1
     280:	2001      	movs	r0, #1
     282:	47a8      	blx	r5
    dummy_rx = spiDataTransfer(SPI1,((address & 0x00FF00) >>  8));
     284:	0a39      	lsrs	r1, r7, #8
    dummy_rx = spiDataTransfer(SPI1,((address & 0xFF0000) >> 16));
     286:	7030      	strb	r0, [r6, #0]
    dummy_rx = spiDataTransfer(SPI1,((address & 0x00FF00) >>  8));
     288:	b2c9      	uxtb	r1, r1
     28a:	2001      	movs	r0, #1
     28c:	47a8      	blx	r5
    dummy_rx = spiDataTransfer(SPI1,((address & 0x0000FF) >>  0));
     28e:	b2f9      	uxtb	r1, r7
    dummy_rx = spiDataTransfer(SPI1,((address & 0x00FF00) >>  8));
     290:	7030      	strb	r0, [r6, #0]
    dummy_rx = spiDataTransfer(SPI1,((address & 0x0000FF) >>  0));
     292:	2001      	movs	r0, #1
     294:	47a8      	blx	r5
     296:	9b00      	ldr	r3, [sp, #0]
     298:	9f01      	ldr	r7, [sp, #4]
     29a:	7030      	strb	r0, [r6, #0]
     29c:	18fb      	adds	r3, r7, r3
     29e:	9300      	str	r3, [sp, #0]

    for (u8_t pos = 0; pos < len; ++pos) {
     2a0:	9b00      	ldr	r3, [sp, #0]
     2a2:	429f      	cmp	r7, r3
     2a4:	d103      	bne.n	2ae <AT25SFWriteBytes+0x5e>
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     2a6:	2380      	movs	r3, #128	; 0x80
     2a8:	02db      	lsls	r3, r3, #11
     2aa:	61a3      	str	r3, [r4, #24]
        dummy_rx = spiDataTransfer(SPI1, bytes[pos]);
    }

    pinHigh(cs_mem);

}
     2ac:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
        dummy_rx = spiDataTransfer(SPI1, bytes[pos]);
     2ae:	7839      	ldrb	r1, [r7, #0]
     2b0:	2001      	movs	r0, #1
     2b2:	47a8      	blx	r5
     2b4:	3701      	adds	r7, #1
     2b6:	7030      	strb	r0, [r6, #0]
     2b8:	e7f2      	b.n	2a0 <AT25SFWriteBytes+0x50>
     2ba:	46c0      	nop			; (mov r8, r8)
     2bc:	41004400 	.word	0x41004400
     2c0:	00002701 	.word	0x00002701
     2c4:	200004c0 	.word	0x200004c0

000002c8 <AT25SEWritePage>:
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     2c8:	2380      	movs	r3, #128	; 0x80
    delay_ms(70);

}


u8_t AT25SEWritePage(u32_t startingAddress, u8_t *data) {
     2ca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     2cc:	4c18      	ldr	r4, [pc, #96]	; (330 <AT25SEWritePage+0x68>)
     2ce:	02db      	lsls	r3, r3, #11
     2d0:	0007      	movs	r7, r0

    u8_t bytesSent = 0;


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
     2d2:	4e18      	ldr	r6, [pc, #96]	; (334 <AT25SEWritePage+0x6c>)
u8_t AT25SEWritePage(u32_t startingAddress, u8_t *data) {
     2d4:	9101      	str	r1, [sp, #4]
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
     2d6:	2001      	movs	r0, #1
     2d8:	6163      	str	r3, [r4, #20]
     2da:	2106      	movs	r1, #6
     2dc:	47b0      	blx	r6
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     2de:	2380      	movs	r3, #128	; 0x80
     2e0:	4d15      	ldr	r5, [pc, #84]	; (338 <AT25SEWritePage+0x70>)
     2e2:	02db      	lsls	r3, r3, #11
     2e4:	7028      	strb	r0, [r5, #0]
    pinHigh(cs_mem);


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_PROGRAM);
     2e6:	2102      	movs	r1, #2
     2e8:	61a3      	str	r3, [r4, #24]
     2ea:	2001      	movs	r0, #1
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     2ec:	6163      	str	r3, [r4, #20]
     2ee:	47b0      	blx	r6
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     2f0:	0c39      	lsrs	r1, r7, #16
    dummy_rx = spiDataTransfer(SPI1,OPCODE_PROGRAM);
     2f2:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     2f4:	b2c9      	uxtb	r1, r1
     2f6:	2001      	movs	r0, #1
     2f8:	47b0      	blx	r6
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     2fa:	0a39      	lsrs	r1, r7, #8
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     2fc:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     2fe:	b2c9      	uxtb	r1, r1
     300:	2001      	movs	r0, #1
     302:	47b0      	blx	r6
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
     304:	b2f9      	uxtb	r1, r7
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     306:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
     308:	2001      	movs	r0, #1
     30a:	47b0      	blx	r6
     30c:	9f01      	ldr	r7, [sp, #4]
     30e:	7028      	strb	r0, [r5, #0]
     310:	1c7b      	adds	r3, r7, #1
     312:	33ff      	adds	r3, #255	; 0xff
     314:	9301      	str	r3, [sp, #4]


    for (u16_t pos = 0; pos < 256; ++pos) {
        ++bytesSent;
        dummy_rx = spiDataTransfer(SPI1,data[pos]);
     316:	7839      	ldrb	r1, [r7, #0]
     318:	2001      	movs	r0, #1
     31a:	47b0      	blx	r6
    for (u16_t pos = 0; pos < 256; ++pos) {
     31c:	9b01      	ldr	r3, [sp, #4]
     31e:	3701      	adds	r7, #1
        dummy_rx = spiDataTransfer(SPI1,data[pos]);
     320:	7028      	strb	r0, [r5, #0]
    for (u16_t pos = 0; pos < 256; ++pos) {
     322:	42bb      	cmp	r3, r7
     324:	d1f7      	bne.n	316 <AT25SEWritePage+0x4e>
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     326:	2380      	movs	r3, #128	; 0x80
     328:	02db      	lsls	r3, r3, #11
    }
    pinHigh(cs_mem);


    return bytesSent;
}
     32a:	2000      	movs	r0, #0
     32c:	61a3      	str	r3, [r4, #24]
     32e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
     330:	41004400 	.word	0x41004400
     334:	00002701 	.word	0x00002701
     338:	200004c0 	.word	0x200004c0

0000033c <AT25SEreadSample>:
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     33c:	2380      	movs	r3, #128	; 0x80

void AT25SEreadSample(u32_t startingAddress, u8_t len, u8_t *data) {
     33e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     340:	4f17      	ldr	r7, [pc, #92]	; (3a0 <AT25SEreadSample+0x64>)
     342:	02db      	lsls	r3, r3, #11
     344:	9201      	str	r2, [sp, #4]
     346:	0004      	movs	r4, r0

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
     348:	4d16      	ldr	r5, [pc, #88]	; (3a4 <AT25SEreadSample+0x68>)
void AT25SEreadSample(u32_t startingAddress, u8_t len, u8_t *data) {
     34a:	9100      	str	r1, [sp, #0]
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
     34c:	2001      	movs	r0, #1
     34e:	617b      	str	r3, [r7, #20]
     350:	210b      	movs	r1, #11
     352:	47a8      	blx	r5
     354:	4e14      	ldr	r6, [pc, #80]	; (3a8 <AT25SEreadSample+0x6c>)
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     356:	0c21      	lsrs	r1, r4, #16
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
     358:	7030      	strb	r0, [r6, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     35a:	b2c9      	uxtb	r1, r1
     35c:	2001      	movs	r0, #1
     35e:	47a8      	blx	r5
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     360:	0a21      	lsrs	r1, r4, #8
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     362:	7030      	strb	r0, [r6, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     364:	b2c9      	uxtb	r1, r1
     366:	2001      	movs	r0, #1
     368:	47a8      	blx	r5
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
     36a:	b2e1      	uxtb	r1, r4
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     36c:	7030      	strb	r0, [r6, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
     36e:	2001      	movs	r0, #1
     370:	47a8      	blx	r5
    dummy_rx = spiDataTransfer(SPI1, 0xFF);
     372:	21ff      	movs	r1, #255	; 0xff
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
     374:	7030      	strb	r0, [r6, #0]
    dummy_rx = spiDataTransfer(SPI1, 0xFF);
     376:	2001      	movs	r0, #1
     378:	47a8      	blx	r5
     37a:	9b00      	ldr	r3, [sp, #0]
     37c:	9c01      	ldr	r4, [sp, #4]
     37e:	7030      	strb	r0, [r6, #0]
     380:	18e3      	adds	r3, r4, r3
     382:	9300      	str	r3, [sp, #0]


    for (u8_t pos = 0; pos < len; ++pos) {
     384:	9b00      	ldr	r3, [sp, #0]
     386:	429c      	cmp	r4, r3
     388:	d103      	bne.n	392 <AT25SEreadSample+0x56>
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     38a:	2380      	movs	r3, #128	; 0x80
     38c:	02db      	lsls	r3, r3, #11
     38e:	61bb      	str	r3, [r7, #24]
        data[pos] = spiDataTransfer(SPI1,dummy_rx);
    }
    pinHigh(cs_mem);

}
     390:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
        data[pos] = spiDataTransfer(SPI1,dummy_rx);
     392:	7831      	ldrb	r1, [r6, #0]
     394:	2001      	movs	r0, #1
     396:	47a8      	blx	r5
     398:	7020      	strb	r0, [r4, #0]
     39a:	3401      	adds	r4, #1
     39c:	e7f2      	b.n	384 <AT25SEreadSample+0x48>
     39e:	46c0      	nop			; (mov r8, r8)
     3a0:	41004400 	.word	0x41004400
     3a4:	00002701 	.word	0x00002701
     3a8:	200004c0 	.word	0x200004c0

000003ac <AT25SEreadPage>:
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     3ac:	2380      	movs	r3, #128	; 0x80

void AT25SEreadPage(u32_t startingAddress, u8_t *data) {
     3ae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     3b0:	4f16      	ldr	r7, [pc, #88]	; (40c <AT25SEreadPage+0x60>)
     3b2:	02db      	lsls	r3, r3, #11
     3b4:	0006      	movs	r6, r0


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
     3b6:	4c16      	ldr	r4, [pc, #88]	; (410 <AT25SEreadPage+0x64>)
void AT25SEreadPage(u32_t startingAddress, u8_t *data) {
     3b8:	9101      	str	r1, [sp, #4]
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
     3ba:	2001      	movs	r0, #1
     3bc:	617b      	str	r3, [r7, #20]
     3be:	210b      	movs	r1, #11
     3c0:	47a0      	blx	r4
     3c2:	4d14      	ldr	r5, [pc, #80]	; (414 <AT25SEreadPage+0x68>)
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     3c4:	0c31      	lsrs	r1, r6, #16
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
     3c6:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     3c8:	b2c9      	uxtb	r1, r1
     3ca:	2001      	movs	r0, #1
     3cc:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     3ce:	0a31      	lsrs	r1, r6, #8
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     3d0:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     3d2:	b2c9      	uxtb	r1, r1
     3d4:	2001      	movs	r0, #1
     3d6:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
     3d8:	b2f1      	uxtb	r1, r6
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     3da:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
     3dc:	2001      	movs	r0, #1
     3de:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1, 0xFF);
     3e0:	21ff      	movs	r1, #255	; 0xff
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
     3e2:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1, 0xFF);
     3e4:	2001      	movs	r0, #1
     3e6:	47a0      	blx	r4
     3e8:	9e01      	ldr	r6, [sp, #4]
     3ea:	7028      	strb	r0, [r5, #0]
     3ec:	1c73      	adds	r3, r6, #1
     3ee:	33ff      	adds	r3, #255	; 0xff
     3f0:	9301      	str	r3, [sp, #4]


    for (u16_t pos = 0; pos < 256; ++pos) {
        data[pos] = spiDataTransfer(SPI1,dummy_rx);
     3f2:	7829      	ldrb	r1, [r5, #0]
     3f4:	2001      	movs	r0, #1
     3f6:	47a0      	blx	r4
    for (u16_t pos = 0; pos < 256; ++pos) {
     3f8:	9b01      	ldr	r3, [sp, #4]
        data[pos] = spiDataTransfer(SPI1,dummy_rx);
     3fa:	7030      	strb	r0, [r6, #0]
     3fc:	3601      	adds	r6, #1
    for (u16_t pos = 0; pos < 256; ++pos) {
     3fe:	429e      	cmp	r6, r3
     400:	d1f7      	bne.n	3f2 <AT25SEreadPage+0x46>
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     402:	2380      	movs	r3, #128	; 0x80
     404:	02db      	lsls	r3, r3, #11
     406:	61bb      	str	r3, [r7, #24]
    }
    pinHigh(cs_mem);

}
     408:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
     40a:	46c0      	nop			; (mov r8, r8)
     40c:	41004400 	.word	0x41004400
     410:	00002701 	.word	0x00002701
     414:	200004c0 	.word	0x200004c0

00000418 <readMS5803AdcResults>:
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     418:	2380      	movs	r3, #128	; 0x80
#include <boardDefines.h>
#include <math.h>
//#include <tgmath.h>


u32_t readMS5803AdcResults() {
     41a:	b5f0      	push	{r4, r5, r6, r7, lr}
     41c:	4f24      	ldr	r7, [pc, #144]	; (4b0 <readMS5803AdcResults+0x98>)
     41e:	021b      	lsls	r3, r3, #8
     420:	617b      	str	r3, [r7, #20]
    pinLow(cs_baro);
//    dummy_rx = spiDataTransfer(SPI1, cmdAdcRead_);
//    u8_t _byte1 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte2 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte3 = spiDataTransfer(SPI1,dummy_tx);
    byteOut(spi2SCK,spi2MOSI, cmdAdcRead_);
     422:	2300      	movs	r3, #0
     424:	4d23      	ldr	r5, [pc, #140]	; (4b4 <readMS5803AdcResults+0x9c>)
u32_t readMS5803AdcResults() {
     426:	b087      	sub	sp, #28
    byteOut(spi2SCK,spi2MOSI, cmdAdcRead_);
     428:	79a9      	ldrb	r1, [r5, #6]
     42a:	796c      	ldrb	r4, [r5, #5]
     42c:	9300      	str	r3, [sp, #0]
     42e:	786b      	ldrb	r3, [r5, #1]
     430:	782a      	ldrb	r2, [r5, #0]
     432:	0209      	lsls	r1, r1, #8
     434:	4321      	orrs	r1, r4
     436:	021b      	lsls	r3, r3, #8
     438:	79ec      	ldrb	r4, [r5, #7]
     43a:	4313      	orrs	r3, r2
     43c:	78aa      	ldrb	r2, [r5, #2]
     43e:	0424      	lsls	r4, r4, #16
     440:	4321      	orrs	r1, r4
     442:	0412      	lsls	r2, r2, #16
     444:	7a2c      	ldrb	r4, [r5, #8]
     446:	4313      	orrs	r3, r2
     448:	78ea      	ldrb	r2, [r5, #3]
     44a:	0624      	lsls	r4, r4, #24
     44c:	430c      	orrs	r4, r1
     44e:	0612      	lsls	r2, r2, #24
     450:	7a69      	ldrb	r1, [r5, #9]
     452:	431a      	orrs	r2, r3
     454:	0020      	movs	r0, r4
     456:	792b      	ldrb	r3, [r5, #4]
     458:	4e17      	ldr	r6, [pc, #92]	; (4b8 <readMS5803AdcResults+0xa0>)
     45a:	9102      	str	r1, [sp, #8]
     45c:	47b0      	blx	r6
    u8_t _byte1 = byteIn(spi2SCK,spi2MISO);
     45e:	7aeb      	ldrb	r3, [r5, #11]
     460:	7aaa      	ldrb	r2, [r5, #10]
     462:	021b      	lsls	r3, r3, #8
     464:	431a      	orrs	r2, r3
     466:	7b2b      	ldrb	r3, [r5, #12]
     468:	4e14      	ldr	r6, [pc, #80]	; (4bc <readMS5803AdcResults+0xa4>)
     46a:	041b      	lsls	r3, r3, #16
     46c:	4313      	orrs	r3, r2
     46e:	7b6a      	ldrb	r2, [r5, #13]
     470:	7bad      	ldrb	r5, [r5, #14]
     472:	0612      	lsls	r2, r2, #24
     474:	431a      	orrs	r2, r3
     476:	9902      	ldr	r1, [sp, #8]
     478:	002b      	movs	r3, r5
     47a:	0020      	movs	r0, r4
     47c:	9203      	str	r2, [sp, #12]
     47e:	47b0      	blx	r6
    u8_t _byte2 = byteIn(spi2SCK,spi2MISO);
     480:	9a03      	ldr	r2, [sp, #12]
    u8_t _byte1 = byteIn(spi2SCK,spi2MISO);
     482:	9004      	str	r0, [sp, #16]
    u8_t _byte2 = byteIn(spi2SCK,spi2MISO);
     484:	002b      	movs	r3, r5
     486:	9902      	ldr	r1, [sp, #8]
     488:	0020      	movs	r0, r4
     48a:	47b0      	blx	r6
    u8_t _byte3 = byteIn(spi2SCK,spi2MISO);
     48c:	9a03      	ldr	r2, [sp, #12]
    u8_t _byte2 = byteIn(spi2SCK,spi2MISO);
     48e:	9005      	str	r0, [sp, #20]
    u8_t _byte3 = byteIn(spi2SCK,spi2MISO);
     490:	002b      	movs	r3, r5
     492:	0020      	movs	r0, r4
     494:	9902      	ldr	r1, [sp, #8]
     496:	47b0      	blx	r6
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     498:	2380      	movs	r3, #128	; 0x80
     49a:	021b      	lsls	r3, r3, #8
     49c:	61bb      	str	r3, [r7, #24]
    pinHigh(cs_baro);

    u32_t _receive = (_byte1 << 16) | (_byte2 << 8) | (_byte3);
     49e:	9b04      	ldr	r3, [sp, #16]
     4a0:	9a05      	ldr	r2, [sp, #20]
     4a2:	041b      	lsls	r3, r3, #16
     4a4:	0215      	lsls	r5, r2, #8
     4a6:	431d      	orrs	r5, r3
     4a8:	4328      	orrs	r0, r5
    return _receive;
}
     4aa:	b007      	add	sp, #28
     4ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
     4ae:	46c0      	nop			; (mov r8, r8)
     4b0:	41004400 	.word	0x41004400
     4b4:	00006350 	.word	0x00006350
     4b8:	00000c49 	.word	0x00000c49
     4bc:	00000cb5 	.word	0x00000cb5

000004c0 <ConvertPressureTemperature>:

void ConvertPressureTemperature(u32_t pressureRaw, u32_t tempRaw, u32_t* temperatureCelcus, int32_t* pressureMbar ) {
     4c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    const u16_t C5 = coefficients_[4];
    const u16_t C6 = coefficients_[5];

    // calculate 1st order pressure and temperature (MS5607 1st order algorithm)
    const  int32_t dT = (tempRaw) - ((int32_t)C5 << 8);
    *temperatureCelcus  = 2000 + (((int64_t)dT * C6) >> 23) ;
     4c2:	2600      	movs	r6, #0
void ConvertPressureTemperature(u32_t pressureRaw, u32_t tempRaw, u32_t* temperatureCelcus, int32_t* pressureMbar ) {
     4c4:	b089      	sub	sp, #36	; 0x24
     4c6:	9306      	str	r3, [sp, #24]
    const u16_t C1 = coefficients_[0];
     4c8:	4b25      	ldr	r3, [pc, #148]	; (560 <ConvertPressureTemperature+0xa0>)
void ConvertPressureTemperature(u32_t pressureRaw, u32_t tempRaw, u32_t* temperatureCelcus, int32_t* pressureMbar ) {
     4ca:	9205      	str	r2, [sp, #20]
    const u16_t C1 = coefficients_[0];
     4cc:	881a      	ldrh	r2, [r3, #0]
void ConvertPressureTemperature(u32_t pressureRaw, u32_t tempRaw, u32_t* temperatureCelcus, int32_t* pressureMbar ) {
     4ce:	9004      	str	r0, [sp, #16]
    const u16_t C1 = coefficients_[0];
     4d0:	9201      	str	r2, [sp, #4]
    const u16_t C2 = coefficients_[1];
     4d2:	885a      	ldrh	r2, [r3, #2]
    *temperatureCelcus  = 2000 + (((int64_t)dT * C6) >> 23) ;
     4d4:	4c23      	ldr	r4, [pc, #140]	; (564 <ConvertPressureTemperature+0xa4>)
    const u16_t C2 = coefficients_[1];
     4d6:	9202      	str	r2, [sp, #8]
    const u16_t C4 = coefficients_[3];
     4d8:	88da      	ldrh	r2, [r3, #6]
    const u16_t C3 = coefficients_[2];
     4da:	889d      	ldrh	r5, [r3, #4]
    const u16_t C4 = coefficients_[3];
     4dc:	9203      	str	r2, [sp, #12]
    const  int32_t dT = (tempRaw) - ((int32_t)C5 << 8);
     4de:	891f      	ldrh	r7, [r3, #8]
     4e0:	023f      	lsls	r7, r7, #8
     4e2:	1bcf      	subs	r7, r1, r7
    *temperatureCelcus  = 2000 + (((int64_t)dT * C6) >> 23) ;
     4e4:	17fa      	asrs	r2, r7, #31
     4e6:	9207      	str	r2, [sp, #28]
     4e8:	8958      	ldrh	r0, [r3, #10]
     4ea:	003a      	movs	r2, r7
     4ec:	17fb      	asrs	r3, r7, #31
     4ee:	0031      	movs	r1, r6
     4f0:	47a0      	blx	r4
     4f2:	23fa      	movs	r3, #250	; 0xfa
     4f4:	0249      	lsls	r1, r1, #9
     4f6:	0dc0      	lsrs	r0, r0, #23
     4f8:	4308      	orrs	r0, r1
     4fa:	00db      	lsls	r3, r3, #3
     4fc:	18c0      	adds	r0, r0, r3
     4fe:	9b05      	ldr	r3, [sp, #20]

    const  int64_t OFF   = ((int64_t)C2 << 16) + ((C4 * (int64_t)dT) >> 7);
     const  int64_t SENS  =  ((int64_t)C1 << 15) + ((C3 * (int64_t)dT) >> 8);
     500:	003a      	movs	r2, r7
    *temperatureCelcus  = 2000 + (((int64_t)dT * C6) >> 23) ;
     502:	6018      	str	r0, [r3, #0]
     const  int64_t SENS  =  ((int64_t)C1 << 15) + ((C3 * (int64_t)dT) >> 8);
     504:	0031      	movs	r1, r6
     506:	17fb      	asrs	r3, r7, #31
     508:	0028      	movs	r0, r5
     50a:	47a0      	blx	r4
     50c:	060c      	lsls	r4, r1, #24
     50e:	120b      	asrs	r3, r1, #8
     510:	0031      	movs	r1, r6
     512:	0a02      	lsrs	r2, r0, #8
     514:	4322      	orrs	r2, r4
     516:	9c01      	ldr	r4, [sp, #4]
     518:	03e0      	lsls	r0, r4, #15
     51a:	1880      	adds	r0, r0, r2
     51c:	4159      	adcs	r1, r3
    *pressureMbar = ((((pressureRaw * SENS) >> 21) - OFF) >> 15);
     51e:	4c11      	ldr	r4, [pc, #68]	; (564 <ConvertPressureTemperature+0xa4>)
     520:	9a04      	ldr	r2, [sp, #16]
     522:	0033      	movs	r3, r6
     524:	47a0      	blx	r4
     526:	02cb      	lsls	r3, r1, #11
     528:	0d44      	lsrs	r4, r0, #21
    const  int64_t OFF   = ((int64_t)C2 << 16) + ((C4 * (int64_t)dT) >> 7);
     52a:	003a      	movs	r2, r7
    *pressureMbar = ((((pressureRaw * SENS) >> 21) - OFF) >> 15);
     52c:	431c      	orrs	r4, r3
    const  int64_t OFF   = ((int64_t)C2 << 16) + ((C4 * (int64_t)dT) >> 7);
     52e:	4f0d      	ldr	r7, [pc, #52]	; (564 <ConvertPressureTemperature+0xa4>)
     530:	9b07      	ldr	r3, [sp, #28]
    *pressureMbar = ((((pressureRaw * SENS) >> 21) - OFF) >> 15);
     532:	154d      	asrs	r5, r1, #21
    const  int64_t OFF   = ((int64_t)C2 << 16) + ((C4 * (int64_t)dT) >> 7);
     534:	9803      	ldr	r0, [sp, #12]
     536:	0031      	movs	r1, r6
     538:	47b8      	blx	r7
     53a:	064f      	lsls	r7, r1, #25
     53c:	11cb      	asrs	r3, r1, #7
     53e:	0031      	movs	r1, r6
     540:	9e02      	ldr	r6, [sp, #8]
     542:	09c2      	lsrs	r2, r0, #7
     544:	433a      	orrs	r2, r7
     546:	0430      	lsls	r0, r6, #16
     548:	1812      	adds	r2, r2, r0
     54a:	414b      	adcs	r3, r1
    *pressureMbar = ((((pressureRaw * SENS) >> 21) - OFF) >> 15);
     54c:	1aa4      	subs	r4, r4, r2
     54e:	419d      	sbcs	r5, r3
     550:	046b      	lsls	r3, r5, #17
     552:	0be4      	lsrs	r4, r4, #15
     554:	431c      	orrs	r4, r3
     556:	9b06      	ldr	r3, [sp, #24]
     558:	601c      	str	r4, [r3, #0]

}
     55a:	b009      	add	sp, #36	; 0x24
     55c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     55e:	46c0      	nop			; (mov r8, r8)
     560:	20000602 	.word	0x20000602
     564:	00003b09 	.word	0x00003b09

00000568 <paToFeetNOAA>:

double paToFeetNOAA(int32_t pressureMbar) {
     568:	b510      	push	{r4, lr}

    double lower =(((double)(pressureMbar)/10)/1013.25);
     56a:	4b0c      	ldr	r3, [pc, #48]	; (59c <paToFeetNOAA+0x34>)
     56c:	4798      	blx	r3
     56e:	4c0c      	ldr	r4, [pc, #48]	; (5a0 <paToFeetNOAA+0x38>)
     570:	2200      	movs	r2, #0
     572:	4b0c      	ldr	r3, [pc, #48]	; (5a4 <paToFeetNOAA+0x3c>)
     574:	47a0      	blx	r4
     576:	2200      	movs	r2, #0
     578:	4b0b      	ldr	r3, [pc, #44]	; (5a8 <paToFeetNOAA+0x40>)
     57a:	47a0      	blx	r4
    double exponent = 0.190284;

    double altFeet = (1-pow(lower,exponent))*145366.45;
     57c:	4a0b      	ldr	r2, [pc, #44]	; (5ac <paToFeetNOAA+0x44>)
     57e:	4b0c      	ldr	r3, [pc, #48]	; (5b0 <paToFeetNOAA+0x48>)
     580:	4c0c      	ldr	r4, [pc, #48]	; (5b4 <paToFeetNOAA+0x4c>)
     582:	47a0      	blx	r4
     584:	4c0c      	ldr	r4, [pc, #48]	; (5b8 <paToFeetNOAA+0x50>)
     586:	0002      	movs	r2, r0
     588:	000b      	movs	r3, r1
     58a:	2000      	movs	r0, #0
     58c:	490b      	ldr	r1, [pc, #44]	; (5bc <paToFeetNOAA+0x54>)
     58e:	47a0      	blx	r4
     590:	4a0b      	ldr	r2, [pc, #44]	; (5c0 <paToFeetNOAA+0x58>)
     592:	4b0c      	ldr	r3, [pc, #48]	; (5c4 <paToFeetNOAA+0x5c>)
     594:	4c0c      	ldr	r4, [pc, #48]	; (5c8 <paToFeetNOAA+0x60>)
     596:	47a0      	blx	r4
    return altFeet;

}
     598:	bd10      	pop	{r4, pc}
     59a:	46c0      	nop			; (mov r8, r8)
     59c:	00005dcd 	.word	0x00005dcd
     5a0:	00004991 	.word	0x00004991
     5a4:	40240000 	.word	0x40240000
     5a8:	408faa00 	.word	0x408faa00
     5ac:	e279dd3c 	.word	0xe279dd3c
     5b0:	3fc85b39 	.word	0x3fc85b39
     5b4:	00002831 	.word	0x00002831
     5b8:	000056f9 	.word	0x000056f9
     5bc:	3ff00000 	.word	0x3ff00000
     5c0:	9999999a 	.word	0x9999999a
     5c4:	4101beb3 	.word	0x4101beb3
     5c8:	000051f9 	.word	0x000051f9

000005cc <readMS5803Coefficients>:
    }
}

*/

void readMS5803Coefficients() {
     5cc:	b5f0      	push	{r4, r5, r6, r7, lr}
     5ce:	2700      	movs	r7, #0
     5d0:	b087      	sub	sp, #28

    u8_t dummy_tx = 0xFF;
    u8_t dummy_rx;

    for (u8_t coeff_num = 0; coeff_num < 6 ; ++coeff_num ) {
        delay_us(600);
     5d2:	2096      	movs	r0, #150	; 0x96
     5d4:	4c28      	ldr	r4, [pc, #160]	; (678 <readMS5803Coefficients+0xac>)
     5d6:	0080      	lsls	r0, r0, #2
     5d8:	47a0      	blx	r4
        u8_t _cmd = MS5803_CMD_PROM_READ + ((coeff_num+1)*2);
        delay_us(600);
     5da:	2096      	movs	r0, #150	; 0x96
     5dc:	0080      	lsls	r0, r0, #2
     5de:	47a0      	blx	r4
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     5e0:	2280      	movs	r2, #128	; 0x80
     5e2:	4b26      	ldr	r3, [pc, #152]	; (67c <readMS5803Coefficients+0xb0>)
     5e4:	0212      	lsls	r2, r2, #8
     5e6:	615a      	str	r2, [r3, #20]
        pinLow(cs_baro);
//      dummy_rx = spiDataTransfer(SPI1, _cmd);
//      u8_t _byte1 = spiDataTransfer(SPI1,dummy_tx);
//      u8_t _byte2 = spiDataTransfer(SPI1,dummy_tx);
        byteOut(spi2SCK,spi2MOSI, _cmd);
     5e8:	003b      	movs	r3, r7
     5ea:	4c25      	ldr	r4, [pc, #148]	; (680 <readMS5803Coefficients+0xb4>)
     5ec:	3b5e      	subs	r3, #94	; 0x5e
     5ee:	b2db      	uxtb	r3, r3
     5f0:	9300      	str	r3, [sp, #0]
     5f2:	7863      	ldrb	r3, [r4, #1]
     5f4:	7822      	ldrb	r2, [r4, #0]
     5f6:	79a1      	ldrb	r1, [r4, #6]
     5f8:	7966      	ldrb	r6, [r4, #5]
     5fa:	021b      	lsls	r3, r3, #8
     5fc:	4313      	orrs	r3, r2
     5fe:	0209      	lsls	r1, r1, #8
     600:	78a2      	ldrb	r2, [r4, #2]
     602:	430e      	orrs	r6, r1
     604:	79e1      	ldrb	r1, [r4, #7]
     606:	0412      	lsls	r2, r2, #16
     608:	4313      	orrs	r3, r2
     60a:	7a20      	ldrb	r0, [r4, #8]
     60c:	78e2      	ldrb	r2, [r4, #3]
     60e:	0409      	lsls	r1, r1, #16
     610:	4331      	orrs	r1, r6
     612:	7a66      	ldrb	r6, [r4, #9]
     614:	0612      	lsls	r2, r2, #24
     616:	0600      	lsls	r0, r0, #24
     618:	4308      	orrs	r0, r1
     61a:	431a      	orrs	r2, r3
     61c:	0031      	movs	r1, r6
     61e:	7923      	ldrb	r3, [r4, #4]
     620:	4d18      	ldr	r5, [pc, #96]	; (684 <readMS5803Coefficients+0xb8>)
     622:	9003      	str	r0, [sp, #12]
     624:	47a8      	blx	r5
        u8_t _byte1 = byteIn(spi2SCK,spi2MISO);
     626:	0022      	movs	r2, r4
     628:	7ad3      	ldrb	r3, [r2, #11]
     62a:	7aa4      	ldrb	r4, [r4, #10]
     62c:	021b      	lsls	r3, r3, #8
     62e:	4323      	orrs	r3, r4
     630:	7b14      	ldrb	r4, [r2, #12]
     632:	7b95      	ldrb	r5, [r2, #14]
     634:	0424      	lsls	r4, r4, #16
     636:	4323      	orrs	r3, r4
     638:	7b54      	ldrb	r4, [r2, #13]
     63a:	0031      	movs	r1, r6
     63c:	0624      	lsls	r4, r4, #24
     63e:	431c      	orrs	r4, r3
     640:	0022      	movs	r2, r4
     642:	002b      	movs	r3, r5
     644:	9404      	str	r4, [sp, #16]
     646:	9803      	ldr	r0, [sp, #12]
     648:	4c0f      	ldr	r4, [pc, #60]	; (688 <readMS5803Coefficients+0xbc>)
     64a:	47a0      	blx	r4
        u8_t _byte2 = byteIn(spi2SCK,spi2MISO);
     64c:	002b      	movs	r3, r5
        u8_t _byte1 = byteIn(spi2SCK,spi2MISO);
     64e:	9005      	str	r0, [sp, #20]
        u8_t _byte2 = byteIn(spi2SCK,spi2MISO);
     650:	9a04      	ldr	r2, [sp, #16]
     652:	9803      	ldr	r0, [sp, #12]
     654:	0031      	movs	r1, r6
     656:	4c0c      	ldr	r4, [pc, #48]	; (688 <readMS5803Coefficients+0xbc>)
     658:	47a0      	blx	r4
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     65a:	2280      	movs	r2, #128	; 0x80
     65c:	4b07      	ldr	r3, [pc, #28]	; (67c <readMS5803Coefficients+0xb0>)
     65e:	0212      	lsls	r2, r2, #8
     660:	619a      	str	r2, [r3, #24]
        pinHigh(cs_baro);
        coefficients_[coeff_num] = (_byte1 << 8) | _byte2;
     662:	9b05      	ldr	r3, [sp, #20]
     664:	021d      	lsls	r5, r3, #8
     666:	4b09      	ldr	r3, [pc, #36]	; (68c <readMS5803Coefficients+0xc0>)
     668:	4328      	orrs	r0, r5
     66a:	53d8      	strh	r0, [r3, r7]
     66c:	3702      	adds	r7, #2
    for (u8_t coeff_num = 0; coeff_num < 6 ; ++coeff_num ) {
     66e:	2f0c      	cmp	r7, #12
     670:	d1af      	bne.n	5d2 <readMS5803Coefficients+0x6>
    }

}
     672:	b007      	add	sp, #28
     674:	bdf0      	pop	{r4, r5, r6, r7, pc}
     676:	46c0      	nop			; (mov r8, r8)
     678:	00000f25 	.word	0x00000f25
     67c:	41004400 	.word	0x41004400
     680:	00006350 	.word	0x00006350
     684:	00000c49 	.word	0x00000c49
     688:	00000cb5 	.word	0x00000cb5
     68c:	20000602 	.word	0x20000602

00000690 <initMS5803Barometer>:

void initMS5803Barometer() {
     690:	b573      	push	{r0, r1, r4, r5, r6, lr}
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     692:	2580      	movs	r5, #128	; 0x80
    u8_t dummy_tx = 0xFF;
    u8_t dummy_rx;

    pinLow(cs_baro);
//   dummy_rx = spiDataTransfer(SPI1, MS5803_CMD_RES);
    byteOut(spi2SCK,spi2MOSI, MS5803_CMD_RES);
     694:	231e      	movs	r3, #30
     696:	4912      	ldr	r1, [pc, #72]	; (6e0 <initMS5803Barometer+0x50>)
     698:	4c12      	ldr	r4, [pc, #72]	; (6e4 <initMS5803Barometer+0x54>)
     69a:	022d      	lsls	r5, r5, #8
     69c:	6165      	str	r5, [r4, #20]
     69e:	9300      	str	r3, [sp, #0]
     6a0:	784b      	ldrb	r3, [r1, #1]
     6a2:	780a      	ldrb	r2, [r1, #0]
     6a4:	021b      	lsls	r3, r3, #8
     6a6:	4313      	orrs	r3, r2
     6a8:	788a      	ldrb	r2, [r1, #2]
     6aa:	1d4e      	adds	r6, r1, #5
     6ac:	0412      	lsls	r2, r2, #16
     6ae:	4313      	orrs	r3, r2
     6b0:	78ca      	ldrb	r2, [r1, #3]
     6b2:	7948      	ldrb	r0, [r1, #5]
     6b4:	0612      	lsls	r2, r2, #24
     6b6:	431a      	orrs	r2, r3
     6b8:	790b      	ldrb	r3, [r1, #4]
     6ba:	7989      	ldrb	r1, [r1, #6]
     6bc:	0209      	lsls	r1, r1, #8
     6be:	4301      	orrs	r1, r0
     6c0:	78b0      	ldrb	r0, [r6, #2]
     6c2:	0400      	lsls	r0, r0, #16
     6c4:	4301      	orrs	r1, r0
     6c6:	78f0      	ldrb	r0, [r6, #3]
     6c8:	0600      	lsls	r0, r0, #24
     6ca:	4308      	orrs	r0, r1
     6cc:	7931      	ldrb	r1, [r6, #4]
     6ce:	4e06      	ldr	r6, [pc, #24]	; (6e8 <initMS5803Barometer+0x58>)
     6d0:	47b0      	blx	r6
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     6d2:	61a5      	str	r5, [r4, #24]
    pinHigh(cs_baro);
    delay_ms(200);
     6d4:	20c8      	movs	r0, #200	; 0xc8
     6d6:	4b05      	ldr	r3, [pc, #20]	; (6ec <initMS5803Barometer+0x5c>)
     6d8:	4798      	blx	r3
    readMS5803Coefficients();
     6da:	4b05      	ldr	r3, [pc, #20]	; (6f0 <initMS5803Barometer+0x60>)
     6dc:	4798      	blx	r3
    //my_barometer->temperatureCelcus = 2000;




}
     6de:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
     6e0:	00006350 	.word	0x00006350
     6e4:	41004400 	.word	0x41004400
     6e8:	00000c49 	.word	0x00000c49
     6ec:	00000f51 	.word	0x00000f51
     6f0:	000005cd 	.word	0x000005cd

000006f4 <init>:

void init() {


    /* Set 1 Flash Wait State for 48MHz, cf tables 20.9 and 35.27 in SAMD21 Datasheet */
    NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val;
     6f4:	211e      	movs	r1, #30
void init() {
     6f6:	b5f0      	push	{r4, r5, r6, r7, lr}
    NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val;
     6f8:	4ac7      	ldr	r2, [pc, #796]	; (a18 <init+0x324>)
void init() {
     6fa:	b085      	sub	sp, #20
    NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val;
     6fc:	6853      	ldr	r3, [r2, #4]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     6fe:	2401      	movs	r4, #1
     700:	438b      	bics	r3, r1
     702:	391c      	subs	r1, #28
     704:	430b      	orrs	r3, r1
     706:	6053      	str	r3, [r2, #4]


    /* Turn on the digital interface clock */
    PM->APBAMASK.reg |= PM_APBAMASK_GCLK;
     708:	4ac4      	ldr	r2, [pc, #784]	; (a1c <init+0x328>)
     70a:	3106      	adds	r1, #6
     70c:	6993      	ldr	r3, [r2, #24]
     70e:	430b      	orrs	r3, r1
     710:	6193      	str	r3, [r2, #24]


    SystemInit();
     712:	4bc3      	ldr	r3, [pc, #780]	; (a20 <init+0x32c>)
     714:	4798      	blx	r3
    GclkInit();
     716:	4bc3      	ldr	r3, [pc, #780]	; (a24 <init+0x330>)
     718:	4798      	blx	r3
    RtcInit();
     71a:	4bc3      	ldr	r3, [pc, #780]	; (a28 <init+0x334>)
     71c:	4798      	blx	r3
    delayInit();
     71e:	4bc3      	ldr	r3, [pc, #780]	; (a2c <init+0x338>)
     720:	4798      	blx	r3
    adcInit();
     722:	4bc3      	ldr	r3, [pc, #780]	; (a30 <init+0x33c>)
     724:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     726:	2240      	movs	r2, #64	; 0x40
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     728:	21c1      	movs	r1, #193	; 0xc1
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     72a:	4bc2      	ldr	r3, [pc, #776]	; (a34 <init+0x340>)
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     72c:	0089      	lsls	r1, r1, #2
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     72e:	601a      	str	r2, [r3, #0]
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     730:	585a      	ldr	r2, [r3, r1]
     732:	48c1      	ldr	r0, [pc, #772]	; (a38 <init+0x344>)
     734:	4002      	ands	r2, r0
     736:	505a      	str	r2, [r3, r1]
     738:	4bc0      	ldr	r3, [pc, #768]	; (a3c <init+0x348>)
     73a:	0019      	movs	r1, r3
     73c:	3154      	adds	r1, #84	; 0x54
     73e:	780a      	ldrb	r2, [r1, #0]
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     740:	0018      	movs	r0, r3
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     742:	43a2      	bics	r2, r4
     744:	700a      	strb	r2, [r1, #0]
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     746:	2280      	movs	r2, #128	; 0x80
     748:	0352      	lsls	r2, r2, #13
     74a:	609a      	str	r2, [r3, #8]
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     74c:	220f      	movs	r2, #15
     74e:	3033      	adds	r0, #51	; 0x33
     750:	7801      	ldrb	r1, [r0, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     752:	001e      	movs	r6, r3
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     754:	4391      	bics	r1, r2
     756:	4321      	orrs	r1, r4
     758:	7001      	strb	r1, [r0, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     75a:	7cc1      	ldrb	r1, [r0, #19]
     75c:	36c3      	adds	r6, #195	; 0xc3
     75e:	4321      	orrs	r1, r4
     760:	74c1      	strb	r1, [r0, #19]
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     762:	0019      	movs	r1, r3
     764:	2010      	movs	r0, #16
     766:	31b1      	adds	r1, #177	; 0xb1
     768:	780d      	ldrb	r5, [r1, #0]
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     76a:	001f      	movs	r7, r3
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     76c:	4015      	ands	r5, r2
     76e:	4305      	orrs	r5, r0
     770:	700d      	strb	r5, [r1, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     772:	7835      	ldrb	r5, [r6, #0]
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     774:	3788      	adds	r7, #136	; 0x88
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     776:	4325      	orrs	r5, r4
     778:	7035      	strb	r5, [r6, #0]
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     77a:	780d      	ldrb	r5, [r1, #0]
     77c:	4015      	ands	r5, r2
     77e:	4305      	orrs	r5, r0
     780:	700d      	strb	r5, [r1, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     782:	7835      	ldrb	r5, [r6, #0]
     784:	4325      	orrs	r5, r4
     786:	7035      	strb	r5, [r6, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     788:	7d35      	ldrb	r5, [r6, #20]
     78a:	43a5      	bics	r5, r4
     78c:	7535      	strb	r5, [r6, #20]
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     78e:	2580      	movs	r5, #128	; 0x80
     790:	042d      	lsls	r5, r5, #16
     792:	9703      	str	r7, [sp, #12]
     794:	603d      	str	r5, [r7, #0]
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     796:	2594      	movs	r5, #148	; 0x94
     798:	46ac      	mov	ip, r5
     79a:	2680      	movs	r6, #128	; 0x80
     79c:	449c      	add	ip, r3
     79e:	4665      	mov	r5, ip
     7a0:	0436      	lsls	r6, r6, #16
     7a2:	602e      	str	r6, [r5, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     7a4:	001e      	movs	r6, r3
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     7a6:	780d      	ldrb	r5, [r1, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     7a8:	36c2      	adds	r6, #194	; 0xc2
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     7aa:	4395      	bics	r5, r2
     7ac:	4325      	orrs	r5, r4
     7ae:	700d      	strb	r5, [r1, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     7b0:	7835      	ldrb	r5, [r6, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     7b2:	2702      	movs	r7, #2
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     7b4:	4325      	orrs	r5, r4
     7b6:	7035      	strb	r5, [r6, #0]
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     7b8:	780d      	ldrb	r5, [r1, #0]
     7ba:	4395      	bics	r5, r2
     7bc:	4325      	orrs	r5, r4
     7be:	700d      	strb	r5, [r1, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     7c0:	001d      	movs	r5, r3
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     7c2:	7831      	ldrb	r1, [r6, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     7c4:	35d6      	adds	r5, #214	; 0xd6
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     7c6:	4321      	orrs	r1, r4
     7c8:	7031      	strb	r1, [r6, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     7ca:	7829      	ldrb	r1, [r5, #0]
     7cc:	3e79      	subs	r6, #121	; 0x79
     7ce:	43a1      	bics	r1, r4
     7d0:	7029      	strb	r1, [r5, #0]
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     7d2:	2180      	movs	r1, #128	; 0x80
     7d4:	9d03      	ldr	r5, [sp, #12]
     7d6:	03c9      	lsls	r1, r1, #15
     7d8:	6029      	str	r1, [r5, #0]
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     7da:	2580      	movs	r5, #128	; 0x80
     7dc:	4661      	mov	r1, ip
     7de:	03ed      	lsls	r5, r5, #15
     7e0:	600d      	str	r5, [r1, #0]
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     7e2:	0019      	movs	r1, r3
     7e4:	3131      	adds	r1, #49	; 0x31
     7e6:	780d      	ldrb	r5, [r1, #0]
     7e8:	4015      	ands	r5, r2
     7ea:	4328      	orrs	r0, r5
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     7ec:	001d      	movs	r5, r3
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     7ee:	7008      	strb	r0, [r1, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     7f0:	3543      	adds	r5, #67	; 0x43
     7f2:	7828      	ldrb	r0, [r5, #0]
     7f4:	4320      	orrs	r0, r4
     7f6:	7028      	strb	r0, [r5, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     7f8:	7da8      	ldrb	r0, [r5, #22]
     7fa:	3505      	adds	r5, #5
     7fc:	43a0      	bics	r0, r4
     7fe:	7468      	strb	r0, [r5, #17]
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     800:	2080      	movs	r0, #128	; 0x80
     802:	0480      	lsls	r0, r0, #18
     804:	6098      	str	r0, [r3, #8]
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     806:	6158      	str	r0, [r3, #20]
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     808:	7808      	ldrb	r0, [r1, #0]
     80a:	4390      	bics	r0, r2
     80c:	4320      	orrs	r0, r4
     80e:	7008      	strb	r0, [r1, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     810:	0018      	movs	r0, r3
     812:	3042      	adds	r0, #66	; 0x42
     814:	7801      	ldrb	r1, [r0, #0]
     816:	4321      	orrs	r1, r4
     818:	7001      	strb	r1, [r0, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     81a:	7d81      	ldrb	r1, [r0, #22]
     81c:	43a1      	bics	r1, r4
     81e:	7581      	strb	r1, [r0, #22]
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     820:	2180      	movs	r1, #128	; 0x80
     822:	0449      	lsls	r1, r1, #17
     824:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     826:	6159      	str	r1, [r3, #20]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     828:	7829      	ldrb	r1, [r5, #0]
     82a:	43a1      	bics	r1, r4
     82c:	7029      	strb	r1, [r5, #0]
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     82e:	2180      	movs	r1, #128	; 0x80
     830:	0049      	lsls	r1, r1, #1
     832:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     834:	7831      	ldrb	r1, [r6, #0]
     836:	43a1      	bics	r1, r4
     838:	7031      	strb	r1, [r6, #0]
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     83a:	2180      	movs	r1, #128	; 0x80
     83c:	0089      	lsls	r1, r1, #2
     83e:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     840:	0019      	movs	r1, r3
     842:	314b      	adds	r1, #75	; 0x4b
     844:	7808      	ldrb	r0, [r1, #0]
     846:	43a0      	bics	r0, r4
     848:	7008      	strb	r0, [r1, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     84a:	7808      	ldrb	r0, [r1, #0]
     84c:	4338      	orrs	r0, r7
     84e:	7008      	strb	r0, [r1, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     850:	2080      	movs	r0, #128	; 0x80
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     852:	371e      	adds	r7, #30
     854:	46bc      	mov	ip, r7
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     856:	0100      	lsls	r0, r0, #4
     858:	6058      	str	r0, [r3, #4]
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     85a:	4879      	ldr	r0, [pc, #484]	; (a40 <init+0x34c>)
     85c:	7800      	ldrb	r0, [r0, #0]
     85e:	4010      	ands	r0, r2
     860:	4338      	orrs	r0, r7
     862:	4f77      	ldr	r7, [pc, #476]	; (a40 <init+0x34c>)
     864:	7038      	strb	r0, [r7, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     866:	7808      	ldrb	r0, [r1, #0]
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     868:	4667      	mov	r7, ip
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     86a:	4320      	orrs	r0, r4
     86c:	7008      	strb	r0, [r1, #0]
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     86e:	0018      	movs	r0, r3
     870:	3034      	adds	r0, #52	; 0x34
     872:	7801      	ldrb	r1, [r0, #0]
     874:	4011      	ands	r1, r2
     876:	4339      	orrs	r1, r7
     878:	7001      	strb	r1, [r0, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     87a:	7831      	ldrb	r1, [r6, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     87c:	3f1e      	subs	r7, #30
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     87e:	4321      	orrs	r1, r4
     880:	7031      	strb	r1, [r6, #0]
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     882:	2602      	movs	r6, #2
     884:	7801      	ldrb	r1, [r0, #0]
     886:	4391      	bics	r1, r2
     888:	4331      	orrs	r1, r6
     88a:	7001      	strb	r1, [r0, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     88c:	7829      	ldrb	r1, [r5, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     88e:	3096      	adds	r0, #150	; 0x96
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     890:	4321      	orrs	r1, r4
     892:	7029      	strb	r1, [r5, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     894:	7801      	ldrb	r1, [r0, #0]
     896:	001e      	movs	r6, r3
     898:	43a1      	bics	r1, r4
     89a:	7001      	strb	r1, [r0, #0]
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     89c:	2180      	movs	r1, #128	; 0x80
     89e:	9803      	ldr	r0, [sp, #12]
     8a0:	00c9      	lsls	r1, r1, #3
     8a2:	6001      	str	r1, [r0, #0]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     8a4:	0018      	movs	r0, r3
     8a6:	3098      	adds	r0, #152	; 0x98
     8a8:	6001      	str	r1, [r0, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     8aa:	78a8      	ldrb	r0, [r5, #2]
     8ac:	3651      	adds	r6, #81	; 0x51
     8ae:	43a0      	bics	r0, r4
     8b0:	70a8      	strb	r0, [r5, #2]
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     8b2:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     8b4:	6199      	str	r1, [r3, #24]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     8b6:	7a29      	ldrb	r1, [r5, #8]
     8b8:	43a1      	bics	r1, r4
     8ba:	7229      	strb	r1, [r5, #8]
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     8bc:	2180      	movs	r1, #128	; 0x80
     8be:	0249      	lsls	r1, r1, #9
     8c0:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     8c2:	7831      	ldrb	r1, [r6, #0]
     8c4:	43a1      	bics	r1, r4
     8c6:	7031      	strb	r1, [r6, #0]
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     8c8:	2180      	movs	r1, #128	; 0x80
     8ca:	0289      	lsls	r1, r1, #10
     8cc:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     8ce:	0019      	movs	r1, r3
     8d0:	3153      	adds	r1, #83	; 0x53
     8d2:	7808      	ldrb	r0, [r1, #0]
     8d4:	43a0      	bics	r0, r4
     8d6:	7008      	strb	r0, [r1, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     8d8:	7808      	ldrb	r0, [r1, #0]
     8da:	4338      	orrs	r0, r7
     8dc:	7008      	strb	r0, [r1, #0]
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     8de:	001f      	movs	r7, r3
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     8e0:	2080      	movs	r0, #128	; 0x80
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     8e2:	3739      	adds	r7, #57	; 0x39
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     8e4:	0300      	lsls	r0, r0, #12
     8e6:	6058      	str	r0, [r3, #4]
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     8e8:	9703      	str	r7, [sp, #12]
     8ea:	7838      	ldrb	r0, [r7, #0]
     8ec:	4667      	mov	r7, ip
     8ee:	4010      	ands	r0, r2
     8f0:	4338      	orrs	r0, r7
     8f2:	9f03      	ldr	r7, [sp, #12]
     8f4:	7038      	strb	r0, [r7, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     8f6:	7808      	ldrb	r0, [r1, #0]
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     8f8:	4667      	mov	r7, ip
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     8fa:	4320      	orrs	r0, r4
     8fc:	7008      	strb	r0, [r1, #0]
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     8fe:	0018      	movs	r0, r3
     900:	3038      	adds	r0, #56	; 0x38
     902:	7801      	ldrb	r1, [r0, #0]
     904:	4011      	ands	r1, r2
     906:	4339      	orrs	r1, r7
     908:	7001      	strb	r1, [r0, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     90a:	7831      	ldrb	r1, [r6, #0]
     90c:	4321      	orrs	r1, r4
     90e:	7031      	strb	r1, [r6, #0]
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     910:	2602      	movs	r6, #2
     912:	7801      	ldrb	r1, [r0, #0]
     914:	4391      	bics	r1, r2
     916:	4331      	orrs	r1, r6
     918:	7001      	strb	r1, [r0, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     91a:	7a29      	ldrb	r1, [r5, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     91c:	3014      	adds	r0, #20
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     91e:	4321      	orrs	r1, r4
     920:	7229      	strb	r1, [r5, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     922:	7981      	ldrb	r1, [r0, #6]
     924:	43a1      	bics	r1, r4
     926:	7181      	strb	r1, [r0, #6]
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     928:	2180      	movs	r1, #128	; 0x80
     92a:	02c9      	lsls	r1, r1, #11
     92c:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     92e:	6199      	str	r1, [r3, #24]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     930:	7801      	ldrb	r1, [r0, #0]
     932:	43a1      	bics	r1, r4
     934:	7001      	strb	r1, [r0, #0]
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     936:	2180      	movs	r1, #128	; 0x80
     938:	0149      	lsls	r1, r1, #5
     93a:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     93c:	7881      	ldrb	r1, [r0, #2]
     93e:	43a1      	bics	r1, r4
     940:	7081      	strb	r1, [r0, #2]
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     942:	2180      	movs	r1, #128	; 0x80
     944:	01c9      	lsls	r1, r1, #7
     946:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     948:	0019      	movs	r1, r3
     94a:	314d      	adds	r1, #77	; 0x4d
     94c:	7808      	ldrb	r0, [r1, #0]
     94e:	43a0      	bics	r0, r4
     950:	7008      	strb	r0, [r1, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     952:	7808      	ldrb	r0, [r1, #0]
     954:	4330      	orrs	r0, r6
     956:	7008      	strb	r0, [r1, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     958:	2180      	movs	r1, #128	; 0x80
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     95a:	0018      	movs	r0, r3
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     95c:	0189      	lsls	r1, r1, #6
     95e:	6059      	str	r1, [r3, #4]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     960:	304f      	adds	r0, #79	; 0x4f
     962:	7801      	ldrb	r1, [r0, #0]
     964:	43a1      	bics	r1, r4
     966:	7001      	strb	r1, [r0, #0]
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     968:	2180      	movs	r1, #128	; 0x80
     96a:	0209      	lsls	r1, r1, #8
     96c:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     96e:	6199      	str	r1, [r3, #24]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     970:	0019      	movs	r1, r3
     972:	3155      	adds	r1, #85	; 0x55
     974:	7808      	ldrb	r0, [r1, #0]
     976:	43a0      	bics	r0, r4
     978:	7008      	strb	r0, [r1, #0]
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     97a:	2080      	movs	r0, #128	; 0x80
     97c:	0380      	lsls	r0, r0, #14
     97e:	6098      	str	r0, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].reg = p.cfg;
     980:	2040      	movs	r0, #64	; 0x40
     982:	7008      	strb	r0, [r1, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     984:	7848      	ldrb	r0, [r1, #1]
     986:	43a0      	bics	r0, r4
     988:	7048      	strb	r0, [r1, #1]
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     98a:	2080      	movs	r0, #128	; 0x80
     98c:	03c0      	lsls	r0, r0, #15
     98e:	6098      	str	r0, [r3, #8]
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     990:	0018      	movs	r0, r3
     992:	303b      	adds	r0, #59	; 0x3b
     994:	7805      	ldrb	r5, [r0, #0]
     996:	4395      	bics	r5, r2
     998:	4335      	orrs	r5, r6
     99a:	7005      	strb	r5, [r0, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     99c:	784d      	ldrb	r5, [r1, #1]
     99e:	4325      	orrs	r5, r4
     9a0:	704d      	strb	r5, [r1, #1]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     9a2:	788d      	ldrb	r5, [r1, #2]
     9a4:	43a5      	bics	r5, r4
     9a6:	708d      	strb	r5, [r1, #2]
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     9a8:	788d      	ldrb	r5, [r1, #2]
     9aa:	4335      	orrs	r5, r6
     9ac:	708d      	strb	r5, [r1, #2]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     9ae:	2580      	movs	r5, #128	; 0x80
     9b0:	042d      	lsls	r5, r5, #16
     9b2:	605d      	str	r5, [r3, #4]
//    sercomClockEnable(SPI2, 3, 4);
//   sercomSpiMasterInit(SPI2, 3, 0, 0, 0, 0x00);


    sercomClockEnable(SPI0, 3, 4);
    sercomSpiMasterInit(SPI0, 3, 0, 0, 0, 0x00);
     9b4:	2500      	movs	r5, #0
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     9b6:	7803      	ldrb	r3, [r0, #0]
    sercomClockEnable(SPI0, 3, 4);
     9b8:	4e22      	ldr	r6, [pc, #136]	; (a44 <init+0x350>)
     9ba:	401a      	ands	r2, r3
     9bc:	433a      	orrs	r2, r7
     9be:	7002      	strb	r2, [r0, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     9c0:	788b      	ldrb	r3, [r1, #2]
     9c2:	2204      	movs	r2, #4
     9c4:	4323      	orrs	r3, r4
     9c6:	708b      	strb	r3, [r1, #2]
     9c8:	2000      	movs	r0, #0
     9ca:	2103      	movs	r1, #3
     9cc:	47b0      	blx	r6
    sercomSpiMasterInit(SPI0, 3, 0, 0, 0, 0x00);
     9ce:	002b      	movs	r3, r5
     9d0:	002a      	movs	r2, r5
     9d2:	0028      	movs	r0, r5
     9d4:	4f1c      	ldr	r7, [pc, #112]	; (a48 <init+0x354>)
     9d6:	9501      	str	r5, [sp, #4]
     9d8:	9500      	str	r5, [sp, #0]
     9da:	2103      	movs	r1, #3
     9dc:	47b8      	blx	r7


    sercomClockEnable(SPI1, 3, 4);
     9de:	0020      	movs	r0, r4
     9e0:	2204      	movs	r2, #4
     9e2:	2103      	movs	r1, #3
     9e4:	47b0      	blx	r6
    sercomSpiMasterInit(SPI1, 3, 0, 0, 0, 0x00);
     9e6:	002b      	movs	r3, r5
     9e8:	002a      	movs	r2, r5
     9ea:	0020      	movs	r0, r4
     9ec:	9501      	str	r5, [sp, #4]
     9ee:	9500      	str	r5, [sp, #0]
     9f0:	2103      	movs	r1, #3
     9f2:	47b8      	blx	r7


    sercomClockEnable(USART3, 4, 8);
     9f4:	2208      	movs	r2, #8
     9f6:	2104      	movs	r1, #4
     9f8:	2003      	movs	r0, #3
     9fa:	47b0      	blx	r6
    sercomUartInit(USART3,1,0,19200);
     9fc:	2396      	movs	r3, #150	; 0x96
     9fe:	0021      	movs	r1, r4
     a00:	002a      	movs	r2, r5
     a02:	2003      	movs	r0, #3
     a04:	01db      	lsls	r3, r3, #7
     a06:	4c11      	ldr	r4, [pc, #68]	; (a4c <init+0x358>)
     a08:	47a0      	blx	r4


    TC4Init();
     a0a:	4b11      	ldr	r3, [pc, #68]	; (a50 <init+0x35c>)
     a0c:	4798      	blx	r3
    TC5Init();
     a0e:	4b11      	ldr	r3, [pc, #68]	; (a54 <init+0x360>)
     a10:	4798      	blx	r3
}
     a12:	b005      	add	sp, #20
     a14:	bdf0      	pop	{r4, r5, r6, r7, pc}
     a16:	46c0      	nop			; (mov r8, r8)
     a18:	41004000 	.word	0x41004000
     a1c:	40000400 	.word	0x40000400
     a20:	000001d5 	.word	0x000001d5
     a24:	00000dbd 	.word	0x00000dbd
     a28:	00000e41 	.word	0x00000e41
     a2c:	00000f05 	.word	0x00000f05
     a30:	00000b69 	.word	0x00000b69
     a34:	e000e100 	.word	0xe000e100
     a38:	ff00ffff 	.word	0xff00ffff
     a3c:	41004400 	.word	0x41004400
     a40:	41004435 	.word	0x41004435
     a44:	000025f5 	.word	0x000025f5
     a48:	00002655 	.word	0x00002655
     a4c:	000026b9 	.word	0x000026b9
     a50:	00000fd1 	.word	0x00000fd1
     a54:	00001039 	.word	0x00001039

00000a58 <main>:




int main(void) {
     a58:	b510      	push	{r4, lr}


    init();
     a5a:	4b0e      	ldr	r3, [pc, #56]	; (a94 <main+0x3c>)
     a5c:	4798      	blx	r3


    //  altimeter.myFlightState = flightStatrup;


    initMS5803Barometer();
     a5e:	4b0e      	ldr	r3, [pc, #56]	; (a98 <main+0x40>)
     a60:	4798      	blx	r3
    IMUinit();
     a62:	4b0e      	ldr	r3, [pc, #56]	; (a9c <main+0x44>)
     a64:	4798      	blx	r3

    //  altimeter.myFlashMemory.pageLocation = 0x00;
    //  altimeter.myFlashMemory.pageReady = false;


    computeKalmanGains();
     a66:	4b0e      	ldr	r3, [pc, #56]	; (aa0 <main+0x48>)
     a68:	4798      	blx	r3


    sampleTick();
     a6a:	4c0e      	ldr	r4, [pc, #56]	; (aa4 <main+0x4c>)
     a6c:	47a0      	blx	r4
    //  altimeter.offsets.gravityOffsetBuffer = altimeter.offsets.gravityOffset;
    //  altimeter.offsets.groundOffset = altimeter.offsets.altitudefeet;
    //  altimeter.offsets.groundOffsetBuffer = altimeter.offsets.groundOffset;


    beep(400);
     a6e:	20c8      	movs	r0, #200	; 0xc8
     a70:	4b0d      	ldr	r3, [pc, #52]	; (aa8 <main+0x50>)
     a72:	0040      	lsls	r0, r0, #1
     a74:	4798      	blx	r3


    startupTick = millis();
     a76:	4b0d      	ldr	r3, [pc, #52]	; (aac <main+0x54>)
     a78:	4798      	blx	r3
     a7a:	4b0d      	ldr	r3, [pc, #52]	; (ab0 <main+0x58>)
     a7c:	6018      	str	r0, [r3, #0]
// 	my_altimeter.myIMU.offsetBufferTime =  my_altimeter.StartupTick;

    while (1) {


        if (takeSample()) {
     a7e:	4b0d      	ldr	r3, [pc, #52]	; (ab4 <main+0x5c>)
     a80:	4798      	blx	r3
     a82:	2800      	cmp	r0, #0
     a84:	d0fb      	beq.n	a7e <main+0x26>
            sampleTick();
     a86:	47a0      	blx	r4
            flight();
     a88:	4b0b      	ldr	r3, [pc, #44]	; (ab8 <main+0x60>)
     a8a:	4798      	blx	r3
            computeKalmanStates();
     a8c:	4b0b      	ldr	r3, [pc, #44]	; (abc <main+0x64>)
     a8e:	4798      	blx	r3
     a90:	e7f5      	b.n	a7e <main+0x26>
     a92:	46c0      	nop			; (mov r8, r8)
     a94:	000006f5 	.word	0x000006f5
     a98:	00000691 	.word	0x00000691
     a9c:	00000ac1 	.word	0x00000ac1
     aa0:	000013b5 	.word	0x000013b5
     aa4:	000022d1 	.word	0x000022d1
     aa8:	00000d09 	.word	0x00000d09
     aac:	00000f99 	.word	0x00000f99
     ab0:	200004fc 	.word	0x200004fc
     ab4:	000022b9 	.word	0x000022b9
     ab8:	000010a1 	.word	0x000010a1
     abc:	00001c55 	.word	0x00001c55

00000ac0 <IMUinit>:
#include <util.h>
#include <boardDefines.h>


void IMUinit() {
     ac0:	b570      	push	{r4, r5, r6, lr}
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     ac2:	4c08      	ldr	r4, [pc, #32]	; (ae4 <IMUinit+0x24>)
     ac4:	2580      	movs	r5, #128	; 0x80
     ac6:	0023      	movs	r3, r4
     ac8:	00ed      	lsls	r5, r5, #3
     aca:	3394      	adds	r3, #148	; 0x94
     acc:	601d      	str	r5, [r3, #0]

    uint8_t dummy_Tx = 0xFF;
    uint8_t dummy_rx;

    pinLow(cs_accel);
    dummy_rx = spiDataTransfer(SPI0, BMI_ACCEL_PMU_RANGE);
     ace:	4e06      	ldr	r6, [pc, #24]	; (ae8 <IMUinit+0x28>)
     ad0:	210f      	movs	r1, #15
     ad2:	2000      	movs	r0, #0
     ad4:	47b0      	blx	r6
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     ad6:	3498      	adds	r4, #152	; 0x98
    dummy_rx = spiDataTransfer(SPI0, BMI_ACCEL_16G_RANGE);
     ad8:	210c      	movs	r1, #12
     ada:	2000      	movs	r0, #0
     adc:	47b0      	blx	r6
     ade:	6025      	str	r5, [r4, #0]
    pinHigh(cs_accel);

}
     ae0:	bd70      	pop	{r4, r5, r6, pc}
     ae2:	46c0      	nop			; (mov r8, r8)
     ae4:	41004400 	.word	0x41004400
     ae8:	00002701 	.word	0x00002701

00000aec <USARTconnectionAvaliable>:

bool USARTconnectionAvaliable() {
     aec:	b510      	push	{r4, lr}

    if (sercom(USART3)->SPI.INTFLAG.bit.RXC == 1) {
     aee:	4b09      	ldr	r3, [pc, #36]	; (b14 <USARTconnectionAvaliable+0x28>)
     af0:	7e1c      	ldrb	r4, [r3, #24]
     af2:	0764      	lsls	r4, r4, #29
     af4:	0fe4      	lsrs	r4, r4, #31
     af6:	2c01      	cmp	r4, #1
     af8:	d001      	beq.n	afe <USARTconnectionAvaliable+0x12>
            return true;
        } else {
            return false;
        }
    }
    return false;
     afa:	2000      	movs	r0, #0
}
     afc:	bd10      	pop	{r4, pc}
        u8_t connectAttempt = usartDataIn(USART3);
     afe:	2003      	movs	r0, #3
     b00:	4b05      	ldr	r3, [pc, #20]	; (b18 <USARTconnectionAvaliable+0x2c>)
     b02:	4798      	blx	r3
     b04:	0001      	movs	r1, r0
        if (connectAttempt == 0x48) {
     b06:	2848      	cmp	r0, #72	; 0x48
     b08:	d1f7      	bne.n	afa <USARTconnectionAvaliable+0xe>
            usartDataOut(USART3, 'H');
     b0a:	2003      	movs	r0, #3
     b0c:	4b03      	ldr	r3, [pc, #12]	; (b1c <USARTconnectionAvaliable+0x30>)
     b0e:	4798      	blx	r3
            return true;
     b10:	0020      	movs	r0, r4
     b12:	e7f3      	b.n	afc <USARTconnectionAvaliable+0x10>
     b14:	42001400 	.word	0x42001400
     b18:	00002731 	.word	0x00002731
     b1c:	00002719 	.word	0x00002719

00000b20 <sendTheasePagesToComputer>:

void sendTheasePagesToComputer(u32_t firstPage, u32_t lastPage) {
     b20:	b5f0      	push	{r4, r5, r6, r7, lr}
    for (u16_t page = 0; page <= pagesToSend; ++page) {

        u8_t data[256];
        AT25SEreadPage(pageToReadAddress , data);

        for (u16_t dataByte = 0; dataByte < 256; ++dataByte) {
     b22:	2780      	movs	r7, #128	; 0x80
void sendTheasePagesToComputer(u32_t firstPage, u32_t lastPage) {
     b24:	0005      	movs	r5, r0
    for (u16_t page = 0; page <= pagesToSend; ++page) {
     b26:	2400      	movs	r4, #0
    u16_t pagesToSend = (lastPage - firstPage) >> 8;
     b28:	1a09      	subs	r1, r1, r0
     b2a:	0a09      	lsrs	r1, r1, #8
void sendTheasePagesToComputer(u32_t firstPage, u32_t lastPage) {
     b2c:	b0c3      	sub	sp, #268	; 0x10c
    u16_t pagesToSend = (lastPage - firstPage) >> 8;
     b2e:	b28b      	uxth	r3, r1
     b30:	9301      	str	r3, [sp, #4]
        for (u16_t dataByte = 0; dataByte < 256; ++dataByte) {
     b32:	007f      	lsls	r7, r7, #1
        AT25SEreadPage(pageToReadAddress , data);
     b34:	a902      	add	r1, sp, #8
     b36:	0028      	movs	r0, r5
     b38:	4b09      	ldr	r3, [pc, #36]	; (b60 <sendTheasePagesToComputer+0x40>)
     b3a:	4798      	blx	r3
     b3c:	2600      	movs	r6, #0
            usartDataOut(USART3, data[dataByte]);
     b3e:	ab02      	add	r3, sp, #8
     b40:	5d99      	ldrb	r1, [r3, r6]
     b42:	2003      	movs	r0, #3
     b44:	4b07      	ldr	r3, [pc, #28]	; (b64 <sendTheasePagesToComputer+0x44>)
     b46:	3601      	adds	r6, #1
     b48:	4798      	blx	r3
        for (u16_t dataByte = 0; dataByte < 256; ++dataByte) {
     b4a:	42be      	cmp	r6, r7
     b4c:	d1f7      	bne.n	b3e <sendTheasePagesToComputer+0x1e>
    for (u16_t page = 0; page <= pagesToSend; ++page) {
     b4e:	3401      	adds	r4, #1
     b50:	9b01      	ldr	r3, [sp, #4]
        }

        pageToReadAddress = pageToReadAddress + 0x100;
     b52:	3501      	adds	r5, #1
    for (u16_t page = 0; page <= pagesToSend; ++page) {
     b54:	b2a4      	uxth	r4, r4
        pageToReadAddress = pageToReadAddress + 0x100;
     b56:	35ff      	adds	r5, #255	; 0xff
    for (u16_t page = 0; page <= pagesToSend; ++page) {
     b58:	42a3      	cmp	r3, r4
     b5a:	d2eb      	bcs.n	b34 <sendTheasePagesToComputer+0x14>
    }
}
     b5c:	b043      	add	sp, #268	; 0x10c
     b5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     b60:	000003ad 	.word	0x000003ad
     b64:	00002719 	.word	0x00002719

00000b68 <adcInit>:
#include <util.h>

void adcInit() {

    // set up clock
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;
     b68:	2380      	movs	r3, #128	; 0x80
     b6a:	4a10      	ldr	r2, [pc, #64]	; (bac <adcInit+0x44>)
     b6c:	025b      	lsls	r3, r3, #9
     b6e:	6a11      	ldr	r1, [r2, #32]
    // divide prescaler by 512 (93.75KHz), max adc freq is 2.1MHz
    ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |
                     ADC_CTRLB_RESSEL_12BIT;

    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
     b70:	480f      	ldr	r0, [pc, #60]	; (bb0 <adcInit+0x48>)
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;
     b72:	430b      	orrs	r3, r1
    ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |
     b74:	21e0      	movs	r1, #224	; 0xe0
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;
     b76:	6213      	str	r3, [r2, #32]
    ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |
     b78:	4b0e      	ldr	r3, [pc, #56]	; (bb4 <adcInit+0x4c>)
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
     b7a:	4a0f      	ldr	r2, [pc, #60]	; (bb8 <adcInit+0x50>)
    ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |
     b7c:	00c9      	lsls	r1, r1, #3
     b7e:	8099      	strh	r1, [r3, #4]
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
     b80:	8050      	strh	r0, [r2, #2]
                        GCLK_CLKCTRL_GEN(0) |
                        GCLK_CLKCTRL_ID(ADC_GCLK_ID);

    ADC->CALIB.reg =
        ADC_CALIB_BIAS_CAL(
     b82:	4a0e      	ldr	r2, [pc, #56]	; (bbc <adcInit+0x54>)
     b84:	6810      	ldr	r0, [r2, #0]
     b86:	0142      	lsls	r2, r0, #5
            (*(uint32_t *)ADC_FUSES_BIASCAL_ADDR >> ADC_FUSES_BIASCAL_Pos)
        ) |
        ADC_CALIB_LINEARITY_CAL(
     b88:	0010      	movs	r0, r2
        ADC_CALIB_BIAS_CAL(
     b8a:	4011      	ands	r1, r2
        ADC_CALIB_LINEARITY_CAL(
     b8c:	4a0c      	ldr	r2, [pc, #48]	; (bc0 <adcInit+0x58>)
     b8e:	6812      	ldr	r2, [r2, #0]
     b90:	0ed2      	lsrs	r2, r2, #27
     b92:	4302      	orrs	r2, r0
     b94:	b2d2      	uxtb	r2, r2
        ) |
     b96:	430a      	orrs	r2, r1
    ADC->CALIB.reg =
     b98:	851a      	strh	r2, [r3, #40]	; 0x28
            (*(uint64_t *)ADC_FUSES_LINEARITY_0_ADDR >> ADC_FUSES_LINEARITY_0_Pos)
        );

    ADC->REFCTRL.reg = ADC_REFCTRL_REFSEL_INTVCC1;
     b9a:	2202      	movs	r2, #2
     b9c:	705a      	strb	r2, [r3, #1]

    ADC->CTRLA.reg = ADC_CTRLA_ENABLE; // enable
     b9e:	701a      	strb	r2, [r3, #0]
    while(ADC->STATUS.reg & ADC_STATUS_SYNCBUSY);
     ba0:	7e5a      	ldrb	r2, [r3, #25]
     ba2:	b252      	sxtb	r2, r2
     ba4:	2a00      	cmp	r2, #0
     ba6:	dbfb      	blt.n	ba0 <adcInit+0x38>
}
     ba8:	4770      	bx	lr
     baa:	46c0      	nop			; (mov r8, r8)
     bac:	40000400 	.word	0x40000400
     bb0:	0000401e 	.word	0x0000401e
     bb4:	42004000 	.word	0x42004000
     bb8:	40000c00 	.word	0x40000c00
     bbc:	00806024 	.word	0x00806024
     bc0:	00806020 	.word	0x00806020

00000bc4 <adcSample>:



u16_t adcSample() {
    ADC->SWTRIG.reg = ADC_SWTRIG_START;
     bc4:	2202      	movs	r2, #2
     bc6:	4b04      	ldr	r3, [pc, #16]	; (bd8 <adcSample+0x14>)
     bc8:	731a      	strb	r2, [r3, #12]
    while(!(ADC->INTFLAG.reg & ADC_INTFLAG_RESRDY)); // wait until result is ready
     bca:	3a01      	subs	r2, #1
     bcc:	7e19      	ldrb	r1, [r3, #24]
     bce:	4211      	tst	r1, r2
     bd0:	d0fc      	beq.n	bcc <adcSample+0x8>
    return ADC->RESULT.reg;
     bd2:	8b58      	ldrh	r0, [r3, #26]
     bd4:	b280      	uxth	r0, r0
}
     bd6:	4770      	bx	lr
     bd8:	42004000 	.word	0x42004000

00000bdc <adc_read>:


u16_t adc_read(Pin p) {
     bdc:	b537      	push	{r0, r1, r2, r4, r5, lr}
     bde:	9101      	str	r1, [sp, #4]
    if (p.pin & 1) {
     be0:	2101      	movs	r1, #1
     be2:	0c02      	lsrs	r2, r0, #16
     be4:	9000      	str	r0, [sp, #0]
     be6:	b2d2      	uxtb	r2, r2
     be8:	0e00      	lsrs	r0, r0, #24
     bea:	0843      	lsrs	r3, r0, #1
     bec:	01d2      	lsls	r2, r2, #7
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     bee:	189b      	adds	r3, r3, r2
    if (p.pin & 1) {
     bf0:	4208      	tst	r0, r1
     bf2:	d01a      	beq.n	c2a <adc_read+0x4e>
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     bf4:	240f      	movs	r4, #15
     bf6:	4910      	ldr	r1, [pc, #64]	; (c38 <adc_read+0x5c>)
     bf8:	185b      	adds	r3, r3, r1
     bfa:	7819      	ldrb	r1, [r3, #0]
     bfc:	400c      	ands	r4, r1
     bfe:	2110      	movs	r1, #16
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     c00:	4321      	orrs	r1, r4
     c02:	7019      	strb	r1, [r3, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     c04:	4b0d      	ldr	r3, [pc, #52]	; (c3c <adc_read+0x60>)
     c06:	1880      	adds	r0, r0, r2
     c08:	18c0      	adds	r0, r0, r3
     c0a:	2301      	movs	r3, #1
     c0c:	7802      	ldrb	r2, [r0, #0]
     c0e:	4313      	orrs	r3, r2
     c10:	7003      	strb	r3, [r0, #0]
    // switch pin mux to analog in
    pinAnalog(p);

    ADC->INPUTCTRL.reg = (ADC_INPUTCTRL_MUXPOS(p.chan) // select from proper pin
     c12:	466b      	mov	r3, sp
     c14:	221f      	movs	r2, #31
     c16:	791b      	ldrb	r3, [r3, #4]
     c18:	401a      	ands	r2, r3
                          | ADC_INPUTCTRL_MUXNEG_GND // 0 = gnd
                          | ADC_INPUTCTRL_GAIN_1X);
     c1a:	23c0      	movs	r3, #192	; 0xc0
     c1c:	015b      	lsls	r3, r3, #5
     c1e:	4313      	orrs	r3, r2
    ADC->INPUTCTRL.reg = (ADC_INPUTCTRL_MUXPOS(p.chan) // select from proper pin
     c20:	4a07      	ldr	r2, [pc, #28]	; (c40 <adc_read+0x64>)
     c22:	6113      	str	r3, [r2, #16]

    return adcSample();
     c24:	4b07      	ldr	r3, [pc, #28]	; (c44 <adc_read+0x68>)
     c26:	4798      	blx	r3
     c28:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     c2a:	250f      	movs	r5, #15
     c2c:	4c02      	ldr	r4, [pc, #8]	; (c38 <adc_read+0x5c>)
     c2e:	191b      	adds	r3, r3, r4
     c30:	781c      	ldrb	r4, [r3, #0]
     c32:	43ac      	bics	r4, r5
     c34:	e7e4      	b.n	c00 <adc_read+0x24>
     c36:	46c0      	nop			; (mov r8, r8)
     c38:	41004430 	.word	0x41004430
     c3c:	41004440 	.word	0x41004440
     c40:	42004000 	.word	0x42004000
     c44:	00000bc5 	.word	0x00000bc5

00000c48 <byteOut>:





void byteOut(Pin SCK_PIN, Pin MOSI_PIN, uint8_t byte) {
     c48:	0c01      	lsrs	r1, r0, #16
     c4a:	0c13      	lsrs	r3, r2, #16
     c4c:	b5f0      	push	{r4, r5, r6, r7, lr}
     c4e:	b2cd      	uxtb	r5, r1
     c50:	b2d9      	uxtb	r1, r3
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     c52:	2301      	movs	r3, #1
     c54:	001e      	movs	r6, r3
     c56:	0e12      	lsrs	r2, r2, #24
     c58:	4093      	lsls	r3, r2
     c5a:	0e00      	lsrs	r0, r0, #24
     c5c:	4086      	lsls	r6, r0
     c5e:	001a      	movs	r2, r3
     c60:	2308      	movs	r3, #8
     c62:	0030      	movs	r0, r6
     c64:	4e11      	ldr	r6, [pc, #68]	; (cac <byteOut+0x64>)
     c66:	01c9      	lsls	r1, r1, #7
     c68:	b087      	sub	sp, #28
     c6a:	198f      	adds	r7, r1, r6
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     c6c:	4e10      	ldr	r6, [pc, #64]	; (cb0 <byteOut+0x68>)
     c6e:	ac0c      	add	r4, sp, #48	; 0x30
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     c70:	01ed      	lsls	r5, r5, #7
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     c72:	19ae      	adds	r6, r5, r6
     c74:	7824      	ldrb	r4, [r4, #0]
     c76:	9601      	str	r6, [sp, #4]
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     c78:	4e0c      	ldr	r6, [pc, #48]	; (cac <byteOut+0x64>)
     c7a:	46b4      	mov	ip, r6
     c7c:	44ac      	add	ip, r5
     c7e:	4666      	mov	r6, ip
     c80:	6030      	str	r0, [r6, #0]

	for (uint8_t i = 0; i<8; ++i) {
		pinLow(SCK_PIN);
		if (byte & 0x80) {
     c82:	b266      	sxtb	r6, r4
     c84:	2e00      	cmp	r6, #0
     c86:	da0e      	bge.n	ca6 <byteOut+0x5e>
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     c88:	4e09      	ldr	r6, [pc, #36]	; (cb0 <byteOut+0x68>)
     c8a:	46b4      	mov	ip, r6
     c8c:	448c      	add	ip, r1
     c8e:	4666      	mov	r6, ip
     c90:	6032      	str	r2, [r6, #0]
     c92:	9e01      	ldr	r6, [sp, #4]
     c94:	3b01      	subs	r3, #1
			pinHigh(MOSI_PIN);
			} else {
			pinLow(MOSI_PIN);
		}
		pinHigh(SCK_PIN);
		byte <<= 1;
     c96:	0064      	lsls	r4, r4, #1
     c98:	b2db      	uxtb	r3, r3
     c9a:	6030      	str	r0, [r6, #0]
     c9c:	b2e4      	uxtb	r4, r4
	for (uint8_t i = 0; i<8; ++i) {
     c9e:	2b00      	cmp	r3, #0
     ca0:	d1ea      	bne.n	c78 <byteOut+0x30>
	}
}
     ca2:	b007      	add	sp, #28
     ca4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     ca6:	603a      	str	r2, [r7, #0]
     ca8:	e7f3      	b.n	c92 <byteOut+0x4a>
     caa:	46c0      	nop			; (mov r8, r8)
     cac:	41004414 	.word	0x41004414
     cb0:	41004418 	.word	0x41004418

00000cb4 <byteIn>:

uint8_t byteIn(Pin SCK_PIN, Pin MISO_PIN) {
     cb4:	b5f0      	push	{r4, r5, r6, r7, lr}
     cb6:	2501      	movs	r5, #1
     cb8:	b085      	sub	sp, #20
     cba:	0c06      	lsrs	r6, r0, #16
     cbc:	9301      	str	r3, [sp, #4]
     cbe:	b2f3      	uxtb	r3, r6
     cc0:	002e      	movs	r6, r5
     cc2:	9103      	str	r1, [sp, #12]
     cc4:	0011      	movs	r1, r2
     cc6:	0c14      	lsrs	r4, r2, #16
     cc8:	9200      	str	r2, [sp, #0]
     cca:	0e02      	lsrs	r2, r0, #24
     ccc:	9002      	str	r0, [sp, #8]
     cce:	4096      	lsls	r6, r2
	uint8_t byte = 0x00;
     cd0:	2000      	movs	r0, #0
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     cd2:	b2e2      	uxtb	r2, r4
     cd4:	2408      	movs	r4, #8
     cd6:	0e09      	lsrs	r1, r1, #24
     cd8:	408d      	lsls	r5, r1
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     cda:	490a      	ldr	r1, [pc, #40]	; (d04 <byteIn+0x50>)
     cdc:	01db      	lsls	r3, r3, #7
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     cde:	01d2      	lsls	r2, r2, #7
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     ce0:	185b      	adds	r3, r3, r1
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     ce2:	1852      	adds	r2, r2, r1
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     ce4:	615e      	str	r6, [r3, #20]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     ce6:	6a11      	ldr	r1, [r2, #32]

	for (uint8_t i = 0; i<8; ++i) {
		pinLow(SCK_PIN);
		byte = (byte << 1 ) | pinRead(MISO_PIN);
     ce8:	0040      	lsls	r0, r0, #1
     cea:	4029      	ands	r1, r5
     cec:	1e4f      	subs	r7, r1, #1
     cee:	41b9      	sbcs	r1, r7
     cf0:	3c01      	subs	r4, #1
     cf2:	4308      	orrs	r0, r1
     cf4:	b2e4      	uxtb	r4, r4
     cf6:	b2c0      	uxtb	r0, r0
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     cf8:	619e      	str	r6, [r3, #24]
	for (uint8_t i = 0; i<8; ++i) {
     cfa:	2c00      	cmp	r4, #0
     cfc:	d1f2      	bne.n	ce4 <byteIn+0x30>
		pinHigh(SCK_PIN);
	}
	return byte;
     cfe:	b005      	add	sp, #20
     d00:	bdf0      	pop	{r4, r5, r6, r7, pc}
     d02:	46c0      	nop			; (mov r8, r8)
     d04:	41004400 	.word	0x41004400

00000d08 <beep>:
#include <util.h>
#include <boardDefines.h>


void beep(u16_t toggles) {
     d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
}


inline static void pinToggle(Pin p) {
    PORT->Group[p.group].OUTTGL.reg = (1<<p.pin);
     d0a:	2380      	movs	r3, #128	; 0x80
     d0c:	2680      	movs	r6, #128	; 0x80
     d0e:	0007      	movs	r7, r0

    pinToggle(LedPin);
    for (u16_t buzz = 0; buzz < toggles; ++buzz) {
     d10:	2500      	movs	r5, #0
     d12:	4c09      	ldr	r4, [pc, #36]	; (d38 <beep+0x30>)
     d14:	035b      	lsls	r3, r3, #13
     d16:	61e3      	str	r3, [r4, #28]
     d18:	03b6      	lsls	r6, r6, #14
     d1a:	42bd      	cmp	r5, r7
     d1c:	d104      	bne.n	d28 <beep+0x20>
     d1e:	2380      	movs	r3, #128	; 0x80
     d20:	035b      	lsls	r3, r3, #13
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     d22:	6166      	str	r6, [r4, #20]
    PORT->Group[p.group].OUTTGL.reg = (1<<p.pin);
     d24:	61e3      	str	r3, [r4, #28]
        pinToggle(buzzerPin);
        delay_us(122);
    }
    pinLow(buzzerPin);
    pinToggle(LedPin);
}
     d26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     d28:	61e6      	str	r6, [r4, #28]
        delay_us(122);
     d2a:	207a      	movs	r0, #122	; 0x7a
     d2c:	4b03      	ldr	r3, [pc, #12]	; (d3c <beep+0x34>)
    for (u16_t buzz = 0; buzz < toggles; ++buzz) {
     d2e:	3501      	adds	r5, #1
        delay_us(122);
     d30:	4798      	blx	r3
    for (u16_t buzz = 0; buzz < toggles; ++buzz) {
     d32:	b2ad      	uxth	r5, r5
     d34:	e7f1      	b.n	d1a <beep+0x12>
     d36:	46c0      	nop			; (mov r8, r8)
     d38:	41004400 	.word	0x41004400
     d3c:	00000f25 	.word	0x00000f25

00000d40 <startupJingle>:

void startupJingle(){
     d40:	b570      	push	{r4, r5, r6, lr}
    beep(300);
     d42:	2696      	movs	r6, #150	; 0x96
     d44:	0076      	lsls	r6, r6, #1
     d46:	4d0a      	ldr	r5, [pc, #40]	; (d70 <startupJingle+0x30>)
     d48:	0030      	movs	r0, r6
     d4a:	47a8      	blx	r5
    delay_ms(80);
     d4c:	4c09      	ldr	r4, [pc, #36]	; (d74 <startupJingle+0x34>)
     d4e:	2050      	movs	r0, #80	; 0x50
     d50:	47a0      	blx	r4
    beep(300);
     d52:	0030      	movs	r0, r6
     d54:	47a8      	blx	r5
    delay_ms(250);
     d56:	20fa      	movs	r0, #250	; 0xfa
     d58:	47a0      	blx	r4
    beep(300);
     d5a:	0030      	movs	r0, r6
     d5c:	47a8      	blx	r5
    delay_ms(80);
     d5e:	2050      	movs	r0, #80	; 0x50
     d60:	47a0      	blx	r4
    beep(300);
     d62:	0030      	movs	r0, r6
     d64:	47a8      	blx	r5
    delay_ms(500);
     d66:	20fa      	movs	r0, #250	; 0xfa
     d68:	0040      	lsls	r0, r0, #1
     d6a:	47a0      	blx	r4
}
     d6c:	bd70      	pop	{r4, r5, r6, pc}
     d6e:	46c0      	nop			; (mov r8, r8)
     d70:	00000d09 	.word	0x00000d09
     d74:	00000f51 	.word	0x00000f51

00000d78 <unpluggedJingle>:

void unpluggedJingle(){
     d78:	b570      	push	{r4, r5, r6, lr}
            delay_ms(80);
            beep(300);
     d7a:	2696      	movs	r6, #150	; 0x96
            delay_ms(80);
     d7c:	4c0c      	ldr	r4, [pc, #48]	; (db0 <unpluggedJingle+0x38>)
            beep(300);
     d7e:	0076      	lsls	r6, r6, #1
            delay_ms(80);
     d80:	2050      	movs	r0, #80	; 0x50
     d82:	47a0      	blx	r4
            beep(300);
     d84:	4d0b      	ldr	r5, [pc, #44]	; (db4 <unpluggedJingle+0x3c>)
     d86:	0030      	movs	r0, r6
     d88:	47a8      	blx	r5
            delay_ms(80);
     d8a:	2050      	movs	r0, #80	; 0x50
     d8c:	47a0      	blx	r4
            beep(300);
     d8e:	0030      	movs	r0, r6
     d90:	47a8      	blx	r5
            delay_ms(80);
     d92:	2050      	movs	r0, #80	; 0x50
     d94:	47a0      	blx	r4
            beep(300);
     d96:	0030      	movs	r0, r6
     d98:	47a8      	blx	r5
            delay_ms(80);
     d9a:	2050      	movs	r0, #80	; 0x50
     d9c:	47a0      	blx	r4
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     d9e:	2280      	movs	r2, #128	; 0x80
     da0:	4b05      	ldr	r3, [pc, #20]	; (db8 <unpluggedJingle+0x40>)
     da2:	0392      	lsls	r2, r2, #14
     da4:	615a      	str	r2, [r3, #20]
     da6:	2280      	movs	r2, #128	; 0x80
     da8:	0352      	lsls	r2, r2, #13
     daa:	615a      	str	r2, [r3, #20]
            pinLow(buzzerPin);
            pinLow(LedPin);

}
     dac:	bd70      	pop	{r4, r5, r6, pc}
     dae:	46c0      	nop			; (mov r8, r8)
     db0:	00000f51 	.word	0x00000f51
     db4:	00000d09 	.word	0x00000d09
     db8:	41004400 	.word	0x41004400

00000dbc <GclkInit>:
static uint32_t cycles_per_us = 48000000UL / 1000000;

void GclkInit() {


    SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     dbc:	23c2      	movs	r3, #194	; 0xc2
     dbe:	4a16      	ldr	r2, [pc, #88]	; (e18 <GclkInit+0x5c>)
     dc0:	00db      	lsls	r3, r3, #3
void GclkInit() {
     dc2:	b510      	push	{r4, lr}
    SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     dc4:	6093      	str	r3, [r2, #8]
                           SYSCTRL_INTFLAG_DFLLRDY;
    NVMCTRL->CTRLB.reg |= NVMCTRL_CTRLB_RWS_HALF;
     dc6:	2302      	movs	r3, #2
     dc8:	4914      	ldr	r1, [pc, #80]	; (e1c <GclkInit+0x60>)
     dca:	6848      	ldr	r0, [r1, #4]
     dcc:	4303      	orrs	r3, r0
     dce:	604b      	str	r3, [r1, #4]

#define NVM_DFLL_COARSE_POS    58
#define NVM_DFLL_COARSE_SIZE   6
#define NVM_DFLL_FINE_POS      64
#define NVM_DFLL_FINE_SIZE     10
    uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
     dd0:	4b13      	ldr	r3, [pc, #76]	; (e20 <GclkInit+0x64>)
     dd2:	681b      	ldr	r3, [r3, #0]
     dd4:	0e9b      	lsrs	r3, r3, #26
                         + (NVM_DFLL_COARSE_POS / 32))
                       >> (NVM_DFLL_COARSE_POS % 32))
                     & ((1 << NVM_DFLL_COARSE_SIZE) - 1);
    if (coarse == 0x3f) {
     dd6:	2b3f      	cmp	r3, #63	; 0x3f
     dd8:	d100      	bne.n	ddc <GclkInit+0x20>
        coarse = 0x1f;
     dda:	3b20      	subs	r3, #32
    }
    uint32_t fine =( *((uint32_t *)(NVMCTRL_OTP4)
                       + (NVM_DFLL_FINE_POS / 32))
                     >> (NVM_DFLL_FINE_POS % 32))
     ddc:	4911      	ldr	r1, [pc, #68]	; (e24 <GclkInit+0x68>)
                   & ((1 << NVM_DFLL_FINE_SIZE) - 1);
    if (fine == 0x3ff) {
     dde:	4812      	ldr	r0, [pc, #72]	; (e28 <GclkInit+0x6c>)
    uint32_t fine =( *((uint32_t *)(NVMCTRL_OTP4)
     de0:	6809      	ldr	r1, [r1, #0]
     de2:	0589      	lsls	r1, r1, #22
     de4:	0d89      	lsrs	r1, r1, #22
    if (fine == 0x3ff) {
     de6:	4281      	cmp	r1, r0
     de8:	d100      	bne.n	dec <GclkInit+0x30>
        fine = 0x1ff;
     dea:	4910      	ldr	r1, [pc, #64]	; (e2c <GclkInit+0x70>)
    }


    // Disable ONDEMAND mode while writing configurations (errata 9905)
    SYSCTRL->DFLLCTRL.reg = dfll_ctrl_usb & ~SYSCTRL_DFLLCTRL_ONDEMAND;
     dec:	4810      	ldr	r0, [pc, #64]	; (e30 <GclkInit+0x74>)
     dee:	8490      	strh	r0, [r2, #36]	; 0x24
    while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_DFLLRDY)) == 0);
     df0:	2010      	movs	r0, #16
     df2:	68d4      	ldr	r4, [r2, #12]
     df4:	4204      	tst	r4, r0
     df6:	d0fc      	beq.n	df2 <GclkInit+0x36>
    SYSCTRL->DFLLVAL.reg = SYSCTRL_DFLLVAL_COARSE(coarse) | SYSCTRL_DFLLVAL_FINE(fine);
     df8:	029b      	lsls	r3, r3, #10
     dfa:	430b      	orrs	r3, r1
     dfc:	6293      	str	r3, [r2, #40]	; 0x28


    //Wait and see if the DFLL output is good . . .
    while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_DFLLRDY)) == 0);
     dfe:	2310      	movs	r3, #16
     e00:	68d1      	ldr	r1, [r2, #12]
     e02:	4219      	tst	r1, r3
     e04:	d0fc      	beq.n	e00 <GclkInit+0x44>


    SYSCTRL->DFLLCTRL.reg = dfll_ctrl_usb;
     e06:	4b0b      	ldr	r3, [pc, #44]	; (e34 <GclkInit+0x78>)
     e08:	8493      	strh	r3, [r2, #36]	; 0x24


    //For generic clock generator 0, select the DFLL48 Clock as input
    GCLK->GENDIV.reg  = (GCLK_GENDIV_DIV(1)  | GCLK_GENDIV_ID(0));
     e0a:	2280      	movs	r2, #128	; 0x80
     e0c:	4b0a      	ldr	r3, [pc, #40]	; (e38 <GclkInit+0x7c>)
     e0e:	0052      	lsls	r2, r2, #1
     e10:	609a      	str	r2, [r3, #8]
    GCLK->GENCTRL.reg = (GCLK_GENCTRL_ID(0)  | (GCLK_GENCTRL_SRC_DFLL48M) | (GCLK_GENCTRL_GENEN));
     e12:	4a0a      	ldr	r2, [pc, #40]	; (e3c <GclkInit+0x80>)
     e14:	605a      	str	r2, [r3, #4]
}
     e16:	bd10      	pop	{r4, pc}
     e18:	40000800 	.word	0x40000800
     e1c:	41004000 	.word	0x41004000
     e20:	00806024 	.word	0x00806024
     e24:	00806028 	.word	0x00806028
     e28:	000003ff 	.word	0x000003ff
     e2c:	000001ff 	.word	0x000001ff
     e30:	00000522 	.word	0x00000522
     e34:	000005a2 	.word	0x000005a2
     e38:	40000c00 	.word	0x40000c00
     e3c:	00010700 	.word	0x00010700

00000e40 <RtcInit>:

void RtcInit() {
	
	    // start and enable external 32k crystal
	    SYSCTRL->XOSC32K.reg = SYSCTRL_XOSC32K_ENABLE |
     e40:	4a1b      	ldr	r2, [pc, #108]	; (eb0 <RtcInit+0x70>)
     e42:	4b1c      	ldr	r3, [pc, #112]	; (eb4 <RtcInit+0x74>)
     e44:	829a      	strh	r2, [r3, #20]
	    SYSCTRL_XOSC32K_XTALEN |
	    SYSCTRL_XOSC32K_EN32K |
	    ( 6 << SYSCTRL_OSC32K_STARTUP_Pos);

	    //wait for crystal to warm up
	    while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_XOSC32KRDY)) == 0);
     e46:	2202      	movs	r2, #2
     e48:	68d9      	ldr	r1, [r3, #12]
     e4a:	4211      	tst	r1, r2
     e4c:	d0fc      	beq.n	e48 <RtcInit+0x8>
*/




    GCLK->GENDIV.reg = GCLK_GENDIV_ID(2) | GCLK_GENDIV_DIV(1);
     e4e:	2281      	movs	r2, #129	; 0x81
     e50:	4b19      	ldr	r3, [pc, #100]	; (eb8 <RtcInit+0x78>)
     e52:	0052      	lsls	r2, r2, #1
     e54:	609a      	str	r2, [r3, #8]

    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(2) |
     e56:	4a19      	ldr	r2, [pc, #100]	; (ebc <RtcInit+0x7c>)
     e58:	605a      	str	r2, [r3, #4]
                        GCLK_GENCTRL_SRC(GCLK_GENCTRL_SRC_XOSC32K) |
                        GCLK_GENCTRL_IDC |
                        GCLK_GENCTRL_RUNSTDBY |
                        GCLK_GENCTRL_GENEN;
    while (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY);
     e5a:	785a      	ldrb	r2, [r3, #1]
     e5c:	b252      	sxtb	r2, r2
     e5e:	2a00      	cmp	r2, #0
     e60:	dbfb      	blt.n	e5a <RtcInit+0x1a>

// Configure RTC
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(RTC_GCLK_ID) |
     e62:	4a17      	ldr	r2, [pc, #92]	; (ec0 <RtcInit+0x80>)
     e64:	805a      	strh	r2, [r3, #2]
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    RTC->MODE1.CTRL.reg = RTC_MODE1_CTRL_MODE_COUNT16;
     e66:	2204      	movs	r2, #4
     e68:	4b16      	ldr	r3, [pc, #88]	; (ec4 <RtcInit+0x84>)
     e6a:	801a      	strh	r2, [r3, #0]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     e6c:	7a9a      	ldrb	r2, [r3, #10]
     e6e:	09d2      	lsrs	r2, r2, #7
     e70:	d1fc      	bne.n	e6c <RtcInit+0x2c>

// Prescaler needs to be enabled separately from the mode for some reason
    RTC->MODE1.CTRL.reg |= RTC_MODE1_CTRL_PRESCALER_DIV32;
     e72:	22a0      	movs	r2, #160	; 0xa0
     e74:	8819      	ldrh	r1, [r3, #0]
     e76:	00d2      	lsls	r2, r2, #3
     e78:	430a      	orrs	r2, r1
     e7a:	801a      	strh	r2, [r3, #0]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     e7c:	7a9a      	ldrb	r2, [r3, #10]
     e7e:	09d2      	lsrs	r2, r2, #7
     e80:	d1fc      	bne.n	e7c <RtcInit+0x3c>

    RTC->MODE1.PER.reg = 998;
     e82:	4a11      	ldr	r2, [pc, #68]	; (ec8 <RtcInit+0x88>)
     e84:	829a      	strh	r2, [r3, #20]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     e86:	7a9a      	ldrb	r2, [r3, #10]
     e88:	09d2      	lsrs	r2, r2, #7
     e8a:	d1fc      	bne.n	e86 <RtcInit+0x46>

    RTC->MODE1.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_ADDR(0x10);
     e8c:	8859      	ldrh	r1, [r3, #2]
     e8e:	4a0f      	ldr	r2, [pc, #60]	; (ecc <RtcInit+0x8c>)
     e90:	430a      	orrs	r2, r1
     e92:	805a      	strh	r2, [r3, #2]

    RTC->MODE1.INTENSET.reg = RTC_MODE1_INTENSET_OVF;
     e94:	2280      	movs	r2, #128	; 0x80
     e96:	71da      	strb	r2, [r3, #7]

    RTC->MODE1.CTRL.bit.ENABLE = 1;
     e98:	8819      	ldrh	r1, [r3, #0]
     e9a:	3a7e      	subs	r2, #126	; 0x7e
     e9c:	430a      	orrs	r2, r1
     e9e:	801a      	strh	r2, [r3, #0]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     ea0:	7a9a      	ldrb	r2, [r3, #10]
     ea2:	09d2      	lsrs	r2, r2, #7
     ea4:	d1fc      	bne.n	ea0 <RtcInit+0x60>
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     ea6:	4b0a      	ldr	r3, [pc, #40]	; (ed0 <RtcInit+0x90>)
     ea8:	3208      	adds	r2, #8
     eaa:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(RTC_IRQn);
}
     eac:	4770      	bx	lr
     eae:	46c0      	nop			; (mov r8, r8)
     eb0:	0000060e 	.word	0x0000060e
     eb4:	40000800 	.word	0x40000800
     eb8:	40000c00 	.word	0x40000c00
     ebc:	00230002 	.word	0x00230002
     ec0:	00004204 	.word	0x00004204
     ec4:	40001400 	.word	0x40001400
     ec8:	000003e6 	.word	0x000003e6
     ecc:	00004010 	.word	0x00004010
     ed0:	e000e100 	.word	0xe000e100

00000ed4 <gclkEnable>:


void gclkEnable(u32_t id, u32_t src, u32_t div) {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
     ed4:	230f      	movs	r3, #15
     ed6:	4003      	ands	r3, r0
     ed8:	4808      	ldr	r0, [pc, #32]	; (efc <gclkEnable+0x28>)
     eda:	0212      	lsls	r2, r2, #8
     edc:	4002      	ands	r2, r0
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     ede:	20f8      	movs	r0, #248	; 0xf8
     ee0:	0209      	lsls	r1, r1, #8
     ee2:	0140      	lsls	r0, r0, #5
     ee4:	4001      	ands	r1, r0
     ee6:	2080      	movs	r0, #128	; 0x80
void gclkEnable(u32_t id, u32_t src, u32_t div) {
     ee8:	b510      	push	{r4, lr}
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     eea:	0240      	lsls	r0, r0, #9
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
     eec:	4c04      	ldr	r4, [pc, #16]	; (f00 <gclkEnable+0x2c>)
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     eee:	4308      	orrs	r0, r1
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
     ef0:	431a      	orrs	r2, r3
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     ef2:	4318      	orrs	r0, r3
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
     ef4:	60a2      	str	r2, [r4, #8]
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     ef6:	6060      	str	r0, [r4, #4]
}
     ef8:	bd10      	pop	{r4, pc}
     efa:	46c0      	nop			; (mov r8, r8)
     efc:	00ffff00 	.word	0x00ffff00
     f00:	40000c00 	.word	0x40000c00

00000f04 <delayInit>:


void delayInit(void) {
    cycles_per_ms = 48000000UL;
    cycles_per_ms /= 1000;
     f04:	4b04      	ldr	r3, [pc, #16]	; (f18 <delayInit+0x14>)
     f06:	4a05      	ldr	r2, [pc, #20]	; (f1c <delayInit+0x18>)
     f08:	601a      	str	r2, [r3, #0]
    cycles_per_us = cycles_per_ms / 1000;
     f0a:	2230      	movs	r2, #48	; 0x30
     f0c:	605a      	str	r2, [r3, #4]

    SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     f0e:	4b04      	ldr	r3, [pc, #16]	; (f20 <delayInit+0x1c>)
     f10:	3a2b      	subs	r2, #43	; 0x2b
     f12:	601a      	str	r2, [r3, #0]
}
     f14:	4770      	bx	lr
     f16:	46c0      	nop			; (mov r8, r8)
     f18:	20000004 	.word	0x20000004
     f1c:	0000bb80 	.word	0x0000bb80
     f20:	e000e010 	.word	0xe000e010

00000f24 <delay_us>:
/**
 * \brief Delay loop to delay at least n number of microseconds
 *
 * \param n  Number of microseconds to wait
 */
void delay_us(uint32_t n) {
     f24:	b530      	push	{r4, r5, lr}
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
        SysTick->VAL = 0;

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     f26:	2480      	movs	r4, #128	; 0x80
        SysTick->VAL = 0;
     f28:	2100      	movs	r1, #0
    while (n--) {
        /* Devide up to blocks of 10u */
        delay_cycles(cycles_per_us);
     f2a:	4b07      	ldr	r3, [pc, #28]	; (f48 <delay_us+0x24>)
        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     f2c:	0264      	lsls	r4, r4, #9
     f2e:	685a      	ldr	r2, [r3, #4]
        SysTick->LOAD = n;
     f30:	4b06      	ldr	r3, [pc, #24]	; (f4c <delay_us+0x28>)
    while (n--) {
     f32:	3801      	subs	r0, #1
     f34:	d200      	bcs.n	f38 <delay_us+0x14>
    }
}
     f36:	bd30      	pop	{r4, r5, pc}
    if (n > 0) {
     f38:	2a00      	cmp	r2, #0
     f3a:	d0fa      	beq.n	f32 <delay_us+0xe>
        SysTick->LOAD = n;
     f3c:	605a      	str	r2, [r3, #4]
        SysTick->VAL = 0;
     f3e:	6099      	str	r1, [r3, #8]
        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     f40:	681d      	ldr	r5, [r3, #0]
     f42:	4225      	tst	r5, r4
     f44:	d0fc      	beq.n	f40 <delay_us+0x1c>
     f46:	e7f4      	b.n	f32 <delay_us+0xe>
     f48:	20000004 	.word	0x20000004
     f4c:	e000e010 	.word	0xe000e010

00000f50 <delay_ms>:
/**
 * \brief Delay loop to delay at least n number of milliseconds
 *
 * \param n  Number of milliseconds to wait
 */
void delay_ms(uint32_t n) {
     f50:	b530      	push	{r4, r5, lr}
     f52:	2480      	movs	r4, #128	; 0x80
        SysTick->VAL = 0;
     f54:	2100      	movs	r1, #0
    while (n--) {
        /* Devide up to blocks of 1ms */
        delay_cycles(cycles_per_ms);
     f56:	4b07      	ldr	r3, [pc, #28]	; (f74 <delay_ms+0x24>)
        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     f58:	0264      	lsls	r4, r4, #9
     f5a:	681a      	ldr	r2, [r3, #0]
        SysTick->LOAD = n;
     f5c:	4b06      	ldr	r3, [pc, #24]	; (f78 <delay_ms+0x28>)
    while (n--) {
     f5e:	3801      	subs	r0, #1
     f60:	d200      	bcs.n	f64 <delay_ms+0x14>
    }
}
     f62:	bd30      	pop	{r4, r5, pc}
    if (n > 0) {
     f64:	2a00      	cmp	r2, #0
     f66:	d0fa      	beq.n	f5e <delay_ms+0xe>
        SysTick->LOAD = n;
     f68:	605a      	str	r2, [r3, #4]
        SysTick->VAL = 0;
     f6a:	6099      	str	r1, [r3, #8]
        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     f6c:	681d      	ldr	r5, [r3, #0]
     f6e:	4225      	tst	r5, r4
     f70:	d0fc      	beq.n	f6c <delay_ms+0x1c>
     f72:	e7f4      	b.n	f5e <delay_ms+0xe>
     f74:	20000004 	.word	0x20000004
     f78:	e000e010 	.word	0xe000e010

00000f7c <RTC_Handler>:


volatile uint32_t time_ms = 0;

void RTC_Handler(void) {
    time_ms += 1000;
     f7c:	21fa      	movs	r1, #250	; 0xfa
     f7e:	4a04      	ldr	r2, [pc, #16]	; (f90 <RTC_Handler+0x14>)
     f80:	0089      	lsls	r1, r1, #2
     f82:	6813      	ldr	r3, [r2, #0]
     f84:	185b      	adds	r3, r3, r1
     f86:	6013      	str	r3, [r2, #0]
    RTC->MODE1.INTFLAG.reg = 0xFF;
     f88:	22ff      	movs	r2, #255	; 0xff
     f8a:	4b02      	ldr	r3, [pc, #8]	; (f94 <RTC_Handler+0x18>)
     f8c:	721a      	strb	r2, [r3, #8]
}
     f8e:	4770      	bx	lr
     f90:	200004bc 	.word	0x200004bc
     f94:	40001400 	.word	0x40001400

00000f98 <millis>:

uint32_t millis(void) {
     f98:	b530      	push	{r4, r5, lr}
    uint32_t ms;
    ATOMIC_SECTION_ENTER
     f9a:	f3ef 8110 	mrs	r1, PRIMASK
     f9e:	b672      	cpsid	i
    ms = time_ms + RTC->MODE1.COUNT.reg;
     fa0:	4b09      	ldr	r3, [pc, #36]	; (fc8 <millis+0x30>)
     fa2:	4c0a      	ldr	r4, [pc, #40]	; (fcc <millis+0x34>)
     fa4:	8a18      	ldrh	r0, [r3, #16]
     fa6:	6825      	ldr	r5, [r4, #0]
    if (RTC->MODE1.INTFLAG.bit.OVF)
     fa8:	7a1a      	ldrb	r2, [r3, #8]
    ms = time_ms + RTC->MODE1.COUNT.reg;
     faa:	b280      	uxth	r0, r0
    if (RTC->MODE1.INTFLAG.bit.OVF)
     fac:	09d2      	lsrs	r2, r2, #7
    ms = time_ms + RTC->MODE1.COUNT.reg;
     fae:	1940      	adds	r0, r0, r5
    if (RTC->MODE1.INTFLAG.bit.OVF)
     fb0:	2a00      	cmp	r2, #0
     fb2:	d005      	beq.n	fc0 <millis+0x28>
        ms = time_ms + RTC->MODE1.COUNT.reg + 1000;
     fb4:	22fa      	movs	r2, #250	; 0xfa
     fb6:	8a1b      	ldrh	r3, [r3, #16]
     fb8:	6820      	ldr	r0, [r4, #0]
     fba:	0092      	lsls	r2, r2, #2
     fbc:	1880      	adds	r0, r0, r2
     fbe:	18c0      	adds	r0, r0, r3
    ATOMIC_SECTION_LEAVE
     fc0:	f381 8810 	msr	PRIMASK, r1
    return ms;
}
     fc4:	bd30      	pop	{r4, r5, pc}
     fc6:	46c0      	nop			; (mov r8, r8)
     fc8:	40001400 	.word	0x40001400
     fcc:	200004bc 	.word	0x200004bc

00000fd0 <TC4Init>:

void TC4Init() {

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC4_GCLK_ID) |
     fd0:	4a0d      	ldr	r2, [pc, #52]	; (1008 <TC4Init+0x38>)
     fd2:	4b0e      	ldr	r3, [pc, #56]	; (100c <TC4Init+0x3c>)
     fd4:	805a      	strh	r2, [r3, #2]
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC4;
     fd6:	2380      	movs	r3, #128	; 0x80
     fd8:	4a0d      	ldr	r2, [pc, #52]	; (1010 <TC4Init+0x40>)
     fda:	015b      	lsls	r3, r3, #5
     fdc:	6a11      	ldr	r1, [r2, #32]
     fde:	430b      	orrs	r3, r1
     fe0:	6213      	str	r3, [r2, #32]

    TC4->COUNT8.CTRLA.reg = TC_CTRLA_MODE_COUNT8 |
     fe2:	4b0c      	ldr	r3, [pc, #48]	; (1014 <TC4Init+0x44>)
     fe4:	4a0c      	ldr	r2, [pc, #48]	; (1018 <TC4Init+0x48>)
     fe6:	801a      	strh	r2, [r3, #0]
                            TC_CTRLA_RUNSTDBY |
                            TC_CTRLA_PRESCALER_DIV2;
    TC4->COUNT8.PER.reg = 0x41;
     fe8:	2241      	movs	r2, #65	; 0x41
     fea:	751a      	strb	r2, [r3, #20]

    TC4->COUNT8.INTENSET.reg = TC_INTENSET_OVF;
     fec:	3a40      	subs	r2, #64	; 0x40
     fee:	735a      	strb	r2, [r3, #13]

    TC4->COUNT8.EVCTRL.reg = TC_EVCTRL_OVFEO;
     ff0:	32ff      	adds	r2, #255	; 0xff
     ff2:	815a      	strh	r2, [r3, #10]

    TC4->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
     ff4:	8819      	ldrh	r1, [r3, #0]
     ff6:	3afe      	subs	r2, #254	; 0xfe
     ff8:	430a      	orrs	r2, r1
     ffa:	801a      	strh	r2, [r3, #0]
     ffc:	2280      	movs	r2, #128	; 0x80
     ffe:	4b07      	ldr	r3, [pc, #28]	; (101c <TC4Init+0x4c>)
    1000:	0312      	lsls	r2, r2, #12
    1002:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(TC4_IRQn);
}
    1004:	4770      	bx	lr
    1006:	46c0      	nop			; (mov r8, r8)
    1008:	0000421c 	.word	0x0000421c
    100c:	40000c00 	.word	0x40000c00
    1010:	40000400 	.word	0x40000400
    1014:	42003000 	.word	0x42003000
    1018:	00000904 	.word	0x00000904
    101c:	e000e100 	.word	0xe000e100

00001020 <TC4_Handler>:

void TC4_Handler( void ) {
    TC4->COUNT8.INTFLAG.reg = 0xFF;
    1020:	22ff      	movs	r2, #255	; 0xff
void TC4_Handler( void ) {
    1022:	b510      	push	{r4, lr}
    TC4->COUNT8.INTFLAG.reg = 0xFF;
    1024:	4b02      	ldr	r3, [pc, #8]	; (1030 <TC4_Handler+0x10>)
    1026:	739a      	strb	r2, [r3, #14]
    pullSample();
    1028:	4b02      	ldr	r3, [pc, #8]	; (1034 <TC4_Handler+0x14>)
    102a:	4798      	blx	r3
}
    102c:	bd10      	pop	{r4, pc}
    102e:	46c0      	nop			; (mov r8, r8)
    1030:	42003000 	.word	0x42003000
    1034:	000022c5 	.word	0x000022c5

00001038 <TC5Init>:

void TC5Init() {

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC5_GCLK_ID) |
    1038:	4a0d      	ldr	r2, [pc, #52]	; (1070 <TC5Init+0x38>)
    103a:	4b0e      	ldr	r3, [pc, #56]	; (1074 <TC5Init+0x3c>)
    103c:	805a      	strh	r2, [r3, #2]
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC5;
    103e:	2380      	movs	r3, #128	; 0x80
    1040:	4a0d      	ldr	r2, [pc, #52]	; (1078 <TC5Init+0x40>)
    1042:	019b      	lsls	r3, r3, #6
    1044:	6a11      	ldr	r1, [r2, #32]
    1046:	430b      	orrs	r3, r1
    1048:	6213      	str	r3, [r2, #32]

    TC5->COUNT8.CTRLA.reg = TC_CTRLA_MODE_COUNT8 |
    104a:	4b0c      	ldr	r3, [pc, #48]	; (107c <TC5Init+0x44>)
    104c:	4a0c      	ldr	r2, [pc, #48]	; (1080 <TC5Init+0x48>)
    104e:	801a      	strh	r2, [r3, #0]
                            TC_CTRLA_RUNSTDBY |
                            TC_CTRLA_PRESCALER_DIV64;
							
    TC5->COUNT8.PER.reg = 0x20;
    1050:	2220      	movs	r2, #32
    1052:	751a      	strb	r2, [r3, #20]

    TC5->COUNT8.INTENSET.reg = TC_INTENSET_OVF;
    1054:	3a1f      	subs	r2, #31
    1056:	735a      	strb	r2, [r3, #13]

    TC5->COUNT8.EVCTRL.reg = TC_EVCTRL_OVFEO;
    1058:	32ff      	adds	r2, #255	; 0xff
    105a:	815a      	strh	r2, [r3, #10]

    TC5->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
    105c:	8819      	ldrh	r1, [r3, #0]
    105e:	3afe      	subs	r2, #254	; 0xfe
    1060:	430a      	orrs	r2, r1
    1062:	801a      	strh	r2, [r3, #0]
    1064:	2280      	movs	r2, #128	; 0x80
    1066:	4b07      	ldr	r3, [pc, #28]	; (1084 <TC5Init+0x4c>)
    1068:	0352      	lsls	r2, r2, #13
    106a:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(TC5_IRQn);
}
    106c:	4770      	bx	lr
    106e:	46c0      	nop			; (mov r8, r8)
    1070:	0000421c 	.word	0x0000421c
    1074:	40000c00 	.word	0x40000c00
    1078:	40000400 	.word	0x40000400
    107c:	42003400 	.word	0x42003400
    1080:	00000d04 	.word	0x00000d04
    1084:	e000e100 	.word	0xe000e100

00001088 <TC5_Handler>:

void TC5_Handler( void ) {
    TC5->COUNT8.INTFLAG.reg = 0xFF;
    1088:	22ff      	movs	r2, #255	; 0xff
    108a:	4b03      	ldr	r3, [pc, #12]	; (1098 <TC5_Handler+0x10>)
    108c:	739a      	strb	r2, [r3, #14]
    writeLog = true;
    108e:	4b03      	ldr	r3, [pc, #12]	; (109c <TC5_Handler+0x14>)
    1090:	3afe      	subs	r2, #254	; 0xfe
    1092:	701a      	strb	r2, [r3, #0]
}
    1094:	4770      	bx	lr
    1096:	46c0      	nop			; (mov r8, r8)
    1098:	42003400 	.word	0x42003400
    109c:	200004f8 	.word	0x200004f8

000010a0 <flight>:
#include <boardDefines.h>

flightState_t flightState;


void flight() {
    10a0:	b570      	push	{r4, r5, r6, lr}



    switch(flightState) {
    10a2:	4c62      	ldr	r4, [pc, #392]	; (122c <flight+0x18c>)
    10a4:	7820      	ldrb	r0, [r4, #0]
    10a6:	280a      	cmp	r0, #10
    10a8:	d819      	bhi.n	10de <flight+0x3e>
    10aa:	f002 fcab 	bl	3a04 <__gnu_thumb1_case_uqi>
    10ae:	2706      	.short	0x2706
    10b0:	18187038 	.word	0x18187038
    10b4:	1818189c 	.word	0x1818189c
    10b8:	b0          	.byte	0xb0
    10b9:	00          	.byte	0x00
    case flightStatrup:


        updateGround( );
    10ba:	4b5d      	ldr	r3, [pc, #372]	; (1230 <flight+0x190>)
    10bc:	4798      	blx	r3

        //logSensors( );


        if ((millis() - startupTick) > 10000) {
    10be:	4b5d      	ldr	r3, [pc, #372]	; (1234 <flight+0x194>)
    10c0:	4798      	blx	r3
    10c2:	4b5d      	ldr	r3, [pc, #372]	; (1238 <flight+0x198>)
    10c4:	681b      	ldr	r3, [r3, #0]
    10c6:	1ac0      	subs	r0, r0, r3
    10c8:	4b5c      	ldr	r3, [pc, #368]	; (123c <flight+0x19c>)
    10ca:	4298      	cmp	r0, r3
    10cc:	d908      	bls.n	10e0 <flight+0x40>
            findNewFlightStart( );
    10ce:	4b5c      	ldr	r3, [pc, #368]	; (1240 <flight+0x1a0>)
    10d0:	4798      	blx	r3
            logFlight( );
    10d2:	4b5c      	ldr	r3, [pc, #368]	; (1244 <flight+0x1a4>)
    10d4:	4798      	blx	r3
            startupJingle();
    10d6:	4b5c      	ldr	r3, [pc, #368]	; (1248 <flight+0x1a8>)
    10d8:	4798      	blx	r3
            flightState = flightTest;
    10da:	230a      	movs	r3, #10
    10dc:	7023      	strb	r3, [r4, #0]

        break;
    }


}
    10de:	bd70      	pop	{r4, r5, r6, pc}
        attemptConnection();
    10e0:	4b5a      	ldr	r3, [pc, #360]	; (124c <flight+0x1ac>)
    10e2:	4798      	blx	r3
        if (sample.voltage.batFloat < 3.5) {
    10e4:	4b5a      	ldr	r3, [pc, #360]	; (1250 <flight+0x1b0>)
    10e6:	495b      	ldr	r1, [pc, #364]	; (1254 <flight+0x1b4>)
    10e8:	68d8      	ldr	r0, [r3, #12]
    10ea:	4b5b      	ldr	r3, [pc, #364]	; (1258 <flight+0x1b8>)
    10ec:	4798      	blx	r3
    10ee:	2800      	cmp	r0, #0
    10f0:	d0f5      	beq.n	10de <flight+0x3e>
            flightState = flightIdle;
    10f2:	2301      	movs	r3, #1
    10f4:	7023      	strb	r3, [r4, #0]
            unpluggedJingle();
    10f6:	4b59      	ldr	r3, [pc, #356]	; (125c <flight+0x1bc>)
    10f8:	4798      	blx	r3
    10fa:	e7f0      	b.n	10de <flight+0x3e>
        if (sercom(USART3)->SPI.INTFLAG.bit.RXC == 1) {
    10fc:	4b58      	ldr	r3, [pc, #352]	; (1260 <flight+0x1c0>)
    10fe:	7e1b      	ldrb	r3, [r3, #24]
    1100:	075b      	lsls	r3, r3, #29
    1102:	d5ec      	bpl.n	10de <flight+0x3e>
            u8_t possibleReset = usartDataIn(USART3);
    1104:	2003      	movs	r0, #3
    1106:	4b57      	ldr	r3, [pc, #348]	; (1264 <flight+0x1c4>)
    1108:	4798      	blx	r3
            if (possibleReset == 0x52) {
    110a:	2852      	cmp	r0, #82	; 0x52
    110c:	d1e7      	bne.n	10de <flight+0x3e>
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
    110e:	f3bf 8f4f 	dsb	sy
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
    1112:	4a55      	ldr	r2, [pc, #340]	; (1268 <flight+0x1c8>)
    1114:	4b55      	ldr	r3, [pc, #340]	; (126c <flight+0x1cc>)
    1116:	60da      	str	r2, [r3, #12]
    1118:	f3bf 8f4f 	dsb	sy
    111c:	e7fe      	b.n	111c <flight+0x7c>
        updateGround();
    111e:	4b44      	ldr	r3, [pc, #272]	; (1230 <flight+0x190>)
    1120:	4798      	blx	r3
        if (writeLog) {
    1122:	4b53      	ldr	r3, [pc, #332]	; (1270 <flight+0x1d0>)
    1124:	781a      	ldrb	r2, [r3, #0]
    1126:	2a00      	cmp	r2, #0
    1128:	d005      	beq.n	1136 <flight+0x96>
            writeLog = false;
    112a:	2200      	movs	r2, #0
    112c:	701a      	strb	r2, [r3, #0]
    PORT->Group[p.group].OUTTGL.reg = (1<<p.pin);
    112e:	2280      	movs	r2, #128	; 0x80
    1130:	4b50      	ldr	r3, [pc, #320]	; (1274 <flight+0x1d4>)
    1132:	0352      	lsls	r2, r2, #13
    1134:	61da      	str	r2, [r3, #28]
        if (( velocity > 0.05) && ((altitude - offsets.groundOffset) > 5)) {
    1136:	4950      	ldr	r1, [pc, #320]	; (1278 <flight+0x1d8>)
    1138:	4d50      	ldr	r5, [pc, #320]	; (127c <flight+0x1dc>)
    113a:	4a51      	ldr	r2, [pc, #324]	; (1280 <flight+0x1e0>)
    113c:	4b51      	ldr	r3, [pc, #324]	; (1284 <flight+0x1e4>)
    113e:	6808      	ldr	r0, [r1, #0]
    1140:	6849      	ldr	r1, [r1, #4]
    1142:	47a8      	blx	r5
    1144:	2800      	cmp	r0, #0
    1146:	d014      	beq.n	1172 <flight+0xd2>
    1148:	4b4f      	ldr	r3, [pc, #316]	; (1288 <flight+0x1e8>)
    114a:	6998      	ldr	r0, [r3, #24]
    114c:	4b4f      	ldr	r3, [pc, #316]	; (128c <flight+0x1ec>)
    114e:	4798      	blx	r3
    1150:	000b      	movs	r3, r1
    1152:	494f      	ldr	r1, [pc, #316]	; (1290 <flight+0x1f0>)
    1154:	0002      	movs	r2, r0
    1156:	6808      	ldr	r0, [r1, #0]
    1158:	6849      	ldr	r1, [r1, #4]
    115a:	4e4e      	ldr	r6, [pc, #312]	; (1294 <flight+0x1f4>)
    115c:	47b0      	blx	r6
    115e:	2200      	movs	r2, #0
    1160:	4b4d      	ldr	r3, [pc, #308]	; (1298 <flight+0x1f8>)
    1162:	47a8      	blx	r5
    1164:	2800      	cmp	r0, #0
    1166:	d004      	beq.n	1172 <flight+0xd2>
            flightState = flightBoost;
    1168:	2303      	movs	r3, #3
            logEvent('L');
    116a:	204c      	movs	r0, #76	; 0x4c
            flightState = flightBoost;
    116c:	7023      	strb	r3, [r4, #0]
            logEvent('L');
    116e:	4b4b      	ldr	r3, [pc, #300]	; (129c <flight+0x1fc>)
    1170:	4798      	blx	r3
        if (sample.voltage.batFloat < 3.5) {
    1172:	4b37      	ldr	r3, [pc, #220]	; (1250 <flight+0x1b0>)
    1174:	4937      	ldr	r1, [pc, #220]	; (1254 <flight+0x1b4>)
    1176:	68d8      	ldr	r0, [r3, #12]
    1178:	4b37      	ldr	r3, [pc, #220]	; (1258 <flight+0x1b8>)
    117a:	4798      	blx	r3
    117c:	2800      	cmp	r0, #0
    117e:	d0ae      	beq.n	10de <flight+0x3e>
            flightState = flightIdle;
    1180:	2301      	movs	r3, #1
    1182:	7023      	strb	r3, [r4, #0]
            AT25SFHoldTillReady();
    1184:	4b46      	ldr	r3, [pc, #280]	; (12a0 <flight+0x200>)
    1186:	4798      	blx	r3
            writeFlightEndAddress( );
    1188:	4b46      	ldr	r3, [pc, #280]	; (12a4 <flight+0x204>)
    118a:	4798      	blx	r3
    118c:	e7b3      	b.n	10f6 <flight+0x56>
        if (writeLog) {
    118e:	4b38      	ldr	r3, [pc, #224]	; (1270 <flight+0x1d0>)
    1190:	781a      	ldrb	r2, [r3, #0]
    1192:	2a00      	cmp	r2, #0
    1194:	d015      	beq.n	11c2 <flight+0x122>
            writeLog = false;
    1196:	2500      	movs	r5, #0
    1198:	701d      	strb	r5, [r3, #0]
            logSensors( );
    119a:	4b43      	ldr	r3, [pc, #268]	; (12a8 <flight+0x208>)
    119c:	4798      	blx	r3
            if (pageReady) {
    119e:	4b43      	ldr	r3, [pc, #268]	; (12ac <flight+0x20c>)
    11a0:	781a      	ldrb	r2, [r3, #0]
    11a2:	42aa      	cmp	r2, r5
    11a4:	d00d      	beq.n	11c2 <flight+0x122>
    11a6:	2280      	movs	r2, #128	; 0x80
                pageReady = false;
    11a8:	701d      	strb	r5, [r3, #0]
    11aa:	4b32      	ldr	r3, [pc, #200]	; (1274 <flight+0x1d4>)
                u8_t bytesWritten = AT25SEWritePage(currentAddress,pageToWrite);
    11ac:	4d40      	ldr	r5, [pc, #256]	; (12b0 <flight+0x210>)
    11ae:	0352      	lsls	r2, r2, #13
    11b0:	61da      	str	r2, [r3, #28]
    11b2:	4940      	ldr	r1, [pc, #256]	; (12b4 <flight+0x214>)
    11b4:	4b40      	ldr	r3, [pc, #256]	; (12b8 <flight+0x218>)
    11b6:	6828      	ldr	r0, [r5, #0]
    11b8:	4798      	blx	r3
                currentAddress = (currentAddress + 0x100);
    11ba:	682b      	ldr	r3, [r5, #0]
    11bc:	3301      	adds	r3, #1
    11be:	33ff      	adds	r3, #255	; 0xff
    11c0:	602b      	str	r3, [r5, #0]
        if (velocity < 0) {
    11c2:	492d      	ldr	r1, [pc, #180]	; (1278 <flight+0x1d8>)
    11c4:	2200      	movs	r2, #0
    11c6:	6808      	ldr	r0, [r1, #0]
    11c8:	6849      	ldr	r1, [r1, #4]
    11ca:	2300      	movs	r3, #0
    11cc:	4d3b      	ldr	r5, [pc, #236]	; (12bc <flight+0x21c>)
    11ce:	47a8      	blx	r5
    11d0:	2800      	cmp	r0, #0
    11d2:	d0ce      	beq.n	1172 <flight+0xd2>
            flightState = flightDrogue;
    11d4:	2306      	movs	r3, #6
            logEvent('A');
    11d6:	2041      	movs	r0, #65	; 0x41
            flightState = flightDrogue;
    11d8:	7023      	strb	r3, [r4, #0]
            logEvent('A');
    11da:	4b30      	ldr	r3, [pc, #192]	; (129c <flight+0x1fc>)
    11dc:	4798      	blx	r3
            beep(100);
    11de:	2064      	movs	r0, #100	; 0x64
    11e0:	4b37      	ldr	r3, [pc, #220]	; (12c0 <flight+0x220>)
    11e2:	4798      	blx	r3
    11e4:	e7c5      	b.n	1172 <flight+0xd2>
        if (pageReady) {
    11e6:	4b31      	ldr	r3, [pc, #196]	; (12ac <flight+0x20c>)
    11e8:	781a      	ldrb	r2, [r3, #0]
    11ea:	2a00      	cmp	r2, #0
    11ec:	d0c1      	beq.n	1172 <flight+0xd2>
            pageReady = false;
    11ee:	2200      	movs	r2, #0
    11f0:	701a      	strb	r2, [r3, #0]
    11f2:	2280      	movs	r2, #128	; 0x80
    11f4:	4b1f      	ldr	r3, [pc, #124]	; (1274 <flight+0x1d4>)
                u8_t bytesWritten = AT25SEWritePage(currentAddress,pageToWrite);
    11f6:	4d2e      	ldr	r5, [pc, #184]	; (12b0 <flight+0x210>)
    11f8:	0352      	lsls	r2, r2, #13
    11fa:	61da      	str	r2, [r3, #28]
    11fc:	492d      	ldr	r1, [pc, #180]	; (12b4 <flight+0x214>)
    11fe:	4b2e      	ldr	r3, [pc, #184]	; (12b8 <flight+0x218>)
    1200:	6828      	ldr	r0, [r5, #0]
    1202:	4798      	blx	r3
                currentAddress = (currentAddress + 0x100);
    1204:	682b      	ldr	r3, [r5, #0]
    1206:	3301      	adds	r3, #1
    1208:	33ff      	adds	r3, #255	; 0xff
    120a:	602b      	str	r3, [r5, #0]
    120c:	e7b1      	b.n	1172 <flight+0xd2>
        if (writeLog) {
    120e:	4b18      	ldr	r3, [pc, #96]	; (1270 <flight+0x1d0>)
    1210:	781a      	ldrb	r2, [r3, #0]
    1212:	2a00      	cmp	r2, #0
    1214:	d0ad      	beq.n	1172 <flight+0xd2>
            writeLog = false;
    1216:	2500      	movs	r5, #0
    1218:	701d      	strb	r5, [r3, #0]
            logSensors( );
    121a:	4b23      	ldr	r3, [pc, #140]	; (12a8 <flight+0x208>)
    121c:	4798      	blx	r3
            if (pageReady) {
    121e:	4b23      	ldr	r3, [pc, #140]	; (12ac <flight+0x20c>)
    1220:	781a      	ldrb	r2, [r3, #0]
    1222:	42aa      	cmp	r2, r5
    1224:	d0a5      	beq.n	1172 <flight+0xd2>
                pageReady = false;
    1226:	701d      	strb	r5, [r3, #0]
    1228:	e7e3      	b.n	11f2 <flight+0x152>
    122a:	46c0      	nop			; (mov r8, r8)
    122c:	20000640 	.word	0x20000640
    1230:	000012c5 	.word	0x000012c5
    1234:	00000f99 	.word	0x00000f99
    1238:	200004fc 	.word	0x200004fc
    123c:	00002710 	.word	0x00002710
    1240:	00002201 	.word	0x00002201
    1244:	00001f1d 	.word	0x00001f1d
    1248:	00000d41 	.word	0x00000d41
    124c:	00002741 	.word	0x00002741
    1250:	20000788 	.word	0x20000788
    1254:	40600000 	.word	0x40600000
    1258:	00003ab9 	.word	0x00003ab9
    125c:	00000d79 	.word	0x00000d79
    1260:	42001400 	.word	0x42001400
    1264:	00002731 	.word	0x00002731
    1268:	05fa0004 	.word	0x05fa0004
    126c:	e000ed00 	.word	0xe000ed00
    1270:	200004f8 	.word	0x200004f8
    1274:	41004400 	.word	0x41004400
    1278:	20000650 	.word	0x20000650
    127c:	00003a6d 	.word	0x00003a6d
    1280:	9999999a 	.word	0x9999999a
    1284:	3fa99999 	.word	0x3fa99999
    1288:	200004c8 	.word	0x200004c8
    128c:	00005e51 	.word	0x00005e51
    1290:	20000658 	.word	0x20000658
    1294:	000056f9 	.word	0x000056f9
    1298:	40140000 	.word	0x40140000
    129c:	00001f79 	.word	0x00001f79
    12a0:	000001e5 	.word	0x000001e5
    12a4:	000021c5 	.word	0x000021c5
    12a8:	00001fdd 	.word	0x00001fdd
    12ac:	20000778 	.word	0x20000778
    12b0:	2000077c 	.word	0x2000077c
    12b4:	20000678 	.word	0x20000678
    12b8:	000002c9 	.word	0x000002c9
    12bc:	00003a45 	.word	0x00003a45
    12c0:	00000d09 	.word	0x00000d09

000012c4 <updateGround>:
#include <util.h>
#include <altimeter.h>

void updateGround(Altimeter *my_altimeter) {
    12c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

    offsets.gravityOffsetBuffer = offsets.gravityOffsetBuffer * 0.8 + sample.accelZ * 0.2;
    12c6:	4b2e      	ldr	r3, [pc, #184]	; (1380 <updateGround+0xbc>)
    12c8:	4c2e      	ldr	r4, [pc, #184]	; (1384 <updateGround+0xc0>)
    12ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    12cc:	4d2e      	ldr	r5, [pc, #184]	; (1388 <updateGround+0xc4>)
    12ce:	4a2f      	ldr	r2, [pc, #188]	; (138c <updateGround+0xc8>)
    12d0:	6920      	ldr	r0, [r4, #16]
    12d2:	6961      	ldr	r1, [r4, #20]
    12d4:	9300      	str	r3, [sp, #0]
    12d6:	4b2e      	ldr	r3, [pc, #184]	; (1390 <updateGround+0xcc>)
    12d8:	47a8      	blx	r5
    12da:	4b2e      	ldr	r3, [pc, #184]	; (1394 <updateGround+0xd0>)
    12dc:	0006      	movs	r6, r0
    12de:	9800      	ldr	r0, [sp, #0]
    12e0:	000f      	movs	r7, r1
    12e2:	4798      	blx	r3
    12e4:	4a29      	ldr	r2, [pc, #164]	; (138c <updateGround+0xc8>)
    12e6:	4b2c      	ldr	r3, [pc, #176]	; (1398 <updateGround+0xd4>)
    12e8:	47a8      	blx	r5
    12ea:	0002      	movs	r2, r0
    12ec:	000b      	movs	r3, r1
    12ee:	0030      	movs	r0, r6
    12f0:	0039      	movs	r1, r7
    12f2:	4e2a      	ldr	r6, [pc, #168]	; (139c <updateGround+0xd8>)
    12f4:	47b0      	blx	r6
    offsets.groundOffsetBuffer = offsets.groundOffsetBuffer * 0.5 + altitude * 0.5;
    12f6:	4b2a      	ldr	r3, [pc, #168]	; (13a0 <updateGround+0xdc>)
    offsets.gravityOffsetBuffer = offsets.gravityOffsetBuffer * 0.8 + sample.accelZ * 0.2;
    12f8:	6120      	str	r0, [r4, #16]
    12fa:	6161      	str	r1, [r4, #20]
    offsets.groundOffsetBuffer = offsets.groundOffsetBuffer * 0.5 + altitude * 0.5;
    12fc:	69e0      	ldr	r0, [r4, #28]
    12fe:	4798      	blx	r3
    1300:	2200      	movs	r2, #0
    1302:	4b28      	ldr	r3, [pc, #160]	; (13a4 <updateGround+0xe0>)
    1304:	47a8      	blx	r5
    1306:	000f      	movs	r7, r1
    1308:	4927      	ldr	r1, [pc, #156]	; (13a8 <updateGround+0xe4>)
    130a:	0006      	movs	r6, r0
    130c:	6808      	ldr	r0, [r1, #0]
    130e:	6849      	ldr	r1, [r1, #4]
    1310:	2200      	movs	r2, #0
    1312:	4b24      	ldr	r3, [pc, #144]	; (13a4 <updateGround+0xe0>)
    1314:	47a8      	blx	r5
    1316:	0002      	movs	r2, r0
    1318:	000b      	movs	r3, r1
    131a:	0030      	movs	r0, r6
    131c:	0039      	movs	r1, r7
    131e:	4e1f      	ldr	r6, [pc, #124]	; (139c <updateGround+0xd8>)
    1320:	47b0      	blx	r6
    1322:	4f22      	ldr	r7, [pc, #136]	; (13ac <updateGround+0xe8>)
    1324:	47b8      	blx	r7
    offsets.groundTemperatureBuffer = offsets.groundTemperatureBuffer * 0.8 + sample.temperatureCelcus * 0.2;
    1326:	4b16      	ldr	r3, [pc, #88]	; (1380 <updateGround+0xbc>)
    offsets.groundOffsetBuffer = offsets.groundOffsetBuffer * 0.5 + altitude * 0.5;
    1328:	61e0      	str	r0, [r4, #28]
    offsets.groundTemperatureBuffer = offsets.groundTemperatureBuffer * 0.8 + sample.temperatureCelcus * 0.2;
    132a:	6bde      	ldr	r6, [r3, #60]	; 0x3c
    132c:	6a60      	ldr	r0, [r4, #36]	; 0x24
    132e:	4b1c      	ldr	r3, [pc, #112]	; (13a0 <updateGround+0xdc>)
    1330:	4798      	blx	r3
    1332:	4a16      	ldr	r2, [pc, #88]	; (138c <updateGround+0xc8>)
    1334:	4b16      	ldr	r3, [pc, #88]	; (1390 <updateGround+0xcc>)
    1336:	47a8      	blx	r5
    1338:	4b19      	ldr	r3, [pc, #100]	; (13a0 <updateGround+0xdc>)
    133a:	9000      	str	r0, [sp, #0]
    133c:	9101      	str	r1, [sp, #4]
    133e:	0030      	movs	r0, r6
    1340:	4798      	blx	r3
    1342:	4a12      	ldr	r2, [pc, #72]	; (138c <updateGround+0xc8>)
    1344:	4b14      	ldr	r3, [pc, #80]	; (1398 <updateGround+0xd4>)
    1346:	47a8      	blx	r5
    1348:	000b      	movs	r3, r1
    134a:	0002      	movs	r2, r0
    134c:	9800      	ldr	r0, [sp, #0]
    134e:	9901      	ldr	r1, [sp, #4]
    1350:	4d12      	ldr	r5, [pc, #72]	; (139c <updateGround+0xd8>)
    1352:	47a8      	blx	r5
    1354:	47b8      	blx	r7

    if ((millis() - offsets.offsetBufferTime) > 2000) {
    1356:	4d16      	ldr	r5, [pc, #88]	; (13b0 <updateGround+0xec>)
    offsets.groundTemperatureBuffer = offsets.groundTemperatureBuffer * 0.8 + sample.temperatureCelcus * 0.2;
    1358:	6260      	str	r0, [r4, #36]	; 0x24
    if ((millis() - offsets.offsetBufferTime) > 2000) {
    135a:	47a8      	blx	r5
    135c:	6823      	ldr	r3, [r4, #0]
    135e:	1ac0      	subs	r0, r0, r3
    1360:	23fa      	movs	r3, #250	; 0xfa
    1362:	00db      	lsls	r3, r3, #3
    1364:	4298      	cmp	r0, r3
    1366:	d909      	bls.n	137c <updateGround+0xb8>
        //recursive filter
        offsets.groundOffset = offsets.groundOffsetBuffer;
    1368:	69e3      	ldr	r3, [r4, #28]
    136a:	61a3      	str	r3, [r4, #24]
        offsets.groundTemperature = offsets.groundTemperatureBuffer;
    136c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    136e:	6223      	str	r3, [r4, #32]
        offsets.gravityOffset = offsets.gravityOffsetBuffer;
    1370:	6922      	ldr	r2, [r4, #16]
    1372:	6963      	ldr	r3, [r4, #20]
    1374:	60a2      	str	r2, [r4, #8]
    1376:	60e3      	str	r3, [r4, #12]
        offsets.offsetBufferTime = millis();
    1378:	47a8      	blx	r5
    137a:	6020      	str	r0, [r4, #0]
    }
}
    137c:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    137e:	46c0      	nop			; (mov r8, r8)
    1380:	20000788 	.word	0x20000788
    1384:	200004c8 	.word	0x200004c8
    1388:	000051f9 	.word	0x000051f9
    138c:	9999999a 	.word	0x9999999a
    1390:	3fe99999 	.word	0x3fe99999
    1394:	00005ec1 	.word	0x00005ec1
    1398:	3fc99999 	.word	0x3fc99999
    139c:	00004371 	.word	0x00004371
    13a0:	00005e51 	.word	0x00005e51
    13a4:	3fe00000 	.word	0x3fe00000
    13a8:	20000658 	.word	0x20000658
    13ac:	00003b8d 	.word	0x00003b8d
    13b0:	00000f99 	.word	0x00000f99

000013b4 <computeKalmanGains>:
    /*
     Fill in state transition matrix and its transpose
    */
    phi[0][1]    = dt;
    phi[1][2]    = dt;
    phi[0][2]    = dt*dt/2.0;
    13b4:	2208      	movs	r2, #8
    phi[0][1]    = dt;
    13b6:	4bdd      	ldr	r3, [pc, #884]	; (172c <computeKalmanGains+0x378>)
    13b8:	48dd      	ldr	r0, [pc, #884]	; (1730 <computeKalmanGains+0x37c>)
    13ba:	49de      	ldr	r1, [pc, #888]	; (1734 <computeKalmanGains+0x380>)
void computeKalmanGains() {
    13bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    phi[0][1]    = dt;
    13be:	6098      	str	r0, [r3, #8]
    13c0:	60d9      	str	r1, [r3, #12]
    phi[1][2]    = dt;
    13c2:	6298      	str	r0, [r3, #40]	; 0x28
    13c4:	62d9      	str	r1, [r3, #44]	; 0x2c
    phi[0][2]    = dt*dt/2.0;
    13c6:	48dc      	ldr	r0, [pc, #880]	; (1738 <computeKalmanGains+0x384>)
    13c8:	49dc      	ldr	r1, [pc, #880]	; (173c <computeKalmanGains+0x388>)
void computeKalmanGains() {
    13ca:	b0cd      	sub	sp, #308	; 0x134
    phi[0][2]    = dt*dt/2.0;
    13cc:	6118      	str	r0, [r3, #16]
    13ce:	6159      	str	r1, [r3, #20]
    13d0:	a940      	add	r1, sp, #256	; 0x100
    13d2:	1857      	adds	r7, r2, r1



    for( i = 0; i <= 2; i++)
        for( j = 0; j <=1; j++) {
            lastkgain[i][j] = .001;
    13d4:	003e      	movs	r6, r7
    13d6:	48d6      	ldr	r0, [pc, #856]	; (1730 <computeKalmanGains+0x37c>)
    13d8:	49d9      	ldr	r1, [pc, #868]	; (1740 <computeKalmanGains+0x38c>)
    13da:	3e08      	subs	r6, #8
    13dc:	6030      	str	r0, [r6, #0]
    13de:	6071      	str	r1, [r6, #4]
            kgain[i][j] = 1.0;
    13e0:	2108      	movs	r1, #8
    13e2:	4249      	negs	r1, r1
    13e4:	468c      	mov	ip, r1
    13e6:	4ed7      	ldr	r6, [pc, #860]	; (1744 <computeKalmanGains+0x390>)
    13e8:	2400      	movs	r4, #0
    13ea:	1996      	adds	r6, r2, r6
    13ec:	44b4      	add	ip, r6
    13ee:	4661      	mov	r1, ip
    13f0:	4dd5      	ldr	r5, [pc, #852]	; (1748 <computeKalmanGains+0x394>)
            lastkgain[i][j] = .001;
    13f2:	48cf      	ldr	r0, [pc, #828]	; (1730 <computeKalmanGains+0x37c>)
            kgain[i][j] = 1.0;
    13f4:	600c      	str	r4, [r1, #0]
    13f6:	604d      	str	r5, [r1, #4]
            lastkgain[i][j] = .001;
    13f8:	49d1      	ldr	r1, [pc, #836]	; (1740 <computeKalmanGains+0x38c>)
    13fa:	3210      	adds	r2, #16
    13fc:	6038      	str	r0, [r7, #0]
    13fe:	6079      	str	r1, [r7, #4]
            kgain[i][j] = 1.0;
    1400:	0020      	movs	r0, r4
    1402:	0029      	movs	r1, r5
    1404:	6030      	str	r0, [r6, #0]
    1406:	6071      	str	r1, [r6, #4]
    for( i = 0; i <= 2; i++)
    1408:	2a38      	cmp	r2, #56	; 0x38
    140a:	d1e1      	bne.n	13d0 <computeKalmanGains+0x1c>

    /* Compute the Kalman gain matrix. */
    while(1) {
        /* Propagate state covariance */

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
    140c:	6819      	ldr	r1, [r3, #0]
    140e:	685a      	ldr	r2, [r3, #4]
    1410:	911a      	str	r1, [sp, #104]	; 0x68
    1412:	921b      	str	r2, [sp, #108]	; 0x6c
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
    1414:	6999      	ldr	r1, [r3, #24]
    1416:	69da      	ldr	r2, [r3, #28]
    1418:	911c      	str	r1, [sp, #112]	; 0x70
    141a:	921d      	str	r2, [sp, #116]	; 0x74
    141c:	6a19      	ldr	r1, [r3, #32]
    141e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    1420:	911e      	str	r1, [sp, #120]	; 0x78
    1422:	921f      	str	r2, [sp, #124]	; 0x7c
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
    1424:	6b19      	ldr	r1, [r3, #48]	; 0x30
    1426:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    1428:	9120      	str	r1, [sp, #128]	; 0x80
    142a:	9221      	str	r2, [sp, #132]	; 0x84
    142c:	6b99      	ldr	r1, [r3, #56]	; 0x38
    142e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    1430:	9122      	str	r1, [sp, #136]	; 0x88
    1432:	9223      	str	r2, [sp, #140]	; 0x8c
    1434:	6c19      	ldr	r1, [r3, #64]	; 0x40
    1436:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    1438:	9124      	str	r1, [sp, #144]	; 0x90
    143a:	9225      	str	r2, [sp, #148]	; 0x94
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
        pestp[2][1] = term[2][0] * phit[0][1] + term[2][1] * phit[1][1] + term[2][2] * phit[2][1];
        pestp[2][2] = term[2][0] * phit[0][2] + term[2][1] * phit[1][2] + term[2][2] * phit[2][2];

        pestp[2][2] = pestp[2][2] + model_variance;
    143c:	6c99      	ldr	r1, [r3, #72]	; 0x48
    143e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    1440:	913a      	str	r1, [sp, #232]	; 0xe8
    1442:	923b      	str	r2, [sp, #236]	; 0xec
        /*
          Calculate Kalman Gain
        */
        det = (pestp[0][0]+altitude_variance)*(pestp[2][2] + acceleration_variance) - pestp[2][0] * pestp[0][2];
    1444:	6d19      	ldr	r1, [r3, #80]	; 0x50
    1446:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    1448:	6ddc      	ldr	r4, [r3, #92]	; 0x5c
    144a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    144c:	933e      	str	r3, [sp, #248]	; 0xf8
    144e:	943f      	str	r4, [sp, #252]	; 0xfc
    1450:	2300      	movs	r3, #0
    1452:	4cbe      	ldr	r4, [pc, #760]	; (174c <computeKalmanGains+0x398>)
    1454:	913c      	str	r1, [sp, #240]	; 0xf0
    1456:	923d      	str	r2, [sp, #244]	; 0xf4
    1458:	9302      	str	r3, [sp, #8]
    145a:	9403      	str	r4, [sp, #12]
    145c:	2300      	movs	r3, #0
    145e:	2400      	movs	r4, #0
    1460:	9310      	str	r3, [sp, #64]	; 0x40
    1462:	9411      	str	r4, [sp, #68]	; 0x44
    1464:	9300      	str	r3, [sp, #0]
    1466:	9401      	str	r4, [sp, #4]
    1468:	9304      	str	r3, [sp, #16]
    146a:	9405      	str	r4, [sp, #20]
    146c:	2300      	movs	r3, #0
    146e:	4cb7      	ldr	r4, [pc, #732]	; (174c <computeKalmanGains+0x398>)
    1470:	930e      	str	r3, [sp, #56]	; 0x38
    1472:	940f      	str	r4, [sp, #60]	; 0x3c
    1474:	2300      	movs	r3, #0
    1476:	2400      	movs	r4, #0
    1478:	9308      	str	r3, [sp, #32]
    147a:	9409      	str	r4, [sp, #36]	; 0x24
    147c:	930c      	str	r3, [sp, #48]	; 0x30
    147e:	940d      	str	r4, [sp, #52]	; 0x34
    1480:	930a      	str	r3, [sp, #40]	; 0x28
    1482:	940b      	str	r4, [sp, #44]	; 0x2c
    1484:	2480      	movs	r4, #128	; 0x80
    1486:	2300      	movs	r3, #0
    1488:	05e4      	lsls	r4, r4, #23
    148a:	9306      	str	r3, [sp, #24]
    148c:	9407      	str	r4, [sp, #28]
    148e:	2300      	movs	r3, #0
    1490:	9338      	str	r3, [sp, #224]	; 0xe0
        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
    1492:	4daf      	ldr	r5, [pc, #700]	; (1750 <computeKalmanGains+0x39c>)
    1494:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    1496:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    1498:	9806      	ldr	r0, [sp, #24]
    149a:	9907      	ldr	r1, [sp, #28]
    149c:	47a8      	blx	r5
    149e:	4aa4      	ldr	r2, [pc, #656]	; (1730 <computeKalmanGains+0x37c>)
    14a0:	0006      	movs	r6, r0
    14a2:	000f      	movs	r7, r1
    14a4:	9808      	ldr	r0, [sp, #32]
    14a6:	9909      	ldr	r1, [sp, #36]	; 0x24
    14a8:	4ba2      	ldr	r3, [pc, #648]	; (1734 <computeKalmanGains+0x380>)
    14aa:	47a8      	blx	r5
    14ac:	4ca9      	ldr	r4, [pc, #676]	; (1754 <computeKalmanGains+0x3a0>)
    14ae:	0002      	movs	r2, r0
    14b0:	000b      	movs	r3, r1
    14b2:	0030      	movs	r0, r6
    14b4:	0039      	movs	r1, r7
    14b6:	47a0      	blx	r4
    14b8:	4a9f      	ldr	r2, [pc, #636]	; (1738 <computeKalmanGains+0x384>)
    14ba:	0006      	movs	r6, r0
    14bc:	000f      	movs	r7, r1
    14be:	9800      	ldr	r0, [sp, #0]
    14c0:	9901      	ldr	r1, [sp, #4]
    14c2:	4b9e      	ldr	r3, [pc, #632]	; (173c <computeKalmanGains+0x388>)
    14c4:	47a8      	blx	r5
    14c6:	0002      	movs	r2, r0
    14c8:	000b      	movs	r3, r1
    14ca:	0030      	movs	r0, r6
    14cc:	0039      	movs	r1, r7
    14ce:	47a0      	blx	r4
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
    14d0:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    14d2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
    14d4:	9016      	str	r0, [sp, #88]	; 0x58
    14d6:	9117      	str	r1, [sp, #92]	; 0x5c
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
    14d8:	980a      	ldr	r0, [sp, #40]	; 0x28
    14da:	990b      	ldr	r1, [sp, #44]	; 0x2c
    14dc:	47a8      	blx	r5
    14de:	4a94      	ldr	r2, [pc, #592]	; (1730 <computeKalmanGains+0x37c>)
    14e0:	0006      	movs	r6, r0
    14e2:	000f      	movs	r7, r1
    14e4:	980e      	ldr	r0, [sp, #56]	; 0x38
    14e6:	990f      	ldr	r1, [sp, #60]	; 0x3c
    14e8:	4b92      	ldr	r3, [pc, #584]	; (1734 <computeKalmanGains+0x380>)
    14ea:	47a8      	blx	r5
    14ec:	0002      	movs	r2, r0
    14ee:	000b      	movs	r3, r1
    14f0:	0030      	movs	r0, r6
    14f2:	0039      	movs	r1, r7
    14f4:	47a0      	blx	r4
    14f6:	4a90      	ldr	r2, [pc, #576]	; (1738 <computeKalmanGains+0x384>)
    14f8:	0006      	movs	r6, r0
    14fa:	000f      	movs	r7, r1
    14fc:	9810      	ldr	r0, [sp, #64]	; 0x40
    14fe:	9911      	ldr	r1, [sp, #68]	; 0x44
    1500:	4b8e      	ldr	r3, [pc, #568]	; (173c <computeKalmanGains+0x388>)
    1502:	47a8      	blx	r5
    1504:	0002      	movs	r2, r0
    1506:	000b      	movs	r3, r1
    1508:	0030      	movs	r0, r6
    150a:	0039      	movs	r1, r7
    150c:	47a0      	blx	r4
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
    150e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    1510:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
    1512:	9012      	str	r0, [sp, #72]	; 0x48
    1514:	9113      	str	r1, [sp, #76]	; 0x4c
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
    1516:	980c      	ldr	r0, [sp, #48]	; 0x30
    1518:	990d      	ldr	r1, [sp, #52]	; 0x34
    151a:	47a8      	blx	r5
    151c:	4a84      	ldr	r2, [pc, #528]	; (1730 <computeKalmanGains+0x37c>)
    151e:	0006      	movs	r6, r0
    1520:	000f      	movs	r7, r1
    1522:	9804      	ldr	r0, [sp, #16]
    1524:	9905      	ldr	r1, [sp, #20]
    1526:	4b83      	ldr	r3, [pc, #524]	; (1734 <computeKalmanGains+0x380>)
    1528:	47a8      	blx	r5
    152a:	0002      	movs	r2, r0
    152c:	000b      	movs	r3, r1
    152e:	0030      	movs	r0, r6
    1530:	0039      	movs	r1, r7
    1532:	47a0      	blx	r4
    1534:	4a80      	ldr	r2, [pc, #512]	; (1738 <computeKalmanGains+0x384>)
    1536:	0006      	movs	r6, r0
    1538:	000f      	movs	r7, r1
    153a:	9802      	ldr	r0, [sp, #8]
    153c:	9903      	ldr	r1, [sp, #12]
    153e:	4b7f      	ldr	r3, [pc, #508]	; (173c <computeKalmanGains+0x388>)
    1540:	47a8      	blx	r5
    1542:	0002      	movs	r2, r0
    1544:	000b      	movs	r3, r1
    1546:	0030      	movs	r0, r6
    1548:	0039      	movs	r1, r7
    154a:	47a0      	blx	r4
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
    154c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    154e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
    1550:	9014      	str	r0, [sp, #80]	; 0x50
    1552:	9115      	str	r1, [sp, #84]	; 0x54
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
    1554:	9806      	ldr	r0, [sp, #24]
    1556:	9907      	ldr	r1, [sp, #28]
    1558:	47a8      	blx	r5
    155a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    155c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    155e:	0006      	movs	r6, r0
    1560:	000f      	movs	r7, r1
    1562:	9808      	ldr	r0, [sp, #32]
    1564:	9909      	ldr	r1, [sp, #36]	; 0x24
    1566:	47a8      	blx	r5
    1568:	0002      	movs	r2, r0
    156a:	000b      	movs	r3, r1
    156c:	0030      	movs	r0, r6
    156e:	0039      	movs	r1, r7
    1570:	47a0      	blx	r4
    1572:	4a6f      	ldr	r2, [pc, #444]	; (1730 <computeKalmanGains+0x37c>)
    1574:	0006      	movs	r6, r0
    1576:	000f      	movs	r7, r1
    1578:	9800      	ldr	r0, [sp, #0]
    157a:	9901      	ldr	r1, [sp, #4]
    157c:	4b6d      	ldr	r3, [pc, #436]	; (1734 <computeKalmanGains+0x380>)
    157e:	47a8      	blx	r5
    1580:	0002      	movs	r2, r0
    1582:	000b      	movs	r3, r1
    1584:	0030      	movs	r0, r6
    1586:	0039      	movs	r1, r7
    1588:	47a0      	blx	r4
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
    158a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    158c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
    158e:	9018      	str	r0, [sp, #96]	; 0x60
    1590:	9119      	str	r1, [sp, #100]	; 0x64
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
    1592:	980a      	ldr	r0, [sp, #40]	; 0x28
    1594:	990b      	ldr	r1, [sp, #44]	; 0x2c
    1596:	47a8      	blx	r5
    1598:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    159a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    159c:	0006      	movs	r6, r0
    159e:	000f      	movs	r7, r1
    15a0:	980e      	ldr	r0, [sp, #56]	; 0x38
    15a2:	990f      	ldr	r1, [sp, #60]	; 0x3c
    15a4:	47a8      	blx	r5
    15a6:	0002      	movs	r2, r0
    15a8:	000b      	movs	r3, r1
    15aa:	0030      	movs	r0, r6
    15ac:	0039      	movs	r1, r7
    15ae:	47a0      	blx	r4
    15b0:	4a5f      	ldr	r2, [pc, #380]	; (1730 <computeKalmanGains+0x37c>)
    15b2:	0006      	movs	r6, r0
    15b4:	000f      	movs	r7, r1
    15b6:	9810      	ldr	r0, [sp, #64]	; 0x40
    15b8:	9911      	ldr	r1, [sp, #68]	; 0x44
    15ba:	4b5e      	ldr	r3, [pc, #376]	; (1734 <computeKalmanGains+0x380>)
    15bc:	47a8      	blx	r5
    15be:	0002      	movs	r2, r0
    15c0:	000b      	movs	r3, r1
    15c2:	0030      	movs	r0, r6
    15c4:	0039      	movs	r1, r7
    15c6:	47a0      	blx	r4
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
    15c8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    15ca:	9b1d      	ldr	r3, [sp, #116]	; 0x74
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
    15cc:	9026      	str	r0, [sp, #152]	; 0x98
    15ce:	9127      	str	r1, [sp, #156]	; 0x9c
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
    15d0:	980c      	ldr	r0, [sp, #48]	; 0x30
    15d2:	990d      	ldr	r1, [sp, #52]	; 0x34
    15d4:	47a8      	blx	r5
    15d6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    15d8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    15da:	0006      	movs	r6, r0
    15dc:	000f      	movs	r7, r1
    15de:	9804      	ldr	r0, [sp, #16]
    15e0:	9905      	ldr	r1, [sp, #20]
    15e2:	47a8      	blx	r5
    15e4:	0002      	movs	r2, r0
    15e6:	000b      	movs	r3, r1
    15e8:	0030      	movs	r0, r6
    15ea:	0039      	movs	r1, r7
    15ec:	47a0      	blx	r4
    15ee:	4a50      	ldr	r2, [pc, #320]	; (1730 <computeKalmanGains+0x37c>)
    15f0:	0006      	movs	r6, r0
    15f2:	000f      	movs	r7, r1
    15f4:	9802      	ldr	r0, [sp, #8]
    15f6:	9903      	ldr	r1, [sp, #12]
    15f8:	4b4e      	ldr	r3, [pc, #312]	; (1734 <computeKalmanGains+0x380>)
    15fa:	47a8      	blx	r5
    15fc:	0002      	movs	r2, r0
    15fe:	000b      	movs	r3, r1
    1600:	0030      	movs	r0, r6
    1602:	0039      	movs	r1, r7
    1604:	47a0      	blx	r4
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
    1606:	9a20      	ldr	r2, [sp, #128]	; 0x80
    1608:	9b21      	ldr	r3, [sp, #132]	; 0x84
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
    160a:	9028      	str	r0, [sp, #160]	; 0xa0
    160c:	9129      	str	r1, [sp, #164]	; 0xa4
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
    160e:	9806      	ldr	r0, [sp, #24]
    1610:	9907      	ldr	r1, [sp, #28]
    1612:	47a8      	blx	r5
    1614:	9a22      	ldr	r2, [sp, #136]	; 0x88
    1616:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    1618:	0006      	movs	r6, r0
    161a:	000f      	movs	r7, r1
    161c:	9808      	ldr	r0, [sp, #32]
    161e:	9909      	ldr	r1, [sp, #36]	; 0x24
    1620:	47a8      	blx	r5
    1622:	0002      	movs	r2, r0
    1624:	000b      	movs	r3, r1
    1626:	0030      	movs	r0, r6
    1628:	0039      	movs	r1, r7
    162a:	47a0      	blx	r4
    162c:	9a24      	ldr	r2, [sp, #144]	; 0x90
    162e:	9b25      	ldr	r3, [sp, #148]	; 0x94
    1630:	0006      	movs	r6, r0
    1632:	000f      	movs	r7, r1
    1634:	9800      	ldr	r0, [sp, #0]
    1636:	9901      	ldr	r1, [sp, #4]
    1638:	47a8      	blx	r5
    163a:	0002      	movs	r2, r0
    163c:	000b      	movs	r3, r1
    163e:	0030      	movs	r0, r6
    1640:	0039      	movs	r1, r7
    1642:	47a0      	blx	r4
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
    1644:	9a20      	ldr	r2, [sp, #128]	; 0x80
    1646:	9b21      	ldr	r3, [sp, #132]	; 0x84
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
    1648:	902e      	str	r0, [sp, #184]	; 0xb8
    164a:	912f      	str	r1, [sp, #188]	; 0xbc
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
    164c:	980a      	ldr	r0, [sp, #40]	; 0x28
    164e:	990b      	ldr	r1, [sp, #44]	; 0x2c
    1650:	47a8      	blx	r5
    1652:	9a22      	ldr	r2, [sp, #136]	; 0x88
    1654:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    1656:	0006      	movs	r6, r0
    1658:	000f      	movs	r7, r1
    165a:	980e      	ldr	r0, [sp, #56]	; 0x38
    165c:	990f      	ldr	r1, [sp, #60]	; 0x3c
    165e:	47a8      	blx	r5
    1660:	0002      	movs	r2, r0
    1662:	000b      	movs	r3, r1
    1664:	0030      	movs	r0, r6
    1666:	0039      	movs	r1, r7
    1668:	47a0      	blx	r4
    166a:	9a24      	ldr	r2, [sp, #144]	; 0x90
    166c:	9b25      	ldr	r3, [sp, #148]	; 0x94
    166e:	0006      	movs	r6, r0
    1670:	000f      	movs	r7, r1
    1672:	9810      	ldr	r0, [sp, #64]	; 0x40
    1674:	9911      	ldr	r1, [sp, #68]	; 0x44
    1676:	47a8      	blx	r5
    1678:	0002      	movs	r2, r0
    167a:	000b      	movs	r3, r1
    167c:	0030      	movs	r0, r6
    167e:	0039      	movs	r1, r7
    1680:	47a0      	blx	r4
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];
    1682:	9a20      	ldr	r2, [sp, #128]	; 0x80
    1684:	9b21      	ldr	r3, [sp, #132]	; 0x84
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
    1686:	9006      	str	r0, [sp, #24]
    1688:	9107      	str	r1, [sp, #28]
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];
    168a:	980c      	ldr	r0, [sp, #48]	; 0x30
    168c:	990d      	ldr	r1, [sp, #52]	; 0x34
    168e:	47a8      	blx	r5
    1690:	9a22      	ldr	r2, [sp, #136]	; 0x88
    1692:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    1694:	0006      	movs	r6, r0
    1696:	000f      	movs	r7, r1
    1698:	9804      	ldr	r0, [sp, #16]
    169a:	9905      	ldr	r1, [sp, #20]
    169c:	47a8      	blx	r5
    169e:	0002      	movs	r2, r0
    16a0:	000b      	movs	r3, r1
    16a2:	0030      	movs	r0, r6
    16a4:	0039      	movs	r1, r7
    16a6:	47a0      	blx	r4
    16a8:	9a24      	ldr	r2, [sp, #144]	; 0x90
    16aa:	9b25      	ldr	r3, [sp, #148]	; 0x94
    16ac:	0006      	movs	r6, r0
    16ae:	000f      	movs	r7, r1
    16b0:	9802      	ldr	r0, [sp, #8]
    16b2:	9903      	ldr	r1, [sp, #12]
    16b4:	47a8      	blx	r5
    16b6:	0002      	movs	r2, r0
    16b8:	000b      	movs	r3, r1
    16ba:	0030      	movs	r0, r6
    16bc:	0039      	movs	r1, r7
    16be:	47a0      	blx	r4
        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
    16c0:	4a1b      	ldr	r2, [pc, #108]	; (1730 <computeKalmanGains+0x37c>)
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];
    16c2:	9002      	str	r0, [sp, #8]
    16c4:	9103      	str	r1, [sp, #12]
        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
    16c6:	9812      	ldr	r0, [sp, #72]	; 0x48
    16c8:	9913      	ldr	r1, [sp, #76]	; 0x4c
    16ca:	4b1a      	ldr	r3, [pc, #104]	; (1734 <computeKalmanGains+0x380>)
    16cc:	47a8      	blx	r5
    16ce:	9a16      	ldr	r2, [sp, #88]	; 0x58
    16d0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    16d2:	47a0      	blx	r4
    16d4:	4a18      	ldr	r2, [pc, #96]	; (1738 <computeKalmanGains+0x384>)
    16d6:	0006      	movs	r6, r0
    16d8:	000f      	movs	r7, r1
    16da:	9814      	ldr	r0, [sp, #80]	; 0x50
    16dc:	9915      	ldr	r1, [sp, #84]	; 0x54
    16de:	4b17      	ldr	r3, [pc, #92]	; (173c <computeKalmanGains+0x388>)
    16e0:	47a8      	blx	r5
    16e2:	0002      	movs	r2, r0
    16e4:	000b      	movs	r3, r1
    16e6:	0030      	movs	r0, r6
    16e8:	0039      	movs	r1, r7
    16ea:	47a0      	blx	r4
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
    16ec:	2200      	movs	r2, #0
        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
    16ee:	9008      	str	r0, [sp, #32]
    16f0:	9109      	str	r1, [sp, #36]	; 0x24
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
    16f2:	9816      	ldr	r0, [sp, #88]	; 0x58
    16f4:	9917      	ldr	r1, [sp, #92]	; 0x5c
    16f6:	2300      	movs	r3, #0
    16f8:	47a8      	blx	r5
    16fa:	0006      	movs	r6, r0
    16fc:	000f      	movs	r7, r1
    16fe:	0002      	movs	r2, r0
    1700:	000b      	movs	r3, r1
    1702:	9812      	ldr	r0, [sp, #72]	; 0x48
    1704:	9913      	ldr	r1, [sp, #76]	; 0x4c
    1706:	47a0      	blx	r4
    1708:	4a09      	ldr	r2, [pc, #36]	; (1730 <computeKalmanGains+0x37c>)
    170a:	9000      	str	r0, [sp, #0]
    170c:	9101      	str	r1, [sp, #4]
    170e:	9814      	ldr	r0, [sp, #80]	; 0x50
    1710:	9915      	ldr	r1, [sp, #84]	; 0x54
    1712:	4b08      	ldr	r3, [pc, #32]	; (1734 <computeKalmanGains+0x380>)
    1714:	47a8      	blx	r5
    1716:	0002      	movs	r2, r0
    1718:	000b      	movs	r3, r1
    171a:	9800      	ldr	r0, [sp, #0]
    171c:	9901      	ldr	r1, [sp, #4]
    171e:	47a0      	blx	r4
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
    1720:	2200      	movs	r2, #0
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
    1722:	9030      	str	r0, [sp, #192]	; 0xc0
    1724:	9131      	str	r1, [sp, #196]	; 0xc4
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
    1726:	9812      	ldr	r0, [sp, #72]	; 0x48
    1728:	9913      	ldr	r1, [sp, #76]	; 0x4c
    172a:	e015      	b.n	1758 <computeKalmanGains+0x3a4>
    172c:	20000010 	.word	0x20000010
    1730:	d2f1a9fc 	.word	0xd2f1a9fc
    1734:	3f80624d 	.word	0x3f80624d
    1738:	a0b5ed8d 	.word	0xa0b5ed8d
    173c:	3f00c6f7 	.word	0x3f00c6f7
    1740:	3f50624d 	.word	0x3f50624d
    1744:	20000610 	.word	0x20000610
    1748:	3ff00000 	.word	0x3ff00000
    174c:	40220000 	.word	0x40220000
    1750:	000051f9 	.word	0x000051f9
    1754:	00004371 	.word	0x00004371
    1758:	2300      	movs	r3, #0
    175a:	47a8      	blx	r5
    175c:	0032      	movs	r2, r6
    175e:	003b      	movs	r3, r7
    1760:	47a0      	blx	r4
    1762:	9a14      	ldr	r2, [sp, #80]	; 0x50
    1764:	9b15      	ldr	r3, [sp, #84]	; 0x54
    1766:	47a0      	blx	r4
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
    1768:	4ad9      	ldr	r2, [pc, #868]	; (1ad0 <computeKalmanGains+0x71c>)
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
    176a:	9112      	str	r1, [sp, #72]	; 0x48
    176c:	9004      	str	r0, [sp, #16]
    176e:	9116      	str	r1, [sp, #88]	; 0x58
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
    1770:	4bd8      	ldr	r3, [pc, #864]	; (1ad4 <computeKalmanGains+0x720>)
    1772:	9826      	ldr	r0, [sp, #152]	; 0x98
    1774:	9927      	ldr	r1, [sp, #156]	; 0x9c
    1776:	47a8      	blx	r5
    1778:	9a18      	ldr	r2, [sp, #96]	; 0x60
    177a:	9b19      	ldr	r3, [sp, #100]	; 0x64
    177c:	47a0      	blx	r4
    177e:	4ad6      	ldr	r2, [pc, #856]	; (1ad8 <computeKalmanGains+0x724>)
    1780:	0006      	movs	r6, r0
    1782:	000f      	movs	r7, r1
    1784:	9828      	ldr	r0, [sp, #160]	; 0xa0
    1786:	9929      	ldr	r1, [sp, #164]	; 0xa4
    1788:	4bd4      	ldr	r3, [pc, #848]	; (1adc <computeKalmanGains+0x728>)
    178a:	47a8      	blx	r5
    178c:	0002      	movs	r2, r0
    178e:	000b      	movs	r3, r1
    1790:	0030      	movs	r0, r6
    1792:	0039      	movs	r1, r7
    1794:	47a0      	blx	r4
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
    1796:	2200      	movs	r2, #0
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
    1798:	902a      	str	r0, [sp, #168]	; 0xa8
    179a:	912b      	str	r1, [sp, #172]	; 0xac
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
    179c:	9818      	ldr	r0, [sp, #96]	; 0x60
    179e:	9919      	ldr	r1, [sp, #100]	; 0x64
    17a0:	2300      	movs	r3, #0
    17a2:	47a8      	blx	r5
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
    17a4:	2200      	movs	r2, #0
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
    17a6:	9032      	str	r0, [sp, #200]	; 0xc8
    17a8:	9133      	str	r1, [sp, #204]	; 0xcc
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
    17aa:	9826      	ldr	r0, [sp, #152]	; 0x98
    17ac:	9927      	ldr	r1, [sp, #156]	; 0x9c
    17ae:	2300      	movs	r3, #0
    17b0:	47a8      	blx	r5
    17b2:	9a32      	ldr	r2, [sp, #200]	; 0xc8
    17b4:	9b33      	ldr	r3, [sp, #204]	; 0xcc
    17b6:	47a0      	blx	r4
    17b8:	9a28      	ldr	r2, [sp, #160]	; 0xa0
    17ba:	9b29      	ldr	r3, [sp, #164]	; 0xa4
    17bc:	47a0      	blx	r4
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
    17be:	4ac4      	ldr	r2, [pc, #784]	; (1ad0 <computeKalmanGains+0x71c>)
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
    17c0:	902c      	str	r0, [sp, #176]	; 0xb0
    17c2:	912d      	str	r1, [sp, #180]	; 0xb4
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
    17c4:	9806      	ldr	r0, [sp, #24]
    17c6:	9907      	ldr	r1, [sp, #28]
    17c8:	4bc2      	ldr	r3, [pc, #776]	; (1ad4 <computeKalmanGains+0x720>)
    17ca:	47a8      	blx	r5
    17cc:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
    17ce:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
    17d0:	47a0      	blx	r4
    17d2:	4ac1      	ldr	r2, [pc, #772]	; (1ad8 <computeKalmanGains+0x724>)
    17d4:	0006      	movs	r6, r0
    17d6:	000f      	movs	r7, r1
    17d8:	9802      	ldr	r0, [sp, #8]
    17da:	9903      	ldr	r1, [sp, #12]
    17dc:	4bbf      	ldr	r3, [pc, #764]	; (1adc <computeKalmanGains+0x728>)
    17de:	47a8      	blx	r5
    17e0:	0002      	movs	r2, r0
    17e2:	000b      	movs	r3, r1
    17e4:	0030      	movs	r0, r6
    17e6:	0039      	movs	r1, r7
    17e8:	47a0      	blx	r4
        pestp[2][1] = term[2][0] * phit[0][1] + term[2][1] * phit[1][1] + term[2][2] * phit[2][1];
    17ea:	2200      	movs	r2, #0
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
    17ec:	9000      	str	r0, [sp, #0]
    17ee:	9101      	str	r1, [sp, #4]
        pestp[2][1] = term[2][0] * phit[0][1] + term[2][1] * phit[1][1] + term[2][2] * phit[2][1];
    17f0:	982e      	ldr	r0, [sp, #184]	; 0xb8
    17f2:	992f      	ldr	r1, [sp, #188]	; 0xbc
    17f4:	2300      	movs	r3, #0
    17f6:	47a8      	blx	r5
    17f8:	0006      	movs	r6, r0
    17fa:	000f      	movs	r7, r1
    17fc:	0002      	movs	r2, r0
    17fe:	000b      	movs	r3, r1
    1800:	9806      	ldr	r0, [sp, #24]
    1802:	9907      	ldr	r1, [sp, #28]
    1804:	47a0      	blx	r4
    1806:	4ab2      	ldr	r2, [pc, #712]	; (1ad0 <computeKalmanGains+0x71c>)
    1808:	900a      	str	r0, [sp, #40]	; 0x28
    180a:	910b      	str	r1, [sp, #44]	; 0x2c
    180c:	9802      	ldr	r0, [sp, #8]
    180e:	9903      	ldr	r1, [sp, #12]
    1810:	4bb0      	ldr	r3, [pc, #704]	; (1ad4 <computeKalmanGains+0x720>)
    1812:	47a8      	blx	r5
    1814:	0002      	movs	r2, r0
    1816:	000b      	movs	r3, r1
    1818:	980a      	ldr	r0, [sp, #40]	; 0x28
    181a:	990b      	ldr	r1, [sp, #44]	; 0x2c
    181c:	47a0      	blx	r4
        pestp[2][2] = term[2][0] * phit[0][2] + term[2][1] * phit[1][2] + term[2][2] * phit[2][2];
    181e:	2200      	movs	r2, #0
        pestp[2][1] = term[2][0] * phit[0][1] + term[2][1] * phit[1][1] + term[2][2] * phit[2][1];
    1820:	9010      	str	r0, [sp, #64]	; 0x40
    1822:	9111      	str	r1, [sp, #68]	; 0x44
        pestp[2][2] = term[2][0] * phit[0][2] + term[2][1] * phit[1][2] + term[2][2] * phit[2][2];
    1824:	9806      	ldr	r0, [sp, #24]
    1826:	9907      	ldr	r1, [sp, #28]
    1828:	2300      	movs	r3, #0
    182a:	47a8      	blx	r5
    182c:	0032      	movs	r2, r6
    182e:	003b      	movs	r3, r7
    1830:	47a0      	blx	r4
    1832:	9a02      	ldr	r2, [sp, #8]
    1834:	9b03      	ldr	r3, [sp, #12]
    1836:	47a0      	blx	r4
        pestp[2][2] = pestp[2][2] + model_variance;
    1838:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
    183a:	9b3b      	ldr	r3, [sp, #236]	; 0xec
    183c:	47a0      	blx	r4
        det = (pestp[0][0]+altitude_variance)*(pestp[2][2] + acceleration_variance) - pestp[2][0] * pestp[0][2];
    183e:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
    1840:	9b3d      	ldr	r3, [sp, #244]	; 0xf4
        pestp[2][2] = pestp[2][2] + model_variance;
    1842:	9002      	str	r0, [sp, #8]
    1844:	9103      	str	r1, [sp, #12]
        det = (pestp[0][0]+altitude_variance)*(pestp[2][2] + acceleration_variance) - pestp[2][0] * pestp[0][2];
    1846:	9808      	ldr	r0, [sp, #32]
    1848:	9909      	ldr	r1, [sp, #36]	; 0x24
    184a:	47a0      	blx	r4
    184c:	9a3e      	ldr	r2, [sp, #248]	; 0xf8
    184e:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
    1850:	900a      	str	r0, [sp, #40]	; 0x28
    1852:	910b      	str	r1, [sp, #44]	; 0x2c
    1854:	9802      	ldr	r0, [sp, #8]
    1856:	9903      	ldr	r1, [sp, #12]
    1858:	47a0      	blx	r4
    185a:	9a00      	ldr	r2, [sp, #0]
    185c:	9b01      	ldr	r3, [sp, #4]
    185e:	900c      	str	r0, [sp, #48]	; 0x30
    1860:	910d      	str	r1, [sp, #52]	; 0x34
    1862:	9804      	ldr	r0, [sp, #16]
    1864:	9916      	ldr	r1, [sp, #88]	; 0x58
    1866:	47a8      	blx	r5
    1868:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    186a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    186c:	900e      	str	r0, [sp, #56]	; 0x38
    186e:	910f      	str	r1, [sp, #60]	; 0x3c
    1870:	980a      	ldr	r0, [sp, #40]	; 0x28
    1872:	990b      	ldr	r1, [sp, #44]	; 0x2c
    1874:	47a8      	blx	r5
    1876:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    1878:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    187a:	4e99      	ldr	r6, [pc, #612]	; (1ae0 <computeKalmanGains+0x72c>)
    187c:	47b0      	blx	r6


        kgain[0][0] = (pestp[0][0] * (pestp[2][2] + acceleration_variance) - pestp[0][2] * pestp[2][0])/det;
    187e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1880:	9b0d      	ldr	r3, [sp, #52]	; 0x34
        det = (pestp[0][0]+altitude_variance)*(pestp[2][2] + acceleration_variance) - pestp[2][0] * pestp[0][2];
    1882:	9006      	str	r0, [sp, #24]
    1884:	9107      	str	r1, [sp, #28]
        kgain[0][0] = (pestp[0][0] * (pestp[2][2] + acceleration_variance) - pestp[0][2] * pestp[2][0])/det;
    1886:	9808      	ldr	r0, [sp, #32]
    1888:	9909      	ldr	r1, [sp, #36]	; 0x24
    188a:	47a8      	blx	r5
    188c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    188e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1890:	47b0      	blx	r6
    1892:	9a06      	ldr	r2, [sp, #24]
    1894:	9b07      	ldr	r3, [sp, #28]
    1896:	4e93      	ldr	r6, [pc, #588]	; (1ae4 <computeKalmanGains+0x730>)
    1898:	47b0      	blx	r6
    189a:	9034      	str	r0, [sp, #208]	; 0xd0
    189c:	9135      	str	r1, [sp, #212]	; 0xd4
    189e:	9a34      	ldr	r2, [sp, #208]	; 0xd0
    18a0:	9b35      	ldr	r3, [sp, #212]	; 0xd4
    18a2:	4991      	ldr	r1, [pc, #580]	; (1ae8 <computeKalmanGains+0x734>)
    18a4:	600a      	str	r2, [r1, #0]
    18a6:	604b      	str	r3, [r1, #4]

        kgain[0][1] = (pestp[0][0] * (-pestp[0][2]) + pestp[0][2] * (pestp[0][0] + altitude_variance))/det;
    18a8:	9808      	ldr	r0, [sp, #32]
    18aa:	9909      	ldr	r1, [sp, #36]	; 0x24
    18ac:	2280      	movs	r2, #128	; 0x80
    18ae:	0612      	lsls	r2, r2, #24
    18b0:	4694      	mov	ip, r2
    18b2:	9b12      	ldr	r3, [sp, #72]	; 0x48
    18b4:	9a04      	ldr	r2, [sp, #16]
    18b6:	4463      	add	r3, ip
    18b8:	932e      	str	r3, [sp, #184]	; 0xb8
    18ba:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    18bc:	47a8      	blx	r5
    18be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    18c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    18c2:	0006      	movs	r6, r0
    18c4:	000f      	movs	r7, r1
    18c6:	9804      	ldr	r0, [sp, #16]
    18c8:	9916      	ldr	r1, [sp, #88]	; 0x58
    18ca:	47a8      	blx	r5
    18cc:	0002      	movs	r2, r0
    18ce:	000b      	movs	r3, r1
    18d0:	0030      	movs	r0, r6
    18d2:	0039      	movs	r1, r7
    18d4:	47a0      	blx	r4
    18d6:	9a06      	ldr	r2, [sp, #24]
    18d8:	9b07      	ldr	r3, [sp, #28]
    18da:	4e82      	ldr	r6, [pc, #520]	; (1ae4 <computeKalmanGains+0x730>)
    18dc:	47b0      	blx	r6
    18de:	900e      	str	r0, [sp, #56]	; 0x38
    18e0:	910f      	str	r1, [sp, #60]	; 0x3c
    18e2:	4981      	ldr	r1, [pc, #516]	; (1ae8 <computeKalmanGains+0x734>)
    18e4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    18e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    18e8:	608a      	str	r2, [r1, #8]
    18ea:	60cb      	str	r3, [r1, #12]

        kgain[1][0] = (pestp[1][0] * (pestp[2][2] + acceleration_variance) - pestp[1][2] * pestp[2][0])/det;
    18ec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    18ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    18f0:	982a      	ldr	r0, [sp, #168]	; 0xa8
    18f2:	992b      	ldr	r1, [sp, #172]	; 0xac
    18f4:	47a8      	blx	r5
    18f6:	9a00      	ldr	r2, [sp, #0]
    18f8:	9b01      	ldr	r3, [sp, #4]
    18fa:	0006      	movs	r6, r0
    18fc:	000f      	movs	r7, r1
    18fe:	982c      	ldr	r0, [sp, #176]	; 0xb0
    1900:	992d      	ldr	r1, [sp, #180]	; 0xb4
    1902:	47a8      	blx	r5
    1904:	0002      	movs	r2, r0
    1906:	000b      	movs	r3, r1
    1908:	0030      	movs	r0, r6
    190a:	0039      	movs	r1, r7
    190c:	4e74      	ldr	r6, [pc, #464]	; (1ae0 <computeKalmanGains+0x72c>)
    190e:	47b0      	blx	r6
    1910:	9a06      	ldr	r2, [sp, #24]
    1912:	9b07      	ldr	r3, [sp, #28]
    1914:	4e73      	ldr	r6, [pc, #460]	; (1ae4 <computeKalmanGains+0x730>)
    1916:	47b0      	blx	r6
    1918:	0002      	movs	r2, r0
    191a:	000b      	movs	r3, r1
    191c:	9139      	str	r1, [sp, #228]	; 0xe4
    191e:	4972      	ldr	r1, [pc, #456]	; (1ae8 <computeKalmanGains+0x734>)
    1920:	9018      	str	r0, [sp, #96]	; 0x60
    1922:	610a      	str	r2, [r1, #16]
    1924:	614b      	str	r3, [r1, #20]

        kgain[1][1] = (pestp[1][0] * (-pestp[0][2]) + pestp[1][2] * (pestp[0][0] + altitude_variance))/det;
    1926:	982a      	ldr	r0, [sp, #168]	; 0xa8
    1928:	992b      	ldr	r1, [sp, #172]	; 0xac
    192a:	9a04      	ldr	r2, [sp, #16]
    192c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    192e:	47a8      	blx	r5
    1930:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    1932:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1934:	0006      	movs	r6, r0
    1936:	000f      	movs	r7, r1
    1938:	982c      	ldr	r0, [sp, #176]	; 0xb0
    193a:	992d      	ldr	r1, [sp, #180]	; 0xb4
    193c:	47a8      	blx	r5
    193e:	0002      	movs	r2, r0
    1940:	000b      	movs	r3, r1
    1942:	0030      	movs	r0, r6
    1944:	0039      	movs	r1, r7
    1946:	47a0      	blx	r4
    1948:	9a06      	ldr	r2, [sp, #24]
    194a:	9b07      	ldr	r3, [sp, #28]
    194c:	4e65      	ldr	r6, [pc, #404]	; (1ae4 <computeKalmanGains+0x730>)
    194e:	47b0      	blx	r6
    1950:	9012      	str	r0, [sp, #72]	; 0x48
    1952:	9113      	str	r1, [sp, #76]	; 0x4c
    1954:	9a12      	ldr	r2, [sp, #72]	; 0x48
    1956:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    1958:	4963      	ldr	r1, [pc, #396]	; (1ae8 <computeKalmanGains+0x734>)
    195a:	618a      	str	r2, [r1, #24]
    195c:	61cb      	str	r3, [r1, #28]

        kgain[2][0] = (pestp[2][0] * (pestp[2][2] + acceleration_variance) - pestp[2][2] * pestp[2][0])/det;
    195e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1960:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1962:	9800      	ldr	r0, [sp, #0]
    1964:	9901      	ldr	r1, [sp, #4]
    1966:	47a8      	blx	r5
    1968:	9a02      	ldr	r2, [sp, #8]
    196a:	9b03      	ldr	r3, [sp, #12]
    196c:	0006      	movs	r6, r0
    196e:	000f      	movs	r7, r1
    1970:	9800      	ldr	r0, [sp, #0]
    1972:	9901      	ldr	r1, [sp, #4]
    1974:	47a8      	blx	r5
    1976:	0002      	movs	r2, r0
    1978:	000b      	movs	r3, r1
    197a:	0030      	movs	r0, r6
    197c:	0039      	movs	r1, r7
    197e:	4e58      	ldr	r6, [pc, #352]	; (1ae0 <computeKalmanGains+0x72c>)
    1980:	47b0      	blx	r6
    1982:	9a06      	ldr	r2, [sp, #24]
    1984:	9b07      	ldr	r3, [sp, #28]
    1986:	4e57      	ldr	r6, [pc, #348]	; (1ae4 <computeKalmanGains+0x730>)
    1988:	47b0      	blx	r6
    198a:	9014      	str	r0, [sp, #80]	; 0x50
    198c:	9115      	str	r1, [sp, #84]	; 0x54
    198e:	9a14      	ldr	r2, [sp, #80]	; 0x50
    1990:	9b15      	ldr	r3, [sp, #84]	; 0x54
    1992:	4955      	ldr	r1, [pc, #340]	; (1ae8 <computeKalmanGains+0x734>)
    1994:	620a      	str	r2, [r1, #32]
    1996:	624b      	str	r3, [r1, #36]	; 0x24

        kgain[2][1] = (pestp[2][0] * (-pestp[0][2]) + pestp[2][2] * (pestp[0][0] + altitude_variance))/det;
    1998:	9800      	ldr	r0, [sp, #0]
    199a:	9901      	ldr	r1, [sp, #4]
    199c:	9a04      	ldr	r2, [sp, #16]
    199e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    19a0:	47a8      	blx	r5
    19a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    19a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    19a6:	0006      	movs	r6, r0
    19a8:	000f      	movs	r7, r1
    19aa:	9802      	ldr	r0, [sp, #8]
    19ac:	9903      	ldr	r1, [sp, #12]
    19ae:	47a8      	blx	r5
    19b0:	0002      	movs	r2, r0
    19b2:	000b      	movs	r3, r1
    19b4:	0030      	movs	r0, r6
    19b6:	0039      	movs	r1, r7
    19b8:	47a0      	blx	r4
    19ba:	9a06      	ldr	r2, [sp, #24]
    19bc:	9b07      	ldr	r3, [sp, #28]
    19be:	4e49      	ldr	r6, [pc, #292]	; (1ae4 <computeKalmanGains+0x730>)
    19c0:	47b0      	blx	r6
    19c2:	9036      	str	r0, [sp, #216]	; 0xd8
    19c4:	9137      	str	r1, [sp, #220]	; 0xdc
    19c6:	9a36      	ldr	r2, [sp, #216]	; 0xd8
    19c8:	9b37      	ldr	r3, [sp, #220]	; 0xdc
    19ca:	4947      	ldr	r1, [pc, #284]	; (1ae8 <computeKalmanGains+0x734>)

        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
    19cc:	4e44      	ldr	r6, [pc, #272]	; (1ae0 <computeKalmanGains+0x72c>)
        kgain[2][1] = (pestp[2][0] * (-pestp[0][2]) + pestp[2][2] * (pestp[0][0] + altitude_variance))/det;
    19ce:	628a      	str	r2, [r1, #40]	; 0x28
    19d0:	62cb      	str	r3, [r1, #44]	; 0x2c
        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
    19d2:	9a34      	ldr	r2, [sp, #208]	; 0xd0
    19d4:	9b35      	ldr	r3, [sp, #212]	; 0xd4
    19d6:	2000      	movs	r0, #0
    19d8:	4944      	ldr	r1, [pc, #272]	; (1aec <computeKalmanGains+0x738>)
    19da:	47b0      	blx	r6
    19dc:	0002      	movs	r2, r0
    19de:	000b      	movs	r3, r1
    19e0:	900c      	str	r0, [sp, #48]	; 0x30
    19e2:	910d      	str	r1, [sp, #52]	; 0x34
    19e4:	9808      	ldr	r0, [sp, #32]
    19e6:	9909      	ldr	r1, [sp, #36]	; 0x24
    19e8:	47a8      	blx	r5
    19ea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    19ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    19ee:	0006      	movs	r6, r0
    19f0:	000f      	movs	r7, r1
    19f2:	9800      	ldr	r0, [sp, #0]
    19f4:	9901      	ldr	r1, [sp, #4]
    19f6:	47a8      	blx	r5
    19f8:	0002      	movs	r2, r0
    19fa:	000b      	movs	r3, r1
    19fc:	0030      	movs	r0, r6
    19fe:	0039      	movs	r1, r7
    1a00:	4e37      	ldr	r6, [pc, #220]	; (1ae0 <computeKalmanGains+0x72c>)
    1a02:	47b0      	blx	r6
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
    1a04:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1a06:	9b0d      	ldr	r3, [sp, #52]	; 0x34
        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
    1a08:	9006      	str	r0, [sp, #24]
    1a0a:	9107      	str	r1, [sp, #28]
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
    1a0c:	9830      	ldr	r0, [sp, #192]	; 0xc0
    1a0e:	9931      	ldr	r1, [sp, #196]	; 0xc4
    1a10:	47a8      	blx	r5
    1a12:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    1a14:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1a16:	0006      	movs	r6, r0
    1a18:	000f      	movs	r7, r1
    1a1a:	9810      	ldr	r0, [sp, #64]	; 0x40
    1a1c:	9911      	ldr	r1, [sp, #68]	; 0x44
    1a1e:	47a8      	blx	r5
    1a20:	0002      	movs	r2, r0
    1a22:	000b      	movs	r3, r1
    1a24:	0030      	movs	r0, r6
    1a26:	0039      	movs	r1, r7
    1a28:	4e2d      	ldr	r6, [pc, #180]	; (1ae0 <computeKalmanGains+0x72c>)
    1a2a:	47b0      	blx	r6
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
    1a2c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1a2e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
    1a30:	900a      	str	r0, [sp, #40]	; 0x28
    1a32:	910b      	str	r1, [sp, #44]	; 0x2c
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
    1a34:	9804      	ldr	r0, [sp, #16]
    1a36:	9916      	ldr	r1, [sp, #88]	; 0x58
    1a38:	47a8      	blx	r5
    1a3a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    1a3c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1a3e:	0006      	movs	r6, r0
    1a40:	000f      	movs	r7, r1
    1a42:	9802      	ldr	r0, [sp, #8]
    1a44:	9903      	ldr	r1, [sp, #12]
    1a46:	47a8      	blx	r5
    1a48:	0002      	movs	r2, r0
    1a4a:	000b      	movs	r3, r1
    1a4c:	0030      	movs	r0, r6
    1a4e:	0039      	movs	r1, r7
    1a50:	4e23      	ldr	r6, [pc, #140]	; (1ae0 <computeKalmanGains+0x72c>)
    1a52:	47b0      	blx	r6
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
    1a54:	2280      	movs	r2, #128	; 0x80
    1a56:	0612      	lsls	r2, r2, #24
    1a58:	4694      	mov	ip, r2
    1a5a:	9b39      	ldr	r3, [sp, #228]	; 0xe4
    1a5c:	9a18      	ldr	r2, [sp, #96]	; 0x60
    1a5e:	4463      	add	r3, ip
    1a60:	932e      	str	r3, [sp, #184]	; 0xb8
    1a62:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
    1a64:	900c      	str	r0, [sp, #48]	; 0x30
    1a66:	910d      	str	r1, [sp, #52]	; 0x34
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
    1a68:	9808      	ldr	r0, [sp, #32]
    1a6a:	9909      	ldr	r1, [sp, #36]	; 0x24
    1a6c:	47a8      	blx	r5
    1a6e:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
    1a70:	9b2b      	ldr	r3, [sp, #172]	; 0xac
    1a72:	47a0      	blx	r4
    1a74:	9a12      	ldr	r2, [sp, #72]	; 0x48
    1a76:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    1a78:	0006      	movs	r6, r0
    1a7a:	000f      	movs	r7, r1
    1a7c:	9800      	ldr	r0, [sp, #0]
    1a7e:	9901      	ldr	r1, [sp, #4]
    1a80:	47a8      	blx	r5
    1a82:	0002      	movs	r2, r0
    1a84:	000b      	movs	r3, r1
    1a86:	0030      	movs	r0, r6
    1a88:	0039      	movs	r1, r7
    1a8a:	4e15      	ldr	r6, [pc, #84]	; (1ae0 <computeKalmanGains+0x72c>)
    1a8c:	47b0      	blx	r6
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
    1a8e:	9a32      	ldr	r2, [sp, #200]	; 0xc8
    1a90:	9b33      	ldr	r3, [sp, #204]	; 0xcc
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
    1a92:	9008      	str	r0, [sp, #32]
    1a94:	9109      	str	r1, [sp, #36]	; 0x24
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
    1a96:	9826      	ldr	r0, [sp, #152]	; 0x98
    1a98:	9927      	ldr	r1, [sp, #156]	; 0x9c
    1a9a:	47a0      	blx	r4
    1a9c:	4a0c      	ldr	r2, [pc, #48]	; (1ad0 <computeKalmanGains+0x71c>)
    1a9e:	0006      	movs	r6, r0
    1aa0:	000f      	movs	r7, r1
    1aa2:	9828      	ldr	r0, [sp, #160]	; 0xa0
    1aa4:	9929      	ldr	r1, [sp, #164]	; 0xa4
    1aa6:	4b0b      	ldr	r3, [pc, #44]	; (1ad4 <computeKalmanGains+0x720>)
    1aa8:	47a8      	blx	r5
    1aaa:	0002      	movs	r2, r0
    1aac:	000b      	movs	r3, r1
    1aae:	0030      	movs	r0, r6
    1ab0:	0039      	movs	r1, r7
    1ab2:	47a0      	blx	r4
        pest[1][1] = pestp[0][1] * (-kgain[1][0]) + pestp[1][1] - kgain[1][1]*pestp[2][1];
    1ab4:	9a18      	ldr	r2, [sp, #96]	; 0x60
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
    1ab6:	0006      	movs	r6, r0
    1ab8:	000f      	movs	r7, r1
        pest[1][1] = pestp[0][1] * (-kgain[1][0]) + pestp[1][1] - kgain[1][1]*pestp[2][1];
    1aba:	9830      	ldr	r0, [sp, #192]	; 0xc0
    1abc:	9931      	ldr	r1, [sp, #196]	; 0xc4
    1abe:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    1ac0:	47a8      	blx	r5
    1ac2:	0002      	movs	r2, r0
    1ac4:	000b      	movs	r3, r1
    1ac6:	0030      	movs	r0, r6
    1ac8:	0039      	movs	r1, r7
    1aca:	47a0      	blx	r4
    1acc:	e010      	b.n	1af0 <computeKalmanGains+0x73c>
    1ace:	46c0      	nop			; (mov r8, r8)
    1ad0:	d2f1a9fc 	.word	0xd2f1a9fc
    1ad4:	3f80624d 	.word	0x3f80624d
    1ad8:	a0b5ed8d 	.word	0xa0b5ed8d
    1adc:	3f00c6f7 	.word	0x3f00c6f7
    1ae0:	000056f9 	.word	0x000056f9
    1ae4:	00004991 	.word	0x00004991
    1ae8:	20000610 	.word	0x20000610
    1aec:	3ff00000 	.word	0x3ff00000
    1af0:	9a12      	ldr	r2, [sp, #72]	; 0x48
    1af2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    1af4:	0006      	movs	r6, r0
    1af6:	000f      	movs	r7, r1
    1af8:	9810      	ldr	r0, [sp, #64]	; 0x40
    1afa:	9911      	ldr	r1, [sp, #68]	; 0x44
    1afc:	47a8      	blx	r5
    1afe:	0002      	movs	r2, r0
    1b00:	000b      	movs	r3, r1
    1b02:	0030      	movs	r0, r6
    1b04:	0039      	movs	r1, r7
    1b06:	4e4c      	ldr	r6, [pc, #304]	; (1c38 <computeKalmanGains+0x884>)
    1b08:	47b0      	blx	r6
        pest[1][2] = pestp[0][2] * (-kgain[1][0]) + pestp[1][2] - kgain[1][1]*pestp[2][2];
    1b0a:	9a18      	ldr	r2, [sp, #96]	; 0x60
        pest[1][1] = pestp[0][1] * (-kgain[1][0]) + pestp[1][1] - kgain[1][1]*pestp[2][1];
    1b0c:	900e      	str	r0, [sp, #56]	; 0x38
    1b0e:	910f      	str	r1, [sp, #60]	; 0x3c
        pest[1][2] = pestp[0][2] * (-kgain[1][0]) + pestp[1][2] - kgain[1][1]*pestp[2][2];
    1b10:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    1b12:	9804      	ldr	r0, [sp, #16]
    1b14:	9916      	ldr	r1, [sp, #88]	; 0x58
    1b16:	47a8      	blx	r5
    1b18:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
    1b1a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    1b1c:	47a0      	blx	r4
    1b1e:	9a12      	ldr	r2, [sp, #72]	; 0x48
    1b20:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    1b22:	0006      	movs	r6, r0
    1b24:	000f      	movs	r7, r1
    1b26:	9802      	ldr	r0, [sp, #8]
    1b28:	9903      	ldr	r1, [sp, #12]
    1b2a:	47a8      	blx	r5
    1b2c:	4c42      	ldr	r4, [pc, #264]	; (1c38 <computeKalmanGains+0x884>)
    1b2e:	0002      	movs	r2, r0
    1b30:	000b      	movs	r3, r1
    1b32:	0030      	movs	r0, r6
    1b34:	0039      	movs	r1, r7
    1b36:	47a0      	blx	r4
        pest[2][0] = (1.0 - kgain[2][1]) * pestp[2][0] - kgain[2][0] * pestp[2][0];
    1b38:	9a36      	ldr	r2, [sp, #216]	; 0xd8
    1b3a:	9b37      	ldr	r3, [sp, #220]	; 0xdc
        pest[1][2] = pestp[0][2] * (-kgain[1][0]) + pestp[1][2] - kgain[1][1]*pestp[2][2];
    1b3c:	9004      	str	r0, [sp, #16]
    1b3e:	9105      	str	r1, [sp, #20]
        pest[2][0] = (1.0 - kgain[2][1]) * pestp[2][0] - kgain[2][0] * pestp[2][0];
    1b40:	2000      	movs	r0, #0
    1b42:	493e      	ldr	r1, [pc, #248]	; (1c3c <computeKalmanGains+0x888>)
    1b44:	47a0      	blx	r4
    1b46:	0002      	movs	r2, r0
    1b48:	000b      	movs	r3, r1
    1b4a:	9012      	str	r0, [sp, #72]	; 0x48
    1b4c:	9113      	str	r1, [sp, #76]	; 0x4c
    1b4e:	9800      	ldr	r0, [sp, #0]
    1b50:	9901      	ldr	r1, [sp, #4]
    1b52:	47a8      	blx	r5
    1b54:	9a14      	ldr	r2, [sp, #80]	; 0x50
    1b56:	9b15      	ldr	r3, [sp, #84]	; 0x54
    1b58:	0006      	movs	r6, r0
    1b5a:	000f      	movs	r7, r1
    1b5c:	9800      	ldr	r0, [sp, #0]
    1b5e:	9901      	ldr	r1, [sp, #4]
    1b60:	47a8      	blx	r5
    1b62:	0002      	movs	r2, r0
    1b64:	000b      	movs	r3, r1
    1b66:	0030      	movs	r0, r6
    1b68:	0039      	movs	r1, r7
    1b6a:	47a0      	blx	r4
    1b6c:	9000      	str	r0, [sp, #0]
    1b6e:	9101      	str	r1, [sp, #4]
        pest[2][1] = (1.0 - kgain[2][1]) * pestp[2][1] - kgain[2][0] * pestp[2][1];
    1b70:	9a12      	ldr	r2, [sp, #72]	; 0x48
    1b72:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    1b74:	9810      	ldr	r0, [sp, #64]	; 0x40
    1b76:	9911      	ldr	r1, [sp, #68]	; 0x44
    1b78:	47a8      	blx	r5
    1b7a:	9a14      	ldr	r2, [sp, #80]	; 0x50
    1b7c:	9b15      	ldr	r3, [sp, #84]	; 0x54
    1b7e:	0006      	movs	r6, r0
    1b80:	000f      	movs	r7, r1
    1b82:	9810      	ldr	r0, [sp, #64]	; 0x40
    1b84:	9911      	ldr	r1, [sp, #68]	; 0x44
    1b86:	47a8      	blx	r5
    1b88:	0002      	movs	r2, r0
    1b8a:	000b      	movs	r3, r1
    1b8c:	0030      	movs	r0, r6
    1b8e:	0039      	movs	r1, r7
    1b90:	47a0      	blx	r4
        pest[2][2] = (1.0 - kgain[2][1]) * pestp[2][2] - kgain[2][0] * pestp[2][2];
    1b92:	9a12      	ldr	r2, [sp, #72]	; 0x48
    1b94:	9b13      	ldr	r3, [sp, #76]	; 0x4c
        pest[2][1] = (1.0 - kgain[2][1]) * pestp[2][1] - kgain[2][0] * pestp[2][1];
    1b96:	9010      	str	r0, [sp, #64]	; 0x40
    1b98:	9111      	str	r1, [sp, #68]	; 0x44
        pest[2][2] = (1.0 - kgain[2][1]) * pestp[2][2] - kgain[2][0] * pestp[2][2];
    1b9a:	9802      	ldr	r0, [sp, #8]
    1b9c:	9903      	ldr	r1, [sp, #12]
    1b9e:	47a8      	blx	r5
    1ba0:	9a14      	ldr	r2, [sp, #80]	; 0x50
    1ba2:	9b15      	ldr	r3, [sp, #84]	; 0x54
    1ba4:	000f      	movs	r7, r1
    1ba6:	0006      	movs	r6, r0
    1ba8:	9802      	ldr	r0, [sp, #8]
    1baa:	9903      	ldr	r1, [sp, #12]
    1bac:	47a8      	blx	r5
    1bae:	000b      	movs	r3, r1
    1bb0:	0002      	movs	r2, r0
    1bb2:	0039      	movs	r1, r7
    1bb4:	0030      	movs	r0, r6
    1bb6:	47a0      	blx	r4
         * time through the mill. Because I have noticed very early convergance
         * in a few cases (< 20 iterations) I am delaying this for at least
         * 100 iterations.
         */
        notdone = 0;
        k++;
    1bb8:	9b38      	ldr	r3, [sp, #224]	; 0xe0
    1bba:	2510      	movs	r5, #16
    1bbc:	3301      	adds	r3, #1
    1bbe:	9338      	str	r3, [sp, #224]	; 0xe0
        notdone = 0;
    1bc0:	2300      	movs	r3, #0
        pest[2][2] = (1.0 - kgain[2][1]) * pestp[2][2] - kgain[2][0] * pestp[2][2];
    1bc2:	9002      	str	r0, [sp, #8]
    1bc4:	9103      	str	r1, [sp, #12]
        notdone = 0;
    1bc6:	001f      	movs	r7, r3
        for( i = 0; i <= 2; i++)
            for( j = 0; j <= 1; j++) {
                if( (kgain[i][j] - lastkgain[i][j])/lastkgain[i][j] > 0.00001)
    1bc8:	4b1d      	ldr	r3, [pc, #116]	; (1c40 <computeKalmanGains+0x88c>)
    1bca:	9426      	str	r4, [sp, #152]	; 0x98
    1bcc:	9318      	str	r3, [sp, #96]	; 0x60
    1bce:	002c      	movs	r4, r5
    1bd0:	3c10      	subs	r4, #16
    1bd2:	9b18      	ldr	r3, [sp, #96]	; 0x60
    1bd4:	9e26      	ldr	r6, [sp, #152]	; 0x98
    1bd6:	18e3      	adds	r3, r4, r3
    1bd8:	681a      	ldr	r2, [r3, #0]
    1bda:	685b      	ldr	r3, [r3, #4]
    1bdc:	9212      	str	r2, [sp, #72]	; 0x48
    1bde:	9313      	str	r3, [sp, #76]	; 0x4c
    1be0:	9812      	ldr	r0, [sp, #72]	; 0x48
    1be2:	9913      	ldr	r1, [sp, #76]	; 0x4c
    1be4:	aa40      	add	r2, sp, #256	; 0x100
    1be6:	18a3      	adds	r3, r4, r2
    1be8:	9316      	str	r3, [sp, #88]	; 0x58
    1bea:	681a      	ldr	r2, [r3, #0]
    1bec:	685b      	ldr	r3, [r3, #4]
    1bee:	9214      	str	r2, [sp, #80]	; 0x50
    1bf0:	9315      	str	r3, [sp, #84]	; 0x54
    1bf2:	47b0      	blx	r6
    1bf4:	9a14      	ldr	r2, [sp, #80]	; 0x50
    1bf6:	9b15      	ldr	r3, [sp, #84]	; 0x54
    1bf8:	4e12      	ldr	r6, [pc, #72]	; (1c44 <computeKalmanGains+0x890>)
    1bfa:	47b0      	blx	r6
    1bfc:	4b12      	ldr	r3, [pc, #72]	; (1c48 <computeKalmanGains+0x894>)
    1bfe:	4a13      	ldr	r2, [pc, #76]	; (1c4c <computeKalmanGains+0x898>)
    1c00:	4e13      	ldr	r6, [pc, #76]	; (1c50 <computeKalmanGains+0x89c>)
    1c02:	47b0      	blx	r6
                    notdone++;
    1c04:	1e43      	subs	r3, r0, #1
    1c06:	4198      	sbcs	r0, r3
                lastkgain[i][j] = kgain[i][j];
    1c08:	9916      	ldr	r1, [sp, #88]	; 0x58
                    notdone++;
    1c0a:	183b      	adds	r3, r7, r0
    1c0c:	3408      	adds	r4, #8
    1c0e:	001f      	movs	r7, r3
                lastkgain[i][j] = kgain[i][j];
    1c10:	9a12      	ldr	r2, [sp, #72]	; 0x48
    1c12:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    1c14:	600a      	str	r2, [r1, #0]
    1c16:	604b      	str	r3, [r1, #4]
            for( j = 0; j <= 1; j++) {
    1c18:	42a5      	cmp	r5, r4
    1c1a:	d1da      	bne.n	1bd2 <computeKalmanGains+0x81e>
    1c1c:	3510      	adds	r5, #16
        for( i = 0; i <= 2; i++)
    1c1e:	2d40      	cmp	r5, #64	; 0x40
    1c20:	d1d5      	bne.n	1bce <computeKalmanGains+0x81a>
            }
        if( notdone || k < 100)
    1c22:	2f00      	cmp	r7, #0
    1c24:	d001      	beq.n	1c2a <computeKalmanGains+0x876>
    1c26:	f7ff fc34 	bl	1492 <computeKalmanGains+0xde>
    1c2a:	9b38      	ldr	r3, [sp, #224]	; 0xe0
    1c2c:	2b63      	cmp	r3, #99	; 0x63
    1c2e:	dc01      	bgt.n	1c34 <computeKalmanGains+0x880>
    1c30:	f7ff fc2f 	bl	1492 <computeKalmanGains+0xde>
            continue;
        else
            break;
    }
}
    1c34:	b04d      	add	sp, #308	; 0x134
    1c36:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1c38:	000056f9 	.word	0x000056f9
    1c3c:	3ff00000 	.word	0x3ff00000
    1c40:	20000610 	.word	0x20000610
    1c44:	00004991 	.word	0x00004991
    1c48:	3ee4f8b5 	.word	0x3ee4f8b5
    1c4c:	88e368f1 	.word	0x88e368f1
    1c50:	00003a6d 	.word	0x00003a6d

00001c54 <computeKalmanStates>:

void computeKalmanStates() {
    1c54:	b5f0      	push	{r4, r5, r6, r7, lr}

    double alt_inovation, accel_inovation;


    double acceleration = (sample.accelZ - offsets.gravityOffset) * 32.17417;
    1c56:	4d7e      	ldr	r5, [pc, #504]	; (1e50 <computeKalmanStates+0x1fc>)
void computeKalmanStates() {
    1c58:	b08f      	sub	sp, #60	; 0x3c
    double acceleration = (sample.accelZ - offsets.gravityOffset) * 32.17417;
    1c5a:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    1c5c:	4b7d      	ldr	r3, [pc, #500]	; (1e54 <computeKalmanStates+0x200>)
    1c5e:	4798      	blx	r3
    1c60:	4b7d      	ldr	r3, [pc, #500]	; (1e58 <computeKalmanStates+0x204>)
    1c62:	4c7e      	ldr	r4, [pc, #504]	; (1e5c <computeKalmanStates+0x208>)
    1c64:	689a      	ldr	r2, [r3, #8]
    1c66:	68db      	ldr	r3, [r3, #12]
    1c68:	47a0      	blx	r4
    1c6a:	4a7d      	ldr	r2, [pc, #500]	; (1e60 <computeKalmanStates+0x20c>)
    1c6c:	4b7d      	ldr	r3, [pc, #500]	; (1e64 <computeKalmanStates+0x210>)
    1c6e:	4e7e      	ldr	r6, [pc, #504]	; (1e68 <computeKalmanStates+0x214>)
    1c70:	47b0      	blx	r6
    double pressure = sample.altitudefeet;
    1c72:	6c2e      	ldr	r6, [r5, #64]	; 0x40
    1c74:	6c6f      	ldr	r7, [r5, #68]	; 0x44
    double acceleration = (sample.accelZ - offsets.gravityOffset) * 32.17417;
    1c76:	9000      	str	r0, [sp, #0]
    1c78:	9101      	str	r1, [sp, #4]

    if (altitude == 0) {
    1c7a:	497c      	ldr	r1, [pc, #496]	; (1e6c <computeKalmanStates+0x218>)
    1c7c:	2200      	movs	r2, #0
    1c7e:	6808      	ldr	r0, [r1, #0]
    1c80:	6849      	ldr	r1, [r1, #4]
    1c82:	2300      	movs	r3, #0
    1c84:	4d7a      	ldr	r5, [pc, #488]	; (1e70 <computeKalmanStates+0x21c>)
    1c86:	47a8      	blx	r5
    1c88:	2800      	cmp	r0, #0
    1c8a:	d002      	beq.n	1c92 <computeKalmanStates+0x3e>
        altitude = pressure;
    1c8c:	4b77      	ldr	r3, [pc, #476]	; (1e6c <computeKalmanStates+0x218>)
    1c8e:	601e      	str	r6, [r3, #0]
    1c90:	605f      	str	r7, [r3, #4]
    }

    /* Compute the innovations */
    alt_inovation = pressure - estp[0];
    1c92:	4b78      	ldr	r3, [pc, #480]	; (1e74 <computeKalmanStates+0x220>)
    1c94:	0030      	movs	r0, r6
    1c96:	681a      	ldr	r2, [r3, #0]
    1c98:	685b      	ldr	r3, [r3, #4]
    1c9a:	0039      	movs	r1, r7
    1c9c:	47a0      	blx	r4
    accel_inovation = acceleration - estp[2];
    1c9e:	4b75      	ldr	r3, [pc, #468]	; (1e74 <computeKalmanStates+0x220>)
    alt_inovation = pressure - estp[0];
    1ca0:	9006      	str	r0, [sp, #24]
    1ca2:	9107      	str	r1, [sp, #28]
    accel_inovation = acceleration - estp[2];
    1ca4:	691a      	ldr	r2, [r3, #16]
    1ca6:	695b      	ldr	r3, [r3, #20]
    1ca8:	9800      	ldr	r0, [sp, #0]
    1caa:	9901      	ldr	r1, [sp, #4]
    1cac:	47a0      	blx	r4


    /* Propagate state */
    estp[0] = phi[0][0] * altitude + phi[0][1] *velocity + phi[0][2] * accel;
    1cae:	4b6f      	ldr	r3, [pc, #444]	; (1e6c <computeKalmanStates+0x218>)
    1cb0:	4d6d      	ldr	r5, [pc, #436]	; (1e68 <computeKalmanStates+0x214>)
    1cb2:	685c      	ldr	r4, [r3, #4]
    1cb4:	681b      	ldr	r3, [r3, #0]
    1cb6:	9300      	str	r3, [sp, #0]
    1cb8:	9401      	str	r4, [sp, #4]
    1cba:	4b6f      	ldr	r3, [pc, #444]	; (1e78 <computeKalmanStates+0x224>)
    accel_inovation = acceleration - estp[2];
    1cbc:	9008      	str	r0, [sp, #32]
    1cbe:	9109      	str	r1, [sp, #36]	; 0x24
    estp[0] = phi[0][0] * altitude + phi[0][1] *velocity + phi[0][2] * accel;
    1cc0:	685c      	ldr	r4, [r3, #4]
    1cc2:	681b      	ldr	r3, [r3, #0]
    1cc4:	9800      	ldr	r0, [sp, #0]
    1cc6:	9901      	ldr	r1, [sp, #4]
    1cc8:	9302      	str	r3, [sp, #8]
    1cca:	9403      	str	r4, [sp, #12]
    1ccc:	4b6b      	ldr	r3, [pc, #428]	; (1e7c <computeKalmanStates+0x228>)
    1cce:	685c      	ldr	r4, [r3, #4]
    1cd0:	681b      	ldr	r3, [r3, #0]
    1cd2:	9304      	str	r3, [sp, #16]
    1cd4:	9405      	str	r4, [sp, #20]
    1cd6:	4c6a      	ldr	r4, [pc, #424]	; (1e80 <computeKalmanStates+0x22c>)
    1cd8:	6822      	ldr	r2, [r4, #0]
    1cda:	6863      	ldr	r3, [r4, #4]
    1cdc:	47a8      	blx	r5
    1cde:	68a2      	ldr	r2, [r4, #8]
    1ce0:	68e3      	ldr	r3, [r4, #12]
    1ce2:	0006      	movs	r6, r0
    1ce4:	000f      	movs	r7, r1
    1ce6:	9802      	ldr	r0, [sp, #8]
    1ce8:	9903      	ldr	r1, [sp, #12]
    1cea:	47a8      	blx	r5
    1cec:	0002      	movs	r2, r0
    1cee:	000b      	movs	r3, r1
    1cf0:	0030      	movs	r0, r6
    1cf2:	0039      	movs	r1, r7
    1cf4:	4e63      	ldr	r6, [pc, #396]	; (1e84 <computeKalmanStates+0x230>)
    1cf6:	47b0      	blx	r6
    1cf8:	6922      	ldr	r2, [r4, #16]
    1cfa:	6963      	ldr	r3, [r4, #20]
    1cfc:	0006      	movs	r6, r0
    1cfe:	000f      	movs	r7, r1
    1d00:	9804      	ldr	r0, [sp, #16]
    1d02:	9905      	ldr	r1, [sp, #20]
    1d04:	47a8      	blx	r5
    1d06:	0002      	movs	r2, r0
    1d08:	000b      	movs	r3, r1
    1d0a:	0030      	movs	r0, r6
    1d0c:	0039      	movs	r1, r7
    1d0e:	4e5d      	ldr	r6, [pc, #372]	; (1e84 <computeKalmanStates+0x230>)
    1d10:	47b0      	blx	r6
    1d12:	900a      	str	r0, [sp, #40]	; 0x28
    1d14:	910b      	str	r1, [sp, #44]	; 0x2c
    1d16:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    1d18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1d1a:	4956      	ldr	r1, [pc, #344]	; (1e74 <computeKalmanStates+0x220>)
    1d1c:	600a      	str	r2, [r1, #0]
    1d1e:	604b      	str	r3, [r1, #4]
    estp[1] = phi[1][0] * altitude + phi[1][1] * velocity + phi[1][2] * accel;
    1d20:	69a2      	ldr	r2, [r4, #24]
    1d22:	69e3      	ldr	r3, [r4, #28]
    1d24:	9800      	ldr	r0, [sp, #0]
    1d26:	9901      	ldr	r1, [sp, #4]
    1d28:	47a8      	blx	r5
    1d2a:	6a22      	ldr	r2, [r4, #32]
    1d2c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    1d2e:	0006      	movs	r6, r0
    1d30:	000f      	movs	r7, r1
    1d32:	9802      	ldr	r0, [sp, #8]
    1d34:	9903      	ldr	r1, [sp, #12]
    1d36:	47a8      	blx	r5
    1d38:	0002      	movs	r2, r0
    1d3a:	000b      	movs	r3, r1
    1d3c:	0030      	movs	r0, r6
    1d3e:	0039      	movs	r1, r7
    1d40:	4e50      	ldr	r6, [pc, #320]	; (1e84 <computeKalmanStates+0x230>)
    1d42:	47b0      	blx	r6
    1d44:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    1d46:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    1d48:	0006      	movs	r6, r0
    1d4a:	000f      	movs	r7, r1
    1d4c:	9804      	ldr	r0, [sp, #16]
    1d4e:	9905      	ldr	r1, [sp, #20]
    1d50:	47a8      	blx	r5
    1d52:	0002      	movs	r2, r0
    1d54:	000b      	movs	r3, r1
    1d56:	0030      	movs	r0, r6
    1d58:	0039      	movs	r1, r7
    1d5a:	4e4a      	ldr	r6, [pc, #296]	; (1e84 <computeKalmanStates+0x230>)
    1d5c:	47b0      	blx	r6
    1d5e:	900c      	str	r0, [sp, #48]	; 0x30
    1d60:	910d      	str	r1, [sp, #52]	; 0x34
    1d62:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1d64:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1d66:	4943      	ldr	r1, [pc, #268]	; (1e74 <computeKalmanStates+0x220>)
    1d68:	608a      	str	r2, [r1, #8]
    1d6a:	60cb      	str	r3, [r1, #12]
    estp[2] = phi[2][0] * altitude + phi[2][1] * velocity + phi[2][2] * accel;
    1d6c:	6b22      	ldr	r2, [r4, #48]	; 0x30
    1d6e:	6b63      	ldr	r3, [r4, #52]	; 0x34
    1d70:	9800      	ldr	r0, [sp, #0]
    1d72:	9901      	ldr	r1, [sp, #4]
    1d74:	47a8      	blx	r5
    1d76:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    1d78:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    1d7a:	0006      	movs	r6, r0
    1d7c:	000f      	movs	r7, r1
    1d7e:	9802      	ldr	r0, [sp, #8]
    1d80:	9903      	ldr	r1, [sp, #12]
    1d82:	47a8      	blx	r5
    1d84:	0002      	movs	r2, r0
    1d86:	000b      	movs	r3, r1
    1d88:	0030      	movs	r0, r6
    1d8a:	0039      	movs	r1, r7
    1d8c:	4e3d      	ldr	r6, [pc, #244]	; (1e84 <computeKalmanStates+0x230>)
    1d8e:	47b0      	blx	r6
    1d90:	6c22      	ldr	r2, [r4, #64]	; 0x40
    1d92:	6c63      	ldr	r3, [r4, #68]	; 0x44
    1d94:	0006      	movs	r6, r0
    1d96:	000f      	movs	r7, r1
    1d98:	9804      	ldr	r0, [sp, #16]
    1d9a:	9905      	ldr	r1, [sp, #20]
    1d9c:	47a8      	blx	r5
    1d9e:	4c39      	ldr	r4, [pc, #228]	; (1e84 <computeKalmanStates+0x230>)
    1da0:	0002      	movs	r2, r0
    1da2:	000b      	movs	r3, r1
    1da4:	0030      	movs	r0, r6
    1da6:	0039      	movs	r1, r7
    1da8:	47a0      	blx	r4
    1daa:	0003      	movs	r3, r0
    1dac:	000c      	movs	r4, r1
    1dae:	4a31      	ldr	r2, [pc, #196]	; (1e74 <computeKalmanStates+0x220>)
    1db0:	9000      	str	r0, [sp, #0]
    1db2:	9101      	str	r1, [sp, #4]
    1db4:	6113      	str	r3, [r2, #16]
    1db6:	6154      	str	r4, [r2, #20]

    /*
    Update state
    */
    altitude = estp[0] + kgain[0][0] * alt_inovation + kgain[0][1] * accel_inovation;
    1db8:	4c33      	ldr	r4, [pc, #204]	; (1e88 <computeKalmanStates+0x234>)
    1dba:	6822      	ldr	r2, [r4, #0]
    1dbc:	6863      	ldr	r3, [r4, #4]
    1dbe:	9806      	ldr	r0, [sp, #24]
    1dc0:	9907      	ldr	r1, [sp, #28]
    1dc2:	47a8      	blx	r5
    1dc4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    1dc6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1dc8:	4e2e      	ldr	r6, [pc, #184]	; (1e84 <computeKalmanStates+0x230>)
    1dca:	47b0      	blx	r6
    1dcc:	68a2      	ldr	r2, [r4, #8]
    1dce:	68e3      	ldr	r3, [r4, #12]
    1dd0:	0006      	movs	r6, r0
    1dd2:	000f      	movs	r7, r1
    1dd4:	9808      	ldr	r0, [sp, #32]
    1dd6:	9909      	ldr	r1, [sp, #36]	; 0x24
    1dd8:	47a8      	blx	r5
    1dda:	0002      	movs	r2, r0
    1ddc:	000b      	movs	r3, r1
    1dde:	0030      	movs	r0, r6
    1de0:	0039      	movs	r1, r7
    1de2:	4e28      	ldr	r6, [pc, #160]	; (1e84 <computeKalmanStates+0x230>)
    1de4:	47b0      	blx	r6
    1de6:	4b21      	ldr	r3, [pc, #132]	; (1e6c <computeKalmanStates+0x218>)
    1de8:	6018      	str	r0, [r3, #0]
    1dea:	6059      	str	r1, [r3, #4]
    velocity = estp[1] + kgain[1][0] * alt_inovation + kgain[1][1] * accel_inovation;
    1dec:	6922      	ldr	r2, [r4, #16]
    1dee:	6963      	ldr	r3, [r4, #20]
    1df0:	9806      	ldr	r0, [sp, #24]
    1df2:	9907      	ldr	r1, [sp, #28]
    1df4:	47a8      	blx	r5
    1df6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1df8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1dfa:	47b0      	blx	r6
    1dfc:	69a2      	ldr	r2, [r4, #24]
    1dfe:	69e3      	ldr	r3, [r4, #28]
    1e00:	0006      	movs	r6, r0
    1e02:	000f      	movs	r7, r1
    1e04:	9808      	ldr	r0, [sp, #32]
    1e06:	9909      	ldr	r1, [sp, #36]	; 0x24
    1e08:	47a8      	blx	r5
    1e0a:	0002      	movs	r2, r0
    1e0c:	000b      	movs	r3, r1
    1e0e:	0030      	movs	r0, r6
    1e10:	0039      	movs	r1, r7
    1e12:	4e1c      	ldr	r6, [pc, #112]	; (1e84 <computeKalmanStates+0x230>)
    1e14:	47b0      	blx	r6
    1e16:	4b18      	ldr	r3, [pc, #96]	; (1e78 <computeKalmanStates+0x224>)
    1e18:	6018      	str	r0, [r3, #0]
    1e1a:	6059      	str	r1, [r3, #4]
    accel =    estp[2] + kgain[2][0] * alt_inovation + kgain[2][1] * accel_inovation;
    1e1c:	6a22      	ldr	r2, [r4, #32]
    1e1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
    1e20:	9806      	ldr	r0, [sp, #24]
    1e22:	9907      	ldr	r1, [sp, #28]
    1e24:	47a8      	blx	r5
    1e26:	9a00      	ldr	r2, [sp, #0]
    1e28:	9b01      	ldr	r3, [sp, #4]
    1e2a:	47b0      	blx	r6
    1e2c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    1e2e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    1e30:	0006      	movs	r6, r0
    1e32:	000f      	movs	r7, r1
    1e34:	9808      	ldr	r0, [sp, #32]
    1e36:	9909      	ldr	r1, [sp, #36]	; 0x24
    1e38:	47a8      	blx	r5
    1e3a:	4c12      	ldr	r4, [pc, #72]	; (1e84 <computeKalmanStates+0x230>)
    1e3c:	0002      	movs	r2, r0
    1e3e:	000b      	movs	r3, r1
    1e40:	0030      	movs	r0, r6
    1e42:	0039      	movs	r1, r7
    1e44:	47a0      	blx	r4
    1e46:	4b0d      	ldr	r3, [pc, #52]	; (1e7c <computeKalmanStates+0x228>)
    1e48:	6018      	str	r0, [r3, #0]
    1e4a:	6059      	str	r1, [r3, #4]

}
    1e4c:	b00f      	add	sp, #60	; 0x3c
    1e4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1e50:	20000788 	.word	0x20000788
    1e54:	00005ec1 	.word	0x00005ec1
    1e58:	200004c8 	.word	0x200004c8
    1e5c:	000056f9 	.word	0x000056f9
    1e60:	33daf8df 	.word	0x33daf8df
    1e64:	4040164b 	.word	0x4040164b
    1e68:	000051f9 	.word	0x000051f9
    1e6c:	20000658 	.word	0x20000658
    1e70:	00003a39 	.word	0x00003a39
    1e74:	20000660 	.word	0x20000660
    1e78:	20000650 	.word	0x20000650
    1e7c:	20000648 	.word	0x20000648
    1e80:	20000010 	.word	0x20000010
    1e84:	00004371 	.word	0x00004371
    1e88:	20000610 	.word	0x20000610

00001e8c <makePage>:
u8_t pageLocation;

bool pageReady;


void makePage(u8_t bytesToWrite, u8_t* data) {
    1e8c:	b5f0      	push	{r4, r5, r6, r7, lr}


    u8_t location = pageLocation;
    1e8e:	4a1f      	ldr	r2, [pc, #124]	; (1f0c <makePage+0x80>)
    1e90:	7814      	ldrb	r4, [r2, #0]
    u8_t bytesWritten = 0;

    if ((location + bytesToWrite) > 0xFF) {
    1e92:	1903      	adds	r3, r0, r4
    1e94:	2bff      	cmp	r3, #255	; 0xff
    1e96:	dc0c      	bgt.n	1eb2 <makePage+0x26>
    1e98:	2300      	movs	r3, #0
        }
        pageReady = true;

    } else {
        for (u16_t dataByte = 0; dataByte <= bytesToWrite; ++dataByte) {
            pageBuffer[(dataByte + location)] = data[dataByte];
    1e9a:	4d1d      	ldr	r5, [pc, #116]	; (1f10 <makePage+0x84>)
        for (u16_t dataByte = 0; dataByte <= bytesToWrite; ++dataByte) {
    1e9c:	b280      	uxth	r0, r0
            pageBuffer[(dataByte + location)] = data[dataByte];
    1e9e:	1965      	adds	r5, r4, r5
        for (u16_t dataByte = 0; dataByte <= bytesToWrite; ++dataByte) {
    1ea0:	b29e      	uxth	r6, r3
    1ea2:	42b0      	cmp	r0, r6
    1ea4:	d322      	bcc.n	1eec <makePage+0x60>
            pageBuffer[(dataByte + location)] = data[dataByte];
    1ea6:	5cce      	ldrb	r6, [r1, r3]
    1ea8:	54ee      	strb	r6, [r5, r3]
            bytesWritten++;
            pageLocation = location + dataByte;
    1eaa:	18e6      	adds	r6, r4, r3
    1eac:	7016      	strb	r6, [r2, #0]
    1eae:	3301      	adds	r3, #1
    1eb0:	e7f6      	b.n	1ea0 <makePage+0x14>
    1eb2:	2300      	movs	r3, #0
    1eb4:	4d16      	ldr	r5, [pc, #88]	; (1f10 <makePage+0x84>)
    1eb6:	b2de      	uxtb	r6, r3
    1eb8:	46b4      	mov	ip, r6
        for (u16_t dataByte = 0; (dataByte + location) <= 0xFF; ++dataByte) {
    1eba:	191e      	adds	r6, r3, r4
    1ebc:	2eff      	cmp	r6, #255	; 0xff
    1ebe:	dd16      	ble.n	1eee <makePage+0x62>
        pageLocation = 0x00;
    1ec0:	2300      	movs	r3, #0
            pageToWrite[i] = pageBuffer[i];
    1ec2:	4f14      	ldr	r7, [pc, #80]	; (1f14 <makePage+0x88>)
        pageLocation = 0x00;
    1ec4:	7013      	strb	r3, [r2, #0]
            pageToWrite[i] = pageBuffer[i];
    1ec6:	18ec      	adds	r4, r5, r3
    1ec8:	7826      	ldrb	r6, [r4, #0]
    1eca:	54fe      	strb	r6, [r7, r3]
            pageBuffer[i] = 0;
    1ecc:	2600      	movs	r6, #0
    1ece:	7026      	strb	r6, [r4, #0]
        for(u16_t i = 0; i <= 0xFF; ++i) {
    1ed0:	2480      	movs	r4, #128	; 0x80
    1ed2:	3301      	adds	r3, #1
    1ed4:	0064      	lsls	r4, r4, #1
    1ed6:	42a3      	cmp	r3, r4
    1ed8:	d1f5      	bne.n	1ec6 <makePage+0x3a>
    1eda:	4663      	mov	r3, ip
    1edc:	2500      	movs	r5, #0
            pageBuffer[dataByte] = data[bytesWritten];
    1ede:	4f0c      	ldr	r7, [pc, #48]	; (1f10 <makePage+0x84>)
    1ee0:	1c6c      	adds	r4, r5, #1
        for (u16_t dataByte = 0; bytesWritten < bytesToWrite; ++dataByte) {
    1ee2:	4283      	cmp	r3, r0
    1ee4:	d308      	bcc.n	1ef8 <makePage+0x6c>
        pageReady = true;
    1ee6:	2201      	movs	r2, #1
    1ee8:	4b0b      	ldr	r3, [pc, #44]	; (1f18 <makePage+0x8c>)
    1eea:	701a      	strb	r2, [r3, #0]
        }
    }
}
    1eec:	bdf0      	pop	{r4, r5, r6, r7, pc}
            pageBuffer[(dataByte + location)] = data[dataByte];
    1eee:	5ccf      	ldrb	r7, [r1, r3]
        for (u16_t dataByte = 0; (dataByte + location) <= 0xFF; ++dataByte) {
    1ef0:	3301      	adds	r3, #1
            pageBuffer[(dataByte + location)] = data[dataByte];
    1ef2:	55af      	strb	r7, [r5, r6]
        for (u16_t dataByte = 0; (dataByte + location) <= 0xFF; ++dataByte) {
    1ef4:	b29b      	uxth	r3, r3
    1ef6:	e7de      	b.n	1eb6 <makePage+0x2a>
            pageBuffer[dataByte] = data[bytesWritten];
    1ef8:	4666      	mov	r6, ip
    1efa:	1936      	adds	r6, r6, r4
    1efc:	3e01      	subs	r6, #1
    1efe:	5d8e      	ldrb	r6, [r1, r6]
            bytesWritten++;
    1f00:	3301      	adds	r3, #1
            pageBuffer[dataByte] = data[bytesWritten];
    1f02:	557e      	strb	r6, [r7, r5]
            bytesWritten++;
    1f04:	b2db      	uxtb	r3, r3
            pageLocation = dataByte + 1;
    1f06:	7014      	strb	r4, [r2, #0]
    1f08:	0025      	movs	r5, r4
    1f0a:	e7e9      	b.n	1ee0 <makePage+0x54>
    1f0c:	20000784 	.word	0x20000784
    1f10:	20000501 	.word	0x20000501
    1f14:	20000678 	.word	0x20000678
    1f18:	20000778 	.word	0x20000778

00001f1c <logFlight>:


void logFlight() {
    1f1c:	b51f      	push	{r0, r1, r2, r3, r4, lr}

    u8_t bytesToSend = 16;
    u8_t dataToSend[16];

    dataToSend[0] = FLIGHT_LOG;
    1f1e:	2346      	movs	r3, #70	; 0x46
    1f20:	466a      	mov	r2, sp
    1f22:	7013      	strb	r3, [r2, #0]
    dataToSend[1] = 0;
    1f24:	2300      	movs	r3, #0

    dataToSend[2] = offsets.offsetBufferTime >> 0;
    1f26:	4669      	mov	r1, sp
    dataToSend[3] = offsets.offsetBufferTime >> 8;
    1f28:	4668      	mov	r0, sp
    dataToSend[1] = 0;
    1f2a:	7053      	strb	r3, [r2, #1]
    dataToSend[2] = offsets.offsetBufferTime >> 0;
    1f2c:	4a10      	ldr	r2, [pc, #64]	; (1f70 <logFlight+0x54>)
    1f2e:	6813      	ldr	r3, [r2, #0]
    1f30:	708b      	strb	r3, [r1, #2]
    dataToSend[3] = offsets.offsetBufferTime >> 8;
    1f32:	0a19      	lsrs	r1, r3, #8
    1f34:	70c1      	strb	r1, [r0, #3]
    dataToSend[4] = offsets.offsetBufferTime >> 16;
    1f36:	0c19      	lsrs	r1, r3, #16
    dataToSend[5] = offsets.offsetBufferTime >> 24;
    1f38:	0e1b      	lsrs	r3, r3, #24
    1f3a:	7143      	strb	r3, [r0, #5]

    dataToSend[6] = offsets.groundOffset >> 0;
    1f3c:	6993      	ldr	r3, [r2, #24]
    dataToSend[4] = offsets.offsetBufferTime >> 16;
    1f3e:	7101      	strb	r1, [r0, #4]
    dataToSend[7] = offsets.groundOffset >> 8;
    1f40:	0a19      	lsrs	r1, r3, #8
    dataToSend[6] = offsets.groundOffset >> 0;
    1f42:	7183      	strb	r3, [r0, #6]
    dataToSend[7] = offsets.groundOffset >> 8;
    1f44:	71c1      	strb	r1, [r0, #7]
    dataToSend[8] = offsets.groundOffset >> 16;
    1f46:	0c19      	lsrs	r1, r3, #16
    dataToSend[9] = offsets.groundOffset >> 24;
    1f48:	0e1b      	lsrs	r3, r3, #24
    1f4a:	7243      	strb	r3, [r0, #9]

    dataToSend[10] = offsets.groundTemperature >> 0;
    1f4c:	6a13      	ldr	r3, [r2, #32]
    dataToSend[8] = offsets.groundOffset >> 16;
    1f4e:	7201      	strb	r1, [r0, #8]
    dataToSend[11] = offsets.groundTemperature >> 8;
    1f50:	0a1a      	lsrs	r2, r3, #8
    dataToSend[10] = offsets.groundTemperature >> 0;
    1f52:	7283      	strb	r3, [r0, #10]
    dataToSend[11] = offsets.groundTemperature >> 8;
    1f54:	72c2      	strb	r2, [r0, #11]
    dataToSend[12] = offsets.groundTemperature >> 16;
    1f56:	0c1a      	lsrs	r2, r3, #16
    dataToSend[13] = offsets.groundTemperature >> 24;
    1f58:	0e1b      	lsrs	r3, r3, #24
    1f5a:	7343      	strb	r3, [r0, #13]

    //dataToSend[14] = accel >> 0;
    dataToSend[15] = 0xfe;
    1f5c:	23fe      	movs	r3, #254	; 0xfe
    dataToSend[12] = offsets.groundTemperature >> 16;
    1f5e:	7302      	strb	r2, [r0, #12]
    dataToSend[15] = 0xfe;
    1f60:	73c3      	strb	r3, [r0, #15]
    dataToSend[9] = offsets.groundOffset >> 24;
    1f62:	4669      	mov	r1, sp

    makePage(bytesToSend, dataToSend);
    1f64:	2010      	movs	r0, #16
    1f66:	4b03      	ldr	r3, [pc, #12]	; (1f74 <logFlight+0x58>)
    1f68:	4798      	blx	r3
}
    1f6a:	b005      	add	sp, #20
    1f6c:	bd00      	pop	{pc}
    1f6e:	46c0      	nop			; (mov r8, r8)
    1f70:	200004c8 	.word	0x200004c8
    1f74:	00001e8d 	.word	0x00001e8d

00001f78 <logEvent>:
void logEvent(u8_t eventType) {

    u8_t bytesToSend = 12;
    u8_t dataToSend[12];

    dataToSend[0] = EVENT_LOG;
    1f78:	2345      	movs	r3, #69	; 0x45
void logEvent(u8_t eventType) {
    1f7a:	b530      	push	{r4, r5, lr}
    dataToSend[1] = eventType;
    dataToSend[2] = sample.sampleTick >> 0;
    1f7c:	4d13      	ldr	r5, [pc, #76]	; (1fcc <logEvent+0x54>)
void logEvent(u8_t eventType) {
    1f7e:	b085      	sub	sp, #20
    dataToSend[0] = EVENT_LOG;
    1f80:	ac01      	add	r4, sp, #4
    1f82:	7023      	strb	r3, [r4, #0]
    dataToSend[2] = sample.sampleTick >> 0;
    1f84:	686b      	ldr	r3, [r5, #4]
    dataToSend[1] = eventType;
    1f86:	7060      	strb	r0, [r4, #1]
    dataToSend[2] = sample.sampleTick >> 0;
    1f88:	70a3      	strb	r3, [r4, #2]
    dataToSend[3] = sample.sampleTick >> 8;
    1f8a:	686b      	ldr	r3, [r5, #4]
    1f8c:	0a1b      	lsrs	r3, r3, #8
    1f8e:	70e3      	strb	r3, [r4, #3]
    dataToSend[4] = sample.sampleTick >> 16;
    1f90:	686b      	ldr	r3, [r5, #4]
    1f92:	0c1b      	lsrs	r3, r3, #16
    1f94:	7123      	strb	r3, [r4, #4]
    dataToSend[5] = sample.sampleTick >> 24;
    1f96:	686b      	ldr	r3, [r5, #4]
    1f98:	0e1b      	lsrs	r3, r3, #24
    1f9a:	7163      	strb	r3, [r4, #5]

    dataToSend[6] = (int)altitude >> 0;
    1f9c:	4b0c      	ldr	r3, [pc, #48]	; (1fd0 <logEvent+0x58>)
    1f9e:	6818      	ldr	r0, [r3, #0]
    1fa0:	6859      	ldr	r1, [r3, #4]
    1fa2:	4b0c      	ldr	r3, [pc, #48]	; (1fd4 <logEvent+0x5c>)
    1fa4:	4798      	blx	r3
    dataToSend[7] = (int)altitude >> 8;
    1fa6:	1203      	asrs	r3, r0, #8
    dataToSend[6] = (int)altitude >> 0;
    1fa8:	71a0      	strb	r0, [r4, #6]
    dataToSend[7] = (int)altitude >> 8;
    1faa:	71e3      	strb	r3, [r4, #7]
    dataToSend[8] = (int)altitude >> 16;
    1fac:	1403      	asrs	r3, r0, #16
    dataToSend[9] = (int)altitude >> 24;
    1fae:	1600      	asrs	r0, r0, #24
    1fb0:	7260      	strb	r0, [r4, #9]
    dataToSend[8] = (int)altitude >> 16;
    1fb2:	7223      	strb	r3, [r4, #8]

    dataToSend[10] = sample.voltage.batV >> 0;
    1fb4:	892b      	ldrh	r3, [r5, #8]
    dataToSend[11] = sample.voltage.batV >> 8;

    makePage(bytesToSend, dataToSend);
    1fb6:	0021      	movs	r1, r4
    dataToSend[10] = sample.voltage.batV >> 0;
    1fb8:	72a3      	strb	r3, [r4, #10]
    dataToSend[11] = sample.voltage.batV >> 8;
    1fba:	892b      	ldrh	r3, [r5, #8]
    makePage(bytesToSend, dataToSend);
    1fbc:	200c      	movs	r0, #12
    dataToSend[11] = sample.voltage.batV >> 8;
    1fbe:	0a1b      	lsrs	r3, r3, #8
    1fc0:	72e3      	strb	r3, [r4, #11]
    makePage(bytesToSend, dataToSend);
    1fc2:	4b05      	ldr	r3, [pc, #20]	; (1fd8 <logEvent+0x60>)
    1fc4:	4798      	blx	r3

}
    1fc6:	b005      	add	sp, #20
    1fc8:	bd30      	pop	{r4, r5, pc}
    1fca:	46c0      	nop			; (mov r8, r8)
    1fcc:	20000788 	.word	0x20000788
    1fd0:	20000658 	.word	0x20000658
    1fd4:	00005d65 	.word	0x00005d65
    1fd8:	00001e8d 	.word	0x00001e8d

00001fdc <logSensors>:
void logSensors() {

    u8_t bytesToSend = 24;
    u8_t dataToSend[24];

    dataToSend[0] = SENSOR_LOG;
    1fdc:	2353      	movs	r3, #83	; 0x53
void logSensors() {
    1fde:	b5f0      	push	{r4, r5, r6, r7, lr}
	
    dataToSend[1] = sample.sampleTick >> 0;
    1fe0:	4c4b      	ldr	r4, [pc, #300]	; (2110 <STACK_SIZE+0x110>)
void logSensors() {
    1fe2:	b089      	sub	sp, #36	; 0x24
    dataToSend[0] = SENSOR_LOG;
    1fe4:	aa02      	add	r2, sp, #8
    1fe6:	7013      	strb	r3, [r2, #0]
    dataToSend[1] = sample.sampleTick >> 0;
    1fe8:	6863      	ldr	r3, [r4, #4]
    1fea:	7053      	strb	r3, [r2, #1]
    dataToSend[2] = sample.sampleTick >> 8;
    1fec:	6863      	ldr	r3, [r4, #4]
    1fee:	0a1b      	lsrs	r3, r3, #8
    1ff0:	7093      	strb	r3, [r2, #2]
    dataToSend[3] = sample.sampleTick >> 16;
    1ff2:	6863      	ldr	r3, [r4, #4]
    1ff4:	0c1b      	lsrs	r3, r3, #16
    1ff6:	70d3      	strb	r3, [r2, #3]
    dataToSend[4] = sample.sampleTick >> 24;
    1ff8:	6863      	ldr	r3, [r4, #4]
    1ffa:	0e1b      	lsrs	r3, r3, #24
    1ffc:	7113      	strb	r3, [r2, #4]

    dataToSend[5] = (int)altitude >> 0;
    1ffe:	4b45      	ldr	r3, [pc, #276]	; (2114 <STACK_SIZE+0x114>)
    2000:	6818      	ldr	r0, [r3, #0]
    2002:	6859      	ldr	r1, [r3, #4]
    2004:	4b44      	ldr	r3, [pc, #272]	; (2118 <STACK_SIZE+0x118>)
    2006:	4798      	blx	r3
    2008:	ab02      	add	r3, sp, #8
    dataToSend[6] = (int)altitude >> 8;
    200a:	aa02      	add	r2, sp, #8
    dataToSend[5] = (int)altitude >> 0;
    200c:	7158      	strb	r0, [r3, #5]
    dataToSend[6] = (int)altitude >> 8;
    200e:	1203      	asrs	r3, r0, #8
    2010:	7193      	strb	r3, [r2, #6]
    dataToSend[7] = (int)altitude >> 16;
    2012:	1403      	asrs	r3, r0, #16
    2014:	71d3      	strb	r3, [r2, #7]
    dataToSend[8] = (int)altitude >> 24;

    float fractionalAccel = accel - (int16_t)(accel);
    2016:	4b41      	ldr	r3, [pc, #260]	; (211c <STACK_SIZE+0x11c>)
    dataToSend[8] = (int)altitude >> 24;
    2018:	1600      	asrs	r0, r0, #24
    float fractionalAccel = accel - (int16_t)(accel);
    201a:	681e      	ldr	r6, [r3, #0]
    201c:	685f      	ldr	r7, [r3, #4]
    dataToSend[8] = (int)altitude >> 24;
    201e:	7210      	strb	r0, [r2, #8]
    float fractionalAccel = accel - (int16_t)(accel);
    2020:	0039      	movs	r1, r7
    2022:	4b3d      	ldr	r3, [pc, #244]	; (2118 <STACK_SIZE+0x118>)
    2024:	0030      	movs	r0, r6
    2026:	4798      	blx	r3
    2028:	b205      	sxth	r5, r0
    202a:	4b3d      	ldr	r3, [pc, #244]	; (2120 <STACK_SIZE+0x120>)
    202c:	0028      	movs	r0, r5
    202e:	4798      	blx	r3
    2030:	0002      	movs	r2, r0
    2032:	000b      	movs	r3, r1
    2034:	0030      	movs	r0, r6
    2036:	0039      	movs	r1, r7
    2038:	4e3a      	ldr	r6, [pc, #232]	; (2124 <STACK_SIZE+0x124>)
    203a:	47b0      	blx	r6
    203c:	4b3a      	ldr	r3, [pc, #232]	; (2128 <STACK_SIZE+0x128>)
    203e:	4798      	blx	r3
    u16_t fractAccelPart = fractionalAccel * 1000;
    2040:	4b3a      	ldr	r3, [pc, #232]	; (212c <STACK_SIZE+0x12c>)
    2042:	493b      	ldr	r1, [pc, #236]	; (2130 <STACK_SIZE+0x130>)
    2044:	4798      	blx	r3
    2046:	4f3b      	ldr	r7, [pc, #236]	; (2134 <STACK_SIZE+0x134>)
    2048:	47b8      	blx	r7

    dataToSend[9] = (int16_t)(accel) >> 0;
    204a:	aa02      	add	r2, sp, #8
    u16_t fractAccelPart = fractionalAccel * 1000;
    204c:	b283      	uxth	r3, r0
    dataToSend[10] = (int16_t)(accel) >> 8;
    dataToSend[11] = fractAccelPart >> 0;
    204e:	72d3      	strb	r3, [r2, #11]
    dataToSend[12] = fractAccelPart >> 8;
    2050:	0a1b      	lsrs	r3, r3, #8
    2052:	7313      	strb	r3, [r2, #12]


    float fractionalVelocity = velocity - (int16_t)(velocity);
    2054:	4b38      	ldr	r3, [pc, #224]	; (2138 <STACK_SIZE+0x138>)
    dataToSend[9] = (int16_t)(accel) >> 0;
    2056:	7255      	strb	r5, [r2, #9]
    dataToSend[10] = (int16_t)(accel) >> 8;
    2058:	122d      	asrs	r5, r5, #8
    205a:	7295      	strb	r5, [r2, #10]
    float fractionalVelocity = velocity - (int16_t)(velocity);
    205c:	681a      	ldr	r2, [r3, #0]
    205e:	685b      	ldr	r3, [r3, #4]
    2060:	9200      	str	r2, [sp, #0]
    2062:	9301      	str	r3, [sp, #4]
    2064:	0010      	movs	r0, r2
    2066:	0019      	movs	r1, r3
    2068:	4b2b      	ldr	r3, [pc, #172]	; (2118 <STACK_SIZE+0x118>)
    206a:	4798      	blx	r3
    206c:	b205      	sxth	r5, r0
    206e:	4b2c      	ldr	r3, [pc, #176]	; (2120 <STACK_SIZE+0x120>)
    2070:	0028      	movs	r0, r5
    2072:	4798      	blx	r3
    2074:	0002      	movs	r2, r0
    2076:	000b      	movs	r3, r1
    2078:	9800      	ldr	r0, [sp, #0]
    207a:	9901      	ldr	r1, [sp, #4]
    207c:	47b0      	blx	r6
    207e:	4b2a      	ldr	r3, [pc, #168]	; (2128 <STACK_SIZE+0x128>)
    2080:	4798      	blx	r3
    u16_t fractVelocityPart = fractionalVelocity * 1000;
    2082:	4b2a      	ldr	r3, [pc, #168]	; (212c <STACK_SIZE+0x12c>)
    2084:	492a      	ldr	r1, [pc, #168]	; (2130 <STACK_SIZE+0x130>)
    2086:	4798      	blx	r3
    2088:	47b8      	blx	r7

    dataToSend[13] = (int16_t)(velocity) >> 0;
    208a:	aa02      	add	r2, sp, #8
    u16_t fractVelocityPart = fractionalVelocity * 1000;
    208c:	b283      	uxth	r3, r0
    dataToSend[13] = (int16_t)(velocity) >> 0;
    208e:	7355      	strb	r5, [r2, #13]
    dataToSend[14] = (int16_t)(velocity) >> 8;
    dataToSend[15] = fractVelocityPart >> 0;
    2090:	73d3      	strb	r3, [r2, #15]
    dataToSend[14] = (int16_t)(velocity) >> 8;
    2092:	122d      	asrs	r5, r5, #8
    dataToSend[16] = fractVelocityPart >> 8;
    2094:	0a1b      	lsrs	r3, r3, #8
    dataToSend[14] = (int16_t)(velocity) >> 8;
    2096:	7395      	strb	r5, [r2, #14]
    dataToSend[16] = fractVelocityPart >> 8;
    2098:	7413      	strb	r3, [r2, #16]

    dataToSend[17] = (u32_t)sample.altitudefeet >> 0;
    209a:	6c20      	ldr	r0, [r4, #64]	; 0x40
    209c:	6c61      	ldr	r1, [r4, #68]	; 0x44
    209e:	4d27      	ldr	r5, [pc, #156]	; (213c <STACK_SIZE+0x13c>)
    20a0:	47a8      	blx	r5
    20a2:	ab02      	add	r3, sp, #8
    20a4:	7458      	strb	r0, [r3, #17]
    dataToSend[18] = (u32_t)sample.altitudefeet >> 8;
    20a6:	6c20      	ldr	r0, [r4, #64]	; 0x40
    20a8:	6c61      	ldr	r1, [r4, #68]	; 0x44
    20aa:	47a8      	blx	r5
    20ac:	ab02      	add	r3, sp, #8
    20ae:	0a00      	lsrs	r0, r0, #8
    20b0:	7498      	strb	r0, [r3, #18]
    dataToSend[19] = (u32_t)sample.altitudefeet >> 16;
    20b2:	6c20      	ldr	r0, [r4, #64]	; 0x40
    20b4:	6c61      	ldr	r1, [r4, #68]	; 0x44
    20b6:	47a8      	blx	r5
    20b8:	ab02      	add	r3, sp, #8
    20ba:	0c00      	lsrs	r0, r0, #16
    20bc:	74d8      	strb	r0, [r3, #19]
    dataToSend[20] = (u32_t)sample.altitudefeet >> 24;
    20be:	6c20      	ldr	r0, [r4, #64]	; 0x40
    20c0:	6c61      	ldr	r1, [r4, #68]	; 0x44
    20c2:	47a8      	blx	r5
    20c4:	ab02      	add	r3, sp, #8
    20c6:	0e00      	lsrs	r0, r0, #24

    float fractionalAccelraw = sample.accelZ - (int16_t)(sample.accelZ);
    20c8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    dataToSend[20] = (u32_t)sample.altitudefeet >> 24;
    20ca:	7518      	strb	r0, [r3, #20]
    float fractionalAccelraw = sample.accelZ - (int16_t)(sample.accelZ);
    20cc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    u8_t fractAccelRawPart = fractionalAccelraw * 256;

    dataToSend[21] = (int16_t)(sample.accelZ) >> 0;
    20ce:	4d1c      	ldr	r5, [pc, #112]	; (2140 <STACK_SIZE+0x140>)
    20d0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    float fractionalAccelraw = sample.accelZ - (int16_t)(sample.accelZ);
    20d2:	9300      	str	r3, [sp, #0]
    dataToSend[21] = (int16_t)(sample.accelZ) >> 0;
    20d4:	47a8      	blx	r5
    20d6:	ab02      	add	r3, sp, #8
    20d8:	7558      	strb	r0, [r3, #21]
    dataToSend[22] = (int16_t)(sample.accelZ) >> 8;
    20da:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    20dc:	47a8      	blx	r5
    20de:	ab02      	add	r3, sp, #8
    20e0:	0a00      	lsrs	r0, r0, #8
    20e2:	7598      	strb	r0, [r3, #22]
    float fractionalAccelraw = sample.accelZ - (int16_t)(sample.accelZ);
    20e4:	9800      	ldr	r0, [sp, #0]
    20e6:	47a8      	blx	r5
    20e8:	4b16      	ldr	r3, [pc, #88]	; (2144 <STACK_SIZE+0x144>)
    20ea:	b200      	sxth	r0, r0
    20ec:	4798      	blx	r3
    20ee:	4b16      	ldr	r3, [pc, #88]	; (2148 <STACK_SIZE+0x148>)
    20f0:	1c01      	adds	r1, r0, #0
    20f2:	1c30      	adds	r0, r6, #0
    20f4:	4798      	blx	r3
    u8_t fractAccelRawPart = fractionalAccelraw * 256;
    20f6:	2187      	movs	r1, #135	; 0x87
    20f8:	4b0c      	ldr	r3, [pc, #48]	; (212c <STACK_SIZE+0x12c>)
    20fa:	05c9      	lsls	r1, r1, #23
    20fc:	4798      	blx	r3
    20fe:	47b8      	blx	r7
    dataToSend[23] = fractAccelRawPart >> 0;
    2100:	ab02      	add	r3, sp, #8
    2102:	75d8      	strb	r0, [r3, #23]
	 dataToSend[22] = 0xfd;
	 dataToSend[23] = 0xfe;
	 
	 */

    makePage(bytesToSend, dataToSend);
    2104:	0019      	movs	r1, r3
    2106:	2018      	movs	r0, #24
    2108:	4b10      	ldr	r3, [pc, #64]	; (214c <STACK_SIZE+0x14c>)
    210a:	4798      	blx	r3
}
    210c:	b009      	add	sp, #36	; 0x24
    210e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2110:	20000788 	.word	0x20000788
    2114:	20000658 	.word	0x20000658
    2118:	00005d65 	.word	0x00005d65
    211c:	20000648 	.word	0x20000648
    2120:	00005dcd 	.word	0x00005dcd
    2124:	000056f9 	.word	0x000056f9
    2128:	00005f65 	.word	0x00005f65
    212c:	00003d19 	.word	0x00003d19
    2130:	447a0000 	.word	0x447a0000
    2134:	00003b5d 	.word	0x00003b5d
    2138:	20000650 	.word	0x20000650
    213c:	00003b8d 	.word	0x00003b8d
    2140:	00004291 	.word	0x00004291
    2144:	000042d1 	.word	0x000042d1
    2148:	00003f59 	.word	0x00003f59
    214c:	00001e8d 	.word	0x00001e8d

00002150 <getFlightStartAddress>:



u32_t getFlightStartAddress(u8_t flightToFind) {
    2150:	b513      	push	{r0, r1, r4, lr}
    2152:	0003      	movs	r3, r0

    u8_t addressToCheck[3];

    u16_t flightAddressLoc = FLIGHTZEROSTART + (flightToFind * 0x06);
    2154:	2006      	movs	r0, #6
    2156:	4358      	muls	r0, r3

    AT25SEreadSample(flightAddressLoc, 0x03, addressToCheck);
    2158:	ac01      	add	r4, sp, #4
    215a:	3001      	adds	r0, #1
    215c:	30ff      	adds	r0, #255	; 0xff
    215e:	0022      	movs	r2, r4
    2160:	2103      	movs	r1, #3
    2162:	4b05      	ldr	r3, [pc, #20]	; (2178 <getFlightStartAddress+0x28>)
    2164:	4798      	blx	r3

    u32_t flightStartAddress = addressToCheck[0] << 0 | addressToCheck[1] << 8 | addressToCheck[2] << 16;
    2166:	7860      	ldrb	r0, [r4, #1]
    2168:	78a3      	ldrb	r3, [r4, #2]
    216a:	0200      	lsls	r0, r0, #8
    216c:	041b      	lsls	r3, r3, #16
    216e:	4318      	orrs	r0, r3
    2170:	7823      	ldrb	r3, [r4, #0]
    2172:	4318      	orrs	r0, r3

    return flightStartAddress;
}
    2174:	bd16      	pop	{r1, r2, r4, pc}
    2176:	46c0      	nop			; (mov r8, r8)
    2178:	0000033d 	.word	0x0000033d

0000217c <FindFlightEndingAddress>:

u32_t FindFlightEndingAddress(u8_t findThisFlightsEnd) {
    217c:	b513      	push	{r0, r1, r4, lr}
    217e:	0003      	movs	r3, r0

    u8_t addressToCheck[3];

    u16_t flightAddressLoc = FLIGHTZEROEND + (findThisFlightsEnd * 0x06);
    2180:	2006      	movs	r0, #6
    2182:	4358      	muls	r0, r3

    AT25SEreadSample(flightAddressLoc, 0x03, addressToCheck);
    2184:	ac01      	add	r4, sp, #4
    2186:	3004      	adds	r0, #4
    2188:	30ff      	adds	r0, #255	; 0xff
    218a:	0022      	movs	r2, r4
    218c:	2103      	movs	r1, #3
    218e:	4b05      	ldr	r3, [pc, #20]	; (21a4 <FindFlightEndingAddress+0x28>)
    2190:	4798      	blx	r3

    u32_t flightEndAddress = addressToCheck[0] << 0 | addressToCheck[1] << 8 | addressToCheck[2] << 16;
    2192:	7860      	ldrb	r0, [r4, #1]
    2194:	78a3      	ldrb	r3, [r4, #2]
    2196:	0200      	lsls	r0, r0, #8
    2198:	041b      	lsls	r3, r3, #16
    219a:	4318      	orrs	r0, r3
    219c:	7823      	ldrb	r3, [r4, #0]
    219e:	4318      	orrs	r0, r3

    return flightEndAddress;
}
    21a0:	bd16      	pop	{r1, r2, r4, pc}
    21a2:	46c0      	nop			; (mov r8, r8)
    21a4:	0000033d 	.word	0x0000033d

000021a8 <isFlightLogged>:

bool isFlightLogged(u8_t flightNumbToCheck) {
    21a8:	b510      	push	{r4, lr}

    u32_t possibleStart = getFlightStartAddress(flightNumbToCheck);
    21aa:	4b04      	ldr	r3, [pc, #16]	; (21bc <isFlightLogged+0x14>)
    21ac:	4798      	blx	r3

    if (possibleStart == 0xFFFFFF) {
    21ae:	4b04      	ldr	r3, [pc, #16]	; (21c0 <isFlightLogged+0x18>)
    21b0:	18c0      	adds	r0, r0, r3
    21b2:	1e43      	subs	r3, r0, #1
    21b4:	4198      	sbcs	r0, r3
    21b6:	b2c0      	uxtb	r0, r0
        return false;
    } else {
        return true;
    }
}
    21b8:	bd10      	pop	{r4, pc}
    21ba:	46c0      	nop			; (mov r8, r8)
    21bc:	00002151 	.word	0x00002151
    21c0:	ff000001 	.word	0xff000001

000021c4 <writeFlightEndAddress>:



void writeFlightEndAddress() {
    21c4:	b507      	push	{r0, r1, r2, lr}

    u32_t endingAddress = currentAddress;
    21c6:	4b0a      	ldr	r3, [pc, #40]	; (21f0 <writeFlightEndAddress+0x2c>)

    u8_t address[3] = {endingAddress >> 0, endingAddress >> 8, endingAddress >> 16};
    21c8:	aa01      	add	r2, sp, #4
    u32_t endingAddress = currentAddress;
    21ca:	681b      	ldr	r3, [r3, #0]
    u8_t address[3] = {endingAddress >> 0, endingAddress >> 8, endingAddress >> 16};
    21cc:	7013      	strb	r3, [r2, #0]
    21ce:	0a19      	lsrs	r1, r3, #8
    21d0:	0c1b      	lsrs	r3, r3, #16
    21d2:	7093      	strb	r3, [r2, #2]

    u16_t flightAddressLoc = FLIGHTZEROEND + (flightNumb * 0x06);
    21d4:	4b07      	ldr	r3, [pc, #28]	; (21f4 <writeFlightEndAddress+0x30>)
    u8_t address[3] = {endingAddress >> 0, endingAddress >> 8, endingAddress >> 16};
    21d6:	7051      	strb	r1, [r2, #1]
    u16_t flightAddressLoc = FLIGHTZEROEND + (flightNumb * 0x06);
    21d8:	7818      	ldrb	r0, [r3, #0]
    21da:	2306      	movs	r3, #6
    21dc:	4358      	muls	r0, r3
    AT25SFWriteBytes(flightAddressLoc, 3, address);
    21de:	3004      	adds	r0, #4
    21e0:	30ff      	adds	r0, #255	; 0xff
    21e2:	2103      	movs	r1, #3
    21e4:	4b04      	ldr	r3, [pc, #16]	; (21f8 <writeFlightEndAddress+0x34>)
    21e6:	4798      	blx	r3
    delay_ms(10);
    21e8:	200a      	movs	r0, #10
    21ea:	4b04      	ldr	r3, [pc, #16]	; (21fc <writeFlightEndAddress+0x38>)
    21ec:	4798      	blx	r3

}
    21ee:	bd07      	pop	{r0, r1, r2, pc}
    21f0:	2000077c 	.word	0x2000077c
    21f4:	200004f9 	.word	0x200004f9
    21f8:	00000251 	.word	0x00000251
    21fc:	00000f51 	.word	0x00000f51

00002200 <findNewFlightStart>:




void findNewFlightStart() {
    2200:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

    for (u8_t flightNumbToCheck = 0; flightNumbToCheck < 20; ++flightNumbToCheck) {
    2202:	2400      	movs	r4, #0

        if (!isFlightLogged(flightNumbToCheck)) {
    2204:	0020      	movs	r0, r4
    2206:	4b24      	ldr	r3, [pc, #144]	; (2298 <findNewFlightStart+0x98>)
    2208:	4798      	blx	r3
    220a:	2800      	cmp	r0, #0
    220c:	d13e      	bne.n	228c <findNewFlightStart+0x8c>
    220e:	4f23      	ldr	r7, [pc, #140]	; (229c <findNewFlightStart+0x9c>)
    2210:	ad01      	add	r5, sp, #4

            if (flightNumbToCheck > 0) {
    2212:	2c00      	cmp	r4, #0
    2214:	d020      	beq.n	2258 <findNewFlightStart+0x58>


                u32_t startAddress = FindFlightEndingAddress(flightNumbToCheck - 1);
    2216:	1e60      	subs	r0, r4, #1
    2218:	4b21      	ldr	r3, [pc, #132]	; (22a0 <findNewFlightStart+0xa0>)
    221a:	b2c0      	uxtb	r0, r0
    221c:	4798      	blx	r3
                delay_ms(5);
    221e:	4b21      	ldr	r3, [pc, #132]	; (22a4 <findNewFlightStart+0xa4>)
                u32_t startAddress = FindFlightEndingAddress(flightNumbToCheck - 1);
    2220:	0006      	movs	r6, r0
                delay_ms(5);
    2222:	2005      	movs	r0, #5
    2224:	4798      	blx	r3

                currentAddress = startAddress;

                u8_t address[3] = {startAddress >> 0, startAddress >> 8, startAddress >> 16};

                u16_t flightAddressLoc = FLIGHTZEROSTART + (flightNumbToCheck * 0x06);
    2226:	2006      	movs	r0, #6
    2228:	4360      	muls	r0, r4
                u8_t address[3] = {startAddress >> 0, startAddress >> 8, startAddress >> 16};
    222a:	0a33      	lsrs	r3, r6, #8
                AT25SFWriteBytes(flightAddressLoc, 3, address);
    222c:	3001      	adds	r0, #1
                currentAddress = startAddress;
    222e:	603e      	str	r6, [r7, #0]
                u8_t address[3] = {startAddress >> 0, startAddress >> 8, startAddress >> 16};
    2230:	702e      	strb	r6, [r5, #0]
    2232:	706b      	strb	r3, [r5, #1]
    2234:	0c36      	lsrs	r6, r6, #16
                AT25SFWriteBytes(flightAddressLoc, 3, address);
    2236:	30ff      	adds	r0, #255	; 0xff
    2238:	002a      	movs	r2, r5
    223a:	2103      	movs	r1, #3
    223c:	4b1a      	ldr	r3, [pc, #104]	; (22a8 <findNewFlightStart+0xa8>)
                u8_t address[3] = {startAddress >> 0, startAddress >> 8, startAddress >> 16};
    223e:	70ae      	strb	r6, [r5, #2]
                AT25SFWriteBytes(flightAddressLoc, 3, address);
    2240:	4798      	blx	r3
                beep(1500);
            }
            flightNumb = flightNumbToCheck;

            while (flightNumbToCheck > 0) {
                beep(500);
    2242:	25fa      	movs	r5, #250	; 0xfa
            flightNumb = flightNumbToCheck;
    2244:	4b19      	ldr	r3, [pc, #100]	; (22ac <findNewFlightStart+0xac>)
                beep(500);
    2246:	006d      	lsls	r5, r5, #1
            flightNumb = flightNumbToCheck;
    2248:	701c      	strb	r4, [r3, #0]
            while (flightNumbToCheck > 0) {
    224a:	2c00      	cmp	r4, #0
    224c:	d115      	bne.n	227a <findNewFlightStart+0x7a>
                delay_ms(500);
                --flightNumbToCheck;
            }
            delay_ms(500);
    224e:	20fa      	movs	r0, #250	; 0xfa
    2250:	4b14      	ldr	r3, [pc, #80]	; (22a4 <findNewFlightStart+0xa4>)
    2252:	0040      	lsls	r0, r0, #1
    2254:	4798      	blx	r3
            break;
        }
    }
}
    2256:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
                u8_t address[3] = {0x00,0x10,0x00};
    2258:	2310      	movs	r3, #16
                AT25SFWriteBytes(FLIGHTZEROSTART, 3, address);
    225a:	2080      	movs	r0, #128	; 0x80
                u8_t address[3] = {0x00,0x10,0x00};
    225c:	706b      	strb	r3, [r5, #1]
                AT25SFWriteBytes(FLIGHTZEROSTART, 3, address);
    225e:	002a      	movs	r2, r5
    2260:	2103      	movs	r1, #3
    2262:	0040      	lsls	r0, r0, #1
    2264:	4b10      	ldr	r3, [pc, #64]	; (22a8 <findNewFlightStart+0xa8>)
                u8_t address[3] = {0x00,0x10,0x00};
    2266:	702c      	strb	r4, [r5, #0]
    2268:	70ac      	strb	r4, [r5, #2]
                AT25SFWriteBytes(FLIGHTZEROSTART, 3, address);
    226a:	4798      	blx	r3
                currentAddress = 0x001000;
    226c:	2380      	movs	r3, #128	; 0x80
    226e:	015b      	lsls	r3, r3, #5
    2270:	603b      	str	r3, [r7, #0]
                beep(1500);
    2272:	480f      	ldr	r0, [pc, #60]	; (22b0 <findNewFlightStart+0xb0>)
    2274:	4b0f      	ldr	r3, [pc, #60]	; (22b4 <findNewFlightStart+0xb4>)
    2276:	4798      	blx	r3
    2278:	e7e3      	b.n	2242 <findNewFlightStart+0x42>
                beep(500);
    227a:	0028      	movs	r0, r5
    227c:	4b0d      	ldr	r3, [pc, #52]	; (22b4 <findNewFlightStart+0xb4>)
    227e:	4798      	blx	r3
                --flightNumbToCheck;
    2280:	3c01      	subs	r4, #1
                delay_ms(500);
    2282:	0028      	movs	r0, r5
    2284:	4b07      	ldr	r3, [pc, #28]	; (22a4 <findNewFlightStart+0xa4>)
    2286:	4798      	blx	r3
                --flightNumbToCheck;
    2288:	b2e4      	uxtb	r4, r4
    228a:	e7de      	b.n	224a <findNewFlightStart+0x4a>
    for (u8_t flightNumbToCheck = 0; flightNumbToCheck < 20; ++flightNumbToCheck) {
    228c:	3401      	adds	r4, #1
    228e:	b2e4      	uxtb	r4, r4
    2290:	2c14      	cmp	r4, #20
    2292:	d1b7      	bne.n	2204 <findNewFlightStart+0x4>
    2294:	e7df      	b.n	2256 <findNewFlightStart+0x56>
    2296:	46c0      	nop			; (mov r8, r8)
    2298:	000021a9 	.word	0x000021a9
    229c:	2000077c 	.word	0x2000077c
    22a0:	0000217d 	.word	0x0000217d
    22a4:	00000f51 	.word	0x00000f51
    22a8:	00000251 	.word	0x00000251
    22ac:	200004f9 	.word	0x200004f9
    22b0:	000005dc 	.word	0x000005dc
    22b4:	00000d09 	.word	0x00000d09

000022b8 <takeSample>:
#include <util.h>
#include <boardDefines.h>
#include <MS5803.h>

bool takeSample() {
    return SampleBool;
    22b8:	4b01      	ldr	r3, [pc, #4]	; (22c0 <takeSample+0x8>)
    22ba:	7818      	ldrb	r0, [r3, #0]
}
    22bc:	4770      	bx	lr
    22be:	46c0      	nop			; (mov r8, r8)
    22c0:	20000500 	.word	0x20000500

000022c4 <pullSample>:

void pullSample() {
    SampleBool = true;
    22c4:	2201      	movs	r2, #1
    22c6:	4b01      	ldr	r3, [pc, #4]	; (22cc <pullSample+0x8>)
    22c8:	701a      	strb	r2, [r3, #0]
}
    22ca:	4770      	bx	lr
    22cc:	20000500 	.word	0x20000500

000022d0 <sampleTick>:
}

volatile sample_t sample;

void sampleTick() {
    SampleBool = false;
    22d0:	2200      	movs	r2, #0
void sampleTick() {
    22d2:	b5f0      	push	{r4, r5, r6, r7, lr}
    SampleBool = false;
    22d4:	4bae      	ldr	r3, [pc, #696]	; (2590 <sampleTick+0x2c0>)
void sampleTick() {
    22d6:	b087      	sub	sp, #28

    // take last samples time to discover Dt before setting new time
    sample.tickDelta = millis() - sample.sampleTick;
    22d8:	4dae      	ldr	r5, [pc, #696]	; (2594 <sampleTick+0x2c4>)
    SampleBool = false;
    22da:	701a      	strb	r2, [r3, #0]
    sample.tickDelta = millis() - sample.sampleTick;
    22dc:	47a8      	blx	r5
    22de:	4cae      	ldr	r4, [pc, #696]	; (2598 <sampleTick+0x2c8>)
    22e0:	6863      	ldr	r3, [r4, #4]
    22e2:	1ac0      	subs	r0, r0, r3
    22e4:	b280      	uxth	r0, r0
    22e6:	8020      	strh	r0, [r4, #0]
    sample.sampleTick = millis();
    22e8:	47a8      	blx	r5

    sample.voltage.batV = adc_read(senseBatPin);
    22ea:	4dac      	ldr	r5, [pc, #688]	; (259c <sampleTick+0x2cc>)
    sample.sampleTick = millis();
    22ec:	6060      	str	r0, [r4, #4]
    sample.voltage.batV = adc_read(senseBatPin);
    22ee:	786b      	ldrb	r3, [r5, #1]
    22f0:	7828      	ldrb	r0, [r5, #0]
    22f2:	021b      	lsls	r3, r3, #8
    22f4:	4303      	orrs	r3, r0
    22f6:	78a8      	ldrb	r0, [r5, #2]
    22f8:	4ea9      	ldr	r6, [pc, #676]	; (25a0 <sampleTick+0x2d0>)
    22fa:	0400      	lsls	r0, r0, #16
    22fc:	4303      	orrs	r3, r0
    22fe:	78e8      	ldrb	r0, [r5, #3]
    2300:	7929      	ldrb	r1, [r5, #4]
    2302:	0600      	lsls	r0, r0, #24
    2304:	4318      	orrs	r0, r3
    2306:	47b0      	blx	r6
    2308:	8120      	strh	r0, [r4, #8]
    sample.voltage.batFloat = sample.voltage.batV * 0.0019;
    230a:	8920      	ldrh	r0, [r4, #8]
    230c:	4ba5      	ldr	r3, [pc, #660]	; (25a4 <sampleTick+0x2d4>)
    230e:	b280      	uxth	r0, r0
    2310:	4798      	blx	r3
    2312:	4aa5      	ldr	r2, [pc, #660]	; (25a8 <sampleTick+0x2d8>)
    2314:	4fa5      	ldr	r7, [pc, #660]	; (25ac <sampleTick+0x2dc>)
    2316:	4ba6      	ldr	r3, [pc, #664]	; (25b0 <sampleTick+0x2e0>)
    2318:	47b8      	blx	r7
    231a:	4ba6      	ldr	r3, [pc, #664]	; (25b4 <sampleTick+0x2e4>)
    231c:	4798      	blx	r3

    sample.voltage.senseA = adc_read(senseAPin);
    231e:	79ab      	ldrb	r3, [r5, #6]
    sample.voltage.batFloat = sample.voltage.batV * 0.0019;
    2320:	60e0      	str	r0, [r4, #12]
    sample.voltage.senseA = adc_read(senseAPin);
    2322:	7968      	ldrb	r0, [r5, #5]
    2324:	021b      	lsls	r3, r3, #8
    2326:	4303      	orrs	r3, r0
    2328:	79e8      	ldrb	r0, [r5, #7]
    232a:	7a69      	ldrb	r1, [r5, #9]
    232c:	0400      	lsls	r0, r0, #16
    232e:	4303      	orrs	r3, r0
    2330:	7a28      	ldrb	r0, [r5, #8]
    2332:	0600      	lsls	r0, r0, #24
    2334:	4318      	orrs	r0, r3
    2336:	47b0      	blx	r6
    sample.voltage.senseB = adc_read(senseBPin);
    2338:	7aeb      	ldrb	r3, [r5, #11]
    sample.voltage.senseA = adc_read(senseAPin);
    233a:	8220      	strh	r0, [r4, #16]
    sample.voltage.senseB = adc_read(senseBPin);
    233c:	7aa8      	ldrb	r0, [r5, #10]
    233e:	021b      	lsls	r3, r3, #8
    2340:	4303      	orrs	r3, r0
    2342:	7b28      	ldrb	r0, [r5, #12]
    2344:	7ba9      	ldrb	r1, [r5, #14]
    2346:	0400      	lsls	r0, r0, #16
    2348:	4303      	orrs	r3, r0
    234a:	7b68      	ldrb	r0, [r5, #13]
    234c:	0600      	lsls	r0, r0, #24
    234e:	4318      	orrs	r0, r3
    2350:	47b0      	blx	r6
    sample.voltage.senseC = adc_read(senseCPin);
    2352:	7c2b      	ldrb	r3, [r5, #16]
    sample.voltage.senseB = adc_read(senseBPin);
    2354:	8260      	strh	r0, [r4, #18]
    sample.voltage.senseC = adc_read(senseCPin);
    2356:	7be8      	ldrb	r0, [r5, #15]
    2358:	021b      	lsls	r3, r3, #8
    235a:	4303      	orrs	r3, r0
    235c:	7c68      	ldrb	r0, [r5, #17]
    235e:	7ce9      	ldrb	r1, [r5, #19]
    2360:	0400      	lsls	r0, r0, #16
    2362:	4303      	orrs	r3, r0
    2364:	7ca8      	ldrb	r0, [r5, #18]
    2366:	0600      	lsls	r0, r0, #24
    2368:	4318      	orrs	r0, r3
    236a:	47b0      	blx	r6
    sample.voltage.senseD = adc_read(senseDPin);
    236c:	7d6b      	ldrb	r3, [r5, #21]
    sample.voltage.senseC = adc_read(senseCPin);
    236e:	82a0      	strh	r0, [r4, #20]
    sample.voltage.senseD = adc_read(senseDPin);
    2370:	7d28      	ldrb	r0, [r5, #20]
    2372:	021b      	lsls	r3, r3, #8
    2374:	4303      	orrs	r3, r0
    2376:	7da8      	ldrb	r0, [r5, #22]
    2378:	7e29      	ldrb	r1, [r5, #24]
    237a:	0400      	lsls	r0, r0, #16
    237c:	4303      	orrs	r3, r0
    237e:	7de8      	ldrb	r0, [r5, #23]
    2380:	0600      	lsls	r0, r0, #24
    2382:	4318      	orrs	r0, r3
    2384:	47b0      	blx	r6

    sample.analogRaw = adc_read(analogAccelPin);
    2386:	7eab      	ldrb	r3, [r5, #26]
    sample.voltage.senseD = adc_read(senseDPin);
    2388:	82e0      	strh	r0, [r4, #22]
    sample.analogRaw = adc_read(analogAccelPin);
    238a:	7e68      	ldrb	r0, [r5, #25]
    238c:	021b      	lsls	r3, r3, #8
    238e:	4303      	orrs	r3, r0
    2390:	7ee8      	ldrb	r0, [r5, #27]
    2392:	7f69      	ldrb	r1, [r5, #29]
    2394:	0400      	lsls	r0, r0, #16
    2396:	4303      	orrs	r3, r0
    2398:	7f28      	ldrb	r0, [r5, #28]
    239a:	0600      	lsls	r0, r0, #24
    239c:	4318      	orrs	r0, r3
    239e:	47b0      	blx	r6
    23a0:	8320      	strh	r0, [r4, #24]
    sample.analogAccel = (sample.analogRaw - 3900) * -0.0154;
    23a2:	8b20      	ldrh	r0, [r4, #24]
    23a4:	4b84      	ldr	r3, [pc, #528]	; (25b8 <sampleTick+0x2e8>)
    23a6:	18c0      	adds	r0, r0, r3
    23a8:	4b7e      	ldr	r3, [pc, #504]	; (25a4 <sampleTick+0x2d4>)
    23aa:	4798      	blx	r3
    23ac:	4a83      	ldr	r2, [pc, #524]	; (25bc <sampleTick+0x2ec>)
    23ae:	4e7f      	ldr	r6, [pc, #508]	; (25ac <sampleTick+0x2dc>)
    23b0:	4b83      	ldr	r3, [pc, #524]	; (25c0 <sampleTick+0x2f0>)
    23b2:	47b0      	blx	r6
    23b4:	4b7f      	ldr	r3, [pc, #508]	; (25b4 <sampleTick+0x2e4>)
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    23b6:	2680      	movs	r6, #128	; 0x80
    23b8:	4798      	blx	r3
    uint8_t dummy_Tx = 0xFF;
    uint8_t dummy_rx;

    pinLow(cs_baro);
    // dummy_rx = spiDataTransfer(SPI2, 0x50);
    byteOut(spi2SCK,spi2MOSI, 0x50);
    23ba:	2250      	movs	r2, #80	; 0x50
    23bc:	0029      	movs	r1, r5
    23be:	4b81      	ldr	r3, [pc, #516]	; (25c4 <sampleTick+0x2f4>)
    23c0:	0236      	lsls	r6, r6, #8
    sample.analogAccel = (sample.analogRaw - 3900) * -0.0154;
    23c2:	61e0      	str	r0, [r4, #28]
    23c4:	615e      	str	r6, [r3, #20]
    byteOut(spi2SCK,spi2MOSI, 0x50);
    23c6:	002b      	movs	r3, r5
    23c8:	9200      	str	r2, [sp, #0]
    23ca:	7fea      	ldrb	r2, [r5, #31]
    23cc:	7fa8      	ldrb	r0, [r5, #30]
    23ce:	311e      	adds	r1, #30
    23d0:	0212      	lsls	r2, r2, #8
    23d2:	4310      	orrs	r0, r2
    23d4:	788a      	ldrb	r2, [r1, #2]
    23d6:	3323      	adds	r3, #35	; 0x23
    23d8:	0412      	lsls	r2, r2, #16
    23da:	4302      	orrs	r2, r0
    23dc:	78c8      	ldrb	r0, [r1, #3]
    23de:	781d      	ldrb	r5, [r3, #0]
    23e0:	0600      	lsls	r0, r0, #24
    23e2:	4310      	orrs	r0, r2
    23e4:	790a      	ldrb	r2, [r1, #4]
    23e6:	791f      	ldrb	r7, [r3, #4]
    23e8:	9203      	str	r2, [sp, #12]
    23ea:	785a      	ldrb	r2, [r3, #1]
    23ec:	0039      	movs	r1, r7
    23ee:	0212      	lsls	r2, r2, #8
    23f0:	432a      	orrs	r2, r5
    23f2:	789d      	ldrb	r5, [r3, #2]
    23f4:	9002      	str	r0, [sp, #8]
    23f6:	042d      	lsls	r5, r5, #16
    23f8:	432a      	orrs	r2, r5
    23fa:	78dd      	ldrb	r5, [r3, #3]
    23fc:	9b03      	ldr	r3, [sp, #12]
    23fe:	062d      	lsls	r5, r5, #24
    2400:	4315      	orrs	r5, r2
    2402:	9504      	str	r5, [sp, #16]
    2404:	0002      	movs	r2, r0
    2406:	0028      	movs	r0, r5
    2408:	4d6f      	ldr	r5, [pc, #444]	; (25c8 <sampleTick+0x2f8>)
    240a:	47a8      	blx	r5
    pinHigh(cs_baro);
    delay_us(500);
    240c:	20fa      	movs	r0, #250	; 0xfa
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    240e:	4b6d      	ldr	r3, [pc, #436]	; (25c4 <sampleTick+0x2f4>)
    2410:	0040      	lsls	r0, r0, #1
    2412:	619e      	str	r6, [r3, #24]
    2414:	4b6d      	ldr	r3, [pc, #436]	; (25cc <sampleTick+0x2fc>)
    2416:	4798      	blx	r3
    uint32_t tempRaw = readMS5803AdcResults();
    2418:	4b6d      	ldr	r3, [pc, #436]	; (25d0 <sampleTick+0x300>)
    241a:	4798      	blx	r3
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    241c:	4b69      	ldr	r3, [pc, #420]	; (25c4 <sampleTick+0x2f4>)
    241e:	9005      	str	r0, [sp, #20]
    2420:	615e      	str	r6, [r3, #20]

    pinLow(cs_baro);
    //  dummy_rx = spiDataTransfer(SPI2, 0x42);
    byteOut(spi2SCK,spi2MOSI, 0x46);
    2422:	2346      	movs	r3, #70	; 0x46
    2424:	9a02      	ldr	r2, [sp, #8]
    2426:	9300      	str	r3, [sp, #0]
    2428:	9804      	ldr	r0, [sp, #16]
    242a:	9b03      	ldr	r3, [sp, #12]
    242c:	0039      	movs	r1, r7
    242e:	4d66      	ldr	r5, [pc, #408]	; (25c8 <sampleTick+0x2f8>)
    2430:	47a8      	blx	r5
    2432:	2280      	movs	r2, #128	; 0x80
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    2434:	4b63      	ldr	r3, [pc, #396]	; (25c4 <sampleTick+0x2f4>)
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    2436:	00d2      	lsls	r2, r2, #3
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    2438:	619e      	str	r6, [r3, #24]
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    243a:	4b66      	ldr	r3, [pc, #408]	; (25d4 <sampleTick+0x304>)



// Accel data
    pinLow(cs_accel);
    dummy_rx = spiDataTransfer(SPI0, BMI055_X_ACC_LSB | BMI055_READ_REG);
    243c:	4f66      	ldr	r7, [pc, #408]	; (25d8 <sampleTick+0x308>)
    243e:	601a      	str	r2, [r3, #0]
    2440:	2182      	movs	r1, #130	; 0x82
    2442:	2000      	movs	r0, #0
    2444:	47b8      	blx	r7

    u16_t accelXRaw = spiDataTransfer(SPI0,dummy_Tx);
    2446:	21ff      	movs	r1, #255	; 0xff
    2448:	2000      	movs	r0, #0
    244a:	47b8      	blx	r7
    accelXRaw = accelXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    244c:	21ff      	movs	r1, #255	; 0xff
    u16_t accelXRaw = spiDataTransfer(SPI0,dummy_Tx);
    244e:	0005      	movs	r5, r0
    accelXRaw = accelXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    2450:	2000      	movs	r0, #0
    2452:	47b8      	blx	r7
    2454:	0200      	lsls	r0, r0, #8
    2456:	4305      	orrs	r5, r0
    2458:	b22b      	sxth	r3, r5
    u16_t accelYRaw = spiDataTransfer(SPI0,dummy_Tx);
    245a:	21ff      	movs	r1, #255	; 0xff
    245c:	2000      	movs	r0, #0
    accelXRaw = accelXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    245e:	9302      	str	r3, [sp, #8]
    u16_t accelYRaw = spiDataTransfer(SPI0,dummy_Tx);
    2460:	47b8      	blx	r7
    accelYRaw = accelYRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    2462:	21ff      	movs	r1, #255	; 0xff
    u16_t accelYRaw = spiDataTransfer(SPI0,dummy_Tx);
    2464:	0005      	movs	r5, r0
    accelYRaw = accelYRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    2466:	2000      	movs	r0, #0
    2468:	47b8      	blx	r7
    u16_t accelZRaw = spiDataTransfer(SPI0,dummy_Tx);
    246a:	21ff      	movs	r1, #255	; 0xff
    accelYRaw = accelYRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    246c:	0206      	lsls	r6, r0, #8
    u16_t accelZRaw = spiDataTransfer(SPI0,dummy_Tx);
    246e:	2000      	movs	r0, #0
    2470:	47b8      	blx	r7
    accelYRaw = accelYRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    2472:	432e      	orrs	r6, r5
    accelZRaw = accelZRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    2474:	21ff      	movs	r1, #255	; 0xff
    u16_t accelZRaw = spiDataTransfer(SPI0,dummy_Tx);
    2476:	0005      	movs	r5, r0
    accelZRaw = accelZRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    2478:	2000      	movs	r0, #0
    247a:	47b8      	blx	r7
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    247c:	2280      	movs	r2, #128	; 0x80
    247e:	4b57      	ldr	r3, [pc, #348]	; (25dc <sampleTick+0x30c>)
    2480:	00d2      	lsls	r2, r2, #3
    2482:	601a      	str	r2, [r3, #0]
    2484:	0200      	lsls	r0, r0, #8

    if (negativeX) {
        accelXint = accelXint | ~((1 << 16) - 1);
        accelXint =  accelXint >> 4;
    } else {
        accelXint =  accelXint >> 4;
    2486:	9b02      	ldr	r3, [sp, #8]
    accelZRaw = accelZRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    2488:	4305      	orrs	r5, r0
    248a:	b22d      	sxth	r5, r5
        accelXint =  accelXint >> 4;
    248c:	1118      	asrs	r0, r3, #4
    }
    if (negativeZ) {
        accelZint =  accelZint | ~((1 << 16) - 1);
        accelZint =  accelZint >> 4;
    } else {
        accelZint =  accelZint >> 4;
    248e:	112b      	asrs	r3, r5, #4
    2490:	9302      	str	r3, [sp, #8]
    }

    sample.accelX =  accelXint * BMI055_ACCEL_16G_DIV;
    2492:	4b44      	ldr	r3, [pc, #272]	; (25a4 <sampleTick+0x2d4>)
    2494:	4798      	blx	r3
    2496:	23fe      	movs	r3, #254	; 0xfe
    2498:	4d44      	ldr	r5, [pc, #272]	; (25ac <sampleTick+0x2dc>)
    249a:	2200      	movs	r2, #0
    249c:	059b      	lsls	r3, r3, #22
    249e:	47a8      	blx	r5
    24a0:	4b44      	ldr	r3, [pc, #272]	; (25b4 <sampleTick+0x2e4>)
    24a2:	4798      	blx	r3
    accelYRaw = accelYRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    24a4:	b236      	sxth	r6, r6
        accelYint =  accelYint >> 4;
    24a6:	1136      	asrs	r6, r6, #4
    sample.accelX =  accelXint * BMI055_ACCEL_16G_DIV;
    24a8:	6220      	str	r0, [r4, #32]
    sample.accelY =  accelYint * BMI055_ACCEL_16G_DIV;
    24aa:	4b3e      	ldr	r3, [pc, #248]	; (25a4 <sampleTick+0x2d4>)
    24ac:	0030      	movs	r0, r6
    24ae:	4798      	blx	r3
    24b0:	23fe      	movs	r3, #254	; 0xfe
    24b2:	2200      	movs	r2, #0
    24b4:	059b      	lsls	r3, r3, #22
    24b6:	47a8      	blx	r5
    24b8:	4b3e      	ldr	r3, [pc, #248]	; (25b4 <sampleTick+0x2e4>)
    24ba:	4798      	blx	r3
    sample.accelZ = -accelZint * BMI055_ACCEL_16G_DIV;
    24bc:	9b02      	ldr	r3, [sp, #8]
    sample.accelY =  accelYint * BMI055_ACCEL_16G_DIV;
    24be:	6260      	str	r0, [r4, #36]	; 0x24
    sample.accelZ = -accelZint * BMI055_ACCEL_16G_DIV;
    24c0:	4258      	negs	r0, r3
    24c2:	4b38      	ldr	r3, [pc, #224]	; (25a4 <sampleTick+0x2d4>)
    24c4:	4798      	blx	r3
    24c6:	23fe      	movs	r3, #254	; 0xfe
    24c8:	2200      	movs	r2, #0
    24ca:	059b      	lsls	r3, r3, #22
    24cc:	47a8      	blx	r5
    24ce:	4b39      	ldr	r3, [pc, #228]	; (25b4 <sampleTick+0x2e4>)
    24d0:	4798      	blx	r3
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    24d2:	2280      	movs	r2, #128	; 0x80
    24d4:	4b3b      	ldr	r3, [pc, #236]	; (25c4 <sampleTick+0x2f4>)
    24d6:	00d2      	lsls	r2, r2, #3
    24d8:	62a0      	str	r0, [r4, #40]	; 0x28


    // Gyro data
    pinLow(cs_gyro);
    dummy_rx = spiDataTransfer(SPI0, BMI055_X_GYRO_LSB | BMI055_READ_REG);
    24da:	2182      	movs	r1, #130	; 0x82
    24dc:	615a      	str	r2, [r3, #20]
    24de:	2000      	movs	r0, #0
    24e0:	47b8      	blx	r7
    u16_t gyroXRaw = spiDataTransfer(SPI0,dummy_Tx);
    24e2:	21ff      	movs	r1, #255	; 0xff
    24e4:	2000      	movs	r0, #0
    24e6:	47b8      	blx	r7
    gyroXRaw =  gyroXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    24e8:	21ff      	movs	r1, #255	; 0xff
    u16_t gyroXRaw = spiDataTransfer(SPI0,dummy_Tx);
    24ea:	0005      	movs	r5, r0
    gyroXRaw =  gyroXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    24ec:	2000      	movs	r0, #0
    24ee:	47b8      	blx	r7
    24f0:	0200      	lsls	r0, r0, #8
    24f2:	4305      	orrs	r5, r0
    24f4:	b22b      	sxth	r3, r5
    u16_t gyroYRaw = spiDataTransfer(SPI0,dummy_Tx);
    24f6:	21ff      	movs	r1, #255	; 0xff
    24f8:	2000      	movs	r0, #0
    gyroXRaw =  gyroXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    24fa:	9302      	str	r3, [sp, #8]
    u16_t gyroYRaw = spiDataTransfer(SPI0,dummy_Tx);
    24fc:	47b8      	blx	r7
    gyroYRaw =  gyroYRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    24fe:	21ff      	movs	r1, #255	; 0xff
    u16_t gyroYRaw = spiDataTransfer(SPI0,dummy_Tx);
    2500:	0006      	movs	r6, r0
    gyroYRaw =  gyroYRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    2502:	2000      	movs	r0, #0
    2504:	47b8      	blx	r7
    u16_t gyroZRaw = spiDataTransfer(SPI0,dummy_Tx);
    2506:	21ff      	movs	r1, #255	; 0xff
    gyroYRaw =  gyroYRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    2508:	0205      	lsls	r5, r0, #8
    u16_t gyroZRaw = spiDataTransfer(SPI0,dummy_Tx);
    250a:	2000      	movs	r0, #0
    250c:	47b8      	blx	r7
    gyroYRaw =  gyroYRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    250e:	4335      	orrs	r5, r6
    gyroZRaw =  gyroZRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    2510:	21ff      	movs	r1, #255	; 0xff
    u16_t gyroZRaw = spiDataTransfer(SPI0,dummy_Tx);
    2512:	0006      	movs	r6, r0
    gyroZRaw =  gyroZRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    2514:	2000      	movs	r0, #0
    2516:	47b8      	blx	r7
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    2518:	2280      	movs	r2, #128	; 0x80
    251a:	4b2a      	ldr	r3, [pc, #168]	; (25c4 <sampleTick+0x2f4>)
    251c:	00d2      	lsls	r2, r2, #3
    251e:	619a      	str	r2, [r3, #24]

    if (negativeXgyro) {
        gyroXint =  gyroXint | ~((1 << 16) - 1);
        gyroXint =  gyroXint >> 4;
    } else {
        gyroXint =  gyroXint >> 4;
    2520:	9b02      	ldr	r3, [sp, #8]
    gyroZRaw =  gyroZRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    2522:	0200      	lsls	r0, r0, #8
    2524:	4306      	orrs	r6, r0
        gyroXint =  gyroXint >> 4;
    2526:	1118      	asrs	r0, r3, #4
        gyroZint =  gyroZint >> 4;
    } else {
        gyroZint =  gyroZint >> 4;
    }

    sample.gyroX =  gyroXint * BMI055_GYRO_2000DS_DIV;
    2528:	4b1e      	ldr	r3, [pc, #120]	; (25a4 <sampleTick+0x2d4>)
    252a:	4798      	blx	r3
    252c:	23fe      	movs	r3, #254	; 0xfe
    252e:	4f1f      	ldr	r7, [pc, #124]	; (25ac <sampleTick+0x2dc>)
    2530:	2200      	movs	r2, #0
    2532:	059b      	lsls	r3, r3, #22
    2534:	47b8      	blx	r7
    2536:	4b1f      	ldr	r3, [pc, #124]	; (25b4 <sampleTick+0x2e4>)
    2538:	4798      	blx	r3
    gyroYRaw =  gyroYRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    253a:	b22d      	sxth	r5, r5
        gyroYint =  gyroYint >> 4;
    253c:	112d      	asrs	r5, r5, #4
    sample.gyroX =  gyroXint * BMI055_GYRO_2000DS_DIV;
    253e:	62e0      	str	r0, [r4, #44]	; 0x2c
    sample.gyroY =  gyroYint * BMI055_GYRO_2000DS_DIV;
    2540:	4b18      	ldr	r3, [pc, #96]	; (25a4 <sampleTick+0x2d4>)
    2542:	0028      	movs	r0, r5
    2544:	4798      	blx	r3
    2546:	23fe      	movs	r3, #254	; 0xfe
    2548:	2200      	movs	r2, #0
    254a:	059b      	lsls	r3, r3, #22
    254c:	47b8      	blx	r7
    254e:	4b19      	ldr	r3, [pc, #100]	; (25b4 <sampleTick+0x2e4>)
    2550:	4798      	blx	r3
    gyroZRaw =  gyroZRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    2552:	b236      	sxth	r6, r6
        gyroZint =  gyroZint >> 4;
    2554:	1136      	asrs	r6, r6, #4
    sample.gyroY =  gyroYint * BMI055_GYRO_2000DS_DIV;
    2556:	6320      	str	r0, [r4, #48]	; 0x30
    sample.gyroZ =  gyroZint * BMI055_GYRO_2000DS_DIV;
    2558:	4b12      	ldr	r3, [pc, #72]	; (25a4 <sampleTick+0x2d4>)
    255a:	0030      	movs	r0, r6
    255c:	4798      	blx	r3
    255e:	23fe      	movs	r3, #254	; 0xfe
    2560:	2200      	movs	r2, #0
    2562:	059b      	lsls	r3, r3, #22
    2564:	47b8      	blx	r7
    2566:	4b13      	ldr	r3, [pc, #76]	; (25b4 <sampleTick+0x2e4>)
    2568:	4798      	blx	r3

    //delay_us(800);
    delay_ms(5);
    256a:	4b1d      	ldr	r3, [pc, #116]	; (25e0 <sampleTick+0x310>)
    sample.gyroZ =  gyroZint * BMI055_GYRO_2000DS_DIV;
    256c:	6360      	str	r0, [r4, #52]	; 0x34
    delay_ms(5);
    256e:	2005      	movs	r0, #5
    2570:	4798      	blx	r3
    u32_t PressureRaw = readMS5803AdcResults();
    2572:	4b17      	ldr	r3, [pc, #92]	; (25d0 <sampleTick+0x300>)
    2574:	4798      	blx	r3
    ConvertPressureTemperature(PressureRaw, tempRaw, &sample.temperatureCelcus, &sample.pressureMbar);
    2576:	4a1b      	ldr	r2, [pc, #108]	; (25e4 <sampleTick+0x314>)
    2578:	9905      	ldr	r1, [sp, #20]
    257a:	4b1b      	ldr	r3, [pc, #108]	; (25e8 <sampleTick+0x318>)
    257c:	4d1b      	ldr	r5, [pc, #108]	; (25ec <sampleTick+0x31c>)
    257e:	47a8      	blx	r5
    sample.altitudefeet = paToFeetNOAA(sample.pressureMbar);
    2580:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    2582:	4b1b      	ldr	r3, [pc, #108]	; (25f0 <sampleTick+0x320>)
    2584:	4798      	blx	r3
    2586:	6420      	str	r0, [r4, #64]	; 0x40
    2588:	6461      	str	r1, [r4, #68]	; 0x44


}
    258a:	b007      	add	sp, #28
    258c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    258e:	46c0      	nop			; (mov r8, r8)
    2590:	20000500 	.word	0x20000500
    2594:	00000f99 	.word	0x00000f99
    2598:	20000788 	.word	0x20000788
    259c:	0000635f 	.word	0x0000635f
    25a0:	00000bdd 	.word	0x00000bdd
    25a4:	00005dcd 	.word	0x00005dcd
    25a8:	77318fc5 	.word	0x77318fc5
    25ac:	000051f9 	.word	0x000051f9
    25b0:	3f5f212d 	.word	0x3f5f212d
    25b4:	00005f65 	.word	0x00005f65
    25b8:	fffff0c4 	.word	0xfffff0c4
    25bc:	02de00d2 	.word	0x02de00d2
    25c0:	bf8f8a09 	.word	0xbf8f8a09
    25c4:	41004400 	.word	0x41004400
    25c8:	00000c49 	.word	0x00000c49
    25cc:	00000f25 	.word	0x00000f25
    25d0:	00000419 	.word	0x00000419
    25d4:	41004494 	.word	0x41004494
    25d8:	00002701 	.word	0x00002701
    25dc:	41004498 	.word	0x41004498
    25e0:	00000f51 	.word	0x00000f51
    25e4:	200007c4 	.word	0x200007c4
    25e8:	200007c0 	.word	0x200007c0
    25ec:	000004c1 	.word	0x000004c1
    25f0:	00000569 	.word	0x00000569

000025f4 <sercomClockEnable>:
#include <util.h>

void sercomClockEnable(SercomId id, uint32_t clock_channel, u8_t divider) {
    25f4:	b570      	push	{r4, r5, r6, lr}
    25f6:	0005      	movs	r5, r0
    // prevent this clock write from changing any other clocks
    PM->APBCMASK.reg |= 1 << (PM_APBCMASK_SERCOM0_Pos + id);
    25f8:	2301      	movs	r3, #1
    25fa:	1cae      	adds	r6, r5, #2
    25fc:	40b3      	lsls	r3, r6
void sercomClockEnable(SercomId id, uint32_t clock_channel, u8_t divider) {
    25fe:	000c      	movs	r4, r1
    PM->APBCMASK.reg |= 1 << (PM_APBCMASK_SERCOM0_Pos + id);
    2600:	490b      	ldr	r1, [pc, #44]	; (2630 <sercomClockEnable+0x3c>)
    2602:	6a08      	ldr	r0, [r1, #32]
    2604:	4303      	orrs	r3, r0
    2606:	620b      	str	r3, [r1, #32]


    if (clock_channel != 0) {
    2608:	2c00      	cmp	r4, #0
    260a:	d003      	beq.n	2614 <sercomClockEnable+0x20>
        // clock generators 3-8 have 8 division factor bits - DIV[7:0]
        gclkEnable(clock_channel, GCLK_SOURCE_DFLL48M, divider);
    260c:	2107      	movs	r1, #7
    260e:	0020      	movs	r0, r4
    2610:	4b08      	ldr	r3, [pc, #32]	; (2634 <sercomClockEnable+0x40>)
    2612:	4798      	blx	r3
    }


    // attach clock
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(clock_channel) |
    2614:	23f0      	movs	r3, #240	; 0xf0
    2616:	0224      	lsls	r4, r4, #8
    2618:	011b      	lsls	r3, r3, #4
    261a:	401c      	ands	r4, r3
    261c:	2380      	movs	r3, #128	; 0x80
    261e:	01db      	lsls	r3, r3, #7
    2620:	431c      	orrs	r4, r3
                        GCLK_CLKCTRL_ID(SERCOM0_GCLK_ID_CORE + id);
    2622:	233f      	movs	r3, #63	; 0x3f
    2624:	3514      	adds	r5, #20
    2626:	401d      	ands	r5, r3
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
    2628:	4b03      	ldr	r3, [pc, #12]	; (2638 <sercomClockEnable+0x44>)
                        GCLK_CLKCTRL_GEN(clock_channel) |
    262a:	4325      	orrs	r5, r4
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
    262c:	805d      	strh	r5, [r3, #2]
}
    262e:	bd70      	pop	{r4, r5, r6, pc}
    2630:	40000400 	.word	0x40000400
    2634:	00000ed5 	.word	0x00000ed5
    2638:	40000c00 	.word	0x40000c00

0000263c <sercomReset>:
    return (Sercom*) (0x42000800U + id * 1024);
    263c:	4b04      	ldr	r3, [pc, #16]	; (2650 <sercomReset+0x14>)
    263e:	0280      	lsls	r0, r0, #10
    2640:	18c0      	adds	r0, r0, r3


void sercomReset(SercomId id) {
    sercom(id)->SPI.CTRLA.reg = SERCOM_SPI_CTRLA_SWRST;
    2642:	2301      	movs	r3, #1
    2644:	6003      	str	r3, [r0, #0]
    while(sercom(id)->SPI.CTRLA.reg & SERCOM_SPI_CTRLA_SWRST);
    2646:	6802      	ldr	r2, [r0, #0]
    2648:	421a      	tst	r2, r3
    264a:	d1fc      	bne.n	2646 <sercomReset+0xa>
}
    264c:	4770      	bx	lr
    264e:	46c0      	nop			; (mov r8, r8)
    2650:	42000800 	.word	0x42000800

00002654 <sercomSpiMasterInit>:
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
}


void sercomSpiMasterInit(SercomId id, u32_t dipo, u32_t dopo, bool cpol, bool cpha, u8_t baud) {
    2654:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2656:	0004      	movs	r4, r0
    2658:	9300      	str	r3, [sp, #0]
    265a:	ab08      	add	r3, sp, #32
    265c:	781b      	ldrb	r3, [r3, #0]
    265e:	0016      	movs	r6, r2
    2660:	9301      	str	r3, [sp, #4]
    2662:	ab09      	add	r3, sp, #36	; 0x24
    2664:	781f      	ldrb	r7, [r3, #0]

    sercomReset(id);
    2666:	4b12      	ldr	r3, [pc, #72]	; (26b0 <sercomSpiMasterInit+0x5c>)
void sercomSpiMasterInit(SercomId id, u32_t dipo, u32_t dopo, bool cpol, bool cpha, u8_t baud) {
    2668:	000d      	movs	r5, r1
    sercomReset(id);
    266a:	4798      	blx	r3
    266c:	4b11      	ldr	r3, [pc, #68]	; (26b4 <sercomSpiMasterInit+0x60>)
    266e:	02a4      	lsls	r4, r4, #10
    2670:	18e4      	adds	r4, r4, r3

    sercom(id)->SPI.CTRLB.reg
        = SERCOM_SPI_CTRLB_RXEN;
    2672:	2380      	movs	r3, #128	; 0x80
    2674:	029b      	lsls	r3, r3, #10
    2676:	6063      	str	r3, [r4, #4]
    sercom(id)->SPI.BAUD.reg = baud;

    sercom(id)->SPI.CTRLA.reg
        = SERCOM_SPI_CTRLA_ENABLE
          | SERCOM_SPI_CTRLA_MODE_SPI_MASTER
          | SERCOM_SPI_CTRLA_DIPO(dipo)
    2678:	23c0      	movs	r3, #192	; 0xc0
    267a:	052d      	lsls	r5, r5, #20
    267c:	039b      	lsls	r3, r3, #14
    267e:	401d      	ands	r5, r3
          | SERCOM_SPI_CTRLA_DOPO(dopo)
    2680:	23c0      	movs	r3, #192	; 0xc0
    2682:	0436      	lsls	r6, r6, #16
    2684:	029b      	lsls	r3, r3, #10
    2686:	401e      	ands	r6, r3
    2688:	230e      	movs	r3, #14
    268a:	431e      	orrs	r6, r3
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
    268c:	9b00      	ldr	r3, [sp, #0]
    268e:	4335      	orrs	r5, r6
    2690:	1e5a      	subs	r2, r3, #1
    2692:	4193      	sbcs	r3, r2
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
    2694:	9a01      	ldr	r2, [sp, #4]
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
    2696:	075b      	lsls	r3, r3, #29
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
    2698:	1e51      	subs	r1, r2, #1
    269a:	418a      	sbcs	r2, r1
    269c:	431d      	orrs	r5, r3
    269e:	0712      	lsls	r2, r2, #28
    26a0:	4315      	orrs	r5, r2
    sercom(id)->SPI.BAUD.reg = baud;
    26a2:	7327      	strb	r7, [r4, #12]
        = SERCOM_SPI_CTRLA_ENABLE
    26a4:	6025      	str	r5, [r4, #0]
        };
    }
}

static inline void SPI_sync(SercomId id) {
    while  (sercom(id)->SPI.SYNCBUSY.bit.CTRLB);
    26a6:	69e3      	ldr	r3, [r4, #28]
    26a8:	075b      	lsls	r3, r3, #29
    26aa:	d4fc      	bmi.n	26a6 <sercomSpiMasterInit+0x52>

    SPI_sync(id);
}
    26ac:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    26ae:	46c0      	nop			; (mov r8, r8)
    26b0:	0000263d 	.word	0x0000263d
    26b4:	42000800 	.word	0x42000800

000026b8 <sercomUartInit>:




void sercomUartInit(SercomId id, u32_t rxpo, u32_t txpo, int32_t fBAUD) {
    26b8:	b570      	push	{r4, r5, r6, lr}
    26ba:	0006      	movs	r6, r0

    //float BAUD = 65536*(1-(16*(115200/(48000000/8))));
	
	
    sercomReset(id);
    26bc:	4b0c      	ldr	r3, [pc, #48]	; (26f0 <sercomUartInit+0x38>)
void sercomUartInit(SercomId id, u32_t rxpo, u32_t txpo, int32_t fBAUD) {
    26be:	000d      	movs	r5, r1
    26c0:	0014      	movs	r4, r2
    sercomReset(id);
    26c2:	4798      	blx	r3
    return (Sercom*) (0x42000800U + id * 1024);
    26c4:	4b0b      	ldr	r3, [pc, #44]	; (26f4 <sercomUartInit+0x3c>)
    26c6:	02b0      	lsls	r0, r6, #10
    26c8:	18c0      	adds	r0, r0, r3
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    26ca:	2304      	movs	r3, #4
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    26cc:	22c0      	movs	r2, #192	; 0xc0
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    26ce:	6003      	str	r3, [r0, #0]
    sercom(id)->USART.BAUD.reg = 45403;
    26d0:	4b09      	ldr	r3, [pc, #36]	; (26f8 <sercomUartInit+0x40>)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    26d2:	0392      	lsls	r2, r2, #14
    sercom(id)->USART.BAUD.reg = 45403;
    26d4:	8183      	strh	r3, [r0, #12]
        = SERCOM_USART_CTRLB_RXEN
    26d6:	23c0      	movs	r3, #192	; 0xc0
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    26d8:	052d      	lsls	r5, r5, #20
    26da:	4015      	ands	r5, r2
    26dc:	4a07      	ldr	r2, [pc, #28]	; (26fc <sercomUartInit+0x44>)
        = SERCOM_USART_CTRLB_RXEN
    26de:	029b      	lsls	r3, r3, #10
          | SERCOM_USART_CTRLA_TXPO(txpo)
    26e0:	0424      	lsls	r4, r4, #16
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    26e2:	432a      	orrs	r2, r5
          | SERCOM_USART_CTRLA_TXPO(txpo)
    26e4:	401c      	ands	r4, r3
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    26e6:	4322      	orrs	r2, r4
        = SERCOM_USART_CTRLB_RXEN
    26e8:	6043      	str	r3, [r0, #4]
        = SERCOM_USART_CTRLA_ENABLE
    26ea:	6002      	str	r2, [r0, #0]
}
    26ec:	bd70      	pop	{r4, r5, r6, pc}
    26ee:	46c0      	nop			; (mov r8, r8)
    26f0:	0000263d 	.word	0x0000263d
    26f4:	42000800 	.word	0x42000800
    26f8:	ffffb15b 	.word	0xffffb15b
    26fc:	40000006 	.word	0x40000006

00002700 <spiDataTransfer>:
    2700:	4b04      	ldr	r3, [pc, #16]	; (2714 <spiDataTransfer+0x14>)
    2702:	0280      	lsls	r0, r0, #10
    2704:	18c0      	adds	r0, r0, r3

u8_t spiDataTransfer(SercomId id, u8_t data) {
    sercom(id)->SPI.DATA.reg = data;
    2706:	6281      	str	r1, [r0, #40]	; 0x28
    while(sercom(id)->SPI.INTFLAG.bit.RXC == 0);
    2708:	7e03      	ldrb	r3, [r0, #24]
    270a:	075b      	lsls	r3, r3, #29
    270c:	d5fc      	bpl.n	2708 <spiDataTransfer+0x8>
    return sercom(id)->SPI.DATA.reg;
    270e:	6a80      	ldr	r0, [r0, #40]	; 0x28
    2710:	b2c0      	uxtb	r0, r0
}
    2712:	4770      	bx	lr
    2714:	42000800 	.word	0x42000800

00002718 <usartDataOut>:
    2718:	4b04      	ldr	r3, [pc, #16]	; (272c <usartDataOut+0x14>)
    271a:	0280      	lsls	r0, r0, #10
    271c:	18c0      	adds	r0, r0, r3
    while(sercom(id)->SPI.INTFLAG.bit.DRE == 0);
    return sercom(id)->SPI.DATA.reg;
}

void usartDataOut(SercomId id, u8_t data) {
    sercom(id)->USART.DATA.reg = data;
    271e:	b289      	uxth	r1, r1
    2720:	8501      	strh	r1, [r0, #40]	; 0x28
    while(sercom(id)->USART.INTFLAG.bit.DRE == 0);
    2722:	7e03      	ldrb	r3, [r0, #24]
    2724:	07db      	lsls	r3, r3, #31
    2726:	d5fc      	bpl.n	2722 <usartDataOut+0xa>
}
    2728:	4770      	bx	lr
    272a:	46c0      	nop			; (mov r8, r8)
    272c:	42000800 	.word	0x42000800

00002730 <usartDataIn>:
    2730:	4b02      	ldr	r3, [pc, #8]	; (273c <usartDataIn+0xc>)
    2732:	0280      	lsls	r0, r0, #10
    2734:	18c0      	adds	r0, r0, r3

u8_t usartDataIn(SercomId id) {
    return sercom(id)->USART.DATA.reg;
    2736:	8d00      	ldrh	r0, [r0, #40]	; 0x28
    2738:	b2c0      	uxtb	r0, r0
}
    273a:	4770      	bx	lr
    273c:	42000800 	.word	0x42000800

00002740 <attemptConnection>:
#include <util.h>
#include <boardDefines.h>


void attemptConnection() {
    2740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

    if (USARTconnectionAvaliable()) {
    2742:	4b2f      	ldr	r3, [pc, #188]	; (2800 <attemptConnection+0xc0>)
    2744:	4798      	blx	r3
    2746:	2800      	cmp	r0, #0
    2748:	d049      	beq.n	27de <attemptConnection+0x9e>

        flightState = flightIdle;
    274a:	2201      	movs	r2, #1
    274c:	4b2d      	ldr	r3, [pc, #180]	; (2804 <attemptConnection+0xc4>)
    274e:	701a      	strb	r2, [r3, #0]

        //wait for user to tell us what they want
        while(sercom(USART3)->SPI.INTFLAG.bit.RXC == 0);
    2750:	4b2d      	ldr	r3, [pc, #180]	; (2808 <attemptConnection+0xc8>)
    2752:	001f      	movs	r7, r3
    2754:	7e1a      	ldrb	r2, [r3, #24]
    2756:	0752      	lsls	r2, r2, #29
    2758:	d5fc      	bpl.n	2754 <attemptConnection+0x14>
        u8_t option = usartDataIn(USART3);
    275a:	2003      	movs	r0, #3
    275c:	4d2b      	ldr	r5, [pc, #172]	; (280c <attemptConnection+0xcc>)
    275e:	47a8      	blx	r5
    2760:	0004      	movs	r4, r0

        //user wants to read flight logs
        if (option == 0x4C) {
    2762:	284c      	cmp	r0, #76	; 0x4c
    2764:	d13c      	bne.n	27e0 <attemptConnection+0xa0>
    2766:	2400      	movs	r4, #0

            //send list of available flight logs
            for (u8_t flightLog = 0; flightLog < 11; ++flightLog) {

                if (isFlightLogged(flightLog)) {
    2768:	0020      	movs	r0, r4
    276a:	4b29      	ldr	r3, [pc, #164]	; (2810 <attemptConnection+0xd0>)
    276c:	4798      	blx	r3
    276e:	2800      	cmp	r0, #0
    2770:	d005      	beq.n	277e <attemptConnection+0x3e>

                    usartDataOut(USART3, flightLog + 0x30);
    2772:	0021      	movs	r1, r4
    2774:	3130      	adds	r1, #48	; 0x30
    2776:	b2c9      	uxtb	r1, r1
    2778:	2003      	movs	r0, #3
    277a:	4b26      	ldr	r3, [pc, #152]	; (2814 <attemptConnection+0xd4>)
    277c:	4798      	blx	r3
            for (u8_t flightLog = 0; flightLog < 11; ++flightLog) {
    277e:	3401      	adds	r4, #1
    2780:	b2e4      	uxtb	r4, r4
    2782:	2c0b      	cmp	r4, #11
    2784:	d1f0      	bne.n	2768 <attemptConnection+0x28>
                }
            }
            //done sending flight numbers
            usartDataOut(USART3, 0x0F);
    2786:	210f      	movs	r1, #15
    2788:	2003      	movs	r0, #3
    278a:	4e22      	ldr	r6, [pc, #136]	; (2814 <attemptConnection+0xd4>)
    278c:	47b0      	blx	r6

            //wait for user to pick which flight to read
            while(sercom(USART3)->SPI.INTFLAG.bit.RXC == 0);
    278e:	7e3b      	ldrb	r3, [r7, #24]
    2790:	075b      	lsls	r3, r3, #29
    2792:	d5fc      	bpl.n	278e <attemptConnection+0x4e>
            u8_t flightToRead = usartDataIn(USART3) - 0x30;
    2794:	2003      	movs	r0, #3
    2796:	47a8      	blx	r5
    2798:	3830      	subs	r0, #48	; 0x30
    279a:	b2c4      	uxtb	r4, r0


            u32_t flightStartAddress = getFlightStartAddress(flightToRead);
    279c:	0020      	movs	r0, r4
    279e:	4b1e      	ldr	r3, [pc, #120]	; (2818 <attemptConnection+0xd8>)
    27a0:	4798      	blx	r3
            u32_t flightEndAddress = FindFlightEndingAddress(flightToRead) - 0x100;
    27a2:	4b1e      	ldr	r3, [pc, #120]	; (281c <attemptConnection+0xdc>)
            u32_t flightStartAddress = getFlightStartAddress(flightToRead);
    27a4:	0007      	movs	r7, r0
            u32_t flightEndAddress = FindFlightEndingAddress(flightToRead) - 0x100;
    27a6:	0020      	movs	r0, r4
    27a8:	4798      	blx	r3
    27aa:	1e45      	subs	r5, r0, #1
    27ac:	3dff      	subs	r5, #255	; 0xff

            //inform of page numbers
            u16_t pagesToSend = (flightEndAddress  - flightStartAddress) >> 8;
    27ae:	1bec      	subs	r4, r5, r7
    27b0:	0a24      	lsrs	r4, r4, #8
            usartDataOut(USART3, pagesToSend >> 0);
    27b2:	b2e1      	uxtb	r1, r4
    27b4:	2003      	movs	r0, #3
    27b6:	47b0      	blx	r6
            usartDataOut(USART3, pagesToSend >> 8);
    27b8:	b2a1      	uxth	r1, r4
    27ba:	0a09      	lsrs	r1, r1, #8
    27bc:	2003      	movs	r0, #3
    27be:	47b0      	blx	r6

            //send flight end address for % full
            usartDataOut(USART3, flightEndAddress >> 0);
    27c0:	b2e9      	uxtb	r1, r5
    27c2:	2003      	movs	r0, #3
    27c4:	47b0      	blx	r6
            usartDataOut(USART3, flightEndAddress >> 8);
    27c6:	0a29      	lsrs	r1, r5, #8
    27c8:	b2c9      	uxtb	r1, r1
    27ca:	2003      	movs	r0, #3
    27cc:	47b0      	blx	r6
            usartDataOut(USART3, flightEndAddress >> 16);
    27ce:	0c29      	lsrs	r1, r5, #16
    27d0:	b2c9      	uxtb	r1, r1
    27d2:	2003      	movs	r0, #3
    27d4:	47b0      	blx	r6

            //USART out the flights pages
            sendTheasePagesToComputer(flightStartAddress, flightEndAddress);
    27d6:	0029      	movs	r1, r5
    27d8:	0038      	movs	r0, r7
    27da:	4b11      	ldr	r3, [pc, #68]	; (2820 <attemptConnection+0xe0>)
    27dc:	4798      	blx	r3


        }
    }

}
    27de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (option == 0x45) { // 'E'
    27e0:	2845      	cmp	r0, #69	; 0x45
    27e2:	d1fc      	bne.n	27de <attemptConnection+0x9e>
            AT25SFChipErase();
    27e4:	4b0f      	ldr	r3, [pc, #60]	; (2824 <attemptConnection+0xe4>)
    27e6:	4798      	blx	r3
            AT25SFHoldTillReady();
    27e8:	4b0f      	ldr	r3, [pc, #60]	; (2828 <attemptConnection+0xe8>)
    27ea:	4798      	blx	r3
            usartDataOut(USART3, 'E');
    27ec:	0021      	movs	r1, r4
    27ee:	2003      	movs	r0, #3
    27f0:	4b08      	ldr	r3, [pc, #32]	; (2814 <attemptConnection+0xd4>)
    27f2:	4798      	blx	r3
            beep(400);
    27f4:	20c8      	movs	r0, #200	; 0xc8
    27f6:	4b0d      	ldr	r3, [pc, #52]	; (282c <attemptConnection+0xec>)
    27f8:	0040      	lsls	r0, r0, #1
    27fa:	4798      	blx	r3
}
    27fc:	e7ef      	b.n	27de <attemptConnection+0x9e>
    27fe:	46c0      	nop			; (mov r8, r8)
    2800:	00000aed 	.word	0x00000aed
    2804:	20000640 	.word	0x20000640
    2808:	42001400 	.word	0x42001400
    280c:	00002731 	.word	0x00002731
    2810:	000021a9 	.word	0x000021a9
    2814:	00002719 	.word	0x00002719
    2818:	00002151 	.word	0x00002151
    281c:	0000217d 	.word	0x0000217d
    2820:	00000b21 	.word	0x00000b21
    2824:	0000021d 	.word	0x0000021d
    2828:	000001e5 	.word	0x000001e5
    282c:	00000d09 	.word	0x00000d09

00002830 <pow>:
    2830:	b5f0      	push	{r4, r5, r6, r7, lr}
    2832:	4657      	mov	r7, sl
    2834:	464e      	mov	r6, r9
    2836:	46de      	mov	lr, fp
    2838:	4645      	mov	r5, r8
    283a:	b5e0      	push	{r5, r6, r7, lr}
    283c:	b08f      	sub	sp, #60	; 0x3c
    283e:	001d      	movs	r5, r3
    2840:	0006      	movs	r6, r0
    2842:	000f      	movs	r7, r1
    2844:	0014      	movs	r4, r2
    2846:	f000 f99f 	bl	2b88 <__ieee754_pow>
    284a:	4bc7      	ldr	r3, [pc, #796]	; (2b68 <pow+0x338>)
    284c:	9000      	str	r0, [sp, #0]
    284e:	9101      	str	r1, [sp, #4]
    2850:	469a      	mov	sl, r3
    2852:	781b      	ldrb	r3, [r3, #0]
    2854:	b25b      	sxtb	r3, r3
    2856:	4699      	mov	r9, r3
    2858:	3301      	adds	r3, #1
    285a:	d03e      	beq.n	28da <pow+0xaa>
    285c:	0022      	movs	r2, r4
    285e:	002b      	movs	r3, r5
    2860:	0020      	movs	r0, r4
    2862:	0029      	movs	r1, r5
    2864:	f003 fa5e 	bl	5d24 <__aeabi_dcmpun>
    2868:	4683      	mov	fp, r0
    286a:	2800      	cmp	r0, #0
    286c:	d135      	bne.n	28da <pow+0xaa>
    286e:	0032      	movs	r2, r6
    2870:	003b      	movs	r3, r7
    2872:	0030      	movs	r0, r6
    2874:	0039      	movs	r1, r7
    2876:	f003 fa55 	bl	5d24 <__aeabi_dcmpun>
    287a:	2200      	movs	r2, #0
    287c:	9003      	str	r0, [sp, #12]
    287e:	2800      	cmp	r0, #0
    2880:	d000      	beq.n	2884 <pow+0x54>
    2882:	e0b6      	b.n	29f2 <pow+0x1c2>
    2884:	2300      	movs	r3, #0
    2886:	0030      	movs	r0, r6
    2888:	0039      	movs	r1, r7
    288a:	f001 f8d5 	bl	3a38 <__aeabi_dcmpeq>
    288e:	2800      	cmp	r0, #0
    2890:	d02c      	beq.n	28ec <pow+0xbc>
    2892:	2200      	movs	r2, #0
    2894:	2300      	movs	r3, #0
    2896:	0020      	movs	r0, r4
    2898:	0029      	movs	r1, r5
    289a:	f001 f8cd 	bl	3a38 <__aeabi_dcmpeq>
    289e:	4683      	mov	fp, r0
    28a0:	2800      	cmp	r0, #0
    28a2:	d100      	bne.n	28a6 <pow+0x76>
    28a4:	e077      	b.n	2996 <pow+0x166>
    28a6:	ab04      	add	r3, sp, #16
    28a8:	4698      	mov	r8, r3
    28aa:	2301      	movs	r3, #1
    28ac:	4642      	mov	r2, r8
    28ae:	9304      	str	r3, [sp, #16]
    28b0:	4bae      	ldr	r3, [pc, #696]	; (2b6c <pow+0x33c>)
    28b2:	6053      	str	r3, [r2, #4]
    28b4:	4643      	mov	r3, r8
    28b6:	9a03      	ldr	r2, [sp, #12]
    28b8:	611c      	str	r4, [r3, #16]
    28ba:	615d      	str	r5, [r3, #20]
    28bc:	621a      	str	r2, [r3, #32]
    28be:	609e      	str	r6, [r3, #8]
    28c0:	60df      	str	r7, [r3, #12]
    28c2:	4642      	mov	r2, r8
    28c4:	2300      	movs	r3, #0
    28c6:	2400      	movs	r4, #0
    28c8:	6193      	str	r3, [r2, #24]
    28ca:	61d4      	str	r4, [r2, #28]
    28cc:	464b      	mov	r3, r9
    28ce:	2b00      	cmp	r3, #0
    28d0:	d04d      	beq.n	296e <pow+0x13e>
    28d2:	2300      	movs	r3, #0
    28d4:	4ca6      	ldr	r4, [pc, #664]	; (2b70 <pow+0x340>)
    28d6:	9300      	str	r3, [sp, #0]
    28d8:	9401      	str	r4, [sp, #4]
    28da:	9800      	ldr	r0, [sp, #0]
    28dc:	9901      	ldr	r1, [sp, #4]
    28de:	b00f      	add	sp, #60	; 0x3c
    28e0:	bc3c      	pop	{r2, r3, r4, r5}
    28e2:	4690      	mov	r8, r2
    28e4:	4699      	mov	r9, r3
    28e6:	46a2      	mov	sl, r4
    28e8:	46ab      	mov	fp, r5
    28ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    28ec:	9800      	ldr	r0, [sp, #0]
    28ee:	9901      	ldr	r1, [sp, #4]
    28f0:	f000 ff64 	bl	37bc <finite>
    28f4:	4681      	mov	r9, r0
    28f6:	2800      	cmp	r0, #0
    28f8:	d100      	bne.n	28fc <pow+0xcc>
    28fa:	e09b      	b.n	2a34 <pow+0x204>
    28fc:	9800      	ldr	r0, [sp, #0]
    28fe:	9901      	ldr	r1, [sp, #4]
    2900:	2200      	movs	r2, #0
    2902:	2300      	movs	r3, #0
    2904:	f001 f898 	bl	3a38 <__aeabi_dcmpeq>
    2908:	2800      	cmp	r0, #0
    290a:	d0e6      	beq.n	28da <pow+0xaa>
    290c:	0030      	movs	r0, r6
    290e:	0039      	movs	r1, r7
    2910:	f000 ff54 	bl	37bc <finite>
    2914:	2800      	cmp	r0, #0
    2916:	d0e0      	beq.n	28da <pow+0xaa>
    2918:	0020      	movs	r0, r4
    291a:	0029      	movs	r1, r5
    291c:	f000 ff4e 	bl	37bc <finite>
    2920:	2800      	cmp	r0, #0
    2922:	d0da      	beq.n	28da <pow+0xaa>
    2924:	ab04      	add	r3, sp, #16
    2926:	4698      	mov	r8, r3
    2928:	2304      	movs	r3, #4
    292a:	4642      	mov	r2, r8
    292c:	9304      	str	r3, [sp, #16]
    292e:	4b8f      	ldr	r3, [pc, #572]	; (2b6c <pow+0x33c>)
    2930:	6114      	str	r4, [r2, #16]
    2932:	6155      	str	r5, [r2, #20]
    2934:	6053      	str	r3, [r2, #4]
    2936:	2300      	movs	r3, #0
    2938:	2400      	movs	r4, #0
    293a:	6213      	str	r3, [r2, #32]
    293c:	2300      	movs	r3, #0
    293e:	6193      	str	r3, [r2, #24]
    2940:	61d4      	str	r4, [r2, #28]
    2942:	4653      	mov	r3, sl
    2944:	781b      	ldrb	r3, [r3, #0]
    2946:	6096      	str	r6, [r2, #8]
    2948:	60d7      	str	r7, [r2, #12]
    294a:	b25b      	sxtb	r3, r3
    294c:	2b02      	cmp	r3, #2
    294e:	d004      	beq.n	295a <pow+0x12a>
    2950:	4640      	mov	r0, r8
    2952:	f000 ff3d 	bl	37d0 <matherr>
    2956:	2800      	cmp	r0, #0
    2958:	d10e      	bne.n	2978 <pow+0x148>
    295a:	f003 fc37 	bl	61cc <__errno>
    295e:	2322      	movs	r3, #34	; 0x22
    2960:	6003      	str	r3, [r0, #0]
    2962:	e009      	b.n	2978 <pow+0x148>
    2964:	4642      	mov	r2, r8
    2966:	2300      	movs	r3, #0
    2968:	2400      	movs	r4, #0
    296a:	6193      	str	r3, [r2, #24]
    296c:	61d4      	str	r4, [r2, #28]
    296e:	4640      	mov	r0, r8
    2970:	f000 ff2e 	bl	37d0 <matherr>
    2974:	2800      	cmp	r0, #0
    2976:	d037      	beq.n	29e8 <pow+0x1b8>
    2978:	4643      	mov	r3, r8
    297a:	6a1b      	ldr	r3, [r3, #32]
    297c:	2b00      	cmp	r3, #0
    297e:	d004      	beq.n	298a <pow+0x15a>
    2980:	f003 fc24 	bl	61cc <__errno>
    2984:	4643      	mov	r3, r8
    2986:	6a1b      	ldr	r3, [r3, #32]
    2988:	6003      	str	r3, [r0, #0]
    298a:	4643      	mov	r3, r8
    298c:	69dc      	ldr	r4, [r3, #28]
    298e:	699b      	ldr	r3, [r3, #24]
    2990:	9300      	str	r3, [sp, #0]
    2992:	9401      	str	r4, [sp, #4]
    2994:	e7a1      	b.n	28da <pow+0xaa>
    2996:	0020      	movs	r0, r4
    2998:	0029      	movs	r1, r5
    299a:	f000 ff0f 	bl	37bc <finite>
    299e:	2800      	cmp	r0, #0
    29a0:	d09b      	beq.n	28da <pow+0xaa>
    29a2:	2200      	movs	r2, #0
    29a4:	2300      	movs	r3, #0
    29a6:	0020      	movs	r0, r4
    29a8:	0029      	movs	r1, r5
    29aa:	f001 f84b 	bl	3a44 <__aeabi_dcmplt>
    29ae:	2800      	cmp	r0, #0
    29b0:	d100      	bne.n	29b4 <pow+0x184>
    29b2:	e792      	b.n	28da <pow+0xaa>
    29b4:	ab04      	add	r3, sp, #16
    29b6:	4698      	mov	r8, r3
    29b8:	2301      	movs	r3, #1
    29ba:	4642      	mov	r2, r8
    29bc:	9304      	str	r3, [sp, #16]
    29be:	4b6b      	ldr	r3, [pc, #428]	; (2b6c <pow+0x33c>)
    29c0:	6053      	str	r3, [r2, #4]
    29c2:	4643      	mov	r3, r8
    29c4:	465a      	mov	r2, fp
    29c6:	609e      	str	r6, [r3, #8]
    29c8:	60df      	str	r7, [r3, #12]
    29ca:	621a      	str	r2, [r3, #32]
    29cc:	611c      	str	r4, [r3, #16]
    29ce:	615d      	str	r5, [r3, #20]
    29d0:	4653      	mov	r3, sl
    29d2:	781b      	ldrb	r3, [r3, #0]
    29d4:	b25b      	sxtb	r3, r3
    29d6:	2b00      	cmp	r3, #0
    29d8:	d0c4      	beq.n	2964 <pow+0x134>
    29da:	2000      	movs	r0, #0
    29dc:	4642      	mov	r2, r8
    29de:	4965      	ldr	r1, [pc, #404]	; (2b74 <pow+0x344>)
    29e0:	6190      	str	r0, [r2, #24]
    29e2:	61d1      	str	r1, [r2, #28]
    29e4:	2b02      	cmp	r3, #2
    29e6:	d1c2      	bne.n	296e <pow+0x13e>
    29e8:	f003 fbf0 	bl	61cc <__errno>
    29ec:	2321      	movs	r3, #33	; 0x21
    29ee:	6003      	str	r3, [r0, #0]
    29f0:	e7c2      	b.n	2978 <pow+0x148>
    29f2:	2300      	movs	r3, #0
    29f4:	0020      	movs	r0, r4
    29f6:	0029      	movs	r1, r5
    29f8:	f001 f81e 	bl	3a38 <__aeabi_dcmpeq>
    29fc:	2800      	cmp	r0, #0
    29fe:	d100      	bne.n	2a02 <pow+0x1d2>
    2a00:	e76b      	b.n	28da <pow+0xaa>
    2a02:	ab04      	add	r3, sp, #16
    2a04:	4698      	mov	r8, r3
    2a06:	2301      	movs	r3, #1
    2a08:	4642      	mov	r2, r8
    2a0a:	9304      	str	r3, [sp, #16]
    2a0c:	4b57      	ldr	r3, [pc, #348]	; (2b6c <pow+0x33c>)
    2a0e:	4641      	mov	r1, r8
    2a10:	6053      	str	r3, [r2, #4]
    2a12:	4643      	mov	r3, r8
    2a14:	465a      	mov	r2, fp
    2a16:	621a      	str	r2, [r3, #32]
    2a18:	2200      	movs	r2, #0
    2a1a:	609e      	str	r6, [r3, #8]
    2a1c:	60df      	str	r7, [r3, #12]
    2a1e:	611c      	str	r4, [r3, #16]
    2a20:	615d      	str	r5, [r3, #20]
    2a22:	4b53      	ldr	r3, [pc, #332]	; (2b70 <pow+0x340>)
    2a24:	618a      	str	r2, [r1, #24]
    2a26:	61cb      	str	r3, [r1, #28]
    2a28:	9200      	str	r2, [sp, #0]
    2a2a:	9301      	str	r3, [sp, #4]
    2a2c:	464b      	mov	r3, r9
    2a2e:	2b02      	cmp	r3, #2
    2a30:	d19d      	bne.n	296e <pow+0x13e>
    2a32:	e752      	b.n	28da <pow+0xaa>
    2a34:	0030      	movs	r0, r6
    2a36:	0039      	movs	r1, r7
    2a38:	f000 fec0 	bl	37bc <finite>
    2a3c:	2800      	cmp	r0, #0
    2a3e:	d100      	bne.n	2a42 <pow+0x212>
    2a40:	e75c      	b.n	28fc <pow+0xcc>
    2a42:	0020      	movs	r0, r4
    2a44:	0029      	movs	r1, r5
    2a46:	f000 feb9 	bl	37bc <finite>
    2a4a:	2800      	cmp	r0, #0
    2a4c:	d100      	bne.n	2a50 <pow+0x220>
    2a4e:	e755      	b.n	28fc <pow+0xcc>
    2a50:	9800      	ldr	r0, [sp, #0]
    2a52:	9901      	ldr	r1, [sp, #4]
    2a54:	000b      	movs	r3, r1
    2a56:	0002      	movs	r2, r0
    2a58:	f003 f964 	bl	5d24 <__aeabi_dcmpun>
    2a5c:	ab04      	add	r3, sp, #16
    2a5e:	4698      	mov	r8, r3
    2a60:	2800      	cmp	r0, #0
    2a62:	d161      	bne.n	2b28 <pow+0x2f8>
    2a64:	2303      	movs	r3, #3
    2a66:	4642      	mov	r2, r8
    2a68:	9304      	str	r3, [sp, #16]
    2a6a:	4b40      	ldr	r3, [pc, #256]	; (2b6c <pow+0x33c>)
    2a6c:	6210      	str	r0, [r2, #32]
    2a6e:	6053      	str	r3, [r2, #4]
    2a70:	4653      	mov	r3, sl
    2a72:	781b      	ldrb	r3, [r3, #0]
    2a74:	6096      	str	r6, [r2, #8]
    2a76:	60d7      	str	r7, [r2, #12]
    2a78:	b25b      	sxtb	r3, r3
    2a7a:	6114      	str	r4, [r2, #16]
    2a7c:	6155      	str	r5, [r2, #20]
    2a7e:	4699      	mov	r9, r3
    2a80:	2b00      	cmp	r3, #0
    2a82:	d12f      	bne.n	2ae4 <pow+0x2b4>
    2a84:	22e0      	movs	r2, #224	; 0xe0
    2a86:	4641      	mov	r1, r8
    2a88:	4b3b      	ldr	r3, [pc, #236]	; (2b78 <pow+0x348>)
    2a8a:	0612      	lsls	r2, r2, #24
    2a8c:	618a      	str	r2, [r1, #24]
    2a8e:	61cb      	str	r3, [r1, #28]
    2a90:	0030      	movs	r0, r6
    2a92:	2200      	movs	r2, #0
    2a94:	2300      	movs	r3, #0
    2a96:	0039      	movs	r1, r7
    2a98:	f000 ffd4 	bl	3a44 <__aeabi_dcmplt>
    2a9c:	2800      	cmp	r0, #0
    2a9e:	d100      	bne.n	2aa2 <pow+0x272>
    2aa0:	e756      	b.n	2950 <pow+0x120>
    2aa2:	2200      	movs	r2, #0
    2aa4:	4b35      	ldr	r3, [pc, #212]	; (2b7c <pow+0x34c>)
    2aa6:	0020      	movs	r0, r4
    2aa8:	0029      	movs	r1, r5
    2aaa:	f002 fba5 	bl	51f8 <__aeabi_dmul>
    2aae:	0004      	movs	r4, r0
    2ab0:	000d      	movs	r5, r1
    2ab2:	f000 fe95 	bl	37e0 <rint>
    2ab6:	0002      	movs	r2, r0
    2ab8:	000b      	movs	r3, r1
    2aba:	0020      	movs	r0, r4
    2abc:	0029      	movs	r1, r5
    2abe:	f000 ffbb 	bl	3a38 <__aeabi_dcmpeq>
    2ac2:	2800      	cmp	r0, #0
    2ac4:	d105      	bne.n	2ad2 <pow+0x2a2>
    2ac6:	22e0      	movs	r2, #224	; 0xe0
    2ac8:	4b2d      	ldr	r3, [pc, #180]	; (2b80 <pow+0x350>)
    2aca:	0612      	lsls	r2, r2, #24
    2acc:	4641      	mov	r1, r8
    2ace:	618a      	str	r2, [r1, #24]
    2ad0:	61cb      	str	r3, [r1, #28]
    2ad2:	4653      	mov	r3, sl
    2ad4:	781b      	ldrb	r3, [r3, #0]
    2ad6:	b25b      	sxtb	r3, r3
    2ad8:	4699      	mov	r9, r3
    2ada:	464b      	mov	r3, r9
    2adc:	2b02      	cmp	r3, #2
    2ade:	d000      	beq.n	2ae2 <pow+0x2b2>
    2ae0:	e736      	b.n	2950 <pow+0x120>
    2ae2:	e73a      	b.n	295a <pow+0x12a>
    2ae4:	2200      	movs	r2, #0
    2ae6:	4641      	mov	r1, r8
    2ae8:	4b26      	ldr	r3, [pc, #152]	; (2b84 <pow+0x354>)
    2aea:	0030      	movs	r0, r6
    2aec:	618a      	str	r2, [r1, #24]
    2aee:	61cb      	str	r3, [r1, #28]
    2af0:	2200      	movs	r2, #0
    2af2:	2300      	movs	r3, #0
    2af4:	0039      	movs	r1, r7
    2af6:	f000 ffa5 	bl	3a44 <__aeabi_dcmplt>
    2afa:	2800      	cmp	r0, #0
    2afc:	d0ed      	beq.n	2ada <pow+0x2aa>
    2afe:	2200      	movs	r2, #0
    2b00:	4b1e      	ldr	r3, [pc, #120]	; (2b7c <pow+0x34c>)
    2b02:	0020      	movs	r0, r4
    2b04:	0029      	movs	r1, r5
    2b06:	f002 fb77 	bl	51f8 <__aeabi_dmul>
    2b0a:	0004      	movs	r4, r0
    2b0c:	000d      	movs	r5, r1
    2b0e:	f000 fe67 	bl	37e0 <rint>
    2b12:	0002      	movs	r2, r0
    2b14:	000b      	movs	r3, r1
    2b16:	0020      	movs	r0, r4
    2b18:	0029      	movs	r1, r5
    2b1a:	f000 ff8d 	bl	3a38 <__aeabi_dcmpeq>
    2b1e:	2800      	cmp	r0, #0
    2b20:	d1d7      	bne.n	2ad2 <pow+0x2a2>
    2b22:	2200      	movs	r2, #0
    2b24:	4b13      	ldr	r3, [pc, #76]	; (2b74 <pow+0x344>)
    2b26:	e7d1      	b.n	2acc <pow+0x29c>
    2b28:	2301      	movs	r3, #1
    2b2a:	4642      	mov	r2, r8
    2b2c:	9304      	str	r3, [sp, #16]
    2b2e:	4b0f      	ldr	r3, [pc, #60]	; (2b6c <pow+0x33c>)
    2b30:	6053      	str	r3, [r2, #4]
    2b32:	4643      	mov	r3, r8
    2b34:	464a      	mov	r2, r9
    2b36:	611c      	str	r4, [r3, #16]
    2b38:	615d      	str	r5, [r3, #20]
    2b3a:	621a      	str	r2, [r3, #32]
    2b3c:	609e      	str	r6, [r3, #8]
    2b3e:	60df      	str	r7, [r3, #12]
    2b40:	2400      	movs	r4, #0
    2b42:	4653      	mov	r3, sl
    2b44:	571c      	ldrsb	r4, [r3, r4]
    2b46:	2c00      	cmp	r4, #0
    2b48:	d100      	bne.n	2b4c <pow+0x31c>
    2b4a:	e70b      	b.n	2964 <pow+0x134>
    2b4c:	2300      	movs	r3, #0
    2b4e:	2200      	movs	r2, #0
    2b50:	0019      	movs	r1, r3
    2b52:	0010      	movs	r0, r2
    2b54:	f001 ff1c 	bl	4990 <__aeabi_ddiv>
    2b58:	4643      	mov	r3, r8
    2b5a:	6198      	str	r0, [r3, #24]
    2b5c:	61d9      	str	r1, [r3, #28]
    2b5e:	2c02      	cmp	r4, #2
    2b60:	d100      	bne.n	2b64 <pow+0x334>
    2b62:	e741      	b.n	29e8 <pow+0x1b8>
    2b64:	e703      	b.n	296e <pow+0x13e>
    2b66:	46c0      	nop			; (mov r8, r8)
    2b68:	20000070 	.word	0x20000070
    2b6c:	00006388 	.word	0x00006388
    2b70:	3ff00000 	.word	0x3ff00000
    2b74:	fff00000 	.word	0xfff00000
    2b78:	47efffff 	.word	0x47efffff
    2b7c:	3fe00000 	.word	0x3fe00000
    2b80:	c7efffff 	.word	0xc7efffff
    2b84:	7ff00000 	.word	0x7ff00000

00002b88 <__ieee754_pow>:
    2b88:	b5f0      	push	{r4, r5, r6, r7, lr}
    2b8a:	4657      	mov	r7, sl
    2b8c:	464e      	mov	r6, r9
    2b8e:	4645      	mov	r5, r8
    2b90:	46de      	mov	lr, fp
    2b92:	001c      	movs	r4, r3
    2b94:	0013      	movs	r3, r2
    2b96:	b5e0      	push	{r5, r6, r7, lr}
    2b98:	0065      	lsls	r5, r4, #1
    2b9a:	b091      	sub	sp, #68	; 0x44
    2b9c:	086d      	lsrs	r5, r5, #1
    2b9e:	9300      	str	r3, [sp, #0]
    2ba0:	9401      	str	r4, [sp, #4]
    2ba2:	0007      	movs	r7, r0
    2ba4:	000e      	movs	r6, r1
    2ba6:	4680      	mov	r8, r0
    2ba8:	4689      	mov	r9, r1
    2baa:	46a2      	mov	sl, r4
    2bac:	432b      	orrs	r3, r5
    2bae:	d031      	beq.n	2c14 <__ieee754_pow+0x8c>
    2bb0:	4b67      	ldr	r3, [pc, #412]	; (2d50 <__ieee754_pow+0x1c8>)
    2bb2:	0074      	lsls	r4, r6, #1
    2bb4:	0864      	lsrs	r4, r4, #1
    2bb6:	429c      	cmp	r4, r3
    2bb8:	dc27      	bgt.n	2c0a <__ieee754_pow+0x82>
    2bba:	d024      	beq.n	2c06 <__ieee754_pow+0x7e>
    2bbc:	429d      	cmp	r5, r3
    2bbe:	dc24      	bgt.n	2c0a <__ieee754_pow+0x82>
    2bc0:	4b63      	ldr	r3, [pc, #396]	; (2d50 <__ieee754_pow+0x1c8>)
    2bc2:	429d      	cmp	r5, r3
    2bc4:	d100      	bne.n	2bc8 <__ieee754_pow+0x40>
    2bc6:	e081      	b.n	2ccc <__ieee754_pow+0x144>
    2bc8:	2300      	movs	r3, #0
    2bca:	469b      	mov	fp, r3
    2bcc:	464b      	mov	r3, r9
    2bce:	2b00      	cmp	r3, #0
    2bd0:	da00      	bge.n	2bd4 <__ieee754_pow+0x4c>
    2bd2:	e07f      	b.n	2cd4 <__ieee754_pow+0x14c>
    2bd4:	2a00      	cmp	r2, #0
    2bd6:	d12c      	bne.n	2c32 <__ieee754_pow+0xaa>
    2bd8:	4b5d      	ldr	r3, [pc, #372]	; (2d50 <__ieee754_pow+0x1c8>)
    2bda:	429d      	cmp	r5, r3
    2bdc:	d100      	bne.n	2be0 <__ieee754_pow+0x58>
    2bde:	e097      	b.n	2d10 <__ieee754_pow+0x188>
    2be0:	4b5c      	ldr	r3, [pc, #368]	; (2d54 <__ieee754_pow+0x1cc>)
    2be2:	429d      	cmp	r5, r3
    2be4:	d066      	beq.n	2cb4 <__ieee754_pow+0x12c>
    2be6:	2380      	movs	r3, #128	; 0x80
    2be8:	05db      	lsls	r3, r3, #23
    2bea:	459a      	cmp	sl, r3
    2bec:	d100      	bne.n	2bf0 <__ieee754_pow+0x68>
    2bee:	e3b9      	b.n	3364 <__ieee754_pow+0x7dc>
    2bf0:	4b59      	ldr	r3, [pc, #356]	; (2d58 <__ieee754_pow+0x1d0>)
    2bf2:	459a      	cmp	sl, r3
    2bf4:	d11d      	bne.n	2c32 <__ieee754_pow+0xaa>
    2bf6:	464b      	mov	r3, r9
    2bf8:	2b00      	cmp	r3, #0
    2bfa:	db1a      	blt.n	2c32 <__ieee754_pow+0xaa>
    2bfc:	0038      	movs	r0, r7
    2bfe:	0031      	movs	r1, r6
    2c00:	f000 fcf8 	bl	35f4 <__ieee754_sqrt>
    2c04:	e008      	b.n	2c18 <__ieee754_pow+0x90>
    2c06:	2800      	cmp	r0, #0
    2c08:	d00d      	beq.n	2c26 <__ieee754_pow+0x9e>
    2c0a:	4b54      	ldr	r3, [pc, #336]	; (2d5c <__ieee754_pow+0x1d4>)
    2c0c:	469c      	mov	ip, r3
    2c0e:	4464      	add	r4, ip
    2c10:	4327      	orrs	r7, r4
    2c12:	d10a      	bne.n	2c2a <__ieee754_pow+0xa2>
    2c14:	2000      	movs	r0, #0
    2c16:	494f      	ldr	r1, [pc, #316]	; (2d54 <__ieee754_pow+0x1cc>)
    2c18:	b011      	add	sp, #68	; 0x44
    2c1a:	bc3c      	pop	{r2, r3, r4, r5}
    2c1c:	4690      	mov	r8, r2
    2c1e:	4699      	mov	r9, r3
    2c20:	46a2      	mov	sl, r4
    2c22:	46ab      	mov	fp, r5
    2c24:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2c26:	42a5      	cmp	r5, r4
    2c28:	ddca      	ble.n	2bc0 <__ieee754_pow+0x38>
    2c2a:	484d      	ldr	r0, [pc, #308]	; (2d60 <__ieee754_pow+0x1d8>)
    2c2c:	f000 fdd2 	bl	37d4 <nan>
    2c30:	e7f2      	b.n	2c18 <__ieee754_pow+0x90>
    2c32:	0038      	movs	r0, r7
    2c34:	0031      	movs	r1, r6
    2c36:	f000 fdbd 	bl	37b4 <fabs>
    2c3a:	4643      	mov	r3, r8
    2c3c:	2b00      	cmp	r3, #0
    2c3e:	d11d      	bne.n	2c7c <__ieee754_pow+0xf4>
    2c40:	2c00      	cmp	r4, #0
    2c42:	d004      	beq.n	2c4e <__ieee754_pow+0xc6>
    2c44:	4a43      	ldr	r2, [pc, #268]	; (2d54 <__ieee754_pow+0x1cc>)
    2c46:	00b3      	lsls	r3, r6, #2
    2c48:	089b      	lsrs	r3, r3, #2
    2c4a:	4293      	cmp	r3, r2
    2c4c:	d116      	bne.n	2c7c <__ieee754_pow+0xf4>
    2c4e:	4653      	mov	r3, sl
    2c50:	2b00      	cmp	r3, #0
    2c52:	da00      	bge.n	2c56 <__ieee754_pow+0xce>
    2c54:	e3c5      	b.n	33e2 <__ieee754_pow+0x85a>
    2c56:	464b      	mov	r3, r9
    2c58:	2b00      	cmp	r3, #0
    2c5a:	dadd      	bge.n	2c18 <__ieee754_pow+0x90>
    2c5c:	4b3f      	ldr	r3, [pc, #252]	; (2d5c <__ieee754_pow+0x1d4>)
    2c5e:	469c      	mov	ip, r3
    2c60:	465b      	mov	r3, fp
    2c62:	4464      	add	r4, ip
    2c64:	431c      	orrs	r4, r3
    2c66:	d101      	bne.n	2c6c <__ieee754_pow+0xe4>
    2c68:	f000 fc53 	bl	3512 <__ieee754_pow+0x98a>
    2c6c:	465b      	mov	r3, fp
    2c6e:	2b01      	cmp	r3, #1
    2c70:	d1d2      	bne.n	2c18 <__ieee754_pow+0x90>
    2c72:	2480      	movs	r4, #128	; 0x80
    2c74:	0624      	lsls	r4, r4, #24
    2c76:	190b      	adds	r3, r1, r4
    2c78:	0019      	movs	r1, r3
    2c7a:	e7cd      	b.n	2c18 <__ieee754_pow+0x90>
    2c7c:	0ff3      	lsrs	r3, r6, #31
    2c7e:	3b01      	subs	r3, #1
    2c80:	4698      	mov	r8, r3
    2c82:	465b      	mov	r3, fp
    2c84:	4642      	mov	r2, r8
    2c86:	4313      	orrs	r3, r2
    2c88:	d057      	beq.n	2d3a <__ieee754_pow+0x1b2>
    2c8a:	4b36      	ldr	r3, [pc, #216]	; (2d64 <__ieee754_pow+0x1dc>)
    2c8c:	429d      	cmp	r5, r3
    2c8e:	dd77      	ble.n	2d80 <__ieee754_pow+0x1f8>
    2c90:	4b35      	ldr	r3, [pc, #212]	; (2d68 <__ieee754_pow+0x1e0>)
    2c92:	429d      	cmp	r5, r3
    2c94:	dc00      	bgt.n	2c98 <__ieee754_pow+0x110>
    2c96:	e3b1      	b.n	33fc <__ieee754_pow+0x874>
    2c98:	4b34      	ldr	r3, [pc, #208]	; (2d6c <__ieee754_pow+0x1e4>)
    2c9a:	429c      	cmp	r4, r3
    2c9c:	dc00      	bgt.n	2ca0 <__ieee754_pow+0x118>
    2c9e:	e3a8      	b.n	33f2 <__ieee754_pow+0x86a>
    2ca0:	4653      	mov	r3, sl
    2ca2:	2b00      	cmp	r3, #0
    2ca4:	dd43      	ble.n	2d2e <__ieee754_pow+0x1a6>
    2ca6:	4a32      	ldr	r2, [pc, #200]	; (2d70 <__ieee754_pow+0x1e8>)
    2ca8:	4b32      	ldr	r3, [pc, #200]	; (2d74 <__ieee754_pow+0x1ec>)
    2caa:	0010      	movs	r0, r2
    2cac:	0019      	movs	r1, r3
    2cae:	f002 faa3 	bl	51f8 <__aeabi_dmul>
    2cb2:	e7b1      	b.n	2c18 <__ieee754_pow+0x90>
    2cb4:	4653      	mov	r3, sl
    2cb6:	0038      	movs	r0, r7
    2cb8:	0031      	movs	r1, r6
    2cba:	2b00      	cmp	r3, #0
    2cbc:	daac      	bge.n	2c18 <__ieee754_pow+0x90>
    2cbe:	003a      	movs	r2, r7
    2cc0:	0033      	movs	r3, r6
    2cc2:	2000      	movs	r0, #0
    2cc4:	4923      	ldr	r1, [pc, #140]	; (2d54 <__ieee754_pow+0x1cc>)
    2cc6:	f001 fe63 	bl	4990 <__aeabi_ddiv>
    2cca:	e7a5      	b.n	2c18 <__ieee754_pow+0x90>
    2ccc:	2a00      	cmp	r2, #0
    2cce:	d100      	bne.n	2cd2 <__ieee754_pow+0x14a>
    2cd0:	e77a      	b.n	2bc8 <__ieee754_pow+0x40>
    2cd2:	e79a      	b.n	2c0a <__ieee754_pow+0x82>
    2cd4:	4b28      	ldr	r3, [pc, #160]	; (2d78 <__ieee754_pow+0x1f0>)
    2cd6:	429d      	cmp	r5, r3
    2cd8:	dc2c      	bgt.n	2d34 <__ieee754_pow+0x1ac>
    2cda:	4b24      	ldr	r3, [pc, #144]	; (2d6c <__ieee754_pow+0x1e4>)
    2cdc:	429d      	cmp	r5, r3
    2cde:	dc00      	bgt.n	2ce2 <__ieee754_pow+0x15a>
    2ce0:	e778      	b.n	2bd4 <__ieee754_pow+0x4c>
    2ce2:	4926      	ldr	r1, [pc, #152]	; (2d7c <__ieee754_pow+0x1f4>)
    2ce4:	152b      	asrs	r3, r5, #20
    2ce6:	468c      	mov	ip, r1
    2ce8:	4463      	add	r3, ip
    2cea:	2b14      	cmp	r3, #20
    2cec:	dc01      	bgt.n	2cf2 <__ieee754_pow+0x16a>
    2cee:	f000 fbf3 	bl	34d8 <__ieee754_pow+0x950>
    2cf2:	2134      	movs	r1, #52	; 0x34
    2cf4:	1acb      	subs	r3, r1, r3
    2cf6:	9900      	ldr	r1, [sp, #0]
    2cf8:	40d9      	lsrs	r1, r3
    2cfa:	0008      	movs	r0, r1
    2cfc:	4098      	lsls	r0, r3
    2cfe:	4282      	cmp	r2, r0
    2d00:	d000      	beq.n	2d04 <__ieee754_pow+0x17c>
    2d02:	e767      	b.n	2bd4 <__ieee754_pow+0x4c>
    2d04:	2301      	movs	r3, #1
    2d06:	4019      	ands	r1, r3
    2d08:	3301      	adds	r3, #1
    2d0a:	1a5b      	subs	r3, r3, r1
    2d0c:	469b      	mov	fp, r3
    2d0e:	e761      	b.n	2bd4 <__ieee754_pow+0x4c>
    2d10:	4b12      	ldr	r3, [pc, #72]	; (2d5c <__ieee754_pow+0x1d4>)
    2d12:	18e3      	adds	r3, r4, r3
    2d14:	431f      	orrs	r7, r3
    2d16:	d100      	bne.n	2d1a <__ieee754_pow+0x192>
    2d18:	e77c      	b.n	2c14 <__ieee754_pow+0x8c>
    2d1a:	4b14      	ldr	r3, [pc, #80]	; (2d6c <__ieee754_pow+0x1e4>)
    2d1c:	429c      	cmp	r4, r3
    2d1e:	dc00      	bgt.n	2d22 <__ieee754_pow+0x19a>
    2d20:	e327      	b.n	3372 <__ieee754_pow+0x7ea>
    2d22:	9800      	ldr	r0, [sp, #0]
    2d24:	9901      	ldr	r1, [sp, #4]
    2d26:	4653      	mov	r3, sl
    2d28:	2b00      	cmp	r3, #0
    2d2a:	db00      	blt.n	2d2e <__ieee754_pow+0x1a6>
    2d2c:	e774      	b.n	2c18 <__ieee754_pow+0x90>
    2d2e:	2000      	movs	r0, #0
    2d30:	2100      	movs	r1, #0
    2d32:	e771      	b.n	2c18 <__ieee754_pow+0x90>
    2d34:	2302      	movs	r3, #2
    2d36:	469b      	mov	fp, r3
    2d38:	e74c      	b.n	2bd4 <__ieee754_pow+0x4c>
    2d3a:	003a      	movs	r2, r7
    2d3c:	0033      	movs	r3, r6
    2d3e:	0038      	movs	r0, r7
    2d40:	0031      	movs	r1, r6
    2d42:	f002 fcd9 	bl	56f8 <__aeabi_dsub>
    2d46:	0002      	movs	r2, r0
    2d48:	000b      	movs	r3, r1
    2d4a:	f001 fe21 	bl	4990 <__aeabi_ddiv>
    2d4e:	e763      	b.n	2c18 <__ieee754_pow+0x90>
    2d50:	7ff00000 	.word	0x7ff00000
    2d54:	3ff00000 	.word	0x3ff00000
    2d58:	3fe00000 	.word	0x3fe00000
    2d5c:	c0100000 	.word	0xc0100000
    2d60:	0000638c 	.word	0x0000638c
    2d64:	41e00000 	.word	0x41e00000
    2d68:	43f00000 	.word	0x43f00000
    2d6c:	3fefffff 	.word	0x3fefffff
    2d70:	8800759c 	.word	0x8800759c
    2d74:	7e37e43c 	.word	0x7e37e43c
    2d78:	433fffff 	.word	0x433fffff
    2d7c:	fffffc01 	.word	0xfffffc01
    2d80:	4be9      	ldr	r3, [pc, #932]	; (3128 <__ieee754_pow+0x5a0>)
    2d82:	2200      	movs	r2, #0
    2d84:	429c      	cmp	r4, r3
    2d86:	dc06      	bgt.n	2d96 <__ieee754_pow+0x20e>
    2d88:	2200      	movs	r2, #0
    2d8a:	4be8      	ldr	r3, [pc, #928]	; (312c <__ieee754_pow+0x5a4>)
    2d8c:	f002 fa34 	bl	51f8 <__aeabi_dmul>
    2d90:	2235      	movs	r2, #53	; 0x35
    2d92:	000c      	movs	r4, r1
    2d94:	4252      	negs	r2, r2
    2d96:	4de6      	ldr	r5, [pc, #920]	; (3130 <__ieee754_pow+0x5a8>)
    2d98:	1523      	asrs	r3, r4, #20
    2d9a:	46ac      	mov	ip, r5
    2d9c:	4463      	add	r3, ip
    2d9e:	4699      	mov	r9, r3
    2da0:	0324      	lsls	r4, r4, #12
    2da2:	4de4      	ldr	r5, [pc, #912]	; (3134 <__ieee754_pow+0x5ac>)
    2da4:	4be4      	ldr	r3, [pc, #912]	; (3138 <__ieee754_pow+0x5b0>)
    2da6:	0b24      	lsrs	r4, r4, #12
    2da8:	4491      	add	r9, r2
    2daa:	4325      	orrs	r5, r4
    2dac:	429c      	cmp	r4, r3
    2dae:	dd09      	ble.n	2dc4 <__ieee754_pow+0x23c>
    2db0:	4be2      	ldr	r3, [pc, #904]	; (313c <__ieee754_pow+0x5b4>)
    2db2:	429c      	cmp	r4, r3
    2db4:	dc00      	bgt.n	2db8 <__ieee754_pow+0x230>
    2db6:	e3b6      	b.n	3526 <__ieee754_pow+0x99e>
    2db8:	2301      	movs	r3, #1
    2dba:	469c      	mov	ip, r3
    2dbc:	4be0      	ldr	r3, [pc, #896]	; (3140 <__ieee754_pow+0x5b8>)
    2dbe:	44e1      	add	r9, ip
    2dc0:	469c      	mov	ip, r3
    2dc2:	4465      	add	r5, ip
    2dc4:	2300      	movs	r3, #0
    2dc6:	2400      	movs	r4, #0
    2dc8:	2200      	movs	r2, #0
    2dca:	9308      	str	r3, [sp, #32]
    2dcc:	9409      	str	r4, [sp, #36]	; 0x24
    2dce:	930c      	str	r3, [sp, #48]	; 0x30
    2dd0:	940d      	str	r4, [sp, #52]	; 0x34
    2dd2:	2400      	movs	r4, #0
    2dd4:	4bd7      	ldr	r3, [pc, #860]	; (3134 <__ieee754_pow+0x5ac>)
    2dd6:	9206      	str	r2, [sp, #24]
    2dd8:	9307      	str	r3, [sp, #28]
    2dda:	9a06      	ldr	r2, [sp, #24]
    2ddc:	9b07      	ldr	r3, [sp, #28]
    2dde:	0029      	movs	r1, r5
    2de0:	900a      	str	r0, [sp, #40]	; 0x28
    2de2:	910b      	str	r1, [sp, #44]	; 0x2c
    2de4:	f002 fc88 	bl	56f8 <__aeabi_dsub>
    2de8:	9a06      	ldr	r2, [sp, #24]
    2dea:	9b07      	ldr	r3, [sp, #28]
    2dec:	0006      	movs	r6, r0
    2dee:	000f      	movs	r7, r1
    2df0:	980a      	ldr	r0, [sp, #40]	; 0x28
    2df2:	990b      	ldr	r1, [sp, #44]	; 0x2c
    2df4:	f001 fabc 	bl	4370 <__aeabi_dadd>
    2df8:	0002      	movs	r2, r0
    2dfa:	000b      	movs	r3, r1
    2dfc:	2000      	movs	r0, #0
    2dfe:	49cd      	ldr	r1, [pc, #820]	; (3134 <__ieee754_pow+0x5ac>)
    2e00:	f001 fdc6 	bl	4990 <__aeabi_ddiv>
    2e04:	000a      	movs	r2, r1
    2e06:	0001      	movs	r1, r0
    2e08:	0013      	movs	r3, r2
    2e0a:	910e      	str	r1, [sp, #56]	; 0x38
    2e0c:	920f      	str	r2, [sp, #60]	; 0x3c
    2e0e:	0002      	movs	r2, r0
    2e10:	0039      	movs	r1, r7
    2e12:	0030      	movs	r0, r6
    2e14:	f002 f9f0 	bl	51f8 <__aeabi_dmul>
    2e18:	000a      	movs	r2, r1
    2e1a:	0001      	movs	r1, r0
    2e1c:	2080      	movs	r0, #128	; 0x80
    2e1e:	9104      	str	r1, [sp, #16]
    2e20:	9205      	str	r2, [sp, #20]
    2e22:	0013      	movs	r3, r2
    2e24:	2200      	movs	r2, #0
    2e26:	1069      	asrs	r1, r5, #1
    2e28:	2580      	movs	r5, #128	; 0x80
    2e2a:	0300      	lsls	r0, r0, #12
    2e2c:	4684      	mov	ip, r0
    2e2e:	9202      	str	r2, [sp, #8]
    2e30:	9303      	str	r3, [sp, #12]
    2e32:	2200      	movs	r2, #0
    2e34:	05ad      	lsls	r5, r5, #22
    2e36:	430d      	orrs	r5, r1
    2e38:	4465      	add	r5, ip
    2e3a:	192b      	adds	r3, r5, r4
    2e3c:	9802      	ldr	r0, [sp, #8]
    2e3e:	9903      	ldr	r1, [sp, #12]
    2e40:	0014      	movs	r4, r2
    2e42:	001d      	movs	r5, r3
    2e44:	f002 f9d8 	bl	51f8 <__aeabi_dmul>
    2e48:	0002      	movs	r2, r0
    2e4a:	000b      	movs	r3, r1
    2e4c:	0030      	movs	r0, r6
    2e4e:	0039      	movs	r1, r7
    2e50:	f002 fc52 	bl	56f8 <__aeabi_dsub>
    2e54:	9a06      	ldr	r2, [sp, #24]
    2e56:	9b07      	ldr	r3, [sp, #28]
    2e58:	0006      	movs	r6, r0
    2e5a:	000f      	movs	r7, r1
    2e5c:	0020      	movs	r0, r4
    2e5e:	0029      	movs	r1, r5
    2e60:	f002 fc4a 	bl	56f8 <__aeabi_dsub>
    2e64:	0002      	movs	r2, r0
    2e66:	000b      	movs	r3, r1
    2e68:	980a      	ldr	r0, [sp, #40]	; 0x28
    2e6a:	990b      	ldr	r1, [sp, #44]	; 0x2c
    2e6c:	f002 fc44 	bl	56f8 <__aeabi_dsub>
    2e70:	9a02      	ldr	r2, [sp, #8]
    2e72:	9b03      	ldr	r3, [sp, #12]
    2e74:	f002 f9c0 	bl	51f8 <__aeabi_dmul>
    2e78:	0002      	movs	r2, r0
    2e7a:	000b      	movs	r3, r1
    2e7c:	0030      	movs	r0, r6
    2e7e:	0039      	movs	r1, r7
    2e80:	f002 fc3a 	bl	56f8 <__aeabi_dsub>
    2e84:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    2e86:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    2e88:	f002 f9b6 	bl	51f8 <__aeabi_dmul>
    2e8c:	9d04      	ldr	r5, [sp, #16]
    2e8e:	9e05      	ldr	r6, [sp, #20]
    2e90:	9006      	str	r0, [sp, #24]
    2e92:	9107      	str	r1, [sp, #28]
    2e94:	002a      	movs	r2, r5
    2e96:	0033      	movs	r3, r6
    2e98:	0028      	movs	r0, r5
    2e9a:	0031      	movs	r1, r6
    2e9c:	f002 f9ac 	bl	51f8 <__aeabi_dmul>
    2ea0:	0006      	movs	r6, r0
    2ea2:	000f      	movs	r7, r1
    2ea4:	4aa7      	ldr	r2, [pc, #668]	; (3144 <__ieee754_pow+0x5bc>)
    2ea6:	4ba8      	ldr	r3, [pc, #672]	; (3148 <__ieee754_pow+0x5c0>)
    2ea8:	f002 f9a6 	bl	51f8 <__aeabi_dmul>
    2eac:	4aa7      	ldr	r2, [pc, #668]	; (314c <__ieee754_pow+0x5c4>)
    2eae:	4ba8      	ldr	r3, [pc, #672]	; (3150 <__ieee754_pow+0x5c8>)
    2eb0:	f001 fa5e 	bl	4370 <__aeabi_dadd>
    2eb4:	0032      	movs	r2, r6
    2eb6:	003b      	movs	r3, r7
    2eb8:	f002 f99e 	bl	51f8 <__aeabi_dmul>
    2ebc:	4aa5      	ldr	r2, [pc, #660]	; (3154 <__ieee754_pow+0x5cc>)
    2ebe:	4ba6      	ldr	r3, [pc, #664]	; (3158 <__ieee754_pow+0x5d0>)
    2ec0:	f001 fa56 	bl	4370 <__aeabi_dadd>
    2ec4:	0032      	movs	r2, r6
    2ec6:	003b      	movs	r3, r7
    2ec8:	f002 f996 	bl	51f8 <__aeabi_dmul>
    2ecc:	4aa3      	ldr	r2, [pc, #652]	; (315c <__ieee754_pow+0x5d4>)
    2ece:	4ba4      	ldr	r3, [pc, #656]	; (3160 <__ieee754_pow+0x5d8>)
    2ed0:	f001 fa4e 	bl	4370 <__aeabi_dadd>
    2ed4:	0032      	movs	r2, r6
    2ed6:	003b      	movs	r3, r7
    2ed8:	f002 f98e 	bl	51f8 <__aeabi_dmul>
    2edc:	4aa1      	ldr	r2, [pc, #644]	; (3164 <__ieee754_pow+0x5dc>)
    2ede:	4ba2      	ldr	r3, [pc, #648]	; (3168 <__ieee754_pow+0x5e0>)
    2ee0:	f001 fa46 	bl	4370 <__aeabi_dadd>
    2ee4:	0032      	movs	r2, r6
    2ee6:	003b      	movs	r3, r7
    2ee8:	f002 f986 	bl	51f8 <__aeabi_dmul>
    2eec:	4a9f      	ldr	r2, [pc, #636]	; (316c <__ieee754_pow+0x5e4>)
    2eee:	4ba0      	ldr	r3, [pc, #640]	; (3170 <__ieee754_pow+0x5e8>)
    2ef0:	f001 fa3e 	bl	4370 <__aeabi_dadd>
    2ef4:	0032      	movs	r2, r6
    2ef6:	0004      	movs	r4, r0
    2ef8:	000d      	movs	r5, r1
    2efa:	003b      	movs	r3, r7
    2efc:	0030      	movs	r0, r6
    2efe:	0039      	movs	r1, r7
    2f00:	f002 f97a 	bl	51f8 <__aeabi_dmul>
    2f04:	0002      	movs	r2, r0
    2f06:	000b      	movs	r3, r1
    2f08:	0020      	movs	r0, r4
    2f0a:	0029      	movs	r1, r5
    2f0c:	f002 f974 	bl	51f8 <__aeabi_dmul>
    2f10:	9e02      	ldr	r6, [sp, #8]
    2f12:	9f03      	ldr	r7, [sp, #12]
    2f14:	0004      	movs	r4, r0
    2f16:	000d      	movs	r5, r1
    2f18:	9804      	ldr	r0, [sp, #16]
    2f1a:	9905      	ldr	r1, [sp, #20]
    2f1c:	0032      	movs	r2, r6
    2f1e:	003b      	movs	r3, r7
    2f20:	f001 fa26 	bl	4370 <__aeabi_dadd>
    2f24:	9a06      	ldr	r2, [sp, #24]
    2f26:	9b07      	ldr	r3, [sp, #28]
    2f28:	f002 f966 	bl	51f8 <__aeabi_dmul>
    2f2c:	0022      	movs	r2, r4
    2f2e:	002b      	movs	r3, r5
    2f30:	f001 fa1e 	bl	4370 <__aeabi_dadd>
    2f34:	0032      	movs	r2, r6
    2f36:	900a      	str	r0, [sp, #40]	; 0x28
    2f38:	910b      	str	r1, [sp, #44]	; 0x2c
    2f3a:	003b      	movs	r3, r7
    2f3c:	0030      	movs	r0, r6
    2f3e:	0039      	movs	r1, r7
    2f40:	9602      	str	r6, [sp, #8]
    2f42:	9703      	str	r7, [sp, #12]
    2f44:	f002 f958 	bl	51f8 <__aeabi_dmul>
    2f48:	2200      	movs	r2, #0
    2f4a:	4b8a      	ldr	r3, [pc, #552]	; (3174 <__ieee754_pow+0x5ec>)
    2f4c:	0004      	movs	r4, r0
    2f4e:	000d      	movs	r5, r1
    2f50:	f001 fa0e 	bl	4370 <__aeabi_dadd>
    2f54:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    2f56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    2f58:	f001 fa0a 	bl	4370 <__aeabi_dadd>
    2f5c:	2600      	movs	r6, #0
    2f5e:	000f      	movs	r7, r1
    2f60:	0032      	movs	r2, r6
    2f62:	000b      	movs	r3, r1
    2f64:	9802      	ldr	r0, [sp, #8]
    2f66:	9903      	ldr	r1, [sp, #12]
    2f68:	f002 f946 	bl	51f8 <__aeabi_dmul>
    2f6c:	2200      	movs	r2, #0
    2f6e:	9002      	str	r0, [sp, #8]
    2f70:	9103      	str	r1, [sp, #12]
    2f72:	4b80      	ldr	r3, [pc, #512]	; (3174 <__ieee754_pow+0x5ec>)
    2f74:	0030      	movs	r0, r6
    2f76:	0039      	movs	r1, r7
    2f78:	f002 fbbe 	bl	56f8 <__aeabi_dsub>
    2f7c:	0022      	movs	r2, r4
    2f7e:	002b      	movs	r3, r5
    2f80:	f002 fbba 	bl	56f8 <__aeabi_dsub>
    2f84:	0002      	movs	r2, r0
    2f86:	000b      	movs	r3, r1
    2f88:	980a      	ldr	r0, [sp, #40]	; 0x28
    2f8a:	990b      	ldr	r1, [sp, #44]	; 0x2c
    2f8c:	f002 fbb4 	bl	56f8 <__aeabi_dsub>
    2f90:	9a04      	ldr	r2, [sp, #16]
    2f92:	9b05      	ldr	r3, [sp, #20]
    2f94:	f002 f930 	bl	51f8 <__aeabi_dmul>
    2f98:	0032      	movs	r2, r6
    2f9a:	0004      	movs	r4, r0
    2f9c:	000d      	movs	r5, r1
    2f9e:	9806      	ldr	r0, [sp, #24]
    2fa0:	9907      	ldr	r1, [sp, #28]
    2fa2:	003b      	movs	r3, r7
    2fa4:	f002 f928 	bl	51f8 <__aeabi_dmul>
    2fa8:	0002      	movs	r2, r0
    2faa:	000b      	movs	r3, r1
    2fac:	0020      	movs	r0, r4
    2fae:	0029      	movs	r1, r5
    2fb0:	f001 f9de 	bl	4370 <__aeabi_dadd>
    2fb4:	0004      	movs	r4, r0
    2fb6:	000d      	movs	r5, r1
    2fb8:	0002      	movs	r2, r0
    2fba:	000b      	movs	r3, r1
    2fbc:	9802      	ldr	r0, [sp, #8]
    2fbe:	9903      	ldr	r1, [sp, #12]
    2fc0:	f001 f9d6 	bl	4370 <__aeabi_dadd>
    2fc4:	2600      	movs	r6, #0
    2fc6:	22e0      	movs	r2, #224	; 0xe0
    2fc8:	4b6b      	ldr	r3, [pc, #428]	; (3178 <__ieee754_pow+0x5f0>)
    2fca:	0612      	lsls	r2, r2, #24
    2fcc:	0030      	movs	r0, r6
    2fce:	000f      	movs	r7, r1
    2fd0:	f002 f912 	bl	51f8 <__aeabi_dmul>
    2fd4:	9a02      	ldr	r2, [sp, #8]
    2fd6:	9b03      	ldr	r3, [sp, #12]
    2fd8:	9004      	str	r0, [sp, #16]
    2fda:	9105      	str	r1, [sp, #20]
    2fdc:	0030      	movs	r0, r6
    2fde:	0039      	movs	r1, r7
    2fe0:	f002 fb8a 	bl	56f8 <__aeabi_dsub>
    2fe4:	0002      	movs	r2, r0
    2fe6:	000b      	movs	r3, r1
    2fe8:	0020      	movs	r0, r4
    2fea:	0029      	movs	r1, r5
    2fec:	f002 fb84 	bl	56f8 <__aeabi_dsub>
    2ff0:	4a62      	ldr	r2, [pc, #392]	; (317c <__ieee754_pow+0x5f4>)
    2ff2:	4b61      	ldr	r3, [pc, #388]	; (3178 <__ieee754_pow+0x5f0>)
    2ff4:	f002 f900 	bl	51f8 <__aeabi_dmul>
    2ff8:	4a61      	ldr	r2, [pc, #388]	; (3180 <__ieee754_pow+0x5f8>)
    2ffa:	0004      	movs	r4, r0
    2ffc:	000d      	movs	r5, r1
    2ffe:	4b61      	ldr	r3, [pc, #388]	; (3184 <__ieee754_pow+0x5fc>)
    3000:	0030      	movs	r0, r6
    3002:	0039      	movs	r1, r7
    3004:	f002 f8f8 	bl	51f8 <__aeabi_dmul>
    3008:	0002      	movs	r2, r0
    300a:	000b      	movs	r3, r1
    300c:	0020      	movs	r0, r4
    300e:	0029      	movs	r1, r5
    3010:	f001 f9ae 	bl	4370 <__aeabi_dadd>
    3014:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    3016:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    3018:	f001 f9aa 	bl	4370 <__aeabi_dadd>
    301c:	0006      	movs	r6, r0
    301e:	4648      	mov	r0, r9
    3020:	000f      	movs	r7, r1
    3022:	f002 fed3 	bl	5dcc <__aeabi_i2d>
    3026:	0004      	movs	r4, r0
    3028:	000d      	movs	r5, r1
    302a:	9804      	ldr	r0, [sp, #16]
    302c:	9905      	ldr	r1, [sp, #20]
    302e:	0032      	movs	r2, r6
    3030:	003b      	movs	r3, r7
    3032:	f001 f99d 	bl	4370 <__aeabi_dadd>
    3036:	9a08      	ldr	r2, [sp, #32]
    3038:	9b09      	ldr	r3, [sp, #36]	; 0x24
    303a:	f001 f999 	bl	4370 <__aeabi_dadd>
    303e:	0022      	movs	r2, r4
    3040:	002b      	movs	r3, r5
    3042:	f001 f995 	bl	4370 <__aeabi_dadd>
    3046:	2000      	movs	r0, #0
    3048:	0022      	movs	r2, r4
    304a:	002b      	movs	r3, r5
    304c:	9002      	str	r0, [sp, #8]
    304e:	9103      	str	r1, [sp, #12]
    3050:	f002 fb52 	bl	56f8 <__aeabi_dsub>
    3054:	9a08      	ldr	r2, [sp, #32]
    3056:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3058:	f002 fb4e 	bl	56f8 <__aeabi_dsub>
    305c:	9a04      	ldr	r2, [sp, #16]
    305e:	9b05      	ldr	r3, [sp, #20]
    3060:	f002 fb4a 	bl	56f8 <__aeabi_dsub>
    3064:	0002      	movs	r2, r0
    3066:	000b      	movs	r3, r1
    3068:	0030      	movs	r0, r6
    306a:	0039      	movs	r1, r7
    306c:	f002 fb44 	bl	56f8 <__aeabi_dsub>
    3070:	9004      	str	r0, [sp, #16]
    3072:	9105      	str	r1, [sp, #20]
    3074:	465b      	mov	r3, fp
    3076:	4642      	mov	r2, r8
    3078:	3b01      	subs	r3, #1
    307a:	4313      	orrs	r3, r2
    307c:	d100      	bne.n	3080 <__ieee754_pow+0x4f8>
    307e:	e1ab      	b.n	33d8 <__ieee754_pow+0x850>
    3080:	2300      	movs	r3, #0
    3082:	4c2c      	ldr	r4, [pc, #176]	; (3134 <__ieee754_pow+0x5ac>)
    3084:	9306      	str	r3, [sp, #24]
    3086:	9407      	str	r4, [sp, #28]
    3088:	9800      	ldr	r0, [sp, #0]
    308a:	9901      	ldr	r1, [sp, #4]
    308c:	2600      	movs	r6, #0
    308e:	000b      	movs	r3, r1
    3090:	0032      	movs	r2, r6
    3092:	000f      	movs	r7, r1
    3094:	f002 fb30 	bl	56f8 <__aeabi_dsub>
    3098:	9a02      	ldr	r2, [sp, #8]
    309a:	9b03      	ldr	r3, [sp, #12]
    309c:	f002 f8ac 	bl	51f8 <__aeabi_dmul>
    30a0:	9a00      	ldr	r2, [sp, #0]
    30a2:	9b01      	ldr	r3, [sp, #4]
    30a4:	0004      	movs	r4, r0
    30a6:	000d      	movs	r5, r1
    30a8:	9804      	ldr	r0, [sp, #16]
    30aa:	9905      	ldr	r1, [sp, #20]
    30ac:	f002 f8a4 	bl	51f8 <__aeabi_dmul>
    30b0:	0002      	movs	r2, r0
    30b2:	000b      	movs	r3, r1
    30b4:	0020      	movs	r0, r4
    30b6:	0029      	movs	r1, r5
    30b8:	f001 f95a 	bl	4370 <__aeabi_dadd>
    30bc:	0004      	movs	r4, r0
    30be:	000d      	movs	r5, r1
    30c0:	9802      	ldr	r0, [sp, #8]
    30c2:	9903      	ldr	r1, [sp, #12]
    30c4:	0032      	movs	r2, r6
    30c6:	003b      	movs	r3, r7
    30c8:	9400      	str	r4, [sp, #0]
    30ca:	9501      	str	r5, [sp, #4]
    30cc:	f002 f894 	bl	51f8 <__aeabi_dmul>
    30d0:	0002      	movs	r2, r0
    30d2:	000b      	movs	r3, r1
    30d4:	0006      	movs	r6, r0
    30d6:	000f      	movs	r7, r1
    30d8:	0020      	movs	r0, r4
    30da:	0029      	movs	r1, r5
    30dc:	f001 f948 	bl	4370 <__aeabi_dadd>
    30e0:	4b29      	ldr	r3, [pc, #164]	; (3188 <__ieee754_pow+0x600>)
    30e2:	0004      	movs	r4, r0
    30e4:	000d      	movs	r5, r1
    30e6:	0002      	movs	r2, r0
    30e8:	468b      	mov	fp, r1
    30ea:	4299      	cmp	r1, r3
    30ec:	dc00      	bgt.n	30f0 <__ieee754_pow+0x568>
    30ee:	e14f      	b.n	3390 <__ieee754_pow+0x808>
    30f0:	4b26      	ldr	r3, [pc, #152]	; (318c <__ieee754_pow+0x604>)
    30f2:	18cb      	adds	r3, r1, r3
    30f4:	4303      	orrs	r3, r0
    30f6:	d000      	beq.n	30fa <__ieee754_pow+0x572>
    30f8:	e1e2      	b.n	34c0 <__ieee754_pow+0x938>
    30fa:	9800      	ldr	r0, [sp, #0]
    30fc:	9901      	ldr	r1, [sp, #4]
    30fe:	4a24      	ldr	r2, [pc, #144]	; (3190 <__ieee754_pow+0x608>)
    3100:	4b24      	ldr	r3, [pc, #144]	; (3194 <__ieee754_pow+0x60c>)
    3102:	f001 f935 	bl	4370 <__aeabi_dadd>
    3106:	0032      	movs	r2, r6
    3108:	9002      	str	r0, [sp, #8]
    310a:	9103      	str	r1, [sp, #12]
    310c:	003b      	movs	r3, r7
    310e:	0020      	movs	r0, r4
    3110:	0029      	movs	r1, r5
    3112:	f002 faf1 	bl	56f8 <__aeabi_dsub>
    3116:	0002      	movs	r2, r0
    3118:	000b      	movs	r3, r1
    311a:	9802      	ldr	r0, [sp, #8]
    311c:	9903      	ldr	r1, [sp, #12]
    311e:	f000 fca5 	bl	3a6c <__aeabi_dcmpgt>
    3122:	46aa      	mov	sl, r5
    3124:	e038      	b.n	3198 <__ieee754_pow+0x610>
    3126:	46c0      	nop			; (mov r8, r8)
    3128:	000fffff 	.word	0x000fffff
    312c:	43400000 	.word	0x43400000
    3130:	fffffc01 	.word	0xfffffc01
    3134:	3ff00000 	.word	0x3ff00000
    3138:	0003988e 	.word	0x0003988e
    313c:	000bb679 	.word	0x000bb679
    3140:	fff00000 	.word	0xfff00000
    3144:	4a454eef 	.word	0x4a454eef
    3148:	3fca7e28 	.word	0x3fca7e28
    314c:	93c9db65 	.word	0x93c9db65
    3150:	3fcd864a 	.word	0x3fcd864a
    3154:	a91d4101 	.word	0xa91d4101
    3158:	3fd17460 	.word	0x3fd17460
    315c:	518f264d 	.word	0x518f264d
    3160:	3fd55555 	.word	0x3fd55555
    3164:	db6fabff 	.word	0xdb6fabff
    3168:	3fdb6db6 	.word	0x3fdb6db6
    316c:	33333303 	.word	0x33333303
    3170:	3fe33333 	.word	0x3fe33333
    3174:	40080000 	.word	0x40080000
    3178:	3feec709 	.word	0x3feec709
    317c:	dc3a03fd 	.word	0xdc3a03fd
    3180:	145b01f5 	.word	0x145b01f5
    3184:	be3e2fe0 	.word	0xbe3e2fe0
    3188:	408fffff 	.word	0x408fffff
    318c:	bf700000 	.word	0xbf700000
    3190:	652b82fe 	.word	0x652b82fe
    3194:	3c971547 	.word	0x3c971547
    3198:	2800      	cmp	r0, #0
    319a:	d000      	beq.n	319e <__ieee754_pow+0x616>
    319c:	e190      	b.n	34c0 <__ieee754_pow+0x938>
    319e:	4aec      	ldr	r2, [pc, #944]	; (3550 <__ieee754_pow+0x9c8>)
    31a0:	4653      	mov	r3, sl
    31a2:	4694      	mov	ip, r2
    31a4:	2280      	movs	r2, #128	; 0x80
    31a6:	0352      	lsls	r2, r2, #13
    31a8:	0011      	movs	r1, r2
    31aa:	151b      	asrs	r3, r3, #20
    31ac:	4463      	add	r3, ip
    31ae:	4119      	asrs	r1, r3
    31b0:	000b      	movs	r3, r1
    31b2:	4690      	mov	r8, r2
    31b4:	4ae7      	ldr	r2, [pc, #924]	; (3554 <__ieee754_pow+0x9cc>)
    31b6:	445b      	add	r3, fp
    31b8:	4694      	mov	ip, r2
    31ba:	005c      	lsls	r4, r3, #1
    31bc:	0d64      	lsrs	r4, r4, #21
    31be:	4de6      	ldr	r5, [pc, #920]	; (3558 <__ieee754_pow+0x9d0>)
    31c0:	4464      	add	r4, ip
    31c2:	4125      	asrs	r5, r4
    31c4:	001a      	movs	r2, r3
    31c6:	43aa      	bics	r2, r5
    31c8:	0011      	movs	r1, r2
    31ca:	4642      	mov	r2, r8
    31cc:	031b      	lsls	r3, r3, #12
    31ce:	0b1b      	lsrs	r3, r3, #12
    31d0:	4313      	orrs	r3, r2
    31d2:	2214      	movs	r2, #20
    31d4:	1b14      	subs	r4, r2, r4
    31d6:	4123      	asrs	r3, r4
    31d8:	4699      	mov	r9, r3
    31da:	465b      	mov	r3, fp
    31dc:	2000      	movs	r0, #0
    31de:	2b00      	cmp	r3, #0
    31e0:	da00      	bge.n	31e4 <__ieee754_pow+0x65c>
    31e2:	e1b0      	b.n	3546 <__ieee754_pow+0x9be>
    31e4:	0002      	movs	r2, r0
    31e6:	000b      	movs	r3, r1
    31e8:	0030      	movs	r0, r6
    31ea:	0039      	movs	r1, r7
    31ec:	f002 fa84 	bl	56f8 <__aeabi_dsub>
    31f0:	000b      	movs	r3, r1
    31f2:	0002      	movs	r2, r0
    31f4:	0006      	movs	r6, r0
    31f6:	000f      	movs	r7, r1
    31f8:	9800      	ldr	r0, [sp, #0]
    31fa:	9901      	ldr	r1, [sp, #4]
    31fc:	f001 f8b8 	bl	4370 <__aeabi_dadd>
    3200:	464b      	mov	r3, r9
    3202:	051b      	lsls	r3, r3, #20
    3204:	000d      	movs	r5, r1
    3206:	4698      	mov	r8, r3
    3208:	2400      	movs	r4, #0
    320a:	2200      	movs	r2, #0
    320c:	4bd3      	ldr	r3, [pc, #844]	; (355c <__ieee754_pow+0x9d4>)
    320e:	0020      	movs	r0, r4
    3210:	0029      	movs	r1, r5
    3212:	f001 fff1 	bl	51f8 <__aeabi_dmul>
    3216:	0032      	movs	r2, r6
    3218:	9002      	str	r0, [sp, #8]
    321a:	9103      	str	r1, [sp, #12]
    321c:	003b      	movs	r3, r7
    321e:	0020      	movs	r0, r4
    3220:	0029      	movs	r1, r5
    3222:	f002 fa69 	bl	56f8 <__aeabi_dsub>
    3226:	0002      	movs	r2, r0
    3228:	000b      	movs	r3, r1
    322a:	9800      	ldr	r0, [sp, #0]
    322c:	9901      	ldr	r1, [sp, #4]
    322e:	f002 fa63 	bl	56f8 <__aeabi_dsub>
    3232:	4acb      	ldr	r2, [pc, #812]	; (3560 <__ieee754_pow+0x9d8>)
    3234:	4bcb      	ldr	r3, [pc, #812]	; (3564 <__ieee754_pow+0x9dc>)
    3236:	f001 ffdf 	bl	51f8 <__aeabi_dmul>
    323a:	4acb      	ldr	r2, [pc, #812]	; (3568 <__ieee754_pow+0x9e0>)
    323c:	0006      	movs	r6, r0
    323e:	000f      	movs	r7, r1
    3240:	4bca      	ldr	r3, [pc, #808]	; (356c <__ieee754_pow+0x9e4>)
    3242:	0020      	movs	r0, r4
    3244:	0029      	movs	r1, r5
    3246:	f001 ffd7 	bl	51f8 <__aeabi_dmul>
    324a:	0002      	movs	r2, r0
    324c:	000b      	movs	r3, r1
    324e:	0030      	movs	r0, r6
    3250:	0039      	movs	r1, r7
    3252:	f001 f88d 	bl	4370 <__aeabi_dadd>
    3256:	0004      	movs	r4, r0
    3258:	000d      	movs	r5, r1
    325a:	0002      	movs	r2, r0
    325c:	000b      	movs	r3, r1
    325e:	9802      	ldr	r0, [sp, #8]
    3260:	9903      	ldr	r1, [sp, #12]
    3262:	f001 f885 	bl	4370 <__aeabi_dadd>
    3266:	9a02      	ldr	r2, [sp, #8]
    3268:	9b03      	ldr	r3, [sp, #12]
    326a:	0006      	movs	r6, r0
    326c:	000f      	movs	r7, r1
    326e:	f002 fa43 	bl	56f8 <__aeabi_dsub>
    3272:	0002      	movs	r2, r0
    3274:	000b      	movs	r3, r1
    3276:	0020      	movs	r0, r4
    3278:	0029      	movs	r1, r5
    327a:	f002 fa3d 	bl	56f8 <__aeabi_dsub>
    327e:	0032      	movs	r2, r6
    3280:	9000      	str	r0, [sp, #0]
    3282:	9101      	str	r1, [sp, #4]
    3284:	003b      	movs	r3, r7
    3286:	0030      	movs	r0, r6
    3288:	0039      	movs	r1, r7
    328a:	f001 ffb5 	bl	51f8 <__aeabi_dmul>
    328e:	0004      	movs	r4, r0
    3290:	000d      	movs	r5, r1
    3292:	4ab7      	ldr	r2, [pc, #732]	; (3570 <__ieee754_pow+0x9e8>)
    3294:	4bb7      	ldr	r3, [pc, #732]	; (3574 <__ieee754_pow+0x9ec>)
    3296:	f001 ffaf 	bl	51f8 <__aeabi_dmul>
    329a:	4ab7      	ldr	r2, [pc, #732]	; (3578 <__ieee754_pow+0x9f0>)
    329c:	4bb7      	ldr	r3, [pc, #732]	; (357c <__ieee754_pow+0x9f4>)
    329e:	f002 fa2b 	bl	56f8 <__aeabi_dsub>
    32a2:	0022      	movs	r2, r4
    32a4:	002b      	movs	r3, r5
    32a6:	f001 ffa7 	bl	51f8 <__aeabi_dmul>
    32aa:	4ab5      	ldr	r2, [pc, #724]	; (3580 <__ieee754_pow+0x9f8>)
    32ac:	4bb5      	ldr	r3, [pc, #724]	; (3584 <__ieee754_pow+0x9fc>)
    32ae:	f001 f85f 	bl	4370 <__aeabi_dadd>
    32b2:	0022      	movs	r2, r4
    32b4:	002b      	movs	r3, r5
    32b6:	f001 ff9f 	bl	51f8 <__aeabi_dmul>
    32ba:	4ab3      	ldr	r2, [pc, #716]	; (3588 <__ieee754_pow+0xa00>)
    32bc:	4bb3      	ldr	r3, [pc, #716]	; (358c <__ieee754_pow+0xa04>)
    32be:	f002 fa1b 	bl	56f8 <__aeabi_dsub>
    32c2:	0022      	movs	r2, r4
    32c4:	002b      	movs	r3, r5
    32c6:	f001 ff97 	bl	51f8 <__aeabi_dmul>
    32ca:	4ab1      	ldr	r2, [pc, #708]	; (3590 <__ieee754_pow+0xa08>)
    32cc:	4bb1      	ldr	r3, [pc, #708]	; (3594 <__ieee754_pow+0xa0c>)
    32ce:	f001 f84f 	bl	4370 <__aeabi_dadd>
    32d2:	0022      	movs	r2, r4
    32d4:	002b      	movs	r3, r5
    32d6:	f001 ff8f 	bl	51f8 <__aeabi_dmul>
    32da:	0002      	movs	r2, r0
    32dc:	000b      	movs	r3, r1
    32de:	0030      	movs	r0, r6
    32e0:	0039      	movs	r1, r7
    32e2:	f002 fa09 	bl	56f8 <__aeabi_dsub>
    32e6:	0004      	movs	r4, r0
    32e8:	000d      	movs	r5, r1
    32ea:	0002      	movs	r2, r0
    32ec:	000b      	movs	r3, r1
    32ee:	0030      	movs	r0, r6
    32f0:	0039      	movs	r1, r7
    32f2:	f001 ff81 	bl	51f8 <__aeabi_dmul>
    32f6:	2380      	movs	r3, #128	; 0x80
    32f8:	9002      	str	r0, [sp, #8]
    32fa:	9103      	str	r1, [sp, #12]
    32fc:	2200      	movs	r2, #0
    32fe:	05db      	lsls	r3, r3, #23
    3300:	0020      	movs	r0, r4
    3302:	0029      	movs	r1, r5
    3304:	f002 f9f8 	bl	56f8 <__aeabi_dsub>
    3308:	0002      	movs	r2, r0
    330a:	000b      	movs	r3, r1
    330c:	9802      	ldr	r0, [sp, #8]
    330e:	9903      	ldr	r1, [sp, #12]
    3310:	f001 fb3e 	bl	4990 <__aeabi_ddiv>
    3314:	9a00      	ldr	r2, [sp, #0]
    3316:	9b01      	ldr	r3, [sp, #4]
    3318:	0004      	movs	r4, r0
    331a:	000d      	movs	r5, r1
    331c:	0030      	movs	r0, r6
    331e:	0039      	movs	r1, r7
    3320:	f001 ff6a 	bl	51f8 <__aeabi_dmul>
    3324:	9a00      	ldr	r2, [sp, #0]
    3326:	9b01      	ldr	r3, [sp, #4]
    3328:	f001 f822 	bl	4370 <__aeabi_dadd>
    332c:	0002      	movs	r2, r0
    332e:	000b      	movs	r3, r1
    3330:	0020      	movs	r0, r4
    3332:	0029      	movs	r1, r5
    3334:	f002 f9e0 	bl	56f8 <__aeabi_dsub>
    3338:	0032      	movs	r2, r6
    333a:	003b      	movs	r3, r7
    333c:	f002 f9dc 	bl	56f8 <__aeabi_dsub>
    3340:	0002      	movs	r2, r0
    3342:	000b      	movs	r3, r1
    3344:	2000      	movs	r0, #0
    3346:	4994      	ldr	r1, [pc, #592]	; (3598 <__ieee754_pow+0xa10>)
    3348:	f002 f9d6 	bl	56f8 <__aeabi_dsub>
    334c:	4643      	mov	r3, r8
    334e:	185b      	adds	r3, r3, r1
    3350:	151a      	asrs	r2, r3, #20
    3352:	2a00      	cmp	r2, #0
    3354:	dc00      	bgt.n	3358 <__ieee754_pow+0x7d0>
    3356:	e149      	b.n	35ec <__ieee754_pow+0xa64>
    3358:	0019      	movs	r1, r3
    335a:	9a06      	ldr	r2, [sp, #24]
    335c:	9b07      	ldr	r3, [sp, #28]
    335e:	f001 ff4b 	bl	51f8 <__aeabi_dmul>
    3362:	e459      	b.n	2c18 <__ieee754_pow+0x90>
    3364:	003a      	movs	r2, r7
    3366:	0033      	movs	r3, r6
    3368:	0038      	movs	r0, r7
    336a:	0031      	movs	r1, r6
    336c:	f001 ff44 	bl	51f8 <__aeabi_dmul>
    3370:	e452      	b.n	2c18 <__ieee754_pow+0x90>
    3372:	4653      	mov	r3, sl
    3374:	2b00      	cmp	r3, #0
    3376:	db00      	blt.n	337a <__ieee754_pow+0x7f2>
    3378:	e4d9      	b.n	2d2e <__ieee754_pow+0x1a6>
    337a:	9c00      	ldr	r4, [sp, #0]
    337c:	9d01      	ldr	r5, [sp, #4]
    337e:	2280      	movs	r2, #128	; 0x80
    3380:	0612      	lsls	r2, r2, #24
    3382:	002b      	movs	r3, r5
    3384:	4694      	mov	ip, r2
    3386:	4463      	add	r3, ip
    3388:	0020      	movs	r0, r4
    338a:	0019      	movs	r1, r3
    338c:	f7ff fc44 	bl	2c18 <__ieee754_pow+0x90>
    3390:	004b      	lsls	r3, r1, #1
    3392:	085b      	lsrs	r3, r3, #1
    3394:	469a      	mov	sl, r3
    3396:	4b81      	ldr	r3, [pc, #516]	; (359c <__ieee754_pow+0xa14>)
    3398:	459a      	cmp	sl, r3
    339a:	dc00      	bgt.n	339e <__ieee754_pow+0x816>
    339c:	e0b1      	b.n	3502 <__ieee754_pow+0x97a>
    339e:	4b80      	ldr	r3, [pc, #512]	; (35a0 <__ieee754_pow+0xa18>)
    33a0:	445b      	add	r3, fp
    33a2:	431a      	orrs	r2, r3
    33a4:	d10c      	bne.n	33c0 <__ieee754_pow+0x838>
    33a6:	0032      	movs	r2, r6
    33a8:	003b      	movs	r3, r7
    33aa:	f002 f9a5 	bl	56f8 <__aeabi_dsub>
    33ae:	0002      	movs	r2, r0
    33b0:	000b      	movs	r3, r1
    33b2:	9800      	ldr	r0, [sp, #0]
    33b4:	9901      	ldr	r1, [sp, #4]
    33b6:	f000 fb4f 	bl	3a58 <__aeabi_dcmple>
    33ba:	2800      	cmp	r0, #0
    33bc:	d100      	bne.n	33c0 <__ieee754_pow+0x838>
    33be:	e6ee      	b.n	319e <__ieee754_pow+0x616>
    33c0:	9806      	ldr	r0, [sp, #24]
    33c2:	9907      	ldr	r1, [sp, #28]
    33c4:	4a77      	ldr	r2, [pc, #476]	; (35a4 <__ieee754_pow+0xa1c>)
    33c6:	4b78      	ldr	r3, [pc, #480]	; (35a8 <__ieee754_pow+0xa20>)
    33c8:	f001 ff16 	bl	51f8 <__aeabi_dmul>
    33cc:	4a75      	ldr	r2, [pc, #468]	; (35a4 <__ieee754_pow+0xa1c>)
    33ce:	4b76      	ldr	r3, [pc, #472]	; (35a8 <__ieee754_pow+0xa20>)
    33d0:	f001 ff12 	bl	51f8 <__aeabi_dmul>
    33d4:	f7ff fc20 	bl	2c18 <__ieee754_pow+0x90>
    33d8:	2300      	movs	r3, #0
    33da:	4c74      	ldr	r4, [pc, #464]	; (35ac <__ieee754_pow+0xa24>)
    33dc:	9306      	str	r3, [sp, #24]
    33de:	9407      	str	r4, [sp, #28]
    33e0:	e652      	b.n	3088 <__ieee754_pow+0x500>
    33e2:	0002      	movs	r2, r0
    33e4:	000b      	movs	r3, r1
    33e6:	2000      	movs	r0, #0
    33e8:	496b      	ldr	r1, [pc, #428]	; (3598 <__ieee754_pow+0xa10>)
    33ea:	f001 fad1 	bl	4990 <__aeabi_ddiv>
    33ee:	f7ff fc32 	bl	2c56 <__ieee754_pow+0xce>
    33f2:	4653      	mov	r3, sl
    33f4:	2b00      	cmp	r3, #0
    33f6:	db00      	blt.n	33fa <__ieee754_pow+0x872>
    33f8:	e499      	b.n	2d2e <__ieee754_pow+0x1a6>
    33fa:	e454      	b.n	2ca6 <__ieee754_pow+0x11e>
    33fc:	4b6c      	ldr	r3, [pc, #432]	; (35b0 <__ieee754_pow+0xa28>)
    33fe:	429c      	cmp	r4, r3
    3400:	ddf7      	ble.n	33f2 <__ieee754_pow+0x86a>
    3402:	4b65      	ldr	r3, [pc, #404]	; (3598 <__ieee754_pow+0xa10>)
    3404:	429c      	cmp	r4, r3
    3406:	dd00      	ble.n	340a <__ieee754_pow+0x882>
    3408:	e44a      	b.n	2ca0 <__ieee754_pow+0x118>
    340a:	2200      	movs	r2, #0
    340c:	4b62      	ldr	r3, [pc, #392]	; (3598 <__ieee754_pow+0xa10>)
    340e:	f002 f973 	bl	56f8 <__aeabi_dsub>
    3412:	22c0      	movs	r2, #192	; 0xc0
    3414:	4b67      	ldr	r3, [pc, #412]	; (35b4 <__ieee754_pow+0xa2c>)
    3416:	05d2      	lsls	r2, r2, #23
    3418:	0004      	movs	r4, r0
    341a:	000d      	movs	r5, r1
    341c:	f001 feec 	bl	51f8 <__aeabi_dmul>
    3420:	4a65      	ldr	r2, [pc, #404]	; (35b8 <__ieee754_pow+0xa30>)
    3422:	0006      	movs	r6, r0
    3424:	000f      	movs	r7, r1
    3426:	4b65      	ldr	r3, [pc, #404]	; (35bc <__ieee754_pow+0xa34>)
    3428:	0020      	movs	r0, r4
    342a:	0029      	movs	r1, r5
    342c:	f001 fee4 	bl	51f8 <__aeabi_dmul>
    3430:	2200      	movs	r2, #0
    3432:	9002      	str	r0, [sp, #8]
    3434:	9103      	str	r1, [sp, #12]
    3436:	4b62      	ldr	r3, [pc, #392]	; (35c0 <__ieee754_pow+0xa38>)
    3438:	0020      	movs	r0, r4
    343a:	0029      	movs	r1, r5
    343c:	f001 fedc 	bl	51f8 <__aeabi_dmul>
    3440:	0002      	movs	r2, r0
    3442:	000b      	movs	r3, r1
    3444:	485f      	ldr	r0, [pc, #380]	; (35c4 <__ieee754_pow+0xa3c>)
    3446:	4960      	ldr	r1, [pc, #384]	; (35c8 <__ieee754_pow+0xa40>)
    3448:	f002 f956 	bl	56f8 <__aeabi_dsub>
    344c:	0022      	movs	r2, r4
    344e:	002b      	movs	r3, r5
    3450:	f001 fed2 	bl	51f8 <__aeabi_dmul>
    3454:	0002      	movs	r2, r0
    3456:	000b      	movs	r3, r1
    3458:	2000      	movs	r0, #0
    345a:	495c      	ldr	r1, [pc, #368]	; (35cc <__ieee754_pow+0xa44>)
    345c:	f002 f94c 	bl	56f8 <__aeabi_dsub>
    3460:	0022      	movs	r2, r4
    3462:	9004      	str	r0, [sp, #16]
    3464:	9105      	str	r1, [sp, #20]
    3466:	002b      	movs	r3, r5
    3468:	0020      	movs	r0, r4
    346a:	0029      	movs	r1, r5
    346c:	f001 fec4 	bl	51f8 <__aeabi_dmul>
    3470:	0002      	movs	r2, r0
    3472:	000b      	movs	r3, r1
    3474:	9804      	ldr	r0, [sp, #16]
    3476:	9905      	ldr	r1, [sp, #20]
    3478:	f001 febe 	bl	51f8 <__aeabi_dmul>
    347c:	4a54      	ldr	r2, [pc, #336]	; (35d0 <__ieee754_pow+0xa48>)
    347e:	4b4d      	ldr	r3, [pc, #308]	; (35b4 <__ieee754_pow+0xa2c>)
    3480:	f001 feba 	bl	51f8 <__aeabi_dmul>
    3484:	0002      	movs	r2, r0
    3486:	000b      	movs	r3, r1
    3488:	9802      	ldr	r0, [sp, #8]
    348a:	9903      	ldr	r1, [sp, #12]
    348c:	f002 f934 	bl	56f8 <__aeabi_dsub>
    3490:	0002      	movs	r2, r0
    3492:	000b      	movs	r3, r1
    3494:	0004      	movs	r4, r0
    3496:	000d      	movs	r5, r1
    3498:	0030      	movs	r0, r6
    349a:	0039      	movs	r1, r7
    349c:	f000 ff68 	bl	4370 <__aeabi_dadd>
    34a0:	2000      	movs	r0, #0
    34a2:	0032      	movs	r2, r6
    34a4:	003b      	movs	r3, r7
    34a6:	9002      	str	r0, [sp, #8]
    34a8:	9103      	str	r1, [sp, #12]
    34aa:	f002 f925 	bl	56f8 <__aeabi_dsub>
    34ae:	0002      	movs	r2, r0
    34b0:	000b      	movs	r3, r1
    34b2:	0020      	movs	r0, r4
    34b4:	0029      	movs	r1, r5
    34b6:	f002 f91f 	bl	56f8 <__aeabi_dsub>
    34ba:	9004      	str	r0, [sp, #16]
    34bc:	9105      	str	r1, [sp, #20]
    34be:	e5d9      	b.n	3074 <__ieee754_pow+0x4ec>
    34c0:	4a44      	ldr	r2, [pc, #272]	; (35d4 <__ieee754_pow+0xa4c>)
    34c2:	4b45      	ldr	r3, [pc, #276]	; (35d8 <__ieee754_pow+0xa50>)
    34c4:	9806      	ldr	r0, [sp, #24]
    34c6:	9907      	ldr	r1, [sp, #28]
    34c8:	f001 fe96 	bl	51f8 <__aeabi_dmul>
    34cc:	4a41      	ldr	r2, [pc, #260]	; (35d4 <__ieee754_pow+0xa4c>)
    34ce:	4b42      	ldr	r3, [pc, #264]	; (35d8 <__ieee754_pow+0xa50>)
    34d0:	f001 fe92 	bl	51f8 <__aeabi_dmul>
    34d4:	f7ff fba0 	bl	2c18 <__ieee754_pow+0x90>
    34d8:	2a00      	cmp	r2, #0
    34da:	d001      	beq.n	34e0 <__ieee754_pow+0x958>
    34dc:	f7ff fba9 	bl	2c32 <__ieee754_pow+0xaa>
    34e0:	3214      	adds	r2, #20
    34e2:	1ad3      	subs	r3, r2, r3
    34e4:	002a      	movs	r2, r5
    34e6:	411a      	asrs	r2, r3
    34e8:	0011      	movs	r1, r2
    34ea:	4099      	lsls	r1, r3
    34ec:	428d      	cmp	r5, r1
    34ee:	d001      	beq.n	34f4 <__ieee754_pow+0x96c>
    34f0:	f7ff fb76 	bl	2be0 <__ieee754_pow+0x58>
    34f4:	2301      	movs	r3, #1
    34f6:	401a      	ands	r2, r3
    34f8:	18db      	adds	r3, r3, r3
    34fa:	1a9b      	subs	r3, r3, r2
    34fc:	469b      	mov	fp, r3
    34fe:	f7ff fb6f 	bl	2be0 <__ieee754_pow+0x58>
    3502:	2200      	movs	r2, #0
    3504:	4b31      	ldr	r3, [pc, #196]	; (35cc <__ieee754_pow+0xa44>)
    3506:	4690      	mov	r8, r2
    3508:	4691      	mov	r9, r2
    350a:	459a      	cmp	sl, r3
    350c:	dc00      	bgt.n	3510 <__ieee754_pow+0x988>
    350e:	e67b      	b.n	3208 <__ieee754_pow+0x680>
    3510:	e645      	b.n	319e <__ieee754_pow+0x616>
    3512:	0002      	movs	r2, r0
    3514:	000b      	movs	r3, r1
    3516:	f002 f8ef 	bl	56f8 <__aeabi_dsub>
    351a:	0002      	movs	r2, r0
    351c:	000b      	movs	r3, r1
    351e:	f001 fa37 	bl	4990 <__aeabi_ddiv>
    3522:	f7ff fb79 	bl	2c18 <__ieee754_pow+0x90>
    3526:	2380      	movs	r3, #128	; 0x80
    3528:	4c2c      	ldr	r4, [pc, #176]	; (35dc <__ieee754_pow+0xa54>)
    352a:	05db      	lsls	r3, r3, #23
    352c:	9308      	str	r3, [sp, #32]
    352e:	9409      	str	r4, [sp, #36]	; 0x24
    3530:	4b2b      	ldr	r3, [pc, #172]	; (35e0 <__ieee754_pow+0xa58>)
    3532:	4c2c      	ldr	r4, [pc, #176]	; (35e4 <__ieee754_pow+0xa5c>)
    3534:	2200      	movs	r2, #0
    3536:	930c      	str	r3, [sp, #48]	; 0x30
    3538:	940d      	str	r4, [sp, #52]	; 0x34
    353a:	2480      	movs	r4, #128	; 0x80
    353c:	4b2a      	ldr	r3, [pc, #168]	; (35e8 <__ieee754_pow+0xa60>)
    353e:	02e4      	lsls	r4, r4, #11
    3540:	9206      	str	r2, [sp, #24]
    3542:	9307      	str	r3, [sp, #28]
    3544:	e449      	b.n	2dda <__ieee754_pow+0x252>
    3546:	464b      	mov	r3, r9
    3548:	425b      	negs	r3, r3
    354a:	4699      	mov	r9, r3
    354c:	e64a      	b.n	31e4 <__ieee754_pow+0x65c>
    354e:	46c0      	nop			; (mov r8, r8)
    3550:	fffffc02 	.word	0xfffffc02
    3554:	fffffc01 	.word	0xfffffc01
    3558:	000fffff 	.word	0x000fffff
    355c:	3fe62e43 	.word	0x3fe62e43
    3560:	fefa39ef 	.word	0xfefa39ef
    3564:	3fe62e42 	.word	0x3fe62e42
    3568:	0ca86c39 	.word	0x0ca86c39
    356c:	be205c61 	.word	0xbe205c61
    3570:	72bea4d0 	.word	0x72bea4d0
    3574:	3e663769 	.word	0x3e663769
    3578:	c5d26bf1 	.word	0xc5d26bf1
    357c:	3ebbbd41 	.word	0x3ebbbd41
    3580:	af25de2c 	.word	0xaf25de2c
    3584:	3f11566a 	.word	0x3f11566a
    3588:	16bebd93 	.word	0x16bebd93
    358c:	3f66c16c 	.word	0x3f66c16c
    3590:	5555553e 	.word	0x5555553e
    3594:	3fc55555 	.word	0x3fc55555
    3598:	3ff00000 	.word	0x3ff00000
    359c:	4090cbff 	.word	0x4090cbff
    35a0:	3f6f3400 	.word	0x3f6f3400
    35a4:	c2f8f359 	.word	0xc2f8f359
    35a8:	01a56e1f 	.word	0x01a56e1f
    35ac:	bff00000 	.word	0xbff00000
    35b0:	3feffffe 	.word	0x3feffffe
    35b4:	3ff71547 	.word	0x3ff71547
    35b8:	f85ddf44 	.word	0xf85ddf44
    35bc:	3e54ae0b 	.word	0x3e54ae0b
    35c0:	3fd00000 	.word	0x3fd00000
    35c4:	55555555 	.word	0x55555555
    35c8:	3fd55555 	.word	0x3fd55555
    35cc:	3fe00000 	.word	0x3fe00000
    35d0:	652b82fe 	.word	0x652b82fe
    35d4:	8800759c 	.word	0x8800759c
    35d8:	7e37e43c 	.word	0x7e37e43c
    35dc:	3fe2b803 	.word	0x3fe2b803
    35e0:	43cfd006 	.word	0x43cfd006
    35e4:	3e4cfdeb 	.word	0x3e4cfdeb
    35e8:	3ff80000 	.word	0x3ff80000
    35ec:	464a      	mov	r2, r9
    35ee:	f000 f999 	bl	3924 <scalbn>
    35f2:	e6b2      	b.n	335a <__ieee754_pow+0x7d2>

000035f4 <__ieee754_sqrt>:
    35f4:	4b6c      	ldr	r3, [pc, #432]	; (37a8 <__ieee754_sqrt+0x1b4>)
    35f6:	b5f0      	push	{r4, r5, r6, r7, lr}
    35f8:	000a      	movs	r2, r1
    35fa:	4646      	mov	r6, r8
    35fc:	000d      	movs	r5, r1
    35fe:	46d6      	mov	lr, sl
    3600:	464f      	mov	r7, r9
    3602:	0019      	movs	r1, r3
    3604:	b5c0      	push	{r6, r7, lr}
    3606:	0004      	movs	r4, r0
    3608:	0006      	movs	r6, r0
    360a:	4029      	ands	r1, r5
    360c:	4299      	cmp	r1, r3
    360e:	d100      	bne.n	3612 <__ieee754_sqrt+0x1e>
    3610:	e0a7      	b.n	3762 <__ieee754_sqrt+0x16e>
    3612:	2d00      	cmp	r5, #0
    3614:	dc00      	bgt.n	3618 <__ieee754_sqrt+0x24>
    3616:	e081      	b.n	371c <__ieee754_sqrt+0x128>
    3618:	152f      	asrs	r7, r5, #20
    361a:	d100      	bne.n	361e <__ieee754_sqrt+0x2a>
    361c:	e08e      	b.n	373c <__ieee754_sqrt+0x148>
    361e:	4b63      	ldr	r3, [pc, #396]	; (37ac <__ieee754_sqrt+0x1b8>)
    3620:	0312      	lsls	r2, r2, #12
    3622:	469c      	mov	ip, r3
    3624:	2380      	movs	r3, #128	; 0x80
    3626:	0b12      	lsrs	r2, r2, #12
    3628:	035b      	lsls	r3, r3, #13
    362a:	4467      	add	r7, ip
    362c:	431a      	orrs	r2, r3
    362e:	07fb      	lsls	r3, r7, #31
    3630:	d468      	bmi.n	3704 <__ieee754_sqrt+0x110>
    3632:	107b      	asrs	r3, r7, #1
    3634:	469c      	mov	ip, r3
    3636:	0fe3      	lsrs	r3, r4, #31
    3638:	189b      	adds	r3, r3, r2
    363a:	189b      	adds	r3, r3, r2
    363c:	2280      	movs	r2, #128	; 0x80
    363e:	2116      	movs	r1, #22
    3640:	2600      	movs	r6, #0
    3642:	2500      	movs	r5, #0
    3644:	0064      	lsls	r4, r4, #1
    3646:	0392      	lsls	r2, r2, #14
    3648:	18a8      	adds	r0, r5, r2
    364a:	4298      	cmp	r0, r3
    364c:	dc02      	bgt.n	3654 <__ieee754_sqrt+0x60>
    364e:	1885      	adds	r5, r0, r2
    3650:	1a1b      	subs	r3, r3, r0
    3652:	18b6      	adds	r6, r6, r2
    3654:	0fe0      	lsrs	r0, r4, #31
    3656:	005b      	lsls	r3, r3, #1
    3658:	3901      	subs	r1, #1
    365a:	181b      	adds	r3, r3, r0
    365c:	0064      	lsls	r4, r4, #1
    365e:	0852      	lsrs	r2, r2, #1
    3660:	2900      	cmp	r1, #0
    3662:	d1f1      	bne.n	3648 <__ieee754_sqrt+0x54>
    3664:	2200      	movs	r2, #0
    3666:	4692      	mov	sl, r2
    3668:	4690      	mov	r8, r2
    366a:	2280      	movs	r2, #128	; 0x80
    366c:	2020      	movs	r0, #32
    366e:	0612      	lsls	r2, r2, #24
    3670:	e009      	b.n	3686 <__ieee754_sqrt+0x92>
    3672:	42ab      	cmp	r3, r5
    3674:	d038      	beq.n	36e8 <__ieee754_sqrt+0xf4>
    3676:	0fe1      	lsrs	r1, r4, #31
    3678:	18c9      	adds	r1, r1, r3
    367a:	3801      	subs	r0, #1
    367c:	18cb      	adds	r3, r1, r3
    367e:	0064      	lsls	r4, r4, #1
    3680:	0852      	lsrs	r2, r2, #1
    3682:	2800      	cmp	r0, #0
    3684:	d018      	beq.n	36b8 <__ieee754_sqrt+0xc4>
    3686:	4641      	mov	r1, r8
    3688:	1851      	adds	r1, r2, r1
    368a:	42ab      	cmp	r3, r5
    368c:	ddf1      	ble.n	3672 <__ieee754_sqrt+0x7e>
    368e:	188f      	adds	r7, r1, r2
    3690:	46b8      	mov	r8, r7
    3692:	46a9      	mov	r9, r5
    3694:	2900      	cmp	r1, #0
    3696:	db30      	blt.n	36fa <__ieee754_sqrt+0x106>
    3698:	1b5b      	subs	r3, r3, r5
    369a:	428c      	cmp	r4, r1
    369c:	41ad      	sbcs	r5, r5
    369e:	426d      	negs	r5, r5
    36a0:	1b5b      	subs	r3, r3, r5
    36a2:	1a64      	subs	r4, r4, r1
    36a4:	0fe1      	lsrs	r1, r4, #31
    36a6:	18c9      	adds	r1, r1, r3
    36a8:	3801      	subs	r0, #1
    36aa:	4492      	add	sl, r2
    36ac:	464d      	mov	r5, r9
    36ae:	18cb      	adds	r3, r1, r3
    36b0:	0064      	lsls	r4, r4, #1
    36b2:	0852      	lsrs	r2, r2, #1
    36b4:	2800      	cmp	r0, #0
    36b6:	d1e6      	bne.n	3686 <__ieee754_sqrt+0x92>
    36b8:	4323      	orrs	r3, r4
    36ba:	d128      	bne.n	370e <__ieee754_sqrt+0x11a>
    36bc:	4653      	mov	r3, sl
    36be:	085b      	lsrs	r3, r3, #1
    36c0:	493b      	ldr	r1, [pc, #236]	; (37b0 <__ieee754_sqrt+0x1bc>)
    36c2:	1072      	asrs	r2, r6, #1
    36c4:	4688      	mov	r8, r1
    36c6:	4442      	add	r2, r8
    36c8:	07f1      	lsls	r1, r6, #31
    36ca:	d502      	bpl.n	36d2 <__ieee754_sqrt+0xde>
    36cc:	2180      	movs	r1, #128	; 0x80
    36ce:	0609      	lsls	r1, r1, #24
    36d0:	430b      	orrs	r3, r1
    36d2:	4661      	mov	r1, ip
    36d4:	001e      	movs	r6, r3
    36d6:	050f      	lsls	r7, r1, #20
    36d8:	18bd      	adds	r5, r7, r2
    36da:	0030      	movs	r0, r6
    36dc:	0029      	movs	r1, r5
    36de:	bc1c      	pop	{r2, r3, r4}
    36e0:	4690      	mov	r8, r2
    36e2:	4699      	mov	r9, r3
    36e4:	46a2      	mov	sl, r4
    36e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    36e8:	42a1      	cmp	r1, r4
    36ea:	d8c4      	bhi.n	3676 <__ieee754_sqrt+0x82>
    36ec:	188f      	adds	r7, r1, r2
    36ee:	46b8      	mov	r8, r7
    36f0:	2900      	cmp	r1, #0
    36f2:	db42      	blt.n	377a <__ieee754_sqrt+0x186>
    36f4:	4699      	mov	r9, r3
    36f6:	2300      	movs	r3, #0
    36f8:	e7d3      	b.n	36a2 <__ieee754_sqrt+0xae>
    36fa:	2f00      	cmp	r7, #0
    36fc:	db2f      	blt.n	375e <__ieee754_sqrt+0x16a>
    36fe:	1c6f      	adds	r7, r5, #1
    3700:	46b9      	mov	r9, r7
    3702:	e7c9      	b.n	3698 <__ieee754_sqrt+0xa4>
    3704:	0fe1      	lsrs	r1, r4, #31
    3706:	0052      	lsls	r2, r2, #1
    3708:	188a      	adds	r2, r1, r2
    370a:	0064      	lsls	r4, r4, #1
    370c:	e791      	b.n	3632 <__ieee754_sqrt+0x3e>
    370e:	4653      	mov	r3, sl
    3710:	3301      	adds	r3, #1
    3712:	d035      	beq.n	3780 <__ieee754_sqrt+0x18c>
    3714:	4653      	mov	r3, sl
    3716:	3301      	adds	r3, #1
    3718:	085b      	lsrs	r3, r3, #1
    371a:	e7d1      	b.n	36c0 <__ieee754_sqrt+0xcc>
    371c:	006b      	lsls	r3, r5, #1
    371e:	085b      	lsrs	r3, r3, #1
    3720:	4303      	orrs	r3, r0
    3722:	d0da      	beq.n	36da <__ieee754_sqrt+0xe6>
    3724:	2700      	movs	r7, #0
    3726:	2d00      	cmp	r5, #0
    3728:	d132      	bne.n	3790 <__ieee754_sqrt+0x19c>
    372a:	0ae2      	lsrs	r2, r4, #11
    372c:	3f15      	subs	r7, #21
    372e:	0564      	lsls	r4, r4, #21
    3730:	2a00      	cmp	r2, #0
    3732:	d0fa      	beq.n	372a <__ieee754_sqrt+0x136>
    3734:	2380      	movs	r3, #128	; 0x80
    3736:	035b      	lsls	r3, r3, #13
    3738:	421a      	tst	r2, r3
    373a:	d124      	bne.n	3786 <__ieee754_sqrt+0x192>
    373c:	2080      	movs	r0, #128	; 0x80
    373e:	2300      	movs	r3, #0
    3740:	0340      	lsls	r0, r0, #13
    3742:	e000      	b.n	3746 <__ieee754_sqrt+0x152>
    3744:	000b      	movs	r3, r1
    3746:	0052      	lsls	r2, r2, #1
    3748:	1c59      	adds	r1, r3, #1
    374a:	4202      	tst	r2, r0
    374c:	d0fa      	beq.n	3744 <__ieee754_sqrt+0x150>
    374e:	2020      	movs	r0, #32
    3750:	1a40      	subs	r0, r0, r1
    3752:	1aff      	subs	r7, r7, r3
    3754:	0023      	movs	r3, r4
    3756:	40c3      	lsrs	r3, r0
    3758:	408c      	lsls	r4, r1
    375a:	431a      	orrs	r2, r3
    375c:	e75f      	b.n	361e <__ieee754_sqrt+0x2a>
    375e:	46a9      	mov	r9, r5
    3760:	e79a      	b.n	3698 <__ieee754_sqrt+0xa4>
    3762:	002b      	movs	r3, r5
    3764:	0002      	movs	r2, r0
    3766:	0029      	movs	r1, r5
    3768:	f001 fd46 	bl	51f8 <__aeabi_dmul>
    376c:	0032      	movs	r2, r6
    376e:	002b      	movs	r3, r5
    3770:	f000 fdfe 	bl	4370 <__aeabi_dadd>
    3774:	0006      	movs	r6, r0
    3776:	000d      	movs	r5, r1
    3778:	e7af      	b.n	36da <__ieee754_sqrt+0xe6>
    377a:	2f00      	cmp	r7, #0
    377c:	dabf      	bge.n	36fe <__ieee754_sqrt+0x10a>
    377e:	e7b9      	b.n	36f4 <__ieee754_sqrt+0x100>
    3780:	3601      	adds	r6, #1
    3782:	2300      	movs	r3, #0
    3784:	e79c      	b.n	36c0 <__ieee754_sqrt+0xcc>
    3786:	2301      	movs	r3, #1
    3788:	2100      	movs	r1, #0
    378a:	2020      	movs	r0, #32
    378c:	425b      	negs	r3, r3
    378e:	e7e0      	b.n	3752 <__ieee754_sqrt+0x15e>
    3790:	002b      	movs	r3, r5
    3792:	0002      	movs	r2, r0
    3794:	0029      	movs	r1, r5
    3796:	f001 ffaf 	bl	56f8 <__aeabi_dsub>
    379a:	0002      	movs	r2, r0
    379c:	000b      	movs	r3, r1
    379e:	f001 f8f7 	bl	4990 <__aeabi_ddiv>
    37a2:	0006      	movs	r6, r0
    37a4:	000d      	movs	r5, r1
    37a6:	e798      	b.n	36da <__ieee754_sqrt+0xe6>
    37a8:	7ff00000 	.word	0x7ff00000
    37ac:	fffffc01 	.word	0xfffffc01
    37b0:	3fe00000 	.word	0x3fe00000

000037b4 <fabs>:
    37b4:	0049      	lsls	r1, r1, #1
    37b6:	084b      	lsrs	r3, r1, #1
    37b8:	0019      	movs	r1, r3
    37ba:	4770      	bx	lr

000037bc <finite>:
    37bc:	4b03      	ldr	r3, [pc, #12]	; (37cc <finite+0x10>)
    37be:	0048      	lsls	r0, r1, #1
    37c0:	469c      	mov	ip, r3
    37c2:	0840      	lsrs	r0, r0, #1
    37c4:	4460      	add	r0, ip
    37c6:	0fc0      	lsrs	r0, r0, #31
    37c8:	4770      	bx	lr
    37ca:	46c0      	nop			; (mov r8, r8)
    37cc:	80100000 	.word	0x80100000

000037d0 <matherr>:
    37d0:	2000      	movs	r0, #0
    37d2:	4770      	bx	lr

000037d4 <nan>:
    37d4:	2000      	movs	r0, #0
    37d6:	4901      	ldr	r1, [pc, #4]	; (37dc <nan+0x8>)
    37d8:	4770      	bx	lr
    37da:	46c0      	nop			; (mov r8, r8)
    37dc:	7ff80000 	.word	0x7ff80000

000037e0 <rint>:
    37e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    37e2:	46c6      	mov	lr, r8
    37e4:	b500      	push	{lr}
    37e6:	0fcb      	lsrs	r3, r1, #31
    37e8:	4698      	mov	r8, r3
    37ea:	4c4a      	ldr	r4, [pc, #296]	; (3914 <rint+0x134>)
    37ec:	004b      	lsls	r3, r1, #1
    37ee:	0d5b      	lsrs	r3, r3, #21
    37f0:	191e      	adds	r6, r3, r4
    37f2:	b082      	sub	sp, #8
    37f4:	0007      	movs	r7, r0
    37f6:	000a      	movs	r2, r1
    37f8:	2e13      	cmp	r6, #19
    37fa:	dc35      	bgt.n	3868 <rint+0x88>
    37fc:	2e00      	cmp	r6, #0
    37fe:	db57      	blt.n	38b0 <rint+0xd0>
    3800:	4b45      	ldr	r3, [pc, #276]	; (3918 <rint+0x138>)
    3802:	0004      	movs	r4, r0
    3804:	4133      	asrs	r3, r6
    3806:	001f      	movs	r7, r3
    3808:	400f      	ands	r7, r1
    380a:	4307      	orrs	r7, r0
    380c:	000d      	movs	r5, r1
    380e:	2f00      	cmp	r7, #0
    3810:	d024      	beq.n	385c <rint+0x7c>
    3812:	085b      	lsrs	r3, r3, #1
    3814:	001c      	movs	r4, r3
    3816:	400c      	ands	r4, r1
    3818:	4320      	orrs	r0, r4
    381a:	2700      	movs	r7, #0
    381c:	2800      	cmp	r0, #0
    381e:	d007      	beq.n	3830 <rint+0x50>
    3820:	2e13      	cmp	r6, #19
    3822:	d100      	bne.n	3826 <rint+0x46>
    3824:	e073      	b.n	390e <rint+0x12e>
    3826:	2280      	movs	r2, #128	; 0x80
    3828:	02d2      	lsls	r2, r2, #11
    382a:	4132      	asrs	r2, r6
    382c:	4399      	bics	r1, r3
    382e:	430a      	orrs	r2, r1
    3830:	4643      	mov	r3, r8
    3832:	00de      	lsls	r6, r3, #3
    3834:	4b39      	ldr	r3, [pc, #228]	; (391c <rint+0x13c>)
    3836:	0011      	movs	r1, r2
    3838:	199e      	adds	r6, r3, r6
    383a:	6834      	ldr	r4, [r6, #0]
    383c:	6875      	ldr	r5, [r6, #4]
    383e:	0038      	movs	r0, r7
    3840:	0022      	movs	r2, r4
    3842:	002b      	movs	r3, r5
    3844:	f000 fd94 	bl	4370 <__aeabi_dadd>
    3848:	9000      	str	r0, [sp, #0]
    384a:	9101      	str	r1, [sp, #4]
    384c:	9800      	ldr	r0, [sp, #0]
    384e:	9901      	ldr	r1, [sp, #4]
    3850:	0022      	movs	r2, r4
    3852:	002b      	movs	r3, r5
    3854:	f001 ff50 	bl	56f8 <__aeabi_dsub>
    3858:	0004      	movs	r4, r0
    385a:	000d      	movs	r5, r1
    385c:	0020      	movs	r0, r4
    385e:	0029      	movs	r1, r5
    3860:	b002      	add	sp, #8
    3862:	bc04      	pop	{r2}
    3864:	4690      	mov	r8, r2
    3866:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3868:	2e33      	cmp	r6, #51	; 0x33
    386a:	dd0c      	ble.n	3886 <rint+0xa6>
    386c:	2380      	movs	r3, #128	; 0x80
    386e:	0004      	movs	r4, r0
    3870:	00db      	lsls	r3, r3, #3
    3872:	000d      	movs	r5, r1
    3874:	429e      	cmp	r6, r3
    3876:	d1f1      	bne.n	385c <rint+0x7c>
    3878:	0002      	movs	r2, r0
    387a:	000b      	movs	r3, r1
    387c:	f000 fd78 	bl	4370 <__aeabi_dadd>
    3880:	0004      	movs	r4, r0
    3882:	000d      	movs	r5, r1
    3884:	e7ea      	b.n	385c <rint+0x7c>
    3886:	4c26      	ldr	r4, [pc, #152]	; (3920 <rint+0x140>)
    3888:	000d      	movs	r5, r1
    388a:	46a4      	mov	ip, r4
    388c:	2401      	movs	r4, #1
    388e:	4463      	add	r3, ip
    3890:	4264      	negs	r4, r4
    3892:	40dc      	lsrs	r4, r3
    3894:	46a4      	mov	ip, r4
    3896:	4661      	mov	r1, ip
    3898:	0004      	movs	r4, r0
    389a:	4201      	tst	r1, r0
    389c:	d0de      	beq.n	385c <rint+0x7c>
    389e:	0849      	lsrs	r1, r1, #1
    38a0:	4201      	tst	r1, r0
    38a2:	d0c5      	beq.n	3830 <rint+0x50>
    38a4:	2780      	movs	r7, #128	; 0x80
    38a6:	05ff      	lsls	r7, r7, #23
    38a8:	411f      	asrs	r7, r3
    38aa:	4388      	bics	r0, r1
    38ac:	4307      	orrs	r7, r0
    38ae:	e7bf      	b.n	3830 <rint+0x50>
    38b0:	004b      	lsls	r3, r1, #1
    38b2:	085b      	lsrs	r3, r3, #1
    38b4:	4303      	orrs	r3, r0
    38b6:	0004      	movs	r4, r0
    38b8:	000d      	movs	r5, r1
    38ba:	2b00      	cmp	r3, #0
    38bc:	d0ce      	beq.n	385c <rint+0x7c>
    38be:	030b      	lsls	r3, r1, #12
    38c0:	0b1b      	lsrs	r3, r3, #12
    38c2:	4303      	orrs	r3, r0
    38c4:	001a      	movs	r2, r3
    38c6:	425b      	negs	r3, r3
    38c8:	4313      	orrs	r3, r2
    38ca:	2280      	movs	r2, #128	; 0x80
    38cc:	0b1b      	lsrs	r3, r3, #12
    38ce:	0312      	lsls	r2, r2, #12
    38d0:	4013      	ands	r3, r2
    38d2:	0c4a      	lsrs	r2, r1, #17
    38d4:	0452      	lsls	r2, r2, #17
    38d6:	4313      	orrs	r3, r2
    38d8:	0019      	movs	r1, r3
    38da:	4643      	mov	r3, r8
    38dc:	00da      	lsls	r2, r3, #3
    38de:	4b0f      	ldr	r3, [pc, #60]	; (391c <rint+0x13c>)
    38e0:	189b      	adds	r3, r3, r2
    38e2:	681c      	ldr	r4, [r3, #0]
    38e4:	685d      	ldr	r5, [r3, #4]
    38e6:	0022      	movs	r2, r4
    38e8:	002b      	movs	r3, r5
    38ea:	f000 fd41 	bl	4370 <__aeabi_dadd>
    38ee:	9000      	str	r0, [sp, #0]
    38f0:	9101      	str	r1, [sp, #4]
    38f2:	9800      	ldr	r0, [sp, #0]
    38f4:	9901      	ldr	r1, [sp, #4]
    38f6:	0022      	movs	r2, r4
    38f8:	002b      	movs	r3, r5
    38fa:	f001 fefd 	bl	56f8 <__aeabi_dsub>
    38fe:	4642      	mov	r2, r8
    3900:	004b      	lsls	r3, r1, #1
    3902:	085b      	lsrs	r3, r3, #1
    3904:	07d6      	lsls	r6, r2, #31
    3906:	4333      	orrs	r3, r6
    3908:	0004      	movs	r4, r0
    390a:	001d      	movs	r5, r3
    390c:	e7a6      	b.n	385c <rint+0x7c>
    390e:	2780      	movs	r7, #128	; 0x80
    3910:	063f      	lsls	r7, r7, #24
    3912:	e788      	b.n	3826 <rint+0x46>
    3914:	fffffc01 	.word	0xfffffc01
    3918:	000fffff 	.word	0x000fffff
    391c:	00006390 	.word	0x00006390
    3920:	fffffbed 	.word	0xfffffbed

00003924 <scalbn>:
    3924:	004b      	lsls	r3, r1, #1
    3926:	b570      	push	{r4, r5, r6, lr}
    3928:	0d5b      	lsrs	r3, r3, #21
    392a:	0014      	movs	r4, r2
    392c:	000a      	movs	r2, r1
    392e:	2b00      	cmp	r3, #0
    3930:	d11a      	bne.n	3968 <scalbn+0x44>
    3932:	004b      	lsls	r3, r1, #1
    3934:	085b      	lsrs	r3, r3, #1
    3936:	4303      	orrs	r3, r0
    3938:	d015      	beq.n	3966 <scalbn+0x42>
    393a:	2200      	movs	r2, #0
    393c:	4b22      	ldr	r3, [pc, #136]	; (39c8 <scalbn+0xa4>)
    393e:	f001 fc5b 	bl	51f8 <__aeabi_dmul>
    3942:	4b22      	ldr	r3, [pc, #136]	; (39cc <scalbn+0xa8>)
    3944:	000a      	movs	r2, r1
    3946:	429c      	cmp	r4, r3
    3948:	db22      	blt.n	3990 <scalbn+0x6c>
    394a:	004b      	lsls	r3, r1, #1
    394c:	0d5b      	lsrs	r3, r3, #21
    394e:	3b36      	subs	r3, #54	; 0x36
    3950:	4d1f      	ldr	r5, [pc, #124]	; (39d0 <scalbn+0xac>)
    3952:	18e3      	adds	r3, r4, r3
    3954:	42ab      	cmp	r3, r5
    3956:	dc20      	bgt.n	399a <scalbn+0x76>
    3958:	2b00      	cmp	r3, #0
    395a:	dd0d      	ble.n	3978 <scalbn+0x54>
    395c:	4c1d      	ldr	r4, [pc, #116]	; (39d4 <scalbn+0xb0>)
    395e:	051b      	lsls	r3, r3, #20
    3960:	4022      	ands	r2, r4
    3962:	431a      	orrs	r2, r3
    3964:	0011      	movs	r1, r2
    3966:	bd70      	pop	{r4, r5, r6, pc}
    3968:	4d1b      	ldr	r5, [pc, #108]	; (39d8 <scalbn+0xb4>)
    396a:	42ab      	cmp	r3, r5
    396c:	d1f0      	bne.n	3950 <scalbn+0x2c>
    396e:	0002      	movs	r2, r0
    3970:	000b      	movs	r3, r1
    3972:	f000 fcfd 	bl	4370 <__aeabi_dadd>
    3976:	e7f6      	b.n	3966 <scalbn+0x42>
    3978:	001d      	movs	r5, r3
    397a:	3535      	adds	r5, #53	; 0x35
    397c:	da18      	bge.n	39b0 <scalbn+0x8c>
    397e:	4b17      	ldr	r3, [pc, #92]	; (39dc <scalbn+0xb8>)
    3980:	0002      	movs	r2, r0
    3982:	429c      	cmp	r4, r3
    3984:	dc0a      	bgt.n	399c <scalbn+0x78>
    3986:	000b      	movs	r3, r1
    3988:	4815      	ldr	r0, [pc, #84]	; (39e0 <scalbn+0xbc>)
    398a:	4916      	ldr	r1, [pc, #88]	; (39e4 <scalbn+0xc0>)
    398c:	f000 f832 	bl	39f4 <copysign>
    3990:	4a13      	ldr	r2, [pc, #76]	; (39e0 <scalbn+0xbc>)
    3992:	4b14      	ldr	r3, [pc, #80]	; (39e4 <scalbn+0xc0>)
    3994:	f001 fc30 	bl	51f8 <__aeabi_dmul>
    3998:	e7e5      	b.n	3966 <scalbn+0x42>
    399a:	0002      	movs	r2, r0
    399c:	000b      	movs	r3, r1
    399e:	4812      	ldr	r0, [pc, #72]	; (39e8 <scalbn+0xc4>)
    39a0:	4912      	ldr	r1, [pc, #72]	; (39ec <scalbn+0xc8>)
    39a2:	f000 f827 	bl	39f4 <copysign>
    39a6:	4a10      	ldr	r2, [pc, #64]	; (39e8 <scalbn+0xc4>)
    39a8:	4b10      	ldr	r3, [pc, #64]	; (39ec <scalbn+0xc8>)
    39aa:	f001 fc25 	bl	51f8 <__aeabi_dmul>
    39ae:	e7da      	b.n	3966 <scalbn+0x42>
    39b0:	4c08      	ldr	r4, [pc, #32]	; (39d4 <scalbn+0xb0>)
    39b2:	3336      	adds	r3, #54	; 0x36
    39b4:	4022      	ands	r2, r4
    39b6:	051b      	lsls	r3, r3, #20
    39b8:	4313      	orrs	r3, r2
    39ba:	0019      	movs	r1, r3
    39bc:	2200      	movs	r2, #0
    39be:	4b0c      	ldr	r3, [pc, #48]	; (39f0 <scalbn+0xcc>)
    39c0:	f001 fc1a 	bl	51f8 <__aeabi_dmul>
    39c4:	e7cf      	b.n	3966 <scalbn+0x42>
    39c6:	46c0      	nop			; (mov r8, r8)
    39c8:	43500000 	.word	0x43500000
    39cc:	ffff3cb0 	.word	0xffff3cb0
    39d0:	000007fe 	.word	0x000007fe
    39d4:	800fffff 	.word	0x800fffff
    39d8:	000007ff 	.word	0x000007ff
    39dc:	0000c350 	.word	0x0000c350
    39e0:	c2f8f359 	.word	0xc2f8f359
    39e4:	01a56e1f 	.word	0x01a56e1f
    39e8:	8800759c 	.word	0x8800759c
    39ec:	7e37e43c 	.word	0x7e37e43c
    39f0:	3c900000 	.word	0x3c900000

000039f4 <copysign>:
    39f4:	b530      	push	{r4, r5, lr}
    39f6:	004a      	lsls	r2, r1, #1
    39f8:	0fdb      	lsrs	r3, r3, #31
    39fa:	07db      	lsls	r3, r3, #31
    39fc:	0852      	lsrs	r2, r2, #1
    39fe:	431a      	orrs	r2, r3
    3a00:	0011      	movs	r1, r2
    3a02:	bd30      	pop	{r4, r5, pc}

00003a04 <__gnu_thumb1_case_uqi>:
    3a04:	b402      	push	{r1}
    3a06:	4671      	mov	r1, lr
    3a08:	0849      	lsrs	r1, r1, #1
    3a0a:	0049      	lsls	r1, r1, #1
    3a0c:	5c09      	ldrb	r1, [r1, r0]
    3a0e:	0049      	lsls	r1, r1, #1
    3a10:	448e      	add	lr, r1
    3a12:	bc02      	pop	{r1}
    3a14:	4770      	bx	lr
    3a16:	46c0      	nop			; (mov r8, r8)

00003a18 <__aeabi_cdrcmple>:
    3a18:	4684      	mov	ip, r0
    3a1a:	1c10      	adds	r0, r2, #0
    3a1c:	4662      	mov	r2, ip
    3a1e:	468c      	mov	ip, r1
    3a20:	1c19      	adds	r1, r3, #0
    3a22:	4663      	mov	r3, ip
    3a24:	e000      	b.n	3a28 <__aeabi_cdcmpeq>
    3a26:	46c0      	nop			; (mov r8, r8)

00003a28 <__aeabi_cdcmpeq>:
    3a28:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    3a2a:	f001 fb83 	bl	5134 <__ledf2>
    3a2e:	2800      	cmp	r0, #0
    3a30:	d401      	bmi.n	3a36 <__aeabi_cdcmpeq+0xe>
    3a32:	2100      	movs	r1, #0
    3a34:	42c8      	cmn	r0, r1
    3a36:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00003a38 <__aeabi_dcmpeq>:
    3a38:	b510      	push	{r4, lr}
    3a3a:	f001 fadd 	bl	4ff8 <__eqdf2>
    3a3e:	4240      	negs	r0, r0
    3a40:	3001      	adds	r0, #1
    3a42:	bd10      	pop	{r4, pc}

00003a44 <__aeabi_dcmplt>:
    3a44:	b510      	push	{r4, lr}
    3a46:	f001 fb75 	bl	5134 <__ledf2>
    3a4a:	2800      	cmp	r0, #0
    3a4c:	db01      	blt.n	3a52 <__aeabi_dcmplt+0xe>
    3a4e:	2000      	movs	r0, #0
    3a50:	bd10      	pop	{r4, pc}
    3a52:	2001      	movs	r0, #1
    3a54:	bd10      	pop	{r4, pc}
    3a56:	46c0      	nop			; (mov r8, r8)

00003a58 <__aeabi_dcmple>:
    3a58:	b510      	push	{r4, lr}
    3a5a:	f001 fb6b 	bl	5134 <__ledf2>
    3a5e:	2800      	cmp	r0, #0
    3a60:	dd01      	ble.n	3a66 <__aeabi_dcmple+0xe>
    3a62:	2000      	movs	r0, #0
    3a64:	bd10      	pop	{r4, pc}
    3a66:	2001      	movs	r0, #1
    3a68:	bd10      	pop	{r4, pc}
    3a6a:	46c0      	nop			; (mov r8, r8)

00003a6c <__aeabi_dcmpgt>:
    3a6c:	b510      	push	{r4, lr}
    3a6e:	f001 fafd 	bl	506c <__gedf2>
    3a72:	2800      	cmp	r0, #0
    3a74:	dc01      	bgt.n	3a7a <__aeabi_dcmpgt+0xe>
    3a76:	2000      	movs	r0, #0
    3a78:	bd10      	pop	{r4, pc}
    3a7a:	2001      	movs	r0, #1
    3a7c:	bd10      	pop	{r4, pc}
    3a7e:	46c0      	nop			; (mov r8, r8)

00003a80 <__aeabi_dcmpge>:
    3a80:	b510      	push	{r4, lr}
    3a82:	f001 faf3 	bl	506c <__gedf2>
    3a86:	2800      	cmp	r0, #0
    3a88:	da01      	bge.n	3a8e <__aeabi_dcmpge+0xe>
    3a8a:	2000      	movs	r0, #0
    3a8c:	bd10      	pop	{r4, pc}
    3a8e:	2001      	movs	r0, #1
    3a90:	bd10      	pop	{r4, pc}
    3a92:	46c0      	nop			; (mov r8, r8)

00003a94 <__aeabi_cfrcmple>:
    3a94:	4684      	mov	ip, r0
    3a96:	1c08      	adds	r0, r1, #0
    3a98:	4661      	mov	r1, ip
    3a9a:	e7ff      	b.n	3a9c <__aeabi_cfcmpeq>

00003a9c <__aeabi_cfcmpeq>:
    3a9c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    3a9e:	f000 f8f9 	bl	3c94 <__lesf2>
    3aa2:	2800      	cmp	r0, #0
    3aa4:	d401      	bmi.n	3aaa <__aeabi_cfcmpeq+0xe>
    3aa6:	2100      	movs	r1, #0
    3aa8:	42c8      	cmn	r0, r1
    3aaa:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00003aac <__aeabi_fcmpeq>:
    3aac:	b510      	push	{r4, lr}
    3aae:	f000 f88b 	bl	3bc8 <__eqsf2>
    3ab2:	4240      	negs	r0, r0
    3ab4:	3001      	adds	r0, #1
    3ab6:	bd10      	pop	{r4, pc}

00003ab8 <__aeabi_fcmplt>:
    3ab8:	b510      	push	{r4, lr}
    3aba:	f000 f8eb 	bl	3c94 <__lesf2>
    3abe:	2800      	cmp	r0, #0
    3ac0:	db01      	blt.n	3ac6 <__aeabi_fcmplt+0xe>
    3ac2:	2000      	movs	r0, #0
    3ac4:	bd10      	pop	{r4, pc}
    3ac6:	2001      	movs	r0, #1
    3ac8:	bd10      	pop	{r4, pc}
    3aca:	46c0      	nop			; (mov r8, r8)

00003acc <__aeabi_fcmple>:
    3acc:	b510      	push	{r4, lr}
    3ace:	f000 f8e1 	bl	3c94 <__lesf2>
    3ad2:	2800      	cmp	r0, #0
    3ad4:	dd01      	ble.n	3ada <__aeabi_fcmple+0xe>
    3ad6:	2000      	movs	r0, #0
    3ad8:	bd10      	pop	{r4, pc}
    3ada:	2001      	movs	r0, #1
    3adc:	bd10      	pop	{r4, pc}
    3ade:	46c0      	nop			; (mov r8, r8)

00003ae0 <__aeabi_fcmpgt>:
    3ae0:	b510      	push	{r4, lr}
    3ae2:	f000 f897 	bl	3c14 <__gesf2>
    3ae6:	2800      	cmp	r0, #0
    3ae8:	dc01      	bgt.n	3aee <__aeabi_fcmpgt+0xe>
    3aea:	2000      	movs	r0, #0
    3aec:	bd10      	pop	{r4, pc}
    3aee:	2001      	movs	r0, #1
    3af0:	bd10      	pop	{r4, pc}
    3af2:	46c0      	nop			; (mov r8, r8)

00003af4 <__aeabi_fcmpge>:
    3af4:	b510      	push	{r4, lr}
    3af6:	f000 f88d 	bl	3c14 <__gesf2>
    3afa:	2800      	cmp	r0, #0
    3afc:	da01      	bge.n	3b02 <__aeabi_fcmpge+0xe>
    3afe:	2000      	movs	r0, #0
    3b00:	bd10      	pop	{r4, pc}
    3b02:	2001      	movs	r0, #1
    3b04:	bd10      	pop	{r4, pc}
    3b06:	46c0      	nop			; (mov r8, r8)

00003b08 <__aeabi_lmul>:
    3b08:	b5f0      	push	{r4, r5, r6, r7, lr}
    3b0a:	46ce      	mov	lr, r9
    3b0c:	4647      	mov	r7, r8
    3b0e:	0415      	lsls	r5, r2, #16
    3b10:	0c2d      	lsrs	r5, r5, #16
    3b12:	002e      	movs	r6, r5
    3b14:	b580      	push	{r7, lr}
    3b16:	0407      	lsls	r7, r0, #16
    3b18:	0c14      	lsrs	r4, r2, #16
    3b1a:	0c3f      	lsrs	r7, r7, #16
    3b1c:	4699      	mov	r9, r3
    3b1e:	0c03      	lsrs	r3, r0, #16
    3b20:	437e      	muls	r6, r7
    3b22:	435d      	muls	r5, r3
    3b24:	4367      	muls	r7, r4
    3b26:	4363      	muls	r3, r4
    3b28:	197f      	adds	r7, r7, r5
    3b2a:	0c34      	lsrs	r4, r6, #16
    3b2c:	19e4      	adds	r4, r4, r7
    3b2e:	469c      	mov	ip, r3
    3b30:	42a5      	cmp	r5, r4
    3b32:	d903      	bls.n	3b3c <__aeabi_lmul+0x34>
    3b34:	2380      	movs	r3, #128	; 0x80
    3b36:	025b      	lsls	r3, r3, #9
    3b38:	4698      	mov	r8, r3
    3b3a:	44c4      	add	ip, r8
    3b3c:	464b      	mov	r3, r9
    3b3e:	4351      	muls	r1, r2
    3b40:	4343      	muls	r3, r0
    3b42:	0436      	lsls	r6, r6, #16
    3b44:	0c36      	lsrs	r6, r6, #16
    3b46:	0c25      	lsrs	r5, r4, #16
    3b48:	0424      	lsls	r4, r4, #16
    3b4a:	4465      	add	r5, ip
    3b4c:	19a4      	adds	r4, r4, r6
    3b4e:	1859      	adds	r1, r3, r1
    3b50:	1949      	adds	r1, r1, r5
    3b52:	0020      	movs	r0, r4
    3b54:	bc0c      	pop	{r2, r3}
    3b56:	4690      	mov	r8, r2
    3b58:	4699      	mov	r9, r3
    3b5a:	bdf0      	pop	{r4, r5, r6, r7, pc}

00003b5c <__aeabi_f2uiz>:
    3b5c:	219e      	movs	r1, #158	; 0x9e
    3b5e:	b510      	push	{r4, lr}
    3b60:	05c9      	lsls	r1, r1, #23
    3b62:	1c04      	adds	r4, r0, #0
    3b64:	f7ff ffc6 	bl	3af4 <__aeabi_fcmpge>
    3b68:	2800      	cmp	r0, #0
    3b6a:	d103      	bne.n	3b74 <__aeabi_f2uiz+0x18>
    3b6c:	1c20      	adds	r0, r4, #0
    3b6e:	f000 fb8f 	bl	4290 <__aeabi_f2iz>
    3b72:	bd10      	pop	{r4, pc}
    3b74:	219e      	movs	r1, #158	; 0x9e
    3b76:	1c20      	adds	r0, r4, #0
    3b78:	05c9      	lsls	r1, r1, #23
    3b7a:	f000 f9ed 	bl	3f58 <__aeabi_fsub>
    3b7e:	f000 fb87 	bl	4290 <__aeabi_f2iz>
    3b82:	2380      	movs	r3, #128	; 0x80
    3b84:	061b      	lsls	r3, r3, #24
    3b86:	469c      	mov	ip, r3
    3b88:	4460      	add	r0, ip
    3b8a:	e7f2      	b.n	3b72 <__aeabi_f2uiz+0x16>

00003b8c <__aeabi_d2uiz>:
    3b8c:	b570      	push	{r4, r5, r6, lr}
    3b8e:	2200      	movs	r2, #0
    3b90:	4b0c      	ldr	r3, [pc, #48]	; (3bc4 <__aeabi_d2uiz+0x38>)
    3b92:	0004      	movs	r4, r0
    3b94:	000d      	movs	r5, r1
    3b96:	f7ff ff73 	bl	3a80 <__aeabi_dcmpge>
    3b9a:	2800      	cmp	r0, #0
    3b9c:	d104      	bne.n	3ba8 <__aeabi_d2uiz+0x1c>
    3b9e:	0020      	movs	r0, r4
    3ba0:	0029      	movs	r1, r5
    3ba2:	f002 f8df 	bl	5d64 <__aeabi_d2iz>
    3ba6:	bd70      	pop	{r4, r5, r6, pc}
    3ba8:	4b06      	ldr	r3, [pc, #24]	; (3bc4 <__aeabi_d2uiz+0x38>)
    3baa:	2200      	movs	r2, #0
    3bac:	0020      	movs	r0, r4
    3bae:	0029      	movs	r1, r5
    3bb0:	f001 fda2 	bl	56f8 <__aeabi_dsub>
    3bb4:	f002 f8d6 	bl	5d64 <__aeabi_d2iz>
    3bb8:	2380      	movs	r3, #128	; 0x80
    3bba:	061b      	lsls	r3, r3, #24
    3bbc:	469c      	mov	ip, r3
    3bbe:	4460      	add	r0, ip
    3bc0:	e7f1      	b.n	3ba6 <__aeabi_d2uiz+0x1a>
    3bc2:	46c0      	nop			; (mov r8, r8)
    3bc4:	41e00000 	.word	0x41e00000

00003bc8 <__eqsf2>:
    3bc8:	b570      	push	{r4, r5, r6, lr}
    3bca:	0042      	lsls	r2, r0, #1
    3bcc:	0245      	lsls	r5, r0, #9
    3bce:	024e      	lsls	r6, r1, #9
    3bd0:	004c      	lsls	r4, r1, #1
    3bd2:	0fc3      	lsrs	r3, r0, #31
    3bd4:	0a6d      	lsrs	r5, r5, #9
    3bd6:	0e12      	lsrs	r2, r2, #24
    3bd8:	0a76      	lsrs	r6, r6, #9
    3bda:	0e24      	lsrs	r4, r4, #24
    3bdc:	0fc9      	lsrs	r1, r1, #31
    3bde:	2001      	movs	r0, #1
    3be0:	2aff      	cmp	r2, #255	; 0xff
    3be2:	d006      	beq.n	3bf2 <__eqsf2+0x2a>
    3be4:	2cff      	cmp	r4, #255	; 0xff
    3be6:	d003      	beq.n	3bf0 <__eqsf2+0x28>
    3be8:	42a2      	cmp	r2, r4
    3bea:	d101      	bne.n	3bf0 <__eqsf2+0x28>
    3bec:	42b5      	cmp	r5, r6
    3bee:	d006      	beq.n	3bfe <__eqsf2+0x36>
    3bf0:	bd70      	pop	{r4, r5, r6, pc}
    3bf2:	2d00      	cmp	r5, #0
    3bf4:	d1fc      	bne.n	3bf0 <__eqsf2+0x28>
    3bf6:	2cff      	cmp	r4, #255	; 0xff
    3bf8:	d1fa      	bne.n	3bf0 <__eqsf2+0x28>
    3bfa:	2e00      	cmp	r6, #0
    3bfc:	d1f8      	bne.n	3bf0 <__eqsf2+0x28>
    3bfe:	428b      	cmp	r3, r1
    3c00:	d006      	beq.n	3c10 <__eqsf2+0x48>
    3c02:	2001      	movs	r0, #1
    3c04:	2a00      	cmp	r2, #0
    3c06:	d1f3      	bne.n	3bf0 <__eqsf2+0x28>
    3c08:	0028      	movs	r0, r5
    3c0a:	1e45      	subs	r5, r0, #1
    3c0c:	41a8      	sbcs	r0, r5
    3c0e:	e7ef      	b.n	3bf0 <__eqsf2+0x28>
    3c10:	2000      	movs	r0, #0
    3c12:	e7ed      	b.n	3bf0 <__eqsf2+0x28>

00003c14 <__gesf2>:
    3c14:	b5f0      	push	{r4, r5, r6, r7, lr}
    3c16:	0042      	lsls	r2, r0, #1
    3c18:	0245      	lsls	r5, r0, #9
    3c1a:	024c      	lsls	r4, r1, #9
    3c1c:	0fc3      	lsrs	r3, r0, #31
    3c1e:	0048      	lsls	r0, r1, #1
    3c20:	0a6d      	lsrs	r5, r5, #9
    3c22:	0e12      	lsrs	r2, r2, #24
    3c24:	0a64      	lsrs	r4, r4, #9
    3c26:	0e00      	lsrs	r0, r0, #24
    3c28:	0fc9      	lsrs	r1, r1, #31
    3c2a:	2aff      	cmp	r2, #255	; 0xff
    3c2c:	d01e      	beq.n	3c6c <__gesf2+0x58>
    3c2e:	28ff      	cmp	r0, #255	; 0xff
    3c30:	d021      	beq.n	3c76 <__gesf2+0x62>
    3c32:	2a00      	cmp	r2, #0
    3c34:	d10a      	bne.n	3c4c <__gesf2+0x38>
    3c36:	426e      	negs	r6, r5
    3c38:	416e      	adcs	r6, r5
    3c3a:	b2f6      	uxtb	r6, r6
    3c3c:	2800      	cmp	r0, #0
    3c3e:	d10f      	bne.n	3c60 <__gesf2+0x4c>
    3c40:	2c00      	cmp	r4, #0
    3c42:	d10d      	bne.n	3c60 <__gesf2+0x4c>
    3c44:	2000      	movs	r0, #0
    3c46:	2d00      	cmp	r5, #0
    3c48:	d009      	beq.n	3c5e <__gesf2+0x4a>
    3c4a:	e005      	b.n	3c58 <__gesf2+0x44>
    3c4c:	2800      	cmp	r0, #0
    3c4e:	d101      	bne.n	3c54 <__gesf2+0x40>
    3c50:	2c00      	cmp	r4, #0
    3c52:	d001      	beq.n	3c58 <__gesf2+0x44>
    3c54:	428b      	cmp	r3, r1
    3c56:	d011      	beq.n	3c7c <__gesf2+0x68>
    3c58:	2101      	movs	r1, #1
    3c5a:	4258      	negs	r0, r3
    3c5c:	4308      	orrs	r0, r1
    3c5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3c60:	2e00      	cmp	r6, #0
    3c62:	d0f7      	beq.n	3c54 <__gesf2+0x40>
    3c64:	2001      	movs	r0, #1
    3c66:	3901      	subs	r1, #1
    3c68:	4308      	orrs	r0, r1
    3c6a:	e7f8      	b.n	3c5e <__gesf2+0x4a>
    3c6c:	2d00      	cmp	r5, #0
    3c6e:	d0de      	beq.n	3c2e <__gesf2+0x1a>
    3c70:	2002      	movs	r0, #2
    3c72:	4240      	negs	r0, r0
    3c74:	e7f3      	b.n	3c5e <__gesf2+0x4a>
    3c76:	2c00      	cmp	r4, #0
    3c78:	d0db      	beq.n	3c32 <__gesf2+0x1e>
    3c7a:	e7f9      	b.n	3c70 <__gesf2+0x5c>
    3c7c:	4282      	cmp	r2, r0
    3c7e:	dceb      	bgt.n	3c58 <__gesf2+0x44>
    3c80:	db04      	blt.n	3c8c <__gesf2+0x78>
    3c82:	42a5      	cmp	r5, r4
    3c84:	d8e8      	bhi.n	3c58 <__gesf2+0x44>
    3c86:	2000      	movs	r0, #0
    3c88:	42a5      	cmp	r5, r4
    3c8a:	d2e8      	bcs.n	3c5e <__gesf2+0x4a>
    3c8c:	2101      	movs	r1, #1
    3c8e:	1e58      	subs	r0, r3, #1
    3c90:	4308      	orrs	r0, r1
    3c92:	e7e4      	b.n	3c5e <__gesf2+0x4a>

00003c94 <__lesf2>:
    3c94:	b5f0      	push	{r4, r5, r6, r7, lr}
    3c96:	0042      	lsls	r2, r0, #1
    3c98:	024d      	lsls	r5, r1, #9
    3c9a:	004c      	lsls	r4, r1, #1
    3c9c:	0246      	lsls	r6, r0, #9
    3c9e:	0a76      	lsrs	r6, r6, #9
    3ca0:	0e12      	lsrs	r2, r2, #24
    3ca2:	0fc3      	lsrs	r3, r0, #31
    3ca4:	0a6d      	lsrs	r5, r5, #9
    3ca6:	0e24      	lsrs	r4, r4, #24
    3ca8:	0fc9      	lsrs	r1, r1, #31
    3caa:	2aff      	cmp	r2, #255	; 0xff
    3cac:	d016      	beq.n	3cdc <__lesf2+0x48>
    3cae:	2cff      	cmp	r4, #255	; 0xff
    3cb0:	d018      	beq.n	3ce4 <__lesf2+0x50>
    3cb2:	2a00      	cmp	r2, #0
    3cb4:	d10a      	bne.n	3ccc <__lesf2+0x38>
    3cb6:	4270      	negs	r0, r6
    3cb8:	4170      	adcs	r0, r6
    3cba:	b2c0      	uxtb	r0, r0
    3cbc:	2c00      	cmp	r4, #0
    3cbe:	d015      	beq.n	3cec <__lesf2+0x58>
    3cc0:	2800      	cmp	r0, #0
    3cc2:	d005      	beq.n	3cd0 <__lesf2+0x3c>
    3cc4:	2001      	movs	r0, #1
    3cc6:	3901      	subs	r1, #1
    3cc8:	4308      	orrs	r0, r1
    3cca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3ccc:	2c00      	cmp	r4, #0
    3cce:	d013      	beq.n	3cf8 <__lesf2+0x64>
    3cd0:	4299      	cmp	r1, r3
    3cd2:	d014      	beq.n	3cfe <__lesf2+0x6a>
    3cd4:	2001      	movs	r0, #1
    3cd6:	425b      	negs	r3, r3
    3cd8:	4318      	orrs	r0, r3
    3cda:	e7f6      	b.n	3cca <__lesf2+0x36>
    3cdc:	2002      	movs	r0, #2
    3cde:	2e00      	cmp	r6, #0
    3ce0:	d1f3      	bne.n	3cca <__lesf2+0x36>
    3ce2:	e7e4      	b.n	3cae <__lesf2+0x1a>
    3ce4:	2002      	movs	r0, #2
    3ce6:	2d00      	cmp	r5, #0
    3ce8:	d1ef      	bne.n	3cca <__lesf2+0x36>
    3cea:	e7e2      	b.n	3cb2 <__lesf2+0x1e>
    3cec:	2d00      	cmp	r5, #0
    3cee:	d1e7      	bne.n	3cc0 <__lesf2+0x2c>
    3cf0:	2000      	movs	r0, #0
    3cf2:	2e00      	cmp	r6, #0
    3cf4:	d0e9      	beq.n	3cca <__lesf2+0x36>
    3cf6:	e7ed      	b.n	3cd4 <__lesf2+0x40>
    3cf8:	2d00      	cmp	r5, #0
    3cfa:	d1e9      	bne.n	3cd0 <__lesf2+0x3c>
    3cfc:	e7ea      	b.n	3cd4 <__lesf2+0x40>
    3cfe:	42a2      	cmp	r2, r4
    3d00:	dc06      	bgt.n	3d10 <__lesf2+0x7c>
    3d02:	dbdf      	blt.n	3cc4 <__lesf2+0x30>
    3d04:	42ae      	cmp	r6, r5
    3d06:	d803      	bhi.n	3d10 <__lesf2+0x7c>
    3d08:	2000      	movs	r0, #0
    3d0a:	42ae      	cmp	r6, r5
    3d0c:	d3da      	bcc.n	3cc4 <__lesf2+0x30>
    3d0e:	e7dc      	b.n	3cca <__lesf2+0x36>
    3d10:	2001      	movs	r0, #1
    3d12:	4249      	negs	r1, r1
    3d14:	4308      	orrs	r0, r1
    3d16:	e7d8      	b.n	3cca <__lesf2+0x36>

00003d18 <__aeabi_fmul>:
    3d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3d1a:	4657      	mov	r7, sl
    3d1c:	464e      	mov	r6, r9
    3d1e:	4645      	mov	r5, r8
    3d20:	46de      	mov	lr, fp
    3d22:	b5e0      	push	{r5, r6, r7, lr}
    3d24:	0247      	lsls	r7, r0, #9
    3d26:	0046      	lsls	r6, r0, #1
    3d28:	4688      	mov	r8, r1
    3d2a:	0a7f      	lsrs	r7, r7, #9
    3d2c:	0e36      	lsrs	r6, r6, #24
    3d2e:	0fc4      	lsrs	r4, r0, #31
    3d30:	2e00      	cmp	r6, #0
    3d32:	d047      	beq.n	3dc4 <__aeabi_fmul+0xac>
    3d34:	2eff      	cmp	r6, #255	; 0xff
    3d36:	d024      	beq.n	3d82 <__aeabi_fmul+0x6a>
    3d38:	00fb      	lsls	r3, r7, #3
    3d3a:	2780      	movs	r7, #128	; 0x80
    3d3c:	04ff      	lsls	r7, r7, #19
    3d3e:	431f      	orrs	r7, r3
    3d40:	2300      	movs	r3, #0
    3d42:	4699      	mov	r9, r3
    3d44:	469a      	mov	sl, r3
    3d46:	3e7f      	subs	r6, #127	; 0x7f
    3d48:	4643      	mov	r3, r8
    3d4a:	025d      	lsls	r5, r3, #9
    3d4c:	0058      	lsls	r0, r3, #1
    3d4e:	0fdb      	lsrs	r3, r3, #31
    3d50:	0a6d      	lsrs	r5, r5, #9
    3d52:	0e00      	lsrs	r0, r0, #24
    3d54:	4698      	mov	r8, r3
    3d56:	d043      	beq.n	3de0 <__aeabi_fmul+0xc8>
    3d58:	28ff      	cmp	r0, #255	; 0xff
    3d5a:	d03b      	beq.n	3dd4 <__aeabi_fmul+0xbc>
    3d5c:	00eb      	lsls	r3, r5, #3
    3d5e:	2580      	movs	r5, #128	; 0x80
    3d60:	2200      	movs	r2, #0
    3d62:	04ed      	lsls	r5, r5, #19
    3d64:	431d      	orrs	r5, r3
    3d66:	387f      	subs	r0, #127	; 0x7f
    3d68:	1836      	adds	r6, r6, r0
    3d6a:	1c73      	adds	r3, r6, #1
    3d6c:	4641      	mov	r1, r8
    3d6e:	469b      	mov	fp, r3
    3d70:	464b      	mov	r3, r9
    3d72:	4061      	eors	r1, r4
    3d74:	4313      	orrs	r3, r2
    3d76:	2b0f      	cmp	r3, #15
    3d78:	d864      	bhi.n	3e44 <__aeabi_fmul+0x12c>
    3d7a:	4875      	ldr	r0, [pc, #468]	; (3f50 <__aeabi_fmul+0x238>)
    3d7c:	009b      	lsls	r3, r3, #2
    3d7e:	58c3      	ldr	r3, [r0, r3]
    3d80:	469f      	mov	pc, r3
    3d82:	2f00      	cmp	r7, #0
    3d84:	d142      	bne.n	3e0c <__aeabi_fmul+0xf4>
    3d86:	2308      	movs	r3, #8
    3d88:	4699      	mov	r9, r3
    3d8a:	3b06      	subs	r3, #6
    3d8c:	26ff      	movs	r6, #255	; 0xff
    3d8e:	469a      	mov	sl, r3
    3d90:	e7da      	b.n	3d48 <__aeabi_fmul+0x30>
    3d92:	4641      	mov	r1, r8
    3d94:	2a02      	cmp	r2, #2
    3d96:	d028      	beq.n	3dea <__aeabi_fmul+0xd2>
    3d98:	2a03      	cmp	r2, #3
    3d9a:	d100      	bne.n	3d9e <__aeabi_fmul+0x86>
    3d9c:	e0ce      	b.n	3f3c <__aeabi_fmul+0x224>
    3d9e:	2a01      	cmp	r2, #1
    3da0:	d000      	beq.n	3da4 <__aeabi_fmul+0x8c>
    3da2:	e0ac      	b.n	3efe <__aeabi_fmul+0x1e6>
    3da4:	4011      	ands	r1, r2
    3da6:	2000      	movs	r0, #0
    3da8:	2200      	movs	r2, #0
    3daa:	b2cc      	uxtb	r4, r1
    3dac:	0240      	lsls	r0, r0, #9
    3dae:	05d2      	lsls	r2, r2, #23
    3db0:	0a40      	lsrs	r0, r0, #9
    3db2:	07e4      	lsls	r4, r4, #31
    3db4:	4310      	orrs	r0, r2
    3db6:	4320      	orrs	r0, r4
    3db8:	bc3c      	pop	{r2, r3, r4, r5}
    3dba:	4690      	mov	r8, r2
    3dbc:	4699      	mov	r9, r3
    3dbe:	46a2      	mov	sl, r4
    3dc0:	46ab      	mov	fp, r5
    3dc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3dc4:	2f00      	cmp	r7, #0
    3dc6:	d115      	bne.n	3df4 <__aeabi_fmul+0xdc>
    3dc8:	2304      	movs	r3, #4
    3dca:	4699      	mov	r9, r3
    3dcc:	3b03      	subs	r3, #3
    3dce:	2600      	movs	r6, #0
    3dd0:	469a      	mov	sl, r3
    3dd2:	e7b9      	b.n	3d48 <__aeabi_fmul+0x30>
    3dd4:	20ff      	movs	r0, #255	; 0xff
    3dd6:	2202      	movs	r2, #2
    3dd8:	2d00      	cmp	r5, #0
    3dda:	d0c5      	beq.n	3d68 <__aeabi_fmul+0x50>
    3ddc:	2203      	movs	r2, #3
    3dde:	e7c3      	b.n	3d68 <__aeabi_fmul+0x50>
    3de0:	2d00      	cmp	r5, #0
    3de2:	d119      	bne.n	3e18 <__aeabi_fmul+0x100>
    3de4:	2000      	movs	r0, #0
    3de6:	2201      	movs	r2, #1
    3de8:	e7be      	b.n	3d68 <__aeabi_fmul+0x50>
    3dea:	2401      	movs	r4, #1
    3dec:	22ff      	movs	r2, #255	; 0xff
    3dee:	400c      	ands	r4, r1
    3df0:	2000      	movs	r0, #0
    3df2:	e7db      	b.n	3dac <__aeabi_fmul+0x94>
    3df4:	0038      	movs	r0, r7
    3df6:	f002 f9cb 	bl	6190 <__clzsi2>
    3dfa:	2676      	movs	r6, #118	; 0x76
    3dfc:	1f43      	subs	r3, r0, #5
    3dfe:	409f      	lsls	r7, r3
    3e00:	2300      	movs	r3, #0
    3e02:	4276      	negs	r6, r6
    3e04:	1a36      	subs	r6, r6, r0
    3e06:	4699      	mov	r9, r3
    3e08:	469a      	mov	sl, r3
    3e0a:	e79d      	b.n	3d48 <__aeabi_fmul+0x30>
    3e0c:	230c      	movs	r3, #12
    3e0e:	4699      	mov	r9, r3
    3e10:	3b09      	subs	r3, #9
    3e12:	26ff      	movs	r6, #255	; 0xff
    3e14:	469a      	mov	sl, r3
    3e16:	e797      	b.n	3d48 <__aeabi_fmul+0x30>
    3e18:	0028      	movs	r0, r5
    3e1a:	f002 f9b9 	bl	6190 <__clzsi2>
    3e1e:	1f43      	subs	r3, r0, #5
    3e20:	409d      	lsls	r5, r3
    3e22:	2376      	movs	r3, #118	; 0x76
    3e24:	425b      	negs	r3, r3
    3e26:	1a18      	subs	r0, r3, r0
    3e28:	2200      	movs	r2, #0
    3e2a:	e79d      	b.n	3d68 <__aeabi_fmul+0x50>
    3e2c:	2080      	movs	r0, #128	; 0x80
    3e2e:	2400      	movs	r4, #0
    3e30:	03c0      	lsls	r0, r0, #15
    3e32:	22ff      	movs	r2, #255	; 0xff
    3e34:	e7ba      	b.n	3dac <__aeabi_fmul+0x94>
    3e36:	003d      	movs	r5, r7
    3e38:	4652      	mov	r2, sl
    3e3a:	e7ab      	b.n	3d94 <__aeabi_fmul+0x7c>
    3e3c:	003d      	movs	r5, r7
    3e3e:	0021      	movs	r1, r4
    3e40:	4652      	mov	r2, sl
    3e42:	e7a7      	b.n	3d94 <__aeabi_fmul+0x7c>
    3e44:	0c3b      	lsrs	r3, r7, #16
    3e46:	469c      	mov	ip, r3
    3e48:	042a      	lsls	r2, r5, #16
    3e4a:	0c12      	lsrs	r2, r2, #16
    3e4c:	0c2b      	lsrs	r3, r5, #16
    3e4e:	0014      	movs	r4, r2
    3e50:	4660      	mov	r0, ip
    3e52:	4665      	mov	r5, ip
    3e54:	043f      	lsls	r7, r7, #16
    3e56:	0c3f      	lsrs	r7, r7, #16
    3e58:	437c      	muls	r4, r7
    3e5a:	4342      	muls	r2, r0
    3e5c:	435d      	muls	r5, r3
    3e5e:	437b      	muls	r3, r7
    3e60:	0c27      	lsrs	r7, r4, #16
    3e62:	189b      	adds	r3, r3, r2
    3e64:	18ff      	adds	r7, r7, r3
    3e66:	42ba      	cmp	r2, r7
    3e68:	d903      	bls.n	3e72 <__aeabi_fmul+0x15a>
    3e6a:	2380      	movs	r3, #128	; 0x80
    3e6c:	025b      	lsls	r3, r3, #9
    3e6e:	469c      	mov	ip, r3
    3e70:	4465      	add	r5, ip
    3e72:	0424      	lsls	r4, r4, #16
    3e74:	043a      	lsls	r2, r7, #16
    3e76:	0c24      	lsrs	r4, r4, #16
    3e78:	1912      	adds	r2, r2, r4
    3e7a:	0193      	lsls	r3, r2, #6
    3e7c:	1e5c      	subs	r4, r3, #1
    3e7e:	41a3      	sbcs	r3, r4
    3e80:	0c3f      	lsrs	r7, r7, #16
    3e82:	0e92      	lsrs	r2, r2, #26
    3e84:	197d      	adds	r5, r7, r5
    3e86:	431a      	orrs	r2, r3
    3e88:	01ad      	lsls	r5, r5, #6
    3e8a:	4315      	orrs	r5, r2
    3e8c:	012b      	lsls	r3, r5, #4
    3e8e:	d504      	bpl.n	3e9a <__aeabi_fmul+0x182>
    3e90:	2301      	movs	r3, #1
    3e92:	465e      	mov	r6, fp
    3e94:	086a      	lsrs	r2, r5, #1
    3e96:	401d      	ands	r5, r3
    3e98:	4315      	orrs	r5, r2
    3e9a:	0032      	movs	r2, r6
    3e9c:	327f      	adds	r2, #127	; 0x7f
    3e9e:	2a00      	cmp	r2, #0
    3ea0:	dd25      	ble.n	3eee <__aeabi_fmul+0x1d6>
    3ea2:	076b      	lsls	r3, r5, #29
    3ea4:	d004      	beq.n	3eb0 <__aeabi_fmul+0x198>
    3ea6:	230f      	movs	r3, #15
    3ea8:	402b      	ands	r3, r5
    3eaa:	2b04      	cmp	r3, #4
    3eac:	d000      	beq.n	3eb0 <__aeabi_fmul+0x198>
    3eae:	3504      	adds	r5, #4
    3eb0:	012b      	lsls	r3, r5, #4
    3eb2:	d503      	bpl.n	3ebc <__aeabi_fmul+0x1a4>
    3eb4:	0032      	movs	r2, r6
    3eb6:	4b27      	ldr	r3, [pc, #156]	; (3f54 <__aeabi_fmul+0x23c>)
    3eb8:	3280      	adds	r2, #128	; 0x80
    3eba:	401d      	ands	r5, r3
    3ebc:	2afe      	cmp	r2, #254	; 0xfe
    3ebe:	dc94      	bgt.n	3dea <__aeabi_fmul+0xd2>
    3ec0:	2401      	movs	r4, #1
    3ec2:	01a8      	lsls	r0, r5, #6
    3ec4:	0a40      	lsrs	r0, r0, #9
    3ec6:	b2d2      	uxtb	r2, r2
    3ec8:	400c      	ands	r4, r1
    3eca:	e76f      	b.n	3dac <__aeabi_fmul+0x94>
    3ecc:	2080      	movs	r0, #128	; 0x80
    3ece:	03c0      	lsls	r0, r0, #15
    3ed0:	4207      	tst	r7, r0
    3ed2:	d007      	beq.n	3ee4 <__aeabi_fmul+0x1cc>
    3ed4:	4205      	tst	r5, r0
    3ed6:	d105      	bne.n	3ee4 <__aeabi_fmul+0x1cc>
    3ed8:	4328      	orrs	r0, r5
    3eda:	0240      	lsls	r0, r0, #9
    3edc:	0a40      	lsrs	r0, r0, #9
    3ede:	4644      	mov	r4, r8
    3ee0:	22ff      	movs	r2, #255	; 0xff
    3ee2:	e763      	b.n	3dac <__aeabi_fmul+0x94>
    3ee4:	4338      	orrs	r0, r7
    3ee6:	0240      	lsls	r0, r0, #9
    3ee8:	0a40      	lsrs	r0, r0, #9
    3eea:	22ff      	movs	r2, #255	; 0xff
    3eec:	e75e      	b.n	3dac <__aeabi_fmul+0x94>
    3eee:	2401      	movs	r4, #1
    3ef0:	1aa3      	subs	r3, r4, r2
    3ef2:	2b1b      	cmp	r3, #27
    3ef4:	dd05      	ble.n	3f02 <__aeabi_fmul+0x1ea>
    3ef6:	400c      	ands	r4, r1
    3ef8:	2200      	movs	r2, #0
    3efa:	2000      	movs	r0, #0
    3efc:	e756      	b.n	3dac <__aeabi_fmul+0x94>
    3efe:	465e      	mov	r6, fp
    3f00:	e7cb      	b.n	3e9a <__aeabi_fmul+0x182>
    3f02:	002a      	movs	r2, r5
    3f04:	2020      	movs	r0, #32
    3f06:	40da      	lsrs	r2, r3
    3f08:	1ac3      	subs	r3, r0, r3
    3f0a:	409d      	lsls	r5, r3
    3f0c:	002b      	movs	r3, r5
    3f0e:	1e5d      	subs	r5, r3, #1
    3f10:	41ab      	sbcs	r3, r5
    3f12:	4313      	orrs	r3, r2
    3f14:	075a      	lsls	r2, r3, #29
    3f16:	d004      	beq.n	3f22 <__aeabi_fmul+0x20a>
    3f18:	220f      	movs	r2, #15
    3f1a:	401a      	ands	r2, r3
    3f1c:	2a04      	cmp	r2, #4
    3f1e:	d000      	beq.n	3f22 <__aeabi_fmul+0x20a>
    3f20:	3304      	adds	r3, #4
    3f22:	015a      	lsls	r2, r3, #5
    3f24:	d504      	bpl.n	3f30 <__aeabi_fmul+0x218>
    3f26:	2401      	movs	r4, #1
    3f28:	2201      	movs	r2, #1
    3f2a:	400c      	ands	r4, r1
    3f2c:	2000      	movs	r0, #0
    3f2e:	e73d      	b.n	3dac <__aeabi_fmul+0x94>
    3f30:	2401      	movs	r4, #1
    3f32:	019b      	lsls	r3, r3, #6
    3f34:	0a58      	lsrs	r0, r3, #9
    3f36:	400c      	ands	r4, r1
    3f38:	2200      	movs	r2, #0
    3f3a:	e737      	b.n	3dac <__aeabi_fmul+0x94>
    3f3c:	2080      	movs	r0, #128	; 0x80
    3f3e:	2401      	movs	r4, #1
    3f40:	03c0      	lsls	r0, r0, #15
    3f42:	4328      	orrs	r0, r5
    3f44:	0240      	lsls	r0, r0, #9
    3f46:	0a40      	lsrs	r0, r0, #9
    3f48:	400c      	ands	r4, r1
    3f4a:	22ff      	movs	r2, #255	; 0xff
    3f4c:	e72e      	b.n	3dac <__aeabi_fmul+0x94>
    3f4e:	46c0      	nop			; (mov r8, r8)
    3f50:	000063a0 	.word	0x000063a0
    3f54:	f7ffffff 	.word	0xf7ffffff

00003f58 <__aeabi_fsub>:
    3f58:	b5f0      	push	{r4, r5, r6, r7, lr}
    3f5a:	464f      	mov	r7, r9
    3f5c:	46d6      	mov	lr, sl
    3f5e:	4646      	mov	r6, r8
    3f60:	0044      	lsls	r4, r0, #1
    3f62:	b5c0      	push	{r6, r7, lr}
    3f64:	0fc2      	lsrs	r2, r0, #31
    3f66:	0247      	lsls	r7, r0, #9
    3f68:	0248      	lsls	r0, r1, #9
    3f6a:	0a40      	lsrs	r0, r0, #9
    3f6c:	4684      	mov	ip, r0
    3f6e:	4666      	mov	r6, ip
    3f70:	0a7b      	lsrs	r3, r7, #9
    3f72:	0048      	lsls	r0, r1, #1
    3f74:	0fc9      	lsrs	r1, r1, #31
    3f76:	469a      	mov	sl, r3
    3f78:	0e24      	lsrs	r4, r4, #24
    3f7a:	0015      	movs	r5, r2
    3f7c:	00db      	lsls	r3, r3, #3
    3f7e:	0e00      	lsrs	r0, r0, #24
    3f80:	4689      	mov	r9, r1
    3f82:	00f6      	lsls	r6, r6, #3
    3f84:	28ff      	cmp	r0, #255	; 0xff
    3f86:	d100      	bne.n	3f8a <__aeabi_fsub+0x32>
    3f88:	e08f      	b.n	40aa <__aeabi_fsub+0x152>
    3f8a:	2101      	movs	r1, #1
    3f8c:	464f      	mov	r7, r9
    3f8e:	404f      	eors	r7, r1
    3f90:	0039      	movs	r1, r7
    3f92:	4291      	cmp	r1, r2
    3f94:	d066      	beq.n	4064 <__aeabi_fsub+0x10c>
    3f96:	1a22      	subs	r2, r4, r0
    3f98:	2a00      	cmp	r2, #0
    3f9a:	dc00      	bgt.n	3f9e <__aeabi_fsub+0x46>
    3f9c:	e09d      	b.n	40da <__aeabi_fsub+0x182>
    3f9e:	2800      	cmp	r0, #0
    3fa0:	d13d      	bne.n	401e <__aeabi_fsub+0xc6>
    3fa2:	2e00      	cmp	r6, #0
    3fa4:	d100      	bne.n	3fa8 <__aeabi_fsub+0x50>
    3fa6:	e08b      	b.n	40c0 <__aeabi_fsub+0x168>
    3fa8:	1e51      	subs	r1, r2, #1
    3faa:	2900      	cmp	r1, #0
    3fac:	d000      	beq.n	3fb0 <__aeabi_fsub+0x58>
    3fae:	e0b5      	b.n	411c <__aeabi_fsub+0x1c4>
    3fb0:	2401      	movs	r4, #1
    3fb2:	1b9b      	subs	r3, r3, r6
    3fb4:	015a      	lsls	r2, r3, #5
    3fb6:	d544      	bpl.n	4042 <__aeabi_fsub+0xea>
    3fb8:	019b      	lsls	r3, r3, #6
    3fba:	099f      	lsrs	r7, r3, #6
    3fbc:	0038      	movs	r0, r7
    3fbe:	f002 f8e7 	bl	6190 <__clzsi2>
    3fc2:	3805      	subs	r0, #5
    3fc4:	4087      	lsls	r7, r0
    3fc6:	4284      	cmp	r4, r0
    3fc8:	dd00      	ble.n	3fcc <__aeabi_fsub+0x74>
    3fca:	e096      	b.n	40fa <__aeabi_fsub+0x1a2>
    3fcc:	1b04      	subs	r4, r0, r4
    3fce:	003a      	movs	r2, r7
    3fd0:	2020      	movs	r0, #32
    3fd2:	3401      	adds	r4, #1
    3fd4:	40e2      	lsrs	r2, r4
    3fd6:	1b04      	subs	r4, r0, r4
    3fd8:	40a7      	lsls	r7, r4
    3fda:	003b      	movs	r3, r7
    3fdc:	1e5f      	subs	r7, r3, #1
    3fde:	41bb      	sbcs	r3, r7
    3fe0:	2400      	movs	r4, #0
    3fe2:	4313      	orrs	r3, r2
    3fe4:	075a      	lsls	r2, r3, #29
    3fe6:	d004      	beq.n	3ff2 <__aeabi_fsub+0x9a>
    3fe8:	220f      	movs	r2, #15
    3fea:	401a      	ands	r2, r3
    3fec:	2a04      	cmp	r2, #4
    3fee:	d000      	beq.n	3ff2 <__aeabi_fsub+0x9a>
    3ff0:	3304      	adds	r3, #4
    3ff2:	015a      	lsls	r2, r3, #5
    3ff4:	d527      	bpl.n	4046 <__aeabi_fsub+0xee>
    3ff6:	3401      	adds	r4, #1
    3ff8:	2cff      	cmp	r4, #255	; 0xff
    3ffa:	d100      	bne.n	3ffe <__aeabi_fsub+0xa6>
    3ffc:	e079      	b.n	40f2 <__aeabi_fsub+0x19a>
    3ffe:	2201      	movs	r2, #1
    4000:	019b      	lsls	r3, r3, #6
    4002:	0a5b      	lsrs	r3, r3, #9
    4004:	b2e4      	uxtb	r4, r4
    4006:	402a      	ands	r2, r5
    4008:	025b      	lsls	r3, r3, #9
    400a:	05e4      	lsls	r4, r4, #23
    400c:	0a58      	lsrs	r0, r3, #9
    400e:	07d2      	lsls	r2, r2, #31
    4010:	4320      	orrs	r0, r4
    4012:	4310      	orrs	r0, r2
    4014:	bc1c      	pop	{r2, r3, r4}
    4016:	4690      	mov	r8, r2
    4018:	4699      	mov	r9, r3
    401a:	46a2      	mov	sl, r4
    401c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    401e:	2cff      	cmp	r4, #255	; 0xff
    4020:	d0e0      	beq.n	3fe4 <__aeabi_fsub+0x8c>
    4022:	2180      	movs	r1, #128	; 0x80
    4024:	04c9      	lsls	r1, r1, #19
    4026:	430e      	orrs	r6, r1
    4028:	2a1b      	cmp	r2, #27
    402a:	dc7b      	bgt.n	4124 <__aeabi_fsub+0x1cc>
    402c:	0031      	movs	r1, r6
    402e:	2020      	movs	r0, #32
    4030:	40d1      	lsrs	r1, r2
    4032:	1a82      	subs	r2, r0, r2
    4034:	4096      	lsls	r6, r2
    4036:	1e72      	subs	r2, r6, #1
    4038:	4196      	sbcs	r6, r2
    403a:	430e      	orrs	r6, r1
    403c:	1b9b      	subs	r3, r3, r6
    403e:	015a      	lsls	r2, r3, #5
    4040:	d4ba      	bmi.n	3fb8 <__aeabi_fsub+0x60>
    4042:	075a      	lsls	r2, r3, #29
    4044:	d1d0      	bne.n	3fe8 <__aeabi_fsub+0x90>
    4046:	2201      	movs	r2, #1
    4048:	08df      	lsrs	r7, r3, #3
    404a:	402a      	ands	r2, r5
    404c:	2cff      	cmp	r4, #255	; 0xff
    404e:	d133      	bne.n	40b8 <__aeabi_fsub+0x160>
    4050:	2f00      	cmp	r7, #0
    4052:	d100      	bne.n	4056 <__aeabi_fsub+0xfe>
    4054:	e0a8      	b.n	41a8 <__aeabi_fsub+0x250>
    4056:	2380      	movs	r3, #128	; 0x80
    4058:	03db      	lsls	r3, r3, #15
    405a:	433b      	orrs	r3, r7
    405c:	025b      	lsls	r3, r3, #9
    405e:	0a5b      	lsrs	r3, r3, #9
    4060:	24ff      	movs	r4, #255	; 0xff
    4062:	e7d1      	b.n	4008 <__aeabi_fsub+0xb0>
    4064:	1a21      	subs	r1, r4, r0
    4066:	2900      	cmp	r1, #0
    4068:	dd4c      	ble.n	4104 <__aeabi_fsub+0x1ac>
    406a:	2800      	cmp	r0, #0
    406c:	d02a      	beq.n	40c4 <__aeabi_fsub+0x16c>
    406e:	2cff      	cmp	r4, #255	; 0xff
    4070:	d0b8      	beq.n	3fe4 <__aeabi_fsub+0x8c>
    4072:	2080      	movs	r0, #128	; 0x80
    4074:	04c0      	lsls	r0, r0, #19
    4076:	4306      	orrs	r6, r0
    4078:	291b      	cmp	r1, #27
    407a:	dd00      	ble.n	407e <__aeabi_fsub+0x126>
    407c:	e0af      	b.n	41de <__aeabi_fsub+0x286>
    407e:	0030      	movs	r0, r6
    4080:	2720      	movs	r7, #32
    4082:	40c8      	lsrs	r0, r1
    4084:	1a79      	subs	r1, r7, r1
    4086:	408e      	lsls	r6, r1
    4088:	1e71      	subs	r1, r6, #1
    408a:	418e      	sbcs	r6, r1
    408c:	4306      	orrs	r6, r0
    408e:	199b      	adds	r3, r3, r6
    4090:	0159      	lsls	r1, r3, #5
    4092:	d5d6      	bpl.n	4042 <__aeabi_fsub+0xea>
    4094:	3401      	adds	r4, #1
    4096:	2cff      	cmp	r4, #255	; 0xff
    4098:	d100      	bne.n	409c <__aeabi_fsub+0x144>
    409a:	e085      	b.n	41a8 <__aeabi_fsub+0x250>
    409c:	2201      	movs	r2, #1
    409e:	497a      	ldr	r1, [pc, #488]	; (4288 <__aeabi_fsub+0x330>)
    40a0:	401a      	ands	r2, r3
    40a2:	085b      	lsrs	r3, r3, #1
    40a4:	400b      	ands	r3, r1
    40a6:	4313      	orrs	r3, r2
    40a8:	e79c      	b.n	3fe4 <__aeabi_fsub+0x8c>
    40aa:	2e00      	cmp	r6, #0
    40ac:	d000      	beq.n	40b0 <__aeabi_fsub+0x158>
    40ae:	e770      	b.n	3f92 <__aeabi_fsub+0x3a>
    40b0:	e76b      	b.n	3f8a <__aeabi_fsub+0x32>
    40b2:	1e3b      	subs	r3, r7, #0
    40b4:	d1c5      	bne.n	4042 <__aeabi_fsub+0xea>
    40b6:	2200      	movs	r2, #0
    40b8:	027b      	lsls	r3, r7, #9
    40ba:	0a5b      	lsrs	r3, r3, #9
    40bc:	b2e4      	uxtb	r4, r4
    40be:	e7a3      	b.n	4008 <__aeabi_fsub+0xb0>
    40c0:	0014      	movs	r4, r2
    40c2:	e78f      	b.n	3fe4 <__aeabi_fsub+0x8c>
    40c4:	2e00      	cmp	r6, #0
    40c6:	d04d      	beq.n	4164 <__aeabi_fsub+0x20c>
    40c8:	1e48      	subs	r0, r1, #1
    40ca:	2800      	cmp	r0, #0
    40cc:	d157      	bne.n	417e <__aeabi_fsub+0x226>
    40ce:	199b      	adds	r3, r3, r6
    40d0:	2401      	movs	r4, #1
    40d2:	015a      	lsls	r2, r3, #5
    40d4:	d5b5      	bpl.n	4042 <__aeabi_fsub+0xea>
    40d6:	2402      	movs	r4, #2
    40d8:	e7e0      	b.n	409c <__aeabi_fsub+0x144>
    40da:	2a00      	cmp	r2, #0
    40dc:	d125      	bne.n	412a <__aeabi_fsub+0x1d2>
    40de:	1c62      	adds	r2, r4, #1
    40e0:	b2d2      	uxtb	r2, r2
    40e2:	2a01      	cmp	r2, #1
    40e4:	dd72      	ble.n	41cc <__aeabi_fsub+0x274>
    40e6:	1b9f      	subs	r7, r3, r6
    40e8:	017a      	lsls	r2, r7, #5
    40ea:	d535      	bpl.n	4158 <__aeabi_fsub+0x200>
    40ec:	1af7      	subs	r7, r6, r3
    40ee:	000d      	movs	r5, r1
    40f0:	e764      	b.n	3fbc <__aeabi_fsub+0x64>
    40f2:	2201      	movs	r2, #1
    40f4:	2300      	movs	r3, #0
    40f6:	402a      	ands	r2, r5
    40f8:	e786      	b.n	4008 <__aeabi_fsub+0xb0>
    40fa:	003b      	movs	r3, r7
    40fc:	4a63      	ldr	r2, [pc, #396]	; (428c <__aeabi_fsub+0x334>)
    40fe:	1a24      	subs	r4, r4, r0
    4100:	4013      	ands	r3, r2
    4102:	e76f      	b.n	3fe4 <__aeabi_fsub+0x8c>
    4104:	2900      	cmp	r1, #0
    4106:	d16c      	bne.n	41e2 <__aeabi_fsub+0x28a>
    4108:	1c61      	adds	r1, r4, #1
    410a:	b2c8      	uxtb	r0, r1
    410c:	2801      	cmp	r0, #1
    410e:	dd4e      	ble.n	41ae <__aeabi_fsub+0x256>
    4110:	29ff      	cmp	r1, #255	; 0xff
    4112:	d049      	beq.n	41a8 <__aeabi_fsub+0x250>
    4114:	199b      	adds	r3, r3, r6
    4116:	085b      	lsrs	r3, r3, #1
    4118:	000c      	movs	r4, r1
    411a:	e763      	b.n	3fe4 <__aeabi_fsub+0x8c>
    411c:	2aff      	cmp	r2, #255	; 0xff
    411e:	d041      	beq.n	41a4 <__aeabi_fsub+0x24c>
    4120:	000a      	movs	r2, r1
    4122:	e781      	b.n	4028 <__aeabi_fsub+0xd0>
    4124:	2601      	movs	r6, #1
    4126:	1b9b      	subs	r3, r3, r6
    4128:	e789      	b.n	403e <__aeabi_fsub+0xe6>
    412a:	2c00      	cmp	r4, #0
    412c:	d01c      	beq.n	4168 <__aeabi_fsub+0x210>
    412e:	28ff      	cmp	r0, #255	; 0xff
    4130:	d021      	beq.n	4176 <__aeabi_fsub+0x21e>
    4132:	2480      	movs	r4, #128	; 0x80
    4134:	04e4      	lsls	r4, r4, #19
    4136:	4252      	negs	r2, r2
    4138:	4323      	orrs	r3, r4
    413a:	2a1b      	cmp	r2, #27
    413c:	dd00      	ble.n	4140 <__aeabi_fsub+0x1e8>
    413e:	e096      	b.n	426e <__aeabi_fsub+0x316>
    4140:	001c      	movs	r4, r3
    4142:	2520      	movs	r5, #32
    4144:	40d4      	lsrs	r4, r2
    4146:	1aaa      	subs	r2, r5, r2
    4148:	4093      	lsls	r3, r2
    414a:	1e5a      	subs	r2, r3, #1
    414c:	4193      	sbcs	r3, r2
    414e:	4323      	orrs	r3, r4
    4150:	1af3      	subs	r3, r6, r3
    4152:	0004      	movs	r4, r0
    4154:	000d      	movs	r5, r1
    4156:	e72d      	b.n	3fb4 <__aeabi_fsub+0x5c>
    4158:	2f00      	cmp	r7, #0
    415a:	d000      	beq.n	415e <__aeabi_fsub+0x206>
    415c:	e72e      	b.n	3fbc <__aeabi_fsub+0x64>
    415e:	2200      	movs	r2, #0
    4160:	2400      	movs	r4, #0
    4162:	e7a9      	b.n	40b8 <__aeabi_fsub+0x160>
    4164:	000c      	movs	r4, r1
    4166:	e73d      	b.n	3fe4 <__aeabi_fsub+0x8c>
    4168:	2b00      	cmp	r3, #0
    416a:	d058      	beq.n	421e <__aeabi_fsub+0x2c6>
    416c:	43d2      	mvns	r2, r2
    416e:	2a00      	cmp	r2, #0
    4170:	d0ee      	beq.n	4150 <__aeabi_fsub+0x1f8>
    4172:	28ff      	cmp	r0, #255	; 0xff
    4174:	d1e1      	bne.n	413a <__aeabi_fsub+0x1e2>
    4176:	0033      	movs	r3, r6
    4178:	24ff      	movs	r4, #255	; 0xff
    417a:	000d      	movs	r5, r1
    417c:	e732      	b.n	3fe4 <__aeabi_fsub+0x8c>
    417e:	29ff      	cmp	r1, #255	; 0xff
    4180:	d010      	beq.n	41a4 <__aeabi_fsub+0x24c>
    4182:	0001      	movs	r1, r0
    4184:	e778      	b.n	4078 <__aeabi_fsub+0x120>
    4186:	2b00      	cmp	r3, #0
    4188:	d06e      	beq.n	4268 <__aeabi_fsub+0x310>
    418a:	24ff      	movs	r4, #255	; 0xff
    418c:	2e00      	cmp	r6, #0
    418e:	d100      	bne.n	4192 <__aeabi_fsub+0x23a>
    4190:	e728      	b.n	3fe4 <__aeabi_fsub+0x8c>
    4192:	2280      	movs	r2, #128	; 0x80
    4194:	4651      	mov	r1, sl
    4196:	03d2      	lsls	r2, r2, #15
    4198:	4211      	tst	r1, r2
    419a:	d003      	beq.n	41a4 <__aeabi_fsub+0x24c>
    419c:	4661      	mov	r1, ip
    419e:	4211      	tst	r1, r2
    41a0:	d100      	bne.n	41a4 <__aeabi_fsub+0x24c>
    41a2:	0033      	movs	r3, r6
    41a4:	24ff      	movs	r4, #255	; 0xff
    41a6:	e71d      	b.n	3fe4 <__aeabi_fsub+0x8c>
    41a8:	24ff      	movs	r4, #255	; 0xff
    41aa:	2300      	movs	r3, #0
    41ac:	e72c      	b.n	4008 <__aeabi_fsub+0xb0>
    41ae:	2c00      	cmp	r4, #0
    41b0:	d1e9      	bne.n	4186 <__aeabi_fsub+0x22e>
    41b2:	2b00      	cmp	r3, #0
    41b4:	d063      	beq.n	427e <__aeabi_fsub+0x326>
    41b6:	2e00      	cmp	r6, #0
    41b8:	d100      	bne.n	41bc <__aeabi_fsub+0x264>
    41ba:	e713      	b.n	3fe4 <__aeabi_fsub+0x8c>
    41bc:	199b      	adds	r3, r3, r6
    41be:	015a      	lsls	r2, r3, #5
    41c0:	d400      	bmi.n	41c4 <__aeabi_fsub+0x26c>
    41c2:	e73e      	b.n	4042 <__aeabi_fsub+0xea>
    41c4:	4a31      	ldr	r2, [pc, #196]	; (428c <__aeabi_fsub+0x334>)
    41c6:	000c      	movs	r4, r1
    41c8:	4013      	ands	r3, r2
    41ca:	e70b      	b.n	3fe4 <__aeabi_fsub+0x8c>
    41cc:	2c00      	cmp	r4, #0
    41ce:	d11e      	bne.n	420e <__aeabi_fsub+0x2b6>
    41d0:	2b00      	cmp	r3, #0
    41d2:	d12f      	bne.n	4234 <__aeabi_fsub+0x2dc>
    41d4:	2e00      	cmp	r6, #0
    41d6:	d04f      	beq.n	4278 <__aeabi_fsub+0x320>
    41d8:	0033      	movs	r3, r6
    41da:	000d      	movs	r5, r1
    41dc:	e702      	b.n	3fe4 <__aeabi_fsub+0x8c>
    41de:	2601      	movs	r6, #1
    41e0:	e755      	b.n	408e <__aeabi_fsub+0x136>
    41e2:	2c00      	cmp	r4, #0
    41e4:	d11f      	bne.n	4226 <__aeabi_fsub+0x2ce>
    41e6:	2b00      	cmp	r3, #0
    41e8:	d043      	beq.n	4272 <__aeabi_fsub+0x31a>
    41ea:	43c9      	mvns	r1, r1
    41ec:	2900      	cmp	r1, #0
    41ee:	d00b      	beq.n	4208 <__aeabi_fsub+0x2b0>
    41f0:	28ff      	cmp	r0, #255	; 0xff
    41f2:	d039      	beq.n	4268 <__aeabi_fsub+0x310>
    41f4:	291b      	cmp	r1, #27
    41f6:	dc44      	bgt.n	4282 <__aeabi_fsub+0x32a>
    41f8:	001c      	movs	r4, r3
    41fa:	2720      	movs	r7, #32
    41fc:	40cc      	lsrs	r4, r1
    41fe:	1a79      	subs	r1, r7, r1
    4200:	408b      	lsls	r3, r1
    4202:	1e59      	subs	r1, r3, #1
    4204:	418b      	sbcs	r3, r1
    4206:	4323      	orrs	r3, r4
    4208:	199b      	adds	r3, r3, r6
    420a:	0004      	movs	r4, r0
    420c:	e740      	b.n	4090 <__aeabi_fsub+0x138>
    420e:	2b00      	cmp	r3, #0
    4210:	d11a      	bne.n	4248 <__aeabi_fsub+0x2f0>
    4212:	2e00      	cmp	r6, #0
    4214:	d124      	bne.n	4260 <__aeabi_fsub+0x308>
    4216:	2780      	movs	r7, #128	; 0x80
    4218:	2200      	movs	r2, #0
    421a:	03ff      	lsls	r7, r7, #15
    421c:	e71b      	b.n	4056 <__aeabi_fsub+0xfe>
    421e:	0033      	movs	r3, r6
    4220:	0004      	movs	r4, r0
    4222:	000d      	movs	r5, r1
    4224:	e6de      	b.n	3fe4 <__aeabi_fsub+0x8c>
    4226:	28ff      	cmp	r0, #255	; 0xff
    4228:	d01e      	beq.n	4268 <__aeabi_fsub+0x310>
    422a:	2480      	movs	r4, #128	; 0x80
    422c:	04e4      	lsls	r4, r4, #19
    422e:	4249      	negs	r1, r1
    4230:	4323      	orrs	r3, r4
    4232:	e7df      	b.n	41f4 <__aeabi_fsub+0x29c>
    4234:	2e00      	cmp	r6, #0
    4236:	d100      	bne.n	423a <__aeabi_fsub+0x2e2>
    4238:	e6d4      	b.n	3fe4 <__aeabi_fsub+0x8c>
    423a:	1b9f      	subs	r7, r3, r6
    423c:	017a      	lsls	r2, r7, #5
    423e:	d400      	bmi.n	4242 <__aeabi_fsub+0x2ea>
    4240:	e737      	b.n	40b2 <__aeabi_fsub+0x15a>
    4242:	1af3      	subs	r3, r6, r3
    4244:	000d      	movs	r5, r1
    4246:	e6cd      	b.n	3fe4 <__aeabi_fsub+0x8c>
    4248:	24ff      	movs	r4, #255	; 0xff
    424a:	2e00      	cmp	r6, #0
    424c:	d100      	bne.n	4250 <__aeabi_fsub+0x2f8>
    424e:	e6c9      	b.n	3fe4 <__aeabi_fsub+0x8c>
    4250:	2280      	movs	r2, #128	; 0x80
    4252:	4650      	mov	r0, sl
    4254:	03d2      	lsls	r2, r2, #15
    4256:	4210      	tst	r0, r2
    4258:	d0a4      	beq.n	41a4 <__aeabi_fsub+0x24c>
    425a:	4660      	mov	r0, ip
    425c:	4210      	tst	r0, r2
    425e:	d1a1      	bne.n	41a4 <__aeabi_fsub+0x24c>
    4260:	0033      	movs	r3, r6
    4262:	000d      	movs	r5, r1
    4264:	24ff      	movs	r4, #255	; 0xff
    4266:	e6bd      	b.n	3fe4 <__aeabi_fsub+0x8c>
    4268:	0033      	movs	r3, r6
    426a:	24ff      	movs	r4, #255	; 0xff
    426c:	e6ba      	b.n	3fe4 <__aeabi_fsub+0x8c>
    426e:	2301      	movs	r3, #1
    4270:	e76e      	b.n	4150 <__aeabi_fsub+0x1f8>
    4272:	0033      	movs	r3, r6
    4274:	0004      	movs	r4, r0
    4276:	e6b5      	b.n	3fe4 <__aeabi_fsub+0x8c>
    4278:	2700      	movs	r7, #0
    427a:	2200      	movs	r2, #0
    427c:	e71c      	b.n	40b8 <__aeabi_fsub+0x160>
    427e:	0033      	movs	r3, r6
    4280:	e6b0      	b.n	3fe4 <__aeabi_fsub+0x8c>
    4282:	2301      	movs	r3, #1
    4284:	e7c0      	b.n	4208 <__aeabi_fsub+0x2b0>
    4286:	46c0      	nop			; (mov r8, r8)
    4288:	7dffffff 	.word	0x7dffffff
    428c:	fbffffff 	.word	0xfbffffff

00004290 <__aeabi_f2iz>:
    4290:	0241      	lsls	r1, r0, #9
    4292:	0043      	lsls	r3, r0, #1
    4294:	0fc2      	lsrs	r2, r0, #31
    4296:	0a49      	lsrs	r1, r1, #9
    4298:	0e1b      	lsrs	r3, r3, #24
    429a:	2000      	movs	r0, #0
    429c:	2b7e      	cmp	r3, #126	; 0x7e
    429e:	dd0d      	ble.n	42bc <__aeabi_f2iz+0x2c>
    42a0:	2b9d      	cmp	r3, #157	; 0x9d
    42a2:	dc0c      	bgt.n	42be <__aeabi_f2iz+0x2e>
    42a4:	2080      	movs	r0, #128	; 0x80
    42a6:	0400      	lsls	r0, r0, #16
    42a8:	4301      	orrs	r1, r0
    42aa:	2b95      	cmp	r3, #149	; 0x95
    42ac:	dc0a      	bgt.n	42c4 <__aeabi_f2iz+0x34>
    42ae:	2096      	movs	r0, #150	; 0x96
    42b0:	1ac3      	subs	r3, r0, r3
    42b2:	40d9      	lsrs	r1, r3
    42b4:	4248      	negs	r0, r1
    42b6:	2a00      	cmp	r2, #0
    42b8:	d100      	bne.n	42bc <__aeabi_f2iz+0x2c>
    42ba:	0008      	movs	r0, r1
    42bc:	4770      	bx	lr
    42be:	4b03      	ldr	r3, [pc, #12]	; (42cc <__aeabi_f2iz+0x3c>)
    42c0:	18d0      	adds	r0, r2, r3
    42c2:	e7fb      	b.n	42bc <__aeabi_f2iz+0x2c>
    42c4:	3b96      	subs	r3, #150	; 0x96
    42c6:	4099      	lsls	r1, r3
    42c8:	e7f4      	b.n	42b4 <__aeabi_f2iz+0x24>
    42ca:	46c0      	nop			; (mov r8, r8)
    42cc:	7fffffff 	.word	0x7fffffff

000042d0 <__aeabi_i2f>:
    42d0:	b570      	push	{r4, r5, r6, lr}
    42d2:	2800      	cmp	r0, #0
    42d4:	d030      	beq.n	4338 <__aeabi_i2f+0x68>
    42d6:	17c3      	asrs	r3, r0, #31
    42d8:	18c4      	adds	r4, r0, r3
    42da:	405c      	eors	r4, r3
    42dc:	0fc5      	lsrs	r5, r0, #31
    42de:	0020      	movs	r0, r4
    42e0:	f001 ff56 	bl	6190 <__clzsi2>
    42e4:	239e      	movs	r3, #158	; 0x9e
    42e6:	1a1b      	subs	r3, r3, r0
    42e8:	2b96      	cmp	r3, #150	; 0x96
    42ea:	dc0d      	bgt.n	4308 <__aeabi_i2f+0x38>
    42ec:	2296      	movs	r2, #150	; 0x96
    42ee:	1ad2      	subs	r2, r2, r3
    42f0:	4094      	lsls	r4, r2
    42f2:	002a      	movs	r2, r5
    42f4:	0264      	lsls	r4, r4, #9
    42f6:	0a64      	lsrs	r4, r4, #9
    42f8:	b2db      	uxtb	r3, r3
    42fa:	0264      	lsls	r4, r4, #9
    42fc:	05db      	lsls	r3, r3, #23
    42fe:	0a60      	lsrs	r0, r4, #9
    4300:	07d2      	lsls	r2, r2, #31
    4302:	4318      	orrs	r0, r3
    4304:	4310      	orrs	r0, r2
    4306:	bd70      	pop	{r4, r5, r6, pc}
    4308:	2b99      	cmp	r3, #153	; 0x99
    430a:	dc19      	bgt.n	4340 <__aeabi_i2f+0x70>
    430c:	2299      	movs	r2, #153	; 0x99
    430e:	1ad2      	subs	r2, r2, r3
    4310:	2a00      	cmp	r2, #0
    4312:	dd29      	ble.n	4368 <__aeabi_i2f+0x98>
    4314:	4094      	lsls	r4, r2
    4316:	0022      	movs	r2, r4
    4318:	4c14      	ldr	r4, [pc, #80]	; (436c <__aeabi_i2f+0x9c>)
    431a:	4014      	ands	r4, r2
    431c:	0751      	lsls	r1, r2, #29
    431e:	d004      	beq.n	432a <__aeabi_i2f+0x5a>
    4320:	210f      	movs	r1, #15
    4322:	400a      	ands	r2, r1
    4324:	2a04      	cmp	r2, #4
    4326:	d000      	beq.n	432a <__aeabi_i2f+0x5a>
    4328:	3404      	adds	r4, #4
    432a:	0162      	lsls	r2, r4, #5
    432c:	d413      	bmi.n	4356 <__aeabi_i2f+0x86>
    432e:	01a4      	lsls	r4, r4, #6
    4330:	0a64      	lsrs	r4, r4, #9
    4332:	b2db      	uxtb	r3, r3
    4334:	002a      	movs	r2, r5
    4336:	e7e0      	b.n	42fa <__aeabi_i2f+0x2a>
    4338:	2200      	movs	r2, #0
    433a:	2300      	movs	r3, #0
    433c:	2400      	movs	r4, #0
    433e:	e7dc      	b.n	42fa <__aeabi_i2f+0x2a>
    4340:	2205      	movs	r2, #5
    4342:	0021      	movs	r1, r4
    4344:	1a12      	subs	r2, r2, r0
    4346:	40d1      	lsrs	r1, r2
    4348:	22b9      	movs	r2, #185	; 0xb9
    434a:	1ad2      	subs	r2, r2, r3
    434c:	4094      	lsls	r4, r2
    434e:	1e62      	subs	r2, r4, #1
    4350:	4194      	sbcs	r4, r2
    4352:	430c      	orrs	r4, r1
    4354:	e7da      	b.n	430c <__aeabi_i2f+0x3c>
    4356:	4b05      	ldr	r3, [pc, #20]	; (436c <__aeabi_i2f+0x9c>)
    4358:	002a      	movs	r2, r5
    435a:	401c      	ands	r4, r3
    435c:	239f      	movs	r3, #159	; 0x9f
    435e:	01a4      	lsls	r4, r4, #6
    4360:	1a1b      	subs	r3, r3, r0
    4362:	0a64      	lsrs	r4, r4, #9
    4364:	b2db      	uxtb	r3, r3
    4366:	e7c8      	b.n	42fa <__aeabi_i2f+0x2a>
    4368:	0022      	movs	r2, r4
    436a:	e7d5      	b.n	4318 <__aeabi_i2f+0x48>
    436c:	fbffffff 	.word	0xfbffffff

00004370 <__aeabi_dadd>:
    4370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4372:	4645      	mov	r5, r8
    4374:	46de      	mov	lr, fp
    4376:	4657      	mov	r7, sl
    4378:	464e      	mov	r6, r9
    437a:	030c      	lsls	r4, r1, #12
    437c:	b5e0      	push	{r5, r6, r7, lr}
    437e:	004e      	lsls	r6, r1, #1
    4380:	0fc9      	lsrs	r1, r1, #31
    4382:	4688      	mov	r8, r1
    4384:	000d      	movs	r5, r1
    4386:	0a61      	lsrs	r1, r4, #9
    4388:	0f44      	lsrs	r4, r0, #29
    438a:	430c      	orrs	r4, r1
    438c:	00c7      	lsls	r7, r0, #3
    438e:	0319      	lsls	r1, r3, #12
    4390:	0058      	lsls	r0, r3, #1
    4392:	0fdb      	lsrs	r3, r3, #31
    4394:	469b      	mov	fp, r3
    4396:	0a4b      	lsrs	r3, r1, #9
    4398:	0f51      	lsrs	r1, r2, #29
    439a:	430b      	orrs	r3, r1
    439c:	0d76      	lsrs	r6, r6, #21
    439e:	0d40      	lsrs	r0, r0, #21
    43a0:	0019      	movs	r1, r3
    43a2:	00d2      	lsls	r2, r2, #3
    43a4:	45d8      	cmp	r8, fp
    43a6:	d100      	bne.n	43aa <__aeabi_dadd+0x3a>
    43a8:	e0ae      	b.n	4508 <__aeabi_dadd+0x198>
    43aa:	1a35      	subs	r5, r6, r0
    43ac:	2d00      	cmp	r5, #0
    43ae:	dc00      	bgt.n	43b2 <__aeabi_dadd+0x42>
    43b0:	e0f6      	b.n	45a0 <__aeabi_dadd+0x230>
    43b2:	2800      	cmp	r0, #0
    43b4:	d10f      	bne.n	43d6 <__aeabi_dadd+0x66>
    43b6:	4313      	orrs	r3, r2
    43b8:	d100      	bne.n	43bc <__aeabi_dadd+0x4c>
    43ba:	e0db      	b.n	4574 <__aeabi_dadd+0x204>
    43bc:	1e6b      	subs	r3, r5, #1
    43be:	2b00      	cmp	r3, #0
    43c0:	d000      	beq.n	43c4 <__aeabi_dadd+0x54>
    43c2:	e137      	b.n	4634 <__aeabi_dadd+0x2c4>
    43c4:	1aba      	subs	r2, r7, r2
    43c6:	4297      	cmp	r7, r2
    43c8:	41bf      	sbcs	r7, r7
    43ca:	1a64      	subs	r4, r4, r1
    43cc:	427f      	negs	r7, r7
    43ce:	1be4      	subs	r4, r4, r7
    43d0:	2601      	movs	r6, #1
    43d2:	0017      	movs	r7, r2
    43d4:	e024      	b.n	4420 <__aeabi_dadd+0xb0>
    43d6:	4bc6      	ldr	r3, [pc, #792]	; (46f0 <__aeabi_dadd+0x380>)
    43d8:	429e      	cmp	r6, r3
    43da:	d04d      	beq.n	4478 <__aeabi_dadd+0x108>
    43dc:	2380      	movs	r3, #128	; 0x80
    43de:	041b      	lsls	r3, r3, #16
    43e0:	4319      	orrs	r1, r3
    43e2:	2d38      	cmp	r5, #56	; 0x38
    43e4:	dd00      	ble.n	43e8 <__aeabi_dadd+0x78>
    43e6:	e107      	b.n	45f8 <__aeabi_dadd+0x288>
    43e8:	2d1f      	cmp	r5, #31
    43ea:	dd00      	ble.n	43ee <__aeabi_dadd+0x7e>
    43ec:	e138      	b.n	4660 <__aeabi_dadd+0x2f0>
    43ee:	2020      	movs	r0, #32
    43f0:	1b43      	subs	r3, r0, r5
    43f2:	469a      	mov	sl, r3
    43f4:	000b      	movs	r3, r1
    43f6:	4650      	mov	r0, sl
    43f8:	4083      	lsls	r3, r0
    43fa:	4699      	mov	r9, r3
    43fc:	0013      	movs	r3, r2
    43fe:	4648      	mov	r0, r9
    4400:	40eb      	lsrs	r3, r5
    4402:	4318      	orrs	r0, r3
    4404:	0003      	movs	r3, r0
    4406:	4650      	mov	r0, sl
    4408:	4082      	lsls	r2, r0
    440a:	1e50      	subs	r0, r2, #1
    440c:	4182      	sbcs	r2, r0
    440e:	40e9      	lsrs	r1, r5
    4410:	431a      	orrs	r2, r3
    4412:	1aba      	subs	r2, r7, r2
    4414:	1a61      	subs	r1, r4, r1
    4416:	4297      	cmp	r7, r2
    4418:	41a4      	sbcs	r4, r4
    441a:	0017      	movs	r7, r2
    441c:	4264      	negs	r4, r4
    441e:	1b0c      	subs	r4, r1, r4
    4420:	0223      	lsls	r3, r4, #8
    4422:	d562      	bpl.n	44ea <__aeabi_dadd+0x17a>
    4424:	0264      	lsls	r4, r4, #9
    4426:	0a65      	lsrs	r5, r4, #9
    4428:	2d00      	cmp	r5, #0
    442a:	d100      	bne.n	442e <__aeabi_dadd+0xbe>
    442c:	e0df      	b.n	45ee <__aeabi_dadd+0x27e>
    442e:	0028      	movs	r0, r5
    4430:	f001 feae 	bl	6190 <__clzsi2>
    4434:	0003      	movs	r3, r0
    4436:	3b08      	subs	r3, #8
    4438:	2b1f      	cmp	r3, #31
    443a:	dd00      	ble.n	443e <__aeabi_dadd+0xce>
    443c:	e0d2      	b.n	45e4 <__aeabi_dadd+0x274>
    443e:	2220      	movs	r2, #32
    4440:	003c      	movs	r4, r7
    4442:	1ad2      	subs	r2, r2, r3
    4444:	409d      	lsls	r5, r3
    4446:	40d4      	lsrs	r4, r2
    4448:	409f      	lsls	r7, r3
    444a:	4325      	orrs	r5, r4
    444c:	429e      	cmp	r6, r3
    444e:	dd00      	ble.n	4452 <__aeabi_dadd+0xe2>
    4450:	e0c4      	b.n	45dc <__aeabi_dadd+0x26c>
    4452:	1b9e      	subs	r6, r3, r6
    4454:	1c73      	adds	r3, r6, #1
    4456:	2b1f      	cmp	r3, #31
    4458:	dd00      	ble.n	445c <__aeabi_dadd+0xec>
    445a:	e0f1      	b.n	4640 <__aeabi_dadd+0x2d0>
    445c:	2220      	movs	r2, #32
    445e:	0038      	movs	r0, r7
    4460:	0029      	movs	r1, r5
    4462:	1ad2      	subs	r2, r2, r3
    4464:	40d8      	lsrs	r0, r3
    4466:	4091      	lsls	r1, r2
    4468:	4097      	lsls	r7, r2
    446a:	002c      	movs	r4, r5
    446c:	4301      	orrs	r1, r0
    446e:	1e78      	subs	r0, r7, #1
    4470:	4187      	sbcs	r7, r0
    4472:	40dc      	lsrs	r4, r3
    4474:	2600      	movs	r6, #0
    4476:	430f      	orrs	r7, r1
    4478:	077b      	lsls	r3, r7, #29
    447a:	d009      	beq.n	4490 <__aeabi_dadd+0x120>
    447c:	230f      	movs	r3, #15
    447e:	403b      	ands	r3, r7
    4480:	2b04      	cmp	r3, #4
    4482:	d005      	beq.n	4490 <__aeabi_dadd+0x120>
    4484:	1d3b      	adds	r3, r7, #4
    4486:	42bb      	cmp	r3, r7
    4488:	41bf      	sbcs	r7, r7
    448a:	427f      	negs	r7, r7
    448c:	19e4      	adds	r4, r4, r7
    448e:	001f      	movs	r7, r3
    4490:	0223      	lsls	r3, r4, #8
    4492:	d52c      	bpl.n	44ee <__aeabi_dadd+0x17e>
    4494:	4b96      	ldr	r3, [pc, #600]	; (46f0 <__aeabi_dadd+0x380>)
    4496:	3601      	adds	r6, #1
    4498:	429e      	cmp	r6, r3
    449a:	d100      	bne.n	449e <__aeabi_dadd+0x12e>
    449c:	e09a      	b.n	45d4 <__aeabi_dadd+0x264>
    449e:	4645      	mov	r5, r8
    44a0:	4b94      	ldr	r3, [pc, #592]	; (46f4 <__aeabi_dadd+0x384>)
    44a2:	08ff      	lsrs	r7, r7, #3
    44a4:	401c      	ands	r4, r3
    44a6:	0760      	lsls	r0, r4, #29
    44a8:	0576      	lsls	r6, r6, #21
    44aa:	0264      	lsls	r4, r4, #9
    44ac:	4307      	orrs	r7, r0
    44ae:	0b24      	lsrs	r4, r4, #12
    44b0:	0d76      	lsrs	r6, r6, #21
    44b2:	2100      	movs	r1, #0
    44b4:	0324      	lsls	r4, r4, #12
    44b6:	0b23      	lsrs	r3, r4, #12
    44b8:	0d0c      	lsrs	r4, r1, #20
    44ba:	4a8f      	ldr	r2, [pc, #572]	; (46f8 <__aeabi_dadd+0x388>)
    44bc:	0524      	lsls	r4, r4, #20
    44be:	431c      	orrs	r4, r3
    44c0:	4014      	ands	r4, r2
    44c2:	0533      	lsls	r3, r6, #20
    44c4:	4323      	orrs	r3, r4
    44c6:	005b      	lsls	r3, r3, #1
    44c8:	07ed      	lsls	r5, r5, #31
    44ca:	085b      	lsrs	r3, r3, #1
    44cc:	432b      	orrs	r3, r5
    44ce:	0038      	movs	r0, r7
    44d0:	0019      	movs	r1, r3
    44d2:	bc3c      	pop	{r2, r3, r4, r5}
    44d4:	4690      	mov	r8, r2
    44d6:	4699      	mov	r9, r3
    44d8:	46a2      	mov	sl, r4
    44da:	46ab      	mov	fp, r5
    44dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    44de:	4664      	mov	r4, ip
    44e0:	4304      	orrs	r4, r0
    44e2:	d100      	bne.n	44e6 <__aeabi_dadd+0x176>
    44e4:	e211      	b.n	490a <__aeabi_dadd+0x59a>
    44e6:	0004      	movs	r4, r0
    44e8:	4667      	mov	r7, ip
    44ea:	077b      	lsls	r3, r7, #29
    44ec:	d1c6      	bne.n	447c <__aeabi_dadd+0x10c>
    44ee:	4645      	mov	r5, r8
    44f0:	0760      	lsls	r0, r4, #29
    44f2:	08ff      	lsrs	r7, r7, #3
    44f4:	4307      	orrs	r7, r0
    44f6:	08e4      	lsrs	r4, r4, #3
    44f8:	4b7d      	ldr	r3, [pc, #500]	; (46f0 <__aeabi_dadd+0x380>)
    44fa:	429e      	cmp	r6, r3
    44fc:	d030      	beq.n	4560 <__aeabi_dadd+0x1f0>
    44fe:	0324      	lsls	r4, r4, #12
    4500:	0576      	lsls	r6, r6, #21
    4502:	0b24      	lsrs	r4, r4, #12
    4504:	0d76      	lsrs	r6, r6, #21
    4506:	e7d4      	b.n	44b2 <__aeabi_dadd+0x142>
    4508:	1a33      	subs	r3, r6, r0
    450a:	469a      	mov	sl, r3
    450c:	2b00      	cmp	r3, #0
    450e:	dd78      	ble.n	4602 <__aeabi_dadd+0x292>
    4510:	2800      	cmp	r0, #0
    4512:	d031      	beq.n	4578 <__aeabi_dadd+0x208>
    4514:	4876      	ldr	r0, [pc, #472]	; (46f0 <__aeabi_dadd+0x380>)
    4516:	4286      	cmp	r6, r0
    4518:	d0ae      	beq.n	4478 <__aeabi_dadd+0x108>
    451a:	2080      	movs	r0, #128	; 0x80
    451c:	0400      	lsls	r0, r0, #16
    451e:	4301      	orrs	r1, r0
    4520:	4653      	mov	r3, sl
    4522:	2b38      	cmp	r3, #56	; 0x38
    4524:	dc00      	bgt.n	4528 <__aeabi_dadd+0x1b8>
    4526:	e0e9      	b.n	46fc <__aeabi_dadd+0x38c>
    4528:	430a      	orrs	r2, r1
    452a:	1e51      	subs	r1, r2, #1
    452c:	418a      	sbcs	r2, r1
    452e:	2100      	movs	r1, #0
    4530:	19d2      	adds	r2, r2, r7
    4532:	42ba      	cmp	r2, r7
    4534:	41bf      	sbcs	r7, r7
    4536:	1909      	adds	r1, r1, r4
    4538:	427c      	negs	r4, r7
    453a:	0017      	movs	r7, r2
    453c:	190c      	adds	r4, r1, r4
    453e:	0223      	lsls	r3, r4, #8
    4540:	d5d3      	bpl.n	44ea <__aeabi_dadd+0x17a>
    4542:	4b6b      	ldr	r3, [pc, #428]	; (46f0 <__aeabi_dadd+0x380>)
    4544:	3601      	adds	r6, #1
    4546:	429e      	cmp	r6, r3
    4548:	d100      	bne.n	454c <__aeabi_dadd+0x1dc>
    454a:	e13a      	b.n	47c2 <__aeabi_dadd+0x452>
    454c:	2001      	movs	r0, #1
    454e:	4b69      	ldr	r3, [pc, #420]	; (46f4 <__aeabi_dadd+0x384>)
    4550:	401c      	ands	r4, r3
    4552:	087b      	lsrs	r3, r7, #1
    4554:	4007      	ands	r7, r0
    4556:	431f      	orrs	r7, r3
    4558:	07e0      	lsls	r0, r4, #31
    455a:	4307      	orrs	r7, r0
    455c:	0864      	lsrs	r4, r4, #1
    455e:	e78b      	b.n	4478 <__aeabi_dadd+0x108>
    4560:	0023      	movs	r3, r4
    4562:	433b      	orrs	r3, r7
    4564:	d100      	bne.n	4568 <__aeabi_dadd+0x1f8>
    4566:	e1cb      	b.n	4900 <__aeabi_dadd+0x590>
    4568:	2280      	movs	r2, #128	; 0x80
    456a:	0312      	lsls	r2, r2, #12
    456c:	4314      	orrs	r4, r2
    456e:	0324      	lsls	r4, r4, #12
    4570:	0b24      	lsrs	r4, r4, #12
    4572:	e79e      	b.n	44b2 <__aeabi_dadd+0x142>
    4574:	002e      	movs	r6, r5
    4576:	e77f      	b.n	4478 <__aeabi_dadd+0x108>
    4578:	0008      	movs	r0, r1
    457a:	4310      	orrs	r0, r2
    457c:	d100      	bne.n	4580 <__aeabi_dadd+0x210>
    457e:	e0b4      	b.n	46ea <__aeabi_dadd+0x37a>
    4580:	1e58      	subs	r0, r3, #1
    4582:	2800      	cmp	r0, #0
    4584:	d000      	beq.n	4588 <__aeabi_dadd+0x218>
    4586:	e0de      	b.n	4746 <__aeabi_dadd+0x3d6>
    4588:	18ba      	adds	r2, r7, r2
    458a:	42ba      	cmp	r2, r7
    458c:	419b      	sbcs	r3, r3
    458e:	1864      	adds	r4, r4, r1
    4590:	425b      	negs	r3, r3
    4592:	18e4      	adds	r4, r4, r3
    4594:	0017      	movs	r7, r2
    4596:	2601      	movs	r6, #1
    4598:	0223      	lsls	r3, r4, #8
    459a:	d5a6      	bpl.n	44ea <__aeabi_dadd+0x17a>
    459c:	2602      	movs	r6, #2
    459e:	e7d5      	b.n	454c <__aeabi_dadd+0x1dc>
    45a0:	2d00      	cmp	r5, #0
    45a2:	d16e      	bne.n	4682 <__aeabi_dadd+0x312>
    45a4:	1c70      	adds	r0, r6, #1
    45a6:	0540      	lsls	r0, r0, #21
    45a8:	0d40      	lsrs	r0, r0, #21
    45aa:	2801      	cmp	r0, #1
    45ac:	dc00      	bgt.n	45b0 <__aeabi_dadd+0x240>
    45ae:	e0f9      	b.n	47a4 <__aeabi_dadd+0x434>
    45b0:	1ab8      	subs	r0, r7, r2
    45b2:	4684      	mov	ip, r0
    45b4:	4287      	cmp	r7, r0
    45b6:	4180      	sbcs	r0, r0
    45b8:	1ae5      	subs	r5, r4, r3
    45ba:	4240      	negs	r0, r0
    45bc:	1a2d      	subs	r5, r5, r0
    45be:	0228      	lsls	r0, r5, #8
    45c0:	d400      	bmi.n	45c4 <__aeabi_dadd+0x254>
    45c2:	e089      	b.n	46d8 <__aeabi_dadd+0x368>
    45c4:	1bd7      	subs	r7, r2, r7
    45c6:	42ba      	cmp	r2, r7
    45c8:	4192      	sbcs	r2, r2
    45ca:	1b1c      	subs	r4, r3, r4
    45cc:	4252      	negs	r2, r2
    45ce:	1aa5      	subs	r5, r4, r2
    45d0:	46d8      	mov	r8, fp
    45d2:	e729      	b.n	4428 <__aeabi_dadd+0xb8>
    45d4:	4645      	mov	r5, r8
    45d6:	2400      	movs	r4, #0
    45d8:	2700      	movs	r7, #0
    45da:	e76a      	b.n	44b2 <__aeabi_dadd+0x142>
    45dc:	4c45      	ldr	r4, [pc, #276]	; (46f4 <__aeabi_dadd+0x384>)
    45de:	1af6      	subs	r6, r6, r3
    45e0:	402c      	ands	r4, r5
    45e2:	e749      	b.n	4478 <__aeabi_dadd+0x108>
    45e4:	003d      	movs	r5, r7
    45e6:	3828      	subs	r0, #40	; 0x28
    45e8:	4085      	lsls	r5, r0
    45ea:	2700      	movs	r7, #0
    45ec:	e72e      	b.n	444c <__aeabi_dadd+0xdc>
    45ee:	0038      	movs	r0, r7
    45f0:	f001 fdce 	bl	6190 <__clzsi2>
    45f4:	3020      	adds	r0, #32
    45f6:	e71d      	b.n	4434 <__aeabi_dadd+0xc4>
    45f8:	430a      	orrs	r2, r1
    45fa:	1e51      	subs	r1, r2, #1
    45fc:	418a      	sbcs	r2, r1
    45fe:	2100      	movs	r1, #0
    4600:	e707      	b.n	4412 <__aeabi_dadd+0xa2>
    4602:	2b00      	cmp	r3, #0
    4604:	d000      	beq.n	4608 <__aeabi_dadd+0x298>
    4606:	e0f3      	b.n	47f0 <__aeabi_dadd+0x480>
    4608:	1c70      	adds	r0, r6, #1
    460a:	0543      	lsls	r3, r0, #21
    460c:	0d5b      	lsrs	r3, r3, #21
    460e:	2b01      	cmp	r3, #1
    4610:	dc00      	bgt.n	4614 <__aeabi_dadd+0x2a4>
    4612:	e0ad      	b.n	4770 <__aeabi_dadd+0x400>
    4614:	4b36      	ldr	r3, [pc, #216]	; (46f0 <__aeabi_dadd+0x380>)
    4616:	4298      	cmp	r0, r3
    4618:	d100      	bne.n	461c <__aeabi_dadd+0x2ac>
    461a:	e0d1      	b.n	47c0 <__aeabi_dadd+0x450>
    461c:	18ba      	adds	r2, r7, r2
    461e:	42ba      	cmp	r2, r7
    4620:	41bf      	sbcs	r7, r7
    4622:	1864      	adds	r4, r4, r1
    4624:	427f      	negs	r7, r7
    4626:	19e4      	adds	r4, r4, r7
    4628:	07e7      	lsls	r7, r4, #31
    462a:	0852      	lsrs	r2, r2, #1
    462c:	4317      	orrs	r7, r2
    462e:	0864      	lsrs	r4, r4, #1
    4630:	0006      	movs	r6, r0
    4632:	e721      	b.n	4478 <__aeabi_dadd+0x108>
    4634:	482e      	ldr	r0, [pc, #184]	; (46f0 <__aeabi_dadd+0x380>)
    4636:	4285      	cmp	r5, r0
    4638:	d100      	bne.n	463c <__aeabi_dadd+0x2cc>
    463a:	e093      	b.n	4764 <__aeabi_dadd+0x3f4>
    463c:	001d      	movs	r5, r3
    463e:	e6d0      	b.n	43e2 <__aeabi_dadd+0x72>
    4640:	0029      	movs	r1, r5
    4642:	3e1f      	subs	r6, #31
    4644:	40f1      	lsrs	r1, r6
    4646:	2b20      	cmp	r3, #32
    4648:	d100      	bne.n	464c <__aeabi_dadd+0x2dc>
    464a:	e08d      	b.n	4768 <__aeabi_dadd+0x3f8>
    464c:	2240      	movs	r2, #64	; 0x40
    464e:	1ad3      	subs	r3, r2, r3
    4650:	409d      	lsls	r5, r3
    4652:	432f      	orrs	r7, r5
    4654:	1e7d      	subs	r5, r7, #1
    4656:	41af      	sbcs	r7, r5
    4658:	2400      	movs	r4, #0
    465a:	430f      	orrs	r7, r1
    465c:	2600      	movs	r6, #0
    465e:	e744      	b.n	44ea <__aeabi_dadd+0x17a>
    4660:	002b      	movs	r3, r5
    4662:	0008      	movs	r0, r1
    4664:	3b20      	subs	r3, #32
    4666:	40d8      	lsrs	r0, r3
    4668:	0003      	movs	r3, r0
    466a:	2d20      	cmp	r5, #32
    466c:	d100      	bne.n	4670 <__aeabi_dadd+0x300>
    466e:	e07d      	b.n	476c <__aeabi_dadd+0x3fc>
    4670:	2040      	movs	r0, #64	; 0x40
    4672:	1b45      	subs	r5, r0, r5
    4674:	40a9      	lsls	r1, r5
    4676:	430a      	orrs	r2, r1
    4678:	1e51      	subs	r1, r2, #1
    467a:	418a      	sbcs	r2, r1
    467c:	2100      	movs	r1, #0
    467e:	431a      	orrs	r2, r3
    4680:	e6c7      	b.n	4412 <__aeabi_dadd+0xa2>
    4682:	2e00      	cmp	r6, #0
    4684:	d050      	beq.n	4728 <__aeabi_dadd+0x3b8>
    4686:	4e1a      	ldr	r6, [pc, #104]	; (46f0 <__aeabi_dadd+0x380>)
    4688:	42b0      	cmp	r0, r6
    468a:	d057      	beq.n	473c <__aeabi_dadd+0x3cc>
    468c:	2680      	movs	r6, #128	; 0x80
    468e:	426b      	negs	r3, r5
    4690:	4699      	mov	r9, r3
    4692:	0436      	lsls	r6, r6, #16
    4694:	4334      	orrs	r4, r6
    4696:	464b      	mov	r3, r9
    4698:	2b38      	cmp	r3, #56	; 0x38
    469a:	dd00      	ble.n	469e <__aeabi_dadd+0x32e>
    469c:	e0d6      	b.n	484c <__aeabi_dadd+0x4dc>
    469e:	2b1f      	cmp	r3, #31
    46a0:	dd00      	ble.n	46a4 <__aeabi_dadd+0x334>
    46a2:	e135      	b.n	4910 <__aeabi_dadd+0x5a0>
    46a4:	2620      	movs	r6, #32
    46a6:	1af5      	subs	r5, r6, r3
    46a8:	0026      	movs	r6, r4
    46aa:	40ae      	lsls	r6, r5
    46ac:	46b2      	mov	sl, r6
    46ae:	003e      	movs	r6, r7
    46b0:	40de      	lsrs	r6, r3
    46b2:	46ac      	mov	ip, r5
    46b4:	0035      	movs	r5, r6
    46b6:	4656      	mov	r6, sl
    46b8:	432e      	orrs	r6, r5
    46ba:	4665      	mov	r5, ip
    46bc:	40af      	lsls	r7, r5
    46be:	1e7d      	subs	r5, r7, #1
    46c0:	41af      	sbcs	r7, r5
    46c2:	40dc      	lsrs	r4, r3
    46c4:	4337      	orrs	r7, r6
    46c6:	1bd7      	subs	r7, r2, r7
    46c8:	42ba      	cmp	r2, r7
    46ca:	4192      	sbcs	r2, r2
    46cc:	1b0c      	subs	r4, r1, r4
    46ce:	4252      	negs	r2, r2
    46d0:	1aa4      	subs	r4, r4, r2
    46d2:	0006      	movs	r6, r0
    46d4:	46d8      	mov	r8, fp
    46d6:	e6a3      	b.n	4420 <__aeabi_dadd+0xb0>
    46d8:	4664      	mov	r4, ip
    46da:	4667      	mov	r7, ip
    46dc:	432c      	orrs	r4, r5
    46de:	d000      	beq.n	46e2 <__aeabi_dadd+0x372>
    46e0:	e6a2      	b.n	4428 <__aeabi_dadd+0xb8>
    46e2:	2500      	movs	r5, #0
    46e4:	2600      	movs	r6, #0
    46e6:	2700      	movs	r7, #0
    46e8:	e706      	b.n	44f8 <__aeabi_dadd+0x188>
    46ea:	001e      	movs	r6, r3
    46ec:	e6c4      	b.n	4478 <__aeabi_dadd+0x108>
    46ee:	46c0      	nop			; (mov r8, r8)
    46f0:	000007ff 	.word	0x000007ff
    46f4:	ff7fffff 	.word	0xff7fffff
    46f8:	800fffff 	.word	0x800fffff
    46fc:	2b1f      	cmp	r3, #31
    46fe:	dc63      	bgt.n	47c8 <__aeabi_dadd+0x458>
    4700:	2020      	movs	r0, #32
    4702:	1ac3      	subs	r3, r0, r3
    4704:	0008      	movs	r0, r1
    4706:	4098      	lsls	r0, r3
    4708:	469c      	mov	ip, r3
    470a:	4683      	mov	fp, r0
    470c:	4653      	mov	r3, sl
    470e:	0010      	movs	r0, r2
    4710:	40d8      	lsrs	r0, r3
    4712:	0003      	movs	r3, r0
    4714:	4658      	mov	r0, fp
    4716:	4318      	orrs	r0, r3
    4718:	4663      	mov	r3, ip
    471a:	409a      	lsls	r2, r3
    471c:	1e53      	subs	r3, r2, #1
    471e:	419a      	sbcs	r2, r3
    4720:	4653      	mov	r3, sl
    4722:	4302      	orrs	r2, r0
    4724:	40d9      	lsrs	r1, r3
    4726:	e703      	b.n	4530 <__aeabi_dadd+0x1c0>
    4728:	0026      	movs	r6, r4
    472a:	433e      	orrs	r6, r7
    472c:	d006      	beq.n	473c <__aeabi_dadd+0x3cc>
    472e:	43eb      	mvns	r3, r5
    4730:	4699      	mov	r9, r3
    4732:	2b00      	cmp	r3, #0
    4734:	d0c7      	beq.n	46c6 <__aeabi_dadd+0x356>
    4736:	4e94      	ldr	r6, [pc, #592]	; (4988 <__aeabi_dadd+0x618>)
    4738:	42b0      	cmp	r0, r6
    473a:	d1ac      	bne.n	4696 <__aeabi_dadd+0x326>
    473c:	000c      	movs	r4, r1
    473e:	0017      	movs	r7, r2
    4740:	0006      	movs	r6, r0
    4742:	46d8      	mov	r8, fp
    4744:	e698      	b.n	4478 <__aeabi_dadd+0x108>
    4746:	4b90      	ldr	r3, [pc, #576]	; (4988 <__aeabi_dadd+0x618>)
    4748:	459a      	cmp	sl, r3
    474a:	d00b      	beq.n	4764 <__aeabi_dadd+0x3f4>
    474c:	4682      	mov	sl, r0
    474e:	e6e7      	b.n	4520 <__aeabi_dadd+0x1b0>
    4750:	2800      	cmp	r0, #0
    4752:	d000      	beq.n	4756 <__aeabi_dadd+0x3e6>
    4754:	e09e      	b.n	4894 <__aeabi_dadd+0x524>
    4756:	0018      	movs	r0, r3
    4758:	4310      	orrs	r0, r2
    475a:	d100      	bne.n	475e <__aeabi_dadd+0x3ee>
    475c:	e0e9      	b.n	4932 <__aeabi_dadd+0x5c2>
    475e:	001c      	movs	r4, r3
    4760:	0017      	movs	r7, r2
    4762:	46d8      	mov	r8, fp
    4764:	4e88      	ldr	r6, [pc, #544]	; (4988 <__aeabi_dadd+0x618>)
    4766:	e687      	b.n	4478 <__aeabi_dadd+0x108>
    4768:	2500      	movs	r5, #0
    476a:	e772      	b.n	4652 <__aeabi_dadd+0x2e2>
    476c:	2100      	movs	r1, #0
    476e:	e782      	b.n	4676 <__aeabi_dadd+0x306>
    4770:	0023      	movs	r3, r4
    4772:	433b      	orrs	r3, r7
    4774:	2e00      	cmp	r6, #0
    4776:	d000      	beq.n	477a <__aeabi_dadd+0x40a>
    4778:	e0ab      	b.n	48d2 <__aeabi_dadd+0x562>
    477a:	2b00      	cmp	r3, #0
    477c:	d100      	bne.n	4780 <__aeabi_dadd+0x410>
    477e:	e0e7      	b.n	4950 <__aeabi_dadd+0x5e0>
    4780:	000b      	movs	r3, r1
    4782:	4313      	orrs	r3, r2
    4784:	d100      	bne.n	4788 <__aeabi_dadd+0x418>
    4786:	e677      	b.n	4478 <__aeabi_dadd+0x108>
    4788:	18ba      	adds	r2, r7, r2
    478a:	42ba      	cmp	r2, r7
    478c:	41bf      	sbcs	r7, r7
    478e:	1864      	adds	r4, r4, r1
    4790:	427f      	negs	r7, r7
    4792:	19e4      	adds	r4, r4, r7
    4794:	0223      	lsls	r3, r4, #8
    4796:	d400      	bmi.n	479a <__aeabi_dadd+0x42a>
    4798:	e0f2      	b.n	4980 <__aeabi_dadd+0x610>
    479a:	4b7c      	ldr	r3, [pc, #496]	; (498c <__aeabi_dadd+0x61c>)
    479c:	0017      	movs	r7, r2
    479e:	401c      	ands	r4, r3
    47a0:	0006      	movs	r6, r0
    47a2:	e669      	b.n	4478 <__aeabi_dadd+0x108>
    47a4:	0020      	movs	r0, r4
    47a6:	4338      	orrs	r0, r7
    47a8:	2e00      	cmp	r6, #0
    47aa:	d1d1      	bne.n	4750 <__aeabi_dadd+0x3e0>
    47ac:	2800      	cmp	r0, #0
    47ae:	d15b      	bne.n	4868 <__aeabi_dadd+0x4f8>
    47b0:	001c      	movs	r4, r3
    47b2:	4314      	orrs	r4, r2
    47b4:	d100      	bne.n	47b8 <__aeabi_dadd+0x448>
    47b6:	e0a8      	b.n	490a <__aeabi_dadd+0x59a>
    47b8:	001c      	movs	r4, r3
    47ba:	0017      	movs	r7, r2
    47bc:	46d8      	mov	r8, fp
    47be:	e65b      	b.n	4478 <__aeabi_dadd+0x108>
    47c0:	0006      	movs	r6, r0
    47c2:	2400      	movs	r4, #0
    47c4:	2700      	movs	r7, #0
    47c6:	e697      	b.n	44f8 <__aeabi_dadd+0x188>
    47c8:	4650      	mov	r0, sl
    47ca:	000b      	movs	r3, r1
    47cc:	3820      	subs	r0, #32
    47ce:	40c3      	lsrs	r3, r0
    47d0:	4699      	mov	r9, r3
    47d2:	4653      	mov	r3, sl
    47d4:	2b20      	cmp	r3, #32
    47d6:	d100      	bne.n	47da <__aeabi_dadd+0x46a>
    47d8:	e095      	b.n	4906 <__aeabi_dadd+0x596>
    47da:	2340      	movs	r3, #64	; 0x40
    47dc:	4650      	mov	r0, sl
    47de:	1a1b      	subs	r3, r3, r0
    47e0:	4099      	lsls	r1, r3
    47e2:	430a      	orrs	r2, r1
    47e4:	1e51      	subs	r1, r2, #1
    47e6:	418a      	sbcs	r2, r1
    47e8:	464b      	mov	r3, r9
    47ea:	2100      	movs	r1, #0
    47ec:	431a      	orrs	r2, r3
    47ee:	e69f      	b.n	4530 <__aeabi_dadd+0x1c0>
    47f0:	2e00      	cmp	r6, #0
    47f2:	d130      	bne.n	4856 <__aeabi_dadd+0x4e6>
    47f4:	0026      	movs	r6, r4
    47f6:	433e      	orrs	r6, r7
    47f8:	d067      	beq.n	48ca <__aeabi_dadd+0x55a>
    47fa:	43db      	mvns	r3, r3
    47fc:	469a      	mov	sl, r3
    47fe:	2b00      	cmp	r3, #0
    4800:	d01c      	beq.n	483c <__aeabi_dadd+0x4cc>
    4802:	4e61      	ldr	r6, [pc, #388]	; (4988 <__aeabi_dadd+0x618>)
    4804:	42b0      	cmp	r0, r6
    4806:	d060      	beq.n	48ca <__aeabi_dadd+0x55a>
    4808:	4653      	mov	r3, sl
    480a:	2b38      	cmp	r3, #56	; 0x38
    480c:	dd00      	ble.n	4810 <__aeabi_dadd+0x4a0>
    480e:	e096      	b.n	493e <__aeabi_dadd+0x5ce>
    4810:	2b1f      	cmp	r3, #31
    4812:	dd00      	ble.n	4816 <__aeabi_dadd+0x4a6>
    4814:	e09f      	b.n	4956 <__aeabi_dadd+0x5e6>
    4816:	2620      	movs	r6, #32
    4818:	1af3      	subs	r3, r6, r3
    481a:	0026      	movs	r6, r4
    481c:	409e      	lsls	r6, r3
    481e:	469c      	mov	ip, r3
    4820:	46b3      	mov	fp, r6
    4822:	4653      	mov	r3, sl
    4824:	003e      	movs	r6, r7
    4826:	40de      	lsrs	r6, r3
    4828:	0033      	movs	r3, r6
    482a:	465e      	mov	r6, fp
    482c:	431e      	orrs	r6, r3
    482e:	4663      	mov	r3, ip
    4830:	409f      	lsls	r7, r3
    4832:	1e7b      	subs	r3, r7, #1
    4834:	419f      	sbcs	r7, r3
    4836:	4653      	mov	r3, sl
    4838:	40dc      	lsrs	r4, r3
    483a:	4337      	orrs	r7, r6
    483c:	18bf      	adds	r7, r7, r2
    483e:	4297      	cmp	r7, r2
    4840:	4192      	sbcs	r2, r2
    4842:	1864      	adds	r4, r4, r1
    4844:	4252      	negs	r2, r2
    4846:	18a4      	adds	r4, r4, r2
    4848:	0006      	movs	r6, r0
    484a:	e678      	b.n	453e <__aeabi_dadd+0x1ce>
    484c:	4327      	orrs	r7, r4
    484e:	1e7c      	subs	r4, r7, #1
    4850:	41a7      	sbcs	r7, r4
    4852:	2400      	movs	r4, #0
    4854:	e737      	b.n	46c6 <__aeabi_dadd+0x356>
    4856:	4e4c      	ldr	r6, [pc, #304]	; (4988 <__aeabi_dadd+0x618>)
    4858:	42b0      	cmp	r0, r6
    485a:	d036      	beq.n	48ca <__aeabi_dadd+0x55a>
    485c:	2680      	movs	r6, #128	; 0x80
    485e:	425b      	negs	r3, r3
    4860:	0436      	lsls	r6, r6, #16
    4862:	469a      	mov	sl, r3
    4864:	4334      	orrs	r4, r6
    4866:	e7cf      	b.n	4808 <__aeabi_dadd+0x498>
    4868:	0018      	movs	r0, r3
    486a:	4310      	orrs	r0, r2
    486c:	d100      	bne.n	4870 <__aeabi_dadd+0x500>
    486e:	e603      	b.n	4478 <__aeabi_dadd+0x108>
    4870:	1ab8      	subs	r0, r7, r2
    4872:	4684      	mov	ip, r0
    4874:	4567      	cmp	r7, ip
    4876:	41ad      	sbcs	r5, r5
    4878:	1ae0      	subs	r0, r4, r3
    487a:	426d      	negs	r5, r5
    487c:	1b40      	subs	r0, r0, r5
    487e:	0205      	lsls	r5, r0, #8
    4880:	d400      	bmi.n	4884 <__aeabi_dadd+0x514>
    4882:	e62c      	b.n	44de <__aeabi_dadd+0x16e>
    4884:	1bd7      	subs	r7, r2, r7
    4886:	42ba      	cmp	r2, r7
    4888:	4192      	sbcs	r2, r2
    488a:	1b1c      	subs	r4, r3, r4
    488c:	4252      	negs	r2, r2
    488e:	1aa4      	subs	r4, r4, r2
    4890:	46d8      	mov	r8, fp
    4892:	e5f1      	b.n	4478 <__aeabi_dadd+0x108>
    4894:	0018      	movs	r0, r3
    4896:	4310      	orrs	r0, r2
    4898:	d100      	bne.n	489c <__aeabi_dadd+0x52c>
    489a:	e763      	b.n	4764 <__aeabi_dadd+0x3f4>
    489c:	08f8      	lsrs	r0, r7, #3
    489e:	0767      	lsls	r7, r4, #29
    48a0:	4307      	orrs	r7, r0
    48a2:	2080      	movs	r0, #128	; 0x80
    48a4:	08e4      	lsrs	r4, r4, #3
    48a6:	0300      	lsls	r0, r0, #12
    48a8:	4204      	tst	r4, r0
    48aa:	d008      	beq.n	48be <__aeabi_dadd+0x54e>
    48ac:	08dd      	lsrs	r5, r3, #3
    48ae:	4205      	tst	r5, r0
    48b0:	d105      	bne.n	48be <__aeabi_dadd+0x54e>
    48b2:	08d2      	lsrs	r2, r2, #3
    48b4:	0759      	lsls	r1, r3, #29
    48b6:	4311      	orrs	r1, r2
    48b8:	000f      	movs	r7, r1
    48ba:	002c      	movs	r4, r5
    48bc:	46d8      	mov	r8, fp
    48be:	0f7b      	lsrs	r3, r7, #29
    48c0:	00e4      	lsls	r4, r4, #3
    48c2:	431c      	orrs	r4, r3
    48c4:	00ff      	lsls	r7, r7, #3
    48c6:	4e30      	ldr	r6, [pc, #192]	; (4988 <__aeabi_dadd+0x618>)
    48c8:	e5d6      	b.n	4478 <__aeabi_dadd+0x108>
    48ca:	000c      	movs	r4, r1
    48cc:	0017      	movs	r7, r2
    48ce:	0006      	movs	r6, r0
    48d0:	e5d2      	b.n	4478 <__aeabi_dadd+0x108>
    48d2:	2b00      	cmp	r3, #0
    48d4:	d038      	beq.n	4948 <__aeabi_dadd+0x5d8>
    48d6:	000b      	movs	r3, r1
    48d8:	4313      	orrs	r3, r2
    48da:	d100      	bne.n	48de <__aeabi_dadd+0x56e>
    48dc:	e742      	b.n	4764 <__aeabi_dadd+0x3f4>
    48de:	08f8      	lsrs	r0, r7, #3
    48e0:	0767      	lsls	r7, r4, #29
    48e2:	4307      	orrs	r7, r0
    48e4:	2080      	movs	r0, #128	; 0x80
    48e6:	08e4      	lsrs	r4, r4, #3
    48e8:	0300      	lsls	r0, r0, #12
    48ea:	4204      	tst	r4, r0
    48ec:	d0e7      	beq.n	48be <__aeabi_dadd+0x54e>
    48ee:	08cb      	lsrs	r3, r1, #3
    48f0:	4203      	tst	r3, r0
    48f2:	d1e4      	bne.n	48be <__aeabi_dadd+0x54e>
    48f4:	08d2      	lsrs	r2, r2, #3
    48f6:	0749      	lsls	r1, r1, #29
    48f8:	4311      	orrs	r1, r2
    48fa:	000f      	movs	r7, r1
    48fc:	001c      	movs	r4, r3
    48fe:	e7de      	b.n	48be <__aeabi_dadd+0x54e>
    4900:	2700      	movs	r7, #0
    4902:	2400      	movs	r4, #0
    4904:	e5d5      	b.n	44b2 <__aeabi_dadd+0x142>
    4906:	2100      	movs	r1, #0
    4908:	e76b      	b.n	47e2 <__aeabi_dadd+0x472>
    490a:	2500      	movs	r5, #0
    490c:	2700      	movs	r7, #0
    490e:	e5f3      	b.n	44f8 <__aeabi_dadd+0x188>
    4910:	464e      	mov	r6, r9
    4912:	0025      	movs	r5, r4
    4914:	3e20      	subs	r6, #32
    4916:	40f5      	lsrs	r5, r6
    4918:	464b      	mov	r3, r9
    491a:	002e      	movs	r6, r5
    491c:	2b20      	cmp	r3, #32
    491e:	d02d      	beq.n	497c <__aeabi_dadd+0x60c>
    4920:	2540      	movs	r5, #64	; 0x40
    4922:	1aed      	subs	r5, r5, r3
    4924:	40ac      	lsls	r4, r5
    4926:	4327      	orrs	r7, r4
    4928:	1e7c      	subs	r4, r7, #1
    492a:	41a7      	sbcs	r7, r4
    492c:	2400      	movs	r4, #0
    492e:	4337      	orrs	r7, r6
    4930:	e6c9      	b.n	46c6 <__aeabi_dadd+0x356>
    4932:	2480      	movs	r4, #128	; 0x80
    4934:	2500      	movs	r5, #0
    4936:	0324      	lsls	r4, r4, #12
    4938:	4e13      	ldr	r6, [pc, #76]	; (4988 <__aeabi_dadd+0x618>)
    493a:	2700      	movs	r7, #0
    493c:	e5dc      	b.n	44f8 <__aeabi_dadd+0x188>
    493e:	4327      	orrs	r7, r4
    4940:	1e7c      	subs	r4, r7, #1
    4942:	41a7      	sbcs	r7, r4
    4944:	2400      	movs	r4, #0
    4946:	e779      	b.n	483c <__aeabi_dadd+0x4cc>
    4948:	000c      	movs	r4, r1
    494a:	0017      	movs	r7, r2
    494c:	4e0e      	ldr	r6, [pc, #56]	; (4988 <__aeabi_dadd+0x618>)
    494e:	e593      	b.n	4478 <__aeabi_dadd+0x108>
    4950:	000c      	movs	r4, r1
    4952:	0017      	movs	r7, r2
    4954:	e590      	b.n	4478 <__aeabi_dadd+0x108>
    4956:	4656      	mov	r6, sl
    4958:	0023      	movs	r3, r4
    495a:	3e20      	subs	r6, #32
    495c:	40f3      	lsrs	r3, r6
    495e:	4699      	mov	r9, r3
    4960:	4653      	mov	r3, sl
    4962:	2b20      	cmp	r3, #32
    4964:	d00e      	beq.n	4984 <__aeabi_dadd+0x614>
    4966:	2340      	movs	r3, #64	; 0x40
    4968:	4656      	mov	r6, sl
    496a:	1b9b      	subs	r3, r3, r6
    496c:	409c      	lsls	r4, r3
    496e:	4327      	orrs	r7, r4
    4970:	1e7c      	subs	r4, r7, #1
    4972:	41a7      	sbcs	r7, r4
    4974:	464b      	mov	r3, r9
    4976:	2400      	movs	r4, #0
    4978:	431f      	orrs	r7, r3
    497a:	e75f      	b.n	483c <__aeabi_dadd+0x4cc>
    497c:	2400      	movs	r4, #0
    497e:	e7d2      	b.n	4926 <__aeabi_dadd+0x5b6>
    4980:	0017      	movs	r7, r2
    4982:	e5b2      	b.n	44ea <__aeabi_dadd+0x17a>
    4984:	2400      	movs	r4, #0
    4986:	e7f2      	b.n	496e <__aeabi_dadd+0x5fe>
    4988:	000007ff 	.word	0x000007ff
    498c:	ff7fffff 	.word	0xff7fffff

00004990 <__aeabi_ddiv>:
    4990:	b5f0      	push	{r4, r5, r6, r7, lr}
    4992:	4657      	mov	r7, sl
    4994:	4645      	mov	r5, r8
    4996:	46de      	mov	lr, fp
    4998:	464e      	mov	r6, r9
    499a:	b5e0      	push	{r5, r6, r7, lr}
    499c:	004c      	lsls	r4, r1, #1
    499e:	030e      	lsls	r6, r1, #12
    49a0:	b087      	sub	sp, #28
    49a2:	4683      	mov	fp, r0
    49a4:	4692      	mov	sl, r2
    49a6:	001d      	movs	r5, r3
    49a8:	4680      	mov	r8, r0
    49aa:	0b36      	lsrs	r6, r6, #12
    49ac:	0d64      	lsrs	r4, r4, #21
    49ae:	0fcf      	lsrs	r7, r1, #31
    49b0:	2c00      	cmp	r4, #0
    49b2:	d04f      	beq.n	4a54 <__aeabi_ddiv+0xc4>
    49b4:	4b6f      	ldr	r3, [pc, #444]	; (4b74 <__aeabi_ddiv+0x1e4>)
    49b6:	429c      	cmp	r4, r3
    49b8:	d035      	beq.n	4a26 <__aeabi_ddiv+0x96>
    49ba:	2380      	movs	r3, #128	; 0x80
    49bc:	0f42      	lsrs	r2, r0, #29
    49be:	041b      	lsls	r3, r3, #16
    49c0:	00f6      	lsls	r6, r6, #3
    49c2:	4313      	orrs	r3, r2
    49c4:	4333      	orrs	r3, r6
    49c6:	4699      	mov	r9, r3
    49c8:	00c3      	lsls	r3, r0, #3
    49ca:	4698      	mov	r8, r3
    49cc:	4b6a      	ldr	r3, [pc, #424]	; (4b78 <__aeabi_ddiv+0x1e8>)
    49ce:	2600      	movs	r6, #0
    49d0:	469c      	mov	ip, r3
    49d2:	2300      	movs	r3, #0
    49d4:	4464      	add	r4, ip
    49d6:	9303      	str	r3, [sp, #12]
    49d8:	032b      	lsls	r3, r5, #12
    49da:	0b1b      	lsrs	r3, r3, #12
    49dc:	469b      	mov	fp, r3
    49de:	006b      	lsls	r3, r5, #1
    49e0:	0fed      	lsrs	r5, r5, #31
    49e2:	4650      	mov	r0, sl
    49e4:	0d5b      	lsrs	r3, r3, #21
    49e6:	9501      	str	r5, [sp, #4]
    49e8:	d05e      	beq.n	4aa8 <__aeabi_ddiv+0x118>
    49ea:	4a62      	ldr	r2, [pc, #392]	; (4b74 <__aeabi_ddiv+0x1e4>)
    49ec:	4293      	cmp	r3, r2
    49ee:	d053      	beq.n	4a98 <__aeabi_ddiv+0x108>
    49f0:	465a      	mov	r2, fp
    49f2:	00d1      	lsls	r1, r2, #3
    49f4:	2280      	movs	r2, #128	; 0x80
    49f6:	0f40      	lsrs	r0, r0, #29
    49f8:	0412      	lsls	r2, r2, #16
    49fa:	4302      	orrs	r2, r0
    49fc:	430a      	orrs	r2, r1
    49fe:	4693      	mov	fp, r2
    4a00:	4652      	mov	r2, sl
    4a02:	00d1      	lsls	r1, r2, #3
    4a04:	4a5c      	ldr	r2, [pc, #368]	; (4b78 <__aeabi_ddiv+0x1e8>)
    4a06:	4694      	mov	ip, r2
    4a08:	2200      	movs	r2, #0
    4a0a:	4463      	add	r3, ip
    4a0c:	0038      	movs	r0, r7
    4a0e:	4068      	eors	r0, r5
    4a10:	4684      	mov	ip, r0
    4a12:	9002      	str	r0, [sp, #8]
    4a14:	1ae4      	subs	r4, r4, r3
    4a16:	4316      	orrs	r6, r2
    4a18:	2e0f      	cmp	r6, #15
    4a1a:	d900      	bls.n	4a1e <__aeabi_ddiv+0x8e>
    4a1c:	e0b4      	b.n	4b88 <__aeabi_ddiv+0x1f8>
    4a1e:	4b57      	ldr	r3, [pc, #348]	; (4b7c <__aeabi_ddiv+0x1ec>)
    4a20:	00b6      	lsls	r6, r6, #2
    4a22:	599b      	ldr	r3, [r3, r6]
    4a24:	469f      	mov	pc, r3
    4a26:	0003      	movs	r3, r0
    4a28:	4333      	orrs	r3, r6
    4a2a:	4699      	mov	r9, r3
    4a2c:	d16c      	bne.n	4b08 <__aeabi_ddiv+0x178>
    4a2e:	2300      	movs	r3, #0
    4a30:	4698      	mov	r8, r3
    4a32:	3302      	adds	r3, #2
    4a34:	2608      	movs	r6, #8
    4a36:	9303      	str	r3, [sp, #12]
    4a38:	e7ce      	b.n	49d8 <__aeabi_ddiv+0x48>
    4a3a:	46cb      	mov	fp, r9
    4a3c:	4641      	mov	r1, r8
    4a3e:	9a03      	ldr	r2, [sp, #12]
    4a40:	9701      	str	r7, [sp, #4]
    4a42:	2a02      	cmp	r2, #2
    4a44:	d165      	bne.n	4b12 <__aeabi_ddiv+0x182>
    4a46:	9b01      	ldr	r3, [sp, #4]
    4a48:	4c4a      	ldr	r4, [pc, #296]	; (4b74 <__aeabi_ddiv+0x1e4>)
    4a4a:	469c      	mov	ip, r3
    4a4c:	2300      	movs	r3, #0
    4a4e:	2200      	movs	r2, #0
    4a50:	4698      	mov	r8, r3
    4a52:	e06b      	b.n	4b2c <__aeabi_ddiv+0x19c>
    4a54:	0003      	movs	r3, r0
    4a56:	4333      	orrs	r3, r6
    4a58:	4699      	mov	r9, r3
    4a5a:	d04e      	beq.n	4afa <__aeabi_ddiv+0x16a>
    4a5c:	2e00      	cmp	r6, #0
    4a5e:	d100      	bne.n	4a62 <__aeabi_ddiv+0xd2>
    4a60:	e1bc      	b.n	4ddc <__aeabi_ddiv+0x44c>
    4a62:	0030      	movs	r0, r6
    4a64:	f001 fb94 	bl	6190 <__clzsi2>
    4a68:	0003      	movs	r3, r0
    4a6a:	3b0b      	subs	r3, #11
    4a6c:	2b1c      	cmp	r3, #28
    4a6e:	dd00      	ble.n	4a72 <__aeabi_ddiv+0xe2>
    4a70:	e1ac      	b.n	4dcc <__aeabi_ddiv+0x43c>
    4a72:	221d      	movs	r2, #29
    4a74:	1ad3      	subs	r3, r2, r3
    4a76:	465a      	mov	r2, fp
    4a78:	0001      	movs	r1, r0
    4a7a:	40da      	lsrs	r2, r3
    4a7c:	3908      	subs	r1, #8
    4a7e:	408e      	lsls	r6, r1
    4a80:	0013      	movs	r3, r2
    4a82:	4333      	orrs	r3, r6
    4a84:	4699      	mov	r9, r3
    4a86:	465b      	mov	r3, fp
    4a88:	408b      	lsls	r3, r1
    4a8a:	4698      	mov	r8, r3
    4a8c:	2300      	movs	r3, #0
    4a8e:	4c3c      	ldr	r4, [pc, #240]	; (4b80 <__aeabi_ddiv+0x1f0>)
    4a90:	2600      	movs	r6, #0
    4a92:	1a24      	subs	r4, r4, r0
    4a94:	9303      	str	r3, [sp, #12]
    4a96:	e79f      	b.n	49d8 <__aeabi_ddiv+0x48>
    4a98:	4651      	mov	r1, sl
    4a9a:	465a      	mov	r2, fp
    4a9c:	4311      	orrs	r1, r2
    4a9e:	d129      	bne.n	4af4 <__aeabi_ddiv+0x164>
    4aa0:	2200      	movs	r2, #0
    4aa2:	4693      	mov	fp, r2
    4aa4:	3202      	adds	r2, #2
    4aa6:	e7b1      	b.n	4a0c <__aeabi_ddiv+0x7c>
    4aa8:	4659      	mov	r1, fp
    4aaa:	4301      	orrs	r1, r0
    4aac:	d01e      	beq.n	4aec <__aeabi_ddiv+0x15c>
    4aae:	465b      	mov	r3, fp
    4ab0:	2b00      	cmp	r3, #0
    4ab2:	d100      	bne.n	4ab6 <__aeabi_ddiv+0x126>
    4ab4:	e19e      	b.n	4df4 <__aeabi_ddiv+0x464>
    4ab6:	4658      	mov	r0, fp
    4ab8:	f001 fb6a 	bl	6190 <__clzsi2>
    4abc:	0003      	movs	r3, r0
    4abe:	3b0b      	subs	r3, #11
    4ac0:	2b1c      	cmp	r3, #28
    4ac2:	dd00      	ble.n	4ac6 <__aeabi_ddiv+0x136>
    4ac4:	e18f      	b.n	4de6 <__aeabi_ddiv+0x456>
    4ac6:	0002      	movs	r2, r0
    4ac8:	4659      	mov	r1, fp
    4aca:	3a08      	subs	r2, #8
    4acc:	4091      	lsls	r1, r2
    4ace:	468b      	mov	fp, r1
    4ad0:	211d      	movs	r1, #29
    4ad2:	1acb      	subs	r3, r1, r3
    4ad4:	4651      	mov	r1, sl
    4ad6:	40d9      	lsrs	r1, r3
    4ad8:	000b      	movs	r3, r1
    4ada:	4659      	mov	r1, fp
    4adc:	430b      	orrs	r3, r1
    4ade:	4651      	mov	r1, sl
    4ae0:	469b      	mov	fp, r3
    4ae2:	4091      	lsls	r1, r2
    4ae4:	4b26      	ldr	r3, [pc, #152]	; (4b80 <__aeabi_ddiv+0x1f0>)
    4ae6:	2200      	movs	r2, #0
    4ae8:	1a1b      	subs	r3, r3, r0
    4aea:	e78f      	b.n	4a0c <__aeabi_ddiv+0x7c>
    4aec:	2300      	movs	r3, #0
    4aee:	2201      	movs	r2, #1
    4af0:	469b      	mov	fp, r3
    4af2:	e78b      	b.n	4a0c <__aeabi_ddiv+0x7c>
    4af4:	4651      	mov	r1, sl
    4af6:	2203      	movs	r2, #3
    4af8:	e788      	b.n	4a0c <__aeabi_ddiv+0x7c>
    4afa:	2300      	movs	r3, #0
    4afc:	4698      	mov	r8, r3
    4afe:	3301      	adds	r3, #1
    4b00:	2604      	movs	r6, #4
    4b02:	2400      	movs	r4, #0
    4b04:	9303      	str	r3, [sp, #12]
    4b06:	e767      	b.n	49d8 <__aeabi_ddiv+0x48>
    4b08:	2303      	movs	r3, #3
    4b0a:	46b1      	mov	r9, r6
    4b0c:	9303      	str	r3, [sp, #12]
    4b0e:	260c      	movs	r6, #12
    4b10:	e762      	b.n	49d8 <__aeabi_ddiv+0x48>
    4b12:	2a03      	cmp	r2, #3
    4b14:	d100      	bne.n	4b18 <__aeabi_ddiv+0x188>
    4b16:	e25c      	b.n	4fd2 <__aeabi_ddiv+0x642>
    4b18:	9b01      	ldr	r3, [sp, #4]
    4b1a:	2a01      	cmp	r2, #1
    4b1c:	d000      	beq.n	4b20 <__aeabi_ddiv+0x190>
    4b1e:	e1e4      	b.n	4eea <__aeabi_ddiv+0x55a>
    4b20:	4013      	ands	r3, r2
    4b22:	469c      	mov	ip, r3
    4b24:	2300      	movs	r3, #0
    4b26:	2400      	movs	r4, #0
    4b28:	2200      	movs	r2, #0
    4b2a:	4698      	mov	r8, r3
    4b2c:	2100      	movs	r1, #0
    4b2e:	0312      	lsls	r2, r2, #12
    4b30:	0b13      	lsrs	r3, r2, #12
    4b32:	0d0a      	lsrs	r2, r1, #20
    4b34:	0512      	lsls	r2, r2, #20
    4b36:	431a      	orrs	r2, r3
    4b38:	0523      	lsls	r3, r4, #20
    4b3a:	4c12      	ldr	r4, [pc, #72]	; (4b84 <__aeabi_ddiv+0x1f4>)
    4b3c:	4640      	mov	r0, r8
    4b3e:	4022      	ands	r2, r4
    4b40:	4313      	orrs	r3, r2
    4b42:	4662      	mov	r2, ip
    4b44:	005b      	lsls	r3, r3, #1
    4b46:	07d2      	lsls	r2, r2, #31
    4b48:	085b      	lsrs	r3, r3, #1
    4b4a:	4313      	orrs	r3, r2
    4b4c:	0019      	movs	r1, r3
    4b4e:	b007      	add	sp, #28
    4b50:	bc3c      	pop	{r2, r3, r4, r5}
    4b52:	4690      	mov	r8, r2
    4b54:	4699      	mov	r9, r3
    4b56:	46a2      	mov	sl, r4
    4b58:	46ab      	mov	fp, r5
    4b5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4b5c:	2300      	movs	r3, #0
    4b5e:	2280      	movs	r2, #128	; 0x80
    4b60:	469c      	mov	ip, r3
    4b62:	0312      	lsls	r2, r2, #12
    4b64:	4698      	mov	r8, r3
    4b66:	4c03      	ldr	r4, [pc, #12]	; (4b74 <__aeabi_ddiv+0x1e4>)
    4b68:	e7e0      	b.n	4b2c <__aeabi_ddiv+0x19c>
    4b6a:	2300      	movs	r3, #0
    4b6c:	4c01      	ldr	r4, [pc, #4]	; (4b74 <__aeabi_ddiv+0x1e4>)
    4b6e:	2200      	movs	r2, #0
    4b70:	4698      	mov	r8, r3
    4b72:	e7db      	b.n	4b2c <__aeabi_ddiv+0x19c>
    4b74:	000007ff 	.word	0x000007ff
    4b78:	fffffc01 	.word	0xfffffc01
    4b7c:	000063e0 	.word	0x000063e0
    4b80:	fffffc0d 	.word	0xfffffc0d
    4b84:	800fffff 	.word	0x800fffff
    4b88:	45d9      	cmp	r9, fp
    4b8a:	d900      	bls.n	4b8e <__aeabi_ddiv+0x1fe>
    4b8c:	e139      	b.n	4e02 <__aeabi_ddiv+0x472>
    4b8e:	d100      	bne.n	4b92 <__aeabi_ddiv+0x202>
    4b90:	e134      	b.n	4dfc <__aeabi_ddiv+0x46c>
    4b92:	2300      	movs	r3, #0
    4b94:	4646      	mov	r6, r8
    4b96:	464d      	mov	r5, r9
    4b98:	469a      	mov	sl, r3
    4b9a:	3c01      	subs	r4, #1
    4b9c:	465b      	mov	r3, fp
    4b9e:	0e0a      	lsrs	r2, r1, #24
    4ba0:	021b      	lsls	r3, r3, #8
    4ba2:	431a      	orrs	r2, r3
    4ba4:	020b      	lsls	r3, r1, #8
    4ba6:	0c17      	lsrs	r7, r2, #16
    4ba8:	9303      	str	r3, [sp, #12]
    4baa:	0413      	lsls	r3, r2, #16
    4bac:	0c1b      	lsrs	r3, r3, #16
    4bae:	0039      	movs	r1, r7
    4bb0:	0028      	movs	r0, r5
    4bb2:	4690      	mov	r8, r2
    4bb4:	9301      	str	r3, [sp, #4]
    4bb6:	f001 fa5f 	bl	6078 <__udivsi3>
    4bba:	0002      	movs	r2, r0
    4bbc:	9b01      	ldr	r3, [sp, #4]
    4bbe:	4683      	mov	fp, r0
    4bc0:	435a      	muls	r2, r3
    4bc2:	0028      	movs	r0, r5
    4bc4:	0039      	movs	r1, r7
    4bc6:	4691      	mov	r9, r2
    4bc8:	f001 fadc 	bl	6184 <__aeabi_uidivmod>
    4bcc:	0c35      	lsrs	r5, r6, #16
    4bce:	0409      	lsls	r1, r1, #16
    4bd0:	430d      	orrs	r5, r1
    4bd2:	45a9      	cmp	r9, r5
    4bd4:	d90d      	bls.n	4bf2 <__aeabi_ddiv+0x262>
    4bd6:	465b      	mov	r3, fp
    4bd8:	4445      	add	r5, r8
    4bda:	3b01      	subs	r3, #1
    4bdc:	45a8      	cmp	r8, r5
    4bde:	d900      	bls.n	4be2 <__aeabi_ddiv+0x252>
    4be0:	e13a      	b.n	4e58 <__aeabi_ddiv+0x4c8>
    4be2:	45a9      	cmp	r9, r5
    4be4:	d800      	bhi.n	4be8 <__aeabi_ddiv+0x258>
    4be6:	e137      	b.n	4e58 <__aeabi_ddiv+0x4c8>
    4be8:	2302      	movs	r3, #2
    4bea:	425b      	negs	r3, r3
    4bec:	469c      	mov	ip, r3
    4bee:	4445      	add	r5, r8
    4bf0:	44e3      	add	fp, ip
    4bf2:	464b      	mov	r3, r9
    4bf4:	1aeb      	subs	r3, r5, r3
    4bf6:	0039      	movs	r1, r7
    4bf8:	0018      	movs	r0, r3
    4bfa:	9304      	str	r3, [sp, #16]
    4bfc:	f001 fa3c 	bl	6078 <__udivsi3>
    4c00:	9b01      	ldr	r3, [sp, #4]
    4c02:	0005      	movs	r5, r0
    4c04:	4343      	muls	r3, r0
    4c06:	0039      	movs	r1, r7
    4c08:	9804      	ldr	r0, [sp, #16]
    4c0a:	4699      	mov	r9, r3
    4c0c:	f001 faba 	bl	6184 <__aeabi_uidivmod>
    4c10:	0433      	lsls	r3, r6, #16
    4c12:	0409      	lsls	r1, r1, #16
    4c14:	0c1b      	lsrs	r3, r3, #16
    4c16:	430b      	orrs	r3, r1
    4c18:	4599      	cmp	r9, r3
    4c1a:	d909      	bls.n	4c30 <__aeabi_ddiv+0x2a0>
    4c1c:	4443      	add	r3, r8
    4c1e:	1e6a      	subs	r2, r5, #1
    4c20:	4598      	cmp	r8, r3
    4c22:	d900      	bls.n	4c26 <__aeabi_ddiv+0x296>
    4c24:	e11a      	b.n	4e5c <__aeabi_ddiv+0x4cc>
    4c26:	4599      	cmp	r9, r3
    4c28:	d800      	bhi.n	4c2c <__aeabi_ddiv+0x29c>
    4c2a:	e117      	b.n	4e5c <__aeabi_ddiv+0x4cc>
    4c2c:	3d02      	subs	r5, #2
    4c2e:	4443      	add	r3, r8
    4c30:	464a      	mov	r2, r9
    4c32:	1a9b      	subs	r3, r3, r2
    4c34:	465a      	mov	r2, fp
    4c36:	0412      	lsls	r2, r2, #16
    4c38:	432a      	orrs	r2, r5
    4c3a:	9903      	ldr	r1, [sp, #12]
    4c3c:	4693      	mov	fp, r2
    4c3e:	0c10      	lsrs	r0, r2, #16
    4c40:	0c0a      	lsrs	r2, r1, #16
    4c42:	4691      	mov	r9, r2
    4c44:	0409      	lsls	r1, r1, #16
    4c46:	465a      	mov	r2, fp
    4c48:	0c09      	lsrs	r1, r1, #16
    4c4a:	464e      	mov	r6, r9
    4c4c:	000d      	movs	r5, r1
    4c4e:	0412      	lsls	r2, r2, #16
    4c50:	0c12      	lsrs	r2, r2, #16
    4c52:	4345      	muls	r5, r0
    4c54:	9105      	str	r1, [sp, #20]
    4c56:	4351      	muls	r1, r2
    4c58:	4372      	muls	r2, r6
    4c5a:	4370      	muls	r0, r6
    4c5c:	1952      	adds	r2, r2, r5
    4c5e:	0c0e      	lsrs	r6, r1, #16
    4c60:	18b2      	adds	r2, r6, r2
    4c62:	4295      	cmp	r5, r2
    4c64:	d903      	bls.n	4c6e <__aeabi_ddiv+0x2de>
    4c66:	2580      	movs	r5, #128	; 0x80
    4c68:	026d      	lsls	r5, r5, #9
    4c6a:	46ac      	mov	ip, r5
    4c6c:	4460      	add	r0, ip
    4c6e:	0c15      	lsrs	r5, r2, #16
    4c70:	0409      	lsls	r1, r1, #16
    4c72:	0412      	lsls	r2, r2, #16
    4c74:	0c09      	lsrs	r1, r1, #16
    4c76:	1828      	adds	r0, r5, r0
    4c78:	1852      	adds	r2, r2, r1
    4c7a:	4283      	cmp	r3, r0
    4c7c:	d200      	bcs.n	4c80 <__aeabi_ddiv+0x2f0>
    4c7e:	e0ce      	b.n	4e1e <__aeabi_ddiv+0x48e>
    4c80:	d100      	bne.n	4c84 <__aeabi_ddiv+0x2f4>
    4c82:	e0c8      	b.n	4e16 <__aeabi_ddiv+0x486>
    4c84:	1a1d      	subs	r5, r3, r0
    4c86:	4653      	mov	r3, sl
    4c88:	1a9e      	subs	r6, r3, r2
    4c8a:	45b2      	cmp	sl, r6
    4c8c:	4192      	sbcs	r2, r2
    4c8e:	4252      	negs	r2, r2
    4c90:	1aab      	subs	r3, r5, r2
    4c92:	469a      	mov	sl, r3
    4c94:	4598      	cmp	r8, r3
    4c96:	d100      	bne.n	4c9a <__aeabi_ddiv+0x30a>
    4c98:	e117      	b.n	4eca <__aeabi_ddiv+0x53a>
    4c9a:	0039      	movs	r1, r7
    4c9c:	0018      	movs	r0, r3
    4c9e:	f001 f9eb 	bl	6078 <__udivsi3>
    4ca2:	9b01      	ldr	r3, [sp, #4]
    4ca4:	0005      	movs	r5, r0
    4ca6:	4343      	muls	r3, r0
    4ca8:	0039      	movs	r1, r7
    4caa:	4650      	mov	r0, sl
    4cac:	9304      	str	r3, [sp, #16]
    4cae:	f001 fa69 	bl	6184 <__aeabi_uidivmod>
    4cb2:	9804      	ldr	r0, [sp, #16]
    4cb4:	040b      	lsls	r3, r1, #16
    4cb6:	0c31      	lsrs	r1, r6, #16
    4cb8:	4319      	orrs	r1, r3
    4cba:	4288      	cmp	r0, r1
    4cbc:	d909      	bls.n	4cd2 <__aeabi_ddiv+0x342>
    4cbe:	4441      	add	r1, r8
    4cc0:	1e6b      	subs	r3, r5, #1
    4cc2:	4588      	cmp	r8, r1
    4cc4:	d900      	bls.n	4cc8 <__aeabi_ddiv+0x338>
    4cc6:	e107      	b.n	4ed8 <__aeabi_ddiv+0x548>
    4cc8:	4288      	cmp	r0, r1
    4cca:	d800      	bhi.n	4cce <__aeabi_ddiv+0x33e>
    4ccc:	e104      	b.n	4ed8 <__aeabi_ddiv+0x548>
    4cce:	3d02      	subs	r5, #2
    4cd0:	4441      	add	r1, r8
    4cd2:	9b04      	ldr	r3, [sp, #16]
    4cd4:	1acb      	subs	r3, r1, r3
    4cd6:	0018      	movs	r0, r3
    4cd8:	0039      	movs	r1, r7
    4cda:	9304      	str	r3, [sp, #16]
    4cdc:	f001 f9cc 	bl	6078 <__udivsi3>
    4ce0:	9b01      	ldr	r3, [sp, #4]
    4ce2:	4682      	mov	sl, r0
    4ce4:	4343      	muls	r3, r0
    4ce6:	0039      	movs	r1, r7
    4ce8:	9804      	ldr	r0, [sp, #16]
    4cea:	9301      	str	r3, [sp, #4]
    4cec:	f001 fa4a 	bl	6184 <__aeabi_uidivmod>
    4cf0:	9801      	ldr	r0, [sp, #4]
    4cf2:	040b      	lsls	r3, r1, #16
    4cf4:	0431      	lsls	r1, r6, #16
    4cf6:	0c09      	lsrs	r1, r1, #16
    4cf8:	4319      	orrs	r1, r3
    4cfa:	4288      	cmp	r0, r1
    4cfc:	d90d      	bls.n	4d1a <__aeabi_ddiv+0x38a>
    4cfe:	4653      	mov	r3, sl
    4d00:	4441      	add	r1, r8
    4d02:	3b01      	subs	r3, #1
    4d04:	4588      	cmp	r8, r1
    4d06:	d900      	bls.n	4d0a <__aeabi_ddiv+0x37a>
    4d08:	e0e8      	b.n	4edc <__aeabi_ddiv+0x54c>
    4d0a:	4288      	cmp	r0, r1
    4d0c:	d800      	bhi.n	4d10 <__aeabi_ddiv+0x380>
    4d0e:	e0e5      	b.n	4edc <__aeabi_ddiv+0x54c>
    4d10:	2302      	movs	r3, #2
    4d12:	425b      	negs	r3, r3
    4d14:	469c      	mov	ip, r3
    4d16:	4441      	add	r1, r8
    4d18:	44e2      	add	sl, ip
    4d1a:	9b01      	ldr	r3, [sp, #4]
    4d1c:	042d      	lsls	r5, r5, #16
    4d1e:	1ace      	subs	r6, r1, r3
    4d20:	4651      	mov	r1, sl
    4d22:	4329      	orrs	r1, r5
    4d24:	9d05      	ldr	r5, [sp, #20]
    4d26:	464f      	mov	r7, r9
    4d28:	002a      	movs	r2, r5
    4d2a:	040b      	lsls	r3, r1, #16
    4d2c:	0c08      	lsrs	r0, r1, #16
    4d2e:	0c1b      	lsrs	r3, r3, #16
    4d30:	435a      	muls	r2, r3
    4d32:	4345      	muls	r5, r0
    4d34:	437b      	muls	r3, r7
    4d36:	4378      	muls	r0, r7
    4d38:	195b      	adds	r3, r3, r5
    4d3a:	0c17      	lsrs	r7, r2, #16
    4d3c:	18fb      	adds	r3, r7, r3
    4d3e:	429d      	cmp	r5, r3
    4d40:	d903      	bls.n	4d4a <__aeabi_ddiv+0x3ba>
    4d42:	2580      	movs	r5, #128	; 0x80
    4d44:	026d      	lsls	r5, r5, #9
    4d46:	46ac      	mov	ip, r5
    4d48:	4460      	add	r0, ip
    4d4a:	0c1d      	lsrs	r5, r3, #16
    4d4c:	0412      	lsls	r2, r2, #16
    4d4e:	041b      	lsls	r3, r3, #16
    4d50:	0c12      	lsrs	r2, r2, #16
    4d52:	1828      	adds	r0, r5, r0
    4d54:	189b      	adds	r3, r3, r2
    4d56:	4286      	cmp	r6, r0
    4d58:	d200      	bcs.n	4d5c <__aeabi_ddiv+0x3cc>
    4d5a:	e093      	b.n	4e84 <__aeabi_ddiv+0x4f4>
    4d5c:	d100      	bne.n	4d60 <__aeabi_ddiv+0x3d0>
    4d5e:	e08e      	b.n	4e7e <__aeabi_ddiv+0x4ee>
    4d60:	2301      	movs	r3, #1
    4d62:	4319      	orrs	r1, r3
    4d64:	4ba0      	ldr	r3, [pc, #640]	; (4fe8 <__aeabi_ddiv+0x658>)
    4d66:	18e3      	adds	r3, r4, r3
    4d68:	2b00      	cmp	r3, #0
    4d6a:	dc00      	bgt.n	4d6e <__aeabi_ddiv+0x3de>
    4d6c:	e099      	b.n	4ea2 <__aeabi_ddiv+0x512>
    4d6e:	074a      	lsls	r2, r1, #29
    4d70:	d000      	beq.n	4d74 <__aeabi_ddiv+0x3e4>
    4d72:	e09e      	b.n	4eb2 <__aeabi_ddiv+0x522>
    4d74:	465a      	mov	r2, fp
    4d76:	01d2      	lsls	r2, r2, #7
    4d78:	d506      	bpl.n	4d88 <__aeabi_ddiv+0x3f8>
    4d7a:	465a      	mov	r2, fp
    4d7c:	4b9b      	ldr	r3, [pc, #620]	; (4fec <__aeabi_ddiv+0x65c>)
    4d7e:	401a      	ands	r2, r3
    4d80:	2380      	movs	r3, #128	; 0x80
    4d82:	4693      	mov	fp, r2
    4d84:	00db      	lsls	r3, r3, #3
    4d86:	18e3      	adds	r3, r4, r3
    4d88:	4a99      	ldr	r2, [pc, #612]	; (4ff0 <__aeabi_ddiv+0x660>)
    4d8a:	4293      	cmp	r3, r2
    4d8c:	dd68      	ble.n	4e60 <__aeabi_ddiv+0x4d0>
    4d8e:	2301      	movs	r3, #1
    4d90:	9a02      	ldr	r2, [sp, #8]
    4d92:	4c98      	ldr	r4, [pc, #608]	; (4ff4 <__aeabi_ddiv+0x664>)
    4d94:	401a      	ands	r2, r3
    4d96:	2300      	movs	r3, #0
    4d98:	4694      	mov	ip, r2
    4d9a:	4698      	mov	r8, r3
    4d9c:	2200      	movs	r2, #0
    4d9e:	e6c5      	b.n	4b2c <__aeabi_ddiv+0x19c>
    4da0:	2280      	movs	r2, #128	; 0x80
    4da2:	464b      	mov	r3, r9
    4da4:	0312      	lsls	r2, r2, #12
    4da6:	4213      	tst	r3, r2
    4da8:	d00a      	beq.n	4dc0 <__aeabi_ddiv+0x430>
    4daa:	465b      	mov	r3, fp
    4dac:	4213      	tst	r3, r2
    4dae:	d106      	bne.n	4dbe <__aeabi_ddiv+0x42e>
    4db0:	431a      	orrs	r2, r3
    4db2:	0312      	lsls	r2, r2, #12
    4db4:	0b12      	lsrs	r2, r2, #12
    4db6:	46ac      	mov	ip, r5
    4db8:	4688      	mov	r8, r1
    4dba:	4c8e      	ldr	r4, [pc, #568]	; (4ff4 <__aeabi_ddiv+0x664>)
    4dbc:	e6b6      	b.n	4b2c <__aeabi_ddiv+0x19c>
    4dbe:	464b      	mov	r3, r9
    4dc0:	431a      	orrs	r2, r3
    4dc2:	0312      	lsls	r2, r2, #12
    4dc4:	0b12      	lsrs	r2, r2, #12
    4dc6:	46bc      	mov	ip, r7
    4dc8:	4c8a      	ldr	r4, [pc, #552]	; (4ff4 <__aeabi_ddiv+0x664>)
    4dca:	e6af      	b.n	4b2c <__aeabi_ddiv+0x19c>
    4dcc:	0003      	movs	r3, r0
    4dce:	465a      	mov	r2, fp
    4dd0:	3b28      	subs	r3, #40	; 0x28
    4dd2:	409a      	lsls	r2, r3
    4dd4:	2300      	movs	r3, #0
    4dd6:	4691      	mov	r9, r2
    4dd8:	4698      	mov	r8, r3
    4dda:	e657      	b.n	4a8c <__aeabi_ddiv+0xfc>
    4ddc:	4658      	mov	r0, fp
    4dde:	f001 f9d7 	bl	6190 <__clzsi2>
    4de2:	3020      	adds	r0, #32
    4de4:	e640      	b.n	4a68 <__aeabi_ddiv+0xd8>
    4de6:	0003      	movs	r3, r0
    4de8:	4652      	mov	r2, sl
    4dea:	3b28      	subs	r3, #40	; 0x28
    4dec:	409a      	lsls	r2, r3
    4dee:	2100      	movs	r1, #0
    4df0:	4693      	mov	fp, r2
    4df2:	e677      	b.n	4ae4 <__aeabi_ddiv+0x154>
    4df4:	f001 f9cc 	bl	6190 <__clzsi2>
    4df8:	3020      	adds	r0, #32
    4dfa:	e65f      	b.n	4abc <__aeabi_ddiv+0x12c>
    4dfc:	4588      	cmp	r8, r1
    4dfe:	d200      	bcs.n	4e02 <__aeabi_ddiv+0x472>
    4e00:	e6c7      	b.n	4b92 <__aeabi_ddiv+0x202>
    4e02:	464b      	mov	r3, r9
    4e04:	07de      	lsls	r6, r3, #31
    4e06:	085d      	lsrs	r5, r3, #1
    4e08:	4643      	mov	r3, r8
    4e0a:	085b      	lsrs	r3, r3, #1
    4e0c:	431e      	orrs	r6, r3
    4e0e:	4643      	mov	r3, r8
    4e10:	07db      	lsls	r3, r3, #31
    4e12:	469a      	mov	sl, r3
    4e14:	e6c2      	b.n	4b9c <__aeabi_ddiv+0x20c>
    4e16:	2500      	movs	r5, #0
    4e18:	4592      	cmp	sl, r2
    4e1a:	d300      	bcc.n	4e1e <__aeabi_ddiv+0x48e>
    4e1c:	e733      	b.n	4c86 <__aeabi_ddiv+0x2f6>
    4e1e:	9e03      	ldr	r6, [sp, #12]
    4e20:	4659      	mov	r1, fp
    4e22:	46b4      	mov	ip, r6
    4e24:	44e2      	add	sl, ip
    4e26:	45b2      	cmp	sl, r6
    4e28:	41ad      	sbcs	r5, r5
    4e2a:	426d      	negs	r5, r5
    4e2c:	4445      	add	r5, r8
    4e2e:	18eb      	adds	r3, r5, r3
    4e30:	3901      	subs	r1, #1
    4e32:	4598      	cmp	r8, r3
    4e34:	d207      	bcs.n	4e46 <__aeabi_ddiv+0x4b6>
    4e36:	4298      	cmp	r0, r3
    4e38:	d900      	bls.n	4e3c <__aeabi_ddiv+0x4ac>
    4e3a:	e07f      	b.n	4f3c <__aeabi_ddiv+0x5ac>
    4e3c:	d100      	bne.n	4e40 <__aeabi_ddiv+0x4b0>
    4e3e:	e0bc      	b.n	4fba <__aeabi_ddiv+0x62a>
    4e40:	1a1d      	subs	r5, r3, r0
    4e42:	468b      	mov	fp, r1
    4e44:	e71f      	b.n	4c86 <__aeabi_ddiv+0x2f6>
    4e46:	4598      	cmp	r8, r3
    4e48:	d1fa      	bne.n	4e40 <__aeabi_ddiv+0x4b0>
    4e4a:	9d03      	ldr	r5, [sp, #12]
    4e4c:	4555      	cmp	r5, sl
    4e4e:	d9f2      	bls.n	4e36 <__aeabi_ddiv+0x4a6>
    4e50:	4643      	mov	r3, r8
    4e52:	468b      	mov	fp, r1
    4e54:	1a1d      	subs	r5, r3, r0
    4e56:	e716      	b.n	4c86 <__aeabi_ddiv+0x2f6>
    4e58:	469b      	mov	fp, r3
    4e5a:	e6ca      	b.n	4bf2 <__aeabi_ddiv+0x262>
    4e5c:	0015      	movs	r5, r2
    4e5e:	e6e7      	b.n	4c30 <__aeabi_ddiv+0x2a0>
    4e60:	465a      	mov	r2, fp
    4e62:	08c9      	lsrs	r1, r1, #3
    4e64:	0752      	lsls	r2, r2, #29
    4e66:	430a      	orrs	r2, r1
    4e68:	055b      	lsls	r3, r3, #21
    4e6a:	4690      	mov	r8, r2
    4e6c:	0d5c      	lsrs	r4, r3, #21
    4e6e:	465a      	mov	r2, fp
    4e70:	2301      	movs	r3, #1
    4e72:	9902      	ldr	r1, [sp, #8]
    4e74:	0252      	lsls	r2, r2, #9
    4e76:	4019      	ands	r1, r3
    4e78:	0b12      	lsrs	r2, r2, #12
    4e7a:	468c      	mov	ip, r1
    4e7c:	e656      	b.n	4b2c <__aeabi_ddiv+0x19c>
    4e7e:	2b00      	cmp	r3, #0
    4e80:	d100      	bne.n	4e84 <__aeabi_ddiv+0x4f4>
    4e82:	e76f      	b.n	4d64 <__aeabi_ddiv+0x3d4>
    4e84:	4446      	add	r6, r8
    4e86:	1e4a      	subs	r2, r1, #1
    4e88:	45b0      	cmp	r8, r6
    4e8a:	d929      	bls.n	4ee0 <__aeabi_ddiv+0x550>
    4e8c:	0011      	movs	r1, r2
    4e8e:	4286      	cmp	r6, r0
    4e90:	d000      	beq.n	4e94 <__aeabi_ddiv+0x504>
    4e92:	e765      	b.n	4d60 <__aeabi_ddiv+0x3d0>
    4e94:	9a03      	ldr	r2, [sp, #12]
    4e96:	4293      	cmp	r3, r2
    4e98:	d000      	beq.n	4e9c <__aeabi_ddiv+0x50c>
    4e9a:	e761      	b.n	4d60 <__aeabi_ddiv+0x3d0>
    4e9c:	e762      	b.n	4d64 <__aeabi_ddiv+0x3d4>
    4e9e:	2101      	movs	r1, #1
    4ea0:	4249      	negs	r1, r1
    4ea2:	2001      	movs	r0, #1
    4ea4:	1ac2      	subs	r2, r0, r3
    4ea6:	2a38      	cmp	r2, #56	; 0x38
    4ea8:	dd21      	ble.n	4eee <__aeabi_ddiv+0x55e>
    4eaa:	9b02      	ldr	r3, [sp, #8]
    4eac:	4003      	ands	r3, r0
    4eae:	469c      	mov	ip, r3
    4eb0:	e638      	b.n	4b24 <__aeabi_ddiv+0x194>
    4eb2:	220f      	movs	r2, #15
    4eb4:	400a      	ands	r2, r1
    4eb6:	2a04      	cmp	r2, #4
    4eb8:	d100      	bne.n	4ebc <__aeabi_ddiv+0x52c>
    4eba:	e75b      	b.n	4d74 <__aeabi_ddiv+0x3e4>
    4ebc:	000a      	movs	r2, r1
    4ebe:	1d11      	adds	r1, r2, #4
    4ec0:	4291      	cmp	r1, r2
    4ec2:	4192      	sbcs	r2, r2
    4ec4:	4252      	negs	r2, r2
    4ec6:	4493      	add	fp, r2
    4ec8:	e754      	b.n	4d74 <__aeabi_ddiv+0x3e4>
    4eca:	4b47      	ldr	r3, [pc, #284]	; (4fe8 <__aeabi_ddiv+0x658>)
    4ecc:	18e3      	adds	r3, r4, r3
    4ece:	2b00      	cmp	r3, #0
    4ed0:	dde5      	ble.n	4e9e <__aeabi_ddiv+0x50e>
    4ed2:	2201      	movs	r2, #1
    4ed4:	4252      	negs	r2, r2
    4ed6:	e7f2      	b.n	4ebe <__aeabi_ddiv+0x52e>
    4ed8:	001d      	movs	r5, r3
    4eda:	e6fa      	b.n	4cd2 <__aeabi_ddiv+0x342>
    4edc:	469a      	mov	sl, r3
    4ede:	e71c      	b.n	4d1a <__aeabi_ddiv+0x38a>
    4ee0:	42b0      	cmp	r0, r6
    4ee2:	d839      	bhi.n	4f58 <__aeabi_ddiv+0x5c8>
    4ee4:	d06e      	beq.n	4fc4 <__aeabi_ddiv+0x634>
    4ee6:	0011      	movs	r1, r2
    4ee8:	e73a      	b.n	4d60 <__aeabi_ddiv+0x3d0>
    4eea:	9302      	str	r3, [sp, #8]
    4eec:	e73a      	b.n	4d64 <__aeabi_ddiv+0x3d4>
    4eee:	2a1f      	cmp	r2, #31
    4ef0:	dc3c      	bgt.n	4f6c <__aeabi_ddiv+0x5dc>
    4ef2:	2320      	movs	r3, #32
    4ef4:	1a9b      	subs	r3, r3, r2
    4ef6:	000c      	movs	r4, r1
    4ef8:	4658      	mov	r0, fp
    4efa:	4099      	lsls	r1, r3
    4efc:	4098      	lsls	r0, r3
    4efe:	1e4b      	subs	r3, r1, #1
    4f00:	4199      	sbcs	r1, r3
    4f02:	465b      	mov	r3, fp
    4f04:	40d4      	lsrs	r4, r2
    4f06:	40d3      	lsrs	r3, r2
    4f08:	4320      	orrs	r0, r4
    4f0a:	4308      	orrs	r0, r1
    4f0c:	001a      	movs	r2, r3
    4f0e:	0743      	lsls	r3, r0, #29
    4f10:	d009      	beq.n	4f26 <__aeabi_ddiv+0x596>
    4f12:	230f      	movs	r3, #15
    4f14:	4003      	ands	r3, r0
    4f16:	2b04      	cmp	r3, #4
    4f18:	d005      	beq.n	4f26 <__aeabi_ddiv+0x596>
    4f1a:	0001      	movs	r1, r0
    4f1c:	1d08      	adds	r0, r1, #4
    4f1e:	4288      	cmp	r0, r1
    4f20:	419b      	sbcs	r3, r3
    4f22:	425b      	negs	r3, r3
    4f24:	18d2      	adds	r2, r2, r3
    4f26:	0213      	lsls	r3, r2, #8
    4f28:	d53a      	bpl.n	4fa0 <__aeabi_ddiv+0x610>
    4f2a:	2301      	movs	r3, #1
    4f2c:	9a02      	ldr	r2, [sp, #8]
    4f2e:	2401      	movs	r4, #1
    4f30:	401a      	ands	r2, r3
    4f32:	2300      	movs	r3, #0
    4f34:	4694      	mov	ip, r2
    4f36:	4698      	mov	r8, r3
    4f38:	2200      	movs	r2, #0
    4f3a:	e5f7      	b.n	4b2c <__aeabi_ddiv+0x19c>
    4f3c:	2102      	movs	r1, #2
    4f3e:	4249      	negs	r1, r1
    4f40:	468c      	mov	ip, r1
    4f42:	9d03      	ldr	r5, [sp, #12]
    4f44:	44e3      	add	fp, ip
    4f46:	46ac      	mov	ip, r5
    4f48:	44e2      	add	sl, ip
    4f4a:	45aa      	cmp	sl, r5
    4f4c:	41ad      	sbcs	r5, r5
    4f4e:	426d      	negs	r5, r5
    4f50:	4445      	add	r5, r8
    4f52:	18ed      	adds	r5, r5, r3
    4f54:	1a2d      	subs	r5, r5, r0
    4f56:	e696      	b.n	4c86 <__aeabi_ddiv+0x2f6>
    4f58:	1e8a      	subs	r2, r1, #2
    4f5a:	9903      	ldr	r1, [sp, #12]
    4f5c:	004d      	lsls	r5, r1, #1
    4f5e:	428d      	cmp	r5, r1
    4f60:	4189      	sbcs	r1, r1
    4f62:	4249      	negs	r1, r1
    4f64:	4441      	add	r1, r8
    4f66:	1876      	adds	r6, r6, r1
    4f68:	9503      	str	r5, [sp, #12]
    4f6a:	e78f      	b.n	4e8c <__aeabi_ddiv+0x4fc>
    4f6c:	201f      	movs	r0, #31
    4f6e:	4240      	negs	r0, r0
    4f70:	1ac3      	subs	r3, r0, r3
    4f72:	4658      	mov	r0, fp
    4f74:	40d8      	lsrs	r0, r3
    4f76:	0003      	movs	r3, r0
    4f78:	2a20      	cmp	r2, #32
    4f7a:	d028      	beq.n	4fce <__aeabi_ddiv+0x63e>
    4f7c:	2040      	movs	r0, #64	; 0x40
    4f7e:	465d      	mov	r5, fp
    4f80:	1a82      	subs	r2, r0, r2
    4f82:	4095      	lsls	r5, r2
    4f84:	4329      	orrs	r1, r5
    4f86:	1e4a      	subs	r2, r1, #1
    4f88:	4191      	sbcs	r1, r2
    4f8a:	4319      	orrs	r1, r3
    4f8c:	2307      	movs	r3, #7
    4f8e:	2200      	movs	r2, #0
    4f90:	400b      	ands	r3, r1
    4f92:	d009      	beq.n	4fa8 <__aeabi_ddiv+0x618>
    4f94:	230f      	movs	r3, #15
    4f96:	2200      	movs	r2, #0
    4f98:	400b      	ands	r3, r1
    4f9a:	0008      	movs	r0, r1
    4f9c:	2b04      	cmp	r3, #4
    4f9e:	d1bd      	bne.n	4f1c <__aeabi_ddiv+0x58c>
    4fa0:	0001      	movs	r1, r0
    4fa2:	0753      	lsls	r3, r2, #29
    4fa4:	0252      	lsls	r2, r2, #9
    4fa6:	0b12      	lsrs	r2, r2, #12
    4fa8:	08c9      	lsrs	r1, r1, #3
    4faa:	4319      	orrs	r1, r3
    4fac:	2301      	movs	r3, #1
    4fae:	4688      	mov	r8, r1
    4fb0:	9902      	ldr	r1, [sp, #8]
    4fb2:	2400      	movs	r4, #0
    4fb4:	4019      	ands	r1, r3
    4fb6:	468c      	mov	ip, r1
    4fb8:	e5b8      	b.n	4b2c <__aeabi_ddiv+0x19c>
    4fba:	4552      	cmp	r2, sl
    4fbc:	d8be      	bhi.n	4f3c <__aeabi_ddiv+0x5ac>
    4fbe:	468b      	mov	fp, r1
    4fc0:	2500      	movs	r5, #0
    4fc2:	e660      	b.n	4c86 <__aeabi_ddiv+0x2f6>
    4fc4:	9d03      	ldr	r5, [sp, #12]
    4fc6:	429d      	cmp	r5, r3
    4fc8:	d3c6      	bcc.n	4f58 <__aeabi_ddiv+0x5c8>
    4fca:	0011      	movs	r1, r2
    4fcc:	e762      	b.n	4e94 <__aeabi_ddiv+0x504>
    4fce:	2500      	movs	r5, #0
    4fd0:	e7d8      	b.n	4f84 <__aeabi_ddiv+0x5f4>
    4fd2:	2280      	movs	r2, #128	; 0x80
    4fd4:	465b      	mov	r3, fp
    4fd6:	0312      	lsls	r2, r2, #12
    4fd8:	431a      	orrs	r2, r3
    4fda:	9b01      	ldr	r3, [sp, #4]
    4fdc:	0312      	lsls	r2, r2, #12
    4fde:	0b12      	lsrs	r2, r2, #12
    4fe0:	469c      	mov	ip, r3
    4fe2:	4688      	mov	r8, r1
    4fe4:	4c03      	ldr	r4, [pc, #12]	; (4ff4 <__aeabi_ddiv+0x664>)
    4fe6:	e5a1      	b.n	4b2c <__aeabi_ddiv+0x19c>
    4fe8:	000003ff 	.word	0x000003ff
    4fec:	feffffff 	.word	0xfeffffff
    4ff0:	000007fe 	.word	0x000007fe
    4ff4:	000007ff 	.word	0x000007ff

00004ff8 <__eqdf2>:
    4ff8:	b5f0      	push	{r4, r5, r6, r7, lr}
    4ffa:	464f      	mov	r7, r9
    4ffc:	4646      	mov	r6, r8
    4ffe:	46d6      	mov	lr, sl
    5000:	005c      	lsls	r4, r3, #1
    5002:	b5c0      	push	{r6, r7, lr}
    5004:	031f      	lsls	r7, r3, #12
    5006:	0fdb      	lsrs	r3, r3, #31
    5008:	469a      	mov	sl, r3
    500a:	4b17      	ldr	r3, [pc, #92]	; (5068 <__eqdf2+0x70>)
    500c:	030e      	lsls	r6, r1, #12
    500e:	004d      	lsls	r5, r1, #1
    5010:	4684      	mov	ip, r0
    5012:	4680      	mov	r8, r0
    5014:	0b36      	lsrs	r6, r6, #12
    5016:	0d6d      	lsrs	r5, r5, #21
    5018:	0fc9      	lsrs	r1, r1, #31
    501a:	4691      	mov	r9, r2
    501c:	0b3f      	lsrs	r7, r7, #12
    501e:	0d64      	lsrs	r4, r4, #21
    5020:	2001      	movs	r0, #1
    5022:	429d      	cmp	r5, r3
    5024:	d008      	beq.n	5038 <__eqdf2+0x40>
    5026:	429c      	cmp	r4, r3
    5028:	d001      	beq.n	502e <__eqdf2+0x36>
    502a:	42a5      	cmp	r5, r4
    502c:	d00b      	beq.n	5046 <__eqdf2+0x4e>
    502e:	bc1c      	pop	{r2, r3, r4}
    5030:	4690      	mov	r8, r2
    5032:	4699      	mov	r9, r3
    5034:	46a2      	mov	sl, r4
    5036:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5038:	4663      	mov	r3, ip
    503a:	4333      	orrs	r3, r6
    503c:	d1f7      	bne.n	502e <__eqdf2+0x36>
    503e:	42ac      	cmp	r4, r5
    5040:	d1f5      	bne.n	502e <__eqdf2+0x36>
    5042:	433a      	orrs	r2, r7
    5044:	d1f3      	bne.n	502e <__eqdf2+0x36>
    5046:	2001      	movs	r0, #1
    5048:	42be      	cmp	r6, r7
    504a:	d1f0      	bne.n	502e <__eqdf2+0x36>
    504c:	45c8      	cmp	r8, r9
    504e:	d1ee      	bne.n	502e <__eqdf2+0x36>
    5050:	4551      	cmp	r1, sl
    5052:	d007      	beq.n	5064 <__eqdf2+0x6c>
    5054:	2d00      	cmp	r5, #0
    5056:	d1ea      	bne.n	502e <__eqdf2+0x36>
    5058:	4663      	mov	r3, ip
    505a:	431e      	orrs	r6, r3
    505c:	0030      	movs	r0, r6
    505e:	1e46      	subs	r6, r0, #1
    5060:	41b0      	sbcs	r0, r6
    5062:	e7e4      	b.n	502e <__eqdf2+0x36>
    5064:	2000      	movs	r0, #0
    5066:	e7e2      	b.n	502e <__eqdf2+0x36>
    5068:	000007ff 	.word	0x000007ff

0000506c <__gedf2>:
    506c:	b5f0      	push	{r4, r5, r6, r7, lr}
    506e:	4645      	mov	r5, r8
    5070:	46de      	mov	lr, fp
    5072:	4657      	mov	r7, sl
    5074:	464e      	mov	r6, r9
    5076:	b5e0      	push	{r5, r6, r7, lr}
    5078:	031f      	lsls	r7, r3, #12
    507a:	0b3d      	lsrs	r5, r7, #12
    507c:	4f2c      	ldr	r7, [pc, #176]	; (5130 <__gedf2+0xc4>)
    507e:	030e      	lsls	r6, r1, #12
    5080:	004c      	lsls	r4, r1, #1
    5082:	46ab      	mov	fp, r5
    5084:	005d      	lsls	r5, r3, #1
    5086:	4684      	mov	ip, r0
    5088:	0b36      	lsrs	r6, r6, #12
    508a:	0d64      	lsrs	r4, r4, #21
    508c:	0fc9      	lsrs	r1, r1, #31
    508e:	4690      	mov	r8, r2
    5090:	0d6d      	lsrs	r5, r5, #21
    5092:	0fdb      	lsrs	r3, r3, #31
    5094:	42bc      	cmp	r4, r7
    5096:	d02a      	beq.n	50ee <__gedf2+0x82>
    5098:	4f25      	ldr	r7, [pc, #148]	; (5130 <__gedf2+0xc4>)
    509a:	42bd      	cmp	r5, r7
    509c:	d02d      	beq.n	50fa <__gedf2+0x8e>
    509e:	2c00      	cmp	r4, #0
    50a0:	d10f      	bne.n	50c2 <__gedf2+0x56>
    50a2:	4330      	orrs	r0, r6
    50a4:	0007      	movs	r7, r0
    50a6:	4681      	mov	r9, r0
    50a8:	4278      	negs	r0, r7
    50aa:	4178      	adcs	r0, r7
    50ac:	b2c0      	uxtb	r0, r0
    50ae:	2d00      	cmp	r5, #0
    50b0:	d117      	bne.n	50e2 <__gedf2+0x76>
    50b2:	465f      	mov	r7, fp
    50b4:	433a      	orrs	r2, r7
    50b6:	d114      	bne.n	50e2 <__gedf2+0x76>
    50b8:	464b      	mov	r3, r9
    50ba:	2000      	movs	r0, #0
    50bc:	2b00      	cmp	r3, #0
    50be:	d00a      	beq.n	50d6 <__gedf2+0x6a>
    50c0:	e006      	b.n	50d0 <__gedf2+0x64>
    50c2:	2d00      	cmp	r5, #0
    50c4:	d102      	bne.n	50cc <__gedf2+0x60>
    50c6:	4658      	mov	r0, fp
    50c8:	4302      	orrs	r2, r0
    50ca:	d001      	beq.n	50d0 <__gedf2+0x64>
    50cc:	4299      	cmp	r1, r3
    50ce:	d018      	beq.n	5102 <__gedf2+0x96>
    50d0:	4248      	negs	r0, r1
    50d2:	2101      	movs	r1, #1
    50d4:	4308      	orrs	r0, r1
    50d6:	bc3c      	pop	{r2, r3, r4, r5}
    50d8:	4690      	mov	r8, r2
    50da:	4699      	mov	r9, r3
    50dc:	46a2      	mov	sl, r4
    50de:	46ab      	mov	fp, r5
    50e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    50e2:	2800      	cmp	r0, #0
    50e4:	d0f2      	beq.n	50cc <__gedf2+0x60>
    50e6:	2001      	movs	r0, #1
    50e8:	3b01      	subs	r3, #1
    50ea:	4318      	orrs	r0, r3
    50ec:	e7f3      	b.n	50d6 <__gedf2+0x6a>
    50ee:	0037      	movs	r7, r6
    50f0:	4307      	orrs	r7, r0
    50f2:	d0d1      	beq.n	5098 <__gedf2+0x2c>
    50f4:	2002      	movs	r0, #2
    50f6:	4240      	negs	r0, r0
    50f8:	e7ed      	b.n	50d6 <__gedf2+0x6a>
    50fa:	465f      	mov	r7, fp
    50fc:	4317      	orrs	r7, r2
    50fe:	d0ce      	beq.n	509e <__gedf2+0x32>
    5100:	e7f8      	b.n	50f4 <__gedf2+0x88>
    5102:	42ac      	cmp	r4, r5
    5104:	dce4      	bgt.n	50d0 <__gedf2+0x64>
    5106:	da03      	bge.n	5110 <__gedf2+0xa4>
    5108:	1e48      	subs	r0, r1, #1
    510a:	2101      	movs	r1, #1
    510c:	4308      	orrs	r0, r1
    510e:	e7e2      	b.n	50d6 <__gedf2+0x6a>
    5110:	455e      	cmp	r6, fp
    5112:	d8dd      	bhi.n	50d0 <__gedf2+0x64>
    5114:	d006      	beq.n	5124 <__gedf2+0xb8>
    5116:	2000      	movs	r0, #0
    5118:	455e      	cmp	r6, fp
    511a:	d2dc      	bcs.n	50d6 <__gedf2+0x6a>
    511c:	2301      	movs	r3, #1
    511e:	1e48      	subs	r0, r1, #1
    5120:	4318      	orrs	r0, r3
    5122:	e7d8      	b.n	50d6 <__gedf2+0x6a>
    5124:	45c4      	cmp	ip, r8
    5126:	d8d3      	bhi.n	50d0 <__gedf2+0x64>
    5128:	2000      	movs	r0, #0
    512a:	45c4      	cmp	ip, r8
    512c:	d3f6      	bcc.n	511c <__gedf2+0xb0>
    512e:	e7d2      	b.n	50d6 <__gedf2+0x6a>
    5130:	000007ff 	.word	0x000007ff

00005134 <__ledf2>:
    5134:	b5f0      	push	{r4, r5, r6, r7, lr}
    5136:	464e      	mov	r6, r9
    5138:	4645      	mov	r5, r8
    513a:	46de      	mov	lr, fp
    513c:	4657      	mov	r7, sl
    513e:	005c      	lsls	r4, r3, #1
    5140:	b5e0      	push	{r5, r6, r7, lr}
    5142:	031f      	lsls	r7, r3, #12
    5144:	0fdb      	lsrs	r3, r3, #31
    5146:	4699      	mov	r9, r3
    5148:	4b2a      	ldr	r3, [pc, #168]	; (51f4 <__ledf2+0xc0>)
    514a:	030e      	lsls	r6, r1, #12
    514c:	004d      	lsls	r5, r1, #1
    514e:	0fc9      	lsrs	r1, r1, #31
    5150:	4684      	mov	ip, r0
    5152:	0b36      	lsrs	r6, r6, #12
    5154:	0d6d      	lsrs	r5, r5, #21
    5156:	468b      	mov	fp, r1
    5158:	4690      	mov	r8, r2
    515a:	0b3f      	lsrs	r7, r7, #12
    515c:	0d64      	lsrs	r4, r4, #21
    515e:	429d      	cmp	r5, r3
    5160:	d020      	beq.n	51a4 <__ledf2+0x70>
    5162:	4b24      	ldr	r3, [pc, #144]	; (51f4 <__ledf2+0xc0>)
    5164:	429c      	cmp	r4, r3
    5166:	d022      	beq.n	51ae <__ledf2+0x7a>
    5168:	2d00      	cmp	r5, #0
    516a:	d112      	bne.n	5192 <__ledf2+0x5e>
    516c:	4330      	orrs	r0, r6
    516e:	4243      	negs	r3, r0
    5170:	4143      	adcs	r3, r0
    5172:	b2db      	uxtb	r3, r3
    5174:	2c00      	cmp	r4, #0
    5176:	d01f      	beq.n	51b8 <__ledf2+0x84>
    5178:	2b00      	cmp	r3, #0
    517a:	d00c      	beq.n	5196 <__ledf2+0x62>
    517c:	464b      	mov	r3, r9
    517e:	2001      	movs	r0, #1
    5180:	3b01      	subs	r3, #1
    5182:	4303      	orrs	r3, r0
    5184:	0018      	movs	r0, r3
    5186:	bc3c      	pop	{r2, r3, r4, r5}
    5188:	4690      	mov	r8, r2
    518a:	4699      	mov	r9, r3
    518c:	46a2      	mov	sl, r4
    518e:	46ab      	mov	fp, r5
    5190:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5192:	2c00      	cmp	r4, #0
    5194:	d016      	beq.n	51c4 <__ledf2+0x90>
    5196:	45cb      	cmp	fp, r9
    5198:	d017      	beq.n	51ca <__ledf2+0x96>
    519a:	465b      	mov	r3, fp
    519c:	4259      	negs	r1, r3
    519e:	2301      	movs	r3, #1
    51a0:	430b      	orrs	r3, r1
    51a2:	e7ef      	b.n	5184 <__ledf2+0x50>
    51a4:	0031      	movs	r1, r6
    51a6:	2302      	movs	r3, #2
    51a8:	4301      	orrs	r1, r0
    51aa:	d1eb      	bne.n	5184 <__ledf2+0x50>
    51ac:	e7d9      	b.n	5162 <__ledf2+0x2e>
    51ae:	0039      	movs	r1, r7
    51b0:	2302      	movs	r3, #2
    51b2:	4311      	orrs	r1, r2
    51b4:	d1e6      	bne.n	5184 <__ledf2+0x50>
    51b6:	e7d7      	b.n	5168 <__ledf2+0x34>
    51b8:	433a      	orrs	r2, r7
    51ba:	d1dd      	bne.n	5178 <__ledf2+0x44>
    51bc:	2300      	movs	r3, #0
    51be:	2800      	cmp	r0, #0
    51c0:	d0e0      	beq.n	5184 <__ledf2+0x50>
    51c2:	e7ea      	b.n	519a <__ledf2+0x66>
    51c4:	433a      	orrs	r2, r7
    51c6:	d1e6      	bne.n	5196 <__ledf2+0x62>
    51c8:	e7e7      	b.n	519a <__ledf2+0x66>
    51ca:	42a5      	cmp	r5, r4
    51cc:	dce5      	bgt.n	519a <__ledf2+0x66>
    51ce:	db05      	blt.n	51dc <__ledf2+0xa8>
    51d0:	42be      	cmp	r6, r7
    51d2:	d8e2      	bhi.n	519a <__ledf2+0x66>
    51d4:	d007      	beq.n	51e6 <__ledf2+0xb2>
    51d6:	2300      	movs	r3, #0
    51d8:	42be      	cmp	r6, r7
    51da:	d2d3      	bcs.n	5184 <__ledf2+0x50>
    51dc:	4659      	mov	r1, fp
    51de:	2301      	movs	r3, #1
    51e0:	3901      	subs	r1, #1
    51e2:	430b      	orrs	r3, r1
    51e4:	e7ce      	b.n	5184 <__ledf2+0x50>
    51e6:	45c4      	cmp	ip, r8
    51e8:	d8d7      	bhi.n	519a <__ledf2+0x66>
    51ea:	2300      	movs	r3, #0
    51ec:	45c4      	cmp	ip, r8
    51ee:	d3f5      	bcc.n	51dc <__ledf2+0xa8>
    51f0:	e7c8      	b.n	5184 <__ledf2+0x50>
    51f2:	46c0      	nop			; (mov r8, r8)
    51f4:	000007ff 	.word	0x000007ff

000051f8 <__aeabi_dmul>:
    51f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    51fa:	4657      	mov	r7, sl
    51fc:	4645      	mov	r5, r8
    51fe:	46de      	mov	lr, fp
    5200:	464e      	mov	r6, r9
    5202:	b5e0      	push	{r5, r6, r7, lr}
    5204:	030c      	lsls	r4, r1, #12
    5206:	4698      	mov	r8, r3
    5208:	004e      	lsls	r6, r1, #1
    520a:	0b23      	lsrs	r3, r4, #12
    520c:	b087      	sub	sp, #28
    520e:	0007      	movs	r7, r0
    5210:	4692      	mov	sl, r2
    5212:	469b      	mov	fp, r3
    5214:	0d76      	lsrs	r6, r6, #21
    5216:	0fcd      	lsrs	r5, r1, #31
    5218:	2e00      	cmp	r6, #0
    521a:	d06b      	beq.n	52f4 <__aeabi_dmul+0xfc>
    521c:	4b6d      	ldr	r3, [pc, #436]	; (53d4 <__aeabi_dmul+0x1dc>)
    521e:	429e      	cmp	r6, r3
    5220:	d035      	beq.n	528e <__aeabi_dmul+0x96>
    5222:	2480      	movs	r4, #128	; 0x80
    5224:	465b      	mov	r3, fp
    5226:	0f42      	lsrs	r2, r0, #29
    5228:	0424      	lsls	r4, r4, #16
    522a:	00db      	lsls	r3, r3, #3
    522c:	4314      	orrs	r4, r2
    522e:	431c      	orrs	r4, r3
    5230:	00c3      	lsls	r3, r0, #3
    5232:	4699      	mov	r9, r3
    5234:	4b68      	ldr	r3, [pc, #416]	; (53d8 <__aeabi_dmul+0x1e0>)
    5236:	46a3      	mov	fp, r4
    5238:	469c      	mov	ip, r3
    523a:	2300      	movs	r3, #0
    523c:	2700      	movs	r7, #0
    523e:	4466      	add	r6, ip
    5240:	9302      	str	r3, [sp, #8]
    5242:	4643      	mov	r3, r8
    5244:	031c      	lsls	r4, r3, #12
    5246:	005a      	lsls	r2, r3, #1
    5248:	0fdb      	lsrs	r3, r3, #31
    524a:	4650      	mov	r0, sl
    524c:	0b24      	lsrs	r4, r4, #12
    524e:	0d52      	lsrs	r2, r2, #21
    5250:	4698      	mov	r8, r3
    5252:	d100      	bne.n	5256 <__aeabi_dmul+0x5e>
    5254:	e076      	b.n	5344 <__aeabi_dmul+0x14c>
    5256:	4b5f      	ldr	r3, [pc, #380]	; (53d4 <__aeabi_dmul+0x1dc>)
    5258:	429a      	cmp	r2, r3
    525a:	d06d      	beq.n	5338 <__aeabi_dmul+0x140>
    525c:	2380      	movs	r3, #128	; 0x80
    525e:	0f41      	lsrs	r1, r0, #29
    5260:	041b      	lsls	r3, r3, #16
    5262:	430b      	orrs	r3, r1
    5264:	495c      	ldr	r1, [pc, #368]	; (53d8 <__aeabi_dmul+0x1e0>)
    5266:	00e4      	lsls	r4, r4, #3
    5268:	468c      	mov	ip, r1
    526a:	431c      	orrs	r4, r3
    526c:	00c3      	lsls	r3, r0, #3
    526e:	2000      	movs	r0, #0
    5270:	4462      	add	r2, ip
    5272:	4641      	mov	r1, r8
    5274:	18b6      	adds	r6, r6, r2
    5276:	4069      	eors	r1, r5
    5278:	1c72      	adds	r2, r6, #1
    527a:	9101      	str	r1, [sp, #4]
    527c:	4694      	mov	ip, r2
    527e:	4307      	orrs	r7, r0
    5280:	2f0f      	cmp	r7, #15
    5282:	d900      	bls.n	5286 <__aeabi_dmul+0x8e>
    5284:	e0b0      	b.n	53e8 <__aeabi_dmul+0x1f0>
    5286:	4a55      	ldr	r2, [pc, #340]	; (53dc <__aeabi_dmul+0x1e4>)
    5288:	00bf      	lsls	r7, r7, #2
    528a:	59d2      	ldr	r2, [r2, r7]
    528c:	4697      	mov	pc, r2
    528e:	465b      	mov	r3, fp
    5290:	4303      	orrs	r3, r0
    5292:	4699      	mov	r9, r3
    5294:	d000      	beq.n	5298 <__aeabi_dmul+0xa0>
    5296:	e087      	b.n	53a8 <__aeabi_dmul+0x1b0>
    5298:	2300      	movs	r3, #0
    529a:	469b      	mov	fp, r3
    529c:	3302      	adds	r3, #2
    529e:	2708      	movs	r7, #8
    52a0:	9302      	str	r3, [sp, #8]
    52a2:	e7ce      	b.n	5242 <__aeabi_dmul+0x4a>
    52a4:	4642      	mov	r2, r8
    52a6:	9201      	str	r2, [sp, #4]
    52a8:	2802      	cmp	r0, #2
    52aa:	d067      	beq.n	537c <__aeabi_dmul+0x184>
    52ac:	2803      	cmp	r0, #3
    52ae:	d100      	bne.n	52b2 <__aeabi_dmul+0xba>
    52b0:	e20e      	b.n	56d0 <__aeabi_dmul+0x4d8>
    52b2:	2801      	cmp	r0, #1
    52b4:	d000      	beq.n	52b8 <__aeabi_dmul+0xc0>
    52b6:	e162      	b.n	557e <__aeabi_dmul+0x386>
    52b8:	2300      	movs	r3, #0
    52ba:	2400      	movs	r4, #0
    52bc:	2200      	movs	r2, #0
    52be:	4699      	mov	r9, r3
    52c0:	9901      	ldr	r1, [sp, #4]
    52c2:	4001      	ands	r1, r0
    52c4:	b2cd      	uxtb	r5, r1
    52c6:	2100      	movs	r1, #0
    52c8:	0312      	lsls	r2, r2, #12
    52ca:	0d0b      	lsrs	r3, r1, #20
    52cc:	0b12      	lsrs	r2, r2, #12
    52ce:	051b      	lsls	r3, r3, #20
    52d0:	4313      	orrs	r3, r2
    52d2:	4a43      	ldr	r2, [pc, #268]	; (53e0 <__aeabi_dmul+0x1e8>)
    52d4:	0524      	lsls	r4, r4, #20
    52d6:	4013      	ands	r3, r2
    52d8:	431c      	orrs	r4, r3
    52da:	0064      	lsls	r4, r4, #1
    52dc:	07ed      	lsls	r5, r5, #31
    52de:	0864      	lsrs	r4, r4, #1
    52e0:	432c      	orrs	r4, r5
    52e2:	4648      	mov	r0, r9
    52e4:	0021      	movs	r1, r4
    52e6:	b007      	add	sp, #28
    52e8:	bc3c      	pop	{r2, r3, r4, r5}
    52ea:	4690      	mov	r8, r2
    52ec:	4699      	mov	r9, r3
    52ee:	46a2      	mov	sl, r4
    52f0:	46ab      	mov	fp, r5
    52f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    52f4:	4303      	orrs	r3, r0
    52f6:	4699      	mov	r9, r3
    52f8:	d04f      	beq.n	539a <__aeabi_dmul+0x1a2>
    52fa:	465b      	mov	r3, fp
    52fc:	2b00      	cmp	r3, #0
    52fe:	d100      	bne.n	5302 <__aeabi_dmul+0x10a>
    5300:	e189      	b.n	5616 <__aeabi_dmul+0x41e>
    5302:	4658      	mov	r0, fp
    5304:	f000 ff44 	bl	6190 <__clzsi2>
    5308:	0003      	movs	r3, r0
    530a:	3b0b      	subs	r3, #11
    530c:	2b1c      	cmp	r3, #28
    530e:	dd00      	ble.n	5312 <__aeabi_dmul+0x11a>
    5310:	e17a      	b.n	5608 <__aeabi_dmul+0x410>
    5312:	221d      	movs	r2, #29
    5314:	1ad3      	subs	r3, r2, r3
    5316:	003a      	movs	r2, r7
    5318:	0001      	movs	r1, r0
    531a:	465c      	mov	r4, fp
    531c:	40da      	lsrs	r2, r3
    531e:	3908      	subs	r1, #8
    5320:	408c      	lsls	r4, r1
    5322:	0013      	movs	r3, r2
    5324:	408f      	lsls	r7, r1
    5326:	4323      	orrs	r3, r4
    5328:	469b      	mov	fp, r3
    532a:	46b9      	mov	r9, r7
    532c:	2300      	movs	r3, #0
    532e:	4e2d      	ldr	r6, [pc, #180]	; (53e4 <__aeabi_dmul+0x1ec>)
    5330:	2700      	movs	r7, #0
    5332:	1a36      	subs	r6, r6, r0
    5334:	9302      	str	r3, [sp, #8]
    5336:	e784      	b.n	5242 <__aeabi_dmul+0x4a>
    5338:	4653      	mov	r3, sl
    533a:	4323      	orrs	r3, r4
    533c:	d12a      	bne.n	5394 <__aeabi_dmul+0x19c>
    533e:	2400      	movs	r4, #0
    5340:	2002      	movs	r0, #2
    5342:	e796      	b.n	5272 <__aeabi_dmul+0x7a>
    5344:	4653      	mov	r3, sl
    5346:	4323      	orrs	r3, r4
    5348:	d020      	beq.n	538c <__aeabi_dmul+0x194>
    534a:	2c00      	cmp	r4, #0
    534c:	d100      	bne.n	5350 <__aeabi_dmul+0x158>
    534e:	e157      	b.n	5600 <__aeabi_dmul+0x408>
    5350:	0020      	movs	r0, r4
    5352:	f000 ff1d 	bl	6190 <__clzsi2>
    5356:	0003      	movs	r3, r0
    5358:	3b0b      	subs	r3, #11
    535a:	2b1c      	cmp	r3, #28
    535c:	dd00      	ble.n	5360 <__aeabi_dmul+0x168>
    535e:	e149      	b.n	55f4 <__aeabi_dmul+0x3fc>
    5360:	211d      	movs	r1, #29
    5362:	1acb      	subs	r3, r1, r3
    5364:	4651      	mov	r1, sl
    5366:	0002      	movs	r2, r0
    5368:	40d9      	lsrs	r1, r3
    536a:	4653      	mov	r3, sl
    536c:	3a08      	subs	r2, #8
    536e:	4094      	lsls	r4, r2
    5370:	4093      	lsls	r3, r2
    5372:	430c      	orrs	r4, r1
    5374:	4a1b      	ldr	r2, [pc, #108]	; (53e4 <__aeabi_dmul+0x1ec>)
    5376:	1a12      	subs	r2, r2, r0
    5378:	2000      	movs	r0, #0
    537a:	e77a      	b.n	5272 <__aeabi_dmul+0x7a>
    537c:	2501      	movs	r5, #1
    537e:	9b01      	ldr	r3, [sp, #4]
    5380:	4c14      	ldr	r4, [pc, #80]	; (53d4 <__aeabi_dmul+0x1dc>)
    5382:	401d      	ands	r5, r3
    5384:	2300      	movs	r3, #0
    5386:	2200      	movs	r2, #0
    5388:	4699      	mov	r9, r3
    538a:	e79c      	b.n	52c6 <__aeabi_dmul+0xce>
    538c:	2400      	movs	r4, #0
    538e:	2200      	movs	r2, #0
    5390:	2001      	movs	r0, #1
    5392:	e76e      	b.n	5272 <__aeabi_dmul+0x7a>
    5394:	4653      	mov	r3, sl
    5396:	2003      	movs	r0, #3
    5398:	e76b      	b.n	5272 <__aeabi_dmul+0x7a>
    539a:	2300      	movs	r3, #0
    539c:	469b      	mov	fp, r3
    539e:	3301      	adds	r3, #1
    53a0:	2704      	movs	r7, #4
    53a2:	2600      	movs	r6, #0
    53a4:	9302      	str	r3, [sp, #8]
    53a6:	e74c      	b.n	5242 <__aeabi_dmul+0x4a>
    53a8:	2303      	movs	r3, #3
    53aa:	4681      	mov	r9, r0
    53ac:	270c      	movs	r7, #12
    53ae:	9302      	str	r3, [sp, #8]
    53b0:	e747      	b.n	5242 <__aeabi_dmul+0x4a>
    53b2:	2280      	movs	r2, #128	; 0x80
    53b4:	2300      	movs	r3, #0
    53b6:	2500      	movs	r5, #0
    53b8:	0312      	lsls	r2, r2, #12
    53ba:	4699      	mov	r9, r3
    53bc:	4c05      	ldr	r4, [pc, #20]	; (53d4 <__aeabi_dmul+0x1dc>)
    53be:	e782      	b.n	52c6 <__aeabi_dmul+0xce>
    53c0:	465c      	mov	r4, fp
    53c2:	464b      	mov	r3, r9
    53c4:	9802      	ldr	r0, [sp, #8]
    53c6:	e76f      	b.n	52a8 <__aeabi_dmul+0xb0>
    53c8:	465c      	mov	r4, fp
    53ca:	464b      	mov	r3, r9
    53cc:	9501      	str	r5, [sp, #4]
    53ce:	9802      	ldr	r0, [sp, #8]
    53d0:	e76a      	b.n	52a8 <__aeabi_dmul+0xb0>
    53d2:	46c0      	nop			; (mov r8, r8)
    53d4:	000007ff 	.word	0x000007ff
    53d8:	fffffc01 	.word	0xfffffc01
    53dc:	00006420 	.word	0x00006420
    53e0:	800fffff 	.word	0x800fffff
    53e4:	fffffc0d 	.word	0xfffffc0d
    53e8:	464a      	mov	r2, r9
    53ea:	4649      	mov	r1, r9
    53ec:	0c17      	lsrs	r7, r2, #16
    53ee:	0c1a      	lsrs	r2, r3, #16
    53f0:	041b      	lsls	r3, r3, #16
    53f2:	0c1b      	lsrs	r3, r3, #16
    53f4:	0408      	lsls	r0, r1, #16
    53f6:	0019      	movs	r1, r3
    53f8:	0c00      	lsrs	r0, r0, #16
    53fa:	4341      	muls	r1, r0
    53fc:	0015      	movs	r5, r2
    53fe:	4688      	mov	r8, r1
    5400:	0019      	movs	r1, r3
    5402:	437d      	muls	r5, r7
    5404:	4379      	muls	r1, r7
    5406:	9503      	str	r5, [sp, #12]
    5408:	4689      	mov	r9, r1
    540a:	0029      	movs	r1, r5
    540c:	0015      	movs	r5, r2
    540e:	4345      	muls	r5, r0
    5410:	444d      	add	r5, r9
    5412:	9502      	str	r5, [sp, #8]
    5414:	4645      	mov	r5, r8
    5416:	0c2d      	lsrs	r5, r5, #16
    5418:	46aa      	mov	sl, r5
    541a:	9d02      	ldr	r5, [sp, #8]
    541c:	4455      	add	r5, sl
    541e:	45a9      	cmp	r9, r5
    5420:	d906      	bls.n	5430 <__aeabi_dmul+0x238>
    5422:	468a      	mov	sl, r1
    5424:	2180      	movs	r1, #128	; 0x80
    5426:	0249      	lsls	r1, r1, #9
    5428:	4689      	mov	r9, r1
    542a:	44ca      	add	sl, r9
    542c:	4651      	mov	r1, sl
    542e:	9103      	str	r1, [sp, #12]
    5430:	0c29      	lsrs	r1, r5, #16
    5432:	9104      	str	r1, [sp, #16]
    5434:	4641      	mov	r1, r8
    5436:	0409      	lsls	r1, r1, #16
    5438:	042d      	lsls	r5, r5, #16
    543a:	0c09      	lsrs	r1, r1, #16
    543c:	4688      	mov	r8, r1
    543e:	0029      	movs	r1, r5
    5440:	0c25      	lsrs	r5, r4, #16
    5442:	0424      	lsls	r4, r4, #16
    5444:	4441      	add	r1, r8
    5446:	0c24      	lsrs	r4, r4, #16
    5448:	9105      	str	r1, [sp, #20]
    544a:	0021      	movs	r1, r4
    544c:	4341      	muls	r1, r0
    544e:	4688      	mov	r8, r1
    5450:	0021      	movs	r1, r4
    5452:	4379      	muls	r1, r7
    5454:	468a      	mov	sl, r1
    5456:	4368      	muls	r0, r5
    5458:	4641      	mov	r1, r8
    545a:	4450      	add	r0, sl
    545c:	4681      	mov	r9, r0
    545e:	0c08      	lsrs	r0, r1, #16
    5460:	4448      	add	r0, r9
    5462:	436f      	muls	r7, r5
    5464:	4582      	cmp	sl, r0
    5466:	d903      	bls.n	5470 <__aeabi_dmul+0x278>
    5468:	2180      	movs	r1, #128	; 0x80
    546a:	0249      	lsls	r1, r1, #9
    546c:	4689      	mov	r9, r1
    546e:	444f      	add	r7, r9
    5470:	0c01      	lsrs	r1, r0, #16
    5472:	4689      	mov	r9, r1
    5474:	0039      	movs	r1, r7
    5476:	4449      	add	r1, r9
    5478:	9102      	str	r1, [sp, #8]
    547a:	4641      	mov	r1, r8
    547c:	040f      	lsls	r7, r1, #16
    547e:	9904      	ldr	r1, [sp, #16]
    5480:	0c3f      	lsrs	r7, r7, #16
    5482:	4688      	mov	r8, r1
    5484:	0400      	lsls	r0, r0, #16
    5486:	19c0      	adds	r0, r0, r7
    5488:	4480      	add	r8, r0
    548a:	4641      	mov	r1, r8
    548c:	9104      	str	r1, [sp, #16]
    548e:	4659      	mov	r1, fp
    5490:	0c0f      	lsrs	r7, r1, #16
    5492:	0409      	lsls	r1, r1, #16
    5494:	0c09      	lsrs	r1, r1, #16
    5496:	4688      	mov	r8, r1
    5498:	4359      	muls	r1, r3
    549a:	468a      	mov	sl, r1
    549c:	0039      	movs	r1, r7
    549e:	4351      	muls	r1, r2
    54a0:	4689      	mov	r9, r1
    54a2:	4641      	mov	r1, r8
    54a4:	434a      	muls	r2, r1
    54a6:	4651      	mov	r1, sl
    54a8:	0c09      	lsrs	r1, r1, #16
    54aa:	468b      	mov	fp, r1
    54ac:	437b      	muls	r3, r7
    54ae:	18d2      	adds	r2, r2, r3
    54b0:	445a      	add	r2, fp
    54b2:	4293      	cmp	r3, r2
    54b4:	d903      	bls.n	54be <__aeabi_dmul+0x2c6>
    54b6:	2380      	movs	r3, #128	; 0x80
    54b8:	025b      	lsls	r3, r3, #9
    54ba:	469b      	mov	fp, r3
    54bc:	44d9      	add	r9, fp
    54be:	4651      	mov	r1, sl
    54c0:	0409      	lsls	r1, r1, #16
    54c2:	0c09      	lsrs	r1, r1, #16
    54c4:	468a      	mov	sl, r1
    54c6:	4641      	mov	r1, r8
    54c8:	4361      	muls	r1, r4
    54ca:	437c      	muls	r4, r7
    54cc:	0c13      	lsrs	r3, r2, #16
    54ce:	0412      	lsls	r2, r2, #16
    54d0:	444b      	add	r3, r9
    54d2:	4452      	add	r2, sl
    54d4:	46a1      	mov	r9, r4
    54d6:	468a      	mov	sl, r1
    54d8:	003c      	movs	r4, r7
    54da:	4641      	mov	r1, r8
    54dc:	436c      	muls	r4, r5
    54de:	434d      	muls	r5, r1
    54e0:	4651      	mov	r1, sl
    54e2:	444d      	add	r5, r9
    54e4:	0c0f      	lsrs	r7, r1, #16
    54e6:	197d      	adds	r5, r7, r5
    54e8:	45a9      	cmp	r9, r5
    54ea:	d903      	bls.n	54f4 <__aeabi_dmul+0x2fc>
    54ec:	2180      	movs	r1, #128	; 0x80
    54ee:	0249      	lsls	r1, r1, #9
    54f0:	4688      	mov	r8, r1
    54f2:	4444      	add	r4, r8
    54f4:	9f04      	ldr	r7, [sp, #16]
    54f6:	9903      	ldr	r1, [sp, #12]
    54f8:	46b8      	mov	r8, r7
    54fa:	4441      	add	r1, r8
    54fc:	468b      	mov	fp, r1
    54fe:	4583      	cmp	fp, r0
    5500:	4180      	sbcs	r0, r0
    5502:	4241      	negs	r1, r0
    5504:	4688      	mov	r8, r1
    5506:	4651      	mov	r1, sl
    5508:	0408      	lsls	r0, r1, #16
    550a:	042f      	lsls	r7, r5, #16
    550c:	0c00      	lsrs	r0, r0, #16
    550e:	183f      	adds	r7, r7, r0
    5510:	4658      	mov	r0, fp
    5512:	9902      	ldr	r1, [sp, #8]
    5514:	1810      	adds	r0, r2, r0
    5516:	4689      	mov	r9, r1
    5518:	4290      	cmp	r0, r2
    551a:	4192      	sbcs	r2, r2
    551c:	444f      	add	r7, r9
    551e:	46ba      	mov	sl, r7
    5520:	4252      	negs	r2, r2
    5522:	4699      	mov	r9, r3
    5524:	4693      	mov	fp, r2
    5526:	44c2      	add	sl, r8
    5528:	44d1      	add	r9, sl
    552a:	44cb      	add	fp, r9
    552c:	428f      	cmp	r7, r1
    552e:	41bf      	sbcs	r7, r7
    5530:	45c2      	cmp	sl, r8
    5532:	4189      	sbcs	r1, r1
    5534:	4599      	cmp	r9, r3
    5536:	419b      	sbcs	r3, r3
    5538:	4593      	cmp	fp, r2
    553a:	4192      	sbcs	r2, r2
    553c:	427f      	negs	r7, r7
    553e:	4249      	negs	r1, r1
    5540:	0c2d      	lsrs	r5, r5, #16
    5542:	4252      	negs	r2, r2
    5544:	430f      	orrs	r7, r1
    5546:	425b      	negs	r3, r3
    5548:	4313      	orrs	r3, r2
    554a:	197f      	adds	r7, r7, r5
    554c:	18ff      	adds	r7, r7, r3
    554e:	465b      	mov	r3, fp
    5550:	193c      	adds	r4, r7, r4
    5552:	0ddb      	lsrs	r3, r3, #23
    5554:	9a05      	ldr	r2, [sp, #20]
    5556:	0264      	lsls	r4, r4, #9
    5558:	431c      	orrs	r4, r3
    555a:	0243      	lsls	r3, r0, #9
    555c:	4313      	orrs	r3, r2
    555e:	1e5d      	subs	r5, r3, #1
    5560:	41ab      	sbcs	r3, r5
    5562:	465a      	mov	r2, fp
    5564:	0dc0      	lsrs	r0, r0, #23
    5566:	4303      	orrs	r3, r0
    5568:	0252      	lsls	r2, r2, #9
    556a:	4313      	orrs	r3, r2
    556c:	01e2      	lsls	r2, r4, #7
    556e:	d556      	bpl.n	561e <__aeabi_dmul+0x426>
    5570:	2001      	movs	r0, #1
    5572:	085a      	lsrs	r2, r3, #1
    5574:	4003      	ands	r3, r0
    5576:	4313      	orrs	r3, r2
    5578:	07e2      	lsls	r2, r4, #31
    557a:	4313      	orrs	r3, r2
    557c:	0864      	lsrs	r4, r4, #1
    557e:	485a      	ldr	r0, [pc, #360]	; (56e8 <__aeabi_dmul+0x4f0>)
    5580:	4460      	add	r0, ip
    5582:	2800      	cmp	r0, #0
    5584:	dd4d      	ble.n	5622 <__aeabi_dmul+0x42a>
    5586:	075a      	lsls	r2, r3, #29
    5588:	d009      	beq.n	559e <__aeabi_dmul+0x3a6>
    558a:	220f      	movs	r2, #15
    558c:	401a      	ands	r2, r3
    558e:	2a04      	cmp	r2, #4
    5590:	d005      	beq.n	559e <__aeabi_dmul+0x3a6>
    5592:	1d1a      	adds	r2, r3, #4
    5594:	429a      	cmp	r2, r3
    5596:	419b      	sbcs	r3, r3
    5598:	425b      	negs	r3, r3
    559a:	18e4      	adds	r4, r4, r3
    559c:	0013      	movs	r3, r2
    559e:	01e2      	lsls	r2, r4, #7
    55a0:	d504      	bpl.n	55ac <__aeabi_dmul+0x3b4>
    55a2:	2080      	movs	r0, #128	; 0x80
    55a4:	4a51      	ldr	r2, [pc, #324]	; (56ec <__aeabi_dmul+0x4f4>)
    55a6:	00c0      	lsls	r0, r0, #3
    55a8:	4014      	ands	r4, r2
    55aa:	4460      	add	r0, ip
    55ac:	4a50      	ldr	r2, [pc, #320]	; (56f0 <__aeabi_dmul+0x4f8>)
    55ae:	4290      	cmp	r0, r2
    55b0:	dd00      	ble.n	55b4 <__aeabi_dmul+0x3bc>
    55b2:	e6e3      	b.n	537c <__aeabi_dmul+0x184>
    55b4:	2501      	movs	r5, #1
    55b6:	08db      	lsrs	r3, r3, #3
    55b8:	0762      	lsls	r2, r4, #29
    55ba:	431a      	orrs	r2, r3
    55bc:	0264      	lsls	r4, r4, #9
    55be:	9b01      	ldr	r3, [sp, #4]
    55c0:	4691      	mov	r9, r2
    55c2:	0b22      	lsrs	r2, r4, #12
    55c4:	0544      	lsls	r4, r0, #21
    55c6:	0d64      	lsrs	r4, r4, #21
    55c8:	401d      	ands	r5, r3
    55ca:	e67c      	b.n	52c6 <__aeabi_dmul+0xce>
    55cc:	2280      	movs	r2, #128	; 0x80
    55ce:	4659      	mov	r1, fp
    55d0:	0312      	lsls	r2, r2, #12
    55d2:	4211      	tst	r1, r2
    55d4:	d008      	beq.n	55e8 <__aeabi_dmul+0x3f0>
    55d6:	4214      	tst	r4, r2
    55d8:	d106      	bne.n	55e8 <__aeabi_dmul+0x3f0>
    55da:	4322      	orrs	r2, r4
    55dc:	0312      	lsls	r2, r2, #12
    55de:	0b12      	lsrs	r2, r2, #12
    55e0:	4645      	mov	r5, r8
    55e2:	4699      	mov	r9, r3
    55e4:	4c43      	ldr	r4, [pc, #268]	; (56f4 <__aeabi_dmul+0x4fc>)
    55e6:	e66e      	b.n	52c6 <__aeabi_dmul+0xce>
    55e8:	465b      	mov	r3, fp
    55ea:	431a      	orrs	r2, r3
    55ec:	0312      	lsls	r2, r2, #12
    55ee:	0b12      	lsrs	r2, r2, #12
    55f0:	4c40      	ldr	r4, [pc, #256]	; (56f4 <__aeabi_dmul+0x4fc>)
    55f2:	e668      	b.n	52c6 <__aeabi_dmul+0xce>
    55f4:	0003      	movs	r3, r0
    55f6:	4654      	mov	r4, sl
    55f8:	3b28      	subs	r3, #40	; 0x28
    55fa:	409c      	lsls	r4, r3
    55fc:	2300      	movs	r3, #0
    55fe:	e6b9      	b.n	5374 <__aeabi_dmul+0x17c>
    5600:	f000 fdc6 	bl	6190 <__clzsi2>
    5604:	3020      	adds	r0, #32
    5606:	e6a6      	b.n	5356 <__aeabi_dmul+0x15e>
    5608:	0003      	movs	r3, r0
    560a:	3b28      	subs	r3, #40	; 0x28
    560c:	409f      	lsls	r7, r3
    560e:	2300      	movs	r3, #0
    5610:	46bb      	mov	fp, r7
    5612:	4699      	mov	r9, r3
    5614:	e68a      	b.n	532c <__aeabi_dmul+0x134>
    5616:	f000 fdbb 	bl	6190 <__clzsi2>
    561a:	3020      	adds	r0, #32
    561c:	e674      	b.n	5308 <__aeabi_dmul+0x110>
    561e:	46b4      	mov	ip, r6
    5620:	e7ad      	b.n	557e <__aeabi_dmul+0x386>
    5622:	2501      	movs	r5, #1
    5624:	1a2a      	subs	r2, r5, r0
    5626:	2a38      	cmp	r2, #56	; 0x38
    5628:	dd06      	ble.n	5638 <__aeabi_dmul+0x440>
    562a:	9b01      	ldr	r3, [sp, #4]
    562c:	2400      	movs	r4, #0
    562e:	401d      	ands	r5, r3
    5630:	2300      	movs	r3, #0
    5632:	2200      	movs	r2, #0
    5634:	4699      	mov	r9, r3
    5636:	e646      	b.n	52c6 <__aeabi_dmul+0xce>
    5638:	2a1f      	cmp	r2, #31
    563a:	dc21      	bgt.n	5680 <__aeabi_dmul+0x488>
    563c:	2520      	movs	r5, #32
    563e:	0020      	movs	r0, r4
    5640:	1aad      	subs	r5, r5, r2
    5642:	001e      	movs	r6, r3
    5644:	40ab      	lsls	r3, r5
    5646:	40a8      	lsls	r0, r5
    5648:	40d6      	lsrs	r6, r2
    564a:	1e5d      	subs	r5, r3, #1
    564c:	41ab      	sbcs	r3, r5
    564e:	4330      	orrs	r0, r6
    5650:	4318      	orrs	r0, r3
    5652:	40d4      	lsrs	r4, r2
    5654:	0743      	lsls	r3, r0, #29
    5656:	d009      	beq.n	566c <__aeabi_dmul+0x474>
    5658:	230f      	movs	r3, #15
    565a:	4003      	ands	r3, r0
    565c:	2b04      	cmp	r3, #4
    565e:	d005      	beq.n	566c <__aeabi_dmul+0x474>
    5660:	0003      	movs	r3, r0
    5662:	1d18      	adds	r0, r3, #4
    5664:	4298      	cmp	r0, r3
    5666:	419b      	sbcs	r3, r3
    5668:	425b      	negs	r3, r3
    566a:	18e4      	adds	r4, r4, r3
    566c:	0223      	lsls	r3, r4, #8
    566e:	d521      	bpl.n	56b4 <__aeabi_dmul+0x4bc>
    5670:	2501      	movs	r5, #1
    5672:	9b01      	ldr	r3, [sp, #4]
    5674:	2401      	movs	r4, #1
    5676:	401d      	ands	r5, r3
    5678:	2300      	movs	r3, #0
    567a:	2200      	movs	r2, #0
    567c:	4699      	mov	r9, r3
    567e:	e622      	b.n	52c6 <__aeabi_dmul+0xce>
    5680:	251f      	movs	r5, #31
    5682:	0021      	movs	r1, r4
    5684:	426d      	negs	r5, r5
    5686:	1a28      	subs	r0, r5, r0
    5688:	40c1      	lsrs	r1, r0
    568a:	0008      	movs	r0, r1
    568c:	2a20      	cmp	r2, #32
    568e:	d01d      	beq.n	56cc <__aeabi_dmul+0x4d4>
    5690:	355f      	adds	r5, #95	; 0x5f
    5692:	1aaa      	subs	r2, r5, r2
    5694:	4094      	lsls	r4, r2
    5696:	4323      	orrs	r3, r4
    5698:	1e5c      	subs	r4, r3, #1
    569a:	41a3      	sbcs	r3, r4
    569c:	2507      	movs	r5, #7
    569e:	4303      	orrs	r3, r0
    56a0:	401d      	ands	r5, r3
    56a2:	2200      	movs	r2, #0
    56a4:	2d00      	cmp	r5, #0
    56a6:	d009      	beq.n	56bc <__aeabi_dmul+0x4c4>
    56a8:	220f      	movs	r2, #15
    56aa:	2400      	movs	r4, #0
    56ac:	401a      	ands	r2, r3
    56ae:	0018      	movs	r0, r3
    56b0:	2a04      	cmp	r2, #4
    56b2:	d1d6      	bne.n	5662 <__aeabi_dmul+0x46a>
    56b4:	0003      	movs	r3, r0
    56b6:	0765      	lsls	r5, r4, #29
    56b8:	0264      	lsls	r4, r4, #9
    56ba:	0b22      	lsrs	r2, r4, #12
    56bc:	08db      	lsrs	r3, r3, #3
    56be:	432b      	orrs	r3, r5
    56c0:	2501      	movs	r5, #1
    56c2:	4699      	mov	r9, r3
    56c4:	9b01      	ldr	r3, [sp, #4]
    56c6:	2400      	movs	r4, #0
    56c8:	401d      	ands	r5, r3
    56ca:	e5fc      	b.n	52c6 <__aeabi_dmul+0xce>
    56cc:	2400      	movs	r4, #0
    56ce:	e7e2      	b.n	5696 <__aeabi_dmul+0x49e>
    56d0:	2280      	movs	r2, #128	; 0x80
    56d2:	2501      	movs	r5, #1
    56d4:	0312      	lsls	r2, r2, #12
    56d6:	4322      	orrs	r2, r4
    56d8:	9901      	ldr	r1, [sp, #4]
    56da:	0312      	lsls	r2, r2, #12
    56dc:	0b12      	lsrs	r2, r2, #12
    56de:	400d      	ands	r5, r1
    56e0:	4699      	mov	r9, r3
    56e2:	4c04      	ldr	r4, [pc, #16]	; (56f4 <__aeabi_dmul+0x4fc>)
    56e4:	e5ef      	b.n	52c6 <__aeabi_dmul+0xce>
    56e6:	46c0      	nop			; (mov r8, r8)
    56e8:	000003ff 	.word	0x000003ff
    56ec:	feffffff 	.word	0xfeffffff
    56f0:	000007fe 	.word	0x000007fe
    56f4:	000007ff 	.word	0x000007ff

000056f8 <__aeabi_dsub>:
    56f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    56fa:	4646      	mov	r6, r8
    56fc:	46d6      	mov	lr, sl
    56fe:	464f      	mov	r7, r9
    5700:	030c      	lsls	r4, r1, #12
    5702:	b5c0      	push	{r6, r7, lr}
    5704:	0fcd      	lsrs	r5, r1, #31
    5706:	004e      	lsls	r6, r1, #1
    5708:	0a61      	lsrs	r1, r4, #9
    570a:	0f44      	lsrs	r4, r0, #29
    570c:	430c      	orrs	r4, r1
    570e:	00c1      	lsls	r1, r0, #3
    5710:	0058      	lsls	r0, r3, #1
    5712:	0d40      	lsrs	r0, r0, #21
    5714:	4684      	mov	ip, r0
    5716:	468a      	mov	sl, r1
    5718:	000f      	movs	r7, r1
    571a:	0319      	lsls	r1, r3, #12
    571c:	0f50      	lsrs	r0, r2, #29
    571e:	0a49      	lsrs	r1, r1, #9
    5720:	4301      	orrs	r1, r0
    5722:	48c6      	ldr	r0, [pc, #792]	; (5a3c <__aeabi_dsub+0x344>)
    5724:	0d76      	lsrs	r6, r6, #21
    5726:	46a8      	mov	r8, r5
    5728:	0fdb      	lsrs	r3, r3, #31
    572a:	00d2      	lsls	r2, r2, #3
    572c:	4584      	cmp	ip, r0
    572e:	d100      	bne.n	5732 <__aeabi_dsub+0x3a>
    5730:	e0d8      	b.n	58e4 <__aeabi_dsub+0x1ec>
    5732:	2001      	movs	r0, #1
    5734:	4043      	eors	r3, r0
    5736:	42ab      	cmp	r3, r5
    5738:	d100      	bne.n	573c <__aeabi_dsub+0x44>
    573a:	e0a6      	b.n	588a <__aeabi_dsub+0x192>
    573c:	4660      	mov	r0, ip
    573e:	1a35      	subs	r5, r6, r0
    5740:	2d00      	cmp	r5, #0
    5742:	dc00      	bgt.n	5746 <__aeabi_dsub+0x4e>
    5744:	e105      	b.n	5952 <__aeabi_dsub+0x25a>
    5746:	2800      	cmp	r0, #0
    5748:	d110      	bne.n	576c <__aeabi_dsub+0x74>
    574a:	000b      	movs	r3, r1
    574c:	4313      	orrs	r3, r2
    574e:	d100      	bne.n	5752 <__aeabi_dsub+0x5a>
    5750:	e0d7      	b.n	5902 <__aeabi_dsub+0x20a>
    5752:	1e6b      	subs	r3, r5, #1
    5754:	2b00      	cmp	r3, #0
    5756:	d000      	beq.n	575a <__aeabi_dsub+0x62>
    5758:	e14b      	b.n	59f2 <__aeabi_dsub+0x2fa>
    575a:	4653      	mov	r3, sl
    575c:	1a9f      	subs	r7, r3, r2
    575e:	45ba      	cmp	sl, r7
    5760:	4180      	sbcs	r0, r0
    5762:	1a64      	subs	r4, r4, r1
    5764:	4240      	negs	r0, r0
    5766:	1a24      	subs	r4, r4, r0
    5768:	2601      	movs	r6, #1
    576a:	e01e      	b.n	57aa <__aeabi_dsub+0xb2>
    576c:	4bb3      	ldr	r3, [pc, #716]	; (5a3c <__aeabi_dsub+0x344>)
    576e:	429e      	cmp	r6, r3
    5770:	d048      	beq.n	5804 <__aeabi_dsub+0x10c>
    5772:	2380      	movs	r3, #128	; 0x80
    5774:	041b      	lsls	r3, r3, #16
    5776:	4319      	orrs	r1, r3
    5778:	2d38      	cmp	r5, #56	; 0x38
    577a:	dd00      	ble.n	577e <__aeabi_dsub+0x86>
    577c:	e119      	b.n	59b2 <__aeabi_dsub+0x2ba>
    577e:	2d1f      	cmp	r5, #31
    5780:	dd00      	ble.n	5784 <__aeabi_dsub+0x8c>
    5782:	e14c      	b.n	5a1e <__aeabi_dsub+0x326>
    5784:	2320      	movs	r3, #32
    5786:	000f      	movs	r7, r1
    5788:	1b5b      	subs	r3, r3, r5
    578a:	0010      	movs	r0, r2
    578c:	409a      	lsls	r2, r3
    578e:	409f      	lsls	r7, r3
    5790:	40e8      	lsrs	r0, r5
    5792:	1e53      	subs	r3, r2, #1
    5794:	419a      	sbcs	r2, r3
    5796:	40e9      	lsrs	r1, r5
    5798:	4307      	orrs	r7, r0
    579a:	4317      	orrs	r7, r2
    579c:	4653      	mov	r3, sl
    579e:	1bdf      	subs	r7, r3, r7
    57a0:	1a61      	subs	r1, r4, r1
    57a2:	45ba      	cmp	sl, r7
    57a4:	41a4      	sbcs	r4, r4
    57a6:	4264      	negs	r4, r4
    57a8:	1b0c      	subs	r4, r1, r4
    57aa:	0223      	lsls	r3, r4, #8
    57ac:	d400      	bmi.n	57b0 <__aeabi_dsub+0xb8>
    57ae:	e0c5      	b.n	593c <__aeabi_dsub+0x244>
    57b0:	0264      	lsls	r4, r4, #9
    57b2:	0a65      	lsrs	r5, r4, #9
    57b4:	2d00      	cmp	r5, #0
    57b6:	d100      	bne.n	57ba <__aeabi_dsub+0xc2>
    57b8:	e0f6      	b.n	59a8 <__aeabi_dsub+0x2b0>
    57ba:	0028      	movs	r0, r5
    57bc:	f000 fce8 	bl	6190 <__clzsi2>
    57c0:	0003      	movs	r3, r0
    57c2:	3b08      	subs	r3, #8
    57c4:	2b1f      	cmp	r3, #31
    57c6:	dd00      	ble.n	57ca <__aeabi_dsub+0xd2>
    57c8:	e0e9      	b.n	599e <__aeabi_dsub+0x2a6>
    57ca:	2220      	movs	r2, #32
    57cc:	003c      	movs	r4, r7
    57ce:	1ad2      	subs	r2, r2, r3
    57d0:	409d      	lsls	r5, r3
    57d2:	40d4      	lsrs	r4, r2
    57d4:	409f      	lsls	r7, r3
    57d6:	4325      	orrs	r5, r4
    57d8:	429e      	cmp	r6, r3
    57da:	dd00      	ble.n	57de <__aeabi_dsub+0xe6>
    57dc:	e0db      	b.n	5996 <__aeabi_dsub+0x29e>
    57de:	1b9e      	subs	r6, r3, r6
    57e0:	1c73      	adds	r3, r6, #1
    57e2:	2b1f      	cmp	r3, #31
    57e4:	dd00      	ble.n	57e8 <__aeabi_dsub+0xf0>
    57e6:	e10a      	b.n	59fe <__aeabi_dsub+0x306>
    57e8:	2220      	movs	r2, #32
    57ea:	0038      	movs	r0, r7
    57ec:	1ad2      	subs	r2, r2, r3
    57ee:	0029      	movs	r1, r5
    57f0:	4097      	lsls	r7, r2
    57f2:	002c      	movs	r4, r5
    57f4:	4091      	lsls	r1, r2
    57f6:	40d8      	lsrs	r0, r3
    57f8:	1e7a      	subs	r2, r7, #1
    57fa:	4197      	sbcs	r7, r2
    57fc:	40dc      	lsrs	r4, r3
    57fe:	2600      	movs	r6, #0
    5800:	4301      	orrs	r1, r0
    5802:	430f      	orrs	r7, r1
    5804:	077b      	lsls	r3, r7, #29
    5806:	d009      	beq.n	581c <__aeabi_dsub+0x124>
    5808:	230f      	movs	r3, #15
    580a:	403b      	ands	r3, r7
    580c:	2b04      	cmp	r3, #4
    580e:	d005      	beq.n	581c <__aeabi_dsub+0x124>
    5810:	1d3b      	adds	r3, r7, #4
    5812:	42bb      	cmp	r3, r7
    5814:	41bf      	sbcs	r7, r7
    5816:	427f      	negs	r7, r7
    5818:	19e4      	adds	r4, r4, r7
    581a:	001f      	movs	r7, r3
    581c:	0223      	lsls	r3, r4, #8
    581e:	d525      	bpl.n	586c <__aeabi_dsub+0x174>
    5820:	4b86      	ldr	r3, [pc, #536]	; (5a3c <__aeabi_dsub+0x344>)
    5822:	3601      	adds	r6, #1
    5824:	429e      	cmp	r6, r3
    5826:	d100      	bne.n	582a <__aeabi_dsub+0x132>
    5828:	e0af      	b.n	598a <__aeabi_dsub+0x292>
    582a:	4b85      	ldr	r3, [pc, #532]	; (5a40 <__aeabi_dsub+0x348>)
    582c:	2501      	movs	r5, #1
    582e:	401c      	ands	r4, r3
    5830:	4643      	mov	r3, r8
    5832:	0762      	lsls	r2, r4, #29
    5834:	08ff      	lsrs	r7, r7, #3
    5836:	0264      	lsls	r4, r4, #9
    5838:	0576      	lsls	r6, r6, #21
    583a:	4317      	orrs	r7, r2
    583c:	0b24      	lsrs	r4, r4, #12
    583e:	0d76      	lsrs	r6, r6, #21
    5840:	401d      	ands	r5, r3
    5842:	2100      	movs	r1, #0
    5844:	0324      	lsls	r4, r4, #12
    5846:	0b23      	lsrs	r3, r4, #12
    5848:	0d0c      	lsrs	r4, r1, #20
    584a:	4a7e      	ldr	r2, [pc, #504]	; (5a44 <__aeabi_dsub+0x34c>)
    584c:	0524      	lsls	r4, r4, #20
    584e:	431c      	orrs	r4, r3
    5850:	4014      	ands	r4, r2
    5852:	0533      	lsls	r3, r6, #20
    5854:	4323      	orrs	r3, r4
    5856:	005b      	lsls	r3, r3, #1
    5858:	07ed      	lsls	r5, r5, #31
    585a:	085b      	lsrs	r3, r3, #1
    585c:	432b      	orrs	r3, r5
    585e:	0038      	movs	r0, r7
    5860:	0019      	movs	r1, r3
    5862:	bc1c      	pop	{r2, r3, r4}
    5864:	4690      	mov	r8, r2
    5866:	4699      	mov	r9, r3
    5868:	46a2      	mov	sl, r4
    586a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    586c:	2501      	movs	r5, #1
    586e:	4643      	mov	r3, r8
    5870:	0762      	lsls	r2, r4, #29
    5872:	08ff      	lsrs	r7, r7, #3
    5874:	4317      	orrs	r7, r2
    5876:	08e4      	lsrs	r4, r4, #3
    5878:	401d      	ands	r5, r3
    587a:	4b70      	ldr	r3, [pc, #448]	; (5a3c <__aeabi_dsub+0x344>)
    587c:	429e      	cmp	r6, r3
    587e:	d036      	beq.n	58ee <__aeabi_dsub+0x1f6>
    5880:	0324      	lsls	r4, r4, #12
    5882:	0576      	lsls	r6, r6, #21
    5884:	0b24      	lsrs	r4, r4, #12
    5886:	0d76      	lsrs	r6, r6, #21
    5888:	e7db      	b.n	5842 <__aeabi_dsub+0x14a>
    588a:	4663      	mov	r3, ip
    588c:	1af3      	subs	r3, r6, r3
    588e:	2b00      	cmp	r3, #0
    5890:	dc00      	bgt.n	5894 <__aeabi_dsub+0x19c>
    5892:	e094      	b.n	59be <__aeabi_dsub+0x2c6>
    5894:	4660      	mov	r0, ip
    5896:	2800      	cmp	r0, #0
    5898:	d035      	beq.n	5906 <__aeabi_dsub+0x20e>
    589a:	4868      	ldr	r0, [pc, #416]	; (5a3c <__aeabi_dsub+0x344>)
    589c:	4286      	cmp	r6, r0
    589e:	d0b1      	beq.n	5804 <__aeabi_dsub+0x10c>
    58a0:	2780      	movs	r7, #128	; 0x80
    58a2:	043f      	lsls	r7, r7, #16
    58a4:	4339      	orrs	r1, r7
    58a6:	2b38      	cmp	r3, #56	; 0x38
    58a8:	dc00      	bgt.n	58ac <__aeabi_dsub+0x1b4>
    58aa:	e0fd      	b.n	5aa8 <__aeabi_dsub+0x3b0>
    58ac:	430a      	orrs	r2, r1
    58ae:	0017      	movs	r7, r2
    58b0:	2100      	movs	r1, #0
    58b2:	1e7a      	subs	r2, r7, #1
    58b4:	4197      	sbcs	r7, r2
    58b6:	4457      	add	r7, sl
    58b8:	4557      	cmp	r7, sl
    58ba:	4180      	sbcs	r0, r0
    58bc:	1909      	adds	r1, r1, r4
    58be:	4244      	negs	r4, r0
    58c0:	190c      	adds	r4, r1, r4
    58c2:	0223      	lsls	r3, r4, #8
    58c4:	d53a      	bpl.n	593c <__aeabi_dsub+0x244>
    58c6:	4b5d      	ldr	r3, [pc, #372]	; (5a3c <__aeabi_dsub+0x344>)
    58c8:	3601      	adds	r6, #1
    58ca:	429e      	cmp	r6, r3
    58cc:	d100      	bne.n	58d0 <__aeabi_dsub+0x1d8>
    58ce:	e14b      	b.n	5b68 <__aeabi_dsub+0x470>
    58d0:	2201      	movs	r2, #1
    58d2:	4b5b      	ldr	r3, [pc, #364]	; (5a40 <__aeabi_dsub+0x348>)
    58d4:	401c      	ands	r4, r3
    58d6:	087b      	lsrs	r3, r7, #1
    58d8:	4017      	ands	r7, r2
    58da:	431f      	orrs	r7, r3
    58dc:	07e2      	lsls	r2, r4, #31
    58de:	4317      	orrs	r7, r2
    58e0:	0864      	lsrs	r4, r4, #1
    58e2:	e78f      	b.n	5804 <__aeabi_dsub+0x10c>
    58e4:	0008      	movs	r0, r1
    58e6:	4310      	orrs	r0, r2
    58e8:	d000      	beq.n	58ec <__aeabi_dsub+0x1f4>
    58ea:	e724      	b.n	5736 <__aeabi_dsub+0x3e>
    58ec:	e721      	b.n	5732 <__aeabi_dsub+0x3a>
    58ee:	0023      	movs	r3, r4
    58f0:	433b      	orrs	r3, r7
    58f2:	d100      	bne.n	58f6 <__aeabi_dsub+0x1fe>
    58f4:	e1b9      	b.n	5c6a <__aeabi_dsub+0x572>
    58f6:	2280      	movs	r2, #128	; 0x80
    58f8:	0312      	lsls	r2, r2, #12
    58fa:	4314      	orrs	r4, r2
    58fc:	0324      	lsls	r4, r4, #12
    58fe:	0b24      	lsrs	r4, r4, #12
    5900:	e79f      	b.n	5842 <__aeabi_dsub+0x14a>
    5902:	002e      	movs	r6, r5
    5904:	e77e      	b.n	5804 <__aeabi_dsub+0x10c>
    5906:	0008      	movs	r0, r1
    5908:	4310      	orrs	r0, r2
    590a:	d100      	bne.n	590e <__aeabi_dsub+0x216>
    590c:	e0ca      	b.n	5aa4 <__aeabi_dsub+0x3ac>
    590e:	1e58      	subs	r0, r3, #1
    5910:	4684      	mov	ip, r0
    5912:	2800      	cmp	r0, #0
    5914:	d000      	beq.n	5918 <__aeabi_dsub+0x220>
    5916:	e0e7      	b.n	5ae8 <__aeabi_dsub+0x3f0>
    5918:	4452      	add	r2, sl
    591a:	4552      	cmp	r2, sl
    591c:	4180      	sbcs	r0, r0
    591e:	1864      	adds	r4, r4, r1
    5920:	4240      	negs	r0, r0
    5922:	1824      	adds	r4, r4, r0
    5924:	0017      	movs	r7, r2
    5926:	2601      	movs	r6, #1
    5928:	0223      	lsls	r3, r4, #8
    592a:	d507      	bpl.n	593c <__aeabi_dsub+0x244>
    592c:	2602      	movs	r6, #2
    592e:	e7cf      	b.n	58d0 <__aeabi_dsub+0x1d8>
    5930:	4664      	mov	r4, ip
    5932:	432c      	orrs	r4, r5
    5934:	d100      	bne.n	5938 <__aeabi_dsub+0x240>
    5936:	e1b3      	b.n	5ca0 <__aeabi_dsub+0x5a8>
    5938:	002c      	movs	r4, r5
    593a:	4667      	mov	r7, ip
    593c:	077b      	lsls	r3, r7, #29
    593e:	d000      	beq.n	5942 <__aeabi_dsub+0x24a>
    5940:	e762      	b.n	5808 <__aeabi_dsub+0x110>
    5942:	0763      	lsls	r3, r4, #29
    5944:	08ff      	lsrs	r7, r7, #3
    5946:	431f      	orrs	r7, r3
    5948:	2501      	movs	r5, #1
    594a:	4643      	mov	r3, r8
    594c:	08e4      	lsrs	r4, r4, #3
    594e:	401d      	ands	r5, r3
    5950:	e793      	b.n	587a <__aeabi_dsub+0x182>
    5952:	2d00      	cmp	r5, #0
    5954:	d178      	bne.n	5a48 <__aeabi_dsub+0x350>
    5956:	1c75      	adds	r5, r6, #1
    5958:	056d      	lsls	r5, r5, #21
    595a:	0d6d      	lsrs	r5, r5, #21
    595c:	2d01      	cmp	r5, #1
    595e:	dc00      	bgt.n	5962 <__aeabi_dsub+0x26a>
    5960:	e0f2      	b.n	5b48 <__aeabi_dsub+0x450>
    5962:	4650      	mov	r0, sl
    5964:	1a80      	subs	r0, r0, r2
    5966:	4582      	cmp	sl, r0
    5968:	41bf      	sbcs	r7, r7
    596a:	1a65      	subs	r5, r4, r1
    596c:	427f      	negs	r7, r7
    596e:	1bed      	subs	r5, r5, r7
    5970:	4684      	mov	ip, r0
    5972:	0228      	lsls	r0, r5, #8
    5974:	d400      	bmi.n	5978 <__aeabi_dsub+0x280>
    5976:	e08c      	b.n	5a92 <__aeabi_dsub+0x39a>
    5978:	4650      	mov	r0, sl
    597a:	1a17      	subs	r7, r2, r0
    597c:	42ba      	cmp	r2, r7
    597e:	4192      	sbcs	r2, r2
    5980:	1b0c      	subs	r4, r1, r4
    5982:	4255      	negs	r5, r2
    5984:	1b65      	subs	r5, r4, r5
    5986:	4698      	mov	r8, r3
    5988:	e714      	b.n	57b4 <__aeabi_dsub+0xbc>
    598a:	2501      	movs	r5, #1
    598c:	4643      	mov	r3, r8
    598e:	2400      	movs	r4, #0
    5990:	401d      	ands	r5, r3
    5992:	2700      	movs	r7, #0
    5994:	e755      	b.n	5842 <__aeabi_dsub+0x14a>
    5996:	4c2a      	ldr	r4, [pc, #168]	; (5a40 <__aeabi_dsub+0x348>)
    5998:	1af6      	subs	r6, r6, r3
    599a:	402c      	ands	r4, r5
    599c:	e732      	b.n	5804 <__aeabi_dsub+0x10c>
    599e:	003d      	movs	r5, r7
    59a0:	3828      	subs	r0, #40	; 0x28
    59a2:	4085      	lsls	r5, r0
    59a4:	2700      	movs	r7, #0
    59a6:	e717      	b.n	57d8 <__aeabi_dsub+0xe0>
    59a8:	0038      	movs	r0, r7
    59aa:	f000 fbf1 	bl	6190 <__clzsi2>
    59ae:	3020      	adds	r0, #32
    59b0:	e706      	b.n	57c0 <__aeabi_dsub+0xc8>
    59b2:	430a      	orrs	r2, r1
    59b4:	0017      	movs	r7, r2
    59b6:	2100      	movs	r1, #0
    59b8:	1e7a      	subs	r2, r7, #1
    59ba:	4197      	sbcs	r7, r2
    59bc:	e6ee      	b.n	579c <__aeabi_dsub+0xa4>
    59be:	2b00      	cmp	r3, #0
    59c0:	d000      	beq.n	59c4 <__aeabi_dsub+0x2cc>
    59c2:	e0e5      	b.n	5b90 <__aeabi_dsub+0x498>
    59c4:	1c73      	adds	r3, r6, #1
    59c6:	469c      	mov	ip, r3
    59c8:	055b      	lsls	r3, r3, #21
    59ca:	0d5b      	lsrs	r3, r3, #21
    59cc:	2b01      	cmp	r3, #1
    59ce:	dc00      	bgt.n	59d2 <__aeabi_dsub+0x2da>
    59d0:	e09f      	b.n	5b12 <__aeabi_dsub+0x41a>
    59d2:	4b1a      	ldr	r3, [pc, #104]	; (5a3c <__aeabi_dsub+0x344>)
    59d4:	459c      	cmp	ip, r3
    59d6:	d100      	bne.n	59da <__aeabi_dsub+0x2e2>
    59d8:	e0c5      	b.n	5b66 <__aeabi_dsub+0x46e>
    59da:	4452      	add	r2, sl
    59dc:	4552      	cmp	r2, sl
    59de:	4180      	sbcs	r0, r0
    59e0:	1864      	adds	r4, r4, r1
    59e2:	4240      	negs	r0, r0
    59e4:	1824      	adds	r4, r4, r0
    59e6:	07e7      	lsls	r7, r4, #31
    59e8:	0852      	lsrs	r2, r2, #1
    59ea:	4317      	orrs	r7, r2
    59ec:	0864      	lsrs	r4, r4, #1
    59ee:	4666      	mov	r6, ip
    59f0:	e708      	b.n	5804 <__aeabi_dsub+0x10c>
    59f2:	4812      	ldr	r0, [pc, #72]	; (5a3c <__aeabi_dsub+0x344>)
    59f4:	4285      	cmp	r5, r0
    59f6:	d100      	bne.n	59fa <__aeabi_dsub+0x302>
    59f8:	e085      	b.n	5b06 <__aeabi_dsub+0x40e>
    59fa:	001d      	movs	r5, r3
    59fc:	e6bc      	b.n	5778 <__aeabi_dsub+0x80>
    59fe:	0029      	movs	r1, r5
    5a00:	3e1f      	subs	r6, #31
    5a02:	40f1      	lsrs	r1, r6
    5a04:	2b20      	cmp	r3, #32
    5a06:	d100      	bne.n	5a0a <__aeabi_dsub+0x312>
    5a08:	e07f      	b.n	5b0a <__aeabi_dsub+0x412>
    5a0a:	2240      	movs	r2, #64	; 0x40
    5a0c:	1ad3      	subs	r3, r2, r3
    5a0e:	409d      	lsls	r5, r3
    5a10:	432f      	orrs	r7, r5
    5a12:	1e7d      	subs	r5, r7, #1
    5a14:	41af      	sbcs	r7, r5
    5a16:	2400      	movs	r4, #0
    5a18:	430f      	orrs	r7, r1
    5a1a:	2600      	movs	r6, #0
    5a1c:	e78e      	b.n	593c <__aeabi_dsub+0x244>
    5a1e:	002b      	movs	r3, r5
    5a20:	000f      	movs	r7, r1
    5a22:	3b20      	subs	r3, #32
    5a24:	40df      	lsrs	r7, r3
    5a26:	2d20      	cmp	r5, #32
    5a28:	d071      	beq.n	5b0e <__aeabi_dsub+0x416>
    5a2a:	2340      	movs	r3, #64	; 0x40
    5a2c:	1b5d      	subs	r5, r3, r5
    5a2e:	40a9      	lsls	r1, r5
    5a30:	430a      	orrs	r2, r1
    5a32:	1e51      	subs	r1, r2, #1
    5a34:	418a      	sbcs	r2, r1
    5a36:	2100      	movs	r1, #0
    5a38:	4317      	orrs	r7, r2
    5a3a:	e6af      	b.n	579c <__aeabi_dsub+0xa4>
    5a3c:	000007ff 	.word	0x000007ff
    5a40:	ff7fffff 	.word	0xff7fffff
    5a44:	800fffff 	.word	0x800fffff
    5a48:	2e00      	cmp	r6, #0
    5a4a:	d03e      	beq.n	5aca <__aeabi_dsub+0x3d2>
    5a4c:	4eb3      	ldr	r6, [pc, #716]	; (5d1c <__aeabi_dsub+0x624>)
    5a4e:	45b4      	cmp	ip, r6
    5a50:	d045      	beq.n	5ade <__aeabi_dsub+0x3e6>
    5a52:	2680      	movs	r6, #128	; 0x80
    5a54:	0436      	lsls	r6, r6, #16
    5a56:	426d      	negs	r5, r5
    5a58:	4334      	orrs	r4, r6
    5a5a:	2d38      	cmp	r5, #56	; 0x38
    5a5c:	dd00      	ble.n	5a60 <__aeabi_dsub+0x368>
    5a5e:	e0a8      	b.n	5bb2 <__aeabi_dsub+0x4ba>
    5a60:	2d1f      	cmp	r5, #31
    5a62:	dd00      	ble.n	5a66 <__aeabi_dsub+0x36e>
    5a64:	e11f      	b.n	5ca6 <__aeabi_dsub+0x5ae>
    5a66:	2620      	movs	r6, #32
    5a68:	0027      	movs	r7, r4
    5a6a:	4650      	mov	r0, sl
    5a6c:	1b76      	subs	r6, r6, r5
    5a6e:	40b7      	lsls	r7, r6
    5a70:	40e8      	lsrs	r0, r5
    5a72:	4307      	orrs	r7, r0
    5a74:	4650      	mov	r0, sl
    5a76:	40b0      	lsls	r0, r6
    5a78:	1e46      	subs	r6, r0, #1
    5a7a:	41b0      	sbcs	r0, r6
    5a7c:	40ec      	lsrs	r4, r5
    5a7e:	4338      	orrs	r0, r7
    5a80:	1a17      	subs	r7, r2, r0
    5a82:	42ba      	cmp	r2, r7
    5a84:	4192      	sbcs	r2, r2
    5a86:	1b0c      	subs	r4, r1, r4
    5a88:	4252      	negs	r2, r2
    5a8a:	1aa4      	subs	r4, r4, r2
    5a8c:	4666      	mov	r6, ip
    5a8e:	4698      	mov	r8, r3
    5a90:	e68b      	b.n	57aa <__aeabi_dsub+0xb2>
    5a92:	4664      	mov	r4, ip
    5a94:	4667      	mov	r7, ip
    5a96:	432c      	orrs	r4, r5
    5a98:	d000      	beq.n	5a9c <__aeabi_dsub+0x3a4>
    5a9a:	e68b      	b.n	57b4 <__aeabi_dsub+0xbc>
    5a9c:	2500      	movs	r5, #0
    5a9e:	2600      	movs	r6, #0
    5aa0:	2700      	movs	r7, #0
    5aa2:	e6ea      	b.n	587a <__aeabi_dsub+0x182>
    5aa4:	001e      	movs	r6, r3
    5aa6:	e6ad      	b.n	5804 <__aeabi_dsub+0x10c>
    5aa8:	2b1f      	cmp	r3, #31
    5aaa:	dc60      	bgt.n	5b6e <__aeabi_dsub+0x476>
    5aac:	2720      	movs	r7, #32
    5aae:	1af8      	subs	r0, r7, r3
    5ab0:	000f      	movs	r7, r1
    5ab2:	4684      	mov	ip, r0
    5ab4:	4087      	lsls	r7, r0
    5ab6:	0010      	movs	r0, r2
    5ab8:	40d8      	lsrs	r0, r3
    5aba:	4307      	orrs	r7, r0
    5abc:	4660      	mov	r0, ip
    5abe:	4082      	lsls	r2, r0
    5ac0:	1e50      	subs	r0, r2, #1
    5ac2:	4182      	sbcs	r2, r0
    5ac4:	40d9      	lsrs	r1, r3
    5ac6:	4317      	orrs	r7, r2
    5ac8:	e6f5      	b.n	58b6 <__aeabi_dsub+0x1be>
    5aca:	0026      	movs	r6, r4
    5acc:	4650      	mov	r0, sl
    5ace:	4306      	orrs	r6, r0
    5ad0:	d005      	beq.n	5ade <__aeabi_dsub+0x3e6>
    5ad2:	43ed      	mvns	r5, r5
    5ad4:	2d00      	cmp	r5, #0
    5ad6:	d0d3      	beq.n	5a80 <__aeabi_dsub+0x388>
    5ad8:	4e90      	ldr	r6, [pc, #576]	; (5d1c <__aeabi_dsub+0x624>)
    5ada:	45b4      	cmp	ip, r6
    5adc:	d1bd      	bne.n	5a5a <__aeabi_dsub+0x362>
    5ade:	000c      	movs	r4, r1
    5ae0:	0017      	movs	r7, r2
    5ae2:	4666      	mov	r6, ip
    5ae4:	4698      	mov	r8, r3
    5ae6:	e68d      	b.n	5804 <__aeabi_dsub+0x10c>
    5ae8:	488c      	ldr	r0, [pc, #560]	; (5d1c <__aeabi_dsub+0x624>)
    5aea:	4283      	cmp	r3, r0
    5aec:	d00b      	beq.n	5b06 <__aeabi_dsub+0x40e>
    5aee:	4663      	mov	r3, ip
    5af0:	e6d9      	b.n	58a6 <__aeabi_dsub+0x1ae>
    5af2:	2d00      	cmp	r5, #0
    5af4:	d000      	beq.n	5af8 <__aeabi_dsub+0x400>
    5af6:	e096      	b.n	5c26 <__aeabi_dsub+0x52e>
    5af8:	0008      	movs	r0, r1
    5afa:	4310      	orrs	r0, r2
    5afc:	d100      	bne.n	5b00 <__aeabi_dsub+0x408>
    5afe:	e0e2      	b.n	5cc6 <__aeabi_dsub+0x5ce>
    5b00:	000c      	movs	r4, r1
    5b02:	0017      	movs	r7, r2
    5b04:	4698      	mov	r8, r3
    5b06:	4e85      	ldr	r6, [pc, #532]	; (5d1c <__aeabi_dsub+0x624>)
    5b08:	e67c      	b.n	5804 <__aeabi_dsub+0x10c>
    5b0a:	2500      	movs	r5, #0
    5b0c:	e780      	b.n	5a10 <__aeabi_dsub+0x318>
    5b0e:	2100      	movs	r1, #0
    5b10:	e78e      	b.n	5a30 <__aeabi_dsub+0x338>
    5b12:	0023      	movs	r3, r4
    5b14:	4650      	mov	r0, sl
    5b16:	4303      	orrs	r3, r0
    5b18:	2e00      	cmp	r6, #0
    5b1a:	d000      	beq.n	5b1e <__aeabi_dsub+0x426>
    5b1c:	e0a8      	b.n	5c70 <__aeabi_dsub+0x578>
    5b1e:	2b00      	cmp	r3, #0
    5b20:	d100      	bne.n	5b24 <__aeabi_dsub+0x42c>
    5b22:	e0de      	b.n	5ce2 <__aeabi_dsub+0x5ea>
    5b24:	000b      	movs	r3, r1
    5b26:	4313      	orrs	r3, r2
    5b28:	d100      	bne.n	5b2c <__aeabi_dsub+0x434>
    5b2a:	e66b      	b.n	5804 <__aeabi_dsub+0x10c>
    5b2c:	4452      	add	r2, sl
    5b2e:	4552      	cmp	r2, sl
    5b30:	4180      	sbcs	r0, r0
    5b32:	1864      	adds	r4, r4, r1
    5b34:	4240      	negs	r0, r0
    5b36:	1824      	adds	r4, r4, r0
    5b38:	0017      	movs	r7, r2
    5b3a:	0223      	lsls	r3, r4, #8
    5b3c:	d400      	bmi.n	5b40 <__aeabi_dsub+0x448>
    5b3e:	e6fd      	b.n	593c <__aeabi_dsub+0x244>
    5b40:	4b77      	ldr	r3, [pc, #476]	; (5d20 <__aeabi_dsub+0x628>)
    5b42:	4666      	mov	r6, ip
    5b44:	401c      	ands	r4, r3
    5b46:	e65d      	b.n	5804 <__aeabi_dsub+0x10c>
    5b48:	0025      	movs	r5, r4
    5b4a:	4650      	mov	r0, sl
    5b4c:	4305      	orrs	r5, r0
    5b4e:	2e00      	cmp	r6, #0
    5b50:	d1cf      	bne.n	5af2 <__aeabi_dsub+0x3fa>
    5b52:	2d00      	cmp	r5, #0
    5b54:	d14f      	bne.n	5bf6 <__aeabi_dsub+0x4fe>
    5b56:	000c      	movs	r4, r1
    5b58:	4314      	orrs	r4, r2
    5b5a:	d100      	bne.n	5b5e <__aeabi_dsub+0x466>
    5b5c:	e0a0      	b.n	5ca0 <__aeabi_dsub+0x5a8>
    5b5e:	000c      	movs	r4, r1
    5b60:	0017      	movs	r7, r2
    5b62:	4698      	mov	r8, r3
    5b64:	e64e      	b.n	5804 <__aeabi_dsub+0x10c>
    5b66:	4666      	mov	r6, ip
    5b68:	2400      	movs	r4, #0
    5b6a:	2700      	movs	r7, #0
    5b6c:	e685      	b.n	587a <__aeabi_dsub+0x182>
    5b6e:	001f      	movs	r7, r3
    5b70:	0008      	movs	r0, r1
    5b72:	3f20      	subs	r7, #32
    5b74:	40f8      	lsrs	r0, r7
    5b76:	0007      	movs	r7, r0
    5b78:	2b20      	cmp	r3, #32
    5b7a:	d100      	bne.n	5b7e <__aeabi_dsub+0x486>
    5b7c:	e08e      	b.n	5c9c <__aeabi_dsub+0x5a4>
    5b7e:	2040      	movs	r0, #64	; 0x40
    5b80:	1ac3      	subs	r3, r0, r3
    5b82:	4099      	lsls	r1, r3
    5b84:	430a      	orrs	r2, r1
    5b86:	1e51      	subs	r1, r2, #1
    5b88:	418a      	sbcs	r2, r1
    5b8a:	2100      	movs	r1, #0
    5b8c:	4317      	orrs	r7, r2
    5b8e:	e692      	b.n	58b6 <__aeabi_dsub+0x1be>
    5b90:	2e00      	cmp	r6, #0
    5b92:	d114      	bne.n	5bbe <__aeabi_dsub+0x4c6>
    5b94:	0026      	movs	r6, r4
    5b96:	4650      	mov	r0, sl
    5b98:	4306      	orrs	r6, r0
    5b9a:	d062      	beq.n	5c62 <__aeabi_dsub+0x56a>
    5b9c:	43db      	mvns	r3, r3
    5b9e:	2b00      	cmp	r3, #0
    5ba0:	d15c      	bne.n	5c5c <__aeabi_dsub+0x564>
    5ba2:	1887      	adds	r7, r0, r2
    5ba4:	4297      	cmp	r7, r2
    5ba6:	4192      	sbcs	r2, r2
    5ba8:	1864      	adds	r4, r4, r1
    5baa:	4252      	negs	r2, r2
    5bac:	18a4      	adds	r4, r4, r2
    5bae:	4666      	mov	r6, ip
    5bb0:	e687      	b.n	58c2 <__aeabi_dsub+0x1ca>
    5bb2:	4650      	mov	r0, sl
    5bb4:	4320      	orrs	r0, r4
    5bb6:	1e44      	subs	r4, r0, #1
    5bb8:	41a0      	sbcs	r0, r4
    5bba:	2400      	movs	r4, #0
    5bbc:	e760      	b.n	5a80 <__aeabi_dsub+0x388>
    5bbe:	4e57      	ldr	r6, [pc, #348]	; (5d1c <__aeabi_dsub+0x624>)
    5bc0:	45b4      	cmp	ip, r6
    5bc2:	d04e      	beq.n	5c62 <__aeabi_dsub+0x56a>
    5bc4:	2680      	movs	r6, #128	; 0x80
    5bc6:	0436      	lsls	r6, r6, #16
    5bc8:	425b      	negs	r3, r3
    5bca:	4334      	orrs	r4, r6
    5bcc:	2b38      	cmp	r3, #56	; 0x38
    5bce:	dd00      	ble.n	5bd2 <__aeabi_dsub+0x4da>
    5bd0:	e07f      	b.n	5cd2 <__aeabi_dsub+0x5da>
    5bd2:	2b1f      	cmp	r3, #31
    5bd4:	dd00      	ble.n	5bd8 <__aeabi_dsub+0x4e0>
    5bd6:	e08b      	b.n	5cf0 <__aeabi_dsub+0x5f8>
    5bd8:	2620      	movs	r6, #32
    5bda:	0027      	movs	r7, r4
    5bdc:	4650      	mov	r0, sl
    5bde:	1af6      	subs	r6, r6, r3
    5be0:	40b7      	lsls	r7, r6
    5be2:	40d8      	lsrs	r0, r3
    5be4:	4307      	orrs	r7, r0
    5be6:	4650      	mov	r0, sl
    5be8:	40b0      	lsls	r0, r6
    5bea:	1e46      	subs	r6, r0, #1
    5bec:	41b0      	sbcs	r0, r6
    5bee:	4307      	orrs	r7, r0
    5bf0:	40dc      	lsrs	r4, r3
    5bf2:	18bf      	adds	r7, r7, r2
    5bf4:	e7d6      	b.n	5ba4 <__aeabi_dsub+0x4ac>
    5bf6:	000d      	movs	r5, r1
    5bf8:	4315      	orrs	r5, r2
    5bfa:	d100      	bne.n	5bfe <__aeabi_dsub+0x506>
    5bfc:	e602      	b.n	5804 <__aeabi_dsub+0x10c>
    5bfe:	4650      	mov	r0, sl
    5c00:	1a80      	subs	r0, r0, r2
    5c02:	4582      	cmp	sl, r0
    5c04:	41bf      	sbcs	r7, r7
    5c06:	1a65      	subs	r5, r4, r1
    5c08:	427f      	negs	r7, r7
    5c0a:	1bed      	subs	r5, r5, r7
    5c0c:	4684      	mov	ip, r0
    5c0e:	0228      	lsls	r0, r5, #8
    5c10:	d400      	bmi.n	5c14 <__aeabi_dsub+0x51c>
    5c12:	e68d      	b.n	5930 <__aeabi_dsub+0x238>
    5c14:	4650      	mov	r0, sl
    5c16:	1a17      	subs	r7, r2, r0
    5c18:	42ba      	cmp	r2, r7
    5c1a:	4192      	sbcs	r2, r2
    5c1c:	1b0c      	subs	r4, r1, r4
    5c1e:	4252      	negs	r2, r2
    5c20:	1aa4      	subs	r4, r4, r2
    5c22:	4698      	mov	r8, r3
    5c24:	e5ee      	b.n	5804 <__aeabi_dsub+0x10c>
    5c26:	000d      	movs	r5, r1
    5c28:	4315      	orrs	r5, r2
    5c2a:	d100      	bne.n	5c2e <__aeabi_dsub+0x536>
    5c2c:	e76b      	b.n	5b06 <__aeabi_dsub+0x40e>
    5c2e:	4650      	mov	r0, sl
    5c30:	0767      	lsls	r7, r4, #29
    5c32:	08c0      	lsrs	r0, r0, #3
    5c34:	4307      	orrs	r7, r0
    5c36:	2080      	movs	r0, #128	; 0x80
    5c38:	08e4      	lsrs	r4, r4, #3
    5c3a:	0300      	lsls	r0, r0, #12
    5c3c:	4204      	tst	r4, r0
    5c3e:	d007      	beq.n	5c50 <__aeabi_dsub+0x558>
    5c40:	08cd      	lsrs	r5, r1, #3
    5c42:	4205      	tst	r5, r0
    5c44:	d104      	bne.n	5c50 <__aeabi_dsub+0x558>
    5c46:	002c      	movs	r4, r5
    5c48:	4698      	mov	r8, r3
    5c4a:	08d7      	lsrs	r7, r2, #3
    5c4c:	0749      	lsls	r1, r1, #29
    5c4e:	430f      	orrs	r7, r1
    5c50:	0f7b      	lsrs	r3, r7, #29
    5c52:	00e4      	lsls	r4, r4, #3
    5c54:	431c      	orrs	r4, r3
    5c56:	00ff      	lsls	r7, r7, #3
    5c58:	4e30      	ldr	r6, [pc, #192]	; (5d1c <__aeabi_dsub+0x624>)
    5c5a:	e5d3      	b.n	5804 <__aeabi_dsub+0x10c>
    5c5c:	4e2f      	ldr	r6, [pc, #188]	; (5d1c <__aeabi_dsub+0x624>)
    5c5e:	45b4      	cmp	ip, r6
    5c60:	d1b4      	bne.n	5bcc <__aeabi_dsub+0x4d4>
    5c62:	000c      	movs	r4, r1
    5c64:	0017      	movs	r7, r2
    5c66:	4666      	mov	r6, ip
    5c68:	e5cc      	b.n	5804 <__aeabi_dsub+0x10c>
    5c6a:	2700      	movs	r7, #0
    5c6c:	2400      	movs	r4, #0
    5c6e:	e5e8      	b.n	5842 <__aeabi_dsub+0x14a>
    5c70:	2b00      	cmp	r3, #0
    5c72:	d039      	beq.n	5ce8 <__aeabi_dsub+0x5f0>
    5c74:	000b      	movs	r3, r1
    5c76:	4313      	orrs	r3, r2
    5c78:	d100      	bne.n	5c7c <__aeabi_dsub+0x584>
    5c7a:	e744      	b.n	5b06 <__aeabi_dsub+0x40e>
    5c7c:	08c0      	lsrs	r0, r0, #3
    5c7e:	0767      	lsls	r7, r4, #29
    5c80:	4307      	orrs	r7, r0
    5c82:	2080      	movs	r0, #128	; 0x80
    5c84:	08e4      	lsrs	r4, r4, #3
    5c86:	0300      	lsls	r0, r0, #12
    5c88:	4204      	tst	r4, r0
    5c8a:	d0e1      	beq.n	5c50 <__aeabi_dsub+0x558>
    5c8c:	08cb      	lsrs	r3, r1, #3
    5c8e:	4203      	tst	r3, r0
    5c90:	d1de      	bne.n	5c50 <__aeabi_dsub+0x558>
    5c92:	08d7      	lsrs	r7, r2, #3
    5c94:	0749      	lsls	r1, r1, #29
    5c96:	430f      	orrs	r7, r1
    5c98:	001c      	movs	r4, r3
    5c9a:	e7d9      	b.n	5c50 <__aeabi_dsub+0x558>
    5c9c:	2100      	movs	r1, #0
    5c9e:	e771      	b.n	5b84 <__aeabi_dsub+0x48c>
    5ca0:	2500      	movs	r5, #0
    5ca2:	2700      	movs	r7, #0
    5ca4:	e5e9      	b.n	587a <__aeabi_dsub+0x182>
    5ca6:	002e      	movs	r6, r5
    5ca8:	0027      	movs	r7, r4
    5caa:	3e20      	subs	r6, #32
    5cac:	40f7      	lsrs	r7, r6
    5cae:	2d20      	cmp	r5, #32
    5cb0:	d02f      	beq.n	5d12 <__aeabi_dsub+0x61a>
    5cb2:	2640      	movs	r6, #64	; 0x40
    5cb4:	1b75      	subs	r5, r6, r5
    5cb6:	40ac      	lsls	r4, r5
    5cb8:	4650      	mov	r0, sl
    5cba:	4320      	orrs	r0, r4
    5cbc:	1e44      	subs	r4, r0, #1
    5cbe:	41a0      	sbcs	r0, r4
    5cc0:	2400      	movs	r4, #0
    5cc2:	4338      	orrs	r0, r7
    5cc4:	e6dc      	b.n	5a80 <__aeabi_dsub+0x388>
    5cc6:	2480      	movs	r4, #128	; 0x80
    5cc8:	2500      	movs	r5, #0
    5cca:	0324      	lsls	r4, r4, #12
    5ccc:	4e13      	ldr	r6, [pc, #76]	; (5d1c <__aeabi_dsub+0x624>)
    5cce:	2700      	movs	r7, #0
    5cd0:	e5d3      	b.n	587a <__aeabi_dsub+0x182>
    5cd2:	4650      	mov	r0, sl
    5cd4:	4320      	orrs	r0, r4
    5cd6:	0007      	movs	r7, r0
    5cd8:	1e78      	subs	r0, r7, #1
    5cda:	4187      	sbcs	r7, r0
    5cdc:	2400      	movs	r4, #0
    5cde:	18bf      	adds	r7, r7, r2
    5ce0:	e760      	b.n	5ba4 <__aeabi_dsub+0x4ac>
    5ce2:	000c      	movs	r4, r1
    5ce4:	0017      	movs	r7, r2
    5ce6:	e58d      	b.n	5804 <__aeabi_dsub+0x10c>
    5ce8:	000c      	movs	r4, r1
    5cea:	0017      	movs	r7, r2
    5cec:	4e0b      	ldr	r6, [pc, #44]	; (5d1c <__aeabi_dsub+0x624>)
    5cee:	e589      	b.n	5804 <__aeabi_dsub+0x10c>
    5cf0:	001e      	movs	r6, r3
    5cf2:	0027      	movs	r7, r4
    5cf4:	3e20      	subs	r6, #32
    5cf6:	40f7      	lsrs	r7, r6
    5cf8:	2b20      	cmp	r3, #32
    5cfa:	d00c      	beq.n	5d16 <__aeabi_dsub+0x61e>
    5cfc:	2640      	movs	r6, #64	; 0x40
    5cfe:	1af3      	subs	r3, r6, r3
    5d00:	409c      	lsls	r4, r3
    5d02:	4650      	mov	r0, sl
    5d04:	4320      	orrs	r0, r4
    5d06:	1e44      	subs	r4, r0, #1
    5d08:	41a0      	sbcs	r0, r4
    5d0a:	4307      	orrs	r7, r0
    5d0c:	2400      	movs	r4, #0
    5d0e:	18bf      	adds	r7, r7, r2
    5d10:	e748      	b.n	5ba4 <__aeabi_dsub+0x4ac>
    5d12:	2400      	movs	r4, #0
    5d14:	e7d0      	b.n	5cb8 <__aeabi_dsub+0x5c0>
    5d16:	2400      	movs	r4, #0
    5d18:	e7f3      	b.n	5d02 <__aeabi_dsub+0x60a>
    5d1a:	46c0      	nop			; (mov r8, r8)
    5d1c:	000007ff 	.word	0x000007ff
    5d20:	ff7fffff 	.word	0xff7fffff

00005d24 <__aeabi_dcmpun>:
    5d24:	b570      	push	{r4, r5, r6, lr}
    5d26:	4e0e      	ldr	r6, [pc, #56]	; (5d60 <__aeabi_dcmpun+0x3c>)
    5d28:	030d      	lsls	r5, r1, #12
    5d2a:	031c      	lsls	r4, r3, #12
    5d2c:	0049      	lsls	r1, r1, #1
    5d2e:	005b      	lsls	r3, r3, #1
    5d30:	0b2d      	lsrs	r5, r5, #12
    5d32:	0d49      	lsrs	r1, r1, #21
    5d34:	0b24      	lsrs	r4, r4, #12
    5d36:	0d5b      	lsrs	r3, r3, #21
    5d38:	42b1      	cmp	r1, r6
    5d3a:	d004      	beq.n	5d46 <__aeabi_dcmpun+0x22>
    5d3c:	4908      	ldr	r1, [pc, #32]	; (5d60 <__aeabi_dcmpun+0x3c>)
    5d3e:	2000      	movs	r0, #0
    5d40:	428b      	cmp	r3, r1
    5d42:	d008      	beq.n	5d56 <__aeabi_dcmpun+0x32>
    5d44:	bd70      	pop	{r4, r5, r6, pc}
    5d46:	4305      	orrs	r5, r0
    5d48:	2001      	movs	r0, #1
    5d4a:	2d00      	cmp	r5, #0
    5d4c:	d1fa      	bne.n	5d44 <__aeabi_dcmpun+0x20>
    5d4e:	4904      	ldr	r1, [pc, #16]	; (5d60 <__aeabi_dcmpun+0x3c>)
    5d50:	2000      	movs	r0, #0
    5d52:	428b      	cmp	r3, r1
    5d54:	d1f6      	bne.n	5d44 <__aeabi_dcmpun+0x20>
    5d56:	4314      	orrs	r4, r2
    5d58:	0020      	movs	r0, r4
    5d5a:	1e44      	subs	r4, r0, #1
    5d5c:	41a0      	sbcs	r0, r4
    5d5e:	e7f1      	b.n	5d44 <__aeabi_dcmpun+0x20>
    5d60:	000007ff 	.word	0x000007ff

00005d64 <__aeabi_d2iz>:
    5d64:	b530      	push	{r4, r5, lr}
    5d66:	4d13      	ldr	r5, [pc, #76]	; (5db4 <__aeabi_d2iz+0x50>)
    5d68:	030a      	lsls	r2, r1, #12
    5d6a:	004b      	lsls	r3, r1, #1
    5d6c:	0b12      	lsrs	r2, r2, #12
    5d6e:	0d5b      	lsrs	r3, r3, #21
    5d70:	0fc9      	lsrs	r1, r1, #31
    5d72:	2400      	movs	r4, #0
    5d74:	42ab      	cmp	r3, r5
    5d76:	dd10      	ble.n	5d9a <__aeabi_d2iz+0x36>
    5d78:	4c0f      	ldr	r4, [pc, #60]	; (5db8 <__aeabi_d2iz+0x54>)
    5d7a:	42a3      	cmp	r3, r4
    5d7c:	dc0f      	bgt.n	5d9e <__aeabi_d2iz+0x3a>
    5d7e:	2480      	movs	r4, #128	; 0x80
    5d80:	4d0e      	ldr	r5, [pc, #56]	; (5dbc <__aeabi_d2iz+0x58>)
    5d82:	0364      	lsls	r4, r4, #13
    5d84:	4322      	orrs	r2, r4
    5d86:	1aed      	subs	r5, r5, r3
    5d88:	2d1f      	cmp	r5, #31
    5d8a:	dd0b      	ble.n	5da4 <__aeabi_d2iz+0x40>
    5d8c:	480c      	ldr	r0, [pc, #48]	; (5dc0 <__aeabi_d2iz+0x5c>)
    5d8e:	1ac3      	subs	r3, r0, r3
    5d90:	40da      	lsrs	r2, r3
    5d92:	4254      	negs	r4, r2
    5d94:	2900      	cmp	r1, #0
    5d96:	d100      	bne.n	5d9a <__aeabi_d2iz+0x36>
    5d98:	0014      	movs	r4, r2
    5d9a:	0020      	movs	r0, r4
    5d9c:	bd30      	pop	{r4, r5, pc}
    5d9e:	4b09      	ldr	r3, [pc, #36]	; (5dc4 <__aeabi_d2iz+0x60>)
    5da0:	18cc      	adds	r4, r1, r3
    5da2:	e7fa      	b.n	5d9a <__aeabi_d2iz+0x36>
    5da4:	4c08      	ldr	r4, [pc, #32]	; (5dc8 <__aeabi_d2iz+0x64>)
    5da6:	40e8      	lsrs	r0, r5
    5da8:	46a4      	mov	ip, r4
    5daa:	4463      	add	r3, ip
    5dac:	409a      	lsls	r2, r3
    5dae:	4302      	orrs	r2, r0
    5db0:	e7ef      	b.n	5d92 <__aeabi_d2iz+0x2e>
    5db2:	46c0      	nop			; (mov r8, r8)
    5db4:	000003fe 	.word	0x000003fe
    5db8:	0000041d 	.word	0x0000041d
    5dbc:	00000433 	.word	0x00000433
    5dc0:	00000413 	.word	0x00000413
    5dc4:	7fffffff 	.word	0x7fffffff
    5dc8:	fffffbed 	.word	0xfffffbed

00005dcc <__aeabi_i2d>:
    5dcc:	b570      	push	{r4, r5, r6, lr}
    5dce:	2800      	cmp	r0, #0
    5dd0:	d030      	beq.n	5e34 <__aeabi_i2d+0x68>
    5dd2:	17c3      	asrs	r3, r0, #31
    5dd4:	18c4      	adds	r4, r0, r3
    5dd6:	405c      	eors	r4, r3
    5dd8:	0fc5      	lsrs	r5, r0, #31
    5dda:	0020      	movs	r0, r4
    5ddc:	f000 f9d8 	bl	6190 <__clzsi2>
    5de0:	4b17      	ldr	r3, [pc, #92]	; (5e40 <__aeabi_i2d+0x74>)
    5de2:	4a18      	ldr	r2, [pc, #96]	; (5e44 <__aeabi_i2d+0x78>)
    5de4:	1a1b      	subs	r3, r3, r0
    5de6:	1ad2      	subs	r2, r2, r3
    5de8:	2a1f      	cmp	r2, #31
    5dea:	dd18      	ble.n	5e1e <__aeabi_i2d+0x52>
    5dec:	4a16      	ldr	r2, [pc, #88]	; (5e48 <__aeabi_i2d+0x7c>)
    5dee:	1ad2      	subs	r2, r2, r3
    5df0:	4094      	lsls	r4, r2
    5df2:	2200      	movs	r2, #0
    5df4:	0324      	lsls	r4, r4, #12
    5df6:	055b      	lsls	r3, r3, #21
    5df8:	0b24      	lsrs	r4, r4, #12
    5dfa:	0d5b      	lsrs	r3, r3, #21
    5dfc:	2100      	movs	r1, #0
    5dfe:	0010      	movs	r0, r2
    5e00:	0324      	lsls	r4, r4, #12
    5e02:	0d0a      	lsrs	r2, r1, #20
    5e04:	0b24      	lsrs	r4, r4, #12
    5e06:	0512      	lsls	r2, r2, #20
    5e08:	4322      	orrs	r2, r4
    5e0a:	4c10      	ldr	r4, [pc, #64]	; (5e4c <__aeabi_i2d+0x80>)
    5e0c:	051b      	lsls	r3, r3, #20
    5e0e:	4022      	ands	r2, r4
    5e10:	4313      	orrs	r3, r2
    5e12:	005b      	lsls	r3, r3, #1
    5e14:	07ed      	lsls	r5, r5, #31
    5e16:	085b      	lsrs	r3, r3, #1
    5e18:	432b      	orrs	r3, r5
    5e1a:	0019      	movs	r1, r3
    5e1c:	bd70      	pop	{r4, r5, r6, pc}
    5e1e:	0021      	movs	r1, r4
    5e20:	4091      	lsls	r1, r2
    5e22:	000a      	movs	r2, r1
    5e24:	210b      	movs	r1, #11
    5e26:	1a08      	subs	r0, r1, r0
    5e28:	40c4      	lsrs	r4, r0
    5e2a:	055b      	lsls	r3, r3, #21
    5e2c:	0324      	lsls	r4, r4, #12
    5e2e:	0b24      	lsrs	r4, r4, #12
    5e30:	0d5b      	lsrs	r3, r3, #21
    5e32:	e7e3      	b.n	5dfc <__aeabi_i2d+0x30>
    5e34:	2500      	movs	r5, #0
    5e36:	2300      	movs	r3, #0
    5e38:	2400      	movs	r4, #0
    5e3a:	2200      	movs	r2, #0
    5e3c:	e7de      	b.n	5dfc <__aeabi_i2d+0x30>
    5e3e:	46c0      	nop			; (mov r8, r8)
    5e40:	0000041e 	.word	0x0000041e
    5e44:	00000433 	.word	0x00000433
    5e48:	00000413 	.word	0x00000413
    5e4c:	800fffff 	.word	0x800fffff

00005e50 <__aeabi_ui2d>:
    5e50:	b510      	push	{r4, lr}
    5e52:	1e04      	subs	r4, r0, #0
    5e54:	d028      	beq.n	5ea8 <__aeabi_ui2d+0x58>
    5e56:	f000 f99b 	bl	6190 <__clzsi2>
    5e5a:	4b15      	ldr	r3, [pc, #84]	; (5eb0 <__aeabi_ui2d+0x60>)
    5e5c:	4a15      	ldr	r2, [pc, #84]	; (5eb4 <__aeabi_ui2d+0x64>)
    5e5e:	1a1b      	subs	r3, r3, r0
    5e60:	1ad2      	subs	r2, r2, r3
    5e62:	2a1f      	cmp	r2, #31
    5e64:	dd15      	ble.n	5e92 <__aeabi_ui2d+0x42>
    5e66:	4a14      	ldr	r2, [pc, #80]	; (5eb8 <__aeabi_ui2d+0x68>)
    5e68:	1ad2      	subs	r2, r2, r3
    5e6a:	4094      	lsls	r4, r2
    5e6c:	2200      	movs	r2, #0
    5e6e:	0324      	lsls	r4, r4, #12
    5e70:	055b      	lsls	r3, r3, #21
    5e72:	0b24      	lsrs	r4, r4, #12
    5e74:	0d5b      	lsrs	r3, r3, #21
    5e76:	2100      	movs	r1, #0
    5e78:	0010      	movs	r0, r2
    5e7a:	0324      	lsls	r4, r4, #12
    5e7c:	0d0a      	lsrs	r2, r1, #20
    5e7e:	0b24      	lsrs	r4, r4, #12
    5e80:	0512      	lsls	r2, r2, #20
    5e82:	4322      	orrs	r2, r4
    5e84:	4c0d      	ldr	r4, [pc, #52]	; (5ebc <__aeabi_ui2d+0x6c>)
    5e86:	051b      	lsls	r3, r3, #20
    5e88:	4022      	ands	r2, r4
    5e8a:	4313      	orrs	r3, r2
    5e8c:	005b      	lsls	r3, r3, #1
    5e8e:	0859      	lsrs	r1, r3, #1
    5e90:	bd10      	pop	{r4, pc}
    5e92:	0021      	movs	r1, r4
    5e94:	4091      	lsls	r1, r2
    5e96:	000a      	movs	r2, r1
    5e98:	210b      	movs	r1, #11
    5e9a:	1a08      	subs	r0, r1, r0
    5e9c:	40c4      	lsrs	r4, r0
    5e9e:	055b      	lsls	r3, r3, #21
    5ea0:	0324      	lsls	r4, r4, #12
    5ea2:	0b24      	lsrs	r4, r4, #12
    5ea4:	0d5b      	lsrs	r3, r3, #21
    5ea6:	e7e6      	b.n	5e76 <__aeabi_ui2d+0x26>
    5ea8:	2300      	movs	r3, #0
    5eaa:	2400      	movs	r4, #0
    5eac:	2200      	movs	r2, #0
    5eae:	e7e2      	b.n	5e76 <__aeabi_ui2d+0x26>
    5eb0:	0000041e 	.word	0x0000041e
    5eb4:	00000433 	.word	0x00000433
    5eb8:	00000413 	.word	0x00000413
    5ebc:	800fffff 	.word	0x800fffff

00005ec0 <__aeabi_f2d>:
    5ec0:	0041      	lsls	r1, r0, #1
    5ec2:	0e09      	lsrs	r1, r1, #24
    5ec4:	1c4b      	adds	r3, r1, #1
    5ec6:	b570      	push	{r4, r5, r6, lr}
    5ec8:	b2db      	uxtb	r3, r3
    5eca:	0246      	lsls	r6, r0, #9
    5ecc:	0a75      	lsrs	r5, r6, #9
    5ece:	0fc4      	lsrs	r4, r0, #31
    5ed0:	2b01      	cmp	r3, #1
    5ed2:	dd14      	ble.n	5efe <__aeabi_f2d+0x3e>
    5ed4:	23e0      	movs	r3, #224	; 0xe0
    5ed6:	009b      	lsls	r3, r3, #2
    5ed8:	076d      	lsls	r5, r5, #29
    5eda:	0b36      	lsrs	r6, r6, #12
    5edc:	18cb      	adds	r3, r1, r3
    5ede:	2100      	movs	r1, #0
    5ee0:	0d0a      	lsrs	r2, r1, #20
    5ee2:	0028      	movs	r0, r5
    5ee4:	0512      	lsls	r2, r2, #20
    5ee6:	4d1c      	ldr	r5, [pc, #112]	; (5f58 <__aeabi_f2d+0x98>)
    5ee8:	4332      	orrs	r2, r6
    5eea:	055b      	lsls	r3, r3, #21
    5eec:	402a      	ands	r2, r5
    5eee:	085b      	lsrs	r3, r3, #1
    5ef0:	4313      	orrs	r3, r2
    5ef2:	005b      	lsls	r3, r3, #1
    5ef4:	07e4      	lsls	r4, r4, #31
    5ef6:	085b      	lsrs	r3, r3, #1
    5ef8:	4323      	orrs	r3, r4
    5efa:	0019      	movs	r1, r3
    5efc:	bd70      	pop	{r4, r5, r6, pc}
    5efe:	2900      	cmp	r1, #0
    5f00:	d114      	bne.n	5f2c <__aeabi_f2d+0x6c>
    5f02:	2d00      	cmp	r5, #0
    5f04:	d01e      	beq.n	5f44 <__aeabi_f2d+0x84>
    5f06:	0028      	movs	r0, r5
    5f08:	f000 f942 	bl	6190 <__clzsi2>
    5f0c:	280a      	cmp	r0, #10
    5f0e:	dc1c      	bgt.n	5f4a <__aeabi_f2d+0x8a>
    5f10:	230b      	movs	r3, #11
    5f12:	002a      	movs	r2, r5
    5f14:	1a1b      	subs	r3, r3, r0
    5f16:	40da      	lsrs	r2, r3
    5f18:	0003      	movs	r3, r0
    5f1a:	3315      	adds	r3, #21
    5f1c:	409d      	lsls	r5, r3
    5f1e:	4b0f      	ldr	r3, [pc, #60]	; (5f5c <__aeabi_f2d+0x9c>)
    5f20:	0312      	lsls	r2, r2, #12
    5f22:	1a1b      	subs	r3, r3, r0
    5f24:	055b      	lsls	r3, r3, #21
    5f26:	0b16      	lsrs	r6, r2, #12
    5f28:	0d5b      	lsrs	r3, r3, #21
    5f2a:	e7d8      	b.n	5ede <__aeabi_f2d+0x1e>
    5f2c:	2d00      	cmp	r5, #0
    5f2e:	d006      	beq.n	5f3e <__aeabi_f2d+0x7e>
    5f30:	0b32      	lsrs	r2, r6, #12
    5f32:	2680      	movs	r6, #128	; 0x80
    5f34:	0336      	lsls	r6, r6, #12
    5f36:	076d      	lsls	r5, r5, #29
    5f38:	4316      	orrs	r6, r2
    5f3a:	4b09      	ldr	r3, [pc, #36]	; (5f60 <__aeabi_f2d+0xa0>)
    5f3c:	e7cf      	b.n	5ede <__aeabi_f2d+0x1e>
    5f3e:	4b08      	ldr	r3, [pc, #32]	; (5f60 <__aeabi_f2d+0xa0>)
    5f40:	2600      	movs	r6, #0
    5f42:	e7cc      	b.n	5ede <__aeabi_f2d+0x1e>
    5f44:	2300      	movs	r3, #0
    5f46:	2600      	movs	r6, #0
    5f48:	e7c9      	b.n	5ede <__aeabi_f2d+0x1e>
    5f4a:	0003      	movs	r3, r0
    5f4c:	002a      	movs	r2, r5
    5f4e:	3b0b      	subs	r3, #11
    5f50:	409a      	lsls	r2, r3
    5f52:	2500      	movs	r5, #0
    5f54:	e7e3      	b.n	5f1e <__aeabi_f2d+0x5e>
    5f56:	46c0      	nop			; (mov r8, r8)
    5f58:	800fffff 	.word	0x800fffff
    5f5c:	00000389 	.word	0x00000389
    5f60:	000007ff 	.word	0x000007ff

00005f64 <__aeabi_d2f>:
    5f64:	b5f0      	push	{r4, r5, r6, r7, lr}
    5f66:	004c      	lsls	r4, r1, #1
    5f68:	0d64      	lsrs	r4, r4, #21
    5f6a:	030b      	lsls	r3, r1, #12
    5f6c:	1c62      	adds	r2, r4, #1
    5f6e:	0f45      	lsrs	r5, r0, #29
    5f70:	0a5b      	lsrs	r3, r3, #9
    5f72:	0552      	lsls	r2, r2, #21
    5f74:	432b      	orrs	r3, r5
    5f76:	0fc9      	lsrs	r1, r1, #31
    5f78:	00c5      	lsls	r5, r0, #3
    5f7a:	0d52      	lsrs	r2, r2, #21
    5f7c:	2a01      	cmp	r2, #1
    5f7e:	dd28      	ble.n	5fd2 <__aeabi_d2f+0x6e>
    5f80:	4a3a      	ldr	r2, [pc, #232]	; (606c <__aeabi_d2f+0x108>)
    5f82:	18a6      	adds	r6, r4, r2
    5f84:	2efe      	cmp	r6, #254	; 0xfe
    5f86:	dc1b      	bgt.n	5fc0 <__aeabi_d2f+0x5c>
    5f88:	2e00      	cmp	r6, #0
    5f8a:	dd3e      	ble.n	600a <__aeabi_d2f+0xa6>
    5f8c:	0180      	lsls	r0, r0, #6
    5f8e:	0002      	movs	r2, r0
    5f90:	1e50      	subs	r0, r2, #1
    5f92:	4182      	sbcs	r2, r0
    5f94:	0f6d      	lsrs	r5, r5, #29
    5f96:	432a      	orrs	r2, r5
    5f98:	00db      	lsls	r3, r3, #3
    5f9a:	4313      	orrs	r3, r2
    5f9c:	075a      	lsls	r2, r3, #29
    5f9e:	d004      	beq.n	5faa <__aeabi_d2f+0x46>
    5fa0:	220f      	movs	r2, #15
    5fa2:	401a      	ands	r2, r3
    5fa4:	2a04      	cmp	r2, #4
    5fa6:	d000      	beq.n	5faa <__aeabi_d2f+0x46>
    5fa8:	3304      	adds	r3, #4
    5faa:	2280      	movs	r2, #128	; 0x80
    5fac:	04d2      	lsls	r2, r2, #19
    5fae:	401a      	ands	r2, r3
    5fb0:	d05a      	beq.n	6068 <__aeabi_d2f+0x104>
    5fb2:	3601      	adds	r6, #1
    5fb4:	2eff      	cmp	r6, #255	; 0xff
    5fb6:	d003      	beq.n	5fc0 <__aeabi_d2f+0x5c>
    5fb8:	019b      	lsls	r3, r3, #6
    5fba:	0a5b      	lsrs	r3, r3, #9
    5fbc:	b2f4      	uxtb	r4, r6
    5fbe:	e001      	b.n	5fc4 <__aeabi_d2f+0x60>
    5fc0:	24ff      	movs	r4, #255	; 0xff
    5fc2:	2300      	movs	r3, #0
    5fc4:	0258      	lsls	r0, r3, #9
    5fc6:	05e4      	lsls	r4, r4, #23
    5fc8:	0a40      	lsrs	r0, r0, #9
    5fca:	07c9      	lsls	r1, r1, #31
    5fcc:	4320      	orrs	r0, r4
    5fce:	4308      	orrs	r0, r1
    5fd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5fd2:	2c00      	cmp	r4, #0
    5fd4:	d007      	beq.n	5fe6 <__aeabi_d2f+0x82>
    5fd6:	431d      	orrs	r5, r3
    5fd8:	d0f2      	beq.n	5fc0 <__aeabi_d2f+0x5c>
    5fda:	2080      	movs	r0, #128	; 0x80
    5fdc:	00db      	lsls	r3, r3, #3
    5fde:	0480      	lsls	r0, r0, #18
    5fe0:	4303      	orrs	r3, r0
    5fe2:	26ff      	movs	r6, #255	; 0xff
    5fe4:	e7da      	b.n	5f9c <__aeabi_d2f+0x38>
    5fe6:	432b      	orrs	r3, r5
    5fe8:	d003      	beq.n	5ff2 <__aeabi_d2f+0x8e>
    5fea:	2305      	movs	r3, #5
    5fec:	08db      	lsrs	r3, r3, #3
    5fee:	2cff      	cmp	r4, #255	; 0xff
    5ff0:	d003      	beq.n	5ffa <__aeabi_d2f+0x96>
    5ff2:	025b      	lsls	r3, r3, #9
    5ff4:	0a5b      	lsrs	r3, r3, #9
    5ff6:	b2e4      	uxtb	r4, r4
    5ff8:	e7e4      	b.n	5fc4 <__aeabi_d2f+0x60>
    5ffa:	2b00      	cmp	r3, #0
    5ffc:	d032      	beq.n	6064 <__aeabi_d2f+0x100>
    5ffe:	2080      	movs	r0, #128	; 0x80
    6000:	03c0      	lsls	r0, r0, #15
    6002:	4303      	orrs	r3, r0
    6004:	025b      	lsls	r3, r3, #9
    6006:	0a5b      	lsrs	r3, r3, #9
    6008:	e7dc      	b.n	5fc4 <__aeabi_d2f+0x60>
    600a:	0032      	movs	r2, r6
    600c:	3217      	adds	r2, #23
    600e:	db14      	blt.n	603a <__aeabi_d2f+0xd6>
    6010:	2280      	movs	r2, #128	; 0x80
    6012:	271e      	movs	r7, #30
    6014:	0412      	lsls	r2, r2, #16
    6016:	4313      	orrs	r3, r2
    6018:	1bbf      	subs	r7, r7, r6
    601a:	2f1f      	cmp	r7, #31
    601c:	dc0f      	bgt.n	603e <__aeabi_d2f+0xda>
    601e:	4a14      	ldr	r2, [pc, #80]	; (6070 <__aeabi_d2f+0x10c>)
    6020:	4694      	mov	ip, r2
    6022:	4464      	add	r4, ip
    6024:	002a      	movs	r2, r5
    6026:	40a5      	lsls	r5, r4
    6028:	002e      	movs	r6, r5
    602a:	40a3      	lsls	r3, r4
    602c:	1e75      	subs	r5, r6, #1
    602e:	41ae      	sbcs	r6, r5
    6030:	40fa      	lsrs	r2, r7
    6032:	4333      	orrs	r3, r6
    6034:	4313      	orrs	r3, r2
    6036:	2600      	movs	r6, #0
    6038:	e7b0      	b.n	5f9c <__aeabi_d2f+0x38>
    603a:	2400      	movs	r4, #0
    603c:	e7d5      	b.n	5fea <__aeabi_d2f+0x86>
    603e:	2202      	movs	r2, #2
    6040:	4252      	negs	r2, r2
    6042:	1b96      	subs	r6, r2, r6
    6044:	001a      	movs	r2, r3
    6046:	40f2      	lsrs	r2, r6
    6048:	2f20      	cmp	r7, #32
    604a:	d009      	beq.n	6060 <__aeabi_d2f+0xfc>
    604c:	4809      	ldr	r0, [pc, #36]	; (6074 <__aeabi_d2f+0x110>)
    604e:	4684      	mov	ip, r0
    6050:	4464      	add	r4, ip
    6052:	40a3      	lsls	r3, r4
    6054:	432b      	orrs	r3, r5
    6056:	1e5d      	subs	r5, r3, #1
    6058:	41ab      	sbcs	r3, r5
    605a:	2600      	movs	r6, #0
    605c:	4313      	orrs	r3, r2
    605e:	e79d      	b.n	5f9c <__aeabi_d2f+0x38>
    6060:	2300      	movs	r3, #0
    6062:	e7f7      	b.n	6054 <__aeabi_d2f+0xf0>
    6064:	2300      	movs	r3, #0
    6066:	e7ad      	b.n	5fc4 <__aeabi_d2f+0x60>
    6068:	0034      	movs	r4, r6
    606a:	e7bf      	b.n	5fec <__aeabi_d2f+0x88>
    606c:	fffffc80 	.word	0xfffffc80
    6070:	fffffc82 	.word	0xfffffc82
    6074:	fffffca2 	.word	0xfffffca2

00006078 <__udivsi3>:
    6078:	2200      	movs	r2, #0
    607a:	0843      	lsrs	r3, r0, #1
    607c:	428b      	cmp	r3, r1
    607e:	d374      	bcc.n	616a <__udivsi3+0xf2>
    6080:	0903      	lsrs	r3, r0, #4
    6082:	428b      	cmp	r3, r1
    6084:	d35f      	bcc.n	6146 <__udivsi3+0xce>
    6086:	0a03      	lsrs	r3, r0, #8
    6088:	428b      	cmp	r3, r1
    608a:	d344      	bcc.n	6116 <__udivsi3+0x9e>
    608c:	0b03      	lsrs	r3, r0, #12
    608e:	428b      	cmp	r3, r1
    6090:	d328      	bcc.n	60e4 <__udivsi3+0x6c>
    6092:	0c03      	lsrs	r3, r0, #16
    6094:	428b      	cmp	r3, r1
    6096:	d30d      	bcc.n	60b4 <__udivsi3+0x3c>
    6098:	22ff      	movs	r2, #255	; 0xff
    609a:	0209      	lsls	r1, r1, #8
    609c:	ba12      	rev	r2, r2
    609e:	0c03      	lsrs	r3, r0, #16
    60a0:	428b      	cmp	r3, r1
    60a2:	d302      	bcc.n	60aa <__udivsi3+0x32>
    60a4:	1212      	asrs	r2, r2, #8
    60a6:	0209      	lsls	r1, r1, #8
    60a8:	d065      	beq.n	6176 <__udivsi3+0xfe>
    60aa:	0b03      	lsrs	r3, r0, #12
    60ac:	428b      	cmp	r3, r1
    60ae:	d319      	bcc.n	60e4 <__udivsi3+0x6c>
    60b0:	e000      	b.n	60b4 <__udivsi3+0x3c>
    60b2:	0a09      	lsrs	r1, r1, #8
    60b4:	0bc3      	lsrs	r3, r0, #15
    60b6:	428b      	cmp	r3, r1
    60b8:	d301      	bcc.n	60be <__udivsi3+0x46>
    60ba:	03cb      	lsls	r3, r1, #15
    60bc:	1ac0      	subs	r0, r0, r3
    60be:	4152      	adcs	r2, r2
    60c0:	0b83      	lsrs	r3, r0, #14
    60c2:	428b      	cmp	r3, r1
    60c4:	d301      	bcc.n	60ca <__udivsi3+0x52>
    60c6:	038b      	lsls	r3, r1, #14
    60c8:	1ac0      	subs	r0, r0, r3
    60ca:	4152      	adcs	r2, r2
    60cc:	0b43      	lsrs	r3, r0, #13
    60ce:	428b      	cmp	r3, r1
    60d0:	d301      	bcc.n	60d6 <__udivsi3+0x5e>
    60d2:	034b      	lsls	r3, r1, #13
    60d4:	1ac0      	subs	r0, r0, r3
    60d6:	4152      	adcs	r2, r2
    60d8:	0b03      	lsrs	r3, r0, #12
    60da:	428b      	cmp	r3, r1
    60dc:	d301      	bcc.n	60e2 <__udivsi3+0x6a>
    60de:	030b      	lsls	r3, r1, #12
    60e0:	1ac0      	subs	r0, r0, r3
    60e2:	4152      	adcs	r2, r2
    60e4:	0ac3      	lsrs	r3, r0, #11
    60e6:	428b      	cmp	r3, r1
    60e8:	d301      	bcc.n	60ee <__udivsi3+0x76>
    60ea:	02cb      	lsls	r3, r1, #11
    60ec:	1ac0      	subs	r0, r0, r3
    60ee:	4152      	adcs	r2, r2
    60f0:	0a83      	lsrs	r3, r0, #10
    60f2:	428b      	cmp	r3, r1
    60f4:	d301      	bcc.n	60fa <__udivsi3+0x82>
    60f6:	028b      	lsls	r3, r1, #10
    60f8:	1ac0      	subs	r0, r0, r3
    60fa:	4152      	adcs	r2, r2
    60fc:	0a43      	lsrs	r3, r0, #9
    60fe:	428b      	cmp	r3, r1
    6100:	d301      	bcc.n	6106 <__udivsi3+0x8e>
    6102:	024b      	lsls	r3, r1, #9
    6104:	1ac0      	subs	r0, r0, r3
    6106:	4152      	adcs	r2, r2
    6108:	0a03      	lsrs	r3, r0, #8
    610a:	428b      	cmp	r3, r1
    610c:	d301      	bcc.n	6112 <__udivsi3+0x9a>
    610e:	020b      	lsls	r3, r1, #8
    6110:	1ac0      	subs	r0, r0, r3
    6112:	4152      	adcs	r2, r2
    6114:	d2cd      	bcs.n	60b2 <__udivsi3+0x3a>
    6116:	09c3      	lsrs	r3, r0, #7
    6118:	428b      	cmp	r3, r1
    611a:	d301      	bcc.n	6120 <__udivsi3+0xa8>
    611c:	01cb      	lsls	r3, r1, #7
    611e:	1ac0      	subs	r0, r0, r3
    6120:	4152      	adcs	r2, r2
    6122:	0983      	lsrs	r3, r0, #6
    6124:	428b      	cmp	r3, r1
    6126:	d301      	bcc.n	612c <__udivsi3+0xb4>
    6128:	018b      	lsls	r3, r1, #6
    612a:	1ac0      	subs	r0, r0, r3
    612c:	4152      	adcs	r2, r2
    612e:	0943      	lsrs	r3, r0, #5
    6130:	428b      	cmp	r3, r1
    6132:	d301      	bcc.n	6138 <__udivsi3+0xc0>
    6134:	014b      	lsls	r3, r1, #5
    6136:	1ac0      	subs	r0, r0, r3
    6138:	4152      	adcs	r2, r2
    613a:	0903      	lsrs	r3, r0, #4
    613c:	428b      	cmp	r3, r1
    613e:	d301      	bcc.n	6144 <__udivsi3+0xcc>
    6140:	010b      	lsls	r3, r1, #4
    6142:	1ac0      	subs	r0, r0, r3
    6144:	4152      	adcs	r2, r2
    6146:	08c3      	lsrs	r3, r0, #3
    6148:	428b      	cmp	r3, r1
    614a:	d301      	bcc.n	6150 <__udivsi3+0xd8>
    614c:	00cb      	lsls	r3, r1, #3
    614e:	1ac0      	subs	r0, r0, r3
    6150:	4152      	adcs	r2, r2
    6152:	0883      	lsrs	r3, r0, #2
    6154:	428b      	cmp	r3, r1
    6156:	d301      	bcc.n	615c <__udivsi3+0xe4>
    6158:	008b      	lsls	r3, r1, #2
    615a:	1ac0      	subs	r0, r0, r3
    615c:	4152      	adcs	r2, r2
    615e:	0843      	lsrs	r3, r0, #1
    6160:	428b      	cmp	r3, r1
    6162:	d301      	bcc.n	6168 <__udivsi3+0xf0>
    6164:	004b      	lsls	r3, r1, #1
    6166:	1ac0      	subs	r0, r0, r3
    6168:	4152      	adcs	r2, r2
    616a:	1a41      	subs	r1, r0, r1
    616c:	d200      	bcs.n	6170 <__udivsi3+0xf8>
    616e:	4601      	mov	r1, r0
    6170:	4152      	adcs	r2, r2
    6172:	4610      	mov	r0, r2
    6174:	4770      	bx	lr
    6176:	e7ff      	b.n	6178 <__udivsi3+0x100>
    6178:	b501      	push	{r0, lr}
    617a:	2000      	movs	r0, #0
    617c:	f000 f806 	bl	618c <__aeabi_idiv0>
    6180:	bd02      	pop	{r1, pc}
    6182:	46c0      	nop			; (mov r8, r8)

00006184 <__aeabi_uidivmod>:
    6184:	2900      	cmp	r1, #0
    6186:	d0f7      	beq.n	6178 <__udivsi3+0x100>
    6188:	e776      	b.n	6078 <__udivsi3>
    618a:	4770      	bx	lr

0000618c <__aeabi_idiv0>:
    618c:	4770      	bx	lr
    618e:	46c0      	nop			; (mov r8, r8)

00006190 <__clzsi2>:
    6190:	211c      	movs	r1, #28
    6192:	2301      	movs	r3, #1
    6194:	041b      	lsls	r3, r3, #16
    6196:	4298      	cmp	r0, r3
    6198:	d301      	bcc.n	619e <__clzsi2+0xe>
    619a:	0c00      	lsrs	r0, r0, #16
    619c:	3910      	subs	r1, #16
    619e:	0a1b      	lsrs	r3, r3, #8
    61a0:	4298      	cmp	r0, r3
    61a2:	d301      	bcc.n	61a8 <__clzsi2+0x18>
    61a4:	0a00      	lsrs	r0, r0, #8
    61a6:	3908      	subs	r1, #8
    61a8:	091b      	lsrs	r3, r3, #4
    61aa:	4298      	cmp	r0, r3
    61ac:	d301      	bcc.n	61b2 <__clzsi2+0x22>
    61ae:	0900      	lsrs	r0, r0, #4
    61b0:	3904      	subs	r1, #4
    61b2:	a202      	add	r2, pc, #8	; (adr r2, 61bc <__clzsi2+0x2c>)
    61b4:	5c10      	ldrb	r0, [r2, r0]
    61b6:	1840      	adds	r0, r0, r1
    61b8:	4770      	bx	lr
    61ba:	46c0      	nop			; (mov r8, r8)
    61bc:	02020304 	.word	0x02020304
    61c0:	01010101 	.word	0x01010101
	...

000061cc <__errno>:
    61cc:	4b01      	ldr	r3, [pc, #4]	; (61d4 <__errno+0x8>)
    61ce:	6818      	ldr	r0, [r3, #0]
    61d0:	4770      	bx	lr
    61d2:	46c0      	nop			; (mov r8, r8)
    61d4:	20000074 	.word	0x20000074

000061d8 <__libc_init_array>:
    61d8:	b570      	push	{r4, r5, r6, lr}
    61da:	4e0d      	ldr	r6, [pc, #52]	; (6210 <__libc_init_array+0x38>)
    61dc:	4d0d      	ldr	r5, [pc, #52]	; (6214 <__libc_init_array+0x3c>)
    61de:	2400      	movs	r4, #0
    61e0:	1bad      	subs	r5, r5, r6
    61e2:	10ad      	asrs	r5, r5, #2
    61e4:	d005      	beq.n	61f2 <__libc_init_array+0x1a>
    61e6:	00a3      	lsls	r3, r4, #2
    61e8:	58f3      	ldr	r3, [r6, r3]
    61ea:	3401      	adds	r4, #1
    61ec:	4798      	blx	r3
    61ee:	42a5      	cmp	r5, r4
    61f0:	d1f9      	bne.n	61e6 <__libc_init_array+0xe>
    61f2:	f000 f937 	bl	6464 <_init>
    61f6:	4e08      	ldr	r6, [pc, #32]	; (6218 <__libc_init_array+0x40>)
    61f8:	4d08      	ldr	r5, [pc, #32]	; (621c <__libc_init_array+0x44>)
    61fa:	2400      	movs	r4, #0
    61fc:	1bad      	subs	r5, r5, r6
    61fe:	10ad      	asrs	r5, r5, #2
    6200:	d005      	beq.n	620e <__libc_init_array+0x36>
    6202:	00a3      	lsls	r3, r4, #2
    6204:	58f3      	ldr	r3, [r6, r3]
    6206:	3401      	adds	r4, #1
    6208:	4798      	blx	r3
    620a:	42a5      	cmp	r5, r4
    620c:	d1f9      	bne.n	6202 <__libc_init_array+0x2a>
    620e:	bd70      	pop	{r4, r5, r6, pc}
    6210:	00006470 	.word	0x00006470
    6214:	00006470 	.word	0x00006470
    6218:	00006470 	.word	0x00006470
    621c:	00006478 	.word	0x00006478

00006220 <register_fini>:
    6220:	4b03      	ldr	r3, [pc, #12]	; (6230 <register_fini+0x10>)
    6222:	b510      	push	{r4, lr}
    6224:	2b00      	cmp	r3, #0
    6226:	d002      	beq.n	622e <register_fini+0xe>
    6228:	4802      	ldr	r0, [pc, #8]	; (6234 <register_fini+0x14>)
    622a:	f000 f805 	bl	6238 <atexit>
    622e:	bd10      	pop	{r4, pc}
    6230:	00000000 	.word	0x00000000
    6234:	00006249 	.word	0x00006249

00006238 <atexit>:
    6238:	b510      	push	{r4, lr}
    623a:	0001      	movs	r1, r0
    623c:	2300      	movs	r3, #0
    623e:	2200      	movs	r2, #0
    6240:	2000      	movs	r0, #0
    6242:	f000 f81b 	bl	627c <__register_exitproc>
    6246:	bd10      	pop	{r4, pc}

00006248 <__libc_fini_array>:
    6248:	b570      	push	{r4, r5, r6, lr}
    624a:	4b09      	ldr	r3, [pc, #36]	; (6270 <__libc_fini_array+0x28>)
    624c:	4c09      	ldr	r4, [pc, #36]	; (6274 <__libc_fini_array+0x2c>)
    624e:	1ae4      	subs	r4, r4, r3
    6250:	10a4      	asrs	r4, r4, #2
    6252:	d009      	beq.n	6268 <__libc_fini_array+0x20>
    6254:	4a08      	ldr	r2, [pc, #32]	; (6278 <__libc_fini_array+0x30>)
    6256:	18a5      	adds	r5, r4, r2
    6258:	00ad      	lsls	r5, r5, #2
    625a:	18ed      	adds	r5, r5, r3
    625c:	682b      	ldr	r3, [r5, #0]
    625e:	3c01      	subs	r4, #1
    6260:	4798      	blx	r3
    6262:	3d04      	subs	r5, #4
    6264:	2c00      	cmp	r4, #0
    6266:	d1f9      	bne.n	625c <__libc_fini_array+0x14>
    6268:	f000 f906 	bl	6478 <_fini>
    626c:	bd70      	pop	{r4, r5, r6, pc}
    626e:	46c0      	nop			; (mov r8, r8)
    6270:	00006484 	.word	0x00006484
    6274:	00006488 	.word	0x00006488
    6278:	3fffffff 	.word	0x3fffffff

0000627c <__register_exitproc>:
    627c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    627e:	46de      	mov	lr, fp
    6280:	469b      	mov	fp, r3
    6282:	4b31      	ldr	r3, [pc, #196]	; (6348 <__register_exitproc+0xcc>)
    6284:	4645      	mov	r5, r8
    6286:	681c      	ldr	r4, [r3, #0]
    6288:	23a4      	movs	r3, #164	; 0xa4
    628a:	464e      	mov	r6, r9
    628c:	4657      	mov	r7, sl
    628e:	005b      	lsls	r3, r3, #1
    6290:	b5e0      	push	{r5, r6, r7, lr}
    6292:	0005      	movs	r5, r0
    6294:	58e0      	ldr	r0, [r4, r3]
    6296:	000e      	movs	r6, r1
    6298:	4690      	mov	r8, r2
    629a:	2800      	cmp	r0, #0
    629c:	d04b      	beq.n	6336 <__register_exitproc+0xba>
    629e:	6843      	ldr	r3, [r0, #4]
    62a0:	2b1f      	cmp	r3, #31
    62a2:	dc0d      	bgt.n	62c0 <__register_exitproc+0x44>
    62a4:	1c5c      	adds	r4, r3, #1
    62a6:	2d00      	cmp	r5, #0
    62a8:	d121      	bne.n	62ee <__register_exitproc+0x72>
    62aa:	3302      	adds	r3, #2
    62ac:	009b      	lsls	r3, r3, #2
    62ae:	6044      	str	r4, [r0, #4]
    62b0:	501e      	str	r6, [r3, r0]
    62b2:	2000      	movs	r0, #0
    62b4:	bc3c      	pop	{r2, r3, r4, r5}
    62b6:	4690      	mov	r8, r2
    62b8:	4699      	mov	r9, r3
    62ba:	46a2      	mov	sl, r4
    62bc:	46ab      	mov	fp, r5
    62be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    62c0:	4b22      	ldr	r3, [pc, #136]	; (634c <__register_exitproc+0xd0>)
    62c2:	2b00      	cmp	r3, #0
    62c4:	d03c      	beq.n	6340 <__register_exitproc+0xc4>
    62c6:	20c8      	movs	r0, #200	; 0xc8
    62c8:	0040      	lsls	r0, r0, #1
    62ca:	e000      	b.n	62ce <__register_exitproc+0x52>
    62cc:	bf00      	nop
    62ce:	2800      	cmp	r0, #0
    62d0:	d036      	beq.n	6340 <__register_exitproc+0xc4>
    62d2:	22a4      	movs	r2, #164	; 0xa4
    62d4:	2300      	movs	r3, #0
    62d6:	0052      	lsls	r2, r2, #1
    62d8:	58a1      	ldr	r1, [r4, r2]
    62da:	6043      	str	r3, [r0, #4]
    62dc:	6001      	str	r1, [r0, #0]
    62de:	50a0      	str	r0, [r4, r2]
    62e0:	3240      	adds	r2, #64	; 0x40
    62e2:	5083      	str	r3, [r0, r2]
    62e4:	3204      	adds	r2, #4
    62e6:	5083      	str	r3, [r0, r2]
    62e8:	2401      	movs	r4, #1
    62ea:	2d00      	cmp	r5, #0
    62ec:	d0dd      	beq.n	62aa <__register_exitproc+0x2e>
    62ee:	009a      	lsls	r2, r3, #2
    62f0:	4691      	mov	r9, r2
    62f2:	4481      	add	r9, r0
    62f4:	4642      	mov	r2, r8
    62f6:	2188      	movs	r1, #136	; 0x88
    62f8:	464f      	mov	r7, r9
    62fa:	507a      	str	r2, [r7, r1]
    62fc:	22c4      	movs	r2, #196	; 0xc4
    62fe:	0052      	lsls	r2, r2, #1
    6300:	4690      	mov	r8, r2
    6302:	4480      	add	r8, r0
    6304:	4642      	mov	r2, r8
    6306:	3987      	subs	r1, #135	; 0x87
    6308:	4099      	lsls	r1, r3
    630a:	6812      	ldr	r2, [r2, #0]
    630c:	468a      	mov	sl, r1
    630e:	430a      	orrs	r2, r1
    6310:	4694      	mov	ip, r2
    6312:	4642      	mov	r2, r8
    6314:	4661      	mov	r1, ip
    6316:	6011      	str	r1, [r2, #0]
    6318:	2284      	movs	r2, #132	; 0x84
    631a:	4649      	mov	r1, r9
    631c:	465f      	mov	r7, fp
    631e:	0052      	lsls	r2, r2, #1
    6320:	508f      	str	r7, [r1, r2]
    6322:	2d02      	cmp	r5, #2
    6324:	d1c1      	bne.n	62aa <__register_exitproc+0x2e>
    6326:	0002      	movs	r2, r0
    6328:	4655      	mov	r5, sl
    632a:	328d      	adds	r2, #141	; 0x8d
    632c:	32ff      	adds	r2, #255	; 0xff
    632e:	6811      	ldr	r1, [r2, #0]
    6330:	430d      	orrs	r5, r1
    6332:	6015      	str	r5, [r2, #0]
    6334:	e7b9      	b.n	62aa <__register_exitproc+0x2e>
    6336:	0020      	movs	r0, r4
    6338:	304d      	adds	r0, #77	; 0x4d
    633a:	30ff      	adds	r0, #255	; 0xff
    633c:	50e0      	str	r0, [r4, r3]
    633e:	e7ae      	b.n	629e <__register_exitproc+0x22>
    6340:	2001      	movs	r0, #1
    6342:	4240      	negs	r0, r0
    6344:	e7b6      	b.n	62b4 <__register_exitproc+0x38>
    6346:	46c0      	nop			; (mov r8, r8)
    6348:	00006460 	.word	0x00006460
    634c:	00000000 	.word	0x00000000

00006350 <spi2MOSI>:
    6350:	0c000002 00000200                                .....

00006355 <spi2SCK>:
    6355:	0e000002 00000200                                .....

0000635a <spi2MISO>:
    635a:	0d000002 00000000                                .....

0000635f <senseBatPin>:
    635f:	06000000 01000106                                .....

00006364 <senseAPin>:
    6364:	03010001 0100010b                                .....

00006369 <senseBPin>:
    6369:	02010001 0000000a                                .....

0000636e <senseCPin>:
    636e:	03000000 00000001                                .....

00006373 <senseDPin>:
    6373:	02000000 00000000                                .....

00006378 <analogAccelPin>:
    6378:	07000000 00000207                                .....

0000637d <spi2MOSI>:
    637d:	0c000002 00000200                                .....

00006382 <spi2SCK>:
    6382:	0e000002 6f700000 00000077 00000000              ......pow.....

00006390 <TWO52>:
    6390:	00000000 43300000 00000000 c3300000     ......0C......0.
    63a0:	00003e44 00003d94 00003d94 00003d92     D>...=...=...=..
    63b0:	00003e36 00003e36 00003e2c 00003d92     6>..6>..,>...=..
    63c0:	00003e36 00003e2c 00003e36 00003d92     6>..,>..6>...=..
    63d0:	00003e3c 00003e3c 00003e3c 00003ecc     <>..<>..<>...>..
    63e0:	00004b88 00004b6a 00004b24 00004a42     .K..jK..$K..BJ..
    63f0:	00004b24 00004b5c 00004b24 00004a42     $K..\K..$K..BJ..
    6400:	00004b6a 00004b6a 00004b5c 00004a42     jK..jK..\K..BJ..
    6410:	00004a3a 00004a3a 00004a3a 00004da0     :J..:J..:J...M..
    6420:	000053e8 000052a8 000052a8 000052a4     .S...R...R...R..
    6430:	000053c0 000053c0 000053b2 000052a4     .S...S...S...R..
    6440:	000053c0 000053b2 000053c0 000052a4     .S...S...S...R..
    6450:	000053c8 000053c8 000053c8 000055cc     .S...S...S...U..

00006460 <_global_impure_ptr>:
    6460:	20000078                                x.. 

00006464 <_init>:
    6464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6466:	46c0      	nop			; (mov r8, r8)
    6468:	bcf8      	pop	{r3, r4, r5, r6, r7}
    646a:	bc08      	pop	{r3}
    646c:	469e      	mov	lr, r3
    646e:	4770      	bx	lr

00006470 <__init_array_start>:
    6470:	00006221 	.word	0x00006221

00006474 <__frame_dummy_init_array_entry>:
    6474:	000000dd                                ....

00006478 <_fini>:
    6478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    647a:	46c0      	nop			; (mov r8, r8)
    647c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    647e:	bc08      	pop	{r3}
    6480:	469e      	mov	lr, r3
    6482:	4770      	bx	lr

00006484 <__fini_array_start>:
    6484:	000000b5 	.word	0x000000b5
