
DasAltimeter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002974  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000438  20000000  00002974  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000001b0  20000440  00002dc0  00020440  2**4
                  ALLOC
  3 .stack        00002000  200005f0  00002f70  00020440  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020438  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020460  2**0
                  CONTENTS, READONLY
  6 .debug_info   0001af46  00000000  00000000  000204b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002207  00000000  00000000  0003b3ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00001b26  00000000  00000000  0003d606  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000368  00000000  00000000  0003f12c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000b98  00000000  00000000  0003f494  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000156b2  00000000  00000000  0004002c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000086e8  00000000  00000000  000556de  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0007243c  00000000  00000000  0005ddc6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000a18  00000000  00000000  000d0204  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
 *         retrieved from cpu registers.
 */
void SystemCoreClockUpdate(void)
{
	// Not implemented
	SystemCoreClock = __SYSTEM_CLOCK;
       0:	200025f0 	.word	0x200025f0
       4:	00000119 	.word	0x00000119
	return;
}
       8:	00000115 	.word	0x00000115
       c:	00000115 	.word	0x00000115
	...
      2c:	00000115 	.word	0x00000115
	...
      38:	00000115 	.word	0x00000115
      3c:	00000115 	.word	0x00000115
      40:	00000115 	.word	0x00000115
      44:	00000115 	.word	0x00000115
      48:	00000115 	.word	0x00000115
      4c:	00000efd 	.word	0x00000efd
      50:	00000115 	.word	0x00000115
      54:	00000115 	.word	0x00000115
      58:	00000115 	.word	0x00000115
      5c:	00000115 	.word	0x00000115
      60:	00000115 	.word	0x00000115
      64:	00000115 	.word	0x00000115
      68:	00000115 	.word	0x00000115
      6c:	00000115 	.word	0x00000115
      70:	00000115 	.word	0x00000115
      74:	00000115 	.word	0x00000115
      78:	00000115 	.word	0x00000115
      7c:	00000115 	.word	0x00000115
      80:	00000115 	.word	0x00000115
      84:	00000115 	.word	0x00000115
      88:	00000115 	.word	0x00000115
      8c:	00000f9d 	.word	0x00000f9d
      90:	00001005 	.word	0x00001005
	...
      9c:	00000115 	.word	0x00000115
      a0:	00000115 	.word	0x00000115
      a4:	00000115 	.word	0x00000115
      a8:	00000115 	.word	0x00000115
      ac:	00000115 	.word	0x00000115
      b0:	00000000 	.word	0x00000000

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000440 	.word	0x20000440
      d4:	00000000 	.word	0x00000000
      d8:	00002974 	.word	0x00002974

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000444 	.word	0x20000444
     108:	00002974 	.word	0x00002974
     10c:	00002974 	.word	0x00002974
     110:	00000000 	.word	0x00000000

00000114 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     114:	e7fe      	b.n	114 <Dummy_Handler>
	...

00000118 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
     118:	4821      	ldr	r0, [pc, #132]	; (1a0 <Reset_Handler+0x88>)
     11a:	4922      	ldr	r1, [pc, #136]	; (1a4 <Reset_Handler+0x8c>)
     11c:	b570      	push	{r4, r5, r6, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
     11e:	4288      	cmp	r0, r1
     120:	d002      	beq.n	128 <Reset_Handler+0x10>
     122:	2300      	movs	r3, #0
                for (; pDest < &_erelocate;) {
     124:	4c20      	ldr	r4, [pc, #128]	; (1a8 <Reset_Handler+0x90>)
     126:	e003      	b.n	130 <Reset_Handler+0x18>
     128:	4b20      	ldr	r3, [pc, #128]	; (1ac <Reset_Handler+0x94>)
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     12a:	4a21      	ldr	r2, [pc, #132]	; (1b0 <Reset_Handler+0x98>)
                *pDest++ = 0;
     12c:	2100      	movs	r1, #0
     12e:	e006      	b.n	13e <Reset_Handler+0x26>
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
     130:	18ca      	adds	r2, r1, r3
     132:	42a2      	cmp	r2, r4
     134:	d2f8      	bcs.n	128 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
     136:	58c5      	ldr	r5, [r0, r3]
     138:	3304      	adds	r3, #4
     13a:	6015      	str	r5, [r2, #0]
     13c:	e7f8      	b.n	130 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     13e:	4293      	cmp	r3, r2
     140:	d201      	bcs.n	146 <Reset_Handler+0x2e>
                *pDest++ = 0;
     142:	c302      	stmia	r3!, {r1}
     144:	e7fb      	b.n	13e <Reset_Handler+0x26>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     146:	21ff      	movs	r1, #255	; 0xff

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     148:	2402      	movs	r4, #2
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     14a:	2503      	movs	r5, #3
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     14c:	4b19      	ldr	r3, [pc, #100]	; (1b4 <Reset_Handler+0x9c>)
     14e:	4a1a      	ldr	r2, [pc, #104]	; (1b8 <Reset_Handler+0xa0>)
     150:	438b      	bics	r3, r1

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     152:	260c      	movs	r6, #12
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     154:	6093      	str	r3, [r2, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     156:	2208      	movs	r2, #8
        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     158:	4b18      	ldr	r3, [pc, #96]	; (1bc <Reset_Handler+0xa4>)
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     15a:	4919      	ldr	r1, [pc, #100]	; (1c0 <Reset_Handler+0xa8>)
        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     15c:	625c      	str	r4, [r3, #36]	; 0x24
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     15e:	78cb      	ldrb	r3, [r1, #3]
     160:	43ab      	bics	r3, r5
     162:	4323      	orrs	r3, r4
     164:	70cb      	strb	r3, [r1, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     166:	78cb      	ldrb	r3, [r1, #3]
     168:	43b3      	bics	r3, r6
     16a:	4313      	orrs	r3, r2
     16c:	70cb      	strb	r3, [r1, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
     16e:	2130      	movs	r1, #48	; 0x30
     170:	4b14      	ldr	r3, [pc, #80]	; (1c4 <Reset_Handler+0xac>)
     172:	7b98      	ldrb	r0, [r3, #14]
     174:	4388      	bics	r0, r1
     176:	3910      	subs	r1, #16
     178:	4308      	orrs	r0, r1
     17a:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     17c:	7b99      	ldrb	r1, [r3, #14]
     17e:	43b1      	bics	r1, r6
     180:	4311      	orrs	r1, r2
     182:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
     184:	2180      	movs	r1, #128	; 0x80
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
        DMAC->QOSCTRL.bit.FQOS = 2;
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     186:	7b9a      	ldrb	r2, [r3, #14]
     188:	43aa      	bics	r2, r5
     18a:	4322      	orrs	r2, r4
     18c:	739a      	strb	r2, [r3, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
     18e:	4a0e      	ldr	r2, [pc, #56]	; (1c8 <Reset_Handler+0xb0>)
     190:	6853      	ldr	r3, [r2, #4]
     192:	430b      	orrs	r3, r1
     194:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
     196:	4b0d      	ldr	r3, [pc, #52]	; (1cc <Reset_Handler+0xb4>)
     198:	4798      	blx	r3

        /* Branch to main function */
        main();
     19a:	4b0d      	ldr	r3, [pc, #52]	; (1d0 <Reset_Handler+0xb8>)
     19c:	4798      	blx	r3
     19e:	e7fe      	b.n	19e <Reset_Handler+0x86>
     1a0:	00002974 	.word	0x00002974
     1a4:	20000000 	.word	0x20000000
     1a8:	20000438 	.word	0x20000438
     1ac:	20000440 	.word	0x20000440
     1b0:	200005f0 	.word	0x200005f0
     1b4:	00000000 	.word	0x00000000
     1b8:	e000ed00 	.word	0xe000ed00
     1bc:	410070fc 	.word	0x410070fc
     1c0:	41005000 	.word	0x41005000
     1c4:	41004800 	.word	0x41004800
     1c8:	41004000 	.word	0x41004000
     1cc:	00002599 	.word	0x00002599
     1d0:	000009c1 	.word	0x000009c1

000001d4 <SystemInit>:
     1d4:	4a01      	ldr	r2, [pc, #4]	; (1dc <SystemInit+0x8>)
     1d6:	4b02      	ldr	r3, [pc, #8]	; (1e0 <SystemInit+0xc>)
     1d8:	601a      	str	r2, [r3, #0]
     1da:	4770      	bx	lr
     1dc:	000f4240 	.word	0x000f4240
     1e0:	20000000 	.word	0x20000000

000001e4 <AT25SFErace4KBlock>:
    pinHigh(cs_mem);

    delay_ms(300);
}

void AT25SFErace4KBlock(uint8_t blockToErace) {
     1e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     1e6:	2780      	movs	r7, #128	; 0x80
     1e8:	4e12      	ldr	r6, [pc, #72]	; (234 <AT25SFErace4KBlock+0x50>)
     1ea:	02ff      	lsls	r7, r7, #11

    uint32_t address = 0x001000*blockToErace;
     1ec:	0303      	lsls	r3, r0, #12

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
     1ee:	4d12      	ldr	r5, [pc, #72]	; (238 <AT25SFErace4KBlock+0x54>)
    delay_ms(300);
}

void AT25SFErace4KBlock(uint8_t blockToErace) {

    uint32_t address = 0x001000*blockToErace;
     1f0:	9301      	str	r3, [sp, #4]

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
     1f2:	2106      	movs	r1, #6
     1f4:	6177      	str	r7, [r6, #20]
     1f6:	2001      	movs	r0, #1
     1f8:	47a8      	blx	r5
     1fa:	4c10      	ldr	r4, [pc, #64]	; (23c <AT25SFErace4KBlock+0x58>)
    pinHigh(cs_mem);

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_04K_ERASE);
     1fc:	2120      	movs	r1, #32
void AT25SFErace4KBlock(uint8_t blockToErace) {

    uint32_t address = 0x001000*blockToErace;

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
     1fe:	7020      	strb	r0, [r4, #0]
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     200:	61b7      	str	r7, [r6, #24]
    pinHigh(cs_mem);

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_04K_ERASE);
     202:	2001      	movs	r0, #1
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     204:	6177      	str	r7, [r6, #20]
     206:	47a8      	blx	r5
    dummy_rx = spiDataTransfer(SPI1,((address & 0xFF0000) >> 16));
     208:	9b01      	ldr	r3, [sp, #4]
    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
    pinHigh(cs_mem);

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_04K_ERASE);
     20a:	7020      	strb	r0, [r4, #0]
    dummy_rx = spiDataTransfer(SPI1,((address & 0xFF0000) >> 16));
     20c:	0c19      	lsrs	r1, r3, #16
     20e:	2001      	movs	r0, #1
     210:	47a8      	blx	r5
    dummy_rx = spiDataTransfer(SPI1,((address & 0x00FF00) >>  8));
     212:	9b01      	ldr	r3, [sp, #4]
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
    pinHigh(cs_mem);

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_04K_ERASE);
    dummy_rx = spiDataTransfer(SPI1,((address & 0xFF0000) >> 16));
     214:	7020      	strb	r0, [r4, #0]
    dummy_rx = spiDataTransfer(SPI1,((address & 0x00FF00) >>  8));
     216:	0a18      	lsrs	r0, r3, #8
     218:	b2c1      	uxtb	r1, r0
     21a:	2001      	movs	r0, #1
     21c:	47a8      	blx	r5
    dummy_rx = spiDataTransfer(SPI1,((address & 0x0000FF) >>  0));
     21e:	2100      	movs	r1, #0
    pinHigh(cs_mem);

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_04K_ERASE);
    dummy_rx = spiDataTransfer(SPI1,((address & 0xFF0000) >> 16));
    dummy_rx = spiDataTransfer(SPI1,((address & 0x00FF00) >>  8));
     220:	7020      	strb	r0, [r4, #0]
    dummy_rx = spiDataTransfer(SPI1,((address & 0x0000FF) >>  0));
     222:	2001      	movs	r0, #1
     224:	47a8      	blx	r5
    pinHigh(cs_mem);

    delay_ms(70);
     226:	4b06      	ldr	r3, [pc, #24]	; (240 <AT25SFErace4KBlock+0x5c>)

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_04K_ERASE);
    dummy_rx = spiDataTransfer(SPI1,((address & 0xFF0000) >> 16));
    dummy_rx = spiDataTransfer(SPI1,((address & 0x00FF00) >>  8));
    dummy_rx = spiDataTransfer(SPI1,((address & 0x0000FF) >>  0));
     228:	7020      	strb	r0, [r4, #0]
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     22a:	61b7      	str	r7, [r6, #24]
    pinHigh(cs_mem);

    delay_ms(70);
     22c:	2046      	movs	r0, #70	; 0x46
     22e:	4798      	blx	r3

}
     230:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
     232:	46c0      	nop			; (mov r8, r8)
     234:	41004400 	.word	0x41004400
     238:	000016c5 	.word	0x000016c5
     23c:	20000460 	.word	0x20000460
     240:	00000ecd 	.word	0x00000ecd

00000244 <readMS5803AdcResults>:
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     244:	2280      	movs	r2, #128	; 0x80
     246:	4b28      	ldr	r3, [pc, #160]	; (2e8 <readMS5803AdcResults+0xa4>)
     248:	0212      	lsls	r2, r2, #8
#include <MS5803.h>
#include <boardDefines.h>
#include <math.h>


u32_t readMS5803AdcResults() {
     24a:	b5f0      	push	{r4, r5, r6, r7, lr}
     24c:	615a      	str	r2, [r3, #20]
    pinLow(cs_baro);
//    dummy_rx = spiDataTransfer(SPI1, cmdAdcRead_);
//    u8_t _byte1 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte2 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte3 = spiDataTransfer(SPI1,dummy_tx);
    byteOut(spi2SCK,spi2MOSI, cmdAdcRead_);
     24e:	2300      	movs	r3, #0
     250:	4d26      	ldr	r5, [pc, #152]	; (2ec <readMS5803AdcResults+0xa8>)
#include <MS5803.h>
#include <boardDefines.h>
#include <math.h>


u32_t readMS5803AdcResults() {
     252:	b087      	sub	sp, #28
    pinLow(cs_baro);
//    dummy_rx = spiDataTransfer(SPI1, cmdAdcRead_);
//    u8_t _byte1 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte2 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte3 = spiDataTransfer(SPI1,dummy_tx);
    byteOut(spi2SCK,spi2MOSI, cmdAdcRead_);
     254:	9300      	str	r3, [sp, #0]
     256:	786b      	ldrb	r3, [r5, #1]
     258:	7828      	ldrb	r0, [r5, #0]
     25a:	78aa      	ldrb	r2, [r5, #2]
     25c:	021b      	lsls	r3, r3, #8
     25e:	4303      	orrs	r3, r0
     260:	0412      	lsls	r2, r2, #16
     262:	0019      	movs	r1, r3
     264:	0013      	movs	r3, r2
     266:	430b      	orrs	r3, r1
     268:	79a9      	ldrb	r1, [r5, #6]
     26a:	796f      	ldrb	r7, [r5, #5]
     26c:	79ec      	ldrb	r4, [r5, #7]
     26e:	0209      	lsls	r1, r1, #8
     270:	4339      	orrs	r1, r7
     272:	0424      	lsls	r4, r4, #16
     274:	0008      	movs	r0, r1
     276:	0021      	movs	r1, r4
     278:	7a2c      	ldrb	r4, [r5, #8]
     27a:	78ea      	ldrb	r2, [r5, #3]
     27c:	7a6f      	ldrb	r7, [r5, #9]
     27e:	4301      	orrs	r1, r0
     280:	0624      	lsls	r4, r4, #24
     282:	430c      	orrs	r4, r1
     284:	0612      	lsls	r2, r2, #24
     286:	431a      	orrs	r2, r3
     288:	0020      	movs	r0, r4
     28a:	792b      	ldrb	r3, [r5, #4]
     28c:	0039      	movs	r1, r7
     28e:	4e18      	ldr	r6, [pc, #96]	; (2f0 <readMS5803AdcResults+0xac>)
     290:	47b0      	blx	r6
    u8_t _byte1 = byteIn(spi2SCK,spi2MISO);
     292:	7aeb      	ldrb	r3, [r5, #11]
     294:	7aa9      	ldrb	r1, [r5, #10]
     296:	021b      	lsls	r3, r3, #8
     298:	430b      	orrs	r3, r1
     29a:	001a      	movs	r2, r3
     29c:	7b2b      	ldrb	r3, [r5, #12]
     29e:	4e15      	ldr	r6, [pc, #84]	; (2f4 <readMS5803AdcResults+0xb0>)
     2a0:	041b      	lsls	r3, r3, #16
     2a2:	4313      	orrs	r3, r2
     2a4:	7b6a      	ldrb	r2, [r5, #13]
     2a6:	7bad      	ldrb	r5, [r5, #14]
     2a8:	0612      	lsls	r2, r2, #24
     2aa:	431a      	orrs	r2, r3
     2ac:	0039      	movs	r1, r7
     2ae:	002b      	movs	r3, r5
     2b0:	0020      	movs	r0, r4
     2b2:	9203      	str	r2, [sp, #12]
     2b4:	47b0      	blx	r6
    u8_t _byte2 = byteIn(spi2SCK,spi2MISO);
     2b6:	9a03      	ldr	r2, [sp, #12]
//    dummy_rx = spiDataTransfer(SPI1, cmdAdcRead_);
//    u8_t _byte1 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte2 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte3 = spiDataTransfer(SPI1,dummy_tx);
    byteOut(spi2SCK,spi2MOSI, cmdAdcRead_);
    u8_t _byte1 = byteIn(spi2SCK,spi2MISO);
     2b8:	9004      	str	r0, [sp, #16]
    u8_t _byte2 = byteIn(spi2SCK,spi2MISO);
     2ba:	002b      	movs	r3, r5
     2bc:	0039      	movs	r1, r7
     2be:	0020      	movs	r0, r4
     2c0:	47b0      	blx	r6
    u8_t _byte3 = byteIn(spi2SCK,spi2MISO);
     2c2:	9a03      	ldr	r2, [sp, #12]
//    u8_t _byte1 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte2 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte3 = spiDataTransfer(SPI1,dummy_tx);
    byteOut(spi2SCK,spi2MOSI, cmdAdcRead_);
    u8_t _byte1 = byteIn(spi2SCK,spi2MISO);
    u8_t _byte2 = byteIn(spi2SCK,spi2MISO);
     2c4:	9005      	str	r0, [sp, #20]
    u8_t _byte3 = byteIn(spi2SCK,spi2MISO);
     2c6:	002b      	movs	r3, r5
     2c8:	0020      	movs	r0, r4
     2ca:	0039      	movs	r1, r7
     2cc:	47b0      	blx	r6
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     2ce:	2280      	movs	r2, #128	; 0x80
     2d0:	4b05      	ldr	r3, [pc, #20]	; (2e8 <readMS5803AdcResults+0xa4>)
     2d2:	0212      	lsls	r2, r2, #8
     2d4:	619a      	str	r2, [r3, #24]
    pinHigh(cs_baro);

    u32_t _receive = (_byte1 << 16) | (_byte2 << 8) | (_byte3);
    return _receive;
     2d6:	9b04      	ldr	r3, [sp, #16]
     2d8:	9a05      	ldr	r2, [sp, #20]
     2da:	041b      	lsls	r3, r3, #16
     2dc:	0215      	lsls	r5, r2, #8
     2de:	431d      	orrs	r5, r3
     2e0:	4328      	orrs	r0, r5
}
     2e2:	b007      	add	sp, #28
     2e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
     2e6:	46c0      	nop			; (mov r8, r8)
     2e8:	41004400 	.word	0x41004400
     2ec:	0000279c 	.word	0x0000279c
     2f0:	00000be9 	.word	0x00000be9
     2f4:	00000c55 	.word	0x00000c55

000002f8 <ConvertPressureTemperature>:

void ConvertPressureTemperature(Barometer *my_barometer) {
     2f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    volatile const u16_t C1 = my_barometer->coefficients_[0];
    volatile const u16_t C2 = my_barometer->coefficients_[1];
    volatile const u16_t C3 = my_barometer->coefficients_[2];
    volatile const u16_t C4 = my_barometer->coefficients_[3];
     2fa:	240a      	movs	r4, #10

    u32_t _receive = (_byte1 << 16) | (_byte2 << 8) | (_byte3);
    return _receive;
}

void ConvertPressureTemperature(Barometer *my_barometer) {
     2fc:	b08d      	sub	sp, #52	; 0x34
    volatile const u16_t C1 = my_barometer->coefficients_[0];
     2fe:	8803      	ldrh	r3, [r0, #0]
     300:	aa04      	add	r2, sp, #16
     302:	8093      	strh	r3, [r2, #4]
    volatile const u16_t C2 = my_barometer->coefficients_[1];
     304:	8843      	ldrh	r3, [r0, #2]
    volatile const u16_t C3 = my_barometer->coefficients_[2];
    volatile const u16_t C4 = my_barometer->coefficients_[3];
     306:	18a4      	adds	r4, r4, r2
    return _receive;
}

void ConvertPressureTemperature(Barometer *my_barometer) {
    volatile const u16_t C1 = my_barometer->coefficients_[0];
    volatile const u16_t C2 = my_barometer->coefficients_[1];
     308:	80d3      	strh	r3, [r2, #6]
    volatile const u16_t C3 = my_barometer->coefficients_[2];
     30a:	8883      	ldrh	r3, [r0, #4]
    return _receive;
}

void ConvertPressureTemperature(Barometer *my_barometer) {
    volatile const u16_t C1 = my_barometer->coefficients_[0];
    volatile const u16_t C2 = my_barometer->coefficients_[1];
     30c:	1d95      	adds	r5, r2, #6
    volatile const u16_t C3 = my_barometer->coefficients_[2];
     30e:	8113      	strh	r3, [r2, #8]
    volatile const u16_t C4 = my_barometer->coefficients_[3];
     310:	88c3      	ldrh	r3, [r0, #6]
     312:	9401      	str	r4, [sp, #4]
     314:	8023      	strh	r3, [r4, #0]
    volatile const u16_t C5 = my_barometer->coefficients_[4];
     316:	8903      	ldrh	r3, [r0, #8]
     318:	aa07      	add	r2, sp, #28
     31a:	8013      	strh	r3, [r2, #0]
    volatile const u16_t C6 = my_barometer->coefficients_[5];
     31c:	230e      	movs	r3, #14

    u32_t _receive = (_byte1 << 16) | (_byte2 << 8) | (_byte3);
    return _receive;
}

void ConvertPressureTemperature(Barometer *my_barometer) {
     31e:	0007      	movs	r7, r0
    volatile const u16_t C1 = my_barometer->coefficients_[0];
    volatile const u16_t C2 = my_barometer->coefficients_[1];
    volatile const u16_t C3 = my_barometer->coefficients_[2];
    volatile const u16_t C4 = my_barometer->coefficients_[3];
    volatile const u16_t C5 = my_barometer->coefficients_[4];
    volatile const u16_t C6 = my_barometer->coefficients_[5];
     320:	8941      	ldrh	r1, [r0, #10]
     322:	a804      	add	r0, sp, #16
     324:	181b      	adds	r3, r3, r0
     326:	8019      	strh	r1, [r3, #0]

    // calculate 1st order pressure and temperature (MS5607 1st order algorithm)
    const  int32_t dT = (my_barometer->rawTempatureData) - ((int32_t)C5 << 8);
     328:	8816      	ldrh	r6, [r2, #0]
    my_barometer->temperatureCelcus  = 2000 + (((int64_t)dT * C6) >> 32) ;
     32a:	693a      	ldr	r2, [r7, #16]
     32c:	0236      	lsls	r6, r6, #8
     32e:	8818      	ldrh	r0, [r3, #0]
     330:	1b96      	subs	r6, r2, r6
     332:	17f2      	asrs	r2, r6, #31
     334:	4c2a      	ldr	r4, [pc, #168]	; (3e0 <ConvertPressureTemperature+0xe8>)
     336:	9203      	str	r2, [sp, #12]
     338:	17f3      	asrs	r3, r6, #31
     33a:	0032      	movs	r2, r6
     33c:	b280      	uxth	r0, r0
     33e:	2100      	movs	r1, #0
     340:	47a0      	blx	r4
     342:	23fa      	movs	r3, #250	; 0xfa
     344:	00db      	lsls	r3, r3, #3
     346:	18c9      	adds	r1, r1, r3

    volatile const  int64_t OFF   = ((int64_t)C2 << 16) + (((C4 * (int64_t)dT)) >> 7);
     348:	882b      	ldrh	r3, [r5, #0]
    volatile const u16_t C5 = my_barometer->coefficients_[4];
    volatile const u16_t C6 = my_barometer->coefficients_[5];

    // calculate 1st order pressure and temperature (MS5607 1st order algorithm)
    const  int32_t dT = (my_barometer->rawTempatureData) - ((int32_t)C5 << 8);
    my_barometer->temperatureCelcus  = 2000 + (((int64_t)dT * C6) >> 32) ;
     34a:	6179      	str	r1, [r7, #20]

    volatile const  int64_t OFF   = ((int64_t)C2 << 16) + (((C4 * (int64_t)dT)) >> 7);
     34c:	b29b      	uxth	r3, r3
     34e:	9302      	str	r3, [sp, #8]
     350:	9b01      	ldr	r3, [sp, #4]
     352:	0032      	movs	r2, r6
     354:	8818      	ldrh	r0, [r3, #0]
     356:	2100      	movs	r1, #0
     358:	17f3      	asrs	r3, r6, #31
     35a:	b280      	uxth	r0, r0
     35c:	47a0      	blx	r4
     35e:	064b      	lsls	r3, r1, #25
     360:	09c4      	lsrs	r4, r0, #7
     362:	431c      	orrs	r4, r3
     364:	2300      	movs	r3, #0
     366:	11cd      	asrs	r5, r1, #7
     368:	9902      	ldr	r1, [sp, #8]
     36a:	040a      	lsls	r2, r1, #16
     36c:	1912      	adds	r2, r2, r4
     36e:	416b      	adcs	r3, r5
     370:	9208      	str	r2, [sp, #32]
     372:	9309      	str	r3, [sp, #36]	; 0x24
    volatile const  int64_t SENS  =  ((int64_t)C1 << 15) + (((C3 * (int64_t)dT)) >> 8);
     374:	ab04      	add	r3, sp, #16
     376:	889c      	ldrh	r4, [r3, #4]
     378:	8918      	ldrh	r0, [r3, #8]
     37a:	0032      	movs	r2, r6
     37c:	9b03      	ldr	r3, [sp, #12]
     37e:	4d18      	ldr	r5, [pc, #96]	; (3e0 <ConvertPressureTemperature+0xe8>)
     380:	b280      	uxth	r0, r0
     382:	2100      	movs	r1, #0
     384:	47a8      	blx	r5
     386:	060b      	lsls	r3, r1, #24
     388:	0a05      	lsrs	r5, r0, #8
     38a:	431d      	orrs	r5, r3
     38c:	2300      	movs	r3, #0
     38e:	b2a4      	uxth	r4, r4
     390:	120e      	asrs	r6, r1, #8
     392:	03e2      	lsls	r2, r4, #15
     394:	1952      	adds	r2, r2, r5
     396:	4173      	adcs	r3, r6
     398:	920a      	str	r2, [sp, #40]	; 0x28
     39a:	930b      	str	r3, [sp, #44]	; 0x2c
    my_barometer->pressureMbar = (((my_barometer->rawPressureData * SENS) / 2097152) - OFF) / 32768;
     39c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
     39e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
     3a0:	9c08      	ldr	r4, [sp, #32]
     3a2:	9d09      	ldr	r5, [sp, #36]	; 0x24
     3a4:	4e0e      	ldr	r6, [pc, #56]	; (3e0 <ConvertPressureTemperature+0xe8>)
     3a6:	68f8      	ldr	r0, [r7, #12]
     3a8:	2100      	movs	r1, #0
     3aa:	47b0      	blx	r6
     3ac:	2300      	movs	r3, #0
     3ae:	17ce      	asrs	r6, r1, #31
     3b0:	02f6      	lsls	r6, r6, #11
     3b2:	0af2      	lsrs	r2, r6, #11
     3b4:	1880      	adds	r0, r0, r2
     3b6:	4159      	adcs	r1, r3
     3b8:	02ce      	lsls	r6, r1, #11
     3ba:	0d42      	lsrs	r2, r0, #21
     3bc:	4332      	orrs	r2, r6
     3be:	154b      	asrs	r3, r1, #21
     3c0:	1b12      	subs	r2, r2, r4
     3c2:	41ab      	sbcs	r3, r5
     3c4:	2100      	movs	r1, #0
     3c6:	17dc      	asrs	r4, r3, #31
     3c8:	0464      	lsls	r4, r4, #17
     3ca:	0c60      	lsrs	r0, r4, #17
     3cc:	1812      	adds	r2, r2, r0
     3ce:	414b      	adcs	r3, r1
     3d0:	0011      	movs	r1, r2
     3d2:	045b      	lsls	r3, r3, #17
     3d4:	0bca      	lsrs	r2, r1, #15
     3d6:	431a      	orrs	r2, r3
     3d8:	61fa      	str	r2, [r7, #28]
}
     3da:	b00d      	add	sp, #52	; 0x34
     3dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
     3de:	46c0      	nop			; (mov r8, r8)
     3e0:	00001705 	.word	0x00001705

000003e4 <pascalToCent>:
        748275, 767202, 786555, 806356, 826627,
        847395, 868688, 890537, 912974, 936037,
        959766, 984206
    };

    my_barometer->pressurePa = my_barometer->pressureMbar *10;
     3e4:	220a      	movs	r2, #10
     3e6:	69c3      	ldr	r3, [r0, #28]
    double altFeet = (1-pow((my_barometer->pressurePa/1013.25),(0.190284)))*145366.45;
    my_barometer->heightFeet = (float)altFeet;

}

void pascalToCent(Barometer *my_barometer) {
     3e8:	b570      	push	{r4, r5, r6, lr}
        748275, 767202, 786555, 806356, 826627,
        847395, 868688, 890537, 912974, 936037,
        959766, 984206
    };

    my_barometer->pressurePa = my_barometer->pressureMbar *10;
     3ea:	435a      	muls	r2, r3

    if (my_barometer->pressurePa > PA_INIT)
     3ec:	4c0e      	ldr	r4, [pc, #56]	; (428 <pascalToCent+0x44>)
        748275, 767202, 786555, 806356, 826627,
        847395, 868688, 890537, 912974, 936037,
        959766, 984206
    };

    my_barometer->pressurePa = my_barometer->pressureMbar *10;
     3ee:	6182      	str	r2, [r0, #24]

    if (my_barometer->pressurePa > PA_INIT)
     3f0:	42a2      	cmp	r2, r4
     3f2:	d901      	bls.n	3f8 <pascalToCent+0x14>
        my_barometer->heightCm = lookupTable[0];
     3f4:	4b0d      	ldr	r3, [pc, #52]	; (42c <pascalToCent+0x48>)
     3f6:	e015      	b.n	424 <pascalToCent+0x40>
    else {
        const int32_t inx = (PA_INIT - my_barometer->pressurePa) >> 10;
     3f8:	1aa3      	subs	r3, r4, r2
     3fa:	0a9b      	lsrs	r3, r3, #10
        if (inx >= PZLUT_ENTRIES - 1)
     3fc:	2b4b      	cmp	r3, #75	; 0x4b
     3fe:	d901      	bls.n	404 <pascalToCent+0x20>
            my_barometer->heightCm = lookupTable[PZLUT_ENTRIES - 1];
     400:	4b0b      	ldr	r3, [pc, #44]	; (430 <pascalToCent+0x4c>)
     402:	e00f      	b.n	424 <pascalToCent+0x40>
        else {
            const int32_t pa1 = PA_INIT - (inx << 10);
            const int32_t z1 = lookupTable[inx];
     404:	4d0b      	ldr	r5, [pc, #44]	; (434 <pascalToCent+0x50>)
     406:	0099      	lsls	r1, r3, #2
            const int32_t z2 = lookupTable[inx + 1];
            my_barometer->heightCm = (z1 + (((pa1 - my_barometer->pressurePa) * (z2 - z1)) >> 10));
     408:	029e      	lsls	r6, r3, #10
        if (inx >= PZLUT_ENTRIES - 1)
            my_barometer->heightCm = lookupTable[PZLUT_ENTRIES - 1];
        else {
            const int32_t pa1 = PA_INIT - (inx << 10);
            const int32_t z1 = lookupTable[inx];
            const int32_t z2 = lookupTable[inx + 1];
     40a:	3301      	adds	r3, #1
     40c:	009b      	lsls	r3, r3, #2
     40e:	18eb      	adds	r3, r5, r3
        const int32_t inx = (PA_INIT - my_barometer->pressurePa) >> 10;
        if (inx >= PZLUT_ENTRIES - 1)
            my_barometer->heightCm = lookupTable[PZLUT_ENTRIES - 1];
        else {
            const int32_t pa1 = PA_INIT - (inx << 10);
            const int32_t z1 = lookupTable[inx];
     410:	1869      	adds	r1, r5, r1
            const int32_t z2 = lookupTable[inx + 1];
            my_barometer->heightCm = (z1 + (((pa1 - my_barometer->pressurePa) * (z2 - z1)) >> 10));
     412:	1ba4      	subs	r4, r4, r6
        const int32_t inx = (PA_INIT - my_barometer->pressurePa) >> 10;
        if (inx >= PZLUT_ENTRIES - 1)
            my_barometer->heightCm = lookupTable[PZLUT_ENTRIES - 1];
        else {
            const int32_t pa1 = PA_INIT - (inx << 10);
            const int32_t z1 = lookupTable[inx];
     414:	6909      	ldr	r1, [r1, #16]
            const int32_t z2 = lookupTable[inx + 1];
            my_barometer->heightCm = (z1 + (((pa1 - my_barometer->pressurePa) * (z2 - z1)) >> 10));
     416:	1aa4      	subs	r4, r4, r2
     418:	691a      	ldr	r2, [r3, #16]
     41a:	1a52      	subs	r2, r2, r1
     41c:	0013      	movs	r3, r2
     41e:	4363      	muls	r3, r4
     420:	0a9b      	lsrs	r3, r3, #10
     422:	185b      	adds	r3, r3, r1
     424:	6203      	str	r3, [r0, #32]
        }
    }
}
     426:	bd70      	pop	{r4, r5, r6, pc}
     428:	000199cc 	.word	0x000199cc
     42c:	ffff8d20 	.word	0xffff8d20
     430:	000f048e 	.word	0x000f048e
     434:	0000279c 	.word	0x0000279c

00000438 <readMS5803Coefficients>:

void readMS5803Coefficients(Barometer *my_barometer) {
     438:	b5f0      	push	{r4, r5, r6, r7, lr}
     43a:	27a2      	movs	r7, #162	; 0xa2
     43c:	b087      	sub	sp, #28
     43e:	9002      	str	r0, [sp, #8]

    u8_t dummy_tx = 0xFF;
    u8_t dummy_rx;

    for (u8_t coeff_num = 0; coeff_num < 6 ; ++coeff_num ) {
        delay_us(600);
     440:	2096      	movs	r0, #150	; 0x96
     442:	4c2b      	ldr	r4, [pc, #172]	; (4f0 <readMS5803Coefficients+0xb8>)
     444:	0080      	lsls	r0, r0, #2
     446:	47a0      	blx	r4
        u8_t _cmd = MS5803_CMD_PROM_READ + ((coeff_num+1)*2);
        delay_us(600);
     448:	2096      	movs	r0, #150	; 0x96
     44a:	0080      	lsls	r0, r0, #2
     44c:	47a0      	blx	r4
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     44e:	2280      	movs	r2, #128	; 0x80
        pinLow(cs_baro);
//      dummy_rx = spiDataTransfer(SPI1, _cmd);
//      u8_t _byte1 = spiDataTransfer(SPI1,dummy_tx);
//      u8_t _byte2 = spiDataTransfer(SPI1,dummy_tx);
        byteOut(spi2SCK,spi2MOSI, _cmd);
     450:	4c28      	ldr	r4, [pc, #160]	; (4f4 <readMS5803Coefficients+0xbc>)
     452:	4b29      	ldr	r3, [pc, #164]	; (4f8 <readMS5803Coefficients+0xc0>)
     454:	0212      	lsls	r2, r2, #8
     456:	615a      	str	r2, [r3, #20]
     458:	7863      	ldrb	r3, [r4, #1]
     45a:	7820      	ldrb	r0, [r4, #0]
     45c:	78a2      	ldrb	r2, [r4, #2]
     45e:	021b      	lsls	r3, r3, #8
     460:	4303      	orrs	r3, r0
     462:	0412      	lsls	r2, r2, #16
     464:	0019      	movs	r1, r3
     466:	0013      	movs	r3, r2
     468:	430b      	orrs	r3, r1
     46a:	79a1      	ldrb	r1, [r4, #6]
     46c:	7966      	ldrb	r6, [r4, #5]
     46e:	0209      	lsls	r1, r1, #8
     470:	4331      	orrs	r1, r6
     472:	0008      	movs	r0, r1
     474:	79e1      	ldrb	r1, [r4, #7]
     476:	78e2      	ldrb	r2, [r4, #3]
     478:	0409      	lsls	r1, r1, #16
     47a:	4301      	orrs	r1, r0
     47c:	7a20      	ldrb	r0, [r4, #8]
     47e:	7a66      	ldrb	r6, [r4, #9]
     480:	0612      	lsls	r2, r2, #24
     482:	0600      	lsls	r0, r0, #24
     484:	4308      	orrs	r0, r1
     486:	431a      	orrs	r2, r3
     488:	9700      	str	r7, [sp, #0]
     48a:	7923      	ldrb	r3, [r4, #4]
     48c:	0031      	movs	r1, r6
     48e:	4d1b      	ldr	r5, [pc, #108]	; (4fc <readMS5803Coefficients+0xc4>)
     490:	9003      	str	r0, [sp, #12]
     492:	47a8      	blx	r5
        u8_t _byte1 = byteIn(spi2SCK,spi2MISO);
     494:	7ae3      	ldrb	r3, [r4, #11]
     496:	0020      	movs	r0, r4
     498:	7aa1      	ldrb	r1, [r4, #10]
     49a:	7b24      	ldrb	r4, [r4, #12]
     49c:	021b      	lsls	r3, r3, #8
     49e:	430b      	orrs	r3, r1
     4a0:	0424      	lsls	r4, r4, #16
     4a2:	001a      	movs	r2, r3
     4a4:	0023      	movs	r3, r4
     4a6:	7b44      	ldrb	r4, [r0, #13]
     4a8:	7b85      	ldrb	r5, [r0, #14]
     4aa:	4313      	orrs	r3, r2
     4ac:	0624      	lsls	r4, r4, #24
     4ae:	431c      	orrs	r4, r3
     4b0:	0022      	movs	r2, r4
     4b2:	002b      	movs	r3, r5
     4b4:	9404      	str	r4, [sp, #16]
     4b6:	0031      	movs	r1, r6
     4b8:	4c11      	ldr	r4, [pc, #68]	; (500 <readMS5803Coefficients+0xc8>)
     4ba:	9803      	ldr	r0, [sp, #12]
     4bc:	47a0      	blx	r4
        u8_t _byte2 = byteIn(spi2SCK,spi2MISO);
     4be:	002b      	movs	r3, r5
        pinLow(cs_baro);
//      dummy_rx = spiDataTransfer(SPI1, _cmd);
//      u8_t _byte1 = spiDataTransfer(SPI1,dummy_tx);
//      u8_t _byte2 = spiDataTransfer(SPI1,dummy_tx);
        byteOut(spi2SCK,spi2MOSI, _cmd);
        u8_t _byte1 = byteIn(spi2SCK,spi2MISO);
     4c0:	9005      	str	r0, [sp, #20]
        u8_t _byte2 = byteIn(spi2SCK,spi2MISO);
     4c2:	9a04      	ldr	r2, [sp, #16]
     4c4:	9803      	ldr	r0, [sp, #12]
     4c6:	0031      	movs	r1, r6
     4c8:	4c0d      	ldr	r4, [pc, #52]	; (500 <readMS5803Coefficients+0xc8>)
     4ca:	47a0      	blx	r4
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     4cc:	2280      	movs	r2, #128	; 0x80
     4ce:	4b0a      	ldr	r3, [pc, #40]	; (4f8 <readMS5803Coefficients+0xc0>)
     4d0:	0212      	lsls	r2, r2, #8
     4d2:	619a      	str	r2, [r3, #24]
        pinHigh(cs_baro);
        my_barometer->coefficients_[coeff_num] = (_byte1 << 8) | _byte2;
     4d4:	9b05      	ldr	r3, [sp, #20]
     4d6:	021d      	lsls	r5, r3, #8
     4d8:	9b02      	ldr	r3, [sp, #8]
     4da:	4328      	orrs	r0, r5
     4dc:	8018      	strh	r0, [r3, #0]
     4de:	1cbb      	adds	r3, r7, #2
     4e0:	b2df      	uxtb	r7, r3
     4e2:	9b02      	ldr	r3, [sp, #8]
     4e4:	3302      	adds	r3, #2
     4e6:	9302      	str	r3, [sp, #8]
void readMS5803Coefficients(Barometer *my_barometer) {

    u8_t dummy_tx = 0xFF;
    u8_t dummy_rx;

    for (u8_t coeff_num = 0; coeff_num < 6 ; ++coeff_num ) {
     4e8:	2fae      	cmp	r7, #174	; 0xae
     4ea:	d1a9      	bne.n	440 <readMS5803Coefficients+0x8>
        u8_t _byte2 = byteIn(spi2SCK,spi2MISO);
        pinHigh(cs_baro);
        my_barometer->coefficients_[coeff_num] = (_byte1 << 8) | _byte2;
    }

}
     4ec:	b007      	add	sp, #28
     4ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
     4f0:	00000e9d 	.word	0x00000e9d
     4f4:	0000279c 	.word	0x0000279c
     4f8:	41004400 	.word	0x41004400
     4fc:	00000be9 	.word	0x00000be9
     500:	00000c55 	.word	0x00000c55

00000504 <initMS5803Barometer>:

void initMS5803Barometer(Barometer *my_barometer) {
     504:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     506:	2680      	movs	r6, #128	; 0x80
    u8_t dummy_tx = 0xFF;
    u8_t dummy_rx;

    pinLow(cs_baro);
//   dummy_rx = spiDataTransfer(SPI1, MS5803_CMD_RES);
    byteOut(spi2SCK,spi2MOSI, MS5803_CMD_RES);
     508:	231e      	movs	r3, #30
     50a:	491a      	ldr	r1, [pc, #104]	; (574 <initMS5803Barometer+0x70>)
     50c:	4d1a      	ldr	r5, [pc, #104]	; (578 <initMS5803Barometer+0x74>)
     50e:	0236      	lsls	r6, r6, #8
     510:	616e      	str	r6, [r5, #20]
     512:	9300      	str	r3, [sp, #0]
     514:	784b      	ldrb	r3, [r1, #1]
     516:	780a      	ldrb	r2, [r1, #0]
     518:	021b      	lsls	r3, r3, #8
     51a:	4313      	orrs	r3, r2
     51c:	788a      	ldrb	r2, [r1, #2]
        my_barometer->coefficients_[coeff_num] = (_byte1 << 8) | _byte2;
    }

}

void initMS5803Barometer(Barometer *my_barometer) {
     51e:	0004      	movs	r4, r0
    u8_t dummy_tx = 0xFF;
    u8_t dummy_rx;

    pinLow(cs_baro);
//   dummy_rx = spiDataTransfer(SPI1, MS5803_CMD_RES);
    byteOut(spi2SCK,spi2MOSI, MS5803_CMD_RES);
     520:	0412      	lsls	r2, r2, #16
     522:	0018      	movs	r0, r3
     524:	0013      	movs	r3, r2
     526:	78ca      	ldrb	r2, [r1, #3]
     528:	4303      	orrs	r3, r0
     52a:	0612      	lsls	r2, r2, #24
     52c:	1d4f      	adds	r7, r1, #5
     52e:	431a      	orrs	r2, r3
     530:	7948      	ldrb	r0, [r1, #5]
     532:	790b      	ldrb	r3, [r1, #4]
     534:	7989      	ldrb	r1, [r1, #6]
     536:	0209      	lsls	r1, r1, #8
     538:	4301      	orrs	r1, r0
     53a:	78b8      	ldrb	r0, [r7, #2]
     53c:	0400      	lsls	r0, r0, #16
     53e:	4301      	orrs	r1, r0
     540:	78f8      	ldrb	r0, [r7, #3]
     542:	0600      	lsls	r0, r0, #24
     544:	4308      	orrs	r0, r1
     546:	7939      	ldrb	r1, [r7, #4]
     548:	4f0c      	ldr	r7, [pc, #48]	; (57c <initMS5803Barometer+0x78>)
     54a:	47b8      	blx	r7
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     54c:	61ae      	str	r6, [r5, #24]
    pinHigh(cs_baro);
    delay_ms(200);
     54e:	20c8      	movs	r0, #200	; 0xc8
     550:	4b0b      	ldr	r3, [pc, #44]	; (580 <initMS5803Barometer+0x7c>)
     552:	4798      	blx	r3
    readMS5803Coefficients(my_barometer);
     554:	0020      	movs	r0, r4
     556:	4b0b      	ldr	r3, [pc, #44]	; (584 <initMS5803Barometer+0x80>)
     558:	4798      	blx	r3

    my_barometer->heightCm = 4000;
     55a:	23fa      	movs	r3, #250	; 0xfa
     55c:	011b      	lsls	r3, r3, #4
     55e:	6223      	str	r3, [r4, #32]
    my_barometer->pressurePa = 10000;
     560:	4b09      	ldr	r3, [pc, #36]	; (588 <initMS5803Barometer+0x84>)
     562:	61a3      	str	r3, [r4, #24]
    my_barometer->rawPressureData = 4311550;
     564:	4b09      	ldr	r3, [pc, #36]	; (58c <initMS5803Barometer+0x88>)
     566:	60e3      	str	r3, [r4, #12]
    my_barometer->rawTempatureData = 8387300;
     568:	4b09      	ldr	r3, [pc, #36]	; (590 <initMS5803Barometer+0x8c>)
     56a:	6123      	str	r3, [r4, #16]
    my_barometer->temperatureCelcus = 2000;
     56c:	23fa      	movs	r3, #250	; 0xfa
     56e:	00db      	lsls	r3, r3, #3
     570:	6163      	str	r3, [r4, #20]




}
     572:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
     574:	0000279c 	.word	0x0000279c
     578:	41004400 	.word	0x41004400
     57c:	00000be9 	.word	0x00000be9
     580:	00000ecd 	.word	0x00000ecd
     584:	00000439 	.word	0x00000439
     588:	00002710 	.word	0x00002710
     58c:	0041c9fe 	.word	0x0041c9fe
     590:	007ffae4 	.word	0x007ffae4

00000594 <init>:
#include "math.h"




void init() {
     594:	b5f0      	push	{r4, r5, r6, r7, lr}
    SystemInit();
     596:	4bbf      	ldr	r3, [pc, #764]	; (894 <init+0x300>)
#include "math.h"




void init() {
     598:	b085      	sub	sp, #20
    SystemInit();
     59a:	4798      	blx	r3
    GclkInit();
     59c:	4bbe      	ldr	r3, [pc, #760]	; (898 <init+0x304>)
     59e:	4798      	blx	r3
    RtcInit();
     5a0:	4bbe      	ldr	r3, [pc, #760]	; (89c <init+0x308>)
     5a2:	4798      	blx	r3
    delayInit();
     5a4:	4bbe      	ldr	r3, [pc, #760]	; (8a0 <init+0x30c>)
     5a6:	4798      	blx	r3
    adcInit();
     5a8:	4bbe      	ldr	r3, [pc, #760]	; (8a4 <init+0x310>)
     5aa:	4798      	blx	r3
    dmaInit();
     5ac:	4bbe      	ldr	r3, [pc, #760]	; (8a8 <init+0x314>)
     5ae:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     5b0:	2240      	movs	r2, #64	; 0x40
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     5b2:	21c1      	movs	r1, #193	; 0xc1

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     5b4:	4bbd      	ldr	r3, [pc, #756]	; (8ac <init+0x318>)
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     5b6:	0089      	lsls	r1, r1, #2

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     5b8:	601a      	str	r2, [r3, #0]
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     5ba:	5858      	ldr	r0, [r3, r1]
     5bc:	4abc      	ldr	r2, [pc, #752]	; (8b0 <init+0x31c>)
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     5be:	2401      	movs	r4, #1
     5c0:	4002      	ands	r2, r0
     5c2:	505a      	str	r2, [r3, r1]
     5c4:	4bbb      	ldr	r3, [pc, #748]	; (8b4 <init+0x320>)

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     5c6:	2510      	movs	r5, #16
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     5c8:	0019      	movs	r1, r3
     5ca:	3154      	adds	r1, #84	; 0x54
     5cc:	780a      	ldrb	r2, [r1, #0]

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     5ce:	0018      	movs	r0, r3
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     5d0:	43a2      	bics	r2, r4
     5d2:	700a      	strb	r2, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     5d4:	2280      	movs	r2, #128	; 0x80
     5d6:	0352      	lsls	r2, r2, #13
     5d8:	609a      	str	r2, [r3, #8]

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     5da:	220f      	movs	r2, #15
     5dc:	3033      	adds	r0, #51	; 0x33
     5de:	7801      	ldrb	r1, [r0, #0]
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     5e0:	001e      	movs	r6, r3

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     5e2:	4391      	bics	r1, r2
     5e4:	4321      	orrs	r1, r4
     5e6:	7001      	strb	r1, [r0, #0]
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     5e8:	7cc1      	ldrb	r1, [r0, #19]
     5ea:	36c3      	adds	r6, #195	; 0xc3
     5ec:	4321      	orrs	r1, r4
     5ee:	74c1      	strb	r1, [r0, #19]

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     5f0:	0019      	movs	r1, r3
     5f2:	31b1      	adds	r1, #177	; 0xb1
     5f4:	7808      	ldrb	r0, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     5f6:	001f      	movs	r7, r3

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     5f8:	4010      	ands	r0, r2
     5fa:	4328      	orrs	r0, r5
     5fc:	7008      	strb	r0, [r1, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     5fe:	7830      	ldrb	r0, [r6, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     600:	3788      	adds	r7, #136	; 0x88
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     602:	4320      	orrs	r0, r4
     604:	7030      	strb	r0, [r6, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     606:	7808      	ldrb	r0, [r1, #0]
     608:	4010      	ands	r0, r2
     60a:	4328      	orrs	r0, r5
     60c:	7008      	strb	r0, [r1, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     60e:	7830      	ldrb	r0, [r6, #0]
     610:	4320      	orrs	r0, r4
     612:	7030      	strb	r0, [r6, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     614:	7d30      	ldrb	r0, [r6, #20]
     616:	43a0      	bics	r0, r4
     618:	7530      	strb	r0, [r6, #20]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     61a:	2080      	movs	r0, #128	; 0x80
     61c:	0400      	lsls	r0, r0, #16
     61e:	9703      	str	r7, [sp, #12]
     620:	6038      	str	r0, [r7, #0]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     622:	60f8      	str	r0, [r7, #12]

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     624:	7808      	ldrb	r0, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     626:	003e      	movs	r6, r7

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     628:	4390      	bics	r0, r2
     62a:	4320      	orrs	r0, r4
     62c:	7008      	strb	r0, [r1, #0]
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     62e:	20c2      	movs	r0, #194	; 0xc2
     630:	4684      	mov	ip, r0
     632:	449c      	add	ip, r3
     634:	4660      	mov	r0, ip
     636:	4667      	mov	r7, ip
     638:	7800      	ldrb	r0, [r0, #0]
     63a:	4320      	orrs	r0, r4
     63c:	7038      	strb	r0, [r7, #0]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     63e:	7808      	ldrb	r0, [r1, #0]
     640:	4390      	bics	r0, r2
     642:	4320      	orrs	r0, r4
     644:	7008      	strb	r0, [r1, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     646:	0018      	movs	r0, r3
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     648:	7839      	ldrb	r1, [r7, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     64a:	30d6      	adds	r0, #214	; 0xd6
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     64c:	4321      	orrs	r1, r4
     64e:	7039      	strb	r1, [r7, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     650:	7801      	ldrb	r1, [r0, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     652:	2702      	movs	r7, #2
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     654:	43a1      	bics	r1, r4
     656:	7001      	strb	r1, [r0, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     658:	2180      	movs	r1, #128	; 0x80
     65a:	9803      	ldr	r0, [sp, #12]
     65c:	03c9      	lsls	r1, r1, #15
     65e:	6001      	str	r1, [r0, #0]

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     660:	0018      	movs	r0, r3
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     662:	60f1      	str	r1, [r6, #12]

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     664:	3031      	adds	r0, #49	; 0x31
     666:	7801      	ldrb	r1, [r0, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     668:	3e3f      	subs	r6, #63	; 0x3f

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     66a:	4011      	ands	r1, r2
     66c:	430d      	orrs	r5, r1
     66e:	7005      	strb	r5, [r0, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     670:	001d      	movs	r5, r3
     672:	3543      	adds	r5, #67	; 0x43
     674:	7829      	ldrb	r1, [r5, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     676:	46bc      	mov	ip, r7
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     678:	4321      	orrs	r1, r4
     67a:	7029      	strb	r1, [r5, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     67c:	7da9      	ldrb	r1, [r5, #22]
     67e:	3505      	adds	r5, #5
     680:	43a1      	bics	r1, r4
     682:	7469      	strb	r1, [r5, #17]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     684:	2180      	movs	r1, #128	; 0x80
     686:	0489      	lsls	r1, r1, #18
     688:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     68a:	6159      	str	r1, [r3, #20]

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     68c:	7801      	ldrb	r1, [r0, #0]
     68e:	4391      	bics	r1, r2
     690:	4321      	orrs	r1, r4
     692:	7001      	strb	r1, [r0, #0]
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     694:	7c41      	ldrb	r1, [r0, #17]
     696:	3011      	adds	r0, #17
     698:	4321      	orrs	r1, r4
     69a:	7001      	strb	r1, [r0, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     69c:	7d81      	ldrb	r1, [r0, #22]
     69e:	43a1      	bics	r1, r4
     6a0:	7581      	strb	r1, [r0, #22]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     6a2:	2180      	movs	r1, #128	; 0x80
     6a4:	0449      	lsls	r1, r1, #17
     6a6:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     6a8:	6159      	str	r1, [r3, #20]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     6aa:	7829      	ldrb	r1, [r5, #0]
     6ac:	43a1      	bics	r1, r4
     6ae:	7029      	strb	r1, [r5, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     6b0:	2180      	movs	r1, #128	; 0x80
     6b2:	0049      	lsls	r1, r1, #1
     6b4:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     6b6:	7831      	ldrb	r1, [r6, #0]
     6b8:	43a1      	bics	r1, r4
     6ba:	7031      	strb	r1, [r6, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     6bc:	2180      	movs	r1, #128	; 0x80
     6be:	0089      	lsls	r1, r1, #2
     6c0:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     6c2:	0019      	movs	r1, r3
     6c4:	314b      	adds	r1, #75	; 0x4b
     6c6:	7808      	ldrb	r0, [r1, #0]
     6c8:	43a0      	bics	r0, r4
     6ca:	7008      	strb	r0, [r1, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     6cc:	7808      	ldrb	r0, [r1, #0]
     6ce:	4338      	orrs	r0, r7
     6d0:	7008      	strb	r0, [r1, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     6d2:	2080      	movs	r0, #128	; 0x80
     6d4:	0100      	lsls	r0, r0, #4
     6d6:	6058      	str	r0, [r3, #4]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     6d8:	4877      	ldr	r0, [pc, #476]	; (8b8 <init+0x324>)
     6da:	371e      	adds	r7, #30
     6dc:	7800      	ldrb	r0, [r0, #0]
     6de:	4010      	ands	r0, r2
     6e0:	4338      	orrs	r0, r7
     6e2:	4f75      	ldr	r7, [pc, #468]	; (8b8 <init+0x324>)
     6e4:	7038      	strb	r0, [r7, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     6e6:	7808      	ldrb	r0, [r1, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     6e8:	2720      	movs	r7, #32
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     6ea:	4320      	orrs	r0, r4
     6ec:	7008      	strb	r0, [r1, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     6ee:	0018      	movs	r0, r3
     6f0:	3034      	adds	r0, #52	; 0x34
     6f2:	7801      	ldrb	r1, [r0, #0]
     6f4:	4011      	ands	r1, r2
     6f6:	4339      	orrs	r1, r7
     6f8:	7001      	strb	r1, [r0, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     6fa:	7831      	ldrb	r1, [r6, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     6fc:	4667      	mov	r7, ip
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     6fe:	4321      	orrs	r1, r4
     700:	7031      	strb	r1, [r6, #0]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     702:	4666      	mov	r6, ip
     704:	7801      	ldrb	r1, [r0, #0]
     706:	4391      	bics	r1, r2
     708:	4331      	orrs	r1, r6
     70a:	7001      	strb	r1, [r0, #0]
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     70c:	7829      	ldrb	r1, [r5, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     70e:	3096      	adds	r0, #150	; 0x96
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     710:	4321      	orrs	r1, r4
     712:	7029      	strb	r1, [r5, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     714:	7801      	ldrb	r1, [r0, #0]
     716:	001e      	movs	r6, r3
     718:	43a1      	bics	r1, r4
     71a:	7001      	strb	r1, [r0, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     71c:	2180      	movs	r1, #128	; 0x80
     71e:	9803      	ldr	r0, [sp, #12]
     720:	00c9      	lsls	r1, r1, #3
     722:	6001      	str	r1, [r0, #0]
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     724:	0018      	movs	r0, r3
     726:	3098      	adds	r0, #152	; 0x98
     728:	6001      	str	r1, [r0, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     72a:	78a8      	ldrb	r0, [r5, #2]
     72c:	3651      	adds	r6, #81	; 0x51
     72e:	43a0      	bics	r0, r4
     730:	70a8      	strb	r0, [r5, #2]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     732:	6099      	str	r1, [r3, #8]
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     734:	6199      	str	r1, [r3, #24]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     736:	7a29      	ldrb	r1, [r5, #8]
     738:	43a1      	bics	r1, r4
     73a:	7229      	strb	r1, [r5, #8]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     73c:	2180      	movs	r1, #128	; 0x80
     73e:	0249      	lsls	r1, r1, #9
     740:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     742:	7831      	ldrb	r1, [r6, #0]
     744:	43a1      	bics	r1, r4
     746:	7031      	strb	r1, [r6, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     748:	2180      	movs	r1, #128	; 0x80
     74a:	0289      	lsls	r1, r1, #10
     74c:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     74e:	0019      	movs	r1, r3
     750:	3153      	adds	r1, #83	; 0x53
     752:	7808      	ldrb	r0, [r1, #0]
     754:	43a0      	bics	r0, r4
     756:	7008      	strb	r0, [r1, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     758:	7808      	ldrb	r0, [r1, #0]
     75a:	4338      	orrs	r0, r7
     75c:	7008      	strb	r0, [r1, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     75e:	001f      	movs	r7, r3


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     760:	2080      	movs	r0, #128	; 0x80
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     762:	3739      	adds	r7, #57	; 0x39


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     764:	0300      	lsls	r0, r0, #12
     766:	6058      	str	r0, [r3, #4]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     768:	9703      	str	r7, [sp, #12]
     76a:	7838      	ldrb	r0, [r7, #0]
     76c:	2720      	movs	r7, #32
     76e:	4010      	ands	r0, r2
     770:	4338      	orrs	r0, r7
     772:	9f03      	ldr	r7, [sp, #12]
     774:	7038      	strb	r0, [r7, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     776:	7808      	ldrb	r0, [r1, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     778:	2720      	movs	r7, #32
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     77a:	4320      	orrs	r0, r4
     77c:	7008      	strb	r0, [r1, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     77e:	0018      	movs	r0, r3
     780:	3038      	adds	r0, #56	; 0x38
     782:	7801      	ldrb	r1, [r0, #0]
     784:	4011      	ands	r1, r2
     786:	4339      	orrs	r1, r7
     788:	7001      	strb	r1, [r0, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     78a:	7831      	ldrb	r1, [r6, #0]
     78c:	4321      	orrs	r1, r4
     78e:	7031      	strb	r1, [r6, #0]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     790:	4666      	mov	r6, ip
     792:	7801      	ldrb	r1, [r0, #0]
     794:	4391      	bics	r1, r2
     796:	4331      	orrs	r1, r6
     798:	7001      	strb	r1, [r0, #0]
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     79a:	7a29      	ldrb	r1, [r5, #8]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     79c:	3014      	adds	r0, #20
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     79e:	4321      	orrs	r1, r4
     7a0:	7229      	strb	r1, [r5, #8]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     7a2:	7981      	ldrb	r1, [r0, #6]
     7a4:	43a1      	bics	r1, r4
     7a6:	7181      	strb	r1, [r0, #6]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     7a8:	2180      	movs	r1, #128	; 0x80
     7aa:	02c9      	lsls	r1, r1, #11
     7ac:	6099      	str	r1, [r3, #8]
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     7ae:	6199      	str	r1, [r3, #24]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     7b0:	7801      	ldrb	r1, [r0, #0]
     7b2:	43a1      	bics	r1, r4
     7b4:	7001      	strb	r1, [r0, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     7b6:	2180      	movs	r1, #128	; 0x80
     7b8:	0149      	lsls	r1, r1, #5
     7ba:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     7bc:	7881      	ldrb	r1, [r0, #2]
     7be:	43a1      	bics	r1, r4
     7c0:	7081      	strb	r1, [r0, #2]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     7c2:	2180      	movs	r1, #128	; 0x80
     7c4:	01c9      	lsls	r1, r1, #7
     7c6:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     7c8:	0019      	movs	r1, r3
     7ca:	314d      	adds	r1, #77	; 0x4d
     7cc:	7808      	ldrb	r0, [r1, #0]
     7ce:	43a0      	bics	r0, r4
     7d0:	7008      	strb	r0, [r1, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     7d2:	7808      	ldrb	r0, [r1, #0]
     7d4:	4330      	orrs	r0, r6
     7d6:	7008      	strb	r0, [r1, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     7d8:	2180      	movs	r1, #128	; 0x80
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     7da:	0018      	movs	r0, r3


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     7dc:	0189      	lsls	r1, r1, #6
     7de:	6059      	str	r1, [r3, #4]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     7e0:	304f      	adds	r0, #79	; 0x4f
     7e2:	7801      	ldrb	r1, [r0, #0]
     7e4:	43a1      	bics	r1, r4
     7e6:	7001      	strb	r1, [r0, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     7e8:	2180      	movs	r1, #128	; 0x80
     7ea:	0209      	lsls	r1, r1, #8
     7ec:	6099      	str	r1, [r3, #8]
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     7ee:	6199      	str	r1, [r3, #24]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     7f0:	0019      	movs	r1, r3
     7f2:	3155      	adds	r1, #85	; 0x55
     7f4:	7808      	ldrb	r0, [r1, #0]
     7f6:	43a0      	bics	r0, r4
     7f8:	7008      	strb	r0, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     7fa:	2080      	movs	r0, #128	; 0x80
     7fc:	0380      	lsls	r0, r0, #14
     7fe:	6098      	str	r0, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
}


inline static void pinCfg(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].reg = p.cfg;
     800:	2040      	movs	r0, #64	; 0x40
     802:	7008      	strb	r0, [r1, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     804:	7848      	ldrb	r0, [r1, #1]
     806:	43a0      	bics	r0, r4
     808:	7048      	strb	r0, [r1, #1]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     80a:	2080      	movs	r0, #128	; 0x80
     80c:	03c0      	lsls	r0, r0, #15
     80e:	6098      	str	r0, [r3, #8]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     810:	0018      	movs	r0, r3
     812:	303b      	adds	r0, #59	; 0x3b
     814:	7805      	ldrb	r5, [r0, #0]
     816:	4395      	bics	r5, r2
     818:	4335      	orrs	r5, r6
     81a:	7005      	strb	r5, [r0, #0]
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     81c:	784d      	ldrb	r5, [r1, #1]
     81e:	4325      	orrs	r5, r4
     820:	704d      	strb	r5, [r1, #1]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     822:	788d      	ldrb	r5, [r1, #2]
     824:	43a5      	bics	r5, r4
     826:	708d      	strb	r5, [r1, #2]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     828:	788d      	ldrb	r5, [r1, #2]
     82a:	4335      	orrs	r5, r6
     82c:	708d      	strb	r5, [r1, #2]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     82e:	2580      	movs	r5, #128	; 0x80
     830:	042d      	lsls	r5, r5, #16
     832:	605d      	str	r5, [r3, #4]

//    sercomClockEnable(SPI2, 3, 4);
//   sercomSpiMasterInit(SPI2, 3, 0, 0, 0, 0x00);

    sercomClockEnable(SPI0, 3, 4);
    sercomSpiMasterInit(SPI0, 3, 0, 0, 0, 0x00);
     834:	2500      	movs	r5, #0
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     836:	7803      	ldrb	r3, [r0, #0]
    pinMux(RxPo);

//    sercomClockEnable(SPI2, 3, 4);
//   sercomSpiMasterInit(SPI2, 3, 0, 0, 0, 0x00);

    sercomClockEnable(SPI0, 3, 4);
     838:	4e20      	ldr	r6, [pc, #128]	; (8bc <init+0x328>)
     83a:	401a      	ands	r2, r3
     83c:	433a      	orrs	r2, r7
     83e:	7002      	strb	r2, [r0, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     840:	788b      	ldrb	r3, [r1, #2]
     842:	2204      	movs	r2, #4
     844:	4323      	orrs	r3, r4
     846:	708b      	strb	r3, [r1, #2]
     848:	2000      	movs	r0, #0
     84a:	2103      	movs	r1, #3
     84c:	47b0      	blx	r6
    sercomSpiMasterInit(SPI0, 3, 0, 0, 0, 0x00);
     84e:	002b      	movs	r3, r5
     850:	002a      	movs	r2, r5
     852:	0028      	movs	r0, r5
     854:	4f1a      	ldr	r7, [pc, #104]	; (8c0 <init+0x32c>)
     856:	9501      	str	r5, [sp, #4]
     858:	9500      	str	r5, [sp, #0]
     85a:	2103      	movs	r1, #3
     85c:	47b8      	blx	r7

    sercomClockEnable(SPI1, 3, 4);
     85e:	0020      	movs	r0, r4
     860:	2204      	movs	r2, #4
     862:	2103      	movs	r1, #3
     864:	47b0      	blx	r6
    sercomSpiMasterInit(SPI1, 3, 0, 0, 0, 0x00);
     866:	002b      	movs	r3, r5
     868:	002a      	movs	r2, r5
     86a:	0020      	movs	r0, r4
     86c:	9501      	str	r5, [sp, #4]
     86e:	9500      	str	r5, [sp, #0]
     870:	2103      	movs	r1, #3
     872:	47b8      	blx	r7

    sercomClockEnable(USART3, 4, 8);
     874:	2208      	movs	r2, #8
     876:	2104      	movs	r1, #4
     878:	2003      	movs	r0, #3
     87a:	47b0      	blx	r6
    sercomUartInit(USART3,1,0,63858);
     87c:	0021      	movs	r1, r4
     87e:	002a      	movs	r2, r5
     880:	2003      	movs	r0, #3
     882:	4b10      	ldr	r3, [pc, #64]	; (8c4 <init+0x330>)
     884:	4c10      	ldr	r4, [pc, #64]	; (8c8 <init+0x334>)
     886:	47a0      	blx	r4

    TC4Init();
     888:	4b10      	ldr	r3, [pc, #64]	; (8cc <init+0x338>)
     88a:	4798      	blx	r3
    TC5Init();
     88c:	4b10      	ldr	r3, [pc, #64]	; (8d0 <init+0x33c>)
     88e:	4798      	blx	r3
}
     890:	b005      	add	sp, #20
     892:	bdf0      	pop	{r4, r5, r6, r7, pc}
     894:	000001d5 	.word	0x000001d5
     898:	00000ce5 	.word	0x00000ce5
     89c:	00000d7d 	.word	0x00000d7d
     8a0:	00000e7d 	.word	0x00000e7d
     8a4:	00000b05 	.word	0x00000b05
     8a8:	0000101d 	.word	0x0000101d
     8ac:	e000e100 	.word	0xe000e100
     8b0:	ff00ffff 	.word	0xff00ffff
     8b4:	41004400 	.word	0x41004400
     8b8:	41004435 	.word	0x41004435
     8bc:	000015b9 	.word	0x000015b9
     8c0:	0000161d 	.word	0x0000161d
     8c4:	0000f972 	.word	0x0000f972
     8c8:	00001681 	.word	0x00001681
     8cc:	00000f4d 	.word	0x00000f4d
     8d0:	00000fb5 	.word	0x00000fb5

000008d4 <startUp>:

void startUp(Altimeter *my_altimeter) {
     8d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     8d6:	0004      	movs	r4, r0


    beep(400);
     8d8:	20c8      	movs	r0, #200	; 0xc8
     8da:	4f2e      	ldr	r7, [pc, #184]	; (994 <startUp+0xc0>)
     8dc:	0040      	lsls	r0, r0, #1
     8de:	47b8      	blx	r7

    u32_t startupTime = millis();
     8e0:	4e2d      	ldr	r6, [pc, #180]	; (998 <startUp+0xc4>)
     8e2:	47b0      	blx	r6

    sampleTick(my_altimeter);
     8e4:	4d2d      	ldr	r5, [pc, #180]	; (99c <startUp+0xc8>)
void startUp(Altimeter *my_altimeter) {


    beep(400);

    u32_t startupTime = millis();
     8e6:	9000      	str	r0, [sp, #0]

    sampleTick(my_altimeter);
     8e8:	0020      	movs	r0, r4
     8ea:	47a8      	blx	r5
    flight(my_altimeter);
     8ec:	4b2c      	ldr	r3, [pc, #176]	; (9a0 <startUp+0xcc>)
     8ee:	0020      	movs	r0, r4
     8f0:	4798      	blx	r3
     8f2:	4b2b      	ldr	r3, [pc, #172]	; (9a0 <startUp+0xcc>)
     8f4:	9301      	str	r3, [sp, #4]

    while(!my_altimeter->myFlashMemory.pageReady) {
     8f6:	4b2b      	ldr	r3, [pc, #172]	; (9a4 <startUp+0xd0>)
     8f8:	5ce2      	ldrb	r2, [r4, r3]
     8fa:	2a00      	cmp	r2, #0
     8fc:	d105      	bne.n	90a <startUp+0x36>
        sampleTick(my_altimeter);
     8fe:	0020      	movs	r0, r4
     900:	47a8      	blx	r5
        logSensors(my_altimeter);
     902:	0020      	movs	r0, r4
     904:	4b28      	ldr	r3, [pc, #160]	; (9a8 <startUp+0xd4>)
     906:	4798      	blx	r3
     908:	e7f5      	b.n	8f6 <startUp+0x22>
    }

    my_altimeter->myFlashMemory.pageReady = false;
     90a:	2200      	movs	r2, #0
     90c:	54e2      	strb	r2, [r4, r3]


    while((millis() - startupTime) < 10000) {
     90e:	47b0      	blx	r6
     910:	9b00      	ldr	r3, [sp, #0]
     912:	1ac0      	subs	r0, r0, r3
     914:	4b25      	ldr	r3, [pc, #148]	; (9ac <startUp+0xd8>)
     916:	4298      	cmp	r0, r3
     918:	d820      	bhi.n	95c <startUp+0x88>


        if (sercom(USART3)->SPI.INTFLAG.bit.RXC == 1) {
     91a:	4b25      	ldr	r3, [pc, #148]	; (9b0 <startUp+0xdc>)
     91c:	7e1b      	ldrb	r3, [r3, #24]
     91e:	075b      	lsls	r3, r3, #29
     920:	d5f5      	bpl.n	90e <startUp+0x3a>
            u8_t data1 = usartDataIn(USART3);
     922:	2003      	movs	r0, #3
     924:	4b23      	ldr	r3, [pc, #140]	; (9b4 <startUp+0xe0>)
     926:	4798      	blx	r3
            if (data1 == 0x41) {
     928:	2841      	cmp	r0, #65	; 0x41
     92a:	d1f0      	bne.n	90e <startUp+0x3a>

                u16_t length = sizeof(my_altimeter->myFlashMemory.pageToWrite);



                usartDataOut(USART3, 'T');
     92c:	4e22      	ldr	r6, [pc, #136]	; (9b8 <startUp+0xe4>)
     92e:	2154      	movs	r1, #84	; 0x54
     930:	383e      	subs	r0, #62	; 0x3e
     932:	47b0      	blx	r6
				
                usartDataOut(USART3, length >> 0);
     934:	21ff      	movs	r1, #255	; 0xff
     936:	2003      	movs	r0, #3
     938:	47b0      	blx	r6
                usartDataOut(USART3, length >> 8);
     93a:	2100      	movs	r1, #0
     93c:	2003      	movs	r0, #3
     93e:	47b0      	blx	r6
     940:	0023      	movs	r3, r4
     942:	0026      	movs	r6, r4
     944:	3380      	adds	r3, #128	; 0x80
     946:	33ff      	adds	r3, #255	; 0xff
     948:	3680      	adds	r6, #128	; 0x80
     94a:	9300      	str	r3, [sp, #0]
                //          AT25SEreadSample(my_altimeter->myFlashMemory.currentAddress, bytesToSend, data);



                for (u8_t dataByte = 0; dataByte < length; ++dataByte) {
                    usartDataOut(USART3, my_altimeter->myFlashMemory.pageToWrite[dataByte]);
     94c:	7831      	ldrb	r1, [r6, #0]
     94e:	4b1a      	ldr	r3, [pc, #104]	; (9b8 <startUp+0xe4>)
     950:	2003      	movs	r0, #3
     952:	4798      	blx	r3

                //          AT25SEreadSample(my_altimeter->myFlashMemory.currentAddress, bytesToSend, data);



                for (u8_t dataByte = 0; dataByte < length; ++dataByte) {
     954:	9b00      	ldr	r3, [sp, #0]
     956:	3601      	adds	r6, #1
     958:	429e      	cmp	r6, r3
     95a:	d1f7      	bne.n	94c <startUp+0x78>
                break;
            }
        }
    }

    sampleTick(my_altimeter);
     95c:	0020      	movs	r0, r4
     95e:	47a8      	blx	r5
    flight(my_altimeter);
     960:	9b01      	ldr	r3, [sp, #4]
     962:	0020      	movs	r0, r4
     964:	4798      	blx	r3

    beep(300);
     966:	2096      	movs	r0, #150	; 0x96
     968:	0040      	lsls	r0, r0, #1
     96a:	47b8      	blx	r7
    delay_ms(80);
     96c:	4c13      	ldr	r4, [pc, #76]	; (9bc <startUp+0xe8>)
     96e:	2050      	movs	r0, #80	; 0x50
     970:	47a0      	blx	r4
    beep(300);
     972:	2096      	movs	r0, #150	; 0x96
     974:	0040      	lsls	r0, r0, #1
     976:	47b8      	blx	r7
    delay_ms(250);
     978:	20fa      	movs	r0, #250	; 0xfa
     97a:	47a0      	blx	r4
    beep(300);
     97c:	2096      	movs	r0, #150	; 0x96
     97e:	0040      	lsls	r0, r0, #1
     980:	47b8      	blx	r7
    delay_ms(80);
     982:	2050      	movs	r0, #80	; 0x50
     984:	47a0      	blx	r4
    beep(300);
     986:	2096      	movs	r0, #150	; 0x96
     988:	0040      	lsls	r0, r0, #1
     98a:	47b8      	blx	r7
    delay_ms(500);
     98c:	20fa      	movs	r0, #250	; 0xfa
     98e:	0040      	lsls	r0, r0, #1
     990:	47a0      	blx	r4


}
     992:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
     994:	00000ca9 	.word	0x00000ca9
     998:	00000f19 	.word	0x00000f19
     99c:	00001215 	.word	0x00001215
     9a0:	0000107d 	.word	0x0000107d
     9a4:	0000027f 	.word	0x0000027f
     9a8:	00001119 	.word	0x00001119
     9ac:	0000270f 	.word	0x0000270f
     9b0:	42001400 	.word	0x42001400
     9b4:	000016f5 	.word	0x000016f5
     9b8:	000016dd 	.word	0x000016dd
     9bc:	00000ecd 	.word	0x00000ecd

000009c0 <main>:



int main(void) {
     9c0:	b5f0      	push	{r4, r5, r6, r7, lr}

    init();

    Altimeter my_altimeter;
    my_altimeter.myFlightState = flightStatrup;
     9c2:	2500      	movs	r5, #0

}



int main(void) {
     9c4:	4c34      	ldr	r4, [pc, #208]	; (a98 <main+0xd8>)

    init();
     9c6:	4b35      	ldr	r3, [pc, #212]	; (a9c <main+0xdc>)

}



int main(void) {
     9c8:	44a5      	add	sp, r4

    init();
     9ca:	4798      	blx	r3

    Altimeter my_altimeter;
    my_altimeter.myFlightState = flightStatrup;
     9cc:	ac05      	add	r4, sp, #20
    initMS5803Barometer(&my_altimeter.myBarometer);
     9ce:	4b34      	ldr	r3, [pc, #208]	; (aa0 <main+0xe0>)
     9d0:	a806      	add	r0, sp, #24
int main(void) {

    init();

    Altimeter my_altimeter;
    my_altimeter.myFlightState = flightStatrup;
     9d2:	7025      	strb	r5, [r4, #0]
    initMS5803Barometer(&my_altimeter.myBarometer);
     9d4:	4798      	blx	r3
    IMUinit();
     9d6:	4b33      	ldr	r3, [pc, #204]	; (aa4 <main+0xe4>)
     9d8:	4798      	blx	r3

    sampleTick(&my_altimeter);
     9da:	0020      	movs	r0, r4
     9dc:	4f32      	ldr	r7, [pc, #200]	; (aa8 <main+0xe8>)
     9de:	47b8      	blx	r7


    startUp(&my_altimeter);
     9e0:	0020      	movs	r0, r4
     9e2:	4b32      	ldr	r3, [pc, #200]	; (aac <main+0xec>)
     9e4:	4798      	blx	r3


    u32_t time = 0;
    u32_t lastTime = 0;
    my_altimeter.myFlashMemory.currentAddress = 0x00000100;
     9e6:	2380      	movs	r3, #128	; 0x80
     9e8:	005b      	lsls	r3, r3, #1
     9ea:	67e3      	str	r3, [r4, #124]	; 0x7c

    AT25SFErace4KBlock(my_altimeter.myFlashMemory.currentAddress);
     9ec:	0028      	movs	r0, r5
     9ee:	4b30      	ldr	r3, [pc, #192]	; (ab0 <main+0xf0>)
     9f0:	4798      	blx	r3
    //logSensors(&my_altimeter);
    delay_ms(5);
     9f2:	4e30      	ldr	r6, [pc, #192]	; (ab4 <main+0xf4>)
     9f4:	2005      	movs	r0, #5
     9f6:	47b0      	blx	r6
     9f8:	9702      	str	r7, [sp, #8]
     9fa:	9603      	str	r6, [sp, #12]


        if (takeSample) {
            sampleTick(&my_altimeter);
            flight(&my_altimeter);
            takeSample = false;
     9fc:	9501      	str	r5, [sp, #4]
    delay_ms(5);



    while (1) {
        time = millis();
     9fe:	4b2e      	ldr	r3, [pc, #184]	; (ab8 <main+0xf8>)
     a00:	4798      	blx	r3



        if (takeSample) {
     a02:	4d2e      	ldr	r5, [pc, #184]	; (abc <main+0xfc>)
     a04:	782b      	ldrb	r3, [r5, #0]
     a06:	2b00      	cmp	r3, #0
     a08:	d008      	beq.n	a1c <main+0x5c>
            sampleTick(&my_altimeter);
     a0a:	0020      	movs	r0, r4
     a0c:	9b02      	ldr	r3, [sp, #8]
     a0e:	4798      	blx	r3
            flight(&my_altimeter);
     a10:	4b2b      	ldr	r3, [pc, #172]	; (ac0 <main+0x100>)
     a12:	0020      	movs	r0, r4
     a14:	4798      	blx	r3
            takeSample = false;
     a16:	466b      	mov	r3, sp
     a18:	791b      	ldrb	r3, [r3, #4]
     a1a:	702b      	strb	r3, [r5, #0]

        }


        if (writeLog) {
     a1c:	4b29      	ldr	r3, [pc, #164]	; (ac4 <main+0x104>)
     a1e:	781a      	ldrb	r2, [r3, #0]
     a20:	2a00      	cmp	r2, #0
     a22:	d0ec      	beq.n	9fe <main+0x3e>
            writeLog = false;
     a24:	466a      	mov	r2, sp
     a26:	7912      	ldrb	r2, [r2, #4]
     a28:	701a      	strb	r2, [r3, #0]

            if (my_altimeter.myFlashMemory.pageReady) {
     a2a:	4b27      	ldr	r3, [pc, #156]	; (ac8 <main+0x108>)
     a2c:	5ce2      	ldrb	r2, [r4, r3]
     a2e:	2a00      	cmp	r2, #0
     a30:	d103      	bne.n	a3a <main+0x7a>
                }

               
            }

            logSensors(&my_altimeter);
     a32:	0020      	movs	r0, r4
     a34:	4b25      	ldr	r3, [pc, #148]	; (acc <main+0x10c>)
     a36:	4798      	blx	r3
     a38:	e7e1      	b.n	9fe <main+0x3e>

        if (writeLog) {
            writeLog = false;

            if (my_altimeter.myFlashMemory.pageReady) {
                my_altimeter.myFlashMemory.pageReady = false;
     a3a:	466a      	mov	r2, sp
     a3c:	7912      	ldrb	r2, [r2, #4]
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
}


inline static void pinToggle(Pin p) {
    PORT->Group[p.group].OUTTGL.reg = (1<<p.pin);
     a3e:	4d24      	ldr	r5, [pc, #144]	; (ad0 <main+0x110>)
     a40:	54e2      	strb	r2, [r4, r3]
     a42:	2380      	movs	r3, #128	; 0x80
     a44:	035b      	lsls	r3, r3, #13
     a46:	61eb      	str	r3, [r5, #28]

                pinToggle(LedPin);
                delay_ms(80);
     a48:	2050      	movs	r0, #80	; 0x50
     a4a:	9b03      	ldr	r3, [sp, #12]
     a4c:	4798      	blx	r3
     a4e:	2380      	movs	r3, #128	; 0x80
     a50:	035b      	lsls	r3, r3, #13
     a52:	61eb      	str	r3, [r5, #28]
                //beep(400);

                

                u16_t logLen = 510;
                usartDataOut(USART3, 'T');
     a54:	4f1f      	ldr	r7, [pc, #124]	; (ad4 <main+0x114>)
     a56:	2154      	movs	r1, #84	; 0x54
     a58:	2003      	movs	r0, #3
     a5a:	47b8      	blx	r7
                usartDataOut(USART3, logLen >> 0);
     a5c:	21fe      	movs	r1, #254	; 0xfe
     a5e:	2003      	movs	r0, #3
     a60:	47b8      	blx	r7
     a62:	ad25      	add	r5, sp, #148	; 0x94
                usartDataOut(USART3, logLen >> 8);
     a64:	2101      	movs	r1, #1
     a66:	2003      	movs	r0, #3
     a68:	47b8      	blx	r7
     a6a:	002e      	movs	r6, r5

                for (u8_t dataByte = 0; dataByte < 0xFF; ++dataByte) {
                    usartDataOut(USART3, my_altimeter.myFlashMemory.pageToWrite[dataByte]);
     a6c:	7831      	ldrb	r1, [r6, #0]
     a6e:	4b19      	ldr	r3, [pc, #100]	; (ad4 <main+0x114>)
     a70:	2003      	movs	r0, #3
     a72:	4798      	blx	r3
                u16_t logLen = 510;
                usartDataOut(USART3, 'T');
                usartDataOut(USART3, logLen >> 0);
                usartDataOut(USART3, logLen >> 8);

                for (u8_t dataByte = 0; dataByte < 0xFF; ++dataByte) {
     a74:	2384      	movs	r3, #132	; 0x84
     a76:	aa04      	add	r2, sp, #16
     a78:	33ff      	adds	r3, #255	; 0xff
     a7a:	3601      	adds	r6, #1
     a7c:	189b      	adds	r3, r3, r2
     a7e:	429e      	cmp	r6, r3
     a80:	d1f4      	bne.n	a6c <main+0xac>
                    usartDataOut(USART3, my_altimeter.myFlashMemory.pageToWrite[dataByte]);
                }
                for (u8_t dataByte = 0; dataByte < 0xFF; ++dataByte) {
                    usartDataOut(USART3, my_altimeter.myFlashMemory.pageToWrite[dataByte]);
     a82:	7829      	ldrb	r1, [r5, #0]
     a84:	2003      	movs	r0, #3
     a86:	47b8      	blx	r7
                usartDataOut(USART3, logLen >> 8);

                for (u8_t dataByte = 0; dataByte < 0xFF; ++dataByte) {
                    usartDataOut(USART3, my_altimeter.myFlashMemory.pageToWrite[dataByte]);
                }
                for (u8_t dataByte = 0; dataByte < 0xFF; ++dataByte) {
     a88:	2384      	movs	r3, #132	; 0x84
     a8a:	aa04      	add	r2, sp, #16
     a8c:	33ff      	adds	r3, #255	; 0xff
     a8e:	3501      	adds	r5, #1
     a90:	189b      	adds	r3, r3, r2
     a92:	429d      	cmp	r5, r3
     a94:	d1f5      	bne.n	a82 <main+0xc2>
     a96:	e7cc      	b.n	a32 <main+0x72>
     a98:	fffffd54 	.word	0xfffffd54
     a9c:	00000595 	.word	0x00000595
     aa0:	00000505 	.word	0x00000505
     aa4:	00000ad9 	.word	0x00000ad9
     aa8:	00001215 	.word	0x00001215
     aac:	000008d5 	.word	0x000008d5
     ab0:	000001e5 	.word	0x000001e5
     ab4:	00000ecd 	.word	0x00000ecd
     ab8:	00000f19 	.word	0x00000f19
     abc:	20000463 	.word	0x20000463
     ac0:	0000107d 	.word	0x0000107d
     ac4:	20000461 	.word	0x20000461
     ac8:	0000027f 	.word	0x0000027f
     acc:	00001119 	.word	0x00001119
     ad0:	41004400 	.word	0x41004400
     ad4:	000016dd 	.word	0x000016dd

00000ad8 <IMUinit>:
#include <util.h>
#include <boardDefines.h>


void IMUinit() {
     ad8:	b570      	push	{r4, r5, r6, lr}
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     ada:	4c08      	ldr	r4, [pc, #32]	; (afc <IMUinit+0x24>)
     adc:	2580      	movs	r5, #128	; 0x80
     ade:	0023      	movs	r3, r4
     ae0:	00ed      	lsls	r5, r5, #3
     ae2:	3394      	adds	r3, #148	; 0x94
     ae4:	601d      	str	r5, [r3, #0]

    uint8_t dummy_Tx = 0xFF;
    uint8_t dummy_rx;

    pinLow(cs_accel);
    dummy_rx = spiDataTransfer(SPI0, BMI_ACCEL_PMU_RANGE);
     ae6:	4e06      	ldr	r6, [pc, #24]	; (b00 <IMUinit+0x28>)
     ae8:	210f      	movs	r1, #15
     aea:	2000      	movs	r0, #0
     aec:	47b0      	blx	r6
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     aee:	3498      	adds	r4, #152	; 0x98
    dummy_rx = spiDataTransfer(SPI0, BMI_ACCEL_16G_RANGE);
     af0:	210c      	movs	r1, #12
     af2:	2000      	movs	r0, #0
     af4:	47b0      	blx	r6
     af6:	6025      	str	r5, [r4, #0]
    pinHigh(cs_accel);

}
     af8:	bd70      	pop	{r4, r5, r6, pc}
     afa:	46c0      	nop			; (mov r8, r8)
     afc:	41004400 	.word	0x41004400
     b00:	000016c5 	.word	0x000016c5

00000b04 <adcInit>:
#include <util.h>

void adcInit() {

    // set up clock
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;
     b04:	2180      	movs	r1, #128	; 0x80


#include <util.h>

void adcInit() {
     b06:	b510      	push	{r4, lr}

    // set up clock
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;
     b08:	4a10      	ldr	r2, [pc, #64]	; (b4c <adcInit+0x48>)
     b0a:	0249      	lsls	r1, r1, #9
     b0c:	6a13      	ldr	r3, [r2, #32]
    // divide prescaler by 512 (93.75KHz), max adc freq is 2.1MHz
    ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |
                     ADC_CTRLB_RESSEL_12BIT;

    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
     b0e:	4810      	ldr	r0, [pc, #64]	; (b50 <adcInit+0x4c>)
#include <util.h>

void adcInit() {

    // set up clock
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;
     b10:	430b      	orrs	r3, r1
     b12:	6213      	str	r3, [r2, #32]

    // divide prescaler by 512 (93.75KHz), max adc freq is 2.1MHz
    ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |
     b14:	23e0      	movs	r3, #224	; 0xe0
     b16:	490f      	ldr	r1, [pc, #60]	; (b54 <adcInit+0x50>)
                     ADC_CTRLB_RESSEL_12BIT;

    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
     b18:	4a0f      	ldr	r2, [pc, #60]	; (b58 <adcInit+0x54>)

    // set up clock
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;

    // divide prescaler by 512 (93.75KHz), max adc freq is 2.1MHz
    ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |
     b1a:	00db      	lsls	r3, r3, #3
     b1c:	808b      	strh	r3, [r1, #4]
                     ADC_CTRLB_RESSEL_12BIT;

    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
     b1e:	8050      	strh	r0, [r2, #2]
                        GCLK_CLKCTRL_GEN(0) |
                        GCLK_CLKCTRL_ID(ADC_GCLK_ID);

    ADC->CALIB.reg =
        ADC_CALIB_BIAS_CAL(
     b20:	4a0e      	ldr	r2, [pc, #56]	; (b5c <adcInit+0x58>)
    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(0) |
                        GCLK_CLKCTRL_ID(ADC_GCLK_ID);

    ADC->CALIB.reg =
     b22:	6812      	ldr	r2, [r2, #0]
     b24:	0150      	lsls	r0, r2, #5
     b26:	4018      	ands	r0, r3
     b28:	4b0d      	ldr	r3, [pc, #52]	; (b60 <adcInit+0x5c>)
     b2a:	0154      	lsls	r4, r2, #5
     b2c:	681a      	ldr	r2, [r3, #0]
     b2e:	0ed3      	lsrs	r3, r2, #27
     b30:	4323      	orrs	r3, r4
     b32:	b2da      	uxtb	r2, r3
     b34:	0003      	movs	r3, r0
     b36:	4313      	orrs	r3, r2
     b38:	850b      	strh	r3, [r1, #40]	; 0x28
        ) |
        ADC_CALIB_LINEARITY_CAL(
            (*(uint64_t *)ADC_FUSES_LINEARITY_0_ADDR >> ADC_FUSES_LINEARITY_0_Pos)
        );

    ADC->REFCTRL.reg = ADC_REFCTRL_REFSEL_INTVCC1;
     b3a:	2302      	movs	r3, #2
     b3c:	704b      	strb	r3, [r1, #1]

    ADC->CTRLA.reg = ADC_CTRLA_ENABLE; // enable
     b3e:	700b      	strb	r3, [r1, #0]
    while(ADC->STATUS.reg & ADC_STATUS_SYNCBUSY);
     b40:	7e4b      	ldrb	r3, [r1, #25]
     b42:	b25b      	sxtb	r3, r3
     b44:	2b00      	cmp	r3, #0
     b46:	dbfb      	blt.n	b40 <adcInit+0x3c>
}
     b48:	bd10      	pop	{r4, pc}
     b4a:	46c0      	nop			; (mov r8, r8)
     b4c:	40000400 	.word	0x40000400
     b50:	0000401e 	.word	0x0000401e
     b54:	42004000 	.word	0x42004000
     b58:	40000c00 	.word	0x40000c00
     b5c:	00806024 	.word	0x00806024
     b60:	00806020 	.word	0x00806020

00000b64 <adcSample>:



u16_t adcSample() {
    ADC->SWTRIG.reg = ADC_SWTRIG_START;
     b64:	2202      	movs	r2, #2
     b66:	4b05      	ldr	r3, [pc, #20]	; (b7c <adcSample+0x18>)
     b68:	731a      	strb	r2, [r3, #12]
    while(!(ADC->INTFLAG.reg & ADC_INTFLAG_RESRDY)); // wait until result is ready
     b6a:	3a01      	subs	r2, #1
     b6c:	7e19      	ldrb	r1, [r3, #24]
     b6e:	4211      	tst	r1, r2
     b70:	d0fc      	beq.n	b6c <adcSample+0x8>
    return ADC->RESULT.reg;
     b72:	4b02      	ldr	r3, [pc, #8]	; (b7c <adcSample+0x18>)
     b74:	8b58      	ldrh	r0, [r3, #26]
     b76:	b280      	uxth	r0, r0
}
     b78:	4770      	bx	lr
     b7a:	46c0      	nop			; (mov r8, r8)
     b7c:	42004000 	.word	0x42004000

00000b80 <adc_read>:


u16_t adc_read(Pin p) {
     b80:	b537      	push	{r0, r1, r2, r4, r5, lr}
    u16_t buad;

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
     b82:	2501      	movs	r5, #1
     b84:	0c02      	lsrs	r2, r0, #16
     b86:	b2d4      	uxtb	r4, r2
     b88:	9000      	str	r0, [sp, #0]
     b8a:	0e00      	lsrs	r0, r0, #24
     b8c:	9101      	str	r1, [sp, #4]
     b8e:	0842      	lsrs	r2, r0, #1
     b90:	01e3      	lsls	r3, r4, #7
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     b92:	4911      	ldr	r1, [pc, #68]	; (bd8 <adc_read+0x58>)
     b94:	18d2      	adds	r2, r2, r3
     b96:	1852      	adds	r2, r2, r1
    u16_t buad;

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
     b98:	4228      	tst	r0, r5
     b9a:	d005      	beq.n	ba8 <adc_read+0x28>
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     b9c:	210f      	movs	r1, #15
     b9e:	7814      	ldrb	r4, [r2, #0]
     ba0:	4021      	ands	r1, r4
     ba2:	2410      	movs	r4, #16
     ba4:	4321      	orrs	r1, r4
     ba6:	e003      	b.n	bb0 <adc_read+0x30>
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     ba8:	240f      	movs	r4, #15
     baa:	7811      	ldrb	r1, [r2, #0]
     bac:	43a1      	bics	r1, r4
     bae:	4329      	orrs	r1, r5
     bb0:	7011      	strb	r1, [r2, #0]
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     bb2:	2101      	movs	r1, #1
     bb4:	4a09      	ldr	r2, [pc, #36]	; (bdc <adc_read+0x5c>)
     bb6:	18c3      	adds	r3, r0, r3
     bb8:	189b      	adds	r3, r3, r2
     bba:	781a      	ldrb	r2, [r3, #0]
     bbc:	430a      	orrs	r2, r1
     bbe:	701a      	strb	r2, [r3, #0]
    // switch pin mux to analog in
    pinAnalog(p);

    ADC->INPUTCTRL.reg = (ADC_INPUTCTRL_MUXPOS(p.chan) // select from proper pin
                          | ADC_INPUTCTRL_MUXNEG_GND // 0 = gnd
                          | ADC_INPUTCTRL_GAIN_1X);
     bc0:	466b      	mov	r3, sp
     bc2:	791a      	ldrb	r2, [r3, #4]
     bc4:	231f      	movs	r3, #31
     bc6:	4013      	ands	r3, r2
     bc8:	22c0      	movs	r2, #192	; 0xc0
     bca:	0152      	lsls	r2, r2, #5
     bcc:	4313      	orrs	r3, r2

u16_t adc_read(Pin p) {
    // switch pin mux to analog in
    pinAnalog(p);

    ADC->INPUTCTRL.reg = (ADC_INPUTCTRL_MUXPOS(p.chan) // select from proper pin
     bce:	4a04      	ldr	r2, [pc, #16]	; (be0 <adc_read+0x60>)
     bd0:	6113      	str	r3, [r2, #16]
                          | ADC_INPUTCTRL_MUXNEG_GND // 0 = gnd
                          | ADC_INPUTCTRL_GAIN_1X);

    return adcSample();
     bd2:	4b04      	ldr	r3, [pc, #16]	; (be4 <adc_read+0x64>)
     bd4:	4798      	blx	r3
     bd6:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
     bd8:	41004430 	.word	0x41004430
     bdc:	41004440 	.word	0x41004440
     be0:	42004000 	.word	0x42004000
     be4:	00000b65 	.word	0x00000b65

00000be8 <byteOut>:





void byteOut(Pin SCK_PIN, Pin MOSI_PIN, uint8_t byte) {
     be8:	0c01      	lsrs	r1, r0, #16
     bea:	0c13      	lsrs	r3, r2, #16
     bec:	b5f0      	push	{r4, r5, r6, r7, lr}
     bee:	b2cd      	uxtb	r5, r1
     bf0:	b2d9      	uxtb	r1, r3
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     bf2:	2301      	movs	r3, #1
     bf4:	001e      	movs	r6, r3
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     bf6:	0e12      	lsrs	r2, r2, #24
     bf8:	4093      	lsls	r3, r2
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     bfa:	0e00      	lsrs	r0, r0, #24
     bfc:	4086      	lsls	r6, r0
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     bfe:	001a      	movs	r2, r3
     c00:	2308      	movs	r3, #8
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     c02:	0030      	movs	r0, r6
     c04:	4e11      	ldr	r6, [pc, #68]	; (c4c <byteOut+0x64>)
     c06:	01c9      	lsls	r1, r1, #7
     c08:	b087      	sub	sp, #28
     c0a:	198f      	adds	r7, r1, r6
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     c0c:	4e10      	ldr	r6, [pc, #64]	; (c50 <byteOut+0x68>)
     c0e:	ac0c      	add	r4, sp, #48	; 0x30
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     c10:	01ed      	lsls	r5, r5, #7
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     c12:	19ae      	adds	r6, r5, r6
     c14:	7824      	ldrb	r4, [r4, #0]
     c16:	9601      	str	r6, [sp, #4]
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     c18:	4e0c      	ldr	r6, [pc, #48]	; (c4c <byteOut+0x64>)
     c1a:	46b4      	mov	ip, r6
     c1c:	44ac      	add	ip, r5
     c1e:	4666      	mov	r6, ip
     c20:	6030      	str	r0, [r6, #0]

	for (uint8_t i = 0; i<8; ++i) {
		pinLow(SCK_PIN);
		if (byte & 0x80) {
     c22:	b266      	sxtb	r6, r4
     c24:	2e00      	cmp	r6, #0
     c26:	da05      	bge.n	c34 <byteOut+0x4c>
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     c28:	4e09      	ldr	r6, [pc, #36]	; (c50 <byteOut+0x68>)
     c2a:	46b4      	mov	ip, r6
     c2c:	448c      	add	ip, r1
     c2e:	4666      	mov	r6, ip
     c30:	6032      	str	r2, [r6, #0]
     c32:	e000      	b.n	c36 <byteOut+0x4e>
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     c34:	603a      	str	r2, [r7, #0]
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     c36:	9e01      	ldr	r6, [sp, #4]
     c38:	3b01      	subs	r3, #1
			pinHigh(MOSI_PIN);
			} else {
			pinLow(MOSI_PIN);
		}
		pinHigh(SCK_PIN);
		byte <<= 1;
     c3a:	0064      	lsls	r4, r4, #1
     c3c:	b2db      	uxtb	r3, r3
     c3e:	6030      	str	r0, [r6, #0]
     c40:	b2e4      	uxtb	r4, r4



void byteOut(Pin SCK_PIN, Pin MOSI_PIN, uint8_t byte) {

	for (uint8_t i = 0; i<8; ++i) {
     c42:	2b00      	cmp	r3, #0
     c44:	d1e8      	bne.n	c18 <byteOut+0x30>
			pinLow(MOSI_PIN);
		}
		pinHigh(SCK_PIN);
		byte <<= 1;
	}
}
     c46:	b007      	add	sp, #28
     c48:	bdf0      	pop	{r4, r5, r6, r7, pc}
     c4a:	46c0      	nop			; (mov r8, r8)
     c4c:	41004414 	.word	0x41004414
     c50:	41004418 	.word	0x41004418

00000c54 <byteIn>:

uint8_t byteIn(Pin SCK_PIN, Pin MISO_PIN) {
     c54:	b5f0      	push	{r4, r5, r6, r7, lr}
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     c56:	2501      	movs	r5, #1
     c58:	b085      	sub	sp, #20
     c5a:	9103      	str	r1, [sp, #12]
     c5c:	0011      	movs	r1, r2
     c5e:	0c06      	lsrs	r6, r0, #16
     c60:	9301      	str	r3, [sp, #4]
     c62:	b2f3      	uxtb	r3, r6
     c64:	002e      	movs	r6, r5
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     c66:	0e09      	lsrs	r1, r1, #24
     c68:	0c14      	lsrs	r4, r2, #16
     c6a:	9002      	str	r0, [sp, #8]
     c6c:	9200      	str	r2, [sp, #0]
     c6e:	408d      	lsls	r5, r1
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     c70:	0e02      	lsrs	r2, r0, #24
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     c72:	2108      	movs	r1, #8
	uint8_t byte = 0x00;
     c74:	2000      	movs	r0, #0
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     c76:	4096      	lsls	r6, r2
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     c78:	b2e2      	uxtb	r2, r4
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     c7a:	4c0a      	ldr	r4, [pc, #40]	; (ca4 <byteIn+0x50>)
     c7c:	01db      	lsls	r3, r3, #7
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     c7e:	01d2      	lsls	r2, r2, #7
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     c80:	191b      	adds	r3, r3, r4
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     c82:	1912      	adds	r2, r2, r4
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     c84:	615e      	str	r6, [r3, #20]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     c86:	6a14      	ldr	r4, [r2, #32]

	for (uint8_t i = 0; i<8; ++i) {
		pinLow(SCK_PIN);
		byte = (byte << 1 ) | pinRead(MISO_PIN);
     c88:	0040      	lsls	r0, r0, #1
     c8a:	402c      	ands	r4, r5
     c8c:	1e67      	subs	r7, r4, #1
     c8e:	41bc      	sbcs	r4, r7
     c90:	3901      	subs	r1, #1
     c92:	4304      	orrs	r4, r0
     c94:	b2c9      	uxtb	r1, r1
     c96:	b2e0      	uxtb	r0, r4
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     c98:	619e      	str	r6, [r3, #24]
}

uint8_t byteIn(Pin SCK_PIN, Pin MISO_PIN) {
	uint8_t byte = 0x00;

	for (uint8_t i = 0; i<8; ++i) {
     c9a:	2900      	cmp	r1, #0
     c9c:	d1f2      	bne.n	c84 <byteIn+0x30>
		pinLow(SCK_PIN);
		byte = (byte << 1 ) | pinRead(MISO_PIN);
		pinHigh(SCK_PIN);
	}
	return byte;
     c9e:	b005      	add	sp, #20
     ca0:	bdf0      	pop	{r4, r5, r6, r7, pc}
     ca2:	46c0      	nop			; (mov r8, r8)
     ca4:	41004400 	.word	0x41004400

00000ca8 <beep>:
#include <util.h>
#include <boardDefines.h>


void beep(u16_t toggles) {
     ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
}


inline static void pinToggle(Pin p) {
    PORT->Group[p.group].OUTTGL.reg = (1<<p.pin);
     caa:	2380      	movs	r3, #128	; 0x80
     cac:	2780      	movs	r7, #128	; 0x80
     cae:	0006      	movs	r6, r0

    pinToggle(LedPin);
    for (u16_t buzz = 0; buzz < toggles; ++buzz) {
     cb0:	2500      	movs	r5, #0
     cb2:	4c0a      	ldr	r4, [pc, #40]	; (cdc <beep+0x34>)
     cb4:	035b      	lsls	r3, r3, #13
     cb6:	61e3      	str	r3, [r4, #28]
     cb8:	03bf      	lsls	r7, r7, #14
     cba:	42b5      	cmp	r5, r6
     cbc:	d006      	beq.n	ccc <beep+0x24>
     cbe:	61e7      	str	r7, [r4, #28]
        pinToggle(buzzerPin);
        delay_us(122);
     cc0:	207a      	movs	r0, #122	; 0x7a
     cc2:	4b07      	ldr	r3, [pc, #28]	; (ce0 <beep+0x38>)


void beep(u16_t toggles) {

    pinToggle(LedPin);
    for (u16_t buzz = 0; buzz < toggles; ++buzz) {
     cc4:	3501      	adds	r5, #1
        pinToggle(buzzerPin);
        delay_us(122);
     cc6:	4798      	blx	r3


void beep(u16_t toggles) {

    pinToggle(LedPin);
    for (u16_t buzz = 0; buzz < toggles; ++buzz) {
     cc8:	b2ad      	uxth	r5, r5
     cca:	e7f6      	b.n	cba <beep+0x12>
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     ccc:	2380      	movs	r3, #128	; 0x80
     cce:	039b      	lsls	r3, r3, #14
     cd0:	6163      	str	r3, [r4, #20]
}


inline static void pinToggle(Pin p) {
    PORT->Group[p.group].OUTTGL.reg = (1<<p.pin);
     cd2:	2380      	movs	r3, #128	; 0x80
     cd4:	035b      	lsls	r3, r3, #13
     cd6:	61e3      	str	r3, [r4, #28]
    }
    pinLow(buzzerPin);
    pinToggle(LedPin);


}
     cd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     cda:	46c0      	nop			; (mov r8, r8)
     cdc:	41004400 	.word	0x41004400
     ce0:	00000e9d 	.word	0x00000e9d

00000ce4 <GclkInit>:
static uint32_t cycles_per_us = 48000000UL / 1000000;

void GclkInit() {


    SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     ce4:	23c2      	movs	r3, #194	; 0xc2
     ce6:	4a1a      	ldr	r2, [pc, #104]	; (d50 <GclkInit+0x6c>)
     ce8:	00db      	lsls	r3, r3, #3


static uint32_t cycles_per_ms = 48000000UL / 1000;
static uint32_t cycles_per_us = 48000000UL / 1000000;

void GclkInit() {
     cea:	b510      	push	{r4, lr}


    SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     cec:	6093      	str	r3, [r2, #8]
                           SYSCTRL_INTFLAG_DFLLRDY;
    NVMCTRL->CTRLB.reg |= NVMCTRL_CTRLB_RWS_HALF;
     cee:	2302      	movs	r3, #2
     cf0:	4818      	ldr	r0, [pc, #96]	; (d54 <GclkInit+0x70>)
     cf2:	6841      	ldr	r1, [r0, #4]
     cf4:	4319      	orrs	r1, r3
     cf6:	6041      	str	r1, [r0, #4]


    // start and enable external 32k crystal
    SYSCTRL->XOSC32K.reg = SYSCTRL_XOSC32K_ENABLE |
     cf8:	4917      	ldr	r1, [pc, #92]	; (d58 <GclkInit+0x74>)
     cfa:	8291      	strh	r1, [r2, #20]
                           SYSCTRL_XOSC32K_XTALEN |
                           SYSCTRL_XOSC32K_EN32K |
                           ( 6 << SYSCTRL_XOSC32K_STARTUP_Pos);

    //wait for crystal to warm up
    while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_XOSC32KRDY)) == 0);
     cfc:	68d1      	ldr	r1, [r2, #12]
     cfe:	4219      	tst	r1, r3
     d00:	d0fc      	beq.n	cfc <GclkInit+0x18>

#define NVM_DFLL_COARSE_POS    58
#define NVM_DFLL_COARSE_SIZE   6
#define NVM_DFLL_FINE_POS      64
#define NVM_DFLL_FINE_SIZE     10
    uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
     d02:	4b16      	ldr	r3, [pc, #88]	; (d5c <GclkInit+0x78>)
     d04:	6819      	ldr	r1, [r3, #0]
     d06:	0e89      	lsrs	r1, r1, #26
                         + (NVM_DFLL_COARSE_POS / 32))
                       >> (NVM_DFLL_COARSE_POS % 32))
                     & ((1 << NVM_DFLL_COARSE_SIZE) - 1);
    if (coarse == 0x3f) {
     d08:	293f      	cmp	r1, #63	; 0x3f
     d0a:	d100      	bne.n	d0e <GclkInit+0x2a>
        coarse = 0x1f;
     d0c:	3920      	subs	r1, #32
    }
    uint32_t fine =( *((uint32_t *)(NVMCTRL_OTP4)
                       + (NVM_DFLL_FINE_POS / 32))
                     >> (NVM_DFLL_FINE_POS % 32))
     d0e:	4b14      	ldr	r3, [pc, #80]	; (d60 <GclkInit+0x7c>)
                   & ((1 << NVM_DFLL_FINE_SIZE) - 1);
    if (fine == 0x3ff) {
     d10:	4814      	ldr	r0, [pc, #80]	; (d64 <GclkInit+0x80>)
                       >> (NVM_DFLL_COARSE_POS % 32))
                     & ((1 << NVM_DFLL_COARSE_SIZE) - 1);
    if (coarse == 0x3f) {
        coarse = 0x1f;
    }
    uint32_t fine =( *((uint32_t *)(NVMCTRL_OTP4)
     d12:	681b      	ldr	r3, [r3, #0]
     d14:	059b      	lsls	r3, r3, #22
     d16:	0d9b      	lsrs	r3, r3, #22
                       + (NVM_DFLL_FINE_POS / 32))
                     >> (NVM_DFLL_FINE_POS % 32))
                   & ((1 << NVM_DFLL_FINE_SIZE) - 1);
    if (fine == 0x3ff) {
     d18:	4283      	cmp	r3, r0
     d1a:	d100      	bne.n	d1e <GclkInit+0x3a>
        fine = 0x1ff;
     d1c:	4b12      	ldr	r3, [pc, #72]	; (d68 <GclkInit+0x84>)
    }


    // Disable ONDEMAND mode while writing configurations (errata 9905)
    SYSCTRL->DFLLCTRL.reg = dfll_ctrl_usb & ~SYSCTRL_DFLLCTRL_ONDEMAND;
     d1e:	4813      	ldr	r0, [pc, #76]	; (d6c <GclkInit+0x88>)
     d20:	8490      	strh	r0, [r2, #36]	; 0x24
    while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_DFLLRDY)) == 0);
     d22:	2010      	movs	r0, #16
     d24:	68d4      	ldr	r4, [r2, #12]
     d26:	4204      	tst	r4, r0
     d28:	d0fc      	beq.n	d24 <GclkInit+0x40>
    SYSCTRL->DFLLVAL.reg = SYSCTRL_DFLLVAL_COARSE(coarse) | SYSCTRL_DFLLVAL_FINE(fine);
     d2a:	0289      	lsls	r1, r1, #10
     d2c:	430b      	orrs	r3, r1
     d2e:	4908      	ldr	r1, [pc, #32]	; (d50 <GclkInit+0x6c>)
     d30:	628b      	str	r3, [r1, #40]	; 0x28


    //Wait and see if the DFLL output is good . . .
    while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_DFLLRDY)) == 0);
     d32:	2310      	movs	r3, #16
     d34:	68d1      	ldr	r1, [r2, #12]
     d36:	4219      	tst	r1, r3
     d38:	d0fc      	beq.n	d34 <GclkInit+0x50>


    SYSCTRL->DFLLCTRL.reg = dfll_ctrl_usb;
     d3a:	4a0d      	ldr	r2, [pc, #52]	; (d70 <GclkInit+0x8c>)
     d3c:	4b04      	ldr	r3, [pc, #16]	; (d50 <GclkInit+0x6c>)
     d3e:	849a      	strh	r2, [r3, #36]	; 0x24


    //For generic clock generator 0, select the DFLL48 Clock as input
    GCLK->GENDIV.reg  = (GCLK_GENDIV_DIV(1)  | GCLK_GENDIV_ID(0));
     d40:	2280      	movs	r2, #128	; 0x80
     d42:	4b0c      	ldr	r3, [pc, #48]	; (d74 <GclkInit+0x90>)
     d44:	0052      	lsls	r2, r2, #1
     d46:	609a      	str	r2, [r3, #8]
    GCLK->GENCTRL.reg = (GCLK_GENCTRL_ID(0)  | (GCLK_GENCTRL_SRC_DFLL48M) | (GCLK_GENCTRL_GENEN));
     d48:	4a0b      	ldr	r2, [pc, #44]	; (d78 <GclkInit+0x94>)
     d4a:	605a      	str	r2, [r3, #4]
}
     d4c:	bd10      	pop	{r4, pc}
     d4e:	46c0      	nop			; (mov r8, r8)
     d50:	40000800 	.word	0x40000800
     d54:	41004000 	.word	0x41004000
     d58:	0000060e 	.word	0x0000060e
     d5c:	00806024 	.word	0x00806024
     d60:	00806028 	.word	0x00806028
     d64:	000003ff 	.word	0x000003ff
     d68:	000001ff 	.word	0x000001ff
     d6c:	00000522 	.word	0x00000522
     d70:	000005a2 	.word	0x000005a2
     d74:	40000c00 	.word	0x40000c00
     d78:	00010700 	.word	0x00010700

00000d7c <RtcInit>:

void RtcInit() {

    SYSCTRL->OSC32K.reg = SYSCTRL_OSC32K_ENABLE |
     d7c:	4b27      	ldr	r3, [pc, #156]	; (e1c <RtcInit+0xa0>)
     d7e:	4a28      	ldr	r2, [pc, #160]	; (e20 <RtcInit+0xa4>)
                          SYSCTRL_OSC32K_EN32K |
                          ( 6 << SYSCTRL_OSC32K_STARTUP_Pos);


    SYSCTRL->OSC32K.bit.CALIB =
     d80:	4828      	ldr	r0, [pc, #160]	; (e24 <RtcInit+0xa8>)
    GCLK->GENCTRL.reg = (GCLK_GENCTRL_ID(0)  | (GCLK_GENCTRL_SRC_DFLL48M) | (GCLK_GENCTRL_GENEN));
}

void RtcInit() {

    SYSCTRL->OSC32K.reg = SYSCTRL_OSC32K_ENABLE |
     d82:	619a      	str	r2, [r3, #24]
                          SYSCTRL_OSC32K_EN32K |
                          ( 6 << SYSCTRL_OSC32K_STARTUP_Pos);


    SYSCTRL->OSC32K.bit.CALIB =
        ((*(uint32_t *)FUSES_OSC32K_CAL_ADDR >>
     d84:	4a28      	ldr	r2, [pc, #160]	; (e28 <RtcInit+0xac>)
    SYSCTRL->OSC32K.reg = SYSCTRL_OSC32K_ENABLE |
                          SYSCTRL_OSC32K_EN32K |
                          ( 6 << SYSCTRL_OSC32K_STARTUP_Pos);


    SYSCTRL->OSC32K.bit.CALIB =
     d86:	6999      	ldr	r1, [r3, #24]
     d88:	6812      	ldr	r2, [r2, #0]
     d8a:	4001      	ands	r1, r0
     d8c:	04d2      	lsls	r2, r2, #19
     d8e:	0e52      	lsrs	r2, r2, #25
     d90:	0412      	lsls	r2, r2, #16
     d92:	4311      	orrs	r1, r2
     d94:	6199      	str	r1, [r3, #24]
        ((*(uint32_t *)FUSES_OSC32K_CAL_ADDR >>
          FUSES_OSC32K_CAL_Pos) & 0x7Ful);

    SYSCTRL->OSC32K.reg = SYSCTRL_OSC32K_STARTUP( 0x6u ) | /* cf table 15.10 of product datasheet in chapter 15.8.6 */
     d96:	4925      	ldr	r1, [pc, #148]	; (e2c <RtcInit+0xb0>)
     d98:	6199      	str	r1, [r3, #24]
                          SYSCTRL_OSC32K_EN32K;
    SYSCTRL->OSC32K.bit.CALIB =
     d9a:	6999      	ldr	r1, [r3, #24]
     d9c:	4008      	ands	r0, r1
        ((*(uint32_t *)FUSES_OSC32K_CAL_ADDR >>
          FUSES_OSC32K_CAL_Pos) & 0x7Ful);

    SYSCTRL->OSC32K.bit.ENABLE = 1; /* separate call, as described in chapter 15.6.3 */
     d9e:	2102      	movs	r1, #2
        ((*(uint32_t *)FUSES_OSC32K_CAL_ADDR >>
          FUSES_OSC32K_CAL_Pos) & 0x7Ful);

    SYSCTRL->OSC32K.reg = SYSCTRL_OSC32K_STARTUP( 0x6u ) | /* cf table 15.10 of product datasheet in chapter 15.8.6 */
                          SYSCTRL_OSC32K_EN32K;
    SYSCTRL->OSC32K.bit.CALIB =
     da0:	4302      	orrs	r2, r0
     da2:	619a      	str	r2, [r3, #24]
        ((*(uint32_t *)FUSES_OSC32K_CAL_ADDR >>
          FUSES_OSC32K_CAL_Pos) & 0x7Ful);

    SYSCTRL->OSC32K.bit.ENABLE = 1; /* separate call, as described in chapter 15.6.3 */
     da4:	699a      	ldr	r2, [r3, #24]
     da6:	430a      	orrs	r2, r1
     da8:	619a      	str	r2, [r3, #24]

    while (  (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_OSC32KRDY) == 0 ) {
     daa:	2204      	movs	r2, #4
     dac:	68d9      	ldr	r1, [r3, #12]
     dae:	4211      	tst	r1, r2
     db0:	d0fc      	beq.n	dac <RtcInit+0x30>





    GCLK->GENDIV.reg = GCLK_GENDIV_ID(2) | GCLK_GENDIV_DIV(1);
     db2:	2281      	movs	r2, #129	; 0x81
     db4:	4b1e      	ldr	r3, [pc, #120]	; (e30 <RtcInit+0xb4>)
     db6:	0052      	lsls	r2, r2, #1
     db8:	609a      	str	r2, [r3, #8]

    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(2) |
     dba:	4a1e      	ldr	r2, [pc, #120]	; (e34 <RtcInit+0xb8>)
     dbc:	605a      	str	r2, [r3, #4]
                        GCLK_GENCTRL_SRC(GCLK_GENCTRL_SRC_XOSC32K) |
                        GCLK_GENCTRL_IDC |
                        GCLK_GENCTRL_RUNSTDBY |
                        GCLK_GENCTRL_GENEN;
    while (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY);
     dbe:	785a      	ldrb	r2, [r3, #1]
     dc0:	b252      	sxtb	r2, r2
     dc2:	2a00      	cmp	r2, #0
     dc4:	dbfb      	blt.n	dbe <RtcInit+0x42>

// Configure RTC
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(RTC_GCLK_ID) |
     dc6:	4a1c      	ldr	r2, [pc, #112]	; (e38 <RtcInit+0xbc>)
     dc8:	4b19      	ldr	r3, [pc, #100]	; (e30 <RtcInit+0xb4>)
     dca:	805a      	strh	r2, [r3, #2]
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    RTC->MODE1.CTRL.reg = RTC_MODE1_CTRL_MODE_COUNT16;
     dcc:	2204      	movs	r2, #4
     dce:	4b1b      	ldr	r3, [pc, #108]	; (e3c <RtcInit+0xc0>)
     dd0:	801a      	strh	r2, [r3, #0]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     dd2:	7a9a      	ldrb	r2, [r3, #10]
     dd4:	4919      	ldr	r1, [pc, #100]	; (e3c <RtcInit+0xc0>)
     dd6:	09d2      	lsrs	r2, r2, #7
     dd8:	d1fb      	bne.n	dd2 <RtcInit+0x56>

// Prescaler needs to be enabled separately from the mode for some reason
    RTC->MODE1.CTRL.reg |= RTC_MODE1_CTRL_PRESCALER_DIV32;
     dda:	20a0      	movs	r0, #160	; 0xa0
     ddc:	880a      	ldrh	r2, [r1, #0]
     dde:	00c0      	lsls	r0, r0, #3
     de0:	4302      	orrs	r2, r0
     de2:	800a      	strh	r2, [r1, #0]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     de4:	7a9a      	ldrb	r2, [r3, #10]
     de6:	09d2      	lsrs	r2, r2, #7
     de8:	d1fc      	bne.n	de4 <RtcInit+0x68>

    RTC->MODE1.PER.reg = 998;
     dea:	4915      	ldr	r1, [pc, #84]	; (e40 <RtcInit+0xc4>)
     dec:	4a13      	ldr	r2, [pc, #76]	; (e3c <RtcInit+0xc0>)
     dee:	8291      	strh	r1, [r2, #20]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     df0:	7a99      	ldrb	r1, [r3, #10]
     df2:	4a12      	ldr	r2, [pc, #72]	; (e3c <RtcInit+0xc0>)
     df4:	09c9      	lsrs	r1, r1, #7
     df6:	d1fb      	bne.n	df0 <RtcInit+0x74>

    RTC->MODE1.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_ADDR(0x10);
     df8:	8851      	ldrh	r1, [r2, #2]
     dfa:	4812      	ldr	r0, [pc, #72]	; (e44 <RtcInit+0xc8>)
     dfc:	4301      	orrs	r1, r0
     dfe:	8051      	strh	r1, [r2, #2]

    RTC->MODE1.INTENSET.reg = RTC_MODE1_INTENSET_OVF;
     e00:	2180      	movs	r1, #128	; 0x80

    RTC->MODE1.CTRL.bit.ENABLE = 1;
     e02:	2002      	movs	r0, #2
    RTC->MODE1.PER.reg = 998;
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);

    RTC->MODE1.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_ADDR(0x10);

    RTC->MODE1.INTENSET.reg = RTC_MODE1_INTENSET_OVF;
     e04:	71d1      	strb	r1, [r2, #7]

    RTC->MODE1.CTRL.bit.ENABLE = 1;
     e06:	8811      	ldrh	r1, [r2, #0]
     e08:	4301      	orrs	r1, r0
     e0a:	8011      	strh	r1, [r2, #0]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     e0c:	7a9a      	ldrb	r2, [r3, #10]
     e0e:	09d2      	lsrs	r2, r2, #7
     e10:	d1fc      	bne.n	e0c <RtcInit+0x90>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     e12:	4b0d      	ldr	r3, [pc, #52]	; (e48 <RtcInit+0xcc>)
     e14:	3208      	adds	r2, #8
     e16:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(RTC_IRQn);
}
     e18:	4770      	bx	lr
     e1a:	46c0      	nop			; (mov r8, r8)
     e1c:	40000800 	.word	0x40000800
     e20:	00000606 	.word	0x00000606
     e24:	ff80ffff 	.word	0xff80ffff
     e28:	00806024 	.word	0x00806024
     e2c:	00000604 	.word	0x00000604
     e30:	40000c00 	.word	0x40000c00
     e34:	00230002 	.word	0x00230002
     e38:	00004204 	.word	0x00004204
     e3c:	40001400 	.word	0x40001400
     e40:	000003e6 	.word	0x000003e6
     e44:	00004010 	.word	0x00004010
     e48:	e000e100 	.word	0xe000e100

00000e4c <gclkEnable>:


void gclkEnable(u32_t id, u32_t src, u32_t div) {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
     e4c:	230f      	movs	r3, #15
     e4e:	4018      	ands	r0, r3
     e50:	4b08      	ldr	r3, [pc, #32]	; (e74 <gclkEnable+0x28>)
     e52:	0212      	lsls	r2, r2, #8
     e54:	401a      	ands	r2, r3
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     e56:	23f8      	movs	r3, #248	; 0xf8
     e58:	0209      	lsls	r1, r1, #8
     e5a:	015b      	lsls	r3, r3, #5
     e5c:	4019      	ands	r1, r3
     e5e:	2380      	movs	r3, #128	; 0x80

    NVIC_EnableIRQ(RTC_IRQn);
}


void gclkEnable(u32_t id, u32_t src, u32_t div) {
     e60:	b510      	push	{r4, lr}
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     e62:	025b      	lsls	r3, r3, #9
    NVIC_EnableIRQ(RTC_IRQn);
}


void gclkEnable(u32_t id, u32_t src, u32_t div) {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
     e64:	4c04      	ldr	r4, [pc, #16]	; (e78 <gclkEnable+0x2c>)
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     e66:	4319      	orrs	r1, r3
    NVIC_EnableIRQ(RTC_IRQn);
}


void gclkEnable(u32_t id, u32_t src, u32_t div) {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
     e68:	4302      	orrs	r2, r0
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     e6a:	4308      	orrs	r0, r1
    NVIC_EnableIRQ(RTC_IRQn);
}


void gclkEnable(u32_t id, u32_t src, u32_t div) {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
     e6c:	60a2      	str	r2, [r4, #8]
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     e6e:	6060      	str	r0, [r4, #4]
}
     e70:	bd10      	pop	{r4, pc}
     e72:	46c0      	nop			; (mov r8, r8)
     e74:	00ffff00 	.word	0x00ffff00
     e78:	40000c00 	.word	0x40000c00

00000e7c <delayInit>:


void delayInit(void) {
    cycles_per_ms = 48000000UL;
    cycles_per_ms /= 1000;
     e7c:	4b04      	ldr	r3, [pc, #16]	; (e90 <delayInit+0x14>)
     e7e:	4a05      	ldr	r2, [pc, #20]	; (e94 <delayInit+0x18>)
     e80:	601a      	str	r2, [r3, #0]
    cycles_per_us = cycles_per_ms / 1000;
     e82:	2230      	movs	r2, #48	; 0x30
     e84:	605a      	str	r2, [r3, #4]

    SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     e86:	4b04      	ldr	r3, [pc, #16]	; (e98 <delayInit+0x1c>)
     e88:	3a2b      	subs	r2, #43	; 0x2b
     e8a:	601a      	str	r2, [r3, #0]
}
     e8c:	4770      	bx	lr
     e8e:	46c0      	nop			; (mov r8, r8)
     e90:	20000004 	.word	0x20000004
     e94:	0000bb80 	.word	0x0000bb80
     e98:	e000e010 	.word	0xe000e010

00000e9c <delay_us>:
/**
 * \brief Delay loop to delay at least n number of microseconds
 *
 * \param n  Number of microseconds to wait
 */
void delay_us(uint32_t n) {
     e9c:	b570      	push	{r4, r5, r6, lr}
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
        SysTick->VAL = 0;

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     e9e:	2480      	movs	r4, #128	; 0x80

static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
        SysTick->VAL = 0;
     ea0:	2100      	movs	r1, #0
    while (n--) {
        /* Devide up to blocks of 10u */
        delay_cycles(cycles_per_us);
     ea2:	4b08      	ldr	r3, [pc, #32]	; (ec4 <delay_us+0x28>)


static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
     ea4:	4a08      	ldr	r2, [pc, #32]	; (ec8 <delay_us+0x2c>)
     ea6:	685b      	ldr	r3, [r3, #4]
        SysTick->VAL = 0;

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     ea8:	0264      	lsls	r4, r4, #9
 * \brief Delay loop to delay at least n number of microseconds
 *
 * \param n  Number of microseconds to wait
 */
void delay_us(uint32_t n) {
    while (n--) {
     eaa:	3801      	subs	r0, #1
     eac:	d308      	bcc.n	ec0 <delay_us+0x24>



static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
     eae:	2b00      	cmp	r3, #0
     eb0:	d0fb      	beq.n	eaa <delay_us+0xe>
     eb2:	4e05      	ldr	r6, [pc, #20]	; (ec8 <delay_us+0x2c>)
        SysTick->LOAD = n;
     eb4:	6053      	str	r3, [r2, #4]
        SysTick->VAL = 0;
     eb6:	6091      	str	r1, [r2, #8]

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     eb8:	6835      	ldr	r5, [r6, #0]
     eba:	4225      	tst	r5, r4
     ebc:	d0fc      	beq.n	eb8 <delay_us+0x1c>
     ebe:	e7f4      	b.n	eaa <delay_us+0xe>
        /* Devide up to blocks of 10u */
        delay_cycles(cycles_per_us);
    }
}
     ec0:	bd70      	pop	{r4, r5, r6, pc}
     ec2:	46c0      	nop			; (mov r8, r8)
     ec4:	20000004 	.word	0x20000004
     ec8:	e000e010 	.word	0xe000e010

00000ecc <delay_ms>:
/**
 * \brief Delay loop to delay at least n number of milliseconds
 *
 * \param n  Number of milliseconds to wait
 */
void delay_ms(uint32_t n) {
     ecc:	b570      	push	{r4, r5, r6, lr}
     ece:	2480      	movs	r4, #128	; 0x80

static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
        SysTick->VAL = 0;
     ed0:	2100      	movs	r1, #0
    while (n--) {
        /* Devide up to blocks of 1ms */
        delay_cycles(cycles_per_ms);
     ed2:	4b08      	ldr	r3, [pc, #32]	; (ef4 <delay_ms+0x28>)


static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
     ed4:	4a08      	ldr	r2, [pc, #32]	; (ef8 <delay_ms+0x2c>)
     ed6:	681b      	ldr	r3, [r3, #0]
        SysTick->VAL = 0;

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     ed8:	0264      	lsls	r4, r4, #9
 * \brief Delay loop to delay at least n number of milliseconds
 *
 * \param n  Number of milliseconds to wait
 */
void delay_ms(uint32_t n) {
    while (n--) {
     eda:	3801      	subs	r0, #1
     edc:	d308      	bcc.n	ef0 <delay_ms+0x24>



static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
     ede:	2b00      	cmp	r3, #0
     ee0:	d0fb      	beq.n	eda <delay_ms+0xe>
     ee2:	4e05      	ldr	r6, [pc, #20]	; (ef8 <delay_ms+0x2c>)
        SysTick->LOAD = n;
     ee4:	6053      	str	r3, [r2, #4]
        SysTick->VAL = 0;
     ee6:	6091      	str	r1, [r2, #8]

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     ee8:	6835      	ldr	r5, [r6, #0]
     eea:	4225      	tst	r5, r4
     eec:	d0fc      	beq.n	ee8 <delay_ms+0x1c>
     eee:	e7f4      	b.n	eda <delay_ms+0xe>
        /* Devide up to blocks of 1ms */
        delay_cycles(cycles_per_ms);
    }
}
     ef0:	bd70      	pop	{r4, r5, r6, pc}
     ef2:	46c0      	nop			; (mov r8, r8)
     ef4:	20000004 	.word	0x20000004
     ef8:	e000e010 	.word	0xe000e010

00000efc <RTC_Handler>:


volatile uint32_t time_ms = 0;

void RTC_Handler(void) {
    time_ms += 1000;
     efc:	21fa      	movs	r1, #250	; 0xfa
     efe:	4a04      	ldr	r2, [pc, #16]	; (f10 <RTC_Handler+0x14>)
     f00:	0089      	lsls	r1, r1, #2
     f02:	6813      	ldr	r3, [r2, #0]
     f04:	185b      	adds	r3, r3, r1
     f06:	6013      	str	r3, [r2, #0]
    RTC->MODE1.INTFLAG.reg = 0xFF;
     f08:	22ff      	movs	r2, #255	; 0xff
     f0a:	4b02      	ldr	r3, [pc, #8]	; (f14 <RTC_Handler+0x18>)
     f0c:	721a      	strb	r2, [r3, #8]
}
     f0e:	4770      	bx	lr
     f10:	2000045c 	.word	0x2000045c
     f14:	40001400 	.word	0x40001400

00000f18 <millis>:

uint32_t millis(void) {
     f18:	b530      	push	{r4, r5, lr}
    uint32_t ms;
    ATOMIC_SECTION_ENTER
     f1a:	f3ef 8110 	mrs	r1, PRIMASK
     f1e:	b672      	cpsid	i
    ms = time_ms + RTC->MODE1.COUNT.reg;
     f20:	4a08      	ldr	r2, [pc, #32]	; (f44 <millis+0x2c>)
     f22:	4d09      	ldr	r5, [pc, #36]	; (f48 <millis+0x30>)
     f24:	8a10      	ldrh	r0, [r2, #16]
     f26:	682b      	ldr	r3, [r5, #0]
    if (RTC->MODE1.INTFLAG.bit.OVF)
     f28:	7a14      	ldrb	r4, [r2, #8]
}

uint32_t millis(void) {
    uint32_t ms;
    ATOMIC_SECTION_ENTER
    ms = time_ms + RTC->MODE1.COUNT.reg;
     f2a:	b280      	uxth	r0, r0
    if (RTC->MODE1.INTFLAG.bit.OVF)
     f2c:	09e4      	lsrs	r4, r4, #7
     f2e:	d004      	beq.n	f3a <millis+0x22>
        ms = time_ms + RTC->MODE1.COUNT.reg + 1000;
     f30:	8a13      	ldrh	r3, [r2, #16]
     f32:	22fa      	movs	r2, #250	; 0xfa
     f34:	6828      	ldr	r0, [r5, #0]
     f36:	0092      	lsls	r2, r2, #2
     f38:	1880      	adds	r0, r0, r2
     f3a:	18c0      	adds	r0, r0, r3
    ATOMIC_SECTION_LEAVE
     f3c:	f381 8810 	msr	PRIMASK, r1
    return ms;
}
     f40:	bd30      	pop	{r4, r5, pc}
     f42:	46c0      	nop			; (mov r8, r8)
     f44:	40001400 	.word	0x40001400
     f48:	2000045c 	.word	0x2000045c

00000f4c <TC4Init>:

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC4_GCLK_ID) |
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC4;
     f4c:	2180      	movs	r1, #128	; 0x80
    return ms;
}

void TC4Init() {

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC4_GCLK_ID) |
     f4e:	4a0d      	ldr	r2, [pc, #52]	; (f84 <TC4Init+0x38>)
     f50:	4b0d      	ldr	r3, [pc, #52]	; (f88 <TC4Init+0x3c>)
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC4;
     f52:	0149      	lsls	r1, r1, #5
    return ms;
}

void TC4Init() {

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC4_GCLK_ID) |
     f54:	805a      	strh	r2, [r3, #2]
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC4;
     f56:	4a0d      	ldr	r2, [pc, #52]	; (f8c <TC4Init+0x40>)
     f58:	6a13      	ldr	r3, [r2, #32]
     f5a:	430b      	orrs	r3, r1
     f5c:	6213      	str	r3, [r2, #32]

    TC4->COUNT8.CTRLA.reg = TC_CTRLA_MODE_COUNT8 |
     f5e:	4b0c      	ldr	r3, [pc, #48]	; (f90 <TC4Init+0x44>)
     f60:	4a0c      	ldr	r2, [pc, #48]	; (f94 <TC4Init+0x48>)

    TC4->COUNT8.INTENSET.reg = TC_INTENSET_OVF;

    TC4->COUNT8.EVCTRL.reg = TC_EVCTRL_OVFEO;

    TC4->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
     f62:	2102      	movs	r1, #2
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC4;

    TC4->COUNT8.CTRLA.reg = TC_CTRLA_MODE_COUNT8 |
     f64:	801a      	strh	r2, [r3, #0]
                            TC_CTRLA_RUNSTDBY |
                            TC_CTRLA_PRESCALER_DIV2;
    TC4->COUNT8.PER.reg = 0x41;
     f66:	2241      	movs	r2, #65	; 0x41
     f68:	751a      	strb	r2, [r3, #20]

    TC4->COUNT8.INTENSET.reg = TC_INTENSET_OVF;
     f6a:	3a40      	subs	r2, #64	; 0x40
     f6c:	735a      	strb	r2, [r3, #13]

    TC4->COUNT8.EVCTRL.reg = TC_EVCTRL_OVFEO;
     f6e:	32ff      	adds	r2, #255	; 0xff
     f70:	815a      	strh	r2, [r3, #10]

    TC4->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
     f72:	881a      	ldrh	r2, [r3, #0]
     f74:	430a      	orrs	r2, r1
     f76:	801a      	strh	r2, [r3, #0]
     f78:	2280      	movs	r2, #128	; 0x80
     f7a:	4b07      	ldr	r3, [pc, #28]	; (f98 <TC4Init+0x4c>)
     f7c:	0312      	lsls	r2, r2, #12
     f7e:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(TC4_IRQn);
}
     f80:	4770      	bx	lr
     f82:	46c0      	nop			; (mov r8, r8)
     f84:	0000421c 	.word	0x0000421c
     f88:	40000c00 	.word	0x40000c00
     f8c:	40000400 	.word	0x40000400
     f90:	42003000 	.word	0x42003000
     f94:	00000904 	.word	0x00000904
     f98:	e000e100 	.word	0xe000e100

00000f9c <TC4_Handler>:

void TC4_Handler( void ) {
    TC4->COUNT8.INTFLAG.reg = 0xFF;
     f9c:	22ff      	movs	r2, #255	; 0xff
     f9e:	4b03      	ldr	r3, [pc, #12]	; (fac <TC4_Handler+0x10>)
     fa0:	739a      	strb	r2, [r3, #14]
    takeSample = true;
     fa2:	4b03      	ldr	r3, [pc, #12]	; (fb0 <TC4_Handler+0x14>)
     fa4:	3afe      	subs	r2, #254	; 0xfe
     fa6:	701a      	strb	r2, [r3, #0]
}
     fa8:	4770      	bx	lr
     faa:	46c0      	nop			; (mov r8, r8)
     fac:	42003000 	.word	0x42003000
     fb0:	20000463 	.word	0x20000463

00000fb4 <TC5Init>:

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC5_GCLK_ID) |
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC5;
     fb4:	2180      	movs	r1, #128	; 0x80
    takeSample = true;
}

void TC5Init() {

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC5_GCLK_ID) |
     fb6:	4a0d      	ldr	r2, [pc, #52]	; (fec <TC5Init+0x38>)
     fb8:	4b0d      	ldr	r3, [pc, #52]	; (ff0 <TC5Init+0x3c>)
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC5;
     fba:	0189      	lsls	r1, r1, #6
    takeSample = true;
}

void TC5Init() {

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC5_GCLK_ID) |
     fbc:	805a      	strh	r2, [r3, #2]
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC5;
     fbe:	4a0d      	ldr	r2, [pc, #52]	; (ff4 <TC5Init+0x40>)
     fc0:	6a13      	ldr	r3, [r2, #32]
     fc2:	430b      	orrs	r3, r1
     fc4:	6213      	str	r3, [r2, #32]

    TC5->COUNT8.CTRLA.reg = TC_CTRLA_MODE_COUNT8 |
     fc6:	4b0c      	ldr	r3, [pc, #48]	; (ff8 <TC5Init+0x44>)
     fc8:	4a0c      	ldr	r2, [pc, #48]	; (ffc <TC5Init+0x48>)

    TC5->COUNT8.INTENSET.reg = TC_INTENSET_OVF;

    TC5->COUNT8.EVCTRL.reg = TC_EVCTRL_OVFEO;

    TC5->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
     fca:	2102      	movs	r1, #2
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC5;

    TC5->COUNT8.CTRLA.reg = TC_CTRLA_MODE_COUNT8 |
     fcc:	801a      	strh	r2, [r3, #0]
                            TC_CTRLA_RUNSTDBY |
                            TC_CTRLA_PRESCALER_DIV256;
							
    TC5->COUNT8.PER.reg = 0x20;
     fce:	2220      	movs	r2, #32
     fd0:	751a      	strb	r2, [r3, #20]

    TC5->COUNT8.INTENSET.reg = TC_INTENSET_OVF;
     fd2:	3a1f      	subs	r2, #31
     fd4:	735a      	strb	r2, [r3, #13]

    TC5->COUNT8.EVCTRL.reg = TC_EVCTRL_OVFEO;
     fd6:	32ff      	adds	r2, #255	; 0xff
     fd8:	815a      	strh	r2, [r3, #10]

    TC5->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
     fda:	881a      	ldrh	r2, [r3, #0]
     fdc:	430a      	orrs	r2, r1
     fde:	801a      	strh	r2, [r3, #0]
     fe0:	2280      	movs	r2, #128	; 0x80
     fe2:	4b07      	ldr	r3, [pc, #28]	; (1000 <TC5Init+0x4c>)
     fe4:	0352      	lsls	r2, r2, #13
     fe6:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(TC5_IRQn);
}
     fe8:	4770      	bx	lr
     fea:	46c0      	nop			; (mov r8, r8)
     fec:	0000421c 	.word	0x0000421c
     ff0:	40000c00 	.word	0x40000c00
     ff4:	40000400 	.word	0x40000400
     ff8:	42003400 	.word	0x42003400
     ffc:	00000e04 	.word	0x00000e04
    1000:	e000e100 	.word	0xe000e100

00001004 <TC5_Handler>:

void TC5_Handler( void ) {
    TC5->COUNT8.INTFLAG.reg = 0xFF;
    1004:	22ff      	movs	r2, #255	; 0xff
    1006:	4b03      	ldr	r3, [pc, #12]	; (1014 <TC5_Handler+0x10>)
    1008:	739a      	strb	r2, [r3, #14]
    writeLog = true;
    100a:	4b03      	ldr	r3, [pc, #12]	; (1018 <TC5_Handler+0x14>)
    100c:	3afe      	subs	r2, #254	; 0xfe
    100e:	701a      	strb	r2, [r3, #0]
    1010:	4770      	bx	lr
    1012:	46c0      	nop			; (mov r8, r8)
    1014:	42003400 	.word	0x42003400
    1018:	20000461 	.word	0x20000461

0000101c <dmaInit>:
#include <util.h>

DMA_DESC_ALIGN DmacDescriptor dma_descriptors[12];
DMA_DESC_ALIGN DmacDescriptor dma_descriptors_wb[12];

void dmaInit() {
    101c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	memset(&dma_descriptors, 0, sizeof(dma_descriptors));
    101e:	27c0      	movs	r7, #192	; 0xc0
    1020:	4d10      	ldr	r5, [pc, #64]	; (1064 <dmaInit+0x48>)
    1022:	003a      	movs	r2, r7
    1024:	4e10      	ldr	r6, [pc, #64]	; (1068 <dmaInit+0x4c>)
    1026:	0028      	movs	r0, r5
    1028:	2100      	movs	r1, #0
    102a:	47b0      	blx	r6
	memset(&dma_descriptors_wb, 0, sizeof(dma_descriptors_wb));
    102c:	4c0f      	ldr	r4, [pc, #60]	; (106c <dmaInit+0x50>)
    102e:	003a      	movs	r2, r7
    1030:	2100      	movs	r1, #0
    1032:	0020      	movs	r0, r4
    1034:	47b0      	blx	r6

	PM->AHBMASK.reg |= PM_AHBMASK_DMAC;
    1036:	2120      	movs	r1, #32
    1038:	4b0d      	ldr	r3, [pc, #52]	; (1070 <dmaInit+0x54>)
    103a:	695a      	ldr	r2, [r3, #20]
    103c:	430a      	orrs	r2, r1
    103e:	615a      	str	r2, [r3, #20]
	PM->APBBMASK.reg |= PM_APBBMASK_DMAC;
    1040:	69da      	ldr	r2, [r3, #28]
    1042:	3910      	subs	r1, #16
    1044:	430a      	orrs	r2, r1
    1046:	61da      	str	r2, [r3, #28]

	DMAC->CTRL.bit.DMAENABLE = 0;
    1048:	4b0a      	ldr	r3, [pc, #40]	; (1074 <dmaInit+0x58>)
    104a:	390e      	subs	r1, #14
    104c:	881a      	ldrh	r2, [r3, #0]
    104e:	438a      	bics	r2, r1
    1050:	801a      	strh	r2, [r3, #0]
	DMAC->CTRL.bit.SWRST = 1;
    1052:	881a      	ldrh	r2, [r3, #0]
    1054:	3901      	subs	r1, #1
    1056:	430a      	orrs	r2, r1
    1058:	801a      	strh	r2, [r3, #0]

	DMAC->BASEADDR.reg = (unsigned) &dma_descriptors;
	DMAC->WRBADDR.reg = (unsigned) &dma_descriptors_wb;

	DMAC->CTRL.reg = DMAC_CTRL_DMAENABLE | DMAC_CTRL_LVLEN(0xf);
    105a:	4a07      	ldr	r2, [pc, #28]	; (1078 <dmaInit+0x5c>)
	PM->APBBMASK.reg |= PM_APBBMASK_DMAC;

	DMAC->CTRL.bit.DMAENABLE = 0;
	DMAC->CTRL.bit.SWRST = 1;

	DMAC->BASEADDR.reg = (unsigned) &dma_descriptors;
    105c:	635d      	str	r5, [r3, #52]	; 0x34
	DMAC->WRBADDR.reg = (unsigned) &dma_descriptors_wb;
    105e:	639c      	str	r4, [r3, #56]	; 0x38

	DMAC->CTRL.reg = DMAC_CTRL_DMAENABLE | DMAC_CTRL_LVLEN(0xf);
    1060:	801a      	strh	r2, [r3, #0]
}
    1062:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1064:	20000530 	.word	0x20000530
    1068:	000025e1 	.word	0x000025e1
    106c:	20000470 	.word	0x20000470
    1070:	40000400 	.word	0x40000400
    1074:	41004800 	.word	0x41004800
    1078:	00000f02 	.word	0x00000f02

0000107c <flight>:
#include <util.h>
#include <boardDefines.h>



void flight(Altimeter *my_altimeter) {
    107c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}



    switch(my_altimeter->myFlightState) {
    107e:	7803      	ldrb	r3, [r0, #0]
#include <util.h>
#include <boardDefines.h>



void flight(Altimeter *my_altimeter) {
    1080:	0004      	movs	r4, r0



    switch(my_altimeter->myFlightState) {
    1082:	2b00      	cmp	r3, #0
    1084:	d13b      	bne.n	10fe <flight+0x82>
    case flightStatrup:

        my_altimeter->myIMU.gravityOffsetBuffer = 	my_altimeter->myIMU.gravityOffsetBuffer*0.5 + my_altimeter->myIMU.accelZ*0.5;
    1086:	4d1e      	ldr	r5, [pc, #120]	; (1100 <flight+0x84>)
    1088:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
    108a:	47a8      	blx	r5
    108c:	4e1d      	ldr	r6, [pc, #116]	; (1104 <flight+0x88>)
    108e:	2200      	movs	r2, #0
    1090:	4b1d      	ldr	r3, [pc, #116]	; (1108 <flight+0x8c>)
    1092:	47b0      	blx	r6
    1094:	9000      	str	r0, [sp, #0]
    1096:	9101      	str	r1, [sp, #4]
    1098:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
    109a:	47a8      	blx	r5
    109c:	2200      	movs	r2, #0
    109e:	4b1a      	ldr	r3, [pc, #104]	; (1108 <flight+0x8c>)
    10a0:	47b0      	blx	r6
    10a2:	4e1a      	ldr	r6, [pc, #104]	; (110c <flight+0x90>)
    10a4:	0002      	movs	r2, r0
    10a6:	000b      	movs	r3, r1
    10a8:	9800      	ldr	r0, [sp, #0]
    10aa:	9901      	ldr	r1, [sp, #4]
    10ac:	47b0      	blx	r6
    10ae:	4b18      	ldr	r3, [pc, #96]	; (1110 <flight+0x94>)
    10b0:	4798      	blx	r3
    10b2:	63e0      	str	r0, [r4, #60]	; 0x3c

        my_altimeter->myBarometer.groundOffsetBuffer = my_altimeter->myBarometer.groundOffsetBuffer*0.5 + my_altimeter->myBarometer.heightFeet*0.5;
    10b4:	6b20      	ldr	r0, [r4, #48]	; 0x30
    10b6:	47a8      	blx	r5
    10b8:	2200      	movs	r2, #0
    10ba:	4b13      	ldr	r3, [pc, #76]	; (1108 <flight+0x8c>)
    10bc:	4e11      	ldr	r6, [pc, #68]	; (1104 <flight+0x88>)
    10be:	47b0      	blx	r6
    10c0:	0006      	movs	r6, r0
    10c2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    10c4:	000f      	movs	r7, r1
    10c6:	47a8      	blx	r5
    10c8:	4d0e      	ldr	r5, [pc, #56]	; (1104 <flight+0x88>)
    10ca:	2200      	movs	r2, #0
    10cc:	4b0e      	ldr	r3, [pc, #56]	; (1108 <flight+0x8c>)
    10ce:	47a8      	blx	r5
    10d0:	4d0e      	ldr	r5, [pc, #56]	; (110c <flight+0x90>)
    10d2:	0002      	movs	r2, r0
    10d4:	000b      	movs	r3, r1
    10d6:	0030      	movs	r0, r6
    10d8:	0039      	movs	r1, r7
    10da:	47a8      	blx	r5
    10dc:	4b0c      	ldr	r3, [pc, #48]	; (1110 <flight+0x94>)
    10de:	4798      	blx	r3

        if ((millis() - my_altimeter->myIMU.offsetBufferTime) > 2000) {
    10e0:	4d0c      	ldr	r5, [pc, #48]	; (1114 <flight+0x98>)
    switch(my_altimeter->myFlightState) {
    case flightStatrup:

        my_altimeter->myIMU.gravityOffsetBuffer = 	my_altimeter->myIMU.gravityOffsetBuffer*0.5 + my_altimeter->myIMU.accelZ*0.5;

        my_altimeter->myBarometer.groundOffsetBuffer = my_altimeter->myBarometer.groundOffsetBuffer*0.5 + my_altimeter->myBarometer.heightFeet*0.5;
    10e2:	6320      	str	r0, [r4, #48]	; 0x30

        if ((millis() - my_altimeter->myIMU.offsetBufferTime) > 2000) {
    10e4:	47a8      	blx	r5
    10e6:	6b63      	ldr	r3, [r4, #52]	; 0x34
    10e8:	1ac0      	subs	r0, r0, r3
    10ea:	23fa      	movs	r3, #250	; 0xfa
    10ec:	00db      	lsls	r3, r3, #3
    10ee:	4298      	cmp	r0, r3
    10f0:	d905      	bls.n	10fe <flight+0x82>
            //recursive filter
            my_altimeter->myBarometer.groundOffset = my_altimeter->myBarometer.groundOffsetBuffer;
    10f2:	6b23      	ldr	r3, [r4, #48]	; 0x30
    10f4:	62e3      	str	r3, [r4, #44]	; 0x2c
            my_altimeter->myIMU.gravityOffset = my_altimeter->myIMU.gravityOffsetBuffer;
    10f6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    10f8:	63a3      	str	r3, [r4, #56]	; 0x38
            my_altimeter->myIMU.offsetBufferTime = millis();
    10fa:	47a8      	blx	r5
    10fc:	6360      	str	r0, [r4, #52]	; 0x34

        break;
    }


    10fe:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    1100:	0000239d 	.word	0x0000239d
    1104:	00001db5 	.word	0x00001db5
    1108:	3fe00000 	.word	0x3fe00000
    110c:	0000175d 	.word	0x0000175d
    1110:	00002445 	.word	0x00002445
    1114:	00000f19 	.word	0x00000f19

00001118 <logSensors>:
#include <boardDefines.h>




void logSensors(Altimeter *my_altimeter) {
    1118:	b530      	push	{r4, r5, lr}
    111a:	b087      	sub	sp, #28

    u8_t bytesToSend = 23;
    u8_t dataToSend[23];


    dataToSend[0] = SENSOR_LOG;
    111c:	466a      	mov	r2, sp
    111e:	2341      	movs	r3, #65	; 0x41
    1120:	7013      	strb	r3, [r2, #0]
    dataToSend[1] = my_altimeter->sampleTick >> 0;
    1122:	23a3      	movs	r3, #163	; 0xa3
    dataToSend[2] = my_altimeter->sampleTick >> 8;
    1124:	4669      	mov	r1, sp
    u8_t bytesToSend = 23;
    u8_t dataToSend[23];


    dataToSend[0] = SENSOR_LOG;
    dataToSend[1] = my_altimeter->sampleTick >> 0;
    1126:	009b      	lsls	r3, r3, #2
    1128:	58c3      	ldr	r3, [r0, r3]
    dataToSend[20] = my_altimeter->myIMU.gyroZRaw >> 8;

    dataToSend[21] = my_altimeter->myAnalogAccelerometer.analogRaw >> 0;
    dataToSend[22] = my_altimeter->myAnalogAccelerometer.analogRaw >> 8;

    u8_t location = my_altimeter->myFlashMemory.pageLocation;
    112a:	2480      	movs	r4, #128	; 0x80
    u8_t bytesToSend = 23;
    u8_t dataToSend[23];


    dataToSend[0] = SENSOR_LOG;
    dataToSend[1] = my_altimeter->sampleTick >> 0;
    112c:	7053      	strb	r3, [r2, #1]
    dataToSend[2] = my_altimeter->sampleTick >> 8;
    112e:	0a1a      	lsrs	r2, r3, #8
    1130:	708a      	strb	r2, [r1, #2]
    dataToSend[3] = my_altimeter->sampleTick >> 16;
    1132:	0c1a      	lsrs	r2, r3, #16
    dataToSend[4] = my_altimeter->sampleTick >> 24;
    1134:	0e1b      	lsrs	r3, r3, #24
    1136:	710b      	strb	r3, [r1, #4]

    dataToSend[5] = my_altimeter->myBarometer.heightCm >> 0;
    1138:	6a43      	ldr	r3, [r0, #36]	; 0x24


    dataToSend[0] = SENSOR_LOG;
    dataToSend[1] = my_altimeter->sampleTick >> 0;
    dataToSend[2] = my_altimeter->sampleTick >> 8;
    dataToSend[3] = my_altimeter->sampleTick >> 16;
    113a:	70ca      	strb	r2, [r1, #3]
    dataToSend[4] = my_altimeter->sampleTick >> 24;

    dataToSend[5] = my_altimeter->myBarometer.heightCm >> 0;
    dataToSend[6] = my_altimeter->myBarometer.heightCm >> 8;
    113c:	0a1a      	lsrs	r2, r3, #8
    dataToSend[1] = my_altimeter->sampleTick >> 0;
    dataToSend[2] = my_altimeter->sampleTick >> 8;
    dataToSend[3] = my_altimeter->sampleTick >> 16;
    dataToSend[4] = my_altimeter->sampleTick >> 24;

    dataToSend[5] = my_altimeter->myBarometer.heightCm >> 0;
    113e:	714b      	strb	r3, [r1, #5]
    dataToSend[6] = my_altimeter->myBarometer.heightCm >> 8;
    1140:	718a      	strb	r2, [r1, #6]
    dataToSend[7] = my_altimeter->myBarometer.heightCm >> 16;
    1142:	0c1a      	lsrs	r2, r3, #16
    dataToSend[8] = my_altimeter->myBarometer.heightCm >> 24;
    1144:	0e1b      	lsrs	r3, r3, #24
    1146:	720b      	strb	r3, [r1, #8]

    dataToSend[9] = my_altimeter->myIMU.accelXRaw >> 0;
    1148:	0003      	movs	r3, r0
    dataToSend[3] = my_altimeter->sampleTick >> 16;
    dataToSend[4] = my_altimeter->sampleTick >> 24;

    dataToSend[5] = my_altimeter->myBarometer.heightCm >> 0;
    dataToSend[6] = my_altimeter->myBarometer.heightCm >> 8;
    dataToSend[7] = my_altimeter->myBarometer.heightCm >> 16;
    114a:	71ca      	strb	r2, [r1, #7]
    dataToSend[8] = my_altimeter->myBarometer.heightCm >> 24;

    dataToSend[9] = my_altimeter->myIMU.accelXRaw >> 0;
    114c:	335c      	adds	r3, #92	; 0x5c
    114e:	881b      	ldrh	r3, [r3, #0]
    dataToSend[20] = my_altimeter->myIMU.gyroZRaw >> 8;

    dataToSend[21] = my_altimeter->myAnalogAccelerometer.analogRaw >> 0;
    dataToSend[22] = my_altimeter->myAnalogAccelerometer.analogRaw >> 8;

    u8_t location = my_altimeter->myFlashMemory.pageLocation;
    1150:	34ff      	adds	r4, #255	; 0xff
    dataToSend[5] = my_altimeter->myBarometer.heightCm >> 0;
    dataToSend[6] = my_altimeter->myBarometer.heightCm >> 8;
    dataToSend[7] = my_altimeter->myBarometer.heightCm >> 16;
    dataToSend[8] = my_altimeter->myBarometer.heightCm >> 24;

    dataToSend[9] = my_altimeter->myIMU.accelXRaw >> 0;
    1152:	724b      	strb	r3, [r1, #9]
    dataToSend[10] = my_altimeter->myIMU.accelXRaw >> 8;
    1154:	0a1b      	lsrs	r3, r3, #8
    1156:	728b      	strb	r3, [r1, #10]
    dataToSend[11] = my_altimeter->myIMU.accelYRaw >> 0;
    1158:	0003      	movs	r3, r0
    115a:	3360      	adds	r3, #96	; 0x60
    115c:	881b      	ldrh	r3, [r3, #0]
    115e:	72cb      	strb	r3, [r1, #11]
    dataToSend[12] = my_altimeter->myIMU.accelYRaw >> 8;
    1160:	0a1b      	lsrs	r3, r3, #8
    1162:	730b      	strb	r3, [r1, #12]
    dataToSend[13] = my_altimeter->myIMU.accelZRaw >> 0;
    1164:	0003      	movs	r3, r0
    1166:	3364      	adds	r3, #100	; 0x64
    1168:	881b      	ldrh	r3, [r3, #0]
    116a:	734b      	strb	r3, [r1, #13]
    dataToSend[14] = my_altimeter->myIMU.accelZRaw >> 8;
    116c:	0a1b      	lsrs	r3, r3, #8
    116e:	738b      	strb	r3, [r1, #14]

    dataToSend[15] = my_altimeter->myIMU.gyroXRaw >> 0;
    1170:	0003      	movs	r3, r0
    1172:	3368      	adds	r3, #104	; 0x68
    1174:	881b      	ldrh	r3, [r3, #0]
    1176:	73cb      	strb	r3, [r1, #15]
    dataToSend[16] = my_altimeter->myIMU.gyroXRaw >> 8;
    1178:	0a1b      	lsrs	r3, r3, #8
    117a:	740b      	strb	r3, [r1, #16]
    dataToSend[17] = my_altimeter->myIMU.gyroYRaw >> 0;
    117c:	0003      	movs	r3, r0
    117e:	336c      	adds	r3, #108	; 0x6c
    1180:	881b      	ldrh	r3, [r3, #0]
    1182:	744b      	strb	r3, [r1, #17]
    dataToSend[18] = my_altimeter->myIMU.gyroYRaw >> 8;
    1184:	0a1b      	lsrs	r3, r3, #8
    1186:	748b      	strb	r3, [r1, #18]
    dataToSend[19] = my_altimeter->myIMU.gyroZRaw >> 0;
    1188:	0003      	movs	r3, r0
    118a:	3370      	adds	r3, #112	; 0x70
    118c:	881b      	ldrh	r3, [r3, #0]
    118e:	74cb      	strb	r3, [r1, #19]
    dataToSend[20] = my_altimeter->myIMU.gyroZRaw >> 8;
    1190:	0a1b      	lsrs	r3, r3, #8
    1192:	750b      	strb	r3, [r1, #20]

    dataToSend[21] = my_altimeter->myAnalogAccelerometer.analogRaw >> 0;
    1194:	0003      	movs	r3, r0
    1196:	3374      	adds	r3, #116	; 0x74
    1198:	881b      	ldrh	r3, [r3, #0]
    119a:	754b      	strb	r3, [r1, #21]
    dataToSend[22] = my_altimeter->myAnalogAccelerometer.analogRaw >> 8;
    119c:	0a1b      	lsrs	r3, r3, #8
    119e:	758b      	strb	r3, [r1, #22]

    u8_t location = my_altimeter->myFlashMemory.pageLocation;
    11a0:	5d02      	ldrb	r2, [r0, r4]
    11a2:	2300      	movs	r3, #0
    u8_t bytesWritten = 0;

    if ((location + bytesToSend) > 0xFF) {
    11a4:	2ae8      	cmp	r2, #232	; 0xe8
    11a6:	dd26      	ble.n	11f6 <logSensors+0xde>
        for (u8_t dataByte = 0; (dataByte + location) < 0xFF; ++dataByte) {
    11a8:	18d1      	adds	r1, r2, r3
    11aa:	29fe      	cmp	r1, #254	; 0xfe
    11ac:	dc08      	bgt.n	11c0 <logSensors+0xa8>
            my_altimeter->myFlashMemory.pageBuffer[(dataByte + location)] = dataToSend[dataByte];
    11ae:	466d      	mov	r5, sp
    11b0:	1841      	adds	r1, r0, r1
    11b2:	5ced      	ldrb	r5, [r5, r3]
    11b4:	3181      	adds	r1, #129	; 0x81
    11b6:	31ff      	adds	r1, #255	; 0xff
            bytesWritten++;
    11b8:	3301      	adds	r3, #1
    u8_t location = my_altimeter->myFlashMemory.pageLocation;
    u8_t bytesWritten = 0;

    if ((location + bytesToSend) > 0xFF) {
        for (u8_t dataByte = 0; (dataByte + location) < 0xFF; ++dataByte) {
            my_altimeter->myFlashMemory.pageBuffer[(dataByte + location)] = dataToSend[dataByte];
    11ba:	700d      	strb	r5, [r1, #0]
            bytesWritten++;
    11bc:	b2db      	uxtb	r3, r3
    11be:	e7f3      	b.n	11a8 <logSensors+0x90>
    11c0:	001a      	movs	r2, r3
    11c2:	1ad1      	subs	r1, r2, r3
    11c4:	b2c9      	uxtb	r1, r1
        }

        for (u8_t dataByte = 0; bytesWritten <= bytesToSend; ++dataByte) {
    11c6:	2a17      	cmp	r2, #23
    11c8:	d803      	bhi.n	11d2 <logSensors+0xba>
            //my_altimeter->myFlashMemory.pageBuffer[dataByte] = dataToSend[dataByte];
            bytesWritten++;
    11ca:	3201      	adds	r2, #1
    11cc:	b2d2      	uxtb	r2, r2

            my_altimeter->myFlashMemory.pageLocation = dataByte; // fix this (iterates every step)
    11ce:	5501      	strb	r1, [r0, r4]
    11d0:	e7f7      	b.n	11c2 <logSensors+0xaa>
    11d2:	0003      	movs	r3, r0
        }

        for(u8_t i = 0; i < 0xFF; ++i) {
            my_altimeter->myFlashMemory.pageToWrite[i] = my_altimeter->myFlashMemory.pageBuffer[i];
            my_altimeter->myFlashMemory.pageBuffer[i] = 0;
    11d4:	2100      	movs	r1, #0
    11d6:	4a0e      	ldr	r2, [pc, #56]	; (1210 <logSensors+0xf8>)
    11d8:	3381      	adds	r3, #129	; 0x81
    11da:	33ff      	adds	r3, #255	; 0xff
    11dc:	1882      	adds	r2, r0, r2

            my_altimeter->myFlashMemory.pageLocation = dataByte; // fix this (iterates every step)
        }

        for(u8_t i = 0; i < 0xFF; ++i) {
            my_altimeter->myFlashMemory.pageToWrite[i] = my_altimeter->myFlashMemory.pageBuffer[i];
    11de:	781d      	ldrb	r5, [r3, #0]
    11e0:	1e5c      	subs	r4, r3, #1
    11e2:	3cff      	subs	r4, #255	; 0xff
    11e4:	7025      	strb	r5, [r4, #0]
            my_altimeter->myFlashMemory.pageBuffer[i] = 0;
    11e6:	7019      	strb	r1, [r3, #0]
    11e8:	3301      	adds	r3, #1
            bytesWritten++;

            my_altimeter->myFlashMemory.pageLocation = dataByte; // fix this (iterates every step)
        }

        for(u8_t i = 0; i < 0xFF; ++i) {
    11ea:	429a      	cmp	r2, r3
    11ec:	d1f7      	bne.n	11de <logSensors+0xc6>
            my_altimeter->myFlashMemory.pageToWrite[i] = my_altimeter->myFlashMemory.pageBuffer[i];
            my_altimeter->myFlashMemory.pageBuffer[i] = 0;
        }

        my_altimeter->myFlashMemory.pageReady = true;
    11ee:	2201      	movs	r2, #1
    11f0:	4b07      	ldr	r3, [pc, #28]	; (1210 <logSensors+0xf8>)
    11f2:	54c2      	strb	r2, [r0, r3]
    11f4:	e00a      	b.n	120c <logSensors+0xf4>


    } else {

        for (u8_t dataByte = 0; bytesWritten <= bytesToSend; ++dataByte) {
            my_altimeter->myFlashMemory.pageBuffer[(dataByte + location)] = dataToSend[dataByte];
    11f6:	466d      	mov	r5, sp
    11f8:	1899      	adds	r1, r3, r2
    11fa:	5ced      	ldrb	r5, [r5, r3]
    11fc:	3181      	adds	r1, #129	; 0x81
    11fe:	31ff      	adds	r1, #255	; 0xff
    1200:	3301      	adds	r3, #1
    1202:	5445      	strb	r5, [r0, r1]
        my_altimeter->myFlashMemory.pageReady = true;


    } else {

        for (u8_t dataByte = 0; bytesWritten <= bytesToSend; ++dataByte) {
    1204:	2b18      	cmp	r3, #24
    1206:	d1f6      	bne.n	11f6 <logSensors+0xde>
            my_altimeter->myFlashMemory.pageBuffer[(dataByte + location)] = dataToSend[dataByte];
            bytesWritten++;
        }
        my_altimeter->myFlashMemory.pageLocation = location + bytesWritten;
    1208:	3218      	adds	r2, #24
    120a:	5502      	strb	r2, [r0, r4]

    }

//u8_t bytesSent = AT25SEWritePage(my_altimeter->currentAddress,bytesToSend,dataToSend);

}
    120c:	b007      	add	sp, #28
    120e:	bd30      	pop	{r4, r5, pc}
    1210:	0000027f 	.word	0x0000027f

00001214 <sampleTick>:
#include <boardDefines.h>
#include <MS5803.h>



void sampleTick(Altimeter *my_altimeter) {
    1214:	b5f0      	push	{r4, r5, r6, r7, lr}

    my_altimeter->sampleTick = millis();
    1216:	4bd1      	ldr	r3, [pc, #836]	; (155c <sampleTick+0x348>)
#include <boardDefines.h>
#include <MS5803.h>



void sampleTick(Altimeter *my_altimeter) {
    1218:	b087      	sub	sp, #28
    121a:	0004      	movs	r4, r0

    my_altimeter->sampleTick = millis();
    121c:	4798      	blx	r3
    121e:	23a3      	movs	r3, #163	; 0xa3

    my_altimeter->batV = adc_read(senseBatPin);
    1220:	4dcf      	ldr	r5, [pc, #828]	; (1560 <sampleTick+0x34c>)



void sampleTick(Altimeter *my_altimeter) {

    my_altimeter->sampleTick = millis();
    1222:	009b      	lsls	r3, r3, #2
    1224:	50e0      	str	r0, [r4, r3]

    my_altimeter->batV = adc_read(senseBatPin);
    1226:	786b      	ldrb	r3, [r5, #1]
    1228:	7829      	ldrb	r1, [r5, #0]
    122a:	78a8      	ldrb	r0, [r5, #2]
    122c:	021b      	lsls	r3, r3, #8
    122e:	430b      	orrs	r3, r1
    1230:	0400      	lsls	r0, r0, #16
    1232:	001a      	movs	r2, r3
    1234:	0003      	movs	r3, r0
    1236:	78e8      	ldrb	r0, [r5, #3]
    1238:	4313      	orrs	r3, r2
    123a:	0600      	lsls	r0, r0, #24
    123c:	4ec9      	ldr	r6, [pc, #804]	; (1564 <sampleTick+0x350>)
    123e:	7929      	ldrb	r1, [r5, #4]
    1240:	4318      	orrs	r0, r3
    1242:	47b0      	blx	r6
    1244:	23a0      	movs	r3, #160	; 0xa0
    1246:	009b      	lsls	r3, r3, #2
    1248:	52e0      	strh	r0, [r4, r3]
    my_altimeter->batV = my_altimeter->batV;
    my_altimeter->senseA = adc_read(senseAPin);
    124a:	79ab      	ldrb	r3, [r5, #6]
    124c:	7969      	ldrb	r1, [r5, #5]
    124e:	79e8      	ldrb	r0, [r5, #7]
    1250:	021b      	lsls	r3, r3, #8
    1252:	430b      	orrs	r3, r1
    1254:	0400      	lsls	r0, r0, #16
    1256:	001a      	movs	r2, r3
    1258:	0003      	movs	r3, r0
    125a:	7a28      	ldrb	r0, [r5, #8]
    125c:	4313      	orrs	r3, r2
    125e:	0600      	lsls	r0, r0, #24
    1260:	7a69      	ldrb	r1, [r5, #9]
    1262:	4318      	orrs	r0, r3
    1264:	47b0      	blx	r6
    1266:	4bc0      	ldr	r3, [pc, #768]	; (1568 <sampleTick+0x354>)
    my_altimeter->senseB = adc_read(senseBPin);
    1268:	7aa9      	ldrb	r1, [r5, #10]

    my_altimeter->sampleTick = millis();

    my_altimeter->batV = adc_read(senseBatPin);
    my_altimeter->batV = my_altimeter->batV;
    my_altimeter->senseA = adc_read(senseAPin);
    126a:	52e0      	strh	r0, [r4, r3]
    my_altimeter->senseB = adc_read(senseBPin);
    126c:	7aeb      	ldrb	r3, [r5, #11]
    126e:	7b28      	ldrb	r0, [r5, #12]
    1270:	021b      	lsls	r3, r3, #8
    1272:	430b      	orrs	r3, r1
    1274:	0400      	lsls	r0, r0, #16
    1276:	001a      	movs	r2, r3
    1278:	0003      	movs	r3, r0
    127a:	7b68      	ldrb	r0, [r5, #13]
    127c:	4313      	orrs	r3, r2
    127e:	0600      	lsls	r0, r0, #24
    1280:	7ba9      	ldrb	r1, [r5, #14]
    1282:	4318      	orrs	r0, r3
    1284:	47b0      	blx	r6
    1286:	23a1      	movs	r3, #161	; 0xa1
    1288:	009b      	lsls	r3, r3, #2
    128a:	52e0      	strh	r0, [r4, r3]
    my_altimeter->senseC = adc_read(senseCPin);
    128c:	7c2b      	ldrb	r3, [r5, #16]
    128e:	7be9      	ldrb	r1, [r5, #15]
    1290:	7c68      	ldrb	r0, [r5, #17]
    1292:	021b      	lsls	r3, r3, #8
    1294:	430b      	orrs	r3, r1
    1296:	0400      	lsls	r0, r0, #16
    1298:	001a      	movs	r2, r3
    129a:	0003      	movs	r3, r0
    129c:	7ca8      	ldrb	r0, [r5, #18]
    129e:	4313      	orrs	r3, r2
    12a0:	0600      	lsls	r0, r0, #24
    12a2:	7ce9      	ldrb	r1, [r5, #19]
    12a4:	4318      	orrs	r0, r3
    12a6:	47b0      	blx	r6
    12a8:	4bb0      	ldr	r3, [pc, #704]	; (156c <sampleTick+0x358>)
    my_altimeter->senseD = adc_read(senseDPin);
    12aa:	7d29      	ldrb	r1, [r5, #20]

    my_altimeter->batV = adc_read(senseBatPin);
    my_altimeter->batV = my_altimeter->batV;
    my_altimeter->senseA = adc_read(senseAPin);
    my_altimeter->senseB = adc_read(senseBPin);
    my_altimeter->senseC = adc_read(senseCPin);
    12ac:	52e0      	strh	r0, [r4, r3]
    my_altimeter->senseD = adc_read(senseDPin);
    12ae:	7d6b      	ldrb	r3, [r5, #21]
    12b0:	7da8      	ldrb	r0, [r5, #22]
    12b2:	021b      	lsls	r3, r3, #8
    12b4:	430b      	orrs	r3, r1
    12b6:	0400      	lsls	r0, r0, #16
    12b8:	001a      	movs	r2, r3
    12ba:	0003      	movs	r3, r0
    12bc:	7de8      	ldrb	r0, [r5, #23]
    12be:	4313      	orrs	r3, r2
    12c0:	0600      	lsls	r0, r0, #24
    12c2:	7e29      	ldrb	r1, [r5, #24]
    12c4:	4318      	orrs	r0, r3
    12c6:	47b0      	blx	r6
    12c8:	23a2      	movs	r3, #162	; 0xa2
    12ca:	009b      	lsls	r3, r3, #2
    12cc:	52e0      	strh	r0, [r4, r3]




    my_altimeter->myAnalogAccelerometer.analogRaw = adc_read(analogAccelPin);
    12ce:	7eab      	ldrb	r3, [r5, #26]
    12d0:	7e69      	ldrb	r1, [r5, #25]
    12d2:	7ee8      	ldrb	r0, [r5, #27]
    12d4:	021b      	lsls	r3, r3, #8
    12d6:	430b      	orrs	r3, r1
    12d8:	0400      	lsls	r0, r0, #16
    12da:	001a      	movs	r2, r3
    12dc:	0003      	movs	r3, r0
    12de:	7f28      	ldrb	r0, [r5, #28]
    12e0:	4313      	orrs	r3, r2
    12e2:	0600      	lsls	r0, r0, #24
    12e4:	7f69      	ldrb	r1, [r5, #29]
    12e6:	4318      	orrs	r0, r3
    12e8:	47b0      	blx	r6
    12ea:	0023      	movs	r3, r4
    12ec:	3374      	adds	r3, #116	; 0x74
    12ee:	8018      	strh	r0, [r3, #0]
    my_altimeter->myAnalogAccelerometer.analogAccel = (my_altimeter->myAnalogAccelerometer.analogRaw - 3900) * -0.0154;
    12f0:	4b9f      	ldr	r3, [pc, #636]	; (1570 <sampleTick+0x35c>)
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    12f2:	2780      	movs	r7, #128	; 0x80
    12f4:	18c0      	adds	r0, r0, r3
    12f6:	4b9f      	ldr	r3, [pc, #636]	; (1574 <sampleTick+0x360>)
    12f8:	4798      	blx	r3
    12fa:	4a9f      	ldr	r2, [pc, #636]	; (1578 <sampleTick+0x364>)
    12fc:	4e9f      	ldr	r6, [pc, #636]	; (157c <sampleTick+0x368>)
    12fe:	4ba0      	ldr	r3, [pc, #640]	; (1580 <sampleTick+0x36c>)
    1300:	47b0      	blx	r6
    1302:	4ba0      	ldr	r3, [pc, #640]	; (1584 <sampleTick+0x370>)
    1304:	4798      	blx	r3
    uint8_t dummy_Tx = 0xFF;
    uint8_t dummy_rx;

    pinLow(cs_baro);
    // dummy_rx = spiDataTransfer(SPI2, 0x50);
    byteOut(spi2SCK,spi2MOSI, 0x50);
    1306:	2250      	movs	r2, #80	; 0x50


    my_altimeter->myAnalogAccelerometer.analogRaw = adc_read(analogAccelPin);
    my_altimeter->myAnalogAccelerometer.analogAccel = (my_altimeter->myAnalogAccelerometer.analogRaw - 3900) * -0.0154;

    my_altimeter->myIMU.perviousAccelX = my_altimeter->myIMU.accelX;
    1308:	6c23      	ldr	r3, [r4, #64]	; 0x40
    130a:	023f      	lsls	r7, r7, #8
    130c:	6463      	str	r3, [r4, #68]	; 0x44
    130e:	4b9e      	ldr	r3, [pc, #632]	; (1588 <sampleTick+0x374>)




    my_altimeter->myAnalogAccelerometer.analogRaw = adc_read(analogAccelPin);
    my_altimeter->myAnalogAccelerometer.analogAccel = (my_altimeter->myAnalogAccelerometer.analogRaw - 3900) * -0.0154;
    1310:	67a0      	str	r0, [r4, #120]	; 0x78
    uint8_t dummy_Tx = 0xFF;
    uint8_t dummy_rx;

    pinLow(cs_baro);
    // dummy_rx = spiDataTransfer(SPI2, 0x50);
    byteOut(spi2SCK,spi2MOSI, 0x50);
    1312:	002e      	movs	r6, r5
    1314:	615f      	str	r7, [r3, #20]
    1316:	9200      	str	r2, [sp, #0]
    1318:	7fea      	ldrb	r2, [r5, #31]
    131a:	7fa8      	ldrb	r0, [r5, #30]
    131c:	0212      	lsls	r2, r2, #8
    131e:	4302      	orrs	r2, r0
    1320:	0011      	movs	r1, r2
    1322:	002b      	movs	r3, r5
    1324:	361e      	adds	r6, #30
    1326:	78b2      	ldrb	r2, [r6, #2]
    1328:	3323      	adds	r3, #35	; 0x23
    132a:	0412      	lsls	r2, r2, #16
    132c:	430a      	orrs	r2, r1
    132e:	78f1      	ldrb	r1, [r6, #3]
    1330:	7818      	ldrb	r0, [r3, #0]
    1332:	0609      	lsls	r1, r1, #24
    1334:	4311      	orrs	r1, r2
    1336:	7932      	ldrb	r2, [r6, #4]
    1338:	789d      	ldrb	r5, [r3, #2]
    133a:	9204      	str	r2, [sp, #16]
    133c:	785a      	ldrb	r2, [r3, #1]
    133e:	042d      	lsls	r5, r5, #16
    1340:	0212      	lsls	r2, r2, #8
    1342:	4302      	orrs	r2, r0
    1344:	9103      	str	r1, [sp, #12]
    1346:	0011      	movs	r1, r2
    1348:	002a      	movs	r2, r5
    134a:	78dd      	ldrb	r5, [r3, #3]
    134c:	791b      	ldrb	r3, [r3, #4]
    134e:	430a      	orrs	r2, r1
    1350:	062d      	lsls	r5, r5, #24
    1352:	4315      	orrs	r5, r2
    1354:	9305      	str	r3, [sp, #20]
    1356:	9a03      	ldr	r2, [sp, #12]
    1358:	9905      	ldr	r1, [sp, #20]
    135a:	9b04      	ldr	r3, [sp, #16]
    135c:	0028      	movs	r0, r5
    135e:	4e8b      	ldr	r6, [pc, #556]	; (158c <sampleTick+0x378>)
    1360:	47b0      	blx	r6
    pinHigh(cs_baro);
    delay_us(500);
    1362:	20fa      	movs	r0, #250	; 0xfa
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    1364:	4b88      	ldr	r3, [pc, #544]	; (1588 <sampleTick+0x374>)
    1366:	0040      	lsls	r0, r0, #1
    1368:	619f      	str	r7, [r3, #24]
    136a:	4b89      	ldr	r3, [pc, #548]	; (1590 <sampleTick+0x37c>)
    136c:	4798      	blx	r3
    my_altimeter->myBarometer.rawTempatureData = readMS5803AdcResults();
    136e:	4b89      	ldr	r3, [pc, #548]	; (1594 <sampleTick+0x380>)
    1370:	4798      	blx	r3
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    1372:	4b85      	ldr	r3, [pc, #532]	; (1588 <sampleTick+0x374>)
    1374:	6160      	str	r0, [r4, #20]
    1376:	615f      	str	r7, [r3, #20]

    pinLow(cs_baro);
    //  dummy_rx = spiDataTransfer(SPI2, 0x42);
    byteOut(spi2SCK,spi2MOSI, 0x42);
    1378:	2342      	movs	r3, #66	; 0x42
    137a:	9a03      	ldr	r2, [sp, #12]
    137c:	9300      	str	r3, [sp, #0]
    137e:	0028      	movs	r0, r5
    1380:	9b04      	ldr	r3, [sp, #16]
    1382:	9905      	ldr	r1, [sp, #20]
    1384:	47b0      	blx	r6
    1386:	2280      	movs	r2, #128	; 0x80
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    1388:	4b7f      	ldr	r3, [pc, #508]	; (1588 <sampleTick+0x374>)
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    138a:	00d2      	lsls	r2, r2, #3
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    138c:	619f      	str	r7, [r3, #24]
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    138e:	4b82      	ldr	r3, [pc, #520]	; (1598 <sampleTick+0x384>)



// Accel data
    pinLow(cs_accel);
    dummy_rx = spiDataTransfer(SPI0, BMI055_X_ACC_LSB | BMI055_READ_REG);
    1390:	4f82      	ldr	r7, [pc, #520]	; (159c <sampleTick+0x388>)
    1392:	601a      	str	r2, [r3, #0]
    1394:	2182      	movs	r1, #130	; 0x82
    1396:	2000      	movs	r0, #0
    1398:	47b8      	blx	r7

    my_altimeter->myIMU.accelXRaw = spiDataTransfer(SPI0,dummy_Tx);
    139a:	21ff      	movs	r1, #255	; 0xff
    139c:	2000      	movs	r0, #0
    139e:	47b8      	blx	r7
    13a0:	0023      	movs	r3, r4
    13a2:	335c      	adds	r3, #92	; 0x5c
    13a4:	8018      	strh	r0, [r3, #0]
    13a6:	0005      	movs	r5, r0
    my_altimeter->myIMU.accelXRaw = my_altimeter->myIMU.accelXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    13a8:	21ff      	movs	r1, #255	; 0xff
    13aa:	2000      	movs	r0, #0

// Accel data
    pinLow(cs_accel);
    dummy_rx = spiDataTransfer(SPI0, BMI055_X_ACC_LSB | BMI055_READ_REG);

    my_altimeter->myIMU.accelXRaw = spiDataTransfer(SPI0,dummy_Tx);
    13ac:	9303      	str	r3, [sp, #12]
    my_altimeter->myIMU.accelXRaw = my_altimeter->myIMU.accelXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    13ae:	47b8      	blx	r7
    13b0:	9b03      	ldr	r3, [sp, #12]
    13b2:	0200      	lsls	r0, r0, #8
    13b4:	4305      	orrs	r5, r0
    13b6:	801d      	strh	r5, [r3, #0]
    my_altimeter->myIMU.accelYRaw = spiDataTransfer(SPI0,dummy_Tx);
    13b8:	21ff      	movs	r1, #255	; 0xff
    13ba:	0026      	movs	r6, r4
    13bc:	2000      	movs	r0, #0
    13be:	47b8      	blx	r7
    13c0:	3660      	adds	r6, #96	; 0x60
    13c2:	8030      	strh	r0, [r6, #0]
    13c4:	0005      	movs	r5, r0
    my_altimeter->myIMU.accelYRaw = my_altimeter->myIMU.accelYRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    13c6:	21ff      	movs	r1, #255	; 0xff
    13c8:	2000      	movs	r0, #0
    13ca:	47b8      	blx	r7
    13cc:	0200      	lsls	r0, r0, #8
    13ce:	4305      	orrs	r5, r0
    13d0:	8035      	strh	r5, [r6, #0]
    my_altimeter->myIMU.accelZRaw = spiDataTransfer(SPI0,dummy_Tx);
    13d2:	21ff      	movs	r1, #255	; 0xff
    13d4:	2000      	movs	r0, #0
    13d6:	47b8      	blx	r7
    13d8:	466b      	mov	r3, sp
    13da:	0025      	movs	r5, r4
    13dc:	9004      	str	r0, [sp, #16]
    13de:	8a1b      	ldrh	r3, [r3, #16]
    13e0:	3564      	adds	r5, #100	; 0x64
    13e2:	802b      	strh	r3, [r5, #0]
    my_altimeter->myIMU.accelZRaw = my_altimeter->myIMU.accelZRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    13e4:	21ff      	movs	r1, #255	; 0xff
    13e6:	2000      	movs	r0, #0
    13e8:	47b8      	blx	r7
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    13ea:	2280      	movs	r2, #128	; 0x80
    13ec:	9b04      	ldr	r3, [sp, #16]
    13ee:	0200      	lsls	r0, r0, #8
    13f0:	4303      	orrs	r3, r0
    13f2:	802b      	strh	r3, [r5, #0]
    13f4:	4b6a      	ldr	r3, [pc, #424]	; (15a0 <sampleTick+0x38c>)
    13f6:	00d2      	lsls	r2, r2, #3
    13f8:	601a      	str	r2, [r3, #0]

    pinHigh(cs_accel);

    bool negativeX = ( my_altimeter->myIMU.accelXRaw & (1<<15)) != 0;
    13fa:	9b03      	ldr	r3, [sp, #12]
    bool negativeY =  ( my_altimeter->myIMU.accelYRaw & (1<<15)) != 0;
    bool negativeZ =  ( my_altimeter->myIMU.accelZRaw & (1<<15)) != 0;

    my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXRaw;
    my_altimeter->myIMU.accelYint = my_altimeter->myIMU.accelYRaw;
    13fc:	3d02      	subs	r5, #2
    my_altimeter->myIMU.accelZRaw = spiDataTransfer(SPI0,dummy_Tx);
    my_altimeter->myIMU.accelZRaw = my_altimeter->myIMU.accelZRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);

    pinHigh(cs_accel);

    bool negativeX = ( my_altimeter->myIMU.accelXRaw & (1<<15)) != 0;
    13fe:	2000      	movs	r0, #0
    1400:	5e18      	ldrsh	r0, [r3, r0]
    bool negativeY =  ( my_altimeter->myIMU.accelYRaw & (1<<15)) != 0;
    1402:	2300      	movs	r3, #0
    1404:	5ef2      	ldrsh	r2, [r6, r3]
    bool negativeZ =  ( my_altimeter->myIMU.accelZRaw & (1<<15)) != 0;
    1406:	2102      	movs	r1, #2
    1408:	5e6b      	ldrsh	r3, [r5, r1]

    if (negativeX) {
        my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXint | ~((1 << 16) - 1);
        my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXint >> 4;
    } else {
        my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXint >> 4;
    140a:	0021      	movs	r1, r4
    140c:	1112      	asrs	r2, r2, #4
    140e:	1100      	asrs	r0, r0, #4
    1410:	315e      	adds	r1, #94	; 0x5e
    1412:	111b      	asrs	r3, r3, #4
    bool negativeX = ( my_altimeter->myIMU.accelXRaw & (1<<15)) != 0;
    bool negativeY =  ( my_altimeter->myIMU.accelYRaw & (1<<15)) != 0;
    bool negativeZ =  ( my_altimeter->myIMU.accelZRaw & (1<<15)) != 0;

    my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXRaw;
    my_altimeter->myIMU.accelYint = my_altimeter->myIMU.accelYRaw;
    1414:	9503      	str	r5, [sp, #12]

    if (negativeX) {
        my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXint | ~((1 << 16) - 1);
        my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXint >> 4;
    } else {
        my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXint >> 4;
    1416:	8008      	strh	r0, [r1, #0]

    if (negativeY) {
        my_altimeter->myIMU.accelYint = my_altimeter->myIMU.accelYint | ~((1 << 16) - 1);
        my_altimeter->myIMU.accelYint = my_altimeter->myIMU.accelYint >> 4;
    } else {
        my_altimeter->myIMU.accelYint = my_altimeter->myIMU.accelYint >> 4;
    1418:	802a      	strh	r2, [r5, #0]

    if (negativeZ) {
        my_altimeter->myIMU.accelZint = my_altimeter->myIMU.accelZint | ~((1 << 16) - 1);
        my_altimeter->myIMU.accelZint = my_altimeter->myIMU.accelZint >> 4;
    } else {
        my_altimeter->myIMU.accelZint = my_altimeter->myIMU.accelZint >> 4;
    141a:	80f3      	strh	r3, [r6, #6]
    }

    my_altimeter->myIMU.accelX = my_altimeter->myIMU.accelXint * BMI055_ACCEL_16G_DIV;
    141c:	4b55      	ldr	r3, [pc, #340]	; (1574 <sampleTick+0x360>)
    141e:	4798      	blx	r3
    1420:	23fe      	movs	r3, #254	; 0xfe
    1422:	4d56      	ldr	r5, [pc, #344]	; (157c <sampleTick+0x368>)
    1424:	2200      	movs	r2, #0
    1426:	059b      	lsls	r3, r3, #22
    1428:	47a8      	blx	r5
    142a:	4b56      	ldr	r3, [pc, #344]	; (1584 <sampleTick+0x370>)
    142c:	4798      	blx	r3
    my_altimeter->myIMU.accelY = my_altimeter->myIMU.accelYint * BMI055_ACCEL_16G_DIV;
    142e:	9b03      	ldr	r3, [sp, #12]
        my_altimeter->myIMU.accelZint = my_altimeter->myIMU.accelZint >> 4;
    } else {
        my_altimeter->myIMU.accelZint = my_altimeter->myIMU.accelZint >> 4;
    }

    my_altimeter->myIMU.accelX = my_altimeter->myIMU.accelXint * BMI055_ACCEL_16G_DIV;
    1430:	6420      	str	r0, [r4, #64]	; 0x40
    my_altimeter->myIMU.accelY = my_altimeter->myIMU.accelYint * BMI055_ACCEL_16G_DIV;
    1432:	2000      	movs	r0, #0
    1434:	5e18      	ldrsh	r0, [r3, r0]
    1436:	4b4f      	ldr	r3, [pc, #316]	; (1574 <sampleTick+0x360>)
    1438:	4798      	blx	r3
    143a:	23fe      	movs	r3, #254	; 0xfe
    143c:	2200      	movs	r2, #0
    143e:	059b      	lsls	r3, r3, #22
    1440:	47a8      	blx	r5
    1442:	4b50      	ldr	r3, [pc, #320]	; (1584 <sampleTick+0x370>)
    1444:	4798      	blx	r3
    1446:	64a0      	str	r0, [r4, #72]	; 0x48
    my_altimeter->myIMU.accelZ = my_altimeter->myIMU.accelZint * BMI055_ACCEL_16G_DIV;
    1448:	2306      	movs	r3, #6
    144a:	5ef0      	ldrsh	r0, [r6, r3]
    144c:	4b49      	ldr	r3, [pc, #292]	; (1574 <sampleTick+0x360>)
    144e:	4798      	blx	r3
    1450:	23fe      	movs	r3, #254	; 0xfe
    1452:	2200      	movs	r2, #0
    1454:	059b      	lsls	r3, r3, #22
    1456:	47a8      	blx	r5
    1458:	4b4a      	ldr	r3, [pc, #296]	; (1584 <sampleTick+0x370>)
    145a:	4798      	blx	r3
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    145c:	2280      	movs	r2, #128	; 0x80
    145e:	4b4a      	ldr	r3, [pc, #296]	; (1588 <sampleTick+0x374>)
    1460:	00d2      	lsls	r2, r2, #3
    1462:	64e0      	str	r0, [r4, #76]	; 0x4c


    // Gyro data
    pinLow(cs_gyro);
    dummy_rx = spiDataTransfer(SPI0, BMI055_X_GYRO_LSB | BMI055_READ_REG);
    1464:	2182      	movs	r1, #130	; 0x82
    1466:	615a      	str	r2, [r3, #20]
    1468:	2000      	movs	r0, #0
    146a:	47b8      	blx	r7
    my_altimeter->myIMU.gyroXRaw = spiDataTransfer(SPI0,dummy_Tx);
    146c:	21ff      	movs	r1, #255	; 0xff
    146e:	2000      	movs	r0, #0
    1470:	47b8      	blx	r7
    1472:	0023      	movs	r3, r4
    1474:	3368      	adds	r3, #104	; 0x68
    1476:	8018      	strh	r0, [r3, #0]
    1478:	0005      	movs	r5, r0
    my_altimeter->myIMU.gyroXRaw = my_altimeter->myIMU.gyroXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    147a:	21ff      	movs	r1, #255	; 0xff
    147c:	2000      	movs	r0, #0


    // Gyro data
    pinLow(cs_gyro);
    dummy_rx = spiDataTransfer(SPI0, BMI055_X_GYRO_LSB | BMI055_READ_REG);
    my_altimeter->myIMU.gyroXRaw = spiDataTransfer(SPI0,dummy_Tx);
    147e:	9303      	str	r3, [sp, #12]
    my_altimeter->myIMU.gyroXRaw = my_altimeter->myIMU.gyroXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    1480:	47b8      	blx	r7
    1482:	9b03      	ldr	r3, [sp, #12]
    1484:	0200      	lsls	r0, r0, #8
    1486:	4305      	orrs	r5, r0
    1488:	801d      	strh	r5, [r3, #0]
    my_altimeter->myIMU.gyroYRaw = spiDataTransfer(SPI0,dummy_Tx);
    148a:	21ff      	movs	r1, #255	; 0xff
    148c:	2000      	movs	r0, #0
    148e:	47b8      	blx	r7
    my_altimeter->myIMU.gyroYRaw = my_altimeter->myIMU.gyroYRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    1490:	21ff      	movs	r1, #255	; 0xff
    // Gyro data
    pinLow(cs_gyro);
    dummy_rx = spiDataTransfer(SPI0, BMI055_X_GYRO_LSB | BMI055_READ_REG);
    my_altimeter->myIMU.gyroXRaw = spiDataTransfer(SPI0,dummy_Tx);
    my_altimeter->myIMU.gyroXRaw = my_altimeter->myIMU.gyroXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    my_altimeter->myIMU.gyroYRaw = spiDataTransfer(SPI0,dummy_Tx);
    1492:	81b0      	strh	r0, [r6, #12]
    1494:	0005      	movs	r5, r0
    my_altimeter->myIMU.gyroYRaw = my_altimeter->myIMU.gyroYRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    1496:	2000      	movs	r0, #0
    1498:	47b8      	blx	r7
    149a:	0200      	lsls	r0, r0, #8
    149c:	4305      	orrs	r5, r0
    149e:	81b5      	strh	r5, [r6, #12]
    my_altimeter->myIMU.gyroZRaw = spiDataTransfer(SPI0,dummy_Tx);
    14a0:	21ff      	movs	r1, #255	; 0xff
    14a2:	2000      	movs	r0, #0
    14a4:	47b8      	blx	r7
    14a6:	466b      	mov	r3, sp
    14a8:	0025      	movs	r5, r4
    14aa:	9004      	str	r0, [sp, #16]
    14ac:	8a1b      	ldrh	r3, [r3, #16]
    14ae:	3570      	adds	r5, #112	; 0x70
    14b0:	802b      	strh	r3, [r5, #0]
    my_altimeter->myIMU.gyroZRaw = my_altimeter->myIMU.gyroZRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    14b2:	21ff      	movs	r1, #255	; 0xff
    14b4:	2000      	movs	r0, #0
    14b6:	47b8      	blx	r7
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    14b8:	2280      	movs	r2, #128	; 0x80
    14ba:	9f04      	ldr	r7, [sp, #16]
    14bc:	0200      	lsls	r0, r0, #8
    14be:	4b32      	ldr	r3, [pc, #200]	; (1588 <sampleTick+0x374>)
    14c0:	4307      	orrs	r7, r0
    14c2:	00d2      	lsls	r2, r2, #3
    14c4:	802f      	strh	r7, [r5, #0]
    14c6:	619a      	str	r2, [r3, #24]
    pinHigh(cs_gyro);

    bool negativeXgyro = (my_altimeter->myIMU.gyroXRaw & (1<<15)) != 0;
    14c8:	9b03      	ldr	r3, [sp, #12]
    14ca:	2000      	movs	r0, #0
    14cc:	5e18      	ldrsh	r0, [r3, r0]
    bool negativeYgyro = (my_altimeter->myIMU.gyroYRaw & (1<<15)) != 0;
    14ce:	230c      	movs	r3, #12
    14d0:	5ef2      	ldrsh	r2, [r6, r3]
    bool negativeZgyro = (my_altimeter->myIMU.gyroZRaw & (1<<15)) != 0;
    14d2:	2100      	movs	r1, #0
    14d4:	5e6b      	ldrsh	r3, [r5, r1]

    if (negativeXgyro) {
        my_altimeter->myIMU.gyroXint = my_altimeter->myIMU.gyroXint | ~((1 << 16) - 1);
        my_altimeter->myIMU.gyroXint = my_altimeter->myIMU.gyroXint >> 4;
    } else {
        my_altimeter->myIMU.gyroXint = my_altimeter->myIMU.gyroXint >> 4;
    14d6:	0021      	movs	r1, r4
    14d8:	1112      	asrs	r2, r2, #4
    14da:	1100      	asrs	r0, r0, #4
    14dc:	316a      	adds	r1, #106	; 0x6a
    14de:	111b      	asrs	r3, r3, #4
    14e0:	8008      	strh	r0, [r1, #0]

    if (negativeYgyro) {
        my_altimeter->myIMU.gyroYint = my_altimeter->myIMU.gyroYint | ~((1 << 16) - 1);
        my_altimeter->myIMU.gyroYint = my_altimeter->myIMU.gyroYint >> 4;
    } else {
        my_altimeter->myIMU.gyroYint = my_altimeter->myIMU.gyroYint >> 4;
    14e2:	81f2      	strh	r2, [r6, #14]

    if (negativeZgyro) {
        my_altimeter->myIMU.gyroZint = my_altimeter->myIMU.gyroZint | ~((1 << 16) - 1);
        my_altimeter->myIMU.gyroZint = my_altimeter->myIMU.gyroZint >> 4;
    } else {
        my_altimeter->myIMU.gyroZint = my_altimeter->myIMU.gyroZint >> 4;
    14e4:	806b      	strh	r3, [r5, #2]
    }


    my_altimeter->myIMU.gyroX = my_altimeter->myIMU.gyroXint * BMI055_GYRO_2000DS_DIV;
    14e6:	4b23      	ldr	r3, [pc, #140]	; (1574 <sampleTick+0x360>)
    14e8:	4798      	blx	r3
    14ea:	23fe      	movs	r3, #254	; 0xfe
    14ec:	4f23      	ldr	r7, [pc, #140]	; (157c <sampleTick+0x368>)
    14ee:	2200      	movs	r2, #0
    14f0:	059b      	lsls	r3, r3, #22
    14f2:	47b8      	blx	r7
    14f4:	4b23      	ldr	r3, [pc, #140]	; (1584 <sampleTick+0x370>)
    14f6:	4798      	blx	r3
    14f8:	6520      	str	r0, [r4, #80]	; 0x50
    my_altimeter->myIMU.gyroY = my_altimeter->myIMU.gyroYint * BMI055_GYRO_2000DS_DIV;
    14fa:	230e      	movs	r3, #14
    14fc:	5ef0      	ldrsh	r0, [r6, r3]
    14fe:	4b1d      	ldr	r3, [pc, #116]	; (1574 <sampleTick+0x360>)
    1500:	4798      	blx	r3
    1502:	23fe      	movs	r3, #254	; 0xfe
    1504:	2200      	movs	r2, #0
    1506:	059b      	lsls	r3, r3, #22
    1508:	47b8      	blx	r7
    150a:	4b1e      	ldr	r3, [pc, #120]	; (1584 <sampleTick+0x370>)
    150c:	4798      	blx	r3
    150e:	6560      	str	r0, [r4, #84]	; 0x54
    my_altimeter->myIMU.gyroZ = my_altimeter->myIMU.gyroZint * BMI055_GYRO_2000DS_DIV;
    1510:	2302      	movs	r3, #2
    1512:	5ee8      	ldrsh	r0, [r5, r3]
    1514:	4b17      	ldr	r3, [pc, #92]	; (1574 <sampleTick+0x360>)
    1516:	4798      	blx	r3
    1518:	23fe      	movs	r3, #254	; 0xfe
    151a:	2200      	movs	r2, #0
    151c:	059b      	lsls	r3, r3, #22
    151e:	47b8      	blx	r7
    1520:	4b18      	ldr	r3, [pc, #96]	; (1584 <sampleTick+0x370>)
    1522:	4798      	blx	r3
    1524:	65a0      	str	r0, [r4, #88]	; 0x58

    delay_us(800);
    1526:	20c8      	movs	r0, #200	; 0xc8
    1528:	4b19      	ldr	r3, [pc, #100]	; (1590 <sampleTick+0x37c>)
    152a:	0080      	lsls	r0, r0, #2
    152c:	4798      	blx	r3
    my_altimeter->myBarometer.rawPressureData = readMS5803AdcResults();
    152e:	4b19      	ldr	r3, [pc, #100]	; (1594 <sampleTick+0x380>)
    1530:	4798      	blx	r3
    ConvertPressureTemperature(&my_altimeter->myBarometer);
    1532:	1d25      	adds	r5, r4, #4
    my_altimeter->myIMU.gyroX = my_altimeter->myIMU.gyroXint * BMI055_GYRO_2000DS_DIV;
    my_altimeter->myIMU.gyroY = my_altimeter->myIMU.gyroYint * BMI055_GYRO_2000DS_DIV;
    my_altimeter->myIMU.gyroZ = my_altimeter->myIMU.gyroZint * BMI055_GYRO_2000DS_DIV;

    delay_us(800);
    my_altimeter->myBarometer.rawPressureData = readMS5803AdcResults();
    1534:	6120      	str	r0, [r4, #16]
    ConvertPressureTemperature(&my_altimeter->myBarometer);
    1536:	4b1b      	ldr	r3, [pc, #108]	; (15a4 <sampleTick+0x390>)
    1538:	0028      	movs	r0, r5
    153a:	4798      	blx	r3
    pascalToCent(&my_altimeter->myBarometer);
    153c:	0028      	movs	r0, r5
    153e:	4b1a      	ldr	r3, [pc, #104]	; (15a8 <sampleTick+0x394>)
    1540:	4798      	blx	r3
    my_altimeter->myBarometer.heightFeet = 0.03281 * my_altimeter->myBarometer.heightCm;
    1542:	4b1a      	ldr	r3, [pc, #104]	; (15ac <sampleTick+0x398>)
    1544:	6a60      	ldr	r0, [r4, #36]	; 0x24
    1546:	4798      	blx	r3
    1548:	4a19      	ldr	r2, [pc, #100]	; (15b0 <sampleTick+0x39c>)
    154a:	4b1a      	ldr	r3, [pc, #104]	; (15b4 <sampleTick+0x3a0>)
    154c:	4d0b      	ldr	r5, [pc, #44]	; (157c <sampleTick+0x368>)
    154e:	47a8      	blx	r5
    1550:	4b0c      	ldr	r3, [pc, #48]	; (1584 <sampleTick+0x370>)
    1552:	4798      	blx	r3
    1554:	62a0      	str	r0, [r4, #40]	; 0x28


}
    1556:	b007      	add	sp, #28
    1558:	bdf0      	pop	{r4, r5, r6, r7, pc}
    155a:	46c0      	nop			; (mov r8, r8)
    155c:	00000f19 	.word	0x00000f19
    1560:	000028e0 	.word	0x000028e0
    1564:	00000b81 	.word	0x00000b81
    1568:	00000282 	.word	0x00000282
    156c:	00000286 	.word	0x00000286
    1570:	fffff0c4 	.word	0xfffff0c4
    1574:	000022a9 	.word	0x000022a9
    1578:	02de00d2 	.word	0x02de00d2
    157c:	00001db5 	.word	0x00001db5
    1580:	bf8f8a09 	.word	0xbf8f8a09
    1584:	00002445 	.word	0x00002445
    1588:	41004400 	.word	0x41004400
    158c:	00000be9 	.word	0x00000be9
    1590:	00000e9d 	.word	0x00000e9d
    1594:	00000245 	.word	0x00000245
    1598:	41004494 	.word	0x41004494
    159c:	000016c5 	.word	0x000016c5
    15a0:	41004498 	.word	0x41004498
    15a4:	000002f9 	.word	0x000002f9
    15a8:	000003e5 	.word	0x000003e5
    15ac:	0000232d 	.word	0x0000232d
    15b0:	e9f6a93f 	.word	0xe9f6a93f
    15b4:	3fa0cc78 	.word	0x3fa0cc78

000015b8 <sercomClockEnable>:
#include <util.h>

void sercomClockEnable(SercomId id, uint32_t clock_channel, u8_t divider) {
    15b8:	b570      	push	{r4, r5, r6, lr}
    15ba:	0004      	movs	r4, r0
    // prevent this clock write from changing any other clocks
    PM->APBCMASK.reg |= 1 << (PM_APBCMASK_SERCOM0_Pos + id);
    15bc:	2301      	movs	r3, #1
    15be:	1ca6      	adds	r6, r4, #2
    15c0:	40b3      	lsls	r3, r6
    15c2:	480d      	ldr	r0, [pc, #52]	; (15f8 <sercomClockEnable+0x40>)
#include <util.h>

void sercomClockEnable(SercomId id, uint32_t clock_channel, u8_t divider) {
    15c4:	000d      	movs	r5, r1
    // prevent this clock write from changing any other clocks
    PM->APBCMASK.reg |= 1 << (PM_APBCMASK_SERCOM0_Pos + id);
    15c6:	6a01      	ldr	r1, [r0, #32]
    15c8:	430b      	orrs	r3, r1
    15ca:	6203      	str	r3, [r0, #32]


    if (clock_channel != 0) {
    15cc:	2d00      	cmp	r5, #0
    15ce:	d003      	beq.n	15d8 <sercomClockEnable+0x20>
        // clock generators 3-8 have 8 division factor bits - DIV[7:0]
        gclkEnable(clock_channel, GCLK_SOURCE_DFLL48M, divider);
    15d0:	2107      	movs	r1, #7
    15d2:	0028      	movs	r0, r5
    15d4:	4b09      	ldr	r3, [pc, #36]	; (15fc <sercomClockEnable+0x44>)
    15d6:	4798      	blx	r3
    }


    // attach clock
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
    15d8:	22f0      	movs	r2, #240	; 0xf0
    15da:	2080      	movs	r0, #128	; 0x80
    15dc:	0229      	lsls	r1, r5, #8
    15de:	0112      	lsls	r2, r2, #4
    15e0:	4011      	ands	r1, r2
    15e2:	01c0      	lsls	r0, r0, #7
    15e4:	4301      	orrs	r1, r0
    15e6:	0020      	movs	r0, r4
    15e8:	3014      	adds	r0, #20
    15ea:	223f      	movs	r2, #63	; 0x3f
    15ec:	0003      	movs	r3, r0
    15ee:	4013      	ands	r3, r2
    15f0:	4319      	orrs	r1, r3
    15f2:	4b03      	ldr	r3, [pc, #12]	; (1600 <sercomClockEnable+0x48>)
    15f4:	8059      	strh	r1, [r3, #2]
                        GCLK_CLKCTRL_GEN(clock_channel) |
                        GCLK_CLKCTRL_ID(SERCOM0_GCLK_ID_CORE + id);
}
    15f6:	bd70      	pop	{r4, r5, r6, pc}
    15f8:	40000400 	.word	0x40000400
    15fc:	00000e4d 	.word	0x00000e4d
    1600:	40000c00 	.word	0x40000c00

00001604 <sercomReset>:
//sample.c
void sampleTick(Altimeter *my_altimeter);

//dma.c
inline static Sercom* sercom(SercomId id) {
    return (Sercom*) (0x42000800U + id * 1024);
    1604:	4b04      	ldr	r3, [pc, #16]	; (1618 <sercomReset+0x14>)
    1606:	0280      	lsls	r0, r0, #10
    1608:	18c0      	adds	r0, r0, r3


void sercomReset(SercomId id) {
    sercom(id)->SPI.CTRLA.reg = SERCOM_SPI_CTRLA_SWRST;
    160a:	2301      	movs	r3, #1
    160c:	6003      	str	r3, [r0, #0]
    while(sercom(id)->SPI.CTRLA.reg & SERCOM_SPI_CTRLA_SWRST);
    160e:	6802      	ldr	r2, [r0, #0]
    1610:	421a      	tst	r2, r3
    1612:	d1fc      	bne.n	160e <sercomReset+0xa>
}
    1614:	4770      	bx	lr
    1616:	46c0      	nop			; (mov r8, r8)
    1618:	42000800 	.word	0x42000800

0000161c <sercomSpiMasterInit>:
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
}


void sercomSpiMasterInit(SercomId id, u32_t dipo, u32_t dopo, bool cpol, bool cpha, u8_t baud) {
    161c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    161e:	0004      	movs	r4, r0
    1620:	9300      	str	r3, [sp, #0]
    1622:	ab08      	add	r3, sp, #32
    1624:	781b      	ldrb	r3, [r3, #0]
    1626:	000e      	movs	r6, r1
    1628:	9301      	str	r3, [sp, #4]
    162a:	ab09      	add	r3, sp, #36	; 0x24
    162c:	781f      	ldrb	r7, [r3, #0]

    sercomReset(id);
    162e:	4b12      	ldr	r3, [pc, #72]	; (1678 <sercomSpiMasterInit+0x5c>)
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
}


void sercomSpiMasterInit(SercomId id, u32_t dipo, u32_t dopo, bool cpol, bool cpha, u8_t baud) {
    1630:	0015      	movs	r5, r2

    sercomReset(id);
    1632:	4798      	blx	r3
    1634:	4b11      	ldr	r3, [pc, #68]	; (167c <sercomSpiMasterInit+0x60>)
    1636:	02a4      	lsls	r4, r4, #10
    1638:	18e4      	adds	r4, r4, r3

    sercom(id)->SPI.CTRLB.reg
        = SERCOM_SPI_CTRLB_RXEN;
    163a:	2380      	movs	r3, #128	; 0x80
    163c:	029b      	lsls	r3, r3, #10
    163e:	6063      	str	r3, [r4, #4]
    1640:	23c0      	movs	r3, #192	; 0xc0
    sercom(id)->SPI.BAUD.reg = baud;

    sercom(id)->SPI.CTRLA.reg
        = SERCOM_SPI_CTRLA_ENABLE
          | SERCOM_SPI_CTRLA_MODE_SPI_MASTER
          | SERCOM_SPI_CTRLA_DIPO(dipo)
    1642:	21c0      	movs	r1, #192	; 0xc0
    1644:	042d      	lsls	r5, r5, #16
    1646:	029b      	lsls	r3, r3, #10
    1648:	402b      	ands	r3, r5
    164a:	250e      	movs	r5, #14
    164c:	0536      	lsls	r6, r6, #20
    164e:	0389      	lsls	r1, r1, #14
    1650:	4031      	ands	r1, r6
          | SERCOM_SPI_CTRLA_DOPO(dopo)
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
    1652:	9e00      	ldr	r6, [sp, #0]
    1654:	431d      	orrs	r5, r3
    1656:	1e73      	subs	r3, r6, #1
    1658:	419e      	sbcs	r6, r3
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
    165a:	9b01      	ldr	r3, [sp, #4]
    sercom(id)->SPI.CTRLA.reg
        = SERCOM_SPI_CTRLA_ENABLE
          | SERCOM_SPI_CTRLA_MODE_SPI_MASTER
          | SERCOM_SPI_CTRLA_DIPO(dipo)
          | SERCOM_SPI_CTRLA_DOPO(dopo)
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
    165c:	0772      	lsls	r2, r6, #29
    165e:	430d      	orrs	r5, r1
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
    1660:	432a      	orrs	r2, r5
    1662:	1e59      	subs	r1, r3, #1
    1664:	418b      	sbcs	r3, r1
    1666:	0016      	movs	r6, r2
    1668:	071b      	lsls	r3, r3, #28
    166a:	431e      	orrs	r6, r3
    sercomReset(id);

    sercom(id)->SPI.CTRLB.reg
        = SERCOM_SPI_CTRLB_RXEN;

    sercom(id)->SPI.BAUD.reg = baud;
    166c:	7327      	strb	r7, [r4, #12]

    sercom(id)->SPI.CTRLA.reg
        = SERCOM_SPI_CTRLA_ENABLE
    166e:	6026      	str	r6, [r4, #0]
        };
    }
}

static inline void SPI_sync(SercomId id) {
    while  (sercom(id)->SPI.SYNCBUSY.bit.CTRLB);
    1670:	69e3      	ldr	r3, [r4, #28]
    1672:	075b      	lsls	r3, r3, #29
    1674:	d4fc      	bmi.n	1670 <sercomSpiMasterInit+0x54>
          | SERCOM_SPI_CTRLA_DOPO(dopo)
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);

    SPI_sync(id);
}
    1676:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    1678:	00001605 	.word	0x00001605
    167c:	42000800 	.word	0x42000800

00001680 <sercomUartInit>:




void sercomUartInit(SercomId id, u32_t rxpo, u32_t txpo, u32_t baud) {
    1680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1682:	0007      	movs	r7, r0
    1684:	001e      	movs	r6, r3
    sercomReset(id);
    1686:	4b0c      	ldr	r3, [pc, #48]	; (16b8 <sercomUartInit+0x38>)
}




void sercomUartInit(SercomId id, u32_t rxpo, u32_t txpo, u32_t baud) {
    1688:	000d      	movs	r5, r1
    168a:	0014      	movs	r4, r2
    sercomReset(id);
    168c:	4798      	blx	r3
//sample.c
void sampleTick(Altimeter *my_altimeter);

//dma.c
inline static Sercom* sercom(SercomId id) {
    return (Sercom*) (0x42000800U + id * 1024);
    168e:	4b0b      	ldr	r3, [pc, #44]	; (16bc <sercomUartInit+0x3c>)
    1690:	02b8      	lsls	r0, r7, #10
    1692:	18c0      	adds	r0, r0, r3
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    1694:	2304      	movs	r3, #4
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    1696:	22c0      	movs	r2, #192	; 0xc0



void sercomUartInit(SercomId id, u32_t rxpo, u32_t txpo, u32_t baud) {
    sercomReset(id);
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    1698:	6003      	str	r3, [r0, #0]
    sercom(id)->USART.BAUD.reg = baud;
    sercom(id)->USART.CTRLB.reg
        = SERCOM_USART_CTRLB_RXEN
    169a:	23c0      	movs	r3, #192	; 0xc0
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    169c:	0529      	lsls	r1, r5, #20
    169e:	0392      	lsls	r2, r2, #14
    16a0:	4011      	ands	r1, r2
    16a2:	4a07      	ldr	r2, [pc, #28]	; (16c0 <sercomUartInit+0x40>)


void sercomUartInit(SercomId id, u32_t rxpo, u32_t txpo, u32_t baud) {
    sercomReset(id);
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    sercom(id)->USART.BAUD.reg = baud;
    16a4:	b2b6      	uxth	r6, r6
    sercom(id)->USART.CTRLB.reg
        = SERCOM_USART_CTRLB_RXEN
    16a6:	029b      	lsls	r3, r3, #10
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    16a8:	0424      	lsls	r4, r4, #16


void sercomUartInit(SercomId id, u32_t rxpo, u32_t txpo, u32_t baud) {
    sercomReset(id);
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    sercom(id)->USART.BAUD.reg = baud;
    16aa:	8186      	strh	r6, [r0, #12]
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    16ac:	4311      	orrs	r1, r2
void sercomUartInit(SercomId id, u32_t rxpo, u32_t txpo, u32_t baud) {
    sercomReset(id);
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    sercom(id)->USART.BAUD.reg = baud;
    sercom(id)->USART.CTRLB.reg
        = SERCOM_USART_CTRLB_RXEN
    16ae:	6043      	str	r3, [r0, #4]
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    16b0:	4023      	ands	r3, r4
    16b2:	430b      	orrs	r3, r1
    sercom(id)->USART.BAUD.reg = baud;
    sercom(id)->USART.CTRLB.reg
        = SERCOM_USART_CTRLB_RXEN
          | SERCOM_USART_CTRLB_TXEN;
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
    16b4:	6003      	str	r3, [r0, #0]
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
}
    16b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    16b8:	00001605 	.word	0x00001605
    16bc:	42000800 	.word	0x42000800
    16c0:	40000006 	.word	0x40000006

000016c4 <spiDataTransfer>:
    16c4:	4b04      	ldr	r3, [pc, #16]	; (16d8 <spiDataTransfer+0x14>)
    16c6:	0280      	lsls	r0, r0, #10
    16c8:	18c0      	adds	r0, r0, r3

u8_t spiDataTransfer(SercomId id, u8_t data) {
    sercom(id)->SPI.DATA.reg = data;
    16ca:	6281      	str	r1, [r0, #40]	; 0x28
    while(sercom(id)->SPI.INTFLAG.bit.RXC == 0);
    16cc:	7e03      	ldrb	r3, [r0, #24]
    16ce:	075b      	lsls	r3, r3, #29
    16d0:	d5fc      	bpl.n	16cc <spiDataTransfer+0x8>
    return sercom(id)->SPI.DATA.reg;
    16d2:	6a80      	ldr	r0, [r0, #40]	; 0x28
    16d4:	b2c0      	uxtb	r0, r0
}
    16d6:	4770      	bx	lr
    16d8:	42000800 	.word	0x42000800

000016dc <usartDataOut>:
    16dc:	4b04      	ldr	r3, [pc, #16]	; (16f0 <usartDataOut+0x14>)
    16de:	0280      	lsls	r0, r0, #10
    16e0:	18c0      	adds	r0, r0, r3
    while(sercom(id)->SPI.INTFLAG.bit.DRE == 0);
    return sercom(id)->SPI.DATA.reg;
}

void usartDataOut(SercomId id, u8_t data) {
    sercom(id)->USART.DATA.reg = data;
    16e2:	b289      	uxth	r1, r1
    16e4:	8501      	strh	r1, [r0, #40]	; 0x28
    while(sercom(id)->USART.INTFLAG.bit.DRE == 0);
    16e6:	7e03      	ldrb	r3, [r0, #24]
    16e8:	07db      	lsls	r3, r3, #31
    16ea:	d5fc      	bpl.n	16e6 <usartDataOut+0xa>
}
    16ec:	4770      	bx	lr
    16ee:	46c0      	nop			; (mov r8, r8)
    16f0:	42000800 	.word	0x42000800

000016f4 <usartDataIn>:
    16f4:	4b02      	ldr	r3, [pc, #8]	; (1700 <usartDataIn+0xc>)
    16f6:	0280      	lsls	r0, r0, #10
    16f8:	18c0      	adds	r0, r0, r3

u8_t usartDataIn(SercomId id) {
    return sercom(id)->USART.DATA.reg;
    16fa:	8d00      	ldrh	r0, [r0, #40]	; 0x28
    16fc:	b2c0      	uxtb	r0, r0
    16fe:	4770      	bx	lr
    1700:	42000800 	.word	0x42000800

00001704 <__aeabi_lmul>:
    1704:	b5f0      	push	{r4, r5, r6, r7, lr}
    1706:	464f      	mov	r7, r9
    1708:	4646      	mov	r6, r8
    170a:	b4c0      	push	{r6, r7}
    170c:	0416      	lsls	r6, r2, #16
    170e:	0c36      	lsrs	r6, r6, #16
    1710:	4699      	mov	r9, r3
    1712:	0033      	movs	r3, r6
    1714:	0405      	lsls	r5, r0, #16
    1716:	0c2c      	lsrs	r4, r5, #16
    1718:	0c07      	lsrs	r7, r0, #16
    171a:	0c15      	lsrs	r5, r2, #16
    171c:	4363      	muls	r3, r4
    171e:	437e      	muls	r6, r7
    1720:	436f      	muls	r7, r5
    1722:	4365      	muls	r5, r4
    1724:	0c1c      	lsrs	r4, r3, #16
    1726:	19ad      	adds	r5, r5, r6
    1728:	1964      	adds	r4, r4, r5
    172a:	469c      	mov	ip, r3
    172c:	42a6      	cmp	r6, r4
    172e:	d903      	bls.n	1738 <__aeabi_lmul+0x34>
    1730:	2380      	movs	r3, #128	; 0x80
    1732:	025b      	lsls	r3, r3, #9
    1734:	4698      	mov	r8, r3
    1736:	4447      	add	r7, r8
    1738:	4663      	mov	r3, ip
    173a:	0c25      	lsrs	r5, r4, #16
    173c:	19ef      	adds	r7, r5, r7
    173e:	041d      	lsls	r5, r3, #16
    1740:	464b      	mov	r3, r9
    1742:	434a      	muls	r2, r1
    1744:	4343      	muls	r3, r0
    1746:	0c2d      	lsrs	r5, r5, #16
    1748:	0424      	lsls	r4, r4, #16
    174a:	1964      	adds	r4, r4, r5
    174c:	1899      	adds	r1, r3, r2
    174e:	19c9      	adds	r1, r1, r7
    1750:	0020      	movs	r0, r4
    1752:	bc0c      	pop	{r2, r3}
    1754:	4690      	mov	r8, r2
    1756:	4699      	mov	r9, r3
    1758:	bdf0      	pop	{r4, r5, r6, r7, pc}
    175a:	46c0      	nop			; (mov r8, r8)

0000175c <__aeabi_dadd>:
    175c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    175e:	4656      	mov	r6, sl
    1760:	465f      	mov	r7, fp
    1762:	464d      	mov	r5, r9
    1764:	4644      	mov	r4, r8
    1766:	b4f0      	push	{r4, r5, r6, r7}
    1768:	000f      	movs	r7, r1
    176a:	0ffd      	lsrs	r5, r7, #31
    176c:	46aa      	mov	sl, r5
    176e:	0309      	lsls	r1, r1, #12
    1770:	007c      	lsls	r4, r7, #1
    1772:	002e      	movs	r6, r5
    1774:	005f      	lsls	r7, r3, #1
    1776:	0f45      	lsrs	r5, r0, #29
    1778:	0a49      	lsrs	r1, r1, #9
    177a:	0d7f      	lsrs	r7, r7, #21
    177c:	4329      	orrs	r1, r5
    177e:	00c5      	lsls	r5, r0, #3
    1780:	0318      	lsls	r0, r3, #12
    1782:	46bc      	mov	ip, r7
    1784:	0a40      	lsrs	r0, r0, #9
    1786:	0f57      	lsrs	r7, r2, #29
    1788:	0d64      	lsrs	r4, r4, #21
    178a:	0fdb      	lsrs	r3, r3, #31
    178c:	4338      	orrs	r0, r7
    178e:	00d2      	lsls	r2, r2, #3
    1790:	459a      	cmp	sl, r3
    1792:	d100      	bne.n	1796 <__aeabi_dadd+0x3a>
    1794:	e0aa      	b.n	18ec <__aeabi_dadd+0x190>
    1796:	4666      	mov	r6, ip
    1798:	1ba6      	subs	r6, r4, r6
    179a:	2e00      	cmp	r6, #0
    179c:	dc00      	bgt.n	17a0 <__aeabi_dadd+0x44>
    179e:	e0ff      	b.n	19a0 <__aeabi_dadd+0x244>
    17a0:	4663      	mov	r3, ip
    17a2:	2b00      	cmp	r3, #0
    17a4:	d139      	bne.n	181a <__aeabi_dadd+0xbe>
    17a6:	0003      	movs	r3, r0
    17a8:	4313      	orrs	r3, r2
    17aa:	d000      	beq.n	17ae <__aeabi_dadd+0x52>
    17ac:	e0d9      	b.n	1962 <__aeabi_dadd+0x206>
    17ae:	076b      	lsls	r3, r5, #29
    17b0:	d009      	beq.n	17c6 <__aeabi_dadd+0x6a>
    17b2:	230f      	movs	r3, #15
    17b4:	402b      	ands	r3, r5
    17b6:	2b04      	cmp	r3, #4
    17b8:	d005      	beq.n	17c6 <__aeabi_dadd+0x6a>
    17ba:	1d2b      	adds	r3, r5, #4
    17bc:	42ab      	cmp	r3, r5
    17be:	41ad      	sbcs	r5, r5
    17c0:	426d      	negs	r5, r5
    17c2:	1949      	adds	r1, r1, r5
    17c4:	001d      	movs	r5, r3
    17c6:	020b      	lsls	r3, r1, #8
    17c8:	d400      	bmi.n	17cc <__aeabi_dadd+0x70>
    17ca:	e082      	b.n	18d2 <__aeabi_dadd+0x176>
    17cc:	4bca      	ldr	r3, [pc, #808]	; (1af8 <__aeabi_dadd+0x39c>)
    17ce:	3401      	adds	r4, #1
    17d0:	429c      	cmp	r4, r3
    17d2:	d100      	bne.n	17d6 <__aeabi_dadd+0x7a>
    17d4:	e0fe      	b.n	19d4 <__aeabi_dadd+0x278>
    17d6:	000a      	movs	r2, r1
    17d8:	4656      	mov	r6, sl
    17da:	4bc8      	ldr	r3, [pc, #800]	; (1afc <__aeabi_dadd+0x3a0>)
    17dc:	08ed      	lsrs	r5, r5, #3
    17de:	401a      	ands	r2, r3
    17e0:	0750      	lsls	r0, r2, #29
    17e2:	0564      	lsls	r4, r4, #21
    17e4:	0252      	lsls	r2, r2, #9
    17e6:	4305      	orrs	r5, r0
    17e8:	0b12      	lsrs	r2, r2, #12
    17ea:	0d64      	lsrs	r4, r4, #21
    17ec:	2100      	movs	r1, #0
    17ee:	0312      	lsls	r2, r2, #12
    17f0:	0d0b      	lsrs	r3, r1, #20
    17f2:	051b      	lsls	r3, r3, #20
    17f4:	0564      	lsls	r4, r4, #21
    17f6:	0b12      	lsrs	r2, r2, #12
    17f8:	431a      	orrs	r2, r3
    17fa:	0863      	lsrs	r3, r4, #1
    17fc:	4cc0      	ldr	r4, [pc, #768]	; (1b00 <__aeabi_dadd+0x3a4>)
    17fe:	07f6      	lsls	r6, r6, #31
    1800:	4014      	ands	r4, r2
    1802:	431c      	orrs	r4, r3
    1804:	0064      	lsls	r4, r4, #1
    1806:	0864      	lsrs	r4, r4, #1
    1808:	4334      	orrs	r4, r6
    180a:	0028      	movs	r0, r5
    180c:	0021      	movs	r1, r4
    180e:	bc3c      	pop	{r2, r3, r4, r5}
    1810:	4690      	mov	r8, r2
    1812:	4699      	mov	r9, r3
    1814:	46a2      	mov	sl, r4
    1816:	46ab      	mov	fp, r5
    1818:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    181a:	4bb7      	ldr	r3, [pc, #732]	; (1af8 <__aeabi_dadd+0x39c>)
    181c:	429c      	cmp	r4, r3
    181e:	d0c6      	beq.n	17ae <__aeabi_dadd+0x52>
    1820:	2380      	movs	r3, #128	; 0x80
    1822:	041b      	lsls	r3, r3, #16
    1824:	4318      	orrs	r0, r3
    1826:	2e38      	cmp	r6, #56	; 0x38
    1828:	dd00      	ble.n	182c <__aeabi_dadd+0xd0>
    182a:	e0eb      	b.n	1a04 <__aeabi_dadd+0x2a8>
    182c:	2e1f      	cmp	r6, #31
    182e:	dd00      	ble.n	1832 <__aeabi_dadd+0xd6>
    1830:	e11e      	b.n	1a70 <__aeabi_dadd+0x314>
    1832:	2320      	movs	r3, #32
    1834:	1b9b      	subs	r3, r3, r6
    1836:	469c      	mov	ip, r3
    1838:	0003      	movs	r3, r0
    183a:	4667      	mov	r7, ip
    183c:	40bb      	lsls	r3, r7
    183e:	4698      	mov	r8, r3
    1840:	0013      	movs	r3, r2
    1842:	4647      	mov	r7, r8
    1844:	40f3      	lsrs	r3, r6
    1846:	433b      	orrs	r3, r7
    1848:	4667      	mov	r7, ip
    184a:	40ba      	lsls	r2, r7
    184c:	1e57      	subs	r7, r2, #1
    184e:	41ba      	sbcs	r2, r7
    1850:	4313      	orrs	r3, r2
    1852:	0002      	movs	r2, r0
    1854:	40f2      	lsrs	r2, r6
    1856:	1aeb      	subs	r3, r5, r3
    1858:	429d      	cmp	r5, r3
    185a:	41b6      	sbcs	r6, r6
    185c:	001d      	movs	r5, r3
    185e:	1a8a      	subs	r2, r1, r2
    1860:	4276      	negs	r6, r6
    1862:	1b91      	subs	r1, r2, r6
    1864:	020b      	lsls	r3, r1, #8
    1866:	d531      	bpl.n	18cc <__aeabi_dadd+0x170>
    1868:	024a      	lsls	r2, r1, #9
    186a:	0a56      	lsrs	r6, r2, #9
    186c:	2e00      	cmp	r6, #0
    186e:	d100      	bne.n	1872 <__aeabi_dadd+0x116>
    1870:	e0b4      	b.n	19dc <__aeabi_dadd+0x280>
    1872:	0030      	movs	r0, r6
    1874:	f000 fe72 	bl	255c <__clzsi2>
    1878:	0003      	movs	r3, r0
    187a:	3b08      	subs	r3, #8
    187c:	2b1f      	cmp	r3, #31
    187e:	dd00      	ble.n	1882 <__aeabi_dadd+0x126>
    1880:	e0b5      	b.n	19ee <__aeabi_dadd+0x292>
    1882:	2220      	movs	r2, #32
    1884:	0029      	movs	r1, r5
    1886:	1ad2      	subs	r2, r2, r3
    1888:	40d1      	lsrs	r1, r2
    188a:	409e      	lsls	r6, r3
    188c:	000a      	movs	r2, r1
    188e:	409d      	lsls	r5, r3
    1890:	4332      	orrs	r2, r6
    1892:	429c      	cmp	r4, r3
    1894:	dd00      	ble.n	1898 <__aeabi_dadd+0x13c>
    1896:	e0b1      	b.n	19fc <__aeabi_dadd+0x2a0>
    1898:	1b1c      	subs	r4, r3, r4
    189a:	1c63      	adds	r3, r4, #1
    189c:	2b1f      	cmp	r3, #31
    189e:	dd00      	ble.n	18a2 <__aeabi_dadd+0x146>
    18a0:	e0d5      	b.n	1a4e <__aeabi_dadd+0x2f2>
    18a2:	2120      	movs	r1, #32
    18a4:	0014      	movs	r4, r2
    18a6:	0028      	movs	r0, r5
    18a8:	1ac9      	subs	r1, r1, r3
    18aa:	408c      	lsls	r4, r1
    18ac:	40d8      	lsrs	r0, r3
    18ae:	408d      	lsls	r5, r1
    18b0:	4304      	orrs	r4, r0
    18b2:	40da      	lsrs	r2, r3
    18b4:	1e68      	subs	r0, r5, #1
    18b6:	4185      	sbcs	r5, r0
    18b8:	0011      	movs	r1, r2
    18ba:	4325      	orrs	r5, r4
    18bc:	2400      	movs	r4, #0
    18be:	e776      	b.n	17ae <__aeabi_dadd+0x52>
    18c0:	4641      	mov	r1, r8
    18c2:	4331      	orrs	r1, r6
    18c4:	d100      	bne.n	18c8 <__aeabi_dadd+0x16c>
    18c6:	e234      	b.n	1d32 <__aeabi_dadd+0x5d6>
    18c8:	0031      	movs	r1, r6
    18ca:	4645      	mov	r5, r8
    18cc:	076b      	lsls	r3, r5, #29
    18ce:	d000      	beq.n	18d2 <__aeabi_dadd+0x176>
    18d0:	e76f      	b.n	17b2 <__aeabi_dadd+0x56>
    18d2:	4656      	mov	r6, sl
    18d4:	0748      	lsls	r0, r1, #29
    18d6:	08ed      	lsrs	r5, r5, #3
    18d8:	08c9      	lsrs	r1, r1, #3
    18da:	4305      	orrs	r5, r0
    18dc:	4b86      	ldr	r3, [pc, #536]	; (1af8 <__aeabi_dadd+0x39c>)
    18de:	429c      	cmp	r4, r3
    18e0:	d035      	beq.n	194e <__aeabi_dadd+0x1f2>
    18e2:	030a      	lsls	r2, r1, #12
    18e4:	0564      	lsls	r4, r4, #21
    18e6:	0b12      	lsrs	r2, r2, #12
    18e8:	0d64      	lsrs	r4, r4, #21
    18ea:	e77f      	b.n	17ec <__aeabi_dadd+0x90>
    18ec:	4663      	mov	r3, ip
    18ee:	1ae3      	subs	r3, r4, r3
    18f0:	469b      	mov	fp, r3
    18f2:	2b00      	cmp	r3, #0
    18f4:	dc00      	bgt.n	18f8 <__aeabi_dadd+0x19c>
    18f6:	e08b      	b.n	1a10 <__aeabi_dadd+0x2b4>
    18f8:	4667      	mov	r7, ip
    18fa:	2f00      	cmp	r7, #0
    18fc:	d03c      	beq.n	1978 <__aeabi_dadd+0x21c>
    18fe:	4f7e      	ldr	r7, [pc, #504]	; (1af8 <__aeabi_dadd+0x39c>)
    1900:	42bc      	cmp	r4, r7
    1902:	d100      	bne.n	1906 <__aeabi_dadd+0x1aa>
    1904:	e753      	b.n	17ae <__aeabi_dadd+0x52>
    1906:	2780      	movs	r7, #128	; 0x80
    1908:	043f      	lsls	r7, r7, #16
    190a:	4338      	orrs	r0, r7
    190c:	465b      	mov	r3, fp
    190e:	2b38      	cmp	r3, #56	; 0x38
    1910:	dc00      	bgt.n	1914 <__aeabi_dadd+0x1b8>
    1912:	e0f7      	b.n	1b04 <__aeabi_dadd+0x3a8>
    1914:	4302      	orrs	r2, r0
    1916:	1e50      	subs	r0, r2, #1
    1918:	4182      	sbcs	r2, r0
    191a:	2000      	movs	r0, #0
    191c:	b2d2      	uxtb	r2, r2
    191e:	1953      	adds	r3, r2, r5
    1920:	1842      	adds	r2, r0, r1
    1922:	42ab      	cmp	r3, r5
    1924:	4189      	sbcs	r1, r1
    1926:	001d      	movs	r5, r3
    1928:	4249      	negs	r1, r1
    192a:	1889      	adds	r1, r1, r2
    192c:	020b      	lsls	r3, r1, #8
    192e:	d5cd      	bpl.n	18cc <__aeabi_dadd+0x170>
    1930:	4b71      	ldr	r3, [pc, #452]	; (1af8 <__aeabi_dadd+0x39c>)
    1932:	3401      	adds	r4, #1
    1934:	429c      	cmp	r4, r3
    1936:	d100      	bne.n	193a <__aeabi_dadd+0x1de>
    1938:	e13d      	b.n	1bb6 <__aeabi_dadd+0x45a>
    193a:	2001      	movs	r0, #1
    193c:	4a6f      	ldr	r2, [pc, #444]	; (1afc <__aeabi_dadd+0x3a0>)
    193e:	086b      	lsrs	r3, r5, #1
    1940:	400a      	ands	r2, r1
    1942:	4028      	ands	r0, r5
    1944:	4318      	orrs	r0, r3
    1946:	07d5      	lsls	r5, r2, #31
    1948:	4305      	orrs	r5, r0
    194a:	0851      	lsrs	r1, r2, #1
    194c:	e72f      	b.n	17ae <__aeabi_dadd+0x52>
    194e:	002b      	movs	r3, r5
    1950:	430b      	orrs	r3, r1
    1952:	d100      	bne.n	1956 <__aeabi_dadd+0x1fa>
    1954:	e1cb      	b.n	1cee <__aeabi_dadd+0x592>
    1956:	2380      	movs	r3, #128	; 0x80
    1958:	031b      	lsls	r3, r3, #12
    195a:	430b      	orrs	r3, r1
    195c:	031a      	lsls	r2, r3, #12
    195e:	0b12      	lsrs	r2, r2, #12
    1960:	e744      	b.n	17ec <__aeabi_dadd+0x90>
    1962:	3e01      	subs	r6, #1
    1964:	2e00      	cmp	r6, #0
    1966:	d16d      	bne.n	1a44 <__aeabi_dadd+0x2e8>
    1968:	1aae      	subs	r6, r5, r2
    196a:	42b5      	cmp	r5, r6
    196c:	419b      	sbcs	r3, r3
    196e:	1a09      	subs	r1, r1, r0
    1970:	425b      	negs	r3, r3
    1972:	1ac9      	subs	r1, r1, r3
    1974:	0035      	movs	r5, r6
    1976:	e775      	b.n	1864 <__aeabi_dadd+0x108>
    1978:	0007      	movs	r7, r0
    197a:	4317      	orrs	r7, r2
    197c:	d100      	bne.n	1980 <__aeabi_dadd+0x224>
    197e:	e716      	b.n	17ae <__aeabi_dadd+0x52>
    1980:	2301      	movs	r3, #1
    1982:	425b      	negs	r3, r3
    1984:	469c      	mov	ip, r3
    1986:	44e3      	add	fp, ip
    1988:	465b      	mov	r3, fp
    198a:	2b00      	cmp	r3, #0
    198c:	d000      	beq.n	1990 <__aeabi_dadd+0x234>
    198e:	e0e0      	b.n	1b52 <__aeabi_dadd+0x3f6>
    1990:	18aa      	adds	r2, r5, r2
    1992:	42aa      	cmp	r2, r5
    1994:	419b      	sbcs	r3, r3
    1996:	1809      	adds	r1, r1, r0
    1998:	425b      	negs	r3, r3
    199a:	1859      	adds	r1, r3, r1
    199c:	0015      	movs	r5, r2
    199e:	e7c5      	b.n	192c <__aeabi_dadd+0x1d0>
    19a0:	2e00      	cmp	r6, #0
    19a2:	d175      	bne.n	1a90 <__aeabi_dadd+0x334>
    19a4:	1c66      	adds	r6, r4, #1
    19a6:	0576      	lsls	r6, r6, #21
    19a8:	0d76      	lsrs	r6, r6, #21
    19aa:	2e01      	cmp	r6, #1
    19ac:	dc00      	bgt.n	19b0 <__aeabi_dadd+0x254>
    19ae:	e0f3      	b.n	1b98 <__aeabi_dadd+0x43c>
    19b0:	1aae      	subs	r6, r5, r2
    19b2:	46b0      	mov	r8, r6
    19b4:	4545      	cmp	r5, r8
    19b6:	41bf      	sbcs	r7, r7
    19b8:	1a0e      	subs	r6, r1, r0
    19ba:	427f      	negs	r7, r7
    19bc:	1bf6      	subs	r6, r6, r7
    19be:	0237      	lsls	r7, r6, #8
    19c0:	d400      	bmi.n	19c4 <__aeabi_dadd+0x268>
    19c2:	e08f      	b.n	1ae4 <__aeabi_dadd+0x388>
    19c4:	1b55      	subs	r5, r2, r5
    19c6:	42aa      	cmp	r2, r5
    19c8:	41b6      	sbcs	r6, r6
    19ca:	1a41      	subs	r1, r0, r1
    19cc:	4276      	negs	r6, r6
    19ce:	1b8e      	subs	r6, r1, r6
    19d0:	469a      	mov	sl, r3
    19d2:	e74b      	b.n	186c <__aeabi_dadd+0x110>
    19d4:	4656      	mov	r6, sl
    19d6:	2200      	movs	r2, #0
    19d8:	2500      	movs	r5, #0
    19da:	e707      	b.n	17ec <__aeabi_dadd+0x90>
    19dc:	0028      	movs	r0, r5
    19de:	f000 fdbd 	bl	255c <__clzsi2>
    19e2:	3020      	adds	r0, #32
    19e4:	0003      	movs	r3, r0
    19e6:	3b08      	subs	r3, #8
    19e8:	2b1f      	cmp	r3, #31
    19ea:	dc00      	bgt.n	19ee <__aeabi_dadd+0x292>
    19ec:	e749      	b.n	1882 <__aeabi_dadd+0x126>
    19ee:	002a      	movs	r2, r5
    19f0:	3828      	subs	r0, #40	; 0x28
    19f2:	4082      	lsls	r2, r0
    19f4:	2500      	movs	r5, #0
    19f6:	429c      	cmp	r4, r3
    19f8:	dc00      	bgt.n	19fc <__aeabi_dadd+0x2a0>
    19fa:	e74d      	b.n	1898 <__aeabi_dadd+0x13c>
    19fc:	493f      	ldr	r1, [pc, #252]	; (1afc <__aeabi_dadd+0x3a0>)
    19fe:	1ae4      	subs	r4, r4, r3
    1a00:	4011      	ands	r1, r2
    1a02:	e6d4      	b.n	17ae <__aeabi_dadd+0x52>
    1a04:	4302      	orrs	r2, r0
    1a06:	1e50      	subs	r0, r2, #1
    1a08:	4182      	sbcs	r2, r0
    1a0a:	b2d3      	uxtb	r3, r2
    1a0c:	2200      	movs	r2, #0
    1a0e:	e722      	b.n	1856 <__aeabi_dadd+0xfa>
    1a10:	2b00      	cmp	r3, #0
    1a12:	d000      	beq.n	1a16 <__aeabi_dadd+0x2ba>
    1a14:	e0f3      	b.n	1bfe <__aeabi_dadd+0x4a2>
    1a16:	1c63      	adds	r3, r4, #1
    1a18:	469c      	mov	ip, r3
    1a1a:	055b      	lsls	r3, r3, #21
    1a1c:	0d5b      	lsrs	r3, r3, #21
    1a1e:	2b01      	cmp	r3, #1
    1a20:	dc00      	bgt.n	1a24 <__aeabi_dadd+0x2c8>
    1a22:	e09f      	b.n	1b64 <__aeabi_dadd+0x408>
    1a24:	4b34      	ldr	r3, [pc, #208]	; (1af8 <__aeabi_dadd+0x39c>)
    1a26:	459c      	cmp	ip, r3
    1a28:	d100      	bne.n	1a2c <__aeabi_dadd+0x2d0>
    1a2a:	e0c3      	b.n	1bb4 <__aeabi_dadd+0x458>
    1a2c:	18aa      	adds	r2, r5, r2
    1a2e:	1809      	adds	r1, r1, r0
    1a30:	42aa      	cmp	r2, r5
    1a32:	4180      	sbcs	r0, r0
    1a34:	4240      	negs	r0, r0
    1a36:	1841      	adds	r1, r0, r1
    1a38:	07cd      	lsls	r5, r1, #31
    1a3a:	0852      	lsrs	r2, r2, #1
    1a3c:	4315      	orrs	r5, r2
    1a3e:	0849      	lsrs	r1, r1, #1
    1a40:	4664      	mov	r4, ip
    1a42:	e6b4      	b.n	17ae <__aeabi_dadd+0x52>
    1a44:	4b2c      	ldr	r3, [pc, #176]	; (1af8 <__aeabi_dadd+0x39c>)
    1a46:	429c      	cmp	r4, r3
    1a48:	d000      	beq.n	1a4c <__aeabi_dadd+0x2f0>
    1a4a:	e6ec      	b.n	1826 <__aeabi_dadd+0xca>
    1a4c:	e6af      	b.n	17ae <__aeabi_dadd+0x52>
    1a4e:	0011      	movs	r1, r2
    1a50:	3c1f      	subs	r4, #31
    1a52:	40e1      	lsrs	r1, r4
    1a54:	000c      	movs	r4, r1
    1a56:	2b20      	cmp	r3, #32
    1a58:	d100      	bne.n	1a5c <__aeabi_dadd+0x300>
    1a5a:	e07f      	b.n	1b5c <__aeabi_dadd+0x400>
    1a5c:	2140      	movs	r1, #64	; 0x40
    1a5e:	1acb      	subs	r3, r1, r3
    1a60:	409a      	lsls	r2, r3
    1a62:	4315      	orrs	r5, r2
    1a64:	1e6a      	subs	r2, r5, #1
    1a66:	4195      	sbcs	r5, r2
    1a68:	2100      	movs	r1, #0
    1a6a:	4325      	orrs	r5, r4
    1a6c:	2400      	movs	r4, #0
    1a6e:	e72d      	b.n	18cc <__aeabi_dadd+0x170>
    1a70:	0033      	movs	r3, r6
    1a72:	0007      	movs	r7, r0
    1a74:	3b20      	subs	r3, #32
    1a76:	40df      	lsrs	r7, r3
    1a78:	003b      	movs	r3, r7
    1a7a:	2e20      	cmp	r6, #32
    1a7c:	d070      	beq.n	1b60 <__aeabi_dadd+0x404>
    1a7e:	2740      	movs	r7, #64	; 0x40
    1a80:	1bbe      	subs	r6, r7, r6
    1a82:	40b0      	lsls	r0, r6
    1a84:	4302      	orrs	r2, r0
    1a86:	1e50      	subs	r0, r2, #1
    1a88:	4182      	sbcs	r2, r0
    1a8a:	4313      	orrs	r3, r2
    1a8c:	2200      	movs	r2, #0
    1a8e:	e6e2      	b.n	1856 <__aeabi_dadd+0xfa>
    1a90:	2c00      	cmp	r4, #0
    1a92:	d04f      	beq.n	1b34 <__aeabi_dadd+0x3d8>
    1a94:	4c18      	ldr	r4, [pc, #96]	; (1af8 <__aeabi_dadd+0x39c>)
    1a96:	45a4      	cmp	ip, r4
    1a98:	d100      	bne.n	1a9c <__aeabi_dadd+0x340>
    1a9a:	e0ab      	b.n	1bf4 <__aeabi_dadd+0x498>
    1a9c:	2480      	movs	r4, #128	; 0x80
    1a9e:	0424      	lsls	r4, r4, #16
    1aa0:	4276      	negs	r6, r6
    1aa2:	4321      	orrs	r1, r4
    1aa4:	2e38      	cmp	r6, #56	; 0x38
    1aa6:	dd00      	ble.n	1aaa <__aeabi_dadd+0x34e>
    1aa8:	e0df      	b.n	1c6a <__aeabi_dadd+0x50e>
    1aaa:	2e1f      	cmp	r6, #31
    1aac:	dd00      	ble.n	1ab0 <__aeabi_dadd+0x354>
    1aae:	e143      	b.n	1d38 <__aeabi_dadd+0x5dc>
    1ab0:	2720      	movs	r7, #32
    1ab2:	1bbc      	subs	r4, r7, r6
    1ab4:	46a1      	mov	r9, r4
    1ab6:	000c      	movs	r4, r1
    1ab8:	464f      	mov	r7, r9
    1aba:	40bc      	lsls	r4, r7
    1abc:	46a0      	mov	r8, r4
    1abe:	002c      	movs	r4, r5
    1ac0:	4647      	mov	r7, r8
    1ac2:	40f4      	lsrs	r4, r6
    1ac4:	433c      	orrs	r4, r7
    1ac6:	464f      	mov	r7, r9
    1ac8:	40bd      	lsls	r5, r7
    1aca:	1e6f      	subs	r7, r5, #1
    1acc:	41bd      	sbcs	r5, r7
    1ace:	40f1      	lsrs	r1, r6
    1ad0:	432c      	orrs	r4, r5
    1ad2:	1b15      	subs	r5, r2, r4
    1ad4:	42aa      	cmp	r2, r5
    1ad6:	4192      	sbcs	r2, r2
    1ad8:	1a41      	subs	r1, r0, r1
    1ada:	4252      	negs	r2, r2
    1adc:	1a89      	subs	r1, r1, r2
    1ade:	4664      	mov	r4, ip
    1ae0:	469a      	mov	sl, r3
    1ae2:	e6bf      	b.n	1864 <__aeabi_dadd+0x108>
    1ae4:	4641      	mov	r1, r8
    1ae6:	4645      	mov	r5, r8
    1ae8:	4331      	orrs	r1, r6
    1aea:	d000      	beq.n	1aee <__aeabi_dadd+0x392>
    1aec:	e6be      	b.n	186c <__aeabi_dadd+0x110>
    1aee:	2600      	movs	r6, #0
    1af0:	2400      	movs	r4, #0
    1af2:	2500      	movs	r5, #0
    1af4:	e6f2      	b.n	18dc <__aeabi_dadd+0x180>
    1af6:	46c0      	nop			; (mov r8, r8)
    1af8:	000007ff 	.word	0x000007ff
    1afc:	ff7fffff 	.word	0xff7fffff
    1b00:	800fffff 	.word	0x800fffff
    1b04:	2b1f      	cmp	r3, #31
    1b06:	dc59      	bgt.n	1bbc <__aeabi_dadd+0x460>
    1b08:	2720      	movs	r7, #32
    1b0a:	1aff      	subs	r7, r7, r3
    1b0c:	46bc      	mov	ip, r7
    1b0e:	0007      	movs	r7, r0
    1b10:	4663      	mov	r3, ip
    1b12:	409f      	lsls	r7, r3
    1b14:	465b      	mov	r3, fp
    1b16:	46b9      	mov	r9, r7
    1b18:	0017      	movs	r7, r2
    1b1a:	40df      	lsrs	r7, r3
    1b1c:	46b8      	mov	r8, r7
    1b1e:	464f      	mov	r7, r9
    1b20:	4643      	mov	r3, r8
    1b22:	431f      	orrs	r7, r3
    1b24:	4663      	mov	r3, ip
    1b26:	409a      	lsls	r2, r3
    1b28:	1e53      	subs	r3, r2, #1
    1b2a:	419a      	sbcs	r2, r3
    1b2c:	465b      	mov	r3, fp
    1b2e:	433a      	orrs	r2, r7
    1b30:	40d8      	lsrs	r0, r3
    1b32:	e6f4      	b.n	191e <__aeabi_dadd+0x1c2>
    1b34:	000c      	movs	r4, r1
    1b36:	432c      	orrs	r4, r5
    1b38:	d05c      	beq.n	1bf4 <__aeabi_dadd+0x498>
    1b3a:	43f6      	mvns	r6, r6
    1b3c:	2e00      	cmp	r6, #0
    1b3e:	d155      	bne.n	1bec <__aeabi_dadd+0x490>
    1b40:	1b55      	subs	r5, r2, r5
    1b42:	42aa      	cmp	r2, r5
    1b44:	41a4      	sbcs	r4, r4
    1b46:	1a41      	subs	r1, r0, r1
    1b48:	4264      	negs	r4, r4
    1b4a:	1b09      	subs	r1, r1, r4
    1b4c:	469a      	mov	sl, r3
    1b4e:	4664      	mov	r4, ip
    1b50:	e688      	b.n	1864 <__aeabi_dadd+0x108>
    1b52:	4f96      	ldr	r7, [pc, #600]	; (1dac <__aeabi_dadd+0x650>)
    1b54:	42bc      	cmp	r4, r7
    1b56:	d000      	beq.n	1b5a <__aeabi_dadd+0x3fe>
    1b58:	e6d8      	b.n	190c <__aeabi_dadd+0x1b0>
    1b5a:	e628      	b.n	17ae <__aeabi_dadd+0x52>
    1b5c:	2200      	movs	r2, #0
    1b5e:	e780      	b.n	1a62 <__aeabi_dadd+0x306>
    1b60:	2000      	movs	r0, #0
    1b62:	e78f      	b.n	1a84 <__aeabi_dadd+0x328>
    1b64:	000b      	movs	r3, r1
    1b66:	432b      	orrs	r3, r5
    1b68:	2c00      	cmp	r4, #0
    1b6a:	d000      	beq.n	1b6e <__aeabi_dadd+0x412>
    1b6c:	e0c2      	b.n	1cf4 <__aeabi_dadd+0x598>
    1b6e:	2b00      	cmp	r3, #0
    1b70:	d100      	bne.n	1b74 <__aeabi_dadd+0x418>
    1b72:	e101      	b.n	1d78 <__aeabi_dadd+0x61c>
    1b74:	0003      	movs	r3, r0
    1b76:	4313      	orrs	r3, r2
    1b78:	d100      	bne.n	1b7c <__aeabi_dadd+0x420>
    1b7a:	e618      	b.n	17ae <__aeabi_dadd+0x52>
    1b7c:	18ab      	adds	r3, r5, r2
    1b7e:	42ab      	cmp	r3, r5
    1b80:	41b6      	sbcs	r6, r6
    1b82:	1809      	adds	r1, r1, r0
    1b84:	4276      	negs	r6, r6
    1b86:	1871      	adds	r1, r6, r1
    1b88:	020a      	lsls	r2, r1, #8
    1b8a:	d400      	bmi.n	1b8e <__aeabi_dadd+0x432>
    1b8c:	e109      	b.n	1da2 <__aeabi_dadd+0x646>
    1b8e:	4a88      	ldr	r2, [pc, #544]	; (1db0 <__aeabi_dadd+0x654>)
    1b90:	001d      	movs	r5, r3
    1b92:	4011      	ands	r1, r2
    1b94:	4664      	mov	r4, ip
    1b96:	e60a      	b.n	17ae <__aeabi_dadd+0x52>
    1b98:	2c00      	cmp	r4, #0
    1b9a:	d15b      	bne.n	1c54 <__aeabi_dadd+0x4f8>
    1b9c:	000e      	movs	r6, r1
    1b9e:	432e      	orrs	r6, r5
    1ba0:	d000      	beq.n	1ba4 <__aeabi_dadd+0x448>
    1ba2:	e08a      	b.n	1cba <__aeabi_dadd+0x55e>
    1ba4:	0001      	movs	r1, r0
    1ba6:	4311      	orrs	r1, r2
    1ba8:	d100      	bne.n	1bac <__aeabi_dadd+0x450>
    1baa:	e0c2      	b.n	1d32 <__aeabi_dadd+0x5d6>
    1bac:	0001      	movs	r1, r0
    1bae:	0015      	movs	r5, r2
    1bb0:	469a      	mov	sl, r3
    1bb2:	e5fc      	b.n	17ae <__aeabi_dadd+0x52>
    1bb4:	4664      	mov	r4, ip
    1bb6:	2100      	movs	r1, #0
    1bb8:	2500      	movs	r5, #0
    1bba:	e68f      	b.n	18dc <__aeabi_dadd+0x180>
    1bbc:	2320      	movs	r3, #32
    1bbe:	425b      	negs	r3, r3
    1bc0:	469c      	mov	ip, r3
    1bc2:	44dc      	add	ip, fp
    1bc4:	4663      	mov	r3, ip
    1bc6:	0007      	movs	r7, r0
    1bc8:	40df      	lsrs	r7, r3
    1bca:	465b      	mov	r3, fp
    1bcc:	46bc      	mov	ip, r7
    1bce:	2b20      	cmp	r3, #32
    1bd0:	d100      	bne.n	1bd4 <__aeabi_dadd+0x478>
    1bd2:	e0ac      	b.n	1d2e <__aeabi_dadd+0x5d2>
    1bd4:	2340      	movs	r3, #64	; 0x40
    1bd6:	465f      	mov	r7, fp
    1bd8:	1bdb      	subs	r3, r3, r7
    1bda:	4098      	lsls	r0, r3
    1bdc:	4302      	orrs	r2, r0
    1bde:	1e50      	subs	r0, r2, #1
    1be0:	4182      	sbcs	r2, r0
    1be2:	4663      	mov	r3, ip
    1be4:	4313      	orrs	r3, r2
    1be6:	001a      	movs	r2, r3
    1be8:	2000      	movs	r0, #0
    1bea:	e698      	b.n	191e <__aeabi_dadd+0x1c2>
    1bec:	4c6f      	ldr	r4, [pc, #444]	; (1dac <__aeabi_dadd+0x650>)
    1bee:	45a4      	cmp	ip, r4
    1bf0:	d000      	beq.n	1bf4 <__aeabi_dadd+0x498>
    1bf2:	e757      	b.n	1aa4 <__aeabi_dadd+0x348>
    1bf4:	0001      	movs	r1, r0
    1bf6:	0015      	movs	r5, r2
    1bf8:	4664      	mov	r4, ip
    1bfa:	469a      	mov	sl, r3
    1bfc:	e5d7      	b.n	17ae <__aeabi_dadd+0x52>
    1bfe:	2c00      	cmp	r4, #0
    1c00:	d139      	bne.n	1c76 <__aeabi_dadd+0x51a>
    1c02:	000c      	movs	r4, r1
    1c04:	432c      	orrs	r4, r5
    1c06:	d06e      	beq.n	1ce6 <__aeabi_dadd+0x58a>
    1c08:	43db      	mvns	r3, r3
    1c0a:	2b00      	cmp	r3, #0
    1c0c:	d01a      	beq.n	1c44 <__aeabi_dadd+0x4e8>
    1c0e:	4c67      	ldr	r4, [pc, #412]	; (1dac <__aeabi_dadd+0x650>)
    1c10:	45a4      	cmp	ip, r4
    1c12:	d068      	beq.n	1ce6 <__aeabi_dadd+0x58a>
    1c14:	2b38      	cmp	r3, #56	; 0x38
    1c16:	dd00      	ble.n	1c1a <__aeabi_dadd+0x4be>
    1c18:	e0a4      	b.n	1d64 <__aeabi_dadd+0x608>
    1c1a:	2b1f      	cmp	r3, #31
    1c1c:	dd00      	ble.n	1c20 <__aeabi_dadd+0x4c4>
    1c1e:	e0ae      	b.n	1d7e <__aeabi_dadd+0x622>
    1c20:	2420      	movs	r4, #32
    1c22:	000f      	movs	r7, r1
    1c24:	1ae4      	subs	r4, r4, r3
    1c26:	40a7      	lsls	r7, r4
    1c28:	46b9      	mov	r9, r7
    1c2a:	002f      	movs	r7, r5
    1c2c:	40df      	lsrs	r7, r3
    1c2e:	46b8      	mov	r8, r7
    1c30:	46a3      	mov	fp, r4
    1c32:	464f      	mov	r7, r9
    1c34:	4644      	mov	r4, r8
    1c36:	4327      	orrs	r7, r4
    1c38:	465c      	mov	r4, fp
    1c3a:	40a5      	lsls	r5, r4
    1c3c:	1e6c      	subs	r4, r5, #1
    1c3e:	41a5      	sbcs	r5, r4
    1c40:	40d9      	lsrs	r1, r3
    1c42:	433d      	orrs	r5, r7
    1c44:	18ad      	adds	r5, r5, r2
    1c46:	4295      	cmp	r5, r2
    1c48:	419b      	sbcs	r3, r3
    1c4a:	1809      	adds	r1, r1, r0
    1c4c:	425b      	negs	r3, r3
    1c4e:	1859      	adds	r1, r3, r1
    1c50:	4664      	mov	r4, ip
    1c52:	e66b      	b.n	192c <__aeabi_dadd+0x1d0>
    1c54:	000c      	movs	r4, r1
    1c56:	432c      	orrs	r4, r5
    1c58:	d115      	bne.n	1c86 <__aeabi_dadd+0x52a>
    1c5a:	0001      	movs	r1, r0
    1c5c:	4311      	orrs	r1, r2
    1c5e:	d07b      	beq.n	1d58 <__aeabi_dadd+0x5fc>
    1c60:	0001      	movs	r1, r0
    1c62:	0015      	movs	r5, r2
    1c64:	469a      	mov	sl, r3
    1c66:	4c51      	ldr	r4, [pc, #324]	; (1dac <__aeabi_dadd+0x650>)
    1c68:	e5a1      	b.n	17ae <__aeabi_dadd+0x52>
    1c6a:	430d      	orrs	r5, r1
    1c6c:	1e69      	subs	r1, r5, #1
    1c6e:	418d      	sbcs	r5, r1
    1c70:	2100      	movs	r1, #0
    1c72:	b2ec      	uxtb	r4, r5
    1c74:	e72d      	b.n	1ad2 <__aeabi_dadd+0x376>
    1c76:	4c4d      	ldr	r4, [pc, #308]	; (1dac <__aeabi_dadd+0x650>)
    1c78:	45a4      	cmp	ip, r4
    1c7a:	d034      	beq.n	1ce6 <__aeabi_dadd+0x58a>
    1c7c:	2480      	movs	r4, #128	; 0x80
    1c7e:	0424      	lsls	r4, r4, #16
    1c80:	425b      	negs	r3, r3
    1c82:	4321      	orrs	r1, r4
    1c84:	e7c6      	b.n	1c14 <__aeabi_dadd+0x4b8>
    1c86:	0004      	movs	r4, r0
    1c88:	4314      	orrs	r4, r2
    1c8a:	d04e      	beq.n	1d2a <__aeabi_dadd+0x5ce>
    1c8c:	08ed      	lsrs	r5, r5, #3
    1c8e:	074c      	lsls	r4, r1, #29
    1c90:	432c      	orrs	r4, r5
    1c92:	2580      	movs	r5, #128	; 0x80
    1c94:	08c9      	lsrs	r1, r1, #3
    1c96:	032d      	lsls	r5, r5, #12
    1c98:	4229      	tst	r1, r5
    1c9a:	d008      	beq.n	1cae <__aeabi_dadd+0x552>
    1c9c:	08c6      	lsrs	r6, r0, #3
    1c9e:	422e      	tst	r6, r5
    1ca0:	d105      	bne.n	1cae <__aeabi_dadd+0x552>
    1ca2:	08d2      	lsrs	r2, r2, #3
    1ca4:	0741      	lsls	r1, r0, #29
    1ca6:	4311      	orrs	r1, r2
    1ca8:	000c      	movs	r4, r1
    1caa:	469a      	mov	sl, r3
    1cac:	0031      	movs	r1, r6
    1cae:	0f62      	lsrs	r2, r4, #29
    1cb0:	00c9      	lsls	r1, r1, #3
    1cb2:	00e5      	lsls	r5, r4, #3
    1cb4:	4311      	orrs	r1, r2
    1cb6:	4c3d      	ldr	r4, [pc, #244]	; (1dac <__aeabi_dadd+0x650>)
    1cb8:	e579      	b.n	17ae <__aeabi_dadd+0x52>
    1cba:	0006      	movs	r6, r0
    1cbc:	4316      	orrs	r6, r2
    1cbe:	d100      	bne.n	1cc2 <__aeabi_dadd+0x566>
    1cc0:	e575      	b.n	17ae <__aeabi_dadd+0x52>
    1cc2:	1aae      	subs	r6, r5, r2
    1cc4:	46b0      	mov	r8, r6
    1cc6:	4545      	cmp	r5, r8
    1cc8:	41bf      	sbcs	r7, r7
    1cca:	1a0e      	subs	r6, r1, r0
    1ccc:	427f      	negs	r7, r7
    1cce:	1bf6      	subs	r6, r6, r7
    1cd0:	0237      	lsls	r7, r6, #8
    1cd2:	d400      	bmi.n	1cd6 <__aeabi_dadd+0x57a>
    1cd4:	e5f4      	b.n	18c0 <__aeabi_dadd+0x164>
    1cd6:	1b55      	subs	r5, r2, r5
    1cd8:	42aa      	cmp	r2, r5
    1cda:	41b6      	sbcs	r6, r6
    1cdc:	1a41      	subs	r1, r0, r1
    1cde:	4276      	negs	r6, r6
    1ce0:	1b89      	subs	r1, r1, r6
    1ce2:	469a      	mov	sl, r3
    1ce4:	e563      	b.n	17ae <__aeabi_dadd+0x52>
    1ce6:	0001      	movs	r1, r0
    1ce8:	0015      	movs	r5, r2
    1cea:	4664      	mov	r4, ip
    1cec:	e55f      	b.n	17ae <__aeabi_dadd+0x52>
    1cee:	2200      	movs	r2, #0
    1cf0:	2500      	movs	r5, #0
    1cf2:	e57b      	b.n	17ec <__aeabi_dadd+0x90>
    1cf4:	2b00      	cmp	r3, #0
    1cf6:	d03b      	beq.n	1d70 <__aeabi_dadd+0x614>
    1cf8:	0003      	movs	r3, r0
    1cfa:	4313      	orrs	r3, r2
    1cfc:	d015      	beq.n	1d2a <__aeabi_dadd+0x5ce>
    1cfe:	08ed      	lsrs	r5, r5, #3
    1d00:	074b      	lsls	r3, r1, #29
    1d02:	432b      	orrs	r3, r5
    1d04:	2580      	movs	r5, #128	; 0x80
    1d06:	08c9      	lsrs	r1, r1, #3
    1d08:	032d      	lsls	r5, r5, #12
    1d0a:	4229      	tst	r1, r5
    1d0c:	d007      	beq.n	1d1e <__aeabi_dadd+0x5c2>
    1d0e:	08c4      	lsrs	r4, r0, #3
    1d10:	422c      	tst	r4, r5
    1d12:	d104      	bne.n	1d1e <__aeabi_dadd+0x5c2>
    1d14:	0741      	lsls	r1, r0, #29
    1d16:	000b      	movs	r3, r1
    1d18:	0021      	movs	r1, r4
    1d1a:	08d2      	lsrs	r2, r2, #3
    1d1c:	4313      	orrs	r3, r2
    1d1e:	00c9      	lsls	r1, r1, #3
    1d20:	0f5a      	lsrs	r2, r3, #29
    1d22:	4311      	orrs	r1, r2
    1d24:	00dd      	lsls	r5, r3, #3
    1d26:	4c21      	ldr	r4, [pc, #132]	; (1dac <__aeabi_dadd+0x650>)
    1d28:	e541      	b.n	17ae <__aeabi_dadd+0x52>
    1d2a:	4c20      	ldr	r4, [pc, #128]	; (1dac <__aeabi_dadd+0x650>)
    1d2c:	e53f      	b.n	17ae <__aeabi_dadd+0x52>
    1d2e:	2000      	movs	r0, #0
    1d30:	e754      	b.n	1bdc <__aeabi_dadd+0x480>
    1d32:	2600      	movs	r6, #0
    1d34:	2500      	movs	r5, #0
    1d36:	e5d1      	b.n	18dc <__aeabi_dadd+0x180>
    1d38:	0034      	movs	r4, r6
    1d3a:	000f      	movs	r7, r1
    1d3c:	3c20      	subs	r4, #32
    1d3e:	40e7      	lsrs	r7, r4
    1d40:	003c      	movs	r4, r7
    1d42:	2e20      	cmp	r6, #32
    1d44:	d02b      	beq.n	1d9e <__aeabi_dadd+0x642>
    1d46:	2740      	movs	r7, #64	; 0x40
    1d48:	1bbe      	subs	r6, r7, r6
    1d4a:	40b1      	lsls	r1, r6
    1d4c:	430d      	orrs	r5, r1
    1d4e:	1e69      	subs	r1, r5, #1
    1d50:	418d      	sbcs	r5, r1
    1d52:	2100      	movs	r1, #0
    1d54:	432c      	orrs	r4, r5
    1d56:	e6bc      	b.n	1ad2 <__aeabi_dadd+0x376>
    1d58:	2180      	movs	r1, #128	; 0x80
    1d5a:	2600      	movs	r6, #0
    1d5c:	0309      	lsls	r1, r1, #12
    1d5e:	4c13      	ldr	r4, [pc, #76]	; (1dac <__aeabi_dadd+0x650>)
    1d60:	2500      	movs	r5, #0
    1d62:	e5bb      	b.n	18dc <__aeabi_dadd+0x180>
    1d64:	430d      	orrs	r5, r1
    1d66:	1e69      	subs	r1, r5, #1
    1d68:	418d      	sbcs	r5, r1
    1d6a:	2100      	movs	r1, #0
    1d6c:	b2ed      	uxtb	r5, r5
    1d6e:	e769      	b.n	1c44 <__aeabi_dadd+0x4e8>
    1d70:	0001      	movs	r1, r0
    1d72:	0015      	movs	r5, r2
    1d74:	4c0d      	ldr	r4, [pc, #52]	; (1dac <__aeabi_dadd+0x650>)
    1d76:	e51a      	b.n	17ae <__aeabi_dadd+0x52>
    1d78:	0001      	movs	r1, r0
    1d7a:	0015      	movs	r5, r2
    1d7c:	e517      	b.n	17ae <__aeabi_dadd+0x52>
    1d7e:	001c      	movs	r4, r3
    1d80:	000f      	movs	r7, r1
    1d82:	3c20      	subs	r4, #32
    1d84:	40e7      	lsrs	r7, r4
    1d86:	003c      	movs	r4, r7
    1d88:	2b20      	cmp	r3, #32
    1d8a:	d00c      	beq.n	1da6 <__aeabi_dadd+0x64a>
    1d8c:	2740      	movs	r7, #64	; 0x40
    1d8e:	1afb      	subs	r3, r7, r3
    1d90:	4099      	lsls	r1, r3
    1d92:	430d      	orrs	r5, r1
    1d94:	1e69      	subs	r1, r5, #1
    1d96:	418d      	sbcs	r5, r1
    1d98:	2100      	movs	r1, #0
    1d9a:	4325      	orrs	r5, r4
    1d9c:	e752      	b.n	1c44 <__aeabi_dadd+0x4e8>
    1d9e:	2100      	movs	r1, #0
    1da0:	e7d4      	b.n	1d4c <__aeabi_dadd+0x5f0>
    1da2:	001d      	movs	r5, r3
    1da4:	e592      	b.n	18cc <__aeabi_dadd+0x170>
    1da6:	2100      	movs	r1, #0
    1da8:	e7f3      	b.n	1d92 <__aeabi_dadd+0x636>
    1daa:	46c0      	nop			; (mov r8, r8)
    1dac:	000007ff 	.word	0x000007ff
    1db0:	ff7fffff 	.word	0xff7fffff

00001db4 <__aeabi_dmul>:
    1db4:	b5f0      	push	{r4, r5, r6, r7, lr}
    1db6:	465f      	mov	r7, fp
    1db8:	4656      	mov	r6, sl
    1dba:	464d      	mov	r5, r9
    1dbc:	4644      	mov	r4, r8
    1dbe:	b4f0      	push	{r4, r5, r6, r7}
    1dc0:	030d      	lsls	r5, r1, #12
    1dc2:	4699      	mov	r9, r3
    1dc4:	004e      	lsls	r6, r1, #1
    1dc6:	0b2b      	lsrs	r3, r5, #12
    1dc8:	b087      	sub	sp, #28
    1dca:	0007      	movs	r7, r0
    1dcc:	4692      	mov	sl, r2
    1dce:	4680      	mov	r8, r0
    1dd0:	469b      	mov	fp, r3
    1dd2:	0d76      	lsrs	r6, r6, #21
    1dd4:	0fcc      	lsrs	r4, r1, #31
    1dd6:	2e00      	cmp	r6, #0
    1dd8:	d069      	beq.n	1eae <__aeabi_dmul+0xfa>
    1dda:	4b6d      	ldr	r3, [pc, #436]	; (1f90 <__aeabi_dmul+0x1dc>)
    1ddc:	429e      	cmp	r6, r3
    1dde:	d035      	beq.n	1e4c <__aeabi_dmul+0x98>
    1de0:	465b      	mov	r3, fp
    1de2:	2280      	movs	r2, #128	; 0x80
    1de4:	00dd      	lsls	r5, r3, #3
    1de6:	0412      	lsls	r2, r2, #16
    1de8:	0f43      	lsrs	r3, r0, #29
    1dea:	4313      	orrs	r3, r2
    1dec:	432b      	orrs	r3, r5
    1dee:	469b      	mov	fp, r3
    1df0:	00c3      	lsls	r3, r0, #3
    1df2:	4698      	mov	r8, r3
    1df4:	4b67      	ldr	r3, [pc, #412]	; (1f94 <__aeabi_dmul+0x1e0>)
    1df6:	2700      	movs	r7, #0
    1df8:	469c      	mov	ip, r3
    1dfa:	2300      	movs	r3, #0
    1dfc:	4466      	add	r6, ip
    1dfe:	9301      	str	r3, [sp, #4]
    1e00:	464a      	mov	r2, r9
    1e02:	0315      	lsls	r5, r2, #12
    1e04:	0050      	lsls	r0, r2, #1
    1e06:	0fd2      	lsrs	r2, r2, #31
    1e08:	4653      	mov	r3, sl
    1e0a:	0b2d      	lsrs	r5, r5, #12
    1e0c:	0d40      	lsrs	r0, r0, #21
    1e0e:	4691      	mov	r9, r2
    1e10:	d100      	bne.n	1e14 <__aeabi_dmul+0x60>
    1e12:	e076      	b.n	1f02 <__aeabi_dmul+0x14e>
    1e14:	4a5e      	ldr	r2, [pc, #376]	; (1f90 <__aeabi_dmul+0x1dc>)
    1e16:	4290      	cmp	r0, r2
    1e18:	d06c      	beq.n	1ef4 <__aeabi_dmul+0x140>
    1e1a:	2280      	movs	r2, #128	; 0x80
    1e1c:	0f5b      	lsrs	r3, r3, #29
    1e1e:	0412      	lsls	r2, r2, #16
    1e20:	4313      	orrs	r3, r2
    1e22:	4a5c      	ldr	r2, [pc, #368]	; (1f94 <__aeabi_dmul+0x1e0>)
    1e24:	00ed      	lsls	r5, r5, #3
    1e26:	4694      	mov	ip, r2
    1e28:	431d      	orrs	r5, r3
    1e2a:	4653      	mov	r3, sl
    1e2c:	2200      	movs	r2, #0
    1e2e:	00db      	lsls	r3, r3, #3
    1e30:	4460      	add	r0, ip
    1e32:	4649      	mov	r1, r9
    1e34:	1836      	adds	r6, r6, r0
    1e36:	1c70      	adds	r0, r6, #1
    1e38:	4061      	eors	r1, r4
    1e3a:	9002      	str	r0, [sp, #8]
    1e3c:	4317      	orrs	r7, r2
    1e3e:	2f0f      	cmp	r7, #15
    1e40:	d900      	bls.n	1e44 <__aeabi_dmul+0x90>
    1e42:	e0af      	b.n	1fa4 <__aeabi_dmul+0x1f0>
    1e44:	4854      	ldr	r0, [pc, #336]	; (1f98 <__aeabi_dmul+0x1e4>)
    1e46:	00bf      	lsls	r7, r7, #2
    1e48:	59c7      	ldr	r7, [r0, r7]
    1e4a:	46bf      	mov	pc, r7
    1e4c:	465b      	mov	r3, fp
    1e4e:	431f      	orrs	r7, r3
    1e50:	d000      	beq.n	1e54 <__aeabi_dmul+0xa0>
    1e52:	e088      	b.n	1f66 <__aeabi_dmul+0x1b2>
    1e54:	2300      	movs	r3, #0
    1e56:	469b      	mov	fp, r3
    1e58:	4698      	mov	r8, r3
    1e5a:	3302      	adds	r3, #2
    1e5c:	2708      	movs	r7, #8
    1e5e:	9301      	str	r3, [sp, #4]
    1e60:	e7ce      	b.n	1e00 <__aeabi_dmul+0x4c>
    1e62:	4649      	mov	r1, r9
    1e64:	2a02      	cmp	r2, #2
    1e66:	d06a      	beq.n	1f3e <__aeabi_dmul+0x18a>
    1e68:	2a03      	cmp	r2, #3
    1e6a:	d100      	bne.n	1e6e <__aeabi_dmul+0xba>
    1e6c:	e209      	b.n	2282 <STACK_SIZE+0x282>
    1e6e:	2a01      	cmp	r2, #1
    1e70:	d000      	beq.n	1e74 <__aeabi_dmul+0xc0>
    1e72:	e1bb      	b.n	21ec <STACK_SIZE+0x1ec>
    1e74:	4011      	ands	r1, r2
    1e76:	2200      	movs	r2, #0
    1e78:	2300      	movs	r3, #0
    1e7a:	2500      	movs	r5, #0
    1e7c:	4690      	mov	r8, r2
    1e7e:	b2cc      	uxtb	r4, r1
    1e80:	2100      	movs	r1, #0
    1e82:	032d      	lsls	r5, r5, #12
    1e84:	0d0a      	lsrs	r2, r1, #20
    1e86:	0512      	lsls	r2, r2, #20
    1e88:	0b2d      	lsrs	r5, r5, #12
    1e8a:	4315      	orrs	r5, r2
    1e8c:	4a43      	ldr	r2, [pc, #268]	; (1f9c <__aeabi_dmul+0x1e8>)
    1e8e:	051b      	lsls	r3, r3, #20
    1e90:	4015      	ands	r5, r2
    1e92:	431d      	orrs	r5, r3
    1e94:	006d      	lsls	r5, r5, #1
    1e96:	07e4      	lsls	r4, r4, #31
    1e98:	086d      	lsrs	r5, r5, #1
    1e9a:	4325      	orrs	r5, r4
    1e9c:	4640      	mov	r0, r8
    1e9e:	0029      	movs	r1, r5
    1ea0:	b007      	add	sp, #28
    1ea2:	bc3c      	pop	{r2, r3, r4, r5}
    1ea4:	4690      	mov	r8, r2
    1ea6:	4699      	mov	r9, r3
    1ea8:	46a2      	mov	sl, r4
    1eaa:	46ab      	mov	fp, r5
    1eac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1eae:	4303      	orrs	r3, r0
    1eb0:	d052      	beq.n	1f58 <__aeabi_dmul+0x1a4>
    1eb2:	465b      	mov	r3, fp
    1eb4:	2b00      	cmp	r3, #0
    1eb6:	d100      	bne.n	1eba <__aeabi_dmul+0x106>
    1eb8:	e18a      	b.n	21d0 <STACK_SIZE+0x1d0>
    1eba:	4658      	mov	r0, fp
    1ebc:	f000 fb4e 	bl	255c <__clzsi2>
    1ec0:	0003      	movs	r3, r0
    1ec2:	3b0b      	subs	r3, #11
    1ec4:	2b1c      	cmp	r3, #28
    1ec6:	dd00      	ble.n	1eca <__aeabi_dmul+0x116>
    1ec8:	e17b      	b.n	21c2 <STACK_SIZE+0x1c2>
    1eca:	221d      	movs	r2, #29
    1ecc:	1ad3      	subs	r3, r2, r3
    1ece:	003a      	movs	r2, r7
    1ed0:	0001      	movs	r1, r0
    1ed2:	465d      	mov	r5, fp
    1ed4:	40da      	lsrs	r2, r3
    1ed6:	3908      	subs	r1, #8
    1ed8:	408d      	lsls	r5, r1
    1eda:	0013      	movs	r3, r2
    1edc:	408f      	lsls	r7, r1
    1ede:	432b      	orrs	r3, r5
    1ee0:	469b      	mov	fp, r3
    1ee2:	46b8      	mov	r8, r7
    1ee4:	4b2e      	ldr	r3, [pc, #184]	; (1fa0 <__aeabi_dmul+0x1ec>)
    1ee6:	2700      	movs	r7, #0
    1ee8:	469c      	mov	ip, r3
    1eea:	2300      	movs	r3, #0
    1eec:	4460      	add	r0, ip
    1eee:	4246      	negs	r6, r0
    1ef0:	9301      	str	r3, [sp, #4]
    1ef2:	e785      	b.n	1e00 <__aeabi_dmul+0x4c>
    1ef4:	4652      	mov	r2, sl
    1ef6:	432a      	orrs	r2, r5
    1ef8:	d12c      	bne.n	1f54 <__aeabi_dmul+0x1a0>
    1efa:	2500      	movs	r5, #0
    1efc:	2300      	movs	r3, #0
    1efe:	2202      	movs	r2, #2
    1f00:	e797      	b.n	1e32 <__aeabi_dmul+0x7e>
    1f02:	4652      	mov	r2, sl
    1f04:	432a      	orrs	r2, r5
    1f06:	d021      	beq.n	1f4c <__aeabi_dmul+0x198>
    1f08:	2d00      	cmp	r5, #0
    1f0a:	d100      	bne.n	1f0e <__aeabi_dmul+0x15a>
    1f0c:	e154      	b.n	21b8 <STACK_SIZE+0x1b8>
    1f0e:	0028      	movs	r0, r5
    1f10:	f000 fb24 	bl	255c <__clzsi2>
    1f14:	0003      	movs	r3, r0
    1f16:	3b0b      	subs	r3, #11
    1f18:	2b1c      	cmp	r3, #28
    1f1a:	dd00      	ble.n	1f1e <__aeabi_dmul+0x16a>
    1f1c:	e146      	b.n	21ac <STACK_SIZE+0x1ac>
    1f1e:	211d      	movs	r1, #29
    1f20:	1acb      	subs	r3, r1, r3
    1f22:	4651      	mov	r1, sl
    1f24:	0002      	movs	r2, r0
    1f26:	40d9      	lsrs	r1, r3
    1f28:	4653      	mov	r3, sl
    1f2a:	3a08      	subs	r2, #8
    1f2c:	4095      	lsls	r5, r2
    1f2e:	4093      	lsls	r3, r2
    1f30:	430d      	orrs	r5, r1
    1f32:	4a1b      	ldr	r2, [pc, #108]	; (1fa0 <__aeabi_dmul+0x1ec>)
    1f34:	4694      	mov	ip, r2
    1f36:	4460      	add	r0, ip
    1f38:	4240      	negs	r0, r0
    1f3a:	2200      	movs	r2, #0
    1f3c:	e779      	b.n	1e32 <__aeabi_dmul+0x7e>
    1f3e:	2401      	movs	r4, #1
    1f40:	2200      	movs	r2, #0
    1f42:	400c      	ands	r4, r1
    1f44:	4b12      	ldr	r3, [pc, #72]	; (1f90 <__aeabi_dmul+0x1dc>)
    1f46:	2500      	movs	r5, #0
    1f48:	4690      	mov	r8, r2
    1f4a:	e799      	b.n	1e80 <__aeabi_dmul+0xcc>
    1f4c:	2500      	movs	r5, #0
    1f4e:	2300      	movs	r3, #0
    1f50:	2201      	movs	r2, #1
    1f52:	e76e      	b.n	1e32 <__aeabi_dmul+0x7e>
    1f54:	2203      	movs	r2, #3
    1f56:	e76c      	b.n	1e32 <__aeabi_dmul+0x7e>
    1f58:	2300      	movs	r3, #0
    1f5a:	469b      	mov	fp, r3
    1f5c:	4698      	mov	r8, r3
    1f5e:	3301      	adds	r3, #1
    1f60:	2704      	movs	r7, #4
    1f62:	9301      	str	r3, [sp, #4]
    1f64:	e74c      	b.n	1e00 <__aeabi_dmul+0x4c>
    1f66:	2303      	movs	r3, #3
    1f68:	270c      	movs	r7, #12
    1f6a:	9301      	str	r3, [sp, #4]
    1f6c:	e748      	b.n	1e00 <__aeabi_dmul+0x4c>
    1f6e:	2300      	movs	r3, #0
    1f70:	2580      	movs	r5, #128	; 0x80
    1f72:	4698      	mov	r8, r3
    1f74:	2400      	movs	r4, #0
    1f76:	032d      	lsls	r5, r5, #12
    1f78:	4b05      	ldr	r3, [pc, #20]	; (1f90 <__aeabi_dmul+0x1dc>)
    1f7a:	e781      	b.n	1e80 <__aeabi_dmul+0xcc>
    1f7c:	465d      	mov	r5, fp
    1f7e:	4643      	mov	r3, r8
    1f80:	9a01      	ldr	r2, [sp, #4]
    1f82:	e76f      	b.n	1e64 <__aeabi_dmul+0xb0>
    1f84:	465d      	mov	r5, fp
    1f86:	4643      	mov	r3, r8
    1f88:	0021      	movs	r1, r4
    1f8a:	9a01      	ldr	r2, [sp, #4]
    1f8c:	e76a      	b.n	1e64 <__aeabi_dmul+0xb0>
    1f8e:	46c0      	nop			; (mov r8, r8)
    1f90:	000007ff 	.word	0x000007ff
    1f94:	fffffc01 	.word	0xfffffc01
    1f98:	00002908 	.word	0x00002908
    1f9c:	800fffff 	.word	0x800fffff
    1fa0:	000003f3 	.word	0x000003f3
    1fa4:	4642      	mov	r2, r8
    1fa6:	0c12      	lsrs	r2, r2, #16
    1fa8:	4691      	mov	r9, r2
    1faa:	0c1a      	lsrs	r2, r3, #16
    1fac:	4694      	mov	ip, r2
    1fae:	4642      	mov	r2, r8
    1fb0:	0417      	lsls	r7, r2, #16
    1fb2:	464a      	mov	r2, r9
    1fb4:	041b      	lsls	r3, r3, #16
    1fb6:	0c1b      	lsrs	r3, r3, #16
    1fb8:	435a      	muls	r2, r3
    1fba:	4660      	mov	r0, ip
    1fbc:	4690      	mov	r8, r2
    1fbe:	464a      	mov	r2, r9
    1fc0:	4342      	muls	r2, r0
    1fc2:	0010      	movs	r0, r2
    1fc4:	9203      	str	r2, [sp, #12]
    1fc6:	4662      	mov	r2, ip
    1fc8:	001c      	movs	r4, r3
    1fca:	0c3f      	lsrs	r7, r7, #16
    1fcc:	437a      	muls	r2, r7
    1fce:	437c      	muls	r4, r7
    1fd0:	4442      	add	r2, r8
    1fd2:	9201      	str	r2, [sp, #4]
    1fd4:	0c22      	lsrs	r2, r4, #16
    1fd6:	4692      	mov	sl, r2
    1fd8:	9a01      	ldr	r2, [sp, #4]
    1fda:	4452      	add	r2, sl
    1fdc:	4590      	cmp	r8, r2
    1fde:	d906      	bls.n	1fee <__aeabi_dmul+0x23a>
    1fe0:	4682      	mov	sl, r0
    1fe2:	2080      	movs	r0, #128	; 0x80
    1fe4:	0240      	lsls	r0, r0, #9
    1fe6:	4680      	mov	r8, r0
    1fe8:	44c2      	add	sl, r8
    1fea:	4650      	mov	r0, sl
    1fec:	9003      	str	r0, [sp, #12]
    1fee:	0c10      	lsrs	r0, r2, #16
    1ff0:	9004      	str	r0, [sp, #16]
    1ff2:	4648      	mov	r0, r9
    1ff4:	0424      	lsls	r4, r4, #16
    1ff6:	0c24      	lsrs	r4, r4, #16
    1ff8:	0412      	lsls	r2, r2, #16
    1ffa:	1912      	adds	r2, r2, r4
    1ffc:	9205      	str	r2, [sp, #20]
    1ffe:	0c2a      	lsrs	r2, r5, #16
    2000:	042d      	lsls	r5, r5, #16
    2002:	0c2d      	lsrs	r5, r5, #16
    2004:	4368      	muls	r0, r5
    2006:	002c      	movs	r4, r5
    2008:	4682      	mov	sl, r0
    200a:	4648      	mov	r0, r9
    200c:	437c      	muls	r4, r7
    200e:	4350      	muls	r0, r2
    2010:	4681      	mov	r9, r0
    2012:	0c20      	lsrs	r0, r4, #16
    2014:	4680      	mov	r8, r0
    2016:	4357      	muls	r7, r2
    2018:	4457      	add	r7, sl
    201a:	4447      	add	r7, r8
    201c:	45ba      	cmp	sl, r7
    201e:	d903      	bls.n	2028 <STACK_SIZE+0x28>
    2020:	2080      	movs	r0, #128	; 0x80
    2022:	0240      	lsls	r0, r0, #9
    2024:	4680      	mov	r8, r0
    2026:	44c1      	add	r9, r8
    2028:	0c38      	lsrs	r0, r7, #16
    202a:	043f      	lsls	r7, r7, #16
    202c:	46b8      	mov	r8, r7
    202e:	4448      	add	r0, r9
    2030:	0424      	lsls	r4, r4, #16
    2032:	0c24      	lsrs	r4, r4, #16
    2034:	9001      	str	r0, [sp, #4]
    2036:	9804      	ldr	r0, [sp, #16]
    2038:	44a0      	add	r8, r4
    203a:	4440      	add	r0, r8
    203c:	9004      	str	r0, [sp, #16]
    203e:	4658      	mov	r0, fp
    2040:	0c00      	lsrs	r0, r0, #16
    2042:	4681      	mov	r9, r0
    2044:	4658      	mov	r0, fp
    2046:	0404      	lsls	r4, r0, #16
    2048:	0c20      	lsrs	r0, r4, #16
    204a:	4682      	mov	sl, r0
    204c:	0007      	movs	r7, r0
    204e:	4648      	mov	r0, r9
    2050:	435f      	muls	r7, r3
    2052:	464c      	mov	r4, r9
    2054:	4343      	muls	r3, r0
    2056:	4660      	mov	r0, ip
    2058:	4360      	muls	r0, r4
    205a:	4664      	mov	r4, ip
    205c:	4683      	mov	fp, r0
    205e:	4650      	mov	r0, sl
    2060:	4344      	muls	r4, r0
    2062:	0c38      	lsrs	r0, r7, #16
    2064:	4684      	mov	ip, r0
    2066:	18e4      	adds	r4, r4, r3
    2068:	4464      	add	r4, ip
    206a:	42a3      	cmp	r3, r4
    206c:	d903      	bls.n	2076 <STACK_SIZE+0x76>
    206e:	2380      	movs	r3, #128	; 0x80
    2070:	025b      	lsls	r3, r3, #9
    2072:	469c      	mov	ip, r3
    2074:	44e3      	add	fp, ip
    2076:	4648      	mov	r0, r9
    2078:	043f      	lsls	r7, r7, #16
    207a:	0c23      	lsrs	r3, r4, #16
    207c:	0c3f      	lsrs	r7, r7, #16
    207e:	0424      	lsls	r4, r4, #16
    2080:	19e4      	adds	r4, r4, r7
    2082:	4657      	mov	r7, sl
    2084:	4368      	muls	r0, r5
    2086:	436f      	muls	r7, r5
    2088:	4684      	mov	ip, r0
    208a:	464d      	mov	r5, r9
    208c:	4650      	mov	r0, sl
    208e:	4355      	muls	r5, r2
    2090:	4342      	muls	r2, r0
    2092:	0c38      	lsrs	r0, r7, #16
    2094:	4681      	mov	r9, r0
    2096:	4462      	add	r2, ip
    2098:	444a      	add	r2, r9
    209a:	445b      	add	r3, fp
    209c:	4594      	cmp	ip, r2
    209e:	d903      	bls.n	20a8 <STACK_SIZE+0xa8>
    20a0:	2080      	movs	r0, #128	; 0x80
    20a2:	0240      	lsls	r0, r0, #9
    20a4:	4684      	mov	ip, r0
    20a6:	4465      	add	r5, ip
    20a8:	9803      	ldr	r0, [sp, #12]
    20aa:	043f      	lsls	r7, r7, #16
    20ac:	4683      	mov	fp, r0
    20ae:	9804      	ldr	r0, [sp, #16]
    20b0:	0c3f      	lsrs	r7, r7, #16
    20b2:	4684      	mov	ip, r0
    20b4:	44e3      	add	fp, ip
    20b6:	45c3      	cmp	fp, r8
    20b8:	4180      	sbcs	r0, r0
    20ba:	4240      	negs	r0, r0
    20bc:	4682      	mov	sl, r0
    20be:	0410      	lsls	r0, r2, #16
    20c0:	4684      	mov	ip, r0
    20c2:	9801      	ldr	r0, [sp, #4]
    20c4:	4467      	add	r7, ip
    20c6:	4684      	mov	ip, r0
    20c8:	4467      	add	r7, ip
    20ca:	44a3      	add	fp, r4
    20cc:	46bc      	mov	ip, r7
    20ce:	45a3      	cmp	fp, r4
    20d0:	41a4      	sbcs	r4, r4
    20d2:	4699      	mov	r9, r3
    20d4:	44d4      	add	ip, sl
    20d6:	4264      	negs	r4, r4
    20d8:	4287      	cmp	r7, r0
    20da:	41bf      	sbcs	r7, r7
    20dc:	45d4      	cmp	ip, sl
    20de:	4180      	sbcs	r0, r0
    20e0:	44e1      	add	r9, ip
    20e2:	46a0      	mov	r8, r4
    20e4:	4599      	cmp	r9, r3
    20e6:	419b      	sbcs	r3, r3
    20e8:	427f      	negs	r7, r7
    20ea:	4240      	negs	r0, r0
    20ec:	44c8      	add	r8, r9
    20ee:	4307      	orrs	r7, r0
    20f0:	0c12      	lsrs	r2, r2, #16
    20f2:	18ba      	adds	r2, r7, r2
    20f4:	45a0      	cmp	r8, r4
    20f6:	41a4      	sbcs	r4, r4
    20f8:	425f      	negs	r7, r3
    20fa:	003b      	movs	r3, r7
    20fc:	4264      	negs	r4, r4
    20fe:	4323      	orrs	r3, r4
    2100:	18d7      	adds	r7, r2, r3
    2102:	4643      	mov	r3, r8
    2104:	197d      	adds	r5, r7, r5
    2106:	0ddb      	lsrs	r3, r3, #23
    2108:	026d      	lsls	r5, r5, #9
    210a:	431d      	orrs	r5, r3
    210c:	465b      	mov	r3, fp
    210e:	025a      	lsls	r2, r3, #9
    2110:	9b05      	ldr	r3, [sp, #20]
    2112:	431a      	orrs	r2, r3
    2114:	1e53      	subs	r3, r2, #1
    2116:	419a      	sbcs	r2, r3
    2118:	465b      	mov	r3, fp
    211a:	0ddb      	lsrs	r3, r3, #23
    211c:	431a      	orrs	r2, r3
    211e:	4643      	mov	r3, r8
    2120:	025b      	lsls	r3, r3, #9
    2122:	4313      	orrs	r3, r2
    2124:	01ea      	lsls	r2, r5, #7
    2126:	d507      	bpl.n	2138 <STACK_SIZE+0x138>
    2128:	2201      	movs	r2, #1
    212a:	085c      	lsrs	r4, r3, #1
    212c:	4013      	ands	r3, r2
    212e:	4323      	orrs	r3, r4
    2130:	07ea      	lsls	r2, r5, #31
    2132:	9e02      	ldr	r6, [sp, #8]
    2134:	4313      	orrs	r3, r2
    2136:	086d      	lsrs	r5, r5, #1
    2138:	4a57      	ldr	r2, [pc, #348]	; (2298 <STACK_SIZE+0x298>)
    213a:	18b2      	adds	r2, r6, r2
    213c:	2a00      	cmp	r2, #0
    213e:	dd4b      	ble.n	21d8 <STACK_SIZE+0x1d8>
    2140:	0758      	lsls	r0, r3, #29
    2142:	d009      	beq.n	2158 <STACK_SIZE+0x158>
    2144:	200f      	movs	r0, #15
    2146:	4018      	ands	r0, r3
    2148:	2804      	cmp	r0, #4
    214a:	d005      	beq.n	2158 <STACK_SIZE+0x158>
    214c:	1d18      	adds	r0, r3, #4
    214e:	4298      	cmp	r0, r3
    2150:	419b      	sbcs	r3, r3
    2152:	425b      	negs	r3, r3
    2154:	18ed      	adds	r5, r5, r3
    2156:	0003      	movs	r3, r0
    2158:	01e8      	lsls	r0, r5, #7
    215a:	d504      	bpl.n	2166 <STACK_SIZE+0x166>
    215c:	4a4f      	ldr	r2, [pc, #316]	; (229c <STACK_SIZE+0x29c>)
    215e:	4015      	ands	r5, r2
    2160:	2280      	movs	r2, #128	; 0x80
    2162:	00d2      	lsls	r2, r2, #3
    2164:	18b2      	adds	r2, r6, r2
    2166:	484e      	ldr	r0, [pc, #312]	; (22a0 <STACK_SIZE+0x2a0>)
    2168:	4282      	cmp	r2, r0
    216a:	dd00      	ble.n	216e <STACK_SIZE+0x16e>
    216c:	e6e7      	b.n	1f3e <__aeabi_dmul+0x18a>
    216e:	2401      	movs	r4, #1
    2170:	08db      	lsrs	r3, r3, #3
    2172:	0768      	lsls	r0, r5, #29
    2174:	4318      	orrs	r0, r3
    2176:	026d      	lsls	r5, r5, #9
    2178:	0553      	lsls	r3, r2, #21
    217a:	4680      	mov	r8, r0
    217c:	0b2d      	lsrs	r5, r5, #12
    217e:	0d5b      	lsrs	r3, r3, #21
    2180:	400c      	ands	r4, r1
    2182:	e67d      	b.n	1e80 <__aeabi_dmul+0xcc>
    2184:	2280      	movs	r2, #128	; 0x80
    2186:	4659      	mov	r1, fp
    2188:	0312      	lsls	r2, r2, #12
    218a:	4211      	tst	r1, r2
    218c:	d008      	beq.n	21a0 <STACK_SIZE+0x1a0>
    218e:	4215      	tst	r5, r2
    2190:	d106      	bne.n	21a0 <STACK_SIZE+0x1a0>
    2192:	4315      	orrs	r5, r2
    2194:	032d      	lsls	r5, r5, #12
    2196:	4698      	mov	r8, r3
    2198:	0b2d      	lsrs	r5, r5, #12
    219a:	464c      	mov	r4, r9
    219c:	4b41      	ldr	r3, [pc, #260]	; (22a4 <STACK_SIZE+0x2a4>)
    219e:	e66f      	b.n	1e80 <__aeabi_dmul+0xcc>
    21a0:	465d      	mov	r5, fp
    21a2:	4315      	orrs	r5, r2
    21a4:	032d      	lsls	r5, r5, #12
    21a6:	0b2d      	lsrs	r5, r5, #12
    21a8:	4b3e      	ldr	r3, [pc, #248]	; (22a4 <STACK_SIZE+0x2a4>)
    21aa:	e669      	b.n	1e80 <__aeabi_dmul+0xcc>
    21ac:	0003      	movs	r3, r0
    21ae:	4655      	mov	r5, sl
    21b0:	3b28      	subs	r3, #40	; 0x28
    21b2:	409d      	lsls	r5, r3
    21b4:	2300      	movs	r3, #0
    21b6:	e6bc      	b.n	1f32 <__aeabi_dmul+0x17e>
    21b8:	4650      	mov	r0, sl
    21ba:	f000 f9cf 	bl	255c <__clzsi2>
    21be:	3020      	adds	r0, #32
    21c0:	e6a8      	b.n	1f14 <__aeabi_dmul+0x160>
    21c2:	0003      	movs	r3, r0
    21c4:	3b28      	subs	r3, #40	; 0x28
    21c6:	409f      	lsls	r7, r3
    21c8:	2300      	movs	r3, #0
    21ca:	46bb      	mov	fp, r7
    21cc:	4698      	mov	r8, r3
    21ce:	e689      	b.n	1ee4 <__aeabi_dmul+0x130>
    21d0:	f000 f9c4 	bl	255c <__clzsi2>
    21d4:	3020      	adds	r0, #32
    21d6:	e673      	b.n	1ec0 <__aeabi_dmul+0x10c>
    21d8:	2401      	movs	r4, #1
    21da:	1aa6      	subs	r6, r4, r2
    21dc:	2e38      	cmp	r6, #56	; 0x38
    21de:	dd07      	ble.n	21f0 <STACK_SIZE+0x1f0>
    21e0:	2200      	movs	r2, #0
    21e2:	400c      	ands	r4, r1
    21e4:	2300      	movs	r3, #0
    21e6:	2500      	movs	r5, #0
    21e8:	4690      	mov	r8, r2
    21ea:	e649      	b.n	1e80 <__aeabi_dmul+0xcc>
    21ec:	9e02      	ldr	r6, [sp, #8]
    21ee:	e7a3      	b.n	2138 <STACK_SIZE+0x138>
    21f0:	2e1f      	cmp	r6, #31
    21f2:	dc20      	bgt.n	2236 <STACK_SIZE+0x236>
    21f4:	2220      	movs	r2, #32
    21f6:	002c      	movs	r4, r5
    21f8:	0018      	movs	r0, r3
    21fa:	1b92      	subs	r2, r2, r6
    21fc:	40f0      	lsrs	r0, r6
    21fe:	4094      	lsls	r4, r2
    2200:	4093      	lsls	r3, r2
    2202:	4304      	orrs	r4, r0
    2204:	1e58      	subs	r0, r3, #1
    2206:	4183      	sbcs	r3, r0
    2208:	431c      	orrs	r4, r3
    220a:	40f5      	lsrs	r5, r6
    220c:	0763      	lsls	r3, r4, #29
    220e:	d009      	beq.n	2224 <STACK_SIZE+0x224>
    2210:	230f      	movs	r3, #15
    2212:	4023      	ands	r3, r4
    2214:	2b04      	cmp	r3, #4
    2216:	d005      	beq.n	2224 <STACK_SIZE+0x224>
    2218:	0023      	movs	r3, r4
    221a:	1d1c      	adds	r4, r3, #4
    221c:	429c      	cmp	r4, r3
    221e:	4192      	sbcs	r2, r2
    2220:	4252      	negs	r2, r2
    2222:	18ad      	adds	r5, r5, r2
    2224:	022b      	lsls	r3, r5, #8
    2226:	d51f      	bpl.n	2268 <STACK_SIZE+0x268>
    2228:	2401      	movs	r4, #1
    222a:	2200      	movs	r2, #0
    222c:	400c      	ands	r4, r1
    222e:	2301      	movs	r3, #1
    2230:	2500      	movs	r5, #0
    2232:	4690      	mov	r8, r2
    2234:	e624      	b.n	1e80 <__aeabi_dmul+0xcc>
    2236:	201f      	movs	r0, #31
    2238:	002c      	movs	r4, r5
    223a:	4240      	negs	r0, r0
    223c:	1a82      	subs	r2, r0, r2
    223e:	40d4      	lsrs	r4, r2
    2240:	2e20      	cmp	r6, #32
    2242:	d01c      	beq.n	227e <STACK_SIZE+0x27e>
    2244:	2240      	movs	r2, #64	; 0x40
    2246:	1b96      	subs	r6, r2, r6
    2248:	40b5      	lsls	r5, r6
    224a:	432b      	orrs	r3, r5
    224c:	1e58      	subs	r0, r3, #1
    224e:	4183      	sbcs	r3, r0
    2250:	2007      	movs	r0, #7
    2252:	4323      	orrs	r3, r4
    2254:	4018      	ands	r0, r3
    2256:	2500      	movs	r5, #0
    2258:	2800      	cmp	r0, #0
    225a:	d009      	beq.n	2270 <STACK_SIZE+0x270>
    225c:	220f      	movs	r2, #15
    225e:	2500      	movs	r5, #0
    2260:	401a      	ands	r2, r3
    2262:	001c      	movs	r4, r3
    2264:	2a04      	cmp	r2, #4
    2266:	d1d8      	bne.n	221a <STACK_SIZE+0x21a>
    2268:	0023      	movs	r3, r4
    226a:	0768      	lsls	r0, r5, #29
    226c:	026d      	lsls	r5, r5, #9
    226e:	0b2d      	lsrs	r5, r5, #12
    2270:	2401      	movs	r4, #1
    2272:	08db      	lsrs	r3, r3, #3
    2274:	4303      	orrs	r3, r0
    2276:	4698      	mov	r8, r3
    2278:	400c      	ands	r4, r1
    227a:	2300      	movs	r3, #0
    227c:	e600      	b.n	1e80 <__aeabi_dmul+0xcc>
    227e:	2500      	movs	r5, #0
    2280:	e7e3      	b.n	224a <STACK_SIZE+0x24a>
    2282:	2280      	movs	r2, #128	; 0x80
    2284:	2401      	movs	r4, #1
    2286:	0312      	lsls	r2, r2, #12
    2288:	4315      	orrs	r5, r2
    228a:	032d      	lsls	r5, r5, #12
    228c:	4698      	mov	r8, r3
    228e:	0b2d      	lsrs	r5, r5, #12
    2290:	400c      	ands	r4, r1
    2292:	4b04      	ldr	r3, [pc, #16]	; (22a4 <STACK_SIZE+0x2a4>)
    2294:	e5f4      	b.n	1e80 <__aeabi_dmul+0xcc>
    2296:	46c0      	nop			; (mov r8, r8)
    2298:	000003ff 	.word	0x000003ff
    229c:	feffffff 	.word	0xfeffffff
    22a0:	000007fe 	.word	0x000007fe
    22a4:	000007ff 	.word	0x000007ff

000022a8 <__aeabi_i2d>:
    22a8:	b570      	push	{r4, r5, r6, lr}
    22aa:	2800      	cmp	r0, #0
    22ac:	d030      	beq.n	2310 <__aeabi_i2d+0x68>
    22ae:	17c3      	asrs	r3, r0, #31
    22b0:	18c4      	adds	r4, r0, r3
    22b2:	405c      	eors	r4, r3
    22b4:	0fc5      	lsrs	r5, r0, #31
    22b6:	0020      	movs	r0, r4
    22b8:	f000 f950 	bl	255c <__clzsi2>
    22bc:	4b17      	ldr	r3, [pc, #92]	; (231c <__aeabi_i2d+0x74>)
    22be:	4a18      	ldr	r2, [pc, #96]	; (2320 <__aeabi_i2d+0x78>)
    22c0:	1a1b      	subs	r3, r3, r0
    22c2:	1ad2      	subs	r2, r2, r3
    22c4:	2a1f      	cmp	r2, #31
    22c6:	dd18      	ble.n	22fa <__aeabi_i2d+0x52>
    22c8:	4a16      	ldr	r2, [pc, #88]	; (2324 <__aeabi_i2d+0x7c>)
    22ca:	1ad2      	subs	r2, r2, r3
    22cc:	4094      	lsls	r4, r2
    22ce:	2200      	movs	r2, #0
    22d0:	0324      	lsls	r4, r4, #12
    22d2:	055b      	lsls	r3, r3, #21
    22d4:	0b24      	lsrs	r4, r4, #12
    22d6:	0d5b      	lsrs	r3, r3, #21
    22d8:	2100      	movs	r1, #0
    22da:	0010      	movs	r0, r2
    22dc:	0324      	lsls	r4, r4, #12
    22de:	0d0a      	lsrs	r2, r1, #20
    22e0:	0512      	lsls	r2, r2, #20
    22e2:	0b24      	lsrs	r4, r4, #12
    22e4:	4314      	orrs	r4, r2
    22e6:	4a10      	ldr	r2, [pc, #64]	; (2328 <__aeabi_i2d+0x80>)
    22e8:	051b      	lsls	r3, r3, #20
    22ea:	4014      	ands	r4, r2
    22ec:	431c      	orrs	r4, r3
    22ee:	0064      	lsls	r4, r4, #1
    22f0:	07ed      	lsls	r5, r5, #31
    22f2:	0864      	lsrs	r4, r4, #1
    22f4:	432c      	orrs	r4, r5
    22f6:	0021      	movs	r1, r4
    22f8:	bd70      	pop	{r4, r5, r6, pc}
    22fa:	0021      	movs	r1, r4
    22fc:	4091      	lsls	r1, r2
    22fe:	000a      	movs	r2, r1
    2300:	210b      	movs	r1, #11
    2302:	1a08      	subs	r0, r1, r0
    2304:	40c4      	lsrs	r4, r0
    2306:	055b      	lsls	r3, r3, #21
    2308:	0324      	lsls	r4, r4, #12
    230a:	0b24      	lsrs	r4, r4, #12
    230c:	0d5b      	lsrs	r3, r3, #21
    230e:	e7e3      	b.n	22d8 <__aeabi_i2d+0x30>
    2310:	2500      	movs	r5, #0
    2312:	2300      	movs	r3, #0
    2314:	2400      	movs	r4, #0
    2316:	2200      	movs	r2, #0
    2318:	e7de      	b.n	22d8 <__aeabi_i2d+0x30>
    231a:	46c0      	nop			; (mov r8, r8)
    231c:	0000041e 	.word	0x0000041e
    2320:	00000433 	.word	0x00000433
    2324:	00000413 	.word	0x00000413
    2328:	800fffff 	.word	0x800fffff

0000232c <__aeabi_ui2d>:
    232c:	b570      	push	{r4, r5, r6, lr}
    232e:	1e05      	subs	r5, r0, #0
    2330:	d028      	beq.n	2384 <__aeabi_ui2d+0x58>
    2332:	f000 f913 	bl	255c <__clzsi2>
    2336:	4b15      	ldr	r3, [pc, #84]	; (238c <__aeabi_ui2d+0x60>)
    2338:	4a15      	ldr	r2, [pc, #84]	; (2390 <__aeabi_ui2d+0x64>)
    233a:	1a1b      	subs	r3, r3, r0
    233c:	1ad2      	subs	r2, r2, r3
    233e:	2a1f      	cmp	r2, #31
    2340:	dd16      	ble.n	2370 <__aeabi_ui2d+0x44>
    2342:	002c      	movs	r4, r5
    2344:	4a13      	ldr	r2, [pc, #76]	; (2394 <__aeabi_ui2d+0x68>)
    2346:	2500      	movs	r5, #0
    2348:	1ad2      	subs	r2, r2, r3
    234a:	4094      	lsls	r4, r2
    234c:	055a      	lsls	r2, r3, #21
    234e:	0324      	lsls	r4, r4, #12
    2350:	0b24      	lsrs	r4, r4, #12
    2352:	0d52      	lsrs	r2, r2, #21
    2354:	2100      	movs	r1, #0
    2356:	0324      	lsls	r4, r4, #12
    2358:	0d0b      	lsrs	r3, r1, #20
    235a:	0b24      	lsrs	r4, r4, #12
    235c:	051b      	lsls	r3, r3, #20
    235e:	4323      	orrs	r3, r4
    2360:	4c0d      	ldr	r4, [pc, #52]	; (2398 <__aeabi_ui2d+0x6c>)
    2362:	0512      	lsls	r2, r2, #20
    2364:	4023      	ands	r3, r4
    2366:	4313      	orrs	r3, r2
    2368:	005b      	lsls	r3, r3, #1
    236a:	0028      	movs	r0, r5
    236c:	0859      	lsrs	r1, r3, #1
    236e:	bd70      	pop	{r4, r5, r6, pc}
    2370:	210b      	movs	r1, #11
    2372:	002c      	movs	r4, r5
    2374:	1a08      	subs	r0, r1, r0
    2376:	40c4      	lsrs	r4, r0
    2378:	4095      	lsls	r5, r2
    237a:	0324      	lsls	r4, r4, #12
    237c:	055a      	lsls	r2, r3, #21
    237e:	0b24      	lsrs	r4, r4, #12
    2380:	0d52      	lsrs	r2, r2, #21
    2382:	e7e7      	b.n	2354 <__aeabi_ui2d+0x28>
    2384:	2200      	movs	r2, #0
    2386:	2400      	movs	r4, #0
    2388:	e7e4      	b.n	2354 <__aeabi_ui2d+0x28>
    238a:	46c0      	nop			; (mov r8, r8)
    238c:	0000041e 	.word	0x0000041e
    2390:	00000433 	.word	0x00000433
    2394:	00000413 	.word	0x00000413
    2398:	800fffff 	.word	0x800fffff

0000239c <__aeabi_f2d>:
    239c:	0042      	lsls	r2, r0, #1
    239e:	0e12      	lsrs	r2, r2, #24
    23a0:	1c51      	adds	r1, r2, #1
    23a2:	0243      	lsls	r3, r0, #9
    23a4:	b2c9      	uxtb	r1, r1
    23a6:	b570      	push	{r4, r5, r6, lr}
    23a8:	0a5d      	lsrs	r5, r3, #9
    23aa:	0fc4      	lsrs	r4, r0, #31
    23ac:	2901      	cmp	r1, #1
    23ae:	dd15      	ble.n	23dc <__aeabi_f2d+0x40>
    23b0:	21e0      	movs	r1, #224	; 0xe0
    23b2:	0089      	lsls	r1, r1, #2
    23b4:	468c      	mov	ip, r1
    23b6:	076d      	lsls	r5, r5, #29
    23b8:	0b1b      	lsrs	r3, r3, #12
    23ba:	4462      	add	r2, ip
    23bc:	2100      	movs	r1, #0
    23be:	0028      	movs	r0, r5
    23c0:	0d0d      	lsrs	r5, r1, #20
    23c2:	052d      	lsls	r5, r5, #20
    23c4:	432b      	orrs	r3, r5
    23c6:	4d1c      	ldr	r5, [pc, #112]	; (2438 <__aeabi_f2d+0x9c>)
    23c8:	0552      	lsls	r2, r2, #21
    23ca:	402b      	ands	r3, r5
    23cc:	0852      	lsrs	r2, r2, #1
    23ce:	4313      	orrs	r3, r2
    23d0:	005b      	lsls	r3, r3, #1
    23d2:	07e4      	lsls	r4, r4, #31
    23d4:	085b      	lsrs	r3, r3, #1
    23d6:	4323      	orrs	r3, r4
    23d8:	0019      	movs	r1, r3
    23da:	bd70      	pop	{r4, r5, r6, pc}
    23dc:	2a00      	cmp	r2, #0
    23de:	d115      	bne.n	240c <__aeabi_f2d+0x70>
    23e0:	2d00      	cmp	r5, #0
    23e2:	d01f      	beq.n	2424 <__aeabi_f2d+0x88>
    23e4:	0028      	movs	r0, r5
    23e6:	f000 f8b9 	bl	255c <__clzsi2>
    23ea:	280a      	cmp	r0, #10
    23ec:	dc1d      	bgt.n	242a <__aeabi_f2d+0x8e>
    23ee:	230b      	movs	r3, #11
    23f0:	002a      	movs	r2, r5
    23f2:	1a1b      	subs	r3, r3, r0
    23f4:	40da      	lsrs	r2, r3
    23f6:	0013      	movs	r3, r2
    23f8:	0002      	movs	r2, r0
    23fa:	3215      	adds	r2, #21
    23fc:	4095      	lsls	r5, r2
    23fe:	4a0f      	ldr	r2, [pc, #60]	; (243c <__aeabi_f2d+0xa0>)
    2400:	031b      	lsls	r3, r3, #12
    2402:	1a12      	subs	r2, r2, r0
    2404:	0552      	lsls	r2, r2, #21
    2406:	0b1b      	lsrs	r3, r3, #12
    2408:	0d52      	lsrs	r2, r2, #21
    240a:	e7d7      	b.n	23bc <__aeabi_f2d+0x20>
    240c:	2d00      	cmp	r5, #0
    240e:	d006      	beq.n	241e <__aeabi_f2d+0x82>
    2410:	2280      	movs	r2, #128	; 0x80
    2412:	0b1b      	lsrs	r3, r3, #12
    2414:	0312      	lsls	r2, r2, #12
    2416:	4313      	orrs	r3, r2
    2418:	076d      	lsls	r5, r5, #29
    241a:	4a09      	ldr	r2, [pc, #36]	; (2440 <__aeabi_f2d+0xa4>)
    241c:	e7ce      	b.n	23bc <__aeabi_f2d+0x20>
    241e:	4a08      	ldr	r2, [pc, #32]	; (2440 <__aeabi_f2d+0xa4>)
    2420:	2300      	movs	r3, #0
    2422:	e7cb      	b.n	23bc <__aeabi_f2d+0x20>
    2424:	2200      	movs	r2, #0
    2426:	2300      	movs	r3, #0
    2428:	e7c8      	b.n	23bc <__aeabi_f2d+0x20>
    242a:	0003      	movs	r3, r0
    242c:	3b0b      	subs	r3, #11
    242e:	409d      	lsls	r5, r3
    2430:	002b      	movs	r3, r5
    2432:	2500      	movs	r5, #0
    2434:	e7e3      	b.n	23fe <__aeabi_f2d+0x62>
    2436:	46c0      	nop			; (mov r8, r8)
    2438:	800fffff 	.word	0x800fffff
    243c:	00000389 	.word	0x00000389
    2440:	000007ff 	.word	0x000007ff

00002444 <__aeabi_d2f>:
    2444:	004b      	lsls	r3, r1, #1
    2446:	b570      	push	{r4, r5, r6, lr}
    2448:	0d5e      	lsrs	r6, r3, #21
    244a:	030c      	lsls	r4, r1, #12
    244c:	1c75      	adds	r5, r6, #1
    244e:	0a64      	lsrs	r4, r4, #9
    2450:	0f42      	lsrs	r2, r0, #29
    2452:	056d      	lsls	r5, r5, #21
    2454:	4322      	orrs	r2, r4
    2456:	0fc9      	lsrs	r1, r1, #31
    2458:	00c4      	lsls	r4, r0, #3
    245a:	0d6d      	lsrs	r5, r5, #21
    245c:	2d01      	cmp	r5, #1
    245e:	dd2a      	ble.n	24b6 <__aeabi_d2f+0x72>
    2460:	4b3b      	ldr	r3, [pc, #236]	; (2550 <__aeabi_d2f+0x10c>)
    2462:	18f3      	adds	r3, r6, r3
    2464:	2bfe      	cmp	r3, #254	; 0xfe
    2466:	dc1a      	bgt.n	249e <__aeabi_d2f+0x5a>
    2468:	2b00      	cmp	r3, #0
    246a:	dd42      	ble.n	24f2 <__aeabi_d2f+0xae>
    246c:	0180      	lsls	r0, r0, #6
    246e:	1e45      	subs	r5, r0, #1
    2470:	41a8      	sbcs	r0, r5
    2472:	00d2      	lsls	r2, r2, #3
    2474:	4310      	orrs	r0, r2
    2476:	0f62      	lsrs	r2, r4, #29
    2478:	4302      	orrs	r2, r0
    247a:	0750      	lsls	r0, r2, #29
    247c:	d004      	beq.n	2488 <__aeabi_d2f+0x44>
    247e:	200f      	movs	r0, #15
    2480:	4010      	ands	r0, r2
    2482:	2804      	cmp	r0, #4
    2484:	d000      	beq.n	2488 <__aeabi_d2f+0x44>
    2486:	3204      	adds	r2, #4
    2488:	2080      	movs	r0, #128	; 0x80
    248a:	04c0      	lsls	r0, r0, #19
    248c:	4010      	ands	r0, r2
    248e:	d021      	beq.n	24d4 <__aeabi_d2f+0x90>
    2490:	3301      	adds	r3, #1
    2492:	2bff      	cmp	r3, #255	; 0xff
    2494:	d003      	beq.n	249e <__aeabi_d2f+0x5a>
    2496:	0192      	lsls	r2, r2, #6
    2498:	0a52      	lsrs	r2, r2, #9
    249a:	b2db      	uxtb	r3, r3
    249c:	e001      	b.n	24a2 <__aeabi_d2f+0x5e>
    249e:	23ff      	movs	r3, #255	; 0xff
    24a0:	2200      	movs	r2, #0
    24a2:	0252      	lsls	r2, r2, #9
    24a4:	0a52      	lsrs	r2, r2, #9
    24a6:	05db      	lsls	r3, r3, #23
    24a8:	4313      	orrs	r3, r2
    24aa:	005b      	lsls	r3, r3, #1
    24ac:	07c9      	lsls	r1, r1, #31
    24ae:	085b      	lsrs	r3, r3, #1
    24b0:	430b      	orrs	r3, r1
    24b2:	0018      	movs	r0, r3
    24b4:	bd70      	pop	{r4, r5, r6, pc}
    24b6:	2e00      	cmp	r6, #0
    24b8:	d007      	beq.n	24ca <__aeabi_d2f+0x86>
    24ba:	4314      	orrs	r4, r2
    24bc:	d0ef      	beq.n	249e <__aeabi_d2f+0x5a>
    24be:	2080      	movs	r0, #128	; 0x80
    24c0:	00d2      	lsls	r2, r2, #3
    24c2:	0480      	lsls	r0, r0, #18
    24c4:	4302      	orrs	r2, r0
    24c6:	23ff      	movs	r3, #255	; 0xff
    24c8:	e7d7      	b.n	247a <__aeabi_d2f+0x36>
    24ca:	4322      	orrs	r2, r4
    24cc:	2300      	movs	r3, #0
    24ce:	2a00      	cmp	r2, #0
    24d0:	d003      	beq.n	24da <__aeabi_d2f+0x96>
    24d2:	2205      	movs	r2, #5
    24d4:	08d2      	lsrs	r2, r2, #3
    24d6:	2bff      	cmp	r3, #255	; 0xff
    24d8:	d003      	beq.n	24e2 <__aeabi_d2f+0x9e>
    24da:	0252      	lsls	r2, r2, #9
    24dc:	0a52      	lsrs	r2, r2, #9
    24de:	b2db      	uxtb	r3, r3
    24e0:	e7df      	b.n	24a2 <__aeabi_d2f+0x5e>
    24e2:	2a00      	cmp	r2, #0
    24e4:	d032      	beq.n	254c <__aeabi_d2f+0x108>
    24e6:	2080      	movs	r0, #128	; 0x80
    24e8:	03c0      	lsls	r0, r0, #15
    24ea:	4302      	orrs	r2, r0
    24ec:	0252      	lsls	r2, r2, #9
    24ee:	0a52      	lsrs	r2, r2, #9
    24f0:	e7d7      	b.n	24a2 <__aeabi_d2f+0x5e>
    24f2:	0018      	movs	r0, r3
    24f4:	3017      	adds	r0, #23
    24f6:	db14      	blt.n	2522 <__aeabi_d2f+0xde>
    24f8:	2080      	movs	r0, #128	; 0x80
    24fa:	0400      	lsls	r0, r0, #16
    24fc:	4302      	orrs	r2, r0
    24fe:	201e      	movs	r0, #30
    2500:	1ac0      	subs	r0, r0, r3
    2502:	281f      	cmp	r0, #31
    2504:	dc0f      	bgt.n	2526 <__aeabi_d2f+0xe2>
    2506:	0025      	movs	r5, r4
    2508:	4b12      	ldr	r3, [pc, #72]	; (2554 <__aeabi_d2f+0x110>)
    250a:	18f3      	adds	r3, r6, r3
    250c:	409d      	lsls	r5, r3
    250e:	1e6e      	subs	r6, r5, #1
    2510:	41b5      	sbcs	r5, r6
    2512:	409a      	lsls	r2, r3
    2514:	002b      	movs	r3, r5
    2516:	4313      	orrs	r3, r2
    2518:	0022      	movs	r2, r4
    251a:	40c2      	lsrs	r2, r0
    251c:	431a      	orrs	r2, r3
    251e:	2300      	movs	r3, #0
    2520:	e7ab      	b.n	247a <__aeabi_d2f+0x36>
    2522:	2300      	movs	r3, #0
    2524:	e7d5      	b.n	24d2 <__aeabi_d2f+0x8e>
    2526:	2502      	movs	r5, #2
    2528:	426d      	negs	r5, r5
    252a:	1aeb      	subs	r3, r5, r3
    252c:	0015      	movs	r5, r2
    252e:	40dd      	lsrs	r5, r3
    2530:	2820      	cmp	r0, #32
    2532:	d009      	beq.n	2548 <__aeabi_d2f+0x104>
    2534:	4b08      	ldr	r3, [pc, #32]	; (2558 <__aeabi_d2f+0x114>)
    2536:	18f3      	adds	r3, r6, r3
    2538:	409a      	lsls	r2, r3
    253a:	4314      	orrs	r4, r2
    253c:	1e62      	subs	r2, r4, #1
    253e:	4194      	sbcs	r4, r2
    2540:	0022      	movs	r2, r4
    2542:	2300      	movs	r3, #0
    2544:	432a      	orrs	r2, r5
    2546:	e798      	b.n	247a <__aeabi_d2f+0x36>
    2548:	2200      	movs	r2, #0
    254a:	e7f6      	b.n	253a <__aeabi_d2f+0xf6>
    254c:	2200      	movs	r2, #0
    254e:	e7a8      	b.n	24a2 <__aeabi_d2f+0x5e>
    2550:	fffffc80 	.word	0xfffffc80
    2554:	fffffc82 	.word	0xfffffc82
    2558:	fffffca2 	.word	0xfffffca2

0000255c <__clzsi2>:
    255c:	211c      	movs	r1, #28
    255e:	2301      	movs	r3, #1
    2560:	041b      	lsls	r3, r3, #16
    2562:	4298      	cmp	r0, r3
    2564:	d301      	bcc.n	256a <__clzsi2+0xe>
    2566:	0c00      	lsrs	r0, r0, #16
    2568:	3910      	subs	r1, #16
    256a:	0a1b      	lsrs	r3, r3, #8
    256c:	4298      	cmp	r0, r3
    256e:	d301      	bcc.n	2574 <__clzsi2+0x18>
    2570:	0a00      	lsrs	r0, r0, #8
    2572:	3908      	subs	r1, #8
    2574:	091b      	lsrs	r3, r3, #4
    2576:	4298      	cmp	r0, r3
    2578:	d301      	bcc.n	257e <__clzsi2+0x22>
    257a:	0900      	lsrs	r0, r0, #4
    257c:	3904      	subs	r1, #4
    257e:	a202      	add	r2, pc, #8	; (adr r2, 2588 <__clzsi2+0x2c>)
    2580:	5c10      	ldrb	r0, [r2, r0]
    2582:	1840      	adds	r0, r0, r1
    2584:	4770      	bx	lr
    2586:	46c0      	nop			; (mov r8, r8)
    2588:	02020304 	.word	0x02020304
    258c:	01010101 	.word	0x01010101
	...

00002598 <__libc_init_array>:
    2598:	b570      	push	{r4, r5, r6, lr}
    259a:	4e0d      	ldr	r6, [pc, #52]	; (25d0 <__libc_init_array+0x38>)
    259c:	4d0d      	ldr	r5, [pc, #52]	; (25d4 <__libc_init_array+0x3c>)
    259e:	2400      	movs	r4, #0
    25a0:	1bad      	subs	r5, r5, r6
    25a2:	10ad      	asrs	r5, r5, #2
    25a4:	d005      	beq.n	25b2 <__libc_init_array+0x1a>
    25a6:	00a3      	lsls	r3, r4, #2
    25a8:	58f3      	ldr	r3, [r6, r3]
    25aa:	3401      	adds	r4, #1
    25ac:	4798      	blx	r3
    25ae:	42a5      	cmp	r5, r4
    25b0:	d1f9      	bne.n	25a6 <__libc_init_array+0xe>
    25b2:	f000 f9cd 	bl	2950 <_init>
    25b6:	4e08      	ldr	r6, [pc, #32]	; (25d8 <__libc_init_array+0x40>)
    25b8:	4d08      	ldr	r5, [pc, #32]	; (25dc <__libc_init_array+0x44>)
    25ba:	2400      	movs	r4, #0
    25bc:	1bad      	subs	r5, r5, r6
    25be:	10ad      	asrs	r5, r5, #2
    25c0:	d005      	beq.n	25ce <__libc_init_array+0x36>
    25c2:	00a3      	lsls	r3, r4, #2
    25c4:	58f3      	ldr	r3, [r6, r3]
    25c6:	3401      	adds	r4, #1
    25c8:	4798      	blx	r3
    25ca:	42a5      	cmp	r5, r4
    25cc:	d1f9      	bne.n	25c2 <__libc_init_array+0x2a>
    25ce:	bd70      	pop	{r4, r5, r6, pc}
    25d0:	0000295c 	.word	0x0000295c
    25d4:	0000295c 	.word	0x0000295c
    25d8:	0000295c 	.word	0x0000295c
    25dc:	00002964 	.word	0x00002964

000025e0 <memset>:
    25e0:	b570      	push	{r4, r5, r6, lr}
    25e2:	0783      	lsls	r3, r0, #30
    25e4:	d03f      	beq.n	2666 <memset+0x86>
    25e6:	1e54      	subs	r4, r2, #1
    25e8:	2a00      	cmp	r2, #0
    25ea:	d03b      	beq.n	2664 <memset+0x84>
    25ec:	b2ce      	uxtb	r6, r1
    25ee:	0003      	movs	r3, r0
    25f0:	2503      	movs	r5, #3
    25f2:	e003      	b.n	25fc <memset+0x1c>
    25f4:	1e62      	subs	r2, r4, #1
    25f6:	2c00      	cmp	r4, #0
    25f8:	d034      	beq.n	2664 <memset+0x84>
    25fa:	0014      	movs	r4, r2
    25fc:	3301      	adds	r3, #1
    25fe:	1e5a      	subs	r2, r3, #1
    2600:	7016      	strb	r6, [r2, #0]
    2602:	422b      	tst	r3, r5
    2604:	d1f6      	bne.n	25f4 <memset+0x14>
    2606:	2c03      	cmp	r4, #3
    2608:	d924      	bls.n	2654 <memset+0x74>
    260a:	25ff      	movs	r5, #255	; 0xff
    260c:	400d      	ands	r5, r1
    260e:	022a      	lsls	r2, r5, #8
    2610:	4315      	orrs	r5, r2
    2612:	042a      	lsls	r2, r5, #16
    2614:	4315      	orrs	r5, r2
    2616:	2c0f      	cmp	r4, #15
    2618:	d911      	bls.n	263e <memset+0x5e>
    261a:	0026      	movs	r6, r4
    261c:	3e10      	subs	r6, #16
    261e:	0936      	lsrs	r6, r6, #4
    2620:	3601      	adds	r6, #1
    2622:	0136      	lsls	r6, r6, #4
    2624:	001a      	movs	r2, r3
    2626:	199b      	adds	r3, r3, r6
    2628:	6015      	str	r5, [r2, #0]
    262a:	6055      	str	r5, [r2, #4]
    262c:	6095      	str	r5, [r2, #8]
    262e:	60d5      	str	r5, [r2, #12]
    2630:	3210      	adds	r2, #16
    2632:	4293      	cmp	r3, r2
    2634:	d1f8      	bne.n	2628 <memset+0x48>
    2636:	220f      	movs	r2, #15
    2638:	4014      	ands	r4, r2
    263a:	2c03      	cmp	r4, #3
    263c:	d90a      	bls.n	2654 <memset+0x74>
    263e:	1f26      	subs	r6, r4, #4
    2640:	08b6      	lsrs	r6, r6, #2
    2642:	3601      	adds	r6, #1
    2644:	00b6      	lsls	r6, r6, #2
    2646:	001a      	movs	r2, r3
    2648:	199b      	adds	r3, r3, r6
    264a:	c220      	stmia	r2!, {r5}
    264c:	4293      	cmp	r3, r2
    264e:	d1fc      	bne.n	264a <memset+0x6a>
    2650:	2203      	movs	r2, #3
    2652:	4014      	ands	r4, r2
    2654:	2c00      	cmp	r4, #0
    2656:	d005      	beq.n	2664 <memset+0x84>
    2658:	b2c9      	uxtb	r1, r1
    265a:	191c      	adds	r4, r3, r4
    265c:	7019      	strb	r1, [r3, #0]
    265e:	3301      	adds	r3, #1
    2660:	429c      	cmp	r4, r3
    2662:	d1fb      	bne.n	265c <memset+0x7c>
    2664:	bd70      	pop	{r4, r5, r6, pc}
    2666:	0014      	movs	r4, r2
    2668:	0003      	movs	r3, r0
    266a:	e7cc      	b.n	2606 <memset+0x26>

0000266c <register_fini>:
    266c:	4b03      	ldr	r3, [pc, #12]	; (267c <register_fini+0x10>)
    266e:	b510      	push	{r4, lr}
    2670:	2b00      	cmp	r3, #0
    2672:	d002      	beq.n	267a <register_fini+0xe>
    2674:	4802      	ldr	r0, [pc, #8]	; (2680 <register_fini+0x14>)
    2676:	f000 f805 	bl	2684 <atexit>
    267a:	bd10      	pop	{r4, pc}
    267c:	00000000 	.word	0x00000000
    2680:	00002695 	.word	0x00002695

00002684 <atexit>:
    2684:	b510      	push	{r4, lr}
    2686:	0001      	movs	r1, r0
    2688:	2300      	movs	r3, #0
    268a:	2200      	movs	r2, #0
    268c:	2000      	movs	r0, #0
    268e:	f000 f81b 	bl	26c8 <__register_exitproc>
    2692:	bd10      	pop	{r4, pc}

00002694 <__libc_fini_array>:
    2694:	b570      	push	{r4, r5, r6, lr}
    2696:	4b09      	ldr	r3, [pc, #36]	; (26bc <__libc_fini_array+0x28>)
    2698:	4c09      	ldr	r4, [pc, #36]	; (26c0 <__libc_fini_array+0x2c>)
    269a:	1ae4      	subs	r4, r4, r3
    269c:	10a4      	asrs	r4, r4, #2
    269e:	d009      	beq.n	26b4 <__libc_fini_array+0x20>
    26a0:	4a08      	ldr	r2, [pc, #32]	; (26c4 <__libc_fini_array+0x30>)
    26a2:	18a5      	adds	r5, r4, r2
    26a4:	00ad      	lsls	r5, r5, #2
    26a6:	18ed      	adds	r5, r5, r3
    26a8:	682b      	ldr	r3, [r5, #0]
    26aa:	3c01      	subs	r4, #1
    26ac:	4798      	blx	r3
    26ae:	3d04      	subs	r5, #4
    26b0:	2c00      	cmp	r4, #0
    26b2:	d1f9      	bne.n	26a8 <__libc_fini_array+0x14>
    26b4:	f000 f956 	bl	2964 <_fini>
    26b8:	bd70      	pop	{r4, r5, r6, pc}
    26ba:	46c0      	nop			; (mov r8, r8)
    26bc:	00002970 	.word	0x00002970
    26c0:	00002974 	.word	0x00002974
    26c4:	3fffffff 	.word	0x3fffffff

000026c8 <__register_exitproc>:
    26c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    26ca:	4644      	mov	r4, r8
    26cc:	465f      	mov	r7, fp
    26ce:	4656      	mov	r6, sl
    26d0:	464d      	mov	r5, r9
    26d2:	469b      	mov	fp, r3
    26d4:	4b2f      	ldr	r3, [pc, #188]	; (2794 <__register_exitproc+0xcc>)
    26d6:	b4f0      	push	{r4, r5, r6, r7}
    26d8:	681c      	ldr	r4, [r3, #0]
    26da:	23a4      	movs	r3, #164	; 0xa4
    26dc:	005b      	lsls	r3, r3, #1
    26de:	0005      	movs	r5, r0
    26e0:	58e0      	ldr	r0, [r4, r3]
    26e2:	000e      	movs	r6, r1
    26e4:	4690      	mov	r8, r2
    26e6:	2800      	cmp	r0, #0
    26e8:	d04b      	beq.n	2782 <__register_exitproc+0xba>
    26ea:	6843      	ldr	r3, [r0, #4]
    26ec:	2b1f      	cmp	r3, #31
    26ee:	dc0d      	bgt.n	270c <__register_exitproc+0x44>
    26f0:	1c5c      	adds	r4, r3, #1
    26f2:	2d00      	cmp	r5, #0
    26f4:	d121      	bne.n	273a <__register_exitproc+0x72>
    26f6:	3302      	adds	r3, #2
    26f8:	009b      	lsls	r3, r3, #2
    26fa:	6044      	str	r4, [r0, #4]
    26fc:	501e      	str	r6, [r3, r0]
    26fe:	2000      	movs	r0, #0
    2700:	bc3c      	pop	{r2, r3, r4, r5}
    2702:	4690      	mov	r8, r2
    2704:	4699      	mov	r9, r3
    2706:	46a2      	mov	sl, r4
    2708:	46ab      	mov	fp, r5
    270a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    270c:	4b22      	ldr	r3, [pc, #136]	; (2798 <__register_exitproc+0xd0>)
    270e:	2b00      	cmp	r3, #0
    2710:	d03c      	beq.n	278c <__register_exitproc+0xc4>
    2712:	20c8      	movs	r0, #200	; 0xc8
    2714:	0040      	lsls	r0, r0, #1
    2716:	e000      	b.n	271a <__register_exitproc+0x52>
    2718:	bf00      	nop
    271a:	2800      	cmp	r0, #0
    271c:	d036      	beq.n	278c <__register_exitproc+0xc4>
    271e:	22a4      	movs	r2, #164	; 0xa4
    2720:	2300      	movs	r3, #0
    2722:	0052      	lsls	r2, r2, #1
    2724:	58a1      	ldr	r1, [r4, r2]
    2726:	6043      	str	r3, [r0, #4]
    2728:	6001      	str	r1, [r0, #0]
    272a:	50a0      	str	r0, [r4, r2]
    272c:	3240      	adds	r2, #64	; 0x40
    272e:	5083      	str	r3, [r0, r2]
    2730:	3204      	adds	r2, #4
    2732:	5083      	str	r3, [r0, r2]
    2734:	2401      	movs	r4, #1
    2736:	2d00      	cmp	r5, #0
    2738:	d0dd      	beq.n	26f6 <__register_exitproc+0x2e>
    273a:	009a      	lsls	r2, r3, #2
    273c:	4691      	mov	r9, r2
    273e:	4481      	add	r9, r0
    2740:	4642      	mov	r2, r8
    2742:	2188      	movs	r1, #136	; 0x88
    2744:	464f      	mov	r7, r9
    2746:	507a      	str	r2, [r7, r1]
    2748:	22c4      	movs	r2, #196	; 0xc4
    274a:	0052      	lsls	r2, r2, #1
    274c:	4690      	mov	r8, r2
    274e:	4480      	add	r8, r0
    2750:	4642      	mov	r2, r8
    2752:	3987      	subs	r1, #135	; 0x87
    2754:	4099      	lsls	r1, r3
    2756:	6812      	ldr	r2, [r2, #0]
    2758:	468a      	mov	sl, r1
    275a:	430a      	orrs	r2, r1
    275c:	4694      	mov	ip, r2
    275e:	4642      	mov	r2, r8
    2760:	4661      	mov	r1, ip
    2762:	6011      	str	r1, [r2, #0]
    2764:	2284      	movs	r2, #132	; 0x84
    2766:	4649      	mov	r1, r9
    2768:	465f      	mov	r7, fp
    276a:	0052      	lsls	r2, r2, #1
    276c:	508f      	str	r7, [r1, r2]
    276e:	2d02      	cmp	r5, #2
    2770:	d1c1      	bne.n	26f6 <__register_exitproc+0x2e>
    2772:	0002      	movs	r2, r0
    2774:	4655      	mov	r5, sl
    2776:	328d      	adds	r2, #141	; 0x8d
    2778:	32ff      	adds	r2, #255	; 0xff
    277a:	6811      	ldr	r1, [r2, #0]
    277c:	430d      	orrs	r5, r1
    277e:	6015      	str	r5, [r2, #0]
    2780:	e7b9      	b.n	26f6 <__register_exitproc+0x2e>
    2782:	0020      	movs	r0, r4
    2784:	304d      	adds	r0, #77	; 0x4d
    2786:	30ff      	adds	r0, #255	; 0xff
    2788:	50e0      	str	r0, [r4, r3]
    278a:	e7ae      	b.n	26ea <__register_exitproc+0x22>
    278c:	2001      	movs	r0, #1
    278e:	4240      	negs	r0, r0
    2790:	e7b6      	b.n	2700 <__register_exitproc+0x38>
    2792:	46c0      	nop			; (mov r8, r8)
    2794:	0000294c 	.word	0x0000294c
    2798:	00000000 	.word	0x00000000

0000279c <spi2MOSI>:
    279c:	0c000002 00000200                                .....

000027a1 <spi2SCK>:
    27a1:	0e000002 00000200                                .....

000027a6 <spi2MISO>:
    27a6:	0d000002 8d200000                                ......

000027ac <lookupTable.12440>:
    27ac:	ffff8d20 ffffada1 ffffce64 ffffef6c      .......d...l...
    27bc:	000010b7 0000324a 00005425 00007649     ....J2..%T..Iv..
    27cc:	000098b7 0000bb72 0000de79 000101d0     ....r...y.......
    27dc:	00012576 0001496f 00016dbc 0001925e     v%..oI...m..^...
    27ec:	0001b758 0001dcaa 00020258 00022862     X.......X...b(..
    27fc:	00024ecc 00027596 00029cc4 0002c457     .N...u......W...
    280c:	0002ec52 000314b7 00033d89 000366ca     R........=...f..
    281c:	0003907d 0003baa4 0003e544 0004105e     }.......D...^...
    282c:	00043bf6 0004680e 000494ac 0004c1d1     .;...h..........
    283c:	0004ef81 00051dc1 00054c95 00057c00     .........L...|..
    284c:	0005ac07 0005dcae 00060dfb 00063ff2     .............?..
    285c:	00067298 0006a5f4 0006da09 00070ee0     .r..............
    286c:	0007447d 00077ae8 0007b228 0007ea44     }D...z..(...D...
    287c:	00082344 00085d30 00089810 0008d3ef     D#..0]..........
    288c:	000910d6 00094ecf 00098de5 0009ce23     .....N......#...
    289c:	000a0f98 000a524f 000a9657 000adbbf     ....OR..W.......
    28ac:	000b2298 000b6af3 000bb4e2 000c007b     ."...j......{...
    28bc:	000c4dd4 000c9d03 000cee23 000d4150     .M......#...PA..
    28cc:	000d96a9 000dee4e 000e4865 000ea516     ....N...eH......
    28dc:	000f048e                                ....

000028e0 <senseBatPin>:
    28e0:	06000000 01000106                                .....

000028e5 <senseAPin>:
    28e5:	03010001 0100010b                                .....

000028ea <senseBPin>:
    28ea:	02010001 0000000a                                .....

000028ef <senseCPin>:
    28ef:	03000000 00000001                                .....

000028f4 <senseDPin>:
    28f4:	02000000 00000000                                .....

000028f9 <analogAccelPin>:
    28f9:	07000000 00000207                                .....

000028fe <spi2MOSI>:
    28fe:	0c000002 00000200                                .....

00002903 <spi2SCK>:
    2903:	0e000002 001fa400 001e6400 001e6400     .........d...d..
    2913:	001e6200 001f7c00 001f7c00 001f6e00     .b...|...|...n..
    2923:	001e6200 001f7c00 001f6e00 001f7c00     .b...|...n...|..
    2933:	001e6200 001f8400 001f8400 001f8400     .b..............
    2943:	00218400 00004300 00001000                       ..!..C...

0000294c <_global_impure_ptr>:
    294c:	20000010                                ... 

00002950 <_init>:
    2950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2952:	46c0      	nop			; (mov r8, r8)
    2954:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2956:	bc08      	pop	{r3}
    2958:	469e      	mov	lr, r3
    295a:	4770      	bx	lr

0000295c <__init_array_start>:
    295c:	0000266d 	.word	0x0000266d

00002960 <__frame_dummy_init_array_entry>:
    2960:	000000dd                                ....

00002964 <_fini>:
    2964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2966:	46c0      	nop			; (mov r8, r8)
    2968:	bcf8      	pop	{r3, r4, r5, r6, r7}
    296a:	bc08      	pop	{r3}
    296c:	469e      	mov	lr, r3
    296e:	4770      	bx	lr

00002970 <__fini_array_start>:
    2970:	000000b5 	.word	0x000000b5
