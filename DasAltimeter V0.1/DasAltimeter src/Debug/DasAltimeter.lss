
DasAltimeter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002bf8  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000438  20000000  00002bf8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000001b0  20000440  00003040  00020440  2**4
                  ALLOC
  3 .stack        00002000  200005f0  000031f0  00020440  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020438  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020460  2**0
                  CONTENTS, READONLY
  6 .debug_info   00015f8f  00000000  00000000  000204b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000018c9  00000000  00000000  00036448  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00001802  00000000  00000000  00037d11  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000002a0  00000000  00000000  00039513  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000002f8  00000000  00000000  000397b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000141a7  00000000  00000000  00039aab  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00005e26  00000000  00000000  0004dc52  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00071f87  00000000  00000000  00053a78  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  0000097c  00000000  00000000  000c5a00  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	200025f0 	.word	0x200025f0
       4:	00000119 	.word	0x00000119
       8:	00000115 	.word	0x00000115
       c:	00000115 	.word	0x00000115
	...
      2c:	00000115 	.word	0x00000115
	...
      38:	00000115 	.word	0x00000115
      3c:	00000115 	.word	0x00000115
      40:	00000115 	.word	0x00000115
      44:	00000115 	.word	0x00000115
      48:	00000115 	.word	0x00000115
      4c:	00000a65 	.word	0x00000a65
      50:	00000115 	.word	0x00000115
      54:	00000115 	.word	0x00000115
      58:	00000115 	.word	0x00000115
      5c:	00000115 	.word	0x00000115
      60:	00000115 	.word	0x00000115
      64:	00000115 	.word	0x00000115
      68:	00000115 	.word	0x00000115
      6c:	00000115 	.word	0x00000115
      70:	00000115 	.word	0x00000115
      74:	00000115 	.word	0x00000115
      78:	00000115 	.word	0x00000115
      7c:	00000115 	.word	0x00000115
      80:	00000115 	.word	0x00000115
      84:	00000115 	.word	0x00000115
      88:	00000115 	.word	0x00000115
      8c:	00000b0d 	.word	0x00000b0d
      90:	00000b25 	.word	0x00000b25
	...
      9c:	00000115 	.word	0x00000115
      a0:	00000115 	.word	0x00000115
      a4:	00000115 	.word	0x00000115
      a8:	00000115 	.word	0x00000115
      ac:	00000115 	.word	0x00000115
      b0:	00000000 	.word	0x00000000

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000440 	.word	0x20000440
      d4:	00000000 	.word	0x00000000
      d8:	00002bf8 	.word	0x00002bf8

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000444 	.word	0x20000444
     108:	00002bf8 	.word	0x00002bf8
     10c:	00002bf8 	.word	0x00002bf8
     110:	00000000 	.word	0x00000000

00000114 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     114:	e7fe      	b.n	114 <Dummy_Handler>
     116:	46c0      	nop			; (mov r8, r8)

00000118 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
     118:	b570      	push	{r4, r5, r6, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
     11a:	4b2e      	ldr	r3, [pc, #184]	; (1d4 <Reset_Handler+0xbc>)
     11c:	4a2e      	ldr	r2, [pc, #184]	; (1d8 <Reset_Handler+0xc0>)
     11e:	429a      	cmp	r2, r3
     120:	d003      	beq.n	12a <Reset_Handler+0x12>
                for (; pDest < &_erelocate;) {
     122:	4b2e      	ldr	r3, [pc, #184]	; (1dc <Reset_Handler+0xc4>)
     124:	4a2b      	ldr	r2, [pc, #172]	; (1d4 <Reset_Handler+0xbc>)
     126:	429a      	cmp	r2, r3
     128:	d304      	bcc.n	134 <Reset_Handler+0x1c>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     12a:	4b2d      	ldr	r3, [pc, #180]	; (1e0 <Reset_Handler+0xc8>)
     12c:	4a2d      	ldr	r2, [pc, #180]	; (1e4 <Reset_Handler+0xcc>)
     12e:	429a      	cmp	r2, r3
     130:	d310      	bcc.n	154 <Reset_Handler+0x3c>
     132:	e01e      	b.n	172 <Reset_Handler+0x5a>
     134:	4a2c      	ldr	r2, [pc, #176]	; (1e8 <Reset_Handler+0xd0>)
     136:	4b29      	ldr	r3, [pc, #164]	; (1dc <Reset_Handler+0xc4>)
     138:	3303      	adds	r3, #3
     13a:	1a9b      	subs	r3, r3, r2
     13c:	089b      	lsrs	r3, r3, #2
     13e:	3301      	adds	r3, #1
     140:	009b      	lsls	r3, r3, #2
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
     142:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
     144:	4823      	ldr	r0, [pc, #140]	; (1d4 <Reset_Handler+0xbc>)
     146:	4924      	ldr	r1, [pc, #144]	; (1d8 <Reset_Handler+0xc0>)
     148:	588c      	ldr	r4, [r1, r2]
     14a:	5084      	str	r4, [r0, r2]
     14c:	3204      	adds	r2, #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
     14e:	429a      	cmp	r2, r3
     150:	d1fa      	bne.n	148 <Reset_Handler+0x30>
     152:	e7ea      	b.n	12a <Reset_Handler+0x12>
     154:	4a25      	ldr	r2, [pc, #148]	; (1ec <Reset_Handler+0xd4>)
     156:	4b22      	ldr	r3, [pc, #136]	; (1e0 <Reset_Handler+0xc8>)
     158:	3303      	adds	r3, #3
     15a:	1a9b      	subs	r3, r3, r2
     15c:	089b      	lsrs	r3, r3, #2
     15e:	3301      	adds	r3, #1
     160:	009b      	lsls	r3, r3, #2
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     162:	2200      	movs	r2, #0
                *pDest++ = 0;
     164:	481f      	ldr	r0, [pc, #124]	; (1e4 <Reset_Handler+0xcc>)
     166:	2100      	movs	r1, #0
     168:	1814      	adds	r4, r2, r0
     16a:	6021      	str	r1, [r4, #0]
     16c:	3204      	adds	r2, #4
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     16e:	429a      	cmp	r2, r3
     170:	d1fa      	bne.n	168 <Reset_Handler+0x50>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     172:	4a1f      	ldr	r2, [pc, #124]	; (1f0 <Reset_Handler+0xd8>)
     174:	21ff      	movs	r1, #255	; 0xff
     176:	4b1f      	ldr	r3, [pc, #124]	; (1f4 <Reset_Handler+0xdc>)
     178:	438b      	bics	r3, r1
     17a:	6093      	str	r3, [r2, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     17c:	39fd      	subs	r1, #253	; 0xfd
     17e:	2390      	movs	r3, #144	; 0x90
     180:	005b      	lsls	r3, r3, #1
     182:	4a1d      	ldr	r2, [pc, #116]	; (1f8 <Reset_Handler+0xe0>)
     184:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     186:	481d      	ldr	r0, [pc, #116]	; (1fc <Reset_Handler+0xe4>)
     188:	78c3      	ldrb	r3, [r0, #3]
     18a:	2403      	movs	r4, #3
     18c:	43a3      	bics	r3, r4
     18e:	2202      	movs	r2, #2
     190:	4313      	orrs	r3, r2
     192:	70c3      	strb	r3, [r0, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     194:	78c3      	ldrb	r3, [r0, #3]
     196:	260c      	movs	r6, #12
     198:	43b3      	bics	r3, r6
     19a:	2108      	movs	r1, #8
     19c:	430b      	orrs	r3, r1
     19e:	70c3      	strb	r3, [r0, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
     1a0:	4b17      	ldr	r3, [pc, #92]	; (200 <Reset_Handler+0xe8>)
     1a2:	7b98      	ldrb	r0, [r3, #14]
     1a4:	2530      	movs	r5, #48	; 0x30
     1a6:	43a8      	bics	r0, r5
     1a8:	0005      	movs	r5, r0
     1aa:	2020      	movs	r0, #32
     1ac:	4328      	orrs	r0, r5
     1ae:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     1b0:	7b98      	ldrb	r0, [r3, #14]
     1b2:	43b0      	bics	r0, r6
     1b4:	4301      	orrs	r1, r0
     1b6:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     1b8:	7b99      	ldrb	r1, [r3, #14]
     1ba:	43a1      	bics	r1, r4
     1bc:	430a      	orrs	r2, r1
     1be:	739a      	strb	r2, [r3, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
     1c0:	4a10      	ldr	r2, [pc, #64]	; (204 <Reset_Handler+0xec>)
     1c2:	6851      	ldr	r1, [r2, #4]
     1c4:	2380      	movs	r3, #128	; 0x80
     1c6:	430b      	orrs	r3, r1
     1c8:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
     1ca:	4b0f      	ldr	r3, [pc, #60]	; (208 <Reset_Handler+0xf0>)
     1cc:	4798      	blx	r3

        /* Branch to main function */
        main();
     1ce:	4b0f      	ldr	r3, [pc, #60]	; (20c <Reset_Handler+0xf4>)
     1d0:	4798      	blx	r3
     1d2:	e7fe      	b.n	1d2 <Reset_Handler+0xba>
     1d4:	20000000 	.word	0x20000000
     1d8:	00002bf8 	.word	0x00002bf8
     1dc:	20000438 	.word	0x20000438
     1e0:	200005f0 	.word	0x200005f0
     1e4:	20000440 	.word	0x20000440
     1e8:	20000004 	.word	0x20000004
     1ec:	20000444 	.word	0x20000444
     1f0:	e000ed00 	.word	0xe000ed00
     1f4:	00000000 	.word	0x00000000
     1f8:	41007000 	.word	0x41007000
     1fc:	41005000 	.word	0x41005000
     200:	41004800 	.word	0x41004800
     204:	41004000 	.word	0x41004000
     208:	0000273d 	.word	0x0000273d
     20c:	000004a1 	.word	0x000004a1

00000210 <SystemInit>:
 *         Initialize the System and update the SystemCoreClock variable.
 */
void SystemInit(void)
{
	// Keep the default device state after reset
	SystemCoreClock = __SYSTEM_CLOCK;
     210:	4a01      	ldr	r2, [pc, #4]	; (218 <SystemInit+0x8>)
     212:	4b02      	ldr	r3, [pc, #8]	; (21c <SystemInit+0xc>)
     214:	601a      	str	r2, [r3, #0]
	return;
}
     216:	4770      	bx	lr
     218:	000f4240 	.word	0x000f4240
     21c:	20000000 	.word	0x20000000

00000220 <init>:
#include "math.h"




void init() {
     220:	b5f0      	push	{r4, r5, r6, r7, lr}
     222:	465f      	mov	r7, fp
     224:	4656      	mov	r6, sl
     226:	464d      	mov	r5, r9
     228:	4644      	mov	r4, r8
     22a:	b4f0      	push	{r4, r5, r6, r7}
     22c:	b083      	sub	sp, #12
    SystemInit();
     22e:	4b90      	ldr	r3, [pc, #576]	; (470 <init+0x250>)
     230:	4798      	blx	r3
    GclkInit();
     232:	4b90      	ldr	r3, [pc, #576]	; (474 <init+0x254>)
     234:	4798      	blx	r3
    RtcInit();
     236:	4b90      	ldr	r3, [pc, #576]	; (478 <init+0x258>)
     238:	4798      	blx	r3
    delayInit();
     23a:	4b90      	ldr	r3, [pc, #576]	; (47c <init+0x25c>)
     23c:	4798      	blx	r3
    adcInit();
     23e:	4b90      	ldr	r3, [pc, #576]	; (480 <init+0x260>)
     240:	4798      	blx	r3
    dmaInit();
     242:	4b90      	ldr	r3, [pc, #576]	; (484 <init+0x264>)
     244:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     246:	4b90      	ldr	r3, [pc, #576]	; (488 <init+0x268>)
     248:	2240      	movs	r2, #64	; 0x40
     24a:	601a      	str	r2, [r3, #0]
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     24c:	21c1      	movs	r1, #193	; 0xc1
     24e:	0089      	lsls	r1, r1, #2
     250:	5858      	ldr	r0, [r3, r1]
     252:	4a8e      	ldr	r2, [pc, #568]	; (48c <init+0x26c>)
     254:	4002      	ands	r2, r0
     256:	505a      	str	r2, [r3, r1]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     258:	4b8d      	ldr	r3, [pc, #564]	; (490 <init+0x270>)
     25a:	2054      	movs	r0, #84	; 0x54
     25c:	5c19      	ldrb	r1, [r3, r0]
     25e:	2201      	movs	r2, #1
     260:	4391      	bics	r1, r2
     262:	5419      	strb	r1, [r3, r0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     264:	2180      	movs	r1, #128	; 0x80
     266:	0349      	lsls	r1, r1, #13
     268:	6099      	str	r1, [r3, #8]

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     26a:	2433      	movs	r4, #51	; 0x33
     26c:	5d18      	ldrb	r0, [r3, r4]
     26e:	210f      	movs	r1, #15
     270:	4388      	bics	r0, r1
     272:	2101      	movs	r1, #1
     274:	4308      	orrs	r0, r1
     276:	5518      	strb	r0, [r3, r4]
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     278:	3413      	adds	r4, #19
     27a:	5d18      	ldrb	r0, [r3, r4]
     27c:	4308      	orrs	r0, r1
     27e:	5518      	strb	r0, [r3, r4]

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     280:	20b1      	movs	r0, #177	; 0xb1
     282:	5c1f      	ldrb	r7, [r3, r0]
     284:	260f      	movs	r6, #15
     286:	4037      	ands	r7, r6
     288:	2410      	movs	r4, #16
     28a:	4327      	orrs	r7, r4
     28c:	541f      	strb	r7, [r3, r0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     28e:	27c3      	movs	r7, #195	; 0xc3
     290:	46bc      	mov	ip, r7
     292:	5ddf      	ldrb	r7, [r3, r7]
     294:	430f      	orrs	r7, r1
     296:	4665      	mov	r5, ip
     298:	555f      	strb	r7, [r3, r5]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     29a:	5c1f      	ldrb	r7, [r3, r0]
     29c:	4037      	ands	r7, r6
     29e:	4327      	orrs	r7, r4
     2a0:	541f      	strb	r7, [r3, r0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     2a2:	5d5f      	ldrb	r7, [r3, r5]
     2a4:	430f      	orrs	r7, r1
     2a6:	555f      	strb	r7, [r3, r5]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     2a8:	3514      	adds	r5, #20
     2aa:	5d5f      	ldrb	r7, [r3, r5]
     2ac:	4397      	bics	r7, r2
     2ae:	555f      	strb	r7, [r3, r5]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     2b0:	3d4f      	subs	r5, #79	; 0x4f
     2b2:	46aa      	mov	sl, r5
     2b4:	2780      	movs	r7, #128	; 0x80
     2b6:	043f      	lsls	r7, r7, #16
     2b8:	515f      	str	r7, [r3, r5]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     2ba:	350c      	adds	r5, #12
     2bc:	46ac      	mov	ip, r5
     2be:	515f      	str	r7, [r3, r5]

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     2c0:	5c1f      	ldrb	r7, [r3, r0]
     2c2:	3d85      	subs	r5, #133	; 0x85
     2c4:	43af      	bics	r7, r5
     2c6:	430f      	orrs	r7, r1
     2c8:	541f      	strb	r7, [r3, r0]
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     2ca:	35b3      	adds	r5, #179	; 0xb3
     2cc:	46a8      	mov	r8, r5
     2ce:	5d5f      	ldrb	r7, [r3, r5]
     2d0:	430f      	orrs	r7, r1
     2d2:	555f      	strb	r7, [r3, r5]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     2d4:	5c1f      	ldrb	r7, [r3, r0]
     2d6:	3db3      	subs	r5, #179	; 0xb3
     2d8:	43af      	bics	r7, r5
     2da:	430f      	orrs	r7, r1
     2dc:	541f      	strb	r7, [r3, r0]
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     2de:	4640      	mov	r0, r8
     2e0:	5c18      	ldrb	r0, [r3, r0]
     2e2:	4308      	orrs	r0, r1
     2e4:	4645      	mov	r5, r8
     2e6:	5558      	strb	r0, [r3, r5]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     2e8:	27d6      	movs	r7, #214	; 0xd6
     2ea:	5dd8      	ldrb	r0, [r3, r7]
     2ec:	4390      	bics	r0, r2
     2ee:	55d8      	strb	r0, [r3, r7]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     2f0:	2080      	movs	r0, #128	; 0x80
     2f2:	03c0      	lsls	r0, r0, #15
     2f4:	4681      	mov	r9, r0
     2f6:	4650      	mov	r0, sl
     2f8:	464d      	mov	r5, r9
     2fa:	501d      	str	r5, [r3, r0]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     2fc:	4660      	mov	r0, ip
     2fe:	501d      	str	r5, [r3, r0]

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     300:	3fa5      	subs	r7, #165	; 0xa5
     302:	5dd8      	ldrb	r0, [r3, r7]
     304:	4030      	ands	r0, r6
     306:	4304      	orrs	r4, r0
     308:	55dc      	strb	r4, [r3, r7]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     30a:	2443      	movs	r4, #67	; 0x43
     30c:	5d18      	ldrb	r0, [r3, r4]
     30e:	4308      	orrs	r0, r1
     310:	5518      	strb	r0, [r3, r4]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     312:	3416      	adds	r4, #22
     314:	5d18      	ldrb	r0, [r3, r4]
     316:	4390      	bics	r0, r2
     318:	5518      	strb	r0, [r3, r4]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     31a:	2080      	movs	r0, #128	; 0x80
     31c:	0480      	lsls	r0, r0, #18
     31e:	6098      	str	r0, [r3, #8]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     320:	6158      	str	r0, [r3, #20]

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     322:	5dd8      	ldrb	r0, [r3, r7]
     324:	3c4a      	subs	r4, #74	; 0x4a
     326:	43a0      	bics	r0, r4
     328:	4308      	orrs	r0, r1
     32a:	55d8      	strb	r0, [r3, r7]
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     32c:	3433      	adds	r4, #51	; 0x33
     32e:	5d18      	ldrb	r0, [r3, r4]
     330:	4308      	orrs	r0, r1
     332:	5518      	strb	r0, [r3, r4]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     334:	3416      	adds	r4, #22
     336:	5d18      	ldrb	r0, [r3, r4]
     338:	4390      	bics	r0, r2
     33a:	5518      	strb	r0, [r3, r4]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     33c:	2080      	movs	r0, #128	; 0x80
     33e:	0440      	lsls	r0, r0, #17
     340:	6098      	str	r0, [r3, #8]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     342:	6158      	str	r0, [r3, #20]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     344:	2048      	movs	r0, #72	; 0x48
     346:	4684      	mov	ip, r0
     348:	5c18      	ldrb	r0, [r3, r0]
     34a:	4390      	bics	r0, r2
     34c:	4664      	mov	r4, ip
     34e:	5518      	strb	r0, [r3, r4]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     350:	2080      	movs	r0, #128	; 0x80
     352:	0040      	lsls	r0, r0, #1
     354:	6098      	str	r0, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     356:	38b7      	subs	r0, #183	; 0xb7
     358:	4680      	mov	r8, r0
     35a:	5c18      	ldrb	r0, [r3, r0]
     35c:	4390      	bics	r0, r2
     35e:	4644      	mov	r4, r8
     360:	5518      	strb	r0, [r3, r4]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     362:	2080      	movs	r0, #128	; 0x80
     364:	0080      	lsls	r0, r0, #2
     366:	6098      	str	r0, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     368:	38b6      	subs	r0, #182	; 0xb6
     36a:	38ff      	subs	r0, #255	; 0xff
     36c:	5c1c      	ldrb	r4, [r3, r0]
     36e:	4394      	bics	r4, r2
     370:	541c      	strb	r4, [r3, r0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     372:	5c1f      	ldrb	r7, [r3, r0]
     374:	2402      	movs	r4, #2
     376:	4327      	orrs	r7, r4
     378:	541f      	strb	r7, [r3, r0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     37a:	2780      	movs	r7, #128	; 0x80
     37c:	013f      	lsls	r7, r7, #4
     37e:	605f      	str	r7, [r3, #4]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     380:	2535      	movs	r5, #53	; 0x35
     382:	46ab      	mov	fp, r5
     384:	5d5f      	ldrb	r7, [r3, r5]
     386:	4037      	ands	r7, r6
     388:	3d15      	subs	r5, #21
     38a:	432f      	orrs	r7, r5
     38c:	465d      	mov	r5, fp
     38e:	555f      	strb	r7, [r3, r5]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     390:	5c1f      	ldrb	r7, [r3, r0]
     392:	430f      	orrs	r7, r1
     394:	541f      	strb	r7, [r3, r0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     396:	3817      	subs	r0, #23
     398:	5c1f      	ldrb	r7, [r3, r0]
     39a:	403e      	ands	r6, r7
     39c:	3d15      	subs	r5, #21
     39e:	432e      	orrs	r6, r5
     3a0:	541e      	strb	r6, [r3, r0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     3a2:	4645      	mov	r5, r8
     3a4:	5d5e      	ldrb	r6, [r3, r5]
     3a6:	430e      	orrs	r6, r1
     3a8:	555e      	strb	r6, [r3, r5]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     3aa:	5c1e      	ldrb	r6, [r3, r0]
     3ac:	3d3a      	subs	r5, #58	; 0x3a
     3ae:	43ae      	bics	r6, r5
     3b0:	0035      	movs	r5, r6
     3b2:	4325      	orrs	r5, r4
     3b4:	541d      	strb	r5, [r3, r0]
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     3b6:	4660      	mov	r0, ip
     3b8:	5c18      	ldrb	r0, [r3, r0]
     3ba:	4301      	orrs	r1, r0
     3bc:	4660      	mov	r0, ip
     3be:	5419      	strb	r1, [r3, r0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     3c0:	3082      	adds	r0, #130	; 0x82
     3c2:	5c19      	ldrb	r1, [r3, r0]
     3c4:	4391      	bics	r1, r2
     3c6:	5419      	strb	r1, [r3, r0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     3c8:	2180      	movs	r1, #128	; 0x80
     3ca:	00c9      	lsls	r1, r1, #3
     3cc:	4650      	mov	r0, sl
     3ce:	5019      	str	r1, [r3, r0]
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     3d0:	3010      	adds	r0, #16
     3d2:	5019      	str	r1, [r3, r0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     3d4:	254a      	movs	r5, #74	; 0x4a
     3d6:	5d58      	ldrb	r0, [r3, r5]
     3d8:	4390      	bics	r0, r2
     3da:	5558      	strb	r0, [r3, r5]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     3dc:	6099      	str	r1, [r3, #8]
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     3de:	6199      	str	r1, [r3, #24]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     3e0:	204c      	movs	r0, #76	; 0x4c
     3e2:	5c19      	ldrb	r1, [r3, r0]
     3e4:	4391      	bics	r1, r2
     3e6:	5419      	strb	r1, [r3, r0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     3e8:	2180      	movs	r1, #128	; 0x80
     3ea:	0149      	lsls	r1, r1, #5
     3ec:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     3ee:	3002      	adds	r0, #2
     3f0:	5c19      	ldrb	r1, [r3, r0]
     3f2:	4391      	bics	r1, r2
     3f4:	5419      	strb	r1, [r3, r0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     3f6:	2180      	movs	r1, #128	; 0x80
     3f8:	01c9      	lsls	r1, r1, #7
     3fa:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     3fc:	214d      	movs	r1, #77	; 0x4d
     3fe:	5c58      	ldrb	r0, [r3, r1]
     400:	4390      	bics	r0, r2
     402:	5458      	strb	r0, [r3, r1]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     404:	5c58      	ldrb	r0, [r3, r1]
     406:	4304      	orrs	r4, r0
     408:	545c      	strb	r4, [r3, r1]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     40a:	2180      	movs	r1, #128	; 0x80
     40c:	0189      	lsls	r1, r1, #6
     40e:	6059      	str	r1, [r3, #4]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     410:	2056      	movs	r0, #86	; 0x56
     412:	5c19      	ldrb	r1, [r3, r0]
     414:	4391      	bics	r1, r2
     416:	5419      	strb	r1, [r3, r0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     418:	4649      	mov	r1, r9
     41a:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     41c:	214f      	movs	r1, #79	; 0x4f
     41e:	5c58      	ldrb	r0, [r3, r1]
     420:	4390      	bics	r0, r2
     422:	5458      	strb	r0, [r3, r1]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     424:	2080      	movs	r0, #128	; 0x80
     426:	0200      	lsls	r0, r0, #8
     428:	6098      	str	r0, [r3, #8]
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     42a:	6198      	str	r0, [r3, #24]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     42c:	5c58      	ldrb	r0, [r3, r1]
     42e:	4390      	bics	r0, r2
     430:	5458      	strb	r0, [r3, r1]
     432:	3106      	adds	r1, #6
     434:	5c58      	ldrb	r0, [r3, r1]
     436:	4390      	bics	r0, r2
     438:	5458      	strb	r0, [r3, r1]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     43a:	2280      	movs	r2, #128	; 0x80
     43c:	0392      	lsls	r2, r2, #14
     43e:	609a      	str	r2, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
}


inline static void pinCfg(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].reg = p.cfg;
     440:	2240      	movs	r2, #64	; 0x40
     442:	545a      	strb	r2, [r3, r1]
    pinCfg(buzzerPin);

//    sercomClockEnable(SPI2, 3, 4);
//   sercomSpiMasterInit(SPI2, 3, 0, 0, 0, 0x00);

    sercomClockEnable(SPI0, 3, 4);
     444:	2204      	movs	r2, #4
     446:	3952      	subs	r1, #82	; 0x52
     448:	2000      	movs	r0, #0
     44a:	4b12      	ldr	r3, [pc, #72]	; (494 <init+0x274>)
     44c:	4798      	blx	r3
    sercomSpiMasterInit(SPI0, 3, 0, 0, 0, 0x00);
     44e:	2300      	movs	r3, #0
     450:	9301      	str	r3, [sp, #4]
     452:	9300      	str	r3, [sp, #0]
     454:	2200      	movs	r2, #0
     456:	2103      	movs	r1, #3
     458:	2000      	movs	r0, #0
     45a:	4c0f      	ldr	r4, [pc, #60]	; (498 <init+0x278>)
     45c:	47a0      	blx	r4

    TC4Init();
     45e:	4b0f      	ldr	r3, [pc, #60]	; (49c <init+0x27c>)
     460:	4798      	blx	r3
//   TC5Init();
}
     462:	b003      	add	sp, #12
     464:	bc3c      	pop	{r2, r3, r4, r5}
     466:	4690      	mov	r8, r2
     468:	4699      	mov	r9, r3
     46a:	46a2      	mov	sl, r4
     46c:	46ab      	mov	fp, r5
     46e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     470:	00000211 	.word	0x00000211
     474:	000008a1 	.word	0x000008a1
     478:	00000931 	.word	0x00000931
     47c:	000009ed 	.word	0x000009ed
     480:	000006f9 	.word	0x000006f9
     484:	00000b3d 	.word	0x00000b3d
     488:	e000e100 	.word	0xe000e100
     48c:	ff00ffff 	.word	0xff00ffff
     490:	41004400 	.word	0x41004400
     494:	000011d1 	.word	0x000011d1
     498:	00001239 	.word	0x00001239
     49c:	00000abd 	.word	0x00000abd

000004a0 <main>:



int main(void) {
     4a0:	b5f0      	push	{r4, r5, r6, r7, lr}
     4a2:	465f      	mov	r7, fp
     4a4:	4656      	mov	r6, sl
     4a6:	464d      	mov	r5, r9
     4a8:	4644      	mov	r4, r8
     4aa:	b4f0      	push	{r4, r5, r6, r7}
     4ac:	b0a7      	sub	sp, #156	; 0x9c

    init();
     4ae:	4b76      	ldr	r3, [pc, #472]	; (688 <main+0x1e8>)
     4b0:	4798      	blx	r3

    Altimeter my_altimeter;

    initMS5803Barometer(&my_altimeter.myBarometer);
     4b2:	a80b      	add	r0, sp, #44	; 0x2c
     4b4:	4b75      	ldr	r3, [pc, #468]	; (68c <main+0x1ec>)
     4b6:	4798      	blx	r3
    IMUinit();
     4b8:	4b75      	ldr	r3, [pc, #468]	; (690 <main+0x1f0>)
     4ba:	4798      	blx	r3
    volatile float averageAccel;
    volatile float averageAlt;
    volatile float baseAltitude;


    delay_ms(300);
     4bc:	2096      	movs	r0, #150	; 0x96
     4be:	0040      	lsls	r0, r0, #1
     4c0:	4b74      	ldr	r3, [pc, #464]	; (694 <main+0x1f4>)
     4c2:	4798      	blx	r3
     4c4:	24c8      	movs	r4, #200	; 0xc8
     4c6:	0064      	lsls	r4, r4, #1

    for (u16_t baseNum = 0; baseNum < 400; ++baseNum) {
        sampleTick(&my_altimeter);
     4c8:	4f73      	ldr	r7, [pc, #460]	; (698 <main+0x1f8>)

        baseAltitude -= baseAltitude / 50;
     4ca:	4e74      	ldr	r6, [pc, #464]	; (69c <main+0x1fc>)


    delay_ms(300);

    for (u16_t baseNum = 0; baseNum < 400; ++baseNum) {
        sampleTick(&my_altimeter);
     4cc:	a80b      	add	r0, sp, #44	; 0x2c
     4ce:	47b8      	blx	r7

        baseAltitude -= baseAltitude / 50;
     4d0:	9805      	ldr	r0, [sp, #20]
     4d2:	9d05      	ldr	r5, [sp, #20]
     4d4:	4972      	ldr	r1, [pc, #456]	; (6a0 <main+0x200>)
     4d6:	47b0      	blx	r6
     4d8:	1c01      	adds	r1, r0, #0
     4da:	1c28      	adds	r0, r5, #0
     4dc:	4b71      	ldr	r3, [pc, #452]	; (6a4 <main+0x204>)
     4de:	4798      	blx	r3
     4e0:	9005      	str	r0, [sp, #20]
        baseAltitude += my_altimeter.myBarometer.heightFeet / 50;
     4e2:	9d05      	ldr	r5, [sp, #20]
     4e4:	496e      	ldr	r1, [pc, #440]	; (6a0 <main+0x200>)
     4e6:	9814      	ldr	r0, [sp, #80]	; 0x50
     4e8:	47b0      	blx	r6
     4ea:	1c29      	adds	r1, r5, #0
     4ec:	4b6e      	ldr	r3, [pc, #440]	; (6a8 <main+0x208>)
     4ee:	4798      	blx	r3
     4f0:	9005      	str	r0, [sp, #20]
        delay_us(150);
     4f2:	2096      	movs	r0, #150	; 0x96
     4f4:	4b6d      	ldr	r3, [pc, #436]	; (6ac <main+0x20c>)
     4f6:	4798      	blx	r3
     4f8:	3c01      	subs	r4, #1
     4fa:	b2a4      	uxth	r4, r4
    volatile float baseAltitude;


    delay_ms(300);

    for (u16_t baseNum = 0; baseNum < 400; ++baseNum) {
     4fc:	2c00      	cmp	r4, #0
     4fe:	d1e5      	bne.n	4cc <main+0x2c>
        baseAltitude += my_altimeter.myBarometer.heightFeet / 50;
        delay_us(150);

    }

    averageAlt = baseAltitude;
     500:	9b05      	ldr	r3, [sp, #20]
     502:	9306      	str	r3, [sp, #24]

    u32_t time = 0;
    u32_t lastTime = 0;
     504:	2300      	movs	r3, #0
     506:	469b      	mov	fp, r3

    initMS5803Barometer(&my_altimeter.myBarometer);
    IMUinit();


    u8_t counter = 0;
     508:	9300      	str	r3, [sp, #0]

    u32_t time = 0;
    u32_t lastTime = 0;

    while (1) {
        time = millis();
     50a:	4b69      	ldr	r3, [pc, #420]	; (6b0 <main+0x210>)
     50c:	469a      	mov	sl, r3
        counter++;

        if (takeSample) {
     50e:	4b69      	ldr	r3, [pc, #420]	; (6b4 <main+0x214>)
     510:	4699      	mov	r9, r3


        averageAccel -= averageAccel / 10;
        averageAccel += my_altimeter.myAnalogAccelerometer.analogAccel / 10;

        averageXAccel -= averageXAccel / 5;
     512:	46d8      	mov	r8, fp

    u32_t time = 0;
    u32_t lastTime = 0;

    while (1) {
        time = millis();
     514:	47d0      	blx	sl
     516:	9001      	str	r0, [sp, #4]
        counter++;
     518:	9b00      	ldr	r3, [sp, #0]
     51a:	3301      	adds	r3, #1
     51c:	b2db      	uxtb	r3, r3
     51e:	9300      	str	r3, [sp, #0]

        if (takeSample) {
     520:	464b      	mov	r3, r9
     522:	781b      	ldrb	r3, [r3, #0]
     524:	2b00      	cmp	r3, #0
     526:	d009      	beq.n	53c <main+0x9c>
            sampleTick(&my_altimeter);
     528:	a80b      	add	r0, sp, #44	; 0x2c
     52a:	4b5b      	ldr	r3, [pc, #364]	; (698 <main+0x1f8>)
     52c:	4798      	blx	r3
            takeSample = false;
     52e:	2200      	movs	r2, #0
     530:	4b60      	ldr	r3, [pc, #384]	; (6b4 <main+0x214>)
     532:	701a      	strb	r2, [r3, #0]
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
}


inline static void pinToggle(Pin p) {
    PORT->Group[p.group].OUTTGL.reg = (1<<p.pin);
     534:	2280      	movs	r2, #128	; 0x80
     536:	03d2      	lsls	r2, r2, #15
     538:	4b5f      	ldr	r3, [pc, #380]	; (6b8 <main+0x218>)
     53a:	61da      	str	r2, [r3, #28]
            pinToggle(TxPo);
        }


        if (my_altimeter.myBarometer.rawTempatureData == 0 || my_altimeter.myBarometer.rawPressureData == 0) {
     53c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
     53e:	9302      	str	r3, [sp, #8]
     540:	2b00      	cmp	r3, #0
     542:	d006      	beq.n	552 <main+0xb2>
     544:	9b0e      	ldr	r3, [sp, #56]	; 0x38
     546:	9302      	str	r3, [sp, #8]
     548:	2b00      	cmp	r3, #0
     54a:	d10f      	bne.n	56c <main+0xcc>
     54c:	24fa      	movs	r4, #250	; 0xfa
     54e:	0064      	lsls	r4, r4, #1
     550:	e001      	b.n	556 <main+0xb6>
     552:	24fa      	movs	r4, #250	; 0xfa
     554:	0064      	lsls	r4, r4, #1
     556:	4f58      	ldr	r7, [pc, #352]	; (6b8 <main+0x218>)
     558:	2680      	movs	r6, #128	; 0x80
     55a:	03b6      	lsls	r6, r6, #14
            for (u16_t buzz = 0; buzz < 500; ++buzz) {
                pinToggle(buzzerPin);
                delay_us(122);
     55c:	4d53      	ldr	r5, [pc, #332]	; (6ac <main+0x20c>)
     55e:	61fe      	str	r6, [r7, #28]
     560:	207a      	movs	r0, #122	; 0x7a
     562:	47a8      	blx	r5
     564:	3c01      	subs	r4, #1
     566:	b2a4      	uxth	r4, r4
            pinToggle(TxPo);
        }


        if (my_altimeter.myBarometer.rawTempatureData == 0 || my_altimeter.myBarometer.rawPressureData == 0) {
            for (u16_t buzz = 0; buzz < 500; ++buzz) {
     568:	2c00      	cmp	r4, #0
     56a:	d1f8      	bne.n	55e <main+0xbe>
                delay_us(122);
            }

        }

        averageAlt -= averageAlt / 20;
     56c:	9806      	ldr	r0, [sp, #24]
     56e:	9c06      	ldr	r4, [sp, #24]
     570:	4d4a      	ldr	r5, [pc, #296]	; (69c <main+0x1fc>)
     572:	4952      	ldr	r1, [pc, #328]	; (6bc <main+0x21c>)
     574:	47a8      	blx	r5
     576:	1c01      	adds	r1, r0, #0
     578:	4e4a      	ldr	r6, [pc, #296]	; (6a4 <main+0x204>)
     57a:	1c20      	adds	r0, r4, #0
     57c:	47b0      	blx	r6
     57e:	9006      	str	r0, [sp, #24]
        averageAlt += my_altimeter.myBarometer.heightFeet / 20;
     580:	9f06      	ldr	r7, [sp, #24]
     582:	494e      	ldr	r1, [pc, #312]	; (6bc <main+0x21c>)
     584:	9814      	ldr	r0, [sp, #80]	; 0x50
     586:	47a8      	blx	r5
     588:	4c47      	ldr	r4, [pc, #284]	; (6a8 <main+0x208>)
     58a:	1c39      	adds	r1, r7, #0
     58c:	47a0      	blx	r4
     58e:	9006      	str	r0, [sp, #24]


        averageAccel -= averageAccel / 10;
     590:	9807      	ldr	r0, [sp, #28]
     592:	9f07      	ldr	r7, [sp, #28]
     594:	494a      	ldr	r1, [pc, #296]	; (6c0 <main+0x220>)
     596:	47a8      	blx	r5
     598:	1c01      	adds	r1, r0, #0
     59a:	1c38      	adds	r0, r7, #0
     59c:	47b0      	blx	r6
     59e:	9007      	str	r0, [sp, #28]
        averageAccel += my_altimeter.myAnalogAccelerometer.analogAccel / 10;
     5a0:	9f07      	ldr	r7, [sp, #28]
     5a2:	4947      	ldr	r1, [pc, #284]	; (6c0 <main+0x220>)
     5a4:	9822      	ldr	r0, [sp, #136]	; 0x88
     5a6:	47a8      	blx	r5
     5a8:	1c39      	adds	r1, r7, #0
     5aa:	47a0      	blx	r4
     5ac:	9007      	str	r0, [sp, #28]

        averageXAccel -= averageXAccel / 5;
     5ae:	980a      	ldr	r0, [sp, #40]	; 0x28
     5b0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
     5b2:	4944      	ldr	r1, [pc, #272]	; (6c4 <main+0x224>)
     5b4:	47a8      	blx	r5
     5b6:	1c01      	adds	r1, r0, #0
     5b8:	1c38      	adds	r0, r7, #0
     5ba:	47b0      	blx	r6
     5bc:	900a      	str	r0, [sp, #40]	; 0x28
        averageXAccel += my_altimeter.myIMU.accelX / 5;
     5be:	9f0a      	ldr	r7, [sp, #40]	; 0x28
     5c0:	4940      	ldr	r1, [pc, #256]	; (6c4 <main+0x224>)
     5c2:	9815      	ldr	r0, [sp, #84]	; 0x54
     5c4:	47a8      	blx	r5
     5c6:	1c39      	adds	r1, r7, #0
     5c8:	47a0      	blx	r4
     5ca:	900a      	str	r0, [sp, #40]	; 0x28

        averageYAccel -= averageYAccel / 5;
     5cc:	9809      	ldr	r0, [sp, #36]	; 0x24
     5ce:	9f09      	ldr	r7, [sp, #36]	; 0x24
     5d0:	493c      	ldr	r1, [pc, #240]	; (6c4 <main+0x224>)
     5d2:	47a8      	blx	r5
     5d4:	1c01      	adds	r1, r0, #0
     5d6:	1c38      	adds	r0, r7, #0
     5d8:	47b0      	blx	r6
     5da:	9009      	str	r0, [sp, #36]	; 0x24
        averageYAccel += my_altimeter.myIMU.accelY / 5;
     5dc:	9f09      	ldr	r7, [sp, #36]	; 0x24
     5de:	4939      	ldr	r1, [pc, #228]	; (6c4 <main+0x224>)
     5e0:	9816      	ldr	r0, [sp, #88]	; 0x58
     5e2:	47a8      	blx	r5
     5e4:	1c39      	adds	r1, r7, #0
     5e6:	47a0      	blx	r4
     5e8:	9009      	str	r0, [sp, #36]	; 0x24

        averageZAccel -= averageZAccel / 5;
     5ea:	9808      	ldr	r0, [sp, #32]
     5ec:	9f08      	ldr	r7, [sp, #32]
     5ee:	4935      	ldr	r1, [pc, #212]	; (6c4 <main+0x224>)
     5f0:	47a8      	blx	r5
     5f2:	1c01      	adds	r1, r0, #0
     5f4:	1c38      	adds	r0, r7, #0
     5f6:	47b0      	blx	r6
     5f8:	9008      	str	r0, [sp, #32]
        averageZAccel += my_altimeter.myIMU.accelZ / 5;
     5fa:	9e08      	ldr	r6, [sp, #32]
     5fc:	4931      	ldr	r1, [pc, #196]	; (6c4 <main+0x224>)
     5fe:	9817      	ldr	r0, [sp, #92]	; 0x5c
     600:	47a8      	blx	r5
     602:	1c31      	adds	r1, r6, #0
     604:	47a0      	blx	r4
     606:	9008      	str	r0, [sp, #32]
        		delay_us(150);
        		pinToggle(buzzerPin);
        	}
        }
        */
        volatile float sumAccel = (averageXAccel*averageXAccel + averageYAccel*averageYAccel + averageZAccel*averageZAccel);
     608:	980a      	ldr	r0, [sp, #40]	; 0x28
     60a:	990a      	ldr	r1, [sp, #40]	; 0x28
     60c:	9b09      	ldr	r3, [sp, #36]	; 0x24
     60e:	9302      	str	r3, [sp, #8]
     610:	9a09      	ldr	r2, [sp, #36]	; 0x24
     612:	4693      	mov	fp, r2
     614:	9e08      	ldr	r6, [sp, #32]
     616:	9f08      	ldr	r7, [sp, #32]
     618:	4d2b      	ldr	r5, [pc, #172]	; (6c8 <main+0x228>)
     61a:	47a8      	blx	r5
     61c:	9003      	str	r0, [sp, #12]
     61e:	4659      	mov	r1, fp
     620:	9802      	ldr	r0, [sp, #8]
     622:	47a8      	blx	r5
     624:	1c01      	adds	r1, r0, #0
     626:	9803      	ldr	r0, [sp, #12]
     628:	47a0      	blx	r4
     62a:	9002      	str	r0, [sp, #8]
     62c:	1c39      	adds	r1, r7, #0
     62e:	1c30      	adds	r0, r6, #0
     630:	47a8      	blx	r5
     632:	1c01      	adds	r1, r0, #0
     634:	9802      	ldr	r0, [sp, #8]
     636:	47a0      	blx	r4
     638:	9004      	str	r0, [sp, #16]


        if (sumAccel < 0.5) {
     63a:	9804      	ldr	r0, [sp, #16]
     63c:	21fc      	movs	r1, #252	; 0xfc
     63e:	0589      	lsls	r1, r1, #22
     640:	4b22      	ldr	r3, [pc, #136]	; (6cc <main+0x22c>)
     642:	4798      	blx	r3
     644:	2800      	cmp	r0, #0
     646:	d00c      	beq.n	662 <main+0x1c2>
     648:	24fa      	movs	r4, #250	; 0xfa
     64a:	0064      	lsls	r4, r4, #1
     64c:	4f1a      	ldr	r7, [pc, #104]	; (6b8 <main+0x218>)
     64e:	2680      	movs	r6, #128	; 0x80
     650:	03b6      	lsls	r6, r6, #14
            for (u16_t buzz = 0; buzz < 500; ++buzz) {
                pinToggle(buzzerPin);
                delay_us(122);
     652:	4d16      	ldr	r5, [pc, #88]	; (6ac <main+0x20c>)
     654:	61fe      	str	r6, [r7, #28]
     656:	207a      	movs	r0, #122	; 0x7a
     658:	47a8      	blx	r5
     65a:	3c01      	subs	r4, #1
     65c:	b2a4      	uxth	r4, r4
        */
        volatile float sumAccel = (averageXAccel*averageXAccel + averageYAccel*averageYAccel + averageZAccel*averageZAccel);


        if (sumAccel < 0.5) {
            for (u16_t buzz = 0; buzz < 500; ++buzz) {
     65e:	2c00      	cmp	r4, #0
     660:	d1f8      	bne.n	654 <main+0x1b4>
                delay_us(122);
            }
        }


        if ((time - lastTime) > 1000) {
     662:	9901      	ldr	r1, [sp, #4]
     664:	4642      	mov	r2, r8
     666:	1a8b      	subs	r3, r1, r2
     668:	22fa      	movs	r2, #250	; 0xfa
     66a:	0092      	lsls	r2, r2, #2
     66c:	4293      	cmp	r3, r2
     66e:	d904      	bls.n	67a <main+0x1da>
     670:	2280      	movs	r2, #128	; 0x80
     672:	0352      	lsls	r2, r2, #13
     674:	4b10      	ldr	r3, [pc, #64]	; (6b8 <main+0x218>)
     676:	61da      	str	r2, [r3, #28]
            pinToggle(LedPin);
            lastTime = time;
     678:	4688      	mov	r8, r1
        }


        if (counter == 100) {
     67a:	9b00      	ldr	r3, [sp, #0]
     67c:	2b64      	cmp	r3, #100	; 0x64
     67e:	d000      	beq.n	682 <main+0x1e2>
     680:	e748      	b.n	514 <main+0x74>
                                        pinToggle(buzzerPin);
                                        delay_us(122);
                                    }
            */

            counter = -1;
     682:	339b      	adds	r3, #155	; 0x9b
     684:	9300      	str	r3, [sp, #0]
     686:	e745      	b.n	514 <main+0x74>
     688:	00000221 	.word	0x00000221
     68c:	00000e01 	.word	0x00000e01
     690:	000006d1 	.word	0x000006d1
     694:	00000a39 	.word	0x00000a39
     698:	00000e6d 	.word	0x00000e6d
     69c:	00001685 	.word	0x00001685
     6a0:	42480000 	.word	0x42480000
     6a4:	00001c41 	.word	0x00001c41
     6a8:	00001399 	.word	0x00001399
     6ac:	00000a0d 	.word	0x00000a0d
     6b0:	00000a85 	.word	0x00000a85
     6b4:	20000460 	.word	0x20000460
     6b8:	41004400 	.word	0x41004400
     6bc:	41a00000 	.word	0x41a00000
     6c0:	41200000 	.word	0x41200000
     6c4:	40a00000 	.word	0x40a00000
     6c8:	00001a19 	.word	0x00001a19
     6cc:	000012f1 	.word	0x000012f1

000006d0 <IMUinit>:
#include <util.h>
#include <boardDefines.h>


void IMUinit() {
     6d0:	b570      	push	{r4, r5, r6, lr}
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     6d2:	4c07      	ldr	r4, [pc, #28]	; (6f0 <IMUinit+0x20>)
     6d4:	2580      	movs	r5, #128	; 0x80
     6d6:	00ed      	lsls	r5, r5, #3
     6d8:	2394      	movs	r3, #148	; 0x94
     6da:	50e5      	str	r5, [r4, r3]

    uint8_t dummy_Tx = 0xFF;
    uint8_t dummy_rx;

    pinLow(cs_accel);
    dummy_rx = spiDataTransfer(SPI0, 0x0F);
     6dc:	210f      	movs	r1, #15
     6de:	2000      	movs	r0, #0
     6e0:	4e04      	ldr	r6, [pc, #16]	; (6f4 <IMUinit+0x24>)
     6e2:	47b0      	blx	r6
    dummy_rx = spiDataTransfer(SPI0, 0x0C);
     6e4:	210c      	movs	r1, #12
     6e6:	2000      	movs	r0, #0
     6e8:	47b0      	blx	r6
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     6ea:	2398      	movs	r3, #152	; 0x98
     6ec:	50e5      	str	r5, [r4, r3]
    pinHigh(cs_accel);

}
     6ee:	bd70      	pop	{r4, r5, r6, pc}
     6f0:	41004400 	.word	0x41004400
     6f4:	000012b1 	.word	0x000012b1

000006f8 <adcInit>:


#include <util.h>

void adcInit() {
     6f8:	b510      	push	{r4, lr}

    // set up clock
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;
     6fa:	4a12      	ldr	r2, [pc, #72]	; (744 <adcInit+0x4c>)
     6fc:	6a13      	ldr	r3, [r2, #32]
     6fe:	2180      	movs	r1, #128	; 0x80
     700:	0249      	lsls	r1, r1, #9
     702:	430b      	orrs	r3, r1
     704:	6213      	str	r3, [r2, #32]

    // divide prescaler by 512 (93.75KHz), max adc freq is 2.1MHz
    ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |
     706:	4910      	ldr	r1, [pc, #64]	; (748 <adcInit+0x50>)
     708:	22e0      	movs	r2, #224	; 0xe0
     70a:	00d2      	lsls	r2, r2, #3
     70c:	808a      	strh	r2, [r1, #4]
                     ADC_CTRLB_RESSEL_12BIT;

    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
     70e:	480f      	ldr	r0, [pc, #60]	; (74c <adcInit+0x54>)
     710:	4b0f      	ldr	r3, [pc, #60]	; (750 <adcInit+0x58>)
     712:	8058      	strh	r0, [r3, #2]
                        GCLK_CLKCTRL_GEN(0) |
                        GCLK_CLKCTRL_ID(ADC_GCLK_ID);

    ADC->CALIB.reg =
        ADC_CALIB_BIAS_CAL(
     714:	4b0f      	ldr	r3, [pc, #60]	; (754 <adcInit+0x5c>)
    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(0) |
                        GCLK_CLKCTRL_ID(ADC_GCLK_ID);

    ADC->CALIB.reg =
     716:	681b      	ldr	r3, [r3, #0]
     718:	015b      	lsls	r3, r3, #5
     71a:	4013      	ands	r3, r2
     71c:	0018      	movs	r0, r3
        ADC_CALIB_BIAS_CAL(
            (*(uint32_t *)ADC_FUSES_BIASCAL_ADDR >> ADC_FUSES_BIASCAL_Pos)
        ) |
        ADC_CALIB_LINEARITY_CAL(
     71e:	4b0e      	ldr	r3, [pc, #56]	; (758 <adcInit+0x60>)
    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(0) |
                        GCLK_CLKCTRL_ID(ADC_GCLK_ID);

    ADC->CALIB.reg =
     720:	685a      	ldr	r2, [r3, #4]
     722:	0154      	lsls	r4, r2, #5
     724:	681a      	ldr	r2, [r3, #0]
     726:	0ed3      	lsrs	r3, r2, #27
     728:	4323      	orrs	r3, r4
     72a:	22ff      	movs	r2, #255	; 0xff
     72c:	4013      	ands	r3, r2
     72e:	4303      	orrs	r3, r0
     730:	850b      	strh	r3, [r1, #40]	; 0x28
        ) |
        ADC_CALIB_LINEARITY_CAL(
            (*(uint64_t *)ADC_FUSES_LINEARITY_0_ADDR >> ADC_FUSES_LINEARITY_0_Pos)
        );

    ADC->REFCTRL.reg = ADC_REFCTRL_REFSEL_INTVCC1;
     732:	2302      	movs	r3, #2
     734:	704b      	strb	r3, [r1, #1]

    ADC->CTRLA.reg = ADC_CTRLA_ENABLE; // enable
     736:	700b      	strb	r3, [r1, #0]
    while(ADC->STATUS.reg & ADC_STATUS_SYNCBUSY);
     738:	000a      	movs	r2, r1
     73a:	7e53      	ldrb	r3, [r2, #25]
     73c:	b25b      	sxtb	r3, r3
     73e:	2b00      	cmp	r3, #0
     740:	dbfb      	blt.n	73a <adcInit+0x42>
}
     742:	bd10      	pop	{r4, pc}
     744:	40000400 	.word	0x40000400
     748:	42004000 	.word	0x42004000
     74c:	0000401e 	.word	0x0000401e
     750:	40000c00 	.word	0x40000c00
     754:	00806024 	.word	0x00806024
     758:	00806020 	.word	0x00806020

0000075c <adcSample>:



u16_t adcSample() {
    ADC->SWTRIG.reg = ADC_SWTRIG_START;
     75c:	2202      	movs	r2, #2
     75e:	4b05      	ldr	r3, [pc, #20]	; (774 <adcSample+0x18>)
     760:	731a      	strb	r2, [r3, #12]
    while(!(ADC->INTFLAG.reg & ADC_INTFLAG_RESRDY)); // wait until result is ready
     762:	0019      	movs	r1, r3
     764:	3a01      	subs	r2, #1
     766:	7e0b      	ldrb	r3, [r1, #24]
     768:	4213      	tst	r3, r2
     76a:	d0fc      	beq.n	766 <adcSample+0xa>
    return ADC->RESULT.reg;
     76c:	4b01      	ldr	r3, [pc, #4]	; (774 <adcSample+0x18>)
     76e:	8b58      	ldrh	r0, [r3, #26]
     770:	b280      	uxth	r0, r0
}
     772:	4770      	bx	lr
     774:	42004000 	.word	0x42004000

00000778 <adc_read>:


u16_t adc_read(Pin p) {
     778:	b530      	push	{r4, r5, lr}
     77a:	b083      	sub	sp, #12
     77c:	0c03      	lsrs	r3, r0, #16
     77e:	0002      	movs	r2, r0
     780:	9000      	str	r0, [sp, #0]
     782:	9101      	str	r1, [sp, #4]
     784:	b2c9      	uxtb	r1, r1
     786:	b2db      	uxtb	r3, r3
     788:	0e10      	lsrs	r0, r2, #24
    u16_t buad;

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
     78a:	07c2      	lsls	r2, r0, #31
     78c:	d50c      	bpl.n	7a8 <adc_read+0x30>
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     78e:	0842      	lsrs	r2, r0, #1
     790:	01dc      	lsls	r4, r3, #7
     792:	1912      	adds	r2, r2, r4
     794:	4c14      	ldr	r4, [pc, #80]	; (7e8 <adc_read+0x70>)
     796:	46a4      	mov	ip, r4
     798:	4462      	add	r2, ip
     79a:	7814      	ldrb	r4, [r2, #0]
     79c:	250f      	movs	r5, #15
     79e:	402c      	ands	r4, r5
     7a0:	2510      	movs	r5, #16
     7a2:	432c      	orrs	r4, r5
     7a4:	7014      	strb	r4, [r2, #0]
     7a6:	e00b      	b.n	7c0 <adc_read+0x48>
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     7a8:	0842      	lsrs	r2, r0, #1
     7aa:	01dc      	lsls	r4, r3, #7
     7ac:	1912      	adds	r2, r2, r4
     7ae:	4c0e      	ldr	r4, [pc, #56]	; (7e8 <adc_read+0x70>)
     7b0:	46a4      	mov	ip, r4
     7b2:	4462      	add	r2, ip
     7b4:	7814      	ldrb	r4, [r2, #0]
     7b6:	250f      	movs	r5, #15
     7b8:	43ac      	bics	r4, r5
     7ba:	2501      	movs	r5, #1
     7bc:	432c      	orrs	r4, r5
     7be:	7014      	strb	r4, [r2, #0]
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     7c0:	01db      	lsls	r3, r3, #7
     7c2:	18c0      	adds	r0, r0, r3
     7c4:	4b09      	ldr	r3, [pc, #36]	; (7ec <adc_read+0x74>)
     7c6:	469c      	mov	ip, r3
     7c8:	4460      	add	r0, ip
     7ca:	7802      	ldrb	r2, [r0, #0]
     7cc:	2301      	movs	r3, #1
     7ce:	4313      	orrs	r3, r2
     7d0:	7003      	strb	r3, [r0, #0]
    // switch pin mux to analog in
    pinAnalog(p);

    ADC->INPUTCTRL.reg = (ADC_INPUTCTRL_MUXPOS(p.chan) // select from proper pin
                          | ADC_INPUTCTRL_MUXNEG_GND // 0 = gnd
                          | ADC_INPUTCTRL_GAIN_1X);
     7d2:	231f      	movs	r3, #31
     7d4:	4019      	ands	r1, r3
     7d6:	23c0      	movs	r3, #192	; 0xc0
     7d8:	015b      	lsls	r3, r3, #5
     7da:	4319      	orrs	r1, r3

u16_t adc_read(Pin p) {
    // switch pin mux to analog in
    pinAnalog(p);

    ADC->INPUTCTRL.reg = (ADC_INPUTCTRL_MUXPOS(p.chan) // select from proper pin
     7dc:	4b04      	ldr	r3, [pc, #16]	; (7f0 <adc_read+0x78>)
     7de:	6119      	str	r1, [r3, #16]
                          | ADC_INPUTCTRL_MUXNEG_GND // 0 = gnd
                          | ADC_INPUTCTRL_GAIN_1X);

    return adcSample();
     7e0:	4b04      	ldr	r3, [pc, #16]	; (7f4 <adc_read+0x7c>)
     7e2:	4798      	blx	r3
     7e4:	b003      	add	sp, #12
     7e6:	bd30      	pop	{r4, r5, pc}
     7e8:	41004430 	.word	0x41004430
     7ec:	41004440 	.word	0x41004440
     7f0:	42004000 	.word	0x42004000
     7f4:	0000075d 	.word	0x0000075d

000007f8 <byteOut>:





void byteOut(Pin SCK_PIN, Pin MOSI_PIN, uint8_t byte) {
     7f8:	b5f0      	push	{r4, r5, r6, r7, lr}
     7fa:	b085      	sub	sp, #20
     7fc:	0c03      	lsrs	r3, r0, #16
     7fe:	0c14      	lsrs	r4, r2, #16
     800:	a90a      	add	r1, sp, #40	; 0x28
     802:	7809      	ldrb	r1, [r1, #0]
     804:	b2e6      	uxtb	r6, r4
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     806:	b2dc      	uxtb	r4, r3
     808:	0e00      	lsrs	r0, r0, #24
     80a:	2701      	movs	r7, #1
     80c:	003d      	movs	r5, r7
     80e:	4085      	lsls	r5, r0
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     810:	0e12      	lsrs	r2, r2, #24
     812:	4097      	lsls	r7, r2
     814:	2308      	movs	r3, #8
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     816:	01e0      	lsls	r0, r4, #7
     818:	4a0a      	ldr	r2, [pc, #40]	; (844 <byteOut+0x4c>)
     81a:	4694      	mov	ip, r2
     81c:	4460      	add	r0, ip
     81e:	01f4      	lsls	r4, r6, #7
     820:	4464      	add	r4, ip
     822:	6145      	str	r5, [r0, #20]

	for (uint8_t i = 0; i<8; ++i) {
		pinLow(SCK_PIN);
		if (byte & 0x80) {
     824:	b24a      	sxtb	r2, r1
     826:	2a00      	cmp	r2, #0
     828:	da01      	bge.n	82e <byteOut+0x36>
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     82a:	61a7      	str	r7, [r4, #24]
     82c:	e000      	b.n	830 <byteOut+0x38>
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     82e:	6167      	str	r7, [r4, #20]
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     830:	6185      	str	r5, [r0, #24]
			pinHigh(MOSI_PIN);
			} else {
			pinLow(MOSI_PIN);
		}
		pinHigh(SCK_PIN);
		byte <<= 1;
     832:	0049      	lsls	r1, r1, #1
     834:	b2c9      	uxtb	r1, r1
     836:	3b01      	subs	r3, #1
     838:	b2db      	uxtb	r3, r3



void byteOut(Pin SCK_PIN, Pin MOSI_PIN, uint8_t byte) {

	for (uint8_t i = 0; i<8; ++i) {
     83a:	2b00      	cmp	r3, #0
     83c:	d1f1      	bne.n	822 <byteOut+0x2a>
			pinLow(MOSI_PIN);
		}
		pinHigh(SCK_PIN);
		byte <<= 1;
	}
}
     83e:	b005      	add	sp, #20
     840:	bdf0      	pop	{r4, r5, r6, r7, pc}
     842:	46c0      	nop			; (mov r8, r8)
     844:	41004400 	.word	0x41004400

00000848 <byteIn>:

uint8_t byteIn(Pin SCK_PIN, Pin MISO_PIN) {
     848:	b5f0      	push	{r4, r5, r6, r7, lr}
     84a:	b085      	sub	sp, #20
     84c:	0c04      	lsrs	r4, r0, #16
     84e:	9002      	str	r0, [sp, #8]
     850:	9103      	str	r1, [sp, #12]
     852:	0c11      	lsrs	r1, r2, #16
     854:	0017      	movs	r7, r2
     856:	9200      	str	r2, [sp, #0]
     858:	9301      	str	r3, [sp, #4]
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     85a:	b2e4      	uxtb	r4, r4
     85c:	0e05      	lsrs	r5, r0, #24
     85e:	2601      	movs	r6, #1
     860:	0033      	movs	r3, r6
     862:	40ab      	lsls	r3, r5
     864:	001d      	movs	r5, r3
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     866:	b2ca      	uxtb	r2, r1
     868:	0e3f      	lsrs	r7, r7, #24
     86a:	40be      	lsls	r6, r7
     86c:	2108      	movs	r1, #8
	uint8_t byte = 0x00;
     86e:	2000      	movs	r0, #0
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     870:	01e4      	lsls	r4, r4, #7
     872:	4b0a      	ldr	r3, [pc, #40]	; (89c <byteIn+0x54>)
     874:	469c      	mov	ip, r3
     876:	4464      	add	r4, ip
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     878:	01d2      	lsls	r2, r2, #7
     87a:	4462      	add	r2, ip
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     87c:	6165      	str	r5, [r4, #20]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     87e:	6a13      	ldr	r3, [r2, #32]

	for (uint8_t i = 0; i<8; ++i) {
		pinLow(SCK_PIN);
		byte = (byte << 1 ) | pinRead(MISO_PIN);
     880:	4033      	ands	r3, r6
     882:	1e5f      	subs	r7, r3, #1
     884:	41bb      	sbcs	r3, r7
     886:	0040      	lsls	r0, r0, #1
     888:	4303      	orrs	r3, r0
     88a:	b2d8      	uxtb	r0, r3
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     88c:	61a5      	str	r5, [r4, #24]
     88e:	3901      	subs	r1, #1
     890:	b2c9      	uxtb	r1, r1
}

uint8_t byteIn(Pin SCK_PIN, Pin MISO_PIN) {
	uint8_t byte = 0x00;

	for (uint8_t i = 0; i<8; ++i) {
     892:	2900      	cmp	r1, #0
     894:	d1f2      	bne.n	87c <byteIn+0x34>
		pinLow(SCK_PIN);
		byte = (byte << 1 ) | pinRead(MISO_PIN);
		pinHigh(SCK_PIN);
	}
	return byte;
     896:	b005      	add	sp, #20
     898:	bdf0      	pop	{r4, r5, r6, r7, pc}
     89a:	46c0      	nop			; (mov r8, r8)
     89c:	41004400 	.word	0x41004400

000008a0 <GclkInit>:


static uint32_t cycles_per_ms = 48000000UL / 1000;
static uint32_t cycles_per_us = 48000000UL / 1000000;

void GclkInit() {
     8a0:	b510      	push	{r4, lr}


    SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     8a2:	22c2      	movs	r2, #194	; 0xc2
     8a4:	00d2      	lsls	r2, r2, #3
     8a6:	4b18      	ldr	r3, [pc, #96]	; (908 <GclkInit+0x68>)
     8a8:	609a      	str	r2, [r3, #8]
                           SYSCTRL_INTFLAG_DFLLRDY;
    NVMCTRL->CTRLB.reg |= NVMCTRL_CTRLB_RWS_HALF;
     8aa:	4a18      	ldr	r2, [pc, #96]	; (90c <GclkInit+0x6c>)
     8ac:	6851      	ldr	r1, [r2, #4]
     8ae:	2302      	movs	r3, #2
     8b0:	430b      	orrs	r3, r1
     8b2:	6053      	str	r3, [r2, #4]

#define NVM_DFLL_COARSE_POS    58
#define NVM_DFLL_COARSE_SIZE   6
#define NVM_DFLL_FINE_POS      64
#define NVM_DFLL_FINE_SIZE     10
    uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
     8b4:	4b16      	ldr	r3, [pc, #88]	; (910 <GclkInit+0x70>)
     8b6:	681c      	ldr	r4, [r3, #0]
     8b8:	0ea4      	lsrs	r4, r4, #26
                         + (NVM_DFLL_COARSE_POS / 32))
                       >> (NVM_DFLL_COARSE_POS % 32))
                     & ((1 << NVM_DFLL_COARSE_SIZE) - 1);
    if (coarse == 0x3f) {
     8ba:	2c3f      	cmp	r4, #63	; 0x3f
     8bc:	d100      	bne.n	8c0 <GclkInit+0x20>
        coarse = 0x1f;
     8be:	3c20      	subs	r4, #32
    }
    uint32_t fine =( *((uint32_t *)(NVMCTRL_OTP4)
                       + (NVM_DFLL_FINE_POS / 32))
                     >> (NVM_DFLL_FINE_POS % 32))
     8c0:	4b14      	ldr	r3, [pc, #80]	; (914 <GclkInit+0x74>)
                       >> (NVM_DFLL_COARSE_POS % 32))
                     & ((1 << NVM_DFLL_COARSE_SIZE) - 1);
    if (coarse == 0x3f) {
        coarse = 0x1f;
    }
    uint32_t fine =( *((uint32_t *)(NVMCTRL_OTP4)
     8c2:	6818      	ldr	r0, [r3, #0]
     8c4:	0580      	lsls	r0, r0, #22
     8c6:	0d80      	lsrs	r0, r0, #22
                       + (NVM_DFLL_FINE_POS / 32))
                     >> (NVM_DFLL_FINE_POS % 32))
                   & ((1 << NVM_DFLL_FINE_SIZE) - 1);
    if (fine == 0x3ff) {
     8c8:	4b13      	ldr	r3, [pc, #76]	; (918 <GclkInit+0x78>)
     8ca:	4298      	cmp	r0, r3
     8cc:	d100      	bne.n	8d0 <GclkInit+0x30>
        fine = 0x1ff;
     8ce:	4813      	ldr	r0, [pc, #76]	; (91c <GclkInit+0x7c>)
    }


    // Disable ONDEMAND mode while writing configurations (errata 9905)
    SYSCTRL->DFLLCTRL.reg = dfll_ctrl_usb & ~SYSCTRL_DFLLCTRL_ONDEMAND;
     8d0:	4a13      	ldr	r2, [pc, #76]	; (920 <GclkInit+0x80>)
     8d2:	4b0d      	ldr	r3, [pc, #52]	; (908 <GclkInit+0x68>)
     8d4:	849a      	strh	r2, [r3, #36]	; 0x24
    while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_DFLLRDY)) == 0);
     8d6:	0019      	movs	r1, r3
     8d8:	2210      	movs	r2, #16
     8da:	68cb      	ldr	r3, [r1, #12]
     8dc:	421a      	tst	r2, r3
     8de:	d0fc      	beq.n	8da <GclkInit+0x3a>
    SYSCTRL->DFLLVAL.reg = SYSCTRL_DFLLVAL_COARSE(coarse) | SYSCTRL_DFLLVAL_FINE(fine);
     8e0:	02a4      	lsls	r4, r4, #10
     8e2:	4320      	orrs	r0, r4
     8e4:	4b08      	ldr	r3, [pc, #32]	; (908 <GclkInit+0x68>)
     8e6:	6298      	str	r0, [r3, #40]	; 0x28


    //Wait and see if the DFLL output is good . . .
    while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_DFLLRDY)) == 0);
     8e8:	0019      	movs	r1, r3
     8ea:	2210      	movs	r2, #16
     8ec:	68cb      	ldr	r3, [r1, #12]
     8ee:	421a      	tst	r2, r3
     8f0:	d0fc      	beq.n	8ec <GclkInit+0x4c>


    SYSCTRL->DFLLCTRL.reg = dfll_ctrl_usb;
     8f2:	4a0c      	ldr	r2, [pc, #48]	; (924 <GclkInit+0x84>)
     8f4:	4b04      	ldr	r3, [pc, #16]	; (908 <GclkInit+0x68>)
     8f6:	849a      	strh	r2, [r3, #36]	; 0x24


    //For generic clock generator 0, select the DFLL48 Clock as input
    GCLK->GENDIV.reg  = (GCLK_GENDIV_DIV(1)  | GCLK_GENDIV_ID(0));
     8f8:	4b0b      	ldr	r3, [pc, #44]	; (928 <GclkInit+0x88>)
     8fa:	2280      	movs	r2, #128	; 0x80
     8fc:	0052      	lsls	r2, r2, #1
     8fe:	609a      	str	r2, [r3, #8]
    GCLK->GENCTRL.reg = (GCLK_GENCTRL_ID(0)  | (GCLK_GENCTRL_SRC_DFLL48M) | (GCLK_GENCTRL_GENEN));
     900:	4a0a      	ldr	r2, [pc, #40]	; (92c <GclkInit+0x8c>)
     902:	605a      	str	r2, [r3, #4]
}
     904:	bd10      	pop	{r4, pc}
     906:	46c0      	nop			; (mov r8, r8)
     908:	40000800 	.word	0x40000800
     90c:	41004000 	.word	0x41004000
     910:	00806024 	.word	0x00806024
     914:	00806028 	.word	0x00806028
     918:	000003ff 	.word	0x000003ff
     91c:	000001ff 	.word	0x000001ff
     920:	00000522 	.word	0x00000522
     924:	000005a2 	.word	0x000005a2
     928:	40000c00 	.word	0x40000c00
     92c:	00010700 	.word	0x00010700

00000930 <RtcInit>:

void RtcInit() {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(2) | GCLK_GENDIV_DIV(1);
     930:	4b1b      	ldr	r3, [pc, #108]	; (9a0 <RtcInit+0x70>)
     932:	2281      	movs	r2, #129	; 0x81
     934:	0052      	lsls	r2, r2, #1
     936:	609a      	str	r2, [r3, #8]

    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(2) |
     938:	4a1a      	ldr	r2, [pc, #104]	; (9a4 <RtcInit+0x74>)
     93a:	605a      	str	r2, [r3, #4]
                        GCLK_GENCTRL_SRC(GCLK_GENCTRL_SRC_OSC32K) |
                        GCLK_GENCTRL_IDC |
                        GCLK_GENCTRL_RUNSTDBY |
                        GCLK_GENCTRL_GENEN;
    while (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY);
     93c:	001a      	movs	r2, r3
     93e:	7853      	ldrb	r3, [r2, #1]
     940:	b25b      	sxtb	r3, r3
     942:	2b00      	cmp	r3, #0
     944:	dbfb      	blt.n	93e <RtcInit+0xe>

// Configure RTC
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(RTC_GCLK_ID) |
     946:	4a18      	ldr	r2, [pc, #96]	; (9a8 <RtcInit+0x78>)
     948:	4b15      	ldr	r3, [pc, #84]	; (9a0 <RtcInit+0x70>)
     94a:	805a      	strh	r2, [r3, #2]
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    RTC->MODE1.CTRL.reg = RTC_MODE1_CTRL_MODE_COUNT16;
     94c:	2204      	movs	r2, #4
     94e:	4b17      	ldr	r3, [pc, #92]	; (9ac <RtcInit+0x7c>)
     950:	801a      	strh	r2, [r3, #0]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     952:	001a      	movs	r2, r3
     954:	7a93      	ldrb	r3, [r2, #10]
     956:	09db      	lsrs	r3, r3, #7
     958:	d1fc      	bne.n	954 <RtcInit+0x24>

// Prescaler needs to be enabled separately from the mode for some reason
    RTC->MODE1.CTRL.reg |= RTC_MODE1_CTRL_PRESCALER_DIV32;
     95a:	4a14      	ldr	r2, [pc, #80]	; (9ac <RtcInit+0x7c>)
     95c:	8811      	ldrh	r1, [r2, #0]
     95e:	23a0      	movs	r3, #160	; 0xa0
     960:	00db      	lsls	r3, r3, #3
     962:	430b      	orrs	r3, r1
     964:	8013      	strh	r3, [r2, #0]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     966:	7a93      	ldrb	r3, [r2, #10]
     968:	09db      	lsrs	r3, r3, #7
     96a:	d1fc      	bne.n	966 <RtcInit+0x36>

    RTC->MODE1.PER.reg = 998;
     96c:	4a10      	ldr	r2, [pc, #64]	; (9b0 <RtcInit+0x80>)
     96e:	4b0f      	ldr	r3, [pc, #60]	; (9ac <RtcInit+0x7c>)
     970:	829a      	strh	r2, [r3, #20]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     972:	001a      	movs	r2, r3
     974:	7a93      	ldrb	r3, [r2, #10]
     976:	09db      	lsrs	r3, r3, #7
     978:	d1fc      	bne.n	974 <RtcInit+0x44>

    RTC->MODE1.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_ADDR(0x10);
     97a:	4b0c      	ldr	r3, [pc, #48]	; (9ac <RtcInit+0x7c>)
     97c:	8859      	ldrh	r1, [r3, #2]
     97e:	4a0d      	ldr	r2, [pc, #52]	; (9b4 <RtcInit+0x84>)
     980:	430a      	orrs	r2, r1
     982:	805a      	strh	r2, [r3, #2]

    RTC->MODE1.INTENSET.reg = RTC_MODE1_INTENSET_OVF;
     984:	2280      	movs	r2, #128	; 0x80
     986:	71da      	strb	r2, [r3, #7]

    RTC->MODE1.CTRL.bit.ENABLE = 1;
     988:	8819      	ldrh	r1, [r3, #0]
     98a:	2202      	movs	r2, #2
     98c:	430a      	orrs	r2, r1
     98e:	801a      	strh	r2, [r3, #0]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     990:	001a      	movs	r2, r3
     992:	7a93      	ldrb	r3, [r2, #10]
     994:	09db      	lsrs	r3, r3, #7
     996:	d1fc      	bne.n	992 <RtcInit+0x62>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     998:	2208      	movs	r2, #8
     99a:	4b07      	ldr	r3, [pc, #28]	; (9b8 <RtcInit+0x88>)
     99c:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(RTC_IRQn);
}
     99e:	4770      	bx	lr
     9a0:	40000c00 	.word	0x40000c00
     9a4:	00230002 	.word	0x00230002
     9a8:	00004204 	.word	0x00004204
     9ac:	40001400 	.word	0x40001400
     9b0:	000003e6 	.word	0x000003e6
     9b4:	00004010 	.word	0x00004010
     9b8:	e000e100 	.word	0xe000e100

000009bc <gclkEnable>:


void gclkEnable(u32_t id, u32_t src, u32_t div) {
     9bc:	b510      	push	{r4, lr}
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
     9be:	230f      	movs	r3, #15
     9c0:	4018      	ands	r0, r3
     9c2:	0212      	lsls	r2, r2, #8
     9c4:	4b07      	ldr	r3, [pc, #28]	; (9e4 <gclkEnable+0x28>)
     9c6:	401a      	ands	r2, r3
     9c8:	4302      	orrs	r2, r0
     9ca:	4c07      	ldr	r4, [pc, #28]	; (9e8 <gclkEnable+0x2c>)
     9cc:	60a2      	str	r2, [r4, #8]
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     9ce:	0209      	lsls	r1, r1, #8
     9d0:	23f8      	movs	r3, #248	; 0xf8
     9d2:	015b      	lsls	r3, r3, #5
     9d4:	4019      	ands	r1, r3
     9d6:	2380      	movs	r3, #128	; 0x80
     9d8:	025b      	lsls	r3, r3, #9
     9da:	4319      	orrs	r1, r3
     9dc:	4308      	orrs	r0, r1
     9de:	6060      	str	r0, [r4, #4]
}
     9e0:	bd10      	pop	{r4, pc}
     9e2:	46c0      	nop			; (mov r8, r8)
     9e4:	00ffff00 	.word	0x00ffff00
     9e8:	40000c00 	.word	0x40000c00

000009ec <delayInit>:


void delayInit(void) {
    cycles_per_ms = 48000000UL;
    cycles_per_ms /= 1000;
     9ec:	4b04      	ldr	r3, [pc, #16]	; (a00 <delayInit+0x14>)
     9ee:	4a05      	ldr	r2, [pc, #20]	; (a04 <delayInit+0x18>)
     9f0:	601a      	str	r2, [r3, #0]
    cycles_per_us = cycles_per_ms / 1000;
     9f2:	2230      	movs	r2, #48	; 0x30
     9f4:	605a      	str	r2, [r3, #4]

    SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     9f6:	3a2b      	subs	r2, #43	; 0x2b
     9f8:	4b03      	ldr	r3, [pc, #12]	; (a08 <delayInit+0x1c>)
     9fa:	601a      	str	r2, [r3, #0]
}
     9fc:	4770      	bx	lr
     9fe:	46c0      	nop			; (mov r8, r8)
     a00:	20000004 	.word	0x20000004
     a04:	0000bb80 	.word	0x0000bb80
     a08:	e000e010 	.word	0xe000e010

00000a0c <delay_us>:
/**
 * \brief Delay loop to delay at least n number of microseconds
 *
 * \param n  Number of microseconds to wait
 */
void delay_us(uint32_t n) {
     a0c:	b530      	push	{r4, r5, lr}
    while (n--) {
        /* Devide up to blocks of 10u */
        delay_cycles(cycles_per_us);
     a0e:	4b08      	ldr	r3, [pc, #32]	; (a30 <delay_us+0x24>)
     a10:	685c      	ldr	r4, [r3, #4]


static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
     a12:	4a08      	ldr	r2, [pc, #32]	; (a34 <delay_us+0x28>)
        SysTick->VAL = 0;
     a14:	2500      	movs	r5, #0

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     a16:	2180      	movs	r1, #128	; 0x80
     a18:	0249      	lsls	r1, r1, #9
 * \brief Delay loop to delay at least n number of microseconds
 *
 * \param n  Number of microseconds to wait
 */
void delay_us(uint32_t n) {
    while (n--) {
     a1a:	e006      	b.n	a2a <delay_us+0x1e>



static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
     a1c:	2c00      	cmp	r4, #0
     a1e:	d004      	beq.n	a2a <delay_us+0x1e>
        SysTick->LOAD = n;
     a20:	6054      	str	r4, [r2, #4]
        SysTick->VAL = 0;
     a22:	6095      	str	r5, [r2, #8]

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     a24:	6813      	ldr	r3, [r2, #0]
     a26:	420b      	tst	r3, r1
     a28:	d0fc      	beq.n	a24 <delay_us+0x18>
     a2a:	3801      	subs	r0, #1
     a2c:	d2f6      	bcs.n	a1c <delay_us+0x10>
        /* Devide up to blocks of 10u */
        delay_cycles(cycles_per_us);
    }
}
     a2e:	bd30      	pop	{r4, r5, pc}
     a30:	20000004 	.word	0x20000004
     a34:	e000e010 	.word	0xe000e010

00000a38 <delay_ms>:
/**
 * \brief Delay loop to delay at least n number of milliseconds
 *
 * \param n  Number of milliseconds to wait
 */
void delay_ms(uint32_t n) {
     a38:	b530      	push	{r4, r5, lr}
    while (n--) {
        /* Devide up to blocks of 1ms */
        delay_cycles(cycles_per_ms);
     a3a:	4b08      	ldr	r3, [pc, #32]	; (a5c <delay_ms+0x24>)
     a3c:	681c      	ldr	r4, [r3, #0]


static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
     a3e:	4a08      	ldr	r2, [pc, #32]	; (a60 <delay_ms+0x28>)
        SysTick->VAL = 0;
     a40:	2500      	movs	r5, #0

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     a42:	2180      	movs	r1, #128	; 0x80
     a44:	0249      	lsls	r1, r1, #9
 * \brief Delay loop to delay at least n number of milliseconds
 *
 * \param n  Number of milliseconds to wait
 */
void delay_ms(uint32_t n) {
    while (n--) {
     a46:	e006      	b.n	a56 <delay_ms+0x1e>



static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
     a48:	2c00      	cmp	r4, #0
     a4a:	d004      	beq.n	a56 <delay_ms+0x1e>
        SysTick->LOAD = n;
     a4c:	6054      	str	r4, [r2, #4]
        SysTick->VAL = 0;
     a4e:	6095      	str	r5, [r2, #8]

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     a50:	6813      	ldr	r3, [r2, #0]
     a52:	420b      	tst	r3, r1
     a54:	d0fc      	beq.n	a50 <delay_ms+0x18>
     a56:	3801      	subs	r0, #1
     a58:	d2f6      	bcs.n	a48 <delay_ms+0x10>
        /* Devide up to blocks of 1ms */
        delay_cycles(cycles_per_ms);
    }
}
     a5a:	bd30      	pop	{r4, r5, pc}
     a5c:	20000004 	.word	0x20000004
     a60:	e000e010 	.word	0xe000e010

00000a64 <RTC_Handler>:


volatile uint32_t time_ms = 0;

void RTC_Handler(void) {
    time_ms += 1000;
     a64:	4a05      	ldr	r2, [pc, #20]	; (a7c <RTC_Handler+0x18>)
     a66:	6813      	ldr	r3, [r2, #0]
     a68:	21fa      	movs	r1, #250	; 0xfa
     a6a:	0089      	lsls	r1, r1, #2
     a6c:	468c      	mov	ip, r1
     a6e:	4463      	add	r3, ip
     a70:	6013      	str	r3, [r2, #0]
    RTC->MODE1.INTFLAG.reg = 0xFF;
     a72:	22ff      	movs	r2, #255	; 0xff
     a74:	4b02      	ldr	r3, [pc, #8]	; (a80 <RTC_Handler+0x1c>)
     a76:	721a      	strb	r2, [r3, #8]
}
     a78:	4770      	bx	lr
     a7a:	46c0      	nop			; (mov r8, r8)
     a7c:	2000045c 	.word	0x2000045c
     a80:	40001400 	.word	0x40001400

00000a84 <millis>:

uint32_t millis(void) {
    uint32_t ms;
    ATOMIC_SECTION_ENTER
     a84:	f3ef 8110 	mrs	r1, PRIMASK
     a88:	b672      	cpsid	i
    ms = time_ms + RTC->MODE1.COUNT.reg;
     a8a:	4a0a      	ldr	r2, [pc, #40]	; (ab4 <millis+0x30>)
     a8c:	8a10      	ldrh	r0, [r2, #16]
     a8e:	b280      	uxth	r0, r0
     a90:	4b09      	ldr	r3, [pc, #36]	; (ab8 <millis+0x34>)
     a92:	681b      	ldr	r3, [r3, #0]
    if (RTC->MODE1.INTFLAG.bit.OVF)
     a94:	7a12      	ldrb	r2, [r2, #8]
     a96:	09d2      	lsrs	r2, r2, #7
}

uint32_t millis(void) {
    uint32_t ms;
    ATOMIC_SECTION_ENTER
    ms = time_ms + RTC->MODE1.COUNT.reg;
     a98:	18c0      	adds	r0, r0, r3
    if (RTC->MODE1.INTFLAG.bit.OVF)
     a9a:	2a00      	cmp	r2, #0
     a9c:	d007      	beq.n	aae <millis+0x2a>
        ms = time_ms + RTC->MODE1.COUNT.reg + 1000;
     a9e:	4b05      	ldr	r3, [pc, #20]	; (ab4 <millis+0x30>)
     aa0:	8a1a      	ldrh	r2, [r3, #16]
     aa2:	4b05      	ldr	r3, [pc, #20]	; (ab8 <millis+0x34>)
     aa4:	681b      	ldr	r3, [r3, #0]
     aa6:	20fa      	movs	r0, #250	; 0xfa
     aa8:	0080      	lsls	r0, r0, #2
     aaa:	1818      	adds	r0, r3, r0
     aac:	1810      	adds	r0, r2, r0
    ATOMIC_SECTION_LEAVE
     aae:	f381 8810 	msr	PRIMASK, r1
    return ms;
}
     ab2:	4770      	bx	lr
     ab4:	40001400 	.word	0x40001400
     ab8:	2000045c 	.word	0x2000045c

00000abc <TC4Init>:

void TC4Init() {

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC4_GCLK_ID) |
     abc:	4a0d      	ldr	r2, [pc, #52]	; (af4 <TC4Init+0x38>)
     abe:	4b0e      	ldr	r3, [pc, #56]	; (af8 <TC4Init+0x3c>)
     ac0:	805a      	strh	r2, [r3, #2]
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC4;
     ac2:	4a0e      	ldr	r2, [pc, #56]	; (afc <TC4Init+0x40>)
     ac4:	6a13      	ldr	r3, [r2, #32]
     ac6:	2180      	movs	r1, #128	; 0x80
     ac8:	0149      	lsls	r1, r1, #5
     aca:	430b      	orrs	r3, r1
     acc:	6213      	str	r3, [r2, #32]

    TC4->COUNT8.CTRLA.reg = TC_CTRLA_MODE_COUNT8 |
     ace:	4b0c      	ldr	r3, [pc, #48]	; (b00 <TC4Init+0x44>)
     ad0:	4a0c      	ldr	r2, [pc, #48]	; (b04 <TC4Init+0x48>)
     ad2:	801a      	strh	r2, [r3, #0]
                            TC_CTRLA_RUNSTDBY |
                            TC_CTRLA_PRESCALER_DIV2;
    TC4->COUNT8.PER.reg = 0x50;
     ad4:	2250      	movs	r2, #80	; 0x50
     ad6:	751a      	strb	r2, [r3, #20]

    TC4->COUNT8.INTENSET.reg = TC_INTENSET_OVF;
     ad8:	3a4f      	subs	r2, #79	; 0x4f
     ada:	735a      	strb	r2, [r3, #13]

    TC4->COUNT8.EVCTRL.reg = TC_EVCTRL_OVFEO;
     adc:	32ff      	adds	r2, #255	; 0xff
     ade:	815a      	strh	r2, [r3, #10]

    TC4->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
     ae0:	8819      	ldrh	r1, [r3, #0]
     ae2:	3afe      	subs	r2, #254	; 0xfe
     ae4:	430a      	orrs	r2, r1
     ae6:	801a      	strh	r2, [r3, #0]
     ae8:	2280      	movs	r2, #128	; 0x80
     aea:	0312      	lsls	r2, r2, #12
     aec:	4b06      	ldr	r3, [pc, #24]	; (b08 <TC4Init+0x4c>)
     aee:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(TC4_IRQn);
}
     af0:	4770      	bx	lr
     af2:	46c0      	nop			; (mov r8, r8)
     af4:	0000421c 	.word	0x0000421c
     af8:	40000c00 	.word	0x40000c00
     afc:	40000400 	.word	0x40000400
     b00:	42003000 	.word	0x42003000
     b04:	00000904 	.word	0x00000904
     b08:	e000e100 	.word	0xe000e100

00000b0c <TC4_Handler>:

void TC4_Handler( void ) {
    TC4->COUNT8.INTFLAG.reg = 0xFF;
     b0c:	22ff      	movs	r2, #255	; 0xff
     b0e:	4b03      	ldr	r3, [pc, #12]	; (b1c <TC4_Handler+0x10>)
     b10:	739a      	strb	r2, [r3, #14]
    takeSample = true;
     b12:	3afe      	subs	r2, #254	; 0xfe
     b14:	4b02      	ldr	r3, [pc, #8]	; (b20 <TC4_Handler+0x14>)
     b16:	701a      	strb	r2, [r3, #0]
}
     b18:	4770      	bx	lr
     b1a:	46c0      	nop			; (mov r8, r8)
     b1c:	42003000 	.word	0x42003000
     b20:	20000460 	.word	0x20000460

00000b24 <TC5_Handler>:

    NVIC_EnableIRQ(TC5_IRQn);
}

void TC5_Handler( void ) {
    TC5->COUNT8.INTFLAG.reg = 0xFF;
     b24:	22ff      	movs	r2, #255	; 0xff
     b26:	4b03      	ldr	r3, [pc, #12]	; (b34 <TC5_Handler+0x10>)
     b28:	739a      	strb	r2, [r3, #14]
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
}


inline static void pinToggle(Pin p) {
    PORT->Group[p.group].OUTTGL.reg = (1<<p.pin);
     b2a:	2280      	movs	r2, #128	; 0x80
     b2c:	0392      	lsls	r2, r2, #14
     b2e:	4b02      	ldr	r3, [pc, #8]	; (b38 <TC5_Handler+0x14>)
     b30:	61da      	str	r2, [r3, #28]
    pinToggle(buzzerPin);
     b32:	4770      	bx	lr
     b34:	42003400 	.word	0x42003400
     b38:	41004400 	.word	0x41004400

00000b3c <dmaInit>:
#include <util.h>

DMA_DESC_ALIGN DmacDescriptor dma_descriptors[12];
DMA_DESC_ALIGN DmacDescriptor dma_descriptors_wb[12];

void dmaInit() {
     b3c:	b570      	push	{r4, r5, r6, lr}
	memset(&dma_descriptors, 0, sizeof(dma_descriptors));
     b3e:	4d11      	ldr	r5, [pc, #68]	; (b84 <dmaInit+0x48>)
     b40:	22c0      	movs	r2, #192	; 0xc0
     b42:	2100      	movs	r1, #0
     b44:	0028      	movs	r0, r5
     b46:	4e10      	ldr	r6, [pc, #64]	; (b88 <dmaInit+0x4c>)
     b48:	47b0      	blx	r6
	memset(&dma_descriptors_wb, 0, sizeof(dma_descriptors_wb));
     b4a:	4c10      	ldr	r4, [pc, #64]	; (b8c <dmaInit+0x50>)
     b4c:	22c0      	movs	r2, #192	; 0xc0
     b4e:	2100      	movs	r1, #0
     b50:	0020      	movs	r0, r4
     b52:	47b0      	blx	r6

	PM->AHBMASK.reg |= PM_AHBMASK_DMAC;
     b54:	4b0e      	ldr	r3, [pc, #56]	; (b90 <dmaInit+0x54>)
     b56:	6959      	ldr	r1, [r3, #20]
     b58:	2220      	movs	r2, #32
     b5a:	430a      	orrs	r2, r1
     b5c:	615a      	str	r2, [r3, #20]
	PM->APBBMASK.reg |= PM_APBBMASK_DMAC;
     b5e:	69d9      	ldr	r1, [r3, #28]
     b60:	2210      	movs	r2, #16
     b62:	430a      	orrs	r2, r1
     b64:	61da      	str	r2, [r3, #28]

	DMAC->CTRL.bit.DMAENABLE = 0;
     b66:	4b0b      	ldr	r3, [pc, #44]	; (b94 <dmaInit+0x58>)
     b68:	881a      	ldrh	r2, [r3, #0]
     b6a:	2102      	movs	r1, #2
     b6c:	438a      	bics	r2, r1
     b6e:	801a      	strh	r2, [r3, #0]
	DMAC->CTRL.bit.SWRST = 1;
     b70:	8819      	ldrh	r1, [r3, #0]
     b72:	2201      	movs	r2, #1
     b74:	430a      	orrs	r2, r1
     b76:	801a      	strh	r2, [r3, #0]

	DMAC->BASEADDR.reg = (unsigned) &dma_descriptors;
     b78:	635d      	str	r5, [r3, #52]	; 0x34
	DMAC->WRBADDR.reg = (unsigned) &dma_descriptors_wb;
     b7a:	639c      	str	r4, [r3, #56]	; 0x38

	DMAC->CTRL.reg = DMAC_CTRL_DMAENABLE | DMAC_CTRL_LVLEN(0xf);
     b7c:	4a06      	ldr	r2, [pc, #24]	; (b98 <dmaInit+0x5c>)
     b7e:	801a      	strh	r2, [r3, #0]
}
     b80:	bd70      	pop	{r4, r5, r6, pc}
     b82:	46c0      	nop			; (mov r8, r8)
     b84:	20000530 	.word	0x20000530
     b88:	00002785 	.word	0x00002785
     b8c:	20000470 	.word	0x20000470
     b90:	40000400 	.word	0x40000400
     b94:	41004800 	.word	0x41004800
     b98:	00000f02 	.word	0x00000f02

00000b9c <readMS5803AdcResults>:
#include <MS5803.h>
#include <boardDefines.h>
#include <math.h>


u32_t readMS5803AdcResults() {
     b9c:	b5f0      	push	{r4, r5, r6, r7, lr}
     b9e:	464f      	mov	r7, r9
     ba0:	4646      	mov	r6, r8
     ba2:	b4c0      	push	{r6, r7}
     ba4:	b083      	sub	sp, #12
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     ba6:	4e16      	ldr	r6, [pc, #88]	; (c00 <readMS5803AdcResults+0x64>)
     ba8:	2380      	movs	r3, #128	; 0x80
     baa:	021b      	lsls	r3, r3, #8
     bac:	4699      	mov	r9, r3
     bae:	6173      	str	r3, [r6, #20]
    pinLow(cs_baro);
//    dummy_rx = spiDataTransfer(SPI1, cmdAdcRead_);
//    u8_t _byte1 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte2 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte3 = spiDataTransfer(SPI1,dummy_tx);
    byteOut(spi2SCK,spi2MOSI, cmdAdcRead_);
     bb0:	4c14      	ldr	r4, [pc, #80]	; (c04 <readMS5803AdcResults+0x68>)
     bb2:	2300      	movs	r3, #0
     bb4:	9300      	str	r3, [sp, #0]
     bb6:	6822      	ldr	r2, [r4, #0]
     bb8:	6863      	ldr	r3, [r4, #4]
     bba:	68a0      	ldr	r0, [r4, #8]
     bbc:	68e1      	ldr	r1, [r4, #12]
     bbe:	4d12      	ldr	r5, [pc, #72]	; (c08 <readMS5803AdcResults+0x6c>)
     bc0:	47a8      	blx	r5
    u8_t _byte1 = byteIn(spi2SCK,spi2MISO);
     bc2:	6922      	ldr	r2, [r4, #16]
     bc4:	6963      	ldr	r3, [r4, #20]
     bc6:	68a0      	ldr	r0, [r4, #8]
     bc8:	68e1      	ldr	r1, [r4, #12]
     bca:	4f10      	ldr	r7, [pc, #64]	; (c0c <readMS5803AdcResults+0x70>)
     bcc:	47b8      	blx	r7
     bce:	4680      	mov	r8, r0
    u8_t _byte2 = byteIn(spi2SCK,spi2MISO);
     bd0:	6922      	ldr	r2, [r4, #16]
     bd2:	6963      	ldr	r3, [r4, #20]
     bd4:	68a0      	ldr	r0, [r4, #8]
     bd6:	68e1      	ldr	r1, [r4, #12]
     bd8:	47b8      	blx	r7
     bda:	0005      	movs	r5, r0
    u8_t _byte3 = byteIn(spi2SCK,spi2MISO);
     bdc:	6922      	ldr	r2, [r4, #16]
     bde:	6963      	ldr	r3, [r4, #20]
     be0:	68a0      	ldr	r0, [r4, #8]
     be2:	68e1      	ldr	r1, [r4, #12]
     be4:	47b8      	blx	r7
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     be6:	464b      	mov	r3, r9
     be8:	61b3      	str	r3, [r6, #24]
    pinHigh(cs_baro);

    u32_t _receive = (_byte1 << 16) | (_byte2 << 8) | (_byte3);
    return _receive;
     bea:	4643      	mov	r3, r8
     bec:	041e      	lsls	r6, r3, #16
     bee:	022d      	lsls	r5, r5, #8
     bf0:	4335      	orrs	r5, r6
     bf2:	4328      	orrs	r0, r5
}
     bf4:	b003      	add	sp, #12
     bf6:	bc0c      	pop	{r2, r3}
     bf8:	4690      	mov	r8, r2
     bfa:	4699      	mov	r9, r3
     bfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
     bfe:	46c0      	nop			; (mov r8, r8)
     c00:	41004400 	.word	0x41004400
     c04:	00002940 	.word	0x00002940
     c08:	000007f9 	.word	0x000007f9
     c0c:	00000849 	.word	0x00000849

00000c10 <ConvertPressureTemperature>:

void ConvertPressureTemperature(Barometer *my_barometer) {
     c10:	b5f0      	push	{r4, r5, r6, r7, lr}
     c12:	464f      	mov	r7, r9
     c14:	4646      	mov	r6, r8
     c16:	b4c0      	push	{r6, r7}
     c18:	b08b      	sub	sp, #44	; 0x2c
     c1a:	0007      	movs	r7, r0
    volatile const u16_t C1 = my_barometer->coefficients_[0];
     c1c:	8803      	ldrh	r3, [r0, #0]
     c1e:	251e      	movs	r5, #30
     c20:	aa02      	add	r2, sp, #8
     c22:	4694      	mov	ip, r2
     c24:	4465      	add	r5, ip
     c26:	802b      	strh	r3, [r5, #0]
    volatile const u16_t C2 = my_barometer->coefficients_[1];
     c28:	8843      	ldrh	r3, [r0, #2]
     c2a:	8393      	strh	r3, [r2, #28]
    volatile const u16_t C3 = my_barometer->coefficients_[2];
     c2c:	8883      	ldrh	r3, [r0, #4]
     c2e:	8353      	strh	r3, [r2, #26]
    volatile const u16_t C4 = my_barometer->coefficients_[3];
     c30:	88c3      	ldrh	r3, [r0, #6]
     c32:	ae08      	add	r6, sp, #32
     c34:	8033      	strh	r3, [r6, #0]
    volatile const u16_t C5 = my_barometer->coefficients_[4];
     c36:	8903      	ldrh	r3, [r0, #8]
     c38:	2216      	movs	r2, #22
     c3a:	4462      	add	r2, ip
     c3c:	8013      	strh	r3, [r2, #0]
    volatile const u16_t C6 = my_barometer->coefficients_[5];
     c3e:	8941      	ldrh	r1, [r0, #10]
     c40:	ab07      	add	r3, sp, #28
     c42:	8019      	strh	r1, [r3, #0]

    // calculate 1st order pressure and temperature (MS5607 1st order algorithm)
    const  int32_t dT = (my_barometer->rawTempatureData) - ((int32_t)C5 << 8);
     c44:	8814      	ldrh	r4, [r2, #0]
    my_barometer->temperatureCelcus  = 2000 + (((int64_t)dT * C6) >> 32) ;
     c46:	0224      	lsls	r4, r4, #8
     c48:	6902      	ldr	r2, [r0, #16]
     c4a:	1b14      	subs	r4, r2, r4
     c4c:	17e2      	asrs	r2, r4, #31
     c4e:	0011      	movs	r1, r2
     c50:	8818      	ldrh	r0, [r3, #0]
     c52:	b280      	uxth	r0, r0
     c54:	4b2b      	ldr	r3, [pc, #172]	; (d04 <ConvertPressureTemperature+0xf4>)
     c56:	4699      	mov	r9, r3
     c58:	0022      	movs	r2, r4
     c5a:	9101      	str	r1, [sp, #4]
     c5c:	000b      	movs	r3, r1
     c5e:	2100      	movs	r1, #0
     c60:	47c8      	blx	r9
     c62:	23fa      	movs	r3, #250	; 0xfa
     c64:	00db      	lsls	r3, r3, #3
     c66:	469c      	mov	ip, r3
     c68:	4461      	add	r1, ip
     c6a:	6179      	str	r1, [r7, #20]

    volatile const  int64_t OFF   = ((int64_t)C2 << 16) + (((C4 * (int64_t)dT)) >> 7);
     c6c:	ab02      	add	r3, sp, #8
     c6e:	8b9b      	ldrh	r3, [r3, #28]
     c70:	b29b      	uxth	r3, r3
     c72:	4698      	mov	r8, r3
     c74:	8830      	ldrh	r0, [r6, #0]
     c76:	b280      	uxth	r0, r0
     c78:	0022      	movs	r2, r4
     c7a:	9b01      	ldr	r3, [sp, #4]
     c7c:	2100      	movs	r1, #0
     c7e:	47c8      	blx	r9
     c80:	064e      	lsls	r6, r1, #25
     c82:	09c2      	lsrs	r2, r0, #7
     c84:	4332      	orrs	r2, r6
     c86:	11cb      	asrs	r3, r1, #7
     c88:	2100      	movs	r1, #0
     c8a:	4646      	mov	r6, r8
     c8c:	0430      	lsls	r0, r6, #16
     c8e:	1812      	adds	r2, r2, r0
     c90:	414b      	adcs	r3, r1
     c92:	9204      	str	r2, [sp, #16]
     c94:	9305      	str	r3, [sp, #20]
    volatile const  int64_t SENS  =  ((int64_t)C1 << 15) + (((C3 * (int64_t)dT)) >> 8);
     c96:	882d      	ldrh	r5, [r5, #0]
     c98:	b2ad      	uxth	r5, r5
     c9a:	aa02      	add	r2, sp, #8
     c9c:	8b50      	ldrh	r0, [r2, #26]
     c9e:	b280      	uxth	r0, r0
     ca0:	0022      	movs	r2, r4
     ca2:	9b01      	ldr	r3, [sp, #4]
     ca4:	2100      	movs	r1, #0
     ca6:	47c8      	blx	r9
     ca8:	060c      	lsls	r4, r1, #24
     caa:	0a02      	lsrs	r2, r0, #8
     cac:	4322      	orrs	r2, r4
     cae:	120b      	asrs	r3, r1, #8
     cb0:	2100      	movs	r1, #0
     cb2:	03e8      	lsls	r0, r5, #15
     cb4:	1812      	adds	r2, r2, r0
     cb6:	414b      	adcs	r3, r1
     cb8:	9202      	str	r2, [sp, #8]
     cba:	9303      	str	r3, [sp, #12]
    my_barometer->pressureMbar = (((my_barometer->rawPressureData * SENS) / 2097152) - OFF) / 32768;
     cbc:	9a02      	ldr	r2, [sp, #8]
     cbe:	9b03      	ldr	r3, [sp, #12]
     cc0:	9c04      	ldr	r4, [sp, #16]
     cc2:	9d05      	ldr	r5, [sp, #20]
     cc4:	68f8      	ldr	r0, [r7, #12]
     cc6:	2100      	movs	r1, #0
     cc8:	47c8      	blx	r9
     cca:	17ce      	asrs	r6, r1, #31
     ccc:	02f6      	lsls	r6, r6, #11
     cce:	0af2      	lsrs	r2, r6, #11
     cd0:	2300      	movs	r3, #0
     cd2:	1880      	adds	r0, r0, r2
     cd4:	4159      	adcs	r1, r3
     cd6:	02ce      	lsls	r6, r1, #11
     cd8:	0d42      	lsrs	r2, r0, #21
     cda:	4332      	orrs	r2, r6
     cdc:	154b      	asrs	r3, r1, #21
     cde:	1b12      	subs	r2, r2, r4
     ce0:	41ab      	sbcs	r3, r5
     ce2:	17dc      	asrs	r4, r3, #31
     ce4:	0464      	lsls	r4, r4, #17
     ce6:	0c60      	lsrs	r0, r4, #17
     ce8:	2100      	movs	r1, #0
     cea:	1812      	adds	r2, r2, r0
     cec:	414b      	adcs	r3, r1
     cee:	0011      	movs	r1, r2
     cf0:	045b      	lsls	r3, r3, #17
     cf2:	0bca      	lsrs	r2, r1, #15
     cf4:	431a      	orrs	r2, r3
     cf6:	61fa      	str	r2, [r7, #28]
}
     cf8:	b00b      	add	sp, #44	; 0x2c
     cfa:	bc0c      	pop	{r2, r3}
     cfc:	4690      	mov	r8, r2
     cfe:	4699      	mov	r9, r3
     d00:	bdf0      	pop	{r4, r5, r6, r7, pc}
     d02:	46c0      	nop			; (mov r8, r8)
     d04:	00001341 	.word	0x00001341

00000d08 <pascalToCent>:
    double altFeet = (1-pow((my_barometer->pressurePa/1013.25),(0.190284)))*145366.45;
    my_barometer->heightFeet = (float)altFeet;

}

void pascalToCent(Barometer *my_barometer) {
     d08:	b570      	push	{r4, r5, r6, lr}
     d0a:	0004      	movs	r4, r0
        748275, 767202, 786555, 806356, 826627,
        847395, 868688, 890537, 912974, 936037,
        959766, 984206
    };

    my_barometer->pressurePa = my_barometer->pressureMbar *10;
     d0c:	69c2      	ldr	r2, [r0, #28]
     d0e:	0093      	lsls	r3, r2, #2
     d10:	189b      	adds	r3, r3, r2
     d12:	005b      	lsls	r3, r3, #1
     d14:	6183      	str	r3, [r0, #24]

    if (my_barometer->pressurePa > PA_INIT)
     d16:	4a11      	ldr	r2, [pc, #68]	; (d5c <pascalToCent+0x54>)
     d18:	4293      	cmp	r3, r2
     d1a:	d902      	bls.n	d22 <pascalToCent+0x1a>
        my_barometer->heightCm = lookupTable[0];
     d1c:	4b10      	ldr	r3, [pc, #64]	; (d60 <pascalToCent+0x58>)
     d1e:	6203      	str	r3, [r0, #32]
     d20:	e01a      	b.n	d58 <pascalToCent+0x50>
    else {
        const int32_t inx = (PA_INIT - my_barometer->pressurePa) >> 10;
     d22:	4a0e      	ldr	r2, [pc, #56]	; (d5c <pascalToCent+0x54>)
     d24:	1ad2      	subs	r2, r2, r3
     d26:	0a92      	lsrs	r2, r2, #10
        if (inx >= PZLUT_ENTRIES - 1)
     d28:	2a4b      	cmp	r2, #75	; 0x4b
     d2a:	dd02      	ble.n	d32 <pascalToCent+0x2a>
            my_barometer->heightCm = lookupTable[PZLUT_ENTRIES - 1];
     d2c:	4b0d      	ldr	r3, [pc, #52]	; (d64 <pascalToCent+0x5c>)
     d2e:	6203      	str	r3, [r0, #32]
     d30:	e012      	b.n	d58 <pascalToCent+0x50>
        else {
            const int32_t pa1 = PA_INIT - (inx << 10);
            const int32_t z1 = lookupTable[inx];
     d32:	4d0d      	ldr	r5, [pc, #52]	; (d68 <pascalToCent+0x60>)
     d34:	0091      	lsls	r1, r2, #2
     d36:	1869      	adds	r1, r5, r1
     d38:	6988      	ldr	r0, [r1, #24]
            const int32_t z2 = lookupTable[inx + 1];
            my_barometer->heightCm = (z1 + (((pa1 - my_barometer->pressurePa) * (z2 - z1)) >> 10));
     d3a:	0296      	lsls	r6, r2, #10
     d3c:	4907      	ldr	r1, [pc, #28]	; (d5c <pascalToCent+0x54>)
     d3e:	1b89      	subs	r1, r1, r6
     d40:	1acb      	subs	r3, r1, r3
        if (inx >= PZLUT_ENTRIES - 1)
            my_barometer->heightCm = lookupTable[PZLUT_ENTRIES - 1];
        else {
            const int32_t pa1 = PA_INIT - (inx << 10);
            const int32_t z1 = lookupTable[inx];
            const int32_t z2 = lookupTable[inx + 1];
     d42:	3201      	adds	r2, #1
     d44:	0092      	lsls	r2, r2, #2
     d46:	18aa      	adds	r2, r5, r2
            my_barometer->heightCm = (z1 + (((pa1 - my_barometer->pressurePa) * (z2 - z1)) >> 10));
     d48:	6992      	ldr	r2, [r2, #24]
     d4a:	1a12      	subs	r2, r2, r0
     d4c:	4353      	muls	r3, r2
     d4e:	0a9b      	lsrs	r3, r3, #10
     d50:	1818      	adds	r0, r3, r0
     d52:	4b06      	ldr	r3, [pc, #24]	; (d6c <pascalToCent+0x64>)
     d54:	4798      	blx	r3
     d56:	6220      	str	r0, [r4, #32]
        }
    }
}
     d58:	bd70      	pop	{r4, r5, r6, pc}
     d5a:	46c0      	nop			; (mov r8, r8)
     d5c:	000199cc 	.word	0x000199cc
     d60:	c6e5c000 	.word	0xc6e5c000
     d64:	497048e0 	.word	0x497048e0
     d68:	00002940 	.word	0x00002940
     d6c:	00001f4d 	.word	0x00001f4d

00000d70 <readMS5803Coefficients>:

void readMS5803Coefficients(Barometer *my_barometer) {
     d70:	b5f0      	push	{r4, r5, r6, r7, lr}
     d72:	465f      	mov	r7, fp
     d74:	4656      	mov	r6, sl
     d76:	464d      	mov	r5, r9
     d78:	4644      	mov	r4, r8
     d7a:	b4f0      	push	{r4, r5, r6, r7}
     d7c:	b083      	sub	sp, #12
     d7e:	0007      	movs	r7, r0
     d80:	26a2      	movs	r6, #162	; 0xa2

    u8_t dummy_tx = 0xFF;
    u8_t dummy_rx;

    for (u8_t coeff_num = 0; coeff_num < 6 ; ++coeff_num ) {
        delay_us(600);
     d82:	4b1a      	ldr	r3, [pc, #104]	; (dec <readMS5803Coefficients+0x7c>)
     d84:	469a      	mov	sl, r3
        delay_us(600);
        pinLow(cs_baro);
//      dummy_rx = spiDataTransfer(SPI1, _cmd);
//      u8_t _byte1 = spiDataTransfer(SPI1,dummy_tx);
//      u8_t _byte2 = spiDataTransfer(SPI1,dummy_tx);
        byteOut(spi2SCK,spi2MOSI, _cmd);
     d86:	4c1a      	ldr	r4, [pc, #104]	; (df0 <readMS5803Coefficients+0x80>)

    u8_t dummy_tx = 0xFF;
    u8_t dummy_rx;

    for (u8_t coeff_num = 0; coeff_num < 6 ; ++coeff_num ) {
        delay_us(600);
     d88:	2596      	movs	r5, #150	; 0x96
     d8a:	00ad      	lsls	r5, r5, #2
     d8c:	0028      	movs	r0, r5
     d8e:	47d0      	blx	sl
        u8_t _cmd = MS5803_CMD_PROM_READ + ((coeff_num+1)*2);
        delay_us(600);
     d90:	0028      	movs	r0, r5
     d92:	47d0      	blx	sl
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     d94:	2380      	movs	r3, #128	; 0x80
     d96:	021b      	lsls	r3, r3, #8
     d98:	4699      	mov	r9, r3
     d9a:	4a16      	ldr	r2, [pc, #88]	; (df4 <readMS5803Coefficients+0x84>)
     d9c:	6153      	str	r3, [r2, #20]
        pinLow(cs_baro);
//      dummy_rx = spiDataTransfer(SPI1, _cmd);
//      u8_t _byte1 = spiDataTransfer(SPI1,dummy_tx);
//      u8_t _byte2 = spiDataTransfer(SPI1,dummy_tx);
        byteOut(spi2SCK,spi2MOSI, _cmd);
     d9e:	9600      	str	r6, [sp, #0]
     da0:	6822      	ldr	r2, [r4, #0]
     da2:	6863      	ldr	r3, [r4, #4]
     da4:	68a0      	ldr	r0, [r4, #8]
     da6:	68e1      	ldr	r1, [r4, #12]
     da8:	4d13      	ldr	r5, [pc, #76]	; (df8 <readMS5803Coefficients+0x88>)
     daa:	47a8      	blx	r5
        u8_t _byte1 = byteIn(spi2SCK,spi2MISO);
     dac:	6922      	ldr	r2, [r4, #16]
     dae:	6963      	ldr	r3, [r4, #20]
     db0:	68a0      	ldr	r0, [r4, #8]
     db2:	68e1      	ldr	r1, [r4, #12]
     db4:	4d11      	ldr	r5, [pc, #68]	; (dfc <readMS5803Coefficients+0x8c>)
     db6:	47a8      	blx	r5
     db8:	4680      	mov	r8, r0
        u8_t _byte2 = byteIn(spi2SCK,spi2MISO);
     dba:	6922      	ldr	r2, [r4, #16]
     dbc:	6963      	ldr	r3, [r4, #20]
     dbe:	68a0      	ldr	r0, [r4, #8]
     dc0:	68e1      	ldr	r1, [r4, #12]
     dc2:	47a8      	blx	r5
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     dc4:	464b      	mov	r3, r9
     dc6:	4a0b      	ldr	r2, [pc, #44]	; (df4 <readMS5803Coefficients+0x84>)
     dc8:	6193      	str	r3, [r2, #24]
        pinHigh(cs_baro);
        my_barometer->coefficients_[coeff_num] = (_byte1 << 8) | _byte2;
     dca:	4643      	mov	r3, r8
     dcc:	021d      	lsls	r5, r3, #8
     dce:	4328      	orrs	r0, r5
     dd0:	8038      	strh	r0, [r7, #0]
     dd2:	3602      	adds	r6, #2
     dd4:	b2f6      	uxtb	r6, r6
     dd6:	3702      	adds	r7, #2
void readMS5803Coefficients(Barometer *my_barometer) {

    u8_t dummy_tx = 0xFF;
    u8_t dummy_rx;

    for (u8_t coeff_num = 0; coeff_num < 6 ; ++coeff_num ) {
     dd8:	2eae      	cmp	r6, #174	; 0xae
     dda:	d1d5      	bne.n	d88 <readMS5803Coefficients+0x18>
        u8_t _byte2 = byteIn(spi2SCK,spi2MISO);
        pinHigh(cs_baro);
        my_barometer->coefficients_[coeff_num] = (_byte1 << 8) | _byte2;
    }

}
     ddc:	b003      	add	sp, #12
     dde:	bc3c      	pop	{r2, r3, r4, r5}
     de0:	4690      	mov	r8, r2
     de2:	4699      	mov	r9, r3
     de4:	46a2      	mov	sl, r4
     de6:	46ab      	mov	fp, r5
     de8:	bdf0      	pop	{r4, r5, r6, r7, pc}
     dea:	46c0      	nop			; (mov r8, r8)
     dec:	00000a0d 	.word	0x00000a0d
     df0:	00002940 	.word	0x00002940
     df4:	41004400 	.word	0x41004400
     df8:	000007f9 	.word	0x000007f9
     dfc:	00000849 	.word	0x00000849

00000e00 <initMS5803Barometer>:

void initMS5803Barometer(Barometer *my_barometer) {
     e00:	b5f0      	push	{r4, r5, r6, r7, lr}
     e02:	b083      	sub	sp, #12
     e04:	0004      	movs	r4, r0
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     e06:	4d10      	ldr	r5, [pc, #64]	; (e48 <initMS5803Barometer+0x48>)
     e08:	2680      	movs	r6, #128	; 0x80
     e0a:	0236      	lsls	r6, r6, #8
     e0c:	616e      	str	r6, [r5, #20]
    u8_t dummy_tx = 0xFF;
    u8_t dummy_rx;

    pinLow(cs_baro);
//   dummy_rx = spiDataTransfer(SPI1, MS5803_CMD_RES);
    byteOut(spi2SCK,spi2MOSI, MS5803_CMD_RES);
     e0e:	490f      	ldr	r1, [pc, #60]	; (e4c <initMS5803Barometer+0x4c>)
     e10:	231e      	movs	r3, #30
     e12:	9300      	str	r3, [sp, #0]
     e14:	680a      	ldr	r2, [r1, #0]
     e16:	684b      	ldr	r3, [r1, #4]
     e18:	6888      	ldr	r0, [r1, #8]
     e1a:	68c9      	ldr	r1, [r1, #12]
     e1c:	4f0c      	ldr	r7, [pc, #48]	; (e50 <initMS5803Barometer+0x50>)
     e1e:	47b8      	blx	r7
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     e20:	61ae      	str	r6, [r5, #24]
    pinHigh(cs_baro);
    delay_ms(200);
     e22:	20c8      	movs	r0, #200	; 0xc8
     e24:	4b0b      	ldr	r3, [pc, #44]	; (e54 <initMS5803Barometer+0x54>)
     e26:	4798      	blx	r3
    readMS5803Coefficients(my_barometer);
     e28:	0020      	movs	r0, r4
     e2a:	4b0b      	ldr	r3, [pc, #44]	; (e58 <initMS5803Barometer+0x58>)
     e2c:	4798      	blx	r3

    my_barometer->heightCm = 4000;
     e2e:	4b0b      	ldr	r3, [pc, #44]	; (e5c <initMS5803Barometer+0x5c>)
     e30:	6223      	str	r3, [r4, #32]
    my_barometer->pressurePa = 10000;
     e32:	4b0b      	ldr	r3, [pc, #44]	; (e60 <initMS5803Barometer+0x60>)
     e34:	61a3      	str	r3, [r4, #24]
    my_barometer->rawPressureData = 4311550;
     e36:	4b0b      	ldr	r3, [pc, #44]	; (e64 <initMS5803Barometer+0x64>)
     e38:	60e3      	str	r3, [r4, #12]
    my_barometer->rawTempatureData = 8387300;
     e3a:	4b0b      	ldr	r3, [pc, #44]	; (e68 <initMS5803Barometer+0x68>)
     e3c:	6123      	str	r3, [r4, #16]
    my_barometer->temperatureCelcus = 2000;
     e3e:	23fa      	movs	r3, #250	; 0xfa
     e40:	00db      	lsls	r3, r3, #3
     e42:	6163      	str	r3, [r4, #20]




}
     e44:	b003      	add	sp, #12
     e46:	bdf0      	pop	{r4, r5, r6, r7, pc}
     e48:	41004400 	.word	0x41004400
     e4c:	00002940 	.word	0x00002940
     e50:	000007f9 	.word	0x000007f9
     e54:	00000a39 	.word	0x00000a39
     e58:	00000d71 	.word	0x00000d71
     e5c:	457a0000 	.word	0x457a0000
     e60:	00002710 	.word	0x00002710
     e64:	0041c9fe 	.word	0x0041c9fe
     e68:	007ffae4 	.word	0x007ffae4

00000e6c <sampleTick>:
#include <boardDefines.h>
#include <MS5803.h>



void sampleTick(Altimeter *my_altimeter) {
     e6c:	b5f0      	push	{r4, r5, r6, r7, lr}
     e6e:	465f      	mov	r7, fp
     e70:	4656      	mov	r6, sl
     e72:	464d      	mov	r5, r9
     e74:	4644      	mov	r4, r8
     e76:	b4f0      	push	{r4, r5, r6, r7}
     e78:	b083      	sub	sp, #12
     e7a:	0004      	movs	r4, r0

    my_altimeter->batV = (0.001906 * adc_read(senseBatPin));
     e7c:	4dbe      	ldr	r5, [pc, #760]	; (1178 <sampleTick+0x30c>)
     e7e:	6828      	ldr	r0, [r5, #0]
     e80:	6869      	ldr	r1, [r5, #4]
     e82:	4ebe      	ldr	r6, [pc, #760]	; (117c <sampleTick+0x310>)
     e84:	47b0      	blx	r6
     e86:	4bbe      	ldr	r3, [pc, #760]	; (1180 <sampleTick+0x314>)
     e88:	4699      	mov	r9, r3
     e8a:	4798      	blx	r3
     e8c:	4bbd      	ldr	r3, [pc, #756]	; (1184 <sampleTick+0x318>)
     e8e:	4698      	mov	r8, r3
     e90:	4abd      	ldr	r2, [pc, #756]	; (1188 <sampleTick+0x31c>)
     e92:	4bbe      	ldr	r3, [pc, #760]	; (118c <sampleTick+0x320>)
     e94:	47c0      	blx	r8
     e96:	4fbe      	ldr	r7, [pc, #760]	; (1190 <sampleTick+0x324>)
     e98:	47b8      	blx	r7
     e9a:	6620      	str	r0, [r4, #96]	; 0x60
    my_altimeter->senseA = adc_read(senseAPin);
     e9c:	68a8      	ldr	r0, [r5, #8]
     e9e:	68e9      	ldr	r1, [r5, #12]
     ea0:	47b0      	blx	r6
     ea2:	2364      	movs	r3, #100	; 0x64
     ea4:	52e0      	strh	r0, [r4, r3]
    my_altimeter->senseB = adc_read(senseBPin);
     ea6:	6928      	ldr	r0, [r5, #16]
     ea8:	6969      	ldr	r1, [r5, #20]
     eaa:	47b0      	blx	r6
     eac:	2366      	movs	r3, #102	; 0x66
     eae:	52e0      	strh	r0, [r4, r3]
    my_altimeter->senseC = adc_read(senseCPin);
     eb0:	69a8      	ldr	r0, [r5, #24]
     eb2:	69e9      	ldr	r1, [r5, #28]
     eb4:	47b0      	blx	r6
     eb6:	2368      	movs	r3, #104	; 0x68
     eb8:	52e0      	strh	r0, [r4, r3]
    my_altimeter->senseD = adc_read(senseDPin);
     eba:	6a28      	ldr	r0, [r5, #32]
     ebc:	6a69      	ldr	r1, [r5, #36]	; 0x24
     ebe:	47b0      	blx	r6
     ec0:	236a      	movs	r3, #106	; 0x6a
     ec2:	52e0      	strh	r0, [r4, r3]




    my_altimeter->myAnalogAccelerometer.analogRaw = adc_read(analogAccelPin);
     ec4:	6aa8      	ldr	r0, [r5, #40]	; 0x28
     ec6:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
     ec8:	47b0      	blx	r6
     eca:	2358      	movs	r3, #88	; 0x58
     ecc:	52e0      	strh	r0, [r4, r3]
    my_altimeter->myAnalogAccelerometer.analogAccel = (my_altimeter->myAnalogAccelerometer.analogRaw - 3878) * -0.0227;
     ece:	4bb1      	ldr	r3, [pc, #708]	; (1194 <sampleTick+0x328>)
     ed0:	469c      	mov	ip, r3
     ed2:	4460      	add	r0, ip
     ed4:	47c8      	blx	r9
     ed6:	4ab0      	ldr	r2, [pc, #704]	; (1198 <sampleTick+0x32c>)
     ed8:	4bb0      	ldr	r3, [pc, #704]	; (119c <sampleTick+0x330>)
     eda:	47c0      	blx	r8
     edc:	47b8      	blx	r7
     ede:	65e0      	str	r0, [r4, #92]	; 0x5c
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     ee0:	4eaf      	ldr	r6, [pc, #700]	; (11a0 <sampleTick+0x334>)
     ee2:	2380      	movs	r3, #128	; 0x80
     ee4:	021b      	lsls	r3, r3, #8
     ee6:	4698      	mov	r8, r3
     ee8:	6173      	str	r3, [r6, #20]
    uint8_t dummy_Tx = 0xFF;
    uint8_t dummy_rx;

    pinLow(cs_baro);
    // dummy_rx = spiDataTransfer(SPI2, 0x50);
    byteOut(spi2SCK,spi2MOSI, 0x50);
     eea:	2350      	movs	r3, #80	; 0x50
     eec:	9300      	str	r3, [sp, #0]
     eee:	6b2a      	ldr	r2, [r5, #48]	; 0x30
     ef0:	6b6b      	ldr	r3, [r5, #52]	; 0x34
     ef2:	6ba8      	ldr	r0, [r5, #56]	; 0x38
     ef4:	6be9      	ldr	r1, [r5, #60]	; 0x3c
     ef6:	4fab      	ldr	r7, [pc, #684]	; (11a4 <sampleTick+0x338>)
     ef8:	46b9      	mov	r9, r7
     efa:	47b8      	blx	r7
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     efc:	4643      	mov	r3, r8
     efe:	61b3      	str	r3, [r6, #24]
    pinHigh(cs_baro);
    delay_us(500);
     f00:	20fa      	movs	r0, #250	; 0xfa
     f02:	0040      	lsls	r0, r0, #1
     f04:	4ba8      	ldr	r3, [pc, #672]	; (11a8 <sampleTick+0x33c>)
     f06:	4798      	blx	r3
    my_altimeter->myBarometer.rawTempatureData = readMS5803AdcResults();
     f08:	4ba8      	ldr	r3, [pc, #672]	; (11ac <sampleTick+0x340>)
     f0a:	4798      	blx	r3
     f0c:	6120      	str	r0, [r4, #16]
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     f0e:	4643      	mov	r3, r8
     f10:	6173      	str	r3, [r6, #20]

    pinLow(cs_baro);
    //  dummy_rx = spiDataTransfer(SPI2, 0x42);
    byteOut(spi2SCK,spi2MOSI, 0x42);
     f12:	2742      	movs	r7, #66	; 0x42
     f14:	9700      	str	r7, [sp, #0]
     f16:	6b2a      	ldr	r2, [r5, #48]	; 0x30
     f18:	6b6b      	ldr	r3, [r5, #52]	; 0x34
     f1a:	6ba8      	ldr	r0, [r5, #56]	; 0x38
     f1c:	6be9      	ldr	r1, [r5, #60]	; 0x3c
     f1e:	47c8      	blx	r9
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     f20:	4643      	mov	r3, r8
     f22:	61b3      	str	r3, [r6, #24]
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     f24:	2380      	movs	r3, #128	; 0x80
     f26:	00db      	lsls	r3, r3, #3
     f28:	469b      	mov	fp, r3
     f2a:	2394      	movs	r3, #148	; 0x94
     f2c:	465a      	mov	r2, fp
     f2e:	50f2      	str	r2, [r6, r3]
    pinHigh(cs_baro);

// Accel data
    pinLow(cs_accel);
    dummy_rx = spiDataTransfer(SPI0, 0x80 | 0x02);
     f30:	2182      	movs	r1, #130	; 0x82
     f32:	2000      	movs	r0, #0
     f34:	4d9e      	ldr	r5, [pc, #632]	; (11b0 <sampleTick+0x344>)
     f36:	47a8      	blx	r5
    my_altimeter->myIMU.accelXLow = spiDataTransfer(SPI0,dummy_Tx);
     f38:	21ff      	movs	r1, #255	; 0xff
     f3a:	2000      	movs	r0, #0
     f3c:	47a8      	blx	r5
     f3e:	2341      	movs	r3, #65	; 0x41
     f40:	4698      	mov	r8, r3
     f42:	54e0      	strb	r0, [r4, r3]
    my_altimeter->myIMU.accelXHigh = spiDataTransfer(SPI0,dummy_Tx);
     f44:	21ff      	movs	r1, #255	; 0xff
     f46:	2000      	movs	r0, #0
     f48:	47a8      	blx	r5
     f4a:	2340      	movs	r3, #64	; 0x40
     f4c:	469a      	mov	sl, r3
     f4e:	54e0      	strb	r0, [r4, r3]
    my_altimeter->myIMU.accelYLow = spiDataTransfer(SPI0,dummy_Tx);
     f50:	21ff      	movs	r1, #255	; 0xff
     f52:	2000      	movs	r0, #0
     f54:	47a8      	blx	r5
     f56:	2345      	movs	r3, #69	; 0x45
     f58:	54e0      	strb	r0, [r4, r3]
    my_altimeter->myIMU.accelYHigh = spiDataTransfer(SPI0,dummy_Tx);
     f5a:	21ff      	movs	r1, #255	; 0xff
     f5c:	2000      	movs	r0, #0
     f5e:	47a8      	blx	r5
     f60:	2344      	movs	r3, #68	; 0x44
     f62:	4699      	mov	r9, r3
     f64:	54e0      	strb	r0, [r4, r3]
    my_altimeter->myIMU.accelZLow = spiDataTransfer(SPI0,dummy_Tx);
     f66:	21ff      	movs	r1, #255	; 0xff
     f68:	2000      	movs	r0, #0
     f6a:	47a8      	blx	r5
     f6c:	2349      	movs	r3, #73	; 0x49
     f6e:	54e0      	strb	r0, [r4, r3]
    my_altimeter->myIMU.accelZHigh = spiDataTransfer(SPI0,dummy_Tx);
     f70:	21ff      	movs	r1, #255	; 0xff
     f72:	2000      	movs	r0, #0
     f74:	47a8      	blx	r5
     f76:	2348      	movs	r3, #72	; 0x48
     f78:	54e0      	strb	r0, [r4, r3]
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     f7a:	2298      	movs	r2, #152	; 0x98
     f7c:	4659      	mov	r1, fp
     f7e:	50b1      	str	r1, [r6, r2]
    pinHigh(cs_accel);

    bool negativeX = (my_altimeter->myIMU.accelXHigh & (1<<7)) != 0;
     f80:	4652      	mov	r2, sl
     f82:	5ca0      	ldrb	r0, [r4, r2]
    bool negativeY = (my_altimeter->myIMU.accelYHigh & (1<<7)) != 0;
     f84:	464a      	mov	r2, r9
     f86:	5ca1      	ldrb	r1, [r4, r2]
    bool negativeZ = (my_altimeter->myIMU.accelZHigh & (1<<7)) != 0;
     f88:	5ce2      	ldrb	r2, [r4, r3]

    my_altimeter->myIMU.accelXint = (my_altimeter->myIMU.accelXHigh << 8) | my_altimeter->myIMU.accelXLow;
     f8a:	0203      	lsls	r3, r0, #8
     f8c:	4645      	mov	r5, r8
     f8e:	5d65      	ldrb	r5, [r4, r5]
     f90:	431d      	orrs	r5, r3
     f92:	b22d      	sxth	r5, r5
     f94:	53e5      	strh	r5, [r4, r7]
    my_altimeter->myIMU.accelYint = (my_altimeter->myIMU.accelYHigh << 8) | my_altimeter->myIMU.accelYLow;
     f96:	020b      	lsls	r3, r1, #8
     f98:	2645      	movs	r6, #69	; 0x45
     f9a:	5da6      	ldrb	r6, [r4, r6]
     f9c:	4333      	orrs	r3, r6
     f9e:	b21e      	sxth	r6, r3
     fa0:	2346      	movs	r3, #70	; 0x46
     fa2:	52e6      	strh	r6, [r4, r3]
    my_altimeter->myIMU.accelZint = (my_altimeter->myIMU.accelZHigh << 8) | my_altimeter->myIMU.accelZLow;
     fa4:	0213      	lsls	r3, r2, #8
     fa6:	3707      	adds	r7, #7
     fa8:	5de7      	ldrb	r7, [r4, r7]
     faa:	433b      	orrs	r3, r7
     fac:	b21b      	sxth	r3, r3
     fae:	274a      	movs	r7, #74	; 0x4a
     fb0:	53e3      	strh	r3, [r4, r7]

    if (my_altimeter->myIMU.accelXHigh != 1) {
     fb2:	2801      	cmp	r0, #1
     fb4:	d009      	beq.n	fca <sampleTick+0x15e>
        if (negativeX) {
     fb6:	b240      	sxtb	r0, r0
     fb8:	2800      	cmp	r0, #0
     fba:	da03      	bge.n	fc4 <sampleTick+0x158>
            my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXint | ~((1 << 16) - 1);
            my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXint >> 4;
     fbc:	112d      	asrs	r5, r5, #4
     fbe:	2042      	movs	r0, #66	; 0x42
     fc0:	5225      	strh	r5, [r4, r0]
     fc2:	e002      	b.n	fca <sampleTick+0x15e>
        } else {
            my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXint >> 4;
     fc4:	112d      	asrs	r5, r5, #4
     fc6:	2042      	movs	r0, #66	; 0x42
     fc8:	5225      	strh	r5, [r4, r0]
        }
    }

    if (my_altimeter->myIMU.accelYHigh != 1) {
     fca:	2901      	cmp	r1, #1
     fcc:	d009      	beq.n	fe2 <sampleTick+0x176>
        if (negativeY) {
     fce:	b249      	sxtb	r1, r1
     fd0:	2900      	cmp	r1, #0
     fd2:	da03      	bge.n	fdc <sampleTick+0x170>
            my_altimeter->myIMU.accelYint = my_altimeter->myIMU.accelYint | ~((1 << 16) - 1);
            my_altimeter->myIMU.accelYint = my_altimeter->myIMU.accelYint >> 4;
     fd4:	1136      	asrs	r6, r6, #4
     fd6:	2146      	movs	r1, #70	; 0x46
     fd8:	5266      	strh	r6, [r4, r1]
     fda:	e002      	b.n	fe2 <sampleTick+0x176>
        } else {
            my_altimeter->myIMU.accelYint = my_altimeter->myIMU.accelYint >> 4;
     fdc:	1136      	asrs	r6, r6, #4
     fde:	2146      	movs	r1, #70	; 0x46
     fe0:	5266      	strh	r6, [r4, r1]
        }
    }

    if (my_altimeter->myIMU.accelZHigh != 1) {
     fe2:	2a01      	cmp	r2, #1
     fe4:	d009      	beq.n	ffa <sampleTick+0x18e>
        if (negativeZ) {
     fe6:	b252      	sxtb	r2, r2
     fe8:	2a00      	cmp	r2, #0
     fea:	da03      	bge.n	ff4 <sampleTick+0x188>
            my_altimeter->myIMU.accelZint = my_altimeter->myIMU.accelZint | ~((1 << 16) - 1);
            my_altimeter->myIMU.accelZint = my_altimeter->myIMU.accelZint >> 4;
     fec:	111b      	asrs	r3, r3, #4
     fee:	224a      	movs	r2, #74	; 0x4a
     ff0:	52a3      	strh	r3, [r4, r2]
     ff2:	e002      	b.n	ffa <sampleTick+0x18e>
        } else {
            my_altimeter->myIMU.accelZint = my_altimeter->myIMU.accelZint >> 4;
     ff4:	111b      	asrs	r3, r3, #4
     ff6:	224a      	movs	r2, #74	; 0x4a
     ff8:	52a3      	strh	r3, [r4, r2]
        }
    }

    my_altimeter->myIMU.accelX = my_altimeter->myIMU.accelXint * .00781;
     ffa:	2342      	movs	r3, #66	; 0x42
     ffc:	5ee0      	ldrsh	r0, [r4, r3]
     ffe:	4f60      	ldr	r7, [pc, #384]	; (1180 <sampleTick+0x314>)
    1000:	47b8      	blx	r7
    1002:	4e60      	ldr	r6, [pc, #384]	; (1184 <sampleTick+0x318>)
    1004:	4a6b      	ldr	r2, [pc, #428]	; (11b4 <sampleTick+0x348>)
    1006:	4b6c      	ldr	r3, [pc, #432]	; (11b8 <sampleTick+0x34c>)
    1008:	47b0      	blx	r6
    100a:	4d61      	ldr	r5, [pc, #388]	; (1190 <sampleTick+0x324>)
    100c:	47a8      	blx	r5
    100e:	62a0      	str	r0, [r4, #40]	; 0x28
    my_altimeter->myIMU.accelY = my_altimeter->myIMU.accelYint * .00781;
    1010:	2346      	movs	r3, #70	; 0x46
    1012:	5ee0      	ldrsh	r0, [r4, r3]
    1014:	47b8      	blx	r7
    1016:	4a67      	ldr	r2, [pc, #412]	; (11b4 <sampleTick+0x348>)
    1018:	4b67      	ldr	r3, [pc, #412]	; (11b8 <sampleTick+0x34c>)
    101a:	47b0      	blx	r6
    101c:	47a8      	blx	r5
    101e:	62e0      	str	r0, [r4, #44]	; 0x2c
    my_altimeter->myIMU.accelZ = my_altimeter->myIMU.accelZint * .00781;
    1020:	234a      	movs	r3, #74	; 0x4a
    1022:	5ee0      	ldrsh	r0, [r4, r3]
    1024:	47b8      	blx	r7
    1026:	4a63      	ldr	r2, [pc, #396]	; (11b4 <sampleTick+0x348>)
    1028:	4b63      	ldr	r3, [pc, #396]	; (11b8 <sampleTick+0x34c>)
    102a:	47b0      	blx	r6
    102c:	47a8      	blx	r5
    102e:	6320      	str	r0, [r4, #48]	; 0x30
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    1030:	4b5b      	ldr	r3, [pc, #364]	; (11a0 <sampleTick+0x334>)
    1032:	469a      	mov	sl, r3
    1034:	2380      	movs	r3, #128	; 0x80
    1036:	00db      	lsls	r3, r3, #3
    1038:	469b      	mov	fp, r3
    103a:	4653      	mov	r3, sl
    103c:	465a      	mov	r2, fp
    103e:	615a      	str	r2, [r3, #20]


    // Gyro data
    pinLow(cs_gyro);
    dummy_rx = spiDataTransfer(SPI0, 0x80 | 0x02);
    1040:	2182      	movs	r1, #130	; 0x82
    1042:	2000      	movs	r0, #0
    1044:	4d5a      	ldr	r5, [pc, #360]	; (11b0 <sampleTick+0x344>)
    1046:	47a8      	blx	r5
    my_altimeter->myIMU.gyroXLow = spiDataTransfer(SPI0,dummy_Tx);
    1048:	21ff      	movs	r1, #255	; 0xff
    104a:	2000      	movs	r0, #0
    104c:	47a8      	blx	r5
    104e:	274d      	movs	r7, #77	; 0x4d
    1050:	55e0      	strb	r0, [r4, r7]
    my_altimeter->myIMU.gyroXHigh = spiDataTransfer(SPI0,dummy_Tx);
    1052:	21ff      	movs	r1, #255	; 0xff
    1054:	2000      	movs	r0, #0
    1056:	47a8      	blx	r5
    1058:	234c      	movs	r3, #76	; 0x4c
    105a:	4699      	mov	r9, r3
    105c:	54e0      	strb	r0, [r4, r3]
    my_altimeter->myIMU.gyroYLow = spiDataTransfer(SPI0,dummy_Tx);
    105e:	21ff      	movs	r1, #255	; 0xff
    1060:	2000      	movs	r0, #0
    1062:	47a8      	blx	r5
    1064:	2651      	movs	r6, #81	; 0x51
    1066:	55a0      	strb	r0, [r4, r6]
    my_altimeter->myIMU.gyroYHigh = spiDataTransfer(SPI0,dummy_Tx);
    1068:	21ff      	movs	r1, #255	; 0xff
    106a:	2000      	movs	r0, #0
    106c:	47a8      	blx	r5
    106e:	2350      	movs	r3, #80	; 0x50
    1070:	4698      	mov	r8, r3
    1072:	54e0      	strb	r0, [r4, r3]
    my_altimeter->myIMU.gyroZLow = spiDataTransfer(SPI0,dummy_Tx);
    1074:	21ff      	movs	r1, #255	; 0xff
    1076:	2000      	movs	r0, #0
    1078:	47a8      	blx	r5
    107a:	2355      	movs	r3, #85	; 0x55
    107c:	54e0      	strb	r0, [r4, r3]
    my_altimeter->myIMU.gyroZHigh = spiDataTransfer(SPI0,dummy_Tx);
    107e:	21ff      	movs	r1, #255	; 0xff
    1080:	2000      	movs	r0, #0
    1082:	47a8      	blx	r5
    1084:	2354      	movs	r3, #84	; 0x54
    1086:	54e0      	strb	r0, [r4, r3]
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    1088:	4652      	mov	r2, sl
    108a:	4659      	mov	r1, fp
    108c:	6191      	str	r1, [r2, #24]
    pinHigh(cs_gyro);

    bool negativeXgyro = (my_altimeter->myIMU.gyroXHigh & (1<<7)) != 0;
    108e:	464a      	mov	r2, r9
    1090:	5ca1      	ldrb	r1, [r4, r2]
    bool negativeYgyro = (my_altimeter->myIMU.gyroYHigh & (1<<7)) != 0;
    1092:	4642      	mov	r2, r8
    1094:	5ca2      	ldrb	r2, [r4, r2]
    bool negativeZgyro = (my_altimeter->myIMU.gyroZHigh & (1<<7)) != 0;
    1096:	5ce5      	ldrb	r5, [r4, r3]
    1098:	b26b      	sxtb	r3, r5
    109a:	469c      	mov	ip, r3

    my_altimeter->myIMU.gyroXint = (my_altimeter->myIMU.gyroXHigh << 8) | my_altimeter->myIMU.gyroXLow;
    109c:	020b      	lsls	r3, r1, #8
    109e:	5de7      	ldrb	r7, [r4, r7]
    10a0:	431f      	orrs	r7, r3
    10a2:	b23f      	sxth	r7, r7
    10a4:	234e      	movs	r3, #78	; 0x4e
    10a6:	52e7      	strh	r7, [r4, r3]
    my_altimeter->myIMU.gyroYint = (my_altimeter->myIMU.gyroYHigh << 8) | my_altimeter->myIMU.gyroYLow;
    10a8:	0213      	lsls	r3, r2, #8
    10aa:	5da0      	ldrb	r0, [r4, r6]
    10ac:	4318      	orrs	r0, r3
    10ae:	b200      	sxth	r0, r0
    10b0:	2352      	movs	r3, #82	; 0x52
    10b2:	52e0      	strh	r0, [r4, r3]
    my_altimeter->myIMU.gyroZint = (my_altimeter->myIMU.gyroZHigh << 8) | my_altimeter->myIMU.gyroZLow;
    10b4:	022b      	lsls	r3, r5, #8
    10b6:	3604      	adds	r6, #4
    10b8:	5da6      	ldrb	r6, [r4, r6]
    10ba:	4333      	orrs	r3, r6
    10bc:	b21b      	sxth	r3, r3
    10be:	2656      	movs	r6, #86	; 0x56
    10c0:	53a3      	strh	r3, [r4, r6]

    if (my_altimeter->myIMU.gyroXHigh != 1) {
    10c2:	2901      	cmp	r1, #1
    10c4:	d009      	beq.n	10da <sampleTick+0x26e>
        if (negativeXgyro) {
    10c6:	b249      	sxtb	r1, r1
    10c8:	2900      	cmp	r1, #0
    10ca:	da03      	bge.n	10d4 <sampleTick+0x268>
            my_altimeter->myIMU.gyroXint = my_altimeter->myIMU.gyroXint | ~((1 << 16) - 1);
            my_altimeter->myIMU.gyroXint = my_altimeter->myIMU.gyroXint >> 4;
    10cc:	113f      	asrs	r7, r7, #4
    10ce:	214e      	movs	r1, #78	; 0x4e
    10d0:	5267      	strh	r7, [r4, r1]
    10d2:	e002      	b.n	10da <sampleTick+0x26e>
        } else {
            my_altimeter->myIMU.gyroXint = my_altimeter->myIMU.gyroXint >> 4;
    10d4:	113f      	asrs	r7, r7, #4
    10d6:	214e      	movs	r1, #78	; 0x4e
    10d8:	5267      	strh	r7, [r4, r1]
        }
    }

    if (my_altimeter->myIMU.gyroYHigh != 1) {
    10da:	2a01      	cmp	r2, #1
    10dc:	d009      	beq.n	10f2 <sampleTick+0x286>
        if (negativeYgyro) {
    10de:	b252      	sxtb	r2, r2
    10e0:	2a00      	cmp	r2, #0
    10e2:	da03      	bge.n	10ec <sampleTick+0x280>
            my_altimeter->myIMU.gyroYint = my_altimeter->myIMU.gyroYint | ~((1 << 16) - 1);
            my_altimeter->myIMU.gyroYint = my_altimeter->myIMU.gyroYint >> 4;
    10e4:	1100      	asrs	r0, r0, #4
    10e6:	2252      	movs	r2, #82	; 0x52
    10e8:	52a0      	strh	r0, [r4, r2]
    10ea:	e002      	b.n	10f2 <sampleTick+0x286>
        } else {
            my_altimeter->myIMU.gyroYint = my_altimeter->myIMU.gyroYint >> 4;
    10ec:	1100      	asrs	r0, r0, #4
    10ee:	2252      	movs	r2, #82	; 0x52
    10f0:	52a0      	strh	r0, [r4, r2]
        }
    }

    if (my_altimeter->myIMU.gyroZHigh != 1) {
    10f2:	2d01      	cmp	r5, #1
    10f4:	d009      	beq.n	110a <sampleTick+0x29e>
        if (negativeZgyro) {
    10f6:	4662      	mov	r2, ip
    10f8:	2a00      	cmp	r2, #0
    10fa:	da03      	bge.n	1104 <sampleTick+0x298>
            my_altimeter->myIMU.gyroZint = my_altimeter->myIMU.gyroZint | ~((1 << 16) - 1);
            my_altimeter->myIMU.gyroZint = my_altimeter->myIMU.gyroZint >> 4;
    10fc:	111b      	asrs	r3, r3, #4
    10fe:	2256      	movs	r2, #86	; 0x56
    1100:	52a3      	strh	r3, [r4, r2]
    1102:	e002      	b.n	110a <sampleTick+0x29e>
        } else {
            my_altimeter->myIMU.gyroZint = my_altimeter->myIMU.gyroZint >> 4;
    1104:	111b      	asrs	r3, r3, #4
    1106:	2256      	movs	r2, #86	; 0x56
    1108:	52a3      	strh	r3, [r4, r2]
        }
    }

    my_altimeter->myIMU.gyroX = my_altimeter->myIMU.gyroXint * .00781;
    110a:	234e      	movs	r3, #78	; 0x4e
    110c:	5ee0      	ldrsh	r0, [r4, r3]
    110e:	4f1c      	ldr	r7, [pc, #112]	; (1180 <sampleTick+0x314>)
    1110:	47b8      	blx	r7
    1112:	4e1c      	ldr	r6, [pc, #112]	; (1184 <sampleTick+0x318>)
    1114:	4a27      	ldr	r2, [pc, #156]	; (11b4 <sampleTick+0x348>)
    1116:	4b28      	ldr	r3, [pc, #160]	; (11b8 <sampleTick+0x34c>)
    1118:	47b0      	blx	r6
    111a:	4d1d      	ldr	r5, [pc, #116]	; (1190 <sampleTick+0x324>)
    111c:	47a8      	blx	r5
    111e:	6360      	str	r0, [r4, #52]	; 0x34
    my_altimeter->myIMU.gyroY = my_altimeter->myIMU.gyroYint * .00781;
    1120:	2352      	movs	r3, #82	; 0x52
    1122:	5ee0      	ldrsh	r0, [r4, r3]
    1124:	47b8      	blx	r7
    1126:	4a23      	ldr	r2, [pc, #140]	; (11b4 <sampleTick+0x348>)
    1128:	4b23      	ldr	r3, [pc, #140]	; (11b8 <sampleTick+0x34c>)
    112a:	47b0      	blx	r6
    112c:	47a8      	blx	r5
    112e:	63a0      	str	r0, [r4, #56]	; 0x38
    my_altimeter->myIMU.gyroZ = my_altimeter->myIMU.gyroZint * .00781;
    1130:	2356      	movs	r3, #86	; 0x56
    1132:	5ee0      	ldrsh	r0, [r4, r3]
    1134:	47b8      	blx	r7
    1136:	4a1f      	ldr	r2, [pc, #124]	; (11b4 <sampleTick+0x348>)
    1138:	4b1f      	ldr	r3, [pc, #124]	; (11b8 <sampleTick+0x34c>)
    113a:	47b0      	blx	r6
    113c:	47a8      	blx	r5
    113e:	63e0      	str	r0, [r4, #60]	; 0x3c

    delay_us(800);
    1140:	20c8      	movs	r0, #200	; 0xc8
    1142:	0080      	lsls	r0, r0, #2
    1144:	4b18      	ldr	r3, [pc, #96]	; (11a8 <sampleTick+0x33c>)
    1146:	4798      	blx	r3
    my_altimeter->myBarometer.rawPressureData = readMS5803AdcResults();
    1148:	4b18      	ldr	r3, [pc, #96]	; (11ac <sampleTick+0x340>)
    114a:	4798      	blx	r3
    114c:	60e0      	str	r0, [r4, #12]
    ConvertPressureTemperature(&my_altimeter->myBarometer);
    114e:	0020      	movs	r0, r4
    1150:	4b1a      	ldr	r3, [pc, #104]	; (11bc <sampleTick+0x350>)
    1152:	4798      	blx	r3
    pascalToCent(&my_altimeter->myBarometer);
    1154:	0020      	movs	r0, r4
    1156:	4b1a      	ldr	r3, [pc, #104]	; (11c0 <sampleTick+0x354>)
    1158:	4798      	blx	r3
    my_altimeter->myBarometer.heightFeet = 0.03281 * my_altimeter->myBarometer.heightCm;
    115a:	6a20      	ldr	r0, [r4, #32]
    115c:	4b19      	ldr	r3, [pc, #100]	; (11c4 <sampleTick+0x358>)
    115e:	4798      	blx	r3
    1160:	4a19      	ldr	r2, [pc, #100]	; (11c8 <sampleTick+0x35c>)
    1162:	4b1a      	ldr	r3, [pc, #104]	; (11cc <sampleTick+0x360>)
    1164:	47b0      	blx	r6
    1166:	47a8      	blx	r5
    1168:	6260      	str	r0, [r4, #36]	; 0x24


}
    116a:	b003      	add	sp, #12
    116c:	bc3c      	pop	{r2, r3, r4, r5}
    116e:	4690      	mov	r8, r2
    1170:	4699      	mov	r9, r3
    1172:	46a2      	mov	sl, r4
    1174:	46ab      	mov	fp, r5
    1176:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1178:	00002a8c 	.word	0x00002a8c
    117c:	00000779 	.word	0x00000779
    1180:	000024bd 	.word	0x000024bd
    1184:	00001fc9 	.word	0x00001fc9
    1188:	eaa2a0a9 	.word	0xeaa2a0a9
    118c:	3f5f3a57 	.word	0x3f5f3a57
    1190:	000025e9 	.word	0x000025e9
    1194:	fffff0da 	.word	0xfffff0da
    1198:	367a0f91 	.word	0x367a0f91
    119c:	bf973eab 	.word	0xbf973eab
    11a0:	41004400 	.word	0x41004400
    11a4:	000007f9 	.word	0x000007f9
    11a8:	00000a0d 	.word	0x00000a0d
    11ac:	00000b9d 	.word	0x00000b9d
    11b0:	000012b1 	.word	0x000012b1
    11b4:	e94ee393 	.word	0xe94ee393
    11b8:	3f7ffd60 	.word	0x3f7ffd60
    11bc:	00000c11 	.word	0x00000c11
    11c0:	00000d09 	.word	0x00000d09
    11c4:	00002541 	.word	0x00002541
    11c8:	e9f6a93f 	.word	0xe9f6a93f
    11cc:	3fa0cc78 	.word	0x3fa0cc78

000011d0 <sercomClockEnable>:
#include <util.h>

void sercomClockEnable(SercomId id, uint32_t clock_channel, u8_t divider) {
    11d0:	b570      	push	{r4, r5, r6, lr}
    11d2:	0004      	movs	r4, r0
    11d4:	000d      	movs	r5, r1
    // prevent this clock write from changing any other clocks
    PM->APBCMASK.reg |= 1 << (PM_APBCMASK_SERCOM0_Pos + id);
    11d6:	480e      	ldr	r0, [pc, #56]	; (1210 <sercomClockEnable+0x40>)
    11d8:	6a01      	ldr	r1, [r0, #32]
    11da:	1ca6      	adds	r6, r4, #2
    11dc:	2301      	movs	r3, #1
    11de:	40b3      	lsls	r3, r6
    11e0:	430b      	orrs	r3, r1
    11e2:	6203      	str	r3, [r0, #32]


    if (clock_channel != 0) {
    11e4:	2d00      	cmp	r5, #0
    11e6:	d003      	beq.n	11f0 <sercomClockEnable+0x20>
        // clock generators 3-8 have 8 division factor bits - DIV[7:0]
        gclkEnable(clock_channel, GCLK_SOURCE_DFLL48M, divider);
    11e8:	2107      	movs	r1, #7
    11ea:	0028      	movs	r0, r5
    11ec:	4b09      	ldr	r3, [pc, #36]	; (1214 <sercomClockEnable+0x44>)
    11ee:	4798      	blx	r3
    }


    // attach clock
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
    11f0:	0229      	lsls	r1, r5, #8
    11f2:	23f0      	movs	r3, #240	; 0xf0
    11f4:	011b      	lsls	r3, r3, #4
    11f6:	4019      	ands	r1, r3
    11f8:	2380      	movs	r3, #128	; 0x80
    11fa:	01db      	lsls	r3, r3, #7
    11fc:	4319      	orrs	r1, r3
    11fe:	0023      	movs	r3, r4
    1200:	3314      	adds	r3, #20
    1202:	243f      	movs	r4, #63	; 0x3f
    1204:	401c      	ands	r4, r3
    1206:	430c      	orrs	r4, r1
    1208:	4b03      	ldr	r3, [pc, #12]	; (1218 <sercomClockEnable+0x48>)
    120a:	805c      	strh	r4, [r3, #2]
                        GCLK_CLKCTRL_GEN(clock_channel) |
                        GCLK_CLKCTRL_ID(SERCOM0_GCLK_ID_CORE + id);
}
    120c:	bd70      	pop	{r4, r5, r6, pc}
    120e:	46c0      	nop			; (mov r8, r8)
    1210:	40000400 	.word	0x40000400
    1214:	000009bd 	.word	0x000009bd
    1218:	40000c00 	.word	0x40000c00

0000121c <sercomReset>:
//sample.c
void sampleTick(Altimeter *my_altimeter);

//dma.c
inline static Sercom* sercom(SercomId id) {
    return (Sercom*) (0x42000800U + id * 1024);
    121c:	0280      	lsls	r0, r0, #10
    121e:	4b05      	ldr	r3, [pc, #20]	; (1234 <sercomReset+0x18>)
    1220:	469c      	mov	ip, r3
    1222:	4460      	add	r0, ip


void sercomReset(SercomId id) {
    sercom(id)->SPI.CTRLA.reg = SERCOM_SPI_CTRLA_SWRST;
    1224:	2301      	movs	r3, #1
    1226:	6003      	str	r3, [r0, #0]
    while(sercom(id)->SPI.CTRLA.reg & SERCOM_SPI_CTRLA_SWRST);
    1228:	2201      	movs	r2, #1
    122a:	6803      	ldr	r3, [r0, #0]
    122c:	421a      	tst	r2, r3
    122e:	d1fc      	bne.n	122a <sercomReset+0xe>
}
    1230:	4770      	bx	lr
    1232:	46c0      	nop			; (mov r8, r8)
    1234:	42000800 	.word	0x42000800

00001238 <sercomSpiMasterInit>:
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
}


void sercomSpiMasterInit(SercomId id, u32_t dipo, u32_t dopo, bool cpol, bool cpha, u8_t baud) {
    1238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    123a:	464f      	mov	r7, r9
    123c:	4646      	mov	r6, r8
    123e:	b4c0      	push	{r6, r7}
    1240:	0006      	movs	r6, r0
    1242:	4688      	mov	r8, r1
    1244:	0017      	movs	r7, r2
    1246:	001d      	movs	r5, r3
    1248:	ab08      	add	r3, sp, #32
    124a:	781c      	ldrb	r4, [r3, #0]
    124c:	ab09      	add	r3, sp, #36	; 0x24
    124e:	781b      	ldrb	r3, [r3, #0]
    1250:	4699      	mov	r9, r3
		
    sercomReset(id);
    1252:	4b15      	ldr	r3, [pc, #84]	; (12a8 <sercomSpiMasterInit+0x70>)
    1254:	4798      	blx	r3
    1256:	02b0      	lsls	r0, r6, #10
    1258:	4b14      	ldr	r3, [pc, #80]	; (12ac <sercomSpiMasterInit+0x74>)
    125a:	469c      	mov	ip, r3
    125c:	4460      	add	r0, ip
	
    sercom(id)->SPI.CTRLB.reg
        = SERCOM_SPI_CTRLB_RXEN;
    125e:	2380      	movs	r3, #128	; 0x80
    1260:	029b      	lsls	r3, r3, #10
    1262:	6043      	str	r3, [r0, #4]

    sercom(id)->SPI.BAUD.reg = baud;
    1264:	464b      	mov	r3, r9
    1266:	7303      	strb	r3, [r0, #12]

    sercom(id)->SPI.CTRLA.reg
        = SERCOM_SPI_CTRLA_ENABLE
          | SERCOM_SPI_CTRLA_MODE_SPI_MASTER
          | SERCOM_SPI_CTRLA_DIPO(dipo)
    1268:	4643      	mov	r3, r8
    126a:	0519      	lsls	r1, r3, #20
    126c:	23c0      	movs	r3, #192	; 0xc0
    126e:	039b      	lsls	r3, r3, #14
    1270:	4019      	ands	r1, r3
    1272:	000e      	movs	r6, r1
    1274:	0439      	lsls	r1, r7, #16
    1276:	23c0      	movs	r3, #192	; 0xc0
    1278:	029b      	lsls	r3, r3, #10
    127a:	4019      	ands	r1, r3
    127c:	230e      	movs	r3, #14
    127e:	000a      	movs	r2, r1
    1280:	431a      	orrs	r2, r3
          | SERCOM_SPI_CTRLA_DOPO(dopo)
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
    1282:	1e6b      	subs	r3, r5, #1
    1284:	419d      	sbcs	r5, r3
    1286:	076d      	lsls	r5, r5, #29
    1288:	0031      	movs	r1, r6
    128a:	4311      	orrs	r1, r2
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
    128c:	1e63      	subs	r3, r4, #1
    128e:	419c      	sbcs	r4, r3
    1290:	0722      	lsls	r2, r4, #28
    1292:	002c      	movs	r4, r5
    1294:	430c      	orrs	r4, r1
    1296:	4314      	orrs	r4, r2
        = SERCOM_SPI_CTRLB_RXEN;

    sercom(id)->SPI.BAUD.reg = baud;

    sercom(id)->SPI.CTRLA.reg
        = SERCOM_SPI_CTRLA_ENABLE
    1298:	6004      	str	r4, [r0, #0]
        };
    }
}

static inline void SPI_sync(SercomId id) {
    while  (sercom(id)->SPI.SYNCBUSY.bit.CTRLB);
    129a:	69c3      	ldr	r3, [r0, #28]
    129c:	075b      	lsls	r3, r3, #29
    129e:	d4fc      	bmi.n	129a <sercomSpiMasterInit+0x62>
          | SERCOM_SPI_CTRLA_DOPO(dopo)
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);

    SPI_sync(id);
}
    12a0:	bc0c      	pop	{r2, r3}
    12a2:	4690      	mov	r8, r2
    12a4:	4699      	mov	r9, r3
    12a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    12a8:	0000121d 	.word	0x0000121d
    12ac:	42000800 	.word	0x42000800

000012b0 <spiDataTransfer>:
//sample.c
void sampleTick(Altimeter *my_altimeter);

//dma.c
inline static Sercom* sercom(SercomId id) {
    return (Sercom*) (0x42000800U + id * 1024);
    12b0:	0280      	lsls	r0, r0, #10
    12b2:	4b05      	ldr	r3, [pc, #20]	; (12c8 <spiDataTransfer+0x18>)
    12b4:	469c      	mov	ip, r3
    12b6:	4460      	add	r0, ip
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
}

u8_t spiDataTransfer(SercomId id, u8_t data) {
    sercom(id)->SPI.DATA.reg = data;
    12b8:	6281      	str	r1, [r0, #40]	; 0x28
    while(sercom(id)->SPI.INTFLAG.bit.RXC == 0);
    12ba:	7e03      	ldrb	r3, [r0, #24]
    12bc:	075b      	lsls	r3, r3, #29
    12be:	d5fc      	bpl.n	12ba <spiDataTransfer+0xa>
    return sercom(id)->SPI.DATA.reg;
    12c0:	6a80      	ldr	r0, [r0, #40]	; 0x28
    12c2:	b2c0      	uxtb	r0, r0
}
    12c4:	4770      	bx	lr
    12c6:	46c0      	nop			; (mov r8, r8)
    12c8:	42000800 	.word	0x42000800

000012cc <__aeabi_cfrcmple>:
    12cc:	4684      	mov	ip, r0
    12ce:	1c08      	adds	r0, r1, #0
    12d0:	4661      	mov	r1, ip
    12d2:	e7ff      	b.n	12d4 <__aeabi_cfcmpeq>

000012d4 <__aeabi_cfcmpeq>:
    12d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    12d6:	f000 fb5b 	bl	1990 <__lesf2>
    12da:	2800      	cmp	r0, #0
    12dc:	d401      	bmi.n	12e2 <__aeabi_cfcmpeq+0xe>
    12de:	2100      	movs	r1, #0
    12e0:	42c8      	cmn	r0, r1
    12e2:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

000012e4 <__aeabi_fcmpeq>:
    12e4:	b510      	push	{r4, lr}
    12e6:	f000 fae7 	bl	18b8 <__eqsf2>
    12ea:	4240      	negs	r0, r0
    12ec:	3001      	adds	r0, #1
    12ee:	bd10      	pop	{r4, pc}

000012f0 <__aeabi_fcmplt>:
    12f0:	b510      	push	{r4, lr}
    12f2:	f000 fb4d 	bl	1990 <__lesf2>
    12f6:	2800      	cmp	r0, #0
    12f8:	db01      	blt.n	12fe <__aeabi_fcmplt+0xe>
    12fa:	2000      	movs	r0, #0
    12fc:	bd10      	pop	{r4, pc}
    12fe:	2001      	movs	r0, #1
    1300:	bd10      	pop	{r4, pc}
    1302:	46c0      	nop			; (mov r8, r8)

00001304 <__aeabi_fcmple>:
    1304:	b510      	push	{r4, lr}
    1306:	f000 fb43 	bl	1990 <__lesf2>
    130a:	2800      	cmp	r0, #0
    130c:	dd01      	ble.n	1312 <__aeabi_fcmple+0xe>
    130e:	2000      	movs	r0, #0
    1310:	bd10      	pop	{r4, pc}
    1312:	2001      	movs	r0, #1
    1314:	bd10      	pop	{r4, pc}
    1316:	46c0      	nop			; (mov r8, r8)

00001318 <__aeabi_fcmpgt>:
    1318:	b510      	push	{r4, lr}
    131a:	f000 faf5 	bl	1908 <__gesf2>
    131e:	2800      	cmp	r0, #0
    1320:	dc01      	bgt.n	1326 <__aeabi_fcmpgt+0xe>
    1322:	2000      	movs	r0, #0
    1324:	bd10      	pop	{r4, pc}
    1326:	2001      	movs	r0, #1
    1328:	bd10      	pop	{r4, pc}
    132a:	46c0      	nop			; (mov r8, r8)

0000132c <__aeabi_fcmpge>:
    132c:	b510      	push	{r4, lr}
    132e:	f000 faeb 	bl	1908 <__gesf2>
    1332:	2800      	cmp	r0, #0
    1334:	da01      	bge.n	133a <__aeabi_fcmpge+0xe>
    1336:	2000      	movs	r0, #0
    1338:	bd10      	pop	{r4, pc}
    133a:	2001      	movs	r0, #1
    133c:	bd10      	pop	{r4, pc}
    133e:	46c0      	nop			; (mov r8, r8)

00001340 <__aeabi_lmul>:
    1340:	b5f0      	push	{r4, r5, r6, r7, lr}
    1342:	464f      	mov	r7, r9
    1344:	4646      	mov	r6, r8
    1346:	b4c0      	push	{r6, r7}
    1348:	0416      	lsls	r6, r2, #16
    134a:	0c36      	lsrs	r6, r6, #16
    134c:	4699      	mov	r9, r3
    134e:	0033      	movs	r3, r6
    1350:	0405      	lsls	r5, r0, #16
    1352:	0c2c      	lsrs	r4, r5, #16
    1354:	0c07      	lsrs	r7, r0, #16
    1356:	0c15      	lsrs	r5, r2, #16
    1358:	4363      	muls	r3, r4
    135a:	437e      	muls	r6, r7
    135c:	436f      	muls	r7, r5
    135e:	4365      	muls	r5, r4
    1360:	0c1c      	lsrs	r4, r3, #16
    1362:	19ad      	adds	r5, r5, r6
    1364:	1964      	adds	r4, r4, r5
    1366:	469c      	mov	ip, r3
    1368:	42a6      	cmp	r6, r4
    136a:	d903      	bls.n	1374 <__aeabi_lmul+0x34>
    136c:	2380      	movs	r3, #128	; 0x80
    136e:	025b      	lsls	r3, r3, #9
    1370:	4698      	mov	r8, r3
    1372:	4447      	add	r7, r8
    1374:	4663      	mov	r3, ip
    1376:	0c25      	lsrs	r5, r4, #16
    1378:	19ef      	adds	r7, r5, r7
    137a:	041d      	lsls	r5, r3, #16
    137c:	464b      	mov	r3, r9
    137e:	434a      	muls	r2, r1
    1380:	4343      	muls	r3, r0
    1382:	0c2d      	lsrs	r5, r5, #16
    1384:	0424      	lsls	r4, r4, #16
    1386:	1964      	adds	r4, r4, r5
    1388:	1899      	adds	r1, r3, r2
    138a:	19c9      	adds	r1, r1, r7
    138c:	0020      	movs	r0, r4
    138e:	bc0c      	pop	{r2, r3}
    1390:	4690      	mov	r8, r2
    1392:	4699      	mov	r9, r3
    1394:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1396:	46c0      	nop			; (mov r8, r8)

00001398 <__aeabi_fadd>:
    1398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    139a:	024a      	lsls	r2, r1, #9
    139c:	0243      	lsls	r3, r0, #9
    139e:	0044      	lsls	r4, r0, #1
    13a0:	004e      	lsls	r6, r1, #1
    13a2:	0fc5      	lsrs	r5, r0, #31
    13a4:	0e24      	lsrs	r4, r4, #24
    13a6:	0028      	movs	r0, r5
    13a8:	099b      	lsrs	r3, r3, #6
    13aa:	0e36      	lsrs	r6, r6, #24
    13ac:	0fc9      	lsrs	r1, r1, #31
    13ae:	0992      	lsrs	r2, r2, #6
    13b0:	428d      	cmp	r5, r1
    13b2:	d059      	beq.n	1468 <__aeabi_fadd+0xd0>
    13b4:	1ba0      	subs	r0, r4, r6
    13b6:	2800      	cmp	r0, #0
    13b8:	dc00      	bgt.n	13bc <__aeabi_fadd+0x24>
    13ba:	e08d      	b.n	14d8 <__aeabi_fadd+0x140>
    13bc:	2e00      	cmp	r6, #0
    13be:	d11a      	bne.n	13f6 <__aeabi_fadd+0x5e>
    13c0:	2a00      	cmp	r2, #0
    13c2:	d000      	beq.n	13c6 <__aeabi_fadd+0x2e>
    13c4:	e079      	b.n	14ba <__aeabi_fadd+0x122>
    13c6:	075a      	lsls	r2, r3, #29
    13c8:	d004      	beq.n	13d4 <__aeabi_fadd+0x3c>
    13ca:	220f      	movs	r2, #15
    13cc:	401a      	ands	r2, r3
    13ce:	2a04      	cmp	r2, #4
    13d0:	d000      	beq.n	13d4 <__aeabi_fadd+0x3c>
    13d2:	3304      	adds	r3, #4
    13d4:	015a      	lsls	r2, r3, #5
    13d6:	d538      	bpl.n	144a <__aeabi_fadd+0xb2>
    13d8:	3401      	adds	r4, #1
    13da:	2cff      	cmp	r4, #255	; 0xff
    13dc:	d100      	bne.n	13e0 <__aeabi_fadd+0x48>
    13de:	e089      	b.n	14f4 <__aeabi_fadd+0x15c>
    13e0:	0028      	movs	r0, r5
    13e2:	019b      	lsls	r3, r3, #6
    13e4:	0a5b      	lsrs	r3, r3, #9
    13e6:	b2e4      	uxtb	r4, r4
    13e8:	025b      	lsls	r3, r3, #9
    13ea:	05e4      	lsls	r4, r4, #23
    13ec:	0a5b      	lsrs	r3, r3, #9
    13ee:	4323      	orrs	r3, r4
    13f0:	07c0      	lsls	r0, r0, #31
    13f2:	4318      	orrs	r0, r3
    13f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    13f6:	2cff      	cmp	r4, #255	; 0xff
    13f8:	d0e5      	beq.n	13c6 <__aeabi_fadd+0x2e>
    13fa:	2180      	movs	r1, #128	; 0x80
    13fc:	04c9      	lsls	r1, r1, #19
    13fe:	430a      	orrs	r2, r1
    1400:	281b      	cmp	r0, #27
    1402:	dd00      	ble.n	1406 <__aeabi_fadd+0x6e>
    1404:	e089      	b.n	151a <__aeabi_fadd+0x182>
    1406:	0016      	movs	r6, r2
    1408:	2120      	movs	r1, #32
    140a:	40c6      	lsrs	r6, r0
    140c:	1a08      	subs	r0, r1, r0
    140e:	4082      	lsls	r2, r0
    1410:	1e51      	subs	r1, r2, #1
    1412:	418a      	sbcs	r2, r1
    1414:	4332      	orrs	r2, r6
    1416:	1a9b      	subs	r3, r3, r2
    1418:	015a      	lsls	r2, r3, #5
    141a:	d514      	bpl.n	1446 <__aeabi_fadd+0xae>
    141c:	019b      	lsls	r3, r3, #6
    141e:	099e      	lsrs	r6, r3, #6
    1420:	0030      	movs	r0, r6
    1422:	f001 f96d 	bl	2700 <__clzsi2>
    1426:	3805      	subs	r0, #5
    1428:	4086      	lsls	r6, r0
    142a:	4284      	cmp	r4, r0
    142c:	dc65      	bgt.n	14fa <__aeabi_fadd+0x162>
    142e:	1b04      	subs	r4, r0, r4
    1430:	0033      	movs	r3, r6
    1432:	2020      	movs	r0, #32
    1434:	3401      	adds	r4, #1
    1436:	40e3      	lsrs	r3, r4
    1438:	1b04      	subs	r4, r0, r4
    143a:	40a6      	lsls	r6, r4
    143c:	1e72      	subs	r2, r6, #1
    143e:	4196      	sbcs	r6, r2
    1440:	2400      	movs	r4, #0
    1442:	4333      	orrs	r3, r6
    1444:	e7bf      	b.n	13c6 <__aeabi_fadd+0x2e>
    1446:	075a      	lsls	r2, r3, #29
    1448:	d1bf      	bne.n	13ca <__aeabi_fadd+0x32>
    144a:	08df      	lsrs	r7, r3, #3
    144c:	0028      	movs	r0, r5
    144e:	2cff      	cmp	r4, #255	; 0xff
    1450:	d12f      	bne.n	14b2 <__aeabi_fadd+0x11a>
    1452:	2f00      	cmp	r7, #0
    1454:	d100      	bne.n	1458 <__aeabi_fadd+0xc0>
    1456:	e087      	b.n	1568 <__aeabi_fadd+0x1d0>
    1458:	2280      	movs	r2, #128	; 0x80
    145a:	03d2      	lsls	r2, r2, #15
    145c:	0013      	movs	r3, r2
    145e:	433b      	orrs	r3, r7
    1460:	025b      	lsls	r3, r3, #9
    1462:	0a5b      	lsrs	r3, r3, #9
    1464:	24ff      	movs	r4, #255	; 0xff
    1466:	e7bf      	b.n	13e8 <__aeabi_fadd+0x50>
    1468:	1ba1      	subs	r1, r4, r6
    146a:	2900      	cmp	r1, #0
    146c:	dd49      	ble.n	1502 <__aeabi_fadd+0x16a>
    146e:	2e00      	cmp	r6, #0
    1470:	d029      	beq.n	14c6 <__aeabi_fadd+0x12e>
    1472:	2cff      	cmp	r4, #255	; 0xff
    1474:	d0a7      	beq.n	13c6 <__aeabi_fadd+0x2e>
    1476:	2680      	movs	r6, #128	; 0x80
    1478:	04f6      	lsls	r6, r6, #19
    147a:	4332      	orrs	r2, r6
    147c:	291b      	cmp	r1, #27
    147e:	dd00      	ble.n	1482 <__aeabi_fadd+0xea>
    1480:	e08d      	b.n	159e <__aeabi_fadd+0x206>
    1482:	0017      	movs	r7, r2
    1484:	2620      	movs	r6, #32
    1486:	40cf      	lsrs	r7, r1
    1488:	1a71      	subs	r1, r6, r1
    148a:	408a      	lsls	r2, r1
    148c:	1e51      	subs	r1, r2, #1
    148e:	418a      	sbcs	r2, r1
    1490:	433a      	orrs	r2, r7
    1492:	189b      	adds	r3, r3, r2
    1494:	015a      	lsls	r2, r3, #5
    1496:	d5d6      	bpl.n	1446 <__aeabi_fadd+0xae>
    1498:	3401      	adds	r4, #1
    149a:	2cff      	cmp	r4, #255	; 0xff
    149c:	d064      	beq.n	1568 <__aeabi_fadd+0x1d0>
    149e:	2201      	movs	r2, #1
    14a0:	4976      	ldr	r1, [pc, #472]	; (167c <__aeabi_fadd+0x2e4>)
    14a2:	401a      	ands	r2, r3
    14a4:	085b      	lsrs	r3, r3, #1
    14a6:	400b      	ands	r3, r1
    14a8:	4313      	orrs	r3, r2
    14aa:	e78c      	b.n	13c6 <__aeabi_fadd+0x2e>
    14ac:	1e03      	subs	r3, r0, #0
    14ae:	d1ca      	bne.n	1446 <__aeabi_fadd+0xae>
    14b0:	2000      	movs	r0, #0
    14b2:	027b      	lsls	r3, r7, #9
    14b4:	0a5b      	lsrs	r3, r3, #9
    14b6:	b2e4      	uxtb	r4, r4
    14b8:	e796      	b.n	13e8 <__aeabi_fadd+0x50>
    14ba:	3801      	subs	r0, #1
    14bc:	2800      	cmp	r0, #0
    14be:	d0aa      	beq.n	1416 <__aeabi_fadd+0x7e>
    14c0:	2cff      	cmp	r4, #255	; 0xff
    14c2:	d19d      	bne.n	1400 <__aeabi_fadd+0x68>
    14c4:	e77f      	b.n	13c6 <__aeabi_fadd+0x2e>
    14c6:	2a00      	cmp	r2, #0
    14c8:	d100      	bne.n	14cc <__aeabi_fadd+0x134>
    14ca:	e77c      	b.n	13c6 <__aeabi_fadd+0x2e>
    14cc:	3901      	subs	r1, #1
    14ce:	2900      	cmp	r1, #0
    14d0:	d0df      	beq.n	1492 <__aeabi_fadd+0xfa>
    14d2:	2cff      	cmp	r4, #255	; 0xff
    14d4:	d1d2      	bne.n	147c <__aeabi_fadd+0xe4>
    14d6:	e776      	b.n	13c6 <__aeabi_fadd+0x2e>
    14d8:	2800      	cmp	r0, #0
    14da:	d120      	bne.n	151e <__aeabi_fadd+0x186>
    14dc:	1c60      	adds	r0, r4, #1
    14de:	b2c0      	uxtb	r0, r0
    14e0:	2801      	cmp	r0, #1
    14e2:	dd53      	ble.n	158c <__aeabi_fadd+0x1f4>
    14e4:	2780      	movs	r7, #128	; 0x80
    14e6:	1a9e      	subs	r6, r3, r2
    14e8:	04ff      	lsls	r7, r7, #19
    14ea:	4037      	ands	r7, r6
    14ec:	d02f      	beq.n	154e <__aeabi_fadd+0x1b6>
    14ee:	1ad6      	subs	r6, r2, r3
    14f0:	000d      	movs	r5, r1
    14f2:	e795      	b.n	1420 <__aeabi_fadd+0x88>
    14f4:	0028      	movs	r0, r5
    14f6:	2300      	movs	r3, #0
    14f8:	e776      	b.n	13e8 <__aeabi_fadd+0x50>
    14fa:	4b61      	ldr	r3, [pc, #388]	; (1680 <__aeabi_fadd+0x2e8>)
    14fc:	1a24      	subs	r4, r4, r0
    14fe:	4033      	ands	r3, r6
    1500:	e761      	b.n	13c6 <__aeabi_fadd+0x2e>
    1502:	2900      	cmp	r1, #0
    1504:	d14d      	bne.n	15a2 <__aeabi_fadd+0x20a>
    1506:	1c61      	adds	r1, r4, #1
    1508:	b2ce      	uxtb	r6, r1
    150a:	2e01      	cmp	r6, #1
    150c:	dd2f      	ble.n	156e <__aeabi_fadd+0x1d6>
    150e:	29ff      	cmp	r1, #255	; 0xff
    1510:	d02a      	beq.n	1568 <__aeabi_fadd+0x1d0>
    1512:	189b      	adds	r3, r3, r2
    1514:	085b      	lsrs	r3, r3, #1
    1516:	000c      	movs	r4, r1
    1518:	e755      	b.n	13c6 <__aeabi_fadd+0x2e>
    151a:	2201      	movs	r2, #1
    151c:	e77b      	b.n	1416 <__aeabi_fadd+0x7e>
    151e:	2c00      	cmp	r4, #0
    1520:	d11b      	bne.n	155a <__aeabi_fadd+0x1c2>
    1522:	2b00      	cmp	r3, #0
    1524:	d05b      	beq.n	15de <__aeabi_fadd+0x246>
    1526:	43c0      	mvns	r0, r0
    1528:	2800      	cmp	r0, #0
    152a:	d00c      	beq.n	1546 <__aeabi_fadd+0x1ae>
    152c:	2eff      	cmp	r6, #255	; 0xff
    152e:	d07e      	beq.n	162e <__aeabi_fadd+0x296>
    1530:	281b      	cmp	r0, #27
    1532:	dd00      	ble.n	1536 <__aeabi_fadd+0x19e>
    1534:	e092      	b.n	165c <__aeabi_fadd+0x2c4>
    1536:	001d      	movs	r5, r3
    1538:	2420      	movs	r4, #32
    153a:	40c5      	lsrs	r5, r0
    153c:	1a20      	subs	r0, r4, r0
    153e:	4083      	lsls	r3, r0
    1540:	1e58      	subs	r0, r3, #1
    1542:	4183      	sbcs	r3, r0
    1544:	432b      	orrs	r3, r5
    1546:	1ad3      	subs	r3, r2, r3
    1548:	0034      	movs	r4, r6
    154a:	000d      	movs	r5, r1
    154c:	e764      	b.n	1418 <__aeabi_fadd+0x80>
    154e:	2e00      	cmp	r6, #0
    1550:	d000      	beq.n	1554 <__aeabi_fadd+0x1bc>
    1552:	e765      	b.n	1420 <__aeabi_fadd+0x88>
    1554:	2000      	movs	r0, #0
    1556:	2400      	movs	r4, #0
    1558:	e7ab      	b.n	14b2 <__aeabi_fadd+0x11a>
    155a:	2eff      	cmp	r6, #255	; 0xff
    155c:	d067      	beq.n	162e <__aeabi_fadd+0x296>
    155e:	2480      	movs	r4, #128	; 0x80
    1560:	04e4      	lsls	r4, r4, #19
    1562:	4240      	negs	r0, r0
    1564:	4323      	orrs	r3, r4
    1566:	e7e3      	b.n	1530 <__aeabi_fadd+0x198>
    1568:	24ff      	movs	r4, #255	; 0xff
    156a:	2300      	movs	r3, #0
    156c:	e73c      	b.n	13e8 <__aeabi_fadd+0x50>
    156e:	2c00      	cmp	r4, #0
    1570:	d161      	bne.n	1636 <__aeabi_fadd+0x29e>
    1572:	2b00      	cmp	r3, #0
    1574:	d07e      	beq.n	1674 <__aeabi_fadd+0x2dc>
    1576:	2a00      	cmp	r2, #0
    1578:	d100      	bne.n	157c <__aeabi_fadd+0x1e4>
    157a:	e724      	b.n	13c6 <__aeabi_fadd+0x2e>
    157c:	189b      	adds	r3, r3, r2
    157e:	015a      	lsls	r2, r3, #5
    1580:	d400      	bmi.n	1584 <__aeabi_fadd+0x1ec>
    1582:	e760      	b.n	1446 <__aeabi_fadd+0xae>
    1584:	4a3e      	ldr	r2, [pc, #248]	; (1680 <__aeabi_fadd+0x2e8>)
    1586:	000c      	movs	r4, r1
    1588:	4013      	ands	r3, r2
    158a:	e71c      	b.n	13c6 <__aeabi_fadd+0x2e>
    158c:	2c00      	cmp	r4, #0
    158e:	d11e      	bne.n	15ce <__aeabi_fadd+0x236>
    1590:	2b00      	cmp	r3, #0
    1592:	d12f      	bne.n	15f4 <__aeabi_fadd+0x25c>
    1594:	2a00      	cmp	r2, #0
    1596:	d066      	beq.n	1666 <__aeabi_fadd+0x2ce>
    1598:	0013      	movs	r3, r2
    159a:	000d      	movs	r5, r1
    159c:	e713      	b.n	13c6 <__aeabi_fadd+0x2e>
    159e:	2201      	movs	r2, #1
    15a0:	e777      	b.n	1492 <__aeabi_fadd+0xfa>
    15a2:	2c00      	cmp	r4, #0
    15a4:	d11f      	bne.n	15e6 <__aeabi_fadd+0x24e>
    15a6:	2b00      	cmp	r3, #0
    15a8:	d05a      	beq.n	1660 <__aeabi_fadd+0x2c8>
    15aa:	43c9      	mvns	r1, r1
    15ac:	2900      	cmp	r1, #0
    15ae:	d00b      	beq.n	15c8 <__aeabi_fadd+0x230>
    15b0:	2eff      	cmp	r6, #255	; 0xff
    15b2:	d050      	beq.n	1656 <__aeabi_fadd+0x2be>
    15b4:	291b      	cmp	r1, #27
    15b6:	dc5f      	bgt.n	1678 <__aeabi_fadd+0x2e0>
    15b8:	001f      	movs	r7, r3
    15ba:	2420      	movs	r4, #32
    15bc:	40cf      	lsrs	r7, r1
    15be:	1a61      	subs	r1, r4, r1
    15c0:	408b      	lsls	r3, r1
    15c2:	1e59      	subs	r1, r3, #1
    15c4:	418b      	sbcs	r3, r1
    15c6:	433b      	orrs	r3, r7
    15c8:	189b      	adds	r3, r3, r2
    15ca:	0034      	movs	r4, r6
    15cc:	e762      	b.n	1494 <__aeabi_fadd+0xfc>
    15ce:	2b00      	cmp	r3, #0
    15d0:	d11c      	bne.n	160c <__aeabi_fadd+0x274>
    15d2:	2a00      	cmp	r2, #0
    15d4:	d04a      	beq.n	166c <__aeabi_fadd+0x2d4>
    15d6:	0013      	movs	r3, r2
    15d8:	000d      	movs	r5, r1
    15da:	24ff      	movs	r4, #255	; 0xff
    15dc:	e6f3      	b.n	13c6 <__aeabi_fadd+0x2e>
    15de:	0013      	movs	r3, r2
    15e0:	0034      	movs	r4, r6
    15e2:	000d      	movs	r5, r1
    15e4:	e6ef      	b.n	13c6 <__aeabi_fadd+0x2e>
    15e6:	2eff      	cmp	r6, #255	; 0xff
    15e8:	d035      	beq.n	1656 <__aeabi_fadd+0x2be>
    15ea:	2480      	movs	r4, #128	; 0x80
    15ec:	04e4      	lsls	r4, r4, #19
    15ee:	4249      	negs	r1, r1
    15f0:	4323      	orrs	r3, r4
    15f2:	e7df      	b.n	15b4 <__aeabi_fadd+0x21c>
    15f4:	2a00      	cmp	r2, #0
    15f6:	d100      	bne.n	15fa <__aeabi_fadd+0x262>
    15f8:	e6e5      	b.n	13c6 <__aeabi_fadd+0x2e>
    15fa:	2780      	movs	r7, #128	; 0x80
    15fc:	1a98      	subs	r0, r3, r2
    15fe:	04ff      	lsls	r7, r7, #19
    1600:	4007      	ands	r7, r0
    1602:	d100      	bne.n	1606 <__aeabi_fadd+0x26e>
    1604:	e752      	b.n	14ac <__aeabi_fadd+0x114>
    1606:	1ad3      	subs	r3, r2, r3
    1608:	000d      	movs	r5, r1
    160a:	e6dc      	b.n	13c6 <__aeabi_fadd+0x2e>
    160c:	24ff      	movs	r4, #255	; 0xff
    160e:	2a00      	cmp	r2, #0
    1610:	d100      	bne.n	1614 <__aeabi_fadd+0x27c>
    1612:	e6d8      	b.n	13c6 <__aeabi_fadd+0x2e>
    1614:	2080      	movs	r0, #128	; 0x80
    1616:	08db      	lsrs	r3, r3, #3
    1618:	03c0      	lsls	r0, r0, #15
    161a:	4203      	tst	r3, r0
    161c:	d004      	beq.n	1628 <__aeabi_fadd+0x290>
    161e:	08d2      	lsrs	r2, r2, #3
    1620:	4202      	tst	r2, r0
    1622:	d101      	bne.n	1628 <__aeabi_fadd+0x290>
    1624:	0013      	movs	r3, r2
    1626:	000d      	movs	r5, r1
    1628:	00db      	lsls	r3, r3, #3
    162a:	24ff      	movs	r4, #255	; 0xff
    162c:	e6cb      	b.n	13c6 <__aeabi_fadd+0x2e>
    162e:	0013      	movs	r3, r2
    1630:	24ff      	movs	r4, #255	; 0xff
    1632:	000d      	movs	r5, r1
    1634:	e6c7      	b.n	13c6 <__aeabi_fadd+0x2e>
    1636:	2b00      	cmp	r3, #0
    1638:	d00d      	beq.n	1656 <__aeabi_fadd+0x2be>
    163a:	24ff      	movs	r4, #255	; 0xff
    163c:	2a00      	cmp	r2, #0
    163e:	d100      	bne.n	1642 <__aeabi_fadd+0x2aa>
    1640:	e6c1      	b.n	13c6 <__aeabi_fadd+0x2e>
    1642:	2180      	movs	r1, #128	; 0x80
    1644:	08db      	lsrs	r3, r3, #3
    1646:	03c9      	lsls	r1, r1, #15
    1648:	420b      	tst	r3, r1
    164a:	d0ed      	beq.n	1628 <__aeabi_fadd+0x290>
    164c:	08d2      	lsrs	r2, r2, #3
    164e:	420a      	tst	r2, r1
    1650:	d1ea      	bne.n	1628 <__aeabi_fadd+0x290>
    1652:	0013      	movs	r3, r2
    1654:	e7e8      	b.n	1628 <__aeabi_fadd+0x290>
    1656:	0013      	movs	r3, r2
    1658:	24ff      	movs	r4, #255	; 0xff
    165a:	e6b4      	b.n	13c6 <__aeabi_fadd+0x2e>
    165c:	2301      	movs	r3, #1
    165e:	e772      	b.n	1546 <__aeabi_fadd+0x1ae>
    1660:	0013      	movs	r3, r2
    1662:	0034      	movs	r4, r6
    1664:	e6af      	b.n	13c6 <__aeabi_fadd+0x2e>
    1666:	2700      	movs	r7, #0
    1668:	2000      	movs	r0, #0
    166a:	e722      	b.n	14b2 <__aeabi_fadd+0x11a>
    166c:	2780      	movs	r7, #128	; 0x80
    166e:	2000      	movs	r0, #0
    1670:	03ff      	lsls	r7, r7, #15
    1672:	e6f1      	b.n	1458 <__aeabi_fadd+0xc0>
    1674:	0013      	movs	r3, r2
    1676:	e6a6      	b.n	13c6 <__aeabi_fadd+0x2e>
    1678:	2301      	movs	r3, #1
    167a:	e7a5      	b.n	15c8 <__aeabi_fadd+0x230>
    167c:	7dffffff 	.word	0x7dffffff
    1680:	fbffffff 	.word	0xfbffffff

00001684 <__aeabi_fdiv>:
    1684:	b5f0      	push	{r4, r5, r6, r7, lr}
    1686:	4656      	mov	r6, sl
    1688:	4644      	mov	r4, r8
    168a:	465f      	mov	r7, fp
    168c:	464d      	mov	r5, r9
    168e:	b4f0      	push	{r4, r5, r6, r7}
    1690:	0244      	lsls	r4, r0, #9
    1692:	0046      	lsls	r6, r0, #1
    1694:	0fc7      	lsrs	r7, r0, #31
    1696:	b083      	sub	sp, #12
    1698:	4688      	mov	r8, r1
    169a:	0a65      	lsrs	r5, r4, #9
    169c:	0e36      	lsrs	r6, r6, #24
    169e:	46ba      	mov	sl, r7
    16a0:	d03d      	beq.n	171e <__aeabi_fdiv+0x9a>
    16a2:	2eff      	cmp	r6, #255	; 0xff
    16a4:	d022      	beq.n	16ec <__aeabi_fdiv+0x68>
    16a6:	2300      	movs	r3, #0
    16a8:	00ec      	lsls	r4, r5, #3
    16aa:	2580      	movs	r5, #128	; 0x80
    16ac:	4699      	mov	r9, r3
    16ae:	469b      	mov	fp, r3
    16b0:	04ed      	lsls	r5, r5, #19
    16b2:	4325      	orrs	r5, r4
    16b4:	3e7f      	subs	r6, #127	; 0x7f
    16b6:	4643      	mov	r3, r8
    16b8:	025c      	lsls	r4, r3, #9
    16ba:	0058      	lsls	r0, r3, #1
    16bc:	0fdb      	lsrs	r3, r3, #31
    16be:	0a64      	lsrs	r4, r4, #9
    16c0:	0e00      	lsrs	r0, r0, #24
    16c2:	4698      	mov	r8, r3
    16c4:	d036      	beq.n	1734 <__aeabi_fdiv+0xb0>
    16c6:	28ff      	cmp	r0, #255	; 0xff
    16c8:	d030      	beq.n	172c <__aeabi_fdiv+0xa8>
    16ca:	2380      	movs	r3, #128	; 0x80
    16cc:	2100      	movs	r1, #0
    16ce:	00e4      	lsls	r4, r4, #3
    16d0:	04db      	lsls	r3, r3, #19
    16d2:	431c      	orrs	r4, r3
    16d4:	387f      	subs	r0, #127	; 0x7f
    16d6:	1a30      	subs	r0, r6, r0
    16d8:	9001      	str	r0, [sp, #4]
    16da:	4648      	mov	r0, r9
    16dc:	4642      	mov	r2, r8
    16de:	4308      	orrs	r0, r1
    16e0:	4e72      	ldr	r6, [pc, #456]	; (18ac <__aeabi_fdiv+0x228>)
    16e2:	0080      	lsls	r0, r0, #2
    16e4:	5830      	ldr	r0, [r6, r0]
    16e6:	407a      	eors	r2, r7
    16e8:	0013      	movs	r3, r2
    16ea:	4687      	mov	pc, r0
    16ec:	2d00      	cmp	r5, #0
    16ee:	d144      	bne.n	177a <__aeabi_fdiv+0xf6>
    16f0:	2308      	movs	r3, #8
    16f2:	4699      	mov	r9, r3
    16f4:	3b06      	subs	r3, #6
    16f6:	469b      	mov	fp, r3
    16f8:	e7dd      	b.n	16b6 <__aeabi_fdiv+0x32>
    16fa:	2201      	movs	r2, #1
    16fc:	20ff      	movs	r0, #255	; 0xff
    16fe:	2400      	movs	r4, #0
    1700:	401a      	ands	r2, r3
    1702:	0264      	lsls	r4, r4, #9
    1704:	05c3      	lsls	r3, r0, #23
    1706:	0a64      	lsrs	r4, r4, #9
    1708:	07d2      	lsls	r2, r2, #31
    170a:	431c      	orrs	r4, r3
    170c:	4314      	orrs	r4, r2
    170e:	0020      	movs	r0, r4
    1710:	b003      	add	sp, #12
    1712:	bc3c      	pop	{r2, r3, r4, r5}
    1714:	4690      	mov	r8, r2
    1716:	4699      	mov	r9, r3
    1718:	46a2      	mov	sl, r4
    171a:	46ab      	mov	fp, r5
    171c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    171e:	2d00      	cmp	r5, #0
    1720:	d120      	bne.n	1764 <__aeabi_fdiv+0xe0>
    1722:	2304      	movs	r3, #4
    1724:	4699      	mov	r9, r3
    1726:	3b03      	subs	r3, #3
    1728:	469b      	mov	fp, r3
    172a:	e7c4      	b.n	16b6 <__aeabi_fdiv+0x32>
    172c:	2c00      	cmp	r4, #0
    172e:	d117      	bne.n	1760 <__aeabi_fdiv+0xdc>
    1730:	2102      	movs	r1, #2
    1732:	e002      	b.n	173a <__aeabi_fdiv+0xb6>
    1734:	2c00      	cmp	r4, #0
    1736:	d10a      	bne.n	174e <__aeabi_fdiv+0xca>
    1738:	2101      	movs	r1, #1
    173a:	1a32      	subs	r2, r6, r0
    173c:	9201      	str	r2, [sp, #4]
    173e:	464a      	mov	r2, r9
    1740:	4643      	mov	r3, r8
    1742:	430a      	orrs	r2, r1
    1744:	485a      	ldr	r0, [pc, #360]	; (18b0 <__aeabi_fdiv+0x22c>)
    1746:	0092      	lsls	r2, r2, #2
    1748:	5882      	ldr	r2, [r0, r2]
    174a:	407b      	eors	r3, r7
    174c:	4697      	mov	pc, r2
    174e:	0020      	movs	r0, r4
    1750:	f000 ffd6 	bl	2700 <__clzsi2>
    1754:	1f43      	subs	r3, r0, #5
    1756:	3076      	adds	r0, #118	; 0x76
    1758:	409c      	lsls	r4, r3
    175a:	4240      	negs	r0, r0
    175c:	2100      	movs	r1, #0
    175e:	e7ba      	b.n	16d6 <__aeabi_fdiv+0x52>
    1760:	2103      	movs	r1, #3
    1762:	e7b8      	b.n	16d6 <__aeabi_fdiv+0x52>
    1764:	0028      	movs	r0, r5
    1766:	f000 ffcb 	bl	2700 <__clzsi2>
    176a:	1f43      	subs	r3, r0, #5
    176c:	409d      	lsls	r5, r3
    176e:	2300      	movs	r3, #0
    1770:	3076      	adds	r0, #118	; 0x76
    1772:	4246      	negs	r6, r0
    1774:	4699      	mov	r9, r3
    1776:	469b      	mov	fp, r3
    1778:	e79d      	b.n	16b6 <__aeabi_fdiv+0x32>
    177a:	230c      	movs	r3, #12
    177c:	4699      	mov	r9, r3
    177e:	3b09      	subs	r3, #9
    1780:	469b      	mov	fp, r3
    1782:	e798      	b.n	16b6 <__aeabi_fdiv+0x32>
    1784:	2480      	movs	r4, #128	; 0x80
    1786:	2200      	movs	r2, #0
    1788:	03e4      	lsls	r4, r4, #15
    178a:	20ff      	movs	r0, #255	; 0xff
    178c:	e7b9      	b.n	1702 <__aeabi_fdiv+0x7e>
    178e:	2400      	movs	r4, #0
    1790:	46c2      	mov	sl, r8
    1792:	468b      	mov	fp, r1
    1794:	465a      	mov	r2, fp
    1796:	4653      	mov	r3, sl
    1798:	2a02      	cmp	r2, #2
    179a:	d0ae      	beq.n	16fa <__aeabi_fdiv+0x76>
    179c:	2a03      	cmp	r2, #3
    179e:	d07d      	beq.n	189c <__aeabi_fdiv+0x218>
    17a0:	2a01      	cmp	r2, #1
    17a2:	d131      	bne.n	1808 <__aeabi_fdiv+0x184>
    17a4:	2201      	movs	r2, #1
    17a6:	2000      	movs	r0, #0
    17a8:	401a      	ands	r2, r3
    17aa:	2400      	movs	r4, #0
    17ac:	e7a9      	b.n	1702 <__aeabi_fdiv+0x7e>
    17ae:	2201      	movs	r2, #1
    17b0:	1a10      	subs	r0, r2, r0
    17b2:	281b      	cmp	r0, #27
    17b4:	dd56      	ble.n	1864 <__aeabi_fdiv+0x1e0>
    17b6:	401a      	ands	r2, r3
    17b8:	2000      	movs	r0, #0
    17ba:	2400      	movs	r4, #0
    17bc:	e7a1      	b.n	1702 <__aeabi_fdiv+0x7e>
    17be:	2380      	movs	r3, #128	; 0x80
    17c0:	03db      	lsls	r3, r3, #15
    17c2:	421d      	tst	r5, r3
    17c4:	d14b      	bne.n	185e <__aeabi_fdiv+0x1da>
    17c6:	2380      	movs	r3, #128	; 0x80
    17c8:	03db      	lsls	r3, r3, #15
    17ca:	432b      	orrs	r3, r5
    17cc:	025c      	lsls	r4, r3, #9
    17ce:	0a64      	lsrs	r4, r4, #9
    17d0:	003a      	movs	r2, r7
    17d2:	20ff      	movs	r0, #255	; 0xff
    17d4:	e795      	b.n	1702 <__aeabi_fdiv+0x7e>
    17d6:	016d      	lsls	r5, r5, #5
    17d8:	0160      	lsls	r0, r4, #5
    17da:	4285      	cmp	r5, r0
    17dc:	d230      	bcs.n	1840 <__aeabi_fdiv+0x1bc>
    17de:	9a01      	ldr	r2, [sp, #4]
    17e0:	2400      	movs	r4, #0
    17e2:	3a01      	subs	r2, #1
    17e4:	9201      	str	r2, [sp, #4]
    17e6:	221b      	movs	r2, #27
    17e8:	2701      	movs	r7, #1
    17ea:	0029      	movs	r1, r5
    17ec:	0064      	lsls	r4, r4, #1
    17ee:	006d      	lsls	r5, r5, #1
    17f0:	2900      	cmp	r1, #0
    17f2:	db01      	blt.n	17f8 <__aeabi_fdiv+0x174>
    17f4:	42a8      	cmp	r0, r5
    17f6:	d801      	bhi.n	17fc <__aeabi_fdiv+0x178>
    17f8:	1a2d      	subs	r5, r5, r0
    17fa:	433c      	orrs	r4, r7
    17fc:	3a01      	subs	r2, #1
    17fe:	2a00      	cmp	r2, #0
    1800:	d1f3      	bne.n	17ea <__aeabi_fdiv+0x166>
    1802:	1e6a      	subs	r2, r5, #1
    1804:	4195      	sbcs	r5, r2
    1806:	432c      	orrs	r4, r5
    1808:	9801      	ldr	r0, [sp, #4]
    180a:	307f      	adds	r0, #127	; 0x7f
    180c:	2800      	cmp	r0, #0
    180e:	ddce      	ble.n	17ae <__aeabi_fdiv+0x12a>
    1810:	0762      	lsls	r2, r4, #29
    1812:	d004      	beq.n	181e <__aeabi_fdiv+0x19a>
    1814:	220f      	movs	r2, #15
    1816:	4022      	ands	r2, r4
    1818:	2a04      	cmp	r2, #4
    181a:	d000      	beq.n	181e <__aeabi_fdiv+0x19a>
    181c:	3404      	adds	r4, #4
    181e:	0122      	lsls	r2, r4, #4
    1820:	d503      	bpl.n	182a <__aeabi_fdiv+0x1a6>
    1822:	4a24      	ldr	r2, [pc, #144]	; (18b4 <__aeabi_fdiv+0x230>)
    1824:	9801      	ldr	r0, [sp, #4]
    1826:	4014      	ands	r4, r2
    1828:	3080      	adds	r0, #128	; 0x80
    182a:	28fe      	cmp	r0, #254	; 0xfe
    182c:	dd00      	ble.n	1830 <__aeabi_fdiv+0x1ac>
    182e:	e764      	b.n	16fa <__aeabi_fdiv+0x76>
    1830:	2201      	movs	r2, #1
    1832:	01a4      	lsls	r4, r4, #6
    1834:	0a64      	lsrs	r4, r4, #9
    1836:	b2c0      	uxtb	r0, r0
    1838:	401a      	ands	r2, r3
    183a:	e762      	b.n	1702 <__aeabi_fdiv+0x7e>
    183c:	002c      	movs	r4, r5
    183e:	e7a9      	b.n	1794 <__aeabi_fdiv+0x110>
    1840:	1a2d      	subs	r5, r5, r0
    1842:	221a      	movs	r2, #26
    1844:	2401      	movs	r4, #1
    1846:	e7cf      	b.n	17e8 <__aeabi_fdiv+0x164>
    1848:	026b      	lsls	r3, r5, #9
    184a:	d5bc      	bpl.n	17c6 <__aeabi_fdiv+0x142>
    184c:	2400      	movs	r4, #0
    184e:	2380      	movs	r3, #128	; 0x80
    1850:	03db      	lsls	r3, r3, #15
    1852:	431c      	orrs	r4, r3
    1854:	0264      	lsls	r4, r4, #9
    1856:	0a64      	lsrs	r4, r4, #9
    1858:	4642      	mov	r2, r8
    185a:	20ff      	movs	r0, #255	; 0xff
    185c:	e751      	b.n	1702 <__aeabi_fdiv+0x7e>
    185e:	421c      	tst	r4, r3
    1860:	d1b3      	bne.n	17ca <__aeabi_fdiv+0x146>
    1862:	e7f4      	b.n	184e <__aeabi_fdiv+0x1ca>
    1864:	0021      	movs	r1, r4
    1866:	2220      	movs	r2, #32
    1868:	40c1      	lsrs	r1, r0
    186a:	1a10      	subs	r0, r2, r0
    186c:	4084      	lsls	r4, r0
    186e:	1e62      	subs	r2, r4, #1
    1870:	4194      	sbcs	r4, r2
    1872:	430c      	orrs	r4, r1
    1874:	0762      	lsls	r2, r4, #29
    1876:	d004      	beq.n	1882 <__aeabi_fdiv+0x1fe>
    1878:	220f      	movs	r2, #15
    187a:	4022      	ands	r2, r4
    187c:	2a04      	cmp	r2, #4
    187e:	d000      	beq.n	1882 <__aeabi_fdiv+0x1fe>
    1880:	3404      	adds	r4, #4
    1882:	0162      	lsls	r2, r4, #5
    1884:	d504      	bpl.n	1890 <__aeabi_fdiv+0x20c>
    1886:	2201      	movs	r2, #1
    1888:	2001      	movs	r0, #1
    188a:	401a      	ands	r2, r3
    188c:	2400      	movs	r4, #0
    188e:	e738      	b.n	1702 <__aeabi_fdiv+0x7e>
    1890:	2201      	movs	r2, #1
    1892:	01a4      	lsls	r4, r4, #6
    1894:	0a64      	lsrs	r4, r4, #9
    1896:	401a      	ands	r2, r3
    1898:	2000      	movs	r0, #0
    189a:	e732      	b.n	1702 <__aeabi_fdiv+0x7e>
    189c:	2380      	movs	r3, #128	; 0x80
    189e:	03db      	lsls	r3, r3, #15
    18a0:	431c      	orrs	r4, r3
    18a2:	0264      	lsls	r4, r4, #9
    18a4:	0a64      	lsrs	r4, r4, #9
    18a6:	4652      	mov	r2, sl
    18a8:	20ff      	movs	r0, #255	; 0xff
    18aa:	e72a      	b.n	1702 <__aeabi_fdiv+0x7e>
    18ac:	00002acc 	.word	0x00002acc
    18b0:	00002b0c 	.word	0x00002b0c
    18b4:	f7ffffff 	.word	0xf7ffffff

000018b8 <__eqsf2>:
    18b8:	0243      	lsls	r3, r0, #9
    18ba:	b570      	push	{r4, r5, r6, lr}
    18bc:	0042      	lsls	r2, r0, #1
    18be:	004c      	lsls	r4, r1, #1
    18c0:	0a5d      	lsrs	r5, r3, #9
    18c2:	0fc3      	lsrs	r3, r0, #31
    18c4:	0248      	lsls	r0, r1, #9
    18c6:	0e12      	lsrs	r2, r2, #24
    18c8:	0a46      	lsrs	r6, r0, #9
    18ca:	0e24      	lsrs	r4, r4, #24
    18cc:	0fc9      	lsrs	r1, r1, #31
    18ce:	2aff      	cmp	r2, #255	; 0xff
    18d0:	d00f      	beq.n	18f2 <__eqsf2+0x3a>
    18d2:	2cff      	cmp	r4, #255	; 0xff
    18d4:	d011      	beq.n	18fa <__eqsf2+0x42>
    18d6:	2001      	movs	r0, #1
    18d8:	42a2      	cmp	r2, r4
    18da:	d000      	beq.n	18de <__eqsf2+0x26>
    18dc:	bd70      	pop	{r4, r5, r6, pc}
    18de:	42b5      	cmp	r5, r6
    18e0:	d1fc      	bne.n	18dc <__eqsf2+0x24>
    18e2:	428b      	cmp	r3, r1
    18e4:	d00d      	beq.n	1902 <__eqsf2+0x4a>
    18e6:	2a00      	cmp	r2, #0
    18e8:	d1f8      	bne.n	18dc <__eqsf2+0x24>
    18ea:	0028      	movs	r0, r5
    18ec:	1e43      	subs	r3, r0, #1
    18ee:	4198      	sbcs	r0, r3
    18f0:	e7f4      	b.n	18dc <__eqsf2+0x24>
    18f2:	2001      	movs	r0, #1
    18f4:	2d00      	cmp	r5, #0
    18f6:	d1f1      	bne.n	18dc <__eqsf2+0x24>
    18f8:	e7eb      	b.n	18d2 <__eqsf2+0x1a>
    18fa:	2001      	movs	r0, #1
    18fc:	2e00      	cmp	r6, #0
    18fe:	d1ed      	bne.n	18dc <__eqsf2+0x24>
    1900:	e7e9      	b.n	18d6 <__eqsf2+0x1e>
    1902:	2000      	movs	r0, #0
    1904:	e7ea      	b.n	18dc <__eqsf2+0x24>
    1906:	46c0      	nop			; (mov r8, r8)

00001908 <__gesf2>:
    1908:	0243      	lsls	r3, r0, #9
    190a:	b5f0      	push	{r4, r5, r6, r7, lr}
    190c:	0042      	lsls	r2, r0, #1
    190e:	0a5d      	lsrs	r5, r3, #9
    1910:	0fc3      	lsrs	r3, r0, #31
    1912:	0248      	lsls	r0, r1, #9
    1914:	0a44      	lsrs	r4, r0, #9
    1916:	0048      	lsls	r0, r1, #1
    1918:	0e12      	lsrs	r2, r2, #24
    191a:	0e00      	lsrs	r0, r0, #24
    191c:	0fc9      	lsrs	r1, r1, #31
    191e:	2aff      	cmp	r2, #255	; 0xff
    1920:	d01f      	beq.n	1962 <__gesf2+0x5a>
    1922:	28ff      	cmp	r0, #255	; 0xff
    1924:	d022      	beq.n	196c <__gesf2+0x64>
    1926:	2a00      	cmp	r2, #0
    1928:	d109      	bne.n	193e <__gesf2+0x36>
    192a:	426e      	negs	r6, r5
    192c:	416e      	adcs	r6, r5
    192e:	2800      	cmp	r0, #0
    1930:	d10f      	bne.n	1952 <__gesf2+0x4a>
    1932:	2c00      	cmp	r4, #0
    1934:	d10d      	bne.n	1952 <__gesf2+0x4a>
    1936:	2000      	movs	r0, #0
    1938:	2d00      	cmp	r5, #0
    193a:	d009      	beq.n	1950 <__gesf2+0x48>
    193c:	e005      	b.n	194a <__gesf2+0x42>
    193e:	2800      	cmp	r0, #0
    1940:	d101      	bne.n	1946 <__gesf2+0x3e>
    1942:	2c00      	cmp	r4, #0
    1944:	d001      	beq.n	194a <__gesf2+0x42>
    1946:	428b      	cmp	r3, r1
    1948:	d013      	beq.n	1972 <__gesf2+0x6a>
    194a:	4258      	negs	r0, r3
    194c:	2301      	movs	r3, #1
    194e:	4318      	orrs	r0, r3
    1950:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1952:	2e00      	cmp	r6, #0
    1954:	d0f7      	beq.n	1946 <__gesf2+0x3e>
    1956:	4248      	negs	r0, r1
    1958:	4141      	adcs	r1, r0
    195a:	2001      	movs	r0, #1
    195c:	4249      	negs	r1, r1
    195e:	4308      	orrs	r0, r1
    1960:	e7f6      	b.n	1950 <__gesf2+0x48>
    1962:	2d00      	cmp	r5, #0
    1964:	d0dd      	beq.n	1922 <__gesf2+0x1a>
    1966:	2002      	movs	r0, #2
    1968:	4240      	negs	r0, r0
    196a:	e7f1      	b.n	1950 <__gesf2+0x48>
    196c:	2c00      	cmp	r4, #0
    196e:	d0da      	beq.n	1926 <__gesf2+0x1e>
    1970:	e7f9      	b.n	1966 <__gesf2+0x5e>
    1972:	4282      	cmp	r2, r0
    1974:	dce9      	bgt.n	194a <__gesf2+0x42>
    1976:	db04      	blt.n	1982 <__gesf2+0x7a>
    1978:	42a5      	cmp	r5, r4
    197a:	d8e6      	bhi.n	194a <__gesf2+0x42>
    197c:	2000      	movs	r0, #0
    197e:	42a5      	cmp	r5, r4
    1980:	d2e6      	bcs.n	1950 <__gesf2+0x48>
    1982:	4258      	negs	r0, r3
    1984:	4143      	adcs	r3, r0
    1986:	2001      	movs	r0, #1
    1988:	425b      	negs	r3, r3
    198a:	4318      	orrs	r0, r3
    198c:	e7e0      	b.n	1950 <__gesf2+0x48>
    198e:	46c0      	nop			; (mov r8, r8)

00001990 <__lesf2>:
    1990:	0243      	lsls	r3, r0, #9
    1992:	b5f0      	push	{r4, r5, r6, r7, lr}
    1994:	0042      	lsls	r2, r0, #1
    1996:	004c      	lsls	r4, r1, #1
    1998:	0a5e      	lsrs	r6, r3, #9
    199a:	0fc3      	lsrs	r3, r0, #31
    199c:	0248      	lsls	r0, r1, #9
    199e:	0e12      	lsrs	r2, r2, #24
    19a0:	0a45      	lsrs	r5, r0, #9
    19a2:	0e24      	lsrs	r4, r4, #24
    19a4:	0fc9      	lsrs	r1, r1, #31
    19a6:	2aff      	cmp	r2, #255	; 0xff
    19a8:	d017      	beq.n	19da <__lesf2+0x4a>
    19aa:	2cff      	cmp	r4, #255	; 0xff
    19ac:	d019      	beq.n	19e2 <__lesf2+0x52>
    19ae:	2a00      	cmp	r2, #0
    19b0:	d10b      	bne.n	19ca <__lesf2+0x3a>
    19b2:	4270      	negs	r0, r6
    19b4:	4170      	adcs	r0, r6
    19b6:	2c00      	cmp	r4, #0
    19b8:	d017      	beq.n	19ea <__lesf2+0x5a>
    19ba:	2800      	cmp	r0, #0
    19bc:	d007      	beq.n	19ce <__lesf2+0x3e>
    19be:	4248      	negs	r0, r1
    19c0:	4141      	adcs	r1, r0
    19c2:	2001      	movs	r0, #1
    19c4:	4249      	negs	r1, r1
    19c6:	4308      	orrs	r0, r1
    19c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    19ca:	2c00      	cmp	r4, #0
    19cc:	d013      	beq.n	19f6 <__lesf2+0x66>
    19ce:	428b      	cmp	r3, r1
    19d0:	d014      	beq.n	19fc <__lesf2+0x6c>
    19d2:	4258      	negs	r0, r3
    19d4:	2301      	movs	r3, #1
    19d6:	4318      	orrs	r0, r3
    19d8:	e7f6      	b.n	19c8 <__lesf2+0x38>
    19da:	2002      	movs	r0, #2
    19dc:	2e00      	cmp	r6, #0
    19de:	d1f3      	bne.n	19c8 <__lesf2+0x38>
    19e0:	e7e3      	b.n	19aa <__lesf2+0x1a>
    19e2:	2002      	movs	r0, #2
    19e4:	2d00      	cmp	r5, #0
    19e6:	d1ef      	bne.n	19c8 <__lesf2+0x38>
    19e8:	e7e1      	b.n	19ae <__lesf2+0x1e>
    19ea:	2d00      	cmp	r5, #0
    19ec:	d1e5      	bne.n	19ba <__lesf2+0x2a>
    19ee:	2000      	movs	r0, #0
    19f0:	2e00      	cmp	r6, #0
    19f2:	d0e9      	beq.n	19c8 <__lesf2+0x38>
    19f4:	e7ed      	b.n	19d2 <__lesf2+0x42>
    19f6:	2d00      	cmp	r5, #0
    19f8:	d1e9      	bne.n	19ce <__lesf2+0x3e>
    19fa:	e7ea      	b.n	19d2 <__lesf2+0x42>
    19fc:	42a2      	cmp	r2, r4
    19fe:	dce8      	bgt.n	19d2 <__lesf2+0x42>
    1a00:	db04      	blt.n	1a0c <__lesf2+0x7c>
    1a02:	42ae      	cmp	r6, r5
    1a04:	d8e5      	bhi.n	19d2 <__lesf2+0x42>
    1a06:	2000      	movs	r0, #0
    1a08:	42ae      	cmp	r6, r5
    1a0a:	d2dd      	bcs.n	19c8 <__lesf2+0x38>
    1a0c:	4258      	negs	r0, r3
    1a0e:	4143      	adcs	r3, r0
    1a10:	2001      	movs	r0, #1
    1a12:	425b      	negs	r3, r3
    1a14:	4318      	orrs	r0, r3
    1a16:	e7d7      	b.n	19c8 <__lesf2+0x38>

00001a18 <__aeabi_fmul>:
    1a18:	b5f0      	push	{r4, r5, r6, r7, lr}
    1a1a:	4657      	mov	r7, sl
    1a1c:	464e      	mov	r6, r9
    1a1e:	4645      	mov	r5, r8
    1a20:	0043      	lsls	r3, r0, #1
    1a22:	b4e0      	push	{r5, r6, r7}
    1a24:	0246      	lsls	r6, r0, #9
    1a26:	4688      	mov	r8, r1
    1a28:	0a76      	lsrs	r6, r6, #9
    1a2a:	0e1f      	lsrs	r7, r3, #24
    1a2c:	0fc4      	lsrs	r4, r0, #31
    1a2e:	2f00      	cmp	r7, #0
    1a30:	d047      	beq.n	1ac2 <__aeabi_fmul+0xaa>
    1a32:	2fff      	cmp	r7, #255	; 0xff
    1a34:	d025      	beq.n	1a82 <__aeabi_fmul+0x6a>
    1a36:	2300      	movs	r3, #0
    1a38:	2580      	movs	r5, #128	; 0x80
    1a3a:	469a      	mov	sl, r3
    1a3c:	4699      	mov	r9, r3
    1a3e:	00f6      	lsls	r6, r6, #3
    1a40:	04ed      	lsls	r5, r5, #19
    1a42:	432e      	orrs	r6, r5
    1a44:	3f7f      	subs	r7, #127	; 0x7f
    1a46:	4643      	mov	r3, r8
    1a48:	4642      	mov	r2, r8
    1a4a:	025d      	lsls	r5, r3, #9
    1a4c:	0fd2      	lsrs	r2, r2, #31
    1a4e:	005b      	lsls	r3, r3, #1
    1a50:	0a6d      	lsrs	r5, r5, #9
    1a52:	0e1b      	lsrs	r3, r3, #24
    1a54:	4690      	mov	r8, r2
    1a56:	d040      	beq.n	1ada <__aeabi_fmul+0xc2>
    1a58:	2bff      	cmp	r3, #255	; 0xff
    1a5a:	d039      	beq.n	1ad0 <__aeabi_fmul+0xb8>
    1a5c:	2280      	movs	r2, #128	; 0x80
    1a5e:	2000      	movs	r0, #0
    1a60:	00ed      	lsls	r5, r5, #3
    1a62:	04d2      	lsls	r2, r2, #19
    1a64:	4315      	orrs	r5, r2
    1a66:	3b7f      	subs	r3, #127	; 0x7f
    1a68:	18fb      	adds	r3, r7, r3
    1a6a:	4642      	mov	r2, r8
    1a6c:	4657      	mov	r7, sl
    1a6e:	1c59      	adds	r1, r3, #1
    1a70:	4062      	eors	r2, r4
    1a72:	468c      	mov	ip, r1
    1a74:	4307      	orrs	r7, r0
    1a76:	2f0f      	cmp	r7, #15
    1a78:	d85c      	bhi.n	1b34 <__aeabi_fmul+0x11c>
    1a7a:	496f      	ldr	r1, [pc, #444]	; (1c38 <__aeabi_fmul+0x220>)
    1a7c:	00bf      	lsls	r7, r7, #2
    1a7e:	59c9      	ldr	r1, [r1, r7]
    1a80:	468f      	mov	pc, r1
    1a82:	2e00      	cmp	r6, #0
    1a84:	d145      	bne.n	1b12 <__aeabi_fmul+0xfa>
    1a86:	2308      	movs	r3, #8
    1a88:	469a      	mov	sl, r3
    1a8a:	3b06      	subs	r3, #6
    1a8c:	4699      	mov	r9, r3
    1a8e:	e7da      	b.n	1a46 <__aeabi_fmul+0x2e>
    1a90:	4642      	mov	r2, r8
    1a92:	2802      	cmp	r0, #2
    1a94:	d02d      	beq.n	1af2 <__aeabi_fmul+0xda>
    1a96:	2803      	cmp	r0, #3
    1a98:	d100      	bne.n	1a9c <__aeabi_fmul+0x84>
    1a9a:	e0c3      	b.n	1c24 <__aeabi_fmul+0x20c>
    1a9c:	2801      	cmp	r0, #1
    1a9e:	d000      	beq.n	1aa2 <__aeabi_fmul+0x8a>
    1aa0:	e0a2      	b.n	1be8 <__aeabi_fmul+0x1d0>
    1aa2:	2500      	movs	r5, #0
    1aa4:	2600      	movs	r6, #0
    1aa6:	4002      	ands	r2, r0
    1aa8:	b2d4      	uxtb	r4, r2
    1aaa:	0276      	lsls	r6, r6, #9
    1aac:	05ed      	lsls	r5, r5, #23
    1aae:	0a76      	lsrs	r6, r6, #9
    1ab0:	432e      	orrs	r6, r5
    1ab2:	07e4      	lsls	r4, r4, #31
    1ab4:	4326      	orrs	r6, r4
    1ab6:	0030      	movs	r0, r6
    1ab8:	bc1c      	pop	{r2, r3, r4}
    1aba:	4690      	mov	r8, r2
    1abc:	4699      	mov	r9, r3
    1abe:	46a2      	mov	sl, r4
    1ac0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1ac2:	2e00      	cmp	r6, #0
    1ac4:	d11a      	bne.n	1afc <__aeabi_fmul+0xe4>
    1ac6:	2304      	movs	r3, #4
    1ac8:	469a      	mov	sl, r3
    1aca:	3b03      	subs	r3, #3
    1acc:	4699      	mov	r9, r3
    1ace:	e7ba      	b.n	1a46 <__aeabi_fmul+0x2e>
    1ad0:	002a      	movs	r2, r5
    1ad2:	1e51      	subs	r1, r2, #1
    1ad4:	418a      	sbcs	r2, r1
    1ad6:	1c90      	adds	r0, r2, #2
    1ad8:	e7c6      	b.n	1a68 <__aeabi_fmul+0x50>
    1ada:	2001      	movs	r0, #1
    1adc:	2d00      	cmp	r5, #0
    1ade:	d0c3      	beq.n	1a68 <__aeabi_fmul+0x50>
    1ae0:	0028      	movs	r0, r5
    1ae2:	f000 fe0d 	bl	2700 <__clzsi2>
    1ae6:	1f43      	subs	r3, r0, #5
    1ae8:	3076      	adds	r0, #118	; 0x76
    1aea:	409d      	lsls	r5, r3
    1aec:	4243      	negs	r3, r0
    1aee:	2000      	movs	r0, #0
    1af0:	e7ba      	b.n	1a68 <__aeabi_fmul+0x50>
    1af2:	2401      	movs	r4, #1
    1af4:	25ff      	movs	r5, #255	; 0xff
    1af6:	4014      	ands	r4, r2
    1af8:	2600      	movs	r6, #0
    1afa:	e7d6      	b.n	1aaa <__aeabi_fmul+0x92>
    1afc:	0030      	movs	r0, r6
    1afe:	f000 fdff 	bl	2700 <__clzsi2>
    1b02:	1f43      	subs	r3, r0, #5
    1b04:	409e      	lsls	r6, r3
    1b06:	2300      	movs	r3, #0
    1b08:	3076      	adds	r0, #118	; 0x76
    1b0a:	4247      	negs	r7, r0
    1b0c:	469a      	mov	sl, r3
    1b0e:	4699      	mov	r9, r3
    1b10:	e799      	b.n	1a46 <__aeabi_fmul+0x2e>
    1b12:	230c      	movs	r3, #12
    1b14:	469a      	mov	sl, r3
    1b16:	3b09      	subs	r3, #9
    1b18:	4699      	mov	r9, r3
    1b1a:	e794      	b.n	1a46 <__aeabi_fmul+0x2e>
    1b1c:	2680      	movs	r6, #128	; 0x80
    1b1e:	2400      	movs	r4, #0
    1b20:	03f6      	lsls	r6, r6, #15
    1b22:	25ff      	movs	r5, #255	; 0xff
    1b24:	e7c1      	b.n	1aaa <__aeabi_fmul+0x92>
    1b26:	0035      	movs	r5, r6
    1b28:	4648      	mov	r0, r9
    1b2a:	e7b2      	b.n	1a92 <__aeabi_fmul+0x7a>
    1b2c:	0035      	movs	r5, r6
    1b2e:	0022      	movs	r2, r4
    1b30:	4648      	mov	r0, r9
    1b32:	e7ae      	b.n	1a92 <__aeabi_fmul+0x7a>
    1b34:	0429      	lsls	r1, r5, #16
    1b36:	0c09      	lsrs	r1, r1, #16
    1b38:	0008      	movs	r0, r1
    1b3a:	0c37      	lsrs	r7, r6, #16
    1b3c:	0436      	lsls	r6, r6, #16
    1b3e:	0c36      	lsrs	r6, r6, #16
    1b40:	0c2c      	lsrs	r4, r5, #16
    1b42:	4379      	muls	r1, r7
    1b44:	4370      	muls	r0, r6
    1b46:	4367      	muls	r7, r4
    1b48:	4374      	muls	r4, r6
    1b4a:	0c06      	lsrs	r6, r0, #16
    1b4c:	1864      	adds	r4, r4, r1
    1b4e:	1936      	adds	r6, r6, r4
    1b50:	42b1      	cmp	r1, r6
    1b52:	d903      	bls.n	1b5c <__aeabi_fmul+0x144>
    1b54:	2180      	movs	r1, #128	; 0x80
    1b56:	0249      	lsls	r1, r1, #9
    1b58:	4688      	mov	r8, r1
    1b5a:	4447      	add	r7, r8
    1b5c:	0400      	lsls	r0, r0, #16
    1b5e:	0c00      	lsrs	r0, r0, #16
    1b60:	0431      	lsls	r1, r6, #16
    1b62:	1809      	adds	r1, r1, r0
    1b64:	018d      	lsls	r5, r1, #6
    1b66:	1e68      	subs	r0, r5, #1
    1b68:	4185      	sbcs	r5, r0
    1b6a:	0e89      	lsrs	r1, r1, #26
    1b6c:	4329      	orrs	r1, r5
    1b6e:	0c35      	lsrs	r5, r6, #16
    1b70:	19ed      	adds	r5, r5, r7
    1b72:	01ad      	lsls	r5, r5, #6
    1b74:	430d      	orrs	r5, r1
    1b76:	0129      	lsls	r1, r5, #4
    1b78:	d504      	bpl.n	1b84 <__aeabi_fmul+0x16c>
    1b7a:	2301      	movs	r3, #1
    1b7c:	0869      	lsrs	r1, r5, #1
    1b7e:	401d      	ands	r5, r3
    1b80:	4663      	mov	r3, ip
    1b82:	430d      	orrs	r5, r1
    1b84:	0019      	movs	r1, r3
    1b86:	317f      	adds	r1, #127	; 0x7f
    1b88:	2900      	cmp	r1, #0
    1b8a:	dd25      	ble.n	1bd8 <__aeabi_fmul+0x1c0>
    1b8c:	0768      	lsls	r0, r5, #29
    1b8e:	d004      	beq.n	1b9a <__aeabi_fmul+0x182>
    1b90:	200f      	movs	r0, #15
    1b92:	4028      	ands	r0, r5
    1b94:	2804      	cmp	r0, #4
    1b96:	d000      	beq.n	1b9a <__aeabi_fmul+0x182>
    1b98:	3504      	adds	r5, #4
    1b9a:	0128      	lsls	r0, r5, #4
    1b9c:	d503      	bpl.n	1ba6 <__aeabi_fmul+0x18e>
    1b9e:	4927      	ldr	r1, [pc, #156]	; (1c3c <__aeabi_fmul+0x224>)
    1ba0:	3380      	adds	r3, #128	; 0x80
    1ba2:	400d      	ands	r5, r1
    1ba4:	0019      	movs	r1, r3
    1ba6:	29fe      	cmp	r1, #254	; 0xfe
    1ba8:	dca3      	bgt.n	1af2 <__aeabi_fmul+0xda>
    1baa:	2401      	movs	r4, #1
    1bac:	01ad      	lsls	r5, r5, #6
    1bae:	0a6e      	lsrs	r6, r5, #9
    1bb0:	4014      	ands	r4, r2
    1bb2:	b2cd      	uxtb	r5, r1
    1bb4:	e779      	b.n	1aaa <__aeabi_fmul+0x92>
    1bb6:	2080      	movs	r0, #128	; 0x80
    1bb8:	03c0      	lsls	r0, r0, #15
    1bba:	4206      	tst	r6, r0
    1bbc:	d007      	beq.n	1bce <__aeabi_fmul+0x1b6>
    1bbe:	4205      	tst	r5, r0
    1bc0:	d105      	bne.n	1bce <__aeabi_fmul+0x1b6>
    1bc2:	4328      	orrs	r0, r5
    1bc4:	0246      	lsls	r6, r0, #9
    1bc6:	0a76      	lsrs	r6, r6, #9
    1bc8:	4644      	mov	r4, r8
    1bca:	25ff      	movs	r5, #255	; 0xff
    1bcc:	e76d      	b.n	1aaa <__aeabi_fmul+0x92>
    1bce:	4306      	orrs	r6, r0
    1bd0:	0276      	lsls	r6, r6, #9
    1bd2:	0a76      	lsrs	r6, r6, #9
    1bd4:	25ff      	movs	r5, #255	; 0xff
    1bd6:	e768      	b.n	1aaa <__aeabi_fmul+0x92>
    1bd8:	2401      	movs	r4, #1
    1bda:	1a61      	subs	r1, r4, r1
    1bdc:	291b      	cmp	r1, #27
    1bde:	dd05      	ble.n	1bec <__aeabi_fmul+0x1d4>
    1be0:	4014      	ands	r4, r2
    1be2:	2500      	movs	r5, #0
    1be4:	2600      	movs	r6, #0
    1be6:	e760      	b.n	1aaa <__aeabi_fmul+0x92>
    1be8:	4663      	mov	r3, ip
    1bea:	e7cb      	b.n	1b84 <__aeabi_fmul+0x16c>
    1bec:	002e      	movs	r6, r5
    1bee:	2320      	movs	r3, #32
    1bf0:	40ce      	lsrs	r6, r1
    1bf2:	1a59      	subs	r1, r3, r1
    1bf4:	408d      	lsls	r5, r1
    1bf6:	1e6b      	subs	r3, r5, #1
    1bf8:	419d      	sbcs	r5, r3
    1bfa:	432e      	orrs	r6, r5
    1bfc:	0773      	lsls	r3, r6, #29
    1bfe:	d004      	beq.n	1c0a <__aeabi_fmul+0x1f2>
    1c00:	230f      	movs	r3, #15
    1c02:	4033      	ands	r3, r6
    1c04:	2b04      	cmp	r3, #4
    1c06:	d000      	beq.n	1c0a <__aeabi_fmul+0x1f2>
    1c08:	3604      	adds	r6, #4
    1c0a:	0173      	lsls	r3, r6, #5
    1c0c:	d504      	bpl.n	1c18 <__aeabi_fmul+0x200>
    1c0e:	2401      	movs	r4, #1
    1c10:	2501      	movs	r5, #1
    1c12:	4014      	ands	r4, r2
    1c14:	2600      	movs	r6, #0
    1c16:	e748      	b.n	1aaa <__aeabi_fmul+0x92>
    1c18:	2401      	movs	r4, #1
    1c1a:	01b6      	lsls	r6, r6, #6
    1c1c:	0a76      	lsrs	r6, r6, #9
    1c1e:	4014      	ands	r4, r2
    1c20:	2500      	movs	r5, #0
    1c22:	e742      	b.n	1aaa <__aeabi_fmul+0x92>
    1c24:	2680      	movs	r6, #128	; 0x80
    1c26:	2401      	movs	r4, #1
    1c28:	03f6      	lsls	r6, r6, #15
    1c2a:	432e      	orrs	r6, r5
    1c2c:	0276      	lsls	r6, r6, #9
    1c2e:	0a76      	lsrs	r6, r6, #9
    1c30:	4014      	ands	r4, r2
    1c32:	25ff      	movs	r5, #255	; 0xff
    1c34:	e739      	b.n	1aaa <__aeabi_fmul+0x92>
    1c36:	46c0      	nop			; (mov r8, r8)
    1c38:	00002b4c 	.word	0x00002b4c
    1c3c:	f7ffffff 	.word	0xf7ffffff

00001c40 <__aeabi_fsub>:
    1c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1c42:	024a      	lsls	r2, r1, #9
    1c44:	004e      	lsls	r6, r1, #1
    1c46:	0243      	lsls	r3, r0, #9
    1c48:	0044      	lsls	r4, r0, #1
    1c4a:	0e24      	lsrs	r4, r4, #24
    1c4c:	0fc5      	lsrs	r5, r0, #31
    1c4e:	099b      	lsrs	r3, r3, #6
    1c50:	0e36      	lsrs	r6, r6, #24
    1c52:	0fc9      	lsrs	r1, r1, #31
    1c54:	0992      	lsrs	r2, r2, #6
    1c56:	2eff      	cmp	r6, #255	; 0xff
    1c58:	d100      	bne.n	1c5c <__aeabi_fsub+0x1c>
    1c5a:	e083      	b.n	1d64 <__aeabi_fsub+0x124>
    1c5c:	2001      	movs	r0, #1
    1c5e:	4041      	eors	r1, r0
    1c60:	1ba0      	subs	r0, r4, r6
    1c62:	42a9      	cmp	r1, r5
    1c64:	d05c      	beq.n	1d20 <__aeabi_fsub+0xe0>
    1c66:	2800      	cmp	r0, #0
    1c68:	dc00      	bgt.n	1c6c <__aeabi_fsub+0x2c>
    1c6a:	e095      	b.n	1d98 <__aeabi_fsub+0x158>
    1c6c:	2e00      	cmp	r6, #0
    1c6e:	d11c      	bne.n	1caa <__aeabi_fsub+0x6a>
    1c70:	2a00      	cmp	r2, #0
    1c72:	d000      	beq.n	1c76 <__aeabi_fsub+0x36>
    1c74:	e081      	b.n	1d7a <__aeabi_fsub+0x13a>
    1c76:	075a      	lsls	r2, r3, #29
    1c78:	d004      	beq.n	1c84 <__aeabi_fsub+0x44>
    1c7a:	220f      	movs	r2, #15
    1c7c:	401a      	ands	r2, r3
    1c7e:	2a04      	cmp	r2, #4
    1c80:	d000      	beq.n	1c84 <__aeabi_fsub+0x44>
    1c82:	3304      	adds	r3, #4
    1c84:	015a      	lsls	r2, r3, #5
    1c86:	d53b      	bpl.n	1d00 <__aeabi_fsub+0xc0>
    1c88:	3401      	adds	r4, #1
    1c8a:	2cff      	cmp	r4, #255	; 0xff
    1c8c:	d100      	bne.n	1c90 <__aeabi_fsub+0x50>
    1c8e:	e091      	b.n	1db4 <__aeabi_fsub+0x174>
    1c90:	2001      	movs	r0, #1
    1c92:	019b      	lsls	r3, r3, #6
    1c94:	0a5b      	lsrs	r3, r3, #9
    1c96:	b2e4      	uxtb	r4, r4
    1c98:	4005      	ands	r5, r0
    1c9a:	025b      	lsls	r3, r3, #9
    1c9c:	05e4      	lsls	r4, r4, #23
    1c9e:	0a5b      	lsrs	r3, r3, #9
    1ca0:	07ed      	lsls	r5, r5, #31
    1ca2:	4323      	orrs	r3, r4
    1ca4:	432b      	orrs	r3, r5
    1ca6:	0018      	movs	r0, r3
    1ca8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1caa:	2cff      	cmp	r4, #255	; 0xff
    1cac:	d0e3      	beq.n	1c76 <__aeabi_fsub+0x36>
    1cae:	2180      	movs	r1, #128	; 0x80
    1cb0:	04c9      	lsls	r1, r1, #19
    1cb2:	430a      	orrs	r2, r1
    1cb4:	281b      	cmp	r0, #27
    1cb6:	dd00      	ble.n	1cba <__aeabi_fsub+0x7a>
    1cb8:	e090      	b.n	1ddc <__aeabi_fsub+0x19c>
    1cba:	0016      	movs	r6, r2
    1cbc:	2120      	movs	r1, #32
    1cbe:	40c6      	lsrs	r6, r0
    1cc0:	1a08      	subs	r0, r1, r0
    1cc2:	4082      	lsls	r2, r0
    1cc4:	1e51      	subs	r1, r2, #1
    1cc6:	418a      	sbcs	r2, r1
    1cc8:	4332      	orrs	r2, r6
    1cca:	1a9b      	subs	r3, r3, r2
    1ccc:	015a      	lsls	r2, r3, #5
    1cce:	d515      	bpl.n	1cfc <__aeabi_fsub+0xbc>
    1cd0:	019b      	lsls	r3, r3, #6
    1cd2:	099e      	lsrs	r6, r3, #6
    1cd4:	0030      	movs	r0, r6
    1cd6:	f000 fd13 	bl	2700 <__clzsi2>
    1cda:	3805      	subs	r0, #5
    1cdc:	4086      	lsls	r6, r0
    1cde:	4284      	cmp	r4, r0
    1ce0:	dc6c      	bgt.n	1dbc <__aeabi_fsub+0x17c>
    1ce2:	1b04      	subs	r4, r0, r4
    1ce4:	0033      	movs	r3, r6
    1ce6:	2020      	movs	r0, #32
    1ce8:	3401      	adds	r4, #1
    1cea:	40e3      	lsrs	r3, r4
    1cec:	1b04      	subs	r4, r0, r4
    1cee:	40a6      	lsls	r6, r4
    1cf0:	1e72      	subs	r2, r6, #1
    1cf2:	4196      	sbcs	r6, r2
    1cf4:	2400      	movs	r4, #0
    1cf6:	4333      	orrs	r3, r6
    1cf8:	e7bd      	b.n	1c76 <__aeabi_fsub+0x36>
    1cfa:	000d      	movs	r5, r1
    1cfc:	075a      	lsls	r2, r3, #29
    1cfe:	d1bc      	bne.n	1c7a <__aeabi_fsub+0x3a>
    1d00:	08df      	lsrs	r7, r3, #3
    1d02:	2301      	movs	r3, #1
    1d04:	401d      	ands	r5, r3
    1d06:	2cff      	cmp	r4, #255	; 0xff
    1d08:	d133      	bne.n	1d72 <__aeabi_fsub+0x132>
    1d0a:	2f00      	cmp	r7, #0
    1d0c:	d100      	bne.n	1d10 <__aeabi_fsub+0xd0>
    1d0e:	e090      	b.n	1e32 <__aeabi_fsub+0x1f2>
    1d10:	2280      	movs	r2, #128	; 0x80
    1d12:	03d2      	lsls	r2, r2, #15
    1d14:	0013      	movs	r3, r2
    1d16:	433b      	orrs	r3, r7
    1d18:	025b      	lsls	r3, r3, #9
    1d1a:	0a5b      	lsrs	r3, r3, #9
    1d1c:	24ff      	movs	r4, #255	; 0xff
    1d1e:	e7bc      	b.n	1c9a <__aeabi_fsub+0x5a>
    1d20:	2800      	cmp	r0, #0
    1d22:	dd4f      	ble.n	1dc4 <__aeabi_fsub+0x184>
    1d24:	2e00      	cmp	r6, #0
    1d26:	d02e      	beq.n	1d86 <__aeabi_fsub+0x146>
    1d28:	2cff      	cmp	r4, #255	; 0xff
    1d2a:	d0a4      	beq.n	1c76 <__aeabi_fsub+0x36>
    1d2c:	2580      	movs	r5, #128	; 0x80
    1d2e:	04ed      	lsls	r5, r5, #19
    1d30:	432a      	orrs	r2, r5
    1d32:	281b      	cmp	r0, #27
    1d34:	dd00      	ble.n	1d38 <__aeabi_fsub+0xf8>
    1d36:	e097      	b.n	1e68 <__aeabi_fsub+0x228>
    1d38:	0016      	movs	r6, r2
    1d3a:	2520      	movs	r5, #32
    1d3c:	40c6      	lsrs	r6, r0
    1d3e:	1a28      	subs	r0, r5, r0
    1d40:	4082      	lsls	r2, r0
    1d42:	1e50      	subs	r0, r2, #1
    1d44:	4182      	sbcs	r2, r0
    1d46:	4332      	orrs	r2, r6
    1d48:	189b      	adds	r3, r3, r2
    1d4a:	015a      	lsls	r2, r3, #5
    1d4c:	d5d5      	bpl.n	1cfa <__aeabi_fsub+0xba>
    1d4e:	3401      	adds	r4, #1
    1d50:	2cff      	cmp	r4, #255	; 0xff
    1d52:	d06d      	beq.n	1e30 <__aeabi_fsub+0x1f0>
    1d54:	2201      	movs	r2, #1
    1d56:	487b      	ldr	r0, [pc, #492]	; (1f44 <__aeabi_fsub+0x304>)
    1d58:	401a      	ands	r2, r3
    1d5a:	085b      	lsrs	r3, r3, #1
    1d5c:	4003      	ands	r3, r0
    1d5e:	4313      	orrs	r3, r2
    1d60:	000d      	movs	r5, r1
    1d62:	e788      	b.n	1c76 <__aeabi_fsub+0x36>
    1d64:	2a00      	cmp	r2, #0
    1d66:	d000      	beq.n	1d6a <__aeabi_fsub+0x12a>
    1d68:	e77a      	b.n	1c60 <__aeabi_fsub+0x20>
    1d6a:	e777      	b.n	1c5c <__aeabi_fsub+0x1c>
    1d6c:	1e03      	subs	r3, r0, #0
    1d6e:	d1c5      	bne.n	1cfc <__aeabi_fsub+0xbc>
    1d70:	2500      	movs	r5, #0
    1d72:	027b      	lsls	r3, r7, #9
    1d74:	0a5b      	lsrs	r3, r3, #9
    1d76:	b2e4      	uxtb	r4, r4
    1d78:	e78f      	b.n	1c9a <__aeabi_fsub+0x5a>
    1d7a:	3801      	subs	r0, #1
    1d7c:	2800      	cmp	r0, #0
    1d7e:	d0a4      	beq.n	1cca <__aeabi_fsub+0x8a>
    1d80:	2cff      	cmp	r4, #255	; 0xff
    1d82:	d197      	bne.n	1cb4 <__aeabi_fsub+0x74>
    1d84:	e777      	b.n	1c76 <__aeabi_fsub+0x36>
    1d86:	2a00      	cmp	r2, #0
    1d88:	d100      	bne.n	1d8c <__aeabi_fsub+0x14c>
    1d8a:	e774      	b.n	1c76 <__aeabi_fsub+0x36>
    1d8c:	3801      	subs	r0, #1
    1d8e:	2800      	cmp	r0, #0
    1d90:	d0da      	beq.n	1d48 <__aeabi_fsub+0x108>
    1d92:	2cff      	cmp	r4, #255	; 0xff
    1d94:	d1cd      	bne.n	1d32 <__aeabi_fsub+0xf2>
    1d96:	e76e      	b.n	1c76 <__aeabi_fsub+0x36>
    1d98:	2800      	cmp	r0, #0
    1d9a:	d121      	bne.n	1de0 <__aeabi_fsub+0x1a0>
    1d9c:	1c60      	adds	r0, r4, #1
    1d9e:	b2c0      	uxtb	r0, r0
    1da0:	2801      	cmp	r0, #1
    1da2:	dd58      	ble.n	1e56 <__aeabi_fsub+0x216>
    1da4:	2780      	movs	r7, #128	; 0x80
    1da6:	1a9e      	subs	r6, r3, r2
    1da8:	04ff      	lsls	r7, r7, #19
    1daa:	4037      	ands	r7, r6
    1dac:	d02f      	beq.n	1e0e <__aeabi_fsub+0x1ce>
    1dae:	1ad6      	subs	r6, r2, r3
    1db0:	000d      	movs	r5, r1
    1db2:	e78f      	b.n	1cd4 <__aeabi_fsub+0x94>
    1db4:	2301      	movs	r3, #1
    1db6:	401d      	ands	r5, r3
    1db8:	2300      	movs	r3, #0
    1dba:	e76e      	b.n	1c9a <__aeabi_fsub+0x5a>
    1dbc:	4b62      	ldr	r3, [pc, #392]	; (1f48 <__aeabi_fsub+0x308>)
    1dbe:	1a24      	subs	r4, r4, r0
    1dc0:	4033      	ands	r3, r6
    1dc2:	e758      	b.n	1c76 <__aeabi_fsub+0x36>
    1dc4:	2800      	cmp	r0, #0
    1dc6:	d151      	bne.n	1e6c <__aeabi_fsub+0x22c>
    1dc8:	1c60      	adds	r0, r4, #1
    1dca:	b2c6      	uxtb	r6, r0
    1dcc:	2e01      	cmp	r6, #1
    1dce:	dd33      	ble.n	1e38 <__aeabi_fsub+0x1f8>
    1dd0:	28ff      	cmp	r0, #255	; 0xff
    1dd2:	d02d      	beq.n	1e30 <__aeabi_fsub+0x1f0>
    1dd4:	189b      	adds	r3, r3, r2
    1dd6:	085b      	lsrs	r3, r3, #1
    1dd8:	0004      	movs	r4, r0
    1dda:	e74c      	b.n	1c76 <__aeabi_fsub+0x36>
    1ddc:	2201      	movs	r2, #1
    1dde:	e774      	b.n	1cca <__aeabi_fsub+0x8a>
    1de0:	2c00      	cmp	r4, #0
    1de2:	d01a      	beq.n	1e1a <__aeabi_fsub+0x1da>
    1de4:	2eff      	cmp	r6, #255	; 0xff
    1de6:	d01f      	beq.n	1e28 <__aeabi_fsub+0x1e8>
    1de8:	2480      	movs	r4, #128	; 0x80
    1dea:	04e4      	lsls	r4, r4, #19
    1dec:	4240      	negs	r0, r0
    1dee:	4323      	orrs	r3, r4
    1df0:	281b      	cmp	r0, #27
    1df2:	dd00      	ble.n	1df6 <__aeabi_fsub+0x1b6>
    1df4:	e096      	b.n	1f24 <__aeabi_fsub+0x2e4>
    1df6:	001d      	movs	r5, r3
    1df8:	2420      	movs	r4, #32
    1dfa:	40c5      	lsrs	r5, r0
    1dfc:	1a20      	subs	r0, r4, r0
    1dfe:	4083      	lsls	r3, r0
    1e00:	1e58      	subs	r0, r3, #1
    1e02:	4183      	sbcs	r3, r0
    1e04:	432b      	orrs	r3, r5
    1e06:	1ad3      	subs	r3, r2, r3
    1e08:	0034      	movs	r4, r6
    1e0a:	000d      	movs	r5, r1
    1e0c:	e75e      	b.n	1ccc <__aeabi_fsub+0x8c>
    1e0e:	2e00      	cmp	r6, #0
    1e10:	d000      	beq.n	1e14 <__aeabi_fsub+0x1d4>
    1e12:	e75f      	b.n	1cd4 <__aeabi_fsub+0x94>
    1e14:	2500      	movs	r5, #0
    1e16:	2400      	movs	r4, #0
    1e18:	e7ab      	b.n	1d72 <__aeabi_fsub+0x132>
    1e1a:	2b00      	cmp	r3, #0
    1e1c:	d044      	beq.n	1ea8 <__aeabi_fsub+0x268>
    1e1e:	43c0      	mvns	r0, r0
    1e20:	2800      	cmp	r0, #0
    1e22:	d0f0      	beq.n	1e06 <__aeabi_fsub+0x1c6>
    1e24:	2eff      	cmp	r6, #255	; 0xff
    1e26:	d1e3      	bne.n	1df0 <__aeabi_fsub+0x1b0>
    1e28:	0013      	movs	r3, r2
    1e2a:	24ff      	movs	r4, #255	; 0xff
    1e2c:	000d      	movs	r5, r1
    1e2e:	e722      	b.n	1c76 <__aeabi_fsub+0x36>
    1e30:	000d      	movs	r5, r1
    1e32:	24ff      	movs	r4, #255	; 0xff
    1e34:	2300      	movs	r3, #0
    1e36:	e730      	b.n	1c9a <__aeabi_fsub+0x5a>
    1e38:	2c00      	cmp	r4, #0
    1e3a:	d15d      	bne.n	1ef8 <__aeabi_fsub+0x2b8>
    1e3c:	2b00      	cmp	r3, #0
    1e3e:	d07d      	beq.n	1f3c <__aeabi_fsub+0x2fc>
    1e40:	2a00      	cmp	r2, #0
    1e42:	d100      	bne.n	1e46 <__aeabi_fsub+0x206>
    1e44:	e717      	b.n	1c76 <__aeabi_fsub+0x36>
    1e46:	189b      	adds	r3, r3, r2
    1e48:	015a      	lsls	r2, r3, #5
    1e4a:	d400      	bmi.n	1e4e <__aeabi_fsub+0x20e>
    1e4c:	e756      	b.n	1cfc <__aeabi_fsub+0xbc>
    1e4e:	4a3e      	ldr	r2, [pc, #248]	; (1f48 <__aeabi_fsub+0x308>)
    1e50:	0004      	movs	r4, r0
    1e52:	4013      	ands	r3, r2
    1e54:	e70f      	b.n	1c76 <__aeabi_fsub+0x36>
    1e56:	2c00      	cmp	r4, #0
    1e58:	d11e      	bne.n	1e98 <__aeabi_fsub+0x258>
    1e5a:	2b00      	cmp	r3, #0
    1e5c:	d12f      	bne.n	1ebe <__aeabi_fsub+0x27e>
    1e5e:	2a00      	cmp	r2, #0
    1e60:	d065      	beq.n	1f2e <__aeabi_fsub+0x2ee>
    1e62:	0013      	movs	r3, r2
    1e64:	000d      	movs	r5, r1
    1e66:	e706      	b.n	1c76 <__aeabi_fsub+0x36>
    1e68:	2201      	movs	r2, #1
    1e6a:	e76d      	b.n	1d48 <__aeabi_fsub+0x108>
    1e6c:	2c00      	cmp	r4, #0
    1e6e:	d11f      	bne.n	1eb0 <__aeabi_fsub+0x270>
    1e70:	2b00      	cmp	r3, #0
    1e72:	d059      	beq.n	1f28 <__aeabi_fsub+0x2e8>
    1e74:	43c0      	mvns	r0, r0
    1e76:	2800      	cmp	r0, #0
    1e78:	d00b      	beq.n	1e92 <__aeabi_fsub+0x252>
    1e7a:	2eff      	cmp	r6, #255	; 0xff
    1e7c:	d04f      	beq.n	1f1e <__aeabi_fsub+0x2de>
    1e7e:	281b      	cmp	r0, #27
    1e80:	dc5e      	bgt.n	1f40 <__aeabi_fsub+0x300>
    1e82:	001d      	movs	r5, r3
    1e84:	2420      	movs	r4, #32
    1e86:	40c5      	lsrs	r5, r0
    1e88:	1a20      	subs	r0, r4, r0
    1e8a:	4083      	lsls	r3, r0
    1e8c:	1e58      	subs	r0, r3, #1
    1e8e:	4183      	sbcs	r3, r0
    1e90:	432b      	orrs	r3, r5
    1e92:	189b      	adds	r3, r3, r2
    1e94:	0034      	movs	r4, r6
    1e96:	e758      	b.n	1d4a <__aeabi_fsub+0x10a>
    1e98:	2b00      	cmp	r3, #0
    1e9a:	d11c      	bne.n	1ed6 <__aeabi_fsub+0x296>
    1e9c:	2a00      	cmp	r2, #0
    1e9e:	d049      	beq.n	1f34 <__aeabi_fsub+0x2f4>
    1ea0:	0013      	movs	r3, r2
    1ea2:	000d      	movs	r5, r1
    1ea4:	24ff      	movs	r4, #255	; 0xff
    1ea6:	e6e6      	b.n	1c76 <__aeabi_fsub+0x36>
    1ea8:	0013      	movs	r3, r2
    1eaa:	0034      	movs	r4, r6
    1eac:	000d      	movs	r5, r1
    1eae:	e6e2      	b.n	1c76 <__aeabi_fsub+0x36>
    1eb0:	2eff      	cmp	r6, #255	; 0xff
    1eb2:	d034      	beq.n	1f1e <__aeabi_fsub+0x2de>
    1eb4:	2480      	movs	r4, #128	; 0x80
    1eb6:	04e4      	lsls	r4, r4, #19
    1eb8:	4240      	negs	r0, r0
    1eba:	4323      	orrs	r3, r4
    1ebc:	e7df      	b.n	1e7e <__aeabi_fsub+0x23e>
    1ebe:	2a00      	cmp	r2, #0
    1ec0:	d100      	bne.n	1ec4 <__aeabi_fsub+0x284>
    1ec2:	e6d8      	b.n	1c76 <__aeabi_fsub+0x36>
    1ec4:	2780      	movs	r7, #128	; 0x80
    1ec6:	1a98      	subs	r0, r3, r2
    1ec8:	04ff      	lsls	r7, r7, #19
    1eca:	4007      	ands	r7, r0
    1ecc:	d100      	bne.n	1ed0 <__aeabi_fsub+0x290>
    1ece:	e74d      	b.n	1d6c <__aeabi_fsub+0x12c>
    1ed0:	1ad3      	subs	r3, r2, r3
    1ed2:	000d      	movs	r5, r1
    1ed4:	e6cf      	b.n	1c76 <__aeabi_fsub+0x36>
    1ed6:	24ff      	movs	r4, #255	; 0xff
    1ed8:	2a00      	cmp	r2, #0
    1eda:	d100      	bne.n	1ede <__aeabi_fsub+0x29e>
    1edc:	e6cb      	b.n	1c76 <__aeabi_fsub+0x36>
    1ede:	2080      	movs	r0, #128	; 0x80
    1ee0:	08db      	lsrs	r3, r3, #3
    1ee2:	03c0      	lsls	r0, r0, #15
    1ee4:	4203      	tst	r3, r0
    1ee6:	d004      	beq.n	1ef2 <__aeabi_fsub+0x2b2>
    1ee8:	08d2      	lsrs	r2, r2, #3
    1eea:	4202      	tst	r2, r0
    1eec:	d101      	bne.n	1ef2 <__aeabi_fsub+0x2b2>
    1eee:	0013      	movs	r3, r2
    1ef0:	000d      	movs	r5, r1
    1ef2:	00db      	lsls	r3, r3, #3
    1ef4:	24ff      	movs	r4, #255	; 0xff
    1ef6:	e6be      	b.n	1c76 <__aeabi_fsub+0x36>
    1ef8:	2b00      	cmp	r3, #0
    1efa:	d010      	beq.n	1f1e <__aeabi_fsub+0x2de>
    1efc:	24ff      	movs	r4, #255	; 0xff
    1efe:	2a00      	cmp	r2, #0
    1f00:	d100      	bne.n	1f04 <__aeabi_fsub+0x2c4>
    1f02:	e6b8      	b.n	1c76 <__aeabi_fsub+0x36>
    1f04:	2080      	movs	r0, #128	; 0x80
    1f06:	08db      	lsrs	r3, r3, #3
    1f08:	03c0      	lsls	r0, r0, #15
    1f0a:	4203      	tst	r3, r0
    1f0c:	d003      	beq.n	1f16 <__aeabi_fsub+0x2d6>
    1f0e:	08d2      	lsrs	r2, r2, #3
    1f10:	4202      	tst	r2, r0
    1f12:	d100      	bne.n	1f16 <__aeabi_fsub+0x2d6>
    1f14:	0013      	movs	r3, r2
    1f16:	00db      	lsls	r3, r3, #3
    1f18:	000d      	movs	r5, r1
    1f1a:	24ff      	movs	r4, #255	; 0xff
    1f1c:	e6ab      	b.n	1c76 <__aeabi_fsub+0x36>
    1f1e:	0013      	movs	r3, r2
    1f20:	24ff      	movs	r4, #255	; 0xff
    1f22:	e6a8      	b.n	1c76 <__aeabi_fsub+0x36>
    1f24:	2301      	movs	r3, #1
    1f26:	e76e      	b.n	1e06 <__aeabi_fsub+0x1c6>
    1f28:	0013      	movs	r3, r2
    1f2a:	0034      	movs	r4, r6
    1f2c:	e6a3      	b.n	1c76 <__aeabi_fsub+0x36>
    1f2e:	2700      	movs	r7, #0
    1f30:	2500      	movs	r5, #0
    1f32:	e71e      	b.n	1d72 <__aeabi_fsub+0x132>
    1f34:	2780      	movs	r7, #128	; 0x80
    1f36:	2500      	movs	r5, #0
    1f38:	03ff      	lsls	r7, r7, #15
    1f3a:	e6e9      	b.n	1d10 <__aeabi_fsub+0xd0>
    1f3c:	0013      	movs	r3, r2
    1f3e:	e69a      	b.n	1c76 <__aeabi_fsub+0x36>
    1f40:	2301      	movs	r3, #1
    1f42:	e7a6      	b.n	1e92 <__aeabi_fsub+0x252>
    1f44:	7dffffff 	.word	0x7dffffff
    1f48:	fbffffff 	.word	0xfbffffff

00001f4c <__aeabi_ui2f>:
    1f4c:	b570      	push	{r4, r5, r6, lr}
    1f4e:	1e04      	subs	r4, r0, #0
    1f50:	d028      	beq.n	1fa4 <__aeabi_ui2f+0x58>
    1f52:	f000 fbd5 	bl	2700 <__clzsi2>
    1f56:	239e      	movs	r3, #158	; 0x9e
    1f58:	1a1b      	subs	r3, r3, r0
    1f5a:	2b96      	cmp	r3, #150	; 0x96
    1f5c:	dc0a      	bgt.n	1f74 <__aeabi_ui2f+0x28>
    1f5e:	2296      	movs	r2, #150	; 0x96
    1f60:	1ad2      	subs	r2, r2, r3
    1f62:	4094      	lsls	r4, r2
    1f64:	0262      	lsls	r2, r4, #9
    1f66:	0a52      	lsrs	r2, r2, #9
    1f68:	b2d8      	uxtb	r0, r3
    1f6a:	0252      	lsls	r2, r2, #9
    1f6c:	0a52      	lsrs	r2, r2, #9
    1f6e:	05c0      	lsls	r0, r0, #23
    1f70:	4310      	orrs	r0, r2
    1f72:	bd70      	pop	{r4, r5, r6, pc}
    1f74:	2b99      	cmp	r3, #153	; 0x99
    1f76:	dc18      	bgt.n	1faa <__aeabi_ui2f+0x5e>
    1f78:	2299      	movs	r2, #153	; 0x99
    1f7a:	1ad2      	subs	r2, r2, r3
    1f7c:	4094      	lsls	r4, r2
    1f7e:	4a11      	ldr	r2, [pc, #68]	; (1fc4 <__aeabi_ui2f+0x78>)
    1f80:	4022      	ands	r2, r4
    1f82:	0761      	lsls	r1, r4, #29
    1f84:	d004      	beq.n	1f90 <__aeabi_ui2f+0x44>
    1f86:	210f      	movs	r1, #15
    1f88:	400c      	ands	r4, r1
    1f8a:	2c04      	cmp	r4, #4
    1f8c:	d000      	beq.n	1f90 <__aeabi_ui2f+0x44>
    1f8e:	3204      	adds	r2, #4
    1f90:	0151      	lsls	r1, r2, #5
    1f92:	d503      	bpl.n	1f9c <__aeabi_ui2f+0x50>
    1f94:	4b0b      	ldr	r3, [pc, #44]	; (1fc4 <__aeabi_ui2f+0x78>)
    1f96:	401a      	ands	r2, r3
    1f98:	239f      	movs	r3, #159	; 0x9f
    1f9a:	1a1b      	subs	r3, r3, r0
    1f9c:	0192      	lsls	r2, r2, #6
    1f9e:	0a52      	lsrs	r2, r2, #9
    1fa0:	b2d8      	uxtb	r0, r3
    1fa2:	e7e2      	b.n	1f6a <__aeabi_ui2f+0x1e>
    1fa4:	2000      	movs	r0, #0
    1fa6:	2200      	movs	r2, #0
    1fa8:	e7df      	b.n	1f6a <__aeabi_ui2f+0x1e>
    1faa:	2205      	movs	r2, #5
    1fac:	0025      	movs	r5, r4
    1fae:	1a12      	subs	r2, r2, r0
    1fb0:	21b9      	movs	r1, #185	; 0xb9
    1fb2:	40d5      	lsrs	r5, r2
    1fb4:	0022      	movs	r2, r4
    1fb6:	1ac9      	subs	r1, r1, r3
    1fb8:	408a      	lsls	r2, r1
    1fba:	1e54      	subs	r4, r2, #1
    1fbc:	41a2      	sbcs	r2, r4
    1fbe:	002c      	movs	r4, r5
    1fc0:	4314      	orrs	r4, r2
    1fc2:	e7dc      	b.n	1f7e <__aeabi_ui2f+0x32>
    1fc4:	fbffffff 	.word	0xfbffffff

00001fc8 <__aeabi_dmul>:
    1fc8:	b5f0      	push	{r4, r5, r6, r7, lr}
    1fca:	465f      	mov	r7, fp
    1fcc:	4656      	mov	r6, sl
    1fce:	464d      	mov	r5, r9
    1fd0:	4644      	mov	r4, r8
    1fd2:	b4f0      	push	{r4, r5, r6, r7}
    1fd4:	030d      	lsls	r5, r1, #12
    1fd6:	4699      	mov	r9, r3
    1fd8:	004e      	lsls	r6, r1, #1
    1fda:	0b2b      	lsrs	r3, r5, #12
    1fdc:	b087      	sub	sp, #28
    1fde:	0007      	movs	r7, r0
    1fe0:	4692      	mov	sl, r2
    1fe2:	4680      	mov	r8, r0
    1fe4:	469b      	mov	fp, r3
    1fe6:	0d76      	lsrs	r6, r6, #21
    1fe8:	0fcc      	lsrs	r4, r1, #31
    1fea:	2e00      	cmp	r6, #0
    1fec:	d069      	beq.n	20c2 <STACK_SIZE+0xc2>
    1fee:	4b6d      	ldr	r3, [pc, #436]	; (21a4 <STACK_SIZE+0x1a4>)
    1ff0:	429e      	cmp	r6, r3
    1ff2:	d035      	beq.n	2060 <STACK_SIZE+0x60>
    1ff4:	465b      	mov	r3, fp
    1ff6:	2280      	movs	r2, #128	; 0x80
    1ff8:	00dd      	lsls	r5, r3, #3
    1ffa:	0412      	lsls	r2, r2, #16
    1ffc:	0f43      	lsrs	r3, r0, #29
    1ffe:	4313      	orrs	r3, r2
    2000:	432b      	orrs	r3, r5
    2002:	469b      	mov	fp, r3
    2004:	00c3      	lsls	r3, r0, #3
    2006:	4698      	mov	r8, r3
    2008:	4b67      	ldr	r3, [pc, #412]	; (21a8 <STACK_SIZE+0x1a8>)
    200a:	2700      	movs	r7, #0
    200c:	469c      	mov	ip, r3
    200e:	2300      	movs	r3, #0
    2010:	4466      	add	r6, ip
    2012:	9301      	str	r3, [sp, #4]
    2014:	464a      	mov	r2, r9
    2016:	0315      	lsls	r5, r2, #12
    2018:	0050      	lsls	r0, r2, #1
    201a:	0fd2      	lsrs	r2, r2, #31
    201c:	4653      	mov	r3, sl
    201e:	0b2d      	lsrs	r5, r5, #12
    2020:	0d40      	lsrs	r0, r0, #21
    2022:	4691      	mov	r9, r2
    2024:	d100      	bne.n	2028 <STACK_SIZE+0x28>
    2026:	e076      	b.n	2116 <STACK_SIZE+0x116>
    2028:	4a5e      	ldr	r2, [pc, #376]	; (21a4 <STACK_SIZE+0x1a4>)
    202a:	4290      	cmp	r0, r2
    202c:	d06c      	beq.n	2108 <STACK_SIZE+0x108>
    202e:	2280      	movs	r2, #128	; 0x80
    2030:	0f5b      	lsrs	r3, r3, #29
    2032:	0412      	lsls	r2, r2, #16
    2034:	4313      	orrs	r3, r2
    2036:	4a5c      	ldr	r2, [pc, #368]	; (21a8 <STACK_SIZE+0x1a8>)
    2038:	00ed      	lsls	r5, r5, #3
    203a:	4694      	mov	ip, r2
    203c:	431d      	orrs	r5, r3
    203e:	4653      	mov	r3, sl
    2040:	2200      	movs	r2, #0
    2042:	00db      	lsls	r3, r3, #3
    2044:	4460      	add	r0, ip
    2046:	4649      	mov	r1, r9
    2048:	1836      	adds	r6, r6, r0
    204a:	1c70      	adds	r0, r6, #1
    204c:	4061      	eors	r1, r4
    204e:	9002      	str	r0, [sp, #8]
    2050:	4317      	orrs	r7, r2
    2052:	2f0f      	cmp	r7, #15
    2054:	d900      	bls.n	2058 <STACK_SIZE+0x58>
    2056:	e0af      	b.n	21b8 <STACK_SIZE+0x1b8>
    2058:	4854      	ldr	r0, [pc, #336]	; (21ac <STACK_SIZE+0x1ac>)
    205a:	00bf      	lsls	r7, r7, #2
    205c:	59c7      	ldr	r7, [r0, r7]
    205e:	46bf      	mov	pc, r7
    2060:	465b      	mov	r3, fp
    2062:	431f      	orrs	r7, r3
    2064:	d000      	beq.n	2068 <STACK_SIZE+0x68>
    2066:	e088      	b.n	217a <STACK_SIZE+0x17a>
    2068:	2300      	movs	r3, #0
    206a:	469b      	mov	fp, r3
    206c:	4698      	mov	r8, r3
    206e:	3302      	adds	r3, #2
    2070:	2708      	movs	r7, #8
    2072:	9301      	str	r3, [sp, #4]
    2074:	e7ce      	b.n	2014 <STACK_SIZE+0x14>
    2076:	4649      	mov	r1, r9
    2078:	2a02      	cmp	r2, #2
    207a:	d06a      	beq.n	2152 <STACK_SIZE+0x152>
    207c:	2a03      	cmp	r2, #3
    207e:	d100      	bne.n	2082 <STACK_SIZE+0x82>
    2080:	e209      	b.n	2496 <STACK_SIZE+0x496>
    2082:	2a01      	cmp	r2, #1
    2084:	d000      	beq.n	2088 <STACK_SIZE+0x88>
    2086:	e1bb      	b.n	2400 <STACK_SIZE+0x400>
    2088:	4011      	ands	r1, r2
    208a:	2200      	movs	r2, #0
    208c:	2300      	movs	r3, #0
    208e:	2500      	movs	r5, #0
    2090:	4690      	mov	r8, r2
    2092:	b2cc      	uxtb	r4, r1
    2094:	2100      	movs	r1, #0
    2096:	032d      	lsls	r5, r5, #12
    2098:	0d0a      	lsrs	r2, r1, #20
    209a:	0512      	lsls	r2, r2, #20
    209c:	0b2d      	lsrs	r5, r5, #12
    209e:	4315      	orrs	r5, r2
    20a0:	4a43      	ldr	r2, [pc, #268]	; (21b0 <STACK_SIZE+0x1b0>)
    20a2:	051b      	lsls	r3, r3, #20
    20a4:	4015      	ands	r5, r2
    20a6:	431d      	orrs	r5, r3
    20a8:	006d      	lsls	r5, r5, #1
    20aa:	07e4      	lsls	r4, r4, #31
    20ac:	086d      	lsrs	r5, r5, #1
    20ae:	4325      	orrs	r5, r4
    20b0:	4640      	mov	r0, r8
    20b2:	0029      	movs	r1, r5
    20b4:	b007      	add	sp, #28
    20b6:	bc3c      	pop	{r2, r3, r4, r5}
    20b8:	4690      	mov	r8, r2
    20ba:	4699      	mov	r9, r3
    20bc:	46a2      	mov	sl, r4
    20be:	46ab      	mov	fp, r5
    20c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    20c2:	4303      	orrs	r3, r0
    20c4:	d052      	beq.n	216c <STACK_SIZE+0x16c>
    20c6:	465b      	mov	r3, fp
    20c8:	2b00      	cmp	r3, #0
    20ca:	d100      	bne.n	20ce <STACK_SIZE+0xce>
    20cc:	e18a      	b.n	23e4 <STACK_SIZE+0x3e4>
    20ce:	4658      	mov	r0, fp
    20d0:	f000 fb16 	bl	2700 <__clzsi2>
    20d4:	0003      	movs	r3, r0
    20d6:	3b0b      	subs	r3, #11
    20d8:	2b1c      	cmp	r3, #28
    20da:	dd00      	ble.n	20de <STACK_SIZE+0xde>
    20dc:	e17b      	b.n	23d6 <STACK_SIZE+0x3d6>
    20de:	221d      	movs	r2, #29
    20e0:	1ad3      	subs	r3, r2, r3
    20e2:	003a      	movs	r2, r7
    20e4:	0001      	movs	r1, r0
    20e6:	465d      	mov	r5, fp
    20e8:	40da      	lsrs	r2, r3
    20ea:	3908      	subs	r1, #8
    20ec:	408d      	lsls	r5, r1
    20ee:	0013      	movs	r3, r2
    20f0:	408f      	lsls	r7, r1
    20f2:	432b      	orrs	r3, r5
    20f4:	469b      	mov	fp, r3
    20f6:	46b8      	mov	r8, r7
    20f8:	4b2e      	ldr	r3, [pc, #184]	; (21b4 <STACK_SIZE+0x1b4>)
    20fa:	2700      	movs	r7, #0
    20fc:	469c      	mov	ip, r3
    20fe:	2300      	movs	r3, #0
    2100:	4460      	add	r0, ip
    2102:	4246      	negs	r6, r0
    2104:	9301      	str	r3, [sp, #4]
    2106:	e785      	b.n	2014 <STACK_SIZE+0x14>
    2108:	4652      	mov	r2, sl
    210a:	432a      	orrs	r2, r5
    210c:	d12c      	bne.n	2168 <STACK_SIZE+0x168>
    210e:	2500      	movs	r5, #0
    2110:	2300      	movs	r3, #0
    2112:	2202      	movs	r2, #2
    2114:	e797      	b.n	2046 <STACK_SIZE+0x46>
    2116:	4652      	mov	r2, sl
    2118:	432a      	orrs	r2, r5
    211a:	d021      	beq.n	2160 <STACK_SIZE+0x160>
    211c:	2d00      	cmp	r5, #0
    211e:	d100      	bne.n	2122 <STACK_SIZE+0x122>
    2120:	e154      	b.n	23cc <STACK_SIZE+0x3cc>
    2122:	0028      	movs	r0, r5
    2124:	f000 faec 	bl	2700 <__clzsi2>
    2128:	0003      	movs	r3, r0
    212a:	3b0b      	subs	r3, #11
    212c:	2b1c      	cmp	r3, #28
    212e:	dd00      	ble.n	2132 <STACK_SIZE+0x132>
    2130:	e146      	b.n	23c0 <STACK_SIZE+0x3c0>
    2132:	211d      	movs	r1, #29
    2134:	1acb      	subs	r3, r1, r3
    2136:	4651      	mov	r1, sl
    2138:	0002      	movs	r2, r0
    213a:	40d9      	lsrs	r1, r3
    213c:	4653      	mov	r3, sl
    213e:	3a08      	subs	r2, #8
    2140:	4095      	lsls	r5, r2
    2142:	4093      	lsls	r3, r2
    2144:	430d      	orrs	r5, r1
    2146:	4a1b      	ldr	r2, [pc, #108]	; (21b4 <STACK_SIZE+0x1b4>)
    2148:	4694      	mov	ip, r2
    214a:	4460      	add	r0, ip
    214c:	4240      	negs	r0, r0
    214e:	2200      	movs	r2, #0
    2150:	e779      	b.n	2046 <STACK_SIZE+0x46>
    2152:	2401      	movs	r4, #1
    2154:	2200      	movs	r2, #0
    2156:	400c      	ands	r4, r1
    2158:	4b12      	ldr	r3, [pc, #72]	; (21a4 <STACK_SIZE+0x1a4>)
    215a:	2500      	movs	r5, #0
    215c:	4690      	mov	r8, r2
    215e:	e799      	b.n	2094 <STACK_SIZE+0x94>
    2160:	2500      	movs	r5, #0
    2162:	2300      	movs	r3, #0
    2164:	2201      	movs	r2, #1
    2166:	e76e      	b.n	2046 <STACK_SIZE+0x46>
    2168:	2203      	movs	r2, #3
    216a:	e76c      	b.n	2046 <STACK_SIZE+0x46>
    216c:	2300      	movs	r3, #0
    216e:	469b      	mov	fp, r3
    2170:	4698      	mov	r8, r3
    2172:	3301      	adds	r3, #1
    2174:	2704      	movs	r7, #4
    2176:	9301      	str	r3, [sp, #4]
    2178:	e74c      	b.n	2014 <STACK_SIZE+0x14>
    217a:	2303      	movs	r3, #3
    217c:	270c      	movs	r7, #12
    217e:	9301      	str	r3, [sp, #4]
    2180:	e748      	b.n	2014 <STACK_SIZE+0x14>
    2182:	2300      	movs	r3, #0
    2184:	2580      	movs	r5, #128	; 0x80
    2186:	4698      	mov	r8, r3
    2188:	2400      	movs	r4, #0
    218a:	032d      	lsls	r5, r5, #12
    218c:	4b05      	ldr	r3, [pc, #20]	; (21a4 <STACK_SIZE+0x1a4>)
    218e:	e781      	b.n	2094 <STACK_SIZE+0x94>
    2190:	465d      	mov	r5, fp
    2192:	4643      	mov	r3, r8
    2194:	9a01      	ldr	r2, [sp, #4]
    2196:	e76f      	b.n	2078 <STACK_SIZE+0x78>
    2198:	465d      	mov	r5, fp
    219a:	4643      	mov	r3, r8
    219c:	0021      	movs	r1, r4
    219e:	9a01      	ldr	r2, [sp, #4]
    21a0:	e76a      	b.n	2078 <STACK_SIZE+0x78>
    21a2:	46c0      	nop			; (mov r8, r8)
    21a4:	000007ff 	.word	0x000007ff
    21a8:	fffffc01 	.word	0xfffffc01
    21ac:	00002b8c 	.word	0x00002b8c
    21b0:	800fffff 	.word	0x800fffff
    21b4:	000003f3 	.word	0x000003f3
    21b8:	4642      	mov	r2, r8
    21ba:	0c12      	lsrs	r2, r2, #16
    21bc:	4691      	mov	r9, r2
    21be:	0c1a      	lsrs	r2, r3, #16
    21c0:	4694      	mov	ip, r2
    21c2:	4642      	mov	r2, r8
    21c4:	0417      	lsls	r7, r2, #16
    21c6:	464a      	mov	r2, r9
    21c8:	041b      	lsls	r3, r3, #16
    21ca:	0c1b      	lsrs	r3, r3, #16
    21cc:	435a      	muls	r2, r3
    21ce:	4660      	mov	r0, ip
    21d0:	4690      	mov	r8, r2
    21d2:	464a      	mov	r2, r9
    21d4:	4342      	muls	r2, r0
    21d6:	0010      	movs	r0, r2
    21d8:	9203      	str	r2, [sp, #12]
    21da:	4662      	mov	r2, ip
    21dc:	001c      	movs	r4, r3
    21de:	0c3f      	lsrs	r7, r7, #16
    21e0:	437a      	muls	r2, r7
    21e2:	437c      	muls	r4, r7
    21e4:	4442      	add	r2, r8
    21e6:	9201      	str	r2, [sp, #4]
    21e8:	0c22      	lsrs	r2, r4, #16
    21ea:	4692      	mov	sl, r2
    21ec:	9a01      	ldr	r2, [sp, #4]
    21ee:	4452      	add	r2, sl
    21f0:	4590      	cmp	r8, r2
    21f2:	d906      	bls.n	2202 <STACK_SIZE+0x202>
    21f4:	4682      	mov	sl, r0
    21f6:	2080      	movs	r0, #128	; 0x80
    21f8:	0240      	lsls	r0, r0, #9
    21fa:	4680      	mov	r8, r0
    21fc:	44c2      	add	sl, r8
    21fe:	4650      	mov	r0, sl
    2200:	9003      	str	r0, [sp, #12]
    2202:	0c10      	lsrs	r0, r2, #16
    2204:	9004      	str	r0, [sp, #16]
    2206:	4648      	mov	r0, r9
    2208:	0424      	lsls	r4, r4, #16
    220a:	0c24      	lsrs	r4, r4, #16
    220c:	0412      	lsls	r2, r2, #16
    220e:	1912      	adds	r2, r2, r4
    2210:	9205      	str	r2, [sp, #20]
    2212:	0c2a      	lsrs	r2, r5, #16
    2214:	042d      	lsls	r5, r5, #16
    2216:	0c2d      	lsrs	r5, r5, #16
    2218:	4368      	muls	r0, r5
    221a:	002c      	movs	r4, r5
    221c:	4682      	mov	sl, r0
    221e:	4648      	mov	r0, r9
    2220:	437c      	muls	r4, r7
    2222:	4350      	muls	r0, r2
    2224:	4681      	mov	r9, r0
    2226:	0c20      	lsrs	r0, r4, #16
    2228:	4680      	mov	r8, r0
    222a:	4357      	muls	r7, r2
    222c:	4457      	add	r7, sl
    222e:	4447      	add	r7, r8
    2230:	45ba      	cmp	sl, r7
    2232:	d903      	bls.n	223c <STACK_SIZE+0x23c>
    2234:	2080      	movs	r0, #128	; 0x80
    2236:	0240      	lsls	r0, r0, #9
    2238:	4680      	mov	r8, r0
    223a:	44c1      	add	r9, r8
    223c:	0c38      	lsrs	r0, r7, #16
    223e:	043f      	lsls	r7, r7, #16
    2240:	46b8      	mov	r8, r7
    2242:	4448      	add	r0, r9
    2244:	0424      	lsls	r4, r4, #16
    2246:	0c24      	lsrs	r4, r4, #16
    2248:	9001      	str	r0, [sp, #4]
    224a:	9804      	ldr	r0, [sp, #16]
    224c:	44a0      	add	r8, r4
    224e:	4440      	add	r0, r8
    2250:	9004      	str	r0, [sp, #16]
    2252:	4658      	mov	r0, fp
    2254:	0c00      	lsrs	r0, r0, #16
    2256:	4681      	mov	r9, r0
    2258:	4658      	mov	r0, fp
    225a:	0404      	lsls	r4, r0, #16
    225c:	0c20      	lsrs	r0, r4, #16
    225e:	4682      	mov	sl, r0
    2260:	0007      	movs	r7, r0
    2262:	4648      	mov	r0, r9
    2264:	435f      	muls	r7, r3
    2266:	464c      	mov	r4, r9
    2268:	4343      	muls	r3, r0
    226a:	4660      	mov	r0, ip
    226c:	4360      	muls	r0, r4
    226e:	4664      	mov	r4, ip
    2270:	4683      	mov	fp, r0
    2272:	4650      	mov	r0, sl
    2274:	4344      	muls	r4, r0
    2276:	0c38      	lsrs	r0, r7, #16
    2278:	4684      	mov	ip, r0
    227a:	18e4      	adds	r4, r4, r3
    227c:	4464      	add	r4, ip
    227e:	42a3      	cmp	r3, r4
    2280:	d903      	bls.n	228a <STACK_SIZE+0x28a>
    2282:	2380      	movs	r3, #128	; 0x80
    2284:	025b      	lsls	r3, r3, #9
    2286:	469c      	mov	ip, r3
    2288:	44e3      	add	fp, ip
    228a:	4648      	mov	r0, r9
    228c:	043f      	lsls	r7, r7, #16
    228e:	0c23      	lsrs	r3, r4, #16
    2290:	0c3f      	lsrs	r7, r7, #16
    2292:	0424      	lsls	r4, r4, #16
    2294:	19e4      	adds	r4, r4, r7
    2296:	4657      	mov	r7, sl
    2298:	4368      	muls	r0, r5
    229a:	436f      	muls	r7, r5
    229c:	4684      	mov	ip, r0
    229e:	464d      	mov	r5, r9
    22a0:	4650      	mov	r0, sl
    22a2:	4355      	muls	r5, r2
    22a4:	4342      	muls	r2, r0
    22a6:	0c38      	lsrs	r0, r7, #16
    22a8:	4681      	mov	r9, r0
    22aa:	4462      	add	r2, ip
    22ac:	444a      	add	r2, r9
    22ae:	445b      	add	r3, fp
    22b0:	4594      	cmp	ip, r2
    22b2:	d903      	bls.n	22bc <STACK_SIZE+0x2bc>
    22b4:	2080      	movs	r0, #128	; 0x80
    22b6:	0240      	lsls	r0, r0, #9
    22b8:	4684      	mov	ip, r0
    22ba:	4465      	add	r5, ip
    22bc:	9803      	ldr	r0, [sp, #12]
    22be:	043f      	lsls	r7, r7, #16
    22c0:	4683      	mov	fp, r0
    22c2:	9804      	ldr	r0, [sp, #16]
    22c4:	0c3f      	lsrs	r7, r7, #16
    22c6:	4684      	mov	ip, r0
    22c8:	44e3      	add	fp, ip
    22ca:	45c3      	cmp	fp, r8
    22cc:	4180      	sbcs	r0, r0
    22ce:	4240      	negs	r0, r0
    22d0:	4682      	mov	sl, r0
    22d2:	0410      	lsls	r0, r2, #16
    22d4:	4684      	mov	ip, r0
    22d6:	9801      	ldr	r0, [sp, #4]
    22d8:	4467      	add	r7, ip
    22da:	4684      	mov	ip, r0
    22dc:	4467      	add	r7, ip
    22de:	44a3      	add	fp, r4
    22e0:	46bc      	mov	ip, r7
    22e2:	45a3      	cmp	fp, r4
    22e4:	41a4      	sbcs	r4, r4
    22e6:	4699      	mov	r9, r3
    22e8:	44d4      	add	ip, sl
    22ea:	4264      	negs	r4, r4
    22ec:	4287      	cmp	r7, r0
    22ee:	41bf      	sbcs	r7, r7
    22f0:	45d4      	cmp	ip, sl
    22f2:	4180      	sbcs	r0, r0
    22f4:	44e1      	add	r9, ip
    22f6:	46a0      	mov	r8, r4
    22f8:	4599      	cmp	r9, r3
    22fa:	419b      	sbcs	r3, r3
    22fc:	427f      	negs	r7, r7
    22fe:	4240      	negs	r0, r0
    2300:	44c8      	add	r8, r9
    2302:	4307      	orrs	r7, r0
    2304:	0c12      	lsrs	r2, r2, #16
    2306:	18ba      	adds	r2, r7, r2
    2308:	45a0      	cmp	r8, r4
    230a:	41a4      	sbcs	r4, r4
    230c:	425f      	negs	r7, r3
    230e:	003b      	movs	r3, r7
    2310:	4264      	negs	r4, r4
    2312:	4323      	orrs	r3, r4
    2314:	18d7      	adds	r7, r2, r3
    2316:	4643      	mov	r3, r8
    2318:	197d      	adds	r5, r7, r5
    231a:	0ddb      	lsrs	r3, r3, #23
    231c:	026d      	lsls	r5, r5, #9
    231e:	431d      	orrs	r5, r3
    2320:	465b      	mov	r3, fp
    2322:	025a      	lsls	r2, r3, #9
    2324:	9b05      	ldr	r3, [sp, #20]
    2326:	431a      	orrs	r2, r3
    2328:	1e53      	subs	r3, r2, #1
    232a:	419a      	sbcs	r2, r3
    232c:	465b      	mov	r3, fp
    232e:	0ddb      	lsrs	r3, r3, #23
    2330:	431a      	orrs	r2, r3
    2332:	4643      	mov	r3, r8
    2334:	025b      	lsls	r3, r3, #9
    2336:	4313      	orrs	r3, r2
    2338:	01ea      	lsls	r2, r5, #7
    233a:	d507      	bpl.n	234c <STACK_SIZE+0x34c>
    233c:	2201      	movs	r2, #1
    233e:	085c      	lsrs	r4, r3, #1
    2340:	4013      	ands	r3, r2
    2342:	4323      	orrs	r3, r4
    2344:	07ea      	lsls	r2, r5, #31
    2346:	9e02      	ldr	r6, [sp, #8]
    2348:	4313      	orrs	r3, r2
    234a:	086d      	lsrs	r5, r5, #1
    234c:	4a57      	ldr	r2, [pc, #348]	; (24ac <STACK_SIZE+0x4ac>)
    234e:	18b2      	adds	r2, r6, r2
    2350:	2a00      	cmp	r2, #0
    2352:	dd4b      	ble.n	23ec <STACK_SIZE+0x3ec>
    2354:	0758      	lsls	r0, r3, #29
    2356:	d009      	beq.n	236c <STACK_SIZE+0x36c>
    2358:	200f      	movs	r0, #15
    235a:	4018      	ands	r0, r3
    235c:	2804      	cmp	r0, #4
    235e:	d005      	beq.n	236c <STACK_SIZE+0x36c>
    2360:	1d18      	adds	r0, r3, #4
    2362:	4298      	cmp	r0, r3
    2364:	419b      	sbcs	r3, r3
    2366:	425b      	negs	r3, r3
    2368:	18ed      	adds	r5, r5, r3
    236a:	0003      	movs	r3, r0
    236c:	01e8      	lsls	r0, r5, #7
    236e:	d504      	bpl.n	237a <STACK_SIZE+0x37a>
    2370:	4a4f      	ldr	r2, [pc, #316]	; (24b0 <STACK_SIZE+0x4b0>)
    2372:	4015      	ands	r5, r2
    2374:	2280      	movs	r2, #128	; 0x80
    2376:	00d2      	lsls	r2, r2, #3
    2378:	18b2      	adds	r2, r6, r2
    237a:	484e      	ldr	r0, [pc, #312]	; (24b4 <STACK_SIZE+0x4b4>)
    237c:	4282      	cmp	r2, r0
    237e:	dd00      	ble.n	2382 <STACK_SIZE+0x382>
    2380:	e6e7      	b.n	2152 <STACK_SIZE+0x152>
    2382:	2401      	movs	r4, #1
    2384:	08db      	lsrs	r3, r3, #3
    2386:	0768      	lsls	r0, r5, #29
    2388:	4318      	orrs	r0, r3
    238a:	026d      	lsls	r5, r5, #9
    238c:	0553      	lsls	r3, r2, #21
    238e:	4680      	mov	r8, r0
    2390:	0b2d      	lsrs	r5, r5, #12
    2392:	0d5b      	lsrs	r3, r3, #21
    2394:	400c      	ands	r4, r1
    2396:	e67d      	b.n	2094 <STACK_SIZE+0x94>
    2398:	2280      	movs	r2, #128	; 0x80
    239a:	4659      	mov	r1, fp
    239c:	0312      	lsls	r2, r2, #12
    239e:	4211      	tst	r1, r2
    23a0:	d008      	beq.n	23b4 <STACK_SIZE+0x3b4>
    23a2:	4215      	tst	r5, r2
    23a4:	d106      	bne.n	23b4 <STACK_SIZE+0x3b4>
    23a6:	4315      	orrs	r5, r2
    23a8:	032d      	lsls	r5, r5, #12
    23aa:	4698      	mov	r8, r3
    23ac:	0b2d      	lsrs	r5, r5, #12
    23ae:	464c      	mov	r4, r9
    23b0:	4b41      	ldr	r3, [pc, #260]	; (24b8 <STACK_SIZE+0x4b8>)
    23b2:	e66f      	b.n	2094 <STACK_SIZE+0x94>
    23b4:	465d      	mov	r5, fp
    23b6:	4315      	orrs	r5, r2
    23b8:	032d      	lsls	r5, r5, #12
    23ba:	0b2d      	lsrs	r5, r5, #12
    23bc:	4b3e      	ldr	r3, [pc, #248]	; (24b8 <STACK_SIZE+0x4b8>)
    23be:	e669      	b.n	2094 <STACK_SIZE+0x94>
    23c0:	0003      	movs	r3, r0
    23c2:	4655      	mov	r5, sl
    23c4:	3b28      	subs	r3, #40	; 0x28
    23c6:	409d      	lsls	r5, r3
    23c8:	2300      	movs	r3, #0
    23ca:	e6bc      	b.n	2146 <STACK_SIZE+0x146>
    23cc:	4650      	mov	r0, sl
    23ce:	f000 f997 	bl	2700 <__clzsi2>
    23d2:	3020      	adds	r0, #32
    23d4:	e6a8      	b.n	2128 <STACK_SIZE+0x128>
    23d6:	0003      	movs	r3, r0
    23d8:	3b28      	subs	r3, #40	; 0x28
    23da:	409f      	lsls	r7, r3
    23dc:	2300      	movs	r3, #0
    23de:	46bb      	mov	fp, r7
    23e0:	4698      	mov	r8, r3
    23e2:	e689      	b.n	20f8 <STACK_SIZE+0xf8>
    23e4:	f000 f98c 	bl	2700 <__clzsi2>
    23e8:	3020      	adds	r0, #32
    23ea:	e673      	b.n	20d4 <STACK_SIZE+0xd4>
    23ec:	2401      	movs	r4, #1
    23ee:	1aa6      	subs	r6, r4, r2
    23f0:	2e38      	cmp	r6, #56	; 0x38
    23f2:	dd07      	ble.n	2404 <STACK_SIZE+0x404>
    23f4:	2200      	movs	r2, #0
    23f6:	400c      	ands	r4, r1
    23f8:	2300      	movs	r3, #0
    23fa:	2500      	movs	r5, #0
    23fc:	4690      	mov	r8, r2
    23fe:	e649      	b.n	2094 <STACK_SIZE+0x94>
    2400:	9e02      	ldr	r6, [sp, #8]
    2402:	e7a3      	b.n	234c <STACK_SIZE+0x34c>
    2404:	2e1f      	cmp	r6, #31
    2406:	dc20      	bgt.n	244a <STACK_SIZE+0x44a>
    2408:	2220      	movs	r2, #32
    240a:	002c      	movs	r4, r5
    240c:	0018      	movs	r0, r3
    240e:	1b92      	subs	r2, r2, r6
    2410:	40f0      	lsrs	r0, r6
    2412:	4094      	lsls	r4, r2
    2414:	4093      	lsls	r3, r2
    2416:	4304      	orrs	r4, r0
    2418:	1e58      	subs	r0, r3, #1
    241a:	4183      	sbcs	r3, r0
    241c:	431c      	orrs	r4, r3
    241e:	40f5      	lsrs	r5, r6
    2420:	0763      	lsls	r3, r4, #29
    2422:	d009      	beq.n	2438 <STACK_SIZE+0x438>
    2424:	230f      	movs	r3, #15
    2426:	4023      	ands	r3, r4
    2428:	2b04      	cmp	r3, #4
    242a:	d005      	beq.n	2438 <STACK_SIZE+0x438>
    242c:	0023      	movs	r3, r4
    242e:	1d1c      	adds	r4, r3, #4
    2430:	429c      	cmp	r4, r3
    2432:	4192      	sbcs	r2, r2
    2434:	4252      	negs	r2, r2
    2436:	18ad      	adds	r5, r5, r2
    2438:	022b      	lsls	r3, r5, #8
    243a:	d51f      	bpl.n	247c <STACK_SIZE+0x47c>
    243c:	2401      	movs	r4, #1
    243e:	2200      	movs	r2, #0
    2440:	400c      	ands	r4, r1
    2442:	2301      	movs	r3, #1
    2444:	2500      	movs	r5, #0
    2446:	4690      	mov	r8, r2
    2448:	e624      	b.n	2094 <STACK_SIZE+0x94>
    244a:	201f      	movs	r0, #31
    244c:	002c      	movs	r4, r5
    244e:	4240      	negs	r0, r0
    2450:	1a82      	subs	r2, r0, r2
    2452:	40d4      	lsrs	r4, r2
    2454:	2e20      	cmp	r6, #32
    2456:	d01c      	beq.n	2492 <STACK_SIZE+0x492>
    2458:	2240      	movs	r2, #64	; 0x40
    245a:	1b96      	subs	r6, r2, r6
    245c:	40b5      	lsls	r5, r6
    245e:	432b      	orrs	r3, r5
    2460:	1e58      	subs	r0, r3, #1
    2462:	4183      	sbcs	r3, r0
    2464:	2007      	movs	r0, #7
    2466:	4323      	orrs	r3, r4
    2468:	4018      	ands	r0, r3
    246a:	2500      	movs	r5, #0
    246c:	2800      	cmp	r0, #0
    246e:	d009      	beq.n	2484 <STACK_SIZE+0x484>
    2470:	220f      	movs	r2, #15
    2472:	2500      	movs	r5, #0
    2474:	401a      	ands	r2, r3
    2476:	001c      	movs	r4, r3
    2478:	2a04      	cmp	r2, #4
    247a:	d1d8      	bne.n	242e <STACK_SIZE+0x42e>
    247c:	0023      	movs	r3, r4
    247e:	0768      	lsls	r0, r5, #29
    2480:	026d      	lsls	r5, r5, #9
    2482:	0b2d      	lsrs	r5, r5, #12
    2484:	2401      	movs	r4, #1
    2486:	08db      	lsrs	r3, r3, #3
    2488:	4303      	orrs	r3, r0
    248a:	4698      	mov	r8, r3
    248c:	400c      	ands	r4, r1
    248e:	2300      	movs	r3, #0
    2490:	e600      	b.n	2094 <STACK_SIZE+0x94>
    2492:	2500      	movs	r5, #0
    2494:	e7e3      	b.n	245e <STACK_SIZE+0x45e>
    2496:	2280      	movs	r2, #128	; 0x80
    2498:	2401      	movs	r4, #1
    249a:	0312      	lsls	r2, r2, #12
    249c:	4315      	orrs	r5, r2
    249e:	032d      	lsls	r5, r5, #12
    24a0:	4698      	mov	r8, r3
    24a2:	0b2d      	lsrs	r5, r5, #12
    24a4:	400c      	ands	r4, r1
    24a6:	4b04      	ldr	r3, [pc, #16]	; (24b8 <STACK_SIZE+0x4b8>)
    24a8:	e5f4      	b.n	2094 <STACK_SIZE+0x94>
    24aa:	46c0      	nop			; (mov r8, r8)
    24ac:	000003ff 	.word	0x000003ff
    24b0:	feffffff 	.word	0xfeffffff
    24b4:	000007fe 	.word	0x000007fe
    24b8:	000007ff 	.word	0x000007ff

000024bc <__aeabi_i2d>:
    24bc:	b570      	push	{r4, r5, r6, lr}
    24be:	2800      	cmp	r0, #0
    24c0:	d030      	beq.n	2524 <__aeabi_i2d+0x68>
    24c2:	17c3      	asrs	r3, r0, #31
    24c4:	18c4      	adds	r4, r0, r3
    24c6:	405c      	eors	r4, r3
    24c8:	0fc5      	lsrs	r5, r0, #31
    24ca:	0020      	movs	r0, r4
    24cc:	f000 f918 	bl	2700 <__clzsi2>
    24d0:	4b17      	ldr	r3, [pc, #92]	; (2530 <__aeabi_i2d+0x74>)
    24d2:	4a18      	ldr	r2, [pc, #96]	; (2534 <__aeabi_i2d+0x78>)
    24d4:	1a1b      	subs	r3, r3, r0
    24d6:	1ad2      	subs	r2, r2, r3
    24d8:	2a1f      	cmp	r2, #31
    24da:	dd18      	ble.n	250e <__aeabi_i2d+0x52>
    24dc:	4a16      	ldr	r2, [pc, #88]	; (2538 <__aeabi_i2d+0x7c>)
    24de:	1ad2      	subs	r2, r2, r3
    24e0:	4094      	lsls	r4, r2
    24e2:	2200      	movs	r2, #0
    24e4:	0324      	lsls	r4, r4, #12
    24e6:	055b      	lsls	r3, r3, #21
    24e8:	0b24      	lsrs	r4, r4, #12
    24ea:	0d5b      	lsrs	r3, r3, #21
    24ec:	2100      	movs	r1, #0
    24ee:	0010      	movs	r0, r2
    24f0:	0324      	lsls	r4, r4, #12
    24f2:	0d0a      	lsrs	r2, r1, #20
    24f4:	0512      	lsls	r2, r2, #20
    24f6:	0b24      	lsrs	r4, r4, #12
    24f8:	4314      	orrs	r4, r2
    24fa:	4a10      	ldr	r2, [pc, #64]	; (253c <__aeabi_i2d+0x80>)
    24fc:	051b      	lsls	r3, r3, #20
    24fe:	4014      	ands	r4, r2
    2500:	431c      	orrs	r4, r3
    2502:	0064      	lsls	r4, r4, #1
    2504:	07ed      	lsls	r5, r5, #31
    2506:	0864      	lsrs	r4, r4, #1
    2508:	432c      	orrs	r4, r5
    250a:	0021      	movs	r1, r4
    250c:	bd70      	pop	{r4, r5, r6, pc}
    250e:	0021      	movs	r1, r4
    2510:	4091      	lsls	r1, r2
    2512:	000a      	movs	r2, r1
    2514:	210b      	movs	r1, #11
    2516:	1a08      	subs	r0, r1, r0
    2518:	40c4      	lsrs	r4, r0
    251a:	055b      	lsls	r3, r3, #21
    251c:	0324      	lsls	r4, r4, #12
    251e:	0b24      	lsrs	r4, r4, #12
    2520:	0d5b      	lsrs	r3, r3, #21
    2522:	e7e3      	b.n	24ec <__aeabi_i2d+0x30>
    2524:	2500      	movs	r5, #0
    2526:	2300      	movs	r3, #0
    2528:	2400      	movs	r4, #0
    252a:	2200      	movs	r2, #0
    252c:	e7de      	b.n	24ec <__aeabi_i2d+0x30>
    252e:	46c0      	nop			; (mov r8, r8)
    2530:	0000041e 	.word	0x0000041e
    2534:	00000433 	.word	0x00000433
    2538:	00000413 	.word	0x00000413
    253c:	800fffff 	.word	0x800fffff

00002540 <__aeabi_f2d>:
    2540:	0042      	lsls	r2, r0, #1
    2542:	0e12      	lsrs	r2, r2, #24
    2544:	1c51      	adds	r1, r2, #1
    2546:	0243      	lsls	r3, r0, #9
    2548:	b2c9      	uxtb	r1, r1
    254a:	b570      	push	{r4, r5, r6, lr}
    254c:	0a5d      	lsrs	r5, r3, #9
    254e:	0fc4      	lsrs	r4, r0, #31
    2550:	2901      	cmp	r1, #1
    2552:	dd15      	ble.n	2580 <__aeabi_f2d+0x40>
    2554:	21e0      	movs	r1, #224	; 0xe0
    2556:	0089      	lsls	r1, r1, #2
    2558:	468c      	mov	ip, r1
    255a:	076d      	lsls	r5, r5, #29
    255c:	0b1b      	lsrs	r3, r3, #12
    255e:	4462      	add	r2, ip
    2560:	2100      	movs	r1, #0
    2562:	0028      	movs	r0, r5
    2564:	0d0d      	lsrs	r5, r1, #20
    2566:	052d      	lsls	r5, r5, #20
    2568:	432b      	orrs	r3, r5
    256a:	4d1c      	ldr	r5, [pc, #112]	; (25dc <__aeabi_f2d+0x9c>)
    256c:	0552      	lsls	r2, r2, #21
    256e:	402b      	ands	r3, r5
    2570:	0852      	lsrs	r2, r2, #1
    2572:	4313      	orrs	r3, r2
    2574:	005b      	lsls	r3, r3, #1
    2576:	07e4      	lsls	r4, r4, #31
    2578:	085b      	lsrs	r3, r3, #1
    257a:	4323      	orrs	r3, r4
    257c:	0019      	movs	r1, r3
    257e:	bd70      	pop	{r4, r5, r6, pc}
    2580:	2a00      	cmp	r2, #0
    2582:	d115      	bne.n	25b0 <__aeabi_f2d+0x70>
    2584:	2d00      	cmp	r5, #0
    2586:	d01f      	beq.n	25c8 <__aeabi_f2d+0x88>
    2588:	0028      	movs	r0, r5
    258a:	f000 f8b9 	bl	2700 <__clzsi2>
    258e:	280a      	cmp	r0, #10
    2590:	dc1d      	bgt.n	25ce <__aeabi_f2d+0x8e>
    2592:	230b      	movs	r3, #11
    2594:	002a      	movs	r2, r5
    2596:	1a1b      	subs	r3, r3, r0
    2598:	40da      	lsrs	r2, r3
    259a:	0013      	movs	r3, r2
    259c:	0002      	movs	r2, r0
    259e:	3215      	adds	r2, #21
    25a0:	4095      	lsls	r5, r2
    25a2:	4a0f      	ldr	r2, [pc, #60]	; (25e0 <__aeabi_f2d+0xa0>)
    25a4:	031b      	lsls	r3, r3, #12
    25a6:	1a12      	subs	r2, r2, r0
    25a8:	0552      	lsls	r2, r2, #21
    25aa:	0b1b      	lsrs	r3, r3, #12
    25ac:	0d52      	lsrs	r2, r2, #21
    25ae:	e7d7      	b.n	2560 <__aeabi_f2d+0x20>
    25b0:	2d00      	cmp	r5, #0
    25b2:	d006      	beq.n	25c2 <__aeabi_f2d+0x82>
    25b4:	2280      	movs	r2, #128	; 0x80
    25b6:	0b1b      	lsrs	r3, r3, #12
    25b8:	0312      	lsls	r2, r2, #12
    25ba:	4313      	orrs	r3, r2
    25bc:	076d      	lsls	r5, r5, #29
    25be:	4a09      	ldr	r2, [pc, #36]	; (25e4 <__aeabi_f2d+0xa4>)
    25c0:	e7ce      	b.n	2560 <__aeabi_f2d+0x20>
    25c2:	4a08      	ldr	r2, [pc, #32]	; (25e4 <__aeabi_f2d+0xa4>)
    25c4:	2300      	movs	r3, #0
    25c6:	e7cb      	b.n	2560 <__aeabi_f2d+0x20>
    25c8:	2200      	movs	r2, #0
    25ca:	2300      	movs	r3, #0
    25cc:	e7c8      	b.n	2560 <__aeabi_f2d+0x20>
    25ce:	0003      	movs	r3, r0
    25d0:	3b0b      	subs	r3, #11
    25d2:	409d      	lsls	r5, r3
    25d4:	002b      	movs	r3, r5
    25d6:	2500      	movs	r5, #0
    25d8:	e7e3      	b.n	25a2 <__aeabi_f2d+0x62>
    25da:	46c0      	nop			; (mov r8, r8)
    25dc:	800fffff 	.word	0x800fffff
    25e0:	00000389 	.word	0x00000389
    25e4:	000007ff 	.word	0x000007ff

000025e8 <__aeabi_d2f>:
    25e8:	004b      	lsls	r3, r1, #1
    25ea:	b570      	push	{r4, r5, r6, lr}
    25ec:	0d5e      	lsrs	r6, r3, #21
    25ee:	030c      	lsls	r4, r1, #12
    25f0:	1c75      	adds	r5, r6, #1
    25f2:	0a64      	lsrs	r4, r4, #9
    25f4:	0f42      	lsrs	r2, r0, #29
    25f6:	056d      	lsls	r5, r5, #21
    25f8:	4322      	orrs	r2, r4
    25fa:	0fc9      	lsrs	r1, r1, #31
    25fc:	00c4      	lsls	r4, r0, #3
    25fe:	0d6d      	lsrs	r5, r5, #21
    2600:	2d01      	cmp	r5, #1
    2602:	dd2a      	ble.n	265a <__aeabi_d2f+0x72>
    2604:	4b3b      	ldr	r3, [pc, #236]	; (26f4 <__aeabi_d2f+0x10c>)
    2606:	18f3      	adds	r3, r6, r3
    2608:	2bfe      	cmp	r3, #254	; 0xfe
    260a:	dc1a      	bgt.n	2642 <__aeabi_d2f+0x5a>
    260c:	2b00      	cmp	r3, #0
    260e:	dd42      	ble.n	2696 <__aeabi_d2f+0xae>
    2610:	0180      	lsls	r0, r0, #6
    2612:	1e45      	subs	r5, r0, #1
    2614:	41a8      	sbcs	r0, r5
    2616:	00d2      	lsls	r2, r2, #3
    2618:	4310      	orrs	r0, r2
    261a:	0f62      	lsrs	r2, r4, #29
    261c:	4302      	orrs	r2, r0
    261e:	0750      	lsls	r0, r2, #29
    2620:	d004      	beq.n	262c <__aeabi_d2f+0x44>
    2622:	200f      	movs	r0, #15
    2624:	4010      	ands	r0, r2
    2626:	2804      	cmp	r0, #4
    2628:	d000      	beq.n	262c <__aeabi_d2f+0x44>
    262a:	3204      	adds	r2, #4
    262c:	2080      	movs	r0, #128	; 0x80
    262e:	04c0      	lsls	r0, r0, #19
    2630:	4010      	ands	r0, r2
    2632:	d021      	beq.n	2678 <__aeabi_d2f+0x90>
    2634:	3301      	adds	r3, #1
    2636:	2bff      	cmp	r3, #255	; 0xff
    2638:	d003      	beq.n	2642 <__aeabi_d2f+0x5a>
    263a:	0192      	lsls	r2, r2, #6
    263c:	0a52      	lsrs	r2, r2, #9
    263e:	b2db      	uxtb	r3, r3
    2640:	e001      	b.n	2646 <__aeabi_d2f+0x5e>
    2642:	23ff      	movs	r3, #255	; 0xff
    2644:	2200      	movs	r2, #0
    2646:	0252      	lsls	r2, r2, #9
    2648:	0a52      	lsrs	r2, r2, #9
    264a:	05db      	lsls	r3, r3, #23
    264c:	4313      	orrs	r3, r2
    264e:	005b      	lsls	r3, r3, #1
    2650:	07c9      	lsls	r1, r1, #31
    2652:	085b      	lsrs	r3, r3, #1
    2654:	430b      	orrs	r3, r1
    2656:	0018      	movs	r0, r3
    2658:	bd70      	pop	{r4, r5, r6, pc}
    265a:	2e00      	cmp	r6, #0
    265c:	d007      	beq.n	266e <__aeabi_d2f+0x86>
    265e:	4314      	orrs	r4, r2
    2660:	d0ef      	beq.n	2642 <__aeabi_d2f+0x5a>
    2662:	2080      	movs	r0, #128	; 0x80
    2664:	00d2      	lsls	r2, r2, #3
    2666:	0480      	lsls	r0, r0, #18
    2668:	4302      	orrs	r2, r0
    266a:	23ff      	movs	r3, #255	; 0xff
    266c:	e7d7      	b.n	261e <__aeabi_d2f+0x36>
    266e:	4322      	orrs	r2, r4
    2670:	2300      	movs	r3, #0
    2672:	2a00      	cmp	r2, #0
    2674:	d003      	beq.n	267e <__aeabi_d2f+0x96>
    2676:	2205      	movs	r2, #5
    2678:	08d2      	lsrs	r2, r2, #3
    267a:	2bff      	cmp	r3, #255	; 0xff
    267c:	d003      	beq.n	2686 <__aeabi_d2f+0x9e>
    267e:	0252      	lsls	r2, r2, #9
    2680:	0a52      	lsrs	r2, r2, #9
    2682:	b2db      	uxtb	r3, r3
    2684:	e7df      	b.n	2646 <__aeabi_d2f+0x5e>
    2686:	2a00      	cmp	r2, #0
    2688:	d032      	beq.n	26f0 <__aeabi_d2f+0x108>
    268a:	2080      	movs	r0, #128	; 0x80
    268c:	03c0      	lsls	r0, r0, #15
    268e:	4302      	orrs	r2, r0
    2690:	0252      	lsls	r2, r2, #9
    2692:	0a52      	lsrs	r2, r2, #9
    2694:	e7d7      	b.n	2646 <__aeabi_d2f+0x5e>
    2696:	0018      	movs	r0, r3
    2698:	3017      	adds	r0, #23
    269a:	db14      	blt.n	26c6 <__aeabi_d2f+0xde>
    269c:	2080      	movs	r0, #128	; 0x80
    269e:	0400      	lsls	r0, r0, #16
    26a0:	4302      	orrs	r2, r0
    26a2:	201e      	movs	r0, #30
    26a4:	1ac0      	subs	r0, r0, r3
    26a6:	281f      	cmp	r0, #31
    26a8:	dc0f      	bgt.n	26ca <__aeabi_d2f+0xe2>
    26aa:	0025      	movs	r5, r4
    26ac:	4b12      	ldr	r3, [pc, #72]	; (26f8 <__aeabi_d2f+0x110>)
    26ae:	18f3      	adds	r3, r6, r3
    26b0:	409d      	lsls	r5, r3
    26b2:	1e6e      	subs	r6, r5, #1
    26b4:	41b5      	sbcs	r5, r6
    26b6:	409a      	lsls	r2, r3
    26b8:	002b      	movs	r3, r5
    26ba:	4313      	orrs	r3, r2
    26bc:	0022      	movs	r2, r4
    26be:	40c2      	lsrs	r2, r0
    26c0:	431a      	orrs	r2, r3
    26c2:	2300      	movs	r3, #0
    26c4:	e7ab      	b.n	261e <__aeabi_d2f+0x36>
    26c6:	2300      	movs	r3, #0
    26c8:	e7d5      	b.n	2676 <__aeabi_d2f+0x8e>
    26ca:	2502      	movs	r5, #2
    26cc:	426d      	negs	r5, r5
    26ce:	1aeb      	subs	r3, r5, r3
    26d0:	0015      	movs	r5, r2
    26d2:	40dd      	lsrs	r5, r3
    26d4:	2820      	cmp	r0, #32
    26d6:	d009      	beq.n	26ec <__aeabi_d2f+0x104>
    26d8:	4b08      	ldr	r3, [pc, #32]	; (26fc <__aeabi_d2f+0x114>)
    26da:	18f3      	adds	r3, r6, r3
    26dc:	409a      	lsls	r2, r3
    26de:	4314      	orrs	r4, r2
    26e0:	1e62      	subs	r2, r4, #1
    26e2:	4194      	sbcs	r4, r2
    26e4:	0022      	movs	r2, r4
    26e6:	2300      	movs	r3, #0
    26e8:	432a      	orrs	r2, r5
    26ea:	e798      	b.n	261e <__aeabi_d2f+0x36>
    26ec:	2200      	movs	r2, #0
    26ee:	e7f6      	b.n	26de <__aeabi_d2f+0xf6>
    26f0:	2200      	movs	r2, #0
    26f2:	e7a8      	b.n	2646 <__aeabi_d2f+0x5e>
    26f4:	fffffc80 	.word	0xfffffc80
    26f8:	fffffc82 	.word	0xfffffc82
    26fc:	fffffca2 	.word	0xfffffca2

00002700 <__clzsi2>:
    2700:	211c      	movs	r1, #28
    2702:	2301      	movs	r3, #1
    2704:	041b      	lsls	r3, r3, #16
    2706:	4298      	cmp	r0, r3
    2708:	d301      	bcc.n	270e <__clzsi2+0xe>
    270a:	0c00      	lsrs	r0, r0, #16
    270c:	3910      	subs	r1, #16
    270e:	0a1b      	lsrs	r3, r3, #8
    2710:	4298      	cmp	r0, r3
    2712:	d301      	bcc.n	2718 <__clzsi2+0x18>
    2714:	0a00      	lsrs	r0, r0, #8
    2716:	3908      	subs	r1, #8
    2718:	091b      	lsrs	r3, r3, #4
    271a:	4298      	cmp	r0, r3
    271c:	d301      	bcc.n	2722 <__clzsi2+0x22>
    271e:	0900      	lsrs	r0, r0, #4
    2720:	3904      	subs	r1, #4
    2722:	a202      	add	r2, pc, #8	; (adr r2, 272c <__clzsi2+0x2c>)
    2724:	5c10      	ldrb	r0, [r2, r0]
    2726:	1840      	adds	r0, r0, r1
    2728:	4770      	bx	lr
    272a:	46c0      	nop			; (mov r8, r8)
    272c:	02020304 	.word	0x02020304
    2730:	01010101 	.word	0x01010101
	...

0000273c <__libc_init_array>:
    273c:	b570      	push	{r4, r5, r6, lr}
    273e:	4e0d      	ldr	r6, [pc, #52]	; (2774 <__libc_init_array+0x38>)
    2740:	4d0d      	ldr	r5, [pc, #52]	; (2778 <__libc_init_array+0x3c>)
    2742:	2400      	movs	r4, #0
    2744:	1bad      	subs	r5, r5, r6
    2746:	10ad      	asrs	r5, r5, #2
    2748:	d005      	beq.n	2756 <__libc_init_array+0x1a>
    274a:	00a3      	lsls	r3, r4, #2
    274c:	58f3      	ldr	r3, [r6, r3]
    274e:	3401      	adds	r4, #1
    2750:	4798      	blx	r3
    2752:	42a5      	cmp	r5, r4
    2754:	d1f9      	bne.n	274a <__libc_init_array+0xe>
    2756:	f000 fa3d 	bl	2bd4 <_init>
    275a:	4e08      	ldr	r6, [pc, #32]	; (277c <__libc_init_array+0x40>)
    275c:	4d08      	ldr	r5, [pc, #32]	; (2780 <__libc_init_array+0x44>)
    275e:	2400      	movs	r4, #0
    2760:	1bad      	subs	r5, r5, r6
    2762:	10ad      	asrs	r5, r5, #2
    2764:	d005      	beq.n	2772 <__libc_init_array+0x36>
    2766:	00a3      	lsls	r3, r4, #2
    2768:	58f3      	ldr	r3, [r6, r3]
    276a:	3401      	adds	r4, #1
    276c:	4798      	blx	r3
    276e:	42a5      	cmp	r5, r4
    2770:	d1f9      	bne.n	2766 <__libc_init_array+0x2a>
    2772:	bd70      	pop	{r4, r5, r6, pc}
    2774:	00002be0 	.word	0x00002be0
    2778:	00002be0 	.word	0x00002be0
    277c:	00002be0 	.word	0x00002be0
    2780:	00002be8 	.word	0x00002be8

00002784 <memset>:
    2784:	b570      	push	{r4, r5, r6, lr}
    2786:	0783      	lsls	r3, r0, #30
    2788:	d03f      	beq.n	280a <memset+0x86>
    278a:	1e54      	subs	r4, r2, #1
    278c:	2a00      	cmp	r2, #0
    278e:	d03b      	beq.n	2808 <memset+0x84>
    2790:	b2ce      	uxtb	r6, r1
    2792:	0003      	movs	r3, r0
    2794:	2503      	movs	r5, #3
    2796:	e003      	b.n	27a0 <memset+0x1c>
    2798:	1e62      	subs	r2, r4, #1
    279a:	2c00      	cmp	r4, #0
    279c:	d034      	beq.n	2808 <memset+0x84>
    279e:	0014      	movs	r4, r2
    27a0:	3301      	adds	r3, #1
    27a2:	1e5a      	subs	r2, r3, #1
    27a4:	7016      	strb	r6, [r2, #0]
    27a6:	422b      	tst	r3, r5
    27a8:	d1f6      	bne.n	2798 <memset+0x14>
    27aa:	2c03      	cmp	r4, #3
    27ac:	d924      	bls.n	27f8 <memset+0x74>
    27ae:	25ff      	movs	r5, #255	; 0xff
    27b0:	400d      	ands	r5, r1
    27b2:	022a      	lsls	r2, r5, #8
    27b4:	4315      	orrs	r5, r2
    27b6:	042a      	lsls	r2, r5, #16
    27b8:	4315      	orrs	r5, r2
    27ba:	2c0f      	cmp	r4, #15
    27bc:	d911      	bls.n	27e2 <memset+0x5e>
    27be:	0026      	movs	r6, r4
    27c0:	3e10      	subs	r6, #16
    27c2:	0936      	lsrs	r6, r6, #4
    27c4:	3601      	adds	r6, #1
    27c6:	0136      	lsls	r6, r6, #4
    27c8:	001a      	movs	r2, r3
    27ca:	199b      	adds	r3, r3, r6
    27cc:	6015      	str	r5, [r2, #0]
    27ce:	6055      	str	r5, [r2, #4]
    27d0:	6095      	str	r5, [r2, #8]
    27d2:	60d5      	str	r5, [r2, #12]
    27d4:	3210      	adds	r2, #16
    27d6:	4293      	cmp	r3, r2
    27d8:	d1f8      	bne.n	27cc <memset+0x48>
    27da:	220f      	movs	r2, #15
    27dc:	4014      	ands	r4, r2
    27de:	2c03      	cmp	r4, #3
    27e0:	d90a      	bls.n	27f8 <memset+0x74>
    27e2:	1f26      	subs	r6, r4, #4
    27e4:	08b6      	lsrs	r6, r6, #2
    27e6:	3601      	adds	r6, #1
    27e8:	00b6      	lsls	r6, r6, #2
    27ea:	001a      	movs	r2, r3
    27ec:	199b      	adds	r3, r3, r6
    27ee:	c220      	stmia	r2!, {r5}
    27f0:	4293      	cmp	r3, r2
    27f2:	d1fc      	bne.n	27ee <memset+0x6a>
    27f4:	2203      	movs	r2, #3
    27f6:	4014      	ands	r4, r2
    27f8:	2c00      	cmp	r4, #0
    27fa:	d005      	beq.n	2808 <memset+0x84>
    27fc:	b2c9      	uxtb	r1, r1
    27fe:	191c      	adds	r4, r3, r4
    2800:	7019      	strb	r1, [r3, #0]
    2802:	3301      	adds	r3, #1
    2804:	429c      	cmp	r4, r3
    2806:	d1fb      	bne.n	2800 <memset+0x7c>
    2808:	bd70      	pop	{r4, r5, r6, pc}
    280a:	0014      	movs	r4, r2
    280c:	0003      	movs	r3, r0
    280e:	e7cc      	b.n	27aa <memset+0x26>

00002810 <register_fini>:
    2810:	4b03      	ldr	r3, [pc, #12]	; (2820 <register_fini+0x10>)
    2812:	b510      	push	{r4, lr}
    2814:	2b00      	cmp	r3, #0
    2816:	d002      	beq.n	281e <register_fini+0xe>
    2818:	4802      	ldr	r0, [pc, #8]	; (2824 <register_fini+0x14>)
    281a:	f000 f805 	bl	2828 <atexit>
    281e:	bd10      	pop	{r4, pc}
    2820:	00000000 	.word	0x00000000
    2824:	00002839 	.word	0x00002839

00002828 <atexit>:
    2828:	b510      	push	{r4, lr}
    282a:	0001      	movs	r1, r0
    282c:	2300      	movs	r3, #0
    282e:	2200      	movs	r2, #0
    2830:	2000      	movs	r0, #0
    2832:	f000 f81b 	bl	286c <__register_exitproc>
    2836:	bd10      	pop	{r4, pc}

00002838 <__libc_fini_array>:
    2838:	b570      	push	{r4, r5, r6, lr}
    283a:	4b09      	ldr	r3, [pc, #36]	; (2860 <__libc_fini_array+0x28>)
    283c:	4c09      	ldr	r4, [pc, #36]	; (2864 <__libc_fini_array+0x2c>)
    283e:	1ae4      	subs	r4, r4, r3
    2840:	10a4      	asrs	r4, r4, #2
    2842:	d009      	beq.n	2858 <__libc_fini_array+0x20>
    2844:	4a08      	ldr	r2, [pc, #32]	; (2868 <__libc_fini_array+0x30>)
    2846:	18a5      	adds	r5, r4, r2
    2848:	00ad      	lsls	r5, r5, #2
    284a:	18ed      	adds	r5, r5, r3
    284c:	682b      	ldr	r3, [r5, #0]
    284e:	3c01      	subs	r4, #1
    2850:	4798      	blx	r3
    2852:	3d04      	subs	r5, #4
    2854:	2c00      	cmp	r4, #0
    2856:	d1f9      	bne.n	284c <__libc_fini_array+0x14>
    2858:	f000 f9c6 	bl	2be8 <_fini>
    285c:	bd70      	pop	{r4, r5, r6, pc}
    285e:	46c0      	nop			; (mov r8, r8)
    2860:	00002bf4 	.word	0x00002bf4
    2864:	00002bf8 	.word	0x00002bf8
    2868:	3fffffff 	.word	0x3fffffff

0000286c <__register_exitproc>:
    286c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    286e:	4644      	mov	r4, r8
    2870:	465f      	mov	r7, fp
    2872:	4656      	mov	r6, sl
    2874:	464d      	mov	r5, r9
    2876:	469b      	mov	fp, r3
    2878:	4b2f      	ldr	r3, [pc, #188]	; (2938 <__register_exitproc+0xcc>)
    287a:	b4f0      	push	{r4, r5, r6, r7}
    287c:	681c      	ldr	r4, [r3, #0]
    287e:	23a4      	movs	r3, #164	; 0xa4
    2880:	005b      	lsls	r3, r3, #1
    2882:	0005      	movs	r5, r0
    2884:	58e0      	ldr	r0, [r4, r3]
    2886:	000e      	movs	r6, r1
    2888:	4690      	mov	r8, r2
    288a:	2800      	cmp	r0, #0
    288c:	d04b      	beq.n	2926 <__register_exitproc+0xba>
    288e:	6843      	ldr	r3, [r0, #4]
    2890:	2b1f      	cmp	r3, #31
    2892:	dc0d      	bgt.n	28b0 <__register_exitproc+0x44>
    2894:	1c5c      	adds	r4, r3, #1
    2896:	2d00      	cmp	r5, #0
    2898:	d121      	bne.n	28de <__register_exitproc+0x72>
    289a:	3302      	adds	r3, #2
    289c:	009b      	lsls	r3, r3, #2
    289e:	6044      	str	r4, [r0, #4]
    28a0:	501e      	str	r6, [r3, r0]
    28a2:	2000      	movs	r0, #0
    28a4:	bc3c      	pop	{r2, r3, r4, r5}
    28a6:	4690      	mov	r8, r2
    28a8:	4699      	mov	r9, r3
    28aa:	46a2      	mov	sl, r4
    28ac:	46ab      	mov	fp, r5
    28ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    28b0:	4b22      	ldr	r3, [pc, #136]	; (293c <__register_exitproc+0xd0>)
    28b2:	2b00      	cmp	r3, #0
    28b4:	d03c      	beq.n	2930 <__register_exitproc+0xc4>
    28b6:	20c8      	movs	r0, #200	; 0xc8
    28b8:	0040      	lsls	r0, r0, #1
    28ba:	e000      	b.n	28be <__register_exitproc+0x52>
    28bc:	bf00      	nop
    28be:	2800      	cmp	r0, #0
    28c0:	d036      	beq.n	2930 <__register_exitproc+0xc4>
    28c2:	22a4      	movs	r2, #164	; 0xa4
    28c4:	2300      	movs	r3, #0
    28c6:	0052      	lsls	r2, r2, #1
    28c8:	58a1      	ldr	r1, [r4, r2]
    28ca:	6043      	str	r3, [r0, #4]
    28cc:	6001      	str	r1, [r0, #0]
    28ce:	50a0      	str	r0, [r4, r2]
    28d0:	3240      	adds	r2, #64	; 0x40
    28d2:	5083      	str	r3, [r0, r2]
    28d4:	3204      	adds	r2, #4
    28d6:	5083      	str	r3, [r0, r2]
    28d8:	2401      	movs	r4, #1
    28da:	2d00      	cmp	r5, #0
    28dc:	d0dd      	beq.n	289a <__register_exitproc+0x2e>
    28de:	009a      	lsls	r2, r3, #2
    28e0:	4691      	mov	r9, r2
    28e2:	4481      	add	r9, r0
    28e4:	4642      	mov	r2, r8
    28e6:	2188      	movs	r1, #136	; 0x88
    28e8:	464f      	mov	r7, r9
    28ea:	507a      	str	r2, [r7, r1]
    28ec:	22c4      	movs	r2, #196	; 0xc4
    28ee:	0052      	lsls	r2, r2, #1
    28f0:	4690      	mov	r8, r2
    28f2:	4480      	add	r8, r0
    28f4:	4642      	mov	r2, r8
    28f6:	3987      	subs	r1, #135	; 0x87
    28f8:	4099      	lsls	r1, r3
    28fa:	6812      	ldr	r2, [r2, #0]
    28fc:	468a      	mov	sl, r1
    28fe:	430a      	orrs	r2, r1
    2900:	4694      	mov	ip, r2
    2902:	4642      	mov	r2, r8
    2904:	4661      	mov	r1, ip
    2906:	6011      	str	r1, [r2, #0]
    2908:	2284      	movs	r2, #132	; 0x84
    290a:	4649      	mov	r1, r9
    290c:	465f      	mov	r7, fp
    290e:	0052      	lsls	r2, r2, #1
    2910:	508f      	str	r7, [r1, r2]
    2912:	2d02      	cmp	r5, #2
    2914:	d1c1      	bne.n	289a <__register_exitproc+0x2e>
    2916:	0002      	movs	r2, r0
    2918:	4655      	mov	r5, sl
    291a:	328d      	adds	r2, #141	; 0x8d
    291c:	32ff      	adds	r2, #255	; 0xff
    291e:	6811      	ldr	r1, [r2, #0]
    2920:	430d      	orrs	r5, r1
    2922:	6015      	str	r5, [r2, #0]
    2924:	e7b9      	b.n	289a <__register_exitproc+0x2e>
    2926:	0020      	movs	r0, r4
    2928:	304d      	adds	r0, #77	; 0x4d
    292a:	30ff      	adds	r0, #255	; 0xff
    292c:	50e0      	str	r0, [r4, r3]
    292e:	e7ae      	b.n	288e <__register_exitproc+0x22>
    2930:	2001      	movs	r0, #1
    2932:	4240      	negs	r0, r0
    2934:	e7b6      	b.n	28a4 <__register_exitproc+0x38>
    2936:	46c0      	nop			; (mov r8, r8)
    2938:	00002bd0 	.word	0x00002bd0
    293c:	00000000 	.word	0x00000000

00002940 <spi2MOSI>:
    2940:	0c000002 00000000                       ........

00002948 <spi2SCK>:
    2948:	0e000002 00000000                       ........

00002950 <spi2MISO>:
    2950:	0d000002 00000000                       ........

00002958 <lookupTable.12323>:
    2958:	ffff8d20 ffffada1 ffffce64 ffffef6c      .......d...l...
    2968:	000010b7 0000324a 00005425 00007649     ....J2..%T..Iv..
    2978:	000098b7 0000bb72 0000de79 000101d0     ....r...y.......
    2988:	00012576 0001496f 00016dbc 0001925e     v%..oI...m..^...
    2998:	0001b758 0001dcaa 00020258 00022862     X.......X...b(..
    29a8:	00024ecc 00027596 00029cc4 0002c457     .N...u......W...
    29b8:	0002ec52 000314b7 00033d89 000366ca     R........=...f..
    29c8:	0003907d 0003baa4 0003e544 0004105e     }.......D...^...
    29d8:	00043bf6 0004680e 000494ac 0004c1d1     .;...h..........
    29e8:	0004ef81 00051dc1 00054c95 00057c00     .........L...|..
    29f8:	0005ac07 0005dcae 00060dfb 00063ff2     .............?..
    2a08:	00067298 0006a5f4 0006da09 00070ee0     .r..............
    2a18:	0007447d 00077ae8 0007b228 0007ea44     }D...z..(...D...
    2a28:	00082344 00085d30 00089810 0008d3ef     D#..0]..........
    2a38:	000910d6 00094ecf 00098de5 0009ce23     .....N......#...
    2a48:	000a0f98 000a524f 000a9657 000adbbf     ....OR..W.......
    2a58:	000b2298 000b6af3 000bb4e2 000c007b     ."...j......{...
    2a68:	000c4dd4 000c9d03 000cee23 000d4150     .M......#...PA..
    2a78:	000d96a9 000dee4e 000e4865 000ea516     ....N...eH......
    2a88:	000f048e                                ....

00002a8c <senseBatPin>:
    2a8c:	06000000 00000006                       ........

00002a94 <senseAPin>:
    2a94:	03010001 0000000b                       ........

00002a9c <senseBPin>:
    2a9c:	02010001 0000000a                       ........

00002aa4 <senseCPin>:
    2aa4:	03000000 00000001                       ........

00002aac <senseDPin>:
    2aac:	02000000 00000000                       ........

00002ab4 <analogAccelPin>:
    2ab4:	07000000 00000007                       ........

00002abc <spi2MOSI>:
    2abc:	0c000002 00000000                       ........

00002ac4 <spi2SCK>:
    2ac4:	0e000002 00000000 000017d6 000016fa     ................
    2ad4:	000017b8 00001790 000017b8 00001784     ................
    2ae4:	000017b8 00001790 000016fa 000016fa     ................
    2af4:	00001784 00001790 0000183c 0000183c     ........<...<...
    2b04:	0000183c 000017be 000016fa 000016fa     <...............
    2b14:	000017a4 0000178e 000017a4 00001784     ................
    2b24:	000017a4 0000178e 000016fa 000016fa     ................
    2b34:	00001784 0000178e 0000183c 0000183c     ........<...<...
    2b44:	0000183c 00001848 00001b34 00001a92     <...H...4.......
    2b54:	00001a92 00001a90 00001b26 00001b26     ........&...&...
    2b64:	00001b1c 00001a90 00001b26 00001b1c     ........&.......
    2b74:	00001b26 00001a90 00001b2c 00001b2c     &.......,...,...
    2b84:	00001b2c 00001bb6 000021b8 00002078     ,........!..x ..
    2b94:	00002078 00002076 00002190 00002190     x ..v ...!...!..
    2ba4:	00002182 00002076 00002190 00002182     .!..v ...!...!..
    2bb4:	00002190 00002076 00002198 00002198     .!..v ...!...!..
    2bc4:	00002198 00002398 00000043              .!...#..C...

00002bd0 <_global_impure_ptr>:
    2bd0:	20000010                                ... 

00002bd4 <_init>:
    2bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2bd6:	46c0      	nop			; (mov r8, r8)
    2bd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2bda:	bc08      	pop	{r3}
    2bdc:	469e      	mov	lr, r3
    2bde:	4770      	bx	lr

00002be0 <__init_array_start>:
    2be0:	00002811 	.word	0x00002811

00002be4 <__frame_dummy_init_array_entry>:
    2be4:	000000dd                                ....

00002be8 <_fini>:
    2be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2bea:	46c0      	nop			; (mov r8, r8)
    2bec:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2bee:	bc08      	pop	{r3}
    2bf0:	469e      	mov	lr, r3
    2bf2:	4770      	bx	lr

00002bf4 <__fini_array_start>:
    2bf4:	000000b5 	.word	0x000000b5
