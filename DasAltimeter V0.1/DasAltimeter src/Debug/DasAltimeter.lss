
DasAltimeter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002964  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000438  20000000  00002964  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000001b0  20000440  00002db0  00020440  2**4
                  ALLOC
  3 .stack        00002000  200005f0  00002f60  00020440  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020438  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020460  2**0
                  CONTENTS, READONLY
  6 .debug_info   0001a059  00000000  00000000  000204b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001f5f  00000000  00000000  0003a512  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000019a6  00000000  00000000  0003c471  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000348  00000000  00000000  0003de17  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000b60  00000000  00000000  0003e15f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000151fc  00000000  00000000  0003ecbf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00007dc1  00000000  00000000  00053ebb  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000723a6  00000000  00000000  0005bc7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000009f0  00000000  00000000  000ce024  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
 *         retrieved from cpu registers.
 */
void SystemCoreClockUpdate(void)
{
	// Not implemented
	SystemCoreClock = __SYSTEM_CLOCK;
       0:	200025f0 	.word	0x200025f0
       4:	00000119 	.word	0x00000119
	return;
}
       8:	00000115 	.word	0x00000115
       c:	00000115 	.word	0x00000115
	...
      2c:	00000115 	.word	0x00000115
	...
      38:	00000115 	.word	0x00000115
      3c:	00000115 	.word	0x00000115
      40:	00000115 	.word	0x00000115
      44:	00000115 	.word	0x00000115
      48:	00000115 	.word	0x00000115
      4c:	00000f55 	.word	0x00000f55
      50:	00000115 	.word	0x00000115
      54:	00000115 	.word	0x00000115
      58:	00000115 	.word	0x00000115
      5c:	00000115 	.word	0x00000115
      60:	00000115 	.word	0x00000115
      64:	00000115 	.word	0x00000115
      68:	00000115 	.word	0x00000115
      6c:	00000115 	.word	0x00000115
      70:	00000115 	.word	0x00000115
      74:	00000115 	.word	0x00000115
      78:	00000115 	.word	0x00000115
      7c:	00000115 	.word	0x00000115
      80:	00000115 	.word	0x00000115
      84:	00000115 	.word	0x00000115
      88:	00000115 	.word	0x00000115
      8c:	00000ff5 	.word	0x00000ff5
      90:	0000105d 	.word	0x0000105d
	...
      9c:	00000115 	.word	0x00000115
      a0:	00000115 	.word	0x00000115
      a4:	00000115 	.word	0x00000115
      a8:	00000115 	.word	0x00000115
      ac:	00000115 	.word	0x00000115
      b0:	00000000 	.word	0x00000000

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000440 	.word	0x20000440
      d4:	00000000 	.word	0x00000000
      d8:	00002964 	.word	0x00002964

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000444 	.word	0x20000444
     108:	00002964 	.word	0x00002964
     10c:	00002964 	.word	0x00002964
     110:	00000000 	.word	0x00000000

00000114 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     114:	e7fe      	b.n	114 <Dummy_Handler>
	...

00000118 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
     118:	4821      	ldr	r0, [pc, #132]	; (1a0 <Reset_Handler+0x88>)
     11a:	4922      	ldr	r1, [pc, #136]	; (1a4 <Reset_Handler+0x8c>)
     11c:	b570      	push	{r4, r5, r6, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
     11e:	4288      	cmp	r0, r1
     120:	d002      	beq.n	128 <Reset_Handler+0x10>
     122:	2300      	movs	r3, #0
                for (; pDest < &_erelocate;) {
     124:	4c20      	ldr	r4, [pc, #128]	; (1a8 <Reset_Handler+0x90>)
     126:	e003      	b.n	130 <Reset_Handler+0x18>
     128:	4b20      	ldr	r3, [pc, #128]	; (1ac <Reset_Handler+0x94>)
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     12a:	4a21      	ldr	r2, [pc, #132]	; (1b0 <Reset_Handler+0x98>)
                *pDest++ = 0;
     12c:	2100      	movs	r1, #0
     12e:	e006      	b.n	13e <Reset_Handler+0x26>
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
     130:	18ca      	adds	r2, r1, r3
     132:	42a2      	cmp	r2, r4
     134:	d2f8      	bcs.n	128 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
     136:	58c5      	ldr	r5, [r0, r3]
     138:	3304      	adds	r3, #4
     13a:	6015      	str	r5, [r2, #0]
     13c:	e7f8      	b.n	130 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     13e:	4293      	cmp	r3, r2
     140:	d201      	bcs.n	146 <Reset_Handler+0x2e>
                *pDest++ = 0;
     142:	c302      	stmia	r3!, {r1}
     144:	e7fb      	b.n	13e <Reset_Handler+0x26>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     146:	21ff      	movs	r1, #255	; 0xff

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     148:	2402      	movs	r4, #2
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     14a:	2503      	movs	r5, #3
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     14c:	4b19      	ldr	r3, [pc, #100]	; (1b4 <Reset_Handler+0x9c>)
     14e:	4a1a      	ldr	r2, [pc, #104]	; (1b8 <Reset_Handler+0xa0>)
     150:	438b      	bics	r3, r1

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     152:	260c      	movs	r6, #12
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     154:	6093      	str	r3, [r2, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     156:	2208      	movs	r2, #8
        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     158:	4b18      	ldr	r3, [pc, #96]	; (1bc <Reset_Handler+0xa4>)
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     15a:	4919      	ldr	r1, [pc, #100]	; (1c0 <Reset_Handler+0xa8>)
        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     15c:	625c      	str	r4, [r3, #36]	; 0x24
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     15e:	78cb      	ldrb	r3, [r1, #3]
     160:	43ab      	bics	r3, r5
     162:	4323      	orrs	r3, r4
     164:	70cb      	strb	r3, [r1, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     166:	78cb      	ldrb	r3, [r1, #3]
     168:	43b3      	bics	r3, r6
     16a:	4313      	orrs	r3, r2
     16c:	70cb      	strb	r3, [r1, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
     16e:	2130      	movs	r1, #48	; 0x30
     170:	4b14      	ldr	r3, [pc, #80]	; (1c4 <Reset_Handler+0xac>)
     172:	7b98      	ldrb	r0, [r3, #14]
     174:	4388      	bics	r0, r1
     176:	3910      	subs	r1, #16
     178:	4308      	orrs	r0, r1
     17a:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     17c:	7b99      	ldrb	r1, [r3, #14]
     17e:	43b1      	bics	r1, r6
     180:	4311      	orrs	r1, r2
     182:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
     184:	2180      	movs	r1, #128	; 0x80
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
        DMAC->QOSCTRL.bit.FQOS = 2;
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     186:	7b9a      	ldrb	r2, [r3, #14]
     188:	43aa      	bics	r2, r5
     18a:	4322      	orrs	r2, r4
     18c:	739a      	strb	r2, [r3, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
     18e:	4a0e      	ldr	r2, [pc, #56]	; (1c8 <Reset_Handler+0xb0>)
     190:	6853      	ldr	r3, [r2, #4]
     192:	430b      	orrs	r3, r1
     194:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
     196:	4b0d      	ldr	r3, [pc, #52]	; (1cc <Reset_Handler+0xb4>)
     198:	4798      	blx	r3

        /* Branch to main function */
        main();
     19a:	4b0d      	ldr	r3, [pc, #52]	; (1d0 <Reset_Handler+0xb8>)
     19c:	4798      	blx	r3
     19e:	e7fe      	b.n	19e <Reset_Handler+0x86>
     1a0:	00002964 	.word	0x00002964
     1a4:	20000000 	.word	0x20000000
     1a8:	20000438 	.word	0x20000438
     1ac:	20000440 	.word	0x20000440
     1b0:	200005f0 	.word	0x200005f0
     1b4:	00000000 	.word	0x00000000
     1b8:	e000ed00 	.word	0xe000ed00
     1bc:	410070fc 	.word	0x410070fc
     1c0:	41005000 	.word	0x41005000
     1c4:	41004800 	.word	0x41004800
     1c8:	41004000 	.word	0x41004000
     1cc:	00002589 	.word	0x00002589
     1d0:	00000add 	.word	0x00000add

000001d4 <SystemInit>:
     1d4:	4a01      	ldr	r2, [pc, #4]	; (1dc <SystemInit+0x8>)
     1d6:	4b02      	ldr	r3, [pc, #8]	; (1e0 <SystemInit+0xc>)
     1d8:	601a      	str	r2, [r3, #0]
     1da:	4770      	bx	lr
     1dc:	000f4240 	.word	0x000f4240
     1e0:	20000000 	.word	0x20000000

000001e4 <AT25SFErace4KBlock>:
    pinHigh(cs_mem);

    delay_ms(300);
}

void AT25SFErace4KBlock(uint8_t blockToErace) {
     1e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     1e6:	2780      	movs	r7, #128	; 0x80
     1e8:	4e12      	ldr	r6, [pc, #72]	; (234 <AT25SFErace4KBlock+0x50>)
     1ea:	02ff      	lsls	r7, r7, #11

    uint32_t address = 0x001000*blockToErace;
     1ec:	0303      	lsls	r3, r0, #12

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
     1ee:	4d12      	ldr	r5, [pc, #72]	; (238 <AT25SFErace4KBlock+0x54>)
    delay_ms(300);
}

void AT25SFErace4KBlock(uint8_t blockToErace) {

    uint32_t address = 0x001000*blockToErace;
     1f0:	9301      	str	r3, [sp, #4]

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
     1f2:	2106      	movs	r1, #6
     1f4:	6177      	str	r7, [r6, #20]
     1f6:	2001      	movs	r0, #1
     1f8:	47a8      	blx	r5
     1fa:	4c10      	ldr	r4, [pc, #64]	; (23c <AT25SFErace4KBlock+0x58>)
    pinHigh(cs_mem);

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_04K_ERASE);
     1fc:	2120      	movs	r1, #32
void AT25SFErace4KBlock(uint8_t blockToErace) {

    uint32_t address = 0x001000*blockToErace;

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
     1fe:	7020      	strb	r0, [r4, #0]
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     200:	61b7      	str	r7, [r6, #24]
    pinHigh(cs_mem);

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_04K_ERASE);
     202:	2001      	movs	r0, #1
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     204:	6177      	str	r7, [r6, #20]
     206:	47a8      	blx	r5
    dummy_rx = spiDataTransfer(SPI1,((address & 0xFF0000) >> 16));
     208:	9b01      	ldr	r3, [sp, #4]
    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
    pinHigh(cs_mem);

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_04K_ERASE);
     20a:	7020      	strb	r0, [r4, #0]
    dummy_rx = spiDataTransfer(SPI1,((address & 0xFF0000) >> 16));
     20c:	0c19      	lsrs	r1, r3, #16
     20e:	2001      	movs	r0, #1
     210:	47a8      	blx	r5
    dummy_rx = spiDataTransfer(SPI1,((address & 0x00FF00) >>  8));
     212:	9b01      	ldr	r3, [sp, #4]
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
    pinHigh(cs_mem);

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_04K_ERASE);
    dummy_rx = spiDataTransfer(SPI1,((address & 0xFF0000) >> 16));
     214:	7020      	strb	r0, [r4, #0]
    dummy_rx = spiDataTransfer(SPI1,((address & 0x00FF00) >>  8));
     216:	0a18      	lsrs	r0, r3, #8
     218:	b2c1      	uxtb	r1, r0
     21a:	2001      	movs	r0, #1
     21c:	47a8      	blx	r5
    dummy_rx = spiDataTransfer(SPI1,((address & 0x0000FF) >>  0));
     21e:	2100      	movs	r1, #0
    pinHigh(cs_mem);

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_04K_ERASE);
    dummy_rx = spiDataTransfer(SPI1,((address & 0xFF0000) >> 16));
    dummy_rx = spiDataTransfer(SPI1,((address & 0x00FF00) >>  8));
     220:	7020      	strb	r0, [r4, #0]
    dummy_rx = spiDataTransfer(SPI1,((address & 0x0000FF) >>  0));
     222:	2001      	movs	r0, #1
     224:	47a8      	blx	r5
    pinHigh(cs_mem);

    delay_ms(70);
     226:	4b06      	ldr	r3, [pc, #24]	; (240 <AT25SFErace4KBlock+0x5c>)

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_04K_ERASE);
    dummy_rx = spiDataTransfer(SPI1,((address & 0xFF0000) >> 16));
    dummy_rx = spiDataTransfer(SPI1,((address & 0x00FF00) >>  8));
    dummy_rx = spiDataTransfer(SPI1,((address & 0x0000FF) >>  0));
     228:	7020      	strb	r0, [r4, #0]
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     22a:	61b7      	str	r7, [r6, #24]
    pinHigh(cs_mem);

    delay_ms(70);
     22c:	2046      	movs	r0, #70	; 0x46
     22e:	4798      	blx	r3

}
     230:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
     232:	46c0      	nop			; (mov r8, r8)
     234:	41004400 	.word	0x41004400
     238:	000016b5 	.word	0x000016b5
     23c:	20000460 	.word	0x20000460
     240:	00000f25 	.word	0x00000f25

00000244 <AT25SESplitPageWrite>:
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     244:	2380      	movs	r3, #128	; 0x80


u8_t AT25SESplitPageWrite(u8_t startingAddress, u8_t len, u8_t *data) {
     246:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     248:	4f14      	ldr	r7, [pc, #80]	; (29c <AT25SESplitPageWrite+0x58>)
     24a:	02db      	lsls	r3, r3, #11
     24c:	9201      	str	r2, [sp, #4]

    u8_t bytesSent = 0;

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_PROGRAM);
     24e:	4e14      	ldr	r6, [pc, #80]	; (2a0 <AT25SESplitPageWrite+0x5c>)
    delay_ms(70);

}


u8_t AT25SESplitPageWrite(u8_t startingAddress, u8_t len, u8_t *data) {
     250:	0004      	movs	r4, r0
     252:	9100      	str	r1, [sp, #0]

    u8_t bytesSent = 0;

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_PROGRAM);
     254:	2001      	movs	r0, #1
     256:	617b      	str	r3, [r7, #20]
     258:	2102      	movs	r1, #2
     25a:	47b0      	blx	r6
     25c:	4d11      	ldr	r5, [pc, #68]	; (2a4 <AT25SESplitPageWrite+0x60>)
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     25e:	2100      	movs	r1, #0
u8_t AT25SESplitPageWrite(u8_t startingAddress, u8_t len, u8_t *data) {

    u8_t bytesSent = 0;

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_PROGRAM);
     260:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     262:	2001      	movs	r0, #1
     264:	47b0      	blx	r6
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     266:	2100      	movs	r1, #0

    u8_t bytesSent = 0;

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_PROGRAM);
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     268:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     26a:	2001      	movs	r0, #1
     26c:	47b0      	blx	r6
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
     26e:	0021      	movs	r1, r4
    u8_t bytesSent = 0;

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_PROGRAM);
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     270:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
     272:	2001      	movs	r0, #1
     274:	47b0      	blx	r6
     276:	9c01      	ldr	r4, [sp, #4]
     278:	9b00      	ldr	r3, [sp, #0]
     27a:	7028      	strb	r0, [r5, #0]
     27c:	18e3      	adds	r3, r4, r3
     27e:	9301      	str	r3, [sp, #4]

    for (u8_t pos = 0; pos < len; ++pos) {
     280:	9b01      	ldr	r3, [sp, #4]
     282:	429c      	cmp	r4, r3
     284:	d005      	beq.n	292 <AT25SESplitPageWrite+0x4e>
        ++bytesSent;
        dummy_rx = spiDataTransfer(SPI1,data[pos]);
     286:	7821      	ldrb	r1, [r4, #0]
     288:	2001      	movs	r0, #1
     28a:	47b0      	blx	r6
     28c:	3401      	adds	r4, #1
     28e:	7028      	strb	r0, [r5, #0]
     290:	e7f6      	b.n	280 <AT25SESplitPageWrite+0x3c>
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     292:	2380      	movs	r3, #128	; 0x80
     294:	02db      	lsls	r3, r3, #11
     296:	61bb      	str	r3, [r7, #24]
    }
    pinHigh(cs_mem);


    return bytesSent;
}
     298:	9800      	ldr	r0, [sp, #0]
     29a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
     29c:	41004400 	.word	0x41004400
     2a0:	000016b5 	.word	0x000016b5
     2a4:	20000460 	.word	0x20000460

000002a8 <AT25SEWriteSample>:
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     2a8:	2380      	movs	r3, #128	; 0x80


u8_t AT25SEWriteSample(u8_t startingAddress, u8_t len, u8_t *data) {
     2aa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     2ac:	4f21      	ldr	r7, [pc, #132]	; (334 <AT25SEWriteSample+0x8c>)
     2ae:	02db      	lsls	r3, r3, #11
     2b0:	9200      	str	r2, [sp, #0]

    u8_t bytesSent = 0;

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
     2b2:	4d21      	ldr	r5, [pc, #132]	; (338 <AT25SEWriteSample+0x90>)
     2b4:	617b      	str	r3, [r7, #20]

    return bytesSent;
}


u8_t AT25SEWriteSample(u8_t startingAddress, u8_t len, u8_t *data) {
     2b6:	0004      	movs	r4, r0
     2b8:	000e      	movs	r6, r1

    u8_t bytesSent = 0;

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
     2ba:	2001      	movs	r0, #1
     2bc:	2106      	movs	r1, #6
     2be:	47a8      	blx	r5
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     2c0:	2280      	movs	r2, #128	; 0x80
     2c2:	4b1e      	ldr	r3, [pc, #120]	; (33c <AT25SEWriteSample+0x94>)
     2c4:	02d2      	lsls	r2, r2, #11
     2c6:	7018      	strb	r0, [r3, #0]
     2c8:	61ba      	str	r2, [r7, #24]
    pinHigh(cs_mem);

    if (((startingAddress >> 0) + len) > 0xFF) {
     2ca:	19a2      	adds	r2, r4, r6
     2cc:	9701      	str	r7, [sp, #4]
     2ce:	002f      	movs	r7, r5
     2d0:	001d      	movs	r5, r3
     2d2:	2aff      	cmp	r2, #255	; 0xff
     2d4:	dd08      	ble.n	2e8 <AT25SEWriteSample+0x40>

        data[0] = 'B';
     2d6:	2342      	movs	r3, #66	; 0x42
     2d8:	9a00      	ldr	r2, [sp, #0]
        bytesSent = AT25SESplitPageWrite(startingAddress,len,data);
     2da:	0031      	movs	r1, r6
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
    pinHigh(cs_mem);

    if (((startingAddress >> 0) + len) > 0xFF) {

        data[0] = 'B';
     2dc:	7013      	strb	r3, [r2, #0]
        bytesSent = AT25SESplitPageWrite(startingAddress,len,data);
     2de:	0020      	movs	r0, r4
     2e0:	4b17      	ldr	r3, [pc, #92]	; (340 <AT25SEWriteSample+0x98>)
     2e2:	4798      	blx	r3
     2e4:	0006      	movs	r6, r0
     2e6:	e023      	b.n	330 <AT25SEWriteSample+0x88>
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     2e8:	2280      	movs	r2, #128	; 0x80
     2ea:	9b01      	ldr	r3, [sp, #4]
     2ec:	02d2      	lsls	r2, r2, #11
     2ee:	615a      	str	r2, [r3, #20]

    } else {

        pinLow(cs_mem);
        dummy_rx = spiDataTransfer(SPI1,OPCODE_PROGRAM);
     2f0:	2102      	movs	r1, #2
     2f2:	2001      	movs	r0, #1
     2f4:	47b8      	blx	r7
        dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     2f6:	2100      	movs	r1, #0
        bytesSent = AT25SESplitPageWrite(startingAddress,len,data);

    } else {

        pinLow(cs_mem);
        dummy_rx = spiDataTransfer(SPI1,OPCODE_PROGRAM);
     2f8:	7028      	strb	r0, [r5, #0]
        dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     2fa:	2001      	movs	r0, #1
     2fc:	47b8      	blx	r7
        dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     2fe:	2100      	movs	r1, #0

    } else {

        pinLow(cs_mem);
        dummy_rx = spiDataTransfer(SPI1,OPCODE_PROGRAM);
        dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     300:	7028      	strb	r0, [r5, #0]
        dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     302:	2001      	movs	r0, #1
     304:	47b8      	blx	r7
        dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
     306:	0021      	movs	r1, r4
    } else {

        pinLow(cs_mem);
        dummy_rx = spiDataTransfer(SPI1,OPCODE_PROGRAM);
        dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
        dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     308:	7028      	strb	r0, [r5, #0]
        dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
     30a:	2001      	movs	r0, #1
     30c:	47b8      	blx	r7
     30e:	9c00      	ldr	r4, [sp, #0]
     310:	7028      	strb	r0, [r5, #0]
     312:	19a3      	adds	r3, r4, r6
     314:	9300      	str	r3, [sp, #0]

        for (u8_t pos = 0; pos < len; ++pos) {
     316:	9b00      	ldr	r3, [sp, #0]
     318:	429c      	cmp	r4, r3
     31a:	d005      	beq.n	328 <AT25SEWriteSample+0x80>
            ++bytesSent;
            dummy_rx = spiDataTransfer(SPI1,data[pos]);
     31c:	7821      	ldrb	r1, [r4, #0]
     31e:	2001      	movs	r0, #1
     320:	47b8      	blx	r7
     322:	3401      	adds	r4, #1
     324:	7028      	strb	r0, [r5, #0]
     326:	e7f6      	b.n	316 <AT25SEWriteSample+0x6e>
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     328:	2380      	movs	r3, #128	; 0x80
     32a:	9a01      	ldr	r2, [sp, #4]
     32c:	02db      	lsls	r3, r3, #11
     32e:	6193      	str	r3, [r2, #24]
        pinHigh(cs_mem);

    }

    return bytesSent;
}
     330:	0030      	movs	r0, r6
     332:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
     334:	41004400 	.word	0x41004400
     338:	000016b5 	.word	0x000016b5
     33c:	20000460 	.word	0x20000460
     340:	00000245 	.word	0x00000245

00000344 <AT25SEreadSample>:
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     344:	2380      	movs	r3, #128	; 0x80

void AT25SEreadSample(u8_t startingAddress, u8_t len, u8_t *data) {
     346:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     348:	4f14      	ldr	r7, [pc, #80]	; (39c <AT25SEreadSample+0x58>)
     34a:	02db      	lsls	r3, r3, #11
     34c:	9201      	str	r2, [sp, #4]

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_SLOWREAD_ARRAY);
     34e:	4d14      	ldr	r5, [pc, #80]	; (3a0 <AT25SEreadSample+0x5c>)
    }

    return bytesSent;
}

void AT25SEreadSample(u8_t startingAddress, u8_t len, u8_t *data) {
     350:	0004      	movs	r4, r0
     352:	9100      	str	r1, [sp, #0]

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_SLOWREAD_ARRAY);
     354:	2001      	movs	r0, #1
     356:	617b      	str	r3, [r7, #20]
     358:	2103      	movs	r1, #3
     35a:	47a8      	blx	r5
     35c:	4e11      	ldr	r6, [pc, #68]	; (3a4 <AT25SEreadSample+0x60>)
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     35e:	2100      	movs	r1, #0
}

void AT25SEreadSample(u8_t startingAddress, u8_t len, u8_t *data) {

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_SLOWREAD_ARRAY);
     360:	7030      	strb	r0, [r6, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     362:	2001      	movs	r0, #1
     364:	47a8      	blx	r5
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     366:	2100      	movs	r1, #0

void AT25SEreadSample(u8_t startingAddress, u8_t len, u8_t *data) {

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_SLOWREAD_ARRAY);
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     368:	7030      	strb	r0, [r6, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     36a:	2001      	movs	r0, #1
     36c:	47a8      	blx	r5
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
     36e:	0021      	movs	r1, r4
void AT25SEreadSample(u8_t startingAddress, u8_t len, u8_t *data) {

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_SLOWREAD_ARRAY);
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     370:	7030      	strb	r0, [r6, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
     372:	2001      	movs	r0, #1
     374:	47a8      	blx	r5
     376:	9b00      	ldr	r3, [sp, #0]
     378:	9c01      	ldr	r4, [sp, #4]
     37a:	7030      	strb	r0, [r6, #0]
     37c:	18e3      	adds	r3, r4, r3
     37e:	9300      	str	r3, [sp, #0]

    for (u8_t pos = 0; pos < len; ++pos) {
     380:	9b00      	ldr	r3, [sp, #0]
     382:	429c      	cmp	r4, r3
     384:	d005      	beq.n	392 <AT25SEreadSample+0x4e>
        data[pos] = spiDataTransfer(SPI1,dummy_rx);
     386:	7831      	ldrb	r1, [r6, #0]
     388:	2001      	movs	r0, #1
     38a:	47a8      	blx	r5
     38c:	7020      	strb	r0, [r4, #0]
     38e:	3401      	adds	r4, #1
     390:	e7f6      	b.n	380 <AT25SEreadSample+0x3c>
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     392:	2380      	movs	r3, #128	; 0x80
     394:	02db      	lsls	r3, r3, #11
     396:	61bb      	str	r3, [r7, #24]
    }
    pinHigh(cs_mem);

     398:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
     39a:	46c0      	nop			; (mov r8, r8)
     39c:	41004400 	.word	0x41004400
     3a0:	000016b5 	.word	0x000016b5
     3a4:	20000460 	.word	0x20000460

000003a8 <readMS5803AdcResults>:
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     3a8:	2280      	movs	r2, #128	; 0x80
     3aa:	4b28      	ldr	r3, [pc, #160]	; (44c <readMS5803AdcResults+0xa4>)
     3ac:	0212      	lsls	r2, r2, #8
#include <MS5803.h>
#include <boardDefines.h>
#include <math.h>


u32_t readMS5803AdcResults() {
     3ae:	b5f0      	push	{r4, r5, r6, r7, lr}
     3b0:	615a      	str	r2, [r3, #20]
    pinLow(cs_baro);
//    dummy_rx = spiDataTransfer(SPI1, cmdAdcRead_);
//    u8_t _byte1 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte2 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte3 = spiDataTransfer(SPI1,dummy_tx);
    byteOut(spi2SCK,spi2MOSI, cmdAdcRead_);
     3b2:	2300      	movs	r3, #0
     3b4:	4d26      	ldr	r5, [pc, #152]	; (450 <readMS5803AdcResults+0xa8>)
#include <MS5803.h>
#include <boardDefines.h>
#include <math.h>


u32_t readMS5803AdcResults() {
     3b6:	b087      	sub	sp, #28
    pinLow(cs_baro);
//    dummy_rx = spiDataTransfer(SPI1, cmdAdcRead_);
//    u8_t _byte1 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte2 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte3 = spiDataTransfer(SPI1,dummy_tx);
    byteOut(spi2SCK,spi2MOSI, cmdAdcRead_);
     3b8:	9300      	str	r3, [sp, #0]
     3ba:	786b      	ldrb	r3, [r5, #1]
     3bc:	7828      	ldrb	r0, [r5, #0]
     3be:	78aa      	ldrb	r2, [r5, #2]
     3c0:	021b      	lsls	r3, r3, #8
     3c2:	4303      	orrs	r3, r0
     3c4:	0412      	lsls	r2, r2, #16
     3c6:	0019      	movs	r1, r3
     3c8:	0013      	movs	r3, r2
     3ca:	430b      	orrs	r3, r1
     3cc:	79a9      	ldrb	r1, [r5, #6]
     3ce:	796f      	ldrb	r7, [r5, #5]
     3d0:	79ec      	ldrb	r4, [r5, #7]
     3d2:	0209      	lsls	r1, r1, #8
     3d4:	4339      	orrs	r1, r7
     3d6:	0424      	lsls	r4, r4, #16
     3d8:	0008      	movs	r0, r1
     3da:	0021      	movs	r1, r4
     3dc:	7a2c      	ldrb	r4, [r5, #8]
     3de:	78ea      	ldrb	r2, [r5, #3]
     3e0:	7a6f      	ldrb	r7, [r5, #9]
     3e2:	4301      	orrs	r1, r0
     3e4:	0624      	lsls	r4, r4, #24
     3e6:	430c      	orrs	r4, r1
     3e8:	0612      	lsls	r2, r2, #24
     3ea:	431a      	orrs	r2, r3
     3ec:	0020      	movs	r0, r4
     3ee:	792b      	ldrb	r3, [r5, #4]
     3f0:	0039      	movs	r1, r7
     3f2:	4e18      	ldr	r6, [pc, #96]	; (454 <readMS5803AdcResults+0xac>)
     3f4:	47b0      	blx	r6
    u8_t _byte1 = byteIn(spi2SCK,spi2MISO);
     3f6:	7aeb      	ldrb	r3, [r5, #11]
     3f8:	7aa9      	ldrb	r1, [r5, #10]
     3fa:	021b      	lsls	r3, r3, #8
     3fc:	430b      	orrs	r3, r1
     3fe:	001a      	movs	r2, r3
     400:	7b2b      	ldrb	r3, [r5, #12]
     402:	4e15      	ldr	r6, [pc, #84]	; (458 <readMS5803AdcResults+0xb0>)
     404:	041b      	lsls	r3, r3, #16
     406:	4313      	orrs	r3, r2
     408:	7b6a      	ldrb	r2, [r5, #13]
     40a:	7bad      	ldrb	r5, [r5, #14]
     40c:	0612      	lsls	r2, r2, #24
     40e:	431a      	orrs	r2, r3
     410:	0039      	movs	r1, r7
     412:	002b      	movs	r3, r5
     414:	0020      	movs	r0, r4
     416:	9203      	str	r2, [sp, #12]
     418:	47b0      	blx	r6
    u8_t _byte2 = byteIn(spi2SCK,spi2MISO);
     41a:	9a03      	ldr	r2, [sp, #12]
//    dummy_rx = spiDataTransfer(SPI1, cmdAdcRead_);
//    u8_t _byte1 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte2 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte3 = spiDataTransfer(SPI1,dummy_tx);
    byteOut(spi2SCK,spi2MOSI, cmdAdcRead_);
    u8_t _byte1 = byteIn(spi2SCK,spi2MISO);
     41c:	9004      	str	r0, [sp, #16]
    u8_t _byte2 = byteIn(spi2SCK,spi2MISO);
     41e:	002b      	movs	r3, r5
     420:	0039      	movs	r1, r7
     422:	0020      	movs	r0, r4
     424:	47b0      	blx	r6
    u8_t _byte3 = byteIn(spi2SCK,spi2MISO);
     426:	9a03      	ldr	r2, [sp, #12]
//    u8_t _byte1 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte2 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte3 = spiDataTransfer(SPI1,dummy_tx);
    byteOut(spi2SCK,spi2MOSI, cmdAdcRead_);
    u8_t _byte1 = byteIn(spi2SCK,spi2MISO);
    u8_t _byte2 = byteIn(spi2SCK,spi2MISO);
     428:	9005      	str	r0, [sp, #20]
    u8_t _byte3 = byteIn(spi2SCK,spi2MISO);
     42a:	002b      	movs	r3, r5
     42c:	0020      	movs	r0, r4
     42e:	0039      	movs	r1, r7
     430:	47b0      	blx	r6
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     432:	2280      	movs	r2, #128	; 0x80
     434:	4b05      	ldr	r3, [pc, #20]	; (44c <readMS5803AdcResults+0xa4>)
     436:	0212      	lsls	r2, r2, #8
     438:	619a      	str	r2, [r3, #24]
    pinHigh(cs_baro);

    u32_t _receive = (_byte1 << 16) | (_byte2 << 8) | (_byte3);
    return _receive;
     43a:	9b04      	ldr	r3, [sp, #16]
     43c:	9a05      	ldr	r2, [sp, #20]
     43e:	041b      	lsls	r3, r3, #16
     440:	0215      	lsls	r5, r2, #8
     442:	431d      	orrs	r5, r3
     444:	4328      	orrs	r0, r5
}
     446:	b007      	add	sp, #28
     448:	bdf0      	pop	{r4, r5, r6, r7, pc}
     44a:	46c0      	nop			; (mov r8, r8)
     44c:	41004400 	.word	0x41004400
     450:	0000278c 	.word	0x0000278c
     454:	00000c7d 	.word	0x00000c7d
     458:	00000ce9 	.word	0x00000ce9

0000045c <ConvertPressureTemperature>:

void ConvertPressureTemperature(Barometer *my_barometer) {
     45c:	b5f0      	push	{r4, r5, r6, r7, lr}
    volatile const u16_t C1 = my_barometer->coefficients_[0];
    volatile const u16_t C2 = my_barometer->coefficients_[1];
    volatile const u16_t C3 = my_barometer->coefficients_[2];
    volatile const u16_t C4 = my_barometer->coefficients_[3];
     45e:	240a      	movs	r4, #10

    u32_t _receive = (_byte1 << 16) | (_byte2 << 8) | (_byte3);
    return _receive;
}

void ConvertPressureTemperature(Barometer *my_barometer) {
     460:	b08d      	sub	sp, #52	; 0x34
    volatile const u16_t C1 = my_barometer->coefficients_[0];
     462:	8803      	ldrh	r3, [r0, #0]
     464:	aa04      	add	r2, sp, #16
     466:	8093      	strh	r3, [r2, #4]
    volatile const u16_t C2 = my_barometer->coefficients_[1];
     468:	8843      	ldrh	r3, [r0, #2]
    volatile const u16_t C3 = my_barometer->coefficients_[2];
    volatile const u16_t C4 = my_barometer->coefficients_[3];
     46a:	18a4      	adds	r4, r4, r2
    return _receive;
}

void ConvertPressureTemperature(Barometer *my_barometer) {
    volatile const u16_t C1 = my_barometer->coefficients_[0];
    volatile const u16_t C2 = my_barometer->coefficients_[1];
     46c:	80d3      	strh	r3, [r2, #6]
    volatile const u16_t C3 = my_barometer->coefficients_[2];
     46e:	8883      	ldrh	r3, [r0, #4]
    return _receive;
}

void ConvertPressureTemperature(Barometer *my_barometer) {
    volatile const u16_t C1 = my_barometer->coefficients_[0];
    volatile const u16_t C2 = my_barometer->coefficients_[1];
     470:	1d95      	adds	r5, r2, #6
    volatile const u16_t C3 = my_barometer->coefficients_[2];
     472:	8113      	strh	r3, [r2, #8]
    volatile const u16_t C4 = my_barometer->coefficients_[3];
     474:	88c3      	ldrh	r3, [r0, #6]
     476:	9401      	str	r4, [sp, #4]
     478:	8023      	strh	r3, [r4, #0]
    volatile const u16_t C5 = my_barometer->coefficients_[4];
     47a:	8903      	ldrh	r3, [r0, #8]
     47c:	aa07      	add	r2, sp, #28
     47e:	8013      	strh	r3, [r2, #0]
    volatile const u16_t C6 = my_barometer->coefficients_[5];
     480:	230e      	movs	r3, #14

    u32_t _receive = (_byte1 << 16) | (_byte2 << 8) | (_byte3);
    return _receive;
}

void ConvertPressureTemperature(Barometer *my_barometer) {
     482:	0007      	movs	r7, r0
    volatile const u16_t C1 = my_barometer->coefficients_[0];
    volatile const u16_t C2 = my_barometer->coefficients_[1];
    volatile const u16_t C3 = my_barometer->coefficients_[2];
    volatile const u16_t C4 = my_barometer->coefficients_[3];
    volatile const u16_t C5 = my_barometer->coefficients_[4];
    volatile const u16_t C6 = my_barometer->coefficients_[5];
     484:	8941      	ldrh	r1, [r0, #10]
     486:	a804      	add	r0, sp, #16
     488:	181b      	adds	r3, r3, r0
     48a:	8019      	strh	r1, [r3, #0]

    // calculate 1st order pressure and temperature (MS5607 1st order algorithm)
    const  int32_t dT = (my_barometer->rawTempatureData) - ((int32_t)C5 << 8);
     48c:	8816      	ldrh	r6, [r2, #0]
    my_barometer->temperatureCelcus  = 2000 + (((int64_t)dT * C6) >> 32) ;
     48e:	693a      	ldr	r2, [r7, #16]
     490:	0236      	lsls	r6, r6, #8
     492:	8818      	ldrh	r0, [r3, #0]
     494:	1b96      	subs	r6, r2, r6
     496:	17f2      	asrs	r2, r6, #31
     498:	4c2a      	ldr	r4, [pc, #168]	; (544 <ConvertPressureTemperature+0xe8>)
     49a:	9203      	str	r2, [sp, #12]
     49c:	17f3      	asrs	r3, r6, #31
     49e:	0032      	movs	r2, r6
     4a0:	b280      	uxth	r0, r0
     4a2:	2100      	movs	r1, #0
     4a4:	47a0      	blx	r4
     4a6:	23fa      	movs	r3, #250	; 0xfa
     4a8:	00db      	lsls	r3, r3, #3
     4aa:	18c9      	adds	r1, r1, r3

    volatile const  int64_t OFF   = ((int64_t)C2 << 16) + (((C4 * (int64_t)dT)) >> 7);
     4ac:	882b      	ldrh	r3, [r5, #0]
    volatile const u16_t C5 = my_barometer->coefficients_[4];
    volatile const u16_t C6 = my_barometer->coefficients_[5];

    // calculate 1st order pressure and temperature (MS5607 1st order algorithm)
    const  int32_t dT = (my_barometer->rawTempatureData) - ((int32_t)C5 << 8);
    my_barometer->temperatureCelcus  = 2000 + (((int64_t)dT * C6) >> 32) ;
     4ae:	6179      	str	r1, [r7, #20]

    volatile const  int64_t OFF   = ((int64_t)C2 << 16) + (((C4 * (int64_t)dT)) >> 7);
     4b0:	b29b      	uxth	r3, r3
     4b2:	9302      	str	r3, [sp, #8]
     4b4:	9b01      	ldr	r3, [sp, #4]
     4b6:	0032      	movs	r2, r6
     4b8:	8818      	ldrh	r0, [r3, #0]
     4ba:	2100      	movs	r1, #0
     4bc:	17f3      	asrs	r3, r6, #31
     4be:	b280      	uxth	r0, r0
     4c0:	47a0      	blx	r4
     4c2:	064b      	lsls	r3, r1, #25
     4c4:	09c4      	lsrs	r4, r0, #7
     4c6:	431c      	orrs	r4, r3
     4c8:	2300      	movs	r3, #0
     4ca:	11cd      	asrs	r5, r1, #7
     4cc:	9902      	ldr	r1, [sp, #8]
     4ce:	040a      	lsls	r2, r1, #16
     4d0:	1912      	adds	r2, r2, r4
     4d2:	416b      	adcs	r3, r5
     4d4:	9208      	str	r2, [sp, #32]
     4d6:	9309      	str	r3, [sp, #36]	; 0x24
    volatile const  int64_t SENS  =  ((int64_t)C1 << 15) + (((C3 * (int64_t)dT)) >> 8);
     4d8:	ab04      	add	r3, sp, #16
     4da:	889c      	ldrh	r4, [r3, #4]
     4dc:	8918      	ldrh	r0, [r3, #8]
     4de:	0032      	movs	r2, r6
     4e0:	9b03      	ldr	r3, [sp, #12]
     4e2:	4d18      	ldr	r5, [pc, #96]	; (544 <ConvertPressureTemperature+0xe8>)
     4e4:	b280      	uxth	r0, r0
     4e6:	2100      	movs	r1, #0
     4e8:	47a8      	blx	r5
     4ea:	060b      	lsls	r3, r1, #24
     4ec:	0a05      	lsrs	r5, r0, #8
     4ee:	431d      	orrs	r5, r3
     4f0:	2300      	movs	r3, #0
     4f2:	b2a4      	uxth	r4, r4
     4f4:	120e      	asrs	r6, r1, #8
     4f6:	03e2      	lsls	r2, r4, #15
     4f8:	1952      	adds	r2, r2, r5
     4fa:	4173      	adcs	r3, r6
     4fc:	920a      	str	r2, [sp, #40]	; 0x28
     4fe:	930b      	str	r3, [sp, #44]	; 0x2c
    my_barometer->pressureMbar = (((my_barometer->rawPressureData * SENS) / 2097152) - OFF) / 32768;
     500:	9a0a      	ldr	r2, [sp, #40]	; 0x28
     502:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
     504:	9c08      	ldr	r4, [sp, #32]
     506:	9d09      	ldr	r5, [sp, #36]	; 0x24
     508:	4e0e      	ldr	r6, [pc, #56]	; (544 <ConvertPressureTemperature+0xe8>)
     50a:	68f8      	ldr	r0, [r7, #12]
     50c:	2100      	movs	r1, #0
     50e:	47b0      	blx	r6
     510:	2300      	movs	r3, #0
     512:	17ce      	asrs	r6, r1, #31
     514:	02f6      	lsls	r6, r6, #11
     516:	0af2      	lsrs	r2, r6, #11
     518:	1880      	adds	r0, r0, r2
     51a:	4159      	adcs	r1, r3
     51c:	02ce      	lsls	r6, r1, #11
     51e:	0d42      	lsrs	r2, r0, #21
     520:	4332      	orrs	r2, r6
     522:	154b      	asrs	r3, r1, #21
     524:	1b12      	subs	r2, r2, r4
     526:	41ab      	sbcs	r3, r5
     528:	2100      	movs	r1, #0
     52a:	17dc      	asrs	r4, r3, #31
     52c:	0464      	lsls	r4, r4, #17
     52e:	0c60      	lsrs	r0, r4, #17
     530:	1812      	adds	r2, r2, r0
     532:	414b      	adcs	r3, r1
     534:	0011      	movs	r1, r2
     536:	045b      	lsls	r3, r3, #17
     538:	0bca      	lsrs	r2, r1, #15
     53a:	431a      	orrs	r2, r3
     53c:	61fa      	str	r2, [r7, #28]
}
     53e:	b00d      	add	sp, #52	; 0x34
     540:	bdf0      	pop	{r4, r5, r6, r7, pc}
     542:	46c0      	nop			; (mov r8, r8)
     544:	000016f5 	.word	0x000016f5

00000548 <pascalToCent>:
        748275, 767202, 786555, 806356, 826627,
        847395, 868688, 890537, 912974, 936037,
        959766, 984206
    };

    my_barometer->pressurePa = my_barometer->pressureMbar *10;
     548:	220a      	movs	r2, #10
     54a:	69c3      	ldr	r3, [r0, #28]
    double altFeet = (1-pow((my_barometer->pressurePa/1013.25),(0.190284)))*145366.45;
    my_barometer->heightFeet = (float)altFeet;

}

void pascalToCent(Barometer *my_barometer) {
     54c:	b570      	push	{r4, r5, r6, lr}
        748275, 767202, 786555, 806356, 826627,
        847395, 868688, 890537, 912974, 936037,
        959766, 984206
    };

    my_barometer->pressurePa = my_barometer->pressureMbar *10;
     54e:	435a      	muls	r2, r3

    if (my_barometer->pressurePa > PA_INIT)
     550:	4c0e      	ldr	r4, [pc, #56]	; (58c <pascalToCent+0x44>)
        748275, 767202, 786555, 806356, 826627,
        847395, 868688, 890537, 912974, 936037,
        959766, 984206
    };

    my_barometer->pressurePa = my_barometer->pressureMbar *10;
     552:	6182      	str	r2, [r0, #24]

    if (my_barometer->pressurePa > PA_INIT)
     554:	42a2      	cmp	r2, r4
     556:	d901      	bls.n	55c <pascalToCent+0x14>
        my_barometer->heightCm = lookupTable[0];
     558:	4b0d      	ldr	r3, [pc, #52]	; (590 <pascalToCent+0x48>)
     55a:	e015      	b.n	588 <pascalToCent+0x40>
    else {
        const int32_t inx = (PA_INIT - my_barometer->pressurePa) >> 10;
     55c:	1aa3      	subs	r3, r4, r2
     55e:	0a9b      	lsrs	r3, r3, #10
        if (inx >= PZLUT_ENTRIES - 1)
     560:	2b4b      	cmp	r3, #75	; 0x4b
     562:	d901      	bls.n	568 <pascalToCent+0x20>
            my_barometer->heightCm = lookupTable[PZLUT_ENTRIES - 1];
     564:	4b0b      	ldr	r3, [pc, #44]	; (594 <pascalToCent+0x4c>)
     566:	e00f      	b.n	588 <pascalToCent+0x40>
        else {
            const int32_t pa1 = PA_INIT - (inx << 10);
            const int32_t z1 = lookupTable[inx];
     568:	4d0b      	ldr	r5, [pc, #44]	; (598 <pascalToCent+0x50>)
     56a:	0099      	lsls	r1, r3, #2
            const int32_t z2 = lookupTable[inx + 1];
            my_barometer->heightCm = (z1 + (((pa1 - my_barometer->pressurePa) * (z2 - z1)) >> 10));
     56c:	029e      	lsls	r6, r3, #10
        if (inx >= PZLUT_ENTRIES - 1)
            my_barometer->heightCm = lookupTable[PZLUT_ENTRIES - 1];
        else {
            const int32_t pa1 = PA_INIT - (inx << 10);
            const int32_t z1 = lookupTable[inx];
            const int32_t z2 = lookupTable[inx + 1];
     56e:	3301      	adds	r3, #1
     570:	009b      	lsls	r3, r3, #2
     572:	18eb      	adds	r3, r5, r3
        const int32_t inx = (PA_INIT - my_barometer->pressurePa) >> 10;
        if (inx >= PZLUT_ENTRIES - 1)
            my_barometer->heightCm = lookupTable[PZLUT_ENTRIES - 1];
        else {
            const int32_t pa1 = PA_INIT - (inx << 10);
            const int32_t z1 = lookupTable[inx];
     574:	1869      	adds	r1, r5, r1
            const int32_t z2 = lookupTable[inx + 1];
            my_barometer->heightCm = (z1 + (((pa1 - my_barometer->pressurePa) * (z2 - z1)) >> 10));
     576:	1ba4      	subs	r4, r4, r6
        const int32_t inx = (PA_INIT - my_barometer->pressurePa) >> 10;
        if (inx >= PZLUT_ENTRIES - 1)
            my_barometer->heightCm = lookupTable[PZLUT_ENTRIES - 1];
        else {
            const int32_t pa1 = PA_INIT - (inx << 10);
            const int32_t z1 = lookupTable[inx];
     578:	6909      	ldr	r1, [r1, #16]
            const int32_t z2 = lookupTable[inx + 1];
            my_barometer->heightCm = (z1 + (((pa1 - my_barometer->pressurePa) * (z2 - z1)) >> 10));
     57a:	1aa4      	subs	r4, r4, r2
     57c:	691a      	ldr	r2, [r3, #16]
     57e:	1a52      	subs	r2, r2, r1
     580:	0013      	movs	r3, r2
     582:	4363      	muls	r3, r4
     584:	0a9b      	lsrs	r3, r3, #10
     586:	185b      	adds	r3, r3, r1
     588:	6203      	str	r3, [r0, #32]
        }
    }
}
     58a:	bd70      	pop	{r4, r5, r6, pc}
     58c:	000199cc 	.word	0x000199cc
     590:	ffff8d20 	.word	0xffff8d20
     594:	000f048e 	.word	0x000f048e
     598:	0000278c 	.word	0x0000278c

0000059c <readMS5803Coefficients>:

void readMS5803Coefficients(Barometer *my_barometer) {
     59c:	b5f0      	push	{r4, r5, r6, r7, lr}
     59e:	27a2      	movs	r7, #162	; 0xa2
     5a0:	b087      	sub	sp, #28
     5a2:	9002      	str	r0, [sp, #8]

    u8_t dummy_tx = 0xFF;
    u8_t dummy_rx;

    for (u8_t coeff_num = 0; coeff_num < 6 ; ++coeff_num ) {
        delay_us(600);
     5a4:	2096      	movs	r0, #150	; 0x96
     5a6:	4c2b      	ldr	r4, [pc, #172]	; (654 <readMS5803Coefficients+0xb8>)
     5a8:	0080      	lsls	r0, r0, #2
     5aa:	47a0      	blx	r4
        u8_t _cmd = MS5803_CMD_PROM_READ + ((coeff_num+1)*2);
        delay_us(600);
     5ac:	2096      	movs	r0, #150	; 0x96
     5ae:	0080      	lsls	r0, r0, #2
     5b0:	47a0      	blx	r4
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     5b2:	2280      	movs	r2, #128	; 0x80
        pinLow(cs_baro);
//      dummy_rx = spiDataTransfer(SPI1, _cmd);
//      u8_t _byte1 = spiDataTransfer(SPI1,dummy_tx);
//      u8_t _byte2 = spiDataTransfer(SPI1,dummy_tx);
        byteOut(spi2SCK,spi2MOSI, _cmd);
     5b4:	4c28      	ldr	r4, [pc, #160]	; (658 <readMS5803Coefficients+0xbc>)
     5b6:	4b29      	ldr	r3, [pc, #164]	; (65c <readMS5803Coefficients+0xc0>)
     5b8:	0212      	lsls	r2, r2, #8
     5ba:	615a      	str	r2, [r3, #20]
     5bc:	7863      	ldrb	r3, [r4, #1]
     5be:	7820      	ldrb	r0, [r4, #0]
     5c0:	78a2      	ldrb	r2, [r4, #2]
     5c2:	021b      	lsls	r3, r3, #8
     5c4:	4303      	orrs	r3, r0
     5c6:	0412      	lsls	r2, r2, #16
     5c8:	0019      	movs	r1, r3
     5ca:	0013      	movs	r3, r2
     5cc:	430b      	orrs	r3, r1
     5ce:	79a1      	ldrb	r1, [r4, #6]
     5d0:	7966      	ldrb	r6, [r4, #5]
     5d2:	0209      	lsls	r1, r1, #8
     5d4:	4331      	orrs	r1, r6
     5d6:	0008      	movs	r0, r1
     5d8:	79e1      	ldrb	r1, [r4, #7]
     5da:	78e2      	ldrb	r2, [r4, #3]
     5dc:	0409      	lsls	r1, r1, #16
     5de:	4301      	orrs	r1, r0
     5e0:	7a20      	ldrb	r0, [r4, #8]
     5e2:	7a66      	ldrb	r6, [r4, #9]
     5e4:	0612      	lsls	r2, r2, #24
     5e6:	0600      	lsls	r0, r0, #24
     5e8:	4308      	orrs	r0, r1
     5ea:	431a      	orrs	r2, r3
     5ec:	9700      	str	r7, [sp, #0]
     5ee:	7923      	ldrb	r3, [r4, #4]
     5f0:	0031      	movs	r1, r6
     5f2:	4d1b      	ldr	r5, [pc, #108]	; (660 <readMS5803Coefficients+0xc4>)
     5f4:	9003      	str	r0, [sp, #12]
     5f6:	47a8      	blx	r5
        u8_t _byte1 = byteIn(spi2SCK,spi2MISO);
     5f8:	7ae3      	ldrb	r3, [r4, #11]
     5fa:	0020      	movs	r0, r4
     5fc:	7aa1      	ldrb	r1, [r4, #10]
     5fe:	7b24      	ldrb	r4, [r4, #12]
     600:	021b      	lsls	r3, r3, #8
     602:	430b      	orrs	r3, r1
     604:	0424      	lsls	r4, r4, #16
     606:	001a      	movs	r2, r3
     608:	0023      	movs	r3, r4
     60a:	7b44      	ldrb	r4, [r0, #13]
     60c:	7b85      	ldrb	r5, [r0, #14]
     60e:	4313      	orrs	r3, r2
     610:	0624      	lsls	r4, r4, #24
     612:	431c      	orrs	r4, r3
     614:	0022      	movs	r2, r4
     616:	002b      	movs	r3, r5
     618:	9404      	str	r4, [sp, #16]
     61a:	0031      	movs	r1, r6
     61c:	4c11      	ldr	r4, [pc, #68]	; (664 <readMS5803Coefficients+0xc8>)
     61e:	9803      	ldr	r0, [sp, #12]
     620:	47a0      	blx	r4
        u8_t _byte2 = byteIn(spi2SCK,spi2MISO);
     622:	002b      	movs	r3, r5
        pinLow(cs_baro);
//      dummy_rx = spiDataTransfer(SPI1, _cmd);
//      u8_t _byte1 = spiDataTransfer(SPI1,dummy_tx);
//      u8_t _byte2 = spiDataTransfer(SPI1,dummy_tx);
        byteOut(spi2SCK,spi2MOSI, _cmd);
        u8_t _byte1 = byteIn(spi2SCK,spi2MISO);
     624:	9005      	str	r0, [sp, #20]
        u8_t _byte2 = byteIn(spi2SCK,spi2MISO);
     626:	9a04      	ldr	r2, [sp, #16]
     628:	9803      	ldr	r0, [sp, #12]
     62a:	0031      	movs	r1, r6
     62c:	4c0d      	ldr	r4, [pc, #52]	; (664 <readMS5803Coefficients+0xc8>)
     62e:	47a0      	blx	r4
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     630:	2280      	movs	r2, #128	; 0x80
     632:	4b0a      	ldr	r3, [pc, #40]	; (65c <readMS5803Coefficients+0xc0>)
     634:	0212      	lsls	r2, r2, #8
     636:	619a      	str	r2, [r3, #24]
        pinHigh(cs_baro);
        my_barometer->coefficients_[coeff_num] = (_byte1 << 8) | _byte2;
     638:	9b05      	ldr	r3, [sp, #20]
     63a:	021d      	lsls	r5, r3, #8
     63c:	9b02      	ldr	r3, [sp, #8]
     63e:	4328      	orrs	r0, r5
     640:	8018      	strh	r0, [r3, #0]
     642:	1cbb      	adds	r3, r7, #2
     644:	b2df      	uxtb	r7, r3
     646:	9b02      	ldr	r3, [sp, #8]
     648:	3302      	adds	r3, #2
     64a:	9302      	str	r3, [sp, #8]
void readMS5803Coefficients(Barometer *my_barometer) {

    u8_t dummy_tx = 0xFF;
    u8_t dummy_rx;

    for (u8_t coeff_num = 0; coeff_num < 6 ; ++coeff_num ) {
     64c:	2fae      	cmp	r7, #174	; 0xae
     64e:	d1a9      	bne.n	5a4 <readMS5803Coefficients+0x8>
        u8_t _byte2 = byteIn(spi2SCK,spi2MISO);
        pinHigh(cs_baro);
        my_barometer->coefficients_[coeff_num] = (_byte1 << 8) | _byte2;
    }

}
     650:	b007      	add	sp, #28
     652:	bdf0      	pop	{r4, r5, r6, r7, pc}
     654:	00000ef5 	.word	0x00000ef5
     658:	0000278c 	.word	0x0000278c
     65c:	41004400 	.word	0x41004400
     660:	00000c7d 	.word	0x00000c7d
     664:	00000ce9 	.word	0x00000ce9

00000668 <initMS5803Barometer>:

void initMS5803Barometer(Barometer *my_barometer) {
     668:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     66a:	2680      	movs	r6, #128	; 0x80
    u8_t dummy_tx = 0xFF;
    u8_t dummy_rx;

    pinLow(cs_baro);
//   dummy_rx = spiDataTransfer(SPI1, MS5803_CMD_RES);
    byteOut(spi2SCK,spi2MOSI, MS5803_CMD_RES);
     66c:	231e      	movs	r3, #30
     66e:	491a      	ldr	r1, [pc, #104]	; (6d8 <initMS5803Barometer+0x70>)
     670:	4d1a      	ldr	r5, [pc, #104]	; (6dc <initMS5803Barometer+0x74>)
     672:	0236      	lsls	r6, r6, #8
     674:	616e      	str	r6, [r5, #20]
     676:	9300      	str	r3, [sp, #0]
     678:	784b      	ldrb	r3, [r1, #1]
     67a:	780a      	ldrb	r2, [r1, #0]
     67c:	021b      	lsls	r3, r3, #8
     67e:	4313      	orrs	r3, r2
     680:	788a      	ldrb	r2, [r1, #2]
        my_barometer->coefficients_[coeff_num] = (_byte1 << 8) | _byte2;
    }

}

void initMS5803Barometer(Barometer *my_barometer) {
     682:	0004      	movs	r4, r0
    u8_t dummy_tx = 0xFF;
    u8_t dummy_rx;

    pinLow(cs_baro);
//   dummy_rx = spiDataTransfer(SPI1, MS5803_CMD_RES);
    byteOut(spi2SCK,spi2MOSI, MS5803_CMD_RES);
     684:	0412      	lsls	r2, r2, #16
     686:	0018      	movs	r0, r3
     688:	0013      	movs	r3, r2
     68a:	78ca      	ldrb	r2, [r1, #3]
     68c:	4303      	orrs	r3, r0
     68e:	0612      	lsls	r2, r2, #24
     690:	1d4f      	adds	r7, r1, #5
     692:	431a      	orrs	r2, r3
     694:	7948      	ldrb	r0, [r1, #5]
     696:	790b      	ldrb	r3, [r1, #4]
     698:	7989      	ldrb	r1, [r1, #6]
     69a:	0209      	lsls	r1, r1, #8
     69c:	4301      	orrs	r1, r0
     69e:	78b8      	ldrb	r0, [r7, #2]
     6a0:	0400      	lsls	r0, r0, #16
     6a2:	4301      	orrs	r1, r0
     6a4:	78f8      	ldrb	r0, [r7, #3]
     6a6:	0600      	lsls	r0, r0, #24
     6a8:	4308      	orrs	r0, r1
     6aa:	7939      	ldrb	r1, [r7, #4]
     6ac:	4f0c      	ldr	r7, [pc, #48]	; (6e0 <initMS5803Barometer+0x78>)
     6ae:	47b8      	blx	r7
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     6b0:	61ae      	str	r6, [r5, #24]
    pinHigh(cs_baro);
    delay_ms(200);
     6b2:	20c8      	movs	r0, #200	; 0xc8
     6b4:	4b0b      	ldr	r3, [pc, #44]	; (6e4 <initMS5803Barometer+0x7c>)
     6b6:	4798      	blx	r3
    readMS5803Coefficients(my_barometer);
     6b8:	0020      	movs	r0, r4
     6ba:	4b0b      	ldr	r3, [pc, #44]	; (6e8 <initMS5803Barometer+0x80>)
     6bc:	4798      	blx	r3

    my_barometer->heightCm = 4000;
     6be:	23fa      	movs	r3, #250	; 0xfa
     6c0:	011b      	lsls	r3, r3, #4
     6c2:	6223      	str	r3, [r4, #32]
    my_barometer->pressurePa = 10000;
     6c4:	4b09      	ldr	r3, [pc, #36]	; (6ec <initMS5803Barometer+0x84>)
     6c6:	61a3      	str	r3, [r4, #24]
    my_barometer->rawPressureData = 4311550;
     6c8:	4b09      	ldr	r3, [pc, #36]	; (6f0 <initMS5803Barometer+0x88>)
     6ca:	60e3      	str	r3, [r4, #12]
    my_barometer->rawTempatureData = 8387300;
     6cc:	4b09      	ldr	r3, [pc, #36]	; (6f4 <initMS5803Barometer+0x8c>)
     6ce:	6123      	str	r3, [r4, #16]
    my_barometer->temperatureCelcus = 2000;
     6d0:	23fa      	movs	r3, #250	; 0xfa
     6d2:	00db      	lsls	r3, r3, #3
     6d4:	6163      	str	r3, [r4, #20]




}
     6d6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
     6d8:	0000278c 	.word	0x0000278c
     6dc:	41004400 	.word	0x41004400
     6e0:	00000c7d 	.word	0x00000c7d
     6e4:	00000f25 	.word	0x00000f25
     6e8:	0000059d 	.word	0x0000059d
     6ec:	00002710 	.word	0x00002710
     6f0:	0041c9fe 	.word	0x0041c9fe
     6f4:	007ffae4 	.word	0x007ffae4

000006f8 <init>:
#include "math.h"




void init() {
     6f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    SystemInit();
     6fa:	4bbf      	ldr	r3, [pc, #764]	; (9f8 <init+0x300>)
#include "math.h"




void init() {
     6fc:	b085      	sub	sp, #20
    SystemInit();
     6fe:	4798      	blx	r3
    GclkInit();
     700:	4bbe      	ldr	r3, [pc, #760]	; (9fc <init+0x304>)
     702:	4798      	blx	r3
    RtcInit();
     704:	4bbe      	ldr	r3, [pc, #760]	; (a00 <init+0x308>)
     706:	4798      	blx	r3
    delayInit();
     708:	4bbe      	ldr	r3, [pc, #760]	; (a04 <init+0x30c>)
     70a:	4798      	blx	r3
    adcInit();
     70c:	4bbe      	ldr	r3, [pc, #760]	; (a08 <init+0x310>)
     70e:	4798      	blx	r3
    dmaInit();
     710:	4bbe      	ldr	r3, [pc, #760]	; (a0c <init+0x314>)
     712:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     714:	2240      	movs	r2, #64	; 0x40
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     716:	21c1      	movs	r1, #193	; 0xc1

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     718:	4bbd      	ldr	r3, [pc, #756]	; (a10 <init+0x318>)
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     71a:	0089      	lsls	r1, r1, #2

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     71c:	601a      	str	r2, [r3, #0]
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     71e:	5858      	ldr	r0, [r3, r1]
     720:	4abc      	ldr	r2, [pc, #752]	; (a14 <init+0x31c>)
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     722:	2401      	movs	r4, #1
     724:	4002      	ands	r2, r0
     726:	505a      	str	r2, [r3, r1]
     728:	4bbb      	ldr	r3, [pc, #748]	; (a18 <init+0x320>)

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     72a:	2510      	movs	r5, #16
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     72c:	0019      	movs	r1, r3
     72e:	3154      	adds	r1, #84	; 0x54
     730:	780a      	ldrb	r2, [r1, #0]

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     732:	0018      	movs	r0, r3
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     734:	43a2      	bics	r2, r4
     736:	700a      	strb	r2, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     738:	2280      	movs	r2, #128	; 0x80
     73a:	0352      	lsls	r2, r2, #13
     73c:	609a      	str	r2, [r3, #8]

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     73e:	220f      	movs	r2, #15
     740:	3033      	adds	r0, #51	; 0x33
     742:	7801      	ldrb	r1, [r0, #0]
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     744:	001e      	movs	r6, r3

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     746:	4391      	bics	r1, r2
     748:	4321      	orrs	r1, r4
     74a:	7001      	strb	r1, [r0, #0]
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     74c:	7cc1      	ldrb	r1, [r0, #19]
     74e:	36c3      	adds	r6, #195	; 0xc3
     750:	4321      	orrs	r1, r4
     752:	74c1      	strb	r1, [r0, #19]

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     754:	0019      	movs	r1, r3
     756:	31b1      	adds	r1, #177	; 0xb1
     758:	7808      	ldrb	r0, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     75a:	001f      	movs	r7, r3

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     75c:	4010      	ands	r0, r2
     75e:	4328      	orrs	r0, r5
     760:	7008      	strb	r0, [r1, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     762:	7830      	ldrb	r0, [r6, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     764:	3788      	adds	r7, #136	; 0x88
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     766:	4320      	orrs	r0, r4
     768:	7030      	strb	r0, [r6, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     76a:	7808      	ldrb	r0, [r1, #0]
     76c:	4010      	ands	r0, r2
     76e:	4328      	orrs	r0, r5
     770:	7008      	strb	r0, [r1, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     772:	7830      	ldrb	r0, [r6, #0]
     774:	4320      	orrs	r0, r4
     776:	7030      	strb	r0, [r6, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     778:	7d30      	ldrb	r0, [r6, #20]
     77a:	43a0      	bics	r0, r4
     77c:	7530      	strb	r0, [r6, #20]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     77e:	2080      	movs	r0, #128	; 0x80
     780:	0400      	lsls	r0, r0, #16
     782:	9703      	str	r7, [sp, #12]
     784:	6038      	str	r0, [r7, #0]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     786:	60f8      	str	r0, [r7, #12]

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     788:	7808      	ldrb	r0, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     78a:	003e      	movs	r6, r7

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     78c:	4390      	bics	r0, r2
     78e:	4320      	orrs	r0, r4
     790:	7008      	strb	r0, [r1, #0]
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     792:	20c2      	movs	r0, #194	; 0xc2
     794:	4684      	mov	ip, r0
     796:	449c      	add	ip, r3
     798:	4660      	mov	r0, ip
     79a:	4667      	mov	r7, ip
     79c:	7800      	ldrb	r0, [r0, #0]
     79e:	4320      	orrs	r0, r4
     7a0:	7038      	strb	r0, [r7, #0]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     7a2:	7808      	ldrb	r0, [r1, #0]
     7a4:	4390      	bics	r0, r2
     7a6:	4320      	orrs	r0, r4
     7a8:	7008      	strb	r0, [r1, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     7aa:	0018      	movs	r0, r3
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     7ac:	7839      	ldrb	r1, [r7, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     7ae:	30d6      	adds	r0, #214	; 0xd6
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     7b0:	4321      	orrs	r1, r4
     7b2:	7039      	strb	r1, [r7, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     7b4:	7801      	ldrb	r1, [r0, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     7b6:	2702      	movs	r7, #2
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     7b8:	43a1      	bics	r1, r4
     7ba:	7001      	strb	r1, [r0, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     7bc:	2180      	movs	r1, #128	; 0x80
     7be:	9803      	ldr	r0, [sp, #12]
     7c0:	03c9      	lsls	r1, r1, #15
     7c2:	6001      	str	r1, [r0, #0]

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     7c4:	0018      	movs	r0, r3
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     7c6:	60f1      	str	r1, [r6, #12]

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     7c8:	3031      	adds	r0, #49	; 0x31
     7ca:	7801      	ldrb	r1, [r0, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     7cc:	3e3f      	subs	r6, #63	; 0x3f

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     7ce:	4011      	ands	r1, r2
     7d0:	430d      	orrs	r5, r1
     7d2:	7005      	strb	r5, [r0, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     7d4:	001d      	movs	r5, r3
     7d6:	3543      	adds	r5, #67	; 0x43
     7d8:	7829      	ldrb	r1, [r5, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     7da:	46bc      	mov	ip, r7
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     7dc:	4321      	orrs	r1, r4
     7de:	7029      	strb	r1, [r5, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     7e0:	7da9      	ldrb	r1, [r5, #22]
     7e2:	3505      	adds	r5, #5
     7e4:	43a1      	bics	r1, r4
     7e6:	7469      	strb	r1, [r5, #17]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     7e8:	2180      	movs	r1, #128	; 0x80
     7ea:	0489      	lsls	r1, r1, #18
     7ec:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     7ee:	6159      	str	r1, [r3, #20]

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     7f0:	7801      	ldrb	r1, [r0, #0]
     7f2:	4391      	bics	r1, r2
     7f4:	4321      	orrs	r1, r4
     7f6:	7001      	strb	r1, [r0, #0]
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     7f8:	7c41      	ldrb	r1, [r0, #17]
     7fa:	3011      	adds	r0, #17
     7fc:	4321      	orrs	r1, r4
     7fe:	7001      	strb	r1, [r0, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     800:	7d81      	ldrb	r1, [r0, #22]
     802:	43a1      	bics	r1, r4
     804:	7581      	strb	r1, [r0, #22]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     806:	2180      	movs	r1, #128	; 0x80
     808:	0449      	lsls	r1, r1, #17
     80a:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     80c:	6159      	str	r1, [r3, #20]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     80e:	7829      	ldrb	r1, [r5, #0]
     810:	43a1      	bics	r1, r4
     812:	7029      	strb	r1, [r5, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     814:	2180      	movs	r1, #128	; 0x80
     816:	0049      	lsls	r1, r1, #1
     818:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     81a:	7831      	ldrb	r1, [r6, #0]
     81c:	43a1      	bics	r1, r4
     81e:	7031      	strb	r1, [r6, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     820:	2180      	movs	r1, #128	; 0x80
     822:	0089      	lsls	r1, r1, #2
     824:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     826:	0019      	movs	r1, r3
     828:	314b      	adds	r1, #75	; 0x4b
     82a:	7808      	ldrb	r0, [r1, #0]
     82c:	43a0      	bics	r0, r4
     82e:	7008      	strb	r0, [r1, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     830:	7808      	ldrb	r0, [r1, #0]
     832:	4338      	orrs	r0, r7
     834:	7008      	strb	r0, [r1, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     836:	2080      	movs	r0, #128	; 0x80
     838:	0100      	lsls	r0, r0, #4
     83a:	6058      	str	r0, [r3, #4]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     83c:	4877      	ldr	r0, [pc, #476]	; (a1c <init+0x324>)
     83e:	371e      	adds	r7, #30
     840:	7800      	ldrb	r0, [r0, #0]
     842:	4010      	ands	r0, r2
     844:	4338      	orrs	r0, r7
     846:	4f75      	ldr	r7, [pc, #468]	; (a1c <init+0x324>)
     848:	7038      	strb	r0, [r7, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     84a:	7808      	ldrb	r0, [r1, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     84c:	2720      	movs	r7, #32
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     84e:	4320      	orrs	r0, r4
     850:	7008      	strb	r0, [r1, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     852:	0018      	movs	r0, r3
     854:	3034      	adds	r0, #52	; 0x34
     856:	7801      	ldrb	r1, [r0, #0]
     858:	4011      	ands	r1, r2
     85a:	4339      	orrs	r1, r7
     85c:	7001      	strb	r1, [r0, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     85e:	7831      	ldrb	r1, [r6, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     860:	4667      	mov	r7, ip
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     862:	4321      	orrs	r1, r4
     864:	7031      	strb	r1, [r6, #0]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     866:	4666      	mov	r6, ip
     868:	7801      	ldrb	r1, [r0, #0]
     86a:	4391      	bics	r1, r2
     86c:	4331      	orrs	r1, r6
     86e:	7001      	strb	r1, [r0, #0]
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     870:	7829      	ldrb	r1, [r5, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     872:	3096      	adds	r0, #150	; 0x96
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     874:	4321      	orrs	r1, r4
     876:	7029      	strb	r1, [r5, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     878:	7801      	ldrb	r1, [r0, #0]
     87a:	001e      	movs	r6, r3
     87c:	43a1      	bics	r1, r4
     87e:	7001      	strb	r1, [r0, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     880:	2180      	movs	r1, #128	; 0x80
     882:	9803      	ldr	r0, [sp, #12]
     884:	00c9      	lsls	r1, r1, #3
     886:	6001      	str	r1, [r0, #0]
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     888:	0018      	movs	r0, r3
     88a:	3098      	adds	r0, #152	; 0x98
     88c:	6001      	str	r1, [r0, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     88e:	78a8      	ldrb	r0, [r5, #2]
     890:	3651      	adds	r6, #81	; 0x51
     892:	43a0      	bics	r0, r4
     894:	70a8      	strb	r0, [r5, #2]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     896:	6099      	str	r1, [r3, #8]
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     898:	6199      	str	r1, [r3, #24]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     89a:	7a29      	ldrb	r1, [r5, #8]
     89c:	43a1      	bics	r1, r4
     89e:	7229      	strb	r1, [r5, #8]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     8a0:	2180      	movs	r1, #128	; 0x80
     8a2:	0249      	lsls	r1, r1, #9
     8a4:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     8a6:	7831      	ldrb	r1, [r6, #0]
     8a8:	43a1      	bics	r1, r4
     8aa:	7031      	strb	r1, [r6, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     8ac:	2180      	movs	r1, #128	; 0x80
     8ae:	0289      	lsls	r1, r1, #10
     8b0:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     8b2:	0019      	movs	r1, r3
     8b4:	3153      	adds	r1, #83	; 0x53
     8b6:	7808      	ldrb	r0, [r1, #0]
     8b8:	43a0      	bics	r0, r4
     8ba:	7008      	strb	r0, [r1, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     8bc:	7808      	ldrb	r0, [r1, #0]
     8be:	4338      	orrs	r0, r7
     8c0:	7008      	strb	r0, [r1, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     8c2:	001f      	movs	r7, r3


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     8c4:	2080      	movs	r0, #128	; 0x80
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     8c6:	3739      	adds	r7, #57	; 0x39


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     8c8:	0300      	lsls	r0, r0, #12
     8ca:	6058      	str	r0, [r3, #4]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     8cc:	9703      	str	r7, [sp, #12]
     8ce:	7838      	ldrb	r0, [r7, #0]
     8d0:	2720      	movs	r7, #32
     8d2:	4010      	ands	r0, r2
     8d4:	4338      	orrs	r0, r7
     8d6:	9f03      	ldr	r7, [sp, #12]
     8d8:	7038      	strb	r0, [r7, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     8da:	7808      	ldrb	r0, [r1, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     8dc:	2720      	movs	r7, #32
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     8de:	4320      	orrs	r0, r4
     8e0:	7008      	strb	r0, [r1, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     8e2:	0018      	movs	r0, r3
     8e4:	3038      	adds	r0, #56	; 0x38
     8e6:	7801      	ldrb	r1, [r0, #0]
     8e8:	4011      	ands	r1, r2
     8ea:	4339      	orrs	r1, r7
     8ec:	7001      	strb	r1, [r0, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     8ee:	7831      	ldrb	r1, [r6, #0]
     8f0:	4321      	orrs	r1, r4
     8f2:	7031      	strb	r1, [r6, #0]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     8f4:	4666      	mov	r6, ip
     8f6:	7801      	ldrb	r1, [r0, #0]
     8f8:	4391      	bics	r1, r2
     8fa:	4331      	orrs	r1, r6
     8fc:	7001      	strb	r1, [r0, #0]
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     8fe:	7a29      	ldrb	r1, [r5, #8]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     900:	3014      	adds	r0, #20
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     902:	4321      	orrs	r1, r4
     904:	7229      	strb	r1, [r5, #8]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     906:	7981      	ldrb	r1, [r0, #6]
     908:	43a1      	bics	r1, r4
     90a:	7181      	strb	r1, [r0, #6]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     90c:	2180      	movs	r1, #128	; 0x80
     90e:	02c9      	lsls	r1, r1, #11
     910:	6099      	str	r1, [r3, #8]
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     912:	6199      	str	r1, [r3, #24]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     914:	7801      	ldrb	r1, [r0, #0]
     916:	43a1      	bics	r1, r4
     918:	7001      	strb	r1, [r0, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     91a:	2180      	movs	r1, #128	; 0x80
     91c:	0149      	lsls	r1, r1, #5
     91e:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     920:	7881      	ldrb	r1, [r0, #2]
     922:	43a1      	bics	r1, r4
     924:	7081      	strb	r1, [r0, #2]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     926:	2180      	movs	r1, #128	; 0x80
     928:	01c9      	lsls	r1, r1, #7
     92a:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     92c:	0019      	movs	r1, r3
     92e:	314d      	adds	r1, #77	; 0x4d
     930:	7808      	ldrb	r0, [r1, #0]
     932:	43a0      	bics	r0, r4
     934:	7008      	strb	r0, [r1, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     936:	7808      	ldrb	r0, [r1, #0]
     938:	4330      	orrs	r0, r6
     93a:	7008      	strb	r0, [r1, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     93c:	2180      	movs	r1, #128	; 0x80
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     93e:	0018      	movs	r0, r3


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     940:	0189      	lsls	r1, r1, #6
     942:	6059      	str	r1, [r3, #4]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     944:	304f      	adds	r0, #79	; 0x4f
     946:	7801      	ldrb	r1, [r0, #0]
     948:	43a1      	bics	r1, r4
     94a:	7001      	strb	r1, [r0, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     94c:	2180      	movs	r1, #128	; 0x80
     94e:	0209      	lsls	r1, r1, #8
     950:	6099      	str	r1, [r3, #8]
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     952:	6199      	str	r1, [r3, #24]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     954:	0019      	movs	r1, r3
     956:	3155      	adds	r1, #85	; 0x55
     958:	7808      	ldrb	r0, [r1, #0]
     95a:	43a0      	bics	r0, r4
     95c:	7008      	strb	r0, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     95e:	2080      	movs	r0, #128	; 0x80
     960:	0380      	lsls	r0, r0, #14
     962:	6098      	str	r0, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
}


inline static void pinCfg(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].reg = p.cfg;
     964:	2040      	movs	r0, #64	; 0x40
     966:	7008      	strb	r0, [r1, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     968:	7848      	ldrb	r0, [r1, #1]
     96a:	43a0      	bics	r0, r4
     96c:	7048      	strb	r0, [r1, #1]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     96e:	2080      	movs	r0, #128	; 0x80
     970:	03c0      	lsls	r0, r0, #15
     972:	6098      	str	r0, [r3, #8]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     974:	0018      	movs	r0, r3
     976:	303b      	adds	r0, #59	; 0x3b
     978:	7805      	ldrb	r5, [r0, #0]
     97a:	4395      	bics	r5, r2
     97c:	4335      	orrs	r5, r6
     97e:	7005      	strb	r5, [r0, #0]
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     980:	784d      	ldrb	r5, [r1, #1]
     982:	4325      	orrs	r5, r4
     984:	704d      	strb	r5, [r1, #1]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     986:	788d      	ldrb	r5, [r1, #2]
     988:	43a5      	bics	r5, r4
     98a:	708d      	strb	r5, [r1, #2]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     98c:	788d      	ldrb	r5, [r1, #2]
     98e:	4335      	orrs	r5, r6
     990:	708d      	strb	r5, [r1, #2]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     992:	2580      	movs	r5, #128	; 0x80
     994:	042d      	lsls	r5, r5, #16
     996:	605d      	str	r5, [r3, #4]

//    sercomClockEnable(SPI2, 3, 4);
//   sercomSpiMasterInit(SPI2, 3, 0, 0, 0, 0x00);

    sercomClockEnable(SPI0, 3, 4);
    sercomSpiMasterInit(SPI0, 3, 0, 0, 0, 0x00);
     998:	2500      	movs	r5, #0
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     99a:	7803      	ldrb	r3, [r0, #0]
    pinMux(RxPo);

//    sercomClockEnable(SPI2, 3, 4);
//   sercomSpiMasterInit(SPI2, 3, 0, 0, 0, 0x00);

    sercomClockEnable(SPI0, 3, 4);
     99c:	4e20      	ldr	r6, [pc, #128]	; (a20 <init+0x328>)
     99e:	401a      	ands	r2, r3
     9a0:	433a      	orrs	r2, r7
     9a2:	7002      	strb	r2, [r0, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     9a4:	788b      	ldrb	r3, [r1, #2]
     9a6:	2204      	movs	r2, #4
     9a8:	4323      	orrs	r3, r4
     9aa:	708b      	strb	r3, [r1, #2]
     9ac:	2000      	movs	r0, #0
     9ae:	2103      	movs	r1, #3
     9b0:	47b0      	blx	r6
    sercomSpiMasterInit(SPI0, 3, 0, 0, 0, 0x00);
     9b2:	002b      	movs	r3, r5
     9b4:	002a      	movs	r2, r5
     9b6:	0028      	movs	r0, r5
     9b8:	4f1a      	ldr	r7, [pc, #104]	; (a24 <init+0x32c>)
     9ba:	9501      	str	r5, [sp, #4]
     9bc:	9500      	str	r5, [sp, #0]
     9be:	2103      	movs	r1, #3
     9c0:	47b8      	blx	r7

    sercomClockEnable(SPI1, 3, 4);
     9c2:	0020      	movs	r0, r4
     9c4:	2204      	movs	r2, #4
     9c6:	2103      	movs	r1, #3
     9c8:	47b0      	blx	r6
    sercomSpiMasterInit(SPI1, 3, 0, 0, 0, 0x00);
     9ca:	002b      	movs	r3, r5
     9cc:	002a      	movs	r2, r5
     9ce:	0020      	movs	r0, r4
     9d0:	9501      	str	r5, [sp, #4]
     9d2:	9500      	str	r5, [sp, #0]
     9d4:	2103      	movs	r1, #3
     9d6:	47b8      	blx	r7

    sercomClockEnable(USART3, 4, 8);
     9d8:	2208      	movs	r2, #8
     9da:	2104      	movs	r1, #4
     9dc:	2003      	movs	r0, #3
     9de:	47b0      	blx	r6
    sercomUartInit(USART3,1,0,63858);
     9e0:	0021      	movs	r1, r4
     9e2:	002a      	movs	r2, r5
     9e4:	2003      	movs	r0, #3
     9e6:	4b10      	ldr	r3, [pc, #64]	; (a28 <init+0x330>)
     9e8:	4c10      	ldr	r4, [pc, #64]	; (a2c <init+0x334>)
     9ea:	47a0      	blx	r4

    TC4Init();
     9ec:	4b10      	ldr	r3, [pc, #64]	; (a30 <init+0x338>)
     9ee:	4798      	blx	r3
    TC5Init();
     9f0:	4b10      	ldr	r3, [pc, #64]	; (a34 <init+0x33c>)
     9f2:	4798      	blx	r3
}
     9f4:	b005      	add	sp, #20
     9f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
     9f8:	000001d5 	.word	0x000001d5
     9fc:	00000d3d 	.word	0x00000d3d
     a00:	00000dd5 	.word	0x00000dd5
     a04:	00000ed5 	.word	0x00000ed5
     a08:	00000b99 	.word	0x00000b99
     a0c:	00001075 	.word	0x00001075
     a10:	e000e100 	.word	0xe000e100
     a14:	ff00ffff 	.word	0xff00ffff
     a18:	41004400 	.word	0x41004400
     a1c:	41004435 	.word	0x41004435
     a20:	000015a9 	.word	0x000015a9
     a24:	0000160d 	.word	0x0000160d
     a28:	0000f972 	.word	0x0000f972
     a2c:	00001671 	.word	0x00001671
     a30:	00000fa5 	.word	0x00000fa5
     a34:	0000100d 	.word	0x0000100d

00000a38 <startUp>:

void startUp(Altimeter *my_altimeter) {
     a38:	b5f0      	push	{r4, r5, r6, r7, lr}

    u32_t startupTime = millis();
     a3a:	4f1e      	ldr	r7, [pc, #120]	; (ab4 <startUp+0x7c>)

    TC4Init();
    TC5Init();
}

void startUp(Altimeter *my_altimeter) {
     a3c:	b089      	sub	sp, #36	; 0x24
     a3e:	0004      	movs	r4, r0

    u32_t startupTime = millis();
     a40:	47b8      	blx	r7

    sampleTick(my_altimeter);
     a42:	4e1d      	ldr	r6, [pc, #116]	; (ab8 <startUp+0x80>)
    TC5Init();
}

void startUp(Altimeter *my_altimeter) {

    u32_t startupTime = millis();
     a44:	9000      	str	r0, [sp, #0]

    sampleTick(my_altimeter);
     a46:	0020      	movs	r0, r4
     a48:	47b0      	blx	r6
    //flight(my_altimeter);

    delay_ms(1000);
     a4a:	20fa      	movs	r0, #250	; 0xfa
     a4c:	4d1b      	ldr	r5, [pc, #108]	; (abc <startUp+0x84>)
     a4e:	0080      	lsls	r0, r0, #2
     a50:	47a8      	blx	r5
     a52:	9601      	str	r6, [sp, #4]
    while((millis() - startupTime) < 5000) {
     a54:	47b8      	blx	r7
     a56:	9b00      	ldr	r3, [sp, #0]
     a58:	1ac0      	subs	r0, r0, r3
     a5a:	4b19      	ldr	r3, [pc, #100]	; (ac0 <startUp+0x88>)
     a5c:	4298      	cmp	r0, r3
     a5e:	d820      	bhi.n	aa2 <startUp+0x6a>


        usartDataOut(USART3,'T');
     a60:	2154      	movs	r1, #84	; 0x54
     a62:	2003      	movs	r0, #3
     a64:	4e17      	ldr	r6, [pc, #92]	; (ac4 <startUp+0x8c>)
     a66:	47b0      	blx	r6
        delay_ms(40);
     a68:	2028      	movs	r0, #40	; 0x28
     a6a:	47a8      	blx	r5
        if (sercom(USART3)->SPI.INTFLAG.bit.RXC == 1) {
     a6c:	4b16      	ldr	r3, [pc, #88]	; (ac8 <startUp+0x90>)
     a6e:	7e1b      	ldrb	r3, [r3, #24]
     a70:	075b      	lsls	r3, r3, #29
     a72:	d5ef      	bpl.n	a54 <startUp+0x1c>
            u8_t data1 = usartDataIn(USART3);
     a74:	2003      	movs	r0, #3
     a76:	4b15      	ldr	r3, [pc, #84]	; (acc <startUp+0x94>)
     a78:	4798      	blx	r3
            if (data1 == 0x41) {
     a7a:	2841      	cmp	r0, #65	; 0x41
     a7c:	d1ea      	bne.n	a54 <startUp+0x1c>

                u8_t bytesToSend = 23;
                u8_t data[23] = {0};
     a7e:	2217      	movs	r2, #23
     a80:	2100      	movs	r1, #0
     a82:	4b13      	ldr	r3, [pc, #76]	; (ad0 <startUp+0x98>)
     a84:	a802      	add	r0, sp, #8
     a86:	4798      	blx	r3

                AT25SEreadSample(my_altimeter->currentAddress, bytesToSend, data);
     a88:	7920      	ldrb	r0, [r4, #4]
     a8a:	aa02      	add	r2, sp, #8
     a8c:	2117      	movs	r1, #23
     a8e:	4b11      	ldr	r3, [pc, #68]	; (ad4 <startUp+0x9c>)
     a90:	4798      	blx	r3
     a92:	2500      	movs	r5, #0

                for (u8_t dataByte = 0; dataByte < bytesToSend; ++dataByte) {
                    usartDataOut(USART3, data[dataByte]);
     a94:	ab02      	add	r3, sp, #8
     a96:	5d59      	ldrb	r1, [r3, r5]
     a98:	2003      	movs	r0, #3
     a9a:	3501      	adds	r5, #1
     a9c:	47b0      	blx	r6
                u8_t bytesToSend = 23;
                u8_t data[23] = {0};

                AT25SEreadSample(my_altimeter->currentAddress, bytesToSend, data);

                for (u8_t dataByte = 0; dataByte < bytesToSend; ++dataByte) {
     a9e:	2d17      	cmp	r5, #23
     aa0:	d1f8      	bne.n	a94 <startUp+0x5c>
                break;
            }
        }
    }

    sampleTick(my_altimeter);
     aa2:	0020      	movs	r0, r4
     aa4:	9b01      	ldr	r3, [sp, #4]
     aa6:	4798      	blx	r3
    flight(my_altimeter);
     aa8:	0020      	movs	r0, r4
     aaa:	4b0b      	ldr	r3, [pc, #44]	; (ad8 <startUp+0xa0>)
     aac:	4798      	blx	r3
}
     aae:	b009      	add	sp, #36	; 0x24
     ab0:	bdf0      	pop	{r4, r5, r6, r7, pc}
     ab2:	46c0      	nop			; (mov r8, r8)
     ab4:	00000f71 	.word	0x00000f71
     ab8:	00001209 	.word	0x00001209
     abc:	00000f25 	.word	0x00000f25
     ac0:	00001387 	.word	0x00001387
     ac4:	000016cd 	.word	0x000016cd
     ac8:	42001400 	.word	0x42001400
     acc:	000016e5 	.word	0x000016e5
     ad0:	000025d1 	.word	0x000025d1
     ad4:	00000345 	.word	0x00000345
     ad8:	000010d5 	.word	0x000010d5

00000adc <main>:



int main(void) {
     adc:	b5f0      	push	{r4, r5, r6, r7, lr}

    init();

    Altimeter my_altimeter;
    my_altimeter.myFlightState = flightStatrup;
     ade:	2500      	movs	r5, #0
    flight(my_altimeter);
}



int main(void) {
     ae0:	b0a7      	sub	sp, #156	; 0x9c

    init();
     ae2:	4b16      	ldr	r3, [pc, #88]	; (b3c <main+0x60>)

    Altimeter my_altimeter;
    my_altimeter.myFlightState = flightStatrup;
     ae4:	ac01      	add	r4, sp, #4



int main(void) {

    init();
     ae6:	4798      	blx	r3

    Altimeter my_altimeter;
    my_altimeter.myFlightState = flightStatrup;
    initMS5803Barometer(&my_altimeter.myBarometer);
     ae8:	4b15      	ldr	r3, [pc, #84]	; (b40 <main+0x64>)
     aea:	a803      	add	r0, sp, #12
int main(void) {

    init();

    Altimeter my_altimeter;
    my_altimeter.myFlightState = flightStatrup;
     aec:	7025      	strb	r5, [r4, #0]
    initMS5803Barometer(&my_altimeter.myBarometer);
     aee:	4798      	blx	r3
    IMUinit();
     af0:	4b14      	ldr	r3, [pc, #80]	; (b44 <main+0x68>)
     af2:	4798      	blx	r3

    sampleTick(&my_altimeter);
     af4:	0020      	movs	r0, r4
     af6:	4e14      	ldr	r6, [pc, #80]	; (b48 <main+0x6c>)
     af8:	47b0      	blx	r6
    // startUp(&my_altimeter);


    u32_t time = 0;
    u32_t lastTime = 0;
    my_altimeter.currentAddress = 0x00000100;
     afa:	2380      	movs	r3, #128	; 0x80
     afc:	005b      	lsls	r3, r3, #1
     afe:	6063      	str	r3, [r4, #4]

    AT25SFErace4KBlock(my_altimeter.currentAddress);
     b00:	0028      	movs	r0, r5
     b02:	4b12      	ldr	r3, [pc, #72]	; (b4c <main+0x70>)
     b04:	4798      	blx	r3
    logSensors(&my_altimeter);
     b06:	0020      	movs	r0, r4
     b08:	4b11      	ldr	r3, [pc, #68]	; (b50 <main+0x74>)
     b0a:	4798      	blx	r3
    delay_ms(5);
     b0c:	2005      	movs	r0, #5
     b0e:	4b11      	ldr	r3, [pc, #68]	; (b54 <main+0x78>)
     b10:	4798      	blx	r3


    startUp(&my_altimeter);
     b12:	0020      	movs	r0, r4
     b14:	4b10      	ldr	r3, [pc, #64]	; (b58 <main+0x7c>)
     b16:	4798      	blx	r3

    while (1) {
        time = millis();
     b18:	4b10      	ldr	r3, [pc, #64]	; (b5c <main+0x80>)
     b1a:	4798      	blx	r3



        if (takeSample) {
     b1c:	4f10      	ldr	r7, [pc, #64]	; (b60 <main+0x84>)
     b1e:	783b      	ldrb	r3, [r7, #0]
     b20:	2b00      	cmp	r3, #0
     b22:	d005      	beq.n	b30 <main+0x54>
            sampleTick(&my_altimeter);
     b24:	0020      	movs	r0, r4
     b26:	47b0      	blx	r6
            flight(&my_altimeter);
     b28:	0020      	movs	r0, r4
     b2a:	4b0e      	ldr	r3, [pc, #56]	; (b64 <main+0x88>)
     b2c:	4798      	blx	r3
            takeSample = false;
     b2e:	703d      	strb	r5, [r7, #0]

        }


        if (writeLog) {
     b30:	4b0d      	ldr	r3, [pc, #52]	; (b68 <main+0x8c>)
     b32:	781a      	ldrb	r2, [r3, #0]
     b34:	2a00      	cmp	r2, #0
     b36:	d0ef      	beq.n	b18 <main+0x3c>
            writeLog = false;
     b38:	701d      	strb	r5, [r3, #0]
     b3a:	e7ed      	b.n	b18 <main+0x3c>
     b3c:	000006f9 	.word	0x000006f9
     b40:	00000669 	.word	0x00000669
     b44:	00000b6d 	.word	0x00000b6d
     b48:	00001209 	.word	0x00001209
     b4c:	000001e5 	.word	0x000001e5
     b50:	00001171 	.word	0x00001171
     b54:	00000f25 	.word	0x00000f25
     b58:	00000a39 	.word	0x00000a39
     b5c:	00000f71 	.word	0x00000f71
     b60:	20000463 	.word	0x20000463
     b64:	000010d5 	.word	0x000010d5
     b68:	20000461 	.word	0x20000461

00000b6c <IMUinit>:
#include <util.h>
#include <boardDefines.h>


void IMUinit() {
     b6c:	b570      	push	{r4, r5, r6, lr}
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     b6e:	4c08      	ldr	r4, [pc, #32]	; (b90 <IMUinit+0x24>)
     b70:	2580      	movs	r5, #128	; 0x80
     b72:	0023      	movs	r3, r4
     b74:	00ed      	lsls	r5, r5, #3
     b76:	3394      	adds	r3, #148	; 0x94
     b78:	601d      	str	r5, [r3, #0]

    uint8_t dummy_Tx = 0xFF;
    uint8_t dummy_rx;

    pinLow(cs_accel);
    dummy_rx = spiDataTransfer(SPI0, BMI_ACCEL_PMU_RANGE);
     b7a:	4e06      	ldr	r6, [pc, #24]	; (b94 <IMUinit+0x28>)
     b7c:	210f      	movs	r1, #15
     b7e:	2000      	movs	r0, #0
     b80:	47b0      	blx	r6
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     b82:	3498      	adds	r4, #152	; 0x98
    dummy_rx = spiDataTransfer(SPI0, BMI_ACCEL_16G_RANGE);
     b84:	210c      	movs	r1, #12
     b86:	2000      	movs	r0, #0
     b88:	47b0      	blx	r6
     b8a:	6025      	str	r5, [r4, #0]
    pinHigh(cs_accel);

}
     b8c:	bd70      	pop	{r4, r5, r6, pc}
     b8e:	46c0      	nop			; (mov r8, r8)
     b90:	41004400 	.word	0x41004400
     b94:	000016b5 	.word	0x000016b5

00000b98 <adcInit>:
#include <util.h>

void adcInit() {

    // set up clock
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;
     b98:	2180      	movs	r1, #128	; 0x80


#include <util.h>

void adcInit() {
     b9a:	b510      	push	{r4, lr}

    // set up clock
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;
     b9c:	4a10      	ldr	r2, [pc, #64]	; (be0 <adcInit+0x48>)
     b9e:	0249      	lsls	r1, r1, #9
     ba0:	6a13      	ldr	r3, [r2, #32]
    // divide prescaler by 512 (93.75KHz), max adc freq is 2.1MHz
    ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |
                     ADC_CTRLB_RESSEL_12BIT;

    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
     ba2:	4810      	ldr	r0, [pc, #64]	; (be4 <adcInit+0x4c>)
#include <util.h>

void adcInit() {

    // set up clock
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;
     ba4:	430b      	orrs	r3, r1
     ba6:	6213      	str	r3, [r2, #32]

    // divide prescaler by 512 (93.75KHz), max adc freq is 2.1MHz
    ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |
     ba8:	23e0      	movs	r3, #224	; 0xe0
     baa:	490f      	ldr	r1, [pc, #60]	; (be8 <adcInit+0x50>)
                     ADC_CTRLB_RESSEL_12BIT;

    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
     bac:	4a0f      	ldr	r2, [pc, #60]	; (bec <adcInit+0x54>)

    // set up clock
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;

    // divide prescaler by 512 (93.75KHz), max adc freq is 2.1MHz
    ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |
     bae:	00db      	lsls	r3, r3, #3
     bb0:	808b      	strh	r3, [r1, #4]
                     ADC_CTRLB_RESSEL_12BIT;

    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
     bb2:	8050      	strh	r0, [r2, #2]
                        GCLK_CLKCTRL_GEN(0) |
                        GCLK_CLKCTRL_ID(ADC_GCLK_ID);

    ADC->CALIB.reg =
        ADC_CALIB_BIAS_CAL(
     bb4:	4a0e      	ldr	r2, [pc, #56]	; (bf0 <adcInit+0x58>)
    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(0) |
                        GCLK_CLKCTRL_ID(ADC_GCLK_ID);

    ADC->CALIB.reg =
     bb6:	6812      	ldr	r2, [r2, #0]
     bb8:	0150      	lsls	r0, r2, #5
     bba:	4018      	ands	r0, r3
     bbc:	4b0d      	ldr	r3, [pc, #52]	; (bf4 <adcInit+0x5c>)
     bbe:	0154      	lsls	r4, r2, #5
     bc0:	681a      	ldr	r2, [r3, #0]
     bc2:	0ed3      	lsrs	r3, r2, #27
     bc4:	4323      	orrs	r3, r4
     bc6:	b2da      	uxtb	r2, r3
     bc8:	0003      	movs	r3, r0
     bca:	4313      	orrs	r3, r2
     bcc:	850b      	strh	r3, [r1, #40]	; 0x28
        ) |
        ADC_CALIB_LINEARITY_CAL(
            (*(uint64_t *)ADC_FUSES_LINEARITY_0_ADDR >> ADC_FUSES_LINEARITY_0_Pos)
        );

    ADC->REFCTRL.reg = ADC_REFCTRL_REFSEL_INTVCC1;
     bce:	2302      	movs	r3, #2
     bd0:	704b      	strb	r3, [r1, #1]

    ADC->CTRLA.reg = ADC_CTRLA_ENABLE; // enable
     bd2:	700b      	strb	r3, [r1, #0]
    while(ADC->STATUS.reg & ADC_STATUS_SYNCBUSY);
     bd4:	7e4b      	ldrb	r3, [r1, #25]
     bd6:	b25b      	sxtb	r3, r3
     bd8:	2b00      	cmp	r3, #0
     bda:	dbfb      	blt.n	bd4 <adcInit+0x3c>
}
     bdc:	bd10      	pop	{r4, pc}
     bde:	46c0      	nop			; (mov r8, r8)
     be0:	40000400 	.word	0x40000400
     be4:	0000401e 	.word	0x0000401e
     be8:	42004000 	.word	0x42004000
     bec:	40000c00 	.word	0x40000c00
     bf0:	00806024 	.word	0x00806024
     bf4:	00806020 	.word	0x00806020

00000bf8 <adcSample>:



u16_t adcSample() {
    ADC->SWTRIG.reg = ADC_SWTRIG_START;
     bf8:	2202      	movs	r2, #2
     bfa:	4b05      	ldr	r3, [pc, #20]	; (c10 <adcSample+0x18>)
     bfc:	731a      	strb	r2, [r3, #12]
    while(!(ADC->INTFLAG.reg & ADC_INTFLAG_RESRDY)); // wait until result is ready
     bfe:	3a01      	subs	r2, #1
     c00:	7e19      	ldrb	r1, [r3, #24]
     c02:	4211      	tst	r1, r2
     c04:	d0fc      	beq.n	c00 <adcSample+0x8>
    return ADC->RESULT.reg;
     c06:	4b02      	ldr	r3, [pc, #8]	; (c10 <adcSample+0x18>)
     c08:	8b58      	ldrh	r0, [r3, #26]
     c0a:	b280      	uxth	r0, r0
}
     c0c:	4770      	bx	lr
     c0e:	46c0      	nop			; (mov r8, r8)
     c10:	42004000 	.word	0x42004000

00000c14 <adc_read>:


u16_t adc_read(Pin p) {
     c14:	b537      	push	{r0, r1, r2, r4, r5, lr}
    u16_t buad;

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
     c16:	2501      	movs	r5, #1
     c18:	0c02      	lsrs	r2, r0, #16
     c1a:	b2d4      	uxtb	r4, r2
     c1c:	9000      	str	r0, [sp, #0]
     c1e:	0e00      	lsrs	r0, r0, #24
     c20:	9101      	str	r1, [sp, #4]
     c22:	0842      	lsrs	r2, r0, #1
     c24:	01e3      	lsls	r3, r4, #7
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     c26:	4911      	ldr	r1, [pc, #68]	; (c6c <adc_read+0x58>)
     c28:	18d2      	adds	r2, r2, r3
     c2a:	1852      	adds	r2, r2, r1
    u16_t buad;

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
     c2c:	4228      	tst	r0, r5
     c2e:	d005      	beq.n	c3c <adc_read+0x28>
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     c30:	210f      	movs	r1, #15
     c32:	7814      	ldrb	r4, [r2, #0]
     c34:	4021      	ands	r1, r4
     c36:	2410      	movs	r4, #16
     c38:	4321      	orrs	r1, r4
     c3a:	e003      	b.n	c44 <adc_read+0x30>
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     c3c:	240f      	movs	r4, #15
     c3e:	7811      	ldrb	r1, [r2, #0]
     c40:	43a1      	bics	r1, r4
     c42:	4329      	orrs	r1, r5
     c44:	7011      	strb	r1, [r2, #0]
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     c46:	2101      	movs	r1, #1
     c48:	4a09      	ldr	r2, [pc, #36]	; (c70 <adc_read+0x5c>)
     c4a:	18c3      	adds	r3, r0, r3
     c4c:	189b      	adds	r3, r3, r2
     c4e:	781a      	ldrb	r2, [r3, #0]
     c50:	430a      	orrs	r2, r1
     c52:	701a      	strb	r2, [r3, #0]
    // switch pin mux to analog in
    pinAnalog(p);

    ADC->INPUTCTRL.reg = (ADC_INPUTCTRL_MUXPOS(p.chan) // select from proper pin
                          | ADC_INPUTCTRL_MUXNEG_GND // 0 = gnd
                          | ADC_INPUTCTRL_GAIN_1X);
     c54:	466b      	mov	r3, sp
     c56:	791a      	ldrb	r2, [r3, #4]
     c58:	231f      	movs	r3, #31
     c5a:	4013      	ands	r3, r2
     c5c:	22c0      	movs	r2, #192	; 0xc0
     c5e:	0152      	lsls	r2, r2, #5
     c60:	4313      	orrs	r3, r2

u16_t adc_read(Pin p) {
    // switch pin mux to analog in
    pinAnalog(p);

    ADC->INPUTCTRL.reg = (ADC_INPUTCTRL_MUXPOS(p.chan) // select from proper pin
     c62:	4a04      	ldr	r2, [pc, #16]	; (c74 <adc_read+0x60>)
     c64:	6113      	str	r3, [r2, #16]
                          | ADC_INPUTCTRL_MUXNEG_GND // 0 = gnd
                          | ADC_INPUTCTRL_GAIN_1X);

    return adcSample();
     c66:	4b04      	ldr	r3, [pc, #16]	; (c78 <adc_read+0x64>)
     c68:	4798      	blx	r3
     c6a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
     c6c:	41004430 	.word	0x41004430
     c70:	41004440 	.word	0x41004440
     c74:	42004000 	.word	0x42004000
     c78:	00000bf9 	.word	0x00000bf9

00000c7c <byteOut>:





void byteOut(Pin SCK_PIN, Pin MOSI_PIN, uint8_t byte) {
     c7c:	0c01      	lsrs	r1, r0, #16
     c7e:	0c13      	lsrs	r3, r2, #16
     c80:	b5f0      	push	{r4, r5, r6, r7, lr}
     c82:	b2cd      	uxtb	r5, r1
     c84:	b2d9      	uxtb	r1, r3
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     c86:	2301      	movs	r3, #1
     c88:	001e      	movs	r6, r3
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     c8a:	0e12      	lsrs	r2, r2, #24
     c8c:	4093      	lsls	r3, r2
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     c8e:	0e00      	lsrs	r0, r0, #24
     c90:	4086      	lsls	r6, r0
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     c92:	001a      	movs	r2, r3
     c94:	2308      	movs	r3, #8
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     c96:	0030      	movs	r0, r6
     c98:	4e11      	ldr	r6, [pc, #68]	; (ce0 <byteOut+0x64>)
     c9a:	01c9      	lsls	r1, r1, #7
     c9c:	b087      	sub	sp, #28
     c9e:	198f      	adds	r7, r1, r6
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     ca0:	4e10      	ldr	r6, [pc, #64]	; (ce4 <byteOut+0x68>)
     ca2:	ac0c      	add	r4, sp, #48	; 0x30
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     ca4:	01ed      	lsls	r5, r5, #7
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     ca6:	19ae      	adds	r6, r5, r6
     ca8:	7824      	ldrb	r4, [r4, #0]
     caa:	9601      	str	r6, [sp, #4]
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     cac:	4e0c      	ldr	r6, [pc, #48]	; (ce0 <byteOut+0x64>)
     cae:	46b4      	mov	ip, r6
     cb0:	44ac      	add	ip, r5
     cb2:	4666      	mov	r6, ip
     cb4:	6030      	str	r0, [r6, #0]

	for (uint8_t i = 0; i<8; ++i) {
		pinLow(SCK_PIN);
		if (byte & 0x80) {
     cb6:	b266      	sxtb	r6, r4
     cb8:	2e00      	cmp	r6, #0
     cba:	da05      	bge.n	cc8 <byteOut+0x4c>
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     cbc:	4e09      	ldr	r6, [pc, #36]	; (ce4 <byteOut+0x68>)
     cbe:	46b4      	mov	ip, r6
     cc0:	448c      	add	ip, r1
     cc2:	4666      	mov	r6, ip
     cc4:	6032      	str	r2, [r6, #0]
     cc6:	e000      	b.n	cca <byteOut+0x4e>
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     cc8:	603a      	str	r2, [r7, #0]
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     cca:	9e01      	ldr	r6, [sp, #4]
     ccc:	3b01      	subs	r3, #1
			pinHigh(MOSI_PIN);
			} else {
			pinLow(MOSI_PIN);
		}
		pinHigh(SCK_PIN);
		byte <<= 1;
     cce:	0064      	lsls	r4, r4, #1
     cd0:	b2db      	uxtb	r3, r3
     cd2:	6030      	str	r0, [r6, #0]
     cd4:	b2e4      	uxtb	r4, r4



void byteOut(Pin SCK_PIN, Pin MOSI_PIN, uint8_t byte) {

	for (uint8_t i = 0; i<8; ++i) {
     cd6:	2b00      	cmp	r3, #0
     cd8:	d1e8      	bne.n	cac <byteOut+0x30>
			pinLow(MOSI_PIN);
		}
		pinHigh(SCK_PIN);
		byte <<= 1;
	}
}
     cda:	b007      	add	sp, #28
     cdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
     cde:	46c0      	nop			; (mov r8, r8)
     ce0:	41004414 	.word	0x41004414
     ce4:	41004418 	.word	0x41004418

00000ce8 <byteIn>:

uint8_t byteIn(Pin SCK_PIN, Pin MISO_PIN) {
     ce8:	b5f0      	push	{r4, r5, r6, r7, lr}
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     cea:	2501      	movs	r5, #1
     cec:	b085      	sub	sp, #20
     cee:	9103      	str	r1, [sp, #12]
     cf0:	0011      	movs	r1, r2
     cf2:	0c06      	lsrs	r6, r0, #16
     cf4:	9301      	str	r3, [sp, #4]
     cf6:	b2f3      	uxtb	r3, r6
     cf8:	002e      	movs	r6, r5
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     cfa:	0e09      	lsrs	r1, r1, #24
     cfc:	0c14      	lsrs	r4, r2, #16
     cfe:	9002      	str	r0, [sp, #8]
     d00:	9200      	str	r2, [sp, #0]
     d02:	408d      	lsls	r5, r1
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     d04:	0e02      	lsrs	r2, r0, #24
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     d06:	2108      	movs	r1, #8
	uint8_t byte = 0x00;
     d08:	2000      	movs	r0, #0
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     d0a:	4096      	lsls	r6, r2
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     d0c:	b2e2      	uxtb	r2, r4
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     d0e:	4c0a      	ldr	r4, [pc, #40]	; (d38 <byteIn+0x50>)
     d10:	01db      	lsls	r3, r3, #7
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     d12:	01d2      	lsls	r2, r2, #7
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     d14:	191b      	adds	r3, r3, r4
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     d16:	1912      	adds	r2, r2, r4
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     d18:	615e      	str	r6, [r3, #20]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     d1a:	6a14      	ldr	r4, [r2, #32]

	for (uint8_t i = 0; i<8; ++i) {
		pinLow(SCK_PIN);
		byte = (byte << 1 ) | pinRead(MISO_PIN);
     d1c:	0040      	lsls	r0, r0, #1
     d1e:	402c      	ands	r4, r5
     d20:	1e67      	subs	r7, r4, #1
     d22:	41bc      	sbcs	r4, r7
     d24:	3901      	subs	r1, #1
     d26:	4304      	orrs	r4, r0
     d28:	b2c9      	uxtb	r1, r1
     d2a:	b2e0      	uxtb	r0, r4
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     d2c:	619e      	str	r6, [r3, #24]
}

uint8_t byteIn(Pin SCK_PIN, Pin MISO_PIN) {
	uint8_t byte = 0x00;

	for (uint8_t i = 0; i<8; ++i) {
     d2e:	2900      	cmp	r1, #0
     d30:	d1f2      	bne.n	d18 <byteIn+0x30>
		pinLow(SCK_PIN);
		byte = (byte << 1 ) | pinRead(MISO_PIN);
		pinHigh(SCK_PIN);
	}
	return byte;
     d32:	b005      	add	sp, #20
     d34:	bdf0      	pop	{r4, r5, r6, r7, pc}
     d36:	46c0      	nop			; (mov r8, r8)
     d38:	41004400 	.word	0x41004400

00000d3c <GclkInit>:
static uint32_t cycles_per_us = 48000000UL / 1000000;

void GclkInit() {


    SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     d3c:	23c2      	movs	r3, #194	; 0xc2
     d3e:	4a1a      	ldr	r2, [pc, #104]	; (da8 <GclkInit+0x6c>)
     d40:	00db      	lsls	r3, r3, #3


static uint32_t cycles_per_ms = 48000000UL / 1000;
static uint32_t cycles_per_us = 48000000UL / 1000000;

void GclkInit() {
     d42:	b510      	push	{r4, lr}


    SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     d44:	6093      	str	r3, [r2, #8]
                           SYSCTRL_INTFLAG_DFLLRDY;
    NVMCTRL->CTRLB.reg |= NVMCTRL_CTRLB_RWS_HALF;
     d46:	2302      	movs	r3, #2
     d48:	4818      	ldr	r0, [pc, #96]	; (dac <GclkInit+0x70>)
     d4a:	6841      	ldr	r1, [r0, #4]
     d4c:	4319      	orrs	r1, r3
     d4e:	6041      	str	r1, [r0, #4]


    // start and enable external 32k crystal
    SYSCTRL->XOSC32K.reg = SYSCTRL_XOSC32K_ENABLE |
     d50:	4917      	ldr	r1, [pc, #92]	; (db0 <GclkInit+0x74>)
     d52:	8291      	strh	r1, [r2, #20]
                           SYSCTRL_XOSC32K_XTALEN |
                           SYSCTRL_XOSC32K_EN32K |
                           ( 6 << SYSCTRL_XOSC32K_STARTUP_Pos);

    //wait for crystal to warm up
    while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_XOSC32KRDY)) == 0);
     d54:	68d1      	ldr	r1, [r2, #12]
     d56:	4219      	tst	r1, r3
     d58:	d0fc      	beq.n	d54 <GclkInit+0x18>

#define NVM_DFLL_COARSE_POS    58
#define NVM_DFLL_COARSE_SIZE   6
#define NVM_DFLL_FINE_POS      64
#define NVM_DFLL_FINE_SIZE     10
    uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
     d5a:	4b16      	ldr	r3, [pc, #88]	; (db4 <GclkInit+0x78>)
     d5c:	6819      	ldr	r1, [r3, #0]
     d5e:	0e89      	lsrs	r1, r1, #26
                         + (NVM_DFLL_COARSE_POS / 32))
                       >> (NVM_DFLL_COARSE_POS % 32))
                     & ((1 << NVM_DFLL_COARSE_SIZE) - 1);
    if (coarse == 0x3f) {
     d60:	293f      	cmp	r1, #63	; 0x3f
     d62:	d100      	bne.n	d66 <GclkInit+0x2a>
        coarse = 0x1f;
     d64:	3920      	subs	r1, #32
    }
    uint32_t fine =( *((uint32_t *)(NVMCTRL_OTP4)
                       + (NVM_DFLL_FINE_POS / 32))
                     >> (NVM_DFLL_FINE_POS % 32))
     d66:	4b14      	ldr	r3, [pc, #80]	; (db8 <GclkInit+0x7c>)
                   & ((1 << NVM_DFLL_FINE_SIZE) - 1);
    if (fine == 0x3ff) {
     d68:	4814      	ldr	r0, [pc, #80]	; (dbc <GclkInit+0x80>)
                       >> (NVM_DFLL_COARSE_POS % 32))
                     & ((1 << NVM_DFLL_COARSE_SIZE) - 1);
    if (coarse == 0x3f) {
        coarse = 0x1f;
    }
    uint32_t fine =( *((uint32_t *)(NVMCTRL_OTP4)
     d6a:	681b      	ldr	r3, [r3, #0]
     d6c:	059b      	lsls	r3, r3, #22
     d6e:	0d9b      	lsrs	r3, r3, #22
                       + (NVM_DFLL_FINE_POS / 32))
                     >> (NVM_DFLL_FINE_POS % 32))
                   & ((1 << NVM_DFLL_FINE_SIZE) - 1);
    if (fine == 0x3ff) {
     d70:	4283      	cmp	r3, r0
     d72:	d100      	bne.n	d76 <GclkInit+0x3a>
        fine = 0x1ff;
     d74:	4b12      	ldr	r3, [pc, #72]	; (dc0 <GclkInit+0x84>)
    }


    // Disable ONDEMAND mode while writing configurations (errata 9905)
    SYSCTRL->DFLLCTRL.reg = dfll_ctrl_usb & ~SYSCTRL_DFLLCTRL_ONDEMAND;
     d76:	4813      	ldr	r0, [pc, #76]	; (dc4 <GclkInit+0x88>)
     d78:	8490      	strh	r0, [r2, #36]	; 0x24
    while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_DFLLRDY)) == 0);
     d7a:	2010      	movs	r0, #16
     d7c:	68d4      	ldr	r4, [r2, #12]
     d7e:	4204      	tst	r4, r0
     d80:	d0fc      	beq.n	d7c <GclkInit+0x40>
    SYSCTRL->DFLLVAL.reg = SYSCTRL_DFLLVAL_COARSE(coarse) | SYSCTRL_DFLLVAL_FINE(fine);
     d82:	0289      	lsls	r1, r1, #10
     d84:	430b      	orrs	r3, r1
     d86:	4908      	ldr	r1, [pc, #32]	; (da8 <GclkInit+0x6c>)
     d88:	628b      	str	r3, [r1, #40]	; 0x28


    //Wait and see if the DFLL output is good . . .
    while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_DFLLRDY)) == 0);
     d8a:	2310      	movs	r3, #16
     d8c:	68d1      	ldr	r1, [r2, #12]
     d8e:	4219      	tst	r1, r3
     d90:	d0fc      	beq.n	d8c <GclkInit+0x50>


    SYSCTRL->DFLLCTRL.reg = dfll_ctrl_usb;
     d92:	4a0d      	ldr	r2, [pc, #52]	; (dc8 <GclkInit+0x8c>)
     d94:	4b04      	ldr	r3, [pc, #16]	; (da8 <GclkInit+0x6c>)
     d96:	849a      	strh	r2, [r3, #36]	; 0x24


    //For generic clock generator 0, select the DFLL48 Clock as input
    GCLK->GENDIV.reg  = (GCLK_GENDIV_DIV(1)  | GCLK_GENDIV_ID(0));
     d98:	2280      	movs	r2, #128	; 0x80
     d9a:	4b0c      	ldr	r3, [pc, #48]	; (dcc <GclkInit+0x90>)
     d9c:	0052      	lsls	r2, r2, #1
     d9e:	609a      	str	r2, [r3, #8]
    GCLK->GENCTRL.reg = (GCLK_GENCTRL_ID(0)  | (GCLK_GENCTRL_SRC_DFLL48M) | (GCLK_GENCTRL_GENEN));
     da0:	4a0b      	ldr	r2, [pc, #44]	; (dd0 <GclkInit+0x94>)
     da2:	605a      	str	r2, [r3, #4]
}
     da4:	bd10      	pop	{r4, pc}
     da6:	46c0      	nop			; (mov r8, r8)
     da8:	40000800 	.word	0x40000800
     dac:	41004000 	.word	0x41004000
     db0:	0000060e 	.word	0x0000060e
     db4:	00806024 	.word	0x00806024
     db8:	00806028 	.word	0x00806028
     dbc:	000003ff 	.word	0x000003ff
     dc0:	000001ff 	.word	0x000001ff
     dc4:	00000522 	.word	0x00000522
     dc8:	000005a2 	.word	0x000005a2
     dcc:	40000c00 	.word	0x40000c00
     dd0:	00010700 	.word	0x00010700

00000dd4 <RtcInit>:

void RtcInit() {

    SYSCTRL->OSC32K.reg = SYSCTRL_OSC32K_ENABLE |
     dd4:	4b27      	ldr	r3, [pc, #156]	; (e74 <RtcInit+0xa0>)
     dd6:	4a28      	ldr	r2, [pc, #160]	; (e78 <RtcInit+0xa4>)
                          SYSCTRL_OSC32K_EN32K |
                          ( 6 << SYSCTRL_OSC32K_STARTUP_Pos);


    SYSCTRL->OSC32K.bit.CALIB =
     dd8:	4828      	ldr	r0, [pc, #160]	; (e7c <RtcInit+0xa8>)
    GCLK->GENCTRL.reg = (GCLK_GENCTRL_ID(0)  | (GCLK_GENCTRL_SRC_DFLL48M) | (GCLK_GENCTRL_GENEN));
}

void RtcInit() {

    SYSCTRL->OSC32K.reg = SYSCTRL_OSC32K_ENABLE |
     dda:	619a      	str	r2, [r3, #24]
                          SYSCTRL_OSC32K_EN32K |
                          ( 6 << SYSCTRL_OSC32K_STARTUP_Pos);


    SYSCTRL->OSC32K.bit.CALIB =
        ((*(uint32_t *)FUSES_OSC32K_CAL_ADDR >>
     ddc:	4a28      	ldr	r2, [pc, #160]	; (e80 <RtcInit+0xac>)
    SYSCTRL->OSC32K.reg = SYSCTRL_OSC32K_ENABLE |
                          SYSCTRL_OSC32K_EN32K |
                          ( 6 << SYSCTRL_OSC32K_STARTUP_Pos);


    SYSCTRL->OSC32K.bit.CALIB =
     dde:	6999      	ldr	r1, [r3, #24]
     de0:	6812      	ldr	r2, [r2, #0]
     de2:	4001      	ands	r1, r0
     de4:	04d2      	lsls	r2, r2, #19
     de6:	0e52      	lsrs	r2, r2, #25
     de8:	0412      	lsls	r2, r2, #16
     dea:	4311      	orrs	r1, r2
     dec:	6199      	str	r1, [r3, #24]
        ((*(uint32_t *)FUSES_OSC32K_CAL_ADDR >>
          FUSES_OSC32K_CAL_Pos) & 0x7Ful);

    SYSCTRL->OSC32K.reg = SYSCTRL_OSC32K_STARTUP( 0x6u ) | /* cf table 15.10 of product datasheet in chapter 15.8.6 */
     dee:	4925      	ldr	r1, [pc, #148]	; (e84 <RtcInit+0xb0>)
     df0:	6199      	str	r1, [r3, #24]
                          SYSCTRL_OSC32K_EN32K;
    SYSCTRL->OSC32K.bit.CALIB =
     df2:	6999      	ldr	r1, [r3, #24]
     df4:	4008      	ands	r0, r1
        ((*(uint32_t *)FUSES_OSC32K_CAL_ADDR >>
          FUSES_OSC32K_CAL_Pos) & 0x7Ful);

    SYSCTRL->OSC32K.bit.ENABLE = 1; /* separate call, as described in chapter 15.6.3 */
     df6:	2102      	movs	r1, #2
        ((*(uint32_t *)FUSES_OSC32K_CAL_ADDR >>
          FUSES_OSC32K_CAL_Pos) & 0x7Ful);

    SYSCTRL->OSC32K.reg = SYSCTRL_OSC32K_STARTUP( 0x6u ) | /* cf table 15.10 of product datasheet in chapter 15.8.6 */
                          SYSCTRL_OSC32K_EN32K;
    SYSCTRL->OSC32K.bit.CALIB =
     df8:	4302      	orrs	r2, r0
     dfa:	619a      	str	r2, [r3, #24]
        ((*(uint32_t *)FUSES_OSC32K_CAL_ADDR >>
          FUSES_OSC32K_CAL_Pos) & 0x7Ful);

    SYSCTRL->OSC32K.bit.ENABLE = 1; /* separate call, as described in chapter 15.6.3 */
     dfc:	699a      	ldr	r2, [r3, #24]
     dfe:	430a      	orrs	r2, r1
     e00:	619a      	str	r2, [r3, #24]

    while (  (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_OSC32KRDY) == 0 ) {
     e02:	2204      	movs	r2, #4
     e04:	68d9      	ldr	r1, [r3, #12]
     e06:	4211      	tst	r1, r2
     e08:	d0fc      	beq.n	e04 <RtcInit+0x30>





    GCLK->GENDIV.reg = GCLK_GENDIV_ID(2) | GCLK_GENDIV_DIV(1);
     e0a:	2281      	movs	r2, #129	; 0x81
     e0c:	4b1e      	ldr	r3, [pc, #120]	; (e88 <RtcInit+0xb4>)
     e0e:	0052      	lsls	r2, r2, #1
     e10:	609a      	str	r2, [r3, #8]

    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(2) |
     e12:	4a1e      	ldr	r2, [pc, #120]	; (e8c <RtcInit+0xb8>)
     e14:	605a      	str	r2, [r3, #4]
                        GCLK_GENCTRL_SRC(GCLK_GENCTRL_SRC_OSC32K) |
                        GCLK_GENCTRL_IDC |
                        GCLK_GENCTRL_RUNSTDBY |
                        GCLK_GENCTRL_GENEN;
    while (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY);
     e16:	785a      	ldrb	r2, [r3, #1]
     e18:	b252      	sxtb	r2, r2
     e1a:	2a00      	cmp	r2, #0
     e1c:	dbfb      	blt.n	e16 <RtcInit+0x42>

// Configure RTC
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(RTC_GCLK_ID) |
     e1e:	4a1c      	ldr	r2, [pc, #112]	; (e90 <RtcInit+0xbc>)
     e20:	4b19      	ldr	r3, [pc, #100]	; (e88 <RtcInit+0xb4>)
     e22:	805a      	strh	r2, [r3, #2]
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    RTC->MODE1.CTRL.reg = RTC_MODE1_CTRL_MODE_COUNT16;
     e24:	2204      	movs	r2, #4
     e26:	4b1b      	ldr	r3, [pc, #108]	; (e94 <RtcInit+0xc0>)
     e28:	801a      	strh	r2, [r3, #0]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     e2a:	7a9a      	ldrb	r2, [r3, #10]
     e2c:	4919      	ldr	r1, [pc, #100]	; (e94 <RtcInit+0xc0>)
     e2e:	09d2      	lsrs	r2, r2, #7
     e30:	d1fb      	bne.n	e2a <RtcInit+0x56>

// Prescaler needs to be enabled separately from the mode for some reason
    RTC->MODE1.CTRL.reg |= RTC_MODE1_CTRL_PRESCALER_DIV32;
     e32:	20a0      	movs	r0, #160	; 0xa0
     e34:	880a      	ldrh	r2, [r1, #0]
     e36:	00c0      	lsls	r0, r0, #3
     e38:	4302      	orrs	r2, r0
     e3a:	800a      	strh	r2, [r1, #0]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     e3c:	7a9a      	ldrb	r2, [r3, #10]
     e3e:	09d2      	lsrs	r2, r2, #7
     e40:	d1fc      	bne.n	e3c <RtcInit+0x68>

    RTC->MODE1.PER.reg = 998;
     e42:	4915      	ldr	r1, [pc, #84]	; (e98 <RtcInit+0xc4>)
     e44:	4a13      	ldr	r2, [pc, #76]	; (e94 <RtcInit+0xc0>)
     e46:	8291      	strh	r1, [r2, #20]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     e48:	7a99      	ldrb	r1, [r3, #10]
     e4a:	4a12      	ldr	r2, [pc, #72]	; (e94 <RtcInit+0xc0>)
     e4c:	09c9      	lsrs	r1, r1, #7
     e4e:	d1fb      	bne.n	e48 <RtcInit+0x74>

    RTC->MODE1.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_ADDR(0x10);
     e50:	8851      	ldrh	r1, [r2, #2]
     e52:	4812      	ldr	r0, [pc, #72]	; (e9c <RtcInit+0xc8>)
     e54:	4301      	orrs	r1, r0
     e56:	8051      	strh	r1, [r2, #2]

    RTC->MODE1.INTENSET.reg = RTC_MODE1_INTENSET_OVF;
     e58:	2180      	movs	r1, #128	; 0x80

    RTC->MODE1.CTRL.bit.ENABLE = 1;
     e5a:	2002      	movs	r0, #2
    RTC->MODE1.PER.reg = 998;
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);

    RTC->MODE1.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_ADDR(0x10);

    RTC->MODE1.INTENSET.reg = RTC_MODE1_INTENSET_OVF;
     e5c:	71d1      	strb	r1, [r2, #7]

    RTC->MODE1.CTRL.bit.ENABLE = 1;
     e5e:	8811      	ldrh	r1, [r2, #0]
     e60:	4301      	orrs	r1, r0
     e62:	8011      	strh	r1, [r2, #0]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     e64:	7a9a      	ldrb	r2, [r3, #10]
     e66:	09d2      	lsrs	r2, r2, #7
     e68:	d1fc      	bne.n	e64 <RtcInit+0x90>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     e6a:	4b0d      	ldr	r3, [pc, #52]	; (ea0 <RtcInit+0xcc>)
     e6c:	3208      	adds	r2, #8
     e6e:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(RTC_IRQn);
}
     e70:	4770      	bx	lr
     e72:	46c0      	nop			; (mov r8, r8)
     e74:	40000800 	.word	0x40000800
     e78:	00000606 	.word	0x00000606
     e7c:	ff80ffff 	.word	0xff80ffff
     e80:	00806024 	.word	0x00806024
     e84:	00000604 	.word	0x00000604
     e88:	40000c00 	.word	0x40000c00
     e8c:	00230002 	.word	0x00230002
     e90:	00004204 	.word	0x00004204
     e94:	40001400 	.word	0x40001400
     e98:	000003e6 	.word	0x000003e6
     e9c:	00004010 	.word	0x00004010
     ea0:	e000e100 	.word	0xe000e100

00000ea4 <gclkEnable>:


void gclkEnable(u32_t id, u32_t src, u32_t div) {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
     ea4:	230f      	movs	r3, #15
     ea6:	4018      	ands	r0, r3
     ea8:	4b08      	ldr	r3, [pc, #32]	; (ecc <gclkEnable+0x28>)
     eaa:	0212      	lsls	r2, r2, #8
     eac:	401a      	ands	r2, r3
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     eae:	23f8      	movs	r3, #248	; 0xf8
     eb0:	0209      	lsls	r1, r1, #8
     eb2:	015b      	lsls	r3, r3, #5
     eb4:	4019      	ands	r1, r3
     eb6:	2380      	movs	r3, #128	; 0x80

    NVIC_EnableIRQ(RTC_IRQn);
}


void gclkEnable(u32_t id, u32_t src, u32_t div) {
     eb8:	b510      	push	{r4, lr}
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     eba:	025b      	lsls	r3, r3, #9
    NVIC_EnableIRQ(RTC_IRQn);
}


void gclkEnable(u32_t id, u32_t src, u32_t div) {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
     ebc:	4c04      	ldr	r4, [pc, #16]	; (ed0 <gclkEnable+0x2c>)
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     ebe:	4319      	orrs	r1, r3
    NVIC_EnableIRQ(RTC_IRQn);
}


void gclkEnable(u32_t id, u32_t src, u32_t div) {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
     ec0:	4302      	orrs	r2, r0
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     ec2:	4308      	orrs	r0, r1
    NVIC_EnableIRQ(RTC_IRQn);
}


void gclkEnable(u32_t id, u32_t src, u32_t div) {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
     ec4:	60a2      	str	r2, [r4, #8]
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     ec6:	6060      	str	r0, [r4, #4]
}
     ec8:	bd10      	pop	{r4, pc}
     eca:	46c0      	nop			; (mov r8, r8)
     ecc:	00ffff00 	.word	0x00ffff00
     ed0:	40000c00 	.word	0x40000c00

00000ed4 <delayInit>:


void delayInit(void) {
    cycles_per_ms = 48000000UL;
    cycles_per_ms /= 1000;
     ed4:	4b04      	ldr	r3, [pc, #16]	; (ee8 <delayInit+0x14>)
     ed6:	4a05      	ldr	r2, [pc, #20]	; (eec <delayInit+0x18>)
     ed8:	601a      	str	r2, [r3, #0]
    cycles_per_us = cycles_per_ms / 1000;
     eda:	2230      	movs	r2, #48	; 0x30
     edc:	605a      	str	r2, [r3, #4]

    SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     ede:	4b04      	ldr	r3, [pc, #16]	; (ef0 <delayInit+0x1c>)
     ee0:	3a2b      	subs	r2, #43	; 0x2b
     ee2:	601a      	str	r2, [r3, #0]
}
     ee4:	4770      	bx	lr
     ee6:	46c0      	nop			; (mov r8, r8)
     ee8:	20000004 	.word	0x20000004
     eec:	0000bb80 	.word	0x0000bb80
     ef0:	e000e010 	.word	0xe000e010

00000ef4 <delay_us>:
/**
 * \brief Delay loop to delay at least n number of microseconds
 *
 * \param n  Number of microseconds to wait
 */
void delay_us(uint32_t n) {
     ef4:	b570      	push	{r4, r5, r6, lr}
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
        SysTick->VAL = 0;

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     ef6:	2480      	movs	r4, #128	; 0x80

static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
        SysTick->VAL = 0;
     ef8:	2100      	movs	r1, #0
    while (n--) {
        /* Devide up to blocks of 10u */
        delay_cycles(cycles_per_us);
     efa:	4b08      	ldr	r3, [pc, #32]	; (f1c <delay_us+0x28>)


static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
     efc:	4a08      	ldr	r2, [pc, #32]	; (f20 <delay_us+0x2c>)
     efe:	685b      	ldr	r3, [r3, #4]
        SysTick->VAL = 0;

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     f00:	0264      	lsls	r4, r4, #9
 * \brief Delay loop to delay at least n number of microseconds
 *
 * \param n  Number of microseconds to wait
 */
void delay_us(uint32_t n) {
    while (n--) {
     f02:	3801      	subs	r0, #1
     f04:	d308      	bcc.n	f18 <delay_us+0x24>



static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
     f06:	2b00      	cmp	r3, #0
     f08:	d0fb      	beq.n	f02 <delay_us+0xe>
     f0a:	4e05      	ldr	r6, [pc, #20]	; (f20 <delay_us+0x2c>)
        SysTick->LOAD = n;
     f0c:	6053      	str	r3, [r2, #4]
        SysTick->VAL = 0;
     f0e:	6091      	str	r1, [r2, #8]

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     f10:	6835      	ldr	r5, [r6, #0]
     f12:	4225      	tst	r5, r4
     f14:	d0fc      	beq.n	f10 <delay_us+0x1c>
     f16:	e7f4      	b.n	f02 <delay_us+0xe>
        /* Devide up to blocks of 10u */
        delay_cycles(cycles_per_us);
    }
}
     f18:	bd70      	pop	{r4, r5, r6, pc}
     f1a:	46c0      	nop			; (mov r8, r8)
     f1c:	20000004 	.word	0x20000004
     f20:	e000e010 	.word	0xe000e010

00000f24 <delay_ms>:
/**
 * \brief Delay loop to delay at least n number of milliseconds
 *
 * \param n  Number of milliseconds to wait
 */
void delay_ms(uint32_t n) {
     f24:	b570      	push	{r4, r5, r6, lr}
     f26:	2480      	movs	r4, #128	; 0x80

static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
        SysTick->VAL = 0;
     f28:	2100      	movs	r1, #0
    while (n--) {
        /* Devide up to blocks of 1ms */
        delay_cycles(cycles_per_ms);
     f2a:	4b08      	ldr	r3, [pc, #32]	; (f4c <delay_ms+0x28>)


static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
     f2c:	4a08      	ldr	r2, [pc, #32]	; (f50 <delay_ms+0x2c>)
     f2e:	681b      	ldr	r3, [r3, #0]
        SysTick->VAL = 0;

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     f30:	0264      	lsls	r4, r4, #9
 * \brief Delay loop to delay at least n number of milliseconds
 *
 * \param n  Number of milliseconds to wait
 */
void delay_ms(uint32_t n) {
    while (n--) {
     f32:	3801      	subs	r0, #1
     f34:	d308      	bcc.n	f48 <delay_ms+0x24>



static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
     f36:	2b00      	cmp	r3, #0
     f38:	d0fb      	beq.n	f32 <delay_ms+0xe>
     f3a:	4e05      	ldr	r6, [pc, #20]	; (f50 <delay_ms+0x2c>)
        SysTick->LOAD = n;
     f3c:	6053      	str	r3, [r2, #4]
        SysTick->VAL = 0;
     f3e:	6091      	str	r1, [r2, #8]

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     f40:	6835      	ldr	r5, [r6, #0]
     f42:	4225      	tst	r5, r4
     f44:	d0fc      	beq.n	f40 <delay_ms+0x1c>
     f46:	e7f4      	b.n	f32 <delay_ms+0xe>
        /* Devide up to blocks of 1ms */
        delay_cycles(cycles_per_ms);
    }
}
     f48:	bd70      	pop	{r4, r5, r6, pc}
     f4a:	46c0      	nop			; (mov r8, r8)
     f4c:	20000004 	.word	0x20000004
     f50:	e000e010 	.word	0xe000e010

00000f54 <RTC_Handler>:


volatile uint32_t time_ms = 0;

void RTC_Handler(void) {
    time_ms += 1000;
     f54:	21fa      	movs	r1, #250	; 0xfa
     f56:	4a04      	ldr	r2, [pc, #16]	; (f68 <RTC_Handler+0x14>)
     f58:	0089      	lsls	r1, r1, #2
     f5a:	6813      	ldr	r3, [r2, #0]
     f5c:	185b      	adds	r3, r3, r1
     f5e:	6013      	str	r3, [r2, #0]
    RTC->MODE1.INTFLAG.reg = 0xFF;
     f60:	22ff      	movs	r2, #255	; 0xff
     f62:	4b02      	ldr	r3, [pc, #8]	; (f6c <RTC_Handler+0x18>)
     f64:	721a      	strb	r2, [r3, #8]
}
     f66:	4770      	bx	lr
     f68:	2000045c 	.word	0x2000045c
     f6c:	40001400 	.word	0x40001400

00000f70 <millis>:

uint32_t millis(void) {
     f70:	b530      	push	{r4, r5, lr}
    uint32_t ms;
    ATOMIC_SECTION_ENTER
     f72:	f3ef 8110 	mrs	r1, PRIMASK
     f76:	b672      	cpsid	i
    ms = time_ms + RTC->MODE1.COUNT.reg;
     f78:	4a08      	ldr	r2, [pc, #32]	; (f9c <millis+0x2c>)
     f7a:	4d09      	ldr	r5, [pc, #36]	; (fa0 <millis+0x30>)
     f7c:	8a10      	ldrh	r0, [r2, #16]
     f7e:	682b      	ldr	r3, [r5, #0]
    if (RTC->MODE1.INTFLAG.bit.OVF)
     f80:	7a14      	ldrb	r4, [r2, #8]
}

uint32_t millis(void) {
    uint32_t ms;
    ATOMIC_SECTION_ENTER
    ms = time_ms + RTC->MODE1.COUNT.reg;
     f82:	b280      	uxth	r0, r0
    if (RTC->MODE1.INTFLAG.bit.OVF)
     f84:	09e4      	lsrs	r4, r4, #7
     f86:	d004      	beq.n	f92 <millis+0x22>
        ms = time_ms + RTC->MODE1.COUNT.reg + 1000;
     f88:	8a13      	ldrh	r3, [r2, #16]
     f8a:	22fa      	movs	r2, #250	; 0xfa
     f8c:	6828      	ldr	r0, [r5, #0]
     f8e:	0092      	lsls	r2, r2, #2
     f90:	1880      	adds	r0, r0, r2
     f92:	18c0      	adds	r0, r0, r3
    ATOMIC_SECTION_LEAVE
     f94:	f381 8810 	msr	PRIMASK, r1
    return ms;
}
     f98:	bd30      	pop	{r4, r5, pc}
     f9a:	46c0      	nop			; (mov r8, r8)
     f9c:	40001400 	.word	0x40001400
     fa0:	2000045c 	.word	0x2000045c

00000fa4 <TC4Init>:

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC4_GCLK_ID) |
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC4;
     fa4:	2180      	movs	r1, #128	; 0x80
    return ms;
}

void TC4Init() {

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC4_GCLK_ID) |
     fa6:	4a0d      	ldr	r2, [pc, #52]	; (fdc <TC4Init+0x38>)
     fa8:	4b0d      	ldr	r3, [pc, #52]	; (fe0 <TC4Init+0x3c>)
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC4;
     faa:	0149      	lsls	r1, r1, #5
    return ms;
}

void TC4Init() {

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC4_GCLK_ID) |
     fac:	805a      	strh	r2, [r3, #2]
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC4;
     fae:	4a0d      	ldr	r2, [pc, #52]	; (fe4 <TC4Init+0x40>)
     fb0:	6a13      	ldr	r3, [r2, #32]
     fb2:	430b      	orrs	r3, r1
     fb4:	6213      	str	r3, [r2, #32]

    TC4->COUNT8.CTRLA.reg = TC_CTRLA_MODE_COUNT8 |
     fb6:	4b0c      	ldr	r3, [pc, #48]	; (fe8 <TC4Init+0x44>)
     fb8:	4a0c      	ldr	r2, [pc, #48]	; (fec <TC4Init+0x48>)

    TC4->COUNT8.INTENSET.reg = TC_INTENSET_OVF;

    TC4->COUNT8.EVCTRL.reg = TC_EVCTRL_OVFEO;

    TC4->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
     fba:	2102      	movs	r1, #2
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC4;

    TC4->COUNT8.CTRLA.reg = TC_CTRLA_MODE_COUNT8 |
     fbc:	801a      	strh	r2, [r3, #0]
                            TC_CTRLA_RUNSTDBY |
                            TC_CTRLA_PRESCALER_DIV2;
    TC4->COUNT8.PER.reg = 0x41;
     fbe:	2241      	movs	r2, #65	; 0x41
     fc0:	751a      	strb	r2, [r3, #20]

    TC4->COUNT8.INTENSET.reg = TC_INTENSET_OVF;
     fc2:	3a40      	subs	r2, #64	; 0x40
     fc4:	735a      	strb	r2, [r3, #13]

    TC4->COUNT8.EVCTRL.reg = TC_EVCTRL_OVFEO;
     fc6:	32ff      	adds	r2, #255	; 0xff
     fc8:	815a      	strh	r2, [r3, #10]

    TC4->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
     fca:	881a      	ldrh	r2, [r3, #0]
     fcc:	430a      	orrs	r2, r1
     fce:	801a      	strh	r2, [r3, #0]
     fd0:	2280      	movs	r2, #128	; 0x80
     fd2:	4b07      	ldr	r3, [pc, #28]	; (ff0 <TC4Init+0x4c>)
     fd4:	0312      	lsls	r2, r2, #12
     fd6:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(TC4_IRQn);
}
     fd8:	4770      	bx	lr
     fda:	46c0      	nop			; (mov r8, r8)
     fdc:	0000421c 	.word	0x0000421c
     fe0:	40000c00 	.word	0x40000c00
     fe4:	40000400 	.word	0x40000400
     fe8:	42003000 	.word	0x42003000
     fec:	00000904 	.word	0x00000904
     ff0:	e000e100 	.word	0xe000e100

00000ff4 <TC4_Handler>:

void TC4_Handler( void ) {
    TC4->COUNT8.INTFLAG.reg = 0xFF;
     ff4:	22ff      	movs	r2, #255	; 0xff
     ff6:	4b03      	ldr	r3, [pc, #12]	; (1004 <TC4_Handler+0x10>)
     ff8:	739a      	strb	r2, [r3, #14]
    takeSample = true;
     ffa:	4b03      	ldr	r3, [pc, #12]	; (1008 <TC4_Handler+0x14>)
     ffc:	3afe      	subs	r2, #254	; 0xfe
     ffe:	701a      	strb	r2, [r3, #0]
}
    1000:	4770      	bx	lr
    1002:	46c0      	nop			; (mov r8, r8)
    1004:	42003000 	.word	0x42003000
    1008:	20000463 	.word	0x20000463

0000100c <TC5Init>:

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC5_GCLK_ID) |
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC5;
    100c:	2180      	movs	r1, #128	; 0x80
    takeSample = true;
}

void TC5Init() {

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC5_GCLK_ID) |
    100e:	4a0d      	ldr	r2, [pc, #52]	; (1044 <TC5Init+0x38>)
    1010:	4b0d      	ldr	r3, [pc, #52]	; (1048 <TC5Init+0x3c>)
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC5;
    1012:	0189      	lsls	r1, r1, #6
    takeSample = true;
}

void TC5Init() {

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC5_GCLK_ID) |
    1014:	805a      	strh	r2, [r3, #2]
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC5;
    1016:	4a0d      	ldr	r2, [pc, #52]	; (104c <TC5Init+0x40>)
    1018:	6a13      	ldr	r3, [r2, #32]
    101a:	430b      	orrs	r3, r1
    101c:	6213      	str	r3, [r2, #32]

    TC5->COUNT8.CTRLA.reg = TC_CTRLA_MODE_COUNT8 |
    101e:	4b0c      	ldr	r3, [pc, #48]	; (1050 <TC5Init+0x44>)
    1020:	4a0c      	ldr	r2, [pc, #48]	; (1054 <TC5Init+0x48>)

    TC5->COUNT8.INTENSET.reg = TC_INTENSET_OVF;

    TC5->COUNT8.EVCTRL.reg = TC_EVCTRL_OVFEO;

    TC5->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
    1022:	2102      	movs	r1, #2
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC5;

    TC5->COUNT8.CTRLA.reg = TC_CTRLA_MODE_COUNT8 |
    1024:	801a      	strh	r2, [r3, #0]
                            TC_CTRLA_RUNSTDBY |
                            TC_CTRLA_PRESCALER_DIV256;
    TC5->COUNT8.PER.reg = 0x80;
    1026:	2280      	movs	r2, #128	; 0x80
    1028:	751a      	strb	r2, [r3, #20]

    TC5->COUNT8.INTENSET.reg = TC_INTENSET_OVF;
    102a:	3a7f      	subs	r2, #127	; 0x7f
    102c:	735a      	strb	r2, [r3, #13]

    TC5->COUNT8.EVCTRL.reg = TC_EVCTRL_OVFEO;
    102e:	32ff      	adds	r2, #255	; 0xff
    1030:	815a      	strh	r2, [r3, #10]

    TC5->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
    1032:	881a      	ldrh	r2, [r3, #0]
    1034:	430a      	orrs	r2, r1
    1036:	801a      	strh	r2, [r3, #0]
    1038:	2280      	movs	r2, #128	; 0x80
    103a:	4b07      	ldr	r3, [pc, #28]	; (1058 <TC5Init+0x4c>)
    103c:	0352      	lsls	r2, r2, #13
    103e:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(TC5_IRQn);
}
    1040:	4770      	bx	lr
    1042:	46c0      	nop			; (mov r8, r8)
    1044:	0000421c 	.word	0x0000421c
    1048:	40000c00 	.word	0x40000c00
    104c:	40000400 	.word	0x40000400
    1050:	42003400 	.word	0x42003400
    1054:	00000e04 	.word	0x00000e04
    1058:	e000e100 	.word	0xe000e100

0000105c <TC5_Handler>:

void TC5_Handler( void ) {
    TC5->COUNT8.INTFLAG.reg = 0xFF;
    105c:	22ff      	movs	r2, #255	; 0xff
    105e:	4b03      	ldr	r3, [pc, #12]	; (106c <TC5_Handler+0x10>)
    1060:	739a      	strb	r2, [r3, #14]
    writeLog = true;
    1062:	4b03      	ldr	r3, [pc, #12]	; (1070 <TC5_Handler+0x14>)
    1064:	3afe      	subs	r2, #254	; 0xfe
    1066:	701a      	strb	r2, [r3, #0]
    1068:	4770      	bx	lr
    106a:	46c0      	nop			; (mov r8, r8)
    106c:	42003400 	.word	0x42003400
    1070:	20000461 	.word	0x20000461

00001074 <dmaInit>:
#include <util.h>

DMA_DESC_ALIGN DmacDescriptor dma_descriptors[12];
DMA_DESC_ALIGN DmacDescriptor dma_descriptors_wb[12];

void dmaInit() {
    1074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	memset(&dma_descriptors, 0, sizeof(dma_descriptors));
    1076:	27c0      	movs	r7, #192	; 0xc0
    1078:	4d10      	ldr	r5, [pc, #64]	; (10bc <dmaInit+0x48>)
    107a:	003a      	movs	r2, r7
    107c:	4e10      	ldr	r6, [pc, #64]	; (10c0 <dmaInit+0x4c>)
    107e:	0028      	movs	r0, r5
    1080:	2100      	movs	r1, #0
    1082:	47b0      	blx	r6
	memset(&dma_descriptors_wb, 0, sizeof(dma_descriptors_wb));
    1084:	4c0f      	ldr	r4, [pc, #60]	; (10c4 <dmaInit+0x50>)
    1086:	003a      	movs	r2, r7
    1088:	2100      	movs	r1, #0
    108a:	0020      	movs	r0, r4
    108c:	47b0      	blx	r6

	PM->AHBMASK.reg |= PM_AHBMASK_DMAC;
    108e:	2120      	movs	r1, #32
    1090:	4b0d      	ldr	r3, [pc, #52]	; (10c8 <dmaInit+0x54>)
    1092:	695a      	ldr	r2, [r3, #20]
    1094:	430a      	orrs	r2, r1
    1096:	615a      	str	r2, [r3, #20]
	PM->APBBMASK.reg |= PM_APBBMASK_DMAC;
    1098:	69da      	ldr	r2, [r3, #28]
    109a:	3910      	subs	r1, #16
    109c:	430a      	orrs	r2, r1
    109e:	61da      	str	r2, [r3, #28]

	DMAC->CTRL.bit.DMAENABLE = 0;
    10a0:	4b0a      	ldr	r3, [pc, #40]	; (10cc <dmaInit+0x58>)
    10a2:	390e      	subs	r1, #14
    10a4:	881a      	ldrh	r2, [r3, #0]
    10a6:	438a      	bics	r2, r1
    10a8:	801a      	strh	r2, [r3, #0]
	DMAC->CTRL.bit.SWRST = 1;
    10aa:	881a      	ldrh	r2, [r3, #0]
    10ac:	3901      	subs	r1, #1
    10ae:	430a      	orrs	r2, r1
    10b0:	801a      	strh	r2, [r3, #0]

	DMAC->BASEADDR.reg = (unsigned) &dma_descriptors;
	DMAC->WRBADDR.reg = (unsigned) &dma_descriptors_wb;

	DMAC->CTRL.reg = DMAC_CTRL_DMAENABLE | DMAC_CTRL_LVLEN(0xf);
    10b2:	4a07      	ldr	r2, [pc, #28]	; (10d0 <dmaInit+0x5c>)
	PM->APBBMASK.reg |= PM_APBBMASK_DMAC;

	DMAC->CTRL.bit.DMAENABLE = 0;
	DMAC->CTRL.bit.SWRST = 1;

	DMAC->BASEADDR.reg = (unsigned) &dma_descriptors;
    10b4:	635d      	str	r5, [r3, #52]	; 0x34
	DMAC->WRBADDR.reg = (unsigned) &dma_descriptors_wb;
    10b6:	639c      	str	r4, [r3, #56]	; 0x38

	DMAC->CTRL.reg = DMAC_CTRL_DMAENABLE | DMAC_CTRL_LVLEN(0xf);
    10b8:	801a      	strh	r2, [r3, #0]
}
    10ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    10bc:	20000530 	.word	0x20000530
    10c0:	000025d1 	.word	0x000025d1
    10c4:	20000470 	.word	0x20000470
    10c8:	40000400 	.word	0x40000400
    10cc:	41004800 	.word	0x41004800
    10d0:	00000f02 	.word	0x00000f02

000010d4 <flight>:

void flight(Altimeter *my_altimeter) {



    switch(my_altimeter->myFlightState) {
    10d4:	7803      	ldrb	r3, [r0, #0]
#include <util.h>
#include <boardDefines.h>



void flight(Altimeter *my_altimeter) {
    10d6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    10d8:	0004      	movs	r4, r0



    switch(my_altimeter->myFlightState) {
    10da:	2b00      	cmp	r3, #0
    10dc:	d13b      	bne.n	1156 <flight+0x82>
    case flightStatrup:

        my_altimeter->myIMU.gravityOffsetBuffer = 	my_altimeter->myIMU.gravityOffsetBuffer*0.5 + my_altimeter->myIMU.accelZ*0.5;
    10de:	4d1e      	ldr	r5, [pc, #120]	; (1158 <flight+0x84>)
    10e0:	6c00      	ldr	r0, [r0, #64]	; 0x40
    10e2:	47a8      	blx	r5
    10e4:	4e1d      	ldr	r6, [pc, #116]	; (115c <flight+0x88>)
    10e6:	2200      	movs	r2, #0
    10e8:	4b1d      	ldr	r3, [pc, #116]	; (1160 <flight+0x8c>)
    10ea:	47b0      	blx	r6
    10ec:	9000      	str	r0, [sp, #0]
    10ee:	9101      	str	r1, [sp, #4]
    10f0:	6d20      	ldr	r0, [r4, #80]	; 0x50
    10f2:	47a8      	blx	r5
    10f4:	2200      	movs	r2, #0
    10f6:	4b1a      	ldr	r3, [pc, #104]	; (1160 <flight+0x8c>)
    10f8:	47b0      	blx	r6
    10fa:	4e1a      	ldr	r6, [pc, #104]	; (1164 <flight+0x90>)
    10fc:	0002      	movs	r2, r0
    10fe:	000b      	movs	r3, r1
    1100:	9800      	ldr	r0, [sp, #0]
    1102:	9901      	ldr	r1, [sp, #4]
    1104:	47b0      	blx	r6
    1106:	4b18      	ldr	r3, [pc, #96]	; (1168 <flight+0x94>)
    1108:	4798      	blx	r3
    110a:	6420      	str	r0, [r4, #64]	; 0x40

        my_altimeter->myBarometer.groundOffsetBuffer = my_altimeter->myBarometer.groundOffsetBuffer*0.5 + my_altimeter->myBarometer.heightFeet*0.5;
    110c:	6b60      	ldr	r0, [r4, #52]	; 0x34
    110e:	47a8      	blx	r5
    1110:	2200      	movs	r2, #0
    1112:	4b13      	ldr	r3, [pc, #76]	; (1160 <flight+0x8c>)
    1114:	4e11      	ldr	r6, [pc, #68]	; (115c <flight+0x88>)
    1116:	47b0      	blx	r6
    1118:	0006      	movs	r6, r0
    111a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    111c:	000f      	movs	r7, r1
    111e:	47a8      	blx	r5
    1120:	4d0e      	ldr	r5, [pc, #56]	; (115c <flight+0x88>)
    1122:	2200      	movs	r2, #0
    1124:	4b0e      	ldr	r3, [pc, #56]	; (1160 <flight+0x8c>)
    1126:	47a8      	blx	r5
    1128:	4d0e      	ldr	r5, [pc, #56]	; (1164 <flight+0x90>)
    112a:	0002      	movs	r2, r0
    112c:	000b      	movs	r3, r1
    112e:	0030      	movs	r0, r6
    1130:	0039      	movs	r1, r7
    1132:	47a8      	blx	r5
    1134:	4b0c      	ldr	r3, [pc, #48]	; (1168 <flight+0x94>)
    1136:	4798      	blx	r3

        if ((millis() - my_altimeter->myIMU.offsetBufferTime) > 2000) {
    1138:	4d0c      	ldr	r5, [pc, #48]	; (116c <flight+0x98>)
    switch(my_altimeter->myFlightState) {
    case flightStatrup:

        my_altimeter->myIMU.gravityOffsetBuffer = 	my_altimeter->myIMU.gravityOffsetBuffer*0.5 + my_altimeter->myIMU.accelZ*0.5;

        my_altimeter->myBarometer.groundOffsetBuffer = my_altimeter->myBarometer.groundOffsetBuffer*0.5 + my_altimeter->myBarometer.heightFeet*0.5;
    113a:	6360      	str	r0, [r4, #52]	; 0x34

        if ((millis() - my_altimeter->myIMU.offsetBufferTime) > 2000) {
    113c:	47a8      	blx	r5
    113e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    1140:	1ac0      	subs	r0, r0, r3
    1142:	23fa      	movs	r3, #250	; 0xfa
    1144:	00db      	lsls	r3, r3, #3
    1146:	4298      	cmp	r0, r3
    1148:	d905      	bls.n	1156 <flight+0x82>
            //recursive filter
            my_altimeter->myBarometer.groundOffset = my_altimeter->myBarometer.groundOffsetBuffer;
    114a:	6b63      	ldr	r3, [r4, #52]	; 0x34
    114c:	6323      	str	r3, [r4, #48]	; 0x30
            my_altimeter->myIMU.gravityOffset = my_altimeter->myIMU.gravityOffsetBuffer;
    114e:	6c23      	ldr	r3, [r4, #64]	; 0x40
    1150:	63e3      	str	r3, [r4, #60]	; 0x3c
            my_altimeter->myIMU.offsetBufferTime = millis();
    1152:	47a8      	blx	r5
    1154:	63a0      	str	r0, [r4, #56]	; 0x38

        break;
    }


    1156:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    1158:	0000238d 	.word	0x0000238d
    115c:	00001da5 	.word	0x00001da5
    1160:	3fe00000 	.word	0x3fe00000
    1164:	0000174d 	.word	0x0000174d
    1168:	00002435 	.word	0x00002435
    116c:	00000f71 	.word	0x00000f71

00001170 <logSensors>:
#include <boardDefines.h>




void logSensors(Altimeter *my_altimeter) {
    1170:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

    u8_t bytesToSend = 23;
    u8_t dataToSend[23];


    dataToSend[0] = SENSOR_LOG;
    1172:	2341      	movs	r3, #65	; 0x41
    1174:	466a      	mov	r2, sp
    1176:	7013      	strb	r3, [r2, #0]
    dataToSend[1] = my_altimeter->sampleTick >> 0;
    1178:	0003      	movs	r3, r0
    dataToSend[2] = my_altimeter->sampleTick >> 8;
    117a:	4669      	mov	r1, sp
    u8_t bytesToSend = 23;
    u8_t dataToSend[23];


    dataToSend[0] = SENSOR_LOG;
    dataToSend[1] = my_altimeter->sampleTick >> 0;
    117c:	338c      	adds	r3, #140	; 0x8c
    117e:	681b      	ldr	r3, [r3, #0]
    1180:	7053      	strb	r3, [r2, #1]
    dataToSend[2] = my_altimeter->sampleTick >> 8;
    1182:	0a1a      	lsrs	r2, r3, #8
    1184:	708a      	strb	r2, [r1, #2]
    dataToSend[3] = my_altimeter->sampleTick >> 16;
    1186:	0c1a      	lsrs	r2, r3, #16
    dataToSend[4] = my_altimeter->sampleTick >> 24;
    1188:	0e1b      	lsrs	r3, r3, #24
    118a:	710b      	strb	r3, [r1, #4]

    dataToSend[5] = my_altimeter->myBarometer.heightCm >> 0;
    118c:	6a83      	ldr	r3, [r0, #40]	; 0x28


    dataToSend[0] = SENSOR_LOG;
    dataToSend[1] = my_altimeter->sampleTick >> 0;
    dataToSend[2] = my_altimeter->sampleTick >> 8;
    dataToSend[3] = my_altimeter->sampleTick >> 16;
    118e:	70ca      	strb	r2, [r1, #3]
    dataToSend[4] = my_altimeter->sampleTick >> 24;

    dataToSend[5] = my_altimeter->myBarometer.heightCm >> 0;
    dataToSend[6] = my_altimeter->myBarometer.heightCm >> 8;
    1190:	0a1a      	lsrs	r2, r3, #8
    dataToSend[1] = my_altimeter->sampleTick >> 0;
    dataToSend[2] = my_altimeter->sampleTick >> 8;
    dataToSend[3] = my_altimeter->sampleTick >> 16;
    dataToSend[4] = my_altimeter->sampleTick >> 24;

    dataToSend[5] = my_altimeter->myBarometer.heightCm >> 0;
    1192:	714b      	strb	r3, [r1, #5]
    dataToSend[6] = my_altimeter->myBarometer.heightCm >> 8;
    1194:	718a      	strb	r2, [r1, #6]
    dataToSend[7] = my_altimeter->myBarometer.heightCm >> 16;
    1196:	0c1a      	lsrs	r2, r3, #16
    dataToSend[8] = my_altimeter->myBarometer.heightCm >> 24;
    1198:	0e1b      	lsrs	r3, r3, #24
    119a:	720b      	strb	r3, [r1, #8]

    dataToSend[9] = my_altimeter->myIMU.accelXRaw >> 0;
    119c:	0003      	movs	r3, r0
    dataToSend[3] = my_altimeter->sampleTick >> 16;
    dataToSend[4] = my_altimeter->sampleTick >> 24;

    dataToSend[5] = my_altimeter->myBarometer.heightCm >> 0;
    dataToSend[6] = my_altimeter->myBarometer.heightCm >> 8;
    dataToSend[7] = my_altimeter->myBarometer.heightCm >> 16;
    119e:	71ca      	strb	r2, [r1, #7]
    dataToSend[8] = my_altimeter->myBarometer.heightCm >> 24;

    dataToSend[9] = my_altimeter->myIMU.accelXRaw >> 0;
    11a0:	3360      	adds	r3, #96	; 0x60
    11a2:	881b      	ldrh	r3, [r3, #0]
    dataToSend[4] = my_altimeter->sampleTick >> 24;

    dataToSend[5] = my_altimeter->myBarometer.heightCm >> 0;
    dataToSend[6] = my_altimeter->myBarometer.heightCm >> 8;
    dataToSend[7] = my_altimeter->myBarometer.heightCm >> 16;
    dataToSend[8] = my_altimeter->myBarometer.heightCm >> 24;
    11a4:	466a      	mov	r2, sp

    dataToSend[9] = my_altimeter->myIMU.accelXRaw >> 0;
    11a6:	724b      	strb	r3, [r1, #9]
    dataToSend[10] = my_altimeter->myIMU.accelXRaw >> 8;
    11a8:	0a1b      	lsrs	r3, r3, #8
    11aa:	728b      	strb	r3, [r1, #10]
    dataToSend[11] = my_altimeter->myIMU.accelYRaw >> 0;
    11ac:	0003      	movs	r3, r0
    11ae:	3364      	adds	r3, #100	; 0x64
    11b0:	881b      	ldrh	r3, [r3, #0]
    11b2:	72cb      	strb	r3, [r1, #11]
    dataToSend[12] = my_altimeter->myIMU.accelYRaw >> 8;
    11b4:	0a1b      	lsrs	r3, r3, #8
    11b6:	730b      	strb	r3, [r1, #12]
    dataToSend[13] = my_altimeter->myIMU.accelZRaw >> 0;
    11b8:	0003      	movs	r3, r0
    11ba:	3368      	adds	r3, #104	; 0x68
    11bc:	881b      	ldrh	r3, [r3, #0]
    11be:	734b      	strb	r3, [r1, #13]
    dataToSend[14] = my_altimeter->myIMU.accelZRaw >> 8;
    11c0:	0a1b      	lsrs	r3, r3, #8
    11c2:	738b      	strb	r3, [r1, #14]

    dataToSend[15] = my_altimeter->myIMU.gyroXRaw >> 0;
    11c4:	0003      	movs	r3, r0
    11c6:	336c      	adds	r3, #108	; 0x6c
    11c8:	881b      	ldrh	r3, [r3, #0]
    11ca:	73cb      	strb	r3, [r1, #15]
    dataToSend[16] = my_altimeter->myIMU.gyroXRaw >> 8;
    11cc:	0a1b      	lsrs	r3, r3, #8
    11ce:	740b      	strb	r3, [r1, #16]
    dataToSend[17] = my_altimeter->myIMU.gyroYRaw >> 0;
    11d0:	0003      	movs	r3, r0
    11d2:	3370      	adds	r3, #112	; 0x70
    11d4:	881b      	ldrh	r3, [r3, #0]
    11d6:	744b      	strb	r3, [r1, #17]
    dataToSend[18] = my_altimeter->myIMU.gyroYRaw >> 8;
    11d8:	0a1b      	lsrs	r3, r3, #8
    11da:	748b      	strb	r3, [r1, #18]
    dataToSend[19] = my_altimeter->myIMU.gyroZRaw >> 0;
    11dc:	0003      	movs	r3, r0
    11de:	3374      	adds	r3, #116	; 0x74
    11e0:	881b      	ldrh	r3, [r3, #0]
    11e2:	74cb      	strb	r3, [r1, #19]
    dataToSend[20] = my_altimeter->myIMU.gyroZRaw >> 8;
    11e4:	0a1b      	lsrs	r3, r3, #8
    11e6:	750b      	strb	r3, [r1, #20]

    dataToSend[21] = my_altimeter->myAnalogAccelerometer.analogRaw >> 0;
    11e8:	0003      	movs	r3, r0
    11ea:	3378      	adds	r3, #120	; 0x78
    11ec:	881b      	ldrh	r3, [r3, #0]
    11ee:	754b      	strb	r3, [r1, #21]
    dataToSend[22] = my_altimeter->myAnalogAccelerometer.analogRaw >> 8;
    11f0:	0a1b      	lsrs	r3, r3, #8
    11f2:	758b      	strb	r3, [r1, #22]


    //for (u8_t dataByte = 0; dataByte < bytesToSend; ++dataByte) {
        //usartDataOut(USART3, dataToSend[dataByte]);
    //}
     u8_t bytesSent = AT25SEWriteSample(my_altimeter->currentAddress,bytesToSend,dataToSend);
    11f4:	6840      	ldr	r0, [r0, #4]
    11f6:	2117      	movs	r1, #23
    11f8:	4b02      	ldr	r3, [pc, #8]	; (1204 <logSensors+0x94>)
    11fa:	b2c0      	uxtb	r0, r0
    11fc:	4798      	blx	r3

}
    11fe:	b007      	add	sp, #28
    1200:	bd00      	pop	{pc}
    1202:	46c0      	nop			; (mov r8, r8)
    1204:	000002a9 	.word	0x000002a9

00001208 <sampleTick>:
#include <boardDefines.h>
#include <MS5803.h>



void sampleTick(Altimeter *my_altimeter) {
    1208:	b5f0      	push	{r4, r5, r6, r7, lr}
    120a:	0004      	movs	r4, r0
    120c:	b087      	sub	sp, #28

    my_altimeter->sampleTick = millis();
    120e:	4bd1      	ldr	r3, [pc, #836]	; (1554 <sampleTick+0x34c>)
    1210:	4798      	blx	r3
    1212:	0023      	movs	r3, r4

    my_altimeter->batV = adc_read(senseBatPin);
    1214:	4dd0      	ldr	r5, [pc, #832]	; (1558 <sampleTick+0x350>)



void sampleTick(Altimeter *my_altimeter) {

    my_altimeter->sampleTick = millis();
    1216:	338c      	adds	r3, #140	; 0x8c
    1218:	6018      	str	r0, [r3, #0]

    my_altimeter->batV = adc_read(senseBatPin);
    121a:	786b      	ldrb	r3, [r5, #1]
    121c:	7829      	ldrb	r1, [r5, #0]
    121e:	78a8      	ldrb	r0, [r5, #2]
    1220:	021b      	lsls	r3, r3, #8
    1222:	430b      	orrs	r3, r1
    1224:	0400      	lsls	r0, r0, #16
    1226:	001a      	movs	r2, r3
    1228:	0003      	movs	r3, r0
    122a:	78e8      	ldrb	r0, [r5, #3]
    122c:	4313      	orrs	r3, r2
    122e:	0600      	lsls	r0, r0, #24
    1230:	4eca      	ldr	r6, [pc, #808]	; (155c <sampleTick+0x354>)
    1232:	7929      	ldrb	r1, [r5, #4]
    1234:	4318      	orrs	r0, r3
    1236:	47b0      	blx	r6
    1238:	0023      	movs	r3, r4
    123a:	3380      	adds	r3, #128	; 0x80
    123c:	8018      	strh	r0, [r3, #0]
    my_altimeter->batV = my_altimeter->batV;
    my_altimeter->senseA = adc_read(senseAPin);
    123e:	79ab      	ldrb	r3, [r5, #6]
    1240:	7969      	ldrb	r1, [r5, #5]
    1242:	79e8      	ldrb	r0, [r5, #7]
    1244:	021b      	lsls	r3, r3, #8
    1246:	430b      	orrs	r3, r1
    1248:	0400      	lsls	r0, r0, #16
    124a:	001a      	movs	r2, r3
    124c:	0003      	movs	r3, r0
    124e:	7a28      	ldrb	r0, [r5, #8]
    1250:	4313      	orrs	r3, r2
    1252:	0600      	lsls	r0, r0, #24
    1254:	7a69      	ldrb	r1, [r5, #9]
    1256:	4318      	orrs	r0, r3
    1258:	47b0      	blx	r6
    125a:	0023      	movs	r3, r4
    125c:	3382      	adds	r3, #130	; 0x82
    125e:	8018      	strh	r0, [r3, #0]
    my_altimeter->senseB = adc_read(senseBPin);
    1260:	7aeb      	ldrb	r3, [r5, #11]
    1262:	7aa9      	ldrb	r1, [r5, #10]
    1264:	7b28      	ldrb	r0, [r5, #12]
    1266:	021b      	lsls	r3, r3, #8
    1268:	430b      	orrs	r3, r1
    126a:	0400      	lsls	r0, r0, #16
    126c:	001a      	movs	r2, r3
    126e:	0003      	movs	r3, r0
    1270:	7b68      	ldrb	r0, [r5, #13]
    1272:	4313      	orrs	r3, r2
    1274:	0600      	lsls	r0, r0, #24
    1276:	7ba9      	ldrb	r1, [r5, #14]
    1278:	4318      	orrs	r0, r3
    127a:	47b0      	blx	r6
    127c:	0023      	movs	r3, r4
    127e:	3384      	adds	r3, #132	; 0x84
    1280:	8018      	strh	r0, [r3, #0]
    my_altimeter->senseC = adc_read(senseCPin);
    1282:	7c2b      	ldrb	r3, [r5, #16]
    1284:	7be9      	ldrb	r1, [r5, #15]
    1286:	7c68      	ldrb	r0, [r5, #17]
    1288:	021b      	lsls	r3, r3, #8
    128a:	430b      	orrs	r3, r1
    128c:	0400      	lsls	r0, r0, #16
    128e:	001a      	movs	r2, r3
    1290:	0003      	movs	r3, r0
    1292:	7ca8      	ldrb	r0, [r5, #18]
    1294:	4313      	orrs	r3, r2
    1296:	0600      	lsls	r0, r0, #24
    1298:	7ce9      	ldrb	r1, [r5, #19]
    129a:	4318      	orrs	r0, r3
    129c:	47b0      	blx	r6
    129e:	0023      	movs	r3, r4
    12a0:	3386      	adds	r3, #134	; 0x86
    12a2:	8018      	strh	r0, [r3, #0]
    my_altimeter->senseD = adc_read(senseDPin);
    12a4:	7d6b      	ldrb	r3, [r5, #21]
    12a6:	7d29      	ldrb	r1, [r5, #20]
    12a8:	7da8      	ldrb	r0, [r5, #22]
    12aa:	021b      	lsls	r3, r3, #8
    12ac:	430b      	orrs	r3, r1
    12ae:	0400      	lsls	r0, r0, #16
    12b0:	001a      	movs	r2, r3
    12b2:	0003      	movs	r3, r0
    12b4:	7de8      	ldrb	r0, [r5, #23]
    12b6:	4313      	orrs	r3, r2
    12b8:	0600      	lsls	r0, r0, #24
    12ba:	7e29      	ldrb	r1, [r5, #24]
    12bc:	4318      	orrs	r0, r3
    12be:	47b0      	blx	r6
    12c0:	0023      	movs	r3, r4
    12c2:	3388      	adds	r3, #136	; 0x88
    12c4:	8018      	strh	r0, [r3, #0]




    my_altimeter->myAnalogAccelerometer.analogRaw = adc_read(analogAccelPin);
    12c6:	7eab      	ldrb	r3, [r5, #26]
    12c8:	7e69      	ldrb	r1, [r5, #25]
    12ca:	7ee8      	ldrb	r0, [r5, #27]
    12cc:	021b      	lsls	r3, r3, #8
    12ce:	430b      	orrs	r3, r1
    12d0:	0400      	lsls	r0, r0, #16
    12d2:	001a      	movs	r2, r3
    12d4:	0003      	movs	r3, r0
    12d6:	7f28      	ldrb	r0, [r5, #28]
    12d8:	4313      	orrs	r3, r2
    12da:	0600      	lsls	r0, r0, #24
    12dc:	7f69      	ldrb	r1, [r5, #29]
    12de:	4318      	orrs	r0, r3
    12e0:	47b0      	blx	r6
    12e2:	0023      	movs	r3, r4
    12e4:	3378      	adds	r3, #120	; 0x78
    12e6:	8018      	strh	r0, [r3, #0]
    my_altimeter->myAnalogAccelerometer.analogAccel = (my_altimeter->myAnalogAccelerometer.analogRaw - 3900) * -0.0154;
    12e8:	4b9d      	ldr	r3, [pc, #628]	; (1560 <sampleTick+0x358>)
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    12ea:	2780      	movs	r7, #128	; 0x80
    12ec:	18c0      	adds	r0, r0, r3
    12ee:	4b9d      	ldr	r3, [pc, #628]	; (1564 <sampleTick+0x35c>)
    12f0:	4798      	blx	r3
    12f2:	4a9d      	ldr	r2, [pc, #628]	; (1568 <sampleTick+0x360>)
    12f4:	4e9d      	ldr	r6, [pc, #628]	; (156c <sampleTick+0x364>)
    12f6:	4b9e      	ldr	r3, [pc, #632]	; (1570 <sampleTick+0x368>)
    12f8:	47b0      	blx	r6
    12fa:	4b9e      	ldr	r3, [pc, #632]	; (1574 <sampleTick+0x36c>)
    12fc:	4798      	blx	r3
    uint8_t dummy_Tx = 0xFF;
    uint8_t dummy_rx;

    pinLow(cs_baro);
    // dummy_rx = spiDataTransfer(SPI2, 0x50);
    byteOut(spi2SCK,spi2MOSI, 0x50);
    12fe:	2250      	movs	r2, #80	; 0x50


    my_altimeter->myAnalogAccelerometer.analogRaw = adc_read(analogAccelPin);
    my_altimeter->myAnalogAccelerometer.analogAccel = (my_altimeter->myAnalogAccelerometer.analogRaw - 3900) * -0.0154;

    my_altimeter->myIMU.perviousAccelX = my_altimeter->myIMU.accelX;
    1300:	6c63      	ldr	r3, [r4, #68]	; 0x44
    1302:	023f      	lsls	r7, r7, #8
    1304:	64a3      	str	r3, [r4, #72]	; 0x48
    1306:	4b9c      	ldr	r3, [pc, #624]	; (1578 <sampleTick+0x370>)




    my_altimeter->myAnalogAccelerometer.analogRaw = adc_read(analogAccelPin);
    my_altimeter->myAnalogAccelerometer.analogAccel = (my_altimeter->myAnalogAccelerometer.analogRaw - 3900) * -0.0154;
    1308:	67e0      	str	r0, [r4, #124]	; 0x7c
    uint8_t dummy_Tx = 0xFF;
    uint8_t dummy_rx;

    pinLow(cs_baro);
    // dummy_rx = spiDataTransfer(SPI2, 0x50);
    byteOut(spi2SCK,spi2MOSI, 0x50);
    130a:	002e      	movs	r6, r5
    130c:	615f      	str	r7, [r3, #20]
    130e:	9200      	str	r2, [sp, #0]
    1310:	7fea      	ldrb	r2, [r5, #31]
    1312:	7fa8      	ldrb	r0, [r5, #30]
    1314:	0212      	lsls	r2, r2, #8
    1316:	4302      	orrs	r2, r0
    1318:	0011      	movs	r1, r2
    131a:	002b      	movs	r3, r5
    131c:	361e      	adds	r6, #30
    131e:	78b2      	ldrb	r2, [r6, #2]
    1320:	3323      	adds	r3, #35	; 0x23
    1322:	0412      	lsls	r2, r2, #16
    1324:	430a      	orrs	r2, r1
    1326:	78f1      	ldrb	r1, [r6, #3]
    1328:	7818      	ldrb	r0, [r3, #0]
    132a:	0609      	lsls	r1, r1, #24
    132c:	4311      	orrs	r1, r2
    132e:	7932      	ldrb	r2, [r6, #4]
    1330:	789d      	ldrb	r5, [r3, #2]
    1332:	9204      	str	r2, [sp, #16]
    1334:	785a      	ldrb	r2, [r3, #1]
    1336:	042d      	lsls	r5, r5, #16
    1338:	0212      	lsls	r2, r2, #8
    133a:	4302      	orrs	r2, r0
    133c:	9103      	str	r1, [sp, #12]
    133e:	0011      	movs	r1, r2
    1340:	002a      	movs	r2, r5
    1342:	78dd      	ldrb	r5, [r3, #3]
    1344:	791b      	ldrb	r3, [r3, #4]
    1346:	430a      	orrs	r2, r1
    1348:	062d      	lsls	r5, r5, #24
    134a:	4315      	orrs	r5, r2
    134c:	9305      	str	r3, [sp, #20]
    134e:	9a03      	ldr	r2, [sp, #12]
    1350:	9905      	ldr	r1, [sp, #20]
    1352:	9b04      	ldr	r3, [sp, #16]
    1354:	0028      	movs	r0, r5
    1356:	4e89      	ldr	r6, [pc, #548]	; (157c <sampleTick+0x374>)
    1358:	47b0      	blx	r6
    pinHigh(cs_baro);
    delay_us(500);
    135a:	20fa      	movs	r0, #250	; 0xfa
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    135c:	4b86      	ldr	r3, [pc, #536]	; (1578 <sampleTick+0x370>)
    135e:	0040      	lsls	r0, r0, #1
    1360:	619f      	str	r7, [r3, #24]
    1362:	4b87      	ldr	r3, [pc, #540]	; (1580 <sampleTick+0x378>)
    1364:	4798      	blx	r3
    my_altimeter->myBarometer.rawTempatureData = readMS5803AdcResults();
    1366:	4b87      	ldr	r3, [pc, #540]	; (1584 <sampleTick+0x37c>)
    1368:	4798      	blx	r3
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    136a:	4b83      	ldr	r3, [pc, #524]	; (1578 <sampleTick+0x370>)
    136c:	61a0      	str	r0, [r4, #24]
    136e:	615f      	str	r7, [r3, #20]

    pinLow(cs_baro);
    //  dummy_rx = spiDataTransfer(SPI2, 0x42);
    byteOut(spi2SCK,spi2MOSI, 0x42);
    1370:	2342      	movs	r3, #66	; 0x42
    1372:	9a03      	ldr	r2, [sp, #12]
    1374:	9300      	str	r3, [sp, #0]
    1376:	0028      	movs	r0, r5
    1378:	9b04      	ldr	r3, [sp, #16]
    137a:	9905      	ldr	r1, [sp, #20]
    137c:	47b0      	blx	r6
    137e:	2280      	movs	r2, #128	; 0x80
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    1380:	4b7d      	ldr	r3, [pc, #500]	; (1578 <sampleTick+0x370>)
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    1382:	00d2      	lsls	r2, r2, #3
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    1384:	619f      	str	r7, [r3, #24]
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    1386:	4b80      	ldr	r3, [pc, #512]	; (1588 <sampleTick+0x380>)



// Accel data
    pinLow(cs_accel);
    dummy_rx = spiDataTransfer(SPI0, BMI055_X_ACC_LSB | BMI055_READ_REG);
    1388:	4f80      	ldr	r7, [pc, #512]	; (158c <sampleTick+0x384>)
    138a:	601a      	str	r2, [r3, #0]
    138c:	2182      	movs	r1, #130	; 0x82
    138e:	2000      	movs	r0, #0
    1390:	47b8      	blx	r7

    my_altimeter->myIMU.accelXRaw = spiDataTransfer(SPI0,dummy_Tx);
    1392:	21ff      	movs	r1, #255	; 0xff
    1394:	2000      	movs	r0, #0
    1396:	47b8      	blx	r7
    1398:	0023      	movs	r3, r4
    139a:	3360      	adds	r3, #96	; 0x60
    139c:	8018      	strh	r0, [r3, #0]
    139e:	0005      	movs	r5, r0
    my_altimeter->myIMU.accelXRaw = my_altimeter->myIMU.accelXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    13a0:	21ff      	movs	r1, #255	; 0xff
    13a2:	2000      	movs	r0, #0

// Accel data
    pinLow(cs_accel);
    dummy_rx = spiDataTransfer(SPI0, BMI055_X_ACC_LSB | BMI055_READ_REG);

    my_altimeter->myIMU.accelXRaw = spiDataTransfer(SPI0,dummy_Tx);
    13a4:	9303      	str	r3, [sp, #12]
    my_altimeter->myIMU.accelXRaw = my_altimeter->myIMU.accelXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    13a6:	47b8      	blx	r7
    13a8:	9b03      	ldr	r3, [sp, #12]
    13aa:	0200      	lsls	r0, r0, #8
    13ac:	4305      	orrs	r5, r0
    13ae:	801d      	strh	r5, [r3, #0]
    my_altimeter->myIMU.accelYRaw = spiDataTransfer(SPI0,dummy_Tx);
    13b0:	21ff      	movs	r1, #255	; 0xff
    13b2:	0026      	movs	r6, r4
    13b4:	2000      	movs	r0, #0
    13b6:	47b8      	blx	r7
    13b8:	3664      	adds	r6, #100	; 0x64
    13ba:	8030      	strh	r0, [r6, #0]
    13bc:	0005      	movs	r5, r0
    my_altimeter->myIMU.accelYRaw = my_altimeter->myIMU.accelYRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    13be:	21ff      	movs	r1, #255	; 0xff
    13c0:	2000      	movs	r0, #0
    13c2:	47b8      	blx	r7
    13c4:	0200      	lsls	r0, r0, #8
    13c6:	4305      	orrs	r5, r0
    13c8:	8035      	strh	r5, [r6, #0]
    my_altimeter->myIMU.accelZRaw = spiDataTransfer(SPI0,dummy_Tx);
    13ca:	21ff      	movs	r1, #255	; 0xff
    13cc:	2000      	movs	r0, #0
    13ce:	47b8      	blx	r7
    13d0:	466b      	mov	r3, sp
    13d2:	0025      	movs	r5, r4
    13d4:	9004      	str	r0, [sp, #16]
    13d6:	8a1b      	ldrh	r3, [r3, #16]
    13d8:	3568      	adds	r5, #104	; 0x68
    13da:	802b      	strh	r3, [r5, #0]
    my_altimeter->myIMU.accelZRaw = my_altimeter->myIMU.accelZRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    13dc:	21ff      	movs	r1, #255	; 0xff
    13de:	2000      	movs	r0, #0
    13e0:	47b8      	blx	r7
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    13e2:	2280      	movs	r2, #128	; 0x80
    13e4:	9b04      	ldr	r3, [sp, #16]
    13e6:	0200      	lsls	r0, r0, #8
    13e8:	4303      	orrs	r3, r0
    13ea:	802b      	strh	r3, [r5, #0]
    13ec:	4b68      	ldr	r3, [pc, #416]	; (1590 <sampleTick+0x388>)
    13ee:	00d2      	lsls	r2, r2, #3
    13f0:	601a      	str	r2, [r3, #0]

    pinHigh(cs_accel);

    bool negativeX = ( my_altimeter->myIMU.accelXRaw & (1<<15)) != 0;
    13f2:	9b03      	ldr	r3, [sp, #12]
    bool negativeY =  ( my_altimeter->myIMU.accelYRaw & (1<<15)) != 0;
    bool negativeZ =  ( my_altimeter->myIMU.accelZRaw & (1<<15)) != 0;

    my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXRaw;
    my_altimeter->myIMU.accelYint = my_altimeter->myIMU.accelYRaw;
    13f4:	3d02      	subs	r5, #2
    my_altimeter->myIMU.accelZRaw = spiDataTransfer(SPI0,dummy_Tx);
    my_altimeter->myIMU.accelZRaw = my_altimeter->myIMU.accelZRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);

    pinHigh(cs_accel);

    bool negativeX = ( my_altimeter->myIMU.accelXRaw & (1<<15)) != 0;
    13f6:	2000      	movs	r0, #0
    13f8:	5e18      	ldrsh	r0, [r3, r0]
    bool negativeY =  ( my_altimeter->myIMU.accelYRaw & (1<<15)) != 0;
    13fa:	2300      	movs	r3, #0
    13fc:	5ef2      	ldrsh	r2, [r6, r3]
    bool negativeZ =  ( my_altimeter->myIMU.accelZRaw & (1<<15)) != 0;
    13fe:	2102      	movs	r1, #2
    1400:	5e6b      	ldrsh	r3, [r5, r1]

    if (negativeX) {
        my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXint | ~((1 << 16) - 1);
        my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXint >> 4;
    } else {
        my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXint >> 4;
    1402:	0021      	movs	r1, r4
    1404:	1112      	asrs	r2, r2, #4
    1406:	1100      	asrs	r0, r0, #4
    1408:	3162      	adds	r1, #98	; 0x62
    140a:	111b      	asrs	r3, r3, #4
    bool negativeX = ( my_altimeter->myIMU.accelXRaw & (1<<15)) != 0;
    bool negativeY =  ( my_altimeter->myIMU.accelYRaw & (1<<15)) != 0;
    bool negativeZ =  ( my_altimeter->myIMU.accelZRaw & (1<<15)) != 0;

    my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXRaw;
    my_altimeter->myIMU.accelYint = my_altimeter->myIMU.accelYRaw;
    140c:	9503      	str	r5, [sp, #12]

    if (negativeX) {
        my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXint | ~((1 << 16) - 1);
        my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXint >> 4;
    } else {
        my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXint >> 4;
    140e:	8008      	strh	r0, [r1, #0]

    if (negativeY) {
        my_altimeter->myIMU.accelYint = my_altimeter->myIMU.accelYint | ~((1 << 16) - 1);
        my_altimeter->myIMU.accelYint = my_altimeter->myIMU.accelYint >> 4;
    } else {
        my_altimeter->myIMU.accelYint = my_altimeter->myIMU.accelYint >> 4;
    1410:	802a      	strh	r2, [r5, #0]

    if (negativeZ) {
        my_altimeter->myIMU.accelZint = my_altimeter->myIMU.accelZint | ~((1 << 16) - 1);
        my_altimeter->myIMU.accelZint = my_altimeter->myIMU.accelZint >> 4;
    } else {
        my_altimeter->myIMU.accelZint = my_altimeter->myIMU.accelZint >> 4;
    1412:	80f3      	strh	r3, [r6, #6]
    }

    my_altimeter->myIMU.accelX = my_altimeter->myIMU.accelXint * BMI055_ACCEL_16G_DIV;
    1414:	4b53      	ldr	r3, [pc, #332]	; (1564 <sampleTick+0x35c>)
    1416:	4798      	blx	r3
    1418:	23fe      	movs	r3, #254	; 0xfe
    141a:	4d54      	ldr	r5, [pc, #336]	; (156c <sampleTick+0x364>)
    141c:	2200      	movs	r2, #0
    141e:	059b      	lsls	r3, r3, #22
    1420:	47a8      	blx	r5
    1422:	4b54      	ldr	r3, [pc, #336]	; (1574 <sampleTick+0x36c>)
    1424:	4798      	blx	r3
    my_altimeter->myIMU.accelY = my_altimeter->myIMU.accelYint * BMI055_ACCEL_16G_DIV;
    1426:	9b03      	ldr	r3, [sp, #12]
        my_altimeter->myIMU.accelZint = my_altimeter->myIMU.accelZint >> 4;
    } else {
        my_altimeter->myIMU.accelZint = my_altimeter->myIMU.accelZint >> 4;
    }

    my_altimeter->myIMU.accelX = my_altimeter->myIMU.accelXint * BMI055_ACCEL_16G_DIV;
    1428:	6460      	str	r0, [r4, #68]	; 0x44
    my_altimeter->myIMU.accelY = my_altimeter->myIMU.accelYint * BMI055_ACCEL_16G_DIV;
    142a:	2000      	movs	r0, #0
    142c:	5e18      	ldrsh	r0, [r3, r0]
    142e:	4b4d      	ldr	r3, [pc, #308]	; (1564 <sampleTick+0x35c>)
    1430:	4798      	blx	r3
    1432:	23fe      	movs	r3, #254	; 0xfe
    1434:	2200      	movs	r2, #0
    1436:	059b      	lsls	r3, r3, #22
    1438:	47a8      	blx	r5
    143a:	4b4e      	ldr	r3, [pc, #312]	; (1574 <sampleTick+0x36c>)
    143c:	4798      	blx	r3
    143e:	64e0      	str	r0, [r4, #76]	; 0x4c
    my_altimeter->myIMU.accelZ = my_altimeter->myIMU.accelZint * BMI055_ACCEL_16G_DIV;
    1440:	2306      	movs	r3, #6
    1442:	5ef0      	ldrsh	r0, [r6, r3]
    1444:	4b47      	ldr	r3, [pc, #284]	; (1564 <sampleTick+0x35c>)
    1446:	4798      	blx	r3
    1448:	23fe      	movs	r3, #254	; 0xfe
    144a:	2200      	movs	r2, #0
    144c:	059b      	lsls	r3, r3, #22
    144e:	47a8      	blx	r5
    1450:	4b48      	ldr	r3, [pc, #288]	; (1574 <sampleTick+0x36c>)
    1452:	4798      	blx	r3
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    1454:	2280      	movs	r2, #128	; 0x80
    1456:	4b48      	ldr	r3, [pc, #288]	; (1578 <sampleTick+0x370>)
    1458:	00d2      	lsls	r2, r2, #3
    145a:	6520      	str	r0, [r4, #80]	; 0x50


    // Gyro data
    pinLow(cs_gyro);
    dummy_rx = spiDataTransfer(SPI0, BMI055_X_GYRO_LSB | BMI055_READ_REG);
    145c:	2182      	movs	r1, #130	; 0x82
    145e:	615a      	str	r2, [r3, #20]
    1460:	2000      	movs	r0, #0
    1462:	47b8      	blx	r7
    my_altimeter->myIMU.gyroXRaw = spiDataTransfer(SPI0,dummy_Tx);
    1464:	21ff      	movs	r1, #255	; 0xff
    1466:	2000      	movs	r0, #0
    1468:	47b8      	blx	r7
    146a:	0023      	movs	r3, r4
    146c:	336c      	adds	r3, #108	; 0x6c
    146e:	8018      	strh	r0, [r3, #0]
    1470:	0005      	movs	r5, r0
    my_altimeter->myIMU.gyroXRaw = my_altimeter->myIMU.gyroXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    1472:	21ff      	movs	r1, #255	; 0xff
    1474:	2000      	movs	r0, #0


    // Gyro data
    pinLow(cs_gyro);
    dummy_rx = spiDataTransfer(SPI0, BMI055_X_GYRO_LSB | BMI055_READ_REG);
    my_altimeter->myIMU.gyroXRaw = spiDataTransfer(SPI0,dummy_Tx);
    1476:	9303      	str	r3, [sp, #12]
    my_altimeter->myIMU.gyroXRaw = my_altimeter->myIMU.gyroXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    1478:	47b8      	blx	r7
    147a:	9b03      	ldr	r3, [sp, #12]
    147c:	0200      	lsls	r0, r0, #8
    147e:	4305      	orrs	r5, r0
    1480:	801d      	strh	r5, [r3, #0]
    my_altimeter->myIMU.gyroYRaw = spiDataTransfer(SPI0,dummy_Tx);
    1482:	21ff      	movs	r1, #255	; 0xff
    1484:	2000      	movs	r0, #0
    1486:	47b8      	blx	r7
    my_altimeter->myIMU.gyroYRaw = my_altimeter->myIMU.gyroYRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    1488:	21ff      	movs	r1, #255	; 0xff
    // Gyro data
    pinLow(cs_gyro);
    dummy_rx = spiDataTransfer(SPI0, BMI055_X_GYRO_LSB | BMI055_READ_REG);
    my_altimeter->myIMU.gyroXRaw = spiDataTransfer(SPI0,dummy_Tx);
    my_altimeter->myIMU.gyroXRaw = my_altimeter->myIMU.gyroXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    my_altimeter->myIMU.gyroYRaw = spiDataTransfer(SPI0,dummy_Tx);
    148a:	81b0      	strh	r0, [r6, #12]
    148c:	0005      	movs	r5, r0
    my_altimeter->myIMU.gyroYRaw = my_altimeter->myIMU.gyroYRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    148e:	2000      	movs	r0, #0
    1490:	47b8      	blx	r7
    1492:	0200      	lsls	r0, r0, #8
    1494:	4305      	orrs	r5, r0
    1496:	81b5      	strh	r5, [r6, #12]
    my_altimeter->myIMU.gyroZRaw = spiDataTransfer(SPI0,dummy_Tx);
    1498:	21ff      	movs	r1, #255	; 0xff
    149a:	2000      	movs	r0, #0
    149c:	47b8      	blx	r7
    149e:	466b      	mov	r3, sp
    14a0:	0025      	movs	r5, r4
    14a2:	9004      	str	r0, [sp, #16]
    14a4:	8a1b      	ldrh	r3, [r3, #16]
    14a6:	3574      	adds	r5, #116	; 0x74
    14a8:	802b      	strh	r3, [r5, #0]
    my_altimeter->myIMU.gyroZRaw = my_altimeter->myIMU.gyroZRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    14aa:	21ff      	movs	r1, #255	; 0xff
    14ac:	2000      	movs	r0, #0
    14ae:	47b8      	blx	r7
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    14b0:	2280      	movs	r2, #128	; 0x80
    14b2:	9f04      	ldr	r7, [sp, #16]
    14b4:	0200      	lsls	r0, r0, #8
    14b6:	4b30      	ldr	r3, [pc, #192]	; (1578 <sampleTick+0x370>)
    14b8:	4307      	orrs	r7, r0
    14ba:	00d2      	lsls	r2, r2, #3
    14bc:	802f      	strh	r7, [r5, #0]
    14be:	619a      	str	r2, [r3, #24]
    pinHigh(cs_gyro);

    bool negativeXgyro = (my_altimeter->myIMU.gyroXRaw & (1<<15)) != 0;
    14c0:	9b03      	ldr	r3, [sp, #12]
    14c2:	2000      	movs	r0, #0
    14c4:	5e18      	ldrsh	r0, [r3, r0]
    bool negativeYgyro = (my_altimeter->myIMU.gyroYRaw & (1<<15)) != 0;
    14c6:	230c      	movs	r3, #12
    14c8:	5ef2      	ldrsh	r2, [r6, r3]
    bool negativeZgyro = (my_altimeter->myIMU.gyroZRaw & (1<<15)) != 0;
    14ca:	2100      	movs	r1, #0
    14cc:	5e6b      	ldrsh	r3, [r5, r1]

    if (negativeXgyro) {
        my_altimeter->myIMU.gyroXint = my_altimeter->myIMU.gyroXint | ~((1 << 16) - 1);
        my_altimeter->myIMU.gyroXint = my_altimeter->myIMU.gyroXint >> 4;
    } else {
        my_altimeter->myIMU.gyroXint = my_altimeter->myIMU.gyroXint >> 4;
    14ce:	0021      	movs	r1, r4
    14d0:	1112      	asrs	r2, r2, #4
    14d2:	1100      	asrs	r0, r0, #4
    14d4:	316e      	adds	r1, #110	; 0x6e
    14d6:	111b      	asrs	r3, r3, #4
    14d8:	8008      	strh	r0, [r1, #0]

    if (negativeYgyro) {
        my_altimeter->myIMU.gyroYint = my_altimeter->myIMU.gyroYint | ~((1 << 16) - 1);
        my_altimeter->myIMU.gyroYint = my_altimeter->myIMU.gyroYint >> 4;
    } else {
        my_altimeter->myIMU.gyroYint = my_altimeter->myIMU.gyroYint >> 4;
    14da:	81f2      	strh	r2, [r6, #14]

    if (negativeZgyro) {
        my_altimeter->myIMU.gyroZint = my_altimeter->myIMU.gyroZint | ~((1 << 16) - 1);
        my_altimeter->myIMU.gyroZint = my_altimeter->myIMU.gyroZint >> 4;
    } else {
        my_altimeter->myIMU.gyroZint = my_altimeter->myIMU.gyroZint >> 4;
    14dc:	806b      	strh	r3, [r5, #2]
    }


    my_altimeter->myIMU.gyroX = my_altimeter->myIMU.gyroXint * BMI055_GYRO_2000DS_DIV;
    14de:	4b21      	ldr	r3, [pc, #132]	; (1564 <sampleTick+0x35c>)
    14e0:	4798      	blx	r3
    14e2:	23fe      	movs	r3, #254	; 0xfe
    14e4:	4f21      	ldr	r7, [pc, #132]	; (156c <sampleTick+0x364>)
    14e6:	2200      	movs	r2, #0
    14e8:	059b      	lsls	r3, r3, #22
    14ea:	47b8      	blx	r7
    14ec:	4b21      	ldr	r3, [pc, #132]	; (1574 <sampleTick+0x36c>)
    14ee:	4798      	blx	r3
    14f0:	6560      	str	r0, [r4, #84]	; 0x54
    my_altimeter->myIMU.gyroY = my_altimeter->myIMU.gyroYint * BMI055_GYRO_2000DS_DIV;
    14f2:	230e      	movs	r3, #14
    14f4:	5ef0      	ldrsh	r0, [r6, r3]
    14f6:	4b1b      	ldr	r3, [pc, #108]	; (1564 <sampleTick+0x35c>)
    14f8:	4798      	blx	r3
    14fa:	23fe      	movs	r3, #254	; 0xfe
    14fc:	2200      	movs	r2, #0
    14fe:	059b      	lsls	r3, r3, #22
    1500:	47b8      	blx	r7
    1502:	4b1c      	ldr	r3, [pc, #112]	; (1574 <sampleTick+0x36c>)
    1504:	4798      	blx	r3
    1506:	65a0      	str	r0, [r4, #88]	; 0x58
    my_altimeter->myIMU.gyroZ = my_altimeter->myIMU.gyroZint * BMI055_GYRO_2000DS_DIV;
    1508:	2302      	movs	r3, #2
    150a:	5ee8      	ldrsh	r0, [r5, r3]
    150c:	4b15      	ldr	r3, [pc, #84]	; (1564 <sampleTick+0x35c>)
    150e:	4798      	blx	r3
    1510:	23fe      	movs	r3, #254	; 0xfe
    1512:	2200      	movs	r2, #0
    1514:	059b      	lsls	r3, r3, #22
    1516:	47b8      	blx	r7
    1518:	4b16      	ldr	r3, [pc, #88]	; (1574 <sampleTick+0x36c>)
    151a:	4798      	blx	r3
    151c:	65e0      	str	r0, [r4, #92]	; 0x5c

    delay_us(800);
    151e:	20c8      	movs	r0, #200	; 0xc8
    1520:	4b17      	ldr	r3, [pc, #92]	; (1580 <sampleTick+0x378>)
    1522:	0080      	lsls	r0, r0, #2
    1524:	4798      	blx	r3
    my_altimeter->myBarometer.rawPressureData = readMS5803AdcResults();
    ConvertPressureTemperature(&my_altimeter->myBarometer);
    1526:	0025      	movs	r5, r4
    my_altimeter->myIMU.gyroX = my_altimeter->myIMU.gyroXint * BMI055_GYRO_2000DS_DIV;
    my_altimeter->myIMU.gyroY = my_altimeter->myIMU.gyroYint * BMI055_GYRO_2000DS_DIV;
    my_altimeter->myIMU.gyroZ = my_altimeter->myIMU.gyroZint * BMI055_GYRO_2000DS_DIV;

    delay_us(800);
    my_altimeter->myBarometer.rawPressureData = readMS5803AdcResults();
    1528:	4b16      	ldr	r3, [pc, #88]	; (1584 <sampleTick+0x37c>)
    152a:	4798      	blx	r3
    ConvertPressureTemperature(&my_altimeter->myBarometer);
    152c:	3508      	adds	r5, #8
    my_altimeter->myIMU.gyroX = my_altimeter->myIMU.gyroXint * BMI055_GYRO_2000DS_DIV;
    my_altimeter->myIMU.gyroY = my_altimeter->myIMU.gyroYint * BMI055_GYRO_2000DS_DIV;
    my_altimeter->myIMU.gyroZ = my_altimeter->myIMU.gyroZint * BMI055_GYRO_2000DS_DIV;

    delay_us(800);
    my_altimeter->myBarometer.rawPressureData = readMS5803AdcResults();
    152e:	6160      	str	r0, [r4, #20]
    ConvertPressureTemperature(&my_altimeter->myBarometer);
    1530:	4b18      	ldr	r3, [pc, #96]	; (1594 <sampleTick+0x38c>)
    1532:	0028      	movs	r0, r5
    1534:	4798      	blx	r3
    pascalToCent(&my_altimeter->myBarometer);
    1536:	0028      	movs	r0, r5
    1538:	4b17      	ldr	r3, [pc, #92]	; (1598 <sampleTick+0x390>)
    153a:	4798      	blx	r3
    my_altimeter->myBarometer.heightFeet = 0.03281 * my_altimeter->myBarometer.heightCm;
    153c:	4b17      	ldr	r3, [pc, #92]	; (159c <sampleTick+0x394>)
    153e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    1540:	4798      	blx	r3
    1542:	4a17      	ldr	r2, [pc, #92]	; (15a0 <sampleTick+0x398>)
    1544:	4b17      	ldr	r3, [pc, #92]	; (15a4 <sampleTick+0x39c>)
    1546:	4d09      	ldr	r5, [pc, #36]	; (156c <sampleTick+0x364>)
    1548:	47a8      	blx	r5
    154a:	4b0a      	ldr	r3, [pc, #40]	; (1574 <sampleTick+0x36c>)
    154c:	4798      	blx	r3
    154e:	62e0      	str	r0, [r4, #44]	; 0x2c


}
    1550:	b007      	add	sp, #28
    1552:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1554:	00000f71 	.word	0x00000f71
    1558:	000028d0 	.word	0x000028d0
    155c:	00000c15 	.word	0x00000c15
    1560:	fffff0c4 	.word	0xfffff0c4
    1564:	00002299 	.word	0x00002299
    1568:	02de00d2 	.word	0x02de00d2
    156c:	00001da5 	.word	0x00001da5
    1570:	bf8f8a09 	.word	0xbf8f8a09
    1574:	00002435 	.word	0x00002435
    1578:	41004400 	.word	0x41004400
    157c:	00000c7d 	.word	0x00000c7d
    1580:	00000ef5 	.word	0x00000ef5
    1584:	000003a9 	.word	0x000003a9
    1588:	41004494 	.word	0x41004494
    158c:	000016b5 	.word	0x000016b5
    1590:	41004498 	.word	0x41004498
    1594:	0000045d 	.word	0x0000045d
    1598:	00000549 	.word	0x00000549
    159c:	0000231d 	.word	0x0000231d
    15a0:	e9f6a93f 	.word	0xe9f6a93f
    15a4:	3fa0cc78 	.word	0x3fa0cc78

000015a8 <sercomClockEnable>:
#include <util.h>

void sercomClockEnable(SercomId id, uint32_t clock_channel, u8_t divider) {
    15a8:	b570      	push	{r4, r5, r6, lr}
    15aa:	0004      	movs	r4, r0
    // prevent this clock write from changing any other clocks
    PM->APBCMASK.reg |= 1 << (PM_APBCMASK_SERCOM0_Pos + id);
    15ac:	2301      	movs	r3, #1
    15ae:	1ca6      	adds	r6, r4, #2
    15b0:	40b3      	lsls	r3, r6
    15b2:	480d      	ldr	r0, [pc, #52]	; (15e8 <sercomClockEnable+0x40>)
#include <util.h>

void sercomClockEnable(SercomId id, uint32_t clock_channel, u8_t divider) {
    15b4:	000d      	movs	r5, r1
    // prevent this clock write from changing any other clocks
    PM->APBCMASK.reg |= 1 << (PM_APBCMASK_SERCOM0_Pos + id);
    15b6:	6a01      	ldr	r1, [r0, #32]
    15b8:	430b      	orrs	r3, r1
    15ba:	6203      	str	r3, [r0, #32]


    if (clock_channel != 0) {
    15bc:	2d00      	cmp	r5, #0
    15be:	d003      	beq.n	15c8 <sercomClockEnable+0x20>
        // clock generators 3-8 have 8 division factor bits - DIV[7:0]
        gclkEnable(clock_channel, GCLK_SOURCE_DFLL48M, divider);
    15c0:	2107      	movs	r1, #7
    15c2:	0028      	movs	r0, r5
    15c4:	4b09      	ldr	r3, [pc, #36]	; (15ec <sercomClockEnable+0x44>)
    15c6:	4798      	blx	r3
    }


    // attach clock
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
    15c8:	22f0      	movs	r2, #240	; 0xf0
    15ca:	2080      	movs	r0, #128	; 0x80
    15cc:	0229      	lsls	r1, r5, #8
    15ce:	0112      	lsls	r2, r2, #4
    15d0:	4011      	ands	r1, r2
    15d2:	01c0      	lsls	r0, r0, #7
    15d4:	4301      	orrs	r1, r0
    15d6:	0020      	movs	r0, r4
    15d8:	3014      	adds	r0, #20
    15da:	223f      	movs	r2, #63	; 0x3f
    15dc:	0003      	movs	r3, r0
    15de:	4013      	ands	r3, r2
    15e0:	4319      	orrs	r1, r3
    15e2:	4b03      	ldr	r3, [pc, #12]	; (15f0 <sercomClockEnable+0x48>)
    15e4:	8059      	strh	r1, [r3, #2]
                        GCLK_CLKCTRL_GEN(clock_channel) |
                        GCLK_CLKCTRL_ID(SERCOM0_GCLK_ID_CORE + id);
}
    15e6:	bd70      	pop	{r4, r5, r6, pc}
    15e8:	40000400 	.word	0x40000400
    15ec:	00000ea5 	.word	0x00000ea5
    15f0:	40000c00 	.word	0x40000c00

000015f4 <sercomReset>:
//sample.c
void sampleTick(Altimeter *my_altimeter);

//dma.c
inline static Sercom* sercom(SercomId id) {
    return (Sercom*) (0x42000800U + id * 1024);
    15f4:	4b04      	ldr	r3, [pc, #16]	; (1608 <sercomReset+0x14>)
    15f6:	0280      	lsls	r0, r0, #10
    15f8:	18c0      	adds	r0, r0, r3


void sercomReset(SercomId id) {
    sercom(id)->SPI.CTRLA.reg = SERCOM_SPI_CTRLA_SWRST;
    15fa:	2301      	movs	r3, #1
    15fc:	6003      	str	r3, [r0, #0]
    while(sercom(id)->SPI.CTRLA.reg & SERCOM_SPI_CTRLA_SWRST);
    15fe:	6802      	ldr	r2, [r0, #0]
    1600:	421a      	tst	r2, r3
    1602:	d1fc      	bne.n	15fe <sercomReset+0xa>
}
    1604:	4770      	bx	lr
    1606:	46c0      	nop			; (mov r8, r8)
    1608:	42000800 	.word	0x42000800

0000160c <sercomSpiMasterInit>:
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
}


void sercomSpiMasterInit(SercomId id, u32_t dipo, u32_t dopo, bool cpol, bool cpha, u8_t baud) {
    160c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    160e:	0004      	movs	r4, r0
    1610:	9300      	str	r3, [sp, #0]
    1612:	ab08      	add	r3, sp, #32
    1614:	781b      	ldrb	r3, [r3, #0]
    1616:	000e      	movs	r6, r1
    1618:	9301      	str	r3, [sp, #4]
    161a:	ab09      	add	r3, sp, #36	; 0x24
    161c:	781f      	ldrb	r7, [r3, #0]

    sercomReset(id);
    161e:	4b12      	ldr	r3, [pc, #72]	; (1668 <sercomSpiMasterInit+0x5c>)
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
}


void sercomSpiMasterInit(SercomId id, u32_t dipo, u32_t dopo, bool cpol, bool cpha, u8_t baud) {
    1620:	0015      	movs	r5, r2

    sercomReset(id);
    1622:	4798      	blx	r3
    1624:	4b11      	ldr	r3, [pc, #68]	; (166c <sercomSpiMasterInit+0x60>)
    1626:	02a4      	lsls	r4, r4, #10
    1628:	18e4      	adds	r4, r4, r3

    sercom(id)->SPI.CTRLB.reg
        = SERCOM_SPI_CTRLB_RXEN;
    162a:	2380      	movs	r3, #128	; 0x80
    162c:	029b      	lsls	r3, r3, #10
    162e:	6063      	str	r3, [r4, #4]
    1630:	23c0      	movs	r3, #192	; 0xc0
    sercom(id)->SPI.BAUD.reg = baud;

    sercom(id)->SPI.CTRLA.reg
        = SERCOM_SPI_CTRLA_ENABLE
          | SERCOM_SPI_CTRLA_MODE_SPI_MASTER
          | SERCOM_SPI_CTRLA_DIPO(dipo)
    1632:	21c0      	movs	r1, #192	; 0xc0
    1634:	042d      	lsls	r5, r5, #16
    1636:	029b      	lsls	r3, r3, #10
    1638:	402b      	ands	r3, r5
    163a:	250e      	movs	r5, #14
    163c:	0536      	lsls	r6, r6, #20
    163e:	0389      	lsls	r1, r1, #14
    1640:	4031      	ands	r1, r6
          | SERCOM_SPI_CTRLA_DOPO(dopo)
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
    1642:	9e00      	ldr	r6, [sp, #0]
    1644:	431d      	orrs	r5, r3
    1646:	1e73      	subs	r3, r6, #1
    1648:	419e      	sbcs	r6, r3
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
    164a:	9b01      	ldr	r3, [sp, #4]
    sercom(id)->SPI.CTRLA.reg
        = SERCOM_SPI_CTRLA_ENABLE
          | SERCOM_SPI_CTRLA_MODE_SPI_MASTER
          | SERCOM_SPI_CTRLA_DIPO(dipo)
          | SERCOM_SPI_CTRLA_DOPO(dopo)
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
    164c:	0772      	lsls	r2, r6, #29
    164e:	430d      	orrs	r5, r1
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
    1650:	432a      	orrs	r2, r5
    1652:	1e59      	subs	r1, r3, #1
    1654:	418b      	sbcs	r3, r1
    1656:	0016      	movs	r6, r2
    1658:	071b      	lsls	r3, r3, #28
    165a:	431e      	orrs	r6, r3
    sercomReset(id);

    sercom(id)->SPI.CTRLB.reg
        = SERCOM_SPI_CTRLB_RXEN;

    sercom(id)->SPI.BAUD.reg = baud;
    165c:	7327      	strb	r7, [r4, #12]

    sercom(id)->SPI.CTRLA.reg
        = SERCOM_SPI_CTRLA_ENABLE
    165e:	6026      	str	r6, [r4, #0]
        };
    }
}

static inline void SPI_sync(SercomId id) {
    while  (sercom(id)->SPI.SYNCBUSY.bit.CTRLB);
    1660:	69e3      	ldr	r3, [r4, #28]
    1662:	075b      	lsls	r3, r3, #29
    1664:	d4fc      	bmi.n	1660 <sercomSpiMasterInit+0x54>
          | SERCOM_SPI_CTRLA_DOPO(dopo)
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);

    SPI_sync(id);
}
    1666:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    1668:	000015f5 	.word	0x000015f5
    166c:	42000800 	.word	0x42000800

00001670 <sercomUartInit>:




void sercomUartInit(SercomId id, u32_t rxpo, u32_t txpo, u32_t baud) {
    1670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1672:	0007      	movs	r7, r0
    1674:	001e      	movs	r6, r3
    sercomReset(id);
    1676:	4b0c      	ldr	r3, [pc, #48]	; (16a8 <sercomUartInit+0x38>)
}




void sercomUartInit(SercomId id, u32_t rxpo, u32_t txpo, u32_t baud) {
    1678:	000d      	movs	r5, r1
    167a:	0014      	movs	r4, r2
    sercomReset(id);
    167c:	4798      	blx	r3
//sample.c
void sampleTick(Altimeter *my_altimeter);

//dma.c
inline static Sercom* sercom(SercomId id) {
    return (Sercom*) (0x42000800U + id * 1024);
    167e:	4b0b      	ldr	r3, [pc, #44]	; (16ac <sercomUartInit+0x3c>)
    1680:	02b8      	lsls	r0, r7, #10
    1682:	18c0      	adds	r0, r0, r3
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    1684:	2304      	movs	r3, #4
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    1686:	22c0      	movs	r2, #192	; 0xc0



void sercomUartInit(SercomId id, u32_t rxpo, u32_t txpo, u32_t baud) {
    sercomReset(id);
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    1688:	6003      	str	r3, [r0, #0]
    sercom(id)->USART.BAUD.reg = baud;
    sercom(id)->USART.CTRLB.reg
        = SERCOM_USART_CTRLB_RXEN
    168a:	23c0      	movs	r3, #192	; 0xc0
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    168c:	0529      	lsls	r1, r5, #20
    168e:	0392      	lsls	r2, r2, #14
    1690:	4011      	ands	r1, r2
    1692:	4a07      	ldr	r2, [pc, #28]	; (16b0 <sercomUartInit+0x40>)


void sercomUartInit(SercomId id, u32_t rxpo, u32_t txpo, u32_t baud) {
    sercomReset(id);
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    sercom(id)->USART.BAUD.reg = baud;
    1694:	b2b6      	uxth	r6, r6
    sercom(id)->USART.CTRLB.reg
        = SERCOM_USART_CTRLB_RXEN
    1696:	029b      	lsls	r3, r3, #10
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    1698:	0424      	lsls	r4, r4, #16


void sercomUartInit(SercomId id, u32_t rxpo, u32_t txpo, u32_t baud) {
    sercomReset(id);
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    sercom(id)->USART.BAUD.reg = baud;
    169a:	8186      	strh	r6, [r0, #12]
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    169c:	4311      	orrs	r1, r2
void sercomUartInit(SercomId id, u32_t rxpo, u32_t txpo, u32_t baud) {
    sercomReset(id);
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    sercom(id)->USART.BAUD.reg = baud;
    sercom(id)->USART.CTRLB.reg
        = SERCOM_USART_CTRLB_RXEN
    169e:	6043      	str	r3, [r0, #4]
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    16a0:	4023      	ands	r3, r4
    16a2:	430b      	orrs	r3, r1
    sercom(id)->USART.BAUD.reg = baud;
    sercom(id)->USART.CTRLB.reg
        = SERCOM_USART_CTRLB_RXEN
          | SERCOM_USART_CTRLB_TXEN;
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
    16a4:	6003      	str	r3, [r0, #0]
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
}
    16a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    16a8:	000015f5 	.word	0x000015f5
    16ac:	42000800 	.word	0x42000800
    16b0:	40000006 	.word	0x40000006

000016b4 <spiDataTransfer>:
    16b4:	4b04      	ldr	r3, [pc, #16]	; (16c8 <spiDataTransfer+0x14>)
    16b6:	0280      	lsls	r0, r0, #10
    16b8:	18c0      	adds	r0, r0, r3

u8_t spiDataTransfer(SercomId id, u8_t data) {
    sercom(id)->SPI.DATA.reg = data;
    16ba:	6281      	str	r1, [r0, #40]	; 0x28
    while(sercom(id)->SPI.INTFLAG.bit.RXC == 0);
    16bc:	7e03      	ldrb	r3, [r0, #24]
    16be:	075b      	lsls	r3, r3, #29
    16c0:	d5fc      	bpl.n	16bc <spiDataTransfer+0x8>
    return sercom(id)->SPI.DATA.reg;
    16c2:	6a80      	ldr	r0, [r0, #40]	; 0x28
    16c4:	b2c0      	uxtb	r0, r0
}
    16c6:	4770      	bx	lr
    16c8:	42000800 	.word	0x42000800

000016cc <usartDataOut>:
    16cc:	4b04      	ldr	r3, [pc, #16]	; (16e0 <usartDataOut+0x14>)
    16ce:	0280      	lsls	r0, r0, #10
    16d0:	18c0      	adds	r0, r0, r3
    while(sercom(id)->SPI.INTFLAG.bit.DRE == 0);
    return sercom(id)->SPI.DATA.reg;
}

void usartDataOut(SercomId id, u8_t data) {
    sercom(id)->USART.DATA.reg = data;
    16d2:	b289      	uxth	r1, r1
    16d4:	8501      	strh	r1, [r0, #40]	; 0x28
    while(sercom(id)->USART.INTFLAG.bit.DRE == 0);
    16d6:	7e03      	ldrb	r3, [r0, #24]
    16d8:	07db      	lsls	r3, r3, #31
    16da:	d5fc      	bpl.n	16d6 <usartDataOut+0xa>
}
    16dc:	4770      	bx	lr
    16de:	46c0      	nop			; (mov r8, r8)
    16e0:	42000800 	.word	0x42000800

000016e4 <usartDataIn>:
    16e4:	4b02      	ldr	r3, [pc, #8]	; (16f0 <usartDataIn+0xc>)
    16e6:	0280      	lsls	r0, r0, #10
    16e8:	18c0      	adds	r0, r0, r3

u8_t usartDataIn(SercomId id) {
    return sercom(id)->USART.DATA.reg;
    16ea:	8d00      	ldrh	r0, [r0, #40]	; 0x28
    16ec:	b2c0      	uxtb	r0, r0
    16ee:	4770      	bx	lr
    16f0:	42000800 	.word	0x42000800

000016f4 <__aeabi_lmul>:
    16f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    16f6:	464f      	mov	r7, r9
    16f8:	4646      	mov	r6, r8
    16fa:	b4c0      	push	{r6, r7}
    16fc:	0416      	lsls	r6, r2, #16
    16fe:	0c36      	lsrs	r6, r6, #16
    1700:	4699      	mov	r9, r3
    1702:	0033      	movs	r3, r6
    1704:	0405      	lsls	r5, r0, #16
    1706:	0c2c      	lsrs	r4, r5, #16
    1708:	0c07      	lsrs	r7, r0, #16
    170a:	0c15      	lsrs	r5, r2, #16
    170c:	4363      	muls	r3, r4
    170e:	437e      	muls	r6, r7
    1710:	436f      	muls	r7, r5
    1712:	4365      	muls	r5, r4
    1714:	0c1c      	lsrs	r4, r3, #16
    1716:	19ad      	adds	r5, r5, r6
    1718:	1964      	adds	r4, r4, r5
    171a:	469c      	mov	ip, r3
    171c:	42a6      	cmp	r6, r4
    171e:	d903      	bls.n	1728 <__aeabi_lmul+0x34>
    1720:	2380      	movs	r3, #128	; 0x80
    1722:	025b      	lsls	r3, r3, #9
    1724:	4698      	mov	r8, r3
    1726:	4447      	add	r7, r8
    1728:	4663      	mov	r3, ip
    172a:	0c25      	lsrs	r5, r4, #16
    172c:	19ef      	adds	r7, r5, r7
    172e:	041d      	lsls	r5, r3, #16
    1730:	464b      	mov	r3, r9
    1732:	434a      	muls	r2, r1
    1734:	4343      	muls	r3, r0
    1736:	0c2d      	lsrs	r5, r5, #16
    1738:	0424      	lsls	r4, r4, #16
    173a:	1964      	adds	r4, r4, r5
    173c:	1899      	adds	r1, r3, r2
    173e:	19c9      	adds	r1, r1, r7
    1740:	0020      	movs	r0, r4
    1742:	bc0c      	pop	{r2, r3}
    1744:	4690      	mov	r8, r2
    1746:	4699      	mov	r9, r3
    1748:	bdf0      	pop	{r4, r5, r6, r7, pc}
    174a:	46c0      	nop			; (mov r8, r8)

0000174c <__aeabi_dadd>:
    174c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    174e:	4656      	mov	r6, sl
    1750:	465f      	mov	r7, fp
    1752:	464d      	mov	r5, r9
    1754:	4644      	mov	r4, r8
    1756:	b4f0      	push	{r4, r5, r6, r7}
    1758:	000f      	movs	r7, r1
    175a:	0ffd      	lsrs	r5, r7, #31
    175c:	46aa      	mov	sl, r5
    175e:	0309      	lsls	r1, r1, #12
    1760:	007c      	lsls	r4, r7, #1
    1762:	002e      	movs	r6, r5
    1764:	005f      	lsls	r7, r3, #1
    1766:	0f45      	lsrs	r5, r0, #29
    1768:	0a49      	lsrs	r1, r1, #9
    176a:	0d7f      	lsrs	r7, r7, #21
    176c:	4329      	orrs	r1, r5
    176e:	00c5      	lsls	r5, r0, #3
    1770:	0318      	lsls	r0, r3, #12
    1772:	46bc      	mov	ip, r7
    1774:	0a40      	lsrs	r0, r0, #9
    1776:	0f57      	lsrs	r7, r2, #29
    1778:	0d64      	lsrs	r4, r4, #21
    177a:	0fdb      	lsrs	r3, r3, #31
    177c:	4338      	orrs	r0, r7
    177e:	00d2      	lsls	r2, r2, #3
    1780:	459a      	cmp	sl, r3
    1782:	d100      	bne.n	1786 <__aeabi_dadd+0x3a>
    1784:	e0aa      	b.n	18dc <__aeabi_dadd+0x190>
    1786:	4666      	mov	r6, ip
    1788:	1ba6      	subs	r6, r4, r6
    178a:	2e00      	cmp	r6, #0
    178c:	dc00      	bgt.n	1790 <__aeabi_dadd+0x44>
    178e:	e0ff      	b.n	1990 <__aeabi_dadd+0x244>
    1790:	4663      	mov	r3, ip
    1792:	2b00      	cmp	r3, #0
    1794:	d139      	bne.n	180a <__aeabi_dadd+0xbe>
    1796:	0003      	movs	r3, r0
    1798:	4313      	orrs	r3, r2
    179a:	d000      	beq.n	179e <__aeabi_dadd+0x52>
    179c:	e0d9      	b.n	1952 <__aeabi_dadd+0x206>
    179e:	076b      	lsls	r3, r5, #29
    17a0:	d009      	beq.n	17b6 <__aeabi_dadd+0x6a>
    17a2:	230f      	movs	r3, #15
    17a4:	402b      	ands	r3, r5
    17a6:	2b04      	cmp	r3, #4
    17a8:	d005      	beq.n	17b6 <__aeabi_dadd+0x6a>
    17aa:	1d2b      	adds	r3, r5, #4
    17ac:	42ab      	cmp	r3, r5
    17ae:	41ad      	sbcs	r5, r5
    17b0:	426d      	negs	r5, r5
    17b2:	1949      	adds	r1, r1, r5
    17b4:	001d      	movs	r5, r3
    17b6:	020b      	lsls	r3, r1, #8
    17b8:	d400      	bmi.n	17bc <__aeabi_dadd+0x70>
    17ba:	e082      	b.n	18c2 <__aeabi_dadd+0x176>
    17bc:	4bca      	ldr	r3, [pc, #808]	; (1ae8 <__aeabi_dadd+0x39c>)
    17be:	3401      	adds	r4, #1
    17c0:	429c      	cmp	r4, r3
    17c2:	d100      	bne.n	17c6 <__aeabi_dadd+0x7a>
    17c4:	e0fe      	b.n	19c4 <__aeabi_dadd+0x278>
    17c6:	000a      	movs	r2, r1
    17c8:	4656      	mov	r6, sl
    17ca:	4bc8      	ldr	r3, [pc, #800]	; (1aec <__aeabi_dadd+0x3a0>)
    17cc:	08ed      	lsrs	r5, r5, #3
    17ce:	401a      	ands	r2, r3
    17d0:	0750      	lsls	r0, r2, #29
    17d2:	0564      	lsls	r4, r4, #21
    17d4:	0252      	lsls	r2, r2, #9
    17d6:	4305      	orrs	r5, r0
    17d8:	0b12      	lsrs	r2, r2, #12
    17da:	0d64      	lsrs	r4, r4, #21
    17dc:	2100      	movs	r1, #0
    17de:	0312      	lsls	r2, r2, #12
    17e0:	0d0b      	lsrs	r3, r1, #20
    17e2:	051b      	lsls	r3, r3, #20
    17e4:	0564      	lsls	r4, r4, #21
    17e6:	0b12      	lsrs	r2, r2, #12
    17e8:	431a      	orrs	r2, r3
    17ea:	0863      	lsrs	r3, r4, #1
    17ec:	4cc0      	ldr	r4, [pc, #768]	; (1af0 <__aeabi_dadd+0x3a4>)
    17ee:	07f6      	lsls	r6, r6, #31
    17f0:	4014      	ands	r4, r2
    17f2:	431c      	orrs	r4, r3
    17f4:	0064      	lsls	r4, r4, #1
    17f6:	0864      	lsrs	r4, r4, #1
    17f8:	4334      	orrs	r4, r6
    17fa:	0028      	movs	r0, r5
    17fc:	0021      	movs	r1, r4
    17fe:	bc3c      	pop	{r2, r3, r4, r5}
    1800:	4690      	mov	r8, r2
    1802:	4699      	mov	r9, r3
    1804:	46a2      	mov	sl, r4
    1806:	46ab      	mov	fp, r5
    1808:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    180a:	4bb7      	ldr	r3, [pc, #732]	; (1ae8 <__aeabi_dadd+0x39c>)
    180c:	429c      	cmp	r4, r3
    180e:	d0c6      	beq.n	179e <__aeabi_dadd+0x52>
    1810:	2380      	movs	r3, #128	; 0x80
    1812:	041b      	lsls	r3, r3, #16
    1814:	4318      	orrs	r0, r3
    1816:	2e38      	cmp	r6, #56	; 0x38
    1818:	dd00      	ble.n	181c <__aeabi_dadd+0xd0>
    181a:	e0eb      	b.n	19f4 <__aeabi_dadd+0x2a8>
    181c:	2e1f      	cmp	r6, #31
    181e:	dd00      	ble.n	1822 <__aeabi_dadd+0xd6>
    1820:	e11e      	b.n	1a60 <__aeabi_dadd+0x314>
    1822:	2320      	movs	r3, #32
    1824:	1b9b      	subs	r3, r3, r6
    1826:	469c      	mov	ip, r3
    1828:	0003      	movs	r3, r0
    182a:	4667      	mov	r7, ip
    182c:	40bb      	lsls	r3, r7
    182e:	4698      	mov	r8, r3
    1830:	0013      	movs	r3, r2
    1832:	4647      	mov	r7, r8
    1834:	40f3      	lsrs	r3, r6
    1836:	433b      	orrs	r3, r7
    1838:	4667      	mov	r7, ip
    183a:	40ba      	lsls	r2, r7
    183c:	1e57      	subs	r7, r2, #1
    183e:	41ba      	sbcs	r2, r7
    1840:	4313      	orrs	r3, r2
    1842:	0002      	movs	r2, r0
    1844:	40f2      	lsrs	r2, r6
    1846:	1aeb      	subs	r3, r5, r3
    1848:	429d      	cmp	r5, r3
    184a:	41b6      	sbcs	r6, r6
    184c:	001d      	movs	r5, r3
    184e:	1a8a      	subs	r2, r1, r2
    1850:	4276      	negs	r6, r6
    1852:	1b91      	subs	r1, r2, r6
    1854:	020b      	lsls	r3, r1, #8
    1856:	d531      	bpl.n	18bc <__aeabi_dadd+0x170>
    1858:	024a      	lsls	r2, r1, #9
    185a:	0a56      	lsrs	r6, r2, #9
    185c:	2e00      	cmp	r6, #0
    185e:	d100      	bne.n	1862 <__aeabi_dadd+0x116>
    1860:	e0b4      	b.n	19cc <__aeabi_dadd+0x280>
    1862:	0030      	movs	r0, r6
    1864:	f000 fe72 	bl	254c <__clzsi2>
    1868:	0003      	movs	r3, r0
    186a:	3b08      	subs	r3, #8
    186c:	2b1f      	cmp	r3, #31
    186e:	dd00      	ble.n	1872 <__aeabi_dadd+0x126>
    1870:	e0b5      	b.n	19de <__aeabi_dadd+0x292>
    1872:	2220      	movs	r2, #32
    1874:	0029      	movs	r1, r5
    1876:	1ad2      	subs	r2, r2, r3
    1878:	40d1      	lsrs	r1, r2
    187a:	409e      	lsls	r6, r3
    187c:	000a      	movs	r2, r1
    187e:	409d      	lsls	r5, r3
    1880:	4332      	orrs	r2, r6
    1882:	429c      	cmp	r4, r3
    1884:	dd00      	ble.n	1888 <__aeabi_dadd+0x13c>
    1886:	e0b1      	b.n	19ec <__aeabi_dadd+0x2a0>
    1888:	1b1c      	subs	r4, r3, r4
    188a:	1c63      	adds	r3, r4, #1
    188c:	2b1f      	cmp	r3, #31
    188e:	dd00      	ble.n	1892 <__aeabi_dadd+0x146>
    1890:	e0d5      	b.n	1a3e <__aeabi_dadd+0x2f2>
    1892:	2120      	movs	r1, #32
    1894:	0014      	movs	r4, r2
    1896:	0028      	movs	r0, r5
    1898:	1ac9      	subs	r1, r1, r3
    189a:	408c      	lsls	r4, r1
    189c:	40d8      	lsrs	r0, r3
    189e:	408d      	lsls	r5, r1
    18a0:	4304      	orrs	r4, r0
    18a2:	40da      	lsrs	r2, r3
    18a4:	1e68      	subs	r0, r5, #1
    18a6:	4185      	sbcs	r5, r0
    18a8:	0011      	movs	r1, r2
    18aa:	4325      	orrs	r5, r4
    18ac:	2400      	movs	r4, #0
    18ae:	e776      	b.n	179e <__aeabi_dadd+0x52>
    18b0:	4641      	mov	r1, r8
    18b2:	4331      	orrs	r1, r6
    18b4:	d100      	bne.n	18b8 <__aeabi_dadd+0x16c>
    18b6:	e234      	b.n	1d22 <__aeabi_dadd+0x5d6>
    18b8:	0031      	movs	r1, r6
    18ba:	4645      	mov	r5, r8
    18bc:	076b      	lsls	r3, r5, #29
    18be:	d000      	beq.n	18c2 <__aeabi_dadd+0x176>
    18c0:	e76f      	b.n	17a2 <__aeabi_dadd+0x56>
    18c2:	4656      	mov	r6, sl
    18c4:	0748      	lsls	r0, r1, #29
    18c6:	08ed      	lsrs	r5, r5, #3
    18c8:	08c9      	lsrs	r1, r1, #3
    18ca:	4305      	orrs	r5, r0
    18cc:	4b86      	ldr	r3, [pc, #536]	; (1ae8 <__aeabi_dadd+0x39c>)
    18ce:	429c      	cmp	r4, r3
    18d0:	d035      	beq.n	193e <__aeabi_dadd+0x1f2>
    18d2:	030a      	lsls	r2, r1, #12
    18d4:	0564      	lsls	r4, r4, #21
    18d6:	0b12      	lsrs	r2, r2, #12
    18d8:	0d64      	lsrs	r4, r4, #21
    18da:	e77f      	b.n	17dc <__aeabi_dadd+0x90>
    18dc:	4663      	mov	r3, ip
    18de:	1ae3      	subs	r3, r4, r3
    18e0:	469b      	mov	fp, r3
    18e2:	2b00      	cmp	r3, #0
    18e4:	dc00      	bgt.n	18e8 <__aeabi_dadd+0x19c>
    18e6:	e08b      	b.n	1a00 <__aeabi_dadd+0x2b4>
    18e8:	4667      	mov	r7, ip
    18ea:	2f00      	cmp	r7, #0
    18ec:	d03c      	beq.n	1968 <__aeabi_dadd+0x21c>
    18ee:	4f7e      	ldr	r7, [pc, #504]	; (1ae8 <__aeabi_dadd+0x39c>)
    18f0:	42bc      	cmp	r4, r7
    18f2:	d100      	bne.n	18f6 <__aeabi_dadd+0x1aa>
    18f4:	e753      	b.n	179e <__aeabi_dadd+0x52>
    18f6:	2780      	movs	r7, #128	; 0x80
    18f8:	043f      	lsls	r7, r7, #16
    18fa:	4338      	orrs	r0, r7
    18fc:	465b      	mov	r3, fp
    18fe:	2b38      	cmp	r3, #56	; 0x38
    1900:	dc00      	bgt.n	1904 <__aeabi_dadd+0x1b8>
    1902:	e0f7      	b.n	1af4 <__aeabi_dadd+0x3a8>
    1904:	4302      	orrs	r2, r0
    1906:	1e50      	subs	r0, r2, #1
    1908:	4182      	sbcs	r2, r0
    190a:	2000      	movs	r0, #0
    190c:	b2d2      	uxtb	r2, r2
    190e:	1953      	adds	r3, r2, r5
    1910:	1842      	adds	r2, r0, r1
    1912:	42ab      	cmp	r3, r5
    1914:	4189      	sbcs	r1, r1
    1916:	001d      	movs	r5, r3
    1918:	4249      	negs	r1, r1
    191a:	1889      	adds	r1, r1, r2
    191c:	020b      	lsls	r3, r1, #8
    191e:	d5cd      	bpl.n	18bc <__aeabi_dadd+0x170>
    1920:	4b71      	ldr	r3, [pc, #452]	; (1ae8 <__aeabi_dadd+0x39c>)
    1922:	3401      	adds	r4, #1
    1924:	429c      	cmp	r4, r3
    1926:	d100      	bne.n	192a <__aeabi_dadd+0x1de>
    1928:	e13d      	b.n	1ba6 <__aeabi_dadd+0x45a>
    192a:	2001      	movs	r0, #1
    192c:	4a6f      	ldr	r2, [pc, #444]	; (1aec <__aeabi_dadd+0x3a0>)
    192e:	086b      	lsrs	r3, r5, #1
    1930:	400a      	ands	r2, r1
    1932:	4028      	ands	r0, r5
    1934:	4318      	orrs	r0, r3
    1936:	07d5      	lsls	r5, r2, #31
    1938:	4305      	orrs	r5, r0
    193a:	0851      	lsrs	r1, r2, #1
    193c:	e72f      	b.n	179e <__aeabi_dadd+0x52>
    193e:	002b      	movs	r3, r5
    1940:	430b      	orrs	r3, r1
    1942:	d100      	bne.n	1946 <__aeabi_dadd+0x1fa>
    1944:	e1cb      	b.n	1cde <__aeabi_dadd+0x592>
    1946:	2380      	movs	r3, #128	; 0x80
    1948:	031b      	lsls	r3, r3, #12
    194a:	430b      	orrs	r3, r1
    194c:	031a      	lsls	r2, r3, #12
    194e:	0b12      	lsrs	r2, r2, #12
    1950:	e744      	b.n	17dc <__aeabi_dadd+0x90>
    1952:	3e01      	subs	r6, #1
    1954:	2e00      	cmp	r6, #0
    1956:	d16d      	bne.n	1a34 <__aeabi_dadd+0x2e8>
    1958:	1aae      	subs	r6, r5, r2
    195a:	42b5      	cmp	r5, r6
    195c:	419b      	sbcs	r3, r3
    195e:	1a09      	subs	r1, r1, r0
    1960:	425b      	negs	r3, r3
    1962:	1ac9      	subs	r1, r1, r3
    1964:	0035      	movs	r5, r6
    1966:	e775      	b.n	1854 <__aeabi_dadd+0x108>
    1968:	0007      	movs	r7, r0
    196a:	4317      	orrs	r7, r2
    196c:	d100      	bne.n	1970 <__aeabi_dadd+0x224>
    196e:	e716      	b.n	179e <__aeabi_dadd+0x52>
    1970:	2301      	movs	r3, #1
    1972:	425b      	negs	r3, r3
    1974:	469c      	mov	ip, r3
    1976:	44e3      	add	fp, ip
    1978:	465b      	mov	r3, fp
    197a:	2b00      	cmp	r3, #0
    197c:	d000      	beq.n	1980 <__aeabi_dadd+0x234>
    197e:	e0e0      	b.n	1b42 <__aeabi_dadd+0x3f6>
    1980:	18aa      	adds	r2, r5, r2
    1982:	42aa      	cmp	r2, r5
    1984:	419b      	sbcs	r3, r3
    1986:	1809      	adds	r1, r1, r0
    1988:	425b      	negs	r3, r3
    198a:	1859      	adds	r1, r3, r1
    198c:	0015      	movs	r5, r2
    198e:	e7c5      	b.n	191c <__aeabi_dadd+0x1d0>
    1990:	2e00      	cmp	r6, #0
    1992:	d175      	bne.n	1a80 <__aeabi_dadd+0x334>
    1994:	1c66      	adds	r6, r4, #1
    1996:	0576      	lsls	r6, r6, #21
    1998:	0d76      	lsrs	r6, r6, #21
    199a:	2e01      	cmp	r6, #1
    199c:	dc00      	bgt.n	19a0 <__aeabi_dadd+0x254>
    199e:	e0f3      	b.n	1b88 <__aeabi_dadd+0x43c>
    19a0:	1aae      	subs	r6, r5, r2
    19a2:	46b0      	mov	r8, r6
    19a4:	4545      	cmp	r5, r8
    19a6:	41bf      	sbcs	r7, r7
    19a8:	1a0e      	subs	r6, r1, r0
    19aa:	427f      	negs	r7, r7
    19ac:	1bf6      	subs	r6, r6, r7
    19ae:	0237      	lsls	r7, r6, #8
    19b0:	d400      	bmi.n	19b4 <__aeabi_dadd+0x268>
    19b2:	e08f      	b.n	1ad4 <__aeabi_dadd+0x388>
    19b4:	1b55      	subs	r5, r2, r5
    19b6:	42aa      	cmp	r2, r5
    19b8:	41b6      	sbcs	r6, r6
    19ba:	1a41      	subs	r1, r0, r1
    19bc:	4276      	negs	r6, r6
    19be:	1b8e      	subs	r6, r1, r6
    19c0:	469a      	mov	sl, r3
    19c2:	e74b      	b.n	185c <__aeabi_dadd+0x110>
    19c4:	4656      	mov	r6, sl
    19c6:	2200      	movs	r2, #0
    19c8:	2500      	movs	r5, #0
    19ca:	e707      	b.n	17dc <__aeabi_dadd+0x90>
    19cc:	0028      	movs	r0, r5
    19ce:	f000 fdbd 	bl	254c <__clzsi2>
    19d2:	3020      	adds	r0, #32
    19d4:	0003      	movs	r3, r0
    19d6:	3b08      	subs	r3, #8
    19d8:	2b1f      	cmp	r3, #31
    19da:	dc00      	bgt.n	19de <__aeabi_dadd+0x292>
    19dc:	e749      	b.n	1872 <__aeabi_dadd+0x126>
    19de:	002a      	movs	r2, r5
    19e0:	3828      	subs	r0, #40	; 0x28
    19e2:	4082      	lsls	r2, r0
    19e4:	2500      	movs	r5, #0
    19e6:	429c      	cmp	r4, r3
    19e8:	dc00      	bgt.n	19ec <__aeabi_dadd+0x2a0>
    19ea:	e74d      	b.n	1888 <__aeabi_dadd+0x13c>
    19ec:	493f      	ldr	r1, [pc, #252]	; (1aec <__aeabi_dadd+0x3a0>)
    19ee:	1ae4      	subs	r4, r4, r3
    19f0:	4011      	ands	r1, r2
    19f2:	e6d4      	b.n	179e <__aeabi_dadd+0x52>
    19f4:	4302      	orrs	r2, r0
    19f6:	1e50      	subs	r0, r2, #1
    19f8:	4182      	sbcs	r2, r0
    19fa:	b2d3      	uxtb	r3, r2
    19fc:	2200      	movs	r2, #0
    19fe:	e722      	b.n	1846 <__aeabi_dadd+0xfa>
    1a00:	2b00      	cmp	r3, #0
    1a02:	d000      	beq.n	1a06 <__aeabi_dadd+0x2ba>
    1a04:	e0f3      	b.n	1bee <__aeabi_dadd+0x4a2>
    1a06:	1c63      	adds	r3, r4, #1
    1a08:	469c      	mov	ip, r3
    1a0a:	055b      	lsls	r3, r3, #21
    1a0c:	0d5b      	lsrs	r3, r3, #21
    1a0e:	2b01      	cmp	r3, #1
    1a10:	dc00      	bgt.n	1a14 <__aeabi_dadd+0x2c8>
    1a12:	e09f      	b.n	1b54 <__aeabi_dadd+0x408>
    1a14:	4b34      	ldr	r3, [pc, #208]	; (1ae8 <__aeabi_dadd+0x39c>)
    1a16:	459c      	cmp	ip, r3
    1a18:	d100      	bne.n	1a1c <__aeabi_dadd+0x2d0>
    1a1a:	e0c3      	b.n	1ba4 <__aeabi_dadd+0x458>
    1a1c:	18aa      	adds	r2, r5, r2
    1a1e:	1809      	adds	r1, r1, r0
    1a20:	42aa      	cmp	r2, r5
    1a22:	4180      	sbcs	r0, r0
    1a24:	4240      	negs	r0, r0
    1a26:	1841      	adds	r1, r0, r1
    1a28:	07cd      	lsls	r5, r1, #31
    1a2a:	0852      	lsrs	r2, r2, #1
    1a2c:	4315      	orrs	r5, r2
    1a2e:	0849      	lsrs	r1, r1, #1
    1a30:	4664      	mov	r4, ip
    1a32:	e6b4      	b.n	179e <__aeabi_dadd+0x52>
    1a34:	4b2c      	ldr	r3, [pc, #176]	; (1ae8 <__aeabi_dadd+0x39c>)
    1a36:	429c      	cmp	r4, r3
    1a38:	d000      	beq.n	1a3c <__aeabi_dadd+0x2f0>
    1a3a:	e6ec      	b.n	1816 <__aeabi_dadd+0xca>
    1a3c:	e6af      	b.n	179e <__aeabi_dadd+0x52>
    1a3e:	0011      	movs	r1, r2
    1a40:	3c1f      	subs	r4, #31
    1a42:	40e1      	lsrs	r1, r4
    1a44:	000c      	movs	r4, r1
    1a46:	2b20      	cmp	r3, #32
    1a48:	d100      	bne.n	1a4c <__aeabi_dadd+0x300>
    1a4a:	e07f      	b.n	1b4c <__aeabi_dadd+0x400>
    1a4c:	2140      	movs	r1, #64	; 0x40
    1a4e:	1acb      	subs	r3, r1, r3
    1a50:	409a      	lsls	r2, r3
    1a52:	4315      	orrs	r5, r2
    1a54:	1e6a      	subs	r2, r5, #1
    1a56:	4195      	sbcs	r5, r2
    1a58:	2100      	movs	r1, #0
    1a5a:	4325      	orrs	r5, r4
    1a5c:	2400      	movs	r4, #0
    1a5e:	e72d      	b.n	18bc <__aeabi_dadd+0x170>
    1a60:	0033      	movs	r3, r6
    1a62:	0007      	movs	r7, r0
    1a64:	3b20      	subs	r3, #32
    1a66:	40df      	lsrs	r7, r3
    1a68:	003b      	movs	r3, r7
    1a6a:	2e20      	cmp	r6, #32
    1a6c:	d070      	beq.n	1b50 <__aeabi_dadd+0x404>
    1a6e:	2740      	movs	r7, #64	; 0x40
    1a70:	1bbe      	subs	r6, r7, r6
    1a72:	40b0      	lsls	r0, r6
    1a74:	4302      	orrs	r2, r0
    1a76:	1e50      	subs	r0, r2, #1
    1a78:	4182      	sbcs	r2, r0
    1a7a:	4313      	orrs	r3, r2
    1a7c:	2200      	movs	r2, #0
    1a7e:	e6e2      	b.n	1846 <__aeabi_dadd+0xfa>
    1a80:	2c00      	cmp	r4, #0
    1a82:	d04f      	beq.n	1b24 <__aeabi_dadd+0x3d8>
    1a84:	4c18      	ldr	r4, [pc, #96]	; (1ae8 <__aeabi_dadd+0x39c>)
    1a86:	45a4      	cmp	ip, r4
    1a88:	d100      	bne.n	1a8c <__aeabi_dadd+0x340>
    1a8a:	e0ab      	b.n	1be4 <__aeabi_dadd+0x498>
    1a8c:	2480      	movs	r4, #128	; 0x80
    1a8e:	0424      	lsls	r4, r4, #16
    1a90:	4276      	negs	r6, r6
    1a92:	4321      	orrs	r1, r4
    1a94:	2e38      	cmp	r6, #56	; 0x38
    1a96:	dd00      	ble.n	1a9a <__aeabi_dadd+0x34e>
    1a98:	e0df      	b.n	1c5a <__aeabi_dadd+0x50e>
    1a9a:	2e1f      	cmp	r6, #31
    1a9c:	dd00      	ble.n	1aa0 <__aeabi_dadd+0x354>
    1a9e:	e143      	b.n	1d28 <__aeabi_dadd+0x5dc>
    1aa0:	2720      	movs	r7, #32
    1aa2:	1bbc      	subs	r4, r7, r6
    1aa4:	46a1      	mov	r9, r4
    1aa6:	000c      	movs	r4, r1
    1aa8:	464f      	mov	r7, r9
    1aaa:	40bc      	lsls	r4, r7
    1aac:	46a0      	mov	r8, r4
    1aae:	002c      	movs	r4, r5
    1ab0:	4647      	mov	r7, r8
    1ab2:	40f4      	lsrs	r4, r6
    1ab4:	433c      	orrs	r4, r7
    1ab6:	464f      	mov	r7, r9
    1ab8:	40bd      	lsls	r5, r7
    1aba:	1e6f      	subs	r7, r5, #1
    1abc:	41bd      	sbcs	r5, r7
    1abe:	40f1      	lsrs	r1, r6
    1ac0:	432c      	orrs	r4, r5
    1ac2:	1b15      	subs	r5, r2, r4
    1ac4:	42aa      	cmp	r2, r5
    1ac6:	4192      	sbcs	r2, r2
    1ac8:	1a41      	subs	r1, r0, r1
    1aca:	4252      	negs	r2, r2
    1acc:	1a89      	subs	r1, r1, r2
    1ace:	4664      	mov	r4, ip
    1ad0:	469a      	mov	sl, r3
    1ad2:	e6bf      	b.n	1854 <__aeabi_dadd+0x108>
    1ad4:	4641      	mov	r1, r8
    1ad6:	4645      	mov	r5, r8
    1ad8:	4331      	orrs	r1, r6
    1ada:	d000      	beq.n	1ade <__aeabi_dadd+0x392>
    1adc:	e6be      	b.n	185c <__aeabi_dadd+0x110>
    1ade:	2600      	movs	r6, #0
    1ae0:	2400      	movs	r4, #0
    1ae2:	2500      	movs	r5, #0
    1ae4:	e6f2      	b.n	18cc <__aeabi_dadd+0x180>
    1ae6:	46c0      	nop			; (mov r8, r8)
    1ae8:	000007ff 	.word	0x000007ff
    1aec:	ff7fffff 	.word	0xff7fffff
    1af0:	800fffff 	.word	0x800fffff
    1af4:	2b1f      	cmp	r3, #31
    1af6:	dc59      	bgt.n	1bac <__aeabi_dadd+0x460>
    1af8:	2720      	movs	r7, #32
    1afa:	1aff      	subs	r7, r7, r3
    1afc:	46bc      	mov	ip, r7
    1afe:	0007      	movs	r7, r0
    1b00:	4663      	mov	r3, ip
    1b02:	409f      	lsls	r7, r3
    1b04:	465b      	mov	r3, fp
    1b06:	46b9      	mov	r9, r7
    1b08:	0017      	movs	r7, r2
    1b0a:	40df      	lsrs	r7, r3
    1b0c:	46b8      	mov	r8, r7
    1b0e:	464f      	mov	r7, r9
    1b10:	4643      	mov	r3, r8
    1b12:	431f      	orrs	r7, r3
    1b14:	4663      	mov	r3, ip
    1b16:	409a      	lsls	r2, r3
    1b18:	1e53      	subs	r3, r2, #1
    1b1a:	419a      	sbcs	r2, r3
    1b1c:	465b      	mov	r3, fp
    1b1e:	433a      	orrs	r2, r7
    1b20:	40d8      	lsrs	r0, r3
    1b22:	e6f4      	b.n	190e <__aeabi_dadd+0x1c2>
    1b24:	000c      	movs	r4, r1
    1b26:	432c      	orrs	r4, r5
    1b28:	d05c      	beq.n	1be4 <__aeabi_dadd+0x498>
    1b2a:	43f6      	mvns	r6, r6
    1b2c:	2e00      	cmp	r6, #0
    1b2e:	d155      	bne.n	1bdc <__aeabi_dadd+0x490>
    1b30:	1b55      	subs	r5, r2, r5
    1b32:	42aa      	cmp	r2, r5
    1b34:	41a4      	sbcs	r4, r4
    1b36:	1a41      	subs	r1, r0, r1
    1b38:	4264      	negs	r4, r4
    1b3a:	1b09      	subs	r1, r1, r4
    1b3c:	469a      	mov	sl, r3
    1b3e:	4664      	mov	r4, ip
    1b40:	e688      	b.n	1854 <__aeabi_dadd+0x108>
    1b42:	4f96      	ldr	r7, [pc, #600]	; (1d9c <__aeabi_dadd+0x650>)
    1b44:	42bc      	cmp	r4, r7
    1b46:	d000      	beq.n	1b4a <__aeabi_dadd+0x3fe>
    1b48:	e6d8      	b.n	18fc <__aeabi_dadd+0x1b0>
    1b4a:	e628      	b.n	179e <__aeabi_dadd+0x52>
    1b4c:	2200      	movs	r2, #0
    1b4e:	e780      	b.n	1a52 <__aeabi_dadd+0x306>
    1b50:	2000      	movs	r0, #0
    1b52:	e78f      	b.n	1a74 <__aeabi_dadd+0x328>
    1b54:	000b      	movs	r3, r1
    1b56:	432b      	orrs	r3, r5
    1b58:	2c00      	cmp	r4, #0
    1b5a:	d000      	beq.n	1b5e <__aeabi_dadd+0x412>
    1b5c:	e0c2      	b.n	1ce4 <__aeabi_dadd+0x598>
    1b5e:	2b00      	cmp	r3, #0
    1b60:	d100      	bne.n	1b64 <__aeabi_dadd+0x418>
    1b62:	e101      	b.n	1d68 <__aeabi_dadd+0x61c>
    1b64:	0003      	movs	r3, r0
    1b66:	4313      	orrs	r3, r2
    1b68:	d100      	bne.n	1b6c <__aeabi_dadd+0x420>
    1b6a:	e618      	b.n	179e <__aeabi_dadd+0x52>
    1b6c:	18ab      	adds	r3, r5, r2
    1b6e:	42ab      	cmp	r3, r5
    1b70:	41b6      	sbcs	r6, r6
    1b72:	1809      	adds	r1, r1, r0
    1b74:	4276      	negs	r6, r6
    1b76:	1871      	adds	r1, r6, r1
    1b78:	020a      	lsls	r2, r1, #8
    1b7a:	d400      	bmi.n	1b7e <__aeabi_dadd+0x432>
    1b7c:	e109      	b.n	1d92 <__aeabi_dadd+0x646>
    1b7e:	4a88      	ldr	r2, [pc, #544]	; (1da0 <__aeabi_dadd+0x654>)
    1b80:	001d      	movs	r5, r3
    1b82:	4011      	ands	r1, r2
    1b84:	4664      	mov	r4, ip
    1b86:	e60a      	b.n	179e <__aeabi_dadd+0x52>
    1b88:	2c00      	cmp	r4, #0
    1b8a:	d15b      	bne.n	1c44 <__aeabi_dadd+0x4f8>
    1b8c:	000e      	movs	r6, r1
    1b8e:	432e      	orrs	r6, r5
    1b90:	d000      	beq.n	1b94 <__aeabi_dadd+0x448>
    1b92:	e08a      	b.n	1caa <__aeabi_dadd+0x55e>
    1b94:	0001      	movs	r1, r0
    1b96:	4311      	orrs	r1, r2
    1b98:	d100      	bne.n	1b9c <__aeabi_dadd+0x450>
    1b9a:	e0c2      	b.n	1d22 <__aeabi_dadd+0x5d6>
    1b9c:	0001      	movs	r1, r0
    1b9e:	0015      	movs	r5, r2
    1ba0:	469a      	mov	sl, r3
    1ba2:	e5fc      	b.n	179e <__aeabi_dadd+0x52>
    1ba4:	4664      	mov	r4, ip
    1ba6:	2100      	movs	r1, #0
    1ba8:	2500      	movs	r5, #0
    1baa:	e68f      	b.n	18cc <__aeabi_dadd+0x180>
    1bac:	2320      	movs	r3, #32
    1bae:	425b      	negs	r3, r3
    1bb0:	469c      	mov	ip, r3
    1bb2:	44dc      	add	ip, fp
    1bb4:	4663      	mov	r3, ip
    1bb6:	0007      	movs	r7, r0
    1bb8:	40df      	lsrs	r7, r3
    1bba:	465b      	mov	r3, fp
    1bbc:	46bc      	mov	ip, r7
    1bbe:	2b20      	cmp	r3, #32
    1bc0:	d100      	bne.n	1bc4 <__aeabi_dadd+0x478>
    1bc2:	e0ac      	b.n	1d1e <__aeabi_dadd+0x5d2>
    1bc4:	2340      	movs	r3, #64	; 0x40
    1bc6:	465f      	mov	r7, fp
    1bc8:	1bdb      	subs	r3, r3, r7
    1bca:	4098      	lsls	r0, r3
    1bcc:	4302      	orrs	r2, r0
    1bce:	1e50      	subs	r0, r2, #1
    1bd0:	4182      	sbcs	r2, r0
    1bd2:	4663      	mov	r3, ip
    1bd4:	4313      	orrs	r3, r2
    1bd6:	001a      	movs	r2, r3
    1bd8:	2000      	movs	r0, #0
    1bda:	e698      	b.n	190e <__aeabi_dadd+0x1c2>
    1bdc:	4c6f      	ldr	r4, [pc, #444]	; (1d9c <__aeabi_dadd+0x650>)
    1bde:	45a4      	cmp	ip, r4
    1be0:	d000      	beq.n	1be4 <__aeabi_dadd+0x498>
    1be2:	e757      	b.n	1a94 <__aeabi_dadd+0x348>
    1be4:	0001      	movs	r1, r0
    1be6:	0015      	movs	r5, r2
    1be8:	4664      	mov	r4, ip
    1bea:	469a      	mov	sl, r3
    1bec:	e5d7      	b.n	179e <__aeabi_dadd+0x52>
    1bee:	2c00      	cmp	r4, #0
    1bf0:	d139      	bne.n	1c66 <__aeabi_dadd+0x51a>
    1bf2:	000c      	movs	r4, r1
    1bf4:	432c      	orrs	r4, r5
    1bf6:	d06e      	beq.n	1cd6 <__aeabi_dadd+0x58a>
    1bf8:	43db      	mvns	r3, r3
    1bfa:	2b00      	cmp	r3, #0
    1bfc:	d01a      	beq.n	1c34 <__aeabi_dadd+0x4e8>
    1bfe:	4c67      	ldr	r4, [pc, #412]	; (1d9c <__aeabi_dadd+0x650>)
    1c00:	45a4      	cmp	ip, r4
    1c02:	d068      	beq.n	1cd6 <__aeabi_dadd+0x58a>
    1c04:	2b38      	cmp	r3, #56	; 0x38
    1c06:	dd00      	ble.n	1c0a <__aeabi_dadd+0x4be>
    1c08:	e0a4      	b.n	1d54 <__aeabi_dadd+0x608>
    1c0a:	2b1f      	cmp	r3, #31
    1c0c:	dd00      	ble.n	1c10 <__aeabi_dadd+0x4c4>
    1c0e:	e0ae      	b.n	1d6e <__aeabi_dadd+0x622>
    1c10:	2420      	movs	r4, #32
    1c12:	000f      	movs	r7, r1
    1c14:	1ae4      	subs	r4, r4, r3
    1c16:	40a7      	lsls	r7, r4
    1c18:	46b9      	mov	r9, r7
    1c1a:	002f      	movs	r7, r5
    1c1c:	40df      	lsrs	r7, r3
    1c1e:	46b8      	mov	r8, r7
    1c20:	46a3      	mov	fp, r4
    1c22:	464f      	mov	r7, r9
    1c24:	4644      	mov	r4, r8
    1c26:	4327      	orrs	r7, r4
    1c28:	465c      	mov	r4, fp
    1c2a:	40a5      	lsls	r5, r4
    1c2c:	1e6c      	subs	r4, r5, #1
    1c2e:	41a5      	sbcs	r5, r4
    1c30:	40d9      	lsrs	r1, r3
    1c32:	433d      	orrs	r5, r7
    1c34:	18ad      	adds	r5, r5, r2
    1c36:	4295      	cmp	r5, r2
    1c38:	419b      	sbcs	r3, r3
    1c3a:	1809      	adds	r1, r1, r0
    1c3c:	425b      	negs	r3, r3
    1c3e:	1859      	adds	r1, r3, r1
    1c40:	4664      	mov	r4, ip
    1c42:	e66b      	b.n	191c <__aeabi_dadd+0x1d0>
    1c44:	000c      	movs	r4, r1
    1c46:	432c      	orrs	r4, r5
    1c48:	d115      	bne.n	1c76 <__aeabi_dadd+0x52a>
    1c4a:	0001      	movs	r1, r0
    1c4c:	4311      	orrs	r1, r2
    1c4e:	d07b      	beq.n	1d48 <__aeabi_dadd+0x5fc>
    1c50:	0001      	movs	r1, r0
    1c52:	0015      	movs	r5, r2
    1c54:	469a      	mov	sl, r3
    1c56:	4c51      	ldr	r4, [pc, #324]	; (1d9c <__aeabi_dadd+0x650>)
    1c58:	e5a1      	b.n	179e <__aeabi_dadd+0x52>
    1c5a:	430d      	orrs	r5, r1
    1c5c:	1e69      	subs	r1, r5, #1
    1c5e:	418d      	sbcs	r5, r1
    1c60:	2100      	movs	r1, #0
    1c62:	b2ec      	uxtb	r4, r5
    1c64:	e72d      	b.n	1ac2 <__aeabi_dadd+0x376>
    1c66:	4c4d      	ldr	r4, [pc, #308]	; (1d9c <__aeabi_dadd+0x650>)
    1c68:	45a4      	cmp	ip, r4
    1c6a:	d034      	beq.n	1cd6 <__aeabi_dadd+0x58a>
    1c6c:	2480      	movs	r4, #128	; 0x80
    1c6e:	0424      	lsls	r4, r4, #16
    1c70:	425b      	negs	r3, r3
    1c72:	4321      	orrs	r1, r4
    1c74:	e7c6      	b.n	1c04 <__aeabi_dadd+0x4b8>
    1c76:	0004      	movs	r4, r0
    1c78:	4314      	orrs	r4, r2
    1c7a:	d04e      	beq.n	1d1a <__aeabi_dadd+0x5ce>
    1c7c:	08ed      	lsrs	r5, r5, #3
    1c7e:	074c      	lsls	r4, r1, #29
    1c80:	432c      	orrs	r4, r5
    1c82:	2580      	movs	r5, #128	; 0x80
    1c84:	08c9      	lsrs	r1, r1, #3
    1c86:	032d      	lsls	r5, r5, #12
    1c88:	4229      	tst	r1, r5
    1c8a:	d008      	beq.n	1c9e <__aeabi_dadd+0x552>
    1c8c:	08c6      	lsrs	r6, r0, #3
    1c8e:	422e      	tst	r6, r5
    1c90:	d105      	bne.n	1c9e <__aeabi_dadd+0x552>
    1c92:	08d2      	lsrs	r2, r2, #3
    1c94:	0741      	lsls	r1, r0, #29
    1c96:	4311      	orrs	r1, r2
    1c98:	000c      	movs	r4, r1
    1c9a:	469a      	mov	sl, r3
    1c9c:	0031      	movs	r1, r6
    1c9e:	0f62      	lsrs	r2, r4, #29
    1ca0:	00c9      	lsls	r1, r1, #3
    1ca2:	00e5      	lsls	r5, r4, #3
    1ca4:	4311      	orrs	r1, r2
    1ca6:	4c3d      	ldr	r4, [pc, #244]	; (1d9c <__aeabi_dadd+0x650>)
    1ca8:	e579      	b.n	179e <__aeabi_dadd+0x52>
    1caa:	0006      	movs	r6, r0
    1cac:	4316      	orrs	r6, r2
    1cae:	d100      	bne.n	1cb2 <__aeabi_dadd+0x566>
    1cb0:	e575      	b.n	179e <__aeabi_dadd+0x52>
    1cb2:	1aae      	subs	r6, r5, r2
    1cb4:	46b0      	mov	r8, r6
    1cb6:	4545      	cmp	r5, r8
    1cb8:	41bf      	sbcs	r7, r7
    1cba:	1a0e      	subs	r6, r1, r0
    1cbc:	427f      	negs	r7, r7
    1cbe:	1bf6      	subs	r6, r6, r7
    1cc0:	0237      	lsls	r7, r6, #8
    1cc2:	d400      	bmi.n	1cc6 <__aeabi_dadd+0x57a>
    1cc4:	e5f4      	b.n	18b0 <__aeabi_dadd+0x164>
    1cc6:	1b55      	subs	r5, r2, r5
    1cc8:	42aa      	cmp	r2, r5
    1cca:	41b6      	sbcs	r6, r6
    1ccc:	1a41      	subs	r1, r0, r1
    1cce:	4276      	negs	r6, r6
    1cd0:	1b89      	subs	r1, r1, r6
    1cd2:	469a      	mov	sl, r3
    1cd4:	e563      	b.n	179e <__aeabi_dadd+0x52>
    1cd6:	0001      	movs	r1, r0
    1cd8:	0015      	movs	r5, r2
    1cda:	4664      	mov	r4, ip
    1cdc:	e55f      	b.n	179e <__aeabi_dadd+0x52>
    1cde:	2200      	movs	r2, #0
    1ce0:	2500      	movs	r5, #0
    1ce2:	e57b      	b.n	17dc <__aeabi_dadd+0x90>
    1ce4:	2b00      	cmp	r3, #0
    1ce6:	d03b      	beq.n	1d60 <__aeabi_dadd+0x614>
    1ce8:	0003      	movs	r3, r0
    1cea:	4313      	orrs	r3, r2
    1cec:	d015      	beq.n	1d1a <__aeabi_dadd+0x5ce>
    1cee:	08ed      	lsrs	r5, r5, #3
    1cf0:	074b      	lsls	r3, r1, #29
    1cf2:	432b      	orrs	r3, r5
    1cf4:	2580      	movs	r5, #128	; 0x80
    1cf6:	08c9      	lsrs	r1, r1, #3
    1cf8:	032d      	lsls	r5, r5, #12
    1cfa:	4229      	tst	r1, r5
    1cfc:	d007      	beq.n	1d0e <__aeabi_dadd+0x5c2>
    1cfe:	08c4      	lsrs	r4, r0, #3
    1d00:	422c      	tst	r4, r5
    1d02:	d104      	bne.n	1d0e <__aeabi_dadd+0x5c2>
    1d04:	0741      	lsls	r1, r0, #29
    1d06:	000b      	movs	r3, r1
    1d08:	0021      	movs	r1, r4
    1d0a:	08d2      	lsrs	r2, r2, #3
    1d0c:	4313      	orrs	r3, r2
    1d0e:	00c9      	lsls	r1, r1, #3
    1d10:	0f5a      	lsrs	r2, r3, #29
    1d12:	4311      	orrs	r1, r2
    1d14:	00dd      	lsls	r5, r3, #3
    1d16:	4c21      	ldr	r4, [pc, #132]	; (1d9c <__aeabi_dadd+0x650>)
    1d18:	e541      	b.n	179e <__aeabi_dadd+0x52>
    1d1a:	4c20      	ldr	r4, [pc, #128]	; (1d9c <__aeabi_dadd+0x650>)
    1d1c:	e53f      	b.n	179e <__aeabi_dadd+0x52>
    1d1e:	2000      	movs	r0, #0
    1d20:	e754      	b.n	1bcc <__aeabi_dadd+0x480>
    1d22:	2600      	movs	r6, #0
    1d24:	2500      	movs	r5, #0
    1d26:	e5d1      	b.n	18cc <__aeabi_dadd+0x180>
    1d28:	0034      	movs	r4, r6
    1d2a:	000f      	movs	r7, r1
    1d2c:	3c20      	subs	r4, #32
    1d2e:	40e7      	lsrs	r7, r4
    1d30:	003c      	movs	r4, r7
    1d32:	2e20      	cmp	r6, #32
    1d34:	d02b      	beq.n	1d8e <__aeabi_dadd+0x642>
    1d36:	2740      	movs	r7, #64	; 0x40
    1d38:	1bbe      	subs	r6, r7, r6
    1d3a:	40b1      	lsls	r1, r6
    1d3c:	430d      	orrs	r5, r1
    1d3e:	1e69      	subs	r1, r5, #1
    1d40:	418d      	sbcs	r5, r1
    1d42:	2100      	movs	r1, #0
    1d44:	432c      	orrs	r4, r5
    1d46:	e6bc      	b.n	1ac2 <__aeabi_dadd+0x376>
    1d48:	2180      	movs	r1, #128	; 0x80
    1d4a:	2600      	movs	r6, #0
    1d4c:	0309      	lsls	r1, r1, #12
    1d4e:	4c13      	ldr	r4, [pc, #76]	; (1d9c <__aeabi_dadd+0x650>)
    1d50:	2500      	movs	r5, #0
    1d52:	e5bb      	b.n	18cc <__aeabi_dadd+0x180>
    1d54:	430d      	orrs	r5, r1
    1d56:	1e69      	subs	r1, r5, #1
    1d58:	418d      	sbcs	r5, r1
    1d5a:	2100      	movs	r1, #0
    1d5c:	b2ed      	uxtb	r5, r5
    1d5e:	e769      	b.n	1c34 <__aeabi_dadd+0x4e8>
    1d60:	0001      	movs	r1, r0
    1d62:	0015      	movs	r5, r2
    1d64:	4c0d      	ldr	r4, [pc, #52]	; (1d9c <__aeabi_dadd+0x650>)
    1d66:	e51a      	b.n	179e <__aeabi_dadd+0x52>
    1d68:	0001      	movs	r1, r0
    1d6a:	0015      	movs	r5, r2
    1d6c:	e517      	b.n	179e <__aeabi_dadd+0x52>
    1d6e:	001c      	movs	r4, r3
    1d70:	000f      	movs	r7, r1
    1d72:	3c20      	subs	r4, #32
    1d74:	40e7      	lsrs	r7, r4
    1d76:	003c      	movs	r4, r7
    1d78:	2b20      	cmp	r3, #32
    1d7a:	d00c      	beq.n	1d96 <__aeabi_dadd+0x64a>
    1d7c:	2740      	movs	r7, #64	; 0x40
    1d7e:	1afb      	subs	r3, r7, r3
    1d80:	4099      	lsls	r1, r3
    1d82:	430d      	orrs	r5, r1
    1d84:	1e69      	subs	r1, r5, #1
    1d86:	418d      	sbcs	r5, r1
    1d88:	2100      	movs	r1, #0
    1d8a:	4325      	orrs	r5, r4
    1d8c:	e752      	b.n	1c34 <__aeabi_dadd+0x4e8>
    1d8e:	2100      	movs	r1, #0
    1d90:	e7d4      	b.n	1d3c <__aeabi_dadd+0x5f0>
    1d92:	001d      	movs	r5, r3
    1d94:	e592      	b.n	18bc <__aeabi_dadd+0x170>
    1d96:	2100      	movs	r1, #0
    1d98:	e7f3      	b.n	1d82 <__aeabi_dadd+0x636>
    1d9a:	46c0      	nop			; (mov r8, r8)
    1d9c:	000007ff 	.word	0x000007ff
    1da0:	ff7fffff 	.word	0xff7fffff

00001da4 <__aeabi_dmul>:
    1da4:	b5f0      	push	{r4, r5, r6, r7, lr}
    1da6:	465f      	mov	r7, fp
    1da8:	4656      	mov	r6, sl
    1daa:	464d      	mov	r5, r9
    1dac:	4644      	mov	r4, r8
    1dae:	b4f0      	push	{r4, r5, r6, r7}
    1db0:	030d      	lsls	r5, r1, #12
    1db2:	4699      	mov	r9, r3
    1db4:	004e      	lsls	r6, r1, #1
    1db6:	0b2b      	lsrs	r3, r5, #12
    1db8:	b087      	sub	sp, #28
    1dba:	0007      	movs	r7, r0
    1dbc:	4692      	mov	sl, r2
    1dbe:	4680      	mov	r8, r0
    1dc0:	469b      	mov	fp, r3
    1dc2:	0d76      	lsrs	r6, r6, #21
    1dc4:	0fcc      	lsrs	r4, r1, #31
    1dc6:	2e00      	cmp	r6, #0
    1dc8:	d069      	beq.n	1e9e <__aeabi_dmul+0xfa>
    1dca:	4b6d      	ldr	r3, [pc, #436]	; (1f80 <__aeabi_dmul+0x1dc>)
    1dcc:	429e      	cmp	r6, r3
    1dce:	d035      	beq.n	1e3c <__aeabi_dmul+0x98>
    1dd0:	465b      	mov	r3, fp
    1dd2:	2280      	movs	r2, #128	; 0x80
    1dd4:	00dd      	lsls	r5, r3, #3
    1dd6:	0412      	lsls	r2, r2, #16
    1dd8:	0f43      	lsrs	r3, r0, #29
    1dda:	4313      	orrs	r3, r2
    1ddc:	432b      	orrs	r3, r5
    1dde:	469b      	mov	fp, r3
    1de0:	00c3      	lsls	r3, r0, #3
    1de2:	4698      	mov	r8, r3
    1de4:	4b67      	ldr	r3, [pc, #412]	; (1f84 <__aeabi_dmul+0x1e0>)
    1de6:	2700      	movs	r7, #0
    1de8:	469c      	mov	ip, r3
    1dea:	2300      	movs	r3, #0
    1dec:	4466      	add	r6, ip
    1dee:	9301      	str	r3, [sp, #4]
    1df0:	464a      	mov	r2, r9
    1df2:	0315      	lsls	r5, r2, #12
    1df4:	0050      	lsls	r0, r2, #1
    1df6:	0fd2      	lsrs	r2, r2, #31
    1df8:	4653      	mov	r3, sl
    1dfa:	0b2d      	lsrs	r5, r5, #12
    1dfc:	0d40      	lsrs	r0, r0, #21
    1dfe:	4691      	mov	r9, r2
    1e00:	d100      	bne.n	1e04 <__aeabi_dmul+0x60>
    1e02:	e076      	b.n	1ef2 <__aeabi_dmul+0x14e>
    1e04:	4a5e      	ldr	r2, [pc, #376]	; (1f80 <__aeabi_dmul+0x1dc>)
    1e06:	4290      	cmp	r0, r2
    1e08:	d06c      	beq.n	1ee4 <__aeabi_dmul+0x140>
    1e0a:	2280      	movs	r2, #128	; 0x80
    1e0c:	0f5b      	lsrs	r3, r3, #29
    1e0e:	0412      	lsls	r2, r2, #16
    1e10:	4313      	orrs	r3, r2
    1e12:	4a5c      	ldr	r2, [pc, #368]	; (1f84 <__aeabi_dmul+0x1e0>)
    1e14:	00ed      	lsls	r5, r5, #3
    1e16:	4694      	mov	ip, r2
    1e18:	431d      	orrs	r5, r3
    1e1a:	4653      	mov	r3, sl
    1e1c:	2200      	movs	r2, #0
    1e1e:	00db      	lsls	r3, r3, #3
    1e20:	4460      	add	r0, ip
    1e22:	4649      	mov	r1, r9
    1e24:	1836      	adds	r6, r6, r0
    1e26:	1c70      	adds	r0, r6, #1
    1e28:	4061      	eors	r1, r4
    1e2a:	9002      	str	r0, [sp, #8]
    1e2c:	4317      	orrs	r7, r2
    1e2e:	2f0f      	cmp	r7, #15
    1e30:	d900      	bls.n	1e34 <__aeabi_dmul+0x90>
    1e32:	e0af      	b.n	1f94 <__aeabi_dmul+0x1f0>
    1e34:	4854      	ldr	r0, [pc, #336]	; (1f88 <__aeabi_dmul+0x1e4>)
    1e36:	00bf      	lsls	r7, r7, #2
    1e38:	59c7      	ldr	r7, [r0, r7]
    1e3a:	46bf      	mov	pc, r7
    1e3c:	465b      	mov	r3, fp
    1e3e:	431f      	orrs	r7, r3
    1e40:	d000      	beq.n	1e44 <__aeabi_dmul+0xa0>
    1e42:	e088      	b.n	1f56 <__aeabi_dmul+0x1b2>
    1e44:	2300      	movs	r3, #0
    1e46:	469b      	mov	fp, r3
    1e48:	4698      	mov	r8, r3
    1e4a:	3302      	adds	r3, #2
    1e4c:	2708      	movs	r7, #8
    1e4e:	9301      	str	r3, [sp, #4]
    1e50:	e7ce      	b.n	1df0 <__aeabi_dmul+0x4c>
    1e52:	4649      	mov	r1, r9
    1e54:	2a02      	cmp	r2, #2
    1e56:	d06a      	beq.n	1f2e <__aeabi_dmul+0x18a>
    1e58:	2a03      	cmp	r2, #3
    1e5a:	d100      	bne.n	1e5e <__aeabi_dmul+0xba>
    1e5c:	e209      	b.n	2272 <STACK_SIZE+0x272>
    1e5e:	2a01      	cmp	r2, #1
    1e60:	d000      	beq.n	1e64 <__aeabi_dmul+0xc0>
    1e62:	e1bb      	b.n	21dc <STACK_SIZE+0x1dc>
    1e64:	4011      	ands	r1, r2
    1e66:	2200      	movs	r2, #0
    1e68:	2300      	movs	r3, #0
    1e6a:	2500      	movs	r5, #0
    1e6c:	4690      	mov	r8, r2
    1e6e:	b2cc      	uxtb	r4, r1
    1e70:	2100      	movs	r1, #0
    1e72:	032d      	lsls	r5, r5, #12
    1e74:	0d0a      	lsrs	r2, r1, #20
    1e76:	0512      	lsls	r2, r2, #20
    1e78:	0b2d      	lsrs	r5, r5, #12
    1e7a:	4315      	orrs	r5, r2
    1e7c:	4a43      	ldr	r2, [pc, #268]	; (1f8c <__aeabi_dmul+0x1e8>)
    1e7e:	051b      	lsls	r3, r3, #20
    1e80:	4015      	ands	r5, r2
    1e82:	431d      	orrs	r5, r3
    1e84:	006d      	lsls	r5, r5, #1
    1e86:	07e4      	lsls	r4, r4, #31
    1e88:	086d      	lsrs	r5, r5, #1
    1e8a:	4325      	orrs	r5, r4
    1e8c:	4640      	mov	r0, r8
    1e8e:	0029      	movs	r1, r5
    1e90:	b007      	add	sp, #28
    1e92:	bc3c      	pop	{r2, r3, r4, r5}
    1e94:	4690      	mov	r8, r2
    1e96:	4699      	mov	r9, r3
    1e98:	46a2      	mov	sl, r4
    1e9a:	46ab      	mov	fp, r5
    1e9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1e9e:	4303      	orrs	r3, r0
    1ea0:	d052      	beq.n	1f48 <__aeabi_dmul+0x1a4>
    1ea2:	465b      	mov	r3, fp
    1ea4:	2b00      	cmp	r3, #0
    1ea6:	d100      	bne.n	1eaa <__aeabi_dmul+0x106>
    1ea8:	e18a      	b.n	21c0 <STACK_SIZE+0x1c0>
    1eaa:	4658      	mov	r0, fp
    1eac:	f000 fb4e 	bl	254c <__clzsi2>
    1eb0:	0003      	movs	r3, r0
    1eb2:	3b0b      	subs	r3, #11
    1eb4:	2b1c      	cmp	r3, #28
    1eb6:	dd00      	ble.n	1eba <__aeabi_dmul+0x116>
    1eb8:	e17b      	b.n	21b2 <STACK_SIZE+0x1b2>
    1eba:	221d      	movs	r2, #29
    1ebc:	1ad3      	subs	r3, r2, r3
    1ebe:	003a      	movs	r2, r7
    1ec0:	0001      	movs	r1, r0
    1ec2:	465d      	mov	r5, fp
    1ec4:	40da      	lsrs	r2, r3
    1ec6:	3908      	subs	r1, #8
    1ec8:	408d      	lsls	r5, r1
    1eca:	0013      	movs	r3, r2
    1ecc:	408f      	lsls	r7, r1
    1ece:	432b      	orrs	r3, r5
    1ed0:	469b      	mov	fp, r3
    1ed2:	46b8      	mov	r8, r7
    1ed4:	4b2e      	ldr	r3, [pc, #184]	; (1f90 <__aeabi_dmul+0x1ec>)
    1ed6:	2700      	movs	r7, #0
    1ed8:	469c      	mov	ip, r3
    1eda:	2300      	movs	r3, #0
    1edc:	4460      	add	r0, ip
    1ede:	4246      	negs	r6, r0
    1ee0:	9301      	str	r3, [sp, #4]
    1ee2:	e785      	b.n	1df0 <__aeabi_dmul+0x4c>
    1ee4:	4652      	mov	r2, sl
    1ee6:	432a      	orrs	r2, r5
    1ee8:	d12c      	bne.n	1f44 <__aeabi_dmul+0x1a0>
    1eea:	2500      	movs	r5, #0
    1eec:	2300      	movs	r3, #0
    1eee:	2202      	movs	r2, #2
    1ef0:	e797      	b.n	1e22 <__aeabi_dmul+0x7e>
    1ef2:	4652      	mov	r2, sl
    1ef4:	432a      	orrs	r2, r5
    1ef6:	d021      	beq.n	1f3c <__aeabi_dmul+0x198>
    1ef8:	2d00      	cmp	r5, #0
    1efa:	d100      	bne.n	1efe <__aeabi_dmul+0x15a>
    1efc:	e154      	b.n	21a8 <STACK_SIZE+0x1a8>
    1efe:	0028      	movs	r0, r5
    1f00:	f000 fb24 	bl	254c <__clzsi2>
    1f04:	0003      	movs	r3, r0
    1f06:	3b0b      	subs	r3, #11
    1f08:	2b1c      	cmp	r3, #28
    1f0a:	dd00      	ble.n	1f0e <__aeabi_dmul+0x16a>
    1f0c:	e146      	b.n	219c <STACK_SIZE+0x19c>
    1f0e:	211d      	movs	r1, #29
    1f10:	1acb      	subs	r3, r1, r3
    1f12:	4651      	mov	r1, sl
    1f14:	0002      	movs	r2, r0
    1f16:	40d9      	lsrs	r1, r3
    1f18:	4653      	mov	r3, sl
    1f1a:	3a08      	subs	r2, #8
    1f1c:	4095      	lsls	r5, r2
    1f1e:	4093      	lsls	r3, r2
    1f20:	430d      	orrs	r5, r1
    1f22:	4a1b      	ldr	r2, [pc, #108]	; (1f90 <__aeabi_dmul+0x1ec>)
    1f24:	4694      	mov	ip, r2
    1f26:	4460      	add	r0, ip
    1f28:	4240      	negs	r0, r0
    1f2a:	2200      	movs	r2, #0
    1f2c:	e779      	b.n	1e22 <__aeabi_dmul+0x7e>
    1f2e:	2401      	movs	r4, #1
    1f30:	2200      	movs	r2, #0
    1f32:	400c      	ands	r4, r1
    1f34:	4b12      	ldr	r3, [pc, #72]	; (1f80 <__aeabi_dmul+0x1dc>)
    1f36:	2500      	movs	r5, #0
    1f38:	4690      	mov	r8, r2
    1f3a:	e799      	b.n	1e70 <__aeabi_dmul+0xcc>
    1f3c:	2500      	movs	r5, #0
    1f3e:	2300      	movs	r3, #0
    1f40:	2201      	movs	r2, #1
    1f42:	e76e      	b.n	1e22 <__aeabi_dmul+0x7e>
    1f44:	2203      	movs	r2, #3
    1f46:	e76c      	b.n	1e22 <__aeabi_dmul+0x7e>
    1f48:	2300      	movs	r3, #0
    1f4a:	469b      	mov	fp, r3
    1f4c:	4698      	mov	r8, r3
    1f4e:	3301      	adds	r3, #1
    1f50:	2704      	movs	r7, #4
    1f52:	9301      	str	r3, [sp, #4]
    1f54:	e74c      	b.n	1df0 <__aeabi_dmul+0x4c>
    1f56:	2303      	movs	r3, #3
    1f58:	270c      	movs	r7, #12
    1f5a:	9301      	str	r3, [sp, #4]
    1f5c:	e748      	b.n	1df0 <__aeabi_dmul+0x4c>
    1f5e:	2300      	movs	r3, #0
    1f60:	2580      	movs	r5, #128	; 0x80
    1f62:	4698      	mov	r8, r3
    1f64:	2400      	movs	r4, #0
    1f66:	032d      	lsls	r5, r5, #12
    1f68:	4b05      	ldr	r3, [pc, #20]	; (1f80 <__aeabi_dmul+0x1dc>)
    1f6a:	e781      	b.n	1e70 <__aeabi_dmul+0xcc>
    1f6c:	465d      	mov	r5, fp
    1f6e:	4643      	mov	r3, r8
    1f70:	9a01      	ldr	r2, [sp, #4]
    1f72:	e76f      	b.n	1e54 <__aeabi_dmul+0xb0>
    1f74:	465d      	mov	r5, fp
    1f76:	4643      	mov	r3, r8
    1f78:	0021      	movs	r1, r4
    1f7a:	9a01      	ldr	r2, [sp, #4]
    1f7c:	e76a      	b.n	1e54 <__aeabi_dmul+0xb0>
    1f7e:	46c0      	nop			; (mov r8, r8)
    1f80:	000007ff 	.word	0x000007ff
    1f84:	fffffc01 	.word	0xfffffc01
    1f88:	000028f8 	.word	0x000028f8
    1f8c:	800fffff 	.word	0x800fffff
    1f90:	000003f3 	.word	0x000003f3
    1f94:	4642      	mov	r2, r8
    1f96:	0c12      	lsrs	r2, r2, #16
    1f98:	4691      	mov	r9, r2
    1f9a:	0c1a      	lsrs	r2, r3, #16
    1f9c:	4694      	mov	ip, r2
    1f9e:	4642      	mov	r2, r8
    1fa0:	0417      	lsls	r7, r2, #16
    1fa2:	464a      	mov	r2, r9
    1fa4:	041b      	lsls	r3, r3, #16
    1fa6:	0c1b      	lsrs	r3, r3, #16
    1fa8:	435a      	muls	r2, r3
    1faa:	4660      	mov	r0, ip
    1fac:	4690      	mov	r8, r2
    1fae:	464a      	mov	r2, r9
    1fb0:	4342      	muls	r2, r0
    1fb2:	0010      	movs	r0, r2
    1fb4:	9203      	str	r2, [sp, #12]
    1fb6:	4662      	mov	r2, ip
    1fb8:	001c      	movs	r4, r3
    1fba:	0c3f      	lsrs	r7, r7, #16
    1fbc:	437a      	muls	r2, r7
    1fbe:	437c      	muls	r4, r7
    1fc0:	4442      	add	r2, r8
    1fc2:	9201      	str	r2, [sp, #4]
    1fc4:	0c22      	lsrs	r2, r4, #16
    1fc6:	4692      	mov	sl, r2
    1fc8:	9a01      	ldr	r2, [sp, #4]
    1fca:	4452      	add	r2, sl
    1fcc:	4590      	cmp	r8, r2
    1fce:	d906      	bls.n	1fde <__aeabi_dmul+0x23a>
    1fd0:	4682      	mov	sl, r0
    1fd2:	2080      	movs	r0, #128	; 0x80
    1fd4:	0240      	lsls	r0, r0, #9
    1fd6:	4680      	mov	r8, r0
    1fd8:	44c2      	add	sl, r8
    1fda:	4650      	mov	r0, sl
    1fdc:	9003      	str	r0, [sp, #12]
    1fde:	0c10      	lsrs	r0, r2, #16
    1fe0:	9004      	str	r0, [sp, #16]
    1fe2:	4648      	mov	r0, r9
    1fe4:	0424      	lsls	r4, r4, #16
    1fe6:	0c24      	lsrs	r4, r4, #16
    1fe8:	0412      	lsls	r2, r2, #16
    1fea:	1912      	adds	r2, r2, r4
    1fec:	9205      	str	r2, [sp, #20]
    1fee:	0c2a      	lsrs	r2, r5, #16
    1ff0:	042d      	lsls	r5, r5, #16
    1ff2:	0c2d      	lsrs	r5, r5, #16
    1ff4:	4368      	muls	r0, r5
    1ff6:	002c      	movs	r4, r5
    1ff8:	4682      	mov	sl, r0
    1ffa:	4648      	mov	r0, r9
    1ffc:	437c      	muls	r4, r7
    1ffe:	4350      	muls	r0, r2
    2000:	4681      	mov	r9, r0
    2002:	0c20      	lsrs	r0, r4, #16
    2004:	4680      	mov	r8, r0
    2006:	4357      	muls	r7, r2
    2008:	4457      	add	r7, sl
    200a:	4447      	add	r7, r8
    200c:	45ba      	cmp	sl, r7
    200e:	d903      	bls.n	2018 <STACK_SIZE+0x18>
    2010:	2080      	movs	r0, #128	; 0x80
    2012:	0240      	lsls	r0, r0, #9
    2014:	4680      	mov	r8, r0
    2016:	44c1      	add	r9, r8
    2018:	0c38      	lsrs	r0, r7, #16
    201a:	043f      	lsls	r7, r7, #16
    201c:	46b8      	mov	r8, r7
    201e:	4448      	add	r0, r9
    2020:	0424      	lsls	r4, r4, #16
    2022:	0c24      	lsrs	r4, r4, #16
    2024:	9001      	str	r0, [sp, #4]
    2026:	9804      	ldr	r0, [sp, #16]
    2028:	44a0      	add	r8, r4
    202a:	4440      	add	r0, r8
    202c:	9004      	str	r0, [sp, #16]
    202e:	4658      	mov	r0, fp
    2030:	0c00      	lsrs	r0, r0, #16
    2032:	4681      	mov	r9, r0
    2034:	4658      	mov	r0, fp
    2036:	0404      	lsls	r4, r0, #16
    2038:	0c20      	lsrs	r0, r4, #16
    203a:	4682      	mov	sl, r0
    203c:	0007      	movs	r7, r0
    203e:	4648      	mov	r0, r9
    2040:	435f      	muls	r7, r3
    2042:	464c      	mov	r4, r9
    2044:	4343      	muls	r3, r0
    2046:	4660      	mov	r0, ip
    2048:	4360      	muls	r0, r4
    204a:	4664      	mov	r4, ip
    204c:	4683      	mov	fp, r0
    204e:	4650      	mov	r0, sl
    2050:	4344      	muls	r4, r0
    2052:	0c38      	lsrs	r0, r7, #16
    2054:	4684      	mov	ip, r0
    2056:	18e4      	adds	r4, r4, r3
    2058:	4464      	add	r4, ip
    205a:	42a3      	cmp	r3, r4
    205c:	d903      	bls.n	2066 <STACK_SIZE+0x66>
    205e:	2380      	movs	r3, #128	; 0x80
    2060:	025b      	lsls	r3, r3, #9
    2062:	469c      	mov	ip, r3
    2064:	44e3      	add	fp, ip
    2066:	4648      	mov	r0, r9
    2068:	043f      	lsls	r7, r7, #16
    206a:	0c23      	lsrs	r3, r4, #16
    206c:	0c3f      	lsrs	r7, r7, #16
    206e:	0424      	lsls	r4, r4, #16
    2070:	19e4      	adds	r4, r4, r7
    2072:	4657      	mov	r7, sl
    2074:	4368      	muls	r0, r5
    2076:	436f      	muls	r7, r5
    2078:	4684      	mov	ip, r0
    207a:	464d      	mov	r5, r9
    207c:	4650      	mov	r0, sl
    207e:	4355      	muls	r5, r2
    2080:	4342      	muls	r2, r0
    2082:	0c38      	lsrs	r0, r7, #16
    2084:	4681      	mov	r9, r0
    2086:	4462      	add	r2, ip
    2088:	444a      	add	r2, r9
    208a:	445b      	add	r3, fp
    208c:	4594      	cmp	ip, r2
    208e:	d903      	bls.n	2098 <STACK_SIZE+0x98>
    2090:	2080      	movs	r0, #128	; 0x80
    2092:	0240      	lsls	r0, r0, #9
    2094:	4684      	mov	ip, r0
    2096:	4465      	add	r5, ip
    2098:	9803      	ldr	r0, [sp, #12]
    209a:	043f      	lsls	r7, r7, #16
    209c:	4683      	mov	fp, r0
    209e:	9804      	ldr	r0, [sp, #16]
    20a0:	0c3f      	lsrs	r7, r7, #16
    20a2:	4684      	mov	ip, r0
    20a4:	44e3      	add	fp, ip
    20a6:	45c3      	cmp	fp, r8
    20a8:	4180      	sbcs	r0, r0
    20aa:	4240      	negs	r0, r0
    20ac:	4682      	mov	sl, r0
    20ae:	0410      	lsls	r0, r2, #16
    20b0:	4684      	mov	ip, r0
    20b2:	9801      	ldr	r0, [sp, #4]
    20b4:	4467      	add	r7, ip
    20b6:	4684      	mov	ip, r0
    20b8:	4467      	add	r7, ip
    20ba:	44a3      	add	fp, r4
    20bc:	46bc      	mov	ip, r7
    20be:	45a3      	cmp	fp, r4
    20c0:	41a4      	sbcs	r4, r4
    20c2:	4699      	mov	r9, r3
    20c4:	44d4      	add	ip, sl
    20c6:	4264      	negs	r4, r4
    20c8:	4287      	cmp	r7, r0
    20ca:	41bf      	sbcs	r7, r7
    20cc:	45d4      	cmp	ip, sl
    20ce:	4180      	sbcs	r0, r0
    20d0:	44e1      	add	r9, ip
    20d2:	46a0      	mov	r8, r4
    20d4:	4599      	cmp	r9, r3
    20d6:	419b      	sbcs	r3, r3
    20d8:	427f      	negs	r7, r7
    20da:	4240      	negs	r0, r0
    20dc:	44c8      	add	r8, r9
    20de:	4307      	orrs	r7, r0
    20e0:	0c12      	lsrs	r2, r2, #16
    20e2:	18ba      	adds	r2, r7, r2
    20e4:	45a0      	cmp	r8, r4
    20e6:	41a4      	sbcs	r4, r4
    20e8:	425f      	negs	r7, r3
    20ea:	003b      	movs	r3, r7
    20ec:	4264      	negs	r4, r4
    20ee:	4323      	orrs	r3, r4
    20f0:	18d7      	adds	r7, r2, r3
    20f2:	4643      	mov	r3, r8
    20f4:	197d      	adds	r5, r7, r5
    20f6:	0ddb      	lsrs	r3, r3, #23
    20f8:	026d      	lsls	r5, r5, #9
    20fa:	431d      	orrs	r5, r3
    20fc:	465b      	mov	r3, fp
    20fe:	025a      	lsls	r2, r3, #9
    2100:	9b05      	ldr	r3, [sp, #20]
    2102:	431a      	orrs	r2, r3
    2104:	1e53      	subs	r3, r2, #1
    2106:	419a      	sbcs	r2, r3
    2108:	465b      	mov	r3, fp
    210a:	0ddb      	lsrs	r3, r3, #23
    210c:	431a      	orrs	r2, r3
    210e:	4643      	mov	r3, r8
    2110:	025b      	lsls	r3, r3, #9
    2112:	4313      	orrs	r3, r2
    2114:	01ea      	lsls	r2, r5, #7
    2116:	d507      	bpl.n	2128 <STACK_SIZE+0x128>
    2118:	2201      	movs	r2, #1
    211a:	085c      	lsrs	r4, r3, #1
    211c:	4013      	ands	r3, r2
    211e:	4323      	orrs	r3, r4
    2120:	07ea      	lsls	r2, r5, #31
    2122:	9e02      	ldr	r6, [sp, #8]
    2124:	4313      	orrs	r3, r2
    2126:	086d      	lsrs	r5, r5, #1
    2128:	4a57      	ldr	r2, [pc, #348]	; (2288 <STACK_SIZE+0x288>)
    212a:	18b2      	adds	r2, r6, r2
    212c:	2a00      	cmp	r2, #0
    212e:	dd4b      	ble.n	21c8 <STACK_SIZE+0x1c8>
    2130:	0758      	lsls	r0, r3, #29
    2132:	d009      	beq.n	2148 <STACK_SIZE+0x148>
    2134:	200f      	movs	r0, #15
    2136:	4018      	ands	r0, r3
    2138:	2804      	cmp	r0, #4
    213a:	d005      	beq.n	2148 <STACK_SIZE+0x148>
    213c:	1d18      	adds	r0, r3, #4
    213e:	4298      	cmp	r0, r3
    2140:	419b      	sbcs	r3, r3
    2142:	425b      	negs	r3, r3
    2144:	18ed      	adds	r5, r5, r3
    2146:	0003      	movs	r3, r0
    2148:	01e8      	lsls	r0, r5, #7
    214a:	d504      	bpl.n	2156 <STACK_SIZE+0x156>
    214c:	4a4f      	ldr	r2, [pc, #316]	; (228c <STACK_SIZE+0x28c>)
    214e:	4015      	ands	r5, r2
    2150:	2280      	movs	r2, #128	; 0x80
    2152:	00d2      	lsls	r2, r2, #3
    2154:	18b2      	adds	r2, r6, r2
    2156:	484e      	ldr	r0, [pc, #312]	; (2290 <STACK_SIZE+0x290>)
    2158:	4282      	cmp	r2, r0
    215a:	dd00      	ble.n	215e <STACK_SIZE+0x15e>
    215c:	e6e7      	b.n	1f2e <__aeabi_dmul+0x18a>
    215e:	2401      	movs	r4, #1
    2160:	08db      	lsrs	r3, r3, #3
    2162:	0768      	lsls	r0, r5, #29
    2164:	4318      	orrs	r0, r3
    2166:	026d      	lsls	r5, r5, #9
    2168:	0553      	lsls	r3, r2, #21
    216a:	4680      	mov	r8, r0
    216c:	0b2d      	lsrs	r5, r5, #12
    216e:	0d5b      	lsrs	r3, r3, #21
    2170:	400c      	ands	r4, r1
    2172:	e67d      	b.n	1e70 <__aeabi_dmul+0xcc>
    2174:	2280      	movs	r2, #128	; 0x80
    2176:	4659      	mov	r1, fp
    2178:	0312      	lsls	r2, r2, #12
    217a:	4211      	tst	r1, r2
    217c:	d008      	beq.n	2190 <STACK_SIZE+0x190>
    217e:	4215      	tst	r5, r2
    2180:	d106      	bne.n	2190 <STACK_SIZE+0x190>
    2182:	4315      	orrs	r5, r2
    2184:	032d      	lsls	r5, r5, #12
    2186:	4698      	mov	r8, r3
    2188:	0b2d      	lsrs	r5, r5, #12
    218a:	464c      	mov	r4, r9
    218c:	4b41      	ldr	r3, [pc, #260]	; (2294 <STACK_SIZE+0x294>)
    218e:	e66f      	b.n	1e70 <__aeabi_dmul+0xcc>
    2190:	465d      	mov	r5, fp
    2192:	4315      	orrs	r5, r2
    2194:	032d      	lsls	r5, r5, #12
    2196:	0b2d      	lsrs	r5, r5, #12
    2198:	4b3e      	ldr	r3, [pc, #248]	; (2294 <STACK_SIZE+0x294>)
    219a:	e669      	b.n	1e70 <__aeabi_dmul+0xcc>
    219c:	0003      	movs	r3, r0
    219e:	4655      	mov	r5, sl
    21a0:	3b28      	subs	r3, #40	; 0x28
    21a2:	409d      	lsls	r5, r3
    21a4:	2300      	movs	r3, #0
    21a6:	e6bc      	b.n	1f22 <__aeabi_dmul+0x17e>
    21a8:	4650      	mov	r0, sl
    21aa:	f000 f9cf 	bl	254c <__clzsi2>
    21ae:	3020      	adds	r0, #32
    21b0:	e6a8      	b.n	1f04 <__aeabi_dmul+0x160>
    21b2:	0003      	movs	r3, r0
    21b4:	3b28      	subs	r3, #40	; 0x28
    21b6:	409f      	lsls	r7, r3
    21b8:	2300      	movs	r3, #0
    21ba:	46bb      	mov	fp, r7
    21bc:	4698      	mov	r8, r3
    21be:	e689      	b.n	1ed4 <__aeabi_dmul+0x130>
    21c0:	f000 f9c4 	bl	254c <__clzsi2>
    21c4:	3020      	adds	r0, #32
    21c6:	e673      	b.n	1eb0 <__aeabi_dmul+0x10c>
    21c8:	2401      	movs	r4, #1
    21ca:	1aa6      	subs	r6, r4, r2
    21cc:	2e38      	cmp	r6, #56	; 0x38
    21ce:	dd07      	ble.n	21e0 <STACK_SIZE+0x1e0>
    21d0:	2200      	movs	r2, #0
    21d2:	400c      	ands	r4, r1
    21d4:	2300      	movs	r3, #0
    21d6:	2500      	movs	r5, #0
    21d8:	4690      	mov	r8, r2
    21da:	e649      	b.n	1e70 <__aeabi_dmul+0xcc>
    21dc:	9e02      	ldr	r6, [sp, #8]
    21de:	e7a3      	b.n	2128 <STACK_SIZE+0x128>
    21e0:	2e1f      	cmp	r6, #31
    21e2:	dc20      	bgt.n	2226 <STACK_SIZE+0x226>
    21e4:	2220      	movs	r2, #32
    21e6:	002c      	movs	r4, r5
    21e8:	0018      	movs	r0, r3
    21ea:	1b92      	subs	r2, r2, r6
    21ec:	40f0      	lsrs	r0, r6
    21ee:	4094      	lsls	r4, r2
    21f0:	4093      	lsls	r3, r2
    21f2:	4304      	orrs	r4, r0
    21f4:	1e58      	subs	r0, r3, #1
    21f6:	4183      	sbcs	r3, r0
    21f8:	431c      	orrs	r4, r3
    21fa:	40f5      	lsrs	r5, r6
    21fc:	0763      	lsls	r3, r4, #29
    21fe:	d009      	beq.n	2214 <STACK_SIZE+0x214>
    2200:	230f      	movs	r3, #15
    2202:	4023      	ands	r3, r4
    2204:	2b04      	cmp	r3, #4
    2206:	d005      	beq.n	2214 <STACK_SIZE+0x214>
    2208:	0023      	movs	r3, r4
    220a:	1d1c      	adds	r4, r3, #4
    220c:	429c      	cmp	r4, r3
    220e:	4192      	sbcs	r2, r2
    2210:	4252      	negs	r2, r2
    2212:	18ad      	adds	r5, r5, r2
    2214:	022b      	lsls	r3, r5, #8
    2216:	d51f      	bpl.n	2258 <STACK_SIZE+0x258>
    2218:	2401      	movs	r4, #1
    221a:	2200      	movs	r2, #0
    221c:	400c      	ands	r4, r1
    221e:	2301      	movs	r3, #1
    2220:	2500      	movs	r5, #0
    2222:	4690      	mov	r8, r2
    2224:	e624      	b.n	1e70 <__aeabi_dmul+0xcc>
    2226:	201f      	movs	r0, #31
    2228:	002c      	movs	r4, r5
    222a:	4240      	negs	r0, r0
    222c:	1a82      	subs	r2, r0, r2
    222e:	40d4      	lsrs	r4, r2
    2230:	2e20      	cmp	r6, #32
    2232:	d01c      	beq.n	226e <STACK_SIZE+0x26e>
    2234:	2240      	movs	r2, #64	; 0x40
    2236:	1b96      	subs	r6, r2, r6
    2238:	40b5      	lsls	r5, r6
    223a:	432b      	orrs	r3, r5
    223c:	1e58      	subs	r0, r3, #1
    223e:	4183      	sbcs	r3, r0
    2240:	2007      	movs	r0, #7
    2242:	4323      	orrs	r3, r4
    2244:	4018      	ands	r0, r3
    2246:	2500      	movs	r5, #0
    2248:	2800      	cmp	r0, #0
    224a:	d009      	beq.n	2260 <STACK_SIZE+0x260>
    224c:	220f      	movs	r2, #15
    224e:	2500      	movs	r5, #0
    2250:	401a      	ands	r2, r3
    2252:	001c      	movs	r4, r3
    2254:	2a04      	cmp	r2, #4
    2256:	d1d8      	bne.n	220a <STACK_SIZE+0x20a>
    2258:	0023      	movs	r3, r4
    225a:	0768      	lsls	r0, r5, #29
    225c:	026d      	lsls	r5, r5, #9
    225e:	0b2d      	lsrs	r5, r5, #12
    2260:	2401      	movs	r4, #1
    2262:	08db      	lsrs	r3, r3, #3
    2264:	4303      	orrs	r3, r0
    2266:	4698      	mov	r8, r3
    2268:	400c      	ands	r4, r1
    226a:	2300      	movs	r3, #0
    226c:	e600      	b.n	1e70 <__aeabi_dmul+0xcc>
    226e:	2500      	movs	r5, #0
    2270:	e7e3      	b.n	223a <STACK_SIZE+0x23a>
    2272:	2280      	movs	r2, #128	; 0x80
    2274:	2401      	movs	r4, #1
    2276:	0312      	lsls	r2, r2, #12
    2278:	4315      	orrs	r5, r2
    227a:	032d      	lsls	r5, r5, #12
    227c:	4698      	mov	r8, r3
    227e:	0b2d      	lsrs	r5, r5, #12
    2280:	400c      	ands	r4, r1
    2282:	4b04      	ldr	r3, [pc, #16]	; (2294 <STACK_SIZE+0x294>)
    2284:	e5f4      	b.n	1e70 <__aeabi_dmul+0xcc>
    2286:	46c0      	nop			; (mov r8, r8)
    2288:	000003ff 	.word	0x000003ff
    228c:	feffffff 	.word	0xfeffffff
    2290:	000007fe 	.word	0x000007fe
    2294:	000007ff 	.word	0x000007ff

00002298 <__aeabi_i2d>:
    2298:	b570      	push	{r4, r5, r6, lr}
    229a:	2800      	cmp	r0, #0
    229c:	d030      	beq.n	2300 <__aeabi_i2d+0x68>
    229e:	17c3      	asrs	r3, r0, #31
    22a0:	18c4      	adds	r4, r0, r3
    22a2:	405c      	eors	r4, r3
    22a4:	0fc5      	lsrs	r5, r0, #31
    22a6:	0020      	movs	r0, r4
    22a8:	f000 f950 	bl	254c <__clzsi2>
    22ac:	4b17      	ldr	r3, [pc, #92]	; (230c <__aeabi_i2d+0x74>)
    22ae:	4a18      	ldr	r2, [pc, #96]	; (2310 <__aeabi_i2d+0x78>)
    22b0:	1a1b      	subs	r3, r3, r0
    22b2:	1ad2      	subs	r2, r2, r3
    22b4:	2a1f      	cmp	r2, #31
    22b6:	dd18      	ble.n	22ea <__aeabi_i2d+0x52>
    22b8:	4a16      	ldr	r2, [pc, #88]	; (2314 <__aeabi_i2d+0x7c>)
    22ba:	1ad2      	subs	r2, r2, r3
    22bc:	4094      	lsls	r4, r2
    22be:	2200      	movs	r2, #0
    22c0:	0324      	lsls	r4, r4, #12
    22c2:	055b      	lsls	r3, r3, #21
    22c4:	0b24      	lsrs	r4, r4, #12
    22c6:	0d5b      	lsrs	r3, r3, #21
    22c8:	2100      	movs	r1, #0
    22ca:	0010      	movs	r0, r2
    22cc:	0324      	lsls	r4, r4, #12
    22ce:	0d0a      	lsrs	r2, r1, #20
    22d0:	0512      	lsls	r2, r2, #20
    22d2:	0b24      	lsrs	r4, r4, #12
    22d4:	4314      	orrs	r4, r2
    22d6:	4a10      	ldr	r2, [pc, #64]	; (2318 <__aeabi_i2d+0x80>)
    22d8:	051b      	lsls	r3, r3, #20
    22da:	4014      	ands	r4, r2
    22dc:	431c      	orrs	r4, r3
    22de:	0064      	lsls	r4, r4, #1
    22e0:	07ed      	lsls	r5, r5, #31
    22e2:	0864      	lsrs	r4, r4, #1
    22e4:	432c      	orrs	r4, r5
    22e6:	0021      	movs	r1, r4
    22e8:	bd70      	pop	{r4, r5, r6, pc}
    22ea:	0021      	movs	r1, r4
    22ec:	4091      	lsls	r1, r2
    22ee:	000a      	movs	r2, r1
    22f0:	210b      	movs	r1, #11
    22f2:	1a08      	subs	r0, r1, r0
    22f4:	40c4      	lsrs	r4, r0
    22f6:	055b      	lsls	r3, r3, #21
    22f8:	0324      	lsls	r4, r4, #12
    22fa:	0b24      	lsrs	r4, r4, #12
    22fc:	0d5b      	lsrs	r3, r3, #21
    22fe:	e7e3      	b.n	22c8 <__aeabi_i2d+0x30>
    2300:	2500      	movs	r5, #0
    2302:	2300      	movs	r3, #0
    2304:	2400      	movs	r4, #0
    2306:	2200      	movs	r2, #0
    2308:	e7de      	b.n	22c8 <__aeabi_i2d+0x30>
    230a:	46c0      	nop			; (mov r8, r8)
    230c:	0000041e 	.word	0x0000041e
    2310:	00000433 	.word	0x00000433
    2314:	00000413 	.word	0x00000413
    2318:	800fffff 	.word	0x800fffff

0000231c <__aeabi_ui2d>:
    231c:	b570      	push	{r4, r5, r6, lr}
    231e:	1e05      	subs	r5, r0, #0
    2320:	d028      	beq.n	2374 <__aeabi_ui2d+0x58>
    2322:	f000 f913 	bl	254c <__clzsi2>
    2326:	4b15      	ldr	r3, [pc, #84]	; (237c <__aeabi_ui2d+0x60>)
    2328:	4a15      	ldr	r2, [pc, #84]	; (2380 <__aeabi_ui2d+0x64>)
    232a:	1a1b      	subs	r3, r3, r0
    232c:	1ad2      	subs	r2, r2, r3
    232e:	2a1f      	cmp	r2, #31
    2330:	dd16      	ble.n	2360 <__aeabi_ui2d+0x44>
    2332:	002c      	movs	r4, r5
    2334:	4a13      	ldr	r2, [pc, #76]	; (2384 <__aeabi_ui2d+0x68>)
    2336:	2500      	movs	r5, #0
    2338:	1ad2      	subs	r2, r2, r3
    233a:	4094      	lsls	r4, r2
    233c:	055a      	lsls	r2, r3, #21
    233e:	0324      	lsls	r4, r4, #12
    2340:	0b24      	lsrs	r4, r4, #12
    2342:	0d52      	lsrs	r2, r2, #21
    2344:	2100      	movs	r1, #0
    2346:	0324      	lsls	r4, r4, #12
    2348:	0d0b      	lsrs	r3, r1, #20
    234a:	0b24      	lsrs	r4, r4, #12
    234c:	051b      	lsls	r3, r3, #20
    234e:	4323      	orrs	r3, r4
    2350:	4c0d      	ldr	r4, [pc, #52]	; (2388 <__aeabi_ui2d+0x6c>)
    2352:	0512      	lsls	r2, r2, #20
    2354:	4023      	ands	r3, r4
    2356:	4313      	orrs	r3, r2
    2358:	005b      	lsls	r3, r3, #1
    235a:	0028      	movs	r0, r5
    235c:	0859      	lsrs	r1, r3, #1
    235e:	bd70      	pop	{r4, r5, r6, pc}
    2360:	210b      	movs	r1, #11
    2362:	002c      	movs	r4, r5
    2364:	1a08      	subs	r0, r1, r0
    2366:	40c4      	lsrs	r4, r0
    2368:	4095      	lsls	r5, r2
    236a:	0324      	lsls	r4, r4, #12
    236c:	055a      	lsls	r2, r3, #21
    236e:	0b24      	lsrs	r4, r4, #12
    2370:	0d52      	lsrs	r2, r2, #21
    2372:	e7e7      	b.n	2344 <__aeabi_ui2d+0x28>
    2374:	2200      	movs	r2, #0
    2376:	2400      	movs	r4, #0
    2378:	e7e4      	b.n	2344 <__aeabi_ui2d+0x28>
    237a:	46c0      	nop			; (mov r8, r8)
    237c:	0000041e 	.word	0x0000041e
    2380:	00000433 	.word	0x00000433
    2384:	00000413 	.word	0x00000413
    2388:	800fffff 	.word	0x800fffff

0000238c <__aeabi_f2d>:
    238c:	0042      	lsls	r2, r0, #1
    238e:	0e12      	lsrs	r2, r2, #24
    2390:	1c51      	adds	r1, r2, #1
    2392:	0243      	lsls	r3, r0, #9
    2394:	b2c9      	uxtb	r1, r1
    2396:	b570      	push	{r4, r5, r6, lr}
    2398:	0a5d      	lsrs	r5, r3, #9
    239a:	0fc4      	lsrs	r4, r0, #31
    239c:	2901      	cmp	r1, #1
    239e:	dd15      	ble.n	23cc <__aeabi_f2d+0x40>
    23a0:	21e0      	movs	r1, #224	; 0xe0
    23a2:	0089      	lsls	r1, r1, #2
    23a4:	468c      	mov	ip, r1
    23a6:	076d      	lsls	r5, r5, #29
    23a8:	0b1b      	lsrs	r3, r3, #12
    23aa:	4462      	add	r2, ip
    23ac:	2100      	movs	r1, #0
    23ae:	0028      	movs	r0, r5
    23b0:	0d0d      	lsrs	r5, r1, #20
    23b2:	052d      	lsls	r5, r5, #20
    23b4:	432b      	orrs	r3, r5
    23b6:	4d1c      	ldr	r5, [pc, #112]	; (2428 <__aeabi_f2d+0x9c>)
    23b8:	0552      	lsls	r2, r2, #21
    23ba:	402b      	ands	r3, r5
    23bc:	0852      	lsrs	r2, r2, #1
    23be:	4313      	orrs	r3, r2
    23c0:	005b      	lsls	r3, r3, #1
    23c2:	07e4      	lsls	r4, r4, #31
    23c4:	085b      	lsrs	r3, r3, #1
    23c6:	4323      	orrs	r3, r4
    23c8:	0019      	movs	r1, r3
    23ca:	bd70      	pop	{r4, r5, r6, pc}
    23cc:	2a00      	cmp	r2, #0
    23ce:	d115      	bne.n	23fc <__aeabi_f2d+0x70>
    23d0:	2d00      	cmp	r5, #0
    23d2:	d01f      	beq.n	2414 <__aeabi_f2d+0x88>
    23d4:	0028      	movs	r0, r5
    23d6:	f000 f8b9 	bl	254c <__clzsi2>
    23da:	280a      	cmp	r0, #10
    23dc:	dc1d      	bgt.n	241a <__aeabi_f2d+0x8e>
    23de:	230b      	movs	r3, #11
    23e0:	002a      	movs	r2, r5
    23e2:	1a1b      	subs	r3, r3, r0
    23e4:	40da      	lsrs	r2, r3
    23e6:	0013      	movs	r3, r2
    23e8:	0002      	movs	r2, r0
    23ea:	3215      	adds	r2, #21
    23ec:	4095      	lsls	r5, r2
    23ee:	4a0f      	ldr	r2, [pc, #60]	; (242c <__aeabi_f2d+0xa0>)
    23f0:	031b      	lsls	r3, r3, #12
    23f2:	1a12      	subs	r2, r2, r0
    23f4:	0552      	lsls	r2, r2, #21
    23f6:	0b1b      	lsrs	r3, r3, #12
    23f8:	0d52      	lsrs	r2, r2, #21
    23fa:	e7d7      	b.n	23ac <__aeabi_f2d+0x20>
    23fc:	2d00      	cmp	r5, #0
    23fe:	d006      	beq.n	240e <__aeabi_f2d+0x82>
    2400:	2280      	movs	r2, #128	; 0x80
    2402:	0b1b      	lsrs	r3, r3, #12
    2404:	0312      	lsls	r2, r2, #12
    2406:	4313      	orrs	r3, r2
    2408:	076d      	lsls	r5, r5, #29
    240a:	4a09      	ldr	r2, [pc, #36]	; (2430 <__aeabi_f2d+0xa4>)
    240c:	e7ce      	b.n	23ac <__aeabi_f2d+0x20>
    240e:	4a08      	ldr	r2, [pc, #32]	; (2430 <__aeabi_f2d+0xa4>)
    2410:	2300      	movs	r3, #0
    2412:	e7cb      	b.n	23ac <__aeabi_f2d+0x20>
    2414:	2200      	movs	r2, #0
    2416:	2300      	movs	r3, #0
    2418:	e7c8      	b.n	23ac <__aeabi_f2d+0x20>
    241a:	0003      	movs	r3, r0
    241c:	3b0b      	subs	r3, #11
    241e:	409d      	lsls	r5, r3
    2420:	002b      	movs	r3, r5
    2422:	2500      	movs	r5, #0
    2424:	e7e3      	b.n	23ee <__aeabi_f2d+0x62>
    2426:	46c0      	nop			; (mov r8, r8)
    2428:	800fffff 	.word	0x800fffff
    242c:	00000389 	.word	0x00000389
    2430:	000007ff 	.word	0x000007ff

00002434 <__aeabi_d2f>:
    2434:	004b      	lsls	r3, r1, #1
    2436:	b570      	push	{r4, r5, r6, lr}
    2438:	0d5e      	lsrs	r6, r3, #21
    243a:	030c      	lsls	r4, r1, #12
    243c:	1c75      	adds	r5, r6, #1
    243e:	0a64      	lsrs	r4, r4, #9
    2440:	0f42      	lsrs	r2, r0, #29
    2442:	056d      	lsls	r5, r5, #21
    2444:	4322      	orrs	r2, r4
    2446:	0fc9      	lsrs	r1, r1, #31
    2448:	00c4      	lsls	r4, r0, #3
    244a:	0d6d      	lsrs	r5, r5, #21
    244c:	2d01      	cmp	r5, #1
    244e:	dd2a      	ble.n	24a6 <__aeabi_d2f+0x72>
    2450:	4b3b      	ldr	r3, [pc, #236]	; (2540 <__aeabi_d2f+0x10c>)
    2452:	18f3      	adds	r3, r6, r3
    2454:	2bfe      	cmp	r3, #254	; 0xfe
    2456:	dc1a      	bgt.n	248e <__aeabi_d2f+0x5a>
    2458:	2b00      	cmp	r3, #0
    245a:	dd42      	ble.n	24e2 <__aeabi_d2f+0xae>
    245c:	0180      	lsls	r0, r0, #6
    245e:	1e45      	subs	r5, r0, #1
    2460:	41a8      	sbcs	r0, r5
    2462:	00d2      	lsls	r2, r2, #3
    2464:	4310      	orrs	r0, r2
    2466:	0f62      	lsrs	r2, r4, #29
    2468:	4302      	orrs	r2, r0
    246a:	0750      	lsls	r0, r2, #29
    246c:	d004      	beq.n	2478 <__aeabi_d2f+0x44>
    246e:	200f      	movs	r0, #15
    2470:	4010      	ands	r0, r2
    2472:	2804      	cmp	r0, #4
    2474:	d000      	beq.n	2478 <__aeabi_d2f+0x44>
    2476:	3204      	adds	r2, #4
    2478:	2080      	movs	r0, #128	; 0x80
    247a:	04c0      	lsls	r0, r0, #19
    247c:	4010      	ands	r0, r2
    247e:	d021      	beq.n	24c4 <__aeabi_d2f+0x90>
    2480:	3301      	adds	r3, #1
    2482:	2bff      	cmp	r3, #255	; 0xff
    2484:	d003      	beq.n	248e <__aeabi_d2f+0x5a>
    2486:	0192      	lsls	r2, r2, #6
    2488:	0a52      	lsrs	r2, r2, #9
    248a:	b2db      	uxtb	r3, r3
    248c:	e001      	b.n	2492 <__aeabi_d2f+0x5e>
    248e:	23ff      	movs	r3, #255	; 0xff
    2490:	2200      	movs	r2, #0
    2492:	0252      	lsls	r2, r2, #9
    2494:	0a52      	lsrs	r2, r2, #9
    2496:	05db      	lsls	r3, r3, #23
    2498:	4313      	orrs	r3, r2
    249a:	005b      	lsls	r3, r3, #1
    249c:	07c9      	lsls	r1, r1, #31
    249e:	085b      	lsrs	r3, r3, #1
    24a0:	430b      	orrs	r3, r1
    24a2:	0018      	movs	r0, r3
    24a4:	bd70      	pop	{r4, r5, r6, pc}
    24a6:	2e00      	cmp	r6, #0
    24a8:	d007      	beq.n	24ba <__aeabi_d2f+0x86>
    24aa:	4314      	orrs	r4, r2
    24ac:	d0ef      	beq.n	248e <__aeabi_d2f+0x5a>
    24ae:	2080      	movs	r0, #128	; 0x80
    24b0:	00d2      	lsls	r2, r2, #3
    24b2:	0480      	lsls	r0, r0, #18
    24b4:	4302      	orrs	r2, r0
    24b6:	23ff      	movs	r3, #255	; 0xff
    24b8:	e7d7      	b.n	246a <__aeabi_d2f+0x36>
    24ba:	4322      	orrs	r2, r4
    24bc:	2300      	movs	r3, #0
    24be:	2a00      	cmp	r2, #0
    24c0:	d003      	beq.n	24ca <__aeabi_d2f+0x96>
    24c2:	2205      	movs	r2, #5
    24c4:	08d2      	lsrs	r2, r2, #3
    24c6:	2bff      	cmp	r3, #255	; 0xff
    24c8:	d003      	beq.n	24d2 <__aeabi_d2f+0x9e>
    24ca:	0252      	lsls	r2, r2, #9
    24cc:	0a52      	lsrs	r2, r2, #9
    24ce:	b2db      	uxtb	r3, r3
    24d0:	e7df      	b.n	2492 <__aeabi_d2f+0x5e>
    24d2:	2a00      	cmp	r2, #0
    24d4:	d032      	beq.n	253c <__aeabi_d2f+0x108>
    24d6:	2080      	movs	r0, #128	; 0x80
    24d8:	03c0      	lsls	r0, r0, #15
    24da:	4302      	orrs	r2, r0
    24dc:	0252      	lsls	r2, r2, #9
    24de:	0a52      	lsrs	r2, r2, #9
    24e0:	e7d7      	b.n	2492 <__aeabi_d2f+0x5e>
    24e2:	0018      	movs	r0, r3
    24e4:	3017      	adds	r0, #23
    24e6:	db14      	blt.n	2512 <__aeabi_d2f+0xde>
    24e8:	2080      	movs	r0, #128	; 0x80
    24ea:	0400      	lsls	r0, r0, #16
    24ec:	4302      	orrs	r2, r0
    24ee:	201e      	movs	r0, #30
    24f0:	1ac0      	subs	r0, r0, r3
    24f2:	281f      	cmp	r0, #31
    24f4:	dc0f      	bgt.n	2516 <__aeabi_d2f+0xe2>
    24f6:	0025      	movs	r5, r4
    24f8:	4b12      	ldr	r3, [pc, #72]	; (2544 <__aeabi_d2f+0x110>)
    24fa:	18f3      	adds	r3, r6, r3
    24fc:	409d      	lsls	r5, r3
    24fe:	1e6e      	subs	r6, r5, #1
    2500:	41b5      	sbcs	r5, r6
    2502:	409a      	lsls	r2, r3
    2504:	002b      	movs	r3, r5
    2506:	4313      	orrs	r3, r2
    2508:	0022      	movs	r2, r4
    250a:	40c2      	lsrs	r2, r0
    250c:	431a      	orrs	r2, r3
    250e:	2300      	movs	r3, #0
    2510:	e7ab      	b.n	246a <__aeabi_d2f+0x36>
    2512:	2300      	movs	r3, #0
    2514:	e7d5      	b.n	24c2 <__aeabi_d2f+0x8e>
    2516:	2502      	movs	r5, #2
    2518:	426d      	negs	r5, r5
    251a:	1aeb      	subs	r3, r5, r3
    251c:	0015      	movs	r5, r2
    251e:	40dd      	lsrs	r5, r3
    2520:	2820      	cmp	r0, #32
    2522:	d009      	beq.n	2538 <__aeabi_d2f+0x104>
    2524:	4b08      	ldr	r3, [pc, #32]	; (2548 <__aeabi_d2f+0x114>)
    2526:	18f3      	adds	r3, r6, r3
    2528:	409a      	lsls	r2, r3
    252a:	4314      	orrs	r4, r2
    252c:	1e62      	subs	r2, r4, #1
    252e:	4194      	sbcs	r4, r2
    2530:	0022      	movs	r2, r4
    2532:	2300      	movs	r3, #0
    2534:	432a      	orrs	r2, r5
    2536:	e798      	b.n	246a <__aeabi_d2f+0x36>
    2538:	2200      	movs	r2, #0
    253a:	e7f6      	b.n	252a <__aeabi_d2f+0xf6>
    253c:	2200      	movs	r2, #0
    253e:	e7a8      	b.n	2492 <__aeabi_d2f+0x5e>
    2540:	fffffc80 	.word	0xfffffc80
    2544:	fffffc82 	.word	0xfffffc82
    2548:	fffffca2 	.word	0xfffffca2

0000254c <__clzsi2>:
    254c:	211c      	movs	r1, #28
    254e:	2301      	movs	r3, #1
    2550:	041b      	lsls	r3, r3, #16
    2552:	4298      	cmp	r0, r3
    2554:	d301      	bcc.n	255a <__clzsi2+0xe>
    2556:	0c00      	lsrs	r0, r0, #16
    2558:	3910      	subs	r1, #16
    255a:	0a1b      	lsrs	r3, r3, #8
    255c:	4298      	cmp	r0, r3
    255e:	d301      	bcc.n	2564 <__clzsi2+0x18>
    2560:	0a00      	lsrs	r0, r0, #8
    2562:	3908      	subs	r1, #8
    2564:	091b      	lsrs	r3, r3, #4
    2566:	4298      	cmp	r0, r3
    2568:	d301      	bcc.n	256e <__clzsi2+0x22>
    256a:	0900      	lsrs	r0, r0, #4
    256c:	3904      	subs	r1, #4
    256e:	a202      	add	r2, pc, #8	; (adr r2, 2578 <__clzsi2+0x2c>)
    2570:	5c10      	ldrb	r0, [r2, r0]
    2572:	1840      	adds	r0, r0, r1
    2574:	4770      	bx	lr
    2576:	46c0      	nop			; (mov r8, r8)
    2578:	02020304 	.word	0x02020304
    257c:	01010101 	.word	0x01010101
	...

00002588 <__libc_init_array>:
    2588:	b570      	push	{r4, r5, r6, lr}
    258a:	4e0d      	ldr	r6, [pc, #52]	; (25c0 <__libc_init_array+0x38>)
    258c:	4d0d      	ldr	r5, [pc, #52]	; (25c4 <__libc_init_array+0x3c>)
    258e:	2400      	movs	r4, #0
    2590:	1bad      	subs	r5, r5, r6
    2592:	10ad      	asrs	r5, r5, #2
    2594:	d005      	beq.n	25a2 <__libc_init_array+0x1a>
    2596:	00a3      	lsls	r3, r4, #2
    2598:	58f3      	ldr	r3, [r6, r3]
    259a:	3401      	adds	r4, #1
    259c:	4798      	blx	r3
    259e:	42a5      	cmp	r5, r4
    25a0:	d1f9      	bne.n	2596 <__libc_init_array+0xe>
    25a2:	f000 f9cd 	bl	2940 <_init>
    25a6:	4e08      	ldr	r6, [pc, #32]	; (25c8 <__libc_init_array+0x40>)
    25a8:	4d08      	ldr	r5, [pc, #32]	; (25cc <__libc_init_array+0x44>)
    25aa:	2400      	movs	r4, #0
    25ac:	1bad      	subs	r5, r5, r6
    25ae:	10ad      	asrs	r5, r5, #2
    25b0:	d005      	beq.n	25be <__libc_init_array+0x36>
    25b2:	00a3      	lsls	r3, r4, #2
    25b4:	58f3      	ldr	r3, [r6, r3]
    25b6:	3401      	adds	r4, #1
    25b8:	4798      	blx	r3
    25ba:	42a5      	cmp	r5, r4
    25bc:	d1f9      	bne.n	25b2 <__libc_init_array+0x2a>
    25be:	bd70      	pop	{r4, r5, r6, pc}
    25c0:	0000294c 	.word	0x0000294c
    25c4:	0000294c 	.word	0x0000294c
    25c8:	0000294c 	.word	0x0000294c
    25cc:	00002954 	.word	0x00002954

000025d0 <memset>:
    25d0:	b570      	push	{r4, r5, r6, lr}
    25d2:	0783      	lsls	r3, r0, #30
    25d4:	d03f      	beq.n	2656 <memset+0x86>
    25d6:	1e54      	subs	r4, r2, #1
    25d8:	2a00      	cmp	r2, #0
    25da:	d03b      	beq.n	2654 <memset+0x84>
    25dc:	b2ce      	uxtb	r6, r1
    25de:	0003      	movs	r3, r0
    25e0:	2503      	movs	r5, #3
    25e2:	e003      	b.n	25ec <memset+0x1c>
    25e4:	1e62      	subs	r2, r4, #1
    25e6:	2c00      	cmp	r4, #0
    25e8:	d034      	beq.n	2654 <memset+0x84>
    25ea:	0014      	movs	r4, r2
    25ec:	3301      	adds	r3, #1
    25ee:	1e5a      	subs	r2, r3, #1
    25f0:	7016      	strb	r6, [r2, #0]
    25f2:	422b      	tst	r3, r5
    25f4:	d1f6      	bne.n	25e4 <memset+0x14>
    25f6:	2c03      	cmp	r4, #3
    25f8:	d924      	bls.n	2644 <memset+0x74>
    25fa:	25ff      	movs	r5, #255	; 0xff
    25fc:	400d      	ands	r5, r1
    25fe:	022a      	lsls	r2, r5, #8
    2600:	4315      	orrs	r5, r2
    2602:	042a      	lsls	r2, r5, #16
    2604:	4315      	orrs	r5, r2
    2606:	2c0f      	cmp	r4, #15
    2608:	d911      	bls.n	262e <memset+0x5e>
    260a:	0026      	movs	r6, r4
    260c:	3e10      	subs	r6, #16
    260e:	0936      	lsrs	r6, r6, #4
    2610:	3601      	adds	r6, #1
    2612:	0136      	lsls	r6, r6, #4
    2614:	001a      	movs	r2, r3
    2616:	199b      	adds	r3, r3, r6
    2618:	6015      	str	r5, [r2, #0]
    261a:	6055      	str	r5, [r2, #4]
    261c:	6095      	str	r5, [r2, #8]
    261e:	60d5      	str	r5, [r2, #12]
    2620:	3210      	adds	r2, #16
    2622:	4293      	cmp	r3, r2
    2624:	d1f8      	bne.n	2618 <memset+0x48>
    2626:	220f      	movs	r2, #15
    2628:	4014      	ands	r4, r2
    262a:	2c03      	cmp	r4, #3
    262c:	d90a      	bls.n	2644 <memset+0x74>
    262e:	1f26      	subs	r6, r4, #4
    2630:	08b6      	lsrs	r6, r6, #2
    2632:	3601      	adds	r6, #1
    2634:	00b6      	lsls	r6, r6, #2
    2636:	001a      	movs	r2, r3
    2638:	199b      	adds	r3, r3, r6
    263a:	c220      	stmia	r2!, {r5}
    263c:	4293      	cmp	r3, r2
    263e:	d1fc      	bne.n	263a <memset+0x6a>
    2640:	2203      	movs	r2, #3
    2642:	4014      	ands	r4, r2
    2644:	2c00      	cmp	r4, #0
    2646:	d005      	beq.n	2654 <memset+0x84>
    2648:	b2c9      	uxtb	r1, r1
    264a:	191c      	adds	r4, r3, r4
    264c:	7019      	strb	r1, [r3, #0]
    264e:	3301      	adds	r3, #1
    2650:	429c      	cmp	r4, r3
    2652:	d1fb      	bne.n	264c <memset+0x7c>
    2654:	bd70      	pop	{r4, r5, r6, pc}
    2656:	0014      	movs	r4, r2
    2658:	0003      	movs	r3, r0
    265a:	e7cc      	b.n	25f6 <memset+0x26>

0000265c <register_fini>:
    265c:	4b03      	ldr	r3, [pc, #12]	; (266c <register_fini+0x10>)
    265e:	b510      	push	{r4, lr}
    2660:	2b00      	cmp	r3, #0
    2662:	d002      	beq.n	266a <register_fini+0xe>
    2664:	4802      	ldr	r0, [pc, #8]	; (2670 <register_fini+0x14>)
    2666:	f000 f805 	bl	2674 <atexit>
    266a:	bd10      	pop	{r4, pc}
    266c:	00000000 	.word	0x00000000
    2670:	00002685 	.word	0x00002685

00002674 <atexit>:
    2674:	b510      	push	{r4, lr}
    2676:	0001      	movs	r1, r0
    2678:	2300      	movs	r3, #0
    267a:	2200      	movs	r2, #0
    267c:	2000      	movs	r0, #0
    267e:	f000 f81b 	bl	26b8 <__register_exitproc>
    2682:	bd10      	pop	{r4, pc}

00002684 <__libc_fini_array>:
    2684:	b570      	push	{r4, r5, r6, lr}
    2686:	4b09      	ldr	r3, [pc, #36]	; (26ac <__libc_fini_array+0x28>)
    2688:	4c09      	ldr	r4, [pc, #36]	; (26b0 <__libc_fini_array+0x2c>)
    268a:	1ae4      	subs	r4, r4, r3
    268c:	10a4      	asrs	r4, r4, #2
    268e:	d009      	beq.n	26a4 <__libc_fini_array+0x20>
    2690:	4a08      	ldr	r2, [pc, #32]	; (26b4 <__libc_fini_array+0x30>)
    2692:	18a5      	adds	r5, r4, r2
    2694:	00ad      	lsls	r5, r5, #2
    2696:	18ed      	adds	r5, r5, r3
    2698:	682b      	ldr	r3, [r5, #0]
    269a:	3c01      	subs	r4, #1
    269c:	4798      	blx	r3
    269e:	3d04      	subs	r5, #4
    26a0:	2c00      	cmp	r4, #0
    26a2:	d1f9      	bne.n	2698 <__libc_fini_array+0x14>
    26a4:	f000 f956 	bl	2954 <_fini>
    26a8:	bd70      	pop	{r4, r5, r6, pc}
    26aa:	46c0      	nop			; (mov r8, r8)
    26ac:	00002960 	.word	0x00002960
    26b0:	00002964 	.word	0x00002964
    26b4:	3fffffff 	.word	0x3fffffff

000026b8 <__register_exitproc>:
    26b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    26ba:	4644      	mov	r4, r8
    26bc:	465f      	mov	r7, fp
    26be:	4656      	mov	r6, sl
    26c0:	464d      	mov	r5, r9
    26c2:	469b      	mov	fp, r3
    26c4:	4b2f      	ldr	r3, [pc, #188]	; (2784 <__register_exitproc+0xcc>)
    26c6:	b4f0      	push	{r4, r5, r6, r7}
    26c8:	681c      	ldr	r4, [r3, #0]
    26ca:	23a4      	movs	r3, #164	; 0xa4
    26cc:	005b      	lsls	r3, r3, #1
    26ce:	0005      	movs	r5, r0
    26d0:	58e0      	ldr	r0, [r4, r3]
    26d2:	000e      	movs	r6, r1
    26d4:	4690      	mov	r8, r2
    26d6:	2800      	cmp	r0, #0
    26d8:	d04b      	beq.n	2772 <__register_exitproc+0xba>
    26da:	6843      	ldr	r3, [r0, #4]
    26dc:	2b1f      	cmp	r3, #31
    26de:	dc0d      	bgt.n	26fc <__register_exitproc+0x44>
    26e0:	1c5c      	adds	r4, r3, #1
    26e2:	2d00      	cmp	r5, #0
    26e4:	d121      	bne.n	272a <__register_exitproc+0x72>
    26e6:	3302      	adds	r3, #2
    26e8:	009b      	lsls	r3, r3, #2
    26ea:	6044      	str	r4, [r0, #4]
    26ec:	501e      	str	r6, [r3, r0]
    26ee:	2000      	movs	r0, #0
    26f0:	bc3c      	pop	{r2, r3, r4, r5}
    26f2:	4690      	mov	r8, r2
    26f4:	4699      	mov	r9, r3
    26f6:	46a2      	mov	sl, r4
    26f8:	46ab      	mov	fp, r5
    26fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    26fc:	4b22      	ldr	r3, [pc, #136]	; (2788 <__register_exitproc+0xd0>)
    26fe:	2b00      	cmp	r3, #0
    2700:	d03c      	beq.n	277c <__register_exitproc+0xc4>
    2702:	20c8      	movs	r0, #200	; 0xc8
    2704:	0040      	lsls	r0, r0, #1
    2706:	e000      	b.n	270a <__register_exitproc+0x52>
    2708:	bf00      	nop
    270a:	2800      	cmp	r0, #0
    270c:	d036      	beq.n	277c <__register_exitproc+0xc4>
    270e:	22a4      	movs	r2, #164	; 0xa4
    2710:	2300      	movs	r3, #0
    2712:	0052      	lsls	r2, r2, #1
    2714:	58a1      	ldr	r1, [r4, r2]
    2716:	6043      	str	r3, [r0, #4]
    2718:	6001      	str	r1, [r0, #0]
    271a:	50a0      	str	r0, [r4, r2]
    271c:	3240      	adds	r2, #64	; 0x40
    271e:	5083      	str	r3, [r0, r2]
    2720:	3204      	adds	r2, #4
    2722:	5083      	str	r3, [r0, r2]
    2724:	2401      	movs	r4, #1
    2726:	2d00      	cmp	r5, #0
    2728:	d0dd      	beq.n	26e6 <__register_exitproc+0x2e>
    272a:	009a      	lsls	r2, r3, #2
    272c:	4691      	mov	r9, r2
    272e:	4481      	add	r9, r0
    2730:	4642      	mov	r2, r8
    2732:	2188      	movs	r1, #136	; 0x88
    2734:	464f      	mov	r7, r9
    2736:	507a      	str	r2, [r7, r1]
    2738:	22c4      	movs	r2, #196	; 0xc4
    273a:	0052      	lsls	r2, r2, #1
    273c:	4690      	mov	r8, r2
    273e:	4480      	add	r8, r0
    2740:	4642      	mov	r2, r8
    2742:	3987      	subs	r1, #135	; 0x87
    2744:	4099      	lsls	r1, r3
    2746:	6812      	ldr	r2, [r2, #0]
    2748:	468a      	mov	sl, r1
    274a:	430a      	orrs	r2, r1
    274c:	4694      	mov	ip, r2
    274e:	4642      	mov	r2, r8
    2750:	4661      	mov	r1, ip
    2752:	6011      	str	r1, [r2, #0]
    2754:	2284      	movs	r2, #132	; 0x84
    2756:	4649      	mov	r1, r9
    2758:	465f      	mov	r7, fp
    275a:	0052      	lsls	r2, r2, #1
    275c:	508f      	str	r7, [r1, r2]
    275e:	2d02      	cmp	r5, #2
    2760:	d1c1      	bne.n	26e6 <__register_exitproc+0x2e>
    2762:	0002      	movs	r2, r0
    2764:	4655      	mov	r5, sl
    2766:	328d      	adds	r2, #141	; 0x8d
    2768:	32ff      	adds	r2, #255	; 0xff
    276a:	6811      	ldr	r1, [r2, #0]
    276c:	430d      	orrs	r5, r1
    276e:	6015      	str	r5, [r2, #0]
    2770:	e7b9      	b.n	26e6 <__register_exitproc+0x2e>
    2772:	0020      	movs	r0, r4
    2774:	304d      	adds	r0, #77	; 0x4d
    2776:	30ff      	adds	r0, #255	; 0xff
    2778:	50e0      	str	r0, [r4, r3]
    277a:	e7ae      	b.n	26da <__register_exitproc+0x22>
    277c:	2001      	movs	r0, #1
    277e:	4240      	negs	r0, r0
    2780:	e7b6      	b.n	26f0 <__register_exitproc+0x38>
    2782:	46c0      	nop			; (mov r8, r8)
    2784:	0000293c 	.word	0x0000293c
    2788:	00000000 	.word	0x00000000

0000278c <spi2MOSI>:
    278c:	0c000002 00000200                                .....

00002791 <spi2SCK>:
    2791:	0e000002 00000200                                .....

00002796 <spi2MISO>:
    2796:	0d000002 8d200000                                ......

0000279c <lookupTable.12431>:
    279c:	ffff8d20 ffffada1 ffffce64 ffffef6c      .......d...l...
    27ac:	000010b7 0000324a 00005425 00007649     ....J2..%T..Iv..
    27bc:	000098b7 0000bb72 0000de79 000101d0     ....r...y.......
    27cc:	00012576 0001496f 00016dbc 0001925e     v%..oI...m..^...
    27dc:	0001b758 0001dcaa 00020258 00022862     X.......X...b(..
    27ec:	00024ecc 00027596 00029cc4 0002c457     .N...u......W...
    27fc:	0002ec52 000314b7 00033d89 000366ca     R........=...f..
    280c:	0003907d 0003baa4 0003e544 0004105e     }.......D...^...
    281c:	00043bf6 0004680e 000494ac 0004c1d1     .;...h..........
    282c:	0004ef81 00051dc1 00054c95 00057c00     .........L...|..
    283c:	0005ac07 0005dcae 00060dfb 00063ff2     .............?..
    284c:	00067298 0006a5f4 0006da09 00070ee0     .r..............
    285c:	0007447d 00077ae8 0007b228 0007ea44     }D...z..(...D...
    286c:	00082344 00085d30 00089810 0008d3ef     D#..0]..........
    287c:	000910d6 00094ecf 00098de5 0009ce23     .....N......#...
    288c:	000a0f98 000a524f 000a9657 000adbbf     ....OR..W.......
    289c:	000b2298 000b6af3 000bb4e2 000c007b     ."...j......{...
    28ac:	000c4dd4 000c9d03 000cee23 000d4150     .M......#...PA..
    28bc:	000d96a9 000dee4e 000e4865 000ea516     ....N...eH......
    28cc:	000f048e                                ....

000028d0 <senseBatPin>:
    28d0:	06000000 01000106                                .....

000028d5 <senseAPin>:
    28d5:	03010001 0100010b                                .....

000028da <senseBPin>:
    28da:	02010001 0000000a                                .....

000028df <senseCPin>:
    28df:	03000000 00000001                                .....

000028e4 <senseDPin>:
    28e4:	02000000 00000000                                .....

000028e9 <analogAccelPin>:
    28e9:	07000000 00000207                                .....

000028ee <spi2MOSI>:
    28ee:	0c000002 00000200                                .....

000028f3 <spi2SCK>:
    28f3:	0e000002 001f9400 001e5400 001e5400     .........T...T..
    2903:	001e5200 001f6c00 001f6c00 001f5e00     .R...l...l...^..
    2913:	001e5200 001f6c00 001f5e00 001f6c00     .R...l...^...l..
    2923:	001e5200 001f7400 001f7400 001f7400     .R...t...t...t..
    2933:	00217400 00004300 00001000                       .t!..C...

0000293c <_global_impure_ptr>:
    293c:	20000010                                ... 

00002940 <_init>:
    2940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2942:	46c0      	nop			; (mov r8, r8)
    2944:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2946:	bc08      	pop	{r3}
    2948:	469e      	mov	lr, r3
    294a:	4770      	bx	lr

0000294c <__init_array_start>:
    294c:	0000265d 	.word	0x0000265d

00002950 <__frame_dummy_init_array_entry>:
    2950:	000000dd                                ....

00002954 <_fini>:
    2954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2956:	46c0      	nop			; (mov r8, r8)
    2958:	bcf8      	pop	{r3, r4, r5, r6, r7}
    295a:	bc08      	pop	{r3}
    295c:	469e      	mov	lr, r3
    295e:	4770      	bx	lr

00002960 <__fini_array_start>:
    2960:	000000b5 	.word	0x000000b5
