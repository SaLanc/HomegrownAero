
DasAltimeter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006a0c  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000004a4  20000000  00006a0c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000380  200004a8  00006eb8  000204a8  2**3
                  ALLOC
  3 .stack        00002000  20000828  00007238  000204a8  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000204a4  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  000204cc  2**0
                  CONTENTS, READONLY
  6 .debug_info   00021bee  00000000  00000000  00020525  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000029a2  00000000  00000000  00042113  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000259d  00000000  00000000  00044ab5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000468  00000000  00000000  00047052  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000c78  00000000  00000000  000474ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00016908  00000000  00000000  00048132  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000a630  00000000  00000000  0005ea3a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00072af0  00000000  00000000  0006906a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001188  00000000  00000000  000dbb5c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
 *         retrieved from cpu registers.
 */
void SystemCoreClockUpdate(void)
{
	// Not implemented
	SystemCoreClock = __SYSTEM_CLOCK;
       0:	20002828 	.word	0x20002828
       4:	00000119 	.word	0x00000119
	return;
}
       8:	00000115 	.word	0x00000115
       c:	00000115 	.word	0x00000115
	...
      2c:	00000115 	.word	0x00000115
	...
      38:	00000115 	.word	0x00000115
      3c:	00000115 	.word	0x00000115
      40:	00000115 	.word	0x00000115
      44:	00000115 	.word	0x00000115
      48:	00000115 	.word	0x00000115
      4c:	00000ff9 	.word	0x00000ff9
      50:	00000115 	.word	0x00000115
      54:	00000115 	.word	0x00000115
      58:	00000115 	.word	0x00000115
      5c:	00000115 	.word	0x00000115
      60:	00000115 	.word	0x00000115
      64:	00000115 	.word	0x00000115
      68:	00000115 	.word	0x00000115
      6c:	00000115 	.word	0x00000115
      70:	00000115 	.word	0x00000115
      74:	00000115 	.word	0x00000115
      78:	00000115 	.word	0x00000115
      7c:	00000115 	.word	0x00000115
      80:	00000115 	.word	0x00000115
      84:	00000115 	.word	0x00000115
      88:	00000115 	.word	0x00000115
      8c:	00001099 	.word	0x00001099
      90:	00001101 	.word	0x00001101
	...
      9c:	00000115 	.word	0x00000115
      a0:	00000115 	.word	0x00000115
      a4:	00000115 	.word	0x00000115
      a8:	00000115 	.word	0x00000115
      ac:	00000115 	.word	0x00000115
      b0:	00000000 	.word	0x00000000

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200004a8 	.word	0x200004a8
      d4:	00000000 	.word	0x00000000
      d8:	00006a0c 	.word	0x00006a0c

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200004ac 	.word	0x200004ac
     108:	00006a0c 	.word	0x00006a0c
     10c:	00006a0c 	.word	0x00006a0c
     110:	00000000 	.word	0x00000000

00000114 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     114:	e7fe      	b.n	114 <Dummy_Handler>
	...

00000118 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
     118:	4821      	ldr	r0, [pc, #132]	; (1a0 <Reset_Handler+0x88>)
     11a:	4922      	ldr	r1, [pc, #136]	; (1a4 <Reset_Handler+0x8c>)
     11c:	b570      	push	{r4, r5, r6, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
     11e:	4288      	cmp	r0, r1
     120:	d002      	beq.n	128 <Reset_Handler+0x10>
     122:	2300      	movs	r3, #0
                for (; pDest < &_erelocate;) {
     124:	4c20      	ldr	r4, [pc, #128]	; (1a8 <Reset_Handler+0x90>)
     126:	e003      	b.n	130 <Reset_Handler+0x18>
     128:	4b20      	ldr	r3, [pc, #128]	; (1ac <Reset_Handler+0x94>)
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     12a:	4a21      	ldr	r2, [pc, #132]	; (1b0 <Reset_Handler+0x98>)
                *pDest++ = 0;
     12c:	2100      	movs	r1, #0
     12e:	e006      	b.n	13e <Reset_Handler+0x26>
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
     130:	18ca      	adds	r2, r1, r3
     132:	42a2      	cmp	r2, r4
     134:	d2f8      	bcs.n	128 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
     136:	58c5      	ldr	r5, [r0, r3]
     138:	3304      	adds	r3, #4
     13a:	6015      	str	r5, [r2, #0]
     13c:	e7f8      	b.n	130 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     13e:	4293      	cmp	r3, r2
     140:	d201      	bcs.n	146 <Reset_Handler+0x2e>
                *pDest++ = 0;
     142:	c302      	stmia	r3!, {r1}
     144:	e7fb      	b.n	13e <Reset_Handler+0x26>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     146:	21ff      	movs	r1, #255	; 0xff

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     148:	2402      	movs	r4, #2
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     14a:	2503      	movs	r5, #3
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     14c:	4b19      	ldr	r3, [pc, #100]	; (1b4 <Reset_Handler+0x9c>)
     14e:	4a1a      	ldr	r2, [pc, #104]	; (1b8 <Reset_Handler+0xa0>)
     150:	438b      	bics	r3, r1

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     152:	260c      	movs	r6, #12
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     154:	6093      	str	r3, [r2, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     156:	2208      	movs	r2, #8
        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     158:	4b18      	ldr	r3, [pc, #96]	; (1bc <Reset_Handler+0xa4>)
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     15a:	4919      	ldr	r1, [pc, #100]	; (1c0 <Reset_Handler+0xa8>)
        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     15c:	625c      	str	r4, [r3, #36]	; 0x24
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     15e:	78cb      	ldrb	r3, [r1, #3]
     160:	43ab      	bics	r3, r5
     162:	4323      	orrs	r3, r4
     164:	70cb      	strb	r3, [r1, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     166:	78cb      	ldrb	r3, [r1, #3]
     168:	43b3      	bics	r3, r6
     16a:	4313      	orrs	r3, r2
     16c:	70cb      	strb	r3, [r1, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
     16e:	2130      	movs	r1, #48	; 0x30
     170:	4b14      	ldr	r3, [pc, #80]	; (1c4 <Reset_Handler+0xac>)
     172:	7b98      	ldrb	r0, [r3, #14]
     174:	4388      	bics	r0, r1
     176:	3910      	subs	r1, #16
     178:	4308      	orrs	r0, r1
     17a:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     17c:	7b99      	ldrb	r1, [r3, #14]
     17e:	43b1      	bics	r1, r6
     180:	4311      	orrs	r1, r2
     182:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
     184:	2180      	movs	r1, #128	; 0x80
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
        DMAC->QOSCTRL.bit.FQOS = 2;
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     186:	7b9a      	ldrb	r2, [r3, #14]
     188:	43aa      	bics	r2, r5
     18a:	4322      	orrs	r2, r4
     18c:	739a      	strb	r2, [r3, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
     18e:	4a0e      	ldr	r2, [pc, #56]	; (1c8 <Reset_Handler+0xb0>)
     190:	6853      	ldr	r3, [r2, #4]
     192:	430b      	orrs	r3, r1
     194:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
     196:	4b0d      	ldr	r3, [pc, #52]	; (1cc <Reset_Handler+0xb4>)
     198:	4798      	blx	r3

        /* Branch to main function */
        main();
     19a:	4b0d      	ldr	r3, [pc, #52]	; (1d0 <Reset_Handler+0xb8>)
     19c:	4798      	blx	r3
     19e:	e7fe      	b.n	19e <Reset_Handler+0x86>
     1a0:	00006a0c 	.word	0x00006a0c
     1a4:	20000000 	.word	0x20000000
     1a8:	200004a4 	.word	0x200004a4
     1ac:	200004a8 	.word	0x200004a8
     1b0:	20000828 	.word	0x20000828
     1b4:	00000000 	.word	0x00000000
     1b8:	e000ed00 	.word	0xe000ed00
     1bc:	410070fc 	.word	0x410070fc
     1c0:	41005000 	.word	0x41005000
     1c4:	41004800 	.word	0x41004800
     1c8:	41004000 	.word	0x41004000
     1cc:	0000676d 	.word	0x0000676d
     1d0:	0000099d 	.word	0x0000099d

000001d4 <SystemInit>:
     1d4:	4a01      	ldr	r2, [pc, #4]	; (1dc <SystemInit+0x8>)
     1d6:	4b02      	ldr	r3, [pc, #8]	; (1e0 <SystemInit+0xc>)
     1d8:	601a      	str	r2, [r3, #0]
     1da:	4770      	bx	lr
     1dc:	000f4240 	.word	0x000f4240
     1e0:	20000000 	.word	0x20000000

000001e4 <AT25SFHoldTillReady>:
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     1e4:	2380      	movs	r3, #128	; 0x80
    pinLow(cs_mem);
    spiDataOut(MEM_SPI,OPCODE_WRITEENABLE);
    pinHigh(cs_mem);
}

void AT25SFHoldTillReady() {
     1e6:	b570      	push	{r4, r5, r6, lr}
     1e8:	4c08      	ldr	r4, [pc, #32]	; (20c <AT25SFHoldTillReady+0x28>)
     1ea:	02db      	lsls	r3, r3, #11
     1ec:	6163      	str	r3, [r4, #20]
    pinLow(cs_mem);
    spiDataOut(MEM_SPI,OPCODE_READSTATUS);
     1ee:	2105      	movs	r1, #5
     1f0:	2001      	movs	r0, #1
     1f2:	4b07      	ldr	r3, [pc, #28]	; (210 <AT25SFHoldTillReady+0x2c>)
     1f4:	4798      	blx	r3
    while (spiDataIn(MEM_SPI) & 0x01);
     1f6:	2501      	movs	r5, #1
     1f8:	2001      	movs	r0, #1
     1fa:	4b06      	ldr	r3, [pc, #24]	; (214 <AT25SFHoldTillReady+0x30>)
     1fc:	4798      	blx	r3
     1fe:	4228      	tst	r0, r5
     200:	d1fa      	bne.n	1f8 <AT25SFHoldTillReady+0x14>
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     202:	2380      	movs	r3, #128	; 0x80
     204:	02db      	lsls	r3, r3, #11
     206:	61a3      	str	r3, [r4, #24]
    pinHigh(cs_mem);
}
     208:	bd70      	pop	{r4, r5, r6, pc}
     20a:	46c0      	nop			; (mov r8, r8)
     20c:	41004400 	.word	0x41004400
     210:	00002a21 	.word	0x00002a21
     214:	00002a39 	.word	0x00002a39

00000218 <AT25SFChipErase>:
void AT25SFChipErase() {
     218:	b570      	push	{r4, r5, r6, lr}
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     21a:	2580      	movs	r5, #128	; 0x80
     21c:	4c06      	ldr	r4, [pc, #24]	; (238 <AT25SFChipErase+0x20>)
     21e:	02ed      	lsls	r5, r5, #11

    pinLow(cs_mem);
    spiDataOut(MEM_SPI,OPCODE_WRITEENABLE);
     220:	4e06      	ldr	r6, [pc, #24]	; (23c <AT25SFChipErase+0x24>)
     222:	6165      	str	r5, [r4, #20]
     224:	2106      	movs	r1, #6
     226:	2001      	movs	r0, #1
     228:	47b0      	blx	r6
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     22a:	61a5      	str	r5, [r4, #24]
    pinHigh(cs_mem);

    pinLow(cs_mem);
    spiDataOut(MEM_SPI,OPCODE_CHIP_ERASE);
     22c:	2160      	movs	r1, #96	; 0x60
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     22e:	6165      	str	r5, [r4, #20]
     230:	2001      	movs	r0, #1
     232:	47b0      	blx	r6
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     234:	61a5      	str	r5, [r4, #24]
    pinHigh(cs_mem);
}
     236:	bd70      	pop	{r4, r5, r6, pc}
     238:	41004400 	.word	0x41004400
     23c:	00002a21 	.word	0x00002a21

00000240 <AT25SFWriteBytes>:
    pinHigh(cs_mem);

    return _byte;
}

void AT25SFWriteBytes(uint32_t address, u8_t len, uint8_t *bytes) {
     240:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     242:	2780      	movs	r7, #128	; 0x80
     244:	0006      	movs	r6, r0
     246:	4d13      	ldr	r5, [pc, #76]	; (294 <AT25SFWriteBytes+0x54>)
     248:	02ff      	lsls	r7, r7, #11
     24a:	9201      	str	r2, [sp, #4]


    pinLow(cs_mem);
    spiDataOut(MEM_SPI,OPCODE_WRITEENABLE);
     24c:	4c12      	ldr	r4, [pc, #72]	; (298 <AT25SFWriteBytes+0x58>)
    pinHigh(cs_mem);

    return _byte;
}

void AT25SFWriteBytes(uint32_t address, u8_t len, uint8_t *bytes) {
     24e:	9100      	str	r1, [sp, #0]


    pinLow(cs_mem);
    spiDataOut(MEM_SPI,OPCODE_WRITEENABLE);
     250:	2001      	movs	r0, #1
     252:	616f      	str	r7, [r5, #20]
     254:	2106      	movs	r1, #6
     256:	47a0      	blx	r4
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     258:	61af      	str	r7, [r5, #24]
    pinHigh(cs_mem);

    pinLow(cs_mem);
    spiDataOut(MEM_SPI,OPCODE_PROGRAM);
     25a:	2102      	movs	r1, #2
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     25c:	616f      	str	r7, [r5, #20]
     25e:	2001      	movs	r0, #1
     260:	47a0      	blx	r4
    spiDataOut(MEM_SPI,((address & 0xFF0000) >> 16));
     262:	0c31      	lsrs	r1, r6, #16
     264:	b2c9      	uxtb	r1, r1
     266:	2001      	movs	r0, #1
     268:	47a0      	blx	r4
    spiDataOut(MEM_SPI,((address & 0x00FF00) >>  8));
     26a:	0a31      	lsrs	r1, r6, #8
     26c:	b2c9      	uxtb	r1, r1
     26e:	2001      	movs	r0, #1
     270:	47a0      	blx	r4
    spiDataOut(MEM_SPI,((address & 0x0000FF) >>  0));
     272:	b2f1      	uxtb	r1, r6
     274:	2001      	movs	r0, #1
     276:	47a0      	blx	r4
     278:	9e01      	ldr	r6, [sp, #4]
     27a:	9b00      	ldr	r3, [sp, #0]
     27c:	18f7      	adds	r7, r6, r3

    for (u8_t pos = 0; pos < len; ++pos) {
     27e:	42be      	cmp	r6, r7
     280:	d004      	beq.n	28c <AT25SFWriteBytes+0x4c>
        spiDataOut(MEM_SPI, bytes[pos]);
     282:	7831      	ldrb	r1, [r6, #0]
     284:	2001      	movs	r0, #1
     286:	47a0      	blx	r4
     288:	3601      	adds	r6, #1
     28a:	e7f8      	b.n	27e <AT25SFWriteBytes+0x3e>
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     28c:	2380      	movs	r3, #128	; 0x80
     28e:	02db      	lsls	r3, r3, #11
     290:	61ab      	str	r3, [r5, #24]
    }

    pinHigh(cs_mem);

}
     292:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
     294:	41004400 	.word	0x41004400
     298:	00002a21 	.word	0x00002a21

0000029c <AT25SEWritePage>:
    delay_ms(70);

}


u8_t AT25SEWritePage(u32_t startingAddress, u8_t *data) {
     29c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     29e:	2780      	movs	r7, #128	; 0x80
     2a0:	0006      	movs	r6, r0
     2a2:	4d13      	ldr	r5, [pc, #76]	; (2f0 <AT25SEWritePage+0x54>)
     2a4:	02ff      	lsls	r7, r7, #11

    u8_t bytesSent = 0;

    pinLow(cs_mem);
    spiDataOut(MEM_SPI,OPCODE_WRITEENABLE);
     2a6:	4c13      	ldr	r4, [pc, #76]	; (2f4 <AT25SEWritePage+0x58>)
    delay_ms(70);

}


u8_t AT25SEWritePage(u32_t startingAddress, u8_t *data) {
     2a8:	9101      	str	r1, [sp, #4]

    u8_t bytesSent = 0;

    pinLow(cs_mem);
    spiDataOut(MEM_SPI,OPCODE_WRITEENABLE);
     2aa:	2001      	movs	r0, #1
     2ac:	616f      	str	r7, [r5, #20]
     2ae:	2106      	movs	r1, #6
     2b0:	47a0      	blx	r4
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     2b2:	61af      	str	r7, [r5, #24]
    pinHigh(cs_mem);

    pinLow(cs_mem);
    spiDataOut(MEM_SPI,OPCODE_PROGRAM);
     2b4:	2102      	movs	r1, #2
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     2b6:	616f      	str	r7, [r5, #20]
     2b8:	2001      	movs	r0, #1
     2ba:	47a0      	blx	r4
    spiDataOut(MEM_SPI,((startingAddress & 0xFF0000) >> 16));
     2bc:	0c31      	lsrs	r1, r6, #16
     2be:	b2c9      	uxtb	r1, r1
     2c0:	2001      	movs	r0, #1
     2c2:	47a0      	blx	r4
    spiDataOut(MEM_SPI,((startingAddress & 0x00FF00) >>  8));
     2c4:	0a31      	lsrs	r1, r6, #8
     2c6:	b2c9      	uxtb	r1, r1
     2c8:	2001      	movs	r0, #1
     2ca:	47a0      	blx	r4
    spiDataOut(MEM_SPI,((startingAddress & 0x0000FF) >>  0));
     2cc:	b2f1      	uxtb	r1, r6
     2ce:	2001      	movs	r0, #1
     2d0:	47a0      	blx	r4
     2d2:	9e01      	ldr	r6, [sp, #4]
     2d4:	1c77      	adds	r7, r6, #1
     2d6:	37ff      	adds	r7, #255	; 0xff


    for (u16_t pos = 0; pos < 256; ++pos) {
        ++bytesSent;
        spiDataOut(SPI1,data[pos]);
     2d8:	7831      	ldrb	r1, [r6, #0]
     2da:	2001      	movs	r0, #1
     2dc:	3601      	adds	r6, #1
     2de:	47a0      	blx	r4
    spiDataOut(MEM_SPI,((startingAddress & 0xFF0000) >> 16));
    spiDataOut(MEM_SPI,((startingAddress & 0x00FF00) >>  8));
    spiDataOut(MEM_SPI,((startingAddress & 0x0000FF) >>  0));


    for (u16_t pos = 0; pos < 256; ++pos) {
     2e0:	42be      	cmp	r6, r7
     2e2:	d1f9      	bne.n	2d8 <AT25SEWritePage+0x3c>
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     2e4:	2380      	movs	r3, #128	; 0x80
     2e6:	02db      	lsls	r3, r3, #11
     2e8:	61ab      	str	r3, [r5, #24]
    }
    pinHigh(cs_mem);


    return bytesSent;
}
     2ea:	2000      	movs	r0, #0
     2ec:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
     2ee:	46c0      	nop			; (mov r8, r8)
     2f0:	41004400 	.word	0x41004400
     2f4:	00002a21 	.word	0x00002a21

000002f8 <AT25SEreadSample>:
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     2f8:	2380      	movs	r3, #128	; 0x80

void AT25SEreadSample(u32_t startingAddress, u8_t len, u8_t *data) {
     2fa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     2fc:	0005      	movs	r5, r0
     2fe:	000f      	movs	r7, r1
     300:	4e11      	ldr	r6, [pc, #68]	; (348 <AT25SEreadSample+0x50>)
     302:	02db      	lsls	r3, r3, #11
     304:	9201      	str	r2, [sp, #4]

    pinLow(cs_mem);
    spiDataOut(MEM_SPI,OPCODE_FASTREAD_ARRAY);
     306:	4c11      	ldr	r4, [pc, #68]	; (34c <AT25SEreadSample+0x54>)
     308:	6173      	str	r3, [r6, #20]
     30a:	210b      	movs	r1, #11
     30c:	2001      	movs	r0, #1
     30e:	47a0      	blx	r4
    spiDataOut(MEM_SPI,((startingAddress & 0xFF0000) >> 16));
     310:	0c29      	lsrs	r1, r5, #16
     312:	b2c9      	uxtb	r1, r1
     314:	2001      	movs	r0, #1
     316:	47a0      	blx	r4
    spiDataOut(MEM_SPI,((startingAddress & 0x00FF00) >>  8));
     318:	0a29      	lsrs	r1, r5, #8
     31a:	b2c9      	uxtb	r1, r1
     31c:	2001      	movs	r0, #1
     31e:	47a0      	blx	r4
    spiDataOut(MEM_SPI,((startingAddress & 0x0000FF) >>  0));
     320:	b2e9      	uxtb	r1, r5
     322:	2001      	movs	r0, #1
     324:	47a0      	blx	r4
    spiDataOut(MEM_SPI, 0xFF);
     326:	21ff      	movs	r1, #255	; 0xff
     328:	2001      	movs	r0, #1
     32a:	47a0      	blx	r4
     32c:	9c01      	ldr	r4, [sp, #4]
     32e:	19e7      	adds	r7, r4, r7


    for (u8_t pos = 0; pos < len; ++pos) {
     330:	42bc      	cmp	r4, r7
     332:	d005      	beq.n	340 <AT25SEreadSample+0x48>
        data[pos] = spiDataIn(MEM_SPI);
     334:	2001      	movs	r0, #1
     336:	4b06      	ldr	r3, [pc, #24]	; (350 <AT25SEreadSample+0x58>)
     338:	4798      	blx	r3
     33a:	7020      	strb	r0, [r4, #0]
     33c:	3401      	adds	r4, #1
     33e:	e7f7      	b.n	330 <AT25SEreadSample+0x38>
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     340:	2380      	movs	r3, #128	; 0x80
     342:	02db      	lsls	r3, r3, #11
     344:	61b3      	str	r3, [r6, #24]
    }
    pinHigh(cs_mem);

}
     346:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
     348:	41004400 	.word	0x41004400
     34c:	00002a21 	.word	0x00002a21
     350:	00002a39 	.word	0x00002a39

00000354 <AT25SEreadPage>:

void AT25SEreadPage(u32_t startingAddress, u8_t *data) {
     354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     356:	2380      	movs	r3, #128	; 0x80
     358:	0007      	movs	r7, r0
     35a:	000c      	movs	r4, r1
     35c:	4e10      	ldr	r6, [pc, #64]	; (3a0 <AT25SEreadPage+0x4c>)
     35e:	02db      	lsls	r3, r3, #11

    pinLow(cs_mem);
    spiDataOut(MEM_SPI,OPCODE_FASTREAD_ARRAY);
     360:	4d10      	ldr	r5, [pc, #64]	; (3a4 <AT25SEreadPage+0x50>)
     362:	6173      	str	r3, [r6, #20]
     364:	210b      	movs	r1, #11
     366:	2001      	movs	r0, #1
     368:	47a8      	blx	r5
    spiDataOut(MEM_SPI,((startingAddress & 0xFF0000) >> 16));
     36a:	0c39      	lsrs	r1, r7, #16
     36c:	b2c9      	uxtb	r1, r1
     36e:	2001      	movs	r0, #1
     370:	47a8      	blx	r5
    spiDataOut(MEM_SPI,((startingAddress & 0x00FF00) >>  8));
     372:	0a39      	lsrs	r1, r7, #8
     374:	b2c9      	uxtb	r1, r1
     376:	2001      	movs	r0, #1
     378:	47a8      	blx	r5
    spiDataOut(MEM_SPI,((startingAddress & 0x0000FF) >>  0));
     37a:	b2f9      	uxtb	r1, r7
     37c:	2001      	movs	r0, #1
     37e:	47a8      	blx	r5
    spiDataOut(MEM_SPI, 0xFF);
     380:	21ff      	movs	r1, #255	; 0xff
     382:	2001      	movs	r0, #1
     384:	47a8      	blx	r5
     386:	1c65      	adds	r5, r4, #1
     388:	35ff      	adds	r5, #255	; 0xff

    for (u16_t pos = 0; pos < 256; ++pos) {
        data[pos] = spiDataIn(MEM_SPI);
     38a:	2001      	movs	r0, #1
     38c:	4b06      	ldr	r3, [pc, #24]	; (3a8 <AT25SEreadPage+0x54>)
     38e:	4798      	blx	r3
     390:	7020      	strb	r0, [r4, #0]
     392:	3401      	adds	r4, #1
    spiDataOut(MEM_SPI,((startingAddress & 0xFF0000) >> 16));
    spiDataOut(MEM_SPI,((startingAddress & 0x00FF00) >>  8));
    spiDataOut(MEM_SPI,((startingAddress & 0x0000FF) >>  0));
    spiDataOut(MEM_SPI, 0xFF);

    for (u16_t pos = 0; pos < 256; ++pos) {
     394:	42ac      	cmp	r4, r5
     396:	d1f8      	bne.n	38a <AT25SEreadPage+0x36>
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     398:	2380      	movs	r3, #128	; 0x80
     39a:	02db      	lsls	r3, r3, #11
     39c:	61b3      	str	r3, [r6, #24]
        data[pos] = spiDataIn(MEM_SPI);
    }
    pinHigh(cs_mem);

}
     39e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     3a0:	41004400 	.word	0x41004400
     3a4:	00002a21 	.word	0x00002a21
     3a8:	00002a39 	.word	0x00002a39

000003ac <readMS5803AdcResults>:
#include <MS5803.h>
#include <boardDefines.h>
#include <math.h>

u32_t readMS5803AdcResults() {
     3ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     3ae:	2780      	movs	r7, #128	; 0x80
     3b0:	4e0b      	ldr	r6, [pc, #44]	; (3e0 <readMS5803AdcResults+0x34>)
     3b2:	01ff      	lsls	r7, r7, #7

    pinLow(cs_baro);
    spiDataOut(BARO_SPI, cmdAdcRead_);
     3b4:	2100      	movs	r1, #0
     3b6:	4b0b      	ldr	r3, [pc, #44]	; (3e4 <readMS5803AdcResults+0x38>)
     3b8:	6177      	str	r7, [r6, #20]
     3ba:	2002      	movs	r0, #2
     3bc:	4798      	blx	r3
    u8_t _byte1 = spiDataIn(SPI2);
     3be:	4d0a      	ldr	r5, [pc, #40]	; (3e8 <readMS5803AdcResults+0x3c>)
     3c0:	2002      	movs	r0, #2
     3c2:	47a8      	blx	r5
     3c4:	0004      	movs	r4, r0
    u8_t _byte2 = spiDataIn(SPI2);
     3c6:	2002      	movs	r0, #2
     3c8:	47a8      	blx	r5
     3ca:	9001      	str	r0, [sp, #4]
    u8_t _byte3 = spiDataIn(SPI2);
     3cc:	2002      	movs	r0, #2
     3ce:	47a8      	blx	r5
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     3d0:	61b7      	str	r7, [r6, #24]
    pinHigh(cs_baro);

    u32_t _receive = (_byte1 << 16) | (_byte2 << 8) | (_byte3);
    return _receive;
     3d2:	9b01      	ldr	r3, [sp, #4]
     3d4:	0424      	lsls	r4, r4, #16
     3d6:	021b      	lsls	r3, r3, #8
     3d8:	431c      	orrs	r4, r3
     3da:	4320      	orrs	r0, r4
}
     3dc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
     3de:	46c0      	nop			; (mov r8, r8)
     3e0:	41004400 	.word	0x41004400
     3e4:	00002a21 	.word	0x00002a21
     3e8:	00002a39 	.word	0x00002a39

000003ec <ConvertPressureTemperature>:

void ConvertPressureTemperature(u32_t pressureRaw, u32_t tempRaw, u32_t* temperatureCelcus, int32_t* pressureMbar ) {
     3ec:	b5f0      	push	{r4, r5, r6, r7, lr}
     3ee:	b087      	sub	sp, #28
     3f0:	9304      	str	r3, [sp, #16]
    const u16_t C1 = coefficients_[1];
     3f2:	4b24      	ldr	r3, [pc, #144]	; (484 <ConvertPressureTemperature+0x98>)

    u32_t _receive = (_byte1 << 16) | (_byte2 << 8) | (_byte3);
    return _receive;
}

void ConvertPressureTemperature(u32_t pressureRaw, u32_t tempRaw, u32_t* temperatureCelcus, int32_t* pressureMbar ) {
     3f4:	9003      	str	r0, [sp, #12]
     3f6:	0014      	movs	r4, r2
    const u16_t C1 = coefficients_[1];
     3f8:	885a      	ldrh	r2, [r3, #2]
    const u16_t C5 = coefficients_[5];
    const u16_t C6 = coefficients_[6];

    // calculate 1st order pressure and temperature (MS5607 1st order algorithm)
    const  int32_t dT = (tempRaw) - ((int32_t)C5 << 8);
    *temperatureCelcus  = 2000 + (((int64_t)dT * C6) >> 23) ;
     3fa:	4f23      	ldr	r7, [pc, #140]	; (488 <ConvertPressureTemperature+0x9c>)
    u32_t _receive = (_byte1 << 16) | (_byte2 << 8) | (_byte3);
    return _receive;
}

void ConvertPressureTemperature(u32_t pressureRaw, u32_t tempRaw, u32_t* temperatureCelcus, int32_t* pressureMbar ) {
    const u16_t C1 = coefficients_[1];
     3fc:	9200      	str	r2, [sp, #0]
    const u16_t C2 = coefficients_[2];
     3fe:	889a      	ldrh	r2, [r3, #4]
     400:	9201      	str	r2, [sp, #4]
    const u16_t C3 = coefficients_[3];
    const u16_t C4 = coefficients_[4];
     402:	891a      	ldrh	r2, [r3, #8]
}

void ConvertPressureTemperature(u32_t pressureRaw, u32_t tempRaw, u32_t* temperatureCelcus, int32_t* pressureMbar ) {
    const u16_t C1 = coefficients_[1];
    const u16_t C2 = coefficients_[2];
    const u16_t C3 = coefficients_[3];
     404:	88dd      	ldrh	r5, [r3, #6]
    const u16_t C4 = coefficients_[4];
     406:	9202      	str	r2, [sp, #8]
    const u16_t C5 = coefficients_[5];
    const u16_t C6 = coefficients_[6];

    // calculate 1st order pressure and temperature (MS5607 1st order algorithm)
    const  int32_t dT = (tempRaw) - ((int32_t)C5 << 8);
    *temperatureCelcus  = 2000 + (((int64_t)dT * C6) >> 23) ;
     408:	895e      	ldrh	r6, [r3, #10]
     40a:	0236      	lsls	r6, r6, #8
     40c:	1b8e      	subs	r6, r1, r6
     40e:	17f2      	asrs	r2, r6, #31
     410:	9205      	str	r2, [sp, #20]
     412:	8998      	ldrh	r0, [r3, #12]
     414:	0032      	movs	r2, r6
     416:	17f3      	asrs	r3, r6, #31
     418:	2100      	movs	r1, #0
     41a:	47b8      	blx	r7
     41c:	23fa      	movs	r3, #250	; 0xfa
     41e:	0249      	lsls	r1, r1, #9
     420:	0dc0      	lsrs	r0, r0, #23
     422:	4308      	orrs	r0, r1
     424:	00db      	lsls	r3, r3, #3
     426:	18c0      	adds	r0, r0, r3
     428:	6020      	str	r0, [r4, #0]

    const  int64_t OFF   = ((int64_t)C2 << 16) + ((C4 * (int64_t)dT) >> 7);
    const  int64_t SENS  =  ((int64_t)C1 << 15) + ((C3 * (int64_t)dT) >> 8);
    *pressureMbar = ((((pressureRaw * SENS) >> 21) - OFF) >> 15);
     42a:	0032      	movs	r2, r6
     42c:	17f3      	asrs	r3, r6, #31
     42e:	0028      	movs	r0, r5
     430:	2100      	movs	r1, #0
     432:	47b8      	blx	r7
     434:	060c      	lsls	r4, r1, #24
     436:	120b      	asrs	r3, r1, #8
     438:	2100      	movs	r1, #0
     43a:	0a02      	lsrs	r2, r0, #8
     43c:	4322      	orrs	r2, r4
     43e:	9c00      	ldr	r4, [sp, #0]
     440:	03e0      	lsls	r0, r4, #15
     442:	1880      	adds	r0, r0, r2
     444:	4159      	adcs	r1, r3
     446:	9a03      	ldr	r2, [sp, #12]
     448:	2300      	movs	r3, #0
     44a:	47b8      	blx	r7
     44c:	02cb      	lsls	r3, r1, #11
     44e:	0d44      	lsrs	r4, r0, #21
     450:	0032      	movs	r2, r6
     452:	431c      	orrs	r4, r3
     454:	154d      	asrs	r5, r1, #21
     456:	9b05      	ldr	r3, [sp, #20]
     458:	9802      	ldr	r0, [sp, #8]
     45a:	2100      	movs	r1, #0
     45c:	47b8      	blx	r7
     45e:	064b      	lsls	r3, r1, #25
     460:	09c6      	lsrs	r6, r0, #7
     462:	431e      	orrs	r6, r3
     464:	2300      	movs	r3, #0
     466:	11cf      	asrs	r7, r1, #7
     468:	9901      	ldr	r1, [sp, #4]
     46a:	040a      	lsls	r2, r1, #16
     46c:	1992      	adds	r2, r2, r6
     46e:	417b      	adcs	r3, r7
     470:	1aa4      	subs	r4, r4, r2
     472:	419d      	sbcs	r5, r3
     474:	046b      	lsls	r3, r5, #17
     476:	0be4      	lsrs	r4, r4, #15
     478:	431c      	orrs	r4, r3
     47a:	9b04      	ldr	r3, [sp, #16]
     47c:	601c      	str	r4, [r3, #0]

}
     47e:	b007      	add	sp, #28
     480:	bdf0      	pop	{r4, r5, r6, r7, pc}
     482:	46c0      	nop			; (mov r8, r8)
     484:	20000636 	.word	0x20000636
     488:	00003fd1 	.word	0x00003fd1

0000048c <paToFeetNOAA>:

double paToFeetNOAA(int32_t pressureMbar) {
     48c:	b510      	push	{r4, lr}

    double lower =(((double)(pressureMbar)/10)/1013.25);
    double exponent = 0.190284;

    double altFeet = (1-pow(lower,exponent))*145366.45;
     48e:	4b0c      	ldr	r3, [pc, #48]	; (4c0 <paToFeetNOAA+0x34>)
     490:	4798      	blx	r3
     492:	4c0c      	ldr	r4, [pc, #48]	; (4c4 <paToFeetNOAA+0x38>)
     494:	2200      	movs	r2, #0
     496:	4b0c      	ldr	r3, [pc, #48]	; (4c8 <paToFeetNOAA+0x3c>)
     498:	47a0      	blx	r4
     49a:	2200      	movs	r2, #0
     49c:	4b0b      	ldr	r3, [pc, #44]	; (4cc <paToFeetNOAA+0x40>)
     49e:	47a0      	blx	r4
     4a0:	4a0b      	ldr	r2, [pc, #44]	; (4d0 <paToFeetNOAA+0x44>)
     4a2:	4b0c      	ldr	r3, [pc, #48]	; (4d4 <paToFeetNOAA+0x48>)
     4a4:	4c0c      	ldr	r4, [pc, #48]	; (4d8 <paToFeetNOAA+0x4c>)
     4a6:	47a0      	blx	r4
    return altFeet;
     4a8:	4c0c      	ldr	r4, [pc, #48]	; (4dc <paToFeetNOAA+0x50>)
double paToFeetNOAA(int32_t pressureMbar) {

    double lower =(((double)(pressureMbar)/10)/1013.25);
    double exponent = 0.190284;

    double altFeet = (1-pow(lower,exponent))*145366.45;
     4aa:	0002      	movs	r2, r0
     4ac:	000b      	movs	r3, r1
    return altFeet;
     4ae:	2000      	movs	r0, #0
     4b0:	490b      	ldr	r1, [pc, #44]	; (4e0 <paToFeetNOAA+0x54>)
     4b2:	47a0      	blx	r4
     4b4:	4a0b      	ldr	r2, [pc, #44]	; (4e4 <paToFeetNOAA+0x58>)
     4b6:	4b0c      	ldr	r3, [pc, #48]	; (4e8 <paToFeetNOAA+0x5c>)
     4b8:	4c0c      	ldr	r4, [pc, #48]	; (4ec <paToFeetNOAA+0x60>)
     4ba:	47a0      	blx	r4

}
     4bc:	bd10      	pop	{r4, pc}
     4be:	46c0      	nop			; (mov r8, r8)
     4c0:	00006185 	.word	0x00006185
     4c4:	00004cf5 	.word	0x00004cf5
     4c8:	40240000 	.word	0x40240000
     4cc:	408faa00 	.word	0x408faa00
     4d0:	e279dd3c 	.word	0xe279dd3c
     4d4:	3fc85b39 	.word	0x3fc85b39
     4d8:	00002d21 	.word	0x00002d21
     4dc:	00005a31 	.word	0x00005a31
     4e0:	3ff00000 	.word	0x3ff00000
     4e4:	9999999a 	.word	0x9999999a
     4e8:	4101beb3 	.word	0x4101beb3
     4ec:	0000553d 	.word	0x0000553d

000004f0 <readMS5803Coefficients>:



void readMS5803Coefficients() {
     4f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     4f2:	24a2      	movs	r4, #162	; 0xa2
     4f4:	4d11      	ldr	r5, [pc, #68]	; (53c <readMS5803Coefficients+0x4c>)

    for (u8_t coeff_num = 1; coeff_num < 7 ; ++coeff_num ) {
        delay_us(600);
     4f6:	2096      	movs	r0, #150	; 0x96
     4f8:	4e11      	ldr	r6, [pc, #68]	; (540 <readMS5803Coefficients+0x50>)
     4fa:	0080      	lsls	r0, r0, #2
     4fc:	47b0      	blx	r6
        u8_t _cmd = MS5803_CMD_PROM_READ + ((coeff_num)*2);
        delay_us(600);
     4fe:	2096      	movs	r0, #150	; 0x96
     500:	0080      	lsls	r0, r0, #2
     502:	47b0      	blx	r6
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     504:	2380      	movs	r3, #128	; 0x80
     506:	4e0f      	ldr	r6, [pc, #60]	; (544 <readMS5803Coefficients+0x54>)
     508:	01db      	lsls	r3, r3, #7
        pinLow(cs_baro);
        spiDataOut(SPI2, _cmd);
     50a:	0021      	movs	r1, r4
     50c:	6173      	str	r3, [r6, #20]
     50e:	2002      	movs	r0, #2
     510:	4b0d      	ldr	r3, [pc, #52]	; (548 <readMS5803Coefficients+0x58>)
     512:	4798      	blx	r3
        u8_t _byte1 = spiDataIn(SPI2);
     514:	4f0d      	ldr	r7, [pc, #52]	; (54c <readMS5803Coefficients+0x5c>)
     516:	2002      	movs	r0, #2
     518:	47b8      	blx	r7
     51a:	9001      	str	r0, [sp, #4]
        u8_t _byte2 = spiDataIn(SPI2);
     51c:	2002      	movs	r0, #2
     51e:	47b8      	blx	r7
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     520:	2380      	movs	r3, #128	; 0x80
     522:	01db      	lsls	r3, r3, #7
     524:	61b3      	str	r3, [r6, #24]
        pinHigh(cs_baro);
        coefficients_[coeff_num] = (_byte1 << 8) | _byte2;
     526:	9b01      	ldr	r3, [sp, #4]
     528:	3402      	adds	r4, #2
     52a:	021b      	lsls	r3, r3, #8
     52c:	4318      	orrs	r0, r3
     52e:	b2e4      	uxtb	r4, r4
     530:	8028      	strh	r0, [r5, #0]
     532:	3502      	adds	r5, #2



void readMS5803Coefficients() {

    for (u8_t coeff_num = 1; coeff_num < 7 ; ++coeff_num ) {
     534:	2cae      	cmp	r4, #174	; 0xae
     536:	d1de      	bne.n	4f6 <readMS5803Coefficients+0x6>
        u8_t _byte2 = spiDataIn(SPI2);
        pinHigh(cs_baro);
        coefficients_[coeff_num] = (_byte1 << 8) | _byte2;
    }

}
     538:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
     53a:	46c0      	nop			; (mov r8, r8)
     53c:	20000638 	.word	0x20000638
     540:	00000f99 	.word	0x00000f99
     544:	41004400 	.word	0x41004400
     548:	00002a21 	.word	0x00002a21
     54c:	00002a39 	.word	0x00002a39

00000550 <initMS5803Barometer>:

void initMS5803Barometer() {
     550:	b570      	push	{r4, r5, r6, lr}
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     552:	2580      	movs	r5, #128	; 0x80
     554:	4c06      	ldr	r4, [pc, #24]	; (570 <initMS5803Barometer+0x20>)
     556:	01ed      	lsls	r5, r5, #7


    pinLow(cs_baro);
    spiDataOut(BARO_SPI, MS5803_CMD_RES);
     558:	211e      	movs	r1, #30
     55a:	6165      	str	r5, [r4, #20]
     55c:	2002      	movs	r0, #2
     55e:	4b05      	ldr	r3, [pc, #20]	; (574 <initMS5803Barometer+0x24>)
     560:	4798      	blx	r3
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     562:	61a5      	str	r5, [r4, #24]

    pinHigh(cs_baro);
    delay_ms(200);
     564:	20c8      	movs	r0, #200	; 0xc8
     566:	4b04      	ldr	r3, [pc, #16]	; (578 <initMS5803Barometer+0x28>)
     568:	4798      	blx	r3
    readMS5803Coefficients();
     56a:	4b04      	ldr	r3, [pc, #16]	; (57c <initMS5803Barometer+0x2c>)
     56c:	4798      	blx	r3

}
     56e:	bd70      	pop	{r4, r5, r6, pc}
     570:	41004400 	.word	0x41004400
     574:	00002a21 	.word	0x00002a21
     578:	00000fc9 	.word	0x00000fc9
     57c:	000004f1 	.word	0x000004f1

00000580 <MS5803_CRC4>:
                n_rem = (n_rem << 1);
            }
        }
    }
    n_rem = (0x000F & (n_rem >> 12));
    coefficients_[7] = crc_read;
     580:	4b02      	ldr	r3, [pc, #8]	; (58c <MS5803_CRC4+0xc>)
    return (n_rem & 0x00);
}
     582:	2000      	movs	r0, #0
                n_rem = (n_rem << 1);
            }
        }
    }
    n_rem = (0x000F & (n_rem >> 12));
    coefficients_[7] = crc_read;
     584:	7b9a      	ldrb	r2, [r3, #14]
     586:	81da      	strh	r2, [r3, #14]
    return (n_rem & 0x00);
}
     588:	4770      	bx	lr
     58a:	46c0      	nop			; (mov r8, r8)
     58c:	20000636 	.word	0x20000636

00000590 <init>:


void init() {

    /* Set 1 Flash Wait State for 48MHz, cf tables 20.9 and 35.27 in SAMD21 Datasheet */
    NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val;
     590:	211e      	movs	r1, #30
#include <util.h>
#include <boardDefines.h>
#include "math.h"


void init() {
     592:	b5f0      	push	{r4, r5, r6, r7, lr}

    /* Set 1 Flash Wait State for 48MHz, cf tables 20.9 and 35.27 in SAMD21 Datasheet */
    NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val;
     594:	4af0      	ldr	r2, [pc, #960]	; (958 <init+0x3c8>)
#include <util.h>
#include <boardDefines.h>
#include "math.h"


void init() {
     596:	b085      	sub	sp, #20

    /* Set 1 Flash Wait State for 48MHz, cf tables 20.9 and 35.27 in SAMD21 Datasheet */
    NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val;
     598:	6853      	ldr	r3, [r2, #4]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     59a:	2401      	movs	r4, #1
     59c:	438b      	bics	r3, r1
     59e:	391c      	subs	r1, #28
     5a0:	430b      	orrs	r3, r1
     5a2:	6053      	str	r3, [r2, #4]

    /* Turn on the digital interface clock */
    PM->APBAMASK.reg |= PM_APBAMASK_GCLK;
     5a4:	4aed      	ldr	r2, [pc, #948]	; (95c <init+0x3cc>)
     5a6:	3106      	adds	r1, #6
     5a8:	6993      	ldr	r3, [r2, #24]

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     5aa:	260f      	movs	r6, #15
     5ac:	430b      	orrs	r3, r1
     5ae:	6193      	str	r3, [r2, #24]

    SystemInit();
     5b0:	4beb      	ldr	r3, [pc, #940]	; (960 <init+0x3d0>)
     5b2:	4798      	blx	r3
    GclkInit();
     5b4:	4beb      	ldr	r3, [pc, #940]	; (964 <init+0x3d4>)
     5b6:	4798      	blx	r3
    RtcInit();
     5b8:	4beb      	ldr	r3, [pc, #940]	; (968 <init+0x3d8>)
     5ba:	4798      	blx	r3
    delayInit();
     5bc:	4beb      	ldr	r3, [pc, #940]	; (96c <init+0x3dc>)
     5be:	4798      	blx	r3
    adcInit();
     5c0:	4beb      	ldr	r3, [pc, #940]	; (970 <init+0x3e0>)
     5c2:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     5c4:	2240      	movs	r2, #64	; 0x40
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     5c6:	21c1      	movs	r1, #193	; 0xc1

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     5c8:	4bea      	ldr	r3, [pc, #936]	; (974 <init+0x3e4>)
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     5ca:	0089      	lsls	r1, r1, #2

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     5cc:	601a      	str	r2, [r3, #0]
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     5ce:	5858      	ldr	r0, [r3, r1]
     5d0:	4ae9      	ldr	r2, [pc, #932]	; (978 <init+0x3e8>)
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     5d2:	2510      	movs	r5, #16
     5d4:	4002      	ands	r2, r0
     5d6:	505a      	str	r2, [r3, r1]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     5d8:	4be8      	ldr	r3, [pc, #928]	; (97c <init+0x3ec>)
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     5da:	2002      	movs	r0, #2
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     5dc:	0019      	movs	r1, r3
     5de:	3154      	adds	r1, #84	; 0x54
     5e0:	780a      	ldrb	r2, [r1, #0]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     5e2:	001f      	movs	r7, r3
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     5e4:	43a2      	bics	r2, r4
     5e6:	700a      	strb	r2, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     5e8:	2280      	movs	r2, #128	; 0x80
     5ea:	0352      	lsls	r2, r2, #13
     5ec:	609a      	str	r2, [r3, #8]

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     5ee:	3921      	subs	r1, #33	; 0x21
     5f0:	780a      	ldrb	r2, [r1, #0]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     5f2:	3794      	adds	r7, #148	; 0x94

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     5f4:	43b2      	bics	r2, r6
     5f6:	4322      	orrs	r2, r4
     5f8:	700a      	strb	r2, [r1, #0]
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     5fa:	7cca      	ldrb	r2, [r1, #19]
     5fc:	4322      	orrs	r2, r4
     5fe:	74ca      	strb	r2, [r1, #19]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     600:	001a      	movs	r2, r3
     602:	32c3      	adds	r2, #195	; 0xc3
     604:	7811      	ldrb	r1, [r2, #0]
     606:	43a1      	bics	r1, r4
     608:	7011      	strb	r1, [r2, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     60a:	7811      	ldrb	r1, [r2, #0]
     60c:	4301      	orrs	r1, r0
     60e:	7011      	strb	r1, [r2, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     610:	2108      	movs	r1, #8
     612:	468c      	mov	ip, r1
     614:	449c      	add	ip, r3
     616:	4661      	mov	r1, ip
     618:	3006      	adds	r0, #6
     61a:	67c8      	str	r0, [r1, #124]	; 0x7c
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     61c:	0019      	movs	r1, r3
     61e:	31b1      	adds	r1, #177	; 0xb1
     620:	7808      	ldrb	r0, [r1, #0]
     622:	4030      	ands	r0, r6
     624:	4328      	orrs	r0, r5
     626:	7008      	strb	r0, [r1, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     628:	7810      	ldrb	r0, [r2, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     62a:	3d0e      	subs	r5, #14
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     62c:	4320      	orrs	r0, r4
     62e:	7010      	strb	r0, [r2, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     630:	0018      	movs	r0, r3
     632:	30d7      	adds	r0, #215	; 0xd7
     634:	7802      	ldrb	r2, [r0, #0]
     636:	43a2      	bics	r2, r4
     638:	7002      	strb	r2, [r0, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     63a:	2080      	movs	r0, #128	; 0x80
     63c:	4ad0      	ldr	r2, [pc, #832]	; (980 <init+0x3f0>)
     63e:	0400      	lsls	r0, r0, #16
     640:	6010      	str	r0, [r2, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     642:	001a      	movs	r2, r3
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     644:	6038      	str	r0, [r7, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     646:	32c2      	adds	r2, #194	; 0xc2
     648:	7810      	ldrb	r0, [r2, #0]
     64a:	43a0      	bics	r0, r4
     64c:	7010      	strb	r0, [r2, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     64e:	7810      	ldrb	r0, [r2, #0]
     650:	4328      	orrs	r0, r5
     652:	7010      	strb	r0, [r2, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     654:	4660      	mov	r0, ip
     656:	3502      	adds	r5, #2
     658:	67c5      	str	r5, [r0, #124]	; 0x7c

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     65a:	7808      	ldrb	r0, [r1, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     65c:	350c      	adds	r5, #12
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     65e:	43b0      	bics	r0, r6
     660:	4320      	orrs	r0, r4
     662:	7008      	strb	r0, [r1, #0]
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     664:	7811      	ldrb	r1, [r2, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     666:	2002      	movs	r0, #2
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     668:	4321      	orrs	r1, r4
     66a:	7011      	strb	r1, [r2, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     66c:	0019      	movs	r1, r3
     66e:	31d6      	adds	r1, #214	; 0xd6
     670:	780a      	ldrb	r2, [r1, #0]
     672:	43a2      	bics	r2, r4
     674:	700a      	strb	r2, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     676:	2180      	movs	r1, #128	; 0x80
     678:	4ac1      	ldr	r2, [pc, #772]	; (980 <init+0x3f0>)
     67a:	03c9      	lsls	r1, r1, #15
     67c:	6011      	str	r1, [r2, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     67e:	001a      	movs	r2, r3
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     680:	6039      	str	r1, [r7, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     682:	3243      	adds	r2, #67	; 0x43
     684:	7811      	ldrb	r1, [r2, #0]
     686:	3f4b      	subs	r7, #75	; 0x4b
     688:	43a1      	bics	r1, r4
     68a:	7011      	strb	r1, [r2, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     68c:	7811      	ldrb	r1, [r2, #0]
     68e:	4301      	orrs	r1, r0
     690:	7011      	strb	r1, [r2, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     692:	0018      	movs	r0, r3


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     694:	2108      	movs	r1, #8
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     696:	3031      	adds	r0, #49	; 0x31


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     698:	6059      	str	r1, [r3, #4]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     69a:	7801      	ldrb	r1, [r0, #0]
     69c:	4031      	ands	r1, r6
     69e:	430d      	orrs	r5, r1
     6a0:	7005      	strb	r5, [r0, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     6a2:	7811      	ldrb	r1, [r2, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     6a4:	2502      	movs	r5, #2
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     6a6:	4321      	orrs	r1, r4
     6a8:	7011      	strb	r1, [r2, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     6aa:	0019      	movs	r1, r3
     6ac:	3159      	adds	r1, #89	; 0x59
     6ae:	780a      	ldrb	r2, [r1, #0]
     6b0:	43a2      	bics	r2, r4
     6b2:	700a      	strb	r2, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     6b4:	2280      	movs	r2, #128	; 0x80
     6b6:	0492      	lsls	r2, r2, #18
     6b8:	609a      	str	r2, [r3, #8]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     6ba:	615a      	str	r2, [r3, #20]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     6bc:	001a      	movs	r2, r3
     6be:	3242      	adds	r2, #66	; 0x42
     6c0:	7811      	ldrb	r1, [r2, #0]
     6c2:	43a1      	bics	r1, r4
     6c4:	7011      	strb	r1, [r2, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     6c6:	7811      	ldrb	r1, [r2, #0]
     6c8:	4329      	orrs	r1, r5
     6ca:	7011      	strb	r1, [r2, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     6cc:	2104      	movs	r1, #4
     6ce:	6059      	str	r1, [r3, #4]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     6d0:	7801      	ldrb	r1, [r0, #0]
     6d2:	43b1      	bics	r1, r6
     6d4:	4321      	orrs	r1, r4
     6d6:	7001      	strb	r1, [r0, #0]
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     6d8:	7811      	ldrb	r1, [r2, #0]
     6da:	4321      	orrs	r1, r4
     6dc:	7011      	strb	r1, [r2, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     6de:	0019      	movs	r1, r3
     6e0:	3158      	adds	r1, #88	; 0x58
     6e2:	780a      	ldrb	r2, [r1, #0]
     6e4:	43a2      	bics	r2, r4
     6e6:	700a      	strb	r2, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     6e8:	2280      	movs	r2, #128	; 0x80
    pinIn(senseDPin);
    pinMux(senseDPin);
    pinOut(fireDPin);
    pinLow(fireDPin);

    charges.igniterAHot = false;
     6ea:	2100      	movs	r1, #0
     6ec:	0452      	lsls	r2, r2, #17
     6ee:	609a      	str	r2, [r3, #8]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     6f0:	615a      	str	r2, [r3, #20]
     6f2:	4aa4      	ldr	r2, [pc, #656]	; (984 <init+0x3f4>)
     6f4:	7011      	strb	r1, [r2, #0]
    charges.igniterBHot = false;
     6f6:	2100      	movs	r1, #0
     6f8:	7211      	strb	r1, [r2, #8]
    charges.igniterCHot = false;
     6fa:	2100      	movs	r1, #0
     6fc:	7411      	strb	r1, [r2, #16]
    charges.igniterDHot = false;
     6fe:	2100      	movs	r1, #0
     700:	7611      	strb	r1, [r2, #24]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     702:	7dc2      	ldrb	r2, [r0, #23]
     704:	43a2      	bics	r2, r4
     706:	75c2      	strb	r2, [r0, #23]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     708:	2280      	movs	r2, #128	; 0x80
     70a:	0052      	lsls	r2, r2, #1
     70c:	609a      	str	r2, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     70e:	783a      	ldrb	r2, [r7, #0]
     710:	43a2      	bics	r2, r4
     712:	703a      	strb	r2, [r7, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     714:	2280      	movs	r2, #128	; 0x80
     716:	0092      	lsls	r2, r2, #2
     718:	609a      	str	r2, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     71a:	001a      	movs	r2, r3
     71c:	324b      	adds	r2, #75	; 0x4b
     71e:	7811      	ldrb	r1, [r2, #0]
     720:	43a1      	bics	r1, r4
     722:	7011      	strb	r1, [r2, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     724:	7811      	ldrb	r1, [r2, #0]
     726:	4329      	orrs	r1, r5
     728:	7011      	strb	r1, [r2, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     72a:	2180      	movs	r1, #128	; 0x80
     72c:	0109      	lsls	r1, r1, #4
     72e:	6059      	str	r1, [r3, #4]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     730:	2135      	movs	r1, #53	; 0x35
     732:	468c      	mov	ip, r1
     734:	449c      	add	ip, r3
     736:	4661      	mov	r1, ip
     738:	7809      	ldrb	r1, [r1, #0]
     73a:	351e      	adds	r5, #30
     73c:	4031      	ands	r1, r6
     73e:	4329      	orrs	r1, r5
     740:	4665      	mov	r5, ip
     742:	7029      	strb	r1, [r5, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     744:	7811      	ldrb	r1, [r2, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     746:	2520      	movs	r5, #32
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     748:	4321      	orrs	r1, r4
     74a:	7011      	strb	r1, [r2, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     74c:	0019      	movs	r1, r3
     74e:	3134      	adds	r1, #52	; 0x34
     750:	780a      	ldrb	r2, [r1, #0]
     752:	4032      	ands	r2, r6
     754:	432a      	orrs	r2, r5
     756:	700a      	strb	r2, [r1, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     758:	783a      	ldrb	r2, [r7, #0]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     75a:	3d1e      	subs	r5, #30
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     75c:	4322      	orrs	r2, r4
     75e:	703a      	strb	r2, [r7, #0]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     760:	780a      	ldrb	r2, [r1, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     762:	3706      	adds	r7, #6

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     764:	43b2      	bics	r2, r6
     766:	432a      	orrs	r2, r5
     768:	700a      	strb	r2, [r1, #0]
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     76a:	7dc2      	ldrb	r2, [r0, #23]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     76c:	3196      	adds	r1, #150	; 0x96
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     76e:	4322      	orrs	r2, r4
     770:	75c2      	strb	r2, [r0, #23]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     772:	780a      	ldrb	r2, [r1, #0]
     774:	43a2      	bics	r2, r4
     776:	700a      	strb	r2, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     778:	2280      	movs	r2, #128	; 0x80
     77a:	4981      	ldr	r1, [pc, #516]	; (980 <init+0x3f0>)
     77c:	00d2      	lsls	r2, r2, #3
     77e:	600a      	str	r2, [r1, #0]
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     780:	0019      	movs	r1, r3
     782:	3198      	adds	r1, #152	; 0x98
     784:	600a      	str	r2, [r1, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     786:	7e41      	ldrb	r1, [r0, #25]
     788:	43a1      	bics	r1, r4
     78a:	7641      	strb	r1, [r0, #25]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     78c:	609a      	str	r2, [r3, #8]
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     78e:	619a      	str	r2, [r3, #24]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     790:	7fc2      	ldrb	r2, [r0, #31]
     792:	43a2      	bics	r2, r4
     794:	77c2      	strb	r2, [r0, #31]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     796:	2280      	movs	r2, #128	; 0x80
     798:	0252      	lsls	r2, r2, #9
     79a:	609a      	str	r2, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     79c:	78ba      	ldrb	r2, [r7, #2]
     79e:	43a2      	bics	r2, r4
     7a0:	70ba      	strb	r2, [r7, #2]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     7a2:	2280      	movs	r2, #128	; 0x80
     7a4:	0292      	lsls	r2, r2, #10
     7a6:	609a      	str	r2, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     7a8:	001a      	movs	r2, r3
     7aa:	3253      	adds	r2, #83	; 0x53
     7ac:	7811      	ldrb	r1, [r2, #0]
     7ae:	43a1      	bics	r1, r4
     7b0:	7011      	strb	r1, [r2, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     7b2:	7811      	ldrb	r1, [r2, #0]
     7b4:	4329      	orrs	r1, r5
     7b6:	7011      	strb	r1, [r2, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     7b8:	2180      	movs	r1, #128	; 0x80
     7ba:	0309      	lsls	r1, r1, #12
     7bc:	6059      	str	r1, [r3, #4]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     7be:	2139      	movs	r1, #57	; 0x39
     7c0:	468c      	mov	ip, r1
     7c2:	449c      	add	ip, r3
     7c4:	4661      	mov	r1, ip
     7c6:	7809      	ldrb	r1, [r1, #0]
     7c8:	351e      	adds	r5, #30
     7ca:	4031      	ands	r1, r6
     7cc:	4329      	orrs	r1, r5
     7ce:	4665      	mov	r5, ip
     7d0:	7029      	strb	r1, [r5, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     7d2:	7811      	ldrb	r1, [r2, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     7d4:	2520      	movs	r5, #32
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     7d6:	4321      	orrs	r1, r4
     7d8:	7011      	strb	r1, [r2, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     7da:	0019      	movs	r1, r3
     7dc:	3138      	adds	r1, #56	; 0x38
     7de:	780a      	ldrb	r2, [r1, #0]
     7e0:	4032      	ands	r2, r6
     7e2:	432a      	orrs	r2, r5
     7e4:	700a      	strb	r2, [r1, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     7e6:	78ba      	ldrb	r2, [r7, #2]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     7e8:	3d1e      	subs	r5, #30
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     7ea:	4322      	orrs	r2, r4
     7ec:	70ba      	strb	r2, [r7, #2]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     7ee:	780a      	ldrb	r2, [r1, #0]
     7f0:	43b2      	bics	r2, r6
     7f2:	432a      	orrs	r2, r5
     7f4:	700a      	strb	r2, [r1, #0]
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     7f6:	7fc2      	ldrb	r2, [r0, #31]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     7f8:	3114      	adds	r1, #20
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     7fa:	4322      	orrs	r2, r4
     7fc:	77c2      	strb	r2, [r0, #31]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     7fe:	798a      	ldrb	r2, [r1, #6]
     800:	43a2      	bics	r2, r4
     802:	718a      	strb	r2, [r1, #6]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     804:	2280      	movs	r2, #128	; 0x80
     806:	02d2      	lsls	r2, r2, #11
     808:	609a      	str	r2, [r3, #8]
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     80a:	619a      	str	r2, [r3, #24]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     80c:	9103      	str	r1, [sp, #12]
     80e:	780a      	ldrb	r2, [r1, #0]
     810:	43a2      	bics	r2, r4
     812:	700a      	strb	r2, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     814:	2280      	movs	r2, #128	; 0x80
     816:	0152      	lsls	r2, r2, #5
     818:	609a      	str	r2, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     81a:	783a      	ldrb	r2, [r7, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     81c:	2120      	movs	r1, #32
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     81e:	43a2      	bics	r2, r4
     820:	703a      	strb	r2, [r7, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     822:	2280      	movs	r2, #128	; 0x80
     824:	0212      	lsls	r2, r2, #8
     826:	609a      	str	r2, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     828:	001a      	movs	r2, r3
     82a:	324d      	adds	r2, #77	; 0x4d
     82c:	7810      	ldrb	r0, [r2, #0]
     82e:	43a0      	bics	r0, r4
     830:	7010      	strb	r0, [r2, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     832:	7810      	ldrb	r0, [r2, #0]
     834:	4328      	orrs	r0, r5
     836:	7010      	strb	r0, [r2, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     838:	2080      	movs	r0, #128	; 0x80
     83a:	0180      	lsls	r0, r0, #6
     83c:	6058      	str	r0, [r3, #4]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     83e:	0018      	movs	r0, r3
     840:	3036      	adds	r0, #54	; 0x36
     842:	7805      	ldrb	r5, [r0, #0]
     844:	4035      	ands	r5, r6
     846:	430d      	orrs	r5, r1
     848:	7005      	strb	r5, [r0, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     84a:	7811      	ldrb	r1, [r2, #0]
     84c:	000d      	movs	r5, r1
     84e:	4325      	orrs	r5, r4
     850:	7015      	strb	r5, [r2, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     852:	2237      	movs	r2, #55	; 0x37
     854:	4694      	mov	ip, r2
     856:	449c      	add	ip, r3
     858:	4662      	mov	r2, ip
     85a:	2120      	movs	r1, #32
     85c:	7812      	ldrb	r2, [r2, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     85e:	2502      	movs	r5, #2
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     860:	4032      	ands	r2, r6
     862:	430a      	orrs	r2, r1
     864:	4661      	mov	r1, ip
     866:	700a      	strb	r2, [r1, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     868:	2102      	movs	r1, #2
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     86a:	783a      	ldrb	r2, [r7, #0]
     86c:	4322      	orrs	r2, r4
     86e:	703a      	strb	r2, [r7, #0]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     870:	7802      	ldrb	r2, [r0, #0]
     872:	43b2      	bics	r2, r6
     874:	430a      	orrs	r2, r1
     876:	7002      	strb	r2, [r0, #0]
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     878:	9a03      	ldr	r2, [sp, #12]
     87a:	9903      	ldr	r1, [sp, #12]
     87c:	7812      	ldrb	r2, [r2, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     87e:	3020      	adds	r0, #32
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     880:	4322      	orrs	r2, r4
     882:	700a      	strb	r2, [r1, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     884:	0019      	movs	r1, r3
     886:	314e      	adds	r1, #78	; 0x4e
     888:	780a      	ldrb	r2, [r1, #0]
     88a:	43a2      	bics	r2, r4
     88c:	700a      	strb	r2, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     88e:	2280      	movs	r2, #128	; 0x80
     890:	01d2      	lsls	r2, r2, #7
     892:	609a      	str	r2, [r3, #8]
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     894:	619a      	str	r2, [r3, #24]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     896:	001a      	movs	r2, r3
     898:	3255      	adds	r2, #85	; 0x55
     89a:	7811      	ldrb	r1, [r2, #0]
     89c:	43a1      	bics	r1, r4
     89e:	7011      	strb	r1, [r2, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     8a0:	2180      	movs	r1, #128	; 0x80
     8a2:	0389      	lsls	r1, r1, #14
     8a4:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
}


inline static void pinCfg(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].reg = p.cfg;
     8a6:	2140      	movs	r1, #64	; 0x40
     8a8:	7011      	strb	r1, [r2, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     8aa:	7802      	ldrb	r2, [r0, #0]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     8ac:	0019      	movs	r1, r3
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     8ae:	43a2      	bics	r2, r4
     8b0:	7002      	strb	r2, [r0, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     8b2:	2280      	movs	r2, #128	; 0x80
     8b4:	03d2      	lsls	r2, r2, #15

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     8b6:	313b      	adds	r1, #59	; 0x3b
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     8b8:	609a      	str	r2, [r3, #8]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     8ba:	780a      	ldrb	r2, [r1, #0]
     8bc:	43b2      	bics	r2, r6
     8be:	432a      	orrs	r2, r5
     8c0:	700a      	strb	r2, [r1, #0]
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     8c2:	7802      	ldrb	r2, [r0, #0]
    pinOut(TxPo);
    pinMux(TxPo);
    pinIn(RxPo);
    pinMux(RxPo);

    sercomClockEnable(SPI2, 3, 4);
     8c4:	4f30      	ldr	r7, [pc, #192]	; (988 <init+0x3f8>)
     8c6:	4322      	orrs	r2, r4
     8c8:	7002      	strb	r2, [r0, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     8ca:	001a      	movs	r2, r3
     8cc:	3257      	adds	r2, #87	; 0x57
     8ce:	7810      	ldrb	r0, [r2, #0]
     8d0:	43a0      	bics	r0, r4
     8d2:	7010      	strb	r0, [r2, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     8d4:	7810      	ldrb	r0, [r2, #0]
     8d6:	4328      	orrs	r0, r5
     8d8:	7010      	strb	r0, [r2, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     8da:	2080      	movs	r0, #128	; 0x80
     8dc:	0400      	lsls	r0, r0, #16
     8de:	6058      	str	r0, [r3, #4]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     8e0:	2020      	movs	r0, #32
     8e2:	780b      	ldrb	r3, [r1, #0]
     8e4:	4033      	ands	r3, r6
     8e6:	4303      	orrs	r3, r0
     8e8:	700b      	strb	r3, [r1, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     8ea:	7813      	ldrb	r3, [r2, #0]
     8ec:	0028      	movs	r0, r5
     8ee:	4323      	orrs	r3, r4
     8f0:	7013      	strb	r3, [r2, #0]
     8f2:	2103      	movs	r1, #3
     8f4:	2204      	movs	r2, #4
     8f6:	47b8      	blx	r7
    sercomSpiMasterInit(SPI2, 1, 3, 0, 0, 0x00);
     8f8:	2300      	movs	r3, #0
     8fa:	4e24      	ldr	r6, [pc, #144]	; (98c <init+0x3fc>)
     8fc:	9301      	str	r3, [sp, #4]
     8fe:	9300      	str	r3, [sp, #0]
     900:	0021      	movs	r1, r4
     902:	0028      	movs	r0, r5
     904:	2203      	movs	r2, #3
     906:	47b0      	blx	r6

    sercomClockEnable(SPI0, 3, 4);
     908:	2204      	movs	r2, #4
     90a:	2103      	movs	r1, #3
     90c:	2000      	movs	r0, #0
     90e:	47b8      	blx	r7
    sercomSpiMasterInit(SPI0, 3, 0, 0, 0, 0x00);
     910:	2300      	movs	r3, #0
     912:	2103      	movs	r1, #3
     914:	9301      	str	r3, [sp, #4]
     916:	9300      	str	r3, [sp, #0]
     918:	001a      	movs	r2, r3
     91a:	0018      	movs	r0, r3
     91c:	47b0      	blx	r6

    sercomClockEnable(SPI1, 3, 4);
     91e:	0020      	movs	r0, r4
     920:	2204      	movs	r2, #4
     922:	2103      	movs	r1, #3
     924:	47b8      	blx	r7
    sercomSpiMasterInit(SPI1, 3, 0, 0, 0, 0x00);
     926:	2300      	movs	r3, #0
     928:	0020      	movs	r0, r4
     92a:	9301      	str	r3, [sp, #4]
     92c:	9300      	str	r3, [sp, #0]
     92e:	001a      	movs	r2, r3
     930:	2103      	movs	r1, #3
     932:	47b0      	blx	r6

    sercomClockEnable(USART3, 4, 8);
     934:	2208      	movs	r2, #8
     936:	2104      	movs	r1, #4
     938:	2003      	movs	r0, #3
     93a:	47b8      	blx	r7
    sercomUartInit(USART3,1,0,19200);
     93c:	2396      	movs	r3, #150	; 0x96
     93e:	0021      	movs	r1, r4
     940:	2200      	movs	r2, #0
     942:	2003      	movs	r0, #3
     944:	01db      	lsls	r3, r3, #7
     946:	4c12      	ldr	r4, [pc, #72]	; (990 <init+0x400>)
     948:	47a0      	blx	r4

    TC4Init();
     94a:	4b12      	ldr	r3, [pc, #72]	; (994 <init+0x404>)
     94c:	4798      	blx	r3
    TC5Init();
     94e:	4b12      	ldr	r3, [pc, #72]	; (998 <init+0x408>)
     950:	4798      	blx	r3
}
     952:	b005      	add	sp, #20
     954:	bdf0      	pop	{r4, r5, r6, r7, pc}
     956:	46c0      	nop			; (mov r8, r8)
     958:	41004000 	.word	0x41004000
     95c:	40000400 	.word	0x40000400
     960:	000001d5 	.word	0x000001d5
     964:	00000df1 	.word	0x00000df1
     968:	00000e79 	.word	0x00000e79
     96c:	00000f79 	.word	0x00000f79
     970:	00000c55 	.word	0x00000c55
     974:	e000e100 	.word	0xe000e100
     978:	ff00ffff 	.word	0xff00ffff
     97c:	41004400 	.word	0x41004400
     980:	41004488 	.word	0x41004488
     984:	20000678 	.word	0x20000678
     988:	000028f9 	.word	0x000028f9
     98c:	0000295d 	.word	0x0000295d
     990:	000029c1 	.word	0x000029c1
     994:	00001049 	.word	0x00001049
     998:	000010b1 	.word	0x000010b1

0000099c <main>:


int main(void) {
     99c:	b510      	push	{r4, lr}

    init();
     99e:	4b12      	ldr	r3, [pc, #72]	; (9e8 <main+0x4c>)
     9a0:	4798      	blx	r3

    initMS5803Barometer();
     9a2:	4b12      	ldr	r3, [pc, #72]	; (9ec <main+0x50>)
     9a4:	4798      	blx	r3
    IMUinit();
     9a6:	4b12      	ldr	r3, [pc, #72]	; (9f0 <main+0x54>)
     9a8:	4798      	blx	r3

    computeKalmanGains();
     9aa:	4b12      	ldr	r3, [pc, #72]	; (9f4 <main+0x58>)
     9ac:	4798      	blx	r3

    sampleTick();
     9ae:	4c12      	ldr	r4, [pc, #72]	; (9f8 <main+0x5c>)
     9b0:	47a0      	blx	r4

    POST();
     9b2:	4b12      	ldr	r3, [pc, #72]	; (9fc <main+0x60>)
     9b4:	4798      	blx	r3

    isItPointingUp();
     9b6:	4b12      	ldr	r3, [pc, #72]	; (a00 <main+0x64>)
     9b8:	4798      	blx	r3

    getSettings();
     9ba:	4b12      	ldr	r3, [pc, #72]	; (a04 <main+0x68>)
     9bc:	4798      	blx	r3

    beep(400);
     9be:	20c8      	movs	r0, #200	; 0xc8
     9c0:	4b11      	ldr	r3, [pc, #68]	; (a08 <main+0x6c>)
     9c2:	0040      	lsls	r0, r0, #1
     9c4:	4798      	blx	r3

    startupTick = millis();
     9c6:	4b11      	ldr	r3, [pc, #68]	; (a0c <main+0x70>)
     9c8:	4798      	blx	r3
     9ca:	4b11      	ldr	r3, [pc, #68]	; (a10 <main+0x74>)
     9cc:	6018      	str	r0, [r3, #0]

    while (1) {
        if (takeSample()) {
     9ce:	4b11      	ldr	r3, [pc, #68]	; (a14 <main+0x78>)
     9d0:	4798      	blx	r3
     9d2:	2800      	cmp	r0, #0
     9d4:	d0fb      	beq.n	9ce <main+0x32>
            sampleTick();
     9d6:	47a0      	blx	r4
            flight();
     9d8:	4b0f      	ldr	r3, [pc, #60]	; (a18 <main+0x7c>)
     9da:	4798      	blx	r3
            igniterTick();
     9dc:	4b0f      	ldr	r3, [pc, #60]	; (a1c <main+0x80>)
     9de:	4798      	blx	r3
            computeKalmanStates();
     9e0:	4b0f      	ldr	r3, [pc, #60]	; (a20 <main+0x84>)
     9e2:	4798      	blx	r3
     9e4:	e7f3      	b.n	9ce <main+0x32>
     9e6:	46c0      	nop			; (mov r8, r8)
     9e8:	00000591 	.word	0x00000591
     9ec:	00000551 	.word	0x00000551
     9f0:	00000a25 	.word	0x00000a25
     9f4:	000016f1 	.word	0x000016f1
     9f8:	00002625 	.word	0x00002625
     9fc:	00000b5d 	.word	0x00000b5d
     a00:	0000142d 	.word	0x0000142d
     a04:	00002b65 	.word	0x00002b65
     a08:	00000d39 	.word	0x00000d39
     a0c:	00001015 	.word	0x00001015
     a10:	20000524 	.word	0x20000524
     a14:	0000260d 	.word	0x0000260d
     a18:	00001119 	.word	0x00001119
     a1c:	00001509 	.word	0x00001509
     a20:	00001f91 	.word	0x00001f91

00000a24 <IMUinit>:
#include <util.h>
#include <boardDefines.h>


void IMUinit() {
     a24:	b570      	push	{r4, r5, r6, lr}
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     a26:	4c08      	ldr	r4, [pc, #32]	; (a48 <IMUinit+0x24>)
     a28:	2580      	movs	r5, #128	; 0x80
     a2a:	0023      	movs	r3, r4
     a2c:	00ed      	lsls	r5, r5, #3
     a2e:	3394      	adds	r3, #148	; 0x94
     a30:	601d      	str	r5, [r3, #0]

    pinLow(cs_accel);
    spiDataOut(SPI0, BMI_ACCEL_PMU_RANGE);
     a32:	4e06      	ldr	r6, [pc, #24]	; (a4c <IMUinit+0x28>)
     a34:	210f      	movs	r1, #15
     a36:	2000      	movs	r0, #0
     a38:	47b0      	blx	r6
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     a3a:	3498      	adds	r4, #152	; 0x98
    spiDataOut(SPI0, BMI_ACCEL_16G_RANGE);
     a3c:	210c      	movs	r1, #12
     a3e:	2000      	movs	r0, #0
     a40:	47b0      	blx	r6
     a42:	6025      	str	r5, [r4, #0]
    pinHigh(cs_accel);

}
     a44:	bd70      	pop	{r4, r5, r6, pc}
     a46:	46c0      	nop			; (mov r8, r8)
     a48:	41004400 	.word	0x41004400
     a4c:	00002a21 	.word	0x00002a21

00000a50 <USARTconnectionAvaliable>:

bool USARTconnectionAvaliable() {
     a50:	b510      	push	{r4, lr}

    if (sercom(USART3)->SPI.INTFLAG.bit.RXC == 1) {
     a52:	4b09      	ldr	r3, [pc, #36]	; (a78 <USARTconnectionAvaliable+0x28>)
     a54:	7e1c      	ldrb	r4, [r3, #24]
     a56:	0764      	lsls	r4, r4, #29
     a58:	0fe4      	lsrs	r4, r4, #31
     a5a:	2c01      	cmp	r4, #1
     a5c:	d001      	beq.n	a62 <USARTconnectionAvaliable+0x12>
            return true;
        } else {
            return false;
        }
    }
    return false;
     a5e:	2000      	movs	r0, #0
     a60:	e009      	b.n	a76 <USARTconnectionAvaliable+0x26>
}

bool USARTconnectionAvaliable() {

    if (sercom(USART3)->SPI.INTFLAG.bit.RXC == 1) {
        u8_t connectAttempt = usartDataIn(USART3);
     a62:	2003      	movs	r0, #3
     a64:	4b05      	ldr	r3, [pc, #20]	; (a7c <USARTconnectionAvaliable+0x2c>)
     a66:	4798      	blx	r3
     a68:	1e01      	subs	r1, r0, #0
        if (connectAttempt == 0x48) {
     a6a:	2948      	cmp	r1, #72	; 0x48
     a6c:	d1f7      	bne.n	a5e <USARTconnectionAvaliable+0xe>
            usartDataOut(USART3, 'H');
     a6e:	2003      	movs	r0, #3
     a70:	4b03      	ldr	r3, [pc, #12]	; (a80 <USARTconnectionAvaliable+0x30>)
     a72:	4798      	blx	r3
            return true;
     a74:	0020      	movs	r0, r4
        } else {
            return false;
        }
    }
    return false;
}
     a76:	bd10      	pop	{r4, pc}
     a78:	42001400 	.word	0x42001400
     a7c:	00002a6d 	.word	0x00002a6d
     a80:	00002a55 	.word	0x00002a55

00000a84 <sendTheasePagesToComputer>:

void sendTheasePagesToComputer(u32_t firstPage, u32_t lastPage) {
     a84:	b5f0      	push	{r4, r5, r6, r7, lr}
    for (u16_t page = 0; page <= pagesToSend; ++page) {

        u8_t data[256];
        AT25SEreadPage(pageToReadAddress , data);

        for (u16_t dataByte = 0; dataByte < 256; ++dataByte) {
     a86:	2780      	movs	r7, #128	; 0x80
        }
    }
    return false;
}

void sendTheasePagesToComputer(u32_t firstPage, u32_t lastPage) {
     a88:	0005      	movs	r5, r0

    u16_t pagesToSend = (lastPage - firstPage) >> 8;

    u32_t pageToReadAddress = firstPage;

    for (u16_t page = 0; page <= pagesToSend; ++page) {
     a8a:	2400      	movs	r4, #0
    return false;
}

void sendTheasePagesToComputer(u32_t firstPage, u32_t lastPage) {

    u16_t pagesToSend = (lastPage - firstPage) >> 8;
     a8c:	1a09      	subs	r1, r1, r0
     a8e:	0a09      	lsrs	r1, r1, #8
        }
    }
    return false;
}

void sendTheasePagesToComputer(u32_t firstPage, u32_t lastPage) {
     a90:	b0c3      	sub	sp, #268	; 0x10c

    u16_t pagesToSend = (lastPage - firstPage) >> 8;
     a92:	b28b      	uxth	r3, r1
     a94:	9301      	str	r3, [sp, #4]
    for (u16_t page = 0; page <= pagesToSend; ++page) {

        u8_t data[256];
        AT25SEreadPage(pageToReadAddress , data);

        for (u16_t dataByte = 0; dataByte < 256; ++dataByte) {
     a96:	007f      	lsls	r7, r7, #1
    u32_t pageToReadAddress = firstPage;

    for (u16_t page = 0; page <= pagesToSend; ++page) {

        u8_t data[256];
        AT25SEreadPage(pageToReadAddress , data);
     a98:	a902      	add	r1, sp, #8
     a9a:	0028      	movs	r0, r5
     a9c:	4b09      	ldr	r3, [pc, #36]	; (ac4 <sendTheasePagesToComputer+0x40>)
     a9e:	4798      	blx	r3
     aa0:	2600      	movs	r6, #0

        for (u16_t dataByte = 0; dataByte < 256; ++dataByte) {
            usartDataOut(USART3, data[dataByte]);
     aa2:	ab02      	add	r3, sp, #8
     aa4:	5d99      	ldrb	r1, [r3, r6]
     aa6:	2003      	movs	r0, #3
     aa8:	4b07      	ldr	r3, [pc, #28]	; (ac8 <sendTheasePagesToComputer+0x44>)
     aaa:	3601      	adds	r6, #1
     aac:	4798      	blx	r3
    for (u16_t page = 0; page <= pagesToSend; ++page) {

        u8_t data[256];
        AT25SEreadPage(pageToReadAddress , data);

        for (u16_t dataByte = 0; dataByte < 256; ++dataByte) {
     aae:	42be      	cmp	r6, r7
     ab0:	d1f7      	bne.n	aa2 <sendTheasePagesToComputer+0x1e>

    u16_t pagesToSend = (lastPage - firstPage) >> 8;

    u32_t pageToReadAddress = firstPage;

    for (u16_t page = 0; page <= pagesToSend; ++page) {
     ab2:	3401      	adds	r4, #1
     ab4:	9b01      	ldr	r3, [sp, #4]

        for (u16_t dataByte = 0; dataByte < 256; ++dataByte) {
            usartDataOut(USART3, data[dataByte]);
        }

        pageToReadAddress = pageToReadAddress + 0x100;
     ab6:	3501      	adds	r5, #1

    u16_t pagesToSend = (lastPage - firstPage) >> 8;

    u32_t pageToReadAddress = firstPage;

    for (u16_t page = 0; page <= pagesToSend; ++page) {
     ab8:	b2a4      	uxth	r4, r4

        for (u16_t dataByte = 0; dataByte < 256; ++dataByte) {
            usartDataOut(USART3, data[dataByte]);
        }

        pageToReadAddress = pageToReadAddress + 0x100;
     aba:	35ff      	adds	r5, #255	; 0xff

    u16_t pagesToSend = (lastPage - firstPage) >> 8;

    u32_t pageToReadAddress = firstPage;

    for (u16_t page = 0; page <= pagesToSend; ++page) {
     abc:	42a3      	cmp	r3, r4
     abe:	d2eb      	bcs.n	a98 <sendTheasePagesToComputer+0x14>
            usartDataOut(USART3, data[dataByte]);
        }

        pageToReadAddress = pageToReadAddress + 0x100;
    }
}
     ac0:	b043      	add	sp, #268	; 0x10c
     ac2:	bdf0      	pop	{r4, r5, r6, r7, pc}
     ac4:	00000355 	.word	0x00000355
     ac8:	00002a55 	.word	0x00002a55

00000acc <altitudeAGL>:

int32_t altitudeAGL() {
    return altitude - offsets.groundOffset;
     acc:	4b07      	ldr	r3, [pc, #28]	; (aec <altitudeAGL+0x20>)

        pageToReadAddress = pageToReadAddress + 0x100;
    }
}

int32_t altitudeAGL() {
     ace:	b510      	push	{r4, lr}
    return altitude - offsets.groundOffset;
     ad0:	6998      	ldr	r0, [r3, #24]
     ad2:	4b07      	ldr	r3, [pc, #28]	; (af0 <altitudeAGL+0x24>)
     ad4:	4798      	blx	r3
     ad6:	000b      	movs	r3, r1
     ad8:	4906      	ldr	r1, [pc, #24]	; (af4 <altitudeAGL+0x28>)
     ada:	0002      	movs	r2, r0
     adc:	6808      	ldr	r0, [r1, #0]
     ade:	6849      	ldr	r1, [r1, #4]
     ae0:	4c05      	ldr	r4, [pc, #20]	; (af8 <altitudeAGL+0x2c>)
     ae2:	47a0      	blx	r4
     ae4:	4b05      	ldr	r3, [pc, #20]	; (afc <altitudeAGL+0x30>)
     ae6:	4798      	blx	r3
}
     ae8:	bd10      	pop	{r4, pc}
     aea:	46c0      	nop			; (mov r8, r8)
     aec:	200004d8 	.word	0x200004d8
     af0:	00006209 	.word	0x00006209
     af4:	200006b0 	.word	0x200006b0
     af8:	00005a31 	.word	0x00005a31
     afc:	00006119 	.word	0x00006119

00000b00 <unplugged>:


bool unplugged() {
    if (sample.voltage.batFloat < 3.3) {
     b00:	4b07      	ldr	r3, [pc, #28]	; (b20 <unplugged+0x20>)
int32_t altitudeAGL() {
    return altitude - offsets.groundOffset;
}


bool unplugged() {
     b02:	b570      	push	{r4, r5, r6, lr}
     b04:	68d8      	ldr	r0, [r3, #12]
     b06:	4b07      	ldr	r3, [pc, #28]	; (b24 <unplugged+0x24>)
     b08:	4798      	blx	r3
     b0a:	4a07      	ldr	r2, [pc, #28]	; (b28 <unplugged+0x28>)
     b0c:	4b07      	ldr	r3, [pc, #28]	; (b2c <unplugged+0x2c>)
     b0e:	4d08      	ldr	r5, [pc, #32]	; (b30 <unplugged+0x30>)
     b10:	2401      	movs	r4, #1
     b12:	47a8      	blx	r5
     b14:	2800      	cmp	r0, #0
     b16:	d100      	bne.n	b1a <unplugged+0x1a>
     b18:	1c04      	adds	r4, r0, #0
     b1a:	b2e0      	uxtb	r0, r4
    if (sample.voltage.batFloat < 3.3) {
        return true;
    } else {
        return false;
    }
}
     b1c:	bd70      	pop	{r4, r5, r6, pc}
     b1e:	46c0      	nop			; (mov r8, r8)
     b20:	200007e0 	.word	0x200007e0
     b24:	00006279 	.word	0x00006279
     b28:	66666666 	.word	0x66666666
     b2c:	400a6666 	.word	0x400a6666
     b30:	00003f81 	.word	0x00003f81

00000b34 <finishFlight>:

void finishFlight() {

    flightState = flightIdle;
     b34:	2201      	movs	r2, #1
    } else {
        return false;
    }
}

void finishFlight() {
     b36:	b510      	push	{r4, lr}

    flightState = flightIdle;
     b38:	4b04      	ldr	r3, [pc, #16]	; (b4c <finishFlight+0x18>)
     b3a:	701a      	strb	r2, [r3, #0]
    AT25SFHoldTillReady();
     b3c:	4b04      	ldr	r3, [pc, #16]	; (b50 <finishFlight+0x1c>)
     b3e:	4798      	blx	r3
    writeFlightEndAddress( );
     b40:	4b04      	ldr	r3, [pc, #16]	; (b54 <finishFlight+0x20>)
     b42:	4798      	blx	r3
    unpluggedJingle();
     b44:	4b04      	ldr	r3, [pc, #16]	; (b58 <finishFlight+0x24>)
     b46:	4798      	blx	r3
}
     b48:	bd10      	pop	{r4, pc}
     b4a:	46c0      	nop			; (mov r8, r8)
     b4c:	20000698 	.word	0x20000698
     b50:	000001e5 	.word	0x000001e5
     b54:	00002521 	.word	0x00002521
     b58:	00000dad 	.word	0x00000dad

00000b5c <POST>:

void POST() {
     b5c:	b5f0      	push	{r4, r5, r6, r7, lr}

    bool postFailed = false;
    u8_t failType = 0;

    //Baro post first
    u8_t crc = MS5803_CRC4();
     b5e:	4b32      	ldr	r3, [pc, #200]	; (c28 <POST+0xcc>)
    AT25SFHoldTillReady();
    writeFlightEndAddress( );
    unpluggedJingle();
}

void POST() {
     b60:	b085      	sub	sp, #20

    bool postFailed = false;
    u8_t failType = 0;

    //Baro post first
    u8_t crc = MS5803_CRC4();
     b62:	4798      	blx	r3
    if (crc != coefficients_[7]) {
     b64:	4b31      	ldr	r3, [pc, #196]	; (c2c <POST+0xd0>)
     b66:	b280      	uxth	r0, r0
     b68:	89db      	ldrh	r3, [r3, #14]
        postFailed = true;
        failType = 1;
     b6a:	2401      	movs	r4, #1
    bool postFailed = false;
    u8_t failType = 0;

    //Baro post first
    u8_t crc = MS5803_CRC4();
    if (crc != coefficients_[7]) {
     b6c:	4283      	cmp	r3, r0
     b6e:	d100      	bne.n	b72 <POST+0x16>

void POST() {
    uint8_t dummy_Tx = 0xFF;

    bool postFailed = false;
    u8_t failType = 0;
     b70:	2400      	movs	r4, #0
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     b72:	2780      	movs	r7, #128	; 0x80
     b74:	4d2e      	ldr	r5, [pc, #184]	; (c30 <POST+0xd4>)
     b76:	02ff      	lsls	r7, r7, #11
        failType = 1;
    }

    //Memory Post
    pinLow(cs_mem);
    spiDataOut(SPI1,0x9f); // read id and mfg code
     b78:	219f      	movs	r1, #159	; 0x9f
     b7a:	4b2e      	ldr	r3, [pc, #184]	; (c34 <POST+0xd8>)
}

void POST() {
    uint8_t dummy_Tx = 0xFF;

    bool postFailed = false;
     b7c:	9401      	str	r4, [sp, #4]
        failType = 1;
    }

    //Memory Post
    pinLow(cs_mem);
    spiDataOut(SPI1,0x9f); // read id and mfg code
     b7e:	2001      	movs	r0, #1
     b80:	616f      	str	r7, [r5, #20]
     b82:	4798      	blx	r3
    u8_t mfgID = spiDataIn(SPI1);
     b84:	4e2c      	ldr	r6, [pc, #176]	; (c38 <POST+0xdc>)
     b86:	2001      	movs	r0, #1
     b88:	47b0      	blx	r6
     b8a:	9002      	str	r0, [sp, #8]
    u8_t deviceID1 = spiDataIn(SPI1);
     b8c:	2001      	movs	r0, #1
     b8e:	47b0      	blx	r6
     b90:	9003      	str	r0, [sp, #12]
    u8_t deviceID2 = spiDataIn(SPI1);
     b92:	2001      	movs	r0, #1
     b94:	47b0      	blx	r6
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     b96:	61af      	str	r7, [r5, #24]
    pinHigh(cs_mem);

    if ( (mfgID != 0x1f) & (deviceID1 != 0x86) & (deviceID2 != 0x01)) {
     b98:	9b02      	ldr	r3, [sp, #8]
     b9a:	3b1f      	subs	r3, #31
     b9c:	1e5a      	subs	r2, r3, #1
     b9e:	4193      	sbcs	r3, r2
     ba0:	0019      	movs	r1, r3
     ba2:	9b03      	ldr	r3, [sp, #12]
     ba4:	3b86      	subs	r3, #134	; 0x86
     ba6:	1e5a      	subs	r2, r3, #1
     ba8:	4193      	sbcs	r3, r2
     baa:	4a22      	ldr	r2, [pc, #136]	; (c34 <POST+0xd8>)
     bac:	9202      	str	r2, [sp, #8]
     bae:	420b      	tst	r3, r1
     bb0:	d004      	beq.n	bbc <POST+0x60>
     bb2:	2801      	cmp	r0, #1
     bb4:	d002      	beq.n	bbc <POST+0x60>
        postFailed = true;
     bb6:	2301      	movs	r3, #1
        failType = 2;
     bb8:	2402      	movs	r4, #2
    u8_t deviceID1 = spiDataIn(SPI1);
    u8_t deviceID2 = spiDataIn(SPI1);
    pinHigh(cs_mem);

    if ( (mfgID != 0x1f) & (deviceID1 != 0x86) & (deviceID2 != 0x01)) {
        postFailed = true;
     bba:	9301      	str	r3, [sp, #4]
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     bbc:	2780      	movs	r7, #128	; 0x80
     bbe:	4b1f      	ldr	r3, [pc, #124]	; (c3c <POST+0xe0>)
     bc0:	00ff      	lsls	r7, r7, #3
     bc2:	601f      	str	r7, [r3, #0]
        failType = 2;
    }

    //Accelerometer Post
    pinLow(cs_accel);
    spiDataOut(SPI0, BMI055_BGW_CHIPID | BMI055_READ_REG);
     bc4:	9b02      	ldr	r3, [sp, #8]
     bc6:	2180      	movs	r1, #128	; 0x80
     bc8:	2000      	movs	r0, #0
     bca:	4798      	blx	r3
    u8_t accelID = spiDataTransfer(SPI0,dummy_Tx);
     bcc:	21ff      	movs	r1, #255	; 0xff
     bce:	2000      	movs	r0, #0
     bd0:	4e1b      	ldr	r6, [pc, #108]	; (c40 <POST+0xe4>)
     bd2:	47b0      	blx	r6
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     bd4:	4b1b      	ldr	r3, [pc, #108]	; (c44 <POST+0xe8>)
     bd6:	601f      	str	r7, [r3, #0]
    pinHigh(cs_accel);

    if (accelID != 0xFA) {
     bd8:	28fa      	cmp	r0, #250	; 0xfa
     bda:	d002      	beq.n	be2 <POST+0x86>
        postFailed = true;
     bdc:	2301      	movs	r3, #1
        failType = 3;
     bde:	2403      	movs	r4, #3
    spiDataOut(SPI0, BMI055_BGW_CHIPID | BMI055_READ_REG);
    u8_t accelID = spiDataTransfer(SPI0,dummy_Tx);
    pinHigh(cs_accel);

    if (accelID != 0xFA) {
        postFailed = true;
     be0:	9301      	str	r3, [sp, #4]
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     be2:	616f      	str	r7, [r5, #20]
        failType = 3;
    }

    //Gyro Post
    pinLow(cs_gyro);
    spiDataOut(SPI0, BMI055_BGW_CHIPID | BMI055_READ_REG);
     be4:	2180      	movs	r1, #128	; 0x80
     be6:	2000      	movs	r0, #0
     be8:	9b02      	ldr	r3, [sp, #8]
     bea:	4798      	blx	r3
    u8_t gyroID = spiDataTransfer(SPI0,dummy_Tx);
     bec:	21ff      	movs	r1, #255	; 0xff
     bee:	2000      	movs	r0, #0
     bf0:	47b0      	blx	r6
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     bf2:	61af      	str	r7, [r5, #24]
    pinHigh(cs_gyro);

    if (gyroID != 0x0F) {
     bf4:	280f      	cmp	r0, #15
     bf6:	d103      	bne.n	c00 <POST+0xa4>
    }

    //Analog Accelerometer Post


    if (postFailed) {
     bf8:	9b01      	ldr	r3, [sp, #4]
     bfa:	2b00      	cmp	r3, #0
     bfc:	d101      	bne.n	c02 <POST+0xa6>
     bfe:	e011      	b.n	c24 <POST+0xc8>
    u8_t gyroID = spiDataTransfer(SPI0,dummy_Tx);
    pinHigh(cs_gyro);

    if (gyroID != 0x0F) {
        postFailed = true;
        failType = 4;
     c00:	2404      	movs	r4, #4

    if (postFailed) {
        while (1) {
            u8_t beepCount;

            for (beepCount = failType; beepCount > 0; beepCount--) {
     c02:	0025      	movs	r5, r4
     c04:	4e10      	ldr	r6, [pc, #64]	; (c48 <POST+0xec>)
     c06:	2d00      	cmp	r5, #0
     c08:	d009      	beq.n	c1e <POST+0xc2>
                beep(300);
     c0a:	2096      	movs	r0, #150	; 0x96
     c0c:	4b0f      	ldr	r3, [pc, #60]	; (c4c <POST+0xf0>)
     c0e:	0040      	lsls	r0, r0, #1
     c10:	4798      	blx	r3
                delay_ms(300);
     c12:	2096      	movs	r0, #150	; 0x96

    if (postFailed) {
        while (1) {
            u8_t beepCount;

            for (beepCount = failType; beepCount > 0; beepCount--) {
     c14:	3d01      	subs	r5, #1
                beep(300);
                delay_ms(300);
     c16:	0040      	lsls	r0, r0, #1
     c18:	47b0      	blx	r6

    if (postFailed) {
        while (1) {
            u8_t beepCount;

            for (beepCount = failType; beepCount > 0; beepCount--) {
     c1a:	b2ed      	uxtb	r5, r5
     c1c:	e7f2      	b.n	c04 <POST+0xa8>
                beep(300);
                delay_ms(300);
            }
            delay_ms(1500);
     c1e:	480c      	ldr	r0, [pc, #48]	; (c50 <POST+0xf4>)
     c20:	47b0      	blx	r6
        }
     c22:	e7ee      	b.n	c02 <POST+0xa6>
    }
}
     c24:	b005      	add	sp, #20
     c26:	bdf0      	pop	{r4, r5, r6, r7, pc}
     c28:	00000581 	.word	0x00000581
     c2c:	20000636 	.word	0x20000636
     c30:	41004400 	.word	0x41004400
     c34:	00002a21 	.word	0x00002a21
     c38:	00002a39 	.word	0x00002a39
     c3c:	41004494 	.word	0x41004494
     c40:	00002a09 	.word	0x00002a09
     c44:	41004498 	.word	0x41004498
     c48:	00000fc9 	.word	0x00000fc9
     c4c:	00000d39 	.word	0x00000d39
     c50:	000005dc 	.word	0x000005dc

00000c54 <adcInit>:
#include <util.h>

void adcInit() {

    // set up clock
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;
     c54:	2180      	movs	r1, #128	; 0x80


#include <util.h>

void adcInit() {
     c56:	b510      	push	{r4, lr}

    // set up clock
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;
     c58:	4a10      	ldr	r2, [pc, #64]	; (c9c <adcInit+0x48>)
     c5a:	0249      	lsls	r1, r1, #9
     c5c:	6a13      	ldr	r3, [r2, #32]
    // divide prescaler by 512 (93.75KHz), max adc freq is 2.1MHz
    ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |
                     ADC_CTRLB_RESSEL_12BIT;

    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
     c5e:	4810      	ldr	r0, [pc, #64]	; (ca0 <adcInit+0x4c>)
#include <util.h>

void adcInit() {

    // set up clock
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;
     c60:	430b      	orrs	r3, r1
     c62:	6213      	str	r3, [r2, #32]

    // divide prescaler by 512 (93.75KHz), max adc freq is 2.1MHz
    ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |
     c64:	23e0      	movs	r3, #224	; 0xe0
     c66:	490f      	ldr	r1, [pc, #60]	; (ca4 <adcInit+0x50>)
                     ADC_CTRLB_RESSEL_12BIT;

    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
     c68:	4a0f      	ldr	r2, [pc, #60]	; (ca8 <adcInit+0x54>)

    // set up clock
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;

    // divide prescaler by 512 (93.75KHz), max adc freq is 2.1MHz
    ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |
     c6a:	00db      	lsls	r3, r3, #3
     c6c:	808b      	strh	r3, [r1, #4]
                     ADC_CTRLB_RESSEL_12BIT;

    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
     c6e:	8050      	strh	r0, [r2, #2]
                        GCLK_CLKCTRL_GEN(0) |
                        GCLK_CLKCTRL_ID(ADC_GCLK_ID);

    ADC->CALIB.reg =
        ADC_CALIB_BIAS_CAL(
     c70:	4a0e      	ldr	r2, [pc, #56]	; (cac <adcInit+0x58>)
    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(0) |
                        GCLK_CLKCTRL_ID(ADC_GCLK_ID);

    ADC->CALIB.reg =
     c72:	6812      	ldr	r2, [r2, #0]
     c74:	0150      	lsls	r0, r2, #5
     c76:	4018      	ands	r0, r3
     c78:	4b0d      	ldr	r3, [pc, #52]	; (cb0 <adcInit+0x5c>)
     c7a:	0154      	lsls	r4, r2, #5
     c7c:	681a      	ldr	r2, [r3, #0]
     c7e:	0ed3      	lsrs	r3, r2, #27
     c80:	4323      	orrs	r3, r4
     c82:	b2da      	uxtb	r2, r3
     c84:	0003      	movs	r3, r0
     c86:	4313      	orrs	r3, r2
     c88:	850b      	strh	r3, [r1, #40]	; 0x28
        ) |
        ADC_CALIB_LINEARITY_CAL(
            (*(uint64_t *)ADC_FUSES_LINEARITY_0_ADDR >> ADC_FUSES_LINEARITY_0_Pos)
        );

    ADC->REFCTRL.reg = ADC_REFCTRL_REFSEL_INTVCC1;
     c8a:	2302      	movs	r3, #2
     c8c:	704b      	strb	r3, [r1, #1]

    ADC->CTRLA.reg = ADC_CTRLA_ENABLE; // enable
     c8e:	700b      	strb	r3, [r1, #0]
    while(ADC->STATUS.reg & ADC_STATUS_SYNCBUSY);
     c90:	7e4b      	ldrb	r3, [r1, #25]
     c92:	b25b      	sxtb	r3, r3
     c94:	2b00      	cmp	r3, #0
     c96:	dbfb      	blt.n	c90 <adcInit+0x3c>
}
     c98:	bd10      	pop	{r4, pc}
     c9a:	46c0      	nop			; (mov r8, r8)
     c9c:	40000400 	.word	0x40000400
     ca0:	0000401e 	.word	0x0000401e
     ca4:	42004000 	.word	0x42004000
     ca8:	40000c00 	.word	0x40000c00
     cac:	00806024 	.word	0x00806024
     cb0:	00806020 	.word	0x00806020

00000cb4 <adcSample>:



u16_t adcSample() {
    ADC->SWTRIG.reg = ADC_SWTRIG_START;
     cb4:	2202      	movs	r2, #2
     cb6:	4b05      	ldr	r3, [pc, #20]	; (ccc <adcSample+0x18>)
     cb8:	731a      	strb	r2, [r3, #12]
    while(!(ADC->INTFLAG.reg & ADC_INTFLAG_RESRDY)); // wait until result is ready
     cba:	3a01      	subs	r2, #1
     cbc:	7e19      	ldrb	r1, [r3, #24]
     cbe:	4211      	tst	r1, r2
     cc0:	d0fc      	beq.n	cbc <adcSample+0x8>
    return ADC->RESULT.reg;
     cc2:	4b02      	ldr	r3, [pc, #8]	; (ccc <adcSample+0x18>)
     cc4:	8b58      	ldrh	r0, [r3, #26]
     cc6:	b280      	uxth	r0, r0
}
     cc8:	4770      	bx	lr
     cca:	46c0      	nop			; (mov r8, r8)
     ccc:	42004000 	.word	0x42004000

00000cd0 <adc_read>:


u16_t adc_read(Pin p) {
     cd0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    u16_t buad;

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
     cd2:	2501      	movs	r5, #1
     cd4:	0c02      	lsrs	r2, r0, #16
     cd6:	b2d4      	uxtb	r4, r2
     cd8:	9000      	str	r0, [sp, #0]
     cda:	0e00      	lsrs	r0, r0, #24
     cdc:	9101      	str	r1, [sp, #4]
     cde:	0842      	lsrs	r2, r0, #1
     ce0:	01e3      	lsls	r3, r4, #7
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     ce2:	4911      	ldr	r1, [pc, #68]	; (d28 <adc_read+0x58>)
     ce4:	18d2      	adds	r2, r2, r3
     ce6:	1852      	adds	r2, r2, r1
    u16_t buad;

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
     ce8:	4228      	tst	r0, r5
     cea:	d005      	beq.n	cf8 <adc_read+0x28>
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     cec:	210f      	movs	r1, #15
     cee:	7814      	ldrb	r4, [r2, #0]
     cf0:	4021      	ands	r1, r4
     cf2:	2410      	movs	r4, #16
     cf4:	4321      	orrs	r1, r4
     cf6:	e003      	b.n	d00 <adc_read+0x30>
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     cf8:	240f      	movs	r4, #15
     cfa:	7811      	ldrb	r1, [r2, #0]
     cfc:	43a1      	bics	r1, r4
     cfe:	4329      	orrs	r1, r5
     d00:	7011      	strb	r1, [r2, #0]
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     d02:	2101      	movs	r1, #1
     d04:	4a09      	ldr	r2, [pc, #36]	; (d2c <adc_read+0x5c>)
     d06:	18c3      	adds	r3, r0, r3
     d08:	189b      	adds	r3, r3, r2
     d0a:	781a      	ldrb	r2, [r3, #0]
     d0c:	430a      	orrs	r2, r1
     d0e:	701a      	strb	r2, [r3, #0]
    // switch pin mux to analog in
    pinAnalog(p);

    ADC->INPUTCTRL.reg = (ADC_INPUTCTRL_MUXPOS(p.chan) // select from proper pin
                          | ADC_INPUTCTRL_MUXNEG_GND // 0 = gnd
                          | ADC_INPUTCTRL_GAIN_1X);
     d10:	466b      	mov	r3, sp
     d12:	791a      	ldrb	r2, [r3, #4]
     d14:	231f      	movs	r3, #31
     d16:	4013      	ands	r3, r2
     d18:	22c0      	movs	r2, #192	; 0xc0
     d1a:	0152      	lsls	r2, r2, #5
     d1c:	4313      	orrs	r3, r2

u16_t adc_read(Pin p) {
    // switch pin mux to analog in
    pinAnalog(p);

    ADC->INPUTCTRL.reg = (ADC_INPUTCTRL_MUXPOS(p.chan) // select from proper pin
     d1e:	4a04      	ldr	r2, [pc, #16]	; (d30 <adc_read+0x60>)
     d20:	6113      	str	r3, [r2, #16]
                          | ADC_INPUTCTRL_MUXNEG_GND // 0 = gnd
                          | ADC_INPUTCTRL_GAIN_1X);

    return adcSample();
     d22:	4b04      	ldr	r3, [pc, #16]	; (d34 <adc_read+0x64>)
     d24:	4798      	blx	r3
     d26:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
     d28:	41004430 	.word	0x41004430
     d2c:	41004440 	.word	0x41004440
     d30:	42004000 	.word	0x42004000
     d34:	00000cb5 	.word	0x00000cb5

00000d38 <beep>:
#include <util.h>
#include <boardDefines.h>


void beep(u16_t toggles) {
     d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
}


inline static void pinToggle(Pin p) {
    PORT->Group[p.group].OUTTGL.reg = (1<<p.pin);
     d3a:	2380      	movs	r3, #128	; 0x80
     d3c:	2780      	movs	r7, #128	; 0x80
     d3e:	0006      	movs	r6, r0

    pinToggle(LedPin);
    for (u16_t buzz = 0; buzz < toggles; ++buzz) {
     d40:	2500      	movs	r5, #0
     d42:	4c0a      	ldr	r4, [pc, #40]	; (d6c <beep+0x34>)
     d44:	035b      	lsls	r3, r3, #13
     d46:	61e3      	str	r3, [r4, #28]
     d48:	03bf      	lsls	r7, r7, #14
     d4a:	42b5      	cmp	r5, r6
     d4c:	d006      	beq.n	d5c <beep+0x24>
     d4e:	61e7      	str	r7, [r4, #28]
        pinToggle(buzzerPin);
        delay_us(122);
     d50:	207a      	movs	r0, #122	; 0x7a
     d52:	4b07      	ldr	r3, [pc, #28]	; (d70 <beep+0x38>)


void beep(u16_t toggles) {

    pinToggle(LedPin);
    for (u16_t buzz = 0; buzz < toggles; ++buzz) {
     d54:	3501      	adds	r5, #1
        pinToggle(buzzerPin);
        delay_us(122);
     d56:	4798      	blx	r3


void beep(u16_t toggles) {

    pinToggle(LedPin);
    for (u16_t buzz = 0; buzz < toggles; ++buzz) {
     d58:	b2ad      	uxth	r5, r5
     d5a:	e7f6      	b.n	d4a <beep+0x12>
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     d5c:	2380      	movs	r3, #128	; 0x80
     d5e:	039b      	lsls	r3, r3, #14
     d60:	6163      	str	r3, [r4, #20]
}


inline static void pinToggle(Pin p) {
    PORT->Group[p.group].OUTTGL.reg = (1<<p.pin);
     d62:	2380      	movs	r3, #128	; 0x80
     d64:	035b      	lsls	r3, r3, #13
     d66:	61e3      	str	r3, [r4, #28]
        pinToggle(buzzerPin);
        delay_us(122);
    }
    pinLow(buzzerPin);
    pinToggle(LedPin);
}
     d68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     d6a:	46c0      	nop			; (mov r8, r8)
     d6c:	41004400 	.word	0x41004400
     d70:	00000f99 	.word	0x00000f99

00000d74 <startupJingle>:

void startupJingle(){
     d74:	b570      	push	{r4, r5, r6, lr}
    beep(300);
     d76:	2696      	movs	r6, #150	; 0x96
     d78:	0076      	lsls	r6, r6, #1
     d7a:	4d0a      	ldr	r5, [pc, #40]	; (da4 <startupJingle+0x30>)
     d7c:	0030      	movs	r0, r6
     d7e:	47a8      	blx	r5
    delay_ms(80);
     d80:	4c09      	ldr	r4, [pc, #36]	; (da8 <startupJingle+0x34>)
     d82:	2050      	movs	r0, #80	; 0x50
     d84:	47a0      	blx	r4
    beep(300);
     d86:	0030      	movs	r0, r6
     d88:	47a8      	blx	r5
    delay_ms(250);
     d8a:	20fa      	movs	r0, #250	; 0xfa
     d8c:	47a0      	blx	r4
    beep(300);
     d8e:	0030      	movs	r0, r6
     d90:	47a8      	blx	r5
    delay_ms(80);
     d92:	2050      	movs	r0, #80	; 0x50
     d94:	47a0      	blx	r4
    beep(300);
     d96:	0030      	movs	r0, r6
     d98:	47a8      	blx	r5
    delay_ms(500);
     d9a:	20fa      	movs	r0, #250	; 0xfa
     d9c:	0040      	lsls	r0, r0, #1
     d9e:	47a0      	blx	r4
}
     da0:	bd70      	pop	{r4, r5, r6, pc}
     da2:	46c0      	nop			; (mov r8, r8)
     da4:	00000d39 	.word	0x00000d39
     da8:	00000fc9 	.word	0x00000fc9

00000dac <unpluggedJingle>:

void unpluggedJingle(){
     dac:	b570      	push	{r4, r5, r6, lr}
            delay_ms(80);
            beep(300);
     dae:	2696      	movs	r6, #150	; 0x96
    beep(300);
    delay_ms(500);
}

void unpluggedJingle(){
            delay_ms(80);
     db0:	4c0c      	ldr	r4, [pc, #48]	; (de4 <unpluggedJingle+0x38>)
            beep(300);
     db2:	0076      	lsls	r6, r6, #1
    beep(300);
    delay_ms(500);
}

void unpluggedJingle(){
            delay_ms(80);
     db4:	2050      	movs	r0, #80	; 0x50
     db6:	47a0      	blx	r4
            beep(300);
     db8:	4d0b      	ldr	r5, [pc, #44]	; (de8 <unpluggedJingle+0x3c>)
     dba:	0030      	movs	r0, r6
     dbc:	47a8      	blx	r5
            delay_ms(80);
     dbe:	2050      	movs	r0, #80	; 0x50
     dc0:	47a0      	blx	r4
            beep(300);
     dc2:	0030      	movs	r0, r6
     dc4:	47a8      	blx	r5
            delay_ms(80);
     dc6:	2050      	movs	r0, #80	; 0x50
     dc8:	47a0      	blx	r4
            beep(300);
     dca:	0030      	movs	r0, r6
     dcc:	47a8      	blx	r5
            delay_ms(80);
     dce:	2050      	movs	r0, #80	; 0x50
     dd0:	47a0      	blx	r4
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     dd2:	2280      	movs	r2, #128	; 0x80
     dd4:	4b05      	ldr	r3, [pc, #20]	; (dec <unpluggedJingle+0x40>)
     dd6:	0392      	lsls	r2, r2, #14
     dd8:	615a      	str	r2, [r3, #20]
     dda:	2280      	movs	r2, #128	; 0x80
     ddc:	0352      	lsls	r2, r2, #13
     dde:	615a      	str	r2, [r3, #20]
            pinLow(buzzerPin);
            pinLow(LedPin);

}
     de0:	bd70      	pop	{r4, r5, r6, pc}
     de2:	46c0      	nop			; (mov r8, r8)
     de4:	00000fc9 	.word	0x00000fc9
     de8:	00000d39 	.word	0x00000d39
     dec:	41004400 	.word	0x41004400

00000df0 <GclkInit>:
static uint32_t cycles_per_us = 48000000UL / 1000000;

void GclkInit() {


    SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     df0:	23c2      	movs	r3, #194	; 0xc2
                           SYSCTRL_INTFLAG_DFLLRDY;
    NVMCTRL->CTRLB.reg |= NVMCTRL_CTRLB_RWS_HALF;
     df2:	2002      	movs	r0, #2


static uint32_t cycles_per_ms = 48000000UL / 1000;
static uint32_t cycles_per_us = 48000000UL / 1000000;

void GclkInit() {
     df4:	b510      	push	{r4, lr}


    SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     df6:	4916      	ldr	r1, [pc, #88]	; (e50 <GclkInit+0x60>)
                           SYSCTRL_INTFLAG_DFLLRDY;
    NVMCTRL->CTRLB.reg |= NVMCTRL_CTRLB_RWS_HALF;
     df8:	4a16      	ldr	r2, [pc, #88]	; (e54 <GclkInit+0x64>)
static uint32_t cycles_per_us = 48000000UL / 1000000;

void GclkInit() {


    SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     dfa:	00db      	lsls	r3, r3, #3
     dfc:	608b      	str	r3, [r1, #8]
                           SYSCTRL_INTFLAG_DFLLRDY;
    NVMCTRL->CTRLB.reg |= NVMCTRL_CTRLB_RWS_HALF;
     dfe:	6853      	ldr	r3, [r2, #4]
     e00:	4303      	orrs	r3, r0
     e02:	6053      	str	r3, [r2, #4]

#define NVM_DFLL_COARSE_POS    58
#define NVM_DFLL_COARSE_SIZE   6
#define NVM_DFLL_FINE_POS      64
#define NVM_DFLL_FINE_SIZE     10
    uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
     e04:	4b14      	ldr	r3, [pc, #80]	; (e58 <GclkInit+0x68>)
     e06:	681a      	ldr	r2, [r3, #0]
     e08:	0e92      	lsrs	r2, r2, #26
                         + (NVM_DFLL_COARSE_POS / 32))
                       >> (NVM_DFLL_COARSE_POS % 32))
                     & ((1 << NVM_DFLL_COARSE_SIZE) - 1);
    if (coarse == 0x3f) {
     e0a:	2a3f      	cmp	r2, #63	; 0x3f
     e0c:	d100      	bne.n	e10 <GclkInit+0x20>
        coarse = 0x1f;
     e0e:	3a20      	subs	r2, #32
    }
    uint32_t fine =( *((uint32_t *)(NVMCTRL_OTP4)
                       + (NVM_DFLL_FINE_POS / 32))
                     >> (NVM_DFLL_FINE_POS % 32))
     e10:	4b12      	ldr	r3, [pc, #72]	; (e5c <GclkInit+0x6c>)
                   & ((1 << NVM_DFLL_FINE_SIZE) - 1);
    if (fine == 0x3ff) {
     e12:	4813      	ldr	r0, [pc, #76]	; (e60 <GclkInit+0x70>)
                       >> (NVM_DFLL_COARSE_POS % 32))
                     & ((1 << NVM_DFLL_COARSE_SIZE) - 1);
    if (coarse == 0x3f) {
        coarse = 0x1f;
    }
    uint32_t fine =( *((uint32_t *)(NVMCTRL_OTP4)
     e14:	681b      	ldr	r3, [r3, #0]
     e16:	059b      	lsls	r3, r3, #22
     e18:	0d9b      	lsrs	r3, r3, #22
                       + (NVM_DFLL_FINE_POS / 32))
                     >> (NVM_DFLL_FINE_POS % 32))
                   & ((1 << NVM_DFLL_FINE_SIZE) - 1);
    if (fine == 0x3ff) {
     e1a:	4283      	cmp	r3, r0
     e1c:	d100      	bne.n	e20 <GclkInit+0x30>
        fine = 0x1ff;
     e1e:	4b11      	ldr	r3, [pc, #68]	; (e64 <GclkInit+0x74>)
    }


    // Disable ONDEMAND mode while writing configurations (errata 9905)
    SYSCTRL->DFLLCTRL.reg = dfll_ctrl_usb & ~SYSCTRL_DFLLCTRL_ONDEMAND;
     e20:	4811      	ldr	r0, [pc, #68]	; (e68 <GclkInit+0x78>)
     e22:	8488      	strh	r0, [r1, #36]	; 0x24
    while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_DFLLRDY)) == 0);
     e24:	2010      	movs	r0, #16
     e26:	68cc      	ldr	r4, [r1, #12]
     e28:	4204      	tst	r4, r0
     e2a:	d0fc      	beq.n	e26 <GclkInit+0x36>
    SYSCTRL->DFLLVAL.reg = SYSCTRL_DFLLVAL_COARSE(coarse) | SYSCTRL_DFLLVAL_FINE(fine);
     e2c:	0292      	lsls	r2, r2, #10
     e2e:	4313      	orrs	r3, r2
     e30:	4a07      	ldr	r2, [pc, #28]	; (e50 <GclkInit+0x60>)
     e32:	6293      	str	r3, [r2, #40]	; 0x28


    //Wait and see if the DFLL output is good . . .
    while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_DFLLRDY)) == 0);
     e34:	2310      	movs	r3, #16
     e36:	68ca      	ldr	r2, [r1, #12]
     e38:	421a      	tst	r2, r3
     e3a:	d0fc      	beq.n	e36 <GclkInit+0x46>


    SYSCTRL->DFLLCTRL.reg = dfll_ctrl_usb;
     e3c:	4a0b      	ldr	r2, [pc, #44]	; (e6c <GclkInit+0x7c>)
     e3e:	4b04      	ldr	r3, [pc, #16]	; (e50 <GclkInit+0x60>)
     e40:	849a      	strh	r2, [r3, #36]	; 0x24


    //For generic clock generator 0, select the DFLL48 Clock as input
    GCLK->GENDIV.reg  = (GCLK_GENDIV_DIV(1)  | GCLK_GENDIV_ID(0));
     e42:	2280      	movs	r2, #128	; 0x80
     e44:	4b0a      	ldr	r3, [pc, #40]	; (e70 <GclkInit+0x80>)
     e46:	0052      	lsls	r2, r2, #1
     e48:	609a      	str	r2, [r3, #8]
    GCLK->GENCTRL.reg = (GCLK_GENCTRL_ID(0)  | (GCLK_GENCTRL_SRC_DFLL48M) | (GCLK_GENCTRL_GENEN));
     e4a:	4a0a      	ldr	r2, [pc, #40]	; (e74 <GclkInit+0x84>)
     e4c:	605a      	str	r2, [r3, #4]
}
     e4e:	bd10      	pop	{r4, pc}
     e50:	40000800 	.word	0x40000800
     e54:	41004000 	.word	0x41004000
     e58:	00806024 	.word	0x00806024
     e5c:	00806028 	.word	0x00806028
     e60:	000003ff 	.word	0x000003ff
     e64:	000001ff 	.word	0x000001ff
     e68:	00000522 	.word	0x00000522
     e6c:	000005a2 	.word	0x000005a2
     e70:	40000c00 	.word	0x40000c00
     e74:	00010700 	.word	0x00010700

00000e78 <RtcInit>:
        //wait for crystal to warm up
        while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_OSC32KRDY)) == 0);

    */

    SYSCTRL->OSC32K.reg = SYSCTRL_OSC32K_ENABLE |
     e78:	4b27      	ldr	r3, [pc, #156]	; (f18 <RtcInit+0xa0>)
     e7a:	4a28      	ldr	r2, [pc, #160]	; (f1c <RtcInit+0xa4>)
                          SYSCTRL_OSC32K_EN32K |
                          ( 6 << SYSCTRL_OSC32K_STARTUP_Pos);


    SYSCTRL->OSC32K.bit.CALIB =
     e7c:	4828      	ldr	r0, [pc, #160]	; (f20 <RtcInit+0xa8>)
        //wait for crystal to warm up
        while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_OSC32KRDY)) == 0);

    */

    SYSCTRL->OSC32K.reg = SYSCTRL_OSC32K_ENABLE |
     e7e:	619a      	str	r2, [r3, #24]
                          SYSCTRL_OSC32K_EN32K |
                          ( 6 << SYSCTRL_OSC32K_STARTUP_Pos);


    SYSCTRL->OSC32K.bit.CALIB =
        ((*(uint32_t *)FUSES_OSC32K_CAL_ADDR >>
     e80:	4a28      	ldr	r2, [pc, #160]	; (f24 <RtcInit+0xac>)
    SYSCTRL->OSC32K.reg = SYSCTRL_OSC32K_ENABLE |
                          SYSCTRL_OSC32K_EN32K |
                          ( 6 << SYSCTRL_OSC32K_STARTUP_Pos);


    SYSCTRL->OSC32K.bit.CALIB =
     e82:	6999      	ldr	r1, [r3, #24]
     e84:	6812      	ldr	r2, [r2, #0]
     e86:	4001      	ands	r1, r0
     e88:	04d2      	lsls	r2, r2, #19
     e8a:	0e52      	lsrs	r2, r2, #25
     e8c:	0412      	lsls	r2, r2, #16
     e8e:	4311      	orrs	r1, r2
     e90:	6199      	str	r1, [r3, #24]
        ((*(uint32_t *)FUSES_OSC32K_CAL_ADDR >>
          FUSES_OSC32K_CAL_Pos) & 0x7Ful);

    SYSCTRL->OSC32K.reg = SYSCTRL_OSC32K_STARTUP( 0x6u ) | // cf table 15.10 of product datasheet in chapter 15.8.6
     e92:	4925      	ldr	r1, [pc, #148]	; (f28 <RtcInit+0xb0>)
     e94:	6199      	str	r1, [r3, #24]
                          SYSCTRL_OSC32K_EN32K;
    SYSCTRL->OSC32K.bit.CALIB =
     e96:	6999      	ldr	r1, [r3, #24]
     e98:	4008      	ands	r0, r1
        ((*(uint32_t *)FUSES_OSC32K_CAL_ADDR >>
          FUSES_OSC32K_CAL_Pos) & 0x7Ful);



    SYSCTRL->OSC32K.bit.ENABLE = 1; // separate call, as described in chapter 15.6.3
     e9a:	2102      	movs	r1, #2
        ((*(uint32_t *)FUSES_OSC32K_CAL_ADDR >>
          FUSES_OSC32K_CAL_Pos) & 0x7Ful);

    SYSCTRL->OSC32K.reg = SYSCTRL_OSC32K_STARTUP( 0x6u ) | // cf table 15.10 of product datasheet in chapter 15.8.6
                          SYSCTRL_OSC32K_EN32K;
    SYSCTRL->OSC32K.bit.CALIB =
     e9c:	4302      	orrs	r2, r0
     e9e:	619a      	str	r2, [r3, #24]
        ((*(uint32_t *)FUSES_OSC32K_CAL_ADDR >>
          FUSES_OSC32K_CAL_Pos) & 0x7Ful);



    SYSCTRL->OSC32K.bit.ENABLE = 1; // separate call, as described in chapter 15.6.3
     ea0:	699a      	ldr	r2, [r3, #24]
     ea2:	430a      	orrs	r2, r1
     ea4:	619a      	str	r2, [r3, #24]

    while (  (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_OSC32KRDY) == 0 ) {
     ea6:	2204      	movs	r2, #4
     ea8:	68d9      	ldr	r1, [r3, #12]
     eaa:	4211      	tst	r1, r2
     eac:	d0fc      	beq.n	ea8 <RtcInit+0x30>





    GCLK->GENDIV.reg = GCLK_GENDIV_ID(2) | GCLK_GENDIV_DIV(1);
     eae:	2281      	movs	r2, #129	; 0x81
     eb0:	4b1e      	ldr	r3, [pc, #120]	; (f2c <RtcInit+0xb4>)
     eb2:	0052      	lsls	r2, r2, #1
     eb4:	609a      	str	r2, [r3, #8]

    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(2) |
     eb6:	4a1e      	ldr	r2, [pc, #120]	; (f30 <RtcInit+0xb8>)
     eb8:	605a      	str	r2, [r3, #4]
                        GCLK_GENCTRL_SRC(GCLK_GENCTRL_SRC_OSC32K) |
                        GCLK_GENCTRL_IDC |
                        GCLK_GENCTRL_RUNSTDBY |
                        GCLK_GENCTRL_GENEN;
    while (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY);
     eba:	785a      	ldrb	r2, [r3, #1]
     ebc:	b252      	sxtb	r2, r2
     ebe:	2a00      	cmp	r2, #0
     ec0:	dbfb      	blt.n	eba <RtcInit+0x42>

// Configure RTC
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(RTC_GCLK_ID) |
     ec2:	4a1c      	ldr	r2, [pc, #112]	; (f34 <RtcInit+0xbc>)
     ec4:	4b19      	ldr	r3, [pc, #100]	; (f2c <RtcInit+0xb4>)
     ec6:	805a      	strh	r2, [r3, #2]
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    RTC->MODE1.CTRL.reg = RTC_MODE1_CTRL_MODE_COUNT16;
     ec8:	2204      	movs	r2, #4
     eca:	4b1b      	ldr	r3, [pc, #108]	; (f38 <RtcInit+0xc0>)
     ecc:	801a      	strh	r2, [r3, #0]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     ece:	7a9a      	ldrb	r2, [r3, #10]
     ed0:	4919      	ldr	r1, [pc, #100]	; (f38 <RtcInit+0xc0>)
     ed2:	09d2      	lsrs	r2, r2, #7
     ed4:	d1fb      	bne.n	ece <RtcInit+0x56>

// Prescaler needs to be enabled separately from the mode for some reason
    RTC->MODE1.CTRL.reg |= RTC_MODE1_CTRL_PRESCALER_DIV32;
     ed6:	20a0      	movs	r0, #160	; 0xa0
     ed8:	880a      	ldrh	r2, [r1, #0]
     eda:	00c0      	lsls	r0, r0, #3
     edc:	4302      	orrs	r2, r0
     ede:	800a      	strh	r2, [r1, #0]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     ee0:	7a9a      	ldrb	r2, [r3, #10]
     ee2:	09d2      	lsrs	r2, r2, #7
     ee4:	d1fc      	bne.n	ee0 <RtcInit+0x68>

    RTC->MODE1.PER.reg = 998;
     ee6:	4915      	ldr	r1, [pc, #84]	; (f3c <RtcInit+0xc4>)
     ee8:	4a13      	ldr	r2, [pc, #76]	; (f38 <RtcInit+0xc0>)
     eea:	8291      	strh	r1, [r2, #20]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     eec:	7a99      	ldrb	r1, [r3, #10]
     eee:	4a12      	ldr	r2, [pc, #72]	; (f38 <RtcInit+0xc0>)
     ef0:	09c9      	lsrs	r1, r1, #7
     ef2:	d1fb      	bne.n	eec <RtcInit+0x74>

    RTC->MODE1.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_ADDR(0x10);
     ef4:	8851      	ldrh	r1, [r2, #2]
     ef6:	4812      	ldr	r0, [pc, #72]	; (f40 <RtcInit+0xc8>)
     ef8:	4301      	orrs	r1, r0
     efa:	8051      	strh	r1, [r2, #2]

    RTC->MODE1.INTENSET.reg = RTC_MODE1_INTENSET_OVF;
     efc:	2180      	movs	r1, #128	; 0x80

    RTC->MODE1.CTRL.bit.ENABLE = 1;
     efe:	2002      	movs	r0, #2
    RTC->MODE1.PER.reg = 998;
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);

    RTC->MODE1.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_ADDR(0x10);

    RTC->MODE1.INTENSET.reg = RTC_MODE1_INTENSET_OVF;
     f00:	71d1      	strb	r1, [r2, #7]

    RTC->MODE1.CTRL.bit.ENABLE = 1;
     f02:	8811      	ldrh	r1, [r2, #0]
     f04:	4301      	orrs	r1, r0
     f06:	8011      	strh	r1, [r2, #0]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     f08:	7a9a      	ldrb	r2, [r3, #10]
     f0a:	09d2      	lsrs	r2, r2, #7
     f0c:	d1fc      	bne.n	f08 <RtcInit+0x90>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     f0e:	4b0d      	ldr	r3, [pc, #52]	; (f44 <RtcInit+0xcc>)
     f10:	3208      	adds	r2, #8
     f12:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(RTC_IRQn);
}
     f14:	4770      	bx	lr
     f16:	46c0      	nop			; (mov r8, r8)
     f18:	40000800 	.word	0x40000800
     f1c:	00000606 	.word	0x00000606
     f20:	ff80ffff 	.word	0xff80ffff
     f24:	00806024 	.word	0x00806024
     f28:	00000604 	.word	0x00000604
     f2c:	40000c00 	.word	0x40000c00
     f30:	00230002 	.word	0x00230002
     f34:	00004204 	.word	0x00004204
     f38:	40001400 	.word	0x40001400
     f3c:	000003e6 	.word	0x000003e6
     f40:	00004010 	.word	0x00004010
     f44:	e000e100 	.word	0xe000e100

00000f48 <gclkEnable>:


void gclkEnable(u32_t id, u32_t src, u32_t div) {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
     f48:	230f      	movs	r3, #15
     f4a:	4018      	ands	r0, r3
     f4c:	4b08      	ldr	r3, [pc, #32]	; (f70 <gclkEnable+0x28>)
     f4e:	0212      	lsls	r2, r2, #8
     f50:	401a      	ands	r2, r3
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     f52:	23f8      	movs	r3, #248	; 0xf8
     f54:	0209      	lsls	r1, r1, #8
     f56:	015b      	lsls	r3, r3, #5
     f58:	4019      	ands	r1, r3
     f5a:	2380      	movs	r3, #128	; 0x80

    NVIC_EnableIRQ(RTC_IRQn);
}


void gclkEnable(u32_t id, u32_t src, u32_t div) {
     f5c:	b510      	push	{r4, lr}
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     f5e:	025b      	lsls	r3, r3, #9
    NVIC_EnableIRQ(RTC_IRQn);
}


void gclkEnable(u32_t id, u32_t src, u32_t div) {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
     f60:	4c04      	ldr	r4, [pc, #16]	; (f74 <gclkEnable+0x2c>)
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     f62:	4319      	orrs	r1, r3
    NVIC_EnableIRQ(RTC_IRQn);
}


void gclkEnable(u32_t id, u32_t src, u32_t div) {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
     f64:	4302      	orrs	r2, r0
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     f66:	4308      	orrs	r0, r1
    NVIC_EnableIRQ(RTC_IRQn);
}


void gclkEnable(u32_t id, u32_t src, u32_t div) {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
     f68:	60a2      	str	r2, [r4, #8]
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     f6a:	6060      	str	r0, [r4, #4]
}
     f6c:	bd10      	pop	{r4, pc}
     f6e:	46c0      	nop			; (mov r8, r8)
     f70:	00ffff00 	.word	0x00ffff00
     f74:	40000c00 	.word	0x40000c00

00000f78 <delayInit>:


void delayInit(void) {
    cycles_per_ms = 48000000UL;
    cycles_per_ms /= 1000;
     f78:	4b04      	ldr	r3, [pc, #16]	; (f8c <delayInit+0x14>)
     f7a:	4a05      	ldr	r2, [pc, #20]	; (f90 <delayInit+0x18>)
     f7c:	601a      	str	r2, [r3, #0]
    cycles_per_us = cycles_per_ms / 1000;
     f7e:	2230      	movs	r2, #48	; 0x30
     f80:	605a      	str	r2, [r3, #4]

    SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     f82:	4b04      	ldr	r3, [pc, #16]	; (f94 <delayInit+0x1c>)
     f84:	3a2b      	subs	r2, #43	; 0x2b
     f86:	601a      	str	r2, [r3, #0]
}
     f88:	4770      	bx	lr
     f8a:	46c0      	nop			; (mov r8, r8)
     f8c:	20000004 	.word	0x20000004
     f90:	0000bb80 	.word	0x0000bb80
     f94:	e000e010 	.word	0xe000e010

00000f98 <delay_us>:
/**
 * \brief Delay loop to delay at least n number of microseconds
 *
 * \param n  Number of microseconds to wait
 */
void delay_us(uint32_t n) {
     f98:	b570      	push	{r4, r5, r6, lr}
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
        SysTick->VAL = 0;

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     f9a:	2480      	movs	r4, #128	; 0x80

static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
        SysTick->VAL = 0;
     f9c:	2100      	movs	r1, #0
    while (n--) {
        /* Devide up to blocks of 10u */
        delay_cycles(cycles_per_us);
     f9e:	4b08      	ldr	r3, [pc, #32]	; (fc0 <delay_us+0x28>)


static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
     fa0:	4a08      	ldr	r2, [pc, #32]	; (fc4 <delay_us+0x2c>)
     fa2:	685b      	ldr	r3, [r3, #4]
        SysTick->VAL = 0;

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     fa4:	0264      	lsls	r4, r4, #9
 * \brief Delay loop to delay at least n number of microseconds
 *
 * \param n  Number of microseconds to wait
 */
void delay_us(uint32_t n) {
    while (n--) {
     fa6:	3801      	subs	r0, #1
     fa8:	d308      	bcc.n	fbc <delay_us+0x24>



static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
     faa:	2b00      	cmp	r3, #0
     fac:	d0fb      	beq.n	fa6 <delay_us+0xe>
     fae:	4e05      	ldr	r6, [pc, #20]	; (fc4 <delay_us+0x2c>)
        SysTick->LOAD = n;
     fb0:	6053      	str	r3, [r2, #4]
        SysTick->VAL = 0;
     fb2:	6091      	str	r1, [r2, #8]

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     fb4:	6835      	ldr	r5, [r6, #0]
     fb6:	4225      	tst	r5, r4
     fb8:	d0fc      	beq.n	fb4 <delay_us+0x1c>
     fba:	e7f4      	b.n	fa6 <delay_us+0xe>
        /* Devide up to blocks of 10u */
        delay_cycles(cycles_per_us);
    }
}
     fbc:	bd70      	pop	{r4, r5, r6, pc}
     fbe:	46c0      	nop			; (mov r8, r8)
     fc0:	20000004 	.word	0x20000004
     fc4:	e000e010 	.word	0xe000e010

00000fc8 <delay_ms>:
/**
 * \brief Delay loop to delay at least n number of milliseconds
 *
 * \param n  Number of milliseconds to wait
 */
void delay_ms(uint32_t n) {
     fc8:	b570      	push	{r4, r5, r6, lr}
     fca:	2480      	movs	r4, #128	; 0x80

static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
        SysTick->VAL = 0;
     fcc:	2100      	movs	r1, #0
    while (n--) {
        /* Devide up to blocks of 1ms */
        delay_cycles(cycles_per_ms);
     fce:	4b08      	ldr	r3, [pc, #32]	; (ff0 <delay_ms+0x28>)


static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
     fd0:	4a08      	ldr	r2, [pc, #32]	; (ff4 <delay_ms+0x2c>)
     fd2:	681b      	ldr	r3, [r3, #0]
        SysTick->VAL = 0;

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     fd4:	0264      	lsls	r4, r4, #9
 * \brief Delay loop to delay at least n number of milliseconds
 *
 * \param n  Number of milliseconds to wait
 */
void delay_ms(uint32_t n) {
    while (n--) {
     fd6:	3801      	subs	r0, #1
     fd8:	d308      	bcc.n	fec <delay_ms+0x24>



static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
     fda:	2b00      	cmp	r3, #0
     fdc:	d0fb      	beq.n	fd6 <delay_ms+0xe>
     fde:	4e05      	ldr	r6, [pc, #20]	; (ff4 <delay_ms+0x2c>)
        SysTick->LOAD = n;
     fe0:	6053      	str	r3, [r2, #4]
        SysTick->VAL = 0;
     fe2:	6091      	str	r1, [r2, #8]

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     fe4:	6835      	ldr	r5, [r6, #0]
     fe6:	4225      	tst	r5, r4
     fe8:	d0fc      	beq.n	fe4 <delay_ms+0x1c>
     fea:	e7f4      	b.n	fd6 <delay_ms+0xe>
        /* Devide up to blocks of 1ms */
        delay_cycles(cycles_per_ms);
    }
}
     fec:	bd70      	pop	{r4, r5, r6, pc}
     fee:	46c0      	nop			; (mov r8, r8)
     ff0:	20000004 	.word	0x20000004
     ff4:	e000e010 	.word	0xe000e010

00000ff8 <RTC_Handler>:


volatile uint32_t time_ms = 0;

void RTC_Handler(void) {
    time_ms += 1000;
     ff8:	21fa      	movs	r1, #250	; 0xfa
     ffa:	4a04      	ldr	r2, [pc, #16]	; (100c <RTC_Handler+0x14>)
     ffc:	0089      	lsls	r1, r1, #2
     ffe:	6813      	ldr	r3, [r2, #0]
    1000:	185b      	adds	r3, r3, r1
    1002:	6013      	str	r3, [r2, #0]
    RTC->MODE1.INTFLAG.reg = 0xFF;
    1004:	22ff      	movs	r2, #255	; 0xff
    1006:	4b02      	ldr	r3, [pc, #8]	; (1010 <RTC_Handler+0x18>)
    1008:	721a      	strb	r2, [r3, #8]
}
    100a:	4770      	bx	lr
    100c:	200004c4 	.word	0x200004c4
    1010:	40001400 	.word	0x40001400

00001014 <millis>:

uint32_t millis(void) {
    1014:	b530      	push	{r4, r5, lr}
    uint32_t ms;
    ATOMIC_SECTION_ENTER
    1016:	f3ef 8110 	mrs	r1, PRIMASK
    101a:	b672      	cpsid	i
    ms = time_ms + RTC->MODE1.COUNT.reg;
    101c:	4a08      	ldr	r2, [pc, #32]	; (1040 <millis+0x2c>)
    101e:	4d09      	ldr	r5, [pc, #36]	; (1044 <millis+0x30>)
    1020:	8a10      	ldrh	r0, [r2, #16]
    1022:	682b      	ldr	r3, [r5, #0]
    if (RTC->MODE1.INTFLAG.bit.OVF)
    1024:	7a14      	ldrb	r4, [r2, #8]
}

uint32_t millis(void) {
    uint32_t ms;
    ATOMIC_SECTION_ENTER
    ms = time_ms + RTC->MODE1.COUNT.reg;
    1026:	b280      	uxth	r0, r0
    if (RTC->MODE1.INTFLAG.bit.OVF)
    1028:	09e4      	lsrs	r4, r4, #7
    102a:	d004      	beq.n	1036 <millis+0x22>
        ms = time_ms + RTC->MODE1.COUNT.reg + 1000;
    102c:	8a13      	ldrh	r3, [r2, #16]
    102e:	22fa      	movs	r2, #250	; 0xfa
    1030:	6828      	ldr	r0, [r5, #0]
    1032:	0092      	lsls	r2, r2, #2
    1034:	1880      	adds	r0, r0, r2
    1036:	18c0      	adds	r0, r0, r3
    ATOMIC_SECTION_LEAVE
    1038:	f381 8810 	msr	PRIMASK, r1
    return ms;
}
    103c:	bd30      	pop	{r4, r5, pc}
    103e:	46c0      	nop			; (mov r8, r8)
    1040:	40001400 	.word	0x40001400
    1044:	200004c4 	.word	0x200004c4

00001048 <TC4Init>:

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC4_GCLK_ID) |
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC4;
    1048:	2180      	movs	r1, #128	; 0x80
    return ms;
}

void TC4Init() {

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC4_GCLK_ID) |
    104a:	4a0d      	ldr	r2, [pc, #52]	; (1080 <TC4Init+0x38>)
    104c:	4b0d      	ldr	r3, [pc, #52]	; (1084 <TC4Init+0x3c>)
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC4;
    104e:	0149      	lsls	r1, r1, #5
    return ms;
}

void TC4Init() {

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC4_GCLK_ID) |
    1050:	805a      	strh	r2, [r3, #2]
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC4;
    1052:	4a0d      	ldr	r2, [pc, #52]	; (1088 <TC4Init+0x40>)
    1054:	6a13      	ldr	r3, [r2, #32]
    1056:	430b      	orrs	r3, r1
    1058:	6213      	str	r3, [r2, #32]

    TC4->COUNT8.CTRLA.reg = TC_CTRLA_MODE_COUNT8 |
    105a:	4b0c      	ldr	r3, [pc, #48]	; (108c <TC4Init+0x44>)
    105c:	4a0c      	ldr	r2, [pc, #48]	; (1090 <TC4Init+0x48>)

    TC4->COUNT8.INTENSET.reg = TC_INTENSET_OVF;

    TC4->COUNT8.EVCTRL.reg = TC_EVCTRL_OVFEO;

    TC4->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
    105e:	2102      	movs	r1, #2
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC4;

    TC4->COUNT8.CTRLA.reg = TC_CTRLA_MODE_COUNT8 |
    1060:	801a      	strh	r2, [r3, #0]
                            TC_CTRLA_RUNSTDBY |
                            TC_CTRLA_PRESCALER_DIV2;
    TC4->COUNT8.PER.reg = 0x50;
    1062:	2250      	movs	r2, #80	; 0x50
    1064:	751a      	strb	r2, [r3, #20]

    TC4->COUNT8.INTENSET.reg = TC_INTENSET_OVF;
    1066:	3a4f      	subs	r2, #79	; 0x4f
    1068:	735a      	strb	r2, [r3, #13]

    TC4->COUNT8.EVCTRL.reg = TC_EVCTRL_OVFEO;
    106a:	32ff      	adds	r2, #255	; 0xff
    106c:	815a      	strh	r2, [r3, #10]

    TC4->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
    106e:	881a      	ldrh	r2, [r3, #0]
    1070:	430a      	orrs	r2, r1
    1072:	801a      	strh	r2, [r3, #0]
    1074:	2280      	movs	r2, #128	; 0x80
    1076:	4b07      	ldr	r3, [pc, #28]	; (1094 <TC4Init+0x4c>)
    1078:	0312      	lsls	r2, r2, #12
    107a:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(TC4_IRQn);
}
    107c:	4770      	bx	lr
    107e:	46c0      	nop			; (mov r8, r8)
    1080:	0000421c 	.word	0x0000421c
    1084:	40000c00 	.word	0x40000c00
    1088:	40000400 	.word	0x40000400
    108c:	42003000 	.word	0x42003000
    1090:	00000904 	.word	0x00000904
    1094:	e000e100 	.word	0xe000e100

00001098 <TC4_Handler>:

void TC4_Handler( void ) {
    TC4->COUNT8.INTFLAG.reg = 0xFF;
    1098:	22ff      	movs	r2, #255	; 0xff
    TC4->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;

    NVIC_EnableIRQ(TC4_IRQn);
}

void TC4_Handler( void ) {
    109a:	b510      	push	{r4, lr}
    TC4->COUNT8.INTFLAG.reg = 0xFF;
    109c:	4b02      	ldr	r3, [pc, #8]	; (10a8 <TC4_Handler+0x10>)
    109e:	739a      	strb	r2, [r3, #14]
    //pinToggle(TxPo);
    pullSample();
    10a0:	4b02      	ldr	r3, [pc, #8]	; (10ac <TC4_Handler+0x14>)
    10a2:	4798      	blx	r3
}
    10a4:	bd10      	pop	{r4, pc}
    10a6:	46c0      	nop			; (mov r8, r8)
    10a8:	42003000 	.word	0x42003000
    10ac:	00002619 	.word	0x00002619

000010b0 <TC5Init>:

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC5_GCLK_ID) |
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC5;
    10b0:	2180      	movs	r1, #128	; 0x80
    pullSample();
}

void TC5Init() {

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC5_GCLK_ID) |
    10b2:	4a0d      	ldr	r2, [pc, #52]	; (10e8 <TC5Init+0x38>)
    10b4:	4b0d      	ldr	r3, [pc, #52]	; (10ec <TC5Init+0x3c>)
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC5;
    10b6:	0189      	lsls	r1, r1, #6
    pullSample();
}

void TC5Init() {

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC5_GCLK_ID) |
    10b8:	805a      	strh	r2, [r3, #2]
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC5;
    10ba:	4a0d      	ldr	r2, [pc, #52]	; (10f0 <TC5Init+0x40>)
    10bc:	6a13      	ldr	r3, [r2, #32]
    10be:	430b      	orrs	r3, r1
    10c0:	6213      	str	r3, [r2, #32]

    TC5->COUNT8.CTRLA.reg = TC_CTRLA_MODE_COUNT8 |
    10c2:	4b0c      	ldr	r3, [pc, #48]	; (10f4 <TC5Init+0x44>)
    10c4:	4a0c      	ldr	r2, [pc, #48]	; (10f8 <TC5Init+0x48>)

    TC5->COUNT8.INTENSET.reg = TC_INTENSET_OVF;

    TC5->COUNT8.EVCTRL.reg = TC_EVCTRL_OVFEO;

    TC5->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
    10c6:	2102      	movs	r1, #2
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC5;

    TC5->COUNT8.CTRLA.reg = TC_CTRLA_MODE_COUNT8 |
    10c8:	801a      	strh	r2, [r3, #0]
                            TC_CTRLA_PRESCALER_DIV16;

    u16_t logSpeed = 20; //Hz
    u8_t PER_Reg = (long)((32768/16) / logSpeed);

    TC5->COUNT8.PER.reg = PER_Reg;
    10ca:	2266      	movs	r2, #102	; 0x66
    10cc:	751a      	strb	r2, [r3, #20]

    TC5->COUNT8.INTENSET.reg = TC_INTENSET_OVF;
    10ce:	3a65      	subs	r2, #101	; 0x65
    10d0:	735a      	strb	r2, [r3, #13]

    TC5->COUNT8.EVCTRL.reg = TC_EVCTRL_OVFEO;
    10d2:	32ff      	adds	r2, #255	; 0xff
    10d4:	815a      	strh	r2, [r3, #10]

    TC5->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
    10d6:	881a      	ldrh	r2, [r3, #0]
    10d8:	430a      	orrs	r2, r1
    10da:	801a      	strh	r2, [r3, #0]
    10dc:	2280      	movs	r2, #128	; 0x80
    10de:	4b07      	ldr	r3, [pc, #28]	; (10fc <TC5Init+0x4c>)
    10e0:	0352      	lsls	r2, r2, #13
    10e2:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(TC5_IRQn);
}
    10e4:	4770      	bx	lr
    10e6:	46c0      	nop			; (mov r8, r8)
    10e8:	0000421c 	.word	0x0000421c
    10ec:	40000c00 	.word	0x40000c00
    10f0:	40000400 	.word	0x40000400
    10f4:	42003400 	.word	0x42003400
    10f8:	00000c04 	.word	0x00000c04
    10fc:	e000e100 	.word	0xe000e100

00001100 <TC5_Handler>:

void TC5_Handler( void ) {
    TC5->COUNT8.INTFLAG.reg = 0xFF;
    1100:	22ff      	movs	r2, #255	; 0xff
    1102:	4b03      	ldr	r3, [pc, #12]	; (1110 <TC5_Handler+0x10>)
    1104:	739a      	strb	r2, [r3, #14]
    

    writeLog = true;
    1106:	4b03      	ldr	r3, [pc, #12]	; (1114 <TC5_Handler+0x14>)
    1108:	3afe      	subs	r2, #254	; 0xfe
    110a:	701a      	strb	r2, [r3, #0]
}
    110c:	4770      	bx	lr
    110e:	46c0      	nop			; (mov r8, r8)
    1110:	42003400 	.word	0x42003400
    1114:	20000522 	.word	0x20000522

00001118 <flight>:
#include <boardDefines.h>

flightState_t flightState;


void flight() {
    1118:	b570      	push	{r4, r5, r6, lr}

    switch(flightState) {
    111a:	4d69      	ldr	r5, [pc, #420]	; (12c0 <flight+0x1a8>)
    111c:	7828      	ldrb	r0, [r5, #0]
    111e:	280a      	cmp	r0, #10
    1120:	d900      	bls.n	1124 <flight+0xc>
    1122:	e0bb      	b.n	129c <flight+0x184>
    1124:	f002 ff0c 	bl	3f40 <__gnu_thumb1_case_uqi>
    1128:	63382506 	.word	0x63382506
    112c:	967dbaba 	.word	0x967dbaba
    1130:	baba      	.short	0xbaba
    1132:	a8          	.byte	0xa8
    1133:	00          	.byte	0x00
    case flightStatrup:

        updateGround( );
    1134:	4b63      	ldr	r3, [pc, #396]	; (12c4 <flight+0x1ac>)
    1136:	4798      	blx	r3

        if ((millis() - startupTick) > 10000) {
    1138:	4e63      	ldr	r6, [pc, #396]	; (12c8 <flight+0x1b0>)
    113a:	47b0      	blx	r6
    113c:	4c63      	ldr	r4, [pc, #396]	; (12cc <flight+0x1b4>)
    113e:	6823      	ldr	r3, [r4, #0]
    1140:	1ac0      	subs	r0, r0, r3
    1142:	4b63      	ldr	r3, [pc, #396]	; (12d0 <flight+0x1b8>)
    1144:	4298      	cmp	r0, r3
    1146:	d909      	bls.n	115c <flight+0x44>
            findNewFlightStart( );
    1148:	4b62      	ldr	r3, [pc, #392]	; (12d4 <flight+0x1bc>)
    114a:	4798      	blx	r3
            logFlight( );
    114c:	4b62      	ldr	r3, [pc, #392]	; (12d8 <flight+0x1c0>)
    114e:	4798      	blx	r3
            startupJingle();
    1150:	4b62      	ldr	r3, [pc, #392]	; (12dc <flight+0x1c4>)
    1152:	4798      	blx	r3
            startupTick = millis();
    1154:	47b0      	blx	r6
            flightState = flightTest;
    1156:	230a      	movs	r3, #10

        if ((millis() - startupTick) > 10000) {
            findNewFlightStart( );
            logFlight( );
            startupJingle();
            startupTick = millis();
    1158:	6020      	str	r0, [r4, #0]
    115a:	e08b      	b.n	1274 <flight+0x15c>
            flightState = flightTest;
            //flightState = flightPad;
            break;
        }

        attemptConnection();
    115c:	4b60      	ldr	r3, [pc, #384]	; (12e0 <flight+0x1c8>)
    115e:	4798      	blx	r3

        if (unplugged()) {
    1160:	4b60      	ldr	r3, [pc, #384]	; (12e4 <flight+0x1cc>)
    1162:	4798      	blx	r3
    1164:	2800      	cmp	r0, #0
    1166:	d100      	bne.n	116a <flight+0x52>
    1168:	e098      	b.n	129c <flight+0x184>
            flightState = flightIdle;
    116a:	2301      	movs	r3, #1
    116c:	702b      	strb	r3, [r5, #0]
            unpluggedJingle();
    116e:	4b5e      	ldr	r3, [pc, #376]	; (12e8 <flight+0x1d0>)
    1170:	e093      	b.n	129a <flight+0x182>
        //TC5->COUNT8.CTRLA.reg = 0;

        //delay_ms(1000);
        //pinToggle(LedPin);

        if (sercom(USART3)->SPI.INTFLAG.bit.RXC == 1) {
    1172:	4b5e      	ldr	r3, [pc, #376]	; (12ec <flight+0x1d4>)
    1174:	7e1b      	ldrb	r3, [r3, #24]
    1176:	075b      	lsls	r3, r3, #29
    1178:	d400      	bmi.n	117c <flight+0x64>
    117a:	e09d      	b.n	12b8 <flight+0x1a0>
            u8_t possibleReset = usartDataIn(USART3);
    117c:	2003      	movs	r0, #3
    117e:	4b5c      	ldr	r3, [pc, #368]	; (12f0 <flight+0x1d8>)
    1180:	4798      	blx	r3
            if (possibleReset == 0x52) {
    1182:	2852      	cmp	r0, #82	; 0x52
    1184:	d000      	beq.n	1188 <flight+0x70>
    1186:	e089      	b.n	129c <flight+0x184>
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
    1188:	f3bf 8f4f 	dsb	sy
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
    118c:	4a59      	ldr	r2, [pc, #356]	; (12f4 <flight+0x1dc>)
    118e:	4b5a      	ldr	r3, [pc, #360]	; (12f8 <flight+0x1e0>)
    1190:	60da      	str	r2, [r3, #12]
    1192:	f3bf 8f4f 	dsb	sy
    1196:	e7fe      	b.n	1196 <flight+0x7e>
        *  Accel > 2g & vel > 15ft/s
        *		 or
        *  baro alt > 100ft
        */

        updateGround();
    1198:	4b4a      	ldr	r3, [pc, #296]	; (12c4 <flight+0x1ac>)
    119a:	4798      	blx	r3

        if (writeLog) {
    119c:	4b57      	ldr	r3, [pc, #348]	; (12fc <flight+0x1e4>)
    119e:	781b      	ldrb	r3, [r3, #0]
    11a0:	2b00      	cmp	r3, #0
    11a2:	d003      	beq.n	11ac <flight+0x94>
}


inline static void pinToggle(Pin p) {
    PORT->Group[p.group].OUTTGL.reg = (1<<p.pin);
    11a4:	2280      	movs	r2, #128	; 0x80
    11a6:	4b56      	ldr	r3, [pc, #344]	; (1300 <flight+0x1e8>)
    11a8:	0352      	lsls	r2, r2, #13
    11aa:	61da      	str	r2, [r3, #28]
            //logSensors( );
            pinToggle(LedPin);
        }


        if ((( velocity > 15) && (accel > 2)) | (altitudeAGL() > 100)) {
    11ac:	4955      	ldr	r1, [pc, #340]	; (1304 <flight+0x1ec>)
    11ae:	4c56      	ldr	r4, [pc, #344]	; (1308 <flight+0x1f0>)
    11b0:	2200      	movs	r2, #0
    11b2:	6808      	ldr	r0, [r1, #0]
    11b4:	6849      	ldr	r1, [r1, #4]
    11b6:	4b55      	ldr	r3, [pc, #340]	; (130c <flight+0x1f4>)
    11b8:	47a0      	blx	r4
    11ba:	2800      	cmp	r0, #0
    11bc:	d00c      	beq.n	11d8 <flight+0xc0>
    11be:	2380      	movs	r3, #128	; 0x80
    11c0:	4953      	ldr	r1, [pc, #332]	; (1310 <flight+0x1f8>)
    11c2:	2200      	movs	r2, #0
    11c4:	6808      	ldr	r0, [r1, #0]
    11c6:	6849      	ldr	r1, [r1, #4]
    11c8:	05db      	lsls	r3, r3, #23
    11ca:	47a0      	blx	r4
    11cc:	1e44      	subs	r4, r0, #1
    11ce:	41a0      	sbcs	r0, r4
    11d0:	2401      	movs	r4, #1
    11d2:	4240      	negs	r0, r0
    11d4:	4004      	ands	r4, r0
    11d6:	e000      	b.n	11da <flight+0xc2>
    11d8:	0004      	movs	r4, r0
    11da:	4b4e      	ldr	r3, [pc, #312]	; (1314 <flight+0x1fc>)
    11dc:	4798      	blx	r3
    11de:	2864      	cmp	r0, #100	; 0x64
    11e0:	dc01      	bgt.n	11e6 <flight+0xce>
    11e2:	07e3      	lsls	r3, r4, #31
    11e4:	d55a      	bpl.n	129c <flight+0x184>
            flightState = flightBoost;
    11e6:	2303      	movs	r3, #3
            logEvent('L');
    11e8:	204c      	movs	r0, #76	; 0x4c
            pinToggle(LedPin);
        }


        if ((( velocity > 15) && (accel > 2)) | (altitudeAGL() > 100)) {
            flightState = flightBoost;
    11ea:	702b      	strb	r3, [r5, #0]
    11ec:	e02f      	b.n	124e <flight+0x136>
        /*
        *	boost to fast
        *		while
        *	Accel > 1/4G
        */
        if (writeLog) {
    11ee:	4b43      	ldr	r3, [pc, #268]	; (12fc <flight+0x1e4>)
    11f0:	781b      	ldrb	r3, [r3, #0]
    11f2:	2b00      	cmp	r3, #0
    11f4:	d001      	beq.n	11fa <flight+0xe2>
            logSensors( );
    11f6:	4b48      	ldr	r3, [pc, #288]	; (1318 <flight+0x200>)
    11f8:	4798      	blx	r3
        }

        if (velocity < 0) {
    11fa:	4942      	ldr	r1, [pc, #264]	; (1304 <flight+0x1ec>)
    11fc:	2200      	movs	r2, #0
    11fe:	6808      	ldr	r0, [r1, #0]
    1200:	6849      	ldr	r1, [r1, #4]
    1202:	2300      	movs	r3, #0
    1204:	4c45      	ldr	r4, [pc, #276]	; (131c <flight+0x204>)
    1206:	47a0      	blx	r4
    1208:	2800      	cmp	r0, #0
    120a:	d047      	beq.n	129c <flight+0x184>
            flightState = flightDrogue;
    120c:	2306      	movs	r3, #6
    120e:	702b      	strb	r3, [r5, #0]
            igniteDrogue();
    1210:	4b43      	ldr	r3, [pc, #268]	; (1320 <flight+0x208>)
    1212:	4798      	blx	r3
            logEvent('A');
    1214:	2041      	movs	r0, #65	; 0x41
    1216:	4b43      	ldr	r3, [pc, #268]	; (1324 <flight+0x20c>)
    1218:	4798      	blx	r3
            beep(100);
    121a:	2064      	movs	r0, #100	; 0x64
    121c:	4b42      	ldr	r3, [pc, #264]	; (1328 <flight+0x210>)
    121e:	4798      	blx	r3
    1220:	e03c      	b.n	129c <flight+0x184>


        break;
    case flightDrogue:

        if (writeLog) {
    1222:	4b36      	ldr	r3, [pc, #216]	; (12fc <flight+0x1e4>)
    1224:	781b      	ldrb	r3, [r3, #0]
    1226:	2b00      	cmp	r3, #0
    1228:	d001      	beq.n	122e <flight+0x116>
            logSensors( );
    122a:	4b3b      	ldr	r3, [pc, #236]	; (1318 <flight+0x200>)
    122c:	4798      	blx	r3
        }


        if (altitude < deploymentSettings.MAIN_DEPLOY) {
    122e:	4b3f      	ldr	r3, [pc, #252]	; (132c <flight+0x214>)
    1230:	8b18      	ldrh	r0, [r3, #24]
    1232:	4b3f      	ldr	r3, [pc, #252]	; (1330 <flight+0x218>)
    1234:	4798      	blx	r3
    1236:	4b3f      	ldr	r3, [pc, #252]	; (1334 <flight+0x21c>)
    1238:	4c33      	ldr	r4, [pc, #204]	; (1308 <flight+0x1f0>)
    123a:	681a      	ldr	r2, [r3, #0]
    123c:	685b      	ldr	r3, [r3, #4]
    123e:	47a0      	blx	r4
    1240:	2800      	cmp	r0, #0
    1242:	d02b      	beq.n	129c <flight+0x184>
            flightState = flightMain;
    1244:	2307      	movs	r3, #7
    1246:	702b      	strb	r3, [r5, #0]
            igniteMain();
    1248:	4b3b      	ldr	r3, [pc, #236]	; (1338 <flight+0x220>)
    124a:	4798      	blx	r3
            logEvent('M');
    124c:	204d      	movs	r0, #77	; 0x4d
    124e:	4b35      	ldr	r3, [pc, #212]	; (1324 <flight+0x20c>)
    1250:	4798      	blx	r3
    1252:	e023      	b.n	129c <flight+0x184>
        }

        break;
    case flightMain:

        if (writeLog) {
    1254:	4b29      	ldr	r3, [pc, #164]	; (12fc <flight+0x1e4>)
    1256:	781b      	ldrb	r3, [r3, #0]
    1258:	2b00      	cmp	r3, #0
    125a:	d001      	beq.n	1260 <flight+0x148>
            logSensors( );
    125c:	4b2e      	ldr	r3, [pc, #184]	; (1318 <flight+0x200>)
    125e:	4798      	blx	r3
        }

        if (velocity < 5) {
    1260:	4928      	ldr	r1, [pc, #160]	; (1304 <flight+0x1ec>)
    1262:	2200      	movs	r2, #0
    1264:	6808      	ldr	r0, [r1, #0]
    1266:	6849      	ldr	r1, [r1, #4]
    1268:	4b34      	ldr	r3, [pc, #208]	; (133c <flight+0x224>)
    126a:	4c2c      	ldr	r4, [pc, #176]	; (131c <flight+0x204>)
    126c:	47a0      	blx	r4
    126e:	2800      	cmp	r0, #0
    1270:	d014      	beq.n	129c <flight+0x184>
            flightState = flightLanded;
    1272:	2308      	movs	r3, #8
    1274:	702b      	strb	r3, [r5, #0]
    1276:	e011      	b.n	129c <flight+0x184>


        break;
    case flightTest:
        //simple continuity test
        if ( (sample.voltage.senseA + sample.voltage.senseB +sample.voltage.senseC +sample.voltage.senseD) > 200) {
    1278:	4b31      	ldr	r3, [pc, #196]	; (1340 <flight+0x228>)
    127a:	8a5a      	ldrh	r2, [r3, #18]
    127c:	8a19      	ldrh	r1, [r3, #16]
    127e:	1889      	adds	r1, r1, r2
    1280:	8a9a      	ldrh	r2, [r3, #20]
    1282:	1889      	adds	r1, r1, r2
    1284:	8ada      	ldrh	r2, [r3, #22]
    1286:	188b      	adds	r3, r1, r2
    1288:	2bc8      	cmp	r3, #200	; 0xc8
    128a:	dd01      	ble.n	1290 <flight+0x178>
            unpluggedJingle();
    128c:	4b16      	ldr	r3, [pc, #88]	; (12e8 <flight+0x1d0>)
    128e:	4798      	blx	r3
        }

        if (writeLog) {
    1290:	4b1a      	ldr	r3, [pc, #104]	; (12fc <flight+0x1e4>)
    1292:	781b      	ldrb	r3, [r3, #0]
    1294:	2b00      	cmp	r3, #0
    1296:	d001      	beq.n	129c <flight+0x184>
            logSensors( );
    1298:	4b1f      	ldr	r3, [pc, #124]	; (1318 <flight+0x200>)
    129a:	4798      	blx	r3
        }

        break;
    }

    if ((flightState != flightStatrup) & ((flightState != flightIdle) & unplugged())) {
    129c:	2301      	movs	r3, #1
    129e:	782c      	ldrb	r4, [r5, #0]
    12a0:	42a3      	cmp	r3, r4
    12a2:	41a4      	sbcs	r4, r4
    12a4:	4b0f      	ldr	r3, [pc, #60]	; (12e4 <flight+0x1cc>)
    12a6:	4264      	negs	r4, r4
    12a8:	4798      	blx	r3
    12aa:	2800      	cmp	r0, #0
    12ac:	d006      	beq.n	12bc <flight+0x1a4>
    12ae:	2c00      	cmp	r4, #0
    12b0:	d004      	beq.n	12bc <flight+0x1a4>
        finishFlight();
    12b2:	4b24      	ldr	r3, [pc, #144]	; (1344 <flight+0x22c>)
    12b4:	4798      	blx	r3
    }

    12b6:	e001      	b.n	12bc <flight+0x1a4>
        }

        break;
    }

    if ((flightState != flightStatrup) & ((flightState != flightIdle) & unplugged())) {
    12b8:	4b0a      	ldr	r3, [pc, #40]	; (12e4 <flight+0x1cc>)
    12ba:	4798      	blx	r3
        finishFlight();
    }

    12bc:	bd70      	pop	{r4, r5, r6, pc}
    12be:	46c0      	nop			; (mov r8, r8)
    12c0:	20000698 	.word	0x20000698
    12c4:	00001349 	.word	0x00001349
    12c8:	00001015 	.word	0x00001015
    12cc:	20000524 	.word	0x20000524
    12d0:	00002710 	.word	0x00002710
    12d4:	0000255d 	.word	0x0000255d
    12d8:	00002279 	.word	0x00002279
    12dc:	00000d75 	.word	0x00000d75
    12e0:	00002c31 	.word	0x00002c31
    12e4:	00000b01 	.word	0x00000b01
    12e8:	00000dad 	.word	0x00000dad
    12ec:	42001400 	.word	0x42001400
    12f0:	00002a6d 	.word	0x00002a6d
    12f4:	05fa0004 	.word	0x05fa0004
    12f8:	e000ed00 	.word	0xe000ed00
    12fc:	20000522 	.word	0x20000522
    1300:	41004400 	.word	0x41004400
    1304:	200006a8 	.word	0x200006a8
    1308:	00003fa9 	.word	0x00003fa9
    130c:	402e0000 	.word	0x402e0000
    1310:	200006a0 	.word	0x200006a0
    1314:	00000acd 	.word	0x00000acd
    1318:	00002329 	.word	0x00002329
    131c:	00003f81 	.word	0x00003f81
    1320:	00001695 	.word	0x00001695
    1324:	000022d5 	.word	0x000022d5
    1328:	00000d39 	.word	0x00000d39
    132c:	20000508 	.word	0x20000508
    1330:	00006185 	.word	0x00006185
    1334:	200006b0 	.word	0x200006b0
    1338:	00001639 	.word	0x00001639
    133c:	40140000 	.word	0x40140000
    1340:	200007e0 	.word	0x200007e0
    1344:	00000b35 	.word	0x00000b35

00001348 <updateGround>:
#include <util.h>
#include <altimeter.h>

void updateGround(Altimeter *my_altimeter) {
    1348:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}



    offsets.gravityOffsetBuffer = offsets.gravityOffsetBuffer * 0.8 + sample.accelZ * 0.2;
    134a:	4c2b      	ldr	r4, [pc, #172]	; (13f8 <updateGround+0xb0>)
    134c:	4d2b      	ldr	r5, [pc, #172]	; (13fc <updateGround+0xb4>)
    134e:	4a2c      	ldr	r2, [pc, #176]	; (1400 <updateGround+0xb8>)
    1350:	6920      	ldr	r0, [r4, #16]
    1352:	6961      	ldr	r1, [r4, #20]
    1354:	4b2b      	ldr	r3, [pc, #172]	; (1404 <updateGround+0xbc>)
    1356:	47a8      	blx	r5
    1358:	4b2b      	ldr	r3, [pc, #172]	; (1408 <updateGround+0xc0>)
    135a:	0006      	movs	r6, r0
    135c:	6a98      	ldr	r0, [r3, #40]	; 0x28
    135e:	4b2b      	ldr	r3, [pc, #172]	; (140c <updateGround+0xc4>)
    1360:	000f      	movs	r7, r1
    1362:	4798      	blx	r3
    1364:	4a26      	ldr	r2, [pc, #152]	; (1400 <updateGround+0xb8>)
    1366:	4b2a      	ldr	r3, [pc, #168]	; (1410 <updateGround+0xc8>)
    1368:	47a8      	blx	r5
    136a:	0002      	movs	r2, r0
    136c:	000b      	movs	r3, r1
    136e:	0030      	movs	r0, r6
    1370:	0039      	movs	r1, r7
    1372:	4e28      	ldr	r6, [pc, #160]	; (1414 <updateGround+0xcc>)
    1374:	47b0      	blx	r6
    offsets.groundOffsetBuffer = offsets.groundOffsetBuffer * 0.5 + altitude * 0.5;
    1376:	4e28      	ldr	r6, [pc, #160]	; (1418 <updateGround+0xd0>)

void updateGround(Altimeter *my_altimeter) {



    offsets.gravityOffsetBuffer = offsets.gravityOffsetBuffer * 0.8 + sample.accelZ * 0.2;
    1378:	6120      	str	r0, [r4, #16]
    137a:	6161      	str	r1, [r4, #20]
    offsets.groundOffsetBuffer = offsets.groundOffsetBuffer * 0.5 + altitude * 0.5;
    137c:	69e0      	ldr	r0, [r4, #28]
    137e:	47b0      	blx	r6
    1380:	2200      	movs	r2, #0
    1382:	4b26      	ldr	r3, [pc, #152]	; (141c <updateGround+0xd4>)
    1384:	47a8      	blx	r5
    1386:	9000      	str	r0, [sp, #0]
    1388:	9101      	str	r1, [sp, #4]
    138a:	4925      	ldr	r1, [pc, #148]	; (1420 <updateGround+0xd8>)
    138c:	2200      	movs	r2, #0
    138e:	6808      	ldr	r0, [r1, #0]
    1390:	6849      	ldr	r1, [r1, #4]
    1392:	4b22      	ldr	r3, [pc, #136]	; (141c <updateGround+0xd4>)
    1394:	47a8      	blx	r5
    1396:	4f1f      	ldr	r7, [pc, #124]	; (1414 <updateGround+0xcc>)
    1398:	0002      	movs	r2, r0
    139a:	000b      	movs	r3, r1
    139c:	9800      	ldr	r0, [sp, #0]
    139e:	9901      	ldr	r1, [sp, #4]
    13a0:	47b8      	blx	r7
    13a2:	4f20      	ldr	r7, [pc, #128]	; (1424 <updateGround+0xdc>)
    13a4:	47b8      	blx	r7
    13a6:	61e0      	str	r0, [r4, #28]
    offsets.groundTemperatureBuffer = offsets.groundTemperatureBuffer * 0.8 + sample.temperatureCelcus * 0.2;
    13a8:	6a60      	ldr	r0, [r4, #36]	; 0x24
    13aa:	47b0      	blx	r6
    13ac:	4a14      	ldr	r2, [pc, #80]	; (1400 <updateGround+0xb8>)
    13ae:	4b15      	ldr	r3, [pc, #84]	; (1404 <updateGround+0xbc>)
    13b0:	47a8      	blx	r5
    13b2:	4b15      	ldr	r3, [pc, #84]	; (1408 <updateGround+0xc0>)
    13b4:	9000      	str	r0, [sp, #0]
    13b6:	9101      	str	r1, [sp, #4]
    13b8:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
    13ba:	47b0      	blx	r6
    13bc:	4a10      	ldr	r2, [pc, #64]	; (1400 <updateGround+0xb8>)
    13be:	4b14      	ldr	r3, [pc, #80]	; (1410 <updateGround+0xc8>)
    13c0:	47a8      	blx	r5
    13c2:	4d14      	ldr	r5, [pc, #80]	; (1414 <updateGround+0xcc>)
    13c4:	000b      	movs	r3, r1
    13c6:	0002      	movs	r2, r0
    13c8:	9800      	ldr	r0, [sp, #0]
    13ca:	9901      	ldr	r1, [sp, #4]
    13cc:	47a8      	blx	r5
    13ce:	47b8      	blx	r7

    if ((millis() - offsets.offsetBufferTime) > 2000) {
    13d0:	4d15      	ldr	r5, [pc, #84]	; (1428 <updateGround+0xe0>)



    offsets.gravityOffsetBuffer = offsets.gravityOffsetBuffer * 0.8 + sample.accelZ * 0.2;
    offsets.groundOffsetBuffer = offsets.groundOffsetBuffer * 0.5 + altitude * 0.5;
    offsets.groundTemperatureBuffer = offsets.groundTemperatureBuffer * 0.8 + sample.temperatureCelcus * 0.2;
    13d2:	6260      	str	r0, [r4, #36]	; 0x24

    if ((millis() - offsets.offsetBufferTime) > 2000) {
    13d4:	47a8      	blx	r5
    13d6:	6823      	ldr	r3, [r4, #0]
    13d8:	1ac0      	subs	r0, r0, r3
    13da:	23fa      	movs	r3, #250	; 0xfa
    13dc:	00db      	lsls	r3, r3, #3
    13de:	4298      	cmp	r0, r3
    13e0:	d909      	bls.n	13f6 <updateGround+0xae>
        //recursive filter
        offsets.groundOffset = offsets.groundOffsetBuffer;
    13e2:	69e3      	ldr	r3, [r4, #28]
    13e4:	61a3      	str	r3, [r4, #24]
        offsets.groundTemperature = offsets.groundTemperatureBuffer;
    13e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
    13e8:	6223      	str	r3, [r4, #32]
        offsets.gravityOffset = offsets.gravityOffsetBuffer;
    13ea:	6922      	ldr	r2, [r4, #16]
    13ec:	6963      	ldr	r3, [r4, #20]
    13ee:	60a2      	str	r2, [r4, #8]
    13f0:	60e3      	str	r3, [r4, #12]
        offsets.offsetBufferTime = millis();
    13f2:	47a8      	blx	r5
    13f4:	6020      	str	r0, [r4, #0]
    }
}
    13f6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    13f8:	200004d8 	.word	0x200004d8
    13fc:	0000553d 	.word	0x0000553d
    1400:	9999999a 	.word	0x9999999a
    1404:	3fe99999 	.word	0x3fe99999
    1408:	200007e0 	.word	0x200007e0
    140c:	00006279 	.word	0x00006279
    1410:	3fc99999 	.word	0x3fc99999
    1414:	0000469d 	.word	0x0000469d
    1418:	00006209 	.word	0x00006209
    141c:	3fe00000 	.word	0x3fe00000
    1420:	200006b0 	.word	0x200006b0
    1424:	00004059 	.word	0x00004059
    1428:	00001015 	.word	0x00001015

0000142c <isItPointingUp>:

void isItPointingUp() {
    142c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    u8_t i;

    double pointingUpBuffer;

    pointingUpBuffer = sample.accelZ;
    142e:	4f25      	ldr	r7, [pc, #148]	; (14c4 <isItPointingUp+0x98>)
    1430:	4b25      	ldr	r3, [pc, #148]	; (14c8 <isItPointingUp+0x9c>)
    1432:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    1434:	4798      	blx	r3
    1436:	260a      	movs	r6, #10
    1438:	0004      	movs	r4, r0
    143a:	000d      	movs	r5, r1
    143c:	9701      	str	r7, [sp, #4]

    for ( i = 0; i < 10 ; ++i ) {
        delay_ms(10);
    143e:	200a      	movs	r0, #10
    1440:	4b22      	ldr	r3, [pc, #136]	; (14cc <isItPointingUp+0xa0>)
    1442:	4798      	blx	r3
        sampleTick();
    1444:	4b22      	ldr	r3, [pc, #136]	; (14d0 <isItPointingUp+0xa4>)
    1446:	4798      	blx	r3
        pointingUpBuffer = pointingUpBuffer * 0.8 + sample.accelZ * 0.2;
    1448:	4a22      	ldr	r2, [pc, #136]	; (14d4 <isItPointingUp+0xa8>)
    144a:	4b23      	ldr	r3, [pc, #140]	; (14d8 <isItPointingUp+0xac>)
    144c:	0020      	movs	r0, r4
    144e:	0029      	movs	r1, r5
    1450:	4c22      	ldr	r4, [pc, #136]	; (14dc <isItPointingUp+0xb0>)
    1452:	47a0      	blx	r4
    1454:	0004      	movs	r4, r0
    1456:	000d      	movs	r5, r1
    1458:	9b01      	ldr	r3, [sp, #4]
    145a:	3e01      	subs	r6, #1
    145c:	6a98      	ldr	r0, [r3, #40]	; 0x28
    145e:	4b1a      	ldr	r3, [pc, #104]	; (14c8 <isItPointingUp+0x9c>)
    1460:	4798      	blx	r3
    1462:	4a1c      	ldr	r2, [pc, #112]	; (14d4 <isItPointingUp+0xa8>)
    1464:	4b1e      	ldr	r3, [pc, #120]	; (14e0 <isItPointingUp+0xb4>)
    1466:	4f1d      	ldr	r7, [pc, #116]	; (14dc <isItPointingUp+0xb0>)
    1468:	47b8      	blx	r7
    146a:	0022      	movs	r2, r4
    146c:	002b      	movs	r3, r5
    146e:	4c1d      	ldr	r4, [pc, #116]	; (14e4 <isItPointingUp+0xb8>)
    1470:	47a0      	blx	r4
    1472:	b2f6      	uxtb	r6, r6
    1474:	0004      	movs	r4, r0
    1476:	000d      	movs	r5, r1

    double pointingUpBuffer;

    pointingUpBuffer = sample.accelZ;

    for ( i = 0; i < 10 ; ++i ) {
    1478:	2e00      	cmp	r6, #0
    147a:	d1e0      	bne.n	143e <isItPointingUp+0x12>
        delay_ms(10);
        sampleTick();
        pointingUpBuffer = pointingUpBuffer * 0.8 + sample.accelZ * 0.2;
    }
    if ((pointingUpBuffer > 0.9) & (pointingUpBuffer <1.1)) {
    147c:	4e1a      	ldr	r6, [pc, #104]	; (14e8 <isItPointingUp+0xbc>)
    147e:	4a1b      	ldr	r2, [pc, #108]	; (14ec <isItPointingUp+0xc0>)
    1480:	4b1b      	ldr	r3, [pc, #108]	; (14f0 <isItPointingUp+0xc4>)
    1482:	47b0      	blx	r6
    1484:	0037      	movs	r7, r6
    1486:	4e1b      	ldr	r6, [pc, #108]	; (14f4 <isItPointingUp+0xc8>)
    1488:	2800      	cmp	r0, #0
    148a:	d007      	beq.n	149c <isItPointingUp+0x70>
    148c:	4a11      	ldr	r2, [pc, #68]	; (14d4 <isItPointingUp+0xa8>)
    148e:	4b1a      	ldr	r3, [pc, #104]	; (14f8 <isItPointingUp+0xcc>)
    1490:	0020      	movs	r0, r4
    1492:	0029      	movs	r1, r5
    1494:	47b0      	blx	r6
        altimeter.pointingUp = true;
    1496:	2201      	movs	r2, #1
    for ( i = 0; i < 10 ; ++i ) {
        delay_ms(10);
        sampleTick();
        pointingUpBuffer = pointingUpBuffer * 0.8 + sample.accelZ * 0.2;
    }
    if ((pointingUpBuffer > 0.9) & (pointingUpBuffer <1.1)) {
    1498:	2800      	cmp	r0, #0
    149a:	d10e      	bne.n	14ba <isItPointingUp+0x8e>
        altimeter.pointingUp = true;
    } else if ((pointingUpBuffer < -0.9) & (pointingUpBuffer > -1.1)) {
    149c:	4a13      	ldr	r2, [pc, #76]	; (14ec <isItPointingUp+0xc0>)
    149e:	4b17      	ldr	r3, [pc, #92]	; (14fc <isItPointingUp+0xd0>)
    14a0:	0020      	movs	r0, r4
    14a2:	0029      	movs	r1, r5
    14a4:	47b0      	blx	r6
    14a6:	2800      	cmp	r0, #0
    14a8:	d00a      	beq.n	14c0 <isItPointingUp+0x94>
    14aa:	4a0a      	ldr	r2, [pc, #40]	; (14d4 <isItPointingUp+0xa8>)
    14ac:	4b14      	ldr	r3, [pc, #80]	; (1500 <isItPointingUp+0xd4>)
    14ae:	0020      	movs	r0, r4
    14b0:	0029      	movs	r1, r5
    14b2:	47b8      	blx	r7
    14b4:	2800      	cmp	r0, #0
    14b6:	d003      	beq.n	14c0 <isItPointingUp+0x94>
        altimeter.pointingUp = false;
    14b8:	2200      	movs	r2, #0
    14ba:	4b12      	ldr	r3, [pc, #72]	; (1504 <isItPointingUp+0xd8>)
    14bc:	715a      	strb	r2, [r3, #5]

        }

    }

    14be:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    14c0:	e7fe      	b.n	14c0 <isItPointingUp+0x94>
    14c2:	46c0      	nop			; (mov r8, r8)
    14c4:	200007e0 	.word	0x200007e0
    14c8:	00006279 	.word	0x00006279
    14cc:	00000fc9 	.word	0x00000fc9
    14d0:	00002625 	.word	0x00002625
    14d4:	9999999a 	.word	0x9999999a
    14d8:	3fe99999 	.word	0x3fe99999
    14dc:	0000553d 	.word	0x0000553d
    14e0:	3fc99999 	.word	0x3fc99999
    14e4:	0000469d 	.word	0x0000469d
    14e8:	00003fa9 	.word	0x00003fa9
    14ec:	cccccccd 	.word	0xcccccccd
    14f0:	3feccccc 	.word	0x3feccccc
    14f4:	00003f81 	.word	0x00003f81
    14f8:	3ff19999 	.word	0x3ff19999
    14fc:	bfeccccc 	.word	0xbfeccccc
    1500:	bff19999 	.word	0xbff19999
    1504:	20000528 	.word	0x20000528

00001508 <igniterTick>:
#include <util.h>
#include <boardDefines.h>


void igniterTick() {
    1508:	b510      	push	{r4, lr}

    if (charges.igniterAHot) {
    150a:	4c23      	ldr	r4, [pc, #140]	; (1598 <igniterTick+0x90>)
    150c:	7823      	ldrb	r3, [r4, #0]
    150e:	2b00      	cmp	r3, #0
    1510:	d00d      	beq.n	152e <igniterTick+0x26>
        if ((millis() - charges.igniterATick) > 2000) {
    1512:	4b22      	ldr	r3, [pc, #136]	; (159c <igniterTick+0x94>)
    1514:	4798      	blx	r3
    1516:	6863      	ldr	r3, [r4, #4]
    1518:	1ac0      	subs	r0, r0, r3
    151a:	23fa      	movs	r3, #250	; 0xfa
    151c:	00db      	lsls	r3, r3, #3
    151e:	4298      	cmp	r0, r3
    1520:	d905      	bls.n	152e <igniterTick+0x26>
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    1522:	2280      	movs	r2, #128	; 0x80
    1524:	4b1e      	ldr	r3, [pc, #120]	; (15a0 <igniterTick+0x98>)
    1526:	0412      	lsls	r2, r2, #16
    1528:	601a      	str	r2, [r3, #0]
            pinLow(fireAPin);
            charges.igniterAHot = false;
    152a:	2300      	movs	r3, #0
    152c:	7023      	strb	r3, [r4, #0]
        }
    }

    if (charges.igniterBHot) {
    152e:	7a23      	ldrb	r3, [r4, #8]
    1530:	2b00      	cmp	r3, #0
    1532:	d00d      	beq.n	1550 <igniterTick+0x48>
        if ((millis() - charges.igniterBTick) > 2000) {
    1534:	4b19      	ldr	r3, [pc, #100]	; (159c <igniterTick+0x94>)
    1536:	4798      	blx	r3
    1538:	68e3      	ldr	r3, [r4, #12]
    153a:	1ac0      	subs	r0, r0, r3
    153c:	23fa      	movs	r3, #250	; 0xfa
    153e:	00db      	lsls	r3, r3, #3
    1540:	4298      	cmp	r0, r3
    1542:	d905      	bls.n	1550 <igniterTick+0x48>
    1544:	2280      	movs	r2, #128	; 0x80
    1546:	4b16      	ldr	r3, [pc, #88]	; (15a0 <igniterTick+0x98>)
    1548:	03d2      	lsls	r2, r2, #15
    154a:	601a      	str	r2, [r3, #0]
            pinLow(fireBPin);
            charges.igniterBHot = false;
    154c:	2300      	movs	r3, #0
    154e:	7223      	strb	r3, [r4, #8]
        }
    }

    if (charges.igniterCHot) {
    1550:	7c23      	ldrb	r3, [r4, #16]
    1552:	2b00      	cmp	r3, #0
    1554:	d00d      	beq.n	1572 <igniterTick+0x6a>
        if ((millis() - charges.igniterCTick) > 2000) {
    1556:	4b11      	ldr	r3, [pc, #68]	; (159c <igniterTick+0x94>)
    1558:	4798      	blx	r3
    155a:	6963      	ldr	r3, [r4, #20]
    155c:	1ac0      	subs	r0, r0, r3
    155e:	23fa      	movs	r3, #250	; 0xfa
    1560:	00db      	lsls	r3, r3, #3
    1562:	4298      	cmp	r0, r3
    1564:	d905      	bls.n	1572 <igniterTick+0x6a>
    1566:	2280      	movs	r2, #128	; 0x80
    1568:	4b0e      	ldr	r3, [pc, #56]	; (15a4 <igniterTick+0x9c>)
    156a:	0492      	lsls	r2, r2, #18
    156c:	615a      	str	r2, [r3, #20]
            pinLow(fireCPin);
            charges.igniterCHot = false;
    156e:	2300      	movs	r3, #0
    1570:	7423      	strb	r3, [r4, #16]
        }
    }

    if (charges.igniterDHot) {
    1572:	7e23      	ldrb	r3, [r4, #24]
    1574:	2b00      	cmp	r3, #0
    1576:	d00d      	beq.n	1594 <igniterTick+0x8c>
        if ((millis() - charges.igniterDTick) > 2000) {
    1578:	4b08      	ldr	r3, [pc, #32]	; (159c <igniterTick+0x94>)
    157a:	4798      	blx	r3
    157c:	69e3      	ldr	r3, [r4, #28]
    157e:	1ac0      	subs	r0, r0, r3
    1580:	23fa      	movs	r3, #250	; 0xfa
    1582:	00db      	lsls	r3, r3, #3
    1584:	4298      	cmp	r0, r3
    1586:	d905      	bls.n	1594 <igniterTick+0x8c>
    1588:	2280      	movs	r2, #128	; 0x80
    158a:	4b06      	ldr	r3, [pc, #24]	; (15a4 <igniterTick+0x9c>)
    158c:	0452      	lsls	r2, r2, #17
    158e:	615a      	str	r2, [r3, #20]
            pinLow(fireDPin);
            charges.igniterDHot = false;
    1590:	2300      	movs	r3, #0
    1592:	7623      	strb	r3, [r4, #24]
        }
    }
}
    1594:	bd10      	pop	{r4, pc}
    1596:	46c0      	nop			; (mov r8, r8)
    1598:	20000678 	.word	0x20000678
    159c:	00001015 	.word	0x00001015
    15a0:	41004494 	.word	0x41004494
    15a4:	41004400 	.word	0x41004400

000015a8 <lightIgniterA>:
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    15a8:	2280      	movs	r2, #128	; 0x80
    15aa:	4b05      	ldr	r3, [pc, #20]	; (15c0 <lightIgniterA+0x18>)
    15ac:	0412      	lsls	r2, r2, #16
    if (deploymentSettings.channelDSettings.ENABLED & (deploymentSettings.channelDSettings.TYPE == DROGUE_t)) {
        lightIgniterD();
    }
}

void lightIgniterA() {
    15ae:	b510      	push	{r4, lr}
    15b0:	601a      	str	r2, [r3, #0]
    pinHigh(fireAPin);
    charges.igniterAHot = true;
    15b2:	2301      	movs	r3, #1
    15b4:	4c03      	ldr	r4, [pc, #12]	; (15c4 <lightIgniterA+0x1c>)
    15b6:	7023      	strb	r3, [r4, #0]
    charges.igniterATick = millis();
    15b8:	4b03      	ldr	r3, [pc, #12]	; (15c8 <lightIgniterA+0x20>)
    15ba:	4798      	blx	r3
    15bc:	6060      	str	r0, [r4, #4]
}
    15be:	bd10      	pop	{r4, pc}
    15c0:	41004498 	.word	0x41004498
    15c4:	20000678 	.word	0x20000678
    15c8:	00001015 	.word	0x00001015

000015cc <lightIgniterB>:
    15cc:	2280      	movs	r2, #128	; 0x80
    15ce:	4b05      	ldr	r3, [pc, #20]	; (15e4 <lightIgniterB+0x18>)
    15d0:	03d2      	lsls	r2, r2, #15

void lightIgniterB() {
    15d2:	b510      	push	{r4, lr}
    15d4:	601a      	str	r2, [r3, #0]
    pinHigh(fireBPin);
    charges.igniterBHot = true;
    15d6:	2301      	movs	r3, #1
    15d8:	4c03      	ldr	r4, [pc, #12]	; (15e8 <lightIgniterB+0x1c>)
    15da:	7223      	strb	r3, [r4, #8]
    charges.igniterBTick = millis();
    15dc:	4b03      	ldr	r3, [pc, #12]	; (15ec <lightIgniterB+0x20>)
    15de:	4798      	blx	r3
    15e0:	60e0      	str	r0, [r4, #12]
}
    15e2:	bd10      	pop	{r4, pc}
    15e4:	41004498 	.word	0x41004498
    15e8:	20000678 	.word	0x20000678
    15ec:	00001015 	.word	0x00001015

000015f0 <lightIgniterC>:
    15f0:	2280      	movs	r2, #128	; 0x80
    15f2:	4b05      	ldr	r3, [pc, #20]	; (1608 <lightIgniterC+0x18>)
    15f4:	0492      	lsls	r2, r2, #18

void lightIgniterC() {
    15f6:	b510      	push	{r4, lr}
    15f8:	619a      	str	r2, [r3, #24]
    pinHigh(fireCPin);
    charges.igniterCHot = true;
    15fa:	2301      	movs	r3, #1
    15fc:	4c03      	ldr	r4, [pc, #12]	; (160c <lightIgniterC+0x1c>)
    15fe:	7423      	strb	r3, [r4, #16]
    charges.igniterCTick = millis();
    1600:	4b03      	ldr	r3, [pc, #12]	; (1610 <lightIgniterC+0x20>)
    1602:	4798      	blx	r3
    1604:	6160      	str	r0, [r4, #20]
}
    1606:	bd10      	pop	{r4, pc}
    1608:	41004400 	.word	0x41004400
    160c:	20000678 	.word	0x20000678
    1610:	00001015 	.word	0x00001015

00001614 <lightIgniterD>:
    1614:	2280      	movs	r2, #128	; 0x80
    1616:	4b05      	ldr	r3, [pc, #20]	; (162c <lightIgniterD+0x18>)
    1618:	0452      	lsls	r2, r2, #17

void lightIgniterD() {
    161a:	b510      	push	{r4, lr}
    161c:	619a      	str	r2, [r3, #24]
    pinHigh(fireDPin);
    charges.igniterDHot = true;
    161e:	2301      	movs	r3, #1
    1620:	4c03      	ldr	r4, [pc, #12]	; (1630 <lightIgniterD+0x1c>)
    1622:	7623      	strb	r3, [r4, #24]
    charges.igniterDTick = millis();
    1624:	4b03      	ldr	r3, [pc, #12]	; (1634 <lightIgniterD+0x20>)
    1626:	4798      	blx	r3
    1628:	61e0      	str	r0, [r4, #28]
    162a:	bd10      	pop	{r4, pc}
    162c:	41004400 	.word	0x41004400
    1630:	20000678 	.word	0x20000678
    1634:	00001015 	.word	0x00001015

00001638 <igniteMain>:
            charges.igniterDHot = false;
        }
    }
}

void igniteMain() {
    1638:	b510      	push	{r4, lr}

    if (deploymentSettings.channelASettings.ENABLED & (deploymentSettings.channelASettings.TYPE == MAIN_t)) {
    163a:	4c11      	ldr	r4, [pc, #68]	; (1680 <igniteMain+0x48>)
    163c:	7863      	ldrb	r3, [r4, #1]
    163e:	2b00      	cmp	r3, #0
    1640:	d104      	bne.n	164c <igniteMain+0x14>
    1642:	7823      	ldrb	r3, [r4, #0]
    1644:	2b00      	cmp	r3, #0
    1646:	d001      	beq.n	164c <igniteMain+0x14>
        lightIgniterA();
    1648:	4b0e      	ldr	r3, [pc, #56]	; (1684 <igniteMain+0x4c>)
    164a:	4798      	blx	r3
    }
    if(deploymentSettings.channelBSettings.ENABLED & (deploymentSettings.channelBSettings.TYPE == MAIN_t)) {
    164c:	79e3      	ldrb	r3, [r4, #7]
    164e:	2b00      	cmp	r3, #0
    1650:	d104      	bne.n	165c <igniteMain+0x24>
    1652:	79a3      	ldrb	r3, [r4, #6]
    1654:	2b00      	cmp	r3, #0
    1656:	d001      	beq.n	165c <igniteMain+0x24>
        lightIgniterB();
    1658:	4b0b      	ldr	r3, [pc, #44]	; (1688 <igniteMain+0x50>)
    165a:	4798      	blx	r3
    }
    if (deploymentSettings.channelCSettings.ENABLED & (deploymentSettings.channelCSettings.TYPE == MAIN_t)) {
    165c:	7b63      	ldrb	r3, [r4, #13]
    165e:	2b00      	cmp	r3, #0
    1660:	d104      	bne.n	166c <igniteMain+0x34>
    1662:	7b23      	ldrb	r3, [r4, #12]
    1664:	2b00      	cmp	r3, #0
    1666:	d001      	beq.n	166c <igniteMain+0x34>
        lightIgniterC();
    1668:	4b08      	ldr	r3, [pc, #32]	; (168c <igniteMain+0x54>)
    166a:	4798      	blx	r3
    }
    if (deploymentSettings.channelDSettings.ENABLED & (deploymentSettings.channelDSettings.TYPE == MAIN_t)) {
    166c:	7ce3      	ldrb	r3, [r4, #19]
    166e:	2b00      	cmp	r3, #0
    1670:	d104      	bne.n	167c <igniteMain+0x44>
    1672:	7ca3      	ldrb	r3, [r4, #18]
    1674:	2b00      	cmp	r3, #0
    1676:	d001      	beq.n	167c <igniteMain+0x44>
        lightIgniterD();
    1678:	4b05      	ldr	r3, [pc, #20]	; (1690 <igniteMain+0x58>)
    167a:	4798      	blx	r3
    }
}
    167c:	bd10      	pop	{r4, pc}
    167e:	46c0      	nop			; (mov r8, r8)
    1680:	20000508 	.word	0x20000508
    1684:	000015a9 	.word	0x000015a9
    1688:	000015cd 	.word	0x000015cd
    168c:	000015f1 	.word	0x000015f1
    1690:	00001615 	.word	0x00001615

00001694 <igniteDrogue>:

void igniteDrogue() {
    1694:	b510      	push	{r4, lr}

    if (deploymentSettings.channelASettings.ENABLED & (deploymentSettings.channelASettings.TYPE == DROGUE_t)) {
    1696:	4c11      	ldr	r4, [pc, #68]	; (16dc <igniteDrogue+0x48>)
    1698:	7863      	ldrb	r3, [r4, #1]
    169a:	2b01      	cmp	r3, #1
    169c:	d104      	bne.n	16a8 <igniteDrogue+0x14>
    169e:	7823      	ldrb	r3, [r4, #0]
    16a0:	2b00      	cmp	r3, #0
    16a2:	d001      	beq.n	16a8 <igniteDrogue+0x14>
        lightIgniterA();
    16a4:	4b0e      	ldr	r3, [pc, #56]	; (16e0 <igniteDrogue+0x4c>)
    16a6:	4798      	blx	r3
    }
    if (deploymentSettings.channelBSettings.ENABLED & (deploymentSettings.channelBSettings.TYPE == DROGUE_t)) {
    16a8:	79e3      	ldrb	r3, [r4, #7]
    16aa:	2b01      	cmp	r3, #1
    16ac:	d104      	bne.n	16b8 <igniteDrogue+0x24>
    16ae:	79a3      	ldrb	r3, [r4, #6]
    16b0:	2b00      	cmp	r3, #0
    16b2:	d001      	beq.n	16b8 <igniteDrogue+0x24>
        lightIgniterB();
    16b4:	4b0b      	ldr	r3, [pc, #44]	; (16e4 <igniteDrogue+0x50>)
    16b6:	4798      	blx	r3
    }
    if (deploymentSettings.channelCSettings.ENABLED & (deploymentSettings.channelCSettings.TYPE == DROGUE_t)) {
    16b8:	7b63      	ldrb	r3, [r4, #13]
    16ba:	2b01      	cmp	r3, #1
    16bc:	d104      	bne.n	16c8 <igniteDrogue+0x34>
    16be:	7b23      	ldrb	r3, [r4, #12]
    16c0:	2b00      	cmp	r3, #0
    16c2:	d001      	beq.n	16c8 <igniteDrogue+0x34>
        lightIgniterC();
    16c4:	4b08      	ldr	r3, [pc, #32]	; (16e8 <igniteDrogue+0x54>)
    16c6:	4798      	blx	r3
    }
    if (deploymentSettings.channelDSettings.ENABLED & (deploymentSettings.channelDSettings.TYPE == DROGUE_t)) {
    16c8:	7ce3      	ldrb	r3, [r4, #19]
    16ca:	2b01      	cmp	r3, #1
    16cc:	d104      	bne.n	16d8 <igniteDrogue+0x44>
    16ce:	7ca3      	ldrb	r3, [r4, #18]
    16d0:	2b00      	cmp	r3, #0
    16d2:	d001      	beq.n	16d8 <igniteDrogue+0x44>
        lightIgniterD();
    16d4:	4b05      	ldr	r3, [pc, #20]	; (16ec <igniteDrogue+0x58>)
    16d6:	4798      	blx	r3
    }
}
    16d8:	bd10      	pop	{r4, pc}
    16da:	46c0      	nop			; (mov r8, r8)
    16dc:	20000508 	.word	0x20000508
    16e0:	000015a9 	.word	0x000015a9
    16e4:	000015cd 	.word	0x000015cd
    16e8:	000015f1 	.word	0x000015f1
    16ec:	00001615 	.word	0x00001615

000016f0 <computeKalmanGains>:
    dt = 0.005;

    /*
     Fill in state transition matrix and its transpose
    */
    phi[0][1]    = dt;
    16f0:	4bdc      	ldr	r3, [pc, #880]	; (1a64 <computeKalmanGains+0x374>)
    16f2:	48dd      	ldr	r0, [pc, #884]	; (1a68 <computeKalmanGains+0x378>)
    16f4:	49dd      	ldr	r1, [pc, #884]	; (1a6c <computeKalmanGains+0x37c>)

double altitude_variance = ALTITUDESIGMA*ALTITUDESIGMA;
double acceleration_variance = ACCELERATIONSIGMA*ACCELERATIONSIGMA;
double model_variance  = MODELSIGMA*MODELSIGMA;

void computeKalmanGains() {
    16f6:	b5f0      	push	{r4, r5, r6, r7, lr}
    dt = 0.005;

    /*
     Fill in state transition matrix and its transpose
    */
    phi[0][1]    = dt;
    16f8:	6098      	str	r0, [r3, #8]
    16fa:	60d9      	str	r1, [r3, #12]
    phi[1][2]    = dt;
    16fc:	6298      	str	r0, [r3, #40]	; 0x28
    16fe:	62d9      	str	r1, [r3, #44]	; 0x2c
    phi[0][2]    = dt*dt/2.0;
    1700:	48db      	ldr	r0, [pc, #876]	; (1a70 <computeKalmanGains+0x380>)
    1702:	49dc      	ldr	r1, [pc, #880]	; (1a74 <computeKalmanGains+0x384>)
    1704:	2200      	movs	r2, #0
    1706:	6118      	str	r0, [r3, #16]
    1708:	6159      	str	r1, [r3, #20]
    phit[2][0]    = dt*dt/2.0;

    for( i = 0; i <= 2; i++)
        for( j = 0; j <=1; j++) {
            lastkgain[i][j] = .001;
            kgain[i][j] = 1.0;
    170a:	2000      	movs	r0, #0
    170c:	49da      	ldr	r1, [pc, #872]	; (1a78 <computeKalmanGains+0x388>)
    phit[2][1]    = dt;
    phit[2][0]    = dt*dt/2.0;

    for( i = 0; i <= 2; i++)
        for( j = 0; j <=1; j++) {
            lastkgain[i][j] = .001;
    170e:	4cdb      	ldr	r4, [pc, #876]	; (1a7c <computeKalmanGains+0x38c>)
    1710:	468c      	mov	ip, r1
    1712:	4ddb      	ldr	r5, [pc, #876]	; (1a80 <computeKalmanGains+0x390>)
            kgain[i][j] = 1.0;
    1714:	49db      	ldr	r1, [pc, #876]	; (1a84 <computeKalmanGains+0x394>)

double altitude_variance = ALTITUDESIGMA*ALTITUDESIGMA;
double acceleration_variance = ACCELERATIONSIGMA*ACCELERATIONSIGMA;
double model_variance  = MODELSIGMA*MODELSIGMA;

void computeKalmanGains() {
    1716:	b0cd      	sub	sp, #308	; 0x134
    1718:	ae40      	add	r6, sp, #256	; 0x100
    171a:	1997      	adds	r7, r2, r6
    171c:	4666      	mov	r6, ip
    171e:	1996      	adds	r6, r2, r6
    1720:	3210      	adds	r2, #16
    phit[2][1]    = dt;
    phit[2][0]    = dt*dt/2.0;

    for( i = 0; i <= 2; i++)
        for( j = 0; j <=1; j++) {
            lastkgain[i][j] = .001;
    1722:	603c      	str	r4, [r7, #0]
    1724:	607d      	str	r5, [r7, #4]
            kgain[i][j] = 1.0;
    1726:	6030      	str	r0, [r6, #0]
    1728:	6071      	str	r1, [r6, #4]
    phit[2][1]    = dt;
    phit[2][0]    = dt*dt/2.0;

    for( i = 0; i <= 2; i++)
        for( j = 0; j <=1; j++) {
            lastkgain[i][j] = .001;
    172a:	60bc      	str	r4, [r7, #8]
    172c:	60fd      	str	r5, [r7, #12]
            kgain[i][j] = 1.0;
    172e:	60b0      	str	r0, [r6, #8]
    1730:	60f1      	str	r1, [r6, #12]
    phi[0][2]    = dt*dt/2.0;
    phit[1][0]    = dt;
    phit[2][1]    = dt;
    phit[2][0]    = dt*dt/2.0;

    for( i = 0; i <= 2; i++)
    1732:	2a30      	cmp	r2, #48	; 0x30
    1734:	d1f0      	bne.n	1718 <computeKalmanGains+0x28>

    /* Compute the Kalman gain matrix. */
    while(1) {
        /* Propagate state covariance */

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
    1736:	6819      	ldr	r1, [r3, #0]
    1738:	685a      	ldr	r2, [r3, #4]
    173a:	911a      	str	r1, [sp, #104]	; 0x68
    173c:	921b      	str	r2, [sp, #108]	; 0x6c
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
    173e:	6999      	ldr	r1, [r3, #24]
    1740:	69da      	ldr	r2, [r3, #28]
    1742:	911c      	str	r1, [sp, #112]	; 0x70
    1744:	921d      	str	r2, [sp, #116]	; 0x74
    1746:	6a19      	ldr	r1, [r3, #32]
    1748:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    174a:	911e      	str	r1, [sp, #120]	; 0x78
    174c:	921f      	str	r2, [sp, #124]	; 0x7c
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
    174e:	6b19      	ldr	r1, [r3, #48]	; 0x30
    1750:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    1752:	9120      	str	r1, [sp, #128]	; 0x80
    1754:	9221      	str	r2, [sp, #132]	; 0x84
    1756:	6b99      	ldr	r1, [r3, #56]	; 0x38
    1758:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    175a:	9122      	str	r1, [sp, #136]	; 0x88
    175c:	9223      	str	r2, [sp, #140]	; 0x8c
    175e:	6c19      	ldr	r1, [r3, #64]	; 0x40
    1760:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    1762:	9124      	str	r1, [sp, #144]	; 0x90
    1764:	9225      	str	r2, [sp, #148]	; 0x94
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
        pestp[2][1] = term[2][0] * phit[0][1] + term[2][1] * phit[1][1] + term[2][2] * phit[2][1];
        pestp[2][2] = term[2][0] * phit[0][2] + term[2][1] * phit[1][2] + term[2][2] * phit[2][2];

        pestp[2][2] = pestp[2][2] + model_variance;
    1766:	6c99      	ldr	r1, [r3, #72]	; 0x48
    1768:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    176a:	913a      	str	r1, [sp, #232]	; 0xe8
    176c:	923b      	str	r2, [sp, #236]	; 0xec
        /*
          Calculate Kalman Gain
        */
        det = (pestp[0][0]+altitude_variance)*(pestp[2][2] + acceleration_variance) - pestp[2][0] * pestp[0][2];
    176e:	6d19      	ldr	r1, [r3, #80]	; 0x50
    1770:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    1772:	6ddc      	ldr	r4, [r3, #92]	; 0x5c
    1774:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    1776:	933e      	str	r3, [sp, #248]	; 0xf8
    1778:	943f      	str	r4, [sp, #252]	; 0xfc
    177a:	2300      	movs	r3, #0
    177c:	4cc2      	ldr	r4, [pc, #776]	; (1a88 <computeKalmanGains+0x398>)
    177e:	913c      	str	r1, [sp, #240]	; 0xf0
    1780:	923d      	str	r2, [sp, #244]	; 0xf4
    1782:	9302      	str	r3, [sp, #8]
    1784:	9403      	str	r4, [sp, #12]
    1786:	2300      	movs	r3, #0
    1788:	2400      	movs	r4, #0
    178a:	9310      	str	r3, [sp, #64]	; 0x40
    178c:	9411      	str	r4, [sp, #68]	; 0x44
    178e:	9300      	str	r3, [sp, #0]
    1790:	9401      	str	r4, [sp, #4]
    1792:	9304      	str	r3, [sp, #16]
    1794:	9405      	str	r4, [sp, #20]
    1796:	2300      	movs	r3, #0
    1798:	4cbb      	ldr	r4, [pc, #748]	; (1a88 <computeKalmanGains+0x398>)
    179a:	930e      	str	r3, [sp, #56]	; 0x38
    179c:	940f      	str	r4, [sp, #60]	; 0x3c
    179e:	2300      	movs	r3, #0
    17a0:	2400      	movs	r4, #0
    17a2:	9308      	str	r3, [sp, #32]
    17a4:	9409      	str	r4, [sp, #36]	; 0x24
    17a6:	930c      	str	r3, [sp, #48]	; 0x30
    17a8:	940d      	str	r4, [sp, #52]	; 0x34
    17aa:	930a      	str	r3, [sp, #40]	; 0x28
    17ac:	940b      	str	r4, [sp, #44]	; 0x2c
    17ae:	2480      	movs	r4, #128	; 0x80
    17b0:	2300      	movs	r3, #0
    17b2:	05e4      	lsls	r4, r4, #23
    17b4:	9306      	str	r3, [sp, #24]
    17b6:	9407      	str	r4, [sp, #28]
    17b8:	2300      	movs	r3, #0
    17ba:	9338      	str	r3, [sp, #224]	; 0xe0

    /* Compute the Kalman gain matrix. */
    while(1) {
        /* Propagate state covariance */

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
    17bc:	4db3      	ldr	r5, [pc, #716]	; (1a8c <computeKalmanGains+0x39c>)
    17be:	9a06      	ldr	r2, [sp, #24]
    17c0:	9b07      	ldr	r3, [sp, #28]
    17c2:	981a      	ldr	r0, [sp, #104]	; 0x68
    17c4:	991b      	ldr	r1, [sp, #108]	; 0x6c
    17c6:	47a8      	blx	r5
    17c8:	4aa7      	ldr	r2, [pc, #668]	; (1a68 <computeKalmanGains+0x378>)
    17ca:	0006      	movs	r6, r0
    17cc:	000f      	movs	r7, r1
    17ce:	9808      	ldr	r0, [sp, #32]
    17d0:	9909      	ldr	r1, [sp, #36]	; 0x24
    17d2:	4ba6      	ldr	r3, [pc, #664]	; (1a6c <computeKalmanGains+0x37c>)
    17d4:	47a8      	blx	r5
    17d6:	4cae      	ldr	r4, [pc, #696]	; (1a90 <computeKalmanGains+0x3a0>)
    17d8:	0002      	movs	r2, r0
    17da:	000b      	movs	r3, r1
    17dc:	0030      	movs	r0, r6
    17de:	0039      	movs	r1, r7
    17e0:	47a0      	blx	r4
    17e2:	4aa3      	ldr	r2, [pc, #652]	; (1a70 <computeKalmanGains+0x380>)
    17e4:	0006      	movs	r6, r0
    17e6:	000f      	movs	r7, r1
    17e8:	9800      	ldr	r0, [sp, #0]
    17ea:	9901      	ldr	r1, [sp, #4]
    17ec:	4ba1      	ldr	r3, [pc, #644]	; (1a74 <computeKalmanGains+0x384>)
    17ee:	47a8      	blx	r5
    17f0:	0002      	movs	r2, r0
    17f2:	000b      	movs	r3, r1
    17f4:	0030      	movs	r0, r6
    17f6:	0039      	movs	r1, r7
    17f8:	47a0      	blx	r4
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
    17fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    17fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c

    /* Compute the Kalman gain matrix. */
    while(1) {
        /* Propagate state covariance */

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
    17fe:	9016      	str	r0, [sp, #88]	; 0x58
    1800:	9117      	str	r1, [sp, #92]	; 0x5c
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
    1802:	981a      	ldr	r0, [sp, #104]	; 0x68
    1804:	991b      	ldr	r1, [sp, #108]	; 0x6c
    1806:	47a8      	blx	r5
    1808:	4a97      	ldr	r2, [pc, #604]	; (1a68 <computeKalmanGains+0x378>)
    180a:	0006      	movs	r6, r0
    180c:	000f      	movs	r7, r1
    180e:	980e      	ldr	r0, [sp, #56]	; 0x38
    1810:	990f      	ldr	r1, [sp, #60]	; 0x3c
    1812:	4b96      	ldr	r3, [pc, #600]	; (1a6c <computeKalmanGains+0x37c>)
    1814:	47a8      	blx	r5
    1816:	0002      	movs	r2, r0
    1818:	000b      	movs	r3, r1
    181a:	0030      	movs	r0, r6
    181c:	0039      	movs	r1, r7
    181e:	47a0      	blx	r4
    1820:	4a93      	ldr	r2, [pc, #588]	; (1a70 <computeKalmanGains+0x380>)
    1822:	0006      	movs	r6, r0
    1824:	000f      	movs	r7, r1
    1826:	9810      	ldr	r0, [sp, #64]	; 0x40
    1828:	9911      	ldr	r1, [sp, #68]	; 0x44
    182a:	4b92      	ldr	r3, [pc, #584]	; (1a74 <computeKalmanGains+0x384>)
    182c:	47a8      	blx	r5
    182e:	0002      	movs	r2, r0
    1830:	000b      	movs	r3, r1
    1832:	0030      	movs	r0, r6
    1834:	0039      	movs	r1, r7
    1836:	47a0      	blx	r4
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
    1838:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    183a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    /* Compute the Kalman gain matrix. */
    while(1) {
        /* Propagate state covariance */

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
    183c:	9012      	str	r0, [sp, #72]	; 0x48
    183e:	9113      	str	r1, [sp, #76]	; 0x4c
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
    1840:	981a      	ldr	r0, [sp, #104]	; 0x68
    1842:	991b      	ldr	r1, [sp, #108]	; 0x6c
    1844:	47a8      	blx	r5
    1846:	4a88      	ldr	r2, [pc, #544]	; (1a68 <computeKalmanGains+0x378>)
    1848:	0006      	movs	r6, r0
    184a:	000f      	movs	r7, r1
    184c:	9804      	ldr	r0, [sp, #16]
    184e:	9905      	ldr	r1, [sp, #20]
    1850:	4b86      	ldr	r3, [pc, #536]	; (1a6c <computeKalmanGains+0x37c>)
    1852:	47a8      	blx	r5
    1854:	0002      	movs	r2, r0
    1856:	000b      	movs	r3, r1
    1858:	0030      	movs	r0, r6
    185a:	0039      	movs	r1, r7
    185c:	47a0      	blx	r4
    185e:	4a84      	ldr	r2, [pc, #528]	; (1a70 <computeKalmanGains+0x380>)
    1860:	0006      	movs	r6, r0
    1862:	000f      	movs	r7, r1
    1864:	9802      	ldr	r0, [sp, #8]
    1866:	9903      	ldr	r1, [sp, #12]
    1868:	4b82      	ldr	r3, [pc, #520]	; (1a74 <computeKalmanGains+0x384>)
    186a:	47a8      	blx	r5
    186c:	0002      	movs	r2, r0
    186e:	000b      	movs	r3, r1
    1870:	0030      	movs	r0, r6
    1872:	0039      	movs	r1, r7
    1874:	47a0      	blx	r4
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
    1876:	9a06      	ldr	r2, [sp, #24]
    1878:	9b07      	ldr	r3, [sp, #28]
    while(1) {
        /* Propagate state covariance */

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
    187a:	9014      	str	r0, [sp, #80]	; 0x50
    187c:	9115      	str	r1, [sp, #84]	; 0x54
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
    187e:	981c      	ldr	r0, [sp, #112]	; 0x70
    1880:	991d      	ldr	r1, [sp, #116]	; 0x74
    1882:	47a8      	blx	r5
    1884:	9a08      	ldr	r2, [sp, #32]
    1886:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1888:	0006      	movs	r6, r0
    188a:	000f      	movs	r7, r1
    188c:	981e      	ldr	r0, [sp, #120]	; 0x78
    188e:	991f      	ldr	r1, [sp, #124]	; 0x7c
    1890:	47a8      	blx	r5
    1892:	0002      	movs	r2, r0
    1894:	000b      	movs	r3, r1
    1896:	0030      	movs	r0, r6
    1898:	0039      	movs	r1, r7
    189a:	47a0      	blx	r4
    189c:	4a72      	ldr	r2, [pc, #456]	; (1a68 <computeKalmanGains+0x378>)
    189e:	0006      	movs	r6, r0
    18a0:	000f      	movs	r7, r1
    18a2:	9800      	ldr	r0, [sp, #0]
    18a4:	9901      	ldr	r1, [sp, #4]
    18a6:	4b71      	ldr	r3, [pc, #452]	; (1a6c <computeKalmanGains+0x37c>)
    18a8:	47a8      	blx	r5
    18aa:	0002      	movs	r2, r0
    18ac:	000b      	movs	r3, r1
    18ae:	0030      	movs	r0, r6
    18b0:	0039      	movs	r1, r7
    18b2:	47a0      	blx	r4
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
    18b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    18b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
        /* Propagate state covariance */

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
    18b8:	9018      	str	r0, [sp, #96]	; 0x60
    18ba:	9119      	str	r1, [sp, #100]	; 0x64
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
    18bc:	981c      	ldr	r0, [sp, #112]	; 0x70
    18be:	991d      	ldr	r1, [sp, #116]	; 0x74
    18c0:	47a8      	blx	r5
    18c2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    18c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    18c6:	0006      	movs	r6, r0
    18c8:	000f      	movs	r7, r1
    18ca:	981e      	ldr	r0, [sp, #120]	; 0x78
    18cc:	991f      	ldr	r1, [sp, #124]	; 0x7c
    18ce:	47a8      	blx	r5
    18d0:	0002      	movs	r2, r0
    18d2:	000b      	movs	r3, r1
    18d4:	0030      	movs	r0, r6
    18d6:	0039      	movs	r1, r7
    18d8:	47a0      	blx	r4
    18da:	4a63      	ldr	r2, [pc, #396]	; (1a68 <computeKalmanGains+0x378>)
    18dc:	0006      	movs	r6, r0
    18de:	000f      	movs	r7, r1
    18e0:	9810      	ldr	r0, [sp, #64]	; 0x40
    18e2:	9911      	ldr	r1, [sp, #68]	; 0x44
    18e4:	4b61      	ldr	r3, [pc, #388]	; (1a6c <computeKalmanGains+0x37c>)
    18e6:	47a8      	blx	r5
    18e8:	0002      	movs	r2, r0
    18ea:	000b      	movs	r3, r1
    18ec:	0030      	movs	r0, r6
    18ee:	0039      	movs	r1, r7
    18f0:	47a0      	blx	r4
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
    18f2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    18f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
    18f6:	9026      	str	r0, [sp, #152]	; 0x98
    18f8:	9127      	str	r1, [sp, #156]	; 0x9c
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
    18fa:	981c      	ldr	r0, [sp, #112]	; 0x70
    18fc:	991d      	ldr	r1, [sp, #116]	; 0x74
    18fe:	47a8      	blx	r5
    1900:	9a04      	ldr	r2, [sp, #16]
    1902:	9b05      	ldr	r3, [sp, #20]
    1904:	0006      	movs	r6, r0
    1906:	000f      	movs	r7, r1
    1908:	981e      	ldr	r0, [sp, #120]	; 0x78
    190a:	991f      	ldr	r1, [sp, #124]	; 0x7c
    190c:	47a8      	blx	r5
    190e:	0002      	movs	r2, r0
    1910:	000b      	movs	r3, r1
    1912:	0030      	movs	r0, r6
    1914:	0039      	movs	r1, r7
    1916:	47a0      	blx	r4
    1918:	4a53      	ldr	r2, [pc, #332]	; (1a68 <computeKalmanGains+0x378>)
    191a:	0006      	movs	r6, r0
    191c:	000f      	movs	r7, r1
    191e:	9802      	ldr	r0, [sp, #8]
    1920:	9903      	ldr	r1, [sp, #12]
    1922:	4b52      	ldr	r3, [pc, #328]	; (1a6c <computeKalmanGains+0x37c>)
    1924:	47a8      	blx	r5
    1926:	0002      	movs	r2, r0
    1928:	000b      	movs	r3, r1
    192a:	0030      	movs	r0, r6
    192c:	0039      	movs	r1, r7
    192e:	47a0      	blx	r4
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
    1930:	9a06      	ldr	r2, [sp, #24]
    1932:	9b07      	ldr	r3, [sp, #28]
        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
    1934:	9028      	str	r0, [sp, #160]	; 0xa0
    1936:	9129      	str	r1, [sp, #164]	; 0xa4
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
    1938:	9820      	ldr	r0, [sp, #128]	; 0x80
    193a:	9921      	ldr	r1, [sp, #132]	; 0x84
    193c:	47a8      	blx	r5
    193e:	9a08      	ldr	r2, [sp, #32]
    1940:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1942:	0006      	movs	r6, r0
    1944:	000f      	movs	r7, r1
    1946:	9822      	ldr	r0, [sp, #136]	; 0x88
    1948:	9923      	ldr	r1, [sp, #140]	; 0x8c
    194a:	47a8      	blx	r5
    194c:	0002      	movs	r2, r0
    194e:	000b      	movs	r3, r1
    1950:	0030      	movs	r0, r6
    1952:	0039      	movs	r1, r7
    1954:	47a0      	blx	r4
    1956:	9a00      	ldr	r2, [sp, #0]
    1958:	9b01      	ldr	r3, [sp, #4]
    195a:	0006      	movs	r6, r0
    195c:	000f      	movs	r7, r1
    195e:	9824      	ldr	r0, [sp, #144]	; 0x90
    1960:	9925      	ldr	r1, [sp, #148]	; 0x94
    1962:	47a8      	blx	r5
    1964:	0002      	movs	r2, r0
    1966:	000b      	movs	r3, r1
    1968:	0030      	movs	r0, r6
    196a:	0039      	movs	r1, r7
    196c:	47a0      	blx	r4
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
    196e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    1970:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
    1972:	902e      	str	r0, [sp, #184]	; 0xb8
    1974:	912f      	str	r1, [sp, #188]	; 0xbc
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
    1976:	9820      	ldr	r0, [sp, #128]	; 0x80
    1978:	9921      	ldr	r1, [sp, #132]	; 0x84
    197a:	47a8      	blx	r5
    197c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    197e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1980:	0006      	movs	r6, r0
    1982:	000f      	movs	r7, r1
    1984:	9822      	ldr	r0, [sp, #136]	; 0x88
    1986:	9923      	ldr	r1, [sp, #140]	; 0x8c
    1988:	47a8      	blx	r5
    198a:	0002      	movs	r2, r0
    198c:	000b      	movs	r3, r1
    198e:	0030      	movs	r0, r6
    1990:	0039      	movs	r1, r7
    1992:	47a0      	blx	r4
    1994:	9a10      	ldr	r2, [sp, #64]	; 0x40
    1996:	9b11      	ldr	r3, [sp, #68]	; 0x44
    1998:	0006      	movs	r6, r0
    199a:	000f      	movs	r7, r1
    199c:	9824      	ldr	r0, [sp, #144]	; 0x90
    199e:	9925      	ldr	r1, [sp, #148]	; 0x94
    19a0:	47a8      	blx	r5
    19a2:	0002      	movs	r2, r0
    19a4:	000b      	movs	r3, r1
    19a6:	0030      	movs	r0, r6
    19a8:	0039      	movs	r1, r7
    19aa:	47a0      	blx	r4
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];
    19ac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    19ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
    19b0:	9006      	str	r0, [sp, #24]
    19b2:	9107      	str	r1, [sp, #28]
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];
    19b4:	9820      	ldr	r0, [sp, #128]	; 0x80
    19b6:	9921      	ldr	r1, [sp, #132]	; 0x84
    19b8:	47a8      	blx	r5
    19ba:	9a04      	ldr	r2, [sp, #16]
    19bc:	9b05      	ldr	r3, [sp, #20]
    19be:	0006      	movs	r6, r0
    19c0:	000f      	movs	r7, r1
    19c2:	9822      	ldr	r0, [sp, #136]	; 0x88
    19c4:	9923      	ldr	r1, [sp, #140]	; 0x8c
    19c6:	47a8      	blx	r5
    19c8:	0002      	movs	r2, r0
    19ca:	000b      	movs	r3, r1
    19cc:	0030      	movs	r0, r6
    19ce:	0039      	movs	r1, r7
    19d0:	47a0      	blx	r4
    19d2:	9a02      	ldr	r2, [sp, #8]
    19d4:	9b03      	ldr	r3, [sp, #12]
    19d6:	0006      	movs	r6, r0
    19d8:	000f      	movs	r7, r1
    19da:	9824      	ldr	r0, [sp, #144]	; 0x90
    19dc:	9925      	ldr	r1, [sp, #148]	; 0x94
    19de:	47a8      	blx	r5
    19e0:	0002      	movs	r2, r0
    19e2:	000b      	movs	r3, r1
    19e4:	0030      	movs	r0, r6
    19e6:	0039      	movs	r1, r7
    19e8:	47a0      	blx	r4

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
    19ea:	4a1f      	ldr	r2, [pc, #124]	; (1a68 <computeKalmanGains+0x378>)
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];
    19ec:	9002      	str	r0, [sp, #8]
    19ee:	9103      	str	r1, [sp, #12]

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
    19f0:	9812      	ldr	r0, [sp, #72]	; 0x48
    19f2:	9913      	ldr	r1, [sp, #76]	; 0x4c
    19f4:	4b1d      	ldr	r3, [pc, #116]	; (1a6c <computeKalmanGains+0x37c>)
    19f6:	47a8      	blx	r5
    19f8:	9a16      	ldr	r2, [sp, #88]	; 0x58
    19fa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    19fc:	47a0      	blx	r4
    19fe:	4a1c      	ldr	r2, [pc, #112]	; (1a70 <computeKalmanGains+0x380>)
    1a00:	0006      	movs	r6, r0
    1a02:	000f      	movs	r7, r1
    1a04:	9814      	ldr	r0, [sp, #80]	; 0x50
    1a06:	9915      	ldr	r1, [sp, #84]	; 0x54
    1a08:	4b1a      	ldr	r3, [pc, #104]	; (1a74 <computeKalmanGains+0x384>)
    1a0a:	47a8      	blx	r5
    1a0c:	0002      	movs	r2, r0
    1a0e:	000b      	movs	r3, r1
    1a10:	0030      	movs	r0, r6
    1a12:	0039      	movs	r1, r7
    1a14:	47a0      	blx	r4
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
    1a16:	2200      	movs	r2, #0
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
    1a18:	9008      	str	r0, [sp, #32]
    1a1a:	9109      	str	r1, [sp, #36]	; 0x24
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
    1a1c:	9816      	ldr	r0, [sp, #88]	; 0x58
    1a1e:	9917      	ldr	r1, [sp, #92]	; 0x5c
    1a20:	2300      	movs	r3, #0
    1a22:	47a8      	blx	r5
    1a24:	0006      	movs	r6, r0
    1a26:	000f      	movs	r7, r1
    1a28:	0002      	movs	r2, r0
    1a2a:	000b      	movs	r3, r1
    1a2c:	9812      	ldr	r0, [sp, #72]	; 0x48
    1a2e:	9913      	ldr	r1, [sp, #76]	; 0x4c
    1a30:	47a0      	blx	r4
    1a32:	4a0d      	ldr	r2, [pc, #52]	; (1a68 <computeKalmanGains+0x378>)
    1a34:	9000      	str	r0, [sp, #0]
    1a36:	9101      	str	r1, [sp, #4]
    1a38:	9814      	ldr	r0, [sp, #80]	; 0x50
    1a3a:	9915      	ldr	r1, [sp, #84]	; 0x54
    1a3c:	4b0b      	ldr	r3, [pc, #44]	; (1a6c <computeKalmanGains+0x37c>)
    1a3e:	47a8      	blx	r5
    1a40:	0002      	movs	r2, r0
    1a42:	000b      	movs	r3, r1
    1a44:	9800      	ldr	r0, [sp, #0]
    1a46:	9901      	ldr	r1, [sp, #4]
    1a48:	47a0      	blx	r4
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
    1a4a:	2200      	movs	r2, #0
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
    1a4c:	9030      	str	r0, [sp, #192]	; 0xc0
    1a4e:	9131      	str	r1, [sp, #196]	; 0xc4
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
    1a50:	9812      	ldr	r0, [sp, #72]	; 0x48
    1a52:	9913      	ldr	r1, [sp, #76]	; 0x4c
    1a54:	2300      	movs	r3, #0
    1a56:	47a8      	blx	r5
    1a58:	0032      	movs	r2, r6
    1a5a:	003b      	movs	r3, r7
    1a5c:	47a0      	blx	r4
    1a5e:	9a14      	ldr	r2, [sp, #80]	; 0x50
    1a60:	9b15      	ldr	r3, [sp, #84]	; 0x54
    1a62:	e017      	b.n	1a94 <computeKalmanGains+0x3a4>
    1a64:	20000010 	.word	0x20000010
    1a68:	47ae147b 	.word	0x47ae147b
    1a6c:	3f747ae1 	.word	0x3f747ae1
    1a70:	eb1c432d 	.word	0xeb1c432d
    1a74:	3eea36e2 	.word	0x3eea36e2
    1a78:	20000648 	.word	0x20000648
    1a7c:	d2f1a9fc 	.word	0xd2f1a9fc
    1a80:	3f50624d 	.word	0x3f50624d
    1a84:	3ff00000 	.word	0x3ff00000
    1a88:	40220000 	.word	0x40220000
    1a8c:	0000553d 	.word	0x0000553d
    1a90:	0000469d 	.word	0x0000469d
    1a94:	47a0      	blx	r4
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
    1a96:	4ad9      	ldr	r2, [pc, #868]	; (1dfc <computeKalmanGains+0x70c>)
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
    1a98:	9112      	str	r1, [sp, #72]	; 0x48
    1a9a:	9004      	str	r0, [sp, #16]
    1a9c:	9116      	str	r1, [sp, #88]	; 0x58
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
    1a9e:	4bd8      	ldr	r3, [pc, #864]	; (1e00 <computeKalmanGains+0x710>)
    1aa0:	9826      	ldr	r0, [sp, #152]	; 0x98
    1aa2:	9927      	ldr	r1, [sp, #156]	; 0x9c
    1aa4:	47a8      	blx	r5
    1aa6:	9a18      	ldr	r2, [sp, #96]	; 0x60
    1aa8:	9b19      	ldr	r3, [sp, #100]	; 0x64
    1aaa:	47a0      	blx	r4
    1aac:	4ad5      	ldr	r2, [pc, #852]	; (1e04 <computeKalmanGains+0x714>)
    1aae:	0006      	movs	r6, r0
    1ab0:	000f      	movs	r7, r1
    1ab2:	9828      	ldr	r0, [sp, #160]	; 0xa0
    1ab4:	9929      	ldr	r1, [sp, #164]	; 0xa4
    1ab6:	4bd4      	ldr	r3, [pc, #848]	; (1e08 <computeKalmanGains+0x718>)
    1ab8:	47a8      	blx	r5
    1aba:	0002      	movs	r2, r0
    1abc:	000b      	movs	r3, r1
    1abe:	0030      	movs	r0, r6
    1ac0:	0039      	movs	r1, r7
    1ac2:	47a0      	blx	r4
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
    1ac4:	2200      	movs	r2, #0
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
    1ac6:	902a      	str	r0, [sp, #168]	; 0xa8
    1ac8:	912b      	str	r1, [sp, #172]	; 0xac
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
    1aca:	9818      	ldr	r0, [sp, #96]	; 0x60
    1acc:	9919      	ldr	r1, [sp, #100]	; 0x64
    1ace:	2300      	movs	r3, #0
    1ad0:	47a8      	blx	r5
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
    1ad2:	2200      	movs	r2, #0

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
    1ad4:	9032      	str	r0, [sp, #200]	; 0xc8
    1ad6:	9133      	str	r1, [sp, #204]	; 0xcc
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
    1ad8:	9826      	ldr	r0, [sp, #152]	; 0x98
    1ada:	9927      	ldr	r1, [sp, #156]	; 0x9c
    1adc:	2300      	movs	r3, #0
    1ade:	47a8      	blx	r5
    1ae0:	9a32      	ldr	r2, [sp, #200]	; 0xc8
    1ae2:	9b33      	ldr	r3, [sp, #204]	; 0xcc
    1ae4:	47a0      	blx	r4
    1ae6:	9a28      	ldr	r2, [sp, #160]	; 0xa0
    1ae8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
    1aea:	47a0      	blx	r4
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
    1aec:	4ac3      	ldr	r2, [pc, #780]	; (1dfc <computeKalmanGains+0x70c>)
        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
    1aee:	902c      	str	r0, [sp, #176]	; 0xb0
    1af0:	912d      	str	r1, [sp, #180]	; 0xb4
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
    1af2:	9806      	ldr	r0, [sp, #24]
    1af4:	9907      	ldr	r1, [sp, #28]
    1af6:	4bc2      	ldr	r3, [pc, #776]	; (1e00 <computeKalmanGains+0x710>)
    1af8:	47a8      	blx	r5
    1afa:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
    1afc:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
    1afe:	47a0      	blx	r4
    1b00:	4ac0      	ldr	r2, [pc, #768]	; (1e04 <computeKalmanGains+0x714>)
    1b02:	0006      	movs	r6, r0
    1b04:	000f      	movs	r7, r1
    1b06:	9802      	ldr	r0, [sp, #8]
    1b08:	9903      	ldr	r1, [sp, #12]
    1b0a:	4bbf      	ldr	r3, [pc, #764]	; (1e08 <computeKalmanGains+0x718>)
    1b0c:	47a8      	blx	r5
    1b0e:	0002      	movs	r2, r0
    1b10:	000b      	movs	r3, r1
    1b12:	0030      	movs	r0, r6
    1b14:	0039      	movs	r1, r7
    1b16:	47a0      	blx	r4
        pestp[2][1] = term[2][0] * phit[0][1] + term[2][1] * phit[1][1] + term[2][2] * phit[2][1];
    1b18:	2200      	movs	r2, #0
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
    1b1a:	9000      	str	r0, [sp, #0]
    1b1c:	9101      	str	r1, [sp, #4]
        pestp[2][1] = term[2][0] * phit[0][1] + term[2][1] * phit[1][1] + term[2][2] * phit[2][1];
    1b1e:	982e      	ldr	r0, [sp, #184]	; 0xb8
    1b20:	992f      	ldr	r1, [sp, #188]	; 0xbc
    1b22:	2300      	movs	r3, #0
    1b24:	47a8      	blx	r5
    1b26:	0006      	movs	r6, r0
    1b28:	000f      	movs	r7, r1
    1b2a:	0002      	movs	r2, r0
    1b2c:	000b      	movs	r3, r1
    1b2e:	9806      	ldr	r0, [sp, #24]
    1b30:	9907      	ldr	r1, [sp, #28]
    1b32:	47a0      	blx	r4
    1b34:	4ab1      	ldr	r2, [pc, #708]	; (1dfc <computeKalmanGains+0x70c>)
    1b36:	900a      	str	r0, [sp, #40]	; 0x28
    1b38:	910b      	str	r1, [sp, #44]	; 0x2c
    1b3a:	9802      	ldr	r0, [sp, #8]
    1b3c:	9903      	ldr	r1, [sp, #12]
    1b3e:	4bb0      	ldr	r3, [pc, #704]	; (1e00 <computeKalmanGains+0x710>)
    1b40:	47a8      	blx	r5
    1b42:	0002      	movs	r2, r0
    1b44:	000b      	movs	r3, r1
    1b46:	980a      	ldr	r0, [sp, #40]	; 0x28
    1b48:	990b      	ldr	r1, [sp, #44]	; 0x2c
    1b4a:	47a0      	blx	r4
        pestp[2][2] = term[2][0] * phit[0][2] + term[2][1] * phit[1][2] + term[2][2] * phit[2][2];

        pestp[2][2] = pestp[2][2] + model_variance;
    1b4c:	2200      	movs	r2, #0
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
        pestp[2][1] = term[2][0] * phit[0][1] + term[2][1] * phit[1][1] + term[2][2] * phit[2][1];
    1b4e:	9010      	str	r0, [sp, #64]	; 0x40
    1b50:	9111      	str	r1, [sp, #68]	; 0x44
        pestp[2][2] = term[2][0] * phit[0][2] + term[2][1] * phit[1][2] + term[2][2] * phit[2][2];

        pestp[2][2] = pestp[2][2] + model_variance;
    1b52:	9806      	ldr	r0, [sp, #24]
    1b54:	9907      	ldr	r1, [sp, #28]
    1b56:	2300      	movs	r3, #0
    1b58:	47a8      	blx	r5
    1b5a:	0032      	movs	r2, r6
    1b5c:	003b      	movs	r3, r7
    1b5e:	47a0      	blx	r4
    1b60:	9a02      	ldr	r2, [sp, #8]
    1b62:	9b03      	ldr	r3, [sp, #12]
    1b64:	47a0      	blx	r4
    1b66:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
    1b68:	9b3b      	ldr	r3, [sp, #236]	; 0xec
    1b6a:	47a0      	blx	r4
        /*
          Calculate Kalman Gain
        */
        det = (pestp[0][0]+altitude_variance)*(pestp[2][2] + acceleration_variance) - pestp[2][0] * pestp[0][2];
    1b6c:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
    1b6e:	9b3d      	ldr	r3, [sp, #244]	; 0xf4
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
        pestp[2][1] = term[2][0] * phit[0][1] + term[2][1] * phit[1][1] + term[2][2] * phit[2][1];
        pestp[2][2] = term[2][0] * phit[0][2] + term[2][1] * phit[1][2] + term[2][2] * phit[2][2];

        pestp[2][2] = pestp[2][2] + model_variance;
    1b70:	9002      	str	r0, [sp, #8]
    1b72:	9103      	str	r1, [sp, #12]
        /*
          Calculate Kalman Gain
        */
        det = (pestp[0][0]+altitude_variance)*(pestp[2][2] + acceleration_variance) - pestp[2][0] * pestp[0][2];
    1b74:	9808      	ldr	r0, [sp, #32]
    1b76:	9909      	ldr	r1, [sp, #36]	; 0x24
    1b78:	47a0      	blx	r4
    1b7a:	9a3e      	ldr	r2, [sp, #248]	; 0xf8
    1b7c:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
    1b7e:	900a      	str	r0, [sp, #40]	; 0x28
    1b80:	910b      	str	r1, [sp, #44]	; 0x2c
    1b82:	9802      	ldr	r0, [sp, #8]
    1b84:	9903      	ldr	r1, [sp, #12]
    1b86:	47a0      	blx	r4
    1b88:	9a00      	ldr	r2, [sp, #0]
    1b8a:	9b01      	ldr	r3, [sp, #4]
    1b8c:	900c      	str	r0, [sp, #48]	; 0x30
    1b8e:	910d      	str	r1, [sp, #52]	; 0x34
    1b90:	9804      	ldr	r0, [sp, #16]
    1b92:	9916      	ldr	r1, [sp, #88]	; 0x58
    1b94:	47a8      	blx	r5
    1b96:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1b98:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1b9a:	900e      	str	r0, [sp, #56]	; 0x38
    1b9c:	910f      	str	r1, [sp, #60]	; 0x3c
    1b9e:	980a      	ldr	r0, [sp, #40]	; 0x28
    1ba0:	990b      	ldr	r1, [sp, #44]	; 0x2c
    1ba2:	47a8      	blx	r5
    1ba4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    1ba6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1ba8:	4e98      	ldr	r6, [pc, #608]	; (1e0c <computeKalmanGains+0x71c>)
    1baa:	47b0      	blx	r6

        kgain[0][0] = (pestp[0][0] * (pestp[2][2] + acceleration_variance) - pestp[0][2] * pestp[2][0])/det;
    1bac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1bae:	9b0d      	ldr	r3, [sp, #52]	; 0x34

        pestp[2][2] = pestp[2][2] + model_variance;
        /*
          Calculate Kalman Gain
        */
        det = (pestp[0][0]+altitude_variance)*(pestp[2][2] + acceleration_variance) - pestp[2][0] * pestp[0][2];
    1bb0:	9006      	str	r0, [sp, #24]
    1bb2:	9107      	str	r1, [sp, #28]

        kgain[0][0] = (pestp[0][0] * (pestp[2][2] + acceleration_variance) - pestp[0][2] * pestp[2][0])/det;
    1bb4:	9808      	ldr	r0, [sp, #32]
    1bb6:	9909      	ldr	r1, [sp, #36]	; 0x24
    1bb8:	47a8      	blx	r5
    1bba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    1bbc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1bbe:	47b0      	blx	r6
    1bc0:	9a06      	ldr	r2, [sp, #24]
    1bc2:	9b07      	ldr	r3, [sp, #28]
    1bc4:	4e92      	ldr	r6, [pc, #584]	; (1e10 <computeKalmanGains+0x720>)
    1bc6:	47b0      	blx	r6
    1bc8:	9034      	str	r0, [sp, #208]	; 0xd0
    1bca:	9135      	str	r1, [sp, #212]	; 0xd4
    1bcc:	9a34      	ldr	r2, [sp, #208]	; 0xd0
    1bce:	9b35      	ldr	r3, [sp, #212]	; 0xd4
    1bd0:	4990      	ldr	r1, [pc, #576]	; (1e14 <computeKalmanGains+0x724>)
    1bd2:	600a      	str	r2, [r1, #0]
    1bd4:	604b      	str	r3, [r1, #4]
        kgain[0][1] = (pestp[0][0] * (-pestp[0][2]) + pestp[0][2] * (pestp[0][0] + altitude_variance))/det;
    1bd6:	9808      	ldr	r0, [sp, #32]
    1bd8:	9909      	ldr	r1, [sp, #36]	; 0x24
    1bda:	2280      	movs	r2, #128	; 0x80
    1bdc:	0612      	lsls	r2, r2, #24
    1bde:	4694      	mov	ip, r2
    1be0:	9b12      	ldr	r3, [sp, #72]	; 0x48
    1be2:	9a04      	ldr	r2, [sp, #16]
    1be4:	4463      	add	r3, ip
    1be6:	932e      	str	r3, [sp, #184]	; 0xb8
    1be8:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    1bea:	47a8      	blx	r5
    1bec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    1bee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1bf0:	0006      	movs	r6, r0
    1bf2:	000f      	movs	r7, r1
    1bf4:	9804      	ldr	r0, [sp, #16]
    1bf6:	9916      	ldr	r1, [sp, #88]	; 0x58
    1bf8:	47a8      	blx	r5
    1bfa:	0002      	movs	r2, r0
    1bfc:	000b      	movs	r3, r1
    1bfe:	0030      	movs	r0, r6
    1c00:	0039      	movs	r1, r7
    1c02:	47a0      	blx	r4
    1c04:	9a06      	ldr	r2, [sp, #24]
    1c06:	9b07      	ldr	r3, [sp, #28]
    1c08:	4e81      	ldr	r6, [pc, #516]	; (1e10 <computeKalmanGains+0x720>)
    1c0a:	47b0      	blx	r6
    1c0c:	900e      	str	r0, [sp, #56]	; 0x38
    1c0e:	910f      	str	r1, [sp, #60]	; 0x3c
    1c10:	4980      	ldr	r1, [pc, #512]	; (1e14 <computeKalmanGains+0x724>)
    1c12:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    1c14:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1c16:	608a      	str	r2, [r1, #8]
    1c18:	60cb      	str	r3, [r1, #12]
        kgain[1][0] = (pestp[1][0] * (pestp[2][2] + acceleration_variance) - pestp[1][2] * pestp[2][0])/det;
    1c1a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1c1c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1c1e:	982a      	ldr	r0, [sp, #168]	; 0xa8
    1c20:	992b      	ldr	r1, [sp, #172]	; 0xac
    1c22:	47a8      	blx	r5
    1c24:	9a00      	ldr	r2, [sp, #0]
    1c26:	9b01      	ldr	r3, [sp, #4]
    1c28:	0006      	movs	r6, r0
    1c2a:	000f      	movs	r7, r1
    1c2c:	982c      	ldr	r0, [sp, #176]	; 0xb0
    1c2e:	992d      	ldr	r1, [sp, #180]	; 0xb4
    1c30:	47a8      	blx	r5
    1c32:	0002      	movs	r2, r0
    1c34:	000b      	movs	r3, r1
    1c36:	0030      	movs	r0, r6
    1c38:	0039      	movs	r1, r7
    1c3a:	4e74      	ldr	r6, [pc, #464]	; (1e0c <computeKalmanGains+0x71c>)
    1c3c:	47b0      	blx	r6
    1c3e:	9a06      	ldr	r2, [sp, #24]
    1c40:	9b07      	ldr	r3, [sp, #28]
    1c42:	4e73      	ldr	r6, [pc, #460]	; (1e10 <computeKalmanGains+0x720>)
    1c44:	47b0      	blx	r6
    1c46:	0002      	movs	r2, r0
    1c48:	000b      	movs	r3, r1
    1c4a:	9139      	str	r1, [sp, #228]	; 0xe4
    1c4c:	4971      	ldr	r1, [pc, #452]	; (1e14 <computeKalmanGains+0x724>)
    1c4e:	9018      	str	r0, [sp, #96]	; 0x60
    1c50:	610a      	str	r2, [r1, #16]
    1c52:	614b      	str	r3, [r1, #20]
        kgain[1][1] = (pestp[1][0] * (-pestp[0][2]) + pestp[1][2] * (pestp[0][0] + altitude_variance))/det;
    1c54:	982a      	ldr	r0, [sp, #168]	; 0xa8
    1c56:	992b      	ldr	r1, [sp, #172]	; 0xac
    1c58:	9a04      	ldr	r2, [sp, #16]
    1c5a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    1c5c:	47a8      	blx	r5
    1c5e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    1c60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1c62:	0006      	movs	r6, r0
    1c64:	000f      	movs	r7, r1
    1c66:	982c      	ldr	r0, [sp, #176]	; 0xb0
    1c68:	992d      	ldr	r1, [sp, #180]	; 0xb4
    1c6a:	47a8      	blx	r5
    1c6c:	0002      	movs	r2, r0
    1c6e:	000b      	movs	r3, r1
    1c70:	0030      	movs	r0, r6
    1c72:	0039      	movs	r1, r7
    1c74:	47a0      	blx	r4
    1c76:	9a06      	ldr	r2, [sp, #24]
    1c78:	9b07      	ldr	r3, [sp, #28]
    1c7a:	4e65      	ldr	r6, [pc, #404]	; (1e10 <computeKalmanGains+0x720>)
    1c7c:	47b0      	blx	r6
    1c7e:	9012      	str	r0, [sp, #72]	; 0x48
    1c80:	9113      	str	r1, [sp, #76]	; 0x4c
    1c82:	9a12      	ldr	r2, [sp, #72]	; 0x48
    1c84:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    1c86:	4963      	ldr	r1, [pc, #396]	; (1e14 <computeKalmanGains+0x724>)
    1c88:	618a      	str	r2, [r1, #24]
    1c8a:	61cb      	str	r3, [r1, #28]
        kgain[2][0] = (pestp[2][0] * (pestp[2][2] + acceleration_variance) - pestp[2][2] * pestp[2][0])/det;
    1c8c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1c8e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1c90:	9800      	ldr	r0, [sp, #0]
    1c92:	9901      	ldr	r1, [sp, #4]
    1c94:	47a8      	blx	r5
    1c96:	9a02      	ldr	r2, [sp, #8]
    1c98:	9b03      	ldr	r3, [sp, #12]
    1c9a:	0006      	movs	r6, r0
    1c9c:	000f      	movs	r7, r1
    1c9e:	9800      	ldr	r0, [sp, #0]
    1ca0:	9901      	ldr	r1, [sp, #4]
    1ca2:	47a8      	blx	r5
    1ca4:	0002      	movs	r2, r0
    1ca6:	000b      	movs	r3, r1
    1ca8:	0030      	movs	r0, r6
    1caa:	0039      	movs	r1, r7
    1cac:	4e57      	ldr	r6, [pc, #348]	; (1e0c <computeKalmanGains+0x71c>)
    1cae:	47b0      	blx	r6
    1cb0:	9a06      	ldr	r2, [sp, #24]
    1cb2:	9b07      	ldr	r3, [sp, #28]
    1cb4:	4e56      	ldr	r6, [pc, #344]	; (1e10 <computeKalmanGains+0x720>)
    1cb6:	47b0      	blx	r6
    1cb8:	9014      	str	r0, [sp, #80]	; 0x50
    1cba:	9115      	str	r1, [sp, #84]	; 0x54
    1cbc:	9a14      	ldr	r2, [sp, #80]	; 0x50
    1cbe:	9b15      	ldr	r3, [sp, #84]	; 0x54
    1cc0:	4954      	ldr	r1, [pc, #336]	; (1e14 <computeKalmanGains+0x724>)
    1cc2:	620a      	str	r2, [r1, #32]
    1cc4:	624b      	str	r3, [r1, #36]	; 0x24
        kgain[2][1] = (pestp[2][0] * (-pestp[0][2]) + pestp[2][2] * (pestp[0][0] + altitude_variance))/det;
    1cc6:	9800      	ldr	r0, [sp, #0]
    1cc8:	9901      	ldr	r1, [sp, #4]
    1cca:	9a04      	ldr	r2, [sp, #16]
    1ccc:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    1cce:	47a8      	blx	r5
    1cd0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    1cd2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1cd4:	0006      	movs	r6, r0
    1cd6:	000f      	movs	r7, r1
    1cd8:	9802      	ldr	r0, [sp, #8]
    1cda:	9903      	ldr	r1, [sp, #12]
    1cdc:	47a8      	blx	r5
    1cde:	0002      	movs	r2, r0
    1ce0:	000b      	movs	r3, r1
    1ce2:	0030      	movs	r0, r6
    1ce4:	0039      	movs	r1, r7
    1ce6:	47a0      	blx	r4
    1ce8:	9a06      	ldr	r2, [sp, #24]
    1cea:	9b07      	ldr	r3, [sp, #28]
    1cec:	4e48      	ldr	r6, [pc, #288]	; (1e10 <computeKalmanGains+0x720>)
    1cee:	47b0      	blx	r6
    1cf0:	9036      	str	r0, [sp, #216]	; 0xd8
    1cf2:	9137      	str	r1, [sp, #220]	; 0xdc
    1cf4:	9a36      	ldr	r2, [sp, #216]	; 0xd8
    1cf6:	9b37      	ldr	r3, [sp, #220]	; 0xdc
    1cf8:	4946      	ldr	r1, [pc, #280]	; (1e14 <computeKalmanGains+0x724>)

        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
    1cfa:	4e44      	ldr	r6, [pc, #272]	; (1e0c <computeKalmanGains+0x71c>)
        kgain[0][0] = (pestp[0][0] * (pestp[2][2] + acceleration_variance) - pestp[0][2] * pestp[2][0])/det;
        kgain[0][1] = (pestp[0][0] * (-pestp[0][2]) + pestp[0][2] * (pestp[0][0] + altitude_variance))/det;
        kgain[1][0] = (pestp[1][0] * (pestp[2][2] + acceleration_variance) - pestp[1][2] * pestp[2][0])/det;
        kgain[1][1] = (pestp[1][0] * (-pestp[0][2]) + pestp[1][2] * (pestp[0][0] + altitude_variance))/det;
        kgain[2][0] = (pestp[2][0] * (pestp[2][2] + acceleration_variance) - pestp[2][2] * pestp[2][0])/det;
        kgain[2][1] = (pestp[2][0] * (-pestp[0][2]) + pestp[2][2] * (pestp[0][0] + altitude_variance))/det;
    1cfc:	628a      	str	r2, [r1, #40]	; 0x28
    1cfe:	62cb      	str	r3, [r1, #44]	; 0x2c

        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
    1d00:	9a34      	ldr	r2, [sp, #208]	; 0xd0
    1d02:	9b35      	ldr	r3, [sp, #212]	; 0xd4
    1d04:	2000      	movs	r0, #0
    1d06:	4944      	ldr	r1, [pc, #272]	; (1e18 <computeKalmanGains+0x728>)
    1d08:	47b0      	blx	r6
    1d0a:	0002      	movs	r2, r0
    1d0c:	000b      	movs	r3, r1
    1d0e:	900c      	str	r0, [sp, #48]	; 0x30
    1d10:	910d      	str	r1, [sp, #52]	; 0x34
    1d12:	9808      	ldr	r0, [sp, #32]
    1d14:	9909      	ldr	r1, [sp, #36]	; 0x24
    1d16:	47a8      	blx	r5
    1d18:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    1d1a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1d1c:	0006      	movs	r6, r0
    1d1e:	000f      	movs	r7, r1
    1d20:	9800      	ldr	r0, [sp, #0]
    1d22:	9901      	ldr	r1, [sp, #4]
    1d24:	47a8      	blx	r5
    1d26:	0002      	movs	r2, r0
    1d28:	000b      	movs	r3, r1
    1d2a:	0030      	movs	r0, r6
    1d2c:	0039      	movs	r1, r7
    1d2e:	4e37      	ldr	r6, [pc, #220]	; (1e0c <computeKalmanGains+0x71c>)
    1d30:	47b0      	blx	r6
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
    1d32:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1d34:	9b0d      	ldr	r3, [sp, #52]	; 0x34
        kgain[1][0] = (pestp[1][0] * (pestp[2][2] + acceleration_variance) - pestp[1][2] * pestp[2][0])/det;
        kgain[1][1] = (pestp[1][0] * (-pestp[0][2]) + pestp[1][2] * (pestp[0][0] + altitude_variance))/det;
        kgain[2][0] = (pestp[2][0] * (pestp[2][2] + acceleration_variance) - pestp[2][2] * pestp[2][0])/det;
        kgain[2][1] = (pestp[2][0] * (-pestp[0][2]) + pestp[2][2] * (pestp[0][0] + altitude_variance))/det;

        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
    1d36:	9006      	str	r0, [sp, #24]
    1d38:	9107      	str	r1, [sp, #28]
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
    1d3a:	9830      	ldr	r0, [sp, #192]	; 0xc0
    1d3c:	9931      	ldr	r1, [sp, #196]	; 0xc4
    1d3e:	47a8      	blx	r5
    1d40:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    1d42:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1d44:	0006      	movs	r6, r0
    1d46:	000f      	movs	r7, r1
    1d48:	9810      	ldr	r0, [sp, #64]	; 0x40
    1d4a:	9911      	ldr	r1, [sp, #68]	; 0x44
    1d4c:	47a8      	blx	r5
    1d4e:	0002      	movs	r2, r0
    1d50:	000b      	movs	r3, r1
    1d52:	0030      	movs	r0, r6
    1d54:	0039      	movs	r1, r7
    1d56:	4e2d      	ldr	r6, [pc, #180]	; (1e0c <computeKalmanGains+0x71c>)
    1d58:	47b0      	blx	r6
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
    1d5a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1d5c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
        kgain[1][1] = (pestp[1][0] * (-pestp[0][2]) + pestp[1][2] * (pestp[0][0] + altitude_variance))/det;
        kgain[2][0] = (pestp[2][0] * (pestp[2][2] + acceleration_variance) - pestp[2][2] * pestp[2][0])/det;
        kgain[2][1] = (pestp[2][0] * (-pestp[0][2]) + pestp[2][2] * (pestp[0][0] + altitude_variance))/det;

        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
    1d5e:	900a      	str	r0, [sp, #40]	; 0x28
    1d60:	910b      	str	r1, [sp, #44]	; 0x2c
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
    1d62:	9804      	ldr	r0, [sp, #16]
    1d64:	9916      	ldr	r1, [sp, #88]	; 0x58
    1d66:	47a8      	blx	r5
    1d68:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    1d6a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1d6c:	0006      	movs	r6, r0
    1d6e:	000f      	movs	r7, r1
    1d70:	9802      	ldr	r0, [sp, #8]
    1d72:	9903      	ldr	r1, [sp, #12]
    1d74:	47a8      	blx	r5
    1d76:	0002      	movs	r2, r0
    1d78:	000b      	movs	r3, r1
    1d7a:	0030      	movs	r0, r6
    1d7c:	0039      	movs	r1, r7
    1d7e:	4e23      	ldr	r6, [pc, #140]	; (1e0c <computeKalmanGains+0x71c>)
    1d80:	47b0      	blx	r6
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
    1d82:	2280      	movs	r2, #128	; 0x80
    1d84:	0612      	lsls	r2, r2, #24
    1d86:	4694      	mov	ip, r2
    1d88:	9b39      	ldr	r3, [sp, #228]	; 0xe4
    1d8a:	9a18      	ldr	r2, [sp, #96]	; 0x60
    1d8c:	4463      	add	r3, ip
    1d8e:	932e      	str	r3, [sp, #184]	; 0xb8
    1d90:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
        kgain[2][0] = (pestp[2][0] * (pestp[2][2] + acceleration_variance) - pestp[2][2] * pestp[2][0])/det;
        kgain[2][1] = (pestp[2][0] * (-pestp[0][2]) + pestp[2][2] * (pestp[0][0] + altitude_variance))/det;

        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
    1d92:	900c      	str	r0, [sp, #48]	; 0x30
    1d94:	910d      	str	r1, [sp, #52]	; 0x34
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
    1d96:	9808      	ldr	r0, [sp, #32]
    1d98:	9909      	ldr	r1, [sp, #36]	; 0x24
    1d9a:	47a8      	blx	r5
    1d9c:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
    1d9e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
    1da0:	47a0      	blx	r4
    1da2:	9a12      	ldr	r2, [sp, #72]	; 0x48
    1da4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    1da6:	0006      	movs	r6, r0
    1da8:	000f      	movs	r7, r1
    1daa:	9800      	ldr	r0, [sp, #0]
    1dac:	9901      	ldr	r1, [sp, #4]
    1dae:	47a8      	blx	r5
    1db0:	0002      	movs	r2, r0
    1db2:	000b      	movs	r3, r1
    1db4:	0030      	movs	r0, r6
    1db6:	0039      	movs	r1, r7
    1db8:	4e14      	ldr	r6, [pc, #80]	; (1e0c <computeKalmanGains+0x71c>)
    1dba:	47b0      	blx	r6
        pest[1][1] = pestp[0][1] * (-kgain[1][0]) + pestp[1][1] - kgain[1][1]*pestp[2][1];
    1dbc:	9a32      	ldr	r2, [sp, #200]	; 0xc8
    1dbe:	9b33      	ldr	r3, [sp, #204]	; 0xcc
        kgain[2][1] = (pestp[2][0] * (-pestp[0][2]) + pestp[2][2] * (pestp[0][0] + altitude_variance))/det;

        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
    1dc0:	9008      	str	r0, [sp, #32]
    1dc2:	9109      	str	r1, [sp, #36]	; 0x24
        pest[1][1] = pestp[0][1] * (-kgain[1][0]) + pestp[1][1] - kgain[1][1]*pestp[2][1];
    1dc4:	9826      	ldr	r0, [sp, #152]	; 0x98
    1dc6:	9927      	ldr	r1, [sp, #156]	; 0x9c
    1dc8:	47a0      	blx	r4
    1dca:	4a0c      	ldr	r2, [pc, #48]	; (1dfc <computeKalmanGains+0x70c>)
    1dcc:	0006      	movs	r6, r0
    1dce:	000f      	movs	r7, r1
    1dd0:	9828      	ldr	r0, [sp, #160]	; 0xa0
    1dd2:	9929      	ldr	r1, [sp, #164]	; 0xa4
    1dd4:	4b0a      	ldr	r3, [pc, #40]	; (1e00 <computeKalmanGains+0x710>)
    1dd6:	47a8      	blx	r5
    1dd8:	0002      	movs	r2, r0
    1dda:	000b      	movs	r3, r1
    1ddc:	0030      	movs	r0, r6
    1dde:	0039      	movs	r1, r7
    1de0:	47a0      	blx	r4
    1de2:	9a18      	ldr	r2, [sp, #96]	; 0x60
    1de4:	0006      	movs	r6, r0
    1de6:	000f      	movs	r7, r1
    1de8:	9830      	ldr	r0, [sp, #192]	; 0xc0
    1dea:	9931      	ldr	r1, [sp, #196]	; 0xc4
    1dec:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    1dee:	47a8      	blx	r5
    1df0:	0002      	movs	r2, r0
    1df2:	000b      	movs	r3, r1
    1df4:	0030      	movs	r0, r6
    1df6:	0039      	movs	r1, r7
    1df8:	47a0      	blx	r4
    1dfa:	e00f      	b.n	1e1c <computeKalmanGains+0x72c>
    1dfc:	47ae147b 	.word	0x47ae147b
    1e00:	3f747ae1 	.word	0x3f747ae1
    1e04:	eb1c432d 	.word	0xeb1c432d
    1e08:	3eea36e2 	.word	0x3eea36e2
    1e0c:	00005a31 	.word	0x00005a31
    1e10:	00004cf5 	.word	0x00004cf5
    1e14:	20000648 	.word	0x20000648
    1e18:	3ff00000 	.word	0x3ff00000
    1e1c:	9a12      	ldr	r2, [sp, #72]	; 0x48
    1e1e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    1e20:	0006      	movs	r6, r0
    1e22:	000f      	movs	r7, r1
    1e24:	9810      	ldr	r0, [sp, #64]	; 0x40
    1e26:	9911      	ldr	r1, [sp, #68]	; 0x44
    1e28:	47a8      	blx	r5
    1e2a:	0002      	movs	r2, r0
    1e2c:	000b      	movs	r3, r1
    1e2e:	0030      	movs	r0, r6
    1e30:	0039      	movs	r1, r7
    1e32:	4e50      	ldr	r6, [pc, #320]	; (1f74 <computeKalmanGains+0x884>)
    1e34:	47b0      	blx	r6
        pest[1][2] = pestp[0][2] * (-kgain[1][0]) + pestp[1][2] - kgain[1][1]*pestp[2][2];
    1e36:	9a18      	ldr	r2, [sp, #96]	; 0x60

        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
        pest[1][1] = pestp[0][1] * (-kgain[1][0]) + pestp[1][1] - kgain[1][1]*pestp[2][1];
    1e38:	900e      	str	r0, [sp, #56]	; 0x38
    1e3a:	910f      	str	r1, [sp, #60]	; 0x3c
        pest[1][2] = pestp[0][2] * (-kgain[1][0]) + pestp[1][2] - kgain[1][1]*pestp[2][2];
    1e3c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    1e3e:	9804      	ldr	r0, [sp, #16]
    1e40:	9916      	ldr	r1, [sp, #88]	; 0x58
    1e42:	47a8      	blx	r5
    1e44:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
    1e46:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    1e48:	47a0      	blx	r4
    1e4a:	9a12      	ldr	r2, [sp, #72]	; 0x48
    1e4c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    1e4e:	0006      	movs	r6, r0
    1e50:	000f      	movs	r7, r1
    1e52:	9802      	ldr	r0, [sp, #8]
    1e54:	9903      	ldr	r1, [sp, #12]
    1e56:	47a8      	blx	r5
    1e58:	4c46      	ldr	r4, [pc, #280]	; (1f74 <computeKalmanGains+0x884>)
    1e5a:	0002      	movs	r2, r0
    1e5c:	000b      	movs	r3, r1
    1e5e:	0030      	movs	r0, r6
    1e60:	0039      	movs	r1, r7
    1e62:	47a0      	blx	r4
        pest[2][0] = (1.0 - kgain[2][1]) * pestp[2][0] - kgain[2][0] * pestp[2][0];
    1e64:	9a36      	ldr	r2, [sp, #216]	; 0xd8
    1e66:	9b37      	ldr	r3, [sp, #220]	; 0xdc
        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
        pest[1][1] = pestp[0][1] * (-kgain[1][0]) + pestp[1][1] - kgain[1][1]*pestp[2][1];
        pest[1][2] = pestp[0][2] * (-kgain[1][0]) + pestp[1][2] - kgain[1][1]*pestp[2][2];
    1e68:	9004      	str	r0, [sp, #16]
    1e6a:	9105      	str	r1, [sp, #20]
        pest[2][0] = (1.0 - kgain[2][1]) * pestp[2][0] - kgain[2][0] * pestp[2][0];
    1e6c:	2000      	movs	r0, #0
    1e6e:	4942      	ldr	r1, [pc, #264]	; (1f78 <computeKalmanGains+0x888>)
    1e70:	47a0      	blx	r4
    1e72:	0002      	movs	r2, r0
    1e74:	000b      	movs	r3, r1
    1e76:	9012      	str	r0, [sp, #72]	; 0x48
    1e78:	9113      	str	r1, [sp, #76]	; 0x4c
    1e7a:	9800      	ldr	r0, [sp, #0]
    1e7c:	9901      	ldr	r1, [sp, #4]
    1e7e:	47a8      	blx	r5
    1e80:	9a14      	ldr	r2, [sp, #80]	; 0x50
    1e82:	9b15      	ldr	r3, [sp, #84]	; 0x54
    1e84:	0006      	movs	r6, r0
    1e86:	000f      	movs	r7, r1
    1e88:	9800      	ldr	r0, [sp, #0]
    1e8a:	9901      	ldr	r1, [sp, #4]
    1e8c:	47a8      	blx	r5
    1e8e:	0002      	movs	r2, r0
    1e90:	000b      	movs	r3, r1
    1e92:	0030      	movs	r0, r6
    1e94:	0039      	movs	r1, r7
    1e96:	47a0      	blx	r4
    1e98:	9000      	str	r0, [sp, #0]
    1e9a:	9101      	str	r1, [sp, #4]
        pest[2][1] = (1.0 - kgain[2][1]) * pestp[2][1] - kgain[2][0] * pestp[2][1];
    1e9c:	9a12      	ldr	r2, [sp, #72]	; 0x48
    1e9e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    1ea0:	9810      	ldr	r0, [sp, #64]	; 0x40
    1ea2:	9911      	ldr	r1, [sp, #68]	; 0x44
    1ea4:	47a8      	blx	r5
    1ea6:	9a14      	ldr	r2, [sp, #80]	; 0x50
    1ea8:	9b15      	ldr	r3, [sp, #84]	; 0x54
    1eaa:	0006      	movs	r6, r0
    1eac:	000f      	movs	r7, r1
    1eae:	9810      	ldr	r0, [sp, #64]	; 0x40
    1eb0:	9911      	ldr	r1, [sp, #68]	; 0x44
    1eb2:	47a8      	blx	r5
    1eb4:	0002      	movs	r2, r0
    1eb6:	000b      	movs	r3, r1
    1eb8:	0030      	movs	r0, r6
    1eba:	0039      	movs	r1, r7
    1ebc:	47a0      	blx	r4
        pest[2][2] = (1.0 - kgain[2][1]) * pestp[2][2] - kgain[2][0] * pestp[2][2];
    1ebe:	9a12      	ldr	r2, [sp, #72]	; 0x48
    1ec0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
        pest[1][1] = pestp[0][1] * (-kgain[1][0]) + pestp[1][1] - kgain[1][1]*pestp[2][1];
        pest[1][2] = pestp[0][2] * (-kgain[1][0]) + pestp[1][2] - kgain[1][1]*pestp[2][2];
        pest[2][0] = (1.0 - kgain[2][1]) * pestp[2][0] - kgain[2][0] * pestp[2][0];
        pest[2][1] = (1.0 - kgain[2][1]) * pestp[2][1] - kgain[2][0] * pestp[2][1];
    1ec2:	9010      	str	r0, [sp, #64]	; 0x40
    1ec4:	9111      	str	r1, [sp, #68]	; 0x44
        pest[2][2] = (1.0 - kgain[2][1]) * pestp[2][2] - kgain[2][0] * pestp[2][2];
    1ec6:	9802      	ldr	r0, [sp, #8]
    1ec8:	9903      	ldr	r1, [sp, #12]
    1eca:	47a8      	blx	r5
    1ecc:	9a14      	ldr	r2, [sp, #80]	; 0x50
    1ece:	9b15      	ldr	r3, [sp, #84]	; 0x54
    1ed0:	0006      	movs	r6, r0
    1ed2:	000f      	movs	r7, r1
    1ed4:	9802      	ldr	r0, [sp, #8]
    1ed6:	9903      	ldr	r1, [sp, #12]
    1ed8:	47a8      	blx	r5
    1eda:	000b      	movs	r3, r1
    1edc:	0002      	movs	r2, r0
    1ede:	0039      	movs	r1, r7
    1ee0:	0030      	movs	r0, r6
    1ee2:	47a0      	blx	r4
         * time through the mill. Because I have noticed very early convergance
         * in a few cases (< 20 iterations) I am delaying this for at least
         * 100 iterations.
         */
        notdone = 0;
        k++;
    1ee4:	2400      	movs	r4, #0
    1ee6:	9b38      	ldr	r3, [sp, #224]	; 0xe0
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
        pest[1][1] = pestp[0][1] * (-kgain[1][0]) + pestp[1][1] - kgain[1][1]*pestp[2][1];
        pest[1][2] = pestp[0][2] * (-kgain[1][0]) + pestp[1][2] - kgain[1][1]*pestp[2][2];
        pest[2][0] = (1.0 - kgain[2][1]) * pestp[2][0] - kgain[2][0] * pestp[2][0];
        pest[2][1] = (1.0 - kgain[2][1]) * pestp[2][1] - kgain[2][0] * pestp[2][1];
        pest[2][2] = (1.0 - kgain[2][1]) * pestp[2][2] - kgain[2][0] * pestp[2][2];
    1ee8:	9002      	str	r0, [sp, #8]
    1eea:	9103      	str	r1, [sp, #12]
         * time through the mill. Because I have noticed very early convergance
         * in a few cases (< 20 iterations) I am delaying this for at least
         * 100 iterations.
         */
        notdone = 0;
        k++;
    1eec:	3301      	adds	r3, #1
    1eee:	9338      	str	r3, [sp, #224]	; 0xe0
        for( i = 0; i <= 2; i++)
            for( j = 0; j <= 1; j++) {
                if( (kgain[i][j] - lastkgain[i][j])/lastkgain[i][j] > 0.00001)
    1ef0:	4b22      	ldr	r3, [pc, #136]	; (1f7c <computeKalmanGains+0x88c>)
        /* Check for convergance. Criteria is less than .001% change from last
         * time through the mill. Because I have noticed very early convergance
         * in a few cases (< 20 iterations) I am delaying this for at least
         * 100 iterations.
         */
        notdone = 0;
    1ef2:	9414      	str	r4, [sp, #80]	; 0x50
        k++;
        for( i = 0; i <= 2; i++)
            for( j = 0; j <= 1; j++) {
                if( (kgain[i][j] - lastkgain[i][j])/lastkgain[i][j] > 0.00001)
    1ef4:	9326      	str	r3, [sp, #152]	; 0x98
    1ef6:	4b1f      	ldr	r3, [pc, #124]	; (1f74 <computeKalmanGains+0x884>)
    1ef8:	9328      	str	r3, [sp, #160]	; 0xa0
    1efa:	ab40      	add	r3, sp, #256	; 0x100
    1efc:	18e5      	adds	r5, r4, r3

        pestp[2][2] = pestp[2][2] + model_variance;
        /*
          Calculate Kalman Gain
        */
        det = (pestp[0][0]+altitude_variance)*(pestp[2][2] + acceleration_variance) - pestp[2][0] * pestp[0][2];
    1efe:	2300      	movs	r3, #0
    1f00:	9516      	str	r5, [sp, #88]	; 0x58
    1f02:	9312      	str	r3, [sp, #72]	; 0x48
         */
        notdone = 0;
        k++;
        for( i = 0; i <= 2; i++)
            for( j = 0; j <= 1; j++) {
                if( (kgain[i][j] - lastkgain[i][j])/lastkgain[i][j] > 0.00001)
    1f04:	9b12      	ldr	r3, [sp, #72]	; 0x48
    1f06:	9a26      	ldr	r2, [sp, #152]	; 0x98
    1f08:	18e3      	adds	r3, r4, r3
    1f0a:	189b      	adds	r3, r3, r2
    1f0c:	681a      	ldr	r2, [r3, #0]
    1f0e:	685b      	ldr	r3, [r3, #4]
    1f10:	9218      	str	r2, [sp, #96]	; 0x60
    1f12:	9319      	str	r3, [sp, #100]	; 0x64
    1f14:	9818      	ldr	r0, [sp, #96]	; 0x60
    1f16:	9919      	ldr	r1, [sp, #100]	; 0x64
    1f18:	9b16      	ldr	r3, [sp, #88]	; 0x58
    1f1a:	9d28      	ldr	r5, [sp, #160]	; 0xa0
    1f1c:	681e      	ldr	r6, [r3, #0]
    1f1e:	685f      	ldr	r7, [r3, #4]
    1f20:	0032      	movs	r2, r6
    1f22:	003b      	movs	r3, r7
    1f24:	47a8      	blx	r5
    1f26:	0032      	movs	r2, r6
    1f28:	003b      	movs	r3, r7
    1f2a:	4d15      	ldr	r5, [pc, #84]	; (1f80 <computeKalmanGains+0x890>)
    1f2c:	47a8      	blx	r5
    1f2e:	4b15      	ldr	r3, [pc, #84]	; (1f84 <computeKalmanGains+0x894>)
    1f30:	4a15      	ldr	r2, [pc, #84]	; (1f88 <computeKalmanGains+0x898>)
    1f32:	4e16      	ldr	r6, [pc, #88]	; (1f8c <computeKalmanGains+0x89c>)
    1f34:	47b0      	blx	r6
                    notdone++;
    1f36:	1e43      	subs	r3, r0, #1
    1f38:	4198      	sbcs	r0, r3
    1f3a:	9b14      	ldr	r3, [sp, #80]	; 0x50
                lastkgain[i][j] = kgain[i][j];
    1f3c:	9916      	ldr	r1, [sp, #88]	; 0x58
        notdone = 0;
        k++;
        for( i = 0; i <= 2; i++)
            for( j = 0; j <= 1; j++) {
                if( (kgain[i][j] - lastkgain[i][j])/lastkgain[i][j] > 0.00001)
                    notdone++;
    1f3e:	181b      	adds	r3, r3, r0
    1f40:	9314      	str	r3, [sp, #80]	; 0x50
                lastkgain[i][j] = kgain[i][j];
    1f42:	9a18      	ldr	r2, [sp, #96]	; 0x60
    1f44:	9b19      	ldr	r3, [sp, #100]	; 0x64
    1f46:	c10c      	stmia	r1!, {r2, r3}
    1f48:	9b12      	ldr	r3, [sp, #72]	; 0x48
    1f4a:	9116      	str	r1, [sp, #88]	; 0x58
    1f4c:	3308      	adds	r3, #8
    1f4e:	9312      	str	r3, [sp, #72]	; 0x48
         * 100 iterations.
         */
        notdone = 0;
        k++;
        for( i = 0; i <= 2; i++)
            for( j = 0; j <= 1; j++) {
    1f50:	2b10      	cmp	r3, #16
    1f52:	d1d7      	bne.n	1f04 <computeKalmanGains+0x814>
    1f54:	3410      	adds	r4, #16
         * in a few cases (< 20 iterations) I am delaying this for at least
         * 100 iterations.
         */
        notdone = 0;
        k++;
        for( i = 0; i <= 2; i++)
    1f56:	2c30      	cmp	r4, #48	; 0x30
    1f58:	d1cf      	bne.n	1efa <computeKalmanGains+0x80a>
            for( j = 0; j <= 1; j++) {
                if( (kgain[i][j] - lastkgain[i][j])/lastkgain[i][j] > 0.00001)
                    notdone++;
                lastkgain[i][j] = kgain[i][j];
            }
        if( notdone || k < 100)
    1f5a:	9b14      	ldr	r3, [sp, #80]	; 0x50
    1f5c:	2b00      	cmp	r3, #0
    1f5e:	d001      	beq.n	1f64 <computeKalmanGains+0x874>
    1f60:	f7ff fc2c 	bl	17bc <computeKalmanGains+0xcc>
    1f64:	9b38      	ldr	r3, [sp, #224]	; 0xe0
    1f66:	2b63      	cmp	r3, #99	; 0x63
    1f68:	dc01      	bgt.n	1f6e <computeKalmanGains+0x87e>
    1f6a:	f7ff fc27 	bl	17bc <computeKalmanGains+0xcc>
            continue;
        else
            break;
    }
}
    1f6e:	b04d      	add	sp, #308	; 0x134
    1f70:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1f72:	46c0      	nop			; (mov r8, r8)
    1f74:	00005a31 	.word	0x00005a31
    1f78:	3ff00000 	.word	0x3ff00000
    1f7c:	20000648 	.word	0x20000648
    1f80:	00004cf5 	.word	0x00004cf5
    1f84:	3ee4f8b5 	.word	0x3ee4f8b5
    1f88:	88e368f1 	.word	0x88e368f1
    1f8c:	00003fa9 	.word	0x00003fa9

00001f90 <computeKalmanStates>:

void computeKalmanStates() {
    1f90:	b5f0      	push	{r4, r5, r6, r7, lr}

    double alt_inovation, accel_inovation, acceleration;

    if (altimeter.pointingUp) {
    1f92:	4b85      	ldr	r3, [pc, #532]	; (21a8 <STACK_SIZE+0x1a8>)
        else
            break;
    }
}

void computeKalmanStates() {
    1f94:	b08f      	sub	sp, #60	; 0x3c

    double alt_inovation, accel_inovation, acceleration;

    if (altimeter.pointingUp) {
    1f96:	795a      	ldrb	r2, [r3, #5]
    1f98:	4c84      	ldr	r4, [pc, #528]	; (21ac <STACK_SIZE+0x1ac>)
    1f9a:	4b85      	ldr	r3, [pc, #532]	; (21b0 <STACK_SIZE+0x1b0>)
    1f9c:	4e85      	ldr	r6, [pc, #532]	; (21b4 <STACK_SIZE+0x1b4>)
    1f9e:	4d86      	ldr	r5, [pc, #536]	; (21b8 <STACK_SIZE+0x1b8>)
    1fa0:	2a00      	cmp	r2, #0
    1fa2:	d004      	beq.n	1fae <computeKalmanStates+0x1e>
        acceleration = (-sample.accelZ - offsets.gravityOffset) * 32.17417;
    1fa4:	2180      	movs	r1, #128	; 0x80
    1fa6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    1fa8:	0609      	lsls	r1, r1, #24
    1faa:	1850      	adds	r0, r2, r1
    1fac:	e000      	b.n	1fb0 <computeKalmanStates+0x20>
    } else {
        acceleration = (sample.accelZ - offsets.gravityOffset) * 32.17417;
    1fae:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    1fb0:	4798      	blx	r3
    1fb2:	68b2      	ldr	r2, [r6, #8]
    1fb4:	68f3      	ldr	r3, [r6, #12]
    1fb6:	47a8      	blx	r5
    1fb8:	4a80      	ldr	r2, [pc, #512]	; (21bc <STACK_SIZE+0x1bc>)
    1fba:	4b81      	ldr	r3, [pc, #516]	; (21c0 <STACK_SIZE+0x1c0>)
    1fbc:	4d81      	ldr	r5, [pc, #516]	; (21c4 <STACK_SIZE+0x1c4>)
    1fbe:	47a8      	blx	r5
    }

    double pressure = sample.altitudefeet;
    1fc0:	6c23      	ldr	r3, [r4, #64]	; 0x40
    1fc2:	6c64      	ldr	r4, [r4, #68]	; 0x44
    1fc4:	9300      	str	r3, [sp, #0]
    1fc6:	9401      	str	r4, [sp, #4]

    if (altitude == 0) {
    1fc8:	4c7f      	ldr	r4, [pc, #508]	; (21c8 <STACK_SIZE+0x1c8>)
    double alt_inovation, accel_inovation, acceleration;

    if (altimeter.pointingUp) {
        acceleration = (-sample.accelZ - offsets.gravityOffset) * 32.17417;
    } else {
        acceleration = (sample.accelZ - offsets.gravityOffset) * 32.17417;
    1fca:	0006      	movs	r6, r0
    1fcc:	000f      	movs	r7, r1
    }

    double pressure = sample.altitudefeet;

    if (altitude == 0) {
    1fce:	6820      	ldr	r0, [r4, #0]
    1fd0:	6861      	ldr	r1, [r4, #4]
    1fd2:	2200      	movs	r2, #0
    1fd4:	2300      	movs	r3, #0
    1fd6:	4d7d      	ldr	r5, [pc, #500]	; (21cc <STACK_SIZE+0x1cc>)
    1fd8:	47a8      	blx	r5
    1fda:	2800      	cmp	r0, #0
    1fdc:	d003      	beq.n	1fe6 <computeKalmanStates+0x56>
        altitude = pressure;
    1fde:	9a00      	ldr	r2, [sp, #0]
    1fe0:	9b01      	ldr	r3, [sp, #4]
    1fe2:	6022      	str	r2, [r4, #0]
    1fe4:	6063      	str	r3, [r4, #4]
    }

    /* Compute the innovations */
    alt_inovation = pressure - estp[0];
    1fe6:	9800      	ldr	r0, [sp, #0]
    1fe8:	9901      	ldr	r1, [sp, #4]
    1fea:	4b79      	ldr	r3, [pc, #484]	; (21d0 <STACK_SIZE+0x1d0>)
    1fec:	4c72      	ldr	r4, [pc, #456]	; (21b8 <STACK_SIZE+0x1b8>)
    1fee:	681a      	ldr	r2, [r3, #0]
    1ff0:	685b      	ldr	r3, [r3, #4]
    1ff2:	47a0      	blx	r4
    accel_inovation = acceleration - estp[2];
    1ff4:	4b76      	ldr	r3, [pc, #472]	; (21d0 <STACK_SIZE+0x1d0>)
    if (altitude == 0) {
        altitude = pressure;
    }

    /* Compute the innovations */
    alt_inovation = pressure - estp[0];
    1ff6:	9006      	str	r0, [sp, #24]
    1ff8:	9107      	str	r1, [sp, #28]
    accel_inovation = acceleration - estp[2];
    1ffa:	691a      	ldr	r2, [r3, #16]
    1ffc:	695b      	ldr	r3, [r3, #20]
    1ffe:	0030      	movs	r0, r6
    2000:	0039      	movs	r1, r7
    2002:	47a0      	blx	r4


    /* Propagate state */
    estp[0] = phi[0][0] * altitude + phi[0][1] *velocity + phi[0][2] * accel;
    2004:	4b70      	ldr	r3, [pc, #448]	; (21c8 <STACK_SIZE+0x1c8>)
    2006:	4d6f      	ldr	r5, [pc, #444]	; (21c4 <STACK_SIZE+0x1c4>)
    2008:	685c      	ldr	r4, [r3, #4]
    200a:	681b      	ldr	r3, [r3, #0]
    200c:	9300      	str	r3, [sp, #0]
    200e:	9401      	str	r4, [sp, #4]
    2010:	4b70      	ldr	r3, [pc, #448]	; (21d4 <STACK_SIZE+0x1d4>)
        altitude = pressure;
    }

    /* Compute the innovations */
    alt_inovation = pressure - estp[0];
    accel_inovation = acceleration - estp[2];
    2012:	9008      	str	r0, [sp, #32]
    2014:	9109      	str	r1, [sp, #36]	; 0x24


    /* Propagate state */
    estp[0] = phi[0][0] * altitude + phi[0][1] *velocity + phi[0][2] * accel;
    2016:	685c      	ldr	r4, [r3, #4]
    2018:	681b      	ldr	r3, [r3, #0]
    201a:	9800      	ldr	r0, [sp, #0]
    201c:	9901      	ldr	r1, [sp, #4]
    201e:	9302      	str	r3, [sp, #8]
    2020:	9403      	str	r4, [sp, #12]
    2022:	4b6d      	ldr	r3, [pc, #436]	; (21d8 <STACK_SIZE+0x1d8>)
    2024:	685c      	ldr	r4, [r3, #4]
    2026:	681b      	ldr	r3, [r3, #0]
    2028:	9304      	str	r3, [sp, #16]
    202a:	9405      	str	r4, [sp, #20]
    202c:	4c6b      	ldr	r4, [pc, #428]	; (21dc <STACK_SIZE+0x1dc>)
    202e:	6822      	ldr	r2, [r4, #0]
    2030:	6863      	ldr	r3, [r4, #4]
    2032:	47a8      	blx	r5
    2034:	68a2      	ldr	r2, [r4, #8]
    2036:	68e3      	ldr	r3, [r4, #12]
    2038:	0006      	movs	r6, r0
    203a:	000f      	movs	r7, r1
    203c:	9802      	ldr	r0, [sp, #8]
    203e:	9903      	ldr	r1, [sp, #12]
    2040:	47a8      	blx	r5
    2042:	0002      	movs	r2, r0
    2044:	000b      	movs	r3, r1
    2046:	0030      	movs	r0, r6
    2048:	0039      	movs	r1, r7
    204a:	4e65      	ldr	r6, [pc, #404]	; (21e0 <STACK_SIZE+0x1e0>)
    204c:	47b0      	blx	r6
    204e:	6922      	ldr	r2, [r4, #16]
    2050:	6963      	ldr	r3, [r4, #20]
    2052:	0006      	movs	r6, r0
    2054:	000f      	movs	r7, r1
    2056:	9804      	ldr	r0, [sp, #16]
    2058:	9905      	ldr	r1, [sp, #20]
    205a:	47a8      	blx	r5
    205c:	0002      	movs	r2, r0
    205e:	000b      	movs	r3, r1
    2060:	0030      	movs	r0, r6
    2062:	0039      	movs	r1, r7
    2064:	4e5e      	ldr	r6, [pc, #376]	; (21e0 <STACK_SIZE+0x1e0>)
    2066:	47b0      	blx	r6
    2068:	900a      	str	r0, [sp, #40]	; 0x28
    206a:	910b      	str	r1, [sp, #44]	; 0x2c
    206c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    206e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    2070:	4957      	ldr	r1, [pc, #348]	; (21d0 <STACK_SIZE+0x1d0>)
    2072:	600a      	str	r2, [r1, #0]
    2074:	604b      	str	r3, [r1, #4]
    estp[1] = phi[1][0] * altitude + phi[1][1] * velocity + phi[1][2] * accel;
    2076:	69a2      	ldr	r2, [r4, #24]
    2078:	69e3      	ldr	r3, [r4, #28]
    207a:	9800      	ldr	r0, [sp, #0]
    207c:	9901      	ldr	r1, [sp, #4]
    207e:	47a8      	blx	r5
    2080:	6a22      	ldr	r2, [r4, #32]
    2082:	6a63      	ldr	r3, [r4, #36]	; 0x24
    2084:	0006      	movs	r6, r0
    2086:	000f      	movs	r7, r1
    2088:	9802      	ldr	r0, [sp, #8]
    208a:	9903      	ldr	r1, [sp, #12]
    208c:	47a8      	blx	r5
    208e:	0002      	movs	r2, r0
    2090:	000b      	movs	r3, r1
    2092:	0030      	movs	r0, r6
    2094:	0039      	movs	r1, r7
    2096:	4e52      	ldr	r6, [pc, #328]	; (21e0 <STACK_SIZE+0x1e0>)
    2098:	47b0      	blx	r6
    209a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    209c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    209e:	0006      	movs	r6, r0
    20a0:	000f      	movs	r7, r1
    20a2:	9804      	ldr	r0, [sp, #16]
    20a4:	9905      	ldr	r1, [sp, #20]
    20a6:	47a8      	blx	r5
    20a8:	0002      	movs	r2, r0
    20aa:	000b      	movs	r3, r1
    20ac:	0030      	movs	r0, r6
    20ae:	0039      	movs	r1, r7
    20b0:	4e4b      	ldr	r6, [pc, #300]	; (21e0 <STACK_SIZE+0x1e0>)
    20b2:	47b0      	blx	r6
    20b4:	900c      	str	r0, [sp, #48]	; 0x30
    20b6:	910d      	str	r1, [sp, #52]	; 0x34
    20b8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    20ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    20bc:	4944      	ldr	r1, [pc, #272]	; (21d0 <STACK_SIZE+0x1d0>)
    20be:	608a      	str	r2, [r1, #8]
    20c0:	60cb      	str	r3, [r1, #12]
    estp[2] = phi[2][0] * altitude + phi[2][1] * velocity + phi[2][2] * accel;
    20c2:	6b22      	ldr	r2, [r4, #48]	; 0x30
    20c4:	6b63      	ldr	r3, [r4, #52]	; 0x34
    20c6:	9800      	ldr	r0, [sp, #0]
    20c8:	9901      	ldr	r1, [sp, #4]
    20ca:	47a8      	blx	r5
    20cc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    20ce:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    20d0:	0006      	movs	r6, r0
    20d2:	000f      	movs	r7, r1
    20d4:	9802      	ldr	r0, [sp, #8]
    20d6:	9903      	ldr	r1, [sp, #12]
    20d8:	47a8      	blx	r5
    20da:	0002      	movs	r2, r0
    20dc:	000b      	movs	r3, r1
    20de:	0030      	movs	r0, r6
    20e0:	0039      	movs	r1, r7
    20e2:	4e3f      	ldr	r6, [pc, #252]	; (21e0 <STACK_SIZE+0x1e0>)
    20e4:	47b0      	blx	r6
    20e6:	6c22      	ldr	r2, [r4, #64]	; 0x40
    20e8:	6c63      	ldr	r3, [r4, #68]	; 0x44
    20ea:	0006      	movs	r6, r0
    20ec:	000f      	movs	r7, r1
    20ee:	9804      	ldr	r0, [sp, #16]
    20f0:	9905      	ldr	r1, [sp, #20]
    20f2:	47a8      	blx	r5
    20f4:	4c3a      	ldr	r4, [pc, #232]	; (21e0 <STACK_SIZE+0x1e0>)
    20f6:	0002      	movs	r2, r0
    20f8:	000b      	movs	r3, r1
    20fa:	0030      	movs	r0, r6
    20fc:	0039      	movs	r1, r7
    20fe:	47a0      	blx	r4
    2100:	0003      	movs	r3, r0
    2102:	000c      	movs	r4, r1
    2104:	4a32      	ldr	r2, [pc, #200]	; (21d0 <STACK_SIZE+0x1d0>)
    2106:	9000      	str	r0, [sp, #0]
    2108:	9101      	str	r1, [sp, #4]
    210a:	6113      	str	r3, [r2, #16]
    210c:	6154      	str	r4, [r2, #20]

    /*
    Update state
    */
    altitude = estp[0] + kgain[0][0] * alt_inovation + kgain[0][1] * accel_inovation;
    210e:	4c35      	ldr	r4, [pc, #212]	; (21e4 <STACK_SIZE+0x1e4>)
    2110:	6822      	ldr	r2, [r4, #0]
    2112:	6863      	ldr	r3, [r4, #4]
    2114:	9806      	ldr	r0, [sp, #24]
    2116:	9907      	ldr	r1, [sp, #28]
    2118:	47a8      	blx	r5
    211a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    211c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    211e:	4e30      	ldr	r6, [pc, #192]	; (21e0 <STACK_SIZE+0x1e0>)
    2120:	47b0      	blx	r6
    2122:	68a2      	ldr	r2, [r4, #8]
    2124:	68e3      	ldr	r3, [r4, #12]
    2126:	0006      	movs	r6, r0
    2128:	000f      	movs	r7, r1
    212a:	9808      	ldr	r0, [sp, #32]
    212c:	9909      	ldr	r1, [sp, #36]	; 0x24
    212e:	47a8      	blx	r5
    2130:	0002      	movs	r2, r0
    2132:	000b      	movs	r3, r1
    2134:	0030      	movs	r0, r6
    2136:	0039      	movs	r1, r7
    2138:	4e29      	ldr	r6, [pc, #164]	; (21e0 <STACK_SIZE+0x1e0>)
    213a:	47b0      	blx	r6
    213c:	4b22      	ldr	r3, [pc, #136]	; (21c8 <STACK_SIZE+0x1c8>)
    213e:	6018      	str	r0, [r3, #0]
    2140:	6059      	str	r1, [r3, #4]
    velocity = estp[1] + kgain[1][0] * alt_inovation + kgain[1][1] * accel_inovation;
    2142:	6922      	ldr	r2, [r4, #16]
    2144:	6963      	ldr	r3, [r4, #20]
    2146:	9806      	ldr	r0, [sp, #24]
    2148:	9907      	ldr	r1, [sp, #28]
    214a:	47a8      	blx	r5
    214c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    214e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    2150:	47b0      	blx	r6
    2152:	69a2      	ldr	r2, [r4, #24]
    2154:	69e3      	ldr	r3, [r4, #28]
    2156:	0006      	movs	r6, r0
    2158:	000f      	movs	r7, r1
    215a:	9808      	ldr	r0, [sp, #32]
    215c:	9909      	ldr	r1, [sp, #36]	; 0x24
    215e:	47a8      	blx	r5
    2160:	0002      	movs	r2, r0
    2162:	000b      	movs	r3, r1
    2164:	0030      	movs	r0, r6
    2166:	0039      	movs	r1, r7
    2168:	4e1d      	ldr	r6, [pc, #116]	; (21e0 <STACK_SIZE+0x1e0>)
    216a:	47b0      	blx	r6
    216c:	4b19      	ldr	r3, [pc, #100]	; (21d4 <STACK_SIZE+0x1d4>)
    216e:	6018      	str	r0, [r3, #0]
    2170:	6059      	str	r1, [r3, #4]
    accel =    estp[2] + kgain[2][0] * alt_inovation + kgain[2][1] * accel_inovation;
    2172:	6a22      	ldr	r2, [r4, #32]
    2174:	6a63      	ldr	r3, [r4, #36]	; 0x24
    2176:	9806      	ldr	r0, [sp, #24]
    2178:	9907      	ldr	r1, [sp, #28]
    217a:	47a8      	blx	r5
    217c:	9a00      	ldr	r2, [sp, #0]
    217e:	9b01      	ldr	r3, [sp, #4]
    2180:	47b0      	blx	r6
    2182:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    2184:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    2186:	0006      	movs	r6, r0
    2188:	000f      	movs	r7, r1
    218a:	9808      	ldr	r0, [sp, #32]
    218c:	9909      	ldr	r1, [sp, #36]	; 0x24
    218e:	47a8      	blx	r5
    2190:	4c13      	ldr	r4, [pc, #76]	; (21e0 <STACK_SIZE+0x1e0>)
    2192:	0002      	movs	r2, r0
    2194:	000b      	movs	r3, r1
    2196:	0030      	movs	r0, r6
    2198:	0039      	movs	r1, r7
    219a:	47a0      	blx	r4
    219c:	4b0e      	ldr	r3, [pc, #56]	; (21d8 <STACK_SIZE+0x1d8>)
    219e:	6018      	str	r0, [r3, #0]
    21a0:	6059      	str	r1, [r3, #4]

}
    21a2:	b00f      	add	sp, #60	; 0x3c
    21a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    21a6:	46c0      	nop			; (mov r8, r8)
    21a8:	20000528 	.word	0x20000528
    21ac:	200007e0 	.word	0x200007e0
    21b0:	00006279 	.word	0x00006279
    21b4:	200004d8 	.word	0x200004d8
    21b8:	00005a31 	.word	0x00005a31
    21bc:	33daf8df 	.word	0x33daf8df
    21c0:	4040164b 	.word	0x4040164b
    21c4:	0000553d 	.word	0x0000553d
    21c8:	200006b0 	.word	0x200006b0
    21cc:	00003f75 	.word	0x00003f75
    21d0:	200006b8 	.word	0x200006b8
    21d4:	200006a8 	.word	0x200006a8
    21d8:	200006a0 	.word	0x200006a0
    21dc:	20000010 	.word	0x20000010
    21e0:	0000469d 	.word	0x0000469d
    21e4:	20000648 	.word	0x20000648

000021e8 <makePage>:
u8_t pageLocation;

bool pageReady;


void makePage(u8_t bytesToWrite, u8_t* data) {
    21e8:	b5f0      	push	{r4, r5, r6, r7, lr}


    u8_t location = pageLocation;
    21ea:	4a1f      	ldr	r2, [pc, #124]	; (2268 <makePage+0x80>)
    21ec:	7815      	ldrb	r5, [r2, #0]
    u8_t bytesWritten = 0;

    if ((location + bytesToWrite) > 0xFF) {
    21ee:	1943      	adds	r3, r0, r5
    21f0:	2bff      	cmp	r3, #255	; 0xff
    21f2:	dc03      	bgt.n	21fc <makePage+0x14>
    21f4:	2300      	movs	r3, #0
            pageLocation = dataByte + 1;
        }
        pageReady = true;

    } else {
        for (u16_t dataByte = 0; dataByte <= bytesToWrite; ++dataByte) {
    21f6:	b280      	uxth	r0, r0
            pageBuffer[(dataByte + location)] = data[dataByte];
    21f8:	4c1c      	ldr	r4, [pc, #112]	; (226c <makePage+0x84>)
    21fa:	e029      	b.n	2250 <makePage+0x68>
    21fc:	2300      	movs	r3, #0
    21fe:	4e1b      	ldr	r6, [pc, #108]	; (226c <makePage+0x84>)

    u8_t location = pageLocation;
    u8_t bytesWritten = 0;

    if ((location + bytesToWrite) > 0xFF) {
        for (u16_t dataByte = 0; (dataByte + location) <= 0xFF; ++dataByte) {
    2200:	195f      	adds	r7, r3, r5
    2202:	b2dc      	uxtb	r4, r3
    2204:	46b4      	mov	ip, r6
    2206:	2fff      	cmp	r7, #255	; 0xff
    2208:	dc04      	bgt.n	2214 <makePage+0x2c>
            pageBuffer[(dataByte + location)] = data[dataByte];
    220a:	5ccc      	ldrb	r4, [r1, r3]

    u8_t location = pageLocation;
    u8_t bytesWritten = 0;

    if ((location + bytesToWrite) > 0xFF) {
        for (u16_t dataByte = 0; (dataByte + location) <= 0xFF; ++dataByte) {
    220c:	3301      	adds	r3, #1
            pageBuffer[(dataByte + location)] = data[dataByte];
    220e:	55f4      	strb	r4, [r6, r7]

    u8_t location = pageLocation;
    u8_t bytesWritten = 0;

    if ((location + bytesToWrite) > 0xFF) {
        for (u16_t dataByte = 0; (dataByte + location) <= 0xFF; ++dataByte) {
    2210:	b29b      	uxth	r3, r3
    2212:	e7f5      	b.n	2200 <makePage+0x18>
            pageBuffer[(dataByte + location)] = data[dataByte];
            bytesWritten++;
        }
        pageLocation = 0x00;
    2214:	2300      	movs	r3, #0
        for(u16_t i = 0; i <= 0xFF; ++i) {
            pageToWrite[i] = pageBuffer[i];
    2216:	4f16      	ldr	r7, [pc, #88]	; (2270 <makePage+0x88>)
    if ((location + bytesToWrite) > 0xFF) {
        for (u16_t dataByte = 0; (dataByte + location) <= 0xFF; ++dataByte) {
            pageBuffer[(dataByte + location)] = data[dataByte];
            bytesWritten++;
        }
        pageLocation = 0x00;
    2218:	7013      	strb	r3, [r2, #0]
        for(u16_t i = 0; i <= 0xFF; ++i) {
            pageToWrite[i] = pageBuffer[i];
    221a:	4665      	mov	r5, ip
    221c:	18ed      	adds	r5, r5, r3
    221e:	782e      	ldrb	r6, [r5, #0]
    2220:	54fe      	strb	r6, [r7, r3]
            pageBuffer[i] = 0;
    2222:	2600      	movs	r6, #0
    2224:	702e      	strb	r6, [r5, #0]
        for (u16_t dataByte = 0; (dataByte + location) <= 0xFF; ++dataByte) {
            pageBuffer[(dataByte + location)] = data[dataByte];
            bytesWritten++;
        }
        pageLocation = 0x00;
        for(u16_t i = 0; i <= 0xFF; ++i) {
    2226:	2580      	movs	r5, #128	; 0x80
    2228:	3301      	adds	r3, #1
    222a:	006d      	lsls	r5, r5, #1
    222c:	42ab      	cmp	r3, r5
    222e:	d1f4      	bne.n	221a <makePage+0x32>
    2230:	2300      	movs	r3, #0
    2232:	1c5d      	adds	r5, r3, #1
            pageToWrite[i] = pageBuffer[i];
            pageBuffer[i] = 0;
        }
        for (u16_t dataByte = 0; bytesWritten < bytesToWrite; ++dataByte) {
    2234:	4284      	cmp	r4, r0
    2236:	d207      	bcs.n	2248 <makePage+0x60>
            pageBuffer[dataByte] = data[bytesWritten];
    2238:	4667      	mov	r7, ip
    223a:	5d0e      	ldrb	r6, [r1, r4]
            bytesWritten++;
    223c:	3401      	adds	r4, #1
        for(u16_t i = 0; i <= 0xFF; ++i) {
            pageToWrite[i] = pageBuffer[i];
            pageBuffer[i] = 0;
        }
        for (u16_t dataByte = 0; bytesWritten < bytesToWrite; ++dataByte) {
            pageBuffer[dataByte] = data[bytesWritten];
    223e:	54fe      	strb	r6, [r7, r3]
            bytesWritten++;
    2240:	b2e4      	uxtb	r4, r4
            pageLocation = dataByte + 1;
    2242:	7015      	strb	r5, [r2, #0]
    2244:	002b      	movs	r3, r5
    2246:	e7f4      	b.n	2232 <makePage+0x4a>
        }
        pageReady = true;
    2248:	2201      	movs	r2, #1
    224a:	4b0a      	ldr	r3, [pc, #40]	; (2274 <makePage+0x8c>)
    224c:	701a      	strb	r2, [r3, #0]
    224e:	e009      	b.n	2264 <makePage+0x7c>

    } else {
        for (u16_t dataByte = 0; dataByte <= bytesToWrite; ++dataByte) {
    2250:	4283      	cmp	r3, r0
    2252:	d807      	bhi.n	2264 <makePage+0x7c>
            pageBuffer[(dataByte + location)] = data[dataByte];
    2254:	5ccf      	ldrb	r7, [r1, r3]
    2256:	18e6      	adds	r6, r4, r3
    2258:	5577      	strb	r7, [r6, r5]
            bytesWritten++;
            pageLocation = location + dataByte;
    225a:	18ee      	adds	r6, r5, r3
            pageLocation = dataByte + 1;
        }
        pageReady = true;

    } else {
        for (u16_t dataByte = 0; dataByte <= bytesToWrite; ++dataByte) {
    225c:	3301      	adds	r3, #1
            pageBuffer[(dataByte + location)] = data[dataByte];
            bytesWritten++;
            pageLocation = location + dataByte;
    225e:	7016      	strb	r6, [r2, #0]
            pageLocation = dataByte + 1;
        }
        pageReady = true;

    } else {
        for (u16_t dataByte = 0; dataByte <= bytesToWrite; ++dataByte) {
    2260:	b29b      	uxth	r3, r3
    2262:	e7f5      	b.n	2250 <makePage+0x68>
            pageBuffer[(dataByte + location)] = data[dataByte];
            bytesWritten++;
            pageLocation = location + dataByte;
        }
    }
}
    2264:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2266:	46c0      	nop			; (mov r8, r8)
    2268:	200007dc 	.word	0x200007dc
    226c:	20000535 	.word	0x20000535
    2270:	200006d0 	.word	0x200006d0
    2274:	200007d0 	.word	0x200007d0

00002278 <logFlight>:


void logFlight() {
    2278:	b51f      	push	{r0, r1, r2, r3, r4, lr}

    u8_t bytesToSend = 16;
    u8_t dataToSend[16];

    dataToSend[0] = FLIGHT_LOG;
    227a:	2346      	movs	r3, #70	; 0x46
    227c:	466a      	mov	r2, sp
    227e:	7013      	strb	r3, [r2, #0]
    dataToSend[1] = 0;
    2280:	2300      	movs	r3, #0

    dataToSend[2] = offsets.offsetBufferTime >> 0;
    2282:	4669      	mov	r1, sp
    dataToSend[3] = offsets.offsetBufferTime >> 8;
    2284:	4668      	mov	r0, sp

    u8_t bytesToSend = 16;
    u8_t dataToSend[16];

    dataToSend[0] = FLIGHT_LOG;
    dataToSend[1] = 0;
    2286:	7053      	strb	r3, [r2, #1]

    dataToSend[2] = offsets.offsetBufferTime >> 0;
    2288:	4a10      	ldr	r2, [pc, #64]	; (22cc <logFlight+0x54>)
    228a:	6813      	ldr	r3, [r2, #0]
    228c:	708b      	strb	r3, [r1, #2]
    dataToSend[3] = offsets.offsetBufferTime >> 8;
    228e:	0a19      	lsrs	r1, r3, #8
    2290:	70c1      	strb	r1, [r0, #3]
    dataToSend[4] = offsets.offsetBufferTime >> 16;
    2292:	0c19      	lsrs	r1, r3, #16
    dataToSend[5] = offsets.offsetBufferTime >> 24;
    2294:	0e1b      	lsrs	r3, r3, #24
    2296:	7143      	strb	r3, [r0, #5]

    dataToSend[6] = offsets.groundOffset >> 0;
    2298:	6993      	ldr	r3, [r2, #24]
    dataToSend[0] = FLIGHT_LOG;
    dataToSend[1] = 0;

    dataToSend[2] = offsets.offsetBufferTime >> 0;
    dataToSend[3] = offsets.offsetBufferTime >> 8;
    dataToSend[4] = offsets.offsetBufferTime >> 16;
    229a:	7101      	strb	r1, [r0, #4]
    dataToSend[5] = offsets.offsetBufferTime >> 24;

    dataToSend[6] = offsets.groundOffset >> 0;
    dataToSend[7] = offsets.groundOffset >> 8;
    229c:	0a19      	lsrs	r1, r3, #8
    dataToSend[2] = offsets.offsetBufferTime >> 0;
    dataToSend[3] = offsets.offsetBufferTime >> 8;
    dataToSend[4] = offsets.offsetBufferTime >> 16;
    dataToSend[5] = offsets.offsetBufferTime >> 24;

    dataToSend[6] = offsets.groundOffset >> 0;
    229e:	7183      	strb	r3, [r0, #6]
    dataToSend[7] = offsets.groundOffset >> 8;
    22a0:	71c1      	strb	r1, [r0, #7]
    dataToSend[8] = offsets.groundOffset >> 16;
    22a2:	0c19      	lsrs	r1, r3, #16
    dataToSend[9] = offsets.groundOffset >> 24;
    22a4:	0e1b      	lsrs	r3, r3, #24
    22a6:	7243      	strb	r3, [r0, #9]

    dataToSend[10] = offsets.groundTemperature >> 0;
    22a8:	6a13      	ldr	r3, [r2, #32]
    dataToSend[4] = offsets.offsetBufferTime >> 16;
    dataToSend[5] = offsets.offsetBufferTime >> 24;

    dataToSend[6] = offsets.groundOffset >> 0;
    dataToSend[7] = offsets.groundOffset >> 8;
    dataToSend[8] = offsets.groundOffset >> 16;
    22aa:	7201      	strb	r1, [r0, #8]
    dataToSend[9] = offsets.groundOffset >> 24;

    dataToSend[10] = offsets.groundTemperature >> 0;
    dataToSend[11] = offsets.groundTemperature >> 8;
    22ac:	0a1a      	lsrs	r2, r3, #8
    dataToSend[6] = offsets.groundOffset >> 0;
    dataToSend[7] = offsets.groundOffset >> 8;
    dataToSend[8] = offsets.groundOffset >> 16;
    dataToSend[9] = offsets.groundOffset >> 24;

    dataToSend[10] = offsets.groundTemperature >> 0;
    22ae:	7283      	strb	r3, [r0, #10]
    dataToSend[11] = offsets.groundTemperature >> 8;
    22b0:	72c2      	strb	r2, [r0, #11]
    dataToSend[12] = offsets.groundTemperature >> 16;
    22b2:	0c1a      	lsrs	r2, r3, #16
    dataToSend[13] = offsets.groundTemperature >> 24;
    22b4:	0e1b      	lsrs	r3, r3, #24
    22b6:	7343      	strb	r3, [r0, #13]

    //dataToSend[14] = accel >> 0;
    dataToSend[15] = 0xfe;
    22b8:	23fe      	movs	r3, #254	; 0xfe
    dataToSend[8] = offsets.groundOffset >> 16;
    dataToSend[9] = offsets.groundOffset >> 24;

    dataToSend[10] = offsets.groundTemperature >> 0;
    dataToSend[11] = offsets.groundTemperature >> 8;
    dataToSend[12] = offsets.groundTemperature >> 16;
    22ba:	7302      	strb	r2, [r0, #12]
    dataToSend[13] = offsets.groundTemperature >> 24;

    //dataToSend[14] = accel >> 0;
    dataToSend[15] = 0xfe;
    22bc:	73c3      	strb	r3, [r0, #15]
    dataToSend[5] = offsets.offsetBufferTime >> 24;

    dataToSend[6] = offsets.groundOffset >> 0;
    dataToSend[7] = offsets.groundOffset >> 8;
    dataToSend[8] = offsets.groundOffset >> 16;
    dataToSend[9] = offsets.groundOffset >> 24;
    22be:	4669      	mov	r1, sp
    dataToSend[13] = offsets.groundTemperature >> 24;

    //dataToSend[14] = accel >> 0;
    dataToSend[15] = 0xfe;

    makePage(bytesToSend, dataToSend);
    22c0:	2010      	movs	r0, #16
    22c2:	4b03      	ldr	r3, [pc, #12]	; (22d0 <logFlight+0x58>)
    22c4:	4798      	blx	r3
}
    22c6:	b005      	add	sp, #20
    22c8:	bd00      	pop	{pc}
    22ca:	46c0      	nop			; (mov r8, r8)
    22cc:	200004d8 	.word	0x200004d8
    22d0:	000021e9 	.word	0x000021e9

000022d4 <logEvent>:

void logEvent(u8_t eventType) {
    22d4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

    u8_t bytesToSend = 12;
    u8_t dataToSend[12];

    dataToSend[0] = EVENT_LOG;
    22d6:	2345      	movs	r3, #69	; 0x45
    dataToSend[1] = eventType;
    dataToSend[2] = sample.sampleTick >> 0;
    22d8:	4d10      	ldr	r5, [pc, #64]	; (231c <logEvent+0x48>)
void logEvent(u8_t eventType) {

    u8_t bytesToSend = 12;
    u8_t dataToSend[12];

    dataToSend[0] = EVENT_LOG;
    22da:	ac01      	add	r4, sp, #4
    22dc:	7023      	strb	r3, [r4, #0]
    dataToSend[1] = eventType;
    dataToSend[2] = sample.sampleTick >> 0;
    22de:	686b      	ldr	r3, [r5, #4]
    dataToSend[3] = sample.sampleTick >> 8;
    dataToSend[4] = sample.sampleTick >> 16;
    dataToSend[5] = sample.sampleTick >> 24;

    dataToSend[6] = altitudeAGL() >> 0;
    22e0:	4e0f      	ldr	r6, [pc, #60]	; (2320 <logEvent+0x4c>)
    u8_t dataToSend[12];

    dataToSend[0] = EVENT_LOG;
    dataToSend[1] = eventType;
    dataToSend[2] = sample.sampleTick >> 0;
    dataToSend[3] = sample.sampleTick >> 8;
    22e2:	0a1a      	lsrs	r2, r3, #8
    u8_t bytesToSend = 12;
    u8_t dataToSend[12];

    dataToSend[0] = EVENT_LOG;
    dataToSend[1] = eventType;
    dataToSend[2] = sample.sampleTick >> 0;
    22e4:	70a3      	strb	r3, [r4, #2]
    dataToSend[3] = sample.sampleTick >> 8;
    22e6:	70e2      	strb	r2, [r4, #3]
    dataToSend[4] = sample.sampleTick >> 16;
    22e8:	0c1a      	lsrs	r2, r3, #16
    dataToSend[5] = sample.sampleTick >> 24;
    22ea:	0e1b      	lsrs	r3, r3, #24

    dataToSend[0] = EVENT_LOG;
    dataToSend[1] = eventType;
    dataToSend[2] = sample.sampleTick >> 0;
    dataToSend[3] = sample.sampleTick >> 8;
    dataToSend[4] = sample.sampleTick >> 16;
    22ec:	7122      	strb	r2, [r4, #4]
    dataToSend[5] = sample.sampleTick >> 24;
    22ee:	7163      	strb	r3, [r4, #5]

    u8_t bytesToSend = 12;
    u8_t dataToSend[12];

    dataToSend[0] = EVENT_LOG;
    dataToSend[1] = eventType;
    22f0:	7060      	strb	r0, [r4, #1]
    dataToSend[2] = sample.sampleTick >> 0;
    dataToSend[3] = sample.sampleTick >> 8;
    dataToSend[4] = sample.sampleTick >> 16;
    dataToSend[5] = sample.sampleTick >> 24;

    dataToSend[6] = altitudeAGL() >> 0;
    22f2:	47b0      	blx	r6
    22f4:	71a0      	strb	r0, [r4, #6]
    dataToSend[7] = altitudeAGL() >> 8;
    22f6:	47b0      	blx	r6
    22f8:	1200      	asrs	r0, r0, #8
    22fa:	71e0      	strb	r0, [r4, #7]
    dataToSend[8] = altitudeAGL() >> 16;
    22fc:	47b0      	blx	r6
    22fe:	1400      	asrs	r0, r0, #16
    2300:	7220      	strb	r0, [r4, #8]
    dataToSend[9] = altitudeAGL() >> 24;
    2302:	47b0      	blx	r6
    2304:	1600      	asrs	r0, r0, #24
    2306:	7260      	strb	r0, [r4, #9]

    dataToSend[10] = sample.voltage.batV >> 0;
    2308:	892b      	ldrh	r3, [r5, #8]
    dataToSend[11] = sample.voltage.batV >> 8;

    makePage(bytesToSend, dataToSend);
    230a:	0021      	movs	r1, r4
    dataToSend[6] = altitudeAGL() >> 0;
    dataToSend[7] = altitudeAGL() >> 8;
    dataToSend[8] = altitudeAGL() >> 16;
    dataToSend[9] = altitudeAGL() >> 24;

    dataToSend[10] = sample.voltage.batV >> 0;
    230c:	72a3      	strb	r3, [r4, #10]
    dataToSend[11] = sample.voltage.batV >> 8;
    230e:	0a1b      	lsrs	r3, r3, #8
    2310:	72e3      	strb	r3, [r4, #11]

    makePage(bytesToSend, dataToSend);
    2312:	200c      	movs	r0, #12
    2314:	4b03      	ldr	r3, [pc, #12]	; (2324 <logEvent+0x50>)
    2316:	4798      	blx	r3

}
    2318:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
    231a:	46c0      	nop			; (mov r8, r8)
    231c:	200007e0 	.word	0x200007e0
    2320:	00000acd 	.word	0x00000acd
    2324:	000021e9 	.word	0x000021e9

00002328 <logSensors>:

void logSensors() {

    writeLog = false;
    2328:	2200      	movs	r2, #0
    232a:	4b4c      	ldr	r3, [pc, #304]	; (245c <logSensors+0x134>)

    makePage(bytesToSend, dataToSend);

}

void logSensors() {
    232c:	b5f0      	push	{r4, r5, r6, r7, lr}

    writeLog = false;
    232e:	701a      	strb	r2, [r3, #0]

    u8_t bytesToSend = 24;
    u8_t dataToSend[24];

    dataToSend[0] = SENSOR_LOG;
    2330:	2353      	movs	r3, #83	; 0x53

    makePage(bytesToSend, dataToSend);

}

void logSensors() {
    2332:	b08b      	sub	sp, #44	; 0x2c
    writeLog = false;

    u8_t bytesToSend = 24;
    u8_t dataToSend[24];

    dataToSend[0] = SENSOR_LOG;
    2334:	ac04      	add	r4, sp, #16
    2336:	7023      	strb	r3, [r4, #0]

    dataToSend[1] = sample.sampleTick >> 0;
    2338:	4b49      	ldr	r3, [pc, #292]	; (2460 <logSensors+0x138>)
    dataToSend[2] = sample.sampleTick >> 8;
    dataToSend[3] = sample.sampleTick >> 16;
    dataToSend[4] = sample.sampleTick >> 24;

    dataToSend[5] = altitudeAGL() >> 0;
    233a:	4e4a      	ldr	r6, [pc, #296]	; (2464 <logSensors+0x13c>)
    u8_t bytesToSend = 24;
    u8_t dataToSend[24];

    dataToSend[0] = SENSOR_LOG;

    dataToSend[1] = sample.sampleTick >> 0;
    233c:	685b      	ldr	r3, [r3, #4]
    dataToSend[2] = sample.sampleTick >> 8;
    233e:	0a1a      	lsrs	r2, r3, #8
    u8_t bytesToSend = 24;
    u8_t dataToSend[24];

    dataToSend[0] = SENSOR_LOG;

    dataToSend[1] = sample.sampleTick >> 0;
    2340:	7063      	strb	r3, [r4, #1]
    dataToSend[2] = sample.sampleTick >> 8;
    2342:	70a2      	strb	r2, [r4, #2]
    dataToSend[3] = sample.sampleTick >> 16;
    2344:	0c1a      	lsrs	r2, r3, #16
    dataToSend[4] = sample.sampleTick >> 24;
    2346:	0e1b      	lsrs	r3, r3, #24

    dataToSend[0] = SENSOR_LOG;

    dataToSend[1] = sample.sampleTick >> 0;
    dataToSend[2] = sample.sampleTick >> 8;
    dataToSend[3] = sample.sampleTick >> 16;
    2348:	70e2      	strb	r2, [r4, #3]
    dataToSend[4] = sample.sampleTick >> 24;
    234a:	7123      	strb	r3, [r4, #4]

    dataToSend[5] = altitudeAGL() >> 0;
    234c:	47b0      	blx	r6
    234e:	7160      	strb	r0, [r4, #5]
    dataToSend[6] = altitudeAGL() >> 8;
    2350:	47b0      	blx	r6
    2352:	1200      	asrs	r0, r0, #8
    2354:	71a0      	strb	r0, [r4, #6]
    dataToSend[7] = altitudeAGL() >> 16;
    2356:	47b0      	blx	r6
    2358:	1400      	asrs	r0, r0, #16
    235a:	71e0      	strb	r0, [r4, #7]
    dataToSend[8] = altitudeAGL() >> 24;
    235c:	47b0      	blx	r6

    volatile float fractionalAccel = accel - (int16_t)(accel);
    235e:	4b42      	ldr	r3, [pc, #264]	; (2468 <logSensors+0x140>)
    dataToSend[4] = sample.sampleTick >> 24;

    dataToSend[5] = altitudeAGL() >> 0;
    dataToSend[6] = altitudeAGL() >> 8;
    dataToSend[7] = altitudeAGL() >> 16;
    dataToSend[8] = altitudeAGL() >> 24;
    2360:	1600      	asrs	r0, r0, #24

    volatile float fractionalAccel = accel - (int16_t)(accel);
    2362:	681e      	ldr	r6, [r3, #0]
    2364:	685f      	ldr	r7, [r3, #4]
    dataToSend[4] = sample.sampleTick >> 24;

    dataToSend[5] = altitudeAGL() >> 0;
    dataToSend[6] = altitudeAGL() >> 8;
    dataToSend[7] = altitudeAGL() >> 16;
    dataToSend[8] = altitudeAGL() >> 24;
    2366:	7220      	strb	r0, [r4, #8]

    volatile float fractionalAccel = accel - (int16_t)(accel);
    2368:	0039      	movs	r1, r7
    236a:	4b40      	ldr	r3, [pc, #256]	; (246c <logSensors+0x144>)
    236c:	0030      	movs	r0, r6
    236e:	4798      	blx	r3
    2370:	b203      	sxth	r3, r0
    2372:	001d      	movs	r5, r3
    2374:	0018      	movs	r0, r3
    2376:	4b3e      	ldr	r3, [pc, #248]	; (2470 <logSensors+0x148>)
    2378:	4798      	blx	r3
    237a:	0002      	movs	r2, r0
    237c:	000b      	movs	r3, r1
    237e:	0030      	movs	r0, r6
    2380:	0039      	movs	r1, r7
    2382:	4e3c      	ldr	r6, [pc, #240]	; (2474 <logSensors+0x14c>)
    2384:	47b0      	blx	r6
    2386:	4b3c      	ldr	r3, [pc, #240]	; (2478 <logSensors+0x150>)
    2388:	4798      	blx	r3
    238a:	9003      	str	r0, [sp, #12]
    volatile int16_t fractAccelPart = fractionalAccel * 1000;
    238c:	9803      	ldr	r0, [sp, #12]
    238e:	4b3b      	ldr	r3, [pc, #236]	; (247c <logSensors+0x154>)
    2390:	493b      	ldr	r1, [pc, #236]	; (2480 <logSensors+0x158>)
    2392:	4798      	blx	r3
    2394:	4f3b      	ldr	r7, [pc, #236]	; (2484 <logSensors+0x15c>)
    2396:	47b8      	blx	r7
    2398:	ab02      	add	r3, sp, #8
    239a:	b200      	sxth	r0, r0
    239c:	8058      	strh	r0, [r3, #2]

    dataToSend[9] = (int16_t)(accel) >> 0;
    dataToSend[10] = (int16_t)(accel) >> 8;
    dataToSend[11] = fractAccelPart >> 0;
    239e:	885a      	ldrh	r2, [r3, #2]
    dataToSend[6] = altitudeAGL() >> 8;
    dataToSend[7] = altitudeAGL() >> 16;
    dataToSend[8] = altitudeAGL() >> 24;

    volatile float fractionalAccel = accel - (int16_t)(accel);
    volatile int16_t fractAccelPart = fractionalAccel * 1000;
    23a0:	3302      	adds	r3, #2

    dataToSend[9] = (int16_t)(accel) >> 0;
    dataToSend[10] = (int16_t)(accel) >> 8;
    dataToSend[11] = fractAccelPart >> 0;
    dataToSend[12] = fractAccelPart >> 8;
    23a2:	881b      	ldrh	r3, [r3, #0]

    volatile float fractionalAccel = accel - (int16_t)(accel);
    volatile int16_t fractAccelPart = fractionalAccel * 1000;

    dataToSend[9] = (int16_t)(accel) >> 0;
    dataToSend[10] = (int16_t)(accel) >> 8;
    23a4:	1228      	asrs	r0, r5, #8
    dataToSend[11] = fractAccelPart >> 0;
    dataToSend[12] = fractAccelPart >> 8;
    23a6:	0a1b      	lsrs	r3, r3, #8
    23a8:	7323      	strb	r3, [r4, #12]


    float fractionalVelocity = velocity - (int16_t)(velocity);
    23aa:	4b37      	ldr	r3, [pc, #220]	; (2488 <logSensors+0x160>)
    dataToSend[8] = altitudeAGL() >> 24;

    volatile float fractionalAccel = accel - (int16_t)(accel);
    volatile int16_t fractAccelPart = fractionalAccel * 1000;

    dataToSend[9] = (int16_t)(accel) >> 0;
    23ac:	7265      	strb	r5, [r4, #9]
    dataToSend[10] = (int16_t)(accel) >> 8;
    23ae:	72a0      	strb	r0, [r4, #10]
    dataToSend[11] = fractAccelPart >> 0;
    23b0:	72e2      	strb	r2, [r4, #11]
    dataToSend[12] = fractAccelPart >> 8;


    float fractionalVelocity = velocity - (int16_t)(velocity);
    23b2:	681a      	ldr	r2, [r3, #0]
    23b4:	685b      	ldr	r3, [r3, #4]
    23b6:	9200      	str	r2, [sp, #0]
    23b8:	9301      	str	r3, [sp, #4]
    23ba:	0010      	movs	r0, r2
    23bc:	0019      	movs	r1, r3
    23be:	4b2b      	ldr	r3, [pc, #172]	; (246c <logSensors+0x144>)
    23c0:	4798      	blx	r3
    23c2:	b206      	sxth	r6, r0
    int16_t fractVelocityPart = fractionalVelocity * 1000;
    23c4:	4b2a      	ldr	r3, [pc, #168]	; (2470 <logSensors+0x148>)
    23c6:	0030      	movs	r0, r6
    23c8:	4798      	blx	r3
    23ca:	4d2a      	ldr	r5, [pc, #168]	; (2474 <logSensors+0x14c>)
    23cc:	0002      	movs	r2, r0
    23ce:	000b      	movs	r3, r1
    23d0:	9800      	ldr	r0, [sp, #0]
    23d2:	9901      	ldr	r1, [sp, #4]
    23d4:	47a8      	blx	r5
    23d6:	4b28      	ldr	r3, [pc, #160]	; (2478 <logSensors+0x150>)
    23d8:	4798      	blx	r3
    23da:	4b28      	ldr	r3, [pc, #160]	; (247c <logSensors+0x154>)
    23dc:	4928      	ldr	r1, [pc, #160]	; (2480 <logSensors+0x158>)
    23de:	4798      	blx	r3
    23e0:	47b8      	blx	r7

    dataToSend[13] = (int16_t)(velocity) >> 0;
    23e2:	7366      	strb	r6, [r4, #13]
    dataToSend[11] = fractAccelPart >> 0;
    dataToSend[12] = fractAccelPart >> 8;


    float fractionalVelocity = velocity - (int16_t)(velocity);
    int16_t fractVelocityPart = fractionalVelocity * 1000;
    23e4:	b203      	sxth	r3, r0

    dataToSend[13] = (int16_t)(velocity) >> 0;
    dataToSend[14] = (int16_t)(velocity) >> 8;
    23e6:	1236      	asrs	r6, r6, #8
    23e8:	73a6      	strb	r6, [r4, #14]
    dataToSend[15] = fractVelocityPart >> 0;
    23ea:	73e3      	strb	r3, [r4, #15]
    dataToSend[16] = fractVelocityPart >> 8;
    23ec:	121b      	asrs	r3, r3, #8
    23ee:	7423      	strb	r3, [r4, #16]

//     if ( ((fractVelocityPart < 0) & ((int16_t)(velocity) > 0)) | ((fractVelocityPart > 0) & ((int16_t)(velocity) < 0)) ) {
//         beep(200);
//     }

    dataToSend[17] = (u32_t)sample.altitudefeet >> 0;
    23f0:	4b1b      	ldr	r3, [pc, #108]	; (2460 <logSensors+0x138>)
    23f2:	6c18      	ldr	r0, [r3, #64]	; 0x40
    23f4:	6c59      	ldr	r1, [r3, #68]	; 0x44
    23f6:	4b25      	ldr	r3, [pc, #148]	; (248c <logSensors+0x164>)
    23f8:	4798      	blx	r3
    dataToSend[18] = (u32_t)sample.altitudefeet >> 8;
    23fa:	0a03      	lsrs	r3, r0, #8
    23fc:	74a3      	strb	r3, [r4, #18]
    dataToSend[19] = (u32_t)sample.altitudefeet >> 16;
    23fe:	0c03      	lsrs	r3, r0, #16
    2400:	74e3      	strb	r3, [r4, #19]
    dataToSend[20] = (u32_t)sample.altitudefeet >> 24;

    float fractionalAccelraw = sample.accelZ - (int16_t)(sample.accelZ);
    2402:	4b17      	ldr	r3, [pc, #92]	; (2460 <logSensors+0x138>)

//     if ( ((fractVelocityPart < 0) & ((int16_t)(velocity) > 0)) | ((fractVelocityPart > 0) & ((int16_t)(velocity) < 0)) ) {
//         beep(200);
//     }

    dataToSend[17] = (u32_t)sample.altitudefeet >> 0;
    2404:	7460      	strb	r0, [r4, #17]
    dataToSend[18] = (u32_t)sample.altitudefeet >> 8;
    dataToSend[19] = (u32_t)sample.altitudefeet >> 16;
    dataToSend[20] = (u32_t)sample.altitudefeet >> 24;

    float fractionalAccelraw = sample.accelZ - (int16_t)(sample.accelZ);
    2406:	6a9d      	ldr	r5, [r3, #40]	; 0x28
//     }

    dataToSend[17] = (u32_t)sample.altitudefeet >> 0;
    dataToSend[18] = (u32_t)sample.altitudefeet >> 8;
    dataToSend[19] = (u32_t)sample.altitudefeet >> 16;
    dataToSend[20] = (u32_t)sample.altitudefeet >> 24;
    2408:	0e00      	lsrs	r0, r0, #24
    240a:	7520      	strb	r0, [r4, #20]

    float fractionalAccelraw = sample.accelZ - (int16_t)(sample.accelZ);
    240c:	1c28      	adds	r0, r5, #0
    240e:	47b8      	blx	r7
    2410:	b200      	sxth	r0, r0
    u8_t fractAccelRawPart = fractionalAccelraw;

    dataToSend[21] = (int16_t)(sample.accelZ) >> 0;
    dataToSend[22] = (int16_t)(sample.accelZ) >> 8;
    2412:	1203      	asrs	r3, r0, #8
    2414:	75a3      	strb	r3, [r4, #22]
    dataToSend[20] = (u32_t)sample.altitudefeet >> 24;

    float fractionalAccelraw = sample.accelZ - (int16_t)(sample.accelZ);
    u8_t fractAccelRawPart = fractionalAccelraw;

    dataToSend[21] = (int16_t)(sample.accelZ) >> 0;
    2416:	7560      	strb	r0, [r4, #21]
    dataToSend[22] = (int16_t)(sample.accelZ) >> 8;
    dataToSend[23] = fractAccelRawPart;
    2418:	4b1d      	ldr	r3, [pc, #116]	; (2490 <logSensors+0x168>)
    241a:	4798      	blx	r3
    241c:	4b1d      	ldr	r3, [pc, #116]	; (2494 <logSensors+0x16c>)
    241e:	1c01      	adds	r1, r0, #0
    2420:	1c28      	adds	r0, r5, #0
    2422:	4798      	blx	r3
    2424:	4b1c      	ldr	r3, [pc, #112]	; (2498 <logSensors+0x170>)
    2426:	4798      	blx	r3
    //dataToSend[21] = my_altimeter->myAnalogAccelerometer.analogRaw >> 0;
    //dataToSend[22] = my_altimeter->myAnalogAccelerometer.analogRaw >> 8;



    makePage(bytesToSend, dataToSend);
    2428:	4b1c      	ldr	r3, [pc, #112]	; (249c <logSensors+0x174>)
    float fractionalAccelraw = sample.accelZ - (int16_t)(sample.accelZ);
    u8_t fractAccelRawPart = fractionalAccelraw;

    dataToSend[21] = (int16_t)(sample.accelZ) >> 0;
    dataToSend[22] = (int16_t)(sample.accelZ) >> 8;
    dataToSend[23] = fractAccelRawPart;
    242a:	75e0      	strb	r0, [r4, #23]
    //dataToSend[21] = my_altimeter->myAnalogAccelerometer.analogRaw >> 0;
    //dataToSend[22] = my_altimeter->myAnalogAccelerometer.analogRaw >> 8;



    makePage(bytesToSend, dataToSend);
    242c:	0021      	movs	r1, r4
    242e:	2018      	movs	r0, #24
    2430:	4798      	blx	r3

    if (pageReady) {
    2432:	4b1b      	ldr	r3, [pc, #108]	; (24a0 <logSensors+0x178>)
    2434:	781a      	ldrb	r2, [r3, #0]
    2436:	2a00      	cmp	r2, #0
    2438:	d00e      	beq.n	2458 <logSensors+0x130>
        pageReady = false;
    243a:	2200      	movs	r2, #0
    243c:	701a      	strb	r2, [r3, #0]
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
}


inline static void pinToggle(Pin p) {
    PORT->Group[p.group].OUTTGL.reg = (1<<p.pin);
    243e:	2280      	movs	r2, #128	; 0x80
    2440:	4b18      	ldr	r3, [pc, #96]	; (24a4 <logSensors+0x17c>)
        pinToggle(LedPin);
        u8_t bytesWritten = AT25SEWritePage(currentAddress,pageToWrite);
    2442:	4c19      	ldr	r4, [pc, #100]	; (24a8 <logSensors+0x180>)
    2444:	0352      	lsls	r2, r2, #13
    2446:	61da      	str	r2, [r3, #28]
    2448:	4918      	ldr	r1, [pc, #96]	; (24ac <logSensors+0x184>)
    244a:	4b19      	ldr	r3, [pc, #100]	; (24b0 <logSensors+0x188>)
    244c:	6820      	ldr	r0, [r4, #0]
    244e:	4798      	blx	r3
        currentAddress = (currentAddress + 0x100);
    2450:	6823      	ldr	r3, [r4, #0]
    2452:	3301      	adds	r3, #1
    2454:	33ff      	adds	r3, #255	; 0xff
    2456:	6023      	str	r3, [r4, #0]
    }
}
    2458:	b00b      	add	sp, #44	; 0x2c
    245a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    245c:	20000522 	.word	0x20000522
    2460:	200007e0 	.word	0x200007e0
    2464:	00000acd 	.word	0x00000acd
    2468:	200006a0 	.word	0x200006a0
    246c:	00006119 	.word	0x00006119
    2470:	00006185 	.word	0x00006185
    2474:	00005a31 	.word	0x00005a31
    2478:	00006321 	.word	0x00006321
    247c:	00004095 	.word	0x00004095
    2480:	447a0000 	.word	0x447a0000
    2484:	000045c9 	.word	0x000045c9
    2488:	200006a8 	.word	0x200006a8
    248c:	00004059 	.word	0x00004059
    2490:	0000460d 	.word	0x0000460d
    2494:	000042bd 	.word	0x000042bd
    2498:	00004029 	.word	0x00004029
    249c:	000021e9 	.word	0x000021e9
    24a0:	200007d0 	.word	0x200007d0
    24a4:	41004400 	.word	0x41004400
    24a8:	200007d4 	.word	0x200007d4
    24ac:	200006d0 	.word	0x200006d0
    24b0:	0000029d 	.word	0x0000029d

000024b4 <getFlightStartAddress>:

    u8_t addressToCheck[3];

    u16_t flightAddressLoc = FLIGHTZEROSTART + (flightToFind * 0x06);

    AT25SEreadSample(flightAddressLoc, 0x03, addressToCheck);
    24b4:	2306      	movs	r3, #6
    }
}



u32_t getFlightStartAddress(u8_t flightToFind) {
    24b6:	b513      	push	{r0, r1, r4, lr}

    u8_t addressToCheck[3];

    u16_t flightAddressLoc = FLIGHTZEROSTART + (flightToFind * 0x06);

    AT25SEreadSample(flightAddressLoc, 0x03, addressToCheck);
    24b8:	4358      	muls	r0, r3
    24ba:	ac01      	add	r4, sp, #4
    24bc:	3001      	adds	r0, #1
    24be:	30ff      	adds	r0, #255	; 0xff
    24c0:	0022      	movs	r2, r4
    24c2:	2103      	movs	r1, #3
    24c4:	4b04      	ldr	r3, [pc, #16]	; (24d8 <getFlightStartAddress+0x24>)
    24c6:	4798      	blx	r3

    u32_t flightStartAddress = addressToCheck[0] << 0 | addressToCheck[1] << 8 | addressToCheck[2] << 16;
    24c8:	7860      	ldrb	r0, [r4, #1]
    24ca:	78a3      	ldrb	r3, [r4, #2]
    24cc:	0200      	lsls	r0, r0, #8
    24ce:	041b      	lsls	r3, r3, #16
    24d0:	4318      	orrs	r0, r3
    24d2:	7823      	ldrb	r3, [r4, #0]
    24d4:	4318      	orrs	r0, r3

    return flightStartAddress;
}
    24d6:	bd16      	pop	{r1, r2, r4, pc}
    24d8:	000002f9 	.word	0x000002f9

000024dc <FindFlightEndingAddress>:

    u8_t addressToCheck[3];

    u16_t flightAddressLoc = FLIGHTZEROEND + (findThisFlightsEnd * 0x06);

    AT25SEreadSample(flightAddressLoc, 0x03, addressToCheck);
    24dc:	2306      	movs	r3, #6
    u32_t flightStartAddress = addressToCheck[0] << 0 | addressToCheck[1] << 8 | addressToCheck[2] << 16;

    return flightStartAddress;
}

u32_t FindFlightEndingAddress(u8_t findThisFlightsEnd) {
    24de:	b513      	push	{r0, r1, r4, lr}

    u8_t addressToCheck[3];

    u16_t flightAddressLoc = FLIGHTZEROEND + (findThisFlightsEnd * 0x06);

    AT25SEreadSample(flightAddressLoc, 0x03, addressToCheck);
    24e0:	4358      	muls	r0, r3
    24e2:	ac01      	add	r4, sp, #4
    24e4:	3004      	adds	r0, #4
    24e6:	30ff      	adds	r0, #255	; 0xff
    24e8:	0022      	movs	r2, r4
    24ea:	2103      	movs	r1, #3
    24ec:	4b04      	ldr	r3, [pc, #16]	; (2500 <FindFlightEndingAddress+0x24>)
    24ee:	4798      	blx	r3

    u32_t flightEndAddress = addressToCheck[0] << 0 | addressToCheck[1] << 8 | addressToCheck[2] << 16;
    24f0:	7860      	ldrb	r0, [r4, #1]
    24f2:	78a3      	ldrb	r3, [r4, #2]
    24f4:	0200      	lsls	r0, r0, #8
    24f6:	041b      	lsls	r3, r3, #16
    24f8:	4318      	orrs	r0, r3
    24fa:	7823      	ldrb	r3, [r4, #0]
    24fc:	4318      	orrs	r0, r3

    return flightEndAddress;
}
    24fe:	bd16      	pop	{r1, r2, r4, pc}
    2500:	000002f9 	.word	0x000002f9

00002504 <isFlightLogged>:

bool isFlightLogged(u8_t flightNumbToCheck) {
    2504:	b510      	push	{r4, lr}

    u32_t possibleStart = getFlightStartAddress(flightNumbToCheck);
    2506:	4b04      	ldr	r3, [pc, #16]	; (2518 <isFlightLogged+0x14>)
    2508:	4798      	blx	r3
    250a:	4b04      	ldr	r3, [pc, #16]	; (251c <isFlightLogged+0x18>)
    if (possibleStart == 0xFFFFFF) {
        return false;
    } else {
        return true;
    }
}
    250c:	18c0      	adds	r0, r0, r3
    250e:	1e43      	subs	r3, r0, #1
    2510:	4198      	sbcs	r0, r3
    2512:	b2c0      	uxtb	r0, r0
    2514:	bd10      	pop	{r4, pc}
    2516:	46c0      	nop			; (mov r8, r8)
    2518:	000024b5 	.word	0x000024b5
    251c:	ff000001 	.word	0xff000001

00002520 <writeFlightEndAddress>:


void writeFlightEndAddress() {
    2520:	b507      	push	{r0, r1, r2, lr}
    u32_t endingAddress = currentAddress;

    u8_t address[3] = {endingAddress >> 0, endingAddress >> 8, endingAddress >> 16};

    u16_t flightAddressLoc = FLIGHTZEROEND + (flightNumb * 0x06);
    AT25SFWriteBytes(flightAddressLoc, 3, address);
    2522:	2006      	movs	r0, #6
}


void writeFlightEndAddress() {

    u32_t endingAddress = currentAddress;
    2524:	4b09      	ldr	r3, [pc, #36]	; (254c <writeFlightEndAddress+0x2c>)

    u8_t address[3] = {endingAddress >> 0, endingAddress >> 8, endingAddress >> 16};
    2526:	aa01      	add	r2, sp, #4
}


void writeFlightEndAddress() {

    u32_t endingAddress = currentAddress;
    2528:	681b      	ldr	r3, [r3, #0]

    u8_t address[3] = {endingAddress >> 0, endingAddress >> 8, endingAddress >> 16};
    252a:	7013      	strb	r3, [r2, #0]
    252c:	0a19      	lsrs	r1, r3, #8
    252e:	0c1b      	lsrs	r3, r3, #16
    2530:	7093      	strb	r3, [r2, #2]

    u16_t flightAddressLoc = FLIGHTZEROEND + (flightNumb * 0x06);
    2532:	4b07      	ldr	r3, [pc, #28]	; (2550 <writeFlightEndAddress+0x30>)

void writeFlightEndAddress() {

    u32_t endingAddress = currentAddress;

    u8_t address[3] = {endingAddress >> 0, endingAddress >> 8, endingAddress >> 16};
    2534:	7051      	strb	r1, [r2, #1]

    u16_t flightAddressLoc = FLIGHTZEROEND + (flightNumb * 0x06);
    AT25SFWriteBytes(flightAddressLoc, 3, address);
    2536:	781b      	ldrb	r3, [r3, #0]
    2538:	2103      	movs	r1, #3
    253a:	4358      	muls	r0, r3
    253c:	3004      	adds	r0, #4
    253e:	30ff      	adds	r0, #255	; 0xff
    2540:	4b04      	ldr	r3, [pc, #16]	; (2554 <writeFlightEndAddress+0x34>)
    2542:	4798      	blx	r3
    delay_ms(10);
    2544:	200a      	movs	r0, #10
    2546:	4b04      	ldr	r3, [pc, #16]	; (2558 <writeFlightEndAddress+0x38>)
    2548:	4798      	blx	r3

}
    254a:	bd07      	pop	{r0, r1, r2, pc}
    254c:	200007d4 	.word	0x200007d4
    2550:	20000523 	.word	0x20000523
    2554:	00000241 	.word	0x00000241
    2558:	00000fc9 	.word	0x00000fc9

0000255c <findNewFlightStart>:




void findNewFlightStart() {
    255c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

    for (u8_t flightNumbToCheck = 0; flightNumbToCheck < 20; ++flightNumbToCheck) {
    255e:	2400      	movs	r4, #0

        if (!isFlightLogged(flightNumbToCheck)) {
    2560:	0020      	movs	r0, r4
    2562:	4b23      	ldr	r3, [pc, #140]	; (25f0 <findNewFlightStart+0x94>)
    2564:	4798      	blx	r3
    2566:	2800      	cmp	r0, #0
    2568:	d13d      	bne.n	25e6 <findNewFlightStart+0x8a>
    256a:	4f22      	ldr	r7, [pc, #136]	; (25f4 <findNewFlightStart+0x98>)
    256c:	ad01      	add	r5, sp, #4

            if (flightNumbToCheck > 0) {
    256e:	2c00      	cmp	r4, #0
    2570:	d016      	beq.n	25a0 <findNewFlightStart+0x44>

                u32_t startAddress = FindFlightEndingAddress(flightNumbToCheck - 1);
    2572:	1e60      	subs	r0, r4, #1
    2574:	4b20      	ldr	r3, [pc, #128]	; (25f8 <findNewFlightStart+0x9c>)
    2576:	b2c0      	uxtb	r0, r0
    2578:	4798      	blx	r3
                delay_ms(5);
    257a:	4b20      	ldr	r3, [pc, #128]	; (25fc <findNewFlightStart+0xa0>)

        if (!isFlightLogged(flightNumbToCheck)) {

            if (flightNumbToCheck > 0) {

                u32_t startAddress = FindFlightEndingAddress(flightNumbToCheck - 1);
    257c:	0006      	movs	r6, r0
                delay_ms(5);
    257e:	2005      	movs	r0, #5
    2580:	4798      	blx	r3
                currentAddress = startAddress;

                u8_t address[3] = {startAddress >> 0, startAddress >> 8, startAddress >> 16};

                u16_t flightAddressLoc = FLIGHTZEROSTART + (flightNumbToCheck * 0x06);
                AT25SFWriteBytes(flightAddressLoc, 3, address);
    2582:	2006      	movs	r0, #6
    2584:	4360      	muls	r0, r4
                u32_t startAddress = FindFlightEndingAddress(flightNumbToCheck - 1);
                delay_ms(5);

                currentAddress = startAddress;

                u8_t address[3] = {startAddress >> 0, startAddress >> 8, startAddress >> 16};
    2586:	0a33      	lsrs	r3, r6, #8

                u16_t flightAddressLoc = FLIGHTZEROSTART + (flightNumbToCheck * 0x06);
                AT25SFWriteBytes(flightAddressLoc, 3, address);
    2588:	3001      	adds	r0, #1
            if (flightNumbToCheck > 0) {

                u32_t startAddress = FindFlightEndingAddress(flightNumbToCheck - 1);
                delay_ms(5);

                currentAddress = startAddress;
    258a:	603e      	str	r6, [r7, #0]

                u8_t address[3] = {startAddress >> 0, startAddress >> 8, startAddress >> 16};
    258c:	702e      	strb	r6, [r5, #0]
    258e:	706b      	strb	r3, [r5, #1]
    2590:	0c36      	lsrs	r6, r6, #16

                u16_t flightAddressLoc = FLIGHTZEROSTART + (flightNumbToCheck * 0x06);
                AT25SFWriteBytes(flightAddressLoc, 3, address);
    2592:	30ff      	adds	r0, #255	; 0xff
    2594:	002a      	movs	r2, r5
    2596:	2103      	movs	r1, #3
    2598:	4b19      	ldr	r3, [pc, #100]	; (2600 <findNewFlightStart+0xa4>)
                u32_t startAddress = FindFlightEndingAddress(flightNumbToCheck - 1);
                delay_ms(5);

                currentAddress = startAddress;

                u8_t address[3] = {startAddress >> 0, startAddress >> 8, startAddress >> 16};
    259a:	70ae      	strb	r6, [r5, #2]

                u16_t flightAddressLoc = FLIGHTZEROSTART + (flightNumbToCheck * 0x06);
                AT25SFWriteBytes(flightAddressLoc, 3, address);
    259c:	4798      	blx	r3
    259e:	e010      	b.n	25c2 <findNewFlightStart+0x66>

                // for flight 0, starting address is always 0x00100 (beginning of second 4k block)
            } else {
                u8_t address[3] = {0x00,0x10,0x00};
    25a0:	2310      	movs	r3, #16
                AT25SFWriteBytes(FLIGHTZEROSTART, 3, address);
    25a2:	2080      	movs	r0, #128	; 0x80
                u16_t flightAddressLoc = FLIGHTZEROSTART + (flightNumbToCheck * 0x06);
                AT25SFWriteBytes(flightAddressLoc, 3, address);

                // for flight 0, starting address is always 0x00100 (beginning of second 4k block)
            } else {
                u8_t address[3] = {0x00,0x10,0x00};
    25a4:	706b      	strb	r3, [r5, #1]
                AT25SFWriteBytes(FLIGHTZEROSTART, 3, address);
    25a6:	0040      	lsls	r0, r0, #1
    25a8:	4b15      	ldr	r3, [pc, #84]	; (2600 <findNewFlightStart+0xa4>)
    25aa:	002a      	movs	r2, r5
    25ac:	2103      	movs	r1, #3
                u16_t flightAddressLoc = FLIGHTZEROSTART + (flightNumbToCheck * 0x06);
                AT25SFWriteBytes(flightAddressLoc, 3, address);

                // for flight 0, starting address is always 0x00100 (beginning of second 4k block)
            } else {
                u8_t address[3] = {0x00,0x10,0x00};
    25ae:	702c      	strb	r4, [r5, #0]
    25b0:	70ac      	strb	r4, [r5, #2]
                AT25SFWriteBytes(FLIGHTZEROSTART, 3, address);
    25b2:	4798      	blx	r3
                currentAddress = 0x001000;
    25b4:	2380      	movs	r3, #128	; 0x80
                beep(1000);
    25b6:	20fa      	movs	r0, #250	; 0xfa

                // for flight 0, starting address is always 0x00100 (beginning of second 4k block)
            } else {
                u8_t address[3] = {0x00,0x10,0x00};
                AT25SFWriteBytes(FLIGHTZEROSTART, 3, address);
                currentAddress = 0x001000;
    25b8:	015b      	lsls	r3, r3, #5
    25ba:	603b      	str	r3, [r7, #0]
                beep(1000);
    25bc:	0080      	lsls	r0, r0, #2
    25be:	4b11      	ldr	r3, [pc, #68]	; (2604 <findNewFlightStart+0xa8>)
    25c0:	4798      	blx	r3
            }
            flightNumb = flightNumbToCheck;
    25c2:	4b11      	ldr	r3, [pc, #68]	; (2608 <findNewFlightStart+0xac>)
    25c4:	701c      	strb	r4, [r3, #0]

            while (flightNumbToCheck > 0) {
                beep(500);
    25c6:	20fa      	movs	r0, #250	; 0xfa
    25c8:	0040      	lsls	r0, r0, #1
                currentAddress = 0x001000;
                beep(1000);
            }
            flightNumb = flightNumbToCheck;

            while (flightNumbToCheck > 0) {
    25ca:	2c00      	cmp	r4, #0
    25cc:	d008      	beq.n	25e0 <findNewFlightStart+0x84>
                beep(500);
    25ce:	4b0d      	ldr	r3, [pc, #52]	; (2604 <findNewFlightStart+0xa8>)
    25d0:	4798      	blx	r3
                delay_ms(500);
    25d2:	20fa      	movs	r0, #250	; 0xfa
    25d4:	4b09      	ldr	r3, [pc, #36]	; (25fc <findNewFlightStart+0xa0>)
    25d6:	0040      	lsls	r0, r0, #1
                --flightNumbToCheck;
    25d8:	3c01      	subs	r4, #1
            }
            flightNumb = flightNumbToCheck;

            while (flightNumbToCheck > 0) {
                beep(500);
                delay_ms(500);
    25da:	4798      	blx	r3
                --flightNumbToCheck;
    25dc:	b2e4      	uxtb	r4, r4
    25de:	e7f2      	b.n	25c6 <findNewFlightStart+0x6a>
            }
            delay_ms(500);
    25e0:	4b06      	ldr	r3, [pc, #24]	; (25fc <findNewFlightStart+0xa0>)
    25e2:	4798      	blx	r3
            break;
    25e4:	e003      	b.n	25ee <findNewFlightStart+0x92>



void findNewFlightStart() {

    for (u8_t flightNumbToCheck = 0; flightNumbToCheck < 20; ++flightNumbToCheck) {
    25e6:	3401      	adds	r4, #1
    25e8:	b2e4      	uxtb	r4, r4
    25ea:	2c14      	cmp	r4, #20
    25ec:	d1b8      	bne.n	2560 <findNewFlightStart+0x4>
            }
            delay_ms(500);
            break;
        }
    }
}
    25ee:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    25f0:	00002505 	.word	0x00002505
    25f4:	200007d4 	.word	0x200007d4
    25f8:	000024dd 	.word	0x000024dd
    25fc:	00000fc9 	.word	0x00000fc9
    2600:	00000241 	.word	0x00000241
    2604:	00000d39 	.word	0x00000d39
    2608:	20000523 	.word	0x20000523

0000260c <takeSample>:
#include <util.h>
#include <boardDefines.h>
#include <MS5803.h>

bool takeSample() {
    return SampleBool;
    260c:	4b01      	ldr	r3, [pc, #4]	; (2614 <takeSample+0x8>)
    260e:	7818      	ldrb	r0, [r3, #0]
}
    2610:	4770      	bx	lr
    2612:	46c0      	nop			; (mov r8, r8)
    2614:	20000534 	.word	0x20000534

00002618 <pullSample>:

void pullSample() {
    SampleBool = true;
    2618:	2201      	movs	r2, #1
    261a:	4b01      	ldr	r3, [pc, #4]	; (2620 <pullSample+0x8>)
    261c:	701a      	strb	r2, [r3, #0]
}
    261e:	4770      	bx	lr
    2620:	20000534 	.word	0x20000534

00002624 <sampleTick>:
    SampleBool = false;
}

sample_t sample;

void sampleTick() {
    2624:	b5f0      	push	{r4, r5, r6, r7, lr}
    SampleBool = false;
    2626:	2500      	movs	r5, #0
    2628:	4b9c      	ldr	r3, [pc, #624]	; (289c <sampleTick+0x278>)

    // take last samples time to discover Dt before setting new time
    u32_t lastTick = sample.sampleTick;
    262a:	4c9d      	ldr	r4, [pc, #628]	; (28a0 <sampleTick+0x27c>)
    SampleBool = false;
}

sample_t sample;

void sampleTick() {
    262c:	b087      	sub	sp, #28
    SampleBool = false;
    262e:	701d      	strb	r5, [r3, #0]

    // take last samples time to discover Dt before setting new time
    u32_t lastTick = sample.sampleTick;
    sample.sampleTick = millis() - startupTick;
    2630:	4b9c      	ldr	r3, [pc, #624]	; (28a4 <sampleTick+0x280>)

void sampleTick() {
    SampleBool = false;

    // take last samples time to discover Dt before setting new time
    u32_t lastTick = sample.sampleTick;
    2632:	6866      	ldr	r6, [r4, #4]
    sample.sampleTick = millis() - startupTick;
    2634:	4798      	blx	r3
    2636:	4b9c      	ldr	r3, [pc, #624]	; (28a8 <sampleTick+0x284>)
    2638:	681b      	ldr	r3, [r3, #0]
    263a:	1ac0      	subs	r0, r0, r3
    263c:	6060      	str	r0, [r4, #4]
    sample.tickDelta = sample.sampleTick - lastTick;
    263e:	1b80      	subs	r0, r0, r6

    //altimeter.flightTime = sample.sampleTick - offsets.StartupTick;

    sample.voltage.batV = adc_read(senseBatPin);
    2640:	4e9a      	ldr	r6, [pc, #616]	; (28ac <sampleTick+0x288>)
    SampleBool = false;

    // take last samples time to discover Dt before setting new time
    u32_t lastTick = sample.sampleTick;
    sample.sampleTick = millis() - startupTick;
    sample.tickDelta = sample.sampleTick - lastTick;
    2642:	8020      	strh	r0, [r4, #0]

    //altimeter.flightTime = sample.sampleTick - offsets.StartupTick;

    sample.voltage.batV = adc_read(senseBatPin);
    2644:	7873      	ldrb	r3, [r6, #1]
    2646:	7831      	ldrb	r1, [r6, #0]
    2648:	78b0      	ldrb	r0, [r6, #2]
    264a:	021b      	lsls	r3, r3, #8
    264c:	430b      	orrs	r3, r1
    264e:	0400      	lsls	r0, r0, #16
    2650:	001a      	movs	r2, r3
    2652:	0003      	movs	r3, r0
    2654:	78f0      	ldrb	r0, [r6, #3]
    2656:	4313      	orrs	r3, r2
    2658:	0600      	lsls	r0, r0, #24
    265a:	7931      	ldrb	r1, [r6, #4]
    265c:	4318      	orrs	r0, r3
    265e:	4b94      	ldr	r3, [pc, #592]	; (28b0 <sampleTick+0x28c>)
    2660:	4798      	blx	r3
    sample.voltage.batFloat = sample.voltage.batV * 0.0019;
    2662:	4b94      	ldr	r3, [pc, #592]	; (28b4 <sampleTick+0x290>)
    sample.sampleTick = millis() - startupTick;
    sample.tickDelta = sample.sampleTick - lastTick;

    //altimeter.flightTime = sample.sampleTick - offsets.StartupTick;

    sample.voltage.batV = adc_read(senseBatPin);
    2664:	8120      	strh	r0, [r4, #8]
    sample.voltage.batFloat = sample.voltage.batV * 0.0019;
    2666:	4798      	blx	r3
    2668:	4a93      	ldr	r2, [pc, #588]	; (28b8 <sampleTick+0x294>)
    266a:	4f94      	ldr	r7, [pc, #592]	; (28bc <sampleTick+0x298>)
    266c:	4b94      	ldr	r3, [pc, #592]	; (28c0 <sampleTick+0x29c>)
    266e:	47b8      	blx	r7
    2670:	4b94      	ldr	r3, [pc, #592]	; (28c4 <sampleTick+0x2a0>)
    2672:	4798      	blx	r3

    sample.voltage.senseA = adc_read(senseAPin);
    2674:	79b3      	ldrb	r3, [r6, #6]
    2676:	7971      	ldrb	r1, [r6, #5]
    sample.tickDelta = sample.sampleTick - lastTick;

    //altimeter.flightTime = sample.sampleTick - offsets.StartupTick;

    sample.voltage.batV = adc_read(senseBatPin);
    sample.voltage.batFloat = sample.voltage.batV * 0.0019;
    2678:	60e0      	str	r0, [r4, #12]

    sample.voltage.senseA = adc_read(senseAPin);
    267a:	79f0      	ldrb	r0, [r6, #7]
    267c:	021b      	lsls	r3, r3, #8
    267e:	430b      	orrs	r3, r1
    2680:	0400      	lsls	r0, r0, #16
    2682:	4303      	orrs	r3, r0
    2684:	7a30      	ldrb	r0, [r6, #8]
    2686:	7a71      	ldrb	r1, [r6, #9]
    2688:	0600      	lsls	r0, r0, #24
    268a:	4318      	orrs	r0, r3
    268c:	4b88      	ldr	r3, [pc, #544]	; (28b0 <sampleTick+0x28c>)
    268e:	4798      	blx	r3
    sample.voltage.senseB = adc_read(senseBPin);
    2690:	7af3      	ldrb	r3, [r6, #11]
    2692:	7ab1      	ldrb	r1, [r6, #10]
    //altimeter.flightTime = sample.sampleTick - offsets.StartupTick;

    sample.voltage.batV = adc_read(senseBatPin);
    sample.voltage.batFloat = sample.voltage.batV * 0.0019;

    sample.voltage.senseA = adc_read(senseAPin);
    2694:	8220      	strh	r0, [r4, #16]
    sample.voltage.senseB = adc_read(senseBPin);
    2696:	7b30      	ldrb	r0, [r6, #12]
    2698:	021b      	lsls	r3, r3, #8
    269a:	430b      	orrs	r3, r1
    269c:	0400      	lsls	r0, r0, #16
    269e:	4303      	orrs	r3, r0
    26a0:	7b70      	ldrb	r0, [r6, #13]
    26a2:	7bb1      	ldrb	r1, [r6, #14]
    26a4:	0600      	lsls	r0, r0, #24
    26a6:	4318      	orrs	r0, r3
    26a8:	4b81      	ldr	r3, [pc, #516]	; (28b0 <sampleTick+0x28c>)
    26aa:	4798      	blx	r3
    sample.voltage.senseC = adc_read(senseCPin);
    26ac:	7c33      	ldrb	r3, [r6, #16]
    26ae:	7bf1      	ldrb	r1, [r6, #15]

    sample.voltage.batV = adc_read(senseBatPin);
    sample.voltage.batFloat = sample.voltage.batV * 0.0019;

    sample.voltage.senseA = adc_read(senseAPin);
    sample.voltage.senseB = adc_read(senseBPin);
    26b0:	8260      	strh	r0, [r4, #18]
    sample.voltage.senseC = adc_read(senseCPin);
    26b2:	7c70      	ldrb	r0, [r6, #17]
    26b4:	021b      	lsls	r3, r3, #8
    26b6:	430b      	orrs	r3, r1
    26b8:	0400      	lsls	r0, r0, #16
    26ba:	4303      	orrs	r3, r0
    26bc:	7cb0      	ldrb	r0, [r6, #18]
    26be:	7cf1      	ldrb	r1, [r6, #19]
    26c0:	0600      	lsls	r0, r0, #24
    26c2:	4318      	orrs	r0, r3
    26c4:	4b7a      	ldr	r3, [pc, #488]	; (28b0 <sampleTick+0x28c>)
    26c6:	4798      	blx	r3
    sample.voltage.senseD = adc_read(senseDPin);
    26c8:	7d73      	ldrb	r3, [r6, #21]
    26ca:	7d31      	ldrb	r1, [r6, #20]
    sample.voltage.batV = adc_read(senseBatPin);
    sample.voltage.batFloat = sample.voltage.batV * 0.0019;

    sample.voltage.senseA = adc_read(senseAPin);
    sample.voltage.senseB = adc_read(senseBPin);
    sample.voltage.senseC = adc_read(senseCPin);
    26cc:	82a0      	strh	r0, [r4, #20]
    sample.voltage.senseD = adc_read(senseDPin);
    26ce:	7db0      	ldrb	r0, [r6, #22]
    26d0:	021b      	lsls	r3, r3, #8
    26d2:	430b      	orrs	r3, r1
    26d4:	0400      	lsls	r0, r0, #16
    26d6:	001a      	movs	r2, r3
    26d8:	0003      	movs	r3, r0
    26da:	7df0      	ldrb	r0, [r6, #23]
    26dc:	4313      	orrs	r3, r2
    26de:	0600      	lsls	r0, r0, #24
    26e0:	7e31      	ldrb	r1, [r6, #24]
    26e2:	4318      	orrs	r0, r3
    26e4:	4b72      	ldr	r3, [pc, #456]	; (28b0 <sampleTick+0x28c>)
    26e6:	4798      	blx	r3

    sample.analogRaw = adc_read(analogAccelPin);
    26e8:	7eb3      	ldrb	r3, [r6, #26]
    26ea:	7e71      	ldrb	r1, [r6, #25]
    sample.voltage.batFloat = sample.voltage.batV * 0.0019;

    sample.voltage.senseA = adc_read(senseAPin);
    sample.voltage.senseB = adc_read(senseBPin);
    sample.voltage.senseC = adc_read(senseCPin);
    sample.voltage.senseD = adc_read(senseDPin);
    26ec:	82e0      	strh	r0, [r4, #22]

    sample.analogRaw = adc_read(analogAccelPin);
    26ee:	7ef0      	ldrb	r0, [r6, #27]
    26f0:	021b      	lsls	r3, r3, #8
    26f2:	430b      	orrs	r3, r1
    26f4:	0400      	lsls	r0, r0, #16
    26f6:	4303      	orrs	r3, r0
    26f8:	7f30      	ldrb	r0, [r6, #28]
    26fa:	7f71      	ldrb	r1, [r6, #29]
    26fc:	0600      	lsls	r0, r0, #24
    26fe:	4318      	orrs	r0, r3
    2700:	4b6b      	ldr	r3, [pc, #428]	; (28b0 <sampleTick+0x28c>)
    2702:	4798      	blx	r3
    sample.analogAccel = (sample.analogRaw - 3900) * -0.0154;
    2704:	4b70      	ldr	r3, [pc, #448]	; (28c8 <sampleTick+0x2a4>)
    sample.voltage.senseA = adc_read(senseAPin);
    sample.voltage.senseB = adc_read(senseBPin);
    sample.voltage.senseC = adc_read(senseCPin);
    sample.voltage.senseD = adc_read(senseDPin);

    sample.analogRaw = adc_read(analogAccelPin);
    2706:	8320      	strh	r0, [r4, #24]
    sample.analogAccel = (sample.analogRaw - 3900) * -0.0154;
    2708:	18c0      	adds	r0, r0, r3
    270a:	4b6a      	ldr	r3, [pc, #424]	; (28b4 <sampleTick+0x290>)
    270c:	4798      	blx	r3
    270e:	4a6f      	ldr	r2, [pc, #444]	; (28cc <sampleTick+0x2a8>)
    2710:	4e6a      	ldr	r6, [pc, #424]	; (28bc <sampleTick+0x298>)
    2712:	4b6f      	ldr	r3, [pc, #444]	; (28d0 <sampleTick+0x2ac>)
    2714:	47b0      	blx	r6
    2716:	4b6b      	ldr	r3, [pc, #428]	; (28c4 <sampleTick+0x2a0>)
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    2718:	2680      	movs	r6, #128	; 0x80
    271a:	4798      	blx	r3
    271c:	4b6d      	ldr	r3, [pc, #436]	; (28d4 <sampleTick+0x2b0>)
    271e:	01f6      	lsls	r6, r6, #7
    2720:	61e0      	str	r0, [r4, #28]


    pinLow(cs_baro);
    spiDataOut(BARO_SPI, 0x50);
    2722:	2150      	movs	r1, #80	; 0x50
    2724:	615e      	str	r6, [r3, #20]
    2726:	2002      	movs	r0, #2
    2728:	4b6b      	ldr	r3, [pc, #428]	; (28d8 <sampleTick+0x2b4>)
    272a:	4798      	blx	r3
    pinHigh(cs_baro);
    delay_us(600);
    272c:	2096      	movs	r0, #150	; 0x96
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    272e:	4b69      	ldr	r3, [pc, #420]	; (28d4 <sampleTick+0x2b0>)
    2730:	0080      	lsls	r0, r0, #2
    2732:	619e      	str	r6, [r3, #24]
    2734:	4b69      	ldr	r3, [pc, #420]	; (28dc <sampleTick+0x2b8>)
    2736:	4798      	blx	r3
    uint32_t tempRaw = readMS5803AdcResults();
    2738:	4b69      	ldr	r3, [pc, #420]	; (28e0 <sampleTick+0x2bc>)
    273a:	4798      	blx	r3
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    273c:	4b65      	ldr	r3, [pc, #404]	; (28d4 <sampleTick+0x2b0>)
    273e:	9001      	str	r0, [sp, #4]

    pinLow(cs_baro);
    spiDataOut(BARO_SPI, 0x40);
    2740:	2140      	movs	r1, #64	; 0x40
    2742:	615e      	str	r6, [r3, #20]
    2744:	2002      	movs	r0, #2
    2746:	4b64      	ldr	r3, [pc, #400]	; (28d8 <sampleTick+0x2b4>)
    2748:	4798      	blx	r3
    274a:	2280      	movs	r2, #128	; 0x80
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    274c:	4b61      	ldr	r3, [pc, #388]	; (28d4 <sampleTick+0x2b0>)
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    274e:	00d2      	lsls	r2, r2, #3
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    2750:	619e      	str	r6, [r3, #24]
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    2752:	3394      	adds	r3, #148	; 0x94
    2754:	601a      	str	r2, [r3, #0]

    u8_t byteOne;
    u8_t byteTwo;
// Accel data
    pinLow(cs_accel);
    spiDataOut(ACCEL_SPI, BMI055_X_ACC_LSB | BMI055_READ_REG);
    2756:	2182      	movs	r1, #130	; 0x82
    2758:	4b5f      	ldr	r3, [pc, #380]	; (28d8 <sampleTick+0x2b4>)
    275a:	0028      	movs	r0, r5
    275c:	4798      	blx	r3
    byteOne = spiDataIn(ACCEL_SPI);
    275e:	4e61      	ldr	r6, [pc, #388]	; (28e4 <sampleTick+0x2c0>)
    2760:	0028      	movs	r0, r5
    2762:	47b0      	blx	r6
    2764:	0007      	movs	r7, r0
    byteTwo = spiDataIn(ACCEL_SPI);
    2766:	0028      	movs	r0, r5
    2768:	47b0      	blx	r6
    sample.altitudefeet = paToFeetNOAA(sample.pressureMbar);
}

int16_t twosComp(u8_t byteOne, u8_t byteTwo) {

    u16_t comp = byteOne | (byteTwo << 8);
    276a:	0200      	lsls	r0, r0, #8
    276c:	4307      	orrs	r7, r0
    276e:	b23b      	sxth	r3, r7
    pinLow(cs_accel);
    spiDataOut(ACCEL_SPI, BMI055_X_ACC_LSB | BMI055_READ_REG);
    byteOne = spiDataIn(ACCEL_SPI);
    byteTwo = spiDataIn(ACCEL_SPI);
    int16_t accelXint = twosComp(byteOne,byteTwo);
    byteOne = spiDataIn(ACCEL_SPI);
    2770:	0028      	movs	r0, r5
    sample.altitudefeet = paToFeetNOAA(sample.pressureMbar);
}

int16_t twosComp(u8_t byteOne, u8_t byteTwo) {

    u16_t comp = byteOne | (byteTwo << 8);
    2772:	9303      	str	r3, [sp, #12]
    pinLow(cs_accel);
    spiDataOut(ACCEL_SPI, BMI055_X_ACC_LSB | BMI055_READ_REG);
    byteOne = spiDataIn(ACCEL_SPI);
    byteTwo = spiDataIn(ACCEL_SPI);
    int16_t accelXint = twosComp(byteOne,byteTwo);
    byteOne = spiDataIn(ACCEL_SPI);
    2774:	47b0      	blx	r6
    2776:	0007      	movs	r7, r0
    byteTwo = spiDataIn(ACCEL_SPI);
    2778:	0028      	movs	r0, r5
    277a:	47b0      	blx	r6
    sample.altitudefeet = paToFeetNOAA(sample.pressureMbar);
}

int16_t twosComp(u8_t byteOne, u8_t byteTwo) {

    u16_t comp = byteOne | (byteTwo << 8);
    277c:	0200      	lsls	r0, r0, #8
    277e:	4307      	orrs	r7, r0
    2780:	b23b      	sxth	r3, r7
    byteTwo = spiDataIn(ACCEL_SPI);
    int16_t accelXint = twosComp(byteOne,byteTwo);
    byteOne = spiDataIn(ACCEL_SPI);
    byteTwo = spiDataIn(ACCEL_SPI);
    int16_t accelYint = twosComp(byteOne,byteTwo);
    byteOne = spiDataIn(ACCEL_SPI);
    2782:	0028      	movs	r0, r5
    sample.altitudefeet = paToFeetNOAA(sample.pressureMbar);
}

int16_t twosComp(u8_t byteOne, u8_t byteTwo) {

    u16_t comp = byteOne | (byteTwo << 8);
    2784:	9302      	str	r3, [sp, #8]
    byteTwo = spiDataIn(ACCEL_SPI);
    int16_t accelXint = twosComp(byteOne,byteTwo);
    byteOne = spiDataIn(ACCEL_SPI);
    byteTwo = spiDataIn(ACCEL_SPI);
    int16_t accelYint = twosComp(byteOne,byteTwo);
    byteOne = spiDataIn(ACCEL_SPI);
    2786:	47b0      	blx	r6
    2788:	9004      	str	r0, [sp, #16]
    byteTwo = spiDataIn(ACCEL_SPI);
    278a:	0028      	movs	r0, r5
    278c:	47b0      	blx	r6
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    278e:	2280      	movs	r2, #128	; 0x80
    2790:	4b50      	ldr	r3, [pc, #320]	; (28d4 <sampleTick+0x2b0>)
    2792:	00d2      	lsls	r2, r2, #3
    2794:	3398      	adds	r3, #152	; 0x98
    2796:	9005      	str	r0, [sp, #20]
    2798:	601a      	str	r2, [r3, #0]

    accelXint =  accelXint >> 4;
    accelYint =  accelYint >> 4;
    accelZint =  accelZint >> 4;

    sample.accelX =  accelXint * BMI055_ACCEL_16G_DIV;
    279a:	9b03      	ldr	r3, [sp, #12]
    279c:	1118      	asrs	r0, r3, #4
    279e:	4b45      	ldr	r3, [pc, #276]	; (28b4 <sampleTick+0x290>)
    27a0:	4798      	blx	r3
    27a2:	23fe      	movs	r3, #254	; 0xfe
    27a4:	2200      	movs	r2, #0
    27a6:	4f45      	ldr	r7, [pc, #276]	; (28bc <sampleTick+0x298>)
    27a8:	059b      	lsls	r3, r3, #22
    27aa:	47b8      	blx	r7
    27ac:	4b45      	ldr	r3, [pc, #276]	; (28c4 <sampleTick+0x2a0>)
    27ae:	4798      	blx	r3
    sample.accelY =  accelYint * BMI055_ACCEL_16G_DIV;
    27b0:	9b02      	ldr	r3, [sp, #8]

    accelXint =  accelXint >> 4;
    accelYint =  accelYint >> 4;
    accelZint =  accelZint >> 4;

    sample.accelX =  accelXint * BMI055_ACCEL_16G_DIV;
    27b2:	6220      	str	r0, [r4, #32]
    sample.accelY =  accelYint * BMI055_ACCEL_16G_DIV;
    27b4:	1118      	asrs	r0, r3, #4
    27b6:	4b3f      	ldr	r3, [pc, #252]	; (28b4 <sampleTick+0x290>)
    27b8:	4798      	blx	r3
    27ba:	23fe      	movs	r3, #254	; 0xfe
    27bc:	2200      	movs	r2, #0
    27be:	059b      	lsls	r3, r3, #22
    27c0:	47b8      	blx	r7
    27c2:	4b40      	ldr	r3, [pc, #256]	; (28c4 <sampleTick+0x2a0>)
    27c4:	4798      	blx	r3
    sample.accelZ = accelZint * BMI055_ACCEL_16G_DIV;
    27c6:	9b05      	ldr	r3, [sp, #20]
    accelXint =  accelXint >> 4;
    accelYint =  accelYint >> 4;
    accelZint =  accelZint >> 4;

    sample.accelX =  accelXint * BMI055_ACCEL_16G_DIV;
    sample.accelY =  accelYint * BMI055_ACCEL_16G_DIV;
    27c8:	6260      	str	r0, [r4, #36]	; 0x24
    sample.accelZ = accelZint * BMI055_ACCEL_16G_DIV;
    27ca:	021f      	lsls	r7, r3, #8
    27cc:	9b04      	ldr	r3, [sp, #16]
    27ce:	431f      	orrs	r7, r3
    27d0:	b238      	sxth	r0, r7
    27d2:	4b38      	ldr	r3, [pc, #224]	; (28b4 <sampleTick+0x290>)
    27d4:	1100      	asrs	r0, r0, #4
    27d6:	4798      	blx	r3
    27d8:	23fe      	movs	r3, #254	; 0xfe
    27da:	2200      	movs	r2, #0
    27dc:	4f37      	ldr	r7, [pc, #220]	; (28bc <sampleTick+0x298>)
    27de:	059b      	lsls	r3, r3, #22
    27e0:	47b8      	blx	r7
    27e2:	4b38      	ldr	r3, [pc, #224]	; (28c4 <sampleTick+0x2a0>)
    27e4:	4798      	blx	r3
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    27e6:	2280      	movs	r2, #128	; 0x80
    27e8:	4b3a      	ldr	r3, [pc, #232]	; (28d4 <sampleTick+0x2b0>)
    27ea:	00d2      	lsls	r2, r2, #3

    // Gyro data
    pinLow(cs_gyro);
    spiDataOut(GYRO_SPI, BMI055_X_GYRO_LSB | BMI055_READ_REG);
    27ec:	2182      	movs	r1, #130	; 0x82
    accelYint =  accelYint >> 4;
    accelZint =  accelZint >> 4;

    sample.accelX =  accelXint * BMI055_ACCEL_16G_DIV;
    sample.accelY =  accelYint * BMI055_ACCEL_16G_DIV;
    sample.accelZ = accelZint * BMI055_ACCEL_16G_DIV;
    27ee:	62a0      	str	r0, [r4, #40]	; 0x28
    27f0:	615a      	str	r2, [r3, #20]

    // Gyro data
    pinLow(cs_gyro);
    spiDataOut(GYRO_SPI, BMI055_X_GYRO_LSB | BMI055_READ_REG);
    27f2:	0028      	movs	r0, r5
    27f4:	4b38      	ldr	r3, [pc, #224]	; (28d8 <sampleTick+0x2b4>)
    27f6:	4798      	blx	r3
    byteOne = spiDataIn(GYRO_SPI);
    27f8:	0028      	movs	r0, r5
    27fa:	47b0      	blx	r6
    27fc:	0007      	movs	r7, r0
    byteTwo = spiDataIn(GYRO_SPI);
    27fe:	0028      	movs	r0, r5
    2800:	47b0      	blx	r6
    sample.altitudefeet = paToFeetNOAA(sample.pressureMbar);
}

int16_t twosComp(u8_t byteOne, u8_t byteTwo) {

    u16_t comp = byteOne | (byteTwo << 8);
    2802:	0200      	lsls	r0, r0, #8
    2804:	4307      	orrs	r7, r0
    2806:	b23b      	sxth	r3, r7
    pinLow(cs_gyro);
    spiDataOut(GYRO_SPI, BMI055_X_GYRO_LSB | BMI055_READ_REG);
    byteOne = spiDataIn(GYRO_SPI);
    byteTwo = spiDataIn(GYRO_SPI);
    int16_t gyroXint = twosComp(byteOne,byteTwo);
    byteOne = spiDataIn(GYRO_SPI);
    2808:	0028      	movs	r0, r5
    sample.altitudefeet = paToFeetNOAA(sample.pressureMbar);
}

int16_t twosComp(u8_t byteOne, u8_t byteTwo) {

    u16_t comp = byteOne | (byteTwo << 8);
    280a:	9303      	str	r3, [sp, #12]
    pinLow(cs_gyro);
    spiDataOut(GYRO_SPI, BMI055_X_GYRO_LSB | BMI055_READ_REG);
    byteOne = spiDataIn(GYRO_SPI);
    byteTwo = spiDataIn(GYRO_SPI);
    int16_t gyroXint = twosComp(byteOne,byteTwo);
    byteOne = spiDataIn(GYRO_SPI);
    280c:	47b0      	blx	r6
    280e:	0007      	movs	r7, r0
    byteTwo = spiDataIn(GYRO_SPI);
    2810:	0028      	movs	r0, r5
    2812:	47b0      	blx	r6
    sample.altitudefeet = paToFeetNOAA(sample.pressureMbar);
}

int16_t twosComp(u8_t byteOne, u8_t byteTwo) {

    u16_t comp = byteOne | (byteTwo << 8);
    2814:	0200      	lsls	r0, r0, #8
    2816:	4307      	orrs	r7, r0
    2818:	b23b      	sxth	r3, r7
    byteTwo = spiDataIn(GYRO_SPI);
    int16_t gyroXint = twosComp(byteOne,byteTwo);
    byteOne = spiDataIn(GYRO_SPI);
    byteTwo = spiDataIn(GYRO_SPI);
    int16_t gyroYint = twosComp(byteOne,byteTwo);
    byteOne = spiDataIn(GYRO_SPI);
    281a:	0028      	movs	r0, r5
    sample.altitudefeet = paToFeetNOAA(sample.pressureMbar);
}

int16_t twosComp(u8_t byteOne, u8_t byteTwo) {

    u16_t comp = byteOne | (byteTwo << 8);
    281c:	9302      	str	r3, [sp, #8]
    byteTwo = spiDataIn(GYRO_SPI);
    int16_t gyroXint = twosComp(byteOne,byteTwo);
    byteOne = spiDataIn(GYRO_SPI);
    byteTwo = spiDataIn(GYRO_SPI);
    int16_t gyroYint = twosComp(byteOne,byteTwo);
    byteOne = spiDataIn(GYRO_SPI);
    281e:	47b0      	blx	r6
    2820:	0007      	movs	r7, r0
    byteTwo = spiDataIn(GYRO_SPI);
    2822:	0028      	movs	r0, r5
    2824:	47b0      	blx	r6
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    2826:	2280      	movs	r2, #128	; 0x80
    2828:	4b2a      	ldr	r3, [pc, #168]	; (28d4 <sampleTick+0x2b0>)
    282a:	00d2      	lsls	r2, r2, #3
    282c:	619a      	str	r2, [r3, #24]

    gyroXint = gyroXint >> 4;
    gyroYint = gyroYint >> 4;
    gyroZint = gyroZint >> 4;

    sample.gyroX =  gyroXint * BMI055_GYRO_2000DS_DIV;
    282e:	9b03      	ldr	r3, [sp, #12]
    int16_t gyroXint = twosComp(byteOne,byteTwo);
    byteOne = spiDataIn(GYRO_SPI);
    byteTwo = spiDataIn(GYRO_SPI);
    int16_t gyroYint = twosComp(byteOne,byteTwo);
    byteOne = spiDataIn(GYRO_SPI);
    byteTwo = spiDataIn(GYRO_SPI);
    2830:	0005      	movs	r5, r0

    gyroXint = gyroXint >> 4;
    gyroYint = gyroYint >> 4;
    gyroZint = gyroZint >> 4;

    sample.gyroX =  gyroXint * BMI055_GYRO_2000DS_DIV;
    2832:	1118      	asrs	r0, r3, #4
    2834:	4b1f      	ldr	r3, [pc, #124]	; (28b4 <sampleTick+0x290>)
    2836:	4798      	blx	r3
    2838:	23fe      	movs	r3, #254	; 0xfe
    283a:	4e20      	ldr	r6, [pc, #128]	; (28bc <sampleTick+0x298>)
    283c:	2200      	movs	r2, #0
    283e:	059b      	lsls	r3, r3, #22
    2840:	47b0      	blx	r6
    2842:	4b20      	ldr	r3, [pc, #128]	; (28c4 <sampleTick+0x2a0>)
    2844:	4798      	blx	r3
    sample.gyroY =  gyroYint * BMI055_GYRO_2000DS_DIV;
    2846:	9b02      	ldr	r3, [sp, #8]

    gyroXint = gyroXint >> 4;
    gyroYint = gyroYint >> 4;
    gyroZint = gyroZint >> 4;

    sample.gyroX =  gyroXint * BMI055_GYRO_2000DS_DIV;
    2848:	62e0      	str	r0, [r4, #44]	; 0x2c
    sample.gyroY =  gyroYint * BMI055_GYRO_2000DS_DIV;
    284a:	1118      	asrs	r0, r3, #4
    284c:	4b19      	ldr	r3, [pc, #100]	; (28b4 <sampleTick+0x290>)
    284e:	4798      	blx	r3
    2850:	23fe      	movs	r3, #254	; 0xfe
    2852:	2200      	movs	r2, #0
    2854:	059b      	lsls	r3, r3, #22
    2856:	47b0      	blx	r6
    2858:	4b1a      	ldr	r3, [pc, #104]	; (28c4 <sampleTick+0x2a0>)
    285a:	4798      	blx	r3
    285c:	6320      	str	r0, [r4, #48]	; 0x30
    sample.gyroZ =  gyroZint * BMI055_GYRO_2000DS_DIV;
    285e:	0228      	lsls	r0, r5, #8
    2860:	4307      	orrs	r7, r0
    2862:	b238      	sxth	r0, r7
    2864:	4b13      	ldr	r3, [pc, #76]	; (28b4 <sampleTick+0x290>)
    2866:	1100      	asrs	r0, r0, #4
    2868:	4798      	blx	r3
    286a:	23fe      	movs	r3, #254	; 0xfe
    286c:	2200      	movs	r2, #0
    286e:	059b      	lsls	r3, r3, #22
    2870:	47b0      	blx	r6
    2872:	4b14      	ldr	r3, [pc, #80]	; (28c4 <sampleTick+0x2a0>)
    2874:	4798      	blx	r3
    2876:	6360      	str	r0, [r4, #52]	; 0x34


    delay_us(400);
    2878:	20c8      	movs	r0, #200	; 0xc8
    287a:	4b18      	ldr	r3, [pc, #96]	; (28dc <sampleTick+0x2b8>)
    287c:	0040      	lsls	r0, r0, #1
    287e:	4798      	blx	r3
    u32_t PressureRaw = readMS5803AdcResults();
    2880:	4b17      	ldr	r3, [pc, #92]	; (28e0 <sampleTick+0x2bc>)
    2882:	4798      	blx	r3
    ConvertPressureTemperature(PressureRaw, tempRaw, &sample.temperatureCelcus, &sample.pressureMbar);
    2884:	4a18      	ldr	r2, [pc, #96]	; (28e8 <sampleTick+0x2c4>)
    2886:	9901      	ldr	r1, [sp, #4]
    2888:	4b18      	ldr	r3, [pc, #96]	; (28ec <sampleTick+0x2c8>)
    288a:	4d19      	ldr	r5, [pc, #100]	; (28f0 <sampleTick+0x2cc>)
    288c:	47a8      	blx	r5
    sample.altitudefeet = paToFeetNOAA(sample.pressureMbar);
    288e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    2890:	4b18      	ldr	r3, [pc, #96]	; (28f4 <sampleTick+0x2d0>)
    2892:	4798      	blx	r3
    2894:	6420      	str	r0, [r4, #64]	; 0x40
    2896:	6461      	str	r1, [r4, #68]	; 0x44
}
    2898:	b007      	add	sp, #28
    289a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    289c:	20000534 	.word	0x20000534
    28a0:	200007e0 	.word	0x200007e0
    28a4:	00001015 	.word	0x00001015
    28a8:	20000524 	.word	0x20000524
    28ac:	000068e4 	.word	0x000068e4
    28b0:	00000cd1 	.word	0x00000cd1
    28b4:	00006185 	.word	0x00006185
    28b8:	77318fc5 	.word	0x77318fc5
    28bc:	0000553d 	.word	0x0000553d
    28c0:	3f5f212d 	.word	0x3f5f212d
    28c4:	00006321 	.word	0x00006321
    28c8:	fffff0c4 	.word	0xfffff0c4
    28cc:	02de00d2 	.word	0x02de00d2
    28d0:	bf8f8a09 	.word	0xbf8f8a09
    28d4:	41004400 	.word	0x41004400
    28d8:	00002a21 	.word	0x00002a21
    28dc:	00000f99 	.word	0x00000f99
    28e0:	000003ad 	.word	0x000003ad
    28e4:	00002a39 	.word	0x00002a39
    28e8:	2000081c 	.word	0x2000081c
    28ec:	20000818 	.word	0x20000818
    28f0:	000003ed 	.word	0x000003ed
    28f4:	0000048d 	.word	0x0000048d

000028f8 <sercomClockEnable>:
#include <util.h>

void sercomClockEnable(SercomId id, uint32_t clock_channel, u8_t divider) {
    28f8:	b570      	push	{r4, r5, r6, lr}
    28fa:	0004      	movs	r4, r0
    // prevent this clock write from changing any other clocks
    PM->APBCMASK.reg |= 1 << (PM_APBCMASK_SERCOM0_Pos + id);
    28fc:	2301      	movs	r3, #1
    28fe:	1ca6      	adds	r6, r4, #2
    2900:	40b3      	lsls	r3, r6
    2902:	480d      	ldr	r0, [pc, #52]	; (2938 <sercomClockEnable+0x40>)
#include <util.h>

void sercomClockEnable(SercomId id, uint32_t clock_channel, u8_t divider) {
    2904:	000d      	movs	r5, r1
    // prevent this clock write from changing any other clocks
    PM->APBCMASK.reg |= 1 << (PM_APBCMASK_SERCOM0_Pos + id);
    2906:	6a01      	ldr	r1, [r0, #32]
    2908:	430b      	orrs	r3, r1
    290a:	6203      	str	r3, [r0, #32]


    if (clock_channel != 0) {
    290c:	2d00      	cmp	r5, #0
    290e:	d003      	beq.n	2918 <sercomClockEnable+0x20>
        // clock generators 3-8 have 8 division factor bits - DIV[7:0]
        gclkEnable(clock_channel, GCLK_SOURCE_DFLL48M, divider);
    2910:	2107      	movs	r1, #7
    2912:	0028      	movs	r0, r5
    2914:	4b09      	ldr	r3, [pc, #36]	; (293c <sercomClockEnable+0x44>)
    2916:	4798      	blx	r3
    }


    // attach clock
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
    2918:	22f0      	movs	r2, #240	; 0xf0
    291a:	2080      	movs	r0, #128	; 0x80
    291c:	0229      	lsls	r1, r5, #8
    291e:	0112      	lsls	r2, r2, #4
    2920:	4011      	ands	r1, r2
    2922:	01c0      	lsls	r0, r0, #7
    2924:	4301      	orrs	r1, r0
    2926:	0020      	movs	r0, r4
    2928:	3014      	adds	r0, #20
    292a:	223f      	movs	r2, #63	; 0x3f
    292c:	0003      	movs	r3, r0
    292e:	4013      	ands	r3, r2
    2930:	4319      	orrs	r1, r3
    2932:	4b03      	ldr	r3, [pc, #12]	; (2940 <sercomClockEnable+0x48>)
    2934:	8059      	strh	r1, [r3, #2]
                        GCLK_CLKCTRL_GEN(clock_channel) |
                        GCLK_CLKCTRL_ID(SERCOM0_GCLK_ID_CORE + id);
}
    2936:	bd70      	pop	{r4, r5, r6, pc}
    2938:	40000400 	.word	0x40000400
    293c:	00000f49 	.word	0x00000f49
    2940:	40000c00 	.word	0x40000c00

00002944 <sercomReset>:
void computeKalmanStates();



inline static Sercom* sercom(SercomId id) {
    return (Sercom*) (0x42000800U + id * 1024);
    2944:	4b04      	ldr	r3, [pc, #16]	; (2958 <sercomReset+0x14>)
    2946:	0280      	lsls	r0, r0, #10
    2948:	18c0      	adds	r0, r0, r3


void sercomReset(SercomId id) {
    sercom(id)->SPI.CTRLA.reg = SERCOM_SPI_CTRLA_SWRST;
    294a:	2301      	movs	r3, #1
    294c:	6003      	str	r3, [r0, #0]
    while(sercom(id)->SPI.CTRLA.reg & SERCOM_SPI_CTRLA_SWRST);
    294e:	6802      	ldr	r2, [r0, #0]
    2950:	421a      	tst	r2, r3
    2952:	d1fc      	bne.n	294e <sercomReset+0xa>
}
    2954:	4770      	bx	lr
    2956:	46c0      	nop			; (mov r8, r8)
    2958:	42000800 	.word	0x42000800

0000295c <sercomSpiMasterInit>:
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
}


void sercomSpiMasterInit(SercomId id, u32_t dipo, u32_t dopo, bool cpol, bool cpha, u8_t baud) {
    295c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    295e:	0004      	movs	r4, r0
    2960:	9300      	str	r3, [sp, #0]
    2962:	ab08      	add	r3, sp, #32
    2964:	781b      	ldrb	r3, [r3, #0]
    2966:	000e      	movs	r6, r1
    2968:	9301      	str	r3, [sp, #4]
    296a:	ab09      	add	r3, sp, #36	; 0x24
    296c:	781f      	ldrb	r7, [r3, #0]

    sercomReset(id);
    296e:	4b12      	ldr	r3, [pc, #72]	; (29b8 <sercomSpiMasterInit+0x5c>)
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
}


void sercomSpiMasterInit(SercomId id, u32_t dipo, u32_t dopo, bool cpol, bool cpha, u8_t baud) {
    2970:	0015      	movs	r5, r2

    sercomReset(id);
    2972:	4798      	blx	r3
    2974:	4b11      	ldr	r3, [pc, #68]	; (29bc <sercomSpiMasterInit+0x60>)
    2976:	02a4      	lsls	r4, r4, #10
    2978:	18e4      	adds	r4, r4, r3

    sercom(id)->SPI.CTRLB.reg
        = SERCOM_SPI_CTRLB_RXEN;
    297a:	2380      	movs	r3, #128	; 0x80
    297c:	029b      	lsls	r3, r3, #10
    297e:	6063      	str	r3, [r4, #4]
    2980:	23c0      	movs	r3, #192	; 0xc0
    sercom(id)->SPI.BAUD.reg = baud;

    sercom(id)->SPI.CTRLA.reg
        = SERCOM_SPI_CTRLA_ENABLE
          | SERCOM_SPI_CTRLA_MODE_SPI_MASTER
          | SERCOM_SPI_CTRLA_DIPO(dipo)
    2982:	21c0      	movs	r1, #192	; 0xc0
    2984:	042d      	lsls	r5, r5, #16
    2986:	029b      	lsls	r3, r3, #10
    2988:	402b      	ands	r3, r5
    298a:	250e      	movs	r5, #14
    298c:	0536      	lsls	r6, r6, #20
    298e:	0389      	lsls	r1, r1, #14
    2990:	4031      	ands	r1, r6
          | SERCOM_SPI_CTRLA_DOPO(dopo)
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
    2992:	9e00      	ldr	r6, [sp, #0]
    2994:	431d      	orrs	r5, r3
    2996:	1e73      	subs	r3, r6, #1
    2998:	419e      	sbcs	r6, r3
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
    299a:	9b01      	ldr	r3, [sp, #4]
    sercom(id)->SPI.CTRLA.reg
        = SERCOM_SPI_CTRLA_ENABLE
          | SERCOM_SPI_CTRLA_MODE_SPI_MASTER
          | SERCOM_SPI_CTRLA_DIPO(dipo)
          | SERCOM_SPI_CTRLA_DOPO(dopo)
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
    299c:	0772      	lsls	r2, r6, #29
    299e:	430d      	orrs	r5, r1
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
    29a0:	432a      	orrs	r2, r5
    29a2:	1e59      	subs	r1, r3, #1
    29a4:	418b      	sbcs	r3, r1
    29a6:	0016      	movs	r6, r2
    29a8:	071b      	lsls	r3, r3, #28
    29aa:	431e      	orrs	r6, r3
    sercomReset(id);

    sercom(id)->SPI.CTRLB.reg
        = SERCOM_SPI_CTRLB_RXEN;

    sercom(id)->SPI.BAUD.reg = baud;
    29ac:	7327      	strb	r7, [r4, #12]

    sercom(id)->SPI.CTRLA.reg
        = SERCOM_SPI_CTRLA_ENABLE
    29ae:	6026      	str	r6, [r4, #0]
        };
    }
}

static inline void SPI_sync(SercomId id) {
    while  (sercom(id)->SPI.SYNCBUSY.bit.CTRLB);
    29b0:	69e3      	ldr	r3, [r4, #28]
    29b2:	075b      	lsls	r3, r3, #29
    29b4:	d4fc      	bmi.n	29b0 <sercomSpiMasterInit+0x54>
          | SERCOM_SPI_CTRLA_DOPO(dopo)
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);

    SPI_sync(id);
}
    29b6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    29b8:	00002945 	.word	0x00002945
    29bc:	42000800 	.word	0x42000800

000029c0 <sercomUartInit>:




void sercomUartInit(SercomId id, u32_t rxpo, u32_t txpo, int32_t fBAUD) {
    29c0:	b570      	push	{r4, r5, r6, lr}
    29c2:	0006      	movs	r6, r0

    //float BAUD = 65536*(1-(16*(115200/(48000000/8))));


    sercomReset(id);
    29c4:	4b0c      	ldr	r3, [pc, #48]	; (29f8 <sercomUartInit+0x38>)
}




void sercomUartInit(SercomId id, u32_t rxpo, u32_t txpo, int32_t fBAUD) {
    29c6:	000d      	movs	r5, r1
    29c8:	0014      	movs	r4, r2

    //float BAUD = 65536*(1-(16*(115200/(48000000/8))));


    sercomReset(id);
    29ca:	4798      	blx	r3
void computeKalmanStates();



inline static Sercom* sercom(SercomId id) {
    return (Sercom*) (0x42000800U + id * 1024);
    29cc:	4b0b      	ldr	r3, [pc, #44]	; (29fc <sercomUartInit+0x3c>)
    29ce:	02b0      	lsls	r0, r6, #10
    29d0:	18c0      	adds	r0, r0, r3
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    29d2:	2304      	movs	r3, #4
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    29d4:	22c0      	movs	r2, #192	; 0xc0

    //float BAUD = 65536*(1-(16*(115200/(48000000/8))));


    sercomReset(id);
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    29d6:	6003      	str	r3, [r0, #0]
    sercom(id)->USART.BAUD.reg = 45403;
    29d8:	4b09      	ldr	r3, [pc, #36]	; (2a00 <sercomUartInit+0x40>)
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    29da:	0529      	lsls	r1, r5, #20
    //float BAUD = 65536*(1-(16*(115200/(48000000/8))));


    sercomReset(id);
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    sercom(id)->USART.BAUD.reg = 45403;
    29dc:	8183      	strh	r3, [r0, #12]
    sercom(id)->USART.CTRLB.reg
        = SERCOM_USART_CTRLB_RXEN
    29de:	23c0      	movs	r3, #192	; 0xc0
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    29e0:	0392      	lsls	r2, r2, #14
    29e2:	4011      	ands	r1, r2
    29e4:	4a07      	ldr	r2, [pc, #28]	; (2a04 <sercomUartInit+0x44>)

    sercomReset(id);
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    sercom(id)->USART.BAUD.reg = 45403;
    sercom(id)->USART.CTRLB.reg
        = SERCOM_USART_CTRLB_RXEN
    29e6:	029b      	lsls	r3, r3, #10
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    29e8:	0424      	lsls	r4, r4, #16

    sercomReset(id);
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    sercom(id)->USART.BAUD.reg = 45403;
    sercom(id)->USART.CTRLB.reg
        = SERCOM_USART_CTRLB_RXEN
    29ea:	6043      	str	r3, [r0, #4]
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    29ec:	4311      	orrs	r1, r2
    29ee:	4023      	ands	r3, r4
    29f0:	430b      	orrs	r3, r1
    sercom(id)->USART.BAUD.reg = 45403;
    sercom(id)->USART.CTRLB.reg
        = SERCOM_USART_CTRLB_RXEN
          | SERCOM_USART_CTRLB_TXEN;
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
    29f2:	6003      	str	r3, [r0, #0]
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
}
    29f4:	bd70      	pop	{r4, r5, r6, pc}
    29f6:	46c0      	nop			; (mov r8, r8)
    29f8:	00002945 	.word	0x00002945
    29fc:	42000800 	.word	0x42000800
    2a00:	ffffb15b 	.word	0xffffb15b
    2a04:	40000006 	.word	0x40000006

00002a08 <spiDataTransfer>:
    2a08:	4b04      	ldr	r3, [pc, #16]	; (2a1c <spiDataTransfer+0x14>)
    2a0a:	0280      	lsls	r0, r0, #10
    2a0c:	18c0      	adds	r0, r0, r3

u8_t spiDataTransfer(SercomId id, u8_t data) {
    sercom(id)->SPI.DATA.reg = data;
    2a0e:	6281      	str	r1, [r0, #40]	; 0x28
    while(sercom(id)->SPI.INTFLAG.bit.RXC == 0);
    2a10:	7e03      	ldrb	r3, [r0, #24]
    2a12:	075b      	lsls	r3, r3, #29
    2a14:	d5fc      	bpl.n	2a10 <spiDataTransfer+0x8>
    return sercom(id)->SPI.DATA.reg;
    2a16:	6a80      	ldr	r0, [r0, #40]	; 0x28
    2a18:	b2c0      	uxtb	r0, r0
}
    2a1a:	4770      	bx	lr
    2a1c:	42000800 	.word	0x42000800

00002a20 <spiDataOut>:
    2a20:	4b04      	ldr	r3, [pc, #16]	; (2a34 <spiDataOut+0x14>)
    2a22:	0280      	lsls	r0, r0, #10
    2a24:	18c0      	adds	r0, r0, r3

void spiDataOut(SercomId id, u8_t data) {
    sercom(id)->SPI.DATA.reg = data;
    2a26:	6281      	str	r1, [r0, #40]	; 0x28
    while(sercom(id)->SPI.INTFLAG.bit.RXC == 0);
    2a28:	7e03      	ldrb	r3, [r0, #24]
    2a2a:	075b      	lsls	r3, r3, #29
    2a2c:	d5fc      	bpl.n	2a28 <spiDataOut+0x8>
    u8_t dummy = sercom(id)->SPI.DATA.reg;
    2a2e:	6a83      	ldr	r3, [r0, #40]	; 0x28
}
    2a30:	4770      	bx	lr
    2a32:	46c0      	nop			; (mov r8, r8)
    2a34:	42000800 	.word	0x42000800

00002a38 <spiDataIn>:
    2a38:	4b05      	ldr	r3, [pc, #20]	; (2a50 <spiDataIn+0x18>)
    2a3a:	0280      	lsls	r0, r0, #10
    2a3c:	18c0      	adds	r0, r0, r3

u8_t spiDataIn(SercomId id) {
    sercom(id)->SPI.DATA.reg = 0xFF;
    2a3e:	23ff      	movs	r3, #255	; 0xff
    2a40:	6283      	str	r3, [r0, #40]	; 0x28
    while(sercom(id)->SPI.INTFLAG.bit.RXC == 0);
    2a42:	7e03      	ldrb	r3, [r0, #24]
    2a44:	075b      	lsls	r3, r3, #29
    2a46:	d5fc      	bpl.n	2a42 <spiDataIn+0xa>
    return sercom(id)->SPI.DATA.reg;
    2a48:	6a80      	ldr	r0, [r0, #40]	; 0x28
    2a4a:	b2c0      	uxtb	r0, r0
}
    2a4c:	4770      	bx	lr
    2a4e:	46c0      	nop			; (mov r8, r8)
    2a50:	42000800 	.word	0x42000800

00002a54 <usartDataOut>:
    2a54:	4b04      	ldr	r3, [pc, #16]	; (2a68 <usartDataOut+0x14>)
    2a56:	0280      	lsls	r0, r0, #10
    2a58:	18c0      	adds	r0, r0, r3

void usartDataOut(SercomId id, u8_t data) {
    sercom(id)->USART.DATA.reg = data;
    2a5a:	b289      	uxth	r1, r1
    2a5c:	8501      	strh	r1, [r0, #40]	; 0x28
    while(sercom(id)->USART.INTFLAG.bit.DRE == 0);
    2a5e:	7e03      	ldrb	r3, [r0, #24]
    2a60:	07db      	lsls	r3, r3, #31
    2a62:	d5fc      	bpl.n	2a5e <usartDataOut+0xa>
}
    2a64:	4770      	bx	lr
    2a66:	46c0      	nop			; (mov r8, r8)
    2a68:	42000800 	.word	0x42000800

00002a6c <usartDataIn>:
    2a6c:	4b02      	ldr	r3, [pc, #8]	; (2a78 <usartDataIn+0xc>)
    2a6e:	0280      	lsls	r0, r0, #10
    2a70:	18c0      	adds	r0, r0, r3

u8_t usartDataIn(SercomId id) {
    return sercom(id)->USART.DATA.reg;
    2a72:	8d00      	ldrh	r0, [r0, #40]	; 0x28
    2a74:	b2c0      	uxtb	r0, r0
}
    2a76:	4770      	bx	lr
    2a78:	42000800 	.word	0x42000800

00002a7c <findMainAltitude>:
#include <boardDefines.h>


void findMainAltitude() {

    if (deploymentSettings.channelASettings.ENABLED & deploymentSettings.channelASettings.TYPE == MAIN_t) {
    2a7c:	4b10      	ldr	r3, [pc, #64]	; (2ac0 <findMainAltitude+0x44>)
    2a7e:	785a      	ldrb	r2, [r3, #1]
    2a80:	2a00      	cmp	r2, #0
    2a82:	d104      	bne.n	2a8e <findMainAltitude+0x12>
    2a84:	781a      	ldrb	r2, [r3, #0]
    2a86:	2a00      	cmp	r2, #0
    2a88:	d001      	beq.n	2a8e <findMainAltitude+0x12>
        deploymentSettings.MAIN_DEPLOY = deploymentSettings.channelASettings.MAIN_DEPLOY;
    2a8a:	885a      	ldrh	r2, [r3, #2]
    2a8c:	831a      	strh	r2, [r3, #24]
    }
    if ((deploymentSettings.channelBSettings.ENABLED & deploymentSettings.channelBSettings.TYPE == MAIN_t)) {
    2a8e:	79da      	ldrb	r2, [r3, #7]
    2a90:	2a00      	cmp	r2, #0
    2a92:	d104      	bne.n	2a9e <findMainAltitude+0x22>
    2a94:	799a      	ldrb	r2, [r3, #6]
    2a96:	2a00      	cmp	r2, #0
    2a98:	d001      	beq.n	2a9e <findMainAltitude+0x22>
        deploymentSettings.MAIN_DEPLOY = deploymentSettings.channelBSettings.MAIN_DEPLOY;
    2a9a:	891a      	ldrh	r2, [r3, #8]
    2a9c:	831a      	strh	r2, [r3, #24]
    }
    if ((deploymentSettings.channelCSettings.ENABLED & deploymentSettings.channelCSettings.TYPE == MAIN_t)) {
    2a9e:	7b5a      	ldrb	r2, [r3, #13]
    2aa0:	2a00      	cmp	r2, #0
    2aa2:	d104      	bne.n	2aae <findMainAltitude+0x32>
    2aa4:	7b1a      	ldrb	r2, [r3, #12]
    2aa6:	2a00      	cmp	r2, #0
    2aa8:	d001      	beq.n	2aae <findMainAltitude+0x32>
        deploymentSettings.MAIN_DEPLOY = deploymentSettings.channelCSettings.MAIN_DEPLOY;
    2aaa:	89da      	ldrh	r2, [r3, #14]
    2aac:	831a      	strh	r2, [r3, #24]
    }
    if ((deploymentSettings.channelDSettings.ENABLED & deploymentSettings.channelDSettings.TYPE == MAIN_t)) {
    2aae:	7cda      	ldrb	r2, [r3, #19]
    2ab0:	2a00      	cmp	r2, #0
    2ab2:	d104      	bne.n	2abe <findMainAltitude+0x42>
    2ab4:	7c9a      	ldrb	r2, [r3, #18]
    2ab6:	2a00      	cmp	r2, #0
    2ab8:	d001      	beq.n	2abe <findMainAltitude+0x42>
        deploymentSettings.MAIN_DEPLOY = deploymentSettings.channelDSettings.MAIN_DEPLOY;
    2aba:	8a9a      	ldrh	r2, [r3, #20]
    2abc:	831a      	strh	r2, [r3, #24]
    }


}
    2abe:	4770      	bx	lr
    2ac0:	20000508 	.word	0x20000508

00002ac4 <applyDefaultSettings>:
    deploymentSettings.channelASettings.MAIN_DEPLOY = 0;
    deploymentSettings.channelASettings.APPOGE_DELAY = 0;

    deploymentSettings.channelBSettings.ENABLED = true;
    deploymentSettings.channelBSettings.TYPE = MAIN_t;
    deploymentSettings.channelBSettings.MAIN_DEPLOY = 300;
    2ac4:	2096      	movs	r0, #150	; 0x96

void applyDefaultSettings() {

    deploymentSettings.channelASettings.ENABLED = true;
    deploymentSettings.channelASettings.TYPE = DROGUE_t;
    deploymentSettings.channelASettings.MAIN_DEPLOY = 0;
    2ac6:	2200      	movs	r2, #0

}

void applyDefaultSettings() {

    deploymentSettings.channelASettings.ENABLED = true;
    2ac8:	2101      	movs	r1, #1
    2aca:	4b09      	ldr	r3, [pc, #36]	; (2af0 <applyDefaultSettings+0x2c>)
    deploymentSettings.channelASettings.MAIN_DEPLOY = 0;
    deploymentSettings.channelASettings.APPOGE_DELAY = 0;

    deploymentSettings.channelBSettings.ENABLED = true;
    deploymentSettings.channelBSettings.TYPE = MAIN_t;
    deploymentSettings.channelBSettings.MAIN_DEPLOY = 300;
    2acc:	0040      	lsls	r0, r0, #1

}

void applyDefaultSettings() {

    deploymentSettings.channelASettings.ENABLED = true;
    2ace:	7019      	strb	r1, [r3, #0]
    deploymentSettings.channelASettings.TYPE = DROGUE_t;
    2ad0:	7059      	strb	r1, [r3, #1]
    deploymentSettings.channelASettings.MAIN_DEPLOY = 0;
    2ad2:	805a      	strh	r2, [r3, #2]
    deploymentSettings.channelASettings.APPOGE_DELAY = 0;
    2ad4:	711a      	strb	r2, [r3, #4]

    deploymentSettings.channelBSettings.ENABLED = true;
    2ad6:	7199      	strb	r1, [r3, #6]
    deploymentSettings.channelBSettings.TYPE = MAIN_t;
    2ad8:	71da      	strb	r2, [r3, #7]
    deploymentSettings.channelBSettings.MAIN_DEPLOY = 300;
    2ada:	8118      	strh	r0, [r3, #8]
    deploymentSettings.channelBSettings.APPOGE_DELAY = 0;
    2adc:	729a      	strb	r2, [r3, #10]

    deploymentSettings.channelCSettings.ENABLED = false;
    2ade:	731a      	strb	r2, [r3, #12]
    deploymentSettings.channelCSettings.TYPE = DROGUE_t;
    2ae0:	7359      	strb	r1, [r3, #13]
    deploymentSettings.channelCSettings.MAIN_DEPLOY = 0;
    2ae2:	81da      	strh	r2, [r3, #14]
    deploymentSettings.channelCSettings.APPOGE_DELAY = 0;
    2ae4:	741a      	strb	r2, [r3, #16]

    deploymentSettings.channelDSettings.ENABLED = false;
    2ae6:	749a      	strb	r2, [r3, #18]
    deploymentSettings.channelDSettings.TYPE = MAIN_t;
    2ae8:	74da      	strb	r2, [r3, #19]
    deploymentSettings.channelDSettings.MAIN_DEPLOY = 300;
    2aea:	8298      	strh	r0, [r3, #20]
    deploymentSettings.channelDSettings.APPOGE_DELAY = 0;
    2aec:	759a      	strb	r2, [r3, #22]
}
    2aee:	4770      	bx	lr
    2af0:	20000508 	.word	0x20000508

00002af4 <putSettings>:

void putSettings() {
    2af4:	b500      	push	{lr}
    2af6:	b0c1      	sub	sp, #260	; 0x104

    u8_t settings[256];

    settings[0] = deploymentSettings.channelASettings.ENABLED;
    2af8:	4669      	mov	r1, sp
    settings[1] = deploymentSettings.channelASettings.TYPE;
    settings[2] = deploymentSettings.channelASettings.MAIN_DEPLOY >> 8;
    2afa:	4668      	mov	r0, sp

void putSettings() {

    u8_t settings[256];

    settings[0] = deploymentSettings.channelASettings.ENABLED;
    2afc:	4b17      	ldr	r3, [pc, #92]	; (2b5c <putSettings+0x68>)
    2afe:	781a      	ldrb	r2, [r3, #0]
    2b00:	700a      	strb	r2, [r1, #0]
    settings[1] = deploymentSettings.channelASettings.TYPE;
    2b02:	785a      	ldrb	r2, [r3, #1]
    2b04:	704a      	strb	r2, [r1, #1]
    settings[2] = deploymentSettings.channelASettings.MAIN_DEPLOY >> 8;
    2b06:	885a      	ldrh	r2, [r3, #2]
    2b08:	0a11      	lsrs	r1, r2, #8
    2b0a:	7081      	strb	r1, [r0, #2]
    settings[3] = deploymentSettings.channelASettings.MAIN_DEPLOY >> 0;
    2b0c:	70c2      	strb	r2, [r0, #3]
    settings[4] = deploymentSettings.channelASettings.APPOGE_DELAY;
    2b0e:	791a      	ldrb	r2, [r3, #4]
    2b10:	7102      	strb	r2, [r0, #4]

    settings[5] = deploymentSettings.channelBSettings.ENABLED;
    2b12:	799a      	ldrb	r2, [r3, #6]
    2b14:	7142      	strb	r2, [r0, #5]
    settings[6] = deploymentSettings.channelBSettings.TYPE;
    2b16:	79da      	ldrb	r2, [r3, #7]
    2b18:	7182      	strb	r2, [r0, #6]
    settings[7] = deploymentSettings.channelBSettings.MAIN_DEPLOY >> 8;
    2b1a:	891a      	ldrh	r2, [r3, #8]
    2b1c:	0a11      	lsrs	r1, r2, #8
    2b1e:	71c1      	strb	r1, [r0, #7]
    settings[8] = deploymentSettings.channelBSettings.MAIN_DEPLOY >> 0;
    2b20:	7202      	strb	r2, [r0, #8]
    settings[9] = deploymentSettings.channelBSettings.APPOGE_DELAY;
    2b22:	7a9a      	ldrb	r2, [r3, #10]
    2b24:	7242      	strb	r2, [r0, #9]

    settings[10] = deploymentSettings.channelCSettings.ENABLED;
    2b26:	7b1a      	ldrb	r2, [r3, #12]
    2b28:	7282      	strb	r2, [r0, #10]
    settings[11] = deploymentSettings.channelCSettings.TYPE;
    2b2a:	7b5a      	ldrb	r2, [r3, #13]
    2b2c:	72c2      	strb	r2, [r0, #11]
    settings[12] = deploymentSettings.channelCSettings.MAIN_DEPLOY >> 8;
    2b2e:	89da      	ldrh	r2, [r3, #14]
    2b30:	0a11      	lsrs	r1, r2, #8
    2b32:	7301      	strb	r1, [r0, #12]
    settings[13] = deploymentSettings.channelCSettings.MAIN_DEPLOY >> 0;
    2b34:	7342      	strb	r2, [r0, #13]
    settings[14] = deploymentSettings.channelCSettings.APPOGE_DELAY;
    2b36:	7c1a      	ldrb	r2, [r3, #16]
    2b38:	7382      	strb	r2, [r0, #14]

    settings[15] = deploymentSettings.channelDSettings.ENABLED;
    2b3a:	7c9a      	ldrb	r2, [r3, #18]
    2b3c:	73c2      	strb	r2, [r0, #15]
    settings[16] = deploymentSettings.channelDSettings.TYPE;
    2b3e:	7cda      	ldrb	r2, [r3, #19]
    2b40:	7402      	strb	r2, [r0, #16]
    settings[17] = deploymentSettings.channelDSettings.MAIN_DEPLOY >> 8;
    2b42:	8a9a      	ldrh	r2, [r3, #20]
    2b44:	0a11      	lsrs	r1, r2, #8
    2b46:	7441      	strb	r1, [r0, #17]
    settings[18] = deploymentSettings.channelDSettings.MAIN_DEPLOY >> 0;
    2b48:	7482      	strb	r2, [r0, #18]
    settings[19] = deploymentSettings.channelDSettings.APPOGE_DELAY;
    2b4a:	7d9b      	ldrb	r3, [r3, #22]
    settings[14] = deploymentSettings.channelCSettings.APPOGE_DELAY;

    settings[15] = deploymentSettings.channelDSettings.ENABLED;
    settings[16] = deploymentSettings.channelDSettings.TYPE;
    settings[17] = deploymentSettings.channelDSettings.MAIN_DEPLOY >> 8;
    settings[18] = deploymentSettings.channelDSettings.MAIN_DEPLOY >> 0;
    2b4c:	4669      	mov	r1, sp
    settings[19] = deploymentSettings.channelDSettings.APPOGE_DELAY;
    2b4e:	74c3      	strb	r3, [r0, #19]

    settings[20] = 0x00;
    2b50:	2000      	movs	r0, #0

    AT25SEWritePage(0x00,settings);
    2b52:	4b03      	ldr	r3, [pc, #12]	; (2b60 <putSettings+0x6c>)
    settings[16] = deploymentSettings.channelDSettings.TYPE;
    settings[17] = deploymentSettings.channelDSettings.MAIN_DEPLOY >> 8;
    settings[18] = deploymentSettings.channelDSettings.MAIN_DEPLOY >> 0;
    settings[19] = deploymentSettings.channelDSettings.APPOGE_DELAY;

    settings[20] = 0x00;
    2b54:	7508      	strb	r0, [r1, #20]

    AT25SEWritePage(0x00,settings);
    2b56:	4798      	blx	r3
}
    2b58:	b041      	add	sp, #260	; 0x104
    2b5a:	bd00      	pop	{pc}
    2b5c:	20000508 	.word	0x20000508
    2b60:	0000029d 	.word	0x0000029d

00002b64 <getSettings>:




void getSettings() {
    2b64:	b500      	push	{lr}
    2b66:	b0c1      	sub	sp, #260	; 0x104

    u8_t settings[256];

    AT25SEreadPage(0x00 , settings);
    2b68:	4669      	mov	r1, sp
    2b6a:	4b2c      	ldr	r3, [pc, #176]	; (2c1c <getSettings+0xb8>)
    2b6c:	2000      	movs	r0, #0
    2b6e:	4798      	blx	r3

    deploymentSettings.channelASettings.ENABLED = settings[0];
    2b70:	466a      	mov	r2, sp
    2b72:	7812      	ldrb	r2, [r2, #0]
    2b74:	4b2a      	ldr	r3, [pc, #168]	; (2c20 <getSettings+0xbc>)
    2b76:	1e51      	subs	r1, r2, #1
    2b78:	418a      	sbcs	r2, r1
    2b7a:	701a      	strb	r2, [r3, #0]
    deploymentSettings.channelASettings.TYPE = settings[1];
    2b7c:	466a      	mov	r2, sp
    2b7e:	7852      	ldrb	r2, [r2, #1]
    deploymentSettings.channelASettings.MAIN_DEPLOY = settings[2] << 8 | (settings[3]);
    2b80:	4669      	mov	r1, sp
    u8_t settings[256];

    AT25SEreadPage(0x00 , settings);

    deploymentSettings.channelASettings.ENABLED = settings[0];
    deploymentSettings.channelASettings.TYPE = settings[1];
    2b82:	705a      	strb	r2, [r3, #1]
    deploymentSettings.channelASettings.MAIN_DEPLOY = settings[2] << 8 | (settings[3]);
    2b84:	466a      	mov	r2, sp
    2b86:	7892      	ldrb	r2, [r2, #2]
    2b88:	78c9      	ldrb	r1, [r1, #3]
    2b8a:	0212      	lsls	r2, r2, #8
    2b8c:	430a      	orrs	r2, r1
    2b8e:	805a      	strh	r2, [r3, #2]
    deploymentSettings.channelASettings.APPOGE_DELAY = settings[4];
    2b90:	466a      	mov	r2, sp
    2b92:	7912      	ldrb	r2, [r2, #4]
    2b94:	711a      	strb	r2, [r3, #4]

    deploymentSettings.channelBSettings.ENABLED = settings[5];
    2b96:	466a      	mov	r2, sp
    2b98:	7952      	ldrb	r2, [r2, #5]
    2b9a:	1e51      	subs	r1, r2, #1
    2b9c:	418a      	sbcs	r2, r1
    2b9e:	719a      	strb	r2, [r3, #6]
    deploymentSettings.channelBSettings.TYPE = settings[6];
    2ba0:	466a      	mov	r2, sp
    2ba2:	7992      	ldrb	r2, [r2, #6]
    deploymentSettings.channelBSettings.MAIN_DEPLOY = settings[7] << 8 | (settings[8]);
    2ba4:	4669      	mov	r1, sp
    deploymentSettings.channelASettings.TYPE = settings[1];
    deploymentSettings.channelASettings.MAIN_DEPLOY = settings[2] << 8 | (settings[3]);
    deploymentSettings.channelASettings.APPOGE_DELAY = settings[4];

    deploymentSettings.channelBSettings.ENABLED = settings[5];
    deploymentSettings.channelBSettings.TYPE = settings[6];
    2ba6:	71da      	strb	r2, [r3, #7]
    deploymentSettings.channelBSettings.MAIN_DEPLOY = settings[7] << 8 | (settings[8]);
    2ba8:	466a      	mov	r2, sp
    2baa:	79d2      	ldrb	r2, [r2, #7]
    2bac:	7a09      	ldrb	r1, [r1, #8]
    2bae:	0212      	lsls	r2, r2, #8
    2bb0:	430a      	orrs	r2, r1
    2bb2:	811a      	strh	r2, [r3, #8]
    deploymentSettings.channelBSettings.APPOGE_DELAY = settings[9];
    2bb4:	466a      	mov	r2, sp
    2bb6:	7a52      	ldrb	r2, [r2, #9]
    2bb8:	729a      	strb	r2, [r3, #10]

    deploymentSettings.channelCSettings.ENABLED = settings[10];
    2bba:	466a      	mov	r2, sp
    2bbc:	7a92      	ldrb	r2, [r2, #10]
    2bbe:	1e51      	subs	r1, r2, #1
    2bc0:	418a      	sbcs	r2, r1
    2bc2:	731a      	strb	r2, [r3, #12]
    deploymentSettings.channelCSettings.TYPE = settings[11];
    2bc4:	466a      	mov	r2, sp
    2bc6:	7ad2      	ldrb	r2, [r2, #11]
    deploymentSettings.channelCSettings.MAIN_DEPLOY = settings[12] << 8 | (settings[13]);
    2bc8:	4669      	mov	r1, sp
    deploymentSettings.channelBSettings.TYPE = settings[6];
    deploymentSettings.channelBSettings.MAIN_DEPLOY = settings[7] << 8 | (settings[8]);
    deploymentSettings.channelBSettings.APPOGE_DELAY = settings[9];

    deploymentSettings.channelCSettings.ENABLED = settings[10];
    deploymentSettings.channelCSettings.TYPE = settings[11];
    2bca:	735a      	strb	r2, [r3, #13]
    deploymentSettings.channelCSettings.MAIN_DEPLOY = settings[12] << 8 | (settings[13]);
    2bcc:	466a      	mov	r2, sp
    2bce:	7b12      	ldrb	r2, [r2, #12]
    2bd0:	7b49      	ldrb	r1, [r1, #13]
    2bd2:	0212      	lsls	r2, r2, #8
    2bd4:	430a      	orrs	r2, r1
    2bd6:	81da      	strh	r2, [r3, #14]
    deploymentSettings.channelCSettings.APPOGE_DELAY = settings[14];
    2bd8:	466a      	mov	r2, sp
    2bda:	7b92      	ldrb	r2, [r2, #14]
    2bdc:	741a      	strb	r2, [r3, #16]

    deploymentSettings.channelDSettings.ENABLED = settings[15];
    2bde:	466a      	mov	r2, sp
    2be0:	7bd2      	ldrb	r2, [r2, #15]
    2be2:	1e51      	subs	r1, r2, #1
    2be4:	418a      	sbcs	r2, r1
    2be6:	749a      	strb	r2, [r3, #18]
    deploymentSettings.channelDSettings.TYPE = settings[16];
    2be8:	466a      	mov	r2, sp
    2bea:	7c12      	ldrb	r2, [r2, #16]
    deploymentSettings.channelDSettings.MAIN_DEPLOY = settings[17] << 8 | (settings[18]);
    2bec:	4669      	mov	r1, sp
    deploymentSettings.channelCSettings.TYPE = settings[11];
    deploymentSettings.channelCSettings.MAIN_DEPLOY = settings[12] << 8 | (settings[13]);
    deploymentSettings.channelCSettings.APPOGE_DELAY = settings[14];

    deploymentSettings.channelDSettings.ENABLED = settings[15];
    deploymentSettings.channelDSettings.TYPE = settings[16];
    2bee:	74da      	strb	r2, [r3, #19]
    deploymentSettings.channelDSettings.MAIN_DEPLOY = settings[17] << 8 | (settings[18]);
    2bf0:	466a      	mov	r2, sp
    2bf2:	7c52      	ldrb	r2, [r2, #17]
    2bf4:	7c89      	ldrb	r1, [r1, #18]
    2bf6:	0212      	lsls	r2, r2, #8
    2bf8:	430a      	orrs	r2, r1
    2bfa:	829a      	strh	r2, [r3, #20]
    deploymentSettings.channelDSettings.APPOGE_DELAY = settings[19];
    2bfc:	466a      	mov	r2, sp
    2bfe:	7cd2      	ldrb	r2, [r2, #19]
    2c00:	759a      	strb	r2, [r3, #22]


    if (settings[20] == 0xFF) {
    2c02:	466b      	mov	r3, sp
    2c04:	7d1b      	ldrb	r3, [r3, #20]
    2c06:	2bff      	cmp	r3, #255	; 0xff
    2c08:	d103      	bne.n	2c12 <getSettings+0xae>
        applyDefaultSettings();
    2c0a:	4b06      	ldr	r3, [pc, #24]	; (2c24 <getSettings+0xc0>)
    2c0c:	4798      	blx	r3
        putSettings();
    2c0e:	4b06      	ldr	r3, [pc, #24]	; (2c28 <getSettings+0xc4>)
    2c10:	4798      	blx	r3
    }

    findMainAltitude();
    2c12:	4b06      	ldr	r3, [pc, #24]	; (2c2c <getSettings+0xc8>)
    2c14:	4798      	blx	r3

}
    2c16:	b041      	add	sp, #260	; 0x104
    2c18:	bd00      	pop	{pc}
    2c1a:	46c0      	nop			; (mov r8, r8)
    2c1c:	00000355 	.word	0x00000355
    2c20:	20000508 	.word	0x20000508
    2c24:	00002ac5 	.word	0x00002ac5
    2c28:	00002af5 	.word	0x00002af5
    2c2c:	00002a7d 	.word	0x00002a7d

00002c30 <attemptConnection>:
#include <util.h>
#include <boardDefines.h>


void attemptConnection() {
    2c30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

    if (USARTconnectionAvaliable()) {
    2c32:	4b2f      	ldr	r3, [pc, #188]	; (2cf0 <attemptConnection+0xc0>)
    2c34:	4798      	blx	r3
    2c36:	2800      	cmp	r0, #0
    2c38:	d058      	beq.n	2cec <attemptConnection+0xbc>

        flightState = flightIdle;
    2c3a:	2201      	movs	r2, #1
    2c3c:	4b2d      	ldr	r3, [pc, #180]	; (2cf4 <attemptConnection+0xc4>)
    2c3e:	701a      	strb	r2, [r3, #0]

        //wait for user to tell us what they want
        while(sercom(USART3)->SPI.INTFLAG.bit.RXC == 0);
    2c40:	4a2d      	ldr	r2, [pc, #180]	; (2cf8 <attemptConnection+0xc8>)
    2c42:	7e13      	ldrb	r3, [r2, #24]
    2c44:	4e2c      	ldr	r6, [pc, #176]	; (2cf8 <attemptConnection+0xc8>)
    2c46:	075b      	lsls	r3, r3, #29
    2c48:	d5fb      	bpl.n	2c42 <attemptConnection+0x12>
        u8_t option = usartDataIn(USART3);
    2c4a:	2003      	movs	r0, #3
    2c4c:	4d2b      	ldr	r5, [pc, #172]	; (2cfc <attemptConnection+0xcc>)
    2c4e:	47a8      	blx	r5
    2c50:	1e04      	subs	r4, r0, #0

        //user wants to read flight logs
        if (option == 0x4C) {
    2c52:	2c4c      	cmp	r4, #76	; 0x4c
    2c54:	d13c      	bne.n	2cd0 <attemptConnection+0xa0>
    2c56:	2400      	movs	r4, #0

            //send list of available flight logs
            for (u8_t flightLog = 0; flightLog < 20; ++flightLog) {

                if (isFlightLogged(flightLog)) {
    2c58:	0020      	movs	r0, r4
    2c5a:	4b29      	ldr	r3, [pc, #164]	; (2d00 <attemptConnection+0xd0>)
    2c5c:	4798      	blx	r3
    2c5e:	2800      	cmp	r0, #0
    2c60:	d003      	beq.n	2c6a <attemptConnection+0x3a>

                    usartDataOut(USART3, flightLog);
    2c62:	0021      	movs	r1, r4
    2c64:	2003      	movs	r0, #3
    2c66:	4b27      	ldr	r3, [pc, #156]	; (2d04 <attemptConnection+0xd4>)
    2c68:	4798      	blx	r3

        //user wants to read flight logs
        if (option == 0x4C) {

            //send list of available flight logs
            for (u8_t flightLog = 0; flightLog < 20; ++flightLog) {
    2c6a:	3401      	adds	r4, #1
    2c6c:	b2e4      	uxtb	r4, r4
    2c6e:	2c14      	cmp	r4, #20
    2c70:	d1f2      	bne.n	2c58 <attemptConnection+0x28>

                    usartDataOut(USART3, flightLog);
                }
            }
            //done sending flight numbers
            usartDataOut(USART3, 0xFF);
    2c72:	21ff      	movs	r1, #255	; 0xff
    2c74:	2003      	movs	r0, #3
    2c76:	4c23      	ldr	r4, [pc, #140]	; (2d04 <attemptConnection+0xd4>)
    2c78:	47a0      	blx	r4

            //wait for user to pick which flight to read
            while(sercom(USART3)->SPI.INTFLAG.bit.RXC == 0);
    2c7a:	7e33      	ldrb	r3, [r6, #24]
    2c7c:	075b      	lsls	r3, r3, #29
    2c7e:	d5fc      	bpl.n	2c7a <attemptConnection+0x4a>
            volatile u8_t flightToRead = usartDataIn(USART3);
    2c80:	2003      	movs	r0, #3
    2c82:	47a8      	blx	r5
    2c84:	466b      	mov	r3, sp
    2c86:	71d8      	strb	r0, [r3, #7]


            u32_t flightStartAddress = getFlightStartAddress(flightToRead);
    2c88:	79d8      	ldrb	r0, [r3, #7]
            //done sending flight numbers
            usartDataOut(USART3, 0xFF);

            //wait for user to pick which flight to read
            while(sercom(USART3)->SPI.INTFLAG.bit.RXC == 0);
            volatile u8_t flightToRead = usartDataIn(USART3);
    2c8a:	1ddd      	adds	r5, r3, #7


            u32_t flightStartAddress = getFlightStartAddress(flightToRead);
    2c8c:	b2c0      	uxtb	r0, r0
    2c8e:	4b1e      	ldr	r3, [pc, #120]	; (2d08 <attemptConnection+0xd8>)
    2c90:	4798      	blx	r3
    2c92:	0007      	movs	r7, r0
            u32_t flightEndAddress = FindFlightEndingAddress(flightToRead);
    2c94:	7828      	ldrb	r0, [r5, #0]
    2c96:	4b1d      	ldr	r3, [pc, #116]	; (2d0c <attemptConnection+0xdc>)
    2c98:	b2c0      	uxtb	r0, r0
    2c9a:	4798      	blx	r3
    2c9c:	0006      	movs	r6, r0

            //inform of page numbers
            u16_t pagesToSend = (flightEndAddress  - flightStartAddress) >> 8;
    2c9e:	1bc5      	subs	r5, r0, r7
    2ca0:	0a2d      	lsrs	r5, r5, #8
            usartDataOut(USART3, pagesToSend >> 0);
    2ca2:	b2e9      	uxtb	r1, r5
    2ca4:	2003      	movs	r0, #3
    2ca6:	47a0      	blx	r4
            usartDataOut(USART3, pagesToSend >> 8);
    2ca8:	b2a9      	uxth	r1, r5
    2caa:	0a09      	lsrs	r1, r1, #8
    2cac:	2003      	movs	r0, #3
    2cae:	47a0      	blx	r4

            //send flight end address for % full
            usartDataOut(USART3, flightEndAddress >> 0);
    2cb0:	b2f1      	uxtb	r1, r6
    2cb2:	2003      	movs	r0, #3
    2cb4:	47a0      	blx	r4
            usartDataOut(USART3, flightEndAddress >> 8);
    2cb6:	0a31      	lsrs	r1, r6, #8
    2cb8:	b2c9      	uxtb	r1, r1
    2cba:	2003      	movs	r0, #3
    2cbc:	47a0      	blx	r4
            usartDataOut(USART3, flightEndAddress >> 16);
    2cbe:	0c31      	lsrs	r1, r6, #16
    2cc0:	b2c9      	uxtb	r1, r1
    2cc2:	2003      	movs	r0, #3
    2cc4:	47a0      	blx	r4

            //USART out the flights pages
            sendTheasePagesToComputer(flightStartAddress, flightEndAddress);
    2cc6:	0031      	movs	r1, r6
    2cc8:	0038      	movs	r0, r7
    2cca:	4b11      	ldr	r3, [pc, #68]	; (2d10 <attemptConnection+0xe0>)
    2ccc:	4798      	blx	r3
    2cce:	e00d      	b.n	2cec <attemptConnection+0xbc>

        }
        //user wants to erase chip
        if (option == 0x45) { // 'E'
    2cd0:	2845      	cmp	r0, #69	; 0x45
    2cd2:	d10b      	bne.n	2cec <attemptConnection+0xbc>

            //getSettings();
			
            AT25SFChipErase();
    2cd4:	4b0f      	ldr	r3, [pc, #60]	; (2d14 <attemptConnection+0xe4>)
    2cd6:	4798      	blx	r3

            AT25SFHoldTillReady();
    2cd8:	4b0f      	ldr	r3, [pc, #60]	; (2d18 <attemptConnection+0xe8>)
    2cda:	4798      	blx	r3

            //getSettings();

            usartDataOut(USART3, 'E');
    2cdc:	2003      	movs	r0, #3
    2cde:	4b09      	ldr	r3, [pc, #36]	; (2d04 <attemptConnection+0xd4>)
    2ce0:	0021      	movs	r1, r4
    2ce2:	4798      	blx	r3
            beep(400);
    2ce4:	20c8      	movs	r0, #200	; 0xc8
    2ce6:	4b0d      	ldr	r3, [pc, #52]	; (2d1c <attemptConnection+0xec>)
    2ce8:	0040      	lsls	r0, r0, #1
    2cea:	4798      	blx	r3


        }
    }

}
    2cec:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    2cee:	46c0      	nop			; (mov r8, r8)
    2cf0:	00000a51 	.word	0x00000a51
    2cf4:	20000698 	.word	0x20000698
    2cf8:	42001400 	.word	0x42001400
    2cfc:	00002a6d 	.word	0x00002a6d
    2d00:	00002505 	.word	0x00002505
    2d04:	00002a55 	.word	0x00002a55
    2d08:	000024b5 	.word	0x000024b5
    2d0c:	000024dd 	.word	0x000024dd
    2d10:	00000a85 	.word	0x00000a85
    2d14:	00000219 	.word	0x00000219
    2d18:	000001e5 	.word	0x000001e5
    2d1c:	00000d39 	.word	0x00000d39

00002d20 <pow>:
    2d20:	b5f0      	push	{r4, r5, r6, r7, lr}
    2d22:	465f      	mov	r7, fp
    2d24:	464d      	mov	r5, r9
    2d26:	4656      	mov	r6, sl
    2d28:	4644      	mov	r4, r8
    2d2a:	b4f0      	push	{r4, r5, r6, r7}
    2d2c:	b091      	sub	sp, #68	; 0x44
    2d2e:	001f      	movs	r7, r3
    2d30:	0004      	movs	r4, r0
    2d32:	000d      	movs	r5, r1
    2d34:	0016      	movs	r6, r2
    2d36:	f000 f9af 	bl	3098 <__ieee754_pow>
    2d3a:	4bcf      	ldr	r3, [pc, #828]	; (3078 <pow+0x358>)
    2d3c:	9002      	str	r0, [sp, #8]
    2d3e:	9103      	str	r1, [sp, #12]
    2d40:	469b      	mov	fp, r3
    2d42:	781b      	ldrb	r3, [r3, #0]
    2d44:	b25b      	sxtb	r3, r3
    2d46:	4699      	mov	r9, r3
    2d48:	3301      	adds	r3, #1
    2d4a:	d04f      	beq.n	2dec <pow+0xcc>
    2d4c:	0032      	movs	r2, r6
    2d4e:	003b      	movs	r3, r7
    2d50:	0030      	movs	r0, r6
    2d52:	0039      	movs	r1, r7
    2d54:	f003 f9c0 	bl	60d8 <__aeabi_dcmpun>
    2d58:	9000      	str	r0, [sp, #0]
    2d5a:	2800      	cmp	r0, #0
    2d5c:	d146      	bne.n	2dec <pow+0xcc>
    2d5e:	0022      	movs	r2, r4
    2d60:	002b      	movs	r3, r5
    2d62:	0020      	movs	r0, r4
    2d64:	0029      	movs	r1, r5
    2d66:	f003 f9b7 	bl	60d8 <__aeabi_dcmpun>
    2d6a:	2200      	movs	r2, #0
    2d6c:	4682      	mov	sl, r0
    2d6e:	2800      	cmp	r0, #0
    2d70:	d134      	bne.n	2ddc <pow+0xbc>
    2d72:	2300      	movs	r3, #0
    2d74:	0020      	movs	r0, r4
    2d76:	0029      	movs	r1, r5
    2d78:	f001 f8fc 	bl	3f74 <__aeabi_dcmpeq>
    2d7c:	2800      	cmp	r0, #0
    2d7e:	d03a      	beq.n	2df6 <pow+0xd6>
    2d80:	2200      	movs	r2, #0
    2d82:	2300      	movs	r3, #0
    2d84:	0030      	movs	r0, r6
    2d86:	0039      	movs	r1, r7
    2d88:	f001 f8f4 	bl	3f74 <__aeabi_dcmpeq>
    2d8c:	9005      	str	r0, [sp, #20]
    2d8e:	2800      	cmp	r0, #0
    2d90:	d100      	bne.n	2d94 <pow+0x74>
    2d92:	e074      	b.n	2e7e <pow+0x15e>
    2d94:	ab06      	add	r3, sp, #24
    2d96:	4698      	mov	r8, r3
    2d98:	2301      	movs	r3, #1
    2d9a:	4642      	mov	r2, r8
    2d9c:	9306      	str	r3, [sp, #24]
    2d9e:	4bb7      	ldr	r3, [pc, #732]	; (307c <pow+0x35c>)
    2da0:	6053      	str	r3, [r2, #4]
    2da2:	4643      	mov	r3, r8
    2da4:	4652      	mov	r2, sl
    2da6:	609c      	str	r4, [r3, #8]
    2da8:	60dd      	str	r5, [r3, #12]
    2daa:	621a      	str	r2, [r3, #32]
    2dac:	611e      	str	r6, [r3, #16]
    2dae:	615f      	str	r7, [r3, #20]
    2db0:	4642      	mov	r2, r8
    2db2:	2300      	movs	r3, #0
    2db4:	2400      	movs	r4, #0
    2db6:	6193      	str	r3, [r2, #24]
    2db8:	61d4      	str	r4, [r2, #28]
    2dba:	464b      	mov	r3, r9
    2dbc:	2b00      	cmp	r3, #0
    2dbe:	d100      	bne.n	2dc2 <pow+0xa2>
    2dc0:	e094      	b.n	2eec <pow+0x1cc>
    2dc2:	2300      	movs	r3, #0
    2dc4:	4cae      	ldr	r4, [pc, #696]	; (3080 <pow+0x360>)
    2dc6:	9300      	str	r3, [sp, #0]
    2dc8:	9401      	str	r4, [sp, #4]
    2dca:	9800      	ldr	r0, [sp, #0]
    2dcc:	9901      	ldr	r1, [sp, #4]
    2dce:	b011      	add	sp, #68	; 0x44
    2dd0:	bc3c      	pop	{r2, r3, r4, r5}
    2dd2:	4690      	mov	r8, r2
    2dd4:	4699      	mov	r9, r3
    2dd6:	46a2      	mov	sl, r4
    2dd8:	46ab      	mov	fp, r5
    2dda:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2ddc:	2300      	movs	r3, #0
    2dde:	0030      	movs	r0, r6
    2de0:	0039      	movs	r1, r7
    2de2:	f001 f8c7 	bl	3f74 <__aeabi_dcmpeq>
    2de6:	2800      	cmp	r0, #0
    2de8:	d000      	beq.n	2dec <pow+0xcc>
    2dea:	e0eb      	b.n	2fc4 <pow+0x2a4>
    2dec:	9b02      	ldr	r3, [sp, #8]
    2dee:	9c03      	ldr	r4, [sp, #12]
    2df0:	9300      	str	r3, [sp, #0]
    2df2:	9401      	str	r4, [sp, #4]
    2df4:	e7e9      	b.n	2dca <pow+0xaa>
    2df6:	9802      	ldr	r0, [sp, #8]
    2df8:	9903      	ldr	r1, [sp, #12]
    2dfa:	f000 ff7d 	bl	3cf8 <finite>
    2dfe:	4681      	mov	r9, r0
    2e00:	2800      	cmp	r0, #0
    2e02:	d100      	bne.n	2e06 <pow+0xe6>
    2e04:	e086      	b.n	2f14 <pow+0x1f4>
    2e06:	9802      	ldr	r0, [sp, #8]
    2e08:	9903      	ldr	r1, [sp, #12]
    2e0a:	2200      	movs	r2, #0
    2e0c:	2300      	movs	r3, #0
    2e0e:	f001 f8b1 	bl	3f74 <__aeabi_dcmpeq>
    2e12:	2800      	cmp	r0, #0
    2e14:	d0ea      	beq.n	2dec <pow+0xcc>
    2e16:	0020      	movs	r0, r4
    2e18:	0029      	movs	r1, r5
    2e1a:	f000 ff6d 	bl	3cf8 <finite>
    2e1e:	9a02      	ldr	r2, [sp, #8]
    2e20:	9b03      	ldr	r3, [sp, #12]
    2e22:	9200      	str	r2, [sp, #0]
    2e24:	9301      	str	r3, [sp, #4]
    2e26:	2800      	cmp	r0, #0
    2e28:	d0cf      	beq.n	2dca <pow+0xaa>
    2e2a:	0030      	movs	r0, r6
    2e2c:	0039      	movs	r1, r7
    2e2e:	f000 ff63 	bl	3cf8 <finite>
    2e32:	9a02      	ldr	r2, [sp, #8]
    2e34:	9b03      	ldr	r3, [sp, #12]
    2e36:	9200      	str	r2, [sp, #0]
    2e38:	9301      	str	r3, [sp, #4]
    2e3a:	2800      	cmp	r0, #0
    2e3c:	d0c5      	beq.n	2dca <pow+0xaa>
    2e3e:	ab06      	add	r3, sp, #24
    2e40:	4698      	mov	r8, r3
    2e42:	2304      	movs	r3, #4
    2e44:	4642      	mov	r2, r8
    2e46:	9306      	str	r3, [sp, #24]
    2e48:	4b8c      	ldr	r3, [pc, #560]	; (307c <pow+0x35c>)
    2e4a:	6094      	str	r4, [r2, #8]
    2e4c:	60d5      	str	r5, [r2, #12]
    2e4e:	6053      	str	r3, [r2, #4]
    2e50:	2300      	movs	r3, #0
    2e52:	2400      	movs	r4, #0
    2e54:	6213      	str	r3, [r2, #32]
    2e56:	2300      	movs	r3, #0
    2e58:	6193      	str	r3, [r2, #24]
    2e5a:	61d4      	str	r4, [r2, #28]
    2e5c:	465b      	mov	r3, fp
    2e5e:	781b      	ldrb	r3, [r3, #0]
    2e60:	6116      	str	r6, [r2, #16]
    2e62:	6157      	str	r7, [r2, #20]
    2e64:	b25b      	sxtb	r3, r3
    2e66:	2b02      	cmp	r3, #2
    2e68:	d004      	beq.n	2e74 <pow+0x154>
    2e6a:	4640      	mov	r0, r8
    2e6c:	f000 ff4e 	bl	3d0c <matherr>
    2e70:	2800      	cmp	r0, #0
    2e72:	d140      	bne.n	2ef6 <pow+0x1d6>
    2e74:	f003 fc74 	bl	6760 <__errno>
    2e78:	2322      	movs	r3, #34	; 0x22
    2e7a:	6003      	str	r3, [r0, #0]
    2e7c:	e03b      	b.n	2ef6 <pow+0x1d6>
    2e7e:	0030      	movs	r0, r6
    2e80:	0039      	movs	r1, r7
    2e82:	f000 ff39 	bl	3cf8 <finite>
    2e86:	9a02      	ldr	r2, [sp, #8]
    2e88:	9b03      	ldr	r3, [sp, #12]
    2e8a:	9200      	str	r2, [sp, #0]
    2e8c:	9301      	str	r3, [sp, #4]
    2e8e:	2800      	cmp	r0, #0
    2e90:	d09b      	beq.n	2dca <pow+0xaa>
    2e92:	2200      	movs	r2, #0
    2e94:	2300      	movs	r3, #0
    2e96:	0030      	movs	r0, r6
    2e98:	0039      	movs	r1, r7
    2e9a:	f001 f871 	bl	3f80 <__aeabi_dcmplt>
    2e9e:	2800      	cmp	r0, #0
    2ea0:	d100      	bne.n	2ea4 <pow+0x184>
    2ea2:	e792      	b.n	2dca <pow+0xaa>
    2ea4:	ab06      	add	r3, sp, #24
    2ea6:	4698      	mov	r8, r3
    2ea8:	2301      	movs	r3, #1
    2eaa:	4642      	mov	r2, r8
    2eac:	9306      	str	r3, [sp, #24]
    2eae:	4b73      	ldr	r3, [pc, #460]	; (307c <pow+0x35c>)
    2eb0:	6053      	str	r3, [r2, #4]
    2eb2:	4643      	mov	r3, r8
    2eb4:	9a05      	ldr	r2, [sp, #20]
    2eb6:	609c      	str	r4, [r3, #8]
    2eb8:	60dd      	str	r5, [r3, #12]
    2eba:	621a      	str	r2, [r3, #32]
    2ebc:	611e      	str	r6, [r3, #16]
    2ebe:	615f      	str	r7, [r3, #20]
    2ec0:	465b      	mov	r3, fp
    2ec2:	781b      	ldrb	r3, [r3, #0]
    2ec4:	b25b      	sxtb	r3, r3
    2ec6:	2b00      	cmp	r3, #0
    2ec8:	d00b      	beq.n	2ee2 <pow+0x1c2>
    2eca:	2000      	movs	r0, #0
    2ecc:	4642      	mov	r2, r8
    2ece:	496d      	ldr	r1, [pc, #436]	; (3084 <pow+0x364>)
    2ed0:	6190      	str	r0, [r2, #24]
    2ed2:	61d1      	str	r1, [r2, #28]
    2ed4:	2b02      	cmp	r3, #2
    2ed6:	d109      	bne.n	2eec <pow+0x1cc>
    2ed8:	f003 fc42 	bl	6760 <__errno>
    2edc:	2321      	movs	r3, #33	; 0x21
    2ede:	6003      	str	r3, [r0, #0]
    2ee0:	e009      	b.n	2ef6 <pow+0x1d6>
    2ee2:	4642      	mov	r2, r8
    2ee4:	2300      	movs	r3, #0
    2ee6:	2400      	movs	r4, #0
    2ee8:	6193      	str	r3, [r2, #24]
    2eea:	61d4      	str	r4, [r2, #28]
    2eec:	4640      	mov	r0, r8
    2eee:	f000 ff0d 	bl	3d0c <matherr>
    2ef2:	2800      	cmp	r0, #0
    2ef4:	d0f0      	beq.n	2ed8 <pow+0x1b8>
    2ef6:	4643      	mov	r3, r8
    2ef8:	6a1b      	ldr	r3, [r3, #32]
    2efa:	2b00      	cmp	r3, #0
    2efc:	d004      	beq.n	2f08 <pow+0x1e8>
    2efe:	f003 fc2f 	bl	6760 <__errno>
    2f02:	4643      	mov	r3, r8
    2f04:	6a1b      	ldr	r3, [r3, #32]
    2f06:	6003      	str	r3, [r0, #0]
    2f08:	4643      	mov	r3, r8
    2f0a:	69dc      	ldr	r4, [r3, #28]
    2f0c:	699b      	ldr	r3, [r3, #24]
    2f0e:	9300      	str	r3, [sp, #0]
    2f10:	9401      	str	r4, [sp, #4]
    2f12:	e75a      	b.n	2dca <pow+0xaa>
    2f14:	0020      	movs	r0, r4
    2f16:	0029      	movs	r1, r5
    2f18:	f000 feee 	bl	3cf8 <finite>
    2f1c:	2800      	cmp	r0, #0
    2f1e:	d100      	bne.n	2f22 <pow+0x202>
    2f20:	e771      	b.n	2e06 <pow+0xe6>
    2f22:	0030      	movs	r0, r6
    2f24:	0039      	movs	r1, r7
    2f26:	f000 fee7 	bl	3cf8 <finite>
    2f2a:	2800      	cmp	r0, #0
    2f2c:	d100      	bne.n	2f30 <pow+0x210>
    2f2e:	e76a      	b.n	2e06 <pow+0xe6>
    2f30:	9802      	ldr	r0, [sp, #8]
    2f32:	9903      	ldr	r1, [sp, #12]
    2f34:	000b      	movs	r3, r1
    2f36:	0002      	movs	r2, r0
    2f38:	f003 f8ce 	bl	60d8 <__aeabi_dcmpun>
    2f3c:	ab06      	add	r3, sp, #24
    2f3e:	4698      	mov	r8, r3
    2f40:	2800      	cmp	r0, #0
    2f42:	d17a      	bne.n	303a <pow+0x31a>
    2f44:	2303      	movs	r3, #3
    2f46:	4642      	mov	r2, r8
    2f48:	9306      	str	r3, [sp, #24]
    2f4a:	4b4c      	ldr	r3, [pc, #304]	; (307c <pow+0x35c>)
    2f4c:	6210      	str	r0, [r2, #32]
    2f4e:	6053      	str	r3, [r2, #4]
    2f50:	465b      	mov	r3, fp
    2f52:	781b      	ldrb	r3, [r3, #0]
    2f54:	6094      	str	r4, [r2, #8]
    2f56:	60d5      	str	r5, [r2, #12]
    2f58:	b25b      	sxtb	r3, r3
    2f5a:	6116      	str	r6, [r2, #16]
    2f5c:	6157      	str	r7, [r2, #20]
    2f5e:	4699      	mov	r9, r3
    2f60:	2b00      	cmp	r3, #0
    2f62:	d148      	bne.n	2ff6 <pow+0x2d6>
    2f64:	22e0      	movs	r2, #224	; 0xe0
    2f66:	4641      	mov	r1, r8
    2f68:	4b47      	ldr	r3, [pc, #284]	; (3088 <pow+0x368>)
    2f6a:	0612      	lsls	r2, r2, #24
    2f6c:	618a      	str	r2, [r1, #24]
    2f6e:	61cb      	str	r3, [r1, #28]
    2f70:	0020      	movs	r0, r4
    2f72:	2200      	movs	r2, #0
    2f74:	2300      	movs	r3, #0
    2f76:	0029      	movs	r1, r5
    2f78:	f001 f802 	bl	3f80 <__aeabi_dcmplt>
    2f7c:	2800      	cmp	r0, #0
    2f7e:	d100      	bne.n	2f82 <pow+0x262>
    2f80:	e773      	b.n	2e6a <pow+0x14a>
    2f82:	2200      	movs	r2, #0
    2f84:	4b41      	ldr	r3, [pc, #260]	; (308c <pow+0x36c>)
    2f86:	0030      	movs	r0, r6
    2f88:	0039      	movs	r1, r7
    2f8a:	f002 fad7 	bl	553c <__aeabi_dmul>
    2f8e:	0004      	movs	r4, r0
    2f90:	000d      	movs	r5, r1
    2f92:	f000 fec3 	bl	3d1c <rint>
    2f96:	0002      	movs	r2, r0
    2f98:	000b      	movs	r3, r1
    2f9a:	0020      	movs	r0, r4
    2f9c:	0029      	movs	r1, r5
    2f9e:	f000 ffe9 	bl	3f74 <__aeabi_dcmpeq>
    2fa2:	2800      	cmp	r0, #0
    2fa4:	d105      	bne.n	2fb2 <pow+0x292>
    2fa6:	22e0      	movs	r2, #224	; 0xe0
    2fa8:	4b39      	ldr	r3, [pc, #228]	; (3090 <pow+0x370>)
    2faa:	0612      	lsls	r2, r2, #24
    2fac:	4641      	mov	r1, r8
    2fae:	618a      	str	r2, [r1, #24]
    2fb0:	61cb      	str	r3, [r1, #28]
    2fb2:	465b      	mov	r3, fp
    2fb4:	781b      	ldrb	r3, [r3, #0]
    2fb6:	b25b      	sxtb	r3, r3
    2fb8:	4699      	mov	r9, r3
    2fba:	464b      	mov	r3, r9
    2fbc:	2b02      	cmp	r3, #2
    2fbe:	d000      	beq.n	2fc2 <pow+0x2a2>
    2fc0:	e753      	b.n	2e6a <pow+0x14a>
    2fc2:	e757      	b.n	2e74 <pow+0x154>
    2fc4:	ab06      	add	r3, sp, #24
    2fc6:	4698      	mov	r8, r3
    2fc8:	2301      	movs	r3, #1
    2fca:	4642      	mov	r2, r8
    2fcc:	9306      	str	r3, [sp, #24]
    2fce:	4b2b      	ldr	r3, [pc, #172]	; (307c <pow+0x35c>)
    2fd0:	6053      	str	r3, [r2, #4]
    2fd2:	4643      	mov	r3, r8
    2fd4:	609c      	str	r4, [r3, #8]
    2fd6:	60dd      	str	r5, [r3, #12]
    2fd8:	2400      	movs	r4, #0
    2fda:	9a00      	ldr	r2, [sp, #0]
    2fdc:	4d28      	ldr	r5, [pc, #160]	; (3080 <pow+0x360>)
    2fde:	621a      	str	r2, [r3, #32]
    2fe0:	611e      	str	r6, [r3, #16]
    2fe2:	615f      	str	r7, [r3, #20]
    2fe4:	619c      	str	r4, [r3, #24]
    2fe6:	61dd      	str	r5, [r3, #28]
    2fe8:	464b      	mov	r3, r9
    2fea:	9400      	str	r4, [sp, #0]
    2fec:	9501      	str	r5, [sp, #4]
    2fee:	2b02      	cmp	r3, #2
    2ff0:	d000      	beq.n	2ff4 <pow+0x2d4>
    2ff2:	e77b      	b.n	2eec <pow+0x1cc>
    2ff4:	e6e9      	b.n	2dca <pow+0xaa>
    2ff6:	2200      	movs	r2, #0
    2ff8:	4641      	mov	r1, r8
    2ffa:	4b26      	ldr	r3, [pc, #152]	; (3094 <pow+0x374>)
    2ffc:	0020      	movs	r0, r4
    2ffe:	618a      	str	r2, [r1, #24]
    3000:	61cb      	str	r3, [r1, #28]
    3002:	2200      	movs	r2, #0
    3004:	2300      	movs	r3, #0
    3006:	0029      	movs	r1, r5
    3008:	f000 ffba 	bl	3f80 <__aeabi_dcmplt>
    300c:	2800      	cmp	r0, #0
    300e:	d0d4      	beq.n	2fba <pow+0x29a>
    3010:	2200      	movs	r2, #0
    3012:	4b1e      	ldr	r3, [pc, #120]	; (308c <pow+0x36c>)
    3014:	0030      	movs	r0, r6
    3016:	0039      	movs	r1, r7
    3018:	f002 fa90 	bl	553c <__aeabi_dmul>
    301c:	0004      	movs	r4, r0
    301e:	000d      	movs	r5, r1
    3020:	f000 fe7c 	bl	3d1c <rint>
    3024:	0002      	movs	r2, r0
    3026:	000b      	movs	r3, r1
    3028:	0020      	movs	r0, r4
    302a:	0029      	movs	r1, r5
    302c:	f000 ffa2 	bl	3f74 <__aeabi_dcmpeq>
    3030:	2800      	cmp	r0, #0
    3032:	d1be      	bne.n	2fb2 <pow+0x292>
    3034:	2200      	movs	r2, #0
    3036:	4b13      	ldr	r3, [pc, #76]	; (3084 <pow+0x364>)
    3038:	e7b8      	b.n	2fac <pow+0x28c>
    303a:	2301      	movs	r3, #1
    303c:	4642      	mov	r2, r8
    303e:	9306      	str	r3, [sp, #24]
    3040:	4b0e      	ldr	r3, [pc, #56]	; (307c <pow+0x35c>)
    3042:	6053      	str	r3, [r2, #4]
    3044:	4643      	mov	r3, r8
    3046:	464a      	mov	r2, r9
    3048:	609c      	str	r4, [r3, #8]
    304a:	60dd      	str	r5, [r3, #12]
    304c:	621a      	str	r2, [r3, #32]
    304e:	611e      	str	r6, [r3, #16]
    3050:	615f      	str	r7, [r3, #20]
    3052:	2400      	movs	r4, #0
    3054:	465b      	mov	r3, fp
    3056:	571c      	ldrsb	r4, [r3, r4]
    3058:	2c00      	cmp	r4, #0
    305a:	d100      	bne.n	305e <pow+0x33e>
    305c:	e741      	b.n	2ee2 <pow+0x1c2>
    305e:	2300      	movs	r3, #0
    3060:	2200      	movs	r2, #0
    3062:	0019      	movs	r1, r3
    3064:	0010      	movs	r0, r2
    3066:	f001 fe45 	bl	4cf4 <__aeabi_ddiv>
    306a:	4643      	mov	r3, r8
    306c:	6198      	str	r0, [r3, #24]
    306e:	61d9      	str	r1, [r3, #28]
    3070:	2c02      	cmp	r4, #2
    3072:	d100      	bne.n	3076 <pow+0x356>
    3074:	e730      	b.n	2ed8 <pow+0x1b8>
    3076:	e739      	b.n	2eec <pow+0x1cc>
    3078:	20000070 	.word	0x20000070
    307c:	00006904 	.word	0x00006904
    3080:	3ff00000 	.word	0x3ff00000
    3084:	fff00000 	.word	0xfff00000
    3088:	47efffff 	.word	0x47efffff
    308c:	3fe00000 	.word	0x3fe00000
    3090:	c7efffff 	.word	0xc7efffff
    3094:	7ff00000 	.word	0x7ff00000

00003098 <__ieee754_pow>:
    3098:	b5f0      	push	{r4, r5, r6, r7, lr}
    309a:	4656      	mov	r6, sl
    309c:	464d      	mov	r5, r9
    309e:	4644      	mov	r4, r8
    30a0:	465f      	mov	r7, fp
    30a2:	b4f0      	push	{r4, r5, r6, r7}
    30a4:	001c      	movs	r4, r3
    30a6:	0013      	movs	r3, r2
    30a8:	0067      	lsls	r7, r4, #1
    30aa:	b091      	sub	sp, #68	; 0x44
    30ac:	087f      	lsrs	r7, r7, #1
    30ae:	9300      	str	r3, [sp, #0]
    30b0:	9401      	str	r4, [sp, #4]
    30b2:	0006      	movs	r6, r0
    30b4:	000d      	movs	r5, r1
    30b6:	4680      	mov	r8, r0
    30b8:	4689      	mov	r9, r1
    30ba:	46a2      	mov	sl, r4
    30bc:	433b      	orrs	r3, r7
    30be:	d032      	beq.n	3126 <__ieee754_pow+0x8e>
    30c0:	4b6e      	ldr	r3, [pc, #440]	; (327c <__ieee754_pow+0x1e4>)
    30c2:	006c      	lsls	r4, r5, #1
    30c4:	0864      	lsrs	r4, r4, #1
    30c6:	429c      	cmp	r4, r3
    30c8:	dc29      	bgt.n	311e <__ieee754_pow+0x86>
    30ca:	d026      	beq.n	311a <__ieee754_pow+0x82>
    30cc:	429f      	cmp	r7, r3
    30ce:	dc26      	bgt.n	311e <__ieee754_pow+0x86>
    30d0:	4b6a      	ldr	r3, [pc, #424]	; (327c <__ieee754_pow+0x1e4>)
    30d2:	429f      	cmp	r7, r3
    30d4:	d100      	bne.n	30d8 <__ieee754_pow+0x40>
    30d6:	e089      	b.n	31ec <__ieee754_pow+0x154>
    30d8:	2300      	movs	r3, #0
    30da:	469b      	mov	fp, r3
    30dc:	464b      	mov	r3, r9
    30de:	2b00      	cmp	r3, #0
    30e0:	da00      	bge.n	30e4 <__ieee754_pow+0x4c>
    30e2:	e087      	b.n	31f4 <__ieee754_pow+0x15c>
    30e4:	2a00      	cmp	r2, #0
    30e6:	d12f      	bne.n	3148 <__ieee754_pow+0xb0>
    30e8:	4b64      	ldr	r3, [pc, #400]	; (327c <__ieee754_pow+0x1e4>)
    30ea:	429f      	cmp	r7, r3
    30ec:	d100      	bne.n	30f0 <__ieee754_pow+0x58>
    30ee:	e09f      	b.n	3230 <__ieee754_pow+0x198>
    30f0:	4b63      	ldr	r3, [pc, #396]	; (3280 <__ieee754_pow+0x1e8>)
    30f2:	429f      	cmp	r7, r3
    30f4:	d05d      	beq.n	31b2 <__ieee754_pow+0x11a>
    30f6:	2380      	movs	r3, #128	; 0x80
    30f8:	05db      	lsls	r3, r3, #23
    30fa:	459a      	cmp	sl, r3
    30fc:	d101      	bne.n	3102 <__ieee754_pow+0x6a>
    30fe:	f000 fbc1 	bl	3884 <__ieee754_pow+0x7ec>
    3102:	4b60      	ldr	r3, [pc, #384]	; (3284 <__ieee754_pow+0x1ec>)
    3104:	459a      	cmp	sl, r3
    3106:	d11f      	bne.n	3148 <__ieee754_pow+0xb0>
    3108:	464b      	mov	r3, r9
    310a:	2b00      	cmp	r3, #0
    310c:	db1c      	blt.n	3148 <__ieee754_pow+0xb0>
    310e:	0030      	movs	r0, r6
    3110:	0029      	movs	r1, r5
    3112:	f000 fcf7 	bl	3b04 <__ieee754_sqrt>
    3116:	0006      	movs	r6, r0
    3118:	e007      	b.n	312a <__ieee754_pow+0x92>
    311a:	2800      	cmp	r0, #0
    311c:	d00d      	beq.n	313a <__ieee754_pow+0xa2>
    311e:	4b5a      	ldr	r3, [pc, #360]	; (3288 <__ieee754_pow+0x1f0>)
    3120:	18e0      	adds	r0, r4, r3
    3122:	4330      	orrs	r0, r6
    3124:	d10b      	bne.n	313e <__ieee754_pow+0xa6>
    3126:	2600      	movs	r6, #0
    3128:	4955      	ldr	r1, [pc, #340]	; (3280 <__ieee754_pow+0x1e8>)
    312a:	0030      	movs	r0, r6
    312c:	b011      	add	sp, #68	; 0x44
    312e:	bc3c      	pop	{r2, r3, r4, r5}
    3130:	4690      	mov	r8, r2
    3132:	4699      	mov	r9, r3
    3134:	46a2      	mov	sl, r4
    3136:	46ab      	mov	fp, r5
    3138:	bdf0      	pop	{r4, r5, r6, r7, pc}
    313a:	42a7      	cmp	r7, r4
    313c:	ddc8      	ble.n	30d0 <__ieee754_pow+0x38>
    313e:	4853      	ldr	r0, [pc, #332]	; (328c <__ieee754_pow+0x1f4>)
    3140:	f000 fde6 	bl	3d10 <nan>
    3144:	0006      	movs	r6, r0
    3146:	e7f0      	b.n	312a <__ieee754_pow+0x92>
    3148:	0030      	movs	r0, r6
    314a:	0029      	movs	r1, r5
    314c:	f000 fdd0 	bl	3cf0 <fabs>
    3150:	4643      	mov	r3, r8
    3152:	2b00      	cmp	r3, #0
    3154:	d01d      	beq.n	3192 <__ieee754_pow+0xfa>
    3156:	0feb      	lsrs	r3, r5, #31
    3158:	3b01      	subs	r3, #1
    315a:	4698      	mov	r8, r3
    315c:	465b      	mov	r3, fp
    315e:	4642      	mov	r2, r8
    3160:	4313      	orrs	r3, r2
    3162:	d079      	beq.n	3258 <__ieee754_pow+0x1c0>
    3164:	4b4a      	ldr	r3, [pc, #296]	; (3290 <__ieee754_pow+0x1f8>)
    3166:	429f      	cmp	r7, r3
    3168:	dc00      	bgt.n	316c <__ieee754_pow+0xd4>
    316a:	e09f      	b.n	32ac <__ieee754_pow+0x214>
    316c:	4b49      	ldr	r3, [pc, #292]	; (3294 <__ieee754_pow+0x1fc>)
    316e:	429f      	cmp	r7, r3
    3170:	dc01      	bgt.n	3176 <__ieee754_pow+0xde>
    3172:	f000 fbce 	bl	3912 <__ieee754_pow+0x87a>
    3176:	4b48      	ldr	r3, [pc, #288]	; (3298 <__ieee754_pow+0x200>)
    3178:	429c      	cmp	r4, r3
    317a:	dd79      	ble.n	3270 <__ieee754_pow+0x1d8>
    317c:	4653      	mov	r3, sl
    317e:	2b00      	cmp	r3, #0
    3180:	dd79      	ble.n	3276 <__ieee754_pow+0x1de>
    3182:	4a46      	ldr	r2, [pc, #280]	; (329c <__ieee754_pow+0x204>)
    3184:	4b46      	ldr	r3, [pc, #280]	; (32a0 <__ieee754_pow+0x208>)
    3186:	0010      	movs	r0, r2
    3188:	0019      	movs	r1, r3
    318a:	f002 f9d7 	bl	553c <__aeabi_dmul>
    318e:	0006      	movs	r6, r0
    3190:	e7cb      	b.n	312a <__ieee754_pow+0x92>
    3192:	2c00      	cmp	r4, #0
    3194:	d004      	beq.n	31a0 <__ieee754_pow+0x108>
    3196:	4a3a      	ldr	r2, [pc, #232]	; (3280 <__ieee754_pow+0x1e8>)
    3198:	00ab      	lsls	r3, r5, #2
    319a:	089b      	lsrs	r3, r3, #2
    319c:	4293      	cmp	r3, r2
    319e:	d1da      	bne.n	3156 <__ieee754_pow+0xbe>
    31a0:	4653      	mov	r3, sl
    31a2:	2b00      	cmp	r3, #0
    31a4:	da00      	bge.n	31a8 <__ieee754_pow+0x110>
    31a6:	e3ad      	b.n	3904 <__ieee754_pow+0x86c>
    31a8:	464b      	mov	r3, r9
    31aa:	2b00      	cmp	r3, #0
    31ac:	db0d      	blt.n	31ca <__ieee754_pow+0x132>
    31ae:	0006      	movs	r6, r0
    31b0:	e7bb      	b.n	312a <__ieee754_pow+0x92>
    31b2:	4653      	mov	r3, sl
    31b4:	0029      	movs	r1, r5
    31b6:	2b00      	cmp	r3, #0
    31b8:	dab7      	bge.n	312a <__ieee754_pow+0x92>
    31ba:	0032      	movs	r2, r6
    31bc:	002b      	movs	r3, r5
    31be:	2000      	movs	r0, #0
    31c0:	492f      	ldr	r1, [pc, #188]	; (3280 <__ieee754_pow+0x1e8>)
    31c2:	f001 fd97 	bl	4cf4 <__aeabi_ddiv>
    31c6:	0006      	movs	r6, r0
    31c8:	e7af      	b.n	312a <__ieee754_pow+0x92>
    31ca:	4b2f      	ldr	r3, [pc, #188]	; (3288 <__ieee754_pow+0x1f0>)
    31cc:	469c      	mov	ip, r3
    31ce:	465b      	mov	r3, fp
    31d0:	4464      	add	r4, ip
    31d2:	431c      	orrs	r4, r3
    31d4:	d101      	bne.n	31da <__ieee754_pow+0x142>
    31d6:	f000 fc2b 	bl	3a30 <__ieee754_pow+0x998>
    31da:	465b      	mov	r3, fp
    31dc:	0006      	movs	r6, r0
    31de:	2b01      	cmp	r3, #1
    31e0:	d1a3      	bne.n	312a <__ieee754_pow+0x92>
    31e2:	2380      	movs	r3, #128	; 0x80
    31e4:	061b      	lsls	r3, r3, #24
    31e6:	469c      	mov	ip, r3
    31e8:	4461      	add	r1, ip
    31ea:	e79e      	b.n	312a <__ieee754_pow+0x92>
    31ec:	2a00      	cmp	r2, #0
    31ee:	d100      	bne.n	31f2 <__ieee754_pow+0x15a>
    31f0:	e772      	b.n	30d8 <__ieee754_pow+0x40>
    31f2:	e794      	b.n	311e <__ieee754_pow+0x86>
    31f4:	4b2b      	ldr	r3, [pc, #172]	; (32a4 <__ieee754_pow+0x20c>)
    31f6:	429f      	cmp	r7, r3
    31f8:	dc2b      	bgt.n	3252 <__ieee754_pow+0x1ba>
    31fa:	4b27      	ldr	r3, [pc, #156]	; (3298 <__ieee754_pow+0x200>)
    31fc:	429f      	cmp	r7, r3
    31fe:	dc00      	bgt.n	3202 <__ieee754_pow+0x16a>
    3200:	e770      	b.n	30e4 <__ieee754_pow+0x4c>
    3202:	4929      	ldr	r1, [pc, #164]	; (32a8 <__ieee754_pow+0x210>)
    3204:	153b      	asrs	r3, r7, #20
    3206:	468c      	mov	ip, r1
    3208:	4463      	add	r3, ip
    320a:	2b14      	cmp	r3, #20
    320c:	dc01      	bgt.n	3212 <__ieee754_pow+0x17a>
    320e:	f000 fbf2 	bl	39f6 <__ieee754_pow+0x95e>
    3212:	2134      	movs	r1, #52	; 0x34
    3214:	1acb      	subs	r3, r1, r3
    3216:	9900      	ldr	r1, [sp, #0]
    3218:	40d9      	lsrs	r1, r3
    321a:	0008      	movs	r0, r1
    321c:	4098      	lsls	r0, r3
    321e:	4282      	cmp	r2, r0
    3220:	d000      	beq.n	3224 <__ieee754_pow+0x18c>
    3222:	e75f      	b.n	30e4 <__ieee754_pow+0x4c>
    3224:	2301      	movs	r3, #1
    3226:	4019      	ands	r1, r3
    3228:	3301      	adds	r3, #1
    322a:	1a5b      	subs	r3, r3, r1
    322c:	469b      	mov	fp, r3
    322e:	e759      	b.n	30e4 <__ieee754_pow+0x4c>
    3230:	4b15      	ldr	r3, [pc, #84]	; (3288 <__ieee754_pow+0x1f0>)
    3232:	18e0      	adds	r0, r4, r3
    3234:	4306      	orrs	r6, r0
    3236:	d100      	bne.n	323a <__ieee754_pow+0x1a2>
    3238:	e775      	b.n	3126 <__ieee754_pow+0x8e>
    323a:	4b17      	ldr	r3, [pc, #92]	; (3298 <__ieee754_pow+0x200>)
    323c:	429c      	cmp	r4, r3
    323e:	dc00      	bgt.n	3242 <__ieee754_pow+0x1aa>
    3240:	e351      	b.n	38e6 <__ieee754_pow+0x84e>
    3242:	4653      	mov	r3, sl
    3244:	2b00      	cmp	r3, #0
    3246:	db16      	blt.n	3276 <__ieee754_pow+0x1de>
    3248:	9b00      	ldr	r3, [sp, #0]
    324a:	9c01      	ldr	r4, [sp, #4]
    324c:	001e      	movs	r6, r3
    324e:	0021      	movs	r1, r4
    3250:	e76b      	b.n	312a <__ieee754_pow+0x92>
    3252:	2302      	movs	r3, #2
    3254:	469b      	mov	fp, r3
    3256:	e745      	b.n	30e4 <__ieee754_pow+0x4c>
    3258:	0032      	movs	r2, r6
    325a:	002b      	movs	r3, r5
    325c:	0030      	movs	r0, r6
    325e:	0029      	movs	r1, r5
    3260:	f002 fbe6 	bl	5a30 <__aeabi_dsub>
    3264:	0002      	movs	r2, r0
    3266:	000b      	movs	r3, r1
    3268:	f001 fd44 	bl	4cf4 <__aeabi_ddiv>
    326c:	0006      	movs	r6, r0
    326e:	e75c      	b.n	312a <__ieee754_pow+0x92>
    3270:	4653      	mov	r3, sl
    3272:	2b00      	cmp	r3, #0
    3274:	db85      	blt.n	3182 <__ieee754_pow+0xea>
    3276:	2600      	movs	r6, #0
    3278:	2100      	movs	r1, #0
    327a:	e756      	b.n	312a <__ieee754_pow+0x92>
    327c:	7ff00000 	.word	0x7ff00000
    3280:	3ff00000 	.word	0x3ff00000
    3284:	3fe00000 	.word	0x3fe00000
    3288:	c0100000 	.word	0xc0100000
    328c:	00006908 	.word	0x00006908
    3290:	41e00000 	.word	0x41e00000
    3294:	43f00000 	.word	0x43f00000
    3298:	3fefffff 	.word	0x3fefffff
    329c:	8800759c 	.word	0x8800759c
    32a0:	7e37e43c 	.word	0x7e37e43c
    32a4:	433fffff 	.word	0x433fffff
    32a8:	fffffc01 	.word	0xfffffc01
    32ac:	4be8      	ldr	r3, [pc, #928]	; (3650 <__ieee754_pow+0x5b8>)
    32ae:	2200      	movs	r2, #0
    32b0:	429c      	cmp	r4, r3
    32b2:	dc06      	bgt.n	32c2 <__ieee754_pow+0x22a>
    32b4:	2200      	movs	r2, #0
    32b6:	4be7      	ldr	r3, [pc, #924]	; (3654 <__ieee754_pow+0x5bc>)
    32b8:	f002 f940 	bl	553c <__aeabi_dmul>
    32bc:	2235      	movs	r2, #53	; 0x35
    32be:	000c      	movs	r4, r1
    32c0:	4252      	negs	r2, r2
    32c2:	4de5      	ldr	r5, [pc, #916]	; (3658 <__ieee754_pow+0x5c0>)
    32c4:	1523      	asrs	r3, r4, #20
    32c6:	46ac      	mov	ip, r5
    32c8:	4463      	add	r3, ip
    32ca:	4699      	mov	r9, r3
    32cc:	0324      	lsls	r4, r4, #12
    32ce:	4de3      	ldr	r5, [pc, #908]	; (365c <__ieee754_pow+0x5c4>)
    32d0:	4be3      	ldr	r3, [pc, #908]	; (3660 <__ieee754_pow+0x5c8>)
    32d2:	0b24      	lsrs	r4, r4, #12
    32d4:	4491      	add	r9, r2
    32d6:	4325      	orrs	r5, r4
    32d8:	429c      	cmp	r4, r3
    32da:	dd09      	ble.n	32f0 <__ieee754_pow+0x258>
    32dc:	4be1      	ldr	r3, [pc, #900]	; (3664 <__ieee754_pow+0x5cc>)
    32de:	429c      	cmp	r4, r3
    32e0:	dc00      	bgt.n	32e4 <__ieee754_pow+0x24c>
    32e2:	e3a9      	b.n	3a38 <__ieee754_pow+0x9a0>
    32e4:	2301      	movs	r3, #1
    32e6:	469c      	mov	ip, r3
    32e8:	4bdf      	ldr	r3, [pc, #892]	; (3668 <__ieee754_pow+0x5d0>)
    32ea:	44e1      	add	r9, ip
    32ec:	469c      	mov	ip, r3
    32ee:	4465      	add	r5, ip
    32f0:	2300      	movs	r3, #0
    32f2:	2400      	movs	r4, #0
    32f4:	2200      	movs	r2, #0
    32f6:	9308      	str	r3, [sp, #32]
    32f8:	9409      	str	r4, [sp, #36]	; 0x24
    32fa:	930c      	str	r3, [sp, #48]	; 0x30
    32fc:	940d      	str	r4, [sp, #52]	; 0x34
    32fe:	2400      	movs	r4, #0
    3300:	4bd6      	ldr	r3, [pc, #856]	; (365c <__ieee754_pow+0x5c4>)
    3302:	9206      	str	r2, [sp, #24]
    3304:	9307      	str	r3, [sp, #28]
    3306:	9a06      	ldr	r2, [sp, #24]
    3308:	9b07      	ldr	r3, [sp, #28]
    330a:	0029      	movs	r1, r5
    330c:	900a      	str	r0, [sp, #40]	; 0x28
    330e:	910b      	str	r1, [sp, #44]	; 0x2c
    3310:	f002 fb8e 	bl	5a30 <__aeabi_dsub>
    3314:	9a06      	ldr	r2, [sp, #24]
    3316:	9b07      	ldr	r3, [sp, #28]
    3318:	0006      	movs	r6, r0
    331a:	000f      	movs	r7, r1
    331c:	980a      	ldr	r0, [sp, #40]	; 0x28
    331e:	990b      	ldr	r1, [sp, #44]	; 0x2c
    3320:	f001 f9bc 	bl	469c <__aeabi_dadd>
    3324:	0002      	movs	r2, r0
    3326:	000b      	movs	r3, r1
    3328:	2000      	movs	r0, #0
    332a:	49cc      	ldr	r1, [pc, #816]	; (365c <__ieee754_pow+0x5c4>)
    332c:	f001 fce2 	bl	4cf4 <__aeabi_ddiv>
    3330:	000a      	movs	r2, r1
    3332:	0001      	movs	r1, r0
    3334:	0013      	movs	r3, r2
    3336:	910e      	str	r1, [sp, #56]	; 0x38
    3338:	920f      	str	r2, [sp, #60]	; 0x3c
    333a:	0002      	movs	r2, r0
    333c:	0039      	movs	r1, r7
    333e:	0030      	movs	r0, r6
    3340:	f002 f8fc 	bl	553c <__aeabi_dmul>
    3344:	000a      	movs	r2, r1
    3346:	0001      	movs	r1, r0
    3348:	2080      	movs	r0, #128	; 0x80
    334a:	9104      	str	r1, [sp, #16]
    334c:	9205      	str	r2, [sp, #20]
    334e:	0013      	movs	r3, r2
    3350:	2200      	movs	r2, #0
    3352:	2180      	movs	r1, #128	; 0x80
    3354:	0300      	lsls	r0, r0, #12
    3356:	4684      	mov	ip, r0
    3358:	9202      	str	r2, [sp, #8]
    335a:	9303      	str	r3, [sp, #12]
    335c:	2200      	movs	r2, #0
    335e:	0589      	lsls	r1, r1, #22
    3360:	106d      	asrs	r5, r5, #1
    3362:	430d      	orrs	r5, r1
    3364:	4465      	add	r5, ip
    3366:	192b      	adds	r3, r5, r4
    3368:	9802      	ldr	r0, [sp, #8]
    336a:	9903      	ldr	r1, [sp, #12]
    336c:	0014      	movs	r4, r2
    336e:	001d      	movs	r5, r3
    3370:	f002 f8e4 	bl	553c <__aeabi_dmul>
    3374:	0002      	movs	r2, r0
    3376:	000b      	movs	r3, r1
    3378:	0030      	movs	r0, r6
    337a:	0039      	movs	r1, r7
    337c:	f002 fb58 	bl	5a30 <__aeabi_dsub>
    3380:	9a06      	ldr	r2, [sp, #24]
    3382:	9b07      	ldr	r3, [sp, #28]
    3384:	0006      	movs	r6, r0
    3386:	000f      	movs	r7, r1
    3388:	0020      	movs	r0, r4
    338a:	0029      	movs	r1, r5
    338c:	f002 fb50 	bl	5a30 <__aeabi_dsub>
    3390:	0002      	movs	r2, r0
    3392:	000b      	movs	r3, r1
    3394:	980a      	ldr	r0, [sp, #40]	; 0x28
    3396:	990b      	ldr	r1, [sp, #44]	; 0x2c
    3398:	f002 fb4a 	bl	5a30 <__aeabi_dsub>
    339c:	9a02      	ldr	r2, [sp, #8]
    339e:	9b03      	ldr	r3, [sp, #12]
    33a0:	f002 f8cc 	bl	553c <__aeabi_dmul>
    33a4:	0002      	movs	r2, r0
    33a6:	000b      	movs	r3, r1
    33a8:	0030      	movs	r0, r6
    33aa:	0039      	movs	r1, r7
    33ac:	f002 fb40 	bl	5a30 <__aeabi_dsub>
    33b0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    33b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    33b4:	f002 f8c2 	bl	553c <__aeabi_dmul>
    33b8:	9d04      	ldr	r5, [sp, #16]
    33ba:	9e05      	ldr	r6, [sp, #20]
    33bc:	9006      	str	r0, [sp, #24]
    33be:	9107      	str	r1, [sp, #28]
    33c0:	002a      	movs	r2, r5
    33c2:	0033      	movs	r3, r6
    33c4:	0028      	movs	r0, r5
    33c6:	0031      	movs	r1, r6
    33c8:	f002 f8b8 	bl	553c <__aeabi_dmul>
    33cc:	0006      	movs	r6, r0
    33ce:	000f      	movs	r7, r1
    33d0:	4aa6      	ldr	r2, [pc, #664]	; (366c <__ieee754_pow+0x5d4>)
    33d2:	4ba7      	ldr	r3, [pc, #668]	; (3670 <__ieee754_pow+0x5d8>)
    33d4:	f002 f8b2 	bl	553c <__aeabi_dmul>
    33d8:	4aa6      	ldr	r2, [pc, #664]	; (3674 <__ieee754_pow+0x5dc>)
    33da:	4ba7      	ldr	r3, [pc, #668]	; (3678 <__ieee754_pow+0x5e0>)
    33dc:	f001 f95e 	bl	469c <__aeabi_dadd>
    33e0:	0032      	movs	r2, r6
    33e2:	003b      	movs	r3, r7
    33e4:	f002 f8aa 	bl	553c <__aeabi_dmul>
    33e8:	4aa4      	ldr	r2, [pc, #656]	; (367c <__ieee754_pow+0x5e4>)
    33ea:	4ba5      	ldr	r3, [pc, #660]	; (3680 <__ieee754_pow+0x5e8>)
    33ec:	f001 f956 	bl	469c <__aeabi_dadd>
    33f0:	0032      	movs	r2, r6
    33f2:	003b      	movs	r3, r7
    33f4:	f002 f8a2 	bl	553c <__aeabi_dmul>
    33f8:	4aa2      	ldr	r2, [pc, #648]	; (3684 <__ieee754_pow+0x5ec>)
    33fa:	4ba3      	ldr	r3, [pc, #652]	; (3688 <__ieee754_pow+0x5f0>)
    33fc:	f001 f94e 	bl	469c <__aeabi_dadd>
    3400:	0032      	movs	r2, r6
    3402:	003b      	movs	r3, r7
    3404:	f002 f89a 	bl	553c <__aeabi_dmul>
    3408:	4aa0      	ldr	r2, [pc, #640]	; (368c <__ieee754_pow+0x5f4>)
    340a:	4ba1      	ldr	r3, [pc, #644]	; (3690 <__ieee754_pow+0x5f8>)
    340c:	f001 f946 	bl	469c <__aeabi_dadd>
    3410:	0032      	movs	r2, r6
    3412:	003b      	movs	r3, r7
    3414:	f002 f892 	bl	553c <__aeabi_dmul>
    3418:	4a9e      	ldr	r2, [pc, #632]	; (3694 <__ieee754_pow+0x5fc>)
    341a:	4b9f      	ldr	r3, [pc, #636]	; (3698 <__ieee754_pow+0x600>)
    341c:	f001 f93e 	bl	469c <__aeabi_dadd>
    3420:	0032      	movs	r2, r6
    3422:	0004      	movs	r4, r0
    3424:	000d      	movs	r5, r1
    3426:	003b      	movs	r3, r7
    3428:	0030      	movs	r0, r6
    342a:	0039      	movs	r1, r7
    342c:	f002 f886 	bl	553c <__aeabi_dmul>
    3430:	0002      	movs	r2, r0
    3432:	000b      	movs	r3, r1
    3434:	0020      	movs	r0, r4
    3436:	0029      	movs	r1, r5
    3438:	f002 f880 	bl	553c <__aeabi_dmul>
    343c:	9e02      	ldr	r6, [sp, #8]
    343e:	9f03      	ldr	r7, [sp, #12]
    3440:	0004      	movs	r4, r0
    3442:	000d      	movs	r5, r1
    3444:	9804      	ldr	r0, [sp, #16]
    3446:	9905      	ldr	r1, [sp, #20]
    3448:	0032      	movs	r2, r6
    344a:	003b      	movs	r3, r7
    344c:	f001 f926 	bl	469c <__aeabi_dadd>
    3450:	9a06      	ldr	r2, [sp, #24]
    3452:	9b07      	ldr	r3, [sp, #28]
    3454:	f002 f872 	bl	553c <__aeabi_dmul>
    3458:	0022      	movs	r2, r4
    345a:	002b      	movs	r3, r5
    345c:	f001 f91e 	bl	469c <__aeabi_dadd>
    3460:	0032      	movs	r2, r6
    3462:	900a      	str	r0, [sp, #40]	; 0x28
    3464:	910b      	str	r1, [sp, #44]	; 0x2c
    3466:	003b      	movs	r3, r7
    3468:	0030      	movs	r0, r6
    346a:	0039      	movs	r1, r7
    346c:	9602      	str	r6, [sp, #8]
    346e:	9703      	str	r7, [sp, #12]
    3470:	f002 f864 	bl	553c <__aeabi_dmul>
    3474:	2200      	movs	r2, #0
    3476:	4b89      	ldr	r3, [pc, #548]	; (369c <__ieee754_pow+0x604>)
    3478:	0004      	movs	r4, r0
    347a:	000d      	movs	r5, r1
    347c:	f001 f90e 	bl	469c <__aeabi_dadd>
    3480:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    3482:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    3484:	f001 f90a 	bl	469c <__aeabi_dadd>
    3488:	2600      	movs	r6, #0
    348a:	000f      	movs	r7, r1
    348c:	0032      	movs	r2, r6
    348e:	000b      	movs	r3, r1
    3490:	9802      	ldr	r0, [sp, #8]
    3492:	9903      	ldr	r1, [sp, #12]
    3494:	f002 f852 	bl	553c <__aeabi_dmul>
    3498:	2200      	movs	r2, #0
    349a:	9002      	str	r0, [sp, #8]
    349c:	9103      	str	r1, [sp, #12]
    349e:	4b7f      	ldr	r3, [pc, #508]	; (369c <__ieee754_pow+0x604>)
    34a0:	0030      	movs	r0, r6
    34a2:	0039      	movs	r1, r7
    34a4:	f002 fac4 	bl	5a30 <__aeabi_dsub>
    34a8:	0022      	movs	r2, r4
    34aa:	002b      	movs	r3, r5
    34ac:	f002 fac0 	bl	5a30 <__aeabi_dsub>
    34b0:	0002      	movs	r2, r0
    34b2:	000b      	movs	r3, r1
    34b4:	980a      	ldr	r0, [sp, #40]	; 0x28
    34b6:	990b      	ldr	r1, [sp, #44]	; 0x2c
    34b8:	f002 faba 	bl	5a30 <__aeabi_dsub>
    34bc:	9a04      	ldr	r2, [sp, #16]
    34be:	9b05      	ldr	r3, [sp, #20]
    34c0:	f002 f83c 	bl	553c <__aeabi_dmul>
    34c4:	0032      	movs	r2, r6
    34c6:	0004      	movs	r4, r0
    34c8:	000d      	movs	r5, r1
    34ca:	9806      	ldr	r0, [sp, #24]
    34cc:	9907      	ldr	r1, [sp, #28]
    34ce:	003b      	movs	r3, r7
    34d0:	f002 f834 	bl	553c <__aeabi_dmul>
    34d4:	0002      	movs	r2, r0
    34d6:	000b      	movs	r3, r1
    34d8:	0020      	movs	r0, r4
    34da:	0029      	movs	r1, r5
    34dc:	f001 f8de 	bl	469c <__aeabi_dadd>
    34e0:	0004      	movs	r4, r0
    34e2:	000d      	movs	r5, r1
    34e4:	0002      	movs	r2, r0
    34e6:	000b      	movs	r3, r1
    34e8:	9802      	ldr	r0, [sp, #8]
    34ea:	9903      	ldr	r1, [sp, #12]
    34ec:	f001 f8d6 	bl	469c <__aeabi_dadd>
    34f0:	2600      	movs	r6, #0
    34f2:	22e0      	movs	r2, #224	; 0xe0
    34f4:	4b6a      	ldr	r3, [pc, #424]	; (36a0 <__ieee754_pow+0x608>)
    34f6:	0612      	lsls	r2, r2, #24
    34f8:	0030      	movs	r0, r6
    34fa:	000f      	movs	r7, r1
    34fc:	f002 f81e 	bl	553c <__aeabi_dmul>
    3500:	9a02      	ldr	r2, [sp, #8]
    3502:	9b03      	ldr	r3, [sp, #12]
    3504:	9004      	str	r0, [sp, #16]
    3506:	9105      	str	r1, [sp, #20]
    3508:	0030      	movs	r0, r6
    350a:	0039      	movs	r1, r7
    350c:	f002 fa90 	bl	5a30 <__aeabi_dsub>
    3510:	0002      	movs	r2, r0
    3512:	000b      	movs	r3, r1
    3514:	0020      	movs	r0, r4
    3516:	0029      	movs	r1, r5
    3518:	f002 fa8a 	bl	5a30 <__aeabi_dsub>
    351c:	4a61      	ldr	r2, [pc, #388]	; (36a4 <__ieee754_pow+0x60c>)
    351e:	4b60      	ldr	r3, [pc, #384]	; (36a0 <__ieee754_pow+0x608>)
    3520:	f002 f80c 	bl	553c <__aeabi_dmul>
    3524:	4a60      	ldr	r2, [pc, #384]	; (36a8 <__ieee754_pow+0x610>)
    3526:	0004      	movs	r4, r0
    3528:	000d      	movs	r5, r1
    352a:	4b60      	ldr	r3, [pc, #384]	; (36ac <__ieee754_pow+0x614>)
    352c:	0030      	movs	r0, r6
    352e:	0039      	movs	r1, r7
    3530:	f002 f804 	bl	553c <__aeabi_dmul>
    3534:	0002      	movs	r2, r0
    3536:	000b      	movs	r3, r1
    3538:	0020      	movs	r0, r4
    353a:	0029      	movs	r1, r5
    353c:	f001 f8ae 	bl	469c <__aeabi_dadd>
    3540:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    3542:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    3544:	f001 f8aa 	bl	469c <__aeabi_dadd>
    3548:	0006      	movs	r6, r0
    354a:	4648      	mov	r0, r9
    354c:	000f      	movs	r7, r1
    354e:	f002 fe19 	bl	6184 <__aeabi_i2d>
    3552:	0004      	movs	r4, r0
    3554:	000d      	movs	r5, r1
    3556:	9804      	ldr	r0, [sp, #16]
    3558:	9905      	ldr	r1, [sp, #20]
    355a:	0032      	movs	r2, r6
    355c:	003b      	movs	r3, r7
    355e:	f001 f89d 	bl	469c <__aeabi_dadd>
    3562:	9a08      	ldr	r2, [sp, #32]
    3564:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3566:	f001 f899 	bl	469c <__aeabi_dadd>
    356a:	0022      	movs	r2, r4
    356c:	002b      	movs	r3, r5
    356e:	f001 f895 	bl	469c <__aeabi_dadd>
    3572:	2000      	movs	r0, #0
    3574:	0022      	movs	r2, r4
    3576:	002b      	movs	r3, r5
    3578:	9002      	str	r0, [sp, #8]
    357a:	9103      	str	r1, [sp, #12]
    357c:	f002 fa58 	bl	5a30 <__aeabi_dsub>
    3580:	9a08      	ldr	r2, [sp, #32]
    3582:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3584:	f002 fa54 	bl	5a30 <__aeabi_dsub>
    3588:	9a04      	ldr	r2, [sp, #16]
    358a:	9b05      	ldr	r3, [sp, #20]
    358c:	f002 fa50 	bl	5a30 <__aeabi_dsub>
    3590:	0002      	movs	r2, r0
    3592:	000b      	movs	r3, r1
    3594:	0030      	movs	r0, r6
    3596:	0039      	movs	r1, r7
    3598:	f002 fa4a 	bl	5a30 <__aeabi_dsub>
    359c:	9004      	str	r0, [sp, #16]
    359e:	9105      	str	r1, [sp, #20]
    35a0:	465b      	mov	r3, fp
    35a2:	4642      	mov	r2, r8
    35a4:	3b01      	subs	r3, #1
    35a6:	4313      	orrs	r3, r2
    35a8:	d100      	bne.n	35ac <__ieee754_pow+0x514>
    35aa:	e197      	b.n	38dc <__ieee754_pow+0x844>
    35ac:	2300      	movs	r3, #0
    35ae:	4c2b      	ldr	r4, [pc, #172]	; (365c <__ieee754_pow+0x5c4>)
    35b0:	9306      	str	r3, [sp, #24]
    35b2:	9407      	str	r4, [sp, #28]
    35b4:	9800      	ldr	r0, [sp, #0]
    35b6:	9901      	ldr	r1, [sp, #4]
    35b8:	2600      	movs	r6, #0
    35ba:	000b      	movs	r3, r1
    35bc:	0032      	movs	r2, r6
    35be:	000f      	movs	r7, r1
    35c0:	f002 fa36 	bl	5a30 <__aeabi_dsub>
    35c4:	9a02      	ldr	r2, [sp, #8]
    35c6:	9b03      	ldr	r3, [sp, #12]
    35c8:	f001 ffb8 	bl	553c <__aeabi_dmul>
    35cc:	9a00      	ldr	r2, [sp, #0]
    35ce:	9b01      	ldr	r3, [sp, #4]
    35d0:	0004      	movs	r4, r0
    35d2:	000d      	movs	r5, r1
    35d4:	9804      	ldr	r0, [sp, #16]
    35d6:	9905      	ldr	r1, [sp, #20]
    35d8:	f001 ffb0 	bl	553c <__aeabi_dmul>
    35dc:	0002      	movs	r2, r0
    35de:	000b      	movs	r3, r1
    35e0:	0020      	movs	r0, r4
    35e2:	0029      	movs	r1, r5
    35e4:	f001 f85a 	bl	469c <__aeabi_dadd>
    35e8:	0004      	movs	r4, r0
    35ea:	000d      	movs	r5, r1
    35ec:	9802      	ldr	r0, [sp, #8]
    35ee:	9903      	ldr	r1, [sp, #12]
    35f0:	003b      	movs	r3, r7
    35f2:	0032      	movs	r2, r6
    35f4:	9404      	str	r4, [sp, #16]
    35f6:	9505      	str	r5, [sp, #20]
    35f8:	f001 ffa0 	bl	553c <__aeabi_dmul>
    35fc:	9000      	str	r0, [sp, #0]
    35fe:	9101      	str	r1, [sp, #4]
    3600:	000b      	movs	r3, r1
    3602:	0002      	movs	r2, r0
    3604:	0029      	movs	r1, r5
    3606:	0020      	movs	r0, r4
    3608:	f001 f848 	bl	469c <__aeabi_dadd>
    360c:	4b28      	ldr	r3, [pc, #160]	; (36b0 <__ieee754_pow+0x618>)
    360e:	4681      	mov	r9, r0
    3610:	1e0f      	subs	r7, r1, #0
    3612:	468a      	mov	sl, r1
    3614:	429f      	cmp	r7, r3
    3616:	dc00      	bgt.n	361a <__ieee754_pow+0x582>
    3618:	e13c      	b.n	3894 <__ieee754_pow+0x7fc>
    361a:	4b26      	ldr	r3, [pc, #152]	; (36b4 <__ieee754_pow+0x61c>)
    361c:	18cb      	adds	r3, r1, r3
    361e:	4303      	orrs	r3, r0
    3620:	d000      	beq.n	3624 <__ieee754_pow+0x58c>
    3622:	e1db      	b.n	39dc <__ieee754_pow+0x944>
    3624:	9804      	ldr	r0, [sp, #16]
    3626:	9905      	ldr	r1, [sp, #20]
    3628:	4a23      	ldr	r2, [pc, #140]	; (36b8 <__ieee754_pow+0x620>)
    362a:	4b24      	ldr	r3, [pc, #144]	; (36bc <__ieee754_pow+0x624>)
    362c:	f001 f836 	bl	469c <__aeabi_dadd>
    3630:	9a00      	ldr	r2, [sp, #0]
    3632:	9b01      	ldr	r3, [sp, #4]
    3634:	0004      	movs	r4, r0
    3636:	000d      	movs	r5, r1
    3638:	4648      	mov	r0, r9
    363a:	0039      	movs	r1, r7
    363c:	f002 f9f8 	bl	5a30 <__aeabi_dsub>
    3640:	0002      	movs	r2, r0
    3642:	000b      	movs	r3, r1
    3644:	0020      	movs	r0, r4
    3646:	0029      	movs	r1, r5
    3648:	f000 fcae 	bl	3fa8 <__aeabi_dcmpgt>
    364c:	003e      	movs	r6, r7
    364e:	e037      	b.n	36c0 <__ieee754_pow+0x628>
    3650:	000fffff 	.word	0x000fffff
    3654:	43400000 	.word	0x43400000
    3658:	fffffc01 	.word	0xfffffc01
    365c:	3ff00000 	.word	0x3ff00000
    3660:	0003988e 	.word	0x0003988e
    3664:	000bb679 	.word	0x000bb679
    3668:	fff00000 	.word	0xfff00000
    366c:	4a454eef 	.word	0x4a454eef
    3670:	3fca7e28 	.word	0x3fca7e28
    3674:	93c9db65 	.word	0x93c9db65
    3678:	3fcd864a 	.word	0x3fcd864a
    367c:	a91d4101 	.word	0xa91d4101
    3680:	3fd17460 	.word	0x3fd17460
    3684:	518f264d 	.word	0x518f264d
    3688:	3fd55555 	.word	0x3fd55555
    368c:	db6fabff 	.word	0xdb6fabff
    3690:	3fdb6db6 	.word	0x3fdb6db6
    3694:	33333303 	.word	0x33333303
    3698:	3fe33333 	.word	0x3fe33333
    369c:	40080000 	.word	0x40080000
    36a0:	3feec709 	.word	0x3feec709
    36a4:	dc3a03fd 	.word	0xdc3a03fd
    36a8:	145b01f5 	.word	0x145b01f5
    36ac:	be3e2fe0 	.word	0xbe3e2fe0
    36b0:	408fffff 	.word	0x408fffff
    36b4:	bf700000 	.word	0xbf700000
    36b8:	652b82fe 	.word	0x652b82fe
    36bc:	3c971547 	.word	0x3c971547
    36c0:	2800      	cmp	r0, #0
    36c2:	d000      	beq.n	36c6 <__ieee754_pow+0x62e>
    36c4:	e18a      	b.n	39dc <__ieee754_pow+0x944>
    36c6:	2280      	movs	r2, #128	; 0x80
    36c8:	4be7      	ldr	r3, [pc, #924]	; (3a68 <__ieee754_pow+0x9d0>)
    36ca:	0352      	lsls	r2, r2, #13
    36cc:	469c      	mov	ip, r3
    36ce:	0013      	movs	r3, r2
    36d0:	1536      	asrs	r6, r6, #20
    36d2:	4466      	add	r6, ip
    36d4:	4133      	asrs	r3, r6
    36d6:	49e5      	ldr	r1, [pc, #916]	; (3a6c <__ieee754_pow+0x9d4>)
    36d8:	19db      	adds	r3, r3, r7
    36da:	005e      	lsls	r6, r3, #1
    36dc:	001c      	movs	r4, r3
    36de:	031b      	lsls	r3, r3, #12
    36e0:	468c      	mov	ip, r1
    36e2:	0b1b      	lsrs	r3, r3, #12
    36e4:	4313      	orrs	r3, r2
    36e6:	2214      	movs	r2, #20
    36e8:	0d76      	lsrs	r6, r6, #21
    36ea:	4fe1      	ldr	r7, [pc, #900]	; (3a70 <__ieee754_pow+0x9d8>)
    36ec:	4466      	add	r6, ip
    36ee:	4137      	asrs	r7, r6
    36f0:	1b96      	subs	r6, r2, r6
    36f2:	4133      	asrs	r3, r6
    36f4:	4698      	mov	r8, r3
    36f6:	4653      	mov	r3, sl
    36f8:	43bc      	bics	r4, r7
    36fa:	2000      	movs	r0, #0
    36fc:	0021      	movs	r1, r4
    36fe:	2b00      	cmp	r3, #0
    3700:	da00      	bge.n	3704 <__ieee754_pow+0x66c>
    3702:	e1a9      	b.n	3a58 <__ieee754_pow+0x9c0>
    3704:	0002      	movs	r2, r0
    3706:	000b      	movs	r3, r1
    3708:	9800      	ldr	r0, [sp, #0]
    370a:	9901      	ldr	r1, [sp, #4]
    370c:	f002 f990 	bl	5a30 <__aeabi_dsub>
    3710:	000b      	movs	r3, r1
    3712:	9000      	str	r0, [sp, #0]
    3714:	9101      	str	r1, [sp, #4]
    3716:	0002      	movs	r2, r0
    3718:	9804      	ldr	r0, [sp, #16]
    371a:	9905      	ldr	r1, [sp, #20]
    371c:	f000 ffbe 	bl	469c <__aeabi_dadd>
    3720:	4643      	mov	r3, r8
    3722:	051b      	lsls	r3, r3, #20
    3724:	4699      	mov	r9, r3
    3726:	2000      	movs	r0, #0
    3728:	2200      	movs	r2, #0
    372a:	4bd2      	ldr	r3, [pc, #840]	; (3a74 <__ieee754_pow+0x9dc>)
    372c:	0006      	movs	r6, r0
    372e:	000f      	movs	r7, r1
    3730:	f001 ff04 	bl	553c <__aeabi_dmul>
    3734:	9a00      	ldr	r2, [sp, #0]
    3736:	9b01      	ldr	r3, [sp, #4]
    3738:	9002      	str	r0, [sp, #8]
    373a:	9103      	str	r1, [sp, #12]
    373c:	0030      	movs	r0, r6
    373e:	0039      	movs	r1, r7
    3740:	f002 f976 	bl	5a30 <__aeabi_dsub>
    3744:	0002      	movs	r2, r0
    3746:	000b      	movs	r3, r1
    3748:	9804      	ldr	r0, [sp, #16]
    374a:	9905      	ldr	r1, [sp, #20]
    374c:	f002 f970 	bl	5a30 <__aeabi_dsub>
    3750:	4ac9      	ldr	r2, [pc, #804]	; (3a78 <__ieee754_pow+0x9e0>)
    3752:	4bca      	ldr	r3, [pc, #808]	; (3a7c <__ieee754_pow+0x9e4>)
    3754:	f001 fef2 	bl	553c <__aeabi_dmul>
    3758:	4ac9      	ldr	r2, [pc, #804]	; (3a80 <__ieee754_pow+0x9e8>)
    375a:	0004      	movs	r4, r0
    375c:	000d      	movs	r5, r1
    375e:	4bc9      	ldr	r3, [pc, #804]	; (3a84 <__ieee754_pow+0x9ec>)
    3760:	0030      	movs	r0, r6
    3762:	0039      	movs	r1, r7
    3764:	f001 feea 	bl	553c <__aeabi_dmul>
    3768:	0002      	movs	r2, r0
    376a:	000b      	movs	r3, r1
    376c:	0020      	movs	r0, r4
    376e:	0029      	movs	r1, r5
    3770:	f000 ff94 	bl	469c <__aeabi_dadd>
    3774:	0004      	movs	r4, r0
    3776:	000d      	movs	r5, r1
    3778:	0002      	movs	r2, r0
    377a:	000b      	movs	r3, r1
    377c:	9802      	ldr	r0, [sp, #8]
    377e:	9903      	ldr	r1, [sp, #12]
    3780:	f000 ff8c 	bl	469c <__aeabi_dadd>
    3784:	9a02      	ldr	r2, [sp, #8]
    3786:	9b03      	ldr	r3, [sp, #12]
    3788:	0006      	movs	r6, r0
    378a:	000f      	movs	r7, r1
    378c:	f002 f950 	bl	5a30 <__aeabi_dsub>
    3790:	0002      	movs	r2, r0
    3792:	000b      	movs	r3, r1
    3794:	0020      	movs	r0, r4
    3796:	0029      	movs	r1, r5
    3798:	f002 f94a 	bl	5a30 <__aeabi_dsub>
    379c:	0032      	movs	r2, r6
    379e:	9000      	str	r0, [sp, #0]
    37a0:	9101      	str	r1, [sp, #4]
    37a2:	003b      	movs	r3, r7
    37a4:	0030      	movs	r0, r6
    37a6:	0039      	movs	r1, r7
    37a8:	f001 fec8 	bl	553c <__aeabi_dmul>
    37ac:	0004      	movs	r4, r0
    37ae:	000d      	movs	r5, r1
    37b0:	4ab5      	ldr	r2, [pc, #724]	; (3a88 <__ieee754_pow+0x9f0>)
    37b2:	4bb6      	ldr	r3, [pc, #728]	; (3a8c <__ieee754_pow+0x9f4>)
    37b4:	f001 fec2 	bl	553c <__aeabi_dmul>
    37b8:	4ab5      	ldr	r2, [pc, #724]	; (3a90 <__ieee754_pow+0x9f8>)
    37ba:	4bb6      	ldr	r3, [pc, #728]	; (3a94 <__ieee754_pow+0x9fc>)
    37bc:	f002 f938 	bl	5a30 <__aeabi_dsub>
    37c0:	0022      	movs	r2, r4
    37c2:	002b      	movs	r3, r5
    37c4:	f001 feba 	bl	553c <__aeabi_dmul>
    37c8:	4ab3      	ldr	r2, [pc, #716]	; (3a98 <__ieee754_pow+0xa00>)
    37ca:	4bb4      	ldr	r3, [pc, #720]	; (3a9c <__ieee754_pow+0xa04>)
    37cc:	f000 ff66 	bl	469c <__aeabi_dadd>
    37d0:	0022      	movs	r2, r4
    37d2:	002b      	movs	r3, r5
    37d4:	f001 feb2 	bl	553c <__aeabi_dmul>
    37d8:	4ab1      	ldr	r2, [pc, #708]	; (3aa0 <__ieee754_pow+0xa08>)
    37da:	4bb2      	ldr	r3, [pc, #712]	; (3aa4 <__ieee754_pow+0xa0c>)
    37dc:	f002 f928 	bl	5a30 <__aeabi_dsub>
    37e0:	0022      	movs	r2, r4
    37e2:	002b      	movs	r3, r5
    37e4:	f001 feaa 	bl	553c <__aeabi_dmul>
    37e8:	4aaf      	ldr	r2, [pc, #700]	; (3aa8 <__ieee754_pow+0xa10>)
    37ea:	4bb0      	ldr	r3, [pc, #704]	; (3aac <__ieee754_pow+0xa14>)
    37ec:	f000 ff56 	bl	469c <__aeabi_dadd>
    37f0:	0022      	movs	r2, r4
    37f2:	002b      	movs	r3, r5
    37f4:	f001 fea2 	bl	553c <__aeabi_dmul>
    37f8:	0002      	movs	r2, r0
    37fa:	000b      	movs	r3, r1
    37fc:	0030      	movs	r0, r6
    37fe:	0039      	movs	r1, r7
    3800:	f002 f916 	bl	5a30 <__aeabi_dsub>
    3804:	0004      	movs	r4, r0
    3806:	000d      	movs	r5, r1
    3808:	0002      	movs	r2, r0
    380a:	000b      	movs	r3, r1
    380c:	0030      	movs	r0, r6
    380e:	0039      	movs	r1, r7
    3810:	f001 fe94 	bl	553c <__aeabi_dmul>
    3814:	2380      	movs	r3, #128	; 0x80
    3816:	9002      	str	r0, [sp, #8]
    3818:	9103      	str	r1, [sp, #12]
    381a:	2200      	movs	r2, #0
    381c:	05db      	lsls	r3, r3, #23
    381e:	0020      	movs	r0, r4
    3820:	0029      	movs	r1, r5
    3822:	f002 f905 	bl	5a30 <__aeabi_dsub>
    3826:	0002      	movs	r2, r0
    3828:	000b      	movs	r3, r1
    382a:	9802      	ldr	r0, [sp, #8]
    382c:	9903      	ldr	r1, [sp, #12]
    382e:	f001 fa61 	bl	4cf4 <__aeabi_ddiv>
    3832:	9a00      	ldr	r2, [sp, #0]
    3834:	9b01      	ldr	r3, [sp, #4]
    3836:	0004      	movs	r4, r0
    3838:	000d      	movs	r5, r1
    383a:	0030      	movs	r0, r6
    383c:	0039      	movs	r1, r7
    383e:	f001 fe7d 	bl	553c <__aeabi_dmul>
    3842:	9a00      	ldr	r2, [sp, #0]
    3844:	9b01      	ldr	r3, [sp, #4]
    3846:	f000 ff29 	bl	469c <__aeabi_dadd>
    384a:	0002      	movs	r2, r0
    384c:	000b      	movs	r3, r1
    384e:	0020      	movs	r0, r4
    3850:	0029      	movs	r1, r5
    3852:	f002 f8ed 	bl	5a30 <__aeabi_dsub>
    3856:	0032      	movs	r2, r6
    3858:	003b      	movs	r3, r7
    385a:	f002 f8e9 	bl	5a30 <__aeabi_dsub>
    385e:	0002      	movs	r2, r0
    3860:	000b      	movs	r3, r1
    3862:	2000      	movs	r0, #0
    3864:	4992      	ldr	r1, [pc, #584]	; (3ab0 <__ieee754_pow+0xa18>)
    3866:	f002 f8e3 	bl	5a30 <__aeabi_dsub>
    386a:	464b      	mov	r3, r9
    386c:	185b      	adds	r3, r3, r1
    386e:	151a      	asrs	r2, r3, #20
    3870:	2a00      	cmp	r2, #0
    3872:	dc00      	bgt.n	3876 <__ieee754_pow+0x7de>
    3874:	e0f4      	b.n	3a60 <__ieee754_pow+0x9c8>
    3876:	0019      	movs	r1, r3
    3878:	9a06      	ldr	r2, [sp, #24]
    387a:	9b07      	ldr	r3, [sp, #28]
    387c:	f001 fe5e 	bl	553c <__aeabi_dmul>
    3880:	0006      	movs	r6, r0
    3882:	e452      	b.n	312a <__ieee754_pow+0x92>
    3884:	0032      	movs	r2, r6
    3886:	0030      	movs	r0, r6
    3888:	002b      	movs	r3, r5
    388a:	0029      	movs	r1, r5
    388c:	f001 fe56 	bl	553c <__aeabi_dmul>
    3890:	0006      	movs	r6, r0
    3892:	e44a      	b.n	312a <__ieee754_pow+0x92>
    3894:	4b87      	ldr	r3, [pc, #540]	; (3ab4 <__ieee754_pow+0xa1c>)
    3896:	004e      	lsls	r6, r1, #1
    3898:	0876      	lsrs	r6, r6, #1
    389a:	429e      	cmp	r6, r3
    389c:	dc00      	bgt.n	38a0 <__ieee754_pow+0x808>
    389e:	e0bf      	b.n	3a20 <__ieee754_pow+0x988>
    38a0:	4b85      	ldr	r3, [pc, #532]	; (3ab8 <__ieee754_pow+0xa20>)
    38a2:	18cb      	adds	r3, r1, r3
    38a4:	4303      	orrs	r3, r0
    38a6:	d10c      	bne.n	38c2 <__ieee754_pow+0x82a>
    38a8:	9a00      	ldr	r2, [sp, #0]
    38aa:	9b01      	ldr	r3, [sp, #4]
    38ac:	f002 f8c0 	bl	5a30 <__aeabi_dsub>
    38b0:	0002      	movs	r2, r0
    38b2:	000b      	movs	r3, r1
    38b4:	9804      	ldr	r0, [sp, #16]
    38b6:	9905      	ldr	r1, [sp, #20]
    38b8:	f000 fb6c 	bl	3f94 <__aeabi_dcmple>
    38bc:	2800      	cmp	r0, #0
    38be:	d100      	bne.n	38c2 <__ieee754_pow+0x82a>
    38c0:	e701      	b.n	36c6 <__ieee754_pow+0x62e>
    38c2:	9806      	ldr	r0, [sp, #24]
    38c4:	9907      	ldr	r1, [sp, #28]
    38c6:	4a7d      	ldr	r2, [pc, #500]	; (3abc <__ieee754_pow+0xa24>)
    38c8:	4b7d      	ldr	r3, [pc, #500]	; (3ac0 <__ieee754_pow+0xa28>)
    38ca:	f001 fe37 	bl	553c <__aeabi_dmul>
    38ce:	4a7b      	ldr	r2, [pc, #492]	; (3abc <__ieee754_pow+0xa24>)
    38d0:	4b7b      	ldr	r3, [pc, #492]	; (3ac0 <__ieee754_pow+0xa28>)
    38d2:	f001 fe33 	bl	553c <__aeabi_dmul>
    38d6:	0006      	movs	r6, r0
    38d8:	f7ff fc27 	bl	312a <__ieee754_pow+0x92>
    38dc:	2300      	movs	r3, #0
    38de:	4c79      	ldr	r4, [pc, #484]	; (3ac4 <__ieee754_pow+0xa2c>)
    38e0:	9306      	str	r3, [sp, #24]
    38e2:	9407      	str	r4, [sp, #28]
    38e4:	e666      	b.n	35b4 <__ieee754_pow+0x51c>
    38e6:	4653      	mov	r3, sl
    38e8:	2b00      	cmp	r3, #0
    38ea:	db00      	blt.n	38ee <__ieee754_pow+0x856>
    38ec:	e4c3      	b.n	3276 <__ieee754_pow+0x1de>
    38ee:	9b00      	ldr	r3, [sp, #0]
    38f0:	9c01      	ldr	r4, [sp, #4]
    38f2:	2280      	movs	r2, #128	; 0x80
    38f4:	0612      	lsls	r2, r2, #24
    38f6:	001e      	movs	r6, r3
    38f8:	4694      	mov	ip, r2
    38fa:	0023      	movs	r3, r4
    38fc:	4463      	add	r3, ip
    38fe:	0019      	movs	r1, r3
    3900:	f7ff fc13 	bl	312a <__ieee754_pow+0x92>
    3904:	0002      	movs	r2, r0
    3906:	000b      	movs	r3, r1
    3908:	2000      	movs	r0, #0
    390a:	4969      	ldr	r1, [pc, #420]	; (3ab0 <__ieee754_pow+0xa18>)
    390c:	f001 f9f2 	bl	4cf4 <__aeabi_ddiv>
    3910:	e44a      	b.n	31a8 <__ieee754_pow+0x110>
    3912:	4b6d      	ldr	r3, [pc, #436]	; (3ac8 <__ieee754_pow+0xa30>)
    3914:	429c      	cmp	r4, r3
    3916:	dc00      	bgt.n	391a <__ieee754_pow+0x882>
    3918:	e4aa      	b.n	3270 <__ieee754_pow+0x1d8>
    391a:	4b65      	ldr	r3, [pc, #404]	; (3ab0 <__ieee754_pow+0xa18>)
    391c:	429c      	cmp	r4, r3
    391e:	dd01      	ble.n	3924 <__ieee754_pow+0x88c>
    3920:	f7ff fc2c 	bl	317c <__ieee754_pow+0xe4>
    3924:	2200      	movs	r2, #0
    3926:	4b62      	ldr	r3, [pc, #392]	; (3ab0 <__ieee754_pow+0xa18>)
    3928:	f002 f882 	bl	5a30 <__aeabi_dsub>
    392c:	22c0      	movs	r2, #192	; 0xc0
    392e:	4b67      	ldr	r3, [pc, #412]	; (3acc <__ieee754_pow+0xa34>)
    3930:	05d2      	lsls	r2, r2, #23
    3932:	0004      	movs	r4, r0
    3934:	000d      	movs	r5, r1
    3936:	f001 fe01 	bl	553c <__aeabi_dmul>
    393a:	4a65      	ldr	r2, [pc, #404]	; (3ad0 <__ieee754_pow+0xa38>)
    393c:	0006      	movs	r6, r0
    393e:	000f      	movs	r7, r1
    3940:	4b64      	ldr	r3, [pc, #400]	; (3ad4 <__ieee754_pow+0xa3c>)
    3942:	0020      	movs	r0, r4
    3944:	0029      	movs	r1, r5
    3946:	f001 fdf9 	bl	553c <__aeabi_dmul>
    394a:	2200      	movs	r2, #0
    394c:	9002      	str	r0, [sp, #8]
    394e:	9103      	str	r1, [sp, #12]
    3950:	4b61      	ldr	r3, [pc, #388]	; (3ad8 <__ieee754_pow+0xa40>)
    3952:	0020      	movs	r0, r4
    3954:	0029      	movs	r1, r5
    3956:	f001 fdf1 	bl	553c <__aeabi_dmul>
    395a:	0002      	movs	r2, r0
    395c:	000b      	movs	r3, r1
    395e:	485f      	ldr	r0, [pc, #380]	; (3adc <__ieee754_pow+0xa44>)
    3960:	495f      	ldr	r1, [pc, #380]	; (3ae0 <__ieee754_pow+0xa48>)
    3962:	f002 f865 	bl	5a30 <__aeabi_dsub>
    3966:	0022      	movs	r2, r4
    3968:	002b      	movs	r3, r5
    396a:	f001 fde7 	bl	553c <__aeabi_dmul>
    396e:	0002      	movs	r2, r0
    3970:	000b      	movs	r3, r1
    3972:	2000      	movs	r0, #0
    3974:	495b      	ldr	r1, [pc, #364]	; (3ae4 <__ieee754_pow+0xa4c>)
    3976:	f002 f85b 	bl	5a30 <__aeabi_dsub>
    397a:	0022      	movs	r2, r4
    397c:	9004      	str	r0, [sp, #16]
    397e:	9105      	str	r1, [sp, #20]
    3980:	002b      	movs	r3, r5
    3982:	0020      	movs	r0, r4
    3984:	0029      	movs	r1, r5
    3986:	f001 fdd9 	bl	553c <__aeabi_dmul>
    398a:	0002      	movs	r2, r0
    398c:	000b      	movs	r3, r1
    398e:	9804      	ldr	r0, [sp, #16]
    3990:	9905      	ldr	r1, [sp, #20]
    3992:	f001 fdd3 	bl	553c <__aeabi_dmul>
    3996:	4a54      	ldr	r2, [pc, #336]	; (3ae8 <__ieee754_pow+0xa50>)
    3998:	4b4c      	ldr	r3, [pc, #304]	; (3acc <__ieee754_pow+0xa34>)
    399a:	f001 fdcf 	bl	553c <__aeabi_dmul>
    399e:	0002      	movs	r2, r0
    39a0:	000b      	movs	r3, r1
    39a2:	9802      	ldr	r0, [sp, #8]
    39a4:	9903      	ldr	r1, [sp, #12]
    39a6:	f002 f843 	bl	5a30 <__aeabi_dsub>
    39aa:	0002      	movs	r2, r0
    39ac:	000b      	movs	r3, r1
    39ae:	0004      	movs	r4, r0
    39b0:	000d      	movs	r5, r1
    39b2:	0030      	movs	r0, r6
    39b4:	0039      	movs	r1, r7
    39b6:	f000 fe71 	bl	469c <__aeabi_dadd>
    39ba:	2200      	movs	r2, #0
    39bc:	0010      	movs	r0, r2
    39be:	003b      	movs	r3, r7
    39c0:	0032      	movs	r2, r6
    39c2:	9002      	str	r0, [sp, #8]
    39c4:	9103      	str	r1, [sp, #12]
    39c6:	f002 f833 	bl	5a30 <__aeabi_dsub>
    39ca:	0002      	movs	r2, r0
    39cc:	000b      	movs	r3, r1
    39ce:	0020      	movs	r0, r4
    39d0:	0029      	movs	r1, r5
    39d2:	f002 f82d 	bl	5a30 <__aeabi_dsub>
    39d6:	9004      	str	r0, [sp, #16]
    39d8:	9105      	str	r1, [sp, #20]
    39da:	e5e1      	b.n	35a0 <__ieee754_pow+0x508>
    39dc:	4a43      	ldr	r2, [pc, #268]	; (3aec <__ieee754_pow+0xa54>)
    39de:	4b44      	ldr	r3, [pc, #272]	; (3af0 <__ieee754_pow+0xa58>)
    39e0:	9806      	ldr	r0, [sp, #24]
    39e2:	9907      	ldr	r1, [sp, #28]
    39e4:	f001 fdaa 	bl	553c <__aeabi_dmul>
    39e8:	4a40      	ldr	r2, [pc, #256]	; (3aec <__ieee754_pow+0xa54>)
    39ea:	4b41      	ldr	r3, [pc, #260]	; (3af0 <__ieee754_pow+0xa58>)
    39ec:	f001 fda6 	bl	553c <__aeabi_dmul>
    39f0:	0006      	movs	r6, r0
    39f2:	f7ff fb9a 	bl	312a <__ieee754_pow+0x92>
    39f6:	2a00      	cmp	r2, #0
    39f8:	d001      	beq.n	39fe <__ieee754_pow+0x966>
    39fa:	f7ff fba5 	bl	3148 <__ieee754_pow+0xb0>
    39fe:	3214      	adds	r2, #20
    3a00:	1ad3      	subs	r3, r2, r3
    3a02:	003a      	movs	r2, r7
    3a04:	411a      	asrs	r2, r3
    3a06:	0011      	movs	r1, r2
    3a08:	4099      	lsls	r1, r3
    3a0a:	428f      	cmp	r7, r1
    3a0c:	d001      	beq.n	3a12 <__ieee754_pow+0x97a>
    3a0e:	f7ff fb6f 	bl	30f0 <__ieee754_pow+0x58>
    3a12:	2301      	movs	r3, #1
    3a14:	4013      	ands	r3, r2
    3a16:	2202      	movs	r2, #2
    3a18:	1ad3      	subs	r3, r2, r3
    3a1a:	469b      	mov	fp, r3
    3a1c:	f7ff fb68 	bl	30f0 <__ieee754_pow+0x58>
    3a20:	4b30      	ldr	r3, [pc, #192]	; (3ae4 <__ieee754_pow+0xa4c>)
    3a22:	429e      	cmp	r6, r3
    3a24:	dd00      	ble.n	3a28 <__ieee754_pow+0x990>
    3a26:	e64e      	b.n	36c6 <__ieee754_pow+0x62e>
    3a28:	2300      	movs	r3, #0
    3a2a:	4699      	mov	r9, r3
    3a2c:	4698      	mov	r8, r3
    3a2e:	e67a      	b.n	3726 <__ieee754_pow+0x68e>
    3a30:	0002      	movs	r2, r0
    3a32:	000b      	movs	r3, r1
    3a34:	f7ff fc14 	bl	3260 <__ieee754_pow+0x1c8>
    3a38:	2380      	movs	r3, #128	; 0x80
    3a3a:	4c2e      	ldr	r4, [pc, #184]	; (3af4 <__ieee754_pow+0xa5c>)
    3a3c:	05db      	lsls	r3, r3, #23
    3a3e:	9308      	str	r3, [sp, #32]
    3a40:	9409      	str	r4, [sp, #36]	; 0x24
    3a42:	4b2d      	ldr	r3, [pc, #180]	; (3af8 <__ieee754_pow+0xa60>)
    3a44:	4c2d      	ldr	r4, [pc, #180]	; (3afc <__ieee754_pow+0xa64>)
    3a46:	2200      	movs	r2, #0
    3a48:	930c      	str	r3, [sp, #48]	; 0x30
    3a4a:	940d      	str	r4, [sp, #52]	; 0x34
    3a4c:	2480      	movs	r4, #128	; 0x80
    3a4e:	4b2c      	ldr	r3, [pc, #176]	; (3b00 <__ieee754_pow+0xa68>)
    3a50:	02e4      	lsls	r4, r4, #11
    3a52:	9206      	str	r2, [sp, #24]
    3a54:	9307      	str	r3, [sp, #28]
    3a56:	e456      	b.n	3306 <__ieee754_pow+0x26e>
    3a58:	4643      	mov	r3, r8
    3a5a:	425b      	negs	r3, r3
    3a5c:	4698      	mov	r8, r3
    3a5e:	e651      	b.n	3704 <__ieee754_pow+0x66c>
    3a60:	4642      	mov	r2, r8
    3a62:	f000 f9fd 	bl	3e60 <scalbn>
    3a66:	e707      	b.n	3878 <__ieee754_pow+0x7e0>
    3a68:	fffffc02 	.word	0xfffffc02
    3a6c:	fffffc01 	.word	0xfffffc01
    3a70:	000fffff 	.word	0x000fffff
    3a74:	3fe62e43 	.word	0x3fe62e43
    3a78:	fefa39ef 	.word	0xfefa39ef
    3a7c:	3fe62e42 	.word	0x3fe62e42
    3a80:	0ca86c39 	.word	0x0ca86c39
    3a84:	be205c61 	.word	0xbe205c61
    3a88:	72bea4d0 	.word	0x72bea4d0
    3a8c:	3e663769 	.word	0x3e663769
    3a90:	c5d26bf1 	.word	0xc5d26bf1
    3a94:	3ebbbd41 	.word	0x3ebbbd41
    3a98:	af25de2c 	.word	0xaf25de2c
    3a9c:	3f11566a 	.word	0x3f11566a
    3aa0:	16bebd93 	.word	0x16bebd93
    3aa4:	3f66c16c 	.word	0x3f66c16c
    3aa8:	5555553e 	.word	0x5555553e
    3aac:	3fc55555 	.word	0x3fc55555
    3ab0:	3ff00000 	.word	0x3ff00000
    3ab4:	4090cbff 	.word	0x4090cbff
    3ab8:	3f6f3400 	.word	0x3f6f3400
    3abc:	c2f8f359 	.word	0xc2f8f359
    3ac0:	01a56e1f 	.word	0x01a56e1f
    3ac4:	bff00000 	.word	0xbff00000
    3ac8:	3feffffe 	.word	0x3feffffe
    3acc:	3ff71547 	.word	0x3ff71547
    3ad0:	f85ddf44 	.word	0xf85ddf44
    3ad4:	3e54ae0b 	.word	0x3e54ae0b
    3ad8:	3fd00000 	.word	0x3fd00000
    3adc:	55555555 	.word	0x55555555
    3ae0:	3fd55555 	.word	0x3fd55555
    3ae4:	3fe00000 	.word	0x3fe00000
    3ae8:	652b82fe 	.word	0x652b82fe
    3aec:	8800759c 	.word	0x8800759c
    3af0:	7e37e43c 	.word	0x7e37e43c
    3af4:	3fe2b803 	.word	0x3fe2b803
    3af8:	43cfd006 	.word	0x43cfd006
    3afc:	3e4cfdeb 	.word	0x3e4cfdeb
    3b00:	3ff80000 	.word	0x3ff80000

00003b04 <__ieee754_sqrt>:
    3b04:	b5f0      	push	{r4, r5, r6, r7, lr}
    3b06:	4656      	mov	r6, sl
    3b08:	464d      	mov	r5, r9
    3b0a:	4644      	mov	r4, r8
    3b0c:	465f      	mov	r7, fp
    3b0e:	4b75      	ldr	r3, [pc, #468]	; (3ce4 <__ieee754_sqrt+0x1e0>)
    3b10:	b4f0      	push	{r4, r5, r6, r7}
    3b12:	000a      	movs	r2, r1
    3b14:	000d      	movs	r5, r1
    3b16:	0019      	movs	r1, r3
    3b18:	b083      	sub	sp, #12
    3b1a:	0006      	movs	r6, r0
    3b1c:	0004      	movs	r4, r0
    3b1e:	4029      	ands	r1, r5
    3b20:	4299      	cmp	r1, r3
    3b22:	d100      	bne.n	3b26 <__ieee754_sqrt+0x22>
    3b24:	e0ba      	b.n	3c9c <__ieee754_sqrt+0x198>
    3b26:	2d00      	cmp	r5, #0
    3b28:	dc00      	bgt.n	3b2c <__ieee754_sqrt+0x28>
    3b2a:	e094      	b.n	3c56 <__ieee754_sqrt+0x152>
    3b2c:	152d      	asrs	r5, r5, #20
    3b2e:	d100      	bne.n	3b32 <__ieee754_sqrt+0x2e>
    3b30:	e0a3      	b.n	3c7a <__ieee754_sqrt+0x176>
    3b32:	4b6d      	ldr	r3, [pc, #436]	; (3ce8 <__ieee754_sqrt+0x1e4>)
    3b34:	0312      	lsls	r2, r2, #12
    3b36:	469c      	mov	ip, r3
    3b38:	2380      	movs	r3, #128	; 0x80
    3b3a:	0b12      	lsrs	r2, r2, #12
    3b3c:	035b      	lsls	r3, r3, #13
    3b3e:	4465      	add	r5, ip
    3b40:	431a      	orrs	r2, r3
    3b42:	07eb      	lsls	r3, r5, #31
    3b44:	d500      	bpl.n	3b48 <__ieee754_sqrt+0x44>
    3b46:	e081      	b.n	3c4c <__ieee754_sqrt+0x148>
    3b48:	106b      	asrs	r3, r5, #1
    3b4a:	4698      	mov	r8, r3
    3b4c:	0fe3      	lsrs	r3, r4, #31
    3b4e:	189b      	adds	r3, r3, r2
    3b50:	189b      	adds	r3, r3, r2
    3b52:	2280      	movs	r2, #128	; 0x80
    3b54:	2116      	movs	r1, #22
    3b56:	2600      	movs	r6, #0
    3b58:	2700      	movs	r7, #0
    3b5a:	0064      	lsls	r4, r4, #1
    3b5c:	0392      	lsls	r2, r2, #14
    3b5e:	18b8      	adds	r0, r7, r2
    3b60:	4298      	cmp	r0, r3
    3b62:	dc02      	bgt.n	3b6a <__ieee754_sqrt+0x66>
    3b64:	1887      	adds	r7, r0, r2
    3b66:	1a1b      	subs	r3, r3, r0
    3b68:	18b6      	adds	r6, r6, r2
    3b6a:	0fe0      	lsrs	r0, r4, #31
    3b6c:	005b      	lsls	r3, r3, #1
    3b6e:	3901      	subs	r1, #1
    3b70:	181b      	adds	r3, r3, r0
    3b72:	0064      	lsls	r4, r4, #1
    3b74:	0852      	lsrs	r2, r2, #1
    3b76:	2900      	cmp	r1, #0
    3b78:	d1f1      	bne.n	3b5e <__ieee754_sqrt+0x5a>
    3b7a:	2200      	movs	r2, #0
    3b7c:	9201      	str	r2, [sp, #4]
    3b7e:	4694      	mov	ip, r2
    3b80:	2280      	movs	r2, #128	; 0x80
    3b82:	0612      	lsls	r2, r2, #24
    3b84:	2020      	movs	r0, #32
    3b86:	4691      	mov	r9, r2
    3b88:	e009      	b.n	3b9e <__ieee754_sqrt+0x9a>
    3b8a:	429f      	cmp	r7, r3
    3b8c:	d041      	beq.n	3c12 <__ieee754_sqrt+0x10e>
    3b8e:	0fe1      	lsrs	r1, r4, #31
    3b90:	18c9      	adds	r1, r1, r3
    3b92:	3801      	subs	r0, #1
    3b94:	18cb      	adds	r3, r1, r3
    3b96:	0064      	lsls	r4, r4, #1
    3b98:	0852      	lsrs	r2, r2, #1
    3b9a:	2800      	cmp	r0, #0
    3b9c:	d01e      	beq.n	3bdc <__ieee754_sqrt+0xd8>
    3b9e:	4661      	mov	r1, ip
    3ba0:	1851      	adds	r1, r2, r1
    3ba2:	429f      	cmp	r7, r3
    3ba4:	daf1      	bge.n	3b8a <__ieee754_sqrt+0x86>
    3ba6:	188d      	adds	r5, r1, r2
    3ba8:	46ac      	mov	ip, r5
    3baa:	0fcd      	lsrs	r5, r1, #31
    3bac:	07ed      	lsls	r5, r5, #31
    3bae:	46ba      	mov	sl, r7
    3bb0:	454d      	cmp	r5, r9
    3bb2:	d039      	beq.n	3c28 <__ieee754_sqrt+0x124>
    3bb4:	1bdb      	subs	r3, r3, r7
    3bb6:	428c      	cmp	r4, r1
    3bb8:	41bf      	sbcs	r7, r7
    3bba:	427f      	negs	r7, r7
    3bbc:	1bdb      	subs	r3, r3, r7
    3bbe:	1a64      	subs	r4, r4, r1
    3bc0:	9901      	ldr	r1, [sp, #4]
    3bc2:	3801      	subs	r0, #1
    3bc4:	468b      	mov	fp, r1
    3bc6:	4493      	add	fp, r2
    3bc8:	4659      	mov	r1, fp
    3bca:	9101      	str	r1, [sp, #4]
    3bcc:	0fe1      	lsrs	r1, r4, #31
    3bce:	18c9      	adds	r1, r1, r3
    3bd0:	4657      	mov	r7, sl
    3bd2:	18cb      	adds	r3, r1, r3
    3bd4:	0064      	lsls	r4, r4, #1
    3bd6:	0852      	lsrs	r2, r2, #1
    3bd8:	2800      	cmp	r0, #0
    3bda:	d1e0      	bne.n	3b9e <__ieee754_sqrt+0x9a>
    3bdc:	4323      	orrs	r3, r4
    3bde:	d12b      	bne.n	3c38 <__ieee754_sqrt+0x134>
    3be0:	9b01      	ldr	r3, [sp, #4]
    3be2:	085b      	lsrs	r3, r3, #1
    3be4:	4941      	ldr	r1, [pc, #260]	; (3cec <__ieee754_sqrt+0x1e8>)
    3be6:	1072      	asrs	r2, r6, #1
    3be8:	468c      	mov	ip, r1
    3bea:	4462      	add	r2, ip
    3bec:	07f1      	lsls	r1, r6, #31
    3bee:	d502      	bpl.n	3bf6 <__ieee754_sqrt+0xf2>
    3bf0:	2180      	movs	r1, #128	; 0x80
    3bf2:	0609      	lsls	r1, r1, #24
    3bf4:	430b      	orrs	r3, r1
    3bf6:	4641      	mov	r1, r8
    3bf8:	0509      	lsls	r1, r1, #20
    3bfa:	188d      	adds	r5, r1, r2
    3bfc:	001e      	movs	r6, r3
    3bfe:	002f      	movs	r7, r5
    3c00:	0030      	movs	r0, r6
    3c02:	0039      	movs	r1, r7
    3c04:	b003      	add	sp, #12
    3c06:	bc3c      	pop	{r2, r3, r4, r5}
    3c08:	4690      	mov	r8, r2
    3c0a:	4699      	mov	r9, r3
    3c0c:	46a2      	mov	sl, r4
    3c0e:	46ab      	mov	fp, r5
    3c10:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3c12:	42a1      	cmp	r1, r4
    3c14:	d80e      	bhi.n	3c34 <__ieee754_sqrt+0x130>
    3c16:	188d      	adds	r5, r1, r2
    3c18:	46ac      	mov	ip, r5
    3c1a:	0fcd      	lsrs	r5, r1, #31
    3c1c:	07ed      	lsls	r5, r5, #31
    3c1e:	454d      	cmp	r5, r9
    3c20:	d048      	beq.n	3cb4 <__ieee754_sqrt+0x1b0>
    3c22:	469a      	mov	sl, r3
    3c24:	2300      	movs	r3, #0
    3c26:	e7ca      	b.n	3bbe <__ieee754_sqrt+0xba>
    3c28:	4665      	mov	r5, ip
    3c2a:	2d00      	cmp	r5, #0
    3c2c:	dbc2      	blt.n	3bb4 <__ieee754_sqrt+0xb0>
    3c2e:	1c7d      	adds	r5, r7, #1
    3c30:	46aa      	mov	sl, r5
    3c32:	e7bf      	b.n	3bb4 <__ieee754_sqrt+0xb0>
    3c34:	003b      	movs	r3, r7
    3c36:	e7aa      	b.n	3b8e <__ieee754_sqrt+0x8a>
    3c38:	9b01      	ldr	r3, [sp, #4]
    3c3a:	3301      	adds	r3, #1
    3c3c:	d03e      	beq.n	3cbc <__ieee754_sqrt+0x1b8>
    3c3e:	9a01      	ldr	r2, [sp, #4]
    3c40:	2301      	movs	r3, #1
    3c42:	4694      	mov	ip, r2
    3c44:	4013      	ands	r3, r2
    3c46:	4463      	add	r3, ip
    3c48:	085b      	lsrs	r3, r3, #1
    3c4a:	e7cb      	b.n	3be4 <__ieee754_sqrt+0xe0>
    3c4c:	0fe3      	lsrs	r3, r4, #31
    3c4e:	0052      	lsls	r2, r2, #1
    3c50:	189a      	adds	r2, r3, r2
    3c52:	0064      	lsls	r4, r4, #1
    3c54:	e778      	b.n	3b48 <__ieee754_sqrt+0x44>
    3c56:	006b      	lsls	r3, r5, #1
    3c58:	085b      	lsrs	r3, r3, #1
    3c5a:	4303      	orrs	r3, r0
    3c5c:	002f      	movs	r7, r5
    3c5e:	2b00      	cmp	r3, #0
    3c60:	d0ce      	beq.n	3c00 <__ieee754_sqrt+0xfc>
    3c62:	2500      	movs	r5, #0
    3c64:	2a00      	cmp	r2, #0
    3c66:	d131      	bne.n	3ccc <__ieee754_sqrt+0x1c8>
    3c68:	0ae2      	lsrs	r2, r4, #11
    3c6a:	3d15      	subs	r5, #21
    3c6c:	0564      	lsls	r4, r4, #21
    3c6e:	2a00      	cmp	r2, #0
    3c70:	d0fa      	beq.n	3c68 <__ieee754_sqrt+0x164>
    3c72:	2380      	movs	r3, #128	; 0x80
    3c74:	035b      	lsls	r3, r3, #13
    3c76:	421a      	tst	r2, r3
    3c78:	d123      	bne.n	3cc2 <__ieee754_sqrt+0x1be>
    3c7a:	2080      	movs	r0, #128	; 0x80
    3c7c:	2300      	movs	r3, #0
    3c7e:	0340      	lsls	r0, r0, #13
    3c80:	e000      	b.n	3c84 <__ieee754_sqrt+0x180>
    3c82:	000b      	movs	r3, r1
    3c84:	0052      	lsls	r2, r2, #1
    3c86:	1c59      	adds	r1, r3, #1
    3c88:	4202      	tst	r2, r0
    3c8a:	d0fa      	beq.n	3c82 <__ieee754_sqrt+0x17e>
    3c8c:	2020      	movs	r0, #32
    3c8e:	1a40      	subs	r0, r0, r1
    3c90:	1aed      	subs	r5, r5, r3
    3c92:	0023      	movs	r3, r4
    3c94:	40c3      	lsrs	r3, r0
    3c96:	408c      	lsls	r4, r1
    3c98:	431a      	orrs	r2, r3
    3c9a:	e74a      	b.n	3b32 <__ieee754_sqrt+0x2e>
    3c9c:	0002      	movs	r2, r0
    3c9e:	002b      	movs	r3, r5
    3ca0:	0029      	movs	r1, r5
    3ca2:	f001 fc4b 	bl	553c <__aeabi_dmul>
    3ca6:	0032      	movs	r2, r6
    3ca8:	002b      	movs	r3, r5
    3caa:	f000 fcf7 	bl	469c <__aeabi_dadd>
    3cae:	0006      	movs	r6, r0
    3cb0:	000f      	movs	r7, r1
    3cb2:	e7a5      	b.n	3c00 <__ieee754_sqrt+0xfc>
    3cb4:	4665      	mov	r5, ip
    3cb6:	2d00      	cmp	r5, #0
    3cb8:	dab9      	bge.n	3c2e <__ieee754_sqrt+0x12a>
    3cba:	e7b2      	b.n	3c22 <__ieee754_sqrt+0x11e>
    3cbc:	3601      	adds	r6, #1
    3cbe:	2300      	movs	r3, #0
    3cc0:	e790      	b.n	3be4 <__ieee754_sqrt+0xe0>
    3cc2:	2301      	movs	r3, #1
    3cc4:	2020      	movs	r0, #32
    3cc6:	425b      	negs	r3, r3
    3cc8:	2100      	movs	r1, #0
    3cca:	e7e1      	b.n	3c90 <__ieee754_sqrt+0x18c>
    3ccc:	003b      	movs	r3, r7
    3cce:	0002      	movs	r2, r0
    3cd0:	0039      	movs	r1, r7
    3cd2:	f001 fead 	bl	5a30 <__aeabi_dsub>
    3cd6:	0002      	movs	r2, r0
    3cd8:	000b      	movs	r3, r1
    3cda:	f001 f80b 	bl	4cf4 <__aeabi_ddiv>
    3cde:	0006      	movs	r6, r0
    3ce0:	000f      	movs	r7, r1
    3ce2:	e78d      	b.n	3c00 <__ieee754_sqrt+0xfc>
    3ce4:	7ff00000 	.word	0x7ff00000
    3ce8:	fffffc01 	.word	0xfffffc01
    3cec:	3fe00000 	.word	0x3fe00000

00003cf0 <fabs>:
    3cf0:	0049      	lsls	r1, r1, #1
    3cf2:	084b      	lsrs	r3, r1, #1
    3cf4:	0019      	movs	r1, r3
    3cf6:	4770      	bx	lr

00003cf8 <finite>:
    3cf8:	4b03      	ldr	r3, [pc, #12]	; (3d08 <finite+0x10>)
    3cfa:	0048      	lsls	r0, r1, #1
    3cfc:	469c      	mov	ip, r3
    3cfe:	0840      	lsrs	r0, r0, #1
    3d00:	4460      	add	r0, ip
    3d02:	0fc0      	lsrs	r0, r0, #31
    3d04:	4770      	bx	lr
    3d06:	46c0      	nop			; (mov r8, r8)
    3d08:	80100000 	.word	0x80100000

00003d0c <matherr>:
    3d0c:	2000      	movs	r0, #0
    3d0e:	4770      	bx	lr

00003d10 <nan>:
    3d10:	2000      	movs	r0, #0
    3d12:	4901      	ldr	r1, [pc, #4]	; (3d18 <nan+0x8>)
    3d14:	4770      	bx	lr
    3d16:	46c0      	nop			; (mov r8, r8)
    3d18:	7ff80000 	.word	0x7ff80000

00003d1c <rint>:
    3d1c:	b5f0      	push	{r4, r5, r6, r7, lr}
    3d1e:	4647      	mov	r7, r8
    3d20:	b480      	push	{r7}
    3d22:	0fcb      	lsrs	r3, r1, #31
    3d24:	4698      	mov	r8, r3
    3d26:	4c4a      	ldr	r4, [pc, #296]	; (3e50 <rint+0x134>)
    3d28:	004b      	lsls	r3, r1, #1
    3d2a:	0d5b      	lsrs	r3, r3, #21
    3d2c:	191e      	adds	r6, r3, r4
    3d2e:	b082      	sub	sp, #8
    3d30:	0007      	movs	r7, r0
    3d32:	000a      	movs	r2, r1
    3d34:	2e13      	cmp	r6, #19
    3d36:	dc35      	bgt.n	3da4 <rint+0x88>
    3d38:	2e00      	cmp	r6, #0
    3d3a:	db57      	blt.n	3dec <rint+0xd0>
    3d3c:	4b45      	ldr	r3, [pc, #276]	; (3e54 <rint+0x138>)
    3d3e:	0004      	movs	r4, r0
    3d40:	4133      	asrs	r3, r6
    3d42:	001f      	movs	r7, r3
    3d44:	400f      	ands	r7, r1
    3d46:	4307      	orrs	r7, r0
    3d48:	000d      	movs	r5, r1
    3d4a:	2f00      	cmp	r7, #0
    3d4c:	d024      	beq.n	3d98 <rint+0x7c>
    3d4e:	085b      	lsrs	r3, r3, #1
    3d50:	001c      	movs	r4, r3
    3d52:	400c      	ands	r4, r1
    3d54:	4320      	orrs	r0, r4
    3d56:	2700      	movs	r7, #0
    3d58:	2800      	cmp	r0, #0
    3d5a:	d007      	beq.n	3d6c <rint+0x50>
    3d5c:	2e13      	cmp	r6, #19
    3d5e:	d100      	bne.n	3d62 <rint+0x46>
    3d60:	e072      	b.n	3e48 <rint+0x12c>
    3d62:	2280      	movs	r2, #128	; 0x80
    3d64:	02d2      	lsls	r2, r2, #11
    3d66:	4132      	asrs	r2, r6
    3d68:	4399      	bics	r1, r3
    3d6a:	430a      	orrs	r2, r1
    3d6c:	4643      	mov	r3, r8
    3d6e:	00de      	lsls	r6, r3, #3
    3d70:	4b39      	ldr	r3, [pc, #228]	; (3e58 <rint+0x13c>)
    3d72:	0011      	movs	r1, r2
    3d74:	199e      	adds	r6, r3, r6
    3d76:	6834      	ldr	r4, [r6, #0]
    3d78:	6875      	ldr	r5, [r6, #4]
    3d7a:	0038      	movs	r0, r7
    3d7c:	0022      	movs	r2, r4
    3d7e:	002b      	movs	r3, r5
    3d80:	f000 fc8c 	bl	469c <__aeabi_dadd>
    3d84:	9000      	str	r0, [sp, #0]
    3d86:	9101      	str	r1, [sp, #4]
    3d88:	9800      	ldr	r0, [sp, #0]
    3d8a:	9901      	ldr	r1, [sp, #4]
    3d8c:	0022      	movs	r2, r4
    3d8e:	002b      	movs	r3, r5
    3d90:	f001 fe4e 	bl	5a30 <__aeabi_dsub>
    3d94:	0004      	movs	r4, r0
    3d96:	000d      	movs	r5, r1
    3d98:	0020      	movs	r0, r4
    3d9a:	0029      	movs	r1, r5
    3d9c:	b002      	add	sp, #8
    3d9e:	bc04      	pop	{r2}
    3da0:	4690      	mov	r8, r2
    3da2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3da4:	2e33      	cmp	r6, #51	; 0x33
    3da6:	dd0c      	ble.n	3dc2 <rint+0xa6>
    3da8:	2380      	movs	r3, #128	; 0x80
    3daa:	0004      	movs	r4, r0
    3dac:	000d      	movs	r5, r1
    3dae:	00db      	lsls	r3, r3, #3
    3db0:	429e      	cmp	r6, r3
    3db2:	d1f1      	bne.n	3d98 <rint+0x7c>
    3db4:	0002      	movs	r2, r0
    3db6:	000b      	movs	r3, r1
    3db8:	f000 fc70 	bl	469c <__aeabi_dadd>
    3dbc:	0004      	movs	r4, r0
    3dbe:	000d      	movs	r5, r1
    3dc0:	e7ea      	b.n	3d98 <rint+0x7c>
    3dc2:	4c26      	ldr	r4, [pc, #152]	; (3e5c <rint+0x140>)
    3dc4:	000d      	movs	r5, r1
    3dc6:	46a4      	mov	ip, r4
    3dc8:	2401      	movs	r4, #1
    3dca:	4463      	add	r3, ip
    3dcc:	4264      	negs	r4, r4
    3dce:	40dc      	lsrs	r4, r3
    3dd0:	46a4      	mov	ip, r4
    3dd2:	4661      	mov	r1, ip
    3dd4:	0004      	movs	r4, r0
    3dd6:	4201      	tst	r1, r0
    3dd8:	d0de      	beq.n	3d98 <rint+0x7c>
    3dda:	0849      	lsrs	r1, r1, #1
    3ddc:	4201      	tst	r1, r0
    3dde:	d0c5      	beq.n	3d6c <rint+0x50>
    3de0:	2780      	movs	r7, #128	; 0x80
    3de2:	05ff      	lsls	r7, r7, #23
    3de4:	411f      	asrs	r7, r3
    3de6:	4388      	bics	r0, r1
    3de8:	4307      	orrs	r7, r0
    3dea:	e7bf      	b.n	3d6c <rint+0x50>
    3dec:	004b      	lsls	r3, r1, #1
    3dee:	085b      	lsrs	r3, r3, #1
    3df0:	4303      	orrs	r3, r0
    3df2:	0004      	movs	r4, r0
    3df4:	000d      	movs	r5, r1
    3df6:	2b00      	cmp	r3, #0
    3df8:	d0ce      	beq.n	3d98 <rint+0x7c>
    3dfa:	030b      	lsls	r3, r1, #12
    3dfc:	0b1b      	lsrs	r3, r3, #12
    3dfe:	4303      	orrs	r3, r0
    3e00:	425a      	negs	r2, r3
    3e02:	4313      	orrs	r3, r2
    3e04:	2280      	movs	r2, #128	; 0x80
    3e06:	0b1b      	lsrs	r3, r3, #12
    3e08:	0312      	lsls	r2, r2, #12
    3e0a:	4013      	ands	r3, r2
    3e0c:	0c4a      	lsrs	r2, r1, #17
    3e0e:	0452      	lsls	r2, r2, #17
    3e10:	4313      	orrs	r3, r2
    3e12:	0019      	movs	r1, r3
    3e14:	4643      	mov	r3, r8
    3e16:	4a10      	ldr	r2, [pc, #64]	; (3e58 <rint+0x13c>)
    3e18:	00db      	lsls	r3, r3, #3
    3e1a:	18d3      	adds	r3, r2, r3
    3e1c:	681c      	ldr	r4, [r3, #0]
    3e1e:	685d      	ldr	r5, [r3, #4]
    3e20:	0022      	movs	r2, r4
    3e22:	002b      	movs	r3, r5
    3e24:	f000 fc3a 	bl	469c <__aeabi_dadd>
    3e28:	9000      	str	r0, [sp, #0]
    3e2a:	9101      	str	r1, [sp, #4]
    3e2c:	9800      	ldr	r0, [sp, #0]
    3e2e:	9901      	ldr	r1, [sp, #4]
    3e30:	0022      	movs	r2, r4
    3e32:	002b      	movs	r3, r5
    3e34:	f001 fdfc 	bl	5a30 <__aeabi_dsub>
    3e38:	4642      	mov	r2, r8
    3e3a:	004b      	lsls	r3, r1, #1
    3e3c:	085b      	lsrs	r3, r3, #1
    3e3e:	07d6      	lsls	r6, r2, #31
    3e40:	4333      	orrs	r3, r6
    3e42:	0004      	movs	r4, r0
    3e44:	001d      	movs	r5, r3
    3e46:	e7a7      	b.n	3d98 <rint+0x7c>
    3e48:	2780      	movs	r7, #128	; 0x80
    3e4a:	063f      	lsls	r7, r7, #24
    3e4c:	e789      	b.n	3d62 <rint+0x46>
    3e4e:	46c0      	nop			; (mov r8, r8)
    3e50:	fffffc01 	.word	0xfffffc01
    3e54:	000fffff 	.word	0x000fffff
    3e58:	00006910 	.word	0x00006910
    3e5c:	fffffbed 	.word	0xfffffbed

00003e60 <scalbn>:
    3e60:	004b      	lsls	r3, r1, #1
    3e62:	b570      	push	{r4, r5, r6, lr}
    3e64:	0d5b      	lsrs	r3, r3, #21
    3e66:	0014      	movs	r4, r2
    3e68:	000a      	movs	r2, r1
    3e6a:	2b00      	cmp	r3, #0
    3e6c:	d11a      	bne.n	3ea4 <scalbn+0x44>
    3e6e:	004b      	lsls	r3, r1, #1
    3e70:	085b      	lsrs	r3, r3, #1
    3e72:	4303      	orrs	r3, r0
    3e74:	d015      	beq.n	3ea2 <scalbn+0x42>
    3e76:	2200      	movs	r2, #0
    3e78:	4b22      	ldr	r3, [pc, #136]	; (3f04 <scalbn+0xa4>)
    3e7a:	f001 fb5f 	bl	553c <__aeabi_dmul>
    3e7e:	4b22      	ldr	r3, [pc, #136]	; (3f08 <scalbn+0xa8>)
    3e80:	000a      	movs	r2, r1
    3e82:	429c      	cmp	r4, r3
    3e84:	db22      	blt.n	3ecc <scalbn+0x6c>
    3e86:	004b      	lsls	r3, r1, #1
    3e88:	0d5b      	lsrs	r3, r3, #21
    3e8a:	3b36      	subs	r3, #54	; 0x36
    3e8c:	4d1f      	ldr	r5, [pc, #124]	; (3f0c <scalbn+0xac>)
    3e8e:	18e3      	adds	r3, r4, r3
    3e90:	42ab      	cmp	r3, r5
    3e92:	dc20      	bgt.n	3ed6 <scalbn+0x76>
    3e94:	2b00      	cmp	r3, #0
    3e96:	dd0d      	ble.n	3eb4 <scalbn+0x54>
    3e98:	4c1d      	ldr	r4, [pc, #116]	; (3f10 <scalbn+0xb0>)
    3e9a:	051b      	lsls	r3, r3, #20
    3e9c:	4022      	ands	r2, r4
    3e9e:	431a      	orrs	r2, r3
    3ea0:	0011      	movs	r1, r2
    3ea2:	bd70      	pop	{r4, r5, r6, pc}
    3ea4:	4d1b      	ldr	r5, [pc, #108]	; (3f14 <scalbn+0xb4>)
    3ea6:	42ab      	cmp	r3, r5
    3ea8:	d1f0      	bne.n	3e8c <scalbn+0x2c>
    3eaa:	0002      	movs	r2, r0
    3eac:	000b      	movs	r3, r1
    3eae:	f000 fbf5 	bl	469c <__aeabi_dadd>
    3eb2:	e7f6      	b.n	3ea2 <scalbn+0x42>
    3eb4:	001d      	movs	r5, r3
    3eb6:	3535      	adds	r5, #53	; 0x35
    3eb8:	da18      	bge.n	3eec <scalbn+0x8c>
    3eba:	4b17      	ldr	r3, [pc, #92]	; (3f18 <scalbn+0xb8>)
    3ebc:	0002      	movs	r2, r0
    3ebe:	429c      	cmp	r4, r3
    3ec0:	dc0a      	bgt.n	3ed8 <scalbn+0x78>
    3ec2:	000b      	movs	r3, r1
    3ec4:	4815      	ldr	r0, [pc, #84]	; (3f1c <scalbn+0xbc>)
    3ec6:	4916      	ldr	r1, [pc, #88]	; (3f20 <scalbn+0xc0>)
    3ec8:	f000 f832 	bl	3f30 <copysign>
    3ecc:	4a13      	ldr	r2, [pc, #76]	; (3f1c <scalbn+0xbc>)
    3ece:	4b14      	ldr	r3, [pc, #80]	; (3f20 <scalbn+0xc0>)
    3ed0:	f001 fb34 	bl	553c <__aeabi_dmul>
    3ed4:	e7e5      	b.n	3ea2 <scalbn+0x42>
    3ed6:	0002      	movs	r2, r0
    3ed8:	000b      	movs	r3, r1
    3eda:	4812      	ldr	r0, [pc, #72]	; (3f24 <scalbn+0xc4>)
    3edc:	4912      	ldr	r1, [pc, #72]	; (3f28 <scalbn+0xc8>)
    3ede:	f000 f827 	bl	3f30 <copysign>
    3ee2:	4a10      	ldr	r2, [pc, #64]	; (3f24 <scalbn+0xc4>)
    3ee4:	4b10      	ldr	r3, [pc, #64]	; (3f28 <scalbn+0xc8>)
    3ee6:	f001 fb29 	bl	553c <__aeabi_dmul>
    3eea:	e7da      	b.n	3ea2 <scalbn+0x42>
    3eec:	4c08      	ldr	r4, [pc, #32]	; (3f10 <scalbn+0xb0>)
    3eee:	3336      	adds	r3, #54	; 0x36
    3ef0:	4022      	ands	r2, r4
    3ef2:	051b      	lsls	r3, r3, #20
    3ef4:	4313      	orrs	r3, r2
    3ef6:	0019      	movs	r1, r3
    3ef8:	2200      	movs	r2, #0
    3efa:	4b0c      	ldr	r3, [pc, #48]	; (3f2c <scalbn+0xcc>)
    3efc:	f001 fb1e 	bl	553c <__aeabi_dmul>
    3f00:	e7cf      	b.n	3ea2 <scalbn+0x42>
    3f02:	46c0      	nop			; (mov r8, r8)
    3f04:	43500000 	.word	0x43500000
    3f08:	ffff3cb0 	.word	0xffff3cb0
    3f0c:	000007fe 	.word	0x000007fe
    3f10:	800fffff 	.word	0x800fffff
    3f14:	000007ff 	.word	0x000007ff
    3f18:	0000c350 	.word	0x0000c350
    3f1c:	c2f8f359 	.word	0xc2f8f359
    3f20:	01a56e1f 	.word	0x01a56e1f
    3f24:	8800759c 	.word	0x8800759c
    3f28:	7e37e43c 	.word	0x7e37e43c
    3f2c:	3c900000 	.word	0x3c900000

00003f30 <copysign>:
    3f30:	b530      	push	{r4, r5, lr}
    3f32:	004a      	lsls	r2, r1, #1
    3f34:	0fdb      	lsrs	r3, r3, #31
    3f36:	07db      	lsls	r3, r3, #31
    3f38:	0852      	lsrs	r2, r2, #1
    3f3a:	431a      	orrs	r2, r3
    3f3c:	0011      	movs	r1, r2
    3f3e:	bd30      	pop	{r4, r5, pc}

00003f40 <__gnu_thumb1_case_uqi>:
    3f40:	b402      	push	{r1}
    3f42:	4671      	mov	r1, lr
    3f44:	0849      	lsrs	r1, r1, #1
    3f46:	0049      	lsls	r1, r1, #1
    3f48:	5c09      	ldrb	r1, [r1, r0]
    3f4a:	0049      	lsls	r1, r1, #1
    3f4c:	448e      	add	lr, r1
    3f4e:	bc02      	pop	{r1}
    3f50:	4770      	bx	lr
    3f52:	46c0      	nop			; (mov r8, r8)

00003f54 <__aeabi_cdrcmple>:
    3f54:	4684      	mov	ip, r0
    3f56:	1c10      	adds	r0, r2, #0
    3f58:	4662      	mov	r2, ip
    3f5a:	468c      	mov	ip, r1
    3f5c:	1c19      	adds	r1, r3, #0
    3f5e:	4663      	mov	r3, ip
    3f60:	e000      	b.n	3f64 <__aeabi_cdcmpeq>
    3f62:	46c0      	nop			; (mov r8, r8)

00003f64 <__aeabi_cdcmpeq>:
    3f64:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    3f66:	f001 fa7f 	bl	5468 <__ledf2>
    3f6a:	2800      	cmp	r0, #0
    3f6c:	d401      	bmi.n	3f72 <__aeabi_cdcmpeq+0xe>
    3f6e:	2100      	movs	r1, #0
    3f70:	42c8      	cmn	r0, r1
    3f72:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00003f74 <__aeabi_dcmpeq>:
    3f74:	b510      	push	{r4, lr}
    3f76:	f001 f9d3 	bl	5320 <__eqdf2>
    3f7a:	4240      	negs	r0, r0
    3f7c:	3001      	adds	r0, #1
    3f7e:	bd10      	pop	{r4, pc}

00003f80 <__aeabi_dcmplt>:
    3f80:	b510      	push	{r4, lr}
    3f82:	f001 fa71 	bl	5468 <__ledf2>
    3f86:	2800      	cmp	r0, #0
    3f88:	db01      	blt.n	3f8e <__aeabi_dcmplt+0xe>
    3f8a:	2000      	movs	r0, #0
    3f8c:	bd10      	pop	{r4, pc}
    3f8e:	2001      	movs	r0, #1
    3f90:	bd10      	pop	{r4, pc}
    3f92:	46c0      	nop			; (mov r8, r8)

00003f94 <__aeabi_dcmple>:
    3f94:	b510      	push	{r4, lr}
    3f96:	f001 fa67 	bl	5468 <__ledf2>
    3f9a:	2800      	cmp	r0, #0
    3f9c:	dd01      	ble.n	3fa2 <__aeabi_dcmple+0xe>
    3f9e:	2000      	movs	r0, #0
    3fa0:	bd10      	pop	{r4, pc}
    3fa2:	2001      	movs	r0, #1
    3fa4:	bd10      	pop	{r4, pc}
    3fa6:	46c0      	nop			; (mov r8, r8)

00003fa8 <__aeabi_dcmpgt>:
    3fa8:	b510      	push	{r4, lr}
    3faa:	f001 f9f9 	bl	53a0 <__gedf2>
    3fae:	2800      	cmp	r0, #0
    3fb0:	dc01      	bgt.n	3fb6 <__aeabi_dcmpgt+0xe>
    3fb2:	2000      	movs	r0, #0
    3fb4:	bd10      	pop	{r4, pc}
    3fb6:	2001      	movs	r0, #1
    3fb8:	bd10      	pop	{r4, pc}
    3fba:	46c0      	nop			; (mov r8, r8)

00003fbc <__aeabi_dcmpge>:
    3fbc:	b510      	push	{r4, lr}
    3fbe:	f001 f9ef 	bl	53a0 <__gedf2>
    3fc2:	2800      	cmp	r0, #0
    3fc4:	da01      	bge.n	3fca <__aeabi_dcmpge+0xe>
    3fc6:	2000      	movs	r0, #0
    3fc8:	bd10      	pop	{r4, pc}
    3fca:	2001      	movs	r0, #1
    3fcc:	bd10      	pop	{r4, pc}
    3fce:	46c0      	nop			; (mov r8, r8)

00003fd0 <__aeabi_lmul>:
    3fd0:	b5f0      	push	{r4, r5, r6, r7, lr}
    3fd2:	464f      	mov	r7, r9
    3fd4:	4646      	mov	r6, r8
    3fd6:	b4c0      	push	{r6, r7}
    3fd8:	0416      	lsls	r6, r2, #16
    3fda:	0c36      	lsrs	r6, r6, #16
    3fdc:	4699      	mov	r9, r3
    3fde:	0033      	movs	r3, r6
    3fe0:	0405      	lsls	r5, r0, #16
    3fe2:	0c2c      	lsrs	r4, r5, #16
    3fe4:	0c07      	lsrs	r7, r0, #16
    3fe6:	0c15      	lsrs	r5, r2, #16
    3fe8:	4363      	muls	r3, r4
    3fea:	437e      	muls	r6, r7
    3fec:	436f      	muls	r7, r5
    3fee:	4365      	muls	r5, r4
    3ff0:	0c1c      	lsrs	r4, r3, #16
    3ff2:	19ad      	adds	r5, r5, r6
    3ff4:	1964      	adds	r4, r4, r5
    3ff6:	469c      	mov	ip, r3
    3ff8:	42a6      	cmp	r6, r4
    3ffa:	d903      	bls.n	4004 <__aeabi_lmul+0x34>
    3ffc:	2380      	movs	r3, #128	; 0x80
    3ffe:	025b      	lsls	r3, r3, #9
    4000:	4698      	mov	r8, r3
    4002:	4447      	add	r7, r8
    4004:	4663      	mov	r3, ip
    4006:	0c25      	lsrs	r5, r4, #16
    4008:	19ef      	adds	r7, r5, r7
    400a:	041d      	lsls	r5, r3, #16
    400c:	464b      	mov	r3, r9
    400e:	434a      	muls	r2, r1
    4010:	4343      	muls	r3, r0
    4012:	0c2d      	lsrs	r5, r5, #16
    4014:	0424      	lsls	r4, r4, #16
    4016:	1964      	adds	r4, r4, r5
    4018:	1899      	adds	r1, r3, r2
    401a:	19c9      	adds	r1, r1, r7
    401c:	0020      	movs	r0, r4
    401e:	bc0c      	pop	{r2, r3}
    4020:	4690      	mov	r8, r2
    4022:	4699      	mov	r9, r3
    4024:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4026:	46c0      	nop			; (mov r8, r8)

00004028 <__aeabi_f2uiz>:
    4028:	219e      	movs	r1, #158	; 0x9e
    402a:	b510      	push	{r4, lr}
    402c:	05c9      	lsls	r1, r1, #23
    402e:	1c04      	adds	r4, r0, #0
    4030:	f002 fabe 	bl	65b0 <__aeabi_fcmpge>
    4034:	2800      	cmp	r0, #0
    4036:	d103      	bne.n	4040 <__aeabi_f2uiz+0x18>
    4038:	1c20      	adds	r0, r4, #0
    403a:	f000 fac5 	bl	45c8 <__aeabi_f2iz>
    403e:	bd10      	pop	{r4, pc}
    4040:	219e      	movs	r1, #158	; 0x9e
    4042:	1c20      	adds	r0, r4, #0
    4044:	05c9      	lsls	r1, r1, #23
    4046:	f000 f939 	bl	42bc <__aeabi_fsub>
    404a:	f000 fabd 	bl	45c8 <__aeabi_f2iz>
    404e:	2380      	movs	r3, #128	; 0x80
    4050:	061b      	lsls	r3, r3, #24
    4052:	469c      	mov	ip, r3
    4054:	4460      	add	r0, ip
    4056:	e7f2      	b.n	403e <__aeabi_f2uiz+0x16>

00004058 <__aeabi_d2uiz>:
    4058:	b570      	push	{r4, r5, r6, lr}
    405a:	2200      	movs	r2, #0
    405c:	4b0c      	ldr	r3, [pc, #48]	; (4090 <__aeabi_d2uiz+0x38>)
    405e:	0004      	movs	r4, r0
    4060:	000d      	movs	r5, r1
    4062:	f7ff ffab 	bl	3fbc <__aeabi_dcmpge>
    4066:	2800      	cmp	r0, #0
    4068:	d104      	bne.n	4074 <__aeabi_d2uiz+0x1c>
    406a:	0020      	movs	r0, r4
    406c:	0029      	movs	r1, r5
    406e:	f002 f853 	bl	6118 <__aeabi_d2iz>
    4072:	bd70      	pop	{r4, r5, r6, pc}
    4074:	4b06      	ldr	r3, [pc, #24]	; (4090 <__aeabi_d2uiz+0x38>)
    4076:	2200      	movs	r2, #0
    4078:	0020      	movs	r0, r4
    407a:	0029      	movs	r1, r5
    407c:	f001 fcd8 	bl	5a30 <__aeabi_dsub>
    4080:	f002 f84a 	bl	6118 <__aeabi_d2iz>
    4084:	2380      	movs	r3, #128	; 0x80
    4086:	061b      	lsls	r3, r3, #24
    4088:	469c      	mov	ip, r3
    408a:	4460      	add	r0, ip
    408c:	e7f1      	b.n	4072 <__aeabi_d2uiz+0x1a>
    408e:	46c0      	nop			; (mov r8, r8)
    4090:	41e00000 	.word	0x41e00000

00004094 <__aeabi_fmul>:
    4094:	b5f0      	push	{r4, r5, r6, r7, lr}
    4096:	4657      	mov	r7, sl
    4098:	464e      	mov	r6, r9
    409a:	4645      	mov	r5, r8
    409c:	0043      	lsls	r3, r0, #1
    409e:	b4e0      	push	{r5, r6, r7}
    40a0:	0246      	lsls	r6, r0, #9
    40a2:	4688      	mov	r8, r1
    40a4:	0a76      	lsrs	r6, r6, #9
    40a6:	0e1f      	lsrs	r7, r3, #24
    40a8:	0fc4      	lsrs	r4, r0, #31
    40aa:	2f00      	cmp	r7, #0
    40ac:	d047      	beq.n	413e <__aeabi_fmul+0xaa>
    40ae:	2fff      	cmp	r7, #255	; 0xff
    40b0:	d025      	beq.n	40fe <__aeabi_fmul+0x6a>
    40b2:	2300      	movs	r3, #0
    40b4:	2580      	movs	r5, #128	; 0x80
    40b6:	469a      	mov	sl, r3
    40b8:	4699      	mov	r9, r3
    40ba:	00f6      	lsls	r6, r6, #3
    40bc:	04ed      	lsls	r5, r5, #19
    40be:	432e      	orrs	r6, r5
    40c0:	3f7f      	subs	r7, #127	; 0x7f
    40c2:	4643      	mov	r3, r8
    40c4:	4642      	mov	r2, r8
    40c6:	025d      	lsls	r5, r3, #9
    40c8:	0fd2      	lsrs	r2, r2, #31
    40ca:	005b      	lsls	r3, r3, #1
    40cc:	0a6d      	lsrs	r5, r5, #9
    40ce:	0e1b      	lsrs	r3, r3, #24
    40d0:	4690      	mov	r8, r2
    40d2:	d040      	beq.n	4156 <__aeabi_fmul+0xc2>
    40d4:	2bff      	cmp	r3, #255	; 0xff
    40d6:	d039      	beq.n	414c <__aeabi_fmul+0xb8>
    40d8:	2280      	movs	r2, #128	; 0x80
    40da:	2000      	movs	r0, #0
    40dc:	00ed      	lsls	r5, r5, #3
    40de:	04d2      	lsls	r2, r2, #19
    40e0:	4315      	orrs	r5, r2
    40e2:	3b7f      	subs	r3, #127	; 0x7f
    40e4:	18fb      	adds	r3, r7, r3
    40e6:	4642      	mov	r2, r8
    40e8:	4657      	mov	r7, sl
    40ea:	1c59      	adds	r1, r3, #1
    40ec:	4062      	eors	r2, r4
    40ee:	468c      	mov	ip, r1
    40f0:	4307      	orrs	r7, r0
    40f2:	2f0f      	cmp	r7, #15
    40f4:	d85c      	bhi.n	41b0 <__aeabi_fmul+0x11c>
    40f6:	496f      	ldr	r1, [pc, #444]	; (42b4 <__aeabi_fmul+0x220>)
    40f8:	00bf      	lsls	r7, r7, #2
    40fa:	59c9      	ldr	r1, [r1, r7]
    40fc:	468f      	mov	pc, r1
    40fe:	2e00      	cmp	r6, #0
    4100:	d145      	bne.n	418e <__aeabi_fmul+0xfa>
    4102:	2308      	movs	r3, #8
    4104:	469a      	mov	sl, r3
    4106:	3b06      	subs	r3, #6
    4108:	4699      	mov	r9, r3
    410a:	e7da      	b.n	40c2 <__aeabi_fmul+0x2e>
    410c:	4642      	mov	r2, r8
    410e:	2802      	cmp	r0, #2
    4110:	d02d      	beq.n	416e <__aeabi_fmul+0xda>
    4112:	2803      	cmp	r0, #3
    4114:	d100      	bne.n	4118 <__aeabi_fmul+0x84>
    4116:	e0c3      	b.n	42a0 <__aeabi_fmul+0x20c>
    4118:	2801      	cmp	r0, #1
    411a:	d000      	beq.n	411e <__aeabi_fmul+0x8a>
    411c:	e0a2      	b.n	4264 <__aeabi_fmul+0x1d0>
    411e:	2500      	movs	r5, #0
    4120:	2600      	movs	r6, #0
    4122:	4002      	ands	r2, r0
    4124:	b2d4      	uxtb	r4, r2
    4126:	0276      	lsls	r6, r6, #9
    4128:	05ed      	lsls	r5, r5, #23
    412a:	0a76      	lsrs	r6, r6, #9
    412c:	432e      	orrs	r6, r5
    412e:	07e4      	lsls	r4, r4, #31
    4130:	4326      	orrs	r6, r4
    4132:	0030      	movs	r0, r6
    4134:	bc1c      	pop	{r2, r3, r4}
    4136:	4690      	mov	r8, r2
    4138:	4699      	mov	r9, r3
    413a:	46a2      	mov	sl, r4
    413c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    413e:	2e00      	cmp	r6, #0
    4140:	d11a      	bne.n	4178 <__aeabi_fmul+0xe4>
    4142:	2304      	movs	r3, #4
    4144:	469a      	mov	sl, r3
    4146:	3b03      	subs	r3, #3
    4148:	4699      	mov	r9, r3
    414a:	e7ba      	b.n	40c2 <__aeabi_fmul+0x2e>
    414c:	002a      	movs	r2, r5
    414e:	1e51      	subs	r1, r2, #1
    4150:	418a      	sbcs	r2, r1
    4152:	1c90      	adds	r0, r2, #2
    4154:	e7c6      	b.n	40e4 <__aeabi_fmul+0x50>
    4156:	2001      	movs	r0, #1
    4158:	2d00      	cmp	r5, #0
    415a:	d0c3      	beq.n	40e4 <__aeabi_fmul+0x50>
    415c:	0028      	movs	r0, r5
    415e:	f002 fa31 	bl	65c4 <__clzsi2>
    4162:	1f43      	subs	r3, r0, #5
    4164:	3076      	adds	r0, #118	; 0x76
    4166:	409d      	lsls	r5, r3
    4168:	4243      	negs	r3, r0
    416a:	2000      	movs	r0, #0
    416c:	e7ba      	b.n	40e4 <__aeabi_fmul+0x50>
    416e:	2401      	movs	r4, #1
    4170:	25ff      	movs	r5, #255	; 0xff
    4172:	4014      	ands	r4, r2
    4174:	2600      	movs	r6, #0
    4176:	e7d6      	b.n	4126 <__aeabi_fmul+0x92>
    4178:	0030      	movs	r0, r6
    417a:	f002 fa23 	bl	65c4 <__clzsi2>
    417e:	1f43      	subs	r3, r0, #5
    4180:	409e      	lsls	r6, r3
    4182:	2300      	movs	r3, #0
    4184:	3076      	adds	r0, #118	; 0x76
    4186:	4247      	negs	r7, r0
    4188:	469a      	mov	sl, r3
    418a:	4699      	mov	r9, r3
    418c:	e799      	b.n	40c2 <__aeabi_fmul+0x2e>
    418e:	230c      	movs	r3, #12
    4190:	469a      	mov	sl, r3
    4192:	3b09      	subs	r3, #9
    4194:	4699      	mov	r9, r3
    4196:	e794      	b.n	40c2 <__aeabi_fmul+0x2e>
    4198:	2680      	movs	r6, #128	; 0x80
    419a:	2400      	movs	r4, #0
    419c:	03f6      	lsls	r6, r6, #15
    419e:	25ff      	movs	r5, #255	; 0xff
    41a0:	e7c1      	b.n	4126 <__aeabi_fmul+0x92>
    41a2:	0035      	movs	r5, r6
    41a4:	4648      	mov	r0, r9
    41a6:	e7b2      	b.n	410e <__aeabi_fmul+0x7a>
    41a8:	0035      	movs	r5, r6
    41aa:	0022      	movs	r2, r4
    41ac:	4648      	mov	r0, r9
    41ae:	e7ae      	b.n	410e <__aeabi_fmul+0x7a>
    41b0:	0429      	lsls	r1, r5, #16
    41b2:	0c09      	lsrs	r1, r1, #16
    41b4:	0008      	movs	r0, r1
    41b6:	0c37      	lsrs	r7, r6, #16
    41b8:	0436      	lsls	r6, r6, #16
    41ba:	0c36      	lsrs	r6, r6, #16
    41bc:	0c2c      	lsrs	r4, r5, #16
    41be:	4379      	muls	r1, r7
    41c0:	4370      	muls	r0, r6
    41c2:	4367      	muls	r7, r4
    41c4:	4374      	muls	r4, r6
    41c6:	0c06      	lsrs	r6, r0, #16
    41c8:	1864      	adds	r4, r4, r1
    41ca:	1936      	adds	r6, r6, r4
    41cc:	42b1      	cmp	r1, r6
    41ce:	d903      	bls.n	41d8 <__aeabi_fmul+0x144>
    41d0:	2180      	movs	r1, #128	; 0x80
    41d2:	0249      	lsls	r1, r1, #9
    41d4:	4688      	mov	r8, r1
    41d6:	4447      	add	r7, r8
    41d8:	0400      	lsls	r0, r0, #16
    41da:	0c00      	lsrs	r0, r0, #16
    41dc:	0431      	lsls	r1, r6, #16
    41de:	1809      	adds	r1, r1, r0
    41e0:	018d      	lsls	r5, r1, #6
    41e2:	1e68      	subs	r0, r5, #1
    41e4:	4185      	sbcs	r5, r0
    41e6:	0e89      	lsrs	r1, r1, #26
    41e8:	4329      	orrs	r1, r5
    41ea:	0c35      	lsrs	r5, r6, #16
    41ec:	19ed      	adds	r5, r5, r7
    41ee:	01ad      	lsls	r5, r5, #6
    41f0:	430d      	orrs	r5, r1
    41f2:	0129      	lsls	r1, r5, #4
    41f4:	d504      	bpl.n	4200 <__aeabi_fmul+0x16c>
    41f6:	2301      	movs	r3, #1
    41f8:	0869      	lsrs	r1, r5, #1
    41fa:	401d      	ands	r5, r3
    41fc:	4663      	mov	r3, ip
    41fe:	430d      	orrs	r5, r1
    4200:	0019      	movs	r1, r3
    4202:	317f      	adds	r1, #127	; 0x7f
    4204:	2900      	cmp	r1, #0
    4206:	dd25      	ble.n	4254 <__aeabi_fmul+0x1c0>
    4208:	0768      	lsls	r0, r5, #29
    420a:	d004      	beq.n	4216 <__aeabi_fmul+0x182>
    420c:	200f      	movs	r0, #15
    420e:	4028      	ands	r0, r5
    4210:	2804      	cmp	r0, #4
    4212:	d000      	beq.n	4216 <__aeabi_fmul+0x182>
    4214:	3504      	adds	r5, #4
    4216:	0128      	lsls	r0, r5, #4
    4218:	d503      	bpl.n	4222 <__aeabi_fmul+0x18e>
    421a:	4927      	ldr	r1, [pc, #156]	; (42b8 <__aeabi_fmul+0x224>)
    421c:	3380      	adds	r3, #128	; 0x80
    421e:	400d      	ands	r5, r1
    4220:	0019      	movs	r1, r3
    4222:	29fe      	cmp	r1, #254	; 0xfe
    4224:	dca3      	bgt.n	416e <__aeabi_fmul+0xda>
    4226:	2401      	movs	r4, #1
    4228:	01ad      	lsls	r5, r5, #6
    422a:	0a6e      	lsrs	r6, r5, #9
    422c:	4014      	ands	r4, r2
    422e:	b2cd      	uxtb	r5, r1
    4230:	e779      	b.n	4126 <__aeabi_fmul+0x92>
    4232:	2080      	movs	r0, #128	; 0x80
    4234:	03c0      	lsls	r0, r0, #15
    4236:	4206      	tst	r6, r0
    4238:	d007      	beq.n	424a <__aeabi_fmul+0x1b6>
    423a:	4205      	tst	r5, r0
    423c:	d105      	bne.n	424a <__aeabi_fmul+0x1b6>
    423e:	4328      	orrs	r0, r5
    4240:	0246      	lsls	r6, r0, #9
    4242:	0a76      	lsrs	r6, r6, #9
    4244:	4644      	mov	r4, r8
    4246:	25ff      	movs	r5, #255	; 0xff
    4248:	e76d      	b.n	4126 <__aeabi_fmul+0x92>
    424a:	4306      	orrs	r6, r0
    424c:	0276      	lsls	r6, r6, #9
    424e:	0a76      	lsrs	r6, r6, #9
    4250:	25ff      	movs	r5, #255	; 0xff
    4252:	e768      	b.n	4126 <__aeabi_fmul+0x92>
    4254:	2401      	movs	r4, #1
    4256:	1a61      	subs	r1, r4, r1
    4258:	291b      	cmp	r1, #27
    425a:	dd05      	ble.n	4268 <__aeabi_fmul+0x1d4>
    425c:	4014      	ands	r4, r2
    425e:	2500      	movs	r5, #0
    4260:	2600      	movs	r6, #0
    4262:	e760      	b.n	4126 <__aeabi_fmul+0x92>
    4264:	4663      	mov	r3, ip
    4266:	e7cb      	b.n	4200 <__aeabi_fmul+0x16c>
    4268:	002e      	movs	r6, r5
    426a:	2320      	movs	r3, #32
    426c:	40ce      	lsrs	r6, r1
    426e:	1a59      	subs	r1, r3, r1
    4270:	408d      	lsls	r5, r1
    4272:	1e6b      	subs	r3, r5, #1
    4274:	419d      	sbcs	r5, r3
    4276:	432e      	orrs	r6, r5
    4278:	0773      	lsls	r3, r6, #29
    427a:	d004      	beq.n	4286 <__aeabi_fmul+0x1f2>
    427c:	230f      	movs	r3, #15
    427e:	4033      	ands	r3, r6
    4280:	2b04      	cmp	r3, #4
    4282:	d000      	beq.n	4286 <__aeabi_fmul+0x1f2>
    4284:	3604      	adds	r6, #4
    4286:	0173      	lsls	r3, r6, #5
    4288:	d504      	bpl.n	4294 <__aeabi_fmul+0x200>
    428a:	2401      	movs	r4, #1
    428c:	2501      	movs	r5, #1
    428e:	4014      	ands	r4, r2
    4290:	2600      	movs	r6, #0
    4292:	e748      	b.n	4126 <__aeabi_fmul+0x92>
    4294:	2401      	movs	r4, #1
    4296:	01b6      	lsls	r6, r6, #6
    4298:	0a76      	lsrs	r6, r6, #9
    429a:	4014      	ands	r4, r2
    429c:	2500      	movs	r5, #0
    429e:	e742      	b.n	4126 <__aeabi_fmul+0x92>
    42a0:	2680      	movs	r6, #128	; 0x80
    42a2:	2401      	movs	r4, #1
    42a4:	03f6      	lsls	r6, r6, #15
    42a6:	432e      	orrs	r6, r5
    42a8:	0276      	lsls	r6, r6, #9
    42aa:	0a76      	lsrs	r6, r6, #9
    42ac:	4014      	ands	r4, r2
    42ae:	25ff      	movs	r5, #255	; 0xff
    42b0:	e739      	b.n	4126 <__aeabi_fmul+0x92>
    42b2:	46c0      	nop			; (mov r8, r8)
    42b4:	00006920 	.word	0x00006920
    42b8:	f7ffffff 	.word	0xf7ffffff

000042bc <__aeabi_fsub>:
    42bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    42be:	024a      	lsls	r2, r1, #9
    42c0:	004e      	lsls	r6, r1, #1
    42c2:	0243      	lsls	r3, r0, #9
    42c4:	0044      	lsls	r4, r0, #1
    42c6:	0e24      	lsrs	r4, r4, #24
    42c8:	0fc5      	lsrs	r5, r0, #31
    42ca:	099b      	lsrs	r3, r3, #6
    42cc:	0e36      	lsrs	r6, r6, #24
    42ce:	0fc9      	lsrs	r1, r1, #31
    42d0:	0992      	lsrs	r2, r2, #6
    42d2:	2eff      	cmp	r6, #255	; 0xff
    42d4:	d100      	bne.n	42d8 <__aeabi_fsub+0x1c>
    42d6:	e083      	b.n	43e0 <__aeabi_fsub+0x124>
    42d8:	2001      	movs	r0, #1
    42da:	4041      	eors	r1, r0
    42dc:	1ba0      	subs	r0, r4, r6
    42de:	42a9      	cmp	r1, r5
    42e0:	d05c      	beq.n	439c <__aeabi_fsub+0xe0>
    42e2:	2800      	cmp	r0, #0
    42e4:	dc00      	bgt.n	42e8 <__aeabi_fsub+0x2c>
    42e6:	e095      	b.n	4414 <__aeabi_fsub+0x158>
    42e8:	2e00      	cmp	r6, #0
    42ea:	d11c      	bne.n	4326 <__aeabi_fsub+0x6a>
    42ec:	2a00      	cmp	r2, #0
    42ee:	d000      	beq.n	42f2 <__aeabi_fsub+0x36>
    42f0:	e081      	b.n	43f6 <__aeabi_fsub+0x13a>
    42f2:	075a      	lsls	r2, r3, #29
    42f4:	d004      	beq.n	4300 <__aeabi_fsub+0x44>
    42f6:	220f      	movs	r2, #15
    42f8:	401a      	ands	r2, r3
    42fa:	2a04      	cmp	r2, #4
    42fc:	d000      	beq.n	4300 <__aeabi_fsub+0x44>
    42fe:	3304      	adds	r3, #4
    4300:	015a      	lsls	r2, r3, #5
    4302:	d53b      	bpl.n	437c <__aeabi_fsub+0xc0>
    4304:	3401      	adds	r4, #1
    4306:	2cff      	cmp	r4, #255	; 0xff
    4308:	d100      	bne.n	430c <__aeabi_fsub+0x50>
    430a:	e091      	b.n	4430 <__aeabi_fsub+0x174>
    430c:	2001      	movs	r0, #1
    430e:	019b      	lsls	r3, r3, #6
    4310:	0a5b      	lsrs	r3, r3, #9
    4312:	b2e4      	uxtb	r4, r4
    4314:	4005      	ands	r5, r0
    4316:	025b      	lsls	r3, r3, #9
    4318:	05e4      	lsls	r4, r4, #23
    431a:	0a5b      	lsrs	r3, r3, #9
    431c:	07ed      	lsls	r5, r5, #31
    431e:	4323      	orrs	r3, r4
    4320:	432b      	orrs	r3, r5
    4322:	0018      	movs	r0, r3
    4324:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4326:	2cff      	cmp	r4, #255	; 0xff
    4328:	d0e3      	beq.n	42f2 <__aeabi_fsub+0x36>
    432a:	2180      	movs	r1, #128	; 0x80
    432c:	04c9      	lsls	r1, r1, #19
    432e:	430a      	orrs	r2, r1
    4330:	281b      	cmp	r0, #27
    4332:	dd00      	ble.n	4336 <__aeabi_fsub+0x7a>
    4334:	e090      	b.n	4458 <__aeabi_fsub+0x19c>
    4336:	0016      	movs	r6, r2
    4338:	2120      	movs	r1, #32
    433a:	40c6      	lsrs	r6, r0
    433c:	1a08      	subs	r0, r1, r0
    433e:	4082      	lsls	r2, r0
    4340:	1e51      	subs	r1, r2, #1
    4342:	418a      	sbcs	r2, r1
    4344:	4332      	orrs	r2, r6
    4346:	1a9b      	subs	r3, r3, r2
    4348:	015a      	lsls	r2, r3, #5
    434a:	d515      	bpl.n	4378 <__aeabi_fsub+0xbc>
    434c:	019b      	lsls	r3, r3, #6
    434e:	099e      	lsrs	r6, r3, #6
    4350:	0030      	movs	r0, r6
    4352:	f002 f937 	bl	65c4 <__clzsi2>
    4356:	3805      	subs	r0, #5
    4358:	4086      	lsls	r6, r0
    435a:	4284      	cmp	r4, r0
    435c:	dc6c      	bgt.n	4438 <__aeabi_fsub+0x17c>
    435e:	1b04      	subs	r4, r0, r4
    4360:	0033      	movs	r3, r6
    4362:	2020      	movs	r0, #32
    4364:	3401      	adds	r4, #1
    4366:	40e3      	lsrs	r3, r4
    4368:	1b04      	subs	r4, r0, r4
    436a:	40a6      	lsls	r6, r4
    436c:	1e72      	subs	r2, r6, #1
    436e:	4196      	sbcs	r6, r2
    4370:	2400      	movs	r4, #0
    4372:	4333      	orrs	r3, r6
    4374:	e7bd      	b.n	42f2 <__aeabi_fsub+0x36>
    4376:	000d      	movs	r5, r1
    4378:	075a      	lsls	r2, r3, #29
    437a:	d1bc      	bne.n	42f6 <__aeabi_fsub+0x3a>
    437c:	08df      	lsrs	r7, r3, #3
    437e:	2301      	movs	r3, #1
    4380:	401d      	ands	r5, r3
    4382:	2cff      	cmp	r4, #255	; 0xff
    4384:	d133      	bne.n	43ee <__aeabi_fsub+0x132>
    4386:	2f00      	cmp	r7, #0
    4388:	d100      	bne.n	438c <__aeabi_fsub+0xd0>
    438a:	e090      	b.n	44ae <__aeabi_fsub+0x1f2>
    438c:	2280      	movs	r2, #128	; 0x80
    438e:	03d2      	lsls	r2, r2, #15
    4390:	0013      	movs	r3, r2
    4392:	433b      	orrs	r3, r7
    4394:	025b      	lsls	r3, r3, #9
    4396:	0a5b      	lsrs	r3, r3, #9
    4398:	24ff      	movs	r4, #255	; 0xff
    439a:	e7bc      	b.n	4316 <__aeabi_fsub+0x5a>
    439c:	2800      	cmp	r0, #0
    439e:	dd4f      	ble.n	4440 <__aeabi_fsub+0x184>
    43a0:	2e00      	cmp	r6, #0
    43a2:	d02e      	beq.n	4402 <__aeabi_fsub+0x146>
    43a4:	2cff      	cmp	r4, #255	; 0xff
    43a6:	d0a4      	beq.n	42f2 <__aeabi_fsub+0x36>
    43a8:	2580      	movs	r5, #128	; 0x80
    43aa:	04ed      	lsls	r5, r5, #19
    43ac:	432a      	orrs	r2, r5
    43ae:	281b      	cmp	r0, #27
    43b0:	dd00      	ble.n	43b4 <__aeabi_fsub+0xf8>
    43b2:	e097      	b.n	44e4 <__aeabi_fsub+0x228>
    43b4:	0016      	movs	r6, r2
    43b6:	2520      	movs	r5, #32
    43b8:	40c6      	lsrs	r6, r0
    43ba:	1a28      	subs	r0, r5, r0
    43bc:	4082      	lsls	r2, r0
    43be:	1e50      	subs	r0, r2, #1
    43c0:	4182      	sbcs	r2, r0
    43c2:	4332      	orrs	r2, r6
    43c4:	189b      	adds	r3, r3, r2
    43c6:	015a      	lsls	r2, r3, #5
    43c8:	d5d5      	bpl.n	4376 <__aeabi_fsub+0xba>
    43ca:	3401      	adds	r4, #1
    43cc:	2cff      	cmp	r4, #255	; 0xff
    43ce:	d06d      	beq.n	44ac <__aeabi_fsub+0x1f0>
    43d0:	2201      	movs	r2, #1
    43d2:	487b      	ldr	r0, [pc, #492]	; (45c0 <__aeabi_fsub+0x304>)
    43d4:	401a      	ands	r2, r3
    43d6:	085b      	lsrs	r3, r3, #1
    43d8:	4003      	ands	r3, r0
    43da:	4313      	orrs	r3, r2
    43dc:	000d      	movs	r5, r1
    43de:	e788      	b.n	42f2 <__aeabi_fsub+0x36>
    43e0:	2a00      	cmp	r2, #0
    43e2:	d000      	beq.n	43e6 <__aeabi_fsub+0x12a>
    43e4:	e77a      	b.n	42dc <__aeabi_fsub+0x20>
    43e6:	e777      	b.n	42d8 <__aeabi_fsub+0x1c>
    43e8:	1e03      	subs	r3, r0, #0
    43ea:	d1c5      	bne.n	4378 <__aeabi_fsub+0xbc>
    43ec:	2500      	movs	r5, #0
    43ee:	027b      	lsls	r3, r7, #9
    43f0:	0a5b      	lsrs	r3, r3, #9
    43f2:	b2e4      	uxtb	r4, r4
    43f4:	e78f      	b.n	4316 <__aeabi_fsub+0x5a>
    43f6:	3801      	subs	r0, #1
    43f8:	2800      	cmp	r0, #0
    43fa:	d0a4      	beq.n	4346 <__aeabi_fsub+0x8a>
    43fc:	2cff      	cmp	r4, #255	; 0xff
    43fe:	d197      	bne.n	4330 <__aeabi_fsub+0x74>
    4400:	e777      	b.n	42f2 <__aeabi_fsub+0x36>
    4402:	2a00      	cmp	r2, #0
    4404:	d100      	bne.n	4408 <__aeabi_fsub+0x14c>
    4406:	e774      	b.n	42f2 <__aeabi_fsub+0x36>
    4408:	3801      	subs	r0, #1
    440a:	2800      	cmp	r0, #0
    440c:	d0da      	beq.n	43c4 <__aeabi_fsub+0x108>
    440e:	2cff      	cmp	r4, #255	; 0xff
    4410:	d1cd      	bne.n	43ae <__aeabi_fsub+0xf2>
    4412:	e76e      	b.n	42f2 <__aeabi_fsub+0x36>
    4414:	2800      	cmp	r0, #0
    4416:	d121      	bne.n	445c <__aeabi_fsub+0x1a0>
    4418:	1c60      	adds	r0, r4, #1
    441a:	b2c0      	uxtb	r0, r0
    441c:	2801      	cmp	r0, #1
    441e:	dd58      	ble.n	44d2 <__aeabi_fsub+0x216>
    4420:	2780      	movs	r7, #128	; 0x80
    4422:	1a9e      	subs	r6, r3, r2
    4424:	04ff      	lsls	r7, r7, #19
    4426:	4037      	ands	r7, r6
    4428:	d02f      	beq.n	448a <__aeabi_fsub+0x1ce>
    442a:	1ad6      	subs	r6, r2, r3
    442c:	000d      	movs	r5, r1
    442e:	e78f      	b.n	4350 <__aeabi_fsub+0x94>
    4430:	2301      	movs	r3, #1
    4432:	401d      	ands	r5, r3
    4434:	2300      	movs	r3, #0
    4436:	e76e      	b.n	4316 <__aeabi_fsub+0x5a>
    4438:	4b62      	ldr	r3, [pc, #392]	; (45c4 <__aeabi_fsub+0x308>)
    443a:	1a24      	subs	r4, r4, r0
    443c:	4033      	ands	r3, r6
    443e:	e758      	b.n	42f2 <__aeabi_fsub+0x36>
    4440:	2800      	cmp	r0, #0
    4442:	d151      	bne.n	44e8 <__aeabi_fsub+0x22c>
    4444:	1c60      	adds	r0, r4, #1
    4446:	b2c6      	uxtb	r6, r0
    4448:	2e01      	cmp	r6, #1
    444a:	dd33      	ble.n	44b4 <__aeabi_fsub+0x1f8>
    444c:	28ff      	cmp	r0, #255	; 0xff
    444e:	d02d      	beq.n	44ac <__aeabi_fsub+0x1f0>
    4450:	189b      	adds	r3, r3, r2
    4452:	085b      	lsrs	r3, r3, #1
    4454:	0004      	movs	r4, r0
    4456:	e74c      	b.n	42f2 <__aeabi_fsub+0x36>
    4458:	2201      	movs	r2, #1
    445a:	e774      	b.n	4346 <__aeabi_fsub+0x8a>
    445c:	2c00      	cmp	r4, #0
    445e:	d01a      	beq.n	4496 <__aeabi_fsub+0x1da>
    4460:	2eff      	cmp	r6, #255	; 0xff
    4462:	d01f      	beq.n	44a4 <__aeabi_fsub+0x1e8>
    4464:	2480      	movs	r4, #128	; 0x80
    4466:	04e4      	lsls	r4, r4, #19
    4468:	4240      	negs	r0, r0
    446a:	4323      	orrs	r3, r4
    446c:	281b      	cmp	r0, #27
    446e:	dd00      	ble.n	4472 <__aeabi_fsub+0x1b6>
    4470:	e096      	b.n	45a0 <__aeabi_fsub+0x2e4>
    4472:	001d      	movs	r5, r3
    4474:	2420      	movs	r4, #32
    4476:	40c5      	lsrs	r5, r0
    4478:	1a20      	subs	r0, r4, r0
    447a:	4083      	lsls	r3, r0
    447c:	1e58      	subs	r0, r3, #1
    447e:	4183      	sbcs	r3, r0
    4480:	432b      	orrs	r3, r5
    4482:	1ad3      	subs	r3, r2, r3
    4484:	0034      	movs	r4, r6
    4486:	000d      	movs	r5, r1
    4488:	e75e      	b.n	4348 <__aeabi_fsub+0x8c>
    448a:	2e00      	cmp	r6, #0
    448c:	d000      	beq.n	4490 <__aeabi_fsub+0x1d4>
    448e:	e75f      	b.n	4350 <__aeabi_fsub+0x94>
    4490:	2500      	movs	r5, #0
    4492:	2400      	movs	r4, #0
    4494:	e7ab      	b.n	43ee <__aeabi_fsub+0x132>
    4496:	2b00      	cmp	r3, #0
    4498:	d044      	beq.n	4524 <__aeabi_fsub+0x268>
    449a:	43c0      	mvns	r0, r0
    449c:	2800      	cmp	r0, #0
    449e:	d0f0      	beq.n	4482 <__aeabi_fsub+0x1c6>
    44a0:	2eff      	cmp	r6, #255	; 0xff
    44a2:	d1e3      	bne.n	446c <__aeabi_fsub+0x1b0>
    44a4:	0013      	movs	r3, r2
    44a6:	24ff      	movs	r4, #255	; 0xff
    44a8:	000d      	movs	r5, r1
    44aa:	e722      	b.n	42f2 <__aeabi_fsub+0x36>
    44ac:	000d      	movs	r5, r1
    44ae:	24ff      	movs	r4, #255	; 0xff
    44b0:	2300      	movs	r3, #0
    44b2:	e730      	b.n	4316 <__aeabi_fsub+0x5a>
    44b4:	2c00      	cmp	r4, #0
    44b6:	d15d      	bne.n	4574 <__aeabi_fsub+0x2b8>
    44b8:	2b00      	cmp	r3, #0
    44ba:	d07d      	beq.n	45b8 <__aeabi_fsub+0x2fc>
    44bc:	2a00      	cmp	r2, #0
    44be:	d100      	bne.n	44c2 <__aeabi_fsub+0x206>
    44c0:	e717      	b.n	42f2 <__aeabi_fsub+0x36>
    44c2:	189b      	adds	r3, r3, r2
    44c4:	015a      	lsls	r2, r3, #5
    44c6:	d400      	bmi.n	44ca <__aeabi_fsub+0x20e>
    44c8:	e756      	b.n	4378 <__aeabi_fsub+0xbc>
    44ca:	4a3e      	ldr	r2, [pc, #248]	; (45c4 <__aeabi_fsub+0x308>)
    44cc:	0004      	movs	r4, r0
    44ce:	4013      	ands	r3, r2
    44d0:	e70f      	b.n	42f2 <__aeabi_fsub+0x36>
    44d2:	2c00      	cmp	r4, #0
    44d4:	d11e      	bne.n	4514 <__aeabi_fsub+0x258>
    44d6:	2b00      	cmp	r3, #0
    44d8:	d12f      	bne.n	453a <__aeabi_fsub+0x27e>
    44da:	2a00      	cmp	r2, #0
    44dc:	d065      	beq.n	45aa <__aeabi_fsub+0x2ee>
    44de:	0013      	movs	r3, r2
    44e0:	000d      	movs	r5, r1
    44e2:	e706      	b.n	42f2 <__aeabi_fsub+0x36>
    44e4:	2201      	movs	r2, #1
    44e6:	e76d      	b.n	43c4 <__aeabi_fsub+0x108>
    44e8:	2c00      	cmp	r4, #0
    44ea:	d11f      	bne.n	452c <__aeabi_fsub+0x270>
    44ec:	2b00      	cmp	r3, #0
    44ee:	d059      	beq.n	45a4 <__aeabi_fsub+0x2e8>
    44f0:	43c0      	mvns	r0, r0
    44f2:	2800      	cmp	r0, #0
    44f4:	d00b      	beq.n	450e <__aeabi_fsub+0x252>
    44f6:	2eff      	cmp	r6, #255	; 0xff
    44f8:	d04f      	beq.n	459a <__aeabi_fsub+0x2de>
    44fa:	281b      	cmp	r0, #27
    44fc:	dc5e      	bgt.n	45bc <__aeabi_fsub+0x300>
    44fe:	001d      	movs	r5, r3
    4500:	2420      	movs	r4, #32
    4502:	40c5      	lsrs	r5, r0
    4504:	1a20      	subs	r0, r4, r0
    4506:	4083      	lsls	r3, r0
    4508:	1e58      	subs	r0, r3, #1
    450a:	4183      	sbcs	r3, r0
    450c:	432b      	orrs	r3, r5
    450e:	189b      	adds	r3, r3, r2
    4510:	0034      	movs	r4, r6
    4512:	e758      	b.n	43c6 <__aeabi_fsub+0x10a>
    4514:	2b00      	cmp	r3, #0
    4516:	d11c      	bne.n	4552 <__aeabi_fsub+0x296>
    4518:	2a00      	cmp	r2, #0
    451a:	d049      	beq.n	45b0 <__aeabi_fsub+0x2f4>
    451c:	0013      	movs	r3, r2
    451e:	000d      	movs	r5, r1
    4520:	24ff      	movs	r4, #255	; 0xff
    4522:	e6e6      	b.n	42f2 <__aeabi_fsub+0x36>
    4524:	0013      	movs	r3, r2
    4526:	0034      	movs	r4, r6
    4528:	000d      	movs	r5, r1
    452a:	e6e2      	b.n	42f2 <__aeabi_fsub+0x36>
    452c:	2eff      	cmp	r6, #255	; 0xff
    452e:	d034      	beq.n	459a <__aeabi_fsub+0x2de>
    4530:	2480      	movs	r4, #128	; 0x80
    4532:	04e4      	lsls	r4, r4, #19
    4534:	4240      	negs	r0, r0
    4536:	4323      	orrs	r3, r4
    4538:	e7df      	b.n	44fa <__aeabi_fsub+0x23e>
    453a:	2a00      	cmp	r2, #0
    453c:	d100      	bne.n	4540 <__aeabi_fsub+0x284>
    453e:	e6d8      	b.n	42f2 <__aeabi_fsub+0x36>
    4540:	2780      	movs	r7, #128	; 0x80
    4542:	1a98      	subs	r0, r3, r2
    4544:	04ff      	lsls	r7, r7, #19
    4546:	4007      	ands	r7, r0
    4548:	d100      	bne.n	454c <__aeabi_fsub+0x290>
    454a:	e74d      	b.n	43e8 <__aeabi_fsub+0x12c>
    454c:	1ad3      	subs	r3, r2, r3
    454e:	000d      	movs	r5, r1
    4550:	e6cf      	b.n	42f2 <__aeabi_fsub+0x36>
    4552:	24ff      	movs	r4, #255	; 0xff
    4554:	2a00      	cmp	r2, #0
    4556:	d100      	bne.n	455a <__aeabi_fsub+0x29e>
    4558:	e6cb      	b.n	42f2 <__aeabi_fsub+0x36>
    455a:	2080      	movs	r0, #128	; 0x80
    455c:	08db      	lsrs	r3, r3, #3
    455e:	03c0      	lsls	r0, r0, #15
    4560:	4203      	tst	r3, r0
    4562:	d004      	beq.n	456e <__aeabi_fsub+0x2b2>
    4564:	08d2      	lsrs	r2, r2, #3
    4566:	4202      	tst	r2, r0
    4568:	d101      	bne.n	456e <__aeabi_fsub+0x2b2>
    456a:	0013      	movs	r3, r2
    456c:	000d      	movs	r5, r1
    456e:	00db      	lsls	r3, r3, #3
    4570:	24ff      	movs	r4, #255	; 0xff
    4572:	e6be      	b.n	42f2 <__aeabi_fsub+0x36>
    4574:	2b00      	cmp	r3, #0
    4576:	d010      	beq.n	459a <__aeabi_fsub+0x2de>
    4578:	24ff      	movs	r4, #255	; 0xff
    457a:	2a00      	cmp	r2, #0
    457c:	d100      	bne.n	4580 <__aeabi_fsub+0x2c4>
    457e:	e6b8      	b.n	42f2 <__aeabi_fsub+0x36>
    4580:	2080      	movs	r0, #128	; 0x80
    4582:	08db      	lsrs	r3, r3, #3
    4584:	03c0      	lsls	r0, r0, #15
    4586:	4203      	tst	r3, r0
    4588:	d003      	beq.n	4592 <__aeabi_fsub+0x2d6>
    458a:	08d2      	lsrs	r2, r2, #3
    458c:	4202      	tst	r2, r0
    458e:	d100      	bne.n	4592 <__aeabi_fsub+0x2d6>
    4590:	0013      	movs	r3, r2
    4592:	00db      	lsls	r3, r3, #3
    4594:	000d      	movs	r5, r1
    4596:	24ff      	movs	r4, #255	; 0xff
    4598:	e6ab      	b.n	42f2 <__aeabi_fsub+0x36>
    459a:	0013      	movs	r3, r2
    459c:	24ff      	movs	r4, #255	; 0xff
    459e:	e6a8      	b.n	42f2 <__aeabi_fsub+0x36>
    45a0:	2301      	movs	r3, #1
    45a2:	e76e      	b.n	4482 <__aeabi_fsub+0x1c6>
    45a4:	0013      	movs	r3, r2
    45a6:	0034      	movs	r4, r6
    45a8:	e6a3      	b.n	42f2 <__aeabi_fsub+0x36>
    45aa:	2700      	movs	r7, #0
    45ac:	2500      	movs	r5, #0
    45ae:	e71e      	b.n	43ee <__aeabi_fsub+0x132>
    45b0:	2780      	movs	r7, #128	; 0x80
    45b2:	2500      	movs	r5, #0
    45b4:	03ff      	lsls	r7, r7, #15
    45b6:	e6e9      	b.n	438c <__aeabi_fsub+0xd0>
    45b8:	0013      	movs	r3, r2
    45ba:	e69a      	b.n	42f2 <__aeabi_fsub+0x36>
    45bc:	2301      	movs	r3, #1
    45be:	e7a6      	b.n	450e <__aeabi_fsub+0x252>
    45c0:	7dffffff 	.word	0x7dffffff
    45c4:	fbffffff 	.word	0xfbffffff

000045c8 <__aeabi_f2iz>:
    45c8:	0243      	lsls	r3, r0, #9
    45ca:	0a59      	lsrs	r1, r3, #9
    45cc:	0043      	lsls	r3, r0, #1
    45ce:	0fc2      	lsrs	r2, r0, #31
    45d0:	0e1b      	lsrs	r3, r3, #24
    45d2:	2000      	movs	r0, #0
    45d4:	2b7e      	cmp	r3, #126	; 0x7e
    45d6:	dd0e      	ble.n	45f6 <__aeabi_f2iz+0x2e>
    45d8:	2b9d      	cmp	r3, #157	; 0x9d
    45da:	dc0d      	bgt.n	45f8 <__aeabi_f2iz+0x30>
    45dc:	2080      	movs	r0, #128	; 0x80
    45de:	0400      	lsls	r0, r0, #16
    45e0:	4301      	orrs	r1, r0
    45e2:	2b95      	cmp	r3, #149	; 0x95
    45e4:	dc0b      	bgt.n	45fe <__aeabi_f2iz+0x36>
    45e6:	2096      	movs	r0, #150	; 0x96
    45e8:	1ac3      	subs	r3, r0, r3
    45ea:	40d9      	lsrs	r1, r3
    45ec:	000b      	movs	r3, r1
    45ee:	4258      	negs	r0, r3
    45f0:	2a00      	cmp	r2, #0
    45f2:	d100      	bne.n	45f6 <__aeabi_f2iz+0x2e>
    45f4:	0018      	movs	r0, r3
    45f6:	4770      	bx	lr
    45f8:	4b03      	ldr	r3, [pc, #12]	; (4608 <__aeabi_f2iz+0x40>)
    45fa:	18d0      	adds	r0, r2, r3
    45fc:	e7fb      	b.n	45f6 <__aeabi_f2iz+0x2e>
    45fe:	3b96      	subs	r3, #150	; 0x96
    4600:	4099      	lsls	r1, r3
    4602:	000b      	movs	r3, r1
    4604:	e7f3      	b.n	45ee <__aeabi_f2iz+0x26>
    4606:	46c0      	nop			; (mov r8, r8)
    4608:	7fffffff 	.word	0x7fffffff

0000460c <__aeabi_i2f>:
    460c:	b570      	push	{r4, r5, r6, lr}
    460e:	2800      	cmp	r0, #0
    4610:	d030      	beq.n	4674 <__aeabi_i2f+0x68>
    4612:	17c3      	asrs	r3, r0, #31
    4614:	18c5      	adds	r5, r0, r3
    4616:	405d      	eors	r5, r3
    4618:	0fc4      	lsrs	r4, r0, #31
    461a:	0028      	movs	r0, r5
    461c:	f001 ffd2 	bl	65c4 <__clzsi2>
    4620:	239e      	movs	r3, #158	; 0x9e
    4622:	1a1b      	subs	r3, r3, r0
    4624:	2b96      	cmp	r3, #150	; 0x96
    4626:	dc0d      	bgt.n	4644 <__aeabi_i2f+0x38>
    4628:	2296      	movs	r2, #150	; 0x96
    462a:	1ad2      	subs	r2, r2, r3
    462c:	4095      	lsls	r5, r2
    462e:	026a      	lsls	r2, r5, #9
    4630:	0a52      	lsrs	r2, r2, #9
    4632:	b2d8      	uxtb	r0, r3
    4634:	0252      	lsls	r2, r2, #9
    4636:	05c0      	lsls	r0, r0, #23
    4638:	0a52      	lsrs	r2, r2, #9
    463a:	07e4      	lsls	r4, r4, #31
    463c:	4302      	orrs	r2, r0
    463e:	4322      	orrs	r2, r4
    4640:	0010      	movs	r0, r2
    4642:	bd70      	pop	{r4, r5, r6, pc}
    4644:	2b99      	cmp	r3, #153	; 0x99
    4646:	dc19      	bgt.n	467c <__aeabi_i2f+0x70>
    4648:	2299      	movs	r2, #153	; 0x99
    464a:	1ad2      	subs	r2, r2, r3
    464c:	4095      	lsls	r5, r2
    464e:	4a12      	ldr	r2, [pc, #72]	; (4698 <__aeabi_i2f+0x8c>)
    4650:	402a      	ands	r2, r5
    4652:	0769      	lsls	r1, r5, #29
    4654:	d004      	beq.n	4660 <__aeabi_i2f+0x54>
    4656:	210f      	movs	r1, #15
    4658:	400d      	ands	r5, r1
    465a:	2d04      	cmp	r5, #4
    465c:	d000      	beq.n	4660 <__aeabi_i2f+0x54>
    465e:	3204      	adds	r2, #4
    4660:	0151      	lsls	r1, r2, #5
    4662:	d503      	bpl.n	466c <__aeabi_i2f+0x60>
    4664:	4b0c      	ldr	r3, [pc, #48]	; (4698 <__aeabi_i2f+0x8c>)
    4666:	401a      	ands	r2, r3
    4668:	239f      	movs	r3, #159	; 0x9f
    466a:	1a1b      	subs	r3, r3, r0
    466c:	0192      	lsls	r2, r2, #6
    466e:	0a52      	lsrs	r2, r2, #9
    4670:	b2d8      	uxtb	r0, r3
    4672:	e7df      	b.n	4634 <__aeabi_i2f+0x28>
    4674:	2400      	movs	r4, #0
    4676:	2000      	movs	r0, #0
    4678:	2200      	movs	r2, #0
    467a:	e7db      	b.n	4634 <__aeabi_i2f+0x28>
    467c:	2205      	movs	r2, #5
    467e:	002e      	movs	r6, r5
    4680:	1a12      	subs	r2, r2, r0
    4682:	21b9      	movs	r1, #185	; 0xb9
    4684:	40d6      	lsrs	r6, r2
    4686:	002a      	movs	r2, r5
    4688:	1ac9      	subs	r1, r1, r3
    468a:	408a      	lsls	r2, r1
    468c:	1e55      	subs	r5, r2, #1
    468e:	41aa      	sbcs	r2, r5
    4690:	0035      	movs	r5, r6
    4692:	4315      	orrs	r5, r2
    4694:	e7db      	b.n	464e <__aeabi_i2f+0x42>
    4696:	46c0      	nop			; (mov r8, r8)
    4698:	fbffffff 	.word	0xfbffffff

0000469c <__aeabi_dadd>:
    469c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    469e:	4656      	mov	r6, sl
    46a0:	465f      	mov	r7, fp
    46a2:	464d      	mov	r5, r9
    46a4:	4644      	mov	r4, r8
    46a6:	b4f0      	push	{r4, r5, r6, r7}
    46a8:	000f      	movs	r7, r1
    46aa:	0ffd      	lsrs	r5, r7, #31
    46ac:	46aa      	mov	sl, r5
    46ae:	0309      	lsls	r1, r1, #12
    46b0:	007c      	lsls	r4, r7, #1
    46b2:	002e      	movs	r6, r5
    46b4:	005f      	lsls	r7, r3, #1
    46b6:	0f45      	lsrs	r5, r0, #29
    46b8:	0a49      	lsrs	r1, r1, #9
    46ba:	0d7f      	lsrs	r7, r7, #21
    46bc:	4329      	orrs	r1, r5
    46be:	00c5      	lsls	r5, r0, #3
    46c0:	0318      	lsls	r0, r3, #12
    46c2:	46bc      	mov	ip, r7
    46c4:	0a40      	lsrs	r0, r0, #9
    46c6:	0f57      	lsrs	r7, r2, #29
    46c8:	0d64      	lsrs	r4, r4, #21
    46ca:	0fdb      	lsrs	r3, r3, #31
    46cc:	4338      	orrs	r0, r7
    46ce:	00d2      	lsls	r2, r2, #3
    46d0:	459a      	cmp	sl, r3
    46d2:	d100      	bne.n	46d6 <__aeabi_dadd+0x3a>
    46d4:	e0aa      	b.n	482c <__aeabi_dadd+0x190>
    46d6:	4666      	mov	r6, ip
    46d8:	1ba6      	subs	r6, r4, r6
    46da:	2e00      	cmp	r6, #0
    46dc:	dc00      	bgt.n	46e0 <__aeabi_dadd+0x44>
    46de:	e0ff      	b.n	48e0 <__aeabi_dadd+0x244>
    46e0:	4663      	mov	r3, ip
    46e2:	2b00      	cmp	r3, #0
    46e4:	d139      	bne.n	475a <__aeabi_dadd+0xbe>
    46e6:	0003      	movs	r3, r0
    46e8:	4313      	orrs	r3, r2
    46ea:	d000      	beq.n	46ee <__aeabi_dadd+0x52>
    46ec:	e0d9      	b.n	48a2 <__aeabi_dadd+0x206>
    46ee:	076b      	lsls	r3, r5, #29
    46f0:	d009      	beq.n	4706 <__aeabi_dadd+0x6a>
    46f2:	230f      	movs	r3, #15
    46f4:	402b      	ands	r3, r5
    46f6:	2b04      	cmp	r3, #4
    46f8:	d005      	beq.n	4706 <__aeabi_dadd+0x6a>
    46fa:	1d2b      	adds	r3, r5, #4
    46fc:	42ab      	cmp	r3, r5
    46fe:	41ad      	sbcs	r5, r5
    4700:	426d      	negs	r5, r5
    4702:	1949      	adds	r1, r1, r5
    4704:	001d      	movs	r5, r3
    4706:	020b      	lsls	r3, r1, #8
    4708:	d400      	bmi.n	470c <__aeabi_dadd+0x70>
    470a:	e082      	b.n	4812 <__aeabi_dadd+0x176>
    470c:	4bca      	ldr	r3, [pc, #808]	; (4a38 <__aeabi_dadd+0x39c>)
    470e:	3401      	adds	r4, #1
    4710:	429c      	cmp	r4, r3
    4712:	d100      	bne.n	4716 <__aeabi_dadd+0x7a>
    4714:	e0fe      	b.n	4914 <__aeabi_dadd+0x278>
    4716:	000a      	movs	r2, r1
    4718:	4656      	mov	r6, sl
    471a:	4bc8      	ldr	r3, [pc, #800]	; (4a3c <__aeabi_dadd+0x3a0>)
    471c:	08ed      	lsrs	r5, r5, #3
    471e:	401a      	ands	r2, r3
    4720:	0750      	lsls	r0, r2, #29
    4722:	0564      	lsls	r4, r4, #21
    4724:	0252      	lsls	r2, r2, #9
    4726:	4305      	orrs	r5, r0
    4728:	0b12      	lsrs	r2, r2, #12
    472a:	0d64      	lsrs	r4, r4, #21
    472c:	2100      	movs	r1, #0
    472e:	0312      	lsls	r2, r2, #12
    4730:	0d0b      	lsrs	r3, r1, #20
    4732:	051b      	lsls	r3, r3, #20
    4734:	0564      	lsls	r4, r4, #21
    4736:	0b12      	lsrs	r2, r2, #12
    4738:	431a      	orrs	r2, r3
    473a:	0863      	lsrs	r3, r4, #1
    473c:	4cc0      	ldr	r4, [pc, #768]	; (4a40 <__aeabi_dadd+0x3a4>)
    473e:	07f6      	lsls	r6, r6, #31
    4740:	4014      	ands	r4, r2
    4742:	431c      	orrs	r4, r3
    4744:	0064      	lsls	r4, r4, #1
    4746:	0864      	lsrs	r4, r4, #1
    4748:	4334      	orrs	r4, r6
    474a:	0028      	movs	r0, r5
    474c:	0021      	movs	r1, r4
    474e:	bc3c      	pop	{r2, r3, r4, r5}
    4750:	4690      	mov	r8, r2
    4752:	4699      	mov	r9, r3
    4754:	46a2      	mov	sl, r4
    4756:	46ab      	mov	fp, r5
    4758:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    475a:	4bb7      	ldr	r3, [pc, #732]	; (4a38 <__aeabi_dadd+0x39c>)
    475c:	429c      	cmp	r4, r3
    475e:	d0c6      	beq.n	46ee <__aeabi_dadd+0x52>
    4760:	2380      	movs	r3, #128	; 0x80
    4762:	041b      	lsls	r3, r3, #16
    4764:	4318      	orrs	r0, r3
    4766:	2e38      	cmp	r6, #56	; 0x38
    4768:	dd00      	ble.n	476c <__aeabi_dadd+0xd0>
    476a:	e0eb      	b.n	4944 <__aeabi_dadd+0x2a8>
    476c:	2e1f      	cmp	r6, #31
    476e:	dd00      	ble.n	4772 <__aeabi_dadd+0xd6>
    4770:	e11e      	b.n	49b0 <__aeabi_dadd+0x314>
    4772:	2320      	movs	r3, #32
    4774:	1b9b      	subs	r3, r3, r6
    4776:	469c      	mov	ip, r3
    4778:	0003      	movs	r3, r0
    477a:	4667      	mov	r7, ip
    477c:	40bb      	lsls	r3, r7
    477e:	4698      	mov	r8, r3
    4780:	0013      	movs	r3, r2
    4782:	4647      	mov	r7, r8
    4784:	40f3      	lsrs	r3, r6
    4786:	433b      	orrs	r3, r7
    4788:	4667      	mov	r7, ip
    478a:	40ba      	lsls	r2, r7
    478c:	1e57      	subs	r7, r2, #1
    478e:	41ba      	sbcs	r2, r7
    4790:	4313      	orrs	r3, r2
    4792:	0002      	movs	r2, r0
    4794:	40f2      	lsrs	r2, r6
    4796:	1aeb      	subs	r3, r5, r3
    4798:	429d      	cmp	r5, r3
    479a:	41b6      	sbcs	r6, r6
    479c:	001d      	movs	r5, r3
    479e:	1a8a      	subs	r2, r1, r2
    47a0:	4276      	negs	r6, r6
    47a2:	1b91      	subs	r1, r2, r6
    47a4:	020b      	lsls	r3, r1, #8
    47a6:	d531      	bpl.n	480c <__aeabi_dadd+0x170>
    47a8:	024a      	lsls	r2, r1, #9
    47aa:	0a56      	lsrs	r6, r2, #9
    47ac:	2e00      	cmp	r6, #0
    47ae:	d100      	bne.n	47b2 <__aeabi_dadd+0x116>
    47b0:	e0b4      	b.n	491c <__aeabi_dadd+0x280>
    47b2:	0030      	movs	r0, r6
    47b4:	f001 ff06 	bl	65c4 <__clzsi2>
    47b8:	0003      	movs	r3, r0
    47ba:	3b08      	subs	r3, #8
    47bc:	2b1f      	cmp	r3, #31
    47be:	dd00      	ble.n	47c2 <__aeabi_dadd+0x126>
    47c0:	e0b5      	b.n	492e <__aeabi_dadd+0x292>
    47c2:	2220      	movs	r2, #32
    47c4:	0029      	movs	r1, r5
    47c6:	1ad2      	subs	r2, r2, r3
    47c8:	40d1      	lsrs	r1, r2
    47ca:	409e      	lsls	r6, r3
    47cc:	000a      	movs	r2, r1
    47ce:	409d      	lsls	r5, r3
    47d0:	4332      	orrs	r2, r6
    47d2:	429c      	cmp	r4, r3
    47d4:	dd00      	ble.n	47d8 <__aeabi_dadd+0x13c>
    47d6:	e0b1      	b.n	493c <__aeabi_dadd+0x2a0>
    47d8:	1b1c      	subs	r4, r3, r4
    47da:	1c63      	adds	r3, r4, #1
    47dc:	2b1f      	cmp	r3, #31
    47de:	dd00      	ble.n	47e2 <__aeabi_dadd+0x146>
    47e0:	e0d5      	b.n	498e <__aeabi_dadd+0x2f2>
    47e2:	2120      	movs	r1, #32
    47e4:	0014      	movs	r4, r2
    47e6:	0028      	movs	r0, r5
    47e8:	1ac9      	subs	r1, r1, r3
    47ea:	408c      	lsls	r4, r1
    47ec:	40d8      	lsrs	r0, r3
    47ee:	408d      	lsls	r5, r1
    47f0:	4304      	orrs	r4, r0
    47f2:	40da      	lsrs	r2, r3
    47f4:	1e68      	subs	r0, r5, #1
    47f6:	4185      	sbcs	r5, r0
    47f8:	0011      	movs	r1, r2
    47fa:	4325      	orrs	r5, r4
    47fc:	2400      	movs	r4, #0
    47fe:	e776      	b.n	46ee <__aeabi_dadd+0x52>
    4800:	4641      	mov	r1, r8
    4802:	4331      	orrs	r1, r6
    4804:	d100      	bne.n	4808 <__aeabi_dadd+0x16c>
    4806:	e234      	b.n	4c72 <__aeabi_dadd+0x5d6>
    4808:	0031      	movs	r1, r6
    480a:	4645      	mov	r5, r8
    480c:	076b      	lsls	r3, r5, #29
    480e:	d000      	beq.n	4812 <__aeabi_dadd+0x176>
    4810:	e76f      	b.n	46f2 <__aeabi_dadd+0x56>
    4812:	4656      	mov	r6, sl
    4814:	0748      	lsls	r0, r1, #29
    4816:	08ed      	lsrs	r5, r5, #3
    4818:	08c9      	lsrs	r1, r1, #3
    481a:	4305      	orrs	r5, r0
    481c:	4b86      	ldr	r3, [pc, #536]	; (4a38 <__aeabi_dadd+0x39c>)
    481e:	429c      	cmp	r4, r3
    4820:	d035      	beq.n	488e <__aeabi_dadd+0x1f2>
    4822:	030a      	lsls	r2, r1, #12
    4824:	0564      	lsls	r4, r4, #21
    4826:	0b12      	lsrs	r2, r2, #12
    4828:	0d64      	lsrs	r4, r4, #21
    482a:	e77f      	b.n	472c <__aeabi_dadd+0x90>
    482c:	4663      	mov	r3, ip
    482e:	1ae3      	subs	r3, r4, r3
    4830:	469b      	mov	fp, r3
    4832:	2b00      	cmp	r3, #0
    4834:	dc00      	bgt.n	4838 <__aeabi_dadd+0x19c>
    4836:	e08b      	b.n	4950 <__aeabi_dadd+0x2b4>
    4838:	4667      	mov	r7, ip
    483a:	2f00      	cmp	r7, #0
    483c:	d03c      	beq.n	48b8 <__aeabi_dadd+0x21c>
    483e:	4f7e      	ldr	r7, [pc, #504]	; (4a38 <__aeabi_dadd+0x39c>)
    4840:	42bc      	cmp	r4, r7
    4842:	d100      	bne.n	4846 <__aeabi_dadd+0x1aa>
    4844:	e753      	b.n	46ee <__aeabi_dadd+0x52>
    4846:	2780      	movs	r7, #128	; 0x80
    4848:	043f      	lsls	r7, r7, #16
    484a:	4338      	orrs	r0, r7
    484c:	465b      	mov	r3, fp
    484e:	2b38      	cmp	r3, #56	; 0x38
    4850:	dc00      	bgt.n	4854 <__aeabi_dadd+0x1b8>
    4852:	e0f7      	b.n	4a44 <__aeabi_dadd+0x3a8>
    4854:	4302      	orrs	r2, r0
    4856:	1e50      	subs	r0, r2, #1
    4858:	4182      	sbcs	r2, r0
    485a:	2000      	movs	r0, #0
    485c:	b2d2      	uxtb	r2, r2
    485e:	1953      	adds	r3, r2, r5
    4860:	1842      	adds	r2, r0, r1
    4862:	42ab      	cmp	r3, r5
    4864:	4189      	sbcs	r1, r1
    4866:	001d      	movs	r5, r3
    4868:	4249      	negs	r1, r1
    486a:	1889      	adds	r1, r1, r2
    486c:	020b      	lsls	r3, r1, #8
    486e:	d5cd      	bpl.n	480c <__aeabi_dadd+0x170>
    4870:	4b71      	ldr	r3, [pc, #452]	; (4a38 <__aeabi_dadd+0x39c>)
    4872:	3401      	adds	r4, #1
    4874:	429c      	cmp	r4, r3
    4876:	d100      	bne.n	487a <__aeabi_dadd+0x1de>
    4878:	e13d      	b.n	4af6 <__aeabi_dadd+0x45a>
    487a:	2001      	movs	r0, #1
    487c:	4a6f      	ldr	r2, [pc, #444]	; (4a3c <__aeabi_dadd+0x3a0>)
    487e:	086b      	lsrs	r3, r5, #1
    4880:	400a      	ands	r2, r1
    4882:	4028      	ands	r0, r5
    4884:	4318      	orrs	r0, r3
    4886:	07d5      	lsls	r5, r2, #31
    4888:	4305      	orrs	r5, r0
    488a:	0851      	lsrs	r1, r2, #1
    488c:	e72f      	b.n	46ee <__aeabi_dadd+0x52>
    488e:	002b      	movs	r3, r5
    4890:	430b      	orrs	r3, r1
    4892:	d100      	bne.n	4896 <__aeabi_dadd+0x1fa>
    4894:	e1cb      	b.n	4c2e <__aeabi_dadd+0x592>
    4896:	2380      	movs	r3, #128	; 0x80
    4898:	031b      	lsls	r3, r3, #12
    489a:	430b      	orrs	r3, r1
    489c:	031a      	lsls	r2, r3, #12
    489e:	0b12      	lsrs	r2, r2, #12
    48a0:	e744      	b.n	472c <__aeabi_dadd+0x90>
    48a2:	3e01      	subs	r6, #1
    48a4:	2e00      	cmp	r6, #0
    48a6:	d16d      	bne.n	4984 <__aeabi_dadd+0x2e8>
    48a8:	1aae      	subs	r6, r5, r2
    48aa:	42b5      	cmp	r5, r6
    48ac:	419b      	sbcs	r3, r3
    48ae:	1a09      	subs	r1, r1, r0
    48b0:	425b      	negs	r3, r3
    48b2:	1ac9      	subs	r1, r1, r3
    48b4:	0035      	movs	r5, r6
    48b6:	e775      	b.n	47a4 <__aeabi_dadd+0x108>
    48b8:	0007      	movs	r7, r0
    48ba:	4317      	orrs	r7, r2
    48bc:	d100      	bne.n	48c0 <__aeabi_dadd+0x224>
    48be:	e716      	b.n	46ee <__aeabi_dadd+0x52>
    48c0:	2301      	movs	r3, #1
    48c2:	425b      	negs	r3, r3
    48c4:	469c      	mov	ip, r3
    48c6:	44e3      	add	fp, ip
    48c8:	465b      	mov	r3, fp
    48ca:	2b00      	cmp	r3, #0
    48cc:	d000      	beq.n	48d0 <__aeabi_dadd+0x234>
    48ce:	e0e0      	b.n	4a92 <__aeabi_dadd+0x3f6>
    48d0:	18aa      	adds	r2, r5, r2
    48d2:	42aa      	cmp	r2, r5
    48d4:	419b      	sbcs	r3, r3
    48d6:	1809      	adds	r1, r1, r0
    48d8:	425b      	negs	r3, r3
    48da:	1859      	adds	r1, r3, r1
    48dc:	0015      	movs	r5, r2
    48de:	e7c5      	b.n	486c <__aeabi_dadd+0x1d0>
    48e0:	2e00      	cmp	r6, #0
    48e2:	d175      	bne.n	49d0 <__aeabi_dadd+0x334>
    48e4:	1c66      	adds	r6, r4, #1
    48e6:	0576      	lsls	r6, r6, #21
    48e8:	0d76      	lsrs	r6, r6, #21
    48ea:	2e01      	cmp	r6, #1
    48ec:	dc00      	bgt.n	48f0 <__aeabi_dadd+0x254>
    48ee:	e0f3      	b.n	4ad8 <__aeabi_dadd+0x43c>
    48f0:	1aae      	subs	r6, r5, r2
    48f2:	46b0      	mov	r8, r6
    48f4:	4545      	cmp	r5, r8
    48f6:	41bf      	sbcs	r7, r7
    48f8:	1a0e      	subs	r6, r1, r0
    48fa:	427f      	negs	r7, r7
    48fc:	1bf6      	subs	r6, r6, r7
    48fe:	0237      	lsls	r7, r6, #8
    4900:	d400      	bmi.n	4904 <__aeabi_dadd+0x268>
    4902:	e08f      	b.n	4a24 <__aeabi_dadd+0x388>
    4904:	1b55      	subs	r5, r2, r5
    4906:	42aa      	cmp	r2, r5
    4908:	41b6      	sbcs	r6, r6
    490a:	1a41      	subs	r1, r0, r1
    490c:	4276      	negs	r6, r6
    490e:	1b8e      	subs	r6, r1, r6
    4910:	469a      	mov	sl, r3
    4912:	e74b      	b.n	47ac <__aeabi_dadd+0x110>
    4914:	4656      	mov	r6, sl
    4916:	2200      	movs	r2, #0
    4918:	2500      	movs	r5, #0
    491a:	e707      	b.n	472c <__aeabi_dadd+0x90>
    491c:	0028      	movs	r0, r5
    491e:	f001 fe51 	bl	65c4 <__clzsi2>
    4922:	3020      	adds	r0, #32
    4924:	0003      	movs	r3, r0
    4926:	3b08      	subs	r3, #8
    4928:	2b1f      	cmp	r3, #31
    492a:	dc00      	bgt.n	492e <__aeabi_dadd+0x292>
    492c:	e749      	b.n	47c2 <__aeabi_dadd+0x126>
    492e:	002a      	movs	r2, r5
    4930:	3828      	subs	r0, #40	; 0x28
    4932:	4082      	lsls	r2, r0
    4934:	2500      	movs	r5, #0
    4936:	429c      	cmp	r4, r3
    4938:	dc00      	bgt.n	493c <__aeabi_dadd+0x2a0>
    493a:	e74d      	b.n	47d8 <__aeabi_dadd+0x13c>
    493c:	493f      	ldr	r1, [pc, #252]	; (4a3c <__aeabi_dadd+0x3a0>)
    493e:	1ae4      	subs	r4, r4, r3
    4940:	4011      	ands	r1, r2
    4942:	e6d4      	b.n	46ee <__aeabi_dadd+0x52>
    4944:	4302      	orrs	r2, r0
    4946:	1e50      	subs	r0, r2, #1
    4948:	4182      	sbcs	r2, r0
    494a:	b2d3      	uxtb	r3, r2
    494c:	2200      	movs	r2, #0
    494e:	e722      	b.n	4796 <__aeabi_dadd+0xfa>
    4950:	2b00      	cmp	r3, #0
    4952:	d000      	beq.n	4956 <__aeabi_dadd+0x2ba>
    4954:	e0f3      	b.n	4b3e <__aeabi_dadd+0x4a2>
    4956:	1c63      	adds	r3, r4, #1
    4958:	469c      	mov	ip, r3
    495a:	055b      	lsls	r3, r3, #21
    495c:	0d5b      	lsrs	r3, r3, #21
    495e:	2b01      	cmp	r3, #1
    4960:	dc00      	bgt.n	4964 <__aeabi_dadd+0x2c8>
    4962:	e09f      	b.n	4aa4 <__aeabi_dadd+0x408>
    4964:	4b34      	ldr	r3, [pc, #208]	; (4a38 <__aeabi_dadd+0x39c>)
    4966:	459c      	cmp	ip, r3
    4968:	d100      	bne.n	496c <__aeabi_dadd+0x2d0>
    496a:	e0c3      	b.n	4af4 <__aeabi_dadd+0x458>
    496c:	18aa      	adds	r2, r5, r2
    496e:	1809      	adds	r1, r1, r0
    4970:	42aa      	cmp	r2, r5
    4972:	4180      	sbcs	r0, r0
    4974:	4240      	negs	r0, r0
    4976:	1841      	adds	r1, r0, r1
    4978:	07cd      	lsls	r5, r1, #31
    497a:	0852      	lsrs	r2, r2, #1
    497c:	4315      	orrs	r5, r2
    497e:	0849      	lsrs	r1, r1, #1
    4980:	4664      	mov	r4, ip
    4982:	e6b4      	b.n	46ee <__aeabi_dadd+0x52>
    4984:	4b2c      	ldr	r3, [pc, #176]	; (4a38 <__aeabi_dadd+0x39c>)
    4986:	429c      	cmp	r4, r3
    4988:	d000      	beq.n	498c <__aeabi_dadd+0x2f0>
    498a:	e6ec      	b.n	4766 <__aeabi_dadd+0xca>
    498c:	e6af      	b.n	46ee <__aeabi_dadd+0x52>
    498e:	0011      	movs	r1, r2
    4990:	3c1f      	subs	r4, #31
    4992:	40e1      	lsrs	r1, r4
    4994:	000c      	movs	r4, r1
    4996:	2b20      	cmp	r3, #32
    4998:	d100      	bne.n	499c <__aeabi_dadd+0x300>
    499a:	e07f      	b.n	4a9c <__aeabi_dadd+0x400>
    499c:	2140      	movs	r1, #64	; 0x40
    499e:	1acb      	subs	r3, r1, r3
    49a0:	409a      	lsls	r2, r3
    49a2:	4315      	orrs	r5, r2
    49a4:	1e6a      	subs	r2, r5, #1
    49a6:	4195      	sbcs	r5, r2
    49a8:	2100      	movs	r1, #0
    49aa:	4325      	orrs	r5, r4
    49ac:	2400      	movs	r4, #0
    49ae:	e72d      	b.n	480c <__aeabi_dadd+0x170>
    49b0:	0033      	movs	r3, r6
    49b2:	0007      	movs	r7, r0
    49b4:	3b20      	subs	r3, #32
    49b6:	40df      	lsrs	r7, r3
    49b8:	003b      	movs	r3, r7
    49ba:	2e20      	cmp	r6, #32
    49bc:	d070      	beq.n	4aa0 <__aeabi_dadd+0x404>
    49be:	2740      	movs	r7, #64	; 0x40
    49c0:	1bbe      	subs	r6, r7, r6
    49c2:	40b0      	lsls	r0, r6
    49c4:	4302      	orrs	r2, r0
    49c6:	1e50      	subs	r0, r2, #1
    49c8:	4182      	sbcs	r2, r0
    49ca:	4313      	orrs	r3, r2
    49cc:	2200      	movs	r2, #0
    49ce:	e6e2      	b.n	4796 <__aeabi_dadd+0xfa>
    49d0:	2c00      	cmp	r4, #0
    49d2:	d04f      	beq.n	4a74 <__aeabi_dadd+0x3d8>
    49d4:	4c18      	ldr	r4, [pc, #96]	; (4a38 <__aeabi_dadd+0x39c>)
    49d6:	45a4      	cmp	ip, r4
    49d8:	d100      	bne.n	49dc <__aeabi_dadd+0x340>
    49da:	e0ab      	b.n	4b34 <__aeabi_dadd+0x498>
    49dc:	2480      	movs	r4, #128	; 0x80
    49de:	0424      	lsls	r4, r4, #16
    49e0:	4276      	negs	r6, r6
    49e2:	4321      	orrs	r1, r4
    49e4:	2e38      	cmp	r6, #56	; 0x38
    49e6:	dd00      	ble.n	49ea <__aeabi_dadd+0x34e>
    49e8:	e0df      	b.n	4baa <__aeabi_dadd+0x50e>
    49ea:	2e1f      	cmp	r6, #31
    49ec:	dd00      	ble.n	49f0 <__aeabi_dadd+0x354>
    49ee:	e143      	b.n	4c78 <__aeabi_dadd+0x5dc>
    49f0:	2720      	movs	r7, #32
    49f2:	1bbc      	subs	r4, r7, r6
    49f4:	46a1      	mov	r9, r4
    49f6:	000c      	movs	r4, r1
    49f8:	464f      	mov	r7, r9
    49fa:	40bc      	lsls	r4, r7
    49fc:	46a0      	mov	r8, r4
    49fe:	002c      	movs	r4, r5
    4a00:	4647      	mov	r7, r8
    4a02:	40f4      	lsrs	r4, r6
    4a04:	433c      	orrs	r4, r7
    4a06:	464f      	mov	r7, r9
    4a08:	40bd      	lsls	r5, r7
    4a0a:	1e6f      	subs	r7, r5, #1
    4a0c:	41bd      	sbcs	r5, r7
    4a0e:	40f1      	lsrs	r1, r6
    4a10:	432c      	orrs	r4, r5
    4a12:	1b15      	subs	r5, r2, r4
    4a14:	42aa      	cmp	r2, r5
    4a16:	4192      	sbcs	r2, r2
    4a18:	1a41      	subs	r1, r0, r1
    4a1a:	4252      	negs	r2, r2
    4a1c:	1a89      	subs	r1, r1, r2
    4a1e:	4664      	mov	r4, ip
    4a20:	469a      	mov	sl, r3
    4a22:	e6bf      	b.n	47a4 <__aeabi_dadd+0x108>
    4a24:	4641      	mov	r1, r8
    4a26:	4645      	mov	r5, r8
    4a28:	4331      	orrs	r1, r6
    4a2a:	d000      	beq.n	4a2e <__aeabi_dadd+0x392>
    4a2c:	e6be      	b.n	47ac <__aeabi_dadd+0x110>
    4a2e:	2600      	movs	r6, #0
    4a30:	2400      	movs	r4, #0
    4a32:	2500      	movs	r5, #0
    4a34:	e6f2      	b.n	481c <__aeabi_dadd+0x180>
    4a36:	46c0      	nop			; (mov r8, r8)
    4a38:	000007ff 	.word	0x000007ff
    4a3c:	ff7fffff 	.word	0xff7fffff
    4a40:	800fffff 	.word	0x800fffff
    4a44:	2b1f      	cmp	r3, #31
    4a46:	dc59      	bgt.n	4afc <__aeabi_dadd+0x460>
    4a48:	2720      	movs	r7, #32
    4a4a:	1aff      	subs	r7, r7, r3
    4a4c:	46bc      	mov	ip, r7
    4a4e:	0007      	movs	r7, r0
    4a50:	4663      	mov	r3, ip
    4a52:	409f      	lsls	r7, r3
    4a54:	465b      	mov	r3, fp
    4a56:	46b9      	mov	r9, r7
    4a58:	0017      	movs	r7, r2
    4a5a:	40df      	lsrs	r7, r3
    4a5c:	46b8      	mov	r8, r7
    4a5e:	464f      	mov	r7, r9
    4a60:	4643      	mov	r3, r8
    4a62:	431f      	orrs	r7, r3
    4a64:	4663      	mov	r3, ip
    4a66:	409a      	lsls	r2, r3
    4a68:	1e53      	subs	r3, r2, #1
    4a6a:	419a      	sbcs	r2, r3
    4a6c:	465b      	mov	r3, fp
    4a6e:	433a      	orrs	r2, r7
    4a70:	40d8      	lsrs	r0, r3
    4a72:	e6f4      	b.n	485e <__aeabi_dadd+0x1c2>
    4a74:	000c      	movs	r4, r1
    4a76:	432c      	orrs	r4, r5
    4a78:	d05c      	beq.n	4b34 <__aeabi_dadd+0x498>
    4a7a:	43f6      	mvns	r6, r6
    4a7c:	2e00      	cmp	r6, #0
    4a7e:	d155      	bne.n	4b2c <__aeabi_dadd+0x490>
    4a80:	1b55      	subs	r5, r2, r5
    4a82:	42aa      	cmp	r2, r5
    4a84:	41a4      	sbcs	r4, r4
    4a86:	1a41      	subs	r1, r0, r1
    4a88:	4264      	negs	r4, r4
    4a8a:	1b09      	subs	r1, r1, r4
    4a8c:	469a      	mov	sl, r3
    4a8e:	4664      	mov	r4, ip
    4a90:	e688      	b.n	47a4 <__aeabi_dadd+0x108>
    4a92:	4f96      	ldr	r7, [pc, #600]	; (4cec <__aeabi_dadd+0x650>)
    4a94:	42bc      	cmp	r4, r7
    4a96:	d000      	beq.n	4a9a <__aeabi_dadd+0x3fe>
    4a98:	e6d8      	b.n	484c <__aeabi_dadd+0x1b0>
    4a9a:	e628      	b.n	46ee <__aeabi_dadd+0x52>
    4a9c:	2200      	movs	r2, #0
    4a9e:	e780      	b.n	49a2 <__aeabi_dadd+0x306>
    4aa0:	2000      	movs	r0, #0
    4aa2:	e78f      	b.n	49c4 <__aeabi_dadd+0x328>
    4aa4:	000b      	movs	r3, r1
    4aa6:	432b      	orrs	r3, r5
    4aa8:	2c00      	cmp	r4, #0
    4aaa:	d000      	beq.n	4aae <__aeabi_dadd+0x412>
    4aac:	e0c2      	b.n	4c34 <__aeabi_dadd+0x598>
    4aae:	2b00      	cmp	r3, #0
    4ab0:	d100      	bne.n	4ab4 <__aeabi_dadd+0x418>
    4ab2:	e101      	b.n	4cb8 <__aeabi_dadd+0x61c>
    4ab4:	0003      	movs	r3, r0
    4ab6:	4313      	orrs	r3, r2
    4ab8:	d100      	bne.n	4abc <__aeabi_dadd+0x420>
    4aba:	e618      	b.n	46ee <__aeabi_dadd+0x52>
    4abc:	18ab      	adds	r3, r5, r2
    4abe:	42ab      	cmp	r3, r5
    4ac0:	41b6      	sbcs	r6, r6
    4ac2:	1809      	adds	r1, r1, r0
    4ac4:	4276      	negs	r6, r6
    4ac6:	1871      	adds	r1, r6, r1
    4ac8:	020a      	lsls	r2, r1, #8
    4aca:	d400      	bmi.n	4ace <__aeabi_dadd+0x432>
    4acc:	e109      	b.n	4ce2 <__aeabi_dadd+0x646>
    4ace:	4a88      	ldr	r2, [pc, #544]	; (4cf0 <__aeabi_dadd+0x654>)
    4ad0:	001d      	movs	r5, r3
    4ad2:	4011      	ands	r1, r2
    4ad4:	4664      	mov	r4, ip
    4ad6:	e60a      	b.n	46ee <__aeabi_dadd+0x52>
    4ad8:	2c00      	cmp	r4, #0
    4ada:	d15b      	bne.n	4b94 <__aeabi_dadd+0x4f8>
    4adc:	000e      	movs	r6, r1
    4ade:	432e      	orrs	r6, r5
    4ae0:	d000      	beq.n	4ae4 <__aeabi_dadd+0x448>
    4ae2:	e08a      	b.n	4bfa <__aeabi_dadd+0x55e>
    4ae4:	0001      	movs	r1, r0
    4ae6:	4311      	orrs	r1, r2
    4ae8:	d100      	bne.n	4aec <__aeabi_dadd+0x450>
    4aea:	e0c2      	b.n	4c72 <__aeabi_dadd+0x5d6>
    4aec:	0001      	movs	r1, r0
    4aee:	0015      	movs	r5, r2
    4af0:	469a      	mov	sl, r3
    4af2:	e5fc      	b.n	46ee <__aeabi_dadd+0x52>
    4af4:	4664      	mov	r4, ip
    4af6:	2100      	movs	r1, #0
    4af8:	2500      	movs	r5, #0
    4afa:	e68f      	b.n	481c <__aeabi_dadd+0x180>
    4afc:	2320      	movs	r3, #32
    4afe:	425b      	negs	r3, r3
    4b00:	469c      	mov	ip, r3
    4b02:	44dc      	add	ip, fp
    4b04:	4663      	mov	r3, ip
    4b06:	0007      	movs	r7, r0
    4b08:	40df      	lsrs	r7, r3
    4b0a:	465b      	mov	r3, fp
    4b0c:	46bc      	mov	ip, r7
    4b0e:	2b20      	cmp	r3, #32
    4b10:	d100      	bne.n	4b14 <__aeabi_dadd+0x478>
    4b12:	e0ac      	b.n	4c6e <__aeabi_dadd+0x5d2>
    4b14:	2340      	movs	r3, #64	; 0x40
    4b16:	465f      	mov	r7, fp
    4b18:	1bdb      	subs	r3, r3, r7
    4b1a:	4098      	lsls	r0, r3
    4b1c:	4302      	orrs	r2, r0
    4b1e:	1e50      	subs	r0, r2, #1
    4b20:	4182      	sbcs	r2, r0
    4b22:	4663      	mov	r3, ip
    4b24:	4313      	orrs	r3, r2
    4b26:	001a      	movs	r2, r3
    4b28:	2000      	movs	r0, #0
    4b2a:	e698      	b.n	485e <__aeabi_dadd+0x1c2>
    4b2c:	4c6f      	ldr	r4, [pc, #444]	; (4cec <__aeabi_dadd+0x650>)
    4b2e:	45a4      	cmp	ip, r4
    4b30:	d000      	beq.n	4b34 <__aeabi_dadd+0x498>
    4b32:	e757      	b.n	49e4 <__aeabi_dadd+0x348>
    4b34:	0001      	movs	r1, r0
    4b36:	0015      	movs	r5, r2
    4b38:	4664      	mov	r4, ip
    4b3a:	469a      	mov	sl, r3
    4b3c:	e5d7      	b.n	46ee <__aeabi_dadd+0x52>
    4b3e:	2c00      	cmp	r4, #0
    4b40:	d139      	bne.n	4bb6 <__aeabi_dadd+0x51a>
    4b42:	000c      	movs	r4, r1
    4b44:	432c      	orrs	r4, r5
    4b46:	d06e      	beq.n	4c26 <__aeabi_dadd+0x58a>
    4b48:	43db      	mvns	r3, r3
    4b4a:	2b00      	cmp	r3, #0
    4b4c:	d01a      	beq.n	4b84 <__aeabi_dadd+0x4e8>
    4b4e:	4c67      	ldr	r4, [pc, #412]	; (4cec <__aeabi_dadd+0x650>)
    4b50:	45a4      	cmp	ip, r4
    4b52:	d068      	beq.n	4c26 <__aeabi_dadd+0x58a>
    4b54:	2b38      	cmp	r3, #56	; 0x38
    4b56:	dd00      	ble.n	4b5a <__aeabi_dadd+0x4be>
    4b58:	e0a4      	b.n	4ca4 <__aeabi_dadd+0x608>
    4b5a:	2b1f      	cmp	r3, #31
    4b5c:	dd00      	ble.n	4b60 <__aeabi_dadd+0x4c4>
    4b5e:	e0ae      	b.n	4cbe <__aeabi_dadd+0x622>
    4b60:	2420      	movs	r4, #32
    4b62:	000f      	movs	r7, r1
    4b64:	1ae4      	subs	r4, r4, r3
    4b66:	40a7      	lsls	r7, r4
    4b68:	46b9      	mov	r9, r7
    4b6a:	002f      	movs	r7, r5
    4b6c:	40df      	lsrs	r7, r3
    4b6e:	46b8      	mov	r8, r7
    4b70:	46a3      	mov	fp, r4
    4b72:	464f      	mov	r7, r9
    4b74:	4644      	mov	r4, r8
    4b76:	4327      	orrs	r7, r4
    4b78:	465c      	mov	r4, fp
    4b7a:	40a5      	lsls	r5, r4
    4b7c:	1e6c      	subs	r4, r5, #1
    4b7e:	41a5      	sbcs	r5, r4
    4b80:	40d9      	lsrs	r1, r3
    4b82:	433d      	orrs	r5, r7
    4b84:	18ad      	adds	r5, r5, r2
    4b86:	4295      	cmp	r5, r2
    4b88:	419b      	sbcs	r3, r3
    4b8a:	1809      	adds	r1, r1, r0
    4b8c:	425b      	negs	r3, r3
    4b8e:	1859      	adds	r1, r3, r1
    4b90:	4664      	mov	r4, ip
    4b92:	e66b      	b.n	486c <__aeabi_dadd+0x1d0>
    4b94:	000c      	movs	r4, r1
    4b96:	432c      	orrs	r4, r5
    4b98:	d115      	bne.n	4bc6 <__aeabi_dadd+0x52a>
    4b9a:	0001      	movs	r1, r0
    4b9c:	4311      	orrs	r1, r2
    4b9e:	d07b      	beq.n	4c98 <__aeabi_dadd+0x5fc>
    4ba0:	0001      	movs	r1, r0
    4ba2:	0015      	movs	r5, r2
    4ba4:	469a      	mov	sl, r3
    4ba6:	4c51      	ldr	r4, [pc, #324]	; (4cec <__aeabi_dadd+0x650>)
    4ba8:	e5a1      	b.n	46ee <__aeabi_dadd+0x52>
    4baa:	430d      	orrs	r5, r1
    4bac:	1e69      	subs	r1, r5, #1
    4bae:	418d      	sbcs	r5, r1
    4bb0:	2100      	movs	r1, #0
    4bb2:	b2ec      	uxtb	r4, r5
    4bb4:	e72d      	b.n	4a12 <__aeabi_dadd+0x376>
    4bb6:	4c4d      	ldr	r4, [pc, #308]	; (4cec <__aeabi_dadd+0x650>)
    4bb8:	45a4      	cmp	ip, r4
    4bba:	d034      	beq.n	4c26 <__aeabi_dadd+0x58a>
    4bbc:	2480      	movs	r4, #128	; 0x80
    4bbe:	0424      	lsls	r4, r4, #16
    4bc0:	425b      	negs	r3, r3
    4bc2:	4321      	orrs	r1, r4
    4bc4:	e7c6      	b.n	4b54 <__aeabi_dadd+0x4b8>
    4bc6:	0004      	movs	r4, r0
    4bc8:	4314      	orrs	r4, r2
    4bca:	d04e      	beq.n	4c6a <__aeabi_dadd+0x5ce>
    4bcc:	08ed      	lsrs	r5, r5, #3
    4bce:	074c      	lsls	r4, r1, #29
    4bd0:	432c      	orrs	r4, r5
    4bd2:	2580      	movs	r5, #128	; 0x80
    4bd4:	08c9      	lsrs	r1, r1, #3
    4bd6:	032d      	lsls	r5, r5, #12
    4bd8:	4229      	tst	r1, r5
    4bda:	d008      	beq.n	4bee <__aeabi_dadd+0x552>
    4bdc:	08c6      	lsrs	r6, r0, #3
    4bde:	422e      	tst	r6, r5
    4be0:	d105      	bne.n	4bee <__aeabi_dadd+0x552>
    4be2:	08d2      	lsrs	r2, r2, #3
    4be4:	0741      	lsls	r1, r0, #29
    4be6:	4311      	orrs	r1, r2
    4be8:	000c      	movs	r4, r1
    4bea:	469a      	mov	sl, r3
    4bec:	0031      	movs	r1, r6
    4bee:	0f62      	lsrs	r2, r4, #29
    4bf0:	00c9      	lsls	r1, r1, #3
    4bf2:	00e5      	lsls	r5, r4, #3
    4bf4:	4311      	orrs	r1, r2
    4bf6:	4c3d      	ldr	r4, [pc, #244]	; (4cec <__aeabi_dadd+0x650>)
    4bf8:	e579      	b.n	46ee <__aeabi_dadd+0x52>
    4bfa:	0006      	movs	r6, r0
    4bfc:	4316      	orrs	r6, r2
    4bfe:	d100      	bne.n	4c02 <__aeabi_dadd+0x566>
    4c00:	e575      	b.n	46ee <__aeabi_dadd+0x52>
    4c02:	1aae      	subs	r6, r5, r2
    4c04:	46b0      	mov	r8, r6
    4c06:	4545      	cmp	r5, r8
    4c08:	41bf      	sbcs	r7, r7
    4c0a:	1a0e      	subs	r6, r1, r0
    4c0c:	427f      	negs	r7, r7
    4c0e:	1bf6      	subs	r6, r6, r7
    4c10:	0237      	lsls	r7, r6, #8
    4c12:	d400      	bmi.n	4c16 <__aeabi_dadd+0x57a>
    4c14:	e5f4      	b.n	4800 <__aeabi_dadd+0x164>
    4c16:	1b55      	subs	r5, r2, r5
    4c18:	42aa      	cmp	r2, r5
    4c1a:	41b6      	sbcs	r6, r6
    4c1c:	1a41      	subs	r1, r0, r1
    4c1e:	4276      	negs	r6, r6
    4c20:	1b89      	subs	r1, r1, r6
    4c22:	469a      	mov	sl, r3
    4c24:	e563      	b.n	46ee <__aeabi_dadd+0x52>
    4c26:	0001      	movs	r1, r0
    4c28:	0015      	movs	r5, r2
    4c2a:	4664      	mov	r4, ip
    4c2c:	e55f      	b.n	46ee <__aeabi_dadd+0x52>
    4c2e:	2200      	movs	r2, #0
    4c30:	2500      	movs	r5, #0
    4c32:	e57b      	b.n	472c <__aeabi_dadd+0x90>
    4c34:	2b00      	cmp	r3, #0
    4c36:	d03b      	beq.n	4cb0 <__aeabi_dadd+0x614>
    4c38:	0003      	movs	r3, r0
    4c3a:	4313      	orrs	r3, r2
    4c3c:	d015      	beq.n	4c6a <__aeabi_dadd+0x5ce>
    4c3e:	08ed      	lsrs	r5, r5, #3
    4c40:	074b      	lsls	r3, r1, #29
    4c42:	432b      	orrs	r3, r5
    4c44:	2580      	movs	r5, #128	; 0x80
    4c46:	08c9      	lsrs	r1, r1, #3
    4c48:	032d      	lsls	r5, r5, #12
    4c4a:	4229      	tst	r1, r5
    4c4c:	d007      	beq.n	4c5e <__aeabi_dadd+0x5c2>
    4c4e:	08c4      	lsrs	r4, r0, #3
    4c50:	422c      	tst	r4, r5
    4c52:	d104      	bne.n	4c5e <__aeabi_dadd+0x5c2>
    4c54:	0741      	lsls	r1, r0, #29
    4c56:	000b      	movs	r3, r1
    4c58:	0021      	movs	r1, r4
    4c5a:	08d2      	lsrs	r2, r2, #3
    4c5c:	4313      	orrs	r3, r2
    4c5e:	00c9      	lsls	r1, r1, #3
    4c60:	0f5a      	lsrs	r2, r3, #29
    4c62:	4311      	orrs	r1, r2
    4c64:	00dd      	lsls	r5, r3, #3
    4c66:	4c21      	ldr	r4, [pc, #132]	; (4cec <__aeabi_dadd+0x650>)
    4c68:	e541      	b.n	46ee <__aeabi_dadd+0x52>
    4c6a:	4c20      	ldr	r4, [pc, #128]	; (4cec <__aeabi_dadd+0x650>)
    4c6c:	e53f      	b.n	46ee <__aeabi_dadd+0x52>
    4c6e:	2000      	movs	r0, #0
    4c70:	e754      	b.n	4b1c <__aeabi_dadd+0x480>
    4c72:	2600      	movs	r6, #0
    4c74:	2500      	movs	r5, #0
    4c76:	e5d1      	b.n	481c <__aeabi_dadd+0x180>
    4c78:	0034      	movs	r4, r6
    4c7a:	000f      	movs	r7, r1
    4c7c:	3c20      	subs	r4, #32
    4c7e:	40e7      	lsrs	r7, r4
    4c80:	003c      	movs	r4, r7
    4c82:	2e20      	cmp	r6, #32
    4c84:	d02b      	beq.n	4cde <__aeabi_dadd+0x642>
    4c86:	2740      	movs	r7, #64	; 0x40
    4c88:	1bbe      	subs	r6, r7, r6
    4c8a:	40b1      	lsls	r1, r6
    4c8c:	430d      	orrs	r5, r1
    4c8e:	1e69      	subs	r1, r5, #1
    4c90:	418d      	sbcs	r5, r1
    4c92:	2100      	movs	r1, #0
    4c94:	432c      	orrs	r4, r5
    4c96:	e6bc      	b.n	4a12 <__aeabi_dadd+0x376>
    4c98:	2180      	movs	r1, #128	; 0x80
    4c9a:	2600      	movs	r6, #0
    4c9c:	0309      	lsls	r1, r1, #12
    4c9e:	4c13      	ldr	r4, [pc, #76]	; (4cec <__aeabi_dadd+0x650>)
    4ca0:	2500      	movs	r5, #0
    4ca2:	e5bb      	b.n	481c <__aeabi_dadd+0x180>
    4ca4:	430d      	orrs	r5, r1
    4ca6:	1e69      	subs	r1, r5, #1
    4ca8:	418d      	sbcs	r5, r1
    4caa:	2100      	movs	r1, #0
    4cac:	b2ed      	uxtb	r5, r5
    4cae:	e769      	b.n	4b84 <__aeabi_dadd+0x4e8>
    4cb0:	0001      	movs	r1, r0
    4cb2:	0015      	movs	r5, r2
    4cb4:	4c0d      	ldr	r4, [pc, #52]	; (4cec <__aeabi_dadd+0x650>)
    4cb6:	e51a      	b.n	46ee <__aeabi_dadd+0x52>
    4cb8:	0001      	movs	r1, r0
    4cba:	0015      	movs	r5, r2
    4cbc:	e517      	b.n	46ee <__aeabi_dadd+0x52>
    4cbe:	001c      	movs	r4, r3
    4cc0:	000f      	movs	r7, r1
    4cc2:	3c20      	subs	r4, #32
    4cc4:	40e7      	lsrs	r7, r4
    4cc6:	003c      	movs	r4, r7
    4cc8:	2b20      	cmp	r3, #32
    4cca:	d00c      	beq.n	4ce6 <__aeabi_dadd+0x64a>
    4ccc:	2740      	movs	r7, #64	; 0x40
    4cce:	1afb      	subs	r3, r7, r3
    4cd0:	4099      	lsls	r1, r3
    4cd2:	430d      	orrs	r5, r1
    4cd4:	1e69      	subs	r1, r5, #1
    4cd6:	418d      	sbcs	r5, r1
    4cd8:	2100      	movs	r1, #0
    4cda:	4325      	orrs	r5, r4
    4cdc:	e752      	b.n	4b84 <__aeabi_dadd+0x4e8>
    4cde:	2100      	movs	r1, #0
    4ce0:	e7d4      	b.n	4c8c <__aeabi_dadd+0x5f0>
    4ce2:	001d      	movs	r5, r3
    4ce4:	e592      	b.n	480c <__aeabi_dadd+0x170>
    4ce6:	2100      	movs	r1, #0
    4ce8:	e7f3      	b.n	4cd2 <__aeabi_dadd+0x636>
    4cea:	46c0      	nop			; (mov r8, r8)
    4cec:	000007ff 	.word	0x000007ff
    4cf0:	ff7fffff 	.word	0xff7fffff

00004cf4 <__aeabi_ddiv>:
    4cf4:	b5f0      	push	{r4, r5, r6, r7, lr}
    4cf6:	4656      	mov	r6, sl
    4cf8:	464d      	mov	r5, r9
    4cfa:	4644      	mov	r4, r8
    4cfc:	465f      	mov	r7, fp
    4cfe:	b4f0      	push	{r4, r5, r6, r7}
    4d00:	001d      	movs	r5, r3
    4d02:	030e      	lsls	r6, r1, #12
    4d04:	004c      	lsls	r4, r1, #1
    4d06:	0fcb      	lsrs	r3, r1, #31
    4d08:	b087      	sub	sp, #28
    4d0a:	0007      	movs	r7, r0
    4d0c:	4692      	mov	sl, r2
    4d0e:	4681      	mov	r9, r0
    4d10:	0b36      	lsrs	r6, r6, #12
    4d12:	0d64      	lsrs	r4, r4, #21
    4d14:	4698      	mov	r8, r3
    4d16:	d06a      	beq.n	4dee <__aeabi_ddiv+0xfa>
    4d18:	4b6d      	ldr	r3, [pc, #436]	; (4ed0 <__aeabi_ddiv+0x1dc>)
    4d1a:	429c      	cmp	r4, r3
    4d1c:	d035      	beq.n	4d8a <__aeabi_ddiv+0x96>
    4d1e:	2280      	movs	r2, #128	; 0x80
    4d20:	0f43      	lsrs	r3, r0, #29
    4d22:	0412      	lsls	r2, r2, #16
    4d24:	4313      	orrs	r3, r2
    4d26:	00f6      	lsls	r6, r6, #3
    4d28:	431e      	orrs	r6, r3
    4d2a:	00c3      	lsls	r3, r0, #3
    4d2c:	4699      	mov	r9, r3
    4d2e:	4b69      	ldr	r3, [pc, #420]	; (4ed4 <__aeabi_ddiv+0x1e0>)
    4d30:	2700      	movs	r7, #0
    4d32:	469c      	mov	ip, r3
    4d34:	2300      	movs	r3, #0
    4d36:	4464      	add	r4, ip
    4d38:	9302      	str	r3, [sp, #8]
    4d3a:	032b      	lsls	r3, r5, #12
    4d3c:	0068      	lsls	r0, r5, #1
    4d3e:	0b1b      	lsrs	r3, r3, #12
    4d40:	0fed      	lsrs	r5, r5, #31
    4d42:	4651      	mov	r1, sl
    4d44:	469b      	mov	fp, r3
    4d46:	0d40      	lsrs	r0, r0, #21
    4d48:	9500      	str	r5, [sp, #0]
    4d4a:	d100      	bne.n	4d4e <__aeabi_ddiv+0x5a>
    4d4c:	e078      	b.n	4e40 <__aeabi_ddiv+0x14c>
    4d4e:	4b60      	ldr	r3, [pc, #384]	; (4ed0 <__aeabi_ddiv+0x1dc>)
    4d50:	4298      	cmp	r0, r3
    4d52:	d06c      	beq.n	4e2e <__aeabi_ddiv+0x13a>
    4d54:	465b      	mov	r3, fp
    4d56:	00da      	lsls	r2, r3, #3
    4d58:	0f4b      	lsrs	r3, r1, #29
    4d5a:	2180      	movs	r1, #128	; 0x80
    4d5c:	0409      	lsls	r1, r1, #16
    4d5e:	430b      	orrs	r3, r1
    4d60:	4313      	orrs	r3, r2
    4d62:	469b      	mov	fp, r3
    4d64:	4653      	mov	r3, sl
    4d66:	00d9      	lsls	r1, r3, #3
    4d68:	4b5a      	ldr	r3, [pc, #360]	; (4ed4 <__aeabi_ddiv+0x1e0>)
    4d6a:	469c      	mov	ip, r3
    4d6c:	2300      	movs	r3, #0
    4d6e:	4460      	add	r0, ip
    4d70:	4642      	mov	r2, r8
    4d72:	1a20      	subs	r0, r4, r0
    4d74:	406a      	eors	r2, r5
    4d76:	4692      	mov	sl, r2
    4d78:	9001      	str	r0, [sp, #4]
    4d7a:	431f      	orrs	r7, r3
    4d7c:	2f0f      	cmp	r7, #15
    4d7e:	d900      	bls.n	4d82 <__aeabi_ddiv+0x8e>
    4d80:	e0b0      	b.n	4ee4 <__aeabi_ddiv+0x1f0>
    4d82:	4855      	ldr	r0, [pc, #340]	; (4ed8 <__aeabi_ddiv+0x1e4>)
    4d84:	00bf      	lsls	r7, r7, #2
    4d86:	59c0      	ldr	r0, [r0, r7]
    4d88:	4687      	mov	pc, r0
    4d8a:	4337      	orrs	r7, r6
    4d8c:	d000      	beq.n	4d90 <__aeabi_ddiv+0x9c>
    4d8e:	e088      	b.n	4ea2 <__aeabi_ddiv+0x1ae>
    4d90:	2300      	movs	r3, #0
    4d92:	4699      	mov	r9, r3
    4d94:	3302      	adds	r3, #2
    4d96:	2708      	movs	r7, #8
    4d98:	2600      	movs	r6, #0
    4d9a:	9302      	str	r3, [sp, #8]
    4d9c:	e7cd      	b.n	4d3a <__aeabi_ddiv+0x46>
    4d9e:	4643      	mov	r3, r8
    4da0:	46b3      	mov	fp, r6
    4da2:	4649      	mov	r1, r9
    4da4:	9300      	str	r3, [sp, #0]
    4da6:	9b02      	ldr	r3, [sp, #8]
    4da8:	9a00      	ldr	r2, [sp, #0]
    4daa:	4692      	mov	sl, r2
    4dac:	2b02      	cmp	r3, #2
    4dae:	d000      	beq.n	4db2 <__aeabi_ddiv+0xbe>
    4db0:	e1bf      	b.n	5132 <__aeabi_ddiv+0x43e>
    4db2:	2100      	movs	r1, #0
    4db4:	4653      	mov	r3, sl
    4db6:	2201      	movs	r2, #1
    4db8:	2600      	movs	r6, #0
    4dba:	4689      	mov	r9, r1
    4dbc:	401a      	ands	r2, r3
    4dbe:	4b44      	ldr	r3, [pc, #272]	; (4ed0 <__aeabi_ddiv+0x1dc>)
    4dc0:	2100      	movs	r1, #0
    4dc2:	0336      	lsls	r6, r6, #12
    4dc4:	0d0c      	lsrs	r4, r1, #20
    4dc6:	0524      	lsls	r4, r4, #20
    4dc8:	0b36      	lsrs	r6, r6, #12
    4dca:	4326      	orrs	r6, r4
    4dcc:	4c43      	ldr	r4, [pc, #268]	; (4edc <__aeabi_ddiv+0x1e8>)
    4dce:	051b      	lsls	r3, r3, #20
    4dd0:	4026      	ands	r6, r4
    4dd2:	431e      	orrs	r6, r3
    4dd4:	0076      	lsls	r6, r6, #1
    4dd6:	07d2      	lsls	r2, r2, #31
    4dd8:	0876      	lsrs	r6, r6, #1
    4dda:	4316      	orrs	r6, r2
    4ddc:	4648      	mov	r0, r9
    4dde:	0031      	movs	r1, r6
    4de0:	b007      	add	sp, #28
    4de2:	bc3c      	pop	{r2, r3, r4, r5}
    4de4:	4690      	mov	r8, r2
    4de6:	4699      	mov	r9, r3
    4de8:	46a2      	mov	sl, r4
    4dea:	46ab      	mov	fp, r5
    4dec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4dee:	0033      	movs	r3, r6
    4df0:	4303      	orrs	r3, r0
    4df2:	d04f      	beq.n	4e94 <__aeabi_ddiv+0x1a0>
    4df4:	2e00      	cmp	r6, #0
    4df6:	d100      	bne.n	4dfa <__aeabi_ddiv+0x106>
    4df8:	e1bc      	b.n	5174 <__aeabi_ddiv+0x480>
    4dfa:	0030      	movs	r0, r6
    4dfc:	f001 fbe2 	bl	65c4 <__clzsi2>
    4e00:	0003      	movs	r3, r0
    4e02:	3b0b      	subs	r3, #11
    4e04:	2b1c      	cmp	r3, #28
    4e06:	dd00      	ble.n	4e0a <__aeabi_ddiv+0x116>
    4e08:	e1ad      	b.n	5166 <__aeabi_ddiv+0x472>
    4e0a:	221d      	movs	r2, #29
    4e0c:	0001      	movs	r1, r0
    4e0e:	1ad3      	subs	r3, r2, r3
    4e10:	3908      	subs	r1, #8
    4e12:	003a      	movs	r2, r7
    4e14:	408f      	lsls	r7, r1
    4e16:	408e      	lsls	r6, r1
    4e18:	40da      	lsrs	r2, r3
    4e1a:	46b9      	mov	r9, r7
    4e1c:	4316      	orrs	r6, r2
    4e1e:	4b30      	ldr	r3, [pc, #192]	; (4ee0 <__aeabi_ddiv+0x1ec>)
    4e20:	2700      	movs	r7, #0
    4e22:	469c      	mov	ip, r3
    4e24:	2300      	movs	r3, #0
    4e26:	4460      	add	r0, ip
    4e28:	4244      	negs	r4, r0
    4e2a:	9302      	str	r3, [sp, #8]
    4e2c:	e785      	b.n	4d3a <__aeabi_ddiv+0x46>
    4e2e:	4653      	mov	r3, sl
    4e30:	465a      	mov	r2, fp
    4e32:	4313      	orrs	r3, r2
    4e34:	d12c      	bne.n	4e90 <__aeabi_ddiv+0x19c>
    4e36:	2300      	movs	r3, #0
    4e38:	2100      	movs	r1, #0
    4e3a:	469b      	mov	fp, r3
    4e3c:	3302      	adds	r3, #2
    4e3e:	e797      	b.n	4d70 <__aeabi_ddiv+0x7c>
    4e40:	430b      	orrs	r3, r1
    4e42:	d020      	beq.n	4e86 <__aeabi_ddiv+0x192>
    4e44:	465b      	mov	r3, fp
    4e46:	2b00      	cmp	r3, #0
    4e48:	d100      	bne.n	4e4c <__aeabi_ddiv+0x158>
    4e4a:	e19e      	b.n	518a <__aeabi_ddiv+0x496>
    4e4c:	4658      	mov	r0, fp
    4e4e:	f001 fbb9 	bl	65c4 <__clzsi2>
    4e52:	0003      	movs	r3, r0
    4e54:	3b0b      	subs	r3, #11
    4e56:	2b1c      	cmp	r3, #28
    4e58:	dd00      	ble.n	4e5c <__aeabi_ddiv+0x168>
    4e5a:	e18f      	b.n	517c <__aeabi_ddiv+0x488>
    4e5c:	0002      	movs	r2, r0
    4e5e:	4659      	mov	r1, fp
    4e60:	3a08      	subs	r2, #8
    4e62:	4091      	lsls	r1, r2
    4e64:	468b      	mov	fp, r1
    4e66:	211d      	movs	r1, #29
    4e68:	1acb      	subs	r3, r1, r3
    4e6a:	4651      	mov	r1, sl
    4e6c:	40d9      	lsrs	r1, r3
    4e6e:	000b      	movs	r3, r1
    4e70:	4659      	mov	r1, fp
    4e72:	430b      	orrs	r3, r1
    4e74:	4651      	mov	r1, sl
    4e76:	469b      	mov	fp, r3
    4e78:	4091      	lsls	r1, r2
    4e7a:	4b19      	ldr	r3, [pc, #100]	; (4ee0 <__aeabi_ddiv+0x1ec>)
    4e7c:	469c      	mov	ip, r3
    4e7e:	4460      	add	r0, ip
    4e80:	4240      	negs	r0, r0
    4e82:	2300      	movs	r3, #0
    4e84:	e774      	b.n	4d70 <__aeabi_ddiv+0x7c>
    4e86:	2300      	movs	r3, #0
    4e88:	2100      	movs	r1, #0
    4e8a:	469b      	mov	fp, r3
    4e8c:	3301      	adds	r3, #1
    4e8e:	e76f      	b.n	4d70 <__aeabi_ddiv+0x7c>
    4e90:	2303      	movs	r3, #3
    4e92:	e76d      	b.n	4d70 <__aeabi_ddiv+0x7c>
    4e94:	2300      	movs	r3, #0
    4e96:	4699      	mov	r9, r3
    4e98:	3301      	adds	r3, #1
    4e9a:	2704      	movs	r7, #4
    4e9c:	2600      	movs	r6, #0
    4e9e:	9302      	str	r3, [sp, #8]
    4ea0:	e74b      	b.n	4d3a <__aeabi_ddiv+0x46>
    4ea2:	2303      	movs	r3, #3
    4ea4:	270c      	movs	r7, #12
    4ea6:	9302      	str	r3, [sp, #8]
    4ea8:	e747      	b.n	4d3a <__aeabi_ddiv+0x46>
    4eaa:	2201      	movs	r2, #1
    4eac:	1ad5      	subs	r5, r2, r3
    4eae:	2d38      	cmp	r5, #56	; 0x38
    4eb0:	dc00      	bgt.n	4eb4 <__aeabi_ddiv+0x1c0>
    4eb2:	e1b0      	b.n	5216 <__aeabi_ddiv+0x522>
    4eb4:	4653      	mov	r3, sl
    4eb6:	401a      	ands	r2, r3
    4eb8:	2100      	movs	r1, #0
    4eba:	2300      	movs	r3, #0
    4ebc:	2600      	movs	r6, #0
    4ebe:	4689      	mov	r9, r1
    4ec0:	e77e      	b.n	4dc0 <__aeabi_ddiv+0xcc>
    4ec2:	2300      	movs	r3, #0
    4ec4:	2680      	movs	r6, #128	; 0x80
    4ec6:	4699      	mov	r9, r3
    4ec8:	2200      	movs	r2, #0
    4eca:	0336      	lsls	r6, r6, #12
    4ecc:	4b00      	ldr	r3, [pc, #0]	; (4ed0 <__aeabi_ddiv+0x1dc>)
    4ece:	e777      	b.n	4dc0 <__aeabi_ddiv+0xcc>
    4ed0:	000007ff 	.word	0x000007ff
    4ed4:	fffffc01 	.word	0xfffffc01
    4ed8:	00006960 	.word	0x00006960
    4edc:	800fffff 	.word	0x800fffff
    4ee0:	000003f3 	.word	0x000003f3
    4ee4:	455e      	cmp	r6, fp
    4ee6:	d900      	bls.n	4eea <__aeabi_ddiv+0x1f6>
    4ee8:	e172      	b.n	51d0 <__aeabi_ddiv+0x4dc>
    4eea:	d100      	bne.n	4eee <__aeabi_ddiv+0x1fa>
    4eec:	e16d      	b.n	51ca <__aeabi_ddiv+0x4d6>
    4eee:	9b01      	ldr	r3, [sp, #4]
    4ef0:	464d      	mov	r5, r9
    4ef2:	3b01      	subs	r3, #1
    4ef4:	9301      	str	r3, [sp, #4]
    4ef6:	2300      	movs	r3, #0
    4ef8:	0034      	movs	r4, r6
    4efa:	9302      	str	r3, [sp, #8]
    4efc:	465b      	mov	r3, fp
    4efe:	021e      	lsls	r6, r3, #8
    4f00:	0e0b      	lsrs	r3, r1, #24
    4f02:	431e      	orrs	r6, r3
    4f04:	020b      	lsls	r3, r1, #8
    4f06:	9303      	str	r3, [sp, #12]
    4f08:	0c33      	lsrs	r3, r6, #16
    4f0a:	4699      	mov	r9, r3
    4f0c:	0433      	lsls	r3, r6, #16
    4f0e:	0c1b      	lsrs	r3, r3, #16
    4f10:	4649      	mov	r1, r9
    4f12:	0020      	movs	r0, r4
    4f14:	9300      	str	r3, [sp, #0]
    4f16:	f001 fa8f 	bl	6438 <__aeabi_uidiv>
    4f1a:	9b00      	ldr	r3, [sp, #0]
    4f1c:	0037      	movs	r7, r6
    4f1e:	4343      	muls	r3, r0
    4f20:	0006      	movs	r6, r0
    4f22:	4649      	mov	r1, r9
    4f24:	0020      	movs	r0, r4
    4f26:	4698      	mov	r8, r3
    4f28:	f001 fb0c 	bl	6544 <__aeabi_uidivmod>
    4f2c:	0c2c      	lsrs	r4, r5, #16
    4f2e:	0409      	lsls	r1, r1, #16
    4f30:	430c      	orrs	r4, r1
    4f32:	45a0      	cmp	r8, r4
    4f34:	d909      	bls.n	4f4a <__aeabi_ddiv+0x256>
    4f36:	19e4      	adds	r4, r4, r7
    4f38:	1e73      	subs	r3, r6, #1
    4f3a:	42a7      	cmp	r7, r4
    4f3c:	d900      	bls.n	4f40 <__aeabi_ddiv+0x24c>
    4f3e:	e15c      	b.n	51fa <__aeabi_ddiv+0x506>
    4f40:	45a0      	cmp	r8, r4
    4f42:	d800      	bhi.n	4f46 <__aeabi_ddiv+0x252>
    4f44:	e159      	b.n	51fa <__aeabi_ddiv+0x506>
    4f46:	3e02      	subs	r6, #2
    4f48:	19e4      	adds	r4, r4, r7
    4f4a:	4643      	mov	r3, r8
    4f4c:	1ae4      	subs	r4, r4, r3
    4f4e:	4649      	mov	r1, r9
    4f50:	0020      	movs	r0, r4
    4f52:	f001 fa71 	bl	6438 <__aeabi_uidiv>
    4f56:	0003      	movs	r3, r0
    4f58:	9a00      	ldr	r2, [sp, #0]
    4f5a:	4680      	mov	r8, r0
    4f5c:	4353      	muls	r3, r2
    4f5e:	4649      	mov	r1, r9
    4f60:	0020      	movs	r0, r4
    4f62:	469b      	mov	fp, r3
    4f64:	f001 faee 	bl	6544 <__aeabi_uidivmod>
    4f68:	042a      	lsls	r2, r5, #16
    4f6a:	0409      	lsls	r1, r1, #16
    4f6c:	0c12      	lsrs	r2, r2, #16
    4f6e:	430a      	orrs	r2, r1
    4f70:	4593      	cmp	fp, r2
    4f72:	d90d      	bls.n	4f90 <__aeabi_ddiv+0x29c>
    4f74:	4643      	mov	r3, r8
    4f76:	19d2      	adds	r2, r2, r7
    4f78:	3b01      	subs	r3, #1
    4f7a:	4297      	cmp	r7, r2
    4f7c:	d900      	bls.n	4f80 <__aeabi_ddiv+0x28c>
    4f7e:	e13a      	b.n	51f6 <__aeabi_ddiv+0x502>
    4f80:	4593      	cmp	fp, r2
    4f82:	d800      	bhi.n	4f86 <__aeabi_ddiv+0x292>
    4f84:	e137      	b.n	51f6 <__aeabi_ddiv+0x502>
    4f86:	2302      	movs	r3, #2
    4f88:	425b      	negs	r3, r3
    4f8a:	469c      	mov	ip, r3
    4f8c:	19d2      	adds	r2, r2, r7
    4f8e:	44e0      	add	r8, ip
    4f90:	465b      	mov	r3, fp
    4f92:	1ad2      	subs	r2, r2, r3
    4f94:	4643      	mov	r3, r8
    4f96:	0436      	lsls	r6, r6, #16
    4f98:	4333      	orrs	r3, r6
    4f9a:	469b      	mov	fp, r3
    4f9c:	9903      	ldr	r1, [sp, #12]
    4f9e:	0c18      	lsrs	r0, r3, #16
    4fa0:	0c0b      	lsrs	r3, r1, #16
    4fa2:	001d      	movs	r5, r3
    4fa4:	9305      	str	r3, [sp, #20]
    4fa6:	0409      	lsls	r1, r1, #16
    4fa8:	465b      	mov	r3, fp
    4faa:	0c09      	lsrs	r1, r1, #16
    4fac:	000c      	movs	r4, r1
    4fae:	041b      	lsls	r3, r3, #16
    4fb0:	0c1b      	lsrs	r3, r3, #16
    4fb2:	4344      	muls	r4, r0
    4fb4:	9104      	str	r1, [sp, #16]
    4fb6:	4359      	muls	r1, r3
    4fb8:	436b      	muls	r3, r5
    4fba:	4368      	muls	r0, r5
    4fbc:	191b      	adds	r3, r3, r4
    4fbe:	0c0d      	lsrs	r5, r1, #16
    4fc0:	18eb      	adds	r3, r5, r3
    4fc2:	429c      	cmp	r4, r3
    4fc4:	d903      	bls.n	4fce <__aeabi_ddiv+0x2da>
    4fc6:	2480      	movs	r4, #128	; 0x80
    4fc8:	0264      	lsls	r4, r4, #9
    4fca:	46a4      	mov	ip, r4
    4fcc:	4460      	add	r0, ip
    4fce:	0c1c      	lsrs	r4, r3, #16
    4fd0:	0409      	lsls	r1, r1, #16
    4fd2:	041b      	lsls	r3, r3, #16
    4fd4:	0c09      	lsrs	r1, r1, #16
    4fd6:	1820      	adds	r0, r4, r0
    4fd8:	185d      	adds	r5, r3, r1
    4fda:	4282      	cmp	r2, r0
    4fdc:	d200      	bcs.n	4fe0 <__aeabi_ddiv+0x2ec>
    4fde:	e0de      	b.n	519e <__aeabi_ddiv+0x4aa>
    4fe0:	d100      	bne.n	4fe4 <__aeabi_ddiv+0x2f0>
    4fe2:	e0d7      	b.n	5194 <__aeabi_ddiv+0x4a0>
    4fe4:	1a16      	subs	r6, r2, r0
    4fe6:	9b02      	ldr	r3, [sp, #8]
    4fe8:	469c      	mov	ip, r3
    4fea:	1b5d      	subs	r5, r3, r5
    4fec:	45ac      	cmp	ip, r5
    4fee:	419b      	sbcs	r3, r3
    4ff0:	425b      	negs	r3, r3
    4ff2:	1af6      	subs	r6, r6, r3
    4ff4:	42b7      	cmp	r7, r6
    4ff6:	d100      	bne.n	4ffa <__aeabi_ddiv+0x306>
    4ff8:	e106      	b.n	5208 <__aeabi_ddiv+0x514>
    4ffa:	4649      	mov	r1, r9
    4ffc:	0030      	movs	r0, r6
    4ffe:	f001 fa1b 	bl	6438 <__aeabi_uidiv>
    5002:	9b00      	ldr	r3, [sp, #0]
    5004:	0004      	movs	r4, r0
    5006:	4343      	muls	r3, r0
    5008:	4649      	mov	r1, r9
    500a:	0030      	movs	r0, r6
    500c:	4698      	mov	r8, r3
    500e:	f001 fa99 	bl	6544 <__aeabi_uidivmod>
    5012:	0c2e      	lsrs	r6, r5, #16
    5014:	0409      	lsls	r1, r1, #16
    5016:	430e      	orrs	r6, r1
    5018:	45b0      	cmp	r8, r6
    501a:	d909      	bls.n	5030 <__aeabi_ddiv+0x33c>
    501c:	19f6      	adds	r6, r6, r7
    501e:	1e63      	subs	r3, r4, #1
    5020:	42b7      	cmp	r7, r6
    5022:	d900      	bls.n	5026 <__aeabi_ddiv+0x332>
    5024:	e0f3      	b.n	520e <__aeabi_ddiv+0x51a>
    5026:	45b0      	cmp	r8, r6
    5028:	d800      	bhi.n	502c <__aeabi_ddiv+0x338>
    502a:	e0f0      	b.n	520e <__aeabi_ddiv+0x51a>
    502c:	3c02      	subs	r4, #2
    502e:	19f6      	adds	r6, r6, r7
    5030:	4643      	mov	r3, r8
    5032:	1af3      	subs	r3, r6, r3
    5034:	4649      	mov	r1, r9
    5036:	0018      	movs	r0, r3
    5038:	9302      	str	r3, [sp, #8]
    503a:	f001 f9fd 	bl	6438 <__aeabi_uidiv>
    503e:	9b00      	ldr	r3, [sp, #0]
    5040:	0006      	movs	r6, r0
    5042:	4343      	muls	r3, r0
    5044:	4649      	mov	r1, r9
    5046:	9802      	ldr	r0, [sp, #8]
    5048:	4698      	mov	r8, r3
    504a:	f001 fa7b 	bl	6544 <__aeabi_uidivmod>
    504e:	042d      	lsls	r5, r5, #16
    5050:	0409      	lsls	r1, r1, #16
    5052:	0c2d      	lsrs	r5, r5, #16
    5054:	430d      	orrs	r5, r1
    5056:	45a8      	cmp	r8, r5
    5058:	d909      	bls.n	506e <__aeabi_ddiv+0x37a>
    505a:	19ed      	adds	r5, r5, r7
    505c:	1e73      	subs	r3, r6, #1
    505e:	42af      	cmp	r7, r5
    5060:	d900      	bls.n	5064 <__aeabi_ddiv+0x370>
    5062:	e0d6      	b.n	5212 <__aeabi_ddiv+0x51e>
    5064:	45a8      	cmp	r8, r5
    5066:	d800      	bhi.n	506a <__aeabi_ddiv+0x376>
    5068:	e0d3      	b.n	5212 <__aeabi_ddiv+0x51e>
    506a:	3e02      	subs	r6, #2
    506c:	19ed      	adds	r5, r5, r7
    506e:	0424      	lsls	r4, r4, #16
    5070:	0021      	movs	r1, r4
    5072:	4643      	mov	r3, r8
    5074:	4331      	orrs	r1, r6
    5076:	9e04      	ldr	r6, [sp, #16]
    5078:	9a05      	ldr	r2, [sp, #20]
    507a:	0030      	movs	r0, r6
    507c:	1aed      	subs	r5, r5, r3
    507e:	040b      	lsls	r3, r1, #16
    5080:	0c0c      	lsrs	r4, r1, #16
    5082:	0c1b      	lsrs	r3, r3, #16
    5084:	4358      	muls	r0, r3
    5086:	4366      	muls	r6, r4
    5088:	4353      	muls	r3, r2
    508a:	4354      	muls	r4, r2
    508c:	199a      	adds	r2, r3, r6
    508e:	0c03      	lsrs	r3, r0, #16
    5090:	189b      	adds	r3, r3, r2
    5092:	429e      	cmp	r6, r3
    5094:	d903      	bls.n	509e <__aeabi_ddiv+0x3aa>
    5096:	2280      	movs	r2, #128	; 0x80
    5098:	0252      	lsls	r2, r2, #9
    509a:	4694      	mov	ip, r2
    509c:	4464      	add	r4, ip
    509e:	0c1a      	lsrs	r2, r3, #16
    50a0:	0400      	lsls	r0, r0, #16
    50a2:	041b      	lsls	r3, r3, #16
    50a4:	0c00      	lsrs	r0, r0, #16
    50a6:	1914      	adds	r4, r2, r4
    50a8:	181b      	adds	r3, r3, r0
    50aa:	42a5      	cmp	r5, r4
    50ac:	d350      	bcc.n	5150 <__aeabi_ddiv+0x45c>
    50ae:	d04d      	beq.n	514c <__aeabi_ddiv+0x458>
    50b0:	2301      	movs	r3, #1
    50b2:	4319      	orrs	r1, r3
    50b4:	4a96      	ldr	r2, [pc, #600]	; (5310 <__aeabi_ddiv+0x61c>)
    50b6:	9b01      	ldr	r3, [sp, #4]
    50b8:	4694      	mov	ip, r2
    50ba:	4463      	add	r3, ip
    50bc:	2b00      	cmp	r3, #0
    50be:	dc00      	bgt.n	50c2 <__aeabi_ddiv+0x3ce>
    50c0:	e6f3      	b.n	4eaa <__aeabi_ddiv+0x1b6>
    50c2:	074a      	lsls	r2, r1, #29
    50c4:	d009      	beq.n	50da <__aeabi_ddiv+0x3e6>
    50c6:	220f      	movs	r2, #15
    50c8:	400a      	ands	r2, r1
    50ca:	2a04      	cmp	r2, #4
    50cc:	d005      	beq.n	50da <__aeabi_ddiv+0x3e6>
    50ce:	1d0a      	adds	r2, r1, #4
    50d0:	428a      	cmp	r2, r1
    50d2:	4189      	sbcs	r1, r1
    50d4:	4249      	negs	r1, r1
    50d6:	448b      	add	fp, r1
    50d8:	0011      	movs	r1, r2
    50da:	465a      	mov	r2, fp
    50dc:	01d2      	lsls	r2, r2, #7
    50de:	d508      	bpl.n	50f2 <__aeabi_ddiv+0x3fe>
    50e0:	465a      	mov	r2, fp
    50e2:	4b8c      	ldr	r3, [pc, #560]	; (5314 <__aeabi_ddiv+0x620>)
    50e4:	401a      	ands	r2, r3
    50e6:	4693      	mov	fp, r2
    50e8:	2280      	movs	r2, #128	; 0x80
    50ea:	00d2      	lsls	r2, r2, #3
    50ec:	4694      	mov	ip, r2
    50ee:	9b01      	ldr	r3, [sp, #4]
    50f0:	4463      	add	r3, ip
    50f2:	4a89      	ldr	r2, [pc, #548]	; (5318 <__aeabi_ddiv+0x624>)
    50f4:	4293      	cmp	r3, r2
    50f6:	dd00      	ble.n	50fa <__aeabi_ddiv+0x406>
    50f8:	e65b      	b.n	4db2 <__aeabi_ddiv+0xbe>
    50fa:	465a      	mov	r2, fp
    50fc:	08c9      	lsrs	r1, r1, #3
    50fe:	0750      	lsls	r0, r2, #29
    5100:	4308      	orrs	r0, r1
    5102:	0256      	lsls	r6, r2, #9
    5104:	4651      	mov	r1, sl
    5106:	2201      	movs	r2, #1
    5108:	055b      	lsls	r3, r3, #21
    510a:	4681      	mov	r9, r0
    510c:	0b36      	lsrs	r6, r6, #12
    510e:	0d5b      	lsrs	r3, r3, #21
    5110:	400a      	ands	r2, r1
    5112:	e655      	b.n	4dc0 <__aeabi_ddiv+0xcc>
    5114:	2380      	movs	r3, #128	; 0x80
    5116:	031b      	lsls	r3, r3, #12
    5118:	421e      	tst	r6, r3
    511a:	d011      	beq.n	5140 <__aeabi_ddiv+0x44c>
    511c:	465a      	mov	r2, fp
    511e:	421a      	tst	r2, r3
    5120:	d10e      	bne.n	5140 <__aeabi_ddiv+0x44c>
    5122:	465e      	mov	r6, fp
    5124:	431e      	orrs	r6, r3
    5126:	0336      	lsls	r6, r6, #12
    5128:	0b36      	lsrs	r6, r6, #12
    512a:	002a      	movs	r2, r5
    512c:	4689      	mov	r9, r1
    512e:	4b7b      	ldr	r3, [pc, #492]	; (531c <__aeabi_ddiv+0x628>)
    5130:	e646      	b.n	4dc0 <__aeabi_ddiv+0xcc>
    5132:	2b03      	cmp	r3, #3
    5134:	d100      	bne.n	5138 <__aeabi_ddiv+0x444>
    5136:	e0e1      	b.n	52fc <__aeabi_ddiv+0x608>
    5138:	2b01      	cmp	r3, #1
    513a:	d1bb      	bne.n	50b4 <__aeabi_ddiv+0x3c0>
    513c:	401a      	ands	r2, r3
    513e:	e6bb      	b.n	4eb8 <__aeabi_ddiv+0x1c4>
    5140:	431e      	orrs	r6, r3
    5142:	0336      	lsls	r6, r6, #12
    5144:	0b36      	lsrs	r6, r6, #12
    5146:	4642      	mov	r2, r8
    5148:	4b74      	ldr	r3, [pc, #464]	; (531c <__aeabi_ddiv+0x628>)
    514a:	e639      	b.n	4dc0 <__aeabi_ddiv+0xcc>
    514c:	2b00      	cmp	r3, #0
    514e:	d0b1      	beq.n	50b4 <__aeabi_ddiv+0x3c0>
    5150:	197d      	adds	r5, r7, r5
    5152:	1e4a      	subs	r2, r1, #1
    5154:	42af      	cmp	r7, r5
    5156:	d952      	bls.n	51fe <__aeabi_ddiv+0x50a>
    5158:	0011      	movs	r1, r2
    515a:	42a5      	cmp	r5, r4
    515c:	d1a8      	bne.n	50b0 <__aeabi_ddiv+0x3bc>
    515e:	9a03      	ldr	r2, [sp, #12]
    5160:	429a      	cmp	r2, r3
    5162:	d1a5      	bne.n	50b0 <__aeabi_ddiv+0x3bc>
    5164:	e7a6      	b.n	50b4 <__aeabi_ddiv+0x3c0>
    5166:	0003      	movs	r3, r0
    5168:	003e      	movs	r6, r7
    516a:	3b28      	subs	r3, #40	; 0x28
    516c:	409e      	lsls	r6, r3
    516e:	2300      	movs	r3, #0
    5170:	4699      	mov	r9, r3
    5172:	e654      	b.n	4e1e <__aeabi_ddiv+0x12a>
    5174:	f001 fa26 	bl	65c4 <__clzsi2>
    5178:	3020      	adds	r0, #32
    517a:	e641      	b.n	4e00 <__aeabi_ddiv+0x10c>
    517c:	0003      	movs	r3, r0
    517e:	4652      	mov	r2, sl
    5180:	3b28      	subs	r3, #40	; 0x28
    5182:	409a      	lsls	r2, r3
    5184:	2100      	movs	r1, #0
    5186:	4693      	mov	fp, r2
    5188:	e677      	b.n	4e7a <__aeabi_ddiv+0x186>
    518a:	4650      	mov	r0, sl
    518c:	f001 fa1a 	bl	65c4 <__clzsi2>
    5190:	3020      	adds	r0, #32
    5192:	e65e      	b.n	4e52 <__aeabi_ddiv+0x15e>
    5194:	9b02      	ldr	r3, [sp, #8]
    5196:	2600      	movs	r6, #0
    5198:	42ab      	cmp	r3, r5
    519a:	d300      	bcc.n	519e <__aeabi_ddiv+0x4aa>
    519c:	e723      	b.n	4fe6 <__aeabi_ddiv+0x2f2>
    519e:	9e03      	ldr	r6, [sp, #12]
    51a0:	9902      	ldr	r1, [sp, #8]
    51a2:	46b4      	mov	ip, r6
    51a4:	4461      	add	r1, ip
    51a6:	4688      	mov	r8, r1
    51a8:	45b0      	cmp	r8, r6
    51aa:	41b6      	sbcs	r6, r6
    51ac:	465b      	mov	r3, fp
    51ae:	4276      	negs	r6, r6
    51b0:	19f6      	adds	r6, r6, r7
    51b2:	18b2      	adds	r2, r6, r2
    51b4:	3b01      	subs	r3, #1
    51b6:	9102      	str	r1, [sp, #8]
    51b8:	4297      	cmp	r7, r2
    51ba:	d213      	bcs.n	51e4 <__aeabi_ddiv+0x4f0>
    51bc:	4290      	cmp	r0, r2
    51be:	d84f      	bhi.n	5260 <__aeabi_ddiv+0x56c>
    51c0:	d100      	bne.n	51c4 <__aeabi_ddiv+0x4d0>
    51c2:	e08e      	b.n	52e2 <__aeabi_ddiv+0x5ee>
    51c4:	1a16      	subs	r6, r2, r0
    51c6:	469b      	mov	fp, r3
    51c8:	e70d      	b.n	4fe6 <__aeabi_ddiv+0x2f2>
    51ca:	4589      	cmp	r9, r1
    51cc:	d200      	bcs.n	51d0 <__aeabi_ddiv+0x4dc>
    51ce:	e68e      	b.n	4eee <__aeabi_ddiv+0x1fa>
    51d0:	0874      	lsrs	r4, r6, #1
    51d2:	464b      	mov	r3, r9
    51d4:	07f6      	lsls	r6, r6, #31
    51d6:	0035      	movs	r5, r6
    51d8:	085b      	lsrs	r3, r3, #1
    51da:	431d      	orrs	r5, r3
    51dc:	464b      	mov	r3, r9
    51de:	07db      	lsls	r3, r3, #31
    51e0:	9302      	str	r3, [sp, #8]
    51e2:	e68b      	b.n	4efc <__aeabi_ddiv+0x208>
    51e4:	4297      	cmp	r7, r2
    51e6:	d1ed      	bne.n	51c4 <__aeabi_ddiv+0x4d0>
    51e8:	9903      	ldr	r1, [sp, #12]
    51ea:	9c02      	ldr	r4, [sp, #8]
    51ec:	42a1      	cmp	r1, r4
    51ee:	d9e5      	bls.n	51bc <__aeabi_ddiv+0x4c8>
    51f0:	1a3e      	subs	r6, r7, r0
    51f2:	469b      	mov	fp, r3
    51f4:	e6f7      	b.n	4fe6 <__aeabi_ddiv+0x2f2>
    51f6:	4698      	mov	r8, r3
    51f8:	e6ca      	b.n	4f90 <__aeabi_ddiv+0x29c>
    51fa:	001e      	movs	r6, r3
    51fc:	e6a5      	b.n	4f4a <__aeabi_ddiv+0x256>
    51fe:	42ac      	cmp	r4, r5
    5200:	d83e      	bhi.n	5280 <__aeabi_ddiv+0x58c>
    5202:	d074      	beq.n	52ee <__aeabi_ddiv+0x5fa>
    5204:	0011      	movs	r1, r2
    5206:	e753      	b.n	50b0 <__aeabi_ddiv+0x3bc>
    5208:	2101      	movs	r1, #1
    520a:	4249      	negs	r1, r1
    520c:	e752      	b.n	50b4 <__aeabi_ddiv+0x3c0>
    520e:	001c      	movs	r4, r3
    5210:	e70e      	b.n	5030 <__aeabi_ddiv+0x33c>
    5212:	001e      	movs	r6, r3
    5214:	e72b      	b.n	506e <__aeabi_ddiv+0x37a>
    5216:	2d1f      	cmp	r5, #31
    5218:	dc3c      	bgt.n	5294 <__aeabi_ddiv+0x5a0>
    521a:	2320      	movs	r3, #32
    521c:	000a      	movs	r2, r1
    521e:	4658      	mov	r0, fp
    5220:	1b5b      	subs	r3, r3, r5
    5222:	4098      	lsls	r0, r3
    5224:	40ea      	lsrs	r2, r5
    5226:	4099      	lsls	r1, r3
    5228:	4302      	orrs	r2, r0
    522a:	1e48      	subs	r0, r1, #1
    522c:	4181      	sbcs	r1, r0
    522e:	465e      	mov	r6, fp
    5230:	4311      	orrs	r1, r2
    5232:	40ee      	lsrs	r6, r5
    5234:	074b      	lsls	r3, r1, #29
    5236:	d009      	beq.n	524c <__aeabi_ddiv+0x558>
    5238:	230f      	movs	r3, #15
    523a:	400b      	ands	r3, r1
    523c:	2b04      	cmp	r3, #4
    523e:	d005      	beq.n	524c <__aeabi_ddiv+0x558>
    5240:	000b      	movs	r3, r1
    5242:	1d19      	adds	r1, r3, #4
    5244:	4299      	cmp	r1, r3
    5246:	419b      	sbcs	r3, r3
    5248:	425b      	negs	r3, r3
    524a:	18f6      	adds	r6, r6, r3
    524c:	0233      	lsls	r3, r6, #8
    524e:	d53c      	bpl.n	52ca <__aeabi_ddiv+0x5d6>
    5250:	4653      	mov	r3, sl
    5252:	2201      	movs	r2, #1
    5254:	2100      	movs	r1, #0
    5256:	401a      	ands	r2, r3
    5258:	2600      	movs	r6, #0
    525a:	2301      	movs	r3, #1
    525c:	4689      	mov	r9, r1
    525e:	e5af      	b.n	4dc0 <__aeabi_ddiv+0xcc>
    5260:	2302      	movs	r3, #2
    5262:	425b      	negs	r3, r3
    5264:	469c      	mov	ip, r3
    5266:	9c03      	ldr	r4, [sp, #12]
    5268:	44e3      	add	fp, ip
    526a:	46a4      	mov	ip, r4
    526c:	9b02      	ldr	r3, [sp, #8]
    526e:	4463      	add	r3, ip
    5270:	4698      	mov	r8, r3
    5272:	45a0      	cmp	r8, r4
    5274:	41b6      	sbcs	r6, r6
    5276:	4276      	negs	r6, r6
    5278:	19f6      	adds	r6, r6, r7
    527a:	9302      	str	r3, [sp, #8]
    527c:	18b2      	adds	r2, r6, r2
    527e:	e6b1      	b.n	4fe4 <__aeabi_ddiv+0x2f0>
    5280:	9803      	ldr	r0, [sp, #12]
    5282:	1e8a      	subs	r2, r1, #2
    5284:	0041      	lsls	r1, r0, #1
    5286:	4281      	cmp	r1, r0
    5288:	41b6      	sbcs	r6, r6
    528a:	4276      	negs	r6, r6
    528c:	19f6      	adds	r6, r6, r7
    528e:	19ad      	adds	r5, r5, r6
    5290:	9103      	str	r1, [sp, #12]
    5292:	e761      	b.n	5158 <__aeabi_ddiv+0x464>
    5294:	221f      	movs	r2, #31
    5296:	4252      	negs	r2, r2
    5298:	1ad3      	subs	r3, r2, r3
    529a:	465a      	mov	r2, fp
    529c:	40da      	lsrs	r2, r3
    529e:	0013      	movs	r3, r2
    52a0:	2d20      	cmp	r5, #32
    52a2:	d029      	beq.n	52f8 <__aeabi_ddiv+0x604>
    52a4:	2240      	movs	r2, #64	; 0x40
    52a6:	4658      	mov	r0, fp
    52a8:	1b55      	subs	r5, r2, r5
    52aa:	40a8      	lsls	r0, r5
    52ac:	4301      	orrs	r1, r0
    52ae:	1e48      	subs	r0, r1, #1
    52b0:	4181      	sbcs	r1, r0
    52b2:	2007      	movs	r0, #7
    52b4:	430b      	orrs	r3, r1
    52b6:	4018      	ands	r0, r3
    52b8:	2600      	movs	r6, #0
    52ba:	2800      	cmp	r0, #0
    52bc:	d009      	beq.n	52d2 <__aeabi_ddiv+0x5de>
    52be:	220f      	movs	r2, #15
    52c0:	2600      	movs	r6, #0
    52c2:	401a      	ands	r2, r3
    52c4:	0019      	movs	r1, r3
    52c6:	2a04      	cmp	r2, #4
    52c8:	d1bb      	bne.n	5242 <__aeabi_ddiv+0x54e>
    52ca:	000b      	movs	r3, r1
    52cc:	0770      	lsls	r0, r6, #29
    52ce:	0276      	lsls	r6, r6, #9
    52d0:	0b36      	lsrs	r6, r6, #12
    52d2:	08db      	lsrs	r3, r3, #3
    52d4:	4303      	orrs	r3, r0
    52d6:	4699      	mov	r9, r3
    52d8:	2201      	movs	r2, #1
    52da:	4653      	mov	r3, sl
    52dc:	401a      	ands	r2, r3
    52de:	2300      	movs	r3, #0
    52e0:	e56e      	b.n	4dc0 <__aeabi_ddiv+0xcc>
    52e2:	9902      	ldr	r1, [sp, #8]
    52e4:	428d      	cmp	r5, r1
    52e6:	d8bb      	bhi.n	5260 <__aeabi_ddiv+0x56c>
    52e8:	469b      	mov	fp, r3
    52ea:	2600      	movs	r6, #0
    52ec:	e67b      	b.n	4fe6 <__aeabi_ddiv+0x2f2>
    52ee:	9803      	ldr	r0, [sp, #12]
    52f0:	4298      	cmp	r0, r3
    52f2:	d3c5      	bcc.n	5280 <__aeabi_ddiv+0x58c>
    52f4:	0011      	movs	r1, r2
    52f6:	e732      	b.n	515e <__aeabi_ddiv+0x46a>
    52f8:	2000      	movs	r0, #0
    52fa:	e7d7      	b.n	52ac <__aeabi_ddiv+0x5b8>
    52fc:	2680      	movs	r6, #128	; 0x80
    52fe:	465b      	mov	r3, fp
    5300:	0336      	lsls	r6, r6, #12
    5302:	431e      	orrs	r6, r3
    5304:	0336      	lsls	r6, r6, #12
    5306:	0b36      	lsrs	r6, r6, #12
    5308:	9a00      	ldr	r2, [sp, #0]
    530a:	4689      	mov	r9, r1
    530c:	4b03      	ldr	r3, [pc, #12]	; (531c <__aeabi_ddiv+0x628>)
    530e:	e557      	b.n	4dc0 <__aeabi_ddiv+0xcc>
    5310:	000003ff 	.word	0x000003ff
    5314:	feffffff 	.word	0xfeffffff
    5318:	000007fe 	.word	0x000007fe
    531c:	000007ff 	.word	0x000007ff

00005320 <__eqdf2>:
    5320:	b5f0      	push	{r4, r5, r6, r7, lr}
    5322:	465f      	mov	r7, fp
    5324:	4656      	mov	r6, sl
    5326:	464d      	mov	r5, r9
    5328:	4644      	mov	r4, r8
    532a:	b4f0      	push	{r4, r5, r6, r7}
    532c:	031f      	lsls	r7, r3, #12
    532e:	005c      	lsls	r4, r3, #1
    5330:	0fdb      	lsrs	r3, r3, #31
    5332:	469a      	mov	sl, r3
    5334:	4b19      	ldr	r3, [pc, #100]	; (539c <__eqdf2+0x7c>)
    5336:	030e      	lsls	r6, r1, #12
    5338:	004d      	lsls	r5, r1, #1
    533a:	0fc9      	lsrs	r1, r1, #31
    533c:	4680      	mov	r8, r0
    533e:	0b36      	lsrs	r6, r6, #12
    5340:	0d6d      	lsrs	r5, r5, #21
    5342:	468b      	mov	fp, r1
    5344:	4691      	mov	r9, r2
    5346:	0b3f      	lsrs	r7, r7, #12
    5348:	0d64      	lsrs	r4, r4, #21
    534a:	429d      	cmp	r5, r3
    534c:	d019      	beq.n	5382 <__eqdf2+0x62>
    534e:	4b13      	ldr	r3, [pc, #76]	; (539c <__eqdf2+0x7c>)
    5350:	429c      	cmp	r4, r3
    5352:	d01b      	beq.n	538c <__eqdf2+0x6c>
    5354:	2301      	movs	r3, #1
    5356:	42a5      	cmp	r5, r4
    5358:	d006      	beq.n	5368 <__eqdf2+0x48>
    535a:	0018      	movs	r0, r3
    535c:	bc3c      	pop	{r2, r3, r4, r5}
    535e:	4690      	mov	r8, r2
    5360:	4699      	mov	r9, r3
    5362:	46a2      	mov	sl, r4
    5364:	46ab      	mov	fp, r5
    5366:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5368:	42be      	cmp	r6, r7
    536a:	d1f6      	bne.n	535a <__eqdf2+0x3a>
    536c:	45c8      	cmp	r8, r9
    536e:	d1f4      	bne.n	535a <__eqdf2+0x3a>
    5370:	45d3      	cmp	fp, sl
    5372:	d010      	beq.n	5396 <__eqdf2+0x76>
    5374:	2d00      	cmp	r5, #0
    5376:	d1f0      	bne.n	535a <__eqdf2+0x3a>
    5378:	4330      	orrs	r0, r6
    537a:	0003      	movs	r3, r0
    537c:	1e5a      	subs	r2, r3, #1
    537e:	4193      	sbcs	r3, r2
    5380:	e7eb      	b.n	535a <__eqdf2+0x3a>
    5382:	0031      	movs	r1, r6
    5384:	2301      	movs	r3, #1
    5386:	4301      	orrs	r1, r0
    5388:	d1e7      	bne.n	535a <__eqdf2+0x3a>
    538a:	e7e0      	b.n	534e <__eqdf2+0x2e>
    538c:	433a      	orrs	r2, r7
    538e:	2301      	movs	r3, #1
    5390:	2a00      	cmp	r2, #0
    5392:	d1e2      	bne.n	535a <__eqdf2+0x3a>
    5394:	e7de      	b.n	5354 <__eqdf2+0x34>
    5396:	2300      	movs	r3, #0
    5398:	e7df      	b.n	535a <__eqdf2+0x3a>
    539a:	46c0      	nop			; (mov r8, r8)
    539c:	000007ff 	.word	0x000007ff

000053a0 <__gedf2>:
    53a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    53a2:	465f      	mov	r7, fp
    53a4:	4644      	mov	r4, r8
    53a6:	4656      	mov	r6, sl
    53a8:	464d      	mov	r5, r9
    53aa:	b4f0      	push	{r4, r5, r6, r7}
    53ac:	031f      	lsls	r7, r3, #12
    53ae:	0b3c      	lsrs	r4, r7, #12
    53b0:	4f2c      	ldr	r7, [pc, #176]	; (5464 <__gedf2+0xc4>)
    53b2:	030e      	lsls	r6, r1, #12
    53b4:	004d      	lsls	r5, r1, #1
    53b6:	46a3      	mov	fp, r4
    53b8:	005c      	lsls	r4, r3, #1
    53ba:	4684      	mov	ip, r0
    53bc:	0b36      	lsrs	r6, r6, #12
    53be:	0d6d      	lsrs	r5, r5, #21
    53c0:	0fc9      	lsrs	r1, r1, #31
    53c2:	4690      	mov	r8, r2
    53c4:	0d64      	lsrs	r4, r4, #21
    53c6:	0fdb      	lsrs	r3, r3, #31
    53c8:	42bd      	cmp	r5, r7
    53ca:	d02b      	beq.n	5424 <__gedf2+0x84>
    53cc:	4f25      	ldr	r7, [pc, #148]	; (5464 <__gedf2+0xc4>)
    53ce:	42bc      	cmp	r4, r7
    53d0:	d02e      	beq.n	5430 <__gedf2+0x90>
    53d2:	2d00      	cmp	r5, #0
    53d4:	d10e      	bne.n	53f4 <__gedf2+0x54>
    53d6:	4330      	orrs	r0, r6
    53d8:	0007      	movs	r7, r0
    53da:	4681      	mov	r9, r0
    53dc:	4278      	negs	r0, r7
    53de:	4178      	adcs	r0, r7
    53e0:	2c00      	cmp	r4, #0
    53e2:	d117      	bne.n	5414 <__gedf2+0x74>
    53e4:	465f      	mov	r7, fp
    53e6:	433a      	orrs	r2, r7
    53e8:	d114      	bne.n	5414 <__gedf2+0x74>
    53ea:	464b      	mov	r3, r9
    53ec:	2000      	movs	r0, #0
    53ee:	2b00      	cmp	r3, #0
    53f0:	d00a      	beq.n	5408 <__gedf2+0x68>
    53f2:	e006      	b.n	5402 <__gedf2+0x62>
    53f4:	2c00      	cmp	r4, #0
    53f6:	d102      	bne.n	53fe <__gedf2+0x5e>
    53f8:	4658      	mov	r0, fp
    53fa:	4302      	orrs	r2, r0
    53fc:	d001      	beq.n	5402 <__gedf2+0x62>
    53fe:	4299      	cmp	r1, r3
    5400:	d01a      	beq.n	5438 <__gedf2+0x98>
    5402:	2301      	movs	r3, #1
    5404:	4248      	negs	r0, r1
    5406:	4318      	orrs	r0, r3
    5408:	bc3c      	pop	{r2, r3, r4, r5}
    540a:	4690      	mov	r8, r2
    540c:	4699      	mov	r9, r3
    540e:	46a2      	mov	sl, r4
    5410:	46ab      	mov	fp, r5
    5412:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5414:	2800      	cmp	r0, #0
    5416:	d0f2      	beq.n	53fe <__gedf2+0x5e>
    5418:	4258      	negs	r0, r3
    541a:	4158      	adcs	r0, r3
    541c:	2201      	movs	r2, #1
    541e:	4240      	negs	r0, r0
    5420:	4310      	orrs	r0, r2
    5422:	e7f1      	b.n	5408 <__gedf2+0x68>
    5424:	0037      	movs	r7, r6
    5426:	4307      	orrs	r7, r0
    5428:	d0d0      	beq.n	53cc <__gedf2+0x2c>
    542a:	2002      	movs	r0, #2
    542c:	4240      	negs	r0, r0
    542e:	e7eb      	b.n	5408 <__gedf2+0x68>
    5430:	465f      	mov	r7, fp
    5432:	4317      	orrs	r7, r2
    5434:	d0cd      	beq.n	53d2 <__gedf2+0x32>
    5436:	e7f8      	b.n	542a <__gedf2+0x8a>
    5438:	42a5      	cmp	r5, r4
    543a:	dce2      	bgt.n	5402 <__gedf2+0x62>
    543c:	db05      	blt.n	544a <__gedf2+0xaa>
    543e:	455e      	cmp	r6, fp
    5440:	d8df      	bhi.n	5402 <__gedf2+0x62>
    5442:	d008      	beq.n	5456 <__gedf2+0xb6>
    5444:	2000      	movs	r0, #0
    5446:	455e      	cmp	r6, fp
    5448:	d2de      	bcs.n	5408 <__gedf2+0x68>
    544a:	4248      	negs	r0, r1
    544c:	4148      	adcs	r0, r1
    544e:	2301      	movs	r3, #1
    5450:	4240      	negs	r0, r0
    5452:	4318      	orrs	r0, r3
    5454:	e7d8      	b.n	5408 <__gedf2+0x68>
    5456:	45c4      	cmp	ip, r8
    5458:	d8d3      	bhi.n	5402 <__gedf2+0x62>
    545a:	2000      	movs	r0, #0
    545c:	45c4      	cmp	ip, r8
    545e:	d3f4      	bcc.n	544a <__gedf2+0xaa>
    5460:	e7d2      	b.n	5408 <__gedf2+0x68>
    5462:	46c0      	nop			; (mov r8, r8)
    5464:	000007ff 	.word	0x000007ff

00005468 <__ledf2>:
    5468:	b5f0      	push	{r4, r5, r6, r7, lr}
    546a:	465f      	mov	r7, fp
    546c:	464d      	mov	r5, r9
    546e:	4644      	mov	r4, r8
    5470:	4656      	mov	r6, sl
    5472:	b4f0      	push	{r4, r5, r6, r7}
    5474:	031c      	lsls	r4, r3, #12
    5476:	0b24      	lsrs	r4, r4, #12
    5478:	46a4      	mov	ip, r4
    547a:	4c2f      	ldr	r4, [pc, #188]	; (5538 <__ledf2+0xd0>)
    547c:	030f      	lsls	r7, r1, #12
    547e:	004d      	lsls	r5, r1, #1
    5480:	005e      	lsls	r6, r3, #1
    5482:	0fc9      	lsrs	r1, r1, #31
    5484:	4680      	mov	r8, r0
    5486:	0b3f      	lsrs	r7, r7, #12
    5488:	0d6d      	lsrs	r5, r5, #21
    548a:	468b      	mov	fp, r1
    548c:	4691      	mov	r9, r2
    548e:	0d76      	lsrs	r6, r6, #21
    5490:	0fdb      	lsrs	r3, r3, #31
    5492:	42a5      	cmp	r5, r4
    5494:	d020      	beq.n	54d8 <__ledf2+0x70>
    5496:	4c28      	ldr	r4, [pc, #160]	; (5538 <__ledf2+0xd0>)
    5498:	42a6      	cmp	r6, r4
    549a:	d022      	beq.n	54e2 <__ledf2+0x7a>
    549c:	2d00      	cmp	r5, #0
    549e:	d112      	bne.n	54c6 <__ledf2+0x5e>
    54a0:	4338      	orrs	r0, r7
    54a2:	4244      	negs	r4, r0
    54a4:	4144      	adcs	r4, r0
    54a6:	2e00      	cmp	r6, #0
    54a8:	d020      	beq.n	54ec <__ledf2+0x84>
    54aa:	2c00      	cmp	r4, #0
    54ac:	d00d      	beq.n	54ca <__ledf2+0x62>
    54ae:	425c      	negs	r4, r3
    54b0:	4163      	adcs	r3, r4
    54b2:	2401      	movs	r4, #1
    54b4:	425b      	negs	r3, r3
    54b6:	431c      	orrs	r4, r3
    54b8:	0020      	movs	r0, r4
    54ba:	bc3c      	pop	{r2, r3, r4, r5}
    54bc:	4690      	mov	r8, r2
    54be:	4699      	mov	r9, r3
    54c0:	46a2      	mov	sl, r4
    54c2:	46ab      	mov	fp, r5
    54c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    54c6:	2e00      	cmp	r6, #0
    54c8:	d017      	beq.n	54fa <__ledf2+0x92>
    54ca:	455b      	cmp	r3, fp
    54cc:	d019      	beq.n	5502 <__ledf2+0x9a>
    54ce:	465b      	mov	r3, fp
    54d0:	425c      	negs	r4, r3
    54d2:	2301      	movs	r3, #1
    54d4:	431c      	orrs	r4, r3
    54d6:	e7ef      	b.n	54b8 <__ledf2+0x50>
    54d8:	0039      	movs	r1, r7
    54da:	2402      	movs	r4, #2
    54dc:	4301      	orrs	r1, r0
    54de:	d1eb      	bne.n	54b8 <__ledf2+0x50>
    54e0:	e7d9      	b.n	5496 <__ledf2+0x2e>
    54e2:	4661      	mov	r1, ip
    54e4:	2402      	movs	r4, #2
    54e6:	4311      	orrs	r1, r2
    54e8:	d1e6      	bne.n	54b8 <__ledf2+0x50>
    54ea:	e7d7      	b.n	549c <__ledf2+0x34>
    54ec:	4661      	mov	r1, ip
    54ee:	430a      	orrs	r2, r1
    54f0:	d1db      	bne.n	54aa <__ledf2+0x42>
    54f2:	2400      	movs	r4, #0
    54f4:	2800      	cmp	r0, #0
    54f6:	d0df      	beq.n	54b8 <__ledf2+0x50>
    54f8:	e7e9      	b.n	54ce <__ledf2+0x66>
    54fa:	4661      	mov	r1, ip
    54fc:	430a      	orrs	r2, r1
    54fe:	d1e4      	bne.n	54ca <__ledf2+0x62>
    5500:	e7e5      	b.n	54ce <__ledf2+0x66>
    5502:	42b5      	cmp	r5, r6
    5504:	dd03      	ble.n	550e <__ledf2+0xa6>
    5506:	2201      	movs	r2, #1
    5508:	425c      	negs	r4, r3
    550a:	4314      	orrs	r4, r2
    550c:	e7d4      	b.n	54b8 <__ledf2+0x50>
    550e:	42b5      	cmp	r5, r6
    5510:	dbcd      	blt.n	54ae <__ledf2+0x46>
    5512:	4567      	cmp	r7, ip
    5514:	d8db      	bhi.n	54ce <__ledf2+0x66>
    5516:	d009      	beq.n	552c <__ledf2+0xc4>
    5518:	2400      	movs	r4, #0
    551a:	4567      	cmp	r7, ip
    551c:	d2cc      	bcs.n	54b8 <__ledf2+0x50>
    551e:	4659      	mov	r1, fp
    5520:	424c      	negs	r4, r1
    5522:	4161      	adcs	r1, r4
    5524:	2401      	movs	r4, #1
    5526:	4249      	negs	r1, r1
    5528:	430c      	orrs	r4, r1
    552a:	e7c5      	b.n	54b8 <__ledf2+0x50>
    552c:	45c8      	cmp	r8, r9
    552e:	d8ce      	bhi.n	54ce <__ledf2+0x66>
    5530:	2400      	movs	r4, #0
    5532:	45c8      	cmp	r8, r9
    5534:	d3f3      	bcc.n	551e <__ledf2+0xb6>
    5536:	e7bf      	b.n	54b8 <__ledf2+0x50>
    5538:	000007ff 	.word	0x000007ff

0000553c <__aeabi_dmul>:
    553c:	b5f0      	push	{r4, r5, r6, r7, lr}
    553e:	465f      	mov	r7, fp
    5540:	4656      	mov	r6, sl
    5542:	464d      	mov	r5, r9
    5544:	4644      	mov	r4, r8
    5546:	b4f0      	push	{r4, r5, r6, r7}
    5548:	030d      	lsls	r5, r1, #12
    554a:	4699      	mov	r9, r3
    554c:	004e      	lsls	r6, r1, #1
    554e:	0b2b      	lsrs	r3, r5, #12
    5550:	b087      	sub	sp, #28
    5552:	0007      	movs	r7, r0
    5554:	4692      	mov	sl, r2
    5556:	4680      	mov	r8, r0
    5558:	469b      	mov	fp, r3
    555a:	0d76      	lsrs	r6, r6, #21
    555c:	0fcc      	lsrs	r4, r1, #31
    555e:	2e00      	cmp	r6, #0
    5560:	d069      	beq.n	5636 <__aeabi_dmul+0xfa>
    5562:	4b6d      	ldr	r3, [pc, #436]	; (5718 <__aeabi_dmul+0x1dc>)
    5564:	429e      	cmp	r6, r3
    5566:	d035      	beq.n	55d4 <__aeabi_dmul+0x98>
    5568:	465b      	mov	r3, fp
    556a:	2280      	movs	r2, #128	; 0x80
    556c:	00dd      	lsls	r5, r3, #3
    556e:	0412      	lsls	r2, r2, #16
    5570:	0f43      	lsrs	r3, r0, #29
    5572:	4313      	orrs	r3, r2
    5574:	432b      	orrs	r3, r5
    5576:	469b      	mov	fp, r3
    5578:	00c3      	lsls	r3, r0, #3
    557a:	4698      	mov	r8, r3
    557c:	4b67      	ldr	r3, [pc, #412]	; (571c <__aeabi_dmul+0x1e0>)
    557e:	2700      	movs	r7, #0
    5580:	469c      	mov	ip, r3
    5582:	2300      	movs	r3, #0
    5584:	4466      	add	r6, ip
    5586:	9301      	str	r3, [sp, #4]
    5588:	464a      	mov	r2, r9
    558a:	0315      	lsls	r5, r2, #12
    558c:	0050      	lsls	r0, r2, #1
    558e:	0fd2      	lsrs	r2, r2, #31
    5590:	4653      	mov	r3, sl
    5592:	0b2d      	lsrs	r5, r5, #12
    5594:	0d40      	lsrs	r0, r0, #21
    5596:	4691      	mov	r9, r2
    5598:	d100      	bne.n	559c <__aeabi_dmul+0x60>
    559a:	e076      	b.n	568a <__aeabi_dmul+0x14e>
    559c:	4a5e      	ldr	r2, [pc, #376]	; (5718 <__aeabi_dmul+0x1dc>)
    559e:	4290      	cmp	r0, r2
    55a0:	d06c      	beq.n	567c <__aeabi_dmul+0x140>
    55a2:	2280      	movs	r2, #128	; 0x80
    55a4:	0f5b      	lsrs	r3, r3, #29
    55a6:	0412      	lsls	r2, r2, #16
    55a8:	4313      	orrs	r3, r2
    55aa:	4a5c      	ldr	r2, [pc, #368]	; (571c <__aeabi_dmul+0x1e0>)
    55ac:	00ed      	lsls	r5, r5, #3
    55ae:	4694      	mov	ip, r2
    55b0:	431d      	orrs	r5, r3
    55b2:	4653      	mov	r3, sl
    55b4:	2200      	movs	r2, #0
    55b6:	00db      	lsls	r3, r3, #3
    55b8:	4460      	add	r0, ip
    55ba:	4649      	mov	r1, r9
    55bc:	1836      	adds	r6, r6, r0
    55be:	1c70      	adds	r0, r6, #1
    55c0:	4061      	eors	r1, r4
    55c2:	9002      	str	r0, [sp, #8]
    55c4:	4317      	orrs	r7, r2
    55c6:	2f0f      	cmp	r7, #15
    55c8:	d900      	bls.n	55cc <__aeabi_dmul+0x90>
    55ca:	e0af      	b.n	572c <__aeabi_dmul+0x1f0>
    55cc:	4854      	ldr	r0, [pc, #336]	; (5720 <__aeabi_dmul+0x1e4>)
    55ce:	00bf      	lsls	r7, r7, #2
    55d0:	59c7      	ldr	r7, [r0, r7]
    55d2:	46bf      	mov	pc, r7
    55d4:	465b      	mov	r3, fp
    55d6:	431f      	orrs	r7, r3
    55d8:	d000      	beq.n	55dc <__aeabi_dmul+0xa0>
    55da:	e088      	b.n	56ee <__aeabi_dmul+0x1b2>
    55dc:	2300      	movs	r3, #0
    55de:	469b      	mov	fp, r3
    55e0:	4698      	mov	r8, r3
    55e2:	3302      	adds	r3, #2
    55e4:	2708      	movs	r7, #8
    55e6:	9301      	str	r3, [sp, #4]
    55e8:	e7ce      	b.n	5588 <__aeabi_dmul+0x4c>
    55ea:	4649      	mov	r1, r9
    55ec:	2a02      	cmp	r2, #2
    55ee:	d06a      	beq.n	56c6 <__aeabi_dmul+0x18a>
    55f0:	2a03      	cmp	r2, #3
    55f2:	d100      	bne.n	55f6 <__aeabi_dmul+0xba>
    55f4:	e209      	b.n	5a0a <__aeabi_dmul+0x4ce>
    55f6:	2a01      	cmp	r2, #1
    55f8:	d000      	beq.n	55fc <__aeabi_dmul+0xc0>
    55fa:	e1bb      	b.n	5974 <__aeabi_dmul+0x438>
    55fc:	4011      	ands	r1, r2
    55fe:	2200      	movs	r2, #0
    5600:	2300      	movs	r3, #0
    5602:	2500      	movs	r5, #0
    5604:	4690      	mov	r8, r2
    5606:	b2cc      	uxtb	r4, r1
    5608:	2100      	movs	r1, #0
    560a:	032d      	lsls	r5, r5, #12
    560c:	0d0a      	lsrs	r2, r1, #20
    560e:	0512      	lsls	r2, r2, #20
    5610:	0b2d      	lsrs	r5, r5, #12
    5612:	4315      	orrs	r5, r2
    5614:	4a43      	ldr	r2, [pc, #268]	; (5724 <__aeabi_dmul+0x1e8>)
    5616:	051b      	lsls	r3, r3, #20
    5618:	4015      	ands	r5, r2
    561a:	431d      	orrs	r5, r3
    561c:	006d      	lsls	r5, r5, #1
    561e:	07e4      	lsls	r4, r4, #31
    5620:	086d      	lsrs	r5, r5, #1
    5622:	4325      	orrs	r5, r4
    5624:	4640      	mov	r0, r8
    5626:	0029      	movs	r1, r5
    5628:	b007      	add	sp, #28
    562a:	bc3c      	pop	{r2, r3, r4, r5}
    562c:	4690      	mov	r8, r2
    562e:	4699      	mov	r9, r3
    5630:	46a2      	mov	sl, r4
    5632:	46ab      	mov	fp, r5
    5634:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5636:	4303      	orrs	r3, r0
    5638:	d052      	beq.n	56e0 <__aeabi_dmul+0x1a4>
    563a:	465b      	mov	r3, fp
    563c:	2b00      	cmp	r3, #0
    563e:	d100      	bne.n	5642 <__aeabi_dmul+0x106>
    5640:	e18a      	b.n	5958 <__aeabi_dmul+0x41c>
    5642:	4658      	mov	r0, fp
    5644:	f000 ffbe 	bl	65c4 <__clzsi2>
    5648:	0003      	movs	r3, r0
    564a:	3b0b      	subs	r3, #11
    564c:	2b1c      	cmp	r3, #28
    564e:	dd00      	ble.n	5652 <__aeabi_dmul+0x116>
    5650:	e17b      	b.n	594a <__aeabi_dmul+0x40e>
    5652:	221d      	movs	r2, #29
    5654:	1ad3      	subs	r3, r2, r3
    5656:	003a      	movs	r2, r7
    5658:	0001      	movs	r1, r0
    565a:	465d      	mov	r5, fp
    565c:	40da      	lsrs	r2, r3
    565e:	3908      	subs	r1, #8
    5660:	408d      	lsls	r5, r1
    5662:	0013      	movs	r3, r2
    5664:	408f      	lsls	r7, r1
    5666:	432b      	orrs	r3, r5
    5668:	469b      	mov	fp, r3
    566a:	46b8      	mov	r8, r7
    566c:	4b2e      	ldr	r3, [pc, #184]	; (5728 <__aeabi_dmul+0x1ec>)
    566e:	2700      	movs	r7, #0
    5670:	469c      	mov	ip, r3
    5672:	2300      	movs	r3, #0
    5674:	4460      	add	r0, ip
    5676:	4246      	negs	r6, r0
    5678:	9301      	str	r3, [sp, #4]
    567a:	e785      	b.n	5588 <__aeabi_dmul+0x4c>
    567c:	4652      	mov	r2, sl
    567e:	432a      	orrs	r2, r5
    5680:	d12c      	bne.n	56dc <__aeabi_dmul+0x1a0>
    5682:	2500      	movs	r5, #0
    5684:	2300      	movs	r3, #0
    5686:	2202      	movs	r2, #2
    5688:	e797      	b.n	55ba <__aeabi_dmul+0x7e>
    568a:	4652      	mov	r2, sl
    568c:	432a      	orrs	r2, r5
    568e:	d021      	beq.n	56d4 <__aeabi_dmul+0x198>
    5690:	2d00      	cmp	r5, #0
    5692:	d100      	bne.n	5696 <__aeabi_dmul+0x15a>
    5694:	e154      	b.n	5940 <__aeabi_dmul+0x404>
    5696:	0028      	movs	r0, r5
    5698:	f000 ff94 	bl	65c4 <__clzsi2>
    569c:	0003      	movs	r3, r0
    569e:	3b0b      	subs	r3, #11
    56a0:	2b1c      	cmp	r3, #28
    56a2:	dd00      	ble.n	56a6 <__aeabi_dmul+0x16a>
    56a4:	e146      	b.n	5934 <__aeabi_dmul+0x3f8>
    56a6:	211d      	movs	r1, #29
    56a8:	1acb      	subs	r3, r1, r3
    56aa:	4651      	mov	r1, sl
    56ac:	0002      	movs	r2, r0
    56ae:	40d9      	lsrs	r1, r3
    56b0:	4653      	mov	r3, sl
    56b2:	3a08      	subs	r2, #8
    56b4:	4095      	lsls	r5, r2
    56b6:	4093      	lsls	r3, r2
    56b8:	430d      	orrs	r5, r1
    56ba:	4a1b      	ldr	r2, [pc, #108]	; (5728 <__aeabi_dmul+0x1ec>)
    56bc:	4694      	mov	ip, r2
    56be:	4460      	add	r0, ip
    56c0:	4240      	negs	r0, r0
    56c2:	2200      	movs	r2, #0
    56c4:	e779      	b.n	55ba <__aeabi_dmul+0x7e>
    56c6:	2401      	movs	r4, #1
    56c8:	2200      	movs	r2, #0
    56ca:	400c      	ands	r4, r1
    56cc:	4b12      	ldr	r3, [pc, #72]	; (5718 <__aeabi_dmul+0x1dc>)
    56ce:	2500      	movs	r5, #0
    56d0:	4690      	mov	r8, r2
    56d2:	e799      	b.n	5608 <__aeabi_dmul+0xcc>
    56d4:	2500      	movs	r5, #0
    56d6:	2300      	movs	r3, #0
    56d8:	2201      	movs	r2, #1
    56da:	e76e      	b.n	55ba <__aeabi_dmul+0x7e>
    56dc:	2203      	movs	r2, #3
    56de:	e76c      	b.n	55ba <__aeabi_dmul+0x7e>
    56e0:	2300      	movs	r3, #0
    56e2:	469b      	mov	fp, r3
    56e4:	4698      	mov	r8, r3
    56e6:	3301      	adds	r3, #1
    56e8:	2704      	movs	r7, #4
    56ea:	9301      	str	r3, [sp, #4]
    56ec:	e74c      	b.n	5588 <__aeabi_dmul+0x4c>
    56ee:	2303      	movs	r3, #3
    56f0:	270c      	movs	r7, #12
    56f2:	9301      	str	r3, [sp, #4]
    56f4:	e748      	b.n	5588 <__aeabi_dmul+0x4c>
    56f6:	2300      	movs	r3, #0
    56f8:	2580      	movs	r5, #128	; 0x80
    56fa:	4698      	mov	r8, r3
    56fc:	2400      	movs	r4, #0
    56fe:	032d      	lsls	r5, r5, #12
    5700:	4b05      	ldr	r3, [pc, #20]	; (5718 <__aeabi_dmul+0x1dc>)
    5702:	e781      	b.n	5608 <__aeabi_dmul+0xcc>
    5704:	465d      	mov	r5, fp
    5706:	4643      	mov	r3, r8
    5708:	9a01      	ldr	r2, [sp, #4]
    570a:	e76f      	b.n	55ec <__aeabi_dmul+0xb0>
    570c:	465d      	mov	r5, fp
    570e:	4643      	mov	r3, r8
    5710:	0021      	movs	r1, r4
    5712:	9a01      	ldr	r2, [sp, #4]
    5714:	e76a      	b.n	55ec <__aeabi_dmul+0xb0>
    5716:	46c0      	nop			; (mov r8, r8)
    5718:	000007ff 	.word	0x000007ff
    571c:	fffffc01 	.word	0xfffffc01
    5720:	000069a0 	.word	0x000069a0
    5724:	800fffff 	.word	0x800fffff
    5728:	000003f3 	.word	0x000003f3
    572c:	4642      	mov	r2, r8
    572e:	0c12      	lsrs	r2, r2, #16
    5730:	4691      	mov	r9, r2
    5732:	0c1a      	lsrs	r2, r3, #16
    5734:	4694      	mov	ip, r2
    5736:	4642      	mov	r2, r8
    5738:	0417      	lsls	r7, r2, #16
    573a:	464a      	mov	r2, r9
    573c:	041b      	lsls	r3, r3, #16
    573e:	0c1b      	lsrs	r3, r3, #16
    5740:	435a      	muls	r2, r3
    5742:	4660      	mov	r0, ip
    5744:	4690      	mov	r8, r2
    5746:	464a      	mov	r2, r9
    5748:	4342      	muls	r2, r0
    574a:	0010      	movs	r0, r2
    574c:	9203      	str	r2, [sp, #12]
    574e:	4662      	mov	r2, ip
    5750:	001c      	movs	r4, r3
    5752:	0c3f      	lsrs	r7, r7, #16
    5754:	437a      	muls	r2, r7
    5756:	437c      	muls	r4, r7
    5758:	4442      	add	r2, r8
    575a:	9201      	str	r2, [sp, #4]
    575c:	0c22      	lsrs	r2, r4, #16
    575e:	4692      	mov	sl, r2
    5760:	9a01      	ldr	r2, [sp, #4]
    5762:	4452      	add	r2, sl
    5764:	4590      	cmp	r8, r2
    5766:	d906      	bls.n	5776 <__aeabi_dmul+0x23a>
    5768:	4682      	mov	sl, r0
    576a:	2080      	movs	r0, #128	; 0x80
    576c:	0240      	lsls	r0, r0, #9
    576e:	4680      	mov	r8, r0
    5770:	44c2      	add	sl, r8
    5772:	4650      	mov	r0, sl
    5774:	9003      	str	r0, [sp, #12]
    5776:	0c10      	lsrs	r0, r2, #16
    5778:	9004      	str	r0, [sp, #16]
    577a:	4648      	mov	r0, r9
    577c:	0424      	lsls	r4, r4, #16
    577e:	0c24      	lsrs	r4, r4, #16
    5780:	0412      	lsls	r2, r2, #16
    5782:	1912      	adds	r2, r2, r4
    5784:	9205      	str	r2, [sp, #20]
    5786:	0c2a      	lsrs	r2, r5, #16
    5788:	042d      	lsls	r5, r5, #16
    578a:	0c2d      	lsrs	r5, r5, #16
    578c:	4368      	muls	r0, r5
    578e:	002c      	movs	r4, r5
    5790:	4682      	mov	sl, r0
    5792:	4648      	mov	r0, r9
    5794:	437c      	muls	r4, r7
    5796:	4350      	muls	r0, r2
    5798:	4681      	mov	r9, r0
    579a:	0c20      	lsrs	r0, r4, #16
    579c:	4680      	mov	r8, r0
    579e:	4357      	muls	r7, r2
    57a0:	4457      	add	r7, sl
    57a2:	4447      	add	r7, r8
    57a4:	45ba      	cmp	sl, r7
    57a6:	d903      	bls.n	57b0 <__aeabi_dmul+0x274>
    57a8:	2080      	movs	r0, #128	; 0x80
    57aa:	0240      	lsls	r0, r0, #9
    57ac:	4680      	mov	r8, r0
    57ae:	44c1      	add	r9, r8
    57b0:	0c38      	lsrs	r0, r7, #16
    57b2:	043f      	lsls	r7, r7, #16
    57b4:	46b8      	mov	r8, r7
    57b6:	4448      	add	r0, r9
    57b8:	0424      	lsls	r4, r4, #16
    57ba:	0c24      	lsrs	r4, r4, #16
    57bc:	9001      	str	r0, [sp, #4]
    57be:	9804      	ldr	r0, [sp, #16]
    57c0:	44a0      	add	r8, r4
    57c2:	4440      	add	r0, r8
    57c4:	9004      	str	r0, [sp, #16]
    57c6:	4658      	mov	r0, fp
    57c8:	0c00      	lsrs	r0, r0, #16
    57ca:	4681      	mov	r9, r0
    57cc:	4658      	mov	r0, fp
    57ce:	0404      	lsls	r4, r0, #16
    57d0:	0c20      	lsrs	r0, r4, #16
    57d2:	4682      	mov	sl, r0
    57d4:	0007      	movs	r7, r0
    57d6:	4648      	mov	r0, r9
    57d8:	435f      	muls	r7, r3
    57da:	464c      	mov	r4, r9
    57dc:	4343      	muls	r3, r0
    57de:	4660      	mov	r0, ip
    57e0:	4360      	muls	r0, r4
    57e2:	4664      	mov	r4, ip
    57e4:	4683      	mov	fp, r0
    57e6:	4650      	mov	r0, sl
    57e8:	4344      	muls	r4, r0
    57ea:	0c38      	lsrs	r0, r7, #16
    57ec:	4684      	mov	ip, r0
    57ee:	18e4      	adds	r4, r4, r3
    57f0:	4464      	add	r4, ip
    57f2:	42a3      	cmp	r3, r4
    57f4:	d903      	bls.n	57fe <__aeabi_dmul+0x2c2>
    57f6:	2380      	movs	r3, #128	; 0x80
    57f8:	025b      	lsls	r3, r3, #9
    57fa:	469c      	mov	ip, r3
    57fc:	44e3      	add	fp, ip
    57fe:	4648      	mov	r0, r9
    5800:	043f      	lsls	r7, r7, #16
    5802:	0c23      	lsrs	r3, r4, #16
    5804:	0c3f      	lsrs	r7, r7, #16
    5806:	0424      	lsls	r4, r4, #16
    5808:	19e4      	adds	r4, r4, r7
    580a:	4657      	mov	r7, sl
    580c:	4368      	muls	r0, r5
    580e:	436f      	muls	r7, r5
    5810:	4684      	mov	ip, r0
    5812:	464d      	mov	r5, r9
    5814:	4650      	mov	r0, sl
    5816:	4355      	muls	r5, r2
    5818:	4342      	muls	r2, r0
    581a:	0c38      	lsrs	r0, r7, #16
    581c:	4681      	mov	r9, r0
    581e:	4462      	add	r2, ip
    5820:	444a      	add	r2, r9
    5822:	445b      	add	r3, fp
    5824:	4594      	cmp	ip, r2
    5826:	d903      	bls.n	5830 <__aeabi_dmul+0x2f4>
    5828:	2080      	movs	r0, #128	; 0x80
    582a:	0240      	lsls	r0, r0, #9
    582c:	4684      	mov	ip, r0
    582e:	4465      	add	r5, ip
    5830:	9803      	ldr	r0, [sp, #12]
    5832:	043f      	lsls	r7, r7, #16
    5834:	4683      	mov	fp, r0
    5836:	9804      	ldr	r0, [sp, #16]
    5838:	0c3f      	lsrs	r7, r7, #16
    583a:	4684      	mov	ip, r0
    583c:	44e3      	add	fp, ip
    583e:	45c3      	cmp	fp, r8
    5840:	4180      	sbcs	r0, r0
    5842:	4240      	negs	r0, r0
    5844:	4682      	mov	sl, r0
    5846:	0410      	lsls	r0, r2, #16
    5848:	4684      	mov	ip, r0
    584a:	9801      	ldr	r0, [sp, #4]
    584c:	4467      	add	r7, ip
    584e:	4684      	mov	ip, r0
    5850:	4467      	add	r7, ip
    5852:	44a3      	add	fp, r4
    5854:	46bc      	mov	ip, r7
    5856:	45a3      	cmp	fp, r4
    5858:	41a4      	sbcs	r4, r4
    585a:	4699      	mov	r9, r3
    585c:	44d4      	add	ip, sl
    585e:	4264      	negs	r4, r4
    5860:	4287      	cmp	r7, r0
    5862:	41bf      	sbcs	r7, r7
    5864:	45d4      	cmp	ip, sl
    5866:	4180      	sbcs	r0, r0
    5868:	44e1      	add	r9, ip
    586a:	46a0      	mov	r8, r4
    586c:	4599      	cmp	r9, r3
    586e:	419b      	sbcs	r3, r3
    5870:	427f      	negs	r7, r7
    5872:	4240      	negs	r0, r0
    5874:	44c8      	add	r8, r9
    5876:	4307      	orrs	r7, r0
    5878:	0c12      	lsrs	r2, r2, #16
    587a:	18ba      	adds	r2, r7, r2
    587c:	45a0      	cmp	r8, r4
    587e:	41a4      	sbcs	r4, r4
    5880:	425f      	negs	r7, r3
    5882:	003b      	movs	r3, r7
    5884:	4264      	negs	r4, r4
    5886:	4323      	orrs	r3, r4
    5888:	18d7      	adds	r7, r2, r3
    588a:	4643      	mov	r3, r8
    588c:	197d      	adds	r5, r7, r5
    588e:	0ddb      	lsrs	r3, r3, #23
    5890:	026d      	lsls	r5, r5, #9
    5892:	431d      	orrs	r5, r3
    5894:	465b      	mov	r3, fp
    5896:	025a      	lsls	r2, r3, #9
    5898:	9b05      	ldr	r3, [sp, #20]
    589a:	431a      	orrs	r2, r3
    589c:	1e53      	subs	r3, r2, #1
    589e:	419a      	sbcs	r2, r3
    58a0:	465b      	mov	r3, fp
    58a2:	0ddb      	lsrs	r3, r3, #23
    58a4:	431a      	orrs	r2, r3
    58a6:	4643      	mov	r3, r8
    58a8:	025b      	lsls	r3, r3, #9
    58aa:	4313      	orrs	r3, r2
    58ac:	01ea      	lsls	r2, r5, #7
    58ae:	d507      	bpl.n	58c0 <__aeabi_dmul+0x384>
    58b0:	2201      	movs	r2, #1
    58b2:	085c      	lsrs	r4, r3, #1
    58b4:	4013      	ands	r3, r2
    58b6:	4323      	orrs	r3, r4
    58b8:	07ea      	lsls	r2, r5, #31
    58ba:	9e02      	ldr	r6, [sp, #8]
    58bc:	4313      	orrs	r3, r2
    58be:	086d      	lsrs	r5, r5, #1
    58c0:	4a57      	ldr	r2, [pc, #348]	; (5a20 <__aeabi_dmul+0x4e4>)
    58c2:	18b2      	adds	r2, r6, r2
    58c4:	2a00      	cmp	r2, #0
    58c6:	dd4b      	ble.n	5960 <__aeabi_dmul+0x424>
    58c8:	0758      	lsls	r0, r3, #29
    58ca:	d009      	beq.n	58e0 <__aeabi_dmul+0x3a4>
    58cc:	200f      	movs	r0, #15
    58ce:	4018      	ands	r0, r3
    58d0:	2804      	cmp	r0, #4
    58d2:	d005      	beq.n	58e0 <__aeabi_dmul+0x3a4>
    58d4:	1d18      	adds	r0, r3, #4
    58d6:	4298      	cmp	r0, r3
    58d8:	419b      	sbcs	r3, r3
    58da:	425b      	negs	r3, r3
    58dc:	18ed      	adds	r5, r5, r3
    58de:	0003      	movs	r3, r0
    58e0:	01e8      	lsls	r0, r5, #7
    58e2:	d504      	bpl.n	58ee <__aeabi_dmul+0x3b2>
    58e4:	4a4f      	ldr	r2, [pc, #316]	; (5a24 <__aeabi_dmul+0x4e8>)
    58e6:	4015      	ands	r5, r2
    58e8:	2280      	movs	r2, #128	; 0x80
    58ea:	00d2      	lsls	r2, r2, #3
    58ec:	18b2      	adds	r2, r6, r2
    58ee:	484e      	ldr	r0, [pc, #312]	; (5a28 <__aeabi_dmul+0x4ec>)
    58f0:	4282      	cmp	r2, r0
    58f2:	dd00      	ble.n	58f6 <__aeabi_dmul+0x3ba>
    58f4:	e6e7      	b.n	56c6 <__aeabi_dmul+0x18a>
    58f6:	2401      	movs	r4, #1
    58f8:	08db      	lsrs	r3, r3, #3
    58fa:	0768      	lsls	r0, r5, #29
    58fc:	4318      	orrs	r0, r3
    58fe:	026d      	lsls	r5, r5, #9
    5900:	0553      	lsls	r3, r2, #21
    5902:	4680      	mov	r8, r0
    5904:	0b2d      	lsrs	r5, r5, #12
    5906:	0d5b      	lsrs	r3, r3, #21
    5908:	400c      	ands	r4, r1
    590a:	e67d      	b.n	5608 <__aeabi_dmul+0xcc>
    590c:	2280      	movs	r2, #128	; 0x80
    590e:	4659      	mov	r1, fp
    5910:	0312      	lsls	r2, r2, #12
    5912:	4211      	tst	r1, r2
    5914:	d008      	beq.n	5928 <__aeabi_dmul+0x3ec>
    5916:	4215      	tst	r5, r2
    5918:	d106      	bne.n	5928 <__aeabi_dmul+0x3ec>
    591a:	4315      	orrs	r5, r2
    591c:	032d      	lsls	r5, r5, #12
    591e:	4698      	mov	r8, r3
    5920:	0b2d      	lsrs	r5, r5, #12
    5922:	464c      	mov	r4, r9
    5924:	4b41      	ldr	r3, [pc, #260]	; (5a2c <__aeabi_dmul+0x4f0>)
    5926:	e66f      	b.n	5608 <__aeabi_dmul+0xcc>
    5928:	465d      	mov	r5, fp
    592a:	4315      	orrs	r5, r2
    592c:	032d      	lsls	r5, r5, #12
    592e:	0b2d      	lsrs	r5, r5, #12
    5930:	4b3e      	ldr	r3, [pc, #248]	; (5a2c <__aeabi_dmul+0x4f0>)
    5932:	e669      	b.n	5608 <__aeabi_dmul+0xcc>
    5934:	0003      	movs	r3, r0
    5936:	4655      	mov	r5, sl
    5938:	3b28      	subs	r3, #40	; 0x28
    593a:	409d      	lsls	r5, r3
    593c:	2300      	movs	r3, #0
    593e:	e6bc      	b.n	56ba <__aeabi_dmul+0x17e>
    5940:	4650      	mov	r0, sl
    5942:	f000 fe3f 	bl	65c4 <__clzsi2>
    5946:	3020      	adds	r0, #32
    5948:	e6a8      	b.n	569c <__aeabi_dmul+0x160>
    594a:	0003      	movs	r3, r0
    594c:	3b28      	subs	r3, #40	; 0x28
    594e:	409f      	lsls	r7, r3
    5950:	2300      	movs	r3, #0
    5952:	46bb      	mov	fp, r7
    5954:	4698      	mov	r8, r3
    5956:	e689      	b.n	566c <__aeabi_dmul+0x130>
    5958:	f000 fe34 	bl	65c4 <__clzsi2>
    595c:	3020      	adds	r0, #32
    595e:	e673      	b.n	5648 <__aeabi_dmul+0x10c>
    5960:	2401      	movs	r4, #1
    5962:	1aa6      	subs	r6, r4, r2
    5964:	2e38      	cmp	r6, #56	; 0x38
    5966:	dd07      	ble.n	5978 <__aeabi_dmul+0x43c>
    5968:	2200      	movs	r2, #0
    596a:	400c      	ands	r4, r1
    596c:	2300      	movs	r3, #0
    596e:	2500      	movs	r5, #0
    5970:	4690      	mov	r8, r2
    5972:	e649      	b.n	5608 <__aeabi_dmul+0xcc>
    5974:	9e02      	ldr	r6, [sp, #8]
    5976:	e7a3      	b.n	58c0 <__aeabi_dmul+0x384>
    5978:	2e1f      	cmp	r6, #31
    597a:	dc20      	bgt.n	59be <__aeabi_dmul+0x482>
    597c:	2220      	movs	r2, #32
    597e:	002c      	movs	r4, r5
    5980:	0018      	movs	r0, r3
    5982:	1b92      	subs	r2, r2, r6
    5984:	40f0      	lsrs	r0, r6
    5986:	4094      	lsls	r4, r2
    5988:	4093      	lsls	r3, r2
    598a:	4304      	orrs	r4, r0
    598c:	1e58      	subs	r0, r3, #1
    598e:	4183      	sbcs	r3, r0
    5990:	431c      	orrs	r4, r3
    5992:	40f5      	lsrs	r5, r6
    5994:	0763      	lsls	r3, r4, #29
    5996:	d009      	beq.n	59ac <__aeabi_dmul+0x470>
    5998:	230f      	movs	r3, #15
    599a:	4023      	ands	r3, r4
    599c:	2b04      	cmp	r3, #4
    599e:	d005      	beq.n	59ac <__aeabi_dmul+0x470>
    59a0:	0023      	movs	r3, r4
    59a2:	1d1c      	adds	r4, r3, #4
    59a4:	429c      	cmp	r4, r3
    59a6:	4192      	sbcs	r2, r2
    59a8:	4252      	negs	r2, r2
    59aa:	18ad      	adds	r5, r5, r2
    59ac:	022b      	lsls	r3, r5, #8
    59ae:	d51f      	bpl.n	59f0 <__aeabi_dmul+0x4b4>
    59b0:	2401      	movs	r4, #1
    59b2:	2200      	movs	r2, #0
    59b4:	400c      	ands	r4, r1
    59b6:	2301      	movs	r3, #1
    59b8:	2500      	movs	r5, #0
    59ba:	4690      	mov	r8, r2
    59bc:	e624      	b.n	5608 <__aeabi_dmul+0xcc>
    59be:	201f      	movs	r0, #31
    59c0:	002c      	movs	r4, r5
    59c2:	4240      	negs	r0, r0
    59c4:	1a82      	subs	r2, r0, r2
    59c6:	40d4      	lsrs	r4, r2
    59c8:	2e20      	cmp	r6, #32
    59ca:	d01c      	beq.n	5a06 <__aeabi_dmul+0x4ca>
    59cc:	2240      	movs	r2, #64	; 0x40
    59ce:	1b96      	subs	r6, r2, r6
    59d0:	40b5      	lsls	r5, r6
    59d2:	432b      	orrs	r3, r5
    59d4:	1e58      	subs	r0, r3, #1
    59d6:	4183      	sbcs	r3, r0
    59d8:	2007      	movs	r0, #7
    59da:	4323      	orrs	r3, r4
    59dc:	4018      	ands	r0, r3
    59de:	2500      	movs	r5, #0
    59e0:	2800      	cmp	r0, #0
    59e2:	d009      	beq.n	59f8 <__aeabi_dmul+0x4bc>
    59e4:	220f      	movs	r2, #15
    59e6:	2500      	movs	r5, #0
    59e8:	401a      	ands	r2, r3
    59ea:	001c      	movs	r4, r3
    59ec:	2a04      	cmp	r2, #4
    59ee:	d1d8      	bne.n	59a2 <__aeabi_dmul+0x466>
    59f0:	0023      	movs	r3, r4
    59f2:	0768      	lsls	r0, r5, #29
    59f4:	026d      	lsls	r5, r5, #9
    59f6:	0b2d      	lsrs	r5, r5, #12
    59f8:	2401      	movs	r4, #1
    59fa:	08db      	lsrs	r3, r3, #3
    59fc:	4303      	orrs	r3, r0
    59fe:	4698      	mov	r8, r3
    5a00:	400c      	ands	r4, r1
    5a02:	2300      	movs	r3, #0
    5a04:	e600      	b.n	5608 <__aeabi_dmul+0xcc>
    5a06:	2500      	movs	r5, #0
    5a08:	e7e3      	b.n	59d2 <__aeabi_dmul+0x496>
    5a0a:	2280      	movs	r2, #128	; 0x80
    5a0c:	2401      	movs	r4, #1
    5a0e:	0312      	lsls	r2, r2, #12
    5a10:	4315      	orrs	r5, r2
    5a12:	032d      	lsls	r5, r5, #12
    5a14:	4698      	mov	r8, r3
    5a16:	0b2d      	lsrs	r5, r5, #12
    5a18:	400c      	ands	r4, r1
    5a1a:	4b04      	ldr	r3, [pc, #16]	; (5a2c <__aeabi_dmul+0x4f0>)
    5a1c:	e5f4      	b.n	5608 <__aeabi_dmul+0xcc>
    5a1e:	46c0      	nop			; (mov r8, r8)
    5a20:	000003ff 	.word	0x000003ff
    5a24:	feffffff 	.word	0xfeffffff
    5a28:	000007fe 	.word	0x000007fe
    5a2c:	000007ff 	.word	0x000007ff

00005a30 <__aeabi_dsub>:
    5a30:	b5f0      	push	{r4, r5, r6, r7, lr}
    5a32:	4657      	mov	r7, sl
    5a34:	464e      	mov	r6, r9
    5a36:	4645      	mov	r5, r8
    5a38:	b4e0      	push	{r5, r6, r7}
    5a3a:	000e      	movs	r6, r1
    5a3c:	0011      	movs	r1, r2
    5a3e:	0ff2      	lsrs	r2, r6, #31
    5a40:	4692      	mov	sl, r2
    5a42:	00c5      	lsls	r5, r0, #3
    5a44:	0f42      	lsrs	r2, r0, #29
    5a46:	0318      	lsls	r0, r3, #12
    5a48:	0337      	lsls	r7, r6, #12
    5a4a:	0074      	lsls	r4, r6, #1
    5a4c:	0a40      	lsrs	r0, r0, #9
    5a4e:	0f4e      	lsrs	r6, r1, #29
    5a50:	0a7f      	lsrs	r7, r7, #9
    5a52:	4330      	orrs	r0, r6
    5a54:	4ecf      	ldr	r6, [pc, #828]	; (5d94 <__aeabi_dsub+0x364>)
    5a56:	4317      	orrs	r7, r2
    5a58:	005a      	lsls	r2, r3, #1
    5a5a:	0d64      	lsrs	r4, r4, #21
    5a5c:	0d52      	lsrs	r2, r2, #21
    5a5e:	0fdb      	lsrs	r3, r3, #31
    5a60:	00c9      	lsls	r1, r1, #3
    5a62:	42b2      	cmp	r2, r6
    5a64:	d100      	bne.n	5a68 <__aeabi_dsub+0x38>
    5a66:	e0e5      	b.n	5c34 <__aeabi_dsub+0x204>
    5a68:	2601      	movs	r6, #1
    5a6a:	4073      	eors	r3, r6
    5a6c:	1aa6      	subs	r6, r4, r2
    5a6e:	46b4      	mov	ip, r6
    5a70:	4553      	cmp	r3, sl
    5a72:	d100      	bne.n	5a76 <__aeabi_dsub+0x46>
    5a74:	e0af      	b.n	5bd6 <__aeabi_dsub+0x1a6>
    5a76:	2e00      	cmp	r6, #0
    5a78:	dc00      	bgt.n	5a7c <__aeabi_dsub+0x4c>
    5a7a:	e10d      	b.n	5c98 <__aeabi_dsub+0x268>
    5a7c:	2a00      	cmp	r2, #0
    5a7e:	d13a      	bne.n	5af6 <__aeabi_dsub+0xc6>
    5a80:	0003      	movs	r3, r0
    5a82:	430b      	orrs	r3, r1
    5a84:	d000      	beq.n	5a88 <__aeabi_dsub+0x58>
    5a86:	e0e4      	b.n	5c52 <__aeabi_dsub+0x222>
    5a88:	076b      	lsls	r3, r5, #29
    5a8a:	d009      	beq.n	5aa0 <__aeabi_dsub+0x70>
    5a8c:	230f      	movs	r3, #15
    5a8e:	402b      	ands	r3, r5
    5a90:	2b04      	cmp	r3, #4
    5a92:	d005      	beq.n	5aa0 <__aeabi_dsub+0x70>
    5a94:	1d2b      	adds	r3, r5, #4
    5a96:	42ab      	cmp	r3, r5
    5a98:	41ad      	sbcs	r5, r5
    5a9a:	426d      	negs	r5, r5
    5a9c:	197f      	adds	r7, r7, r5
    5a9e:	001d      	movs	r5, r3
    5aa0:	023b      	lsls	r3, r7, #8
    5aa2:	d400      	bmi.n	5aa6 <__aeabi_dsub+0x76>
    5aa4:	e088      	b.n	5bb8 <__aeabi_dsub+0x188>
    5aa6:	4bbb      	ldr	r3, [pc, #748]	; (5d94 <__aeabi_dsub+0x364>)
    5aa8:	3401      	adds	r4, #1
    5aaa:	429c      	cmp	r4, r3
    5aac:	d100      	bne.n	5ab0 <__aeabi_dsub+0x80>
    5aae:	e110      	b.n	5cd2 <__aeabi_dsub+0x2a2>
    5ab0:	003a      	movs	r2, r7
    5ab2:	4bb9      	ldr	r3, [pc, #740]	; (5d98 <__aeabi_dsub+0x368>)
    5ab4:	4651      	mov	r1, sl
    5ab6:	401a      	ands	r2, r3
    5ab8:	2301      	movs	r3, #1
    5aba:	0750      	lsls	r0, r2, #29
    5abc:	08ed      	lsrs	r5, r5, #3
    5abe:	0252      	lsls	r2, r2, #9
    5ac0:	0564      	lsls	r4, r4, #21
    5ac2:	4305      	orrs	r5, r0
    5ac4:	0b12      	lsrs	r2, r2, #12
    5ac6:	0d64      	lsrs	r4, r4, #21
    5ac8:	400b      	ands	r3, r1
    5aca:	2100      	movs	r1, #0
    5acc:	0028      	movs	r0, r5
    5ace:	0312      	lsls	r2, r2, #12
    5ad0:	0d0d      	lsrs	r5, r1, #20
    5ad2:	0b12      	lsrs	r2, r2, #12
    5ad4:	0564      	lsls	r4, r4, #21
    5ad6:	052d      	lsls	r5, r5, #20
    5ad8:	4315      	orrs	r5, r2
    5ada:	0862      	lsrs	r2, r4, #1
    5adc:	4caf      	ldr	r4, [pc, #700]	; (5d9c <__aeabi_dsub+0x36c>)
    5ade:	07db      	lsls	r3, r3, #31
    5ae0:	402c      	ands	r4, r5
    5ae2:	4314      	orrs	r4, r2
    5ae4:	0064      	lsls	r4, r4, #1
    5ae6:	0864      	lsrs	r4, r4, #1
    5ae8:	431c      	orrs	r4, r3
    5aea:	0021      	movs	r1, r4
    5aec:	bc1c      	pop	{r2, r3, r4}
    5aee:	4690      	mov	r8, r2
    5af0:	4699      	mov	r9, r3
    5af2:	46a2      	mov	sl, r4
    5af4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5af6:	4ba7      	ldr	r3, [pc, #668]	; (5d94 <__aeabi_dsub+0x364>)
    5af8:	429c      	cmp	r4, r3
    5afa:	d0c5      	beq.n	5a88 <__aeabi_dsub+0x58>
    5afc:	2380      	movs	r3, #128	; 0x80
    5afe:	041b      	lsls	r3, r3, #16
    5b00:	4318      	orrs	r0, r3
    5b02:	4663      	mov	r3, ip
    5b04:	2b38      	cmp	r3, #56	; 0x38
    5b06:	dd00      	ble.n	5b0a <__aeabi_dsub+0xda>
    5b08:	e0fd      	b.n	5d06 <__aeabi_dsub+0x2d6>
    5b0a:	2b1f      	cmp	r3, #31
    5b0c:	dd00      	ble.n	5b10 <__aeabi_dsub+0xe0>
    5b0e:	e130      	b.n	5d72 <__aeabi_dsub+0x342>
    5b10:	4662      	mov	r2, ip
    5b12:	2320      	movs	r3, #32
    5b14:	1a9b      	subs	r3, r3, r2
    5b16:	0002      	movs	r2, r0
    5b18:	409a      	lsls	r2, r3
    5b1a:	4666      	mov	r6, ip
    5b1c:	4690      	mov	r8, r2
    5b1e:	000a      	movs	r2, r1
    5b20:	4099      	lsls	r1, r3
    5b22:	40f2      	lsrs	r2, r6
    5b24:	4646      	mov	r6, r8
    5b26:	1e4b      	subs	r3, r1, #1
    5b28:	4199      	sbcs	r1, r3
    5b2a:	4332      	orrs	r2, r6
    5b2c:	4311      	orrs	r1, r2
    5b2e:	4663      	mov	r3, ip
    5b30:	0002      	movs	r2, r0
    5b32:	40da      	lsrs	r2, r3
    5b34:	1a69      	subs	r1, r5, r1
    5b36:	428d      	cmp	r5, r1
    5b38:	419b      	sbcs	r3, r3
    5b3a:	000d      	movs	r5, r1
    5b3c:	1aba      	subs	r2, r7, r2
    5b3e:	425b      	negs	r3, r3
    5b40:	1ad7      	subs	r7, r2, r3
    5b42:	023b      	lsls	r3, r7, #8
    5b44:	d535      	bpl.n	5bb2 <__aeabi_dsub+0x182>
    5b46:	027a      	lsls	r2, r7, #9
    5b48:	0a53      	lsrs	r3, r2, #9
    5b4a:	4698      	mov	r8, r3
    5b4c:	4643      	mov	r3, r8
    5b4e:	2b00      	cmp	r3, #0
    5b50:	d100      	bne.n	5b54 <__aeabi_dsub+0x124>
    5b52:	e0c4      	b.n	5cde <__aeabi_dsub+0x2ae>
    5b54:	4640      	mov	r0, r8
    5b56:	f000 fd35 	bl	65c4 <__clzsi2>
    5b5a:	0003      	movs	r3, r0
    5b5c:	3b08      	subs	r3, #8
    5b5e:	2b1f      	cmp	r3, #31
    5b60:	dd00      	ble.n	5b64 <__aeabi_dsub+0x134>
    5b62:	e0c5      	b.n	5cf0 <__aeabi_dsub+0x2c0>
    5b64:	2220      	movs	r2, #32
    5b66:	0029      	movs	r1, r5
    5b68:	1ad2      	subs	r2, r2, r3
    5b6a:	4647      	mov	r7, r8
    5b6c:	40d1      	lsrs	r1, r2
    5b6e:	409f      	lsls	r7, r3
    5b70:	000a      	movs	r2, r1
    5b72:	409d      	lsls	r5, r3
    5b74:	433a      	orrs	r2, r7
    5b76:	429c      	cmp	r4, r3
    5b78:	dd00      	ble.n	5b7c <__aeabi_dsub+0x14c>
    5b7a:	e0c0      	b.n	5cfe <__aeabi_dsub+0x2ce>
    5b7c:	1b1c      	subs	r4, r3, r4
    5b7e:	1c63      	adds	r3, r4, #1
    5b80:	2b1f      	cmp	r3, #31
    5b82:	dd00      	ble.n	5b86 <__aeabi_dsub+0x156>
    5b84:	e0e4      	b.n	5d50 <__aeabi_dsub+0x320>
    5b86:	2120      	movs	r1, #32
    5b88:	0014      	movs	r4, r2
    5b8a:	0028      	movs	r0, r5
    5b8c:	1ac9      	subs	r1, r1, r3
    5b8e:	40d8      	lsrs	r0, r3
    5b90:	408c      	lsls	r4, r1
    5b92:	408d      	lsls	r5, r1
    5b94:	4304      	orrs	r4, r0
    5b96:	40da      	lsrs	r2, r3
    5b98:	1e68      	subs	r0, r5, #1
    5b9a:	4185      	sbcs	r5, r0
    5b9c:	0017      	movs	r7, r2
    5b9e:	4325      	orrs	r5, r4
    5ba0:	2400      	movs	r4, #0
    5ba2:	e771      	b.n	5a88 <__aeabi_dsub+0x58>
    5ba4:	4642      	mov	r2, r8
    5ba6:	4663      	mov	r3, ip
    5ba8:	431a      	orrs	r2, r3
    5baa:	d100      	bne.n	5bae <__aeabi_dsub+0x17e>
    5bac:	e24c      	b.n	6048 <__aeabi_dsub+0x618>
    5bae:	4667      	mov	r7, ip
    5bb0:	4645      	mov	r5, r8
    5bb2:	076b      	lsls	r3, r5, #29
    5bb4:	d000      	beq.n	5bb8 <__aeabi_dsub+0x188>
    5bb6:	e769      	b.n	5a8c <__aeabi_dsub+0x5c>
    5bb8:	2301      	movs	r3, #1
    5bba:	4651      	mov	r1, sl
    5bbc:	0778      	lsls	r0, r7, #29
    5bbe:	08ed      	lsrs	r5, r5, #3
    5bc0:	08fa      	lsrs	r2, r7, #3
    5bc2:	400b      	ands	r3, r1
    5bc4:	4305      	orrs	r5, r0
    5bc6:	4973      	ldr	r1, [pc, #460]	; (5d94 <__aeabi_dsub+0x364>)
    5bc8:	428c      	cmp	r4, r1
    5bca:	d038      	beq.n	5c3e <__aeabi_dsub+0x20e>
    5bcc:	0312      	lsls	r2, r2, #12
    5bce:	0564      	lsls	r4, r4, #21
    5bd0:	0b12      	lsrs	r2, r2, #12
    5bd2:	0d64      	lsrs	r4, r4, #21
    5bd4:	e779      	b.n	5aca <__aeabi_dsub+0x9a>
    5bd6:	2e00      	cmp	r6, #0
    5bd8:	dc00      	bgt.n	5bdc <__aeabi_dsub+0x1ac>
    5bda:	e09a      	b.n	5d12 <__aeabi_dsub+0x2e2>
    5bdc:	2a00      	cmp	r2, #0
    5bde:	d047      	beq.n	5c70 <__aeabi_dsub+0x240>
    5be0:	4a6c      	ldr	r2, [pc, #432]	; (5d94 <__aeabi_dsub+0x364>)
    5be2:	4294      	cmp	r4, r2
    5be4:	d100      	bne.n	5be8 <__aeabi_dsub+0x1b8>
    5be6:	e74f      	b.n	5a88 <__aeabi_dsub+0x58>
    5be8:	2280      	movs	r2, #128	; 0x80
    5bea:	0412      	lsls	r2, r2, #16
    5bec:	4310      	orrs	r0, r2
    5bee:	4662      	mov	r2, ip
    5bf0:	2a38      	cmp	r2, #56	; 0x38
    5bf2:	dc00      	bgt.n	5bf6 <__aeabi_dsub+0x1c6>
    5bf4:	e108      	b.n	5e08 <__aeabi_dsub+0x3d8>
    5bf6:	4301      	orrs	r1, r0
    5bf8:	1e48      	subs	r0, r1, #1
    5bfa:	4181      	sbcs	r1, r0
    5bfc:	2200      	movs	r2, #0
    5bfe:	b2c9      	uxtb	r1, r1
    5c00:	1949      	adds	r1, r1, r5
    5c02:	19d2      	adds	r2, r2, r7
    5c04:	42a9      	cmp	r1, r5
    5c06:	41bf      	sbcs	r7, r7
    5c08:	000d      	movs	r5, r1
    5c0a:	427f      	negs	r7, r7
    5c0c:	18bf      	adds	r7, r7, r2
    5c0e:	023a      	lsls	r2, r7, #8
    5c10:	d400      	bmi.n	5c14 <__aeabi_dsub+0x1e4>
    5c12:	e142      	b.n	5e9a <__aeabi_dsub+0x46a>
    5c14:	4a5f      	ldr	r2, [pc, #380]	; (5d94 <__aeabi_dsub+0x364>)
    5c16:	3401      	adds	r4, #1
    5c18:	4294      	cmp	r4, r2
    5c1a:	d100      	bne.n	5c1e <__aeabi_dsub+0x1ee>
    5c1c:	e14e      	b.n	5ebc <__aeabi_dsub+0x48c>
    5c1e:	2001      	movs	r0, #1
    5c20:	4a5d      	ldr	r2, [pc, #372]	; (5d98 <__aeabi_dsub+0x368>)
    5c22:	0869      	lsrs	r1, r5, #1
    5c24:	403a      	ands	r2, r7
    5c26:	4028      	ands	r0, r5
    5c28:	4308      	orrs	r0, r1
    5c2a:	07d5      	lsls	r5, r2, #31
    5c2c:	4305      	orrs	r5, r0
    5c2e:	0857      	lsrs	r7, r2, #1
    5c30:	469a      	mov	sl, r3
    5c32:	e729      	b.n	5a88 <__aeabi_dsub+0x58>
    5c34:	0006      	movs	r6, r0
    5c36:	430e      	orrs	r6, r1
    5c38:	d000      	beq.n	5c3c <__aeabi_dsub+0x20c>
    5c3a:	e717      	b.n	5a6c <__aeabi_dsub+0x3c>
    5c3c:	e714      	b.n	5a68 <__aeabi_dsub+0x38>
    5c3e:	0029      	movs	r1, r5
    5c40:	4311      	orrs	r1, r2
    5c42:	d100      	bne.n	5c46 <__aeabi_dsub+0x216>
    5c44:	e1f9      	b.n	603a <__aeabi_dsub+0x60a>
    5c46:	2180      	movs	r1, #128	; 0x80
    5c48:	0309      	lsls	r1, r1, #12
    5c4a:	430a      	orrs	r2, r1
    5c4c:	0312      	lsls	r2, r2, #12
    5c4e:	0b12      	lsrs	r2, r2, #12
    5c50:	e73b      	b.n	5aca <__aeabi_dsub+0x9a>
    5c52:	2301      	movs	r3, #1
    5c54:	425b      	negs	r3, r3
    5c56:	4698      	mov	r8, r3
    5c58:	44c4      	add	ip, r8
    5c5a:	4663      	mov	r3, ip
    5c5c:	2b00      	cmp	r3, #0
    5c5e:	d172      	bne.n	5d46 <__aeabi_dsub+0x316>
    5c60:	1a69      	subs	r1, r5, r1
    5c62:	428d      	cmp	r5, r1
    5c64:	419b      	sbcs	r3, r3
    5c66:	1a3f      	subs	r7, r7, r0
    5c68:	425b      	negs	r3, r3
    5c6a:	1aff      	subs	r7, r7, r3
    5c6c:	000d      	movs	r5, r1
    5c6e:	e768      	b.n	5b42 <__aeabi_dsub+0x112>
    5c70:	0002      	movs	r2, r0
    5c72:	430a      	orrs	r2, r1
    5c74:	d100      	bne.n	5c78 <__aeabi_dsub+0x248>
    5c76:	e707      	b.n	5a88 <__aeabi_dsub+0x58>
    5c78:	2201      	movs	r2, #1
    5c7a:	4252      	negs	r2, r2
    5c7c:	4690      	mov	r8, r2
    5c7e:	44c4      	add	ip, r8
    5c80:	4662      	mov	r2, ip
    5c82:	2a00      	cmp	r2, #0
    5c84:	d000      	beq.n	5c88 <__aeabi_dsub+0x258>
    5c86:	e0e6      	b.n	5e56 <__aeabi_dsub+0x426>
    5c88:	1869      	adds	r1, r5, r1
    5c8a:	42a9      	cmp	r1, r5
    5c8c:	41b6      	sbcs	r6, r6
    5c8e:	183f      	adds	r7, r7, r0
    5c90:	4276      	negs	r6, r6
    5c92:	19f7      	adds	r7, r6, r7
    5c94:	000d      	movs	r5, r1
    5c96:	e7ba      	b.n	5c0e <__aeabi_dsub+0x1de>
    5c98:	2e00      	cmp	r6, #0
    5c9a:	d000      	beq.n	5c9e <__aeabi_dsub+0x26e>
    5c9c:	e080      	b.n	5da0 <__aeabi_dsub+0x370>
    5c9e:	1c62      	adds	r2, r4, #1
    5ca0:	0552      	lsls	r2, r2, #21
    5ca2:	0d52      	lsrs	r2, r2, #21
    5ca4:	2a01      	cmp	r2, #1
    5ca6:	dc00      	bgt.n	5caa <__aeabi_dsub+0x27a>
    5ca8:	e0f9      	b.n	5e9e <__aeabi_dsub+0x46e>
    5caa:	1a6a      	subs	r2, r5, r1
    5cac:	4691      	mov	r9, r2
    5cae:	454d      	cmp	r5, r9
    5cb0:	41b6      	sbcs	r6, r6
    5cb2:	1a3a      	subs	r2, r7, r0
    5cb4:	4276      	negs	r6, r6
    5cb6:	1b92      	subs	r2, r2, r6
    5cb8:	4690      	mov	r8, r2
    5cba:	0212      	lsls	r2, r2, #8
    5cbc:	d400      	bmi.n	5cc0 <__aeabi_dsub+0x290>
    5cbe:	e099      	b.n	5df4 <__aeabi_dsub+0x3c4>
    5cc0:	1b4d      	subs	r5, r1, r5
    5cc2:	42a9      	cmp	r1, r5
    5cc4:	4189      	sbcs	r1, r1
    5cc6:	1bc7      	subs	r7, r0, r7
    5cc8:	4249      	negs	r1, r1
    5cca:	1a7a      	subs	r2, r7, r1
    5ccc:	4690      	mov	r8, r2
    5cce:	469a      	mov	sl, r3
    5cd0:	e73c      	b.n	5b4c <__aeabi_dsub+0x11c>
    5cd2:	4652      	mov	r2, sl
    5cd4:	2301      	movs	r3, #1
    5cd6:	2500      	movs	r5, #0
    5cd8:	4013      	ands	r3, r2
    5cda:	2200      	movs	r2, #0
    5cdc:	e6f5      	b.n	5aca <__aeabi_dsub+0x9a>
    5cde:	0028      	movs	r0, r5
    5ce0:	f000 fc70 	bl	65c4 <__clzsi2>
    5ce4:	3020      	adds	r0, #32
    5ce6:	0003      	movs	r3, r0
    5ce8:	3b08      	subs	r3, #8
    5cea:	2b1f      	cmp	r3, #31
    5cec:	dc00      	bgt.n	5cf0 <__aeabi_dsub+0x2c0>
    5cee:	e739      	b.n	5b64 <__aeabi_dsub+0x134>
    5cf0:	002a      	movs	r2, r5
    5cf2:	3828      	subs	r0, #40	; 0x28
    5cf4:	4082      	lsls	r2, r0
    5cf6:	2500      	movs	r5, #0
    5cf8:	429c      	cmp	r4, r3
    5cfa:	dc00      	bgt.n	5cfe <__aeabi_dsub+0x2ce>
    5cfc:	e73e      	b.n	5b7c <__aeabi_dsub+0x14c>
    5cfe:	4f26      	ldr	r7, [pc, #152]	; (5d98 <__aeabi_dsub+0x368>)
    5d00:	1ae4      	subs	r4, r4, r3
    5d02:	4017      	ands	r7, r2
    5d04:	e6c0      	b.n	5a88 <__aeabi_dsub+0x58>
    5d06:	4301      	orrs	r1, r0
    5d08:	1e48      	subs	r0, r1, #1
    5d0a:	4181      	sbcs	r1, r0
    5d0c:	2200      	movs	r2, #0
    5d0e:	b2c9      	uxtb	r1, r1
    5d10:	e710      	b.n	5b34 <__aeabi_dsub+0x104>
    5d12:	2e00      	cmp	r6, #0
    5d14:	d000      	beq.n	5d18 <__aeabi_dsub+0x2e8>
    5d16:	e0f1      	b.n	5efc <__aeabi_dsub+0x4cc>
    5d18:	1c62      	adds	r2, r4, #1
    5d1a:	4694      	mov	ip, r2
    5d1c:	0552      	lsls	r2, r2, #21
    5d1e:	0d52      	lsrs	r2, r2, #21
    5d20:	2a01      	cmp	r2, #1
    5d22:	dc00      	bgt.n	5d26 <__aeabi_dsub+0x2f6>
    5d24:	e0a0      	b.n	5e68 <__aeabi_dsub+0x438>
    5d26:	4a1b      	ldr	r2, [pc, #108]	; (5d94 <__aeabi_dsub+0x364>)
    5d28:	4594      	cmp	ip, r2
    5d2a:	d100      	bne.n	5d2e <__aeabi_dsub+0x2fe>
    5d2c:	e0c5      	b.n	5eba <__aeabi_dsub+0x48a>
    5d2e:	1869      	adds	r1, r5, r1
    5d30:	42a9      	cmp	r1, r5
    5d32:	4192      	sbcs	r2, r2
    5d34:	183f      	adds	r7, r7, r0
    5d36:	4252      	negs	r2, r2
    5d38:	19d2      	adds	r2, r2, r7
    5d3a:	0849      	lsrs	r1, r1, #1
    5d3c:	07d5      	lsls	r5, r2, #31
    5d3e:	430d      	orrs	r5, r1
    5d40:	0857      	lsrs	r7, r2, #1
    5d42:	4664      	mov	r4, ip
    5d44:	e6a0      	b.n	5a88 <__aeabi_dsub+0x58>
    5d46:	4b13      	ldr	r3, [pc, #76]	; (5d94 <__aeabi_dsub+0x364>)
    5d48:	429c      	cmp	r4, r3
    5d4a:	d000      	beq.n	5d4e <__aeabi_dsub+0x31e>
    5d4c:	e6d9      	b.n	5b02 <__aeabi_dsub+0xd2>
    5d4e:	e69b      	b.n	5a88 <__aeabi_dsub+0x58>
    5d50:	0011      	movs	r1, r2
    5d52:	3c1f      	subs	r4, #31
    5d54:	40e1      	lsrs	r1, r4
    5d56:	000c      	movs	r4, r1
    5d58:	2b20      	cmp	r3, #32
    5d5a:	d100      	bne.n	5d5e <__aeabi_dsub+0x32e>
    5d5c:	e080      	b.n	5e60 <__aeabi_dsub+0x430>
    5d5e:	2140      	movs	r1, #64	; 0x40
    5d60:	1acb      	subs	r3, r1, r3
    5d62:	409a      	lsls	r2, r3
    5d64:	4315      	orrs	r5, r2
    5d66:	1e6a      	subs	r2, r5, #1
    5d68:	4195      	sbcs	r5, r2
    5d6a:	2700      	movs	r7, #0
    5d6c:	4325      	orrs	r5, r4
    5d6e:	2400      	movs	r4, #0
    5d70:	e71f      	b.n	5bb2 <__aeabi_dsub+0x182>
    5d72:	4663      	mov	r3, ip
    5d74:	0002      	movs	r2, r0
    5d76:	3b20      	subs	r3, #32
    5d78:	40da      	lsrs	r2, r3
    5d7a:	4663      	mov	r3, ip
    5d7c:	2b20      	cmp	r3, #32
    5d7e:	d071      	beq.n	5e64 <__aeabi_dsub+0x434>
    5d80:	2340      	movs	r3, #64	; 0x40
    5d82:	4666      	mov	r6, ip
    5d84:	1b9b      	subs	r3, r3, r6
    5d86:	4098      	lsls	r0, r3
    5d88:	4301      	orrs	r1, r0
    5d8a:	1e48      	subs	r0, r1, #1
    5d8c:	4181      	sbcs	r1, r0
    5d8e:	4311      	orrs	r1, r2
    5d90:	2200      	movs	r2, #0
    5d92:	e6cf      	b.n	5b34 <__aeabi_dsub+0x104>
    5d94:	000007ff 	.word	0x000007ff
    5d98:	ff7fffff 	.word	0xff7fffff
    5d9c:	800fffff 	.word	0x800fffff
    5da0:	2c00      	cmp	r4, #0
    5da2:	d048      	beq.n	5e36 <__aeabi_dsub+0x406>
    5da4:	4cca      	ldr	r4, [pc, #808]	; (60d0 <__aeabi_dsub+0x6a0>)
    5da6:	42a2      	cmp	r2, r4
    5da8:	d100      	bne.n	5dac <__aeabi_dsub+0x37c>
    5daa:	e0a2      	b.n	5ef2 <__aeabi_dsub+0x4c2>
    5dac:	4274      	negs	r4, r6
    5dae:	46a1      	mov	r9, r4
    5db0:	2480      	movs	r4, #128	; 0x80
    5db2:	0424      	lsls	r4, r4, #16
    5db4:	4327      	orrs	r7, r4
    5db6:	464c      	mov	r4, r9
    5db8:	2c38      	cmp	r4, #56	; 0x38
    5dba:	dd00      	ble.n	5dbe <__aeabi_dsub+0x38e>
    5dbc:	e0db      	b.n	5f76 <__aeabi_dsub+0x546>
    5dbe:	2c1f      	cmp	r4, #31
    5dc0:	dd00      	ble.n	5dc4 <__aeabi_dsub+0x394>
    5dc2:	e144      	b.n	604e <__aeabi_dsub+0x61e>
    5dc4:	464e      	mov	r6, r9
    5dc6:	2420      	movs	r4, #32
    5dc8:	1ba4      	subs	r4, r4, r6
    5dca:	003e      	movs	r6, r7
    5dcc:	40a6      	lsls	r6, r4
    5dce:	46a2      	mov	sl, r4
    5dd0:	46b0      	mov	r8, r6
    5dd2:	464c      	mov	r4, r9
    5dd4:	002e      	movs	r6, r5
    5dd6:	40e6      	lsrs	r6, r4
    5dd8:	46b4      	mov	ip, r6
    5dda:	4646      	mov	r6, r8
    5ddc:	4664      	mov	r4, ip
    5dde:	4326      	orrs	r6, r4
    5de0:	4654      	mov	r4, sl
    5de2:	40a5      	lsls	r5, r4
    5de4:	1e6c      	subs	r4, r5, #1
    5de6:	41a5      	sbcs	r5, r4
    5de8:	0034      	movs	r4, r6
    5dea:	432c      	orrs	r4, r5
    5dec:	464d      	mov	r5, r9
    5dee:	40ef      	lsrs	r7, r5
    5df0:	1b0d      	subs	r5, r1, r4
    5df2:	e028      	b.n	5e46 <__aeabi_dsub+0x416>
    5df4:	464a      	mov	r2, r9
    5df6:	4643      	mov	r3, r8
    5df8:	464d      	mov	r5, r9
    5dfa:	431a      	orrs	r2, r3
    5dfc:	d000      	beq.n	5e00 <__aeabi_dsub+0x3d0>
    5dfe:	e6a5      	b.n	5b4c <__aeabi_dsub+0x11c>
    5e00:	2300      	movs	r3, #0
    5e02:	2400      	movs	r4, #0
    5e04:	2500      	movs	r5, #0
    5e06:	e6de      	b.n	5bc6 <__aeabi_dsub+0x196>
    5e08:	2a1f      	cmp	r2, #31
    5e0a:	dc5a      	bgt.n	5ec2 <__aeabi_dsub+0x492>
    5e0c:	4666      	mov	r6, ip
    5e0e:	2220      	movs	r2, #32
    5e10:	1b92      	subs	r2, r2, r6
    5e12:	0006      	movs	r6, r0
    5e14:	4096      	lsls	r6, r2
    5e16:	4691      	mov	r9, r2
    5e18:	46b0      	mov	r8, r6
    5e1a:	4662      	mov	r2, ip
    5e1c:	000e      	movs	r6, r1
    5e1e:	40d6      	lsrs	r6, r2
    5e20:	4642      	mov	r2, r8
    5e22:	4316      	orrs	r6, r2
    5e24:	464a      	mov	r2, r9
    5e26:	4091      	lsls	r1, r2
    5e28:	1e4a      	subs	r2, r1, #1
    5e2a:	4191      	sbcs	r1, r2
    5e2c:	0002      	movs	r2, r0
    5e2e:	4660      	mov	r0, ip
    5e30:	4331      	orrs	r1, r6
    5e32:	40c2      	lsrs	r2, r0
    5e34:	e6e4      	b.n	5c00 <__aeabi_dsub+0x1d0>
    5e36:	003c      	movs	r4, r7
    5e38:	432c      	orrs	r4, r5
    5e3a:	d05a      	beq.n	5ef2 <__aeabi_dsub+0x4c2>
    5e3c:	43f4      	mvns	r4, r6
    5e3e:	46a1      	mov	r9, r4
    5e40:	2c00      	cmp	r4, #0
    5e42:	d152      	bne.n	5eea <__aeabi_dsub+0x4ba>
    5e44:	1b4d      	subs	r5, r1, r5
    5e46:	42a9      	cmp	r1, r5
    5e48:	4189      	sbcs	r1, r1
    5e4a:	1bc7      	subs	r7, r0, r7
    5e4c:	4249      	negs	r1, r1
    5e4e:	1a7f      	subs	r7, r7, r1
    5e50:	0014      	movs	r4, r2
    5e52:	469a      	mov	sl, r3
    5e54:	e675      	b.n	5b42 <__aeabi_dsub+0x112>
    5e56:	4a9e      	ldr	r2, [pc, #632]	; (60d0 <__aeabi_dsub+0x6a0>)
    5e58:	4294      	cmp	r4, r2
    5e5a:	d000      	beq.n	5e5e <__aeabi_dsub+0x42e>
    5e5c:	e6c7      	b.n	5bee <__aeabi_dsub+0x1be>
    5e5e:	e613      	b.n	5a88 <__aeabi_dsub+0x58>
    5e60:	2200      	movs	r2, #0
    5e62:	e77f      	b.n	5d64 <__aeabi_dsub+0x334>
    5e64:	2000      	movs	r0, #0
    5e66:	e78f      	b.n	5d88 <__aeabi_dsub+0x358>
    5e68:	2c00      	cmp	r4, #0
    5e6a:	d000      	beq.n	5e6e <__aeabi_dsub+0x43e>
    5e6c:	e0c8      	b.n	6000 <__aeabi_dsub+0x5d0>
    5e6e:	003b      	movs	r3, r7
    5e70:	432b      	orrs	r3, r5
    5e72:	d100      	bne.n	5e76 <__aeabi_dsub+0x446>
    5e74:	e10f      	b.n	6096 <__aeabi_dsub+0x666>
    5e76:	0003      	movs	r3, r0
    5e78:	430b      	orrs	r3, r1
    5e7a:	d100      	bne.n	5e7e <__aeabi_dsub+0x44e>
    5e7c:	e604      	b.n	5a88 <__aeabi_dsub+0x58>
    5e7e:	1869      	adds	r1, r5, r1
    5e80:	42a9      	cmp	r1, r5
    5e82:	419b      	sbcs	r3, r3
    5e84:	183f      	adds	r7, r7, r0
    5e86:	425b      	negs	r3, r3
    5e88:	19df      	adds	r7, r3, r7
    5e8a:	023b      	lsls	r3, r7, #8
    5e8c:	d400      	bmi.n	5e90 <__aeabi_dsub+0x460>
    5e8e:	e11a      	b.n	60c6 <__aeabi_dsub+0x696>
    5e90:	4b90      	ldr	r3, [pc, #576]	; (60d4 <__aeabi_dsub+0x6a4>)
    5e92:	000d      	movs	r5, r1
    5e94:	401f      	ands	r7, r3
    5e96:	4664      	mov	r4, ip
    5e98:	e5f6      	b.n	5a88 <__aeabi_dsub+0x58>
    5e9a:	469a      	mov	sl, r3
    5e9c:	e689      	b.n	5bb2 <__aeabi_dsub+0x182>
    5e9e:	003a      	movs	r2, r7
    5ea0:	432a      	orrs	r2, r5
    5ea2:	2c00      	cmp	r4, #0
    5ea4:	d15c      	bne.n	5f60 <__aeabi_dsub+0x530>
    5ea6:	2a00      	cmp	r2, #0
    5ea8:	d175      	bne.n	5f96 <__aeabi_dsub+0x566>
    5eaa:	0002      	movs	r2, r0
    5eac:	430a      	orrs	r2, r1
    5eae:	d100      	bne.n	5eb2 <__aeabi_dsub+0x482>
    5eb0:	e0ca      	b.n	6048 <__aeabi_dsub+0x618>
    5eb2:	0007      	movs	r7, r0
    5eb4:	000d      	movs	r5, r1
    5eb6:	469a      	mov	sl, r3
    5eb8:	e5e6      	b.n	5a88 <__aeabi_dsub+0x58>
    5eba:	4664      	mov	r4, ip
    5ebc:	2200      	movs	r2, #0
    5ebe:	2500      	movs	r5, #0
    5ec0:	e681      	b.n	5bc6 <__aeabi_dsub+0x196>
    5ec2:	4662      	mov	r2, ip
    5ec4:	0006      	movs	r6, r0
    5ec6:	3a20      	subs	r2, #32
    5ec8:	40d6      	lsrs	r6, r2
    5eca:	4662      	mov	r2, ip
    5ecc:	46b0      	mov	r8, r6
    5ece:	2a20      	cmp	r2, #32
    5ed0:	d100      	bne.n	5ed4 <__aeabi_dsub+0x4a4>
    5ed2:	e0b7      	b.n	6044 <__aeabi_dsub+0x614>
    5ed4:	2240      	movs	r2, #64	; 0x40
    5ed6:	4666      	mov	r6, ip
    5ed8:	1b92      	subs	r2, r2, r6
    5eda:	4090      	lsls	r0, r2
    5edc:	4301      	orrs	r1, r0
    5ede:	4642      	mov	r2, r8
    5ee0:	1e48      	subs	r0, r1, #1
    5ee2:	4181      	sbcs	r1, r0
    5ee4:	4311      	orrs	r1, r2
    5ee6:	2200      	movs	r2, #0
    5ee8:	e68a      	b.n	5c00 <__aeabi_dsub+0x1d0>
    5eea:	4c79      	ldr	r4, [pc, #484]	; (60d0 <__aeabi_dsub+0x6a0>)
    5eec:	42a2      	cmp	r2, r4
    5eee:	d000      	beq.n	5ef2 <__aeabi_dsub+0x4c2>
    5ef0:	e761      	b.n	5db6 <__aeabi_dsub+0x386>
    5ef2:	0007      	movs	r7, r0
    5ef4:	000d      	movs	r5, r1
    5ef6:	0014      	movs	r4, r2
    5ef8:	469a      	mov	sl, r3
    5efa:	e5c5      	b.n	5a88 <__aeabi_dsub+0x58>
    5efc:	2c00      	cmp	r4, #0
    5efe:	d141      	bne.n	5f84 <__aeabi_dsub+0x554>
    5f00:	003c      	movs	r4, r7
    5f02:	432c      	orrs	r4, r5
    5f04:	d078      	beq.n	5ff8 <__aeabi_dsub+0x5c8>
    5f06:	43f4      	mvns	r4, r6
    5f08:	46a1      	mov	r9, r4
    5f0a:	2c00      	cmp	r4, #0
    5f0c:	d020      	beq.n	5f50 <__aeabi_dsub+0x520>
    5f0e:	4c70      	ldr	r4, [pc, #448]	; (60d0 <__aeabi_dsub+0x6a0>)
    5f10:	42a2      	cmp	r2, r4
    5f12:	d071      	beq.n	5ff8 <__aeabi_dsub+0x5c8>
    5f14:	464c      	mov	r4, r9
    5f16:	2c38      	cmp	r4, #56	; 0x38
    5f18:	dd00      	ble.n	5f1c <__aeabi_dsub+0x4ec>
    5f1a:	e0b2      	b.n	6082 <__aeabi_dsub+0x652>
    5f1c:	2c1f      	cmp	r4, #31
    5f1e:	dd00      	ble.n	5f22 <__aeabi_dsub+0x4f2>
    5f20:	e0bc      	b.n	609c <__aeabi_dsub+0x66c>
    5f22:	2620      	movs	r6, #32
    5f24:	1b34      	subs	r4, r6, r4
    5f26:	46a2      	mov	sl, r4
    5f28:	003c      	movs	r4, r7
    5f2a:	4656      	mov	r6, sl
    5f2c:	40b4      	lsls	r4, r6
    5f2e:	464e      	mov	r6, r9
    5f30:	46a0      	mov	r8, r4
    5f32:	002c      	movs	r4, r5
    5f34:	40f4      	lsrs	r4, r6
    5f36:	46a4      	mov	ip, r4
    5f38:	4644      	mov	r4, r8
    5f3a:	4666      	mov	r6, ip
    5f3c:	4334      	orrs	r4, r6
    5f3e:	46a4      	mov	ip, r4
    5f40:	4654      	mov	r4, sl
    5f42:	40a5      	lsls	r5, r4
    5f44:	4664      	mov	r4, ip
    5f46:	1e6e      	subs	r6, r5, #1
    5f48:	41b5      	sbcs	r5, r6
    5f4a:	4325      	orrs	r5, r4
    5f4c:	464c      	mov	r4, r9
    5f4e:	40e7      	lsrs	r7, r4
    5f50:	186d      	adds	r5, r5, r1
    5f52:	428d      	cmp	r5, r1
    5f54:	4189      	sbcs	r1, r1
    5f56:	183f      	adds	r7, r7, r0
    5f58:	4249      	negs	r1, r1
    5f5a:	19cf      	adds	r7, r1, r7
    5f5c:	0014      	movs	r4, r2
    5f5e:	e656      	b.n	5c0e <__aeabi_dsub+0x1de>
    5f60:	2a00      	cmp	r2, #0
    5f62:	d12f      	bne.n	5fc4 <__aeabi_dsub+0x594>
    5f64:	0002      	movs	r2, r0
    5f66:	430a      	orrs	r2, r1
    5f68:	d100      	bne.n	5f6c <__aeabi_dsub+0x53c>
    5f6a:	e084      	b.n	6076 <__aeabi_dsub+0x646>
    5f6c:	0007      	movs	r7, r0
    5f6e:	000d      	movs	r5, r1
    5f70:	469a      	mov	sl, r3
    5f72:	4c57      	ldr	r4, [pc, #348]	; (60d0 <__aeabi_dsub+0x6a0>)
    5f74:	e588      	b.n	5a88 <__aeabi_dsub+0x58>
    5f76:	433d      	orrs	r5, r7
    5f78:	1e6f      	subs	r7, r5, #1
    5f7a:	41bd      	sbcs	r5, r7
    5f7c:	b2ec      	uxtb	r4, r5
    5f7e:	2700      	movs	r7, #0
    5f80:	1b0d      	subs	r5, r1, r4
    5f82:	e760      	b.n	5e46 <__aeabi_dsub+0x416>
    5f84:	4c52      	ldr	r4, [pc, #328]	; (60d0 <__aeabi_dsub+0x6a0>)
    5f86:	42a2      	cmp	r2, r4
    5f88:	d036      	beq.n	5ff8 <__aeabi_dsub+0x5c8>
    5f8a:	4274      	negs	r4, r6
    5f8c:	2680      	movs	r6, #128	; 0x80
    5f8e:	0436      	lsls	r6, r6, #16
    5f90:	46a1      	mov	r9, r4
    5f92:	4337      	orrs	r7, r6
    5f94:	e7be      	b.n	5f14 <__aeabi_dsub+0x4e4>
    5f96:	0002      	movs	r2, r0
    5f98:	430a      	orrs	r2, r1
    5f9a:	d100      	bne.n	5f9e <__aeabi_dsub+0x56e>
    5f9c:	e574      	b.n	5a88 <__aeabi_dsub+0x58>
    5f9e:	1a6a      	subs	r2, r5, r1
    5fa0:	4690      	mov	r8, r2
    5fa2:	4545      	cmp	r5, r8
    5fa4:	41b6      	sbcs	r6, r6
    5fa6:	1a3a      	subs	r2, r7, r0
    5fa8:	4276      	negs	r6, r6
    5faa:	1b92      	subs	r2, r2, r6
    5fac:	4694      	mov	ip, r2
    5fae:	0212      	lsls	r2, r2, #8
    5fb0:	d400      	bmi.n	5fb4 <__aeabi_dsub+0x584>
    5fb2:	e5f7      	b.n	5ba4 <__aeabi_dsub+0x174>
    5fb4:	1b4d      	subs	r5, r1, r5
    5fb6:	42a9      	cmp	r1, r5
    5fb8:	4189      	sbcs	r1, r1
    5fba:	1bc7      	subs	r7, r0, r7
    5fbc:	4249      	negs	r1, r1
    5fbe:	1a7f      	subs	r7, r7, r1
    5fc0:	469a      	mov	sl, r3
    5fc2:	e561      	b.n	5a88 <__aeabi_dsub+0x58>
    5fc4:	0002      	movs	r2, r0
    5fc6:	430a      	orrs	r2, r1
    5fc8:	d03a      	beq.n	6040 <__aeabi_dsub+0x610>
    5fca:	08ed      	lsrs	r5, r5, #3
    5fcc:	077c      	lsls	r4, r7, #29
    5fce:	432c      	orrs	r4, r5
    5fd0:	2580      	movs	r5, #128	; 0x80
    5fd2:	08fa      	lsrs	r2, r7, #3
    5fd4:	032d      	lsls	r5, r5, #12
    5fd6:	422a      	tst	r2, r5
    5fd8:	d008      	beq.n	5fec <__aeabi_dsub+0x5bc>
    5fda:	08c7      	lsrs	r7, r0, #3
    5fdc:	422f      	tst	r7, r5
    5fde:	d105      	bne.n	5fec <__aeabi_dsub+0x5bc>
    5fe0:	0745      	lsls	r5, r0, #29
    5fe2:	002c      	movs	r4, r5
    5fe4:	003a      	movs	r2, r7
    5fe6:	469a      	mov	sl, r3
    5fe8:	08c9      	lsrs	r1, r1, #3
    5fea:	430c      	orrs	r4, r1
    5fec:	0f67      	lsrs	r7, r4, #29
    5fee:	00d2      	lsls	r2, r2, #3
    5ff0:	00e5      	lsls	r5, r4, #3
    5ff2:	4317      	orrs	r7, r2
    5ff4:	4c36      	ldr	r4, [pc, #216]	; (60d0 <__aeabi_dsub+0x6a0>)
    5ff6:	e547      	b.n	5a88 <__aeabi_dsub+0x58>
    5ff8:	0007      	movs	r7, r0
    5ffa:	000d      	movs	r5, r1
    5ffc:	0014      	movs	r4, r2
    5ffe:	e543      	b.n	5a88 <__aeabi_dsub+0x58>
    6000:	003a      	movs	r2, r7
    6002:	432a      	orrs	r2, r5
    6004:	d043      	beq.n	608e <__aeabi_dsub+0x65e>
    6006:	0002      	movs	r2, r0
    6008:	430a      	orrs	r2, r1
    600a:	d019      	beq.n	6040 <__aeabi_dsub+0x610>
    600c:	08ed      	lsrs	r5, r5, #3
    600e:	077c      	lsls	r4, r7, #29
    6010:	432c      	orrs	r4, r5
    6012:	2580      	movs	r5, #128	; 0x80
    6014:	08fa      	lsrs	r2, r7, #3
    6016:	032d      	lsls	r5, r5, #12
    6018:	422a      	tst	r2, r5
    601a:	d007      	beq.n	602c <__aeabi_dsub+0x5fc>
    601c:	08c6      	lsrs	r6, r0, #3
    601e:	422e      	tst	r6, r5
    6020:	d104      	bne.n	602c <__aeabi_dsub+0x5fc>
    6022:	0747      	lsls	r7, r0, #29
    6024:	003c      	movs	r4, r7
    6026:	0032      	movs	r2, r6
    6028:	08c9      	lsrs	r1, r1, #3
    602a:	430c      	orrs	r4, r1
    602c:	00d7      	lsls	r7, r2, #3
    602e:	0f62      	lsrs	r2, r4, #29
    6030:	00e5      	lsls	r5, r4, #3
    6032:	4317      	orrs	r7, r2
    6034:	469a      	mov	sl, r3
    6036:	4c26      	ldr	r4, [pc, #152]	; (60d0 <__aeabi_dsub+0x6a0>)
    6038:	e526      	b.n	5a88 <__aeabi_dsub+0x58>
    603a:	2200      	movs	r2, #0
    603c:	2500      	movs	r5, #0
    603e:	e544      	b.n	5aca <__aeabi_dsub+0x9a>
    6040:	4c23      	ldr	r4, [pc, #140]	; (60d0 <__aeabi_dsub+0x6a0>)
    6042:	e521      	b.n	5a88 <__aeabi_dsub+0x58>
    6044:	2000      	movs	r0, #0
    6046:	e749      	b.n	5edc <__aeabi_dsub+0x4ac>
    6048:	2300      	movs	r3, #0
    604a:	2500      	movs	r5, #0
    604c:	e5bb      	b.n	5bc6 <__aeabi_dsub+0x196>
    604e:	464c      	mov	r4, r9
    6050:	003e      	movs	r6, r7
    6052:	3c20      	subs	r4, #32
    6054:	40e6      	lsrs	r6, r4
    6056:	464c      	mov	r4, r9
    6058:	46b4      	mov	ip, r6
    605a:	2c20      	cmp	r4, #32
    605c:	d031      	beq.n	60c2 <__aeabi_dsub+0x692>
    605e:	2440      	movs	r4, #64	; 0x40
    6060:	464e      	mov	r6, r9
    6062:	1ba6      	subs	r6, r4, r6
    6064:	40b7      	lsls	r7, r6
    6066:	433d      	orrs	r5, r7
    6068:	1e6c      	subs	r4, r5, #1
    606a:	41a5      	sbcs	r5, r4
    606c:	4664      	mov	r4, ip
    606e:	432c      	orrs	r4, r5
    6070:	2700      	movs	r7, #0
    6072:	1b0d      	subs	r5, r1, r4
    6074:	e6e7      	b.n	5e46 <__aeabi_dsub+0x416>
    6076:	2280      	movs	r2, #128	; 0x80
    6078:	2300      	movs	r3, #0
    607a:	0312      	lsls	r2, r2, #12
    607c:	4c14      	ldr	r4, [pc, #80]	; (60d0 <__aeabi_dsub+0x6a0>)
    607e:	2500      	movs	r5, #0
    6080:	e5a1      	b.n	5bc6 <__aeabi_dsub+0x196>
    6082:	433d      	orrs	r5, r7
    6084:	1e6f      	subs	r7, r5, #1
    6086:	41bd      	sbcs	r5, r7
    6088:	2700      	movs	r7, #0
    608a:	b2ed      	uxtb	r5, r5
    608c:	e760      	b.n	5f50 <__aeabi_dsub+0x520>
    608e:	0007      	movs	r7, r0
    6090:	000d      	movs	r5, r1
    6092:	4c0f      	ldr	r4, [pc, #60]	; (60d0 <__aeabi_dsub+0x6a0>)
    6094:	e4f8      	b.n	5a88 <__aeabi_dsub+0x58>
    6096:	0007      	movs	r7, r0
    6098:	000d      	movs	r5, r1
    609a:	e4f5      	b.n	5a88 <__aeabi_dsub+0x58>
    609c:	464e      	mov	r6, r9
    609e:	003c      	movs	r4, r7
    60a0:	3e20      	subs	r6, #32
    60a2:	40f4      	lsrs	r4, r6
    60a4:	46a0      	mov	r8, r4
    60a6:	464c      	mov	r4, r9
    60a8:	2c20      	cmp	r4, #32
    60aa:	d00e      	beq.n	60ca <__aeabi_dsub+0x69a>
    60ac:	2440      	movs	r4, #64	; 0x40
    60ae:	464e      	mov	r6, r9
    60b0:	1ba4      	subs	r4, r4, r6
    60b2:	40a7      	lsls	r7, r4
    60b4:	433d      	orrs	r5, r7
    60b6:	1e6f      	subs	r7, r5, #1
    60b8:	41bd      	sbcs	r5, r7
    60ba:	4644      	mov	r4, r8
    60bc:	2700      	movs	r7, #0
    60be:	4325      	orrs	r5, r4
    60c0:	e746      	b.n	5f50 <__aeabi_dsub+0x520>
    60c2:	2700      	movs	r7, #0
    60c4:	e7cf      	b.n	6066 <__aeabi_dsub+0x636>
    60c6:	000d      	movs	r5, r1
    60c8:	e573      	b.n	5bb2 <__aeabi_dsub+0x182>
    60ca:	2700      	movs	r7, #0
    60cc:	e7f2      	b.n	60b4 <__aeabi_dsub+0x684>
    60ce:	46c0      	nop			; (mov r8, r8)
    60d0:	000007ff 	.word	0x000007ff
    60d4:	ff7fffff 	.word	0xff7fffff

000060d8 <__aeabi_dcmpun>:
    60d8:	b570      	push	{r4, r5, r6, lr}
    60da:	4e0e      	ldr	r6, [pc, #56]	; (6114 <__aeabi_dcmpun+0x3c>)
    60dc:	030c      	lsls	r4, r1, #12
    60de:	031d      	lsls	r5, r3, #12
    60e0:	0049      	lsls	r1, r1, #1
    60e2:	005b      	lsls	r3, r3, #1
    60e4:	0b24      	lsrs	r4, r4, #12
    60e6:	0d49      	lsrs	r1, r1, #21
    60e8:	0b2d      	lsrs	r5, r5, #12
    60ea:	0d5b      	lsrs	r3, r3, #21
    60ec:	42b1      	cmp	r1, r6
    60ee:	d004      	beq.n	60fa <__aeabi_dcmpun+0x22>
    60f0:	4908      	ldr	r1, [pc, #32]	; (6114 <__aeabi_dcmpun+0x3c>)
    60f2:	2000      	movs	r0, #0
    60f4:	428b      	cmp	r3, r1
    60f6:	d008      	beq.n	610a <__aeabi_dcmpun+0x32>
    60f8:	bd70      	pop	{r4, r5, r6, pc}
    60fa:	4304      	orrs	r4, r0
    60fc:	2001      	movs	r0, #1
    60fe:	2c00      	cmp	r4, #0
    6100:	d1fa      	bne.n	60f8 <__aeabi_dcmpun+0x20>
    6102:	4904      	ldr	r1, [pc, #16]	; (6114 <__aeabi_dcmpun+0x3c>)
    6104:	2000      	movs	r0, #0
    6106:	428b      	cmp	r3, r1
    6108:	d1f6      	bne.n	60f8 <__aeabi_dcmpun+0x20>
    610a:	4315      	orrs	r5, r2
    610c:	0028      	movs	r0, r5
    610e:	1e45      	subs	r5, r0, #1
    6110:	41a8      	sbcs	r0, r5
    6112:	e7f1      	b.n	60f8 <__aeabi_dcmpun+0x20>
    6114:	000007ff 	.word	0x000007ff

00006118 <__aeabi_d2iz>:
    6118:	030b      	lsls	r3, r1, #12
    611a:	b530      	push	{r4, r5, lr}
    611c:	4d13      	ldr	r5, [pc, #76]	; (616c <__aeabi_d2iz+0x54>)
    611e:	0b1a      	lsrs	r2, r3, #12
    6120:	004b      	lsls	r3, r1, #1
    6122:	0d5b      	lsrs	r3, r3, #21
    6124:	0fc9      	lsrs	r1, r1, #31
    6126:	2400      	movs	r4, #0
    6128:	42ab      	cmp	r3, r5
    612a:	dd11      	ble.n	6150 <__aeabi_d2iz+0x38>
    612c:	4c10      	ldr	r4, [pc, #64]	; (6170 <__aeabi_d2iz+0x58>)
    612e:	42a3      	cmp	r3, r4
    6130:	dc10      	bgt.n	6154 <__aeabi_d2iz+0x3c>
    6132:	2480      	movs	r4, #128	; 0x80
    6134:	0364      	lsls	r4, r4, #13
    6136:	4322      	orrs	r2, r4
    6138:	4c0e      	ldr	r4, [pc, #56]	; (6174 <__aeabi_d2iz+0x5c>)
    613a:	1ae4      	subs	r4, r4, r3
    613c:	2c1f      	cmp	r4, #31
    613e:	dd0c      	ble.n	615a <__aeabi_d2iz+0x42>
    6140:	480d      	ldr	r0, [pc, #52]	; (6178 <__aeabi_d2iz+0x60>)
    6142:	1ac3      	subs	r3, r0, r3
    6144:	40da      	lsrs	r2, r3
    6146:	0013      	movs	r3, r2
    6148:	425c      	negs	r4, r3
    614a:	2900      	cmp	r1, #0
    614c:	d100      	bne.n	6150 <__aeabi_d2iz+0x38>
    614e:	001c      	movs	r4, r3
    6150:	0020      	movs	r0, r4
    6152:	bd30      	pop	{r4, r5, pc}
    6154:	4b09      	ldr	r3, [pc, #36]	; (617c <__aeabi_d2iz+0x64>)
    6156:	18cc      	adds	r4, r1, r3
    6158:	e7fa      	b.n	6150 <__aeabi_d2iz+0x38>
    615a:	40e0      	lsrs	r0, r4
    615c:	4c08      	ldr	r4, [pc, #32]	; (6180 <__aeabi_d2iz+0x68>)
    615e:	46a4      	mov	ip, r4
    6160:	4463      	add	r3, ip
    6162:	409a      	lsls	r2, r3
    6164:	0013      	movs	r3, r2
    6166:	4303      	orrs	r3, r0
    6168:	e7ee      	b.n	6148 <__aeabi_d2iz+0x30>
    616a:	46c0      	nop			; (mov r8, r8)
    616c:	000003fe 	.word	0x000003fe
    6170:	0000041d 	.word	0x0000041d
    6174:	00000433 	.word	0x00000433
    6178:	00000413 	.word	0x00000413
    617c:	7fffffff 	.word	0x7fffffff
    6180:	fffffbed 	.word	0xfffffbed

00006184 <__aeabi_i2d>:
    6184:	b570      	push	{r4, r5, r6, lr}
    6186:	2800      	cmp	r0, #0
    6188:	d030      	beq.n	61ec <__aeabi_i2d+0x68>
    618a:	17c3      	asrs	r3, r0, #31
    618c:	18c4      	adds	r4, r0, r3
    618e:	405c      	eors	r4, r3
    6190:	0fc5      	lsrs	r5, r0, #31
    6192:	0020      	movs	r0, r4
    6194:	f000 fa16 	bl	65c4 <__clzsi2>
    6198:	4b17      	ldr	r3, [pc, #92]	; (61f8 <__aeabi_i2d+0x74>)
    619a:	4a18      	ldr	r2, [pc, #96]	; (61fc <__aeabi_i2d+0x78>)
    619c:	1a1b      	subs	r3, r3, r0
    619e:	1ad2      	subs	r2, r2, r3
    61a0:	2a1f      	cmp	r2, #31
    61a2:	dd18      	ble.n	61d6 <__aeabi_i2d+0x52>
    61a4:	4a16      	ldr	r2, [pc, #88]	; (6200 <__aeabi_i2d+0x7c>)
    61a6:	1ad2      	subs	r2, r2, r3
    61a8:	4094      	lsls	r4, r2
    61aa:	2200      	movs	r2, #0
    61ac:	0324      	lsls	r4, r4, #12
    61ae:	055b      	lsls	r3, r3, #21
    61b0:	0b24      	lsrs	r4, r4, #12
    61b2:	0d5b      	lsrs	r3, r3, #21
    61b4:	2100      	movs	r1, #0
    61b6:	0010      	movs	r0, r2
    61b8:	0324      	lsls	r4, r4, #12
    61ba:	0d0a      	lsrs	r2, r1, #20
    61bc:	0512      	lsls	r2, r2, #20
    61be:	0b24      	lsrs	r4, r4, #12
    61c0:	4314      	orrs	r4, r2
    61c2:	4a10      	ldr	r2, [pc, #64]	; (6204 <__aeabi_i2d+0x80>)
    61c4:	051b      	lsls	r3, r3, #20
    61c6:	4014      	ands	r4, r2
    61c8:	431c      	orrs	r4, r3
    61ca:	0064      	lsls	r4, r4, #1
    61cc:	07ed      	lsls	r5, r5, #31
    61ce:	0864      	lsrs	r4, r4, #1
    61d0:	432c      	orrs	r4, r5
    61d2:	0021      	movs	r1, r4
    61d4:	bd70      	pop	{r4, r5, r6, pc}
    61d6:	0021      	movs	r1, r4
    61d8:	4091      	lsls	r1, r2
    61da:	000a      	movs	r2, r1
    61dc:	210b      	movs	r1, #11
    61de:	1a08      	subs	r0, r1, r0
    61e0:	40c4      	lsrs	r4, r0
    61e2:	055b      	lsls	r3, r3, #21
    61e4:	0324      	lsls	r4, r4, #12
    61e6:	0b24      	lsrs	r4, r4, #12
    61e8:	0d5b      	lsrs	r3, r3, #21
    61ea:	e7e3      	b.n	61b4 <__aeabi_i2d+0x30>
    61ec:	2500      	movs	r5, #0
    61ee:	2300      	movs	r3, #0
    61f0:	2400      	movs	r4, #0
    61f2:	2200      	movs	r2, #0
    61f4:	e7de      	b.n	61b4 <__aeabi_i2d+0x30>
    61f6:	46c0      	nop			; (mov r8, r8)
    61f8:	0000041e 	.word	0x0000041e
    61fc:	00000433 	.word	0x00000433
    6200:	00000413 	.word	0x00000413
    6204:	800fffff 	.word	0x800fffff

00006208 <__aeabi_ui2d>:
    6208:	b570      	push	{r4, r5, r6, lr}
    620a:	1e05      	subs	r5, r0, #0
    620c:	d028      	beq.n	6260 <__aeabi_ui2d+0x58>
    620e:	f000 f9d9 	bl	65c4 <__clzsi2>
    6212:	4b15      	ldr	r3, [pc, #84]	; (6268 <__aeabi_ui2d+0x60>)
    6214:	4a15      	ldr	r2, [pc, #84]	; (626c <__aeabi_ui2d+0x64>)
    6216:	1a1b      	subs	r3, r3, r0
    6218:	1ad2      	subs	r2, r2, r3
    621a:	2a1f      	cmp	r2, #31
    621c:	dd16      	ble.n	624c <__aeabi_ui2d+0x44>
    621e:	002c      	movs	r4, r5
    6220:	4a13      	ldr	r2, [pc, #76]	; (6270 <__aeabi_ui2d+0x68>)
    6222:	2500      	movs	r5, #0
    6224:	1ad2      	subs	r2, r2, r3
    6226:	4094      	lsls	r4, r2
    6228:	055a      	lsls	r2, r3, #21
    622a:	0324      	lsls	r4, r4, #12
    622c:	0b24      	lsrs	r4, r4, #12
    622e:	0d52      	lsrs	r2, r2, #21
    6230:	2100      	movs	r1, #0
    6232:	0324      	lsls	r4, r4, #12
    6234:	0d0b      	lsrs	r3, r1, #20
    6236:	0b24      	lsrs	r4, r4, #12
    6238:	051b      	lsls	r3, r3, #20
    623a:	4323      	orrs	r3, r4
    623c:	4c0d      	ldr	r4, [pc, #52]	; (6274 <__aeabi_ui2d+0x6c>)
    623e:	0512      	lsls	r2, r2, #20
    6240:	4023      	ands	r3, r4
    6242:	4313      	orrs	r3, r2
    6244:	005b      	lsls	r3, r3, #1
    6246:	0028      	movs	r0, r5
    6248:	0859      	lsrs	r1, r3, #1
    624a:	bd70      	pop	{r4, r5, r6, pc}
    624c:	210b      	movs	r1, #11
    624e:	002c      	movs	r4, r5
    6250:	1a08      	subs	r0, r1, r0
    6252:	40c4      	lsrs	r4, r0
    6254:	4095      	lsls	r5, r2
    6256:	0324      	lsls	r4, r4, #12
    6258:	055a      	lsls	r2, r3, #21
    625a:	0b24      	lsrs	r4, r4, #12
    625c:	0d52      	lsrs	r2, r2, #21
    625e:	e7e7      	b.n	6230 <__aeabi_ui2d+0x28>
    6260:	2200      	movs	r2, #0
    6262:	2400      	movs	r4, #0
    6264:	e7e4      	b.n	6230 <__aeabi_ui2d+0x28>
    6266:	46c0      	nop			; (mov r8, r8)
    6268:	0000041e 	.word	0x0000041e
    626c:	00000433 	.word	0x00000433
    6270:	00000413 	.word	0x00000413
    6274:	800fffff 	.word	0x800fffff

00006278 <__aeabi_f2d>:
    6278:	0042      	lsls	r2, r0, #1
    627a:	0e12      	lsrs	r2, r2, #24
    627c:	1c51      	adds	r1, r2, #1
    627e:	0243      	lsls	r3, r0, #9
    6280:	b2c9      	uxtb	r1, r1
    6282:	b570      	push	{r4, r5, r6, lr}
    6284:	0a5d      	lsrs	r5, r3, #9
    6286:	0fc4      	lsrs	r4, r0, #31
    6288:	2901      	cmp	r1, #1
    628a:	dd15      	ble.n	62b8 <__aeabi_f2d+0x40>
    628c:	21e0      	movs	r1, #224	; 0xe0
    628e:	0089      	lsls	r1, r1, #2
    6290:	468c      	mov	ip, r1
    6292:	076d      	lsls	r5, r5, #29
    6294:	0b1b      	lsrs	r3, r3, #12
    6296:	4462      	add	r2, ip
    6298:	2100      	movs	r1, #0
    629a:	0028      	movs	r0, r5
    629c:	0d0d      	lsrs	r5, r1, #20
    629e:	052d      	lsls	r5, r5, #20
    62a0:	432b      	orrs	r3, r5
    62a2:	4d1c      	ldr	r5, [pc, #112]	; (6314 <__aeabi_f2d+0x9c>)
    62a4:	0552      	lsls	r2, r2, #21
    62a6:	402b      	ands	r3, r5
    62a8:	0852      	lsrs	r2, r2, #1
    62aa:	4313      	orrs	r3, r2
    62ac:	005b      	lsls	r3, r3, #1
    62ae:	07e4      	lsls	r4, r4, #31
    62b0:	085b      	lsrs	r3, r3, #1
    62b2:	4323      	orrs	r3, r4
    62b4:	0019      	movs	r1, r3
    62b6:	bd70      	pop	{r4, r5, r6, pc}
    62b8:	2a00      	cmp	r2, #0
    62ba:	d115      	bne.n	62e8 <__aeabi_f2d+0x70>
    62bc:	2d00      	cmp	r5, #0
    62be:	d01f      	beq.n	6300 <__aeabi_f2d+0x88>
    62c0:	0028      	movs	r0, r5
    62c2:	f000 f97f 	bl	65c4 <__clzsi2>
    62c6:	280a      	cmp	r0, #10
    62c8:	dc1d      	bgt.n	6306 <__aeabi_f2d+0x8e>
    62ca:	230b      	movs	r3, #11
    62cc:	002a      	movs	r2, r5
    62ce:	1a1b      	subs	r3, r3, r0
    62d0:	40da      	lsrs	r2, r3
    62d2:	0013      	movs	r3, r2
    62d4:	0002      	movs	r2, r0
    62d6:	3215      	adds	r2, #21
    62d8:	4095      	lsls	r5, r2
    62da:	4a0f      	ldr	r2, [pc, #60]	; (6318 <__aeabi_f2d+0xa0>)
    62dc:	031b      	lsls	r3, r3, #12
    62de:	1a12      	subs	r2, r2, r0
    62e0:	0552      	lsls	r2, r2, #21
    62e2:	0b1b      	lsrs	r3, r3, #12
    62e4:	0d52      	lsrs	r2, r2, #21
    62e6:	e7d7      	b.n	6298 <__aeabi_f2d+0x20>
    62e8:	2d00      	cmp	r5, #0
    62ea:	d006      	beq.n	62fa <__aeabi_f2d+0x82>
    62ec:	2280      	movs	r2, #128	; 0x80
    62ee:	0b1b      	lsrs	r3, r3, #12
    62f0:	0312      	lsls	r2, r2, #12
    62f2:	4313      	orrs	r3, r2
    62f4:	076d      	lsls	r5, r5, #29
    62f6:	4a09      	ldr	r2, [pc, #36]	; (631c <__aeabi_f2d+0xa4>)
    62f8:	e7ce      	b.n	6298 <__aeabi_f2d+0x20>
    62fa:	4a08      	ldr	r2, [pc, #32]	; (631c <__aeabi_f2d+0xa4>)
    62fc:	2300      	movs	r3, #0
    62fe:	e7cb      	b.n	6298 <__aeabi_f2d+0x20>
    6300:	2200      	movs	r2, #0
    6302:	2300      	movs	r3, #0
    6304:	e7c8      	b.n	6298 <__aeabi_f2d+0x20>
    6306:	0003      	movs	r3, r0
    6308:	3b0b      	subs	r3, #11
    630a:	409d      	lsls	r5, r3
    630c:	002b      	movs	r3, r5
    630e:	2500      	movs	r5, #0
    6310:	e7e3      	b.n	62da <__aeabi_f2d+0x62>
    6312:	46c0      	nop			; (mov r8, r8)
    6314:	800fffff 	.word	0x800fffff
    6318:	00000389 	.word	0x00000389
    631c:	000007ff 	.word	0x000007ff

00006320 <__aeabi_d2f>:
    6320:	004b      	lsls	r3, r1, #1
    6322:	b570      	push	{r4, r5, r6, lr}
    6324:	0d5e      	lsrs	r6, r3, #21
    6326:	030c      	lsls	r4, r1, #12
    6328:	1c75      	adds	r5, r6, #1
    632a:	0a64      	lsrs	r4, r4, #9
    632c:	0f42      	lsrs	r2, r0, #29
    632e:	056d      	lsls	r5, r5, #21
    6330:	4322      	orrs	r2, r4
    6332:	0fc9      	lsrs	r1, r1, #31
    6334:	00c4      	lsls	r4, r0, #3
    6336:	0d6d      	lsrs	r5, r5, #21
    6338:	2d01      	cmp	r5, #1
    633a:	dd2a      	ble.n	6392 <__aeabi_d2f+0x72>
    633c:	4b3b      	ldr	r3, [pc, #236]	; (642c <__aeabi_d2f+0x10c>)
    633e:	18f3      	adds	r3, r6, r3
    6340:	2bfe      	cmp	r3, #254	; 0xfe
    6342:	dc1a      	bgt.n	637a <__aeabi_d2f+0x5a>
    6344:	2b00      	cmp	r3, #0
    6346:	dd42      	ble.n	63ce <__aeabi_d2f+0xae>
    6348:	0180      	lsls	r0, r0, #6
    634a:	1e45      	subs	r5, r0, #1
    634c:	41a8      	sbcs	r0, r5
    634e:	00d2      	lsls	r2, r2, #3
    6350:	4310      	orrs	r0, r2
    6352:	0f62      	lsrs	r2, r4, #29
    6354:	4302      	orrs	r2, r0
    6356:	0750      	lsls	r0, r2, #29
    6358:	d004      	beq.n	6364 <__aeabi_d2f+0x44>
    635a:	200f      	movs	r0, #15
    635c:	4010      	ands	r0, r2
    635e:	2804      	cmp	r0, #4
    6360:	d000      	beq.n	6364 <__aeabi_d2f+0x44>
    6362:	3204      	adds	r2, #4
    6364:	2080      	movs	r0, #128	; 0x80
    6366:	04c0      	lsls	r0, r0, #19
    6368:	4010      	ands	r0, r2
    636a:	d021      	beq.n	63b0 <__aeabi_d2f+0x90>
    636c:	3301      	adds	r3, #1
    636e:	2bff      	cmp	r3, #255	; 0xff
    6370:	d003      	beq.n	637a <__aeabi_d2f+0x5a>
    6372:	0192      	lsls	r2, r2, #6
    6374:	0a52      	lsrs	r2, r2, #9
    6376:	b2db      	uxtb	r3, r3
    6378:	e001      	b.n	637e <__aeabi_d2f+0x5e>
    637a:	23ff      	movs	r3, #255	; 0xff
    637c:	2200      	movs	r2, #0
    637e:	0252      	lsls	r2, r2, #9
    6380:	0a52      	lsrs	r2, r2, #9
    6382:	05db      	lsls	r3, r3, #23
    6384:	4313      	orrs	r3, r2
    6386:	005b      	lsls	r3, r3, #1
    6388:	07c9      	lsls	r1, r1, #31
    638a:	085b      	lsrs	r3, r3, #1
    638c:	430b      	orrs	r3, r1
    638e:	0018      	movs	r0, r3
    6390:	bd70      	pop	{r4, r5, r6, pc}
    6392:	2e00      	cmp	r6, #0
    6394:	d007      	beq.n	63a6 <__aeabi_d2f+0x86>
    6396:	4314      	orrs	r4, r2
    6398:	d0ef      	beq.n	637a <__aeabi_d2f+0x5a>
    639a:	2080      	movs	r0, #128	; 0x80
    639c:	00d2      	lsls	r2, r2, #3
    639e:	0480      	lsls	r0, r0, #18
    63a0:	4302      	orrs	r2, r0
    63a2:	23ff      	movs	r3, #255	; 0xff
    63a4:	e7d7      	b.n	6356 <__aeabi_d2f+0x36>
    63a6:	4322      	orrs	r2, r4
    63a8:	2300      	movs	r3, #0
    63aa:	2a00      	cmp	r2, #0
    63ac:	d003      	beq.n	63b6 <__aeabi_d2f+0x96>
    63ae:	2205      	movs	r2, #5
    63b0:	08d2      	lsrs	r2, r2, #3
    63b2:	2bff      	cmp	r3, #255	; 0xff
    63b4:	d003      	beq.n	63be <__aeabi_d2f+0x9e>
    63b6:	0252      	lsls	r2, r2, #9
    63b8:	0a52      	lsrs	r2, r2, #9
    63ba:	b2db      	uxtb	r3, r3
    63bc:	e7df      	b.n	637e <__aeabi_d2f+0x5e>
    63be:	2a00      	cmp	r2, #0
    63c0:	d032      	beq.n	6428 <__aeabi_d2f+0x108>
    63c2:	2080      	movs	r0, #128	; 0x80
    63c4:	03c0      	lsls	r0, r0, #15
    63c6:	4302      	orrs	r2, r0
    63c8:	0252      	lsls	r2, r2, #9
    63ca:	0a52      	lsrs	r2, r2, #9
    63cc:	e7d7      	b.n	637e <__aeabi_d2f+0x5e>
    63ce:	0018      	movs	r0, r3
    63d0:	3017      	adds	r0, #23
    63d2:	db14      	blt.n	63fe <__aeabi_d2f+0xde>
    63d4:	2080      	movs	r0, #128	; 0x80
    63d6:	0400      	lsls	r0, r0, #16
    63d8:	4302      	orrs	r2, r0
    63da:	201e      	movs	r0, #30
    63dc:	1ac0      	subs	r0, r0, r3
    63de:	281f      	cmp	r0, #31
    63e0:	dc0f      	bgt.n	6402 <__aeabi_d2f+0xe2>
    63e2:	0025      	movs	r5, r4
    63e4:	4b12      	ldr	r3, [pc, #72]	; (6430 <__aeabi_d2f+0x110>)
    63e6:	18f3      	adds	r3, r6, r3
    63e8:	409d      	lsls	r5, r3
    63ea:	1e6e      	subs	r6, r5, #1
    63ec:	41b5      	sbcs	r5, r6
    63ee:	409a      	lsls	r2, r3
    63f0:	002b      	movs	r3, r5
    63f2:	4313      	orrs	r3, r2
    63f4:	0022      	movs	r2, r4
    63f6:	40c2      	lsrs	r2, r0
    63f8:	431a      	orrs	r2, r3
    63fa:	2300      	movs	r3, #0
    63fc:	e7ab      	b.n	6356 <__aeabi_d2f+0x36>
    63fe:	2300      	movs	r3, #0
    6400:	e7d5      	b.n	63ae <__aeabi_d2f+0x8e>
    6402:	2502      	movs	r5, #2
    6404:	426d      	negs	r5, r5
    6406:	1aeb      	subs	r3, r5, r3
    6408:	0015      	movs	r5, r2
    640a:	40dd      	lsrs	r5, r3
    640c:	2820      	cmp	r0, #32
    640e:	d009      	beq.n	6424 <__aeabi_d2f+0x104>
    6410:	4b08      	ldr	r3, [pc, #32]	; (6434 <__aeabi_d2f+0x114>)
    6412:	18f3      	adds	r3, r6, r3
    6414:	409a      	lsls	r2, r3
    6416:	4314      	orrs	r4, r2
    6418:	1e62      	subs	r2, r4, #1
    641a:	4194      	sbcs	r4, r2
    641c:	0022      	movs	r2, r4
    641e:	2300      	movs	r3, #0
    6420:	432a      	orrs	r2, r5
    6422:	e798      	b.n	6356 <__aeabi_d2f+0x36>
    6424:	2200      	movs	r2, #0
    6426:	e7f6      	b.n	6416 <__aeabi_d2f+0xf6>
    6428:	2200      	movs	r2, #0
    642a:	e7a8      	b.n	637e <__aeabi_d2f+0x5e>
    642c:	fffffc80 	.word	0xfffffc80
    6430:	fffffc82 	.word	0xfffffc82
    6434:	fffffca2 	.word	0xfffffca2

00006438 <__aeabi_uidiv>:
    6438:	2200      	movs	r2, #0
    643a:	0843      	lsrs	r3, r0, #1
    643c:	428b      	cmp	r3, r1
    643e:	d374      	bcc.n	652a <__aeabi_uidiv+0xf2>
    6440:	0903      	lsrs	r3, r0, #4
    6442:	428b      	cmp	r3, r1
    6444:	d35f      	bcc.n	6506 <__aeabi_uidiv+0xce>
    6446:	0a03      	lsrs	r3, r0, #8
    6448:	428b      	cmp	r3, r1
    644a:	d344      	bcc.n	64d6 <__aeabi_uidiv+0x9e>
    644c:	0b03      	lsrs	r3, r0, #12
    644e:	428b      	cmp	r3, r1
    6450:	d328      	bcc.n	64a4 <__aeabi_uidiv+0x6c>
    6452:	0c03      	lsrs	r3, r0, #16
    6454:	428b      	cmp	r3, r1
    6456:	d30d      	bcc.n	6474 <__aeabi_uidiv+0x3c>
    6458:	22ff      	movs	r2, #255	; 0xff
    645a:	0209      	lsls	r1, r1, #8
    645c:	ba12      	rev	r2, r2
    645e:	0c03      	lsrs	r3, r0, #16
    6460:	428b      	cmp	r3, r1
    6462:	d302      	bcc.n	646a <__aeabi_uidiv+0x32>
    6464:	1212      	asrs	r2, r2, #8
    6466:	0209      	lsls	r1, r1, #8
    6468:	d065      	beq.n	6536 <__aeabi_uidiv+0xfe>
    646a:	0b03      	lsrs	r3, r0, #12
    646c:	428b      	cmp	r3, r1
    646e:	d319      	bcc.n	64a4 <__aeabi_uidiv+0x6c>
    6470:	e000      	b.n	6474 <__aeabi_uidiv+0x3c>
    6472:	0a09      	lsrs	r1, r1, #8
    6474:	0bc3      	lsrs	r3, r0, #15
    6476:	428b      	cmp	r3, r1
    6478:	d301      	bcc.n	647e <__aeabi_uidiv+0x46>
    647a:	03cb      	lsls	r3, r1, #15
    647c:	1ac0      	subs	r0, r0, r3
    647e:	4152      	adcs	r2, r2
    6480:	0b83      	lsrs	r3, r0, #14
    6482:	428b      	cmp	r3, r1
    6484:	d301      	bcc.n	648a <__aeabi_uidiv+0x52>
    6486:	038b      	lsls	r3, r1, #14
    6488:	1ac0      	subs	r0, r0, r3
    648a:	4152      	adcs	r2, r2
    648c:	0b43      	lsrs	r3, r0, #13
    648e:	428b      	cmp	r3, r1
    6490:	d301      	bcc.n	6496 <__aeabi_uidiv+0x5e>
    6492:	034b      	lsls	r3, r1, #13
    6494:	1ac0      	subs	r0, r0, r3
    6496:	4152      	adcs	r2, r2
    6498:	0b03      	lsrs	r3, r0, #12
    649a:	428b      	cmp	r3, r1
    649c:	d301      	bcc.n	64a2 <__aeabi_uidiv+0x6a>
    649e:	030b      	lsls	r3, r1, #12
    64a0:	1ac0      	subs	r0, r0, r3
    64a2:	4152      	adcs	r2, r2
    64a4:	0ac3      	lsrs	r3, r0, #11
    64a6:	428b      	cmp	r3, r1
    64a8:	d301      	bcc.n	64ae <__aeabi_uidiv+0x76>
    64aa:	02cb      	lsls	r3, r1, #11
    64ac:	1ac0      	subs	r0, r0, r3
    64ae:	4152      	adcs	r2, r2
    64b0:	0a83      	lsrs	r3, r0, #10
    64b2:	428b      	cmp	r3, r1
    64b4:	d301      	bcc.n	64ba <__aeabi_uidiv+0x82>
    64b6:	028b      	lsls	r3, r1, #10
    64b8:	1ac0      	subs	r0, r0, r3
    64ba:	4152      	adcs	r2, r2
    64bc:	0a43      	lsrs	r3, r0, #9
    64be:	428b      	cmp	r3, r1
    64c0:	d301      	bcc.n	64c6 <__aeabi_uidiv+0x8e>
    64c2:	024b      	lsls	r3, r1, #9
    64c4:	1ac0      	subs	r0, r0, r3
    64c6:	4152      	adcs	r2, r2
    64c8:	0a03      	lsrs	r3, r0, #8
    64ca:	428b      	cmp	r3, r1
    64cc:	d301      	bcc.n	64d2 <__aeabi_uidiv+0x9a>
    64ce:	020b      	lsls	r3, r1, #8
    64d0:	1ac0      	subs	r0, r0, r3
    64d2:	4152      	adcs	r2, r2
    64d4:	d2cd      	bcs.n	6472 <__aeabi_uidiv+0x3a>
    64d6:	09c3      	lsrs	r3, r0, #7
    64d8:	428b      	cmp	r3, r1
    64da:	d301      	bcc.n	64e0 <__aeabi_uidiv+0xa8>
    64dc:	01cb      	lsls	r3, r1, #7
    64de:	1ac0      	subs	r0, r0, r3
    64e0:	4152      	adcs	r2, r2
    64e2:	0983      	lsrs	r3, r0, #6
    64e4:	428b      	cmp	r3, r1
    64e6:	d301      	bcc.n	64ec <__aeabi_uidiv+0xb4>
    64e8:	018b      	lsls	r3, r1, #6
    64ea:	1ac0      	subs	r0, r0, r3
    64ec:	4152      	adcs	r2, r2
    64ee:	0943      	lsrs	r3, r0, #5
    64f0:	428b      	cmp	r3, r1
    64f2:	d301      	bcc.n	64f8 <__aeabi_uidiv+0xc0>
    64f4:	014b      	lsls	r3, r1, #5
    64f6:	1ac0      	subs	r0, r0, r3
    64f8:	4152      	adcs	r2, r2
    64fa:	0903      	lsrs	r3, r0, #4
    64fc:	428b      	cmp	r3, r1
    64fe:	d301      	bcc.n	6504 <__aeabi_uidiv+0xcc>
    6500:	010b      	lsls	r3, r1, #4
    6502:	1ac0      	subs	r0, r0, r3
    6504:	4152      	adcs	r2, r2
    6506:	08c3      	lsrs	r3, r0, #3
    6508:	428b      	cmp	r3, r1
    650a:	d301      	bcc.n	6510 <__aeabi_uidiv+0xd8>
    650c:	00cb      	lsls	r3, r1, #3
    650e:	1ac0      	subs	r0, r0, r3
    6510:	4152      	adcs	r2, r2
    6512:	0883      	lsrs	r3, r0, #2
    6514:	428b      	cmp	r3, r1
    6516:	d301      	bcc.n	651c <__aeabi_uidiv+0xe4>
    6518:	008b      	lsls	r3, r1, #2
    651a:	1ac0      	subs	r0, r0, r3
    651c:	4152      	adcs	r2, r2
    651e:	0843      	lsrs	r3, r0, #1
    6520:	428b      	cmp	r3, r1
    6522:	d301      	bcc.n	6528 <__aeabi_uidiv+0xf0>
    6524:	004b      	lsls	r3, r1, #1
    6526:	1ac0      	subs	r0, r0, r3
    6528:	4152      	adcs	r2, r2
    652a:	1a41      	subs	r1, r0, r1
    652c:	d200      	bcs.n	6530 <__aeabi_uidiv+0xf8>
    652e:	4601      	mov	r1, r0
    6530:	4152      	adcs	r2, r2
    6532:	4610      	mov	r0, r2
    6534:	4770      	bx	lr
    6536:	e7ff      	b.n	6538 <__aeabi_uidiv+0x100>
    6538:	b501      	push	{r0, lr}
    653a:	2000      	movs	r0, #0
    653c:	f000 f806 	bl	654c <__aeabi_idiv0>
    6540:	bd02      	pop	{r1, pc}
    6542:	46c0      	nop			; (mov r8, r8)

00006544 <__aeabi_uidivmod>:
    6544:	2900      	cmp	r1, #0
    6546:	d0f7      	beq.n	6538 <__aeabi_uidiv+0x100>
    6548:	e776      	b.n	6438 <__aeabi_uidiv>
    654a:	4770      	bx	lr

0000654c <__aeabi_idiv0>:
    654c:	4770      	bx	lr
    654e:	46c0      	nop			; (mov r8, r8)

00006550 <__aeabi_cfrcmple>:
    6550:	4684      	mov	ip, r0
    6552:	1c08      	adds	r0, r1, #0
    6554:	4661      	mov	r1, ip
    6556:	e7ff      	b.n	6558 <__aeabi_cfcmpeq>

00006558 <__aeabi_cfcmpeq>:
    6558:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    655a:	f000 f8bd 	bl	66d8 <__lesf2>
    655e:	2800      	cmp	r0, #0
    6560:	d401      	bmi.n	6566 <__aeabi_cfcmpeq+0xe>
    6562:	2100      	movs	r1, #0
    6564:	42c8      	cmn	r0, r1
    6566:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00006568 <__aeabi_fcmpeq>:
    6568:	b510      	push	{r4, lr}
    656a:	f000 f849 	bl	6600 <__eqsf2>
    656e:	4240      	negs	r0, r0
    6570:	3001      	adds	r0, #1
    6572:	bd10      	pop	{r4, pc}

00006574 <__aeabi_fcmplt>:
    6574:	b510      	push	{r4, lr}
    6576:	f000 f8af 	bl	66d8 <__lesf2>
    657a:	2800      	cmp	r0, #0
    657c:	db01      	blt.n	6582 <__aeabi_fcmplt+0xe>
    657e:	2000      	movs	r0, #0
    6580:	bd10      	pop	{r4, pc}
    6582:	2001      	movs	r0, #1
    6584:	bd10      	pop	{r4, pc}
    6586:	46c0      	nop			; (mov r8, r8)

00006588 <__aeabi_fcmple>:
    6588:	b510      	push	{r4, lr}
    658a:	f000 f8a5 	bl	66d8 <__lesf2>
    658e:	2800      	cmp	r0, #0
    6590:	dd01      	ble.n	6596 <__aeabi_fcmple+0xe>
    6592:	2000      	movs	r0, #0
    6594:	bd10      	pop	{r4, pc}
    6596:	2001      	movs	r0, #1
    6598:	bd10      	pop	{r4, pc}
    659a:	46c0      	nop			; (mov r8, r8)

0000659c <__aeabi_fcmpgt>:
    659c:	b510      	push	{r4, lr}
    659e:	f000 f857 	bl	6650 <__gesf2>
    65a2:	2800      	cmp	r0, #0
    65a4:	dc01      	bgt.n	65aa <__aeabi_fcmpgt+0xe>
    65a6:	2000      	movs	r0, #0
    65a8:	bd10      	pop	{r4, pc}
    65aa:	2001      	movs	r0, #1
    65ac:	bd10      	pop	{r4, pc}
    65ae:	46c0      	nop			; (mov r8, r8)

000065b0 <__aeabi_fcmpge>:
    65b0:	b510      	push	{r4, lr}
    65b2:	f000 f84d 	bl	6650 <__gesf2>
    65b6:	2800      	cmp	r0, #0
    65b8:	da01      	bge.n	65be <__aeabi_fcmpge+0xe>
    65ba:	2000      	movs	r0, #0
    65bc:	bd10      	pop	{r4, pc}
    65be:	2001      	movs	r0, #1
    65c0:	bd10      	pop	{r4, pc}
    65c2:	46c0      	nop			; (mov r8, r8)

000065c4 <__clzsi2>:
    65c4:	211c      	movs	r1, #28
    65c6:	2301      	movs	r3, #1
    65c8:	041b      	lsls	r3, r3, #16
    65ca:	4298      	cmp	r0, r3
    65cc:	d301      	bcc.n	65d2 <__clzsi2+0xe>
    65ce:	0c00      	lsrs	r0, r0, #16
    65d0:	3910      	subs	r1, #16
    65d2:	0a1b      	lsrs	r3, r3, #8
    65d4:	4298      	cmp	r0, r3
    65d6:	d301      	bcc.n	65dc <__clzsi2+0x18>
    65d8:	0a00      	lsrs	r0, r0, #8
    65da:	3908      	subs	r1, #8
    65dc:	091b      	lsrs	r3, r3, #4
    65de:	4298      	cmp	r0, r3
    65e0:	d301      	bcc.n	65e6 <__clzsi2+0x22>
    65e2:	0900      	lsrs	r0, r0, #4
    65e4:	3904      	subs	r1, #4
    65e6:	a202      	add	r2, pc, #8	; (adr r2, 65f0 <__clzsi2+0x2c>)
    65e8:	5c10      	ldrb	r0, [r2, r0]
    65ea:	1840      	adds	r0, r0, r1
    65ec:	4770      	bx	lr
    65ee:	46c0      	nop			; (mov r8, r8)
    65f0:	02020304 	.word	0x02020304
    65f4:	01010101 	.word	0x01010101
	...

00006600 <__eqsf2>:
    6600:	0243      	lsls	r3, r0, #9
    6602:	b570      	push	{r4, r5, r6, lr}
    6604:	0042      	lsls	r2, r0, #1
    6606:	004c      	lsls	r4, r1, #1
    6608:	0a5d      	lsrs	r5, r3, #9
    660a:	0fc3      	lsrs	r3, r0, #31
    660c:	0248      	lsls	r0, r1, #9
    660e:	0e12      	lsrs	r2, r2, #24
    6610:	0a46      	lsrs	r6, r0, #9
    6612:	0e24      	lsrs	r4, r4, #24
    6614:	0fc9      	lsrs	r1, r1, #31
    6616:	2aff      	cmp	r2, #255	; 0xff
    6618:	d00f      	beq.n	663a <__eqsf2+0x3a>
    661a:	2cff      	cmp	r4, #255	; 0xff
    661c:	d011      	beq.n	6642 <__eqsf2+0x42>
    661e:	2001      	movs	r0, #1
    6620:	42a2      	cmp	r2, r4
    6622:	d000      	beq.n	6626 <__eqsf2+0x26>
    6624:	bd70      	pop	{r4, r5, r6, pc}
    6626:	42b5      	cmp	r5, r6
    6628:	d1fc      	bne.n	6624 <__eqsf2+0x24>
    662a:	428b      	cmp	r3, r1
    662c:	d00d      	beq.n	664a <__eqsf2+0x4a>
    662e:	2a00      	cmp	r2, #0
    6630:	d1f8      	bne.n	6624 <__eqsf2+0x24>
    6632:	0028      	movs	r0, r5
    6634:	1e43      	subs	r3, r0, #1
    6636:	4198      	sbcs	r0, r3
    6638:	e7f4      	b.n	6624 <__eqsf2+0x24>
    663a:	2001      	movs	r0, #1
    663c:	2d00      	cmp	r5, #0
    663e:	d1f1      	bne.n	6624 <__eqsf2+0x24>
    6640:	e7eb      	b.n	661a <__eqsf2+0x1a>
    6642:	2001      	movs	r0, #1
    6644:	2e00      	cmp	r6, #0
    6646:	d1ed      	bne.n	6624 <__eqsf2+0x24>
    6648:	e7e9      	b.n	661e <__eqsf2+0x1e>
    664a:	2000      	movs	r0, #0
    664c:	e7ea      	b.n	6624 <__eqsf2+0x24>
    664e:	46c0      	nop			; (mov r8, r8)

00006650 <__gesf2>:
    6650:	0243      	lsls	r3, r0, #9
    6652:	b5f0      	push	{r4, r5, r6, r7, lr}
    6654:	0042      	lsls	r2, r0, #1
    6656:	0a5d      	lsrs	r5, r3, #9
    6658:	0fc3      	lsrs	r3, r0, #31
    665a:	0248      	lsls	r0, r1, #9
    665c:	0a44      	lsrs	r4, r0, #9
    665e:	0048      	lsls	r0, r1, #1
    6660:	0e12      	lsrs	r2, r2, #24
    6662:	0e00      	lsrs	r0, r0, #24
    6664:	0fc9      	lsrs	r1, r1, #31
    6666:	2aff      	cmp	r2, #255	; 0xff
    6668:	d01f      	beq.n	66aa <__gesf2+0x5a>
    666a:	28ff      	cmp	r0, #255	; 0xff
    666c:	d022      	beq.n	66b4 <__gesf2+0x64>
    666e:	2a00      	cmp	r2, #0
    6670:	d109      	bne.n	6686 <__gesf2+0x36>
    6672:	426e      	negs	r6, r5
    6674:	416e      	adcs	r6, r5
    6676:	2800      	cmp	r0, #0
    6678:	d10f      	bne.n	669a <__gesf2+0x4a>
    667a:	2c00      	cmp	r4, #0
    667c:	d10d      	bne.n	669a <__gesf2+0x4a>
    667e:	2000      	movs	r0, #0
    6680:	2d00      	cmp	r5, #0
    6682:	d009      	beq.n	6698 <__gesf2+0x48>
    6684:	e005      	b.n	6692 <__gesf2+0x42>
    6686:	2800      	cmp	r0, #0
    6688:	d101      	bne.n	668e <__gesf2+0x3e>
    668a:	2c00      	cmp	r4, #0
    668c:	d001      	beq.n	6692 <__gesf2+0x42>
    668e:	428b      	cmp	r3, r1
    6690:	d013      	beq.n	66ba <__gesf2+0x6a>
    6692:	4258      	negs	r0, r3
    6694:	2301      	movs	r3, #1
    6696:	4318      	orrs	r0, r3
    6698:	bdf0      	pop	{r4, r5, r6, r7, pc}
    669a:	2e00      	cmp	r6, #0
    669c:	d0f7      	beq.n	668e <__gesf2+0x3e>
    669e:	4248      	negs	r0, r1
    66a0:	4141      	adcs	r1, r0
    66a2:	2001      	movs	r0, #1
    66a4:	4249      	negs	r1, r1
    66a6:	4308      	orrs	r0, r1
    66a8:	e7f6      	b.n	6698 <__gesf2+0x48>
    66aa:	2d00      	cmp	r5, #0
    66ac:	d0dd      	beq.n	666a <__gesf2+0x1a>
    66ae:	2002      	movs	r0, #2
    66b0:	4240      	negs	r0, r0
    66b2:	e7f1      	b.n	6698 <__gesf2+0x48>
    66b4:	2c00      	cmp	r4, #0
    66b6:	d0da      	beq.n	666e <__gesf2+0x1e>
    66b8:	e7f9      	b.n	66ae <__gesf2+0x5e>
    66ba:	4282      	cmp	r2, r0
    66bc:	dce9      	bgt.n	6692 <__gesf2+0x42>
    66be:	db04      	blt.n	66ca <__gesf2+0x7a>
    66c0:	42a5      	cmp	r5, r4
    66c2:	d8e6      	bhi.n	6692 <__gesf2+0x42>
    66c4:	2000      	movs	r0, #0
    66c6:	42a5      	cmp	r5, r4
    66c8:	d2e6      	bcs.n	6698 <__gesf2+0x48>
    66ca:	4258      	negs	r0, r3
    66cc:	4143      	adcs	r3, r0
    66ce:	2001      	movs	r0, #1
    66d0:	425b      	negs	r3, r3
    66d2:	4318      	orrs	r0, r3
    66d4:	e7e0      	b.n	6698 <__gesf2+0x48>
    66d6:	46c0      	nop			; (mov r8, r8)

000066d8 <__lesf2>:
    66d8:	0243      	lsls	r3, r0, #9
    66da:	b5f0      	push	{r4, r5, r6, r7, lr}
    66dc:	0042      	lsls	r2, r0, #1
    66de:	004c      	lsls	r4, r1, #1
    66e0:	0a5e      	lsrs	r6, r3, #9
    66e2:	0fc3      	lsrs	r3, r0, #31
    66e4:	0248      	lsls	r0, r1, #9
    66e6:	0e12      	lsrs	r2, r2, #24
    66e8:	0a45      	lsrs	r5, r0, #9
    66ea:	0e24      	lsrs	r4, r4, #24
    66ec:	0fc9      	lsrs	r1, r1, #31
    66ee:	2aff      	cmp	r2, #255	; 0xff
    66f0:	d017      	beq.n	6722 <__lesf2+0x4a>
    66f2:	2cff      	cmp	r4, #255	; 0xff
    66f4:	d019      	beq.n	672a <__lesf2+0x52>
    66f6:	2a00      	cmp	r2, #0
    66f8:	d10b      	bne.n	6712 <__lesf2+0x3a>
    66fa:	4270      	negs	r0, r6
    66fc:	4170      	adcs	r0, r6
    66fe:	2c00      	cmp	r4, #0
    6700:	d017      	beq.n	6732 <__lesf2+0x5a>
    6702:	2800      	cmp	r0, #0
    6704:	d007      	beq.n	6716 <__lesf2+0x3e>
    6706:	4248      	negs	r0, r1
    6708:	4141      	adcs	r1, r0
    670a:	2001      	movs	r0, #1
    670c:	4249      	negs	r1, r1
    670e:	4308      	orrs	r0, r1
    6710:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6712:	2c00      	cmp	r4, #0
    6714:	d013      	beq.n	673e <__lesf2+0x66>
    6716:	428b      	cmp	r3, r1
    6718:	d014      	beq.n	6744 <__lesf2+0x6c>
    671a:	4258      	negs	r0, r3
    671c:	2301      	movs	r3, #1
    671e:	4318      	orrs	r0, r3
    6720:	e7f6      	b.n	6710 <__lesf2+0x38>
    6722:	2002      	movs	r0, #2
    6724:	2e00      	cmp	r6, #0
    6726:	d1f3      	bne.n	6710 <__lesf2+0x38>
    6728:	e7e3      	b.n	66f2 <__lesf2+0x1a>
    672a:	2002      	movs	r0, #2
    672c:	2d00      	cmp	r5, #0
    672e:	d1ef      	bne.n	6710 <__lesf2+0x38>
    6730:	e7e1      	b.n	66f6 <__lesf2+0x1e>
    6732:	2d00      	cmp	r5, #0
    6734:	d1e5      	bne.n	6702 <__lesf2+0x2a>
    6736:	2000      	movs	r0, #0
    6738:	2e00      	cmp	r6, #0
    673a:	d0e9      	beq.n	6710 <__lesf2+0x38>
    673c:	e7ed      	b.n	671a <__lesf2+0x42>
    673e:	2d00      	cmp	r5, #0
    6740:	d1e9      	bne.n	6716 <__lesf2+0x3e>
    6742:	e7ea      	b.n	671a <__lesf2+0x42>
    6744:	42a2      	cmp	r2, r4
    6746:	dce8      	bgt.n	671a <__lesf2+0x42>
    6748:	db04      	blt.n	6754 <__lesf2+0x7c>
    674a:	42ae      	cmp	r6, r5
    674c:	d8e5      	bhi.n	671a <__lesf2+0x42>
    674e:	2000      	movs	r0, #0
    6750:	42ae      	cmp	r6, r5
    6752:	d2dd      	bcs.n	6710 <__lesf2+0x38>
    6754:	4258      	negs	r0, r3
    6756:	4143      	adcs	r3, r0
    6758:	2001      	movs	r0, #1
    675a:	425b      	negs	r3, r3
    675c:	4318      	orrs	r0, r3
    675e:	e7d7      	b.n	6710 <__lesf2+0x38>

00006760 <__errno>:
    6760:	4b01      	ldr	r3, [pc, #4]	; (6768 <__errno+0x8>)
    6762:	6818      	ldr	r0, [r3, #0]
    6764:	4770      	bx	lr
    6766:	46c0      	nop			; (mov r8, r8)
    6768:	200004a0 	.word	0x200004a0

0000676c <__libc_init_array>:
    676c:	b570      	push	{r4, r5, r6, lr}
    676e:	4e0d      	ldr	r6, [pc, #52]	; (67a4 <__libc_init_array+0x38>)
    6770:	4d0d      	ldr	r5, [pc, #52]	; (67a8 <__libc_init_array+0x3c>)
    6772:	2400      	movs	r4, #0
    6774:	1bad      	subs	r5, r5, r6
    6776:	10ad      	asrs	r5, r5, #2
    6778:	d005      	beq.n	6786 <__libc_init_array+0x1a>
    677a:	00a3      	lsls	r3, r4, #2
    677c:	58f3      	ldr	r3, [r6, r3]
    677e:	3401      	adds	r4, #1
    6780:	4798      	blx	r3
    6782:	42a5      	cmp	r5, r4
    6784:	d1f9      	bne.n	677a <__libc_init_array+0xe>
    6786:	f000 f92f 	bl	69e8 <_init>
    678a:	4e08      	ldr	r6, [pc, #32]	; (67ac <__libc_init_array+0x40>)
    678c:	4d08      	ldr	r5, [pc, #32]	; (67b0 <__libc_init_array+0x44>)
    678e:	2400      	movs	r4, #0
    6790:	1bad      	subs	r5, r5, r6
    6792:	10ad      	asrs	r5, r5, #2
    6794:	d005      	beq.n	67a2 <__libc_init_array+0x36>
    6796:	00a3      	lsls	r3, r4, #2
    6798:	58f3      	ldr	r3, [r6, r3]
    679a:	3401      	adds	r4, #1
    679c:	4798      	blx	r3
    679e:	42a5      	cmp	r5, r4
    67a0:	d1f9      	bne.n	6796 <__libc_init_array+0x2a>
    67a2:	bd70      	pop	{r4, r5, r6, pc}
    67a4:	000069f4 	.word	0x000069f4
    67a8:	000069f4 	.word	0x000069f4
    67ac:	000069f4 	.word	0x000069f4
    67b0:	000069fc 	.word	0x000069fc

000067b4 <register_fini>:
    67b4:	4b03      	ldr	r3, [pc, #12]	; (67c4 <register_fini+0x10>)
    67b6:	b510      	push	{r4, lr}
    67b8:	2b00      	cmp	r3, #0
    67ba:	d002      	beq.n	67c2 <register_fini+0xe>
    67bc:	4802      	ldr	r0, [pc, #8]	; (67c8 <register_fini+0x14>)
    67be:	f000 f805 	bl	67cc <atexit>
    67c2:	bd10      	pop	{r4, pc}
    67c4:	00000000 	.word	0x00000000
    67c8:	000067dd 	.word	0x000067dd

000067cc <atexit>:
    67cc:	b510      	push	{r4, lr}
    67ce:	0001      	movs	r1, r0
    67d0:	2300      	movs	r3, #0
    67d2:	2200      	movs	r2, #0
    67d4:	2000      	movs	r0, #0
    67d6:	f000 f81b 	bl	6810 <__register_exitproc>
    67da:	bd10      	pop	{r4, pc}

000067dc <__libc_fini_array>:
    67dc:	b570      	push	{r4, r5, r6, lr}
    67de:	4b09      	ldr	r3, [pc, #36]	; (6804 <__libc_fini_array+0x28>)
    67e0:	4c09      	ldr	r4, [pc, #36]	; (6808 <__libc_fini_array+0x2c>)
    67e2:	1ae4      	subs	r4, r4, r3
    67e4:	10a4      	asrs	r4, r4, #2
    67e6:	d009      	beq.n	67fc <__libc_fini_array+0x20>
    67e8:	4a08      	ldr	r2, [pc, #32]	; (680c <__libc_fini_array+0x30>)
    67ea:	18a5      	adds	r5, r4, r2
    67ec:	00ad      	lsls	r5, r5, #2
    67ee:	18ed      	adds	r5, r5, r3
    67f0:	682b      	ldr	r3, [r5, #0]
    67f2:	3c01      	subs	r4, #1
    67f4:	4798      	blx	r3
    67f6:	3d04      	subs	r5, #4
    67f8:	2c00      	cmp	r4, #0
    67fa:	d1f9      	bne.n	67f0 <__libc_fini_array+0x14>
    67fc:	f000 f8fe 	bl	69fc <_fini>
    6800:	bd70      	pop	{r4, r5, r6, pc}
    6802:	46c0      	nop			; (mov r8, r8)
    6804:	00006a08 	.word	0x00006a08
    6808:	00006a0c 	.word	0x00006a0c
    680c:	3fffffff 	.word	0x3fffffff

00006810 <__register_exitproc>:
    6810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6812:	4644      	mov	r4, r8
    6814:	465f      	mov	r7, fp
    6816:	4656      	mov	r6, sl
    6818:	464d      	mov	r5, r9
    681a:	469b      	mov	fp, r3
    681c:	4b2f      	ldr	r3, [pc, #188]	; (68dc <__register_exitproc+0xcc>)
    681e:	b4f0      	push	{r4, r5, r6, r7}
    6820:	681c      	ldr	r4, [r3, #0]
    6822:	23a4      	movs	r3, #164	; 0xa4
    6824:	005b      	lsls	r3, r3, #1
    6826:	0005      	movs	r5, r0
    6828:	58e0      	ldr	r0, [r4, r3]
    682a:	000e      	movs	r6, r1
    682c:	4690      	mov	r8, r2
    682e:	2800      	cmp	r0, #0
    6830:	d04b      	beq.n	68ca <__register_exitproc+0xba>
    6832:	6843      	ldr	r3, [r0, #4]
    6834:	2b1f      	cmp	r3, #31
    6836:	dc0d      	bgt.n	6854 <__register_exitproc+0x44>
    6838:	1c5c      	adds	r4, r3, #1
    683a:	2d00      	cmp	r5, #0
    683c:	d121      	bne.n	6882 <__register_exitproc+0x72>
    683e:	3302      	adds	r3, #2
    6840:	009b      	lsls	r3, r3, #2
    6842:	6044      	str	r4, [r0, #4]
    6844:	501e      	str	r6, [r3, r0]
    6846:	2000      	movs	r0, #0
    6848:	bc3c      	pop	{r2, r3, r4, r5}
    684a:	4690      	mov	r8, r2
    684c:	4699      	mov	r9, r3
    684e:	46a2      	mov	sl, r4
    6850:	46ab      	mov	fp, r5
    6852:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6854:	4b22      	ldr	r3, [pc, #136]	; (68e0 <__register_exitproc+0xd0>)
    6856:	2b00      	cmp	r3, #0
    6858:	d03c      	beq.n	68d4 <__register_exitproc+0xc4>
    685a:	20c8      	movs	r0, #200	; 0xc8
    685c:	0040      	lsls	r0, r0, #1
    685e:	e000      	b.n	6862 <__register_exitproc+0x52>
    6860:	bf00      	nop
    6862:	2800      	cmp	r0, #0
    6864:	d036      	beq.n	68d4 <__register_exitproc+0xc4>
    6866:	22a4      	movs	r2, #164	; 0xa4
    6868:	2300      	movs	r3, #0
    686a:	0052      	lsls	r2, r2, #1
    686c:	58a1      	ldr	r1, [r4, r2]
    686e:	6043      	str	r3, [r0, #4]
    6870:	6001      	str	r1, [r0, #0]
    6872:	50a0      	str	r0, [r4, r2]
    6874:	3240      	adds	r2, #64	; 0x40
    6876:	5083      	str	r3, [r0, r2]
    6878:	3204      	adds	r2, #4
    687a:	5083      	str	r3, [r0, r2]
    687c:	2401      	movs	r4, #1
    687e:	2d00      	cmp	r5, #0
    6880:	d0dd      	beq.n	683e <__register_exitproc+0x2e>
    6882:	009a      	lsls	r2, r3, #2
    6884:	4691      	mov	r9, r2
    6886:	4481      	add	r9, r0
    6888:	4642      	mov	r2, r8
    688a:	2188      	movs	r1, #136	; 0x88
    688c:	464f      	mov	r7, r9
    688e:	507a      	str	r2, [r7, r1]
    6890:	22c4      	movs	r2, #196	; 0xc4
    6892:	0052      	lsls	r2, r2, #1
    6894:	4690      	mov	r8, r2
    6896:	4480      	add	r8, r0
    6898:	4642      	mov	r2, r8
    689a:	3987      	subs	r1, #135	; 0x87
    689c:	4099      	lsls	r1, r3
    689e:	6812      	ldr	r2, [r2, #0]
    68a0:	468a      	mov	sl, r1
    68a2:	430a      	orrs	r2, r1
    68a4:	4694      	mov	ip, r2
    68a6:	4642      	mov	r2, r8
    68a8:	4661      	mov	r1, ip
    68aa:	6011      	str	r1, [r2, #0]
    68ac:	2284      	movs	r2, #132	; 0x84
    68ae:	4649      	mov	r1, r9
    68b0:	465f      	mov	r7, fp
    68b2:	0052      	lsls	r2, r2, #1
    68b4:	508f      	str	r7, [r1, r2]
    68b6:	2d02      	cmp	r5, #2
    68b8:	d1c1      	bne.n	683e <__register_exitproc+0x2e>
    68ba:	0002      	movs	r2, r0
    68bc:	4655      	mov	r5, sl
    68be:	328d      	adds	r2, #141	; 0x8d
    68c0:	32ff      	adds	r2, #255	; 0xff
    68c2:	6811      	ldr	r1, [r2, #0]
    68c4:	430d      	orrs	r5, r1
    68c6:	6015      	str	r5, [r2, #0]
    68c8:	e7b9      	b.n	683e <__register_exitproc+0x2e>
    68ca:	0020      	movs	r0, r4
    68cc:	304d      	adds	r0, #77	; 0x4d
    68ce:	30ff      	adds	r0, #255	; 0xff
    68d0:	50e0      	str	r0, [r4, r3]
    68d2:	e7ae      	b.n	6832 <__register_exitproc+0x22>
    68d4:	2001      	movs	r0, #1
    68d6:	4240      	negs	r0, r0
    68d8:	e7b6      	b.n	6848 <__register_exitproc+0x38>
    68da:	46c0      	nop			; (mov r8, r8)
    68dc:	000069e4 	.word	0x000069e4
    68e0:	00000000 	.word	0x00000000

000068e4 <senseBatPin>:
    68e4:	06000000 01000106                                .....

000068e9 <senseAPin>:
    68e9:	03010001 0100010b                                .....

000068ee <senseBPin>:
    68ee:	02010001 0000010a                                .....

000068f3 <senseCPin>:
    68f3:	03000001 00000101                                .....

000068f8 <senseDPin>:
    68f8:	02000001 00000000                                .....

000068fd <analogAccelPin>:
    68fd:	07000000 70000007 0000776f 00000000     .......pow......
    690d:	00000000                                         ...

00006910 <TWO52>:
    6910:	00000000 43300000 00000000 c3300000     ......0C......0.
    6920:	000041b0 0000410e 0000410e 0000410c     .A...A...A...A..
    6930:	000041a2 000041a2 00004198 0000410c     .A...A...A...A..
    6940:	000041a2 00004198 000041a2 0000410c     .A...A...A...A..
    6950:	000041a8 000041a8 000041a8 00004232     .A...A...A..2B..
    6960:	00004ee4 00004db2 00004eb8 00004da8     .N...M...N...M..
    6970:	00004eb8 00004ec2 00004eb8 00004da8     .N...N...N...M..
    6980:	00004db2 00004db2 00004ec2 00004da8     .M...M...N...M..
    6990:	00004d9e 00004d9e 00004d9e 00005114     .M...M...M...Q..
    69a0:	0000572c 000055ec 000055ec 000055ea     ,W...U...U...U..
    69b0:	00005704 00005704 000056f6 000055ea     .W...W...V...U..
    69c0:	00005704 000056f6 00005704 000055ea     .W...V...W...U..
    69d0:	0000570c 0000570c 0000570c 0000590c     .W...W...W...Y..
    69e0:	00000043                                C...

000069e4 <_global_impure_ptr>:
    69e4:	20000078                                x.. 

000069e8 <_init>:
    69e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    69ea:	46c0      	nop			; (mov r8, r8)
    69ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
    69ee:	bc08      	pop	{r3}
    69f0:	469e      	mov	lr, r3
    69f2:	4770      	bx	lr

000069f4 <__init_array_start>:
    69f4:	000067b5 	.word	0x000067b5

000069f8 <__frame_dummy_init_array_entry>:
    69f8:	000000dd                                ....

000069fc <_fini>:
    69fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    69fe:	46c0      	nop			; (mov r8, r8)
    6a00:	bcf8      	pop	{r3, r4, r5, r6, r7}
    6a02:	bc08      	pop	{r3}
    6a04:	469e      	mov	lr, r3
    6a06:	4770      	bx	lr

00006a08 <__fini_array_start>:
    6a08:	000000b5 	.word	0x000000b5
