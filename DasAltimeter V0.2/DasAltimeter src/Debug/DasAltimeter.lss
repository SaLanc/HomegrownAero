
DasAltimeter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000020dc  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000438  20000000  000020dc  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000001a0  20000440  00002520  00020440  2**4
                  ALLOC
  3 .stack        00002000  200005e0  000026c0  00020440  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020438  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020460  2**0
                  CONTENTS, READONLY
  6 .debug_info   000124b2  00000000  00000000  000204b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000173e  00000000  00000000  0003296b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000152e  00000000  00000000  000340a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000268  00000000  00000000  000355d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000290  00000000  00000000  0003583f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001418b  00000000  00000000  00035acf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00005c60  00000000  00000000  00049c5a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000719c2  00000000  00000000  0004f8ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000810  00000000  00000000  000c127c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	200025e0 	.word	0x200025e0
       4:	00000119 	.word	0x00000119
       8:	00000115 	.word	0x00000115
       c:	00000115 	.word	0x00000115
	...
      2c:	00000115 	.word	0x00000115
	...
      38:	00000115 	.word	0x00000115
      3c:	00000115 	.word	0x00000115
      40:	00000115 	.word	0x00000115
      44:	00000115 	.word	0x00000115
      48:	00000115 	.word	0x00000115
      4c:	00000115 	.word	0x00000115
      50:	00000115 	.word	0x00000115
      54:	00000115 	.word	0x00000115
      58:	00000115 	.word	0x00000115
      5c:	00000115 	.word	0x00000115
      60:	00000115 	.word	0x00000115
      64:	00000115 	.word	0x00000115
      68:	00000115 	.word	0x00000115
      6c:	00000115 	.word	0x00000115
      70:	00000115 	.word	0x00000115
      74:	00000115 	.word	0x00000115
      78:	00000115 	.word	0x00000115
      7c:	00000115 	.word	0x00000115
      80:	00000115 	.word	0x00000115
      84:	00000115 	.word	0x00000115
      88:	00000115 	.word	0x00000115
      8c:	00000115 	.word	0x00000115
      90:	00000115 	.word	0x00000115
	...
      9c:	00000115 	.word	0x00000115
      a0:	00000115 	.word	0x00000115
      a4:	00000115 	.word	0x00000115
      a8:	00000115 	.word	0x00000115
      ac:	00000115 	.word	0x00000115
      b0:	00000000 	.word	0x00000000

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000440 	.word	0x20000440
      d4:	00000000 	.word	0x00000000
      d8:	000020dc 	.word	0x000020dc

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000444 	.word	0x20000444
     108:	000020dc 	.word	0x000020dc
     10c:	000020dc 	.word	0x000020dc
     110:	00000000 	.word	0x00000000

00000114 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     114:	e7fe      	b.n	114 <Dummy_Handler>
     116:	46c0      	nop			; (mov r8, r8)

00000118 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
     118:	b570      	push	{r4, r5, r6, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
     11a:	4b2e      	ldr	r3, [pc, #184]	; (1d4 <Reset_Handler+0xbc>)
     11c:	4a2e      	ldr	r2, [pc, #184]	; (1d8 <Reset_Handler+0xc0>)
     11e:	429a      	cmp	r2, r3
     120:	d003      	beq.n	12a <Reset_Handler+0x12>
                for (; pDest < &_erelocate;) {
     122:	4b2e      	ldr	r3, [pc, #184]	; (1dc <Reset_Handler+0xc4>)
     124:	4a2b      	ldr	r2, [pc, #172]	; (1d4 <Reset_Handler+0xbc>)
     126:	429a      	cmp	r2, r3
     128:	d304      	bcc.n	134 <Reset_Handler+0x1c>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     12a:	4b2d      	ldr	r3, [pc, #180]	; (1e0 <Reset_Handler+0xc8>)
     12c:	4a2d      	ldr	r2, [pc, #180]	; (1e4 <Reset_Handler+0xcc>)
     12e:	429a      	cmp	r2, r3
     130:	d310      	bcc.n	154 <Reset_Handler+0x3c>
     132:	e01e      	b.n	172 <Reset_Handler+0x5a>
     134:	4a2c      	ldr	r2, [pc, #176]	; (1e8 <Reset_Handler+0xd0>)
     136:	4b29      	ldr	r3, [pc, #164]	; (1dc <Reset_Handler+0xc4>)
     138:	3303      	adds	r3, #3
     13a:	1a9b      	subs	r3, r3, r2
     13c:	089b      	lsrs	r3, r3, #2
     13e:	3301      	adds	r3, #1
     140:	009b      	lsls	r3, r3, #2
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
     142:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
     144:	4823      	ldr	r0, [pc, #140]	; (1d4 <Reset_Handler+0xbc>)
     146:	4924      	ldr	r1, [pc, #144]	; (1d8 <Reset_Handler+0xc0>)
     148:	588c      	ldr	r4, [r1, r2]
     14a:	5084      	str	r4, [r0, r2]
     14c:	3204      	adds	r2, #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
     14e:	429a      	cmp	r2, r3
     150:	d1fa      	bne.n	148 <Reset_Handler+0x30>
     152:	e7ea      	b.n	12a <Reset_Handler+0x12>
     154:	4a25      	ldr	r2, [pc, #148]	; (1ec <Reset_Handler+0xd4>)
     156:	4b22      	ldr	r3, [pc, #136]	; (1e0 <Reset_Handler+0xc8>)
     158:	3303      	adds	r3, #3
     15a:	1a9b      	subs	r3, r3, r2
     15c:	089b      	lsrs	r3, r3, #2
     15e:	3301      	adds	r3, #1
     160:	009b      	lsls	r3, r3, #2
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     162:	2200      	movs	r2, #0
                *pDest++ = 0;
     164:	481f      	ldr	r0, [pc, #124]	; (1e4 <Reset_Handler+0xcc>)
     166:	2100      	movs	r1, #0
     168:	1814      	adds	r4, r2, r0
     16a:	6021      	str	r1, [r4, #0]
     16c:	3204      	adds	r2, #4
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     16e:	429a      	cmp	r2, r3
     170:	d1fa      	bne.n	168 <Reset_Handler+0x50>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     172:	4a1f      	ldr	r2, [pc, #124]	; (1f0 <Reset_Handler+0xd8>)
     174:	21ff      	movs	r1, #255	; 0xff
     176:	4b1f      	ldr	r3, [pc, #124]	; (1f4 <Reset_Handler+0xdc>)
     178:	438b      	bics	r3, r1
     17a:	6093      	str	r3, [r2, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     17c:	39fd      	subs	r1, #253	; 0xfd
     17e:	2390      	movs	r3, #144	; 0x90
     180:	005b      	lsls	r3, r3, #1
     182:	4a1d      	ldr	r2, [pc, #116]	; (1f8 <Reset_Handler+0xe0>)
     184:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     186:	481d      	ldr	r0, [pc, #116]	; (1fc <Reset_Handler+0xe4>)
     188:	78c3      	ldrb	r3, [r0, #3]
     18a:	2403      	movs	r4, #3
     18c:	43a3      	bics	r3, r4
     18e:	2202      	movs	r2, #2
     190:	4313      	orrs	r3, r2
     192:	70c3      	strb	r3, [r0, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     194:	78c3      	ldrb	r3, [r0, #3]
     196:	260c      	movs	r6, #12
     198:	43b3      	bics	r3, r6
     19a:	2108      	movs	r1, #8
     19c:	430b      	orrs	r3, r1
     19e:	70c3      	strb	r3, [r0, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
     1a0:	4b17      	ldr	r3, [pc, #92]	; (200 <Reset_Handler+0xe8>)
     1a2:	7b98      	ldrb	r0, [r3, #14]
     1a4:	2530      	movs	r5, #48	; 0x30
     1a6:	43a8      	bics	r0, r5
     1a8:	0005      	movs	r5, r0
     1aa:	2020      	movs	r0, #32
     1ac:	4328      	orrs	r0, r5
     1ae:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     1b0:	7b98      	ldrb	r0, [r3, #14]
     1b2:	43b0      	bics	r0, r6
     1b4:	4301      	orrs	r1, r0
     1b6:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     1b8:	7b99      	ldrb	r1, [r3, #14]
     1ba:	43a1      	bics	r1, r4
     1bc:	430a      	orrs	r2, r1
     1be:	739a      	strb	r2, [r3, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
     1c0:	4a10      	ldr	r2, [pc, #64]	; (204 <Reset_Handler+0xec>)
     1c2:	6851      	ldr	r1, [r2, #4]
     1c4:	2380      	movs	r3, #128	; 0x80
     1c6:	430b      	orrs	r3, r1
     1c8:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
     1ca:	4b0f      	ldr	r3, [pc, #60]	; (208 <Reset_Handler+0xf0>)
     1cc:	4798      	blx	r3

        /* Branch to main function */
        main();
     1ce:	4b0f      	ldr	r3, [pc, #60]	; (20c <Reset_Handler+0xf4>)
     1d0:	4798      	blx	r3
     1d2:	e7fe      	b.n	1d2 <Reset_Handler+0xba>
     1d4:	20000000 	.word	0x20000000
     1d8:	000020dc 	.word	0x000020dc
     1dc:	20000438 	.word	0x20000438
     1e0:	200005e0 	.word	0x200005e0
     1e4:	20000440 	.word	0x20000440
     1e8:	20000004 	.word	0x20000004
     1ec:	20000444 	.word	0x20000444
     1f0:	e000ed00 	.word	0xe000ed00
     1f4:	00000000 	.word	0x00000000
     1f8:	41007000 	.word	0x41007000
     1fc:	41005000 	.word	0x41005000
     200:	41004800 	.word	0x41004800
     204:	41004000 	.word	0x41004000
     208:	00001c81 	.word	0x00001c81
     20c:	000003f1 	.word	0x000003f1

00000210 <SystemInit>:
 *         Initialize the System and update the SystemCoreClock variable.
 */
void SystemInit(void)
{
	// Keep the default device state after reset
	SystemCoreClock = __SYSTEM_CLOCK;
     210:	4a01      	ldr	r2, [pc, #4]	; (218 <SystemInit+0x8>)
     212:	4b02      	ldr	r3, [pc, #8]	; (21c <SystemInit+0xc>)
     214:	601a      	str	r2, [r3, #0]
	return;
}
     216:	4770      	bx	lr
     218:	000f4240 	.word	0x000f4240
     21c:	20000000 	.word	0x20000000

00000220 <init>:
#include <boardDefines.h>




void init() {
     220:	b5f0      	push	{r4, r5, r6, r7, lr}
     222:	465f      	mov	r7, fp
     224:	4656      	mov	r6, sl
     226:	464d      	mov	r5, r9
     228:	4644      	mov	r4, r8
     22a:	b4f0      	push	{r4, r5, r6, r7}
     22c:	b083      	sub	sp, #12
    SystemInit();
     22e:	4b65      	ldr	r3, [pc, #404]	; (3c4 <init+0x1a4>)
     230:	4798      	blx	r3
    GclkInit();
     232:	4b65      	ldr	r3, [pc, #404]	; (3c8 <init+0x1a8>)
     234:	4798      	blx	r3
    delayInit();
     236:	4b65      	ldr	r3, [pc, #404]	; (3cc <init+0x1ac>)
     238:	4798      	blx	r3
    adcInit();
     23a:	4b65      	ldr	r3, [pc, #404]	; (3d0 <init+0x1b0>)
     23c:	4798      	blx	r3
    dmaInit();
     23e:	4b65      	ldr	r3, [pc, #404]	; (3d4 <init+0x1b4>)
     240:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     242:	4b65      	ldr	r3, [pc, #404]	; (3d8 <init+0x1b8>)
     244:	2240      	movs	r2, #64	; 0x40
     246:	601a      	str	r2, [r3, #0]
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     248:	21c1      	movs	r1, #193	; 0xc1
     24a:	0089      	lsls	r1, r1, #2
     24c:	5858      	ldr	r0, [r3, r1]
     24e:	4a63      	ldr	r2, [pc, #396]	; (3dc <init+0x1bc>)
     250:	4002      	ands	r2, r0
     252:	505a      	str	r2, [r3, r1]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     254:	4b62      	ldr	r3, [pc, #392]	; (3e0 <init+0x1c0>)
     256:	2054      	movs	r0, #84	; 0x54
     258:	5c19      	ldrb	r1, [r3, r0]
     25a:	2201      	movs	r2, #1
     25c:	4391      	bics	r1, r2
     25e:	5419      	strb	r1, [r3, r0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     260:	2180      	movs	r1, #128	; 0x80
     262:	0349      	lsls	r1, r1, #13
     264:	6099      	str	r1, [r3, #8]

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     266:	2433      	movs	r4, #51	; 0x33
     268:	5d18      	ldrb	r0, [r3, r4]
     26a:	210f      	movs	r1, #15
     26c:	4689      	mov	r9, r1
     26e:	4388      	bics	r0, r1
     270:	2101      	movs	r1, #1
     272:	4308      	orrs	r0, r1
     274:	5518      	strb	r0, [r3, r4]
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     276:	3413      	adds	r4, #19
     278:	5d18      	ldrb	r0, [r3, r4]
     27a:	4308      	orrs	r0, r1
     27c:	5518      	strb	r0, [r3, r4]

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     27e:	3c12      	subs	r4, #18
     280:	5d18      	ldrb	r0, [r3, r4]
     282:	464d      	mov	r5, r9
     284:	43a8      	bics	r0, r5
     286:	4308      	orrs	r0, r1
     288:	5518      	strb	r0, [r3, r4]
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     28a:	2048      	movs	r0, #72	; 0x48
     28c:	5c1d      	ldrb	r5, [r3, r0]
     28e:	430d      	orrs	r5, r1
     290:	541d      	strb	r5, [r3, r0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     292:	2658      	movs	r6, #88	; 0x58
     294:	5d9d      	ldrb	r5, [r3, r6]
     296:	4395      	bics	r5, r2
     298:	559d      	strb	r5, [r3, r6]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     29a:	2580      	movs	r5, #128	; 0x80
     29c:	046d      	lsls	r5, r5, #17
     29e:	609d      	str	r5, [r3, #8]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     2a0:	615d      	str	r5, [r3, #20]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     2a2:	5c1d      	ldrb	r5, [r3, r0]
     2a4:	4395      	bics	r5, r2
     2a6:	541d      	strb	r5, [r3, r0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     2a8:	2580      	movs	r5, #128	; 0x80
     2aa:	006d      	lsls	r5, r5, #1
     2ac:	609d      	str	r5, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     2ae:	3db7      	subs	r5, #183	; 0xb7
     2b0:	46ac      	mov	ip, r5
     2b2:	5d5d      	ldrb	r5, [r3, r5]
     2b4:	4395      	bics	r5, r2
     2b6:	4666      	mov	r6, ip
     2b8:	559d      	strb	r5, [r3, r6]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     2ba:	2580      	movs	r5, #128	; 0x80
     2bc:	00ad      	lsls	r5, r5, #2
     2be:	609d      	str	r5, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     2c0:	3db6      	subs	r5, #182	; 0xb6
     2c2:	3dff      	subs	r5, #255	; 0xff
     2c4:	5d5e      	ldrb	r6, [r3, r5]
     2c6:	4396      	bics	r6, r2
     2c8:	555e      	strb	r6, [r3, r5]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     2ca:	5d5f      	ldrb	r7, [r3, r5]
     2cc:	2602      	movs	r6, #2
     2ce:	4337      	orrs	r7, r6
     2d0:	555f      	strb	r7, [r3, r5]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     2d2:	2780      	movs	r7, #128	; 0x80
     2d4:	013f      	lsls	r7, r7, #4
     2d6:	605f      	str	r7, [r3, #4]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     2d8:	2735      	movs	r7, #53	; 0x35
     2da:	46bb      	mov	fp, r7
     2dc:	5ddf      	ldrb	r7, [r3, r7]
     2de:	360d      	adds	r6, #13
     2e0:	46b2      	mov	sl, r6
     2e2:	4037      	ands	r7, r6
     2e4:	2620      	movs	r6, #32
     2e6:	46b0      	mov	r8, r6
     2e8:	4646      	mov	r6, r8
     2ea:	4337      	orrs	r7, r6
     2ec:	465e      	mov	r6, fp
     2ee:	559f      	strb	r7, [r3, r6]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     2f0:	5d5f      	ldrb	r7, [r3, r5]
     2f2:	430f      	orrs	r7, r1
     2f4:	555f      	strb	r7, [r3, r5]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     2f6:	5d1d      	ldrb	r5, [r3, r4]
     2f8:	4656      	mov	r6, sl
     2fa:	4035      	ands	r5, r6
     2fc:	4646      	mov	r6, r8
     2fe:	4335      	orrs	r5, r6
     300:	551d      	strb	r5, [r3, r4]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     302:	4665      	mov	r5, ip
     304:	5d5d      	ldrb	r5, [r3, r5]
     306:	430d      	orrs	r5, r1
     308:	4666      	mov	r6, ip
     30a:	559d      	strb	r5, [r3, r6]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     30c:	5d1d      	ldrb	r5, [r3, r4]
     30e:	464e      	mov	r6, r9
     310:	43b5      	bics	r5, r6
     312:	3e0d      	subs	r6, #13
     314:	4335      	orrs	r5, r6
     316:	551d      	strb	r5, [r3, r4]
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     318:	5c1c      	ldrb	r4, [r3, r0]
     31a:	4321      	orrs	r1, r4
     31c:	5419      	strb	r1, [r3, r0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     31e:	3082      	adds	r0, #130	; 0x82
     320:	5c19      	ldrb	r1, [r3, r0]
     322:	4391      	bics	r1, r2
     324:	5419      	strb	r1, [r3, r0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     326:	2180      	movs	r1, #128	; 0x80
     328:	00c9      	lsls	r1, r1, #3
     32a:	3842      	subs	r0, #66	; 0x42
     32c:	5019      	str	r1, [r3, r0]
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     32e:	3010      	adds	r0, #16
     330:	5019      	str	r1, [r3, r0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     332:	244a      	movs	r4, #74	; 0x4a
     334:	5d18      	ldrb	r0, [r3, r4]
     336:	4390      	bics	r0, r2
     338:	5518      	strb	r0, [r3, r4]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     33a:	6099      	str	r1, [r3, #8]
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     33c:	6199      	str	r1, [r3, #24]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     33e:	204c      	movs	r0, #76	; 0x4c
     340:	5c19      	ldrb	r1, [r3, r0]
     342:	4391      	bics	r1, r2
     344:	5419      	strb	r1, [r3, r0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     346:	2180      	movs	r1, #128	; 0x80
     348:	0149      	lsls	r1, r1, #5
     34a:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     34c:	3002      	adds	r0, #2
     34e:	5c19      	ldrb	r1, [r3, r0]
     350:	4391      	bics	r1, r2
     352:	5419      	strb	r1, [r3, r0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     354:	2180      	movs	r1, #128	; 0x80
     356:	01c9      	lsls	r1, r1, #7
     358:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     35a:	214d      	movs	r1, #77	; 0x4d
     35c:	5c58      	ldrb	r0, [r3, r1]
     35e:	4390      	bics	r0, r2
     360:	5458      	strb	r0, [r3, r1]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     362:	5c58      	ldrb	r0, [r3, r1]
     364:	4306      	orrs	r6, r0
     366:	545e      	strb	r6, [r3, r1]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     368:	2180      	movs	r1, #128	; 0x80
     36a:	0189      	lsls	r1, r1, #6
     36c:	6059      	str	r1, [r3, #4]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     36e:	214f      	movs	r1, #79	; 0x4f
     370:	5c58      	ldrb	r0, [r3, r1]
     372:	4390      	bics	r0, r2
     374:	5458      	strb	r0, [r3, r1]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     376:	2080      	movs	r0, #128	; 0x80
     378:	0200      	lsls	r0, r0, #8
     37a:	6098      	str	r0, [r3, #8]
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     37c:	6198      	str	r0, [r3, #24]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     37e:	5c58      	ldrb	r0, [r3, r1]
     380:	4390      	bics	r0, r2
     382:	5458      	strb	r0, [r3, r1]
     384:	3106      	adds	r1, #6
     386:	5c58      	ldrb	r0, [r3, r1]
     388:	4390      	bics	r0, r2
     38a:	5458      	strb	r0, [r3, r1]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     38c:	2280      	movs	r2, #128	; 0x80
     38e:	0392      	lsls	r2, r2, #14
     390:	609a      	str	r2, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
}


inline static void pinCfg(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].reg |= p.cfg;
     392:	5c5a      	ldrb	r2, [r3, r1]
     394:	b2d2      	uxtb	r2, r2
     396:	545a      	strb	r2, [r3, r1]
    pinCfg(buzzerPin);

//    sercomClockEnable(SPI2, 3, 4);
//   sercomSpiMasterInit(SPI2, 3, 0, 0, 0, 0x00);

    sercomClockEnable(SPI0, 3, 4);
     398:	2204      	movs	r2, #4
     39a:	3952      	subs	r1, #82	; 0x52
     39c:	2000      	movs	r0, #0
     39e:	4b11      	ldr	r3, [pc, #68]	; (3e4 <init+0x1c4>)
     3a0:	4798      	blx	r3
    sercomSpiMasterInit(SPI0, 3, 0, 0, 0, 0x00);
     3a2:	2300      	movs	r3, #0
     3a4:	9301      	str	r3, [sp, #4]
     3a6:	9300      	str	r3, [sp, #0]
     3a8:	2200      	movs	r2, #0
     3aa:	2103      	movs	r1, #3
     3ac:	2000      	movs	r0, #0
     3ae:	4c0e      	ldr	r4, [pc, #56]	; (3e8 <init+0x1c8>)
     3b0:	47a0      	blx	r4

    IMUinit();
     3b2:	4b0e      	ldr	r3, [pc, #56]	; (3ec <init+0x1cc>)
     3b4:	4798      	blx	r3
}
     3b6:	b003      	add	sp, #12
     3b8:	bc3c      	pop	{r2, r3, r4, r5}
     3ba:	4690      	mov	r8, r2
     3bc:	4699      	mov	r9, r3
     3be:	46a2      	mov	sl, r4
     3c0:	46ab      	mov	fp, r5
     3c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
     3c4:	00000211 	.word	0x00000211
     3c8:	00000691 	.word	0x00000691
     3cc:	00000761 	.word	0x00000761
     3d0:	000004e9 	.word	0x000004e9
     3d4:	000007d9 	.word	0x000007d9
     3d8:	e000e100 	.word	0xe000e100
     3dc:	ff00ffff 	.word	0xff00ffff
     3e0:	41004400 	.word	0x41004400
     3e4:	00000e1d 	.word	0x00000e1d
     3e8:	00000e85 	.word	0x00000e85
     3ec:	000004c1 	.word	0x000004c1

000003f0 <main>:


int main(void) {
     3f0:	b5f0      	push	{r4, r5, r6, r7, lr}
     3f2:	b09f      	sub	sp, #124	; 0x7c

    init();
     3f4:	4b22      	ldr	r3, [pc, #136]	; (480 <main+0x90>)
     3f6:	4798      	blx	r3

    Altimeter my_altimeter;

    initMS5803Barometer(&my_altimeter.myBarometer);
     3f8:	a805      	add	r0, sp, #20
     3fa:	4b22      	ldr	r3, [pc, #136]	; (484 <main+0x94>)
     3fc:	4798      	blx	r3


    volatile long counter = 0;
     3fe:	2300      	movs	r3, #0
     400:	9304      	str	r3, [sp, #16]


    uint8_t dummy_Tx = 0xFF;
    uint8_t dummy_rx;

    delay_ms(300);
     402:	2096      	movs	r0, #150	; 0x96
     404:	0040      	lsls	r0, r0, #1
     406:	4b20      	ldr	r3, [pc, #128]	; (488 <main+0x98>)
     408:	4798      	blx	r3



    while (1) {
        counter++;
        sampleTick(&my_altimeter);
     40a:	4e20      	ldr	r6, [pc, #128]	; (48c <main+0x9c>)


        analogSample = adc_read(analogAccelPin);
     40c:	4f20      	ldr	r7, [pc, #128]	; (490 <main+0xa0>)

        if (counter == 100) {
            pinToggle(LedPin);


            averageAccel = averageAccel / 100;
     40e:	4d21      	ldr	r5, [pc, #132]	; (494 <main+0xa4>)
    delay_ms(300);



    while (1) {
        counter++;
     410:	9b04      	ldr	r3, [sp, #16]
     412:	3301      	adds	r3, #1
     414:	9304      	str	r3, [sp, #16]
        sampleTick(&my_altimeter);
     416:	a805      	add	r0, sp, #20
     418:	47b0      	blx	r6


        analogSample = adc_read(analogAccelPin);
     41a:	6838      	ldr	r0, [r7, #0]
     41c:	6879      	ldr	r1, [r7, #4]
     41e:	4b1e      	ldr	r3, [pc, #120]	; (498 <main+0xa8>)
     420:	4798      	blx	r3
     422:	466b      	mov	r3, sp
     424:	80d8      	strh	r0, [r3, #6]
        analogAccelX = (analogSample - 3878) * -0.0227;
     426:	88d8      	ldrh	r0, [r3, #6]
     428:	4b1c      	ldr	r3, [pc, #112]	; (49c <main+0xac>)
     42a:	469c      	mov	ip, r3
     42c:	4460      	add	r0, ip
     42e:	4b1c      	ldr	r3, [pc, #112]	; (4a0 <main+0xb0>)
     430:	4798      	blx	r3
     432:	4a1c      	ldr	r2, [pc, #112]	; (4a4 <main+0xb4>)
     434:	4b1c      	ldr	r3, [pc, #112]	; (4a8 <main+0xb8>)
     436:	4c1d      	ldr	r4, [pc, #116]	; (4ac <main+0xbc>)
     438:	47a0      	blx	r4
     43a:	4b1d      	ldr	r3, [pc, #116]	; (4b0 <main+0xc0>)
     43c:	4798      	blx	r3
     43e:	9000      	str	r0, [sp, #0]

        averageAccel = averageAccel + analogAccelX;
     440:	9803      	ldr	r0, [sp, #12]
     442:	9900      	ldr	r1, [sp, #0]
     444:	4c1b      	ldr	r4, [pc, #108]	; (4b4 <main+0xc4>)
     446:	47a0      	blx	r4
     448:	9003      	str	r0, [sp, #12]
        averageAlt = averageAlt + my_altimeter.myBarometer.heightFeet;
     44a:	9802      	ldr	r0, [sp, #8]
     44c:	990e      	ldr	r1, [sp, #56]	; 0x38
     44e:	47a0      	blx	r4
     450:	9002      	str	r0, [sp, #8]
                        pinToggle(buzzerPin);
                    }
                }
        		*/

        if (counter == 100) {
     452:	9b04      	ldr	r3, [sp, #16]
     454:	2b64      	cmp	r3, #100	; 0x64
     456:	d1db      	bne.n	410 <main+0x20>
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
}


inline static void pinToggle(Pin p) {
    PORT->Group[p.group].OUTTGL.reg = (1<<p.pin);
     458:	2280      	movs	r2, #128	; 0x80
     45a:	0352      	lsls	r2, r2, #13
     45c:	4b16      	ldr	r3, [pc, #88]	; (4b8 <main+0xc8>)
     45e:	61da      	str	r2, [r3, #28]
            pinToggle(LedPin);


            averageAccel = averageAccel / 100;
     460:	9803      	ldr	r0, [sp, #12]
     462:	4c16      	ldr	r4, [pc, #88]	; (4bc <main+0xcc>)
     464:	1c29      	adds	r1, r5, #0
     466:	47a0      	blx	r4
     468:	9003      	str	r0, [sp, #12]
            averageAlt = averageAlt / 100;
     46a:	9802      	ldr	r0, [sp, #8]
     46c:	1c29      	adds	r1, r5, #0
     46e:	47a0      	blx	r4
     470:	9002      	str	r0, [sp, #8]
            counter = -1;
     472:	2301      	movs	r3, #1
     474:	425b      	negs	r3, r3
     476:	9304      	str	r3, [sp, #16]

            averageAccel = 0;
     478:	2300      	movs	r3, #0
     47a:	9303      	str	r3, [sp, #12]
            averageAlt = 0;
     47c:	9302      	str	r3, [sp, #8]
     47e:	e7c7      	b.n	410 <main+0x20>
     480:	00000221 	.word	0x00000221
     484:	00000a9d 	.word	0x00000a9d
     488:	000007ad 	.word	0x000007ad
     48c:	00000b09 	.word	0x00000b09
     490:	00001e84 	.word	0x00001e84
     494:	42c80000 	.word	0x42c80000
     498:	00000569 	.word	0x00000569
     49c:	fffff0da 	.word	0xfffff0da
     4a0:	00001a01 	.word	0x00001a01
     4a4:	367a0f91 	.word	0x367a0f91
     4a8:	bf973eab 	.word	0xbf973eab
     4ac:	0000150d 	.word	0x0000150d
     4b0:	00001b2d 	.word	0x00001b2d
     4b4:	00000f71 	.word	0x00000f71
     4b8:	41004400 	.word	0x41004400
     4bc:	0000125d 	.word	0x0000125d

000004c0 <IMUinit>:
#include <util.h>
#include <boardDefines.h>


void IMUinit() {
     4c0:	b570      	push	{r4, r5, r6, lr}
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     4c2:	4c07      	ldr	r4, [pc, #28]	; (4e0 <IMUinit+0x20>)
     4c4:	2580      	movs	r5, #128	; 0x80
     4c6:	00ed      	lsls	r5, r5, #3
     4c8:	2394      	movs	r3, #148	; 0x94
     4ca:	50e5      	str	r5, [r4, r3]

    uint8_t dummy_Tx = 0xFF;
    uint8_t dummy_rx;

    pinLow(cs_accel);
    dummy_rx = spiDataTransfer(SPI0, 0x0F);
     4cc:	210f      	movs	r1, #15
     4ce:	2000      	movs	r0, #0
     4d0:	4e04      	ldr	r6, [pc, #16]	; (4e4 <IMUinit+0x24>)
     4d2:	47b0      	blx	r6
    dummy_rx = spiDataTransfer(SPI0, 0x0C);
     4d4:	210c      	movs	r1, #12
     4d6:	2000      	movs	r0, #0
     4d8:	47b0      	blx	r6
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     4da:	2398      	movs	r3, #152	; 0x98
     4dc:	50e5      	str	r5, [r4, r3]
    pinHigh(cs_accel);

}
     4de:	bd70      	pop	{r4, r5, r6, pc}
     4e0:	41004400 	.word	0x41004400
     4e4:	00000efd 	.word	0x00000efd

000004e8 <adcInit>:


#include <util.h>

void adcInit() {
     4e8:	b510      	push	{r4, lr}

    // set up clock
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;
     4ea:	4a12      	ldr	r2, [pc, #72]	; (534 <adcInit+0x4c>)
     4ec:	6a13      	ldr	r3, [r2, #32]
     4ee:	2180      	movs	r1, #128	; 0x80
     4f0:	0249      	lsls	r1, r1, #9
     4f2:	430b      	orrs	r3, r1
     4f4:	6213      	str	r3, [r2, #32]

    // divide prescaler by 512 (93.75KHz), max adc freq is 2.1MHz
    ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |
     4f6:	4910      	ldr	r1, [pc, #64]	; (538 <adcInit+0x50>)
     4f8:	22e0      	movs	r2, #224	; 0xe0
     4fa:	00d2      	lsls	r2, r2, #3
     4fc:	808a      	strh	r2, [r1, #4]
                     ADC_CTRLB_RESSEL_12BIT;

    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
     4fe:	480f      	ldr	r0, [pc, #60]	; (53c <adcInit+0x54>)
     500:	4b0f      	ldr	r3, [pc, #60]	; (540 <adcInit+0x58>)
     502:	8058      	strh	r0, [r3, #2]
                        GCLK_CLKCTRL_GEN(0) |
                        GCLK_CLKCTRL_ID(ADC_GCLK_ID);

    ADC->CALIB.reg =
        ADC_CALIB_BIAS_CAL(
     504:	4b0f      	ldr	r3, [pc, #60]	; (544 <adcInit+0x5c>)
    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(0) |
                        GCLK_CLKCTRL_ID(ADC_GCLK_ID);

    ADC->CALIB.reg =
     506:	681b      	ldr	r3, [r3, #0]
     508:	015b      	lsls	r3, r3, #5
     50a:	4013      	ands	r3, r2
     50c:	0018      	movs	r0, r3
        ADC_CALIB_BIAS_CAL(
            (*(uint32_t *)ADC_FUSES_BIASCAL_ADDR >> ADC_FUSES_BIASCAL_Pos)
        ) |
        ADC_CALIB_LINEARITY_CAL(
     50e:	4b0e      	ldr	r3, [pc, #56]	; (548 <adcInit+0x60>)
    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(0) |
                        GCLK_CLKCTRL_ID(ADC_GCLK_ID);

    ADC->CALIB.reg =
     510:	685a      	ldr	r2, [r3, #4]
     512:	0154      	lsls	r4, r2, #5
     514:	681a      	ldr	r2, [r3, #0]
     516:	0ed3      	lsrs	r3, r2, #27
     518:	4323      	orrs	r3, r4
     51a:	22ff      	movs	r2, #255	; 0xff
     51c:	4013      	ands	r3, r2
     51e:	4303      	orrs	r3, r0
     520:	850b      	strh	r3, [r1, #40]	; 0x28
        ) |
        ADC_CALIB_LINEARITY_CAL(
            (*(uint64_t *)ADC_FUSES_LINEARITY_0_ADDR >> ADC_FUSES_LINEARITY_0_Pos)
        );

    ADC->REFCTRL.reg = ADC_REFCTRL_REFSEL_INTVCC1;
     522:	2302      	movs	r3, #2
     524:	704b      	strb	r3, [r1, #1]

    ADC->CTRLA.reg = ADC_CTRLA_ENABLE; // enable
     526:	700b      	strb	r3, [r1, #0]
    while(ADC->STATUS.reg & ADC_STATUS_SYNCBUSY);
     528:	000a      	movs	r2, r1
     52a:	7e53      	ldrb	r3, [r2, #25]
     52c:	b25b      	sxtb	r3, r3
     52e:	2b00      	cmp	r3, #0
     530:	dbfb      	blt.n	52a <adcInit+0x42>
}
     532:	bd10      	pop	{r4, pc}
     534:	40000400 	.word	0x40000400
     538:	42004000 	.word	0x42004000
     53c:	0000401e 	.word	0x0000401e
     540:	40000c00 	.word	0x40000c00
     544:	00806024 	.word	0x00806024
     548:	00806020 	.word	0x00806020

0000054c <adcSample>:



u16_t adcSample() {
    ADC->SWTRIG.reg = ADC_SWTRIG_START;
     54c:	2202      	movs	r2, #2
     54e:	4b05      	ldr	r3, [pc, #20]	; (564 <adcSample+0x18>)
     550:	731a      	strb	r2, [r3, #12]
    while(!(ADC->INTFLAG.reg & ADC_INTFLAG_RESRDY)); // wait until result is ready
     552:	0019      	movs	r1, r3
     554:	3a01      	subs	r2, #1
     556:	7e0b      	ldrb	r3, [r1, #24]
     558:	4213      	tst	r3, r2
     55a:	d0fc      	beq.n	556 <adcSample+0xa>
    return ADC->RESULT.reg;
     55c:	4b01      	ldr	r3, [pc, #4]	; (564 <adcSample+0x18>)
     55e:	8b58      	ldrh	r0, [r3, #26]
     560:	b280      	uxth	r0, r0
}
     562:	4770      	bx	lr
     564:	42004000 	.word	0x42004000

00000568 <adc_read>:


u16_t adc_read(Pin p) {
     568:	b530      	push	{r4, r5, lr}
     56a:	b083      	sub	sp, #12
     56c:	0c03      	lsrs	r3, r0, #16
     56e:	0002      	movs	r2, r0
     570:	9000      	str	r0, [sp, #0]
     572:	9101      	str	r1, [sp, #4]
     574:	b2c9      	uxtb	r1, r1
     576:	b2db      	uxtb	r3, r3
     578:	0e10      	lsrs	r0, r2, #24
    u16_t buad;

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
     57a:	07c2      	lsls	r2, r0, #31
     57c:	d50c      	bpl.n	598 <adc_read+0x30>
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     57e:	0842      	lsrs	r2, r0, #1
     580:	01dc      	lsls	r4, r3, #7
     582:	1912      	adds	r2, r2, r4
     584:	4c14      	ldr	r4, [pc, #80]	; (5d8 <adc_read+0x70>)
     586:	46a4      	mov	ip, r4
     588:	4462      	add	r2, ip
     58a:	7814      	ldrb	r4, [r2, #0]
     58c:	250f      	movs	r5, #15
     58e:	402c      	ands	r4, r5
     590:	2510      	movs	r5, #16
     592:	432c      	orrs	r4, r5
     594:	7014      	strb	r4, [r2, #0]
     596:	e00b      	b.n	5b0 <adc_read+0x48>
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     598:	0842      	lsrs	r2, r0, #1
     59a:	01dc      	lsls	r4, r3, #7
     59c:	1912      	adds	r2, r2, r4
     59e:	4c0e      	ldr	r4, [pc, #56]	; (5d8 <adc_read+0x70>)
     5a0:	46a4      	mov	ip, r4
     5a2:	4462      	add	r2, ip
     5a4:	7814      	ldrb	r4, [r2, #0]
     5a6:	250f      	movs	r5, #15
     5a8:	43ac      	bics	r4, r5
     5aa:	2501      	movs	r5, #1
     5ac:	432c      	orrs	r4, r5
     5ae:	7014      	strb	r4, [r2, #0]
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     5b0:	01db      	lsls	r3, r3, #7
     5b2:	18c0      	adds	r0, r0, r3
     5b4:	4b09      	ldr	r3, [pc, #36]	; (5dc <adc_read+0x74>)
     5b6:	469c      	mov	ip, r3
     5b8:	4460      	add	r0, ip
     5ba:	7802      	ldrb	r2, [r0, #0]
     5bc:	2301      	movs	r3, #1
     5be:	4313      	orrs	r3, r2
     5c0:	7003      	strb	r3, [r0, #0]
    // switch pin mux to analog in
    pinAnalog(p);

    ADC->INPUTCTRL.reg = (ADC_INPUTCTRL_MUXPOS(p.chan) // select from proper pin
                          | ADC_INPUTCTRL_MUXNEG_GND // 0 = gnd
                          | ADC_INPUTCTRL_GAIN_1X);
     5c2:	231f      	movs	r3, #31
     5c4:	4019      	ands	r1, r3
     5c6:	23c0      	movs	r3, #192	; 0xc0
     5c8:	015b      	lsls	r3, r3, #5
     5ca:	4319      	orrs	r1, r3

u16_t adc_read(Pin p) {
    // switch pin mux to analog in
    pinAnalog(p);

    ADC->INPUTCTRL.reg = (ADC_INPUTCTRL_MUXPOS(p.chan) // select from proper pin
     5cc:	4b04      	ldr	r3, [pc, #16]	; (5e0 <adc_read+0x78>)
     5ce:	6119      	str	r1, [r3, #16]
                          | ADC_INPUTCTRL_MUXNEG_GND // 0 = gnd
                          | ADC_INPUTCTRL_GAIN_1X);

    return adcSample();
     5d0:	4b04      	ldr	r3, [pc, #16]	; (5e4 <adc_read+0x7c>)
     5d2:	4798      	blx	r3
     5d4:	b003      	add	sp, #12
     5d6:	bd30      	pop	{r4, r5, pc}
     5d8:	41004430 	.word	0x41004430
     5dc:	41004440 	.word	0x41004440
     5e0:	42004000 	.word	0x42004000
     5e4:	0000054d 	.word	0x0000054d

000005e8 <byteOut>:





void byteOut(Pin SCK_PIN, Pin MOSI_PIN, uint8_t byte) {
     5e8:	b5f0      	push	{r4, r5, r6, r7, lr}
     5ea:	b085      	sub	sp, #20
     5ec:	0c03      	lsrs	r3, r0, #16
     5ee:	0c14      	lsrs	r4, r2, #16
     5f0:	a90a      	add	r1, sp, #40	; 0x28
     5f2:	7809      	ldrb	r1, [r1, #0]
     5f4:	b2e6      	uxtb	r6, r4
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     5f6:	b2dc      	uxtb	r4, r3
     5f8:	0e00      	lsrs	r0, r0, #24
     5fa:	2701      	movs	r7, #1
     5fc:	003d      	movs	r5, r7
     5fe:	4085      	lsls	r5, r0
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     600:	0e12      	lsrs	r2, r2, #24
     602:	4097      	lsls	r7, r2
     604:	2308      	movs	r3, #8
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     606:	01e0      	lsls	r0, r4, #7
     608:	4a0a      	ldr	r2, [pc, #40]	; (634 <byteOut+0x4c>)
     60a:	4694      	mov	ip, r2
     60c:	4460      	add	r0, ip
     60e:	01f4      	lsls	r4, r6, #7
     610:	4464      	add	r4, ip
     612:	6145      	str	r5, [r0, #20]

	for (uint8_t i = 0; i<8; ++i) {
		pinLow(SCK_PIN);
		if (byte & 0x80) {
     614:	b24a      	sxtb	r2, r1
     616:	2a00      	cmp	r2, #0
     618:	da01      	bge.n	61e <byteOut+0x36>
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     61a:	61a7      	str	r7, [r4, #24]
     61c:	e000      	b.n	620 <byteOut+0x38>
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     61e:	6167      	str	r7, [r4, #20]
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     620:	6185      	str	r5, [r0, #24]
			pinHigh(MOSI_PIN);
			} else {
			pinLow(MOSI_PIN);
		}
		pinHigh(SCK_PIN);
		byte <<= 1;
     622:	0049      	lsls	r1, r1, #1
     624:	b2c9      	uxtb	r1, r1
     626:	3b01      	subs	r3, #1
     628:	b2db      	uxtb	r3, r3



void byteOut(Pin SCK_PIN, Pin MOSI_PIN, uint8_t byte) {

	for (uint8_t i = 0; i<8; ++i) {
     62a:	2b00      	cmp	r3, #0
     62c:	d1f1      	bne.n	612 <byteOut+0x2a>
			pinLow(MOSI_PIN);
		}
		pinHigh(SCK_PIN);
		byte <<= 1;
	}
}
     62e:	b005      	add	sp, #20
     630:	bdf0      	pop	{r4, r5, r6, r7, pc}
     632:	46c0      	nop			; (mov r8, r8)
     634:	41004400 	.word	0x41004400

00000638 <byteIn>:

uint8_t byteIn(Pin SCK_PIN, Pin MISO_PIN) {
     638:	b5f0      	push	{r4, r5, r6, r7, lr}
     63a:	b085      	sub	sp, #20
     63c:	0c04      	lsrs	r4, r0, #16
     63e:	9002      	str	r0, [sp, #8]
     640:	9103      	str	r1, [sp, #12]
     642:	0c11      	lsrs	r1, r2, #16
     644:	0017      	movs	r7, r2
     646:	9200      	str	r2, [sp, #0]
     648:	9301      	str	r3, [sp, #4]
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     64a:	b2e4      	uxtb	r4, r4
     64c:	0e05      	lsrs	r5, r0, #24
     64e:	2601      	movs	r6, #1
     650:	0033      	movs	r3, r6
     652:	40ab      	lsls	r3, r5
     654:	001d      	movs	r5, r3
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     656:	b2ca      	uxtb	r2, r1
     658:	0e3f      	lsrs	r7, r7, #24
     65a:	40be      	lsls	r6, r7
     65c:	2108      	movs	r1, #8
	uint8_t byte = 0x00;
     65e:	2000      	movs	r0, #0
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     660:	01e4      	lsls	r4, r4, #7
     662:	4b0a      	ldr	r3, [pc, #40]	; (68c <byteIn+0x54>)
     664:	469c      	mov	ip, r3
     666:	4464      	add	r4, ip
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     668:	01d2      	lsls	r2, r2, #7
     66a:	4462      	add	r2, ip
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     66c:	6165      	str	r5, [r4, #20]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     66e:	6a13      	ldr	r3, [r2, #32]

	for (uint8_t i = 0; i<8; ++i) {
		pinLow(SCK_PIN);
		byte = (byte << 1 ) | pinRead(MISO_PIN);
     670:	4033      	ands	r3, r6
     672:	1e5f      	subs	r7, r3, #1
     674:	41bb      	sbcs	r3, r7
     676:	0040      	lsls	r0, r0, #1
     678:	4303      	orrs	r3, r0
     67a:	b2d8      	uxtb	r0, r3
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     67c:	61a5      	str	r5, [r4, #24]
     67e:	3901      	subs	r1, #1
     680:	b2c9      	uxtb	r1, r1
}

uint8_t byteIn(Pin SCK_PIN, Pin MISO_PIN) {
	uint8_t byte = 0x00;

	for (uint8_t i = 0; i<8; ++i) {
     682:	2900      	cmp	r1, #0
     684:	d1f2      	bne.n	66c <byteIn+0x34>
		pinLow(SCK_PIN);
		byte = (byte << 1 ) | pinRead(MISO_PIN);
		pinHigh(SCK_PIN);
	}
	return byte;
     686:	b005      	add	sp, #20
     688:	bdf0      	pop	{r4, r5, r6, r7, pc}
     68a:	46c0      	nop			; (mov r8, r8)
     68c:	41004400 	.word	0x41004400

00000690 <GclkInit>:


static uint32_t cycles_per_ms = 48000000UL / 1000;
static uint32_t cycles_per_us = 48000000UL / 1000000;

void GclkInit() {
     690:	b510      	push	{r4, lr}


    SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     692:	4a1c      	ldr	r2, [pc, #112]	; (704 <GclkInit+0x74>)
     694:	23c2      	movs	r3, #194	; 0xc2
     696:	00db      	lsls	r3, r3, #3
     698:	6093      	str	r3, [r2, #8]
                           SYSCTRL_INTFLAG_DFLLRDY;
    NVMCTRL->CTRLB.reg |= NVMCTRL_CTRLB_RWS_HALF;
     69a:	491b      	ldr	r1, [pc, #108]	; (708 <GclkInit+0x78>)
     69c:	6848      	ldr	r0, [r1, #4]
     69e:	2302      	movs	r3, #2
     6a0:	4303      	orrs	r3, r0
     6a2:	604b      	str	r3, [r1, #4]


// start and enable external 32k crystal
    SYSCTRL->XOSC32K.reg = SYSCTRL_XOSC32K_ENABLE |
     6a4:	4b19      	ldr	r3, [pc, #100]	; (70c <GclkInit+0x7c>)
     6a6:	8293      	strh	r3, [r2, #20]
                           SYSCTRL_XOSC32K_XTALEN |
                           SYSCTRL_XOSC32K_EN32K |
                           ( 6 << SYSCTRL_XOSC32K_STARTUP_Pos);

    //wait for crystal to warm up
    while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_XOSC32KRDY)) == 0);
     6a8:	0011      	movs	r1, r2
     6aa:	2202      	movs	r2, #2
     6ac:	68cb      	ldr	r3, [r1, #12]
     6ae:	421a      	tst	r2, r3
     6b0:	d0fc      	beq.n	6ac <GclkInit+0x1c>

#define NVM_DFLL_COARSE_POS    58
#define NVM_DFLL_COARSE_SIZE   6
#define NVM_DFLL_FINE_POS      64
#define NVM_DFLL_FINE_SIZE     10
    uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
     6b2:	4b17      	ldr	r3, [pc, #92]	; (710 <GclkInit+0x80>)
     6b4:	681c      	ldr	r4, [r3, #0]
     6b6:	0ea4      	lsrs	r4, r4, #26
                         + (NVM_DFLL_COARSE_POS / 32))
                       >> (NVM_DFLL_COARSE_POS % 32))
                     & ((1 << NVM_DFLL_COARSE_SIZE) - 1);
    if (coarse == 0x3f) {
     6b8:	2c3f      	cmp	r4, #63	; 0x3f
     6ba:	d100      	bne.n	6be <GclkInit+0x2e>
        coarse = 0x1f;
     6bc:	3c20      	subs	r4, #32
    }
    uint32_t fine =( *((uint32_t *)(NVMCTRL_OTP4)
                       + (NVM_DFLL_FINE_POS / 32))
                     >> (NVM_DFLL_FINE_POS % 32))
     6be:	4b15      	ldr	r3, [pc, #84]	; (714 <GclkInit+0x84>)
                       >> (NVM_DFLL_COARSE_POS % 32))
                     & ((1 << NVM_DFLL_COARSE_SIZE) - 1);
    if (coarse == 0x3f) {
        coarse = 0x1f;
    }
    uint32_t fine =( *((uint32_t *)(NVMCTRL_OTP4)
     6c0:	6818      	ldr	r0, [r3, #0]
     6c2:	0580      	lsls	r0, r0, #22
     6c4:	0d80      	lsrs	r0, r0, #22
                       + (NVM_DFLL_FINE_POS / 32))
                     >> (NVM_DFLL_FINE_POS % 32))
                   & ((1 << NVM_DFLL_FINE_SIZE) - 1);
    if (fine == 0x3ff) {
     6c6:	4b14      	ldr	r3, [pc, #80]	; (718 <GclkInit+0x88>)
     6c8:	4298      	cmp	r0, r3
     6ca:	d100      	bne.n	6ce <GclkInit+0x3e>
        fine = 0x1ff;
     6cc:	4813      	ldr	r0, [pc, #76]	; (71c <GclkInit+0x8c>)
    }


    // Disable ONDEMAND mode while writing configurations (errata 9905)
    SYSCTRL->DFLLCTRL.reg = dfll_ctrl_usb & ~SYSCTRL_DFLLCTRL_ONDEMAND;
     6ce:	4a14      	ldr	r2, [pc, #80]	; (720 <GclkInit+0x90>)
     6d0:	4b0c      	ldr	r3, [pc, #48]	; (704 <GclkInit+0x74>)
     6d2:	849a      	strh	r2, [r3, #36]	; 0x24
    while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_DFLLRDY)) == 0);
     6d4:	0019      	movs	r1, r3
     6d6:	2210      	movs	r2, #16
     6d8:	68cb      	ldr	r3, [r1, #12]
     6da:	421a      	tst	r2, r3
     6dc:	d0fc      	beq.n	6d8 <GclkInit+0x48>
    SYSCTRL->DFLLVAL.reg = SYSCTRL_DFLLVAL_COARSE(coarse) | SYSCTRL_DFLLVAL_FINE(fine);
     6de:	02a4      	lsls	r4, r4, #10
     6e0:	4320      	orrs	r0, r4
     6e2:	4b08      	ldr	r3, [pc, #32]	; (704 <GclkInit+0x74>)
     6e4:	6298      	str	r0, [r3, #40]	; 0x28


    //Wait and see if the DFLL output is good . . .
    while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_DFLLRDY)) == 0);
     6e6:	0019      	movs	r1, r3
     6e8:	2210      	movs	r2, #16
     6ea:	68cb      	ldr	r3, [r1, #12]
     6ec:	421a      	tst	r2, r3
     6ee:	d0fc      	beq.n	6ea <GclkInit+0x5a>


    SYSCTRL->DFLLCTRL.reg = dfll_ctrl_usb;
     6f0:	4a0c      	ldr	r2, [pc, #48]	; (724 <GclkInit+0x94>)
     6f2:	4b04      	ldr	r3, [pc, #16]	; (704 <GclkInit+0x74>)
     6f4:	849a      	strh	r2, [r3, #36]	; 0x24


    //For generic clock generator 0, select the DFLL48 Clock as input
    GCLK->GENDIV.reg  = (GCLK_GENDIV_DIV(1)  | GCLK_GENDIV_ID(0));
     6f6:	4b0c      	ldr	r3, [pc, #48]	; (728 <GclkInit+0x98>)
     6f8:	2280      	movs	r2, #128	; 0x80
     6fa:	0052      	lsls	r2, r2, #1
     6fc:	609a      	str	r2, [r3, #8]
    GCLK->GENCTRL.reg = (GCLK_GENCTRL_ID(0)  | (GCLK_GENCTRL_SRC_DFLL48M) | (GCLK_GENCTRL_GENEN));
     6fe:	4a0b      	ldr	r2, [pc, #44]	; (72c <GclkInit+0x9c>)
     700:	605a      	str	r2, [r3, #4]
}
     702:	bd10      	pop	{r4, pc}
     704:	40000800 	.word	0x40000800
     708:	41004000 	.word	0x41004000
     70c:	0000060e 	.word	0x0000060e
     710:	00806024 	.word	0x00806024
     714:	00806028 	.word	0x00806028
     718:	000003ff 	.word	0x000003ff
     71c:	000001ff 	.word	0x000001ff
     720:	00000522 	.word	0x00000522
     724:	000005a2 	.word	0x000005a2
     728:	40000c00 	.word	0x40000c00
     72c:	00010700 	.word	0x00010700

00000730 <gclkEnable>:

void gclkEnable(u32_t id, u32_t src, u32_t div) {
     730:	b510      	push	{r4, lr}
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
     732:	230f      	movs	r3, #15
     734:	4018      	ands	r0, r3
     736:	0212      	lsls	r2, r2, #8
     738:	4b07      	ldr	r3, [pc, #28]	; (758 <gclkEnable+0x28>)
     73a:	401a      	ands	r2, r3
     73c:	4302      	orrs	r2, r0
     73e:	4c07      	ldr	r4, [pc, #28]	; (75c <gclkEnable+0x2c>)
     740:	60a2      	str	r2, [r4, #8]
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     742:	0209      	lsls	r1, r1, #8
     744:	23f8      	movs	r3, #248	; 0xf8
     746:	015b      	lsls	r3, r3, #5
     748:	4019      	ands	r1, r3
     74a:	2380      	movs	r3, #128	; 0x80
     74c:	025b      	lsls	r3, r3, #9
     74e:	4319      	orrs	r1, r3
     750:	4308      	orrs	r0, r1
     752:	6060      	str	r0, [r4, #4]
}
     754:	bd10      	pop	{r4, pc}
     756:	46c0      	nop			; (mov r8, r8)
     758:	00ffff00 	.word	0x00ffff00
     75c:	40000c00 	.word	0x40000c00

00000760 <delayInit>:


void delayInit(void) {
    cycles_per_ms = 48000000UL;
    cycles_per_ms /= 1000;
     760:	4b04      	ldr	r3, [pc, #16]	; (774 <delayInit+0x14>)
     762:	4a05      	ldr	r2, [pc, #20]	; (778 <delayInit+0x18>)
     764:	601a      	str	r2, [r3, #0]
    cycles_per_us = cycles_per_ms / 1000;
     766:	2230      	movs	r2, #48	; 0x30
     768:	605a      	str	r2, [r3, #4]

    SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     76a:	3a2b      	subs	r2, #43	; 0x2b
     76c:	4b03      	ldr	r3, [pc, #12]	; (77c <delayInit+0x1c>)
     76e:	601a      	str	r2, [r3, #0]
}
     770:	4770      	bx	lr
     772:	46c0      	nop			; (mov r8, r8)
     774:	20000004 	.word	0x20000004
     778:	0000bb80 	.word	0x0000bb80
     77c:	e000e010 	.word	0xe000e010

00000780 <delay_us>:
/**
 * \brief Delay loop to delay at least n number of microseconds
 *
 * \param n  Number of microseconds to wait
 */
void delay_us(uint32_t n) {
     780:	b530      	push	{r4, r5, lr}
    while (n--) {
        /* Devide up to blocks of 10u */
        delay_cycles(cycles_per_us);
     782:	4b08      	ldr	r3, [pc, #32]	; (7a4 <delay_us+0x24>)
     784:	685c      	ldr	r4, [r3, #4]


static inline void delay_cycles(
const uint32_t n) {
	if (n > 0) {
		SysTick->LOAD = n;
     786:	4a08      	ldr	r2, [pc, #32]	; (7a8 <delay_us+0x28>)
		SysTick->VAL = 0;
     788:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     78a:	2180      	movs	r1, #128	; 0x80
     78c:	0249      	lsls	r1, r1, #9
 * \brief Delay loop to delay at least n number of microseconds
 *
 * \param n  Number of microseconds to wait
 */
void delay_us(uint32_t n) {
    while (n--) {
     78e:	e006      	b.n	79e <delay_us+0x1e>



static inline void delay_cycles(
const uint32_t n) {
	if (n > 0) {
     790:	2c00      	cmp	r4, #0
     792:	d004      	beq.n	79e <delay_us+0x1e>
		SysTick->LOAD = n;
     794:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     796:	6095      	str	r5, [r2, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     798:	6813      	ldr	r3, [r2, #0]
     79a:	420b      	tst	r3, r1
     79c:	d0fc      	beq.n	798 <delay_us+0x18>
     79e:	3801      	subs	r0, #1
     7a0:	d2f6      	bcs.n	790 <delay_us+0x10>
        /* Devide up to blocks of 10u */
        delay_cycles(cycles_per_us);
    }
}
     7a2:	bd30      	pop	{r4, r5, pc}
     7a4:	20000004 	.word	0x20000004
     7a8:	e000e010 	.word	0xe000e010

000007ac <delay_ms>:
/**
 * \brief Delay loop to delay at least n number of milliseconds
 *
 * \param n  Number of milliseconds to wait
 */
void delay_ms(uint32_t n) {
     7ac:	b530      	push	{r4, r5, lr}
    while (n--) {
        /* Devide up to blocks of 1ms */
        delay_cycles(cycles_per_ms);
     7ae:	4b08      	ldr	r3, [pc, #32]	; (7d0 <delay_ms+0x24>)
     7b0:	681c      	ldr	r4, [r3, #0]


static inline void delay_cycles(
const uint32_t n) {
	if (n > 0) {
		SysTick->LOAD = n;
     7b2:	4a08      	ldr	r2, [pc, #32]	; (7d4 <delay_ms+0x28>)
		SysTick->VAL = 0;
     7b4:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     7b6:	2180      	movs	r1, #128	; 0x80
     7b8:	0249      	lsls	r1, r1, #9
 * \brief Delay loop to delay at least n number of milliseconds
 *
 * \param n  Number of milliseconds to wait
 */
void delay_ms(uint32_t n) {
    while (n--) {
     7ba:	e006      	b.n	7ca <delay_ms+0x1e>



static inline void delay_cycles(
const uint32_t n) {
	if (n > 0) {
     7bc:	2c00      	cmp	r4, #0
     7be:	d004      	beq.n	7ca <delay_ms+0x1e>
		SysTick->LOAD = n;
     7c0:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     7c2:	6095      	str	r5, [r2, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     7c4:	6813      	ldr	r3, [r2, #0]
     7c6:	420b      	tst	r3, r1
     7c8:	d0fc      	beq.n	7c4 <delay_ms+0x18>
     7ca:	3801      	subs	r0, #1
     7cc:	d2f6      	bcs.n	7bc <delay_ms+0x10>
        /* Devide up to blocks of 1ms */
        delay_cycles(cycles_per_ms);
    }
     7ce:	bd30      	pop	{r4, r5, pc}
     7d0:	20000004 	.word	0x20000004
     7d4:	e000e010 	.word	0xe000e010

000007d8 <dmaInit>:
#include <util.h>

DMA_DESC_ALIGN DmacDescriptor dma_descriptors[12];
DMA_DESC_ALIGN DmacDescriptor dma_descriptors_wb[12];

void dmaInit() {
     7d8:	b570      	push	{r4, r5, r6, lr}
	memset(&dma_descriptors, 0, sizeof(dma_descriptors));
     7da:	4d11      	ldr	r5, [pc, #68]	; (820 <dmaInit+0x48>)
     7dc:	22c0      	movs	r2, #192	; 0xc0
     7de:	2100      	movs	r1, #0
     7e0:	0028      	movs	r0, r5
     7e2:	4e10      	ldr	r6, [pc, #64]	; (824 <dmaInit+0x4c>)
     7e4:	47b0      	blx	r6
	memset(&dma_descriptors_wb, 0, sizeof(dma_descriptors_wb));
     7e6:	4c10      	ldr	r4, [pc, #64]	; (828 <dmaInit+0x50>)
     7e8:	22c0      	movs	r2, #192	; 0xc0
     7ea:	2100      	movs	r1, #0
     7ec:	0020      	movs	r0, r4
     7ee:	47b0      	blx	r6

	PM->AHBMASK.reg |= PM_AHBMASK_DMAC;
     7f0:	4b0e      	ldr	r3, [pc, #56]	; (82c <dmaInit+0x54>)
     7f2:	6959      	ldr	r1, [r3, #20]
     7f4:	2220      	movs	r2, #32
     7f6:	430a      	orrs	r2, r1
     7f8:	615a      	str	r2, [r3, #20]
	PM->APBBMASK.reg |= PM_APBBMASK_DMAC;
     7fa:	69d9      	ldr	r1, [r3, #28]
     7fc:	2210      	movs	r2, #16
     7fe:	430a      	orrs	r2, r1
     800:	61da      	str	r2, [r3, #28]

	DMAC->CTRL.bit.DMAENABLE = 0;
     802:	4b0b      	ldr	r3, [pc, #44]	; (830 <dmaInit+0x58>)
     804:	881a      	ldrh	r2, [r3, #0]
     806:	2102      	movs	r1, #2
     808:	438a      	bics	r2, r1
     80a:	801a      	strh	r2, [r3, #0]
	DMAC->CTRL.bit.SWRST = 1;
     80c:	8819      	ldrh	r1, [r3, #0]
     80e:	2201      	movs	r2, #1
     810:	430a      	orrs	r2, r1
     812:	801a      	strh	r2, [r3, #0]

	DMAC->BASEADDR.reg = (unsigned) &dma_descriptors;
     814:	635d      	str	r5, [r3, #52]	; 0x34
	DMAC->WRBADDR.reg = (unsigned) &dma_descriptors_wb;
     816:	639c      	str	r4, [r3, #56]	; 0x38

	DMAC->CTRL.reg = DMAC_CTRL_DMAENABLE | DMAC_CTRL_LVLEN(0xf);
     818:	4a06      	ldr	r2, [pc, #24]	; (834 <dmaInit+0x5c>)
     81a:	801a      	strh	r2, [r3, #0]
}
     81c:	bd70      	pop	{r4, r5, r6, pc}
     81e:	46c0      	nop			; (mov r8, r8)
     820:	20000520 	.word	0x20000520
     824:	00001cc9 	.word	0x00001cc9
     828:	20000460 	.word	0x20000460
     82c:	40000400 	.word	0x40000400
     830:	41004800 	.word	0x41004800
     834:	00000f02 	.word	0x00000f02

00000838 <readMS5803AdcResults>:
#include <MS5803.h>
#include <boardDefines.h>
#include <math.h>


u32_t readMS5803AdcResults() {
     838:	b5f0      	push	{r4, r5, r6, r7, lr}
     83a:	464f      	mov	r7, r9
     83c:	4646      	mov	r6, r8
     83e:	b4c0      	push	{r6, r7}
     840:	b083      	sub	sp, #12
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     842:	4e16      	ldr	r6, [pc, #88]	; (89c <readMS5803AdcResults+0x64>)
     844:	2380      	movs	r3, #128	; 0x80
     846:	021b      	lsls	r3, r3, #8
     848:	4699      	mov	r9, r3
     84a:	6173      	str	r3, [r6, #20]
    pinLow(cs_baro);
//    dummy_rx = spiDataTransfer(SPI1, cmdAdcRead_);
//    u8_t _byte1 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte2 = spiDataTransfer(SPI1,dummy_tx);
//    u8_t _byte3 = spiDataTransfer(SPI1,dummy_tx);
    byteOut(spi2SCK,spi2MOSI, cmdAdcRead_);
     84c:	4c14      	ldr	r4, [pc, #80]	; (8a0 <readMS5803AdcResults+0x68>)
     84e:	2300      	movs	r3, #0
     850:	9300      	str	r3, [sp, #0]
     852:	6822      	ldr	r2, [r4, #0]
     854:	6863      	ldr	r3, [r4, #4]
     856:	68a0      	ldr	r0, [r4, #8]
     858:	68e1      	ldr	r1, [r4, #12]
     85a:	4d12      	ldr	r5, [pc, #72]	; (8a4 <readMS5803AdcResults+0x6c>)
     85c:	47a8      	blx	r5
    u8_t _byte1 = byteIn(spi2SCK,spi2MISO);
     85e:	6922      	ldr	r2, [r4, #16]
     860:	6963      	ldr	r3, [r4, #20]
     862:	68a0      	ldr	r0, [r4, #8]
     864:	68e1      	ldr	r1, [r4, #12]
     866:	4f10      	ldr	r7, [pc, #64]	; (8a8 <readMS5803AdcResults+0x70>)
     868:	47b8      	blx	r7
     86a:	4680      	mov	r8, r0
    u8_t _byte2 = byteIn(spi2SCK,spi2MISO);
     86c:	6922      	ldr	r2, [r4, #16]
     86e:	6963      	ldr	r3, [r4, #20]
     870:	68a0      	ldr	r0, [r4, #8]
     872:	68e1      	ldr	r1, [r4, #12]
     874:	47b8      	blx	r7
     876:	0005      	movs	r5, r0
    u8_t _byte3 = byteIn(spi2SCK,spi2MISO);
     878:	6922      	ldr	r2, [r4, #16]
     87a:	6963      	ldr	r3, [r4, #20]
     87c:	68a0      	ldr	r0, [r4, #8]
     87e:	68e1      	ldr	r1, [r4, #12]
     880:	47b8      	blx	r7
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     882:	464b      	mov	r3, r9
     884:	61b3      	str	r3, [r6, #24]
    pinHigh(cs_baro);

    u32_t _receive = (_byte1 << 16) | (_byte2 << 8) | (_byte3);
    return _receive;
     886:	4643      	mov	r3, r8
     888:	041e      	lsls	r6, r3, #16
     88a:	022d      	lsls	r5, r5, #8
     88c:	4335      	orrs	r5, r6
     88e:	4328      	orrs	r0, r5
}
     890:	b003      	add	sp, #12
     892:	bc0c      	pop	{r2, r3}
     894:	4690      	mov	r8, r2
     896:	4699      	mov	r9, r3
     898:	bdf0      	pop	{r4, r5, r6, r7, pc}
     89a:	46c0      	nop			; (mov r8, r8)
     89c:	41004400 	.word	0x41004400
     8a0:	00001e8c 	.word	0x00001e8c
     8a4:	000005e9 	.word	0x000005e9
     8a8:	00000639 	.word	0x00000639

000008ac <ConvertPressureTemperature>:

void ConvertPressureTemperature(Barometer *my_barometer) {
     8ac:	b5f0      	push	{r4, r5, r6, r7, lr}
     8ae:	464f      	mov	r7, r9
     8b0:	4646      	mov	r6, r8
     8b2:	b4c0      	push	{r6, r7}
     8b4:	b08b      	sub	sp, #44	; 0x2c
     8b6:	0007      	movs	r7, r0
    volatile const u16_t C1 = my_barometer->coefficients_[0];
     8b8:	8803      	ldrh	r3, [r0, #0]
     8ba:	251e      	movs	r5, #30
     8bc:	aa02      	add	r2, sp, #8
     8be:	4694      	mov	ip, r2
     8c0:	4465      	add	r5, ip
     8c2:	802b      	strh	r3, [r5, #0]
    volatile const u16_t C2 = my_barometer->coefficients_[1];
     8c4:	8843      	ldrh	r3, [r0, #2]
     8c6:	8393      	strh	r3, [r2, #28]
    volatile const u16_t C3 = my_barometer->coefficients_[2];
     8c8:	8883      	ldrh	r3, [r0, #4]
     8ca:	8353      	strh	r3, [r2, #26]
    volatile const u16_t C4 = my_barometer->coefficients_[3];
     8cc:	88c3      	ldrh	r3, [r0, #6]
     8ce:	ae08      	add	r6, sp, #32
     8d0:	8033      	strh	r3, [r6, #0]
    volatile const u16_t C5 = my_barometer->coefficients_[4];
     8d2:	8903      	ldrh	r3, [r0, #8]
     8d4:	2216      	movs	r2, #22
     8d6:	4462      	add	r2, ip
     8d8:	8013      	strh	r3, [r2, #0]
    volatile const u16_t C6 = my_barometer->coefficients_[5];
     8da:	8941      	ldrh	r1, [r0, #10]
     8dc:	ab07      	add	r3, sp, #28
     8de:	8019      	strh	r1, [r3, #0]

    // calculate 1st order pressure and temperature (MS5607 1st order algorithm)
    const  int32_t dT = (my_barometer->rawTempatureData) - ((int32_t)C5 << 8);
     8e0:	8814      	ldrh	r4, [r2, #0]
    my_barometer->temperatureCelcus  = 2000 + (((int64_t)dT * C6) >> 32) ;
     8e2:	0224      	lsls	r4, r4, #8
     8e4:	6902      	ldr	r2, [r0, #16]
     8e6:	1b14      	subs	r4, r2, r4
     8e8:	17e2      	asrs	r2, r4, #31
     8ea:	0011      	movs	r1, r2
     8ec:	8818      	ldrh	r0, [r3, #0]
     8ee:	b280      	uxth	r0, r0
     8f0:	4b2b      	ldr	r3, [pc, #172]	; (9a0 <ConvertPressureTemperature+0xf4>)
     8f2:	4699      	mov	r9, r3
     8f4:	0022      	movs	r2, r4
     8f6:	9101      	str	r1, [sp, #4]
     8f8:	000b      	movs	r3, r1
     8fa:	2100      	movs	r1, #0
     8fc:	47c8      	blx	r9
     8fe:	23fa      	movs	r3, #250	; 0xfa
     900:	00db      	lsls	r3, r3, #3
     902:	469c      	mov	ip, r3
     904:	4461      	add	r1, ip
     906:	6179      	str	r1, [r7, #20]

    volatile const  int64_t OFF   = ((int64_t)C2 << 16) + (((C4 * (int64_t)dT)) >> 7);
     908:	ab02      	add	r3, sp, #8
     90a:	8b9b      	ldrh	r3, [r3, #28]
     90c:	b29b      	uxth	r3, r3
     90e:	4698      	mov	r8, r3
     910:	8830      	ldrh	r0, [r6, #0]
     912:	b280      	uxth	r0, r0
     914:	0022      	movs	r2, r4
     916:	9b01      	ldr	r3, [sp, #4]
     918:	2100      	movs	r1, #0
     91a:	47c8      	blx	r9
     91c:	064e      	lsls	r6, r1, #25
     91e:	09c2      	lsrs	r2, r0, #7
     920:	4332      	orrs	r2, r6
     922:	11cb      	asrs	r3, r1, #7
     924:	2100      	movs	r1, #0
     926:	4646      	mov	r6, r8
     928:	0430      	lsls	r0, r6, #16
     92a:	1812      	adds	r2, r2, r0
     92c:	414b      	adcs	r3, r1
     92e:	9204      	str	r2, [sp, #16]
     930:	9305      	str	r3, [sp, #20]
    volatile const  int64_t SENS  =  ((int64_t)C1 << 15) + (((C3 * (int64_t)dT)) >> 8);
     932:	882d      	ldrh	r5, [r5, #0]
     934:	b2ad      	uxth	r5, r5
     936:	aa02      	add	r2, sp, #8
     938:	8b50      	ldrh	r0, [r2, #26]
     93a:	b280      	uxth	r0, r0
     93c:	0022      	movs	r2, r4
     93e:	9b01      	ldr	r3, [sp, #4]
     940:	2100      	movs	r1, #0
     942:	47c8      	blx	r9
     944:	060c      	lsls	r4, r1, #24
     946:	0a02      	lsrs	r2, r0, #8
     948:	4322      	orrs	r2, r4
     94a:	120b      	asrs	r3, r1, #8
     94c:	2100      	movs	r1, #0
     94e:	03e8      	lsls	r0, r5, #15
     950:	1812      	adds	r2, r2, r0
     952:	414b      	adcs	r3, r1
     954:	9202      	str	r2, [sp, #8]
     956:	9303      	str	r3, [sp, #12]
    my_barometer->pressureMbar = (((my_barometer->rawPressureData * SENS) / 2097152) - OFF) / 32768;
     958:	9a02      	ldr	r2, [sp, #8]
     95a:	9b03      	ldr	r3, [sp, #12]
     95c:	9c04      	ldr	r4, [sp, #16]
     95e:	9d05      	ldr	r5, [sp, #20]
     960:	68f8      	ldr	r0, [r7, #12]
     962:	2100      	movs	r1, #0
     964:	47c8      	blx	r9
     966:	17ce      	asrs	r6, r1, #31
     968:	02f6      	lsls	r6, r6, #11
     96a:	0af2      	lsrs	r2, r6, #11
     96c:	2300      	movs	r3, #0
     96e:	1880      	adds	r0, r0, r2
     970:	4159      	adcs	r1, r3
     972:	02ce      	lsls	r6, r1, #11
     974:	0d42      	lsrs	r2, r0, #21
     976:	4332      	orrs	r2, r6
     978:	154b      	asrs	r3, r1, #21
     97a:	1b12      	subs	r2, r2, r4
     97c:	41ab      	sbcs	r3, r5
     97e:	17dc      	asrs	r4, r3, #31
     980:	0464      	lsls	r4, r4, #17
     982:	0c60      	lsrs	r0, r4, #17
     984:	2100      	movs	r1, #0
     986:	1812      	adds	r2, r2, r0
     988:	414b      	adcs	r3, r1
     98a:	0011      	movs	r1, r2
     98c:	045b      	lsls	r3, r3, #17
     98e:	0bca      	lsrs	r2, r1, #15
     990:	431a      	orrs	r2, r3
     992:	61fa      	str	r2, [r7, #28]
}
     994:	b00b      	add	sp, #44	; 0x2c
     996:	bc0c      	pop	{r2, r3}
     998:	4690      	mov	r8, r2
     99a:	4699      	mov	r9, r3
     99c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     99e:	46c0      	nop			; (mov r8, r8)
     9a0:	00000f19 	.word	0x00000f19

000009a4 <pascalToCent>:
    double altFeet = (1-pow((my_barometer->pressurePa/1013.25),(0.190284)))*145366.45;
    my_barometer->heightFeet = (float)altFeet;

}

void pascalToCent(Barometer *my_barometer) {
     9a4:	b570      	push	{r4, r5, r6, lr}
     9a6:	0004      	movs	r4, r0
        748275, 767202, 786555, 806356, 826627,
        847395, 868688, 890537, 912974, 936037,
        959766, 984206
    };

    my_barometer->pressurePa = my_barometer->pressureMbar *10;
     9a8:	69c2      	ldr	r2, [r0, #28]
     9aa:	0093      	lsls	r3, r2, #2
     9ac:	189b      	adds	r3, r3, r2
     9ae:	005b      	lsls	r3, r3, #1
     9b0:	6183      	str	r3, [r0, #24]

    if (my_barometer->pressurePa > PA_INIT)
     9b2:	4a11      	ldr	r2, [pc, #68]	; (9f8 <pascalToCent+0x54>)
     9b4:	4293      	cmp	r3, r2
     9b6:	d902      	bls.n	9be <pascalToCent+0x1a>
        my_barometer->heightCm = lookupTable[0];
     9b8:	4b10      	ldr	r3, [pc, #64]	; (9fc <pascalToCent+0x58>)
     9ba:	6203      	str	r3, [r0, #32]
     9bc:	e01a      	b.n	9f4 <pascalToCent+0x50>
    else {
        const int32_t inx = (PA_INIT - my_barometer->pressurePa) >> 10;
     9be:	4a0e      	ldr	r2, [pc, #56]	; (9f8 <pascalToCent+0x54>)
     9c0:	1ad2      	subs	r2, r2, r3
     9c2:	0a92      	lsrs	r2, r2, #10
        if (inx >= PZLUT_ENTRIES - 1)
     9c4:	2a4b      	cmp	r2, #75	; 0x4b
     9c6:	dd02      	ble.n	9ce <pascalToCent+0x2a>
            my_barometer->heightCm = lookupTable[PZLUT_ENTRIES - 1];
     9c8:	4b0d      	ldr	r3, [pc, #52]	; (a00 <pascalToCent+0x5c>)
     9ca:	6203      	str	r3, [r0, #32]
     9cc:	e012      	b.n	9f4 <pascalToCent+0x50>
        else {
            const int32_t pa1 = PA_INIT - (inx << 10);
            const int32_t z1 = lookupTable[inx];
     9ce:	4d0d      	ldr	r5, [pc, #52]	; (a04 <pascalToCent+0x60>)
     9d0:	0091      	lsls	r1, r2, #2
     9d2:	1869      	adds	r1, r5, r1
     9d4:	6988      	ldr	r0, [r1, #24]
            const int32_t z2 = lookupTable[inx + 1];
            my_barometer->heightCm = (z1 + (((pa1 - my_barometer->pressurePa) * (z2 - z1)) >> 10));
     9d6:	0296      	lsls	r6, r2, #10
     9d8:	4907      	ldr	r1, [pc, #28]	; (9f8 <pascalToCent+0x54>)
     9da:	1b89      	subs	r1, r1, r6
     9dc:	1acb      	subs	r3, r1, r3
        if (inx >= PZLUT_ENTRIES - 1)
            my_barometer->heightCm = lookupTable[PZLUT_ENTRIES - 1];
        else {
            const int32_t pa1 = PA_INIT - (inx << 10);
            const int32_t z1 = lookupTable[inx];
            const int32_t z2 = lookupTable[inx + 1];
     9de:	3201      	adds	r2, #1
     9e0:	0092      	lsls	r2, r2, #2
     9e2:	18aa      	adds	r2, r5, r2
            my_barometer->heightCm = (z1 + (((pa1 - my_barometer->pressurePa) * (z2 - z1)) >> 10));
     9e4:	6992      	ldr	r2, [r2, #24]
     9e6:	1a12      	subs	r2, r2, r0
     9e8:	4353      	muls	r3, r2
     9ea:	0a9b      	lsrs	r3, r3, #10
     9ec:	1818      	adds	r0, r3, r0
     9ee:	4b06      	ldr	r3, [pc, #24]	; (a08 <pascalToCent+0x64>)
     9f0:	4798      	blx	r3
     9f2:	6220      	str	r0, [r4, #32]
        }
    }
}
     9f4:	bd70      	pop	{r4, r5, r6, pc}
     9f6:	46c0      	nop			; (mov r8, r8)
     9f8:	000199cc 	.word	0x000199cc
     9fc:	c6e5c000 	.word	0xc6e5c000
     a00:	497048e0 	.word	0x497048e0
     a04:	00001e8c 	.word	0x00001e8c
     a08:	00001491 	.word	0x00001491

00000a0c <readMS5803Coefficients>:

void readMS5803Coefficients(Barometer *my_barometer) {
     a0c:	b5f0      	push	{r4, r5, r6, r7, lr}
     a0e:	465f      	mov	r7, fp
     a10:	4656      	mov	r6, sl
     a12:	464d      	mov	r5, r9
     a14:	4644      	mov	r4, r8
     a16:	b4f0      	push	{r4, r5, r6, r7}
     a18:	b083      	sub	sp, #12
     a1a:	0007      	movs	r7, r0
     a1c:	26a2      	movs	r6, #162	; 0xa2

    u8_t dummy_tx = 0xFF;
    u8_t dummy_rx;

    for (u8_t coeff_num = 0; coeff_num < 6 ; ++coeff_num ) {
        delay_us(600);
     a1e:	4b1a      	ldr	r3, [pc, #104]	; (a88 <readMS5803Coefficients+0x7c>)
     a20:	469a      	mov	sl, r3
        delay_us(600);
        pinLow(cs_baro);
//      dummy_rx = spiDataTransfer(SPI1, _cmd);
//      u8_t _byte1 = spiDataTransfer(SPI1,dummy_tx);
//      u8_t _byte2 = spiDataTransfer(SPI1,dummy_tx);
        byteOut(spi2SCK,spi2MOSI, _cmd);
     a22:	4c1a      	ldr	r4, [pc, #104]	; (a8c <readMS5803Coefficients+0x80>)

    u8_t dummy_tx = 0xFF;
    u8_t dummy_rx;

    for (u8_t coeff_num = 0; coeff_num < 6 ; ++coeff_num ) {
        delay_us(600);
     a24:	2596      	movs	r5, #150	; 0x96
     a26:	00ad      	lsls	r5, r5, #2
     a28:	0028      	movs	r0, r5
     a2a:	47d0      	blx	sl
        u8_t _cmd = MS5803_CMD_PROM_READ + ((coeff_num+1)*2);
        delay_us(600);
     a2c:	0028      	movs	r0, r5
     a2e:	47d0      	blx	sl
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     a30:	2380      	movs	r3, #128	; 0x80
     a32:	021b      	lsls	r3, r3, #8
     a34:	4699      	mov	r9, r3
     a36:	4a16      	ldr	r2, [pc, #88]	; (a90 <readMS5803Coefficients+0x84>)
     a38:	6153      	str	r3, [r2, #20]
        pinLow(cs_baro);
//      dummy_rx = spiDataTransfer(SPI1, _cmd);
//      u8_t _byte1 = spiDataTransfer(SPI1,dummy_tx);
//      u8_t _byte2 = spiDataTransfer(SPI1,dummy_tx);
        byteOut(spi2SCK,spi2MOSI, _cmd);
     a3a:	9600      	str	r6, [sp, #0]
     a3c:	6822      	ldr	r2, [r4, #0]
     a3e:	6863      	ldr	r3, [r4, #4]
     a40:	68a0      	ldr	r0, [r4, #8]
     a42:	68e1      	ldr	r1, [r4, #12]
     a44:	4d13      	ldr	r5, [pc, #76]	; (a94 <readMS5803Coefficients+0x88>)
     a46:	47a8      	blx	r5
        u8_t _byte1 = byteIn(spi2SCK,spi2MISO);
     a48:	6922      	ldr	r2, [r4, #16]
     a4a:	6963      	ldr	r3, [r4, #20]
     a4c:	68a0      	ldr	r0, [r4, #8]
     a4e:	68e1      	ldr	r1, [r4, #12]
     a50:	4d11      	ldr	r5, [pc, #68]	; (a98 <readMS5803Coefficients+0x8c>)
     a52:	47a8      	blx	r5
     a54:	4680      	mov	r8, r0
        u8_t _byte2 = byteIn(spi2SCK,spi2MISO);
     a56:	6922      	ldr	r2, [r4, #16]
     a58:	6963      	ldr	r3, [r4, #20]
     a5a:	68a0      	ldr	r0, [r4, #8]
     a5c:	68e1      	ldr	r1, [r4, #12]
     a5e:	47a8      	blx	r5
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     a60:	464b      	mov	r3, r9
     a62:	4a0b      	ldr	r2, [pc, #44]	; (a90 <readMS5803Coefficients+0x84>)
     a64:	6193      	str	r3, [r2, #24]
        pinHigh(cs_baro);
        my_barometer->coefficients_[coeff_num] = (_byte1 << 8) | _byte2;
     a66:	4643      	mov	r3, r8
     a68:	021d      	lsls	r5, r3, #8
     a6a:	4328      	orrs	r0, r5
     a6c:	8038      	strh	r0, [r7, #0]
     a6e:	3602      	adds	r6, #2
     a70:	b2f6      	uxtb	r6, r6
     a72:	3702      	adds	r7, #2
void readMS5803Coefficients(Barometer *my_barometer) {

    u8_t dummy_tx = 0xFF;
    u8_t dummy_rx;

    for (u8_t coeff_num = 0; coeff_num < 6 ; ++coeff_num ) {
     a74:	2eae      	cmp	r6, #174	; 0xae
     a76:	d1d5      	bne.n	a24 <readMS5803Coefficients+0x18>
        u8_t _byte2 = byteIn(spi2SCK,spi2MISO);
        pinHigh(cs_baro);
        my_barometer->coefficients_[coeff_num] = (_byte1 << 8) | _byte2;
    }

}
     a78:	b003      	add	sp, #12
     a7a:	bc3c      	pop	{r2, r3, r4, r5}
     a7c:	4690      	mov	r8, r2
     a7e:	4699      	mov	r9, r3
     a80:	46a2      	mov	sl, r4
     a82:	46ab      	mov	fp, r5
     a84:	bdf0      	pop	{r4, r5, r6, r7, pc}
     a86:	46c0      	nop			; (mov r8, r8)
     a88:	00000781 	.word	0x00000781
     a8c:	00001e8c 	.word	0x00001e8c
     a90:	41004400 	.word	0x41004400
     a94:	000005e9 	.word	0x000005e9
     a98:	00000639 	.word	0x00000639

00000a9c <initMS5803Barometer>:

void initMS5803Barometer(Barometer *my_barometer) {
     a9c:	b5f0      	push	{r4, r5, r6, r7, lr}
     a9e:	b083      	sub	sp, #12
     aa0:	0004      	movs	r4, r0
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     aa2:	4d10      	ldr	r5, [pc, #64]	; (ae4 <initMS5803Barometer+0x48>)
     aa4:	2680      	movs	r6, #128	; 0x80
     aa6:	0236      	lsls	r6, r6, #8
     aa8:	616e      	str	r6, [r5, #20]
    u8_t dummy_tx = 0xFF;
    u8_t dummy_rx;

    pinLow(cs_baro);
//   dummy_rx = spiDataTransfer(SPI1, MS5803_CMD_RES);
    byteOut(spi2SCK,spi2MOSI, MS5803_CMD_RES);
     aaa:	490f      	ldr	r1, [pc, #60]	; (ae8 <initMS5803Barometer+0x4c>)
     aac:	231e      	movs	r3, #30
     aae:	9300      	str	r3, [sp, #0]
     ab0:	680a      	ldr	r2, [r1, #0]
     ab2:	684b      	ldr	r3, [r1, #4]
     ab4:	6888      	ldr	r0, [r1, #8]
     ab6:	68c9      	ldr	r1, [r1, #12]
     ab8:	4f0c      	ldr	r7, [pc, #48]	; (aec <initMS5803Barometer+0x50>)
     aba:	47b8      	blx	r7
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     abc:	61ae      	str	r6, [r5, #24]
    pinHigh(cs_baro);
    delay_ms(200);
     abe:	20c8      	movs	r0, #200	; 0xc8
     ac0:	4b0b      	ldr	r3, [pc, #44]	; (af0 <initMS5803Barometer+0x54>)
     ac2:	4798      	blx	r3
    readMS5803Coefficients(my_barometer);
     ac4:	0020      	movs	r0, r4
     ac6:	4b0b      	ldr	r3, [pc, #44]	; (af4 <initMS5803Barometer+0x58>)
     ac8:	4798      	blx	r3

    my_barometer->heightCm = 4000;
     aca:	4b0b      	ldr	r3, [pc, #44]	; (af8 <initMS5803Barometer+0x5c>)
     acc:	6223      	str	r3, [r4, #32]
    my_barometer->pressurePa = 10000;
     ace:	4b0b      	ldr	r3, [pc, #44]	; (afc <initMS5803Barometer+0x60>)
     ad0:	61a3      	str	r3, [r4, #24]
    my_barometer->rawPressureData = 4311550;
     ad2:	4b0b      	ldr	r3, [pc, #44]	; (b00 <initMS5803Barometer+0x64>)
     ad4:	60e3      	str	r3, [r4, #12]
    my_barometer->rawTempatureData = 8387300;
     ad6:	4b0b      	ldr	r3, [pc, #44]	; (b04 <initMS5803Barometer+0x68>)
     ad8:	6123      	str	r3, [r4, #16]
    my_barometer->temperatureCelcus = 2000;
     ada:	23fa      	movs	r3, #250	; 0xfa
     adc:	00db      	lsls	r3, r3, #3
     ade:	6163      	str	r3, [r4, #20]




}
     ae0:	b003      	add	sp, #12
     ae2:	bdf0      	pop	{r4, r5, r6, r7, pc}
     ae4:	41004400 	.word	0x41004400
     ae8:	00001e8c 	.word	0x00001e8c
     aec:	000005e9 	.word	0x000005e9
     af0:	000007ad 	.word	0x000007ad
     af4:	00000a0d 	.word	0x00000a0d
     af8:	457a0000 	.word	0x457a0000
     afc:	00002710 	.word	0x00002710
     b00:	0041c9fe 	.word	0x0041c9fe
     b04:	007ffae4 	.word	0x007ffae4

00000b08 <sampleTick>:
#include <boardDefines.h>
#include <MS5803.h>



void sampleTick(Altimeter *my_altimeter) {
     b08:	b5f0      	push	{r4, r5, r6, r7, lr}
     b0a:	465f      	mov	r7, fp
     b0c:	4656      	mov	r6, sl
     b0e:	464d      	mov	r5, r9
     b10:	4644      	mov	r4, r8
     b12:	b4f0      	push	{r4, r5, r6, r7}
     b14:	b083      	sub	sp, #12
     b16:	0004      	movs	r4, r0

    my_altimeter->batV = (0.001906 * adc_read(senseBatPin));
     b18:	4dad      	ldr	r5, [pc, #692]	; (dd0 <sampleTick+0x2c8>)
     b1a:	6828      	ldr	r0, [r5, #0]
     b1c:	6869      	ldr	r1, [r5, #4]
     b1e:	4bad      	ldr	r3, [pc, #692]	; (dd4 <sampleTick+0x2cc>)
     b20:	4798      	blx	r3
     b22:	4bad      	ldr	r3, [pc, #692]	; (dd8 <sampleTick+0x2d0>)
     b24:	4798      	blx	r3
     b26:	4bad      	ldr	r3, [pc, #692]	; (ddc <sampleTick+0x2d4>)
     b28:	4698      	mov	r8, r3
     b2a:	4aad      	ldr	r2, [pc, #692]	; (de0 <sampleTick+0x2d8>)
     b2c:	4bad      	ldr	r3, [pc, #692]	; (de4 <sampleTick+0x2dc>)
     b2e:	47c0      	blx	r8
     b30:	4bad      	ldr	r3, [pc, #692]	; (de8 <sampleTick+0x2e0>)
     b32:	4798      	blx	r3
     b34:	6620      	str	r0, [r4, #96]	; 0x60
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     b36:	4ead      	ldr	r6, [pc, #692]	; (dec <sampleTick+0x2e4>)
     b38:	2380      	movs	r3, #128	; 0x80
     b3a:	021b      	lsls	r3, r3, #8
     b3c:	6173      	str	r3, [r6, #20]
    uint8_t dummy_rx;


    pinLow(cs_baro);
    // dummy_rx = spiDataTransfer(SPI2, 0x50);
    byteOut(spi2SCK,spi2MOSI, 0x50);
     b3e:	2350      	movs	r3, #80	; 0x50
     b40:	9300      	str	r3, [sp, #0]
     b42:	68aa      	ldr	r2, [r5, #8]
     b44:	68eb      	ldr	r3, [r5, #12]
     b46:	6928      	ldr	r0, [r5, #16]
     b48:	6969      	ldr	r1, [r5, #20]
     b4a:	4fa9      	ldr	r7, [pc, #676]	; (df0 <sampleTick+0x2e8>)
     b4c:	47b8      	blx	r7
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     b4e:	2380      	movs	r3, #128	; 0x80
     b50:	021b      	lsls	r3, r3, #8
     b52:	61b3      	str	r3, [r6, #24]
    pinHigh(cs_baro);
    delay_ms(2);
     b54:	2002      	movs	r0, #2
     b56:	4ba7      	ldr	r3, [pc, #668]	; (df4 <sampleTick+0x2ec>)
     b58:	469a      	mov	sl, r3
     b5a:	4798      	blx	r3
    my_altimeter->myBarometer.rawTempatureData = readMS5803AdcResults();
     b5c:	4ba6      	ldr	r3, [pc, #664]	; (df8 <sampleTick+0x2f0>)
     b5e:	4699      	mov	r9, r3
     b60:	4798      	blx	r3
     b62:	6120      	str	r0, [r4, #16]
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     b64:	2380      	movs	r3, #128	; 0x80
     b66:	021b      	lsls	r3, r3, #8
     b68:	6173      	str	r3, [r6, #20]

    pinLow(cs_baro);
    //  dummy_rx = spiDataTransfer(SPI2, 0x42);
    byteOut(spi2SCK,spi2MOSI, 0x42);
     b6a:	2342      	movs	r3, #66	; 0x42
     b6c:	9300      	str	r3, [sp, #0]
     b6e:	68aa      	ldr	r2, [r5, #8]
     b70:	68eb      	ldr	r3, [r5, #12]
     b72:	6928      	ldr	r0, [r5, #16]
     b74:	6969      	ldr	r1, [r5, #20]
     b76:	47b8      	blx	r7
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     b78:	2380      	movs	r3, #128	; 0x80
     b7a:	021b      	lsls	r3, r3, #8
     b7c:	61b3      	str	r3, [r6, #24]
    pinHigh(cs_baro);
    delay_ms(2);
     b7e:	2002      	movs	r0, #2
     b80:	47d0      	blx	sl
    my_altimeter->myBarometer.rawPressureData = readMS5803AdcResults();
     b82:	47c8      	blx	r9
     b84:	60e0      	str	r0, [r4, #12]


    ConvertPressureTemperature(&my_altimeter->myBarometer);
     b86:	0020      	movs	r0, r4
     b88:	4b9c      	ldr	r3, [pc, #624]	; (dfc <sampleTick+0x2f4>)
     b8a:	4798      	blx	r3
    pascalToCent(&my_altimeter->myBarometer);
     b8c:	0020      	movs	r0, r4
     b8e:	4b9c      	ldr	r3, [pc, #624]	; (e00 <sampleTick+0x2f8>)
     b90:	4798      	blx	r3
    my_altimeter->myBarometer.heightFeet = 0.03281 * my_altimeter->myBarometer.heightCm;
     b92:	6a20      	ldr	r0, [r4, #32]
     b94:	4b9b      	ldr	r3, [pc, #620]	; (e04 <sampleTick+0x2fc>)
     b96:	4798      	blx	r3
     b98:	4a9b      	ldr	r2, [pc, #620]	; (e08 <sampleTick+0x300>)
     b9a:	4b9c      	ldr	r3, [pc, #624]	; (e0c <sampleTick+0x304>)
     b9c:	47c0      	blx	r8
     b9e:	4b92      	ldr	r3, [pc, #584]	; (de8 <sampleTick+0x2e0>)
     ba0:	4798      	blx	r3
     ba2:	6260      	str	r0, [r4, #36]	; 0x24
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     ba4:	2380      	movs	r3, #128	; 0x80
     ba6:	00db      	lsls	r3, r3, #3
     ba8:	469b      	mov	fp, r3
     baa:	2394      	movs	r3, #148	; 0x94
     bac:	465a      	mov	r2, fp
     bae:	50f2      	str	r2, [r6, r3]

// Accel data
    pinLow(cs_accel);
    dummy_rx = spiDataTransfer(SPI0, 0x80 | 0x02);
     bb0:	2182      	movs	r1, #130	; 0x82
     bb2:	2000      	movs	r0, #0
     bb4:	4d96      	ldr	r5, [pc, #600]	; (e10 <sampleTick+0x308>)
     bb6:	47a8      	blx	r5
    my_altimeter->myIMU.accelXLow = spiDataTransfer(SPI0,dummy_Tx);
     bb8:	21ff      	movs	r1, #255	; 0xff
     bba:	2000      	movs	r0, #0
     bbc:	47a8      	blx	r5
     bbe:	2341      	movs	r3, #65	; 0x41
     bc0:	4698      	mov	r8, r3
     bc2:	54e0      	strb	r0, [r4, r3]
    my_altimeter->myIMU.accelXHigh = spiDataTransfer(SPI0,dummy_Tx);
     bc4:	21ff      	movs	r1, #255	; 0xff
     bc6:	2000      	movs	r0, #0
     bc8:	47a8      	blx	r5
     bca:	2340      	movs	r3, #64	; 0x40
     bcc:	469a      	mov	sl, r3
     bce:	54e0      	strb	r0, [r4, r3]
    my_altimeter->myIMU.accelYLow = spiDataTransfer(SPI0,dummy_Tx);
     bd0:	21ff      	movs	r1, #255	; 0xff
     bd2:	2000      	movs	r0, #0
     bd4:	47a8      	blx	r5
     bd6:	2745      	movs	r7, #69	; 0x45
     bd8:	55e0      	strb	r0, [r4, r7]
    my_altimeter->myIMU.accelYHigh = spiDataTransfer(SPI0,dummy_Tx);
     bda:	21ff      	movs	r1, #255	; 0xff
     bdc:	2000      	movs	r0, #0
     bde:	47a8      	blx	r5
     be0:	2344      	movs	r3, #68	; 0x44
     be2:	4699      	mov	r9, r3
     be4:	54e0      	strb	r0, [r4, r3]
    my_altimeter->myIMU.accelZLow = spiDataTransfer(SPI0,dummy_Tx);
     be6:	21ff      	movs	r1, #255	; 0xff
     be8:	2000      	movs	r0, #0
     bea:	47a8      	blx	r5
     bec:	2349      	movs	r3, #73	; 0x49
     bee:	54e0      	strb	r0, [r4, r3]
    my_altimeter->myIMU.accelZHigh = spiDataTransfer(SPI0,dummy_Tx);
     bf0:	21ff      	movs	r1, #255	; 0xff
     bf2:	2000      	movs	r0, #0
     bf4:	47a8      	blx	r5
     bf6:	2348      	movs	r3, #72	; 0x48
     bf8:	54e0      	strb	r0, [r4, r3]
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     bfa:	2298      	movs	r2, #152	; 0x98
     bfc:	4659      	mov	r1, fp
     bfe:	50b1      	str	r1, [r6, r2]
    pinHigh(cs_accel);

    bool negativeX = (my_altimeter->myIMU.accelXHigh & (1<<7)) != 0;
     c00:	4652      	mov	r2, sl
     c02:	5ca0      	ldrb	r0, [r4, r2]
    bool negativeY = (my_altimeter->myIMU.accelYHigh & (1<<7)) != 0;
     c04:	464a      	mov	r2, r9
     c06:	5ca1      	ldrb	r1, [r4, r2]
    bool negativeZ = (my_altimeter->myIMU.accelZHigh & (1<<7)) != 0;
     c08:	5ce2      	ldrb	r2, [r4, r3]

    my_altimeter->myIMU.accelXint = (my_altimeter->myIMU.accelXHigh << 8) | my_altimeter->myIMU.accelXLow;
     c0a:	0203      	lsls	r3, r0, #8
     c0c:	4645      	mov	r5, r8
     c0e:	5d65      	ldrb	r5, [r4, r5]
     c10:	431d      	orrs	r5, r3
     c12:	b22d      	sxth	r5, r5
     c14:	2342      	movs	r3, #66	; 0x42
     c16:	52e5      	strh	r5, [r4, r3]
    my_altimeter->myIMU.accelYint = (my_altimeter->myIMU.accelYHigh << 8) | my_altimeter->myIMU.accelYLow;
     c18:	020b      	lsls	r3, r1, #8
     c1a:	5de6      	ldrb	r6, [r4, r7]
     c1c:	4333      	orrs	r3, r6
     c1e:	b21e      	sxth	r6, r3
     c20:	2346      	movs	r3, #70	; 0x46
     c22:	52e6      	strh	r6, [r4, r3]
    my_altimeter->myIMU.accelZint = (my_altimeter->myIMU.accelZHigh << 8) | my_altimeter->myIMU.accelZLow;
     c24:	0213      	lsls	r3, r2, #8
     c26:	3704      	adds	r7, #4
     c28:	5de7      	ldrb	r7, [r4, r7]
     c2a:	433b      	orrs	r3, r7
     c2c:	b21b      	sxth	r3, r3
     c2e:	274a      	movs	r7, #74	; 0x4a
     c30:	53e3      	strh	r3, [r4, r7]

    if (my_altimeter->myIMU.accelXHigh != 1) {
     c32:	2801      	cmp	r0, #1
     c34:	d009      	beq.n	c4a <sampleTick+0x142>
        if (negativeX) {
     c36:	b240      	sxtb	r0, r0
     c38:	2800      	cmp	r0, #0
     c3a:	da03      	bge.n	c44 <sampleTick+0x13c>
            my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXint | ~((1 << 16) - 1);
            my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXint >> 4;
     c3c:	112d      	asrs	r5, r5, #4
     c3e:	2042      	movs	r0, #66	; 0x42
     c40:	5225      	strh	r5, [r4, r0]
     c42:	e002      	b.n	c4a <sampleTick+0x142>
        } else {
            my_altimeter->myIMU.accelXint = my_altimeter->myIMU.accelXint >> 4;
     c44:	112d      	asrs	r5, r5, #4
     c46:	2042      	movs	r0, #66	; 0x42
     c48:	5225      	strh	r5, [r4, r0]
        }
    }

    if (my_altimeter->myIMU.accelYHigh != 1) {
     c4a:	2901      	cmp	r1, #1
     c4c:	d009      	beq.n	c62 <sampleTick+0x15a>
        if (negativeY) {
     c4e:	b249      	sxtb	r1, r1
     c50:	2900      	cmp	r1, #0
     c52:	da03      	bge.n	c5c <sampleTick+0x154>
            my_altimeter->myIMU.accelYint = my_altimeter->myIMU.accelYint | ~((1 << 16) - 1);
            my_altimeter->myIMU.accelYint = my_altimeter->myIMU.accelYint >> 4;
     c54:	1136      	asrs	r6, r6, #4
     c56:	2146      	movs	r1, #70	; 0x46
     c58:	5266      	strh	r6, [r4, r1]
     c5a:	e002      	b.n	c62 <sampleTick+0x15a>
        } else {
            my_altimeter->myIMU.accelYint = my_altimeter->myIMU.accelYint >> 4;
     c5c:	1136      	asrs	r6, r6, #4
     c5e:	2146      	movs	r1, #70	; 0x46
     c60:	5266      	strh	r6, [r4, r1]
        }
    }

    if (my_altimeter->myIMU.accelZHigh != 1) {
     c62:	2a01      	cmp	r2, #1
     c64:	d009      	beq.n	c7a <sampleTick+0x172>
        if (negativeZ) {
     c66:	b252      	sxtb	r2, r2
     c68:	2a00      	cmp	r2, #0
     c6a:	da03      	bge.n	c74 <sampleTick+0x16c>
            my_altimeter->myIMU.accelZint = my_altimeter->myIMU.accelZint | ~((1 << 16) - 1);
            my_altimeter->myIMU.accelZint = my_altimeter->myIMU.accelZint >> 4;
     c6c:	111b      	asrs	r3, r3, #4
     c6e:	224a      	movs	r2, #74	; 0x4a
     c70:	52a3      	strh	r3, [r4, r2]
     c72:	e002      	b.n	c7a <sampleTick+0x172>
        } else {
            my_altimeter->myIMU.accelZint = my_altimeter->myIMU.accelZint >> 4;
     c74:	111b      	asrs	r3, r3, #4
     c76:	224a      	movs	r2, #74	; 0x4a
     c78:	52a3      	strh	r3, [r4, r2]
        }
    }

    my_altimeter->myIMU.accelX = my_altimeter->myIMU.accelXint * .00781;
     c7a:	2342      	movs	r3, #66	; 0x42
     c7c:	5ee0      	ldrsh	r0, [r4, r3]
     c7e:	4f56      	ldr	r7, [pc, #344]	; (dd8 <sampleTick+0x2d0>)
     c80:	47b8      	blx	r7
     c82:	4e56      	ldr	r6, [pc, #344]	; (ddc <sampleTick+0x2d4>)
     c84:	4a63      	ldr	r2, [pc, #396]	; (e14 <sampleTick+0x30c>)
     c86:	4b64      	ldr	r3, [pc, #400]	; (e18 <sampleTick+0x310>)
     c88:	47b0      	blx	r6
     c8a:	4d57      	ldr	r5, [pc, #348]	; (de8 <sampleTick+0x2e0>)
     c8c:	47a8      	blx	r5
     c8e:	62a0      	str	r0, [r4, #40]	; 0x28
    my_altimeter->myIMU.accelY = my_altimeter->myIMU.accelYint * .00781;
     c90:	2346      	movs	r3, #70	; 0x46
     c92:	5ee0      	ldrsh	r0, [r4, r3]
     c94:	47b8      	blx	r7
     c96:	4a5f      	ldr	r2, [pc, #380]	; (e14 <sampleTick+0x30c>)
     c98:	4b5f      	ldr	r3, [pc, #380]	; (e18 <sampleTick+0x310>)
     c9a:	47b0      	blx	r6
     c9c:	47a8      	blx	r5
     c9e:	62e0      	str	r0, [r4, #44]	; 0x2c
    my_altimeter->myIMU.accelZ = my_altimeter->myIMU.accelZint * .00781;
     ca0:	234a      	movs	r3, #74	; 0x4a
     ca2:	5ee0      	ldrsh	r0, [r4, r3]
     ca4:	47b8      	blx	r7
     ca6:	4a5b      	ldr	r2, [pc, #364]	; (e14 <sampleTick+0x30c>)
     ca8:	4b5b      	ldr	r3, [pc, #364]	; (e18 <sampleTick+0x310>)
     caa:	47b0      	blx	r6
     cac:	47a8      	blx	r5
     cae:	6320      	str	r0, [r4, #48]	; 0x30
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     cb0:	4b4e      	ldr	r3, [pc, #312]	; (dec <sampleTick+0x2e4>)
     cb2:	469a      	mov	sl, r3
     cb4:	2380      	movs	r3, #128	; 0x80
     cb6:	00db      	lsls	r3, r3, #3
     cb8:	469b      	mov	fp, r3
     cba:	4653      	mov	r3, sl
     cbc:	465a      	mov	r2, fp
     cbe:	615a      	str	r2, [r3, #20]


    // Gyro data
    pinLow(cs_gyro);
    dummy_rx = spiDataTransfer(SPI0, 0x80 | 0x02);
     cc0:	2182      	movs	r1, #130	; 0x82
     cc2:	2000      	movs	r0, #0
     cc4:	4d52      	ldr	r5, [pc, #328]	; (e10 <sampleTick+0x308>)
     cc6:	47a8      	blx	r5
    my_altimeter->myIMU.gyroXLow = spiDataTransfer(SPI0,dummy_Tx);
     cc8:	21ff      	movs	r1, #255	; 0xff
     cca:	2000      	movs	r0, #0
     ccc:	47a8      	blx	r5
     cce:	274d      	movs	r7, #77	; 0x4d
     cd0:	55e0      	strb	r0, [r4, r7]
    my_altimeter->myIMU.gyroXHigh = spiDataTransfer(SPI0,dummy_Tx);
     cd2:	21ff      	movs	r1, #255	; 0xff
     cd4:	2000      	movs	r0, #0
     cd6:	47a8      	blx	r5
     cd8:	234c      	movs	r3, #76	; 0x4c
     cda:	4699      	mov	r9, r3
     cdc:	54e0      	strb	r0, [r4, r3]
    my_altimeter->myIMU.gyroYLow = spiDataTransfer(SPI0,dummy_Tx);
     cde:	21ff      	movs	r1, #255	; 0xff
     ce0:	2000      	movs	r0, #0
     ce2:	47a8      	blx	r5
     ce4:	2651      	movs	r6, #81	; 0x51
     ce6:	55a0      	strb	r0, [r4, r6]
    my_altimeter->myIMU.gyroYHigh = spiDataTransfer(SPI0,dummy_Tx);
     ce8:	21ff      	movs	r1, #255	; 0xff
     cea:	2000      	movs	r0, #0
     cec:	47a8      	blx	r5
     cee:	2350      	movs	r3, #80	; 0x50
     cf0:	4698      	mov	r8, r3
     cf2:	54e0      	strb	r0, [r4, r3]
    my_altimeter->myIMU.gyroZLow = spiDataTransfer(SPI0,dummy_Tx);
     cf4:	21ff      	movs	r1, #255	; 0xff
     cf6:	2000      	movs	r0, #0
     cf8:	47a8      	blx	r5
     cfa:	2355      	movs	r3, #85	; 0x55
     cfc:	54e0      	strb	r0, [r4, r3]
    my_altimeter->myIMU.gyroZHigh = spiDataTransfer(SPI0,dummy_Tx);
     cfe:	21ff      	movs	r1, #255	; 0xff
     d00:	2000      	movs	r0, #0
     d02:	47a8      	blx	r5
     d04:	2354      	movs	r3, #84	; 0x54
     d06:	54e0      	strb	r0, [r4, r3]
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     d08:	4652      	mov	r2, sl
     d0a:	4659      	mov	r1, fp
     d0c:	6191      	str	r1, [r2, #24]
    pinHigh(cs_gyro);

    bool negativeXgyro = (my_altimeter->myIMU.gyroXHigh & (1<<7)) != 0;
     d0e:	464a      	mov	r2, r9
     d10:	5ca1      	ldrb	r1, [r4, r2]
    bool negativeYgyro = (my_altimeter->myIMU.gyroYHigh & (1<<7)) != 0;
     d12:	4642      	mov	r2, r8
     d14:	5ca2      	ldrb	r2, [r4, r2]
    bool negativeZgyro = (my_altimeter->myIMU.gyroZHigh & (1<<7)) != 0;
     d16:	5ce5      	ldrb	r5, [r4, r3]
     d18:	b26b      	sxtb	r3, r5
     d1a:	469c      	mov	ip, r3

    my_altimeter->myIMU.gyroXint = (my_altimeter->myIMU.gyroXHigh << 8) | my_altimeter->myIMU.gyroXLow;
     d1c:	020b      	lsls	r3, r1, #8
     d1e:	5de7      	ldrb	r7, [r4, r7]
     d20:	431f      	orrs	r7, r3
     d22:	b23f      	sxth	r7, r7
     d24:	234e      	movs	r3, #78	; 0x4e
     d26:	52e7      	strh	r7, [r4, r3]
    my_altimeter->myIMU.gyroYint = (my_altimeter->myIMU.gyroYHigh << 8) | my_altimeter->myIMU.gyroYLow;
     d28:	0213      	lsls	r3, r2, #8
     d2a:	5da0      	ldrb	r0, [r4, r6]
     d2c:	4318      	orrs	r0, r3
     d2e:	b200      	sxth	r0, r0
     d30:	2352      	movs	r3, #82	; 0x52
     d32:	52e0      	strh	r0, [r4, r3]
    my_altimeter->myIMU.gyroZint = (my_altimeter->myIMU.gyroZHigh << 8) | my_altimeter->myIMU.gyroZLow;
     d34:	022b      	lsls	r3, r5, #8
     d36:	3604      	adds	r6, #4
     d38:	5da6      	ldrb	r6, [r4, r6]
     d3a:	4333      	orrs	r3, r6
     d3c:	b21b      	sxth	r3, r3
     d3e:	2656      	movs	r6, #86	; 0x56
     d40:	53a3      	strh	r3, [r4, r6]

    if (my_altimeter->myIMU.gyroXHigh != 1) {
     d42:	2901      	cmp	r1, #1
     d44:	d009      	beq.n	d5a <sampleTick+0x252>
        if (negativeXgyro) {
     d46:	b249      	sxtb	r1, r1
     d48:	2900      	cmp	r1, #0
     d4a:	da03      	bge.n	d54 <sampleTick+0x24c>
            my_altimeter->myIMU.gyroXint = my_altimeter->myIMU.gyroXint | ~((1 << 16) - 1);
            my_altimeter->myIMU.gyroXint = my_altimeter->myIMU.gyroXint >> 4;
     d4c:	113f      	asrs	r7, r7, #4
     d4e:	214e      	movs	r1, #78	; 0x4e
     d50:	5267      	strh	r7, [r4, r1]
     d52:	e002      	b.n	d5a <sampleTick+0x252>
        } else {
            my_altimeter->myIMU.gyroXint = my_altimeter->myIMU.gyroXint >> 4;
     d54:	113f      	asrs	r7, r7, #4
     d56:	214e      	movs	r1, #78	; 0x4e
     d58:	5267      	strh	r7, [r4, r1]
        }
    }

    if (my_altimeter->myIMU.gyroYHigh != 1) {
     d5a:	2a01      	cmp	r2, #1
     d5c:	d009      	beq.n	d72 <sampleTick+0x26a>
        if (negativeYgyro) {
     d5e:	b252      	sxtb	r2, r2
     d60:	2a00      	cmp	r2, #0
     d62:	da03      	bge.n	d6c <sampleTick+0x264>
            my_altimeter->myIMU.gyroYint = my_altimeter->myIMU.gyroYint | ~((1 << 16) - 1);
            my_altimeter->myIMU.gyroYint = my_altimeter->myIMU.gyroYint >> 4;
     d64:	1100      	asrs	r0, r0, #4
     d66:	2252      	movs	r2, #82	; 0x52
     d68:	52a0      	strh	r0, [r4, r2]
     d6a:	e002      	b.n	d72 <sampleTick+0x26a>
        } else {
            my_altimeter->myIMU.gyroYint = my_altimeter->myIMU.gyroYint >> 4;
     d6c:	1100      	asrs	r0, r0, #4
     d6e:	2252      	movs	r2, #82	; 0x52
     d70:	52a0      	strh	r0, [r4, r2]
        }
    }

    if (my_altimeter->myIMU.gyroZHigh != 1) {
     d72:	2d01      	cmp	r5, #1
     d74:	d009      	beq.n	d8a <sampleTick+0x282>
        if (negativeZgyro) {
     d76:	4662      	mov	r2, ip
     d78:	2a00      	cmp	r2, #0
     d7a:	da03      	bge.n	d84 <sampleTick+0x27c>
            my_altimeter->myIMU.gyroZint = my_altimeter->myIMU.gyroZint | ~((1 << 16) - 1);
            my_altimeter->myIMU.gyroZint = my_altimeter->myIMU.gyroZint >> 4;
     d7c:	111b      	asrs	r3, r3, #4
     d7e:	2256      	movs	r2, #86	; 0x56
     d80:	52a3      	strh	r3, [r4, r2]
     d82:	e002      	b.n	d8a <sampleTick+0x282>
        } else {
            my_altimeter->myIMU.gyroZint = my_altimeter->myIMU.gyroZint >> 4;
     d84:	111b      	asrs	r3, r3, #4
     d86:	2256      	movs	r2, #86	; 0x56
     d88:	52a3      	strh	r3, [r4, r2]
        }
    }

    my_altimeter->myIMU.gyroX = my_altimeter->myIMU.gyroXint * .00781;
     d8a:	234e      	movs	r3, #78	; 0x4e
     d8c:	5ee0      	ldrsh	r0, [r4, r3]
     d8e:	4f12      	ldr	r7, [pc, #72]	; (dd8 <sampleTick+0x2d0>)
     d90:	47b8      	blx	r7
     d92:	4e12      	ldr	r6, [pc, #72]	; (ddc <sampleTick+0x2d4>)
     d94:	4a1f      	ldr	r2, [pc, #124]	; (e14 <sampleTick+0x30c>)
     d96:	4b20      	ldr	r3, [pc, #128]	; (e18 <sampleTick+0x310>)
     d98:	47b0      	blx	r6
     d9a:	4d13      	ldr	r5, [pc, #76]	; (de8 <sampleTick+0x2e0>)
     d9c:	47a8      	blx	r5
     d9e:	6360      	str	r0, [r4, #52]	; 0x34
    my_altimeter->myIMU.gyroY = my_altimeter->myIMU.gyroYint * .00781;
     da0:	2352      	movs	r3, #82	; 0x52
     da2:	5ee0      	ldrsh	r0, [r4, r3]
     da4:	47b8      	blx	r7
     da6:	4a1b      	ldr	r2, [pc, #108]	; (e14 <sampleTick+0x30c>)
     da8:	4b1b      	ldr	r3, [pc, #108]	; (e18 <sampleTick+0x310>)
     daa:	47b0      	blx	r6
     dac:	47a8      	blx	r5
     dae:	63a0      	str	r0, [r4, #56]	; 0x38
    my_altimeter->myIMU.gyroZ = my_altimeter->myIMU.gyroZint * .00781;
     db0:	2356      	movs	r3, #86	; 0x56
     db2:	5ee0      	ldrsh	r0, [r4, r3]
     db4:	47b8      	blx	r7
     db6:	4a17      	ldr	r2, [pc, #92]	; (e14 <sampleTick+0x30c>)
     db8:	4b17      	ldr	r3, [pc, #92]	; (e18 <sampleTick+0x310>)
     dba:	47b0      	blx	r6
     dbc:	47a8      	blx	r5
     dbe:	63e0      	str	r0, [r4, #60]	; 0x3c


}
     dc0:	b003      	add	sp, #12
     dc2:	bc3c      	pop	{r2, r3, r4, r5}
     dc4:	4690      	mov	r8, r2
     dc6:	4699      	mov	r9, r3
     dc8:	46a2      	mov	sl, r4
     dca:	46ab      	mov	fp, r5
     dcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
     dce:	46c0      	nop			; (mov r8, r8)
     dd0:	00001fd8 	.word	0x00001fd8
     dd4:	00000569 	.word	0x00000569
     dd8:	00001a01 	.word	0x00001a01
     ddc:	0000150d 	.word	0x0000150d
     de0:	eaa2a0a9 	.word	0xeaa2a0a9
     de4:	3f5f3a57 	.word	0x3f5f3a57
     de8:	00001b2d 	.word	0x00001b2d
     dec:	41004400 	.word	0x41004400
     df0:	000005e9 	.word	0x000005e9
     df4:	000007ad 	.word	0x000007ad
     df8:	00000839 	.word	0x00000839
     dfc:	000008ad 	.word	0x000008ad
     e00:	000009a5 	.word	0x000009a5
     e04:	00001a85 	.word	0x00001a85
     e08:	e9f6a93f 	.word	0xe9f6a93f
     e0c:	3fa0cc78 	.word	0x3fa0cc78
     e10:	00000efd 	.word	0x00000efd
     e14:	e94ee393 	.word	0xe94ee393
     e18:	3f7ffd60 	.word	0x3f7ffd60

00000e1c <sercomClockEnable>:
#include <util.h>

void sercomClockEnable(SercomId id, uint32_t clock_channel, u8_t divider) {
     e1c:	b570      	push	{r4, r5, r6, lr}
     e1e:	0004      	movs	r4, r0
     e20:	000d      	movs	r5, r1
    // prevent this clock write from changing any other clocks
    PM->APBCMASK.reg |= 1 << (PM_APBCMASK_SERCOM0_Pos + id);
     e22:	480e      	ldr	r0, [pc, #56]	; (e5c <sercomClockEnable+0x40>)
     e24:	6a01      	ldr	r1, [r0, #32]
     e26:	1ca6      	adds	r6, r4, #2
     e28:	2301      	movs	r3, #1
     e2a:	40b3      	lsls	r3, r6
     e2c:	430b      	orrs	r3, r1
     e2e:	6203      	str	r3, [r0, #32]


    if (clock_channel != 0) {
     e30:	2d00      	cmp	r5, #0
     e32:	d003      	beq.n	e3c <sercomClockEnable+0x20>
        // clock generators 3-8 have 8 division factor bits - DIV[7:0]
        gclkEnable(clock_channel, GCLK_SOURCE_DFLL48M, divider);
     e34:	2107      	movs	r1, #7
     e36:	0028      	movs	r0, r5
     e38:	4b09      	ldr	r3, [pc, #36]	; (e60 <sercomClockEnable+0x44>)
     e3a:	4798      	blx	r3
    }


    // attach clock
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
     e3c:	0229      	lsls	r1, r5, #8
     e3e:	23f0      	movs	r3, #240	; 0xf0
     e40:	011b      	lsls	r3, r3, #4
     e42:	4019      	ands	r1, r3
     e44:	2380      	movs	r3, #128	; 0x80
     e46:	01db      	lsls	r3, r3, #7
     e48:	4319      	orrs	r1, r3
     e4a:	0023      	movs	r3, r4
     e4c:	3314      	adds	r3, #20
     e4e:	243f      	movs	r4, #63	; 0x3f
     e50:	401c      	ands	r4, r3
     e52:	430c      	orrs	r4, r1
     e54:	4b03      	ldr	r3, [pc, #12]	; (e64 <sercomClockEnable+0x48>)
     e56:	805c      	strh	r4, [r3, #2]
                        GCLK_CLKCTRL_GEN(clock_channel) |
                        GCLK_CLKCTRL_ID(SERCOM0_GCLK_ID_CORE + id);
}
     e58:	bd70      	pop	{r4, r5, r6, pc}
     e5a:	46c0      	nop			; (mov r8, r8)
     e5c:	40000400 	.word	0x40000400
     e60:	00000731 	.word	0x00000731
     e64:	40000c00 	.word	0x40000c00

00000e68 <sercomReset>:
//sample.c
void sampleTick(Altimeter *my_altimeter);

//dma.c
inline static Sercom* sercom(SercomId id) {
	return (Sercom*) (0x42000800U + id * 1024);
     e68:	0280      	lsls	r0, r0, #10
     e6a:	4b05      	ldr	r3, [pc, #20]	; (e80 <sercomReset+0x18>)
     e6c:	469c      	mov	ip, r3
     e6e:	4460      	add	r0, ip


void sercomReset(SercomId id) {
    sercom(id)->SPI.CTRLA.reg = SERCOM_SPI_CTRLA_SWRST;
     e70:	2301      	movs	r3, #1
     e72:	6003      	str	r3, [r0, #0]
    while(sercom(id)->SPI.CTRLA.reg & SERCOM_SPI_CTRLA_SWRST);
     e74:	2201      	movs	r2, #1
     e76:	6803      	ldr	r3, [r0, #0]
     e78:	421a      	tst	r2, r3
     e7a:	d1fc      	bne.n	e76 <sercomReset+0xe>
}
     e7c:	4770      	bx	lr
     e7e:	46c0      	nop			; (mov r8, r8)
     e80:	42000800 	.word	0x42000800

00000e84 <sercomSpiMasterInit>:
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
}


void sercomSpiMasterInit(SercomId id, u32_t dipo, u32_t dopo, bool cpol, bool cpha, u8_t baud) {
     e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     e86:	464f      	mov	r7, r9
     e88:	4646      	mov	r6, r8
     e8a:	b4c0      	push	{r6, r7}
     e8c:	0006      	movs	r6, r0
     e8e:	4688      	mov	r8, r1
     e90:	0017      	movs	r7, r2
     e92:	001d      	movs	r5, r3
     e94:	ab08      	add	r3, sp, #32
     e96:	781c      	ldrb	r4, [r3, #0]
     e98:	ab09      	add	r3, sp, #36	; 0x24
     e9a:	781b      	ldrb	r3, [r3, #0]
     e9c:	4699      	mov	r9, r3
		
    sercomReset(id);
     e9e:	4b15      	ldr	r3, [pc, #84]	; (ef4 <sercomSpiMasterInit+0x70>)
     ea0:	4798      	blx	r3
     ea2:	02b0      	lsls	r0, r6, #10
     ea4:	4b14      	ldr	r3, [pc, #80]	; (ef8 <sercomSpiMasterInit+0x74>)
     ea6:	469c      	mov	ip, r3
     ea8:	4460      	add	r0, ip
	
    sercom(id)->SPI.CTRLB.reg
        = SERCOM_SPI_CTRLB_RXEN;
     eaa:	2380      	movs	r3, #128	; 0x80
     eac:	029b      	lsls	r3, r3, #10
     eae:	6043      	str	r3, [r0, #4]

    sercom(id)->SPI.BAUD.reg = baud;
     eb0:	464b      	mov	r3, r9
     eb2:	7303      	strb	r3, [r0, #12]

    sercom(id)->SPI.CTRLA.reg
        = SERCOM_SPI_CTRLA_ENABLE
          | SERCOM_SPI_CTRLA_MODE_SPI_MASTER
          | SERCOM_SPI_CTRLA_DIPO(dipo)
     eb4:	4643      	mov	r3, r8
     eb6:	0519      	lsls	r1, r3, #20
     eb8:	23c0      	movs	r3, #192	; 0xc0
     eba:	039b      	lsls	r3, r3, #14
     ebc:	4019      	ands	r1, r3
     ebe:	000e      	movs	r6, r1
     ec0:	0439      	lsls	r1, r7, #16
     ec2:	23c0      	movs	r3, #192	; 0xc0
     ec4:	029b      	lsls	r3, r3, #10
     ec6:	4019      	ands	r1, r3
     ec8:	230e      	movs	r3, #14
     eca:	000a      	movs	r2, r1
     ecc:	431a      	orrs	r2, r3
          | SERCOM_SPI_CTRLA_DOPO(dopo)
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
     ece:	1e6b      	subs	r3, r5, #1
     ed0:	419d      	sbcs	r5, r3
     ed2:	076d      	lsls	r5, r5, #29
     ed4:	0031      	movs	r1, r6
     ed6:	4311      	orrs	r1, r2
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
     ed8:	1e63      	subs	r3, r4, #1
     eda:	419c      	sbcs	r4, r3
     edc:	0722      	lsls	r2, r4, #28
     ede:	002c      	movs	r4, r5
     ee0:	430c      	orrs	r4, r1
     ee2:	4314      	orrs	r4, r2
        = SERCOM_SPI_CTRLB_RXEN;

    sercom(id)->SPI.BAUD.reg = baud;

    sercom(id)->SPI.CTRLA.reg
        = SERCOM_SPI_CTRLA_ENABLE
     ee4:	6004      	str	r4, [r0, #0]
		};
	}
}

static inline void SPI_sync(SercomId id) {
	while  (sercom(id)->SPI.SYNCBUSY.bit.CTRLB);
     ee6:	69c3      	ldr	r3, [r0, #28]
     ee8:	075b      	lsls	r3, r3, #29
     eea:	d4fc      	bmi.n	ee6 <sercomSpiMasterInit+0x62>
          | SERCOM_SPI_CTRLA_DOPO(dopo)
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);

    SPI_sync(id);
}
     eec:	bc0c      	pop	{r2, r3}
     eee:	4690      	mov	r8, r2
     ef0:	4699      	mov	r9, r3
     ef2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     ef4:	00000e69 	.word	0x00000e69
     ef8:	42000800 	.word	0x42000800

00000efc <spiDataTransfer>:
//sample.c
void sampleTick(Altimeter *my_altimeter);

//dma.c
inline static Sercom* sercom(SercomId id) {
	return (Sercom*) (0x42000800U + id * 1024);
     efc:	0280      	lsls	r0, r0, #10
     efe:	4b05      	ldr	r3, [pc, #20]	; (f14 <spiDataTransfer+0x18>)
     f00:	469c      	mov	ip, r3
     f02:	4460      	add	r0, ip
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
}

u8_t spiDataTransfer(SercomId id, u8_t data) {
    sercom(id)->SPI.DATA.reg = data;
     f04:	6281      	str	r1, [r0, #40]	; 0x28
    while(sercom(id)->SPI.INTFLAG.bit.RXC == 0);
     f06:	7e03      	ldrb	r3, [r0, #24]
     f08:	075b      	lsls	r3, r3, #29
     f0a:	d5fc      	bpl.n	f06 <spiDataTransfer+0xa>
    return sercom(id)->SPI.DATA.reg;
     f0c:	6a80      	ldr	r0, [r0, #40]	; 0x28
     f0e:	b2c0      	uxtb	r0, r0
}
     f10:	4770      	bx	lr
     f12:	46c0      	nop			; (mov r8, r8)
     f14:	42000800 	.word	0x42000800

00000f18 <__aeabi_lmul>:
     f18:	b5f0      	push	{r4, r5, r6, r7, lr}
     f1a:	464f      	mov	r7, r9
     f1c:	4646      	mov	r6, r8
     f1e:	b4c0      	push	{r6, r7}
     f20:	0416      	lsls	r6, r2, #16
     f22:	0c36      	lsrs	r6, r6, #16
     f24:	4699      	mov	r9, r3
     f26:	0033      	movs	r3, r6
     f28:	0405      	lsls	r5, r0, #16
     f2a:	0c2c      	lsrs	r4, r5, #16
     f2c:	0c07      	lsrs	r7, r0, #16
     f2e:	0c15      	lsrs	r5, r2, #16
     f30:	4363      	muls	r3, r4
     f32:	437e      	muls	r6, r7
     f34:	436f      	muls	r7, r5
     f36:	4365      	muls	r5, r4
     f38:	0c1c      	lsrs	r4, r3, #16
     f3a:	19ad      	adds	r5, r5, r6
     f3c:	1964      	adds	r4, r4, r5
     f3e:	469c      	mov	ip, r3
     f40:	42a6      	cmp	r6, r4
     f42:	d903      	bls.n	f4c <__aeabi_lmul+0x34>
     f44:	2380      	movs	r3, #128	; 0x80
     f46:	025b      	lsls	r3, r3, #9
     f48:	4698      	mov	r8, r3
     f4a:	4447      	add	r7, r8
     f4c:	4663      	mov	r3, ip
     f4e:	0c25      	lsrs	r5, r4, #16
     f50:	19ef      	adds	r7, r5, r7
     f52:	041d      	lsls	r5, r3, #16
     f54:	464b      	mov	r3, r9
     f56:	434a      	muls	r2, r1
     f58:	4343      	muls	r3, r0
     f5a:	0c2d      	lsrs	r5, r5, #16
     f5c:	0424      	lsls	r4, r4, #16
     f5e:	1964      	adds	r4, r4, r5
     f60:	1899      	adds	r1, r3, r2
     f62:	19c9      	adds	r1, r1, r7
     f64:	0020      	movs	r0, r4
     f66:	bc0c      	pop	{r2, r3}
     f68:	4690      	mov	r8, r2
     f6a:	4699      	mov	r9, r3
     f6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     f6e:	46c0      	nop			; (mov r8, r8)

00000f70 <__aeabi_fadd>:
     f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     f72:	024a      	lsls	r2, r1, #9
     f74:	0243      	lsls	r3, r0, #9
     f76:	0044      	lsls	r4, r0, #1
     f78:	004e      	lsls	r6, r1, #1
     f7a:	0fc5      	lsrs	r5, r0, #31
     f7c:	0e24      	lsrs	r4, r4, #24
     f7e:	0028      	movs	r0, r5
     f80:	099b      	lsrs	r3, r3, #6
     f82:	0e36      	lsrs	r6, r6, #24
     f84:	0fc9      	lsrs	r1, r1, #31
     f86:	0992      	lsrs	r2, r2, #6
     f88:	428d      	cmp	r5, r1
     f8a:	d059      	beq.n	1040 <__aeabi_fadd+0xd0>
     f8c:	1ba0      	subs	r0, r4, r6
     f8e:	2800      	cmp	r0, #0
     f90:	dc00      	bgt.n	f94 <__aeabi_fadd+0x24>
     f92:	e08d      	b.n	10b0 <__aeabi_fadd+0x140>
     f94:	2e00      	cmp	r6, #0
     f96:	d11a      	bne.n	fce <__aeabi_fadd+0x5e>
     f98:	2a00      	cmp	r2, #0
     f9a:	d000      	beq.n	f9e <__aeabi_fadd+0x2e>
     f9c:	e079      	b.n	1092 <__aeabi_fadd+0x122>
     f9e:	075a      	lsls	r2, r3, #29
     fa0:	d004      	beq.n	fac <__aeabi_fadd+0x3c>
     fa2:	220f      	movs	r2, #15
     fa4:	401a      	ands	r2, r3
     fa6:	2a04      	cmp	r2, #4
     fa8:	d000      	beq.n	fac <__aeabi_fadd+0x3c>
     faa:	3304      	adds	r3, #4
     fac:	015a      	lsls	r2, r3, #5
     fae:	d538      	bpl.n	1022 <__aeabi_fadd+0xb2>
     fb0:	3401      	adds	r4, #1
     fb2:	2cff      	cmp	r4, #255	; 0xff
     fb4:	d100      	bne.n	fb8 <__aeabi_fadd+0x48>
     fb6:	e089      	b.n	10cc <__aeabi_fadd+0x15c>
     fb8:	0028      	movs	r0, r5
     fba:	019b      	lsls	r3, r3, #6
     fbc:	0a5b      	lsrs	r3, r3, #9
     fbe:	b2e4      	uxtb	r4, r4
     fc0:	025b      	lsls	r3, r3, #9
     fc2:	05e4      	lsls	r4, r4, #23
     fc4:	0a5b      	lsrs	r3, r3, #9
     fc6:	4323      	orrs	r3, r4
     fc8:	07c0      	lsls	r0, r0, #31
     fca:	4318      	orrs	r0, r3
     fcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     fce:	2cff      	cmp	r4, #255	; 0xff
     fd0:	d0e5      	beq.n	f9e <__aeabi_fadd+0x2e>
     fd2:	2180      	movs	r1, #128	; 0x80
     fd4:	04c9      	lsls	r1, r1, #19
     fd6:	430a      	orrs	r2, r1
     fd8:	281b      	cmp	r0, #27
     fda:	dd00      	ble.n	fde <__aeabi_fadd+0x6e>
     fdc:	e089      	b.n	10f2 <__aeabi_fadd+0x182>
     fde:	0016      	movs	r6, r2
     fe0:	2120      	movs	r1, #32
     fe2:	40c6      	lsrs	r6, r0
     fe4:	1a08      	subs	r0, r1, r0
     fe6:	4082      	lsls	r2, r0
     fe8:	1e51      	subs	r1, r2, #1
     fea:	418a      	sbcs	r2, r1
     fec:	4332      	orrs	r2, r6
     fee:	1a9b      	subs	r3, r3, r2
     ff0:	015a      	lsls	r2, r3, #5
     ff2:	d514      	bpl.n	101e <__aeabi_fadd+0xae>
     ff4:	019b      	lsls	r3, r3, #6
     ff6:	099e      	lsrs	r6, r3, #6
     ff8:	0030      	movs	r0, r6
     ffa:	f000 fe23 	bl	1c44 <__clzsi2>
     ffe:	3805      	subs	r0, #5
    1000:	4086      	lsls	r6, r0
    1002:	4284      	cmp	r4, r0
    1004:	dc65      	bgt.n	10d2 <__aeabi_fadd+0x162>
    1006:	1b04      	subs	r4, r0, r4
    1008:	0033      	movs	r3, r6
    100a:	2020      	movs	r0, #32
    100c:	3401      	adds	r4, #1
    100e:	40e3      	lsrs	r3, r4
    1010:	1b04      	subs	r4, r0, r4
    1012:	40a6      	lsls	r6, r4
    1014:	1e72      	subs	r2, r6, #1
    1016:	4196      	sbcs	r6, r2
    1018:	2400      	movs	r4, #0
    101a:	4333      	orrs	r3, r6
    101c:	e7bf      	b.n	f9e <__aeabi_fadd+0x2e>
    101e:	075a      	lsls	r2, r3, #29
    1020:	d1bf      	bne.n	fa2 <__aeabi_fadd+0x32>
    1022:	08df      	lsrs	r7, r3, #3
    1024:	0028      	movs	r0, r5
    1026:	2cff      	cmp	r4, #255	; 0xff
    1028:	d12f      	bne.n	108a <__aeabi_fadd+0x11a>
    102a:	2f00      	cmp	r7, #0
    102c:	d100      	bne.n	1030 <__aeabi_fadd+0xc0>
    102e:	e087      	b.n	1140 <__aeabi_fadd+0x1d0>
    1030:	2280      	movs	r2, #128	; 0x80
    1032:	03d2      	lsls	r2, r2, #15
    1034:	0013      	movs	r3, r2
    1036:	433b      	orrs	r3, r7
    1038:	025b      	lsls	r3, r3, #9
    103a:	0a5b      	lsrs	r3, r3, #9
    103c:	24ff      	movs	r4, #255	; 0xff
    103e:	e7bf      	b.n	fc0 <__aeabi_fadd+0x50>
    1040:	1ba1      	subs	r1, r4, r6
    1042:	2900      	cmp	r1, #0
    1044:	dd49      	ble.n	10da <__aeabi_fadd+0x16a>
    1046:	2e00      	cmp	r6, #0
    1048:	d029      	beq.n	109e <__aeabi_fadd+0x12e>
    104a:	2cff      	cmp	r4, #255	; 0xff
    104c:	d0a7      	beq.n	f9e <__aeabi_fadd+0x2e>
    104e:	2680      	movs	r6, #128	; 0x80
    1050:	04f6      	lsls	r6, r6, #19
    1052:	4332      	orrs	r2, r6
    1054:	291b      	cmp	r1, #27
    1056:	dd00      	ble.n	105a <__aeabi_fadd+0xea>
    1058:	e08d      	b.n	1176 <__aeabi_fadd+0x206>
    105a:	0017      	movs	r7, r2
    105c:	2620      	movs	r6, #32
    105e:	40cf      	lsrs	r7, r1
    1060:	1a71      	subs	r1, r6, r1
    1062:	408a      	lsls	r2, r1
    1064:	1e51      	subs	r1, r2, #1
    1066:	418a      	sbcs	r2, r1
    1068:	433a      	orrs	r2, r7
    106a:	189b      	adds	r3, r3, r2
    106c:	015a      	lsls	r2, r3, #5
    106e:	d5d6      	bpl.n	101e <__aeabi_fadd+0xae>
    1070:	3401      	adds	r4, #1
    1072:	2cff      	cmp	r4, #255	; 0xff
    1074:	d064      	beq.n	1140 <__aeabi_fadd+0x1d0>
    1076:	2201      	movs	r2, #1
    1078:	4976      	ldr	r1, [pc, #472]	; (1254 <__aeabi_fadd+0x2e4>)
    107a:	401a      	ands	r2, r3
    107c:	085b      	lsrs	r3, r3, #1
    107e:	400b      	ands	r3, r1
    1080:	4313      	orrs	r3, r2
    1082:	e78c      	b.n	f9e <__aeabi_fadd+0x2e>
    1084:	1e03      	subs	r3, r0, #0
    1086:	d1ca      	bne.n	101e <__aeabi_fadd+0xae>
    1088:	2000      	movs	r0, #0
    108a:	027b      	lsls	r3, r7, #9
    108c:	0a5b      	lsrs	r3, r3, #9
    108e:	b2e4      	uxtb	r4, r4
    1090:	e796      	b.n	fc0 <__aeabi_fadd+0x50>
    1092:	3801      	subs	r0, #1
    1094:	2800      	cmp	r0, #0
    1096:	d0aa      	beq.n	fee <__aeabi_fadd+0x7e>
    1098:	2cff      	cmp	r4, #255	; 0xff
    109a:	d19d      	bne.n	fd8 <__aeabi_fadd+0x68>
    109c:	e77f      	b.n	f9e <__aeabi_fadd+0x2e>
    109e:	2a00      	cmp	r2, #0
    10a0:	d100      	bne.n	10a4 <__aeabi_fadd+0x134>
    10a2:	e77c      	b.n	f9e <__aeabi_fadd+0x2e>
    10a4:	3901      	subs	r1, #1
    10a6:	2900      	cmp	r1, #0
    10a8:	d0df      	beq.n	106a <__aeabi_fadd+0xfa>
    10aa:	2cff      	cmp	r4, #255	; 0xff
    10ac:	d1d2      	bne.n	1054 <__aeabi_fadd+0xe4>
    10ae:	e776      	b.n	f9e <__aeabi_fadd+0x2e>
    10b0:	2800      	cmp	r0, #0
    10b2:	d120      	bne.n	10f6 <__aeabi_fadd+0x186>
    10b4:	1c60      	adds	r0, r4, #1
    10b6:	b2c0      	uxtb	r0, r0
    10b8:	2801      	cmp	r0, #1
    10ba:	dd53      	ble.n	1164 <__aeabi_fadd+0x1f4>
    10bc:	2780      	movs	r7, #128	; 0x80
    10be:	1a9e      	subs	r6, r3, r2
    10c0:	04ff      	lsls	r7, r7, #19
    10c2:	4037      	ands	r7, r6
    10c4:	d02f      	beq.n	1126 <__aeabi_fadd+0x1b6>
    10c6:	1ad6      	subs	r6, r2, r3
    10c8:	000d      	movs	r5, r1
    10ca:	e795      	b.n	ff8 <__aeabi_fadd+0x88>
    10cc:	0028      	movs	r0, r5
    10ce:	2300      	movs	r3, #0
    10d0:	e776      	b.n	fc0 <__aeabi_fadd+0x50>
    10d2:	4b61      	ldr	r3, [pc, #388]	; (1258 <__aeabi_fadd+0x2e8>)
    10d4:	1a24      	subs	r4, r4, r0
    10d6:	4033      	ands	r3, r6
    10d8:	e761      	b.n	f9e <__aeabi_fadd+0x2e>
    10da:	2900      	cmp	r1, #0
    10dc:	d14d      	bne.n	117a <__aeabi_fadd+0x20a>
    10de:	1c61      	adds	r1, r4, #1
    10e0:	b2ce      	uxtb	r6, r1
    10e2:	2e01      	cmp	r6, #1
    10e4:	dd2f      	ble.n	1146 <__aeabi_fadd+0x1d6>
    10e6:	29ff      	cmp	r1, #255	; 0xff
    10e8:	d02a      	beq.n	1140 <__aeabi_fadd+0x1d0>
    10ea:	189b      	adds	r3, r3, r2
    10ec:	085b      	lsrs	r3, r3, #1
    10ee:	000c      	movs	r4, r1
    10f0:	e755      	b.n	f9e <__aeabi_fadd+0x2e>
    10f2:	2201      	movs	r2, #1
    10f4:	e77b      	b.n	fee <__aeabi_fadd+0x7e>
    10f6:	2c00      	cmp	r4, #0
    10f8:	d11b      	bne.n	1132 <__aeabi_fadd+0x1c2>
    10fa:	2b00      	cmp	r3, #0
    10fc:	d05b      	beq.n	11b6 <__aeabi_fadd+0x246>
    10fe:	43c0      	mvns	r0, r0
    1100:	2800      	cmp	r0, #0
    1102:	d00c      	beq.n	111e <__aeabi_fadd+0x1ae>
    1104:	2eff      	cmp	r6, #255	; 0xff
    1106:	d07e      	beq.n	1206 <__aeabi_fadd+0x296>
    1108:	281b      	cmp	r0, #27
    110a:	dd00      	ble.n	110e <__aeabi_fadd+0x19e>
    110c:	e092      	b.n	1234 <__aeabi_fadd+0x2c4>
    110e:	001d      	movs	r5, r3
    1110:	2420      	movs	r4, #32
    1112:	40c5      	lsrs	r5, r0
    1114:	1a20      	subs	r0, r4, r0
    1116:	4083      	lsls	r3, r0
    1118:	1e58      	subs	r0, r3, #1
    111a:	4183      	sbcs	r3, r0
    111c:	432b      	orrs	r3, r5
    111e:	1ad3      	subs	r3, r2, r3
    1120:	0034      	movs	r4, r6
    1122:	000d      	movs	r5, r1
    1124:	e764      	b.n	ff0 <__aeabi_fadd+0x80>
    1126:	2e00      	cmp	r6, #0
    1128:	d000      	beq.n	112c <__aeabi_fadd+0x1bc>
    112a:	e765      	b.n	ff8 <__aeabi_fadd+0x88>
    112c:	2000      	movs	r0, #0
    112e:	2400      	movs	r4, #0
    1130:	e7ab      	b.n	108a <__aeabi_fadd+0x11a>
    1132:	2eff      	cmp	r6, #255	; 0xff
    1134:	d067      	beq.n	1206 <__aeabi_fadd+0x296>
    1136:	2480      	movs	r4, #128	; 0x80
    1138:	04e4      	lsls	r4, r4, #19
    113a:	4240      	negs	r0, r0
    113c:	4323      	orrs	r3, r4
    113e:	e7e3      	b.n	1108 <__aeabi_fadd+0x198>
    1140:	24ff      	movs	r4, #255	; 0xff
    1142:	2300      	movs	r3, #0
    1144:	e73c      	b.n	fc0 <__aeabi_fadd+0x50>
    1146:	2c00      	cmp	r4, #0
    1148:	d161      	bne.n	120e <__aeabi_fadd+0x29e>
    114a:	2b00      	cmp	r3, #0
    114c:	d07e      	beq.n	124c <__aeabi_fadd+0x2dc>
    114e:	2a00      	cmp	r2, #0
    1150:	d100      	bne.n	1154 <__aeabi_fadd+0x1e4>
    1152:	e724      	b.n	f9e <__aeabi_fadd+0x2e>
    1154:	189b      	adds	r3, r3, r2
    1156:	015a      	lsls	r2, r3, #5
    1158:	d400      	bmi.n	115c <__aeabi_fadd+0x1ec>
    115a:	e760      	b.n	101e <__aeabi_fadd+0xae>
    115c:	4a3e      	ldr	r2, [pc, #248]	; (1258 <__aeabi_fadd+0x2e8>)
    115e:	000c      	movs	r4, r1
    1160:	4013      	ands	r3, r2
    1162:	e71c      	b.n	f9e <__aeabi_fadd+0x2e>
    1164:	2c00      	cmp	r4, #0
    1166:	d11e      	bne.n	11a6 <__aeabi_fadd+0x236>
    1168:	2b00      	cmp	r3, #0
    116a:	d12f      	bne.n	11cc <__aeabi_fadd+0x25c>
    116c:	2a00      	cmp	r2, #0
    116e:	d066      	beq.n	123e <__aeabi_fadd+0x2ce>
    1170:	0013      	movs	r3, r2
    1172:	000d      	movs	r5, r1
    1174:	e713      	b.n	f9e <__aeabi_fadd+0x2e>
    1176:	2201      	movs	r2, #1
    1178:	e777      	b.n	106a <__aeabi_fadd+0xfa>
    117a:	2c00      	cmp	r4, #0
    117c:	d11f      	bne.n	11be <__aeabi_fadd+0x24e>
    117e:	2b00      	cmp	r3, #0
    1180:	d05a      	beq.n	1238 <__aeabi_fadd+0x2c8>
    1182:	43c9      	mvns	r1, r1
    1184:	2900      	cmp	r1, #0
    1186:	d00b      	beq.n	11a0 <__aeabi_fadd+0x230>
    1188:	2eff      	cmp	r6, #255	; 0xff
    118a:	d050      	beq.n	122e <__aeabi_fadd+0x2be>
    118c:	291b      	cmp	r1, #27
    118e:	dc5f      	bgt.n	1250 <__aeabi_fadd+0x2e0>
    1190:	001f      	movs	r7, r3
    1192:	2420      	movs	r4, #32
    1194:	40cf      	lsrs	r7, r1
    1196:	1a61      	subs	r1, r4, r1
    1198:	408b      	lsls	r3, r1
    119a:	1e59      	subs	r1, r3, #1
    119c:	418b      	sbcs	r3, r1
    119e:	433b      	orrs	r3, r7
    11a0:	189b      	adds	r3, r3, r2
    11a2:	0034      	movs	r4, r6
    11a4:	e762      	b.n	106c <__aeabi_fadd+0xfc>
    11a6:	2b00      	cmp	r3, #0
    11a8:	d11c      	bne.n	11e4 <__aeabi_fadd+0x274>
    11aa:	2a00      	cmp	r2, #0
    11ac:	d04a      	beq.n	1244 <__aeabi_fadd+0x2d4>
    11ae:	0013      	movs	r3, r2
    11b0:	000d      	movs	r5, r1
    11b2:	24ff      	movs	r4, #255	; 0xff
    11b4:	e6f3      	b.n	f9e <__aeabi_fadd+0x2e>
    11b6:	0013      	movs	r3, r2
    11b8:	0034      	movs	r4, r6
    11ba:	000d      	movs	r5, r1
    11bc:	e6ef      	b.n	f9e <__aeabi_fadd+0x2e>
    11be:	2eff      	cmp	r6, #255	; 0xff
    11c0:	d035      	beq.n	122e <__aeabi_fadd+0x2be>
    11c2:	2480      	movs	r4, #128	; 0x80
    11c4:	04e4      	lsls	r4, r4, #19
    11c6:	4249      	negs	r1, r1
    11c8:	4323      	orrs	r3, r4
    11ca:	e7df      	b.n	118c <__aeabi_fadd+0x21c>
    11cc:	2a00      	cmp	r2, #0
    11ce:	d100      	bne.n	11d2 <__aeabi_fadd+0x262>
    11d0:	e6e5      	b.n	f9e <__aeabi_fadd+0x2e>
    11d2:	2780      	movs	r7, #128	; 0x80
    11d4:	1a98      	subs	r0, r3, r2
    11d6:	04ff      	lsls	r7, r7, #19
    11d8:	4007      	ands	r7, r0
    11da:	d100      	bne.n	11de <__aeabi_fadd+0x26e>
    11dc:	e752      	b.n	1084 <__aeabi_fadd+0x114>
    11de:	1ad3      	subs	r3, r2, r3
    11e0:	000d      	movs	r5, r1
    11e2:	e6dc      	b.n	f9e <__aeabi_fadd+0x2e>
    11e4:	24ff      	movs	r4, #255	; 0xff
    11e6:	2a00      	cmp	r2, #0
    11e8:	d100      	bne.n	11ec <__aeabi_fadd+0x27c>
    11ea:	e6d8      	b.n	f9e <__aeabi_fadd+0x2e>
    11ec:	2080      	movs	r0, #128	; 0x80
    11ee:	08db      	lsrs	r3, r3, #3
    11f0:	03c0      	lsls	r0, r0, #15
    11f2:	4203      	tst	r3, r0
    11f4:	d004      	beq.n	1200 <__aeabi_fadd+0x290>
    11f6:	08d2      	lsrs	r2, r2, #3
    11f8:	4202      	tst	r2, r0
    11fa:	d101      	bne.n	1200 <__aeabi_fadd+0x290>
    11fc:	0013      	movs	r3, r2
    11fe:	000d      	movs	r5, r1
    1200:	00db      	lsls	r3, r3, #3
    1202:	24ff      	movs	r4, #255	; 0xff
    1204:	e6cb      	b.n	f9e <__aeabi_fadd+0x2e>
    1206:	0013      	movs	r3, r2
    1208:	24ff      	movs	r4, #255	; 0xff
    120a:	000d      	movs	r5, r1
    120c:	e6c7      	b.n	f9e <__aeabi_fadd+0x2e>
    120e:	2b00      	cmp	r3, #0
    1210:	d00d      	beq.n	122e <__aeabi_fadd+0x2be>
    1212:	24ff      	movs	r4, #255	; 0xff
    1214:	2a00      	cmp	r2, #0
    1216:	d100      	bne.n	121a <__aeabi_fadd+0x2aa>
    1218:	e6c1      	b.n	f9e <__aeabi_fadd+0x2e>
    121a:	2180      	movs	r1, #128	; 0x80
    121c:	08db      	lsrs	r3, r3, #3
    121e:	03c9      	lsls	r1, r1, #15
    1220:	420b      	tst	r3, r1
    1222:	d0ed      	beq.n	1200 <__aeabi_fadd+0x290>
    1224:	08d2      	lsrs	r2, r2, #3
    1226:	420a      	tst	r2, r1
    1228:	d1ea      	bne.n	1200 <__aeabi_fadd+0x290>
    122a:	0013      	movs	r3, r2
    122c:	e7e8      	b.n	1200 <__aeabi_fadd+0x290>
    122e:	0013      	movs	r3, r2
    1230:	24ff      	movs	r4, #255	; 0xff
    1232:	e6b4      	b.n	f9e <__aeabi_fadd+0x2e>
    1234:	2301      	movs	r3, #1
    1236:	e772      	b.n	111e <__aeabi_fadd+0x1ae>
    1238:	0013      	movs	r3, r2
    123a:	0034      	movs	r4, r6
    123c:	e6af      	b.n	f9e <__aeabi_fadd+0x2e>
    123e:	2700      	movs	r7, #0
    1240:	2000      	movs	r0, #0
    1242:	e722      	b.n	108a <__aeabi_fadd+0x11a>
    1244:	2780      	movs	r7, #128	; 0x80
    1246:	2000      	movs	r0, #0
    1248:	03ff      	lsls	r7, r7, #15
    124a:	e6f1      	b.n	1030 <__aeabi_fadd+0xc0>
    124c:	0013      	movs	r3, r2
    124e:	e6a6      	b.n	f9e <__aeabi_fadd+0x2e>
    1250:	2301      	movs	r3, #1
    1252:	e7a5      	b.n	11a0 <__aeabi_fadd+0x230>
    1254:	7dffffff 	.word	0x7dffffff
    1258:	fbffffff 	.word	0xfbffffff

0000125c <__aeabi_fdiv>:
    125c:	b5f0      	push	{r4, r5, r6, r7, lr}
    125e:	4656      	mov	r6, sl
    1260:	4644      	mov	r4, r8
    1262:	465f      	mov	r7, fp
    1264:	464d      	mov	r5, r9
    1266:	b4f0      	push	{r4, r5, r6, r7}
    1268:	0244      	lsls	r4, r0, #9
    126a:	0046      	lsls	r6, r0, #1
    126c:	0fc7      	lsrs	r7, r0, #31
    126e:	b083      	sub	sp, #12
    1270:	4688      	mov	r8, r1
    1272:	0a65      	lsrs	r5, r4, #9
    1274:	0e36      	lsrs	r6, r6, #24
    1276:	46ba      	mov	sl, r7
    1278:	d03d      	beq.n	12f6 <__aeabi_fdiv+0x9a>
    127a:	2eff      	cmp	r6, #255	; 0xff
    127c:	d022      	beq.n	12c4 <__aeabi_fdiv+0x68>
    127e:	2300      	movs	r3, #0
    1280:	00ec      	lsls	r4, r5, #3
    1282:	2580      	movs	r5, #128	; 0x80
    1284:	4699      	mov	r9, r3
    1286:	469b      	mov	fp, r3
    1288:	04ed      	lsls	r5, r5, #19
    128a:	4325      	orrs	r5, r4
    128c:	3e7f      	subs	r6, #127	; 0x7f
    128e:	4643      	mov	r3, r8
    1290:	025c      	lsls	r4, r3, #9
    1292:	0058      	lsls	r0, r3, #1
    1294:	0fdb      	lsrs	r3, r3, #31
    1296:	0a64      	lsrs	r4, r4, #9
    1298:	0e00      	lsrs	r0, r0, #24
    129a:	4698      	mov	r8, r3
    129c:	d036      	beq.n	130c <__aeabi_fdiv+0xb0>
    129e:	28ff      	cmp	r0, #255	; 0xff
    12a0:	d030      	beq.n	1304 <__aeabi_fdiv+0xa8>
    12a2:	2380      	movs	r3, #128	; 0x80
    12a4:	2100      	movs	r1, #0
    12a6:	00e4      	lsls	r4, r4, #3
    12a8:	04db      	lsls	r3, r3, #19
    12aa:	431c      	orrs	r4, r3
    12ac:	387f      	subs	r0, #127	; 0x7f
    12ae:	1a30      	subs	r0, r6, r0
    12b0:	9001      	str	r0, [sp, #4]
    12b2:	4648      	mov	r0, r9
    12b4:	4642      	mov	r2, r8
    12b6:	4308      	orrs	r0, r1
    12b8:	4e72      	ldr	r6, [pc, #456]	; (1484 <__aeabi_fdiv+0x228>)
    12ba:	0080      	lsls	r0, r0, #2
    12bc:	5830      	ldr	r0, [r6, r0]
    12be:	407a      	eors	r2, r7
    12c0:	0013      	movs	r3, r2
    12c2:	4687      	mov	pc, r0
    12c4:	2d00      	cmp	r5, #0
    12c6:	d144      	bne.n	1352 <__aeabi_fdiv+0xf6>
    12c8:	2308      	movs	r3, #8
    12ca:	4699      	mov	r9, r3
    12cc:	3b06      	subs	r3, #6
    12ce:	469b      	mov	fp, r3
    12d0:	e7dd      	b.n	128e <__aeabi_fdiv+0x32>
    12d2:	2201      	movs	r2, #1
    12d4:	20ff      	movs	r0, #255	; 0xff
    12d6:	2400      	movs	r4, #0
    12d8:	401a      	ands	r2, r3
    12da:	0264      	lsls	r4, r4, #9
    12dc:	05c3      	lsls	r3, r0, #23
    12de:	0a64      	lsrs	r4, r4, #9
    12e0:	07d2      	lsls	r2, r2, #31
    12e2:	431c      	orrs	r4, r3
    12e4:	4314      	orrs	r4, r2
    12e6:	0020      	movs	r0, r4
    12e8:	b003      	add	sp, #12
    12ea:	bc3c      	pop	{r2, r3, r4, r5}
    12ec:	4690      	mov	r8, r2
    12ee:	4699      	mov	r9, r3
    12f0:	46a2      	mov	sl, r4
    12f2:	46ab      	mov	fp, r5
    12f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    12f6:	2d00      	cmp	r5, #0
    12f8:	d120      	bne.n	133c <__aeabi_fdiv+0xe0>
    12fa:	2304      	movs	r3, #4
    12fc:	4699      	mov	r9, r3
    12fe:	3b03      	subs	r3, #3
    1300:	469b      	mov	fp, r3
    1302:	e7c4      	b.n	128e <__aeabi_fdiv+0x32>
    1304:	2c00      	cmp	r4, #0
    1306:	d117      	bne.n	1338 <__aeabi_fdiv+0xdc>
    1308:	2102      	movs	r1, #2
    130a:	e002      	b.n	1312 <__aeabi_fdiv+0xb6>
    130c:	2c00      	cmp	r4, #0
    130e:	d10a      	bne.n	1326 <__aeabi_fdiv+0xca>
    1310:	2101      	movs	r1, #1
    1312:	1a32      	subs	r2, r6, r0
    1314:	9201      	str	r2, [sp, #4]
    1316:	464a      	mov	r2, r9
    1318:	4643      	mov	r3, r8
    131a:	430a      	orrs	r2, r1
    131c:	485a      	ldr	r0, [pc, #360]	; (1488 <__aeabi_fdiv+0x22c>)
    131e:	0092      	lsls	r2, r2, #2
    1320:	5882      	ldr	r2, [r0, r2]
    1322:	407b      	eors	r3, r7
    1324:	4697      	mov	pc, r2
    1326:	0020      	movs	r0, r4
    1328:	f000 fc8c 	bl	1c44 <__clzsi2>
    132c:	1f43      	subs	r3, r0, #5
    132e:	3076      	adds	r0, #118	; 0x76
    1330:	409c      	lsls	r4, r3
    1332:	4240      	negs	r0, r0
    1334:	2100      	movs	r1, #0
    1336:	e7ba      	b.n	12ae <__aeabi_fdiv+0x52>
    1338:	2103      	movs	r1, #3
    133a:	e7b8      	b.n	12ae <__aeabi_fdiv+0x52>
    133c:	0028      	movs	r0, r5
    133e:	f000 fc81 	bl	1c44 <__clzsi2>
    1342:	1f43      	subs	r3, r0, #5
    1344:	409d      	lsls	r5, r3
    1346:	2300      	movs	r3, #0
    1348:	3076      	adds	r0, #118	; 0x76
    134a:	4246      	negs	r6, r0
    134c:	4699      	mov	r9, r3
    134e:	469b      	mov	fp, r3
    1350:	e79d      	b.n	128e <__aeabi_fdiv+0x32>
    1352:	230c      	movs	r3, #12
    1354:	4699      	mov	r9, r3
    1356:	3b09      	subs	r3, #9
    1358:	469b      	mov	fp, r3
    135a:	e798      	b.n	128e <__aeabi_fdiv+0x32>
    135c:	2480      	movs	r4, #128	; 0x80
    135e:	2200      	movs	r2, #0
    1360:	03e4      	lsls	r4, r4, #15
    1362:	20ff      	movs	r0, #255	; 0xff
    1364:	e7b9      	b.n	12da <__aeabi_fdiv+0x7e>
    1366:	2400      	movs	r4, #0
    1368:	46c2      	mov	sl, r8
    136a:	468b      	mov	fp, r1
    136c:	465a      	mov	r2, fp
    136e:	4653      	mov	r3, sl
    1370:	2a02      	cmp	r2, #2
    1372:	d0ae      	beq.n	12d2 <__aeabi_fdiv+0x76>
    1374:	2a03      	cmp	r2, #3
    1376:	d07d      	beq.n	1474 <__aeabi_fdiv+0x218>
    1378:	2a01      	cmp	r2, #1
    137a:	d131      	bne.n	13e0 <__aeabi_fdiv+0x184>
    137c:	2201      	movs	r2, #1
    137e:	2000      	movs	r0, #0
    1380:	401a      	ands	r2, r3
    1382:	2400      	movs	r4, #0
    1384:	e7a9      	b.n	12da <__aeabi_fdiv+0x7e>
    1386:	2201      	movs	r2, #1
    1388:	1a10      	subs	r0, r2, r0
    138a:	281b      	cmp	r0, #27
    138c:	dd56      	ble.n	143c <__aeabi_fdiv+0x1e0>
    138e:	401a      	ands	r2, r3
    1390:	2000      	movs	r0, #0
    1392:	2400      	movs	r4, #0
    1394:	e7a1      	b.n	12da <__aeabi_fdiv+0x7e>
    1396:	2380      	movs	r3, #128	; 0x80
    1398:	03db      	lsls	r3, r3, #15
    139a:	421d      	tst	r5, r3
    139c:	d14b      	bne.n	1436 <__aeabi_fdiv+0x1da>
    139e:	2380      	movs	r3, #128	; 0x80
    13a0:	03db      	lsls	r3, r3, #15
    13a2:	432b      	orrs	r3, r5
    13a4:	025c      	lsls	r4, r3, #9
    13a6:	0a64      	lsrs	r4, r4, #9
    13a8:	003a      	movs	r2, r7
    13aa:	20ff      	movs	r0, #255	; 0xff
    13ac:	e795      	b.n	12da <__aeabi_fdiv+0x7e>
    13ae:	016d      	lsls	r5, r5, #5
    13b0:	0160      	lsls	r0, r4, #5
    13b2:	4285      	cmp	r5, r0
    13b4:	d230      	bcs.n	1418 <__aeabi_fdiv+0x1bc>
    13b6:	9a01      	ldr	r2, [sp, #4]
    13b8:	2400      	movs	r4, #0
    13ba:	3a01      	subs	r2, #1
    13bc:	9201      	str	r2, [sp, #4]
    13be:	221b      	movs	r2, #27
    13c0:	2701      	movs	r7, #1
    13c2:	0029      	movs	r1, r5
    13c4:	0064      	lsls	r4, r4, #1
    13c6:	006d      	lsls	r5, r5, #1
    13c8:	2900      	cmp	r1, #0
    13ca:	db01      	blt.n	13d0 <__aeabi_fdiv+0x174>
    13cc:	42a8      	cmp	r0, r5
    13ce:	d801      	bhi.n	13d4 <__aeabi_fdiv+0x178>
    13d0:	1a2d      	subs	r5, r5, r0
    13d2:	433c      	orrs	r4, r7
    13d4:	3a01      	subs	r2, #1
    13d6:	2a00      	cmp	r2, #0
    13d8:	d1f3      	bne.n	13c2 <__aeabi_fdiv+0x166>
    13da:	1e6a      	subs	r2, r5, #1
    13dc:	4195      	sbcs	r5, r2
    13de:	432c      	orrs	r4, r5
    13e0:	9801      	ldr	r0, [sp, #4]
    13e2:	307f      	adds	r0, #127	; 0x7f
    13e4:	2800      	cmp	r0, #0
    13e6:	ddce      	ble.n	1386 <__aeabi_fdiv+0x12a>
    13e8:	0762      	lsls	r2, r4, #29
    13ea:	d004      	beq.n	13f6 <__aeabi_fdiv+0x19a>
    13ec:	220f      	movs	r2, #15
    13ee:	4022      	ands	r2, r4
    13f0:	2a04      	cmp	r2, #4
    13f2:	d000      	beq.n	13f6 <__aeabi_fdiv+0x19a>
    13f4:	3404      	adds	r4, #4
    13f6:	0122      	lsls	r2, r4, #4
    13f8:	d503      	bpl.n	1402 <__aeabi_fdiv+0x1a6>
    13fa:	4a24      	ldr	r2, [pc, #144]	; (148c <__aeabi_fdiv+0x230>)
    13fc:	9801      	ldr	r0, [sp, #4]
    13fe:	4014      	ands	r4, r2
    1400:	3080      	adds	r0, #128	; 0x80
    1402:	28fe      	cmp	r0, #254	; 0xfe
    1404:	dd00      	ble.n	1408 <__aeabi_fdiv+0x1ac>
    1406:	e764      	b.n	12d2 <__aeabi_fdiv+0x76>
    1408:	2201      	movs	r2, #1
    140a:	01a4      	lsls	r4, r4, #6
    140c:	0a64      	lsrs	r4, r4, #9
    140e:	b2c0      	uxtb	r0, r0
    1410:	401a      	ands	r2, r3
    1412:	e762      	b.n	12da <__aeabi_fdiv+0x7e>
    1414:	002c      	movs	r4, r5
    1416:	e7a9      	b.n	136c <__aeabi_fdiv+0x110>
    1418:	1a2d      	subs	r5, r5, r0
    141a:	221a      	movs	r2, #26
    141c:	2401      	movs	r4, #1
    141e:	e7cf      	b.n	13c0 <__aeabi_fdiv+0x164>
    1420:	026b      	lsls	r3, r5, #9
    1422:	d5bc      	bpl.n	139e <__aeabi_fdiv+0x142>
    1424:	2400      	movs	r4, #0
    1426:	2380      	movs	r3, #128	; 0x80
    1428:	03db      	lsls	r3, r3, #15
    142a:	431c      	orrs	r4, r3
    142c:	0264      	lsls	r4, r4, #9
    142e:	0a64      	lsrs	r4, r4, #9
    1430:	4642      	mov	r2, r8
    1432:	20ff      	movs	r0, #255	; 0xff
    1434:	e751      	b.n	12da <__aeabi_fdiv+0x7e>
    1436:	421c      	tst	r4, r3
    1438:	d1b3      	bne.n	13a2 <__aeabi_fdiv+0x146>
    143a:	e7f4      	b.n	1426 <__aeabi_fdiv+0x1ca>
    143c:	0021      	movs	r1, r4
    143e:	2220      	movs	r2, #32
    1440:	40c1      	lsrs	r1, r0
    1442:	1a10      	subs	r0, r2, r0
    1444:	4084      	lsls	r4, r0
    1446:	1e62      	subs	r2, r4, #1
    1448:	4194      	sbcs	r4, r2
    144a:	430c      	orrs	r4, r1
    144c:	0762      	lsls	r2, r4, #29
    144e:	d004      	beq.n	145a <__aeabi_fdiv+0x1fe>
    1450:	220f      	movs	r2, #15
    1452:	4022      	ands	r2, r4
    1454:	2a04      	cmp	r2, #4
    1456:	d000      	beq.n	145a <__aeabi_fdiv+0x1fe>
    1458:	3404      	adds	r4, #4
    145a:	0162      	lsls	r2, r4, #5
    145c:	d504      	bpl.n	1468 <__aeabi_fdiv+0x20c>
    145e:	2201      	movs	r2, #1
    1460:	2001      	movs	r0, #1
    1462:	401a      	ands	r2, r3
    1464:	2400      	movs	r4, #0
    1466:	e738      	b.n	12da <__aeabi_fdiv+0x7e>
    1468:	2201      	movs	r2, #1
    146a:	01a4      	lsls	r4, r4, #6
    146c:	0a64      	lsrs	r4, r4, #9
    146e:	401a      	ands	r2, r3
    1470:	2000      	movs	r0, #0
    1472:	e732      	b.n	12da <__aeabi_fdiv+0x7e>
    1474:	2380      	movs	r3, #128	; 0x80
    1476:	03db      	lsls	r3, r3, #15
    1478:	431c      	orrs	r4, r3
    147a:	0264      	lsls	r4, r4, #9
    147c:	0a64      	lsrs	r4, r4, #9
    147e:	4652      	mov	r2, sl
    1480:	20ff      	movs	r0, #255	; 0xff
    1482:	e72a      	b.n	12da <__aeabi_fdiv+0x7e>
    1484:	00001ff0 	.word	0x00001ff0
    1488:	00002030 	.word	0x00002030
    148c:	f7ffffff 	.word	0xf7ffffff

00001490 <__aeabi_ui2f>:
    1490:	b570      	push	{r4, r5, r6, lr}
    1492:	1e04      	subs	r4, r0, #0
    1494:	d028      	beq.n	14e8 <__aeabi_ui2f+0x58>
    1496:	f000 fbd5 	bl	1c44 <__clzsi2>
    149a:	239e      	movs	r3, #158	; 0x9e
    149c:	1a1b      	subs	r3, r3, r0
    149e:	2b96      	cmp	r3, #150	; 0x96
    14a0:	dc0a      	bgt.n	14b8 <__aeabi_ui2f+0x28>
    14a2:	2296      	movs	r2, #150	; 0x96
    14a4:	1ad2      	subs	r2, r2, r3
    14a6:	4094      	lsls	r4, r2
    14a8:	0262      	lsls	r2, r4, #9
    14aa:	0a52      	lsrs	r2, r2, #9
    14ac:	b2d8      	uxtb	r0, r3
    14ae:	0252      	lsls	r2, r2, #9
    14b0:	0a52      	lsrs	r2, r2, #9
    14b2:	05c0      	lsls	r0, r0, #23
    14b4:	4310      	orrs	r0, r2
    14b6:	bd70      	pop	{r4, r5, r6, pc}
    14b8:	2b99      	cmp	r3, #153	; 0x99
    14ba:	dc18      	bgt.n	14ee <__aeabi_ui2f+0x5e>
    14bc:	2299      	movs	r2, #153	; 0x99
    14be:	1ad2      	subs	r2, r2, r3
    14c0:	4094      	lsls	r4, r2
    14c2:	4a11      	ldr	r2, [pc, #68]	; (1508 <__aeabi_ui2f+0x78>)
    14c4:	4022      	ands	r2, r4
    14c6:	0761      	lsls	r1, r4, #29
    14c8:	d004      	beq.n	14d4 <__aeabi_ui2f+0x44>
    14ca:	210f      	movs	r1, #15
    14cc:	400c      	ands	r4, r1
    14ce:	2c04      	cmp	r4, #4
    14d0:	d000      	beq.n	14d4 <__aeabi_ui2f+0x44>
    14d2:	3204      	adds	r2, #4
    14d4:	0151      	lsls	r1, r2, #5
    14d6:	d503      	bpl.n	14e0 <__aeabi_ui2f+0x50>
    14d8:	4b0b      	ldr	r3, [pc, #44]	; (1508 <__aeabi_ui2f+0x78>)
    14da:	401a      	ands	r2, r3
    14dc:	239f      	movs	r3, #159	; 0x9f
    14de:	1a1b      	subs	r3, r3, r0
    14e0:	0192      	lsls	r2, r2, #6
    14e2:	0a52      	lsrs	r2, r2, #9
    14e4:	b2d8      	uxtb	r0, r3
    14e6:	e7e2      	b.n	14ae <__aeabi_ui2f+0x1e>
    14e8:	2000      	movs	r0, #0
    14ea:	2200      	movs	r2, #0
    14ec:	e7df      	b.n	14ae <__aeabi_ui2f+0x1e>
    14ee:	2205      	movs	r2, #5
    14f0:	0025      	movs	r5, r4
    14f2:	1a12      	subs	r2, r2, r0
    14f4:	21b9      	movs	r1, #185	; 0xb9
    14f6:	40d5      	lsrs	r5, r2
    14f8:	0022      	movs	r2, r4
    14fa:	1ac9      	subs	r1, r1, r3
    14fc:	408a      	lsls	r2, r1
    14fe:	1e54      	subs	r4, r2, #1
    1500:	41a2      	sbcs	r2, r4
    1502:	002c      	movs	r4, r5
    1504:	4314      	orrs	r4, r2
    1506:	e7dc      	b.n	14c2 <__aeabi_ui2f+0x32>
    1508:	fbffffff 	.word	0xfbffffff

0000150c <__aeabi_dmul>:
    150c:	b5f0      	push	{r4, r5, r6, r7, lr}
    150e:	465f      	mov	r7, fp
    1510:	4656      	mov	r6, sl
    1512:	464d      	mov	r5, r9
    1514:	4644      	mov	r4, r8
    1516:	b4f0      	push	{r4, r5, r6, r7}
    1518:	030d      	lsls	r5, r1, #12
    151a:	4699      	mov	r9, r3
    151c:	004e      	lsls	r6, r1, #1
    151e:	0b2b      	lsrs	r3, r5, #12
    1520:	b087      	sub	sp, #28
    1522:	0007      	movs	r7, r0
    1524:	4692      	mov	sl, r2
    1526:	4680      	mov	r8, r0
    1528:	469b      	mov	fp, r3
    152a:	0d76      	lsrs	r6, r6, #21
    152c:	0fcc      	lsrs	r4, r1, #31
    152e:	2e00      	cmp	r6, #0
    1530:	d069      	beq.n	1606 <__aeabi_dmul+0xfa>
    1532:	4b6d      	ldr	r3, [pc, #436]	; (16e8 <__aeabi_dmul+0x1dc>)
    1534:	429e      	cmp	r6, r3
    1536:	d035      	beq.n	15a4 <__aeabi_dmul+0x98>
    1538:	465b      	mov	r3, fp
    153a:	2280      	movs	r2, #128	; 0x80
    153c:	00dd      	lsls	r5, r3, #3
    153e:	0412      	lsls	r2, r2, #16
    1540:	0f43      	lsrs	r3, r0, #29
    1542:	4313      	orrs	r3, r2
    1544:	432b      	orrs	r3, r5
    1546:	469b      	mov	fp, r3
    1548:	00c3      	lsls	r3, r0, #3
    154a:	4698      	mov	r8, r3
    154c:	4b67      	ldr	r3, [pc, #412]	; (16ec <__aeabi_dmul+0x1e0>)
    154e:	2700      	movs	r7, #0
    1550:	469c      	mov	ip, r3
    1552:	2300      	movs	r3, #0
    1554:	4466      	add	r6, ip
    1556:	9301      	str	r3, [sp, #4]
    1558:	464a      	mov	r2, r9
    155a:	0315      	lsls	r5, r2, #12
    155c:	0050      	lsls	r0, r2, #1
    155e:	0fd2      	lsrs	r2, r2, #31
    1560:	4653      	mov	r3, sl
    1562:	0b2d      	lsrs	r5, r5, #12
    1564:	0d40      	lsrs	r0, r0, #21
    1566:	4691      	mov	r9, r2
    1568:	d100      	bne.n	156c <__aeabi_dmul+0x60>
    156a:	e076      	b.n	165a <__aeabi_dmul+0x14e>
    156c:	4a5e      	ldr	r2, [pc, #376]	; (16e8 <__aeabi_dmul+0x1dc>)
    156e:	4290      	cmp	r0, r2
    1570:	d06c      	beq.n	164c <__aeabi_dmul+0x140>
    1572:	2280      	movs	r2, #128	; 0x80
    1574:	0f5b      	lsrs	r3, r3, #29
    1576:	0412      	lsls	r2, r2, #16
    1578:	4313      	orrs	r3, r2
    157a:	4a5c      	ldr	r2, [pc, #368]	; (16ec <__aeabi_dmul+0x1e0>)
    157c:	00ed      	lsls	r5, r5, #3
    157e:	4694      	mov	ip, r2
    1580:	431d      	orrs	r5, r3
    1582:	4653      	mov	r3, sl
    1584:	2200      	movs	r2, #0
    1586:	00db      	lsls	r3, r3, #3
    1588:	4460      	add	r0, ip
    158a:	4649      	mov	r1, r9
    158c:	1836      	adds	r6, r6, r0
    158e:	1c70      	adds	r0, r6, #1
    1590:	4061      	eors	r1, r4
    1592:	9002      	str	r0, [sp, #8]
    1594:	4317      	orrs	r7, r2
    1596:	2f0f      	cmp	r7, #15
    1598:	d900      	bls.n	159c <__aeabi_dmul+0x90>
    159a:	e0af      	b.n	16fc <__aeabi_dmul+0x1f0>
    159c:	4854      	ldr	r0, [pc, #336]	; (16f0 <__aeabi_dmul+0x1e4>)
    159e:	00bf      	lsls	r7, r7, #2
    15a0:	59c7      	ldr	r7, [r0, r7]
    15a2:	46bf      	mov	pc, r7
    15a4:	465b      	mov	r3, fp
    15a6:	431f      	orrs	r7, r3
    15a8:	d000      	beq.n	15ac <__aeabi_dmul+0xa0>
    15aa:	e088      	b.n	16be <__aeabi_dmul+0x1b2>
    15ac:	2300      	movs	r3, #0
    15ae:	469b      	mov	fp, r3
    15b0:	4698      	mov	r8, r3
    15b2:	3302      	adds	r3, #2
    15b4:	2708      	movs	r7, #8
    15b6:	9301      	str	r3, [sp, #4]
    15b8:	e7ce      	b.n	1558 <__aeabi_dmul+0x4c>
    15ba:	4649      	mov	r1, r9
    15bc:	2a02      	cmp	r2, #2
    15be:	d06a      	beq.n	1696 <__aeabi_dmul+0x18a>
    15c0:	2a03      	cmp	r2, #3
    15c2:	d100      	bne.n	15c6 <__aeabi_dmul+0xba>
    15c4:	e209      	b.n	19da <__aeabi_dmul+0x4ce>
    15c6:	2a01      	cmp	r2, #1
    15c8:	d000      	beq.n	15cc <__aeabi_dmul+0xc0>
    15ca:	e1bb      	b.n	1944 <__aeabi_dmul+0x438>
    15cc:	4011      	ands	r1, r2
    15ce:	2200      	movs	r2, #0
    15d0:	2300      	movs	r3, #0
    15d2:	2500      	movs	r5, #0
    15d4:	4690      	mov	r8, r2
    15d6:	b2cc      	uxtb	r4, r1
    15d8:	2100      	movs	r1, #0
    15da:	032d      	lsls	r5, r5, #12
    15dc:	0d0a      	lsrs	r2, r1, #20
    15de:	0512      	lsls	r2, r2, #20
    15e0:	0b2d      	lsrs	r5, r5, #12
    15e2:	4315      	orrs	r5, r2
    15e4:	4a43      	ldr	r2, [pc, #268]	; (16f4 <__aeabi_dmul+0x1e8>)
    15e6:	051b      	lsls	r3, r3, #20
    15e8:	4015      	ands	r5, r2
    15ea:	431d      	orrs	r5, r3
    15ec:	006d      	lsls	r5, r5, #1
    15ee:	07e4      	lsls	r4, r4, #31
    15f0:	086d      	lsrs	r5, r5, #1
    15f2:	4325      	orrs	r5, r4
    15f4:	4640      	mov	r0, r8
    15f6:	0029      	movs	r1, r5
    15f8:	b007      	add	sp, #28
    15fa:	bc3c      	pop	{r2, r3, r4, r5}
    15fc:	4690      	mov	r8, r2
    15fe:	4699      	mov	r9, r3
    1600:	46a2      	mov	sl, r4
    1602:	46ab      	mov	fp, r5
    1604:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1606:	4303      	orrs	r3, r0
    1608:	d052      	beq.n	16b0 <__aeabi_dmul+0x1a4>
    160a:	465b      	mov	r3, fp
    160c:	2b00      	cmp	r3, #0
    160e:	d100      	bne.n	1612 <__aeabi_dmul+0x106>
    1610:	e18a      	b.n	1928 <__aeabi_dmul+0x41c>
    1612:	4658      	mov	r0, fp
    1614:	f000 fb16 	bl	1c44 <__clzsi2>
    1618:	0003      	movs	r3, r0
    161a:	3b0b      	subs	r3, #11
    161c:	2b1c      	cmp	r3, #28
    161e:	dd00      	ble.n	1622 <__aeabi_dmul+0x116>
    1620:	e17b      	b.n	191a <__aeabi_dmul+0x40e>
    1622:	221d      	movs	r2, #29
    1624:	1ad3      	subs	r3, r2, r3
    1626:	003a      	movs	r2, r7
    1628:	0001      	movs	r1, r0
    162a:	465d      	mov	r5, fp
    162c:	40da      	lsrs	r2, r3
    162e:	3908      	subs	r1, #8
    1630:	408d      	lsls	r5, r1
    1632:	0013      	movs	r3, r2
    1634:	408f      	lsls	r7, r1
    1636:	432b      	orrs	r3, r5
    1638:	469b      	mov	fp, r3
    163a:	46b8      	mov	r8, r7
    163c:	4b2e      	ldr	r3, [pc, #184]	; (16f8 <__aeabi_dmul+0x1ec>)
    163e:	2700      	movs	r7, #0
    1640:	469c      	mov	ip, r3
    1642:	2300      	movs	r3, #0
    1644:	4460      	add	r0, ip
    1646:	4246      	negs	r6, r0
    1648:	9301      	str	r3, [sp, #4]
    164a:	e785      	b.n	1558 <__aeabi_dmul+0x4c>
    164c:	4652      	mov	r2, sl
    164e:	432a      	orrs	r2, r5
    1650:	d12c      	bne.n	16ac <__aeabi_dmul+0x1a0>
    1652:	2500      	movs	r5, #0
    1654:	2300      	movs	r3, #0
    1656:	2202      	movs	r2, #2
    1658:	e797      	b.n	158a <__aeabi_dmul+0x7e>
    165a:	4652      	mov	r2, sl
    165c:	432a      	orrs	r2, r5
    165e:	d021      	beq.n	16a4 <__aeabi_dmul+0x198>
    1660:	2d00      	cmp	r5, #0
    1662:	d100      	bne.n	1666 <__aeabi_dmul+0x15a>
    1664:	e154      	b.n	1910 <__aeabi_dmul+0x404>
    1666:	0028      	movs	r0, r5
    1668:	f000 faec 	bl	1c44 <__clzsi2>
    166c:	0003      	movs	r3, r0
    166e:	3b0b      	subs	r3, #11
    1670:	2b1c      	cmp	r3, #28
    1672:	dd00      	ble.n	1676 <__aeabi_dmul+0x16a>
    1674:	e146      	b.n	1904 <__aeabi_dmul+0x3f8>
    1676:	211d      	movs	r1, #29
    1678:	1acb      	subs	r3, r1, r3
    167a:	4651      	mov	r1, sl
    167c:	0002      	movs	r2, r0
    167e:	40d9      	lsrs	r1, r3
    1680:	4653      	mov	r3, sl
    1682:	3a08      	subs	r2, #8
    1684:	4095      	lsls	r5, r2
    1686:	4093      	lsls	r3, r2
    1688:	430d      	orrs	r5, r1
    168a:	4a1b      	ldr	r2, [pc, #108]	; (16f8 <__aeabi_dmul+0x1ec>)
    168c:	4694      	mov	ip, r2
    168e:	4460      	add	r0, ip
    1690:	4240      	negs	r0, r0
    1692:	2200      	movs	r2, #0
    1694:	e779      	b.n	158a <__aeabi_dmul+0x7e>
    1696:	2401      	movs	r4, #1
    1698:	2200      	movs	r2, #0
    169a:	400c      	ands	r4, r1
    169c:	4b12      	ldr	r3, [pc, #72]	; (16e8 <__aeabi_dmul+0x1dc>)
    169e:	2500      	movs	r5, #0
    16a0:	4690      	mov	r8, r2
    16a2:	e799      	b.n	15d8 <__aeabi_dmul+0xcc>
    16a4:	2500      	movs	r5, #0
    16a6:	2300      	movs	r3, #0
    16a8:	2201      	movs	r2, #1
    16aa:	e76e      	b.n	158a <__aeabi_dmul+0x7e>
    16ac:	2203      	movs	r2, #3
    16ae:	e76c      	b.n	158a <__aeabi_dmul+0x7e>
    16b0:	2300      	movs	r3, #0
    16b2:	469b      	mov	fp, r3
    16b4:	4698      	mov	r8, r3
    16b6:	3301      	adds	r3, #1
    16b8:	2704      	movs	r7, #4
    16ba:	9301      	str	r3, [sp, #4]
    16bc:	e74c      	b.n	1558 <__aeabi_dmul+0x4c>
    16be:	2303      	movs	r3, #3
    16c0:	270c      	movs	r7, #12
    16c2:	9301      	str	r3, [sp, #4]
    16c4:	e748      	b.n	1558 <__aeabi_dmul+0x4c>
    16c6:	2300      	movs	r3, #0
    16c8:	2580      	movs	r5, #128	; 0x80
    16ca:	4698      	mov	r8, r3
    16cc:	2400      	movs	r4, #0
    16ce:	032d      	lsls	r5, r5, #12
    16d0:	4b05      	ldr	r3, [pc, #20]	; (16e8 <__aeabi_dmul+0x1dc>)
    16d2:	e781      	b.n	15d8 <__aeabi_dmul+0xcc>
    16d4:	465d      	mov	r5, fp
    16d6:	4643      	mov	r3, r8
    16d8:	9a01      	ldr	r2, [sp, #4]
    16da:	e76f      	b.n	15bc <__aeabi_dmul+0xb0>
    16dc:	465d      	mov	r5, fp
    16de:	4643      	mov	r3, r8
    16e0:	0021      	movs	r1, r4
    16e2:	9a01      	ldr	r2, [sp, #4]
    16e4:	e76a      	b.n	15bc <__aeabi_dmul+0xb0>
    16e6:	46c0      	nop			; (mov r8, r8)
    16e8:	000007ff 	.word	0x000007ff
    16ec:	fffffc01 	.word	0xfffffc01
    16f0:	00002070 	.word	0x00002070
    16f4:	800fffff 	.word	0x800fffff
    16f8:	000003f3 	.word	0x000003f3
    16fc:	4642      	mov	r2, r8
    16fe:	0c12      	lsrs	r2, r2, #16
    1700:	4691      	mov	r9, r2
    1702:	0c1a      	lsrs	r2, r3, #16
    1704:	4694      	mov	ip, r2
    1706:	4642      	mov	r2, r8
    1708:	0417      	lsls	r7, r2, #16
    170a:	464a      	mov	r2, r9
    170c:	041b      	lsls	r3, r3, #16
    170e:	0c1b      	lsrs	r3, r3, #16
    1710:	435a      	muls	r2, r3
    1712:	4660      	mov	r0, ip
    1714:	4690      	mov	r8, r2
    1716:	464a      	mov	r2, r9
    1718:	4342      	muls	r2, r0
    171a:	0010      	movs	r0, r2
    171c:	9203      	str	r2, [sp, #12]
    171e:	4662      	mov	r2, ip
    1720:	001c      	movs	r4, r3
    1722:	0c3f      	lsrs	r7, r7, #16
    1724:	437a      	muls	r2, r7
    1726:	437c      	muls	r4, r7
    1728:	4442      	add	r2, r8
    172a:	9201      	str	r2, [sp, #4]
    172c:	0c22      	lsrs	r2, r4, #16
    172e:	4692      	mov	sl, r2
    1730:	9a01      	ldr	r2, [sp, #4]
    1732:	4452      	add	r2, sl
    1734:	4590      	cmp	r8, r2
    1736:	d906      	bls.n	1746 <__aeabi_dmul+0x23a>
    1738:	4682      	mov	sl, r0
    173a:	2080      	movs	r0, #128	; 0x80
    173c:	0240      	lsls	r0, r0, #9
    173e:	4680      	mov	r8, r0
    1740:	44c2      	add	sl, r8
    1742:	4650      	mov	r0, sl
    1744:	9003      	str	r0, [sp, #12]
    1746:	0c10      	lsrs	r0, r2, #16
    1748:	9004      	str	r0, [sp, #16]
    174a:	4648      	mov	r0, r9
    174c:	0424      	lsls	r4, r4, #16
    174e:	0c24      	lsrs	r4, r4, #16
    1750:	0412      	lsls	r2, r2, #16
    1752:	1912      	adds	r2, r2, r4
    1754:	9205      	str	r2, [sp, #20]
    1756:	0c2a      	lsrs	r2, r5, #16
    1758:	042d      	lsls	r5, r5, #16
    175a:	0c2d      	lsrs	r5, r5, #16
    175c:	4368      	muls	r0, r5
    175e:	002c      	movs	r4, r5
    1760:	4682      	mov	sl, r0
    1762:	4648      	mov	r0, r9
    1764:	437c      	muls	r4, r7
    1766:	4350      	muls	r0, r2
    1768:	4681      	mov	r9, r0
    176a:	0c20      	lsrs	r0, r4, #16
    176c:	4680      	mov	r8, r0
    176e:	4357      	muls	r7, r2
    1770:	4457      	add	r7, sl
    1772:	4447      	add	r7, r8
    1774:	45ba      	cmp	sl, r7
    1776:	d903      	bls.n	1780 <__aeabi_dmul+0x274>
    1778:	2080      	movs	r0, #128	; 0x80
    177a:	0240      	lsls	r0, r0, #9
    177c:	4680      	mov	r8, r0
    177e:	44c1      	add	r9, r8
    1780:	0c38      	lsrs	r0, r7, #16
    1782:	043f      	lsls	r7, r7, #16
    1784:	46b8      	mov	r8, r7
    1786:	4448      	add	r0, r9
    1788:	0424      	lsls	r4, r4, #16
    178a:	0c24      	lsrs	r4, r4, #16
    178c:	9001      	str	r0, [sp, #4]
    178e:	9804      	ldr	r0, [sp, #16]
    1790:	44a0      	add	r8, r4
    1792:	4440      	add	r0, r8
    1794:	9004      	str	r0, [sp, #16]
    1796:	4658      	mov	r0, fp
    1798:	0c00      	lsrs	r0, r0, #16
    179a:	4681      	mov	r9, r0
    179c:	4658      	mov	r0, fp
    179e:	0404      	lsls	r4, r0, #16
    17a0:	0c20      	lsrs	r0, r4, #16
    17a2:	4682      	mov	sl, r0
    17a4:	0007      	movs	r7, r0
    17a6:	4648      	mov	r0, r9
    17a8:	435f      	muls	r7, r3
    17aa:	464c      	mov	r4, r9
    17ac:	4343      	muls	r3, r0
    17ae:	4660      	mov	r0, ip
    17b0:	4360      	muls	r0, r4
    17b2:	4664      	mov	r4, ip
    17b4:	4683      	mov	fp, r0
    17b6:	4650      	mov	r0, sl
    17b8:	4344      	muls	r4, r0
    17ba:	0c38      	lsrs	r0, r7, #16
    17bc:	4684      	mov	ip, r0
    17be:	18e4      	adds	r4, r4, r3
    17c0:	4464      	add	r4, ip
    17c2:	42a3      	cmp	r3, r4
    17c4:	d903      	bls.n	17ce <__aeabi_dmul+0x2c2>
    17c6:	2380      	movs	r3, #128	; 0x80
    17c8:	025b      	lsls	r3, r3, #9
    17ca:	469c      	mov	ip, r3
    17cc:	44e3      	add	fp, ip
    17ce:	4648      	mov	r0, r9
    17d0:	043f      	lsls	r7, r7, #16
    17d2:	0c23      	lsrs	r3, r4, #16
    17d4:	0c3f      	lsrs	r7, r7, #16
    17d6:	0424      	lsls	r4, r4, #16
    17d8:	19e4      	adds	r4, r4, r7
    17da:	4657      	mov	r7, sl
    17dc:	4368      	muls	r0, r5
    17de:	436f      	muls	r7, r5
    17e0:	4684      	mov	ip, r0
    17e2:	464d      	mov	r5, r9
    17e4:	4650      	mov	r0, sl
    17e6:	4355      	muls	r5, r2
    17e8:	4342      	muls	r2, r0
    17ea:	0c38      	lsrs	r0, r7, #16
    17ec:	4681      	mov	r9, r0
    17ee:	4462      	add	r2, ip
    17f0:	444a      	add	r2, r9
    17f2:	445b      	add	r3, fp
    17f4:	4594      	cmp	ip, r2
    17f6:	d903      	bls.n	1800 <__aeabi_dmul+0x2f4>
    17f8:	2080      	movs	r0, #128	; 0x80
    17fa:	0240      	lsls	r0, r0, #9
    17fc:	4684      	mov	ip, r0
    17fe:	4465      	add	r5, ip
    1800:	9803      	ldr	r0, [sp, #12]
    1802:	043f      	lsls	r7, r7, #16
    1804:	4683      	mov	fp, r0
    1806:	9804      	ldr	r0, [sp, #16]
    1808:	0c3f      	lsrs	r7, r7, #16
    180a:	4684      	mov	ip, r0
    180c:	44e3      	add	fp, ip
    180e:	45c3      	cmp	fp, r8
    1810:	4180      	sbcs	r0, r0
    1812:	4240      	negs	r0, r0
    1814:	4682      	mov	sl, r0
    1816:	0410      	lsls	r0, r2, #16
    1818:	4684      	mov	ip, r0
    181a:	9801      	ldr	r0, [sp, #4]
    181c:	4467      	add	r7, ip
    181e:	4684      	mov	ip, r0
    1820:	4467      	add	r7, ip
    1822:	44a3      	add	fp, r4
    1824:	46bc      	mov	ip, r7
    1826:	45a3      	cmp	fp, r4
    1828:	41a4      	sbcs	r4, r4
    182a:	4699      	mov	r9, r3
    182c:	44d4      	add	ip, sl
    182e:	4264      	negs	r4, r4
    1830:	4287      	cmp	r7, r0
    1832:	41bf      	sbcs	r7, r7
    1834:	45d4      	cmp	ip, sl
    1836:	4180      	sbcs	r0, r0
    1838:	44e1      	add	r9, ip
    183a:	46a0      	mov	r8, r4
    183c:	4599      	cmp	r9, r3
    183e:	419b      	sbcs	r3, r3
    1840:	427f      	negs	r7, r7
    1842:	4240      	negs	r0, r0
    1844:	44c8      	add	r8, r9
    1846:	4307      	orrs	r7, r0
    1848:	0c12      	lsrs	r2, r2, #16
    184a:	18ba      	adds	r2, r7, r2
    184c:	45a0      	cmp	r8, r4
    184e:	41a4      	sbcs	r4, r4
    1850:	425f      	negs	r7, r3
    1852:	003b      	movs	r3, r7
    1854:	4264      	negs	r4, r4
    1856:	4323      	orrs	r3, r4
    1858:	18d7      	adds	r7, r2, r3
    185a:	4643      	mov	r3, r8
    185c:	197d      	adds	r5, r7, r5
    185e:	0ddb      	lsrs	r3, r3, #23
    1860:	026d      	lsls	r5, r5, #9
    1862:	431d      	orrs	r5, r3
    1864:	465b      	mov	r3, fp
    1866:	025a      	lsls	r2, r3, #9
    1868:	9b05      	ldr	r3, [sp, #20]
    186a:	431a      	orrs	r2, r3
    186c:	1e53      	subs	r3, r2, #1
    186e:	419a      	sbcs	r2, r3
    1870:	465b      	mov	r3, fp
    1872:	0ddb      	lsrs	r3, r3, #23
    1874:	431a      	orrs	r2, r3
    1876:	4643      	mov	r3, r8
    1878:	025b      	lsls	r3, r3, #9
    187a:	4313      	orrs	r3, r2
    187c:	01ea      	lsls	r2, r5, #7
    187e:	d507      	bpl.n	1890 <__aeabi_dmul+0x384>
    1880:	2201      	movs	r2, #1
    1882:	085c      	lsrs	r4, r3, #1
    1884:	4013      	ands	r3, r2
    1886:	4323      	orrs	r3, r4
    1888:	07ea      	lsls	r2, r5, #31
    188a:	9e02      	ldr	r6, [sp, #8]
    188c:	4313      	orrs	r3, r2
    188e:	086d      	lsrs	r5, r5, #1
    1890:	4a57      	ldr	r2, [pc, #348]	; (19f0 <__aeabi_dmul+0x4e4>)
    1892:	18b2      	adds	r2, r6, r2
    1894:	2a00      	cmp	r2, #0
    1896:	dd4b      	ble.n	1930 <__aeabi_dmul+0x424>
    1898:	0758      	lsls	r0, r3, #29
    189a:	d009      	beq.n	18b0 <__aeabi_dmul+0x3a4>
    189c:	200f      	movs	r0, #15
    189e:	4018      	ands	r0, r3
    18a0:	2804      	cmp	r0, #4
    18a2:	d005      	beq.n	18b0 <__aeabi_dmul+0x3a4>
    18a4:	1d18      	adds	r0, r3, #4
    18a6:	4298      	cmp	r0, r3
    18a8:	419b      	sbcs	r3, r3
    18aa:	425b      	negs	r3, r3
    18ac:	18ed      	adds	r5, r5, r3
    18ae:	0003      	movs	r3, r0
    18b0:	01e8      	lsls	r0, r5, #7
    18b2:	d504      	bpl.n	18be <__aeabi_dmul+0x3b2>
    18b4:	4a4f      	ldr	r2, [pc, #316]	; (19f4 <__aeabi_dmul+0x4e8>)
    18b6:	4015      	ands	r5, r2
    18b8:	2280      	movs	r2, #128	; 0x80
    18ba:	00d2      	lsls	r2, r2, #3
    18bc:	18b2      	adds	r2, r6, r2
    18be:	484e      	ldr	r0, [pc, #312]	; (19f8 <__aeabi_dmul+0x4ec>)
    18c0:	4282      	cmp	r2, r0
    18c2:	dd00      	ble.n	18c6 <__aeabi_dmul+0x3ba>
    18c4:	e6e7      	b.n	1696 <__aeabi_dmul+0x18a>
    18c6:	2401      	movs	r4, #1
    18c8:	08db      	lsrs	r3, r3, #3
    18ca:	0768      	lsls	r0, r5, #29
    18cc:	4318      	orrs	r0, r3
    18ce:	026d      	lsls	r5, r5, #9
    18d0:	0553      	lsls	r3, r2, #21
    18d2:	4680      	mov	r8, r0
    18d4:	0b2d      	lsrs	r5, r5, #12
    18d6:	0d5b      	lsrs	r3, r3, #21
    18d8:	400c      	ands	r4, r1
    18da:	e67d      	b.n	15d8 <__aeabi_dmul+0xcc>
    18dc:	2280      	movs	r2, #128	; 0x80
    18de:	4659      	mov	r1, fp
    18e0:	0312      	lsls	r2, r2, #12
    18e2:	4211      	tst	r1, r2
    18e4:	d008      	beq.n	18f8 <__aeabi_dmul+0x3ec>
    18e6:	4215      	tst	r5, r2
    18e8:	d106      	bne.n	18f8 <__aeabi_dmul+0x3ec>
    18ea:	4315      	orrs	r5, r2
    18ec:	032d      	lsls	r5, r5, #12
    18ee:	4698      	mov	r8, r3
    18f0:	0b2d      	lsrs	r5, r5, #12
    18f2:	464c      	mov	r4, r9
    18f4:	4b41      	ldr	r3, [pc, #260]	; (19fc <__aeabi_dmul+0x4f0>)
    18f6:	e66f      	b.n	15d8 <__aeabi_dmul+0xcc>
    18f8:	465d      	mov	r5, fp
    18fa:	4315      	orrs	r5, r2
    18fc:	032d      	lsls	r5, r5, #12
    18fe:	0b2d      	lsrs	r5, r5, #12
    1900:	4b3e      	ldr	r3, [pc, #248]	; (19fc <__aeabi_dmul+0x4f0>)
    1902:	e669      	b.n	15d8 <__aeabi_dmul+0xcc>
    1904:	0003      	movs	r3, r0
    1906:	4655      	mov	r5, sl
    1908:	3b28      	subs	r3, #40	; 0x28
    190a:	409d      	lsls	r5, r3
    190c:	2300      	movs	r3, #0
    190e:	e6bc      	b.n	168a <__aeabi_dmul+0x17e>
    1910:	4650      	mov	r0, sl
    1912:	f000 f997 	bl	1c44 <__clzsi2>
    1916:	3020      	adds	r0, #32
    1918:	e6a8      	b.n	166c <__aeabi_dmul+0x160>
    191a:	0003      	movs	r3, r0
    191c:	3b28      	subs	r3, #40	; 0x28
    191e:	409f      	lsls	r7, r3
    1920:	2300      	movs	r3, #0
    1922:	46bb      	mov	fp, r7
    1924:	4698      	mov	r8, r3
    1926:	e689      	b.n	163c <__aeabi_dmul+0x130>
    1928:	f000 f98c 	bl	1c44 <__clzsi2>
    192c:	3020      	adds	r0, #32
    192e:	e673      	b.n	1618 <__aeabi_dmul+0x10c>
    1930:	2401      	movs	r4, #1
    1932:	1aa6      	subs	r6, r4, r2
    1934:	2e38      	cmp	r6, #56	; 0x38
    1936:	dd07      	ble.n	1948 <__aeabi_dmul+0x43c>
    1938:	2200      	movs	r2, #0
    193a:	400c      	ands	r4, r1
    193c:	2300      	movs	r3, #0
    193e:	2500      	movs	r5, #0
    1940:	4690      	mov	r8, r2
    1942:	e649      	b.n	15d8 <__aeabi_dmul+0xcc>
    1944:	9e02      	ldr	r6, [sp, #8]
    1946:	e7a3      	b.n	1890 <__aeabi_dmul+0x384>
    1948:	2e1f      	cmp	r6, #31
    194a:	dc20      	bgt.n	198e <__aeabi_dmul+0x482>
    194c:	2220      	movs	r2, #32
    194e:	002c      	movs	r4, r5
    1950:	0018      	movs	r0, r3
    1952:	1b92      	subs	r2, r2, r6
    1954:	40f0      	lsrs	r0, r6
    1956:	4094      	lsls	r4, r2
    1958:	4093      	lsls	r3, r2
    195a:	4304      	orrs	r4, r0
    195c:	1e58      	subs	r0, r3, #1
    195e:	4183      	sbcs	r3, r0
    1960:	431c      	orrs	r4, r3
    1962:	40f5      	lsrs	r5, r6
    1964:	0763      	lsls	r3, r4, #29
    1966:	d009      	beq.n	197c <__aeabi_dmul+0x470>
    1968:	230f      	movs	r3, #15
    196a:	4023      	ands	r3, r4
    196c:	2b04      	cmp	r3, #4
    196e:	d005      	beq.n	197c <__aeabi_dmul+0x470>
    1970:	0023      	movs	r3, r4
    1972:	1d1c      	adds	r4, r3, #4
    1974:	429c      	cmp	r4, r3
    1976:	4192      	sbcs	r2, r2
    1978:	4252      	negs	r2, r2
    197a:	18ad      	adds	r5, r5, r2
    197c:	022b      	lsls	r3, r5, #8
    197e:	d51f      	bpl.n	19c0 <__aeabi_dmul+0x4b4>
    1980:	2401      	movs	r4, #1
    1982:	2200      	movs	r2, #0
    1984:	400c      	ands	r4, r1
    1986:	2301      	movs	r3, #1
    1988:	2500      	movs	r5, #0
    198a:	4690      	mov	r8, r2
    198c:	e624      	b.n	15d8 <__aeabi_dmul+0xcc>
    198e:	201f      	movs	r0, #31
    1990:	002c      	movs	r4, r5
    1992:	4240      	negs	r0, r0
    1994:	1a82      	subs	r2, r0, r2
    1996:	40d4      	lsrs	r4, r2
    1998:	2e20      	cmp	r6, #32
    199a:	d01c      	beq.n	19d6 <__aeabi_dmul+0x4ca>
    199c:	2240      	movs	r2, #64	; 0x40
    199e:	1b96      	subs	r6, r2, r6
    19a0:	40b5      	lsls	r5, r6
    19a2:	432b      	orrs	r3, r5
    19a4:	1e58      	subs	r0, r3, #1
    19a6:	4183      	sbcs	r3, r0
    19a8:	2007      	movs	r0, #7
    19aa:	4323      	orrs	r3, r4
    19ac:	4018      	ands	r0, r3
    19ae:	2500      	movs	r5, #0
    19b0:	2800      	cmp	r0, #0
    19b2:	d009      	beq.n	19c8 <__aeabi_dmul+0x4bc>
    19b4:	220f      	movs	r2, #15
    19b6:	2500      	movs	r5, #0
    19b8:	401a      	ands	r2, r3
    19ba:	001c      	movs	r4, r3
    19bc:	2a04      	cmp	r2, #4
    19be:	d1d8      	bne.n	1972 <__aeabi_dmul+0x466>
    19c0:	0023      	movs	r3, r4
    19c2:	0768      	lsls	r0, r5, #29
    19c4:	026d      	lsls	r5, r5, #9
    19c6:	0b2d      	lsrs	r5, r5, #12
    19c8:	2401      	movs	r4, #1
    19ca:	08db      	lsrs	r3, r3, #3
    19cc:	4303      	orrs	r3, r0
    19ce:	4698      	mov	r8, r3
    19d0:	400c      	ands	r4, r1
    19d2:	2300      	movs	r3, #0
    19d4:	e600      	b.n	15d8 <__aeabi_dmul+0xcc>
    19d6:	2500      	movs	r5, #0
    19d8:	e7e3      	b.n	19a2 <__aeabi_dmul+0x496>
    19da:	2280      	movs	r2, #128	; 0x80
    19dc:	2401      	movs	r4, #1
    19de:	0312      	lsls	r2, r2, #12
    19e0:	4315      	orrs	r5, r2
    19e2:	032d      	lsls	r5, r5, #12
    19e4:	4698      	mov	r8, r3
    19e6:	0b2d      	lsrs	r5, r5, #12
    19e8:	400c      	ands	r4, r1
    19ea:	4b04      	ldr	r3, [pc, #16]	; (19fc <__aeabi_dmul+0x4f0>)
    19ec:	e5f4      	b.n	15d8 <__aeabi_dmul+0xcc>
    19ee:	46c0      	nop			; (mov r8, r8)
    19f0:	000003ff 	.word	0x000003ff
    19f4:	feffffff 	.word	0xfeffffff
    19f8:	000007fe 	.word	0x000007fe
    19fc:	000007ff 	.word	0x000007ff

00001a00 <__aeabi_i2d>:
    1a00:	b570      	push	{r4, r5, r6, lr}
    1a02:	2800      	cmp	r0, #0
    1a04:	d030      	beq.n	1a68 <__aeabi_i2d+0x68>
    1a06:	17c3      	asrs	r3, r0, #31
    1a08:	18c4      	adds	r4, r0, r3
    1a0a:	405c      	eors	r4, r3
    1a0c:	0fc5      	lsrs	r5, r0, #31
    1a0e:	0020      	movs	r0, r4
    1a10:	f000 f918 	bl	1c44 <__clzsi2>
    1a14:	4b17      	ldr	r3, [pc, #92]	; (1a74 <__aeabi_i2d+0x74>)
    1a16:	4a18      	ldr	r2, [pc, #96]	; (1a78 <__aeabi_i2d+0x78>)
    1a18:	1a1b      	subs	r3, r3, r0
    1a1a:	1ad2      	subs	r2, r2, r3
    1a1c:	2a1f      	cmp	r2, #31
    1a1e:	dd18      	ble.n	1a52 <__aeabi_i2d+0x52>
    1a20:	4a16      	ldr	r2, [pc, #88]	; (1a7c <__aeabi_i2d+0x7c>)
    1a22:	1ad2      	subs	r2, r2, r3
    1a24:	4094      	lsls	r4, r2
    1a26:	2200      	movs	r2, #0
    1a28:	0324      	lsls	r4, r4, #12
    1a2a:	055b      	lsls	r3, r3, #21
    1a2c:	0b24      	lsrs	r4, r4, #12
    1a2e:	0d5b      	lsrs	r3, r3, #21
    1a30:	2100      	movs	r1, #0
    1a32:	0010      	movs	r0, r2
    1a34:	0324      	lsls	r4, r4, #12
    1a36:	0d0a      	lsrs	r2, r1, #20
    1a38:	0512      	lsls	r2, r2, #20
    1a3a:	0b24      	lsrs	r4, r4, #12
    1a3c:	4314      	orrs	r4, r2
    1a3e:	4a10      	ldr	r2, [pc, #64]	; (1a80 <__aeabi_i2d+0x80>)
    1a40:	051b      	lsls	r3, r3, #20
    1a42:	4014      	ands	r4, r2
    1a44:	431c      	orrs	r4, r3
    1a46:	0064      	lsls	r4, r4, #1
    1a48:	07ed      	lsls	r5, r5, #31
    1a4a:	0864      	lsrs	r4, r4, #1
    1a4c:	432c      	orrs	r4, r5
    1a4e:	0021      	movs	r1, r4
    1a50:	bd70      	pop	{r4, r5, r6, pc}
    1a52:	0021      	movs	r1, r4
    1a54:	4091      	lsls	r1, r2
    1a56:	000a      	movs	r2, r1
    1a58:	210b      	movs	r1, #11
    1a5a:	1a08      	subs	r0, r1, r0
    1a5c:	40c4      	lsrs	r4, r0
    1a5e:	055b      	lsls	r3, r3, #21
    1a60:	0324      	lsls	r4, r4, #12
    1a62:	0b24      	lsrs	r4, r4, #12
    1a64:	0d5b      	lsrs	r3, r3, #21
    1a66:	e7e3      	b.n	1a30 <__aeabi_i2d+0x30>
    1a68:	2500      	movs	r5, #0
    1a6a:	2300      	movs	r3, #0
    1a6c:	2400      	movs	r4, #0
    1a6e:	2200      	movs	r2, #0
    1a70:	e7de      	b.n	1a30 <__aeabi_i2d+0x30>
    1a72:	46c0      	nop			; (mov r8, r8)
    1a74:	0000041e 	.word	0x0000041e
    1a78:	00000433 	.word	0x00000433
    1a7c:	00000413 	.word	0x00000413
    1a80:	800fffff 	.word	0x800fffff

00001a84 <__aeabi_f2d>:
    1a84:	0042      	lsls	r2, r0, #1
    1a86:	0e12      	lsrs	r2, r2, #24
    1a88:	1c51      	adds	r1, r2, #1
    1a8a:	0243      	lsls	r3, r0, #9
    1a8c:	b2c9      	uxtb	r1, r1
    1a8e:	b570      	push	{r4, r5, r6, lr}
    1a90:	0a5d      	lsrs	r5, r3, #9
    1a92:	0fc4      	lsrs	r4, r0, #31
    1a94:	2901      	cmp	r1, #1
    1a96:	dd15      	ble.n	1ac4 <__aeabi_f2d+0x40>
    1a98:	21e0      	movs	r1, #224	; 0xe0
    1a9a:	0089      	lsls	r1, r1, #2
    1a9c:	468c      	mov	ip, r1
    1a9e:	076d      	lsls	r5, r5, #29
    1aa0:	0b1b      	lsrs	r3, r3, #12
    1aa2:	4462      	add	r2, ip
    1aa4:	2100      	movs	r1, #0
    1aa6:	0028      	movs	r0, r5
    1aa8:	0d0d      	lsrs	r5, r1, #20
    1aaa:	052d      	lsls	r5, r5, #20
    1aac:	432b      	orrs	r3, r5
    1aae:	4d1c      	ldr	r5, [pc, #112]	; (1b20 <__aeabi_f2d+0x9c>)
    1ab0:	0552      	lsls	r2, r2, #21
    1ab2:	402b      	ands	r3, r5
    1ab4:	0852      	lsrs	r2, r2, #1
    1ab6:	4313      	orrs	r3, r2
    1ab8:	005b      	lsls	r3, r3, #1
    1aba:	07e4      	lsls	r4, r4, #31
    1abc:	085b      	lsrs	r3, r3, #1
    1abe:	4323      	orrs	r3, r4
    1ac0:	0019      	movs	r1, r3
    1ac2:	bd70      	pop	{r4, r5, r6, pc}
    1ac4:	2a00      	cmp	r2, #0
    1ac6:	d115      	bne.n	1af4 <__aeabi_f2d+0x70>
    1ac8:	2d00      	cmp	r5, #0
    1aca:	d01f      	beq.n	1b0c <__aeabi_f2d+0x88>
    1acc:	0028      	movs	r0, r5
    1ace:	f000 f8b9 	bl	1c44 <__clzsi2>
    1ad2:	280a      	cmp	r0, #10
    1ad4:	dc1d      	bgt.n	1b12 <__aeabi_f2d+0x8e>
    1ad6:	230b      	movs	r3, #11
    1ad8:	002a      	movs	r2, r5
    1ada:	1a1b      	subs	r3, r3, r0
    1adc:	40da      	lsrs	r2, r3
    1ade:	0013      	movs	r3, r2
    1ae0:	0002      	movs	r2, r0
    1ae2:	3215      	adds	r2, #21
    1ae4:	4095      	lsls	r5, r2
    1ae6:	4a0f      	ldr	r2, [pc, #60]	; (1b24 <__aeabi_f2d+0xa0>)
    1ae8:	031b      	lsls	r3, r3, #12
    1aea:	1a12      	subs	r2, r2, r0
    1aec:	0552      	lsls	r2, r2, #21
    1aee:	0b1b      	lsrs	r3, r3, #12
    1af0:	0d52      	lsrs	r2, r2, #21
    1af2:	e7d7      	b.n	1aa4 <__aeabi_f2d+0x20>
    1af4:	2d00      	cmp	r5, #0
    1af6:	d006      	beq.n	1b06 <__aeabi_f2d+0x82>
    1af8:	2280      	movs	r2, #128	; 0x80
    1afa:	0b1b      	lsrs	r3, r3, #12
    1afc:	0312      	lsls	r2, r2, #12
    1afe:	4313      	orrs	r3, r2
    1b00:	076d      	lsls	r5, r5, #29
    1b02:	4a09      	ldr	r2, [pc, #36]	; (1b28 <__aeabi_f2d+0xa4>)
    1b04:	e7ce      	b.n	1aa4 <__aeabi_f2d+0x20>
    1b06:	4a08      	ldr	r2, [pc, #32]	; (1b28 <__aeabi_f2d+0xa4>)
    1b08:	2300      	movs	r3, #0
    1b0a:	e7cb      	b.n	1aa4 <__aeabi_f2d+0x20>
    1b0c:	2200      	movs	r2, #0
    1b0e:	2300      	movs	r3, #0
    1b10:	e7c8      	b.n	1aa4 <__aeabi_f2d+0x20>
    1b12:	0003      	movs	r3, r0
    1b14:	3b0b      	subs	r3, #11
    1b16:	409d      	lsls	r5, r3
    1b18:	002b      	movs	r3, r5
    1b1a:	2500      	movs	r5, #0
    1b1c:	e7e3      	b.n	1ae6 <__aeabi_f2d+0x62>
    1b1e:	46c0      	nop			; (mov r8, r8)
    1b20:	800fffff 	.word	0x800fffff
    1b24:	00000389 	.word	0x00000389
    1b28:	000007ff 	.word	0x000007ff

00001b2c <__aeabi_d2f>:
    1b2c:	004b      	lsls	r3, r1, #1
    1b2e:	b570      	push	{r4, r5, r6, lr}
    1b30:	0d5e      	lsrs	r6, r3, #21
    1b32:	030c      	lsls	r4, r1, #12
    1b34:	1c75      	adds	r5, r6, #1
    1b36:	0a64      	lsrs	r4, r4, #9
    1b38:	0f42      	lsrs	r2, r0, #29
    1b3a:	056d      	lsls	r5, r5, #21
    1b3c:	4322      	orrs	r2, r4
    1b3e:	0fc9      	lsrs	r1, r1, #31
    1b40:	00c4      	lsls	r4, r0, #3
    1b42:	0d6d      	lsrs	r5, r5, #21
    1b44:	2d01      	cmp	r5, #1
    1b46:	dd2a      	ble.n	1b9e <__aeabi_d2f+0x72>
    1b48:	4b3b      	ldr	r3, [pc, #236]	; (1c38 <__aeabi_d2f+0x10c>)
    1b4a:	18f3      	adds	r3, r6, r3
    1b4c:	2bfe      	cmp	r3, #254	; 0xfe
    1b4e:	dc1a      	bgt.n	1b86 <__aeabi_d2f+0x5a>
    1b50:	2b00      	cmp	r3, #0
    1b52:	dd42      	ble.n	1bda <__aeabi_d2f+0xae>
    1b54:	0180      	lsls	r0, r0, #6
    1b56:	1e45      	subs	r5, r0, #1
    1b58:	41a8      	sbcs	r0, r5
    1b5a:	00d2      	lsls	r2, r2, #3
    1b5c:	4310      	orrs	r0, r2
    1b5e:	0f62      	lsrs	r2, r4, #29
    1b60:	4302      	orrs	r2, r0
    1b62:	0750      	lsls	r0, r2, #29
    1b64:	d004      	beq.n	1b70 <__aeabi_d2f+0x44>
    1b66:	200f      	movs	r0, #15
    1b68:	4010      	ands	r0, r2
    1b6a:	2804      	cmp	r0, #4
    1b6c:	d000      	beq.n	1b70 <__aeabi_d2f+0x44>
    1b6e:	3204      	adds	r2, #4
    1b70:	2080      	movs	r0, #128	; 0x80
    1b72:	04c0      	lsls	r0, r0, #19
    1b74:	4010      	ands	r0, r2
    1b76:	d021      	beq.n	1bbc <__aeabi_d2f+0x90>
    1b78:	3301      	adds	r3, #1
    1b7a:	2bff      	cmp	r3, #255	; 0xff
    1b7c:	d003      	beq.n	1b86 <__aeabi_d2f+0x5a>
    1b7e:	0192      	lsls	r2, r2, #6
    1b80:	0a52      	lsrs	r2, r2, #9
    1b82:	b2db      	uxtb	r3, r3
    1b84:	e001      	b.n	1b8a <__aeabi_d2f+0x5e>
    1b86:	23ff      	movs	r3, #255	; 0xff
    1b88:	2200      	movs	r2, #0
    1b8a:	0252      	lsls	r2, r2, #9
    1b8c:	0a52      	lsrs	r2, r2, #9
    1b8e:	05db      	lsls	r3, r3, #23
    1b90:	4313      	orrs	r3, r2
    1b92:	005b      	lsls	r3, r3, #1
    1b94:	07c9      	lsls	r1, r1, #31
    1b96:	085b      	lsrs	r3, r3, #1
    1b98:	430b      	orrs	r3, r1
    1b9a:	0018      	movs	r0, r3
    1b9c:	bd70      	pop	{r4, r5, r6, pc}
    1b9e:	2e00      	cmp	r6, #0
    1ba0:	d007      	beq.n	1bb2 <__aeabi_d2f+0x86>
    1ba2:	4314      	orrs	r4, r2
    1ba4:	d0ef      	beq.n	1b86 <__aeabi_d2f+0x5a>
    1ba6:	2080      	movs	r0, #128	; 0x80
    1ba8:	00d2      	lsls	r2, r2, #3
    1baa:	0480      	lsls	r0, r0, #18
    1bac:	4302      	orrs	r2, r0
    1bae:	23ff      	movs	r3, #255	; 0xff
    1bb0:	e7d7      	b.n	1b62 <__aeabi_d2f+0x36>
    1bb2:	4322      	orrs	r2, r4
    1bb4:	2300      	movs	r3, #0
    1bb6:	2a00      	cmp	r2, #0
    1bb8:	d003      	beq.n	1bc2 <__aeabi_d2f+0x96>
    1bba:	2205      	movs	r2, #5
    1bbc:	08d2      	lsrs	r2, r2, #3
    1bbe:	2bff      	cmp	r3, #255	; 0xff
    1bc0:	d003      	beq.n	1bca <__aeabi_d2f+0x9e>
    1bc2:	0252      	lsls	r2, r2, #9
    1bc4:	0a52      	lsrs	r2, r2, #9
    1bc6:	b2db      	uxtb	r3, r3
    1bc8:	e7df      	b.n	1b8a <__aeabi_d2f+0x5e>
    1bca:	2a00      	cmp	r2, #0
    1bcc:	d032      	beq.n	1c34 <__aeabi_d2f+0x108>
    1bce:	2080      	movs	r0, #128	; 0x80
    1bd0:	03c0      	lsls	r0, r0, #15
    1bd2:	4302      	orrs	r2, r0
    1bd4:	0252      	lsls	r2, r2, #9
    1bd6:	0a52      	lsrs	r2, r2, #9
    1bd8:	e7d7      	b.n	1b8a <__aeabi_d2f+0x5e>
    1bda:	0018      	movs	r0, r3
    1bdc:	3017      	adds	r0, #23
    1bde:	db14      	blt.n	1c0a <__aeabi_d2f+0xde>
    1be0:	2080      	movs	r0, #128	; 0x80
    1be2:	0400      	lsls	r0, r0, #16
    1be4:	4302      	orrs	r2, r0
    1be6:	201e      	movs	r0, #30
    1be8:	1ac0      	subs	r0, r0, r3
    1bea:	281f      	cmp	r0, #31
    1bec:	dc0f      	bgt.n	1c0e <__aeabi_d2f+0xe2>
    1bee:	0025      	movs	r5, r4
    1bf0:	4b12      	ldr	r3, [pc, #72]	; (1c3c <__aeabi_d2f+0x110>)
    1bf2:	18f3      	adds	r3, r6, r3
    1bf4:	409d      	lsls	r5, r3
    1bf6:	1e6e      	subs	r6, r5, #1
    1bf8:	41b5      	sbcs	r5, r6
    1bfa:	409a      	lsls	r2, r3
    1bfc:	002b      	movs	r3, r5
    1bfe:	4313      	orrs	r3, r2
    1c00:	0022      	movs	r2, r4
    1c02:	40c2      	lsrs	r2, r0
    1c04:	431a      	orrs	r2, r3
    1c06:	2300      	movs	r3, #0
    1c08:	e7ab      	b.n	1b62 <__aeabi_d2f+0x36>
    1c0a:	2300      	movs	r3, #0
    1c0c:	e7d5      	b.n	1bba <__aeabi_d2f+0x8e>
    1c0e:	2502      	movs	r5, #2
    1c10:	426d      	negs	r5, r5
    1c12:	1aeb      	subs	r3, r5, r3
    1c14:	0015      	movs	r5, r2
    1c16:	40dd      	lsrs	r5, r3
    1c18:	2820      	cmp	r0, #32
    1c1a:	d009      	beq.n	1c30 <__aeabi_d2f+0x104>
    1c1c:	4b08      	ldr	r3, [pc, #32]	; (1c40 <__aeabi_d2f+0x114>)
    1c1e:	18f3      	adds	r3, r6, r3
    1c20:	409a      	lsls	r2, r3
    1c22:	4314      	orrs	r4, r2
    1c24:	1e62      	subs	r2, r4, #1
    1c26:	4194      	sbcs	r4, r2
    1c28:	0022      	movs	r2, r4
    1c2a:	2300      	movs	r3, #0
    1c2c:	432a      	orrs	r2, r5
    1c2e:	e798      	b.n	1b62 <__aeabi_d2f+0x36>
    1c30:	2200      	movs	r2, #0
    1c32:	e7f6      	b.n	1c22 <__aeabi_d2f+0xf6>
    1c34:	2200      	movs	r2, #0
    1c36:	e7a8      	b.n	1b8a <__aeabi_d2f+0x5e>
    1c38:	fffffc80 	.word	0xfffffc80
    1c3c:	fffffc82 	.word	0xfffffc82
    1c40:	fffffca2 	.word	0xfffffca2

00001c44 <__clzsi2>:
    1c44:	211c      	movs	r1, #28
    1c46:	2301      	movs	r3, #1
    1c48:	041b      	lsls	r3, r3, #16
    1c4a:	4298      	cmp	r0, r3
    1c4c:	d301      	bcc.n	1c52 <__clzsi2+0xe>
    1c4e:	0c00      	lsrs	r0, r0, #16
    1c50:	3910      	subs	r1, #16
    1c52:	0a1b      	lsrs	r3, r3, #8
    1c54:	4298      	cmp	r0, r3
    1c56:	d301      	bcc.n	1c5c <__clzsi2+0x18>
    1c58:	0a00      	lsrs	r0, r0, #8
    1c5a:	3908      	subs	r1, #8
    1c5c:	091b      	lsrs	r3, r3, #4
    1c5e:	4298      	cmp	r0, r3
    1c60:	d301      	bcc.n	1c66 <__clzsi2+0x22>
    1c62:	0900      	lsrs	r0, r0, #4
    1c64:	3904      	subs	r1, #4
    1c66:	a202      	add	r2, pc, #8	; (adr r2, 1c70 <__clzsi2+0x2c>)
    1c68:	5c10      	ldrb	r0, [r2, r0]
    1c6a:	1840      	adds	r0, r0, r1
    1c6c:	4770      	bx	lr
    1c6e:	46c0      	nop			; (mov r8, r8)
    1c70:	02020304 	.word	0x02020304
    1c74:	01010101 	.word	0x01010101
	...

00001c80 <__libc_init_array>:
    1c80:	b570      	push	{r4, r5, r6, lr}
    1c82:	4e0d      	ldr	r6, [pc, #52]	; (1cb8 <__libc_init_array+0x38>)
    1c84:	4d0d      	ldr	r5, [pc, #52]	; (1cbc <__libc_init_array+0x3c>)
    1c86:	2400      	movs	r4, #0
    1c88:	1bad      	subs	r5, r5, r6
    1c8a:	10ad      	asrs	r5, r5, #2
    1c8c:	d005      	beq.n	1c9a <__libc_init_array+0x1a>
    1c8e:	00a3      	lsls	r3, r4, #2
    1c90:	58f3      	ldr	r3, [r6, r3]
    1c92:	3401      	adds	r4, #1
    1c94:	4798      	blx	r3
    1c96:	42a5      	cmp	r5, r4
    1c98:	d1f9      	bne.n	1c8e <__libc_init_array+0xe>
    1c9a:	f000 fa0d 	bl	20b8 <_init>
    1c9e:	4e08      	ldr	r6, [pc, #32]	; (1cc0 <__libc_init_array+0x40>)
    1ca0:	4d08      	ldr	r5, [pc, #32]	; (1cc4 <__libc_init_array+0x44>)
    1ca2:	2400      	movs	r4, #0
    1ca4:	1bad      	subs	r5, r5, r6
    1ca6:	10ad      	asrs	r5, r5, #2
    1ca8:	d005      	beq.n	1cb6 <__libc_init_array+0x36>
    1caa:	00a3      	lsls	r3, r4, #2
    1cac:	58f3      	ldr	r3, [r6, r3]
    1cae:	3401      	adds	r4, #1
    1cb0:	4798      	blx	r3
    1cb2:	42a5      	cmp	r5, r4
    1cb4:	d1f9      	bne.n	1caa <__libc_init_array+0x2a>
    1cb6:	bd70      	pop	{r4, r5, r6, pc}
    1cb8:	000020c4 	.word	0x000020c4
    1cbc:	000020c4 	.word	0x000020c4
    1cc0:	000020c4 	.word	0x000020c4
    1cc4:	000020cc 	.word	0x000020cc

00001cc8 <memset>:
    1cc8:	b570      	push	{r4, r5, r6, lr}
    1cca:	0783      	lsls	r3, r0, #30
    1ccc:	d03f      	beq.n	1d4e <memset+0x86>
    1cce:	1e54      	subs	r4, r2, #1
    1cd0:	2a00      	cmp	r2, #0
    1cd2:	d03b      	beq.n	1d4c <memset+0x84>
    1cd4:	b2ce      	uxtb	r6, r1
    1cd6:	0003      	movs	r3, r0
    1cd8:	2503      	movs	r5, #3
    1cda:	e003      	b.n	1ce4 <memset+0x1c>
    1cdc:	1e62      	subs	r2, r4, #1
    1cde:	2c00      	cmp	r4, #0
    1ce0:	d034      	beq.n	1d4c <memset+0x84>
    1ce2:	0014      	movs	r4, r2
    1ce4:	3301      	adds	r3, #1
    1ce6:	1e5a      	subs	r2, r3, #1
    1ce8:	7016      	strb	r6, [r2, #0]
    1cea:	422b      	tst	r3, r5
    1cec:	d1f6      	bne.n	1cdc <memset+0x14>
    1cee:	2c03      	cmp	r4, #3
    1cf0:	d924      	bls.n	1d3c <memset+0x74>
    1cf2:	25ff      	movs	r5, #255	; 0xff
    1cf4:	400d      	ands	r5, r1
    1cf6:	022a      	lsls	r2, r5, #8
    1cf8:	4315      	orrs	r5, r2
    1cfa:	042a      	lsls	r2, r5, #16
    1cfc:	4315      	orrs	r5, r2
    1cfe:	2c0f      	cmp	r4, #15
    1d00:	d911      	bls.n	1d26 <memset+0x5e>
    1d02:	0026      	movs	r6, r4
    1d04:	3e10      	subs	r6, #16
    1d06:	0936      	lsrs	r6, r6, #4
    1d08:	3601      	adds	r6, #1
    1d0a:	0136      	lsls	r6, r6, #4
    1d0c:	001a      	movs	r2, r3
    1d0e:	199b      	adds	r3, r3, r6
    1d10:	6015      	str	r5, [r2, #0]
    1d12:	6055      	str	r5, [r2, #4]
    1d14:	6095      	str	r5, [r2, #8]
    1d16:	60d5      	str	r5, [r2, #12]
    1d18:	3210      	adds	r2, #16
    1d1a:	4293      	cmp	r3, r2
    1d1c:	d1f8      	bne.n	1d10 <memset+0x48>
    1d1e:	220f      	movs	r2, #15
    1d20:	4014      	ands	r4, r2
    1d22:	2c03      	cmp	r4, #3
    1d24:	d90a      	bls.n	1d3c <memset+0x74>
    1d26:	1f26      	subs	r6, r4, #4
    1d28:	08b6      	lsrs	r6, r6, #2
    1d2a:	3601      	adds	r6, #1
    1d2c:	00b6      	lsls	r6, r6, #2
    1d2e:	001a      	movs	r2, r3
    1d30:	199b      	adds	r3, r3, r6
    1d32:	c220      	stmia	r2!, {r5}
    1d34:	4293      	cmp	r3, r2
    1d36:	d1fc      	bne.n	1d32 <memset+0x6a>
    1d38:	2203      	movs	r2, #3
    1d3a:	4014      	ands	r4, r2
    1d3c:	2c00      	cmp	r4, #0
    1d3e:	d005      	beq.n	1d4c <memset+0x84>
    1d40:	b2c9      	uxtb	r1, r1
    1d42:	191c      	adds	r4, r3, r4
    1d44:	7019      	strb	r1, [r3, #0]
    1d46:	3301      	adds	r3, #1
    1d48:	429c      	cmp	r4, r3
    1d4a:	d1fb      	bne.n	1d44 <memset+0x7c>
    1d4c:	bd70      	pop	{r4, r5, r6, pc}
    1d4e:	0014      	movs	r4, r2
    1d50:	0003      	movs	r3, r0
    1d52:	e7cc      	b.n	1cee <memset+0x26>

00001d54 <register_fini>:
    1d54:	4b03      	ldr	r3, [pc, #12]	; (1d64 <register_fini+0x10>)
    1d56:	b510      	push	{r4, lr}
    1d58:	2b00      	cmp	r3, #0
    1d5a:	d002      	beq.n	1d62 <register_fini+0xe>
    1d5c:	4802      	ldr	r0, [pc, #8]	; (1d68 <register_fini+0x14>)
    1d5e:	f000 f805 	bl	1d6c <atexit>
    1d62:	bd10      	pop	{r4, pc}
    1d64:	00000000 	.word	0x00000000
    1d68:	00001d7d 	.word	0x00001d7d

00001d6c <atexit>:
    1d6c:	b510      	push	{r4, lr}
    1d6e:	0001      	movs	r1, r0
    1d70:	2300      	movs	r3, #0
    1d72:	2200      	movs	r2, #0
    1d74:	2000      	movs	r0, #0
    1d76:	f000 f81b 	bl	1db0 <__register_exitproc>
    1d7a:	bd10      	pop	{r4, pc}

00001d7c <__libc_fini_array>:
    1d7c:	b570      	push	{r4, r5, r6, lr}
    1d7e:	4b09      	ldr	r3, [pc, #36]	; (1da4 <__libc_fini_array+0x28>)
    1d80:	4c09      	ldr	r4, [pc, #36]	; (1da8 <__libc_fini_array+0x2c>)
    1d82:	1ae4      	subs	r4, r4, r3
    1d84:	10a4      	asrs	r4, r4, #2
    1d86:	d009      	beq.n	1d9c <__libc_fini_array+0x20>
    1d88:	4a08      	ldr	r2, [pc, #32]	; (1dac <__libc_fini_array+0x30>)
    1d8a:	18a5      	adds	r5, r4, r2
    1d8c:	00ad      	lsls	r5, r5, #2
    1d8e:	18ed      	adds	r5, r5, r3
    1d90:	682b      	ldr	r3, [r5, #0]
    1d92:	3c01      	subs	r4, #1
    1d94:	4798      	blx	r3
    1d96:	3d04      	subs	r5, #4
    1d98:	2c00      	cmp	r4, #0
    1d9a:	d1f9      	bne.n	1d90 <__libc_fini_array+0x14>
    1d9c:	f000 f996 	bl	20cc <_fini>
    1da0:	bd70      	pop	{r4, r5, r6, pc}
    1da2:	46c0      	nop			; (mov r8, r8)
    1da4:	000020d8 	.word	0x000020d8
    1da8:	000020dc 	.word	0x000020dc
    1dac:	3fffffff 	.word	0x3fffffff

00001db0 <__register_exitproc>:
    1db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1db2:	4644      	mov	r4, r8
    1db4:	465f      	mov	r7, fp
    1db6:	4656      	mov	r6, sl
    1db8:	464d      	mov	r5, r9
    1dba:	469b      	mov	fp, r3
    1dbc:	4b2f      	ldr	r3, [pc, #188]	; (1e7c <__register_exitproc+0xcc>)
    1dbe:	b4f0      	push	{r4, r5, r6, r7}
    1dc0:	681c      	ldr	r4, [r3, #0]
    1dc2:	23a4      	movs	r3, #164	; 0xa4
    1dc4:	005b      	lsls	r3, r3, #1
    1dc6:	0005      	movs	r5, r0
    1dc8:	58e0      	ldr	r0, [r4, r3]
    1dca:	000e      	movs	r6, r1
    1dcc:	4690      	mov	r8, r2
    1dce:	2800      	cmp	r0, #0
    1dd0:	d04b      	beq.n	1e6a <__register_exitproc+0xba>
    1dd2:	6843      	ldr	r3, [r0, #4]
    1dd4:	2b1f      	cmp	r3, #31
    1dd6:	dc0d      	bgt.n	1df4 <__register_exitproc+0x44>
    1dd8:	1c5c      	adds	r4, r3, #1
    1dda:	2d00      	cmp	r5, #0
    1ddc:	d121      	bne.n	1e22 <__register_exitproc+0x72>
    1dde:	3302      	adds	r3, #2
    1de0:	009b      	lsls	r3, r3, #2
    1de2:	6044      	str	r4, [r0, #4]
    1de4:	501e      	str	r6, [r3, r0]
    1de6:	2000      	movs	r0, #0
    1de8:	bc3c      	pop	{r2, r3, r4, r5}
    1dea:	4690      	mov	r8, r2
    1dec:	4699      	mov	r9, r3
    1dee:	46a2      	mov	sl, r4
    1df0:	46ab      	mov	fp, r5
    1df2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1df4:	4b22      	ldr	r3, [pc, #136]	; (1e80 <__register_exitproc+0xd0>)
    1df6:	2b00      	cmp	r3, #0
    1df8:	d03c      	beq.n	1e74 <__register_exitproc+0xc4>
    1dfa:	20c8      	movs	r0, #200	; 0xc8
    1dfc:	0040      	lsls	r0, r0, #1
    1dfe:	e000      	b.n	1e02 <__register_exitproc+0x52>
    1e00:	bf00      	nop
    1e02:	2800      	cmp	r0, #0
    1e04:	d036      	beq.n	1e74 <__register_exitproc+0xc4>
    1e06:	22a4      	movs	r2, #164	; 0xa4
    1e08:	2300      	movs	r3, #0
    1e0a:	0052      	lsls	r2, r2, #1
    1e0c:	58a1      	ldr	r1, [r4, r2]
    1e0e:	6043      	str	r3, [r0, #4]
    1e10:	6001      	str	r1, [r0, #0]
    1e12:	50a0      	str	r0, [r4, r2]
    1e14:	3240      	adds	r2, #64	; 0x40
    1e16:	5083      	str	r3, [r0, r2]
    1e18:	3204      	adds	r2, #4
    1e1a:	5083      	str	r3, [r0, r2]
    1e1c:	2401      	movs	r4, #1
    1e1e:	2d00      	cmp	r5, #0
    1e20:	d0dd      	beq.n	1dde <__register_exitproc+0x2e>
    1e22:	009a      	lsls	r2, r3, #2
    1e24:	4691      	mov	r9, r2
    1e26:	4481      	add	r9, r0
    1e28:	4642      	mov	r2, r8
    1e2a:	2188      	movs	r1, #136	; 0x88
    1e2c:	464f      	mov	r7, r9
    1e2e:	507a      	str	r2, [r7, r1]
    1e30:	22c4      	movs	r2, #196	; 0xc4
    1e32:	0052      	lsls	r2, r2, #1
    1e34:	4690      	mov	r8, r2
    1e36:	4480      	add	r8, r0
    1e38:	4642      	mov	r2, r8
    1e3a:	3987      	subs	r1, #135	; 0x87
    1e3c:	4099      	lsls	r1, r3
    1e3e:	6812      	ldr	r2, [r2, #0]
    1e40:	468a      	mov	sl, r1
    1e42:	430a      	orrs	r2, r1
    1e44:	4694      	mov	ip, r2
    1e46:	4642      	mov	r2, r8
    1e48:	4661      	mov	r1, ip
    1e4a:	6011      	str	r1, [r2, #0]
    1e4c:	2284      	movs	r2, #132	; 0x84
    1e4e:	4649      	mov	r1, r9
    1e50:	465f      	mov	r7, fp
    1e52:	0052      	lsls	r2, r2, #1
    1e54:	508f      	str	r7, [r1, r2]
    1e56:	2d02      	cmp	r5, #2
    1e58:	d1c1      	bne.n	1dde <__register_exitproc+0x2e>
    1e5a:	0002      	movs	r2, r0
    1e5c:	4655      	mov	r5, sl
    1e5e:	328d      	adds	r2, #141	; 0x8d
    1e60:	32ff      	adds	r2, #255	; 0xff
    1e62:	6811      	ldr	r1, [r2, #0]
    1e64:	430d      	orrs	r5, r1
    1e66:	6015      	str	r5, [r2, #0]
    1e68:	e7b9      	b.n	1dde <__register_exitproc+0x2e>
    1e6a:	0020      	movs	r0, r4
    1e6c:	304d      	adds	r0, #77	; 0x4d
    1e6e:	30ff      	adds	r0, #255	; 0xff
    1e70:	50e0      	str	r0, [r4, r3]
    1e72:	e7ae      	b.n	1dd2 <__register_exitproc+0x22>
    1e74:	2001      	movs	r0, #1
    1e76:	4240      	negs	r0, r0
    1e78:	e7b6      	b.n	1de8 <__register_exitproc+0x38>
    1e7a:	46c0      	nop			; (mov r8, r8)
    1e7c:	000020b4 	.word	0x000020b4
    1e80:	00000000 	.word	0x00000000

00001e84 <analogAccelPin>:
    1e84:	07000000 00000007                       ........

00001e8c <spi2MOSI>:
    1e8c:	0c000002 00000000                       ........

00001e94 <spi2SCK>:
    1e94:	0e000002 00000000                       ........

00001e9c <spi2MISO>:
    1e9c:	0d000002 00000000                       ........

00001ea4 <lookupTable.12306>:
    1ea4:	ffff8d20 ffffada1 ffffce64 ffffef6c      .......d...l...
    1eb4:	000010b7 0000324a 00005425 00007649     ....J2..%T..Iv..
    1ec4:	000098b7 0000bb72 0000de79 000101d0     ....r...y.......
    1ed4:	00012576 0001496f 00016dbc 0001925e     v%..oI...m..^...
    1ee4:	0001b758 0001dcaa 00020258 00022862     X.......X...b(..
    1ef4:	00024ecc 00027596 00029cc4 0002c457     .N...u......W...
    1f04:	0002ec52 000314b7 00033d89 000366ca     R........=...f..
    1f14:	0003907d 0003baa4 0003e544 0004105e     }.......D...^...
    1f24:	00043bf6 0004680e 000494ac 0004c1d1     .;...h..........
    1f34:	0004ef81 00051dc1 00054c95 00057c00     .........L...|..
    1f44:	0005ac07 0005dcae 00060dfb 00063ff2     .............?..
    1f54:	00067298 0006a5f4 0006da09 00070ee0     .r..............
    1f64:	0007447d 00077ae8 0007b228 0007ea44     }D...z..(...D...
    1f74:	00082344 00085d30 00089810 0008d3ef     D#..0]..........
    1f84:	000910d6 00094ecf 00098de5 0009ce23     .....N......#...
    1f94:	000a0f98 000a524f 000a9657 000adbbf     ....OR..W.......
    1fa4:	000b2298 000b6af3 000bb4e2 000c007b     ."...j......{...
    1fb4:	000c4dd4 000c9d03 000cee23 000d4150     .M......#...PA..
    1fc4:	000d96a9 000dee4e 000e4865 000ea516     ....N...eH......
    1fd4:	000f048e                                ....

00001fd8 <senseBatPin>:
    1fd8:	06000000 00000006                       ........

00001fe0 <spi2MOSI>:
    1fe0:	0c000002 00000000                       ........

00001fe8 <spi2SCK>:
    1fe8:	0e000002 00000000 000013ae 000012d2     ................
    1ff8:	00001390 00001368 00001390 0000135c     ....h.......\...
    2008:	00001390 00001368 000012d2 000012d2     ....h...........
    2018:	0000135c 00001368 00001414 00001414     \...h...........
    2028:	00001414 00001396 000012d2 000012d2     ................
    2038:	0000137c 00001366 0000137c 0000135c     |...f...|...\...
    2048:	0000137c 00001366 000012d2 000012d2     |...f...........
    2058:	0000135c 00001366 00001414 00001414     \...f...........
    2068:	00001414 00001420 000016fc 000015bc     .... ...........
    2078:	000015bc 000015ba 000016d4 000016d4     ................
    2088:	000016c6 000015ba 000016d4 000016c6     ................
    2098:	000016d4 000015ba 000016dc 000016dc     ................
    20a8:	000016dc 000018dc 00000043              ........C...

000020b4 <_global_impure_ptr>:
    20b4:	20000010                                ... 

000020b8 <_init>:
    20b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    20ba:	46c0      	nop			; (mov r8, r8)
    20bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
    20be:	bc08      	pop	{r3}
    20c0:	469e      	mov	lr, r3
    20c2:	4770      	bx	lr

000020c4 <__init_array_start>:
    20c4:	00001d55 	.word	0x00001d55

000020c8 <__frame_dummy_init_array_entry>:
    20c8:	000000dd                                ....

000020cc <_fini>:
    20cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    20ce:	46c0      	nop			; (mov r8, r8)
    20d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    20d2:	bc08      	pop	{r3}
    20d4:	469e      	mov	lr, r3
    20d6:	4770      	bx	lr

000020d8 <__fini_array_start>:
    20d8:	000000b5 	.word	0x000000b5
