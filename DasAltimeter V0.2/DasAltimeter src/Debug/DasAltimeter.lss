
DasAltimeter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006a14  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000004a4  20000000  00006a14  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000388  200004a8  00006ec0  000204a8  2**3
                  ALLOC
  3 .stack        00002000  20000830  00007248  000204a8  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000204a4  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  000204cc  2**0
                  CONTENTS, READONLY
  6 .debug_info   00021cbf  00000000  00000000  00020525  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000029a2  00000000  00000000  000421e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000258a  00000000  00000000  00044b86  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000468  00000000  00000000  00047110  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000c78  00000000  00000000  00047578  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00016908  00000000  00000000  000481f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000a633  00000000  00000000  0005eaf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00072af2  00000000  00000000  0006912b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001188  00000000  00000000  000dbc20  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
 *         retrieved from cpu registers.
 */
void SystemCoreClockUpdate(void)
{
	// Not implemented
	SystemCoreClock = __SYSTEM_CLOCK;
       0:	20002830 	.word	0x20002830
       4:	00000119 	.word	0x00000119
	return;
}
       8:	00000115 	.word	0x00000115
       c:	00000115 	.word	0x00000115
	...
      2c:	00000115 	.word	0x00000115
	...
      38:	00000115 	.word	0x00000115
      3c:	00000115 	.word	0x00000115
      40:	00000115 	.word	0x00000115
      44:	00000115 	.word	0x00000115
      48:	00000115 	.word	0x00000115
      4c:	00000ff9 	.word	0x00000ff9
      50:	00000115 	.word	0x00000115
      54:	00000115 	.word	0x00000115
      58:	00000115 	.word	0x00000115
      5c:	00000115 	.word	0x00000115
      60:	00000115 	.word	0x00000115
      64:	00000115 	.word	0x00000115
      68:	00000115 	.word	0x00000115
      6c:	00000115 	.word	0x00000115
      70:	00000115 	.word	0x00000115
      74:	00000115 	.word	0x00000115
      78:	00000115 	.word	0x00000115
      7c:	00000115 	.word	0x00000115
      80:	00000115 	.word	0x00000115
      84:	00000115 	.word	0x00000115
      88:	00000115 	.word	0x00000115
      8c:	00001099 	.word	0x00001099
      90:	00001101 	.word	0x00001101
	...
      9c:	00000115 	.word	0x00000115
      a0:	00000115 	.word	0x00000115
      a4:	00000115 	.word	0x00000115
      a8:	00000115 	.word	0x00000115
      ac:	00000115 	.word	0x00000115
      b0:	00000000 	.word	0x00000000

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200004a8 	.word	0x200004a8
      d4:	00000000 	.word	0x00000000
      d8:	00006a14 	.word	0x00006a14

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200004ac 	.word	0x200004ac
     108:	00006a14 	.word	0x00006a14
     10c:	00006a14 	.word	0x00006a14
     110:	00000000 	.word	0x00000000

00000114 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     114:	e7fe      	b.n	114 <Dummy_Handler>
	...

00000118 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
     118:	4821      	ldr	r0, [pc, #132]	; (1a0 <Reset_Handler+0x88>)
     11a:	4922      	ldr	r1, [pc, #136]	; (1a4 <Reset_Handler+0x8c>)
     11c:	b570      	push	{r4, r5, r6, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
     11e:	4288      	cmp	r0, r1
     120:	d002      	beq.n	128 <Reset_Handler+0x10>
     122:	2300      	movs	r3, #0
                for (; pDest < &_erelocate;) {
     124:	4c20      	ldr	r4, [pc, #128]	; (1a8 <Reset_Handler+0x90>)
     126:	e003      	b.n	130 <Reset_Handler+0x18>
     128:	4b20      	ldr	r3, [pc, #128]	; (1ac <Reset_Handler+0x94>)
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     12a:	4a21      	ldr	r2, [pc, #132]	; (1b0 <Reset_Handler+0x98>)
                *pDest++ = 0;
     12c:	2100      	movs	r1, #0
     12e:	e006      	b.n	13e <Reset_Handler+0x26>
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
     130:	18ca      	adds	r2, r1, r3
     132:	42a2      	cmp	r2, r4
     134:	d2f8      	bcs.n	128 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
     136:	58c5      	ldr	r5, [r0, r3]
     138:	3304      	adds	r3, #4
     13a:	6015      	str	r5, [r2, #0]
     13c:	e7f8      	b.n	130 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     13e:	4293      	cmp	r3, r2
     140:	d201      	bcs.n	146 <Reset_Handler+0x2e>
                *pDest++ = 0;
     142:	c302      	stmia	r3!, {r1}
     144:	e7fb      	b.n	13e <Reset_Handler+0x26>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     146:	21ff      	movs	r1, #255	; 0xff

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     148:	2402      	movs	r4, #2
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     14a:	2503      	movs	r5, #3
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     14c:	4b19      	ldr	r3, [pc, #100]	; (1b4 <Reset_Handler+0x9c>)
     14e:	4a1a      	ldr	r2, [pc, #104]	; (1b8 <Reset_Handler+0xa0>)
     150:	438b      	bics	r3, r1

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     152:	260c      	movs	r6, #12
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     154:	6093      	str	r3, [r2, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     156:	2208      	movs	r2, #8
        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     158:	4b18      	ldr	r3, [pc, #96]	; (1bc <Reset_Handler+0xa4>)
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     15a:	4919      	ldr	r1, [pc, #100]	; (1c0 <Reset_Handler+0xa8>)
        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     15c:	625c      	str	r4, [r3, #36]	; 0x24
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     15e:	78cb      	ldrb	r3, [r1, #3]
     160:	43ab      	bics	r3, r5
     162:	4323      	orrs	r3, r4
     164:	70cb      	strb	r3, [r1, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     166:	78cb      	ldrb	r3, [r1, #3]
     168:	43b3      	bics	r3, r6
     16a:	4313      	orrs	r3, r2
     16c:	70cb      	strb	r3, [r1, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
     16e:	2130      	movs	r1, #48	; 0x30
     170:	4b14      	ldr	r3, [pc, #80]	; (1c4 <Reset_Handler+0xac>)
     172:	7b98      	ldrb	r0, [r3, #14]
     174:	4388      	bics	r0, r1
     176:	3910      	subs	r1, #16
     178:	4308      	orrs	r0, r1
     17a:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     17c:	7b99      	ldrb	r1, [r3, #14]
     17e:	43b1      	bics	r1, r6
     180:	4311      	orrs	r1, r2
     182:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
     184:	2180      	movs	r1, #128	; 0x80
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
        DMAC->QOSCTRL.bit.FQOS = 2;
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     186:	7b9a      	ldrb	r2, [r3, #14]
     188:	43aa      	bics	r2, r5
     18a:	4322      	orrs	r2, r4
     18c:	739a      	strb	r2, [r3, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
     18e:	4a0e      	ldr	r2, [pc, #56]	; (1c8 <Reset_Handler+0xb0>)
     190:	6853      	ldr	r3, [r2, #4]
     192:	430b      	orrs	r3, r1
     194:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
     196:	4b0d      	ldr	r3, [pc, #52]	; (1cc <Reset_Handler+0xb4>)
     198:	4798      	blx	r3

        /* Branch to main function */
        main();
     19a:	4b0d      	ldr	r3, [pc, #52]	; (1d0 <Reset_Handler+0xb8>)
     19c:	4798      	blx	r3
     19e:	e7fe      	b.n	19e <Reset_Handler+0x86>
     1a0:	00006a14 	.word	0x00006a14
     1a4:	20000000 	.word	0x20000000
     1a8:	200004a4 	.word	0x200004a4
     1ac:	200004a8 	.word	0x200004a8
     1b0:	20000830 	.word	0x20000830
     1b4:	00000000 	.word	0x00000000
     1b8:	e000ed00 	.word	0xe000ed00
     1bc:	410070fc 	.word	0x410070fc
     1c0:	41005000 	.word	0x41005000
     1c4:	41004800 	.word	0x41004800
     1c8:	41004000 	.word	0x41004000
     1cc:	00006775 	.word	0x00006775
     1d0:	0000099d 	.word	0x0000099d

000001d4 <SystemInit>:
     1d4:	4a01      	ldr	r2, [pc, #4]	; (1dc <SystemInit+0x8>)
     1d6:	4b02      	ldr	r3, [pc, #8]	; (1e0 <SystemInit+0xc>)
     1d8:	601a      	str	r2, [r3, #0]
     1da:	4770      	bx	lr
     1dc:	000f4240 	.word	0x000f4240
     1e0:	20000000 	.word	0x20000000

000001e4 <AT25SFHoldTillReady>:
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     1e4:	2380      	movs	r3, #128	; 0x80
    pinLow(cs_mem);
    spiDataOut(MEM_SPI,OPCODE_WRITEENABLE);
    pinHigh(cs_mem);
}

void AT25SFHoldTillReady() {
     1e6:	b570      	push	{r4, r5, r6, lr}
     1e8:	4c08      	ldr	r4, [pc, #32]	; (20c <AT25SFHoldTillReady+0x28>)
     1ea:	02db      	lsls	r3, r3, #11
     1ec:	6163      	str	r3, [r4, #20]
    pinLow(cs_mem);
    spiDataOut(MEM_SPI,OPCODE_READSTATUS);
     1ee:	2105      	movs	r1, #5
     1f0:	2001      	movs	r0, #1
     1f2:	4b07      	ldr	r3, [pc, #28]	; (210 <AT25SFHoldTillReady+0x2c>)
     1f4:	4798      	blx	r3
    while (spiDataIn(MEM_SPI) & 0x01);
     1f6:	2501      	movs	r5, #1
     1f8:	2001      	movs	r0, #1
     1fa:	4b06      	ldr	r3, [pc, #24]	; (214 <AT25SFHoldTillReady+0x30>)
     1fc:	4798      	blx	r3
     1fe:	4228      	tst	r0, r5
     200:	d1fa      	bne.n	1f8 <AT25SFHoldTillReady+0x14>
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     202:	2380      	movs	r3, #128	; 0x80
     204:	02db      	lsls	r3, r3, #11
     206:	61a3      	str	r3, [r4, #24]
    pinHigh(cs_mem);
}
     208:	bd70      	pop	{r4, r5, r6, pc}
     20a:	46c0      	nop			; (mov r8, r8)
     20c:	41004400 	.word	0x41004400
     210:	00002a29 	.word	0x00002a29
     214:	00002a41 	.word	0x00002a41

00000218 <AT25SFChipErase>:
void AT25SFChipErase() {
     218:	b570      	push	{r4, r5, r6, lr}
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     21a:	2580      	movs	r5, #128	; 0x80
     21c:	4c06      	ldr	r4, [pc, #24]	; (238 <AT25SFChipErase+0x20>)
     21e:	02ed      	lsls	r5, r5, #11

    pinLow(cs_mem);
    spiDataOut(MEM_SPI,OPCODE_WRITEENABLE);
     220:	4e06      	ldr	r6, [pc, #24]	; (23c <AT25SFChipErase+0x24>)
     222:	6165      	str	r5, [r4, #20]
     224:	2106      	movs	r1, #6
     226:	2001      	movs	r0, #1
     228:	47b0      	blx	r6
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     22a:	61a5      	str	r5, [r4, #24]
    pinHigh(cs_mem);

    pinLow(cs_mem);
    spiDataOut(MEM_SPI,OPCODE_CHIP_ERASE);
     22c:	2160      	movs	r1, #96	; 0x60
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     22e:	6165      	str	r5, [r4, #20]
     230:	2001      	movs	r0, #1
     232:	47b0      	blx	r6
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     234:	61a5      	str	r5, [r4, #24]
    pinHigh(cs_mem);
}
     236:	bd70      	pop	{r4, r5, r6, pc}
     238:	41004400 	.word	0x41004400
     23c:	00002a29 	.word	0x00002a29

00000240 <AT25SFWriteBytes>:
    pinHigh(cs_mem);

    return _byte;
}

void AT25SFWriteBytes(uint32_t address, u8_t len, uint8_t *bytes) {
     240:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     242:	2780      	movs	r7, #128	; 0x80
     244:	0006      	movs	r6, r0
     246:	4d13      	ldr	r5, [pc, #76]	; (294 <AT25SFWriteBytes+0x54>)
     248:	02ff      	lsls	r7, r7, #11
     24a:	9201      	str	r2, [sp, #4]


    pinLow(cs_mem);
    spiDataOut(MEM_SPI,OPCODE_WRITEENABLE);
     24c:	4c12      	ldr	r4, [pc, #72]	; (298 <AT25SFWriteBytes+0x58>)
    pinHigh(cs_mem);

    return _byte;
}

void AT25SFWriteBytes(uint32_t address, u8_t len, uint8_t *bytes) {
     24e:	9100      	str	r1, [sp, #0]


    pinLow(cs_mem);
    spiDataOut(MEM_SPI,OPCODE_WRITEENABLE);
     250:	2001      	movs	r0, #1
     252:	616f      	str	r7, [r5, #20]
     254:	2106      	movs	r1, #6
     256:	47a0      	blx	r4
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     258:	61af      	str	r7, [r5, #24]
    pinHigh(cs_mem);

    pinLow(cs_mem);
    spiDataOut(MEM_SPI,OPCODE_PROGRAM);
     25a:	2102      	movs	r1, #2
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     25c:	616f      	str	r7, [r5, #20]
     25e:	2001      	movs	r0, #1
     260:	47a0      	blx	r4
    spiDataOut(MEM_SPI,((address & 0xFF0000) >> 16));
     262:	0c31      	lsrs	r1, r6, #16
     264:	b2c9      	uxtb	r1, r1
     266:	2001      	movs	r0, #1
     268:	47a0      	blx	r4
    spiDataOut(MEM_SPI,((address & 0x00FF00) >>  8));
     26a:	0a31      	lsrs	r1, r6, #8
     26c:	b2c9      	uxtb	r1, r1
     26e:	2001      	movs	r0, #1
     270:	47a0      	blx	r4
    spiDataOut(MEM_SPI,((address & 0x0000FF) >>  0));
     272:	b2f1      	uxtb	r1, r6
     274:	2001      	movs	r0, #1
     276:	47a0      	blx	r4
     278:	9e01      	ldr	r6, [sp, #4]
     27a:	9b00      	ldr	r3, [sp, #0]
     27c:	18f7      	adds	r7, r6, r3

    for (u8_t pos = 0; pos < len; ++pos) {
     27e:	42be      	cmp	r6, r7
     280:	d004      	beq.n	28c <AT25SFWriteBytes+0x4c>
        spiDataOut(MEM_SPI, bytes[pos]);
     282:	7831      	ldrb	r1, [r6, #0]
     284:	2001      	movs	r0, #1
     286:	47a0      	blx	r4
     288:	3601      	adds	r6, #1
     28a:	e7f8      	b.n	27e <AT25SFWriteBytes+0x3e>
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     28c:	2380      	movs	r3, #128	; 0x80
     28e:	02db      	lsls	r3, r3, #11
     290:	61ab      	str	r3, [r5, #24]
    }

    pinHigh(cs_mem);

}
     292:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
     294:	41004400 	.word	0x41004400
     298:	00002a29 	.word	0x00002a29

0000029c <AT25SEWritePage>:
    delay_ms(70);

}


u8_t AT25SEWritePage(u32_t startingAddress, u8_t *data) {
     29c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     29e:	2780      	movs	r7, #128	; 0x80
     2a0:	0006      	movs	r6, r0
     2a2:	4d13      	ldr	r5, [pc, #76]	; (2f0 <AT25SEWritePage+0x54>)
     2a4:	02ff      	lsls	r7, r7, #11

    u8_t bytesSent = 0;

    pinLow(cs_mem);
    spiDataOut(MEM_SPI,OPCODE_WRITEENABLE);
     2a6:	4c13      	ldr	r4, [pc, #76]	; (2f4 <AT25SEWritePage+0x58>)
    delay_ms(70);

}


u8_t AT25SEWritePage(u32_t startingAddress, u8_t *data) {
     2a8:	9101      	str	r1, [sp, #4]

    u8_t bytesSent = 0;

    pinLow(cs_mem);
    spiDataOut(MEM_SPI,OPCODE_WRITEENABLE);
     2aa:	2001      	movs	r0, #1
     2ac:	616f      	str	r7, [r5, #20]
     2ae:	2106      	movs	r1, #6
     2b0:	47a0      	blx	r4
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     2b2:	61af      	str	r7, [r5, #24]
    pinHigh(cs_mem);

    pinLow(cs_mem);
    spiDataOut(MEM_SPI,OPCODE_PROGRAM);
     2b4:	2102      	movs	r1, #2
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     2b6:	616f      	str	r7, [r5, #20]
     2b8:	2001      	movs	r0, #1
     2ba:	47a0      	blx	r4
    spiDataOut(MEM_SPI,((startingAddress & 0xFF0000) >> 16));
     2bc:	0c31      	lsrs	r1, r6, #16
     2be:	b2c9      	uxtb	r1, r1
     2c0:	2001      	movs	r0, #1
     2c2:	47a0      	blx	r4
    spiDataOut(MEM_SPI,((startingAddress & 0x00FF00) >>  8));
     2c4:	0a31      	lsrs	r1, r6, #8
     2c6:	b2c9      	uxtb	r1, r1
     2c8:	2001      	movs	r0, #1
     2ca:	47a0      	blx	r4
    spiDataOut(MEM_SPI,((startingAddress & 0x0000FF) >>  0));
     2cc:	b2f1      	uxtb	r1, r6
     2ce:	2001      	movs	r0, #1
     2d0:	47a0      	blx	r4
     2d2:	9e01      	ldr	r6, [sp, #4]
     2d4:	1c77      	adds	r7, r6, #1
     2d6:	37ff      	adds	r7, #255	; 0xff


    for (u16_t pos = 0; pos < 256; ++pos) {
        ++bytesSent;
        spiDataOut(SPI1,data[pos]);
     2d8:	7831      	ldrb	r1, [r6, #0]
     2da:	2001      	movs	r0, #1
     2dc:	3601      	adds	r6, #1
     2de:	47a0      	blx	r4
    spiDataOut(MEM_SPI,((startingAddress & 0xFF0000) >> 16));
    spiDataOut(MEM_SPI,((startingAddress & 0x00FF00) >>  8));
    spiDataOut(MEM_SPI,((startingAddress & 0x0000FF) >>  0));


    for (u16_t pos = 0; pos < 256; ++pos) {
     2e0:	42be      	cmp	r6, r7
     2e2:	d1f9      	bne.n	2d8 <AT25SEWritePage+0x3c>
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     2e4:	2380      	movs	r3, #128	; 0x80
     2e6:	02db      	lsls	r3, r3, #11
     2e8:	61ab      	str	r3, [r5, #24]
    }
    pinHigh(cs_mem);


    return bytesSent;
}
     2ea:	2000      	movs	r0, #0
     2ec:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
     2ee:	46c0      	nop			; (mov r8, r8)
     2f0:	41004400 	.word	0x41004400
     2f4:	00002a29 	.word	0x00002a29

000002f8 <AT25SEreadSample>:
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     2f8:	2380      	movs	r3, #128	; 0x80

void AT25SEreadSample(u32_t startingAddress, u8_t len, u8_t *data) {
     2fa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     2fc:	0005      	movs	r5, r0
     2fe:	000f      	movs	r7, r1
     300:	4e11      	ldr	r6, [pc, #68]	; (348 <AT25SEreadSample+0x50>)
     302:	02db      	lsls	r3, r3, #11
     304:	9201      	str	r2, [sp, #4]

    pinLow(cs_mem);
    spiDataOut(MEM_SPI,OPCODE_FASTREAD_ARRAY);
     306:	4c11      	ldr	r4, [pc, #68]	; (34c <AT25SEreadSample+0x54>)
     308:	6173      	str	r3, [r6, #20]
     30a:	210b      	movs	r1, #11
     30c:	2001      	movs	r0, #1
     30e:	47a0      	blx	r4
    spiDataOut(MEM_SPI,((startingAddress & 0xFF0000) >> 16));
     310:	0c29      	lsrs	r1, r5, #16
     312:	b2c9      	uxtb	r1, r1
     314:	2001      	movs	r0, #1
     316:	47a0      	blx	r4
    spiDataOut(MEM_SPI,((startingAddress & 0x00FF00) >>  8));
     318:	0a29      	lsrs	r1, r5, #8
     31a:	b2c9      	uxtb	r1, r1
     31c:	2001      	movs	r0, #1
     31e:	47a0      	blx	r4
    spiDataOut(MEM_SPI,((startingAddress & 0x0000FF) >>  0));
     320:	b2e9      	uxtb	r1, r5
     322:	2001      	movs	r0, #1
     324:	47a0      	blx	r4
    spiDataOut(MEM_SPI, 0xFF);
     326:	21ff      	movs	r1, #255	; 0xff
     328:	2001      	movs	r0, #1
     32a:	47a0      	blx	r4
     32c:	9c01      	ldr	r4, [sp, #4]
     32e:	19e7      	adds	r7, r4, r7


    for (u8_t pos = 0; pos < len; ++pos) {
     330:	42bc      	cmp	r4, r7
     332:	d005      	beq.n	340 <AT25SEreadSample+0x48>
        data[pos] = spiDataIn(MEM_SPI);
     334:	2001      	movs	r0, #1
     336:	4b06      	ldr	r3, [pc, #24]	; (350 <AT25SEreadSample+0x58>)
     338:	4798      	blx	r3
     33a:	7020      	strb	r0, [r4, #0]
     33c:	3401      	adds	r4, #1
     33e:	e7f7      	b.n	330 <AT25SEreadSample+0x38>
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     340:	2380      	movs	r3, #128	; 0x80
     342:	02db      	lsls	r3, r3, #11
     344:	61b3      	str	r3, [r6, #24]
    }
    pinHigh(cs_mem);

}
     346:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
     348:	41004400 	.word	0x41004400
     34c:	00002a29 	.word	0x00002a29
     350:	00002a41 	.word	0x00002a41

00000354 <AT25SEreadPage>:

void AT25SEreadPage(u32_t startingAddress, u8_t *data) {
     354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     356:	2380      	movs	r3, #128	; 0x80
     358:	0007      	movs	r7, r0
     35a:	000c      	movs	r4, r1
     35c:	4e10      	ldr	r6, [pc, #64]	; (3a0 <AT25SEreadPage+0x4c>)
     35e:	02db      	lsls	r3, r3, #11

    pinLow(cs_mem);
    spiDataOut(MEM_SPI,OPCODE_FASTREAD_ARRAY);
     360:	4d10      	ldr	r5, [pc, #64]	; (3a4 <AT25SEreadPage+0x50>)
     362:	6173      	str	r3, [r6, #20]
     364:	210b      	movs	r1, #11
     366:	2001      	movs	r0, #1
     368:	47a8      	blx	r5
    spiDataOut(MEM_SPI,((startingAddress & 0xFF0000) >> 16));
     36a:	0c39      	lsrs	r1, r7, #16
     36c:	b2c9      	uxtb	r1, r1
     36e:	2001      	movs	r0, #1
     370:	47a8      	blx	r5
    spiDataOut(MEM_SPI,((startingAddress & 0x00FF00) >>  8));
     372:	0a39      	lsrs	r1, r7, #8
     374:	b2c9      	uxtb	r1, r1
     376:	2001      	movs	r0, #1
     378:	47a8      	blx	r5
    spiDataOut(MEM_SPI,((startingAddress & 0x0000FF) >>  0));
     37a:	b2f9      	uxtb	r1, r7
     37c:	2001      	movs	r0, #1
     37e:	47a8      	blx	r5
    spiDataOut(MEM_SPI, 0xFF);
     380:	21ff      	movs	r1, #255	; 0xff
     382:	2001      	movs	r0, #1
     384:	47a8      	blx	r5
     386:	1c65      	adds	r5, r4, #1
     388:	35ff      	adds	r5, #255	; 0xff

    for (u16_t pos = 0; pos < 256; ++pos) {
        data[pos] = spiDataIn(MEM_SPI);
     38a:	2001      	movs	r0, #1
     38c:	4b06      	ldr	r3, [pc, #24]	; (3a8 <AT25SEreadPage+0x54>)
     38e:	4798      	blx	r3
     390:	7020      	strb	r0, [r4, #0]
     392:	3401      	adds	r4, #1
    spiDataOut(MEM_SPI,((startingAddress & 0xFF0000) >> 16));
    spiDataOut(MEM_SPI,((startingAddress & 0x00FF00) >>  8));
    spiDataOut(MEM_SPI,((startingAddress & 0x0000FF) >>  0));
    spiDataOut(MEM_SPI, 0xFF);

    for (u16_t pos = 0; pos < 256; ++pos) {
     394:	42ac      	cmp	r4, r5
     396:	d1f8      	bne.n	38a <AT25SEreadPage+0x36>
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     398:	2380      	movs	r3, #128	; 0x80
     39a:	02db      	lsls	r3, r3, #11
     39c:	61b3      	str	r3, [r6, #24]
        data[pos] = spiDataIn(MEM_SPI);
    }
    pinHigh(cs_mem);

}
     39e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     3a0:	41004400 	.word	0x41004400
     3a4:	00002a29 	.word	0x00002a29
     3a8:	00002a41 	.word	0x00002a41

000003ac <readMS5803AdcResults>:
#include <MS5803.h>
#include <boardDefines.h>
#include <math.h>

u32_t readMS5803AdcResults() {
     3ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     3ae:	2780      	movs	r7, #128	; 0x80
     3b0:	4e0b      	ldr	r6, [pc, #44]	; (3e0 <readMS5803AdcResults+0x34>)
     3b2:	01ff      	lsls	r7, r7, #7

    pinLow(cs_baro);
    spiDataOut(BARO_SPI, cmdAdcRead_);
     3b4:	2100      	movs	r1, #0
     3b6:	4b0b      	ldr	r3, [pc, #44]	; (3e4 <readMS5803AdcResults+0x38>)
     3b8:	6177      	str	r7, [r6, #20]
     3ba:	2002      	movs	r0, #2
     3bc:	4798      	blx	r3
    u8_t _byte1 = spiDataIn(SPI2);
     3be:	4d0a      	ldr	r5, [pc, #40]	; (3e8 <readMS5803AdcResults+0x3c>)
     3c0:	2002      	movs	r0, #2
     3c2:	47a8      	blx	r5
     3c4:	0004      	movs	r4, r0
    u8_t _byte2 = spiDataIn(SPI2);
     3c6:	2002      	movs	r0, #2
     3c8:	47a8      	blx	r5
     3ca:	9001      	str	r0, [sp, #4]
    u8_t _byte3 = spiDataIn(SPI2);
     3cc:	2002      	movs	r0, #2
     3ce:	47a8      	blx	r5
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     3d0:	61b7      	str	r7, [r6, #24]
    pinHigh(cs_baro);

    u32_t _receive = (_byte1 << 16) | (_byte2 << 8) | (_byte3);
    return _receive;
     3d2:	9b01      	ldr	r3, [sp, #4]
     3d4:	0424      	lsls	r4, r4, #16
     3d6:	021b      	lsls	r3, r3, #8
     3d8:	431c      	orrs	r4, r3
     3da:	4320      	orrs	r0, r4
}
     3dc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
     3de:	46c0      	nop			; (mov r8, r8)
     3e0:	41004400 	.word	0x41004400
     3e4:	00002a29 	.word	0x00002a29
     3e8:	00002a41 	.word	0x00002a41

000003ec <ConvertPressureTemperature>:

void ConvertPressureTemperature(u32_t pressureRaw, u32_t tempRaw, u32_t* temperatureCelcus, int32_t* pressureMbar ) {
     3ec:	b5f0      	push	{r4, r5, r6, r7, lr}
     3ee:	b087      	sub	sp, #28
     3f0:	9304      	str	r3, [sp, #16]
    const u16_t C1 = coefficients_[1];
     3f2:	4b24      	ldr	r3, [pc, #144]	; (484 <ConvertPressureTemperature+0x98>)

    u32_t _receive = (_byte1 << 16) | (_byte2 << 8) | (_byte3);
    return _receive;
}

void ConvertPressureTemperature(u32_t pressureRaw, u32_t tempRaw, u32_t* temperatureCelcus, int32_t* pressureMbar ) {
     3f4:	9003      	str	r0, [sp, #12]
     3f6:	0014      	movs	r4, r2
    const u16_t C1 = coefficients_[1];
     3f8:	885a      	ldrh	r2, [r3, #2]
    const u16_t C5 = coefficients_[5];
    const u16_t C6 = coefficients_[6];

    // calculate 1st order pressure and temperature (MS5607 1st order algorithm)
    const  int32_t dT = (tempRaw) - ((int32_t)C5 << 8);
    *temperatureCelcus  = 2000 + (((int64_t)dT * C6) >> 23) ;
     3fa:	4f23      	ldr	r7, [pc, #140]	; (488 <ConvertPressureTemperature+0x9c>)
    u32_t _receive = (_byte1 << 16) | (_byte2 << 8) | (_byte3);
    return _receive;
}

void ConvertPressureTemperature(u32_t pressureRaw, u32_t tempRaw, u32_t* temperatureCelcus, int32_t* pressureMbar ) {
    const u16_t C1 = coefficients_[1];
     3fc:	9200      	str	r2, [sp, #0]
    const u16_t C2 = coefficients_[2];
     3fe:	889a      	ldrh	r2, [r3, #4]
     400:	9201      	str	r2, [sp, #4]
    const u16_t C3 = coefficients_[3];
    const u16_t C4 = coefficients_[4];
     402:	891a      	ldrh	r2, [r3, #8]
}

void ConvertPressureTemperature(u32_t pressureRaw, u32_t tempRaw, u32_t* temperatureCelcus, int32_t* pressureMbar ) {
    const u16_t C1 = coefficients_[1];
    const u16_t C2 = coefficients_[2];
    const u16_t C3 = coefficients_[3];
     404:	88dd      	ldrh	r5, [r3, #6]
    const u16_t C4 = coefficients_[4];
     406:	9202      	str	r2, [sp, #8]
    const u16_t C5 = coefficients_[5];
    const u16_t C6 = coefficients_[6];

    // calculate 1st order pressure and temperature (MS5607 1st order algorithm)
    const  int32_t dT = (tempRaw) - ((int32_t)C5 << 8);
    *temperatureCelcus  = 2000 + (((int64_t)dT * C6) >> 23) ;
     408:	895e      	ldrh	r6, [r3, #10]
     40a:	0236      	lsls	r6, r6, #8
     40c:	1b8e      	subs	r6, r1, r6
     40e:	17f2      	asrs	r2, r6, #31
     410:	9205      	str	r2, [sp, #20]
     412:	8998      	ldrh	r0, [r3, #12]
     414:	0032      	movs	r2, r6
     416:	17f3      	asrs	r3, r6, #31
     418:	2100      	movs	r1, #0
     41a:	47b8      	blx	r7
     41c:	23fa      	movs	r3, #250	; 0xfa
     41e:	0249      	lsls	r1, r1, #9
     420:	0dc0      	lsrs	r0, r0, #23
     422:	4308      	orrs	r0, r1
     424:	00db      	lsls	r3, r3, #3
     426:	18c0      	adds	r0, r0, r3
     428:	6020      	str	r0, [r4, #0]

    const  int64_t OFF   = ((int64_t)C2 << 16) + ((C4 * (int64_t)dT) >> 7);
    const  int64_t SENS  =  ((int64_t)C1 << 15) + ((C3 * (int64_t)dT) >> 8);
    *pressureMbar = ((((pressureRaw * SENS) >> 21) - OFF) >> 15);
     42a:	0032      	movs	r2, r6
     42c:	17f3      	asrs	r3, r6, #31
     42e:	0028      	movs	r0, r5
     430:	2100      	movs	r1, #0
     432:	47b8      	blx	r7
     434:	060c      	lsls	r4, r1, #24
     436:	120b      	asrs	r3, r1, #8
     438:	2100      	movs	r1, #0
     43a:	0a02      	lsrs	r2, r0, #8
     43c:	4322      	orrs	r2, r4
     43e:	9c00      	ldr	r4, [sp, #0]
     440:	03e0      	lsls	r0, r4, #15
     442:	1880      	adds	r0, r0, r2
     444:	4159      	adcs	r1, r3
     446:	9a03      	ldr	r2, [sp, #12]
     448:	2300      	movs	r3, #0
     44a:	47b8      	blx	r7
     44c:	02cb      	lsls	r3, r1, #11
     44e:	0d44      	lsrs	r4, r0, #21
     450:	0032      	movs	r2, r6
     452:	431c      	orrs	r4, r3
     454:	154d      	asrs	r5, r1, #21
     456:	9b05      	ldr	r3, [sp, #20]
     458:	9802      	ldr	r0, [sp, #8]
     45a:	2100      	movs	r1, #0
     45c:	47b8      	blx	r7
     45e:	064b      	lsls	r3, r1, #25
     460:	09c6      	lsrs	r6, r0, #7
     462:	431e      	orrs	r6, r3
     464:	2300      	movs	r3, #0
     466:	11cf      	asrs	r7, r1, #7
     468:	9901      	ldr	r1, [sp, #4]
     46a:	040a      	lsls	r2, r1, #16
     46c:	1992      	adds	r2, r2, r6
     46e:	417b      	adcs	r3, r7
     470:	1aa4      	subs	r4, r4, r2
     472:	419d      	sbcs	r5, r3
     474:	046b      	lsls	r3, r5, #17
     476:	0be4      	lsrs	r4, r4, #15
     478:	431c      	orrs	r4, r3
     47a:	9b04      	ldr	r3, [sp, #16]
     47c:	601c      	str	r4, [r3, #0]

}
     47e:	b007      	add	sp, #28
     480:	bdf0      	pop	{r4, r5, r6, r7, pc}
     482:	46c0      	nop			; (mov r8, r8)
     484:	2000063e 	.word	0x2000063e
     488:	00003fd9 	.word	0x00003fd9

0000048c <paToFeetNOAA>:

double paToFeetNOAA(int32_t pressureMbar) {
     48c:	b510      	push	{r4, lr}

    double lower =(((double)(pressureMbar)/10)/1013.25);
    double exponent = 0.190284;

    double altFeet = (1-pow(lower,exponent))*145366.45;
     48e:	4b0c      	ldr	r3, [pc, #48]	; (4c0 <paToFeetNOAA+0x34>)
     490:	4798      	blx	r3
     492:	4c0c      	ldr	r4, [pc, #48]	; (4c4 <paToFeetNOAA+0x38>)
     494:	2200      	movs	r2, #0
     496:	4b0c      	ldr	r3, [pc, #48]	; (4c8 <paToFeetNOAA+0x3c>)
     498:	47a0      	blx	r4
     49a:	2200      	movs	r2, #0
     49c:	4b0b      	ldr	r3, [pc, #44]	; (4cc <paToFeetNOAA+0x40>)
     49e:	47a0      	blx	r4
     4a0:	4a0b      	ldr	r2, [pc, #44]	; (4d0 <paToFeetNOAA+0x44>)
     4a2:	4b0c      	ldr	r3, [pc, #48]	; (4d4 <paToFeetNOAA+0x48>)
     4a4:	4c0c      	ldr	r4, [pc, #48]	; (4d8 <paToFeetNOAA+0x4c>)
     4a6:	47a0      	blx	r4
    return altFeet;
     4a8:	4c0c      	ldr	r4, [pc, #48]	; (4dc <paToFeetNOAA+0x50>)
double paToFeetNOAA(int32_t pressureMbar) {

    double lower =(((double)(pressureMbar)/10)/1013.25);
    double exponent = 0.190284;

    double altFeet = (1-pow(lower,exponent))*145366.45;
     4aa:	0002      	movs	r2, r0
     4ac:	000b      	movs	r3, r1
    return altFeet;
     4ae:	2000      	movs	r0, #0
     4b0:	490b      	ldr	r1, [pc, #44]	; (4e0 <paToFeetNOAA+0x54>)
     4b2:	47a0      	blx	r4
     4b4:	4a0b      	ldr	r2, [pc, #44]	; (4e4 <paToFeetNOAA+0x58>)
     4b6:	4b0c      	ldr	r3, [pc, #48]	; (4e8 <paToFeetNOAA+0x5c>)
     4b8:	4c0c      	ldr	r4, [pc, #48]	; (4ec <paToFeetNOAA+0x60>)
     4ba:	47a0      	blx	r4

}
     4bc:	bd10      	pop	{r4, pc}
     4be:	46c0      	nop			; (mov r8, r8)
     4c0:	0000618d 	.word	0x0000618d
     4c4:	00004cfd 	.word	0x00004cfd
     4c8:	40240000 	.word	0x40240000
     4cc:	408faa00 	.word	0x408faa00
     4d0:	e279dd3c 	.word	0xe279dd3c
     4d4:	3fc85b39 	.word	0x3fc85b39
     4d8:	00002d29 	.word	0x00002d29
     4dc:	00005a39 	.word	0x00005a39
     4e0:	3ff00000 	.word	0x3ff00000
     4e4:	9999999a 	.word	0x9999999a
     4e8:	4101beb3 	.word	0x4101beb3
     4ec:	00005545 	.word	0x00005545

000004f0 <readMS5803Coefficients>:



void readMS5803Coefficients() {
     4f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     4f2:	24a2      	movs	r4, #162	; 0xa2
     4f4:	4d11      	ldr	r5, [pc, #68]	; (53c <readMS5803Coefficients+0x4c>)

    for (u8_t coeff_num = 1; coeff_num < 7 ; ++coeff_num ) {
        delay_us(600);
     4f6:	2096      	movs	r0, #150	; 0x96
     4f8:	4e11      	ldr	r6, [pc, #68]	; (540 <readMS5803Coefficients+0x50>)
     4fa:	0080      	lsls	r0, r0, #2
     4fc:	47b0      	blx	r6
        u8_t _cmd = MS5803_CMD_PROM_READ + ((coeff_num)*2);
        delay_us(600);
     4fe:	2096      	movs	r0, #150	; 0x96
     500:	0080      	lsls	r0, r0, #2
     502:	47b0      	blx	r6
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     504:	2380      	movs	r3, #128	; 0x80
     506:	4e0f      	ldr	r6, [pc, #60]	; (544 <readMS5803Coefficients+0x54>)
     508:	01db      	lsls	r3, r3, #7
        pinLow(cs_baro);
        spiDataOut(SPI2, _cmd);
     50a:	0021      	movs	r1, r4
     50c:	6173      	str	r3, [r6, #20]
     50e:	2002      	movs	r0, #2
     510:	4b0d      	ldr	r3, [pc, #52]	; (548 <readMS5803Coefficients+0x58>)
     512:	4798      	blx	r3
        u8_t _byte1 = spiDataIn(SPI2);
     514:	4f0d      	ldr	r7, [pc, #52]	; (54c <readMS5803Coefficients+0x5c>)
     516:	2002      	movs	r0, #2
     518:	47b8      	blx	r7
     51a:	9001      	str	r0, [sp, #4]
        u8_t _byte2 = spiDataIn(SPI2);
     51c:	2002      	movs	r0, #2
     51e:	47b8      	blx	r7
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     520:	2380      	movs	r3, #128	; 0x80
     522:	01db      	lsls	r3, r3, #7
     524:	61b3      	str	r3, [r6, #24]
        pinHigh(cs_baro);
        coefficients_[coeff_num] = (_byte1 << 8) | _byte2;
     526:	9b01      	ldr	r3, [sp, #4]
     528:	3402      	adds	r4, #2
     52a:	021b      	lsls	r3, r3, #8
     52c:	4318      	orrs	r0, r3
     52e:	b2e4      	uxtb	r4, r4
     530:	8028      	strh	r0, [r5, #0]
     532:	3502      	adds	r5, #2



void readMS5803Coefficients() {

    for (u8_t coeff_num = 1; coeff_num < 7 ; ++coeff_num ) {
     534:	2cae      	cmp	r4, #174	; 0xae
     536:	d1de      	bne.n	4f6 <readMS5803Coefficients+0x6>
        u8_t _byte2 = spiDataIn(SPI2);
        pinHigh(cs_baro);
        coefficients_[coeff_num] = (_byte1 << 8) | _byte2;
    }

}
     538:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
     53a:	46c0      	nop			; (mov r8, r8)
     53c:	20000640 	.word	0x20000640
     540:	00000f99 	.word	0x00000f99
     544:	41004400 	.word	0x41004400
     548:	00002a29 	.word	0x00002a29
     54c:	00002a41 	.word	0x00002a41

00000550 <initMS5803Barometer>:

void initMS5803Barometer() {
     550:	b570      	push	{r4, r5, r6, lr}
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     552:	2580      	movs	r5, #128	; 0x80
     554:	4c06      	ldr	r4, [pc, #24]	; (570 <initMS5803Barometer+0x20>)
     556:	01ed      	lsls	r5, r5, #7


    pinLow(cs_baro);
    spiDataOut(BARO_SPI, MS5803_CMD_RES);
     558:	211e      	movs	r1, #30
     55a:	6165      	str	r5, [r4, #20]
     55c:	2002      	movs	r0, #2
     55e:	4b05      	ldr	r3, [pc, #20]	; (574 <initMS5803Barometer+0x24>)
     560:	4798      	blx	r3
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     562:	61a5      	str	r5, [r4, #24]

    pinHigh(cs_baro);
    delay_ms(200);
     564:	20c8      	movs	r0, #200	; 0xc8
     566:	4b04      	ldr	r3, [pc, #16]	; (578 <initMS5803Barometer+0x28>)
     568:	4798      	blx	r3
    readMS5803Coefficients();
     56a:	4b04      	ldr	r3, [pc, #16]	; (57c <initMS5803Barometer+0x2c>)
     56c:	4798      	blx	r3

}
     56e:	bd70      	pop	{r4, r5, r6, pc}
     570:	41004400 	.word	0x41004400
     574:	00002a29 	.word	0x00002a29
     578:	00000fc9 	.word	0x00000fc9
     57c:	000004f1 	.word	0x000004f1

00000580 <MS5803_CRC4>:
                n_rem = (n_rem << 1);
            }
        }
    }
    n_rem = (0x000F & (n_rem >> 12));
    coefficients_[7] = crc_read;
     580:	4b02      	ldr	r3, [pc, #8]	; (58c <MS5803_CRC4+0xc>)
    return (n_rem & 0x00);
}
     582:	2000      	movs	r0, #0
                n_rem = (n_rem << 1);
            }
        }
    }
    n_rem = (0x000F & (n_rem >> 12));
    coefficients_[7] = crc_read;
     584:	7b9a      	ldrb	r2, [r3, #14]
     586:	81da      	strh	r2, [r3, #14]
    return (n_rem & 0x00);
}
     588:	4770      	bx	lr
     58a:	46c0      	nop			; (mov r8, r8)
     58c:	2000063e 	.word	0x2000063e

00000590 <init>:


void init() {

    /* Set 1 Flash Wait State for 48MHz, cf tables 20.9 and 35.27 in SAMD21 Datasheet */
    NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val;
     590:	211e      	movs	r1, #30
#include <util.h>
#include <boardDefines.h>
#include "math.h"


void init() {
     592:	b5f0      	push	{r4, r5, r6, r7, lr}

    /* Set 1 Flash Wait State for 48MHz, cf tables 20.9 and 35.27 in SAMD21 Datasheet */
    NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val;
     594:	4af0      	ldr	r2, [pc, #960]	; (958 <init+0x3c8>)
#include <util.h>
#include <boardDefines.h>
#include "math.h"


void init() {
     596:	b085      	sub	sp, #20

    /* Set 1 Flash Wait State for 48MHz, cf tables 20.9 and 35.27 in SAMD21 Datasheet */
    NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val;
     598:	6853      	ldr	r3, [r2, #4]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     59a:	2401      	movs	r4, #1
     59c:	438b      	bics	r3, r1
     59e:	391c      	subs	r1, #28
     5a0:	430b      	orrs	r3, r1
     5a2:	6053      	str	r3, [r2, #4]

    /* Turn on the digital interface clock */
    PM->APBAMASK.reg |= PM_APBAMASK_GCLK;
     5a4:	4aed      	ldr	r2, [pc, #948]	; (95c <init+0x3cc>)
     5a6:	3106      	adds	r1, #6
     5a8:	6993      	ldr	r3, [r2, #24]

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     5aa:	260f      	movs	r6, #15
     5ac:	430b      	orrs	r3, r1
     5ae:	6193      	str	r3, [r2, #24]

    SystemInit();
     5b0:	4beb      	ldr	r3, [pc, #940]	; (960 <init+0x3d0>)
     5b2:	4798      	blx	r3
    GclkInit();
     5b4:	4beb      	ldr	r3, [pc, #940]	; (964 <init+0x3d4>)
     5b6:	4798      	blx	r3
    RtcInit();
     5b8:	4beb      	ldr	r3, [pc, #940]	; (968 <init+0x3d8>)
     5ba:	4798      	blx	r3
    delayInit();
     5bc:	4beb      	ldr	r3, [pc, #940]	; (96c <init+0x3dc>)
     5be:	4798      	blx	r3
    adcInit();
     5c0:	4beb      	ldr	r3, [pc, #940]	; (970 <init+0x3e0>)
     5c2:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     5c4:	2240      	movs	r2, #64	; 0x40
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     5c6:	21c1      	movs	r1, #193	; 0xc1

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     5c8:	4bea      	ldr	r3, [pc, #936]	; (974 <init+0x3e4>)
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     5ca:	0089      	lsls	r1, r1, #2

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     5cc:	601a      	str	r2, [r3, #0]
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     5ce:	5858      	ldr	r0, [r3, r1]
     5d0:	4ae9      	ldr	r2, [pc, #932]	; (978 <init+0x3e8>)
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     5d2:	2510      	movs	r5, #16
     5d4:	4002      	ands	r2, r0
     5d6:	505a      	str	r2, [r3, r1]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     5d8:	4be8      	ldr	r3, [pc, #928]	; (97c <init+0x3ec>)
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     5da:	2002      	movs	r0, #2
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     5dc:	0019      	movs	r1, r3
     5de:	3154      	adds	r1, #84	; 0x54
     5e0:	780a      	ldrb	r2, [r1, #0]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     5e2:	001f      	movs	r7, r3
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     5e4:	43a2      	bics	r2, r4
     5e6:	700a      	strb	r2, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     5e8:	2280      	movs	r2, #128	; 0x80
     5ea:	0352      	lsls	r2, r2, #13
     5ec:	609a      	str	r2, [r3, #8]

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     5ee:	3921      	subs	r1, #33	; 0x21
     5f0:	780a      	ldrb	r2, [r1, #0]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     5f2:	3794      	adds	r7, #148	; 0x94

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     5f4:	43b2      	bics	r2, r6
     5f6:	4322      	orrs	r2, r4
     5f8:	700a      	strb	r2, [r1, #0]
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     5fa:	7cca      	ldrb	r2, [r1, #19]
     5fc:	4322      	orrs	r2, r4
     5fe:	74ca      	strb	r2, [r1, #19]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     600:	001a      	movs	r2, r3
     602:	32c3      	adds	r2, #195	; 0xc3
     604:	7811      	ldrb	r1, [r2, #0]
     606:	43a1      	bics	r1, r4
     608:	7011      	strb	r1, [r2, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     60a:	7811      	ldrb	r1, [r2, #0]
     60c:	4301      	orrs	r1, r0
     60e:	7011      	strb	r1, [r2, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     610:	2108      	movs	r1, #8
     612:	468c      	mov	ip, r1
     614:	449c      	add	ip, r3
     616:	4661      	mov	r1, ip
     618:	3006      	adds	r0, #6
     61a:	67c8      	str	r0, [r1, #124]	; 0x7c
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     61c:	0019      	movs	r1, r3
     61e:	31b1      	adds	r1, #177	; 0xb1
     620:	7808      	ldrb	r0, [r1, #0]
     622:	4030      	ands	r0, r6
     624:	4328      	orrs	r0, r5
     626:	7008      	strb	r0, [r1, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     628:	7810      	ldrb	r0, [r2, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     62a:	3d0e      	subs	r5, #14
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     62c:	4320      	orrs	r0, r4
     62e:	7010      	strb	r0, [r2, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     630:	0018      	movs	r0, r3
     632:	30d7      	adds	r0, #215	; 0xd7
     634:	7802      	ldrb	r2, [r0, #0]
     636:	43a2      	bics	r2, r4
     638:	7002      	strb	r2, [r0, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     63a:	2080      	movs	r0, #128	; 0x80
     63c:	4ad0      	ldr	r2, [pc, #832]	; (980 <init+0x3f0>)
     63e:	0400      	lsls	r0, r0, #16
     640:	6010      	str	r0, [r2, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     642:	001a      	movs	r2, r3
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     644:	6038      	str	r0, [r7, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     646:	32c2      	adds	r2, #194	; 0xc2
     648:	7810      	ldrb	r0, [r2, #0]
     64a:	43a0      	bics	r0, r4
     64c:	7010      	strb	r0, [r2, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     64e:	7810      	ldrb	r0, [r2, #0]
     650:	4328      	orrs	r0, r5
     652:	7010      	strb	r0, [r2, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     654:	4660      	mov	r0, ip
     656:	3502      	adds	r5, #2
     658:	67c5      	str	r5, [r0, #124]	; 0x7c

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     65a:	7808      	ldrb	r0, [r1, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     65c:	350c      	adds	r5, #12
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     65e:	43b0      	bics	r0, r6
     660:	4320      	orrs	r0, r4
     662:	7008      	strb	r0, [r1, #0]
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     664:	7811      	ldrb	r1, [r2, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     666:	2002      	movs	r0, #2
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     668:	4321      	orrs	r1, r4
     66a:	7011      	strb	r1, [r2, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     66c:	0019      	movs	r1, r3
     66e:	31d6      	adds	r1, #214	; 0xd6
     670:	780a      	ldrb	r2, [r1, #0]
     672:	43a2      	bics	r2, r4
     674:	700a      	strb	r2, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     676:	2180      	movs	r1, #128	; 0x80
     678:	4ac1      	ldr	r2, [pc, #772]	; (980 <init+0x3f0>)
     67a:	03c9      	lsls	r1, r1, #15
     67c:	6011      	str	r1, [r2, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     67e:	001a      	movs	r2, r3
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     680:	6039      	str	r1, [r7, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     682:	3243      	adds	r2, #67	; 0x43
     684:	7811      	ldrb	r1, [r2, #0]
     686:	3f4b      	subs	r7, #75	; 0x4b
     688:	43a1      	bics	r1, r4
     68a:	7011      	strb	r1, [r2, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     68c:	7811      	ldrb	r1, [r2, #0]
     68e:	4301      	orrs	r1, r0
     690:	7011      	strb	r1, [r2, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     692:	0018      	movs	r0, r3


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     694:	2108      	movs	r1, #8
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     696:	3031      	adds	r0, #49	; 0x31


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     698:	6059      	str	r1, [r3, #4]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     69a:	7801      	ldrb	r1, [r0, #0]
     69c:	4031      	ands	r1, r6
     69e:	430d      	orrs	r5, r1
     6a0:	7005      	strb	r5, [r0, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     6a2:	7811      	ldrb	r1, [r2, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     6a4:	2502      	movs	r5, #2
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     6a6:	4321      	orrs	r1, r4
     6a8:	7011      	strb	r1, [r2, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     6aa:	0019      	movs	r1, r3
     6ac:	3159      	adds	r1, #89	; 0x59
     6ae:	780a      	ldrb	r2, [r1, #0]
     6b0:	43a2      	bics	r2, r4
     6b2:	700a      	strb	r2, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     6b4:	2280      	movs	r2, #128	; 0x80
     6b6:	0492      	lsls	r2, r2, #18
     6b8:	609a      	str	r2, [r3, #8]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     6ba:	615a      	str	r2, [r3, #20]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     6bc:	001a      	movs	r2, r3
     6be:	3242      	adds	r2, #66	; 0x42
     6c0:	7811      	ldrb	r1, [r2, #0]
     6c2:	43a1      	bics	r1, r4
     6c4:	7011      	strb	r1, [r2, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     6c6:	7811      	ldrb	r1, [r2, #0]
     6c8:	4329      	orrs	r1, r5
     6ca:	7011      	strb	r1, [r2, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     6cc:	2104      	movs	r1, #4
     6ce:	6059      	str	r1, [r3, #4]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     6d0:	7801      	ldrb	r1, [r0, #0]
     6d2:	43b1      	bics	r1, r6
     6d4:	4321      	orrs	r1, r4
     6d6:	7001      	strb	r1, [r0, #0]
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     6d8:	7811      	ldrb	r1, [r2, #0]
     6da:	4321      	orrs	r1, r4
     6dc:	7011      	strb	r1, [r2, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     6de:	0019      	movs	r1, r3
     6e0:	3158      	adds	r1, #88	; 0x58
     6e2:	780a      	ldrb	r2, [r1, #0]
     6e4:	43a2      	bics	r2, r4
     6e6:	700a      	strb	r2, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     6e8:	2280      	movs	r2, #128	; 0x80
    pinIn(senseDPin);
    pinMux(senseDPin);
    pinOut(fireDPin);
    pinLow(fireDPin);

    charges.igniterAHot = false;
     6ea:	2100      	movs	r1, #0
     6ec:	0452      	lsls	r2, r2, #17
     6ee:	609a      	str	r2, [r3, #8]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     6f0:	615a      	str	r2, [r3, #20]
     6f2:	4aa4      	ldr	r2, [pc, #656]	; (984 <init+0x3f4>)
     6f4:	7011      	strb	r1, [r2, #0]
    charges.igniterBHot = false;
     6f6:	2100      	movs	r1, #0
     6f8:	7211      	strb	r1, [r2, #8]
    charges.igniterCHot = false;
     6fa:	2100      	movs	r1, #0
     6fc:	7411      	strb	r1, [r2, #16]
    charges.igniterDHot = false;
     6fe:	2100      	movs	r1, #0
     700:	7611      	strb	r1, [r2, #24]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     702:	7dc2      	ldrb	r2, [r0, #23]
     704:	43a2      	bics	r2, r4
     706:	75c2      	strb	r2, [r0, #23]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     708:	2280      	movs	r2, #128	; 0x80
     70a:	0052      	lsls	r2, r2, #1
     70c:	609a      	str	r2, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     70e:	783a      	ldrb	r2, [r7, #0]
     710:	43a2      	bics	r2, r4
     712:	703a      	strb	r2, [r7, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     714:	2280      	movs	r2, #128	; 0x80
     716:	0092      	lsls	r2, r2, #2
     718:	609a      	str	r2, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     71a:	001a      	movs	r2, r3
     71c:	324b      	adds	r2, #75	; 0x4b
     71e:	7811      	ldrb	r1, [r2, #0]
     720:	43a1      	bics	r1, r4
     722:	7011      	strb	r1, [r2, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     724:	7811      	ldrb	r1, [r2, #0]
     726:	4329      	orrs	r1, r5
     728:	7011      	strb	r1, [r2, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     72a:	2180      	movs	r1, #128	; 0x80
     72c:	0109      	lsls	r1, r1, #4
     72e:	6059      	str	r1, [r3, #4]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     730:	2135      	movs	r1, #53	; 0x35
     732:	468c      	mov	ip, r1
     734:	449c      	add	ip, r3
     736:	4661      	mov	r1, ip
     738:	7809      	ldrb	r1, [r1, #0]
     73a:	351e      	adds	r5, #30
     73c:	4031      	ands	r1, r6
     73e:	4329      	orrs	r1, r5
     740:	4665      	mov	r5, ip
     742:	7029      	strb	r1, [r5, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     744:	7811      	ldrb	r1, [r2, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     746:	2520      	movs	r5, #32
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     748:	4321      	orrs	r1, r4
     74a:	7011      	strb	r1, [r2, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     74c:	0019      	movs	r1, r3
     74e:	3134      	adds	r1, #52	; 0x34
     750:	780a      	ldrb	r2, [r1, #0]
     752:	4032      	ands	r2, r6
     754:	432a      	orrs	r2, r5
     756:	700a      	strb	r2, [r1, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     758:	783a      	ldrb	r2, [r7, #0]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     75a:	3d1e      	subs	r5, #30
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     75c:	4322      	orrs	r2, r4
     75e:	703a      	strb	r2, [r7, #0]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     760:	780a      	ldrb	r2, [r1, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     762:	3706      	adds	r7, #6

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     764:	43b2      	bics	r2, r6
     766:	432a      	orrs	r2, r5
     768:	700a      	strb	r2, [r1, #0]
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     76a:	7dc2      	ldrb	r2, [r0, #23]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     76c:	3196      	adds	r1, #150	; 0x96
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     76e:	4322      	orrs	r2, r4
     770:	75c2      	strb	r2, [r0, #23]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     772:	780a      	ldrb	r2, [r1, #0]
     774:	43a2      	bics	r2, r4
     776:	700a      	strb	r2, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     778:	2280      	movs	r2, #128	; 0x80
     77a:	4981      	ldr	r1, [pc, #516]	; (980 <init+0x3f0>)
     77c:	00d2      	lsls	r2, r2, #3
     77e:	600a      	str	r2, [r1, #0]
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     780:	0019      	movs	r1, r3
     782:	3198      	adds	r1, #152	; 0x98
     784:	600a      	str	r2, [r1, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     786:	7e41      	ldrb	r1, [r0, #25]
     788:	43a1      	bics	r1, r4
     78a:	7641      	strb	r1, [r0, #25]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     78c:	609a      	str	r2, [r3, #8]
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     78e:	619a      	str	r2, [r3, #24]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     790:	7fc2      	ldrb	r2, [r0, #31]
     792:	43a2      	bics	r2, r4
     794:	77c2      	strb	r2, [r0, #31]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     796:	2280      	movs	r2, #128	; 0x80
     798:	0252      	lsls	r2, r2, #9
     79a:	609a      	str	r2, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     79c:	78ba      	ldrb	r2, [r7, #2]
     79e:	43a2      	bics	r2, r4
     7a0:	70ba      	strb	r2, [r7, #2]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     7a2:	2280      	movs	r2, #128	; 0x80
     7a4:	0292      	lsls	r2, r2, #10
     7a6:	609a      	str	r2, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     7a8:	001a      	movs	r2, r3
     7aa:	3253      	adds	r2, #83	; 0x53
     7ac:	7811      	ldrb	r1, [r2, #0]
     7ae:	43a1      	bics	r1, r4
     7b0:	7011      	strb	r1, [r2, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     7b2:	7811      	ldrb	r1, [r2, #0]
     7b4:	4329      	orrs	r1, r5
     7b6:	7011      	strb	r1, [r2, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     7b8:	2180      	movs	r1, #128	; 0x80
     7ba:	0309      	lsls	r1, r1, #12
     7bc:	6059      	str	r1, [r3, #4]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     7be:	2139      	movs	r1, #57	; 0x39
     7c0:	468c      	mov	ip, r1
     7c2:	449c      	add	ip, r3
     7c4:	4661      	mov	r1, ip
     7c6:	7809      	ldrb	r1, [r1, #0]
     7c8:	351e      	adds	r5, #30
     7ca:	4031      	ands	r1, r6
     7cc:	4329      	orrs	r1, r5
     7ce:	4665      	mov	r5, ip
     7d0:	7029      	strb	r1, [r5, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     7d2:	7811      	ldrb	r1, [r2, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     7d4:	2520      	movs	r5, #32
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     7d6:	4321      	orrs	r1, r4
     7d8:	7011      	strb	r1, [r2, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     7da:	0019      	movs	r1, r3
     7dc:	3138      	adds	r1, #56	; 0x38
     7de:	780a      	ldrb	r2, [r1, #0]
     7e0:	4032      	ands	r2, r6
     7e2:	432a      	orrs	r2, r5
     7e4:	700a      	strb	r2, [r1, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     7e6:	78ba      	ldrb	r2, [r7, #2]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     7e8:	3d1e      	subs	r5, #30
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     7ea:	4322      	orrs	r2, r4
     7ec:	70ba      	strb	r2, [r7, #2]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     7ee:	780a      	ldrb	r2, [r1, #0]
     7f0:	43b2      	bics	r2, r6
     7f2:	432a      	orrs	r2, r5
     7f4:	700a      	strb	r2, [r1, #0]
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     7f6:	7fc2      	ldrb	r2, [r0, #31]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     7f8:	3114      	adds	r1, #20
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     7fa:	4322      	orrs	r2, r4
     7fc:	77c2      	strb	r2, [r0, #31]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     7fe:	798a      	ldrb	r2, [r1, #6]
     800:	43a2      	bics	r2, r4
     802:	718a      	strb	r2, [r1, #6]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     804:	2280      	movs	r2, #128	; 0x80
     806:	02d2      	lsls	r2, r2, #11
     808:	609a      	str	r2, [r3, #8]
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     80a:	619a      	str	r2, [r3, #24]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     80c:	9103      	str	r1, [sp, #12]
     80e:	780a      	ldrb	r2, [r1, #0]
     810:	43a2      	bics	r2, r4
     812:	700a      	strb	r2, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     814:	2280      	movs	r2, #128	; 0x80
     816:	0152      	lsls	r2, r2, #5
     818:	609a      	str	r2, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     81a:	783a      	ldrb	r2, [r7, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     81c:	2120      	movs	r1, #32
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     81e:	43a2      	bics	r2, r4
     820:	703a      	strb	r2, [r7, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     822:	2280      	movs	r2, #128	; 0x80
     824:	0212      	lsls	r2, r2, #8
     826:	609a      	str	r2, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     828:	001a      	movs	r2, r3
     82a:	324d      	adds	r2, #77	; 0x4d
     82c:	7810      	ldrb	r0, [r2, #0]
     82e:	43a0      	bics	r0, r4
     830:	7010      	strb	r0, [r2, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     832:	7810      	ldrb	r0, [r2, #0]
     834:	4328      	orrs	r0, r5
     836:	7010      	strb	r0, [r2, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     838:	2080      	movs	r0, #128	; 0x80
     83a:	0180      	lsls	r0, r0, #6
     83c:	6058      	str	r0, [r3, #4]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     83e:	0018      	movs	r0, r3
     840:	3036      	adds	r0, #54	; 0x36
     842:	7805      	ldrb	r5, [r0, #0]
     844:	4035      	ands	r5, r6
     846:	430d      	orrs	r5, r1
     848:	7005      	strb	r5, [r0, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     84a:	7811      	ldrb	r1, [r2, #0]
     84c:	000d      	movs	r5, r1
     84e:	4325      	orrs	r5, r4
     850:	7015      	strb	r5, [r2, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     852:	2237      	movs	r2, #55	; 0x37
     854:	4694      	mov	ip, r2
     856:	449c      	add	ip, r3
     858:	4662      	mov	r2, ip
     85a:	2120      	movs	r1, #32
     85c:	7812      	ldrb	r2, [r2, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     85e:	2502      	movs	r5, #2
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     860:	4032      	ands	r2, r6
     862:	430a      	orrs	r2, r1
     864:	4661      	mov	r1, ip
     866:	700a      	strb	r2, [r1, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     868:	2102      	movs	r1, #2
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     86a:	783a      	ldrb	r2, [r7, #0]
     86c:	4322      	orrs	r2, r4
     86e:	703a      	strb	r2, [r7, #0]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     870:	7802      	ldrb	r2, [r0, #0]
     872:	43b2      	bics	r2, r6
     874:	430a      	orrs	r2, r1
     876:	7002      	strb	r2, [r0, #0]
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     878:	9a03      	ldr	r2, [sp, #12]
     87a:	9903      	ldr	r1, [sp, #12]
     87c:	7812      	ldrb	r2, [r2, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     87e:	3020      	adds	r0, #32
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     880:	4322      	orrs	r2, r4
     882:	700a      	strb	r2, [r1, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     884:	0019      	movs	r1, r3
     886:	314e      	adds	r1, #78	; 0x4e
     888:	780a      	ldrb	r2, [r1, #0]
     88a:	43a2      	bics	r2, r4
     88c:	700a      	strb	r2, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     88e:	2280      	movs	r2, #128	; 0x80
     890:	01d2      	lsls	r2, r2, #7
     892:	609a      	str	r2, [r3, #8]
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     894:	619a      	str	r2, [r3, #24]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     896:	001a      	movs	r2, r3
     898:	3255      	adds	r2, #85	; 0x55
     89a:	7811      	ldrb	r1, [r2, #0]
     89c:	43a1      	bics	r1, r4
     89e:	7011      	strb	r1, [r2, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     8a0:	2180      	movs	r1, #128	; 0x80
     8a2:	0389      	lsls	r1, r1, #14
     8a4:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
}


inline static void pinCfg(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].reg = p.cfg;
     8a6:	2140      	movs	r1, #64	; 0x40
     8a8:	7011      	strb	r1, [r2, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     8aa:	7802      	ldrb	r2, [r0, #0]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     8ac:	0019      	movs	r1, r3
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     8ae:	43a2      	bics	r2, r4
     8b0:	7002      	strb	r2, [r0, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     8b2:	2280      	movs	r2, #128	; 0x80
     8b4:	03d2      	lsls	r2, r2, #15

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     8b6:	313b      	adds	r1, #59	; 0x3b
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     8b8:	609a      	str	r2, [r3, #8]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     8ba:	780a      	ldrb	r2, [r1, #0]
     8bc:	43b2      	bics	r2, r6
     8be:	432a      	orrs	r2, r5
     8c0:	700a      	strb	r2, [r1, #0]
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     8c2:	7802      	ldrb	r2, [r0, #0]
    pinOut(TxPo);
    pinMux(TxPo);
    pinIn(RxPo);
    pinMux(RxPo);

    sercomClockEnable(SPI2, 3, 4);
     8c4:	4f30      	ldr	r7, [pc, #192]	; (988 <init+0x3f8>)
     8c6:	4322      	orrs	r2, r4
     8c8:	7002      	strb	r2, [r0, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     8ca:	001a      	movs	r2, r3
     8cc:	3257      	adds	r2, #87	; 0x57
     8ce:	7810      	ldrb	r0, [r2, #0]
     8d0:	43a0      	bics	r0, r4
     8d2:	7010      	strb	r0, [r2, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     8d4:	7810      	ldrb	r0, [r2, #0]
     8d6:	4328      	orrs	r0, r5
     8d8:	7010      	strb	r0, [r2, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     8da:	2080      	movs	r0, #128	; 0x80
     8dc:	0400      	lsls	r0, r0, #16
     8de:	6058      	str	r0, [r3, #4]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     8e0:	2020      	movs	r0, #32
     8e2:	780b      	ldrb	r3, [r1, #0]
     8e4:	4033      	ands	r3, r6
     8e6:	4303      	orrs	r3, r0
     8e8:	700b      	strb	r3, [r1, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     8ea:	7813      	ldrb	r3, [r2, #0]
     8ec:	0028      	movs	r0, r5
     8ee:	4323      	orrs	r3, r4
     8f0:	7013      	strb	r3, [r2, #0]
     8f2:	2103      	movs	r1, #3
     8f4:	2204      	movs	r2, #4
     8f6:	47b8      	blx	r7
    sercomSpiMasterInit(SPI2, 1, 3, 0, 0, 0x00);
     8f8:	2300      	movs	r3, #0
     8fa:	4e24      	ldr	r6, [pc, #144]	; (98c <init+0x3fc>)
     8fc:	9301      	str	r3, [sp, #4]
     8fe:	9300      	str	r3, [sp, #0]
     900:	0021      	movs	r1, r4
     902:	0028      	movs	r0, r5
     904:	2203      	movs	r2, #3
     906:	47b0      	blx	r6

    sercomClockEnable(SPI0, 3, 4);
     908:	2204      	movs	r2, #4
     90a:	2103      	movs	r1, #3
     90c:	2000      	movs	r0, #0
     90e:	47b8      	blx	r7
    sercomSpiMasterInit(SPI0, 3, 0, 0, 0, 0x00);
     910:	2300      	movs	r3, #0
     912:	2103      	movs	r1, #3
     914:	9301      	str	r3, [sp, #4]
     916:	9300      	str	r3, [sp, #0]
     918:	001a      	movs	r2, r3
     91a:	0018      	movs	r0, r3
     91c:	47b0      	blx	r6

    sercomClockEnable(SPI1, 3, 4);
     91e:	0020      	movs	r0, r4
     920:	2204      	movs	r2, #4
     922:	2103      	movs	r1, #3
     924:	47b8      	blx	r7
    sercomSpiMasterInit(SPI1, 3, 0, 0, 0, 0x00);
     926:	2300      	movs	r3, #0
     928:	0020      	movs	r0, r4
     92a:	9301      	str	r3, [sp, #4]
     92c:	9300      	str	r3, [sp, #0]
     92e:	001a      	movs	r2, r3
     930:	2103      	movs	r1, #3
     932:	47b0      	blx	r6

    sercomClockEnable(USART3, 4, 8);
     934:	2208      	movs	r2, #8
     936:	2104      	movs	r1, #4
     938:	2003      	movs	r0, #3
     93a:	47b8      	blx	r7
    sercomUartInit(USART3,1,0,19200);
     93c:	2396      	movs	r3, #150	; 0x96
     93e:	0021      	movs	r1, r4
     940:	2200      	movs	r2, #0
     942:	2003      	movs	r0, #3
     944:	01db      	lsls	r3, r3, #7
     946:	4c12      	ldr	r4, [pc, #72]	; (990 <init+0x400>)
     948:	47a0      	blx	r4

    TC4Init();
     94a:	4b12      	ldr	r3, [pc, #72]	; (994 <init+0x404>)
     94c:	4798      	blx	r3
    TC5Init();
     94e:	4b12      	ldr	r3, [pc, #72]	; (998 <init+0x408>)
     950:	4798      	blx	r3
}
     952:	b005      	add	sp, #20
     954:	bdf0      	pop	{r4, r5, r6, r7, pc}
     956:	46c0      	nop			; (mov r8, r8)
     958:	41004000 	.word	0x41004000
     95c:	40000400 	.word	0x40000400
     960:	000001d5 	.word	0x000001d5
     964:	00000df1 	.word	0x00000df1
     968:	00000e79 	.word	0x00000e79
     96c:	00000f79 	.word	0x00000f79
     970:	00000c55 	.word	0x00000c55
     974:	e000e100 	.word	0xe000e100
     978:	ff00ffff 	.word	0xff00ffff
     97c:	41004400 	.word	0x41004400
     980:	41004488 	.word	0x41004488
     984:	20000680 	.word	0x20000680
     988:	00002901 	.word	0x00002901
     98c:	00002965 	.word	0x00002965
     990:	000029c9 	.word	0x000029c9
     994:	00001049 	.word	0x00001049
     998:	000010b1 	.word	0x000010b1

0000099c <main>:


int main(void) {
     99c:	b510      	push	{r4, lr}

    init();
     99e:	4b12      	ldr	r3, [pc, #72]	; (9e8 <main+0x4c>)
     9a0:	4798      	blx	r3

    initMS5803Barometer();
     9a2:	4b12      	ldr	r3, [pc, #72]	; (9ec <main+0x50>)
     9a4:	4798      	blx	r3
    IMUinit();
     9a6:	4b12      	ldr	r3, [pc, #72]	; (9f0 <main+0x54>)
     9a8:	4798      	blx	r3

    computeKalmanGains();
     9aa:	4b12      	ldr	r3, [pc, #72]	; (9f4 <main+0x58>)
     9ac:	4798      	blx	r3

    sampleTick();
     9ae:	4c12      	ldr	r4, [pc, #72]	; (9f8 <main+0x5c>)
     9b0:	47a0      	blx	r4

    POST();
     9b2:	4b12      	ldr	r3, [pc, #72]	; (9fc <main+0x60>)
     9b4:	4798      	blx	r3

    isItPointingUp();
     9b6:	4b12      	ldr	r3, [pc, #72]	; (a00 <main+0x64>)
     9b8:	4798      	blx	r3

    getSettings();
     9ba:	4b12      	ldr	r3, [pc, #72]	; (a04 <main+0x68>)
     9bc:	4798      	blx	r3

    beep(400);
     9be:	20c8      	movs	r0, #200	; 0xc8
     9c0:	4b11      	ldr	r3, [pc, #68]	; (a08 <main+0x6c>)
     9c2:	0040      	lsls	r0, r0, #1
     9c4:	4798      	blx	r3

    startupTick = millis();
     9c6:	4b11      	ldr	r3, [pc, #68]	; (a0c <main+0x70>)
     9c8:	4798      	blx	r3
     9ca:	4b11      	ldr	r3, [pc, #68]	; (a10 <main+0x74>)
     9cc:	6018      	str	r0, [r3, #0]

    while (1) {
        if (takeSample()) {
     9ce:	4b11      	ldr	r3, [pc, #68]	; (a14 <main+0x78>)
     9d0:	4798      	blx	r3
     9d2:	2800      	cmp	r0, #0
     9d4:	d0fb      	beq.n	9ce <main+0x32>
            sampleTick();
     9d6:	47a0      	blx	r4
            flight();
     9d8:	4b0f      	ldr	r3, [pc, #60]	; (a18 <main+0x7c>)
     9da:	4798      	blx	r3
            igniterTick();
     9dc:	4b0f      	ldr	r3, [pc, #60]	; (a1c <main+0x80>)
     9de:	4798      	blx	r3
            computeKalmanStates();
     9e0:	4b0f      	ldr	r3, [pc, #60]	; (a20 <main+0x84>)
     9e2:	4798      	blx	r3
     9e4:	e7f3      	b.n	9ce <main+0x32>
     9e6:	46c0      	nop			; (mov r8, r8)
     9e8:	00000591 	.word	0x00000591
     9ec:	00000551 	.word	0x00000551
     9f0:	00000a25 	.word	0x00000a25
     9f4:	000016ed 	.word	0x000016ed
     9f8:	00002621 	.word	0x00002621
     9fc:	00000b5d 	.word	0x00000b5d
     a00:	00001429 	.word	0x00001429
     a04:	00002b6d 	.word	0x00002b6d
     a08:	00000d39 	.word	0x00000d39
     a0c:	00001015 	.word	0x00001015
     a10:	20000524 	.word	0x20000524
     a14:	00002609 	.word	0x00002609
     a18:	00001119 	.word	0x00001119
     a1c:	00001505 	.word	0x00001505
     a20:	00001f8d 	.word	0x00001f8d

00000a24 <IMUinit>:
#include <util.h>
#include <boardDefines.h>


void IMUinit() {
     a24:	b570      	push	{r4, r5, r6, lr}
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     a26:	4c08      	ldr	r4, [pc, #32]	; (a48 <IMUinit+0x24>)
     a28:	2580      	movs	r5, #128	; 0x80
     a2a:	0023      	movs	r3, r4
     a2c:	00ed      	lsls	r5, r5, #3
     a2e:	3394      	adds	r3, #148	; 0x94
     a30:	601d      	str	r5, [r3, #0]

    pinLow(cs_accel);
    spiDataOut(SPI0, BMI_ACCEL_PMU_RANGE);
     a32:	4e06      	ldr	r6, [pc, #24]	; (a4c <IMUinit+0x28>)
     a34:	210f      	movs	r1, #15
     a36:	2000      	movs	r0, #0
     a38:	47b0      	blx	r6
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     a3a:	3498      	adds	r4, #152	; 0x98
    spiDataOut(SPI0, BMI_ACCEL_16G_RANGE);
     a3c:	210c      	movs	r1, #12
     a3e:	2000      	movs	r0, #0
     a40:	47b0      	blx	r6
     a42:	6025      	str	r5, [r4, #0]
    pinHigh(cs_accel);

}
     a44:	bd70      	pop	{r4, r5, r6, pc}
     a46:	46c0      	nop			; (mov r8, r8)
     a48:	41004400 	.word	0x41004400
     a4c:	00002a29 	.word	0x00002a29

00000a50 <USARTconnectionAvaliable>:

bool USARTconnectionAvaliable() {
     a50:	b510      	push	{r4, lr}

    if (sercom(USART3)->SPI.INTFLAG.bit.RXC == 1) {
     a52:	4b09      	ldr	r3, [pc, #36]	; (a78 <USARTconnectionAvaliable+0x28>)
     a54:	7e1c      	ldrb	r4, [r3, #24]
     a56:	0764      	lsls	r4, r4, #29
     a58:	0fe4      	lsrs	r4, r4, #31
     a5a:	2c01      	cmp	r4, #1
     a5c:	d001      	beq.n	a62 <USARTconnectionAvaliable+0x12>
            return true;
        } else {
            return false;
        }
    }
    return false;
     a5e:	2000      	movs	r0, #0
     a60:	e009      	b.n	a76 <USARTconnectionAvaliable+0x26>
}

bool USARTconnectionAvaliable() {

    if (sercom(USART3)->SPI.INTFLAG.bit.RXC == 1) {
        u8_t connectAttempt = usartDataIn(USART3);
     a62:	2003      	movs	r0, #3
     a64:	4b05      	ldr	r3, [pc, #20]	; (a7c <USARTconnectionAvaliable+0x2c>)
     a66:	4798      	blx	r3
     a68:	1e01      	subs	r1, r0, #0
        if (connectAttempt == 0x48) {
     a6a:	2948      	cmp	r1, #72	; 0x48
     a6c:	d1f7      	bne.n	a5e <USARTconnectionAvaliable+0xe>
            usartDataOut(USART3, 'H');
     a6e:	2003      	movs	r0, #3
     a70:	4b03      	ldr	r3, [pc, #12]	; (a80 <USARTconnectionAvaliable+0x30>)
     a72:	4798      	blx	r3
            return true;
     a74:	0020      	movs	r0, r4
        } else {
            return false;
        }
    }
    return false;
}
     a76:	bd10      	pop	{r4, pc}
     a78:	42001400 	.word	0x42001400
     a7c:	00002a75 	.word	0x00002a75
     a80:	00002a5d 	.word	0x00002a5d

00000a84 <sendTheasePagesToComputer>:

void sendTheasePagesToComputer(u32_t firstPage, u32_t lastPage) {
     a84:	b5f0      	push	{r4, r5, r6, r7, lr}
    for (u16_t page = 0; page <= pagesToSend; ++page) {

        u8_t data[256];
        AT25SEreadPage(pageToReadAddress , data);

        for (u16_t dataByte = 0; dataByte < 256; ++dataByte) {
     a86:	2780      	movs	r7, #128	; 0x80
        }
    }
    return false;
}

void sendTheasePagesToComputer(u32_t firstPage, u32_t lastPage) {
     a88:	0005      	movs	r5, r0

    u16_t pagesToSend = (lastPage - firstPage) >> 8;

    u32_t pageToReadAddress = firstPage;

    for (u16_t page = 0; page <= pagesToSend; ++page) {
     a8a:	2400      	movs	r4, #0
    return false;
}

void sendTheasePagesToComputer(u32_t firstPage, u32_t lastPage) {

    u16_t pagesToSend = (lastPage - firstPage) >> 8;
     a8c:	1a09      	subs	r1, r1, r0
     a8e:	0a09      	lsrs	r1, r1, #8
        }
    }
    return false;
}

void sendTheasePagesToComputer(u32_t firstPage, u32_t lastPage) {
     a90:	b0c3      	sub	sp, #268	; 0x10c

    u16_t pagesToSend = (lastPage - firstPage) >> 8;
     a92:	b28b      	uxth	r3, r1
     a94:	9301      	str	r3, [sp, #4]
    for (u16_t page = 0; page <= pagesToSend; ++page) {

        u8_t data[256];
        AT25SEreadPage(pageToReadAddress , data);

        for (u16_t dataByte = 0; dataByte < 256; ++dataByte) {
     a96:	007f      	lsls	r7, r7, #1
    u32_t pageToReadAddress = firstPage;

    for (u16_t page = 0; page <= pagesToSend; ++page) {

        u8_t data[256];
        AT25SEreadPage(pageToReadAddress , data);
     a98:	a902      	add	r1, sp, #8
     a9a:	0028      	movs	r0, r5
     a9c:	4b09      	ldr	r3, [pc, #36]	; (ac4 <sendTheasePagesToComputer+0x40>)
     a9e:	4798      	blx	r3
     aa0:	2600      	movs	r6, #0

        for (u16_t dataByte = 0; dataByte < 256; ++dataByte) {
            usartDataOut(USART3, data[dataByte]);
     aa2:	ab02      	add	r3, sp, #8
     aa4:	5d99      	ldrb	r1, [r3, r6]
     aa6:	2003      	movs	r0, #3
     aa8:	4b07      	ldr	r3, [pc, #28]	; (ac8 <sendTheasePagesToComputer+0x44>)
     aaa:	3601      	adds	r6, #1
     aac:	4798      	blx	r3
    for (u16_t page = 0; page <= pagesToSend; ++page) {

        u8_t data[256];
        AT25SEreadPage(pageToReadAddress , data);

        for (u16_t dataByte = 0; dataByte < 256; ++dataByte) {
     aae:	42be      	cmp	r6, r7
     ab0:	d1f7      	bne.n	aa2 <sendTheasePagesToComputer+0x1e>

    u16_t pagesToSend = (lastPage - firstPage) >> 8;

    u32_t pageToReadAddress = firstPage;

    for (u16_t page = 0; page <= pagesToSend; ++page) {
     ab2:	3401      	adds	r4, #1
     ab4:	9b01      	ldr	r3, [sp, #4]

        for (u16_t dataByte = 0; dataByte < 256; ++dataByte) {
            usartDataOut(USART3, data[dataByte]);
        }

        pageToReadAddress = pageToReadAddress + 0x100;
     ab6:	3501      	adds	r5, #1

    u16_t pagesToSend = (lastPage - firstPage) >> 8;

    u32_t pageToReadAddress = firstPage;

    for (u16_t page = 0; page <= pagesToSend; ++page) {
     ab8:	b2a4      	uxth	r4, r4

        for (u16_t dataByte = 0; dataByte < 256; ++dataByte) {
            usartDataOut(USART3, data[dataByte]);
        }

        pageToReadAddress = pageToReadAddress + 0x100;
     aba:	35ff      	adds	r5, #255	; 0xff

    u16_t pagesToSend = (lastPage - firstPage) >> 8;

    u32_t pageToReadAddress = firstPage;

    for (u16_t page = 0; page <= pagesToSend; ++page) {
     abc:	42a3      	cmp	r3, r4
     abe:	d2eb      	bcs.n	a98 <sendTheasePagesToComputer+0x14>
            usartDataOut(USART3, data[dataByte]);
        }

        pageToReadAddress = pageToReadAddress + 0x100;
    }
}
     ac0:	b043      	add	sp, #268	; 0x10c
     ac2:	bdf0      	pop	{r4, r5, r6, r7, pc}
     ac4:	00000355 	.word	0x00000355
     ac8:	00002a5d 	.word	0x00002a5d

00000acc <altitudeAGL>:

int32_t altitudeAGL() {
    return altitude - offsets.groundOffset;
     acc:	4b07      	ldr	r3, [pc, #28]	; (aec <altitudeAGL+0x20>)

        pageToReadAddress = pageToReadAddress + 0x100;
    }
}

int32_t altitudeAGL() {
     ace:	b510      	push	{r4, lr}
    return altitude - offsets.groundOffset;
     ad0:	6998      	ldr	r0, [r3, #24]
     ad2:	4b07      	ldr	r3, [pc, #28]	; (af0 <altitudeAGL+0x24>)
     ad4:	4798      	blx	r3
     ad6:	000b      	movs	r3, r1
     ad8:	4906      	ldr	r1, [pc, #24]	; (af4 <altitudeAGL+0x28>)
     ada:	0002      	movs	r2, r0
     adc:	6808      	ldr	r0, [r1, #0]
     ade:	6849      	ldr	r1, [r1, #4]
     ae0:	4c05      	ldr	r4, [pc, #20]	; (af8 <altitudeAGL+0x2c>)
     ae2:	47a0      	blx	r4
     ae4:	4b05      	ldr	r3, [pc, #20]	; (afc <altitudeAGL+0x30>)
     ae6:	4798      	blx	r3
}
     ae8:	bd10      	pop	{r4, pc}
     aea:	46c0      	nop			; (mov r8, r8)
     aec:	200004d8 	.word	0x200004d8
     af0:	00006211 	.word	0x00006211
     af4:	200006b8 	.word	0x200006b8
     af8:	00005a39 	.word	0x00005a39
     afc:	00006121 	.word	0x00006121

00000b00 <unplugged>:


bool unplugged() {
    if (sample.voltage.batFloat < 3.3) {
     b00:	4b07      	ldr	r3, [pc, #28]	; (b20 <unplugged+0x20>)
int32_t altitudeAGL() {
    return altitude - offsets.groundOffset;
}


bool unplugged() {
     b02:	b570      	push	{r4, r5, r6, lr}
     b04:	68d8      	ldr	r0, [r3, #12]
     b06:	4b07      	ldr	r3, [pc, #28]	; (b24 <unplugged+0x24>)
     b08:	4798      	blx	r3
     b0a:	4a07      	ldr	r2, [pc, #28]	; (b28 <unplugged+0x28>)
     b0c:	4b07      	ldr	r3, [pc, #28]	; (b2c <unplugged+0x2c>)
     b0e:	4d08      	ldr	r5, [pc, #32]	; (b30 <unplugged+0x30>)
     b10:	2401      	movs	r4, #1
     b12:	47a8      	blx	r5
     b14:	2800      	cmp	r0, #0
     b16:	d100      	bne.n	b1a <unplugged+0x1a>
     b18:	1c04      	adds	r4, r0, #0
     b1a:	b2e0      	uxtb	r0, r4
    if (sample.voltage.batFloat < 3.3) {
        return true;
    } else {
        return false;
    }
}
     b1c:	bd70      	pop	{r4, r5, r6, pc}
     b1e:	46c0      	nop			; (mov r8, r8)
     b20:	200007e8 	.word	0x200007e8
     b24:	00006281 	.word	0x00006281
     b28:	66666666 	.word	0x66666666
     b2c:	400a6666 	.word	0x400a6666
     b30:	00003f89 	.word	0x00003f89

00000b34 <finishFlight>:

void finishFlight() {

    flightState = flightIdle;
     b34:	2201      	movs	r2, #1
    } else {
        return false;
    }
}

void finishFlight() {
     b36:	b510      	push	{r4, lr}

    flightState = flightIdle;
     b38:	4b04      	ldr	r3, [pc, #16]	; (b4c <finishFlight+0x18>)
     b3a:	701a      	strb	r2, [r3, #0]
    AT25SFHoldTillReady();
     b3c:	4b04      	ldr	r3, [pc, #16]	; (b50 <finishFlight+0x1c>)
     b3e:	4798      	blx	r3
    writeFlightEndAddress( );
     b40:	4b04      	ldr	r3, [pc, #16]	; (b54 <finishFlight+0x20>)
     b42:	4798      	blx	r3
    unpluggedJingle();
     b44:	4b04      	ldr	r3, [pc, #16]	; (b58 <finishFlight+0x24>)
     b46:	4798      	blx	r3
}
     b48:	bd10      	pop	{r4, pc}
     b4a:	46c0      	nop			; (mov r8, r8)
     b4c:	200006a0 	.word	0x200006a0
     b50:	000001e5 	.word	0x000001e5
     b54:	0000251d 	.word	0x0000251d
     b58:	00000dad 	.word	0x00000dad

00000b5c <POST>:

void POST() {
     b5c:	b5f0      	push	{r4, r5, r6, r7, lr}

    bool postFailed = false;
    u8_t failType = 0;

    //Baro post first
    u8_t crc = MS5803_CRC4();
     b5e:	4b32      	ldr	r3, [pc, #200]	; (c28 <POST+0xcc>)
    AT25SFHoldTillReady();
    writeFlightEndAddress( );
    unpluggedJingle();
}

void POST() {
     b60:	b085      	sub	sp, #20

    bool postFailed = false;
    u8_t failType = 0;

    //Baro post first
    u8_t crc = MS5803_CRC4();
     b62:	4798      	blx	r3
    if (crc != coefficients_[7]) {
     b64:	4b31      	ldr	r3, [pc, #196]	; (c2c <POST+0xd0>)
     b66:	b280      	uxth	r0, r0
     b68:	89db      	ldrh	r3, [r3, #14]
        postFailed = true;
        failType = 1;
     b6a:	2401      	movs	r4, #1
    bool postFailed = false;
    u8_t failType = 0;

    //Baro post first
    u8_t crc = MS5803_CRC4();
    if (crc != coefficients_[7]) {
     b6c:	4283      	cmp	r3, r0
     b6e:	d100      	bne.n	b72 <POST+0x16>

void POST() {
    uint8_t dummy_Tx = 0xFF;

    bool postFailed = false;
    u8_t failType = 0;
     b70:	2400      	movs	r4, #0
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     b72:	2780      	movs	r7, #128	; 0x80
     b74:	4d2e      	ldr	r5, [pc, #184]	; (c30 <POST+0xd4>)
     b76:	02ff      	lsls	r7, r7, #11
        failType = 1;
    }

    //Memory Post
    pinLow(cs_mem);
    spiDataOut(SPI1,0x9f); // read id and mfg code
     b78:	219f      	movs	r1, #159	; 0x9f
     b7a:	4b2e      	ldr	r3, [pc, #184]	; (c34 <POST+0xd8>)
}

void POST() {
    uint8_t dummy_Tx = 0xFF;

    bool postFailed = false;
     b7c:	9401      	str	r4, [sp, #4]
        failType = 1;
    }

    //Memory Post
    pinLow(cs_mem);
    spiDataOut(SPI1,0x9f); // read id and mfg code
     b7e:	2001      	movs	r0, #1
     b80:	616f      	str	r7, [r5, #20]
     b82:	4798      	blx	r3
    u8_t mfgID = spiDataIn(SPI1);
     b84:	4e2c      	ldr	r6, [pc, #176]	; (c38 <POST+0xdc>)
     b86:	2001      	movs	r0, #1
     b88:	47b0      	blx	r6
     b8a:	9002      	str	r0, [sp, #8]
    u8_t deviceID1 = spiDataIn(SPI1);
     b8c:	2001      	movs	r0, #1
     b8e:	47b0      	blx	r6
     b90:	9003      	str	r0, [sp, #12]
    u8_t deviceID2 = spiDataIn(SPI1);
     b92:	2001      	movs	r0, #1
     b94:	47b0      	blx	r6
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     b96:	61af      	str	r7, [r5, #24]
    pinHigh(cs_mem);

    if ( (mfgID != 0x1f) & (deviceID1 != 0x86) & (deviceID2 != 0x01)) {
     b98:	9b02      	ldr	r3, [sp, #8]
     b9a:	3b1f      	subs	r3, #31
     b9c:	1e5a      	subs	r2, r3, #1
     b9e:	4193      	sbcs	r3, r2
     ba0:	0019      	movs	r1, r3
     ba2:	9b03      	ldr	r3, [sp, #12]
     ba4:	3b86      	subs	r3, #134	; 0x86
     ba6:	1e5a      	subs	r2, r3, #1
     ba8:	4193      	sbcs	r3, r2
     baa:	4a22      	ldr	r2, [pc, #136]	; (c34 <POST+0xd8>)
     bac:	9202      	str	r2, [sp, #8]
     bae:	420b      	tst	r3, r1
     bb0:	d004      	beq.n	bbc <POST+0x60>
     bb2:	2801      	cmp	r0, #1
     bb4:	d002      	beq.n	bbc <POST+0x60>
        postFailed = true;
     bb6:	2301      	movs	r3, #1
        failType = 2;
     bb8:	2402      	movs	r4, #2
    u8_t deviceID1 = spiDataIn(SPI1);
    u8_t deviceID2 = spiDataIn(SPI1);
    pinHigh(cs_mem);

    if ( (mfgID != 0x1f) & (deviceID1 != 0x86) & (deviceID2 != 0x01)) {
        postFailed = true;
     bba:	9301      	str	r3, [sp, #4]
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     bbc:	2780      	movs	r7, #128	; 0x80
     bbe:	4b1f      	ldr	r3, [pc, #124]	; (c3c <POST+0xe0>)
     bc0:	00ff      	lsls	r7, r7, #3
     bc2:	601f      	str	r7, [r3, #0]
        failType = 2;
    }

    //Accelerometer Post
    pinLow(cs_accel);
    spiDataOut(SPI0, BMI055_BGW_CHIPID | BMI055_READ_REG);
     bc4:	9b02      	ldr	r3, [sp, #8]
     bc6:	2180      	movs	r1, #128	; 0x80
     bc8:	2000      	movs	r0, #0
     bca:	4798      	blx	r3
    u8_t accelID = spiDataTransfer(SPI0,dummy_Tx);
     bcc:	21ff      	movs	r1, #255	; 0xff
     bce:	2000      	movs	r0, #0
     bd0:	4e1b      	ldr	r6, [pc, #108]	; (c40 <POST+0xe4>)
     bd2:	47b0      	blx	r6
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     bd4:	4b1b      	ldr	r3, [pc, #108]	; (c44 <POST+0xe8>)
     bd6:	601f      	str	r7, [r3, #0]
    pinHigh(cs_accel);

    if (accelID != 0xFA) {
     bd8:	28fa      	cmp	r0, #250	; 0xfa
     bda:	d002      	beq.n	be2 <POST+0x86>
        postFailed = true;
     bdc:	2301      	movs	r3, #1
        failType = 3;
     bde:	2403      	movs	r4, #3
    spiDataOut(SPI0, BMI055_BGW_CHIPID | BMI055_READ_REG);
    u8_t accelID = spiDataTransfer(SPI0,dummy_Tx);
    pinHigh(cs_accel);

    if (accelID != 0xFA) {
        postFailed = true;
     be0:	9301      	str	r3, [sp, #4]
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     be2:	616f      	str	r7, [r5, #20]
        failType = 3;
    }

    //Gyro Post
    pinLow(cs_gyro);
    spiDataOut(SPI0, BMI055_BGW_CHIPID | BMI055_READ_REG);
     be4:	2180      	movs	r1, #128	; 0x80
     be6:	2000      	movs	r0, #0
     be8:	9b02      	ldr	r3, [sp, #8]
     bea:	4798      	blx	r3
    u8_t gyroID = spiDataTransfer(SPI0,dummy_Tx);
     bec:	21ff      	movs	r1, #255	; 0xff
     bee:	2000      	movs	r0, #0
     bf0:	47b0      	blx	r6
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     bf2:	61af      	str	r7, [r5, #24]
    pinHigh(cs_gyro);

    if (gyroID != 0x0F) {
     bf4:	280f      	cmp	r0, #15
     bf6:	d103      	bne.n	c00 <POST+0xa4>
    }

    //Analog Accelerometer Post


    if (postFailed) {
     bf8:	9b01      	ldr	r3, [sp, #4]
     bfa:	2b00      	cmp	r3, #0
     bfc:	d101      	bne.n	c02 <POST+0xa6>
     bfe:	e011      	b.n	c24 <POST+0xc8>
    u8_t gyroID = spiDataTransfer(SPI0,dummy_Tx);
    pinHigh(cs_gyro);

    if (gyroID != 0x0F) {
        postFailed = true;
        failType = 4;
     c00:	2404      	movs	r4, #4

    if (postFailed) {
        while (1) {
            u8_t beepCount;

            for (beepCount = failType; beepCount > 0; beepCount--) {
     c02:	0025      	movs	r5, r4
     c04:	4e10      	ldr	r6, [pc, #64]	; (c48 <POST+0xec>)
     c06:	2d00      	cmp	r5, #0
     c08:	d009      	beq.n	c1e <POST+0xc2>
                beep(300);
     c0a:	2096      	movs	r0, #150	; 0x96
     c0c:	4b0f      	ldr	r3, [pc, #60]	; (c4c <POST+0xf0>)
     c0e:	0040      	lsls	r0, r0, #1
     c10:	4798      	blx	r3
                delay_ms(300);
     c12:	2096      	movs	r0, #150	; 0x96

    if (postFailed) {
        while (1) {
            u8_t beepCount;

            for (beepCount = failType; beepCount > 0; beepCount--) {
     c14:	3d01      	subs	r5, #1
                beep(300);
                delay_ms(300);
     c16:	0040      	lsls	r0, r0, #1
     c18:	47b0      	blx	r6

    if (postFailed) {
        while (1) {
            u8_t beepCount;

            for (beepCount = failType; beepCount > 0; beepCount--) {
     c1a:	b2ed      	uxtb	r5, r5
     c1c:	e7f2      	b.n	c04 <POST+0xa8>
                beep(300);
                delay_ms(300);
            }
            delay_ms(1500);
     c1e:	480c      	ldr	r0, [pc, #48]	; (c50 <POST+0xf4>)
     c20:	47b0      	blx	r6
        }
     c22:	e7ee      	b.n	c02 <POST+0xa6>
    }
}
     c24:	b005      	add	sp, #20
     c26:	bdf0      	pop	{r4, r5, r6, r7, pc}
     c28:	00000581 	.word	0x00000581
     c2c:	2000063e 	.word	0x2000063e
     c30:	41004400 	.word	0x41004400
     c34:	00002a29 	.word	0x00002a29
     c38:	00002a41 	.word	0x00002a41
     c3c:	41004494 	.word	0x41004494
     c40:	00002a11 	.word	0x00002a11
     c44:	41004498 	.word	0x41004498
     c48:	00000fc9 	.word	0x00000fc9
     c4c:	00000d39 	.word	0x00000d39
     c50:	000005dc 	.word	0x000005dc

00000c54 <adcInit>:
#include <util.h>

void adcInit() {

    // set up clock
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;
     c54:	2180      	movs	r1, #128	; 0x80


#include <util.h>

void adcInit() {
     c56:	b510      	push	{r4, lr}

    // set up clock
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;
     c58:	4a10      	ldr	r2, [pc, #64]	; (c9c <adcInit+0x48>)
     c5a:	0249      	lsls	r1, r1, #9
     c5c:	6a13      	ldr	r3, [r2, #32]
    // divide prescaler by 512 (93.75KHz), max adc freq is 2.1MHz
    ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |
                     ADC_CTRLB_RESSEL_12BIT;

    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
     c5e:	4810      	ldr	r0, [pc, #64]	; (ca0 <adcInit+0x4c>)
#include <util.h>

void adcInit() {

    // set up clock
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;
     c60:	430b      	orrs	r3, r1
     c62:	6213      	str	r3, [r2, #32]

    // divide prescaler by 512 (93.75KHz), max adc freq is 2.1MHz
    ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |
     c64:	23e0      	movs	r3, #224	; 0xe0
     c66:	490f      	ldr	r1, [pc, #60]	; (ca4 <adcInit+0x50>)
                     ADC_CTRLB_RESSEL_12BIT;

    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
     c68:	4a0f      	ldr	r2, [pc, #60]	; (ca8 <adcInit+0x54>)

    // set up clock
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;

    // divide prescaler by 512 (93.75KHz), max adc freq is 2.1MHz
    ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |
     c6a:	00db      	lsls	r3, r3, #3
     c6c:	808b      	strh	r3, [r1, #4]
                     ADC_CTRLB_RESSEL_12BIT;

    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
     c6e:	8050      	strh	r0, [r2, #2]
                        GCLK_CLKCTRL_GEN(0) |
                        GCLK_CLKCTRL_ID(ADC_GCLK_ID);

    ADC->CALIB.reg =
        ADC_CALIB_BIAS_CAL(
     c70:	4a0e      	ldr	r2, [pc, #56]	; (cac <adcInit+0x58>)
    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(0) |
                        GCLK_CLKCTRL_ID(ADC_GCLK_ID);

    ADC->CALIB.reg =
     c72:	6812      	ldr	r2, [r2, #0]
     c74:	0150      	lsls	r0, r2, #5
     c76:	4018      	ands	r0, r3
     c78:	4b0d      	ldr	r3, [pc, #52]	; (cb0 <adcInit+0x5c>)
     c7a:	0154      	lsls	r4, r2, #5
     c7c:	681a      	ldr	r2, [r3, #0]
     c7e:	0ed3      	lsrs	r3, r2, #27
     c80:	4323      	orrs	r3, r4
     c82:	b2da      	uxtb	r2, r3
     c84:	0003      	movs	r3, r0
     c86:	4313      	orrs	r3, r2
     c88:	850b      	strh	r3, [r1, #40]	; 0x28
        ) |
        ADC_CALIB_LINEARITY_CAL(
            (*(uint64_t *)ADC_FUSES_LINEARITY_0_ADDR >> ADC_FUSES_LINEARITY_0_Pos)
        );

    ADC->REFCTRL.reg = ADC_REFCTRL_REFSEL_INTVCC1;
     c8a:	2302      	movs	r3, #2
     c8c:	704b      	strb	r3, [r1, #1]

    ADC->CTRLA.reg = ADC_CTRLA_ENABLE; // enable
     c8e:	700b      	strb	r3, [r1, #0]
    while(ADC->STATUS.reg & ADC_STATUS_SYNCBUSY);
     c90:	7e4b      	ldrb	r3, [r1, #25]
     c92:	b25b      	sxtb	r3, r3
     c94:	2b00      	cmp	r3, #0
     c96:	dbfb      	blt.n	c90 <adcInit+0x3c>
}
     c98:	bd10      	pop	{r4, pc}
     c9a:	46c0      	nop			; (mov r8, r8)
     c9c:	40000400 	.word	0x40000400
     ca0:	0000401e 	.word	0x0000401e
     ca4:	42004000 	.word	0x42004000
     ca8:	40000c00 	.word	0x40000c00
     cac:	00806024 	.word	0x00806024
     cb0:	00806020 	.word	0x00806020

00000cb4 <adcSample>:



u16_t adcSample() {
    ADC->SWTRIG.reg = ADC_SWTRIG_START;
     cb4:	2202      	movs	r2, #2
     cb6:	4b05      	ldr	r3, [pc, #20]	; (ccc <adcSample+0x18>)
     cb8:	731a      	strb	r2, [r3, #12]
    while(!(ADC->INTFLAG.reg & ADC_INTFLAG_RESRDY)); // wait until result is ready
     cba:	3a01      	subs	r2, #1
     cbc:	7e19      	ldrb	r1, [r3, #24]
     cbe:	4211      	tst	r1, r2
     cc0:	d0fc      	beq.n	cbc <adcSample+0x8>
    return ADC->RESULT.reg;
     cc2:	4b02      	ldr	r3, [pc, #8]	; (ccc <adcSample+0x18>)
     cc4:	8b58      	ldrh	r0, [r3, #26]
     cc6:	b280      	uxth	r0, r0
}
     cc8:	4770      	bx	lr
     cca:	46c0      	nop			; (mov r8, r8)
     ccc:	42004000 	.word	0x42004000

00000cd0 <adc_read>:


u16_t adc_read(Pin p) {
     cd0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    u16_t buad;

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
     cd2:	2501      	movs	r5, #1
     cd4:	0c02      	lsrs	r2, r0, #16
     cd6:	b2d4      	uxtb	r4, r2
     cd8:	9000      	str	r0, [sp, #0]
     cda:	0e00      	lsrs	r0, r0, #24
     cdc:	9101      	str	r1, [sp, #4]
     cde:	0842      	lsrs	r2, r0, #1
     ce0:	01e3      	lsls	r3, r4, #7
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     ce2:	4911      	ldr	r1, [pc, #68]	; (d28 <adc_read+0x58>)
     ce4:	18d2      	adds	r2, r2, r3
     ce6:	1852      	adds	r2, r2, r1
    u16_t buad;

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
     ce8:	4228      	tst	r0, r5
     cea:	d005      	beq.n	cf8 <adc_read+0x28>
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     cec:	210f      	movs	r1, #15
     cee:	7814      	ldrb	r4, [r2, #0]
     cf0:	4021      	ands	r1, r4
     cf2:	2410      	movs	r4, #16
     cf4:	4321      	orrs	r1, r4
     cf6:	e003      	b.n	d00 <adc_read+0x30>
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     cf8:	240f      	movs	r4, #15
     cfa:	7811      	ldrb	r1, [r2, #0]
     cfc:	43a1      	bics	r1, r4
     cfe:	4329      	orrs	r1, r5
     d00:	7011      	strb	r1, [r2, #0]
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     d02:	2101      	movs	r1, #1
     d04:	4a09      	ldr	r2, [pc, #36]	; (d2c <adc_read+0x5c>)
     d06:	18c3      	adds	r3, r0, r3
     d08:	189b      	adds	r3, r3, r2
     d0a:	781a      	ldrb	r2, [r3, #0]
     d0c:	430a      	orrs	r2, r1
     d0e:	701a      	strb	r2, [r3, #0]
    // switch pin mux to analog in
    pinAnalog(p);

    ADC->INPUTCTRL.reg = (ADC_INPUTCTRL_MUXPOS(p.chan) // select from proper pin
                          | ADC_INPUTCTRL_MUXNEG_GND // 0 = gnd
                          | ADC_INPUTCTRL_GAIN_1X);
     d10:	466b      	mov	r3, sp
     d12:	791a      	ldrb	r2, [r3, #4]
     d14:	231f      	movs	r3, #31
     d16:	4013      	ands	r3, r2
     d18:	22c0      	movs	r2, #192	; 0xc0
     d1a:	0152      	lsls	r2, r2, #5
     d1c:	4313      	orrs	r3, r2

u16_t adc_read(Pin p) {
    // switch pin mux to analog in
    pinAnalog(p);

    ADC->INPUTCTRL.reg = (ADC_INPUTCTRL_MUXPOS(p.chan) // select from proper pin
     d1e:	4a04      	ldr	r2, [pc, #16]	; (d30 <adc_read+0x60>)
     d20:	6113      	str	r3, [r2, #16]
                          | ADC_INPUTCTRL_MUXNEG_GND // 0 = gnd
                          | ADC_INPUTCTRL_GAIN_1X);

    return adcSample();
     d22:	4b04      	ldr	r3, [pc, #16]	; (d34 <adc_read+0x64>)
     d24:	4798      	blx	r3
     d26:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
     d28:	41004430 	.word	0x41004430
     d2c:	41004440 	.word	0x41004440
     d30:	42004000 	.word	0x42004000
     d34:	00000cb5 	.word	0x00000cb5

00000d38 <beep>:
#include <util.h>
#include <boardDefines.h>


void beep(u16_t toggles) {
     d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
}


inline static void pinToggle(Pin p) {
    PORT->Group[p.group].OUTTGL.reg = (1<<p.pin);
     d3a:	2380      	movs	r3, #128	; 0x80
     d3c:	2780      	movs	r7, #128	; 0x80
     d3e:	0006      	movs	r6, r0

    pinToggle(LedPin);
    for (u16_t buzz = 0; buzz < toggles; ++buzz) {
     d40:	2500      	movs	r5, #0
     d42:	4c0a      	ldr	r4, [pc, #40]	; (d6c <beep+0x34>)
     d44:	035b      	lsls	r3, r3, #13
     d46:	61e3      	str	r3, [r4, #28]
     d48:	03bf      	lsls	r7, r7, #14
     d4a:	42b5      	cmp	r5, r6
     d4c:	d006      	beq.n	d5c <beep+0x24>
     d4e:	61e7      	str	r7, [r4, #28]
        pinToggle(buzzerPin);
        delay_us(122);
     d50:	207a      	movs	r0, #122	; 0x7a
     d52:	4b07      	ldr	r3, [pc, #28]	; (d70 <beep+0x38>)


void beep(u16_t toggles) {

    pinToggle(LedPin);
    for (u16_t buzz = 0; buzz < toggles; ++buzz) {
     d54:	3501      	adds	r5, #1
        pinToggle(buzzerPin);
        delay_us(122);
     d56:	4798      	blx	r3


void beep(u16_t toggles) {

    pinToggle(LedPin);
    for (u16_t buzz = 0; buzz < toggles; ++buzz) {
     d58:	b2ad      	uxth	r5, r5
     d5a:	e7f6      	b.n	d4a <beep+0x12>
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     d5c:	2380      	movs	r3, #128	; 0x80
     d5e:	039b      	lsls	r3, r3, #14
     d60:	6163      	str	r3, [r4, #20]
}


inline static void pinToggle(Pin p) {
    PORT->Group[p.group].OUTTGL.reg = (1<<p.pin);
     d62:	2380      	movs	r3, #128	; 0x80
     d64:	035b      	lsls	r3, r3, #13
     d66:	61e3      	str	r3, [r4, #28]
        pinToggle(buzzerPin);
        delay_us(122);
    }
    pinLow(buzzerPin);
    pinToggle(LedPin);
}
     d68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     d6a:	46c0      	nop			; (mov r8, r8)
     d6c:	41004400 	.word	0x41004400
     d70:	00000f99 	.word	0x00000f99

00000d74 <startupJingle>:

void startupJingle(){
     d74:	b570      	push	{r4, r5, r6, lr}
    beep(300);
     d76:	2696      	movs	r6, #150	; 0x96
     d78:	0076      	lsls	r6, r6, #1
     d7a:	4d0a      	ldr	r5, [pc, #40]	; (da4 <startupJingle+0x30>)
     d7c:	0030      	movs	r0, r6
     d7e:	47a8      	blx	r5
    delay_ms(80);
     d80:	4c09      	ldr	r4, [pc, #36]	; (da8 <startupJingle+0x34>)
     d82:	2050      	movs	r0, #80	; 0x50
     d84:	47a0      	blx	r4
    beep(300);
     d86:	0030      	movs	r0, r6
     d88:	47a8      	blx	r5
    delay_ms(250);
     d8a:	20fa      	movs	r0, #250	; 0xfa
     d8c:	47a0      	blx	r4
    beep(300);
     d8e:	0030      	movs	r0, r6
     d90:	47a8      	blx	r5
    delay_ms(80);
     d92:	2050      	movs	r0, #80	; 0x50
     d94:	47a0      	blx	r4
    beep(300);
     d96:	0030      	movs	r0, r6
     d98:	47a8      	blx	r5
    delay_ms(500);
     d9a:	20fa      	movs	r0, #250	; 0xfa
     d9c:	0040      	lsls	r0, r0, #1
     d9e:	47a0      	blx	r4
}
     da0:	bd70      	pop	{r4, r5, r6, pc}
     da2:	46c0      	nop			; (mov r8, r8)
     da4:	00000d39 	.word	0x00000d39
     da8:	00000fc9 	.word	0x00000fc9

00000dac <unpluggedJingle>:

void unpluggedJingle(){
     dac:	b570      	push	{r4, r5, r6, lr}
            delay_ms(80);
            beep(300);
     dae:	2696      	movs	r6, #150	; 0x96
    beep(300);
    delay_ms(500);
}

void unpluggedJingle(){
            delay_ms(80);
     db0:	4c0c      	ldr	r4, [pc, #48]	; (de4 <unpluggedJingle+0x38>)
            beep(300);
     db2:	0076      	lsls	r6, r6, #1
    beep(300);
    delay_ms(500);
}

void unpluggedJingle(){
            delay_ms(80);
     db4:	2050      	movs	r0, #80	; 0x50
     db6:	47a0      	blx	r4
            beep(300);
     db8:	4d0b      	ldr	r5, [pc, #44]	; (de8 <unpluggedJingle+0x3c>)
     dba:	0030      	movs	r0, r6
     dbc:	47a8      	blx	r5
            delay_ms(80);
     dbe:	2050      	movs	r0, #80	; 0x50
     dc0:	47a0      	blx	r4
            beep(300);
     dc2:	0030      	movs	r0, r6
     dc4:	47a8      	blx	r5
            delay_ms(80);
     dc6:	2050      	movs	r0, #80	; 0x50
     dc8:	47a0      	blx	r4
            beep(300);
     dca:	0030      	movs	r0, r6
     dcc:	47a8      	blx	r5
            delay_ms(80);
     dce:	2050      	movs	r0, #80	; 0x50
     dd0:	47a0      	blx	r4
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     dd2:	2280      	movs	r2, #128	; 0x80
     dd4:	4b05      	ldr	r3, [pc, #20]	; (dec <unpluggedJingle+0x40>)
     dd6:	0392      	lsls	r2, r2, #14
     dd8:	615a      	str	r2, [r3, #20]
     dda:	2280      	movs	r2, #128	; 0x80
     ddc:	0352      	lsls	r2, r2, #13
     dde:	615a      	str	r2, [r3, #20]
            pinLow(buzzerPin);
            pinLow(LedPin);

}
     de0:	bd70      	pop	{r4, r5, r6, pc}
     de2:	46c0      	nop			; (mov r8, r8)
     de4:	00000fc9 	.word	0x00000fc9
     de8:	00000d39 	.word	0x00000d39
     dec:	41004400 	.word	0x41004400

00000df0 <GclkInit>:
static uint32_t cycles_per_us = 48000000UL / 1000000;

void GclkInit() {


    SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     df0:	23c2      	movs	r3, #194	; 0xc2
                           SYSCTRL_INTFLAG_DFLLRDY;
    NVMCTRL->CTRLB.reg |= NVMCTRL_CTRLB_RWS_HALF;
     df2:	2002      	movs	r0, #2


static uint32_t cycles_per_ms = 48000000UL / 1000;
static uint32_t cycles_per_us = 48000000UL / 1000000;

void GclkInit() {
     df4:	b510      	push	{r4, lr}


    SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     df6:	4916      	ldr	r1, [pc, #88]	; (e50 <GclkInit+0x60>)
                           SYSCTRL_INTFLAG_DFLLRDY;
    NVMCTRL->CTRLB.reg |= NVMCTRL_CTRLB_RWS_HALF;
     df8:	4a16      	ldr	r2, [pc, #88]	; (e54 <GclkInit+0x64>)
static uint32_t cycles_per_us = 48000000UL / 1000000;

void GclkInit() {


    SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     dfa:	00db      	lsls	r3, r3, #3
     dfc:	608b      	str	r3, [r1, #8]
                           SYSCTRL_INTFLAG_DFLLRDY;
    NVMCTRL->CTRLB.reg |= NVMCTRL_CTRLB_RWS_HALF;
     dfe:	6853      	ldr	r3, [r2, #4]
     e00:	4303      	orrs	r3, r0
     e02:	6053      	str	r3, [r2, #4]

#define NVM_DFLL_COARSE_POS    58
#define NVM_DFLL_COARSE_SIZE   6
#define NVM_DFLL_FINE_POS      64
#define NVM_DFLL_FINE_SIZE     10
    uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
     e04:	4b14      	ldr	r3, [pc, #80]	; (e58 <GclkInit+0x68>)
     e06:	681a      	ldr	r2, [r3, #0]
     e08:	0e92      	lsrs	r2, r2, #26
                         + (NVM_DFLL_COARSE_POS / 32))
                       >> (NVM_DFLL_COARSE_POS % 32))
                     & ((1 << NVM_DFLL_COARSE_SIZE) - 1);
    if (coarse == 0x3f) {
     e0a:	2a3f      	cmp	r2, #63	; 0x3f
     e0c:	d100      	bne.n	e10 <GclkInit+0x20>
        coarse = 0x1f;
     e0e:	3a20      	subs	r2, #32
    }
    uint32_t fine =( *((uint32_t *)(NVMCTRL_OTP4)
                       + (NVM_DFLL_FINE_POS / 32))
                     >> (NVM_DFLL_FINE_POS % 32))
     e10:	4b12      	ldr	r3, [pc, #72]	; (e5c <GclkInit+0x6c>)
                   & ((1 << NVM_DFLL_FINE_SIZE) - 1);
    if (fine == 0x3ff) {
     e12:	4813      	ldr	r0, [pc, #76]	; (e60 <GclkInit+0x70>)
                       >> (NVM_DFLL_COARSE_POS % 32))
                     & ((1 << NVM_DFLL_COARSE_SIZE) - 1);
    if (coarse == 0x3f) {
        coarse = 0x1f;
    }
    uint32_t fine =( *((uint32_t *)(NVMCTRL_OTP4)
     e14:	681b      	ldr	r3, [r3, #0]
     e16:	059b      	lsls	r3, r3, #22
     e18:	0d9b      	lsrs	r3, r3, #22
                       + (NVM_DFLL_FINE_POS / 32))
                     >> (NVM_DFLL_FINE_POS % 32))
                   & ((1 << NVM_DFLL_FINE_SIZE) - 1);
    if (fine == 0x3ff) {
     e1a:	4283      	cmp	r3, r0
     e1c:	d100      	bne.n	e20 <GclkInit+0x30>
        fine = 0x1ff;
     e1e:	4b11      	ldr	r3, [pc, #68]	; (e64 <GclkInit+0x74>)
    }


    // Disable ONDEMAND mode while writing configurations (errata 9905)
    SYSCTRL->DFLLCTRL.reg = dfll_ctrl_usb & ~SYSCTRL_DFLLCTRL_ONDEMAND;
     e20:	4811      	ldr	r0, [pc, #68]	; (e68 <GclkInit+0x78>)
     e22:	8488      	strh	r0, [r1, #36]	; 0x24
    while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_DFLLRDY)) == 0);
     e24:	2010      	movs	r0, #16
     e26:	68cc      	ldr	r4, [r1, #12]
     e28:	4204      	tst	r4, r0
     e2a:	d0fc      	beq.n	e26 <GclkInit+0x36>
    SYSCTRL->DFLLVAL.reg = SYSCTRL_DFLLVAL_COARSE(coarse) | SYSCTRL_DFLLVAL_FINE(fine);
     e2c:	0292      	lsls	r2, r2, #10
     e2e:	4313      	orrs	r3, r2
     e30:	4a07      	ldr	r2, [pc, #28]	; (e50 <GclkInit+0x60>)
     e32:	6293      	str	r3, [r2, #40]	; 0x28


    //Wait and see if the DFLL output is good . . .
    while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_DFLLRDY)) == 0);
     e34:	2310      	movs	r3, #16
     e36:	68ca      	ldr	r2, [r1, #12]
     e38:	421a      	tst	r2, r3
     e3a:	d0fc      	beq.n	e36 <GclkInit+0x46>


    SYSCTRL->DFLLCTRL.reg = dfll_ctrl_usb;
     e3c:	4a0b      	ldr	r2, [pc, #44]	; (e6c <GclkInit+0x7c>)
     e3e:	4b04      	ldr	r3, [pc, #16]	; (e50 <GclkInit+0x60>)
     e40:	849a      	strh	r2, [r3, #36]	; 0x24


    //For generic clock generator 0, select the DFLL48 Clock as input
    GCLK->GENDIV.reg  = (GCLK_GENDIV_DIV(1)  | GCLK_GENDIV_ID(0));
     e42:	2280      	movs	r2, #128	; 0x80
     e44:	4b0a      	ldr	r3, [pc, #40]	; (e70 <GclkInit+0x80>)
     e46:	0052      	lsls	r2, r2, #1
     e48:	609a      	str	r2, [r3, #8]
    GCLK->GENCTRL.reg = (GCLK_GENCTRL_ID(0)  | (GCLK_GENCTRL_SRC_DFLL48M) | (GCLK_GENCTRL_GENEN));
     e4a:	4a0a      	ldr	r2, [pc, #40]	; (e74 <GclkInit+0x84>)
     e4c:	605a      	str	r2, [r3, #4]
}
     e4e:	bd10      	pop	{r4, pc}
     e50:	40000800 	.word	0x40000800
     e54:	41004000 	.word	0x41004000
     e58:	00806024 	.word	0x00806024
     e5c:	00806028 	.word	0x00806028
     e60:	000003ff 	.word	0x000003ff
     e64:	000001ff 	.word	0x000001ff
     e68:	00000522 	.word	0x00000522
     e6c:	000005a2 	.word	0x000005a2
     e70:	40000c00 	.word	0x40000c00
     e74:	00010700 	.word	0x00010700

00000e78 <RtcInit>:
        //wait for crystal to warm up
        while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_OSC32KRDY)) == 0);

    */

    SYSCTRL->OSC32K.reg = SYSCTRL_OSC32K_ENABLE |
     e78:	4b27      	ldr	r3, [pc, #156]	; (f18 <RtcInit+0xa0>)
     e7a:	4a28      	ldr	r2, [pc, #160]	; (f1c <RtcInit+0xa4>)
                          SYSCTRL_OSC32K_EN32K |
                          ( 6 << SYSCTRL_OSC32K_STARTUP_Pos);


    SYSCTRL->OSC32K.bit.CALIB =
     e7c:	4828      	ldr	r0, [pc, #160]	; (f20 <RtcInit+0xa8>)
        //wait for crystal to warm up
        while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_OSC32KRDY)) == 0);

    */

    SYSCTRL->OSC32K.reg = SYSCTRL_OSC32K_ENABLE |
     e7e:	619a      	str	r2, [r3, #24]
                          SYSCTRL_OSC32K_EN32K |
                          ( 6 << SYSCTRL_OSC32K_STARTUP_Pos);


    SYSCTRL->OSC32K.bit.CALIB =
        ((*(uint32_t *)FUSES_OSC32K_CAL_ADDR >>
     e80:	4a28      	ldr	r2, [pc, #160]	; (f24 <RtcInit+0xac>)
    SYSCTRL->OSC32K.reg = SYSCTRL_OSC32K_ENABLE |
                          SYSCTRL_OSC32K_EN32K |
                          ( 6 << SYSCTRL_OSC32K_STARTUP_Pos);


    SYSCTRL->OSC32K.bit.CALIB =
     e82:	6999      	ldr	r1, [r3, #24]
     e84:	6812      	ldr	r2, [r2, #0]
     e86:	4001      	ands	r1, r0
     e88:	04d2      	lsls	r2, r2, #19
     e8a:	0e52      	lsrs	r2, r2, #25
     e8c:	0412      	lsls	r2, r2, #16
     e8e:	4311      	orrs	r1, r2
     e90:	6199      	str	r1, [r3, #24]
        ((*(uint32_t *)FUSES_OSC32K_CAL_ADDR >>
          FUSES_OSC32K_CAL_Pos) & 0x7Ful);

    SYSCTRL->OSC32K.reg = SYSCTRL_OSC32K_STARTUP( 0x6u ) | // cf table 15.10 of product datasheet in chapter 15.8.6
     e92:	4925      	ldr	r1, [pc, #148]	; (f28 <RtcInit+0xb0>)
     e94:	6199      	str	r1, [r3, #24]
                          SYSCTRL_OSC32K_EN32K;
    SYSCTRL->OSC32K.bit.CALIB =
     e96:	6999      	ldr	r1, [r3, #24]
     e98:	4008      	ands	r0, r1
        ((*(uint32_t *)FUSES_OSC32K_CAL_ADDR >>
          FUSES_OSC32K_CAL_Pos) & 0x7Ful);



    SYSCTRL->OSC32K.bit.ENABLE = 1; // separate call, as described in chapter 15.6.3
     e9a:	2102      	movs	r1, #2
        ((*(uint32_t *)FUSES_OSC32K_CAL_ADDR >>
          FUSES_OSC32K_CAL_Pos) & 0x7Ful);

    SYSCTRL->OSC32K.reg = SYSCTRL_OSC32K_STARTUP( 0x6u ) | // cf table 15.10 of product datasheet in chapter 15.8.6
                          SYSCTRL_OSC32K_EN32K;
    SYSCTRL->OSC32K.bit.CALIB =
     e9c:	4302      	orrs	r2, r0
     e9e:	619a      	str	r2, [r3, #24]
        ((*(uint32_t *)FUSES_OSC32K_CAL_ADDR >>
          FUSES_OSC32K_CAL_Pos) & 0x7Ful);



    SYSCTRL->OSC32K.bit.ENABLE = 1; // separate call, as described in chapter 15.6.3
     ea0:	699a      	ldr	r2, [r3, #24]
     ea2:	430a      	orrs	r2, r1
     ea4:	619a      	str	r2, [r3, #24]

    while (  (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_OSC32KRDY) == 0 ) {
     ea6:	2204      	movs	r2, #4
     ea8:	68d9      	ldr	r1, [r3, #12]
     eaa:	4211      	tst	r1, r2
     eac:	d0fc      	beq.n	ea8 <RtcInit+0x30>





    GCLK->GENDIV.reg = GCLK_GENDIV_ID(2) | GCLK_GENDIV_DIV(1);
     eae:	2281      	movs	r2, #129	; 0x81
     eb0:	4b1e      	ldr	r3, [pc, #120]	; (f2c <RtcInit+0xb4>)
     eb2:	0052      	lsls	r2, r2, #1
     eb4:	609a      	str	r2, [r3, #8]

    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(2) |
     eb6:	4a1e      	ldr	r2, [pc, #120]	; (f30 <RtcInit+0xb8>)
     eb8:	605a      	str	r2, [r3, #4]
                        GCLK_GENCTRL_SRC(GCLK_GENCTRL_SRC_OSC32K) |
                        GCLK_GENCTRL_IDC |
                        GCLK_GENCTRL_RUNSTDBY |
                        GCLK_GENCTRL_GENEN;
    while (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY);
     eba:	785a      	ldrb	r2, [r3, #1]
     ebc:	b252      	sxtb	r2, r2
     ebe:	2a00      	cmp	r2, #0
     ec0:	dbfb      	blt.n	eba <RtcInit+0x42>

// Configure RTC
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(RTC_GCLK_ID) |
     ec2:	4a1c      	ldr	r2, [pc, #112]	; (f34 <RtcInit+0xbc>)
     ec4:	4b19      	ldr	r3, [pc, #100]	; (f2c <RtcInit+0xb4>)
     ec6:	805a      	strh	r2, [r3, #2]
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    RTC->MODE1.CTRL.reg = RTC_MODE1_CTRL_MODE_COUNT16;
     ec8:	2204      	movs	r2, #4
     eca:	4b1b      	ldr	r3, [pc, #108]	; (f38 <RtcInit+0xc0>)
     ecc:	801a      	strh	r2, [r3, #0]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     ece:	7a9a      	ldrb	r2, [r3, #10]
     ed0:	4919      	ldr	r1, [pc, #100]	; (f38 <RtcInit+0xc0>)
     ed2:	09d2      	lsrs	r2, r2, #7
     ed4:	d1fb      	bne.n	ece <RtcInit+0x56>

// Prescaler needs to be enabled separately from the mode for some reason
    RTC->MODE1.CTRL.reg |= RTC_MODE1_CTRL_PRESCALER_DIV32;
     ed6:	20a0      	movs	r0, #160	; 0xa0
     ed8:	880a      	ldrh	r2, [r1, #0]
     eda:	00c0      	lsls	r0, r0, #3
     edc:	4302      	orrs	r2, r0
     ede:	800a      	strh	r2, [r1, #0]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     ee0:	7a9a      	ldrb	r2, [r3, #10]
     ee2:	09d2      	lsrs	r2, r2, #7
     ee4:	d1fc      	bne.n	ee0 <RtcInit+0x68>

    RTC->MODE1.PER.reg = 998;
     ee6:	4915      	ldr	r1, [pc, #84]	; (f3c <RtcInit+0xc4>)
     ee8:	4a13      	ldr	r2, [pc, #76]	; (f38 <RtcInit+0xc0>)
     eea:	8291      	strh	r1, [r2, #20]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     eec:	7a99      	ldrb	r1, [r3, #10]
     eee:	4a12      	ldr	r2, [pc, #72]	; (f38 <RtcInit+0xc0>)
     ef0:	09c9      	lsrs	r1, r1, #7
     ef2:	d1fb      	bne.n	eec <RtcInit+0x74>

    RTC->MODE1.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_ADDR(0x10);
     ef4:	8851      	ldrh	r1, [r2, #2]
     ef6:	4812      	ldr	r0, [pc, #72]	; (f40 <RtcInit+0xc8>)
     ef8:	4301      	orrs	r1, r0
     efa:	8051      	strh	r1, [r2, #2]

    RTC->MODE1.INTENSET.reg = RTC_MODE1_INTENSET_OVF;
     efc:	2180      	movs	r1, #128	; 0x80

    RTC->MODE1.CTRL.bit.ENABLE = 1;
     efe:	2002      	movs	r0, #2
    RTC->MODE1.PER.reg = 998;
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);

    RTC->MODE1.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_ADDR(0x10);

    RTC->MODE1.INTENSET.reg = RTC_MODE1_INTENSET_OVF;
     f00:	71d1      	strb	r1, [r2, #7]

    RTC->MODE1.CTRL.bit.ENABLE = 1;
     f02:	8811      	ldrh	r1, [r2, #0]
     f04:	4301      	orrs	r1, r0
     f06:	8011      	strh	r1, [r2, #0]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     f08:	7a9a      	ldrb	r2, [r3, #10]
     f0a:	09d2      	lsrs	r2, r2, #7
     f0c:	d1fc      	bne.n	f08 <RtcInit+0x90>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     f0e:	4b0d      	ldr	r3, [pc, #52]	; (f44 <RtcInit+0xcc>)
     f10:	3208      	adds	r2, #8
     f12:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(RTC_IRQn);
}
     f14:	4770      	bx	lr
     f16:	46c0      	nop			; (mov r8, r8)
     f18:	40000800 	.word	0x40000800
     f1c:	00000606 	.word	0x00000606
     f20:	ff80ffff 	.word	0xff80ffff
     f24:	00806024 	.word	0x00806024
     f28:	00000604 	.word	0x00000604
     f2c:	40000c00 	.word	0x40000c00
     f30:	00230002 	.word	0x00230002
     f34:	00004204 	.word	0x00004204
     f38:	40001400 	.word	0x40001400
     f3c:	000003e6 	.word	0x000003e6
     f40:	00004010 	.word	0x00004010
     f44:	e000e100 	.word	0xe000e100

00000f48 <gclkEnable>:


void gclkEnable(u32_t id, u32_t src, u32_t div) {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
     f48:	230f      	movs	r3, #15
     f4a:	4018      	ands	r0, r3
     f4c:	4b08      	ldr	r3, [pc, #32]	; (f70 <gclkEnable+0x28>)
     f4e:	0212      	lsls	r2, r2, #8
     f50:	401a      	ands	r2, r3
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     f52:	23f8      	movs	r3, #248	; 0xf8
     f54:	0209      	lsls	r1, r1, #8
     f56:	015b      	lsls	r3, r3, #5
     f58:	4019      	ands	r1, r3
     f5a:	2380      	movs	r3, #128	; 0x80

    NVIC_EnableIRQ(RTC_IRQn);
}


void gclkEnable(u32_t id, u32_t src, u32_t div) {
     f5c:	b510      	push	{r4, lr}
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     f5e:	025b      	lsls	r3, r3, #9
    NVIC_EnableIRQ(RTC_IRQn);
}


void gclkEnable(u32_t id, u32_t src, u32_t div) {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
     f60:	4c04      	ldr	r4, [pc, #16]	; (f74 <gclkEnable+0x2c>)
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     f62:	4319      	orrs	r1, r3
    NVIC_EnableIRQ(RTC_IRQn);
}


void gclkEnable(u32_t id, u32_t src, u32_t div) {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
     f64:	4302      	orrs	r2, r0
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     f66:	4308      	orrs	r0, r1
    NVIC_EnableIRQ(RTC_IRQn);
}


void gclkEnable(u32_t id, u32_t src, u32_t div) {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
     f68:	60a2      	str	r2, [r4, #8]
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     f6a:	6060      	str	r0, [r4, #4]
}
     f6c:	bd10      	pop	{r4, pc}
     f6e:	46c0      	nop			; (mov r8, r8)
     f70:	00ffff00 	.word	0x00ffff00
     f74:	40000c00 	.word	0x40000c00

00000f78 <delayInit>:


void delayInit(void) {
    cycles_per_ms = 48000000UL;
    cycles_per_ms /= 1000;
     f78:	4b04      	ldr	r3, [pc, #16]	; (f8c <delayInit+0x14>)
     f7a:	4a05      	ldr	r2, [pc, #20]	; (f90 <delayInit+0x18>)
     f7c:	601a      	str	r2, [r3, #0]
    cycles_per_us = cycles_per_ms / 1000;
     f7e:	2230      	movs	r2, #48	; 0x30
     f80:	605a      	str	r2, [r3, #4]

    SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     f82:	4b04      	ldr	r3, [pc, #16]	; (f94 <delayInit+0x1c>)
     f84:	3a2b      	subs	r2, #43	; 0x2b
     f86:	601a      	str	r2, [r3, #0]
}
     f88:	4770      	bx	lr
     f8a:	46c0      	nop			; (mov r8, r8)
     f8c:	20000004 	.word	0x20000004
     f90:	0000bb80 	.word	0x0000bb80
     f94:	e000e010 	.word	0xe000e010

00000f98 <delay_us>:
/**
 * \brief Delay loop to delay at least n number of microseconds
 *
 * \param n  Number of microseconds to wait
 */
void delay_us(uint32_t n) {
     f98:	b570      	push	{r4, r5, r6, lr}
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
        SysTick->VAL = 0;

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     f9a:	2480      	movs	r4, #128	; 0x80

static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
        SysTick->VAL = 0;
     f9c:	2100      	movs	r1, #0
    while (n--) {
        /* Devide up to blocks of 10u */
        delay_cycles(cycles_per_us);
     f9e:	4b08      	ldr	r3, [pc, #32]	; (fc0 <delay_us+0x28>)


static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
     fa0:	4a08      	ldr	r2, [pc, #32]	; (fc4 <delay_us+0x2c>)
     fa2:	685b      	ldr	r3, [r3, #4]
        SysTick->VAL = 0;

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     fa4:	0264      	lsls	r4, r4, #9
 * \brief Delay loop to delay at least n number of microseconds
 *
 * \param n  Number of microseconds to wait
 */
void delay_us(uint32_t n) {
    while (n--) {
     fa6:	3801      	subs	r0, #1
     fa8:	d308      	bcc.n	fbc <delay_us+0x24>



static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
     faa:	2b00      	cmp	r3, #0
     fac:	d0fb      	beq.n	fa6 <delay_us+0xe>
     fae:	4e05      	ldr	r6, [pc, #20]	; (fc4 <delay_us+0x2c>)
        SysTick->LOAD = n;
     fb0:	6053      	str	r3, [r2, #4]
        SysTick->VAL = 0;
     fb2:	6091      	str	r1, [r2, #8]

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     fb4:	6835      	ldr	r5, [r6, #0]
     fb6:	4225      	tst	r5, r4
     fb8:	d0fc      	beq.n	fb4 <delay_us+0x1c>
     fba:	e7f4      	b.n	fa6 <delay_us+0xe>
        /* Devide up to blocks of 10u */
        delay_cycles(cycles_per_us);
    }
}
     fbc:	bd70      	pop	{r4, r5, r6, pc}
     fbe:	46c0      	nop			; (mov r8, r8)
     fc0:	20000004 	.word	0x20000004
     fc4:	e000e010 	.word	0xe000e010

00000fc8 <delay_ms>:
/**
 * \brief Delay loop to delay at least n number of milliseconds
 *
 * \param n  Number of milliseconds to wait
 */
void delay_ms(uint32_t n) {
     fc8:	b570      	push	{r4, r5, r6, lr}
     fca:	2480      	movs	r4, #128	; 0x80

static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
        SysTick->VAL = 0;
     fcc:	2100      	movs	r1, #0
    while (n--) {
        /* Devide up to blocks of 1ms */
        delay_cycles(cycles_per_ms);
     fce:	4b08      	ldr	r3, [pc, #32]	; (ff0 <delay_ms+0x28>)


static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
     fd0:	4a08      	ldr	r2, [pc, #32]	; (ff4 <delay_ms+0x2c>)
     fd2:	681b      	ldr	r3, [r3, #0]
        SysTick->VAL = 0;

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     fd4:	0264      	lsls	r4, r4, #9
 * \brief Delay loop to delay at least n number of milliseconds
 *
 * \param n  Number of milliseconds to wait
 */
void delay_ms(uint32_t n) {
    while (n--) {
     fd6:	3801      	subs	r0, #1
     fd8:	d308      	bcc.n	fec <delay_ms+0x24>



static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
     fda:	2b00      	cmp	r3, #0
     fdc:	d0fb      	beq.n	fd6 <delay_ms+0xe>
     fde:	4e05      	ldr	r6, [pc, #20]	; (ff4 <delay_ms+0x2c>)
        SysTick->LOAD = n;
     fe0:	6053      	str	r3, [r2, #4]
        SysTick->VAL = 0;
     fe2:	6091      	str	r1, [r2, #8]

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     fe4:	6835      	ldr	r5, [r6, #0]
     fe6:	4225      	tst	r5, r4
     fe8:	d0fc      	beq.n	fe4 <delay_ms+0x1c>
     fea:	e7f4      	b.n	fd6 <delay_ms+0xe>
        /* Devide up to blocks of 1ms */
        delay_cycles(cycles_per_ms);
    }
}
     fec:	bd70      	pop	{r4, r5, r6, pc}
     fee:	46c0      	nop			; (mov r8, r8)
     ff0:	20000004 	.word	0x20000004
     ff4:	e000e010 	.word	0xe000e010

00000ff8 <RTC_Handler>:


volatile uint32_t time_ms = 0;

void RTC_Handler(void) {
    time_ms += 1000;
     ff8:	21fa      	movs	r1, #250	; 0xfa
     ffa:	4a04      	ldr	r2, [pc, #16]	; (100c <RTC_Handler+0x14>)
     ffc:	0089      	lsls	r1, r1, #2
     ffe:	6813      	ldr	r3, [r2, #0]
    1000:	185b      	adds	r3, r3, r1
    1002:	6013      	str	r3, [r2, #0]
    RTC->MODE1.INTFLAG.reg = 0xFF;
    1004:	22ff      	movs	r2, #255	; 0xff
    1006:	4b02      	ldr	r3, [pc, #8]	; (1010 <RTC_Handler+0x18>)
    1008:	721a      	strb	r2, [r3, #8]
}
    100a:	4770      	bx	lr
    100c:	200004c4 	.word	0x200004c4
    1010:	40001400 	.word	0x40001400

00001014 <millis>:

uint32_t millis(void) {
    1014:	b530      	push	{r4, r5, lr}
    uint32_t ms;
    ATOMIC_SECTION_ENTER
    1016:	f3ef 8110 	mrs	r1, PRIMASK
    101a:	b672      	cpsid	i
    ms = time_ms + RTC->MODE1.COUNT.reg;
    101c:	4a08      	ldr	r2, [pc, #32]	; (1040 <millis+0x2c>)
    101e:	4d09      	ldr	r5, [pc, #36]	; (1044 <millis+0x30>)
    1020:	8a10      	ldrh	r0, [r2, #16]
    1022:	682b      	ldr	r3, [r5, #0]
    if (RTC->MODE1.INTFLAG.bit.OVF)
    1024:	7a14      	ldrb	r4, [r2, #8]
}

uint32_t millis(void) {
    uint32_t ms;
    ATOMIC_SECTION_ENTER
    ms = time_ms + RTC->MODE1.COUNT.reg;
    1026:	b280      	uxth	r0, r0
    if (RTC->MODE1.INTFLAG.bit.OVF)
    1028:	09e4      	lsrs	r4, r4, #7
    102a:	d004      	beq.n	1036 <millis+0x22>
        ms = time_ms + RTC->MODE1.COUNT.reg + 1000;
    102c:	8a13      	ldrh	r3, [r2, #16]
    102e:	22fa      	movs	r2, #250	; 0xfa
    1030:	6828      	ldr	r0, [r5, #0]
    1032:	0092      	lsls	r2, r2, #2
    1034:	1880      	adds	r0, r0, r2
    1036:	18c0      	adds	r0, r0, r3
    ATOMIC_SECTION_LEAVE
    1038:	f381 8810 	msr	PRIMASK, r1
    return ms;
}
    103c:	bd30      	pop	{r4, r5, pc}
    103e:	46c0      	nop			; (mov r8, r8)
    1040:	40001400 	.word	0x40001400
    1044:	200004c4 	.word	0x200004c4

00001048 <TC4Init>:

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC4_GCLK_ID) |
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC4;
    1048:	2180      	movs	r1, #128	; 0x80
    return ms;
}

void TC4Init() {

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC4_GCLK_ID) |
    104a:	4a0d      	ldr	r2, [pc, #52]	; (1080 <TC4Init+0x38>)
    104c:	4b0d      	ldr	r3, [pc, #52]	; (1084 <TC4Init+0x3c>)
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC4;
    104e:	0149      	lsls	r1, r1, #5
    return ms;
}

void TC4Init() {

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC4_GCLK_ID) |
    1050:	805a      	strh	r2, [r3, #2]
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC4;
    1052:	4a0d      	ldr	r2, [pc, #52]	; (1088 <TC4Init+0x40>)
    1054:	6a13      	ldr	r3, [r2, #32]
    1056:	430b      	orrs	r3, r1
    1058:	6213      	str	r3, [r2, #32]

    TC4->COUNT8.CTRLA.reg = TC_CTRLA_MODE_COUNT8 |
    105a:	4b0c      	ldr	r3, [pc, #48]	; (108c <TC4Init+0x44>)
    105c:	4a0c      	ldr	r2, [pc, #48]	; (1090 <TC4Init+0x48>)

    TC4->COUNT8.INTENSET.reg = TC_INTENSET_OVF;

    TC4->COUNT8.EVCTRL.reg = TC_EVCTRL_OVFEO;

    TC4->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
    105e:	2102      	movs	r1, #2
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC4;

    TC4->COUNT8.CTRLA.reg = TC_CTRLA_MODE_COUNT8 |
    1060:	801a      	strh	r2, [r3, #0]
                            TC_CTRLA_RUNSTDBY |
                            TC_CTRLA_PRESCALER_DIV2;
    TC4->COUNT8.PER.reg = 0x50;
    1062:	2250      	movs	r2, #80	; 0x50
    1064:	751a      	strb	r2, [r3, #20]

    TC4->COUNT8.INTENSET.reg = TC_INTENSET_OVF;
    1066:	3a4f      	subs	r2, #79	; 0x4f
    1068:	735a      	strb	r2, [r3, #13]

    TC4->COUNT8.EVCTRL.reg = TC_EVCTRL_OVFEO;
    106a:	32ff      	adds	r2, #255	; 0xff
    106c:	815a      	strh	r2, [r3, #10]

    TC4->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
    106e:	881a      	ldrh	r2, [r3, #0]
    1070:	430a      	orrs	r2, r1
    1072:	801a      	strh	r2, [r3, #0]
    1074:	2280      	movs	r2, #128	; 0x80
    1076:	4b07      	ldr	r3, [pc, #28]	; (1094 <TC4Init+0x4c>)
    1078:	0312      	lsls	r2, r2, #12
    107a:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(TC4_IRQn);
}
    107c:	4770      	bx	lr
    107e:	46c0      	nop			; (mov r8, r8)
    1080:	0000421c 	.word	0x0000421c
    1084:	40000c00 	.word	0x40000c00
    1088:	40000400 	.word	0x40000400
    108c:	42003000 	.word	0x42003000
    1090:	00000904 	.word	0x00000904
    1094:	e000e100 	.word	0xe000e100

00001098 <TC4_Handler>:

void TC4_Handler( void ) {
    TC4->COUNT8.INTFLAG.reg = 0xFF;
    1098:	22ff      	movs	r2, #255	; 0xff
    TC4->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;

    NVIC_EnableIRQ(TC4_IRQn);
}

void TC4_Handler( void ) {
    109a:	b510      	push	{r4, lr}
    TC4->COUNT8.INTFLAG.reg = 0xFF;
    109c:	4b02      	ldr	r3, [pc, #8]	; (10a8 <TC4_Handler+0x10>)
    109e:	739a      	strb	r2, [r3, #14]
    //pinToggle(TxPo);
    pullSample();
    10a0:	4b02      	ldr	r3, [pc, #8]	; (10ac <TC4_Handler+0x14>)
    10a2:	4798      	blx	r3
}
    10a4:	bd10      	pop	{r4, pc}
    10a6:	46c0      	nop			; (mov r8, r8)
    10a8:	42003000 	.word	0x42003000
    10ac:	00002615 	.word	0x00002615

000010b0 <TC5Init>:

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC5_GCLK_ID) |
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC5;
    10b0:	2180      	movs	r1, #128	; 0x80
    pullSample();
}

void TC5Init() {

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC5_GCLK_ID) |
    10b2:	4a0d      	ldr	r2, [pc, #52]	; (10e8 <TC5Init+0x38>)
    10b4:	4b0d      	ldr	r3, [pc, #52]	; (10ec <TC5Init+0x3c>)
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC5;
    10b6:	0189      	lsls	r1, r1, #6
    pullSample();
}

void TC5Init() {

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC5_GCLK_ID) |
    10b8:	805a      	strh	r2, [r3, #2]
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC5;
    10ba:	4a0d      	ldr	r2, [pc, #52]	; (10f0 <TC5Init+0x40>)
    10bc:	6a13      	ldr	r3, [r2, #32]
    10be:	430b      	orrs	r3, r1
    10c0:	6213      	str	r3, [r2, #32]

    TC5->COUNT8.CTRLA.reg = TC_CTRLA_MODE_COUNT8 |
    10c2:	4b0c      	ldr	r3, [pc, #48]	; (10f4 <TC5Init+0x44>)
    10c4:	4a0c      	ldr	r2, [pc, #48]	; (10f8 <TC5Init+0x48>)

    TC5->COUNT8.INTENSET.reg = TC_INTENSET_OVF;

    TC5->COUNT8.EVCTRL.reg = TC_EVCTRL_OVFEO;

    TC5->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
    10c6:	2102      	movs	r1, #2
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC5;

    TC5->COUNT8.CTRLA.reg = TC_CTRLA_MODE_COUNT8 |
    10c8:	801a      	strh	r2, [r3, #0]
                            TC_CTRLA_PRESCALER_DIV16;

    u16_t logSpeed = 20; //Hz
    u8_t PER_Reg = (long)((32768/16) / logSpeed);

    TC5->COUNT8.PER.reg = PER_Reg;
    10ca:	2266      	movs	r2, #102	; 0x66
    10cc:	751a      	strb	r2, [r3, #20]

    TC5->COUNT8.INTENSET.reg = TC_INTENSET_OVF;
    10ce:	3a65      	subs	r2, #101	; 0x65
    10d0:	735a      	strb	r2, [r3, #13]

    TC5->COUNT8.EVCTRL.reg = TC_EVCTRL_OVFEO;
    10d2:	32ff      	adds	r2, #255	; 0xff
    10d4:	815a      	strh	r2, [r3, #10]

    TC5->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
    10d6:	881a      	ldrh	r2, [r3, #0]
    10d8:	430a      	orrs	r2, r1
    10da:	801a      	strh	r2, [r3, #0]
    10dc:	2280      	movs	r2, #128	; 0x80
    10de:	4b07      	ldr	r3, [pc, #28]	; (10fc <TC5Init+0x4c>)
    10e0:	0352      	lsls	r2, r2, #13
    10e2:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(TC5_IRQn);
}
    10e4:	4770      	bx	lr
    10e6:	46c0      	nop			; (mov r8, r8)
    10e8:	0000421c 	.word	0x0000421c
    10ec:	40000c00 	.word	0x40000c00
    10f0:	40000400 	.word	0x40000400
    10f4:	42003400 	.word	0x42003400
    10f8:	00000c04 	.word	0x00000c04
    10fc:	e000e100 	.word	0xe000e100

00001100 <TC5_Handler>:

void TC5_Handler( void ) {
    TC5->COUNT8.INTFLAG.reg = 0xFF;
    1100:	22ff      	movs	r2, #255	; 0xff
    1102:	4b03      	ldr	r3, [pc, #12]	; (1110 <TC5_Handler+0x10>)
    1104:	739a      	strb	r2, [r3, #14]
    

    writeLog = true;
    1106:	4b03      	ldr	r3, [pc, #12]	; (1114 <TC5_Handler+0x14>)
    1108:	3afe      	subs	r2, #254	; 0xfe
    110a:	701a      	strb	r2, [r3, #0]
}
    110c:	4770      	bx	lr
    110e:	46c0      	nop			; (mov r8, r8)
    1110:	42003400 	.word	0x42003400
    1114:	20000522 	.word	0x20000522

00001118 <flight>:
#include <boardDefines.h>

flightState_t flightState;


void flight() {
    1118:	b570      	push	{r4, r5, r6, lr}

    switch(flightState) {
    111a:	4d68      	ldr	r5, [pc, #416]	; (12bc <flight+0x1a4>)
    111c:	7828      	ldrb	r0, [r5, #0]
    111e:	280a      	cmp	r0, #10
    1120:	d900      	bls.n	1124 <flight+0xc>
    1122:	e0b9      	b.n	1298 <flight+0x180>
    1124:	f002 ff10 	bl	3f48 <__gnu_thumb1_case_uqi>
    1128:	61362306 	.word	0x61362306
    112c:	947bb8b8 	.word	0x947bb8b8
    1130:	b8b8      	.short	0xb8b8
    1132:	a6          	.byte	0xa6
    1133:	00          	.byte	0x00
    case flightStatrup:

        updateGround( );
    1134:	4b62      	ldr	r3, [pc, #392]	; (12c0 <flight+0x1a8>)
    1136:	4798      	blx	r3

        if ((millis() - startupTick) > 10000) {
    1138:	4b62      	ldr	r3, [pc, #392]	; (12c4 <flight+0x1ac>)
    113a:	4798      	blx	r3
    113c:	4b62      	ldr	r3, [pc, #392]	; (12c8 <flight+0x1b0>)
    113e:	681b      	ldr	r3, [r3, #0]
    1140:	1ac0      	subs	r0, r0, r3
    1142:	4b62      	ldr	r3, [pc, #392]	; (12cc <flight+0x1b4>)
    1144:	4298      	cmp	r0, r3
    1146:	d907      	bls.n	1158 <flight+0x40>
            findNewFlightStart( );
    1148:	4b61      	ldr	r3, [pc, #388]	; (12d0 <flight+0x1b8>)
    114a:	4798      	blx	r3
            logFlight( );
    114c:	4b61      	ldr	r3, [pc, #388]	; (12d4 <flight+0x1bc>)
    114e:	4798      	blx	r3
            startupJingle();
    1150:	4b61      	ldr	r3, [pc, #388]	; (12d8 <flight+0x1c0>)
    1152:	4798      	blx	r3
            flightState = flightTest;
    1154:	230a      	movs	r3, #10
    1156:	e08b      	b.n	1270 <flight+0x158>
            //flightState = flightPad;
            break;
        }

        attemptConnection();
    1158:	4b60      	ldr	r3, [pc, #384]	; (12dc <flight+0x1c4>)
    115a:	4798      	blx	r3

        if (unplugged()) {
    115c:	4b60      	ldr	r3, [pc, #384]	; (12e0 <flight+0x1c8>)
    115e:	4798      	blx	r3
    1160:	2800      	cmp	r0, #0
    1162:	d100      	bne.n	1166 <flight+0x4e>
    1164:	e098      	b.n	1298 <flight+0x180>
            flightState = flightIdle;
    1166:	2301      	movs	r3, #1
    1168:	702b      	strb	r3, [r5, #0]
            unpluggedJingle();
    116a:	4b5e      	ldr	r3, [pc, #376]	; (12e4 <flight+0x1cc>)
    116c:	e093      	b.n	1296 <flight+0x17e>
        //TC5->COUNT8.CTRLA.reg = 0;

        //delay_ms(1000);
        //pinToggle(LedPin);

        if (sercom(USART3)->SPI.INTFLAG.bit.RXC == 1) {
    116e:	4b5e      	ldr	r3, [pc, #376]	; (12e8 <flight+0x1d0>)
    1170:	7e1b      	ldrb	r3, [r3, #24]
    1172:	075b      	lsls	r3, r3, #29
    1174:	d400      	bmi.n	1178 <flight+0x60>
    1176:	e09d      	b.n	12b4 <flight+0x19c>
            u8_t possibleReset = usartDataIn(USART3);
    1178:	2003      	movs	r0, #3
    117a:	4b5c      	ldr	r3, [pc, #368]	; (12ec <flight+0x1d4>)
    117c:	4798      	blx	r3
            if (possibleReset == 0x52) {
    117e:	2852      	cmp	r0, #82	; 0x52
    1180:	d000      	beq.n	1184 <flight+0x6c>
    1182:	e089      	b.n	1298 <flight+0x180>
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
    1184:	f3bf 8f4f 	dsb	sy
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
    1188:	4a59      	ldr	r2, [pc, #356]	; (12f0 <flight+0x1d8>)
    118a:	4b5a      	ldr	r3, [pc, #360]	; (12f4 <flight+0x1dc>)
    118c:	60da      	str	r2, [r3, #12]
    118e:	f3bf 8f4f 	dsb	sy
    1192:	e7fe      	b.n	1192 <flight+0x7a>
        *  Accel > 2g & vel > 15ft/s
        *		 or
        *  baro alt > 100ft
        */

        updateGround();
    1194:	4b4a      	ldr	r3, [pc, #296]	; (12c0 <flight+0x1a8>)
    1196:	4798      	blx	r3

        if (writeLog) {
    1198:	4b57      	ldr	r3, [pc, #348]	; (12f8 <flight+0x1e0>)
    119a:	781b      	ldrb	r3, [r3, #0]
    119c:	2b00      	cmp	r3, #0
    119e:	d003      	beq.n	11a8 <flight+0x90>
}


inline static void pinToggle(Pin p) {
    PORT->Group[p.group].OUTTGL.reg = (1<<p.pin);
    11a0:	2280      	movs	r2, #128	; 0x80
    11a2:	4b56      	ldr	r3, [pc, #344]	; (12fc <flight+0x1e4>)
    11a4:	0352      	lsls	r2, r2, #13
    11a6:	61da      	str	r2, [r3, #28]
            //logSensors( );
            pinToggle(LedPin);
        }


        if ((( velocity > 15) && (accel > 2)) | (altitudeAGL() > 100)) {
    11a8:	4955      	ldr	r1, [pc, #340]	; (1300 <flight+0x1e8>)
    11aa:	4c56      	ldr	r4, [pc, #344]	; (1304 <flight+0x1ec>)
    11ac:	2200      	movs	r2, #0
    11ae:	6808      	ldr	r0, [r1, #0]
    11b0:	6849      	ldr	r1, [r1, #4]
    11b2:	4b55      	ldr	r3, [pc, #340]	; (1308 <flight+0x1f0>)
    11b4:	47a0      	blx	r4
    11b6:	2800      	cmp	r0, #0
    11b8:	d00c      	beq.n	11d4 <flight+0xbc>
    11ba:	2380      	movs	r3, #128	; 0x80
    11bc:	4953      	ldr	r1, [pc, #332]	; (130c <flight+0x1f4>)
    11be:	2200      	movs	r2, #0
    11c0:	6808      	ldr	r0, [r1, #0]
    11c2:	6849      	ldr	r1, [r1, #4]
    11c4:	05db      	lsls	r3, r3, #23
    11c6:	47a0      	blx	r4
    11c8:	1e44      	subs	r4, r0, #1
    11ca:	41a0      	sbcs	r0, r4
    11cc:	2401      	movs	r4, #1
    11ce:	4240      	negs	r0, r0
    11d0:	4004      	ands	r4, r0
    11d2:	e000      	b.n	11d6 <flight+0xbe>
    11d4:	0004      	movs	r4, r0
    11d6:	4b4e      	ldr	r3, [pc, #312]	; (1310 <flight+0x1f8>)
    11d8:	4798      	blx	r3
    11da:	2864      	cmp	r0, #100	; 0x64
    11dc:	dc01      	bgt.n	11e2 <flight+0xca>
    11de:	07e3      	lsls	r3, r4, #31
    11e0:	d55a      	bpl.n	1298 <flight+0x180>
            flightState = flightBoost;
    11e2:	2303      	movs	r3, #3
            logEvent('L');
    11e4:	204c      	movs	r0, #76	; 0x4c
            pinToggle(LedPin);
        }


        if ((( velocity > 15) && (accel > 2)) | (altitudeAGL() > 100)) {
            flightState = flightBoost;
    11e6:	702b      	strb	r3, [r5, #0]
    11e8:	e02f      	b.n	124a <flight+0x132>
        /*
        *	boost to fast
        *		while
        *	Accel > 1/4G
        */
        if (writeLog) {
    11ea:	4b43      	ldr	r3, [pc, #268]	; (12f8 <flight+0x1e0>)
    11ec:	781b      	ldrb	r3, [r3, #0]
    11ee:	2b00      	cmp	r3, #0
    11f0:	d001      	beq.n	11f6 <flight+0xde>
            logSensors( );
    11f2:	4b48      	ldr	r3, [pc, #288]	; (1314 <flight+0x1fc>)
    11f4:	4798      	blx	r3
        }

        if (velocity < 0) {
    11f6:	4942      	ldr	r1, [pc, #264]	; (1300 <flight+0x1e8>)
    11f8:	2200      	movs	r2, #0
    11fa:	6808      	ldr	r0, [r1, #0]
    11fc:	6849      	ldr	r1, [r1, #4]
    11fe:	2300      	movs	r3, #0
    1200:	4c45      	ldr	r4, [pc, #276]	; (1318 <flight+0x200>)
    1202:	47a0      	blx	r4
    1204:	2800      	cmp	r0, #0
    1206:	d047      	beq.n	1298 <flight+0x180>
            flightState = flightDrogue;
    1208:	2306      	movs	r3, #6
    120a:	702b      	strb	r3, [r5, #0]
            igniteDrogue();
    120c:	4b43      	ldr	r3, [pc, #268]	; (131c <flight+0x204>)
    120e:	4798      	blx	r3
            logEvent('A');
    1210:	2041      	movs	r0, #65	; 0x41
    1212:	4b43      	ldr	r3, [pc, #268]	; (1320 <flight+0x208>)
    1214:	4798      	blx	r3
            beep(100);
    1216:	2064      	movs	r0, #100	; 0x64
    1218:	4b42      	ldr	r3, [pc, #264]	; (1324 <flight+0x20c>)
    121a:	4798      	blx	r3
    121c:	e03c      	b.n	1298 <flight+0x180>


        break;
    case flightDrogue:

        if (writeLog) {
    121e:	4b36      	ldr	r3, [pc, #216]	; (12f8 <flight+0x1e0>)
    1220:	781b      	ldrb	r3, [r3, #0]
    1222:	2b00      	cmp	r3, #0
    1224:	d001      	beq.n	122a <flight+0x112>
            logSensors( );
    1226:	4b3b      	ldr	r3, [pc, #236]	; (1314 <flight+0x1fc>)
    1228:	4798      	blx	r3
        }


        if (altitude < deploymentSettings.MAIN_DEPLOY) {
    122a:	4b3f      	ldr	r3, [pc, #252]	; (1328 <flight+0x210>)
    122c:	8b18      	ldrh	r0, [r3, #24]
    122e:	4b3f      	ldr	r3, [pc, #252]	; (132c <flight+0x214>)
    1230:	4798      	blx	r3
    1232:	4b3f      	ldr	r3, [pc, #252]	; (1330 <flight+0x218>)
    1234:	4c33      	ldr	r4, [pc, #204]	; (1304 <flight+0x1ec>)
    1236:	681a      	ldr	r2, [r3, #0]
    1238:	685b      	ldr	r3, [r3, #4]
    123a:	47a0      	blx	r4
    123c:	2800      	cmp	r0, #0
    123e:	d02b      	beq.n	1298 <flight+0x180>
            flightState = flightMain;
    1240:	2307      	movs	r3, #7
    1242:	702b      	strb	r3, [r5, #0]
            igniteMain();
    1244:	4b3b      	ldr	r3, [pc, #236]	; (1334 <flight+0x21c>)
    1246:	4798      	blx	r3
            logEvent('M');
    1248:	204d      	movs	r0, #77	; 0x4d
    124a:	4b35      	ldr	r3, [pc, #212]	; (1320 <flight+0x208>)
    124c:	4798      	blx	r3
    124e:	e023      	b.n	1298 <flight+0x180>
        }

        break;
    case flightMain:

        if (writeLog) {
    1250:	4b29      	ldr	r3, [pc, #164]	; (12f8 <flight+0x1e0>)
    1252:	781b      	ldrb	r3, [r3, #0]
    1254:	2b00      	cmp	r3, #0
    1256:	d001      	beq.n	125c <flight+0x144>
            logSensors( );
    1258:	4b2e      	ldr	r3, [pc, #184]	; (1314 <flight+0x1fc>)
    125a:	4798      	blx	r3
        }

        if (velocity < 5) {
    125c:	4928      	ldr	r1, [pc, #160]	; (1300 <flight+0x1e8>)
    125e:	2200      	movs	r2, #0
    1260:	6808      	ldr	r0, [r1, #0]
    1262:	6849      	ldr	r1, [r1, #4]
    1264:	4b34      	ldr	r3, [pc, #208]	; (1338 <flight+0x220>)
    1266:	4c2c      	ldr	r4, [pc, #176]	; (1318 <flight+0x200>)
    1268:	47a0      	blx	r4
    126a:	2800      	cmp	r0, #0
    126c:	d014      	beq.n	1298 <flight+0x180>
            flightState = flightLanded;
    126e:	2308      	movs	r3, #8
    1270:	702b      	strb	r3, [r5, #0]
    1272:	e011      	b.n	1298 <flight+0x180>


        break;
    case flightTest:
        //simple continuity test
        if ( (sample.voltage.senseA + sample.voltage.senseB +sample.voltage.senseC +sample.voltage.senseD) > 200) {
    1274:	4b31      	ldr	r3, [pc, #196]	; (133c <flight+0x224>)
    1276:	8a5a      	ldrh	r2, [r3, #18]
    1278:	8a19      	ldrh	r1, [r3, #16]
    127a:	1889      	adds	r1, r1, r2
    127c:	8a9a      	ldrh	r2, [r3, #20]
    127e:	1889      	adds	r1, r1, r2
    1280:	8ada      	ldrh	r2, [r3, #22]
    1282:	188b      	adds	r3, r1, r2
    1284:	2bc8      	cmp	r3, #200	; 0xc8
    1286:	dd01      	ble.n	128c <flight+0x174>
            unpluggedJingle();
    1288:	4b16      	ldr	r3, [pc, #88]	; (12e4 <flight+0x1cc>)
    128a:	4798      	blx	r3
        }

        if (writeLog) {
    128c:	4b1a      	ldr	r3, [pc, #104]	; (12f8 <flight+0x1e0>)
    128e:	781b      	ldrb	r3, [r3, #0]
    1290:	2b00      	cmp	r3, #0
    1292:	d001      	beq.n	1298 <flight+0x180>
            logSensors( );
    1294:	4b1f      	ldr	r3, [pc, #124]	; (1314 <flight+0x1fc>)
    1296:	4798      	blx	r3
        }

        break;
    }

    if ((flightState != flightStatrup) & ((flightState != flightIdle) & unplugged())) {
    1298:	2301      	movs	r3, #1
    129a:	782c      	ldrb	r4, [r5, #0]
    129c:	42a3      	cmp	r3, r4
    129e:	41a4      	sbcs	r4, r4
    12a0:	4b0f      	ldr	r3, [pc, #60]	; (12e0 <flight+0x1c8>)
    12a2:	4264      	negs	r4, r4
    12a4:	4798      	blx	r3
    12a6:	2800      	cmp	r0, #0
    12a8:	d006      	beq.n	12b8 <flight+0x1a0>
    12aa:	2c00      	cmp	r4, #0
    12ac:	d004      	beq.n	12b8 <flight+0x1a0>
        finishFlight();
    12ae:	4b24      	ldr	r3, [pc, #144]	; (1340 <flight+0x228>)
    12b0:	4798      	blx	r3
    }

    12b2:	e001      	b.n	12b8 <flight+0x1a0>
        }

        break;
    }

    if ((flightState != flightStatrup) & ((flightState != flightIdle) & unplugged())) {
    12b4:	4b0a      	ldr	r3, [pc, #40]	; (12e0 <flight+0x1c8>)
    12b6:	4798      	blx	r3
        finishFlight();
    }

    12b8:	bd70      	pop	{r4, r5, r6, pc}
    12ba:	46c0      	nop			; (mov r8, r8)
    12bc:	200006a0 	.word	0x200006a0
    12c0:	00001345 	.word	0x00001345
    12c4:	00001015 	.word	0x00001015
    12c8:	20000524 	.word	0x20000524
    12cc:	00002710 	.word	0x00002710
    12d0:	00002559 	.word	0x00002559
    12d4:	00002275 	.word	0x00002275
    12d8:	00000d75 	.word	0x00000d75
    12dc:	00002c39 	.word	0x00002c39
    12e0:	00000b01 	.word	0x00000b01
    12e4:	00000dad 	.word	0x00000dad
    12e8:	42001400 	.word	0x42001400
    12ec:	00002a75 	.word	0x00002a75
    12f0:	05fa0004 	.word	0x05fa0004
    12f4:	e000ed00 	.word	0xe000ed00
    12f8:	20000522 	.word	0x20000522
    12fc:	41004400 	.word	0x41004400
    1300:	200006b0 	.word	0x200006b0
    1304:	00003fb1 	.word	0x00003fb1
    1308:	402e0000 	.word	0x402e0000
    130c:	200006a8 	.word	0x200006a8
    1310:	00000acd 	.word	0x00000acd
    1314:	00002325 	.word	0x00002325
    1318:	00003f89 	.word	0x00003f89
    131c:	00001691 	.word	0x00001691
    1320:	000022d1 	.word	0x000022d1
    1324:	00000d39 	.word	0x00000d39
    1328:	20000508 	.word	0x20000508
    132c:	0000618d 	.word	0x0000618d
    1330:	200006b8 	.word	0x200006b8
    1334:	00001635 	.word	0x00001635
    1338:	40140000 	.word	0x40140000
    133c:	200007e8 	.word	0x200007e8
    1340:	00000b35 	.word	0x00000b35

00001344 <updateGround>:
#include <util.h>
#include <altimeter.h>

void updateGround(Altimeter *my_altimeter) {
    1344:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}



    offsets.gravityOffsetBuffer = offsets.gravityOffsetBuffer * 0.8 + sample.accelZ * 0.2;
    1346:	4c2b      	ldr	r4, [pc, #172]	; (13f4 <updateGround+0xb0>)
    1348:	4d2b      	ldr	r5, [pc, #172]	; (13f8 <updateGround+0xb4>)
    134a:	4a2c      	ldr	r2, [pc, #176]	; (13fc <updateGround+0xb8>)
    134c:	6920      	ldr	r0, [r4, #16]
    134e:	6961      	ldr	r1, [r4, #20]
    1350:	4b2b      	ldr	r3, [pc, #172]	; (1400 <updateGround+0xbc>)
    1352:	47a8      	blx	r5
    1354:	4b2b      	ldr	r3, [pc, #172]	; (1404 <updateGround+0xc0>)
    1356:	0006      	movs	r6, r0
    1358:	6a98      	ldr	r0, [r3, #40]	; 0x28
    135a:	4b2b      	ldr	r3, [pc, #172]	; (1408 <updateGround+0xc4>)
    135c:	000f      	movs	r7, r1
    135e:	4798      	blx	r3
    1360:	4a26      	ldr	r2, [pc, #152]	; (13fc <updateGround+0xb8>)
    1362:	4b2a      	ldr	r3, [pc, #168]	; (140c <updateGround+0xc8>)
    1364:	47a8      	blx	r5
    1366:	0002      	movs	r2, r0
    1368:	000b      	movs	r3, r1
    136a:	0030      	movs	r0, r6
    136c:	0039      	movs	r1, r7
    136e:	4e28      	ldr	r6, [pc, #160]	; (1410 <updateGround+0xcc>)
    1370:	47b0      	blx	r6
    offsets.groundOffsetBuffer = offsets.groundOffsetBuffer * 0.5 + altitude * 0.5;
    1372:	4e28      	ldr	r6, [pc, #160]	; (1414 <updateGround+0xd0>)

void updateGround(Altimeter *my_altimeter) {



    offsets.gravityOffsetBuffer = offsets.gravityOffsetBuffer * 0.8 + sample.accelZ * 0.2;
    1374:	6120      	str	r0, [r4, #16]
    1376:	6161      	str	r1, [r4, #20]
    offsets.groundOffsetBuffer = offsets.groundOffsetBuffer * 0.5 + altitude * 0.5;
    1378:	69e0      	ldr	r0, [r4, #28]
    137a:	47b0      	blx	r6
    137c:	2200      	movs	r2, #0
    137e:	4b26      	ldr	r3, [pc, #152]	; (1418 <updateGround+0xd4>)
    1380:	47a8      	blx	r5
    1382:	9000      	str	r0, [sp, #0]
    1384:	9101      	str	r1, [sp, #4]
    1386:	4925      	ldr	r1, [pc, #148]	; (141c <updateGround+0xd8>)
    1388:	2200      	movs	r2, #0
    138a:	6808      	ldr	r0, [r1, #0]
    138c:	6849      	ldr	r1, [r1, #4]
    138e:	4b22      	ldr	r3, [pc, #136]	; (1418 <updateGround+0xd4>)
    1390:	47a8      	blx	r5
    1392:	4f1f      	ldr	r7, [pc, #124]	; (1410 <updateGround+0xcc>)
    1394:	0002      	movs	r2, r0
    1396:	000b      	movs	r3, r1
    1398:	9800      	ldr	r0, [sp, #0]
    139a:	9901      	ldr	r1, [sp, #4]
    139c:	47b8      	blx	r7
    139e:	4f20      	ldr	r7, [pc, #128]	; (1420 <updateGround+0xdc>)
    13a0:	47b8      	blx	r7
    13a2:	61e0      	str	r0, [r4, #28]
    offsets.groundTemperatureBuffer = offsets.groundTemperatureBuffer * 0.8 + sample.temperatureCelcus * 0.2;
    13a4:	6a60      	ldr	r0, [r4, #36]	; 0x24
    13a6:	47b0      	blx	r6
    13a8:	4a14      	ldr	r2, [pc, #80]	; (13fc <updateGround+0xb8>)
    13aa:	4b15      	ldr	r3, [pc, #84]	; (1400 <updateGround+0xbc>)
    13ac:	47a8      	blx	r5
    13ae:	4b15      	ldr	r3, [pc, #84]	; (1404 <updateGround+0xc0>)
    13b0:	9000      	str	r0, [sp, #0]
    13b2:	9101      	str	r1, [sp, #4]
    13b4:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
    13b6:	47b0      	blx	r6
    13b8:	4a10      	ldr	r2, [pc, #64]	; (13fc <updateGround+0xb8>)
    13ba:	4b14      	ldr	r3, [pc, #80]	; (140c <updateGround+0xc8>)
    13bc:	47a8      	blx	r5
    13be:	4d14      	ldr	r5, [pc, #80]	; (1410 <updateGround+0xcc>)
    13c0:	000b      	movs	r3, r1
    13c2:	0002      	movs	r2, r0
    13c4:	9800      	ldr	r0, [sp, #0]
    13c6:	9901      	ldr	r1, [sp, #4]
    13c8:	47a8      	blx	r5
    13ca:	47b8      	blx	r7

    if ((millis() - offsets.offsetBufferTime) > 2000) {
    13cc:	4d15      	ldr	r5, [pc, #84]	; (1424 <updateGround+0xe0>)



    offsets.gravityOffsetBuffer = offsets.gravityOffsetBuffer * 0.8 + sample.accelZ * 0.2;
    offsets.groundOffsetBuffer = offsets.groundOffsetBuffer * 0.5 + altitude * 0.5;
    offsets.groundTemperatureBuffer = offsets.groundTemperatureBuffer * 0.8 + sample.temperatureCelcus * 0.2;
    13ce:	6260      	str	r0, [r4, #36]	; 0x24

    if ((millis() - offsets.offsetBufferTime) > 2000) {
    13d0:	47a8      	blx	r5
    13d2:	6823      	ldr	r3, [r4, #0]
    13d4:	1ac0      	subs	r0, r0, r3
    13d6:	23fa      	movs	r3, #250	; 0xfa
    13d8:	00db      	lsls	r3, r3, #3
    13da:	4298      	cmp	r0, r3
    13dc:	d909      	bls.n	13f2 <updateGround+0xae>
        //recursive filter
        offsets.groundOffset = offsets.groundOffsetBuffer;
    13de:	69e3      	ldr	r3, [r4, #28]
    13e0:	61a3      	str	r3, [r4, #24]
        offsets.groundTemperature = offsets.groundTemperatureBuffer;
    13e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
    13e4:	6223      	str	r3, [r4, #32]
        offsets.gravityOffset = offsets.gravityOffsetBuffer;
    13e6:	6922      	ldr	r2, [r4, #16]
    13e8:	6963      	ldr	r3, [r4, #20]
    13ea:	60a2      	str	r2, [r4, #8]
    13ec:	60e3      	str	r3, [r4, #12]
        offsets.offsetBufferTime = millis();
    13ee:	47a8      	blx	r5
    13f0:	6020      	str	r0, [r4, #0]
    }
}
    13f2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    13f4:	200004d8 	.word	0x200004d8
    13f8:	00005545 	.word	0x00005545
    13fc:	9999999a 	.word	0x9999999a
    1400:	3fe99999 	.word	0x3fe99999
    1404:	200007e8 	.word	0x200007e8
    1408:	00006281 	.word	0x00006281
    140c:	3fc99999 	.word	0x3fc99999
    1410:	000046a5 	.word	0x000046a5
    1414:	00006211 	.word	0x00006211
    1418:	3fe00000 	.word	0x3fe00000
    141c:	200006b8 	.word	0x200006b8
    1420:	00004061 	.word	0x00004061
    1424:	00001015 	.word	0x00001015

00001428 <isItPointingUp>:

void isItPointingUp() {
    1428:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    u8_t i;

    double pointingUpBuffer;

    pointingUpBuffer = sample.accelZ;
    142a:	4f25      	ldr	r7, [pc, #148]	; (14c0 <isItPointingUp+0x98>)
    142c:	4b25      	ldr	r3, [pc, #148]	; (14c4 <isItPointingUp+0x9c>)
    142e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    1430:	4798      	blx	r3
    1432:	260a      	movs	r6, #10
    1434:	0004      	movs	r4, r0
    1436:	000d      	movs	r5, r1
    1438:	9701      	str	r7, [sp, #4]

    for ( i = 0; i < 10 ; ++i ) {
        delay_ms(10);
    143a:	200a      	movs	r0, #10
    143c:	4b22      	ldr	r3, [pc, #136]	; (14c8 <isItPointingUp+0xa0>)
    143e:	4798      	blx	r3
        sampleTick();
    1440:	4b22      	ldr	r3, [pc, #136]	; (14cc <isItPointingUp+0xa4>)
    1442:	4798      	blx	r3
        pointingUpBuffer = pointingUpBuffer * 0.8 + sample.accelZ * 0.2;
    1444:	4a22      	ldr	r2, [pc, #136]	; (14d0 <isItPointingUp+0xa8>)
    1446:	4b23      	ldr	r3, [pc, #140]	; (14d4 <isItPointingUp+0xac>)
    1448:	0020      	movs	r0, r4
    144a:	0029      	movs	r1, r5
    144c:	4c22      	ldr	r4, [pc, #136]	; (14d8 <isItPointingUp+0xb0>)
    144e:	47a0      	blx	r4
    1450:	0004      	movs	r4, r0
    1452:	000d      	movs	r5, r1
    1454:	9b01      	ldr	r3, [sp, #4]
    1456:	3e01      	subs	r6, #1
    1458:	6a98      	ldr	r0, [r3, #40]	; 0x28
    145a:	4b1a      	ldr	r3, [pc, #104]	; (14c4 <isItPointingUp+0x9c>)
    145c:	4798      	blx	r3
    145e:	4a1c      	ldr	r2, [pc, #112]	; (14d0 <isItPointingUp+0xa8>)
    1460:	4b1e      	ldr	r3, [pc, #120]	; (14dc <isItPointingUp+0xb4>)
    1462:	4f1d      	ldr	r7, [pc, #116]	; (14d8 <isItPointingUp+0xb0>)
    1464:	47b8      	blx	r7
    1466:	0022      	movs	r2, r4
    1468:	002b      	movs	r3, r5
    146a:	4c1d      	ldr	r4, [pc, #116]	; (14e0 <isItPointingUp+0xb8>)
    146c:	47a0      	blx	r4
    146e:	b2f6      	uxtb	r6, r6
    1470:	0004      	movs	r4, r0
    1472:	000d      	movs	r5, r1

    double pointingUpBuffer;

    pointingUpBuffer = sample.accelZ;

    for ( i = 0; i < 10 ; ++i ) {
    1474:	2e00      	cmp	r6, #0
    1476:	d1e0      	bne.n	143a <isItPointingUp+0x12>
        delay_ms(10);
        sampleTick();
        pointingUpBuffer = pointingUpBuffer * 0.8 + sample.accelZ * 0.2;
    }
    if ((pointingUpBuffer > 0.9) & (pointingUpBuffer <1.1)) {
    1478:	4e1a      	ldr	r6, [pc, #104]	; (14e4 <isItPointingUp+0xbc>)
    147a:	4a1b      	ldr	r2, [pc, #108]	; (14e8 <isItPointingUp+0xc0>)
    147c:	4b1b      	ldr	r3, [pc, #108]	; (14ec <isItPointingUp+0xc4>)
    147e:	47b0      	blx	r6
    1480:	0037      	movs	r7, r6
    1482:	4e1b      	ldr	r6, [pc, #108]	; (14f0 <isItPointingUp+0xc8>)
    1484:	2800      	cmp	r0, #0
    1486:	d007      	beq.n	1498 <isItPointingUp+0x70>
    1488:	4a11      	ldr	r2, [pc, #68]	; (14d0 <isItPointingUp+0xa8>)
    148a:	4b1a      	ldr	r3, [pc, #104]	; (14f4 <isItPointingUp+0xcc>)
    148c:	0020      	movs	r0, r4
    148e:	0029      	movs	r1, r5
    1490:	47b0      	blx	r6
        altimeter.pointingUp = true;
    1492:	2201      	movs	r2, #1
    for ( i = 0; i < 10 ; ++i ) {
        delay_ms(10);
        sampleTick();
        pointingUpBuffer = pointingUpBuffer * 0.8 + sample.accelZ * 0.2;
    }
    if ((pointingUpBuffer > 0.9) & (pointingUpBuffer <1.1)) {
    1494:	2800      	cmp	r0, #0
    1496:	d10e      	bne.n	14b6 <isItPointingUp+0x8e>
        altimeter.pointingUp = true;
    } else if ((pointingUpBuffer < -0.9) & (pointingUpBuffer > -1.1)) {
    1498:	4a13      	ldr	r2, [pc, #76]	; (14e8 <isItPointingUp+0xc0>)
    149a:	4b17      	ldr	r3, [pc, #92]	; (14f8 <isItPointingUp+0xd0>)
    149c:	0020      	movs	r0, r4
    149e:	0029      	movs	r1, r5
    14a0:	47b0      	blx	r6
    14a2:	2800      	cmp	r0, #0
    14a4:	d00a      	beq.n	14bc <isItPointingUp+0x94>
    14a6:	4a0a      	ldr	r2, [pc, #40]	; (14d0 <isItPointingUp+0xa8>)
    14a8:	4b14      	ldr	r3, [pc, #80]	; (14fc <isItPointingUp+0xd4>)
    14aa:	0020      	movs	r0, r4
    14ac:	0029      	movs	r1, r5
    14ae:	47b8      	blx	r7
    14b0:	2800      	cmp	r0, #0
    14b2:	d003      	beq.n	14bc <isItPointingUp+0x94>
        altimeter.pointingUp = false;
    14b4:	2200      	movs	r2, #0
    14b6:	4b12      	ldr	r3, [pc, #72]	; (1500 <isItPointingUp+0xd8>)
    14b8:	731a      	strb	r2, [r3, #12]

        }

    }

    14ba:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    14bc:	e7fe      	b.n	14bc <isItPointingUp+0x94>
    14be:	46c0      	nop			; (mov r8, r8)
    14c0:	200007e8 	.word	0x200007e8
    14c4:	00006281 	.word	0x00006281
    14c8:	00000fc9 	.word	0x00000fc9
    14cc:	00002621 	.word	0x00002621
    14d0:	9999999a 	.word	0x9999999a
    14d4:	3fe99999 	.word	0x3fe99999
    14d8:	00005545 	.word	0x00005545
    14dc:	3fc99999 	.word	0x3fc99999
    14e0:	000046a5 	.word	0x000046a5
    14e4:	00003fb1 	.word	0x00003fb1
    14e8:	cccccccd 	.word	0xcccccccd
    14ec:	3feccccc 	.word	0x3feccccc
    14f0:	00003f89 	.word	0x00003f89
    14f4:	3ff19999 	.word	0x3ff19999
    14f8:	bfeccccc 	.word	0xbfeccccc
    14fc:	bff19999 	.word	0xbff19999
    1500:	20000528 	.word	0x20000528

00001504 <igniterTick>:
#include <util.h>
#include <boardDefines.h>


void igniterTick() {
    1504:	b510      	push	{r4, lr}

    if (charges.igniterAHot) {
    1506:	4c23      	ldr	r4, [pc, #140]	; (1594 <igniterTick+0x90>)
    1508:	7823      	ldrb	r3, [r4, #0]
    150a:	2b00      	cmp	r3, #0
    150c:	d00d      	beq.n	152a <igniterTick+0x26>
        if ((millis() - charges.igniterATick) > 2000) {
    150e:	4b22      	ldr	r3, [pc, #136]	; (1598 <igniterTick+0x94>)
    1510:	4798      	blx	r3
    1512:	6863      	ldr	r3, [r4, #4]
    1514:	1ac0      	subs	r0, r0, r3
    1516:	23fa      	movs	r3, #250	; 0xfa
    1518:	00db      	lsls	r3, r3, #3
    151a:	4298      	cmp	r0, r3
    151c:	d905      	bls.n	152a <igniterTick+0x26>
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    151e:	2280      	movs	r2, #128	; 0x80
    1520:	4b1e      	ldr	r3, [pc, #120]	; (159c <igniterTick+0x98>)
    1522:	0412      	lsls	r2, r2, #16
    1524:	601a      	str	r2, [r3, #0]
            pinLow(fireAPin);
            charges.igniterAHot = false;
    1526:	2300      	movs	r3, #0
    1528:	7023      	strb	r3, [r4, #0]
        }
    }

    if (charges.igniterBHot) {
    152a:	7a23      	ldrb	r3, [r4, #8]
    152c:	2b00      	cmp	r3, #0
    152e:	d00d      	beq.n	154c <igniterTick+0x48>
        if ((millis() - charges.igniterBTick) > 2000) {
    1530:	4b19      	ldr	r3, [pc, #100]	; (1598 <igniterTick+0x94>)
    1532:	4798      	blx	r3
    1534:	68e3      	ldr	r3, [r4, #12]
    1536:	1ac0      	subs	r0, r0, r3
    1538:	23fa      	movs	r3, #250	; 0xfa
    153a:	00db      	lsls	r3, r3, #3
    153c:	4298      	cmp	r0, r3
    153e:	d905      	bls.n	154c <igniterTick+0x48>
    1540:	2280      	movs	r2, #128	; 0x80
    1542:	4b16      	ldr	r3, [pc, #88]	; (159c <igniterTick+0x98>)
    1544:	03d2      	lsls	r2, r2, #15
    1546:	601a      	str	r2, [r3, #0]
            pinLow(fireBPin);
            charges.igniterBHot = false;
    1548:	2300      	movs	r3, #0
    154a:	7223      	strb	r3, [r4, #8]
        }
    }

    if (charges.igniterCHot) {
    154c:	7c23      	ldrb	r3, [r4, #16]
    154e:	2b00      	cmp	r3, #0
    1550:	d00d      	beq.n	156e <igniterTick+0x6a>
        if ((millis() - charges.igniterCTick) > 2000) {
    1552:	4b11      	ldr	r3, [pc, #68]	; (1598 <igniterTick+0x94>)
    1554:	4798      	blx	r3
    1556:	6963      	ldr	r3, [r4, #20]
    1558:	1ac0      	subs	r0, r0, r3
    155a:	23fa      	movs	r3, #250	; 0xfa
    155c:	00db      	lsls	r3, r3, #3
    155e:	4298      	cmp	r0, r3
    1560:	d905      	bls.n	156e <igniterTick+0x6a>
    1562:	2280      	movs	r2, #128	; 0x80
    1564:	4b0e      	ldr	r3, [pc, #56]	; (15a0 <igniterTick+0x9c>)
    1566:	0492      	lsls	r2, r2, #18
    1568:	615a      	str	r2, [r3, #20]
            pinLow(fireCPin);
            charges.igniterCHot = false;
    156a:	2300      	movs	r3, #0
    156c:	7423      	strb	r3, [r4, #16]
        }
    }

    if (charges.igniterDHot) {
    156e:	7e23      	ldrb	r3, [r4, #24]
    1570:	2b00      	cmp	r3, #0
    1572:	d00d      	beq.n	1590 <igniterTick+0x8c>
        if ((millis() - charges.igniterDTick) > 2000) {
    1574:	4b08      	ldr	r3, [pc, #32]	; (1598 <igniterTick+0x94>)
    1576:	4798      	blx	r3
    1578:	69e3      	ldr	r3, [r4, #28]
    157a:	1ac0      	subs	r0, r0, r3
    157c:	23fa      	movs	r3, #250	; 0xfa
    157e:	00db      	lsls	r3, r3, #3
    1580:	4298      	cmp	r0, r3
    1582:	d905      	bls.n	1590 <igniterTick+0x8c>
    1584:	2280      	movs	r2, #128	; 0x80
    1586:	4b06      	ldr	r3, [pc, #24]	; (15a0 <igniterTick+0x9c>)
    1588:	0452      	lsls	r2, r2, #17
    158a:	615a      	str	r2, [r3, #20]
            pinLow(fireDPin);
            charges.igniterDHot = false;
    158c:	2300      	movs	r3, #0
    158e:	7623      	strb	r3, [r4, #24]
        }
    }
}
    1590:	bd10      	pop	{r4, pc}
    1592:	46c0      	nop			; (mov r8, r8)
    1594:	20000680 	.word	0x20000680
    1598:	00001015 	.word	0x00001015
    159c:	41004494 	.word	0x41004494
    15a0:	41004400 	.word	0x41004400

000015a4 <lightIgniterA>:
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    15a4:	2280      	movs	r2, #128	; 0x80
    15a6:	4b05      	ldr	r3, [pc, #20]	; (15bc <lightIgniterA+0x18>)
    15a8:	0412      	lsls	r2, r2, #16
    if (deploymentSettings.channelDSettings.ENABLED & (deploymentSettings.channelDSettings.TYPE == DROGUE_t)) {
        lightIgniterD();
    }
}

void lightIgniterA() {
    15aa:	b510      	push	{r4, lr}
    15ac:	601a      	str	r2, [r3, #0]
    pinHigh(fireAPin);
    charges.igniterAHot = true;
    15ae:	2301      	movs	r3, #1
    15b0:	4c03      	ldr	r4, [pc, #12]	; (15c0 <lightIgniterA+0x1c>)
    15b2:	7023      	strb	r3, [r4, #0]
    charges.igniterATick = millis();
    15b4:	4b03      	ldr	r3, [pc, #12]	; (15c4 <lightIgniterA+0x20>)
    15b6:	4798      	blx	r3
    15b8:	6060      	str	r0, [r4, #4]
}
    15ba:	bd10      	pop	{r4, pc}
    15bc:	41004498 	.word	0x41004498
    15c0:	20000680 	.word	0x20000680
    15c4:	00001015 	.word	0x00001015

000015c8 <lightIgniterB>:
    15c8:	2280      	movs	r2, #128	; 0x80
    15ca:	4b05      	ldr	r3, [pc, #20]	; (15e0 <lightIgniterB+0x18>)
    15cc:	03d2      	lsls	r2, r2, #15

void lightIgniterB() {
    15ce:	b510      	push	{r4, lr}
    15d0:	601a      	str	r2, [r3, #0]
    pinHigh(fireBPin);
    charges.igniterBHot = true;
    15d2:	2301      	movs	r3, #1
    15d4:	4c03      	ldr	r4, [pc, #12]	; (15e4 <lightIgniterB+0x1c>)
    15d6:	7223      	strb	r3, [r4, #8]
    charges.igniterBTick = millis();
    15d8:	4b03      	ldr	r3, [pc, #12]	; (15e8 <lightIgniterB+0x20>)
    15da:	4798      	blx	r3
    15dc:	60e0      	str	r0, [r4, #12]
}
    15de:	bd10      	pop	{r4, pc}
    15e0:	41004498 	.word	0x41004498
    15e4:	20000680 	.word	0x20000680
    15e8:	00001015 	.word	0x00001015

000015ec <lightIgniterC>:
    15ec:	2280      	movs	r2, #128	; 0x80
    15ee:	4b05      	ldr	r3, [pc, #20]	; (1604 <lightIgniterC+0x18>)
    15f0:	0492      	lsls	r2, r2, #18

void lightIgniterC() {
    15f2:	b510      	push	{r4, lr}
    15f4:	619a      	str	r2, [r3, #24]
    pinHigh(fireCPin);
    charges.igniterCHot = true;
    15f6:	2301      	movs	r3, #1
    15f8:	4c03      	ldr	r4, [pc, #12]	; (1608 <lightIgniterC+0x1c>)
    15fa:	7423      	strb	r3, [r4, #16]
    charges.igniterCTick = millis();
    15fc:	4b03      	ldr	r3, [pc, #12]	; (160c <lightIgniterC+0x20>)
    15fe:	4798      	blx	r3
    1600:	6160      	str	r0, [r4, #20]
}
    1602:	bd10      	pop	{r4, pc}
    1604:	41004400 	.word	0x41004400
    1608:	20000680 	.word	0x20000680
    160c:	00001015 	.word	0x00001015

00001610 <lightIgniterD>:
    1610:	2280      	movs	r2, #128	; 0x80
    1612:	4b05      	ldr	r3, [pc, #20]	; (1628 <lightIgniterD+0x18>)
    1614:	0452      	lsls	r2, r2, #17

void lightIgniterD() {
    1616:	b510      	push	{r4, lr}
    1618:	619a      	str	r2, [r3, #24]
    pinHigh(fireDPin);
    charges.igniterDHot = true;
    161a:	2301      	movs	r3, #1
    161c:	4c03      	ldr	r4, [pc, #12]	; (162c <lightIgniterD+0x1c>)
    161e:	7623      	strb	r3, [r4, #24]
    charges.igniterDTick = millis();
    1620:	4b03      	ldr	r3, [pc, #12]	; (1630 <lightIgniterD+0x20>)
    1622:	4798      	blx	r3
    1624:	61e0      	str	r0, [r4, #28]
    1626:	bd10      	pop	{r4, pc}
    1628:	41004400 	.word	0x41004400
    162c:	20000680 	.word	0x20000680
    1630:	00001015 	.word	0x00001015

00001634 <igniteMain>:
            charges.igniterDHot = false;
        }
    }
}

void igniteMain() {
    1634:	b510      	push	{r4, lr}

    if (deploymentSettings.channelASettings.ENABLED & (deploymentSettings.channelASettings.TYPE == MAIN_t)) {
    1636:	4c11      	ldr	r4, [pc, #68]	; (167c <igniteMain+0x48>)
    1638:	7863      	ldrb	r3, [r4, #1]
    163a:	2b00      	cmp	r3, #0
    163c:	d104      	bne.n	1648 <igniteMain+0x14>
    163e:	7823      	ldrb	r3, [r4, #0]
    1640:	2b00      	cmp	r3, #0
    1642:	d001      	beq.n	1648 <igniteMain+0x14>
        lightIgniterA();
    1644:	4b0e      	ldr	r3, [pc, #56]	; (1680 <igniteMain+0x4c>)
    1646:	4798      	blx	r3
    }
    if(deploymentSettings.channelBSettings.ENABLED & (deploymentSettings.channelBSettings.TYPE == MAIN_t)) {
    1648:	79e3      	ldrb	r3, [r4, #7]
    164a:	2b00      	cmp	r3, #0
    164c:	d104      	bne.n	1658 <igniteMain+0x24>
    164e:	79a3      	ldrb	r3, [r4, #6]
    1650:	2b00      	cmp	r3, #0
    1652:	d001      	beq.n	1658 <igniteMain+0x24>
        lightIgniterB();
    1654:	4b0b      	ldr	r3, [pc, #44]	; (1684 <igniteMain+0x50>)
    1656:	4798      	blx	r3
    }
    if (deploymentSettings.channelCSettings.ENABLED & (deploymentSettings.channelCSettings.TYPE == MAIN_t)) {
    1658:	7b63      	ldrb	r3, [r4, #13]
    165a:	2b00      	cmp	r3, #0
    165c:	d104      	bne.n	1668 <igniteMain+0x34>
    165e:	7b23      	ldrb	r3, [r4, #12]
    1660:	2b00      	cmp	r3, #0
    1662:	d001      	beq.n	1668 <igniteMain+0x34>
        lightIgniterC();
    1664:	4b08      	ldr	r3, [pc, #32]	; (1688 <igniteMain+0x54>)
    1666:	4798      	blx	r3
    }
    if (deploymentSettings.channelDSettings.ENABLED & (deploymentSettings.channelDSettings.TYPE == MAIN_t)) {
    1668:	7ce3      	ldrb	r3, [r4, #19]
    166a:	2b00      	cmp	r3, #0
    166c:	d104      	bne.n	1678 <igniteMain+0x44>
    166e:	7ca3      	ldrb	r3, [r4, #18]
    1670:	2b00      	cmp	r3, #0
    1672:	d001      	beq.n	1678 <igniteMain+0x44>
        lightIgniterD();
    1674:	4b05      	ldr	r3, [pc, #20]	; (168c <igniteMain+0x58>)
    1676:	4798      	blx	r3
    }
}
    1678:	bd10      	pop	{r4, pc}
    167a:	46c0      	nop			; (mov r8, r8)
    167c:	20000508 	.word	0x20000508
    1680:	000015a5 	.word	0x000015a5
    1684:	000015c9 	.word	0x000015c9
    1688:	000015ed 	.word	0x000015ed
    168c:	00001611 	.word	0x00001611

00001690 <igniteDrogue>:

void igniteDrogue() {
    1690:	b510      	push	{r4, lr}

    if (deploymentSettings.channelASettings.ENABLED & (deploymentSettings.channelASettings.TYPE == DROGUE_t)) {
    1692:	4c11      	ldr	r4, [pc, #68]	; (16d8 <igniteDrogue+0x48>)
    1694:	7863      	ldrb	r3, [r4, #1]
    1696:	2b01      	cmp	r3, #1
    1698:	d104      	bne.n	16a4 <igniteDrogue+0x14>
    169a:	7823      	ldrb	r3, [r4, #0]
    169c:	2b00      	cmp	r3, #0
    169e:	d001      	beq.n	16a4 <igniteDrogue+0x14>
        lightIgniterA();
    16a0:	4b0e      	ldr	r3, [pc, #56]	; (16dc <igniteDrogue+0x4c>)
    16a2:	4798      	blx	r3
    }
    if (deploymentSettings.channelBSettings.ENABLED & (deploymentSettings.channelBSettings.TYPE == DROGUE_t)) {
    16a4:	79e3      	ldrb	r3, [r4, #7]
    16a6:	2b01      	cmp	r3, #1
    16a8:	d104      	bne.n	16b4 <igniteDrogue+0x24>
    16aa:	79a3      	ldrb	r3, [r4, #6]
    16ac:	2b00      	cmp	r3, #0
    16ae:	d001      	beq.n	16b4 <igniteDrogue+0x24>
        lightIgniterB();
    16b0:	4b0b      	ldr	r3, [pc, #44]	; (16e0 <igniteDrogue+0x50>)
    16b2:	4798      	blx	r3
    }
    if (deploymentSettings.channelCSettings.ENABLED & (deploymentSettings.channelCSettings.TYPE == DROGUE_t)) {
    16b4:	7b63      	ldrb	r3, [r4, #13]
    16b6:	2b01      	cmp	r3, #1
    16b8:	d104      	bne.n	16c4 <igniteDrogue+0x34>
    16ba:	7b23      	ldrb	r3, [r4, #12]
    16bc:	2b00      	cmp	r3, #0
    16be:	d001      	beq.n	16c4 <igniteDrogue+0x34>
        lightIgniterC();
    16c0:	4b08      	ldr	r3, [pc, #32]	; (16e4 <igniteDrogue+0x54>)
    16c2:	4798      	blx	r3
    }
    if (deploymentSettings.channelDSettings.ENABLED & (deploymentSettings.channelDSettings.TYPE == DROGUE_t)) {
    16c4:	7ce3      	ldrb	r3, [r4, #19]
    16c6:	2b01      	cmp	r3, #1
    16c8:	d104      	bne.n	16d4 <igniteDrogue+0x44>
    16ca:	7ca3      	ldrb	r3, [r4, #18]
    16cc:	2b00      	cmp	r3, #0
    16ce:	d001      	beq.n	16d4 <igniteDrogue+0x44>
        lightIgniterD();
    16d0:	4b05      	ldr	r3, [pc, #20]	; (16e8 <igniteDrogue+0x58>)
    16d2:	4798      	blx	r3
    }
}
    16d4:	bd10      	pop	{r4, pc}
    16d6:	46c0      	nop			; (mov r8, r8)
    16d8:	20000508 	.word	0x20000508
    16dc:	000015a5 	.word	0x000015a5
    16e0:	000015c9 	.word	0x000015c9
    16e4:	000015ed 	.word	0x000015ed
    16e8:	00001611 	.word	0x00001611

000016ec <computeKalmanGains>:
    dt = 0.005;

    /*
     Fill in state transition matrix and its transpose
    */
    phi[0][1]    = dt;
    16ec:	4bdc      	ldr	r3, [pc, #880]	; (1a60 <computeKalmanGains+0x374>)
    16ee:	48dd      	ldr	r0, [pc, #884]	; (1a64 <computeKalmanGains+0x378>)
    16f0:	49dd      	ldr	r1, [pc, #884]	; (1a68 <computeKalmanGains+0x37c>)

double altitude_variance = ALTITUDESIGMA*ALTITUDESIGMA;
double acceleration_variance = ACCELERATIONSIGMA*ACCELERATIONSIGMA;
double model_variance  = MODELSIGMA*MODELSIGMA;

void computeKalmanGains() {
    16f2:	b5f0      	push	{r4, r5, r6, r7, lr}
    dt = 0.005;

    /*
     Fill in state transition matrix and its transpose
    */
    phi[0][1]    = dt;
    16f4:	6098      	str	r0, [r3, #8]
    16f6:	60d9      	str	r1, [r3, #12]
    phi[1][2]    = dt;
    16f8:	6298      	str	r0, [r3, #40]	; 0x28
    16fa:	62d9      	str	r1, [r3, #44]	; 0x2c
    phi[0][2]    = dt*dt/2.0;
    16fc:	48db      	ldr	r0, [pc, #876]	; (1a6c <computeKalmanGains+0x380>)
    16fe:	49dc      	ldr	r1, [pc, #880]	; (1a70 <computeKalmanGains+0x384>)
    1700:	2200      	movs	r2, #0
    1702:	6118      	str	r0, [r3, #16]
    1704:	6159      	str	r1, [r3, #20]
    phit[2][0]    = dt*dt/2.0;

    for( i = 0; i <= 2; i++)
        for( j = 0; j <=1; j++) {
            lastkgain[i][j] = .001;
            kgain[i][j] = 1.0;
    1706:	2000      	movs	r0, #0
    1708:	49da      	ldr	r1, [pc, #872]	; (1a74 <computeKalmanGains+0x388>)
    phit[2][1]    = dt;
    phit[2][0]    = dt*dt/2.0;

    for( i = 0; i <= 2; i++)
        for( j = 0; j <=1; j++) {
            lastkgain[i][j] = .001;
    170a:	4cdb      	ldr	r4, [pc, #876]	; (1a78 <computeKalmanGains+0x38c>)
    170c:	468c      	mov	ip, r1
    170e:	4ddb      	ldr	r5, [pc, #876]	; (1a7c <computeKalmanGains+0x390>)
            kgain[i][j] = 1.0;
    1710:	49db      	ldr	r1, [pc, #876]	; (1a80 <computeKalmanGains+0x394>)

double altitude_variance = ALTITUDESIGMA*ALTITUDESIGMA;
double acceleration_variance = ACCELERATIONSIGMA*ACCELERATIONSIGMA;
double model_variance  = MODELSIGMA*MODELSIGMA;

void computeKalmanGains() {
    1712:	b0cd      	sub	sp, #308	; 0x134
    1714:	ae40      	add	r6, sp, #256	; 0x100
    1716:	1997      	adds	r7, r2, r6
    1718:	4666      	mov	r6, ip
    171a:	1996      	adds	r6, r2, r6
    171c:	3210      	adds	r2, #16
    phit[2][1]    = dt;
    phit[2][0]    = dt*dt/2.0;

    for( i = 0; i <= 2; i++)
        for( j = 0; j <=1; j++) {
            lastkgain[i][j] = .001;
    171e:	603c      	str	r4, [r7, #0]
    1720:	607d      	str	r5, [r7, #4]
            kgain[i][j] = 1.0;
    1722:	6030      	str	r0, [r6, #0]
    1724:	6071      	str	r1, [r6, #4]
    phit[2][1]    = dt;
    phit[2][0]    = dt*dt/2.0;

    for( i = 0; i <= 2; i++)
        for( j = 0; j <=1; j++) {
            lastkgain[i][j] = .001;
    1726:	60bc      	str	r4, [r7, #8]
    1728:	60fd      	str	r5, [r7, #12]
            kgain[i][j] = 1.0;
    172a:	60b0      	str	r0, [r6, #8]
    172c:	60f1      	str	r1, [r6, #12]
    phi[0][2]    = dt*dt/2.0;
    phit[1][0]    = dt;
    phit[2][1]    = dt;
    phit[2][0]    = dt*dt/2.0;

    for( i = 0; i <= 2; i++)
    172e:	2a30      	cmp	r2, #48	; 0x30
    1730:	d1f0      	bne.n	1714 <computeKalmanGains+0x28>

    /* Compute the Kalman gain matrix. */
    while(1) {
        /* Propagate state covariance */

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
    1732:	6819      	ldr	r1, [r3, #0]
    1734:	685a      	ldr	r2, [r3, #4]
    1736:	911a      	str	r1, [sp, #104]	; 0x68
    1738:	921b      	str	r2, [sp, #108]	; 0x6c
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
    173a:	6999      	ldr	r1, [r3, #24]
    173c:	69da      	ldr	r2, [r3, #28]
    173e:	911c      	str	r1, [sp, #112]	; 0x70
    1740:	921d      	str	r2, [sp, #116]	; 0x74
    1742:	6a19      	ldr	r1, [r3, #32]
    1744:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    1746:	911e      	str	r1, [sp, #120]	; 0x78
    1748:	921f      	str	r2, [sp, #124]	; 0x7c
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
    174a:	6b19      	ldr	r1, [r3, #48]	; 0x30
    174c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    174e:	9120      	str	r1, [sp, #128]	; 0x80
    1750:	9221      	str	r2, [sp, #132]	; 0x84
    1752:	6b99      	ldr	r1, [r3, #56]	; 0x38
    1754:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    1756:	9122      	str	r1, [sp, #136]	; 0x88
    1758:	9223      	str	r2, [sp, #140]	; 0x8c
    175a:	6c19      	ldr	r1, [r3, #64]	; 0x40
    175c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    175e:	9124      	str	r1, [sp, #144]	; 0x90
    1760:	9225      	str	r2, [sp, #148]	; 0x94
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
        pestp[2][1] = term[2][0] * phit[0][1] + term[2][1] * phit[1][1] + term[2][2] * phit[2][1];
        pestp[2][2] = term[2][0] * phit[0][2] + term[2][1] * phit[1][2] + term[2][2] * phit[2][2];

        pestp[2][2] = pestp[2][2] + model_variance;
    1762:	6c99      	ldr	r1, [r3, #72]	; 0x48
    1764:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    1766:	913a      	str	r1, [sp, #232]	; 0xe8
    1768:	923b      	str	r2, [sp, #236]	; 0xec
        /*
          Calculate Kalman Gain
        */
        det = (pestp[0][0]+altitude_variance)*(pestp[2][2] + acceleration_variance) - pestp[2][0] * pestp[0][2];
    176a:	6d19      	ldr	r1, [r3, #80]	; 0x50
    176c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    176e:	6ddc      	ldr	r4, [r3, #92]	; 0x5c
    1770:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    1772:	933e      	str	r3, [sp, #248]	; 0xf8
    1774:	943f      	str	r4, [sp, #252]	; 0xfc
    1776:	2300      	movs	r3, #0
    1778:	4cc2      	ldr	r4, [pc, #776]	; (1a84 <computeKalmanGains+0x398>)
    177a:	913c      	str	r1, [sp, #240]	; 0xf0
    177c:	923d      	str	r2, [sp, #244]	; 0xf4
    177e:	9302      	str	r3, [sp, #8]
    1780:	9403      	str	r4, [sp, #12]
    1782:	2300      	movs	r3, #0
    1784:	2400      	movs	r4, #0
    1786:	9310      	str	r3, [sp, #64]	; 0x40
    1788:	9411      	str	r4, [sp, #68]	; 0x44
    178a:	9300      	str	r3, [sp, #0]
    178c:	9401      	str	r4, [sp, #4]
    178e:	9304      	str	r3, [sp, #16]
    1790:	9405      	str	r4, [sp, #20]
    1792:	2300      	movs	r3, #0
    1794:	4cbb      	ldr	r4, [pc, #748]	; (1a84 <computeKalmanGains+0x398>)
    1796:	930e      	str	r3, [sp, #56]	; 0x38
    1798:	940f      	str	r4, [sp, #60]	; 0x3c
    179a:	2300      	movs	r3, #0
    179c:	2400      	movs	r4, #0
    179e:	9308      	str	r3, [sp, #32]
    17a0:	9409      	str	r4, [sp, #36]	; 0x24
    17a2:	930c      	str	r3, [sp, #48]	; 0x30
    17a4:	940d      	str	r4, [sp, #52]	; 0x34
    17a6:	930a      	str	r3, [sp, #40]	; 0x28
    17a8:	940b      	str	r4, [sp, #44]	; 0x2c
    17aa:	2480      	movs	r4, #128	; 0x80
    17ac:	2300      	movs	r3, #0
    17ae:	05e4      	lsls	r4, r4, #23
    17b0:	9306      	str	r3, [sp, #24]
    17b2:	9407      	str	r4, [sp, #28]
    17b4:	2300      	movs	r3, #0
    17b6:	9338      	str	r3, [sp, #224]	; 0xe0

    /* Compute the Kalman gain matrix. */
    while(1) {
        /* Propagate state covariance */

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
    17b8:	4db3      	ldr	r5, [pc, #716]	; (1a88 <computeKalmanGains+0x39c>)
    17ba:	9a06      	ldr	r2, [sp, #24]
    17bc:	9b07      	ldr	r3, [sp, #28]
    17be:	981a      	ldr	r0, [sp, #104]	; 0x68
    17c0:	991b      	ldr	r1, [sp, #108]	; 0x6c
    17c2:	47a8      	blx	r5
    17c4:	4aa7      	ldr	r2, [pc, #668]	; (1a64 <computeKalmanGains+0x378>)
    17c6:	0006      	movs	r6, r0
    17c8:	000f      	movs	r7, r1
    17ca:	9808      	ldr	r0, [sp, #32]
    17cc:	9909      	ldr	r1, [sp, #36]	; 0x24
    17ce:	4ba6      	ldr	r3, [pc, #664]	; (1a68 <computeKalmanGains+0x37c>)
    17d0:	47a8      	blx	r5
    17d2:	4cae      	ldr	r4, [pc, #696]	; (1a8c <computeKalmanGains+0x3a0>)
    17d4:	0002      	movs	r2, r0
    17d6:	000b      	movs	r3, r1
    17d8:	0030      	movs	r0, r6
    17da:	0039      	movs	r1, r7
    17dc:	47a0      	blx	r4
    17de:	4aa3      	ldr	r2, [pc, #652]	; (1a6c <computeKalmanGains+0x380>)
    17e0:	0006      	movs	r6, r0
    17e2:	000f      	movs	r7, r1
    17e4:	9800      	ldr	r0, [sp, #0]
    17e6:	9901      	ldr	r1, [sp, #4]
    17e8:	4ba1      	ldr	r3, [pc, #644]	; (1a70 <computeKalmanGains+0x384>)
    17ea:	47a8      	blx	r5
    17ec:	0002      	movs	r2, r0
    17ee:	000b      	movs	r3, r1
    17f0:	0030      	movs	r0, r6
    17f2:	0039      	movs	r1, r7
    17f4:	47a0      	blx	r4
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
    17f6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    17f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c

    /* Compute the Kalman gain matrix. */
    while(1) {
        /* Propagate state covariance */

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
    17fa:	9016      	str	r0, [sp, #88]	; 0x58
    17fc:	9117      	str	r1, [sp, #92]	; 0x5c
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
    17fe:	981a      	ldr	r0, [sp, #104]	; 0x68
    1800:	991b      	ldr	r1, [sp, #108]	; 0x6c
    1802:	47a8      	blx	r5
    1804:	4a97      	ldr	r2, [pc, #604]	; (1a64 <computeKalmanGains+0x378>)
    1806:	0006      	movs	r6, r0
    1808:	000f      	movs	r7, r1
    180a:	980e      	ldr	r0, [sp, #56]	; 0x38
    180c:	990f      	ldr	r1, [sp, #60]	; 0x3c
    180e:	4b96      	ldr	r3, [pc, #600]	; (1a68 <computeKalmanGains+0x37c>)
    1810:	47a8      	blx	r5
    1812:	0002      	movs	r2, r0
    1814:	000b      	movs	r3, r1
    1816:	0030      	movs	r0, r6
    1818:	0039      	movs	r1, r7
    181a:	47a0      	blx	r4
    181c:	4a93      	ldr	r2, [pc, #588]	; (1a6c <computeKalmanGains+0x380>)
    181e:	0006      	movs	r6, r0
    1820:	000f      	movs	r7, r1
    1822:	9810      	ldr	r0, [sp, #64]	; 0x40
    1824:	9911      	ldr	r1, [sp, #68]	; 0x44
    1826:	4b92      	ldr	r3, [pc, #584]	; (1a70 <computeKalmanGains+0x384>)
    1828:	47a8      	blx	r5
    182a:	0002      	movs	r2, r0
    182c:	000b      	movs	r3, r1
    182e:	0030      	movs	r0, r6
    1830:	0039      	movs	r1, r7
    1832:	47a0      	blx	r4
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
    1834:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1836:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    /* Compute the Kalman gain matrix. */
    while(1) {
        /* Propagate state covariance */

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
    1838:	9012      	str	r0, [sp, #72]	; 0x48
    183a:	9113      	str	r1, [sp, #76]	; 0x4c
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
    183c:	981a      	ldr	r0, [sp, #104]	; 0x68
    183e:	991b      	ldr	r1, [sp, #108]	; 0x6c
    1840:	47a8      	blx	r5
    1842:	4a88      	ldr	r2, [pc, #544]	; (1a64 <computeKalmanGains+0x378>)
    1844:	0006      	movs	r6, r0
    1846:	000f      	movs	r7, r1
    1848:	9804      	ldr	r0, [sp, #16]
    184a:	9905      	ldr	r1, [sp, #20]
    184c:	4b86      	ldr	r3, [pc, #536]	; (1a68 <computeKalmanGains+0x37c>)
    184e:	47a8      	blx	r5
    1850:	0002      	movs	r2, r0
    1852:	000b      	movs	r3, r1
    1854:	0030      	movs	r0, r6
    1856:	0039      	movs	r1, r7
    1858:	47a0      	blx	r4
    185a:	4a84      	ldr	r2, [pc, #528]	; (1a6c <computeKalmanGains+0x380>)
    185c:	0006      	movs	r6, r0
    185e:	000f      	movs	r7, r1
    1860:	9802      	ldr	r0, [sp, #8]
    1862:	9903      	ldr	r1, [sp, #12]
    1864:	4b82      	ldr	r3, [pc, #520]	; (1a70 <computeKalmanGains+0x384>)
    1866:	47a8      	blx	r5
    1868:	0002      	movs	r2, r0
    186a:	000b      	movs	r3, r1
    186c:	0030      	movs	r0, r6
    186e:	0039      	movs	r1, r7
    1870:	47a0      	blx	r4
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
    1872:	9a06      	ldr	r2, [sp, #24]
    1874:	9b07      	ldr	r3, [sp, #28]
    while(1) {
        /* Propagate state covariance */

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
    1876:	9014      	str	r0, [sp, #80]	; 0x50
    1878:	9115      	str	r1, [sp, #84]	; 0x54
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
    187a:	981c      	ldr	r0, [sp, #112]	; 0x70
    187c:	991d      	ldr	r1, [sp, #116]	; 0x74
    187e:	47a8      	blx	r5
    1880:	9a08      	ldr	r2, [sp, #32]
    1882:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1884:	0006      	movs	r6, r0
    1886:	000f      	movs	r7, r1
    1888:	981e      	ldr	r0, [sp, #120]	; 0x78
    188a:	991f      	ldr	r1, [sp, #124]	; 0x7c
    188c:	47a8      	blx	r5
    188e:	0002      	movs	r2, r0
    1890:	000b      	movs	r3, r1
    1892:	0030      	movs	r0, r6
    1894:	0039      	movs	r1, r7
    1896:	47a0      	blx	r4
    1898:	4a72      	ldr	r2, [pc, #456]	; (1a64 <computeKalmanGains+0x378>)
    189a:	0006      	movs	r6, r0
    189c:	000f      	movs	r7, r1
    189e:	9800      	ldr	r0, [sp, #0]
    18a0:	9901      	ldr	r1, [sp, #4]
    18a2:	4b71      	ldr	r3, [pc, #452]	; (1a68 <computeKalmanGains+0x37c>)
    18a4:	47a8      	blx	r5
    18a6:	0002      	movs	r2, r0
    18a8:	000b      	movs	r3, r1
    18aa:	0030      	movs	r0, r6
    18ac:	0039      	movs	r1, r7
    18ae:	47a0      	blx	r4
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
    18b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    18b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
        /* Propagate state covariance */

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
    18b4:	9018      	str	r0, [sp, #96]	; 0x60
    18b6:	9119      	str	r1, [sp, #100]	; 0x64
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
    18b8:	981c      	ldr	r0, [sp, #112]	; 0x70
    18ba:	991d      	ldr	r1, [sp, #116]	; 0x74
    18bc:	47a8      	blx	r5
    18be:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    18c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    18c2:	0006      	movs	r6, r0
    18c4:	000f      	movs	r7, r1
    18c6:	981e      	ldr	r0, [sp, #120]	; 0x78
    18c8:	991f      	ldr	r1, [sp, #124]	; 0x7c
    18ca:	47a8      	blx	r5
    18cc:	0002      	movs	r2, r0
    18ce:	000b      	movs	r3, r1
    18d0:	0030      	movs	r0, r6
    18d2:	0039      	movs	r1, r7
    18d4:	47a0      	blx	r4
    18d6:	4a63      	ldr	r2, [pc, #396]	; (1a64 <computeKalmanGains+0x378>)
    18d8:	0006      	movs	r6, r0
    18da:	000f      	movs	r7, r1
    18dc:	9810      	ldr	r0, [sp, #64]	; 0x40
    18de:	9911      	ldr	r1, [sp, #68]	; 0x44
    18e0:	4b61      	ldr	r3, [pc, #388]	; (1a68 <computeKalmanGains+0x37c>)
    18e2:	47a8      	blx	r5
    18e4:	0002      	movs	r2, r0
    18e6:	000b      	movs	r3, r1
    18e8:	0030      	movs	r0, r6
    18ea:	0039      	movs	r1, r7
    18ec:	47a0      	blx	r4
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
    18ee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    18f0:	9b0d      	ldr	r3, [sp, #52]	; 0x34

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
    18f2:	9026      	str	r0, [sp, #152]	; 0x98
    18f4:	9127      	str	r1, [sp, #156]	; 0x9c
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
    18f6:	981c      	ldr	r0, [sp, #112]	; 0x70
    18f8:	991d      	ldr	r1, [sp, #116]	; 0x74
    18fa:	47a8      	blx	r5
    18fc:	9a04      	ldr	r2, [sp, #16]
    18fe:	9b05      	ldr	r3, [sp, #20]
    1900:	0006      	movs	r6, r0
    1902:	000f      	movs	r7, r1
    1904:	981e      	ldr	r0, [sp, #120]	; 0x78
    1906:	991f      	ldr	r1, [sp, #124]	; 0x7c
    1908:	47a8      	blx	r5
    190a:	0002      	movs	r2, r0
    190c:	000b      	movs	r3, r1
    190e:	0030      	movs	r0, r6
    1910:	0039      	movs	r1, r7
    1912:	47a0      	blx	r4
    1914:	4a53      	ldr	r2, [pc, #332]	; (1a64 <computeKalmanGains+0x378>)
    1916:	0006      	movs	r6, r0
    1918:	000f      	movs	r7, r1
    191a:	9802      	ldr	r0, [sp, #8]
    191c:	9903      	ldr	r1, [sp, #12]
    191e:	4b52      	ldr	r3, [pc, #328]	; (1a68 <computeKalmanGains+0x37c>)
    1920:	47a8      	blx	r5
    1922:	0002      	movs	r2, r0
    1924:	000b      	movs	r3, r1
    1926:	0030      	movs	r0, r6
    1928:	0039      	movs	r1, r7
    192a:	47a0      	blx	r4
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
    192c:	9a06      	ldr	r2, [sp, #24]
    192e:	9b07      	ldr	r3, [sp, #28]
        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
    1930:	9028      	str	r0, [sp, #160]	; 0xa0
    1932:	9129      	str	r1, [sp, #164]	; 0xa4
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
    1934:	9820      	ldr	r0, [sp, #128]	; 0x80
    1936:	9921      	ldr	r1, [sp, #132]	; 0x84
    1938:	47a8      	blx	r5
    193a:	9a08      	ldr	r2, [sp, #32]
    193c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    193e:	0006      	movs	r6, r0
    1940:	000f      	movs	r7, r1
    1942:	9822      	ldr	r0, [sp, #136]	; 0x88
    1944:	9923      	ldr	r1, [sp, #140]	; 0x8c
    1946:	47a8      	blx	r5
    1948:	0002      	movs	r2, r0
    194a:	000b      	movs	r3, r1
    194c:	0030      	movs	r0, r6
    194e:	0039      	movs	r1, r7
    1950:	47a0      	blx	r4
    1952:	9a00      	ldr	r2, [sp, #0]
    1954:	9b01      	ldr	r3, [sp, #4]
    1956:	0006      	movs	r6, r0
    1958:	000f      	movs	r7, r1
    195a:	9824      	ldr	r0, [sp, #144]	; 0x90
    195c:	9925      	ldr	r1, [sp, #148]	; 0x94
    195e:	47a8      	blx	r5
    1960:	0002      	movs	r2, r0
    1962:	000b      	movs	r3, r1
    1964:	0030      	movs	r0, r6
    1966:	0039      	movs	r1, r7
    1968:	47a0      	blx	r4
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
    196a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    196c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
    196e:	902e      	str	r0, [sp, #184]	; 0xb8
    1970:	912f      	str	r1, [sp, #188]	; 0xbc
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
    1972:	9820      	ldr	r0, [sp, #128]	; 0x80
    1974:	9921      	ldr	r1, [sp, #132]	; 0x84
    1976:	47a8      	blx	r5
    1978:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    197a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    197c:	0006      	movs	r6, r0
    197e:	000f      	movs	r7, r1
    1980:	9822      	ldr	r0, [sp, #136]	; 0x88
    1982:	9923      	ldr	r1, [sp, #140]	; 0x8c
    1984:	47a8      	blx	r5
    1986:	0002      	movs	r2, r0
    1988:	000b      	movs	r3, r1
    198a:	0030      	movs	r0, r6
    198c:	0039      	movs	r1, r7
    198e:	47a0      	blx	r4
    1990:	9a10      	ldr	r2, [sp, #64]	; 0x40
    1992:	9b11      	ldr	r3, [sp, #68]	; 0x44
    1994:	0006      	movs	r6, r0
    1996:	000f      	movs	r7, r1
    1998:	9824      	ldr	r0, [sp, #144]	; 0x90
    199a:	9925      	ldr	r1, [sp, #148]	; 0x94
    199c:	47a8      	blx	r5
    199e:	0002      	movs	r2, r0
    19a0:	000b      	movs	r3, r1
    19a2:	0030      	movs	r0, r6
    19a4:	0039      	movs	r1, r7
    19a6:	47a0      	blx	r4
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];
    19a8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    19aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
    19ac:	9006      	str	r0, [sp, #24]
    19ae:	9107      	str	r1, [sp, #28]
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];
    19b0:	9820      	ldr	r0, [sp, #128]	; 0x80
    19b2:	9921      	ldr	r1, [sp, #132]	; 0x84
    19b4:	47a8      	blx	r5
    19b6:	9a04      	ldr	r2, [sp, #16]
    19b8:	9b05      	ldr	r3, [sp, #20]
    19ba:	0006      	movs	r6, r0
    19bc:	000f      	movs	r7, r1
    19be:	9822      	ldr	r0, [sp, #136]	; 0x88
    19c0:	9923      	ldr	r1, [sp, #140]	; 0x8c
    19c2:	47a8      	blx	r5
    19c4:	0002      	movs	r2, r0
    19c6:	000b      	movs	r3, r1
    19c8:	0030      	movs	r0, r6
    19ca:	0039      	movs	r1, r7
    19cc:	47a0      	blx	r4
    19ce:	9a02      	ldr	r2, [sp, #8]
    19d0:	9b03      	ldr	r3, [sp, #12]
    19d2:	0006      	movs	r6, r0
    19d4:	000f      	movs	r7, r1
    19d6:	9824      	ldr	r0, [sp, #144]	; 0x90
    19d8:	9925      	ldr	r1, [sp, #148]	; 0x94
    19da:	47a8      	blx	r5
    19dc:	0002      	movs	r2, r0
    19de:	000b      	movs	r3, r1
    19e0:	0030      	movs	r0, r6
    19e2:	0039      	movs	r1, r7
    19e4:	47a0      	blx	r4

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
    19e6:	4a1f      	ldr	r2, [pc, #124]	; (1a64 <computeKalmanGains+0x378>)
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];
    19e8:	9002      	str	r0, [sp, #8]
    19ea:	9103      	str	r1, [sp, #12]

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
    19ec:	9812      	ldr	r0, [sp, #72]	; 0x48
    19ee:	9913      	ldr	r1, [sp, #76]	; 0x4c
    19f0:	4b1d      	ldr	r3, [pc, #116]	; (1a68 <computeKalmanGains+0x37c>)
    19f2:	47a8      	blx	r5
    19f4:	9a16      	ldr	r2, [sp, #88]	; 0x58
    19f6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    19f8:	47a0      	blx	r4
    19fa:	4a1c      	ldr	r2, [pc, #112]	; (1a6c <computeKalmanGains+0x380>)
    19fc:	0006      	movs	r6, r0
    19fe:	000f      	movs	r7, r1
    1a00:	9814      	ldr	r0, [sp, #80]	; 0x50
    1a02:	9915      	ldr	r1, [sp, #84]	; 0x54
    1a04:	4b1a      	ldr	r3, [pc, #104]	; (1a70 <computeKalmanGains+0x384>)
    1a06:	47a8      	blx	r5
    1a08:	0002      	movs	r2, r0
    1a0a:	000b      	movs	r3, r1
    1a0c:	0030      	movs	r0, r6
    1a0e:	0039      	movs	r1, r7
    1a10:	47a0      	blx	r4
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
    1a12:	2200      	movs	r2, #0
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
    1a14:	9008      	str	r0, [sp, #32]
    1a16:	9109      	str	r1, [sp, #36]	; 0x24
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
    1a18:	9816      	ldr	r0, [sp, #88]	; 0x58
    1a1a:	9917      	ldr	r1, [sp, #92]	; 0x5c
    1a1c:	2300      	movs	r3, #0
    1a1e:	47a8      	blx	r5
    1a20:	0006      	movs	r6, r0
    1a22:	000f      	movs	r7, r1
    1a24:	0002      	movs	r2, r0
    1a26:	000b      	movs	r3, r1
    1a28:	9812      	ldr	r0, [sp, #72]	; 0x48
    1a2a:	9913      	ldr	r1, [sp, #76]	; 0x4c
    1a2c:	47a0      	blx	r4
    1a2e:	4a0d      	ldr	r2, [pc, #52]	; (1a64 <computeKalmanGains+0x378>)
    1a30:	9000      	str	r0, [sp, #0]
    1a32:	9101      	str	r1, [sp, #4]
    1a34:	9814      	ldr	r0, [sp, #80]	; 0x50
    1a36:	9915      	ldr	r1, [sp, #84]	; 0x54
    1a38:	4b0b      	ldr	r3, [pc, #44]	; (1a68 <computeKalmanGains+0x37c>)
    1a3a:	47a8      	blx	r5
    1a3c:	0002      	movs	r2, r0
    1a3e:	000b      	movs	r3, r1
    1a40:	9800      	ldr	r0, [sp, #0]
    1a42:	9901      	ldr	r1, [sp, #4]
    1a44:	47a0      	blx	r4
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
    1a46:	2200      	movs	r2, #0
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
    1a48:	9030      	str	r0, [sp, #192]	; 0xc0
    1a4a:	9131      	str	r1, [sp, #196]	; 0xc4
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
    1a4c:	9812      	ldr	r0, [sp, #72]	; 0x48
    1a4e:	9913      	ldr	r1, [sp, #76]	; 0x4c
    1a50:	2300      	movs	r3, #0
    1a52:	47a8      	blx	r5
    1a54:	0032      	movs	r2, r6
    1a56:	003b      	movs	r3, r7
    1a58:	47a0      	blx	r4
    1a5a:	9a14      	ldr	r2, [sp, #80]	; 0x50
    1a5c:	9b15      	ldr	r3, [sp, #84]	; 0x54
    1a5e:	e017      	b.n	1a90 <computeKalmanGains+0x3a4>
    1a60:	20000010 	.word	0x20000010
    1a64:	47ae147b 	.word	0x47ae147b
    1a68:	3f747ae1 	.word	0x3f747ae1
    1a6c:	eb1c432d 	.word	0xeb1c432d
    1a70:	3eea36e2 	.word	0x3eea36e2
    1a74:	20000650 	.word	0x20000650
    1a78:	d2f1a9fc 	.word	0xd2f1a9fc
    1a7c:	3f50624d 	.word	0x3f50624d
    1a80:	3ff00000 	.word	0x3ff00000
    1a84:	40220000 	.word	0x40220000
    1a88:	00005545 	.word	0x00005545
    1a8c:	000046a5 	.word	0x000046a5
    1a90:	47a0      	blx	r4
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
    1a92:	4ad9      	ldr	r2, [pc, #868]	; (1df8 <computeKalmanGains+0x70c>)
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
    1a94:	9112      	str	r1, [sp, #72]	; 0x48
    1a96:	9004      	str	r0, [sp, #16]
    1a98:	9116      	str	r1, [sp, #88]	; 0x58
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
    1a9a:	4bd8      	ldr	r3, [pc, #864]	; (1dfc <computeKalmanGains+0x710>)
    1a9c:	9826      	ldr	r0, [sp, #152]	; 0x98
    1a9e:	9927      	ldr	r1, [sp, #156]	; 0x9c
    1aa0:	47a8      	blx	r5
    1aa2:	9a18      	ldr	r2, [sp, #96]	; 0x60
    1aa4:	9b19      	ldr	r3, [sp, #100]	; 0x64
    1aa6:	47a0      	blx	r4
    1aa8:	4ad5      	ldr	r2, [pc, #852]	; (1e00 <computeKalmanGains+0x714>)
    1aaa:	0006      	movs	r6, r0
    1aac:	000f      	movs	r7, r1
    1aae:	9828      	ldr	r0, [sp, #160]	; 0xa0
    1ab0:	9929      	ldr	r1, [sp, #164]	; 0xa4
    1ab2:	4bd4      	ldr	r3, [pc, #848]	; (1e04 <computeKalmanGains+0x718>)
    1ab4:	47a8      	blx	r5
    1ab6:	0002      	movs	r2, r0
    1ab8:	000b      	movs	r3, r1
    1aba:	0030      	movs	r0, r6
    1abc:	0039      	movs	r1, r7
    1abe:	47a0      	blx	r4
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
    1ac0:	2200      	movs	r2, #0
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
    1ac2:	902a      	str	r0, [sp, #168]	; 0xa8
    1ac4:	912b      	str	r1, [sp, #172]	; 0xac
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
    1ac6:	9818      	ldr	r0, [sp, #96]	; 0x60
    1ac8:	9919      	ldr	r1, [sp, #100]	; 0x64
    1aca:	2300      	movs	r3, #0
    1acc:	47a8      	blx	r5
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
    1ace:	2200      	movs	r2, #0

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
    1ad0:	9032      	str	r0, [sp, #200]	; 0xc8
    1ad2:	9133      	str	r1, [sp, #204]	; 0xcc
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
    1ad4:	9826      	ldr	r0, [sp, #152]	; 0x98
    1ad6:	9927      	ldr	r1, [sp, #156]	; 0x9c
    1ad8:	2300      	movs	r3, #0
    1ada:	47a8      	blx	r5
    1adc:	9a32      	ldr	r2, [sp, #200]	; 0xc8
    1ade:	9b33      	ldr	r3, [sp, #204]	; 0xcc
    1ae0:	47a0      	blx	r4
    1ae2:	9a28      	ldr	r2, [sp, #160]	; 0xa0
    1ae4:	9b29      	ldr	r3, [sp, #164]	; 0xa4
    1ae6:	47a0      	blx	r4
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
    1ae8:	4ac3      	ldr	r2, [pc, #780]	; (1df8 <computeKalmanGains+0x70c>)
        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
    1aea:	902c      	str	r0, [sp, #176]	; 0xb0
    1aec:	912d      	str	r1, [sp, #180]	; 0xb4
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
    1aee:	9806      	ldr	r0, [sp, #24]
    1af0:	9907      	ldr	r1, [sp, #28]
    1af2:	4bc2      	ldr	r3, [pc, #776]	; (1dfc <computeKalmanGains+0x710>)
    1af4:	47a8      	blx	r5
    1af6:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
    1af8:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
    1afa:	47a0      	blx	r4
    1afc:	4ac0      	ldr	r2, [pc, #768]	; (1e00 <computeKalmanGains+0x714>)
    1afe:	0006      	movs	r6, r0
    1b00:	000f      	movs	r7, r1
    1b02:	9802      	ldr	r0, [sp, #8]
    1b04:	9903      	ldr	r1, [sp, #12]
    1b06:	4bbf      	ldr	r3, [pc, #764]	; (1e04 <computeKalmanGains+0x718>)
    1b08:	47a8      	blx	r5
    1b0a:	0002      	movs	r2, r0
    1b0c:	000b      	movs	r3, r1
    1b0e:	0030      	movs	r0, r6
    1b10:	0039      	movs	r1, r7
    1b12:	47a0      	blx	r4
        pestp[2][1] = term[2][0] * phit[0][1] + term[2][1] * phit[1][1] + term[2][2] * phit[2][1];
    1b14:	2200      	movs	r2, #0
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
    1b16:	9000      	str	r0, [sp, #0]
    1b18:	9101      	str	r1, [sp, #4]
        pestp[2][1] = term[2][0] * phit[0][1] + term[2][1] * phit[1][1] + term[2][2] * phit[2][1];
    1b1a:	982e      	ldr	r0, [sp, #184]	; 0xb8
    1b1c:	992f      	ldr	r1, [sp, #188]	; 0xbc
    1b1e:	2300      	movs	r3, #0
    1b20:	47a8      	blx	r5
    1b22:	0006      	movs	r6, r0
    1b24:	000f      	movs	r7, r1
    1b26:	0002      	movs	r2, r0
    1b28:	000b      	movs	r3, r1
    1b2a:	9806      	ldr	r0, [sp, #24]
    1b2c:	9907      	ldr	r1, [sp, #28]
    1b2e:	47a0      	blx	r4
    1b30:	4ab1      	ldr	r2, [pc, #708]	; (1df8 <computeKalmanGains+0x70c>)
    1b32:	900a      	str	r0, [sp, #40]	; 0x28
    1b34:	910b      	str	r1, [sp, #44]	; 0x2c
    1b36:	9802      	ldr	r0, [sp, #8]
    1b38:	9903      	ldr	r1, [sp, #12]
    1b3a:	4bb0      	ldr	r3, [pc, #704]	; (1dfc <computeKalmanGains+0x710>)
    1b3c:	47a8      	blx	r5
    1b3e:	0002      	movs	r2, r0
    1b40:	000b      	movs	r3, r1
    1b42:	980a      	ldr	r0, [sp, #40]	; 0x28
    1b44:	990b      	ldr	r1, [sp, #44]	; 0x2c
    1b46:	47a0      	blx	r4
        pestp[2][2] = term[2][0] * phit[0][2] + term[2][1] * phit[1][2] + term[2][2] * phit[2][2];

        pestp[2][2] = pestp[2][2] + model_variance;
    1b48:	2200      	movs	r2, #0
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
        pestp[2][1] = term[2][0] * phit[0][1] + term[2][1] * phit[1][1] + term[2][2] * phit[2][1];
    1b4a:	9010      	str	r0, [sp, #64]	; 0x40
    1b4c:	9111      	str	r1, [sp, #68]	; 0x44
        pestp[2][2] = term[2][0] * phit[0][2] + term[2][1] * phit[1][2] + term[2][2] * phit[2][2];

        pestp[2][2] = pestp[2][2] + model_variance;
    1b4e:	9806      	ldr	r0, [sp, #24]
    1b50:	9907      	ldr	r1, [sp, #28]
    1b52:	2300      	movs	r3, #0
    1b54:	47a8      	blx	r5
    1b56:	0032      	movs	r2, r6
    1b58:	003b      	movs	r3, r7
    1b5a:	47a0      	blx	r4
    1b5c:	9a02      	ldr	r2, [sp, #8]
    1b5e:	9b03      	ldr	r3, [sp, #12]
    1b60:	47a0      	blx	r4
    1b62:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
    1b64:	9b3b      	ldr	r3, [sp, #236]	; 0xec
    1b66:	47a0      	blx	r4
        /*
          Calculate Kalman Gain
        */
        det = (pestp[0][0]+altitude_variance)*(pestp[2][2] + acceleration_variance) - pestp[2][0] * pestp[0][2];
    1b68:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
    1b6a:	9b3d      	ldr	r3, [sp, #244]	; 0xf4
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
        pestp[2][1] = term[2][0] * phit[0][1] + term[2][1] * phit[1][1] + term[2][2] * phit[2][1];
        pestp[2][2] = term[2][0] * phit[0][2] + term[2][1] * phit[1][2] + term[2][2] * phit[2][2];

        pestp[2][2] = pestp[2][2] + model_variance;
    1b6c:	9002      	str	r0, [sp, #8]
    1b6e:	9103      	str	r1, [sp, #12]
        /*
          Calculate Kalman Gain
        */
        det = (pestp[0][0]+altitude_variance)*(pestp[2][2] + acceleration_variance) - pestp[2][0] * pestp[0][2];
    1b70:	9808      	ldr	r0, [sp, #32]
    1b72:	9909      	ldr	r1, [sp, #36]	; 0x24
    1b74:	47a0      	blx	r4
    1b76:	9a3e      	ldr	r2, [sp, #248]	; 0xf8
    1b78:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
    1b7a:	900a      	str	r0, [sp, #40]	; 0x28
    1b7c:	910b      	str	r1, [sp, #44]	; 0x2c
    1b7e:	9802      	ldr	r0, [sp, #8]
    1b80:	9903      	ldr	r1, [sp, #12]
    1b82:	47a0      	blx	r4
    1b84:	9a00      	ldr	r2, [sp, #0]
    1b86:	9b01      	ldr	r3, [sp, #4]
    1b88:	900c      	str	r0, [sp, #48]	; 0x30
    1b8a:	910d      	str	r1, [sp, #52]	; 0x34
    1b8c:	9804      	ldr	r0, [sp, #16]
    1b8e:	9916      	ldr	r1, [sp, #88]	; 0x58
    1b90:	47a8      	blx	r5
    1b92:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1b94:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1b96:	900e      	str	r0, [sp, #56]	; 0x38
    1b98:	910f      	str	r1, [sp, #60]	; 0x3c
    1b9a:	980a      	ldr	r0, [sp, #40]	; 0x28
    1b9c:	990b      	ldr	r1, [sp, #44]	; 0x2c
    1b9e:	47a8      	blx	r5
    1ba0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    1ba2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1ba4:	4e98      	ldr	r6, [pc, #608]	; (1e08 <computeKalmanGains+0x71c>)
    1ba6:	47b0      	blx	r6

        kgain[0][0] = (pestp[0][0] * (pestp[2][2] + acceleration_variance) - pestp[0][2] * pestp[2][0])/det;
    1ba8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1baa:	9b0d      	ldr	r3, [sp, #52]	; 0x34

        pestp[2][2] = pestp[2][2] + model_variance;
        /*
          Calculate Kalman Gain
        */
        det = (pestp[0][0]+altitude_variance)*(pestp[2][2] + acceleration_variance) - pestp[2][0] * pestp[0][2];
    1bac:	9006      	str	r0, [sp, #24]
    1bae:	9107      	str	r1, [sp, #28]

        kgain[0][0] = (pestp[0][0] * (pestp[2][2] + acceleration_variance) - pestp[0][2] * pestp[2][0])/det;
    1bb0:	9808      	ldr	r0, [sp, #32]
    1bb2:	9909      	ldr	r1, [sp, #36]	; 0x24
    1bb4:	47a8      	blx	r5
    1bb6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    1bb8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1bba:	47b0      	blx	r6
    1bbc:	9a06      	ldr	r2, [sp, #24]
    1bbe:	9b07      	ldr	r3, [sp, #28]
    1bc0:	4e92      	ldr	r6, [pc, #584]	; (1e0c <computeKalmanGains+0x720>)
    1bc2:	47b0      	blx	r6
    1bc4:	9034      	str	r0, [sp, #208]	; 0xd0
    1bc6:	9135      	str	r1, [sp, #212]	; 0xd4
    1bc8:	9a34      	ldr	r2, [sp, #208]	; 0xd0
    1bca:	9b35      	ldr	r3, [sp, #212]	; 0xd4
    1bcc:	4990      	ldr	r1, [pc, #576]	; (1e10 <computeKalmanGains+0x724>)
    1bce:	600a      	str	r2, [r1, #0]
    1bd0:	604b      	str	r3, [r1, #4]
        kgain[0][1] = (pestp[0][0] * (-pestp[0][2]) + pestp[0][2] * (pestp[0][0] + altitude_variance))/det;
    1bd2:	9808      	ldr	r0, [sp, #32]
    1bd4:	9909      	ldr	r1, [sp, #36]	; 0x24
    1bd6:	2280      	movs	r2, #128	; 0x80
    1bd8:	0612      	lsls	r2, r2, #24
    1bda:	4694      	mov	ip, r2
    1bdc:	9b12      	ldr	r3, [sp, #72]	; 0x48
    1bde:	9a04      	ldr	r2, [sp, #16]
    1be0:	4463      	add	r3, ip
    1be2:	932e      	str	r3, [sp, #184]	; 0xb8
    1be4:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    1be6:	47a8      	blx	r5
    1be8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    1bea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1bec:	0006      	movs	r6, r0
    1bee:	000f      	movs	r7, r1
    1bf0:	9804      	ldr	r0, [sp, #16]
    1bf2:	9916      	ldr	r1, [sp, #88]	; 0x58
    1bf4:	47a8      	blx	r5
    1bf6:	0002      	movs	r2, r0
    1bf8:	000b      	movs	r3, r1
    1bfa:	0030      	movs	r0, r6
    1bfc:	0039      	movs	r1, r7
    1bfe:	47a0      	blx	r4
    1c00:	9a06      	ldr	r2, [sp, #24]
    1c02:	9b07      	ldr	r3, [sp, #28]
    1c04:	4e81      	ldr	r6, [pc, #516]	; (1e0c <computeKalmanGains+0x720>)
    1c06:	47b0      	blx	r6
    1c08:	900e      	str	r0, [sp, #56]	; 0x38
    1c0a:	910f      	str	r1, [sp, #60]	; 0x3c
    1c0c:	4980      	ldr	r1, [pc, #512]	; (1e10 <computeKalmanGains+0x724>)
    1c0e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    1c10:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1c12:	608a      	str	r2, [r1, #8]
    1c14:	60cb      	str	r3, [r1, #12]
        kgain[1][0] = (pestp[1][0] * (pestp[2][2] + acceleration_variance) - pestp[1][2] * pestp[2][0])/det;
    1c16:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1c18:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1c1a:	982a      	ldr	r0, [sp, #168]	; 0xa8
    1c1c:	992b      	ldr	r1, [sp, #172]	; 0xac
    1c1e:	47a8      	blx	r5
    1c20:	9a00      	ldr	r2, [sp, #0]
    1c22:	9b01      	ldr	r3, [sp, #4]
    1c24:	0006      	movs	r6, r0
    1c26:	000f      	movs	r7, r1
    1c28:	982c      	ldr	r0, [sp, #176]	; 0xb0
    1c2a:	992d      	ldr	r1, [sp, #180]	; 0xb4
    1c2c:	47a8      	blx	r5
    1c2e:	0002      	movs	r2, r0
    1c30:	000b      	movs	r3, r1
    1c32:	0030      	movs	r0, r6
    1c34:	0039      	movs	r1, r7
    1c36:	4e74      	ldr	r6, [pc, #464]	; (1e08 <computeKalmanGains+0x71c>)
    1c38:	47b0      	blx	r6
    1c3a:	9a06      	ldr	r2, [sp, #24]
    1c3c:	9b07      	ldr	r3, [sp, #28]
    1c3e:	4e73      	ldr	r6, [pc, #460]	; (1e0c <computeKalmanGains+0x720>)
    1c40:	47b0      	blx	r6
    1c42:	0002      	movs	r2, r0
    1c44:	000b      	movs	r3, r1
    1c46:	9139      	str	r1, [sp, #228]	; 0xe4
    1c48:	4971      	ldr	r1, [pc, #452]	; (1e10 <computeKalmanGains+0x724>)
    1c4a:	9018      	str	r0, [sp, #96]	; 0x60
    1c4c:	610a      	str	r2, [r1, #16]
    1c4e:	614b      	str	r3, [r1, #20]
        kgain[1][1] = (pestp[1][0] * (-pestp[0][2]) + pestp[1][2] * (pestp[0][0] + altitude_variance))/det;
    1c50:	982a      	ldr	r0, [sp, #168]	; 0xa8
    1c52:	992b      	ldr	r1, [sp, #172]	; 0xac
    1c54:	9a04      	ldr	r2, [sp, #16]
    1c56:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    1c58:	47a8      	blx	r5
    1c5a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    1c5c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1c5e:	0006      	movs	r6, r0
    1c60:	000f      	movs	r7, r1
    1c62:	982c      	ldr	r0, [sp, #176]	; 0xb0
    1c64:	992d      	ldr	r1, [sp, #180]	; 0xb4
    1c66:	47a8      	blx	r5
    1c68:	0002      	movs	r2, r0
    1c6a:	000b      	movs	r3, r1
    1c6c:	0030      	movs	r0, r6
    1c6e:	0039      	movs	r1, r7
    1c70:	47a0      	blx	r4
    1c72:	9a06      	ldr	r2, [sp, #24]
    1c74:	9b07      	ldr	r3, [sp, #28]
    1c76:	4e65      	ldr	r6, [pc, #404]	; (1e0c <computeKalmanGains+0x720>)
    1c78:	47b0      	blx	r6
    1c7a:	9012      	str	r0, [sp, #72]	; 0x48
    1c7c:	9113      	str	r1, [sp, #76]	; 0x4c
    1c7e:	9a12      	ldr	r2, [sp, #72]	; 0x48
    1c80:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    1c82:	4963      	ldr	r1, [pc, #396]	; (1e10 <computeKalmanGains+0x724>)
    1c84:	618a      	str	r2, [r1, #24]
    1c86:	61cb      	str	r3, [r1, #28]
        kgain[2][0] = (pestp[2][0] * (pestp[2][2] + acceleration_variance) - pestp[2][2] * pestp[2][0])/det;
    1c88:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1c8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1c8c:	9800      	ldr	r0, [sp, #0]
    1c8e:	9901      	ldr	r1, [sp, #4]
    1c90:	47a8      	blx	r5
    1c92:	9a02      	ldr	r2, [sp, #8]
    1c94:	9b03      	ldr	r3, [sp, #12]
    1c96:	0006      	movs	r6, r0
    1c98:	000f      	movs	r7, r1
    1c9a:	9800      	ldr	r0, [sp, #0]
    1c9c:	9901      	ldr	r1, [sp, #4]
    1c9e:	47a8      	blx	r5
    1ca0:	0002      	movs	r2, r0
    1ca2:	000b      	movs	r3, r1
    1ca4:	0030      	movs	r0, r6
    1ca6:	0039      	movs	r1, r7
    1ca8:	4e57      	ldr	r6, [pc, #348]	; (1e08 <computeKalmanGains+0x71c>)
    1caa:	47b0      	blx	r6
    1cac:	9a06      	ldr	r2, [sp, #24]
    1cae:	9b07      	ldr	r3, [sp, #28]
    1cb0:	4e56      	ldr	r6, [pc, #344]	; (1e0c <computeKalmanGains+0x720>)
    1cb2:	47b0      	blx	r6
    1cb4:	9014      	str	r0, [sp, #80]	; 0x50
    1cb6:	9115      	str	r1, [sp, #84]	; 0x54
    1cb8:	9a14      	ldr	r2, [sp, #80]	; 0x50
    1cba:	9b15      	ldr	r3, [sp, #84]	; 0x54
    1cbc:	4954      	ldr	r1, [pc, #336]	; (1e10 <computeKalmanGains+0x724>)
    1cbe:	620a      	str	r2, [r1, #32]
    1cc0:	624b      	str	r3, [r1, #36]	; 0x24
        kgain[2][1] = (pestp[2][0] * (-pestp[0][2]) + pestp[2][2] * (pestp[0][0] + altitude_variance))/det;
    1cc2:	9800      	ldr	r0, [sp, #0]
    1cc4:	9901      	ldr	r1, [sp, #4]
    1cc6:	9a04      	ldr	r2, [sp, #16]
    1cc8:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    1cca:	47a8      	blx	r5
    1ccc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    1cce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1cd0:	0006      	movs	r6, r0
    1cd2:	000f      	movs	r7, r1
    1cd4:	9802      	ldr	r0, [sp, #8]
    1cd6:	9903      	ldr	r1, [sp, #12]
    1cd8:	47a8      	blx	r5
    1cda:	0002      	movs	r2, r0
    1cdc:	000b      	movs	r3, r1
    1cde:	0030      	movs	r0, r6
    1ce0:	0039      	movs	r1, r7
    1ce2:	47a0      	blx	r4
    1ce4:	9a06      	ldr	r2, [sp, #24]
    1ce6:	9b07      	ldr	r3, [sp, #28]
    1ce8:	4e48      	ldr	r6, [pc, #288]	; (1e0c <computeKalmanGains+0x720>)
    1cea:	47b0      	blx	r6
    1cec:	9036      	str	r0, [sp, #216]	; 0xd8
    1cee:	9137      	str	r1, [sp, #220]	; 0xdc
    1cf0:	9a36      	ldr	r2, [sp, #216]	; 0xd8
    1cf2:	9b37      	ldr	r3, [sp, #220]	; 0xdc
    1cf4:	4946      	ldr	r1, [pc, #280]	; (1e10 <computeKalmanGains+0x724>)

        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
    1cf6:	4e44      	ldr	r6, [pc, #272]	; (1e08 <computeKalmanGains+0x71c>)
        kgain[0][0] = (pestp[0][0] * (pestp[2][2] + acceleration_variance) - pestp[0][2] * pestp[2][0])/det;
        kgain[0][1] = (pestp[0][0] * (-pestp[0][2]) + pestp[0][2] * (pestp[0][0] + altitude_variance))/det;
        kgain[1][0] = (pestp[1][0] * (pestp[2][2] + acceleration_variance) - pestp[1][2] * pestp[2][0])/det;
        kgain[1][1] = (pestp[1][0] * (-pestp[0][2]) + pestp[1][2] * (pestp[0][0] + altitude_variance))/det;
        kgain[2][0] = (pestp[2][0] * (pestp[2][2] + acceleration_variance) - pestp[2][2] * pestp[2][0])/det;
        kgain[2][1] = (pestp[2][0] * (-pestp[0][2]) + pestp[2][2] * (pestp[0][0] + altitude_variance))/det;
    1cf8:	628a      	str	r2, [r1, #40]	; 0x28
    1cfa:	62cb      	str	r3, [r1, #44]	; 0x2c

        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
    1cfc:	9a34      	ldr	r2, [sp, #208]	; 0xd0
    1cfe:	9b35      	ldr	r3, [sp, #212]	; 0xd4
    1d00:	2000      	movs	r0, #0
    1d02:	4944      	ldr	r1, [pc, #272]	; (1e14 <computeKalmanGains+0x728>)
    1d04:	47b0      	blx	r6
    1d06:	0002      	movs	r2, r0
    1d08:	000b      	movs	r3, r1
    1d0a:	900c      	str	r0, [sp, #48]	; 0x30
    1d0c:	910d      	str	r1, [sp, #52]	; 0x34
    1d0e:	9808      	ldr	r0, [sp, #32]
    1d10:	9909      	ldr	r1, [sp, #36]	; 0x24
    1d12:	47a8      	blx	r5
    1d14:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    1d16:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1d18:	0006      	movs	r6, r0
    1d1a:	000f      	movs	r7, r1
    1d1c:	9800      	ldr	r0, [sp, #0]
    1d1e:	9901      	ldr	r1, [sp, #4]
    1d20:	47a8      	blx	r5
    1d22:	0002      	movs	r2, r0
    1d24:	000b      	movs	r3, r1
    1d26:	0030      	movs	r0, r6
    1d28:	0039      	movs	r1, r7
    1d2a:	4e37      	ldr	r6, [pc, #220]	; (1e08 <computeKalmanGains+0x71c>)
    1d2c:	47b0      	blx	r6
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
    1d2e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1d30:	9b0d      	ldr	r3, [sp, #52]	; 0x34
        kgain[1][0] = (pestp[1][0] * (pestp[2][2] + acceleration_variance) - pestp[1][2] * pestp[2][0])/det;
        kgain[1][1] = (pestp[1][0] * (-pestp[0][2]) + pestp[1][2] * (pestp[0][0] + altitude_variance))/det;
        kgain[2][0] = (pestp[2][0] * (pestp[2][2] + acceleration_variance) - pestp[2][2] * pestp[2][0])/det;
        kgain[2][1] = (pestp[2][0] * (-pestp[0][2]) + pestp[2][2] * (pestp[0][0] + altitude_variance))/det;

        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
    1d32:	9006      	str	r0, [sp, #24]
    1d34:	9107      	str	r1, [sp, #28]
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
    1d36:	9830      	ldr	r0, [sp, #192]	; 0xc0
    1d38:	9931      	ldr	r1, [sp, #196]	; 0xc4
    1d3a:	47a8      	blx	r5
    1d3c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    1d3e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1d40:	0006      	movs	r6, r0
    1d42:	000f      	movs	r7, r1
    1d44:	9810      	ldr	r0, [sp, #64]	; 0x40
    1d46:	9911      	ldr	r1, [sp, #68]	; 0x44
    1d48:	47a8      	blx	r5
    1d4a:	0002      	movs	r2, r0
    1d4c:	000b      	movs	r3, r1
    1d4e:	0030      	movs	r0, r6
    1d50:	0039      	movs	r1, r7
    1d52:	4e2d      	ldr	r6, [pc, #180]	; (1e08 <computeKalmanGains+0x71c>)
    1d54:	47b0      	blx	r6
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
    1d56:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1d58:	9b0d      	ldr	r3, [sp, #52]	; 0x34
        kgain[1][1] = (pestp[1][0] * (-pestp[0][2]) + pestp[1][2] * (pestp[0][0] + altitude_variance))/det;
        kgain[2][0] = (pestp[2][0] * (pestp[2][2] + acceleration_variance) - pestp[2][2] * pestp[2][0])/det;
        kgain[2][1] = (pestp[2][0] * (-pestp[0][2]) + pestp[2][2] * (pestp[0][0] + altitude_variance))/det;

        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
    1d5a:	900a      	str	r0, [sp, #40]	; 0x28
    1d5c:	910b      	str	r1, [sp, #44]	; 0x2c
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
    1d5e:	9804      	ldr	r0, [sp, #16]
    1d60:	9916      	ldr	r1, [sp, #88]	; 0x58
    1d62:	47a8      	blx	r5
    1d64:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    1d66:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1d68:	0006      	movs	r6, r0
    1d6a:	000f      	movs	r7, r1
    1d6c:	9802      	ldr	r0, [sp, #8]
    1d6e:	9903      	ldr	r1, [sp, #12]
    1d70:	47a8      	blx	r5
    1d72:	0002      	movs	r2, r0
    1d74:	000b      	movs	r3, r1
    1d76:	0030      	movs	r0, r6
    1d78:	0039      	movs	r1, r7
    1d7a:	4e23      	ldr	r6, [pc, #140]	; (1e08 <computeKalmanGains+0x71c>)
    1d7c:	47b0      	blx	r6
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
    1d7e:	2280      	movs	r2, #128	; 0x80
    1d80:	0612      	lsls	r2, r2, #24
    1d82:	4694      	mov	ip, r2
    1d84:	9b39      	ldr	r3, [sp, #228]	; 0xe4
    1d86:	9a18      	ldr	r2, [sp, #96]	; 0x60
    1d88:	4463      	add	r3, ip
    1d8a:	932e      	str	r3, [sp, #184]	; 0xb8
    1d8c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
        kgain[2][0] = (pestp[2][0] * (pestp[2][2] + acceleration_variance) - pestp[2][2] * pestp[2][0])/det;
        kgain[2][1] = (pestp[2][0] * (-pestp[0][2]) + pestp[2][2] * (pestp[0][0] + altitude_variance))/det;

        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
    1d8e:	900c      	str	r0, [sp, #48]	; 0x30
    1d90:	910d      	str	r1, [sp, #52]	; 0x34
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
    1d92:	9808      	ldr	r0, [sp, #32]
    1d94:	9909      	ldr	r1, [sp, #36]	; 0x24
    1d96:	47a8      	blx	r5
    1d98:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
    1d9a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
    1d9c:	47a0      	blx	r4
    1d9e:	9a12      	ldr	r2, [sp, #72]	; 0x48
    1da0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    1da2:	0006      	movs	r6, r0
    1da4:	000f      	movs	r7, r1
    1da6:	9800      	ldr	r0, [sp, #0]
    1da8:	9901      	ldr	r1, [sp, #4]
    1daa:	47a8      	blx	r5
    1dac:	0002      	movs	r2, r0
    1dae:	000b      	movs	r3, r1
    1db0:	0030      	movs	r0, r6
    1db2:	0039      	movs	r1, r7
    1db4:	4e14      	ldr	r6, [pc, #80]	; (1e08 <computeKalmanGains+0x71c>)
    1db6:	47b0      	blx	r6
        pest[1][1] = pestp[0][1] * (-kgain[1][0]) + pestp[1][1] - kgain[1][1]*pestp[2][1];
    1db8:	9a32      	ldr	r2, [sp, #200]	; 0xc8
    1dba:	9b33      	ldr	r3, [sp, #204]	; 0xcc
        kgain[2][1] = (pestp[2][0] * (-pestp[0][2]) + pestp[2][2] * (pestp[0][0] + altitude_variance))/det;

        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
    1dbc:	9008      	str	r0, [sp, #32]
    1dbe:	9109      	str	r1, [sp, #36]	; 0x24
        pest[1][1] = pestp[0][1] * (-kgain[1][0]) + pestp[1][1] - kgain[1][1]*pestp[2][1];
    1dc0:	9826      	ldr	r0, [sp, #152]	; 0x98
    1dc2:	9927      	ldr	r1, [sp, #156]	; 0x9c
    1dc4:	47a0      	blx	r4
    1dc6:	4a0c      	ldr	r2, [pc, #48]	; (1df8 <computeKalmanGains+0x70c>)
    1dc8:	0006      	movs	r6, r0
    1dca:	000f      	movs	r7, r1
    1dcc:	9828      	ldr	r0, [sp, #160]	; 0xa0
    1dce:	9929      	ldr	r1, [sp, #164]	; 0xa4
    1dd0:	4b0a      	ldr	r3, [pc, #40]	; (1dfc <computeKalmanGains+0x710>)
    1dd2:	47a8      	blx	r5
    1dd4:	0002      	movs	r2, r0
    1dd6:	000b      	movs	r3, r1
    1dd8:	0030      	movs	r0, r6
    1dda:	0039      	movs	r1, r7
    1ddc:	47a0      	blx	r4
    1dde:	9a18      	ldr	r2, [sp, #96]	; 0x60
    1de0:	0006      	movs	r6, r0
    1de2:	000f      	movs	r7, r1
    1de4:	9830      	ldr	r0, [sp, #192]	; 0xc0
    1de6:	9931      	ldr	r1, [sp, #196]	; 0xc4
    1de8:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    1dea:	47a8      	blx	r5
    1dec:	0002      	movs	r2, r0
    1dee:	000b      	movs	r3, r1
    1df0:	0030      	movs	r0, r6
    1df2:	0039      	movs	r1, r7
    1df4:	47a0      	blx	r4
    1df6:	e00f      	b.n	1e18 <computeKalmanGains+0x72c>
    1df8:	47ae147b 	.word	0x47ae147b
    1dfc:	3f747ae1 	.word	0x3f747ae1
    1e00:	eb1c432d 	.word	0xeb1c432d
    1e04:	3eea36e2 	.word	0x3eea36e2
    1e08:	00005a39 	.word	0x00005a39
    1e0c:	00004cfd 	.word	0x00004cfd
    1e10:	20000650 	.word	0x20000650
    1e14:	3ff00000 	.word	0x3ff00000
    1e18:	9a12      	ldr	r2, [sp, #72]	; 0x48
    1e1a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    1e1c:	0006      	movs	r6, r0
    1e1e:	000f      	movs	r7, r1
    1e20:	9810      	ldr	r0, [sp, #64]	; 0x40
    1e22:	9911      	ldr	r1, [sp, #68]	; 0x44
    1e24:	47a8      	blx	r5
    1e26:	0002      	movs	r2, r0
    1e28:	000b      	movs	r3, r1
    1e2a:	0030      	movs	r0, r6
    1e2c:	0039      	movs	r1, r7
    1e2e:	4e50      	ldr	r6, [pc, #320]	; (1f70 <computeKalmanGains+0x884>)
    1e30:	47b0      	blx	r6
        pest[1][2] = pestp[0][2] * (-kgain[1][0]) + pestp[1][2] - kgain[1][1]*pestp[2][2];
    1e32:	9a18      	ldr	r2, [sp, #96]	; 0x60

        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
        pest[1][1] = pestp[0][1] * (-kgain[1][0]) + pestp[1][1] - kgain[1][1]*pestp[2][1];
    1e34:	900e      	str	r0, [sp, #56]	; 0x38
    1e36:	910f      	str	r1, [sp, #60]	; 0x3c
        pest[1][2] = pestp[0][2] * (-kgain[1][0]) + pestp[1][2] - kgain[1][1]*pestp[2][2];
    1e38:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    1e3a:	9804      	ldr	r0, [sp, #16]
    1e3c:	9916      	ldr	r1, [sp, #88]	; 0x58
    1e3e:	47a8      	blx	r5
    1e40:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
    1e42:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    1e44:	47a0      	blx	r4
    1e46:	9a12      	ldr	r2, [sp, #72]	; 0x48
    1e48:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    1e4a:	0006      	movs	r6, r0
    1e4c:	000f      	movs	r7, r1
    1e4e:	9802      	ldr	r0, [sp, #8]
    1e50:	9903      	ldr	r1, [sp, #12]
    1e52:	47a8      	blx	r5
    1e54:	4c46      	ldr	r4, [pc, #280]	; (1f70 <computeKalmanGains+0x884>)
    1e56:	0002      	movs	r2, r0
    1e58:	000b      	movs	r3, r1
    1e5a:	0030      	movs	r0, r6
    1e5c:	0039      	movs	r1, r7
    1e5e:	47a0      	blx	r4
        pest[2][0] = (1.0 - kgain[2][1]) * pestp[2][0] - kgain[2][0] * pestp[2][0];
    1e60:	9a36      	ldr	r2, [sp, #216]	; 0xd8
    1e62:	9b37      	ldr	r3, [sp, #220]	; 0xdc
        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
        pest[1][1] = pestp[0][1] * (-kgain[1][0]) + pestp[1][1] - kgain[1][1]*pestp[2][1];
        pest[1][2] = pestp[0][2] * (-kgain[1][0]) + pestp[1][2] - kgain[1][1]*pestp[2][2];
    1e64:	9004      	str	r0, [sp, #16]
    1e66:	9105      	str	r1, [sp, #20]
        pest[2][0] = (1.0 - kgain[2][1]) * pestp[2][0] - kgain[2][0] * pestp[2][0];
    1e68:	2000      	movs	r0, #0
    1e6a:	4942      	ldr	r1, [pc, #264]	; (1f74 <computeKalmanGains+0x888>)
    1e6c:	47a0      	blx	r4
    1e6e:	0002      	movs	r2, r0
    1e70:	000b      	movs	r3, r1
    1e72:	9012      	str	r0, [sp, #72]	; 0x48
    1e74:	9113      	str	r1, [sp, #76]	; 0x4c
    1e76:	9800      	ldr	r0, [sp, #0]
    1e78:	9901      	ldr	r1, [sp, #4]
    1e7a:	47a8      	blx	r5
    1e7c:	9a14      	ldr	r2, [sp, #80]	; 0x50
    1e7e:	9b15      	ldr	r3, [sp, #84]	; 0x54
    1e80:	0006      	movs	r6, r0
    1e82:	000f      	movs	r7, r1
    1e84:	9800      	ldr	r0, [sp, #0]
    1e86:	9901      	ldr	r1, [sp, #4]
    1e88:	47a8      	blx	r5
    1e8a:	0002      	movs	r2, r0
    1e8c:	000b      	movs	r3, r1
    1e8e:	0030      	movs	r0, r6
    1e90:	0039      	movs	r1, r7
    1e92:	47a0      	blx	r4
    1e94:	9000      	str	r0, [sp, #0]
    1e96:	9101      	str	r1, [sp, #4]
        pest[2][1] = (1.0 - kgain[2][1]) * pestp[2][1] - kgain[2][0] * pestp[2][1];
    1e98:	9a12      	ldr	r2, [sp, #72]	; 0x48
    1e9a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    1e9c:	9810      	ldr	r0, [sp, #64]	; 0x40
    1e9e:	9911      	ldr	r1, [sp, #68]	; 0x44
    1ea0:	47a8      	blx	r5
    1ea2:	9a14      	ldr	r2, [sp, #80]	; 0x50
    1ea4:	9b15      	ldr	r3, [sp, #84]	; 0x54
    1ea6:	0006      	movs	r6, r0
    1ea8:	000f      	movs	r7, r1
    1eaa:	9810      	ldr	r0, [sp, #64]	; 0x40
    1eac:	9911      	ldr	r1, [sp, #68]	; 0x44
    1eae:	47a8      	blx	r5
    1eb0:	0002      	movs	r2, r0
    1eb2:	000b      	movs	r3, r1
    1eb4:	0030      	movs	r0, r6
    1eb6:	0039      	movs	r1, r7
    1eb8:	47a0      	blx	r4
        pest[2][2] = (1.0 - kgain[2][1]) * pestp[2][2] - kgain[2][0] * pestp[2][2];
    1eba:	9a12      	ldr	r2, [sp, #72]	; 0x48
    1ebc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
        pest[1][1] = pestp[0][1] * (-kgain[1][0]) + pestp[1][1] - kgain[1][1]*pestp[2][1];
        pest[1][2] = pestp[0][2] * (-kgain[1][0]) + pestp[1][2] - kgain[1][1]*pestp[2][2];
        pest[2][0] = (1.0 - kgain[2][1]) * pestp[2][0] - kgain[2][0] * pestp[2][0];
        pest[2][1] = (1.0 - kgain[2][1]) * pestp[2][1] - kgain[2][0] * pestp[2][1];
    1ebe:	9010      	str	r0, [sp, #64]	; 0x40
    1ec0:	9111      	str	r1, [sp, #68]	; 0x44
        pest[2][2] = (1.0 - kgain[2][1]) * pestp[2][2] - kgain[2][0] * pestp[2][2];
    1ec2:	9802      	ldr	r0, [sp, #8]
    1ec4:	9903      	ldr	r1, [sp, #12]
    1ec6:	47a8      	blx	r5
    1ec8:	9a14      	ldr	r2, [sp, #80]	; 0x50
    1eca:	9b15      	ldr	r3, [sp, #84]	; 0x54
    1ecc:	0006      	movs	r6, r0
    1ece:	000f      	movs	r7, r1
    1ed0:	9802      	ldr	r0, [sp, #8]
    1ed2:	9903      	ldr	r1, [sp, #12]
    1ed4:	47a8      	blx	r5
    1ed6:	000b      	movs	r3, r1
    1ed8:	0002      	movs	r2, r0
    1eda:	0039      	movs	r1, r7
    1edc:	0030      	movs	r0, r6
    1ede:	47a0      	blx	r4
         * time through the mill. Because I have noticed very early convergance
         * in a few cases (< 20 iterations) I am delaying this for at least
         * 100 iterations.
         */
        notdone = 0;
        k++;
    1ee0:	2400      	movs	r4, #0
    1ee2:	9b38      	ldr	r3, [sp, #224]	; 0xe0
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
        pest[1][1] = pestp[0][1] * (-kgain[1][0]) + pestp[1][1] - kgain[1][1]*pestp[2][1];
        pest[1][2] = pestp[0][2] * (-kgain[1][0]) + pestp[1][2] - kgain[1][1]*pestp[2][2];
        pest[2][0] = (1.0 - kgain[2][1]) * pestp[2][0] - kgain[2][0] * pestp[2][0];
        pest[2][1] = (1.0 - kgain[2][1]) * pestp[2][1] - kgain[2][0] * pestp[2][1];
        pest[2][2] = (1.0 - kgain[2][1]) * pestp[2][2] - kgain[2][0] * pestp[2][2];
    1ee4:	9002      	str	r0, [sp, #8]
    1ee6:	9103      	str	r1, [sp, #12]
         * time through the mill. Because I have noticed very early convergance
         * in a few cases (< 20 iterations) I am delaying this for at least
         * 100 iterations.
         */
        notdone = 0;
        k++;
    1ee8:	3301      	adds	r3, #1
    1eea:	9338      	str	r3, [sp, #224]	; 0xe0
        for( i = 0; i <= 2; i++)
            for( j = 0; j <= 1; j++) {
                if( (kgain[i][j] - lastkgain[i][j])/lastkgain[i][j] > 0.00001)
    1eec:	4b22      	ldr	r3, [pc, #136]	; (1f78 <computeKalmanGains+0x88c>)
        /* Check for convergance. Criteria is less than .001% change from last
         * time through the mill. Because I have noticed very early convergance
         * in a few cases (< 20 iterations) I am delaying this for at least
         * 100 iterations.
         */
        notdone = 0;
    1eee:	9414      	str	r4, [sp, #80]	; 0x50
        k++;
        for( i = 0; i <= 2; i++)
            for( j = 0; j <= 1; j++) {
                if( (kgain[i][j] - lastkgain[i][j])/lastkgain[i][j] > 0.00001)
    1ef0:	9326      	str	r3, [sp, #152]	; 0x98
    1ef2:	4b1f      	ldr	r3, [pc, #124]	; (1f70 <computeKalmanGains+0x884>)
    1ef4:	9328      	str	r3, [sp, #160]	; 0xa0
    1ef6:	ab40      	add	r3, sp, #256	; 0x100
    1ef8:	18e5      	adds	r5, r4, r3

        pestp[2][2] = pestp[2][2] + model_variance;
        /*
          Calculate Kalman Gain
        */
        det = (pestp[0][0]+altitude_variance)*(pestp[2][2] + acceleration_variance) - pestp[2][0] * pestp[0][2];
    1efa:	2300      	movs	r3, #0
    1efc:	9516      	str	r5, [sp, #88]	; 0x58
    1efe:	9312      	str	r3, [sp, #72]	; 0x48
         */
        notdone = 0;
        k++;
        for( i = 0; i <= 2; i++)
            for( j = 0; j <= 1; j++) {
                if( (kgain[i][j] - lastkgain[i][j])/lastkgain[i][j] > 0.00001)
    1f00:	9b12      	ldr	r3, [sp, #72]	; 0x48
    1f02:	9a26      	ldr	r2, [sp, #152]	; 0x98
    1f04:	18e3      	adds	r3, r4, r3
    1f06:	189b      	adds	r3, r3, r2
    1f08:	681a      	ldr	r2, [r3, #0]
    1f0a:	685b      	ldr	r3, [r3, #4]
    1f0c:	9218      	str	r2, [sp, #96]	; 0x60
    1f0e:	9319      	str	r3, [sp, #100]	; 0x64
    1f10:	9818      	ldr	r0, [sp, #96]	; 0x60
    1f12:	9919      	ldr	r1, [sp, #100]	; 0x64
    1f14:	9b16      	ldr	r3, [sp, #88]	; 0x58
    1f16:	9d28      	ldr	r5, [sp, #160]	; 0xa0
    1f18:	681e      	ldr	r6, [r3, #0]
    1f1a:	685f      	ldr	r7, [r3, #4]
    1f1c:	0032      	movs	r2, r6
    1f1e:	003b      	movs	r3, r7
    1f20:	47a8      	blx	r5
    1f22:	0032      	movs	r2, r6
    1f24:	003b      	movs	r3, r7
    1f26:	4d15      	ldr	r5, [pc, #84]	; (1f7c <computeKalmanGains+0x890>)
    1f28:	47a8      	blx	r5
    1f2a:	4b15      	ldr	r3, [pc, #84]	; (1f80 <computeKalmanGains+0x894>)
    1f2c:	4a15      	ldr	r2, [pc, #84]	; (1f84 <computeKalmanGains+0x898>)
    1f2e:	4e16      	ldr	r6, [pc, #88]	; (1f88 <computeKalmanGains+0x89c>)
    1f30:	47b0      	blx	r6
                    notdone++;
    1f32:	1e43      	subs	r3, r0, #1
    1f34:	4198      	sbcs	r0, r3
    1f36:	9b14      	ldr	r3, [sp, #80]	; 0x50
                lastkgain[i][j] = kgain[i][j];
    1f38:	9916      	ldr	r1, [sp, #88]	; 0x58
        notdone = 0;
        k++;
        for( i = 0; i <= 2; i++)
            for( j = 0; j <= 1; j++) {
                if( (kgain[i][j] - lastkgain[i][j])/lastkgain[i][j] > 0.00001)
                    notdone++;
    1f3a:	181b      	adds	r3, r3, r0
    1f3c:	9314      	str	r3, [sp, #80]	; 0x50
                lastkgain[i][j] = kgain[i][j];
    1f3e:	9a18      	ldr	r2, [sp, #96]	; 0x60
    1f40:	9b19      	ldr	r3, [sp, #100]	; 0x64
    1f42:	c10c      	stmia	r1!, {r2, r3}
    1f44:	9b12      	ldr	r3, [sp, #72]	; 0x48
    1f46:	9116      	str	r1, [sp, #88]	; 0x58
    1f48:	3308      	adds	r3, #8
    1f4a:	9312      	str	r3, [sp, #72]	; 0x48
         * 100 iterations.
         */
        notdone = 0;
        k++;
        for( i = 0; i <= 2; i++)
            for( j = 0; j <= 1; j++) {
    1f4c:	2b10      	cmp	r3, #16
    1f4e:	d1d7      	bne.n	1f00 <computeKalmanGains+0x814>
    1f50:	3410      	adds	r4, #16
         * in a few cases (< 20 iterations) I am delaying this for at least
         * 100 iterations.
         */
        notdone = 0;
        k++;
        for( i = 0; i <= 2; i++)
    1f52:	2c30      	cmp	r4, #48	; 0x30
    1f54:	d1cf      	bne.n	1ef6 <computeKalmanGains+0x80a>
            for( j = 0; j <= 1; j++) {
                if( (kgain[i][j] - lastkgain[i][j])/lastkgain[i][j] > 0.00001)
                    notdone++;
                lastkgain[i][j] = kgain[i][j];
            }
        if( notdone || k < 100)
    1f56:	9b14      	ldr	r3, [sp, #80]	; 0x50
    1f58:	2b00      	cmp	r3, #0
    1f5a:	d001      	beq.n	1f60 <computeKalmanGains+0x874>
    1f5c:	f7ff fc2c 	bl	17b8 <computeKalmanGains+0xcc>
    1f60:	9b38      	ldr	r3, [sp, #224]	; 0xe0
    1f62:	2b63      	cmp	r3, #99	; 0x63
    1f64:	dc01      	bgt.n	1f6a <computeKalmanGains+0x87e>
    1f66:	f7ff fc27 	bl	17b8 <computeKalmanGains+0xcc>
            continue;
        else
            break;
    }
}
    1f6a:	b04d      	add	sp, #308	; 0x134
    1f6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1f6e:	46c0      	nop			; (mov r8, r8)
    1f70:	00005a39 	.word	0x00005a39
    1f74:	3ff00000 	.word	0x3ff00000
    1f78:	20000650 	.word	0x20000650
    1f7c:	00004cfd 	.word	0x00004cfd
    1f80:	3ee4f8b5 	.word	0x3ee4f8b5
    1f84:	88e368f1 	.word	0x88e368f1
    1f88:	00003fb1 	.word	0x00003fb1

00001f8c <computeKalmanStates>:

void computeKalmanStates() {
    1f8c:	b5f0      	push	{r4, r5, r6, r7, lr}

    double alt_inovation, accel_inovation, acceleration;

    if (altimeter.pointingUp) {
    1f8e:	4b85      	ldr	r3, [pc, #532]	; (21a4 <STACK_SIZE+0x1a4>)
        else
            break;
    }
}

void computeKalmanStates() {
    1f90:	b08f      	sub	sp, #60	; 0x3c

    double alt_inovation, accel_inovation, acceleration;

    if (altimeter.pointingUp) {
    1f92:	7b1a      	ldrb	r2, [r3, #12]
    1f94:	4c84      	ldr	r4, [pc, #528]	; (21a8 <STACK_SIZE+0x1a8>)
    1f96:	4b85      	ldr	r3, [pc, #532]	; (21ac <STACK_SIZE+0x1ac>)
    1f98:	4e85      	ldr	r6, [pc, #532]	; (21b0 <STACK_SIZE+0x1b0>)
    1f9a:	4d86      	ldr	r5, [pc, #536]	; (21b4 <STACK_SIZE+0x1b4>)
    1f9c:	2a00      	cmp	r2, #0
    1f9e:	d004      	beq.n	1faa <computeKalmanStates+0x1e>
        acceleration = (-sample.accelZ - offsets.gravityOffset) * 32.17417;
    1fa0:	2180      	movs	r1, #128	; 0x80
    1fa2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    1fa4:	0609      	lsls	r1, r1, #24
    1fa6:	1850      	adds	r0, r2, r1
    1fa8:	e000      	b.n	1fac <computeKalmanStates+0x20>
    } else {
        acceleration = (sample.accelZ - offsets.gravityOffset) * 32.17417;
    1faa:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    1fac:	4798      	blx	r3
    1fae:	68b2      	ldr	r2, [r6, #8]
    1fb0:	68f3      	ldr	r3, [r6, #12]
    1fb2:	47a8      	blx	r5
    1fb4:	4a80      	ldr	r2, [pc, #512]	; (21b8 <STACK_SIZE+0x1b8>)
    1fb6:	4b81      	ldr	r3, [pc, #516]	; (21bc <STACK_SIZE+0x1bc>)
    1fb8:	4d81      	ldr	r5, [pc, #516]	; (21c0 <STACK_SIZE+0x1c0>)
    1fba:	47a8      	blx	r5
    }

    double pressure = sample.altitudefeet;
    1fbc:	6c23      	ldr	r3, [r4, #64]	; 0x40
    1fbe:	6c64      	ldr	r4, [r4, #68]	; 0x44
    1fc0:	9300      	str	r3, [sp, #0]
    1fc2:	9401      	str	r4, [sp, #4]

    if (altitude == 0) {
    1fc4:	4c7f      	ldr	r4, [pc, #508]	; (21c4 <STACK_SIZE+0x1c4>)
    double alt_inovation, accel_inovation, acceleration;

    if (altimeter.pointingUp) {
        acceleration = (-sample.accelZ - offsets.gravityOffset) * 32.17417;
    } else {
        acceleration = (sample.accelZ - offsets.gravityOffset) * 32.17417;
    1fc6:	0006      	movs	r6, r0
    1fc8:	000f      	movs	r7, r1
    }

    double pressure = sample.altitudefeet;

    if (altitude == 0) {
    1fca:	6820      	ldr	r0, [r4, #0]
    1fcc:	6861      	ldr	r1, [r4, #4]
    1fce:	2200      	movs	r2, #0
    1fd0:	2300      	movs	r3, #0
    1fd2:	4d7d      	ldr	r5, [pc, #500]	; (21c8 <STACK_SIZE+0x1c8>)
    1fd4:	47a8      	blx	r5
    1fd6:	2800      	cmp	r0, #0
    1fd8:	d003      	beq.n	1fe2 <computeKalmanStates+0x56>
        altitude = pressure;
    1fda:	9a00      	ldr	r2, [sp, #0]
    1fdc:	9b01      	ldr	r3, [sp, #4]
    1fde:	6022      	str	r2, [r4, #0]
    1fe0:	6063      	str	r3, [r4, #4]
    }

    /* Compute the innovations */
    alt_inovation = pressure - estp[0];
    1fe2:	9800      	ldr	r0, [sp, #0]
    1fe4:	9901      	ldr	r1, [sp, #4]
    1fe6:	4b79      	ldr	r3, [pc, #484]	; (21cc <STACK_SIZE+0x1cc>)
    1fe8:	4c72      	ldr	r4, [pc, #456]	; (21b4 <STACK_SIZE+0x1b4>)
    1fea:	681a      	ldr	r2, [r3, #0]
    1fec:	685b      	ldr	r3, [r3, #4]
    1fee:	47a0      	blx	r4
    accel_inovation = acceleration - estp[2];
    1ff0:	4b76      	ldr	r3, [pc, #472]	; (21cc <STACK_SIZE+0x1cc>)
    if (altitude == 0) {
        altitude = pressure;
    }

    /* Compute the innovations */
    alt_inovation = pressure - estp[0];
    1ff2:	9006      	str	r0, [sp, #24]
    1ff4:	9107      	str	r1, [sp, #28]
    accel_inovation = acceleration - estp[2];
    1ff6:	691a      	ldr	r2, [r3, #16]
    1ff8:	695b      	ldr	r3, [r3, #20]
    1ffa:	0030      	movs	r0, r6
    1ffc:	0039      	movs	r1, r7
    1ffe:	47a0      	blx	r4


    /* Propagate state */
    estp[0] = phi[0][0] * altitude + phi[0][1] *velocity + phi[0][2] * accel;
    2000:	4b70      	ldr	r3, [pc, #448]	; (21c4 <STACK_SIZE+0x1c4>)
    2002:	4d6f      	ldr	r5, [pc, #444]	; (21c0 <STACK_SIZE+0x1c0>)
    2004:	685c      	ldr	r4, [r3, #4]
    2006:	681b      	ldr	r3, [r3, #0]
    2008:	9300      	str	r3, [sp, #0]
    200a:	9401      	str	r4, [sp, #4]
    200c:	4b70      	ldr	r3, [pc, #448]	; (21d0 <STACK_SIZE+0x1d0>)
        altitude = pressure;
    }

    /* Compute the innovations */
    alt_inovation = pressure - estp[0];
    accel_inovation = acceleration - estp[2];
    200e:	9008      	str	r0, [sp, #32]
    2010:	9109      	str	r1, [sp, #36]	; 0x24


    /* Propagate state */
    estp[0] = phi[0][0] * altitude + phi[0][1] *velocity + phi[0][2] * accel;
    2012:	685c      	ldr	r4, [r3, #4]
    2014:	681b      	ldr	r3, [r3, #0]
    2016:	9800      	ldr	r0, [sp, #0]
    2018:	9901      	ldr	r1, [sp, #4]
    201a:	9302      	str	r3, [sp, #8]
    201c:	9403      	str	r4, [sp, #12]
    201e:	4b6d      	ldr	r3, [pc, #436]	; (21d4 <STACK_SIZE+0x1d4>)
    2020:	685c      	ldr	r4, [r3, #4]
    2022:	681b      	ldr	r3, [r3, #0]
    2024:	9304      	str	r3, [sp, #16]
    2026:	9405      	str	r4, [sp, #20]
    2028:	4c6b      	ldr	r4, [pc, #428]	; (21d8 <STACK_SIZE+0x1d8>)
    202a:	6822      	ldr	r2, [r4, #0]
    202c:	6863      	ldr	r3, [r4, #4]
    202e:	47a8      	blx	r5
    2030:	68a2      	ldr	r2, [r4, #8]
    2032:	68e3      	ldr	r3, [r4, #12]
    2034:	0006      	movs	r6, r0
    2036:	000f      	movs	r7, r1
    2038:	9802      	ldr	r0, [sp, #8]
    203a:	9903      	ldr	r1, [sp, #12]
    203c:	47a8      	blx	r5
    203e:	0002      	movs	r2, r0
    2040:	000b      	movs	r3, r1
    2042:	0030      	movs	r0, r6
    2044:	0039      	movs	r1, r7
    2046:	4e65      	ldr	r6, [pc, #404]	; (21dc <STACK_SIZE+0x1dc>)
    2048:	47b0      	blx	r6
    204a:	6922      	ldr	r2, [r4, #16]
    204c:	6963      	ldr	r3, [r4, #20]
    204e:	0006      	movs	r6, r0
    2050:	000f      	movs	r7, r1
    2052:	9804      	ldr	r0, [sp, #16]
    2054:	9905      	ldr	r1, [sp, #20]
    2056:	47a8      	blx	r5
    2058:	0002      	movs	r2, r0
    205a:	000b      	movs	r3, r1
    205c:	0030      	movs	r0, r6
    205e:	0039      	movs	r1, r7
    2060:	4e5e      	ldr	r6, [pc, #376]	; (21dc <STACK_SIZE+0x1dc>)
    2062:	47b0      	blx	r6
    2064:	900a      	str	r0, [sp, #40]	; 0x28
    2066:	910b      	str	r1, [sp, #44]	; 0x2c
    2068:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    206a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    206c:	4957      	ldr	r1, [pc, #348]	; (21cc <STACK_SIZE+0x1cc>)
    206e:	600a      	str	r2, [r1, #0]
    2070:	604b      	str	r3, [r1, #4]
    estp[1] = phi[1][0] * altitude + phi[1][1] * velocity + phi[1][2] * accel;
    2072:	69a2      	ldr	r2, [r4, #24]
    2074:	69e3      	ldr	r3, [r4, #28]
    2076:	9800      	ldr	r0, [sp, #0]
    2078:	9901      	ldr	r1, [sp, #4]
    207a:	47a8      	blx	r5
    207c:	6a22      	ldr	r2, [r4, #32]
    207e:	6a63      	ldr	r3, [r4, #36]	; 0x24
    2080:	0006      	movs	r6, r0
    2082:	000f      	movs	r7, r1
    2084:	9802      	ldr	r0, [sp, #8]
    2086:	9903      	ldr	r1, [sp, #12]
    2088:	47a8      	blx	r5
    208a:	0002      	movs	r2, r0
    208c:	000b      	movs	r3, r1
    208e:	0030      	movs	r0, r6
    2090:	0039      	movs	r1, r7
    2092:	4e52      	ldr	r6, [pc, #328]	; (21dc <STACK_SIZE+0x1dc>)
    2094:	47b0      	blx	r6
    2096:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    2098:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    209a:	0006      	movs	r6, r0
    209c:	000f      	movs	r7, r1
    209e:	9804      	ldr	r0, [sp, #16]
    20a0:	9905      	ldr	r1, [sp, #20]
    20a2:	47a8      	blx	r5
    20a4:	0002      	movs	r2, r0
    20a6:	000b      	movs	r3, r1
    20a8:	0030      	movs	r0, r6
    20aa:	0039      	movs	r1, r7
    20ac:	4e4b      	ldr	r6, [pc, #300]	; (21dc <STACK_SIZE+0x1dc>)
    20ae:	47b0      	blx	r6
    20b0:	900c      	str	r0, [sp, #48]	; 0x30
    20b2:	910d      	str	r1, [sp, #52]	; 0x34
    20b4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    20b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    20b8:	4944      	ldr	r1, [pc, #272]	; (21cc <STACK_SIZE+0x1cc>)
    20ba:	608a      	str	r2, [r1, #8]
    20bc:	60cb      	str	r3, [r1, #12]
    estp[2] = phi[2][0] * altitude + phi[2][1] * velocity + phi[2][2] * accel;
    20be:	6b22      	ldr	r2, [r4, #48]	; 0x30
    20c0:	6b63      	ldr	r3, [r4, #52]	; 0x34
    20c2:	9800      	ldr	r0, [sp, #0]
    20c4:	9901      	ldr	r1, [sp, #4]
    20c6:	47a8      	blx	r5
    20c8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    20ca:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    20cc:	0006      	movs	r6, r0
    20ce:	000f      	movs	r7, r1
    20d0:	9802      	ldr	r0, [sp, #8]
    20d2:	9903      	ldr	r1, [sp, #12]
    20d4:	47a8      	blx	r5
    20d6:	0002      	movs	r2, r0
    20d8:	000b      	movs	r3, r1
    20da:	0030      	movs	r0, r6
    20dc:	0039      	movs	r1, r7
    20de:	4e3f      	ldr	r6, [pc, #252]	; (21dc <STACK_SIZE+0x1dc>)
    20e0:	47b0      	blx	r6
    20e2:	6c22      	ldr	r2, [r4, #64]	; 0x40
    20e4:	6c63      	ldr	r3, [r4, #68]	; 0x44
    20e6:	0006      	movs	r6, r0
    20e8:	000f      	movs	r7, r1
    20ea:	9804      	ldr	r0, [sp, #16]
    20ec:	9905      	ldr	r1, [sp, #20]
    20ee:	47a8      	blx	r5
    20f0:	4c3a      	ldr	r4, [pc, #232]	; (21dc <STACK_SIZE+0x1dc>)
    20f2:	0002      	movs	r2, r0
    20f4:	000b      	movs	r3, r1
    20f6:	0030      	movs	r0, r6
    20f8:	0039      	movs	r1, r7
    20fa:	47a0      	blx	r4
    20fc:	0003      	movs	r3, r0
    20fe:	000c      	movs	r4, r1
    2100:	4a32      	ldr	r2, [pc, #200]	; (21cc <STACK_SIZE+0x1cc>)
    2102:	9000      	str	r0, [sp, #0]
    2104:	9101      	str	r1, [sp, #4]
    2106:	6113      	str	r3, [r2, #16]
    2108:	6154      	str	r4, [r2, #20]

    /*
    Update state
    */
    altitude = estp[0] + kgain[0][0] * alt_inovation + kgain[0][1] * accel_inovation;
    210a:	4c35      	ldr	r4, [pc, #212]	; (21e0 <STACK_SIZE+0x1e0>)
    210c:	6822      	ldr	r2, [r4, #0]
    210e:	6863      	ldr	r3, [r4, #4]
    2110:	9806      	ldr	r0, [sp, #24]
    2112:	9907      	ldr	r1, [sp, #28]
    2114:	47a8      	blx	r5
    2116:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    2118:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    211a:	4e30      	ldr	r6, [pc, #192]	; (21dc <STACK_SIZE+0x1dc>)
    211c:	47b0      	blx	r6
    211e:	68a2      	ldr	r2, [r4, #8]
    2120:	68e3      	ldr	r3, [r4, #12]
    2122:	0006      	movs	r6, r0
    2124:	000f      	movs	r7, r1
    2126:	9808      	ldr	r0, [sp, #32]
    2128:	9909      	ldr	r1, [sp, #36]	; 0x24
    212a:	47a8      	blx	r5
    212c:	0002      	movs	r2, r0
    212e:	000b      	movs	r3, r1
    2130:	0030      	movs	r0, r6
    2132:	0039      	movs	r1, r7
    2134:	4e29      	ldr	r6, [pc, #164]	; (21dc <STACK_SIZE+0x1dc>)
    2136:	47b0      	blx	r6
    2138:	4b22      	ldr	r3, [pc, #136]	; (21c4 <STACK_SIZE+0x1c4>)
    213a:	6018      	str	r0, [r3, #0]
    213c:	6059      	str	r1, [r3, #4]
    velocity = estp[1] + kgain[1][0] * alt_inovation + kgain[1][1] * accel_inovation;
    213e:	6922      	ldr	r2, [r4, #16]
    2140:	6963      	ldr	r3, [r4, #20]
    2142:	9806      	ldr	r0, [sp, #24]
    2144:	9907      	ldr	r1, [sp, #28]
    2146:	47a8      	blx	r5
    2148:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    214a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    214c:	47b0      	blx	r6
    214e:	69a2      	ldr	r2, [r4, #24]
    2150:	69e3      	ldr	r3, [r4, #28]
    2152:	0006      	movs	r6, r0
    2154:	000f      	movs	r7, r1
    2156:	9808      	ldr	r0, [sp, #32]
    2158:	9909      	ldr	r1, [sp, #36]	; 0x24
    215a:	47a8      	blx	r5
    215c:	0002      	movs	r2, r0
    215e:	000b      	movs	r3, r1
    2160:	0030      	movs	r0, r6
    2162:	0039      	movs	r1, r7
    2164:	4e1d      	ldr	r6, [pc, #116]	; (21dc <STACK_SIZE+0x1dc>)
    2166:	47b0      	blx	r6
    2168:	4b19      	ldr	r3, [pc, #100]	; (21d0 <STACK_SIZE+0x1d0>)
    216a:	6018      	str	r0, [r3, #0]
    216c:	6059      	str	r1, [r3, #4]
    accel =    estp[2] + kgain[2][0] * alt_inovation + kgain[2][1] * accel_inovation;
    216e:	6a22      	ldr	r2, [r4, #32]
    2170:	6a63      	ldr	r3, [r4, #36]	; 0x24
    2172:	9806      	ldr	r0, [sp, #24]
    2174:	9907      	ldr	r1, [sp, #28]
    2176:	47a8      	blx	r5
    2178:	9a00      	ldr	r2, [sp, #0]
    217a:	9b01      	ldr	r3, [sp, #4]
    217c:	47b0      	blx	r6
    217e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    2180:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    2182:	0006      	movs	r6, r0
    2184:	000f      	movs	r7, r1
    2186:	9808      	ldr	r0, [sp, #32]
    2188:	9909      	ldr	r1, [sp, #36]	; 0x24
    218a:	47a8      	blx	r5
    218c:	4c13      	ldr	r4, [pc, #76]	; (21dc <STACK_SIZE+0x1dc>)
    218e:	0002      	movs	r2, r0
    2190:	000b      	movs	r3, r1
    2192:	0030      	movs	r0, r6
    2194:	0039      	movs	r1, r7
    2196:	47a0      	blx	r4
    2198:	4b0e      	ldr	r3, [pc, #56]	; (21d4 <STACK_SIZE+0x1d4>)
    219a:	6018      	str	r0, [r3, #0]
    219c:	6059      	str	r1, [r3, #4]

}
    219e:	b00f      	add	sp, #60	; 0x3c
    21a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    21a2:	46c0      	nop			; (mov r8, r8)
    21a4:	20000528 	.word	0x20000528
    21a8:	200007e8 	.word	0x200007e8
    21ac:	00006281 	.word	0x00006281
    21b0:	200004d8 	.word	0x200004d8
    21b4:	00005a39 	.word	0x00005a39
    21b8:	33daf8df 	.word	0x33daf8df
    21bc:	4040164b 	.word	0x4040164b
    21c0:	00005545 	.word	0x00005545
    21c4:	200006b8 	.word	0x200006b8
    21c8:	00003f7d 	.word	0x00003f7d
    21cc:	200006c0 	.word	0x200006c0
    21d0:	200006b0 	.word	0x200006b0
    21d4:	200006a8 	.word	0x200006a8
    21d8:	20000010 	.word	0x20000010
    21dc:	000046a5 	.word	0x000046a5
    21e0:	20000650 	.word	0x20000650

000021e4 <makePage>:
u8_t pageLocation;

bool pageReady;


void makePage(u8_t bytesToWrite, u8_t* data) {
    21e4:	b5f0      	push	{r4, r5, r6, r7, lr}


    u8_t location = pageLocation;
    21e6:	4a1f      	ldr	r2, [pc, #124]	; (2264 <makePage+0x80>)
    21e8:	7815      	ldrb	r5, [r2, #0]
    u8_t bytesWritten = 0;

    if ((location + bytesToWrite) > 0xFF) {
    21ea:	1943      	adds	r3, r0, r5
    21ec:	2bff      	cmp	r3, #255	; 0xff
    21ee:	dc03      	bgt.n	21f8 <makePage+0x14>
    21f0:	2300      	movs	r3, #0
            pageLocation = dataByte + 1;
        }
        pageReady = true;

    } else {
        for (u16_t dataByte = 0; dataByte <= bytesToWrite; ++dataByte) {
    21f2:	b280      	uxth	r0, r0
            pageBuffer[(dataByte + location)] = data[dataByte];
    21f4:	4c1c      	ldr	r4, [pc, #112]	; (2268 <makePage+0x84>)
    21f6:	e029      	b.n	224c <makePage+0x68>
    21f8:	2300      	movs	r3, #0
    21fa:	4e1b      	ldr	r6, [pc, #108]	; (2268 <makePage+0x84>)

    u8_t location = pageLocation;
    u8_t bytesWritten = 0;

    if ((location + bytesToWrite) > 0xFF) {
        for (u16_t dataByte = 0; (dataByte + location) <= 0xFF; ++dataByte) {
    21fc:	195f      	adds	r7, r3, r5
    21fe:	b2dc      	uxtb	r4, r3
    2200:	46b4      	mov	ip, r6
    2202:	2fff      	cmp	r7, #255	; 0xff
    2204:	dc04      	bgt.n	2210 <makePage+0x2c>
            pageBuffer[(dataByte + location)] = data[dataByte];
    2206:	5ccc      	ldrb	r4, [r1, r3]

    u8_t location = pageLocation;
    u8_t bytesWritten = 0;

    if ((location + bytesToWrite) > 0xFF) {
        for (u16_t dataByte = 0; (dataByte + location) <= 0xFF; ++dataByte) {
    2208:	3301      	adds	r3, #1
            pageBuffer[(dataByte + location)] = data[dataByte];
    220a:	55f4      	strb	r4, [r6, r7]

    u8_t location = pageLocation;
    u8_t bytesWritten = 0;

    if ((location + bytesToWrite) > 0xFF) {
        for (u16_t dataByte = 0; (dataByte + location) <= 0xFF; ++dataByte) {
    220c:	b29b      	uxth	r3, r3
    220e:	e7f5      	b.n	21fc <makePage+0x18>
            pageBuffer[(dataByte + location)] = data[dataByte];
            bytesWritten++;
        }
        pageLocation = 0x00;
    2210:	2300      	movs	r3, #0
        for(u16_t i = 0; i <= 0xFF; ++i) {
            pageToWrite[i] = pageBuffer[i];
    2212:	4f16      	ldr	r7, [pc, #88]	; (226c <makePage+0x88>)
    if ((location + bytesToWrite) > 0xFF) {
        for (u16_t dataByte = 0; (dataByte + location) <= 0xFF; ++dataByte) {
            pageBuffer[(dataByte + location)] = data[dataByte];
            bytesWritten++;
        }
        pageLocation = 0x00;
    2214:	7013      	strb	r3, [r2, #0]
        for(u16_t i = 0; i <= 0xFF; ++i) {
            pageToWrite[i] = pageBuffer[i];
    2216:	4665      	mov	r5, ip
    2218:	18ed      	adds	r5, r5, r3
    221a:	782e      	ldrb	r6, [r5, #0]
    221c:	54fe      	strb	r6, [r7, r3]
            pageBuffer[i] = 0;
    221e:	2600      	movs	r6, #0
    2220:	702e      	strb	r6, [r5, #0]
        for (u16_t dataByte = 0; (dataByte + location) <= 0xFF; ++dataByte) {
            pageBuffer[(dataByte + location)] = data[dataByte];
            bytesWritten++;
        }
        pageLocation = 0x00;
        for(u16_t i = 0; i <= 0xFF; ++i) {
    2222:	2580      	movs	r5, #128	; 0x80
    2224:	3301      	adds	r3, #1
    2226:	006d      	lsls	r5, r5, #1
    2228:	42ab      	cmp	r3, r5
    222a:	d1f4      	bne.n	2216 <makePage+0x32>
    222c:	2300      	movs	r3, #0
    222e:	1c5d      	adds	r5, r3, #1
            pageToWrite[i] = pageBuffer[i];
            pageBuffer[i] = 0;
        }
        for (u16_t dataByte = 0; bytesWritten < bytesToWrite; ++dataByte) {
    2230:	4284      	cmp	r4, r0
    2232:	d207      	bcs.n	2244 <makePage+0x60>
            pageBuffer[dataByte] = data[bytesWritten];
    2234:	4667      	mov	r7, ip
    2236:	5d0e      	ldrb	r6, [r1, r4]
            bytesWritten++;
    2238:	3401      	adds	r4, #1
        for(u16_t i = 0; i <= 0xFF; ++i) {
            pageToWrite[i] = pageBuffer[i];
            pageBuffer[i] = 0;
        }
        for (u16_t dataByte = 0; bytesWritten < bytesToWrite; ++dataByte) {
            pageBuffer[dataByte] = data[bytesWritten];
    223a:	54fe      	strb	r6, [r7, r3]
            bytesWritten++;
    223c:	b2e4      	uxtb	r4, r4
            pageLocation = dataByte + 1;
    223e:	7015      	strb	r5, [r2, #0]
    2240:	002b      	movs	r3, r5
    2242:	e7f4      	b.n	222e <makePage+0x4a>
        }
        pageReady = true;
    2244:	2201      	movs	r2, #1
    2246:	4b0a      	ldr	r3, [pc, #40]	; (2270 <makePage+0x8c>)
    2248:	701a      	strb	r2, [r3, #0]
    224a:	e009      	b.n	2260 <makePage+0x7c>

    } else {
        for (u16_t dataByte = 0; dataByte <= bytesToWrite; ++dataByte) {
    224c:	4283      	cmp	r3, r0
    224e:	d807      	bhi.n	2260 <makePage+0x7c>
            pageBuffer[(dataByte + location)] = data[dataByte];
    2250:	5ccf      	ldrb	r7, [r1, r3]
    2252:	18e6      	adds	r6, r4, r3
    2254:	5577      	strb	r7, [r6, r5]
            bytesWritten++;
            pageLocation = location + dataByte;
    2256:	18ee      	adds	r6, r5, r3
            pageLocation = dataByte + 1;
        }
        pageReady = true;

    } else {
        for (u16_t dataByte = 0; dataByte <= bytesToWrite; ++dataByte) {
    2258:	3301      	adds	r3, #1
            pageBuffer[(dataByte + location)] = data[dataByte];
            bytesWritten++;
            pageLocation = location + dataByte;
    225a:	7016      	strb	r6, [r2, #0]
            pageLocation = dataByte + 1;
        }
        pageReady = true;

    } else {
        for (u16_t dataByte = 0; dataByte <= bytesToWrite; ++dataByte) {
    225c:	b29b      	uxth	r3, r3
    225e:	e7f5      	b.n	224c <makePage+0x68>
            pageBuffer[(dataByte + location)] = data[dataByte];
            bytesWritten++;
            pageLocation = location + dataByte;
        }
    }
}
    2260:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2262:	46c0      	nop			; (mov r8, r8)
    2264:	200007e4 	.word	0x200007e4
    2268:	2000053d 	.word	0x2000053d
    226c:	200006d8 	.word	0x200006d8
    2270:	200007d8 	.word	0x200007d8

00002274 <logFlight>:


void logFlight() {
    2274:	b51f      	push	{r0, r1, r2, r3, r4, lr}

    u8_t bytesToSend = 16;
    u8_t dataToSend[16];

    dataToSend[0] = FLIGHT_LOG;
    2276:	2346      	movs	r3, #70	; 0x46
    2278:	466a      	mov	r2, sp
    227a:	7013      	strb	r3, [r2, #0]
    dataToSend[1] = 0;
    227c:	2300      	movs	r3, #0

    dataToSend[2] = offsets.offsetBufferTime >> 0;
    227e:	4669      	mov	r1, sp
    dataToSend[3] = offsets.offsetBufferTime >> 8;
    2280:	4668      	mov	r0, sp

    u8_t bytesToSend = 16;
    u8_t dataToSend[16];

    dataToSend[0] = FLIGHT_LOG;
    dataToSend[1] = 0;
    2282:	7053      	strb	r3, [r2, #1]

    dataToSend[2] = offsets.offsetBufferTime >> 0;
    2284:	4a10      	ldr	r2, [pc, #64]	; (22c8 <logFlight+0x54>)
    2286:	6813      	ldr	r3, [r2, #0]
    2288:	708b      	strb	r3, [r1, #2]
    dataToSend[3] = offsets.offsetBufferTime >> 8;
    228a:	0a19      	lsrs	r1, r3, #8
    228c:	70c1      	strb	r1, [r0, #3]
    dataToSend[4] = offsets.offsetBufferTime >> 16;
    228e:	0c19      	lsrs	r1, r3, #16
    dataToSend[5] = offsets.offsetBufferTime >> 24;
    2290:	0e1b      	lsrs	r3, r3, #24
    2292:	7143      	strb	r3, [r0, #5]

    dataToSend[6] = offsets.groundOffset >> 0;
    2294:	6993      	ldr	r3, [r2, #24]
    dataToSend[0] = FLIGHT_LOG;
    dataToSend[1] = 0;

    dataToSend[2] = offsets.offsetBufferTime >> 0;
    dataToSend[3] = offsets.offsetBufferTime >> 8;
    dataToSend[4] = offsets.offsetBufferTime >> 16;
    2296:	7101      	strb	r1, [r0, #4]
    dataToSend[5] = offsets.offsetBufferTime >> 24;

    dataToSend[6] = offsets.groundOffset >> 0;
    dataToSend[7] = offsets.groundOffset >> 8;
    2298:	0a19      	lsrs	r1, r3, #8
    dataToSend[2] = offsets.offsetBufferTime >> 0;
    dataToSend[3] = offsets.offsetBufferTime >> 8;
    dataToSend[4] = offsets.offsetBufferTime >> 16;
    dataToSend[5] = offsets.offsetBufferTime >> 24;

    dataToSend[6] = offsets.groundOffset >> 0;
    229a:	7183      	strb	r3, [r0, #6]
    dataToSend[7] = offsets.groundOffset >> 8;
    229c:	71c1      	strb	r1, [r0, #7]
    dataToSend[8] = offsets.groundOffset >> 16;
    229e:	0c19      	lsrs	r1, r3, #16
    dataToSend[9] = offsets.groundOffset >> 24;
    22a0:	0e1b      	lsrs	r3, r3, #24
    22a2:	7243      	strb	r3, [r0, #9]

    dataToSend[10] = offsets.groundTemperature >> 0;
    22a4:	6a13      	ldr	r3, [r2, #32]
    dataToSend[4] = offsets.offsetBufferTime >> 16;
    dataToSend[5] = offsets.offsetBufferTime >> 24;

    dataToSend[6] = offsets.groundOffset >> 0;
    dataToSend[7] = offsets.groundOffset >> 8;
    dataToSend[8] = offsets.groundOffset >> 16;
    22a6:	7201      	strb	r1, [r0, #8]
    dataToSend[9] = offsets.groundOffset >> 24;

    dataToSend[10] = offsets.groundTemperature >> 0;
    dataToSend[11] = offsets.groundTemperature >> 8;
    22a8:	0a1a      	lsrs	r2, r3, #8
    dataToSend[6] = offsets.groundOffset >> 0;
    dataToSend[7] = offsets.groundOffset >> 8;
    dataToSend[8] = offsets.groundOffset >> 16;
    dataToSend[9] = offsets.groundOffset >> 24;

    dataToSend[10] = offsets.groundTemperature >> 0;
    22aa:	7283      	strb	r3, [r0, #10]
    dataToSend[11] = offsets.groundTemperature >> 8;
    22ac:	72c2      	strb	r2, [r0, #11]
    dataToSend[12] = offsets.groundTemperature >> 16;
    22ae:	0c1a      	lsrs	r2, r3, #16
    dataToSend[13] = offsets.groundTemperature >> 24;
    22b0:	0e1b      	lsrs	r3, r3, #24
    22b2:	7343      	strb	r3, [r0, #13]

    //dataToSend[14] = accel >> 0;
    dataToSend[15] = 0xfe;
    22b4:	23fe      	movs	r3, #254	; 0xfe
    dataToSend[8] = offsets.groundOffset >> 16;
    dataToSend[9] = offsets.groundOffset >> 24;

    dataToSend[10] = offsets.groundTemperature >> 0;
    dataToSend[11] = offsets.groundTemperature >> 8;
    dataToSend[12] = offsets.groundTemperature >> 16;
    22b6:	7302      	strb	r2, [r0, #12]
    dataToSend[13] = offsets.groundTemperature >> 24;

    //dataToSend[14] = accel >> 0;
    dataToSend[15] = 0xfe;
    22b8:	73c3      	strb	r3, [r0, #15]
    dataToSend[5] = offsets.offsetBufferTime >> 24;

    dataToSend[6] = offsets.groundOffset >> 0;
    dataToSend[7] = offsets.groundOffset >> 8;
    dataToSend[8] = offsets.groundOffset >> 16;
    dataToSend[9] = offsets.groundOffset >> 24;
    22ba:	4669      	mov	r1, sp
    dataToSend[13] = offsets.groundTemperature >> 24;

    //dataToSend[14] = accel >> 0;
    dataToSend[15] = 0xfe;

    makePage(bytesToSend, dataToSend);
    22bc:	2010      	movs	r0, #16
    22be:	4b03      	ldr	r3, [pc, #12]	; (22cc <logFlight+0x58>)
    22c0:	4798      	blx	r3
}
    22c2:	b005      	add	sp, #20
    22c4:	bd00      	pop	{pc}
    22c6:	46c0      	nop			; (mov r8, r8)
    22c8:	200004d8 	.word	0x200004d8
    22cc:	000021e5 	.word	0x000021e5

000022d0 <logEvent>:

void logEvent(u8_t eventType) {
    22d0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

    u8_t bytesToSend = 12;
    u8_t dataToSend[12];

    dataToSend[0] = EVENT_LOG;
    22d2:	2345      	movs	r3, #69	; 0x45
    dataToSend[1] = eventType;
    dataToSend[2] = sample.sampleTick >> 0;
    22d4:	4d10      	ldr	r5, [pc, #64]	; (2318 <logEvent+0x48>)
void logEvent(u8_t eventType) {

    u8_t bytesToSend = 12;
    u8_t dataToSend[12];

    dataToSend[0] = EVENT_LOG;
    22d6:	ac01      	add	r4, sp, #4
    22d8:	7023      	strb	r3, [r4, #0]
    dataToSend[1] = eventType;
    dataToSend[2] = sample.sampleTick >> 0;
    22da:	686b      	ldr	r3, [r5, #4]
    dataToSend[3] = sample.sampleTick >> 8;
    dataToSend[4] = sample.sampleTick >> 16;
    dataToSend[5] = sample.sampleTick >> 24;

    dataToSend[6] = altitudeAGL() >> 0;
    22dc:	4e0f      	ldr	r6, [pc, #60]	; (231c <logEvent+0x4c>)
    u8_t dataToSend[12];

    dataToSend[0] = EVENT_LOG;
    dataToSend[1] = eventType;
    dataToSend[2] = sample.sampleTick >> 0;
    dataToSend[3] = sample.sampleTick >> 8;
    22de:	0a1a      	lsrs	r2, r3, #8
    u8_t bytesToSend = 12;
    u8_t dataToSend[12];

    dataToSend[0] = EVENT_LOG;
    dataToSend[1] = eventType;
    dataToSend[2] = sample.sampleTick >> 0;
    22e0:	70a3      	strb	r3, [r4, #2]
    dataToSend[3] = sample.sampleTick >> 8;
    22e2:	70e2      	strb	r2, [r4, #3]
    dataToSend[4] = sample.sampleTick >> 16;
    22e4:	0c1a      	lsrs	r2, r3, #16
    dataToSend[5] = sample.sampleTick >> 24;
    22e6:	0e1b      	lsrs	r3, r3, #24

    dataToSend[0] = EVENT_LOG;
    dataToSend[1] = eventType;
    dataToSend[2] = sample.sampleTick >> 0;
    dataToSend[3] = sample.sampleTick >> 8;
    dataToSend[4] = sample.sampleTick >> 16;
    22e8:	7122      	strb	r2, [r4, #4]
    dataToSend[5] = sample.sampleTick >> 24;
    22ea:	7163      	strb	r3, [r4, #5]

    u8_t bytesToSend = 12;
    u8_t dataToSend[12];

    dataToSend[0] = EVENT_LOG;
    dataToSend[1] = eventType;
    22ec:	7060      	strb	r0, [r4, #1]
    dataToSend[2] = sample.sampleTick >> 0;
    dataToSend[3] = sample.sampleTick >> 8;
    dataToSend[4] = sample.sampleTick >> 16;
    dataToSend[5] = sample.sampleTick >> 24;

    dataToSend[6] = altitudeAGL() >> 0;
    22ee:	47b0      	blx	r6
    22f0:	71a0      	strb	r0, [r4, #6]
    dataToSend[7] = altitudeAGL() >> 8;
    22f2:	47b0      	blx	r6
    22f4:	1200      	asrs	r0, r0, #8
    22f6:	71e0      	strb	r0, [r4, #7]
    dataToSend[8] = altitudeAGL() >> 16;
    22f8:	47b0      	blx	r6
    22fa:	1400      	asrs	r0, r0, #16
    22fc:	7220      	strb	r0, [r4, #8]
    dataToSend[9] = altitudeAGL() >> 24;
    22fe:	47b0      	blx	r6
    2300:	1600      	asrs	r0, r0, #24
    2302:	7260      	strb	r0, [r4, #9]

    dataToSend[10] = sample.voltage.batV >> 0;
    2304:	892b      	ldrh	r3, [r5, #8]
    dataToSend[11] = sample.voltage.batV >> 8;

    makePage(bytesToSend, dataToSend);
    2306:	0021      	movs	r1, r4
    dataToSend[6] = altitudeAGL() >> 0;
    dataToSend[7] = altitudeAGL() >> 8;
    dataToSend[8] = altitudeAGL() >> 16;
    dataToSend[9] = altitudeAGL() >> 24;

    dataToSend[10] = sample.voltage.batV >> 0;
    2308:	72a3      	strb	r3, [r4, #10]
    dataToSend[11] = sample.voltage.batV >> 8;
    230a:	0a1b      	lsrs	r3, r3, #8
    230c:	72e3      	strb	r3, [r4, #11]

    makePage(bytesToSend, dataToSend);
    230e:	200c      	movs	r0, #12
    2310:	4b03      	ldr	r3, [pc, #12]	; (2320 <logEvent+0x50>)
    2312:	4798      	blx	r3

}
    2314:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
    2316:	46c0      	nop			; (mov r8, r8)
    2318:	200007e8 	.word	0x200007e8
    231c:	00000acd 	.word	0x00000acd
    2320:	000021e5 	.word	0x000021e5

00002324 <logSensors>:

void logSensors() {

    writeLog = false;
    2324:	2200      	movs	r2, #0
    2326:	4b4c      	ldr	r3, [pc, #304]	; (2458 <logSensors+0x134>)

    makePage(bytesToSend, dataToSend);

}

void logSensors() {
    2328:	b5f0      	push	{r4, r5, r6, r7, lr}

    writeLog = false;
    232a:	701a      	strb	r2, [r3, #0]

    u8_t bytesToSend = 24;
    u8_t dataToSend[24];

    dataToSend[0] = SENSOR_LOG;
    232c:	2353      	movs	r3, #83	; 0x53

    makePage(bytesToSend, dataToSend);

}

void logSensors() {
    232e:	b08b      	sub	sp, #44	; 0x2c
    writeLog = false;

    u8_t bytesToSend = 24;
    u8_t dataToSend[24];

    dataToSend[0] = SENSOR_LOG;
    2330:	ac04      	add	r4, sp, #16
    2332:	7023      	strb	r3, [r4, #0]

    dataToSend[1] = sample.sampleTick >> 0;
    2334:	4b49      	ldr	r3, [pc, #292]	; (245c <logSensors+0x138>)
    dataToSend[2] = sample.sampleTick >> 8;
    dataToSend[3] = sample.sampleTick >> 16;
    dataToSend[4] = sample.sampleTick >> 24;

    dataToSend[5] = altitudeAGL() >> 0;
    2336:	4e4a      	ldr	r6, [pc, #296]	; (2460 <logSensors+0x13c>)
    u8_t bytesToSend = 24;
    u8_t dataToSend[24];

    dataToSend[0] = SENSOR_LOG;

    dataToSend[1] = sample.sampleTick >> 0;
    2338:	685b      	ldr	r3, [r3, #4]
    dataToSend[2] = sample.sampleTick >> 8;
    233a:	0a1a      	lsrs	r2, r3, #8
    u8_t bytesToSend = 24;
    u8_t dataToSend[24];

    dataToSend[0] = SENSOR_LOG;

    dataToSend[1] = sample.sampleTick >> 0;
    233c:	7063      	strb	r3, [r4, #1]
    dataToSend[2] = sample.sampleTick >> 8;
    233e:	70a2      	strb	r2, [r4, #2]
    dataToSend[3] = sample.sampleTick >> 16;
    2340:	0c1a      	lsrs	r2, r3, #16
    dataToSend[4] = sample.sampleTick >> 24;
    2342:	0e1b      	lsrs	r3, r3, #24

    dataToSend[0] = SENSOR_LOG;

    dataToSend[1] = sample.sampleTick >> 0;
    dataToSend[2] = sample.sampleTick >> 8;
    dataToSend[3] = sample.sampleTick >> 16;
    2344:	70e2      	strb	r2, [r4, #3]
    dataToSend[4] = sample.sampleTick >> 24;
    2346:	7123      	strb	r3, [r4, #4]

    dataToSend[5] = altitudeAGL() >> 0;
    2348:	47b0      	blx	r6
    234a:	7160      	strb	r0, [r4, #5]
    dataToSend[6] = altitudeAGL() >> 8;
    234c:	47b0      	blx	r6
    234e:	1200      	asrs	r0, r0, #8
    2350:	71a0      	strb	r0, [r4, #6]
    dataToSend[7] = altitudeAGL() >> 16;
    2352:	47b0      	blx	r6
    2354:	1400      	asrs	r0, r0, #16
    2356:	71e0      	strb	r0, [r4, #7]
    dataToSend[8] = altitudeAGL() >> 24;
    2358:	47b0      	blx	r6

    volatile float fractionalAccel = accel - (int16_t)(accel);
    235a:	4b42      	ldr	r3, [pc, #264]	; (2464 <logSensors+0x140>)
    dataToSend[4] = sample.sampleTick >> 24;

    dataToSend[5] = altitudeAGL() >> 0;
    dataToSend[6] = altitudeAGL() >> 8;
    dataToSend[7] = altitudeAGL() >> 16;
    dataToSend[8] = altitudeAGL() >> 24;
    235c:	1600      	asrs	r0, r0, #24

    volatile float fractionalAccel = accel - (int16_t)(accel);
    235e:	681e      	ldr	r6, [r3, #0]
    2360:	685f      	ldr	r7, [r3, #4]
    dataToSend[4] = sample.sampleTick >> 24;

    dataToSend[5] = altitudeAGL() >> 0;
    dataToSend[6] = altitudeAGL() >> 8;
    dataToSend[7] = altitudeAGL() >> 16;
    dataToSend[8] = altitudeAGL() >> 24;
    2362:	7220      	strb	r0, [r4, #8]

    volatile float fractionalAccel = accel - (int16_t)(accel);
    2364:	0039      	movs	r1, r7
    2366:	4b40      	ldr	r3, [pc, #256]	; (2468 <logSensors+0x144>)
    2368:	0030      	movs	r0, r6
    236a:	4798      	blx	r3
    236c:	b203      	sxth	r3, r0
    236e:	001d      	movs	r5, r3
    2370:	0018      	movs	r0, r3
    2372:	4b3e      	ldr	r3, [pc, #248]	; (246c <logSensors+0x148>)
    2374:	4798      	blx	r3
    2376:	0002      	movs	r2, r0
    2378:	000b      	movs	r3, r1
    237a:	0030      	movs	r0, r6
    237c:	0039      	movs	r1, r7
    237e:	4e3c      	ldr	r6, [pc, #240]	; (2470 <logSensors+0x14c>)
    2380:	47b0      	blx	r6
    2382:	4b3c      	ldr	r3, [pc, #240]	; (2474 <logSensors+0x150>)
    2384:	4798      	blx	r3
    2386:	9003      	str	r0, [sp, #12]
    volatile int16_t fractAccelPart = fractionalAccel * 1000;
    2388:	9803      	ldr	r0, [sp, #12]
    238a:	4b3b      	ldr	r3, [pc, #236]	; (2478 <logSensors+0x154>)
    238c:	493b      	ldr	r1, [pc, #236]	; (247c <logSensors+0x158>)
    238e:	4798      	blx	r3
    2390:	4f3b      	ldr	r7, [pc, #236]	; (2480 <logSensors+0x15c>)
    2392:	47b8      	blx	r7
    2394:	ab02      	add	r3, sp, #8
    2396:	b200      	sxth	r0, r0
    2398:	8058      	strh	r0, [r3, #2]

    dataToSend[9] = (int16_t)(accel) >> 0;
    dataToSend[10] = (int16_t)(accel) >> 8;
    dataToSend[11] = fractAccelPart >> 0;
    239a:	885a      	ldrh	r2, [r3, #2]
    dataToSend[6] = altitudeAGL() >> 8;
    dataToSend[7] = altitudeAGL() >> 16;
    dataToSend[8] = altitudeAGL() >> 24;

    volatile float fractionalAccel = accel - (int16_t)(accel);
    volatile int16_t fractAccelPart = fractionalAccel * 1000;
    239c:	3302      	adds	r3, #2

    dataToSend[9] = (int16_t)(accel) >> 0;
    dataToSend[10] = (int16_t)(accel) >> 8;
    dataToSend[11] = fractAccelPart >> 0;
    dataToSend[12] = fractAccelPart >> 8;
    239e:	881b      	ldrh	r3, [r3, #0]

    volatile float fractionalAccel = accel - (int16_t)(accel);
    volatile int16_t fractAccelPart = fractionalAccel * 1000;

    dataToSend[9] = (int16_t)(accel) >> 0;
    dataToSend[10] = (int16_t)(accel) >> 8;
    23a0:	1228      	asrs	r0, r5, #8
    dataToSend[11] = fractAccelPart >> 0;
    dataToSend[12] = fractAccelPart >> 8;
    23a2:	0a1b      	lsrs	r3, r3, #8
    23a4:	7323      	strb	r3, [r4, #12]


    float fractionalVelocity = velocity - (int16_t)(velocity);
    23a6:	4b37      	ldr	r3, [pc, #220]	; (2484 <logSensors+0x160>)
    dataToSend[8] = altitudeAGL() >> 24;

    volatile float fractionalAccel = accel - (int16_t)(accel);
    volatile int16_t fractAccelPart = fractionalAccel * 1000;

    dataToSend[9] = (int16_t)(accel) >> 0;
    23a8:	7265      	strb	r5, [r4, #9]
    dataToSend[10] = (int16_t)(accel) >> 8;
    23aa:	72a0      	strb	r0, [r4, #10]
    dataToSend[11] = fractAccelPart >> 0;
    23ac:	72e2      	strb	r2, [r4, #11]
    dataToSend[12] = fractAccelPart >> 8;


    float fractionalVelocity = velocity - (int16_t)(velocity);
    23ae:	681a      	ldr	r2, [r3, #0]
    23b0:	685b      	ldr	r3, [r3, #4]
    23b2:	9200      	str	r2, [sp, #0]
    23b4:	9301      	str	r3, [sp, #4]
    23b6:	0010      	movs	r0, r2
    23b8:	0019      	movs	r1, r3
    23ba:	4b2b      	ldr	r3, [pc, #172]	; (2468 <logSensors+0x144>)
    23bc:	4798      	blx	r3
    23be:	b206      	sxth	r6, r0
    int16_t fractVelocityPart = fractionalVelocity * 1000;
    23c0:	4b2a      	ldr	r3, [pc, #168]	; (246c <logSensors+0x148>)
    23c2:	0030      	movs	r0, r6
    23c4:	4798      	blx	r3
    23c6:	4d2a      	ldr	r5, [pc, #168]	; (2470 <logSensors+0x14c>)
    23c8:	0002      	movs	r2, r0
    23ca:	000b      	movs	r3, r1
    23cc:	9800      	ldr	r0, [sp, #0]
    23ce:	9901      	ldr	r1, [sp, #4]
    23d0:	47a8      	blx	r5
    23d2:	4b28      	ldr	r3, [pc, #160]	; (2474 <logSensors+0x150>)
    23d4:	4798      	blx	r3
    23d6:	4b28      	ldr	r3, [pc, #160]	; (2478 <logSensors+0x154>)
    23d8:	4928      	ldr	r1, [pc, #160]	; (247c <logSensors+0x158>)
    23da:	4798      	blx	r3
    23dc:	47b8      	blx	r7

    dataToSend[13] = (int16_t)(velocity) >> 0;
    23de:	7366      	strb	r6, [r4, #13]
    dataToSend[11] = fractAccelPart >> 0;
    dataToSend[12] = fractAccelPart >> 8;


    float fractionalVelocity = velocity - (int16_t)(velocity);
    int16_t fractVelocityPart = fractionalVelocity * 1000;
    23e0:	b203      	sxth	r3, r0

    dataToSend[13] = (int16_t)(velocity) >> 0;
    dataToSend[14] = (int16_t)(velocity) >> 8;
    23e2:	1236      	asrs	r6, r6, #8
    23e4:	73a6      	strb	r6, [r4, #14]
    dataToSend[15] = fractVelocityPart >> 0;
    23e6:	73e3      	strb	r3, [r4, #15]
    dataToSend[16] = fractVelocityPart >> 8;
    23e8:	121b      	asrs	r3, r3, #8
    23ea:	7423      	strb	r3, [r4, #16]

//     if ( ((fractVelocityPart < 0) & ((int16_t)(velocity) > 0)) | ((fractVelocityPart > 0) & ((int16_t)(velocity) < 0)) ) {
//         beep(200);
//     }

    dataToSend[17] = (u32_t)sample.altitudefeet >> 0;
    23ec:	4b1b      	ldr	r3, [pc, #108]	; (245c <logSensors+0x138>)
    23ee:	6c18      	ldr	r0, [r3, #64]	; 0x40
    23f0:	6c59      	ldr	r1, [r3, #68]	; 0x44
    23f2:	4b25      	ldr	r3, [pc, #148]	; (2488 <logSensors+0x164>)
    23f4:	4798      	blx	r3
    dataToSend[18] = (u32_t)sample.altitudefeet >> 8;
    23f6:	0a03      	lsrs	r3, r0, #8
    23f8:	74a3      	strb	r3, [r4, #18]
    dataToSend[19] = (u32_t)sample.altitudefeet >> 16;
    23fa:	0c03      	lsrs	r3, r0, #16
    23fc:	74e3      	strb	r3, [r4, #19]
    dataToSend[20] = (u32_t)sample.altitudefeet >> 24;

    float fractionalAccelraw = sample.accelZ - (int16_t)(sample.accelZ);
    23fe:	4b17      	ldr	r3, [pc, #92]	; (245c <logSensors+0x138>)

//     if ( ((fractVelocityPart < 0) & ((int16_t)(velocity) > 0)) | ((fractVelocityPart > 0) & ((int16_t)(velocity) < 0)) ) {
//         beep(200);
//     }

    dataToSend[17] = (u32_t)sample.altitudefeet >> 0;
    2400:	7460      	strb	r0, [r4, #17]
    dataToSend[18] = (u32_t)sample.altitudefeet >> 8;
    dataToSend[19] = (u32_t)sample.altitudefeet >> 16;
    dataToSend[20] = (u32_t)sample.altitudefeet >> 24;

    float fractionalAccelraw = sample.accelZ - (int16_t)(sample.accelZ);
    2402:	6a9d      	ldr	r5, [r3, #40]	; 0x28
//     }

    dataToSend[17] = (u32_t)sample.altitudefeet >> 0;
    dataToSend[18] = (u32_t)sample.altitudefeet >> 8;
    dataToSend[19] = (u32_t)sample.altitudefeet >> 16;
    dataToSend[20] = (u32_t)sample.altitudefeet >> 24;
    2404:	0e00      	lsrs	r0, r0, #24
    2406:	7520      	strb	r0, [r4, #20]

    float fractionalAccelraw = sample.accelZ - (int16_t)(sample.accelZ);
    2408:	1c28      	adds	r0, r5, #0
    240a:	47b8      	blx	r7
    240c:	b200      	sxth	r0, r0
    u8_t fractAccelRawPart = fractionalAccelraw;

    dataToSend[21] = (int16_t)(sample.accelZ) >> 0;
    dataToSend[22] = (int16_t)(sample.accelZ) >> 8;
    240e:	1203      	asrs	r3, r0, #8
    2410:	75a3      	strb	r3, [r4, #22]
    dataToSend[20] = (u32_t)sample.altitudefeet >> 24;

    float fractionalAccelraw = sample.accelZ - (int16_t)(sample.accelZ);
    u8_t fractAccelRawPart = fractionalAccelraw;

    dataToSend[21] = (int16_t)(sample.accelZ) >> 0;
    2412:	7560      	strb	r0, [r4, #21]
    dataToSend[22] = (int16_t)(sample.accelZ) >> 8;
    dataToSend[23] = fractAccelRawPart;
    2414:	4b1d      	ldr	r3, [pc, #116]	; (248c <logSensors+0x168>)
    2416:	4798      	blx	r3
    2418:	4b1d      	ldr	r3, [pc, #116]	; (2490 <logSensors+0x16c>)
    241a:	1c01      	adds	r1, r0, #0
    241c:	1c28      	adds	r0, r5, #0
    241e:	4798      	blx	r3
    2420:	4b1c      	ldr	r3, [pc, #112]	; (2494 <logSensors+0x170>)
    2422:	4798      	blx	r3
    //dataToSend[21] = my_altimeter->myAnalogAccelerometer.analogRaw >> 0;
    //dataToSend[22] = my_altimeter->myAnalogAccelerometer.analogRaw >> 8;



    makePage(bytesToSend, dataToSend);
    2424:	4b1c      	ldr	r3, [pc, #112]	; (2498 <logSensors+0x174>)
    float fractionalAccelraw = sample.accelZ - (int16_t)(sample.accelZ);
    u8_t fractAccelRawPart = fractionalAccelraw;

    dataToSend[21] = (int16_t)(sample.accelZ) >> 0;
    dataToSend[22] = (int16_t)(sample.accelZ) >> 8;
    dataToSend[23] = fractAccelRawPart;
    2426:	75e0      	strb	r0, [r4, #23]
    //dataToSend[21] = my_altimeter->myAnalogAccelerometer.analogRaw >> 0;
    //dataToSend[22] = my_altimeter->myAnalogAccelerometer.analogRaw >> 8;



    makePage(bytesToSend, dataToSend);
    2428:	0021      	movs	r1, r4
    242a:	2018      	movs	r0, #24
    242c:	4798      	blx	r3

    if (pageReady) {
    242e:	4b1b      	ldr	r3, [pc, #108]	; (249c <logSensors+0x178>)
    2430:	781a      	ldrb	r2, [r3, #0]
    2432:	2a00      	cmp	r2, #0
    2434:	d00e      	beq.n	2454 <logSensors+0x130>
        pageReady = false;
    2436:	2200      	movs	r2, #0
    2438:	701a      	strb	r2, [r3, #0]
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
}


inline static void pinToggle(Pin p) {
    PORT->Group[p.group].OUTTGL.reg = (1<<p.pin);
    243a:	2280      	movs	r2, #128	; 0x80
    243c:	4b18      	ldr	r3, [pc, #96]	; (24a0 <logSensors+0x17c>)
        pinToggle(LedPin);
        u8_t bytesWritten = AT25SEWritePage(currentAddress,pageToWrite);
    243e:	4c19      	ldr	r4, [pc, #100]	; (24a4 <logSensors+0x180>)
    2440:	0352      	lsls	r2, r2, #13
    2442:	61da      	str	r2, [r3, #28]
    2444:	4918      	ldr	r1, [pc, #96]	; (24a8 <logSensors+0x184>)
    2446:	4b19      	ldr	r3, [pc, #100]	; (24ac <logSensors+0x188>)
    2448:	6820      	ldr	r0, [r4, #0]
    244a:	4798      	blx	r3
        currentAddress = (currentAddress + 0x100);
    244c:	6823      	ldr	r3, [r4, #0]
    244e:	3301      	adds	r3, #1
    2450:	33ff      	adds	r3, #255	; 0xff
    2452:	6023      	str	r3, [r4, #0]
    }
}
    2454:	b00b      	add	sp, #44	; 0x2c
    2456:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2458:	20000522 	.word	0x20000522
    245c:	200007e8 	.word	0x200007e8
    2460:	00000acd 	.word	0x00000acd
    2464:	200006a8 	.word	0x200006a8
    2468:	00006121 	.word	0x00006121
    246c:	0000618d 	.word	0x0000618d
    2470:	00005a39 	.word	0x00005a39
    2474:	00006329 	.word	0x00006329
    2478:	0000409d 	.word	0x0000409d
    247c:	447a0000 	.word	0x447a0000
    2480:	000045d1 	.word	0x000045d1
    2484:	200006b0 	.word	0x200006b0
    2488:	00004061 	.word	0x00004061
    248c:	00004615 	.word	0x00004615
    2490:	000042c5 	.word	0x000042c5
    2494:	00004031 	.word	0x00004031
    2498:	000021e5 	.word	0x000021e5
    249c:	200007d8 	.word	0x200007d8
    24a0:	41004400 	.word	0x41004400
    24a4:	200007dc 	.word	0x200007dc
    24a8:	200006d8 	.word	0x200006d8
    24ac:	0000029d 	.word	0x0000029d

000024b0 <getFlightStartAddress>:

    u8_t addressToCheck[3];

    u16_t flightAddressLoc = FLIGHTZEROSTART + (flightToFind * 0x06);

    AT25SEreadSample(flightAddressLoc, 0x03, addressToCheck);
    24b0:	2306      	movs	r3, #6
    }
}



u32_t getFlightStartAddress(u8_t flightToFind) {
    24b2:	b513      	push	{r0, r1, r4, lr}

    u8_t addressToCheck[3];

    u16_t flightAddressLoc = FLIGHTZEROSTART + (flightToFind * 0x06);

    AT25SEreadSample(flightAddressLoc, 0x03, addressToCheck);
    24b4:	4358      	muls	r0, r3
    24b6:	ac01      	add	r4, sp, #4
    24b8:	3001      	adds	r0, #1
    24ba:	30ff      	adds	r0, #255	; 0xff
    24bc:	0022      	movs	r2, r4
    24be:	2103      	movs	r1, #3
    24c0:	4b04      	ldr	r3, [pc, #16]	; (24d4 <getFlightStartAddress+0x24>)
    24c2:	4798      	blx	r3

    u32_t flightStartAddress = addressToCheck[0] << 0 | addressToCheck[1] << 8 | addressToCheck[2] << 16;
    24c4:	7860      	ldrb	r0, [r4, #1]
    24c6:	78a3      	ldrb	r3, [r4, #2]
    24c8:	0200      	lsls	r0, r0, #8
    24ca:	041b      	lsls	r3, r3, #16
    24cc:	4318      	orrs	r0, r3
    24ce:	7823      	ldrb	r3, [r4, #0]
    24d0:	4318      	orrs	r0, r3

    return flightStartAddress;
}
    24d2:	bd16      	pop	{r1, r2, r4, pc}
    24d4:	000002f9 	.word	0x000002f9

000024d8 <FindFlightEndingAddress>:

    u8_t addressToCheck[3];

    u16_t flightAddressLoc = FLIGHTZEROEND + (findThisFlightsEnd * 0x06);

    AT25SEreadSample(flightAddressLoc, 0x03, addressToCheck);
    24d8:	2306      	movs	r3, #6
    u32_t flightStartAddress = addressToCheck[0] << 0 | addressToCheck[1] << 8 | addressToCheck[2] << 16;

    return flightStartAddress;
}

u32_t FindFlightEndingAddress(u8_t findThisFlightsEnd) {
    24da:	b513      	push	{r0, r1, r4, lr}

    u8_t addressToCheck[3];

    u16_t flightAddressLoc = FLIGHTZEROEND + (findThisFlightsEnd * 0x06);

    AT25SEreadSample(flightAddressLoc, 0x03, addressToCheck);
    24dc:	4358      	muls	r0, r3
    24de:	ac01      	add	r4, sp, #4
    24e0:	3004      	adds	r0, #4
    24e2:	30ff      	adds	r0, #255	; 0xff
    24e4:	0022      	movs	r2, r4
    24e6:	2103      	movs	r1, #3
    24e8:	4b04      	ldr	r3, [pc, #16]	; (24fc <FindFlightEndingAddress+0x24>)
    24ea:	4798      	blx	r3

    u32_t flightEndAddress = addressToCheck[0] << 0 | addressToCheck[1] << 8 | addressToCheck[2] << 16;
    24ec:	7860      	ldrb	r0, [r4, #1]
    24ee:	78a3      	ldrb	r3, [r4, #2]
    24f0:	0200      	lsls	r0, r0, #8
    24f2:	041b      	lsls	r3, r3, #16
    24f4:	4318      	orrs	r0, r3
    24f6:	7823      	ldrb	r3, [r4, #0]
    24f8:	4318      	orrs	r0, r3

    return flightEndAddress;
}
    24fa:	bd16      	pop	{r1, r2, r4, pc}
    24fc:	000002f9 	.word	0x000002f9

00002500 <isFlightLogged>:

bool isFlightLogged(u8_t flightNumbToCheck) {
    2500:	b510      	push	{r4, lr}

    u32_t possibleStart = getFlightStartAddress(flightNumbToCheck);
    2502:	4b04      	ldr	r3, [pc, #16]	; (2514 <isFlightLogged+0x14>)
    2504:	4798      	blx	r3
    2506:	4b04      	ldr	r3, [pc, #16]	; (2518 <isFlightLogged+0x18>)
    if (possibleStart == 0xFFFFFF) {
        return false;
    } else {
        return true;
    }
}
    2508:	18c0      	adds	r0, r0, r3
    250a:	1e43      	subs	r3, r0, #1
    250c:	4198      	sbcs	r0, r3
    250e:	b2c0      	uxtb	r0, r0
    2510:	bd10      	pop	{r4, pc}
    2512:	46c0      	nop			; (mov r8, r8)
    2514:	000024b1 	.word	0x000024b1
    2518:	ff000001 	.word	0xff000001

0000251c <writeFlightEndAddress>:


void writeFlightEndAddress() {
    251c:	b507      	push	{r0, r1, r2, lr}
    u32_t endingAddress = currentAddress;

    u8_t address[3] = {endingAddress >> 0, endingAddress >> 8, endingAddress >> 16};

    u16_t flightAddressLoc = FLIGHTZEROEND + (flightNumb * 0x06);
    AT25SFWriteBytes(flightAddressLoc, 3, address);
    251e:	2006      	movs	r0, #6
}


void writeFlightEndAddress() {

    u32_t endingAddress = currentAddress;
    2520:	4b09      	ldr	r3, [pc, #36]	; (2548 <writeFlightEndAddress+0x2c>)

    u8_t address[3] = {endingAddress >> 0, endingAddress >> 8, endingAddress >> 16};
    2522:	aa01      	add	r2, sp, #4
}


void writeFlightEndAddress() {

    u32_t endingAddress = currentAddress;
    2524:	681b      	ldr	r3, [r3, #0]

    u8_t address[3] = {endingAddress >> 0, endingAddress >> 8, endingAddress >> 16};
    2526:	7013      	strb	r3, [r2, #0]
    2528:	0a19      	lsrs	r1, r3, #8
    252a:	0c1b      	lsrs	r3, r3, #16
    252c:	7093      	strb	r3, [r2, #2]

    u16_t flightAddressLoc = FLIGHTZEROEND + (flightNumb * 0x06);
    252e:	4b07      	ldr	r3, [pc, #28]	; (254c <writeFlightEndAddress+0x30>)

void writeFlightEndAddress() {

    u32_t endingAddress = currentAddress;

    u8_t address[3] = {endingAddress >> 0, endingAddress >> 8, endingAddress >> 16};
    2530:	7051      	strb	r1, [r2, #1]

    u16_t flightAddressLoc = FLIGHTZEROEND + (flightNumb * 0x06);
    AT25SFWriteBytes(flightAddressLoc, 3, address);
    2532:	781b      	ldrb	r3, [r3, #0]
    2534:	2103      	movs	r1, #3
    2536:	4358      	muls	r0, r3
    2538:	3004      	adds	r0, #4
    253a:	30ff      	adds	r0, #255	; 0xff
    253c:	4b04      	ldr	r3, [pc, #16]	; (2550 <writeFlightEndAddress+0x34>)
    253e:	4798      	blx	r3
    delay_ms(10);
    2540:	200a      	movs	r0, #10
    2542:	4b04      	ldr	r3, [pc, #16]	; (2554 <writeFlightEndAddress+0x38>)
    2544:	4798      	blx	r3

}
    2546:	bd07      	pop	{r0, r1, r2, pc}
    2548:	200007dc 	.word	0x200007dc
    254c:	20000523 	.word	0x20000523
    2550:	00000241 	.word	0x00000241
    2554:	00000fc9 	.word	0x00000fc9

00002558 <findNewFlightStart>:




void findNewFlightStart() {
    2558:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

    for (u8_t flightNumbToCheck = 0; flightNumbToCheck < 20; ++flightNumbToCheck) {
    255a:	2400      	movs	r4, #0

        if (!isFlightLogged(flightNumbToCheck)) {
    255c:	0020      	movs	r0, r4
    255e:	4b23      	ldr	r3, [pc, #140]	; (25ec <findNewFlightStart+0x94>)
    2560:	4798      	blx	r3
    2562:	2800      	cmp	r0, #0
    2564:	d13d      	bne.n	25e2 <findNewFlightStart+0x8a>
    2566:	4f22      	ldr	r7, [pc, #136]	; (25f0 <findNewFlightStart+0x98>)
    2568:	ad01      	add	r5, sp, #4

            if (flightNumbToCheck > 0) {
    256a:	2c00      	cmp	r4, #0
    256c:	d016      	beq.n	259c <findNewFlightStart+0x44>

                u32_t startAddress = FindFlightEndingAddress(flightNumbToCheck - 1);
    256e:	1e60      	subs	r0, r4, #1
    2570:	4b20      	ldr	r3, [pc, #128]	; (25f4 <findNewFlightStart+0x9c>)
    2572:	b2c0      	uxtb	r0, r0
    2574:	4798      	blx	r3
                delay_ms(5);
    2576:	4b20      	ldr	r3, [pc, #128]	; (25f8 <findNewFlightStart+0xa0>)

        if (!isFlightLogged(flightNumbToCheck)) {

            if (flightNumbToCheck > 0) {

                u32_t startAddress = FindFlightEndingAddress(flightNumbToCheck - 1);
    2578:	0006      	movs	r6, r0
                delay_ms(5);
    257a:	2005      	movs	r0, #5
    257c:	4798      	blx	r3
                currentAddress = startAddress;

                u8_t address[3] = {startAddress >> 0, startAddress >> 8, startAddress >> 16};

                u16_t flightAddressLoc = FLIGHTZEROSTART + (flightNumbToCheck * 0x06);
                AT25SFWriteBytes(flightAddressLoc, 3, address);
    257e:	2006      	movs	r0, #6
    2580:	4360      	muls	r0, r4
                u32_t startAddress = FindFlightEndingAddress(flightNumbToCheck - 1);
                delay_ms(5);

                currentAddress = startAddress;

                u8_t address[3] = {startAddress >> 0, startAddress >> 8, startAddress >> 16};
    2582:	0a33      	lsrs	r3, r6, #8

                u16_t flightAddressLoc = FLIGHTZEROSTART + (flightNumbToCheck * 0x06);
                AT25SFWriteBytes(flightAddressLoc, 3, address);
    2584:	3001      	adds	r0, #1
            if (flightNumbToCheck > 0) {

                u32_t startAddress = FindFlightEndingAddress(flightNumbToCheck - 1);
                delay_ms(5);

                currentAddress = startAddress;
    2586:	603e      	str	r6, [r7, #0]

                u8_t address[3] = {startAddress >> 0, startAddress >> 8, startAddress >> 16};
    2588:	702e      	strb	r6, [r5, #0]
    258a:	706b      	strb	r3, [r5, #1]
    258c:	0c36      	lsrs	r6, r6, #16

                u16_t flightAddressLoc = FLIGHTZEROSTART + (flightNumbToCheck * 0x06);
                AT25SFWriteBytes(flightAddressLoc, 3, address);
    258e:	30ff      	adds	r0, #255	; 0xff
    2590:	002a      	movs	r2, r5
    2592:	2103      	movs	r1, #3
    2594:	4b19      	ldr	r3, [pc, #100]	; (25fc <findNewFlightStart+0xa4>)
                u32_t startAddress = FindFlightEndingAddress(flightNumbToCheck - 1);
                delay_ms(5);

                currentAddress = startAddress;

                u8_t address[3] = {startAddress >> 0, startAddress >> 8, startAddress >> 16};
    2596:	70ae      	strb	r6, [r5, #2]

                u16_t flightAddressLoc = FLIGHTZEROSTART + (flightNumbToCheck * 0x06);
                AT25SFWriteBytes(flightAddressLoc, 3, address);
    2598:	4798      	blx	r3
    259a:	e010      	b.n	25be <findNewFlightStart+0x66>

                // for flight 0, starting address is always 0x00100 (beginning of second 4k block)
            } else {
                u8_t address[3] = {0x00,0x10,0x00};
    259c:	2310      	movs	r3, #16
                AT25SFWriteBytes(FLIGHTZEROSTART, 3, address);
    259e:	2080      	movs	r0, #128	; 0x80
                u16_t flightAddressLoc = FLIGHTZEROSTART + (flightNumbToCheck * 0x06);
                AT25SFWriteBytes(flightAddressLoc, 3, address);

                // for flight 0, starting address is always 0x00100 (beginning of second 4k block)
            } else {
                u8_t address[3] = {0x00,0x10,0x00};
    25a0:	706b      	strb	r3, [r5, #1]
                AT25SFWriteBytes(FLIGHTZEROSTART, 3, address);
    25a2:	0040      	lsls	r0, r0, #1
    25a4:	4b15      	ldr	r3, [pc, #84]	; (25fc <findNewFlightStart+0xa4>)
    25a6:	002a      	movs	r2, r5
    25a8:	2103      	movs	r1, #3
                u16_t flightAddressLoc = FLIGHTZEROSTART + (flightNumbToCheck * 0x06);
                AT25SFWriteBytes(flightAddressLoc, 3, address);

                // for flight 0, starting address is always 0x00100 (beginning of second 4k block)
            } else {
                u8_t address[3] = {0x00,0x10,0x00};
    25aa:	702c      	strb	r4, [r5, #0]
    25ac:	70ac      	strb	r4, [r5, #2]
                AT25SFWriteBytes(FLIGHTZEROSTART, 3, address);
    25ae:	4798      	blx	r3
                currentAddress = 0x001000;
    25b0:	2380      	movs	r3, #128	; 0x80
                beep(1000);
    25b2:	20fa      	movs	r0, #250	; 0xfa

                // for flight 0, starting address is always 0x00100 (beginning of second 4k block)
            } else {
                u8_t address[3] = {0x00,0x10,0x00};
                AT25SFWriteBytes(FLIGHTZEROSTART, 3, address);
                currentAddress = 0x001000;
    25b4:	015b      	lsls	r3, r3, #5
    25b6:	603b      	str	r3, [r7, #0]
                beep(1000);
    25b8:	0080      	lsls	r0, r0, #2
    25ba:	4b11      	ldr	r3, [pc, #68]	; (2600 <findNewFlightStart+0xa8>)
    25bc:	4798      	blx	r3
            }
            flightNumb = flightNumbToCheck;
    25be:	4b11      	ldr	r3, [pc, #68]	; (2604 <findNewFlightStart+0xac>)
    25c0:	701c      	strb	r4, [r3, #0]

            while (flightNumbToCheck > 0) {
                beep(500);
    25c2:	20fa      	movs	r0, #250	; 0xfa
    25c4:	0040      	lsls	r0, r0, #1
                currentAddress = 0x001000;
                beep(1000);
            }
            flightNumb = flightNumbToCheck;

            while (flightNumbToCheck > 0) {
    25c6:	2c00      	cmp	r4, #0
    25c8:	d008      	beq.n	25dc <findNewFlightStart+0x84>
                beep(500);
    25ca:	4b0d      	ldr	r3, [pc, #52]	; (2600 <findNewFlightStart+0xa8>)
    25cc:	4798      	blx	r3
                delay_ms(500);
    25ce:	20fa      	movs	r0, #250	; 0xfa
    25d0:	4b09      	ldr	r3, [pc, #36]	; (25f8 <findNewFlightStart+0xa0>)
    25d2:	0040      	lsls	r0, r0, #1
                --flightNumbToCheck;
    25d4:	3c01      	subs	r4, #1
            }
            flightNumb = flightNumbToCheck;

            while (flightNumbToCheck > 0) {
                beep(500);
                delay_ms(500);
    25d6:	4798      	blx	r3
                --flightNumbToCheck;
    25d8:	b2e4      	uxtb	r4, r4
    25da:	e7f2      	b.n	25c2 <findNewFlightStart+0x6a>
            }
            delay_ms(500);
    25dc:	4b06      	ldr	r3, [pc, #24]	; (25f8 <findNewFlightStart+0xa0>)
    25de:	4798      	blx	r3
            break;
    25e0:	e003      	b.n	25ea <findNewFlightStart+0x92>



void findNewFlightStart() {

    for (u8_t flightNumbToCheck = 0; flightNumbToCheck < 20; ++flightNumbToCheck) {
    25e2:	3401      	adds	r4, #1
    25e4:	b2e4      	uxtb	r4, r4
    25e6:	2c14      	cmp	r4, #20
    25e8:	d1b8      	bne.n	255c <findNewFlightStart+0x4>
            }
            delay_ms(500);
            break;
        }
    }
}
    25ea:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    25ec:	00002501 	.word	0x00002501
    25f0:	200007dc 	.word	0x200007dc
    25f4:	000024d9 	.word	0x000024d9
    25f8:	00000fc9 	.word	0x00000fc9
    25fc:	00000241 	.word	0x00000241
    2600:	00000d39 	.word	0x00000d39
    2604:	20000523 	.word	0x20000523

00002608 <takeSample>:
#include <util.h>
#include <boardDefines.h>
#include <MS5803.h>

bool takeSample() {
    return SampleBool;
    2608:	4b01      	ldr	r3, [pc, #4]	; (2610 <takeSample+0x8>)
    260a:	7818      	ldrb	r0, [r3, #0]
}
    260c:	4770      	bx	lr
    260e:	46c0      	nop			; (mov r8, r8)
    2610:	2000053c 	.word	0x2000053c

00002614 <pullSample>:

void pullSample() {
    SampleBool = true;
    2614:	2201      	movs	r2, #1
    2616:	4b01      	ldr	r3, [pc, #4]	; (261c <pullSample+0x8>)
    2618:	701a      	strb	r2, [r3, #0]
}
    261a:	4770      	bx	lr
    261c:	2000053c 	.word	0x2000053c

00002620 <sampleTick>:
    SampleBool = false;
}

sample_t sample;

void sampleTick() {
    2620:	b5f0      	push	{r4, r5, r6, r7, lr}
    SampleBool = false;
    2622:	2500      	movs	r5, #0
    2624:	4b9e      	ldr	r3, [pc, #632]	; (28a0 <sampleTick+0x280>)
    SampleBool = false;
}

sample_t sample;

void sampleTick() {
    2626:	b087      	sub	sp, #28
    SampleBool = false;

    // take last samples time to discover Dt before setting new time
    sample.tickDelta = millis() - sample.sampleTick;
    2628:	4e9e      	ldr	r6, [pc, #632]	; (28a4 <sampleTick+0x284>)
}

sample_t sample;

void sampleTick() {
    SampleBool = false;
    262a:	701d      	strb	r5, [r3, #0]

    // take last samples time to discover Dt before setting new time
    sample.tickDelta = millis() - sample.sampleTick;
    262c:	47b0      	blx	r6
    262e:	4c9e      	ldr	r4, [pc, #632]	; (28a8 <sampleTick+0x288>)
    2630:	6863      	ldr	r3, [r4, #4]
    2632:	1ac0      	subs	r0, r0, r3
    2634:	8020      	strh	r0, [r4, #0]
    sample.sampleTick = millis();
    2636:	47b0      	blx	r6
    altimeter.flightTime = sample.sampleTick - offsets.StartupTick;
    2638:	4b9c      	ldr	r3, [pc, #624]	; (28ac <sampleTick+0x28c>)

    sample.voltage.batV = adc_read(senseBatPin);
    263a:	4e9d      	ldr	r6, [pc, #628]	; (28b0 <sampleTick+0x290>)
    SampleBool = false;

    // take last samples time to discover Dt before setting new time
    sample.tickDelta = millis() - sample.sampleTick;
    sample.sampleTick = millis();
    altimeter.flightTime = sample.sampleTick - offsets.StartupTick;
    263c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
void sampleTick() {
    SampleBool = false;

    // take last samples time to discover Dt before setting new time
    sample.tickDelta = millis() - sample.sampleTick;
    sample.sampleTick = millis();
    263e:	6060      	str	r0, [r4, #4]
    altimeter.flightTime = sample.sampleTick - offsets.StartupTick;
    2640:	1ac0      	subs	r0, r0, r3
    2642:	4b9c      	ldr	r3, [pc, #624]	; (28b4 <sampleTick+0x294>)

    sample.voltage.batV = adc_read(senseBatPin);
    2644:	7831      	ldrb	r1, [r6, #0]
    SampleBool = false;

    // take last samples time to discover Dt before setting new time
    sample.tickDelta = millis() - sample.sampleTick;
    sample.sampleTick = millis();
    altimeter.flightTime = sample.sampleTick - offsets.StartupTick;
    2646:	6098      	str	r0, [r3, #8]

    sample.voltage.batV = adc_read(senseBatPin);
    2648:	7873      	ldrb	r3, [r6, #1]
    264a:	78b0      	ldrb	r0, [r6, #2]
    264c:	021b      	lsls	r3, r3, #8
    264e:	430b      	orrs	r3, r1
    2650:	0400      	lsls	r0, r0, #16
    2652:	001a      	movs	r2, r3
    2654:	0003      	movs	r3, r0
    2656:	78f0      	ldrb	r0, [r6, #3]
    2658:	4313      	orrs	r3, r2
    265a:	0600      	lsls	r0, r0, #24
    265c:	7931      	ldrb	r1, [r6, #4]
    265e:	4318      	orrs	r0, r3
    2660:	4b95      	ldr	r3, [pc, #596]	; (28b8 <sampleTick+0x298>)
    2662:	4798      	blx	r3
    sample.voltage.batFloat = sample.voltage.batV * 0.0019;
    2664:	4b95      	ldr	r3, [pc, #596]	; (28bc <sampleTick+0x29c>)
    // take last samples time to discover Dt before setting new time
    sample.tickDelta = millis() - sample.sampleTick;
    sample.sampleTick = millis();
    altimeter.flightTime = sample.sampleTick - offsets.StartupTick;

    sample.voltage.batV = adc_read(senseBatPin);
    2666:	8120      	strh	r0, [r4, #8]
    sample.voltage.batFloat = sample.voltage.batV * 0.0019;
    2668:	4798      	blx	r3
    266a:	4a95      	ldr	r2, [pc, #596]	; (28c0 <sampleTick+0x2a0>)
    266c:	4f95      	ldr	r7, [pc, #596]	; (28c4 <sampleTick+0x2a4>)
    266e:	4b96      	ldr	r3, [pc, #600]	; (28c8 <sampleTick+0x2a8>)
    2670:	47b8      	blx	r7
    2672:	4b96      	ldr	r3, [pc, #600]	; (28cc <sampleTick+0x2ac>)
    2674:	4798      	blx	r3

    sample.voltage.senseA = adc_read(senseAPin);
    2676:	79b3      	ldrb	r3, [r6, #6]
    2678:	7971      	ldrb	r1, [r6, #5]
    sample.tickDelta = millis() - sample.sampleTick;
    sample.sampleTick = millis();
    altimeter.flightTime = sample.sampleTick - offsets.StartupTick;

    sample.voltage.batV = adc_read(senseBatPin);
    sample.voltage.batFloat = sample.voltage.batV * 0.0019;
    267a:	60e0      	str	r0, [r4, #12]

    sample.voltage.senseA = adc_read(senseAPin);
    267c:	79f0      	ldrb	r0, [r6, #7]
    267e:	021b      	lsls	r3, r3, #8
    2680:	430b      	orrs	r3, r1
    2682:	0400      	lsls	r0, r0, #16
    2684:	4303      	orrs	r3, r0
    2686:	7a30      	ldrb	r0, [r6, #8]
    2688:	7a71      	ldrb	r1, [r6, #9]
    268a:	0600      	lsls	r0, r0, #24
    268c:	4318      	orrs	r0, r3
    268e:	4b8a      	ldr	r3, [pc, #552]	; (28b8 <sampleTick+0x298>)
    2690:	4798      	blx	r3
    sample.voltage.senseB = adc_read(senseBPin);
    2692:	7af3      	ldrb	r3, [r6, #11]
    2694:	7ab1      	ldrb	r1, [r6, #10]
    altimeter.flightTime = sample.sampleTick - offsets.StartupTick;

    sample.voltage.batV = adc_read(senseBatPin);
    sample.voltage.batFloat = sample.voltage.batV * 0.0019;

    sample.voltage.senseA = adc_read(senseAPin);
    2696:	8220      	strh	r0, [r4, #16]
    sample.voltage.senseB = adc_read(senseBPin);
    2698:	7b30      	ldrb	r0, [r6, #12]
    269a:	021b      	lsls	r3, r3, #8
    269c:	430b      	orrs	r3, r1
    269e:	0400      	lsls	r0, r0, #16
    26a0:	4303      	orrs	r3, r0
    26a2:	7b70      	ldrb	r0, [r6, #13]
    26a4:	7bb1      	ldrb	r1, [r6, #14]
    26a6:	0600      	lsls	r0, r0, #24
    26a8:	4318      	orrs	r0, r3
    26aa:	4b83      	ldr	r3, [pc, #524]	; (28b8 <sampleTick+0x298>)
    26ac:	4798      	blx	r3
    sample.voltage.senseC = adc_read(senseCPin);
    26ae:	7c33      	ldrb	r3, [r6, #16]
    26b0:	7bf1      	ldrb	r1, [r6, #15]

    sample.voltage.batV = adc_read(senseBatPin);
    sample.voltage.batFloat = sample.voltage.batV * 0.0019;

    sample.voltage.senseA = adc_read(senseAPin);
    sample.voltage.senseB = adc_read(senseBPin);
    26b2:	8260      	strh	r0, [r4, #18]
    sample.voltage.senseC = adc_read(senseCPin);
    26b4:	7c70      	ldrb	r0, [r6, #17]
    26b6:	021b      	lsls	r3, r3, #8
    26b8:	430b      	orrs	r3, r1
    26ba:	0400      	lsls	r0, r0, #16
    26bc:	4303      	orrs	r3, r0
    26be:	7cb0      	ldrb	r0, [r6, #18]
    26c0:	7cf1      	ldrb	r1, [r6, #19]
    26c2:	0600      	lsls	r0, r0, #24
    26c4:	4318      	orrs	r0, r3
    26c6:	4b7c      	ldr	r3, [pc, #496]	; (28b8 <sampleTick+0x298>)
    26c8:	4798      	blx	r3
    sample.voltage.senseD = adc_read(senseDPin);
    26ca:	7d73      	ldrb	r3, [r6, #21]
    26cc:	7d31      	ldrb	r1, [r6, #20]
    sample.voltage.batV = adc_read(senseBatPin);
    sample.voltage.batFloat = sample.voltage.batV * 0.0019;

    sample.voltage.senseA = adc_read(senseAPin);
    sample.voltage.senseB = adc_read(senseBPin);
    sample.voltage.senseC = adc_read(senseCPin);
    26ce:	82a0      	strh	r0, [r4, #20]
    sample.voltage.senseD = adc_read(senseDPin);
    26d0:	7db0      	ldrb	r0, [r6, #22]
    26d2:	021b      	lsls	r3, r3, #8
    26d4:	430b      	orrs	r3, r1
    26d6:	0400      	lsls	r0, r0, #16
    26d8:	001a      	movs	r2, r3
    26da:	0003      	movs	r3, r0
    26dc:	7df0      	ldrb	r0, [r6, #23]
    26de:	4313      	orrs	r3, r2
    26e0:	0600      	lsls	r0, r0, #24
    26e2:	7e31      	ldrb	r1, [r6, #24]
    26e4:	4318      	orrs	r0, r3
    26e6:	4b74      	ldr	r3, [pc, #464]	; (28b8 <sampleTick+0x298>)
    26e8:	4798      	blx	r3

    sample.analogRaw = adc_read(analogAccelPin);
    26ea:	7eb3      	ldrb	r3, [r6, #26]
    26ec:	7e71      	ldrb	r1, [r6, #25]
    sample.voltage.batFloat = sample.voltage.batV * 0.0019;

    sample.voltage.senseA = adc_read(senseAPin);
    sample.voltage.senseB = adc_read(senseBPin);
    sample.voltage.senseC = adc_read(senseCPin);
    sample.voltage.senseD = adc_read(senseDPin);
    26ee:	82e0      	strh	r0, [r4, #22]

    sample.analogRaw = adc_read(analogAccelPin);
    26f0:	7ef0      	ldrb	r0, [r6, #27]
    26f2:	021b      	lsls	r3, r3, #8
    26f4:	430b      	orrs	r3, r1
    26f6:	0400      	lsls	r0, r0, #16
    26f8:	4303      	orrs	r3, r0
    26fa:	7f30      	ldrb	r0, [r6, #28]
    26fc:	7f71      	ldrb	r1, [r6, #29]
    26fe:	0600      	lsls	r0, r0, #24
    2700:	4318      	orrs	r0, r3
    2702:	4b6d      	ldr	r3, [pc, #436]	; (28b8 <sampleTick+0x298>)
    2704:	4798      	blx	r3
    sample.analogAccel = (sample.analogRaw - 3900) * -0.0154;
    2706:	4b72      	ldr	r3, [pc, #456]	; (28d0 <sampleTick+0x2b0>)
    sample.voltage.senseA = adc_read(senseAPin);
    sample.voltage.senseB = adc_read(senseBPin);
    sample.voltage.senseC = adc_read(senseCPin);
    sample.voltage.senseD = adc_read(senseDPin);

    sample.analogRaw = adc_read(analogAccelPin);
    2708:	8320      	strh	r0, [r4, #24]
    sample.analogAccel = (sample.analogRaw - 3900) * -0.0154;
    270a:	18c0      	adds	r0, r0, r3
    270c:	4b6b      	ldr	r3, [pc, #428]	; (28bc <sampleTick+0x29c>)
    270e:	4798      	blx	r3
    2710:	4a70      	ldr	r2, [pc, #448]	; (28d4 <sampleTick+0x2b4>)
    2712:	4e6c      	ldr	r6, [pc, #432]	; (28c4 <sampleTick+0x2a4>)
    2714:	4b70      	ldr	r3, [pc, #448]	; (28d8 <sampleTick+0x2b8>)
    2716:	47b0      	blx	r6
    2718:	4b6c      	ldr	r3, [pc, #432]	; (28cc <sampleTick+0x2ac>)
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    271a:	2680      	movs	r6, #128	; 0x80
    271c:	4798      	blx	r3
    271e:	4b6f      	ldr	r3, [pc, #444]	; (28dc <sampleTick+0x2bc>)
    2720:	01f6      	lsls	r6, r6, #7
    2722:	61e0      	str	r0, [r4, #28]


    pinLow(cs_baro);
    spiDataOut(BARO_SPI, 0x50);
    2724:	2150      	movs	r1, #80	; 0x50
    2726:	615e      	str	r6, [r3, #20]
    2728:	2002      	movs	r0, #2
    272a:	4b6d      	ldr	r3, [pc, #436]	; (28e0 <sampleTick+0x2c0>)
    272c:	4798      	blx	r3
    pinHigh(cs_baro);
    delay_us(600);
    272e:	2096      	movs	r0, #150	; 0x96
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    2730:	4b6a      	ldr	r3, [pc, #424]	; (28dc <sampleTick+0x2bc>)
    2732:	0080      	lsls	r0, r0, #2
    2734:	619e      	str	r6, [r3, #24]
    2736:	4b6b      	ldr	r3, [pc, #428]	; (28e4 <sampleTick+0x2c4>)
    2738:	4798      	blx	r3
    uint32_t tempRaw = readMS5803AdcResults();
    273a:	4b6b      	ldr	r3, [pc, #428]	; (28e8 <sampleTick+0x2c8>)
    273c:	4798      	blx	r3
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    273e:	4b67      	ldr	r3, [pc, #412]	; (28dc <sampleTick+0x2bc>)
    2740:	9001      	str	r0, [sp, #4]

    pinLow(cs_baro);
    spiDataOut(BARO_SPI, 0x40);
    2742:	2140      	movs	r1, #64	; 0x40
    2744:	615e      	str	r6, [r3, #20]
    2746:	2002      	movs	r0, #2
    2748:	4b65      	ldr	r3, [pc, #404]	; (28e0 <sampleTick+0x2c0>)
    274a:	4798      	blx	r3
    274c:	2280      	movs	r2, #128	; 0x80
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    274e:	4b63      	ldr	r3, [pc, #396]	; (28dc <sampleTick+0x2bc>)
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    2750:	00d2      	lsls	r2, r2, #3
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    2752:	619e      	str	r6, [r3, #24]
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    2754:	3394      	adds	r3, #148	; 0x94
    2756:	601a      	str	r2, [r3, #0]

    u8_t byteOne;
    u8_t byteTwo;
// Accel data
    pinLow(cs_accel);
    spiDataOut(ACCEL_SPI, BMI055_X_ACC_LSB | BMI055_READ_REG);
    2758:	2182      	movs	r1, #130	; 0x82
    275a:	4b61      	ldr	r3, [pc, #388]	; (28e0 <sampleTick+0x2c0>)
    275c:	0028      	movs	r0, r5
    275e:	4798      	blx	r3
    byteOne = spiDataIn(ACCEL_SPI);
    2760:	4e62      	ldr	r6, [pc, #392]	; (28ec <sampleTick+0x2cc>)
    2762:	0028      	movs	r0, r5
    2764:	47b0      	blx	r6
    2766:	0007      	movs	r7, r0
    byteTwo = spiDataIn(ACCEL_SPI);
    2768:	0028      	movs	r0, r5
    276a:	47b0      	blx	r6
    sample.altitudefeet = paToFeetNOAA(sample.pressureMbar);
}

int16_t twosComp(u8_t byteOne, u8_t byteTwo) {

    u16_t comp = byteOne | (byteTwo << 8);
    276c:	0200      	lsls	r0, r0, #8
    276e:	4307      	orrs	r7, r0
    2770:	b23b      	sxth	r3, r7
    pinLow(cs_accel);
    spiDataOut(ACCEL_SPI, BMI055_X_ACC_LSB | BMI055_READ_REG);
    byteOne = spiDataIn(ACCEL_SPI);
    byteTwo = spiDataIn(ACCEL_SPI);
    int16_t accelXint = twosComp(byteOne,byteTwo);
    byteOne = spiDataIn(ACCEL_SPI);
    2772:	0028      	movs	r0, r5
    sample.altitudefeet = paToFeetNOAA(sample.pressureMbar);
}

int16_t twosComp(u8_t byteOne, u8_t byteTwo) {

    u16_t comp = byteOne | (byteTwo << 8);
    2774:	9303      	str	r3, [sp, #12]
    pinLow(cs_accel);
    spiDataOut(ACCEL_SPI, BMI055_X_ACC_LSB | BMI055_READ_REG);
    byteOne = spiDataIn(ACCEL_SPI);
    byteTwo = spiDataIn(ACCEL_SPI);
    int16_t accelXint = twosComp(byteOne,byteTwo);
    byteOne = spiDataIn(ACCEL_SPI);
    2776:	47b0      	blx	r6
    2778:	0007      	movs	r7, r0
    byteTwo = spiDataIn(ACCEL_SPI);
    277a:	0028      	movs	r0, r5
    277c:	47b0      	blx	r6
    sample.altitudefeet = paToFeetNOAA(sample.pressureMbar);
}

int16_t twosComp(u8_t byteOne, u8_t byteTwo) {

    u16_t comp = byteOne | (byteTwo << 8);
    277e:	0200      	lsls	r0, r0, #8
    2780:	4307      	orrs	r7, r0
    2782:	b23b      	sxth	r3, r7
    byteTwo = spiDataIn(ACCEL_SPI);
    int16_t accelXint = twosComp(byteOne,byteTwo);
    byteOne = spiDataIn(ACCEL_SPI);
    byteTwo = spiDataIn(ACCEL_SPI);
    int16_t accelYint = twosComp(byteOne,byteTwo);
    byteOne = spiDataIn(ACCEL_SPI);
    2784:	0028      	movs	r0, r5
    sample.altitudefeet = paToFeetNOAA(sample.pressureMbar);
}

int16_t twosComp(u8_t byteOne, u8_t byteTwo) {

    u16_t comp = byteOne | (byteTwo << 8);
    2786:	9302      	str	r3, [sp, #8]
    byteTwo = spiDataIn(ACCEL_SPI);
    int16_t accelXint = twosComp(byteOne,byteTwo);
    byteOne = spiDataIn(ACCEL_SPI);
    byteTwo = spiDataIn(ACCEL_SPI);
    int16_t accelYint = twosComp(byteOne,byteTwo);
    byteOne = spiDataIn(ACCEL_SPI);
    2788:	47b0      	blx	r6
    278a:	9004      	str	r0, [sp, #16]
    byteTwo = spiDataIn(ACCEL_SPI);
    278c:	0028      	movs	r0, r5
    278e:	47b0      	blx	r6
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    2790:	2280      	movs	r2, #128	; 0x80
    2792:	4b52      	ldr	r3, [pc, #328]	; (28dc <sampleTick+0x2bc>)
    2794:	00d2      	lsls	r2, r2, #3
    2796:	3398      	adds	r3, #152	; 0x98
    2798:	9005      	str	r0, [sp, #20]
    279a:	601a      	str	r2, [r3, #0]

    accelXint =  accelXint >> 4;
    accelYint =  accelYint >> 4;
    accelZint =  accelZint >> 4;

    sample.accelX =  accelXint * BMI055_ACCEL_16G_DIV;
    279c:	9b03      	ldr	r3, [sp, #12]
    279e:	1118      	asrs	r0, r3, #4
    27a0:	4b46      	ldr	r3, [pc, #280]	; (28bc <sampleTick+0x29c>)
    27a2:	4798      	blx	r3
    27a4:	23fe      	movs	r3, #254	; 0xfe
    27a6:	2200      	movs	r2, #0
    27a8:	4f46      	ldr	r7, [pc, #280]	; (28c4 <sampleTick+0x2a4>)
    27aa:	059b      	lsls	r3, r3, #22
    27ac:	47b8      	blx	r7
    27ae:	4b47      	ldr	r3, [pc, #284]	; (28cc <sampleTick+0x2ac>)
    27b0:	4798      	blx	r3
    sample.accelY =  accelYint * BMI055_ACCEL_16G_DIV;
    27b2:	9b02      	ldr	r3, [sp, #8]

    accelXint =  accelXint >> 4;
    accelYint =  accelYint >> 4;
    accelZint =  accelZint >> 4;

    sample.accelX =  accelXint * BMI055_ACCEL_16G_DIV;
    27b4:	6220      	str	r0, [r4, #32]
    sample.accelY =  accelYint * BMI055_ACCEL_16G_DIV;
    27b6:	1118      	asrs	r0, r3, #4
    27b8:	4b40      	ldr	r3, [pc, #256]	; (28bc <sampleTick+0x29c>)
    27ba:	4798      	blx	r3
    27bc:	23fe      	movs	r3, #254	; 0xfe
    27be:	2200      	movs	r2, #0
    27c0:	059b      	lsls	r3, r3, #22
    27c2:	47b8      	blx	r7
    27c4:	4b41      	ldr	r3, [pc, #260]	; (28cc <sampleTick+0x2ac>)
    27c6:	4798      	blx	r3
    sample.accelZ = accelZint * BMI055_ACCEL_16G_DIV;
    27c8:	9b05      	ldr	r3, [sp, #20]
    accelXint =  accelXint >> 4;
    accelYint =  accelYint >> 4;
    accelZint =  accelZint >> 4;

    sample.accelX =  accelXint * BMI055_ACCEL_16G_DIV;
    sample.accelY =  accelYint * BMI055_ACCEL_16G_DIV;
    27ca:	6260      	str	r0, [r4, #36]	; 0x24
    sample.accelZ = accelZint * BMI055_ACCEL_16G_DIV;
    27cc:	021f      	lsls	r7, r3, #8
    27ce:	9b04      	ldr	r3, [sp, #16]
    27d0:	431f      	orrs	r7, r3
    27d2:	b238      	sxth	r0, r7
    27d4:	4b39      	ldr	r3, [pc, #228]	; (28bc <sampleTick+0x29c>)
    27d6:	1100      	asrs	r0, r0, #4
    27d8:	4798      	blx	r3
    27da:	23fe      	movs	r3, #254	; 0xfe
    27dc:	2200      	movs	r2, #0
    27de:	4f39      	ldr	r7, [pc, #228]	; (28c4 <sampleTick+0x2a4>)
    27e0:	059b      	lsls	r3, r3, #22
    27e2:	47b8      	blx	r7
    27e4:	4b39      	ldr	r3, [pc, #228]	; (28cc <sampleTick+0x2ac>)
    27e6:	4798      	blx	r3
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    27e8:	2280      	movs	r2, #128	; 0x80
    27ea:	4b3c      	ldr	r3, [pc, #240]	; (28dc <sampleTick+0x2bc>)
    27ec:	00d2      	lsls	r2, r2, #3

    // Gyro data
    pinLow(cs_gyro);
    spiDataOut(GYRO_SPI, BMI055_X_GYRO_LSB | BMI055_READ_REG);
    27ee:	2182      	movs	r1, #130	; 0x82
    accelYint =  accelYint >> 4;
    accelZint =  accelZint >> 4;

    sample.accelX =  accelXint * BMI055_ACCEL_16G_DIV;
    sample.accelY =  accelYint * BMI055_ACCEL_16G_DIV;
    sample.accelZ = accelZint * BMI055_ACCEL_16G_DIV;
    27f0:	62a0      	str	r0, [r4, #40]	; 0x28
    27f2:	615a      	str	r2, [r3, #20]

    // Gyro data
    pinLow(cs_gyro);
    spiDataOut(GYRO_SPI, BMI055_X_GYRO_LSB | BMI055_READ_REG);
    27f4:	0028      	movs	r0, r5
    27f6:	4b3a      	ldr	r3, [pc, #232]	; (28e0 <sampleTick+0x2c0>)
    27f8:	4798      	blx	r3
    byteOne = spiDataIn(GYRO_SPI);
    27fa:	0028      	movs	r0, r5
    27fc:	47b0      	blx	r6
    27fe:	0007      	movs	r7, r0
    byteTwo = spiDataIn(GYRO_SPI);
    2800:	0028      	movs	r0, r5
    2802:	47b0      	blx	r6
    sample.altitudefeet = paToFeetNOAA(sample.pressureMbar);
}

int16_t twosComp(u8_t byteOne, u8_t byteTwo) {

    u16_t comp = byteOne | (byteTwo << 8);
    2804:	0200      	lsls	r0, r0, #8
    2806:	4307      	orrs	r7, r0
    2808:	b23b      	sxth	r3, r7
    pinLow(cs_gyro);
    spiDataOut(GYRO_SPI, BMI055_X_GYRO_LSB | BMI055_READ_REG);
    byteOne = spiDataIn(GYRO_SPI);
    byteTwo = spiDataIn(GYRO_SPI);
    int16_t gyroXint = twosComp(byteOne,byteTwo);
    byteOne = spiDataIn(GYRO_SPI);
    280a:	0028      	movs	r0, r5
    sample.altitudefeet = paToFeetNOAA(sample.pressureMbar);
}

int16_t twosComp(u8_t byteOne, u8_t byteTwo) {

    u16_t comp = byteOne | (byteTwo << 8);
    280c:	9303      	str	r3, [sp, #12]
    pinLow(cs_gyro);
    spiDataOut(GYRO_SPI, BMI055_X_GYRO_LSB | BMI055_READ_REG);
    byteOne = spiDataIn(GYRO_SPI);
    byteTwo = spiDataIn(GYRO_SPI);
    int16_t gyroXint = twosComp(byteOne,byteTwo);
    byteOne = spiDataIn(GYRO_SPI);
    280e:	47b0      	blx	r6
    2810:	0007      	movs	r7, r0
    byteTwo = spiDataIn(GYRO_SPI);
    2812:	0028      	movs	r0, r5
    2814:	47b0      	blx	r6
    sample.altitudefeet = paToFeetNOAA(sample.pressureMbar);
}

int16_t twosComp(u8_t byteOne, u8_t byteTwo) {

    u16_t comp = byteOne | (byteTwo << 8);
    2816:	0200      	lsls	r0, r0, #8
    2818:	4307      	orrs	r7, r0
    281a:	b23b      	sxth	r3, r7
    byteTwo = spiDataIn(GYRO_SPI);
    int16_t gyroXint = twosComp(byteOne,byteTwo);
    byteOne = spiDataIn(GYRO_SPI);
    byteTwo = spiDataIn(GYRO_SPI);
    int16_t gyroYint = twosComp(byteOne,byteTwo);
    byteOne = spiDataIn(GYRO_SPI);
    281c:	0028      	movs	r0, r5
    sample.altitudefeet = paToFeetNOAA(sample.pressureMbar);
}

int16_t twosComp(u8_t byteOne, u8_t byteTwo) {

    u16_t comp = byteOne | (byteTwo << 8);
    281e:	9302      	str	r3, [sp, #8]
    byteTwo = spiDataIn(GYRO_SPI);
    int16_t gyroXint = twosComp(byteOne,byteTwo);
    byteOne = spiDataIn(GYRO_SPI);
    byteTwo = spiDataIn(GYRO_SPI);
    int16_t gyroYint = twosComp(byteOne,byteTwo);
    byteOne = spiDataIn(GYRO_SPI);
    2820:	47b0      	blx	r6
    2822:	0007      	movs	r7, r0
    byteTwo = spiDataIn(GYRO_SPI);
    2824:	0028      	movs	r0, r5
    2826:	47b0      	blx	r6
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    2828:	2280      	movs	r2, #128	; 0x80
    282a:	4b2c      	ldr	r3, [pc, #176]	; (28dc <sampleTick+0x2bc>)
    282c:	00d2      	lsls	r2, r2, #3
    282e:	619a      	str	r2, [r3, #24]

    gyroXint = gyroXint >> 4;
    gyroYint = gyroYint >> 4;
    gyroZint = gyroZint >> 4;

    sample.gyroX =  gyroXint * BMI055_GYRO_2000DS_DIV;
    2830:	9b03      	ldr	r3, [sp, #12]
    int16_t gyroXint = twosComp(byteOne,byteTwo);
    byteOne = spiDataIn(GYRO_SPI);
    byteTwo = spiDataIn(GYRO_SPI);
    int16_t gyroYint = twosComp(byteOne,byteTwo);
    byteOne = spiDataIn(GYRO_SPI);
    byteTwo = spiDataIn(GYRO_SPI);
    2832:	0005      	movs	r5, r0

    gyroXint = gyroXint >> 4;
    gyroYint = gyroYint >> 4;
    gyroZint = gyroZint >> 4;

    sample.gyroX =  gyroXint * BMI055_GYRO_2000DS_DIV;
    2834:	1118      	asrs	r0, r3, #4
    2836:	4b21      	ldr	r3, [pc, #132]	; (28bc <sampleTick+0x29c>)
    2838:	4798      	blx	r3
    283a:	23fe      	movs	r3, #254	; 0xfe
    283c:	4e21      	ldr	r6, [pc, #132]	; (28c4 <sampleTick+0x2a4>)
    283e:	2200      	movs	r2, #0
    2840:	059b      	lsls	r3, r3, #22
    2842:	47b0      	blx	r6
    2844:	4b21      	ldr	r3, [pc, #132]	; (28cc <sampleTick+0x2ac>)
    2846:	4798      	blx	r3
    sample.gyroY =  gyroYint * BMI055_GYRO_2000DS_DIV;
    2848:	9b02      	ldr	r3, [sp, #8]

    gyroXint = gyroXint >> 4;
    gyroYint = gyroYint >> 4;
    gyroZint = gyroZint >> 4;

    sample.gyroX =  gyroXint * BMI055_GYRO_2000DS_DIV;
    284a:	62e0      	str	r0, [r4, #44]	; 0x2c
    sample.gyroY =  gyroYint * BMI055_GYRO_2000DS_DIV;
    284c:	1118      	asrs	r0, r3, #4
    284e:	4b1b      	ldr	r3, [pc, #108]	; (28bc <sampleTick+0x29c>)
    2850:	4798      	blx	r3
    2852:	23fe      	movs	r3, #254	; 0xfe
    2854:	2200      	movs	r2, #0
    2856:	059b      	lsls	r3, r3, #22
    2858:	47b0      	blx	r6
    285a:	4b1c      	ldr	r3, [pc, #112]	; (28cc <sampleTick+0x2ac>)
    285c:	4798      	blx	r3
    285e:	6320      	str	r0, [r4, #48]	; 0x30
    sample.gyroZ =  gyroZint * BMI055_GYRO_2000DS_DIV;
    2860:	0228      	lsls	r0, r5, #8
    2862:	4307      	orrs	r7, r0
    2864:	b238      	sxth	r0, r7
    2866:	4b15      	ldr	r3, [pc, #84]	; (28bc <sampleTick+0x29c>)
    2868:	1100      	asrs	r0, r0, #4
    286a:	4798      	blx	r3
    286c:	23fe      	movs	r3, #254	; 0xfe
    286e:	2200      	movs	r2, #0
    2870:	059b      	lsls	r3, r3, #22
    2872:	47b0      	blx	r6
    2874:	4b15      	ldr	r3, [pc, #84]	; (28cc <sampleTick+0x2ac>)
    2876:	4798      	blx	r3
    2878:	6360      	str	r0, [r4, #52]	; 0x34


    delay_us(400);
    287a:	20c8      	movs	r0, #200	; 0xc8
    287c:	4b19      	ldr	r3, [pc, #100]	; (28e4 <sampleTick+0x2c4>)
    287e:	0040      	lsls	r0, r0, #1
    2880:	4798      	blx	r3
    u32_t PressureRaw = readMS5803AdcResults();
    2882:	4b19      	ldr	r3, [pc, #100]	; (28e8 <sampleTick+0x2c8>)
    2884:	4798      	blx	r3
    ConvertPressureTemperature(PressureRaw, tempRaw, &sample.temperatureCelcus, &sample.pressureMbar);
    2886:	4a1a      	ldr	r2, [pc, #104]	; (28f0 <sampleTick+0x2d0>)
    2888:	9901      	ldr	r1, [sp, #4]
    288a:	4b1a      	ldr	r3, [pc, #104]	; (28f4 <sampleTick+0x2d4>)
    288c:	4d1a      	ldr	r5, [pc, #104]	; (28f8 <sampleTick+0x2d8>)
    288e:	47a8      	blx	r5
    sample.altitudefeet = paToFeetNOAA(sample.pressureMbar);
    2890:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    2892:	4b1a      	ldr	r3, [pc, #104]	; (28fc <sampleTick+0x2dc>)
    2894:	4798      	blx	r3
    2896:	6420      	str	r0, [r4, #64]	; 0x40
    2898:	6461      	str	r1, [r4, #68]	; 0x44
}
    289a:	b007      	add	sp, #28
    289c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    289e:	46c0      	nop			; (mov r8, r8)
    28a0:	2000053c 	.word	0x2000053c
    28a4:	00001015 	.word	0x00001015
    28a8:	200007e8 	.word	0x200007e8
    28ac:	200004d8 	.word	0x200004d8
    28b0:	000068ec 	.word	0x000068ec
    28b4:	20000528 	.word	0x20000528
    28b8:	00000cd1 	.word	0x00000cd1
    28bc:	0000618d 	.word	0x0000618d
    28c0:	77318fc5 	.word	0x77318fc5
    28c4:	00005545 	.word	0x00005545
    28c8:	3f5f212d 	.word	0x3f5f212d
    28cc:	00006329 	.word	0x00006329
    28d0:	fffff0c4 	.word	0xfffff0c4
    28d4:	02de00d2 	.word	0x02de00d2
    28d8:	bf8f8a09 	.word	0xbf8f8a09
    28dc:	41004400 	.word	0x41004400
    28e0:	00002a29 	.word	0x00002a29
    28e4:	00000f99 	.word	0x00000f99
    28e8:	000003ad 	.word	0x000003ad
    28ec:	00002a41 	.word	0x00002a41
    28f0:	20000824 	.word	0x20000824
    28f4:	20000820 	.word	0x20000820
    28f8:	000003ed 	.word	0x000003ed
    28fc:	0000048d 	.word	0x0000048d

00002900 <sercomClockEnable>:
#include <util.h>

void sercomClockEnable(SercomId id, uint32_t clock_channel, u8_t divider) {
    2900:	b570      	push	{r4, r5, r6, lr}
    2902:	0004      	movs	r4, r0
    // prevent this clock write from changing any other clocks
    PM->APBCMASK.reg |= 1 << (PM_APBCMASK_SERCOM0_Pos + id);
    2904:	2301      	movs	r3, #1
    2906:	1ca6      	adds	r6, r4, #2
    2908:	40b3      	lsls	r3, r6
    290a:	480d      	ldr	r0, [pc, #52]	; (2940 <sercomClockEnable+0x40>)
#include <util.h>

void sercomClockEnable(SercomId id, uint32_t clock_channel, u8_t divider) {
    290c:	000d      	movs	r5, r1
    // prevent this clock write from changing any other clocks
    PM->APBCMASK.reg |= 1 << (PM_APBCMASK_SERCOM0_Pos + id);
    290e:	6a01      	ldr	r1, [r0, #32]
    2910:	430b      	orrs	r3, r1
    2912:	6203      	str	r3, [r0, #32]


    if (clock_channel != 0) {
    2914:	2d00      	cmp	r5, #0
    2916:	d003      	beq.n	2920 <sercomClockEnable+0x20>
        // clock generators 3-8 have 8 division factor bits - DIV[7:0]
        gclkEnable(clock_channel, GCLK_SOURCE_DFLL48M, divider);
    2918:	2107      	movs	r1, #7
    291a:	0028      	movs	r0, r5
    291c:	4b09      	ldr	r3, [pc, #36]	; (2944 <sercomClockEnable+0x44>)
    291e:	4798      	blx	r3
    }


    // attach clock
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
    2920:	22f0      	movs	r2, #240	; 0xf0
    2922:	2080      	movs	r0, #128	; 0x80
    2924:	0229      	lsls	r1, r5, #8
    2926:	0112      	lsls	r2, r2, #4
    2928:	4011      	ands	r1, r2
    292a:	01c0      	lsls	r0, r0, #7
    292c:	4301      	orrs	r1, r0
    292e:	0020      	movs	r0, r4
    2930:	3014      	adds	r0, #20
    2932:	223f      	movs	r2, #63	; 0x3f
    2934:	0003      	movs	r3, r0
    2936:	4013      	ands	r3, r2
    2938:	4319      	orrs	r1, r3
    293a:	4b03      	ldr	r3, [pc, #12]	; (2948 <sercomClockEnable+0x48>)
    293c:	8059      	strh	r1, [r3, #2]
                        GCLK_CLKCTRL_GEN(clock_channel) |
                        GCLK_CLKCTRL_ID(SERCOM0_GCLK_ID_CORE + id);
}
    293e:	bd70      	pop	{r4, r5, r6, pc}
    2940:	40000400 	.word	0x40000400
    2944:	00000f49 	.word	0x00000f49
    2948:	40000c00 	.word	0x40000c00

0000294c <sercomReset>:
void computeKalmanStates();



inline static Sercom* sercom(SercomId id) {
    return (Sercom*) (0x42000800U + id * 1024);
    294c:	4b04      	ldr	r3, [pc, #16]	; (2960 <sercomReset+0x14>)
    294e:	0280      	lsls	r0, r0, #10
    2950:	18c0      	adds	r0, r0, r3


void sercomReset(SercomId id) {
    sercom(id)->SPI.CTRLA.reg = SERCOM_SPI_CTRLA_SWRST;
    2952:	2301      	movs	r3, #1
    2954:	6003      	str	r3, [r0, #0]
    while(sercom(id)->SPI.CTRLA.reg & SERCOM_SPI_CTRLA_SWRST);
    2956:	6802      	ldr	r2, [r0, #0]
    2958:	421a      	tst	r2, r3
    295a:	d1fc      	bne.n	2956 <sercomReset+0xa>
}
    295c:	4770      	bx	lr
    295e:	46c0      	nop			; (mov r8, r8)
    2960:	42000800 	.word	0x42000800

00002964 <sercomSpiMasterInit>:
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
}


void sercomSpiMasterInit(SercomId id, u32_t dipo, u32_t dopo, bool cpol, bool cpha, u8_t baud) {
    2964:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2966:	0004      	movs	r4, r0
    2968:	9300      	str	r3, [sp, #0]
    296a:	ab08      	add	r3, sp, #32
    296c:	781b      	ldrb	r3, [r3, #0]
    296e:	000e      	movs	r6, r1
    2970:	9301      	str	r3, [sp, #4]
    2972:	ab09      	add	r3, sp, #36	; 0x24
    2974:	781f      	ldrb	r7, [r3, #0]

    sercomReset(id);
    2976:	4b12      	ldr	r3, [pc, #72]	; (29c0 <sercomSpiMasterInit+0x5c>)
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
}


void sercomSpiMasterInit(SercomId id, u32_t dipo, u32_t dopo, bool cpol, bool cpha, u8_t baud) {
    2978:	0015      	movs	r5, r2

    sercomReset(id);
    297a:	4798      	blx	r3
    297c:	4b11      	ldr	r3, [pc, #68]	; (29c4 <sercomSpiMasterInit+0x60>)
    297e:	02a4      	lsls	r4, r4, #10
    2980:	18e4      	adds	r4, r4, r3

    sercom(id)->SPI.CTRLB.reg
        = SERCOM_SPI_CTRLB_RXEN;
    2982:	2380      	movs	r3, #128	; 0x80
    2984:	029b      	lsls	r3, r3, #10
    2986:	6063      	str	r3, [r4, #4]
    2988:	23c0      	movs	r3, #192	; 0xc0
    sercom(id)->SPI.BAUD.reg = baud;

    sercom(id)->SPI.CTRLA.reg
        = SERCOM_SPI_CTRLA_ENABLE
          | SERCOM_SPI_CTRLA_MODE_SPI_MASTER
          | SERCOM_SPI_CTRLA_DIPO(dipo)
    298a:	21c0      	movs	r1, #192	; 0xc0
    298c:	042d      	lsls	r5, r5, #16
    298e:	029b      	lsls	r3, r3, #10
    2990:	402b      	ands	r3, r5
    2992:	250e      	movs	r5, #14
    2994:	0536      	lsls	r6, r6, #20
    2996:	0389      	lsls	r1, r1, #14
    2998:	4031      	ands	r1, r6
          | SERCOM_SPI_CTRLA_DOPO(dopo)
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
    299a:	9e00      	ldr	r6, [sp, #0]
    299c:	431d      	orrs	r5, r3
    299e:	1e73      	subs	r3, r6, #1
    29a0:	419e      	sbcs	r6, r3
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
    29a2:	9b01      	ldr	r3, [sp, #4]
    sercom(id)->SPI.CTRLA.reg
        = SERCOM_SPI_CTRLA_ENABLE
          | SERCOM_SPI_CTRLA_MODE_SPI_MASTER
          | SERCOM_SPI_CTRLA_DIPO(dipo)
          | SERCOM_SPI_CTRLA_DOPO(dopo)
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
    29a4:	0772      	lsls	r2, r6, #29
    29a6:	430d      	orrs	r5, r1
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
    29a8:	432a      	orrs	r2, r5
    29aa:	1e59      	subs	r1, r3, #1
    29ac:	418b      	sbcs	r3, r1
    29ae:	0016      	movs	r6, r2
    29b0:	071b      	lsls	r3, r3, #28
    29b2:	431e      	orrs	r6, r3
    sercomReset(id);

    sercom(id)->SPI.CTRLB.reg
        = SERCOM_SPI_CTRLB_RXEN;

    sercom(id)->SPI.BAUD.reg = baud;
    29b4:	7327      	strb	r7, [r4, #12]

    sercom(id)->SPI.CTRLA.reg
        = SERCOM_SPI_CTRLA_ENABLE
    29b6:	6026      	str	r6, [r4, #0]
        };
    }
}

static inline void SPI_sync(SercomId id) {
    while  (sercom(id)->SPI.SYNCBUSY.bit.CTRLB);
    29b8:	69e3      	ldr	r3, [r4, #28]
    29ba:	075b      	lsls	r3, r3, #29
    29bc:	d4fc      	bmi.n	29b8 <sercomSpiMasterInit+0x54>
          | SERCOM_SPI_CTRLA_DOPO(dopo)
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);

    SPI_sync(id);
}
    29be:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    29c0:	0000294d 	.word	0x0000294d
    29c4:	42000800 	.word	0x42000800

000029c8 <sercomUartInit>:




void sercomUartInit(SercomId id, u32_t rxpo, u32_t txpo, int32_t fBAUD) {
    29c8:	b570      	push	{r4, r5, r6, lr}
    29ca:	0006      	movs	r6, r0

    //float BAUD = 65536*(1-(16*(115200/(48000000/8))));


    sercomReset(id);
    29cc:	4b0c      	ldr	r3, [pc, #48]	; (2a00 <sercomUartInit+0x38>)
}




void sercomUartInit(SercomId id, u32_t rxpo, u32_t txpo, int32_t fBAUD) {
    29ce:	000d      	movs	r5, r1
    29d0:	0014      	movs	r4, r2

    //float BAUD = 65536*(1-(16*(115200/(48000000/8))));


    sercomReset(id);
    29d2:	4798      	blx	r3
void computeKalmanStates();



inline static Sercom* sercom(SercomId id) {
    return (Sercom*) (0x42000800U + id * 1024);
    29d4:	4b0b      	ldr	r3, [pc, #44]	; (2a04 <sercomUartInit+0x3c>)
    29d6:	02b0      	lsls	r0, r6, #10
    29d8:	18c0      	adds	r0, r0, r3
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    29da:	2304      	movs	r3, #4
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    29dc:	22c0      	movs	r2, #192	; 0xc0

    //float BAUD = 65536*(1-(16*(115200/(48000000/8))));


    sercomReset(id);
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    29de:	6003      	str	r3, [r0, #0]
    sercom(id)->USART.BAUD.reg = 45403;
    29e0:	4b09      	ldr	r3, [pc, #36]	; (2a08 <sercomUartInit+0x40>)
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    29e2:	0529      	lsls	r1, r5, #20
    //float BAUD = 65536*(1-(16*(115200/(48000000/8))));


    sercomReset(id);
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    sercom(id)->USART.BAUD.reg = 45403;
    29e4:	8183      	strh	r3, [r0, #12]
    sercom(id)->USART.CTRLB.reg
        = SERCOM_USART_CTRLB_RXEN
    29e6:	23c0      	movs	r3, #192	; 0xc0
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    29e8:	0392      	lsls	r2, r2, #14
    29ea:	4011      	ands	r1, r2
    29ec:	4a07      	ldr	r2, [pc, #28]	; (2a0c <sercomUartInit+0x44>)

    sercomReset(id);
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    sercom(id)->USART.BAUD.reg = 45403;
    sercom(id)->USART.CTRLB.reg
        = SERCOM_USART_CTRLB_RXEN
    29ee:	029b      	lsls	r3, r3, #10
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    29f0:	0424      	lsls	r4, r4, #16

    sercomReset(id);
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    sercom(id)->USART.BAUD.reg = 45403;
    sercom(id)->USART.CTRLB.reg
        = SERCOM_USART_CTRLB_RXEN
    29f2:	6043      	str	r3, [r0, #4]
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    29f4:	4311      	orrs	r1, r2
    29f6:	4023      	ands	r3, r4
    29f8:	430b      	orrs	r3, r1
    sercom(id)->USART.BAUD.reg = 45403;
    sercom(id)->USART.CTRLB.reg
        = SERCOM_USART_CTRLB_RXEN
          | SERCOM_USART_CTRLB_TXEN;
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
    29fa:	6003      	str	r3, [r0, #0]
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
}
    29fc:	bd70      	pop	{r4, r5, r6, pc}
    29fe:	46c0      	nop			; (mov r8, r8)
    2a00:	0000294d 	.word	0x0000294d
    2a04:	42000800 	.word	0x42000800
    2a08:	ffffb15b 	.word	0xffffb15b
    2a0c:	40000006 	.word	0x40000006

00002a10 <spiDataTransfer>:
    2a10:	4b04      	ldr	r3, [pc, #16]	; (2a24 <spiDataTransfer+0x14>)
    2a12:	0280      	lsls	r0, r0, #10
    2a14:	18c0      	adds	r0, r0, r3

u8_t spiDataTransfer(SercomId id, u8_t data) {
    sercom(id)->SPI.DATA.reg = data;
    2a16:	6281      	str	r1, [r0, #40]	; 0x28
    while(sercom(id)->SPI.INTFLAG.bit.RXC == 0);
    2a18:	7e03      	ldrb	r3, [r0, #24]
    2a1a:	075b      	lsls	r3, r3, #29
    2a1c:	d5fc      	bpl.n	2a18 <spiDataTransfer+0x8>
    return sercom(id)->SPI.DATA.reg;
    2a1e:	6a80      	ldr	r0, [r0, #40]	; 0x28
    2a20:	b2c0      	uxtb	r0, r0
}
    2a22:	4770      	bx	lr
    2a24:	42000800 	.word	0x42000800

00002a28 <spiDataOut>:
    2a28:	4b04      	ldr	r3, [pc, #16]	; (2a3c <spiDataOut+0x14>)
    2a2a:	0280      	lsls	r0, r0, #10
    2a2c:	18c0      	adds	r0, r0, r3

void spiDataOut(SercomId id, u8_t data) {
    sercom(id)->SPI.DATA.reg = data;
    2a2e:	6281      	str	r1, [r0, #40]	; 0x28
    while(sercom(id)->SPI.INTFLAG.bit.RXC == 0);
    2a30:	7e03      	ldrb	r3, [r0, #24]
    2a32:	075b      	lsls	r3, r3, #29
    2a34:	d5fc      	bpl.n	2a30 <spiDataOut+0x8>
    u8_t dummy = sercom(id)->SPI.DATA.reg;
    2a36:	6a83      	ldr	r3, [r0, #40]	; 0x28
}
    2a38:	4770      	bx	lr
    2a3a:	46c0      	nop			; (mov r8, r8)
    2a3c:	42000800 	.word	0x42000800

00002a40 <spiDataIn>:
    2a40:	4b05      	ldr	r3, [pc, #20]	; (2a58 <spiDataIn+0x18>)
    2a42:	0280      	lsls	r0, r0, #10
    2a44:	18c0      	adds	r0, r0, r3

u8_t spiDataIn(SercomId id) {
    sercom(id)->SPI.DATA.reg = 0xFF;
    2a46:	23ff      	movs	r3, #255	; 0xff
    2a48:	6283      	str	r3, [r0, #40]	; 0x28
    while(sercom(id)->SPI.INTFLAG.bit.RXC == 0);
    2a4a:	7e03      	ldrb	r3, [r0, #24]
    2a4c:	075b      	lsls	r3, r3, #29
    2a4e:	d5fc      	bpl.n	2a4a <spiDataIn+0xa>
    return sercom(id)->SPI.DATA.reg;
    2a50:	6a80      	ldr	r0, [r0, #40]	; 0x28
    2a52:	b2c0      	uxtb	r0, r0
}
    2a54:	4770      	bx	lr
    2a56:	46c0      	nop			; (mov r8, r8)
    2a58:	42000800 	.word	0x42000800

00002a5c <usartDataOut>:
    2a5c:	4b04      	ldr	r3, [pc, #16]	; (2a70 <usartDataOut+0x14>)
    2a5e:	0280      	lsls	r0, r0, #10
    2a60:	18c0      	adds	r0, r0, r3

void usartDataOut(SercomId id, u8_t data) {
    sercom(id)->USART.DATA.reg = data;
    2a62:	b289      	uxth	r1, r1
    2a64:	8501      	strh	r1, [r0, #40]	; 0x28
    while(sercom(id)->USART.INTFLAG.bit.DRE == 0);
    2a66:	7e03      	ldrb	r3, [r0, #24]
    2a68:	07db      	lsls	r3, r3, #31
    2a6a:	d5fc      	bpl.n	2a66 <usartDataOut+0xa>
}
    2a6c:	4770      	bx	lr
    2a6e:	46c0      	nop			; (mov r8, r8)
    2a70:	42000800 	.word	0x42000800

00002a74 <usartDataIn>:
    2a74:	4b02      	ldr	r3, [pc, #8]	; (2a80 <usartDataIn+0xc>)
    2a76:	0280      	lsls	r0, r0, #10
    2a78:	18c0      	adds	r0, r0, r3

u8_t usartDataIn(SercomId id) {
    return sercom(id)->USART.DATA.reg;
    2a7a:	8d00      	ldrh	r0, [r0, #40]	; 0x28
    2a7c:	b2c0      	uxtb	r0, r0
}
    2a7e:	4770      	bx	lr
    2a80:	42000800 	.word	0x42000800

00002a84 <findMainAltitude>:
#include <boardDefines.h>


void findMainAltitude() {

    if (deploymentSettings.channelASettings.ENABLED & deploymentSettings.channelASettings.TYPE == MAIN_t) {
    2a84:	4b10      	ldr	r3, [pc, #64]	; (2ac8 <findMainAltitude+0x44>)
    2a86:	785a      	ldrb	r2, [r3, #1]
    2a88:	2a00      	cmp	r2, #0
    2a8a:	d104      	bne.n	2a96 <findMainAltitude+0x12>
    2a8c:	781a      	ldrb	r2, [r3, #0]
    2a8e:	2a00      	cmp	r2, #0
    2a90:	d001      	beq.n	2a96 <findMainAltitude+0x12>
        deploymentSettings.MAIN_DEPLOY = deploymentSettings.channelASettings.MAIN_DEPLOY;
    2a92:	885a      	ldrh	r2, [r3, #2]
    2a94:	831a      	strh	r2, [r3, #24]
    }
    if ((deploymentSettings.channelBSettings.ENABLED & deploymentSettings.channelBSettings.TYPE == MAIN_t)) {
    2a96:	79da      	ldrb	r2, [r3, #7]
    2a98:	2a00      	cmp	r2, #0
    2a9a:	d104      	bne.n	2aa6 <findMainAltitude+0x22>
    2a9c:	799a      	ldrb	r2, [r3, #6]
    2a9e:	2a00      	cmp	r2, #0
    2aa0:	d001      	beq.n	2aa6 <findMainAltitude+0x22>
        deploymentSettings.MAIN_DEPLOY = deploymentSettings.channelBSettings.MAIN_DEPLOY;
    2aa2:	891a      	ldrh	r2, [r3, #8]
    2aa4:	831a      	strh	r2, [r3, #24]
    }
    if ((deploymentSettings.channelCSettings.ENABLED & deploymentSettings.channelCSettings.TYPE == MAIN_t)) {
    2aa6:	7b5a      	ldrb	r2, [r3, #13]
    2aa8:	2a00      	cmp	r2, #0
    2aaa:	d104      	bne.n	2ab6 <findMainAltitude+0x32>
    2aac:	7b1a      	ldrb	r2, [r3, #12]
    2aae:	2a00      	cmp	r2, #0
    2ab0:	d001      	beq.n	2ab6 <findMainAltitude+0x32>
        deploymentSettings.MAIN_DEPLOY = deploymentSettings.channelCSettings.MAIN_DEPLOY;
    2ab2:	89da      	ldrh	r2, [r3, #14]
    2ab4:	831a      	strh	r2, [r3, #24]
    }
    if ((deploymentSettings.channelDSettings.ENABLED & deploymentSettings.channelDSettings.TYPE == MAIN_t)) {
    2ab6:	7cda      	ldrb	r2, [r3, #19]
    2ab8:	2a00      	cmp	r2, #0
    2aba:	d104      	bne.n	2ac6 <findMainAltitude+0x42>
    2abc:	7c9a      	ldrb	r2, [r3, #18]
    2abe:	2a00      	cmp	r2, #0
    2ac0:	d001      	beq.n	2ac6 <findMainAltitude+0x42>
        deploymentSettings.MAIN_DEPLOY = deploymentSettings.channelDSettings.MAIN_DEPLOY;
    2ac2:	8a9a      	ldrh	r2, [r3, #20]
    2ac4:	831a      	strh	r2, [r3, #24]
    }


}
    2ac6:	4770      	bx	lr
    2ac8:	20000508 	.word	0x20000508

00002acc <applyDefaultSettings>:
    deploymentSettings.channelASettings.MAIN_DEPLOY = 0;
    deploymentSettings.channelASettings.APPOGE_DELAY = 0;

    deploymentSettings.channelBSettings.ENABLED = true;
    deploymentSettings.channelBSettings.TYPE = MAIN_t;
    deploymentSettings.channelBSettings.MAIN_DEPLOY = 300;
    2acc:	2096      	movs	r0, #150	; 0x96

void applyDefaultSettings() {

    deploymentSettings.channelASettings.ENABLED = true;
    deploymentSettings.channelASettings.TYPE = DROGUE_t;
    deploymentSettings.channelASettings.MAIN_DEPLOY = 0;
    2ace:	2200      	movs	r2, #0

}

void applyDefaultSettings() {

    deploymentSettings.channelASettings.ENABLED = true;
    2ad0:	2101      	movs	r1, #1
    2ad2:	4b09      	ldr	r3, [pc, #36]	; (2af8 <applyDefaultSettings+0x2c>)
    deploymentSettings.channelASettings.MAIN_DEPLOY = 0;
    deploymentSettings.channelASettings.APPOGE_DELAY = 0;

    deploymentSettings.channelBSettings.ENABLED = true;
    deploymentSettings.channelBSettings.TYPE = MAIN_t;
    deploymentSettings.channelBSettings.MAIN_DEPLOY = 300;
    2ad4:	0040      	lsls	r0, r0, #1

}

void applyDefaultSettings() {

    deploymentSettings.channelASettings.ENABLED = true;
    2ad6:	7019      	strb	r1, [r3, #0]
    deploymentSettings.channelASettings.TYPE = DROGUE_t;
    2ad8:	7059      	strb	r1, [r3, #1]
    deploymentSettings.channelASettings.MAIN_DEPLOY = 0;
    2ada:	805a      	strh	r2, [r3, #2]
    deploymentSettings.channelASettings.APPOGE_DELAY = 0;
    2adc:	711a      	strb	r2, [r3, #4]

    deploymentSettings.channelBSettings.ENABLED = true;
    2ade:	7199      	strb	r1, [r3, #6]
    deploymentSettings.channelBSettings.TYPE = MAIN_t;
    2ae0:	71da      	strb	r2, [r3, #7]
    deploymentSettings.channelBSettings.MAIN_DEPLOY = 300;
    2ae2:	8118      	strh	r0, [r3, #8]
    deploymentSettings.channelBSettings.APPOGE_DELAY = 0;
    2ae4:	729a      	strb	r2, [r3, #10]

    deploymentSettings.channelCSettings.ENABLED = false;
    2ae6:	731a      	strb	r2, [r3, #12]
    deploymentSettings.channelCSettings.TYPE = DROGUE_t;
    2ae8:	7359      	strb	r1, [r3, #13]
    deploymentSettings.channelCSettings.MAIN_DEPLOY = 0;
    2aea:	81da      	strh	r2, [r3, #14]
    deploymentSettings.channelCSettings.APPOGE_DELAY = 0;
    2aec:	741a      	strb	r2, [r3, #16]

    deploymentSettings.channelDSettings.ENABLED = false;
    2aee:	749a      	strb	r2, [r3, #18]
    deploymentSettings.channelDSettings.TYPE = MAIN_t;
    2af0:	74da      	strb	r2, [r3, #19]
    deploymentSettings.channelDSettings.MAIN_DEPLOY = 300;
    2af2:	8298      	strh	r0, [r3, #20]
    deploymentSettings.channelDSettings.APPOGE_DELAY = 0;
    2af4:	759a      	strb	r2, [r3, #22]
}
    2af6:	4770      	bx	lr
    2af8:	20000508 	.word	0x20000508

00002afc <putSettings>:

void putSettings() {
    2afc:	b500      	push	{lr}
    2afe:	b0c1      	sub	sp, #260	; 0x104

    u8_t settings[256];

    settings[0] = deploymentSettings.channelASettings.ENABLED;
    2b00:	4669      	mov	r1, sp
    settings[1] = deploymentSettings.channelASettings.TYPE;
    settings[2] = deploymentSettings.channelASettings.MAIN_DEPLOY >> 8;
    2b02:	4668      	mov	r0, sp

void putSettings() {

    u8_t settings[256];

    settings[0] = deploymentSettings.channelASettings.ENABLED;
    2b04:	4b17      	ldr	r3, [pc, #92]	; (2b64 <putSettings+0x68>)
    2b06:	781a      	ldrb	r2, [r3, #0]
    2b08:	700a      	strb	r2, [r1, #0]
    settings[1] = deploymentSettings.channelASettings.TYPE;
    2b0a:	785a      	ldrb	r2, [r3, #1]
    2b0c:	704a      	strb	r2, [r1, #1]
    settings[2] = deploymentSettings.channelASettings.MAIN_DEPLOY >> 8;
    2b0e:	885a      	ldrh	r2, [r3, #2]
    2b10:	0a11      	lsrs	r1, r2, #8
    2b12:	7081      	strb	r1, [r0, #2]
    settings[3] = deploymentSettings.channelASettings.MAIN_DEPLOY >> 0;
    2b14:	70c2      	strb	r2, [r0, #3]
    settings[4] = deploymentSettings.channelASettings.APPOGE_DELAY;
    2b16:	791a      	ldrb	r2, [r3, #4]
    2b18:	7102      	strb	r2, [r0, #4]

    settings[5] = deploymentSettings.channelBSettings.ENABLED;
    2b1a:	799a      	ldrb	r2, [r3, #6]
    2b1c:	7142      	strb	r2, [r0, #5]
    settings[6] = deploymentSettings.channelBSettings.TYPE;
    2b1e:	79da      	ldrb	r2, [r3, #7]
    2b20:	7182      	strb	r2, [r0, #6]
    settings[7] = deploymentSettings.channelBSettings.MAIN_DEPLOY >> 8;
    2b22:	891a      	ldrh	r2, [r3, #8]
    2b24:	0a11      	lsrs	r1, r2, #8
    2b26:	71c1      	strb	r1, [r0, #7]
    settings[8] = deploymentSettings.channelBSettings.MAIN_DEPLOY >> 0;
    2b28:	7202      	strb	r2, [r0, #8]
    settings[9] = deploymentSettings.channelBSettings.APPOGE_DELAY;
    2b2a:	7a9a      	ldrb	r2, [r3, #10]
    2b2c:	7242      	strb	r2, [r0, #9]

    settings[10] = deploymentSettings.channelCSettings.ENABLED;
    2b2e:	7b1a      	ldrb	r2, [r3, #12]
    2b30:	7282      	strb	r2, [r0, #10]
    settings[11] = deploymentSettings.channelCSettings.TYPE;
    2b32:	7b5a      	ldrb	r2, [r3, #13]
    2b34:	72c2      	strb	r2, [r0, #11]
    settings[12] = deploymentSettings.channelCSettings.MAIN_DEPLOY >> 8;
    2b36:	89da      	ldrh	r2, [r3, #14]
    2b38:	0a11      	lsrs	r1, r2, #8
    2b3a:	7301      	strb	r1, [r0, #12]
    settings[13] = deploymentSettings.channelCSettings.MAIN_DEPLOY >> 0;
    2b3c:	7342      	strb	r2, [r0, #13]
    settings[14] = deploymentSettings.channelCSettings.APPOGE_DELAY;
    2b3e:	7c1a      	ldrb	r2, [r3, #16]
    2b40:	7382      	strb	r2, [r0, #14]

    settings[15] = deploymentSettings.channelDSettings.ENABLED;
    2b42:	7c9a      	ldrb	r2, [r3, #18]
    2b44:	73c2      	strb	r2, [r0, #15]
    settings[16] = deploymentSettings.channelDSettings.TYPE;
    2b46:	7cda      	ldrb	r2, [r3, #19]
    2b48:	7402      	strb	r2, [r0, #16]
    settings[17] = deploymentSettings.channelDSettings.MAIN_DEPLOY >> 8;
    2b4a:	8a9a      	ldrh	r2, [r3, #20]
    2b4c:	0a11      	lsrs	r1, r2, #8
    2b4e:	7441      	strb	r1, [r0, #17]
    settings[18] = deploymentSettings.channelDSettings.MAIN_DEPLOY >> 0;
    2b50:	7482      	strb	r2, [r0, #18]
    settings[19] = deploymentSettings.channelDSettings.APPOGE_DELAY;
    2b52:	7d9b      	ldrb	r3, [r3, #22]
    settings[14] = deploymentSettings.channelCSettings.APPOGE_DELAY;

    settings[15] = deploymentSettings.channelDSettings.ENABLED;
    settings[16] = deploymentSettings.channelDSettings.TYPE;
    settings[17] = deploymentSettings.channelDSettings.MAIN_DEPLOY >> 8;
    settings[18] = deploymentSettings.channelDSettings.MAIN_DEPLOY >> 0;
    2b54:	4669      	mov	r1, sp
    settings[19] = deploymentSettings.channelDSettings.APPOGE_DELAY;
    2b56:	74c3      	strb	r3, [r0, #19]

    settings[20] = 0x00;
    2b58:	2000      	movs	r0, #0

    AT25SEWritePage(0x00,settings);
    2b5a:	4b03      	ldr	r3, [pc, #12]	; (2b68 <putSettings+0x6c>)
    settings[16] = deploymentSettings.channelDSettings.TYPE;
    settings[17] = deploymentSettings.channelDSettings.MAIN_DEPLOY >> 8;
    settings[18] = deploymentSettings.channelDSettings.MAIN_DEPLOY >> 0;
    settings[19] = deploymentSettings.channelDSettings.APPOGE_DELAY;

    settings[20] = 0x00;
    2b5c:	7508      	strb	r0, [r1, #20]

    AT25SEWritePage(0x00,settings);
    2b5e:	4798      	blx	r3
}
    2b60:	b041      	add	sp, #260	; 0x104
    2b62:	bd00      	pop	{pc}
    2b64:	20000508 	.word	0x20000508
    2b68:	0000029d 	.word	0x0000029d

00002b6c <getSettings>:




void getSettings() {
    2b6c:	b500      	push	{lr}
    2b6e:	b0c1      	sub	sp, #260	; 0x104

    u8_t settings[256];

    AT25SEreadPage(0x00 , settings);
    2b70:	4669      	mov	r1, sp
    2b72:	4b2c      	ldr	r3, [pc, #176]	; (2c24 <getSettings+0xb8>)
    2b74:	2000      	movs	r0, #0
    2b76:	4798      	blx	r3

    deploymentSettings.channelASettings.ENABLED = settings[0];
    2b78:	466a      	mov	r2, sp
    2b7a:	7812      	ldrb	r2, [r2, #0]
    2b7c:	4b2a      	ldr	r3, [pc, #168]	; (2c28 <getSettings+0xbc>)
    2b7e:	1e51      	subs	r1, r2, #1
    2b80:	418a      	sbcs	r2, r1
    2b82:	701a      	strb	r2, [r3, #0]
    deploymentSettings.channelASettings.TYPE = settings[1];
    2b84:	466a      	mov	r2, sp
    2b86:	7852      	ldrb	r2, [r2, #1]
    deploymentSettings.channelASettings.MAIN_DEPLOY = settings[2] << 8 | (settings[3]);
    2b88:	4669      	mov	r1, sp
    u8_t settings[256];

    AT25SEreadPage(0x00 , settings);

    deploymentSettings.channelASettings.ENABLED = settings[0];
    deploymentSettings.channelASettings.TYPE = settings[1];
    2b8a:	705a      	strb	r2, [r3, #1]
    deploymentSettings.channelASettings.MAIN_DEPLOY = settings[2] << 8 | (settings[3]);
    2b8c:	466a      	mov	r2, sp
    2b8e:	7892      	ldrb	r2, [r2, #2]
    2b90:	78c9      	ldrb	r1, [r1, #3]
    2b92:	0212      	lsls	r2, r2, #8
    2b94:	430a      	orrs	r2, r1
    2b96:	805a      	strh	r2, [r3, #2]
    deploymentSettings.channelASettings.APPOGE_DELAY = settings[4];
    2b98:	466a      	mov	r2, sp
    2b9a:	7912      	ldrb	r2, [r2, #4]
    2b9c:	711a      	strb	r2, [r3, #4]

    deploymentSettings.channelBSettings.ENABLED = settings[5];
    2b9e:	466a      	mov	r2, sp
    2ba0:	7952      	ldrb	r2, [r2, #5]
    2ba2:	1e51      	subs	r1, r2, #1
    2ba4:	418a      	sbcs	r2, r1
    2ba6:	719a      	strb	r2, [r3, #6]
    deploymentSettings.channelBSettings.TYPE = settings[6];
    2ba8:	466a      	mov	r2, sp
    2baa:	7992      	ldrb	r2, [r2, #6]
    deploymentSettings.channelBSettings.MAIN_DEPLOY = settings[7] << 8 | (settings[8]);
    2bac:	4669      	mov	r1, sp
    deploymentSettings.channelASettings.TYPE = settings[1];
    deploymentSettings.channelASettings.MAIN_DEPLOY = settings[2] << 8 | (settings[3]);
    deploymentSettings.channelASettings.APPOGE_DELAY = settings[4];

    deploymentSettings.channelBSettings.ENABLED = settings[5];
    deploymentSettings.channelBSettings.TYPE = settings[6];
    2bae:	71da      	strb	r2, [r3, #7]
    deploymentSettings.channelBSettings.MAIN_DEPLOY = settings[7] << 8 | (settings[8]);
    2bb0:	466a      	mov	r2, sp
    2bb2:	79d2      	ldrb	r2, [r2, #7]
    2bb4:	7a09      	ldrb	r1, [r1, #8]
    2bb6:	0212      	lsls	r2, r2, #8
    2bb8:	430a      	orrs	r2, r1
    2bba:	811a      	strh	r2, [r3, #8]
    deploymentSettings.channelBSettings.APPOGE_DELAY = settings[9];
    2bbc:	466a      	mov	r2, sp
    2bbe:	7a52      	ldrb	r2, [r2, #9]
    2bc0:	729a      	strb	r2, [r3, #10]

    deploymentSettings.channelCSettings.ENABLED = settings[10];
    2bc2:	466a      	mov	r2, sp
    2bc4:	7a92      	ldrb	r2, [r2, #10]
    2bc6:	1e51      	subs	r1, r2, #1
    2bc8:	418a      	sbcs	r2, r1
    2bca:	731a      	strb	r2, [r3, #12]
    deploymentSettings.channelCSettings.TYPE = settings[11];
    2bcc:	466a      	mov	r2, sp
    2bce:	7ad2      	ldrb	r2, [r2, #11]
    deploymentSettings.channelCSettings.MAIN_DEPLOY = settings[12] << 8 | (settings[13]);
    2bd0:	4669      	mov	r1, sp
    deploymentSettings.channelBSettings.TYPE = settings[6];
    deploymentSettings.channelBSettings.MAIN_DEPLOY = settings[7] << 8 | (settings[8]);
    deploymentSettings.channelBSettings.APPOGE_DELAY = settings[9];

    deploymentSettings.channelCSettings.ENABLED = settings[10];
    deploymentSettings.channelCSettings.TYPE = settings[11];
    2bd2:	735a      	strb	r2, [r3, #13]
    deploymentSettings.channelCSettings.MAIN_DEPLOY = settings[12] << 8 | (settings[13]);
    2bd4:	466a      	mov	r2, sp
    2bd6:	7b12      	ldrb	r2, [r2, #12]
    2bd8:	7b49      	ldrb	r1, [r1, #13]
    2bda:	0212      	lsls	r2, r2, #8
    2bdc:	430a      	orrs	r2, r1
    2bde:	81da      	strh	r2, [r3, #14]
    deploymentSettings.channelCSettings.APPOGE_DELAY = settings[14];
    2be0:	466a      	mov	r2, sp
    2be2:	7b92      	ldrb	r2, [r2, #14]
    2be4:	741a      	strb	r2, [r3, #16]

    deploymentSettings.channelDSettings.ENABLED = settings[15];
    2be6:	466a      	mov	r2, sp
    2be8:	7bd2      	ldrb	r2, [r2, #15]
    2bea:	1e51      	subs	r1, r2, #1
    2bec:	418a      	sbcs	r2, r1
    2bee:	749a      	strb	r2, [r3, #18]
    deploymentSettings.channelDSettings.TYPE = settings[16];
    2bf0:	466a      	mov	r2, sp
    2bf2:	7c12      	ldrb	r2, [r2, #16]
    deploymentSettings.channelDSettings.MAIN_DEPLOY = settings[17] << 8 | (settings[18]);
    2bf4:	4669      	mov	r1, sp
    deploymentSettings.channelCSettings.TYPE = settings[11];
    deploymentSettings.channelCSettings.MAIN_DEPLOY = settings[12] << 8 | (settings[13]);
    deploymentSettings.channelCSettings.APPOGE_DELAY = settings[14];

    deploymentSettings.channelDSettings.ENABLED = settings[15];
    deploymentSettings.channelDSettings.TYPE = settings[16];
    2bf6:	74da      	strb	r2, [r3, #19]
    deploymentSettings.channelDSettings.MAIN_DEPLOY = settings[17] << 8 | (settings[18]);
    2bf8:	466a      	mov	r2, sp
    2bfa:	7c52      	ldrb	r2, [r2, #17]
    2bfc:	7c89      	ldrb	r1, [r1, #18]
    2bfe:	0212      	lsls	r2, r2, #8
    2c00:	430a      	orrs	r2, r1
    2c02:	829a      	strh	r2, [r3, #20]
    deploymentSettings.channelDSettings.APPOGE_DELAY = settings[19];
    2c04:	466a      	mov	r2, sp
    2c06:	7cd2      	ldrb	r2, [r2, #19]
    2c08:	759a      	strb	r2, [r3, #22]


    if (settings[20] == 0xFF) {
    2c0a:	466b      	mov	r3, sp
    2c0c:	7d1b      	ldrb	r3, [r3, #20]
    2c0e:	2bff      	cmp	r3, #255	; 0xff
    2c10:	d103      	bne.n	2c1a <getSettings+0xae>
        applyDefaultSettings();
    2c12:	4b06      	ldr	r3, [pc, #24]	; (2c2c <getSettings+0xc0>)
    2c14:	4798      	blx	r3
        putSettings();
    2c16:	4b06      	ldr	r3, [pc, #24]	; (2c30 <getSettings+0xc4>)
    2c18:	4798      	blx	r3
    }

    findMainAltitude();
    2c1a:	4b06      	ldr	r3, [pc, #24]	; (2c34 <getSettings+0xc8>)
    2c1c:	4798      	blx	r3

}
    2c1e:	b041      	add	sp, #260	; 0x104
    2c20:	bd00      	pop	{pc}
    2c22:	46c0      	nop			; (mov r8, r8)
    2c24:	00000355 	.word	0x00000355
    2c28:	20000508 	.word	0x20000508
    2c2c:	00002acd 	.word	0x00002acd
    2c30:	00002afd 	.word	0x00002afd
    2c34:	00002a85 	.word	0x00002a85

00002c38 <attemptConnection>:
#include <util.h>
#include <boardDefines.h>


void attemptConnection() {
    2c38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

    if (USARTconnectionAvaliable()) {
    2c3a:	4b2f      	ldr	r3, [pc, #188]	; (2cf8 <attemptConnection+0xc0>)
    2c3c:	4798      	blx	r3
    2c3e:	2800      	cmp	r0, #0
    2c40:	d058      	beq.n	2cf4 <attemptConnection+0xbc>

        flightState = flightIdle;
    2c42:	2201      	movs	r2, #1
    2c44:	4b2d      	ldr	r3, [pc, #180]	; (2cfc <attemptConnection+0xc4>)
    2c46:	701a      	strb	r2, [r3, #0]

        //wait for user to tell us what they want
        while(sercom(USART3)->SPI.INTFLAG.bit.RXC == 0);
    2c48:	4a2d      	ldr	r2, [pc, #180]	; (2d00 <attemptConnection+0xc8>)
    2c4a:	7e13      	ldrb	r3, [r2, #24]
    2c4c:	4e2c      	ldr	r6, [pc, #176]	; (2d00 <attemptConnection+0xc8>)
    2c4e:	075b      	lsls	r3, r3, #29
    2c50:	d5fb      	bpl.n	2c4a <attemptConnection+0x12>
        u8_t option = usartDataIn(USART3);
    2c52:	2003      	movs	r0, #3
    2c54:	4d2b      	ldr	r5, [pc, #172]	; (2d04 <attemptConnection+0xcc>)
    2c56:	47a8      	blx	r5
    2c58:	1e04      	subs	r4, r0, #0

        //user wants to read flight logs
        if (option == 0x4C) {
    2c5a:	2c4c      	cmp	r4, #76	; 0x4c
    2c5c:	d13c      	bne.n	2cd8 <attemptConnection+0xa0>
    2c5e:	2400      	movs	r4, #0

            //send list of available flight logs
            for (u8_t flightLog = 0; flightLog < 20; ++flightLog) {

                if (isFlightLogged(flightLog)) {
    2c60:	0020      	movs	r0, r4
    2c62:	4b29      	ldr	r3, [pc, #164]	; (2d08 <attemptConnection+0xd0>)
    2c64:	4798      	blx	r3
    2c66:	2800      	cmp	r0, #0
    2c68:	d003      	beq.n	2c72 <attemptConnection+0x3a>

                    usartDataOut(USART3, flightLog);
    2c6a:	0021      	movs	r1, r4
    2c6c:	2003      	movs	r0, #3
    2c6e:	4b27      	ldr	r3, [pc, #156]	; (2d0c <attemptConnection+0xd4>)
    2c70:	4798      	blx	r3

        //user wants to read flight logs
        if (option == 0x4C) {

            //send list of available flight logs
            for (u8_t flightLog = 0; flightLog < 20; ++flightLog) {
    2c72:	3401      	adds	r4, #1
    2c74:	b2e4      	uxtb	r4, r4
    2c76:	2c14      	cmp	r4, #20
    2c78:	d1f2      	bne.n	2c60 <attemptConnection+0x28>

                    usartDataOut(USART3, flightLog);
                }
            }
            //done sending flight numbers
            usartDataOut(USART3, 0xFF);
    2c7a:	21ff      	movs	r1, #255	; 0xff
    2c7c:	2003      	movs	r0, #3
    2c7e:	4c23      	ldr	r4, [pc, #140]	; (2d0c <attemptConnection+0xd4>)
    2c80:	47a0      	blx	r4

            //wait for user to pick which flight to read
            while(sercom(USART3)->SPI.INTFLAG.bit.RXC == 0);
    2c82:	7e33      	ldrb	r3, [r6, #24]
    2c84:	075b      	lsls	r3, r3, #29
    2c86:	d5fc      	bpl.n	2c82 <attemptConnection+0x4a>
            volatile u8_t flightToRead = usartDataIn(USART3);
    2c88:	2003      	movs	r0, #3
    2c8a:	47a8      	blx	r5
    2c8c:	466b      	mov	r3, sp
    2c8e:	71d8      	strb	r0, [r3, #7]


            u32_t flightStartAddress = getFlightStartAddress(flightToRead);
    2c90:	79d8      	ldrb	r0, [r3, #7]
            //done sending flight numbers
            usartDataOut(USART3, 0xFF);

            //wait for user to pick which flight to read
            while(sercom(USART3)->SPI.INTFLAG.bit.RXC == 0);
            volatile u8_t flightToRead = usartDataIn(USART3);
    2c92:	1ddd      	adds	r5, r3, #7


            u32_t flightStartAddress = getFlightStartAddress(flightToRead);
    2c94:	b2c0      	uxtb	r0, r0
    2c96:	4b1e      	ldr	r3, [pc, #120]	; (2d10 <attemptConnection+0xd8>)
    2c98:	4798      	blx	r3
    2c9a:	0007      	movs	r7, r0
            u32_t flightEndAddress = FindFlightEndingAddress(flightToRead);
    2c9c:	7828      	ldrb	r0, [r5, #0]
    2c9e:	4b1d      	ldr	r3, [pc, #116]	; (2d14 <attemptConnection+0xdc>)
    2ca0:	b2c0      	uxtb	r0, r0
    2ca2:	4798      	blx	r3
    2ca4:	0006      	movs	r6, r0

            //inform of page numbers
            u16_t pagesToSend = (flightEndAddress  - flightStartAddress) >> 8;
    2ca6:	1bc5      	subs	r5, r0, r7
    2ca8:	0a2d      	lsrs	r5, r5, #8
            usartDataOut(USART3, pagesToSend >> 0);
    2caa:	b2e9      	uxtb	r1, r5
    2cac:	2003      	movs	r0, #3
    2cae:	47a0      	blx	r4
            usartDataOut(USART3, pagesToSend >> 8);
    2cb0:	b2a9      	uxth	r1, r5
    2cb2:	0a09      	lsrs	r1, r1, #8
    2cb4:	2003      	movs	r0, #3
    2cb6:	47a0      	blx	r4

            //send flight end address for % full
            usartDataOut(USART3, flightEndAddress >> 0);
    2cb8:	b2f1      	uxtb	r1, r6
    2cba:	2003      	movs	r0, #3
    2cbc:	47a0      	blx	r4
            usartDataOut(USART3, flightEndAddress >> 8);
    2cbe:	0a31      	lsrs	r1, r6, #8
    2cc0:	b2c9      	uxtb	r1, r1
    2cc2:	2003      	movs	r0, #3
    2cc4:	47a0      	blx	r4
            usartDataOut(USART3, flightEndAddress >> 16);
    2cc6:	0c31      	lsrs	r1, r6, #16
    2cc8:	b2c9      	uxtb	r1, r1
    2cca:	2003      	movs	r0, #3
    2ccc:	47a0      	blx	r4

            //USART out the flights pages
            sendTheasePagesToComputer(flightStartAddress, flightEndAddress);
    2cce:	0031      	movs	r1, r6
    2cd0:	0038      	movs	r0, r7
    2cd2:	4b11      	ldr	r3, [pc, #68]	; (2d18 <attemptConnection+0xe0>)
    2cd4:	4798      	blx	r3
    2cd6:	e00d      	b.n	2cf4 <attemptConnection+0xbc>

        }
        //user wants to erase chip
        if (option == 0x45) { // 'E'
    2cd8:	2845      	cmp	r0, #69	; 0x45
    2cda:	d10b      	bne.n	2cf4 <attemptConnection+0xbc>

            //getSettings();
			
            AT25SFChipErase();
    2cdc:	4b0f      	ldr	r3, [pc, #60]	; (2d1c <attemptConnection+0xe4>)
    2cde:	4798      	blx	r3

            AT25SFHoldTillReady();
    2ce0:	4b0f      	ldr	r3, [pc, #60]	; (2d20 <attemptConnection+0xe8>)
    2ce2:	4798      	blx	r3

            //getSettings();

            usartDataOut(USART3, 'E');
    2ce4:	2003      	movs	r0, #3
    2ce6:	4b09      	ldr	r3, [pc, #36]	; (2d0c <attemptConnection+0xd4>)
    2ce8:	0021      	movs	r1, r4
    2cea:	4798      	blx	r3
            beep(400);
    2cec:	20c8      	movs	r0, #200	; 0xc8
    2cee:	4b0d      	ldr	r3, [pc, #52]	; (2d24 <attemptConnection+0xec>)
    2cf0:	0040      	lsls	r0, r0, #1
    2cf2:	4798      	blx	r3


        }
    }

}
    2cf4:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    2cf6:	46c0      	nop			; (mov r8, r8)
    2cf8:	00000a51 	.word	0x00000a51
    2cfc:	200006a0 	.word	0x200006a0
    2d00:	42001400 	.word	0x42001400
    2d04:	00002a75 	.word	0x00002a75
    2d08:	00002501 	.word	0x00002501
    2d0c:	00002a5d 	.word	0x00002a5d
    2d10:	000024b1 	.word	0x000024b1
    2d14:	000024d9 	.word	0x000024d9
    2d18:	00000a85 	.word	0x00000a85
    2d1c:	00000219 	.word	0x00000219
    2d20:	000001e5 	.word	0x000001e5
    2d24:	00000d39 	.word	0x00000d39

00002d28 <pow>:
    2d28:	b5f0      	push	{r4, r5, r6, r7, lr}
    2d2a:	465f      	mov	r7, fp
    2d2c:	464d      	mov	r5, r9
    2d2e:	4656      	mov	r6, sl
    2d30:	4644      	mov	r4, r8
    2d32:	b4f0      	push	{r4, r5, r6, r7}
    2d34:	b091      	sub	sp, #68	; 0x44
    2d36:	001f      	movs	r7, r3
    2d38:	0004      	movs	r4, r0
    2d3a:	000d      	movs	r5, r1
    2d3c:	0016      	movs	r6, r2
    2d3e:	f000 f9af 	bl	30a0 <__ieee754_pow>
    2d42:	4bcf      	ldr	r3, [pc, #828]	; (3080 <pow+0x358>)
    2d44:	9002      	str	r0, [sp, #8]
    2d46:	9103      	str	r1, [sp, #12]
    2d48:	469b      	mov	fp, r3
    2d4a:	781b      	ldrb	r3, [r3, #0]
    2d4c:	b25b      	sxtb	r3, r3
    2d4e:	4699      	mov	r9, r3
    2d50:	3301      	adds	r3, #1
    2d52:	d04f      	beq.n	2df4 <pow+0xcc>
    2d54:	0032      	movs	r2, r6
    2d56:	003b      	movs	r3, r7
    2d58:	0030      	movs	r0, r6
    2d5a:	0039      	movs	r1, r7
    2d5c:	f003 f9c0 	bl	60e0 <__aeabi_dcmpun>
    2d60:	9000      	str	r0, [sp, #0]
    2d62:	2800      	cmp	r0, #0
    2d64:	d146      	bne.n	2df4 <pow+0xcc>
    2d66:	0022      	movs	r2, r4
    2d68:	002b      	movs	r3, r5
    2d6a:	0020      	movs	r0, r4
    2d6c:	0029      	movs	r1, r5
    2d6e:	f003 f9b7 	bl	60e0 <__aeabi_dcmpun>
    2d72:	2200      	movs	r2, #0
    2d74:	4682      	mov	sl, r0
    2d76:	2800      	cmp	r0, #0
    2d78:	d134      	bne.n	2de4 <pow+0xbc>
    2d7a:	2300      	movs	r3, #0
    2d7c:	0020      	movs	r0, r4
    2d7e:	0029      	movs	r1, r5
    2d80:	f001 f8fc 	bl	3f7c <__aeabi_dcmpeq>
    2d84:	2800      	cmp	r0, #0
    2d86:	d03a      	beq.n	2dfe <pow+0xd6>
    2d88:	2200      	movs	r2, #0
    2d8a:	2300      	movs	r3, #0
    2d8c:	0030      	movs	r0, r6
    2d8e:	0039      	movs	r1, r7
    2d90:	f001 f8f4 	bl	3f7c <__aeabi_dcmpeq>
    2d94:	9005      	str	r0, [sp, #20]
    2d96:	2800      	cmp	r0, #0
    2d98:	d100      	bne.n	2d9c <pow+0x74>
    2d9a:	e074      	b.n	2e86 <pow+0x15e>
    2d9c:	ab06      	add	r3, sp, #24
    2d9e:	4698      	mov	r8, r3
    2da0:	2301      	movs	r3, #1
    2da2:	4642      	mov	r2, r8
    2da4:	9306      	str	r3, [sp, #24]
    2da6:	4bb7      	ldr	r3, [pc, #732]	; (3084 <pow+0x35c>)
    2da8:	6053      	str	r3, [r2, #4]
    2daa:	4643      	mov	r3, r8
    2dac:	4652      	mov	r2, sl
    2dae:	609c      	str	r4, [r3, #8]
    2db0:	60dd      	str	r5, [r3, #12]
    2db2:	621a      	str	r2, [r3, #32]
    2db4:	611e      	str	r6, [r3, #16]
    2db6:	615f      	str	r7, [r3, #20]
    2db8:	4642      	mov	r2, r8
    2dba:	2300      	movs	r3, #0
    2dbc:	2400      	movs	r4, #0
    2dbe:	6193      	str	r3, [r2, #24]
    2dc0:	61d4      	str	r4, [r2, #28]
    2dc2:	464b      	mov	r3, r9
    2dc4:	2b00      	cmp	r3, #0
    2dc6:	d100      	bne.n	2dca <pow+0xa2>
    2dc8:	e094      	b.n	2ef4 <pow+0x1cc>
    2dca:	2300      	movs	r3, #0
    2dcc:	4cae      	ldr	r4, [pc, #696]	; (3088 <pow+0x360>)
    2dce:	9300      	str	r3, [sp, #0]
    2dd0:	9401      	str	r4, [sp, #4]
    2dd2:	9800      	ldr	r0, [sp, #0]
    2dd4:	9901      	ldr	r1, [sp, #4]
    2dd6:	b011      	add	sp, #68	; 0x44
    2dd8:	bc3c      	pop	{r2, r3, r4, r5}
    2dda:	4690      	mov	r8, r2
    2ddc:	4699      	mov	r9, r3
    2dde:	46a2      	mov	sl, r4
    2de0:	46ab      	mov	fp, r5
    2de2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2de4:	2300      	movs	r3, #0
    2de6:	0030      	movs	r0, r6
    2de8:	0039      	movs	r1, r7
    2dea:	f001 f8c7 	bl	3f7c <__aeabi_dcmpeq>
    2dee:	2800      	cmp	r0, #0
    2df0:	d000      	beq.n	2df4 <pow+0xcc>
    2df2:	e0eb      	b.n	2fcc <pow+0x2a4>
    2df4:	9b02      	ldr	r3, [sp, #8]
    2df6:	9c03      	ldr	r4, [sp, #12]
    2df8:	9300      	str	r3, [sp, #0]
    2dfa:	9401      	str	r4, [sp, #4]
    2dfc:	e7e9      	b.n	2dd2 <pow+0xaa>
    2dfe:	9802      	ldr	r0, [sp, #8]
    2e00:	9903      	ldr	r1, [sp, #12]
    2e02:	f000 ff7d 	bl	3d00 <finite>
    2e06:	4681      	mov	r9, r0
    2e08:	2800      	cmp	r0, #0
    2e0a:	d100      	bne.n	2e0e <pow+0xe6>
    2e0c:	e086      	b.n	2f1c <pow+0x1f4>
    2e0e:	9802      	ldr	r0, [sp, #8]
    2e10:	9903      	ldr	r1, [sp, #12]
    2e12:	2200      	movs	r2, #0
    2e14:	2300      	movs	r3, #0
    2e16:	f001 f8b1 	bl	3f7c <__aeabi_dcmpeq>
    2e1a:	2800      	cmp	r0, #0
    2e1c:	d0ea      	beq.n	2df4 <pow+0xcc>
    2e1e:	0020      	movs	r0, r4
    2e20:	0029      	movs	r1, r5
    2e22:	f000 ff6d 	bl	3d00 <finite>
    2e26:	9a02      	ldr	r2, [sp, #8]
    2e28:	9b03      	ldr	r3, [sp, #12]
    2e2a:	9200      	str	r2, [sp, #0]
    2e2c:	9301      	str	r3, [sp, #4]
    2e2e:	2800      	cmp	r0, #0
    2e30:	d0cf      	beq.n	2dd2 <pow+0xaa>
    2e32:	0030      	movs	r0, r6
    2e34:	0039      	movs	r1, r7
    2e36:	f000 ff63 	bl	3d00 <finite>
    2e3a:	9a02      	ldr	r2, [sp, #8]
    2e3c:	9b03      	ldr	r3, [sp, #12]
    2e3e:	9200      	str	r2, [sp, #0]
    2e40:	9301      	str	r3, [sp, #4]
    2e42:	2800      	cmp	r0, #0
    2e44:	d0c5      	beq.n	2dd2 <pow+0xaa>
    2e46:	ab06      	add	r3, sp, #24
    2e48:	4698      	mov	r8, r3
    2e4a:	2304      	movs	r3, #4
    2e4c:	4642      	mov	r2, r8
    2e4e:	9306      	str	r3, [sp, #24]
    2e50:	4b8c      	ldr	r3, [pc, #560]	; (3084 <pow+0x35c>)
    2e52:	6094      	str	r4, [r2, #8]
    2e54:	60d5      	str	r5, [r2, #12]
    2e56:	6053      	str	r3, [r2, #4]
    2e58:	2300      	movs	r3, #0
    2e5a:	2400      	movs	r4, #0
    2e5c:	6213      	str	r3, [r2, #32]
    2e5e:	2300      	movs	r3, #0
    2e60:	6193      	str	r3, [r2, #24]
    2e62:	61d4      	str	r4, [r2, #28]
    2e64:	465b      	mov	r3, fp
    2e66:	781b      	ldrb	r3, [r3, #0]
    2e68:	6116      	str	r6, [r2, #16]
    2e6a:	6157      	str	r7, [r2, #20]
    2e6c:	b25b      	sxtb	r3, r3
    2e6e:	2b02      	cmp	r3, #2
    2e70:	d004      	beq.n	2e7c <pow+0x154>
    2e72:	4640      	mov	r0, r8
    2e74:	f000 ff4e 	bl	3d14 <matherr>
    2e78:	2800      	cmp	r0, #0
    2e7a:	d140      	bne.n	2efe <pow+0x1d6>
    2e7c:	f003 fc74 	bl	6768 <__errno>
    2e80:	2322      	movs	r3, #34	; 0x22
    2e82:	6003      	str	r3, [r0, #0]
    2e84:	e03b      	b.n	2efe <pow+0x1d6>
    2e86:	0030      	movs	r0, r6
    2e88:	0039      	movs	r1, r7
    2e8a:	f000 ff39 	bl	3d00 <finite>
    2e8e:	9a02      	ldr	r2, [sp, #8]
    2e90:	9b03      	ldr	r3, [sp, #12]
    2e92:	9200      	str	r2, [sp, #0]
    2e94:	9301      	str	r3, [sp, #4]
    2e96:	2800      	cmp	r0, #0
    2e98:	d09b      	beq.n	2dd2 <pow+0xaa>
    2e9a:	2200      	movs	r2, #0
    2e9c:	2300      	movs	r3, #0
    2e9e:	0030      	movs	r0, r6
    2ea0:	0039      	movs	r1, r7
    2ea2:	f001 f871 	bl	3f88 <__aeabi_dcmplt>
    2ea6:	2800      	cmp	r0, #0
    2ea8:	d100      	bne.n	2eac <pow+0x184>
    2eaa:	e792      	b.n	2dd2 <pow+0xaa>
    2eac:	ab06      	add	r3, sp, #24
    2eae:	4698      	mov	r8, r3
    2eb0:	2301      	movs	r3, #1
    2eb2:	4642      	mov	r2, r8
    2eb4:	9306      	str	r3, [sp, #24]
    2eb6:	4b73      	ldr	r3, [pc, #460]	; (3084 <pow+0x35c>)
    2eb8:	6053      	str	r3, [r2, #4]
    2eba:	4643      	mov	r3, r8
    2ebc:	9a05      	ldr	r2, [sp, #20]
    2ebe:	609c      	str	r4, [r3, #8]
    2ec0:	60dd      	str	r5, [r3, #12]
    2ec2:	621a      	str	r2, [r3, #32]
    2ec4:	611e      	str	r6, [r3, #16]
    2ec6:	615f      	str	r7, [r3, #20]
    2ec8:	465b      	mov	r3, fp
    2eca:	781b      	ldrb	r3, [r3, #0]
    2ecc:	b25b      	sxtb	r3, r3
    2ece:	2b00      	cmp	r3, #0
    2ed0:	d00b      	beq.n	2eea <pow+0x1c2>
    2ed2:	2000      	movs	r0, #0
    2ed4:	4642      	mov	r2, r8
    2ed6:	496d      	ldr	r1, [pc, #436]	; (308c <pow+0x364>)
    2ed8:	6190      	str	r0, [r2, #24]
    2eda:	61d1      	str	r1, [r2, #28]
    2edc:	2b02      	cmp	r3, #2
    2ede:	d109      	bne.n	2ef4 <pow+0x1cc>
    2ee0:	f003 fc42 	bl	6768 <__errno>
    2ee4:	2321      	movs	r3, #33	; 0x21
    2ee6:	6003      	str	r3, [r0, #0]
    2ee8:	e009      	b.n	2efe <pow+0x1d6>
    2eea:	4642      	mov	r2, r8
    2eec:	2300      	movs	r3, #0
    2eee:	2400      	movs	r4, #0
    2ef0:	6193      	str	r3, [r2, #24]
    2ef2:	61d4      	str	r4, [r2, #28]
    2ef4:	4640      	mov	r0, r8
    2ef6:	f000 ff0d 	bl	3d14 <matherr>
    2efa:	2800      	cmp	r0, #0
    2efc:	d0f0      	beq.n	2ee0 <pow+0x1b8>
    2efe:	4643      	mov	r3, r8
    2f00:	6a1b      	ldr	r3, [r3, #32]
    2f02:	2b00      	cmp	r3, #0
    2f04:	d004      	beq.n	2f10 <pow+0x1e8>
    2f06:	f003 fc2f 	bl	6768 <__errno>
    2f0a:	4643      	mov	r3, r8
    2f0c:	6a1b      	ldr	r3, [r3, #32]
    2f0e:	6003      	str	r3, [r0, #0]
    2f10:	4643      	mov	r3, r8
    2f12:	69dc      	ldr	r4, [r3, #28]
    2f14:	699b      	ldr	r3, [r3, #24]
    2f16:	9300      	str	r3, [sp, #0]
    2f18:	9401      	str	r4, [sp, #4]
    2f1a:	e75a      	b.n	2dd2 <pow+0xaa>
    2f1c:	0020      	movs	r0, r4
    2f1e:	0029      	movs	r1, r5
    2f20:	f000 feee 	bl	3d00 <finite>
    2f24:	2800      	cmp	r0, #0
    2f26:	d100      	bne.n	2f2a <pow+0x202>
    2f28:	e771      	b.n	2e0e <pow+0xe6>
    2f2a:	0030      	movs	r0, r6
    2f2c:	0039      	movs	r1, r7
    2f2e:	f000 fee7 	bl	3d00 <finite>
    2f32:	2800      	cmp	r0, #0
    2f34:	d100      	bne.n	2f38 <pow+0x210>
    2f36:	e76a      	b.n	2e0e <pow+0xe6>
    2f38:	9802      	ldr	r0, [sp, #8]
    2f3a:	9903      	ldr	r1, [sp, #12]
    2f3c:	000b      	movs	r3, r1
    2f3e:	0002      	movs	r2, r0
    2f40:	f003 f8ce 	bl	60e0 <__aeabi_dcmpun>
    2f44:	ab06      	add	r3, sp, #24
    2f46:	4698      	mov	r8, r3
    2f48:	2800      	cmp	r0, #0
    2f4a:	d17a      	bne.n	3042 <pow+0x31a>
    2f4c:	2303      	movs	r3, #3
    2f4e:	4642      	mov	r2, r8
    2f50:	9306      	str	r3, [sp, #24]
    2f52:	4b4c      	ldr	r3, [pc, #304]	; (3084 <pow+0x35c>)
    2f54:	6210      	str	r0, [r2, #32]
    2f56:	6053      	str	r3, [r2, #4]
    2f58:	465b      	mov	r3, fp
    2f5a:	781b      	ldrb	r3, [r3, #0]
    2f5c:	6094      	str	r4, [r2, #8]
    2f5e:	60d5      	str	r5, [r2, #12]
    2f60:	b25b      	sxtb	r3, r3
    2f62:	6116      	str	r6, [r2, #16]
    2f64:	6157      	str	r7, [r2, #20]
    2f66:	4699      	mov	r9, r3
    2f68:	2b00      	cmp	r3, #0
    2f6a:	d148      	bne.n	2ffe <pow+0x2d6>
    2f6c:	22e0      	movs	r2, #224	; 0xe0
    2f6e:	4641      	mov	r1, r8
    2f70:	4b47      	ldr	r3, [pc, #284]	; (3090 <pow+0x368>)
    2f72:	0612      	lsls	r2, r2, #24
    2f74:	618a      	str	r2, [r1, #24]
    2f76:	61cb      	str	r3, [r1, #28]
    2f78:	0020      	movs	r0, r4
    2f7a:	2200      	movs	r2, #0
    2f7c:	2300      	movs	r3, #0
    2f7e:	0029      	movs	r1, r5
    2f80:	f001 f802 	bl	3f88 <__aeabi_dcmplt>
    2f84:	2800      	cmp	r0, #0
    2f86:	d100      	bne.n	2f8a <pow+0x262>
    2f88:	e773      	b.n	2e72 <pow+0x14a>
    2f8a:	2200      	movs	r2, #0
    2f8c:	4b41      	ldr	r3, [pc, #260]	; (3094 <pow+0x36c>)
    2f8e:	0030      	movs	r0, r6
    2f90:	0039      	movs	r1, r7
    2f92:	f002 fad7 	bl	5544 <__aeabi_dmul>
    2f96:	0004      	movs	r4, r0
    2f98:	000d      	movs	r5, r1
    2f9a:	f000 fec3 	bl	3d24 <rint>
    2f9e:	0002      	movs	r2, r0
    2fa0:	000b      	movs	r3, r1
    2fa2:	0020      	movs	r0, r4
    2fa4:	0029      	movs	r1, r5
    2fa6:	f000 ffe9 	bl	3f7c <__aeabi_dcmpeq>
    2faa:	2800      	cmp	r0, #0
    2fac:	d105      	bne.n	2fba <pow+0x292>
    2fae:	22e0      	movs	r2, #224	; 0xe0
    2fb0:	4b39      	ldr	r3, [pc, #228]	; (3098 <pow+0x370>)
    2fb2:	0612      	lsls	r2, r2, #24
    2fb4:	4641      	mov	r1, r8
    2fb6:	618a      	str	r2, [r1, #24]
    2fb8:	61cb      	str	r3, [r1, #28]
    2fba:	465b      	mov	r3, fp
    2fbc:	781b      	ldrb	r3, [r3, #0]
    2fbe:	b25b      	sxtb	r3, r3
    2fc0:	4699      	mov	r9, r3
    2fc2:	464b      	mov	r3, r9
    2fc4:	2b02      	cmp	r3, #2
    2fc6:	d000      	beq.n	2fca <pow+0x2a2>
    2fc8:	e753      	b.n	2e72 <pow+0x14a>
    2fca:	e757      	b.n	2e7c <pow+0x154>
    2fcc:	ab06      	add	r3, sp, #24
    2fce:	4698      	mov	r8, r3
    2fd0:	2301      	movs	r3, #1
    2fd2:	4642      	mov	r2, r8
    2fd4:	9306      	str	r3, [sp, #24]
    2fd6:	4b2b      	ldr	r3, [pc, #172]	; (3084 <pow+0x35c>)
    2fd8:	6053      	str	r3, [r2, #4]
    2fda:	4643      	mov	r3, r8
    2fdc:	609c      	str	r4, [r3, #8]
    2fde:	60dd      	str	r5, [r3, #12]
    2fe0:	2400      	movs	r4, #0
    2fe2:	9a00      	ldr	r2, [sp, #0]
    2fe4:	4d28      	ldr	r5, [pc, #160]	; (3088 <pow+0x360>)
    2fe6:	621a      	str	r2, [r3, #32]
    2fe8:	611e      	str	r6, [r3, #16]
    2fea:	615f      	str	r7, [r3, #20]
    2fec:	619c      	str	r4, [r3, #24]
    2fee:	61dd      	str	r5, [r3, #28]
    2ff0:	464b      	mov	r3, r9
    2ff2:	9400      	str	r4, [sp, #0]
    2ff4:	9501      	str	r5, [sp, #4]
    2ff6:	2b02      	cmp	r3, #2
    2ff8:	d000      	beq.n	2ffc <pow+0x2d4>
    2ffa:	e77b      	b.n	2ef4 <pow+0x1cc>
    2ffc:	e6e9      	b.n	2dd2 <pow+0xaa>
    2ffe:	2200      	movs	r2, #0
    3000:	4641      	mov	r1, r8
    3002:	4b26      	ldr	r3, [pc, #152]	; (309c <pow+0x374>)
    3004:	0020      	movs	r0, r4
    3006:	618a      	str	r2, [r1, #24]
    3008:	61cb      	str	r3, [r1, #28]
    300a:	2200      	movs	r2, #0
    300c:	2300      	movs	r3, #0
    300e:	0029      	movs	r1, r5
    3010:	f000 ffba 	bl	3f88 <__aeabi_dcmplt>
    3014:	2800      	cmp	r0, #0
    3016:	d0d4      	beq.n	2fc2 <pow+0x29a>
    3018:	2200      	movs	r2, #0
    301a:	4b1e      	ldr	r3, [pc, #120]	; (3094 <pow+0x36c>)
    301c:	0030      	movs	r0, r6
    301e:	0039      	movs	r1, r7
    3020:	f002 fa90 	bl	5544 <__aeabi_dmul>
    3024:	0004      	movs	r4, r0
    3026:	000d      	movs	r5, r1
    3028:	f000 fe7c 	bl	3d24 <rint>
    302c:	0002      	movs	r2, r0
    302e:	000b      	movs	r3, r1
    3030:	0020      	movs	r0, r4
    3032:	0029      	movs	r1, r5
    3034:	f000 ffa2 	bl	3f7c <__aeabi_dcmpeq>
    3038:	2800      	cmp	r0, #0
    303a:	d1be      	bne.n	2fba <pow+0x292>
    303c:	2200      	movs	r2, #0
    303e:	4b13      	ldr	r3, [pc, #76]	; (308c <pow+0x364>)
    3040:	e7b8      	b.n	2fb4 <pow+0x28c>
    3042:	2301      	movs	r3, #1
    3044:	4642      	mov	r2, r8
    3046:	9306      	str	r3, [sp, #24]
    3048:	4b0e      	ldr	r3, [pc, #56]	; (3084 <pow+0x35c>)
    304a:	6053      	str	r3, [r2, #4]
    304c:	4643      	mov	r3, r8
    304e:	464a      	mov	r2, r9
    3050:	609c      	str	r4, [r3, #8]
    3052:	60dd      	str	r5, [r3, #12]
    3054:	621a      	str	r2, [r3, #32]
    3056:	611e      	str	r6, [r3, #16]
    3058:	615f      	str	r7, [r3, #20]
    305a:	2400      	movs	r4, #0
    305c:	465b      	mov	r3, fp
    305e:	571c      	ldrsb	r4, [r3, r4]
    3060:	2c00      	cmp	r4, #0
    3062:	d100      	bne.n	3066 <pow+0x33e>
    3064:	e741      	b.n	2eea <pow+0x1c2>
    3066:	2300      	movs	r3, #0
    3068:	2200      	movs	r2, #0
    306a:	0019      	movs	r1, r3
    306c:	0010      	movs	r0, r2
    306e:	f001 fe45 	bl	4cfc <__aeabi_ddiv>
    3072:	4643      	mov	r3, r8
    3074:	6198      	str	r0, [r3, #24]
    3076:	61d9      	str	r1, [r3, #28]
    3078:	2c02      	cmp	r4, #2
    307a:	d100      	bne.n	307e <pow+0x356>
    307c:	e730      	b.n	2ee0 <pow+0x1b8>
    307e:	e739      	b.n	2ef4 <pow+0x1cc>
    3080:	20000070 	.word	0x20000070
    3084:	0000690c 	.word	0x0000690c
    3088:	3ff00000 	.word	0x3ff00000
    308c:	fff00000 	.word	0xfff00000
    3090:	47efffff 	.word	0x47efffff
    3094:	3fe00000 	.word	0x3fe00000
    3098:	c7efffff 	.word	0xc7efffff
    309c:	7ff00000 	.word	0x7ff00000

000030a0 <__ieee754_pow>:
    30a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    30a2:	4656      	mov	r6, sl
    30a4:	464d      	mov	r5, r9
    30a6:	4644      	mov	r4, r8
    30a8:	465f      	mov	r7, fp
    30aa:	b4f0      	push	{r4, r5, r6, r7}
    30ac:	001c      	movs	r4, r3
    30ae:	0013      	movs	r3, r2
    30b0:	0067      	lsls	r7, r4, #1
    30b2:	b091      	sub	sp, #68	; 0x44
    30b4:	087f      	lsrs	r7, r7, #1
    30b6:	9300      	str	r3, [sp, #0]
    30b8:	9401      	str	r4, [sp, #4]
    30ba:	0006      	movs	r6, r0
    30bc:	000d      	movs	r5, r1
    30be:	4680      	mov	r8, r0
    30c0:	4689      	mov	r9, r1
    30c2:	46a2      	mov	sl, r4
    30c4:	433b      	orrs	r3, r7
    30c6:	d032      	beq.n	312e <__ieee754_pow+0x8e>
    30c8:	4b6e      	ldr	r3, [pc, #440]	; (3284 <__ieee754_pow+0x1e4>)
    30ca:	006c      	lsls	r4, r5, #1
    30cc:	0864      	lsrs	r4, r4, #1
    30ce:	429c      	cmp	r4, r3
    30d0:	dc29      	bgt.n	3126 <__ieee754_pow+0x86>
    30d2:	d026      	beq.n	3122 <__ieee754_pow+0x82>
    30d4:	429f      	cmp	r7, r3
    30d6:	dc26      	bgt.n	3126 <__ieee754_pow+0x86>
    30d8:	4b6a      	ldr	r3, [pc, #424]	; (3284 <__ieee754_pow+0x1e4>)
    30da:	429f      	cmp	r7, r3
    30dc:	d100      	bne.n	30e0 <__ieee754_pow+0x40>
    30de:	e089      	b.n	31f4 <__ieee754_pow+0x154>
    30e0:	2300      	movs	r3, #0
    30e2:	469b      	mov	fp, r3
    30e4:	464b      	mov	r3, r9
    30e6:	2b00      	cmp	r3, #0
    30e8:	da00      	bge.n	30ec <__ieee754_pow+0x4c>
    30ea:	e087      	b.n	31fc <__ieee754_pow+0x15c>
    30ec:	2a00      	cmp	r2, #0
    30ee:	d12f      	bne.n	3150 <__ieee754_pow+0xb0>
    30f0:	4b64      	ldr	r3, [pc, #400]	; (3284 <__ieee754_pow+0x1e4>)
    30f2:	429f      	cmp	r7, r3
    30f4:	d100      	bne.n	30f8 <__ieee754_pow+0x58>
    30f6:	e09f      	b.n	3238 <__ieee754_pow+0x198>
    30f8:	4b63      	ldr	r3, [pc, #396]	; (3288 <__ieee754_pow+0x1e8>)
    30fa:	429f      	cmp	r7, r3
    30fc:	d05d      	beq.n	31ba <__ieee754_pow+0x11a>
    30fe:	2380      	movs	r3, #128	; 0x80
    3100:	05db      	lsls	r3, r3, #23
    3102:	459a      	cmp	sl, r3
    3104:	d101      	bne.n	310a <__ieee754_pow+0x6a>
    3106:	f000 fbc1 	bl	388c <__ieee754_pow+0x7ec>
    310a:	4b60      	ldr	r3, [pc, #384]	; (328c <__ieee754_pow+0x1ec>)
    310c:	459a      	cmp	sl, r3
    310e:	d11f      	bne.n	3150 <__ieee754_pow+0xb0>
    3110:	464b      	mov	r3, r9
    3112:	2b00      	cmp	r3, #0
    3114:	db1c      	blt.n	3150 <__ieee754_pow+0xb0>
    3116:	0030      	movs	r0, r6
    3118:	0029      	movs	r1, r5
    311a:	f000 fcf7 	bl	3b0c <__ieee754_sqrt>
    311e:	0006      	movs	r6, r0
    3120:	e007      	b.n	3132 <__ieee754_pow+0x92>
    3122:	2800      	cmp	r0, #0
    3124:	d00d      	beq.n	3142 <__ieee754_pow+0xa2>
    3126:	4b5a      	ldr	r3, [pc, #360]	; (3290 <__ieee754_pow+0x1f0>)
    3128:	18e0      	adds	r0, r4, r3
    312a:	4330      	orrs	r0, r6
    312c:	d10b      	bne.n	3146 <__ieee754_pow+0xa6>
    312e:	2600      	movs	r6, #0
    3130:	4955      	ldr	r1, [pc, #340]	; (3288 <__ieee754_pow+0x1e8>)
    3132:	0030      	movs	r0, r6
    3134:	b011      	add	sp, #68	; 0x44
    3136:	bc3c      	pop	{r2, r3, r4, r5}
    3138:	4690      	mov	r8, r2
    313a:	4699      	mov	r9, r3
    313c:	46a2      	mov	sl, r4
    313e:	46ab      	mov	fp, r5
    3140:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3142:	42a7      	cmp	r7, r4
    3144:	ddc8      	ble.n	30d8 <__ieee754_pow+0x38>
    3146:	4853      	ldr	r0, [pc, #332]	; (3294 <__ieee754_pow+0x1f4>)
    3148:	f000 fde6 	bl	3d18 <nan>
    314c:	0006      	movs	r6, r0
    314e:	e7f0      	b.n	3132 <__ieee754_pow+0x92>
    3150:	0030      	movs	r0, r6
    3152:	0029      	movs	r1, r5
    3154:	f000 fdd0 	bl	3cf8 <fabs>
    3158:	4643      	mov	r3, r8
    315a:	2b00      	cmp	r3, #0
    315c:	d01d      	beq.n	319a <__ieee754_pow+0xfa>
    315e:	0feb      	lsrs	r3, r5, #31
    3160:	3b01      	subs	r3, #1
    3162:	4698      	mov	r8, r3
    3164:	465b      	mov	r3, fp
    3166:	4642      	mov	r2, r8
    3168:	4313      	orrs	r3, r2
    316a:	d079      	beq.n	3260 <__ieee754_pow+0x1c0>
    316c:	4b4a      	ldr	r3, [pc, #296]	; (3298 <__ieee754_pow+0x1f8>)
    316e:	429f      	cmp	r7, r3
    3170:	dc00      	bgt.n	3174 <__ieee754_pow+0xd4>
    3172:	e09f      	b.n	32b4 <__ieee754_pow+0x214>
    3174:	4b49      	ldr	r3, [pc, #292]	; (329c <__ieee754_pow+0x1fc>)
    3176:	429f      	cmp	r7, r3
    3178:	dc01      	bgt.n	317e <__ieee754_pow+0xde>
    317a:	f000 fbce 	bl	391a <__ieee754_pow+0x87a>
    317e:	4b48      	ldr	r3, [pc, #288]	; (32a0 <__ieee754_pow+0x200>)
    3180:	429c      	cmp	r4, r3
    3182:	dd79      	ble.n	3278 <__ieee754_pow+0x1d8>
    3184:	4653      	mov	r3, sl
    3186:	2b00      	cmp	r3, #0
    3188:	dd79      	ble.n	327e <__ieee754_pow+0x1de>
    318a:	4a46      	ldr	r2, [pc, #280]	; (32a4 <__ieee754_pow+0x204>)
    318c:	4b46      	ldr	r3, [pc, #280]	; (32a8 <__ieee754_pow+0x208>)
    318e:	0010      	movs	r0, r2
    3190:	0019      	movs	r1, r3
    3192:	f002 f9d7 	bl	5544 <__aeabi_dmul>
    3196:	0006      	movs	r6, r0
    3198:	e7cb      	b.n	3132 <__ieee754_pow+0x92>
    319a:	2c00      	cmp	r4, #0
    319c:	d004      	beq.n	31a8 <__ieee754_pow+0x108>
    319e:	4a3a      	ldr	r2, [pc, #232]	; (3288 <__ieee754_pow+0x1e8>)
    31a0:	00ab      	lsls	r3, r5, #2
    31a2:	089b      	lsrs	r3, r3, #2
    31a4:	4293      	cmp	r3, r2
    31a6:	d1da      	bne.n	315e <__ieee754_pow+0xbe>
    31a8:	4653      	mov	r3, sl
    31aa:	2b00      	cmp	r3, #0
    31ac:	da00      	bge.n	31b0 <__ieee754_pow+0x110>
    31ae:	e3ad      	b.n	390c <__ieee754_pow+0x86c>
    31b0:	464b      	mov	r3, r9
    31b2:	2b00      	cmp	r3, #0
    31b4:	db0d      	blt.n	31d2 <__ieee754_pow+0x132>
    31b6:	0006      	movs	r6, r0
    31b8:	e7bb      	b.n	3132 <__ieee754_pow+0x92>
    31ba:	4653      	mov	r3, sl
    31bc:	0029      	movs	r1, r5
    31be:	2b00      	cmp	r3, #0
    31c0:	dab7      	bge.n	3132 <__ieee754_pow+0x92>
    31c2:	0032      	movs	r2, r6
    31c4:	002b      	movs	r3, r5
    31c6:	2000      	movs	r0, #0
    31c8:	492f      	ldr	r1, [pc, #188]	; (3288 <__ieee754_pow+0x1e8>)
    31ca:	f001 fd97 	bl	4cfc <__aeabi_ddiv>
    31ce:	0006      	movs	r6, r0
    31d0:	e7af      	b.n	3132 <__ieee754_pow+0x92>
    31d2:	4b2f      	ldr	r3, [pc, #188]	; (3290 <__ieee754_pow+0x1f0>)
    31d4:	469c      	mov	ip, r3
    31d6:	465b      	mov	r3, fp
    31d8:	4464      	add	r4, ip
    31da:	431c      	orrs	r4, r3
    31dc:	d101      	bne.n	31e2 <__ieee754_pow+0x142>
    31de:	f000 fc2b 	bl	3a38 <__ieee754_pow+0x998>
    31e2:	465b      	mov	r3, fp
    31e4:	0006      	movs	r6, r0
    31e6:	2b01      	cmp	r3, #1
    31e8:	d1a3      	bne.n	3132 <__ieee754_pow+0x92>
    31ea:	2380      	movs	r3, #128	; 0x80
    31ec:	061b      	lsls	r3, r3, #24
    31ee:	469c      	mov	ip, r3
    31f0:	4461      	add	r1, ip
    31f2:	e79e      	b.n	3132 <__ieee754_pow+0x92>
    31f4:	2a00      	cmp	r2, #0
    31f6:	d100      	bne.n	31fa <__ieee754_pow+0x15a>
    31f8:	e772      	b.n	30e0 <__ieee754_pow+0x40>
    31fa:	e794      	b.n	3126 <__ieee754_pow+0x86>
    31fc:	4b2b      	ldr	r3, [pc, #172]	; (32ac <__ieee754_pow+0x20c>)
    31fe:	429f      	cmp	r7, r3
    3200:	dc2b      	bgt.n	325a <__ieee754_pow+0x1ba>
    3202:	4b27      	ldr	r3, [pc, #156]	; (32a0 <__ieee754_pow+0x200>)
    3204:	429f      	cmp	r7, r3
    3206:	dc00      	bgt.n	320a <__ieee754_pow+0x16a>
    3208:	e770      	b.n	30ec <__ieee754_pow+0x4c>
    320a:	4929      	ldr	r1, [pc, #164]	; (32b0 <__ieee754_pow+0x210>)
    320c:	153b      	asrs	r3, r7, #20
    320e:	468c      	mov	ip, r1
    3210:	4463      	add	r3, ip
    3212:	2b14      	cmp	r3, #20
    3214:	dc01      	bgt.n	321a <__ieee754_pow+0x17a>
    3216:	f000 fbf2 	bl	39fe <__ieee754_pow+0x95e>
    321a:	2134      	movs	r1, #52	; 0x34
    321c:	1acb      	subs	r3, r1, r3
    321e:	9900      	ldr	r1, [sp, #0]
    3220:	40d9      	lsrs	r1, r3
    3222:	0008      	movs	r0, r1
    3224:	4098      	lsls	r0, r3
    3226:	4282      	cmp	r2, r0
    3228:	d000      	beq.n	322c <__ieee754_pow+0x18c>
    322a:	e75f      	b.n	30ec <__ieee754_pow+0x4c>
    322c:	2301      	movs	r3, #1
    322e:	4019      	ands	r1, r3
    3230:	3301      	adds	r3, #1
    3232:	1a5b      	subs	r3, r3, r1
    3234:	469b      	mov	fp, r3
    3236:	e759      	b.n	30ec <__ieee754_pow+0x4c>
    3238:	4b15      	ldr	r3, [pc, #84]	; (3290 <__ieee754_pow+0x1f0>)
    323a:	18e0      	adds	r0, r4, r3
    323c:	4306      	orrs	r6, r0
    323e:	d100      	bne.n	3242 <__ieee754_pow+0x1a2>
    3240:	e775      	b.n	312e <__ieee754_pow+0x8e>
    3242:	4b17      	ldr	r3, [pc, #92]	; (32a0 <__ieee754_pow+0x200>)
    3244:	429c      	cmp	r4, r3
    3246:	dc00      	bgt.n	324a <__ieee754_pow+0x1aa>
    3248:	e351      	b.n	38ee <__ieee754_pow+0x84e>
    324a:	4653      	mov	r3, sl
    324c:	2b00      	cmp	r3, #0
    324e:	db16      	blt.n	327e <__ieee754_pow+0x1de>
    3250:	9b00      	ldr	r3, [sp, #0]
    3252:	9c01      	ldr	r4, [sp, #4]
    3254:	001e      	movs	r6, r3
    3256:	0021      	movs	r1, r4
    3258:	e76b      	b.n	3132 <__ieee754_pow+0x92>
    325a:	2302      	movs	r3, #2
    325c:	469b      	mov	fp, r3
    325e:	e745      	b.n	30ec <__ieee754_pow+0x4c>
    3260:	0032      	movs	r2, r6
    3262:	002b      	movs	r3, r5
    3264:	0030      	movs	r0, r6
    3266:	0029      	movs	r1, r5
    3268:	f002 fbe6 	bl	5a38 <__aeabi_dsub>
    326c:	0002      	movs	r2, r0
    326e:	000b      	movs	r3, r1
    3270:	f001 fd44 	bl	4cfc <__aeabi_ddiv>
    3274:	0006      	movs	r6, r0
    3276:	e75c      	b.n	3132 <__ieee754_pow+0x92>
    3278:	4653      	mov	r3, sl
    327a:	2b00      	cmp	r3, #0
    327c:	db85      	blt.n	318a <__ieee754_pow+0xea>
    327e:	2600      	movs	r6, #0
    3280:	2100      	movs	r1, #0
    3282:	e756      	b.n	3132 <__ieee754_pow+0x92>
    3284:	7ff00000 	.word	0x7ff00000
    3288:	3ff00000 	.word	0x3ff00000
    328c:	3fe00000 	.word	0x3fe00000
    3290:	c0100000 	.word	0xc0100000
    3294:	00006910 	.word	0x00006910
    3298:	41e00000 	.word	0x41e00000
    329c:	43f00000 	.word	0x43f00000
    32a0:	3fefffff 	.word	0x3fefffff
    32a4:	8800759c 	.word	0x8800759c
    32a8:	7e37e43c 	.word	0x7e37e43c
    32ac:	433fffff 	.word	0x433fffff
    32b0:	fffffc01 	.word	0xfffffc01
    32b4:	4be8      	ldr	r3, [pc, #928]	; (3658 <__ieee754_pow+0x5b8>)
    32b6:	2200      	movs	r2, #0
    32b8:	429c      	cmp	r4, r3
    32ba:	dc06      	bgt.n	32ca <__ieee754_pow+0x22a>
    32bc:	2200      	movs	r2, #0
    32be:	4be7      	ldr	r3, [pc, #924]	; (365c <__ieee754_pow+0x5bc>)
    32c0:	f002 f940 	bl	5544 <__aeabi_dmul>
    32c4:	2235      	movs	r2, #53	; 0x35
    32c6:	000c      	movs	r4, r1
    32c8:	4252      	negs	r2, r2
    32ca:	4de5      	ldr	r5, [pc, #916]	; (3660 <__ieee754_pow+0x5c0>)
    32cc:	1523      	asrs	r3, r4, #20
    32ce:	46ac      	mov	ip, r5
    32d0:	4463      	add	r3, ip
    32d2:	4699      	mov	r9, r3
    32d4:	0324      	lsls	r4, r4, #12
    32d6:	4de3      	ldr	r5, [pc, #908]	; (3664 <__ieee754_pow+0x5c4>)
    32d8:	4be3      	ldr	r3, [pc, #908]	; (3668 <__ieee754_pow+0x5c8>)
    32da:	0b24      	lsrs	r4, r4, #12
    32dc:	4491      	add	r9, r2
    32de:	4325      	orrs	r5, r4
    32e0:	429c      	cmp	r4, r3
    32e2:	dd09      	ble.n	32f8 <__ieee754_pow+0x258>
    32e4:	4be1      	ldr	r3, [pc, #900]	; (366c <__ieee754_pow+0x5cc>)
    32e6:	429c      	cmp	r4, r3
    32e8:	dc00      	bgt.n	32ec <__ieee754_pow+0x24c>
    32ea:	e3a9      	b.n	3a40 <__ieee754_pow+0x9a0>
    32ec:	2301      	movs	r3, #1
    32ee:	469c      	mov	ip, r3
    32f0:	4bdf      	ldr	r3, [pc, #892]	; (3670 <__ieee754_pow+0x5d0>)
    32f2:	44e1      	add	r9, ip
    32f4:	469c      	mov	ip, r3
    32f6:	4465      	add	r5, ip
    32f8:	2300      	movs	r3, #0
    32fa:	2400      	movs	r4, #0
    32fc:	2200      	movs	r2, #0
    32fe:	9308      	str	r3, [sp, #32]
    3300:	9409      	str	r4, [sp, #36]	; 0x24
    3302:	930c      	str	r3, [sp, #48]	; 0x30
    3304:	940d      	str	r4, [sp, #52]	; 0x34
    3306:	2400      	movs	r4, #0
    3308:	4bd6      	ldr	r3, [pc, #856]	; (3664 <__ieee754_pow+0x5c4>)
    330a:	9206      	str	r2, [sp, #24]
    330c:	9307      	str	r3, [sp, #28]
    330e:	9a06      	ldr	r2, [sp, #24]
    3310:	9b07      	ldr	r3, [sp, #28]
    3312:	0029      	movs	r1, r5
    3314:	900a      	str	r0, [sp, #40]	; 0x28
    3316:	910b      	str	r1, [sp, #44]	; 0x2c
    3318:	f002 fb8e 	bl	5a38 <__aeabi_dsub>
    331c:	9a06      	ldr	r2, [sp, #24]
    331e:	9b07      	ldr	r3, [sp, #28]
    3320:	0006      	movs	r6, r0
    3322:	000f      	movs	r7, r1
    3324:	980a      	ldr	r0, [sp, #40]	; 0x28
    3326:	990b      	ldr	r1, [sp, #44]	; 0x2c
    3328:	f001 f9bc 	bl	46a4 <__aeabi_dadd>
    332c:	0002      	movs	r2, r0
    332e:	000b      	movs	r3, r1
    3330:	2000      	movs	r0, #0
    3332:	49cc      	ldr	r1, [pc, #816]	; (3664 <__ieee754_pow+0x5c4>)
    3334:	f001 fce2 	bl	4cfc <__aeabi_ddiv>
    3338:	000a      	movs	r2, r1
    333a:	0001      	movs	r1, r0
    333c:	0013      	movs	r3, r2
    333e:	910e      	str	r1, [sp, #56]	; 0x38
    3340:	920f      	str	r2, [sp, #60]	; 0x3c
    3342:	0002      	movs	r2, r0
    3344:	0039      	movs	r1, r7
    3346:	0030      	movs	r0, r6
    3348:	f002 f8fc 	bl	5544 <__aeabi_dmul>
    334c:	000a      	movs	r2, r1
    334e:	0001      	movs	r1, r0
    3350:	2080      	movs	r0, #128	; 0x80
    3352:	9104      	str	r1, [sp, #16]
    3354:	9205      	str	r2, [sp, #20]
    3356:	0013      	movs	r3, r2
    3358:	2200      	movs	r2, #0
    335a:	2180      	movs	r1, #128	; 0x80
    335c:	0300      	lsls	r0, r0, #12
    335e:	4684      	mov	ip, r0
    3360:	9202      	str	r2, [sp, #8]
    3362:	9303      	str	r3, [sp, #12]
    3364:	2200      	movs	r2, #0
    3366:	0589      	lsls	r1, r1, #22
    3368:	106d      	asrs	r5, r5, #1
    336a:	430d      	orrs	r5, r1
    336c:	4465      	add	r5, ip
    336e:	192b      	adds	r3, r5, r4
    3370:	9802      	ldr	r0, [sp, #8]
    3372:	9903      	ldr	r1, [sp, #12]
    3374:	0014      	movs	r4, r2
    3376:	001d      	movs	r5, r3
    3378:	f002 f8e4 	bl	5544 <__aeabi_dmul>
    337c:	0002      	movs	r2, r0
    337e:	000b      	movs	r3, r1
    3380:	0030      	movs	r0, r6
    3382:	0039      	movs	r1, r7
    3384:	f002 fb58 	bl	5a38 <__aeabi_dsub>
    3388:	9a06      	ldr	r2, [sp, #24]
    338a:	9b07      	ldr	r3, [sp, #28]
    338c:	0006      	movs	r6, r0
    338e:	000f      	movs	r7, r1
    3390:	0020      	movs	r0, r4
    3392:	0029      	movs	r1, r5
    3394:	f002 fb50 	bl	5a38 <__aeabi_dsub>
    3398:	0002      	movs	r2, r0
    339a:	000b      	movs	r3, r1
    339c:	980a      	ldr	r0, [sp, #40]	; 0x28
    339e:	990b      	ldr	r1, [sp, #44]	; 0x2c
    33a0:	f002 fb4a 	bl	5a38 <__aeabi_dsub>
    33a4:	9a02      	ldr	r2, [sp, #8]
    33a6:	9b03      	ldr	r3, [sp, #12]
    33a8:	f002 f8cc 	bl	5544 <__aeabi_dmul>
    33ac:	0002      	movs	r2, r0
    33ae:	000b      	movs	r3, r1
    33b0:	0030      	movs	r0, r6
    33b2:	0039      	movs	r1, r7
    33b4:	f002 fb40 	bl	5a38 <__aeabi_dsub>
    33b8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    33ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    33bc:	f002 f8c2 	bl	5544 <__aeabi_dmul>
    33c0:	9d04      	ldr	r5, [sp, #16]
    33c2:	9e05      	ldr	r6, [sp, #20]
    33c4:	9006      	str	r0, [sp, #24]
    33c6:	9107      	str	r1, [sp, #28]
    33c8:	002a      	movs	r2, r5
    33ca:	0033      	movs	r3, r6
    33cc:	0028      	movs	r0, r5
    33ce:	0031      	movs	r1, r6
    33d0:	f002 f8b8 	bl	5544 <__aeabi_dmul>
    33d4:	0006      	movs	r6, r0
    33d6:	000f      	movs	r7, r1
    33d8:	4aa6      	ldr	r2, [pc, #664]	; (3674 <__ieee754_pow+0x5d4>)
    33da:	4ba7      	ldr	r3, [pc, #668]	; (3678 <__ieee754_pow+0x5d8>)
    33dc:	f002 f8b2 	bl	5544 <__aeabi_dmul>
    33e0:	4aa6      	ldr	r2, [pc, #664]	; (367c <__ieee754_pow+0x5dc>)
    33e2:	4ba7      	ldr	r3, [pc, #668]	; (3680 <__ieee754_pow+0x5e0>)
    33e4:	f001 f95e 	bl	46a4 <__aeabi_dadd>
    33e8:	0032      	movs	r2, r6
    33ea:	003b      	movs	r3, r7
    33ec:	f002 f8aa 	bl	5544 <__aeabi_dmul>
    33f0:	4aa4      	ldr	r2, [pc, #656]	; (3684 <__ieee754_pow+0x5e4>)
    33f2:	4ba5      	ldr	r3, [pc, #660]	; (3688 <__ieee754_pow+0x5e8>)
    33f4:	f001 f956 	bl	46a4 <__aeabi_dadd>
    33f8:	0032      	movs	r2, r6
    33fa:	003b      	movs	r3, r7
    33fc:	f002 f8a2 	bl	5544 <__aeabi_dmul>
    3400:	4aa2      	ldr	r2, [pc, #648]	; (368c <__ieee754_pow+0x5ec>)
    3402:	4ba3      	ldr	r3, [pc, #652]	; (3690 <__ieee754_pow+0x5f0>)
    3404:	f001 f94e 	bl	46a4 <__aeabi_dadd>
    3408:	0032      	movs	r2, r6
    340a:	003b      	movs	r3, r7
    340c:	f002 f89a 	bl	5544 <__aeabi_dmul>
    3410:	4aa0      	ldr	r2, [pc, #640]	; (3694 <__ieee754_pow+0x5f4>)
    3412:	4ba1      	ldr	r3, [pc, #644]	; (3698 <__ieee754_pow+0x5f8>)
    3414:	f001 f946 	bl	46a4 <__aeabi_dadd>
    3418:	0032      	movs	r2, r6
    341a:	003b      	movs	r3, r7
    341c:	f002 f892 	bl	5544 <__aeabi_dmul>
    3420:	4a9e      	ldr	r2, [pc, #632]	; (369c <__ieee754_pow+0x5fc>)
    3422:	4b9f      	ldr	r3, [pc, #636]	; (36a0 <__ieee754_pow+0x600>)
    3424:	f001 f93e 	bl	46a4 <__aeabi_dadd>
    3428:	0032      	movs	r2, r6
    342a:	0004      	movs	r4, r0
    342c:	000d      	movs	r5, r1
    342e:	003b      	movs	r3, r7
    3430:	0030      	movs	r0, r6
    3432:	0039      	movs	r1, r7
    3434:	f002 f886 	bl	5544 <__aeabi_dmul>
    3438:	0002      	movs	r2, r0
    343a:	000b      	movs	r3, r1
    343c:	0020      	movs	r0, r4
    343e:	0029      	movs	r1, r5
    3440:	f002 f880 	bl	5544 <__aeabi_dmul>
    3444:	9e02      	ldr	r6, [sp, #8]
    3446:	9f03      	ldr	r7, [sp, #12]
    3448:	0004      	movs	r4, r0
    344a:	000d      	movs	r5, r1
    344c:	9804      	ldr	r0, [sp, #16]
    344e:	9905      	ldr	r1, [sp, #20]
    3450:	0032      	movs	r2, r6
    3452:	003b      	movs	r3, r7
    3454:	f001 f926 	bl	46a4 <__aeabi_dadd>
    3458:	9a06      	ldr	r2, [sp, #24]
    345a:	9b07      	ldr	r3, [sp, #28]
    345c:	f002 f872 	bl	5544 <__aeabi_dmul>
    3460:	0022      	movs	r2, r4
    3462:	002b      	movs	r3, r5
    3464:	f001 f91e 	bl	46a4 <__aeabi_dadd>
    3468:	0032      	movs	r2, r6
    346a:	900a      	str	r0, [sp, #40]	; 0x28
    346c:	910b      	str	r1, [sp, #44]	; 0x2c
    346e:	003b      	movs	r3, r7
    3470:	0030      	movs	r0, r6
    3472:	0039      	movs	r1, r7
    3474:	9602      	str	r6, [sp, #8]
    3476:	9703      	str	r7, [sp, #12]
    3478:	f002 f864 	bl	5544 <__aeabi_dmul>
    347c:	2200      	movs	r2, #0
    347e:	4b89      	ldr	r3, [pc, #548]	; (36a4 <__ieee754_pow+0x604>)
    3480:	0004      	movs	r4, r0
    3482:	000d      	movs	r5, r1
    3484:	f001 f90e 	bl	46a4 <__aeabi_dadd>
    3488:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    348a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    348c:	f001 f90a 	bl	46a4 <__aeabi_dadd>
    3490:	2600      	movs	r6, #0
    3492:	000f      	movs	r7, r1
    3494:	0032      	movs	r2, r6
    3496:	000b      	movs	r3, r1
    3498:	9802      	ldr	r0, [sp, #8]
    349a:	9903      	ldr	r1, [sp, #12]
    349c:	f002 f852 	bl	5544 <__aeabi_dmul>
    34a0:	2200      	movs	r2, #0
    34a2:	9002      	str	r0, [sp, #8]
    34a4:	9103      	str	r1, [sp, #12]
    34a6:	4b7f      	ldr	r3, [pc, #508]	; (36a4 <__ieee754_pow+0x604>)
    34a8:	0030      	movs	r0, r6
    34aa:	0039      	movs	r1, r7
    34ac:	f002 fac4 	bl	5a38 <__aeabi_dsub>
    34b0:	0022      	movs	r2, r4
    34b2:	002b      	movs	r3, r5
    34b4:	f002 fac0 	bl	5a38 <__aeabi_dsub>
    34b8:	0002      	movs	r2, r0
    34ba:	000b      	movs	r3, r1
    34bc:	980a      	ldr	r0, [sp, #40]	; 0x28
    34be:	990b      	ldr	r1, [sp, #44]	; 0x2c
    34c0:	f002 faba 	bl	5a38 <__aeabi_dsub>
    34c4:	9a04      	ldr	r2, [sp, #16]
    34c6:	9b05      	ldr	r3, [sp, #20]
    34c8:	f002 f83c 	bl	5544 <__aeabi_dmul>
    34cc:	0032      	movs	r2, r6
    34ce:	0004      	movs	r4, r0
    34d0:	000d      	movs	r5, r1
    34d2:	9806      	ldr	r0, [sp, #24]
    34d4:	9907      	ldr	r1, [sp, #28]
    34d6:	003b      	movs	r3, r7
    34d8:	f002 f834 	bl	5544 <__aeabi_dmul>
    34dc:	0002      	movs	r2, r0
    34de:	000b      	movs	r3, r1
    34e0:	0020      	movs	r0, r4
    34e2:	0029      	movs	r1, r5
    34e4:	f001 f8de 	bl	46a4 <__aeabi_dadd>
    34e8:	0004      	movs	r4, r0
    34ea:	000d      	movs	r5, r1
    34ec:	0002      	movs	r2, r0
    34ee:	000b      	movs	r3, r1
    34f0:	9802      	ldr	r0, [sp, #8]
    34f2:	9903      	ldr	r1, [sp, #12]
    34f4:	f001 f8d6 	bl	46a4 <__aeabi_dadd>
    34f8:	2600      	movs	r6, #0
    34fa:	22e0      	movs	r2, #224	; 0xe0
    34fc:	4b6a      	ldr	r3, [pc, #424]	; (36a8 <__ieee754_pow+0x608>)
    34fe:	0612      	lsls	r2, r2, #24
    3500:	0030      	movs	r0, r6
    3502:	000f      	movs	r7, r1
    3504:	f002 f81e 	bl	5544 <__aeabi_dmul>
    3508:	9a02      	ldr	r2, [sp, #8]
    350a:	9b03      	ldr	r3, [sp, #12]
    350c:	9004      	str	r0, [sp, #16]
    350e:	9105      	str	r1, [sp, #20]
    3510:	0030      	movs	r0, r6
    3512:	0039      	movs	r1, r7
    3514:	f002 fa90 	bl	5a38 <__aeabi_dsub>
    3518:	0002      	movs	r2, r0
    351a:	000b      	movs	r3, r1
    351c:	0020      	movs	r0, r4
    351e:	0029      	movs	r1, r5
    3520:	f002 fa8a 	bl	5a38 <__aeabi_dsub>
    3524:	4a61      	ldr	r2, [pc, #388]	; (36ac <__ieee754_pow+0x60c>)
    3526:	4b60      	ldr	r3, [pc, #384]	; (36a8 <__ieee754_pow+0x608>)
    3528:	f002 f80c 	bl	5544 <__aeabi_dmul>
    352c:	4a60      	ldr	r2, [pc, #384]	; (36b0 <__ieee754_pow+0x610>)
    352e:	0004      	movs	r4, r0
    3530:	000d      	movs	r5, r1
    3532:	4b60      	ldr	r3, [pc, #384]	; (36b4 <__ieee754_pow+0x614>)
    3534:	0030      	movs	r0, r6
    3536:	0039      	movs	r1, r7
    3538:	f002 f804 	bl	5544 <__aeabi_dmul>
    353c:	0002      	movs	r2, r0
    353e:	000b      	movs	r3, r1
    3540:	0020      	movs	r0, r4
    3542:	0029      	movs	r1, r5
    3544:	f001 f8ae 	bl	46a4 <__aeabi_dadd>
    3548:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    354a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    354c:	f001 f8aa 	bl	46a4 <__aeabi_dadd>
    3550:	0006      	movs	r6, r0
    3552:	4648      	mov	r0, r9
    3554:	000f      	movs	r7, r1
    3556:	f002 fe19 	bl	618c <__aeabi_i2d>
    355a:	0004      	movs	r4, r0
    355c:	000d      	movs	r5, r1
    355e:	9804      	ldr	r0, [sp, #16]
    3560:	9905      	ldr	r1, [sp, #20]
    3562:	0032      	movs	r2, r6
    3564:	003b      	movs	r3, r7
    3566:	f001 f89d 	bl	46a4 <__aeabi_dadd>
    356a:	9a08      	ldr	r2, [sp, #32]
    356c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    356e:	f001 f899 	bl	46a4 <__aeabi_dadd>
    3572:	0022      	movs	r2, r4
    3574:	002b      	movs	r3, r5
    3576:	f001 f895 	bl	46a4 <__aeabi_dadd>
    357a:	2000      	movs	r0, #0
    357c:	0022      	movs	r2, r4
    357e:	002b      	movs	r3, r5
    3580:	9002      	str	r0, [sp, #8]
    3582:	9103      	str	r1, [sp, #12]
    3584:	f002 fa58 	bl	5a38 <__aeabi_dsub>
    3588:	9a08      	ldr	r2, [sp, #32]
    358a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    358c:	f002 fa54 	bl	5a38 <__aeabi_dsub>
    3590:	9a04      	ldr	r2, [sp, #16]
    3592:	9b05      	ldr	r3, [sp, #20]
    3594:	f002 fa50 	bl	5a38 <__aeabi_dsub>
    3598:	0002      	movs	r2, r0
    359a:	000b      	movs	r3, r1
    359c:	0030      	movs	r0, r6
    359e:	0039      	movs	r1, r7
    35a0:	f002 fa4a 	bl	5a38 <__aeabi_dsub>
    35a4:	9004      	str	r0, [sp, #16]
    35a6:	9105      	str	r1, [sp, #20]
    35a8:	465b      	mov	r3, fp
    35aa:	4642      	mov	r2, r8
    35ac:	3b01      	subs	r3, #1
    35ae:	4313      	orrs	r3, r2
    35b0:	d100      	bne.n	35b4 <__ieee754_pow+0x514>
    35b2:	e197      	b.n	38e4 <__ieee754_pow+0x844>
    35b4:	2300      	movs	r3, #0
    35b6:	4c2b      	ldr	r4, [pc, #172]	; (3664 <__ieee754_pow+0x5c4>)
    35b8:	9306      	str	r3, [sp, #24]
    35ba:	9407      	str	r4, [sp, #28]
    35bc:	9800      	ldr	r0, [sp, #0]
    35be:	9901      	ldr	r1, [sp, #4]
    35c0:	2600      	movs	r6, #0
    35c2:	000b      	movs	r3, r1
    35c4:	0032      	movs	r2, r6
    35c6:	000f      	movs	r7, r1
    35c8:	f002 fa36 	bl	5a38 <__aeabi_dsub>
    35cc:	9a02      	ldr	r2, [sp, #8]
    35ce:	9b03      	ldr	r3, [sp, #12]
    35d0:	f001 ffb8 	bl	5544 <__aeabi_dmul>
    35d4:	9a00      	ldr	r2, [sp, #0]
    35d6:	9b01      	ldr	r3, [sp, #4]
    35d8:	0004      	movs	r4, r0
    35da:	000d      	movs	r5, r1
    35dc:	9804      	ldr	r0, [sp, #16]
    35de:	9905      	ldr	r1, [sp, #20]
    35e0:	f001 ffb0 	bl	5544 <__aeabi_dmul>
    35e4:	0002      	movs	r2, r0
    35e6:	000b      	movs	r3, r1
    35e8:	0020      	movs	r0, r4
    35ea:	0029      	movs	r1, r5
    35ec:	f001 f85a 	bl	46a4 <__aeabi_dadd>
    35f0:	0004      	movs	r4, r0
    35f2:	000d      	movs	r5, r1
    35f4:	9802      	ldr	r0, [sp, #8]
    35f6:	9903      	ldr	r1, [sp, #12]
    35f8:	003b      	movs	r3, r7
    35fa:	0032      	movs	r2, r6
    35fc:	9404      	str	r4, [sp, #16]
    35fe:	9505      	str	r5, [sp, #20]
    3600:	f001 ffa0 	bl	5544 <__aeabi_dmul>
    3604:	9000      	str	r0, [sp, #0]
    3606:	9101      	str	r1, [sp, #4]
    3608:	000b      	movs	r3, r1
    360a:	0002      	movs	r2, r0
    360c:	0029      	movs	r1, r5
    360e:	0020      	movs	r0, r4
    3610:	f001 f848 	bl	46a4 <__aeabi_dadd>
    3614:	4b28      	ldr	r3, [pc, #160]	; (36b8 <__ieee754_pow+0x618>)
    3616:	4681      	mov	r9, r0
    3618:	1e0f      	subs	r7, r1, #0
    361a:	468a      	mov	sl, r1
    361c:	429f      	cmp	r7, r3
    361e:	dc00      	bgt.n	3622 <__ieee754_pow+0x582>
    3620:	e13c      	b.n	389c <__ieee754_pow+0x7fc>
    3622:	4b26      	ldr	r3, [pc, #152]	; (36bc <__ieee754_pow+0x61c>)
    3624:	18cb      	adds	r3, r1, r3
    3626:	4303      	orrs	r3, r0
    3628:	d000      	beq.n	362c <__ieee754_pow+0x58c>
    362a:	e1db      	b.n	39e4 <__ieee754_pow+0x944>
    362c:	9804      	ldr	r0, [sp, #16]
    362e:	9905      	ldr	r1, [sp, #20]
    3630:	4a23      	ldr	r2, [pc, #140]	; (36c0 <__ieee754_pow+0x620>)
    3632:	4b24      	ldr	r3, [pc, #144]	; (36c4 <__ieee754_pow+0x624>)
    3634:	f001 f836 	bl	46a4 <__aeabi_dadd>
    3638:	9a00      	ldr	r2, [sp, #0]
    363a:	9b01      	ldr	r3, [sp, #4]
    363c:	0004      	movs	r4, r0
    363e:	000d      	movs	r5, r1
    3640:	4648      	mov	r0, r9
    3642:	0039      	movs	r1, r7
    3644:	f002 f9f8 	bl	5a38 <__aeabi_dsub>
    3648:	0002      	movs	r2, r0
    364a:	000b      	movs	r3, r1
    364c:	0020      	movs	r0, r4
    364e:	0029      	movs	r1, r5
    3650:	f000 fcae 	bl	3fb0 <__aeabi_dcmpgt>
    3654:	003e      	movs	r6, r7
    3656:	e037      	b.n	36c8 <__ieee754_pow+0x628>
    3658:	000fffff 	.word	0x000fffff
    365c:	43400000 	.word	0x43400000
    3660:	fffffc01 	.word	0xfffffc01
    3664:	3ff00000 	.word	0x3ff00000
    3668:	0003988e 	.word	0x0003988e
    366c:	000bb679 	.word	0x000bb679
    3670:	fff00000 	.word	0xfff00000
    3674:	4a454eef 	.word	0x4a454eef
    3678:	3fca7e28 	.word	0x3fca7e28
    367c:	93c9db65 	.word	0x93c9db65
    3680:	3fcd864a 	.word	0x3fcd864a
    3684:	a91d4101 	.word	0xa91d4101
    3688:	3fd17460 	.word	0x3fd17460
    368c:	518f264d 	.word	0x518f264d
    3690:	3fd55555 	.word	0x3fd55555
    3694:	db6fabff 	.word	0xdb6fabff
    3698:	3fdb6db6 	.word	0x3fdb6db6
    369c:	33333303 	.word	0x33333303
    36a0:	3fe33333 	.word	0x3fe33333
    36a4:	40080000 	.word	0x40080000
    36a8:	3feec709 	.word	0x3feec709
    36ac:	dc3a03fd 	.word	0xdc3a03fd
    36b0:	145b01f5 	.word	0x145b01f5
    36b4:	be3e2fe0 	.word	0xbe3e2fe0
    36b8:	408fffff 	.word	0x408fffff
    36bc:	bf700000 	.word	0xbf700000
    36c0:	652b82fe 	.word	0x652b82fe
    36c4:	3c971547 	.word	0x3c971547
    36c8:	2800      	cmp	r0, #0
    36ca:	d000      	beq.n	36ce <__ieee754_pow+0x62e>
    36cc:	e18a      	b.n	39e4 <__ieee754_pow+0x944>
    36ce:	2280      	movs	r2, #128	; 0x80
    36d0:	4be7      	ldr	r3, [pc, #924]	; (3a70 <__ieee754_pow+0x9d0>)
    36d2:	0352      	lsls	r2, r2, #13
    36d4:	469c      	mov	ip, r3
    36d6:	0013      	movs	r3, r2
    36d8:	1536      	asrs	r6, r6, #20
    36da:	4466      	add	r6, ip
    36dc:	4133      	asrs	r3, r6
    36de:	49e5      	ldr	r1, [pc, #916]	; (3a74 <__ieee754_pow+0x9d4>)
    36e0:	19db      	adds	r3, r3, r7
    36e2:	005e      	lsls	r6, r3, #1
    36e4:	001c      	movs	r4, r3
    36e6:	031b      	lsls	r3, r3, #12
    36e8:	468c      	mov	ip, r1
    36ea:	0b1b      	lsrs	r3, r3, #12
    36ec:	4313      	orrs	r3, r2
    36ee:	2214      	movs	r2, #20
    36f0:	0d76      	lsrs	r6, r6, #21
    36f2:	4fe1      	ldr	r7, [pc, #900]	; (3a78 <__ieee754_pow+0x9d8>)
    36f4:	4466      	add	r6, ip
    36f6:	4137      	asrs	r7, r6
    36f8:	1b96      	subs	r6, r2, r6
    36fa:	4133      	asrs	r3, r6
    36fc:	4698      	mov	r8, r3
    36fe:	4653      	mov	r3, sl
    3700:	43bc      	bics	r4, r7
    3702:	2000      	movs	r0, #0
    3704:	0021      	movs	r1, r4
    3706:	2b00      	cmp	r3, #0
    3708:	da00      	bge.n	370c <__ieee754_pow+0x66c>
    370a:	e1a9      	b.n	3a60 <__ieee754_pow+0x9c0>
    370c:	0002      	movs	r2, r0
    370e:	000b      	movs	r3, r1
    3710:	9800      	ldr	r0, [sp, #0]
    3712:	9901      	ldr	r1, [sp, #4]
    3714:	f002 f990 	bl	5a38 <__aeabi_dsub>
    3718:	000b      	movs	r3, r1
    371a:	9000      	str	r0, [sp, #0]
    371c:	9101      	str	r1, [sp, #4]
    371e:	0002      	movs	r2, r0
    3720:	9804      	ldr	r0, [sp, #16]
    3722:	9905      	ldr	r1, [sp, #20]
    3724:	f000 ffbe 	bl	46a4 <__aeabi_dadd>
    3728:	4643      	mov	r3, r8
    372a:	051b      	lsls	r3, r3, #20
    372c:	4699      	mov	r9, r3
    372e:	2000      	movs	r0, #0
    3730:	2200      	movs	r2, #0
    3732:	4bd2      	ldr	r3, [pc, #840]	; (3a7c <__ieee754_pow+0x9dc>)
    3734:	0006      	movs	r6, r0
    3736:	000f      	movs	r7, r1
    3738:	f001 ff04 	bl	5544 <__aeabi_dmul>
    373c:	9a00      	ldr	r2, [sp, #0]
    373e:	9b01      	ldr	r3, [sp, #4]
    3740:	9002      	str	r0, [sp, #8]
    3742:	9103      	str	r1, [sp, #12]
    3744:	0030      	movs	r0, r6
    3746:	0039      	movs	r1, r7
    3748:	f002 f976 	bl	5a38 <__aeabi_dsub>
    374c:	0002      	movs	r2, r0
    374e:	000b      	movs	r3, r1
    3750:	9804      	ldr	r0, [sp, #16]
    3752:	9905      	ldr	r1, [sp, #20]
    3754:	f002 f970 	bl	5a38 <__aeabi_dsub>
    3758:	4ac9      	ldr	r2, [pc, #804]	; (3a80 <__ieee754_pow+0x9e0>)
    375a:	4bca      	ldr	r3, [pc, #808]	; (3a84 <__ieee754_pow+0x9e4>)
    375c:	f001 fef2 	bl	5544 <__aeabi_dmul>
    3760:	4ac9      	ldr	r2, [pc, #804]	; (3a88 <__ieee754_pow+0x9e8>)
    3762:	0004      	movs	r4, r0
    3764:	000d      	movs	r5, r1
    3766:	4bc9      	ldr	r3, [pc, #804]	; (3a8c <__ieee754_pow+0x9ec>)
    3768:	0030      	movs	r0, r6
    376a:	0039      	movs	r1, r7
    376c:	f001 feea 	bl	5544 <__aeabi_dmul>
    3770:	0002      	movs	r2, r0
    3772:	000b      	movs	r3, r1
    3774:	0020      	movs	r0, r4
    3776:	0029      	movs	r1, r5
    3778:	f000 ff94 	bl	46a4 <__aeabi_dadd>
    377c:	0004      	movs	r4, r0
    377e:	000d      	movs	r5, r1
    3780:	0002      	movs	r2, r0
    3782:	000b      	movs	r3, r1
    3784:	9802      	ldr	r0, [sp, #8]
    3786:	9903      	ldr	r1, [sp, #12]
    3788:	f000 ff8c 	bl	46a4 <__aeabi_dadd>
    378c:	9a02      	ldr	r2, [sp, #8]
    378e:	9b03      	ldr	r3, [sp, #12]
    3790:	0006      	movs	r6, r0
    3792:	000f      	movs	r7, r1
    3794:	f002 f950 	bl	5a38 <__aeabi_dsub>
    3798:	0002      	movs	r2, r0
    379a:	000b      	movs	r3, r1
    379c:	0020      	movs	r0, r4
    379e:	0029      	movs	r1, r5
    37a0:	f002 f94a 	bl	5a38 <__aeabi_dsub>
    37a4:	0032      	movs	r2, r6
    37a6:	9000      	str	r0, [sp, #0]
    37a8:	9101      	str	r1, [sp, #4]
    37aa:	003b      	movs	r3, r7
    37ac:	0030      	movs	r0, r6
    37ae:	0039      	movs	r1, r7
    37b0:	f001 fec8 	bl	5544 <__aeabi_dmul>
    37b4:	0004      	movs	r4, r0
    37b6:	000d      	movs	r5, r1
    37b8:	4ab5      	ldr	r2, [pc, #724]	; (3a90 <__ieee754_pow+0x9f0>)
    37ba:	4bb6      	ldr	r3, [pc, #728]	; (3a94 <__ieee754_pow+0x9f4>)
    37bc:	f001 fec2 	bl	5544 <__aeabi_dmul>
    37c0:	4ab5      	ldr	r2, [pc, #724]	; (3a98 <__ieee754_pow+0x9f8>)
    37c2:	4bb6      	ldr	r3, [pc, #728]	; (3a9c <__ieee754_pow+0x9fc>)
    37c4:	f002 f938 	bl	5a38 <__aeabi_dsub>
    37c8:	0022      	movs	r2, r4
    37ca:	002b      	movs	r3, r5
    37cc:	f001 feba 	bl	5544 <__aeabi_dmul>
    37d0:	4ab3      	ldr	r2, [pc, #716]	; (3aa0 <__ieee754_pow+0xa00>)
    37d2:	4bb4      	ldr	r3, [pc, #720]	; (3aa4 <__ieee754_pow+0xa04>)
    37d4:	f000 ff66 	bl	46a4 <__aeabi_dadd>
    37d8:	0022      	movs	r2, r4
    37da:	002b      	movs	r3, r5
    37dc:	f001 feb2 	bl	5544 <__aeabi_dmul>
    37e0:	4ab1      	ldr	r2, [pc, #708]	; (3aa8 <__ieee754_pow+0xa08>)
    37e2:	4bb2      	ldr	r3, [pc, #712]	; (3aac <__ieee754_pow+0xa0c>)
    37e4:	f002 f928 	bl	5a38 <__aeabi_dsub>
    37e8:	0022      	movs	r2, r4
    37ea:	002b      	movs	r3, r5
    37ec:	f001 feaa 	bl	5544 <__aeabi_dmul>
    37f0:	4aaf      	ldr	r2, [pc, #700]	; (3ab0 <__ieee754_pow+0xa10>)
    37f2:	4bb0      	ldr	r3, [pc, #704]	; (3ab4 <__ieee754_pow+0xa14>)
    37f4:	f000 ff56 	bl	46a4 <__aeabi_dadd>
    37f8:	0022      	movs	r2, r4
    37fa:	002b      	movs	r3, r5
    37fc:	f001 fea2 	bl	5544 <__aeabi_dmul>
    3800:	0002      	movs	r2, r0
    3802:	000b      	movs	r3, r1
    3804:	0030      	movs	r0, r6
    3806:	0039      	movs	r1, r7
    3808:	f002 f916 	bl	5a38 <__aeabi_dsub>
    380c:	0004      	movs	r4, r0
    380e:	000d      	movs	r5, r1
    3810:	0002      	movs	r2, r0
    3812:	000b      	movs	r3, r1
    3814:	0030      	movs	r0, r6
    3816:	0039      	movs	r1, r7
    3818:	f001 fe94 	bl	5544 <__aeabi_dmul>
    381c:	2380      	movs	r3, #128	; 0x80
    381e:	9002      	str	r0, [sp, #8]
    3820:	9103      	str	r1, [sp, #12]
    3822:	2200      	movs	r2, #0
    3824:	05db      	lsls	r3, r3, #23
    3826:	0020      	movs	r0, r4
    3828:	0029      	movs	r1, r5
    382a:	f002 f905 	bl	5a38 <__aeabi_dsub>
    382e:	0002      	movs	r2, r0
    3830:	000b      	movs	r3, r1
    3832:	9802      	ldr	r0, [sp, #8]
    3834:	9903      	ldr	r1, [sp, #12]
    3836:	f001 fa61 	bl	4cfc <__aeabi_ddiv>
    383a:	9a00      	ldr	r2, [sp, #0]
    383c:	9b01      	ldr	r3, [sp, #4]
    383e:	0004      	movs	r4, r0
    3840:	000d      	movs	r5, r1
    3842:	0030      	movs	r0, r6
    3844:	0039      	movs	r1, r7
    3846:	f001 fe7d 	bl	5544 <__aeabi_dmul>
    384a:	9a00      	ldr	r2, [sp, #0]
    384c:	9b01      	ldr	r3, [sp, #4]
    384e:	f000 ff29 	bl	46a4 <__aeabi_dadd>
    3852:	0002      	movs	r2, r0
    3854:	000b      	movs	r3, r1
    3856:	0020      	movs	r0, r4
    3858:	0029      	movs	r1, r5
    385a:	f002 f8ed 	bl	5a38 <__aeabi_dsub>
    385e:	0032      	movs	r2, r6
    3860:	003b      	movs	r3, r7
    3862:	f002 f8e9 	bl	5a38 <__aeabi_dsub>
    3866:	0002      	movs	r2, r0
    3868:	000b      	movs	r3, r1
    386a:	2000      	movs	r0, #0
    386c:	4992      	ldr	r1, [pc, #584]	; (3ab8 <__ieee754_pow+0xa18>)
    386e:	f002 f8e3 	bl	5a38 <__aeabi_dsub>
    3872:	464b      	mov	r3, r9
    3874:	185b      	adds	r3, r3, r1
    3876:	151a      	asrs	r2, r3, #20
    3878:	2a00      	cmp	r2, #0
    387a:	dc00      	bgt.n	387e <__ieee754_pow+0x7de>
    387c:	e0f4      	b.n	3a68 <__ieee754_pow+0x9c8>
    387e:	0019      	movs	r1, r3
    3880:	9a06      	ldr	r2, [sp, #24]
    3882:	9b07      	ldr	r3, [sp, #28]
    3884:	f001 fe5e 	bl	5544 <__aeabi_dmul>
    3888:	0006      	movs	r6, r0
    388a:	e452      	b.n	3132 <__ieee754_pow+0x92>
    388c:	0032      	movs	r2, r6
    388e:	0030      	movs	r0, r6
    3890:	002b      	movs	r3, r5
    3892:	0029      	movs	r1, r5
    3894:	f001 fe56 	bl	5544 <__aeabi_dmul>
    3898:	0006      	movs	r6, r0
    389a:	e44a      	b.n	3132 <__ieee754_pow+0x92>
    389c:	4b87      	ldr	r3, [pc, #540]	; (3abc <__ieee754_pow+0xa1c>)
    389e:	004e      	lsls	r6, r1, #1
    38a0:	0876      	lsrs	r6, r6, #1
    38a2:	429e      	cmp	r6, r3
    38a4:	dc00      	bgt.n	38a8 <__ieee754_pow+0x808>
    38a6:	e0bf      	b.n	3a28 <__ieee754_pow+0x988>
    38a8:	4b85      	ldr	r3, [pc, #532]	; (3ac0 <__ieee754_pow+0xa20>)
    38aa:	18cb      	adds	r3, r1, r3
    38ac:	4303      	orrs	r3, r0
    38ae:	d10c      	bne.n	38ca <__ieee754_pow+0x82a>
    38b0:	9a00      	ldr	r2, [sp, #0]
    38b2:	9b01      	ldr	r3, [sp, #4]
    38b4:	f002 f8c0 	bl	5a38 <__aeabi_dsub>
    38b8:	0002      	movs	r2, r0
    38ba:	000b      	movs	r3, r1
    38bc:	9804      	ldr	r0, [sp, #16]
    38be:	9905      	ldr	r1, [sp, #20]
    38c0:	f000 fb6c 	bl	3f9c <__aeabi_dcmple>
    38c4:	2800      	cmp	r0, #0
    38c6:	d100      	bne.n	38ca <__ieee754_pow+0x82a>
    38c8:	e701      	b.n	36ce <__ieee754_pow+0x62e>
    38ca:	9806      	ldr	r0, [sp, #24]
    38cc:	9907      	ldr	r1, [sp, #28]
    38ce:	4a7d      	ldr	r2, [pc, #500]	; (3ac4 <__ieee754_pow+0xa24>)
    38d0:	4b7d      	ldr	r3, [pc, #500]	; (3ac8 <__ieee754_pow+0xa28>)
    38d2:	f001 fe37 	bl	5544 <__aeabi_dmul>
    38d6:	4a7b      	ldr	r2, [pc, #492]	; (3ac4 <__ieee754_pow+0xa24>)
    38d8:	4b7b      	ldr	r3, [pc, #492]	; (3ac8 <__ieee754_pow+0xa28>)
    38da:	f001 fe33 	bl	5544 <__aeabi_dmul>
    38de:	0006      	movs	r6, r0
    38e0:	f7ff fc27 	bl	3132 <__ieee754_pow+0x92>
    38e4:	2300      	movs	r3, #0
    38e6:	4c79      	ldr	r4, [pc, #484]	; (3acc <__ieee754_pow+0xa2c>)
    38e8:	9306      	str	r3, [sp, #24]
    38ea:	9407      	str	r4, [sp, #28]
    38ec:	e666      	b.n	35bc <__ieee754_pow+0x51c>
    38ee:	4653      	mov	r3, sl
    38f0:	2b00      	cmp	r3, #0
    38f2:	db00      	blt.n	38f6 <__ieee754_pow+0x856>
    38f4:	e4c3      	b.n	327e <__ieee754_pow+0x1de>
    38f6:	9b00      	ldr	r3, [sp, #0]
    38f8:	9c01      	ldr	r4, [sp, #4]
    38fa:	2280      	movs	r2, #128	; 0x80
    38fc:	0612      	lsls	r2, r2, #24
    38fe:	001e      	movs	r6, r3
    3900:	4694      	mov	ip, r2
    3902:	0023      	movs	r3, r4
    3904:	4463      	add	r3, ip
    3906:	0019      	movs	r1, r3
    3908:	f7ff fc13 	bl	3132 <__ieee754_pow+0x92>
    390c:	0002      	movs	r2, r0
    390e:	000b      	movs	r3, r1
    3910:	2000      	movs	r0, #0
    3912:	4969      	ldr	r1, [pc, #420]	; (3ab8 <__ieee754_pow+0xa18>)
    3914:	f001 f9f2 	bl	4cfc <__aeabi_ddiv>
    3918:	e44a      	b.n	31b0 <__ieee754_pow+0x110>
    391a:	4b6d      	ldr	r3, [pc, #436]	; (3ad0 <__ieee754_pow+0xa30>)
    391c:	429c      	cmp	r4, r3
    391e:	dc00      	bgt.n	3922 <__ieee754_pow+0x882>
    3920:	e4aa      	b.n	3278 <__ieee754_pow+0x1d8>
    3922:	4b65      	ldr	r3, [pc, #404]	; (3ab8 <__ieee754_pow+0xa18>)
    3924:	429c      	cmp	r4, r3
    3926:	dd01      	ble.n	392c <__ieee754_pow+0x88c>
    3928:	f7ff fc2c 	bl	3184 <__ieee754_pow+0xe4>
    392c:	2200      	movs	r2, #0
    392e:	4b62      	ldr	r3, [pc, #392]	; (3ab8 <__ieee754_pow+0xa18>)
    3930:	f002 f882 	bl	5a38 <__aeabi_dsub>
    3934:	22c0      	movs	r2, #192	; 0xc0
    3936:	4b67      	ldr	r3, [pc, #412]	; (3ad4 <__ieee754_pow+0xa34>)
    3938:	05d2      	lsls	r2, r2, #23
    393a:	0004      	movs	r4, r0
    393c:	000d      	movs	r5, r1
    393e:	f001 fe01 	bl	5544 <__aeabi_dmul>
    3942:	4a65      	ldr	r2, [pc, #404]	; (3ad8 <__ieee754_pow+0xa38>)
    3944:	0006      	movs	r6, r0
    3946:	000f      	movs	r7, r1
    3948:	4b64      	ldr	r3, [pc, #400]	; (3adc <__ieee754_pow+0xa3c>)
    394a:	0020      	movs	r0, r4
    394c:	0029      	movs	r1, r5
    394e:	f001 fdf9 	bl	5544 <__aeabi_dmul>
    3952:	2200      	movs	r2, #0
    3954:	9002      	str	r0, [sp, #8]
    3956:	9103      	str	r1, [sp, #12]
    3958:	4b61      	ldr	r3, [pc, #388]	; (3ae0 <__ieee754_pow+0xa40>)
    395a:	0020      	movs	r0, r4
    395c:	0029      	movs	r1, r5
    395e:	f001 fdf1 	bl	5544 <__aeabi_dmul>
    3962:	0002      	movs	r2, r0
    3964:	000b      	movs	r3, r1
    3966:	485f      	ldr	r0, [pc, #380]	; (3ae4 <__ieee754_pow+0xa44>)
    3968:	495f      	ldr	r1, [pc, #380]	; (3ae8 <__ieee754_pow+0xa48>)
    396a:	f002 f865 	bl	5a38 <__aeabi_dsub>
    396e:	0022      	movs	r2, r4
    3970:	002b      	movs	r3, r5
    3972:	f001 fde7 	bl	5544 <__aeabi_dmul>
    3976:	0002      	movs	r2, r0
    3978:	000b      	movs	r3, r1
    397a:	2000      	movs	r0, #0
    397c:	495b      	ldr	r1, [pc, #364]	; (3aec <__ieee754_pow+0xa4c>)
    397e:	f002 f85b 	bl	5a38 <__aeabi_dsub>
    3982:	0022      	movs	r2, r4
    3984:	9004      	str	r0, [sp, #16]
    3986:	9105      	str	r1, [sp, #20]
    3988:	002b      	movs	r3, r5
    398a:	0020      	movs	r0, r4
    398c:	0029      	movs	r1, r5
    398e:	f001 fdd9 	bl	5544 <__aeabi_dmul>
    3992:	0002      	movs	r2, r0
    3994:	000b      	movs	r3, r1
    3996:	9804      	ldr	r0, [sp, #16]
    3998:	9905      	ldr	r1, [sp, #20]
    399a:	f001 fdd3 	bl	5544 <__aeabi_dmul>
    399e:	4a54      	ldr	r2, [pc, #336]	; (3af0 <__ieee754_pow+0xa50>)
    39a0:	4b4c      	ldr	r3, [pc, #304]	; (3ad4 <__ieee754_pow+0xa34>)
    39a2:	f001 fdcf 	bl	5544 <__aeabi_dmul>
    39a6:	0002      	movs	r2, r0
    39a8:	000b      	movs	r3, r1
    39aa:	9802      	ldr	r0, [sp, #8]
    39ac:	9903      	ldr	r1, [sp, #12]
    39ae:	f002 f843 	bl	5a38 <__aeabi_dsub>
    39b2:	0002      	movs	r2, r0
    39b4:	000b      	movs	r3, r1
    39b6:	0004      	movs	r4, r0
    39b8:	000d      	movs	r5, r1
    39ba:	0030      	movs	r0, r6
    39bc:	0039      	movs	r1, r7
    39be:	f000 fe71 	bl	46a4 <__aeabi_dadd>
    39c2:	2200      	movs	r2, #0
    39c4:	0010      	movs	r0, r2
    39c6:	003b      	movs	r3, r7
    39c8:	0032      	movs	r2, r6
    39ca:	9002      	str	r0, [sp, #8]
    39cc:	9103      	str	r1, [sp, #12]
    39ce:	f002 f833 	bl	5a38 <__aeabi_dsub>
    39d2:	0002      	movs	r2, r0
    39d4:	000b      	movs	r3, r1
    39d6:	0020      	movs	r0, r4
    39d8:	0029      	movs	r1, r5
    39da:	f002 f82d 	bl	5a38 <__aeabi_dsub>
    39de:	9004      	str	r0, [sp, #16]
    39e0:	9105      	str	r1, [sp, #20]
    39e2:	e5e1      	b.n	35a8 <__ieee754_pow+0x508>
    39e4:	4a43      	ldr	r2, [pc, #268]	; (3af4 <__ieee754_pow+0xa54>)
    39e6:	4b44      	ldr	r3, [pc, #272]	; (3af8 <__ieee754_pow+0xa58>)
    39e8:	9806      	ldr	r0, [sp, #24]
    39ea:	9907      	ldr	r1, [sp, #28]
    39ec:	f001 fdaa 	bl	5544 <__aeabi_dmul>
    39f0:	4a40      	ldr	r2, [pc, #256]	; (3af4 <__ieee754_pow+0xa54>)
    39f2:	4b41      	ldr	r3, [pc, #260]	; (3af8 <__ieee754_pow+0xa58>)
    39f4:	f001 fda6 	bl	5544 <__aeabi_dmul>
    39f8:	0006      	movs	r6, r0
    39fa:	f7ff fb9a 	bl	3132 <__ieee754_pow+0x92>
    39fe:	2a00      	cmp	r2, #0
    3a00:	d001      	beq.n	3a06 <__ieee754_pow+0x966>
    3a02:	f7ff fba5 	bl	3150 <__ieee754_pow+0xb0>
    3a06:	3214      	adds	r2, #20
    3a08:	1ad3      	subs	r3, r2, r3
    3a0a:	003a      	movs	r2, r7
    3a0c:	411a      	asrs	r2, r3
    3a0e:	0011      	movs	r1, r2
    3a10:	4099      	lsls	r1, r3
    3a12:	428f      	cmp	r7, r1
    3a14:	d001      	beq.n	3a1a <__ieee754_pow+0x97a>
    3a16:	f7ff fb6f 	bl	30f8 <__ieee754_pow+0x58>
    3a1a:	2301      	movs	r3, #1
    3a1c:	4013      	ands	r3, r2
    3a1e:	2202      	movs	r2, #2
    3a20:	1ad3      	subs	r3, r2, r3
    3a22:	469b      	mov	fp, r3
    3a24:	f7ff fb68 	bl	30f8 <__ieee754_pow+0x58>
    3a28:	4b30      	ldr	r3, [pc, #192]	; (3aec <__ieee754_pow+0xa4c>)
    3a2a:	429e      	cmp	r6, r3
    3a2c:	dd00      	ble.n	3a30 <__ieee754_pow+0x990>
    3a2e:	e64e      	b.n	36ce <__ieee754_pow+0x62e>
    3a30:	2300      	movs	r3, #0
    3a32:	4699      	mov	r9, r3
    3a34:	4698      	mov	r8, r3
    3a36:	e67a      	b.n	372e <__ieee754_pow+0x68e>
    3a38:	0002      	movs	r2, r0
    3a3a:	000b      	movs	r3, r1
    3a3c:	f7ff fc14 	bl	3268 <__ieee754_pow+0x1c8>
    3a40:	2380      	movs	r3, #128	; 0x80
    3a42:	4c2e      	ldr	r4, [pc, #184]	; (3afc <__ieee754_pow+0xa5c>)
    3a44:	05db      	lsls	r3, r3, #23
    3a46:	9308      	str	r3, [sp, #32]
    3a48:	9409      	str	r4, [sp, #36]	; 0x24
    3a4a:	4b2d      	ldr	r3, [pc, #180]	; (3b00 <__ieee754_pow+0xa60>)
    3a4c:	4c2d      	ldr	r4, [pc, #180]	; (3b04 <__ieee754_pow+0xa64>)
    3a4e:	2200      	movs	r2, #0
    3a50:	930c      	str	r3, [sp, #48]	; 0x30
    3a52:	940d      	str	r4, [sp, #52]	; 0x34
    3a54:	2480      	movs	r4, #128	; 0x80
    3a56:	4b2c      	ldr	r3, [pc, #176]	; (3b08 <__ieee754_pow+0xa68>)
    3a58:	02e4      	lsls	r4, r4, #11
    3a5a:	9206      	str	r2, [sp, #24]
    3a5c:	9307      	str	r3, [sp, #28]
    3a5e:	e456      	b.n	330e <__ieee754_pow+0x26e>
    3a60:	4643      	mov	r3, r8
    3a62:	425b      	negs	r3, r3
    3a64:	4698      	mov	r8, r3
    3a66:	e651      	b.n	370c <__ieee754_pow+0x66c>
    3a68:	4642      	mov	r2, r8
    3a6a:	f000 f9fd 	bl	3e68 <scalbn>
    3a6e:	e707      	b.n	3880 <__ieee754_pow+0x7e0>
    3a70:	fffffc02 	.word	0xfffffc02
    3a74:	fffffc01 	.word	0xfffffc01
    3a78:	000fffff 	.word	0x000fffff
    3a7c:	3fe62e43 	.word	0x3fe62e43
    3a80:	fefa39ef 	.word	0xfefa39ef
    3a84:	3fe62e42 	.word	0x3fe62e42
    3a88:	0ca86c39 	.word	0x0ca86c39
    3a8c:	be205c61 	.word	0xbe205c61
    3a90:	72bea4d0 	.word	0x72bea4d0
    3a94:	3e663769 	.word	0x3e663769
    3a98:	c5d26bf1 	.word	0xc5d26bf1
    3a9c:	3ebbbd41 	.word	0x3ebbbd41
    3aa0:	af25de2c 	.word	0xaf25de2c
    3aa4:	3f11566a 	.word	0x3f11566a
    3aa8:	16bebd93 	.word	0x16bebd93
    3aac:	3f66c16c 	.word	0x3f66c16c
    3ab0:	5555553e 	.word	0x5555553e
    3ab4:	3fc55555 	.word	0x3fc55555
    3ab8:	3ff00000 	.word	0x3ff00000
    3abc:	4090cbff 	.word	0x4090cbff
    3ac0:	3f6f3400 	.word	0x3f6f3400
    3ac4:	c2f8f359 	.word	0xc2f8f359
    3ac8:	01a56e1f 	.word	0x01a56e1f
    3acc:	bff00000 	.word	0xbff00000
    3ad0:	3feffffe 	.word	0x3feffffe
    3ad4:	3ff71547 	.word	0x3ff71547
    3ad8:	f85ddf44 	.word	0xf85ddf44
    3adc:	3e54ae0b 	.word	0x3e54ae0b
    3ae0:	3fd00000 	.word	0x3fd00000
    3ae4:	55555555 	.word	0x55555555
    3ae8:	3fd55555 	.word	0x3fd55555
    3aec:	3fe00000 	.word	0x3fe00000
    3af0:	652b82fe 	.word	0x652b82fe
    3af4:	8800759c 	.word	0x8800759c
    3af8:	7e37e43c 	.word	0x7e37e43c
    3afc:	3fe2b803 	.word	0x3fe2b803
    3b00:	43cfd006 	.word	0x43cfd006
    3b04:	3e4cfdeb 	.word	0x3e4cfdeb
    3b08:	3ff80000 	.word	0x3ff80000

00003b0c <__ieee754_sqrt>:
    3b0c:	b5f0      	push	{r4, r5, r6, r7, lr}
    3b0e:	4656      	mov	r6, sl
    3b10:	464d      	mov	r5, r9
    3b12:	4644      	mov	r4, r8
    3b14:	465f      	mov	r7, fp
    3b16:	4b75      	ldr	r3, [pc, #468]	; (3cec <__ieee754_sqrt+0x1e0>)
    3b18:	b4f0      	push	{r4, r5, r6, r7}
    3b1a:	000a      	movs	r2, r1
    3b1c:	000d      	movs	r5, r1
    3b1e:	0019      	movs	r1, r3
    3b20:	b083      	sub	sp, #12
    3b22:	0006      	movs	r6, r0
    3b24:	0004      	movs	r4, r0
    3b26:	4029      	ands	r1, r5
    3b28:	4299      	cmp	r1, r3
    3b2a:	d100      	bne.n	3b2e <__ieee754_sqrt+0x22>
    3b2c:	e0ba      	b.n	3ca4 <__ieee754_sqrt+0x198>
    3b2e:	2d00      	cmp	r5, #0
    3b30:	dc00      	bgt.n	3b34 <__ieee754_sqrt+0x28>
    3b32:	e094      	b.n	3c5e <__ieee754_sqrt+0x152>
    3b34:	152d      	asrs	r5, r5, #20
    3b36:	d100      	bne.n	3b3a <__ieee754_sqrt+0x2e>
    3b38:	e0a3      	b.n	3c82 <__ieee754_sqrt+0x176>
    3b3a:	4b6d      	ldr	r3, [pc, #436]	; (3cf0 <__ieee754_sqrt+0x1e4>)
    3b3c:	0312      	lsls	r2, r2, #12
    3b3e:	469c      	mov	ip, r3
    3b40:	2380      	movs	r3, #128	; 0x80
    3b42:	0b12      	lsrs	r2, r2, #12
    3b44:	035b      	lsls	r3, r3, #13
    3b46:	4465      	add	r5, ip
    3b48:	431a      	orrs	r2, r3
    3b4a:	07eb      	lsls	r3, r5, #31
    3b4c:	d500      	bpl.n	3b50 <__ieee754_sqrt+0x44>
    3b4e:	e081      	b.n	3c54 <__ieee754_sqrt+0x148>
    3b50:	106b      	asrs	r3, r5, #1
    3b52:	4698      	mov	r8, r3
    3b54:	0fe3      	lsrs	r3, r4, #31
    3b56:	189b      	adds	r3, r3, r2
    3b58:	189b      	adds	r3, r3, r2
    3b5a:	2280      	movs	r2, #128	; 0x80
    3b5c:	2116      	movs	r1, #22
    3b5e:	2600      	movs	r6, #0
    3b60:	2700      	movs	r7, #0
    3b62:	0064      	lsls	r4, r4, #1
    3b64:	0392      	lsls	r2, r2, #14
    3b66:	18b8      	adds	r0, r7, r2
    3b68:	4298      	cmp	r0, r3
    3b6a:	dc02      	bgt.n	3b72 <__ieee754_sqrt+0x66>
    3b6c:	1887      	adds	r7, r0, r2
    3b6e:	1a1b      	subs	r3, r3, r0
    3b70:	18b6      	adds	r6, r6, r2
    3b72:	0fe0      	lsrs	r0, r4, #31
    3b74:	005b      	lsls	r3, r3, #1
    3b76:	3901      	subs	r1, #1
    3b78:	181b      	adds	r3, r3, r0
    3b7a:	0064      	lsls	r4, r4, #1
    3b7c:	0852      	lsrs	r2, r2, #1
    3b7e:	2900      	cmp	r1, #0
    3b80:	d1f1      	bne.n	3b66 <__ieee754_sqrt+0x5a>
    3b82:	2200      	movs	r2, #0
    3b84:	9201      	str	r2, [sp, #4]
    3b86:	4694      	mov	ip, r2
    3b88:	2280      	movs	r2, #128	; 0x80
    3b8a:	0612      	lsls	r2, r2, #24
    3b8c:	2020      	movs	r0, #32
    3b8e:	4691      	mov	r9, r2
    3b90:	e009      	b.n	3ba6 <__ieee754_sqrt+0x9a>
    3b92:	429f      	cmp	r7, r3
    3b94:	d041      	beq.n	3c1a <__ieee754_sqrt+0x10e>
    3b96:	0fe1      	lsrs	r1, r4, #31
    3b98:	18c9      	adds	r1, r1, r3
    3b9a:	3801      	subs	r0, #1
    3b9c:	18cb      	adds	r3, r1, r3
    3b9e:	0064      	lsls	r4, r4, #1
    3ba0:	0852      	lsrs	r2, r2, #1
    3ba2:	2800      	cmp	r0, #0
    3ba4:	d01e      	beq.n	3be4 <__ieee754_sqrt+0xd8>
    3ba6:	4661      	mov	r1, ip
    3ba8:	1851      	adds	r1, r2, r1
    3baa:	429f      	cmp	r7, r3
    3bac:	daf1      	bge.n	3b92 <__ieee754_sqrt+0x86>
    3bae:	188d      	adds	r5, r1, r2
    3bb0:	46ac      	mov	ip, r5
    3bb2:	0fcd      	lsrs	r5, r1, #31
    3bb4:	07ed      	lsls	r5, r5, #31
    3bb6:	46ba      	mov	sl, r7
    3bb8:	454d      	cmp	r5, r9
    3bba:	d039      	beq.n	3c30 <__ieee754_sqrt+0x124>
    3bbc:	1bdb      	subs	r3, r3, r7
    3bbe:	428c      	cmp	r4, r1
    3bc0:	41bf      	sbcs	r7, r7
    3bc2:	427f      	negs	r7, r7
    3bc4:	1bdb      	subs	r3, r3, r7
    3bc6:	1a64      	subs	r4, r4, r1
    3bc8:	9901      	ldr	r1, [sp, #4]
    3bca:	3801      	subs	r0, #1
    3bcc:	468b      	mov	fp, r1
    3bce:	4493      	add	fp, r2
    3bd0:	4659      	mov	r1, fp
    3bd2:	9101      	str	r1, [sp, #4]
    3bd4:	0fe1      	lsrs	r1, r4, #31
    3bd6:	18c9      	adds	r1, r1, r3
    3bd8:	4657      	mov	r7, sl
    3bda:	18cb      	adds	r3, r1, r3
    3bdc:	0064      	lsls	r4, r4, #1
    3bde:	0852      	lsrs	r2, r2, #1
    3be0:	2800      	cmp	r0, #0
    3be2:	d1e0      	bne.n	3ba6 <__ieee754_sqrt+0x9a>
    3be4:	4323      	orrs	r3, r4
    3be6:	d12b      	bne.n	3c40 <__ieee754_sqrt+0x134>
    3be8:	9b01      	ldr	r3, [sp, #4]
    3bea:	085b      	lsrs	r3, r3, #1
    3bec:	4941      	ldr	r1, [pc, #260]	; (3cf4 <__ieee754_sqrt+0x1e8>)
    3bee:	1072      	asrs	r2, r6, #1
    3bf0:	468c      	mov	ip, r1
    3bf2:	4462      	add	r2, ip
    3bf4:	07f1      	lsls	r1, r6, #31
    3bf6:	d502      	bpl.n	3bfe <__ieee754_sqrt+0xf2>
    3bf8:	2180      	movs	r1, #128	; 0x80
    3bfa:	0609      	lsls	r1, r1, #24
    3bfc:	430b      	orrs	r3, r1
    3bfe:	4641      	mov	r1, r8
    3c00:	0509      	lsls	r1, r1, #20
    3c02:	188d      	adds	r5, r1, r2
    3c04:	001e      	movs	r6, r3
    3c06:	002f      	movs	r7, r5
    3c08:	0030      	movs	r0, r6
    3c0a:	0039      	movs	r1, r7
    3c0c:	b003      	add	sp, #12
    3c0e:	bc3c      	pop	{r2, r3, r4, r5}
    3c10:	4690      	mov	r8, r2
    3c12:	4699      	mov	r9, r3
    3c14:	46a2      	mov	sl, r4
    3c16:	46ab      	mov	fp, r5
    3c18:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3c1a:	42a1      	cmp	r1, r4
    3c1c:	d80e      	bhi.n	3c3c <__ieee754_sqrt+0x130>
    3c1e:	188d      	adds	r5, r1, r2
    3c20:	46ac      	mov	ip, r5
    3c22:	0fcd      	lsrs	r5, r1, #31
    3c24:	07ed      	lsls	r5, r5, #31
    3c26:	454d      	cmp	r5, r9
    3c28:	d048      	beq.n	3cbc <__ieee754_sqrt+0x1b0>
    3c2a:	469a      	mov	sl, r3
    3c2c:	2300      	movs	r3, #0
    3c2e:	e7ca      	b.n	3bc6 <__ieee754_sqrt+0xba>
    3c30:	4665      	mov	r5, ip
    3c32:	2d00      	cmp	r5, #0
    3c34:	dbc2      	blt.n	3bbc <__ieee754_sqrt+0xb0>
    3c36:	1c7d      	adds	r5, r7, #1
    3c38:	46aa      	mov	sl, r5
    3c3a:	e7bf      	b.n	3bbc <__ieee754_sqrt+0xb0>
    3c3c:	003b      	movs	r3, r7
    3c3e:	e7aa      	b.n	3b96 <__ieee754_sqrt+0x8a>
    3c40:	9b01      	ldr	r3, [sp, #4]
    3c42:	3301      	adds	r3, #1
    3c44:	d03e      	beq.n	3cc4 <__ieee754_sqrt+0x1b8>
    3c46:	9a01      	ldr	r2, [sp, #4]
    3c48:	2301      	movs	r3, #1
    3c4a:	4694      	mov	ip, r2
    3c4c:	4013      	ands	r3, r2
    3c4e:	4463      	add	r3, ip
    3c50:	085b      	lsrs	r3, r3, #1
    3c52:	e7cb      	b.n	3bec <__ieee754_sqrt+0xe0>
    3c54:	0fe3      	lsrs	r3, r4, #31
    3c56:	0052      	lsls	r2, r2, #1
    3c58:	189a      	adds	r2, r3, r2
    3c5a:	0064      	lsls	r4, r4, #1
    3c5c:	e778      	b.n	3b50 <__ieee754_sqrt+0x44>
    3c5e:	006b      	lsls	r3, r5, #1
    3c60:	085b      	lsrs	r3, r3, #1
    3c62:	4303      	orrs	r3, r0
    3c64:	002f      	movs	r7, r5
    3c66:	2b00      	cmp	r3, #0
    3c68:	d0ce      	beq.n	3c08 <__ieee754_sqrt+0xfc>
    3c6a:	2500      	movs	r5, #0
    3c6c:	2a00      	cmp	r2, #0
    3c6e:	d131      	bne.n	3cd4 <__ieee754_sqrt+0x1c8>
    3c70:	0ae2      	lsrs	r2, r4, #11
    3c72:	3d15      	subs	r5, #21
    3c74:	0564      	lsls	r4, r4, #21
    3c76:	2a00      	cmp	r2, #0
    3c78:	d0fa      	beq.n	3c70 <__ieee754_sqrt+0x164>
    3c7a:	2380      	movs	r3, #128	; 0x80
    3c7c:	035b      	lsls	r3, r3, #13
    3c7e:	421a      	tst	r2, r3
    3c80:	d123      	bne.n	3cca <__ieee754_sqrt+0x1be>
    3c82:	2080      	movs	r0, #128	; 0x80
    3c84:	2300      	movs	r3, #0
    3c86:	0340      	lsls	r0, r0, #13
    3c88:	e000      	b.n	3c8c <__ieee754_sqrt+0x180>
    3c8a:	000b      	movs	r3, r1
    3c8c:	0052      	lsls	r2, r2, #1
    3c8e:	1c59      	adds	r1, r3, #1
    3c90:	4202      	tst	r2, r0
    3c92:	d0fa      	beq.n	3c8a <__ieee754_sqrt+0x17e>
    3c94:	2020      	movs	r0, #32
    3c96:	1a40      	subs	r0, r0, r1
    3c98:	1aed      	subs	r5, r5, r3
    3c9a:	0023      	movs	r3, r4
    3c9c:	40c3      	lsrs	r3, r0
    3c9e:	408c      	lsls	r4, r1
    3ca0:	431a      	orrs	r2, r3
    3ca2:	e74a      	b.n	3b3a <__ieee754_sqrt+0x2e>
    3ca4:	0002      	movs	r2, r0
    3ca6:	002b      	movs	r3, r5
    3ca8:	0029      	movs	r1, r5
    3caa:	f001 fc4b 	bl	5544 <__aeabi_dmul>
    3cae:	0032      	movs	r2, r6
    3cb0:	002b      	movs	r3, r5
    3cb2:	f000 fcf7 	bl	46a4 <__aeabi_dadd>
    3cb6:	0006      	movs	r6, r0
    3cb8:	000f      	movs	r7, r1
    3cba:	e7a5      	b.n	3c08 <__ieee754_sqrt+0xfc>
    3cbc:	4665      	mov	r5, ip
    3cbe:	2d00      	cmp	r5, #0
    3cc0:	dab9      	bge.n	3c36 <__ieee754_sqrt+0x12a>
    3cc2:	e7b2      	b.n	3c2a <__ieee754_sqrt+0x11e>
    3cc4:	3601      	adds	r6, #1
    3cc6:	2300      	movs	r3, #0
    3cc8:	e790      	b.n	3bec <__ieee754_sqrt+0xe0>
    3cca:	2301      	movs	r3, #1
    3ccc:	2020      	movs	r0, #32
    3cce:	425b      	negs	r3, r3
    3cd0:	2100      	movs	r1, #0
    3cd2:	e7e1      	b.n	3c98 <__ieee754_sqrt+0x18c>
    3cd4:	003b      	movs	r3, r7
    3cd6:	0002      	movs	r2, r0
    3cd8:	0039      	movs	r1, r7
    3cda:	f001 fead 	bl	5a38 <__aeabi_dsub>
    3cde:	0002      	movs	r2, r0
    3ce0:	000b      	movs	r3, r1
    3ce2:	f001 f80b 	bl	4cfc <__aeabi_ddiv>
    3ce6:	0006      	movs	r6, r0
    3ce8:	000f      	movs	r7, r1
    3cea:	e78d      	b.n	3c08 <__ieee754_sqrt+0xfc>
    3cec:	7ff00000 	.word	0x7ff00000
    3cf0:	fffffc01 	.word	0xfffffc01
    3cf4:	3fe00000 	.word	0x3fe00000

00003cf8 <fabs>:
    3cf8:	0049      	lsls	r1, r1, #1
    3cfa:	084b      	lsrs	r3, r1, #1
    3cfc:	0019      	movs	r1, r3
    3cfe:	4770      	bx	lr

00003d00 <finite>:
    3d00:	4b03      	ldr	r3, [pc, #12]	; (3d10 <finite+0x10>)
    3d02:	0048      	lsls	r0, r1, #1
    3d04:	469c      	mov	ip, r3
    3d06:	0840      	lsrs	r0, r0, #1
    3d08:	4460      	add	r0, ip
    3d0a:	0fc0      	lsrs	r0, r0, #31
    3d0c:	4770      	bx	lr
    3d0e:	46c0      	nop			; (mov r8, r8)
    3d10:	80100000 	.word	0x80100000

00003d14 <matherr>:
    3d14:	2000      	movs	r0, #0
    3d16:	4770      	bx	lr

00003d18 <nan>:
    3d18:	2000      	movs	r0, #0
    3d1a:	4901      	ldr	r1, [pc, #4]	; (3d20 <nan+0x8>)
    3d1c:	4770      	bx	lr
    3d1e:	46c0      	nop			; (mov r8, r8)
    3d20:	7ff80000 	.word	0x7ff80000

00003d24 <rint>:
    3d24:	b5f0      	push	{r4, r5, r6, r7, lr}
    3d26:	4647      	mov	r7, r8
    3d28:	b480      	push	{r7}
    3d2a:	0fcb      	lsrs	r3, r1, #31
    3d2c:	4698      	mov	r8, r3
    3d2e:	4c4a      	ldr	r4, [pc, #296]	; (3e58 <rint+0x134>)
    3d30:	004b      	lsls	r3, r1, #1
    3d32:	0d5b      	lsrs	r3, r3, #21
    3d34:	191e      	adds	r6, r3, r4
    3d36:	b082      	sub	sp, #8
    3d38:	0007      	movs	r7, r0
    3d3a:	000a      	movs	r2, r1
    3d3c:	2e13      	cmp	r6, #19
    3d3e:	dc35      	bgt.n	3dac <rint+0x88>
    3d40:	2e00      	cmp	r6, #0
    3d42:	db57      	blt.n	3df4 <rint+0xd0>
    3d44:	4b45      	ldr	r3, [pc, #276]	; (3e5c <rint+0x138>)
    3d46:	0004      	movs	r4, r0
    3d48:	4133      	asrs	r3, r6
    3d4a:	001f      	movs	r7, r3
    3d4c:	400f      	ands	r7, r1
    3d4e:	4307      	orrs	r7, r0
    3d50:	000d      	movs	r5, r1
    3d52:	2f00      	cmp	r7, #0
    3d54:	d024      	beq.n	3da0 <rint+0x7c>
    3d56:	085b      	lsrs	r3, r3, #1
    3d58:	001c      	movs	r4, r3
    3d5a:	400c      	ands	r4, r1
    3d5c:	4320      	orrs	r0, r4
    3d5e:	2700      	movs	r7, #0
    3d60:	2800      	cmp	r0, #0
    3d62:	d007      	beq.n	3d74 <rint+0x50>
    3d64:	2e13      	cmp	r6, #19
    3d66:	d100      	bne.n	3d6a <rint+0x46>
    3d68:	e072      	b.n	3e50 <rint+0x12c>
    3d6a:	2280      	movs	r2, #128	; 0x80
    3d6c:	02d2      	lsls	r2, r2, #11
    3d6e:	4132      	asrs	r2, r6
    3d70:	4399      	bics	r1, r3
    3d72:	430a      	orrs	r2, r1
    3d74:	4643      	mov	r3, r8
    3d76:	00de      	lsls	r6, r3, #3
    3d78:	4b39      	ldr	r3, [pc, #228]	; (3e60 <rint+0x13c>)
    3d7a:	0011      	movs	r1, r2
    3d7c:	199e      	adds	r6, r3, r6
    3d7e:	6834      	ldr	r4, [r6, #0]
    3d80:	6875      	ldr	r5, [r6, #4]
    3d82:	0038      	movs	r0, r7
    3d84:	0022      	movs	r2, r4
    3d86:	002b      	movs	r3, r5
    3d88:	f000 fc8c 	bl	46a4 <__aeabi_dadd>
    3d8c:	9000      	str	r0, [sp, #0]
    3d8e:	9101      	str	r1, [sp, #4]
    3d90:	9800      	ldr	r0, [sp, #0]
    3d92:	9901      	ldr	r1, [sp, #4]
    3d94:	0022      	movs	r2, r4
    3d96:	002b      	movs	r3, r5
    3d98:	f001 fe4e 	bl	5a38 <__aeabi_dsub>
    3d9c:	0004      	movs	r4, r0
    3d9e:	000d      	movs	r5, r1
    3da0:	0020      	movs	r0, r4
    3da2:	0029      	movs	r1, r5
    3da4:	b002      	add	sp, #8
    3da6:	bc04      	pop	{r2}
    3da8:	4690      	mov	r8, r2
    3daa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3dac:	2e33      	cmp	r6, #51	; 0x33
    3dae:	dd0c      	ble.n	3dca <rint+0xa6>
    3db0:	2380      	movs	r3, #128	; 0x80
    3db2:	0004      	movs	r4, r0
    3db4:	000d      	movs	r5, r1
    3db6:	00db      	lsls	r3, r3, #3
    3db8:	429e      	cmp	r6, r3
    3dba:	d1f1      	bne.n	3da0 <rint+0x7c>
    3dbc:	0002      	movs	r2, r0
    3dbe:	000b      	movs	r3, r1
    3dc0:	f000 fc70 	bl	46a4 <__aeabi_dadd>
    3dc4:	0004      	movs	r4, r0
    3dc6:	000d      	movs	r5, r1
    3dc8:	e7ea      	b.n	3da0 <rint+0x7c>
    3dca:	4c26      	ldr	r4, [pc, #152]	; (3e64 <rint+0x140>)
    3dcc:	000d      	movs	r5, r1
    3dce:	46a4      	mov	ip, r4
    3dd0:	2401      	movs	r4, #1
    3dd2:	4463      	add	r3, ip
    3dd4:	4264      	negs	r4, r4
    3dd6:	40dc      	lsrs	r4, r3
    3dd8:	46a4      	mov	ip, r4
    3dda:	4661      	mov	r1, ip
    3ddc:	0004      	movs	r4, r0
    3dde:	4201      	tst	r1, r0
    3de0:	d0de      	beq.n	3da0 <rint+0x7c>
    3de2:	0849      	lsrs	r1, r1, #1
    3de4:	4201      	tst	r1, r0
    3de6:	d0c5      	beq.n	3d74 <rint+0x50>
    3de8:	2780      	movs	r7, #128	; 0x80
    3dea:	05ff      	lsls	r7, r7, #23
    3dec:	411f      	asrs	r7, r3
    3dee:	4388      	bics	r0, r1
    3df0:	4307      	orrs	r7, r0
    3df2:	e7bf      	b.n	3d74 <rint+0x50>
    3df4:	004b      	lsls	r3, r1, #1
    3df6:	085b      	lsrs	r3, r3, #1
    3df8:	4303      	orrs	r3, r0
    3dfa:	0004      	movs	r4, r0
    3dfc:	000d      	movs	r5, r1
    3dfe:	2b00      	cmp	r3, #0
    3e00:	d0ce      	beq.n	3da0 <rint+0x7c>
    3e02:	030b      	lsls	r3, r1, #12
    3e04:	0b1b      	lsrs	r3, r3, #12
    3e06:	4303      	orrs	r3, r0
    3e08:	425a      	negs	r2, r3
    3e0a:	4313      	orrs	r3, r2
    3e0c:	2280      	movs	r2, #128	; 0x80
    3e0e:	0b1b      	lsrs	r3, r3, #12
    3e10:	0312      	lsls	r2, r2, #12
    3e12:	4013      	ands	r3, r2
    3e14:	0c4a      	lsrs	r2, r1, #17
    3e16:	0452      	lsls	r2, r2, #17
    3e18:	4313      	orrs	r3, r2
    3e1a:	0019      	movs	r1, r3
    3e1c:	4643      	mov	r3, r8
    3e1e:	4a10      	ldr	r2, [pc, #64]	; (3e60 <rint+0x13c>)
    3e20:	00db      	lsls	r3, r3, #3
    3e22:	18d3      	adds	r3, r2, r3
    3e24:	681c      	ldr	r4, [r3, #0]
    3e26:	685d      	ldr	r5, [r3, #4]
    3e28:	0022      	movs	r2, r4
    3e2a:	002b      	movs	r3, r5
    3e2c:	f000 fc3a 	bl	46a4 <__aeabi_dadd>
    3e30:	9000      	str	r0, [sp, #0]
    3e32:	9101      	str	r1, [sp, #4]
    3e34:	9800      	ldr	r0, [sp, #0]
    3e36:	9901      	ldr	r1, [sp, #4]
    3e38:	0022      	movs	r2, r4
    3e3a:	002b      	movs	r3, r5
    3e3c:	f001 fdfc 	bl	5a38 <__aeabi_dsub>
    3e40:	4642      	mov	r2, r8
    3e42:	004b      	lsls	r3, r1, #1
    3e44:	085b      	lsrs	r3, r3, #1
    3e46:	07d6      	lsls	r6, r2, #31
    3e48:	4333      	orrs	r3, r6
    3e4a:	0004      	movs	r4, r0
    3e4c:	001d      	movs	r5, r3
    3e4e:	e7a7      	b.n	3da0 <rint+0x7c>
    3e50:	2780      	movs	r7, #128	; 0x80
    3e52:	063f      	lsls	r7, r7, #24
    3e54:	e789      	b.n	3d6a <rint+0x46>
    3e56:	46c0      	nop			; (mov r8, r8)
    3e58:	fffffc01 	.word	0xfffffc01
    3e5c:	000fffff 	.word	0x000fffff
    3e60:	00006918 	.word	0x00006918
    3e64:	fffffbed 	.word	0xfffffbed

00003e68 <scalbn>:
    3e68:	004b      	lsls	r3, r1, #1
    3e6a:	b570      	push	{r4, r5, r6, lr}
    3e6c:	0d5b      	lsrs	r3, r3, #21
    3e6e:	0014      	movs	r4, r2
    3e70:	000a      	movs	r2, r1
    3e72:	2b00      	cmp	r3, #0
    3e74:	d11a      	bne.n	3eac <scalbn+0x44>
    3e76:	004b      	lsls	r3, r1, #1
    3e78:	085b      	lsrs	r3, r3, #1
    3e7a:	4303      	orrs	r3, r0
    3e7c:	d015      	beq.n	3eaa <scalbn+0x42>
    3e7e:	2200      	movs	r2, #0
    3e80:	4b22      	ldr	r3, [pc, #136]	; (3f0c <scalbn+0xa4>)
    3e82:	f001 fb5f 	bl	5544 <__aeabi_dmul>
    3e86:	4b22      	ldr	r3, [pc, #136]	; (3f10 <scalbn+0xa8>)
    3e88:	000a      	movs	r2, r1
    3e8a:	429c      	cmp	r4, r3
    3e8c:	db22      	blt.n	3ed4 <scalbn+0x6c>
    3e8e:	004b      	lsls	r3, r1, #1
    3e90:	0d5b      	lsrs	r3, r3, #21
    3e92:	3b36      	subs	r3, #54	; 0x36
    3e94:	4d1f      	ldr	r5, [pc, #124]	; (3f14 <scalbn+0xac>)
    3e96:	18e3      	adds	r3, r4, r3
    3e98:	42ab      	cmp	r3, r5
    3e9a:	dc20      	bgt.n	3ede <scalbn+0x76>
    3e9c:	2b00      	cmp	r3, #0
    3e9e:	dd0d      	ble.n	3ebc <scalbn+0x54>
    3ea0:	4c1d      	ldr	r4, [pc, #116]	; (3f18 <scalbn+0xb0>)
    3ea2:	051b      	lsls	r3, r3, #20
    3ea4:	4022      	ands	r2, r4
    3ea6:	431a      	orrs	r2, r3
    3ea8:	0011      	movs	r1, r2
    3eaa:	bd70      	pop	{r4, r5, r6, pc}
    3eac:	4d1b      	ldr	r5, [pc, #108]	; (3f1c <scalbn+0xb4>)
    3eae:	42ab      	cmp	r3, r5
    3eb0:	d1f0      	bne.n	3e94 <scalbn+0x2c>
    3eb2:	0002      	movs	r2, r0
    3eb4:	000b      	movs	r3, r1
    3eb6:	f000 fbf5 	bl	46a4 <__aeabi_dadd>
    3eba:	e7f6      	b.n	3eaa <scalbn+0x42>
    3ebc:	001d      	movs	r5, r3
    3ebe:	3535      	adds	r5, #53	; 0x35
    3ec0:	da18      	bge.n	3ef4 <scalbn+0x8c>
    3ec2:	4b17      	ldr	r3, [pc, #92]	; (3f20 <scalbn+0xb8>)
    3ec4:	0002      	movs	r2, r0
    3ec6:	429c      	cmp	r4, r3
    3ec8:	dc0a      	bgt.n	3ee0 <scalbn+0x78>
    3eca:	000b      	movs	r3, r1
    3ecc:	4815      	ldr	r0, [pc, #84]	; (3f24 <scalbn+0xbc>)
    3ece:	4916      	ldr	r1, [pc, #88]	; (3f28 <scalbn+0xc0>)
    3ed0:	f000 f832 	bl	3f38 <copysign>
    3ed4:	4a13      	ldr	r2, [pc, #76]	; (3f24 <scalbn+0xbc>)
    3ed6:	4b14      	ldr	r3, [pc, #80]	; (3f28 <scalbn+0xc0>)
    3ed8:	f001 fb34 	bl	5544 <__aeabi_dmul>
    3edc:	e7e5      	b.n	3eaa <scalbn+0x42>
    3ede:	0002      	movs	r2, r0
    3ee0:	000b      	movs	r3, r1
    3ee2:	4812      	ldr	r0, [pc, #72]	; (3f2c <scalbn+0xc4>)
    3ee4:	4912      	ldr	r1, [pc, #72]	; (3f30 <scalbn+0xc8>)
    3ee6:	f000 f827 	bl	3f38 <copysign>
    3eea:	4a10      	ldr	r2, [pc, #64]	; (3f2c <scalbn+0xc4>)
    3eec:	4b10      	ldr	r3, [pc, #64]	; (3f30 <scalbn+0xc8>)
    3eee:	f001 fb29 	bl	5544 <__aeabi_dmul>
    3ef2:	e7da      	b.n	3eaa <scalbn+0x42>
    3ef4:	4c08      	ldr	r4, [pc, #32]	; (3f18 <scalbn+0xb0>)
    3ef6:	3336      	adds	r3, #54	; 0x36
    3ef8:	4022      	ands	r2, r4
    3efa:	051b      	lsls	r3, r3, #20
    3efc:	4313      	orrs	r3, r2
    3efe:	0019      	movs	r1, r3
    3f00:	2200      	movs	r2, #0
    3f02:	4b0c      	ldr	r3, [pc, #48]	; (3f34 <scalbn+0xcc>)
    3f04:	f001 fb1e 	bl	5544 <__aeabi_dmul>
    3f08:	e7cf      	b.n	3eaa <scalbn+0x42>
    3f0a:	46c0      	nop			; (mov r8, r8)
    3f0c:	43500000 	.word	0x43500000
    3f10:	ffff3cb0 	.word	0xffff3cb0
    3f14:	000007fe 	.word	0x000007fe
    3f18:	800fffff 	.word	0x800fffff
    3f1c:	000007ff 	.word	0x000007ff
    3f20:	0000c350 	.word	0x0000c350
    3f24:	c2f8f359 	.word	0xc2f8f359
    3f28:	01a56e1f 	.word	0x01a56e1f
    3f2c:	8800759c 	.word	0x8800759c
    3f30:	7e37e43c 	.word	0x7e37e43c
    3f34:	3c900000 	.word	0x3c900000

00003f38 <copysign>:
    3f38:	b530      	push	{r4, r5, lr}
    3f3a:	004a      	lsls	r2, r1, #1
    3f3c:	0fdb      	lsrs	r3, r3, #31
    3f3e:	07db      	lsls	r3, r3, #31
    3f40:	0852      	lsrs	r2, r2, #1
    3f42:	431a      	orrs	r2, r3
    3f44:	0011      	movs	r1, r2
    3f46:	bd30      	pop	{r4, r5, pc}

00003f48 <__gnu_thumb1_case_uqi>:
    3f48:	b402      	push	{r1}
    3f4a:	4671      	mov	r1, lr
    3f4c:	0849      	lsrs	r1, r1, #1
    3f4e:	0049      	lsls	r1, r1, #1
    3f50:	5c09      	ldrb	r1, [r1, r0]
    3f52:	0049      	lsls	r1, r1, #1
    3f54:	448e      	add	lr, r1
    3f56:	bc02      	pop	{r1}
    3f58:	4770      	bx	lr
    3f5a:	46c0      	nop			; (mov r8, r8)

00003f5c <__aeabi_cdrcmple>:
    3f5c:	4684      	mov	ip, r0
    3f5e:	1c10      	adds	r0, r2, #0
    3f60:	4662      	mov	r2, ip
    3f62:	468c      	mov	ip, r1
    3f64:	1c19      	adds	r1, r3, #0
    3f66:	4663      	mov	r3, ip
    3f68:	e000      	b.n	3f6c <__aeabi_cdcmpeq>
    3f6a:	46c0      	nop			; (mov r8, r8)

00003f6c <__aeabi_cdcmpeq>:
    3f6c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    3f6e:	f001 fa7f 	bl	5470 <__ledf2>
    3f72:	2800      	cmp	r0, #0
    3f74:	d401      	bmi.n	3f7a <__aeabi_cdcmpeq+0xe>
    3f76:	2100      	movs	r1, #0
    3f78:	42c8      	cmn	r0, r1
    3f7a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00003f7c <__aeabi_dcmpeq>:
    3f7c:	b510      	push	{r4, lr}
    3f7e:	f001 f9d3 	bl	5328 <__eqdf2>
    3f82:	4240      	negs	r0, r0
    3f84:	3001      	adds	r0, #1
    3f86:	bd10      	pop	{r4, pc}

00003f88 <__aeabi_dcmplt>:
    3f88:	b510      	push	{r4, lr}
    3f8a:	f001 fa71 	bl	5470 <__ledf2>
    3f8e:	2800      	cmp	r0, #0
    3f90:	db01      	blt.n	3f96 <__aeabi_dcmplt+0xe>
    3f92:	2000      	movs	r0, #0
    3f94:	bd10      	pop	{r4, pc}
    3f96:	2001      	movs	r0, #1
    3f98:	bd10      	pop	{r4, pc}
    3f9a:	46c0      	nop			; (mov r8, r8)

00003f9c <__aeabi_dcmple>:
    3f9c:	b510      	push	{r4, lr}
    3f9e:	f001 fa67 	bl	5470 <__ledf2>
    3fa2:	2800      	cmp	r0, #0
    3fa4:	dd01      	ble.n	3faa <__aeabi_dcmple+0xe>
    3fa6:	2000      	movs	r0, #0
    3fa8:	bd10      	pop	{r4, pc}
    3faa:	2001      	movs	r0, #1
    3fac:	bd10      	pop	{r4, pc}
    3fae:	46c0      	nop			; (mov r8, r8)

00003fb0 <__aeabi_dcmpgt>:
    3fb0:	b510      	push	{r4, lr}
    3fb2:	f001 f9f9 	bl	53a8 <__gedf2>
    3fb6:	2800      	cmp	r0, #0
    3fb8:	dc01      	bgt.n	3fbe <__aeabi_dcmpgt+0xe>
    3fba:	2000      	movs	r0, #0
    3fbc:	bd10      	pop	{r4, pc}
    3fbe:	2001      	movs	r0, #1
    3fc0:	bd10      	pop	{r4, pc}
    3fc2:	46c0      	nop			; (mov r8, r8)

00003fc4 <__aeabi_dcmpge>:
    3fc4:	b510      	push	{r4, lr}
    3fc6:	f001 f9ef 	bl	53a8 <__gedf2>
    3fca:	2800      	cmp	r0, #0
    3fcc:	da01      	bge.n	3fd2 <__aeabi_dcmpge+0xe>
    3fce:	2000      	movs	r0, #0
    3fd0:	bd10      	pop	{r4, pc}
    3fd2:	2001      	movs	r0, #1
    3fd4:	bd10      	pop	{r4, pc}
    3fd6:	46c0      	nop			; (mov r8, r8)

00003fd8 <__aeabi_lmul>:
    3fd8:	b5f0      	push	{r4, r5, r6, r7, lr}
    3fda:	464f      	mov	r7, r9
    3fdc:	4646      	mov	r6, r8
    3fde:	b4c0      	push	{r6, r7}
    3fe0:	0416      	lsls	r6, r2, #16
    3fe2:	0c36      	lsrs	r6, r6, #16
    3fe4:	4699      	mov	r9, r3
    3fe6:	0033      	movs	r3, r6
    3fe8:	0405      	lsls	r5, r0, #16
    3fea:	0c2c      	lsrs	r4, r5, #16
    3fec:	0c07      	lsrs	r7, r0, #16
    3fee:	0c15      	lsrs	r5, r2, #16
    3ff0:	4363      	muls	r3, r4
    3ff2:	437e      	muls	r6, r7
    3ff4:	436f      	muls	r7, r5
    3ff6:	4365      	muls	r5, r4
    3ff8:	0c1c      	lsrs	r4, r3, #16
    3ffa:	19ad      	adds	r5, r5, r6
    3ffc:	1964      	adds	r4, r4, r5
    3ffe:	469c      	mov	ip, r3
    4000:	42a6      	cmp	r6, r4
    4002:	d903      	bls.n	400c <__aeabi_lmul+0x34>
    4004:	2380      	movs	r3, #128	; 0x80
    4006:	025b      	lsls	r3, r3, #9
    4008:	4698      	mov	r8, r3
    400a:	4447      	add	r7, r8
    400c:	4663      	mov	r3, ip
    400e:	0c25      	lsrs	r5, r4, #16
    4010:	19ef      	adds	r7, r5, r7
    4012:	041d      	lsls	r5, r3, #16
    4014:	464b      	mov	r3, r9
    4016:	434a      	muls	r2, r1
    4018:	4343      	muls	r3, r0
    401a:	0c2d      	lsrs	r5, r5, #16
    401c:	0424      	lsls	r4, r4, #16
    401e:	1964      	adds	r4, r4, r5
    4020:	1899      	adds	r1, r3, r2
    4022:	19c9      	adds	r1, r1, r7
    4024:	0020      	movs	r0, r4
    4026:	bc0c      	pop	{r2, r3}
    4028:	4690      	mov	r8, r2
    402a:	4699      	mov	r9, r3
    402c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    402e:	46c0      	nop			; (mov r8, r8)

00004030 <__aeabi_f2uiz>:
    4030:	219e      	movs	r1, #158	; 0x9e
    4032:	b510      	push	{r4, lr}
    4034:	05c9      	lsls	r1, r1, #23
    4036:	1c04      	adds	r4, r0, #0
    4038:	f002 fabe 	bl	65b8 <__aeabi_fcmpge>
    403c:	2800      	cmp	r0, #0
    403e:	d103      	bne.n	4048 <__aeabi_f2uiz+0x18>
    4040:	1c20      	adds	r0, r4, #0
    4042:	f000 fac5 	bl	45d0 <__aeabi_f2iz>
    4046:	bd10      	pop	{r4, pc}
    4048:	219e      	movs	r1, #158	; 0x9e
    404a:	1c20      	adds	r0, r4, #0
    404c:	05c9      	lsls	r1, r1, #23
    404e:	f000 f939 	bl	42c4 <__aeabi_fsub>
    4052:	f000 fabd 	bl	45d0 <__aeabi_f2iz>
    4056:	2380      	movs	r3, #128	; 0x80
    4058:	061b      	lsls	r3, r3, #24
    405a:	469c      	mov	ip, r3
    405c:	4460      	add	r0, ip
    405e:	e7f2      	b.n	4046 <__aeabi_f2uiz+0x16>

00004060 <__aeabi_d2uiz>:
    4060:	b570      	push	{r4, r5, r6, lr}
    4062:	2200      	movs	r2, #0
    4064:	4b0c      	ldr	r3, [pc, #48]	; (4098 <__aeabi_d2uiz+0x38>)
    4066:	0004      	movs	r4, r0
    4068:	000d      	movs	r5, r1
    406a:	f7ff ffab 	bl	3fc4 <__aeabi_dcmpge>
    406e:	2800      	cmp	r0, #0
    4070:	d104      	bne.n	407c <__aeabi_d2uiz+0x1c>
    4072:	0020      	movs	r0, r4
    4074:	0029      	movs	r1, r5
    4076:	f002 f853 	bl	6120 <__aeabi_d2iz>
    407a:	bd70      	pop	{r4, r5, r6, pc}
    407c:	4b06      	ldr	r3, [pc, #24]	; (4098 <__aeabi_d2uiz+0x38>)
    407e:	2200      	movs	r2, #0
    4080:	0020      	movs	r0, r4
    4082:	0029      	movs	r1, r5
    4084:	f001 fcd8 	bl	5a38 <__aeabi_dsub>
    4088:	f002 f84a 	bl	6120 <__aeabi_d2iz>
    408c:	2380      	movs	r3, #128	; 0x80
    408e:	061b      	lsls	r3, r3, #24
    4090:	469c      	mov	ip, r3
    4092:	4460      	add	r0, ip
    4094:	e7f1      	b.n	407a <__aeabi_d2uiz+0x1a>
    4096:	46c0      	nop			; (mov r8, r8)
    4098:	41e00000 	.word	0x41e00000

0000409c <__aeabi_fmul>:
    409c:	b5f0      	push	{r4, r5, r6, r7, lr}
    409e:	4657      	mov	r7, sl
    40a0:	464e      	mov	r6, r9
    40a2:	4645      	mov	r5, r8
    40a4:	0043      	lsls	r3, r0, #1
    40a6:	b4e0      	push	{r5, r6, r7}
    40a8:	0246      	lsls	r6, r0, #9
    40aa:	4688      	mov	r8, r1
    40ac:	0a76      	lsrs	r6, r6, #9
    40ae:	0e1f      	lsrs	r7, r3, #24
    40b0:	0fc4      	lsrs	r4, r0, #31
    40b2:	2f00      	cmp	r7, #0
    40b4:	d047      	beq.n	4146 <__aeabi_fmul+0xaa>
    40b6:	2fff      	cmp	r7, #255	; 0xff
    40b8:	d025      	beq.n	4106 <__aeabi_fmul+0x6a>
    40ba:	2300      	movs	r3, #0
    40bc:	2580      	movs	r5, #128	; 0x80
    40be:	469a      	mov	sl, r3
    40c0:	4699      	mov	r9, r3
    40c2:	00f6      	lsls	r6, r6, #3
    40c4:	04ed      	lsls	r5, r5, #19
    40c6:	432e      	orrs	r6, r5
    40c8:	3f7f      	subs	r7, #127	; 0x7f
    40ca:	4643      	mov	r3, r8
    40cc:	4642      	mov	r2, r8
    40ce:	025d      	lsls	r5, r3, #9
    40d0:	0fd2      	lsrs	r2, r2, #31
    40d2:	005b      	lsls	r3, r3, #1
    40d4:	0a6d      	lsrs	r5, r5, #9
    40d6:	0e1b      	lsrs	r3, r3, #24
    40d8:	4690      	mov	r8, r2
    40da:	d040      	beq.n	415e <__aeabi_fmul+0xc2>
    40dc:	2bff      	cmp	r3, #255	; 0xff
    40de:	d039      	beq.n	4154 <__aeabi_fmul+0xb8>
    40e0:	2280      	movs	r2, #128	; 0x80
    40e2:	2000      	movs	r0, #0
    40e4:	00ed      	lsls	r5, r5, #3
    40e6:	04d2      	lsls	r2, r2, #19
    40e8:	4315      	orrs	r5, r2
    40ea:	3b7f      	subs	r3, #127	; 0x7f
    40ec:	18fb      	adds	r3, r7, r3
    40ee:	4642      	mov	r2, r8
    40f0:	4657      	mov	r7, sl
    40f2:	1c59      	adds	r1, r3, #1
    40f4:	4062      	eors	r2, r4
    40f6:	468c      	mov	ip, r1
    40f8:	4307      	orrs	r7, r0
    40fa:	2f0f      	cmp	r7, #15
    40fc:	d85c      	bhi.n	41b8 <__aeabi_fmul+0x11c>
    40fe:	496f      	ldr	r1, [pc, #444]	; (42bc <__aeabi_fmul+0x220>)
    4100:	00bf      	lsls	r7, r7, #2
    4102:	59c9      	ldr	r1, [r1, r7]
    4104:	468f      	mov	pc, r1
    4106:	2e00      	cmp	r6, #0
    4108:	d145      	bne.n	4196 <__aeabi_fmul+0xfa>
    410a:	2308      	movs	r3, #8
    410c:	469a      	mov	sl, r3
    410e:	3b06      	subs	r3, #6
    4110:	4699      	mov	r9, r3
    4112:	e7da      	b.n	40ca <__aeabi_fmul+0x2e>
    4114:	4642      	mov	r2, r8
    4116:	2802      	cmp	r0, #2
    4118:	d02d      	beq.n	4176 <__aeabi_fmul+0xda>
    411a:	2803      	cmp	r0, #3
    411c:	d100      	bne.n	4120 <__aeabi_fmul+0x84>
    411e:	e0c3      	b.n	42a8 <__aeabi_fmul+0x20c>
    4120:	2801      	cmp	r0, #1
    4122:	d000      	beq.n	4126 <__aeabi_fmul+0x8a>
    4124:	e0a2      	b.n	426c <__aeabi_fmul+0x1d0>
    4126:	2500      	movs	r5, #0
    4128:	2600      	movs	r6, #0
    412a:	4002      	ands	r2, r0
    412c:	b2d4      	uxtb	r4, r2
    412e:	0276      	lsls	r6, r6, #9
    4130:	05ed      	lsls	r5, r5, #23
    4132:	0a76      	lsrs	r6, r6, #9
    4134:	432e      	orrs	r6, r5
    4136:	07e4      	lsls	r4, r4, #31
    4138:	4326      	orrs	r6, r4
    413a:	0030      	movs	r0, r6
    413c:	bc1c      	pop	{r2, r3, r4}
    413e:	4690      	mov	r8, r2
    4140:	4699      	mov	r9, r3
    4142:	46a2      	mov	sl, r4
    4144:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4146:	2e00      	cmp	r6, #0
    4148:	d11a      	bne.n	4180 <__aeabi_fmul+0xe4>
    414a:	2304      	movs	r3, #4
    414c:	469a      	mov	sl, r3
    414e:	3b03      	subs	r3, #3
    4150:	4699      	mov	r9, r3
    4152:	e7ba      	b.n	40ca <__aeabi_fmul+0x2e>
    4154:	002a      	movs	r2, r5
    4156:	1e51      	subs	r1, r2, #1
    4158:	418a      	sbcs	r2, r1
    415a:	1c90      	adds	r0, r2, #2
    415c:	e7c6      	b.n	40ec <__aeabi_fmul+0x50>
    415e:	2001      	movs	r0, #1
    4160:	2d00      	cmp	r5, #0
    4162:	d0c3      	beq.n	40ec <__aeabi_fmul+0x50>
    4164:	0028      	movs	r0, r5
    4166:	f002 fa31 	bl	65cc <__clzsi2>
    416a:	1f43      	subs	r3, r0, #5
    416c:	3076      	adds	r0, #118	; 0x76
    416e:	409d      	lsls	r5, r3
    4170:	4243      	negs	r3, r0
    4172:	2000      	movs	r0, #0
    4174:	e7ba      	b.n	40ec <__aeabi_fmul+0x50>
    4176:	2401      	movs	r4, #1
    4178:	25ff      	movs	r5, #255	; 0xff
    417a:	4014      	ands	r4, r2
    417c:	2600      	movs	r6, #0
    417e:	e7d6      	b.n	412e <__aeabi_fmul+0x92>
    4180:	0030      	movs	r0, r6
    4182:	f002 fa23 	bl	65cc <__clzsi2>
    4186:	1f43      	subs	r3, r0, #5
    4188:	409e      	lsls	r6, r3
    418a:	2300      	movs	r3, #0
    418c:	3076      	adds	r0, #118	; 0x76
    418e:	4247      	negs	r7, r0
    4190:	469a      	mov	sl, r3
    4192:	4699      	mov	r9, r3
    4194:	e799      	b.n	40ca <__aeabi_fmul+0x2e>
    4196:	230c      	movs	r3, #12
    4198:	469a      	mov	sl, r3
    419a:	3b09      	subs	r3, #9
    419c:	4699      	mov	r9, r3
    419e:	e794      	b.n	40ca <__aeabi_fmul+0x2e>
    41a0:	2680      	movs	r6, #128	; 0x80
    41a2:	2400      	movs	r4, #0
    41a4:	03f6      	lsls	r6, r6, #15
    41a6:	25ff      	movs	r5, #255	; 0xff
    41a8:	e7c1      	b.n	412e <__aeabi_fmul+0x92>
    41aa:	0035      	movs	r5, r6
    41ac:	4648      	mov	r0, r9
    41ae:	e7b2      	b.n	4116 <__aeabi_fmul+0x7a>
    41b0:	0035      	movs	r5, r6
    41b2:	0022      	movs	r2, r4
    41b4:	4648      	mov	r0, r9
    41b6:	e7ae      	b.n	4116 <__aeabi_fmul+0x7a>
    41b8:	0429      	lsls	r1, r5, #16
    41ba:	0c09      	lsrs	r1, r1, #16
    41bc:	0008      	movs	r0, r1
    41be:	0c37      	lsrs	r7, r6, #16
    41c0:	0436      	lsls	r6, r6, #16
    41c2:	0c36      	lsrs	r6, r6, #16
    41c4:	0c2c      	lsrs	r4, r5, #16
    41c6:	4379      	muls	r1, r7
    41c8:	4370      	muls	r0, r6
    41ca:	4367      	muls	r7, r4
    41cc:	4374      	muls	r4, r6
    41ce:	0c06      	lsrs	r6, r0, #16
    41d0:	1864      	adds	r4, r4, r1
    41d2:	1936      	adds	r6, r6, r4
    41d4:	42b1      	cmp	r1, r6
    41d6:	d903      	bls.n	41e0 <__aeabi_fmul+0x144>
    41d8:	2180      	movs	r1, #128	; 0x80
    41da:	0249      	lsls	r1, r1, #9
    41dc:	4688      	mov	r8, r1
    41de:	4447      	add	r7, r8
    41e0:	0400      	lsls	r0, r0, #16
    41e2:	0c00      	lsrs	r0, r0, #16
    41e4:	0431      	lsls	r1, r6, #16
    41e6:	1809      	adds	r1, r1, r0
    41e8:	018d      	lsls	r5, r1, #6
    41ea:	1e68      	subs	r0, r5, #1
    41ec:	4185      	sbcs	r5, r0
    41ee:	0e89      	lsrs	r1, r1, #26
    41f0:	4329      	orrs	r1, r5
    41f2:	0c35      	lsrs	r5, r6, #16
    41f4:	19ed      	adds	r5, r5, r7
    41f6:	01ad      	lsls	r5, r5, #6
    41f8:	430d      	orrs	r5, r1
    41fa:	0129      	lsls	r1, r5, #4
    41fc:	d504      	bpl.n	4208 <__aeabi_fmul+0x16c>
    41fe:	2301      	movs	r3, #1
    4200:	0869      	lsrs	r1, r5, #1
    4202:	401d      	ands	r5, r3
    4204:	4663      	mov	r3, ip
    4206:	430d      	orrs	r5, r1
    4208:	0019      	movs	r1, r3
    420a:	317f      	adds	r1, #127	; 0x7f
    420c:	2900      	cmp	r1, #0
    420e:	dd25      	ble.n	425c <__aeabi_fmul+0x1c0>
    4210:	0768      	lsls	r0, r5, #29
    4212:	d004      	beq.n	421e <__aeabi_fmul+0x182>
    4214:	200f      	movs	r0, #15
    4216:	4028      	ands	r0, r5
    4218:	2804      	cmp	r0, #4
    421a:	d000      	beq.n	421e <__aeabi_fmul+0x182>
    421c:	3504      	adds	r5, #4
    421e:	0128      	lsls	r0, r5, #4
    4220:	d503      	bpl.n	422a <__aeabi_fmul+0x18e>
    4222:	4927      	ldr	r1, [pc, #156]	; (42c0 <__aeabi_fmul+0x224>)
    4224:	3380      	adds	r3, #128	; 0x80
    4226:	400d      	ands	r5, r1
    4228:	0019      	movs	r1, r3
    422a:	29fe      	cmp	r1, #254	; 0xfe
    422c:	dca3      	bgt.n	4176 <__aeabi_fmul+0xda>
    422e:	2401      	movs	r4, #1
    4230:	01ad      	lsls	r5, r5, #6
    4232:	0a6e      	lsrs	r6, r5, #9
    4234:	4014      	ands	r4, r2
    4236:	b2cd      	uxtb	r5, r1
    4238:	e779      	b.n	412e <__aeabi_fmul+0x92>
    423a:	2080      	movs	r0, #128	; 0x80
    423c:	03c0      	lsls	r0, r0, #15
    423e:	4206      	tst	r6, r0
    4240:	d007      	beq.n	4252 <__aeabi_fmul+0x1b6>
    4242:	4205      	tst	r5, r0
    4244:	d105      	bne.n	4252 <__aeabi_fmul+0x1b6>
    4246:	4328      	orrs	r0, r5
    4248:	0246      	lsls	r6, r0, #9
    424a:	0a76      	lsrs	r6, r6, #9
    424c:	4644      	mov	r4, r8
    424e:	25ff      	movs	r5, #255	; 0xff
    4250:	e76d      	b.n	412e <__aeabi_fmul+0x92>
    4252:	4306      	orrs	r6, r0
    4254:	0276      	lsls	r6, r6, #9
    4256:	0a76      	lsrs	r6, r6, #9
    4258:	25ff      	movs	r5, #255	; 0xff
    425a:	e768      	b.n	412e <__aeabi_fmul+0x92>
    425c:	2401      	movs	r4, #1
    425e:	1a61      	subs	r1, r4, r1
    4260:	291b      	cmp	r1, #27
    4262:	dd05      	ble.n	4270 <__aeabi_fmul+0x1d4>
    4264:	4014      	ands	r4, r2
    4266:	2500      	movs	r5, #0
    4268:	2600      	movs	r6, #0
    426a:	e760      	b.n	412e <__aeabi_fmul+0x92>
    426c:	4663      	mov	r3, ip
    426e:	e7cb      	b.n	4208 <__aeabi_fmul+0x16c>
    4270:	002e      	movs	r6, r5
    4272:	2320      	movs	r3, #32
    4274:	40ce      	lsrs	r6, r1
    4276:	1a59      	subs	r1, r3, r1
    4278:	408d      	lsls	r5, r1
    427a:	1e6b      	subs	r3, r5, #1
    427c:	419d      	sbcs	r5, r3
    427e:	432e      	orrs	r6, r5
    4280:	0773      	lsls	r3, r6, #29
    4282:	d004      	beq.n	428e <__aeabi_fmul+0x1f2>
    4284:	230f      	movs	r3, #15
    4286:	4033      	ands	r3, r6
    4288:	2b04      	cmp	r3, #4
    428a:	d000      	beq.n	428e <__aeabi_fmul+0x1f2>
    428c:	3604      	adds	r6, #4
    428e:	0173      	lsls	r3, r6, #5
    4290:	d504      	bpl.n	429c <__aeabi_fmul+0x200>
    4292:	2401      	movs	r4, #1
    4294:	2501      	movs	r5, #1
    4296:	4014      	ands	r4, r2
    4298:	2600      	movs	r6, #0
    429a:	e748      	b.n	412e <__aeabi_fmul+0x92>
    429c:	2401      	movs	r4, #1
    429e:	01b6      	lsls	r6, r6, #6
    42a0:	0a76      	lsrs	r6, r6, #9
    42a2:	4014      	ands	r4, r2
    42a4:	2500      	movs	r5, #0
    42a6:	e742      	b.n	412e <__aeabi_fmul+0x92>
    42a8:	2680      	movs	r6, #128	; 0x80
    42aa:	2401      	movs	r4, #1
    42ac:	03f6      	lsls	r6, r6, #15
    42ae:	432e      	orrs	r6, r5
    42b0:	0276      	lsls	r6, r6, #9
    42b2:	0a76      	lsrs	r6, r6, #9
    42b4:	4014      	ands	r4, r2
    42b6:	25ff      	movs	r5, #255	; 0xff
    42b8:	e739      	b.n	412e <__aeabi_fmul+0x92>
    42ba:	46c0      	nop			; (mov r8, r8)
    42bc:	00006928 	.word	0x00006928
    42c0:	f7ffffff 	.word	0xf7ffffff

000042c4 <__aeabi_fsub>:
    42c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    42c6:	024a      	lsls	r2, r1, #9
    42c8:	004e      	lsls	r6, r1, #1
    42ca:	0243      	lsls	r3, r0, #9
    42cc:	0044      	lsls	r4, r0, #1
    42ce:	0e24      	lsrs	r4, r4, #24
    42d0:	0fc5      	lsrs	r5, r0, #31
    42d2:	099b      	lsrs	r3, r3, #6
    42d4:	0e36      	lsrs	r6, r6, #24
    42d6:	0fc9      	lsrs	r1, r1, #31
    42d8:	0992      	lsrs	r2, r2, #6
    42da:	2eff      	cmp	r6, #255	; 0xff
    42dc:	d100      	bne.n	42e0 <__aeabi_fsub+0x1c>
    42de:	e083      	b.n	43e8 <__aeabi_fsub+0x124>
    42e0:	2001      	movs	r0, #1
    42e2:	4041      	eors	r1, r0
    42e4:	1ba0      	subs	r0, r4, r6
    42e6:	42a9      	cmp	r1, r5
    42e8:	d05c      	beq.n	43a4 <__aeabi_fsub+0xe0>
    42ea:	2800      	cmp	r0, #0
    42ec:	dc00      	bgt.n	42f0 <__aeabi_fsub+0x2c>
    42ee:	e095      	b.n	441c <__aeabi_fsub+0x158>
    42f0:	2e00      	cmp	r6, #0
    42f2:	d11c      	bne.n	432e <__aeabi_fsub+0x6a>
    42f4:	2a00      	cmp	r2, #0
    42f6:	d000      	beq.n	42fa <__aeabi_fsub+0x36>
    42f8:	e081      	b.n	43fe <__aeabi_fsub+0x13a>
    42fa:	075a      	lsls	r2, r3, #29
    42fc:	d004      	beq.n	4308 <__aeabi_fsub+0x44>
    42fe:	220f      	movs	r2, #15
    4300:	401a      	ands	r2, r3
    4302:	2a04      	cmp	r2, #4
    4304:	d000      	beq.n	4308 <__aeabi_fsub+0x44>
    4306:	3304      	adds	r3, #4
    4308:	015a      	lsls	r2, r3, #5
    430a:	d53b      	bpl.n	4384 <__aeabi_fsub+0xc0>
    430c:	3401      	adds	r4, #1
    430e:	2cff      	cmp	r4, #255	; 0xff
    4310:	d100      	bne.n	4314 <__aeabi_fsub+0x50>
    4312:	e091      	b.n	4438 <__aeabi_fsub+0x174>
    4314:	2001      	movs	r0, #1
    4316:	019b      	lsls	r3, r3, #6
    4318:	0a5b      	lsrs	r3, r3, #9
    431a:	b2e4      	uxtb	r4, r4
    431c:	4005      	ands	r5, r0
    431e:	025b      	lsls	r3, r3, #9
    4320:	05e4      	lsls	r4, r4, #23
    4322:	0a5b      	lsrs	r3, r3, #9
    4324:	07ed      	lsls	r5, r5, #31
    4326:	4323      	orrs	r3, r4
    4328:	432b      	orrs	r3, r5
    432a:	0018      	movs	r0, r3
    432c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    432e:	2cff      	cmp	r4, #255	; 0xff
    4330:	d0e3      	beq.n	42fa <__aeabi_fsub+0x36>
    4332:	2180      	movs	r1, #128	; 0x80
    4334:	04c9      	lsls	r1, r1, #19
    4336:	430a      	orrs	r2, r1
    4338:	281b      	cmp	r0, #27
    433a:	dd00      	ble.n	433e <__aeabi_fsub+0x7a>
    433c:	e090      	b.n	4460 <__aeabi_fsub+0x19c>
    433e:	0016      	movs	r6, r2
    4340:	2120      	movs	r1, #32
    4342:	40c6      	lsrs	r6, r0
    4344:	1a08      	subs	r0, r1, r0
    4346:	4082      	lsls	r2, r0
    4348:	1e51      	subs	r1, r2, #1
    434a:	418a      	sbcs	r2, r1
    434c:	4332      	orrs	r2, r6
    434e:	1a9b      	subs	r3, r3, r2
    4350:	015a      	lsls	r2, r3, #5
    4352:	d515      	bpl.n	4380 <__aeabi_fsub+0xbc>
    4354:	019b      	lsls	r3, r3, #6
    4356:	099e      	lsrs	r6, r3, #6
    4358:	0030      	movs	r0, r6
    435a:	f002 f937 	bl	65cc <__clzsi2>
    435e:	3805      	subs	r0, #5
    4360:	4086      	lsls	r6, r0
    4362:	4284      	cmp	r4, r0
    4364:	dc6c      	bgt.n	4440 <__aeabi_fsub+0x17c>
    4366:	1b04      	subs	r4, r0, r4
    4368:	0033      	movs	r3, r6
    436a:	2020      	movs	r0, #32
    436c:	3401      	adds	r4, #1
    436e:	40e3      	lsrs	r3, r4
    4370:	1b04      	subs	r4, r0, r4
    4372:	40a6      	lsls	r6, r4
    4374:	1e72      	subs	r2, r6, #1
    4376:	4196      	sbcs	r6, r2
    4378:	2400      	movs	r4, #0
    437a:	4333      	orrs	r3, r6
    437c:	e7bd      	b.n	42fa <__aeabi_fsub+0x36>
    437e:	000d      	movs	r5, r1
    4380:	075a      	lsls	r2, r3, #29
    4382:	d1bc      	bne.n	42fe <__aeabi_fsub+0x3a>
    4384:	08df      	lsrs	r7, r3, #3
    4386:	2301      	movs	r3, #1
    4388:	401d      	ands	r5, r3
    438a:	2cff      	cmp	r4, #255	; 0xff
    438c:	d133      	bne.n	43f6 <__aeabi_fsub+0x132>
    438e:	2f00      	cmp	r7, #0
    4390:	d100      	bne.n	4394 <__aeabi_fsub+0xd0>
    4392:	e090      	b.n	44b6 <__aeabi_fsub+0x1f2>
    4394:	2280      	movs	r2, #128	; 0x80
    4396:	03d2      	lsls	r2, r2, #15
    4398:	0013      	movs	r3, r2
    439a:	433b      	orrs	r3, r7
    439c:	025b      	lsls	r3, r3, #9
    439e:	0a5b      	lsrs	r3, r3, #9
    43a0:	24ff      	movs	r4, #255	; 0xff
    43a2:	e7bc      	b.n	431e <__aeabi_fsub+0x5a>
    43a4:	2800      	cmp	r0, #0
    43a6:	dd4f      	ble.n	4448 <__aeabi_fsub+0x184>
    43a8:	2e00      	cmp	r6, #0
    43aa:	d02e      	beq.n	440a <__aeabi_fsub+0x146>
    43ac:	2cff      	cmp	r4, #255	; 0xff
    43ae:	d0a4      	beq.n	42fa <__aeabi_fsub+0x36>
    43b0:	2580      	movs	r5, #128	; 0x80
    43b2:	04ed      	lsls	r5, r5, #19
    43b4:	432a      	orrs	r2, r5
    43b6:	281b      	cmp	r0, #27
    43b8:	dd00      	ble.n	43bc <__aeabi_fsub+0xf8>
    43ba:	e097      	b.n	44ec <__aeabi_fsub+0x228>
    43bc:	0016      	movs	r6, r2
    43be:	2520      	movs	r5, #32
    43c0:	40c6      	lsrs	r6, r0
    43c2:	1a28      	subs	r0, r5, r0
    43c4:	4082      	lsls	r2, r0
    43c6:	1e50      	subs	r0, r2, #1
    43c8:	4182      	sbcs	r2, r0
    43ca:	4332      	orrs	r2, r6
    43cc:	189b      	adds	r3, r3, r2
    43ce:	015a      	lsls	r2, r3, #5
    43d0:	d5d5      	bpl.n	437e <__aeabi_fsub+0xba>
    43d2:	3401      	adds	r4, #1
    43d4:	2cff      	cmp	r4, #255	; 0xff
    43d6:	d06d      	beq.n	44b4 <__aeabi_fsub+0x1f0>
    43d8:	2201      	movs	r2, #1
    43da:	487b      	ldr	r0, [pc, #492]	; (45c8 <__aeabi_fsub+0x304>)
    43dc:	401a      	ands	r2, r3
    43de:	085b      	lsrs	r3, r3, #1
    43e0:	4003      	ands	r3, r0
    43e2:	4313      	orrs	r3, r2
    43e4:	000d      	movs	r5, r1
    43e6:	e788      	b.n	42fa <__aeabi_fsub+0x36>
    43e8:	2a00      	cmp	r2, #0
    43ea:	d000      	beq.n	43ee <__aeabi_fsub+0x12a>
    43ec:	e77a      	b.n	42e4 <__aeabi_fsub+0x20>
    43ee:	e777      	b.n	42e0 <__aeabi_fsub+0x1c>
    43f0:	1e03      	subs	r3, r0, #0
    43f2:	d1c5      	bne.n	4380 <__aeabi_fsub+0xbc>
    43f4:	2500      	movs	r5, #0
    43f6:	027b      	lsls	r3, r7, #9
    43f8:	0a5b      	lsrs	r3, r3, #9
    43fa:	b2e4      	uxtb	r4, r4
    43fc:	e78f      	b.n	431e <__aeabi_fsub+0x5a>
    43fe:	3801      	subs	r0, #1
    4400:	2800      	cmp	r0, #0
    4402:	d0a4      	beq.n	434e <__aeabi_fsub+0x8a>
    4404:	2cff      	cmp	r4, #255	; 0xff
    4406:	d197      	bne.n	4338 <__aeabi_fsub+0x74>
    4408:	e777      	b.n	42fa <__aeabi_fsub+0x36>
    440a:	2a00      	cmp	r2, #0
    440c:	d100      	bne.n	4410 <__aeabi_fsub+0x14c>
    440e:	e774      	b.n	42fa <__aeabi_fsub+0x36>
    4410:	3801      	subs	r0, #1
    4412:	2800      	cmp	r0, #0
    4414:	d0da      	beq.n	43cc <__aeabi_fsub+0x108>
    4416:	2cff      	cmp	r4, #255	; 0xff
    4418:	d1cd      	bne.n	43b6 <__aeabi_fsub+0xf2>
    441a:	e76e      	b.n	42fa <__aeabi_fsub+0x36>
    441c:	2800      	cmp	r0, #0
    441e:	d121      	bne.n	4464 <__aeabi_fsub+0x1a0>
    4420:	1c60      	adds	r0, r4, #1
    4422:	b2c0      	uxtb	r0, r0
    4424:	2801      	cmp	r0, #1
    4426:	dd58      	ble.n	44da <__aeabi_fsub+0x216>
    4428:	2780      	movs	r7, #128	; 0x80
    442a:	1a9e      	subs	r6, r3, r2
    442c:	04ff      	lsls	r7, r7, #19
    442e:	4037      	ands	r7, r6
    4430:	d02f      	beq.n	4492 <__aeabi_fsub+0x1ce>
    4432:	1ad6      	subs	r6, r2, r3
    4434:	000d      	movs	r5, r1
    4436:	e78f      	b.n	4358 <__aeabi_fsub+0x94>
    4438:	2301      	movs	r3, #1
    443a:	401d      	ands	r5, r3
    443c:	2300      	movs	r3, #0
    443e:	e76e      	b.n	431e <__aeabi_fsub+0x5a>
    4440:	4b62      	ldr	r3, [pc, #392]	; (45cc <__aeabi_fsub+0x308>)
    4442:	1a24      	subs	r4, r4, r0
    4444:	4033      	ands	r3, r6
    4446:	e758      	b.n	42fa <__aeabi_fsub+0x36>
    4448:	2800      	cmp	r0, #0
    444a:	d151      	bne.n	44f0 <__aeabi_fsub+0x22c>
    444c:	1c60      	adds	r0, r4, #1
    444e:	b2c6      	uxtb	r6, r0
    4450:	2e01      	cmp	r6, #1
    4452:	dd33      	ble.n	44bc <__aeabi_fsub+0x1f8>
    4454:	28ff      	cmp	r0, #255	; 0xff
    4456:	d02d      	beq.n	44b4 <__aeabi_fsub+0x1f0>
    4458:	189b      	adds	r3, r3, r2
    445a:	085b      	lsrs	r3, r3, #1
    445c:	0004      	movs	r4, r0
    445e:	e74c      	b.n	42fa <__aeabi_fsub+0x36>
    4460:	2201      	movs	r2, #1
    4462:	e774      	b.n	434e <__aeabi_fsub+0x8a>
    4464:	2c00      	cmp	r4, #0
    4466:	d01a      	beq.n	449e <__aeabi_fsub+0x1da>
    4468:	2eff      	cmp	r6, #255	; 0xff
    446a:	d01f      	beq.n	44ac <__aeabi_fsub+0x1e8>
    446c:	2480      	movs	r4, #128	; 0x80
    446e:	04e4      	lsls	r4, r4, #19
    4470:	4240      	negs	r0, r0
    4472:	4323      	orrs	r3, r4
    4474:	281b      	cmp	r0, #27
    4476:	dd00      	ble.n	447a <__aeabi_fsub+0x1b6>
    4478:	e096      	b.n	45a8 <__aeabi_fsub+0x2e4>
    447a:	001d      	movs	r5, r3
    447c:	2420      	movs	r4, #32
    447e:	40c5      	lsrs	r5, r0
    4480:	1a20      	subs	r0, r4, r0
    4482:	4083      	lsls	r3, r0
    4484:	1e58      	subs	r0, r3, #1
    4486:	4183      	sbcs	r3, r0
    4488:	432b      	orrs	r3, r5
    448a:	1ad3      	subs	r3, r2, r3
    448c:	0034      	movs	r4, r6
    448e:	000d      	movs	r5, r1
    4490:	e75e      	b.n	4350 <__aeabi_fsub+0x8c>
    4492:	2e00      	cmp	r6, #0
    4494:	d000      	beq.n	4498 <__aeabi_fsub+0x1d4>
    4496:	e75f      	b.n	4358 <__aeabi_fsub+0x94>
    4498:	2500      	movs	r5, #0
    449a:	2400      	movs	r4, #0
    449c:	e7ab      	b.n	43f6 <__aeabi_fsub+0x132>
    449e:	2b00      	cmp	r3, #0
    44a0:	d044      	beq.n	452c <__aeabi_fsub+0x268>
    44a2:	43c0      	mvns	r0, r0
    44a4:	2800      	cmp	r0, #0
    44a6:	d0f0      	beq.n	448a <__aeabi_fsub+0x1c6>
    44a8:	2eff      	cmp	r6, #255	; 0xff
    44aa:	d1e3      	bne.n	4474 <__aeabi_fsub+0x1b0>
    44ac:	0013      	movs	r3, r2
    44ae:	24ff      	movs	r4, #255	; 0xff
    44b0:	000d      	movs	r5, r1
    44b2:	e722      	b.n	42fa <__aeabi_fsub+0x36>
    44b4:	000d      	movs	r5, r1
    44b6:	24ff      	movs	r4, #255	; 0xff
    44b8:	2300      	movs	r3, #0
    44ba:	e730      	b.n	431e <__aeabi_fsub+0x5a>
    44bc:	2c00      	cmp	r4, #0
    44be:	d15d      	bne.n	457c <__aeabi_fsub+0x2b8>
    44c0:	2b00      	cmp	r3, #0
    44c2:	d07d      	beq.n	45c0 <__aeabi_fsub+0x2fc>
    44c4:	2a00      	cmp	r2, #0
    44c6:	d100      	bne.n	44ca <__aeabi_fsub+0x206>
    44c8:	e717      	b.n	42fa <__aeabi_fsub+0x36>
    44ca:	189b      	adds	r3, r3, r2
    44cc:	015a      	lsls	r2, r3, #5
    44ce:	d400      	bmi.n	44d2 <__aeabi_fsub+0x20e>
    44d0:	e756      	b.n	4380 <__aeabi_fsub+0xbc>
    44d2:	4a3e      	ldr	r2, [pc, #248]	; (45cc <__aeabi_fsub+0x308>)
    44d4:	0004      	movs	r4, r0
    44d6:	4013      	ands	r3, r2
    44d8:	e70f      	b.n	42fa <__aeabi_fsub+0x36>
    44da:	2c00      	cmp	r4, #0
    44dc:	d11e      	bne.n	451c <__aeabi_fsub+0x258>
    44de:	2b00      	cmp	r3, #0
    44e0:	d12f      	bne.n	4542 <__aeabi_fsub+0x27e>
    44e2:	2a00      	cmp	r2, #0
    44e4:	d065      	beq.n	45b2 <__aeabi_fsub+0x2ee>
    44e6:	0013      	movs	r3, r2
    44e8:	000d      	movs	r5, r1
    44ea:	e706      	b.n	42fa <__aeabi_fsub+0x36>
    44ec:	2201      	movs	r2, #1
    44ee:	e76d      	b.n	43cc <__aeabi_fsub+0x108>
    44f0:	2c00      	cmp	r4, #0
    44f2:	d11f      	bne.n	4534 <__aeabi_fsub+0x270>
    44f4:	2b00      	cmp	r3, #0
    44f6:	d059      	beq.n	45ac <__aeabi_fsub+0x2e8>
    44f8:	43c0      	mvns	r0, r0
    44fa:	2800      	cmp	r0, #0
    44fc:	d00b      	beq.n	4516 <__aeabi_fsub+0x252>
    44fe:	2eff      	cmp	r6, #255	; 0xff
    4500:	d04f      	beq.n	45a2 <__aeabi_fsub+0x2de>
    4502:	281b      	cmp	r0, #27
    4504:	dc5e      	bgt.n	45c4 <__aeabi_fsub+0x300>
    4506:	001d      	movs	r5, r3
    4508:	2420      	movs	r4, #32
    450a:	40c5      	lsrs	r5, r0
    450c:	1a20      	subs	r0, r4, r0
    450e:	4083      	lsls	r3, r0
    4510:	1e58      	subs	r0, r3, #1
    4512:	4183      	sbcs	r3, r0
    4514:	432b      	orrs	r3, r5
    4516:	189b      	adds	r3, r3, r2
    4518:	0034      	movs	r4, r6
    451a:	e758      	b.n	43ce <__aeabi_fsub+0x10a>
    451c:	2b00      	cmp	r3, #0
    451e:	d11c      	bne.n	455a <__aeabi_fsub+0x296>
    4520:	2a00      	cmp	r2, #0
    4522:	d049      	beq.n	45b8 <__aeabi_fsub+0x2f4>
    4524:	0013      	movs	r3, r2
    4526:	000d      	movs	r5, r1
    4528:	24ff      	movs	r4, #255	; 0xff
    452a:	e6e6      	b.n	42fa <__aeabi_fsub+0x36>
    452c:	0013      	movs	r3, r2
    452e:	0034      	movs	r4, r6
    4530:	000d      	movs	r5, r1
    4532:	e6e2      	b.n	42fa <__aeabi_fsub+0x36>
    4534:	2eff      	cmp	r6, #255	; 0xff
    4536:	d034      	beq.n	45a2 <__aeabi_fsub+0x2de>
    4538:	2480      	movs	r4, #128	; 0x80
    453a:	04e4      	lsls	r4, r4, #19
    453c:	4240      	negs	r0, r0
    453e:	4323      	orrs	r3, r4
    4540:	e7df      	b.n	4502 <__aeabi_fsub+0x23e>
    4542:	2a00      	cmp	r2, #0
    4544:	d100      	bne.n	4548 <__aeabi_fsub+0x284>
    4546:	e6d8      	b.n	42fa <__aeabi_fsub+0x36>
    4548:	2780      	movs	r7, #128	; 0x80
    454a:	1a98      	subs	r0, r3, r2
    454c:	04ff      	lsls	r7, r7, #19
    454e:	4007      	ands	r7, r0
    4550:	d100      	bne.n	4554 <__aeabi_fsub+0x290>
    4552:	e74d      	b.n	43f0 <__aeabi_fsub+0x12c>
    4554:	1ad3      	subs	r3, r2, r3
    4556:	000d      	movs	r5, r1
    4558:	e6cf      	b.n	42fa <__aeabi_fsub+0x36>
    455a:	24ff      	movs	r4, #255	; 0xff
    455c:	2a00      	cmp	r2, #0
    455e:	d100      	bne.n	4562 <__aeabi_fsub+0x29e>
    4560:	e6cb      	b.n	42fa <__aeabi_fsub+0x36>
    4562:	2080      	movs	r0, #128	; 0x80
    4564:	08db      	lsrs	r3, r3, #3
    4566:	03c0      	lsls	r0, r0, #15
    4568:	4203      	tst	r3, r0
    456a:	d004      	beq.n	4576 <__aeabi_fsub+0x2b2>
    456c:	08d2      	lsrs	r2, r2, #3
    456e:	4202      	tst	r2, r0
    4570:	d101      	bne.n	4576 <__aeabi_fsub+0x2b2>
    4572:	0013      	movs	r3, r2
    4574:	000d      	movs	r5, r1
    4576:	00db      	lsls	r3, r3, #3
    4578:	24ff      	movs	r4, #255	; 0xff
    457a:	e6be      	b.n	42fa <__aeabi_fsub+0x36>
    457c:	2b00      	cmp	r3, #0
    457e:	d010      	beq.n	45a2 <__aeabi_fsub+0x2de>
    4580:	24ff      	movs	r4, #255	; 0xff
    4582:	2a00      	cmp	r2, #0
    4584:	d100      	bne.n	4588 <__aeabi_fsub+0x2c4>
    4586:	e6b8      	b.n	42fa <__aeabi_fsub+0x36>
    4588:	2080      	movs	r0, #128	; 0x80
    458a:	08db      	lsrs	r3, r3, #3
    458c:	03c0      	lsls	r0, r0, #15
    458e:	4203      	tst	r3, r0
    4590:	d003      	beq.n	459a <__aeabi_fsub+0x2d6>
    4592:	08d2      	lsrs	r2, r2, #3
    4594:	4202      	tst	r2, r0
    4596:	d100      	bne.n	459a <__aeabi_fsub+0x2d6>
    4598:	0013      	movs	r3, r2
    459a:	00db      	lsls	r3, r3, #3
    459c:	000d      	movs	r5, r1
    459e:	24ff      	movs	r4, #255	; 0xff
    45a0:	e6ab      	b.n	42fa <__aeabi_fsub+0x36>
    45a2:	0013      	movs	r3, r2
    45a4:	24ff      	movs	r4, #255	; 0xff
    45a6:	e6a8      	b.n	42fa <__aeabi_fsub+0x36>
    45a8:	2301      	movs	r3, #1
    45aa:	e76e      	b.n	448a <__aeabi_fsub+0x1c6>
    45ac:	0013      	movs	r3, r2
    45ae:	0034      	movs	r4, r6
    45b0:	e6a3      	b.n	42fa <__aeabi_fsub+0x36>
    45b2:	2700      	movs	r7, #0
    45b4:	2500      	movs	r5, #0
    45b6:	e71e      	b.n	43f6 <__aeabi_fsub+0x132>
    45b8:	2780      	movs	r7, #128	; 0x80
    45ba:	2500      	movs	r5, #0
    45bc:	03ff      	lsls	r7, r7, #15
    45be:	e6e9      	b.n	4394 <__aeabi_fsub+0xd0>
    45c0:	0013      	movs	r3, r2
    45c2:	e69a      	b.n	42fa <__aeabi_fsub+0x36>
    45c4:	2301      	movs	r3, #1
    45c6:	e7a6      	b.n	4516 <__aeabi_fsub+0x252>
    45c8:	7dffffff 	.word	0x7dffffff
    45cc:	fbffffff 	.word	0xfbffffff

000045d0 <__aeabi_f2iz>:
    45d0:	0243      	lsls	r3, r0, #9
    45d2:	0a59      	lsrs	r1, r3, #9
    45d4:	0043      	lsls	r3, r0, #1
    45d6:	0fc2      	lsrs	r2, r0, #31
    45d8:	0e1b      	lsrs	r3, r3, #24
    45da:	2000      	movs	r0, #0
    45dc:	2b7e      	cmp	r3, #126	; 0x7e
    45de:	dd0e      	ble.n	45fe <__aeabi_f2iz+0x2e>
    45e0:	2b9d      	cmp	r3, #157	; 0x9d
    45e2:	dc0d      	bgt.n	4600 <__aeabi_f2iz+0x30>
    45e4:	2080      	movs	r0, #128	; 0x80
    45e6:	0400      	lsls	r0, r0, #16
    45e8:	4301      	orrs	r1, r0
    45ea:	2b95      	cmp	r3, #149	; 0x95
    45ec:	dc0b      	bgt.n	4606 <__aeabi_f2iz+0x36>
    45ee:	2096      	movs	r0, #150	; 0x96
    45f0:	1ac3      	subs	r3, r0, r3
    45f2:	40d9      	lsrs	r1, r3
    45f4:	000b      	movs	r3, r1
    45f6:	4258      	negs	r0, r3
    45f8:	2a00      	cmp	r2, #0
    45fa:	d100      	bne.n	45fe <__aeabi_f2iz+0x2e>
    45fc:	0018      	movs	r0, r3
    45fe:	4770      	bx	lr
    4600:	4b03      	ldr	r3, [pc, #12]	; (4610 <__aeabi_f2iz+0x40>)
    4602:	18d0      	adds	r0, r2, r3
    4604:	e7fb      	b.n	45fe <__aeabi_f2iz+0x2e>
    4606:	3b96      	subs	r3, #150	; 0x96
    4608:	4099      	lsls	r1, r3
    460a:	000b      	movs	r3, r1
    460c:	e7f3      	b.n	45f6 <__aeabi_f2iz+0x26>
    460e:	46c0      	nop			; (mov r8, r8)
    4610:	7fffffff 	.word	0x7fffffff

00004614 <__aeabi_i2f>:
    4614:	b570      	push	{r4, r5, r6, lr}
    4616:	2800      	cmp	r0, #0
    4618:	d030      	beq.n	467c <__aeabi_i2f+0x68>
    461a:	17c3      	asrs	r3, r0, #31
    461c:	18c5      	adds	r5, r0, r3
    461e:	405d      	eors	r5, r3
    4620:	0fc4      	lsrs	r4, r0, #31
    4622:	0028      	movs	r0, r5
    4624:	f001 ffd2 	bl	65cc <__clzsi2>
    4628:	239e      	movs	r3, #158	; 0x9e
    462a:	1a1b      	subs	r3, r3, r0
    462c:	2b96      	cmp	r3, #150	; 0x96
    462e:	dc0d      	bgt.n	464c <__aeabi_i2f+0x38>
    4630:	2296      	movs	r2, #150	; 0x96
    4632:	1ad2      	subs	r2, r2, r3
    4634:	4095      	lsls	r5, r2
    4636:	026a      	lsls	r2, r5, #9
    4638:	0a52      	lsrs	r2, r2, #9
    463a:	b2d8      	uxtb	r0, r3
    463c:	0252      	lsls	r2, r2, #9
    463e:	05c0      	lsls	r0, r0, #23
    4640:	0a52      	lsrs	r2, r2, #9
    4642:	07e4      	lsls	r4, r4, #31
    4644:	4302      	orrs	r2, r0
    4646:	4322      	orrs	r2, r4
    4648:	0010      	movs	r0, r2
    464a:	bd70      	pop	{r4, r5, r6, pc}
    464c:	2b99      	cmp	r3, #153	; 0x99
    464e:	dc19      	bgt.n	4684 <__aeabi_i2f+0x70>
    4650:	2299      	movs	r2, #153	; 0x99
    4652:	1ad2      	subs	r2, r2, r3
    4654:	4095      	lsls	r5, r2
    4656:	4a12      	ldr	r2, [pc, #72]	; (46a0 <__aeabi_i2f+0x8c>)
    4658:	402a      	ands	r2, r5
    465a:	0769      	lsls	r1, r5, #29
    465c:	d004      	beq.n	4668 <__aeabi_i2f+0x54>
    465e:	210f      	movs	r1, #15
    4660:	400d      	ands	r5, r1
    4662:	2d04      	cmp	r5, #4
    4664:	d000      	beq.n	4668 <__aeabi_i2f+0x54>
    4666:	3204      	adds	r2, #4
    4668:	0151      	lsls	r1, r2, #5
    466a:	d503      	bpl.n	4674 <__aeabi_i2f+0x60>
    466c:	4b0c      	ldr	r3, [pc, #48]	; (46a0 <__aeabi_i2f+0x8c>)
    466e:	401a      	ands	r2, r3
    4670:	239f      	movs	r3, #159	; 0x9f
    4672:	1a1b      	subs	r3, r3, r0
    4674:	0192      	lsls	r2, r2, #6
    4676:	0a52      	lsrs	r2, r2, #9
    4678:	b2d8      	uxtb	r0, r3
    467a:	e7df      	b.n	463c <__aeabi_i2f+0x28>
    467c:	2400      	movs	r4, #0
    467e:	2000      	movs	r0, #0
    4680:	2200      	movs	r2, #0
    4682:	e7db      	b.n	463c <__aeabi_i2f+0x28>
    4684:	2205      	movs	r2, #5
    4686:	002e      	movs	r6, r5
    4688:	1a12      	subs	r2, r2, r0
    468a:	21b9      	movs	r1, #185	; 0xb9
    468c:	40d6      	lsrs	r6, r2
    468e:	002a      	movs	r2, r5
    4690:	1ac9      	subs	r1, r1, r3
    4692:	408a      	lsls	r2, r1
    4694:	1e55      	subs	r5, r2, #1
    4696:	41aa      	sbcs	r2, r5
    4698:	0035      	movs	r5, r6
    469a:	4315      	orrs	r5, r2
    469c:	e7db      	b.n	4656 <__aeabi_i2f+0x42>
    469e:	46c0      	nop			; (mov r8, r8)
    46a0:	fbffffff 	.word	0xfbffffff

000046a4 <__aeabi_dadd>:
    46a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    46a6:	4656      	mov	r6, sl
    46a8:	465f      	mov	r7, fp
    46aa:	464d      	mov	r5, r9
    46ac:	4644      	mov	r4, r8
    46ae:	b4f0      	push	{r4, r5, r6, r7}
    46b0:	000f      	movs	r7, r1
    46b2:	0ffd      	lsrs	r5, r7, #31
    46b4:	46aa      	mov	sl, r5
    46b6:	0309      	lsls	r1, r1, #12
    46b8:	007c      	lsls	r4, r7, #1
    46ba:	002e      	movs	r6, r5
    46bc:	005f      	lsls	r7, r3, #1
    46be:	0f45      	lsrs	r5, r0, #29
    46c0:	0a49      	lsrs	r1, r1, #9
    46c2:	0d7f      	lsrs	r7, r7, #21
    46c4:	4329      	orrs	r1, r5
    46c6:	00c5      	lsls	r5, r0, #3
    46c8:	0318      	lsls	r0, r3, #12
    46ca:	46bc      	mov	ip, r7
    46cc:	0a40      	lsrs	r0, r0, #9
    46ce:	0f57      	lsrs	r7, r2, #29
    46d0:	0d64      	lsrs	r4, r4, #21
    46d2:	0fdb      	lsrs	r3, r3, #31
    46d4:	4338      	orrs	r0, r7
    46d6:	00d2      	lsls	r2, r2, #3
    46d8:	459a      	cmp	sl, r3
    46da:	d100      	bne.n	46de <__aeabi_dadd+0x3a>
    46dc:	e0aa      	b.n	4834 <__aeabi_dadd+0x190>
    46de:	4666      	mov	r6, ip
    46e0:	1ba6      	subs	r6, r4, r6
    46e2:	2e00      	cmp	r6, #0
    46e4:	dc00      	bgt.n	46e8 <__aeabi_dadd+0x44>
    46e6:	e0ff      	b.n	48e8 <__aeabi_dadd+0x244>
    46e8:	4663      	mov	r3, ip
    46ea:	2b00      	cmp	r3, #0
    46ec:	d139      	bne.n	4762 <__aeabi_dadd+0xbe>
    46ee:	0003      	movs	r3, r0
    46f0:	4313      	orrs	r3, r2
    46f2:	d000      	beq.n	46f6 <__aeabi_dadd+0x52>
    46f4:	e0d9      	b.n	48aa <__aeabi_dadd+0x206>
    46f6:	076b      	lsls	r3, r5, #29
    46f8:	d009      	beq.n	470e <__aeabi_dadd+0x6a>
    46fa:	230f      	movs	r3, #15
    46fc:	402b      	ands	r3, r5
    46fe:	2b04      	cmp	r3, #4
    4700:	d005      	beq.n	470e <__aeabi_dadd+0x6a>
    4702:	1d2b      	adds	r3, r5, #4
    4704:	42ab      	cmp	r3, r5
    4706:	41ad      	sbcs	r5, r5
    4708:	426d      	negs	r5, r5
    470a:	1949      	adds	r1, r1, r5
    470c:	001d      	movs	r5, r3
    470e:	020b      	lsls	r3, r1, #8
    4710:	d400      	bmi.n	4714 <__aeabi_dadd+0x70>
    4712:	e082      	b.n	481a <__aeabi_dadd+0x176>
    4714:	4bca      	ldr	r3, [pc, #808]	; (4a40 <__aeabi_dadd+0x39c>)
    4716:	3401      	adds	r4, #1
    4718:	429c      	cmp	r4, r3
    471a:	d100      	bne.n	471e <__aeabi_dadd+0x7a>
    471c:	e0fe      	b.n	491c <__aeabi_dadd+0x278>
    471e:	000a      	movs	r2, r1
    4720:	4656      	mov	r6, sl
    4722:	4bc8      	ldr	r3, [pc, #800]	; (4a44 <__aeabi_dadd+0x3a0>)
    4724:	08ed      	lsrs	r5, r5, #3
    4726:	401a      	ands	r2, r3
    4728:	0750      	lsls	r0, r2, #29
    472a:	0564      	lsls	r4, r4, #21
    472c:	0252      	lsls	r2, r2, #9
    472e:	4305      	orrs	r5, r0
    4730:	0b12      	lsrs	r2, r2, #12
    4732:	0d64      	lsrs	r4, r4, #21
    4734:	2100      	movs	r1, #0
    4736:	0312      	lsls	r2, r2, #12
    4738:	0d0b      	lsrs	r3, r1, #20
    473a:	051b      	lsls	r3, r3, #20
    473c:	0564      	lsls	r4, r4, #21
    473e:	0b12      	lsrs	r2, r2, #12
    4740:	431a      	orrs	r2, r3
    4742:	0863      	lsrs	r3, r4, #1
    4744:	4cc0      	ldr	r4, [pc, #768]	; (4a48 <__aeabi_dadd+0x3a4>)
    4746:	07f6      	lsls	r6, r6, #31
    4748:	4014      	ands	r4, r2
    474a:	431c      	orrs	r4, r3
    474c:	0064      	lsls	r4, r4, #1
    474e:	0864      	lsrs	r4, r4, #1
    4750:	4334      	orrs	r4, r6
    4752:	0028      	movs	r0, r5
    4754:	0021      	movs	r1, r4
    4756:	bc3c      	pop	{r2, r3, r4, r5}
    4758:	4690      	mov	r8, r2
    475a:	4699      	mov	r9, r3
    475c:	46a2      	mov	sl, r4
    475e:	46ab      	mov	fp, r5
    4760:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4762:	4bb7      	ldr	r3, [pc, #732]	; (4a40 <__aeabi_dadd+0x39c>)
    4764:	429c      	cmp	r4, r3
    4766:	d0c6      	beq.n	46f6 <__aeabi_dadd+0x52>
    4768:	2380      	movs	r3, #128	; 0x80
    476a:	041b      	lsls	r3, r3, #16
    476c:	4318      	orrs	r0, r3
    476e:	2e38      	cmp	r6, #56	; 0x38
    4770:	dd00      	ble.n	4774 <__aeabi_dadd+0xd0>
    4772:	e0eb      	b.n	494c <__aeabi_dadd+0x2a8>
    4774:	2e1f      	cmp	r6, #31
    4776:	dd00      	ble.n	477a <__aeabi_dadd+0xd6>
    4778:	e11e      	b.n	49b8 <__aeabi_dadd+0x314>
    477a:	2320      	movs	r3, #32
    477c:	1b9b      	subs	r3, r3, r6
    477e:	469c      	mov	ip, r3
    4780:	0003      	movs	r3, r0
    4782:	4667      	mov	r7, ip
    4784:	40bb      	lsls	r3, r7
    4786:	4698      	mov	r8, r3
    4788:	0013      	movs	r3, r2
    478a:	4647      	mov	r7, r8
    478c:	40f3      	lsrs	r3, r6
    478e:	433b      	orrs	r3, r7
    4790:	4667      	mov	r7, ip
    4792:	40ba      	lsls	r2, r7
    4794:	1e57      	subs	r7, r2, #1
    4796:	41ba      	sbcs	r2, r7
    4798:	4313      	orrs	r3, r2
    479a:	0002      	movs	r2, r0
    479c:	40f2      	lsrs	r2, r6
    479e:	1aeb      	subs	r3, r5, r3
    47a0:	429d      	cmp	r5, r3
    47a2:	41b6      	sbcs	r6, r6
    47a4:	001d      	movs	r5, r3
    47a6:	1a8a      	subs	r2, r1, r2
    47a8:	4276      	negs	r6, r6
    47aa:	1b91      	subs	r1, r2, r6
    47ac:	020b      	lsls	r3, r1, #8
    47ae:	d531      	bpl.n	4814 <__aeabi_dadd+0x170>
    47b0:	024a      	lsls	r2, r1, #9
    47b2:	0a56      	lsrs	r6, r2, #9
    47b4:	2e00      	cmp	r6, #0
    47b6:	d100      	bne.n	47ba <__aeabi_dadd+0x116>
    47b8:	e0b4      	b.n	4924 <__aeabi_dadd+0x280>
    47ba:	0030      	movs	r0, r6
    47bc:	f001 ff06 	bl	65cc <__clzsi2>
    47c0:	0003      	movs	r3, r0
    47c2:	3b08      	subs	r3, #8
    47c4:	2b1f      	cmp	r3, #31
    47c6:	dd00      	ble.n	47ca <__aeabi_dadd+0x126>
    47c8:	e0b5      	b.n	4936 <__aeabi_dadd+0x292>
    47ca:	2220      	movs	r2, #32
    47cc:	0029      	movs	r1, r5
    47ce:	1ad2      	subs	r2, r2, r3
    47d0:	40d1      	lsrs	r1, r2
    47d2:	409e      	lsls	r6, r3
    47d4:	000a      	movs	r2, r1
    47d6:	409d      	lsls	r5, r3
    47d8:	4332      	orrs	r2, r6
    47da:	429c      	cmp	r4, r3
    47dc:	dd00      	ble.n	47e0 <__aeabi_dadd+0x13c>
    47de:	e0b1      	b.n	4944 <__aeabi_dadd+0x2a0>
    47e0:	1b1c      	subs	r4, r3, r4
    47e2:	1c63      	adds	r3, r4, #1
    47e4:	2b1f      	cmp	r3, #31
    47e6:	dd00      	ble.n	47ea <__aeabi_dadd+0x146>
    47e8:	e0d5      	b.n	4996 <__aeabi_dadd+0x2f2>
    47ea:	2120      	movs	r1, #32
    47ec:	0014      	movs	r4, r2
    47ee:	0028      	movs	r0, r5
    47f0:	1ac9      	subs	r1, r1, r3
    47f2:	408c      	lsls	r4, r1
    47f4:	40d8      	lsrs	r0, r3
    47f6:	408d      	lsls	r5, r1
    47f8:	4304      	orrs	r4, r0
    47fa:	40da      	lsrs	r2, r3
    47fc:	1e68      	subs	r0, r5, #1
    47fe:	4185      	sbcs	r5, r0
    4800:	0011      	movs	r1, r2
    4802:	4325      	orrs	r5, r4
    4804:	2400      	movs	r4, #0
    4806:	e776      	b.n	46f6 <__aeabi_dadd+0x52>
    4808:	4641      	mov	r1, r8
    480a:	4331      	orrs	r1, r6
    480c:	d100      	bne.n	4810 <__aeabi_dadd+0x16c>
    480e:	e234      	b.n	4c7a <__aeabi_dadd+0x5d6>
    4810:	0031      	movs	r1, r6
    4812:	4645      	mov	r5, r8
    4814:	076b      	lsls	r3, r5, #29
    4816:	d000      	beq.n	481a <__aeabi_dadd+0x176>
    4818:	e76f      	b.n	46fa <__aeabi_dadd+0x56>
    481a:	4656      	mov	r6, sl
    481c:	0748      	lsls	r0, r1, #29
    481e:	08ed      	lsrs	r5, r5, #3
    4820:	08c9      	lsrs	r1, r1, #3
    4822:	4305      	orrs	r5, r0
    4824:	4b86      	ldr	r3, [pc, #536]	; (4a40 <__aeabi_dadd+0x39c>)
    4826:	429c      	cmp	r4, r3
    4828:	d035      	beq.n	4896 <__aeabi_dadd+0x1f2>
    482a:	030a      	lsls	r2, r1, #12
    482c:	0564      	lsls	r4, r4, #21
    482e:	0b12      	lsrs	r2, r2, #12
    4830:	0d64      	lsrs	r4, r4, #21
    4832:	e77f      	b.n	4734 <__aeabi_dadd+0x90>
    4834:	4663      	mov	r3, ip
    4836:	1ae3      	subs	r3, r4, r3
    4838:	469b      	mov	fp, r3
    483a:	2b00      	cmp	r3, #0
    483c:	dc00      	bgt.n	4840 <__aeabi_dadd+0x19c>
    483e:	e08b      	b.n	4958 <__aeabi_dadd+0x2b4>
    4840:	4667      	mov	r7, ip
    4842:	2f00      	cmp	r7, #0
    4844:	d03c      	beq.n	48c0 <__aeabi_dadd+0x21c>
    4846:	4f7e      	ldr	r7, [pc, #504]	; (4a40 <__aeabi_dadd+0x39c>)
    4848:	42bc      	cmp	r4, r7
    484a:	d100      	bne.n	484e <__aeabi_dadd+0x1aa>
    484c:	e753      	b.n	46f6 <__aeabi_dadd+0x52>
    484e:	2780      	movs	r7, #128	; 0x80
    4850:	043f      	lsls	r7, r7, #16
    4852:	4338      	orrs	r0, r7
    4854:	465b      	mov	r3, fp
    4856:	2b38      	cmp	r3, #56	; 0x38
    4858:	dc00      	bgt.n	485c <__aeabi_dadd+0x1b8>
    485a:	e0f7      	b.n	4a4c <__aeabi_dadd+0x3a8>
    485c:	4302      	orrs	r2, r0
    485e:	1e50      	subs	r0, r2, #1
    4860:	4182      	sbcs	r2, r0
    4862:	2000      	movs	r0, #0
    4864:	b2d2      	uxtb	r2, r2
    4866:	1953      	adds	r3, r2, r5
    4868:	1842      	adds	r2, r0, r1
    486a:	42ab      	cmp	r3, r5
    486c:	4189      	sbcs	r1, r1
    486e:	001d      	movs	r5, r3
    4870:	4249      	negs	r1, r1
    4872:	1889      	adds	r1, r1, r2
    4874:	020b      	lsls	r3, r1, #8
    4876:	d5cd      	bpl.n	4814 <__aeabi_dadd+0x170>
    4878:	4b71      	ldr	r3, [pc, #452]	; (4a40 <__aeabi_dadd+0x39c>)
    487a:	3401      	adds	r4, #1
    487c:	429c      	cmp	r4, r3
    487e:	d100      	bne.n	4882 <__aeabi_dadd+0x1de>
    4880:	e13d      	b.n	4afe <__aeabi_dadd+0x45a>
    4882:	2001      	movs	r0, #1
    4884:	4a6f      	ldr	r2, [pc, #444]	; (4a44 <__aeabi_dadd+0x3a0>)
    4886:	086b      	lsrs	r3, r5, #1
    4888:	400a      	ands	r2, r1
    488a:	4028      	ands	r0, r5
    488c:	4318      	orrs	r0, r3
    488e:	07d5      	lsls	r5, r2, #31
    4890:	4305      	orrs	r5, r0
    4892:	0851      	lsrs	r1, r2, #1
    4894:	e72f      	b.n	46f6 <__aeabi_dadd+0x52>
    4896:	002b      	movs	r3, r5
    4898:	430b      	orrs	r3, r1
    489a:	d100      	bne.n	489e <__aeabi_dadd+0x1fa>
    489c:	e1cb      	b.n	4c36 <__aeabi_dadd+0x592>
    489e:	2380      	movs	r3, #128	; 0x80
    48a0:	031b      	lsls	r3, r3, #12
    48a2:	430b      	orrs	r3, r1
    48a4:	031a      	lsls	r2, r3, #12
    48a6:	0b12      	lsrs	r2, r2, #12
    48a8:	e744      	b.n	4734 <__aeabi_dadd+0x90>
    48aa:	3e01      	subs	r6, #1
    48ac:	2e00      	cmp	r6, #0
    48ae:	d16d      	bne.n	498c <__aeabi_dadd+0x2e8>
    48b0:	1aae      	subs	r6, r5, r2
    48b2:	42b5      	cmp	r5, r6
    48b4:	419b      	sbcs	r3, r3
    48b6:	1a09      	subs	r1, r1, r0
    48b8:	425b      	negs	r3, r3
    48ba:	1ac9      	subs	r1, r1, r3
    48bc:	0035      	movs	r5, r6
    48be:	e775      	b.n	47ac <__aeabi_dadd+0x108>
    48c0:	0007      	movs	r7, r0
    48c2:	4317      	orrs	r7, r2
    48c4:	d100      	bne.n	48c8 <__aeabi_dadd+0x224>
    48c6:	e716      	b.n	46f6 <__aeabi_dadd+0x52>
    48c8:	2301      	movs	r3, #1
    48ca:	425b      	negs	r3, r3
    48cc:	469c      	mov	ip, r3
    48ce:	44e3      	add	fp, ip
    48d0:	465b      	mov	r3, fp
    48d2:	2b00      	cmp	r3, #0
    48d4:	d000      	beq.n	48d8 <__aeabi_dadd+0x234>
    48d6:	e0e0      	b.n	4a9a <__aeabi_dadd+0x3f6>
    48d8:	18aa      	adds	r2, r5, r2
    48da:	42aa      	cmp	r2, r5
    48dc:	419b      	sbcs	r3, r3
    48de:	1809      	adds	r1, r1, r0
    48e0:	425b      	negs	r3, r3
    48e2:	1859      	adds	r1, r3, r1
    48e4:	0015      	movs	r5, r2
    48e6:	e7c5      	b.n	4874 <__aeabi_dadd+0x1d0>
    48e8:	2e00      	cmp	r6, #0
    48ea:	d175      	bne.n	49d8 <__aeabi_dadd+0x334>
    48ec:	1c66      	adds	r6, r4, #1
    48ee:	0576      	lsls	r6, r6, #21
    48f0:	0d76      	lsrs	r6, r6, #21
    48f2:	2e01      	cmp	r6, #1
    48f4:	dc00      	bgt.n	48f8 <__aeabi_dadd+0x254>
    48f6:	e0f3      	b.n	4ae0 <__aeabi_dadd+0x43c>
    48f8:	1aae      	subs	r6, r5, r2
    48fa:	46b0      	mov	r8, r6
    48fc:	4545      	cmp	r5, r8
    48fe:	41bf      	sbcs	r7, r7
    4900:	1a0e      	subs	r6, r1, r0
    4902:	427f      	negs	r7, r7
    4904:	1bf6      	subs	r6, r6, r7
    4906:	0237      	lsls	r7, r6, #8
    4908:	d400      	bmi.n	490c <__aeabi_dadd+0x268>
    490a:	e08f      	b.n	4a2c <__aeabi_dadd+0x388>
    490c:	1b55      	subs	r5, r2, r5
    490e:	42aa      	cmp	r2, r5
    4910:	41b6      	sbcs	r6, r6
    4912:	1a41      	subs	r1, r0, r1
    4914:	4276      	negs	r6, r6
    4916:	1b8e      	subs	r6, r1, r6
    4918:	469a      	mov	sl, r3
    491a:	e74b      	b.n	47b4 <__aeabi_dadd+0x110>
    491c:	4656      	mov	r6, sl
    491e:	2200      	movs	r2, #0
    4920:	2500      	movs	r5, #0
    4922:	e707      	b.n	4734 <__aeabi_dadd+0x90>
    4924:	0028      	movs	r0, r5
    4926:	f001 fe51 	bl	65cc <__clzsi2>
    492a:	3020      	adds	r0, #32
    492c:	0003      	movs	r3, r0
    492e:	3b08      	subs	r3, #8
    4930:	2b1f      	cmp	r3, #31
    4932:	dc00      	bgt.n	4936 <__aeabi_dadd+0x292>
    4934:	e749      	b.n	47ca <__aeabi_dadd+0x126>
    4936:	002a      	movs	r2, r5
    4938:	3828      	subs	r0, #40	; 0x28
    493a:	4082      	lsls	r2, r0
    493c:	2500      	movs	r5, #0
    493e:	429c      	cmp	r4, r3
    4940:	dc00      	bgt.n	4944 <__aeabi_dadd+0x2a0>
    4942:	e74d      	b.n	47e0 <__aeabi_dadd+0x13c>
    4944:	493f      	ldr	r1, [pc, #252]	; (4a44 <__aeabi_dadd+0x3a0>)
    4946:	1ae4      	subs	r4, r4, r3
    4948:	4011      	ands	r1, r2
    494a:	e6d4      	b.n	46f6 <__aeabi_dadd+0x52>
    494c:	4302      	orrs	r2, r0
    494e:	1e50      	subs	r0, r2, #1
    4950:	4182      	sbcs	r2, r0
    4952:	b2d3      	uxtb	r3, r2
    4954:	2200      	movs	r2, #0
    4956:	e722      	b.n	479e <__aeabi_dadd+0xfa>
    4958:	2b00      	cmp	r3, #0
    495a:	d000      	beq.n	495e <__aeabi_dadd+0x2ba>
    495c:	e0f3      	b.n	4b46 <__aeabi_dadd+0x4a2>
    495e:	1c63      	adds	r3, r4, #1
    4960:	469c      	mov	ip, r3
    4962:	055b      	lsls	r3, r3, #21
    4964:	0d5b      	lsrs	r3, r3, #21
    4966:	2b01      	cmp	r3, #1
    4968:	dc00      	bgt.n	496c <__aeabi_dadd+0x2c8>
    496a:	e09f      	b.n	4aac <__aeabi_dadd+0x408>
    496c:	4b34      	ldr	r3, [pc, #208]	; (4a40 <__aeabi_dadd+0x39c>)
    496e:	459c      	cmp	ip, r3
    4970:	d100      	bne.n	4974 <__aeabi_dadd+0x2d0>
    4972:	e0c3      	b.n	4afc <__aeabi_dadd+0x458>
    4974:	18aa      	adds	r2, r5, r2
    4976:	1809      	adds	r1, r1, r0
    4978:	42aa      	cmp	r2, r5
    497a:	4180      	sbcs	r0, r0
    497c:	4240      	negs	r0, r0
    497e:	1841      	adds	r1, r0, r1
    4980:	07cd      	lsls	r5, r1, #31
    4982:	0852      	lsrs	r2, r2, #1
    4984:	4315      	orrs	r5, r2
    4986:	0849      	lsrs	r1, r1, #1
    4988:	4664      	mov	r4, ip
    498a:	e6b4      	b.n	46f6 <__aeabi_dadd+0x52>
    498c:	4b2c      	ldr	r3, [pc, #176]	; (4a40 <__aeabi_dadd+0x39c>)
    498e:	429c      	cmp	r4, r3
    4990:	d000      	beq.n	4994 <__aeabi_dadd+0x2f0>
    4992:	e6ec      	b.n	476e <__aeabi_dadd+0xca>
    4994:	e6af      	b.n	46f6 <__aeabi_dadd+0x52>
    4996:	0011      	movs	r1, r2
    4998:	3c1f      	subs	r4, #31
    499a:	40e1      	lsrs	r1, r4
    499c:	000c      	movs	r4, r1
    499e:	2b20      	cmp	r3, #32
    49a0:	d100      	bne.n	49a4 <__aeabi_dadd+0x300>
    49a2:	e07f      	b.n	4aa4 <__aeabi_dadd+0x400>
    49a4:	2140      	movs	r1, #64	; 0x40
    49a6:	1acb      	subs	r3, r1, r3
    49a8:	409a      	lsls	r2, r3
    49aa:	4315      	orrs	r5, r2
    49ac:	1e6a      	subs	r2, r5, #1
    49ae:	4195      	sbcs	r5, r2
    49b0:	2100      	movs	r1, #0
    49b2:	4325      	orrs	r5, r4
    49b4:	2400      	movs	r4, #0
    49b6:	e72d      	b.n	4814 <__aeabi_dadd+0x170>
    49b8:	0033      	movs	r3, r6
    49ba:	0007      	movs	r7, r0
    49bc:	3b20      	subs	r3, #32
    49be:	40df      	lsrs	r7, r3
    49c0:	003b      	movs	r3, r7
    49c2:	2e20      	cmp	r6, #32
    49c4:	d070      	beq.n	4aa8 <__aeabi_dadd+0x404>
    49c6:	2740      	movs	r7, #64	; 0x40
    49c8:	1bbe      	subs	r6, r7, r6
    49ca:	40b0      	lsls	r0, r6
    49cc:	4302      	orrs	r2, r0
    49ce:	1e50      	subs	r0, r2, #1
    49d0:	4182      	sbcs	r2, r0
    49d2:	4313      	orrs	r3, r2
    49d4:	2200      	movs	r2, #0
    49d6:	e6e2      	b.n	479e <__aeabi_dadd+0xfa>
    49d8:	2c00      	cmp	r4, #0
    49da:	d04f      	beq.n	4a7c <__aeabi_dadd+0x3d8>
    49dc:	4c18      	ldr	r4, [pc, #96]	; (4a40 <__aeabi_dadd+0x39c>)
    49de:	45a4      	cmp	ip, r4
    49e0:	d100      	bne.n	49e4 <__aeabi_dadd+0x340>
    49e2:	e0ab      	b.n	4b3c <__aeabi_dadd+0x498>
    49e4:	2480      	movs	r4, #128	; 0x80
    49e6:	0424      	lsls	r4, r4, #16
    49e8:	4276      	negs	r6, r6
    49ea:	4321      	orrs	r1, r4
    49ec:	2e38      	cmp	r6, #56	; 0x38
    49ee:	dd00      	ble.n	49f2 <__aeabi_dadd+0x34e>
    49f0:	e0df      	b.n	4bb2 <__aeabi_dadd+0x50e>
    49f2:	2e1f      	cmp	r6, #31
    49f4:	dd00      	ble.n	49f8 <__aeabi_dadd+0x354>
    49f6:	e143      	b.n	4c80 <__aeabi_dadd+0x5dc>
    49f8:	2720      	movs	r7, #32
    49fa:	1bbc      	subs	r4, r7, r6
    49fc:	46a1      	mov	r9, r4
    49fe:	000c      	movs	r4, r1
    4a00:	464f      	mov	r7, r9
    4a02:	40bc      	lsls	r4, r7
    4a04:	46a0      	mov	r8, r4
    4a06:	002c      	movs	r4, r5
    4a08:	4647      	mov	r7, r8
    4a0a:	40f4      	lsrs	r4, r6
    4a0c:	433c      	orrs	r4, r7
    4a0e:	464f      	mov	r7, r9
    4a10:	40bd      	lsls	r5, r7
    4a12:	1e6f      	subs	r7, r5, #1
    4a14:	41bd      	sbcs	r5, r7
    4a16:	40f1      	lsrs	r1, r6
    4a18:	432c      	orrs	r4, r5
    4a1a:	1b15      	subs	r5, r2, r4
    4a1c:	42aa      	cmp	r2, r5
    4a1e:	4192      	sbcs	r2, r2
    4a20:	1a41      	subs	r1, r0, r1
    4a22:	4252      	negs	r2, r2
    4a24:	1a89      	subs	r1, r1, r2
    4a26:	4664      	mov	r4, ip
    4a28:	469a      	mov	sl, r3
    4a2a:	e6bf      	b.n	47ac <__aeabi_dadd+0x108>
    4a2c:	4641      	mov	r1, r8
    4a2e:	4645      	mov	r5, r8
    4a30:	4331      	orrs	r1, r6
    4a32:	d000      	beq.n	4a36 <__aeabi_dadd+0x392>
    4a34:	e6be      	b.n	47b4 <__aeabi_dadd+0x110>
    4a36:	2600      	movs	r6, #0
    4a38:	2400      	movs	r4, #0
    4a3a:	2500      	movs	r5, #0
    4a3c:	e6f2      	b.n	4824 <__aeabi_dadd+0x180>
    4a3e:	46c0      	nop			; (mov r8, r8)
    4a40:	000007ff 	.word	0x000007ff
    4a44:	ff7fffff 	.word	0xff7fffff
    4a48:	800fffff 	.word	0x800fffff
    4a4c:	2b1f      	cmp	r3, #31
    4a4e:	dc59      	bgt.n	4b04 <__aeabi_dadd+0x460>
    4a50:	2720      	movs	r7, #32
    4a52:	1aff      	subs	r7, r7, r3
    4a54:	46bc      	mov	ip, r7
    4a56:	0007      	movs	r7, r0
    4a58:	4663      	mov	r3, ip
    4a5a:	409f      	lsls	r7, r3
    4a5c:	465b      	mov	r3, fp
    4a5e:	46b9      	mov	r9, r7
    4a60:	0017      	movs	r7, r2
    4a62:	40df      	lsrs	r7, r3
    4a64:	46b8      	mov	r8, r7
    4a66:	464f      	mov	r7, r9
    4a68:	4643      	mov	r3, r8
    4a6a:	431f      	orrs	r7, r3
    4a6c:	4663      	mov	r3, ip
    4a6e:	409a      	lsls	r2, r3
    4a70:	1e53      	subs	r3, r2, #1
    4a72:	419a      	sbcs	r2, r3
    4a74:	465b      	mov	r3, fp
    4a76:	433a      	orrs	r2, r7
    4a78:	40d8      	lsrs	r0, r3
    4a7a:	e6f4      	b.n	4866 <__aeabi_dadd+0x1c2>
    4a7c:	000c      	movs	r4, r1
    4a7e:	432c      	orrs	r4, r5
    4a80:	d05c      	beq.n	4b3c <__aeabi_dadd+0x498>
    4a82:	43f6      	mvns	r6, r6
    4a84:	2e00      	cmp	r6, #0
    4a86:	d155      	bne.n	4b34 <__aeabi_dadd+0x490>
    4a88:	1b55      	subs	r5, r2, r5
    4a8a:	42aa      	cmp	r2, r5
    4a8c:	41a4      	sbcs	r4, r4
    4a8e:	1a41      	subs	r1, r0, r1
    4a90:	4264      	negs	r4, r4
    4a92:	1b09      	subs	r1, r1, r4
    4a94:	469a      	mov	sl, r3
    4a96:	4664      	mov	r4, ip
    4a98:	e688      	b.n	47ac <__aeabi_dadd+0x108>
    4a9a:	4f96      	ldr	r7, [pc, #600]	; (4cf4 <__aeabi_dadd+0x650>)
    4a9c:	42bc      	cmp	r4, r7
    4a9e:	d000      	beq.n	4aa2 <__aeabi_dadd+0x3fe>
    4aa0:	e6d8      	b.n	4854 <__aeabi_dadd+0x1b0>
    4aa2:	e628      	b.n	46f6 <__aeabi_dadd+0x52>
    4aa4:	2200      	movs	r2, #0
    4aa6:	e780      	b.n	49aa <__aeabi_dadd+0x306>
    4aa8:	2000      	movs	r0, #0
    4aaa:	e78f      	b.n	49cc <__aeabi_dadd+0x328>
    4aac:	000b      	movs	r3, r1
    4aae:	432b      	orrs	r3, r5
    4ab0:	2c00      	cmp	r4, #0
    4ab2:	d000      	beq.n	4ab6 <__aeabi_dadd+0x412>
    4ab4:	e0c2      	b.n	4c3c <__aeabi_dadd+0x598>
    4ab6:	2b00      	cmp	r3, #0
    4ab8:	d100      	bne.n	4abc <__aeabi_dadd+0x418>
    4aba:	e101      	b.n	4cc0 <__aeabi_dadd+0x61c>
    4abc:	0003      	movs	r3, r0
    4abe:	4313      	orrs	r3, r2
    4ac0:	d100      	bne.n	4ac4 <__aeabi_dadd+0x420>
    4ac2:	e618      	b.n	46f6 <__aeabi_dadd+0x52>
    4ac4:	18ab      	adds	r3, r5, r2
    4ac6:	42ab      	cmp	r3, r5
    4ac8:	41b6      	sbcs	r6, r6
    4aca:	1809      	adds	r1, r1, r0
    4acc:	4276      	negs	r6, r6
    4ace:	1871      	adds	r1, r6, r1
    4ad0:	020a      	lsls	r2, r1, #8
    4ad2:	d400      	bmi.n	4ad6 <__aeabi_dadd+0x432>
    4ad4:	e109      	b.n	4cea <__aeabi_dadd+0x646>
    4ad6:	4a88      	ldr	r2, [pc, #544]	; (4cf8 <__aeabi_dadd+0x654>)
    4ad8:	001d      	movs	r5, r3
    4ada:	4011      	ands	r1, r2
    4adc:	4664      	mov	r4, ip
    4ade:	e60a      	b.n	46f6 <__aeabi_dadd+0x52>
    4ae0:	2c00      	cmp	r4, #0
    4ae2:	d15b      	bne.n	4b9c <__aeabi_dadd+0x4f8>
    4ae4:	000e      	movs	r6, r1
    4ae6:	432e      	orrs	r6, r5
    4ae8:	d000      	beq.n	4aec <__aeabi_dadd+0x448>
    4aea:	e08a      	b.n	4c02 <__aeabi_dadd+0x55e>
    4aec:	0001      	movs	r1, r0
    4aee:	4311      	orrs	r1, r2
    4af0:	d100      	bne.n	4af4 <__aeabi_dadd+0x450>
    4af2:	e0c2      	b.n	4c7a <__aeabi_dadd+0x5d6>
    4af4:	0001      	movs	r1, r0
    4af6:	0015      	movs	r5, r2
    4af8:	469a      	mov	sl, r3
    4afa:	e5fc      	b.n	46f6 <__aeabi_dadd+0x52>
    4afc:	4664      	mov	r4, ip
    4afe:	2100      	movs	r1, #0
    4b00:	2500      	movs	r5, #0
    4b02:	e68f      	b.n	4824 <__aeabi_dadd+0x180>
    4b04:	2320      	movs	r3, #32
    4b06:	425b      	negs	r3, r3
    4b08:	469c      	mov	ip, r3
    4b0a:	44dc      	add	ip, fp
    4b0c:	4663      	mov	r3, ip
    4b0e:	0007      	movs	r7, r0
    4b10:	40df      	lsrs	r7, r3
    4b12:	465b      	mov	r3, fp
    4b14:	46bc      	mov	ip, r7
    4b16:	2b20      	cmp	r3, #32
    4b18:	d100      	bne.n	4b1c <__aeabi_dadd+0x478>
    4b1a:	e0ac      	b.n	4c76 <__aeabi_dadd+0x5d2>
    4b1c:	2340      	movs	r3, #64	; 0x40
    4b1e:	465f      	mov	r7, fp
    4b20:	1bdb      	subs	r3, r3, r7
    4b22:	4098      	lsls	r0, r3
    4b24:	4302      	orrs	r2, r0
    4b26:	1e50      	subs	r0, r2, #1
    4b28:	4182      	sbcs	r2, r0
    4b2a:	4663      	mov	r3, ip
    4b2c:	4313      	orrs	r3, r2
    4b2e:	001a      	movs	r2, r3
    4b30:	2000      	movs	r0, #0
    4b32:	e698      	b.n	4866 <__aeabi_dadd+0x1c2>
    4b34:	4c6f      	ldr	r4, [pc, #444]	; (4cf4 <__aeabi_dadd+0x650>)
    4b36:	45a4      	cmp	ip, r4
    4b38:	d000      	beq.n	4b3c <__aeabi_dadd+0x498>
    4b3a:	e757      	b.n	49ec <__aeabi_dadd+0x348>
    4b3c:	0001      	movs	r1, r0
    4b3e:	0015      	movs	r5, r2
    4b40:	4664      	mov	r4, ip
    4b42:	469a      	mov	sl, r3
    4b44:	e5d7      	b.n	46f6 <__aeabi_dadd+0x52>
    4b46:	2c00      	cmp	r4, #0
    4b48:	d139      	bne.n	4bbe <__aeabi_dadd+0x51a>
    4b4a:	000c      	movs	r4, r1
    4b4c:	432c      	orrs	r4, r5
    4b4e:	d06e      	beq.n	4c2e <__aeabi_dadd+0x58a>
    4b50:	43db      	mvns	r3, r3
    4b52:	2b00      	cmp	r3, #0
    4b54:	d01a      	beq.n	4b8c <__aeabi_dadd+0x4e8>
    4b56:	4c67      	ldr	r4, [pc, #412]	; (4cf4 <__aeabi_dadd+0x650>)
    4b58:	45a4      	cmp	ip, r4
    4b5a:	d068      	beq.n	4c2e <__aeabi_dadd+0x58a>
    4b5c:	2b38      	cmp	r3, #56	; 0x38
    4b5e:	dd00      	ble.n	4b62 <__aeabi_dadd+0x4be>
    4b60:	e0a4      	b.n	4cac <__aeabi_dadd+0x608>
    4b62:	2b1f      	cmp	r3, #31
    4b64:	dd00      	ble.n	4b68 <__aeabi_dadd+0x4c4>
    4b66:	e0ae      	b.n	4cc6 <__aeabi_dadd+0x622>
    4b68:	2420      	movs	r4, #32
    4b6a:	000f      	movs	r7, r1
    4b6c:	1ae4      	subs	r4, r4, r3
    4b6e:	40a7      	lsls	r7, r4
    4b70:	46b9      	mov	r9, r7
    4b72:	002f      	movs	r7, r5
    4b74:	40df      	lsrs	r7, r3
    4b76:	46b8      	mov	r8, r7
    4b78:	46a3      	mov	fp, r4
    4b7a:	464f      	mov	r7, r9
    4b7c:	4644      	mov	r4, r8
    4b7e:	4327      	orrs	r7, r4
    4b80:	465c      	mov	r4, fp
    4b82:	40a5      	lsls	r5, r4
    4b84:	1e6c      	subs	r4, r5, #1
    4b86:	41a5      	sbcs	r5, r4
    4b88:	40d9      	lsrs	r1, r3
    4b8a:	433d      	orrs	r5, r7
    4b8c:	18ad      	adds	r5, r5, r2
    4b8e:	4295      	cmp	r5, r2
    4b90:	419b      	sbcs	r3, r3
    4b92:	1809      	adds	r1, r1, r0
    4b94:	425b      	negs	r3, r3
    4b96:	1859      	adds	r1, r3, r1
    4b98:	4664      	mov	r4, ip
    4b9a:	e66b      	b.n	4874 <__aeabi_dadd+0x1d0>
    4b9c:	000c      	movs	r4, r1
    4b9e:	432c      	orrs	r4, r5
    4ba0:	d115      	bne.n	4bce <__aeabi_dadd+0x52a>
    4ba2:	0001      	movs	r1, r0
    4ba4:	4311      	orrs	r1, r2
    4ba6:	d07b      	beq.n	4ca0 <__aeabi_dadd+0x5fc>
    4ba8:	0001      	movs	r1, r0
    4baa:	0015      	movs	r5, r2
    4bac:	469a      	mov	sl, r3
    4bae:	4c51      	ldr	r4, [pc, #324]	; (4cf4 <__aeabi_dadd+0x650>)
    4bb0:	e5a1      	b.n	46f6 <__aeabi_dadd+0x52>
    4bb2:	430d      	orrs	r5, r1
    4bb4:	1e69      	subs	r1, r5, #1
    4bb6:	418d      	sbcs	r5, r1
    4bb8:	2100      	movs	r1, #0
    4bba:	b2ec      	uxtb	r4, r5
    4bbc:	e72d      	b.n	4a1a <__aeabi_dadd+0x376>
    4bbe:	4c4d      	ldr	r4, [pc, #308]	; (4cf4 <__aeabi_dadd+0x650>)
    4bc0:	45a4      	cmp	ip, r4
    4bc2:	d034      	beq.n	4c2e <__aeabi_dadd+0x58a>
    4bc4:	2480      	movs	r4, #128	; 0x80
    4bc6:	0424      	lsls	r4, r4, #16
    4bc8:	425b      	negs	r3, r3
    4bca:	4321      	orrs	r1, r4
    4bcc:	e7c6      	b.n	4b5c <__aeabi_dadd+0x4b8>
    4bce:	0004      	movs	r4, r0
    4bd0:	4314      	orrs	r4, r2
    4bd2:	d04e      	beq.n	4c72 <__aeabi_dadd+0x5ce>
    4bd4:	08ed      	lsrs	r5, r5, #3
    4bd6:	074c      	lsls	r4, r1, #29
    4bd8:	432c      	orrs	r4, r5
    4bda:	2580      	movs	r5, #128	; 0x80
    4bdc:	08c9      	lsrs	r1, r1, #3
    4bde:	032d      	lsls	r5, r5, #12
    4be0:	4229      	tst	r1, r5
    4be2:	d008      	beq.n	4bf6 <__aeabi_dadd+0x552>
    4be4:	08c6      	lsrs	r6, r0, #3
    4be6:	422e      	tst	r6, r5
    4be8:	d105      	bne.n	4bf6 <__aeabi_dadd+0x552>
    4bea:	08d2      	lsrs	r2, r2, #3
    4bec:	0741      	lsls	r1, r0, #29
    4bee:	4311      	orrs	r1, r2
    4bf0:	000c      	movs	r4, r1
    4bf2:	469a      	mov	sl, r3
    4bf4:	0031      	movs	r1, r6
    4bf6:	0f62      	lsrs	r2, r4, #29
    4bf8:	00c9      	lsls	r1, r1, #3
    4bfa:	00e5      	lsls	r5, r4, #3
    4bfc:	4311      	orrs	r1, r2
    4bfe:	4c3d      	ldr	r4, [pc, #244]	; (4cf4 <__aeabi_dadd+0x650>)
    4c00:	e579      	b.n	46f6 <__aeabi_dadd+0x52>
    4c02:	0006      	movs	r6, r0
    4c04:	4316      	orrs	r6, r2
    4c06:	d100      	bne.n	4c0a <__aeabi_dadd+0x566>
    4c08:	e575      	b.n	46f6 <__aeabi_dadd+0x52>
    4c0a:	1aae      	subs	r6, r5, r2
    4c0c:	46b0      	mov	r8, r6
    4c0e:	4545      	cmp	r5, r8
    4c10:	41bf      	sbcs	r7, r7
    4c12:	1a0e      	subs	r6, r1, r0
    4c14:	427f      	negs	r7, r7
    4c16:	1bf6      	subs	r6, r6, r7
    4c18:	0237      	lsls	r7, r6, #8
    4c1a:	d400      	bmi.n	4c1e <__aeabi_dadd+0x57a>
    4c1c:	e5f4      	b.n	4808 <__aeabi_dadd+0x164>
    4c1e:	1b55      	subs	r5, r2, r5
    4c20:	42aa      	cmp	r2, r5
    4c22:	41b6      	sbcs	r6, r6
    4c24:	1a41      	subs	r1, r0, r1
    4c26:	4276      	negs	r6, r6
    4c28:	1b89      	subs	r1, r1, r6
    4c2a:	469a      	mov	sl, r3
    4c2c:	e563      	b.n	46f6 <__aeabi_dadd+0x52>
    4c2e:	0001      	movs	r1, r0
    4c30:	0015      	movs	r5, r2
    4c32:	4664      	mov	r4, ip
    4c34:	e55f      	b.n	46f6 <__aeabi_dadd+0x52>
    4c36:	2200      	movs	r2, #0
    4c38:	2500      	movs	r5, #0
    4c3a:	e57b      	b.n	4734 <__aeabi_dadd+0x90>
    4c3c:	2b00      	cmp	r3, #0
    4c3e:	d03b      	beq.n	4cb8 <__aeabi_dadd+0x614>
    4c40:	0003      	movs	r3, r0
    4c42:	4313      	orrs	r3, r2
    4c44:	d015      	beq.n	4c72 <__aeabi_dadd+0x5ce>
    4c46:	08ed      	lsrs	r5, r5, #3
    4c48:	074b      	lsls	r3, r1, #29
    4c4a:	432b      	orrs	r3, r5
    4c4c:	2580      	movs	r5, #128	; 0x80
    4c4e:	08c9      	lsrs	r1, r1, #3
    4c50:	032d      	lsls	r5, r5, #12
    4c52:	4229      	tst	r1, r5
    4c54:	d007      	beq.n	4c66 <__aeabi_dadd+0x5c2>
    4c56:	08c4      	lsrs	r4, r0, #3
    4c58:	422c      	tst	r4, r5
    4c5a:	d104      	bne.n	4c66 <__aeabi_dadd+0x5c2>
    4c5c:	0741      	lsls	r1, r0, #29
    4c5e:	000b      	movs	r3, r1
    4c60:	0021      	movs	r1, r4
    4c62:	08d2      	lsrs	r2, r2, #3
    4c64:	4313      	orrs	r3, r2
    4c66:	00c9      	lsls	r1, r1, #3
    4c68:	0f5a      	lsrs	r2, r3, #29
    4c6a:	4311      	orrs	r1, r2
    4c6c:	00dd      	lsls	r5, r3, #3
    4c6e:	4c21      	ldr	r4, [pc, #132]	; (4cf4 <__aeabi_dadd+0x650>)
    4c70:	e541      	b.n	46f6 <__aeabi_dadd+0x52>
    4c72:	4c20      	ldr	r4, [pc, #128]	; (4cf4 <__aeabi_dadd+0x650>)
    4c74:	e53f      	b.n	46f6 <__aeabi_dadd+0x52>
    4c76:	2000      	movs	r0, #0
    4c78:	e754      	b.n	4b24 <__aeabi_dadd+0x480>
    4c7a:	2600      	movs	r6, #0
    4c7c:	2500      	movs	r5, #0
    4c7e:	e5d1      	b.n	4824 <__aeabi_dadd+0x180>
    4c80:	0034      	movs	r4, r6
    4c82:	000f      	movs	r7, r1
    4c84:	3c20      	subs	r4, #32
    4c86:	40e7      	lsrs	r7, r4
    4c88:	003c      	movs	r4, r7
    4c8a:	2e20      	cmp	r6, #32
    4c8c:	d02b      	beq.n	4ce6 <__aeabi_dadd+0x642>
    4c8e:	2740      	movs	r7, #64	; 0x40
    4c90:	1bbe      	subs	r6, r7, r6
    4c92:	40b1      	lsls	r1, r6
    4c94:	430d      	orrs	r5, r1
    4c96:	1e69      	subs	r1, r5, #1
    4c98:	418d      	sbcs	r5, r1
    4c9a:	2100      	movs	r1, #0
    4c9c:	432c      	orrs	r4, r5
    4c9e:	e6bc      	b.n	4a1a <__aeabi_dadd+0x376>
    4ca0:	2180      	movs	r1, #128	; 0x80
    4ca2:	2600      	movs	r6, #0
    4ca4:	0309      	lsls	r1, r1, #12
    4ca6:	4c13      	ldr	r4, [pc, #76]	; (4cf4 <__aeabi_dadd+0x650>)
    4ca8:	2500      	movs	r5, #0
    4caa:	e5bb      	b.n	4824 <__aeabi_dadd+0x180>
    4cac:	430d      	orrs	r5, r1
    4cae:	1e69      	subs	r1, r5, #1
    4cb0:	418d      	sbcs	r5, r1
    4cb2:	2100      	movs	r1, #0
    4cb4:	b2ed      	uxtb	r5, r5
    4cb6:	e769      	b.n	4b8c <__aeabi_dadd+0x4e8>
    4cb8:	0001      	movs	r1, r0
    4cba:	0015      	movs	r5, r2
    4cbc:	4c0d      	ldr	r4, [pc, #52]	; (4cf4 <__aeabi_dadd+0x650>)
    4cbe:	e51a      	b.n	46f6 <__aeabi_dadd+0x52>
    4cc0:	0001      	movs	r1, r0
    4cc2:	0015      	movs	r5, r2
    4cc4:	e517      	b.n	46f6 <__aeabi_dadd+0x52>
    4cc6:	001c      	movs	r4, r3
    4cc8:	000f      	movs	r7, r1
    4cca:	3c20      	subs	r4, #32
    4ccc:	40e7      	lsrs	r7, r4
    4cce:	003c      	movs	r4, r7
    4cd0:	2b20      	cmp	r3, #32
    4cd2:	d00c      	beq.n	4cee <__aeabi_dadd+0x64a>
    4cd4:	2740      	movs	r7, #64	; 0x40
    4cd6:	1afb      	subs	r3, r7, r3
    4cd8:	4099      	lsls	r1, r3
    4cda:	430d      	orrs	r5, r1
    4cdc:	1e69      	subs	r1, r5, #1
    4cde:	418d      	sbcs	r5, r1
    4ce0:	2100      	movs	r1, #0
    4ce2:	4325      	orrs	r5, r4
    4ce4:	e752      	b.n	4b8c <__aeabi_dadd+0x4e8>
    4ce6:	2100      	movs	r1, #0
    4ce8:	e7d4      	b.n	4c94 <__aeabi_dadd+0x5f0>
    4cea:	001d      	movs	r5, r3
    4cec:	e592      	b.n	4814 <__aeabi_dadd+0x170>
    4cee:	2100      	movs	r1, #0
    4cf0:	e7f3      	b.n	4cda <__aeabi_dadd+0x636>
    4cf2:	46c0      	nop			; (mov r8, r8)
    4cf4:	000007ff 	.word	0x000007ff
    4cf8:	ff7fffff 	.word	0xff7fffff

00004cfc <__aeabi_ddiv>:
    4cfc:	b5f0      	push	{r4, r5, r6, r7, lr}
    4cfe:	4656      	mov	r6, sl
    4d00:	464d      	mov	r5, r9
    4d02:	4644      	mov	r4, r8
    4d04:	465f      	mov	r7, fp
    4d06:	b4f0      	push	{r4, r5, r6, r7}
    4d08:	001d      	movs	r5, r3
    4d0a:	030e      	lsls	r6, r1, #12
    4d0c:	004c      	lsls	r4, r1, #1
    4d0e:	0fcb      	lsrs	r3, r1, #31
    4d10:	b087      	sub	sp, #28
    4d12:	0007      	movs	r7, r0
    4d14:	4692      	mov	sl, r2
    4d16:	4681      	mov	r9, r0
    4d18:	0b36      	lsrs	r6, r6, #12
    4d1a:	0d64      	lsrs	r4, r4, #21
    4d1c:	4698      	mov	r8, r3
    4d1e:	d06a      	beq.n	4df6 <__aeabi_ddiv+0xfa>
    4d20:	4b6d      	ldr	r3, [pc, #436]	; (4ed8 <__aeabi_ddiv+0x1dc>)
    4d22:	429c      	cmp	r4, r3
    4d24:	d035      	beq.n	4d92 <__aeabi_ddiv+0x96>
    4d26:	2280      	movs	r2, #128	; 0x80
    4d28:	0f43      	lsrs	r3, r0, #29
    4d2a:	0412      	lsls	r2, r2, #16
    4d2c:	4313      	orrs	r3, r2
    4d2e:	00f6      	lsls	r6, r6, #3
    4d30:	431e      	orrs	r6, r3
    4d32:	00c3      	lsls	r3, r0, #3
    4d34:	4699      	mov	r9, r3
    4d36:	4b69      	ldr	r3, [pc, #420]	; (4edc <__aeabi_ddiv+0x1e0>)
    4d38:	2700      	movs	r7, #0
    4d3a:	469c      	mov	ip, r3
    4d3c:	2300      	movs	r3, #0
    4d3e:	4464      	add	r4, ip
    4d40:	9302      	str	r3, [sp, #8]
    4d42:	032b      	lsls	r3, r5, #12
    4d44:	0068      	lsls	r0, r5, #1
    4d46:	0b1b      	lsrs	r3, r3, #12
    4d48:	0fed      	lsrs	r5, r5, #31
    4d4a:	4651      	mov	r1, sl
    4d4c:	469b      	mov	fp, r3
    4d4e:	0d40      	lsrs	r0, r0, #21
    4d50:	9500      	str	r5, [sp, #0]
    4d52:	d100      	bne.n	4d56 <__aeabi_ddiv+0x5a>
    4d54:	e078      	b.n	4e48 <__aeabi_ddiv+0x14c>
    4d56:	4b60      	ldr	r3, [pc, #384]	; (4ed8 <__aeabi_ddiv+0x1dc>)
    4d58:	4298      	cmp	r0, r3
    4d5a:	d06c      	beq.n	4e36 <__aeabi_ddiv+0x13a>
    4d5c:	465b      	mov	r3, fp
    4d5e:	00da      	lsls	r2, r3, #3
    4d60:	0f4b      	lsrs	r3, r1, #29
    4d62:	2180      	movs	r1, #128	; 0x80
    4d64:	0409      	lsls	r1, r1, #16
    4d66:	430b      	orrs	r3, r1
    4d68:	4313      	orrs	r3, r2
    4d6a:	469b      	mov	fp, r3
    4d6c:	4653      	mov	r3, sl
    4d6e:	00d9      	lsls	r1, r3, #3
    4d70:	4b5a      	ldr	r3, [pc, #360]	; (4edc <__aeabi_ddiv+0x1e0>)
    4d72:	469c      	mov	ip, r3
    4d74:	2300      	movs	r3, #0
    4d76:	4460      	add	r0, ip
    4d78:	4642      	mov	r2, r8
    4d7a:	1a20      	subs	r0, r4, r0
    4d7c:	406a      	eors	r2, r5
    4d7e:	4692      	mov	sl, r2
    4d80:	9001      	str	r0, [sp, #4]
    4d82:	431f      	orrs	r7, r3
    4d84:	2f0f      	cmp	r7, #15
    4d86:	d900      	bls.n	4d8a <__aeabi_ddiv+0x8e>
    4d88:	e0b0      	b.n	4eec <__aeabi_ddiv+0x1f0>
    4d8a:	4855      	ldr	r0, [pc, #340]	; (4ee0 <__aeabi_ddiv+0x1e4>)
    4d8c:	00bf      	lsls	r7, r7, #2
    4d8e:	59c0      	ldr	r0, [r0, r7]
    4d90:	4687      	mov	pc, r0
    4d92:	4337      	orrs	r7, r6
    4d94:	d000      	beq.n	4d98 <__aeabi_ddiv+0x9c>
    4d96:	e088      	b.n	4eaa <__aeabi_ddiv+0x1ae>
    4d98:	2300      	movs	r3, #0
    4d9a:	4699      	mov	r9, r3
    4d9c:	3302      	adds	r3, #2
    4d9e:	2708      	movs	r7, #8
    4da0:	2600      	movs	r6, #0
    4da2:	9302      	str	r3, [sp, #8]
    4da4:	e7cd      	b.n	4d42 <__aeabi_ddiv+0x46>
    4da6:	4643      	mov	r3, r8
    4da8:	46b3      	mov	fp, r6
    4daa:	4649      	mov	r1, r9
    4dac:	9300      	str	r3, [sp, #0]
    4dae:	9b02      	ldr	r3, [sp, #8]
    4db0:	9a00      	ldr	r2, [sp, #0]
    4db2:	4692      	mov	sl, r2
    4db4:	2b02      	cmp	r3, #2
    4db6:	d000      	beq.n	4dba <__aeabi_ddiv+0xbe>
    4db8:	e1bf      	b.n	513a <__aeabi_ddiv+0x43e>
    4dba:	2100      	movs	r1, #0
    4dbc:	4653      	mov	r3, sl
    4dbe:	2201      	movs	r2, #1
    4dc0:	2600      	movs	r6, #0
    4dc2:	4689      	mov	r9, r1
    4dc4:	401a      	ands	r2, r3
    4dc6:	4b44      	ldr	r3, [pc, #272]	; (4ed8 <__aeabi_ddiv+0x1dc>)
    4dc8:	2100      	movs	r1, #0
    4dca:	0336      	lsls	r6, r6, #12
    4dcc:	0d0c      	lsrs	r4, r1, #20
    4dce:	0524      	lsls	r4, r4, #20
    4dd0:	0b36      	lsrs	r6, r6, #12
    4dd2:	4326      	orrs	r6, r4
    4dd4:	4c43      	ldr	r4, [pc, #268]	; (4ee4 <__aeabi_ddiv+0x1e8>)
    4dd6:	051b      	lsls	r3, r3, #20
    4dd8:	4026      	ands	r6, r4
    4dda:	431e      	orrs	r6, r3
    4ddc:	0076      	lsls	r6, r6, #1
    4dde:	07d2      	lsls	r2, r2, #31
    4de0:	0876      	lsrs	r6, r6, #1
    4de2:	4316      	orrs	r6, r2
    4de4:	4648      	mov	r0, r9
    4de6:	0031      	movs	r1, r6
    4de8:	b007      	add	sp, #28
    4dea:	bc3c      	pop	{r2, r3, r4, r5}
    4dec:	4690      	mov	r8, r2
    4dee:	4699      	mov	r9, r3
    4df0:	46a2      	mov	sl, r4
    4df2:	46ab      	mov	fp, r5
    4df4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4df6:	0033      	movs	r3, r6
    4df8:	4303      	orrs	r3, r0
    4dfa:	d04f      	beq.n	4e9c <__aeabi_ddiv+0x1a0>
    4dfc:	2e00      	cmp	r6, #0
    4dfe:	d100      	bne.n	4e02 <__aeabi_ddiv+0x106>
    4e00:	e1bc      	b.n	517c <__aeabi_ddiv+0x480>
    4e02:	0030      	movs	r0, r6
    4e04:	f001 fbe2 	bl	65cc <__clzsi2>
    4e08:	0003      	movs	r3, r0
    4e0a:	3b0b      	subs	r3, #11
    4e0c:	2b1c      	cmp	r3, #28
    4e0e:	dd00      	ble.n	4e12 <__aeabi_ddiv+0x116>
    4e10:	e1ad      	b.n	516e <__aeabi_ddiv+0x472>
    4e12:	221d      	movs	r2, #29
    4e14:	0001      	movs	r1, r0
    4e16:	1ad3      	subs	r3, r2, r3
    4e18:	3908      	subs	r1, #8
    4e1a:	003a      	movs	r2, r7
    4e1c:	408f      	lsls	r7, r1
    4e1e:	408e      	lsls	r6, r1
    4e20:	40da      	lsrs	r2, r3
    4e22:	46b9      	mov	r9, r7
    4e24:	4316      	orrs	r6, r2
    4e26:	4b30      	ldr	r3, [pc, #192]	; (4ee8 <__aeabi_ddiv+0x1ec>)
    4e28:	2700      	movs	r7, #0
    4e2a:	469c      	mov	ip, r3
    4e2c:	2300      	movs	r3, #0
    4e2e:	4460      	add	r0, ip
    4e30:	4244      	negs	r4, r0
    4e32:	9302      	str	r3, [sp, #8]
    4e34:	e785      	b.n	4d42 <__aeabi_ddiv+0x46>
    4e36:	4653      	mov	r3, sl
    4e38:	465a      	mov	r2, fp
    4e3a:	4313      	orrs	r3, r2
    4e3c:	d12c      	bne.n	4e98 <__aeabi_ddiv+0x19c>
    4e3e:	2300      	movs	r3, #0
    4e40:	2100      	movs	r1, #0
    4e42:	469b      	mov	fp, r3
    4e44:	3302      	adds	r3, #2
    4e46:	e797      	b.n	4d78 <__aeabi_ddiv+0x7c>
    4e48:	430b      	orrs	r3, r1
    4e4a:	d020      	beq.n	4e8e <__aeabi_ddiv+0x192>
    4e4c:	465b      	mov	r3, fp
    4e4e:	2b00      	cmp	r3, #0
    4e50:	d100      	bne.n	4e54 <__aeabi_ddiv+0x158>
    4e52:	e19e      	b.n	5192 <__aeabi_ddiv+0x496>
    4e54:	4658      	mov	r0, fp
    4e56:	f001 fbb9 	bl	65cc <__clzsi2>
    4e5a:	0003      	movs	r3, r0
    4e5c:	3b0b      	subs	r3, #11
    4e5e:	2b1c      	cmp	r3, #28
    4e60:	dd00      	ble.n	4e64 <__aeabi_ddiv+0x168>
    4e62:	e18f      	b.n	5184 <__aeabi_ddiv+0x488>
    4e64:	0002      	movs	r2, r0
    4e66:	4659      	mov	r1, fp
    4e68:	3a08      	subs	r2, #8
    4e6a:	4091      	lsls	r1, r2
    4e6c:	468b      	mov	fp, r1
    4e6e:	211d      	movs	r1, #29
    4e70:	1acb      	subs	r3, r1, r3
    4e72:	4651      	mov	r1, sl
    4e74:	40d9      	lsrs	r1, r3
    4e76:	000b      	movs	r3, r1
    4e78:	4659      	mov	r1, fp
    4e7a:	430b      	orrs	r3, r1
    4e7c:	4651      	mov	r1, sl
    4e7e:	469b      	mov	fp, r3
    4e80:	4091      	lsls	r1, r2
    4e82:	4b19      	ldr	r3, [pc, #100]	; (4ee8 <__aeabi_ddiv+0x1ec>)
    4e84:	469c      	mov	ip, r3
    4e86:	4460      	add	r0, ip
    4e88:	4240      	negs	r0, r0
    4e8a:	2300      	movs	r3, #0
    4e8c:	e774      	b.n	4d78 <__aeabi_ddiv+0x7c>
    4e8e:	2300      	movs	r3, #0
    4e90:	2100      	movs	r1, #0
    4e92:	469b      	mov	fp, r3
    4e94:	3301      	adds	r3, #1
    4e96:	e76f      	b.n	4d78 <__aeabi_ddiv+0x7c>
    4e98:	2303      	movs	r3, #3
    4e9a:	e76d      	b.n	4d78 <__aeabi_ddiv+0x7c>
    4e9c:	2300      	movs	r3, #0
    4e9e:	4699      	mov	r9, r3
    4ea0:	3301      	adds	r3, #1
    4ea2:	2704      	movs	r7, #4
    4ea4:	2600      	movs	r6, #0
    4ea6:	9302      	str	r3, [sp, #8]
    4ea8:	e74b      	b.n	4d42 <__aeabi_ddiv+0x46>
    4eaa:	2303      	movs	r3, #3
    4eac:	270c      	movs	r7, #12
    4eae:	9302      	str	r3, [sp, #8]
    4eb0:	e747      	b.n	4d42 <__aeabi_ddiv+0x46>
    4eb2:	2201      	movs	r2, #1
    4eb4:	1ad5      	subs	r5, r2, r3
    4eb6:	2d38      	cmp	r5, #56	; 0x38
    4eb8:	dc00      	bgt.n	4ebc <__aeabi_ddiv+0x1c0>
    4eba:	e1b0      	b.n	521e <__aeabi_ddiv+0x522>
    4ebc:	4653      	mov	r3, sl
    4ebe:	401a      	ands	r2, r3
    4ec0:	2100      	movs	r1, #0
    4ec2:	2300      	movs	r3, #0
    4ec4:	2600      	movs	r6, #0
    4ec6:	4689      	mov	r9, r1
    4ec8:	e77e      	b.n	4dc8 <__aeabi_ddiv+0xcc>
    4eca:	2300      	movs	r3, #0
    4ecc:	2680      	movs	r6, #128	; 0x80
    4ece:	4699      	mov	r9, r3
    4ed0:	2200      	movs	r2, #0
    4ed2:	0336      	lsls	r6, r6, #12
    4ed4:	4b00      	ldr	r3, [pc, #0]	; (4ed8 <__aeabi_ddiv+0x1dc>)
    4ed6:	e777      	b.n	4dc8 <__aeabi_ddiv+0xcc>
    4ed8:	000007ff 	.word	0x000007ff
    4edc:	fffffc01 	.word	0xfffffc01
    4ee0:	00006968 	.word	0x00006968
    4ee4:	800fffff 	.word	0x800fffff
    4ee8:	000003f3 	.word	0x000003f3
    4eec:	455e      	cmp	r6, fp
    4eee:	d900      	bls.n	4ef2 <__aeabi_ddiv+0x1f6>
    4ef0:	e172      	b.n	51d8 <__aeabi_ddiv+0x4dc>
    4ef2:	d100      	bne.n	4ef6 <__aeabi_ddiv+0x1fa>
    4ef4:	e16d      	b.n	51d2 <__aeabi_ddiv+0x4d6>
    4ef6:	9b01      	ldr	r3, [sp, #4]
    4ef8:	464d      	mov	r5, r9
    4efa:	3b01      	subs	r3, #1
    4efc:	9301      	str	r3, [sp, #4]
    4efe:	2300      	movs	r3, #0
    4f00:	0034      	movs	r4, r6
    4f02:	9302      	str	r3, [sp, #8]
    4f04:	465b      	mov	r3, fp
    4f06:	021e      	lsls	r6, r3, #8
    4f08:	0e0b      	lsrs	r3, r1, #24
    4f0a:	431e      	orrs	r6, r3
    4f0c:	020b      	lsls	r3, r1, #8
    4f0e:	9303      	str	r3, [sp, #12]
    4f10:	0c33      	lsrs	r3, r6, #16
    4f12:	4699      	mov	r9, r3
    4f14:	0433      	lsls	r3, r6, #16
    4f16:	0c1b      	lsrs	r3, r3, #16
    4f18:	4649      	mov	r1, r9
    4f1a:	0020      	movs	r0, r4
    4f1c:	9300      	str	r3, [sp, #0]
    4f1e:	f001 fa8f 	bl	6440 <__aeabi_uidiv>
    4f22:	9b00      	ldr	r3, [sp, #0]
    4f24:	0037      	movs	r7, r6
    4f26:	4343      	muls	r3, r0
    4f28:	0006      	movs	r6, r0
    4f2a:	4649      	mov	r1, r9
    4f2c:	0020      	movs	r0, r4
    4f2e:	4698      	mov	r8, r3
    4f30:	f001 fb0c 	bl	654c <__aeabi_uidivmod>
    4f34:	0c2c      	lsrs	r4, r5, #16
    4f36:	0409      	lsls	r1, r1, #16
    4f38:	430c      	orrs	r4, r1
    4f3a:	45a0      	cmp	r8, r4
    4f3c:	d909      	bls.n	4f52 <__aeabi_ddiv+0x256>
    4f3e:	19e4      	adds	r4, r4, r7
    4f40:	1e73      	subs	r3, r6, #1
    4f42:	42a7      	cmp	r7, r4
    4f44:	d900      	bls.n	4f48 <__aeabi_ddiv+0x24c>
    4f46:	e15c      	b.n	5202 <__aeabi_ddiv+0x506>
    4f48:	45a0      	cmp	r8, r4
    4f4a:	d800      	bhi.n	4f4e <__aeabi_ddiv+0x252>
    4f4c:	e159      	b.n	5202 <__aeabi_ddiv+0x506>
    4f4e:	3e02      	subs	r6, #2
    4f50:	19e4      	adds	r4, r4, r7
    4f52:	4643      	mov	r3, r8
    4f54:	1ae4      	subs	r4, r4, r3
    4f56:	4649      	mov	r1, r9
    4f58:	0020      	movs	r0, r4
    4f5a:	f001 fa71 	bl	6440 <__aeabi_uidiv>
    4f5e:	0003      	movs	r3, r0
    4f60:	9a00      	ldr	r2, [sp, #0]
    4f62:	4680      	mov	r8, r0
    4f64:	4353      	muls	r3, r2
    4f66:	4649      	mov	r1, r9
    4f68:	0020      	movs	r0, r4
    4f6a:	469b      	mov	fp, r3
    4f6c:	f001 faee 	bl	654c <__aeabi_uidivmod>
    4f70:	042a      	lsls	r2, r5, #16
    4f72:	0409      	lsls	r1, r1, #16
    4f74:	0c12      	lsrs	r2, r2, #16
    4f76:	430a      	orrs	r2, r1
    4f78:	4593      	cmp	fp, r2
    4f7a:	d90d      	bls.n	4f98 <__aeabi_ddiv+0x29c>
    4f7c:	4643      	mov	r3, r8
    4f7e:	19d2      	adds	r2, r2, r7
    4f80:	3b01      	subs	r3, #1
    4f82:	4297      	cmp	r7, r2
    4f84:	d900      	bls.n	4f88 <__aeabi_ddiv+0x28c>
    4f86:	e13a      	b.n	51fe <__aeabi_ddiv+0x502>
    4f88:	4593      	cmp	fp, r2
    4f8a:	d800      	bhi.n	4f8e <__aeabi_ddiv+0x292>
    4f8c:	e137      	b.n	51fe <__aeabi_ddiv+0x502>
    4f8e:	2302      	movs	r3, #2
    4f90:	425b      	negs	r3, r3
    4f92:	469c      	mov	ip, r3
    4f94:	19d2      	adds	r2, r2, r7
    4f96:	44e0      	add	r8, ip
    4f98:	465b      	mov	r3, fp
    4f9a:	1ad2      	subs	r2, r2, r3
    4f9c:	4643      	mov	r3, r8
    4f9e:	0436      	lsls	r6, r6, #16
    4fa0:	4333      	orrs	r3, r6
    4fa2:	469b      	mov	fp, r3
    4fa4:	9903      	ldr	r1, [sp, #12]
    4fa6:	0c18      	lsrs	r0, r3, #16
    4fa8:	0c0b      	lsrs	r3, r1, #16
    4faa:	001d      	movs	r5, r3
    4fac:	9305      	str	r3, [sp, #20]
    4fae:	0409      	lsls	r1, r1, #16
    4fb0:	465b      	mov	r3, fp
    4fb2:	0c09      	lsrs	r1, r1, #16
    4fb4:	000c      	movs	r4, r1
    4fb6:	041b      	lsls	r3, r3, #16
    4fb8:	0c1b      	lsrs	r3, r3, #16
    4fba:	4344      	muls	r4, r0
    4fbc:	9104      	str	r1, [sp, #16]
    4fbe:	4359      	muls	r1, r3
    4fc0:	436b      	muls	r3, r5
    4fc2:	4368      	muls	r0, r5
    4fc4:	191b      	adds	r3, r3, r4
    4fc6:	0c0d      	lsrs	r5, r1, #16
    4fc8:	18eb      	adds	r3, r5, r3
    4fca:	429c      	cmp	r4, r3
    4fcc:	d903      	bls.n	4fd6 <__aeabi_ddiv+0x2da>
    4fce:	2480      	movs	r4, #128	; 0x80
    4fd0:	0264      	lsls	r4, r4, #9
    4fd2:	46a4      	mov	ip, r4
    4fd4:	4460      	add	r0, ip
    4fd6:	0c1c      	lsrs	r4, r3, #16
    4fd8:	0409      	lsls	r1, r1, #16
    4fda:	041b      	lsls	r3, r3, #16
    4fdc:	0c09      	lsrs	r1, r1, #16
    4fde:	1820      	adds	r0, r4, r0
    4fe0:	185d      	adds	r5, r3, r1
    4fe2:	4282      	cmp	r2, r0
    4fe4:	d200      	bcs.n	4fe8 <__aeabi_ddiv+0x2ec>
    4fe6:	e0de      	b.n	51a6 <__aeabi_ddiv+0x4aa>
    4fe8:	d100      	bne.n	4fec <__aeabi_ddiv+0x2f0>
    4fea:	e0d7      	b.n	519c <__aeabi_ddiv+0x4a0>
    4fec:	1a16      	subs	r6, r2, r0
    4fee:	9b02      	ldr	r3, [sp, #8]
    4ff0:	469c      	mov	ip, r3
    4ff2:	1b5d      	subs	r5, r3, r5
    4ff4:	45ac      	cmp	ip, r5
    4ff6:	419b      	sbcs	r3, r3
    4ff8:	425b      	negs	r3, r3
    4ffa:	1af6      	subs	r6, r6, r3
    4ffc:	42b7      	cmp	r7, r6
    4ffe:	d100      	bne.n	5002 <__aeabi_ddiv+0x306>
    5000:	e106      	b.n	5210 <__aeabi_ddiv+0x514>
    5002:	4649      	mov	r1, r9
    5004:	0030      	movs	r0, r6
    5006:	f001 fa1b 	bl	6440 <__aeabi_uidiv>
    500a:	9b00      	ldr	r3, [sp, #0]
    500c:	0004      	movs	r4, r0
    500e:	4343      	muls	r3, r0
    5010:	4649      	mov	r1, r9
    5012:	0030      	movs	r0, r6
    5014:	4698      	mov	r8, r3
    5016:	f001 fa99 	bl	654c <__aeabi_uidivmod>
    501a:	0c2e      	lsrs	r6, r5, #16
    501c:	0409      	lsls	r1, r1, #16
    501e:	430e      	orrs	r6, r1
    5020:	45b0      	cmp	r8, r6
    5022:	d909      	bls.n	5038 <__aeabi_ddiv+0x33c>
    5024:	19f6      	adds	r6, r6, r7
    5026:	1e63      	subs	r3, r4, #1
    5028:	42b7      	cmp	r7, r6
    502a:	d900      	bls.n	502e <__aeabi_ddiv+0x332>
    502c:	e0f3      	b.n	5216 <__aeabi_ddiv+0x51a>
    502e:	45b0      	cmp	r8, r6
    5030:	d800      	bhi.n	5034 <__aeabi_ddiv+0x338>
    5032:	e0f0      	b.n	5216 <__aeabi_ddiv+0x51a>
    5034:	3c02      	subs	r4, #2
    5036:	19f6      	adds	r6, r6, r7
    5038:	4643      	mov	r3, r8
    503a:	1af3      	subs	r3, r6, r3
    503c:	4649      	mov	r1, r9
    503e:	0018      	movs	r0, r3
    5040:	9302      	str	r3, [sp, #8]
    5042:	f001 f9fd 	bl	6440 <__aeabi_uidiv>
    5046:	9b00      	ldr	r3, [sp, #0]
    5048:	0006      	movs	r6, r0
    504a:	4343      	muls	r3, r0
    504c:	4649      	mov	r1, r9
    504e:	9802      	ldr	r0, [sp, #8]
    5050:	4698      	mov	r8, r3
    5052:	f001 fa7b 	bl	654c <__aeabi_uidivmod>
    5056:	042d      	lsls	r5, r5, #16
    5058:	0409      	lsls	r1, r1, #16
    505a:	0c2d      	lsrs	r5, r5, #16
    505c:	430d      	orrs	r5, r1
    505e:	45a8      	cmp	r8, r5
    5060:	d909      	bls.n	5076 <__aeabi_ddiv+0x37a>
    5062:	19ed      	adds	r5, r5, r7
    5064:	1e73      	subs	r3, r6, #1
    5066:	42af      	cmp	r7, r5
    5068:	d900      	bls.n	506c <__aeabi_ddiv+0x370>
    506a:	e0d6      	b.n	521a <__aeabi_ddiv+0x51e>
    506c:	45a8      	cmp	r8, r5
    506e:	d800      	bhi.n	5072 <__aeabi_ddiv+0x376>
    5070:	e0d3      	b.n	521a <__aeabi_ddiv+0x51e>
    5072:	3e02      	subs	r6, #2
    5074:	19ed      	adds	r5, r5, r7
    5076:	0424      	lsls	r4, r4, #16
    5078:	0021      	movs	r1, r4
    507a:	4643      	mov	r3, r8
    507c:	4331      	orrs	r1, r6
    507e:	9e04      	ldr	r6, [sp, #16]
    5080:	9a05      	ldr	r2, [sp, #20]
    5082:	0030      	movs	r0, r6
    5084:	1aed      	subs	r5, r5, r3
    5086:	040b      	lsls	r3, r1, #16
    5088:	0c0c      	lsrs	r4, r1, #16
    508a:	0c1b      	lsrs	r3, r3, #16
    508c:	4358      	muls	r0, r3
    508e:	4366      	muls	r6, r4
    5090:	4353      	muls	r3, r2
    5092:	4354      	muls	r4, r2
    5094:	199a      	adds	r2, r3, r6
    5096:	0c03      	lsrs	r3, r0, #16
    5098:	189b      	adds	r3, r3, r2
    509a:	429e      	cmp	r6, r3
    509c:	d903      	bls.n	50a6 <__aeabi_ddiv+0x3aa>
    509e:	2280      	movs	r2, #128	; 0x80
    50a0:	0252      	lsls	r2, r2, #9
    50a2:	4694      	mov	ip, r2
    50a4:	4464      	add	r4, ip
    50a6:	0c1a      	lsrs	r2, r3, #16
    50a8:	0400      	lsls	r0, r0, #16
    50aa:	041b      	lsls	r3, r3, #16
    50ac:	0c00      	lsrs	r0, r0, #16
    50ae:	1914      	adds	r4, r2, r4
    50b0:	181b      	adds	r3, r3, r0
    50b2:	42a5      	cmp	r5, r4
    50b4:	d350      	bcc.n	5158 <__aeabi_ddiv+0x45c>
    50b6:	d04d      	beq.n	5154 <__aeabi_ddiv+0x458>
    50b8:	2301      	movs	r3, #1
    50ba:	4319      	orrs	r1, r3
    50bc:	4a96      	ldr	r2, [pc, #600]	; (5318 <__aeabi_ddiv+0x61c>)
    50be:	9b01      	ldr	r3, [sp, #4]
    50c0:	4694      	mov	ip, r2
    50c2:	4463      	add	r3, ip
    50c4:	2b00      	cmp	r3, #0
    50c6:	dc00      	bgt.n	50ca <__aeabi_ddiv+0x3ce>
    50c8:	e6f3      	b.n	4eb2 <__aeabi_ddiv+0x1b6>
    50ca:	074a      	lsls	r2, r1, #29
    50cc:	d009      	beq.n	50e2 <__aeabi_ddiv+0x3e6>
    50ce:	220f      	movs	r2, #15
    50d0:	400a      	ands	r2, r1
    50d2:	2a04      	cmp	r2, #4
    50d4:	d005      	beq.n	50e2 <__aeabi_ddiv+0x3e6>
    50d6:	1d0a      	adds	r2, r1, #4
    50d8:	428a      	cmp	r2, r1
    50da:	4189      	sbcs	r1, r1
    50dc:	4249      	negs	r1, r1
    50de:	448b      	add	fp, r1
    50e0:	0011      	movs	r1, r2
    50e2:	465a      	mov	r2, fp
    50e4:	01d2      	lsls	r2, r2, #7
    50e6:	d508      	bpl.n	50fa <__aeabi_ddiv+0x3fe>
    50e8:	465a      	mov	r2, fp
    50ea:	4b8c      	ldr	r3, [pc, #560]	; (531c <__aeabi_ddiv+0x620>)
    50ec:	401a      	ands	r2, r3
    50ee:	4693      	mov	fp, r2
    50f0:	2280      	movs	r2, #128	; 0x80
    50f2:	00d2      	lsls	r2, r2, #3
    50f4:	4694      	mov	ip, r2
    50f6:	9b01      	ldr	r3, [sp, #4]
    50f8:	4463      	add	r3, ip
    50fa:	4a89      	ldr	r2, [pc, #548]	; (5320 <__aeabi_ddiv+0x624>)
    50fc:	4293      	cmp	r3, r2
    50fe:	dd00      	ble.n	5102 <__aeabi_ddiv+0x406>
    5100:	e65b      	b.n	4dba <__aeabi_ddiv+0xbe>
    5102:	465a      	mov	r2, fp
    5104:	08c9      	lsrs	r1, r1, #3
    5106:	0750      	lsls	r0, r2, #29
    5108:	4308      	orrs	r0, r1
    510a:	0256      	lsls	r6, r2, #9
    510c:	4651      	mov	r1, sl
    510e:	2201      	movs	r2, #1
    5110:	055b      	lsls	r3, r3, #21
    5112:	4681      	mov	r9, r0
    5114:	0b36      	lsrs	r6, r6, #12
    5116:	0d5b      	lsrs	r3, r3, #21
    5118:	400a      	ands	r2, r1
    511a:	e655      	b.n	4dc8 <__aeabi_ddiv+0xcc>
    511c:	2380      	movs	r3, #128	; 0x80
    511e:	031b      	lsls	r3, r3, #12
    5120:	421e      	tst	r6, r3
    5122:	d011      	beq.n	5148 <__aeabi_ddiv+0x44c>
    5124:	465a      	mov	r2, fp
    5126:	421a      	tst	r2, r3
    5128:	d10e      	bne.n	5148 <__aeabi_ddiv+0x44c>
    512a:	465e      	mov	r6, fp
    512c:	431e      	orrs	r6, r3
    512e:	0336      	lsls	r6, r6, #12
    5130:	0b36      	lsrs	r6, r6, #12
    5132:	002a      	movs	r2, r5
    5134:	4689      	mov	r9, r1
    5136:	4b7b      	ldr	r3, [pc, #492]	; (5324 <__aeabi_ddiv+0x628>)
    5138:	e646      	b.n	4dc8 <__aeabi_ddiv+0xcc>
    513a:	2b03      	cmp	r3, #3
    513c:	d100      	bne.n	5140 <__aeabi_ddiv+0x444>
    513e:	e0e1      	b.n	5304 <__aeabi_ddiv+0x608>
    5140:	2b01      	cmp	r3, #1
    5142:	d1bb      	bne.n	50bc <__aeabi_ddiv+0x3c0>
    5144:	401a      	ands	r2, r3
    5146:	e6bb      	b.n	4ec0 <__aeabi_ddiv+0x1c4>
    5148:	431e      	orrs	r6, r3
    514a:	0336      	lsls	r6, r6, #12
    514c:	0b36      	lsrs	r6, r6, #12
    514e:	4642      	mov	r2, r8
    5150:	4b74      	ldr	r3, [pc, #464]	; (5324 <__aeabi_ddiv+0x628>)
    5152:	e639      	b.n	4dc8 <__aeabi_ddiv+0xcc>
    5154:	2b00      	cmp	r3, #0
    5156:	d0b1      	beq.n	50bc <__aeabi_ddiv+0x3c0>
    5158:	197d      	adds	r5, r7, r5
    515a:	1e4a      	subs	r2, r1, #1
    515c:	42af      	cmp	r7, r5
    515e:	d952      	bls.n	5206 <__aeabi_ddiv+0x50a>
    5160:	0011      	movs	r1, r2
    5162:	42a5      	cmp	r5, r4
    5164:	d1a8      	bne.n	50b8 <__aeabi_ddiv+0x3bc>
    5166:	9a03      	ldr	r2, [sp, #12]
    5168:	429a      	cmp	r2, r3
    516a:	d1a5      	bne.n	50b8 <__aeabi_ddiv+0x3bc>
    516c:	e7a6      	b.n	50bc <__aeabi_ddiv+0x3c0>
    516e:	0003      	movs	r3, r0
    5170:	003e      	movs	r6, r7
    5172:	3b28      	subs	r3, #40	; 0x28
    5174:	409e      	lsls	r6, r3
    5176:	2300      	movs	r3, #0
    5178:	4699      	mov	r9, r3
    517a:	e654      	b.n	4e26 <__aeabi_ddiv+0x12a>
    517c:	f001 fa26 	bl	65cc <__clzsi2>
    5180:	3020      	adds	r0, #32
    5182:	e641      	b.n	4e08 <__aeabi_ddiv+0x10c>
    5184:	0003      	movs	r3, r0
    5186:	4652      	mov	r2, sl
    5188:	3b28      	subs	r3, #40	; 0x28
    518a:	409a      	lsls	r2, r3
    518c:	2100      	movs	r1, #0
    518e:	4693      	mov	fp, r2
    5190:	e677      	b.n	4e82 <__aeabi_ddiv+0x186>
    5192:	4650      	mov	r0, sl
    5194:	f001 fa1a 	bl	65cc <__clzsi2>
    5198:	3020      	adds	r0, #32
    519a:	e65e      	b.n	4e5a <__aeabi_ddiv+0x15e>
    519c:	9b02      	ldr	r3, [sp, #8]
    519e:	2600      	movs	r6, #0
    51a0:	42ab      	cmp	r3, r5
    51a2:	d300      	bcc.n	51a6 <__aeabi_ddiv+0x4aa>
    51a4:	e723      	b.n	4fee <__aeabi_ddiv+0x2f2>
    51a6:	9e03      	ldr	r6, [sp, #12]
    51a8:	9902      	ldr	r1, [sp, #8]
    51aa:	46b4      	mov	ip, r6
    51ac:	4461      	add	r1, ip
    51ae:	4688      	mov	r8, r1
    51b0:	45b0      	cmp	r8, r6
    51b2:	41b6      	sbcs	r6, r6
    51b4:	465b      	mov	r3, fp
    51b6:	4276      	negs	r6, r6
    51b8:	19f6      	adds	r6, r6, r7
    51ba:	18b2      	adds	r2, r6, r2
    51bc:	3b01      	subs	r3, #1
    51be:	9102      	str	r1, [sp, #8]
    51c0:	4297      	cmp	r7, r2
    51c2:	d213      	bcs.n	51ec <__aeabi_ddiv+0x4f0>
    51c4:	4290      	cmp	r0, r2
    51c6:	d84f      	bhi.n	5268 <__aeabi_ddiv+0x56c>
    51c8:	d100      	bne.n	51cc <__aeabi_ddiv+0x4d0>
    51ca:	e08e      	b.n	52ea <__aeabi_ddiv+0x5ee>
    51cc:	1a16      	subs	r6, r2, r0
    51ce:	469b      	mov	fp, r3
    51d0:	e70d      	b.n	4fee <__aeabi_ddiv+0x2f2>
    51d2:	4589      	cmp	r9, r1
    51d4:	d200      	bcs.n	51d8 <__aeabi_ddiv+0x4dc>
    51d6:	e68e      	b.n	4ef6 <__aeabi_ddiv+0x1fa>
    51d8:	0874      	lsrs	r4, r6, #1
    51da:	464b      	mov	r3, r9
    51dc:	07f6      	lsls	r6, r6, #31
    51de:	0035      	movs	r5, r6
    51e0:	085b      	lsrs	r3, r3, #1
    51e2:	431d      	orrs	r5, r3
    51e4:	464b      	mov	r3, r9
    51e6:	07db      	lsls	r3, r3, #31
    51e8:	9302      	str	r3, [sp, #8]
    51ea:	e68b      	b.n	4f04 <__aeabi_ddiv+0x208>
    51ec:	4297      	cmp	r7, r2
    51ee:	d1ed      	bne.n	51cc <__aeabi_ddiv+0x4d0>
    51f0:	9903      	ldr	r1, [sp, #12]
    51f2:	9c02      	ldr	r4, [sp, #8]
    51f4:	42a1      	cmp	r1, r4
    51f6:	d9e5      	bls.n	51c4 <__aeabi_ddiv+0x4c8>
    51f8:	1a3e      	subs	r6, r7, r0
    51fa:	469b      	mov	fp, r3
    51fc:	e6f7      	b.n	4fee <__aeabi_ddiv+0x2f2>
    51fe:	4698      	mov	r8, r3
    5200:	e6ca      	b.n	4f98 <__aeabi_ddiv+0x29c>
    5202:	001e      	movs	r6, r3
    5204:	e6a5      	b.n	4f52 <__aeabi_ddiv+0x256>
    5206:	42ac      	cmp	r4, r5
    5208:	d83e      	bhi.n	5288 <__aeabi_ddiv+0x58c>
    520a:	d074      	beq.n	52f6 <__aeabi_ddiv+0x5fa>
    520c:	0011      	movs	r1, r2
    520e:	e753      	b.n	50b8 <__aeabi_ddiv+0x3bc>
    5210:	2101      	movs	r1, #1
    5212:	4249      	negs	r1, r1
    5214:	e752      	b.n	50bc <__aeabi_ddiv+0x3c0>
    5216:	001c      	movs	r4, r3
    5218:	e70e      	b.n	5038 <__aeabi_ddiv+0x33c>
    521a:	001e      	movs	r6, r3
    521c:	e72b      	b.n	5076 <__aeabi_ddiv+0x37a>
    521e:	2d1f      	cmp	r5, #31
    5220:	dc3c      	bgt.n	529c <__aeabi_ddiv+0x5a0>
    5222:	2320      	movs	r3, #32
    5224:	000a      	movs	r2, r1
    5226:	4658      	mov	r0, fp
    5228:	1b5b      	subs	r3, r3, r5
    522a:	4098      	lsls	r0, r3
    522c:	40ea      	lsrs	r2, r5
    522e:	4099      	lsls	r1, r3
    5230:	4302      	orrs	r2, r0
    5232:	1e48      	subs	r0, r1, #1
    5234:	4181      	sbcs	r1, r0
    5236:	465e      	mov	r6, fp
    5238:	4311      	orrs	r1, r2
    523a:	40ee      	lsrs	r6, r5
    523c:	074b      	lsls	r3, r1, #29
    523e:	d009      	beq.n	5254 <__aeabi_ddiv+0x558>
    5240:	230f      	movs	r3, #15
    5242:	400b      	ands	r3, r1
    5244:	2b04      	cmp	r3, #4
    5246:	d005      	beq.n	5254 <__aeabi_ddiv+0x558>
    5248:	000b      	movs	r3, r1
    524a:	1d19      	adds	r1, r3, #4
    524c:	4299      	cmp	r1, r3
    524e:	419b      	sbcs	r3, r3
    5250:	425b      	negs	r3, r3
    5252:	18f6      	adds	r6, r6, r3
    5254:	0233      	lsls	r3, r6, #8
    5256:	d53c      	bpl.n	52d2 <__aeabi_ddiv+0x5d6>
    5258:	4653      	mov	r3, sl
    525a:	2201      	movs	r2, #1
    525c:	2100      	movs	r1, #0
    525e:	401a      	ands	r2, r3
    5260:	2600      	movs	r6, #0
    5262:	2301      	movs	r3, #1
    5264:	4689      	mov	r9, r1
    5266:	e5af      	b.n	4dc8 <__aeabi_ddiv+0xcc>
    5268:	2302      	movs	r3, #2
    526a:	425b      	negs	r3, r3
    526c:	469c      	mov	ip, r3
    526e:	9c03      	ldr	r4, [sp, #12]
    5270:	44e3      	add	fp, ip
    5272:	46a4      	mov	ip, r4
    5274:	9b02      	ldr	r3, [sp, #8]
    5276:	4463      	add	r3, ip
    5278:	4698      	mov	r8, r3
    527a:	45a0      	cmp	r8, r4
    527c:	41b6      	sbcs	r6, r6
    527e:	4276      	negs	r6, r6
    5280:	19f6      	adds	r6, r6, r7
    5282:	9302      	str	r3, [sp, #8]
    5284:	18b2      	adds	r2, r6, r2
    5286:	e6b1      	b.n	4fec <__aeabi_ddiv+0x2f0>
    5288:	9803      	ldr	r0, [sp, #12]
    528a:	1e8a      	subs	r2, r1, #2
    528c:	0041      	lsls	r1, r0, #1
    528e:	4281      	cmp	r1, r0
    5290:	41b6      	sbcs	r6, r6
    5292:	4276      	negs	r6, r6
    5294:	19f6      	adds	r6, r6, r7
    5296:	19ad      	adds	r5, r5, r6
    5298:	9103      	str	r1, [sp, #12]
    529a:	e761      	b.n	5160 <__aeabi_ddiv+0x464>
    529c:	221f      	movs	r2, #31
    529e:	4252      	negs	r2, r2
    52a0:	1ad3      	subs	r3, r2, r3
    52a2:	465a      	mov	r2, fp
    52a4:	40da      	lsrs	r2, r3
    52a6:	0013      	movs	r3, r2
    52a8:	2d20      	cmp	r5, #32
    52aa:	d029      	beq.n	5300 <__aeabi_ddiv+0x604>
    52ac:	2240      	movs	r2, #64	; 0x40
    52ae:	4658      	mov	r0, fp
    52b0:	1b55      	subs	r5, r2, r5
    52b2:	40a8      	lsls	r0, r5
    52b4:	4301      	orrs	r1, r0
    52b6:	1e48      	subs	r0, r1, #1
    52b8:	4181      	sbcs	r1, r0
    52ba:	2007      	movs	r0, #7
    52bc:	430b      	orrs	r3, r1
    52be:	4018      	ands	r0, r3
    52c0:	2600      	movs	r6, #0
    52c2:	2800      	cmp	r0, #0
    52c4:	d009      	beq.n	52da <__aeabi_ddiv+0x5de>
    52c6:	220f      	movs	r2, #15
    52c8:	2600      	movs	r6, #0
    52ca:	401a      	ands	r2, r3
    52cc:	0019      	movs	r1, r3
    52ce:	2a04      	cmp	r2, #4
    52d0:	d1bb      	bne.n	524a <__aeabi_ddiv+0x54e>
    52d2:	000b      	movs	r3, r1
    52d4:	0770      	lsls	r0, r6, #29
    52d6:	0276      	lsls	r6, r6, #9
    52d8:	0b36      	lsrs	r6, r6, #12
    52da:	08db      	lsrs	r3, r3, #3
    52dc:	4303      	orrs	r3, r0
    52de:	4699      	mov	r9, r3
    52e0:	2201      	movs	r2, #1
    52e2:	4653      	mov	r3, sl
    52e4:	401a      	ands	r2, r3
    52e6:	2300      	movs	r3, #0
    52e8:	e56e      	b.n	4dc8 <__aeabi_ddiv+0xcc>
    52ea:	9902      	ldr	r1, [sp, #8]
    52ec:	428d      	cmp	r5, r1
    52ee:	d8bb      	bhi.n	5268 <__aeabi_ddiv+0x56c>
    52f0:	469b      	mov	fp, r3
    52f2:	2600      	movs	r6, #0
    52f4:	e67b      	b.n	4fee <__aeabi_ddiv+0x2f2>
    52f6:	9803      	ldr	r0, [sp, #12]
    52f8:	4298      	cmp	r0, r3
    52fa:	d3c5      	bcc.n	5288 <__aeabi_ddiv+0x58c>
    52fc:	0011      	movs	r1, r2
    52fe:	e732      	b.n	5166 <__aeabi_ddiv+0x46a>
    5300:	2000      	movs	r0, #0
    5302:	e7d7      	b.n	52b4 <__aeabi_ddiv+0x5b8>
    5304:	2680      	movs	r6, #128	; 0x80
    5306:	465b      	mov	r3, fp
    5308:	0336      	lsls	r6, r6, #12
    530a:	431e      	orrs	r6, r3
    530c:	0336      	lsls	r6, r6, #12
    530e:	0b36      	lsrs	r6, r6, #12
    5310:	9a00      	ldr	r2, [sp, #0]
    5312:	4689      	mov	r9, r1
    5314:	4b03      	ldr	r3, [pc, #12]	; (5324 <__aeabi_ddiv+0x628>)
    5316:	e557      	b.n	4dc8 <__aeabi_ddiv+0xcc>
    5318:	000003ff 	.word	0x000003ff
    531c:	feffffff 	.word	0xfeffffff
    5320:	000007fe 	.word	0x000007fe
    5324:	000007ff 	.word	0x000007ff

00005328 <__eqdf2>:
    5328:	b5f0      	push	{r4, r5, r6, r7, lr}
    532a:	465f      	mov	r7, fp
    532c:	4656      	mov	r6, sl
    532e:	464d      	mov	r5, r9
    5330:	4644      	mov	r4, r8
    5332:	b4f0      	push	{r4, r5, r6, r7}
    5334:	031f      	lsls	r7, r3, #12
    5336:	005c      	lsls	r4, r3, #1
    5338:	0fdb      	lsrs	r3, r3, #31
    533a:	469a      	mov	sl, r3
    533c:	4b19      	ldr	r3, [pc, #100]	; (53a4 <__eqdf2+0x7c>)
    533e:	030e      	lsls	r6, r1, #12
    5340:	004d      	lsls	r5, r1, #1
    5342:	0fc9      	lsrs	r1, r1, #31
    5344:	4680      	mov	r8, r0
    5346:	0b36      	lsrs	r6, r6, #12
    5348:	0d6d      	lsrs	r5, r5, #21
    534a:	468b      	mov	fp, r1
    534c:	4691      	mov	r9, r2
    534e:	0b3f      	lsrs	r7, r7, #12
    5350:	0d64      	lsrs	r4, r4, #21
    5352:	429d      	cmp	r5, r3
    5354:	d019      	beq.n	538a <__eqdf2+0x62>
    5356:	4b13      	ldr	r3, [pc, #76]	; (53a4 <__eqdf2+0x7c>)
    5358:	429c      	cmp	r4, r3
    535a:	d01b      	beq.n	5394 <__eqdf2+0x6c>
    535c:	2301      	movs	r3, #1
    535e:	42a5      	cmp	r5, r4
    5360:	d006      	beq.n	5370 <__eqdf2+0x48>
    5362:	0018      	movs	r0, r3
    5364:	bc3c      	pop	{r2, r3, r4, r5}
    5366:	4690      	mov	r8, r2
    5368:	4699      	mov	r9, r3
    536a:	46a2      	mov	sl, r4
    536c:	46ab      	mov	fp, r5
    536e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5370:	42be      	cmp	r6, r7
    5372:	d1f6      	bne.n	5362 <__eqdf2+0x3a>
    5374:	45c8      	cmp	r8, r9
    5376:	d1f4      	bne.n	5362 <__eqdf2+0x3a>
    5378:	45d3      	cmp	fp, sl
    537a:	d010      	beq.n	539e <__eqdf2+0x76>
    537c:	2d00      	cmp	r5, #0
    537e:	d1f0      	bne.n	5362 <__eqdf2+0x3a>
    5380:	4330      	orrs	r0, r6
    5382:	0003      	movs	r3, r0
    5384:	1e5a      	subs	r2, r3, #1
    5386:	4193      	sbcs	r3, r2
    5388:	e7eb      	b.n	5362 <__eqdf2+0x3a>
    538a:	0031      	movs	r1, r6
    538c:	2301      	movs	r3, #1
    538e:	4301      	orrs	r1, r0
    5390:	d1e7      	bne.n	5362 <__eqdf2+0x3a>
    5392:	e7e0      	b.n	5356 <__eqdf2+0x2e>
    5394:	433a      	orrs	r2, r7
    5396:	2301      	movs	r3, #1
    5398:	2a00      	cmp	r2, #0
    539a:	d1e2      	bne.n	5362 <__eqdf2+0x3a>
    539c:	e7de      	b.n	535c <__eqdf2+0x34>
    539e:	2300      	movs	r3, #0
    53a0:	e7df      	b.n	5362 <__eqdf2+0x3a>
    53a2:	46c0      	nop			; (mov r8, r8)
    53a4:	000007ff 	.word	0x000007ff

000053a8 <__gedf2>:
    53a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    53aa:	465f      	mov	r7, fp
    53ac:	4644      	mov	r4, r8
    53ae:	4656      	mov	r6, sl
    53b0:	464d      	mov	r5, r9
    53b2:	b4f0      	push	{r4, r5, r6, r7}
    53b4:	031f      	lsls	r7, r3, #12
    53b6:	0b3c      	lsrs	r4, r7, #12
    53b8:	4f2c      	ldr	r7, [pc, #176]	; (546c <__gedf2+0xc4>)
    53ba:	030e      	lsls	r6, r1, #12
    53bc:	004d      	lsls	r5, r1, #1
    53be:	46a3      	mov	fp, r4
    53c0:	005c      	lsls	r4, r3, #1
    53c2:	4684      	mov	ip, r0
    53c4:	0b36      	lsrs	r6, r6, #12
    53c6:	0d6d      	lsrs	r5, r5, #21
    53c8:	0fc9      	lsrs	r1, r1, #31
    53ca:	4690      	mov	r8, r2
    53cc:	0d64      	lsrs	r4, r4, #21
    53ce:	0fdb      	lsrs	r3, r3, #31
    53d0:	42bd      	cmp	r5, r7
    53d2:	d02b      	beq.n	542c <__gedf2+0x84>
    53d4:	4f25      	ldr	r7, [pc, #148]	; (546c <__gedf2+0xc4>)
    53d6:	42bc      	cmp	r4, r7
    53d8:	d02e      	beq.n	5438 <__gedf2+0x90>
    53da:	2d00      	cmp	r5, #0
    53dc:	d10e      	bne.n	53fc <__gedf2+0x54>
    53de:	4330      	orrs	r0, r6
    53e0:	0007      	movs	r7, r0
    53e2:	4681      	mov	r9, r0
    53e4:	4278      	negs	r0, r7
    53e6:	4178      	adcs	r0, r7
    53e8:	2c00      	cmp	r4, #0
    53ea:	d117      	bne.n	541c <__gedf2+0x74>
    53ec:	465f      	mov	r7, fp
    53ee:	433a      	orrs	r2, r7
    53f0:	d114      	bne.n	541c <__gedf2+0x74>
    53f2:	464b      	mov	r3, r9
    53f4:	2000      	movs	r0, #0
    53f6:	2b00      	cmp	r3, #0
    53f8:	d00a      	beq.n	5410 <__gedf2+0x68>
    53fa:	e006      	b.n	540a <__gedf2+0x62>
    53fc:	2c00      	cmp	r4, #0
    53fe:	d102      	bne.n	5406 <__gedf2+0x5e>
    5400:	4658      	mov	r0, fp
    5402:	4302      	orrs	r2, r0
    5404:	d001      	beq.n	540a <__gedf2+0x62>
    5406:	4299      	cmp	r1, r3
    5408:	d01a      	beq.n	5440 <__gedf2+0x98>
    540a:	2301      	movs	r3, #1
    540c:	4248      	negs	r0, r1
    540e:	4318      	orrs	r0, r3
    5410:	bc3c      	pop	{r2, r3, r4, r5}
    5412:	4690      	mov	r8, r2
    5414:	4699      	mov	r9, r3
    5416:	46a2      	mov	sl, r4
    5418:	46ab      	mov	fp, r5
    541a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    541c:	2800      	cmp	r0, #0
    541e:	d0f2      	beq.n	5406 <__gedf2+0x5e>
    5420:	4258      	negs	r0, r3
    5422:	4158      	adcs	r0, r3
    5424:	2201      	movs	r2, #1
    5426:	4240      	negs	r0, r0
    5428:	4310      	orrs	r0, r2
    542a:	e7f1      	b.n	5410 <__gedf2+0x68>
    542c:	0037      	movs	r7, r6
    542e:	4307      	orrs	r7, r0
    5430:	d0d0      	beq.n	53d4 <__gedf2+0x2c>
    5432:	2002      	movs	r0, #2
    5434:	4240      	negs	r0, r0
    5436:	e7eb      	b.n	5410 <__gedf2+0x68>
    5438:	465f      	mov	r7, fp
    543a:	4317      	orrs	r7, r2
    543c:	d0cd      	beq.n	53da <__gedf2+0x32>
    543e:	e7f8      	b.n	5432 <__gedf2+0x8a>
    5440:	42a5      	cmp	r5, r4
    5442:	dce2      	bgt.n	540a <__gedf2+0x62>
    5444:	db05      	blt.n	5452 <__gedf2+0xaa>
    5446:	455e      	cmp	r6, fp
    5448:	d8df      	bhi.n	540a <__gedf2+0x62>
    544a:	d008      	beq.n	545e <__gedf2+0xb6>
    544c:	2000      	movs	r0, #0
    544e:	455e      	cmp	r6, fp
    5450:	d2de      	bcs.n	5410 <__gedf2+0x68>
    5452:	4248      	negs	r0, r1
    5454:	4148      	adcs	r0, r1
    5456:	2301      	movs	r3, #1
    5458:	4240      	negs	r0, r0
    545a:	4318      	orrs	r0, r3
    545c:	e7d8      	b.n	5410 <__gedf2+0x68>
    545e:	45c4      	cmp	ip, r8
    5460:	d8d3      	bhi.n	540a <__gedf2+0x62>
    5462:	2000      	movs	r0, #0
    5464:	45c4      	cmp	ip, r8
    5466:	d3f4      	bcc.n	5452 <__gedf2+0xaa>
    5468:	e7d2      	b.n	5410 <__gedf2+0x68>
    546a:	46c0      	nop			; (mov r8, r8)
    546c:	000007ff 	.word	0x000007ff

00005470 <__ledf2>:
    5470:	b5f0      	push	{r4, r5, r6, r7, lr}
    5472:	465f      	mov	r7, fp
    5474:	464d      	mov	r5, r9
    5476:	4644      	mov	r4, r8
    5478:	4656      	mov	r6, sl
    547a:	b4f0      	push	{r4, r5, r6, r7}
    547c:	031c      	lsls	r4, r3, #12
    547e:	0b24      	lsrs	r4, r4, #12
    5480:	46a4      	mov	ip, r4
    5482:	4c2f      	ldr	r4, [pc, #188]	; (5540 <__ledf2+0xd0>)
    5484:	030f      	lsls	r7, r1, #12
    5486:	004d      	lsls	r5, r1, #1
    5488:	005e      	lsls	r6, r3, #1
    548a:	0fc9      	lsrs	r1, r1, #31
    548c:	4680      	mov	r8, r0
    548e:	0b3f      	lsrs	r7, r7, #12
    5490:	0d6d      	lsrs	r5, r5, #21
    5492:	468b      	mov	fp, r1
    5494:	4691      	mov	r9, r2
    5496:	0d76      	lsrs	r6, r6, #21
    5498:	0fdb      	lsrs	r3, r3, #31
    549a:	42a5      	cmp	r5, r4
    549c:	d020      	beq.n	54e0 <__ledf2+0x70>
    549e:	4c28      	ldr	r4, [pc, #160]	; (5540 <__ledf2+0xd0>)
    54a0:	42a6      	cmp	r6, r4
    54a2:	d022      	beq.n	54ea <__ledf2+0x7a>
    54a4:	2d00      	cmp	r5, #0
    54a6:	d112      	bne.n	54ce <__ledf2+0x5e>
    54a8:	4338      	orrs	r0, r7
    54aa:	4244      	negs	r4, r0
    54ac:	4144      	adcs	r4, r0
    54ae:	2e00      	cmp	r6, #0
    54b0:	d020      	beq.n	54f4 <__ledf2+0x84>
    54b2:	2c00      	cmp	r4, #0
    54b4:	d00d      	beq.n	54d2 <__ledf2+0x62>
    54b6:	425c      	negs	r4, r3
    54b8:	4163      	adcs	r3, r4
    54ba:	2401      	movs	r4, #1
    54bc:	425b      	negs	r3, r3
    54be:	431c      	orrs	r4, r3
    54c0:	0020      	movs	r0, r4
    54c2:	bc3c      	pop	{r2, r3, r4, r5}
    54c4:	4690      	mov	r8, r2
    54c6:	4699      	mov	r9, r3
    54c8:	46a2      	mov	sl, r4
    54ca:	46ab      	mov	fp, r5
    54cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    54ce:	2e00      	cmp	r6, #0
    54d0:	d017      	beq.n	5502 <__ledf2+0x92>
    54d2:	455b      	cmp	r3, fp
    54d4:	d019      	beq.n	550a <__ledf2+0x9a>
    54d6:	465b      	mov	r3, fp
    54d8:	425c      	negs	r4, r3
    54da:	2301      	movs	r3, #1
    54dc:	431c      	orrs	r4, r3
    54de:	e7ef      	b.n	54c0 <__ledf2+0x50>
    54e0:	0039      	movs	r1, r7
    54e2:	2402      	movs	r4, #2
    54e4:	4301      	orrs	r1, r0
    54e6:	d1eb      	bne.n	54c0 <__ledf2+0x50>
    54e8:	e7d9      	b.n	549e <__ledf2+0x2e>
    54ea:	4661      	mov	r1, ip
    54ec:	2402      	movs	r4, #2
    54ee:	4311      	orrs	r1, r2
    54f0:	d1e6      	bne.n	54c0 <__ledf2+0x50>
    54f2:	e7d7      	b.n	54a4 <__ledf2+0x34>
    54f4:	4661      	mov	r1, ip
    54f6:	430a      	orrs	r2, r1
    54f8:	d1db      	bne.n	54b2 <__ledf2+0x42>
    54fa:	2400      	movs	r4, #0
    54fc:	2800      	cmp	r0, #0
    54fe:	d0df      	beq.n	54c0 <__ledf2+0x50>
    5500:	e7e9      	b.n	54d6 <__ledf2+0x66>
    5502:	4661      	mov	r1, ip
    5504:	430a      	orrs	r2, r1
    5506:	d1e4      	bne.n	54d2 <__ledf2+0x62>
    5508:	e7e5      	b.n	54d6 <__ledf2+0x66>
    550a:	42b5      	cmp	r5, r6
    550c:	dd03      	ble.n	5516 <__ledf2+0xa6>
    550e:	2201      	movs	r2, #1
    5510:	425c      	negs	r4, r3
    5512:	4314      	orrs	r4, r2
    5514:	e7d4      	b.n	54c0 <__ledf2+0x50>
    5516:	42b5      	cmp	r5, r6
    5518:	dbcd      	blt.n	54b6 <__ledf2+0x46>
    551a:	4567      	cmp	r7, ip
    551c:	d8db      	bhi.n	54d6 <__ledf2+0x66>
    551e:	d009      	beq.n	5534 <__ledf2+0xc4>
    5520:	2400      	movs	r4, #0
    5522:	4567      	cmp	r7, ip
    5524:	d2cc      	bcs.n	54c0 <__ledf2+0x50>
    5526:	4659      	mov	r1, fp
    5528:	424c      	negs	r4, r1
    552a:	4161      	adcs	r1, r4
    552c:	2401      	movs	r4, #1
    552e:	4249      	negs	r1, r1
    5530:	430c      	orrs	r4, r1
    5532:	e7c5      	b.n	54c0 <__ledf2+0x50>
    5534:	45c8      	cmp	r8, r9
    5536:	d8ce      	bhi.n	54d6 <__ledf2+0x66>
    5538:	2400      	movs	r4, #0
    553a:	45c8      	cmp	r8, r9
    553c:	d3f3      	bcc.n	5526 <__ledf2+0xb6>
    553e:	e7bf      	b.n	54c0 <__ledf2+0x50>
    5540:	000007ff 	.word	0x000007ff

00005544 <__aeabi_dmul>:
    5544:	b5f0      	push	{r4, r5, r6, r7, lr}
    5546:	465f      	mov	r7, fp
    5548:	4656      	mov	r6, sl
    554a:	464d      	mov	r5, r9
    554c:	4644      	mov	r4, r8
    554e:	b4f0      	push	{r4, r5, r6, r7}
    5550:	030d      	lsls	r5, r1, #12
    5552:	4699      	mov	r9, r3
    5554:	004e      	lsls	r6, r1, #1
    5556:	0b2b      	lsrs	r3, r5, #12
    5558:	b087      	sub	sp, #28
    555a:	0007      	movs	r7, r0
    555c:	4692      	mov	sl, r2
    555e:	4680      	mov	r8, r0
    5560:	469b      	mov	fp, r3
    5562:	0d76      	lsrs	r6, r6, #21
    5564:	0fcc      	lsrs	r4, r1, #31
    5566:	2e00      	cmp	r6, #0
    5568:	d069      	beq.n	563e <__aeabi_dmul+0xfa>
    556a:	4b6d      	ldr	r3, [pc, #436]	; (5720 <__aeabi_dmul+0x1dc>)
    556c:	429e      	cmp	r6, r3
    556e:	d035      	beq.n	55dc <__aeabi_dmul+0x98>
    5570:	465b      	mov	r3, fp
    5572:	2280      	movs	r2, #128	; 0x80
    5574:	00dd      	lsls	r5, r3, #3
    5576:	0412      	lsls	r2, r2, #16
    5578:	0f43      	lsrs	r3, r0, #29
    557a:	4313      	orrs	r3, r2
    557c:	432b      	orrs	r3, r5
    557e:	469b      	mov	fp, r3
    5580:	00c3      	lsls	r3, r0, #3
    5582:	4698      	mov	r8, r3
    5584:	4b67      	ldr	r3, [pc, #412]	; (5724 <__aeabi_dmul+0x1e0>)
    5586:	2700      	movs	r7, #0
    5588:	469c      	mov	ip, r3
    558a:	2300      	movs	r3, #0
    558c:	4466      	add	r6, ip
    558e:	9301      	str	r3, [sp, #4]
    5590:	464a      	mov	r2, r9
    5592:	0315      	lsls	r5, r2, #12
    5594:	0050      	lsls	r0, r2, #1
    5596:	0fd2      	lsrs	r2, r2, #31
    5598:	4653      	mov	r3, sl
    559a:	0b2d      	lsrs	r5, r5, #12
    559c:	0d40      	lsrs	r0, r0, #21
    559e:	4691      	mov	r9, r2
    55a0:	d100      	bne.n	55a4 <__aeabi_dmul+0x60>
    55a2:	e076      	b.n	5692 <__aeabi_dmul+0x14e>
    55a4:	4a5e      	ldr	r2, [pc, #376]	; (5720 <__aeabi_dmul+0x1dc>)
    55a6:	4290      	cmp	r0, r2
    55a8:	d06c      	beq.n	5684 <__aeabi_dmul+0x140>
    55aa:	2280      	movs	r2, #128	; 0x80
    55ac:	0f5b      	lsrs	r3, r3, #29
    55ae:	0412      	lsls	r2, r2, #16
    55b0:	4313      	orrs	r3, r2
    55b2:	4a5c      	ldr	r2, [pc, #368]	; (5724 <__aeabi_dmul+0x1e0>)
    55b4:	00ed      	lsls	r5, r5, #3
    55b6:	4694      	mov	ip, r2
    55b8:	431d      	orrs	r5, r3
    55ba:	4653      	mov	r3, sl
    55bc:	2200      	movs	r2, #0
    55be:	00db      	lsls	r3, r3, #3
    55c0:	4460      	add	r0, ip
    55c2:	4649      	mov	r1, r9
    55c4:	1836      	adds	r6, r6, r0
    55c6:	1c70      	adds	r0, r6, #1
    55c8:	4061      	eors	r1, r4
    55ca:	9002      	str	r0, [sp, #8]
    55cc:	4317      	orrs	r7, r2
    55ce:	2f0f      	cmp	r7, #15
    55d0:	d900      	bls.n	55d4 <__aeabi_dmul+0x90>
    55d2:	e0af      	b.n	5734 <__aeabi_dmul+0x1f0>
    55d4:	4854      	ldr	r0, [pc, #336]	; (5728 <__aeabi_dmul+0x1e4>)
    55d6:	00bf      	lsls	r7, r7, #2
    55d8:	59c7      	ldr	r7, [r0, r7]
    55da:	46bf      	mov	pc, r7
    55dc:	465b      	mov	r3, fp
    55de:	431f      	orrs	r7, r3
    55e0:	d000      	beq.n	55e4 <__aeabi_dmul+0xa0>
    55e2:	e088      	b.n	56f6 <__aeabi_dmul+0x1b2>
    55e4:	2300      	movs	r3, #0
    55e6:	469b      	mov	fp, r3
    55e8:	4698      	mov	r8, r3
    55ea:	3302      	adds	r3, #2
    55ec:	2708      	movs	r7, #8
    55ee:	9301      	str	r3, [sp, #4]
    55f0:	e7ce      	b.n	5590 <__aeabi_dmul+0x4c>
    55f2:	4649      	mov	r1, r9
    55f4:	2a02      	cmp	r2, #2
    55f6:	d06a      	beq.n	56ce <__aeabi_dmul+0x18a>
    55f8:	2a03      	cmp	r2, #3
    55fa:	d100      	bne.n	55fe <__aeabi_dmul+0xba>
    55fc:	e209      	b.n	5a12 <__aeabi_dmul+0x4ce>
    55fe:	2a01      	cmp	r2, #1
    5600:	d000      	beq.n	5604 <__aeabi_dmul+0xc0>
    5602:	e1bb      	b.n	597c <__aeabi_dmul+0x438>
    5604:	4011      	ands	r1, r2
    5606:	2200      	movs	r2, #0
    5608:	2300      	movs	r3, #0
    560a:	2500      	movs	r5, #0
    560c:	4690      	mov	r8, r2
    560e:	b2cc      	uxtb	r4, r1
    5610:	2100      	movs	r1, #0
    5612:	032d      	lsls	r5, r5, #12
    5614:	0d0a      	lsrs	r2, r1, #20
    5616:	0512      	lsls	r2, r2, #20
    5618:	0b2d      	lsrs	r5, r5, #12
    561a:	4315      	orrs	r5, r2
    561c:	4a43      	ldr	r2, [pc, #268]	; (572c <__aeabi_dmul+0x1e8>)
    561e:	051b      	lsls	r3, r3, #20
    5620:	4015      	ands	r5, r2
    5622:	431d      	orrs	r5, r3
    5624:	006d      	lsls	r5, r5, #1
    5626:	07e4      	lsls	r4, r4, #31
    5628:	086d      	lsrs	r5, r5, #1
    562a:	4325      	orrs	r5, r4
    562c:	4640      	mov	r0, r8
    562e:	0029      	movs	r1, r5
    5630:	b007      	add	sp, #28
    5632:	bc3c      	pop	{r2, r3, r4, r5}
    5634:	4690      	mov	r8, r2
    5636:	4699      	mov	r9, r3
    5638:	46a2      	mov	sl, r4
    563a:	46ab      	mov	fp, r5
    563c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    563e:	4303      	orrs	r3, r0
    5640:	d052      	beq.n	56e8 <__aeabi_dmul+0x1a4>
    5642:	465b      	mov	r3, fp
    5644:	2b00      	cmp	r3, #0
    5646:	d100      	bne.n	564a <__aeabi_dmul+0x106>
    5648:	e18a      	b.n	5960 <__aeabi_dmul+0x41c>
    564a:	4658      	mov	r0, fp
    564c:	f000 ffbe 	bl	65cc <__clzsi2>
    5650:	0003      	movs	r3, r0
    5652:	3b0b      	subs	r3, #11
    5654:	2b1c      	cmp	r3, #28
    5656:	dd00      	ble.n	565a <__aeabi_dmul+0x116>
    5658:	e17b      	b.n	5952 <__aeabi_dmul+0x40e>
    565a:	221d      	movs	r2, #29
    565c:	1ad3      	subs	r3, r2, r3
    565e:	003a      	movs	r2, r7
    5660:	0001      	movs	r1, r0
    5662:	465d      	mov	r5, fp
    5664:	40da      	lsrs	r2, r3
    5666:	3908      	subs	r1, #8
    5668:	408d      	lsls	r5, r1
    566a:	0013      	movs	r3, r2
    566c:	408f      	lsls	r7, r1
    566e:	432b      	orrs	r3, r5
    5670:	469b      	mov	fp, r3
    5672:	46b8      	mov	r8, r7
    5674:	4b2e      	ldr	r3, [pc, #184]	; (5730 <__aeabi_dmul+0x1ec>)
    5676:	2700      	movs	r7, #0
    5678:	469c      	mov	ip, r3
    567a:	2300      	movs	r3, #0
    567c:	4460      	add	r0, ip
    567e:	4246      	negs	r6, r0
    5680:	9301      	str	r3, [sp, #4]
    5682:	e785      	b.n	5590 <__aeabi_dmul+0x4c>
    5684:	4652      	mov	r2, sl
    5686:	432a      	orrs	r2, r5
    5688:	d12c      	bne.n	56e4 <__aeabi_dmul+0x1a0>
    568a:	2500      	movs	r5, #0
    568c:	2300      	movs	r3, #0
    568e:	2202      	movs	r2, #2
    5690:	e797      	b.n	55c2 <__aeabi_dmul+0x7e>
    5692:	4652      	mov	r2, sl
    5694:	432a      	orrs	r2, r5
    5696:	d021      	beq.n	56dc <__aeabi_dmul+0x198>
    5698:	2d00      	cmp	r5, #0
    569a:	d100      	bne.n	569e <__aeabi_dmul+0x15a>
    569c:	e154      	b.n	5948 <__aeabi_dmul+0x404>
    569e:	0028      	movs	r0, r5
    56a0:	f000 ff94 	bl	65cc <__clzsi2>
    56a4:	0003      	movs	r3, r0
    56a6:	3b0b      	subs	r3, #11
    56a8:	2b1c      	cmp	r3, #28
    56aa:	dd00      	ble.n	56ae <__aeabi_dmul+0x16a>
    56ac:	e146      	b.n	593c <__aeabi_dmul+0x3f8>
    56ae:	211d      	movs	r1, #29
    56b0:	1acb      	subs	r3, r1, r3
    56b2:	4651      	mov	r1, sl
    56b4:	0002      	movs	r2, r0
    56b6:	40d9      	lsrs	r1, r3
    56b8:	4653      	mov	r3, sl
    56ba:	3a08      	subs	r2, #8
    56bc:	4095      	lsls	r5, r2
    56be:	4093      	lsls	r3, r2
    56c0:	430d      	orrs	r5, r1
    56c2:	4a1b      	ldr	r2, [pc, #108]	; (5730 <__aeabi_dmul+0x1ec>)
    56c4:	4694      	mov	ip, r2
    56c6:	4460      	add	r0, ip
    56c8:	4240      	negs	r0, r0
    56ca:	2200      	movs	r2, #0
    56cc:	e779      	b.n	55c2 <__aeabi_dmul+0x7e>
    56ce:	2401      	movs	r4, #1
    56d0:	2200      	movs	r2, #0
    56d2:	400c      	ands	r4, r1
    56d4:	4b12      	ldr	r3, [pc, #72]	; (5720 <__aeabi_dmul+0x1dc>)
    56d6:	2500      	movs	r5, #0
    56d8:	4690      	mov	r8, r2
    56da:	e799      	b.n	5610 <__aeabi_dmul+0xcc>
    56dc:	2500      	movs	r5, #0
    56de:	2300      	movs	r3, #0
    56e0:	2201      	movs	r2, #1
    56e2:	e76e      	b.n	55c2 <__aeabi_dmul+0x7e>
    56e4:	2203      	movs	r2, #3
    56e6:	e76c      	b.n	55c2 <__aeabi_dmul+0x7e>
    56e8:	2300      	movs	r3, #0
    56ea:	469b      	mov	fp, r3
    56ec:	4698      	mov	r8, r3
    56ee:	3301      	adds	r3, #1
    56f0:	2704      	movs	r7, #4
    56f2:	9301      	str	r3, [sp, #4]
    56f4:	e74c      	b.n	5590 <__aeabi_dmul+0x4c>
    56f6:	2303      	movs	r3, #3
    56f8:	270c      	movs	r7, #12
    56fa:	9301      	str	r3, [sp, #4]
    56fc:	e748      	b.n	5590 <__aeabi_dmul+0x4c>
    56fe:	2300      	movs	r3, #0
    5700:	2580      	movs	r5, #128	; 0x80
    5702:	4698      	mov	r8, r3
    5704:	2400      	movs	r4, #0
    5706:	032d      	lsls	r5, r5, #12
    5708:	4b05      	ldr	r3, [pc, #20]	; (5720 <__aeabi_dmul+0x1dc>)
    570a:	e781      	b.n	5610 <__aeabi_dmul+0xcc>
    570c:	465d      	mov	r5, fp
    570e:	4643      	mov	r3, r8
    5710:	9a01      	ldr	r2, [sp, #4]
    5712:	e76f      	b.n	55f4 <__aeabi_dmul+0xb0>
    5714:	465d      	mov	r5, fp
    5716:	4643      	mov	r3, r8
    5718:	0021      	movs	r1, r4
    571a:	9a01      	ldr	r2, [sp, #4]
    571c:	e76a      	b.n	55f4 <__aeabi_dmul+0xb0>
    571e:	46c0      	nop			; (mov r8, r8)
    5720:	000007ff 	.word	0x000007ff
    5724:	fffffc01 	.word	0xfffffc01
    5728:	000069a8 	.word	0x000069a8
    572c:	800fffff 	.word	0x800fffff
    5730:	000003f3 	.word	0x000003f3
    5734:	4642      	mov	r2, r8
    5736:	0c12      	lsrs	r2, r2, #16
    5738:	4691      	mov	r9, r2
    573a:	0c1a      	lsrs	r2, r3, #16
    573c:	4694      	mov	ip, r2
    573e:	4642      	mov	r2, r8
    5740:	0417      	lsls	r7, r2, #16
    5742:	464a      	mov	r2, r9
    5744:	041b      	lsls	r3, r3, #16
    5746:	0c1b      	lsrs	r3, r3, #16
    5748:	435a      	muls	r2, r3
    574a:	4660      	mov	r0, ip
    574c:	4690      	mov	r8, r2
    574e:	464a      	mov	r2, r9
    5750:	4342      	muls	r2, r0
    5752:	0010      	movs	r0, r2
    5754:	9203      	str	r2, [sp, #12]
    5756:	4662      	mov	r2, ip
    5758:	001c      	movs	r4, r3
    575a:	0c3f      	lsrs	r7, r7, #16
    575c:	437a      	muls	r2, r7
    575e:	437c      	muls	r4, r7
    5760:	4442      	add	r2, r8
    5762:	9201      	str	r2, [sp, #4]
    5764:	0c22      	lsrs	r2, r4, #16
    5766:	4692      	mov	sl, r2
    5768:	9a01      	ldr	r2, [sp, #4]
    576a:	4452      	add	r2, sl
    576c:	4590      	cmp	r8, r2
    576e:	d906      	bls.n	577e <__aeabi_dmul+0x23a>
    5770:	4682      	mov	sl, r0
    5772:	2080      	movs	r0, #128	; 0x80
    5774:	0240      	lsls	r0, r0, #9
    5776:	4680      	mov	r8, r0
    5778:	44c2      	add	sl, r8
    577a:	4650      	mov	r0, sl
    577c:	9003      	str	r0, [sp, #12]
    577e:	0c10      	lsrs	r0, r2, #16
    5780:	9004      	str	r0, [sp, #16]
    5782:	4648      	mov	r0, r9
    5784:	0424      	lsls	r4, r4, #16
    5786:	0c24      	lsrs	r4, r4, #16
    5788:	0412      	lsls	r2, r2, #16
    578a:	1912      	adds	r2, r2, r4
    578c:	9205      	str	r2, [sp, #20]
    578e:	0c2a      	lsrs	r2, r5, #16
    5790:	042d      	lsls	r5, r5, #16
    5792:	0c2d      	lsrs	r5, r5, #16
    5794:	4368      	muls	r0, r5
    5796:	002c      	movs	r4, r5
    5798:	4682      	mov	sl, r0
    579a:	4648      	mov	r0, r9
    579c:	437c      	muls	r4, r7
    579e:	4350      	muls	r0, r2
    57a0:	4681      	mov	r9, r0
    57a2:	0c20      	lsrs	r0, r4, #16
    57a4:	4680      	mov	r8, r0
    57a6:	4357      	muls	r7, r2
    57a8:	4457      	add	r7, sl
    57aa:	4447      	add	r7, r8
    57ac:	45ba      	cmp	sl, r7
    57ae:	d903      	bls.n	57b8 <__aeabi_dmul+0x274>
    57b0:	2080      	movs	r0, #128	; 0x80
    57b2:	0240      	lsls	r0, r0, #9
    57b4:	4680      	mov	r8, r0
    57b6:	44c1      	add	r9, r8
    57b8:	0c38      	lsrs	r0, r7, #16
    57ba:	043f      	lsls	r7, r7, #16
    57bc:	46b8      	mov	r8, r7
    57be:	4448      	add	r0, r9
    57c0:	0424      	lsls	r4, r4, #16
    57c2:	0c24      	lsrs	r4, r4, #16
    57c4:	9001      	str	r0, [sp, #4]
    57c6:	9804      	ldr	r0, [sp, #16]
    57c8:	44a0      	add	r8, r4
    57ca:	4440      	add	r0, r8
    57cc:	9004      	str	r0, [sp, #16]
    57ce:	4658      	mov	r0, fp
    57d0:	0c00      	lsrs	r0, r0, #16
    57d2:	4681      	mov	r9, r0
    57d4:	4658      	mov	r0, fp
    57d6:	0404      	lsls	r4, r0, #16
    57d8:	0c20      	lsrs	r0, r4, #16
    57da:	4682      	mov	sl, r0
    57dc:	0007      	movs	r7, r0
    57de:	4648      	mov	r0, r9
    57e0:	435f      	muls	r7, r3
    57e2:	464c      	mov	r4, r9
    57e4:	4343      	muls	r3, r0
    57e6:	4660      	mov	r0, ip
    57e8:	4360      	muls	r0, r4
    57ea:	4664      	mov	r4, ip
    57ec:	4683      	mov	fp, r0
    57ee:	4650      	mov	r0, sl
    57f0:	4344      	muls	r4, r0
    57f2:	0c38      	lsrs	r0, r7, #16
    57f4:	4684      	mov	ip, r0
    57f6:	18e4      	adds	r4, r4, r3
    57f8:	4464      	add	r4, ip
    57fa:	42a3      	cmp	r3, r4
    57fc:	d903      	bls.n	5806 <__aeabi_dmul+0x2c2>
    57fe:	2380      	movs	r3, #128	; 0x80
    5800:	025b      	lsls	r3, r3, #9
    5802:	469c      	mov	ip, r3
    5804:	44e3      	add	fp, ip
    5806:	4648      	mov	r0, r9
    5808:	043f      	lsls	r7, r7, #16
    580a:	0c23      	lsrs	r3, r4, #16
    580c:	0c3f      	lsrs	r7, r7, #16
    580e:	0424      	lsls	r4, r4, #16
    5810:	19e4      	adds	r4, r4, r7
    5812:	4657      	mov	r7, sl
    5814:	4368      	muls	r0, r5
    5816:	436f      	muls	r7, r5
    5818:	4684      	mov	ip, r0
    581a:	464d      	mov	r5, r9
    581c:	4650      	mov	r0, sl
    581e:	4355      	muls	r5, r2
    5820:	4342      	muls	r2, r0
    5822:	0c38      	lsrs	r0, r7, #16
    5824:	4681      	mov	r9, r0
    5826:	4462      	add	r2, ip
    5828:	444a      	add	r2, r9
    582a:	445b      	add	r3, fp
    582c:	4594      	cmp	ip, r2
    582e:	d903      	bls.n	5838 <__aeabi_dmul+0x2f4>
    5830:	2080      	movs	r0, #128	; 0x80
    5832:	0240      	lsls	r0, r0, #9
    5834:	4684      	mov	ip, r0
    5836:	4465      	add	r5, ip
    5838:	9803      	ldr	r0, [sp, #12]
    583a:	043f      	lsls	r7, r7, #16
    583c:	4683      	mov	fp, r0
    583e:	9804      	ldr	r0, [sp, #16]
    5840:	0c3f      	lsrs	r7, r7, #16
    5842:	4684      	mov	ip, r0
    5844:	44e3      	add	fp, ip
    5846:	45c3      	cmp	fp, r8
    5848:	4180      	sbcs	r0, r0
    584a:	4240      	negs	r0, r0
    584c:	4682      	mov	sl, r0
    584e:	0410      	lsls	r0, r2, #16
    5850:	4684      	mov	ip, r0
    5852:	9801      	ldr	r0, [sp, #4]
    5854:	4467      	add	r7, ip
    5856:	4684      	mov	ip, r0
    5858:	4467      	add	r7, ip
    585a:	44a3      	add	fp, r4
    585c:	46bc      	mov	ip, r7
    585e:	45a3      	cmp	fp, r4
    5860:	41a4      	sbcs	r4, r4
    5862:	4699      	mov	r9, r3
    5864:	44d4      	add	ip, sl
    5866:	4264      	negs	r4, r4
    5868:	4287      	cmp	r7, r0
    586a:	41bf      	sbcs	r7, r7
    586c:	45d4      	cmp	ip, sl
    586e:	4180      	sbcs	r0, r0
    5870:	44e1      	add	r9, ip
    5872:	46a0      	mov	r8, r4
    5874:	4599      	cmp	r9, r3
    5876:	419b      	sbcs	r3, r3
    5878:	427f      	negs	r7, r7
    587a:	4240      	negs	r0, r0
    587c:	44c8      	add	r8, r9
    587e:	4307      	orrs	r7, r0
    5880:	0c12      	lsrs	r2, r2, #16
    5882:	18ba      	adds	r2, r7, r2
    5884:	45a0      	cmp	r8, r4
    5886:	41a4      	sbcs	r4, r4
    5888:	425f      	negs	r7, r3
    588a:	003b      	movs	r3, r7
    588c:	4264      	negs	r4, r4
    588e:	4323      	orrs	r3, r4
    5890:	18d7      	adds	r7, r2, r3
    5892:	4643      	mov	r3, r8
    5894:	197d      	adds	r5, r7, r5
    5896:	0ddb      	lsrs	r3, r3, #23
    5898:	026d      	lsls	r5, r5, #9
    589a:	431d      	orrs	r5, r3
    589c:	465b      	mov	r3, fp
    589e:	025a      	lsls	r2, r3, #9
    58a0:	9b05      	ldr	r3, [sp, #20]
    58a2:	431a      	orrs	r2, r3
    58a4:	1e53      	subs	r3, r2, #1
    58a6:	419a      	sbcs	r2, r3
    58a8:	465b      	mov	r3, fp
    58aa:	0ddb      	lsrs	r3, r3, #23
    58ac:	431a      	orrs	r2, r3
    58ae:	4643      	mov	r3, r8
    58b0:	025b      	lsls	r3, r3, #9
    58b2:	4313      	orrs	r3, r2
    58b4:	01ea      	lsls	r2, r5, #7
    58b6:	d507      	bpl.n	58c8 <__aeabi_dmul+0x384>
    58b8:	2201      	movs	r2, #1
    58ba:	085c      	lsrs	r4, r3, #1
    58bc:	4013      	ands	r3, r2
    58be:	4323      	orrs	r3, r4
    58c0:	07ea      	lsls	r2, r5, #31
    58c2:	9e02      	ldr	r6, [sp, #8]
    58c4:	4313      	orrs	r3, r2
    58c6:	086d      	lsrs	r5, r5, #1
    58c8:	4a57      	ldr	r2, [pc, #348]	; (5a28 <__aeabi_dmul+0x4e4>)
    58ca:	18b2      	adds	r2, r6, r2
    58cc:	2a00      	cmp	r2, #0
    58ce:	dd4b      	ble.n	5968 <__aeabi_dmul+0x424>
    58d0:	0758      	lsls	r0, r3, #29
    58d2:	d009      	beq.n	58e8 <__aeabi_dmul+0x3a4>
    58d4:	200f      	movs	r0, #15
    58d6:	4018      	ands	r0, r3
    58d8:	2804      	cmp	r0, #4
    58da:	d005      	beq.n	58e8 <__aeabi_dmul+0x3a4>
    58dc:	1d18      	adds	r0, r3, #4
    58de:	4298      	cmp	r0, r3
    58e0:	419b      	sbcs	r3, r3
    58e2:	425b      	negs	r3, r3
    58e4:	18ed      	adds	r5, r5, r3
    58e6:	0003      	movs	r3, r0
    58e8:	01e8      	lsls	r0, r5, #7
    58ea:	d504      	bpl.n	58f6 <__aeabi_dmul+0x3b2>
    58ec:	4a4f      	ldr	r2, [pc, #316]	; (5a2c <__aeabi_dmul+0x4e8>)
    58ee:	4015      	ands	r5, r2
    58f0:	2280      	movs	r2, #128	; 0x80
    58f2:	00d2      	lsls	r2, r2, #3
    58f4:	18b2      	adds	r2, r6, r2
    58f6:	484e      	ldr	r0, [pc, #312]	; (5a30 <__aeabi_dmul+0x4ec>)
    58f8:	4282      	cmp	r2, r0
    58fa:	dd00      	ble.n	58fe <__aeabi_dmul+0x3ba>
    58fc:	e6e7      	b.n	56ce <__aeabi_dmul+0x18a>
    58fe:	2401      	movs	r4, #1
    5900:	08db      	lsrs	r3, r3, #3
    5902:	0768      	lsls	r0, r5, #29
    5904:	4318      	orrs	r0, r3
    5906:	026d      	lsls	r5, r5, #9
    5908:	0553      	lsls	r3, r2, #21
    590a:	4680      	mov	r8, r0
    590c:	0b2d      	lsrs	r5, r5, #12
    590e:	0d5b      	lsrs	r3, r3, #21
    5910:	400c      	ands	r4, r1
    5912:	e67d      	b.n	5610 <__aeabi_dmul+0xcc>
    5914:	2280      	movs	r2, #128	; 0x80
    5916:	4659      	mov	r1, fp
    5918:	0312      	lsls	r2, r2, #12
    591a:	4211      	tst	r1, r2
    591c:	d008      	beq.n	5930 <__aeabi_dmul+0x3ec>
    591e:	4215      	tst	r5, r2
    5920:	d106      	bne.n	5930 <__aeabi_dmul+0x3ec>
    5922:	4315      	orrs	r5, r2
    5924:	032d      	lsls	r5, r5, #12
    5926:	4698      	mov	r8, r3
    5928:	0b2d      	lsrs	r5, r5, #12
    592a:	464c      	mov	r4, r9
    592c:	4b41      	ldr	r3, [pc, #260]	; (5a34 <__aeabi_dmul+0x4f0>)
    592e:	e66f      	b.n	5610 <__aeabi_dmul+0xcc>
    5930:	465d      	mov	r5, fp
    5932:	4315      	orrs	r5, r2
    5934:	032d      	lsls	r5, r5, #12
    5936:	0b2d      	lsrs	r5, r5, #12
    5938:	4b3e      	ldr	r3, [pc, #248]	; (5a34 <__aeabi_dmul+0x4f0>)
    593a:	e669      	b.n	5610 <__aeabi_dmul+0xcc>
    593c:	0003      	movs	r3, r0
    593e:	4655      	mov	r5, sl
    5940:	3b28      	subs	r3, #40	; 0x28
    5942:	409d      	lsls	r5, r3
    5944:	2300      	movs	r3, #0
    5946:	e6bc      	b.n	56c2 <__aeabi_dmul+0x17e>
    5948:	4650      	mov	r0, sl
    594a:	f000 fe3f 	bl	65cc <__clzsi2>
    594e:	3020      	adds	r0, #32
    5950:	e6a8      	b.n	56a4 <__aeabi_dmul+0x160>
    5952:	0003      	movs	r3, r0
    5954:	3b28      	subs	r3, #40	; 0x28
    5956:	409f      	lsls	r7, r3
    5958:	2300      	movs	r3, #0
    595a:	46bb      	mov	fp, r7
    595c:	4698      	mov	r8, r3
    595e:	e689      	b.n	5674 <__aeabi_dmul+0x130>
    5960:	f000 fe34 	bl	65cc <__clzsi2>
    5964:	3020      	adds	r0, #32
    5966:	e673      	b.n	5650 <__aeabi_dmul+0x10c>
    5968:	2401      	movs	r4, #1
    596a:	1aa6      	subs	r6, r4, r2
    596c:	2e38      	cmp	r6, #56	; 0x38
    596e:	dd07      	ble.n	5980 <__aeabi_dmul+0x43c>
    5970:	2200      	movs	r2, #0
    5972:	400c      	ands	r4, r1
    5974:	2300      	movs	r3, #0
    5976:	2500      	movs	r5, #0
    5978:	4690      	mov	r8, r2
    597a:	e649      	b.n	5610 <__aeabi_dmul+0xcc>
    597c:	9e02      	ldr	r6, [sp, #8]
    597e:	e7a3      	b.n	58c8 <__aeabi_dmul+0x384>
    5980:	2e1f      	cmp	r6, #31
    5982:	dc20      	bgt.n	59c6 <__aeabi_dmul+0x482>
    5984:	2220      	movs	r2, #32
    5986:	002c      	movs	r4, r5
    5988:	0018      	movs	r0, r3
    598a:	1b92      	subs	r2, r2, r6
    598c:	40f0      	lsrs	r0, r6
    598e:	4094      	lsls	r4, r2
    5990:	4093      	lsls	r3, r2
    5992:	4304      	orrs	r4, r0
    5994:	1e58      	subs	r0, r3, #1
    5996:	4183      	sbcs	r3, r0
    5998:	431c      	orrs	r4, r3
    599a:	40f5      	lsrs	r5, r6
    599c:	0763      	lsls	r3, r4, #29
    599e:	d009      	beq.n	59b4 <__aeabi_dmul+0x470>
    59a0:	230f      	movs	r3, #15
    59a2:	4023      	ands	r3, r4
    59a4:	2b04      	cmp	r3, #4
    59a6:	d005      	beq.n	59b4 <__aeabi_dmul+0x470>
    59a8:	0023      	movs	r3, r4
    59aa:	1d1c      	adds	r4, r3, #4
    59ac:	429c      	cmp	r4, r3
    59ae:	4192      	sbcs	r2, r2
    59b0:	4252      	negs	r2, r2
    59b2:	18ad      	adds	r5, r5, r2
    59b4:	022b      	lsls	r3, r5, #8
    59b6:	d51f      	bpl.n	59f8 <__aeabi_dmul+0x4b4>
    59b8:	2401      	movs	r4, #1
    59ba:	2200      	movs	r2, #0
    59bc:	400c      	ands	r4, r1
    59be:	2301      	movs	r3, #1
    59c0:	2500      	movs	r5, #0
    59c2:	4690      	mov	r8, r2
    59c4:	e624      	b.n	5610 <__aeabi_dmul+0xcc>
    59c6:	201f      	movs	r0, #31
    59c8:	002c      	movs	r4, r5
    59ca:	4240      	negs	r0, r0
    59cc:	1a82      	subs	r2, r0, r2
    59ce:	40d4      	lsrs	r4, r2
    59d0:	2e20      	cmp	r6, #32
    59d2:	d01c      	beq.n	5a0e <__aeabi_dmul+0x4ca>
    59d4:	2240      	movs	r2, #64	; 0x40
    59d6:	1b96      	subs	r6, r2, r6
    59d8:	40b5      	lsls	r5, r6
    59da:	432b      	orrs	r3, r5
    59dc:	1e58      	subs	r0, r3, #1
    59de:	4183      	sbcs	r3, r0
    59e0:	2007      	movs	r0, #7
    59e2:	4323      	orrs	r3, r4
    59e4:	4018      	ands	r0, r3
    59e6:	2500      	movs	r5, #0
    59e8:	2800      	cmp	r0, #0
    59ea:	d009      	beq.n	5a00 <__aeabi_dmul+0x4bc>
    59ec:	220f      	movs	r2, #15
    59ee:	2500      	movs	r5, #0
    59f0:	401a      	ands	r2, r3
    59f2:	001c      	movs	r4, r3
    59f4:	2a04      	cmp	r2, #4
    59f6:	d1d8      	bne.n	59aa <__aeabi_dmul+0x466>
    59f8:	0023      	movs	r3, r4
    59fa:	0768      	lsls	r0, r5, #29
    59fc:	026d      	lsls	r5, r5, #9
    59fe:	0b2d      	lsrs	r5, r5, #12
    5a00:	2401      	movs	r4, #1
    5a02:	08db      	lsrs	r3, r3, #3
    5a04:	4303      	orrs	r3, r0
    5a06:	4698      	mov	r8, r3
    5a08:	400c      	ands	r4, r1
    5a0a:	2300      	movs	r3, #0
    5a0c:	e600      	b.n	5610 <__aeabi_dmul+0xcc>
    5a0e:	2500      	movs	r5, #0
    5a10:	e7e3      	b.n	59da <__aeabi_dmul+0x496>
    5a12:	2280      	movs	r2, #128	; 0x80
    5a14:	2401      	movs	r4, #1
    5a16:	0312      	lsls	r2, r2, #12
    5a18:	4315      	orrs	r5, r2
    5a1a:	032d      	lsls	r5, r5, #12
    5a1c:	4698      	mov	r8, r3
    5a1e:	0b2d      	lsrs	r5, r5, #12
    5a20:	400c      	ands	r4, r1
    5a22:	4b04      	ldr	r3, [pc, #16]	; (5a34 <__aeabi_dmul+0x4f0>)
    5a24:	e5f4      	b.n	5610 <__aeabi_dmul+0xcc>
    5a26:	46c0      	nop			; (mov r8, r8)
    5a28:	000003ff 	.word	0x000003ff
    5a2c:	feffffff 	.word	0xfeffffff
    5a30:	000007fe 	.word	0x000007fe
    5a34:	000007ff 	.word	0x000007ff

00005a38 <__aeabi_dsub>:
    5a38:	b5f0      	push	{r4, r5, r6, r7, lr}
    5a3a:	4657      	mov	r7, sl
    5a3c:	464e      	mov	r6, r9
    5a3e:	4645      	mov	r5, r8
    5a40:	b4e0      	push	{r5, r6, r7}
    5a42:	000e      	movs	r6, r1
    5a44:	0011      	movs	r1, r2
    5a46:	0ff2      	lsrs	r2, r6, #31
    5a48:	4692      	mov	sl, r2
    5a4a:	00c5      	lsls	r5, r0, #3
    5a4c:	0f42      	lsrs	r2, r0, #29
    5a4e:	0318      	lsls	r0, r3, #12
    5a50:	0337      	lsls	r7, r6, #12
    5a52:	0074      	lsls	r4, r6, #1
    5a54:	0a40      	lsrs	r0, r0, #9
    5a56:	0f4e      	lsrs	r6, r1, #29
    5a58:	0a7f      	lsrs	r7, r7, #9
    5a5a:	4330      	orrs	r0, r6
    5a5c:	4ecf      	ldr	r6, [pc, #828]	; (5d9c <__aeabi_dsub+0x364>)
    5a5e:	4317      	orrs	r7, r2
    5a60:	005a      	lsls	r2, r3, #1
    5a62:	0d64      	lsrs	r4, r4, #21
    5a64:	0d52      	lsrs	r2, r2, #21
    5a66:	0fdb      	lsrs	r3, r3, #31
    5a68:	00c9      	lsls	r1, r1, #3
    5a6a:	42b2      	cmp	r2, r6
    5a6c:	d100      	bne.n	5a70 <__aeabi_dsub+0x38>
    5a6e:	e0e5      	b.n	5c3c <__aeabi_dsub+0x204>
    5a70:	2601      	movs	r6, #1
    5a72:	4073      	eors	r3, r6
    5a74:	1aa6      	subs	r6, r4, r2
    5a76:	46b4      	mov	ip, r6
    5a78:	4553      	cmp	r3, sl
    5a7a:	d100      	bne.n	5a7e <__aeabi_dsub+0x46>
    5a7c:	e0af      	b.n	5bde <__aeabi_dsub+0x1a6>
    5a7e:	2e00      	cmp	r6, #0
    5a80:	dc00      	bgt.n	5a84 <__aeabi_dsub+0x4c>
    5a82:	e10d      	b.n	5ca0 <__aeabi_dsub+0x268>
    5a84:	2a00      	cmp	r2, #0
    5a86:	d13a      	bne.n	5afe <__aeabi_dsub+0xc6>
    5a88:	0003      	movs	r3, r0
    5a8a:	430b      	orrs	r3, r1
    5a8c:	d000      	beq.n	5a90 <__aeabi_dsub+0x58>
    5a8e:	e0e4      	b.n	5c5a <__aeabi_dsub+0x222>
    5a90:	076b      	lsls	r3, r5, #29
    5a92:	d009      	beq.n	5aa8 <__aeabi_dsub+0x70>
    5a94:	230f      	movs	r3, #15
    5a96:	402b      	ands	r3, r5
    5a98:	2b04      	cmp	r3, #4
    5a9a:	d005      	beq.n	5aa8 <__aeabi_dsub+0x70>
    5a9c:	1d2b      	adds	r3, r5, #4
    5a9e:	42ab      	cmp	r3, r5
    5aa0:	41ad      	sbcs	r5, r5
    5aa2:	426d      	negs	r5, r5
    5aa4:	197f      	adds	r7, r7, r5
    5aa6:	001d      	movs	r5, r3
    5aa8:	023b      	lsls	r3, r7, #8
    5aaa:	d400      	bmi.n	5aae <__aeabi_dsub+0x76>
    5aac:	e088      	b.n	5bc0 <__aeabi_dsub+0x188>
    5aae:	4bbb      	ldr	r3, [pc, #748]	; (5d9c <__aeabi_dsub+0x364>)
    5ab0:	3401      	adds	r4, #1
    5ab2:	429c      	cmp	r4, r3
    5ab4:	d100      	bne.n	5ab8 <__aeabi_dsub+0x80>
    5ab6:	e110      	b.n	5cda <__aeabi_dsub+0x2a2>
    5ab8:	003a      	movs	r2, r7
    5aba:	4bb9      	ldr	r3, [pc, #740]	; (5da0 <__aeabi_dsub+0x368>)
    5abc:	4651      	mov	r1, sl
    5abe:	401a      	ands	r2, r3
    5ac0:	2301      	movs	r3, #1
    5ac2:	0750      	lsls	r0, r2, #29
    5ac4:	08ed      	lsrs	r5, r5, #3
    5ac6:	0252      	lsls	r2, r2, #9
    5ac8:	0564      	lsls	r4, r4, #21
    5aca:	4305      	orrs	r5, r0
    5acc:	0b12      	lsrs	r2, r2, #12
    5ace:	0d64      	lsrs	r4, r4, #21
    5ad0:	400b      	ands	r3, r1
    5ad2:	2100      	movs	r1, #0
    5ad4:	0028      	movs	r0, r5
    5ad6:	0312      	lsls	r2, r2, #12
    5ad8:	0d0d      	lsrs	r5, r1, #20
    5ada:	0b12      	lsrs	r2, r2, #12
    5adc:	0564      	lsls	r4, r4, #21
    5ade:	052d      	lsls	r5, r5, #20
    5ae0:	4315      	orrs	r5, r2
    5ae2:	0862      	lsrs	r2, r4, #1
    5ae4:	4caf      	ldr	r4, [pc, #700]	; (5da4 <__aeabi_dsub+0x36c>)
    5ae6:	07db      	lsls	r3, r3, #31
    5ae8:	402c      	ands	r4, r5
    5aea:	4314      	orrs	r4, r2
    5aec:	0064      	lsls	r4, r4, #1
    5aee:	0864      	lsrs	r4, r4, #1
    5af0:	431c      	orrs	r4, r3
    5af2:	0021      	movs	r1, r4
    5af4:	bc1c      	pop	{r2, r3, r4}
    5af6:	4690      	mov	r8, r2
    5af8:	4699      	mov	r9, r3
    5afa:	46a2      	mov	sl, r4
    5afc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5afe:	4ba7      	ldr	r3, [pc, #668]	; (5d9c <__aeabi_dsub+0x364>)
    5b00:	429c      	cmp	r4, r3
    5b02:	d0c5      	beq.n	5a90 <__aeabi_dsub+0x58>
    5b04:	2380      	movs	r3, #128	; 0x80
    5b06:	041b      	lsls	r3, r3, #16
    5b08:	4318      	orrs	r0, r3
    5b0a:	4663      	mov	r3, ip
    5b0c:	2b38      	cmp	r3, #56	; 0x38
    5b0e:	dd00      	ble.n	5b12 <__aeabi_dsub+0xda>
    5b10:	e0fd      	b.n	5d0e <__aeabi_dsub+0x2d6>
    5b12:	2b1f      	cmp	r3, #31
    5b14:	dd00      	ble.n	5b18 <__aeabi_dsub+0xe0>
    5b16:	e130      	b.n	5d7a <__aeabi_dsub+0x342>
    5b18:	4662      	mov	r2, ip
    5b1a:	2320      	movs	r3, #32
    5b1c:	1a9b      	subs	r3, r3, r2
    5b1e:	0002      	movs	r2, r0
    5b20:	409a      	lsls	r2, r3
    5b22:	4666      	mov	r6, ip
    5b24:	4690      	mov	r8, r2
    5b26:	000a      	movs	r2, r1
    5b28:	4099      	lsls	r1, r3
    5b2a:	40f2      	lsrs	r2, r6
    5b2c:	4646      	mov	r6, r8
    5b2e:	1e4b      	subs	r3, r1, #1
    5b30:	4199      	sbcs	r1, r3
    5b32:	4332      	orrs	r2, r6
    5b34:	4311      	orrs	r1, r2
    5b36:	4663      	mov	r3, ip
    5b38:	0002      	movs	r2, r0
    5b3a:	40da      	lsrs	r2, r3
    5b3c:	1a69      	subs	r1, r5, r1
    5b3e:	428d      	cmp	r5, r1
    5b40:	419b      	sbcs	r3, r3
    5b42:	000d      	movs	r5, r1
    5b44:	1aba      	subs	r2, r7, r2
    5b46:	425b      	negs	r3, r3
    5b48:	1ad7      	subs	r7, r2, r3
    5b4a:	023b      	lsls	r3, r7, #8
    5b4c:	d535      	bpl.n	5bba <__aeabi_dsub+0x182>
    5b4e:	027a      	lsls	r2, r7, #9
    5b50:	0a53      	lsrs	r3, r2, #9
    5b52:	4698      	mov	r8, r3
    5b54:	4643      	mov	r3, r8
    5b56:	2b00      	cmp	r3, #0
    5b58:	d100      	bne.n	5b5c <__aeabi_dsub+0x124>
    5b5a:	e0c4      	b.n	5ce6 <__aeabi_dsub+0x2ae>
    5b5c:	4640      	mov	r0, r8
    5b5e:	f000 fd35 	bl	65cc <__clzsi2>
    5b62:	0003      	movs	r3, r0
    5b64:	3b08      	subs	r3, #8
    5b66:	2b1f      	cmp	r3, #31
    5b68:	dd00      	ble.n	5b6c <__aeabi_dsub+0x134>
    5b6a:	e0c5      	b.n	5cf8 <__aeabi_dsub+0x2c0>
    5b6c:	2220      	movs	r2, #32
    5b6e:	0029      	movs	r1, r5
    5b70:	1ad2      	subs	r2, r2, r3
    5b72:	4647      	mov	r7, r8
    5b74:	40d1      	lsrs	r1, r2
    5b76:	409f      	lsls	r7, r3
    5b78:	000a      	movs	r2, r1
    5b7a:	409d      	lsls	r5, r3
    5b7c:	433a      	orrs	r2, r7
    5b7e:	429c      	cmp	r4, r3
    5b80:	dd00      	ble.n	5b84 <__aeabi_dsub+0x14c>
    5b82:	e0c0      	b.n	5d06 <__aeabi_dsub+0x2ce>
    5b84:	1b1c      	subs	r4, r3, r4
    5b86:	1c63      	adds	r3, r4, #1
    5b88:	2b1f      	cmp	r3, #31
    5b8a:	dd00      	ble.n	5b8e <__aeabi_dsub+0x156>
    5b8c:	e0e4      	b.n	5d58 <__aeabi_dsub+0x320>
    5b8e:	2120      	movs	r1, #32
    5b90:	0014      	movs	r4, r2
    5b92:	0028      	movs	r0, r5
    5b94:	1ac9      	subs	r1, r1, r3
    5b96:	40d8      	lsrs	r0, r3
    5b98:	408c      	lsls	r4, r1
    5b9a:	408d      	lsls	r5, r1
    5b9c:	4304      	orrs	r4, r0
    5b9e:	40da      	lsrs	r2, r3
    5ba0:	1e68      	subs	r0, r5, #1
    5ba2:	4185      	sbcs	r5, r0
    5ba4:	0017      	movs	r7, r2
    5ba6:	4325      	orrs	r5, r4
    5ba8:	2400      	movs	r4, #0
    5baa:	e771      	b.n	5a90 <__aeabi_dsub+0x58>
    5bac:	4642      	mov	r2, r8
    5bae:	4663      	mov	r3, ip
    5bb0:	431a      	orrs	r2, r3
    5bb2:	d100      	bne.n	5bb6 <__aeabi_dsub+0x17e>
    5bb4:	e24c      	b.n	6050 <__aeabi_dsub+0x618>
    5bb6:	4667      	mov	r7, ip
    5bb8:	4645      	mov	r5, r8
    5bba:	076b      	lsls	r3, r5, #29
    5bbc:	d000      	beq.n	5bc0 <__aeabi_dsub+0x188>
    5bbe:	e769      	b.n	5a94 <__aeabi_dsub+0x5c>
    5bc0:	2301      	movs	r3, #1
    5bc2:	4651      	mov	r1, sl
    5bc4:	0778      	lsls	r0, r7, #29
    5bc6:	08ed      	lsrs	r5, r5, #3
    5bc8:	08fa      	lsrs	r2, r7, #3
    5bca:	400b      	ands	r3, r1
    5bcc:	4305      	orrs	r5, r0
    5bce:	4973      	ldr	r1, [pc, #460]	; (5d9c <__aeabi_dsub+0x364>)
    5bd0:	428c      	cmp	r4, r1
    5bd2:	d038      	beq.n	5c46 <__aeabi_dsub+0x20e>
    5bd4:	0312      	lsls	r2, r2, #12
    5bd6:	0564      	lsls	r4, r4, #21
    5bd8:	0b12      	lsrs	r2, r2, #12
    5bda:	0d64      	lsrs	r4, r4, #21
    5bdc:	e779      	b.n	5ad2 <__aeabi_dsub+0x9a>
    5bde:	2e00      	cmp	r6, #0
    5be0:	dc00      	bgt.n	5be4 <__aeabi_dsub+0x1ac>
    5be2:	e09a      	b.n	5d1a <__aeabi_dsub+0x2e2>
    5be4:	2a00      	cmp	r2, #0
    5be6:	d047      	beq.n	5c78 <__aeabi_dsub+0x240>
    5be8:	4a6c      	ldr	r2, [pc, #432]	; (5d9c <__aeabi_dsub+0x364>)
    5bea:	4294      	cmp	r4, r2
    5bec:	d100      	bne.n	5bf0 <__aeabi_dsub+0x1b8>
    5bee:	e74f      	b.n	5a90 <__aeabi_dsub+0x58>
    5bf0:	2280      	movs	r2, #128	; 0x80
    5bf2:	0412      	lsls	r2, r2, #16
    5bf4:	4310      	orrs	r0, r2
    5bf6:	4662      	mov	r2, ip
    5bf8:	2a38      	cmp	r2, #56	; 0x38
    5bfa:	dc00      	bgt.n	5bfe <__aeabi_dsub+0x1c6>
    5bfc:	e108      	b.n	5e10 <__aeabi_dsub+0x3d8>
    5bfe:	4301      	orrs	r1, r0
    5c00:	1e48      	subs	r0, r1, #1
    5c02:	4181      	sbcs	r1, r0
    5c04:	2200      	movs	r2, #0
    5c06:	b2c9      	uxtb	r1, r1
    5c08:	1949      	adds	r1, r1, r5
    5c0a:	19d2      	adds	r2, r2, r7
    5c0c:	42a9      	cmp	r1, r5
    5c0e:	41bf      	sbcs	r7, r7
    5c10:	000d      	movs	r5, r1
    5c12:	427f      	negs	r7, r7
    5c14:	18bf      	adds	r7, r7, r2
    5c16:	023a      	lsls	r2, r7, #8
    5c18:	d400      	bmi.n	5c1c <__aeabi_dsub+0x1e4>
    5c1a:	e142      	b.n	5ea2 <__aeabi_dsub+0x46a>
    5c1c:	4a5f      	ldr	r2, [pc, #380]	; (5d9c <__aeabi_dsub+0x364>)
    5c1e:	3401      	adds	r4, #1
    5c20:	4294      	cmp	r4, r2
    5c22:	d100      	bne.n	5c26 <__aeabi_dsub+0x1ee>
    5c24:	e14e      	b.n	5ec4 <__aeabi_dsub+0x48c>
    5c26:	2001      	movs	r0, #1
    5c28:	4a5d      	ldr	r2, [pc, #372]	; (5da0 <__aeabi_dsub+0x368>)
    5c2a:	0869      	lsrs	r1, r5, #1
    5c2c:	403a      	ands	r2, r7
    5c2e:	4028      	ands	r0, r5
    5c30:	4308      	orrs	r0, r1
    5c32:	07d5      	lsls	r5, r2, #31
    5c34:	4305      	orrs	r5, r0
    5c36:	0857      	lsrs	r7, r2, #1
    5c38:	469a      	mov	sl, r3
    5c3a:	e729      	b.n	5a90 <__aeabi_dsub+0x58>
    5c3c:	0006      	movs	r6, r0
    5c3e:	430e      	orrs	r6, r1
    5c40:	d000      	beq.n	5c44 <__aeabi_dsub+0x20c>
    5c42:	e717      	b.n	5a74 <__aeabi_dsub+0x3c>
    5c44:	e714      	b.n	5a70 <__aeabi_dsub+0x38>
    5c46:	0029      	movs	r1, r5
    5c48:	4311      	orrs	r1, r2
    5c4a:	d100      	bne.n	5c4e <__aeabi_dsub+0x216>
    5c4c:	e1f9      	b.n	6042 <__aeabi_dsub+0x60a>
    5c4e:	2180      	movs	r1, #128	; 0x80
    5c50:	0309      	lsls	r1, r1, #12
    5c52:	430a      	orrs	r2, r1
    5c54:	0312      	lsls	r2, r2, #12
    5c56:	0b12      	lsrs	r2, r2, #12
    5c58:	e73b      	b.n	5ad2 <__aeabi_dsub+0x9a>
    5c5a:	2301      	movs	r3, #1
    5c5c:	425b      	negs	r3, r3
    5c5e:	4698      	mov	r8, r3
    5c60:	44c4      	add	ip, r8
    5c62:	4663      	mov	r3, ip
    5c64:	2b00      	cmp	r3, #0
    5c66:	d172      	bne.n	5d4e <__aeabi_dsub+0x316>
    5c68:	1a69      	subs	r1, r5, r1
    5c6a:	428d      	cmp	r5, r1
    5c6c:	419b      	sbcs	r3, r3
    5c6e:	1a3f      	subs	r7, r7, r0
    5c70:	425b      	negs	r3, r3
    5c72:	1aff      	subs	r7, r7, r3
    5c74:	000d      	movs	r5, r1
    5c76:	e768      	b.n	5b4a <__aeabi_dsub+0x112>
    5c78:	0002      	movs	r2, r0
    5c7a:	430a      	orrs	r2, r1
    5c7c:	d100      	bne.n	5c80 <__aeabi_dsub+0x248>
    5c7e:	e707      	b.n	5a90 <__aeabi_dsub+0x58>
    5c80:	2201      	movs	r2, #1
    5c82:	4252      	negs	r2, r2
    5c84:	4690      	mov	r8, r2
    5c86:	44c4      	add	ip, r8
    5c88:	4662      	mov	r2, ip
    5c8a:	2a00      	cmp	r2, #0
    5c8c:	d000      	beq.n	5c90 <__aeabi_dsub+0x258>
    5c8e:	e0e6      	b.n	5e5e <__aeabi_dsub+0x426>
    5c90:	1869      	adds	r1, r5, r1
    5c92:	42a9      	cmp	r1, r5
    5c94:	41b6      	sbcs	r6, r6
    5c96:	183f      	adds	r7, r7, r0
    5c98:	4276      	negs	r6, r6
    5c9a:	19f7      	adds	r7, r6, r7
    5c9c:	000d      	movs	r5, r1
    5c9e:	e7ba      	b.n	5c16 <__aeabi_dsub+0x1de>
    5ca0:	2e00      	cmp	r6, #0
    5ca2:	d000      	beq.n	5ca6 <__aeabi_dsub+0x26e>
    5ca4:	e080      	b.n	5da8 <__aeabi_dsub+0x370>
    5ca6:	1c62      	adds	r2, r4, #1
    5ca8:	0552      	lsls	r2, r2, #21
    5caa:	0d52      	lsrs	r2, r2, #21
    5cac:	2a01      	cmp	r2, #1
    5cae:	dc00      	bgt.n	5cb2 <__aeabi_dsub+0x27a>
    5cb0:	e0f9      	b.n	5ea6 <__aeabi_dsub+0x46e>
    5cb2:	1a6a      	subs	r2, r5, r1
    5cb4:	4691      	mov	r9, r2
    5cb6:	454d      	cmp	r5, r9
    5cb8:	41b6      	sbcs	r6, r6
    5cba:	1a3a      	subs	r2, r7, r0
    5cbc:	4276      	negs	r6, r6
    5cbe:	1b92      	subs	r2, r2, r6
    5cc0:	4690      	mov	r8, r2
    5cc2:	0212      	lsls	r2, r2, #8
    5cc4:	d400      	bmi.n	5cc8 <__aeabi_dsub+0x290>
    5cc6:	e099      	b.n	5dfc <__aeabi_dsub+0x3c4>
    5cc8:	1b4d      	subs	r5, r1, r5
    5cca:	42a9      	cmp	r1, r5
    5ccc:	4189      	sbcs	r1, r1
    5cce:	1bc7      	subs	r7, r0, r7
    5cd0:	4249      	negs	r1, r1
    5cd2:	1a7a      	subs	r2, r7, r1
    5cd4:	4690      	mov	r8, r2
    5cd6:	469a      	mov	sl, r3
    5cd8:	e73c      	b.n	5b54 <__aeabi_dsub+0x11c>
    5cda:	4652      	mov	r2, sl
    5cdc:	2301      	movs	r3, #1
    5cde:	2500      	movs	r5, #0
    5ce0:	4013      	ands	r3, r2
    5ce2:	2200      	movs	r2, #0
    5ce4:	e6f5      	b.n	5ad2 <__aeabi_dsub+0x9a>
    5ce6:	0028      	movs	r0, r5
    5ce8:	f000 fc70 	bl	65cc <__clzsi2>
    5cec:	3020      	adds	r0, #32
    5cee:	0003      	movs	r3, r0
    5cf0:	3b08      	subs	r3, #8
    5cf2:	2b1f      	cmp	r3, #31
    5cf4:	dc00      	bgt.n	5cf8 <__aeabi_dsub+0x2c0>
    5cf6:	e739      	b.n	5b6c <__aeabi_dsub+0x134>
    5cf8:	002a      	movs	r2, r5
    5cfa:	3828      	subs	r0, #40	; 0x28
    5cfc:	4082      	lsls	r2, r0
    5cfe:	2500      	movs	r5, #0
    5d00:	429c      	cmp	r4, r3
    5d02:	dc00      	bgt.n	5d06 <__aeabi_dsub+0x2ce>
    5d04:	e73e      	b.n	5b84 <__aeabi_dsub+0x14c>
    5d06:	4f26      	ldr	r7, [pc, #152]	; (5da0 <__aeabi_dsub+0x368>)
    5d08:	1ae4      	subs	r4, r4, r3
    5d0a:	4017      	ands	r7, r2
    5d0c:	e6c0      	b.n	5a90 <__aeabi_dsub+0x58>
    5d0e:	4301      	orrs	r1, r0
    5d10:	1e48      	subs	r0, r1, #1
    5d12:	4181      	sbcs	r1, r0
    5d14:	2200      	movs	r2, #0
    5d16:	b2c9      	uxtb	r1, r1
    5d18:	e710      	b.n	5b3c <__aeabi_dsub+0x104>
    5d1a:	2e00      	cmp	r6, #0
    5d1c:	d000      	beq.n	5d20 <__aeabi_dsub+0x2e8>
    5d1e:	e0f1      	b.n	5f04 <__aeabi_dsub+0x4cc>
    5d20:	1c62      	adds	r2, r4, #1
    5d22:	4694      	mov	ip, r2
    5d24:	0552      	lsls	r2, r2, #21
    5d26:	0d52      	lsrs	r2, r2, #21
    5d28:	2a01      	cmp	r2, #1
    5d2a:	dc00      	bgt.n	5d2e <__aeabi_dsub+0x2f6>
    5d2c:	e0a0      	b.n	5e70 <__aeabi_dsub+0x438>
    5d2e:	4a1b      	ldr	r2, [pc, #108]	; (5d9c <__aeabi_dsub+0x364>)
    5d30:	4594      	cmp	ip, r2
    5d32:	d100      	bne.n	5d36 <__aeabi_dsub+0x2fe>
    5d34:	e0c5      	b.n	5ec2 <__aeabi_dsub+0x48a>
    5d36:	1869      	adds	r1, r5, r1
    5d38:	42a9      	cmp	r1, r5
    5d3a:	4192      	sbcs	r2, r2
    5d3c:	183f      	adds	r7, r7, r0
    5d3e:	4252      	negs	r2, r2
    5d40:	19d2      	adds	r2, r2, r7
    5d42:	0849      	lsrs	r1, r1, #1
    5d44:	07d5      	lsls	r5, r2, #31
    5d46:	430d      	orrs	r5, r1
    5d48:	0857      	lsrs	r7, r2, #1
    5d4a:	4664      	mov	r4, ip
    5d4c:	e6a0      	b.n	5a90 <__aeabi_dsub+0x58>
    5d4e:	4b13      	ldr	r3, [pc, #76]	; (5d9c <__aeabi_dsub+0x364>)
    5d50:	429c      	cmp	r4, r3
    5d52:	d000      	beq.n	5d56 <__aeabi_dsub+0x31e>
    5d54:	e6d9      	b.n	5b0a <__aeabi_dsub+0xd2>
    5d56:	e69b      	b.n	5a90 <__aeabi_dsub+0x58>
    5d58:	0011      	movs	r1, r2
    5d5a:	3c1f      	subs	r4, #31
    5d5c:	40e1      	lsrs	r1, r4
    5d5e:	000c      	movs	r4, r1
    5d60:	2b20      	cmp	r3, #32
    5d62:	d100      	bne.n	5d66 <__aeabi_dsub+0x32e>
    5d64:	e080      	b.n	5e68 <__aeabi_dsub+0x430>
    5d66:	2140      	movs	r1, #64	; 0x40
    5d68:	1acb      	subs	r3, r1, r3
    5d6a:	409a      	lsls	r2, r3
    5d6c:	4315      	orrs	r5, r2
    5d6e:	1e6a      	subs	r2, r5, #1
    5d70:	4195      	sbcs	r5, r2
    5d72:	2700      	movs	r7, #0
    5d74:	4325      	orrs	r5, r4
    5d76:	2400      	movs	r4, #0
    5d78:	e71f      	b.n	5bba <__aeabi_dsub+0x182>
    5d7a:	4663      	mov	r3, ip
    5d7c:	0002      	movs	r2, r0
    5d7e:	3b20      	subs	r3, #32
    5d80:	40da      	lsrs	r2, r3
    5d82:	4663      	mov	r3, ip
    5d84:	2b20      	cmp	r3, #32
    5d86:	d071      	beq.n	5e6c <__aeabi_dsub+0x434>
    5d88:	2340      	movs	r3, #64	; 0x40
    5d8a:	4666      	mov	r6, ip
    5d8c:	1b9b      	subs	r3, r3, r6
    5d8e:	4098      	lsls	r0, r3
    5d90:	4301      	orrs	r1, r0
    5d92:	1e48      	subs	r0, r1, #1
    5d94:	4181      	sbcs	r1, r0
    5d96:	4311      	orrs	r1, r2
    5d98:	2200      	movs	r2, #0
    5d9a:	e6cf      	b.n	5b3c <__aeabi_dsub+0x104>
    5d9c:	000007ff 	.word	0x000007ff
    5da0:	ff7fffff 	.word	0xff7fffff
    5da4:	800fffff 	.word	0x800fffff
    5da8:	2c00      	cmp	r4, #0
    5daa:	d048      	beq.n	5e3e <__aeabi_dsub+0x406>
    5dac:	4cca      	ldr	r4, [pc, #808]	; (60d8 <__aeabi_dsub+0x6a0>)
    5dae:	42a2      	cmp	r2, r4
    5db0:	d100      	bne.n	5db4 <__aeabi_dsub+0x37c>
    5db2:	e0a2      	b.n	5efa <__aeabi_dsub+0x4c2>
    5db4:	4274      	negs	r4, r6
    5db6:	46a1      	mov	r9, r4
    5db8:	2480      	movs	r4, #128	; 0x80
    5dba:	0424      	lsls	r4, r4, #16
    5dbc:	4327      	orrs	r7, r4
    5dbe:	464c      	mov	r4, r9
    5dc0:	2c38      	cmp	r4, #56	; 0x38
    5dc2:	dd00      	ble.n	5dc6 <__aeabi_dsub+0x38e>
    5dc4:	e0db      	b.n	5f7e <__aeabi_dsub+0x546>
    5dc6:	2c1f      	cmp	r4, #31
    5dc8:	dd00      	ble.n	5dcc <__aeabi_dsub+0x394>
    5dca:	e144      	b.n	6056 <__aeabi_dsub+0x61e>
    5dcc:	464e      	mov	r6, r9
    5dce:	2420      	movs	r4, #32
    5dd0:	1ba4      	subs	r4, r4, r6
    5dd2:	003e      	movs	r6, r7
    5dd4:	40a6      	lsls	r6, r4
    5dd6:	46a2      	mov	sl, r4
    5dd8:	46b0      	mov	r8, r6
    5dda:	464c      	mov	r4, r9
    5ddc:	002e      	movs	r6, r5
    5dde:	40e6      	lsrs	r6, r4
    5de0:	46b4      	mov	ip, r6
    5de2:	4646      	mov	r6, r8
    5de4:	4664      	mov	r4, ip
    5de6:	4326      	orrs	r6, r4
    5de8:	4654      	mov	r4, sl
    5dea:	40a5      	lsls	r5, r4
    5dec:	1e6c      	subs	r4, r5, #1
    5dee:	41a5      	sbcs	r5, r4
    5df0:	0034      	movs	r4, r6
    5df2:	432c      	orrs	r4, r5
    5df4:	464d      	mov	r5, r9
    5df6:	40ef      	lsrs	r7, r5
    5df8:	1b0d      	subs	r5, r1, r4
    5dfa:	e028      	b.n	5e4e <__aeabi_dsub+0x416>
    5dfc:	464a      	mov	r2, r9
    5dfe:	4643      	mov	r3, r8
    5e00:	464d      	mov	r5, r9
    5e02:	431a      	orrs	r2, r3
    5e04:	d000      	beq.n	5e08 <__aeabi_dsub+0x3d0>
    5e06:	e6a5      	b.n	5b54 <__aeabi_dsub+0x11c>
    5e08:	2300      	movs	r3, #0
    5e0a:	2400      	movs	r4, #0
    5e0c:	2500      	movs	r5, #0
    5e0e:	e6de      	b.n	5bce <__aeabi_dsub+0x196>
    5e10:	2a1f      	cmp	r2, #31
    5e12:	dc5a      	bgt.n	5eca <__aeabi_dsub+0x492>
    5e14:	4666      	mov	r6, ip
    5e16:	2220      	movs	r2, #32
    5e18:	1b92      	subs	r2, r2, r6
    5e1a:	0006      	movs	r6, r0
    5e1c:	4096      	lsls	r6, r2
    5e1e:	4691      	mov	r9, r2
    5e20:	46b0      	mov	r8, r6
    5e22:	4662      	mov	r2, ip
    5e24:	000e      	movs	r6, r1
    5e26:	40d6      	lsrs	r6, r2
    5e28:	4642      	mov	r2, r8
    5e2a:	4316      	orrs	r6, r2
    5e2c:	464a      	mov	r2, r9
    5e2e:	4091      	lsls	r1, r2
    5e30:	1e4a      	subs	r2, r1, #1
    5e32:	4191      	sbcs	r1, r2
    5e34:	0002      	movs	r2, r0
    5e36:	4660      	mov	r0, ip
    5e38:	4331      	orrs	r1, r6
    5e3a:	40c2      	lsrs	r2, r0
    5e3c:	e6e4      	b.n	5c08 <__aeabi_dsub+0x1d0>
    5e3e:	003c      	movs	r4, r7
    5e40:	432c      	orrs	r4, r5
    5e42:	d05a      	beq.n	5efa <__aeabi_dsub+0x4c2>
    5e44:	43f4      	mvns	r4, r6
    5e46:	46a1      	mov	r9, r4
    5e48:	2c00      	cmp	r4, #0
    5e4a:	d152      	bne.n	5ef2 <__aeabi_dsub+0x4ba>
    5e4c:	1b4d      	subs	r5, r1, r5
    5e4e:	42a9      	cmp	r1, r5
    5e50:	4189      	sbcs	r1, r1
    5e52:	1bc7      	subs	r7, r0, r7
    5e54:	4249      	negs	r1, r1
    5e56:	1a7f      	subs	r7, r7, r1
    5e58:	0014      	movs	r4, r2
    5e5a:	469a      	mov	sl, r3
    5e5c:	e675      	b.n	5b4a <__aeabi_dsub+0x112>
    5e5e:	4a9e      	ldr	r2, [pc, #632]	; (60d8 <__aeabi_dsub+0x6a0>)
    5e60:	4294      	cmp	r4, r2
    5e62:	d000      	beq.n	5e66 <__aeabi_dsub+0x42e>
    5e64:	e6c7      	b.n	5bf6 <__aeabi_dsub+0x1be>
    5e66:	e613      	b.n	5a90 <__aeabi_dsub+0x58>
    5e68:	2200      	movs	r2, #0
    5e6a:	e77f      	b.n	5d6c <__aeabi_dsub+0x334>
    5e6c:	2000      	movs	r0, #0
    5e6e:	e78f      	b.n	5d90 <__aeabi_dsub+0x358>
    5e70:	2c00      	cmp	r4, #0
    5e72:	d000      	beq.n	5e76 <__aeabi_dsub+0x43e>
    5e74:	e0c8      	b.n	6008 <__aeabi_dsub+0x5d0>
    5e76:	003b      	movs	r3, r7
    5e78:	432b      	orrs	r3, r5
    5e7a:	d100      	bne.n	5e7e <__aeabi_dsub+0x446>
    5e7c:	e10f      	b.n	609e <__aeabi_dsub+0x666>
    5e7e:	0003      	movs	r3, r0
    5e80:	430b      	orrs	r3, r1
    5e82:	d100      	bne.n	5e86 <__aeabi_dsub+0x44e>
    5e84:	e604      	b.n	5a90 <__aeabi_dsub+0x58>
    5e86:	1869      	adds	r1, r5, r1
    5e88:	42a9      	cmp	r1, r5
    5e8a:	419b      	sbcs	r3, r3
    5e8c:	183f      	adds	r7, r7, r0
    5e8e:	425b      	negs	r3, r3
    5e90:	19df      	adds	r7, r3, r7
    5e92:	023b      	lsls	r3, r7, #8
    5e94:	d400      	bmi.n	5e98 <__aeabi_dsub+0x460>
    5e96:	e11a      	b.n	60ce <__aeabi_dsub+0x696>
    5e98:	4b90      	ldr	r3, [pc, #576]	; (60dc <__aeabi_dsub+0x6a4>)
    5e9a:	000d      	movs	r5, r1
    5e9c:	401f      	ands	r7, r3
    5e9e:	4664      	mov	r4, ip
    5ea0:	e5f6      	b.n	5a90 <__aeabi_dsub+0x58>
    5ea2:	469a      	mov	sl, r3
    5ea4:	e689      	b.n	5bba <__aeabi_dsub+0x182>
    5ea6:	003a      	movs	r2, r7
    5ea8:	432a      	orrs	r2, r5
    5eaa:	2c00      	cmp	r4, #0
    5eac:	d15c      	bne.n	5f68 <__aeabi_dsub+0x530>
    5eae:	2a00      	cmp	r2, #0
    5eb0:	d175      	bne.n	5f9e <__aeabi_dsub+0x566>
    5eb2:	0002      	movs	r2, r0
    5eb4:	430a      	orrs	r2, r1
    5eb6:	d100      	bne.n	5eba <__aeabi_dsub+0x482>
    5eb8:	e0ca      	b.n	6050 <__aeabi_dsub+0x618>
    5eba:	0007      	movs	r7, r0
    5ebc:	000d      	movs	r5, r1
    5ebe:	469a      	mov	sl, r3
    5ec0:	e5e6      	b.n	5a90 <__aeabi_dsub+0x58>
    5ec2:	4664      	mov	r4, ip
    5ec4:	2200      	movs	r2, #0
    5ec6:	2500      	movs	r5, #0
    5ec8:	e681      	b.n	5bce <__aeabi_dsub+0x196>
    5eca:	4662      	mov	r2, ip
    5ecc:	0006      	movs	r6, r0
    5ece:	3a20      	subs	r2, #32
    5ed0:	40d6      	lsrs	r6, r2
    5ed2:	4662      	mov	r2, ip
    5ed4:	46b0      	mov	r8, r6
    5ed6:	2a20      	cmp	r2, #32
    5ed8:	d100      	bne.n	5edc <__aeabi_dsub+0x4a4>
    5eda:	e0b7      	b.n	604c <__aeabi_dsub+0x614>
    5edc:	2240      	movs	r2, #64	; 0x40
    5ede:	4666      	mov	r6, ip
    5ee0:	1b92      	subs	r2, r2, r6
    5ee2:	4090      	lsls	r0, r2
    5ee4:	4301      	orrs	r1, r0
    5ee6:	4642      	mov	r2, r8
    5ee8:	1e48      	subs	r0, r1, #1
    5eea:	4181      	sbcs	r1, r0
    5eec:	4311      	orrs	r1, r2
    5eee:	2200      	movs	r2, #0
    5ef0:	e68a      	b.n	5c08 <__aeabi_dsub+0x1d0>
    5ef2:	4c79      	ldr	r4, [pc, #484]	; (60d8 <__aeabi_dsub+0x6a0>)
    5ef4:	42a2      	cmp	r2, r4
    5ef6:	d000      	beq.n	5efa <__aeabi_dsub+0x4c2>
    5ef8:	e761      	b.n	5dbe <__aeabi_dsub+0x386>
    5efa:	0007      	movs	r7, r0
    5efc:	000d      	movs	r5, r1
    5efe:	0014      	movs	r4, r2
    5f00:	469a      	mov	sl, r3
    5f02:	e5c5      	b.n	5a90 <__aeabi_dsub+0x58>
    5f04:	2c00      	cmp	r4, #0
    5f06:	d141      	bne.n	5f8c <__aeabi_dsub+0x554>
    5f08:	003c      	movs	r4, r7
    5f0a:	432c      	orrs	r4, r5
    5f0c:	d078      	beq.n	6000 <__aeabi_dsub+0x5c8>
    5f0e:	43f4      	mvns	r4, r6
    5f10:	46a1      	mov	r9, r4
    5f12:	2c00      	cmp	r4, #0
    5f14:	d020      	beq.n	5f58 <__aeabi_dsub+0x520>
    5f16:	4c70      	ldr	r4, [pc, #448]	; (60d8 <__aeabi_dsub+0x6a0>)
    5f18:	42a2      	cmp	r2, r4
    5f1a:	d071      	beq.n	6000 <__aeabi_dsub+0x5c8>
    5f1c:	464c      	mov	r4, r9
    5f1e:	2c38      	cmp	r4, #56	; 0x38
    5f20:	dd00      	ble.n	5f24 <__aeabi_dsub+0x4ec>
    5f22:	e0b2      	b.n	608a <__aeabi_dsub+0x652>
    5f24:	2c1f      	cmp	r4, #31
    5f26:	dd00      	ble.n	5f2a <__aeabi_dsub+0x4f2>
    5f28:	e0bc      	b.n	60a4 <__aeabi_dsub+0x66c>
    5f2a:	2620      	movs	r6, #32
    5f2c:	1b34      	subs	r4, r6, r4
    5f2e:	46a2      	mov	sl, r4
    5f30:	003c      	movs	r4, r7
    5f32:	4656      	mov	r6, sl
    5f34:	40b4      	lsls	r4, r6
    5f36:	464e      	mov	r6, r9
    5f38:	46a0      	mov	r8, r4
    5f3a:	002c      	movs	r4, r5
    5f3c:	40f4      	lsrs	r4, r6
    5f3e:	46a4      	mov	ip, r4
    5f40:	4644      	mov	r4, r8
    5f42:	4666      	mov	r6, ip
    5f44:	4334      	orrs	r4, r6
    5f46:	46a4      	mov	ip, r4
    5f48:	4654      	mov	r4, sl
    5f4a:	40a5      	lsls	r5, r4
    5f4c:	4664      	mov	r4, ip
    5f4e:	1e6e      	subs	r6, r5, #1
    5f50:	41b5      	sbcs	r5, r6
    5f52:	4325      	orrs	r5, r4
    5f54:	464c      	mov	r4, r9
    5f56:	40e7      	lsrs	r7, r4
    5f58:	186d      	adds	r5, r5, r1
    5f5a:	428d      	cmp	r5, r1
    5f5c:	4189      	sbcs	r1, r1
    5f5e:	183f      	adds	r7, r7, r0
    5f60:	4249      	negs	r1, r1
    5f62:	19cf      	adds	r7, r1, r7
    5f64:	0014      	movs	r4, r2
    5f66:	e656      	b.n	5c16 <__aeabi_dsub+0x1de>
    5f68:	2a00      	cmp	r2, #0
    5f6a:	d12f      	bne.n	5fcc <__aeabi_dsub+0x594>
    5f6c:	0002      	movs	r2, r0
    5f6e:	430a      	orrs	r2, r1
    5f70:	d100      	bne.n	5f74 <__aeabi_dsub+0x53c>
    5f72:	e084      	b.n	607e <__aeabi_dsub+0x646>
    5f74:	0007      	movs	r7, r0
    5f76:	000d      	movs	r5, r1
    5f78:	469a      	mov	sl, r3
    5f7a:	4c57      	ldr	r4, [pc, #348]	; (60d8 <__aeabi_dsub+0x6a0>)
    5f7c:	e588      	b.n	5a90 <__aeabi_dsub+0x58>
    5f7e:	433d      	orrs	r5, r7
    5f80:	1e6f      	subs	r7, r5, #1
    5f82:	41bd      	sbcs	r5, r7
    5f84:	b2ec      	uxtb	r4, r5
    5f86:	2700      	movs	r7, #0
    5f88:	1b0d      	subs	r5, r1, r4
    5f8a:	e760      	b.n	5e4e <__aeabi_dsub+0x416>
    5f8c:	4c52      	ldr	r4, [pc, #328]	; (60d8 <__aeabi_dsub+0x6a0>)
    5f8e:	42a2      	cmp	r2, r4
    5f90:	d036      	beq.n	6000 <__aeabi_dsub+0x5c8>
    5f92:	4274      	negs	r4, r6
    5f94:	2680      	movs	r6, #128	; 0x80
    5f96:	0436      	lsls	r6, r6, #16
    5f98:	46a1      	mov	r9, r4
    5f9a:	4337      	orrs	r7, r6
    5f9c:	e7be      	b.n	5f1c <__aeabi_dsub+0x4e4>
    5f9e:	0002      	movs	r2, r0
    5fa0:	430a      	orrs	r2, r1
    5fa2:	d100      	bne.n	5fa6 <__aeabi_dsub+0x56e>
    5fa4:	e574      	b.n	5a90 <__aeabi_dsub+0x58>
    5fa6:	1a6a      	subs	r2, r5, r1
    5fa8:	4690      	mov	r8, r2
    5faa:	4545      	cmp	r5, r8
    5fac:	41b6      	sbcs	r6, r6
    5fae:	1a3a      	subs	r2, r7, r0
    5fb0:	4276      	negs	r6, r6
    5fb2:	1b92      	subs	r2, r2, r6
    5fb4:	4694      	mov	ip, r2
    5fb6:	0212      	lsls	r2, r2, #8
    5fb8:	d400      	bmi.n	5fbc <__aeabi_dsub+0x584>
    5fba:	e5f7      	b.n	5bac <__aeabi_dsub+0x174>
    5fbc:	1b4d      	subs	r5, r1, r5
    5fbe:	42a9      	cmp	r1, r5
    5fc0:	4189      	sbcs	r1, r1
    5fc2:	1bc7      	subs	r7, r0, r7
    5fc4:	4249      	negs	r1, r1
    5fc6:	1a7f      	subs	r7, r7, r1
    5fc8:	469a      	mov	sl, r3
    5fca:	e561      	b.n	5a90 <__aeabi_dsub+0x58>
    5fcc:	0002      	movs	r2, r0
    5fce:	430a      	orrs	r2, r1
    5fd0:	d03a      	beq.n	6048 <__aeabi_dsub+0x610>
    5fd2:	08ed      	lsrs	r5, r5, #3
    5fd4:	077c      	lsls	r4, r7, #29
    5fd6:	432c      	orrs	r4, r5
    5fd8:	2580      	movs	r5, #128	; 0x80
    5fda:	08fa      	lsrs	r2, r7, #3
    5fdc:	032d      	lsls	r5, r5, #12
    5fde:	422a      	tst	r2, r5
    5fe0:	d008      	beq.n	5ff4 <__aeabi_dsub+0x5bc>
    5fe2:	08c7      	lsrs	r7, r0, #3
    5fe4:	422f      	tst	r7, r5
    5fe6:	d105      	bne.n	5ff4 <__aeabi_dsub+0x5bc>
    5fe8:	0745      	lsls	r5, r0, #29
    5fea:	002c      	movs	r4, r5
    5fec:	003a      	movs	r2, r7
    5fee:	469a      	mov	sl, r3
    5ff0:	08c9      	lsrs	r1, r1, #3
    5ff2:	430c      	orrs	r4, r1
    5ff4:	0f67      	lsrs	r7, r4, #29
    5ff6:	00d2      	lsls	r2, r2, #3
    5ff8:	00e5      	lsls	r5, r4, #3
    5ffa:	4317      	orrs	r7, r2
    5ffc:	4c36      	ldr	r4, [pc, #216]	; (60d8 <__aeabi_dsub+0x6a0>)
    5ffe:	e547      	b.n	5a90 <__aeabi_dsub+0x58>
    6000:	0007      	movs	r7, r0
    6002:	000d      	movs	r5, r1
    6004:	0014      	movs	r4, r2
    6006:	e543      	b.n	5a90 <__aeabi_dsub+0x58>
    6008:	003a      	movs	r2, r7
    600a:	432a      	orrs	r2, r5
    600c:	d043      	beq.n	6096 <__aeabi_dsub+0x65e>
    600e:	0002      	movs	r2, r0
    6010:	430a      	orrs	r2, r1
    6012:	d019      	beq.n	6048 <__aeabi_dsub+0x610>
    6014:	08ed      	lsrs	r5, r5, #3
    6016:	077c      	lsls	r4, r7, #29
    6018:	432c      	orrs	r4, r5
    601a:	2580      	movs	r5, #128	; 0x80
    601c:	08fa      	lsrs	r2, r7, #3
    601e:	032d      	lsls	r5, r5, #12
    6020:	422a      	tst	r2, r5
    6022:	d007      	beq.n	6034 <__aeabi_dsub+0x5fc>
    6024:	08c6      	lsrs	r6, r0, #3
    6026:	422e      	tst	r6, r5
    6028:	d104      	bne.n	6034 <__aeabi_dsub+0x5fc>
    602a:	0747      	lsls	r7, r0, #29
    602c:	003c      	movs	r4, r7
    602e:	0032      	movs	r2, r6
    6030:	08c9      	lsrs	r1, r1, #3
    6032:	430c      	orrs	r4, r1
    6034:	00d7      	lsls	r7, r2, #3
    6036:	0f62      	lsrs	r2, r4, #29
    6038:	00e5      	lsls	r5, r4, #3
    603a:	4317      	orrs	r7, r2
    603c:	469a      	mov	sl, r3
    603e:	4c26      	ldr	r4, [pc, #152]	; (60d8 <__aeabi_dsub+0x6a0>)
    6040:	e526      	b.n	5a90 <__aeabi_dsub+0x58>
    6042:	2200      	movs	r2, #0
    6044:	2500      	movs	r5, #0
    6046:	e544      	b.n	5ad2 <__aeabi_dsub+0x9a>
    6048:	4c23      	ldr	r4, [pc, #140]	; (60d8 <__aeabi_dsub+0x6a0>)
    604a:	e521      	b.n	5a90 <__aeabi_dsub+0x58>
    604c:	2000      	movs	r0, #0
    604e:	e749      	b.n	5ee4 <__aeabi_dsub+0x4ac>
    6050:	2300      	movs	r3, #0
    6052:	2500      	movs	r5, #0
    6054:	e5bb      	b.n	5bce <__aeabi_dsub+0x196>
    6056:	464c      	mov	r4, r9
    6058:	003e      	movs	r6, r7
    605a:	3c20      	subs	r4, #32
    605c:	40e6      	lsrs	r6, r4
    605e:	464c      	mov	r4, r9
    6060:	46b4      	mov	ip, r6
    6062:	2c20      	cmp	r4, #32
    6064:	d031      	beq.n	60ca <__aeabi_dsub+0x692>
    6066:	2440      	movs	r4, #64	; 0x40
    6068:	464e      	mov	r6, r9
    606a:	1ba6      	subs	r6, r4, r6
    606c:	40b7      	lsls	r7, r6
    606e:	433d      	orrs	r5, r7
    6070:	1e6c      	subs	r4, r5, #1
    6072:	41a5      	sbcs	r5, r4
    6074:	4664      	mov	r4, ip
    6076:	432c      	orrs	r4, r5
    6078:	2700      	movs	r7, #0
    607a:	1b0d      	subs	r5, r1, r4
    607c:	e6e7      	b.n	5e4e <__aeabi_dsub+0x416>
    607e:	2280      	movs	r2, #128	; 0x80
    6080:	2300      	movs	r3, #0
    6082:	0312      	lsls	r2, r2, #12
    6084:	4c14      	ldr	r4, [pc, #80]	; (60d8 <__aeabi_dsub+0x6a0>)
    6086:	2500      	movs	r5, #0
    6088:	e5a1      	b.n	5bce <__aeabi_dsub+0x196>
    608a:	433d      	orrs	r5, r7
    608c:	1e6f      	subs	r7, r5, #1
    608e:	41bd      	sbcs	r5, r7
    6090:	2700      	movs	r7, #0
    6092:	b2ed      	uxtb	r5, r5
    6094:	e760      	b.n	5f58 <__aeabi_dsub+0x520>
    6096:	0007      	movs	r7, r0
    6098:	000d      	movs	r5, r1
    609a:	4c0f      	ldr	r4, [pc, #60]	; (60d8 <__aeabi_dsub+0x6a0>)
    609c:	e4f8      	b.n	5a90 <__aeabi_dsub+0x58>
    609e:	0007      	movs	r7, r0
    60a0:	000d      	movs	r5, r1
    60a2:	e4f5      	b.n	5a90 <__aeabi_dsub+0x58>
    60a4:	464e      	mov	r6, r9
    60a6:	003c      	movs	r4, r7
    60a8:	3e20      	subs	r6, #32
    60aa:	40f4      	lsrs	r4, r6
    60ac:	46a0      	mov	r8, r4
    60ae:	464c      	mov	r4, r9
    60b0:	2c20      	cmp	r4, #32
    60b2:	d00e      	beq.n	60d2 <__aeabi_dsub+0x69a>
    60b4:	2440      	movs	r4, #64	; 0x40
    60b6:	464e      	mov	r6, r9
    60b8:	1ba4      	subs	r4, r4, r6
    60ba:	40a7      	lsls	r7, r4
    60bc:	433d      	orrs	r5, r7
    60be:	1e6f      	subs	r7, r5, #1
    60c0:	41bd      	sbcs	r5, r7
    60c2:	4644      	mov	r4, r8
    60c4:	2700      	movs	r7, #0
    60c6:	4325      	orrs	r5, r4
    60c8:	e746      	b.n	5f58 <__aeabi_dsub+0x520>
    60ca:	2700      	movs	r7, #0
    60cc:	e7cf      	b.n	606e <__aeabi_dsub+0x636>
    60ce:	000d      	movs	r5, r1
    60d0:	e573      	b.n	5bba <__aeabi_dsub+0x182>
    60d2:	2700      	movs	r7, #0
    60d4:	e7f2      	b.n	60bc <__aeabi_dsub+0x684>
    60d6:	46c0      	nop			; (mov r8, r8)
    60d8:	000007ff 	.word	0x000007ff
    60dc:	ff7fffff 	.word	0xff7fffff

000060e0 <__aeabi_dcmpun>:
    60e0:	b570      	push	{r4, r5, r6, lr}
    60e2:	4e0e      	ldr	r6, [pc, #56]	; (611c <__aeabi_dcmpun+0x3c>)
    60e4:	030c      	lsls	r4, r1, #12
    60e6:	031d      	lsls	r5, r3, #12
    60e8:	0049      	lsls	r1, r1, #1
    60ea:	005b      	lsls	r3, r3, #1
    60ec:	0b24      	lsrs	r4, r4, #12
    60ee:	0d49      	lsrs	r1, r1, #21
    60f0:	0b2d      	lsrs	r5, r5, #12
    60f2:	0d5b      	lsrs	r3, r3, #21
    60f4:	42b1      	cmp	r1, r6
    60f6:	d004      	beq.n	6102 <__aeabi_dcmpun+0x22>
    60f8:	4908      	ldr	r1, [pc, #32]	; (611c <__aeabi_dcmpun+0x3c>)
    60fa:	2000      	movs	r0, #0
    60fc:	428b      	cmp	r3, r1
    60fe:	d008      	beq.n	6112 <__aeabi_dcmpun+0x32>
    6100:	bd70      	pop	{r4, r5, r6, pc}
    6102:	4304      	orrs	r4, r0
    6104:	2001      	movs	r0, #1
    6106:	2c00      	cmp	r4, #0
    6108:	d1fa      	bne.n	6100 <__aeabi_dcmpun+0x20>
    610a:	4904      	ldr	r1, [pc, #16]	; (611c <__aeabi_dcmpun+0x3c>)
    610c:	2000      	movs	r0, #0
    610e:	428b      	cmp	r3, r1
    6110:	d1f6      	bne.n	6100 <__aeabi_dcmpun+0x20>
    6112:	4315      	orrs	r5, r2
    6114:	0028      	movs	r0, r5
    6116:	1e45      	subs	r5, r0, #1
    6118:	41a8      	sbcs	r0, r5
    611a:	e7f1      	b.n	6100 <__aeabi_dcmpun+0x20>
    611c:	000007ff 	.word	0x000007ff

00006120 <__aeabi_d2iz>:
    6120:	030b      	lsls	r3, r1, #12
    6122:	b530      	push	{r4, r5, lr}
    6124:	4d13      	ldr	r5, [pc, #76]	; (6174 <__aeabi_d2iz+0x54>)
    6126:	0b1a      	lsrs	r2, r3, #12
    6128:	004b      	lsls	r3, r1, #1
    612a:	0d5b      	lsrs	r3, r3, #21
    612c:	0fc9      	lsrs	r1, r1, #31
    612e:	2400      	movs	r4, #0
    6130:	42ab      	cmp	r3, r5
    6132:	dd11      	ble.n	6158 <__aeabi_d2iz+0x38>
    6134:	4c10      	ldr	r4, [pc, #64]	; (6178 <__aeabi_d2iz+0x58>)
    6136:	42a3      	cmp	r3, r4
    6138:	dc10      	bgt.n	615c <__aeabi_d2iz+0x3c>
    613a:	2480      	movs	r4, #128	; 0x80
    613c:	0364      	lsls	r4, r4, #13
    613e:	4322      	orrs	r2, r4
    6140:	4c0e      	ldr	r4, [pc, #56]	; (617c <__aeabi_d2iz+0x5c>)
    6142:	1ae4      	subs	r4, r4, r3
    6144:	2c1f      	cmp	r4, #31
    6146:	dd0c      	ble.n	6162 <__aeabi_d2iz+0x42>
    6148:	480d      	ldr	r0, [pc, #52]	; (6180 <__aeabi_d2iz+0x60>)
    614a:	1ac3      	subs	r3, r0, r3
    614c:	40da      	lsrs	r2, r3
    614e:	0013      	movs	r3, r2
    6150:	425c      	negs	r4, r3
    6152:	2900      	cmp	r1, #0
    6154:	d100      	bne.n	6158 <__aeabi_d2iz+0x38>
    6156:	001c      	movs	r4, r3
    6158:	0020      	movs	r0, r4
    615a:	bd30      	pop	{r4, r5, pc}
    615c:	4b09      	ldr	r3, [pc, #36]	; (6184 <__aeabi_d2iz+0x64>)
    615e:	18cc      	adds	r4, r1, r3
    6160:	e7fa      	b.n	6158 <__aeabi_d2iz+0x38>
    6162:	40e0      	lsrs	r0, r4
    6164:	4c08      	ldr	r4, [pc, #32]	; (6188 <__aeabi_d2iz+0x68>)
    6166:	46a4      	mov	ip, r4
    6168:	4463      	add	r3, ip
    616a:	409a      	lsls	r2, r3
    616c:	0013      	movs	r3, r2
    616e:	4303      	orrs	r3, r0
    6170:	e7ee      	b.n	6150 <__aeabi_d2iz+0x30>
    6172:	46c0      	nop			; (mov r8, r8)
    6174:	000003fe 	.word	0x000003fe
    6178:	0000041d 	.word	0x0000041d
    617c:	00000433 	.word	0x00000433
    6180:	00000413 	.word	0x00000413
    6184:	7fffffff 	.word	0x7fffffff
    6188:	fffffbed 	.word	0xfffffbed

0000618c <__aeabi_i2d>:
    618c:	b570      	push	{r4, r5, r6, lr}
    618e:	2800      	cmp	r0, #0
    6190:	d030      	beq.n	61f4 <__aeabi_i2d+0x68>
    6192:	17c3      	asrs	r3, r0, #31
    6194:	18c4      	adds	r4, r0, r3
    6196:	405c      	eors	r4, r3
    6198:	0fc5      	lsrs	r5, r0, #31
    619a:	0020      	movs	r0, r4
    619c:	f000 fa16 	bl	65cc <__clzsi2>
    61a0:	4b17      	ldr	r3, [pc, #92]	; (6200 <__aeabi_i2d+0x74>)
    61a2:	4a18      	ldr	r2, [pc, #96]	; (6204 <__aeabi_i2d+0x78>)
    61a4:	1a1b      	subs	r3, r3, r0
    61a6:	1ad2      	subs	r2, r2, r3
    61a8:	2a1f      	cmp	r2, #31
    61aa:	dd18      	ble.n	61de <__aeabi_i2d+0x52>
    61ac:	4a16      	ldr	r2, [pc, #88]	; (6208 <__aeabi_i2d+0x7c>)
    61ae:	1ad2      	subs	r2, r2, r3
    61b0:	4094      	lsls	r4, r2
    61b2:	2200      	movs	r2, #0
    61b4:	0324      	lsls	r4, r4, #12
    61b6:	055b      	lsls	r3, r3, #21
    61b8:	0b24      	lsrs	r4, r4, #12
    61ba:	0d5b      	lsrs	r3, r3, #21
    61bc:	2100      	movs	r1, #0
    61be:	0010      	movs	r0, r2
    61c0:	0324      	lsls	r4, r4, #12
    61c2:	0d0a      	lsrs	r2, r1, #20
    61c4:	0512      	lsls	r2, r2, #20
    61c6:	0b24      	lsrs	r4, r4, #12
    61c8:	4314      	orrs	r4, r2
    61ca:	4a10      	ldr	r2, [pc, #64]	; (620c <__aeabi_i2d+0x80>)
    61cc:	051b      	lsls	r3, r3, #20
    61ce:	4014      	ands	r4, r2
    61d0:	431c      	orrs	r4, r3
    61d2:	0064      	lsls	r4, r4, #1
    61d4:	07ed      	lsls	r5, r5, #31
    61d6:	0864      	lsrs	r4, r4, #1
    61d8:	432c      	orrs	r4, r5
    61da:	0021      	movs	r1, r4
    61dc:	bd70      	pop	{r4, r5, r6, pc}
    61de:	0021      	movs	r1, r4
    61e0:	4091      	lsls	r1, r2
    61e2:	000a      	movs	r2, r1
    61e4:	210b      	movs	r1, #11
    61e6:	1a08      	subs	r0, r1, r0
    61e8:	40c4      	lsrs	r4, r0
    61ea:	055b      	lsls	r3, r3, #21
    61ec:	0324      	lsls	r4, r4, #12
    61ee:	0b24      	lsrs	r4, r4, #12
    61f0:	0d5b      	lsrs	r3, r3, #21
    61f2:	e7e3      	b.n	61bc <__aeabi_i2d+0x30>
    61f4:	2500      	movs	r5, #0
    61f6:	2300      	movs	r3, #0
    61f8:	2400      	movs	r4, #0
    61fa:	2200      	movs	r2, #0
    61fc:	e7de      	b.n	61bc <__aeabi_i2d+0x30>
    61fe:	46c0      	nop			; (mov r8, r8)
    6200:	0000041e 	.word	0x0000041e
    6204:	00000433 	.word	0x00000433
    6208:	00000413 	.word	0x00000413
    620c:	800fffff 	.word	0x800fffff

00006210 <__aeabi_ui2d>:
    6210:	b570      	push	{r4, r5, r6, lr}
    6212:	1e05      	subs	r5, r0, #0
    6214:	d028      	beq.n	6268 <__aeabi_ui2d+0x58>
    6216:	f000 f9d9 	bl	65cc <__clzsi2>
    621a:	4b15      	ldr	r3, [pc, #84]	; (6270 <__aeabi_ui2d+0x60>)
    621c:	4a15      	ldr	r2, [pc, #84]	; (6274 <__aeabi_ui2d+0x64>)
    621e:	1a1b      	subs	r3, r3, r0
    6220:	1ad2      	subs	r2, r2, r3
    6222:	2a1f      	cmp	r2, #31
    6224:	dd16      	ble.n	6254 <__aeabi_ui2d+0x44>
    6226:	002c      	movs	r4, r5
    6228:	4a13      	ldr	r2, [pc, #76]	; (6278 <__aeabi_ui2d+0x68>)
    622a:	2500      	movs	r5, #0
    622c:	1ad2      	subs	r2, r2, r3
    622e:	4094      	lsls	r4, r2
    6230:	055a      	lsls	r2, r3, #21
    6232:	0324      	lsls	r4, r4, #12
    6234:	0b24      	lsrs	r4, r4, #12
    6236:	0d52      	lsrs	r2, r2, #21
    6238:	2100      	movs	r1, #0
    623a:	0324      	lsls	r4, r4, #12
    623c:	0d0b      	lsrs	r3, r1, #20
    623e:	0b24      	lsrs	r4, r4, #12
    6240:	051b      	lsls	r3, r3, #20
    6242:	4323      	orrs	r3, r4
    6244:	4c0d      	ldr	r4, [pc, #52]	; (627c <__aeabi_ui2d+0x6c>)
    6246:	0512      	lsls	r2, r2, #20
    6248:	4023      	ands	r3, r4
    624a:	4313      	orrs	r3, r2
    624c:	005b      	lsls	r3, r3, #1
    624e:	0028      	movs	r0, r5
    6250:	0859      	lsrs	r1, r3, #1
    6252:	bd70      	pop	{r4, r5, r6, pc}
    6254:	210b      	movs	r1, #11
    6256:	002c      	movs	r4, r5
    6258:	1a08      	subs	r0, r1, r0
    625a:	40c4      	lsrs	r4, r0
    625c:	4095      	lsls	r5, r2
    625e:	0324      	lsls	r4, r4, #12
    6260:	055a      	lsls	r2, r3, #21
    6262:	0b24      	lsrs	r4, r4, #12
    6264:	0d52      	lsrs	r2, r2, #21
    6266:	e7e7      	b.n	6238 <__aeabi_ui2d+0x28>
    6268:	2200      	movs	r2, #0
    626a:	2400      	movs	r4, #0
    626c:	e7e4      	b.n	6238 <__aeabi_ui2d+0x28>
    626e:	46c0      	nop			; (mov r8, r8)
    6270:	0000041e 	.word	0x0000041e
    6274:	00000433 	.word	0x00000433
    6278:	00000413 	.word	0x00000413
    627c:	800fffff 	.word	0x800fffff

00006280 <__aeabi_f2d>:
    6280:	0042      	lsls	r2, r0, #1
    6282:	0e12      	lsrs	r2, r2, #24
    6284:	1c51      	adds	r1, r2, #1
    6286:	0243      	lsls	r3, r0, #9
    6288:	b2c9      	uxtb	r1, r1
    628a:	b570      	push	{r4, r5, r6, lr}
    628c:	0a5d      	lsrs	r5, r3, #9
    628e:	0fc4      	lsrs	r4, r0, #31
    6290:	2901      	cmp	r1, #1
    6292:	dd15      	ble.n	62c0 <__aeabi_f2d+0x40>
    6294:	21e0      	movs	r1, #224	; 0xe0
    6296:	0089      	lsls	r1, r1, #2
    6298:	468c      	mov	ip, r1
    629a:	076d      	lsls	r5, r5, #29
    629c:	0b1b      	lsrs	r3, r3, #12
    629e:	4462      	add	r2, ip
    62a0:	2100      	movs	r1, #0
    62a2:	0028      	movs	r0, r5
    62a4:	0d0d      	lsrs	r5, r1, #20
    62a6:	052d      	lsls	r5, r5, #20
    62a8:	432b      	orrs	r3, r5
    62aa:	4d1c      	ldr	r5, [pc, #112]	; (631c <__aeabi_f2d+0x9c>)
    62ac:	0552      	lsls	r2, r2, #21
    62ae:	402b      	ands	r3, r5
    62b0:	0852      	lsrs	r2, r2, #1
    62b2:	4313      	orrs	r3, r2
    62b4:	005b      	lsls	r3, r3, #1
    62b6:	07e4      	lsls	r4, r4, #31
    62b8:	085b      	lsrs	r3, r3, #1
    62ba:	4323      	orrs	r3, r4
    62bc:	0019      	movs	r1, r3
    62be:	bd70      	pop	{r4, r5, r6, pc}
    62c0:	2a00      	cmp	r2, #0
    62c2:	d115      	bne.n	62f0 <__aeabi_f2d+0x70>
    62c4:	2d00      	cmp	r5, #0
    62c6:	d01f      	beq.n	6308 <__aeabi_f2d+0x88>
    62c8:	0028      	movs	r0, r5
    62ca:	f000 f97f 	bl	65cc <__clzsi2>
    62ce:	280a      	cmp	r0, #10
    62d0:	dc1d      	bgt.n	630e <__aeabi_f2d+0x8e>
    62d2:	230b      	movs	r3, #11
    62d4:	002a      	movs	r2, r5
    62d6:	1a1b      	subs	r3, r3, r0
    62d8:	40da      	lsrs	r2, r3
    62da:	0013      	movs	r3, r2
    62dc:	0002      	movs	r2, r0
    62de:	3215      	adds	r2, #21
    62e0:	4095      	lsls	r5, r2
    62e2:	4a0f      	ldr	r2, [pc, #60]	; (6320 <__aeabi_f2d+0xa0>)
    62e4:	031b      	lsls	r3, r3, #12
    62e6:	1a12      	subs	r2, r2, r0
    62e8:	0552      	lsls	r2, r2, #21
    62ea:	0b1b      	lsrs	r3, r3, #12
    62ec:	0d52      	lsrs	r2, r2, #21
    62ee:	e7d7      	b.n	62a0 <__aeabi_f2d+0x20>
    62f0:	2d00      	cmp	r5, #0
    62f2:	d006      	beq.n	6302 <__aeabi_f2d+0x82>
    62f4:	2280      	movs	r2, #128	; 0x80
    62f6:	0b1b      	lsrs	r3, r3, #12
    62f8:	0312      	lsls	r2, r2, #12
    62fa:	4313      	orrs	r3, r2
    62fc:	076d      	lsls	r5, r5, #29
    62fe:	4a09      	ldr	r2, [pc, #36]	; (6324 <__aeabi_f2d+0xa4>)
    6300:	e7ce      	b.n	62a0 <__aeabi_f2d+0x20>
    6302:	4a08      	ldr	r2, [pc, #32]	; (6324 <__aeabi_f2d+0xa4>)
    6304:	2300      	movs	r3, #0
    6306:	e7cb      	b.n	62a0 <__aeabi_f2d+0x20>
    6308:	2200      	movs	r2, #0
    630a:	2300      	movs	r3, #0
    630c:	e7c8      	b.n	62a0 <__aeabi_f2d+0x20>
    630e:	0003      	movs	r3, r0
    6310:	3b0b      	subs	r3, #11
    6312:	409d      	lsls	r5, r3
    6314:	002b      	movs	r3, r5
    6316:	2500      	movs	r5, #0
    6318:	e7e3      	b.n	62e2 <__aeabi_f2d+0x62>
    631a:	46c0      	nop			; (mov r8, r8)
    631c:	800fffff 	.word	0x800fffff
    6320:	00000389 	.word	0x00000389
    6324:	000007ff 	.word	0x000007ff

00006328 <__aeabi_d2f>:
    6328:	004b      	lsls	r3, r1, #1
    632a:	b570      	push	{r4, r5, r6, lr}
    632c:	0d5e      	lsrs	r6, r3, #21
    632e:	030c      	lsls	r4, r1, #12
    6330:	1c75      	adds	r5, r6, #1
    6332:	0a64      	lsrs	r4, r4, #9
    6334:	0f42      	lsrs	r2, r0, #29
    6336:	056d      	lsls	r5, r5, #21
    6338:	4322      	orrs	r2, r4
    633a:	0fc9      	lsrs	r1, r1, #31
    633c:	00c4      	lsls	r4, r0, #3
    633e:	0d6d      	lsrs	r5, r5, #21
    6340:	2d01      	cmp	r5, #1
    6342:	dd2a      	ble.n	639a <__aeabi_d2f+0x72>
    6344:	4b3b      	ldr	r3, [pc, #236]	; (6434 <__aeabi_d2f+0x10c>)
    6346:	18f3      	adds	r3, r6, r3
    6348:	2bfe      	cmp	r3, #254	; 0xfe
    634a:	dc1a      	bgt.n	6382 <__aeabi_d2f+0x5a>
    634c:	2b00      	cmp	r3, #0
    634e:	dd42      	ble.n	63d6 <__aeabi_d2f+0xae>
    6350:	0180      	lsls	r0, r0, #6
    6352:	1e45      	subs	r5, r0, #1
    6354:	41a8      	sbcs	r0, r5
    6356:	00d2      	lsls	r2, r2, #3
    6358:	4310      	orrs	r0, r2
    635a:	0f62      	lsrs	r2, r4, #29
    635c:	4302      	orrs	r2, r0
    635e:	0750      	lsls	r0, r2, #29
    6360:	d004      	beq.n	636c <__aeabi_d2f+0x44>
    6362:	200f      	movs	r0, #15
    6364:	4010      	ands	r0, r2
    6366:	2804      	cmp	r0, #4
    6368:	d000      	beq.n	636c <__aeabi_d2f+0x44>
    636a:	3204      	adds	r2, #4
    636c:	2080      	movs	r0, #128	; 0x80
    636e:	04c0      	lsls	r0, r0, #19
    6370:	4010      	ands	r0, r2
    6372:	d021      	beq.n	63b8 <__aeabi_d2f+0x90>
    6374:	3301      	adds	r3, #1
    6376:	2bff      	cmp	r3, #255	; 0xff
    6378:	d003      	beq.n	6382 <__aeabi_d2f+0x5a>
    637a:	0192      	lsls	r2, r2, #6
    637c:	0a52      	lsrs	r2, r2, #9
    637e:	b2db      	uxtb	r3, r3
    6380:	e001      	b.n	6386 <__aeabi_d2f+0x5e>
    6382:	23ff      	movs	r3, #255	; 0xff
    6384:	2200      	movs	r2, #0
    6386:	0252      	lsls	r2, r2, #9
    6388:	0a52      	lsrs	r2, r2, #9
    638a:	05db      	lsls	r3, r3, #23
    638c:	4313      	orrs	r3, r2
    638e:	005b      	lsls	r3, r3, #1
    6390:	07c9      	lsls	r1, r1, #31
    6392:	085b      	lsrs	r3, r3, #1
    6394:	430b      	orrs	r3, r1
    6396:	0018      	movs	r0, r3
    6398:	bd70      	pop	{r4, r5, r6, pc}
    639a:	2e00      	cmp	r6, #0
    639c:	d007      	beq.n	63ae <__aeabi_d2f+0x86>
    639e:	4314      	orrs	r4, r2
    63a0:	d0ef      	beq.n	6382 <__aeabi_d2f+0x5a>
    63a2:	2080      	movs	r0, #128	; 0x80
    63a4:	00d2      	lsls	r2, r2, #3
    63a6:	0480      	lsls	r0, r0, #18
    63a8:	4302      	orrs	r2, r0
    63aa:	23ff      	movs	r3, #255	; 0xff
    63ac:	e7d7      	b.n	635e <__aeabi_d2f+0x36>
    63ae:	4322      	orrs	r2, r4
    63b0:	2300      	movs	r3, #0
    63b2:	2a00      	cmp	r2, #0
    63b4:	d003      	beq.n	63be <__aeabi_d2f+0x96>
    63b6:	2205      	movs	r2, #5
    63b8:	08d2      	lsrs	r2, r2, #3
    63ba:	2bff      	cmp	r3, #255	; 0xff
    63bc:	d003      	beq.n	63c6 <__aeabi_d2f+0x9e>
    63be:	0252      	lsls	r2, r2, #9
    63c0:	0a52      	lsrs	r2, r2, #9
    63c2:	b2db      	uxtb	r3, r3
    63c4:	e7df      	b.n	6386 <__aeabi_d2f+0x5e>
    63c6:	2a00      	cmp	r2, #0
    63c8:	d032      	beq.n	6430 <__aeabi_d2f+0x108>
    63ca:	2080      	movs	r0, #128	; 0x80
    63cc:	03c0      	lsls	r0, r0, #15
    63ce:	4302      	orrs	r2, r0
    63d0:	0252      	lsls	r2, r2, #9
    63d2:	0a52      	lsrs	r2, r2, #9
    63d4:	e7d7      	b.n	6386 <__aeabi_d2f+0x5e>
    63d6:	0018      	movs	r0, r3
    63d8:	3017      	adds	r0, #23
    63da:	db14      	blt.n	6406 <__aeabi_d2f+0xde>
    63dc:	2080      	movs	r0, #128	; 0x80
    63de:	0400      	lsls	r0, r0, #16
    63e0:	4302      	orrs	r2, r0
    63e2:	201e      	movs	r0, #30
    63e4:	1ac0      	subs	r0, r0, r3
    63e6:	281f      	cmp	r0, #31
    63e8:	dc0f      	bgt.n	640a <__aeabi_d2f+0xe2>
    63ea:	0025      	movs	r5, r4
    63ec:	4b12      	ldr	r3, [pc, #72]	; (6438 <__aeabi_d2f+0x110>)
    63ee:	18f3      	adds	r3, r6, r3
    63f0:	409d      	lsls	r5, r3
    63f2:	1e6e      	subs	r6, r5, #1
    63f4:	41b5      	sbcs	r5, r6
    63f6:	409a      	lsls	r2, r3
    63f8:	002b      	movs	r3, r5
    63fa:	4313      	orrs	r3, r2
    63fc:	0022      	movs	r2, r4
    63fe:	40c2      	lsrs	r2, r0
    6400:	431a      	orrs	r2, r3
    6402:	2300      	movs	r3, #0
    6404:	e7ab      	b.n	635e <__aeabi_d2f+0x36>
    6406:	2300      	movs	r3, #0
    6408:	e7d5      	b.n	63b6 <__aeabi_d2f+0x8e>
    640a:	2502      	movs	r5, #2
    640c:	426d      	negs	r5, r5
    640e:	1aeb      	subs	r3, r5, r3
    6410:	0015      	movs	r5, r2
    6412:	40dd      	lsrs	r5, r3
    6414:	2820      	cmp	r0, #32
    6416:	d009      	beq.n	642c <__aeabi_d2f+0x104>
    6418:	4b08      	ldr	r3, [pc, #32]	; (643c <__aeabi_d2f+0x114>)
    641a:	18f3      	adds	r3, r6, r3
    641c:	409a      	lsls	r2, r3
    641e:	4314      	orrs	r4, r2
    6420:	1e62      	subs	r2, r4, #1
    6422:	4194      	sbcs	r4, r2
    6424:	0022      	movs	r2, r4
    6426:	2300      	movs	r3, #0
    6428:	432a      	orrs	r2, r5
    642a:	e798      	b.n	635e <__aeabi_d2f+0x36>
    642c:	2200      	movs	r2, #0
    642e:	e7f6      	b.n	641e <__aeabi_d2f+0xf6>
    6430:	2200      	movs	r2, #0
    6432:	e7a8      	b.n	6386 <__aeabi_d2f+0x5e>
    6434:	fffffc80 	.word	0xfffffc80
    6438:	fffffc82 	.word	0xfffffc82
    643c:	fffffca2 	.word	0xfffffca2

00006440 <__aeabi_uidiv>:
    6440:	2200      	movs	r2, #0
    6442:	0843      	lsrs	r3, r0, #1
    6444:	428b      	cmp	r3, r1
    6446:	d374      	bcc.n	6532 <__aeabi_uidiv+0xf2>
    6448:	0903      	lsrs	r3, r0, #4
    644a:	428b      	cmp	r3, r1
    644c:	d35f      	bcc.n	650e <__aeabi_uidiv+0xce>
    644e:	0a03      	lsrs	r3, r0, #8
    6450:	428b      	cmp	r3, r1
    6452:	d344      	bcc.n	64de <__aeabi_uidiv+0x9e>
    6454:	0b03      	lsrs	r3, r0, #12
    6456:	428b      	cmp	r3, r1
    6458:	d328      	bcc.n	64ac <__aeabi_uidiv+0x6c>
    645a:	0c03      	lsrs	r3, r0, #16
    645c:	428b      	cmp	r3, r1
    645e:	d30d      	bcc.n	647c <__aeabi_uidiv+0x3c>
    6460:	22ff      	movs	r2, #255	; 0xff
    6462:	0209      	lsls	r1, r1, #8
    6464:	ba12      	rev	r2, r2
    6466:	0c03      	lsrs	r3, r0, #16
    6468:	428b      	cmp	r3, r1
    646a:	d302      	bcc.n	6472 <__aeabi_uidiv+0x32>
    646c:	1212      	asrs	r2, r2, #8
    646e:	0209      	lsls	r1, r1, #8
    6470:	d065      	beq.n	653e <__aeabi_uidiv+0xfe>
    6472:	0b03      	lsrs	r3, r0, #12
    6474:	428b      	cmp	r3, r1
    6476:	d319      	bcc.n	64ac <__aeabi_uidiv+0x6c>
    6478:	e000      	b.n	647c <__aeabi_uidiv+0x3c>
    647a:	0a09      	lsrs	r1, r1, #8
    647c:	0bc3      	lsrs	r3, r0, #15
    647e:	428b      	cmp	r3, r1
    6480:	d301      	bcc.n	6486 <__aeabi_uidiv+0x46>
    6482:	03cb      	lsls	r3, r1, #15
    6484:	1ac0      	subs	r0, r0, r3
    6486:	4152      	adcs	r2, r2
    6488:	0b83      	lsrs	r3, r0, #14
    648a:	428b      	cmp	r3, r1
    648c:	d301      	bcc.n	6492 <__aeabi_uidiv+0x52>
    648e:	038b      	lsls	r3, r1, #14
    6490:	1ac0      	subs	r0, r0, r3
    6492:	4152      	adcs	r2, r2
    6494:	0b43      	lsrs	r3, r0, #13
    6496:	428b      	cmp	r3, r1
    6498:	d301      	bcc.n	649e <__aeabi_uidiv+0x5e>
    649a:	034b      	lsls	r3, r1, #13
    649c:	1ac0      	subs	r0, r0, r3
    649e:	4152      	adcs	r2, r2
    64a0:	0b03      	lsrs	r3, r0, #12
    64a2:	428b      	cmp	r3, r1
    64a4:	d301      	bcc.n	64aa <__aeabi_uidiv+0x6a>
    64a6:	030b      	lsls	r3, r1, #12
    64a8:	1ac0      	subs	r0, r0, r3
    64aa:	4152      	adcs	r2, r2
    64ac:	0ac3      	lsrs	r3, r0, #11
    64ae:	428b      	cmp	r3, r1
    64b0:	d301      	bcc.n	64b6 <__aeabi_uidiv+0x76>
    64b2:	02cb      	lsls	r3, r1, #11
    64b4:	1ac0      	subs	r0, r0, r3
    64b6:	4152      	adcs	r2, r2
    64b8:	0a83      	lsrs	r3, r0, #10
    64ba:	428b      	cmp	r3, r1
    64bc:	d301      	bcc.n	64c2 <__aeabi_uidiv+0x82>
    64be:	028b      	lsls	r3, r1, #10
    64c0:	1ac0      	subs	r0, r0, r3
    64c2:	4152      	adcs	r2, r2
    64c4:	0a43      	lsrs	r3, r0, #9
    64c6:	428b      	cmp	r3, r1
    64c8:	d301      	bcc.n	64ce <__aeabi_uidiv+0x8e>
    64ca:	024b      	lsls	r3, r1, #9
    64cc:	1ac0      	subs	r0, r0, r3
    64ce:	4152      	adcs	r2, r2
    64d0:	0a03      	lsrs	r3, r0, #8
    64d2:	428b      	cmp	r3, r1
    64d4:	d301      	bcc.n	64da <__aeabi_uidiv+0x9a>
    64d6:	020b      	lsls	r3, r1, #8
    64d8:	1ac0      	subs	r0, r0, r3
    64da:	4152      	adcs	r2, r2
    64dc:	d2cd      	bcs.n	647a <__aeabi_uidiv+0x3a>
    64de:	09c3      	lsrs	r3, r0, #7
    64e0:	428b      	cmp	r3, r1
    64e2:	d301      	bcc.n	64e8 <__aeabi_uidiv+0xa8>
    64e4:	01cb      	lsls	r3, r1, #7
    64e6:	1ac0      	subs	r0, r0, r3
    64e8:	4152      	adcs	r2, r2
    64ea:	0983      	lsrs	r3, r0, #6
    64ec:	428b      	cmp	r3, r1
    64ee:	d301      	bcc.n	64f4 <__aeabi_uidiv+0xb4>
    64f0:	018b      	lsls	r3, r1, #6
    64f2:	1ac0      	subs	r0, r0, r3
    64f4:	4152      	adcs	r2, r2
    64f6:	0943      	lsrs	r3, r0, #5
    64f8:	428b      	cmp	r3, r1
    64fa:	d301      	bcc.n	6500 <__aeabi_uidiv+0xc0>
    64fc:	014b      	lsls	r3, r1, #5
    64fe:	1ac0      	subs	r0, r0, r3
    6500:	4152      	adcs	r2, r2
    6502:	0903      	lsrs	r3, r0, #4
    6504:	428b      	cmp	r3, r1
    6506:	d301      	bcc.n	650c <__aeabi_uidiv+0xcc>
    6508:	010b      	lsls	r3, r1, #4
    650a:	1ac0      	subs	r0, r0, r3
    650c:	4152      	adcs	r2, r2
    650e:	08c3      	lsrs	r3, r0, #3
    6510:	428b      	cmp	r3, r1
    6512:	d301      	bcc.n	6518 <__aeabi_uidiv+0xd8>
    6514:	00cb      	lsls	r3, r1, #3
    6516:	1ac0      	subs	r0, r0, r3
    6518:	4152      	adcs	r2, r2
    651a:	0883      	lsrs	r3, r0, #2
    651c:	428b      	cmp	r3, r1
    651e:	d301      	bcc.n	6524 <__aeabi_uidiv+0xe4>
    6520:	008b      	lsls	r3, r1, #2
    6522:	1ac0      	subs	r0, r0, r3
    6524:	4152      	adcs	r2, r2
    6526:	0843      	lsrs	r3, r0, #1
    6528:	428b      	cmp	r3, r1
    652a:	d301      	bcc.n	6530 <__aeabi_uidiv+0xf0>
    652c:	004b      	lsls	r3, r1, #1
    652e:	1ac0      	subs	r0, r0, r3
    6530:	4152      	adcs	r2, r2
    6532:	1a41      	subs	r1, r0, r1
    6534:	d200      	bcs.n	6538 <__aeabi_uidiv+0xf8>
    6536:	4601      	mov	r1, r0
    6538:	4152      	adcs	r2, r2
    653a:	4610      	mov	r0, r2
    653c:	4770      	bx	lr
    653e:	e7ff      	b.n	6540 <__aeabi_uidiv+0x100>
    6540:	b501      	push	{r0, lr}
    6542:	2000      	movs	r0, #0
    6544:	f000 f806 	bl	6554 <__aeabi_idiv0>
    6548:	bd02      	pop	{r1, pc}
    654a:	46c0      	nop			; (mov r8, r8)

0000654c <__aeabi_uidivmod>:
    654c:	2900      	cmp	r1, #0
    654e:	d0f7      	beq.n	6540 <__aeabi_uidiv+0x100>
    6550:	e776      	b.n	6440 <__aeabi_uidiv>
    6552:	4770      	bx	lr

00006554 <__aeabi_idiv0>:
    6554:	4770      	bx	lr
    6556:	46c0      	nop			; (mov r8, r8)

00006558 <__aeabi_cfrcmple>:
    6558:	4684      	mov	ip, r0
    655a:	1c08      	adds	r0, r1, #0
    655c:	4661      	mov	r1, ip
    655e:	e7ff      	b.n	6560 <__aeabi_cfcmpeq>

00006560 <__aeabi_cfcmpeq>:
    6560:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    6562:	f000 f8bd 	bl	66e0 <__lesf2>
    6566:	2800      	cmp	r0, #0
    6568:	d401      	bmi.n	656e <__aeabi_cfcmpeq+0xe>
    656a:	2100      	movs	r1, #0
    656c:	42c8      	cmn	r0, r1
    656e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00006570 <__aeabi_fcmpeq>:
    6570:	b510      	push	{r4, lr}
    6572:	f000 f849 	bl	6608 <__eqsf2>
    6576:	4240      	negs	r0, r0
    6578:	3001      	adds	r0, #1
    657a:	bd10      	pop	{r4, pc}

0000657c <__aeabi_fcmplt>:
    657c:	b510      	push	{r4, lr}
    657e:	f000 f8af 	bl	66e0 <__lesf2>
    6582:	2800      	cmp	r0, #0
    6584:	db01      	blt.n	658a <__aeabi_fcmplt+0xe>
    6586:	2000      	movs	r0, #0
    6588:	bd10      	pop	{r4, pc}
    658a:	2001      	movs	r0, #1
    658c:	bd10      	pop	{r4, pc}
    658e:	46c0      	nop			; (mov r8, r8)

00006590 <__aeabi_fcmple>:
    6590:	b510      	push	{r4, lr}
    6592:	f000 f8a5 	bl	66e0 <__lesf2>
    6596:	2800      	cmp	r0, #0
    6598:	dd01      	ble.n	659e <__aeabi_fcmple+0xe>
    659a:	2000      	movs	r0, #0
    659c:	bd10      	pop	{r4, pc}
    659e:	2001      	movs	r0, #1
    65a0:	bd10      	pop	{r4, pc}
    65a2:	46c0      	nop			; (mov r8, r8)

000065a4 <__aeabi_fcmpgt>:
    65a4:	b510      	push	{r4, lr}
    65a6:	f000 f857 	bl	6658 <__gesf2>
    65aa:	2800      	cmp	r0, #0
    65ac:	dc01      	bgt.n	65b2 <__aeabi_fcmpgt+0xe>
    65ae:	2000      	movs	r0, #0
    65b0:	bd10      	pop	{r4, pc}
    65b2:	2001      	movs	r0, #1
    65b4:	bd10      	pop	{r4, pc}
    65b6:	46c0      	nop			; (mov r8, r8)

000065b8 <__aeabi_fcmpge>:
    65b8:	b510      	push	{r4, lr}
    65ba:	f000 f84d 	bl	6658 <__gesf2>
    65be:	2800      	cmp	r0, #0
    65c0:	da01      	bge.n	65c6 <__aeabi_fcmpge+0xe>
    65c2:	2000      	movs	r0, #0
    65c4:	bd10      	pop	{r4, pc}
    65c6:	2001      	movs	r0, #1
    65c8:	bd10      	pop	{r4, pc}
    65ca:	46c0      	nop			; (mov r8, r8)

000065cc <__clzsi2>:
    65cc:	211c      	movs	r1, #28
    65ce:	2301      	movs	r3, #1
    65d0:	041b      	lsls	r3, r3, #16
    65d2:	4298      	cmp	r0, r3
    65d4:	d301      	bcc.n	65da <__clzsi2+0xe>
    65d6:	0c00      	lsrs	r0, r0, #16
    65d8:	3910      	subs	r1, #16
    65da:	0a1b      	lsrs	r3, r3, #8
    65dc:	4298      	cmp	r0, r3
    65de:	d301      	bcc.n	65e4 <__clzsi2+0x18>
    65e0:	0a00      	lsrs	r0, r0, #8
    65e2:	3908      	subs	r1, #8
    65e4:	091b      	lsrs	r3, r3, #4
    65e6:	4298      	cmp	r0, r3
    65e8:	d301      	bcc.n	65ee <__clzsi2+0x22>
    65ea:	0900      	lsrs	r0, r0, #4
    65ec:	3904      	subs	r1, #4
    65ee:	a202      	add	r2, pc, #8	; (adr r2, 65f8 <__clzsi2+0x2c>)
    65f0:	5c10      	ldrb	r0, [r2, r0]
    65f2:	1840      	adds	r0, r0, r1
    65f4:	4770      	bx	lr
    65f6:	46c0      	nop			; (mov r8, r8)
    65f8:	02020304 	.word	0x02020304
    65fc:	01010101 	.word	0x01010101
	...

00006608 <__eqsf2>:
    6608:	0243      	lsls	r3, r0, #9
    660a:	b570      	push	{r4, r5, r6, lr}
    660c:	0042      	lsls	r2, r0, #1
    660e:	004c      	lsls	r4, r1, #1
    6610:	0a5d      	lsrs	r5, r3, #9
    6612:	0fc3      	lsrs	r3, r0, #31
    6614:	0248      	lsls	r0, r1, #9
    6616:	0e12      	lsrs	r2, r2, #24
    6618:	0a46      	lsrs	r6, r0, #9
    661a:	0e24      	lsrs	r4, r4, #24
    661c:	0fc9      	lsrs	r1, r1, #31
    661e:	2aff      	cmp	r2, #255	; 0xff
    6620:	d00f      	beq.n	6642 <__eqsf2+0x3a>
    6622:	2cff      	cmp	r4, #255	; 0xff
    6624:	d011      	beq.n	664a <__eqsf2+0x42>
    6626:	2001      	movs	r0, #1
    6628:	42a2      	cmp	r2, r4
    662a:	d000      	beq.n	662e <__eqsf2+0x26>
    662c:	bd70      	pop	{r4, r5, r6, pc}
    662e:	42b5      	cmp	r5, r6
    6630:	d1fc      	bne.n	662c <__eqsf2+0x24>
    6632:	428b      	cmp	r3, r1
    6634:	d00d      	beq.n	6652 <__eqsf2+0x4a>
    6636:	2a00      	cmp	r2, #0
    6638:	d1f8      	bne.n	662c <__eqsf2+0x24>
    663a:	0028      	movs	r0, r5
    663c:	1e43      	subs	r3, r0, #1
    663e:	4198      	sbcs	r0, r3
    6640:	e7f4      	b.n	662c <__eqsf2+0x24>
    6642:	2001      	movs	r0, #1
    6644:	2d00      	cmp	r5, #0
    6646:	d1f1      	bne.n	662c <__eqsf2+0x24>
    6648:	e7eb      	b.n	6622 <__eqsf2+0x1a>
    664a:	2001      	movs	r0, #1
    664c:	2e00      	cmp	r6, #0
    664e:	d1ed      	bne.n	662c <__eqsf2+0x24>
    6650:	e7e9      	b.n	6626 <__eqsf2+0x1e>
    6652:	2000      	movs	r0, #0
    6654:	e7ea      	b.n	662c <__eqsf2+0x24>
    6656:	46c0      	nop			; (mov r8, r8)

00006658 <__gesf2>:
    6658:	0243      	lsls	r3, r0, #9
    665a:	b5f0      	push	{r4, r5, r6, r7, lr}
    665c:	0042      	lsls	r2, r0, #1
    665e:	0a5d      	lsrs	r5, r3, #9
    6660:	0fc3      	lsrs	r3, r0, #31
    6662:	0248      	lsls	r0, r1, #9
    6664:	0a44      	lsrs	r4, r0, #9
    6666:	0048      	lsls	r0, r1, #1
    6668:	0e12      	lsrs	r2, r2, #24
    666a:	0e00      	lsrs	r0, r0, #24
    666c:	0fc9      	lsrs	r1, r1, #31
    666e:	2aff      	cmp	r2, #255	; 0xff
    6670:	d01f      	beq.n	66b2 <__gesf2+0x5a>
    6672:	28ff      	cmp	r0, #255	; 0xff
    6674:	d022      	beq.n	66bc <__gesf2+0x64>
    6676:	2a00      	cmp	r2, #0
    6678:	d109      	bne.n	668e <__gesf2+0x36>
    667a:	426e      	negs	r6, r5
    667c:	416e      	adcs	r6, r5
    667e:	2800      	cmp	r0, #0
    6680:	d10f      	bne.n	66a2 <__gesf2+0x4a>
    6682:	2c00      	cmp	r4, #0
    6684:	d10d      	bne.n	66a2 <__gesf2+0x4a>
    6686:	2000      	movs	r0, #0
    6688:	2d00      	cmp	r5, #0
    668a:	d009      	beq.n	66a0 <__gesf2+0x48>
    668c:	e005      	b.n	669a <__gesf2+0x42>
    668e:	2800      	cmp	r0, #0
    6690:	d101      	bne.n	6696 <__gesf2+0x3e>
    6692:	2c00      	cmp	r4, #0
    6694:	d001      	beq.n	669a <__gesf2+0x42>
    6696:	428b      	cmp	r3, r1
    6698:	d013      	beq.n	66c2 <__gesf2+0x6a>
    669a:	4258      	negs	r0, r3
    669c:	2301      	movs	r3, #1
    669e:	4318      	orrs	r0, r3
    66a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    66a2:	2e00      	cmp	r6, #0
    66a4:	d0f7      	beq.n	6696 <__gesf2+0x3e>
    66a6:	4248      	negs	r0, r1
    66a8:	4141      	adcs	r1, r0
    66aa:	2001      	movs	r0, #1
    66ac:	4249      	negs	r1, r1
    66ae:	4308      	orrs	r0, r1
    66b0:	e7f6      	b.n	66a0 <__gesf2+0x48>
    66b2:	2d00      	cmp	r5, #0
    66b4:	d0dd      	beq.n	6672 <__gesf2+0x1a>
    66b6:	2002      	movs	r0, #2
    66b8:	4240      	negs	r0, r0
    66ba:	e7f1      	b.n	66a0 <__gesf2+0x48>
    66bc:	2c00      	cmp	r4, #0
    66be:	d0da      	beq.n	6676 <__gesf2+0x1e>
    66c0:	e7f9      	b.n	66b6 <__gesf2+0x5e>
    66c2:	4282      	cmp	r2, r0
    66c4:	dce9      	bgt.n	669a <__gesf2+0x42>
    66c6:	db04      	blt.n	66d2 <__gesf2+0x7a>
    66c8:	42a5      	cmp	r5, r4
    66ca:	d8e6      	bhi.n	669a <__gesf2+0x42>
    66cc:	2000      	movs	r0, #0
    66ce:	42a5      	cmp	r5, r4
    66d0:	d2e6      	bcs.n	66a0 <__gesf2+0x48>
    66d2:	4258      	negs	r0, r3
    66d4:	4143      	adcs	r3, r0
    66d6:	2001      	movs	r0, #1
    66d8:	425b      	negs	r3, r3
    66da:	4318      	orrs	r0, r3
    66dc:	e7e0      	b.n	66a0 <__gesf2+0x48>
    66de:	46c0      	nop			; (mov r8, r8)

000066e0 <__lesf2>:
    66e0:	0243      	lsls	r3, r0, #9
    66e2:	b5f0      	push	{r4, r5, r6, r7, lr}
    66e4:	0042      	lsls	r2, r0, #1
    66e6:	004c      	lsls	r4, r1, #1
    66e8:	0a5e      	lsrs	r6, r3, #9
    66ea:	0fc3      	lsrs	r3, r0, #31
    66ec:	0248      	lsls	r0, r1, #9
    66ee:	0e12      	lsrs	r2, r2, #24
    66f0:	0a45      	lsrs	r5, r0, #9
    66f2:	0e24      	lsrs	r4, r4, #24
    66f4:	0fc9      	lsrs	r1, r1, #31
    66f6:	2aff      	cmp	r2, #255	; 0xff
    66f8:	d017      	beq.n	672a <__lesf2+0x4a>
    66fa:	2cff      	cmp	r4, #255	; 0xff
    66fc:	d019      	beq.n	6732 <__lesf2+0x52>
    66fe:	2a00      	cmp	r2, #0
    6700:	d10b      	bne.n	671a <__lesf2+0x3a>
    6702:	4270      	negs	r0, r6
    6704:	4170      	adcs	r0, r6
    6706:	2c00      	cmp	r4, #0
    6708:	d017      	beq.n	673a <__lesf2+0x5a>
    670a:	2800      	cmp	r0, #0
    670c:	d007      	beq.n	671e <__lesf2+0x3e>
    670e:	4248      	negs	r0, r1
    6710:	4141      	adcs	r1, r0
    6712:	2001      	movs	r0, #1
    6714:	4249      	negs	r1, r1
    6716:	4308      	orrs	r0, r1
    6718:	bdf0      	pop	{r4, r5, r6, r7, pc}
    671a:	2c00      	cmp	r4, #0
    671c:	d013      	beq.n	6746 <__lesf2+0x66>
    671e:	428b      	cmp	r3, r1
    6720:	d014      	beq.n	674c <__lesf2+0x6c>
    6722:	4258      	negs	r0, r3
    6724:	2301      	movs	r3, #1
    6726:	4318      	orrs	r0, r3
    6728:	e7f6      	b.n	6718 <__lesf2+0x38>
    672a:	2002      	movs	r0, #2
    672c:	2e00      	cmp	r6, #0
    672e:	d1f3      	bne.n	6718 <__lesf2+0x38>
    6730:	e7e3      	b.n	66fa <__lesf2+0x1a>
    6732:	2002      	movs	r0, #2
    6734:	2d00      	cmp	r5, #0
    6736:	d1ef      	bne.n	6718 <__lesf2+0x38>
    6738:	e7e1      	b.n	66fe <__lesf2+0x1e>
    673a:	2d00      	cmp	r5, #0
    673c:	d1e5      	bne.n	670a <__lesf2+0x2a>
    673e:	2000      	movs	r0, #0
    6740:	2e00      	cmp	r6, #0
    6742:	d0e9      	beq.n	6718 <__lesf2+0x38>
    6744:	e7ed      	b.n	6722 <__lesf2+0x42>
    6746:	2d00      	cmp	r5, #0
    6748:	d1e9      	bne.n	671e <__lesf2+0x3e>
    674a:	e7ea      	b.n	6722 <__lesf2+0x42>
    674c:	42a2      	cmp	r2, r4
    674e:	dce8      	bgt.n	6722 <__lesf2+0x42>
    6750:	db04      	blt.n	675c <__lesf2+0x7c>
    6752:	42ae      	cmp	r6, r5
    6754:	d8e5      	bhi.n	6722 <__lesf2+0x42>
    6756:	2000      	movs	r0, #0
    6758:	42ae      	cmp	r6, r5
    675a:	d2dd      	bcs.n	6718 <__lesf2+0x38>
    675c:	4258      	negs	r0, r3
    675e:	4143      	adcs	r3, r0
    6760:	2001      	movs	r0, #1
    6762:	425b      	negs	r3, r3
    6764:	4318      	orrs	r0, r3
    6766:	e7d7      	b.n	6718 <__lesf2+0x38>

00006768 <__errno>:
    6768:	4b01      	ldr	r3, [pc, #4]	; (6770 <__errno+0x8>)
    676a:	6818      	ldr	r0, [r3, #0]
    676c:	4770      	bx	lr
    676e:	46c0      	nop			; (mov r8, r8)
    6770:	200004a0 	.word	0x200004a0

00006774 <__libc_init_array>:
    6774:	b570      	push	{r4, r5, r6, lr}
    6776:	4e0d      	ldr	r6, [pc, #52]	; (67ac <__libc_init_array+0x38>)
    6778:	4d0d      	ldr	r5, [pc, #52]	; (67b0 <__libc_init_array+0x3c>)
    677a:	2400      	movs	r4, #0
    677c:	1bad      	subs	r5, r5, r6
    677e:	10ad      	asrs	r5, r5, #2
    6780:	d005      	beq.n	678e <__libc_init_array+0x1a>
    6782:	00a3      	lsls	r3, r4, #2
    6784:	58f3      	ldr	r3, [r6, r3]
    6786:	3401      	adds	r4, #1
    6788:	4798      	blx	r3
    678a:	42a5      	cmp	r5, r4
    678c:	d1f9      	bne.n	6782 <__libc_init_array+0xe>
    678e:	f000 f92f 	bl	69f0 <_init>
    6792:	4e08      	ldr	r6, [pc, #32]	; (67b4 <__libc_init_array+0x40>)
    6794:	4d08      	ldr	r5, [pc, #32]	; (67b8 <__libc_init_array+0x44>)
    6796:	2400      	movs	r4, #0
    6798:	1bad      	subs	r5, r5, r6
    679a:	10ad      	asrs	r5, r5, #2
    679c:	d005      	beq.n	67aa <__libc_init_array+0x36>
    679e:	00a3      	lsls	r3, r4, #2
    67a0:	58f3      	ldr	r3, [r6, r3]
    67a2:	3401      	adds	r4, #1
    67a4:	4798      	blx	r3
    67a6:	42a5      	cmp	r5, r4
    67a8:	d1f9      	bne.n	679e <__libc_init_array+0x2a>
    67aa:	bd70      	pop	{r4, r5, r6, pc}
    67ac:	000069fc 	.word	0x000069fc
    67b0:	000069fc 	.word	0x000069fc
    67b4:	000069fc 	.word	0x000069fc
    67b8:	00006a04 	.word	0x00006a04

000067bc <register_fini>:
    67bc:	4b03      	ldr	r3, [pc, #12]	; (67cc <register_fini+0x10>)
    67be:	b510      	push	{r4, lr}
    67c0:	2b00      	cmp	r3, #0
    67c2:	d002      	beq.n	67ca <register_fini+0xe>
    67c4:	4802      	ldr	r0, [pc, #8]	; (67d0 <register_fini+0x14>)
    67c6:	f000 f805 	bl	67d4 <atexit>
    67ca:	bd10      	pop	{r4, pc}
    67cc:	00000000 	.word	0x00000000
    67d0:	000067e5 	.word	0x000067e5

000067d4 <atexit>:
    67d4:	b510      	push	{r4, lr}
    67d6:	0001      	movs	r1, r0
    67d8:	2300      	movs	r3, #0
    67da:	2200      	movs	r2, #0
    67dc:	2000      	movs	r0, #0
    67de:	f000 f81b 	bl	6818 <__register_exitproc>
    67e2:	bd10      	pop	{r4, pc}

000067e4 <__libc_fini_array>:
    67e4:	b570      	push	{r4, r5, r6, lr}
    67e6:	4b09      	ldr	r3, [pc, #36]	; (680c <__libc_fini_array+0x28>)
    67e8:	4c09      	ldr	r4, [pc, #36]	; (6810 <__libc_fini_array+0x2c>)
    67ea:	1ae4      	subs	r4, r4, r3
    67ec:	10a4      	asrs	r4, r4, #2
    67ee:	d009      	beq.n	6804 <__libc_fini_array+0x20>
    67f0:	4a08      	ldr	r2, [pc, #32]	; (6814 <__libc_fini_array+0x30>)
    67f2:	18a5      	adds	r5, r4, r2
    67f4:	00ad      	lsls	r5, r5, #2
    67f6:	18ed      	adds	r5, r5, r3
    67f8:	682b      	ldr	r3, [r5, #0]
    67fa:	3c01      	subs	r4, #1
    67fc:	4798      	blx	r3
    67fe:	3d04      	subs	r5, #4
    6800:	2c00      	cmp	r4, #0
    6802:	d1f9      	bne.n	67f8 <__libc_fini_array+0x14>
    6804:	f000 f8fe 	bl	6a04 <_fini>
    6808:	bd70      	pop	{r4, r5, r6, pc}
    680a:	46c0      	nop			; (mov r8, r8)
    680c:	00006a10 	.word	0x00006a10
    6810:	00006a14 	.word	0x00006a14
    6814:	3fffffff 	.word	0x3fffffff

00006818 <__register_exitproc>:
    6818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    681a:	4644      	mov	r4, r8
    681c:	465f      	mov	r7, fp
    681e:	4656      	mov	r6, sl
    6820:	464d      	mov	r5, r9
    6822:	469b      	mov	fp, r3
    6824:	4b2f      	ldr	r3, [pc, #188]	; (68e4 <__register_exitproc+0xcc>)
    6826:	b4f0      	push	{r4, r5, r6, r7}
    6828:	681c      	ldr	r4, [r3, #0]
    682a:	23a4      	movs	r3, #164	; 0xa4
    682c:	005b      	lsls	r3, r3, #1
    682e:	0005      	movs	r5, r0
    6830:	58e0      	ldr	r0, [r4, r3]
    6832:	000e      	movs	r6, r1
    6834:	4690      	mov	r8, r2
    6836:	2800      	cmp	r0, #0
    6838:	d04b      	beq.n	68d2 <__register_exitproc+0xba>
    683a:	6843      	ldr	r3, [r0, #4]
    683c:	2b1f      	cmp	r3, #31
    683e:	dc0d      	bgt.n	685c <__register_exitproc+0x44>
    6840:	1c5c      	adds	r4, r3, #1
    6842:	2d00      	cmp	r5, #0
    6844:	d121      	bne.n	688a <__register_exitproc+0x72>
    6846:	3302      	adds	r3, #2
    6848:	009b      	lsls	r3, r3, #2
    684a:	6044      	str	r4, [r0, #4]
    684c:	501e      	str	r6, [r3, r0]
    684e:	2000      	movs	r0, #0
    6850:	bc3c      	pop	{r2, r3, r4, r5}
    6852:	4690      	mov	r8, r2
    6854:	4699      	mov	r9, r3
    6856:	46a2      	mov	sl, r4
    6858:	46ab      	mov	fp, r5
    685a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    685c:	4b22      	ldr	r3, [pc, #136]	; (68e8 <__register_exitproc+0xd0>)
    685e:	2b00      	cmp	r3, #0
    6860:	d03c      	beq.n	68dc <__register_exitproc+0xc4>
    6862:	20c8      	movs	r0, #200	; 0xc8
    6864:	0040      	lsls	r0, r0, #1
    6866:	e000      	b.n	686a <__register_exitproc+0x52>
    6868:	bf00      	nop
    686a:	2800      	cmp	r0, #0
    686c:	d036      	beq.n	68dc <__register_exitproc+0xc4>
    686e:	22a4      	movs	r2, #164	; 0xa4
    6870:	2300      	movs	r3, #0
    6872:	0052      	lsls	r2, r2, #1
    6874:	58a1      	ldr	r1, [r4, r2]
    6876:	6043      	str	r3, [r0, #4]
    6878:	6001      	str	r1, [r0, #0]
    687a:	50a0      	str	r0, [r4, r2]
    687c:	3240      	adds	r2, #64	; 0x40
    687e:	5083      	str	r3, [r0, r2]
    6880:	3204      	adds	r2, #4
    6882:	5083      	str	r3, [r0, r2]
    6884:	2401      	movs	r4, #1
    6886:	2d00      	cmp	r5, #0
    6888:	d0dd      	beq.n	6846 <__register_exitproc+0x2e>
    688a:	009a      	lsls	r2, r3, #2
    688c:	4691      	mov	r9, r2
    688e:	4481      	add	r9, r0
    6890:	4642      	mov	r2, r8
    6892:	2188      	movs	r1, #136	; 0x88
    6894:	464f      	mov	r7, r9
    6896:	507a      	str	r2, [r7, r1]
    6898:	22c4      	movs	r2, #196	; 0xc4
    689a:	0052      	lsls	r2, r2, #1
    689c:	4690      	mov	r8, r2
    689e:	4480      	add	r8, r0
    68a0:	4642      	mov	r2, r8
    68a2:	3987      	subs	r1, #135	; 0x87
    68a4:	4099      	lsls	r1, r3
    68a6:	6812      	ldr	r2, [r2, #0]
    68a8:	468a      	mov	sl, r1
    68aa:	430a      	orrs	r2, r1
    68ac:	4694      	mov	ip, r2
    68ae:	4642      	mov	r2, r8
    68b0:	4661      	mov	r1, ip
    68b2:	6011      	str	r1, [r2, #0]
    68b4:	2284      	movs	r2, #132	; 0x84
    68b6:	4649      	mov	r1, r9
    68b8:	465f      	mov	r7, fp
    68ba:	0052      	lsls	r2, r2, #1
    68bc:	508f      	str	r7, [r1, r2]
    68be:	2d02      	cmp	r5, #2
    68c0:	d1c1      	bne.n	6846 <__register_exitproc+0x2e>
    68c2:	0002      	movs	r2, r0
    68c4:	4655      	mov	r5, sl
    68c6:	328d      	adds	r2, #141	; 0x8d
    68c8:	32ff      	adds	r2, #255	; 0xff
    68ca:	6811      	ldr	r1, [r2, #0]
    68cc:	430d      	orrs	r5, r1
    68ce:	6015      	str	r5, [r2, #0]
    68d0:	e7b9      	b.n	6846 <__register_exitproc+0x2e>
    68d2:	0020      	movs	r0, r4
    68d4:	304d      	adds	r0, #77	; 0x4d
    68d6:	30ff      	adds	r0, #255	; 0xff
    68d8:	50e0      	str	r0, [r4, r3]
    68da:	e7ae      	b.n	683a <__register_exitproc+0x22>
    68dc:	2001      	movs	r0, #1
    68de:	4240      	negs	r0, r0
    68e0:	e7b6      	b.n	6850 <__register_exitproc+0x38>
    68e2:	46c0      	nop			; (mov r8, r8)
    68e4:	000069ec 	.word	0x000069ec
    68e8:	00000000 	.word	0x00000000

000068ec <senseBatPin>:
    68ec:	06000000 01000106                                .....

000068f1 <senseAPin>:
    68f1:	03010001 0100010b                                .....

000068f6 <senseBPin>:
    68f6:	02010001 0000010a                                .....

000068fb <senseCPin>:
    68fb:	03000001 00000101                                .....

00006900 <senseDPin>:
    6900:	02000001 00000000                                .....

00006905 <analogAccelPin>:
    6905:	07000000 70000007 0000776f 00000000     .......pow......
    6915:	00000000                                         ...

00006918 <TWO52>:
    6918:	00000000 43300000 00000000 c3300000     ......0C......0.
    6928:	000041b8 00004116 00004116 00004114     .A...A...A...A..
    6938:	000041aa 000041aa 000041a0 00004114     .A...A...A...A..
    6948:	000041aa 000041a0 000041aa 00004114     .A...A...A...A..
    6958:	000041b0 000041b0 000041b0 0000423a     .A...A...A..:B..
    6968:	00004eec 00004dba 00004ec0 00004db0     .N...M...N...M..
    6978:	00004ec0 00004eca 00004ec0 00004db0     .N...N...N...M..
    6988:	00004dba 00004dba 00004eca 00004db0     .M...M...N...M..
    6998:	00004da6 00004da6 00004da6 0000511c     .M...M...M...Q..
    69a8:	00005734 000055f4 000055f4 000055f2     4W...U...U...U..
    69b8:	0000570c 0000570c 000056fe 000055f2     .W...W...V...U..
    69c8:	0000570c 000056fe 0000570c 000055f2     .W...V...W...U..
    69d8:	00005714 00005714 00005714 00005914     .W...W...W...Y..
    69e8:	00000043                                C...

000069ec <_global_impure_ptr>:
    69ec:	20000078                                x.. 

000069f0 <_init>:
    69f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    69f2:	46c0      	nop			; (mov r8, r8)
    69f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    69f6:	bc08      	pop	{r3}
    69f8:	469e      	mov	lr, r3
    69fa:	4770      	bx	lr

000069fc <__init_array_start>:
    69fc:	000067bd 	.word	0x000067bd

00006a00 <__frame_dummy_init_array_entry>:
    6a00:	000000dd                                ....

00006a04 <_fini>:
    6a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6a06:	46c0      	nop			; (mov r8, r8)
    6a08:	bcf8      	pop	{r3, r4, r5, r6, r7}
    6a0a:	bc08      	pop	{r3}
    6a0c:	469e      	mov	lr, r3
    6a0e:	4770      	bx	lr

00006a10 <__fini_array_start>:
    6a10:	000000b5 	.word	0x000000b5
