
DasAltimeter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000065cc  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000004a4  20000000  000065cc  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000330  200004a8  00006a78  000204a8  2**3
                  ALLOC
  3 .stack        00002000  200007d8  00006da8  000204a8  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000204a4  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  000204cc  2**0
                  CONTENTS, READONLY
  6 .debug_info   0001e253  00000000  00000000  00020525  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002642  00000000  00000000  0003e778  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000022f5  00000000  00000000  00040dba  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000003d8  00000000  00000000  000430af  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000c98  00000000  00000000  00043487  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000162f3  00000000  00000000  0004411f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00009b4e  00000000  00000000  0005a412  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000724ec  00000000  00000000  00063f60  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001028  00000000  00000000  000d644c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
 *         retrieved from cpu registers.
 */
void SystemCoreClockUpdate(void)
{
	// Not implemented
	SystemCoreClock = __SYSTEM_CLOCK;
       0:	200027d8 	.word	0x200027d8
       4:	00000119 	.word	0x00000119
	return;
}
       8:	00000115 	.word	0x00000115
       c:	00000115 	.word	0x00000115
	...
      2c:	00000115 	.word	0x00000115
	...
      38:	00000115 	.word	0x00000115
      3c:	00000115 	.word	0x00000115
      40:	00000115 	.word	0x00000115
      44:	00000115 	.word	0x00000115
      48:	00000115 	.word	0x00000115
      4c:	00001001 	.word	0x00001001
      50:	00000115 	.word	0x00000115
      54:	00000115 	.word	0x00000115
      58:	00000115 	.word	0x00000115
      5c:	00000115 	.word	0x00000115
      60:	00000115 	.word	0x00000115
      64:	00000115 	.word	0x00000115
      68:	00000115 	.word	0x00000115
      6c:	00000115 	.word	0x00000115
      70:	00000115 	.word	0x00000115
      74:	00000115 	.word	0x00000115
      78:	00000115 	.word	0x00000115
      7c:	00000115 	.word	0x00000115
      80:	00000115 	.word	0x00000115
      84:	00000115 	.word	0x00000115
      88:	00000115 	.word	0x00000115
      8c:	000010a1 	.word	0x000010a1
      90:	00001109 	.word	0x00001109
	...
      9c:	00000115 	.word	0x00000115
      a0:	00000115 	.word	0x00000115
      a4:	00000115 	.word	0x00000115
      a8:	00000115 	.word	0x00000115
      ac:	00000115 	.word	0x00000115
      b0:	00000000 	.word	0x00000000

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200004a8 	.word	0x200004a8
      d4:	00000000 	.word	0x00000000
      d8:	000065cc 	.word	0x000065cc

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200004ac 	.word	0x200004ac
     108:	000065cc 	.word	0x000065cc
     10c:	000065cc 	.word	0x000065cc
     110:	00000000 	.word	0x00000000

00000114 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     114:	e7fe      	b.n	114 <Dummy_Handler>
	...

00000118 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
     118:	4821      	ldr	r0, [pc, #132]	; (1a0 <Reset_Handler+0x88>)
     11a:	4922      	ldr	r1, [pc, #136]	; (1a4 <Reset_Handler+0x8c>)
     11c:	b570      	push	{r4, r5, r6, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
     11e:	4288      	cmp	r0, r1
     120:	d002      	beq.n	128 <Reset_Handler+0x10>
     122:	2300      	movs	r3, #0
                for (; pDest < &_erelocate;) {
     124:	4c20      	ldr	r4, [pc, #128]	; (1a8 <Reset_Handler+0x90>)
     126:	e003      	b.n	130 <Reset_Handler+0x18>
     128:	4b20      	ldr	r3, [pc, #128]	; (1ac <Reset_Handler+0x94>)
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     12a:	4a21      	ldr	r2, [pc, #132]	; (1b0 <Reset_Handler+0x98>)
                *pDest++ = 0;
     12c:	2100      	movs	r1, #0
     12e:	e006      	b.n	13e <Reset_Handler+0x26>
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
     130:	18ca      	adds	r2, r1, r3
     132:	42a2      	cmp	r2, r4
     134:	d2f8      	bcs.n	128 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
     136:	58c5      	ldr	r5, [r0, r3]
     138:	3304      	adds	r3, #4
     13a:	6015      	str	r5, [r2, #0]
     13c:	e7f8      	b.n	130 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     13e:	4293      	cmp	r3, r2
     140:	d201      	bcs.n	146 <Reset_Handler+0x2e>
                *pDest++ = 0;
     142:	c302      	stmia	r3!, {r1}
     144:	e7fb      	b.n	13e <Reset_Handler+0x26>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     146:	21ff      	movs	r1, #255	; 0xff

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     148:	2402      	movs	r4, #2
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     14a:	2503      	movs	r5, #3
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     14c:	4b19      	ldr	r3, [pc, #100]	; (1b4 <Reset_Handler+0x9c>)
     14e:	4a1a      	ldr	r2, [pc, #104]	; (1b8 <Reset_Handler+0xa0>)
     150:	438b      	bics	r3, r1

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     152:	260c      	movs	r6, #12
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     154:	6093      	str	r3, [r2, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     156:	2208      	movs	r2, #8
        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     158:	4b18      	ldr	r3, [pc, #96]	; (1bc <Reset_Handler+0xa4>)
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     15a:	4919      	ldr	r1, [pc, #100]	; (1c0 <Reset_Handler+0xa8>)
        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     15c:	625c      	str	r4, [r3, #36]	; 0x24
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     15e:	78cb      	ldrb	r3, [r1, #3]
     160:	43ab      	bics	r3, r5
     162:	4323      	orrs	r3, r4
     164:	70cb      	strb	r3, [r1, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     166:	78cb      	ldrb	r3, [r1, #3]
     168:	43b3      	bics	r3, r6
     16a:	4313      	orrs	r3, r2
     16c:	70cb      	strb	r3, [r1, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
     16e:	2130      	movs	r1, #48	; 0x30
     170:	4b14      	ldr	r3, [pc, #80]	; (1c4 <Reset_Handler+0xac>)
     172:	7b98      	ldrb	r0, [r3, #14]
     174:	4388      	bics	r0, r1
     176:	3910      	subs	r1, #16
     178:	4308      	orrs	r0, r1
     17a:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     17c:	7b99      	ldrb	r1, [r3, #14]
     17e:	43b1      	bics	r1, r6
     180:	4311      	orrs	r1, r2
     182:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
     184:	2180      	movs	r1, #128	; 0x80
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
        DMAC->QOSCTRL.bit.FQOS = 2;
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     186:	7b9a      	ldrb	r2, [r3, #14]
     188:	43aa      	bics	r2, r5
     18a:	4322      	orrs	r2, r4
     18c:	739a      	strb	r2, [r3, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
     18e:	4a0e      	ldr	r2, [pc, #56]	; (1c8 <Reset_Handler+0xb0>)
     190:	6853      	ldr	r3, [r2, #4]
     192:	430b      	orrs	r3, r1
     194:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
     196:	4b0d      	ldr	r3, [pc, #52]	; (1cc <Reset_Handler+0xb4>)
     198:	4798      	blx	r3

        /* Branch to main function */
        main();
     19a:	4b0d      	ldr	r3, [pc, #52]	; (1d0 <Reset_Handler+0xb8>)
     19c:	4798      	blx	r3
     19e:	e7fe      	b.n	19e <Reset_Handler+0x86>
     1a0:	000065cc 	.word	0x000065cc
     1a4:	20000000 	.word	0x20000000
     1a8:	200004a4 	.word	0x200004a4
     1ac:	200004a8 	.word	0x200004a8
     1b0:	200007d8 	.word	0x200007d8
     1b4:	00000000 	.word	0x00000000
     1b8:	e000ed00 	.word	0xe000ed00
     1bc:	410070fc 	.word	0x410070fc
     1c0:	41005000 	.word	0x41005000
     1c4:	41004800 	.word	0x41004800
     1c8:	41004000 	.word	0x41004000
     1cc:	00006315 	.word	0x00006315
     1d0:	00000a8d 	.word	0x00000a8d

000001d4 <SystemInit>:
     1d4:	4a01      	ldr	r2, [pc, #4]	; (1dc <SystemInit+0x8>)
     1d6:	4b02      	ldr	r3, [pc, #8]	; (1e0 <SystemInit+0xc>)
     1d8:	601a      	str	r2, [r3, #0]
     1da:	4770      	bx	lr
     1dc:	000f4240 	.word	0x000f4240
     1e0:	20000000 	.word	0x20000000

000001e4 <AT25SFHoldTillReady>:
    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
    pinHigh(cs_mem);
}

void AT25SFHoldTillReady(){
     1e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     1e6:	2380      	movs	r3, #128	; 0x80
     1e8:	4c0a      	ldr	r4, [pc, #40]	; (214 <AT25SFHoldTillReady+0x30>)
     1ea:	02db      	lsls	r3, r3, #11
	pinLow(cs_mem);
	dummy_rx = spiDataTransfer(SPI1,OPCODE_READSTATUS);
     1ec:	4d0a      	ldr	r5, [pc, #40]	; (218 <AT25SFHoldTillReady+0x34>)
     1ee:	6163      	str	r3, [r4, #20]
     1f0:	2105      	movs	r1, #5
     1f2:	2001      	movs	r0, #1
     1f4:	47a8      	blx	r5
     1f6:	4b09      	ldr	r3, [pc, #36]	; (21c <AT25SFHoldTillReady+0x38>)
     1f8:	002e      	movs	r6, r5
        while (spiDataTransfer(SPI1,dummy_rx) & 0x01);
     1fa:	2701      	movs	r7, #1
     1fc:	001d      	movs	r5, r3
    pinHigh(cs_mem);
}

void AT25SFHoldTillReady(){
	pinLow(cs_mem);
	dummy_rx = spiDataTransfer(SPI1,OPCODE_READSTATUS);
     1fe:	7018      	strb	r0, [r3, #0]
        while (spiDataTransfer(SPI1,dummy_rx) & 0x01);
     200:	7829      	ldrb	r1, [r5, #0]
     202:	2001      	movs	r0, #1
     204:	47b0      	blx	r6
     206:	4238      	tst	r0, r7
     208:	d1fa      	bne.n	200 <AT25SFHoldTillReady+0x1c>
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     20a:	2380      	movs	r3, #128	; 0x80
     20c:	02db      	lsls	r3, r3, #11
     20e:	61a3      	str	r3, [r4, #24]
	pinHigh(cs_mem);
}
     210:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     212:	46c0      	nop			; (mov r8, r8)
     214:	41004400 	.word	0x41004400
     218:	00002799 	.word	0x00002799
     21c:	200004c8 	.word	0x200004c8

00000220 <AT25SFChipErase>:
void AT25SFChipErase() {
     220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     222:	2580      	movs	r5, #128	; 0x80
     224:	4c08      	ldr	r4, [pc, #32]	; (248 <AT25SFChipErase+0x28>)
     226:	02ed      	lsls	r5, r5, #11

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
     228:	4f08      	ldr	r7, [pc, #32]	; (24c <AT25SFChipErase+0x2c>)
     22a:	6165      	str	r5, [r4, #20]
     22c:	2106      	movs	r1, #6
     22e:	2001      	movs	r0, #1
     230:	47b8      	blx	r7
     232:	4e07      	ldr	r6, [pc, #28]	; (250 <AT25SFChipErase+0x30>)
    pinHigh(cs_mem);

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_CHIP_ERASE);
     234:	2160      	movs	r1, #96	; 0x60
	pinHigh(cs_mem);
}
void AT25SFChipErase() {

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
     236:	7030      	strb	r0, [r6, #0]
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     238:	61a5      	str	r5, [r4, #24]
    pinHigh(cs_mem);

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_CHIP_ERASE);
     23a:	2001      	movs	r0, #1
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     23c:	6165      	str	r5, [r4, #20]
     23e:	47b8      	blx	r7
     240:	7030      	strb	r0, [r6, #0]
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     242:	61a5      	str	r5, [r4, #24]
    pinHigh(cs_mem);
}
     244:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     246:	46c0      	nop			; (mov r8, r8)
     248:	41004400 	.word	0x41004400
     24c:	00002799 	.word	0x00002799
     250:	200004c8 	.word	0x200004c8

00000254 <AT25SFWriteBytes>:
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     254:	2380      	movs	r3, #128	; 0x80
    pinHigh(cs_mem);

    return _byte;
}

void AT25SFWriteBytes(uint32_t address, u8_t len, uint8_t *bytes) {
     256:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     258:	4e19      	ldr	r6, [pc, #100]	; (2c0 <AT25SFWriteBytes+0x6c>)
     25a:	02db      	lsls	r3, r3, #11
     25c:	9201      	str	r2, [sp, #4]
     25e:	0007      	movs	r7, r0


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
     260:	4c18      	ldr	r4, [pc, #96]	; (2c4 <AT25SFWriteBytes+0x70>)
    pinHigh(cs_mem);

    return _byte;
}

void AT25SFWriteBytes(uint32_t address, u8_t len, uint8_t *bytes) {
     262:	9100      	str	r1, [sp, #0]


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
     264:	2001      	movs	r0, #1
     266:	6173      	str	r3, [r6, #20]
     268:	2106      	movs	r1, #6
     26a:	47a0      	blx	r4
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     26c:	2380      	movs	r3, #128	; 0x80
     26e:	4d16      	ldr	r5, [pc, #88]	; (2c8 <AT25SFWriteBytes+0x74>)
     270:	02db      	lsls	r3, r3, #11
     272:	7028      	strb	r0, [r5, #0]
    pinHigh(cs_mem);

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_PROGRAM);
     274:	2102      	movs	r1, #2
     276:	61b3      	str	r3, [r6, #24]
     278:	2001      	movs	r0, #1
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     27a:	6173      	str	r3, [r6, #20]
     27c:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1,((address & 0xFF0000) >> 16));
     27e:	0c39      	lsrs	r1, r7, #16
    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
    pinHigh(cs_mem);

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_PROGRAM);
     280:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1,((address & 0xFF0000) >> 16));
     282:	b2c9      	uxtb	r1, r1
     284:	2001      	movs	r0, #1
     286:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1,((address & 0x00FF00) >>  8));
     288:	0a39      	lsrs	r1, r7, #8
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
    pinHigh(cs_mem);

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_PROGRAM);
    dummy_rx = spiDataTransfer(SPI1,((address & 0xFF0000) >> 16));
     28a:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1,((address & 0x00FF00) >>  8));
     28c:	b2c9      	uxtb	r1, r1
     28e:	2001      	movs	r0, #1
     290:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1,((address & 0x0000FF) >>  0));
     292:	b2f9      	uxtb	r1, r7
    pinHigh(cs_mem);

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_PROGRAM);
    dummy_rx = spiDataTransfer(SPI1,((address & 0xFF0000) >> 16));
    dummy_rx = spiDataTransfer(SPI1,((address & 0x00FF00) >>  8));
     294:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1,((address & 0x0000FF) >>  0));
     296:	2001      	movs	r0, #1
     298:	47a0      	blx	r4
     29a:	9b00      	ldr	r3, [sp, #0]
     29c:	9f01      	ldr	r7, [sp, #4]
     29e:	7028      	strb	r0, [r5, #0]
     2a0:	18fb      	adds	r3, r7, r3
     2a2:	9300      	str	r3, [sp, #0]

    for (u8_t pos = 0; pos < len; ++pos) {
     2a4:	9b00      	ldr	r3, [sp, #0]
     2a6:	429f      	cmp	r7, r3
     2a8:	d005      	beq.n	2b6 <AT25SFWriteBytes+0x62>
        dummy_rx = spiDataTransfer(SPI1, bytes[pos]);
     2aa:	7839      	ldrb	r1, [r7, #0]
     2ac:	2001      	movs	r0, #1
     2ae:	47a0      	blx	r4
     2b0:	3701      	adds	r7, #1
     2b2:	7028      	strb	r0, [r5, #0]
     2b4:	e7f6      	b.n	2a4 <AT25SFWriteBytes+0x50>
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     2b6:	2380      	movs	r3, #128	; 0x80
     2b8:	02db      	lsls	r3, r3, #11
     2ba:	61b3      	str	r3, [r6, #24]
    }

    pinHigh(cs_mem);

}
     2bc:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
     2be:	46c0      	nop			; (mov r8, r8)
     2c0:	41004400 	.word	0x41004400
     2c4:	00002799 	.word	0x00002799
     2c8:	200004c8 	.word	0x200004c8

000002cc <AT25SEWritePage>:
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     2cc:	2380      	movs	r3, #128	; 0x80
    delay_ms(70);

}


u8_t AT25SEWritePage(u32_t startingAddress, u8_t *data) {
     2ce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     2d0:	4e18      	ldr	r6, [pc, #96]	; (334 <AT25SEWritePage+0x68>)
     2d2:	02db      	lsls	r3, r3, #11
     2d4:	0007      	movs	r7, r0

    u8_t bytesSent = 0;


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
     2d6:	4d18      	ldr	r5, [pc, #96]	; (338 <AT25SEWritePage+0x6c>)
    delay_ms(70);

}


u8_t AT25SEWritePage(u32_t startingAddress, u8_t *data) {
     2d8:	9101      	str	r1, [sp, #4]

    u8_t bytesSent = 0;


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
     2da:	2001      	movs	r0, #1
     2dc:	6173      	str	r3, [r6, #20]
     2de:	2106      	movs	r1, #6
     2e0:	47a8      	blx	r5
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     2e2:	2380      	movs	r3, #128	; 0x80
     2e4:	4c15      	ldr	r4, [pc, #84]	; (33c <AT25SEWritePage+0x70>)
     2e6:	02db      	lsls	r3, r3, #11
     2e8:	7020      	strb	r0, [r4, #0]
    pinHigh(cs_mem);


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_PROGRAM);
     2ea:	2102      	movs	r1, #2
     2ec:	61b3      	str	r3, [r6, #24]
     2ee:	2001      	movs	r0, #1
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     2f0:	6173      	str	r3, [r6, #20]
     2f2:	47a8      	blx	r5
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     2f4:	0c39      	lsrs	r1, r7, #16
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
    pinHigh(cs_mem);


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_PROGRAM);
     2f6:	7020      	strb	r0, [r4, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     2f8:	b2c9      	uxtb	r1, r1
     2fa:	2001      	movs	r0, #1
     2fc:	47a8      	blx	r5
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     2fe:	0a39      	lsrs	r1, r7, #8
    pinHigh(cs_mem);


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_PROGRAM);
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     300:	7020      	strb	r0, [r4, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     302:	b2c9      	uxtb	r1, r1
     304:	2001      	movs	r0, #1
     306:	47a8      	blx	r5
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
     308:	b2f9      	uxtb	r1, r7


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_PROGRAM);
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     30a:	7020      	strb	r0, [r4, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
     30c:	2001      	movs	r0, #1
     30e:	47a8      	blx	r5
     310:	9f01      	ldr	r7, [sp, #4]
     312:	7020      	strb	r0, [r4, #0]
     314:	1c7b      	adds	r3, r7, #1
     316:	33ff      	adds	r3, #255	; 0xff
     318:	9301      	str	r3, [sp, #4]


    for (u16_t pos = 0; pos < 256; ++pos) {
        ++bytesSent;
        dummy_rx = spiDataTransfer(SPI1,data[pos]);
     31a:	7839      	ldrb	r1, [r7, #0]
     31c:	2001      	movs	r0, #1
     31e:	47a8      	blx	r5
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));


    for (u16_t pos = 0; pos < 256; ++pos) {
     320:	9b01      	ldr	r3, [sp, #4]
     322:	3701      	adds	r7, #1
        ++bytesSent;
        dummy_rx = spiDataTransfer(SPI1,data[pos]);
     324:	7020      	strb	r0, [r4, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));


    for (u16_t pos = 0; pos < 256; ++pos) {
     326:	429f      	cmp	r7, r3
     328:	d1f7      	bne.n	31a <AT25SEWritePage+0x4e>
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     32a:	2380      	movs	r3, #128	; 0x80
     32c:	02db      	lsls	r3, r3, #11
     32e:	61b3      	str	r3, [r6, #24]
    }
    pinHigh(cs_mem);


    return bytesSent;
}
     330:	2000      	movs	r0, #0
     332:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
     334:	41004400 	.word	0x41004400
     338:	00002799 	.word	0x00002799
     33c:	200004c8 	.word	0x200004c8

00000340 <AT25SEreadSample>:
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     340:	2380      	movs	r3, #128	; 0x80

void AT25SEreadSample(u32_t startingAddress, u8_t len, u8_t *data) {
     342:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     344:	4f17      	ldr	r7, [pc, #92]	; (3a4 <AT25SEreadSample+0x64>)
     346:	02db      	lsls	r3, r3, #11
     348:	9201      	str	r2, [sp, #4]
     34a:	0006      	movs	r6, r0

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
     34c:	4c16      	ldr	r4, [pc, #88]	; (3a8 <AT25SEreadSample+0x68>)


    return bytesSent;
}

void AT25SEreadSample(u32_t startingAddress, u8_t len, u8_t *data) {
     34e:	9100      	str	r1, [sp, #0]

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
     350:	2001      	movs	r0, #1
     352:	617b      	str	r3, [r7, #20]
     354:	210b      	movs	r1, #11
     356:	47a0      	blx	r4
     358:	4d14      	ldr	r5, [pc, #80]	; (3ac <AT25SEreadSample+0x6c>)
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     35a:	0c31      	lsrs	r1, r6, #16
}

void AT25SEreadSample(u32_t startingAddress, u8_t len, u8_t *data) {

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
     35c:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     35e:	b2c9      	uxtb	r1, r1
     360:	2001      	movs	r0, #1
     362:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     364:	0a31      	lsrs	r1, r6, #8

void AT25SEreadSample(u32_t startingAddress, u8_t len, u8_t *data) {

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     366:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     368:	b2c9      	uxtb	r1, r1
     36a:	2001      	movs	r0, #1
     36c:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
     36e:	b2f1      	uxtb	r1, r6
void AT25SEreadSample(u32_t startingAddress, u8_t len, u8_t *data) {

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     370:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
     372:	2001      	movs	r0, #1
     374:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1, 0xFF);
     376:	21ff      	movs	r1, #255	; 0xff

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
     378:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1, 0xFF);
     37a:	2001      	movs	r0, #1
     37c:	47a0      	blx	r4
     37e:	9b00      	ldr	r3, [sp, #0]
     380:	9e01      	ldr	r6, [sp, #4]
     382:	7028      	strb	r0, [r5, #0]
     384:	18f3      	adds	r3, r6, r3
     386:	9300      	str	r3, [sp, #0]


    for (u8_t pos = 0; pos < len; ++pos) {
     388:	9b00      	ldr	r3, [sp, #0]
     38a:	429e      	cmp	r6, r3
     38c:	d005      	beq.n	39a <AT25SEreadSample+0x5a>
        data[pos] = spiDataTransfer(SPI1,dummy_rx);
     38e:	7829      	ldrb	r1, [r5, #0]
     390:	2001      	movs	r0, #1
     392:	47a0      	blx	r4
     394:	7030      	strb	r0, [r6, #0]
     396:	3601      	adds	r6, #1
     398:	e7f6      	b.n	388 <AT25SEreadSample+0x48>
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     39a:	2380      	movs	r3, #128	; 0x80
     39c:	02db      	lsls	r3, r3, #11
     39e:	61bb      	str	r3, [r7, #24]
    }
    pinHigh(cs_mem);

}
     3a0:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
     3a2:	46c0      	nop			; (mov r8, r8)
     3a4:	41004400 	.word	0x41004400
     3a8:	00002799 	.word	0x00002799
     3ac:	200004c8 	.word	0x200004c8

000003b0 <AT25SEreadPage>:
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     3b0:	2380      	movs	r3, #128	; 0x80

void AT25SEreadPage(u32_t startingAddress, u8_t *data) {
     3b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     3b4:	4f16      	ldr	r7, [pc, #88]	; (410 <AT25SEreadPage+0x60>)
     3b6:	02db      	lsls	r3, r3, #11
     3b8:	0006      	movs	r6, r0


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
     3ba:	4c16      	ldr	r4, [pc, #88]	; (414 <AT25SEreadPage+0x64>)
    }
    pinHigh(cs_mem);

}

void AT25SEreadPage(u32_t startingAddress, u8_t *data) {
     3bc:	9101      	str	r1, [sp, #4]


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
     3be:	2001      	movs	r0, #1
     3c0:	617b      	str	r3, [r7, #20]
     3c2:	210b      	movs	r1, #11
     3c4:	47a0      	blx	r4
     3c6:	4d14      	ldr	r5, [pc, #80]	; (418 <AT25SEreadPage+0x68>)
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     3c8:	0c31      	lsrs	r1, r6, #16

void AT25SEreadPage(u32_t startingAddress, u8_t *data) {


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
     3ca:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     3cc:	b2c9      	uxtb	r1, r1
     3ce:	2001      	movs	r0, #1
     3d0:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     3d2:	0a31      	lsrs	r1, r6, #8
void AT25SEreadPage(u32_t startingAddress, u8_t *data) {


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     3d4:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     3d6:	b2c9      	uxtb	r1, r1
     3d8:	2001      	movs	r0, #1
     3da:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
     3dc:	b2f1      	uxtb	r1, r6


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     3de:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
     3e0:	2001      	movs	r0, #1
     3e2:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1, 0xFF);
     3e4:	21ff      	movs	r1, #255	; 0xff

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
     3e6:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1, 0xFF);
     3e8:	2001      	movs	r0, #1
     3ea:	47a0      	blx	r4
     3ec:	9e01      	ldr	r6, [sp, #4]
     3ee:	7028      	strb	r0, [r5, #0]
     3f0:	1c73      	adds	r3, r6, #1
     3f2:	33ff      	adds	r3, #255	; 0xff
     3f4:	9301      	str	r3, [sp, #4]


    for (u16_t pos = 0; pos < 256; ++pos) {
        data[pos] = spiDataTransfer(SPI1,dummy_rx);
     3f6:	7829      	ldrb	r1, [r5, #0]
     3f8:	2001      	movs	r0, #1
     3fa:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
    dummy_rx = spiDataTransfer(SPI1, 0xFF);


    for (u16_t pos = 0; pos < 256; ++pos) {
     3fc:	9b01      	ldr	r3, [sp, #4]
        data[pos] = spiDataTransfer(SPI1,dummy_rx);
     3fe:	7030      	strb	r0, [r6, #0]
     400:	3601      	adds	r6, #1
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
    dummy_rx = spiDataTransfer(SPI1, 0xFF);


    for (u16_t pos = 0; pos < 256; ++pos) {
     402:	429e      	cmp	r6, r3
     404:	d1f7      	bne.n	3f6 <AT25SEreadPage+0x46>
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     406:	2380      	movs	r3, #128	; 0x80
     408:	02db      	lsls	r3, r3, #11
     40a:	61bb      	str	r3, [r7, #24]
        data[pos] = spiDataTransfer(SPI1,dummy_rx);
    }
    pinHigh(cs_mem);

}
     40c:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
     40e:	46c0      	nop			; (mov r8, r8)
     410:	41004400 	.word	0x41004400
     414:	00002799 	.word	0x00002799
     418:	200004c8 	.word	0x200004c8

0000041c <readMS5803AdcResults>:
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     41c:	2280      	movs	r2, #128	; 0x80
     41e:	4b28      	ldr	r3, [pc, #160]	; (4c0 <readMS5803AdcResults+0xa4>)
     420:	01d2      	lsls	r2, r2, #7
#include <boardDefines.h>
#include <math.h>
//#include <tgmath.h>


u32_t readMS5803AdcResults() {
     422:	b5f0      	push	{r4, r5, r6, r7, lr}
     424:	615a      	str	r2, [r3, #20]
    pinLow(cs_baro);
//    dummy_rx = spiDataTransfer(SPI2, cmdAdcRead_);
//    u8_t _byte1 = spiDataTransfer(SPI2,dummy_tx);
//    u8_t _byte2 = spiDataTransfer(SPI2,dummy_tx);
//    u8_t _byte3 = spiDataTransfer(SPI2,dummy_tx);
    byteOut(spi2SCK,spi2MOSI, cmdAdcRead_);
     426:	2300      	movs	r3, #0
     428:	4d26      	ldr	r5, [pc, #152]	; (4c4 <readMS5803AdcResults+0xa8>)
#include <boardDefines.h>
#include <math.h>
//#include <tgmath.h>


u32_t readMS5803AdcResults() {
     42a:	b087      	sub	sp, #28
    pinLow(cs_baro);
//    dummy_rx = spiDataTransfer(SPI2, cmdAdcRead_);
//    u8_t _byte1 = spiDataTransfer(SPI2,dummy_tx);
//    u8_t _byte2 = spiDataTransfer(SPI2,dummy_tx);
//    u8_t _byte3 = spiDataTransfer(SPI2,dummy_tx);
    byteOut(spi2SCK,spi2MOSI, cmdAdcRead_);
     42c:	9300      	str	r3, [sp, #0]
     42e:	786b      	ldrb	r3, [r5, #1]
     430:	7828      	ldrb	r0, [r5, #0]
     432:	78aa      	ldrb	r2, [r5, #2]
     434:	021b      	lsls	r3, r3, #8
     436:	4303      	orrs	r3, r0
     438:	0412      	lsls	r2, r2, #16
     43a:	0019      	movs	r1, r3
     43c:	0013      	movs	r3, r2
     43e:	430b      	orrs	r3, r1
     440:	79a9      	ldrb	r1, [r5, #6]
     442:	796f      	ldrb	r7, [r5, #5]
     444:	79ec      	ldrb	r4, [r5, #7]
     446:	0209      	lsls	r1, r1, #8
     448:	4339      	orrs	r1, r7
     44a:	0424      	lsls	r4, r4, #16
     44c:	0008      	movs	r0, r1
     44e:	0021      	movs	r1, r4
     450:	7a2c      	ldrb	r4, [r5, #8]
     452:	78ea      	ldrb	r2, [r5, #3]
     454:	7a6f      	ldrb	r7, [r5, #9]
     456:	4301      	orrs	r1, r0
     458:	0624      	lsls	r4, r4, #24
     45a:	430c      	orrs	r4, r1
     45c:	0612      	lsls	r2, r2, #24
     45e:	431a      	orrs	r2, r3
     460:	0020      	movs	r0, r4
     462:	792b      	ldrb	r3, [r5, #4]
     464:	0039      	movs	r1, r7
     466:	4e18      	ldr	r6, [pc, #96]	; (4c8 <readMS5803AdcResults+0xac>)
     468:	47b0      	blx	r6
    u8_t _byte1 = byteIn(spi2SCK,spi2MISO);
     46a:	7aeb      	ldrb	r3, [r5, #11]
     46c:	7aa9      	ldrb	r1, [r5, #10]
     46e:	021b      	lsls	r3, r3, #8
     470:	430b      	orrs	r3, r1
     472:	001a      	movs	r2, r3
     474:	7b2b      	ldrb	r3, [r5, #12]
     476:	4e15      	ldr	r6, [pc, #84]	; (4cc <readMS5803AdcResults+0xb0>)
     478:	041b      	lsls	r3, r3, #16
     47a:	4313      	orrs	r3, r2
     47c:	7b6a      	ldrb	r2, [r5, #13]
     47e:	7bad      	ldrb	r5, [r5, #14]
     480:	0612      	lsls	r2, r2, #24
     482:	431a      	orrs	r2, r3
     484:	0039      	movs	r1, r7
     486:	002b      	movs	r3, r5
     488:	0020      	movs	r0, r4
     48a:	9203      	str	r2, [sp, #12]
     48c:	47b0      	blx	r6
    u8_t _byte2 = byteIn(spi2SCK,spi2MISO);
     48e:	9a03      	ldr	r2, [sp, #12]
//    dummy_rx = spiDataTransfer(SPI2, cmdAdcRead_);
//    u8_t _byte1 = spiDataTransfer(SPI2,dummy_tx);
//    u8_t _byte2 = spiDataTransfer(SPI2,dummy_tx);
//    u8_t _byte3 = spiDataTransfer(SPI2,dummy_tx);
    byteOut(spi2SCK,spi2MOSI, cmdAdcRead_);
    u8_t _byte1 = byteIn(spi2SCK,spi2MISO);
     490:	9004      	str	r0, [sp, #16]
    u8_t _byte2 = byteIn(spi2SCK,spi2MISO);
     492:	002b      	movs	r3, r5
     494:	0039      	movs	r1, r7
     496:	0020      	movs	r0, r4
     498:	47b0      	blx	r6
    u8_t _byte3 = byteIn(spi2SCK,spi2MISO);
     49a:	9a03      	ldr	r2, [sp, #12]
//    u8_t _byte1 = spiDataTransfer(SPI2,dummy_tx);
//    u8_t _byte2 = spiDataTransfer(SPI2,dummy_tx);
//    u8_t _byte3 = spiDataTransfer(SPI2,dummy_tx);
    byteOut(spi2SCK,spi2MOSI, cmdAdcRead_);
    u8_t _byte1 = byteIn(spi2SCK,spi2MISO);
    u8_t _byte2 = byteIn(spi2SCK,spi2MISO);
     49c:	9005      	str	r0, [sp, #20]
    u8_t _byte3 = byteIn(spi2SCK,spi2MISO);
     49e:	002b      	movs	r3, r5
     4a0:	0020      	movs	r0, r4
     4a2:	0039      	movs	r1, r7
     4a4:	47b0      	blx	r6
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     4a6:	2280      	movs	r2, #128	; 0x80
     4a8:	4b05      	ldr	r3, [pc, #20]	; (4c0 <readMS5803AdcResults+0xa4>)
     4aa:	01d2      	lsls	r2, r2, #7
     4ac:	619a      	str	r2, [r3, #24]
    pinHigh(cs_baro);

    u32_t _receive = (_byte1 << 16) | (_byte2 << 8) | (_byte3);
    return _receive;
     4ae:	9b04      	ldr	r3, [sp, #16]
     4b0:	9a05      	ldr	r2, [sp, #20]
     4b2:	041b      	lsls	r3, r3, #16
     4b4:	0215      	lsls	r5, r2, #8
     4b6:	431d      	orrs	r5, r3
     4b8:	4328      	orrs	r0, r5
}
     4ba:	b007      	add	sp, #28
     4bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
     4be:	46c0      	nop			; (mov r8, r8)
     4c0:	41004400 	.word	0x41004400
     4c4:	0000648c 	.word	0x0000648c
     4c8:	00000c81 	.word	0x00000c81
     4cc:	00000ced 	.word	0x00000ced

000004d0 <ConvertPressureTemperature>:

void ConvertPressureTemperature(u32_t pressureRaw, u32_t tempRaw, u32_t* temperatureCelcus, int32_t* pressureMbar ) {
     4d0:	b5f0      	push	{r4, r5, r6, r7, lr}
     4d2:	b087      	sub	sp, #28
     4d4:	9304      	str	r3, [sp, #16]
    const u16_t C1 = coefficients_[0];
     4d6:	4b24      	ldr	r3, [pc, #144]	; (568 <ConvertPressureTemperature+0x98>)

    u32_t _receive = (_byte1 << 16) | (_byte2 << 8) | (_byte3);
    return _receive;
}

void ConvertPressureTemperature(u32_t pressureRaw, u32_t tempRaw, u32_t* temperatureCelcus, int32_t* pressureMbar ) {
     4d8:	0014      	movs	r4, r2
    const u16_t C1 = coefficients_[0];
     4da:	881a      	ldrh	r2, [r3, #0]

    u32_t _receive = (_byte1 << 16) | (_byte2 << 8) | (_byte3);
    return _receive;
}

void ConvertPressureTemperature(u32_t pressureRaw, u32_t tempRaw, u32_t* temperatureCelcus, int32_t* pressureMbar ) {
     4dc:	9003      	str	r0, [sp, #12]
    const u16_t C1 = coefficients_[0];
     4de:	9200      	str	r2, [sp, #0]
    const u16_t C2 = coefficients_[1];
     4e0:	885a      	ldrh	r2, [r3, #2]
    const u16_t C5 = coefficients_[4];
    const u16_t C6 = coefficients_[5];

    // calculate 1st order pressure and temperature (MS5607 1st order algorithm)
    const  int32_t dT = (tempRaw) - ((int32_t)C5 << 8);
    *temperatureCelcus  = 2000 + (((int64_t)dT * C6) >> 23) ;
     4e2:	4f22      	ldr	r7, [pc, #136]	; (56c <ConvertPressureTemperature+0x9c>)
    return _receive;
}

void ConvertPressureTemperature(u32_t pressureRaw, u32_t tempRaw, u32_t* temperatureCelcus, int32_t* pressureMbar ) {
    const u16_t C1 = coefficients_[0];
    const u16_t C2 = coefficients_[1];
     4e4:	9201      	str	r2, [sp, #4]
    const u16_t C3 = coefficients_[2];
    const u16_t C4 = coefficients_[3];
     4e6:	88da      	ldrh	r2, [r3, #6]
}

void ConvertPressureTemperature(u32_t pressureRaw, u32_t tempRaw, u32_t* temperatureCelcus, int32_t* pressureMbar ) {
    const u16_t C1 = coefficients_[0];
    const u16_t C2 = coefficients_[1];
    const u16_t C3 = coefficients_[2];
     4e8:	889d      	ldrh	r5, [r3, #4]
    const u16_t C4 = coefficients_[3];
     4ea:	9202      	str	r2, [sp, #8]
    const u16_t C5 = coefficients_[4];
    const u16_t C6 = coefficients_[5];

    // calculate 1st order pressure and temperature (MS5607 1st order algorithm)
    const  int32_t dT = (tempRaw) - ((int32_t)C5 << 8);
    *temperatureCelcus  = 2000 + (((int64_t)dT * C6) >> 23) ;
     4ec:	891e      	ldrh	r6, [r3, #8]
     4ee:	0236      	lsls	r6, r6, #8
     4f0:	1b8e      	subs	r6, r1, r6
     4f2:	17f2      	asrs	r2, r6, #31
     4f4:	9205      	str	r2, [sp, #20]
     4f6:	8958      	ldrh	r0, [r3, #10]
     4f8:	0032      	movs	r2, r6
     4fa:	17f3      	asrs	r3, r6, #31
     4fc:	2100      	movs	r1, #0
     4fe:	47b8      	blx	r7
     500:	23fa      	movs	r3, #250	; 0xfa
     502:	0249      	lsls	r1, r1, #9
     504:	0dc0      	lsrs	r0, r0, #23
     506:	4308      	orrs	r0, r1
     508:	00db      	lsls	r3, r3, #3
     50a:	18c0      	adds	r0, r0, r3
     50c:	6020      	str	r0, [r4, #0]

    const  int64_t OFF   = ((int64_t)C2 << 16) + ((C4 * (int64_t)dT) >> 7);
    const  int64_t SENS  =  ((int64_t)C1 << 15) + ((C3 * (int64_t)dT) >> 8);
    *pressureMbar = ((((pressureRaw * SENS) >> 21) - OFF) >> 15);
     50e:	0032      	movs	r2, r6
     510:	17f3      	asrs	r3, r6, #31
     512:	0028      	movs	r0, r5
     514:	2100      	movs	r1, #0
     516:	47b8      	blx	r7
     518:	060c      	lsls	r4, r1, #24
     51a:	120b      	asrs	r3, r1, #8
     51c:	2100      	movs	r1, #0
     51e:	0a02      	lsrs	r2, r0, #8
     520:	4322      	orrs	r2, r4
     522:	9c00      	ldr	r4, [sp, #0]
     524:	03e0      	lsls	r0, r4, #15
     526:	1880      	adds	r0, r0, r2
     528:	4159      	adcs	r1, r3
     52a:	9a03      	ldr	r2, [sp, #12]
     52c:	2300      	movs	r3, #0
     52e:	47b8      	blx	r7
     530:	02cb      	lsls	r3, r1, #11
     532:	0d44      	lsrs	r4, r0, #21
     534:	0032      	movs	r2, r6
     536:	431c      	orrs	r4, r3
     538:	154d      	asrs	r5, r1, #21
     53a:	9b05      	ldr	r3, [sp, #20]
     53c:	9802      	ldr	r0, [sp, #8]
     53e:	2100      	movs	r1, #0
     540:	47b8      	blx	r7
     542:	064b      	lsls	r3, r1, #25
     544:	09c6      	lsrs	r6, r0, #7
     546:	431e      	orrs	r6, r3
     548:	2300      	movs	r3, #0
     54a:	11cf      	asrs	r7, r1, #7
     54c:	9901      	ldr	r1, [sp, #4]
     54e:	040a      	lsls	r2, r1, #16
     550:	1992      	adds	r2, r2, r6
     552:	417b      	adcs	r3, r7
     554:	1aa4      	subs	r4, r4, r2
     556:	419d      	sbcs	r5, r3
     558:	046b      	lsls	r3, r5, #17
     55a:	0be4      	lsrs	r4, r4, #15
     55c:	431c      	orrs	r4, r3
     55e:	9b04      	ldr	r3, [sp, #16]
     560:	601c      	str	r4, [r3, #0]

}
     562:	b007      	add	sp, #28
     564:	bdf0      	pop	{r4, r5, r6, r7, pc}
     566:	46c0      	nop			; (mov r8, r8)
     568:	2000060a 	.word	0x2000060a
     56c:	00003bed 	.word	0x00003bed

00000570 <paToFeetNOAA>:

double paToFeetNOAA(int32_t pressureMbar) {
     570:	b510      	push	{r4, lr}

    double lower =(((double)(pressureMbar)/10)/1013.25);
    double exponent = 0.190284;

    double altFeet = (1-pow(lower,exponent))*145366.45;
     572:	4b0c      	ldr	r3, [pc, #48]	; (5a4 <paToFeetNOAA+0x34>)
     574:	4798      	blx	r3
     576:	4c0c      	ldr	r4, [pc, #48]	; (5a8 <paToFeetNOAA+0x38>)
     578:	2200      	movs	r2, #0
     57a:	4b0c      	ldr	r3, [pc, #48]	; (5ac <paToFeetNOAA+0x3c>)
     57c:	47a0      	blx	r4
     57e:	2200      	movs	r2, #0
     580:	4b0b      	ldr	r3, [pc, #44]	; (5b0 <paToFeetNOAA+0x40>)
     582:	47a0      	blx	r4
     584:	4a0b      	ldr	r2, [pc, #44]	; (5b4 <paToFeetNOAA+0x44>)
     586:	4b0c      	ldr	r3, [pc, #48]	; (5b8 <paToFeetNOAA+0x48>)
     588:	4c0c      	ldr	r4, [pc, #48]	; (5bc <paToFeetNOAA+0x4c>)
     58a:	47a0      	blx	r4
    return altFeet;
     58c:	4c0c      	ldr	r4, [pc, #48]	; (5c0 <paToFeetNOAA+0x50>)
double paToFeetNOAA(int32_t pressureMbar) {

    double lower =(((double)(pressureMbar)/10)/1013.25);
    double exponent = 0.190284;

    double altFeet = (1-pow(lower,exponent))*145366.45;
     58e:	0002      	movs	r2, r0
     590:	000b      	movs	r3, r1
    return altFeet;
     592:	2000      	movs	r0, #0
     594:	490b      	ldr	r1, [pc, #44]	; (5c4 <paToFeetNOAA+0x54>)
     596:	47a0      	blx	r4
     598:	4a0b      	ldr	r2, [pc, #44]	; (5c8 <paToFeetNOAA+0x58>)
     59a:	4b0c      	ldr	r3, [pc, #48]	; (5cc <paToFeetNOAA+0x5c>)
     59c:	4c0c      	ldr	r4, [pc, #48]	; (5d0 <paToFeetNOAA+0x60>)
     59e:	47a0      	blx	r4

}
     5a0:	bd10      	pop	{r4, pc}
     5a2:	46c0      	nop			; (mov r8, r8)
     5a4:	00005f01 	.word	0x00005f01
     5a8:	00004a71 	.word	0x00004a71
     5ac:	40240000 	.word	0x40240000
     5b0:	408faa00 	.word	0x408faa00
     5b4:	e279dd3c 	.word	0xe279dd3c
     5b8:	3fc85b39 	.word	0x3fc85b39
     5bc:	000028c9 	.word	0x000028c9
     5c0:	000057ad 	.word	0x000057ad
     5c4:	3ff00000 	.word	0x3ff00000
     5c8:	9999999a 	.word	0x9999999a
     5cc:	4101beb3 	.word	0x4101beb3
     5d0:	000052b9 	.word	0x000052b9

000005d4 <readMS5803Coefficients>:
    }
}

*/

void readMS5803Coefficients() {
     5d4:	b5f0      	push	{r4, r5, r6, r7, lr}
     5d6:	2700      	movs	r7, #0
     5d8:	b087      	sub	sp, #28

    u8_t dummy_tx = 0xFF;
    u8_t dummy_rx;

    for (u8_t coeff_num = 0; coeff_num < 6 ; ++coeff_num ) {
        delay_us(600);
     5da:	2096      	movs	r0, #150	; 0x96
     5dc:	4c2a      	ldr	r4, [pc, #168]	; (688 <readMS5803Coefficients+0xb4>)
     5de:	0080      	lsls	r0, r0, #2
     5e0:	47a0      	blx	r4
        u8_t _cmd = MS5803_CMD_PROM_READ + ((coeff_num+1)*2);
        delay_us(600);
     5e2:	2096      	movs	r0, #150	; 0x96
     5e4:	0080      	lsls	r0, r0, #2
     5e6:	47a0      	blx	r4
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     5e8:	2280      	movs	r2, #128	; 0x80
     5ea:	4b28      	ldr	r3, [pc, #160]	; (68c <readMS5803Coefficients+0xb8>)
     5ec:	01d2      	lsls	r2, r2, #7
     5ee:	615a      	str	r2, [r3, #20]
        pinLow(cs_baro);
//      dummy_rx = spiDataTransfer(SPI1, _cmd);
//      u8_t _byte1 = spiDataTransfer(SPI1,dummy_tx);
//      u8_t _byte2 = spiDataTransfer(SPI1,dummy_tx);
        byteOut(spi2SCK,spi2MOSI, _cmd);
     5f0:	003b      	movs	r3, r7
     5f2:	4c27      	ldr	r4, [pc, #156]	; (690 <readMS5803Coefficients+0xbc>)
     5f4:	3b5e      	subs	r3, #94	; 0x5e
     5f6:	b2db      	uxtb	r3, r3
     5f8:	9300      	str	r3, [sp, #0]
     5fa:	7863      	ldrb	r3, [r4, #1]
     5fc:	7820      	ldrb	r0, [r4, #0]
     5fe:	78a2      	ldrb	r2, [r4, #2]
     600:	021b      	lsls	r3, r3, #8
     602:	4303      	orrs	r3, r0
     604:	0412      	lsls	r2, r2, #16
     606:	0019      	movs	r1, r3
     608:	0013      	movs	r3, r2
     60a:	430b      	orrs	r3, r1
     60c:	79a1      	ldrb	r1, [r4, #6]
     60e:	7966      	ldrb	r6, [r4, #5]
     610:	0209      	lsls	r1, r1, #8
     612:	4331      	orrs	r1, r6
     614:	0008      	movs	r0, r1
     616:	79e1      	ldrb	r1, [r4, #7]
     618:	78e2      	ldrb	r2, [r4, #3]
     61a:	0409      	lsls	r1, r1, #16
     61c:	4301      	orrs	r1, r0
     61e:	7a20      	ldrb	r0, [r4, #8]
     620:	7a66      	ldrb	r6, [r4, #9]
     622:	0612      	lsls	r2, r2, #24
     624:	0600      	lsls	r0, r0, #24
     626:	4308      	orrs	r0, r1
     628:	431a      	orrs	r2, r3
     62a:	0031      	movs	r1, r6
     62c:	7923      	ldrb	r3, [r4, #4]
     62e:	4d19      	ldr	r5, [pc, #100]	; (694 <readMS5803Coefficients+0xc0>)
     630:	9003      	str	r0, [sp, #12]
     632:	47a8      	blx	r5
        u8_t _byte1 = byteIn(spi2SCK,spi2MISO);
     634:	7ae3      	ldrb	r3, [r4, #11]
     636:	0020      	movs	r0, r4
     638:	7aa1      	ldrb	r1, [r4, #10]
     63a:	7b24      	ldrb	r4, [r4, #12]
     63c:	021b      	lsls	r3, r3, #8
     63e:	430b      	orrs	r3, r1
     640:	0424      	lsls	r4, r4, #16
     642:	001a      	movs	r2, r3
     644:	0023      	movs	r3, r4
     646:	7b44      	ldrb	r4, [r0, #13]
     648:	7b85      	ldrb	r5, [r0, #14]
     64a:	4313      	orrs	r3, r2
     64c:	0624      	lsls	r4, r4, #24
     64e:	431c      	orrs	r4, r3
     650:	0022      	movs	r2, r4
     652:	002b      	movs	r3, r5
     654:	9404      	str	r4, [sp, #16]
     656:	0031      	movs	r1, r6
     658:	4c0f      	ldr	r4, [pc, #60]	; (698 <readMS5803Coefficients+0xc4>)
     65a:	9803      	ldr	r0, [sp, #12]
     65c:	47a0      	blx	r4
        u8_t _byte2 = byteIn(spi2SCK,spi2MISO);
     65e:	002b      	movs	r3, r5
        pinLow(cs_baro);
//      dummy_rx = spiDataTransfer(SPI1, _cmd);
//      u8_t _byte1 = spiDataTransfer(SPI1,dummy_tx);
//      u8_t _byte2 = spiDataTransfer(SPI1,dummy_tx);
        byteOut(spi2SCK,spi2MOSI, _cmd);
        u8_t _byte1 = byteIn(spi2SCK,spi2MISO);
     660:	9005      	str	r0, [sp, #20]
        u8_t _byte2 = byteIn(spi2SCK,spi2MISO);
     662:	9a04      	ldr	r2, [sp, #16]
     664:	9803      	ldr	r0, [sp, #12]
     666:	0031      	movs	r1, r6
     668:	4c0b      	ldr	r4, [pc, #44]	; (698 <readMS5803Coefficients+0xc4>)
     66a:	47a0      	blx	r4
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     66c:	2280      	movs	r2, #128	; 0x80
     66e:	4b07      	ldr	r3, [pc, #28]	; (68c <readMS5803Coefficients+0xb8>)
     670:	01d2      	lsls	r2, r2, #7
     672:	619a      	str	r2, [r3, #24]
        pinHigh(cs_baro);
        coefficients_[coeff_num] = (_byte1 << 8) | _byte2;
     674:	9b05      	ldr	r3, [sp, #20]
     676:	021d      	lsls	r5, r3, #8
     678:	4b08      	ldr	r3, [pc, #32]	; (69c <readMS5803Coefficients+0xc8>)
     67a:	4328      	orrs	r0, r5
     67c:	53d8      	strh	r0, [r3, r7]
     67e:	3702      	adds	r7, #2
void readMS5803Coefficients() {

    u8_t dummy_tx = 0xFF;
    u8_t dummy_rx;

    for (u8_t coeff_num = 0; coeff_num < 6 ; ++coeff_num ) {
     680:	2f0c      	cmp	r7, #12
     682:	d1aa      	bne.n	5da <readMS5803Coefficients+0x6>
        u8_t _byte2 = byteIn(spi2SCK,spi2MISO);
        pinHigh(cs_baro);
        coefficients_[coeff_num] = (_byte1 << 8) | _byte2;
    }

}
     684:	b007      	add	sp, #28
     686:	bdf0      	pop	{r4, r5, r6, r7, pc}
     688:	00000fa1 	.word	0x00000fa1
     68c:	41004400 	.word	0x41004400
     690:	0000648c 	.word	0x0000648c
     694:	00000c81 	.word	0x00000c81
     698:	00000ced 	.word	0x00000ced
     69c:	2000060a 	.word	0x2000060a

000006a0 <initMS5803Barometer>:

void initMS5803Barometer() {
     6a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     6a2:	2580      	movs	r5, #128	; 0x80
    u8_t dummy_tx = 0xFF;
    u8_t dummy_rx;

    pinLow(cs_baro);
//   dummy_rx = spiDataTransfer(SPI1, MS5803_CMD_RES);
    byteOut(spi2SCK,spi2MOSI, MS5803_CMD_RES);
     6a4:	231e      	movs	r3, #30
     6a6:	4914      	ldr	r1, [pc, #80]	; (6f8 <initMS5803Barometer+0x58>)
     6a8:	4c14      	ldr	r4, [pc, #80]	; (6fc <initMS5803Barometer+0x5c>)
     6aa:	01ed      	lsls	r5, r5, #7
     6ac:	6165      	str	r5, [r4, #20]
     6ae:	9300      	str	r3, [sp, #0]
     6b0:	784b      	ldrb	r3, [r1, #1]
     6b2:	780e      	ldrb	r6, [r1, #0]
     6b4:	788a      	ldrb	r2, [r1, #2]
     6b6:	021b      	lsls	r3, r3, #8
     6b8:	4333      	orrs	r3, r6
     6ba:	0412      	lsls	r2, r2, #16
     6bc:	0018      	movs	r0, r3
     6be:	0013      	movs	r3, r2
     6c0:	78ca      	ldrb	r2, [r1, #3]
     6c2:	4303      	orrs	r3, r0
     6c4:	0612      	lsls	r2, r2, #24
     6c6:	1d4f      	adds	r7, r1, #5
     6c8:	431a      	orrs	r2, r3
     6ca:	7948      	ldrb	r0, [r1, #5]
     6cc:	790b      	ldrb	r3, [r1, #4]
     6ce:	7989      	ldrb	r1, [r1, #6]
     6d0:	0209      	lsls	r1, r1, #8
     6d2:	4301      	orrs	r1, r0
     6d4:	78b8      	ldrb	r0, [r7, #2]
     6d6:	000e      	movs	r6, r1
     6d8:	0400      	lsls	r0, r0, #16
     6da:	0001      	movs	r1, r0
     6dc:	78f8      	ldrb	r0, [r7, #3]
     6de:	4331      	orrs	r1, r6
     6e0:	0600      	lsls	r0, r0, #24
     6e2:	4308      	orrs	r0, r1
     6e4:	4e06      	ldr	r6, [pc, #24]	; (700 <initMS5803Barometer+0x60>)
     6e6:	7939      	ldrb	r1, [r7, #4]
     6e8:	47b0      	blx	r6
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     6ea:	61a5      	str	r5, [r4, #24]
    pinHigh(cs_baro);
    delay_ms(200);
     6ec:	20c8      	movs	r0, #200	; 0xc8
     6ee:	4b05      	ldr	r3, [pc, #20]	; (704 <initMS5803Barometer+0x64>)
     6f0:	4798      	blx	r3
    readMS5803Coefficients();
     6f2:	4b05      	ldr	r3, [pc, #20]	; (708 <initMS5803Barometer+0x68>)
     6f4:	4798      	blx	r3
    //my_barometer->temperatureCelcus = 2000;




}
     6f6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
     6f8:	0000648c 	.word	0x0000648c
     6fc:	41004400 	.word	0x41004400
     700:	00000c81 	.word	0x00000c81
     704:	00000fd1 	.word	0x00000fd1
     708:	000005d5 	.word	0x000005d5

0000070c <init>:

void init() {


    /* Set 1 Flash Wait State for 48MHz, cf tables 20.9 and 35.27 in SAMD21 Datasheet */
    NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val;
     70c:	211e      	movs	r1, #30
#include <util.h>
#include <boardDefines.h>
#include "math.h"


void init() {
     70e:	b5f0      	push	{r4, r5, r6, r7, lr}


    /* Set 1 Flash Wait State for 48MHz, cf tables 20.9 and 35.27 in SAMD21 Datasheet */
    NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val;
     710:	2702      	movs	r7, #2
     712:	4acc      	ldr	r2, [pc, #816]	; (a44 <init+0x338>)
#include <util.h>
#include <boardDefines.h>
#include "math.h"


void init() {
     714:	b085      	sub	sp, #20


    /* Set 1 Flash Wait State for 48MHz, cf tables 20.9 and 35.27 in SAMD21 Datasheet */
    NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val;
     716:	6853      	ldr	r3, [r2, #4]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     718:	2401      	movs	r4, #1
     71a:	438b      	bics	r3, r1
     71c:	433b      	orrs	r3, r7
     71e:	6053      	str	r3, [r2, #4]


    /* Turn on the digital interface clock */
    PM->APBAMASK.reg |= PM_APBAMASK_GCLK;
     720:	4ac9      	ldr	r2, [pc, #804]	; (a48 <init+0x33c>)
     722:	3916      	subs	r1, #22
     724:	6993      	ldr	r3, [r2, #24]

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     726:	2610      	movs	r6, #16
     728:	430b      	orrs	r3, r1
     72a:	6193      	str	r3, [r2, #24]


    SystemInit();
     72c:	4bc7      	ldr	r3, [pc, #796]	; (a4c <init+0x340>)
     72e:	4798      	blx	r3
    GclkInit();
     730:	4bc7      	ldr	r3, [pc, #796]	; (a50 <init+0x344>)
     732:	4798      	blx	r3
    RtcInit();
     734:	4bc7      	ldr	r3, [pc, #796]	; (a54 <init+0x348>)
     736:	4798      	blx	r3
    delayInit();
     738:	4bc7      	ldr	r3, [pc, #796]	; (a58 <init+0x34c>)
     73a:	4798      	blx	r3
    adcInit();
     73c:	4bc7      	ldr	r3, [pc, #796]	; (a5c <init+0x350>)
     73e:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     740:	2240      	movs	r2, #64	; 0x40
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     742:	21c1      	movs	r1, #193	; 0xc1

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     744:	4bc6      	ldr	r3, [pc, #792]	; (a60 <init+0x354>)
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     746:	0089      	lsls	r1, r1, #2

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     748:	601a      	str	r2, [r3, #0]
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     74a:	5858      	ldr	r0, [r3, r1]
     74c:	4ac5      	ldr	r2, [pc, #788]	; (a64 <init+0x358>)
     74e:	4002      	ands	r2, r0
     750:	505a      	str	r2, [r3, r1]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     752:	4bc5      	ldr	r3, [pc, #788]	; (a68 <init+0x35c>)
     754:	0019      	movs	r1, r3
     756:	3154      	adds	r1, #84	; 0x54
     758:	780a      	ldrb	r2, [r1, #0]

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     75a:	0018      	movs	r0, r3
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     75c:	43a2      	bics	r2, r4
     75e:	700a      	strb	r2, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     760:	2280      	movs	r2, #128	; 0x80
     762:	0352      	lsls	r2, r2, #13
     764:	609a      	str	r2, [r3, #8]

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     766:	220f      	movs	r2, #15
     768:	3033      	adds	r0, #51	; 0x33
     76a:	7801      	ldrb	r1, [r0, #0]
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     76c:	001d      	movs	r5, r3

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     76e:	4391      	bics	r1, r2
     770:	4321      	orrs	r1, r4
     772:	7001      	strb	r1, [r0, #0]
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     774:	7cc1      	ldrb	r1, [r0, #19]
     776:	35c3      	adds	r5, #195	; 0xc3
     778:	4321      	orrs	r1, r4
     77a:	74c1      	strb	r1, [r0, #19]

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     77c:	0019      	movs	r1, r3
     77e:	31b1      	adds	r1, #177	; 0xb1
     780:	7808      	ldrb	r0, [r1, #0]
     782:	4010      	ands	r0, r2
     784:	4330      	orrs	r0, r6
     786:	7008      	strb	r0, [r1, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     788:	7828      	ldrb	r0, [r5, #0]
     78a:	4320      	orrs	r0, r4
     78c:	7028      	strb	r0, [r5, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     78e:	7808      	ldrb	r0, [r1, #0]
     790:	4010      	ands	r0, r2
     792:	4330      	orrs	r0, r6
     794:	7008      	strb	r0, [r1, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     796:	7828      	ldrb	r0, [r5, #0]
     798:	4320      	orrs	r0, r4
     79a:	7028      	strb	r0, [r5, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     79c:	7d28      	ldrb	r0, [r5, #20]
     79e:	43a0      	bics	r0, r4
     7a0:	7528      	strb	r0, [r5, #20]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     7a2:	2580      	movs	r5, #128	; 0x80
     7a4:	48b1      	ldr	r0, [pc, #708]	; (a6c <init+0x360>)
     7a6:	042d      	lsls	r5, r5, #16
     7a8:	6005      	str	r5, [r0, #0]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     7aa:	2094      	movs	r0, #148	; 0x94
     7ac:	4684      	mov	ip, r0
     7ae:	449c      	add	ip, r3
     7b0:	4660      	mov	r0, ip
     7b2:	6005      	str	r5, [r0, #0]
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     7b4:	001d      	movs	r5, r3

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     7b6:	7808      	ldrb	r0, [r1, #0]
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     7b8:	35c2      	adds	r5, #194	; 0xc2

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     7ba:	4390      	bics	r0, r2
     7bc:	4320      	orrs	r0, r4
     7be:	7008      	strb	r0, [r1, #0]
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     7c0:	7828      	ldrb	r0, [r5, #0]
     7c2:	4320      	orrs	r0, r4
     7c4:	7028      	strb	r0, [r5, #0]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     7c6:	7808      	ldrb	r0, [r1, #0]
     7c8:	4390      	bics	r0, r2
     7ca:	4320      	orrs	r0, r4
     7cc:	7008      	strb	r0, [r1, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     7ce:	0018      	movs	r0, r3
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     7d0:	7829      	ldrb	r1, [r5, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     7d2:	30d6      	adds	r0, #214	; 0xd6
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     7d4:	4321      	orrs	r1, r4
     7d6:	7029      	strb	r1, [r5, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     7d8:	7801      	ldrb	r1, [r0, #0]
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     7da:	3d7f      	subs	r5, #127	; 0x7f
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     7dc:	43a1      	bics	r1, r4
     7de:	7001      	strb	r1, [r0, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     7e0:	2080      	movs	r0, #128	; 0x80
     7e2:	49a2      	ldr	r1, [pc, #648]	; (a6c <init+0x360>)
     7e4:	03c0      	lsls	r0, r0, #15
     7e6:	6008      	str	r0, [r1, #0]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     7e8:	4661      	mov	r1, ip
     7ea:	6008      	str	r0, [r1, #0]

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     7ec:	0018      	movs	r0, r3
     7ee:	3031      	adds	r0, #49	; 0x31
     7f0:	7801      	ldrb	r1, [r0, #0]
     7f2:	4011      	ands	r1, r2
     7f4:	430e      	orrs	r6, r1
     7f6:	7006      	strb	r6, [r0, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     7f8:	7829      	ldrb	r1, [r5, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     7fa:	001e      	movs	r6, r3
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     7fc:	4321      	orrs	r1, r4
     7fe:	7029      	strb	r1, [r5, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     800:	7da9      	ldrb	r1, [r5, #22]
     802:	3505      	adds	r5, #5
     804:	43a1      	bics	r1, r4
     806:	7469      	strb	r1, [r5, #17]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     808:	2180      	movs	r1, #128	; 0x80
     80a:	0489      	lsls	r1, r1, #18
     80c:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     80e:	6159      	str	r1, [r3, #20]

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     810:	7801      	ldrb	r1, [r0, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     812:	3649      	adds	r6, #73	; 0x49

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     814:	4391      	bics	r1, r2
     816:	4321      	orrs	r1, r4
     818:	7001      	strb	r1, [r0, #0]
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     81a:	7c41      	ldrb	r1, [r0, #17]
     81c:	3011      	adds	r0, #17
     81e:	4321      	orrs	r1, r4
     820:	7001      	strb	r1, [r0, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     822:	7d81      	ldrb	r1, [r0, #22]
     824:	43a1      	bics	r1, r4
     826:	7581      	strb	r1, [r0, #22]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     828:	2180      	movs	r1, #128	; 0x80
     82a:	0449      	lsls	r1, r1, #17
     82c:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     82e:	6159      	str	r1, [r3, #20]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     830:	9503      	str	r5, [sp, #12]
     832:	7829      	ldrb	r1, [r5, #0]
     834:	43a1      	bics	r1, r4
     836:	7029      	strb	r1, [r5, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     838:	2180      	movs	r1, #128	; 0x80
     83a:	0049      	lsls	r1, r1, #1
     83c:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     83e:	7831      	ldrb	r1, [r6, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     840:	2520      	movs	r5, #32
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     842:	43a1      	bics	r1, r4
     844:	7031      	strb	r1, [r6, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     846:	2180      	movs	r1, #128	; 0x80
     848:	0089      	lsls	r1, r1, #2
     84a:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     84c:	0019      	movs	r1, r3
     84e:	314b      	adds	r1, #75	; 0x4b
     850:	7808      	ldrb	r0, [r1, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     852:	46ac      	mov	ip, r5
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     854:	43a0      	bics	r0, r4
     856:	7008      	strb	r0, [r1, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     858:	7808      	ldrb	r0, [r1, #0]
     85a:	4338      	orrs	r0, r7
     85c:	7008      	strb	r0, [r1, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     85e:	2080      	movs	r0, #128	; 0x80
     860:	0100      	lsls	r0, r0, #4
     862:	6058      	str	r0, [r3, #4]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     864:	4882      	ldr	r0, [pc, #520]	; (a70 <init+0x364>)
     866:	7800      	ldrb	r0, [r0, #0]
     868:	4010      	ands	r0, r2
     86a:	4328      	orrs	r0, r5
     86c:	4d80      	ldr	r5, [pc, #512]	; (a70 <init+0x364>)
     86e:	7028      	strb	r0, [r5, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     870:	7808      	ldrb	r0, [r1, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     872:	4665      	mov	r5, ip
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     874:	4320      	orrs	r0, r4
     876:	7008      	strb	r0, [r1, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     878:	0018      	movs	r0, r3
     87a:	3034      	adds	r0, #52	; 0x34
     87c:	7801      	ldrb	r1, [r0, #0]
     87e:	4011      	ands	r1, r2
     880:	4329      	orrs	r1, r5
     882:	7001      	strb	r1, [r0, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     884:	7831      	ldrb	r1, [r6, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     886:	001d      	movs	r5, r3
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     888:	4321      	orrs	r1, r4
     88a:	7031      	strb	r1, [r6, #0]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     88c:	7801      	ldrb	r1, [r0, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     88e:	354a      	adds	r5, #74	; 0x4a

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     890:	4391      	bics	r1, r2
     892:	4339      	orrs	r1, r7
     894:	7001      	strb	r1, [r0, #0]
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     896:	9903      	ldr	r1, [sp, #12]
     898:	9803      	ldr	r0, [sp, #12]
     89a:	7809      	ldrb	r1, [r1, #0]
     89c:	4321      	orrs	r1, r4
     89e:	7001      	strb	r1, [r0, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     8a0:	0018      	movs	r0, r3
     8a2:	30ca      	adds	r0, #202	; 0xca
     8a4:	7801      	ldrb	r1, [r0, #0]
     8a6:	43a1      	bics	r1, r4
     8a8:	7001      	strb	r1, [r0, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     8aa:	2180      	movs	r1, #128	; 0x80
     8ac:	486f      	ldr	r0, [pc, #444]	; (a6c <init+0x360>)
     8ae:	00c9      	lsls	r1, r1, #3
     8b0:	6001      	str	r1, [r0, #0]
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     8b2:	0018      	movs	r0, r3
     8b4:	3098      	adds	r0, #152	; 0x98
     8b6:	6001      	str	r1, [r0, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     8b8:	7828      	ldrb	r0, [r5, #0]
     8ba:	43a0      	bics	r0, r4
     8bc:	7028      	strb	r0, [r5, #0]
     8be:	3506      	adds	r5, #6
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     8c0:	6099      	str	r1, [r3, #8]
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     8c2:	6199      	str	r1, [r3, #24]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     8c4:	9503      	str	r5, [sp, #12]
     8c6:	7829      	ldrb	r1, [r5, #0]
     8c8:	43a1      	bics	r1, r4
     8ca:	7029      	strb	r1, [r5, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     8cc:	2180      	movs	r1, #128	; 0x80
     8ce:	0249      	lsls	r1, r1, #9
     8d0:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     8d2:	7a31      	ldrb	r1, [r6, #8]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     8d4:	4665      	mov	r5, ip
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     8d6:	43a1      	bics	r1, r4
     8d8:	7231      	strb	r1, [r6, #8]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     8da:	2180      	movs	r1, #128	; 0x80
     8dc:	0289      	lsls	r1, r1, #10
     8de:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     8e0:	0019      	movs	r1, r3
     8e2:	3153      	adds	r1, #83	; 0x53
     8e4:	7808      	ldrb	r0, [r1, #0]
     8e6:	43a0      	bics	r0, r4
     8e8:	7008      	strb	r0, [r1, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     8ea:	7808      	ldrb	r0, [r1, #0]
     8ec:	4338      	orrs	r0, r7
     8ee:	7008      	strb	r0, [r1, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     8f0:	2080      	movs	r0, #128	; 0x80
     8f2:	0300      	lsls	r0, r0, #12
     8f4:	6058      	str	r0, [r3, #4]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     8f6:	485f      	ldr	r0, [pc, #380]	; (a74 <init+0x368>)
     8f8:	7800      	ldrb	r0, [r0, #0]
     8fa:	4010      	ands	r0, r2
     8fc:	4328      	orrs	r0, r5
     8fe:	4d5d      	ldr	r5, [pc, #372]	; (a74 <init+0x368>)
     900:	7028      	strb	r0, [r5, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     902:	7808      	ldrb	r0, [r1, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     904:	4665      	mov	r5, ip
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     906:	4320      	orrs	r0, r4
     908:	7008      	strb	r0, [r1, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     90a:	0018      	movs	r0, r3
     90c:	3038      	adds	r0, #56	; 0x38
     90e:	7801      	ldrb	r1, [r0, #0]
     910:	4011      	ands	r1, r2
     912:	4329      	orrs	r1, r5
     914:	7001      	strb	r1, [r0, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     916:	7a31      	ldrb	r1, [r6, #8]
     918:	4321      	orrs	r1, r4
     91a:	7231      	strb	r1, [r6, #8]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     91c:	7801      	ldrb	r1, [r0, #0]
     91e:	4391      	bics	r1, r2
     920:	4339      	orrs	r1, r7
     922:	7001      	strb	r1, [r0, #0]
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     924:	9903      	ldr	r1, [sp, #12]
     926:	9803      	ldr	r0, [sp, #12]
     928:	7809      	ldrb	r1, [r1, #0]
     92a:	4321      	orrs	r1, r4
     92c:	7001      	strb	r1, [r0, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     92e:	0018      	movs	r0, r3
     930:	3052      	adds	r0, #82	; 0x52
     932:	7801      	ldrb	r1, [r0, #0]
     934:	3806      	subs	r0, #6
     936:	43a1      	bics	r1, r4
     938:	7181      	strb	r1, [r0, #6]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     93a:	2180      	movs	r1, #128	; 0x80
     93c:	02c9      	lsls	r1, r1, #11
     93e:	6099      	str	r1, [r3, #8]
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     940:	6199      	str	r1, [r3, #24]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     942:	7801      	ldrb	r1, [r0, #0]
     944:	43a1      	bics	r1, r4
     946:	7001      	strb	r1, [r0, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     948:	2180      	movs	r1, #128	; 0x80
     94a:	0149      	lsls	r1, r1, #5
     94c:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     94e:	78c1      	ldrb	r1, [r0, #3]
     950:	43a1      	bics	r1, r4
     952:	70c1      	strb	r1, [r0, #3]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     954:	2180      	movs	r1, #128	; 0x80
     956:	0209      	lsls	r1, r1, #8
     958:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     95a:	0019      	movs	r1, r3
     95c:	314d      	adds	r1, #77	; 0x4d
     95e:	7808      	ldrb	r0, [r1, #0]
     960:	43a0      	bics	r0, r4
     962:	7008      	strb	r0, [r1, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     964:	7808      	ldrb	r0, [r1, #0]
     966:	4338      	orrs	r0, r7
     968:	7008      	strb	r0, [r1, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     96a:	2180      	movs	r1, #128	; 0x80
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     96c:	0018      	movs	r0, r3


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     96e:	0189      	lsls	r1, r1, #6
     970:	6059      	str	r1, [r3, #4]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     972:	304e      	adds	r0, #78	; 0x4e
     974:	7801      	ldrb	r1, [r0, #0]
     976:	43a1      	bics	r1, r4
     978:	7001      	strb	r1, [r0, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     97a:	2180      	movs	r1, #128	; 0x80
     97c:	01c9      	lsls	r1, r1, #7
     97e:	6099      	str	r1, [r3, #8]
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     980:	6199      	str	r1, [r3, #24]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     982:	0019      	movs	r1, r3
     984:	3155      	adds	r1, #85	; 0x55
     986:	7808      	ldrb	r0, [r1, #0]
     988:	43a0      	bics	r0, r4
     98a:	7008      	strb	r0, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     98c:	2080      	movs	r0, #128	; 0x80
     98e:	0380      	lsls	r0, r0, #14
     990:	6098      	str	r0, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
}


inline static void pinCfg(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].reg = p.cfg;
     992:	2040      	movs	r0, #64	; 0x40
     994:	7008      	strb	r0, [r1, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     996:	7848      	ldrb	r0, [r1, #1]
    pinMux(TxPo);
    pinIn(RxPo);
    pinMux(RxPo);


    sercomClockEnable(SPI2, 3, 4);
     998:	4e37      	ldr	r6, [pc, #220]	; (a78 <init+0x36c>)
     99a:	43a0      	bics	r0, r4
     99c:	7048      	strb	r0, [r1, #1]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     99e:	2080      	movs	r0, #128	; 0x80
     9a0:	03c0      	lsls	r0, r0, #15
     9a2:	6098      	str	r0, [r3, #8]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     9a4:	0018      	movs	r0, r3
     9a6:	303b      	adds	r0, #59	; 0x3b
     9a8:	7805      	ldrb	r5, [r0, #0]
     9aa:	4395      	bics	r5, r2
     9ac:	433d      	orrs	r5, r7
     9ae:	7005      	strb	r5, [r0, #0]
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     9b0:	784d      	ldrb	r5, [r1, #1]
     9b2:	4325      	orrs	r5, r4
     9b4:	704d      	strb	r5, [r1, #1]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     9b6:	788d      	ldrb	r5, [r1, #2]
     9b8:	43a5      	bics	r5, r4
     9ba:	708d      	strb	r5, [r1, #2]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     9bc:	788d      	ldrb	r5, [r1, #2]
     9be:	433d      	orrs	r5, r7
     9c0:	708d      	strb	r5, [r1, #2]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     9c2:	2580      	movs	r5, #128	; 0x80
     9c4:	042d      	lsls	r5, r5, #16
     9c6:	605d      	str	r5, [r3, #4]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     9c8:	7803      	ldrb	r3, [r0, #0]
    sercomSpiMasterInit(SPI2, 1, 3, 0, 0, 45403);
     9ca:	2500      	movs	r5, #0
     9cc:	401a      	ands	r2, r3
     9ce:	4663      	mov	r3, ip
     9d0:	431a      	orrs	r2, r3
     9d2:	7002      	strb	r2, [r0, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     9d4:	788b      	ldrb	r3, [r1, #2]
    pinMux(TxPo);
    pinIn(RxPo);
    pinMux(RxPo);


    sercomClockEnable(SPI2, 3, 4);
     9d6:	0038      	movs	r0, r7
     9d8:	4323      	orrs	r3, r4
     9da:	708b      	strb	r3, [r1, #2]
     9dc:	2204      	movs	r2, #4
     9de:	2103      	movs	r1, #3
     9e0:	47b0      	blx	r6
    sercomSpiMasterInit(SPI2, 1, 3, 0, 0, 45403);
     9e2:	235b      	movs	r3, #91	; 0x5b
     9e4:	0021      	movs	r1, r4
     9e6:	9301      	str	r3, [sp, #4]
     9e8:	0038      	movs	r0, r7
     9ea:	002b      	movs	r3, r5
     9ec:	4f23      	ldr	r7, [pc, #140]	; (a7c <init+0x370>)
     9ee:	9500      	str	r5, [sp, #0]
     9f0:	2203      	movs	r2, #3
     9f2:	47b8      	blx	r7


    sercomClockEnable(SPI0, 3, 4);
     9f4:	0028      	movs	r0, r5
     9f6:	2204      	movs	r2, #4
     9f8:	2103      	movs	r1, #3
     9fa:	47b0      	blx	r6
    sercomSpiMasterInit(SPI0, 3, 0, 0, 0, 0x00);
     9fc:	002b      	movs	r3, r5
     9fe:	002a      	movs	r2, r5
     a00:	0028      	movs	r0, r5
     a02:	9501      	str	r5, [sp, #4]
     a04:	9500      	str	r5, [sp, #0]
     a06:	2103      	movs	r1, #3
     a08:	47b8      	blx	r7


    sercomClockEnable(SPI1, 3, 4);
     a0a:	0020      	movs	r0, r4
     a0c:	2204      	movs	r2, #4
     a0e:	2103      	movs	r1, #3
     a10:	47b0      	blx	r6
    sercomSpiMasterInit(SPI1, 3, 0, 0, 0, 0x00);
     a12:	002b      	movs	r3, r5
     a14:	002a      	movs	r2, r5
     a16:	0020      	movs	r0, r4
     a18:	9501      	str	r5, [sp, #4]
     a1a:	9500      	str	r5, [sp, #0]
     a1c:	2103      	movs	r1, #3
     a1e:	47b8      	blx	r7


    sercomClockEnable(USART3, 4, 8);
     a20:	2208      	movs	r2, #8
     a22:	2104      	movs	r1, #4
     a24:	2003      	movs	r0, #3
     a26:	47b0      	blx	r6
    sercomUartInit(USART3,1,0,19200);
     a28:	2396      	movs	r3, #150	; 0x96
     a2a:	0021      	movs	r1, r4
     a2c:	002a      	movs	r2, r5
     a2e:	2003      	movs	r0, #3
     a30:	01db      	lsls	r3, r3, #7
     a32:	4c13      	ldr	r4, [pc, #76]	; (a80 <init+0x374>)
     a34:	47a0      	blx	r4


    TC4Init();
     a36:	4b13      	ldr	r3, [pc, #76]	; (a84 <init+0x378>)
     a38:	4798      	blx	r3
    TC5Init();
     a3a:	4b13      	ldr	r3, [pc, #76]	; (a88 <init+0x37c>)
     a3c:	4798      	blx	r3
}
     a3e:	b005      	add	sp, #20
     a40:	bdf0      	pop	{r4, r5, r6, r7, pc}
     a42:	46c0      	nop			; (mov r8, r8)
     a44:	41004000 	.word	0x41004000
     a48:	40000400 	.word	0x40000400
     a4c:	000001d5 	.word	0x000001d5
     a50:	00000df9 	.word	0x00000df9
     a54:	00000e81 	.word	0x00000e81
     a58:	00000f81 	.word	0x00000f81
     a5c:	00000b9d 	.word	0x00000b9d
     a60:	e000e100 	.word	0xe000e100
     a64:	ff00ffff 	.word	0xff00ffff
     a68:	41004400 	.word	0x41004400
     a6c:	41004488 	.word	0x41004488
     a70:	41004435 	.word	0x41004435
     a74:	41004439 	.word	0x41004439
     a78:	00002689 	.word	0x00002689
     a7c:	000026ed 	.word	0x000026ed
     a80:	00002751 	.word	0x00002751
     a84:	00001051 	.word	0x00001051
     a88:	000010b9 	.word	0x000010b9

00000a8c <main>:




int main(void) {
     a8c:	b510      	push	{r4, lr}

    init();
     a8e:	4b0e      	ldr	r3, [pc, #56]	; (ac8 <main+0x3c>)
     a90:	4798      	blx	r3

    initMS5803Barometer();
     a92:	4b0e      	ldr	r3, [pc, #56]	; (acc <main+0x40>)
     a94:	4798      	blx	r3
    IMUinit();
     a96:	4b0e      	ldr	r3, [pc, #56]	; (ad0 <main+0x44>)
     a98:	4798      	blx	r3

    computeKalmanGains();
     a9a:	4b0e      	ldr	r3, [pc, #56]	; (ad4 <main+0x48>)
     a9c:	4798      	blx	r3


    sampleTick();
     a9e:	4c0e      	ldr	r4, [pc, #56]	; (ad8 <main+0x4c>)
     aa0:	47a0      	blx	r4

    beep(400);
     aa2:	20c8      	movs	r0, #200	; 0xc8
     aa4:	4b0d      	ldr	r3, [pc, #52]	; (adc <main+0x50>)
     aa6:	0040      	lsls	r0, r0, #1
     aa8:	4798      	blx	r3


    startupTick = millis();
     aaa:	4b0d      	ldr	r3, [pc, #52]	; (ae0 <main+0x54>)
     aac:	4798      	blx	r3
     aae:	4b0d      	ldr	r3, [pc, #52]	; (ae4 <main+0x58>)
     ab0:	6018      	str	r0, [r3, #0]


    while (1) {


        if (takeSample()) {
     ab2:	4b0d      	ldr	r3, [pc, #52]	; (ae8 <main+0x5c>)
     ab4:	4798      	blx	r3
     ab6:	2800      	cmp	r0, #0
     ab8:	d0fb      	beq.n	ab2 <main+0x26>
            sampleTick();
     aba:	47a0      	blx	r4
            flight();
     abc:	4b0b      	ldr	r3, [pc, #44]	; (aec <main+0x60>)
     abe:	4798      	blx	r3
            computeKalmanStates();
     ac0:	4b0b      	ldr	r3, [pc, #44]	; (af0 <main+0x64>)
     ac2:	4798      	blx	r3
     ac4:	e7f5      	b.n	ab2 <main+0x26>
     ac6:	46c0      	nop			; (mov r8, r8)
     ac8:	0000070d 	.word	0x0000070d
     acc:	000006a1 	.word	0x000006a1
     ad0:	00000af5 	.word	0x00000af5
     ad4:	0000143d 	.word	0x0000143d
     ad8:	00002349 	.word	0x00002349
     adc:	00000d41 	.word	0x00000d41
     ae0:	0000101d 	.word	0x0000101d
     ae4:	20000504 	.word	0x20000504
     ae8:	00002331 	.word	0x00002331
     aec:	00001121 	.word	0x00001121
     af0:	00001cd9 	.word	0x00001cd9

00000af4 <IMUinit>:
#include <util.h>
#include <boardDefines.h>


void IMUinit() {
     af4:	b570      	push	{r4, r5, r6, lr}
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     af6:	4c08      	ldr	r4, [pc, #32]	; (b18 <IMUinit+0x24>)
     af8:	2580      	movs	r5, #128	; 0x80
     afa:	0023      	movs	r3, r4
     afc:	00ed      	lsls	r5, r5, #3
     afe:	3394      	adds	r3, #148	; 0x94
     b00:	601d      	str	r5, [r3, #0]

    uint8_t dummy_Tx = 0xFF;
    uint8_t dummy_rx;

    pinLow(cs_accel);
    dummy_rx = spiDataTransfer(SPI0, BMI_ACCEL_PMU_RANGE);
     b02:	4e06      	ldr	r6, [pc, #24]	; (b1c <IMUinit+0x28>)
     b04:	210f      	movs	r1, #15
     b06:	2000      	movs	r0, #0
     b08:	47b0      	blx	r6
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     b0a:	3498      	adds	r4, #152	; 0x98
    dummy_rx = spiDataTransfer(SPI0, BMI_ACCEL_16G_RANGE);
     b0c:	210c      	movs	r1, #12
     b0e:	2000      	movs	r0, #0
     b10:	47b0      	blx	r6
     b12:	6025      	str	r5, [r4, #0]
    pinHigh(cs_accel);

}
     b14:	bd70      	pop	{r4, r5, r6, pc}
     b16:	46c0      	nop			; (mov r8, r8)
     b18:	41004400 	.word	0x41004400
     b1c:	00002799 	.word	0x00002799

00000b20 <USARTconnectionAvaliable>:

bool USARTconnectionAvaliable() {
     b20:	b510      	push	{r4, lr}

    if (sercom(USART3)->SPI.INTFLAG.bit.RXC == 1) {
     b22:	4b09      	ldr	r3, [pc, #36]	; (b48 <USARTconnectionAvaliable+0x28>)
     b24:	7e1c      	ldrb	r4, [r3, #24]
     b26:	0764      	lsls	r4, r4, #29
     b28:	0fe4      	lsrs	r4, r4, #31
     b2a:	2c01      	cmp	r4, #1
     b2c:	d001      	beq.n	b32 <USARTconnectionAvaliable+0x12>
            return true;
        } else {
            return false;
        }
    }
    return false;
     b2e:	2000      	movs	r0, #0
     b30:	e009      	b.n	b46 <USARTconnectionAvaliable+0x26>
}

bool USARTconnectionAvaliable() {

    if (sercom(USART3)->SPI.INTFLAG.bit.RXC == 1) {
        u8_t connectAttempt = usartDataIn(USART3);
     b32:	2003      	movs	r0, #3
     b34:	4b05      	ldr	r3, [pc, #20]	; (b4c <USARTconnectionAvaliable+0x2c>)
     b36:	4798      	blx	r3
     b38:	1e01      	subs	r1, r0, #0
        if (connectAttempt == 0x48) {
     b3a:	2948      	cmp	r1, #72	; 0x48
     b3c:	d1f7      	bne.n	b2e <USARTconnectionAvaliable+0xe>
            usartDataOut(USART3, 'H');
     b3e:	2003      	movs	r0, #3
     b40:	4b03      	ldr	r3, [pc, #12]	; (b50 <USARTconnectionAvaliable+0x30>)
     b42:	4798      	blx	r3
            return true;
     b44:	0020      	movs	r0, r4
        } else {
            return false;
        }
    }
    return false;
}
     b46:	bd10      	pop	{r4, pc}
     b48:	42001400 	.word	0x42001400
     b4c:	000027c9 	.word	0x000027c9
     b50:	000027b1 	.word	0x000027b1

00000b54 <sendTheasePagesToComputer>:

void sendTheasePagesToComputer(u32_t firstPage, u32_t lastPage) {
     b54:	b5f0      	push	{r4, r5, r6, r7, lr}
    for (u16_t page = 0; page <= pagesToSend; ++page) {

        u8_t data[256];
        AT25SEreadPage(pageToReadAddress , data);

        for (u16_t dataByte = 0; dataByte < 256; ++dataByte) {
     b56:	2780      	movs	r7, #128	; 0x80
        }
    }
    return false;
}

void sendTheasePagesToComputer(u32_t firstPage, u32_t lastPage) {
     b58:	0005      	movs	r5, r0

    u16_t pagesToSend = (lastPage - firstPage) >> 8;

    u32_t pageToReadAddress = firstPage;

    for (u16_t page = 0; page <= pagesToSend; ++page) {
     b5a:	2400      	movs	r4, #0
    return false;
}

void sendTheasePagesToComputer(u32_t firstPage, u32_t lastPage) {

    u16_t pagesToSend = (lastPage - firstPage) >> 8;
     b5c:	1a09      	subs	r1, r1, r0
     b5e:	0a09      	lsrs	r1, r1, #8
        }
    }
    return false;
}

void sendTheasePagesToComputer(u32_t firstPage, u32_t lastPage) {
     b60:	b0c3      	sub	sp, #268	; 0x10c

    u16_t pagesToSend = (lastPage - firstPage) >> 8;
     b62:	b28b      	uxth	r3, r1
     b64:	9301      	str	r3, [sp, #4]
    for (u16_t page = 0; page <= pagesToSend; ++page) {

        u8_t data[256];
        AT25SEreadPage(pageToReadAddress , data);

        for (u16_t dataByte = 0; dataByte < 256; ++dataByte) {
     b66:	007f      	lsls	r7, r7, #1
    u32_t pageToReadAddress = firstPage;

    for (u16_t page = 0; page <= pagesToSend; ++page) {

        u8_t data[256];
        AT25SEreadPage(pageToReadAddress , data);
     b68:	a902      	add	r1, sp, #8
     b6a:	0028      	movs	r0, r5
     b6c:	4b09      	ldr	r3, [pc, #36]	; (b94 <sendTheasePagesToComputer+0x40>)
     b6e:	4798      	blx	r3
     b70:	2600      	movs	r6, #0

        for (u16_t dataByte = 0; dataByte < 256; ++dataByte) {
            usartDataOut(USART3, data[dataByte]);
     b72:	ab02      	add	r3, sp, #8
     b74:	5d99      	ldrb	r1, [r3, r6]
     b76:	2003      	movs	r0, #3
     b78:	4b07      	ldr	r3, [pc, #28]	; (b98 <sendTheasePagesToComputer+0x44>)
     b7a:	3601      	adds	r6, #1
     b7c:	4798      	blx	r3
    for (u16_t page = 0; page <= pagesToSend; ++page) {

        u8_t data[256];
        AT25SEreadPage(pageToReadAddress , data);

        for (u16_t dataByte = 0; dataByte < 256; ++dataByte) {
     b7e:	42be      	cmp	r6, r7
     b80:	d1f7      	bne.n	b72 <sendTheasePagesToComputer+0x1e>

    u16_t pagesToSend = (lastPage - firstPage) >> 8;

    u32_t pageToReadAddress = firstPage;

    for (u16_t page = 0; page <= pagesToSend; ++page) {
     b82:	3401      	adds	r4, #1
     b84:	9b01      	ldr	r3, [sp, #4]

        for (u16_t dataByte = 0; dataByte < 256; ++dataByte) {
            usartDataOut(USART3, data[dataByte]);
        }

        pageToReadAddress = pageToReadAddress + 0x100;
     b86:	3501      	adds	r5, #1

    u16_t pagesToSend = (lastPage - firstPage) >> 8;

    u32_t pageToReadAddress = firstPage;

    for (u16_t page = 0; page <= pagesToSend; ++page) {
     b88:	b2a4      	uxth	r4, r4

        for (u16_t dataByte = 0; dataByte < 256; ++dataByte) {
            usartDataOut(USART3, data[dataByte]);
        }

        pageToReadAddress = pageToReadAddress + 0x100;
     b8a:	35ff      	adds	r5, #255	; 0xff

    u16_t pagesToSend = (lastPage - firstPage) >> 8;

    u32_t pageToReadAddress = firstPage;

    for (u16_t page = 0; page <= pagesToSend; ++page) {
     b8c:	42a3      	cmp	r3, r4
     b8e:	d2eb      	bcs.n	b68 <sendTheasePagesToComputer+0x14>
            usartDataOut(USART3, data[dataByte]);
        }

        pageToReadAddress = pageToReadAddress + 0x100;
    }
}
     b90:	b043      	add	sp, #268	; 0x10c
     b92:	bdf0      	pop	{r4, r5, r6, r7, pc}
     b94:	000003b1 	.word	0x000003b1
     b98:	000027b1 	.word	0x000027b1

00000b9c <adcInit>:
#include <util.h>

void adcInit() {

    // set up clock
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;
     b9c:	2180      	movs	r1, #128	; 0x80


#include <util.h>

void adcInit() {
     b9e:	b510      	push	{r4, lr}

    // set up clock
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;
     ba0:	4a10      	ldr	r2, [pc, #64]	; (be4 <adcInit+0x48>)
     ba2:	0249      	lsls	r1, r1, #9
     ba4:	6a13      	ldr	r3, [r2, #32]
    // divide prescaler by 512 (93.75KHz), max adc freq is 2.1MHz
    ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |
                     ADC_CTRLB_RESSEL_12BIT;

    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
     ba6:	4810      	ldr	r0, [pc, #64]	; (be8 <adcInit+0x4c>)
#include <util.h>

void adcInit() {

    // set up clock
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;
     ba8:	430b      	orrs	r3, r1
     baa:	6213      	str	r3, [r2, #32]

    // divide prescaler by 512 (93.75KHz), max adc freq is 2.1MHz
    ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |
     bac:	23e0      	movs	r3, #224	; 0xe0
     bae:	490f      	ldr	r1, [pc, #60]	; (bec <adcInit+0x50>)
                     ADC_CTRLB_RESSEL_12BIT;

    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
     bb0:	4a0f      	ldr	r2, [pc, #60]	; (bf0 <adcInit+0x54>)

    // set up clock
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;

    // divide prescaler by 512 (93.75KHz), max adc freq is 2.1MHz
    ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |
     bb2:	00db      	lsls	r3, r3, #3
     bb4:	808b      	strh	r3, [r1, #4]
                     ADC_CTRLB_RESSEL_12BIT;

    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
     bb6:	8050      	strh	r0, [r2, #2]
                        GCLK_CLKCTRL_GEN(0) |
                        GCLK_CLKCTRL_ID(ADC_GCLK_ID);

    ADC->CALIB.reg =
        ADC_CALIB_BIAS_CAL(
     bb8:	4a0e      	ldr	r2, [pc, #56]	; (bf4 <adcInit+0x58>)
    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(0) |
                        GCLK_CLKCTRL_ID(ADC_GCLK_ID);

    ADC->CALIB.reg =
     bba:	6812      	ldr	r2, [r2, #0]
     bbc:	0150      	lsls	r0, r2, #5
     bbe:	4018      	ands	r0, r3
     bc0:	4b0d      	ldr	r3, [pc, #52]	; (bf8 <adcInit+0x5c>)
     bc2:	0154      	lsls	r4, r2, #5
     bc4:	681a      	ldr	r2, [r3, #0]
     bc6:	0ed3      	lsrs	r3, r2, #27
     bc8:	4323      	orrs	r3, r4
     bca:	b2da      	uxtb	r2, r3
     bcc:	0003      	movs	r3, r0
     bce:	4313      	orrs	r3, r2
     bd0:	850b      	strh	r3, [r1, #40]	; 0x28
        ) |
        ADC_CALIB_LINEARITY_CAL(
            (*(uint64_t *)ADC_FUSES_LINEARITY_0_ADDR >> ADC_FUSES_LINEARITY_0_Pos)
        );

    ADC->REFCTRL.reg = ADC_REFCTRL_REFSEL_INTVCC1;
     bd2:	2302      	movs	r3, #2
     bd4:	704b      	strb	r3, [r1, #1]

    ADC->CTRLA.reg = ADC_CTRLA_ENABLE; // enable
     bd6:	700b      	strb	r3, [r1, #0]
    while(ADC->STATUS.reg & ADC_STATUS_SYNCBUSY);
     bd8:	7e4b      	ldrb	r3, [r1, #25]
     bda:	b25b      	sxtb	r3, r3
     bdc:	2b00      	cmp	r3, #0
     bde:	dbfb      	blt.n	bd8 <adcInit+0x3c>
}
     be0:	bd10      	pop	{r4, pc}
     be2:	46c0      	nop			; (mov r8, r8)
     be4:	40000400 	.word	0x40000400
     be8:	0000401e 	.word	0x0000401e
     bec:	42004000 	.word	0x42004000
     bf0:	40000c00 	.word	0x40000c00
     bf4:	00806024 	.word	0x00806024
     bf8:	00806020 	.word	0x00806020

00000bfc <adcSample>:



u16_t adcSample() {
    ADC->SWTRIG.reg = ADC_SWTRIG_START;
     bfc:	2202      	movs	r2, #2
     bfe:	4b05      	ldr	r3, [pc, #20]	; (c14 <adcSample+0x18>)
     c00:	731a      	strb	r2, [r3, #12]
    while(!(ADC->INTFLAG.reg & ADC_INTFLAG_RESRDY)); // wait until result is ready
     c02:	3a01      	subs	r2, #1
     c04:	7e19      	ldrb	r1, [r3, #24]
     c06:	4211      	tst	r1, r2
     c08:	d0fc      	beq.n	c04 <adcSample+0x8>
    return ADC->RESULT.reg;
     c0a:	4b02      	ldr	r3, [pc, #8]	; (c14 <adcSample+0x18>)
     c0c:	8b58      	ldrh	r0, [r3, #26]
     c0e:	b280      	uxth	r0, r0
}
     c10:	4770      	bx	lr
     c12:	46c0      	nop			; (mov r8, r8)
     c14:	42004000 	.word	0x42004000

00000c18 <adc_read>:


u16_t adc_read(Pin p) {
     c18:	b537      	push	{r0, r1, r2, r4, r5, lr}
    u16_t buad;

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
     c1a:	2501      	movs	r5, #1
     c1c:	0c02      	lsrs	r2, r0, #16
     c1e:	b2d4      	uxtb	r4, r2
     c20:	9000      	str	r0, [sp, #0]
     c22:	0e00      	lsrs	r0, r0, #24
     c24:	9101      	str	r1, [sp, #4]
     c26:	0842      	lsrs	r2, r0, #1
     c28:	01e3      	lsls	r3, r4, #7
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     c2a:	4911      	ldr	r1, [pc, #68]	; (c70 <adc_read+0x58>)
     c2c:	18d2      	adds	r2, r2, r3
     c2e:	1852      	adds	r2, r2, r1
    u16_t buad;

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
     c30:	4228      	tst	r0, r5
     c32:	d005      	beq.n	c40 <adc_read+0x28>
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     c34:	210f      	movs	r1, #15
     c36:	7814      	ldrb	r4, [r2, #0]
     c38:	4021      	ands	r1, r4
     c3a:	2410      	movs	r4, #16
     c3c:	4321      	orrs	r1, r4
     c3e:	e003      	b.n	c48 <adc_read+0x30>
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     c40:	240f      	movs	r4, #15
     c42:	7811      	ldrb	r1, [r2, #0]
     c44:	43a1      	bics	r1, r4
     c46:	4329      	orrs	r1, r5
     c48:	7011      	strb	r1, [r2, #0]
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     c4a:	2101      	movs	r1, #1
     c4c:	4a09      	ldr	r2, [pc, #36]	; (c74 <adc_read+0x5c>)
     c4e:	18c3      	adds	r3, r0, r3
     c50:	189b      	adds	r3, r3, r2
     c52:	781a      	ldrb	r2, [r3, #0]
     c54:	430a      	orrs	r2, r1
     c56:	701a      	strb	r2, [r3, #0]
    // switch pin mux to analog in
    pinAnalog(p);

    ADC->INPUTCTRL.reg = (ADC_INPUTCTRL_MUXPOS(p.chan) // select from proper pin
                          | ADC_INPUTCTRL_MUXNEG_GND // 0 = gnd
                          | ADC_INPUTCTRL_GAIN_1X);
     c58:	466b      	mov	r3, sp
     c5a:	791a      	ldrb	r2, [r3, #4]
     c5c:	231f      	movs	r3, #31
     c5e:	4013      	ands	r3, r2
     c60:	22c0      	movs	r2, #192	; 0xc0
     c62:	0152      	lsls	r2, r2, #5
     c64:	4313      	orrs	r3, r2

u16_t adc_read(Pin p) {
    // switch pin mux to analog in
    pinAnalog(p);

    ADC->INPUTCTRL.reg = (ADC_INPUTCTRL_MUXPOS(p.chan) // select from proper pin
     c66:	4a04      	ldr	r2, [pc, #16]	; (c78 <adc_read+0x60>)
     c68:	6113      	str	r3, [r2, #16]
                          | ADC_INPUTCTRL_MUXNEG_GND // 0 = gnd
                          | ADC_INPUTCTRL_GAIN_1X);

    return adcSample();
     c6a:	4b04      	ldr	r3, [pc, #16]	; (c7c <adc_read+0x64>)
     c6c:	4798      	blx	r3
     c6e:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
     c70:	41004430 	.word	0x41004430
     c74:	41004440 	.word	0x41004440
     c78:	42004000 	.word	0x42004000
     c7c:	00000bfd 	.word	0x00000bfd

00000c80 <byteOut>:





void byteOut(Pin SCK_PIN, Pin MOSI_PIN, uint8_t byte) {
     c80:	0c01      	lsrs	r1, r0, #16
     c82:	0c13      	lsrs	r3, r2, #16
     c84:	b5f0      	push	{r4, r5, r6, r7, lr}
     c86:	b2cd      	uxtb	r5, r1
     c88:	b2d9      	uxtb	r1, r3
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     c8a:	2301      	movs	r3, #1
     c8c:	001e      	movs	r6, r3
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     c8e:	0e12      	lsrs	r2, r2, #24
     c90:	4093      	lsls	r3, r2
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     c92:	0e00      	lsrs	r0, r0, #24
     c94:	4086      	lsls	r6, r0
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     c96:	001a      	movs	r2, r3
     c98:	2308      	movs	r3, #8
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     c9a:	0030      	movs	r0, r6
     c9c:	4e11      	ldr	r6, [pc, #68]	; (ce4 <byteOut+0x64>)
     c9e:	01c9      	lsls	r1, r1, #7
     ca0:	b087      	sub	sp, #28
     ca2:	198f      	adds	r7, r1, r6
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     ca4:	4e10      	ldr	r6, [pc, #64]	; (ce8 <byteOut+0x68>)
     ca6:	ac0c      	add	r4, sp, #48	; 0x30
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     ca8:	01ed      	lsls	r5, r5, #7
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     caa:	19ae      	adds	r6, r5, r6
     cac:	7824      	ldrb	r4, [r4, #0]
     cae:	9601      	str	r6, [sp, #4]
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     cb0:	4e0c      	ldr	r6, [pc, #48]	; (ce4 <byteOut+0x64>)
     cb2:	46b4      	mov	ip, r6
     cb4:	44ac      	add	ip, r5
     cb6:	4666      	mov	r6, ip
     cb8:	6030      	str	r0, [r6, #0]

	for (uint8_t i = 0; i<8; ++i) {
		pinLow(SCK_PIN);
		if (byte & 0x80) {
     cba:	b266      	sxtb	r6, r4
     cbc:	2e00      	cmp	r6, #0
     cbe:	da05      	bge.n	ccc <byteOut+0x4c>
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     cc0:	4e09      	ldr	r6, [pc, #36]	; (ce8 <byteOut+0x68>)
     cc2:	46b4      	mov	ip, r6
     cc4:	448c      	add	ip, r1
     cc6:	4666      	mov	r6, ip
     cc8:	6032      	str	r2, [r6, #0]
     cca:	e000      	b.n	cce <byteOut+0x4e>
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     ccc:	603a      	str	r2, [r7, #0]
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     cce:	9e01      	ldr	r6, [sp, #4]
     cd0:	3b01      	subs	r3, #1
			pinHigh(MOSI_PIN);
			} else {
			pinLow(MOSI_PIN);
		}
		pinHigh(SCK_PIN);
		byte <<= 1;
     cd2:	0064      	lsls	r4, r4, #1
     cd4:	b2db      	uxtb	r3, r3
     cd6:	6030      	str	r0, [r6, #0]
     cd8:	b2e4      	uxtb	r4, r4



void byteOut(Pin SCK_PIN, Pin MOSI_PIN, uint8_t byte) {

	for (uint8_t i = 0; i<8; ++i) {
     cda:	2b00      	cmp	r3, #0
     cdc:	d1e8      	bne.n	cb0 <byteOut+0x30>
			pinLow(MOSI_PIN);
		}
		pinHigh(SCK_PIN);
		byte <<= 1;
	}
}
     cde:	b007      	add	sp, #28
     ce0:	bdf0      	pop	{r4, r5, r6, r7, pc}
     ce2:	46c0      	nop			; (mov r8, r8)
     ce4:	41004414 	.word	0x41004414
     ce8:	41004418 	.word	0x41004418

00000cec <byteIn>:

uint8_t byteIn(Pin SCK_PIN, Pin MISO_PIN) {
     cec:	b5f0      	push	{r4, r5, r6, r7, lr}
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     cee:	2501      	movs	r5, #1
     cf0:	b085      	sub	sp, #20
     cf2:	9103      	str	r1, [sp, #12]
     cf4:	0011      	movs	r1, r2
     cf6:	0c06      	lsrs	r6, r0, #16
     cf8:	9301      	str	r3, [sp, #4]
     cfa:	b2f3      	uxtb	r3, r6
     cfc:	002e      	movs	r6, r5
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     cfe:	0e09      	lsrs	r1, r1, #24
     d00:	0c14      	lsrs	r4, r2, #16
     d02:	9002      	str	r0, [sp, #8]
     d04:	9200      	str	r2, [sp, #0]
     d06:	408d      	lsls	r5, r1
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     d08:	0e02      	lsrs	r2, r0, #24
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     d0a:	2108      	movs	r1, #8
	uint8_t byte = 0x00;
     d0c:	2000      	movs	r0, #0
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     d0e:	4096      	lsls	r6, r2
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     d10:	b2e2      	uxtb	r2, r4
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     d12:	4c0a      	ldr	r4, [pc, #40]	; (d3c <byteIn+0x50>)
     d14:	01db      	lsls	r3, r3, #7
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     d16:	01d2      	lsls	r2, r2, #7
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     d18:	191b      	adds	r3, r3, r4
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     d1a:	1912      	adds	r2, r2, r4
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     d1c:	615e      	str	r6, [r3, #20]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     d1e:	6a14      	ldr	r4, [r2, #32]

	for (uint8_t i = 0; i<8; ++i) {
		pinLow(SCK_PIN);
		byte = (byte << 1 ) | pinRead(MISO_PIN);
     d20:	0040      	lsls	r0, r0, #1
     d22:	402c      	ands	r4, r5
     d24:	1e67      	subs	r7, r4, #1
     d26:	41bc      	sbcs	r4, r7
     d28:	3901      	subs	r1, #1
     d2a:	4304      	orrs	r4, r0
     d2c:	b2c9      	uxtb	r1, r1
     d2e:	b2e0      	uxtb	r0, r4
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     d30:	619e      	str	r6, [r3, #24]
}

uint8_t byteIn(Pin SCK_PIN, Pin MISO_PIN) {
	uint8_t byte = 0x00;

	for (uint8_t i = 0; i<8; ++i) {
     d32:	2900      	cmp	r1, #0
     d34:	d1f2      	bne.n	d1c <byteIn+0x30>
		pinLow(SCK_PIN);
		byte = (byte << 1 ) | pinRead(MISO_PIN);
		pinHigh(SCK_PIN);
	}
	return byte;
     d36:	b005      	add	sp, #20
     d38:	bdf0      	pop	{r4, r5, r6, r7, pc}
     d3a:	46c0      	nop			; (mov r8, r8)
     d3c:	41004400 	.word	0x41004400

00000d40 <beep>:
#include <util.h>
#include <boardDefines.h>


void beep(u16_t toggles) {
     d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
}


inline static void pinToggle(Pin p) {
    PORT->Group[p.group].OUTTGL.reg = (1<<p.pin);
     d42:	2380      	movs	r3, #128	; 0x80
     d44:	2780      	movs	r7, #128	; 0x80
     d46:	0006      	movs	r6, r0

    pinToggle(LedPin);
    for (u16_t buzz = 0; buzz < toggles; ++buzz) {
     d48:	2500      	movs	r5, #0
     d4a:	4c0a      	ldr	r4, [pc, #40]	; (d74 <beep+0x34>)
     d4c:	035b      	lsls	r3, r3, #13
     d4e:	61e3      	str	r3, [r4, #28]
     d50:	03bf      	lsls	r7, r7, #14
     d52:	42b5      	cmp	r5, r6
     d54:	d006      	beq.n	d64 <beep+0x24>
     d56:	61e7      	str	r7, [r4, #28]
        pinToggle(buzzerPin);
        delay_us(122);
     d58:	207a      	movs	r0, #122	; 0x7a
     d5a:	4b07      	ldr	r3, [pc, #28]	; (d78 <beep+0x38>)


void beep(u16_t toggles) {

    pinToggle(LedPin);
    for (u16_t buzz = 0; buzz < toggles; ++buzz) {
     d5c:	3501      	adds	r5, #1
        pinToggle(buzzerPin);
        delay_us(122);
     d5e:	4798      	blx	r3


void beep(u16_t toggles) {

    pinToggle(LedPin);
    for (u16_t buzz = 0; buzz < toggles; ++buzz) {
     d60:	b2ad      	uxth	r5, r5
     d62:	e7f6      	b.n	d52 <beep+0x12>
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     d64:	2380      	movs	r3, #128	; 0x80
     d66:	039b      	lsls	r3, r3, #14
     d68:	6163      	str	r3, [r4, #20]
}


inline static void pinToggle(Pin p) {
    PORT->Group[p.group].OUTTGL.reg = (1<<p.pin);
     d6a:	2380      	movs	r3, #128	; 0x80
     d6c:	035b      	lsls	r3, r3, #13
     d6e:	61e3      	str	r3, [r4, #28]
        pinToggle(buzzerPin);
        delay_us(122);
    }
    pinLow(buzzerPin);
    pinToggle(LedPin);
}
     d70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     d72:	46c0      	nop			; (mov r8, r8)
     d74:	41004400 	.word	0x41004400
     d78:	00000fa1 	.word	0x00000fa1

00000d7c <startupJingle>:

void startupJingle(){
     d7c:	b570      	push	{r4, r5, r6, lr}
    beep(300);
     d7e:	2696      	movs	r6, #150	; 0x96
     d80:	0076      	lsls	r6, r6, #1
     d82:	4d0a      	ldr	r5, [pc, #40]	; (dac <startupJingle+0x30>)
     d84:	0030      	movs	r0, r6
     d86:	47a8      	blx	r5
    delay_ms(80);
     d88:	4c09      	ldr	r4, [pc, #36]	; (db0 <startupJingle+0x34>)
     d8a:	2050      	movs	r0, #80	; 0x50
     d8c:	47a0      	blx	r4
    beep(300);
     d8e:	0030      	movs	r0, r6
     d90:	47a8      	blx	r5
    delay_ms(250);
     d92:	20fa      	movs	r0, #250	; 0xfa
     d94:	47a0      	blx	r4
    beep(300);
     d96:	0030      	movs	r0, r6
     d98:	47a8      	blx	r5
    delay_ms(80);
     d9a:	2050      	movs	r0, #80	; 0x50
     d9c:	47a0      	blx	r4
    beep(300);
     d9e:	0030      	movs	r0, r6
     da0:	47a8      	blx	r5
    delay_ms(500);
     da2:	20fa      	movs	r0, #250	; 0xfa
     da4:	0040      	lsls	r0, r0, #1
     da6:	47a0      	blx	r4
}
     da8:	bd70      	pop	{r4, r5, r6, pc}
     daa:	46c0      	nop			; (mov r8, r8)
     dac:	00000d41 	.word	0x00000d41
     db0:	00000fd1 	.word	0x00000fd1

00000db4 <unpluggedJingle>:

void unpluggedJingle(){
     db4:	b570      	push	{r4, r5, r6, lr}
            delay_ms(80);
            beep(300);
     db6:	2696      	movs	r6, #150	; 0x96
    beep(300);
    delay_ms(500);
}

void unpluggedJingle(){
            delay_ms(80);
     db8:	4c0c      	ldr	r4, [pc, #48]	; (dec <unpluggedJingle+0x38>)
            beep(300);
     dba:	0076      	lsls	r6, r6, #1
    beep(300);
    delay_ms(500);
}

void unpluggedJingle(){
            delay_ms(80);
     dbc:	2050      	movs	r0, #80	; 0x50
     dbe:	47a0      	blx	r4
            beep(300);
     dc0:	4d0b      	ldr	r5, [pc, #44]	; (df0 <unpluggedJingle+0x3c>)
     dc2:	0030      	movs	r0, r6
     dc4:	47a8      	blx	r5
            delay_ms(80);
     dc6:	2050      	movs	r0, #80	; 0x50
     dc8:	47a0      	blx	r4
            beep(300);
     dca:	0030      	movs	r0, r6
     dcc:	47a8      	blx	r5
            delay_ms(80);
     dce:	2050      	movs	r0, #80	; 0x50
     dd0:	47a0      	blx	r4
            beep(300);
     dd2:	0030      	movs	r0, r6
     dd4:	47a8      	blx	r5
            delay_ms(80);
     dd6:	2050      	movs	r0, #80	; 0x50
     dd8:	47a0      	blx	r4
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     dda:	2280      	movs	r2, #128	; 0x80
     ddc:	4b05      	ldr	r3, [pc, #20]	; (df4 <unpluggedJingle+0x40>)
     dde:	0392      	lsls	r2, r2, #14
     de0:	615a      	str	r2, [r3, #20]
     de2:	2280      	movs	r2, #128	; 0x80
     de4:	0352      	lsls	r2, r2, #13
     de6:	615a      	str	r2, [r3, #20]
            pinLow(buzzerPin);
            pinLow(LedPin);

}
     de8:	bd70      	pop	{r4, r5, r6, pc}
     dea:	46c0      	nop			; (mov r8, r8)
     dec:	00000fd1 	.word	0x00000fd1
     df0:	00000d41 	.word	0x00000d41
     df4:	41004400 	.word	0x41004400

00000df8 <GclkInit>:
static uint32_t cycles_per_us = 48000000UL / 1000000;

void GclkInit() {


    SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     df8:	23c2      	movs	r3, #194	; 0xc2
                           SYSCTRL_INTFLAG_DFLLRDY;
    NVMCTRL->CTRLB.reg |= NVMCTRL_CTRLB_RWS_HALF;
     dfa:	2002      	movs	r0, #2


static uint32_t cycles_per_ms = 48000000UL / 1000;
static uint32_t cycles_per_us = 48000000UL / 1000000;

void GclkInit() {
     dfc:	b510      	push	{r4, lr}


    SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     dfe:	4916      	ldr	r1, [pc, #88]	; (e58 <GclkInit+0x60>)
                           SYSCTRL_INTFLAG_DFLLRDY;
    NVMCTRL->CTRLB.reg |= NVMCTRL_CTRLB_RWS_HALF;
     e00:	4a16      	ldr	r2, [pc, #88]	; (e5c <GclkInit+0x64>)
static uint32_t cycles_per_us = 48000000UL / 1000000;

void GclkInit() {


    SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     e02:	00db      	lsls	r3, r3, #3
     e04:	608b      	str	r3, [r1, #8]
                           SYSCTRL_INTFLAG_DFLLRDY;
    NVMCTRL->CTRLB.reg |= NVMCTRL_CTRLB_RWS_HALF;
     e06:	6853      	ldr	r3, [r2, #4]
     e08:	4303      	orrs	r3, r0
     e0a:	6053      	str	r3, [r2, #4]

#define NVM_DFLL_COARSE_POS    58
#define NVM_DFLL_COARSE_SIZE   6
#define NVM_DFLL_FINE_POS      64
#define NVM_DFLL_FINE_SIZE     10
    uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
     e0c:	4b14      	ldr	r3, [pc, #80]	; (e60 <GclkInit+0x68>)
     e0e:	681a      	ldr	r2, [r3, #0]
     e10:	0e92      	lsrs	r2, r2, #26
                         + (NVM_DFLL_COARSE_POS / 32))
                       >> (NVM_DFLL_COARSE_POS % 32))
                     & ((1 << NVM_DFLL_COARSE_SIZE) - 1);
    if (coarse == 0x3f) {
     e12:	2a3f      	cmp	r2, #63	; 0x3f
     e14:	d100      	bne.n	e18 <GclkInit+0x20>
        coarse = 0x1f;
     e16:	3a20      	subs	r2, #32
    }
    uint32_t fine =( *((uint32_t *)(NVMCTRL_OTP4)
                       + (NVM_DFLL_FINE_POS / 32))
                     >> (NVM_DFLL_FINE_POS % 32))
     e18:	4b12      	ldr	r3, [pc, #72]	; (e64 <GclkInit+0x6c>)
                   & ((1 << NVM_DFLL_FINE_SIZE) - 1);
    if (fine == 0x3ff) {
     e1a:	4813      	ldr	r0, [pc, #76]	; (e68 <GclkInit+0x70>)
                       >> (NVM_DFLL_COARSE_POS % 32))
                     & ((1 << NVM_DFLL_COARSE_SIZE) - 1);
    if (coarse == 0x3f) {
        coarse = 0x1f;
    }
    uint32_t fine =( *((uint32_t *)(NVMCTRL_OTP4)
     e1c:	681b      	ldr	r3, [r3, #0]
     e1e:	059b      	lsls	r3, r3, #22
     e20:	0d9b      	lsrs	r3, r3, #22
                       + (NVM_DFLL_FINE_POS / 32))
                     >> (NVM_DFLL_FINE_POS % 32))
                   & ((1 << NVM_DFLL_FINE_SIZE) - 1);
    if (fine == 0x3ff) {
     e22:	4283      	cmp	r3, r0
     e24:	d100      	bne.n	e28 <GclkInit+0x30>
        fine = 0x1ff;
     e26:	4b11      	ldr	r3, [pc, #68]	; (e6c <GclkInit+0x74>)
    }


    // Disable ONDEMAND mode while writing configurations (errata 9905)
    SYSCTRL->DFLLCTRL.reg = dfll_ctrl_usb & ~SYSCTRL_DFLLCTRL_ONDEMAND;
     e28:	4811      	ldr	r0, [pc, #68]	; (e70 <GclkInit+0x78>)
     e2a:	8488      	strh	r0, [r1, #36]	; 0x24
    while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_DFLLRDY)) == 0);
     e2c:	2010      	movs	r0, #16
     e2e:	68cc      	ldr	r4, [r1, #12]
     e30:	4204      	tst	r4, r0
     e32:	d0fc      	beq.n	e2e <GclkInit+0x36>
    SYSCTRL->DFLLVAL.reg = SYSCTRL_DFLLVAL_COARSE(coarse) | SYSCTRL_DFLLVAL_FINE(fine);
     e34:	0292      	lsls	r2, r2, #10
     e36:	4313      	orrs	r3, r2
     e38:	4a07      	ldr	r2, [pc, #28]	; (e58 <GclkInit+0x60>)
     e3a:	6293      	str	r3, [r2, #40]	; 0x28


    //Wait and see if the DFLL output is good . . .
    while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_DFLLRDY)) == 0);
     e3c:	2310      	movs	r3, #16
     e3e:	68ca      	ldr	r2, [r1, #12]
     e40:	421a      	tst	r2, r3
     e42:	d0fc      	beq.n	e3e <GclkInit+0x46>


    SYSCTRL->DFLLCTRL.reg = dfll_ctrl_usb;
     e44:	4a0b      	ldr	r2, [pc, #44]	; (e74 <GclkInit+0x7c>)
     e46:	4b04      	ldr	r3, [pc, #16]	; (e58 <GclkInit+0x60>)
     e48:	849a      	strh	r2, [r3, #36]	; 0x24


    //For generic clock generator 0, select the DFLL48 Clock as input
    GCLK->GENDIV.reg  = (GCLK_GENDIV_DIV(1)  | GCLK_GENDIV_ID(0));
     e4a:	2280      	movs	r2, #128	; 0x80
     e4c:	4b0a      	ldr	r3, [pc, #40]	; (e78 <GclkInit+0x80>)
     e4e:	0052      	lsls	r2, r2, #1
     e50:	609a      	str	r2, [r3, #8]
    GCLK->GENCTRL.reg = (GCLK_GENCTRL_ID(0)  | (GCLK_GENCTRL_SRC_DFLL48M) | (GCLK_GENCTRL_GENEN));
     e52:	4a0a      	ldr	r2, [pc, #40]	; (e7c <GclkInit+0x84>)
     e54:	605a      	str	r2, [r3, #4]
}
     e56:	bd10      	pop	{r4, pc}
     e58:	40000800 	.word	0x40000800
     e5c:	41004000 	.word	0x41004000
     e60:	00806024 	.word	0x00806024
     e64:	00806028 	.word	0x00806028
     e68:	000003ff 	.word	0x000003ff
     e6c:	000001ff 	.word	0x000001ff
     e70:	00000522 	.word	0x00000522
     e74:	000005a2 	.word	0x000005a2
     e78:	40000c00 	.word	0x40000c00
     e7c:	00010700 	.word	0x00010700

00000e80 <RtcInit>:
        //wait for crystal to warm up
        while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_OSC32KRDY)) == 0);

    */

    SYSCTRL->OSC32K.reg = SYSCTRL_OSC32K_ENABLE |
     e80:	4b27      	ldr	r3, [pc, #156]	; (f20 <RtcInit+0xa0>)
     e82:	4a28      	ldr	r2, [pc, #160]	; (f24 <RtcInit+0xa4>)
                          SYSCTRL_OSC32K_EN32K |
                          ( 6 << SYSCTRL_OSC32K_STARTUP_Pos);


    SYSCTRL->OSC32K.bit.CALIB =
     e84:	4828      	ldr	r0, [pc, #160]	; (f28 <RtcInit+0xa8>)
        //wait for crystal to warm up
        while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_OSC32KRDY)) == 0);

    */

    SYSCTRL->OSC32K.reg = SYSCTRL_OSC32K_ENABLE |
     e86:	619a      	str	r2, [r3, #24]
                          SYSCTRL_OSC32K_EN32K |
                          ( 6 << SYSCTRL_OSC32K_STARTUP_Pos);


    SYSCTRL->OSC32K.bit.CALIB =
        ((*(uint32_t *)FUSES_OSC32K_CAL_ADDR >>
     e88:	4a28      	ldr	r2, [pc, #160]	; (f2c <RtcInit+0xac>)
    SYSCTRL->OSC32K.reg = SYSCTRL_OSC32K_ENABLE |
                          SYSCTRL_OSC32K_EN32K |
                          ( 6 << SYSCTRL_OSC32K_STARTUP_Pos);


    SYSCTRL->OSC32K.bit.CALIB =
     e8a:	6999      	ldr	r1, [r3, #24]
     e8c:	6812      	ldr	r2, [r2, #0]
     e8e:	4001      	ands	r1, r0
     e90:	04d2      	lsls	r2, r2, #19
     e92:	0e52      	lsrs	r2, r2, #25
     e94:	0412      	lsls	r2, r2, #16
     e96:	4311      	orrs	r1, r2
     e98:	6199      	str	r1, [r3, #24]
        ((*(uint32_t *)FUSES_OSC32K_CAL_ADDR >>
          FUSES_OSC32K_CAL_Pos) & 0x7Ful);

    SYSCTRL->OSC32K.reg = SYSCTRL_OSC32K_STARTUP( 0x6u ) | // cf table 15.10 of product datasheet in chapter 15.8.6
     e9a:	4925      	ldr	r1, [pc, #148]	; (f30 <RtcInit+0xb0>)
     e9c:	6199      	str	r1, [r3, #24]
                          SYSCTRL_OSC32K_EN32K;
    SYSCTRL->OSC32K.bit.CALIB =
     e9e:	6999      	ldr	r1, [r3, #24]
     ea0:	4008      	ands	r0, r1
        ((*(uint32_t *)FUSES_OSC32K_CAL_ADDR >>
          FUSES_OSC32K_CAL_Pos) & 0x7Ful);



    SYSCTRL->OSC32K.bit.ENABLE = 1; // separate call, as described in chapter 15.6.3
     ea2:	2102      	movs	r1, #2
        ((*(uint32_t *)FUSES_OSC32K_CAL_ADDR >>
          FUSES_OSC32K_CAL_Pos) & 0x7Ful);

    SYSCTRL->OSC32K.reg = SYSCTRL_OSC32K_STARTUP( 0x6u ) | // cf table 15.10 of product datasheet in chapter 15.8.6
                          SYSCTRL_OSC32K_EN32K;
    SYSCTRL->OSC32K.bit.CALIB =
     ea4:	4302      	orrs	r2, r0
     ea6:	619a      	str	r2, [r3, #24]
        ((*(uint32_t *)FUSES_OSC32K_CAL_ADDR >>
          FUSES_OSC32K_CAL_Pos) & 0x7Ful);



    SYSCTRL->OSC32K.bit.ENABLE = 1; // separate call, as described in chapter 15.6.3
     ea8:	699a      	ldr	r2, [r3, #24]
     eaa:	430a      	orrs	r2, r1
     eac:	619a      	str	r2, [r3, #24]

    while (  (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_OSC32KRDY) == 0 ) {
     eae:	2204      	movs	r2, #4
     eb0:	68d9      	ldr	r1, [r3, #12]
     eb2:	4211      	tst	r1, r2
     eb4:	d0fc      	beq.n	eb0 <RtcInit+0x30>





    GCLK->GENDIV.reg = GCLK_GENDIV_ID(2) | GCLK_GENDIV_DIV(1);
     eb6:	2281      	movs	r2, #129	; 0x81
     eb8:	4b1e      	ldr	r3, [pc, #120]	; (f34 <RtcInit+0xb4>)
     eba:	0052      	lsls	r2, r2, #1
     ebc:	609a      	str	r2, [r3, #8]

    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(2) |
     ebe:	4a1e      	ldr	r2, [pc, #120]	; (f38 <RtcInit+0xb8>)
     ec0:	605a      	str	r2, [r3, #4]
                        GCLK_GENCTRL_SRC(GCLK_GENCTRL_SRC_XOSC32K) |
                        GCLK_GENCTRL_IDC |
                        GCLK_GENCTRL_RUNSTDBY |
                        GCLK_GENCTRL_GENEN;
    while (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY);
     ec2:	785a      	ldrb	r2, [r3, #1]
     ec4:	b252      	sxtb	r2, r2
     ec6:	2a00      	cmp	r2, #0
     ec8:	dbfb      	blt.n	ec2 <RtcInit+0x42>

// Configure RTC
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(RTC_GCLK_ID) |
     eca:	4a1c      	ldr	r2, [pc, #112]	; (f3c <RtcInit+0xbc>)
     ecc:	4b19      	ldr	r3, [pc, #100]	; (f34 <RtcInit+0xb4>)
     ece:	805a      	strh	r2, [r3, #2]
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    RTC->MODE1.CTRL.reg = RTC_MODE1_CTRL_MODE_COUNT16;
     ed0:	2204      	movs	r2, #4
     ed2:	4b1b      	ldr	r3, [pc, #108]	; (f40 <RtcInit+0xc0>)
     ed4:	801a      	strh	r2, [r3, #0]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     ed6:	7a9a      	ldrb	r2, [r3, #10]
     ed8:	4919      	ldr	r1, [pc, #100]	; (f40 <RtcInit+0xc0>)
     eda:	09d2      	lsrs	r2, r2, #7
     edc:	d1fb      	bne.n	ed6 <RtcInit+0x56>

// Prescaler needs to be enabled separately from the mode for some reason
    RTC->MODE1.CTRL.reg |= RTC_MODE1_CTRL_PRESCALER_DIV32;
     ede:	20a0      	movs	r0, #160	; 0xa0
     ee0:	880a      	ldrh	r2, [r1, #0]
     ee2:	00c0      	lsls	r0, r0, #3
     ee4:	4302      	orrs	r2, r0
     ee6:	800a      	strh	r2, [r1, #0]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     ee8:	7a9a      	ldrb	r2, [r3, #10]
     eea:	09d2      	lsrs	r2, r2, #7
     eec:	d1fc      	bne.n	ee8 <RtcInit+0x68>

    RTC->MODE1.PER.reg = 998;
     eee:	4915      	ldr	r1, [pc, #84]	; (f44 <RtcInit+0xc4>)
     ef0:	4a13      	ldr	r2, [pc, #76]	; (f40 <RtcInit+0xc0>)
     ef2:	8291      	strh	r1, [r2, #20]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     ef4:	7a99      	ldrb	r1, [r3, #10]
     ef6:	4a12      	ldr	r2, [pc, #72]	; (f40 <RtcInit+0xc0>)
     ef8:	09c9      	lsrs	r1, r1, #7
     efa:	d1fb      	bne.n	ef4 <RtcInit+0x74>

    RTC->MODE1.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_ADDR(0x10);
     efc:	8851      	ldrh	r1, [r2, #2]
     efe:	4812      	ldr	r0, [pc, #72]	; (f48 <RtcInit+0xc8>)
     f00:	4301      	orrs	r1, r0
     f02:	8051      	strh	r1, [r2, #2]

    RTC->MODE1.INTENSET.reg = RTC_MODE1_INTENSET_OVF;
     f04:	2180      	movs	r1, #128	; 0x80

    RTC->MODE1.CTRL.bit.ENABLE = 1;
     f06:	2002      	movs	r0, #2
    RTC->MODE1.PER.reg = 998;
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);

    RTC->MODE1.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_ADDR(0x10);

    RTC->MODE1.INTENSET.reg = RTC_MODE1_INTENSET_OVF;
     f08:	71d1      	strb	r1, [r2, #7]

    RTC->MODE1.CTRL.bit.ENABLE = 1;
     f0a:	8811      	ldrh	r1, [r2, #0]
     f0c:	4301      	orrs	r1, r0
     f0e:	8011      	strh	r1, [r2, #0]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     f10:	7a9a      	ldrb	r2, [r3, #10]
     f12:	09d2      	lsrs	r2, r2, #7
     f14:	d1fc      	bne.n	f10 <RtcInit+0x90>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     f16:	4b0d      	ldr	r3, [pc, #52]	; (f4c <RtcInit+0xcc>)
     f18:	3208      	adds	r2, #8
     f1a:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(RTC_IRQn);
}
     f1c:	4770      	bx	lr
     f1e:	46c0      	nop			; (mov r8, r8)
     f20:	40000800 	.word	0x40000800
     f24:	00000606 	.word	0x00000606
     f28:	ff80ffff 	.word	0xff80ffff
     f2c:	00806024 	.word	0x00806024
     f30:	00000604 	.word	0x00000604
     f34:	40000c00 	.word	0x40000c00
     f38:	00230002 	.word	0x00230002
     f3c:	00004204 	.word	0x00004204
     f40:	40001400 	.word	0x40001400
     f44:	000003e6 	.word	0x000003e6
     f48:	00004010 	.word	0x00004010
     f4c:	e000e100 	.word	0xe000e100

00000f50 <gclkEnable>:


void gclkEnable(u32_t id, u32_t src, u32_t div) {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
     f50:	230f      	movs	r3, #15
     f52:	4018      	ands	r0, r3
     f54:	4b08      	ldr	r3, [pc, #32]	; (f78 <gclkEnable+0x28>)
     f56:	0212      	lsls	r2, r2, #8
     f58:	401a      	ands	r2, r3
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     f5a:	23f8      	movs	r3, #248	; 0xf8
     f5c:	0209      	lsls	r1, r1, #8
     f5e:	015b      	lsls	r3, r3, #5
     f60:	4019      	ands	r1, r3
     f62:	2380      	movs	r3, #128	; 0x80

    NVIC_EnableIRQ(RTC_IRQn);
}


void gclkEnable(u32_t id, u32_t src, u32_t div) {
     f64:	b510      	push	{r4, lr}
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     f66:	025b      	lsls	r3, r3, #9
    NVIC_EnableIRQ(RTC_IRQn);
}


void gclkEnable(u32_t id, u32_t src, u32_t div) {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
     f68:	4c04      	ldr	r4, [pc, #16]	; (f7c <gclkEnable+0x2c>)
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     f6a:	4319      	orrs	r1, r3
    NVIC_EnableIRQ(RTC_IRQn);
}


void gclkEnable(u32_t id, u32_t src, u32_t div) {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
     f6c:	4302      	orrs	r2, r0
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     f6e:	4308      	orrs	r0, r1
    NVIC_EnableIRQ(RTC_IRQn);
}


void gclkEnable(u32_t id, u32_t src, u32_t div) {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
     f70:	60a2      	str	r2, [r4, #8]
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     f72:	6060      	str	r0, [r4, #4]
}
     f74:	bd10      	pop	{r4, pc}
     f76:	46c0      	nop			; (mov r8, r8)
     f78:	00ffff00 	.word	0x00ffff00
     f7c:	40000c00 	.word	0x40000c00

00000f80 <delayInit>:


void delayInit(void) {
    cycles_per_ms = 48000000UL;
    cycles_per_ms /= 1000;
     f80:	4b04      	ldr	r3, [pc, #16]	; (f94 <delayInit+0x14>)
     f82:	4a05      	ldr	r2, [pc, #20]	; (f98 <delayInit+0x18>)
     f84:	601a      	str	r2, [r3, #0]
    cycles_per_us = cycles_per_ms / 1000;
     f86:	2230      	movs	r2, #48	; 0x30
     f88:	605a      	str	r2, [r3, #4]

    SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     f8a:	4b04      	ldr	r3, [pc, #16]	; (f9c <delayInit+0x1c>)
     f8c:	3a2b      	subs	r2, #43	; 0x2b
     f8e:	601a      	str	r2, [r3, #0]
}
     f90:	4770      	bx	lr
     f92:	46c0      	nop			; (mov r8, r8)
     f94:	20000004 	.word	0x20000004
     f98:	0000bb80 	.word	0x0000bb80
     f9c:	e000e010 	.word	0xe000e010

00000fa0 <delay_us>:
/**
 * \brief Delay loop to delay at least n number of microseconds
 *
 * \param n  Number of microseconds to wait
 */
void delay_us(uint32_t n) {
     fa0:	b570      	push	{r4, r5, r6, lr}
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
        SysTick->VAL = 0;

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     fa2:	2480      	movs	r4, #128	; 0x80

static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
        SysTick->VAL = 0;
     fa4:	2100      	movs	r1, #0
    while (n--) {
        /* Devide up to blocks of 10u */
        delay_cycles(cycles_per_us);
     fa6:	4b08      	ldr	r3, [pc, #32]	; (fc8 <delay_us+0x28>)


static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
     fa8:	4a08      	ldr	r2, [pc, #32]	; (fcc <delay_us+0x2c>)
     faa:	685b      	ldr	r3, [r3, #4]
        SysTick->VAL = 0;

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     fac:	0264      	lsls	r4, r4, #9
 * \brief Delay loop to delay at least n number of microseconds
 *
 * \param n  Number of microseconds to wait
 */
void delay_us(uint32_t n) {
    while (n--) {
     fae:	3801      	subs	r0, #1
     fb0:	d308      	bcc.n	fc4 <delay_us+0x24>



static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
     fb2:	2b00      	cmp	r3, #0
     fb4:	d0fb      	beq.n	fae <delay_us+0xe>
     fb6:	4e05      	ldr	r6, [pc, #20]	; (fcc <delay_us+0x2c>)
        SysTick->LOAD = n;
     fb8:	6053      	str	r3, [r2, #4]
        SysTick->VAL = 0;
     fba:	6091      	str	r1, [r2, #8]

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     fbc:	6835      	ldr	r5, [r6, #0]
     fbe:	4225      	tst	r5, r4
     fc0:	d0fc      	beq.n	fbc <delay_us+0x1c>
     fc2:	e7f4      	b.n	fae <delay_us+0xe>
        /* Devide up to blocks of 10u */
        delay_cycles(cycles_per_us);
    }
}
     fc4:	bd70      	pop	{r4, r5, r6, pc}
     fc6:	46c0      	nop			; (mov r8, r8)
     fc8:	20000004 	.word	0x20000004
     fcc:	e000e010 	.word	0xe000e010

00000fd0 <delay_ms>:
/**
 * \brief Delay loop to delay at least n number of milliseconds
 *
 * \param n  Number of milliseconds to wait
 */
void delay_ms(uint32_t n) {
     fd0:	b570      	push	{r4, r5, r6, lr}
     fd2:	2480      	movs	r4, #128	; 0x80

static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
        SysTick->VAL = 0;
     fd4:	2100      	movs	r1, #0
    while (n--) {
        /* Devide up to blocks of 1ms */
        delay_cycles(cycles_per_ms);
     fd6:	4b08      	ldr	r3, [pc, #32]	; (ff8 <delay_ms+0x28>)


static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
     fd8:	4a08      	ldr	r2, [pc, #32]	; (ffc <delay_ms+0x2c>)
     fda:	681b      	ldr	r3, [r3, #0]
        SysTick->VAL = 0;

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     fdc:	0264      	lsls	r4, r4, #9
 * \brief Delay loop to delay at least n number of milliseconds
 *
 * \param n  Number of milliseconds to wait
 */
void delay_ms(uint32_t n) {
    while (n--) {
     fde:	3801      	subs	r0, #1
     fe0:	d308      	bcc.n	ff4 <delay_ms+0x24>



static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
     fe2:	2b00      	cmp	r3, #0
     fe4:	d0fb      	beq.n	fde <delay_ms+0xe>
     fe6:	4e05      	ldr	r6, [pc, #20]	; (ffc <delay_ms+0x2c>)
        SysTick->LOAD = n;
     fe8:	6053      	str	r3, [r2, #4]
        SysTick->VAL = 0;
     fea:	6091      	str	r1, [r2, #8]

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     fec:	6835      	ldr	r5, [r6, #0]
     fee:	4225      	tst	r5, r4
     ff0:	d0fc      	beq.n	fec <delay_ms+0x1c>
     ff2:	e7f4      	b.n	fde <delay_ms+0xe>
        /* Devide up to blocks of 1ms */
        delay_cycles(cycles_per_ms);
    }
}
     ff4:	bd70      	pop	{r4, r5, r6, pc}
     ff6:	46c0      	nop			; (mov r8, r8)
     ff8:	20000004 	.word	0x20000004
     ffc:	e000e010 	.word	0xe000e010

00001000 <RTC_Handler>:


volatile uint32_t time_ms = 0;

void RTC_Handler(void) {
    time_ms += 1000;
    1000:	21fa      	movs	r1, #250	; 0xfa
    1002:	4a04      	ldr	r2, [pc, #16]	; (1014 <RTC_Handler+0x14>)
    1004:	0089      	lsls	r1, r1, #2
    1006:	6813      	ldr	r3, [r2, #0]
    1008:	185b      	adds	r3, r3, r1
    100a:	6013      	str	r3, [r2, #0]
    RTC->MODE1.INTFLAG.reg = 0xFF;
    100c:	22ff      	movs	r2, #255	; 0xff
    100e:	4b02      	ldr	r3, [pc, #8]	; (1018 <RTC_Handler+0x18>)
    1010:	721a      	strb	r2, [r3, #8]
}
    1012:	4770      	bx	lr
    1014:	200004c4 	.word	0x200004c4
    1018:	40001400 	.word	0x40001400

0000101c <millis>:

uint32_t millis(void) {
    101c:	b530      	push	{r4, r5, lr}
    uint32_t ms;
    ATOMIC_SECTION_ENTER
    101e:	f3ef 8110 	mrs	r1, PRIMASK
    1022:	b672      	cpsid	i
    ms = time_ms + RTC->MODE1.COUNT.reg;
    1024:	4a08      	ldr	r2, [pc, #32]	; (1048 <millis+0x2c>)
    1026:	4d09      	ldr	r5, [pc, #36]	; (104c <millis+0x30>)
    1028:	8a10      	ldrh	r0, [r2, #16]
    102a:	682b      	ldr	r3, [r5, #0]
    if (RTC->MODE1.INTFLAG.bit.OVF)
    102c:	7a14      	ldrb	r4, [r2, #8]
}

uint32_t millis(void) {
    uint32_t ms;
    ATOMIC_SECTION_ENTER
    ms = time_ms + RTC->MODE1.COUNT.reg;
    102e:	b280      	uxth	r0, r0
    if (RTC->MODE1.INTFLAG.bit.OVF)
    1030:	09e4      	lsrs	r4, r4, #7
    1032:	d004      	beq.n	103e <millis+0x22>
        ms = time_ms + RTC->MODE1.COUNT.reg + 1000;
    1034:	8a13      	ldrh	r3, [r2, #16]
    1036:	22fa      	movs	r2, #250	; 0xfa
    1038:	6828      	ldr	r0, [r5, #0]
    103a:	0092      	lsls	r2, r2, #2
    103c:	1880      	adds	r0, r0, r2
    103e:	18c0      	adds	r0, r0, r3
    ATOMIC_SECTION_LEAVE
    1040:	f381 8810 	msr	PRIMASK, r1
    return ms;
}
    1044:	bd30      	pop	{r4, r5, pc}
    1046:	46c0      	nop			; (mov r8, r8)
    1048:	40001400 	.word	0x40001400
    104c:	200004c4 	.word	0x200004c4

00001050 <TC4Init>:

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC4_GCLK_ID) |
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC4;
    1050:	2180      	movs	r1, #128	; 0x80
    return ms;
}

void TC4Init() {

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC4_GCLK_ID) |
    1052:	4a0d      	ldr	r2, [pc, #52]	; (1088 <TC4Init+0x38>)
    1054:	4b0d      	ldr	r3, [pc, #52]	; (108c <TC4Init+0x3c>)
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC4;
    1056:	0149      	lsls	r1, r1, #5
    return ms;
}

void TC4Init() {

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC4_GCLK_ID) |
    1058:	805a      	strh	r2, [r3, #2]
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC4;
    105a:	4a0d      	ldr	r2, [pc, #52]	; (1090 <TC4Init+0x40>)
    105c:	6a13      	ldr	r3, [r2, #32]
    105e:	430b      	orrs	r3, r1
    1060:	6213      	str	r3, [r2, #32]

    TC4->COUNT8.CTRLA.reg = TC_CTRLA_MODE_COUNT8 |
    1062:	4b0c      	ldr	r3, [pc, #48]	; (1094 <TC4Init+0x44>)
    1064:	4a0c      	ldr	r2, [pc, #48]	; (1098 <TC4Init+0x48>)

    TC4->COUNT8.INTENSET.reg = TC_INTENSET_OVF;

    TC4->COUNT8.EVCTRL.reg = TC_EVCTRL_OVFEO;

    TC4->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
    1066:	2102      	movs	r1, #2
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC4;

    TC4->COUNT8.CTRLA.reg = TC_CTRLA_MODE_COUNT8 |
    1068:	801a      	strh	r2, [r3, #0]
                            TC_CTRLA_RUNSTDBY |
                            TC_CTRLA_PRESCALER_DIV2;
    TC4->COUNT8.PER.reg = 0x41;
    106a:	2241      	movs	r2, #65	; 0x41
    106c:	751a      	strb	r2, [r3, #20]

    TC4->COUNT8.INTENSET.reg = TC_INTENSET_OVF;
    106e:	3a40      	subs	r2, #64	; 0x40
    1070:	735a      	strb	r2, [r3, #13]

    TC4->COUNT8.EVCTRL.reg = TC_EVCTRL_OVFEO;
    1072:	32ff      	adds	r2, #255	; 0xff
    1074:	815a      	strh	r2, [r3, #10]

    TC4->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
    1076:	881a      	ldrh	r2, [r3, #0]
    1078:	430a      	orrs	r2, r1
    107a:	801a      	strh	r2, [r3, #0]
    107c:	2280      	movs	r2, #128	; 0x80
    107e:	4b07      	ldr	r3, [pc, #28]	; (109c <TC4Init+0x4c>)
    1080:	0312      	lsls	r2, r2, #12
    1082:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(TC4_IRQn);
}
    1084:	4770      	bx	lr
    1086:	46c0      	nop			; (mov r8, r8)
    1088:	0000421c 	.word	0x0000421c
    108c:	40000c00 	.word	0x40000c00
    1090:	40000400 	.word	0x40000400
    1094:	42003000 	.word	0x42003000
    1098:	00000904 	.word	0x00000904
    109c:	e000e100 	.word	0xe000e100

000010a0 <TC4_Handler>:

void TC4_Handler( void ) {
    TC4->COUNT8.INTFLAG.reg = 0xFF;
    10a0:	22ff      	movs	r2, #255	; 0xff
    TC4->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;

    NVIC_EnableIRQ(TC4_IRQn);
}

void TC4_Handler( void ) {
    10a2:	b510      	push	{r4, lr}
    TC4->COUNT8.INTFLAG.reg = 0xFF;
    10a4:	4b02      	ldr	r3, [pc, #8]	; (10b0 <TC4_Handler+0x10>)
    10a6:	739a      	strb	r2, [r3, #14]
    pullSample();
    10a8:	4b02      	ldr	r3, [pc, #8]	; (10b4 <TC4_Handler+0x14>)
    10aa:	4798      	blx	r3
}
    10ac:	bd10      	pop	{r4, pc}
    10ae:	46c0      	nop			; (mov r8, r8)
    10b0:	42003000 	.word	0x42003000
    10b4:	0000233d 	.word	0x0000233d

000010b8 <TC5Init>:

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC5_GCLK_ID) |
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC5;
    10b8:	2180      	movs	r1, #128	; 0x80
    pullSample();
}

void TC5Init() {

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC5_GCLK_ID) |
    10ba:	4a0d      	ldr	r2, [pc, #52]	; (10f0 <TC5Init+0x38>)
    10bc:	4b0d      	ldr	r3, [pc, #52]	; (10f4 <TC5Init+0x3c>)
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC5;
    10be:	0189      	lsls	r1, r1, #6
    pullSample();
}

void TC5Init() {

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC5_GCLK_ID) |
    10c0:	805a      	strh	r2, [r3, #2]
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC5;
    10c2:	4a0d      	ldr	r2, [pc, #52]	; (10f8 <TC5Init+0x40>)
    10c4:	6a13      	ldr	r3, [r2, #32]
    10c6:	430b      	orrs	r3, r1
    10c8:	6213      	str	r3, [r2, #32]

    TC5->COUNT8.CTRLA.reg = TC_CTRLA_MODE_COUNT8 |
    10ca:	4b0c      	ldr	r3, [pc, #48]	; (10fc <TC5Init+0x44>)
    10cc:	4a0c      	ldr	r2, [pc, #48]	; (1100 <TC5Init+0x48>)

    TC5->COUNT8.INTENSET.reg = TC_INTENSET_OVF;

    TC5->COUNT8.EVCTRL.reg = TC_EVCTRL_OVFEO;

    TC5->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
    10ce:	2102      	movs	r1, #2
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC5;

    TC5->COUNT8.CTRLA.reg = TC_CTRLA_MODE_COUNT8 |
    10d0:	801a      	strh	r2, [r3, #0]
                            TC_CTRLA_RUNSTDBY |
                            TC_CTRLA_PRESCALER_DIV64;

    TC5->COUNT8.PER.reg = 0x20;
    10d2:	2220      	movs	r2, #32
    10d4:	751a      	strb	r2, [r3, #20]

    TC5->COUNT8.INTENSET.reg = TC_INTENSET_OVF;
    10d6:	3a1f      	subs	r2, #31
    10d8:	735a      	strb	r2, [r3, #13]

    TC5->COUNT8.EVCTRL.reg = TC_EVCTRL_OVFEO;
    10da:	32ff      	adds	r2, #255	; 0xff
    10dc:	815a      	strh	r2, [r3, #10]

    TC5->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
    10de:	881a      	ldrh	r2, [r3, #0]
    10e0:	430a      	orrs	r2, r1
    10e2:	801a      	strh	r2, [r3, #0]
    10e4:	2280      	movs	r2, #128	; 0x80
    10e6:	4b07      	ldr	r3, [pc, #28]	; (1104 <TC5Init+0x4c>)
    10e8:	0352      	lsls	r2, r2, #13
    10ea:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(TC5_IRQn);
}
    10ec:	4770      	bx	lr
    10ee:	46c0      	nop			; (mov r8, r8)
    10f0:	0000421c 	.word	0x0000421c
    10f4:	40000c00 	.word	0x40000c00
    10f8:	40000400 	.word	0x40000400
    10fc:	42003400 	.word	0x42003400
    1100:	00000d04 	.word	0x00000d04
    1104:	e000e100 	.word	0xe000e100

00001108 <TC5_Handler>:

void TC5_Handler( void ) {
    TC5->COUNT8.INTFLAG.reg = 0xFF;
    1108:	22ff      	movs	r2, #255	; 0xff
    110a:	4b03      	ldr	r3, [pc, #12]	; (1118 <TC5_Handler+0x10>)
    110c:	739a      	strb	r2, [r3, #14]
    writeLog = true;
    110e:	4b03      	ldr	r3, [pc, #12]	; (111c <TC5_Handler+0x14>)
    1110:	3afe      	subs	r2, #254	; 0xfe
    1112:	701a      	strb	r2, [r3, #0]
}
    1114:	4770      	bx	lr
    1116:	46c0      	nop			; (mov r8, r8)
    1118:	42003400 	.word	0x42003400
    111c:	20000500 	.word	0x20000500

00001120 <flight>:
#include <boardDefines.h>

flightState_t flightState;


void flight() {
    1120:	b570      	push	{r4, r5, r6, lr}



    switch(flightState) {
    1122:	4c64      	ldr	r4, [pc, #400]	; (12b4 <flight+0x194>)
    1124:	7820      	ldrb	r0, [r4, #0]
    1126:	280a      	cmp	r0, #10
    1128:	d900      	bls.n	112c <flight+0xc>
    112a:	e0c2      	b.n	12b2 <flight+0x192>
    112c:	f002 fcdc 	bl	3ae8 <__gnu_thumb1_case_uqi>
    1130:	73392606 	.word	0x73392606
    1134:	c19fc1c1 	.word	0xc19fc1c1
    1138:	c1c1      	.short	0xc1c1
    113a:	a6          	.byte	0xa6
    113b:	00          	.byte	0x00
    case flightStatrup:


        updateGround( );
    113c:	4b5e      	ldr	r3, [pc, #376]	; (12b8 <flight+0x198>)
    113e:	4798      	blx	r3

        //logSensors( );


        if ((millis() - startupTick) > 10000) {
    1140:	4b5e      	ldr	r3, [pc, #376]	; (12bc <flight+0x19c>)
    1142:	4798      	blx	r3
    1144:	4b5e      	ldr	r3, [pc, #376]	; (12c0 <flight+0x1a0>)
    1146:	681b      	ldr	r3, [r3, #0]
    1148:	1ac0      	subs	r0, r0, r3
    114a:	4b5e      	ldr	r3, [pc, #376]	; (12c4 <flight+0x1a4>)
    114c:	4298      	cmp	r0, r3
    114e:	d908      	bls.n	1162 <flight+0x42>
            findNewFlightStart( );
    1150:	4b5d      	ldr	r3, [pc, #372]	; (12c8 <flight+0x1a8>)
    1152:	4798      	blx	r3
            logFlight( );
    1154:	4b5d      	ldr	r3, [pc, #372]	; (12cc <flight+0x1ac>)
    1156:	4798      	blx	r3
            startupJingle();
    1158:	4b5d      	ldr	r3, [pc, #372]	; (12d0 <flight+0x1b0>)
    115a:	4798      	blx	r3
            flightState = flightTest;
    115c:	230a      	movs	r3, #10
    115e:	7023      	strb	r3, [r4, #0]
            //flightState = flightPad;
            break;
    1160:	e0a7      	b.n	12b2 <flight+0x192>
        }

        attemptConnection();
    1162:	4b5c      	ldr	r3, [pc, #368]	; (12d4 <flight+0x1b4>)
    1164:	4798      	blx	r3



        if (sample.voltage.batFloat < 3.5) {
    1166:	4b5c      	ldr	r3, [pc, #368]	; (12d8 <flight+0x1b8>)
    1168:	495c      	ldr	r1, [pc, #368]	; (12dc <flight+0x1bc>)
    116a:	68d8      	ldr	r0, [r3, #12]
    116c:	4b5c      	ldr	r3, [pc, #368]	; (12e0 <flight+0x1c0>)
    116e:	4798      	blx	r3
    1170:	2800      	cmp	r0, #0
    1172:	d100      	bne.n	1176 <flight+0x56>
    1174:	e09d      	b.n	12b2 <flight+0x192>
            flightState = flightIdle;
    1176:	2301      	movs	r3, #1
    1178:	7023      	strb	r3, [r4, #0]
    117a:	e049      	b.n	1210 <flight+0xf0>
        //TC5->COUNT8.CTRLA.reg = 0;

        //delay_ms(1000);
        //pinToggle(LedPin);

        if (sercom(USART3)->SPI.INTFLAG.bit.RXC == 1) {
    117c:	4b59      	ldr	r3, [pc, #356]	; (12e4 <flight+0x1c4>)
    117e:	7e1b      	ldrb	r3, [r3, #24]
    1180:	075b      	lsls	r3, r3, #29
    1182:	d400      	bmi.n	1186 <flight+0x66>
    1184:	e095      	b.n	12b2 <flight+0x192>
            u8_t possibleReset = usartDataIn(USART3);
    1186:	2003      	movs	r0, #3
    1188:	4b57      	ldr	r3, [pc, #348]	; (12e8 <flight+0x1c8>)
    118a:	4798      	blx	r3
            if (possibleReset == 0x52) {
    118c:	2852      	cmp	r0, #82	; 0x52
    118e:	d000      	beq.n	1192 <flight+0x72>
    1190:	e08f      	b.n	12b2 <flight+0x192>
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
    1192:	f3bf 8f4f 	dsb	sy
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
    1196:	4a55      	ldr	r2, [pc, #340]	; (12ec <flight+0x1cc>)
    1198:	4b55      	ldr	r3, [pc, #340]	; (12f0 <flight+0x1d0>)
    119a:	60da      	str	r2, [r3, #12]
    119c:	f3bf 8f4f 	dsb	sy
    11a0:	e7fe      	b.n	11a0 <flight+0x80>
        *  Accel > 2g & vel > 5m/s
        *		 or
        *  baro alt > 40ft
        */

        updateGround();
    11a2:	4b45      	ldr	r3, [pc, #276]	; (12b8 <flight+0x198>)
    11a4:	4798      	blx	r3

        if (writeLog) {
    11a6:	4b53      	ldr	r3, [pc, #332]	; (12f4 <flight+0x1d4>)
    11a8:	781a      	ldrb	r2, [r3, #0]
    11aa:	2a00      	cmp	r2, #0
    11ac:	d005      	beq.n	11ba <flight+0x9a>
            writeLog = false;
    11ae:	2200      	movs	r2, #0
    11b0:	701a      	strb	r2, [r3, #0]
}


inline static void pinToggle(Pin p) {
    PORT->Group[p.group].OUTTGL.reg = (1<<p.pin);
    11b2:	2280      	movs	r2, #128	; 0x80
    11b4:	4b50      	ldr	r3, [pc, #320]	; (12f8 <flight+0x1d8>)
    11b6:	0352      	lsls	r2, r2, #13
    11b8:	61da      	str	r2, [r3, #28]
            //logSensors( );
            pinToggle(LedPin);
        }

        if (( velocity > 0.05) && ((altitude - offsets.groundOffset) > 5)) {
    11ba:	4950      	ldr	r1, [pc, #320]	; (12fc <flight+0x1dc>)
    11bc:	4d50      	ldr	r5, [pc, #320]	; (1300 <flight+0x1e0>)
    11be:	4a51      	ldr	r2, [pc, #324]	; (1304 <flight+0x1e4>)
    11c0:	4b51      	ldr	r3, [pc, #324]	; (1308 <flight+0x1e8>)
    11c2:	6808      	ldr	r0, [r1, #0]
    11c4:	6849      	ldr	r1, [r1, #4]
    11c6:	47a8      	blx	r5
    11c8:	2800      	cmp	r0, #0
    11ca:	d014      	beq.n	11f6 <flight+0xd6>
    11cc:	4b4f      	ldr	r3, [pc, #316]	; (130c <flight+0x1ec>)
    11ce:	6998      	ldr	r0, [r3, #24]
    11d0:	4b4f      	ldr	r3, [pc, #316]	; (1310 <flight+0x1f0>)
    11d2:	4798      	blx	r3
    11d4:	000b      	movs	r3, r1
    11d6:	494f      	ldr	r1, [pc, #316]	; (1314 <flight+0x1f4>)
    11d8:	0002      	movs	r2, r0
    11da:	6808      	ldr	r0, [r1, #0]
    11dc:	6849      	ldr	r1, [r1, #4]
    11de:	4e4e      	ldr	r6, [pc, #312]	; (1318 <flight+0x1f8>)
    11e0:	47b0      	blx	r6
    11e2:	2200      	movs	r2, #0
    11e4:	4b4d      	ldr	r3, [pc, #308]	; (131c <flight+0x1fc>)
    11e6:	47a8      	blx	r5
    11e8:	2800      	cmp	r0, #0
    11ea:	d004      	beq.n	11f6 <flight+0xd6>
            flightState = flightBoost;
    11ec:	2303      	movs	r3, #3
            logEvent('L');
    11ee:	204c      	movs	r0, #76	; 0x4c
            //logSensors( );
            pinToggle(LedPin);
        }

        if (( velocity > 0.05) && ((altitude - offsets.groundOffset) > 5)) {
            flightState = flightBoost;
    11f0:	7023      	strb	r3, [r4, #0]
            logEvent('L');
    11f2:	4b4b      	ldr	r3, [pc, #300]	; (1320 <flight+0x200>)
    11f4:	4798      	blx	r3
        }



        if (sample.voltage.batFloat < 3.5) {
    11f6:	4b38      	ldr	r3, [pc, #224]	; (12d8 <flight+0x1b8>)
    11f8:	4938      	ldr	r1, [pc, #224]	; (12dc <flight+0x1bc>)
    11fa:	68d8      	ldr	r0, [r3, #12]
    11fc:	4b38      	ldr	r3, [pc, #224]	; (12e0 <flight+0x1c0>)
    11fe:	4798      	blx	r3
    1200:	2800      	cmp	r0, #0
    1202:	d056      	beq.n	12b2 <flight+0x192>
            flightState = flightIdle;
    1204:	2301      	movs	r3, #1
    1206:	7023      	strb	r3, [r4, #0]
            AT25SFHoldTillReady();
    1208:	4b46      	ldr	r3, [pc, #280]	; (1324 <flight+0x204>)
    120a:	4798      	blx	r3
            writeFlightEndAddress( );
    120c:	4b46      	ldr	r3, [pc, #280]	; (1328 <flight+0x208>)
    120e:	4798      	blx	r3
            unpluggedJingle();
    1210:	4b46      	ldr	r3, [pc, #280]	; (132c <flight+0x20c>)
    1212:	4798      	blx	r3
    1214:	e04d      	b.n	12b2 <flight+0x192>
        *	boost to fast
        *		while
        *	Accel > 1/4G
        */

        if (writeLog) {
    1216:	4b37      	ldr	r3, [pc, #220]	; (12f4 <flight+0x1d4>)
    1218:	781a      	ldrb	r2, [r3, #0]
    121a:	2a00      	cmp	r2, #0
    121c:	d015      	beq.n	124a <flight+0x12a>
            writeLog = false;
    121e:	2500      	movs	r5, #0
    1220:	701d      	strb	r5, [r3, #0]
            logSensors( );
    1222:	4b43      	ldr	r3, [pc, #268]	; (1330 <flight+0x210>)
    1224:	4798      	blx	r3
            if (pageReady) {
    1226:	4b43      	ldr	r3, [pc, #268]	; (1334 <flight+0x214>)
    1228:	781a      	ldrb	r2, [r3, #0]
    122a:	42aa      	cmp	r2, r5
    122c:	d00d      	beq.n	124a <flight+0x12a>
    122e:	2280      	movs	r2, #128	; 0x80
                pageReady = false;
    1230:	701d      	strb	r5, [r3, #0]
    1232:	4b31      	ldr	r3, [pc, #196]	; (12f8 <flight+0x1d8>)
                pinToggle(LedPin);
                u8_t bytesWritten = AT25SEWritePage(currentAddress,pageToWrite);
    1234:	4d40      	ldr	r5, [pc, #256]	; (1338 <flight+0x218>)
    1236:	0352      	lsls	r2, r2, #13
    1238:	61da      	str	r2, [r3, #28]
    123a:	4940      	ldr	r1, [pc, #256]	; (133c <flight+0x21c>)
    123c:	4b40      	ldr	r3, [pc, #256]	; (1340 <flight+0x220>)
    123e:	6828      	ldr	r0, [r5, #0]
    1240:	4798      	blx	r3
                currentAddress = (currentAddress + 0x100);
    1242:	682b      	ldr	r3, [r5, #0]
    1244:	3301      	adds	r3, #1
    1246:	33ff      	adds	r3, #255	; 0xff
    1248:	602b      	str	r3, [r5, #0]
            }
        }


        if (velocity < 0) {
    124a:	492c      	ldr	r1, [pc, #176]	; (12fc <flight+0x1dc>)
    124c:	2200      	movs	r2, #0
    124e:	6808      	ldr	r0, [r1, #0]
    1250:	6849      	ldr	r1, [r1, #4]
    1252:	2300      	movs	r3, #0
    1254:	4d3b      	ldr	r5, [pc, #236]	; (1344 <flight+0x224>)
    1256:	47a8      	blx	r5
    1258:	2800      	cmp	r0, #0
    125a:	d0cc      	beq.n	11f6 <flight+0xd6>
            flightState = flightDrogue;
    125c:	2306      	movs	r3, #6
            logEvent('A');
    125e:	2041      	movs	r0, #65	; 0x41
            }
        }


        if (velocity < 0) {
            flightState = flightDrogue;
    1260:	7023      	strb	r3, [r4, #0]
            logEvent('A');
    1262:	4b2f      	ldr	r3, [pc, #188]	; (1320 <flight+0x200>)
    1264:	4798      	blx	r3
            beep(100);
    1266:	2064      	movs	r0, #100	; 0x64
    1268:	4b37      	ldr	r3, [pc, #220]	; (1348 <flight+0x228>)
    126a:	4798      	blx	r3
    126c:	e7c3      	b.n	11f6 <flight+0xd6>

        break;
    case flightDrogue:


        if (pageReady) {
    126e:	4b31      	ldr	r3, [pc, #196]	; (1334 <flight+0x214>)
    1270:	781a      	ldrb	r2, [r3, #0]
    1272:	2a00      	cmp	r2, #0
    1274:	d0bf      	beq.n	11f6 <flight+0xd6>
            pageReady = false;
    1276:	2200      	movs	r2, #0
    1278:	701a      	strb	r2, [r3, #0]
    127a:	e00c      	b.n	1296 <flight+0x176>


        break;
    case flightTest:

        if (writeLog) {
    127c:	4b1d      	ldr	r3, [pc, #116]	; (12f4 <flight+0x1d4>)
    127e:	781a      	ldrb	r2, [r3, #0]
    1280:	2a00      	cmp	r2, #0
    1282:	d0b8      	beq.n	11f6 <flight+0xd6>
            writeLog = false;
    1284:	2500      	movs	r5, #0
    1286:	701d      	strb	r5, [r3, #0]
            logSensors( );
    1288:	4b29      	ldr	r3, [pc, #164]	; (1330 <flight+0x210>)
    128a:	4798      	blx	r3
            if (pageReady) {
    128c:	4b29      	ldr	r3, [pc, #164]	; (1334 <flight+0x214>)
    128e:	781a      	ldrb	r2, [r3, #0]
    1290:	42aa      	cmp	r2, r5
    1292:	d0b0      	beq.n	11f6 <flight+0xd6>
                pageReady = false;
    1294:	701d      	strb	r5, [r3, #0]
    1296:	2280      	movs	r2, #128	; 0x80
    1298:	4b17      	ldr	r3, [pc, #92]	; (12f8 <flight+0x1d8>)
                pinToggle(LedPin);
                u8_t bytesWritten = AT25SEWritePage(currentAddress,pageToWrite);
    129a:	4d27      	ldr	r5, [pc, #156]	; (1338 <flight+0x218>)
    129c:	0352      	lsls	r2, r2, #13
    129e:	61da      	str	r2, [r3, #28]
    12a0:	4926      	ldr	r1, [pc, #152]	; (133c <flight+0x21c>)
    12a2:	4b27      	ldr	r3, [pc, #156]	; (1340 <flight+0x220>)
    12a4:	6828      	ldr	r0, [r5, #0]
    12a6:	4798      	blx	r3
                currentAddress = (currentAddress + 0x100);
    12a8:	682b      	ldr	r3, [r5, #0]
    12aa:	3301      	adds	r3, #1
    12ac:	33ff      	adds	r3, #255	; 0xff
    12ae:	602b      	str	r3, [r5, #0]
    12b0:	e7a1      	b.n	11f6 <flight+0xd6>

        break;
    }


}
    12b2:	bd70      	pop	{r4, r5, r6, pc}
    12b4:	20000648 	.word	0x20000648
    12b8:	0000134d 	.word	0x0000134d
    12bc:	0000101d 	.word	0x0000101d
    12c0:	20000504 	.word	0x20000504
    12c4:	00002710 	.word	0x00002710
    12c8:	0000227d 	.word	0x0000227d
    12cc:	00001fa1 	.word	0x00001fa1
    12d0:	00000d7d 	.word	0x00000d7d
    12d4:	000027d9 	.word	0x000027d9
    12d8:	20000790 	.word	0x20000790
    12dc:	40600000 	.word	0x40600000
    12e0:	00003b9d 	.word	0x00003b9d
    12e4:	42001400 	.word	0x42001400
    12e8:	000027c9 	.word	0x000027c9
    12ec:	05fa0004 	.word	0x05fa0004
    12f0:	e000ed00 	.word	0xe000ed00
    12f4:	20000500 	.word	0x20000500
    12f8:	41004400 	.word	0x41004400
    12fc:	20000658 	.word	0x20000658
    1300:	00003b51 	.word	0x00003b51
    1304:	9999999a 	.word	0x9999999a
    1308:	3fa99999 	.word	0x3fa99999
    130c:	200004d0 	.word	0x200004d0
    1310:	00005f85 	.word	0x00005f85
    1314:	20000660 	.word	0x20000660
    1318:	000057ad 	.word	0x000057ad
    131c:	40140000 	.word	0x40140000
    1320:	00001ffd 	.word	0x00001ffd
    1324:	000001e5 	.word	0x000001e5
    1328:	00002241 	.word	0x00002241
    132c:	00000db5 	.word	0x00000db5
    1330:	00002061 	.word	0x00002061
    1334:	20000780 	.word	0x20000780
    1338:	20000784 	.word	0x20000784
    133c:	20000680 	.word	0x20000680
    1340:	000002cd 	.word	0x000002cd
    1344:	00003b29 	.word	0x00003b29
    1348:	00000d41 	.word	0x00000d41

0000134c <updateGround>:
#include <util.h>
#include <altimeter.h>

void updateGround(Altimeter *my_altimeter) {
    134c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

    offsets.gravityOffsetBuffer = offsets.gravityOffsetBuffer * 0.8 + sample.accelZ * 0.2;
    134e:	4b2e      	ldr	r3, [pc, #184]	; (1408 <updateGround+0xbc>)
    1350:	4c2e      	ldr	r4, [pc, #184]	; (140c <updateGround+0xc0>)
    1352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1354:	4d2e      	ldr	r5, [pc, #184]	; (1410 <updateGround+0xc4>)
    1356:	4a2f      	ldr	r2, [pc, #188]	; (1414 <updateGround+0xc8>)
    1358:	6920      	ldr	r0, [r4, #16]
    135a:	6961      	ldr	r1, [r4, #20]
    135c:	9300      	str	r3, [sp, #0]
    135e:	4b2e      	ldr	r3, [pc, #184]	; (1418 <updateGround+0xcc>)
    1360:	47a8      	blx	r5
    1362:	4b2e      	ldr	r3, [pc, #184]	; (141c <updateGround+0xd0>)
    1364:	0006      	movs	r6, r0
    1366:	9800      	ldr	r0, [sp, #0]
    1368:	000f      	movs	r7, r1
    136a:	4798      	blx	r3
    136c:	4a29      	ldr	r2, [pc, #164]	; (1414 <updateGround+0xc8>)
    136e:	4b2c      	ldr	r3, [pc, #176]	; (1420 <updateGround+0xd4>)
    1370:	47a8      	blx	r5
    1372:	0002      	movs	r2, r0
    1374:	000b      	movs	r3, r1
    1376:	0030      	movs	r0, r6
    1378:	0039      	movs	r1, r7
    137a:	4e2a      	ldr	r6, [pc, #168]	; (1424 <updateGround+0xd8>)
    137c:	47b0      	blx	r6
    offsets.groundOffsetBuffer = offsets.groundOffsetBuffer * 0.5 + altitude * 0.5;
    137e:	4b2a      	ldr	r3, [pc, #168]	; (1428 <updateGround+0xdc>)
#include <util.h>
#include <altimeter.h>

void updateGround(Altimeter *my_altimeter) {

    offsets.gravityOffsetBuffer = offsets.gravityOffsetBuffer * 0.8 + sample.accelZ * 0.2;
    1380:	6120      	str	r0, [r4, #16]
    1382:	6161      	str	r1, [r4, #20]
    offsets.groundOffsetBuffer = offsets.groundOffsetBuffer * 0.5 + altitude * 0.5;
    1384:	69e0      	ldr	r0, [r4, #28]
    1386:	4798      	blx	r3
    1388:	2200      	movs	r2, #0
    138a:	4b28      	ldr	r3, [pc, #160]	; (142c <updateGround+0xe0>)
    138c:	47a8      	blx	r5
    138e:	000f      	movs	r7, r1
    1390:	4927      	ldr	r1, [pc, #156]	; (1430 <updateGround+0xe4>)
    1392:	0006      	movs	r6, r0
    1394:	6808      	ldr	r0, [r1, #0]
    1396:	6849      	ldr	r1, [r1, #4]
    1398:	2200      	movs	r2, #0
    139a:	4b24      	ldr	r3, [pc, #144]	; (142c <updateGround+0xe0>)
    139c:	47a8      	blx	r5
    139e:	0002      	movs	r2, r0
    13a0:	000b      	movs	r3, r1
    13a2:	0030      	movs	r0, r6
    13a4:	0039      	movs	r1, r7
    13a6:	4e1f      	ldr	r6, [pc, #124]	; (1424 <updateGround+0xd8>)
    13a8:	47b0      	blx	r6
    13aa:	4f22      	ldr	r7, [pc, #136]	; (1434 <updateGround+0xe8>)
    13ac:	47b8      	blx	r7
    offsets.groundTemperatureBuffer = offsets.groundTemperatureBuffer * 0.8 + sample.temperatureCelcus * 0.2;
    13ae:	4b16      	ldr	r3, [pc, #88]	; (1408 <updateGround+0xbc>)
#include <altimeter.h>

void updateGround(Altimeter *my_altimeter) {

    offsets.gravityOffsetBuffer = offsets.gravityOffsetBuffer * 0.8 + sample.accelZ * 0.2;
    offsets.groundOffsetBuffer = offsets.groundOffsetBuffer * 0.5 + altitude * 0.5;
    13b0:	61e0      	str	r0, [r4, #28]
    offsets.groundTemperatureBuffer = offsets.groundTemperatureBuffer * 0.8 + sample.temperatureCelcus * 0.2;
    13b2:	6bde      	ldr	r6, [r3, #60]	; 0x3c
    13b4:	6a60      	ldr	r0, [r4, #36]	; 0x24
    13b6:	4b1c      	ldr	r3, [pc, #112]	; (1428 <updateGround+0xdc>)
    13b8:	4798      	blx	r3
    13ba:	4a16      	ldr	r2, [pc, #88]	; (1414 <updateGround+0xc8>)
    13bc:	4b16      	ldr	r3, [pc, #88]	; (1418 <updateGround+0xcc>)
    13be:	47a8      	blx	r5
    13c0:	4b19      	ldr	r3, [pc, #100]	; (1428 <updateGround+0xdc>)
    13c2:	9000      	str	r0, [sp, #0]
    13c4:	9101      	str	r1, [sp, #4]
    13c6:	0030      	movs	r0, r6
    13c8:	4798      	blx	r3
    13ca:	4a12      	ldr	r2, [pc, #72]	; (1414 <updateGround+0xc8>)
    13cc:	4b14      	ldr	r3, [pc, #80]	; (1420 <updateGround+0xd4>)
    13ce:	47a8      	blx	r5
    13d0:	000b      	movs	r3, r1
    13d2:	0002      	movs	r2, r0
    13d4:	9800      	ldr	r0, [sp, #0]
    13d6:	9901      	ldr	r1, [sp, #4]
    13d8:	4d12      	ldr	r5, [pc, #72]	; (1424 <updateGround+0xd8>)
    13da:	47a8      	blx	r5
    13dc:	47b8      	blx	r7

    if ((millis() - offsets.offsetBufferTime) > 2000) {
    13de:	4d16      	ldr	r5, [pc, #88]	; (1438 <updateGround+0xec>)

void updateGround(Altimeter *my_altimeter) {

    offsets.gravityOffsetBuffer = offsets.gravityOffsetBuffer * 0.8 + sample.accelZ * 0.2;
    offsets.groundOffsetBuffer = offsets.groundOffsetBuffer * 0.5 + altitude * 0.5;
    offsets.groundTemperatureBuffer = offsets.groundTemperatureBuffer * 0.8 + sample.temperatureCelcus * 0.2;
    13e0:	6260      	str	r0, [r4, #36]	; 0x24

    if ((millis() - offsets.offsetBufferTime) > 2000) {
    13e2:	47a8      	blx	r5
    13e4:	6823      	ldr	r3, [r4, #0]
    13e6:	1ac0      	subs	r0, r0, r3
    13e8:	23fa      	movs	r3, #250	; 0xfa
    13ea:	00db      	lsls	r3, r3, #3
    13ec:	4298      	cmp	r0, r3
    13ee:	d909      	bls.n	1404 <updateGround+0xb8>
        //recursive filter
        offsets.groundOffset = offsets.groundOffsetBuffer;
    13f0:	69e3      	ldr	r3, [r4, #28]
    13f2:	61a3      	str	r3, [r4, #24]
        offsets.groundTemperature = offsets.groundTemperatureBuffer;
    13f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
    13f6:	6223      	str	r3, [r4, #32]
        offsets.gravityOffset = offsets.gravityOffsetBuffer;
    13f8:	6922      	ldr	r2, [r4, #16]
    13fa:	6963      	ldr	r3, [r4, #20]
    13fc:	60a2      	str	r2, [r4, #8]
    13fe:	60e3      	str	r3, [r4, #12]
        offsets.offsetBufferTime = millis();
    1400:	47a8      	blx	r5
    1402:	6020      	str	r0, [r4, #0]
    }
}
    1404:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    1406:	46c0      	nop			; (mov r8, r8)
    1408:	20000790 	.word	0x20000790
    140c:	200004d0 	.word	0x200004d0
    1410:	000052b9 	.word	0x000052b9
    1414:	9999999a 	.word	0x9999999a
    1418:	3fe99999 	.word	0x3fe99999
    141c:	00005ff5 	.word	0x00005ff5
    1420:	3fc99999 	.word	0x3fc99999
    1424:	00004419 	.word	0x00004419
    1428:	00005f85 	.word	0x00005f85
    142c:	3fe00000 	.word	0x3fe00000
    1430:	20000660 	.word	0x20000660
    1434:	00003c75 	.word	0x00003c75
    1438:	0000101d 	.word	0x0000101d

0000143c <computeKalmanGains>:
    dt = 0.008;

    /*
     Fill in state transition matrix and its transpose
    */
    phi[0][1]    = dt;
    143c:	4bdc      	ldr	r3, [pc, #880]	; (17b0 <computeKalmanGains+0x374>)
    143e:	48dd      	ldr	r0, [pc, #884]	; (17b4 <computeKalmanGains+0x378>)
    1440:	49dd      	ldr	r1, [pc, #884]	; (17b8 <computeKalmanGains+0x37c>)

double altitude_variance = ALTITUDESIGMA*ALTITUDESIGMA;
double acceleration_variance = ACCELERATIONSIGMA*ACCELERATIONSIGMA;
double model_variance  = MODELSIGMA*MODELSIGMA;

void computeKalmanGains() {
    1442:	b5f0      	push	{r4, r5, r6, r7, lr}
    dt = 0.008;

    /*
     Fill in state transition matrix and its transpose
    */
    phi[0][1]    = dt;
    1444:	6098      	str	r0, [r3, #8]
    1446:	60d9      	str	r1, [r3, #12]
    phi[1][2]    = dt;
    1448:	6298      	str	r0, [r3, #40]	; 0x28
    144a:	62d9      	str	r1, [r3, #44]	; 0x2c
    phi[0][2]    = dt*dt/2.0;
    144c:	48db      	ldr	r0, [pc, #876]	; (17bc <computeKalmanGains+0x380>)
    144e:	49dc      	ldr	r1, [pc, #880]	; (17c0 <computeKalmanGains+0x384>)
    1450:	2200      	movs	r2, #0
    1452:	6118      	str	r0, [r3, #16]
    1454:	6159      	str	r1, [r3, #20]


    for( i = 0; i <= 2; i++)
        for( j = 0; j <=1; j++) {
            lastkgain[i][j] = .001;
            kgain[i][j] = 1.0;
    1456:	2000      	movs	r0, #0
    1458:	49da      	ldr	r1, [pc, #872]	; (17c4 <computeKalmanGains+0x388>)



    for( i = 0; i <= 2; i++)
        for( j = 0; j <=1; j++) {
            lastkgain[i][j] = .001;
    145a:	4cd6      	ldr	r4, [pc, #856]	; (17b4 <computeKalmanGains+0x378>)
    145c:	468c      	mov	ip, r1
    145e:	4dda      	ldr	r5, [pc, #872]	; (17c8 <computeKalmanGains+0x38c>)
            kgain[i][j] = 1.0;
    1460:	49da      	ldr	r1, [pc, #872]	; (17cc <computeKalmanGains+0x390>)

double altitude_variance = ALTITUDESIGMA*ALTITUDESIGMA;
double acceleration_variance = ACCELERATIONSIGMA*ACCELERATIONSIGMA;
double model_variance  = MODELSIGMA*MODELSIGMA;

void computeKalmanGains() {
    1462:	b0cd      	sub	sp, #308	; 0x134
    1464:	ae40      	add	r6, sp, #256	; 0x100
    1466:	1997      	adds	r7, r2, r6
    1468:	4666      	mov	r6, ip
    146a:	1996      	adds	r6, r2, r6
    146c:	3210      	adds	r2, #16



    for( i = 0; i <= 2; i++)
        for( j = 0; j <=1; j++) {
            lastkgain[i][j] = .001;
    146e:	603c      	str	r4, [r7, #0]
    1470:	607d      	str	r5, [r7, #4]
            kgain[i][j] = 1.0;
    1472:	6030      	str	r0, [r6, #0]
    1474:	6071      	str	r1, [r6, #4]



    for( i = 0; i <= 2; i++)
        for( j = 0; j <=1; j++) {
            lastkgain[i][j] = .001;
    1476:	60bc      	str	r4, [r7, #8]
    1478:	60fd      	str	r5, [r7, #12]
            kgain[i][j] = 1.0;
    147a:	60b0      	str	r0, [r6, #8]
    147c:	60f1      	str	r1, [r6, #12]
    phit[2][1]    = dt;
    phit[2][0]    = dt*dt/2.0;



    for( i = 0; i <= 2; i++)
    147e:	2a30      	cmp	r2, #48	; 0x30
    1480:	d1f0      	bne.n	1464 <computeKalmanGains+0x28>

    /* Compute the Kalman gain matrix. */
    while(1) {
        /* Propagate state covariance */

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
    1482:	6819      	ldr	r1, [r3, #0]
    1484:	685a      	ldr	r2, [r3, #4]
    1486:	911a      	str	r1, [sp, #104]	; 0x68
    1488:	921b      	str	r2, [sp, #108]	; 0x6c
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
    148a:	6999      	ldr	r1, [r3, #24]
    148c:	69da      	ldr	r2, [r3, #28]
    148e:	911c      	str	r1, [sp, #112]	; 0x70
    1490:	921d      	str	r2, [sp, #116]	; 0x74
    1492:	6a19      	ldr	r1, [r3, #32]
    1494:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    1496:	911e      	str	r1, [sp, #120]	; 0x78
    1498:	921f      	str	r2, [sp, #124]	; 0x7c
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
    149a:	6b19      	ldr	r1, [r3, #48]	; 0x30
    149c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    149e:	9120      	str	r1, [sp, #128]	; 0x80
    14a0:	9221      	str	r2, [sp, #132]	; 0x84
    14a2:	6b99      	ldr	r1, [r3, #56]	; 0x38
    14a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    14a6:	9122      	str	r1, [sp, #136]	; 0x88
    14a8:	9223      	str	r2, [sp, #140]	; 0x8c
    14aa:	6c19      	ldr	r1, [r3, #64]	; 0x40
    14ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    14ae:	9124      	str	r1, [sp, #144]	; 0x90
    14b0:	9225      	str	r2, [sp, #148]	; 0x94
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
        pestp[2][1] = term[2][0] * phit[0][1] + term[2][1] * phit[1][1] + term[2][2] * phit[2][1];
        pestp[2][2] = term[2][0] * phit[0][2] + term[2][1] * phit[1][2] + term[2][2] * phit[2][2];

        pestp[2][2] = pestp[2][2] + model_variance;
    14b2:	6c99      	ldr	r1, [r3, #72]	; 0x48
    14b4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    14b6:	913a      	str	r1, [sp, #232]	; 0xe8
    14b8:	923b      	str	r2, [sp, #236]	; 0xec
        /*
          Calculate Kalman Gain
        */
        det = (pestp[0][0]+altitude_variance)*(pestp[2][2] + acceleration_variance) - pestp[2][0] * pestp[0][2];
    14ba:	6d19      	ldr	r1, [r3, #80]	; 0x50
    14bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    14be:	6ddc      	ldr	r4, [r3, #92]	; 0x5c
    14c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    14c2:	933e      	str	r3, [sp, #248]	; 0xf8
    14c4:	943f      	str	r4, [sp, #252]	; 0xfc
    14c6:	2300      	movs	r3, #0
    14c8:	4cc1      	ldr	r4, [pc, #772]	; (17d0 <computeKalmanGains+0x394>)
    14ca:	913c      	str	r1, [sp, #240]	; 0xf0
    14cc:	923d      	str	r2, [sp, #244]	; 0xf4
    14ce:	9302      	str	r3, [sp, #8]
    14d0:	9403      	str	r4, [sp, #12]
    14d2:	2300      	movs	r3, #0
    14d4:	2400      	movs	r4, #0
    14d6:	9310      	str	r3, [sp, #64]	; 0x40
    14d8:	9411      	str	r4, [sp, #68]	; 0x44
    14da:	9300      	str	r3, [sp, #0]
    14dc:	9401      	str	r4, [sp, #4]
    14de:	9304      	str	r3, [sp, #16]
    14e0:	9405      	str	r4, [sp, #20]
    14e2:	2300      	movs	r3, #0
    14e4:	4cba      	ldr	r4, [pc, #744]	; (17d0 <computeKalmanGains+0x394>)
    14e6:	930e      	str	r3, [sp, #56]	; 0x38
    14e8:	940f      	str	r4, [sp, #60]	; 0x3c
    14ea:	2300      	movs	r3, #0
    14ec:	2400      	movs	r4, #0
    14ee:	9308      	str	r3, [sp, #32]
    14f0:	9409      	str	r4, [sp, #36]	; 0x24
    14f2:	930c      	str	r3, [sp, #48]	; 0x30
    14f4:	940d      	str	r4, [sp, #52]	; 0x34
    14f6:	930a      	str	r3, [sp, #40]	; 0x28
    14f8:	940b      	str	r4, [sp, #44]	; 0x2c
    14fa:	2480      	movs	r4, #128	; 0x80
    14fc:	2300      	movs	r3, #0
    14fe:	05e4      	lsls	r4, r4, #23
    1500:	9306      	str	r3, [sp, #24]
    1502:	9407      	str	r4, [sp, #28]
    1504:	2300      	movs	r3, #0
    1506:	9338      	str	r3, [sp, #224]	; 0xe0

    /* Compute the Kalman gain matrix. */
    while(1) {
        /* Propagate state covariance */

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
    1508:	4db2      	ldr	r5, [pc, #712]	; (17d4 <computeKalmanGains+0x398>)
    150a:	9a06      	ldr	r2, [sp, #24]
    150c:	9b07      	ldr	r3, [sp, #28]
    150e:	981a      	ldr	r0, [sp, #104]	; 0x68
    1510:	991b      	ldr	r1, [sp, #108]	; 0x6c
    1512:	47a8      	blx	r5
    1514:	4aa7      	ldr	r2, [pc, #668]	; (17b4 <computeKalmanGains+0x378>)
    1516:	0006      	movs	r6, r0
    1518:	000f      	movs	r7, r1
    151a:	9808      	ldr	r0, [sp, #32]
    151c:	9909      	ldr	r1, [sp, #36]	; 0x24
    151e:	4ba6      	ldr	r3, [pc, #664]	; (17b8 <computeKalmanGains+0x37c>)
    1520:	47a8      	blx	r5
    1522:	4cad      	ldr	r4, [pc, #692]	; (17d8 <computeKalmanGains+0x39c>)
    1524:	0002      	movs	r2, r0
    1526:	000b      	movs	r3, r1
    1528:	0030      	movs	r0, r6
    152a:	0039      	movs	r1, r7
    152c:	47a0      	blx	r4
    152e:	4aa3      	ldr	r2, [pc, #652]	; (17bc <computeKalmanGains+0x380>)
    1530:	0006      	movs	r6, r0
    1532:	000f      	movs	r7, r1
    1534:	9800      	ldr	r0, [sp, #0]
    1536:	9901      	ldr	r1, [sp, #4]
    1538:	4ba1      	ldr	r3, [pc, #644]	; (17c0 <computeKalmanGains+0x384>)
    153a:	47a8      	blx	r5
    153c:	0002      	movs	r2, r0
    153e:	000b      	movs	r3, r1
    1540:	0030      	movs	r0, r6
    1542:	0039      	movs	r1, r7
    1544:	47a0      	blx	r4
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
    1546:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    1548:	9b0b      	ldr	r3, [sp, #44]	; 0x2c

    /* Compute the Kalman gain matrix. */
    while(1) {
        /* Propagate state covariance */

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
    154a:	9016      	str	r0, [sp, #88]	; 0x58
    154c:	9117      	str	r1, [sp, #92]	; 0x5c
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
    154e:	981a      	ldr	r0, [sp, #104]	; 0x68
    1550:	991b      	ldr	r1, [sp, #108]	; 0x6c
    1552:	47a8      	blx	r5
    1554:	4a97      	ldr	r2, [pc, #604]	; (17b4 <computeKalmanGains+0x378>)
    1556:	0006      	movs	r6, r0
    1558:	000f      	movs	r7, r1
    155a:	980e      	ldr	r0, [sp, #56]	; 0x38
    155c:	990f      	ldr	r1, [sp, #60]	; 0x3c
    155e:	4b96      	ldr	r3, [pc, #600]	; (17b8 <computeKalmanGains+0x37c>)
    1560:	47a8      	blx	r5
    1562:	0002      	movs	r2, r0
    1564:	000b      	movs	r3, r1
    1566:	0030      	movs	r0, r6
    1568:	0039      	movs	r1, r7
    156a:	47a0      	blx	r4
    156c:	4a93      	ldr	r2, [pc, #588]	; (17bc <computeKalmanGains+0x380>)
    156e:	0006      	movs	r6, r0
    1570:	000f      	movs	r7, r1
    1572:	9810      	ldr	r0, [sp, #64]	; 0x40
    1574:	9911      	ldr	r1, [sp, #68]	; 0x44
    1576:	4b92      	ldr	r3, [pc, #584]	; (17c0 <computeKalmanGains+0x384>)
    1578:	47a8      	blx	r5
    157a:	0002      	movs	r2, r0
    157c:	000b      	movs	r3, r1
    157e:	0030      	movs	r0, r6
    1580:	0039      	movs	r1, r7
    1582:	47a0      	blx	r4
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
    1584:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1586:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    /* Compute the Kalman gain matrix. */
    while(1) {
        /* Propagate state covariance */

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
    1588:	9012      	str	r0, [sp, #72]	; 0x48
    158a:	9113      	str	r1, [sp, #76]	; 0x4c
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
    158c:	981a      	ldr	r0, [sp, #104]	; 0x68
    158e:	991b      	ldr	r1, [sp, #108]	; 0x6c
    1590:	47a8      	blx	r5
    1592:	4a88      	ldr	r2, [pc, #544]	; (17b4 <computeKalmanGains+0x378>)
    1594:	0006      	movs	r6, r0
    1596:	000f      	movs	r7, r1
    1598:	9804      	ldr	r0, [sp, #16]
    159a:	9905      	ldr	r1, [sp, #20]
    159c:	4b86      	ldr	r3, [pc, #536]	; (17b8 <computeKalmanGains+0x37c>)
    159e:	47a8      	blx	r5
    15a0:	0002      	movs	r2, r0
    15a2:	000b      	movs	r3, r1
    15a4:	0030      	movs	r0, r6
    15a6:	0039      	movs	r1, r7
    15a8:	47a0      	blx	r4
    15aa:	4a84      	ldr	r2, [pc, #528]	; (17bc <computeKalmanGains+0x380>)
    15ac:	0006      	movs	r6, r0
    15ae:	000f      	movs	r7, r1
    15b0:	9802      	ldr	r0, [sp, #8]
    15b2:	9903      	ldr	r1, [sp, #12]
    15b4:	4b82      	ldr	r3, [pc, #520]	; (17c0 <computeKalmanGains+0x384>)
    15b6:	47a8      	blx	r5
    15b8:	0002      	movs	r2, r0
    15ba:	000b      	movs	r3, r1
    15bc:	0030      	movs	r0, r6
    15be:	0039      	movs	r1, r7
    15c0:	47a0      	blx	r4
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
    15c2:	9a06      	ldr	r2, [sp, #24]
    15c4:	9b07      	ldr	r3, [sp, #28]
    while(1) {
        /* Propagate state covariance */

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
    15c6:	9014      	str	r0, [sp, #80]	; 0x50
    15c8:	9115      	str	r1, [sp, #84]	; 0x54
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
    15ca:	981c      	ldr	r0, [sp, #112]	; 0x70
    15cc:	991d      	ldr	r1, [sp, #116]	; 0x74
    15ce:	47a8      	blx	r5
    15d0:	9a08      	ldr	r2, [sp, #32]
    15d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    15d4:	0006      	movs	r6, r0
    15d6:	000f      	movs	r7, r1
    15d8:	981e      	ldr	r0, [sp, #120]	; 0x78
    15da:	991f      	ldr	r1, [sp, #124]	; 0x7c
    15dc:	47a8      	blx	r5
    15de:	0002      	movs	r2, r0
    15e0:	000b      	movs	r3, r1
    15e2:	0030      	movs	r0, r6
    15e4:	0039      	movs	r1, r7
    15e6:	47a0      	blx	r4
    15e8:	4a72      	ldr	r2, [pc, #456]	; (17b4 <computeKalmanGains+0x378>)
    15ea:	0006      	movs	r6, r0
    15ec:	000f      	movs	r7, r1
    15ee:	9800      	ldr	r0, [sp, #0]
    15f0:	9901      	ldr	r1, [sp, #4]
    15f2:	4b71      	ldr	r3, [pc, #452]	; (17b8 <computeKalmanGains+0x37c>)
    15f4:	47a8      	blx	r5
    15f6:	0002      	movs	r2, r0
    15f8:	000b      	movs	r3, r1
    15fa:	0030      	movs	r0, r6
    15fc:	0039      	movs	r1, r7
    15fe:	47a0      	blx	r4
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
    1600:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    1602:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
        /* Propagate state covariance */

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
    1604:	9018      	str	r0, [sp, #96]	; 0x60
    1606:	9119      	str	r1, [sp, #100]	; 0x64
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
    1608:	981c      	ldr	r0, [sp, #112]	; 0x70
    160a:	991d      	ldr	r1, [sp, #116]	; 0x74
    160c:	47a8      	blx	r5
    160e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    1610:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1612:	0006      	movs	r6, r0
    1614:	000f      	movs	r7, r1
    1616:	981e      	ldr	r0, [sp, #120]	; 0x78
    1618:	991f      	ldr	r1, [sp, #124]	; 0x7c
    161a:	47a8      	blx	r5
    161c:	0002      	movs	r2, r0
    161e:	000b      	movs	r3, r1
    1620:	0030      	movs	r0, r6
    1622:	0039      	movs	r1, r7
    1624:	47a0      	blx	r4
    1626:	4a63      	ldr	r2, [pc, #396]	; (17b4 <computeKalmanGains+0x378>)
    1628:	0006      	movs	r6, r0
    162a:	000f      	movs	r7, r1
    162c:	9810      	ldr	r0, [sp, #64]	; 0x40
    162e:	9911      	ldr	r1, [sp, #68]	; 0x44
    1630:	4b61      	ldr	r3, [pc, #388]	; (17b8 <computeKalmanGains+0x37c>)
    1632:	47a8      	blx	r5
    1634:	0002      	movs	r2, r0
    1636:	000b      	movs	r3, r1
    1638:	0030      	movs	r0, r6
    163a:	0039      	movs	r1, r7
    163c:	47a0      	blx	r4
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
    163e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1640:	9b0d      	ldr	r3, [sp, #52]	; 0x34

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
    1642:	9026      	str	r0, [sp, #152]	; 0x98
    1644:	9127      	str	r1, [sp, #156]	; 0x9c
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
    1646:	981c      	ldr	r0, [sp, #112]	; 0x70
    1648:	991d      	ldr	r1, [sp, #116]	; 0x74
    164a:	47a8      	blx	r5
    164c:	9a04      	ldr	r2, [sp, #16]
    164e:	9b05      	ldr	r3, [sp, #20]
    1650:	0006      	movs	r6, r0
    1652:	000f      	movs	r7, r1
    1654:	981e      	ldr	r0, [sp, #120]	; 0x78
    1656:	991f      	ldr	r1, [sp, #124]	; 0x7c
    1658:	47a8      	blx	r5
    165a:	0002      	movs	r2, r0
    165c:	000b      	movs	r3, r1
    165e:	0030      	movs	r0, r6
    1660:	0039      	movs	r1, r7
    1662:	47a0      	blx	r4
    1664:	4a53      	ldr	r2, [pc, #332]	; (17b4 <computeKalmanGains+0x378>)
    1666:	0006      	movs	r6, r0
    1668:	000f      	movs	r7, r1
    166a:	9802      	ldr	r0, [sp, #8]
    166c:	9903      	ldr	r1, [sp, #12]
    166e:	4b52      	ldr	r3, [pc, #328]	; (17b8 <computeKalmanGains+0x37c>)
    1670:	47a8      	blx	r5
    1672:	0002      	movs	r2, r0
    1674:	000b      	movs	r3, r1
    1676:	0030      	movs	r0, r6
    1678:	0039      	movs	r1, r7
    167a:	47a0      	blx	r4
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
    167c:	9a06      	ldr	r2, [sp, #24]
    167e:	9b07      	ldr	r3, [sp, #28]
        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
    1680:	9028      	str	r0, [sp, #160]	; 0xa0
    1682:	9129      	str	r1, [sp, #164]	; 0xa4
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
    1684:	9820      	ldr	r0, [sp, #128]	; 0x80
    1686:	9921      	ldr	r1, [sp, #132]	; 0x84
    1688:	47a8      	blx	r5
    168a:	9a08      	ldr	r2, [sp, #32]
    168c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    168e:	0006      	movs	r6, r0
    1690:	000f      	movs	r7, r1
    1692:	9822      	ldr	r0, [sp, #136]	; 0x88
    1694:	9923      	ldr	r1, [sp, #140]	; 0x8c
    1696:	47a8      	blx	r5
    1698:	0002      	movs	r2, r0
    169a:	000b      	movs	r3, r1
    169c:	0030      	movs	r0, r6
    169e:	0039      	movs	r1, r7
    16a0:	47a0      	blx	r4
    16a2:	9a00      	ldr	r2, [sp, #0]
    16a4:	9b01      	ldr	r3, [sp, #4]
    16a6:	0006      	movs	r6, r0
    16a8:	000f      	movs	r7, r1
    16aa:	9824      	ldr	r0, [sp, #144]	; 0x90
    16ac:	9925      	ldr	r1, [sp, #148]	; 0x94
    16ae:	47a8      	blx	r5
    16b0:	0002      	movs	r2, r0
    16b2:	000b      	movs	r3, r1
    16b4:	0030      	movs	r0, r6
    16b6:	0039      	movs	r1, r7
    16b8:	47a0      	blx	r4
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
    16ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    16bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
    16be:	902e      	str	r0, [sp, #184]	; 0xb8
    16c0:	912f      	str	r1, [sp, #188]	; 0xbc
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
    16c2:	9820      	ldr	r0, [sp, #128]	; 0x80
    16c4:	9921      	ldr	r1, [sp, #132]	; 0x84
    16c6:	47a8      	blx	r5
    16c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    16ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    16cc:	0006      	movs	r6, r0
    16ce:	000f      	movs	r7, r1
    16d0:	9822      	ldr	r0, [sp, #136]	; 0x88
    16d2:	9923      	ldr	r1, [sp, #140]	; 0x8c
    16d4:	47a8      	blx	r5
    16d6:	0002      	movs	r2, r0
    16d8:	000b      	movs	r3, r1
    16da:	0030      	movs	r0, r6
    16dc:	0039      	movs	r1, r7
    16de:	47a0      	blx	r4
    16e0:	9a10      	ldr	r2, [sp, #64]	; 0x40
    16e2:	9b11      	ldr	r3, [sp, #68]	; 0x44
    16e4:	0006      	movs	r6, r0
    16e6:	000f      	movs	r7, r1
    16e8:	9824      	ldr	r0, [sp, #144]	; 0x90
    16ea:	9925      	ldr	r1, [sp, #148]	; 0x94
    16ec:	47a8      	blx	r5
    16ee:	0002      	movs	r2, r0
    16f0:	000b      	movs	r3, r1
    16f2:	0030      	movs	r0, r6
    16f4:	0039      	movs	r1, r7
    16f6:	47a0      	blx	r4
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];
    16f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    16fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
    16fc:	9006      	str	r0, [sp, #24]
    16fe:	9107      	str	r1, [sp, #28]
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];
    1700:	9820      	ldr	r0, [sp, #128]	; 0x80
    1702:	9921      	ldr	r1, [sp, #132]	; 0x84
    1704:	47a8      	blx	r5
    1706:	9a04      	ldr	r2, [sp, #16]
    1708:	9b05      	ldr	r3, [sp, #20]
    170a:	0006      	movs	r6, r0
    170c:	000f      	movs	r7, r1
    170e:	9822      	ldr	r0, [sp, #136]	; 0x88
    1710:	9923      	ldr	r1, [sp, #140]	; 0x8c
    1712:	47a8      	blx	r5
    1714:	0002      	movs	r2, r0
    1716:	000b      	movs	r3, r1
    1718:	0030      	movs	r0, r6
    171a:	0039      	movs	r1, r7
    171c:	47a0      	blx	r4
    171e:	9a02      	ldr	r2, [sp, #8]
    1720:	9b03      	ldr	r3, [sp, #12]
    1722:	0006      	movs	r6, r0
    1724:	000f      	movs	r7, r1
    1726:	9824      	ldr	r0, [sp, #144]	; 0x90
    1728:	9925      	ldr	r1, [sp, #148]	; 0x94
    172a:	47a8      	blx	r5
    172c:	0002      	movs	r2, r0
    172e:	000b      	movs	r3, r1
    1730:	0030      	movs	r0, r6
    1732:	0039      	movs	r1, r7
    1734:	47a0      	blx	r4

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
    1736:	4a1f      	ldr	r2, [pc, #124]	; (17b4 <computeKalmanGains+0x378>)
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];
    1738:	9002      	str	r0, [sp, #8]
    173a:	9103      	str	r1, [sp, #12]

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
    173c:	9812      	ldr	r0, [sp, #72]	; 0x48
    173e:	9913      	ldr	r1, [sp, #76]	; 0x4c
    1740:	4b1d      	ldr	r3, [pc, #116]	; (17b8 <computeKalmanGains+0x37c>)
    1742:	47a8      	blx	r5
    1744:	9a16      	ldr	r2, [sp, #88]	; 0x58
    1746:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    1748:	47a0      	blx	r4
    174a:	4a1c      	ldr	r2, [pc, #112]	; (17bc <computeKalmanGains+0x380>)
    174c:	0006      	movs	r6, r0
    174e:	000f      	movs	r7, r1
    1750:	9814      	ldr	r0, [sp, #80]	; 0x50
    1752:	9915      	ldr	r1, [sp, #84]	; 0x54
    1754:	4b1a      	ldr	r3, [pc, #104]	; (17c0 <computeKalmanGains+0x384>)
    1756:	47a8      	blx	r5
    1758:	0002      	movs	r2, r0
    175a:	000b      	movs	r3, r1
    175c:	0030      	movs	r0, r6
    175e:	0039      	movs	r1, r7
    1760:	47a0      	blx	r4
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
    1762:	2200      	movs	r2, #0
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
    1764:	9008      	str	r0, [sp, #32]
    1766:	9109      	str	r1, [sp, #36]	; 0x24
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
    1768:	9816      	ldr	r0, [sp, #88]	; 0x58
    176a:	9917      	ldr	r1, [sp, #92]	; 0x5c
    176c:	2300      	movs	r3, #0
    176e:	47a8      	blx	r5
    1770:	0006      	movs	r6, r0
    1772:	000f      	movs	r7, r1
    1774:	0002      	movs	r2, r0
    1776:	000b      	movs	r3, r1
    1778:	9812      	ldr	r0, [sp, #72]	; 0x48
    177a:	9913      	ldr	r1, [sp, #76]	; 0x4c
    177c:	47a0      	blx	r4
    177e:	4a0d      	ldr	r2, [pc, #52]	; (17b4 <computeKalmanGains+0x378>)
    1780:	9000      	str	r0, [sp, #0]
    1782:	9101      	str	r1, [sp, #4]
    1784:	9814      	ldr	r0, [sp, #80]	; 0x50
    1786:	9915      	ldr	r1, [sp, #84]	; 0x54
    1788:	4b0b      	ldr	r3, [pc, #44]	; (17b8 <computeKalmanGains+0x37c>)
    178a:	47a8      	blx	r5
    178c:	0002      	movs	r2, r0
    178e:	000b      	movs	r3, r1
    1790:	9800      	ldr	r0, [sp, #0]
    1792:	9901      	ldr	r1, [sp, #4]
    1794:	47a0      	blx	r4
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
    1796:	2200      	movs	r2, #0
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
    1798:	9030      	str	r0, [sp, #192]	; 0xc0
    179a:	9131      	str	r1, [sp, #196]	; 0xc4
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
    179c:	9812      	ldr	r0, [sp, #72]	; 0x48
    179e:	9913      	ldr	r1, [sp, #76]	; 0x4c
    17a0:	2300      	movs	r3, #0
    17a2:	47a8      	blx	r5
    17a4:	0032      	movs	r2, r6
    17a6:	003b      	movs	r3, r7
    17a8:	47a0      	blx	r4
    17aa:	9a14      	ldr	r2, [sp, #80]	; 0x50
    17ac:	9b15      	ldr	r3, [sp, #84]	; 0x54
    17ae:	e015      	b.n	17dc <computeKalmanGains+0x3a0>
    17b0:	20000010 	.word	0x20000010
    17b4:	d2f1a9fc 	.word	0xd2f1a9fc
    17b8:	3f80624d 	.word	0x3f80624d
    17bc:	a0b5ed8d 	.word	0xa0b5ed8d
    17c0:	3f00c6f7 	.word	0x3f00c6f7
    17c4:	20000618 	.word	0x20000618
    17c8:	3f50624d 	.word	0x3f50624d
    17cc:	3ff00000 	.word	0x3ff00000
    17d0:	40220000 	.word	0x40220000
    17d4:	000052b9 	.word	0x000052b9
    17d8:	00004419 	.word	0x00004419
    17dc:	47a0      	blx	r4
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
    17de:	4ad9      	ldr	r2, [pc, #868]	; (1b44 <computeKalmanGains+0x708>)
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
    17e0:	9112      	str	r1, [sp, #72]	; 0x48
    17e2:	9004      	str	r0, [sp, #16]
    17e4:	9116      	str	r1, [sp, #88]	; 0x58
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
    17e6:	4bd8      	ldr	r3, [pc, #864]	; (1b48 <computeKalmanGains+0x70c>)
    17e8:	9826      	ldr	r0, [sp, #152]	; 0x98
    17ea:	9927      	ldr	r1, [sp, #156]	; 0x9c
    17ec:	47a8      	blx	r5
    17ee:	9a18      	ldr	r2, [sp, #96]	; 0x60
    17f0:	9b19      	ldr	r3, [sp, #100]	; 0x64
    17f2:	47a0      	blx	r4
    17f4:	4ad5      	ldr	r2, [pc, #852]	; (1b4c <computeKalmanGains+0x710>)
    17f6:	0006      	movs	r6, r0
    17f8:	000f      	movs	r7, r1
    17fa:	9828      	ldr	r0, [sp, #160]	; 0xa0
    17fc:	9929      	ldr	r1, [sp, #164]	; 0xa4
    17fe:	4bd4      	ldr	r3, [pc, #848]	; (1b50 <computeKalmanGains+0x714>)
    1800:	47a8      	blx	r5
    1802:	0002      	movs	r2, r0
    1804:	000b      	movs	r3, r1
    1806:	0030      	movs	r0, r6
    1808:	0039      	movs	r1, r7
    180a:	47a0      	blx	r4
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
    180c:	2200      	movs	r2, #0
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
    180e:	902a      	str	r0, [sp, #168]	; 0xa8
    1810:	912b      	str	r1, [sp, #172]	; 0xac
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
    1812:	9818      	ldr	r0, [sp, #96]	; 0x60
    1814:	9919      	ldr	r1, [sp, #100]	; 0x64
    1816:	2300      	movs	r3, #0
    1818:	47a8      	blx	r5
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
    181a:	2200      	movs	r2, #0

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
    181c:	9032      	str	r0, [sp, #200]	; 0xc8
    181e:	9133      	str	r1, [sp, #204]	; 0xcc
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
    1820:	9826      	ldr	r0, [sp, #152]	; 0x98
    1822:	9927      	ldr	r1, [sp, #156]	; 0x9c
    1824:	2300      	movs	r3, #0
    1826:	47a8      	blx	r5
    1828:	9a32      	ldr	r2, [sp, #200]	; 0xc8
    182a:	9b33      	ldr	r3, [sp, #204]	; 0xcc
    182c:	47a0      	blx	r4
    182e:	9a28      	ldr	r2, [sp, #160]	; 0xa0
    1830:	9b29      	ldr	r3, [sp, #164]	; 0xa4
    1832:	47a0      	blx	r4
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
    1834:	4ac3      	ldr	r2, [pc, #780]	; (1b44 <computeKalmanGains+0x708>)
        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
    1836:	902c      	str	r0, [sp, #176]	; 0xb0
    1838:	912d      	str	r1, [sp, #180]	; 0xb4
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
    183a:	9806      	ldr	r0, [sp, #24]
    183c:	9907      	ldr	r1, [sp, #28]
    183e:	4bc2      	ldr	r3, [pc, #776]	; (1b48 <computeKalmanGains+0x70c>)
    1840:	47a8      	blx	r5
    1842:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
    1844:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
    1846:	47a0      	blx	r4
    1848:	4ac0      	ldr	r2, [pc, #768]	; (1b4c <computeKalmanGains+0x710>)
    184a:	0006      	movs	r6, r0
    184c:	000f      	movs	r7, r1
    184e:	9802      	ldr	r0, [sp, #8]
    1850:	9903      	ldr	r1, [sp, #12]
    1852:	4bbf      	ldr	r3, [pc, #764]	; (1b50 <computeKalmanGains+0x714>)
    1854:	47a8      	blx	r5
    1856:	0002      	movs	r2, r0
    1858:	000b      	movs	r3, r1
    185a:	0030      	movs	r0, r6
    185c:	0039      	movs	r1, r7
    185e:	47a0      	blx	r4
        pestp[2][1] = term[2][0] * phit[0][1] + term[2][1] * phit[1][1] + term[2][2] * phit[2][1];
    1860:	2200      	movs	r2, #0
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
    1862:	9000      	str	r0, [sp, #0]
    1864:	9101      	str	r1, [sp, #4]
        pestp[2][1] = term[2][0] * phit[0][1] + term[2][1] * phit[1][1] + term[2][2] * phit[2][1];
    1866:	982e      	ldr	r0, [sp, #184]	; 0xb8
    1868:	992f      	ldr	r1, [sp, #188]	; 0xbc
    186a:	2300      	movs	r3, #0
    186c:	47a8      	blx	r5
    186e:	0006      	movs	r6, r0
    1870:	000f      	movs	r7, r1
    1872:	0002      	movs	r2, r0
    1874:	000b      	movs	r3, r1
    1876:	9806      	ldr	r0, [sp, #24]
    1878:	9907      	ldr	r1, [sp, #28]
    187a:	47a0      	blx	r4
    187c:	4ab1      	ldr	r2, [pc, #708]	; (1b44 <computeKalmanGains+0x708>)
    187e:	900a      	str	r0, [sp, #40]	; 0x28
    1880:	910b      	str	r1, [sp, #44]	; 0x2c
    1882:	9802      	ldr	r0, [sp, #8]
    1884:	9903      	ldr	r1, [sp, #12]
    1886:	4bb0      	ldr	r3, [pc, #704]	; (1b48 <computeKalmanGains+0x70c>)
    1888:	47a8      	blx	r5
    188a:	0002      	movs	r2, r0
    188c:	000b      	movs	r3, r1
    188e:	980a      	ldr	r0, [sp, #40]	; 0x28
    1890:	990b      	ldr	r1, [sp, #44]	; 0x2c
    1892:	47a0      	blx	r4
        pestp[2][2] = term[2][0] * phit[0][2] + term[2][1] * phit[1][2] + term[2][2] * phit[2][2];

        pestp[2][2] = pestp[2][2] + model_variance;
    1894:	2200      	movs	r2, #0
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
        pestp[2][1] = term[2][0] * phit[0][1] + term[2][1] * phit[1][1] + term[2][2] * phit[2][1];
    1896:	9010      	str	r0, [sp, #64]	; 0x40
    1898:	9111      	str	r1, [sp, #68]	; 0x44
        pestp[2][2] = term[2][0] * phit[0][2] + term[2][1] * phit[1][2] + term[2][2] * phit[2][2];

        pestp[2][2] = pestp[2][2] + model_variance;
    189a:	9806      	ldr	r0, [sp, #24]
    189c:	9907      	ldr	r1, [sp, #28]
    189e:	2300      	movs	r3, #0
    18a0:	47a8      	blx	r5
    18a2:	0032      	movs	r2, r6
    18a4:	003b      	movs	r3, r7
    18a6:	47a0      	blx	r4
    18a8:	9a02      	ldr	r2, [sp, #8]
    18aa:	9b03      	ldr	r3, [sp, #12]
    18ac:	47a0      	blx	r4
    18ae:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
    18b0:	9b3b      	ldr	r3, [sp, #236]	; 0xec
    18b2:	47a0      	blx	r4
        /*
          Calculate Kalman Gain
        */
        det = (pestp[0][0]+altitude_variance)*(pestp[2][2] + acceleration_variance) - pestp[2][0] * pestp[0][2];
    18b4:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
    18b6:	9b3d      	ldr	r3, [sp, #244]	; 0xf4
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
        pestp[2][1] = term[2][0] * phit[0][1] + term[2][1] * phit[1][1] + term[2][2] * phit[2][1];
        pestp[2][2] = term[2][0] * phit[0][2] + term[2][1] * phit[1][2] + term[2][2] * phit[2][2];

        pestp[2][2] = pestp[2][2] + model_variance;
    18b8:	9002      	str	r0, [sp, #8]
    18ba:	9103      	str	r1, [sp, #12]
        /*
          Calculate Kalman Gain
        */
        det = (pestp[0][0]+altitude_variance)*(pestp[2][2] + acceleration_variance) - pestp[2][0] * pestp[0][2];
    18bc:	9808      	ldr	r0, [sp, #32]
    18be:	9909      	ldr	r1, [sp, #36]	; 0x24
    18c0:	47a0      	blx	r4
    18c2:	9a3e      	ldr	r2, [sp, #248]	; 0xf8
    18c4:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
    18c6:	900a      	str	r0, [sp, #40]	; 0x28
    18c8:	910b      	str	r1, [sp, #44]	; 0x2c
    18ca:	9802      	ldr	r0, [sp, #8]
    18cc:	9903      	ldr	r1, [sp, #12]
    18ce:	47a0      	blx	r4
    18d0:	9a00      	ldr	r2, [sp, #0]
    18d2:	9b01      	ldr	r3, [sp, #4]
    18d4:	900c      	str	r0, [sp, #48]	; 0x30
    18d6:	910d      	str	r1, [sp, #52]	; 0x34
    18d8:	9804      	ldr	r0, [sp, #16]
    18da:	9916      	ldr	r1, [sp, #88]	; 0x58
    18dc:	47a8      	blx	r5
    18de:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    18e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    18e2:	900e      	str	r0, [sp, #56]	; 0x38
    18e4:	910f      	str	r1, [sp, #60]	; 0x3c
    18e6:	980a      	ldr	r0, [sp, #40]	; 0x28
    18e8:	990b      	ldr	r1, [sp, #44]	; 0x2c
    18ea:	47a8      	blx	r5
    18ec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    18ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    18f0:	4e98      	ldr	r6, [pc, #608]	; (1b54 <computeKalmanGains+0x718>)
    18f2:	47b0      	blx	r6


        kgain[0][0] = (pestp[0][0] * (pestp[2][2] + acceleration_variance) - pestp[0][2] * pestp[2][0])/det;
    18f4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    18f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34

        pestp[2][2] = pestp[2][2] + model_variance;
        /*
          Calculate Kalman Gain
        */
        det = (pestp[0][0]+altitude_variance)*(pestp[2][2] + acceleration_variance) - pestp[2][0] * pestp[0][2];
    18f8:	9006      	str	r0, [sp, #24]
    18fa:	9107      	str	r1, [sp, #28]


        kgain[0][0] = (pestp[0][0] * (pestp[2][2] + acceleration_variance) - pestp[0][2] * pestp[2][0])/det;
    18fc:	9808      	ldr	r0, [sp, #32]
    18fe:	9909      	ldr	r1, [sp, #36]	; 0x24
    1900:	47a8      	blx	r5
    1902:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    1904:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1906:	47b0      	blx	r6
    1908:	9a06      	ldr	r2, [sp, #24]
    190a:	9b07      	ldr	r3, [sp, #28]
    190c:	4e92      	ldr	r6, [pc, #584]	; (1b58 <computeKalmanGains+0x71c>)
    190e:	47b0      	blx	r6
    1910:	9034      	str	r0, [sp, #208]	; 0xd0
    1912:	9135      	str	r1, [sp, #212]	; 0xd4
    1914:	9a34      	ldr	r2, [sp, #208]	; 0xd0
    1916:	9b35      	ldr	r3, [sp, #212]	; 0xd4
    1918:	4990      	ldr	r1, [pc, #576]	; (1b5c <computeKalmanGains+0x720>)
    191a:	600a      	str	r2, [r1, #0]
    191c:	604b      	str	r3, [r1, #4]

        kgain[0][1] = (pestp[0][0] * (-pestp[0][2]) + pestp[0][2] * (pestp[0][0] + altitude_variance))/det;
    191e:	9808      	ldr	r0, [sp, #32]
    1920:	9909      	ldr	r1, [sp, #36]	; 0x24
    1922:	2280      	movs	r2, #128	; 0x80
    1924:	0612      	lsls	r2, r2, #24
    1926:	4694      	mov	ip, r2
    1928:	9b12      	ldr	r3, [sp, #72]	; 0x48
    192a:	9a04      	ldr	r2, [sp, #16]
    192c:	4463      	add	r3, ip
    192e:	932e      	str	r3, [sp, #184]	; 0xb8
    1930:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    1932:	47a8      	blx	r5
    1934:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    1936:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1938:	0006      	movs	r6, r0
    193a:	000f      	movs	r7, r1
    193c:	9804      	ldr	r0, [sp, #16]
    193e:	9916      	ldr	r1, [sp, #88]	; 0x58
    1940:	47a8      	blx	r5
    1942:	0002      	movs	r2, r0
    1944:	000b      	movs	r3, r1
    1946:	0030      	movs	r0, r6
    1948:	0039      	movs	r1, r7
    194a:	47a0      	blx	r4
    194c:	9a06      	ldr	r2, [sp, #24]
    194e:	9b07      	ldr	r3, [sp, #28]
    1950:	4e81      	ldr	r6, [pc, #516]	; (1b58 <computeKalmanGains+0x71c>)
    1952:	47b0      	blx	r6
    1954:	900e      	str	r0, [sp, #56]	; 0x38
    1956:	910f      	str	r1, [sp, #60]	; 0x3c
    1958:	4980      	ldr	r1, [pc, #512]	; (1b5c <computeKalmanGains+0x720>)
    195a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    195c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    195e:	608a      	str	r2, [r1, #8]
    1960:	60cb      	str	r3, [r1, #12]

        kgain[1][0] = (pestp[1][0] * (pestp[2][2] + acceleration_variance) - pestp[1][2] * pestp[2][0])/det;
    1962:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1964:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1966:	982a      	ldr	r0, [sp, #168]	; 0xa8
    1968:	992b      	ldr	r1, [sp, #172]	; 0xac
    196a:	47a8      	blx	r5
    196c:	9a00      	ldr	r2, [sp, #0]
    196e:	9b01      	ldr	r3, [sp, #4]
    1970:	0006      	movs	r6, r0
    1972:	000f      	movs	r7, r1
    1974:	982c      	ldr	r0, [sp, #176]	; 0xb0
    1976:	992d      	ldr	r1, [sp, #180]	; 0xb4
    1978:	47a8      	blx	r5
    197a:	0002      	movs	r2, r0
    197c:	000b      	movs	r3, r1
    197e:	0030      	movs	r0, r6
    1980:	0039      	movs	r1, r7
    1982:	4e74      	ldr	r6, [pc, #464]	; (1b54 <computeKalmanGains+0x718>)
    1984:	47b0      	blx	r6
    1986:	9a06      	ldr	r2, [sp, #24]
    1988:	9b07      	ldr	r3, [sp, #28]
    198a:	4e73      	ldr	r6, [pc, #460]	; (1b58 <computeKalmanGains+0x71c>)
    198c:	47b0      	blx	r6
    198e:	0002      	movs	r2, r0
    1990:	000b      	movs	r3, r1
    1992:	9139      	str	r1, [sp, #228]	; 0xe4
    1994:	4971      	ldr	r1, [pc, #452]	; (1b5c <computeKalmanGains+0x720>)
    1996:	9018      	str	r0, [sp, #96]	; 0x60
    1998:	610a      	str	r2, [r1, #16]
    199a:	614b      	str	r3, [r1, #20]

        kgain[1][1] = (pestp[1][0] * (-pestp[0][2]) + pestp[1][2] * (pestp[0][0] + altitude_variance))/det;
    199c:	982a      	ldr	r0, [sp, #168]	; 0xa8
    199e:	992b      	ldr	r1, [sp, #172]	; 0xac
    19a0:	9a04      	ldr	r2, [sp, #16]
    19a2:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    19a4:	47a8      	blx	r5
    19a6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    19a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    19aa:	0006      	movs	r6, r0
    19ac:	000f      	movs	r7, r1
    19ae:	982c      	ldr	r0, [sp, #176]	; 0xb0
    19b0:	992d      	ldr	r1, [sp, #180]	; 0xb4
    19b2:	47a8      	blx	r5
    19b4:	0002      	movs	r2, r0
    19b6:	000b      	movs	r3, r1
    19b8:	0030      	movs	r0, r6
    19ba:	0039      	movs	r1, r7
    19bc:	47a0      	blx	r4
    19be:	9a06      	ldr	r2, [sp, #24]
    19c0:	9b07      	ldr	r3, [sp, #28]
    19c2:	4e65      	ldr	r6, [pc, #404]	; (1b58 <computeKalmanGains+0x71c>)
    19c4:	47b0      	blx	r6
    19c6:	9012      	str	r0, [sp, #72]	; 0x48
    19c8:	9113      	str	r1, [sp, #76]	; 0x4c
    19ca:	9a12      	ldr	r2, [sp, #72]	; 0x48
    19cc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    19ce:	4963      	ldr	r1, [pc, #396]	; (1b5c <computeKalmanGains+0x720>)
    19d0:	618a      	str	r2, [r1, #24]
    19d2:	61cb      	str	r3, [r1, #28]

        kgain[2][0] = (pestp[2][0] * (pestp[2][2] + acceleration_variance) - pestp[2][2] * pestp[2][0])/det;
    19d4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    19d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    19d8:	9800      	ldr	r0, [sp, #0]
    19da:	9901      	ldr	r1, [sp, #4]
    19dc:	47a8      	blx	r5
    19de:	9a02      	ldr	r2, [sp, #8]
    19e0:	9b03      	ldr	r3, [sp, #12]
    19e2:	0006      	movs	r6, r0
    19e4:	000f      	movs	r7, r1
    19e6:	9800      	ldr	r0, [sp, #0]
    19e8:	9901      	ldr	r1, [sp, #4]
    19ea:	47a8      	blx	r5
    19ec:	0002      	movs	r2, r0
    19ee:	000b      	movs	r3, r1
    19f0:	0030      	movs	r0, r6
    19f2:	0039      	movs	r1, r7
    19f4:	4e57      	ldr	r6, [pc, #348]	; (1b54 <computeKalmanGains+0x718>)
    19f6:	47b0      	blx	r6
    19f8:	9a06      	ldr	r2, [sp, #24]
    19fa:	9b07      	ldr	r3, [sp, #28]
    19fc:	4e56      	ldr	r6, [pc, #344]	; (1b58 <computeKalmanGains+0x71c>)
    19fe:	47b0      	blx	r6
    1a00:	9014      	str	r0, [sp, #80]	; 0x50
    1a02:	9115      	str	r1, [sp, #84]	; 0x54
    1a04:	9a14      	ldr	r2, [sp, #80]	; 0x50
    1a06:	9b15      	ldr	r3, [sp, #84]	; 0x54
    1a08:	4954      	ldr	r1, [pc, #336]	; (1b5c <computeKalmanGains+0x720>)
    1a0a:	620a      	str	r2, [r1, #32]
    1a0c:	624b      	str	r3, [r1, #36]	; 0x24

        kgain[2][1] = (pestp[2][0] * (-pestp[0][2]) + pestp[2][2] * (pestp[0][0] + altitude_variance))/det;
    1a0e:	9800      	ldr	r0, [sp, #0]
    1a10:	9901      	ldr	r1, [sp, #4]
    1a12:	9a04      	ldr	r2, [sp, #16]
    1a14:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    1a16:	47a8      	blx	r5
    1a18:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    1a1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1a1c:	0006      	movs	r6, r0
    1a1e:	000f      	movs	r7, r1
    1a20:	9802      	ldr	r0, [sp, #8]
    1a22:	9903      	ldr	r1, [sp, #12]
    1a24:	47a8      	blx	r5
    1a26:	0002      	movs	r2, r0
    1a28:	000b      	movs	r3, r1
    1a2a:	0030      	movs	r0, r6
    1a2c:	0039      	movs	r1, r7
    1a2e:	47a0      	blx	r4
    1a30:	9a06      	ldr	r2, [sp, #24]
    1a32:	9b07      	ldr	r3, [sp, #28]
    1a34:	4e48      	ldr	r6, [pc, #288]	; (1b58 <computeKalmanGains+0x71c>)
    1a36:	47b0      	blx	r6
    1a38:	9036      	str	r0, [sp, #216]	; 0xd8
    1a3a:	9137      	str	r1, [sp, #220]	; 0xdc
    1a3c:	9a36      	ldr	r2, [sp, #216]	; 0xd8
    1a3e:	9b37      	ldr	r3, [sp, #220]	; 0xdc
    1a40:	4946      	ldr	r1, [pc, #280]	; (1b5c <computeKalmanGains+0x720>)

        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
    1a42:	4e44      	ldr	r6, [pc, #272]	; (1b54 <computeKalmanGains+0x718>)

        kgain[1][1] = (pestp[1][0] * (-pestp[0][2]) + pestp[1][2] * (pestp[0][0] + altitude_variance))/det;

        kgain[2][0] = (pestp[2][0] * (pestp[2][2] + acceleration_variance) - pestp[2][2] * pestp[2][0])/det;

        kgain[2][1] = (pestp[2][0] * (-pestp[0][2]) + pestp[2][2] * (pestp[0][0] + altitude_variance))/det;
    1a44:	628a      	str	r2, [r1, #40]	; 0x28
    1a46:	62cb      	str	r3, [r1, #44]	; 0x2c

        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
    1a48:	9a34      	ldr	r2, [sp, #208]	; 0xd0
    1a4a:	9b35      	ldr	r3, [sp, #212]	; 0xd4
    1a4c:	2000      	movs	r0, #0
    1a4e:	4944      	ldr	r1, [pc, #272]	; (1b60 <computeKalmanGains+0x724>)
    1a50:	47b0      	blx	r6
    1a52:	0002      	movs	r2, r0
    1a54:	000b      	movs	r3, r1
    1a56:	900c      	str	r0, [sp, #48]	; 0x30
    1a58:	910d      	str	r1, [sp, #52]	; 0x34
    1a5a:	9808      	ldr	r0, [sp, #32]
    1a5c:	9909      	ldr	r1, [sp, #36]	; 0x24
    1a5e:	47a8      	blx	r5
    1a60:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    1a62:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1a64:	0006      	movs	r6, r0
    1a66:	000f      	movs	r7, r1
    1a68:	9800      	ldr	r0, [sp, #0]
    1a6a:	9901      	ldr	r1, [sp, #4]
    1a6c:	47a8      	blx	r5
    1a6e:	0002      	movs	r2, r0
    1a70:	000b      	movs	r3, r1
    1a72:	0030      	movs	r0, r6
    1a74:	0039      	movs	r1, r7
    1a76:	4e37      	ldr	r6, [pc, #220]	; (1b54 <computeKalmanGains+0x718>)
    1a78:	47b0      	blx	r6
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
    1a7a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1a7c:	9b0d      	ldr	r3, [sp, #52]	; 0x34

        kgain[2][0] = (pestp[2][0] * (pestp[2][2] + acceleration_variance) - pestp[2][2] * pestp[2][0])/det;

        kgain[2][1] = (pestp[2][0] * (-pestp[0][2]) + pestp[2][2] * (pestp[0][0] + altitude_variance))/det;

        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
    1a7e:	9006      	str	r0, [sp, #24]
    1a80:	9107      	str	r1, [sp, #28]
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
    1a82:	9830      	ldr	r0, [sp, #192]	; 0xc0
    1a84:	9931      	ldr	r1, [sp, #196]	; 0xc4
    1a86:	47a8      	blx	r5
    1a88:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    1a8a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1a8c:	0006      	movs	r6, r0
    1a8e:	000f      	movs	r7, r1
    1a90:	9810      	ldr	r0, [sp, #64]	; 0x40
    1a92:	9911      	ldr	r1, [sp, #68]	; 0x44
    1a94:	47a8      	blx	r5
    1a96:	0002      	movs	r2, r0
    1a98:	000b      	movs	r3, r1
    1a9a:	0030      	movs	r0, r6
    1a9c:	0039      	movs	r1, r7
    1a9e:	4e2d      	ldr	r6, [pc, #180]	; (1b54 <computeKalmanGains+0x718>)
    1aa0:	47b0      	blx	r6
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
    1aa2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1aa4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
        kgain[2][0] = (pestp[2][0] * (pestp[2][2] + acceleration_variance) - pestp[2][2] * pestp[2][0])/det;

        kgain[2][1] = (pestp[2][0] * (-pestp[0][2]) + pestp[2][2] * (pestp[0][0] + altitude_variance))/det;

        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
    1aa6:	900a      	str	r0, [sp, #40]	; 0x28
    1aa8:	910b      	str	r1, [sp, #44]	; 0x2c
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
    1aaa:	9804      	ldr	r0, [sp, #16]
    1aac:	9916      	ldr	r1, [sp, #88]	; 0x58
    1aae:	47a8      	blx	r5
    1ab0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    1ab2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1ab4:	0006      	movs	r6, r0
    1ab6:	000f      	movs	r7, r1
    1ab8:	9802      	ldr	r0, [sp, #8]
    1aba:	9903      	ldr	r1, [sp, #12]
    1abc:	47a8      	blx	r5
    1abe:	0002      	movs	r2, r0
    1ac0:	000b      	movs	r3, r1
    1ac2:	0030      	movs	r0, r6
    1ac4:	0039      	movs	r1, r7
    1ac6:	4e23      	ldr	r6, [pc, #140]	; (1b54 <computeKalmanGains+0x718>)
    1ac8:	47b0      	blx	r6
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
    1aca:	2280      	movs	r2, #128	; 0x80
    1acc:	0612      	lsls	r2, r2, #24
    1ace:	4694      	mov	ip, r2
    1ad0:	9b39      	ldr	r3, [sp, #228]	; 0xe4
    1ad2:	9a18      	ldr	r2, [sp, #96]	; 0x60
    1ad4:	4463      	add	r3, ip
    1ad6:	932e      	str	r3, [sp, #184]	; 0xb8
    1ad8:	9b2e      	ldr	r3, [sp, #184]	; 0xb8

        kgain[2][1] = (pestp[2][0] * (-pestp[0][2]) + pestp[2][2] * (pestp[0][0] + altitude_variance))/det;

        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
    1ada:	900c      	str	r0, [sp, #48]	; 0x30
    1adc:	910d      	str	r1, [sp, #52]	; 0x34
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
    1ade:	9808      	ldr	r0, [sp, #32]
    1ae0:	9909      	ldr	r1, [sp, #36]	; 0x24
    1ae2:	47a8      	blx	r5
    1ae4:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
    1ae6:	9b2b      	ldr	r3, [sp, #172]	; 0xac
    1ae8:	47a0      	blx	r4
    1aea:	9a12      	ldr	r2, [sp, #72]	; 0x48
    1aec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    1aee:	0006      	movs	r6, r0
    1af0:	000f      	movs	r7, r1
    1af2:	9800      	ldr	r0, [sp, #0]
    1af4:	9901      	ldr	r1, [sp, #4]
    1af6:	47a8      	blx	r5
    1af8:	0002      	movs	r2, r0
    1afa:	000b      	movs	r3, r1
    1afc:	0030      	movs	r0, r6
    1afe:	0039      	movs	r1, r7
    1b00:	4e14      	ldr	r6, [pc, #80]	; (1b54 <computeKalmanGains+0x718>)
    1b02:	47b0      	blx	r6
        pest[1][1] = pestp[0][1] * (-kgain[1][0]) + pestp[1][1] - kgain[1][1]*pestp[2][1];
    1b04:	9a32      	ldr	r2, [sp, #200]	; 0xc8
    1b06:	9b33      	ldr	r3, [sp, #204]	; 0xcc
        kgain[2][1] = (pestp[2][0] * (-pestp[0][2]) + pestp[2][2] * (pestp[0][0] + altitude_variance))/det;

        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
    1b08:	9008      	str	r0, [sp, #32]
    1b0a:	9109      	str	r1, [sp, #36]	; 0x24
        pest[1][1] = pestp[0][1] * (-kgain[1][0]) + pestp[1][1] - kgain[1][1]*pestp[2][1];
    1b0c:	9826      	ldr	r0, [sp, #152]	; 0x98
    1b0e:	9927      	ldr	r1, [sp, #156]	; 0x9c
    1b10:	47a0      	blx	r4
    1b12:	4a0c      	ldr	r2, [pc, #48]	; (1b44 <computeKalmanGains+0x708>)
    1b14:	0006      	movs	r6, r0
    1b16:	000f      	movs	r7, r1
    1b18:	9828      	ldr	r0, [sp, #160]	; 0xa0
    1b1a:	9929      	ldr	r1, [sp, #164]	; 0xa4
    1b1c:	4b0a      	ldr	r3, [pc, #40]	; (1b48 <computeKalmanGains+0x70c>)
    1b1e:	47a8      	blx	r5
    1b20:	0002      	movs	r2, r0
    1b22:	000b      	movs	r3, r1
    1b24:	0030      	movs	r0, r6
    1b26:	0039      	movs	r1, r7
    1b28:	47a0      	blx	r4
    1b2a:	9a18      	ldr	r2, [sp, #96]	; 0x60
    1b2c:	0006      	movs	r6, r0
    1b2e:	000f      	movs	r7, r1
    1b30:	9830      	ldr	r0, [sp, #192]	; 0xc0
    1b32:	9931      	ldr	r1, [sp, #196]	; 0xc4
    1b34:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    1b36:	47a8      	blx	r5
    1b38:	0002      	movs	r2, r0
    1b3a:	000b      	movs	r3, r1
    1b3c:	0030      	movs	r0, r6
    1b3e:	0039      	movs	r1, r7
    1b40:	47a0      	blx	r4
    1b42:	e00f      	b.n	1b64 <computeKalmanGains+0x728>
    1b44:	d2f1a9fc 	.word	0xd2f1a9fc
    1b48:	3f80624d 	.word	0x3f80624d
    1b4c:	a0b5ed8d 	.word	0xa0b5ed8d
    1b50:	3f00c6f7 	.word	0x3f00c6f7
    1b54:	000057ad 	.word	0x000057ad
    1b58:	00004a71 	.word	0x00004a71
    1b5c:	20000618 	.word	0x20000618
    1b60:	3ff00000 	.word	0x3ff00000
    1b64:	9a12      	ldr	r2, [sp, #72]	; 0x48
    1b66:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    1b68:	0006      	movs	r6, r0
    1b6a:	000f      	movs	r7, r1
    1b6c:	9810      	ldr	r0, [sp, #64]	; 0x40
    1b6e:	9911      	ldr	r1, [sp, #68]	; 0x44
    1b70:	47a8      	blx	r5
    1b72:	0002      	movs	r2, r0
    1b74:	000b      	movs	r3, r1
    1b76:	0030      	movs	r0, r6
    1b78:	0039      	movs	r1, r7
    1b7a:	4e50      	ldr	r6, [pc, #320]	; (1cbc <computeKalmanGains+0x880>)
    1b7c:	47b0      	blx	r6
        pest[1][2] = pestp[0][2] * (-kgain[1][0]) + pestp[1][2] - kgain[1][1]*pestp[2][2];
    1b7e:	9a18      	ldr	r2, [sp, #96]	; 0x60

        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
        pest[1][1] = pestp[0][1] * (-kgain[1][0]) + pestp[1][1] - kgain[1][1]*pestp[2][1];
    1b80:	900e      	str	r0, [sp, #56]	; 0x38
    1b82:	910f      	str	r1, [sp, #60]	; 0x3c
        pest[1][2] = pestp[0][2] * (-kgain[1][0]) + pestp[1][2] - kgain[1][1]*pestp[2][2];
    1b84:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    1b86:	9804      	ldr	r0, [sp, #16]
    1b88:	9916      	ldr	r1, [sp, #88]	; 0x58
    1b8a:	47a8      	blx	r5
    1b8c:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
    1b8e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    1b90:	47a0      	blx	r4
    1b92:	9a12      	ldr	r2, [sp, #72]	; 0x48
    1b94:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    1b96:	0006      	movs	r6, r0
    1b98:	000f      	movs	r7, r1
    1b9a:	9802      	ldr	r0, [sp, #8]
    1b9c:	9903      	ldr	r1, [sp, #12]
    1b9e:	47a8      	blx	r5
    1ba0:	4c46      	ldr	r4, [pc, #280]	; (1cbc <computeKalmanGains+0x880>)
    1ba2:	0002      	movs	r2, r0
    1ba4:	000b      	movs	r3, r1
    1ba6:	0030      	movs	r0, r6
    1ba8:	0039      	movs	r1, r7
    1baa:	47a0      	blx	r4
        pest[2][0] = (1.0 - kgain[2][1]) * pestp[2][0] - kgain[2][0] * pestp[2][0];
    1bac:	9a36      	ldr	r2, [sp, #216]	; 0xd8
    1bae:	9b37      	ldr	r3, [sp, #220]	; 0xdc
        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
        pest[1][1] = pestp[0][1] * (-kgain[1][0]) + pestp[1][1] - kgain[1][1]*pestp[2][1];
        pest[1][2] = pestp[0][2] * (-kgain[1][0]) + pestp[1][2] - kgain[1][1]*pestp[2][2];
    1bb0:	9004      	str	r0, [sp, #16]
    1bb2:	9105      	str	r1, [sp, #20]
        pest[2][0] = (1.0 - kgain[2][1]) * pestp[2][0] - kgain[2][0] * pestp[2][0];
    1bb4:	2000      	movs	r0, #0
    1bb6:	4942      	ldr	r1, [pc, #264]	; (1cc0 <computeKalmanGains+0x884>)
    1bb8:	47a0      	blx	r4
    1bba:	0002      	movs	r2, r0
    1bbc:	000b      	movs	r3, r1
    1bbe:	9012      	str	r0, [sp, #72]	; 0x48
    1bc0:	9113      	str	r1, [sp, #76]	; 0x4c
    1bc2:	9800      	ldr	r0, [sp, #0]
    1bc4:	9901      	ldr	r1, [sp, #4]
    1bc6:	47a8      	blx	r5
    1bc8:	9a14      	ldr	r2, [sp, #80]	; 0x50
    1bca:	9b15      	ldr	r3, [sp, #84]	; 0x54
    1bcc:	0006      	movs	r6, r0
    1bce:	000f      	movs	r7, r1
    1bd0:	9800      	ldr	r0, [sp, #0]
    1bd2:	9901      	ldr	r1, [sp, #4]
    1bd4:	47a8      	blx	r5
    1bd6:	0002      	movs	r2, r0
    1bd8:	000b      	movs	r3, r1
    1bda:	0030      	movs	r0, r6
    1bdc:	0039      	movs	r1, r7
    1bde:	47a0      	blx	r4
    1be0:	9000      	str	r0, [sp, #0]
    1be2:	9101      	str	r1, [sp, #4]
        pest[2][1] = (1.0 - kgain[2][1]) * pestp[2][1] - kgain[2][0] * pestp[2][1];
    1be4:	9a12      	ldr	r2, [sp, #72]	; 0x48
    1be6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    1be8:	9810      	ldr	r0, [sp, #64]	; 0x40
    1bea:	9911      	ldr	r1, [sp, #68]	; 0x44
    1bec:	47a8      	blx	r5
    1bee:	9a14      	ldr	r2, [sp, #80]	; 0x50
    1bf0:	9b15      	ldr	r3, [sp, #84]	; 0x54
    1bf2:	0006      	movs	r6, r0
    1bf4:	000f      	movs	r7, r1
    1bf6:	9810      	ldr	r0, [sp, #64]	; 0x40
    1bf8:	9911      	ldr	r1, [sp, #68]	; 0x44
    1bfa:	47a8      	blx	r5
    1bfc:	0002      	movs	r2, r0
    1bfe:	000b      	movs	r3, r1
    1c00:	0030      	movs	r0, r6
    1c02:	0039      	movs	r1, r7
    1c04:	47a0      	blx	r4
        pest[2][2] = (1.0 - kgain[2][1]) * pestp[2][2] - kgain[2][0] * pestp[2][2];
    1c06:	9a12      	ldr	r2, [sp, #72]	; 0x48
    1c08:	9b13      	ldr	r3, [sp, #76]	; 0x4c
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
        pest[1][1] = pestp[0][1] * (-kgain[1][0]) + pestp[1][1] - kgain[1][1]*pestp[2][1];
        pest[1][2] = pestp[0][2] * (-kgain[1][0]) + pestp[1][2] - kgain[1][1]*pestp[2][2];
        pest[2][0] = (1.0 - kgain[2][1]) * pestp[2][0] - kgain[2][0] * pestp[2][0];
        pest[2][1] = (1.0 - kgain[2][1]) * pestp[2][1] - kgain[2][0] * pestp[2][1];
    1c0a:	9010      	str	r0, [sp, #64]	; 0x40
    1c0c:	9111      	str	r1, [sp, #68]	; 0x44
        pest[2][2] = (1.0 - kgain[2][1]) * pestp[2][2] - kgain[2][0] * pestp[2][2];
    1c0e:	9802      	ldr	r0, [sp, #8]
    1c10:	9903      	ldr	r1, [sp, #12]
    1c12:	47a8      	blx	r5
    1c14:	9a14      	ldr	r2, [sp, #80]	; 0x50
    1c16:	9b15      	ldr	r3, [sp, #84]	; 0x54
    1c18:	0006      	movs	r6, r0
    1c1a:	000f      	movs	r7, r1
    1c1c:	9802      	ldr	r0, [sp, #8]
    1c1e:	9903      	ldr	r1, [sp, #12]
    1c20:	47a8      	blx	r5
    1c22:	000b      	movs	r3, r1
    1c24:	0002      	movs	r2, r0
    1c26:	0039      	movs	r1, r7
    1c28:	0030      	movs	r0, r6
    1c2a:	47a0      	blx	r4
         * time through the mill. Because I have noticed very early convergance
         * in a few cases (< 20 iterations) I am delaying this for at least
         * 100 iterations.
         */
        notdone = 0;
        k++;
    1c2c:	2400      	movs	r4, #0
    1c2e:	9b38      	ldr	r3, [sp, #224]	; 0xe0
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
        pest[1][1] = pestp[0][1] * (-kgain[1][0]) + pestp[1][1] - kgain[1][1]*pestp[2][1];
        pest[1][2] = pestp[0][2] * (-kgain[1][0]) + pestp[1][2] - kgain[1][1]*pestp[2][2];
        pest[2][0] = (1.0 - kgain[2][1]) * pestp[2][0] - kgain[2][0] * pestp[2][0];
        pest[2][1] = (1.0 - kgain[2][1]) * pestp[2][1] - kgain[2][0] * pestp[2][1];
        pest[2][2] = (1.0 - kgain[2][1]) * pestp[2][2] - kgain[2][0] * pestp[2][2];
    1c30:	9002      	str	r0, [sp, #8]
    1c32:	9103      	str	r1, [sp, #12]
         * time through the mill. Because I have noticed very early convergance
         * in a few cases (< 20 iterations) I am delaying this for at least
         * 100 iterations.
         */
        notdone = 0;
        k++;
    1c34:	3301      	adds	r3, #1
    1c36:	9338      	str	r3, [sp, #224]	; 0xe0
        for( i = 0; i <= 2; i++)
            for( j = 0; j <= 1; j++) {
                if( (kgain[i][j] - lastkgain[i][j])/lastkgain[i][j] > 0.00001)
    1c38:	4b22      	ldr	r3, [pc, #136]	; (1cc4 <computeKalmanGains+0x888>)
        /* Check for convergance. Criteria is less than .001% change from last
         * time through the mill. Because I have noticed very early convergance
         * in a few cases (< 20 iterations) I am delaying this for at least
         * 100 iterations.
         */
        notdone = 0;
    1c3a:	9414      	str	r4, [sp, #80]	; 0x50
        k++;
        for( i = 0; i <= 2; i++)
            for( j = 0; j <= 1; j++) {
                if( (kgain[i][j] - lastkgain[i][j])/lastkgain[i][j] > 0.00001)
    1c3c:	9326      	str	r3, [sp, #152]	; 0x98
    1c3e:	4b1f      	ldr	r3, [pc, #124]	; (1cbc <computeKalmanGains+0x880>)
    1c40:	9328      	str	r3, [sp, #160]	; 0xa0
    1c42:	ab40      	add	r3, sp, #256	; 0x100
    1c44:	18e5      	adds	r5, r4, r3

        pestp[2][2] = pestp[2][2] + model_variance;
        /*
          Calculate Kalman Gain
        */
        det = (pestp[0][0]+altitude_variance)*(pestp[2][2] + acceleration_variance) - pestp[2][0] * pestp[0][2];
    1c46:	2300      	movs	r3, #0
    1c48:	9516      	str	r5, [sp, #88]	; 0x58
    1c4a:	9312      	str	r3, [sp, #72]	; 0x48
         */
        notdone = 0;
        k++;
        for( i = 0; i <= 2; i++)
            for( j = 0; j <= 1; j++) {
                if( (kgain[i][j] - lastkgain[i][j])/lastkgain[i][j] > 0.00001)
    1c4c:	9b12      	ldr	r3, [sp, #72]	; 0x48
    1c4e:	9a26      	ldr	r2, [sp, #152]	; 0x98
    1c50:	18e3      	adds	r3, r4, r3
    1c52:	189b      	adds	r3, r3, r2
    1c54:	681a      	ldr	r2, [r3, #0]
    1c56:	685b      	ldr	r3, [r3, #4]
    1c58:	9218      	str	r2, [sp, #96]	; 0x60
    1c5a:	9319      	str	r3, [sp, #100]	; 0x64
    1c5c:	9818      	ldr	r0, [sp, #96]	; 0x60
    1c5e:	9919      	ldr	r1, [sp, #100]	; 0x64
    1c60:	9b16      	ldr	r3, [sp, #88]	; 0x58
    1c62:	9d28      	ldr	r5, [sp, #160]	; 0xa0
    1c64:	681e      	ldr	r6, [r3, #0]
    1c66:	685f      	ldr	r7, [r3, #4]
    1c68:	0032      	movs	r2, r6
    1c6a:	003b      	movs	r3, r7
    1c6c:	47a8      	blx	r5
    1c6e:	0032      	movs	r2, r6
    1c70:	003b      	movs	r3, r7
    1c72:	4d15      	ldr	r5, [pc, #84]	; (1cc8 <computeKalmanGains+0x88c>)
    1c74:	47a8      	blx	r5
    1c76:	4b15      	ldr	r3, [pc, #84]	; (1ccc <computeKalmanGains+0x890>)
    1c78:	4a15      	ldr	r2, [pc, #84]	; (1cd0 <computeKalmanGains+0x894>)
    1c7a:	4e16      	ldr	r6, [pc, #88]	; (1cd4 <computeKalmanGains+0x898>)
    1c7c:	47b0      	blx	r6
                    notdone++;
    1c7e:	1e43      	subs	r3, r0, #1
    1c80:	4198      	sbcs	r0, r3
    1c82:	9b14      	ldr	r3, [sp, #80]	; 0x50
                lastkgain[i][j] = kgain[i][j];
    1c84:	9916      	ldr	r1, [sp, #88]	; 0x58
        notdone = 0;
        k++;
        for( i = 0; i <= 2; i++)
            for( j = 0; j <= 1; j++) {
                if( (kgain[i][j] - lastkgain[i][j])/lastkgain[i][j] > 0.00001)
                    notdone++;
    1c86:	181b      	adds	r3, r3, r0
    1c88:	9314      	str	r3, [sp, #80]	; 0x50
                lastkgain[i][j] = kgain[i][j];
    1c8a:	9a18      	ldr	r2, [sp, #96]	; 0x60
    1c8c:	9b19      	ldr	r3, [sp, #100]	; 0x64
    1c8e:	c10c      	stmia	r1!, {r2, r3}
    1c90:	9b12      	ldr	r3, [sp, #72]	; 0x48
    1c92:	9116      	str	r1, [sp, #88]	; 0x58
    1c94:	3308      	adds	r3, #8
    1c96:	9312      	str	r3, [sp, #72]	; 0x48
         * 100 iterations.
         */
        notdone = 0;
        k++;
        for( i = 0; i <= 2; i++)
            for( j = 0; j <= 1; j++) {
    1c98:	2b10      	cmp	r3, #16
    1c9a:	d1d7      	bne.n	1c4c <computeKalmanGains+0x810>
    1c9c:	3410      	adds	r4, #16
         * in a few cases (< 20 iterations) I am delaying this for at least
         * 100 iterations.
         */
        notdone = 0;
        k++;
        for( i = 0; i <= 2; i++)
    1c9e:	2c30      	cmp	r4, #48	; 0x30
    1ca0:	d1cf      	bne.n	1c42 <computeKalmanGains+0x806>
            for( j = 0; j <= 1; j++) {
                if( (kgain[i][j] - lastkgain[i][j])/lastkgain[i][j] > 0.00001)
                    notdone++;
                lastkgain[i][j] = kgain[i][j];
            }
        if( notdone || k < 100)
    1ca2:	9b14      	ldr	r3, [sp, #80]	; 0x50
    1ca4:	2b00      	cmp	r3, #0
    1ca6:	d001      	beq.n	1cac <computeKalmanGains+0x870>
    1ca8:	f7ff fc2e 	bl	1508 <computeKalmanGains+0xcc>
    1cac:	9b38      	ldr	r3, [sp, #224]	; 0xe0
    1cae:	2b63      	cmp	r3, #99	; 0x63
    1cb0:	dc01      	bgt.n	1cb6 <computeKalmanGains+0x87a>
    1cb2:	f7ff fc29 	bl	1508 <computeKalmanGains+0xcc>
            continue;
        else
            break;
    }
}
    1cb6:	b04d      	add	sp, #308	; 0x134
    1cb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1cba:	46c0      	nop			; (mov r8, r8)
    1cbc:	000057ad 	.word	0x000057ad
    1cc0:	3ff00000 	.word	0x3ff00000
    1cc4:	20000618 	.word	0x20000618
    1cc8:	00004a71 	.word	0x00004a71
    1ccc:	3ee4f8b5 	.word	0x3ee4f8b5
    1cd0:	88e368f1 	.word	0x88e368f1
    1cd4:	00003b51 	.word	0x00003b51

00001cd8 <computeKalmanStates>:

void computeKalmanStates() {
    1cd8:	b5f0      	push	{r4, r5, r6, r7, lr}

    double alt_inovation, accel_inovation;


    double acceleration = (sample.accelZ - offsets.gravityOffset) * 32.17417;
    1cda:	4d7e      	ldr	r5, [pc, #504]	; (1ed4 <computeKalmanStates+0x1fc>)
        else
            break;
    }
}

void computeKalmanStates() {
    1cdc:	b08f      	sub	sp, #60	; 0x3c

    double alt_inovation, accel_inovation;


    double acceleration = (sample.accelZ - offsets.gravityOffset) * 32.17417;
    1cde:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    1ce0:	4b7d      	ldr	r3, [pc, #500]	; (1ed8 <computeKalmanStates+0x200>)
    1ce2:	4798      	blx	r3
    1ce4:	4b7d      	ldr	r3, [pc, #500]	; (1edc <computeKalmanStates+0x204>)
    1ce6:	4c7e      	ldr	r4, [pc, #504]	; (1ee0 <computeKalmanStates+0x208>)
    1ce8:	689a      	ldr	r2, [r3, #8]
    1cea:	68db      	ldr	r3, [r3, #12]
    1cec:	47a0      	blx	r4
    1cee:	4a7d      	ldr	r2, [pc, #500]	; (1ee4 <computeKalmanStates+0x20c>)
    1cf0:	4b7d      	ldr	r3, [pc, #500]	; (1ee8 <computeKalmanStates+0x210>)
    1cf2:	4e7e      	ldr	r6, [pc, #504]	; (1eec <computeKalmanStates+0x214>)
    1cf4:	47b0      	blx	r6
    double pressure = sample.altitudefeet;
    1cf6:	6c2e      	ldr	r6, [r5, #64]	; 0x40
    1cf8:	6c6f      	ldr	r7, [r5, #68]	; 0x44

    if (altitude == 0) {
    1cfa:	4d7d      	ldr	r5, [pc, #500]	; (1ef0 <computeKalmanStates+0x218>)
void computeKalmanStates() {

    double alt_inovation, accel_inovation;


    double acceleration = (sample.accelZ - offsets.gravityOffset) * 32.17417;
    1cfc:	9000      	str	r0, [sp, #0]
    1cfe:	9101      	str	r1, [sp, #4]
    double pressure = sample.altitudefeet;

    if (altitude == 0) {
    1d00:	6828      	ldr	r0, [r5, #0]
    1d02:	6869      	ldr	r1, [r5, #4]
    1d04:	4c7b      	ldr	r4, [pc, #492]	; (1ef4 <computeKalmanStates+0x21c>)
    1d06:	2200      	movs	r2, #0
    1d08:	2300      	movs	r3, #0
    1d0a:	47a0      	blx	r4
    1d0c:	4c74      	ldr	r4, [pc, #464]	; (1ee0 <computeKalmanStates+0x208>)
    1d0e:	2800      	cmp	r0, #0
    1d10:	d001      	beq.n	1d16 <computeKalmanStates+0x3e>
        altitude = pressure;
    1d12:	602e      	str	r6, [r5, #0]
    1d14:	606f      	str	r7, [r5, #4]
    }

    /* Compute the innovations */
    alt_inovation = pressure - estp[0];
    1d16:	4b78      	ldr	r3, [pc, #480]	; (1ef8 <computeKalmanStates+0x220>)
    1d18:	0030      	movs	r0, r6
    1d1a:	681a      	ldr	r2, [r3, #0]
    1d1c:	685b      	ldr	r3, [r3, #4]
    1d1e:	0039      	movs	r1, r7
    1d20:	47a0      	blx	r4
    accel_inovation = acceleration - estp[2];
    1d22:	4b75      	ldr	r3, [pc, #468]	; (1ef8 <computeKalmanStates+0x220>)
    if (altitude == 0) {
        altitude = pressure;
    }

    /* Compute the innovations */
    alt_inovation = pressure - estp[0];
    1d24:	9006      	str	r0, [sp, #24]
    1d26:	9107      	str	r1, [sp, #28]
    accel_inovation = acceleration - estp[2];
    1d28:	691a      	ldr	r2, [r3, #16]
    1d2a:	695b      	ldr	r3, [r3, #20]
    1d2c:	9800      	ldr	r0, [sp, #0]
    1d2e:	9901      	ldr	r1, [sp, #4]
    1d30:	47a0      	blx	r4


    /* Propagate state */
    estp[0] = phi[0][0] * altitude + phi[0][1] *velocity + phi[0][2] * accel;
    1d32:	4b6f      	ldr	r3, [pc, #444]	; (1ef0 <computeKalmanStates+0x218>)
    1d34:	4d6d      	ldr	r5, [pc, #436]	; (1eec <computeKalmanStates+0x214>)
    1d36:	685c      	ldr	r4, [r3, #4]
    1d38:	681b      	ldr	r3, [r3, #0]
    1d3a:	9300      	str	r3, [sp, #0]
    1d3c:	9401      	str	r4, [sp, #4]
    1d3e:	4b6f      	ldr	r3, [pc, #444]	; (1efc <computeKalmanStates+0x224>)
        altitude = pressure;
    }

    /* Compute the innovations */
    alt_inovation = pressure - estp[0];
    accel_inovation = acceleration - estp[2];
    1d40:	9008      	str	r0, [sp, #32]
    1d42:	9109      	str	r1, [sp, #36]	; 0x24


    /* Propagate state */
    estp[0] = phi[0][0] * altitude + phi[0][1] *velocity + phi[0][2] * accel;
    1d44:	685c      	ldr	r4, [r3, #4]
    1d46:	681b      	ldr	r3, [r3, #0]
    1d48:	9800      	ldr	r0, [sp, #0]
    1d4a:	9901      	ldr	r1, [sp, #4]
    1d4c:	9302      	str	r3, [sp, #8]
    1d4e:	9403      	str	r4, [sp, #12]
    1d50:	4b6b      	ldr	r3, [pc, #428]	; (1f00 <computeKalmanStates+0x228>)
    1d52:	685c      	ldr	r4, [r3, #4]
    1d54:	681b      	ldr	r3, [r3, #0]
    1d56:	9304      	str	r3, [sp, #16]
    1d58:	9405      	str	r4, [sp, #20]
    1d5a:	4c6a      	ldr	r4, [pc, #424]	; (1f04 <computeKalmanStates+0x22c>)
    1d5c:	6822      	ldr	r2, [r4, #0]
    1d5e:	6863      	ldr	r3, [r4, #4]
    1d60:	47a8      	blx	r5
    1d62:	68a2      	ldr	r2, [r4, #8]
    1d64:	68e3      	ldr	r3, [r4, #12]
    1d66:	0006      	movs	r6, r0
    1d68:	000f      	movs	r7, r1
    1d6a:	9802      	ldr	r0, [sp, #8]
    1d6c:	9903      	ldr	r1, [sp, #12]
    1d6e:	47a8      	blx	r5
    1d70:	0002      	movs	r2, r0
    1d72:	000b      	movs	r3, r1
    1d74:	0030      	movs	r0, r6
    1d76:	0039      	movs	r1, r7
    1d78:	4e63      	ldr	r6, [pc, #396]	; (1f08 <computeKalmanStates+0x230>)
    1d7a:	47b0      	blx	r6
    1d7c:	6922      	ldr	r2, [r4, #16]
    1d7e:	6963      	ldr	r3, [r4, #20]
    1d80:	0006      	movs	r6, r0
    1d82:	000f      	movs	r7, r1
    1d84:	9804      	ldr	r0, [sp, #16]
    1d86:	9905      	ldr	r1, [sp, #20]
    1d88:	47a8      	blx	r5
    1d8a:	0002      	movs	r2, r0
    1d8c:	000b      	movs	r3, r1
    1d8e:	0030      	movs	r0, r6
    1d90:	0039      	movs	r1, r7
    1d92:	4e5d      	ldr	r6, [pc, #372]	; (1f08 <computeKalmanStates+0x230>)
    1d94:	47b0      	blx	r6
    1d96:	900a      	str	r0, [sp, #40]	; 0x28
    1d98:	910b      	str	r1, [sp, #44]	; 0x2c
    1d9a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    1d9c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1d9e:	4956      	ldr	r1, [pc, #344]	; (1ef8 <computeKalmanStates+0x220>)
    1da0:	600a      	str	r2, [r1, #0]
    1da2:	604b      	str	r3, [r1, #4]
    estp[1] = phi[1][0] * altitude + phi[1][1] * velocity + phi[1][2] * accel;
    1da4:	69a2      	ldr	r2, [r4, #24]
    1da6:	69e3      	ldr	r3, [r4, #28]
    1da8:	9800      	ldr	r0, [sp, #0]
    1daa:	9901      	ldr	r1, [sp, #4]
    1dac:	47a8      	blx	r5
    1dae:	6a22      	ldr	r2, [r4, #32]
    1db0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    1db2:	0006      	movs	r6, r0
    1db4:	000f      	movs	r7, r1
    1db6:	9802      	ldr	r0, [sp, #8]
    1db8:	9903      	ldr	r1, [sp, #12]
    1dba:	47a8      	blx	r5
    1dbc:	0002      	movs	r2, r0
    1dbe:	000b      	movs	r3, r1
    1dc0:	0030      	movs	r0, r6
    1dc2:	0039      	movs	r1, r7
    1dc4:	4e50      	ldr	r6, [pc, #320]	; (1f08 <computeKalmanStates+0x230>)
    1dc6:	47b0      	blx	r6
    1dc8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    1dca:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    1dcc:	0006      	movs	r6, r0
    1dce:	000f      	movs	r7, r1
    1dd0:	9804      	ldr	r0, [sp, #16]
    1dd2:	9905      	ldr	r1, [sp, #20]
    1dd4:	47a8      	blx	r5
    1dd6:	0002      	movs	r2, r0
    1dd8:	000b      	movs	r3, r1
    1dda:	0030      	movs	r0, r6
    1ddc:	0039      	movs	r1, r7
    1dde:	4e4a      	ldr	r6, [pc, #296]	; (1f08 <computeKalmanStates+0x230>)
    1de0:	47b0      	blx	r6
    1de2:	900c      	str	r0, [sp, #48]	; 0x30
    1de4:	910d      	str	r1, [sp, #52]	; 0x34
    1de6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1de8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1dea:	4943      	ldr	r1, [pc, #268]	; (1ef8 <computeKalmanStates+0x220>)
    1dec:	608a      	str	r2, [r1, #8]
    1dee:	60cb      	str	r3, [r1, #12]
    estp[2] = phi[2][0] * altitude + phi[2][1] * velocity + phi[2][2] * accel;
    1df0:	6b22      	ldr	r2, [r4, #48]	; 0x30
    1df2:	6b63      	ldr	r3, [r4, #52]	; 0x34
    1df4:	9800      	ldr	r0, [sp, #0]
    1df6:	9901      	ldr	r1, [sp, #4]
    1df8:	47a8      	blx	r5
    1dfa:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    1dfc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    1dfe:	0006      	movs	r6, r0
    1e00:	000f      	movs	r7, r1
    1e02:	9802      	ldr	r0, [sp, #8]
    1e04:	9903      	ldr	r1, [sp, #12]
    1e06:	47a8      	blx	r5
    1e08:	0002      	movs	r2, r0
    1e0a:	000b      	movs	r3, r1
    1e0c:	0030      	movs	r0, r6
    1e0e:	0039      	movs	r1, r7
    1e10:	4e3d      	ldr	r6, [pc, #244]	; (1f08 <computeKalmanStates+0x230>)
    1e12:	47b0      	blx	r6
    1e14:	6c22      	ldr	r2, [r4, #64]	; 0x40
    1e16:	6c63      	ldr	r3, [r4, #68]	; 0x44
    1e18:	0006      	movs	r6, r0
    1e1a:	000f      	movs	r7, r1
    1e1c:	9804      	ldr	r0, [sp, #16]
    1e1e:	9905      	ldr	r1, [sp, #20]
    1e20:	47a8      	blx	r5
    1e22:	4c39      	ldr	r4, [pc, #228]	; (1f08 <computeKalmanStates+0x230>)
    1e24:	0002      	movs	r2, r0
    1e26:	000b      	movs	r3, r1
    1e28:	0030      	movs	r0, r6
    1e2a:	0039      	movs	r1, r7
    1e2c:	47a0      	blx	r4
    1e2e:	0003      	movs	r3, r0
    1e30:	000c      	movs	r4, r1
    1e32:	4a31      	ldr	r2, [pc, #196]	; (1ef8 <computeKalmanStates+0x220>)
    1e34:	9000      	str	r0, [sp, #0]
    1e36:	9101      	str	r1, [sp, #4]
    1e38:	6113      	str	r3, [r2, #16]
    1e3a:	6154      	str	r4, [r2, #20]

    /*
    Update state
    */
    altitude = estp[0] + kgain[0][0] * alt_inovation + kgain[0][1] * accel_inovation;
    1e3c:	4c33      	ldr	r4, [pc, #204]	; (1f0c <computeKalmanStates+0x234>)
    1e3e:	6822      	ldr	r2, [r4, #0]
    1e40:	6863      	ldr	r3, [r4, #4]
    1e42:	9806      	ldr	r0, [sp, #24]
    1e44:	9907      	ldr	r1, [sp, #28]
    1e46:	47a8      	blx	r5
    1e48:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    1e4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1e4c:	4e2e      	ldr	r6, [pc, #184]	; (1f08 <computeKalmanStates+0x230>)
    1e4e:	47b0      	blx	r6
    1e50:	68a2      	ldr	r2, [r4, #8]
    1e52:	68e3      	ldr	r3, [r4, #12]
    1e54:	0006      	movs	r6, r0
    1e56:	000f      	movs	r7, r1
    1e58:	9808      	ldr	r0, [sp, #32]
    1e5a:	9909      	ldr	r1, [sp, #36]	; 0x24
    1e5c:	47a8      	blx	r5
    1e5e:	0002      	movs	r2, r0
    1e60:	000b      	movs	r3, r1
    1e62:	0030      	movs	r0, r6
    1e64:	0039      	movs	r1, r7
    1e66:	4e28      	ldr	r6, [pc, #160]	; (1f08 <computeKalmanStates+0x230>)
    1e68:	47b0      	blx	r6
    1e6a:	4b21      	ldr	r3, [pc, #132]	; (1ef0 <computeKalmanStates+0x218>)
    1e6c:	6018      	str	r0, [r3, #0]
    1e6e:	6059      	str	r1, [r3, #4]
    velocity = estp[1] + kgain[1][0] * alt_inovation + kgain[1][1] * accel_inovation;
    1e70:	6922      	ldr	r2, [r4, #16]
    1e72:	6963      	ldr	r3, [r4, #20]
    1e74:	9806      	ldr	r0, [sp, #24]
    1e76:	9907      	ldr	r1, [sp, #28]
    1e78:	47a8      	blx	r5
    1e7a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1e7c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1e7e:	47b0      	blx	r6
    1e80:	69a2      	ldr	r2, [r4, #24]
    1e82:	69e3      	ldr	r3, [r4, #28]
    1e84:	0006      	movs	r6, r0
    1e86:	000f      	movs	r7, r1
    1e88:	9808      	ldr	r0, [sp, #32]
    1e8a:	9909      	ldr	r1, [sp, #36]	; 0x24
    1e8c:	47a8      	blx	r5
    1e8e:	0002      	movs	r2, r0
    1e90:	000b      	movs	r3, r1
    1e92:	0030      	movs	r0, r6
    1e94:	0039      	movs	r1, r7
    1e96:	4e1c      	ldr	r6, [pc, #112]	; (1f08 <computeKalmanStates+0x230>)
    1e98:	47b0      	blx	r6
    1e9a:	4b18      	ldr	r3, [pc, #96]	; (1efc <computeKalmanStates+0x224>)
    1e9c:	6018      	str	r0, [r3, #0]
    1e9e:	6059      	str	r1, [r3, #4]
    accel =    estp[2] + kgain[2][0] * alt_inovation + kgain[2][1] * accel_inovation;
    1ea0:	6a22      	ldr	r2, [r4, #32]
    1ea2:	6a63      	ldr	r3, [r4, #36]	; 0x24
    1ea4:	9806      	ldr	r0, [sp, #24]
    1ea6:	9907      	ldr	r1, [sp, #28]
    1ea8:	47a8      	blx	r5
    1eaa:	9a00      	ldr	r2, [sp, #0]
    1eac:	9b01      	ldr	r3, [sp, #4]
    1eae:	47b0      	blx	r6
    1eb0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    1eb2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    1eb4:	0006      	movs	r6, r0
    1eb6:	000f      	movs	r7, r1
    1eb8:	9808      	ldr	r0, [sp, #32]
    1eba:	9909      	ldr	r1, [sp, #36]	; 0x24
    1ebc:	47a8      	blx	r5
    1ebe:	4c12      	ldr	r4, [pc, #72]	; (1f08 <computeKalmanStates+0x230>)
    1ec0:	0002      	movs	r2, r0
    1ec2:	000b      	movs	r3, r1
    1ec4:	0030      	movs	r0, r6
    1ec6:	0039      	movs	r1, r7
    1ec8:	47a0      	blx	r4
    1eca:	4b0d      	ldr	r3, [pc, #52]	; (1f00 <computeKalmanStates+0x228>)
    1ecc:	6018      	str	r0, [r3, #0]
    1ece:	6059      	str	r1, [r3, #4]

}
    1ed0:	b00f      	add	sp, #60	; 0x3c
    1ed2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1ed4:	20000790 	.word	0x20000790
    1ed8:	00005ff5 	.word	0x00005ff5
    1edc:	200004d0 	.word	0x200004d0
    1ee0:	000057ad 	.word	0x000057ad
    1ee4:	33daf8df 	.word	0x33daf8df
    1ee8:	4040164b 	.word	0x4040164b
    1eec:	000052b9 	.word	0x000052b9
    1ef0:	20000660 	.word	0x20000660
    1ef4:	00003b1d 	.word	0x00003b1d
    1ef8:	20000668 	.word	0x20000668
    1efc:	20000658 	.word	0x20000658
    1f00:	20000650 	.word	0x20000650
    1f04:	20000010 	.word	0x20000010
    1f08:	00004419 	.word	0x00004419
    1f0c:	20000618 	.word	0x20000618

00001f10 <makePage>:
u8_t pageLocation;

bool pageReady;


void makePage(u8_t bytesToWrite, u8_t* data) {
    1f10:	b5f0      	push	{r4, r5, r6, r7, lr}


    u8_t location = pageLocation;
    1f12:	4a1f      	ldr	r2, [pc, #124]	; (1f90 <makePage+0x80>)
    1f14:	7815      	ldrb	r5, [r2, #0]
    u8_t bytesWritten = 0;

    if ((location + bytesToWrite) > 0xFF) {
    1f16:	1943      	adds	r3, r0, r5
    1f18:	2bff      	cmp	r3, #255	; 0xff
    1f1a:	dc03      	bgt.n	1f24 <makePage+0x14>
    1f1c:	2300      	movs	r3, #0
            pageLocation = dataByte + 1;
        }
        pageReady = true;

    } else {
        for (u16_t dataByte = 0; dataByte <= bytesToWrite; ++dataByte) {
    1f1e:	b280      	uxth	r0, r0
            pageBuffer[(dataByte + location)] = data[dataByte];
    1f20:	4c1c      	ldr	r4, [pc, #112]	; (1f94 <makePage+0x84>)
    1f22:	e029      	b.n	1f78 <makePage+0x68>
    1f24:	2300      	movs	r3, #0
    1f26:	4e1b      	ldr	r6, [pc, #108]	; (1f94 <makePage+0x84>)

    u8_t location = pageLocation;
    u8_t bytesWritten = 0;

    if ((location + bytesToWrite) > 0xFF) {
        for (u16_t dataByte = 0; (dataByte + location) <= 0xFF; ++dataByte) {
    1f28:	195f      	adds	r7, r3, r5
    1f2a:	b2dc      	uxtb	r4, r3
    1f2c:	46b4      	mov	ip, r6
    1f2e:	2fff      	cmp	r7, #255	; 0xff
    1f30:	dc04      	bgt.n	1f3c <makePage+0x2c>
            pageBuffer[(dataByte + location)] = data[dataByte];
    1f32:	5ccc      	ldrb	r4, [r1, r3]

    u8_t location = pageLocation;
    u8_t bytesWritten = 0;

    if ((location + bytesToWrite) > 0xFF) {
        for (u16_t dataByte = 0; (dataByte + location) <= 0xFF; ++dataByte) {
    1f34:	3301      	adds	r3, #1
            pageBuffer[(dataByte + location)] = data[dataByte];
    1f36:	55f4      	strb	r4, [r6, r7]

    u8_t location = pageLocation;
    u8_t bytesWritten = 0;

    if ((location + bytesToWrite) > 0xFF) {
        for (u16_t dataByte = 0; (dataByte + location) <= 0xFF; ++dataByte) {
    1f38:	b29b      	uxth	r3, r3
    1f3a:	e7f5      	b.n	1f28 <makePage+0x18>
            pageBuffer[(dataByte + location)] = data[dataByte];
            bytesWritten++;
        }
        pageLocation = 0x00;
    1f3c:	2300      	movs	r3, #0
        for(u16_t i = 0; i <= 0xFF; ++i) {
            pageToWrite[i] = pageBuffer[i];
    1f3e:	4f16      	ldr	r7, [pc, #88]	; (1f98 <makePage+0x88>)
    if ((location + bytesToWrite) > 0xFF) {
        for (u16_t dataByte = 0; (dataByte + location) <= 0xFF; ++dataByte) {
            pageBuffer[(dataByte + location)] = data[dataByte];
            bytesWritten++;
        }
        pageLocation = 0x00;
    1f40:	7013      	strb	r3, [r2, #0]
        for(u16_t i = 0; i <= 0xFF; ++i) {
            pageToWrite[i] = pageBuffer[i];
    1f42:	4665      	mov	r5, ip
    1f44:	18ed      	adds	r5, r5, r3
    1f46:	782e      	ldrb	r6, [r5, #0]
    1f48:	54fe      	strb	r6, [r7, r3]
            pageBuffer[i] = 0;
    1f4a:	2600      	movs	r6, #0
    1f4c:	702e      	strb	r6, [r5, #0]
        for (u16_t dataByte = 0; (dataByte + location) <= 0xFF; ++dataByte) {
            pageBuffer[(dataByte + location)] = data[dataByte];
            bytesWritten++;
        }
        pageLocation = 0x00;
        for(u16_t i = 0; i <= 0xFF; ++i) {
    1f4e:	2580      	movs	r5, #128	; 0x80
    1f50:	3301      	adds	r3, #1
    1f52:	006d      	lsls	r5, r5, #1
    1f54:	42ab      	cmp	r3, r5
    1f56:	d1f4      	bne.n	1f42 <makePage+0x32>
    1f58:	2300      	movs	r3, #0
    1f5a:	1c5d      	adds	r5, r3, #1
            pageToWrite[i] = pageBuffer[i];
            pageBuffer[i] = 0;
        }
        for (u16_t dataByte = 0; bytesWritten < bytesToWrite; ++dataByte) {
    1f5c:	4284      	cmp	r4, r0
    1f5e:	d207      	bcs.n	1f70 <makePage+0x60>
            pageBuffer[dataByte] = data[bytesWritten];
    1f60:	4667      	mov	r7, ip
    1f62:	5d0e      	ldrb	r6, [r1, r4]
            bytesWritten++;
    1f64:	3401      	adds	r4, #1
        for(u16_t i = 0; i <= 0xFF; ++i) {
            pageToWrite[i] = pageBuffer[i];
            pageBuffer[i] = 0;
        }
        for (u16_t dataByte = 0; bytesWritten < bytesToWrite; ++dataByte) {
            pageBuffer[dataByte] = data[bytesWritten];
    1f66:	54fe      	strb	r6, [r7, r3]
            bytesWritten++;
    1f68:	b2e4      	uxtb	r4, r4
            pageLocation = dataByte + 1;
    1f6a:	7015      	strb	r5, [r2, #0]
    1f6c:	002b      	movs	r3, r5
    1f6e:	e7f4      	b.n	1f5a <makePage+0x4a>
        }
        pageReady = true;
    1f70:	2201      	movs	r2, #1
    1f72:	4b0a      	ldr	r3, [pc, #40]	; (1f9c <makePage+0x8c>)
    1f74:	701a      	strb	r2, [r3, #0]
    1f76:	e009      	b.n	1f8c <makePage+0x7c>

    } else {
        for (u16_t dataByte = 0; dataByte <= bytesToWrite; ++dataByte) {
    1f78:	4283      	cmp	r3, r0
    1f7a:	d807      	bhi.n	1f8c <makePage+0x7c>
            pageBuffer[(dataByte + location)] = data[dataByte];
    1f7c:	5ccf      	ldrb	r7, [r1, r3]
    1f7e:	18e6      	adds	r6, r4, r3
    1f80:	5577      	strb	r7, [r6, r5]
            bytesWritten++;
            pageLocation = location + dataByte;
    1f82:	18ee      	adds	r6, r5, r3
            pageLocation = dataByte + 1;
        }
        pageReady = true;

    } else {
        for (u16_t dataByte = 0; dataByte <= bytesToWrite; ++dataByte) {
    1f84:	3301      	adds	r3, #1
            pageBuffer[(dataByte + location)] = data[dataByte];
            bytesWritten++;
            pageLocation = location + dataByte;
    1f86:	7016      	strb	r6, [r2, #0]
            pageLocation = dataByte + 1;
        }
        pageReady = true;

    } else {
        for (u16_t dataByte = 0; dataByte <= bytesToWrite; ++dataByte) {
    1f88:	b29b      	uxth	r3, r3
    1f8a:	e7f5      	b.n	1f78 <makePage+0x68>
            pageBuffer[(dataByte + location)] = data[dataByte];
            bytesWritten++;
            pageLocation = location + dataByte;
        }
    }
}
    1f8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1f8e:	46c0      	nop			; (mov r8, r8)
    1f90:	2000078c 	.word	0x2000078c
    1f94:	20000509 	.word	0x20000509
    1f98:	20000680 	.word	0x20000680
    1f9c:	20000780 	.word	0x20000780

00001fa0 <logFlight>:


void logFlight() {
    1fa0:	b51f      	push	{r0, r1, r2, r3, r4, lr}

    u8_t bytesToSend = 16;
    u8_t dataToSend[16];

    dataToSend[0] = FLIGHT_LOG;
    1fa2:	2346      	movs	r3, #70	; 0x46
    1fa4:	466a      	mov	r2, sp
    1fa6:	7013      	strb	r3, [r2, #0]
    dataToSend[1] = 0;
    1fa8:	2300      	movs	r3, #0

    dataToSend[2] = offsets.offsetBufferTime >> 0;
    1faa:	4669      	mov	r1, sp
    dataToSend[3] = offsets.offsetBufferTime >> 8;
    1fac:	4668      	mov	r0, sp

    u8_t bytesToSend = 16;
    u8_t dataToSend[16];

    dataToSend[0] = FLIGHT_LOG;
    dataToSend[1] = 0;
    1fae:	7053      	strb	r3, [r2, #1]

    dataToSend[2] = offsets.offsetBufferTime >> 0;
    1fb0:	4a10      	ldr	r2, [pc, #64]	; (1ff4 <logFlight+0x54>)
    1fb2:	6813      	ldr	r3, [r2, #0]
    1fb4:	708b      	strb	r3, [r1, #2]
    dataToSend[3] = offsets.offsetBufferTime >> 8;
    1fb6:	0a19      	lsrs	r1, r3, #8
    1fb8:	70c1      	strb	r1, [r0, #3]
    dataToSend[4] = offsets.offsetBufferTime >> 16;
    1fba:	0c19      	lsrs	r1, r3, #16
    dataToSend[5] = offsets.offsetBufferTime >> 24;
    1fbc:	0e1b      	lsrs	r3, r3, #24
    1fbe:	7143      	strb	r3, [r0, #5]

    dataToSend[6] = offsets.groundOffset >> 0;
    1fc0:	6993      	ldr	r3, [r2, #24]
    dataToSend[0] = FLIGHT_LOG;
    dataToSend[1] = 0;

    dataToSend[2] = offsets.offsetBufferTime >> 0;
    dataToSend[3] = offsets.offsetBufferTime >> 8;
    dataToSend[4] = offsets.offsetBufferTime >> 16;
    1fc2:	7101      	strb	r1, [r0, #4]
    dataToSend[5] = offsets.offsetBufferTime >> 24;

    dataToSend[6] = offsets.groundOffset >> 0;
    dataToSend[7] = offsets.groundOffset >> 8;
    1fc4:	0a19      	lsrs	r1, r3, #8
    dataToSend[2] = offsets.offsetBufferTime >> 0;
    dataToSend[3] = offsets.offsetBufferTime >> 8;
    dataToSend[4] = offsets.offsetBufferTime >> 16;
    dataToSend[5] = offsets.offsetBufferTime >> 24;

    dataToSend[6] = offsets.groundOffset >> 0;
    1fc6:	7183      	strb	r3, [r0, #6]
    dataToSend[7] = offsets.groundOffset >> 8;
    1fc8:	71c1      	strb	r1, [r0, #7]
    dataToSend[8] = offsets.groundOffset >> 16;
    1fca:	0c19      	lsrs	r1, r3, #16
    dataToSend[9] = offsets.groundOffset >> 24;
    1fcc:	0e1b      	lsrs	r3, r3, #24
    1fce:	7243      	strb	r3, [r0, #9]

    dataToSend[10] = offsets.groundTemperature >> 0;
    1fd0:	6a13      	ldr	r3, [r2, #32]
    dataToSend[4] = offsets.offsetBufferTime >> 16;
    dataToSend[5] = offsets.offsetBufferTime >> 24;

    dataToSend[6] = offsets.groundOffset >> 0;
    dataToSend[7] = offsets.groundOffset >> 8;
    dataToSend[8] = offsets.groundOffset >> 16;
    1fd2:	7201      	strb	r1, [r0, #8]
    dataToSend[9] = offsets.groundOffset >> 24;

    dataToSend[10] = offsets.groundTemperature >> 0;
    dataToSend[11] = offsets.groundTemperature >> 8;
    1fd4:	0a1a      	lsrs	r2, r3, #8
    dataToSend[6] = offsets.groundOffset >> 0;
    dataToSend[7] = offsets.groundOffset >> 8;
    dataToSend[8] = offsets.groundOffset >> 16;
    dataToSend[9] = offsets.groundOffset >> 24;

    dataToSend[10] = offsets.groundTemperature >> 0;
    1fd6:	7283      	strb	r3, [r0, #10]
    dataToSend[11] = offsets.groundTemperature >> 8;
    1fd8:	72c2      	strb	r2, [r0, #11]
    dataToSend[12] = offsets.groundTemperature >> 16;
    1fda:	0c1a      	lsrs	r2, r3, #16
    dataToSend[13] = offsets.groundTemperature >> 24;
    1fdc:	0e1b      	lsrs	r3, r3, #24
    1fde:	7343      	strb	r3, [r0, #13]

    //dataToSend[14] = accel >> 0;
    dataToSend[15] = 0xfe;
    1fe0:	23fe      	movs	r3, #254	; 0xfe
    dataToSend[8] = offsets.groundOffset >> 16;
    dataToSend[9] = offsets.groundOffset >> 24;

    dataToSend[10] = offsets.groundTemperature >> 0;
    dataToSend[11] = offsets.groundTemperature >> 8;
    dataToSend[12] = offsets.groundTemperature >> 16;
    1fe2:	7302      	strb	r2, [r0, #12]
    dataToSend[13] = offsets.groundTemperature >> 24;

    //dataToSend[14] = accel >> 0;
    dataToSend[15] = 0xfe;
    1fe4:	73c3      	strb	r3, [r0, #15]
    dataToSend[5] = offsets.offsetBufferTime >> 24;

    dataToSend[6] = offsets.groundOffset >> 0;
    dataToSend[7] = offsets.groundOffset >> 8;
    dataToSend[8] = offsets.groundOffset >> 16;
    dataToSend[9] = offsets.groundOffset >> 24;
    1fe6:	4669      	mov	r1, sp
    dataToSend[13] = offsets.groundTemperature >> 24;

    //dataToSend[14] = accel >> 0;
    dataToSend[15] = 0xfe;

    makePage(bytesToSend, dataToSend);
    1fe8:	2010      	movs	r0, #16
    1fea:	4b03      	ldr	r3, [pc, #12]	; (1ff8 <logFlight+0x58>)
    1fec:	4798      	blx	r3
}
    1fee:	b005      	add	sp, #20
    1ff0:	bd00      	pop	{pc}
    1ff2:	46c0      	nop			; (mov r8, r8)
    1ff4:	200004d0 	.word	0x200004d0
    1ff8:	00001f11 	.word	0x00001f11

00001ffc <logEvent>:
void logEvent(u8_t eventType) {

    u8_t bytesToSend = 12;
    u8_t dataToSend[12];

    dataToSend[0] = EVENT_LOG;
    1ffc:	2345      	movs	r3, #69	; 0x45
    dataToSend[15] = 0xfe;

    makePage(bytesToSend, dataToSend);
}

void logEvent(u8_t eventType) {
    1ffe:	b530      	push	{r4, r5, lr}
    u8_t bytesToSend = 12;
    u8_t dataToSend[12];

    dataToSend[0] = EVENT_LOG;
    dataToSend[1] = eventType;
    dataToSend[2] = sample.sampleTick >> 0;
    2000:	4d13      	ldr	r5, [pc, #76]	; (2050 <STACK_SIZE+0x50>)
    dataToSend[15] = 0xfe;

    makePage(bytesToSend, dataToSend);
}

void logEvent(u8_t eventType) {
    2002:	b085      	sub	sp, #20

    u8_t bytesToSend = 12;
    u8_t dataToSend[12];

    dataToSend[0] = EVENT_LOG;
    2004:	ac01      	add	r4, sp, #4
    2006:	7023      	strb	r3, [r4, #0]
    dataToSend[1] = eventType;
    dataToSend[2] = sample.sampleTick >> 0;
    2008:	686b      	ldr	r3, [r5, #4]

    u8_t bytesToSend = 12;
    u8_t dataToSend[12];

    dataToSend[0] = EVENT_LOG;
    dataToSend[1] = eventType;
    200a:	7060      	strb	r0, [r4, #1]
    dataToSend[2] = sample.sampleTick >> 0;
    200c:	70a3      	strb	r3, [r4, #2]
    dataToSend[3] = sample.sampleTick >> 8;
    200e:	686b      	ldr	r3, [r5, #4]
    2010:	0a1b      	lsrs	r3, r3, #8
    2012:	70e3      	strb	r3, [r4, #3]
    dataToSend[4] = sample.sampleTick >> 16;
    2014:	686b      	ldr	r3, [r5, #4]
    2016:	0c1b      	lsrs	r3, r3, #16
    2018:	7123      	strb	r3, [r4, #4]
    dataToSend[5] = sample.sampleTick >> 24;
    201a:	686b      	ldr	r3, [r5, #4]
    201c:	0e1b      	lsrs	r3, r3, #24
    201e:	7163      	strb	r3, [r4, #5]

    dataToSend[6] = (int)altitude >> 0;
    2020:	4b0c      	ldr	r3, [pc, #48]	; (2054 <STACK_SIZE+0x54>)
    2022:	6818      	ldr	r0, [r3, #0]
    2024:	6859      	ldr	r1, [r3, #4]
    2026:	4b0c      	ldr	r3, [pc, #48]	; (2058 <STACK_SIZE+0x58>)
    2028:	4798      	blx	r3
    dataToSend[7] = (int)altitude >> 8;
    202a:	1203      	asrs	r3, r0, #8
    dataToSend[2] = sample.sampleTick >> 0;
    dataToSend[3] = sample.sampleTick >> 8;
    dataToSend[4] = sample.sampleTick >> 16;
    dataToSend[5] = sample.sampleTick >> 24;

    dataToSend[6] = (int)altitude >> 0;
    202c:	71a0      	strb	r0, [r4, #6]
    dataToSend[7] = (int)altitude >> 8;
    202e:	71e3      	strb	r3, [r4, #7]
    dataToSend[8] = (int)altitude >> 16;
    2030:	1403      	asrs	r3, r0, #16
    dataToSend[9] = (int)altitude >> 24;
    2032:	1600      	asrs	r0, r0, #24
    2034:	7260      	strb	r0, [r4, #9]
    dataToSend[4] = sample.sampleTick >> 16;
    dataToSend[5] = sample.sampleTick >> 24;

    dataToSend[6] = (int)altitude >> 0;
    dataToSend[7] = (int)altitude >> 8;
    dataToSend[8] = (int)altitude >> 16;
    2036:	7223      	strb	r3, [r4, #8]
    dataToSend[9] = (int)altitude >> 24;

    dataToSend[10] = sample.voltage.batV >> 0;
    2038:	892b      	ldrh	r3, [r5, #8]
    dataToSend[11] = sample.voltage.batV >> 8;

    makePage(bytesToSend, dataToSend);
    203a:	0021      	movs	r1, r4
    dataToSend[6] = (int)altitude >> 0;
    dataToSend[7] = (int)altitude >> 8;
    dataToSend[8] = (int)altitude >> 16;
    dataToSend[9] = (int)altitude >> 24;

    dataToSend[10] = sample.voltage.batV >> 0;
    203c:	72a3      	strb	r3, [r4, #10]
    dataToSend[11] = sample.voltage.batV >> 8;
    203e:	892b      	ldrh	r3, [r5, #8]

    makePage(bytesToSend, dataToSend);
    2040:	200c      	movs	r0, #12
    dataToSend[7] = (int)altitude >> 8;
    dataToSend[8] = (int)altitude >> 16;
    dataToSend[9] = (int)altitude >> 24;

    dataToSend[10] = sample.voltage.batV >> 0;
    dataToSend[11] = sample.voltage.batV >> 8;
    2042:	0a1b      	lsrs	r3, r3, #8
    2044:	72e3      	strb	r3, [r4, #11]

    makePage(bytesToSend, dataToSend);
    2046:	4b05      	ldr	r3, [pc, #20]	; (205c <STACK_SIZE+0x5c>)
    2048:	4798      	blx	r3

}
    204a:	b005      	add	sp, #20
    204c:	bd30      	pop	{r4, r5, pc}
    204e:	46c0      	nop			; (mov r8, r8)
    2050:	20000790 	.word	0x20000790
    2054:	20000660 	.word	0x20000660
    2058:	00005e95 	.word	0x00005e95
    205c:	00001f11 	.word	0x00001f11

00002060 <logSensors>:
void logSensors() {

    u8_t bytesToSend = 24;
    u8_t dataToSend[24];

    dataToSend[0] = SENSOR_LOG;
    2060:	2353      	movs	r3, #83	; 0x53

    makePage(bytesToSend, dataToSend);

}

void logSensors() {
    2062:	b5f0      	push	{r4, r5, r6, r7, lr}
    u8_t bytesToSend = 24;
    u8_t dataToSend[24];

    dataToSend[0] = SENSOR_LOG;
	
    dataToSend[1] = sample.sampleTick >> 0;
    2064:	4c4b      	ldr	r4, [pc, #300]	; (2194 <logSensors+0x134>)

    makePage(bytesToSend, dataToSend);

}

void logSensors() {
    2066:	b089      	sub	sp, #36	; 0x24

    u8_t bytesToSend = 24;
    u8_t dataToSend[24];

    dataToSend[0] = SENSOR_LOG;
    2068:	aa02      	add	r2, sp, #8
    206a:	7013      	strb	r3, [r2, #0]
	
    dataToSend[1] = sample.sampleTick >> 0;
    206c:	6863      	ldr	r3, [r4, #4]
    206e:	7053      	strb	r3, [r2, #1]
    dataToSend[2] = sample.sampleTick >> 8;
    2070:	6863      	ldr	r3, [r4, #4]
    2072:	0a1b      	lsrs	r3, r3, #8
    2074:	7093      	strb	r3, [r2, #2]
    dataToSend[3] = sample.sampleTick >> 16;
    2076:	6863      	ldr	r3, [r4, #4]
    2078:	0c1b      	lsrs	r3, r3, #16
    207a:	70d3      	strb	r3, [r2, #3]
    dataToSend[4] = sample.sampleTick >> 24;
    207c:	6863      	ldr	r3, [r4, #4]
    207e:	0e1b      	lsrs	r3, r3, #24
    2080:	7113      	strb	r3, [r2, #4]

    dataToSend[5] = (int)altitude >> 0;
    2082:	4b45      	ldr	r3, [pc, #276]	; (2198 <logSensors+0x138>)
    2084:	6818      	ldr	r0, [r3, #0]
    2086:	6859      	ldr	r1, [r3, #4]
    2088:	4b44      	ldr	r3, [pc, #272]	; (219c <logSensors+0x13c>)
    208a:	4798      	blx	r3
    208c:	ab02      	add	r3, sp, #8
    dataToSend[6] = (int)altitude >> 8;
    208e:	aa02      	add	r2, sp, #8
    dataToSend[1] = sample.sampleTick >> 0;
    dataToSend[2] = sample.sampleTick >> 8;
    dataToSend[3] = sample.sampleTick >> 16;
    dataToSend[4] = sample.sampleTick >> 24;

    dataToSend[5] = (int)altitude >> 0;
    2090:	7158      	strb	r0, [r3, #5]
    dataToSend[6] = (int)altitude >> 8;
    2092:	1203      	asrs	r3, r0, #8
    2094:	7193      	strb	r3, [r2, #6]
    dataToSend[7] = (int)altitude >> 16;
    2096:	1403      	asrs	r3, r0, #16
    2098:	71d3      	strb	r3, [r2, #7]
    dataToSend[8] = (int)altitude >> 24;

    float fractionalAccel = accel - (int16_t)(accel);
    209a:	4b41      	ldr	r3, [pc, #260]	; (21a0 <logSensors+0x140>)
    dataToSend[4] = sample.sampleTick >> 24;

    dataToSend[5] = (int)altitude >> 0;
    dataToSend[6] = (int)altitude >> 8;
    dataToSend[7] = (int)altitude >> 16;
    dataToSend[8] = (int)altitude >> 24;
    209c:	1600      	asrs	r0, r0, #24

    float fractionalAccel = accel - (int16_t)(accel);
    209e:	681e      	ldr	r6, [r3, #0]
    20a0:	685f      	ldr	r7, [r3, #4]
    dataToSend[4] = sample.sampleTick >> 24;

    dataToSend[5] = (int)altitude >> 0;
    dataToSend[6] = (int)altitude >> 8;
    dataToSend[7] = (int)altitude >> 16;
    dataToSend[8] = (int)altitude >> 24;
    20a2:	7210      	strb	r0, [r2, #8]

    float fractionalAccel = accel - (int16_t)(accel);
    20a4:	0039      	movs	r1, r7
    20a6:	4b3d      	ldr	r3, [pc, #244]	; (219c <logSensors+0x13c>)
    20a8:	0030      	movs	r0, r6
    20aa:	4798      	blx	r3
    20ac:	b205      	sxth	r5, r0
    u16_t fractAccelPart = fractionalAccel * 1000;
    20ae:	4b3d      	ldr	r3, [pc, #244]	; (21a4 <logSensors+0x144>)
    20b0:	0028      	movs	r0, r5
    20b2:	4798      	blx	r3
    20b4:	0002      	movs	r2, r0
    20b6:	000b      	movs	r3, r1
    20b8:	0030      	movs	r0, r6
    20ba:	0039      	movs	r1, r7
    20bc:	4e3a      	ldr	r6, [pc, #232]	; (21a8 <logSensors+0x148>)
    20be:	47b0      	blx	r6
    20c0:	4b3a      	ldr	r3, [pc, #232]	; (21ac <logSensors+0x14c>)
    20c2:	4798      	blx	r3
    20c4:	4b3a      	ldr	r3, [pc, #232]	; (21b0 <logSensors+0x150>)
    20c6:	493b      	ldr	r1, [pc, #236]	; (21b4 <logSensors+0x154>)
    20c8:	4798      	blx	r3
    20ca:	4f3b      	ldr	r7, [pc, #236]	; (21b8 <logSensors+0x158>)
    20cc:	47b8      	blx	r7

    dataToSend[9] = (int16_t)(accel) >> 0;
    20ce:	aa02      	add	r2, sp, #8
    dataToSend[6] = (int)altitude >> 8;
    dataToSend[7] = (int)altitude >> 16;
    dataToSend[8] = (int)altitude >> 24;

    float fractionalAccel = accel - (int16_t)(accel);
    u16_t fractAccelPart = fractionalAccel * 1000;
    20d0:	b283      	uxth	r3, r0

    dataToSend[9] = (int16_t)(accel) >> 0;
    dataToSend[10] = (int16_t)(accel) >> 8;
    dataToSend[11] = fractAccelPart >> 0;
    20d2:	72d3      	strb	r3, [r2, #11]
    dataToSend[12] = fractAccelPart >> 8;
    20d4:	0a1b      	lsrs	r3, r3, #8
    20d6:	7313      	strb	r3, [r2, #12]


    float fractionalVelocity = velocity - (int16_t)(velocity);
    20d8:	4b38      	ldr	r3, [pc, #224]	; (21bc <logSensors+0x15c>)
    dataToSend[8] = (int)altitude >> 24;

    float fractionalAccel = accel - (int16_t)(accel);
    u16_t fractAccelPart = fractionalAccel * 1000;

    dataToSend[9] = (int16_t)(accel) >> 0;
    20da:	7255      	strb	r5, [r2, #9]
    dataToSend[10] = (int16_t)(accel) >> 8;
    20dc:	122d      	asrs	r5, r5, #8
    20de:	7295      	strb	r5, [r2, #10]
    dataToSend[11] = fractAccelPart >> 0;
    dataToSend[12] = fractAccelPart >> 8;


    float fractionalVelocity = velocity - (int16_t)(velocity);
    20e0:	681a      	ldr	r2, [r3, #0]
    20e2:	685b      	ldr	r3, [r3, #4]
    20e4:	9200      	str	r2, [sp, #0]
    20e6:	9301      	str	r3, [sp, #4]
    20e8:	0010      	movs	r0, r2
    20ea:	0019      	movs	r1, r3
    20ec:	4b2b      	ldr	r3, [pc, #172]	; (219c <logSensors+0x13c>)
    20ee:	4798      	blx	r3
    20f0:	b205      	sxth	r5, r0
    u16_t fractVelocityPart = fractionalVelocity * 1000;
    20f2:	4b2c      	ldr	r3, [pc, #176]	; (21a4 <logSensors+0x144>)
    20f4:	0028      	movs	r0, r5
    20f6:	4798      	blx	r3
    20f8:	0002      	movs	r2, r0
    20fa:	000b      	movs	r3, r1
    20fc:	9800      	ldr	r0, [sp, #0]
    20fe:	9901      	ldr	r1, [sp, #4]
    2100:	47b0      	blx	r6
    2102:	4b2a      	ldr	r3, [pc, #168]	; (21ac <logSensors+0x14c>)
    2104:	4798      	blx	r3
    2106:	4b2a      	ldr	r3, [pc, #168]	; (21b0 <logSensors+0x150>)
    2108:	492a      	ldr	r1, [pc, #168]	; (21b4 <logSensors+0x154>)
    210a:	4798      	blx	r3
    210c:	47b8      	blx	r7

    dataToSend[13] = (int16_t)(velocity) >> 0;
    210e:	aa02      	add	r2, sp, #8
    dataToSend[11] = fractAccelPart >> 0;
    dataToSend[12] = fractAccelPart >> 8;


    float fractionalVelocity = velocity - (int16_t)(velocity);
    u16_t fractVelocityPart = fractionalVelocity * 1000;
    2110:	b283      	uxth	r3, r0

    dataToSend[13] = (int16_t)(velocity) >> 0;
    2112:	7355      	strb	r5, [r2, #13]
    dataToSend[14] = (int16_t)(velocity) >> 8;
    dataToSend[15] = fractVelocityPart >> 0;
    2114:	73d3      	strb	r3, [r2, #15]

    float fractionalVelocity = velocity - (int16_t)(velocity);
    u16_t fractVelocityPart = fractionalVelocity * 1000;

    dataToSend[13] = (int16_t)(velocity) >> 0;
    dataToSend[14] = (int16_t)(velocity) >> 8;
    2116:	122d      	asrs	r5, r5, #8
    dataToSend[15] = fractVelocityPart >> 0;
    dataToSend[16] = fractVelocityPart >> 8;
    2118:	0a1b      	lsrs	r3, r3, #8

    float fractionalVelocity = velocity - (int16_t)(velocity);
    u16_t fractVelocityPart = fractionalVelocity * 1000;

    dataToSend[13] = (int16_t)(velocity) >> 0;
    dataToSend[14] = (int16_t)(velocity) >> 8;
    211a:	7395      	strb	r5, [r2, #14]
    dataToSend[15] = fractVelocityPart >> 0;
    dataToSend[16] = fractVelocityPart >> 8;
    211c:	7413      	strb	r3, [r2, #16]

    dataToSend[17] = (u32_t)sample.altitudefeet >> 0;
    211e:	6c20      	ldr	r0, [r4, #64]	; 0x40
    2120:	6c61      	ldr	r1, [r4, #68]	; 0x44
    2122:	4d27      	ldr	r5, [pc, #156]	; (21c0 <logSensors+0x160>)
    2124:	47a8      	blx	r5
    2126:	ab02      	add	r3, sp, #8
    2128:	7458      	strb	r0, [r3, #17]
    dataToSend[18] = (u32_t)sample.altitudefeet >> 8;
    212a:	6c20      	ldr	r0, [r4, #64]	; 0x40
    212c:	6c61      	ldr	r1, [r4, #68]	; 0x44
    212e:	47a8      	blx	r5
    2130:	ab02      	add	r3, sp, #8
    2132:	0a00      	lsrs	r0, r0, #8
    2134:	7498      	strb	r0, [r3, #18]
    dataToSend[19] = (u32_t)sample.altitudefeet >> 16;
    2136:	6c20      	ldr	r0, [r4, #64]	; 0x40
    2138:	6c61      	ldr	r1, [r4, #68]	; 0x44
    213a:	47a8      	blx	r5
    213c:	ab02      	add	r3, sp, #8
    213e:	0c00      	lsrs	r0, r0, #16
    2140:	74d8      	strb	r0, [r3, #19]
    dataToSend[20] = (u32_t)sample.altitudefeet >> 24;
    2142:	6c20      	ldr	r0, [r4, #64]	; 0x40
    2144:	6c61      	ldr	r1, [r4, #68]	; 0x44
    2146:	47a8      	blx	r5
    2148:	ab02      	add	r3, sp, #8
    214a:	0e00      	lsrs	r0, r0, #24

    float fractionalAccelraw = sample.accelZ - (int16_t)(sample.accelZ);
    214c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    dataToSend[16] = fractVelocityPart >> 8;

    dataToSend[17] = (u32_t)sample.altitudefeet >> 0;
    dataToSend[18] = (u32_t)sample.altitudefeet >> 8;
    dataToSend[19] = (u32_t)sample.altitudefeet >> 16;
    dataToSend[20] = (u32_t)sample.altitudefeet >> 24;
    214e:	7518      	strb	r0, [r3, #20]

    float fractionalAccelraw = sample.accelZ - (int16_t)(sample.accelZ);
    2150:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    u8_t fractAccelRawPart = fractionalAccelraw * 256;

    dataToSend[21] = (int16_t)(sample.accelZ) >> 0;
    2152:	4d1c      	ldr	r5, [pc, #112]	; (21c4 <logSensors+0x164>)
    2154:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    dataToSend[17] = (u32_t)sample.altitudefeet >> 0;
    dataToSend[18] = (u32_t)sample.altitudefeet >> 8;
    dataToSend[19] = (u32_t)sample.altitudefeet >> 16;
    dataToSend[20] = (u32_t)sample.altitudefeet >> 24;

    float fractionalAccelraw = sample.accelZ - (int16_t)(sample.accelZ);
    2156:	9300      	str	r3, [sp, #0]
    u8_t fractAccelRawPart = fractionalAccelraw * 256;

    dataToSend[21] = (int16_t)(sample.accelZ) >> 0;
    2158:	47a8      	blx	r5
    215a:	ab02      	add	r3, sp, #8
    215c:	7558      	strb	r0, [r3, #21]
    dataToSend[22] = (int16_t)(sample.accelZ) >> 8;
    215e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    2160:	47a8      	blx	r5
    2162:	ab02      	add	r3, sp, #8
    2164:	0a00      	lsrs	r0, r0, #8
    2166:	7598      	strb	r0, [r3, #22]
    dataToSend[23] = fractAccelRawPart >> 0;
    2168:	9800      	ldr	r0, [sp, #0]
    216a:	47a8      	blx	r5
    216c:	4b16      	ldr	r3, [pc, #88]	; (21c8 <logSensors+0x168>)
    216e:	b200      	sxth	r0, r0
    2170:	4798      	blx	r3
    2172:	4b16      	ldr	r3, [pc, #88]	; (21cc <logSensors+0x16c>)
    2174:	1c01      	adds	r1, r0, #0
    2176:	1c30      	adds	r0, r6, #0
    2178:	4798      	blx	r3
    217a:	2187      	movs	r1, #135	; 0x87
    217c:	4b0c      	ldr	r3, [pc, #48]	; (21b0 <logSensors+0x150>)
    217e:	05c9      	lsls	r1, r1, #23
    2180:	4798      	blx	r3
    2182:	47b8      	blx	r7
    2184:	ab02      	add	r3, sp, #8
    2186:	75d8      	strb	r0, [r3, #23]
	 dataToSend[22] = 0xfd;
	 dataToSend[23] = 0xfe;
	 
	 */

    makePage(bytesToSend, dataToSend);
    2188:	0019      	movs	r1, r3
    218a:	2018      	movs	r0, #24
    218c:	4b10      	ldr	r3, [pc, #64]	; (21d0 <logSensors+0x170>)
    218e:	4798      	blx	r3
}
    2190:	b009      	add	sp, #36	; 0x24
    2192:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2194:	20000790 	.word	0x20000790
    2198:	20000660 	.word	0x20000660
    219c:	00005e95 	.word	0x00005e95
    21a0:	20000650 	.word	0x20000650
    21a4:	00005f01 	.word	0x00005f01
    21a8:	000057ad 	.word	0x000057ad
    21ac:	0000609d 	.word	0x0000609d
    21b0:	00003e11 	.word	0x00003e11
    21b4:	447a0000 	.word	0x447a0000
    21b8:	00003c45 	.word	0x00003c45
    21bc:	20000658 	.word	0x20000658
    21c0:	00003c75 	.word	0x00003c75
    21c4:	00004345 	.word	0x00004345
    21c8:	00004389 	.word	0x00004389
    21cc:	00004039 	.word	0x00004039
    21d0:	00001f11 	.word	0x00001f11

000021d4 <getFlightStartAddress>:

    u8_t addressToCheck[3];

    u16_t flightAddressLoc = FLIGHTZEROSTART + (flightToFind * 0x06);

    AT25SEreadSample(flightAddressLoc, 0x03, addressToCheck);
    21d4:	2306      	movs	r3, #6
    makePage(bytesToSend, dataToSend);
}



u32_t getFlightStartAddress(u8_t flightToFind) {
    21d6:	b513      	push	{r0, r1, r4, lr}

    u8_t addressToCheck[3];

    u16_t flightAddressLoc = FLIGHTZEROSTART + (flightToFind * 0x06);

    AT25SEreadSample(flightAddressLoc, 0x03, addressToCheck);
    21d8:	4358      	muls	r0, r3
    21da:	ac01      	add	r4, sp, #4
    21dc:	3001      	adds	r0, #1
    21de:	30ff      	adds	r0, #255	; 0xff
    21e0:	0022      	movs	r2, r4
    21e2:	2103      	movs	r1, #3
    21e4:	4b04      	ldr	r3, [pc, #16]	; (21f8 <getFlightStartAddress+0x24>)
    21e6:	4798      	blx	r3

    u32_t flightStartAddress = addressToCheck[0] << 0 | addressToCheck[1] << 8 | addressToCheck[2] << 16;
    21e8:	7860      	ldrb	r0, [r4, #1]
    21ea:	78a3      	ldrb	r3, [r4, #2]
    21ec:	0200      	lsls	r0, r0, #8
    21ee:	041b      	lsls	r3, r3, #16
    21f0:	4318      	orrs	r0, r3
    21f2:	7823      	ldrb	r3, [r4, #0]
    21f4:	4318      	orrs	r0, r3

    return flightStartAddress;
}
    21f6:	bd16      	pop	{r1, r2, r4, pc}
    21f8:	00000341 	.word	0x00000341

000021fc <FindFlightEndingAddress>:

    u8_t addressToCheck[3];

    u16_t flightAddressLoc = FLIGHTZEROEND + (findThisFlightsEnd * 0x06);

    AT25SEreadSample(flightAddressLoc, 0x03, addressToCheck);
    21fc:	2306      	movs	r3, #6
    u32_t flightStartAddress = addressToCheck[0] << 0 | addressToCheck[1] << 8 | addressToCheck[2] << 16;

    return flightStartAddress;
}

u32_t FindFlightEndingAddress(u8_t findThisFlightsEnd) {
    21fe:	b513      	push	{r0, r1, r4, lr}

    u8_t addressToCheck[3];

    u16_t flightAddressLoc = FLIGHTZEROEND + (findThisFlightsEnd * 0x06);

    AT25SEreadSample(flightAddressLoc, 0x03, addressToCheck);
    2200:	4358      	muls	r0, r3
    2202:	ac01      	add	r4, sp, #4
    2204:	3004      	adds	r0, #4
    2206:	30ff      	adds	r0, #255	; 0xff
    2208:	0022      	movs	r2, r4
    220a:	2103      	movs	r1, #3
    220c:	4b04      	ldr	r3, [pc, #16]	; (2220 <FindFlightEndingAddress+0x24>)
    220e:	4798      	blx	r3

    u32_t flightEndAddress = addressToCheck[0] << 0 | addressToCheck[1] << 8 | addressToCheck[2] << 16;
    2210:	7860      	ldrb	r0, [r4, #1]
    2212:	78a3      	ldrb	r3, [r4, #2]
    2214:	0200      	lsls	r0, r0, #8
    2216:	041b      	lsls	r3, r3, #16
    2218:	4318      	orrs	r0, r3
    221a:	7823      	ldrb	r3, [r4, #0]
    221c:	4318      	orrs	r0, r3

    return flightEndAddress;
}
    221e:	bd16      	pop	{r1, r2, r4, pc}
    2220:	00000341 	.word	0x00000341

00002224 <isFlightLogged>:

bool isFlightLogged(u8_t flightNumbToCheck) {
    2224:	b510      	push	{r4, lr}

    u32_t possibleStart = getFlightStartAddress(flightNumbToCheck);
    2226:	4b04      	ldr	r3, [pc, #16]	; (2238 <isFlightLogged+0x14>)
    2228:	4798      	blx	r3
    222a:	4b04      	ldr	r3, [pc, #16]	; (223c <isFlightLogged+0x18>)
    if (possibleStart == 0xFFFFFF) {
        return false;
    } else {
        return true;
    }
}
    222c:	18c0      	adds	r0, r0, r3
    222e:	1e43      	subs	r3, r0, #1
    2230:	4198      	sbcs	r0, r3
    2232:	b2c0      	uxtb	r0, r0
    2234:	bd10      	pop	{r4, pc}
    2236:	46c0      	nop			; (mov r8, r8)
    2238:	000021d5 	.word	0x000021d5
    223c:	ff000001 	.word	0xff000001

00002240 <writeFlightEndAddress>:



void writeFlightEndAddress() {
    2240:	b507      	push	{r0, r1, r2, lr}
    u32_t endingAddress = currentAddress;

    u8_t address[3] = {endingAddress >> 0, endingAddress >> 8, endingAddress >> 16};

    u16_t flightAddressLoc = FLIGHTZEROEND + (flightNumb * 0x06);
    AT25SFWriteBytes(flightAddressLoc, 3, address);
    2242:	2006      	movs	r0, #6



void writeFlightEndAddress() {

    u32_t endingAddress = currentAddress;
    2244:	4b09      	ldr	r3, [pc, #36]	; (226c <writeFlightEndAddress+0x2c>)

    u8_t address[3] = {endingAddress >> 0, endingAddress >> 8, endingAddress >> 16};
    2246:	aa01      	add	r2, sp, #4



void writeFlightEndAddress() {

    u32_t endingAddress = currentAddress;
    2248:	681b      	ldr	r3, [r3, #0]

    u8_t address[3] = {endingAddress >> 0, endingAddress >> 8, endingAddress >> 16};
    224a:	7013      	strb	r3, [r2, #0]
    224c:	0a19      	lsrs	r1, r3, #8
    224e:	0c1b      	lsrs	r3, r3, #16
    2250:	7093      	strb	r3, [r2, #2]

    u16_t flightAddressLoc = FLIGHTZEROEND + (flightNumb * 0x06);
    2252:	4b07      	ldr	r3, [pc, #28]	; (2270 <writeFlightEndAddress+0x30>)

void writeFlightEndAddress() {

    u32_t endingAddress = currentAddress;

    u8_t address[3] = {endingAddress >> 0, endingAddress >> 8, endingAddress >> 16};
    2254:	7051      	strb	r1, [r2, #1]

    u16_t flightAddressLoc = FLIGHTZEROEND + (flightNumb * 0x06);
    AT25SFWriteBytes(flightAddressLoc, 3, address);
    2256:	781b      	ldrb	r3, [r3, #0]
    2258:	2103      	movs	r1, #3
    225a:	4358      	muls	r0, r3
    225c:	3004      	adds	r0, #4
    225e:	30ff      	adds	r0, #255	; 0xff
    2260:	4b04      	ldr	r3, [pc, #16]	; (2274 <writeFlightEndAddress+0x34>)
    2262:	4798      	blx	r3
    delay_ms(10);
    2264:	200a      	movs	r0, #10
    2266:	4b04      	ldr	r3, [pc, #16]	; (2278 <writeFlightEndAddress+0x38>)
    2268:	4798      	blx	r3

}
    226a:	bd07      	pop	{r0, r1, r2, pc}
    226c:	20000784 	.word	0x20000784
    2270:	20000501 	.word	0x20000501
    2274:	00000255 	.word	0x00000255
    2278:	00000fd1 	.word	0x00000fd1

0000227c <findNewFlightStart>:




void findNewFlightStart() {
    227c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

    for (u8_t flightNumbToCheck = 0; flightNumbToCheck < 20; ++flightNumbToCheck) {
    227e:	2400      	movs	r4, #0

        if (!isFlightLogged(flightNumbToCheck)) {
    2280:	0020      	movs	r0, r4
    2282:	4b23      	ldr	r3, [pc, #140]	; (2310 <findNewFlightStart+0x94>)
    2284:	4798      	blx	r3
    2286:	2800      	cmp	r0, #0
    2288:	d13c      	bne.n	2304 <findNewFlightStart+0x88>
    228a:	4f22      	ldr	r7, [pc, #136]	; (2314 <findNewFlightStart+0x98>)
    228c:	ad01      	add	r5, sp, #4

            if (flightNumbToCheck > 0) {
    228e:	2c00      	cmp	r4, #0
    2290:	d016      	beq.n	22c0 <findNewFlightStart+0x44>


                u32_t startAddress = FindFlightEndingAddress(flightNumbToCheck - 1);
    2292:	1e60      	subs	r0, r4, #1
    2294:	4b20      	ldr	r3, [pc, #128]	; (2318 <findNewFlightStart+0x9c>)
    2296:	b2c0      	uxtb	r0, r0
    2298:	4798      	blx	r3
                delay_ms(5);
    229a:	4b20      	ldr	r3, [pc, #128]	; (231c <findNewFlightStart+0xa0>)
        if (!isFlightLogged(flightNumbToCheck)) {

            if (flightNumbToCheck > 0) {


                u32_t startAddress = FindFlightEndingAddress(flightNumbToCheck - 1);
    229c:	0006      	movs	r6, r0
                delay_ms(5);
    229e:	2005      	movs	r0, #5
    22a0:	4798      	blx	r3
                currentAddress = startAddress;

                u8_t address[3] = {startAddress >> 0, startAddress >> 8, startAddress >> 16};

                u16_t flightAddressLoc = FLIGHTZEROSTART + (flightNumbToCheck * 0x06);
                AT25SFWriteBytes(flightAddressLoc, 3, address);
    22a2:	2006      	movs	r0, #6
    22a4:	4360      	muls	r0, r4
                u32_t startAddress = FindFlightEndingAddress(flightNumbToCheck - 1);
                delay_ms(5);

                currentAddress = startAddress;

                u8_t address[3] = {startAddress >> 0, startAddress >> 8, startAddress >> 16};
    22a6:	0a33      	lsrs	r3, r6, #8

                u16_t flightAddressLoc = FLIGHTZEROSTART + (flightNumbToCheck * 0x06);
                AT25SFWriteBytes(flightAddressLoc, 3, address);
    22a8:	3001      	adds	r0, #1


                u32_t startAddress = FindFlightEndingAddress(flightNumbToCheck - 1);
                delay_ms(5);

                currentAddress = startAddress;
    22aa:	603e      	str	r6, [r7, #0]

                u8_t address[3] = {startAddress >> 0, startAddress >> 8, startAddress >> 16};
    22ac:	702e      	strb	r6, [r5, #0]
    22ae:	706b      	strb	r3, [r5, #1]
    22b0:	0c36      	lsrs	r6, r6, #16

                u16_t flightAddressLoc = FLIGHTZEROSTART + (flightNumbToCheck * 0x06);
                AT25SFWriteBytes(flightAddressLoc, 3, address);
    22b2:	30ff      	adds	r0, #255	; 0xff
    22b4:	002a      	movs	r2, r5
    22b6:	2103      	movs	r1, #3
    22b8:	4b19      	ldr	r3, [pc, #100]	; (2320 <findNewFlightStart+0xa4>)
                u32_t startAddress = FindFlightEndingAddress(flightNumbToCheck - 1);
                delay_ms(5);

                currentAddress = startAddress;

                u8_t address[3] = {startAddress >> 0, startAddress >> 8, startAddress >> 16};
    22ba:	70ae      	strb	r6, [r5, #2]

                u16_t flightAddressLoc = FLIGHTZEROSTART + (flightNumbToCheck * 0x06);
                AT25SFWriteBytes(flightAddressLoc, 3, address);
    22bc:	4798      	blx	r3
    22be:	e00f      	b.n	22e0 <findNewFlightStart+0x64>

                // for flight 0, starting address is always 0x00100 (beginning of second 4k block)
            } else {
                u8_t address[3] = {0x00,0x10,0x00};
    22c0:	2310      	movs	r3, #16
                AT25SFWriteBytes(FLIGHTZEROSTART, 3, address);
    22c2:	2080      	movs	r0, #128	; 0x80
                u16_t flightAddressLoc = FLIGHTZEROSTART + (flightNumbToCheck * 0x06);
                AT25SFWriteBytes(flightAddressLoc, 3, address);

                // for flight 0, starting address is always 0x00100 (beginning of second 4k block)
            } else {
                u8_t address[3] = {0x00,0x10,0x00};
    22c4:	706b      	strb	r3, [r5, #1]
                AT25SFWriteBytes(FLIGHTZEROSTART, 3, address);
    22c6:	0040      	lsls	r0, r0, #1
    22c8:	4b15      	ldr	r3, [pc, #84]	; (2320 <findNewFlightStart+0xa4>)
    22ca:	002a      	movs	r2, r5
    22cc:	2103      	movs	r1, #3
                u16_t flightAddressLoc = FLIGHTZEROSTART + (flightNumbToCheck * 0x06);
                AT25SFWriteBytes(flightAddressLoc, 3, address);

                // for flight 0, starting address is always 0x00100 (beginning of second 4k block)
            } else {
                u8_t address[3] = {0x00,0x10,0x00};
    22ce:	702c      	strb	r4, [r5, #0]
    22d0:	70ac      	strb	r4, [r5, #2]
                AT25SFWriteBytes(FLIGHTZEROSTART, 3, address);
    22d2:	4798      	blx	r3
                currentAddress = 0x001000;
    22d4:	2380      	movs	r3, #128	; 0x80
    22d6:	015b      	lsls	r3, r3, #5
    22d8:	603b      	str	r3, [r7, #0]
                beep(1500);
    22da:	4812      	ldr	r0, [pc, #72]	; (2324 <findNewFlightStart+0xa8>)
    22dc:	4b12      	ldr	r3, [pc, #72]	; (2328 <findNewFlightStart+0xac>)
    22de:	4798      	blx	r3
            }
            flightNumb = flightNumbToCheck;
    22e0:	4b12      	ldr	r3, [pc, #72]	; (232c <findNewFlightStart+0xb0>)
    22e2:	701c      	strb	r4, [r3, #0]

            while (flightNumbToCheck > 0) {
                beep(500);
    22e4:	20fa      	movs	r0, #250	; 0xfa
    22e6:	0040      	lsls	r0, r0, #1
                currentAddress = 0x001000;
                beep(1500);
            }
            flightNumb = flightNumbToCheck;

            while (flightNumbToCheck > 0) {
    22e8:	2c00      	cmp	r4, #0
    22ea:	d008      	beq.n	22fe <findNewFlightStart+0x82>
                beep(500);
    22ec:	4b0e      	ldr	r3, [pc, #56]	; (2328 <findNewFlightStart+0xac>)
    22ee:	4798      	blx	r3
                delay_ms(500);
    22f0:	20fa      	movs	r0, #250	; 0xfa
    22f2:	4b0a      	ldr	r3, [pc, #40]	; (231c <findNewFlightStart+0xa0>)
    22f4:	0040      	lsls	r0, r0, #1
                --flightNumbToCheck;
    22f6:	3c01      	subs	r4, #1
            }
            flightNumb = flightNumbToCheck;

            while (flightNumbToCheck > 0) {
                beep(500);
                delay_ms(500);
    22f8:	4798      	blx	r3
                --flightNumbToCheck;
    22fa:	b2e4      	uxtb	r4, r4
    22fc:	e7f2      	b.n	22e4 <findNewFlightStart+0x68>
            }
            delay_ms(500);
    22fe:	4b07      	ldr	r3, [pc, #28]	; (231c <findNewFlightStart+0xa0>)
    2300:	4798      	blx	r3
            break;
    2302:	e003      	b.n	230c <findNewFlightStart+0x90>



void findNewFlightStart() {

    for (u8_t flightNumbToCheck = 0; flightNumbToCheck < 20; ++flightNumbToCheck) {
    2304:	3401      	adds	r4, #1
    2306:	b2e4      	uxtb	r4, r4
    2308:	2c14      	cmp	r4, #20
    230a:	d1b9      	bne.n	2280 <findNewFlightStart+0x4>
            }
            delay_ms(500);
            break;
        }
    }
}
    230c:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    230e:	46c0      	nop			; (mov r8, r8)
    2310:	00002225 	.word	0x00002225
    2314:	20000784 	.word	0x20000784
    2318:	000021fd 	.word	0x000021fd
    231c:	00000fd1 	.word	0x00000fd1
    2320:	00000255 	.word	0x00000255
    2324:	000005dc 	.word	0x000005dc
    2328:	00000d41 	.word	0x00000d41
    232c:	20000501 	.word	0x20000501

00002330 <takeSample>:
#include <util.h>
#include <boardDefines.h>
#include <MS5803.h>

bool takeSample() {
    return SampleBool;
    2330:	4b01      	ldr	r3, [pc, #4]	; (2338 <takeSample+0x8>)
    2332:	7818      	ldrb	r0, [r3, #0]
}
    2334:	4770      	bx	lr
    2336:	46c0      	nop			; (mov r8, r8)
    2338:	20000508 	.word	0x20000508

0000233c <pullSample>:

void pullSample() {
    SampleBool = true;
    233c:	2201      	movs	r2, #1
    233e:	4b01      	ldr	r3, [pc, #4]	; (2344 <pullSample+0x8>)
    2340:	701a      	strb	r2, [r3, #0]
}
    2342:	4770      	bx	lr
    2344:	20000508 	.word	0x20000508

00002348 <sampleTick>:
}

volatile sample_t sample;

void sampleTick() {
    SampleBool = false;
    2348:	2200      	movs	r2, #0
    SampleBool = false;
}

volatile sample_t sample;

void sampleTick() {
    234a:	b5f0      	push	{r4, r5, r6, r7, lr}
    SampleBool = false;
    234c:	4bb5      	ldr	r3, [pc, #724]	; (2624 <sampleTick+0x2dc>)
    SampleBool = false;
}

volatile sample_t sample;

void sampleTick() {
    234e:	b087      	sub	sp, #28
    SampleBool = false;

    // take last samples time to discover Dt before setting new time
    sample.tickDelta = millis() - sample.sampleTick;
    2350:	4db5      	ldr	r5, [pc, #724]	; (2628 <sampleTick+0x2e0>)
}

volatile sample_t sample;

void sampleTick() {
    SampleBool = false;
    2352:	701a      	strb	r2, [r3, #0]

    // take last samples time to discover Dt before setting new time
    sample.tickDelta = millis() - sample.sampleTick;
    2354:	47a8      	blx	r5
    2356:	4cb5      	ldr	r4, [pc, #724]	; (262c <sampleTick+0x2e4>)
    2358:	6863      	ldr	r3, [r4, #4]
    235a:	1ac0      	subs	r0, r0, r3
    235c:	b280      	uxth	r0, r0
    235e:	8020      	strh	r0, [r4, #0]
    sample.sampleTick = millis();
    2360:	47a8      	blx	r5

    sample.voltage.batV = adc_read(senseBatPin);
    2362:	4db3      	ldr	r5, [pc, #716]	; (2630 <sampleTick+0x2e8>)
void sampleTick() {
    SampleBool = false;

    // take last samples time to discover Dt before setting new time
    sample.tickDelta = millis() - sample.sampleTick;
    sample.sampleTick = millis();
    2364:	6060      	str	r0, [r4, #4]

    sample.voltage.batV = adc_read(senseBatPin);
    2366:	786b      	ldrb	r3, [r5, #1]
    2368:	7829      	ldrb	r1, [r5, #0]
    236a:	78a8      	ldrb	r0, [r5, #2]
    236c:	021b      	lsls	r3, r3, #8
    236e:	430b      	orrs	r3, r1
    2370:	0400      	lsls	r0, r0, #16
    2372:	001a      	movs	r2, r3
    2374:	0003      	movs	r3, r0
    2376:	78e8      	ldrb	r0, [r5, #3]
    2378:	4313      	orrs	r3, r2
    237a:	0600      	lsls	r0, r0, #24
    237c:	4ead      	ldr	r6, [pc, #692]	; (2634 <sampleTick+0x2ec>)
    237e:	7929      	ldrb	r1, [r5, #4]
    2380:	4318      	orrs	r0, r3
    2382:	47b0      	blx	r6
    2384:	8120      	strh	r0, [r4, #8]
    sample.voltage.batFloat = sample.voltage.batV * 0.0019;
    2386:	8920      	ldrh	r0, [r4, #8]
    2388:	4bab      	ldr	r3, [pc, #684]	; (2638 <sampleTick+0x2f0>)
    238a:	b280      	uxth	r0, r0
    238c:	4798      	blx	r3
    238e:	4aab      	ldr	r2, [pc, #684]	; (263c <sampleTick+0x2f4>)
    2390:	4fab      	ldr	r7, [pc, #684]	; (2640 <sampleTick+0x2f8>)
    2392:	4bac      	ldr	r3, [pc, #688]	; (2644 <sampleTick+0x2fc>)
    2394:	47b8      	blx	r7
    2396:	4bac      	ldr	r3, [pc, #688]	; (2648 <sampleTick+0x300>)
    2398:	4798      	blx	r3

    sample.voltage.senseA = adc_read(senseAPin);
    239a:	79ab      	ldrb	r3, [r5, #6]
    239c:	7969      	ldrb	r1, [r5, #5]
    // take last samples time to discover Dt before setting new time
    sample.tickDelta = millis() - sample.sampleTick;
    sample.sampleTick = millis();

    sample.voltage.batV = adc_read(senseBatPin);
    sample.voltage.batFloat = sample.voltage.batV * 0.0019;
    239e:	60e0      	str	r0, [r4, #12]

    sample.voltage.senseA = adc_read(senseAPin);
    23a0:	79e8      	ldrb	r0, [r5, #7]
    23a2:	021b      	lsls	r3, r3, #8
    23a4:	430b      	orrs	r3, r1
    23a6:	0400      	lsls	r0, r0, #16
    23a8:	001a      	movs	r2, r3
    23aa:	0003      	movs	r3, r0
    23ac:	7a28      	ldrb	r0, [r5, #8]
    23ae:	4313      	orrs	r3, r2
    23b0:	0600      	lsls	r0, r0, #24
    23b2:	7a69      	ldrb	r1, [r5, #9]
    23b4:	4318      	orrs	r0, r3
    23b6:	47b0      	blx	r6
    sample.voltage.senseB = adc_read(senseBPin);
    23b8:	7aeb      	ldrb	r3, [r5, #11]
    23ba:	7aa9      	ldrb	r1, [r5, #10]
    sample.sampleTick = millis();

    sample.voltage.batV = adc_read(senseBatPin);
    sample.voltage.batFloat = sample.voltage.batV * 0.0019;

    sample.voltage.senseA = adc_read(senseAPin);
    23bc:	8220      	strh	r0, [r4, #16]
    sample.voltage.senseB = adc_read(senseBPin);
    23be:	7b28      	ldrb	r0, [r5, #12]
    23c0:	021b      	lsls	r3, r3, #8
    23c2:	430b      	orrs	r3, r1
    23c4:	0400      	lsls	r0, r0, #16
    23c6:	001a      	movs	r2, r3
    23c8:	0003      	movs	r3, r0
    23ca:	7b68      	ldrb	r0, [r5, #13]
    23cc:	4313      	orrs	r3, r2
    23ce:	0600      	lsls	r0, r0, #24
    23d0:	7ba9      	ldrb	r1, [r5, #14]
    23d2:	4318      	orrs	r0, r3
    23d4:	47b0      	blx	r6
    sample.voltage.senseC = adc_read(senseCPin);
    23d6:	7c2b      	ldrb	r3, [r5, #16]
    23d8:	7be9      	ldrb	r1, [r5, #15]

    sample.voltage.batV = adc_read(senseBatPin);
    sample.voltage.batFloat = sample.voltage.batV * 0.0019;

    sample.voltage.senseA = adc_read(senseAPin);
    sample.voltage.senseB = adc_read(senseBPin);
    23da:	8260      	strh	r0, [r4, #18]
    sample.voltage.senseC = adc_read(senseCPin);
    23dc:	7c68      	ldrb	r0, [r5, #17]
    23de:	021b      	lsls	r3, r3, #8
    23e0:	430b      	orrs	r3, r1
    23e2:	0400      	lsls	r0, r0, #16
    23e4:	001a      	movs	r2, r3
    23e6:	0003      	movs	r3, r0
    23e8:	7ca8      	ldrb	r0, [r5, #18]
    23ea:	4313      	orrs	r3, r2
    23ec:	0600      	lsls	r0, r0, #24
    23ee:	7ce9      	ldrb	r1, [r5, #19]
    23f0:	4318      	orrs	r0, r3
    23f2:	47b0      	blx	r6
    sample.voltage.senseD = adc_read(senseDPin);
    23f4:	7d6b      	ldrb	r3, [r5, #21]
    23f6:	7d29      	ldrb	r1, [r5, #20]
    sample.voltage.batV = adc_read(senseBatPin);
    sample.voltage.batFloat = sample.voltage.batV * 0.0019;

    sample.voltage.senseA = adc_read(senseAPin);
    sample.voltage.senseB = adc_read(senseBPin);
    sample.voltage.senseC = adc_read(senseCPin);
    23f8:	82a0      	strh	r0, [r4, #20]
    sample.voltage.senseD = adc_read(senseDPin);
    23fa:	7da8      	ldrb	r0, [r5, #22]
    23fc:	021b      	lsls	r3, r3, #8
    23fe:	430b      	orrs	r3, r1
    2400:	0400      	lsls	r0, r0, #16
    2402:	001a      	movs	r2, r3
    2404:	0003      	movs	r3, r0
    2406:	7de8      	ldrb	r0, [r5, #23]
    2408:	4313      	orrs	r3, r2
    240a:	0600      	lsls	r0, r0, #24
    240c:	7e29      	ldrb	r1, [r5, #24]
    240e:	4318      	orrs	r0, r3
    2410:	47b0      	blx	r6

    sample.analogRaw = adc_read(analogAccelPin);
    2412:	7eab      	ldrb	r3, [r5, #26]
    2414:	7e69      	ldrb	r1, [r5, #25]
    sample.voltage.batFloat = sample.voltage.batV * 0.0019;

    sample.voltage.senseA = adc_read(senseAPin);
    sample.voltage.senseB = adc_read(senseBPin);
    sample.voltage.senseC = adc_read(senseCPin);
    sample.voltage.senseD = adc_read(senseDPin);
    2416:	82e0      	strh	r0, [r4, #22]

    sample.analogRaw = adc_read(analogAccelPin);
    2418:	7ee8      	ldrb	r0, [r5, #27]
    241a:	021b      	lsls	r3, r3, #8
    241c:	430b      	orrs	r3, r1
    241e:	0400      	lsls	r0, r0, #16
    2420:	001a      	movs	r2, r3
    2422:	0003      	movs	r3, r0
    2424:	7f28      	ldrb	r0, [r5, #28]
    2426:	4313      	orrs	r3, r2
    2428:	0600      	lsls	r0, r0, #24
    242a:	7f69      	ldrb	r1, [r5, #29]
    242c:	4318      	orrs	r0, r3
    242e:	47b0      	blx	r6
    2430:	8320      	strh	r0, [r4, #24]
    sample.analogAccel = (sample.analogRaw - 3900) * -0.0154;
    2432:	8b20      	ldrh	r0, [r4, #24]
    2434:	4b85      	ldr	r3, [pc, #532]	; (264c <sampleTick+0x304>)
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    2436:	2780      	movs	r7, #128	; 0x80
    2438:	18c0      	adds	r0, r0, r3
    243a:	4b7f      	ldr	r3, [pc, #508]	; (2638 <sampleTick+0x2f0>)
    243c:	4798      	blx	r3
    243e:	4a84      	ldr	r2, [pc, #528]	; (2650 <sampleTick+0x308>)
    2440:	4e7f      	ldr	r6, [pc, #508]	; (2640 <sampleTick+0x2f8>)
    2442:	4b84      	ldr	r3, [pc, #528]	; (2654 <sampleTick+0x30c>)
    2444:	47b0      	blx	r6
    2446:	4b80      	ldr	r3, [pc, #512]	; (2648 <sampleTick+0x300>)
    2448:	4798      	blx	r3
    uint8_t dummy_Tx = 0xFF;
    uint8_t dummy_rx;

    pinLow(cs_baro);
    //dummy_rx = spiDataTransfer(SPI2, 0x50);
    byteOut(spi2SCK,spi2MOSI, 0x50);
    244a:	2250      	movs	r2, #80	; 0x50
    244c:	4b82      	ldr	r3, [pc, #520]	; (2658 <sampleTick+0x310>)
    244e:	01ff      	lsls	r7, r7, #7
    sample.voltage.senseB = adc_read(senseBPin);
    sample.voltage.senseC = adc_read(senseCPin);
    sample.voltage.senseD = adc_read(senseDPin);

    sample.analogRaw = adc_read(analogAccelPin);
    sample.analogAccel = (sample.analogRaw - 3900) * -0.0154;
    2450:	61e0      	str	r0, [r4, #28]
    uint8_t dummy_Tx = 0xFF;
    uint8_t dummy_rx;

    pinLow(cs_baro);
    //dummy_rx = spiDataTransfer(SPI2, 0x50);
    byteOut(spi2SCK,spi2MOSI, 0x50);
    2452:	002e      	movs	r6, r5
    2454:	615f      	str	r7, [r3, #20]
    2456:	9200      	str	r2, [sp, #0]
    2458:	7fea      	ldrb	r2, [r5, #31]
    245a:	7fa8      	ldrb	r0, [r5, #30]
    245c:	0212      	lsls	r2, r2, #8
    245e:	4302      	orrs	r2, r0
    2460:	0011      	movs	r1, r2
    2462:	002b      	movs	r3, r5
    2464:	361e      	adds	r6, #30
    2466:	78b2      	ldrb	r2, [r6, #2]
    2468:	3323      	adds	r3, #35	; 0x23
    246a:	0412      	lsls	r2, r2, #16
    246c:	430a      	orrs	r2, r1
    246e:	78f1      	ldrb	r1, [r6, #3]
    2470:	7818      	ldrb	r0, [r3, #0]
    2472:	0609      	lsls	r1, r1, #24
    2474:	4311      	orrs	r1, r2
    2476:	7932      	ldrb	r2, [r6, #4]
    2478:	789d      	ldrb	r5, [r3, #2]
    247a:	9203      	str	r2, [sp, #12]
    247c:	785a      	ldrb	r2, [r3, #1]
    247e:	042d      	lsls	r5, r5, #16
    2480:	0212      	lsls	r2, r2, #8
    2482:	4302      	orrs	r2, r0
    2484:	9102      	str	r1, [sp, #8]
    2486:	0011      	movs	r1, r2
    2488:	002a      	movs	r2, r5
    248a:	78dd      	ldrb	r5, [r3, #3]
    248c:	791b      	ldrb	r3, [r3, #4]
    248e:	430a      	orrs	r2, r1
    2490:	062d      	lsls	r5, r5, #24
    2492:	4315      	orrs	r5, r2
    2494:	9304      	str	r3, [sp, #16]
    2496:	9a02      	ldr	r2, [sp, #8]
    2498:	9904      	ldr	r1, [sp, #16]
    249a:	9b03      	ldr	r3, [sp, #12]
    249c:	0028      	movs	r0, r5
    249e:	4e6f      	ldr	r6, [pc, #444]	; (265c <sampleTick+0x314>)
    24a0:	47b0      	blx	r6
    pinHigh(cs_baro);
    delay_us(600);
    24a2:	2096      	movs	r0, #150	; 0x96
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    24a4:	4b6c      	ldr	r3, [pc, #432]	; (2658 <sampleTick+0x310>)
    24a6:	0080      	lsls	r0, r0, #2
    24a8:	619f      	str	r7, [r3, #24]
    24aa:	4b6d      	ldr	r3, [pc, #436]	; (2660 <sampleTick+0x318>)
    24ac:	4798      	blx	r3
    uint32_t tempRaw = readMS5803AdcResults();
    24ae:	4b6d      	ldr	r3, [pc, #436]	; (2664 <sampleTick+0x31c>)
    24b0:	4798      	blx	r3
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    24b2:	4b69      	ldr	r3, [pc, #420]	; (2658 <sampleTick+0x310>)
    24b4:	9005      	str	r0, [sp, #20]
    24b6:	615f      	str	r7, [r3, #20]

    pinLow(cs_baro);
    //dummy_rx = spiDataTransfer(SPI2, 0x46);
    byteOut(spi2SCK,spi2MOSI, 0x46);
    24b8:	2346      	movs	r3, #70	; 0x46
    24ba:	9a02      	ldr	r2, [sp, #8]
    24bc:	9300      	str	r3, [sp, #0]
    24be:	0028      	movs	r0, r5
    24c0:	9b03      	ldr	r3, [sp, #12]
    24c2:	9904      	ldr	r1, [sp, #16]
    24c4:	47b0      	blx	r6
    24c6:	2280      	movs	r2, #128	; 0x80
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    24c8:	4b63      	ldr	r3, [pc, #396]	; (2658 <sampleTick+0x310>)
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    24ca:	00d2      	lsls	r2, r2, #3
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    24cc:	619f      	str	r7, [r3, #24]
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    24ce:	4b66      	ldr	r3, [pc, #408]	; (2668 <sampleTick+0x320>)



// Accel data
    pinLow(cs_accel);
    dummy_rx = spiDataTransfer(SPI0, BMI055_X_ACC_LSB | BMI055_READ_REG);
    24d0:	4f66      	ldr	r7, [pc, #408]	; (266c <sampleTick+0x324>)
    24d2:	601a      	str	r2, [r3, #0]
    24d4:	2182      	movs	r1, #130	; 0x82
    24d6:	2000      	movs	r0, #0
    24d8:	47b8      	blx	r7

    u16_t accelXRaw = spiDataTransfer(SPI0,dummy_Tx);
    24da:	21ff      	movs	r1, #255	; 0xff
    24dc:	2000      	movs	r0, #0
    24de:	47b8      	blx	r7
    accelXRaw = accelXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    24e0:	21ff      	movs	r1, #255	; 0xff

// Accel data
    pinLow(cs_accel);
    dummy_rx = spiDataTransfer(SPI0, BMI055_X_ACC_LSB | BMI055_READ_REG);

    u16_t accelXRaw = spiDataTransfer(SPI0,dummy_Tx);
    24e2:	0005      	movs	r5, r0
    accelXRaw = accelXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    24e4:	2000      	movs	r0, #0
    24e6:	47b8      	blx	r7
    24e8:	0200      	lsls	r0, r0, #8
    24ea:	4305      	orrs	r5, r0
    24ec:	b22b      	sxth	r3, r5
    u16_t accelYRaw = spiDataTransfer(SPI0,dummy_Tx);
    24ee:	21ff      	movs	r1, #255	; 0xff
    24f0:	2000      	movs	r0, #0
// Accel data
    pinLow(cs_accel);
    dummy_rx = spiDataTransfer(SPI0, BMI055_X_ACC_LSB | BMI055_READ_REG);

    u16_t accelXRaw = spiDataTransfer(SPI0,dummy_Tx);
    accelXRaw = accelXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    24f2:	9302      	str	r3, [sp, #8]
    u16_t accelYRaw = spiDataTransfer(SPI0,dummy_Tx);
    24f4:	47b8      	blx	r7
    accelYRaw = accelYRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    24f6:	21ff      	movs	r1, #255	; 0xff
    pinLow(cs_accel);
    dummy_rx = spiDataTransfer(SPI0, BMI055_X_ACC_LSB | BMI055_READ_REG);

    u16_t accelXRaw = spiDataTransfer(SPI0,dummy_Tx);
    accelXRaw = accelXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    u16_t accelYRaw = spiDataTransfer(SPI0,dummy_Tx);
    24f8:	0005      	movs	r5, r0
    accelYRaw = accelYRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    24fa:	2000      	movs	r0, #0
    24fc:	47b8      	blx	r7
    u16_t accelZRaw = spiDataTransfer(SPI0,dummy_Tx);
    24fe:	21ff      	movs	r1, #255	; 0xff
    dummy_rx = spiDataTransfer(SPI0, BMI055_X_ACC_LSB | BMI055_READ_REG);

    u16_t accelXRaw = spiDataTransfer(SPI0,dummy_Tx);
    accelXRaw = accelXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    u16_t accelYRaw = spiDataTransfer(SPI0,dummy_Tx);
    accelYRaw = accelYRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    2500:	0206      	lsls	r6, r0, #8
    u16_t accelZRaw = spiDataTransfer(SPI0,dummy_Tx);
    2502:	2000      	movs	r0, #0
    2504:	47b8      	blx	r7
    dummy_rx = spiDataTransfer(SPI0, BMI055_X_ACC_LSB | BMI055_READ_REG);

    u16_t accelXRaw = spiDataTransfer(SPI0,dummy_Tx);
    accelXRaw = accelXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    u16_t accelYRaw = spiDataTransfer(SPI0,dummy_Tx);
    accelYRaw = accelYRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    2506:	4335      	orrs	r5, r6
    2508:	b22e      	sxth	r6, r5
    u16_t accelZRaw = spiDataTransfer(SPI0,dummy_Tx);
    accelZRaw = accelZRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    250a:	21ff      	movs	r1, #255	; 0xff

    u16_t accelXRaw = spiDataTransfer(SPI0,dummy_Tx);
    accelXRaw = accelXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    u16_t accelYRaw = spiDataTransfer(SPI0,dummy_Tx);
    accelYRaw = accelYRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    u16_t accelZRaw = spiDataTransfer(SPI0,dummy_Tx);
    250c:	0005      	movs	r5, r0
    accelZRaw = accelZRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    250e:	2000      	movs	r0, #0
    2510:	47b8      	blx	r7
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    2512:	2280      	movs	r2, #128	; 0x80
    2514:	4b56      	ldr	r3, [pc, #344]	; (2670 <sampleTick+0x328>)
    2516:	00d2      	lsls	r2, r2, #3
    2518:	601a      	str	r2, [r3, #0]
    251a:	0200      	lsls	r0, r0, #8

    if (negativeX) {
        accelXint = accelXint | ~((1 << 16) - 1);
        accelXint =  accelXint >> 4;
    } else {
        accelXint =  accelXint >> 4;
    251c:	9b02      	ldr	r3, [sp, #8]
    u16_t accelXRaw = spiDataTransfer(SPI0,dummy_Tx);
    accelXRaw = accelXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    u16_t accelYRaw = spiDataTransfer(SPI0,dummy_Tx);
    accelYRaw = accelYRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    u16_t accelZRaw = spiDataTransfer(SPI0,dummy_Tx);
    accelZRaw = accelZRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    251e:	4305      	orrs	r5, r0
    2520:	b22d      	sxth	r5, r5

    if (negativeX) {
        accelXint = accelXint | ~((1 << 16) - 1);
        accelXint =  accelXint >> 4;
    } else {
        accelXint =  accelXint >> 4;
    2522:	1118      	asrs	r0, r3, #4
    }
    if (negativeZ) {
        accelZint =  accelZint | ~((1 << 16) - 1);
        accelZint =  accelZint >> 4;
    } else {
        accelZint =  accelZint >> 4;
    2524:	112b      	asrs	r3, r5, #4
    2526:	9302      	str	r3, [sp, #8]
    }

    sample.accelX =  accelXint * BMI055_ACCEL_16G_DIV;
    2528:	4b43      	ldr	r3, [pc, #268]	; (2638 <sampleTick+0x2f0>)
    252a:	4798      	blx	r3
    252c:	23fe      	movs	r3, #254	; 0xfe
    252e:	4d44      	ldr	r5, [pc, #272]	; (2640 <sampleTick+0x2f8>)
    2530:	2200      	movs	r2, #0
    2532:	059b      	lsls	r3, r3, #22
    2534:	47a8      	blx	r5
    2536:	4b44      	ldr	r3, [pc, #272]	; (2648 <sampleTick+0x300>)
    2538:	4798      	blx	r3
    }
    if (negativeY) {
        accelYint =  accelYint | ~((1 << 16) - 1);
        accelYint =  accelYint >> 4;
    } else {
        accelYint =  accelYint >> 4;
    253a:	1136      	asrs	r6, r6, #4
        accelZint =  accelZint >> 4;
    } else {
        accelZint =  accelZint >> 4;
    }

    sample.accelX =  accelXint * BMI055_ACCEL_16G_DIV;
    253c:	6220      	str	r0, [r4, #32]
    sample.accelY =  accelYint * BMI055_ACCEL_16G_DIV;
    253e:	4b3e      	ldr	r3, [pc, #248]	; (2638 <sampleTick+0x2f0>)
    2540:	0030      	movs	r0, r6
    2542:	4798      	blx	r3
    2544:	23fe      	movs	r3, #254	; 0xfe
    2546:	2200      	movs	r2, #0
    2548:	059b      	lsls	r3, r3, #22
    254a:	47a8      	blx	r5
    254c:	4b3e      	ldr	r3, [pc, #248]	; (2648 <sampleTick+0x300>)
    254e:	4798      	blx	r3
    sample.accelZ = -accelZint * BMI055_ACCEL_16G_DIV;
    2550:	9b02      	ldr	r3, [sp, #8]
    } else {
        accelZint =  accelZint >> 4;
    }

    sample.accelX =  accelXint * BMI055_ACCEL_16G_DIV;
    sample.accelY =  accelYint * BMI055_ACCEL_16G_DIV;
    2552:	6260      	str	r0, [r4, #36]	; 0x24
    sample.accelZ = -accelZint * BMI055_ACCEL_16G_DIV;
    2554:	4258      	negs	r0, r3
    2556:	4b38      	ldr	r3, [pc, #224]	; (2638 <sampleTick+0x2f0>)
    2558:	4798      	blx	r3
    255a:	23fe      	movs	r3, #254	; 0xfe
    255c:	2200      	movs	r2, #0
    255e:	059b      	lsls	r3, r3, #22
    2560:	47a8      	blx	r5
    2562:	4b39      	ldr	r3, [pc, #228]	; (2648 <sampleTick+0x300>)
    2564:	4798      	blx	r3
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    2566:	2280      	movs	r2, #128	; 0x80
    2568:	4b3b      	ldr	r3, [pc, #236]	; (2658 <sampleTick+0x310>)
    256a:	00d2      	lsls	r2, r2, #3
    256c:	62a0      	str	r0, [r4, #40]	; 0x28


    // Gyro data
    pinLow(cs_gyro);
    dummy_rx = spiDataTransfer(SPI0, BMI055_X_GYRO_LSB | BMI055_READ_REG);
    256e:	2182      	movs	r1, #130	; 0x82
    2570:	615a      	str	r2, [r3, #20]
    2572:	2000      	movs	r0, #0
    2574:	47b8      	blx	r7
    u16_t gyroXRaw = spiDataTransfer(SPI0,dummy_Tx);
    2576:	21ff      	movs	r1, #255	; 0xff
    2578:	2000      	movs	r0, #0
    257a:	47b8      	blx	r7
    gyroXRaw =  gyroXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    257c:	21ff      	movs	r1, #255	; 0xff


    // Gyro data
    pinLow(cs_gyro);
    dummy_rx = spiDataTransfer(SPI0, BMI055_X_GYRO_LSB | BMI055_READ_REG);
    u16_t gyroXRaw = spiDataTransfer(SPI0,dummy_Tx);
    257e:	0005      	movs	r5, r0
    gyroXRaw =  gyroXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    2580:	2000      	movs	r0, #0
    2582:	47b8      	blx	r7
    2584:	0200      	lsls	r0, r0, #8
    2586:	4305      	orrs	r5, r0
    2588:	b22b      	sxth	r3, r5
    u16_t gyroYRaw = spiDataTransfer(SPI0,dummy_Tx);
    258a:	21ff      	movs	r1, #255	; 0xff
    258c:	2000      	movs	r0, #0

    // Gyro data
    pinLow(cs_gyro);
    dummy_rx = spiDataTransfer(SPI0, BMI055_X_GYRO_LSB | BMI055_READ_REG);
    u16_t gyroXRaw = spiDataTransfer(SPI0,dummy_Tx);
    gyroXRaw =  gyroXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    258e:	9302      	str	r3, [sp, #8]
    u16_t gyroYRaw = spiDataTransfer(SPI0,dummy_Tx);
    2590:	47b8      	blx	r7
    gyroYRaw =  gyroYRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    2592:	21ff      	movs	r1, #255	; 0xff
    // Gyro data
    pinLow(cs_gyro);
    dummy_rx = spiDataTransfer(SPI0, BMI055_X_GYRO_LSB | BMI055_READ_REG);
    u16_t gyroXRaw = spiDataTransfer(SPI0,dummy_Tx);
    gyroXRaw =  gyroXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    u16_t gyroYRaw = spiDataTransfer(SPI0,dummy_Tx);
    2594:	0005      	movs	r5, r0
    gyroYRaw =  gyroYRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    2596:	2000      	movs	r0, #0
    2598:	47b8      	blx	r7
    u16_t gyroZRaw = spiDataTransfer(SPI0,dummy_Tx);
    259a:	21ff      	movs	r1, #255	; 0xff
    pinLow(cs_gyro);
    dummy_rx = spiDataTransfer(SPI0, BMI055_X_GYRO_LSB | BMI055_READ_REG);
    u16_t gyroXRaw = spiDataTransfer(SPI0,dummy_Tx);
    gyroXRaw =  gyroXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    u16_t gyroYRaw = spiDataTransfer(SPI0,dummy_Tx);
    gyroYRaw =  gyroYRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    259c:	0206      	lsls	r6, r0, #8
    u16_t gyroZRaw = spiDataTransfer(SPI0,dummy_Tx);
    259e:	2000      	movs	r0, #0
    25a0:	47b8      	blx	r7
    pinLow(cs_gyro);
    dummy_rx = spiDataTransfer(SPI0, BMI055_X_GYRO_LSB | BMI055_READ_REG);
    u16_t gyroXRaw = spiDataTransfer(SPI0,dummy_Tx);
    gyroXRaw =  gyroXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    u16_t gyroYRaw = spiDataTransfer(SPI0,dummy_Tx);
    gyroYRaw =  gyroYRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    25a2:	4335      	orrs	r5, r6
    25a4:	b22e      	sxth	r6, r5
    u16_t gyroZRaw = spiDataTransfer(SPI0,dummy_Tx);
    gyroZRaw =  gyroZRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    25a6:	21ff      	movs	r1, #255	; 0xff
    dummy_rx = spiDataTransfer(SPI0, BMI055_X_GYRO_LSB | BMI055_READ_REG);
    u16_t gyroXRaw = spiDataTransfer(SPI0,dummy_Tx);
    gyroXRaw =  gyroXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    u16_t gyroYRaw = spiDataTransfer(SPI0,dummy_Tx);
    gyroYRaw =  gyroYRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    u16_t gyroZRaw = spiDataTransfer(SPI0,dummy_Tx);
    25a8:	0005      	movs	r5, r0
    gyroZRaw =  gyroZRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    25aa:	2000      	movs	r0, #0
    25ac:	47b8      	blx	r7
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    25ae:	2280      	movs	r2, #128	; 0x80
    25b0:	4b29      	ldr	r3, [pc, #164]	; (2658 <sampleTick+0x310>)
    25b2:	00d2      	lsls	r2, r2, #3
    25b4:	619a      	str	r2, [r3, #24]

    if (negativeXgyro) {
        gyroXint =  gyroXint | ~((1 << 16) - 1);
        gyroXint =  gyroXint >> 4;
    } else {
        gyroXint =  gyroXint >> 4;
    25b6:	9b02      	ldr	r3, [sp, #8]
    u16_t gyroXRaw = spiDataTransfer(SPI0,dummy_Tx);
    gyroXRaw =  gyroXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    u16_t gyroYRaw = spiDataTransfer(SPI0,dummy_Tx);
    gyroYRaw =  gyroYRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    u16_t gyroZRaw = spiDataTransfer(SPI0,dummy_Tx);
    gyroZRaw =  gyroZRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    25b8:	0207      	lsls	r7, r0, #8

    if (negativeXgyro) {
        gyroXint =  gyroXint | ~((1 << 16) - 1);
        gyroXint =  gyroXint >> 4;
    } else {
        gyroXint =  gyroXint >> 4;
    25ba:	1118      	asrs	r0, r3, #4
        gyroZint =  gyroZint >> 4;
    } else {
        gyroZint =  gyroZint >> 4;
    }

    sample.gyroX =  gyroXint * BMI055_GYRO_2000DS_DIV;
    25bc:	4b1e      	ldr	r3, [pc, #120]	; (2638 <sampleTick+0x2f0>)
    25be:	4798      	blx	r3
    25c0:	23fe      	movs	r3, #254	; 0xfe
    u16_t gyroXRaw = spiDataTransfer(SPI0,dummy_Tx);
    gyroXRaw =  gyroXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    u16_t gyroYRaw = spiDataTransfer(SPI0,dummy_Tx);
    gyroYRaw =  gyroYRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    u16_t gyroZRaw = spiDataTransfer(SPI0,dummy_Tx);
    gyroZRaw =  gyroZRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    25c2:	433d      	orrs	r5, r7
        gyroZint =  gyroZint >> 4;
    } else {
        gyroZint =  gyroZint >> 4;
    }

    sample.gyroX =  gyroXint * BMI055_GYRO_2000DS_DIV;
    25c4:	2200      	movs	r2, #0
    u16_t gyroXRaw = spiDataTransfer(SPI0,dummy_Tx);
    gyroXRaw =  gyroXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    u16_t gyroYRaw = spiDataTransfer(SPI0,dummy_Tx);
    gyroYRaw =  gyroYRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    u16_t gyroZRaw = spiDataTransfer(SPI0,dummy_Tx);
    gyroZRaw =  gyroZRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    25c6:	b22f      	sxth	r7, r5
        gyroZint =  gyroZint >> 4;
    } else {
        gyroZint =  gyroZint >> 4;
    }

    sample.gyroX =  gyroXint * BMI055_GYRO_2000DS_DIV;
    25c8:	059b      	lsls	r3, r3, #22
    25ca:	4d1d      	ldr	r5, [pc, #116]	; (2640 <sampleTick+0x2f8>)
    25cc:	47a8      	blx	r5
    25ce:	4b1e      	ldr	r3, [pc, #120]	; (2648 <sampleTick+0x300>)
    25d0:	4798      	blx	r3

    if (negativeYgyro) {
        gyroYint =  gyroYint | ~((1 << 16) - 1);
        gyroYint =  gyroYint >> 4;
    } else {
        gyroYint =  gyroYint >> 4;
    25d2:	1136      	asrs	r6, r6, #4
        gyroZint =  gyroZint >> 4;
    } else {
        gyroZint =  gyroZint >> 4;
    }

    sample.gyroX =  gyroXint * BMI055_GYRO_2000DS_DIV;
    25d4:	62e0      	str	r0, [r4, #44]	; 0x2c
    sample.gyroY =  gyroYint * BMI055_GYRO_2000DS_DIV;
    25d6:	4b18      	ldr	r3, [pc, #96]	; (2638 <sampleTick+0x2f0>)
    25d8:	0030      	movs	r0, r6
    25da:	4798      	blx	r3
    25dc:	23fe      	movs	r3, #254	; 0xfe
    25de:	2200      	movs	r2, #0
    25e0:	059b      	lsls	r3, r3, #22
    25e2:	47a8      	blx	r5
    25e4:	4b18      	ldr	r3, [pc, #96]	; (2648 <sampleTick+0x300>)
    25e6:	4798      	blx	r3

    if (negativeZgyro) {
        gyroZint =  gyroZint | ~((1 << 16) - 1);
        gyroZint =  gyroZint >> 4;
    } else {
        gyroZint =  gyroZint >> 4;
    25e8:	113f      	asrs	r7, r7, #4
    }

    sample.gyroX =  gyroXint * BMI055_GYRO_2000DS_DIV;
    sample.gyroY =  gyroYint * BMI055_GYRO_2000DS_DIV;
    25ea:	6320      	str	r0, [r4, #48]	; 0x30
    sample.gyroZ =  gyroZint * BMI055_GYRO_2000DS_DIV;
    25ec:	4b12      	ldr	r3, [pc, #72]	; (2638 <sampleTick+0x2f0>)
    25ee:	0038      	movs	r0, r7
    25f0:	4798      	blx	r3
    25f2:	23fe      	movs	r3, #254	; 0xfe
    25f4:	2200      	movs	r2, #0
    25f6:	059b      	lsls	r3, r3, #22
    25f8:	47a8      	blx	r5
    25fa:	4b13      	ldr	r3, [pc, #76]	; (2648 <sampleTick+0x300>)
    25fc:	4798      	blx	r3

    //delay_us(800);
    delay_ms(5);
    25fe:	4b1d      	ldr	r3, [pc, #116]	; (2674 <sampleTick+0x32c>)
        gyroZint =  gyroZint >> 4;
    }

    sample.gyroX =  gyroXint * BMI055_GYRO_2000DS_DIV;
    sample.gyroY =  gyroYint * BMI055_GYRO_2000DS_DIV;
    sample.gyroZ =  gyroZint * BMI055_GYRO_2000DS_DIV;
    2600:	6360      	str	r0, [r4, #52]	; 0x34

    //delay_us(800);
    delay_ms(5);
    2602:	2005      	movs	r0, #5
    2604:	4798      	blx	r3
    u32_t PressureRaw = readMS5803AdcResults();
    2606:	4b17      	ldr	r3, [pc, #92]	; (2664 <sampleTick+0x31c>)
    2608:	4798      	blx	r3
    ConvertPressureTemperature(PressureRaw, tempRaw, &sample.temperatureCelcus, &sample.pressureMbar);
    260a:	4a1b      	ldr	r2, [pc, #108]	; (2678 <sampleTick+0x330>)
    260c:	9905      	ldr	r1, [sp, #20]
    260e:	4b1b      	ldr	r3, [pc, #108]	; (267c <sampleTick+0x334>)
    2610:	4d1b      	ldr	r5, [pc, #108]	; (2680 <sampleTick+0x338>)
    2612:	47a8      	blx	r5
    sample.altitudefeet = paToFeetNOAA(sample.pressureMbar);
    2614:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    2616:	4b1b      	ldr	r3, [pc, #108]	; (2684 <sampleTick+0x33c>)
    2618:	4798      	blx	r3
    261a:	6420      	str	r0, [r4, #64]	; 0x40
    261c:	6461      	str	r1, [r4, #68]	; 0x44


}
    261e:	b007      	add	sp, #28
    2620:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2622:	46c0      	nop			; (mov r8, r8)
    2624:	20000508 	.word	0x20000508
    2628:	0000101d 	.word	0x0000101d
    262c:	20000790 	.word	0x20000790
    2630:	0000649b 	.word	0x0000649b
    2634:	00000c19 	.word	0x00000c19
    2638:	00005f01 	.word	0x00005f01
    263c:	77318fc5 	.word	0x77318fc5
    2640:	000052b9 	.word	0x000052b9
    2644:	3f5f212d 	.word	0x3f5f212d
    2648:	0000609d 	.word	0x0000609d
    264c:	fffff0c4 	.word	0xfffff0c4
    2650:	02de00d2 	.word	0x02de00d2
    2654:	bf8f8a09 	.word	0xbf8f8a09
    2658:	41004400 	.word	0x41004400
    265c:	00000c81 	.word	0x00000c81
    2660:	00000fa1 	.word	0x00000fa1
    2664:	0000041d 	.word	0x0000041d
    2668:	41004494 	.word	0x41004494
    266c:	00002799 	.word	0x00002799
    2670:	41004498 	.word	0x41004498
    2674:	00000fd1 	.word	0x00000fd1
    2678:	200007cc 	.word	0x200007cc
    267c:	200007c8 	.word	0x200007c8
    2680:	000004d1 	.word	0x000004d1
    2684:	00000571 	.word	0x00000571

00002688 <sercomClockEnable>:
#include <util.h>

void sercomClockEnable(SercomId id, uint32_t clock_channel, u8_t divider) {
    2688:	b570      	push	{r4, r5, r6, lr}
    268a:	0004      	movs	r4, r0
    // prevent this clock write from changing any other clocks
    PM->APBCMASK.reg |= 1 << (PM_APBCMASK_SERCOM0_Pos + id);
    268c:	2301      	movs	r3, #1
    268e:	1ca6      	adds	r6, r4, #2
    2690:	40b3      	lsls	r3, r6
    2692:	480d      	ldr	r0, [pc, #52]	; (26c8 <sercomClockEnable+0x40>)
#include <util.h>

void sercomClockEnable(SercomId id, uint32_t clock_channel, u8_t divider) {
    2694:	000d      	movs	r5, r1
    // prevent this clock write from changing any other clocks
    PM->APBCMASK.reg |= 1 << (PM_APBCMASK_SERCOM0_Pos + id);
    2696:	6a01      	ldr	r1, [r0, #32]
    2698:	430b      	orrs	r3, r1
    269a:	6203      	str	r3, [r0, #32]


    if (clock_channel != 0) {
    269c:	2d00      	cmp	r5, #0
    269e:	d003      	beq.n	26a8 <sercomClockEnable+0x20>
        // clock generators 3-8 have 8 division factor bits - DIV[7:0]
        gclkEnable(clock_channel, GCLK_SOURCE_DFLL48M, divider);
    26a0:	2107      	movs	r1, #7
    26a2:	0028      	movs	r0, r5
    26a4:	4b09      	ldr	r3, [pc, #36]	; (26cc <sercomClockEnable+0x44>)
    26a6:	4798      	blx	r3
    }


    // attach clock
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
    26a8:	22f0      	movs	r2, #240	; 0xf0
    26aa:	2080      	movs	r0, #128	; 0x80
    26ac:	0229      	lsls	r1, r5, #8
    26ae:	0112      	lsls	r2, r2, #4
    26b0:	4011      	ands	r1, r2
    26b2:	01c0      	lsls	r0, r0, #7
    26b4:	4301      	orrs	r1, r0
    26b6:	0020      	movs	r0, r4
    26b8:	3014      	adds	r0, #20
    26ba:	223f      	movs	r2, #63	; 0x3f
    26bc:	0003      	movs	r3, r0
    26be:	4013      	ands	r3, r2
    26c0:	4319      	orrs	r1, r3
    26c2:	4b03      	ldr	r3, [pc, #12]	; (26d0 <sercomClockEnable+0x48>)
    26c4:	8059      	strh	r1, [r3, #2]
                        GCLK_CLKCTRL_GEN(clock_channel) |
                        GCLK_CLKCTRL_ID(SERCOM0_GCLK_ID_CORE + id);
}
    26c6:	bd70      	pop	{r4, r5, r6, pc}
    26c8:	40000400 	.word	0x40000400
    26cc:	00000f51 	.word	0x00000f51
    26d0:	40000c00 	.word	0x40000c00

000026d4 <sercomReset>:
void computeKalmanStates();



inline static Sercom* sercom(SercomId id) {
    return (Sercom*) (0x42000800U + id * 1024);
    26d4:	4b04      	ldr	r3, [pc, #16]	; (26e8 <sercomReset+0x14>)
    26d6:	0280      	lsls	r0, r0, #10
    26d8:	18c0      	adds	r0, r0, r3


void sercomReset(SercomId id) {
    sercom(id)->SPI.CTRLA.reg = SERCOM_SPI_CTRLA_SWRST;
    26da:	2301      	movs	r3, #1
    26dc:	6003      	str	r3, [r0, #0]
    while(sercom(id)->SPI.CTRLA.reg & SERCOM_SPI_CTRLA_SWRST);
    26de:	6802      	ldr	r2, [r0, #0]
    26e0:	421a      	tst	r2, r3
    26e2:	d1fc      	bne.n	26de <sercomReset+0xa>
}
    26e4:	4770      	bx	lr
    26e6:	46c0      	nop			; (mov r8, r8)
    26e8:	42000800 	.word	0x42000800

000026ec <sercomSpiMasterInit>:
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
}


void sercomSpiMasterInit(SercomId id, u32_t dipo, u32_t dopo, bool cpol, bool cpha, u8_t baud) {
    26ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    26ee:	0004      	movs	r4, r0
    26f0:	9300      	str	r3, [sp, #0]
    26f2:	ab08      	add	r3, sp, #32
    26f4:	781b      	ldrb	r3, [r3, #0]
    26f6:	000e      	movs	r6, r1
    26f8:	9301      	str	r3, [sp, #4]
    26fa:	ab09      	add	r3, sp, #36	; 0x24
    26fc:	781f      	ldrb	r7, [r3, #0]

    sercomReset(id);
    26fe:	4b12      	ldr	r3, [pc, #72]	; (2748 <sercomSpiMasterInit+0x5c>)
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
}


void sercomSpiMasterInit(SercomId id, u32_t dipo, u32_t dopo, bool cpol, bool cpha, u8_t baud) {
    2700:	0015      	movs	r5, r2

    sercomReset(id);
    2702:	4798      	blx	r3
    2704:	4b11      	ldr	r3, [pc, #68]	; (274c <sercomSpiMasterInit+0x60>)
    2706:	02a4      	lsls	r4, r4, #10
    2708:	18e4      	adds	r4, r4, r3

    sercom(id)->SPI.CTRLB.reg
        = SERCOM_SPI_CTRLB_RXEN;
    270a:	2380      	movs	r3, #128	; 0x80
    270c:	029b      	lsls	r3, r3, #10
    270e:	6063      	str	r3, [r4, #4]
    2710:	23c0      	movs	r3, #192	; 0xc0
    sercom(id)->SPI.BAUD.reg = baud;

    sercom(id)->SPI.CTRLA.reg
        = SERCOM_SPI_CTRLA_ENABLE
          | SERCOM_SPI_CTRLA_MODE_SPI_MASTER
          | SERCOM_SPI_CTRLA_DIPO(dipo)
    2712:	21c0      	movs	r1, #192	; 0xc0
    2714:	042d      	lsls	r5, r5, #16
    2716:	029b      	lsls	r3, r3, #10
    2718:	402b      	ands	r3, r5
    271a:	250e      	movs	r5, #14
    271c:	0536      	lsls	r6, r6, #20
    271e:	0389      	lsls	r1, r1, #14
    2720:	4031      	ands	r1, r6
          | SERCOM_SPI_CTRLA_DOPO(dopo)
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
    2722:	9e00      	ldr	r6, [sp, #0]
    2724:	431d      	orrs	r5, r3
    2726:	1e73      	subs	r3, r6, #1
    2728:	419e      	sbcs	r6, r3
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
    272a:	9b01      	ldr	r3, [sp, #4]
    sercom(id)->SPI.CTRLA.reg
        = SERCOM_SPI_CTRLA_ENABLE
          | SERCOM_SPI_CTRLA_MODE_SPI_MASTER
          | SERCOM_SPI_CTRLA_DIPO(dipo)
          | SERCOM_SPI_CTRLA_DOPO(dopo)
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
    272c:	0772      	lsls	r2, r6, #29
    272e:	430d      	orrs	r5, r1
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
    2730:	432a      	orrs	r2, r5
    2732:	1e59      	subs	r1, r3, #1
    2734:	418b      	sbcs	r3, r1
    2736:	0016      	movs	r6, r2
    2738:	071b      	lsls	r3, r3, #28
    273a:	431e      	orrs	r6, r3
    sercomReset(id);

    sercom(id)->SPI.CTRLB.reg
        = SERCOM_SPI_CTRLB_RXEN;

    sercom(id)->SPI.BAUD.reg = baud;
    273c:	7327      	strb	r7, [r4, #12]

    sercom(id)->SPI.CTRLA.reg
        = SERCOM_SPI_CTRLA_ENABLE
    273e:	6026      	str	r6, [r4, #0]
        };
    }
}

static inline void SPI_sync(SercomId id) {
    while  (sercom(id)->SPI.SYNCBUSY.bit.CTRLB);
    2740:	69e3      	ldr	r3, [r4, #28]
    2742:	075b      	lsls	r3, r3, #29
    2744:	d4fc      	bmi.n	2740 <sercomSpiMasterInit+0x54>
          | SERCOM_SPI_CTRLA_DOPO(dopo)
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);

    SPI_sync(id);
}
    2746:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    2748:	000026d5 	.word	0x000026d5
    274c:	42000800 	.word	0x42000800

00002750 <sercomUartInit>:




void sercomUartInit(SercomId id, u32_t rxpo, u32_t txpo, int32_t fBAUD) {
    2750:	b570      	push	{r4, r5, r6, lr}
    2752:	0006      	movs	r6, r0

    //float BAUD = 65536*(1-(16*(115200/(48000000/8))));


    sercomReset(id);
    2754:	4b0c      	ldr	r3, [pc, #48]	; (2788 <sercomUartInit+0x38>)
}




void sercomUartInit(SercomId id, u32_t rxpo, u32_t txpo, int32_t fBAUD) {
    2756:	000d      	movs	r5, r1
    2758:	0014      	movs	r4, r2

    //float BAUD = 65536*(1-(16*(115200/(48000000/8))));


    sercomReset(id);
    275a:	4798      	blx	r3
void computeKalmanStates();



inline static Sercom* sercom(SercomId id) {
    return (Sercom*) (0x42000800U + id * 1024);
    275c:	4b0b      	ldr	r3, [pc, #44]	; (278c <sercomUartInit+0x3c>)
    275e:	02b0      	lsls	r0, r6, #10
    2760:	18c0      	adds	r0, r0, r3
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    2762:	2304      	movs	r3, #4
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    2764:	22c0      	movs	r2, #192	; 0xc0

    //float BAUD = 65536*(1-(16*(115200/(48000000/8))));


    sercomReset(id);
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    2766:	6003      	str	r3, [r0, #0]
    sercom(id)->USART.BAUD.reg = 45403;
    2768:	4b09      	ldr	r3, [pc, #36]	; (2790 <sercomUartInit+0x40>)
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    276a:	0529      	lsls	r1, r5, #20
    //float BAUD = 65536*(1-(16*(115200/(48000000/8))));


    sercomReset(id);
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    sercom(id)->USART.BAUD.reg = 45403;
    276c:	8183      	strh	r3, [r0, #12]
    sercom(id)->USART.CTRLB.reg
        = SERCOM_USART_CTRLB_RXEN
    276e:	23c0      	movs	r3, #192	; 0xc0
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    2770:	0392      	lsls	r2, r2, #14
    2772:	4011      	ands	r1, r2
    2774:	4a07      	ldr	r2, [pc, #28]	; (2794 <sercomUartInit+0x44>)

    sercomReset(id);
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    sercom(id)->USART.BAUD.reg = 45403;
    sercom(id)->USART.CTRLB.reg
        = SERCOM_USART_CTRLB_RXEN
    2776:	029b      	lsls	r3, r3, #10
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    2778:	0424      	lsls	r4, r4, #16

    sercomReset(id);
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    sercom(id)->USART.BAUD.reg = 45403;
    sercom(id)->USART.CTRLB.reg
        = SERCOM_USART_CTRLB_RXEN
    277a:	6043      	str	r3, [r0, #4]
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    277c:	4311      	orrs	r1, r2
    277e:	4023      	ands	r3, r4
    2780:	430b      	orrs	r3, r1
    sercom(id)->USART.BAUD.reg = 45403;
    sercom(id)->USART.CTRLB.reg
        = SERCOM_USART_CTRLB_RXEN
          | SERCOM_USART_CTRLB_TXEN;
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
    2782:	6003      	str	r3, [r0, #0]
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
}
    2784:	bd70      	pop	{r4, r5, r6, pc}
    2786:	46c0      	nop			; (mov r8, r8)
    2788:	000026d5 	.word	0x000026d5
    278c:	42000800 	.word	0x42000800
    2790:	ffffb15b 	.word	0xffffb15b
    2794:	40000006 	.word	0x40000006

00002798 <spiDataTransfer>:
    2798:	4b04      	ldr	r3, [pc, #16]	; (27ac <spiDataTransfer+0x14>)
    279a:	0280      	lsls	r0, r0, #10
    279c:	18c0      	adds	r0, r0, r3

u8_t spiDataTransfer(SercomId id, u8_t data) {
    sercom(id)->SPI.DATA.reg = data;
    279e:	6281      	str	r1, [r0, #40]	; 0x28
    while(sercom(id)->SPI.INTFLAG.bit.RXC == 0);
    27a0:	7e03      	ldrb	r3, [r0, #24]
    27a2:	075b      	lsls	r3, r3, #29
    27a4:	d5fc      	bpl.n	27a0 <spiDataTransfer+0x8>
    return sercom(id)->SPI.DATA.reg;
    27a6:	6a80      	ldr	r0, [r0, #40]	; 0x28
    27a8:	b2c0      	uxtb	r0, r0
}
    27aa:	4770      	bx	lr
    27ac:	42000800 	.word	0x42000800

000027b0 <usartDataOut>:
    27b0:	4b04      	ldr	r3, [pc, #16]	; (27c4 <usartDataOut+0x14>)
    27b2:	0280      	lsls	r0, r0, #10
    27b4:	18c0      	adds	r0, r0, r3
    while(sercom(id)->SPI.INTFLAG.bit.DRE == 0);
    return sercom(id)->SPI.DATA.reg;
}

void usartDataOut(SercomId id, u8_t data) {
    sercom(id)->USART.DATA.reg = data;
    27b6:	b289      	uxth	r1, r1
    27b8:	8501      	strh	r1, [r0, #40]	; 0x28
    while(sercom(id)->USART.INTFLAG.bit.DRE == 0);
    27ba:	7e03      	ldrb	r3, [r0, #24]
    27bc:	07db      	lsls	r3, r3, #31
    27be:	d5fc      	bpl.n	27ba <usartDataOut+0xa>
}
    27c0:	4770      	bx	lr
    27c2:	46c0      	nop			; (mov r8, r8)
    27c4:	42000800 	.word	0x42000800

000027c8 <usartDataIn>:
    27c8:	4b02      	ldr	r3, [pc, #8]	; (27d4 <usartDataIn+0xc>)
    27ca:	0280      	lsls	r0, r0, #10
    27cc:	18c0      	adds	r0, r0, r3

u8_t usartDataIn(SercomId id) {
    return sercom(id)->USART.DATA.reg;
    27ce:	8d00      	ldrh	r0, [r0, #40]	; 0x28
    27d0:	b2c0      	uxtb	r0, r0
}
    27d2:	4770      	bx	lr
    27d4:	42000800 	.word	0x42000800

000027d8 <attemptConnection>:
#include <util.h>
#include <boardDefines.h>


void attemptConnection() {
    27d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

    if (USARTconnectionAvaliable()) {
    27da:	4b2f      	ldr	r3, [pc, #188]	; (2898 <attemptConnection+0xc0>)
    27dc:	4798      	blx	r3
    27de:	2800      	cmp	r0, #0
    27e0:	d058      	beq.n	2894 <attemptConnection+0xbc>

        flightState = flightIdle;
    27e2:	2201      	movs	r2, #1
    27e4:	4b2d      	ldr	r3, [pc, #180]	; (289c <attemptConnection+0xc4>)
    27e6:	701a      	strb	r2, [r3, #0]

        //wait for user to tell us what they want
        while(sercom(USART3)->SPI.INTFLAG.bit.RXC == 0);
    27e8:	4a2d      	ldr	r2, [pc, #180]	; (28a0 <attemptConnection+0xc8>)
    27ea:	7e13      	ldrb	r3, [r2, #24]
    27ec:	4e2c      	ldr	r6, [pc, #176]	; (28a0 <attemptConnection+0xc8>)
    27ee:	075b      	lsls	r3, r3, #29
    27f0:	d5fb      	bpl.n	27ea <attemptConnection+0x12>
        u8_t option = usartDataIn(USART3);
    27f2:	2003      	movs	r0, #3
    27f4:	4d2b      	ldr	r5, [pc, #172]	; (28a4 <attemptConnection+0xcc>)
    27f6:	47a8      	blx	r5
    27f8:	1e04      	subs	r4, r0, #0

        //user wants to read flight logs
        if (option == 0x4C) {
    27fa:	2c4c      	cmp	r4, #76	; 0x4c
    27fc:	d13c      	bne.n	2878 <attemptConnection+0xa0>
    27fe:	2400      	movs	r4, #0

            //send list of available flight logs
            for (u8_t flightLog = 0; flightLog < 11; ++flightLog) {

                if (isFlightLogged(flightLog)) {
    2800:	0020      	movs	r0, r4
    2802:	4b29      	ldr	r3, [pc, #164]	; (28a8 <attemptConnection+0xd0>)
    2804:	4798      	blx	r3
    2806:	2800      	cmp	r0, #0
    2808:	d005      	beq.n	2816 <attemptConnection+0x3e>

                    usartDataOut(USART3, flightLog + 0x30);
    280a:	0021      	movs	r1, r4
    280c:	3130      	adds	r1, #48	; 0x30
    280e:	b2c9      	uxtb	r1, r1
    2810:	2003      	movs	r0, #3
    2812:	4b26      	ldr	r3, [pc, #152]	; (28ac <attemptConnection+0xd4>)
    2814:	4798      	blx	r3

        //user wants to read flight logs
        if (option == 0x4C) {

            //send list of available flight logs
            for (u8_t flightLog = 0; flightLog < 11; ++flightLog) {
    2816:	3401      	adds	r4, #1
    2818:	b2e4      	uxtb	r4, r4
    281a:	2c0b      	cmp	r4, #11
    281c:	d1f0      	bne.n	2800 <attemptConnection+0x28>

                    usartDataOut(USART3, flightLog + 0x30);
                }
            }
            //done sending flight numbers
            usartDataOut(USART3, 0x0F);
    281e:	210f      	movs	r1, #15
    2820:	2003      	movs	r0, #3
    2822:	4c22      	ldr	r4, [pc, #136]	; (28ac <attemptConnection+0xd4>)
    2824:	47a0      	blx	r4

            //wait for user to pick which flight to read
            while(sercom(USART3)->SPI.INTFLAG.bit.RXC == 0);
    2826:	7e33      	ldrb	r3, [r6, #24]
    2828:	075b      	lsls	r3, r3, #29
    282a:	d5fc      	bpl.n	2826 <attemptConnection+0x4e>
            u8_t flightToRead = usartDataIn(USART3) - 0x30;
    282c:	2003      	movs	r0, #3
    282e:	47a8      	blx	r5
    2830:	3830      	subs	r0, #48	; 0x30
    2832:	b2c5      	uxtb	r5, r0


            u32_t flightStartAddress = getFlightStartAddress(flightToRead);
    2834:	0028      	movs	r0, r5
    2836:	4b1e      	ldr	r3, [pc, #120]	; (28b0 <attemptConnection+0xd8>)
    2838:	4798      	blx	r3
            u32_t flightEndAddress = FindFlightEndingAddress(flightToRead) - 0x100;
    283a:	4b1e      	ldr	r3, [pc, #120]	; (28b4 <attemptConnection+0xdc>)
            //wait for user to pick which flight to read
            while(sercom(USART3)->SPI.INTFLAG.bit.RXC == 0);
            u8_t flightToRead = usartDataIn(USART3) - 0x30;


            u32_t flightStartAddress = getFlightStartAddress(flightToRead);
    283c:	0007      	movs	r7, r0
            u32_t flightEndAddress = FindFlightEndingAddress(flightToRead) - 0x100;
    283e:	0028      	movs	r0, r5
    2840:	4798      	blx	r3
    2842:	1e46      	subs	r6, r0, #1
    2844:	3eff      	subs	r6, #255	; 0xff

            //inform of page numbers
            u16_t pagesToSend = (flightEndAddress  - flightStartAddress) >> 8;
    2846:	1bf5      	subs	r5, r6, r7
    2848:	0a2d      	lsrs	r5, r5, #8
            usartDataOut(USART3, pagesToSend >> 0);
    284a:	b2e9      	uxtb	r1, r5
    284c:	2003      	movs	r0, #3
    284e:	47a0      	blx	r4
            usartDataOut(USART3, pagesToSend >> 8);
    2850:	b2a9      	uxth	r1, r5
    2852:	0a09      	lsrs	r1, r1, #8
    2854:	2003      	movs	r0, #3
    2856:	47a0      	blx	r4

            //send flight end address for % full
            usartDataOut(USART3, flightEndAddress >> 0);
    2858:	b2f1      	uxtb	r1, r6
    285a:	2003      	movs	r0, #3
    285c:	47a0      	blx	r4
            usartDataOut(USART3, flightEndAddress >> 8);
    285e:	0a31      	lsrs	r1, r6, #8
    2860:	b2c9      	uxtb	r1, r1
    2862:	2003      	movs	r0, #3
    2864:	47a0      	blx	r4
            usartDataOut(USART3, flightEndAddress >> 16);
    2866:	0c31      	lsrs	r1, r6, #16
    2868:	b2c9      	uxtb	r1, r1
    286a:	2003      	movs	r0, #3
    286c:	47a0      	blx	r4

            //USART out the flights pages
            sendTheasePagesToComputer(flightStartAddress, flightEndAddress);
    286e:	0031      	movs	r1, r6
    2870:	0038      	movs	r0, r7
    2872:	4b11      	ldr	r3, [pc, #68]	; (28b8 <attemptConnection+0xe0>)
    2874:	4798      	blx	r3
    2876:	e00d      	b.n	2894 <attemptConnection+0xbc>

        }
        //user wants to erase chip
        if (option == 0x45) { // 'E'
    2878:	2845      	cmp	r0, #69	; 0x45
    287a:	d10b      	bne.n	2894 <attemptConnection+0xbc>
            AT25SFChipErase();
    287c:	4b0f      	ldr	r3, [pc, #60]	; (28bc <attemptConnection+0xe4>)
    287e:	4798      	blx	r3

            AT25SFHoldTillReady();
    2880:	4b0f      	ldr	r3, [pc, #60]	; (28c0 <attemptConnection+0xe8>)
    2882:	4798      	blx	r3

            usartDataOut(USART3, 'E');
    2884:	2003      	movs	r0, #3
    2886:	4b09      	ldr	r3, [pc, #36]	; (28ac <attemptConnection+0xd4>)
    2888:	0021      	movs	r1, r4
    288a:	4798      	blx	r3
            beep(400);
    288c:	20c8      	movs	r0, #200	; 0xc8
    288e:	4b0d      	ldr	r3, [pc, #52]	; (28c4 <attemptConnection+0xec>)
    2890:	0040      	lsls	r0, r0, #1
    2892:	4798      	blx	r3


        }
    }

}
    2894:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2896:	46c0      	nop			; (mov r8, r8)
    2898:	00000b21 	.word	0x00000b21
    289c:	20000648 	.word	0x20000648
    28a0:	42001400 	.word	0x42001400
    28a4:	000027c9 	.word	0x000027c9
    28a8:	00002225 	.word	0x00002225
    28ac:	000027b1 	.word	0x000027b1
    28b0:	000021d5 	.word	0x000021d5
    28b4:	000021fd 	.word	0x000021fd
    28b8:	00000b55 	.word	0x00000b55
    28bc:	00000221 	.word	0x00000221
    28c0:	000001e5 	.word	0x000001e5
    28c4:	00000d41 	.word	0x00000d41

000028c8 <pow>:
    28c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    28ca:	465f      	mov	r7, fp
    28cc:	464d      	mov	r5, r9
    28ce:	4656      	mov	r6, sl
    28d0:	4644      	mov	r4, r8
    28d2:	b4f0      	push	{r4, r5, r6, r7}
    28d4:	b091      	sub	sp, #68	; 0x44
    28d6:	001f      	movs	r7, r3
    28d8:	0004      	movs	r4, r0
    28da:	000d      	movs	r5, r1
    28dc:	0016      	movs	r6, r2
    28de:	f000 f9af 	bl	2c40 <__ieee754_pow>
    28e2:	4bcf      	ldr	r3, [pc, #828]	; (2c20 <pow+0x358>)
    28e4:	9002      	str	r0, [sp, #8]
    28e6:	9103      	str	r1, [sp, #12]
    28e8:	469b      	mov	fp, r3
    28ea:	781b      	ldrb	r3, [r3, #0]
    28ec:	b25b      	sxtb	r3, r3
    28ee:	4699      	mov	r9, r3
    28f0:	3301      	adds	r3, #1
    28f2:	d04f      	beq.n	2994 <pow+0xcc>
    28f4:	0032      	movs	r2, r6
    28f6:	003b      	movs	r3, r7
    28f8:	0030      	movs	r0, r6
    28fa:	0039      	movs	r1, r7
    28fc:	f003 faaa 	bl	5e54 <__aeabi_dcmpun>
    2900:	9000      	str	r0, [sp, #0]
    2902:	2800      	cmp	r0, #0
    2904:	d146      	bne.n	2994 <pow+0xcc>
    2906:	0022      	movs	r2, r4
    2908:	002b      	movs	r3, r5
    290a:	0020      	movs	r0, r4
    290c:	0029      	movs	r1, r5
    290e:	f003 faa1 	bl	5e54 <__aeabi_dcmpun>
    2912:	2200      	movs	r2, #0
    2914:	4682      	mov	sl, r0
    2916:	2800      	cmp	r0, #0
    2918:	d134      	bne.n	2984 <pow+0xbc>
    291a:	2300      	movs	r3, #0
    291c:	0020      	movs	r0, r4
    291e:	0029      	movs	r1, r5
    2920:	f001 f8fc 	bl	3b1c <__aeabi_dcmpeq>
    2924:	2800      	cmp	r0, #0
    2926:	d03a      	beq.n	299e <pow+0xd6>
    2928:	2200      	movs	r2, #0
    292a:	2300      	movs	r3, #0
    292c:	0030      	movs	r0, r6
    292e:	0039      	movs	r1, r7
    2930:	f001 f8f4 	bl	3b1c <__aeabi_dcmpeq>
    2934:	9005      	str	r0, [sp, #20]
    2936:	2800      	cmp	r0, #0
    2938:	d100      	bne.n	293c <pow+0x74>
    293a:	e074      	b.n	2a26 <pow+0x15e>
    293c:	ab06      	add	r3, sp, #24
    293e:	4698      	mov	r8, r3
    2940:	2301      	movs	r3, #1
    2942:	4642      	mov	r2, r8
    2944:	9306      	str	r3, [sp, #24]
    2946:	4bb7      	ldr	r3, [pc, #732]	; (2c24 <pow+0x35c>)
    2948:	6053      	str	r3, [r2, #4]
    294a:	4643      	mov	r3, r8
    294c:	4652      	mov	r2, sl
    294e:	609c      	str	r4, [r3, #8]
    2950:	60dd      	str	r5, [r3, #12]
    2952:	621a      	str	r2, [r3, #32]
    2954:	611e      	str	r6, [r3, #16]
    2956:	615f      	str	r7, [r3, #20]
    2958:	4642      	mov	r2, r8
    295a:	2300      	movs	r3, #0
    295c:	2400      	movs	r4, #0
    295e:	6193      	str	r3, [r2, #24]
    2960:	61d4      	str	r4, [r2, #28]
    2962:	464b      	mov	r3, r9
    2964:	2b00      	cmp	r3, #0
    2966:	d100      	bne.n	296a <pow+0xa2>
    2968:	e094      	b.n	2a94 <pow+0x1cc>
    296a:	2300      	movs	r3, #0
    296c:	4cae      	ldr	r4, [pc, #696]	; (2c28 <pow+0x360>)
    296e:	9300      	str	r3, [sp, #0]
    2970:	9401      	str	r4, [sp, #4]
    2972:	9800      	ldr	r0, [sp, #0]
    2974:	9901      	ldr	r1, [sp, #4]
    2976:	b011      	add	sp, #68	; 0x44
    2978:	bc3c      	pop	{r2, r3, r4, r5}
    297a:	4690      	mov	r8, r2
    297c:	4699      	mov	r9, r3
    297e:	46a2      	mov	sl, r4
    2980:	46ab      	mov	fp, r5
    2982:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2984:	2300      	movs	r3, #0
    2986:	0030      	movs	r0, r6
    2988:	0039      	movs	r1, r7
    298a:	f001 f8c7 	bl	3b1c <__aeabi_dcmpeq>
    298e:	2800      	cmp	r0, #0
    2990:	d000      	beq.n	2994 <pow+0xcc>
    2992:	e0eb      	b.n	2b6c <pow+0x2a4>
    2994:	9b02      	ldr	r3, [sp, #8]
    2996:	9c03      	ldr	r4, [sp, #12]
    2998:	9300      	str	r3, [sp, #0]
    299a:	9401      	str	r4, [sp, #4]
    299c:	e7e9      	b.n	2972 <pow+0xaa>
    299e:	9802      	ldr	r0, [sp, #8]
    29a0:	9903      	ldr	r1, [sp, #12]
    29a2:	f000 ff7d 	bl	38a0 <finite>
    29a6:	4681      	mov	r9, r0
    29a8:	2800      	cmp	r0, #0
    29aa:	d100      	bne.n	29ae <pow+0xe6>
    29ac:	e086      	b.n	2abc <pow+0x1f4>
    29ae:	9802      	ldr	r0, [sp, #8]
    29b0:	9903      	ldr	r1, [sp, #12]
    29b2:	2200      	movs	r2, #0
    29b4:	2300      	movs	r3, #0
    29b6:	f001 f8b1 	bl	3b1c <__aeabi_dcmpeq>
    29ba:	2800      	cmp	r0, #0
    29bc:	d0ea      	beq.n	2994 <pow+0xcc>
    29be:	0020      	movs	r0, r4
    29c0:	0029      	movs	r1, r5
    29c2:	f000 ff6d 	bl	38a0 <finite>
    29c6:	9a02      	ldr	r2, [sp, #8]
    29c8:	9b03      	ldr	r3, [sp, #12]
    29ca:	9200      	str	r2, [sp, #0]
    29cc:	9301      	str	r3, [sp, #4]
    29ce:	2800      	cmp	r0, #0
    29d0:	d0cf      	beq.n	2972 <pow+0xaa>
    29d2:	0030      	movs	r0, r6
    29d4:	0039      	movs	r1, r7
    29d6:	f000 ff63 	bl	38a0 <finite>
    29da:	9a02      	ldr	r2, [sp, #8]
    29dc:	9b03      	ldr	r3, [sp, #12]
    29de:	9200      	str	r2, [sp, #0]
    29e0:	9301      	str	r3, [sp, #4]
    29e2:	2800      	cmp	r0, #0
    29e4:	d0c5      	beq.n	2972 <pow+0xaa>
    29e6:	ab06      	add	r3, sp, #24
    29e8:	4698      	mov	r8, r3
    29ea:	2304      	movs	r3, #4
    29ec:	4642      	mov	r2, r8
    29ee:	9306      	str	r3, [sp, #24]
    29f0:	4b8c      	ldr	r3, [pc, #560]	; (2c24 <pow+0x35c>)
    29f2:	6094      	str	r4, [r2, #8]
    29f4:	60d5      	str	r5, [r2, #12]
    29f6:	6053      	str	r3, [r2, #4]
    29f8:	2300      	movs	r3, #0
    29fa:	2400      	movs	r4, #0
    29fc:	6213      	str	r3, [r2, #32]
    29fe:	2300      	movs	r3, #0
    2a00:	6193      	str	r3, [r2, #24]
    2a02:	61d4      	str	r4, [r2, #28]
    2a04:	465b      	mov	r3, fp
    2a06:	781b      	ldrb	r3, [r3, #0]
    2a08:	6116      	str	r6, [r2, #16]
    2a0a:	6157      	str	r7, [r2, #20]
    2a0c:	b25b      	sxtb	r3, r3
    2a0e:	2b02      	cmp	r3, #2
    2a10:	d004      	beq.n	2a1c <pow+0x154>
    2a12:	4640      	mov	r0, r8
    2a14:	f000 ff4e 	bl	38b4 <matherr>
    2a18:	2800      	cmp	r0, #0
    2a1a:	d140      	bne.n	2a9e <pow+0x1d6>
    2a1c:	f003 fc74 	bl	6308 <__errno>
    2a20:	2322      	movs	r3, #34	; 0x22
    2a22:	6003      	str	r3, [r0, #0]
    2a24:	e03b      	b.n	2a9e <pow+0x1d6>
    2a26:	0030      	movs	r0, r6
    2a28:	0039      	movs	r1, r7
    2a2a:	f000 ff39 	bl	38a0 <finite>
    2a2e:	9a02      	ldr	r2, [sp, #8]
    2a30:	9b03      	ldr	r3, [sp, #12]
    2a32:	9200      	str	r2, [sp, #0]
    2a34:	9301      	str	r3, [sp, #4]
    2a36:	2800      	cmp	r0, #0
    2a38:	d09b      	beq.n	2972 <pow+0xaa>
    2a3a:	2200      	movs	r2, #0
    2a3c:	2300      	movs	r3, #0
    2a3e:	0030      	movs	r0, r6
    2a40:	0039      	movs	r1, r7
    2a42:	f001 f871 	bl	3b28 <__aeabi_dcmplt>
    2a46:	2800      	cmp	r0, #0
    2a48:	d100      	bne.n	2a4c <pow+0x184>
    2a4a:	e792      	b.n	2972 <pow+0xaa>
    2a4c:	ab06      	add	r3, sp, #24
    2a4e:	4698      	mov	r8, r3
    2a50:	2301      	movs	r3, #1
    2a52:	4642      	mov	r2, r8
    2a54:	9306      	str	r3, [sp, #24]
    2a56:	4b73      	ldr	r3, [pc, #460]	; (2c24 <pow+0x35c>)
    2a58:	6053      	str	r3, [r2, #4]
    2a5a:	4643      	mov	r3, r8
    2a5c:	9a05      	ldr	r2, [sp, #20]
    2a5e:	609c      	str	r4, [r3, #8]
    2a60:	60dd      	str	r5, [r3, #12]
    2a62:	621a      	str	r2, [r3, #32]
    2a64:	611e      	str	r6, [r3, #16]
    2a66:	615f      	str	r7, [r3, #20]
    2a68:	465b      	mov	r3, fp
    2a6a:	781b      	ldrb	r3, [r3, #0]
    2a6c:	b25b      	sxtb	r3, r3
    2a6e:	2b00      	cmp	r3, #0
    2a70:	d00b      	beq.n	2a8a <pow+0x1c2>
    2a72:	2000      	movs	r0, #0
    2a74:	4642      	mov	r2, r8
    2a76:	496d      	ldr	r1, [pc, #436]	; (2c2c <pow+0x364>)
    2a78:	6190      	str	r0, [r2, #24]
    2a7a:	61d1      	str	r1, [r2, #28]
    2a7c:	2b02      	cmp	r3, #2
    2a7e:	d109      	bne.n	2a94 <pow+0x1cc>
    2a80:	f003 fc42 	bl	6308 <__errno>
    2a84:	2321      	movs	r3, #33	; 0x21
    2a86:	6003      	str	r3, [r0, #0]
    2a88:	e009      	b.n	2a9e <pow+0x1d6>
    2a8a:	4642      	mov	r2, r8
    2a8c:	2300      	movs	r3, #0
    2a8e:	2400      	movs	r4, #0
    2a90:	6193      	str	r3, [r2, #24]
    2a92:	61d4      	str	r4, [r2, #28]
    2a94:	4640      	mov	r0, r8
    2a96:	f000 ff0d 	bl	38b4 <matherr>
    2a9a:	2800      	cmp	r0, #0
    2a9c:	d0f0      	beq.n	2a80 <pow+0x1b8>
    2a9e:	4643      	mov	r3, r8
    2aa0:	6a1b      	ldr	r3, [r3, #32]
    2aa2:	2b00      	cmp	r3, #0
    2aa4:	d004      	beq.n	2ab0 <pow+0x1e8>
    2aa6:	f003 fc2f 	bl	6308 <__errno>
    2aaa:	4643      	mov	r3, r8
    2aac:	6a1b      	ldr	r3, [r3, #32]
    2aae:	6003      	str	r3, [r0, #0]
    2ab0:	4643      	mov	r3, r8
    2ab2:	69dc      	ldr	r4, [r3, #28]
    2ab4:	699b      	ldr	r3, [r3, #24]
    2ab6:	9300      	str	r3, [sp, #0]
    2ab8:	9401      	str	r4, [sp, #4]
    2aba:	e75a      	b.n	2972 <pow+0xaa>
    2abc:	0020      	movs	r0, r4
    2abe:	0029      	movs	r1, r5
    2ac0:	f000 feee 	bl	38a0 <finite>
    2ac4:	2800      	cmp	r0, #0
    2ac6:	d100      	bne.n	2aca <pow+0x202>
    2ac8:	e771      	b.n	29ae <pow+0xe6>
    2aca:	0030      	movs	r0, r6
    2acc:	0039      	movs	r1, r7
    2ace:	f000 fee7 	bl	38a0 <finite>
    2ad2:	2800      	cmp	r0, #0
    2ad4:	d100      	bne.n	2ad8 <pow+0x210>
    2ad6:	e76a      	b.n	29ae <pow+0xe6>
    2ad8:	9802      	ldr	r0, [sp, #8]
    2ada:	9903      	ldr	r1, [sp, #12]
    2adc:	000b      	movs	r3, r1
    2ade:	0002      	movs	r2, r0
    2ae0:	f003 f9b8 	bl	5e54 <__aeabi_dcmpun>
    2ae4:	ab06      	add	r3, sp, #24
    2ae6:	4698      	mov	r8, r3
    2ae8:	2800      	cmp	r0, #0
    2aea:	d17a      	bne.n	2be2 <pow+0x31a>
    2aec:	2303      	movs	r3, #3
    2aee:	4642      	mov	r2, r8
    2af0:	9306      	str	r3, [sp, #24]
    2af2:	4b4c      	ldr	r3, [pc, #304]	; (2c24 <pow+0x35c>)
    2af4:	6210      	str	r0, [r2, #32]
    2af6:	6053      	str	r3, [r2, #4]
    2af8:	465b      	mov	r3, fp
    2afa:	781b      	ldrb	r3, [r3, #0]
    2afc:	6094      	str	r4, [r2, #8]
    2afe:	60d5      	str	r5, [r2, #12]
    2b00:	b25b      	sxtb	r3, r3
    2b02:	6116      	str	r6, [r2, #16]
    2b04:	6157      	str	r7, [r2, #20]
    2b06:	4699      	mov	r9, r3
    2b08:	2b00      	cmp	r3, #0
    2b0a:	d148      	bne.n	2b9e <pow+0x2d6>
    2b0c:	22e0      	movs	r2, #224	; 0xe0
    2b0e:	4641      	mov	r1, r8
    2b10:	4b47      	ldr	r3, [pc, #284]	; (2c30 <pow+0x368>)
    2b12:	0612      	lsls	r2, r2, #24
    2b14:	618a      	str	r2, [r1, #24]
    2b16:	61cb      	str	r3, [r1, #28]
    2b18:	0020      	movs	r0, r4
    2b1a:	2200      	movs	r2, #0
    2b1c:	2300      	movs	r3, #0
    2b1e:	0029      	movs	r1, r5
    2b20:	f001 f802 	bl	3b28 <__aeabi_dcmplt>
    2b24:	2800      	cmp	r0, #0
    2b26:	d100      	bne.n	2b2a <pow+0x262>
    2b28:	e773      	b.n	2a12 <pow+0x14a>
    2b2a:	2200      	movs	r2, #0
    2b2c:	4b41      	ldr	r3, [pc, #260]	; (2c34 <pow+0x36c>)
    2b2e:	0030      	movs	r0, r6
    2b30:	0039      	movs	r1, r7
    2b32:	f002 fbc1 	bl	52b8 <__aeabi_dmul>
    2b36:	0004      	movs	r4, r0
    2b38:	000d      	movs	r5, r1
    2b3a:	f000 fec3 	bl	38c4 <rint>
    2b3e:	0002      	movs	r2, r0
    2b40:	000b      	movs	r3, r1
    2b42:	0020      	movs	r0, r4
    2b44:	0029      	movs	r1, r5
    2b46:	f000 ffe9 	bl	3b1c <__aeabi_dcmpeq>
    2b4a:	2800      	cmp	r0, #0
    2b4c:	d105      	bne.n	2b5a <pow+0x292>
    2b4e:	22e0      	movs	r2, #224	; 0xe0
    2b50:	4b39      	ldr	r3, [pc, #228]	; (2c38 <pow+0x370>)
    2b52:	0612      	lsls	r2, r2, #24
    2b54:	4641      	mov	r1, r8
    2b56:	618a      	str	r2, [r1, #24]
    2b58:	61cb      	str	r3, [r1, #28]
    2b5a:	465b      	mov	r3, fp
    2b5c:	781b      	ldrb	r3, [r3, #0]
    2b5e:	b25b      	sxtb	r3, r3
    2b60:	4699      	mov	r9, r3
    2b62:	464b      	mov	r3, r9
    2b64:	2b02      	cmp	r3, #2
    2b66:	d000      	beq.n	2b6a <pow+0x2a2>
    2b68:	e753      	b.n	2a12 <pow+0x14a>
    2b6a:	e757      	b.n	2a1c <pow+0x154>
    2b6c:	ab06      	add	r3, sp, #24
    2b6e:	4698      	mov	r8, r3
    2b70:	2301      	movs	r3, #1
    2b72:	4642      	mov	r2, r8
    2b74:	9306      	str	r3, [sp, #24]
    2b76:	4b2b      	ldr	r3, [pc, #172]	; (2c24 <pow+0x35c>)
    2b78:	6053      	str	r3, [r2, #4]
    2b7a:	4643      	mov	r3, r8
    2b7c:	609c      	str	r4, [r3, #8]
    2b7e:	60dd      	str	r5, [r3, #12]
    2b80:	2400      	movs	r4, #0
    2b82:	9a00      	ldr	r2, [sp, #0]
    2b84:	4d28      	ldr	r5, [pc, #160]	; (2c28 <pow+0x360>)
    2b86:	621a      	str	r2, [r3, #32]
    2b88:	611e      	str	r6, [r3, #16]
    2b8a:	615f      	str	r7, [r3, #20]
    2b8c:	619c      	str	r4, [r3, #24]
    2b8e:	61dd      	str	r5, [r3, #28]
    2b90:	464b      	mov	r3, r9
    2b92:	9400      	str	r4, [sp, #0]
    2b94:	9501      	str	r5, [sp, #4]
    2b96:	2b02      	cmp	r3, #2
    2b98:	d000      	beq.n	2b9c <pow+0x2d4>
    2b9a:	e77b      	b.n	2a94 <pow+0x1cc>
    2b9c:	e6e9      	b.n	2972 <pow+0xaa>
    2b9e:	2200      	movs	r2, #0
    2ba0:	4641      	mov	r1, r8
    2ba2:	4b26      	ldr	r3, [pc, #152]	; (2c3c <pow+0x374>)
    2ba4:	0020      	movs	r0, r4
    2ba6:	618a      	str	r2, [r1, #24]
    2ba8:	61cb      	str	r3, [r1, #28]
    2baa:	2200      	movs	r2, #0
    2bac:	2300      	movs	r3, #0
    2bae:	0029      	movs	r1, r5
    2bb0:	f000 ffba 	bl	3b28 <__aeabi_dcmplt>
    2bb4:	2800      	cmp	r0, #0
    2bb6:	d0d4      	beq.n	2b62 <pow+0x29a>
    2bb8:	2200      	movs	r2, #0
    2bba:	4b1e      	ldr	r3, [pc, #120]	; (2c34 <pow+0x36c>)
    2bbc:	0030      	movs	r0, r6
    2bbe:	0039      	movs	r1, r7
    2bc0:	f002 fb7a 	bl	52b8 <__aeabi_dmul>
    2bc4:	0004      	movs	r4, r0
    2bc6:	000d      	movs	r5, r1
    2bc8:	f000 fe7c 	bl	38c4 <rint>
    2bcc:	0002      	movs	r2, r0
    2bce:	000b      	movs	r3, r1
    2bd0:	0020      	movs	r0, r4
    2bd2:	0029      	movs	r1, r5
    2bd4:	f000 ffa2 	bl	3b1c <__aeabi_dcmpeq>
    2bd8:	2800      	cmp	r0, #0
    2bda:	d1be      	bne.n	2b5a <pow+0x292>
    2bdc:	2200      	movs	r2, #0
    2bde:	4b13      	ldr	r3, [pc, #76]	; (2c2c <pow+0x364>)
    2be0:	e7b8      	b.n	2b54 <pow+0x28c>
    2be2:	2301      	movs	r3, #1
    2be4:	4642      	mov	r2, r8
    2be6:	9306      	str	r3, [sp, #24]
    2be8:	4b0e      	ldr	r3, [pc, #56]	; (2c24 <pow+0x35c>)
    2bea:	6053      	str	r3, [r2, #4]
    2bec:	4643      	mov	r3, r8
    2bee:	464a      	mov	r2, r9
    2bf0:	609c      	str	r4, [r3, #8]
    2bf2:	60dd      	str	r5, [r3, #12]
    2bf4:	621a      	str	r2, [r3, #32]
    2bf6:	611e      	str	r6, [r3, #16]
    2bf8:	615f      	str	r7, [r3, #20]
    2bfa:	2400      	movs	r4, #0
    2bfc:	465b      	mov	r3, fp
    2bfe:	571c      	ldrsb	r4, [r3, r4]
    2c00:	2c00      	cmp	r4, #0
    2c02:	d100      	bne.n	2c06 <pow+0x33e>
    2c04:	e741      	b.n	2a8a <pow+0x1c2>
    2c06:	2300      	movs	r3, #0
    2c08:	2200      	movs	r2, #0
    2c0a:	0019      	movs	r1, r3
    2c0c:	0010      	movs	r0, r2
    2c0e:	f001 ff2f 	bl	4a70 <__aeabi_ddiv>
    2c12:	4643      	mov	r3, r8
    2c14:	6198      	str	r0, [r3, #24]
    2c16:	61d9      	str	r1, [r3, #28]
    2c18:	2c02      	cmp	r4, #2
    2c1a:	d100      	bne.n	2c1e <pow+0x356>
    2c1c:	e730      	b.n	2a80 <pow+0x1b8>
    2c1e:	e739      	b.n	2a94 <pow+0x1cc>
    2c20:	20000070 	.word	0x20000070
    2c24:	000064c4 	.word	0x000064c4
    2c28:	3ff00000 	.word	0x3ff00000
    2c2c:	fff00000 	.word	0xfff00000
    2c30:	47efffff 	.word	0x47efffff
    2c34:	3fe00000 	.word	0x3fe00000
    2c38:	c7efffff 	.word	0xc7efffff
    2c3c:	7ff00000 	.word	0x7ff00000

00002c40 <__ieee754_pow>:
    2c40:	b5f0      	push	{r4, r5, r6, r7, lr}
    2c42:	4656      	mov	r6, sl
    2c44:	464d      	mov	r5, r9
    2c46:	4644      	mov	r4, r8
    2c48:	465f      	mov	r7, fp
    2c4a:	b4f0      	push	{r4, r5, r6, r7}
    2c4c:	001c      	movs	r4, r3
    2c4e:	0013      	movs	r3, r2
    2c50:	0067      	lsls	r7, r4, #1
    2c52:	b091      	sub	sp, #68	; 0x44
    2c54:	087f      	lsrs	r7, r7, #1
    2c56:	9300      	str	r3, [sp, #0]
    2c58:	9401      	str	r4, [sp, #4]
    2c5a:	0006      	movs	r6, r0
    2c5c:	000d      	movs	r5, r1
    2c5e:	4680      	mov	r8, r0
    2c60:	4689      	mov	r9, r1
    2c62:	46a2      	mov	sl, r4
    2c64:	433b      	orrs	r3, r7
    2c66:	d032      	beq.n	2cce <__ieee754_pow+0x8e>
    2c68:	4b6e      	ldr	r3, [pc, #440]	; (2e24 <__ieee754_pow+0x1e4>)
    2c6a:	006c      	lsls	r4, r5, #1
    2c6c:	0864      	lsrs	r4, r4, #1
    2c6e:	429c      	cmp	r4, r3
    2c70:	dc29      	bgt.n	2cc6 <__ieee754_pow+0x86>
    2c72:	d026      	beq.n	2cc2 <__ieee754_pow+0x82>
    2c74:	429f      	cmp	r7, r3
    2c76:	dc26      	bgt.n	2cc6 <__ieee754_pow+0x86>
    2c78:	4b6a      	ldr	r3, [pc, #424]	; (2e24 <__ieee754_pow+0x1e4>)
    2c7a:	429f      	cmp	r7, r3
    2c7c:	d100      	bne.n	2c80 <__ieee754_pow+0x40>
    2c7e:	e089      	b.n	2d94 <__ieee754_pow+0x154>
    2c80:	2300      	movs	r3, #0
    2c82:	469b      	mov	fp, r3
    2c84:	464b      	mov	r3, r9
    2c86:	2b00      	cmp	r3, #0
    2c88:	da00      	bge.n	2c8c <__ieee754_pow+0x4c>
    2c8a:	e087      	b.n	2d9c <__ieee754_pow+0x15c>
    2c8c:	2a00      	cmp	r2, #0
    2c8e:	d12f      	bne.n	2cf0 <__ieee754_pow+0xb0>
    2c90:	4b64      	ldr	r3, [pc, #400]	; (2e24 <__ieee754_pow+0x1e4>)
    2c92:	429f      	cmp	r7, r3
    2c94:	d100      	bne.n	2c98 <__ieee754_pow+0x58>
    2c96:	e09f      	b.n	2dd8 <__ieee754_pow+0x198>
    2c98:	4b63      	ldr	r3, [pc, #396]	; (2e28 <__ieee754_pow+0x1e8>)
    2c9a:	429f      	cmp	r7, r3
    2c9c:	d05d      	beq.n	2d5a <__ieee754_pow+0x11a>
    2c9e:	2380      	movs	r3, #128	; 0x80
    2ca0:	05db      	lsls	r3, r3, #23
    2ca2:	459a      	cmp	sl, r3
    2ca4:	d101      	bne.n	2caa <__ieee754_pow+0x6a>
    2ca6:	f000 fbc1 	bl	342c <__ieee754_pow+0x7ec>
    2caa:	4b60      	ldr	r3, [pc, #384]	; (2e2c <__ieee754_pow+0x1ec>)
    2cac:	459a      	cmp	sl, r3
    2cae:	d11f      	bne.n	2cf0 <__ieee754_pow+0xb0>
    2cb0:	464b      	mov	r3, r9
    2cb2:	2b00      	cmp	r3, #0
    2cb4:	db1c      	blt.n	2cf0 <__ieee754_pow+0xb0>
    2cb6:	0030      	movs	r0, r6
    2cb8:	0029      	movs	r1, r5
    2cba:	f000 fcf7 	bl	36ac <__ieee754_sqrt>
    2cbe:	0006      	movs	r6, r0
    2cc0:	e007      	b.n	2cd2 <__ieee754_pow+0x92>
    2cc2:	2800      	cmp	r0, #0
    2cc4:	d00d      	beq.n	2ce2 <__ieee754_pow+0xa2>
    2cc6:	4b5a      	ldr	r3, [pc, #360]	; (2e30 <__ieee754_pow+0x1f0>)
    2cc8:	18e0      	adds	r0, r4, r3
    2cca:	4330      	orrs	r0, r6
    2ccc:	d10b      	bne.n	2ce6 <__ieee754_pow+0xa6>
    2cce:	2600      	movs	r6, #0
    2cd0:	4955      	ldr	r1, [pc, #340]	; (2e28 <__ieee754_pow+0x1e8>)
    2cd2:	0030      	movs	r0, r6
    2cd4:	b011      	add	sp, #68	; 0x44
    2cd6:	bc3c      	pop	{r2, r3, r4, r5}
    2cd8:	4690      	mov	r8, r2
    2cda:	4699      	mov	r9, r3
    2cdc:	46a2      	mov	sl, r4
    2cde:	46ab      	mov	fp, r5
    2ce0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2ce2:	42a7      	cmp	r7, r4
    2ce4:	ddc8      	ble.n	2c78 <__ieee754_pow+0x38>
    2ce6:	4853      	ldr	r0, [pc, #332]	; (2e34 <__ieee754_pow+0x1f4>)
    2ce8:	f000 fde6 	bl	38b8 <nan>
    2cec:	0006      	movs	r6, r0
    2cee:	e7f0      	b.n	2cd2 <__ieee754_pow+0x92>
    2cf0:	0030      	movs	r0, r6
    2cf2:	0029      	movs	r1, r5
    2cf4:	f000 fdd0 	bl	3898 <fabs>
    2cf8:	4643      	mov	r3, r8
    2cfa:	2b00      	cmp	r3, #0
    2cfc:	d01d      	beq.n	2d3a <__ieee754_pow+0xfa>
    2cfe:	0feb      	lsrs	r3, r5, #31
    2d00:	3b01      	subs	r3, #1
    2d02:	4698      	mov	r8, r3
    2d04:	465b      	mov	r3, fp
    2d06:	4642      	mov	r2, r8
    2d08:	4313      	orrs	r3, r2
    2d0a:	d079      	beq.n	2e00 <__ieee754_pow+0x1c0>
    2d0c:	4b4a      	ldr	r3, [pc, #296]	; (2e38 <__ieee754_pow+0x1f8>)
    2d0e:	429f      	cmp	r7, r3
    2d10:	dc00      	bgt.n	2d14 <__ieee754_pow+0xd4>
    2d12:	e09f      	b.n	2e54 <__ieee754_pow+0x214>
    2d14:	4b49      	ldr	r3, [pc, #292]	; (2e3c <__ieee754_pow+0x1fc>)
    2d16:	429f      	cmp	r7, r3
    2d18:	dc01      	bgt.n	2d1e <__ieee754_pow+0xde>
    2d1a:	f000 fbce 	bl	34ba <__ieee754_pow+0x87a>
    2d1e:	4b48      	ldr	r3, [pc, #288]	; (2e40 <__ieee754_pow+0x200>)
    2d20:	429c      	cmp	r4, r3
    2d22:	dd79      	ble.n	2e18 <__ieee754_pow+0x1d8>
    2d24:	4653      	mov	r3, sl
    2d26:	2b00      	cmp	r3, #0
    2d28:	dd79      	ble.n	2e1e <__ieee754_pow+0x1de>
    2d2a:	4a46      	ldr	r2, [pc, #280]	; (2e44 <__ieee754_pow+0x204>)
    2d2c:	4b46      	ldr	r3, [pc, #280]	; (2e48 <__ieee754_pow+0x208>)
    2d2e:	0010      	movs	r0, r2
    2d30:	0019      	movs	r1, r3
    2d32:	f002 fac1 	bl	52b8 <__aeabi_dmul>
    2d36:	0006      	movs	r6, r0
    2d38:	e7cb      	b.n	2cd2 <__ieee754_pow+0x92>
    2d3a:	2c00      	cmp	r4, #0
    2d3c:	d004      	beq.n	2d48 <__ieee754_pow+0x108>
    2d3e:	4a3a      	ldr	r2, [pc, #232]	; (2e28 <__ieee754_pow+0x1e8>)
    2d40:	00ab      	lsls	r3, r5, #2
    2d42:	089b      	lsrs	r3, r3, #2
    2d44:	4293      	cmp	r3, r2
    2d46:	d1da      	bne.n	2cfe <__ieee754_pow+0xbe>
    2d48:	4653      	mov	r3, sl
    2d4a:	2b00      	cmp	r3, #0
    2d4c:	da00      	bge.n	2d50 <__ieee754_pow+0x110>
    2d4e:	e3ad      	b.n	34ac <__ieee754_pow+0x86c>
    2d50:	464b      	mov	r3, r9
    2d52:	2b00      	cmp	r3, #0
    2d54:	db0d      	blt.n	2d72 <__ieee754_pow+0x132>
    2d56:	0006      	movs	r6, r0
    2d58:	e7bb      	b.n	2cd2 <__ieee754_pow+0x92>
    2d5a:	4653      	mov	r3, sl
    2d5c:	0029      	movs	r1, r5
    2d5e:	2b00      	cmp	r3, #0
    2d60:	dab7      	bge.n	2cd2 <__ieee754_pow+0x92>
    2d62:	0032      	movs	r2, r6
    2d64:	002b      	movs	r3, r5
    2d66:	2000      	movs	r0, #0
    2d68:	492f      	ldr	r1, [pc, #188]	; (2e28 <__ieee754_pow+0x1e8>)
    2d6a:	f001 fe81 	bl	4a70 <__aeabi_ddiv>
    2d6e:	0006      	movs	r6, r0
    2d70:	e7af      	b.n	2cd2 <__ieee754_pow+0x92>
    2d72:	4b2f      	ldr	r3, [pc, #188]	; (2e30 <__ieee754_pow+0x1f0>)
    2d74:	469c      	mov	ip, r3
    2d76:	465b      	mov	r3, fp
    2d78:	4464      	add	r4, ip
    2d7a:	431c      	orrs	r4, r3
    2d7c:	d101      	bne.n	2d82 <__ieee754_pow+0x142>
    2d7e:	f000 fc2b 	bl	35d8 <__ieee754_pow+0x998>
    2d82:	465b      	mov	r3, fp
    2d84:	0006      	movs	r6, r0
    2d86:	2b01      	cmp	r3, #1
    2d88:	d1a3      	bne.n	2cd2 <__ieee754_pow+0x92>
    2d8a:	2380      	movs	r3, #128	; 0x80
    2d8c:	061b      	lsls	r3, r3, #24
    2d8e:	469c      	mov	ip, r3
    2d90:	4461      	add	r1, ip
    2d92:	e79e      	b.n	2cd2 <__ieee754_pow+0x92>
    2d94:	2a00      	cmp	r2, #0
    2d96:	d100      	bne.n	2d9a <__ieee754_pow+0x15a>
    2d98:	e772      	b.n	2c80 <__ieee754_pow+0x40>
    2d9a:	e794      	b.n	2cc6 <__ieee754_pow+0x86>
    2d9c:	4b2b      	ldr	r3, [pc, #172]	; (2e4c <__ieee754_pow+0x20c>)
    2d9e:	429f      	cmp	r7, r3
    2da0:	dc2b      	bgt.n	2dfa <__ieee754_pow+0x1ba>
    2da2:	4b27      	ldr	r3, [pc, #156]	; (2e40 <__ieee754_pow+0x200>)
    2da4:	429f      	cmp	r7, r3
    2da6:	dc00      	bgt.n	2daa <__ieee754_pow+0x16a>
    2da8:	e770      	b.n	2c8c <__ieee754_pow+0x4c>
    2daa:	4929      	ldr	r1, [pc, #164]	; (2e50 <__ieee754_pow+0x210>)
    2dac:	153b      	asrs	r3, r7, #20
    2dae:	468c      	mov	ip, r1
    2db0:	4463      	add	r3, ip
    2db2:	2b14      	cmp	r3, #20
    2db4:	dc01      	bgt.n	2dba <__ieee754_pow+0x17a>
    2db6:	f000 fbf2 	bl	359e <__ieee754_pow+0x95e>
    2dba:	2134      	movs	r1, #52	; 0x34
    2dbc:	1acb      	subs	r3, r1, r3
    2dbe:	9900      	ldr	r1, [sp, #0]
    2dc0:	40d9      	lsrs	r1, r3
    2dc2:	0008      	movs	r0, r1
    2dc4:	4098      	lsls	r0, r3
    2dc6:	4282      	cmp	r2, r0
    2dc8:	d000      	beq.n	2dcc <__ieee754_pow+0x18c>
    2dca:	e75f      	b.n	2c8c <__ieee754_pow+0x4c>
    2dcc:	2301      	movs	r3, #1
    2dce:	4019      	ands	r1, r3
    2dd0:	3301      	adds	r3, #1
    2dd2:	1a5b      	subs	r3, r3, r1
    2dd4:	469b      	mov	fp, r3
    2dd6:	e759      	b.n	2c8c <__ieee754_pow+0x4c>
    2dd8:	4b15      	ldr	r3, [pc, #84]	; (2e30 <__ieee754_pow+0x1f0>)
    2dda:	18e0      	adds	r0, r4, r3
    2ddc:	4306      	orrs	r6, r0
    2dde:	d100      	bne.n	2de2 <__ieee754_pow+0x1a2>
    2de0:	e775      	b.n	2cce <__ieee754_pow+0x8e>
    2de2:	4b17      	ldr	r3, [pc, #92]	; (2e40 <__ieee754_pow+0x200>)
    2de4:	429c      	cmp	r4, r3
    2de6:	dc00      	bgt.n	2dea <__ieee754_pow+0x1aa>
    2de8:	e351      	b.n	348e <__ieee754_pow+0x84e>
    2dea:	4653      	mov	r3, sl
    2dec:	2b00      	cmp	r3, #0
    2dee:	db16      	blt.n	2e1e <__ieee754_pow+0x1de>
    2df0:	9b00      	ldr	r3, [sp, #0]
    2df2:	9c01      	ldr	r4, [sp, #4]
    2df4:	001e      	movs	r6, r3
    2df6:	0021      	movs	r1, r4
    2df8:	e76b      	b.n	2cd2 <__ieee754_pow+0x92>
    2dfa:	2302      	movs	r3, #2
    2dfc:	469b      	mov	fp, r3
    2dfe:	e745      	b.n	2c8c <__ieee754_pow+0x4c>
    2e00:	0032      	movs	r2, r6
    2e02:	002b      	movs	r3, r5
    2e04:	0030      	movs	r0, r6
    2e06:	0029      	movs	r1, r5
    2e08:	f002 fcd0 	bl	57ac <__aeabi_dsub>
    2e0c:	0002      	movs	r2, r0
    2e0e:	000b      	movs	r3, r1
    2e10:	f001 fe2e 	bl	4a70 <__aeabi_ddiv>
    2e14:	0006      	movs	r6, r0
    2e16:	e75c      	b.n	2cd2 <__ieee754_pow+0x92>
    2e18:	4653      	mov	r3, sl
    2e1a:	2b00      	cmp	r3, #0
    2e1c:	db85      	blt.n	2d2a <__ieee754_pow+0xea>
    2e1e:	2600      	movs	r6, #0
    2e20:	2100      	movs	r1, #0
    2e22:	e756      	b.n	2cd2 <__ieee754_pow+0x92>
    2e24:	7ff00000 	.word	0x7ff00000
    2e28:	3ff00000 	.word	0x3ff00000
    2e2c:	3fe00000 	.word	0x3fe00000
    2e30:	c0100000 	.word	0xc0100000
    2e34:	000064c8 	.word	0x000064c8
    2e38:	41e00000 	.word	0x41e00000
    2e3c:	43f00000 	.word	0x43f00000
    2e40:	3fefffff 	.word	0x3fefffff
    2e44:	8800759c 	.word	0x8800759c
    2e48:	7e37e43c 	.word	0x7e37e43c
    2e4c:	433fffff 	.word	0x433fffff
    2e50:	fffffc01 	.word	0xfffffc01
    2e54:	4be8      	ldr	r3, [pc, #928]	; (31f8 <__ieee754_pow+0x5b8>)
    2e56:	2200      	movs	r2, #0
    2e58:	429c      	cmp	r4, r3
    2e5a:	dc06      	bgt.n	2e6a <__ieee754_pow+0x22a>
    2e5c:	2200      	movs	r2, #0
    2e5e:	4be7      	ldr	r3, [pc, #924]	; (31fc <__ieee754_pow+0x5bc>)
    2e60:	f002 fa2a 	bl	52b8 <__aeabi_dmul>
    2e64:	2235      	movs	r2, #53	; 0x35
    2e66:	000c      	movs	r4, r1
    2e68:	4252      	negs	r2, r2
    2e6a:	4de5      	ldr	r5, [pc, #916]	; (3200 <__ieee754_pow+0x5c0>)
    2e6c:	1523      	asrs	r3, r4, #20
    2e6e:	46ac      	mov	ip, r5
    2e70:	4463      	add	r3, ip
    2e72:	4699      	mov	r9, r3
    2e74:	0324      	lsls	r4, r4, #12
    2e76:	4de3      	ldr	r5, [pc, #908]	; (3204 <__ieee754_pow+0x5c4>)
    2e78:	4be3      	ldr	r3, [pc, #908]	; (3208 <__ieee754_pow+0x5c8>)
    2e7a:	0b24      	lsrs	r4, r4, #12
    2e7c:	4491      	add	r9, r2
    2e7e:	4325      	orrs	r5, r4
    2e80:	429c      	cmp	r4, r3
    2e82:	dd09      	ble.n	2e98 <__ieee754_pow+0x258>
    2e84:	4be1      	ldr	r3, [pc, #900]	; (320c <__ieee754_pow+0x5cc>)
    2e86:	429c      	cmp	r4, r3
    2e88:	dc00      	bgt.n	2e8c <__ieee754_pow+0x24c>
    2e8a:	e3a9      	b.n	35e0 <__ieee754_pow+0x9a0>
    2e8c:	2301      	movs	r3, #1
    2e8e:	469c      	mov	ip, r3
    2e90:	4bdf      	ldr	r3, [pc, #892]	; (3210 <__ieee754_pow+0x5d0>)
    2e92:	44e1      	add	r9, ip
    2e94:	469c      	mov	ip, r3
    2e96:	4465      	add	r5, ip
    2e98:	2300      	movs	r3, #0
    2e9a:	2400      	movs	r4, #0
    2e9c:	2200      	movs	r2, #0
    2e9e:	9308      	str	r3, [sp, #32]
    2ea0:	9409      	str	r4, [sp, #36]	; 0x24
    2ea2:	930c      	str	r3, [sp, #48]	; 0x30
    2ea4:	940d      	str	r4, [sp, #52]	; 0x34
    2ea6:	2400      	movs	r4, #0
    2ea8:	4bd6      	ldr	r3, [pc, #856]	; (3204 <__ieee754_pow+0x5c4>)
    2eaa:	9206      	str	r2, [sp, #24]
    2eac:	9307      	str	r3, [sp, #28]
    2eae:	9a06      	ldr	r2, [sp, #24]
    2eb0:	9b07      	ldr	r3, [sp, #28]
    2eb2:	0029      	movs	r1, r5
    2eb4:	900a      	str	r0, [sp, #40]	; 0x28
    2eb6:	910b      	str	r1, [sp, #44]	; 0x2c
    2eb8:	f002 fc78 	bl	57ac <__aeabi_dsub>
    2ebc:	9a06      	ldr	r2, [sp, #24]
    2ebe:	9b07      	ldr	r3, [sp, #28]
    2ec0:	0006      	movs	r6, r0
    2ec2:	000f      	movs	r7, r1
    2ec4:	980a      	ldr	r0, [sp, #40]	; 0x28
    2ec6:	990b      	ldr	r1, [sp, #44]	; 0x2c
    2ec8:	f001 faa6 	bl	4418 <__aeabi_dadd>
    2ecc:	0002      	movs	r2, r0
    2ece:	000b      	movs	r3, r1
    2ed0:	2000      	movs	r0, #0
    2ed2:	49cc      	ldr	r1, [pc, #816]	; (3204 <__ieee754_pow+0x5c4>)
    2ed4:	f001 fdcc 	bl	4a70 <__aeabi_ddiv>
    2ed8:	000a      	movs	r2, r1
    2eda:	0001      	movs	r1, r0
    2edc:	0013      	movs	r3, r2
    2ede:	910e      	str	r1, [sp, #56]	; 0x38
    2ee0:	920f      	str	r2, [sp, #60]	; 0x3c
    2ee2:	0002      	movs	r2, r0
    2ee4:	0039      	movs	r1, r7
    2ee6:	0030      	movs	r0, r6
    2ee8:	f002 f9e6 	bl	52b8 <__aeabi_dmul>
    2eec:	000a      	movs	r2, r1
    2eee:	0001      	movs	r1, r0
    2ef0:	2080      	movs	r0, #128	; 0x80
    2ef2:	9104      	str	r1, [sp, #16]
    2ef4:	9205      	str	r2, [sp, #20]
    2ef6:	0013      	movs	r3, r2
    2ef8:	2200      	movs	r2, #0
    2efa:	2180      	movs	r1, #128	; 0x80
    2efc:	0300      	lsls	r0, r0, #12
    2efe:	4684      	mov	ip, r0
    2f00:	9202      	str	r2, [sp, #8]
    2f02:	9303      	str	r3, [sp, #12]
    2f04:	2200      	movs	r2, #0
    2f06:	0589      	lsls	r1, r1, #22
    2f08:	106d      	asrs	r5, r5, #1
    2f0a:	430d      	orrs	r5, r1
    2f0c:	4465      	add	r5, ip
    2f0e:	192b      	adds	r3, r5, r4
    2f10:	9802      	ldr	r0, [sp, #8]
    2f12:	9903      	ldr	r1, [sp, #12]
    2f14:	0014      	movs	r4, r2
    2f16:	001d      	movs	r5, r3
    2f18:	f002 f9ce 	bl	52b8 <__aeabi_dmul>
    2f1c:	0002      	movs	r2, r0
    2f1e:	000b      	movs	r3, r1
    2f20:	0030      	movs	r0, r6
    2f22:	0039      	movs	r1, r7
    2f24:	f002 fc42 	bl	57ac <__aeabi_dsub>
    2f28:	9a06      	ldr	r2, [sp, #24]
    2f2a:	9b07      	ldr	r3, [sp, #28]
    2f2c:	0006      	movs	r6, r0
    2f2e:	000f      	movs	r7, r1
    2f30:	0020      	movs	r0, r4
    2f32:	0029      	movs	r1, r5
    2f34:	f002 fc3a 	bl	57ac <__aeabi_dsub>
    2f38:	0002      	movs	r2, r0
    2f3a:	000b      	movs	r3, r1
    2f3c:	980a      	ldr	r0, [sp, #40]	; 0x28
    2f3e:	990b      	ldr	r1, [sp, #44]	; 0x2c
    2f40:	f002 fc34 	bl	57ac <__aeabi_dsub>
    2f44:	9a02      	ldr	r2, [sp, #8]
    2f46:	9b03      	ldr	r3, [sp, #12]
    2f48:	f002 f9b6 	bl	52b8 <__aeabi_dmul>
    2f4c:	0002      	movs	r2, r0
    2f4e:	000b      	movs	r3, r1
    2f50:	0030      	movs	r0, r6
    2f52:	0039      	movs	r1, r7
    2f54:	f002 fc2a 	bl	57ac <__aeabi_dsub>
    2f58:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    2f5a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    2f5c:	f002 f9ac 	bl	52b8 <__aeabi_dmul>
    2f60:	9d04      	ldr	r5, [sp, #16]
    2f62:	9e05      	ldr	r6, [sp, #20]
    2f64:	9006      	str	r0, [sp, #24]
    2f66:	9107      	str	r1, [sp, #28]
    2f68:	002a      	movs	r2, r5
    2f6a:	0033      	movs	r3, r6
    2f6c:	0028      	movs	r0, r5
    2f6e:	0031      	movs	r1, r6
    2f70:	f002 f9a2 	bl	52b8 <__aeabi_dmul>
    2f74:	0006      	movs	r6, r0
    2f76:	000f      	movs	r7, r1
    2f78:	4aa6      	ldr	r2, [pc, #664]	; (3214 <__ieee754_pow+0x5d4>)
    2f7a:	4ba7      	ldr	r3, [pc, #668]	; (3218 <__ieee754_pow+0x5d8>)
    2f7c:	f002 f99c 	bl	52b8 <__aeabi_dmul>
    2f80:	4aa6      	ldr	r2, [pc, #664]	; (321c <__ieee754_pow+0x5dc>)
    2f82:	4ba7      	ldr	r3, [pc, #668]	; (3220 <__ieee754_pow+0x5e0>)
    2f84:	f001 fa48 	bl	4418 <__aeabi_dadd>
    2f88:	0032      	movs	r2, r6
    2f8a:	003b      	movs	r3, r7
    2f8c:	f002 f994 	bl	52b8 <__aeabi_dmul>
    2f90:	4aa4      	ldr	r2, [pc, #656]	; (3224 <__ieee754_pow+0x5e4>)
    2f92:	4ba5      	ldr	r3, [pc, #660]	; (3228 <__ieee754_pow+0x5e8>)
    2f94:	f001 fa40 	bl	4418 <__aeabi_dadd>
    2f98:	0032      	movs	r2, r6
    2f9a:	003b      	movs	r3, r7
    2f9c:	f002 f98c 	bl	52b8 <__aeabi_dmul>
    2fa0:	4aa2      	ldr	r2, [pc, #648]	; (322c <__ieee754_pow+0x5ec>)
    2fa2:	4ba3      	ldr	r3, [pc, #652]	; (3230 <__ieee754_pow+0x5f0>)
    2fa4:	f001 fa38 	bl	4418 <__aeabi_dadd>
    2fa8:	0032      	movs	r2, r6
    2faa:	003b      	movs	r3, r7
    2fac:	f002 f984 	bl	52b8 <__aeabi_dmul>
    2fb0:	4aa0      	ldr	r2, [pc, #640]	; (3234 <__ieee754_pow+0x5f4>)
    2fb2:	4ba1      	ldr	r3, [pc, #644]	; (3238 <__ieee754_pow+0x5f8>)
    2fb4:	f001 fa30 	bl	4418 <__aeabi_dadd>
    2fb8:	0032      	movs	r2, r6
    2fba:	003b      	movs	r3, r7
    2fbc:	f002 f97c 	bl	52b8 <__aeabi_dmul>
    2fc0:	4a9e      	ldr	r2, [pc, #632]	; (323c <__ieee754_pow+0x5fc>)
    2fc2:	4b9f      	ldr	r3, [pc, #636]	; (3240 <__ieee754_pow+0x600>)
    2fc4:	f001 fa28 	bl	4418 <__aeabi_dadd>
    2fc8:	0032      	movs	r2, r6
    2fca:	0004      	movs	r4, r0
    2fcc:	000d      	movs	r5, r1
    2fce:	003b      	movs	r3, r7
    2fd0:	0030      	movs	r0, r6
    2fd2:	0039      	movs	r1, r7
    2fd4:	f002 f970 	bl	52b8 <__aeabi_dmul>
    2fd8:	0002      	movs	r2, r0
    2fda:	000b      	movs	r3, r1
    2fdc:	0020      	movs	r0, r4
    2fde:	0029      	movs	r1, r5
    2fe0:	f002 f96a 	bl	52b8 <__aeabi_dmul>
    2fe4:	9e02      	ldr	r6, [sp, #8]
    2fe6:	9f03      	ldr	r7, [sp, #12]
    2fe8:	0004      	movs	r4, r0
    2fea:	000d      	movs	r5, r1
    2fec:	9804      	ldr	r0, [sp, #16]
    2fee:	9905      	ldr	r1, [sp, #20]
    2ff0:	0032      	movs	r2, r6
    2ff2:	003b      	movs	r3, r7
    2ff4:	f001 fa10 	bl	4418 <__aeabi_dadd>
    2ff8:	9a06      	ldr	r2, [sp, #24]
    2ffa:	9b07      	ldr	r3, [sp, #28]
    2ffc:	f002 f95c 	bl	52b8 <__aeabi_dmul>
    3000:	0022      	movs	r2, r4
    3002:	002b      	movs	r3, r5
    3004:	f001 fa08 	bl	4418 <__aeabi_dadd>
    3008:	0032      	movs	r2, r6
    300a:	900a      	str	r0, [sp, #40]	; 0x28
    300c:	910b      	str	r1, [sp, #44]	; 0x2c
    300e:	003b      	movs	r3, r7
    3010:	0030      	movs	r0, r6
    3012:	0039      	movs	r1, r7
    3014:	9602      	str	r6, [sp, #8]
    3016:	9703      	str	r7, [sp, #12]
    3018:	f002 f94e 	bl	52b8 <__aeabi_dmul>
    301c:	2200      	movs	r2, #0
    301e:	4b89      	ldr	r3, [pc, #548]	; (3244 <__ieee754_pow+0x604>)
    3020:	0004      	movs	r4, r0
    3022:	000d      	movs	r5, r1
    3024:	f001 f9f8 	bl	4418 <__aeabi_dadd>
    3028:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    302a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    302c:	f001 f9f4 	bl	4418 <__aeabi_dadd>
    3030:	2600      	movs	r6, #0
    3032:	000f      	movs	r7, r1
    3034:	0032      	movs	r2, r6
    3036:	000b      	movs	r3, r1
    3038:	9802      	ldr	r0, [sp, #8]
    303a:	9903      	ldr	r1, [sp, #12]
    303c:	f002 f93c 	bl	52b8 <__aeabi_dmul>
    3040:	2200      	movs	r2, #0
    3042:	9002      	str	r0, [sp, #8]
    3044:	9103      	str	r1, [sp, #12]
    3046:	4b7f      	ldr	r3, [pc, #508]	; (3244 <__ieee754_pow+0x604>)
    3048:	0030      	movs	r0, r6
    304a:	0039      	movs	r1, r7
    304c:	f002 fbae 	bl	57ac <__aeabi_dsub>
    3050:	0022      	movs	r2, r4
    3052:	002b      	movs	r3, r5
    3054:	f002 fbaa 	bl	57ac <__aeabi_dsub>
    3058:	0002      	movs	r2, r0
    305a:	000b      	movs	r3, r1
    305c:	980a      	ldr	r0, [sp, #40]	; 0x28
    305e:	990b      	ldr	r1, [sp, #44]	; 0x2c
    3060:	f002 fba4 	bl	57ac <__aeabi_dsub>
    3064:	9a04      	ldr	r2, [sp, #16]
    3066:	9b05      	ldr	r3, [sp, #20]
    3068:	f002 f926 	bl	52b8 <__aeabi_dmul>
    306c:	0032      	movs	r2, r6
    306e:	0004      	movs	r4, r0
    3070:	000d      	movs	r5, r1
    3072:	9806      	ldr	r0, [sp, #24]
    3074:	9907      	ldr	r1, [sp, #28]
    3076:	003b      	movs	r3, r7
    3078:	f002 f91e 	bl	52b8 <__aeabi_dmul>
    307c:	0002      	movs	r2, r0
    307e:	000b      	movs	r3, r1
    3080:	0020      	movs	r0, r4
    3082:	0029      	movs	r1, r5
    3084:	f001 f9c8 	bl	4418 <__aeabi_dadd>
    3088:	0004      	movs	r4, r0
    308a:	000d      	movs	r5, r1
    308c:	0002      	movs	r2, r0
    308e:	000b      	movs	r3, r1
    3090:	9802      	ldr	r0, [sp, #8]
    3092:	9903      	ldr	r1, [sp, #12]
    3094:	f001 f9c0 	bl	4418 <__aeabi_dadd>
    3098:	2600      	movs	r6, #0
    309a:	22e0      	movs	r2, #224	; 0xe0
    309c:	4b6a      	ldr	r3, [pc, #424]	; (3248 <__ieee754_pow+0x608>)
    309e:	0612      	lsls	r2, r2, #24
    30a0:	0030      	movs	r0, r6
    30a2:	000f      	movs	r7, r1
    30a4:	f002 f908 	bl	52b8 <__aeabi_dmul>
    30a8:	9a02      	ldr	r2, [sp, #8]
    30aa:	9b03      	ldr	r3, [sp, #12]
    30ac:	9004      	str	r0, [sp, #16]
    30ae:	9105      	str	r1, [sp, #20]
    30b0:	0030      	movs	r0, r6
    30b2:	0039      	movs	r1, r7
    30b4:	f002 fb7a 	bl	57ac <__aeabi_dsub>
    30b8:	0002      	movs	r2, r0
    30ba:	000b      	movs	r3, r1
    30bc:	0020      	movs	r0, r4
    30be:	0029      	movs	r1, r5
    30c0:	f002 fb74 	bl	57ac <__aeabi_dsub>
    30c4:	4a61      	ldr	r2, [pc, #388]	; (324c <__ieee754_pow+0x60c>)
    30c6:	4b60      	ldr	r3, [pc, #384]	; (3248 <__ieee754_pow+0x608>)
    30c8:	f002 f8f6 	bl	52b8 <__aeabi_dmul>
    30cc:	4a60      	ldr	r2, [pc, #384]	; (3250 <__ieee754_pow+0x610>)
    30ce:	0004      	movs	r4, r0
    30d0:	000d      	movs	r5, r1
    30d2:	4b60      	ldr	r3, [pc, #384]	; (3254 <__ieee754_pow+0x614>)
    30d4:	0030      	movs	r0, r6
    30d6:	0039      	movs	r1, r7
    30d8:	f002 f8ee 	bl	52b8 <__aeabi_dmul>
    30dc:	0002      	movs	r2, r0
    30de:	000b      	movs	r3, r1
    30e0:	0020      	movs	r0, r4
    30e2:	0029      	movs	r1, r5
    30e4:	f001 f998 	bl	4418 <__aeabi_dadd>
    30e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    30ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    30ec:	f001 f994 	bl	4418 <__aeabi_dadd>
    30f0:	0006      	movs	r6, r0
    30f2:	4648      	mov	r0, r9
    30f4:	000f      	movs	r7, r1
    30f6:	f002 ff03 	bl	5f00 <__aeabi_i2d>
    30fa:	0004      	movs	r4, r0
    30fc:	000d      	movs	r5, r1
    30fe:	9804      	ldr	r0, [sp, #16]
    3100:	9905      	ldr	r1, [sp, #20]
    3102:	0032      	movs	r2, r6
    3104:	003b      	movs	r3, r7
    3106:	f001 f987 	bl	4418 <__aeabi_dadd>
    310a:	9a08      	ldr	r2, [sp, #32]
    310c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    310e:	f001 f983 	bl	4418 <__aeabi_dadd>
    3112:	0022      	movs	r2, r4
    3114:	002b      	movs	r3, r5
    3116:	f001 f97f 	bl	4418 <__aeabi_dadd>
    311a:	2000      	movs	r0, #0
    311c:	0022      	movs	r2, r4
    311e:	002b      	movs	r3, r5
    3120:	9002      	str	r0, [sp, #8]
    3122:	9103      	str	r1, [sp, #12]
    3124:	f002 fb42 	bl	57ac <__aeabi_dsub>
    3128:	9a08      	ldr	r2, [sp, #32]
    312a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    312c:	f002 fb3e 	bl	57ac <__aeabi_dsub>
    3130:	9a04      	ldr	r2, [sp, #16]
    3132:	9b05      	ldr	r3, [sp, #20]
    3134:	f002 fb3a 	bl	57ac <__aeabi_dsub>
    3138:	0002      	movs	r2, r0
    313a:	000b      	movs	r3, r1
    313c:	0030      	movs	r0, r6
    313e:	0039      	movs	r1, r7
    3140:	f002 fb34 	bl	57ac <__aeabi_dsub>
    3144:	9004      	str	r0, [sp, #16]
    3146:	9105      	str	r1, [sp, #20]
    3148:	465b      	mov	r3, fp
    314a:	4642      	mov	r2, r8
    314c:	3b01      	subs	r3, #1
    314e:	4313      	orrs	r3, r2
    3150:	d100      	bne.n	3154 <__ieee754_pow+0x514>
    3152:	e197      	b.n	3484 <__ieee754_pow+0x844>
    3154:	2300      	movs	r3, #0
    3156:	4c2b      	ldr	r4, [pc, #172]	; (3204 <__ieee754_pow+0x5c4>)
    3158:	9306      	str	r3, [sp, #24]
    315a:	9407      	str	r4, [sp, #28]
    315c:	9800      	ldr	r0, [sp, #0]
    315e:	9901      	ldr	r1, [sp, #4]
    3160:	2600      	movs	r6, #0
    3162:	000b      	movs	r3, r1
    3164:	0032      	movs	r2, r6
    3166:	000f      	movs	r7, r1
    3168:	f002 fb20 	bl	57ac <__aeabi_dsub>
    316c:	9a02      	ldr	r2, [sp, #8]
    316e:	9b03      	ldr	r3, [sp, #12]
    3170:	f002 f8a2 	bl	52b8 <__aeabi_dmul>
    3174:	9a00      	ldr	r2, [sp, #0]
    3176:	9b01      	ldr	r3, [sp, #4]
    3178:	0004      	movs	r4, r0
    317a:	000d      	movs	r5, r1
    317c:	9804      	ldr	r0, [sp, #16]
    317e:	9905      	ldr	r1, [sp, #20]
    3180:	f002 f89a 	bl	52b8 <__aeabi_dmul>
    3184:	0002      	movs	r2, r0
    3186:	000b      	movs	r3, r1
    3188:	0020      	movs	r0, r4
    318a:	0029      	movs	r1, r5
    318c:	f001 f944 	bl	4418 <__aeabi_dadd>
    3190:	0004      	movs	r4, r0
    3192:	000d      	movs	r5, r1
    3194:	9802      	ldr	r0, [sp, #8]
    3196:	9903      	ldr	r1, [sp, #12]
    3198:	003b      	movs	r3, r7
    319a:	0032      	movs	r2, r6
    319c:	9404      	str	r4, [sp, #16]
    319e:	9505      	str	r5, [sp, #20]
    31a0:	f002 f88a 	bl	52b8 <__aeabi_dmul>
    31a4:	9000      	str	r0, [sp, #0]
    31a6:	9101      	str	r1, [sp, #4]
    31a8:	000b      	movs	r3, r1
    31aa:	0002      	movs	r2, r0
    31ac:	0029      	movs	r1, r5
    31ae:	0020      	movs	r0, r4
    31b0:	f001 f932 	bl	4418 <__aeabi_dadd>
    31b4:	4b28      	ldr	r3, [pc, #160]	; (3258 <__ieee754_pow+0x618>)
    31b6:	4681      	mov	r9, r0
    31b8:	1e0f      	subs	r7, r1, #0
    31ba:	468a      	mov	sl, r1
    31bc:	429f      	cmp	r7, r3
    31be:	dc00      	bgt.n	31c2 <__ieee754_pow+0x582>
    31c0:	e13c      	b.n	343c <__ieee754_pow+0x7fc>
    31c2:	4b26      	ldr	r3, [pc, #152]	; (325c <__ieee754_pow+0x61c>)
    31c4:	18cb      	adds	r3, r1, r3
    31c6:	4303      	orrs	r3, r0
    31c8:	d000      	beq.n	31cc <__ieee754_pow+0x58c>
    31ca:	e1db      	b.n	3584 <__ieee754_pow+0x944>
    31cc:	9804      	ldr	r0, [sp, #16]
    31ce:	9905      	ldr	r1, [sp, #20]
    31d0:	4a23      	ldr	r2, [pc, #140]	; (3260 <__ieee754_pow+0x620>)
    31d2:	4b24      	ldr	r3, [pc, #144]	; (3264 <__ieee754_pow+0x624>)
    31d4:	f001 f920 	bl	4418 <__aeabi_dadd>
    31d8:	9a00      	ldr	r2, [sp, #0]
    31da:	9b01      	ldr	r3, [sp, #4]
    31dc:	0004      	movs	r4, r0
    31de:	000d      	movs	r5, r1
    31e0:	4648      	mov	r0, r9
    31e2:	0039      	movs	r1, r7
    31e4:	f002 fae2 	bl	57ac <__aeabi_dsub>
    31e8:	0002      	movs	r2, r0
    31ea:	000b      	movs	r3, r1
    31ec:	0020      	movs	r0, r4
    31ee:	0029      	movs	r1, r5
    31f0:	f000 fcae 	bl	3b50 <__aeabi_dcmpgt>
    31f4:	003e      	movs	r6, r7
    31f6:	e037      	b.n	3268 <__ieee754_pow+0x628>
    31f8:	000fffff 	.word	0x000fffff
    31fc:	43400000 	.word	0x43400000
    3200:	fffffc01 	.word	0xfffffc01
    3204:	3ff00000 	.word	0x3ff00000
    3208:	0003988e 	.word	0x0003988e
    320c:	000bb679 	.word	0x000bb679
    3210:	fff00000 	.word	0xfff00000
    3214:	4a454eef 	.word	0x4a454eef
    3218:	3fca7e28 	.word	0x3fca7e28
    321c:	93c9db65 	.word	0x93c9db65
    3220:	3fcd864a 	.word	0x3fcd864a
    3224:	a91d4101 	.word	0xa91d4101
    3228:	3fd17460 	.word	0x3fd17460
    322c:	518f264d 	.word	0x518f264d
    3230:	3fd55555 	.word	0x3fd55555
    3234:	db6fabff 	.word	0xdb6fabff
    3238:	3fdb6db6 	.word	0x3fdb6db6
    323c:	33333303 	.word	0x33333303
    3240:	3fe33333 	.word	0x3fe33333
    3244:	40080000 	.word	0x40080000
    3248:	3feec709 	.word	0x3feec709
    324c:	dc3a03fd 	.word	0xdc3a03fd
    3250:	145b01f5 	.word	0x145b01f5
    3254:	be3e2fe0 	.word	0xbe3e2fe0
    3258:	408fffff 	.word	0x408fffff
    325c:	bf700000 	.word	0xbf700000
    3260:	652b82fe 	.word	0x652b82fe
    3264:	3c971547 	.word	0x3c971547
    3268:	2800      	cmp	r0, #0
    326a:	d000      	beq.n	326e <__ieee754_pow+0x62e>
    326c:	e18a      	b.n	3584 <__ieee754_pow+0x944>
    326e:	2280      	movs	r2, #128	; 0x80
    3270:	4be7      	ldr	r3, [pc, #924]	; (3610 <__ieee754_pow+0x9d0>)
    3272:	0352      	lsls	r2, r2, #13
    3274:	469c      	mov	ip, r3
    3276:	0013      	movs	r3, r2
    3278:	1536      	asrs	r6, r6, #20
    327a:	4466      	add	r6, ip
    327c:	4133      	asrs	r3, r6
    327e:	49e5      	ldr	r1, [pc, #916]	; (3614 <__ieee754_pow+0x9d4>)
    3280:	19db      	adds	r3, r3, r7
    3282:	005e      	lsls	r6, r3, #1
    3284:	001c      	movs	r4, r3
    3286:	031b      	lsls	r3, r3, #12
    3288:	468c      	mov	ip, r1
    328a:	0b1b      	lsrs	r3, r3, #12
    328c:	4313      	orrs	r3, r2
    328e:	2214      	movs	r2, #20
    3290:	0d76      	lsrs	r6, r6, #21
    3292:	4fe1      	ldr	r7, [pc, #900]	; (3618 <__ieee754_pow+0x9d8>)
    3294:	4466      	add	r6, ip
    3296:	4137      	asrs	r7, r6
    3298:	1b96      	subs	r6, r2, r6
    329a:	4133      	asrs	r3, r6
    329c:	4698      	mov	r8, r3
    329e:	4653      	mov	r3, sl
    32a0:	43bc      	bics	r4, r7
    32a2:	2000      	movs	r0, #0
    32a4:	0021      	movs	r1, r4
    32a6:	2b00      	cmp	r3, #0
    32a8:	da00      	bge.n	32ac <__ieee754_pow+0x66c>
    32aa:	e1a9      	b.n	3600 <__ieee754_pow+0x9c0>
    32ac:	0002      	movs	r2, r0
    32ae:	000b      	movs	r3, r1
    32b0:	9800      	ldr	r0, [sp, #0]
    32b2:	9901      	ldr	r1, [sp, #4]
    32b4:	f002 fa7a 	bl	57ac <__aeabi_dsub>
    32b8:	000b      	movs	r3, r1
    32ba:	9000      	str	r0, [sp, #0]
    32bc:	9101      	str	r1, [sp, #4]
    32be:	0002      	movs	r2, r0
    32c0:	9804      	ldr	r0, [sp, #16]
    32c2:	9905      	ldr	r1, [sp, #20]
    32c4:	f001 f8a8 	bl	4418 <__aeabi_dadd>
    32c8:	4643      	mov	r3, r8
    32ca:	051b      	lsls	r3, r3, #20
    32cc:	4699      	mov	r9, r3
    32ce:	2000      	movs	r0, #0
    32d0:	2200      	movs	r2, #0
    32d2:	4bd2      	ldr	r3, [pc, #840]	; (361c <__ieee754_pow+0x9dc>)
    32d4:	0006      	movs	r6, r0
    32d6:	000f      	movs	r7, r1
    32d8:	f001 ffee 	bl	52b8 <__aeabi_dmul>
    32dc:	9a00      	ldr	r2, [sp, #0]
    32de:	9b01      	ldr	r3, [sp, #4]
    32e0:	9002      	str	r0, [sp, #8]
    32e2:	9103      	str	r1, [sp, #12]
    32e4:	0030      	movs	r0, r6
    32e6:	0039      	movs	r1, r7
    32e8:	f002 fa60 	bl	57ac <__aeabi_dsub>
    32ec:	0002      	movs	r2, r0
    32ee:	000b      	movs	r3, r1
    32f0:	9804      	ldr	r0, [sp, #16]
    32f2:	9905      	ldr	r1, [sp, #20]
    32f4:	f002 fa5a 	bl	57ac <__aeabi_dsub>
    32f8:	4ac9      	ldr	r2, [pc, #804]	; (3620 <__ieee754_pow+0x9e0>)
    32fa:	4bca      	ldr	r3, [pc, #808]	; (3624 <__ieee754_pow+0x9e4>)
    32fc:	f001 ffdc 	bl	52b8 <__aeabi_dmul>
    3300:	4ac9      	ldr	r2, [pc, #804]	; (3628 <__ieee754_pow+0x9e8>)
    3302:	0004      	movs	r4, r0
    3304:	000d      	movs	r5, r1
    3306:	4bc9      	ldr	r3, [pc, #804]	; (362c <__ieee754_pow+0x9ec>)
    3308:	0030      	movs	r0, r6
    330a:	0039      	movs	r1, r7
    330c:	f001 ffd4 	bl	52b8 <__aeabi_dmul>
    3310:	0002      	movs	r2, r0
    3312:	000b      	movs	r3, r1
    3314:	0020      	movs	r0, r4
    3316:	0029      	movs	r1, r5
    3318:	f001 f87e 	bl	4418 <__aeabi_dadd>
    331c:	0004      	movs	r4, r0
    331e:	000d      	movs	r5, r1
    3320:	0002      	movs	r2, r0
    3322:	000b      	movs	r3, r1
    3324:	9802      	ldr	r0, [sp, #8]
    3326:	9903      	ldr	r1, [sp, #12]
    3328:	f001 f876 	bl	4418 <__aeabi_dadd>
    332c:	9a02      	ldr	r2, [sp, #8]
    332e:	9b03      	ldr	r3, [sp, #12]
    3330:	0006      	movs	r6, r0
    3332:	000f      	movs	r7, r1
    3334:	f002 fa3a 	bl	57ac <__aeabi_dsub>
    3338:	0002      	movs	r2, r0
    333a:	000b      	movs	r3, r1
    333c:	0020      	movs	r0, r4
    333e:	0029      	movs	r1, r5
    3340:	f002 fa34 	bl	57ac <__aeabi_dsub>
    3344:	0032      	movs	r2, r6
    3346:	9000      	str	r0, [sp, #0]
    3348:	9101      	str	r1, [sp, #4]
    334a:	003b      	movs	r3, r7
    334c:	0030      	movs	r0, r6
    334e:	0039      	movs	r1, r7
    3350:	f001 ffb2 	bl	52b8 <__aeabi_dmul>
    3354:	0004      	movs	r4, r0
    3356:	000d      	movs	r5, r1
    3358:	4ab5      	ldr	r2, [pc, #724]	; (3630 <__ieee754_pow+0x9f0>)
    335a:	4bb6      	ldr	r3, [pc, #728]	; (3634 <__ieee754_pow+0x9f4>)
    335c:	f001 ffac 	bl	52b8 <__aeabi_dmul>
    3360:	4ab5      	ldr	r2, [pc, #724]	; (3638 <__ieee754_pow+0x9f8>)
    3362:	4bb6      	ldr	r3, [pc, #728]	; (363c <__ieee754_pow+0x9fc>)
    3364:	f002 fa22 	bl	57ac <__aeabi_dsub>
    3368:	0022      	movs	r2, r4
    336a:	002b      	movs	r3, r5
    336c:	f001 ffa4 	bl	52b8 <__aeabi_dmul>
    3370:	4ab3      	ldr	r2, [pc, #716]	; (3640 <__ieee754_pow+0xa00>)
    3372:	4bb4      	ldr	r3, [pc, #720]	; (3644 <__ieee754_pow+0xa04>)
    3374:	f001 f850 	bl	4418 <__aeabi_dadd>
    3378:	0022      	movs	r2, r4
    337a:	002b      	movs	r3, r5
    337c:	f001 ff9c 	bl	52b8 <__aeabi_dmul>
    3380:	4ab1      	ldr	r2, [pc, #708]	; (3648 <__ieee754_pow+0xa08>)
    3382:	4bb2      	ldr	r3, [pc, #712]	; (364c <__ieee754_pow+0xa0c>)
    3384:	f002 fa12 	bl	57ac <__aeabi_dsub>
    3388:	0022      	movs	r2, r4
    338a:	002b      	movs	r3, r5
    338c:	f001 ff94 	bl	52b8 <__aeabi_dmul>
    3390:	4aaf      	ldr	r2, [pc, #700]	; (3650 <__ieee754_pow+0xa10>)
    3392:	4bb0      	ldr	r3, [pc, #704]	; (3654 <__ieee754_pow+0xa14>)
    3394:	f001 f840 	bl	4418 <__aeabi_dadd>
    3398:	0022      	movs	r2, r4
    339a:	002b      	movs	r3, r5
    339c:	f001 ff8c 	bl	52b8 <__aeabi_dmul>
    33a0:	0002      	movs	r2, r0
    33a2:	000b      	movs	r3, r1
    33a4:	0030      	movs	r0, r6
    33a6:	0039      	movs	r1, r7
    33a8:	f002 fa00 	bl	57ac <__aeabi_dsub>
    33ac:	0004      	movs	r4, r0
    33ae:	000d      	movs	r5, r1
    33b0:	0002      	movs	r2, r0
    33b2:	000b      	movs	r3, r1
    33b4:	0030      	movs	r0, r6
    33b6:	0039      	movs	r1, r7
    33b8:	f001 ff7e 	bl	52b8 <__aeabi_dmul>
    33bc:	2380      	movs	r3, #128	; 0x80
    33be:	9002      	str	r0, [sp, #8]
    33c0:	9103      	str	r1, [sp, #12]
    33c2:	2200      	movs	r2, #0
    33c4:	05db      	lsls	r3, r3, #23
    33c6:	0020      	movs	r0, r4
    33c8:	0029      	movs	r1, r5
    33ca:	f002 f9ef 	bl	57ac <__aeabi_dsub>
    33ce:	0002      	movs	r2, r0
    33d0:	000b      	movs	r3, r1
    33d2:	9802      	ldr	r0, [sp, #8]
    33d4:	9903      	ldr	r1, [sp, #12]
    33d6:	f001 fb4b 	bl	4a70 <__aeabi_ddiv>
    33da:	9a00      	ldr	r2, [sp, #0]
    33dc:	9b01      	ldr	r3, [sp, #4]
    33de:	0004      	movs	r4, r0
    33e0:	000d      	movs	r5, r1
    33e2:	0030      	movs	r0, r6
    33e4:	0039      	movs	r1, r7
    33e6:	f001 ff67 	bl	52b8 <__aeabi_dmul>
    33ea:	9a00      	ldr	r2, [sp, #0]
    33ec:	9b01      	ldr	r3, [sp, #4]
    33ee:	f001 f813 	bl	4418 <__aeabi_dadd>
    33f2:	0002      	movs	r2, r0
    33f4:	000b      	movs	r3, r1
    33f6:	0020      	movs	r0, r4
    33f8:	0029      	movs	r1, r5
    33fa:	f002 f9d7 	bl	57ac <__aeabi_dsub>
    33fe:	0032      	movs	r2, r6
    3400:	003b      	movs	r3, r7
    3402:	f002 f9d3 	bl	57ac <__aeabi_dsub>
    3406:	0002      	movs	r2, r0
    3408:	000b      	movs	r3, r1
    340a:	2000      	movs	r0, #0
    340c:	4992      	ldr	r1, [pc, #584]	; (3658 <__ieee754_pow+0xa18>)
    340e:	f002 f9cd 	bl	57ac <__aeabi_dsub>
    3412:	464b      	mov	r3, r9
    3414:	185b      	adds	r3, r3, r1
    3416:	151a      	asrs	r2, r3, #20
    3418:	2a00      	cmp	r2, #0
    341a:	dc00      	bgt.n	341e <__ieee754_pow+0x7de>
    341c:	e0f4      	b.n	3608 <__ieee754_pow+0x9c8>
    341e:	0019      	movs	r1, r3
    3420:	9a06      	ldr	r2, [sp, #24]
    3422:	9b07      	ldr	r3, [sp, #28]
    3424:	f001 ff48 	bl	52b8 <__aeabi_dmul>
    3428:	0006      	movs	r6, r0
    342a:	e452      	b.n	2cd2 <__ieee754_pow+0x92>
    342c:	0032      	movs	r2, r6
    342e:	0030      	movs	r0, r6
    3430:	002b      	movs	r3, r5
    3432:	0029      	movs	r1, r5
    3434:	f001 ff40 	bl	52b8 <__aeabi_dmul>
    3438:	0006      	movs	r6, r0
    343a:	e44a      	b.n	2cd2 <__ieee754_pow+0x92>
    343c:	4b87      	ldr	r3, [pc, #540]	; (365c <__ieee754_pow+0xa1c>)
    343e:	004e      	lsls	r6, r1, #1
    3440:	0876      	lsrs	r6, r6, #1
    3442:	429e      	cmp	r6, r3
    3444:	dc00      	bgt.n	3448 <__ieee754_pow+0x808>
    3446:	e0bf      	b.n	35c8 <__ieee754_pow+0x988>
    3448:	4b85      	ldr	r3, [pc, #532]	; (3660 <__ieee754_pow+0xa20>)
    344a:	18cb      	adds	r3, r1, r3
    344c:	4303      	orrs	r3, r0
    344e:	d10c      	bne.n	346a <__ieee754_pow+0x82a>
    3450:	9a00      	ldr	r2, [sp, #0]
    3452:	9b01      	ldr	r3, [sp, #4]
    3454:	f002 f9aa 	bl	57ac <__aeabi_dsub>
    3458:	0002      	movs	r2, r0
    345a:	000b      	movs	r3, r1
    345c:	9804      	ldr	r0, [sp, #16]
    345e:	9905      	ldr	r1, [sp, #20]
    3460:	f000 fb6c 	bl	3b3c <__aeabi_dcmple>
    3464:	2800      	cmp	r0, #0
    3466:	d100      	bne.n	346a <__ieee754_pow+0x82a>
    3468:	e701      	b.n	326e <__ieee754_pow+0x62e>
    346a:	9806      	ldr	r0, [sp, #24]
    346c:	9907      	ldr	r1, [sp, #28]
    346e:	4a7d      	ldr	r2, [pc, #500]	; (3664 <__ieee754_pow+0xa24>)
    3470:	4b7d      	ldr	r3, [pc, #500]	; (3668 <__ieee754_pow+0xa28>)
    3472:	f001 ff21 	bl	52b8 <__aeabi_dmul>
    3476:	4a7b      	ldr	r2, [pc, #492]	; (3664 <__ieee754_pow+0xa24>)
    3478:	4b7b      	ldr	r3, [pc, #492]	; (3668 <__ieee754_pow+0xa28>)
    347a:	f001 ff1d 	bl	52b8 <__aeabi_dmul>
    347e:	0006      	movs	r6, r0
    3480:	f7ff fc27 	bl	2cd2 <__ieee754_pow+0x92>
    3484:	2300      	movs	r3, #0
    3486:	4c79      	ldr	r4, [pc, #484]	; (366c <__ieee754_pow+0xa2c>)
    3488:	9306      	str	r3, [sp, #24]
    348a:	9407      	str	r4, [sp, #28]
    348c:	e666      	b.n	315c <__ieee754_pow+0x51c>
    348e:	4653      	mov	r3, sl
    3490:	2b00      	cmp	r3, #0
    3492:	db00      	blt.n	3496 <__ieee754_pow+0x856>
    3494:	e4c3      	b.n	2e1e <__ieee754_pow+0x1de>
    3496:	9b00      	ldr	r3, [sp, #0]
    3498:	9c01      	ldr	r4, [sp, #4]
    349a:	2280      	movs	r2, #128	; 0x80
    349c:	0612      	lsls	r2, r2, #24
    349e:	001e      	movs	r6, r3
    34a0:	4694      	mov	ip, r2
    34a2:	0023      	movs	r3, r4
    34a4:	4463      	add	r3, ip
    34a6:	0019      	movs	r1, r3
    34a8:	f7ff fc13 	bl	2cd2 <__ieee754_pow+0x92>
    34ac:	0002      	movs	r2, r0
    34ae:	000b      	movs	r3, r1
    34b0:	2000      	movs	r0, #0
    34b2:	4969      	ldr	r1, [pc, #420]	; (3658 <__ieee754_pow+0xa18>)
    34b4:	f001 fadc 	bl	4a70 <__aeabi_ddiv>
    34b8:	e44a      	b.n	2d50 <__ieee754_pow+0x110>
    34ba:	4b6d      	ldr	r3, [pc, #436]	; (3670 <__ieee754_pow+0xa30>)
    34bc:	429c      	cmp	r4, r3
    34be:	dc00      	bgt.n	34c2 <__ieee754_pow+0x882>
    34c0:	e4aa      	b.n	2e18 <__ieee754_pow+0x1d8>
    34c2:	4b65      	ldr	r3, [pc, #404]	; (3658 <__ieee754_pow+0xa18>)
    34c4:	429c      	cmp	r4, r3
    34c6:	dd01      	ble.n	34cc <__ieee754_pow+0x88c>
    34c8:	f7ff fc2c 	bl	2d24 <__ieee754_pow+0xe4>
    34cc:	2200      	movs	r2, #0
    34ce:	4b62      	ldr	r3, [pc, #392]	; (3658 <__ieee754_pow+0xa18>)
    34d0:	f002 f96c 	bl	57ac <__aeabi_dsub>
    34d4:	22c0      	movs	r2, #192	; 0xc0
    34d6:	4b67      	ldr	r3, [pc, #412]	; (3674 <__ieee754_pow+0xa34>)
    34d8:	05d2      	lsls	r2, r2, #23
    34da:	0004      	movs	r4, r0
    34dc:	000d      	movs	r5, r1
    34de:	f001 feeb 	bl	52b8 <__aeabi_dmul>
    34e2:	4a65      	ldr	r2, [pc, #404]	; (3678 <__ieee754_pow+0xa38>)
    34e4:	0006      	movs	r6, r0
    34e6:	000f      	movs	r7, r1
    34e8:	4b64      	ldr	r3, [pc, #400]	; (367c <__ieee754_pow+0xa3c>)
    34ea:	0020      	movs	r0, r4
    34ec:	0029      	movs	r1, r5
    34ee:	f001 fee3 	bl	52b8 <__aeabi_dmul>
    34f2:	2200      	movs	r2, #0
    34f4:	9002      	str	r0, [sp, #8]
    34f6:	9103      	str	r1, [sp, #12]
    34f8:	4b61      	ldr	r3, [pc, #388]	; (3680 <__ieee754_pow+0xa40>)
    34fa:	0020      	movs	r0, r4
    34fc:	0029      	movs	r1, r5
    34fe:	f001 fedb 	bl	52b8 <__aeabi_dmul>
    3502:	0002      	movs	r2, r0
    3504:	000b      	movs	r3, r1
    3506:	485f      	ldr	r0, [pc, #380]	; (3684 <__ieee754_pow+0xa44>)
    3508:	495f      	ldr	r1, [pc, #380]	; (3688 <__ieee754_pow+0xa48>)
    350a:	f002 f94f 	bl	57ac <__aeabi_dsub>
    350e:	0022      	movs	r2, r4
    3510:	002b      	movs	r3, r5
    3512:	f001 fed1 	bl	52b8 <__aeabi_dmul>
    3516:	0002      	movs	r2, r0
    3518:	000b      	movs	r3, r1
    351a:	2000      	movs	r0, #0
    351c:	495b      	ldr	r1, [pc, #364]	; (368c <__ieee754_pow+0xa4c>)
    351e:	f002 f945 	bl	57ac <__aeabi_dsub>
    3522:	0022      	movs	r2, r4
    3524:	9004      	str	r0, [sp, #16]
    3526:	9105      	str	r1, [sp, #20]
    3528:	002b      	movs	r3, r5
    352a:	0020      	movs	r0, r4
    352c:	0029      	movs	r1, r5
    352e:	f001 fec3 	bl	52b8 <__aeabi_dmul>
    3532:	0002      	movs	r2, r0
    3534:	000b      	movs	r3, r1
    3536:	9804      	ldr	r0, [sp, #16]
    3538:	9905      	ldr	r1, [sp, #20]
    353a:	f001 febd 	bl	52b8 <__aeabi_dmul>
    353e:	4a54      	ldr	r2, [pc, #336]	; (3690 <__ieee754_pow+0xa50>)
    3540:	4b4c      	ldr	r3, [pc, #304]	; (3674 <__ieee754_pow+0xa34>)
    3542:	f001 feb9 	bl	52b8 <__aeabi_dmul>
    3546:	0002      	movs	r2, r0
    3548:	000b      	movs	r3, r1
    354a:	9802      	ldr	r0, [sp, #8]
    354c:	9903      	ldr	r1, [sp, #12]
    354e:	f002 f92d 	bl	57ac <__aeabi_dsub>
    3552:	0002      	movs	r2, r0
    3554:	000b      	movs	r3, r1
    3556:	0004      	movs	r4, r0
    3558:	000d      	movs	r5, r1
    355a:	0030      	movs	r0, r6
    355c:	0039      	movs	r1, r7
    355e:	f000 ff5b 	bl	4418 <__aeabi_dadd>
    3562:	2200      	movs	r2, #0
    3564:	0010      	movs	r0, r2
    3566:	003b      	movs	r3, r7
    3568:	0032      	movs	r2, r6
    356a:	9002      	str	r0, [sp, #8]
    356c:	9103      	str	r1, [sp, #12]
    356e:	f002 f91d 	bl	57ac <__aeabi_dsub>
    3572:	0002      	movs	r2, r0
    3574:	000b      	movs	r3, r1
    3576:	0020      	movs	r0, r4
    3578:	0029      	movs	r1, r5
    357a:	f002 f917 	bl	57ac <__aeabi_dsub>
    357e:	9004      	str	r0, [sp, #16]
    3580:	9105      	str	r1, [sp, #20]
    3582:	e5e1      	b.n	3148 <__ieee754_pow+0x508>
    3584:	4a43      	ldr	r2, [pc, #268]	; (3694 <__ieee754_pow+0xa54>)
    3586:	4b44      	ldr	r3, [pc, #272]	; (3698 <__ieee754_pow+0xa58>)
    3588:	9806      	ldr	r0, [sp, #24]
    358a:	9907      	ldr	r1, [sp, #28]
    358c:	f001 fe94 	bl	52b8 <__aeabi_dmul>
    3590:	4a40      	ldr	r2, [pc, #256]	; (3694 <__ieee754_pow+0xa54>)
    3592:	4b41      	ldr	r3, [pc, #260]	; (3698 <__ieee754_pow+0xa58>)
    3594:	f001 fe90 	bl	52b8 <__aeabi_dmul>
    3598:	0006      	movs	r6, r0
    359a:	f7ff fb9a 	bl	2cd2 <__ieee754_pow+0x92>
    359e:	2a00      	cmp	r2, #0
    35a0:	d001      	beq.n	35a6 <__ieee754_pow+0x966>
    35a2:	f7ff fba5 	bl	2cf0 <__ieee754_pow+0xb0>
    35a6:	3214      	adds	r2, #20
    35a8:	1ad3      	subs	r3, r2, r3
    35aa:	003a      	movs	r2, r7
    35ac:	411a      	asrs	r2, r3
    35ae:	0011      	movs	r1, r2
    35b0:	4099      	lsls	r1, r3
    35b2:	428f      	cmp	r7, r1
    35b4:	d001      	beq.n	35ba <__ieee754_pow+0x97a>
    35b6:	f7ff fb6f 	bl	2c98 <__ieee754_pow+0x58>
    35ba:	2301      	movs	r3, #1
    35bc:	4013      	ands	r3, r2
    35be:	2202      	movs	r2, #2
    35c0:	1ad3      	subs	r3, r2, r3
    35c2:	469b      	mov	fp, r3
    35c4:	f7ff fb68 	bl	2c98 <__ieee754_pow+0x58>
    35c8:	4b30      	ldr	r3, [pc, #192]	; (368c <__ieee754_pow+0xa4c>)
    35ca:	429e      	cmp	r6, r3
    35cc:	dd00      	ble.n	35d0 <__ieee754_pow+0x990>
    35ce:	e64e      	b.n	326e <__ieee754_pow+0x62e>
    35d0:	2300      	movs	r3, #0
    35d2:	4699      	mov	r9, r3
    35d4:	4698      	mov	r8, r3
    35d6:	e67a      	b.n	32ce <__ieee754_pow+0x68e>
    35d8:	0002      	movs	r2, r0
    35da:	000b      	movs	r3, r1
    35dc:	f7ff fc14 	bl	2e08 <__ieee754_pow+0x1c8>
    35e0:	2380      	movs	r3, #128	; 0x80
    35e2:	4c2e      	ldr	r4, [pc, #184]	; (369c <__ieee754_pow+0xa5c>)
    35e4:	05db      	lsls	r3, r3, #23
    35e6:	9308      	str	r3, [sp, #32]
    35e8:	9409      	str	r4, [sp, #36]	; 0x24
    35ea:	4b2d      	ldr	r3, [pc, #180]	; (36a0 <__ieee754_pow+0xa60>)
    35ec:	4c2d      	ldr	r4, [pc, #180]	; (36a4 <__ieee754_pow+0xa64>)
    35ee:	2200      	movs	r2, #0
    35f0:	930c      	str	r3, [sp, #48]	; 0x30
    35f2:	940d      	str	r4, [sp, #52]	; 0x34
    35f4:	2480      	movs	r4, #128	; 0x80
    35f6:	4b2c      	ldr	r3, [pc, #176]	; (36a8 <__ieee754_pow+0xa68>)
    35f8:	02e4      	lsls	r4, r4, #11
    35fa:	9206      	str	r2, [sp, #24]
    35fc:	9307      	str	r3, [sp, #28]
    35fe:	e456      	b.n	2eae <__ieee754_pow+0x26e>
    3600:	4643      	mov	r3, r8
    3602:	425b      	negs	r3, r3
    3604:	4698      	mov	r8, r3
    3606:	e651      	b.n	32ac <__ieee754_pow+0x66c>
    3608:	4642      	mov	r2, r8
    360a:	f000 f9fd 	bl	3a08 <scalbn>
    360e:	e707      	b.n	3420 <__ieee754_pow+0x7e0>
    3610:	fffffc02 	.word	0xfffffc02
    3614:	fffffc01 	.word	0xfffffc01
    3618:	000fffff 	.word	0x000fffff
    361c:	3fe62e43 	.word	0x3fe62e43
    3620:	fefa39ef 	.word	0xfefa39ef
    3624:	3fe62e42 	.word	0x3fe62e42
    3628:	0ca86c39 	.word	0x0ca86c39
    362c:	be205c61 	.word	0xbe205c61
    3630:	72bea4d0 	.word	0x72bea4d0
    3634:	3e663769 	.word	0x3e663769
    3638:	c5d26bf1 	.word	0xc5d26bf1
    363c:	3ebbbd41 	.word	0x3ebbbd41
    3640:	af25de2c 	.word	0xaf25de2c
    3644:	3f11566a 	.word	0x3f11566a
    3648:	16bebd93 	.word	0x16bebd93
    364c:	3f66c16c 	.word	0x3f66c16c
    3650:	5555553e 	.word	0x5555553e
    3654:	3fc55555 	.word	0x3fc55555
    3658:	3ff00000 	.word	0x3ff00000
    365c:	4090cbff 	.word	0x4090cbff
    3660:	3f6f3400 	.word	0x3f6f3400
    3664:	c2f8f359 	.word	0xc2f8f359
    3668:	01a56e1f 	.word	0x01a56e1f
    366c:	bff00000 	.word	0xbff00000
    3670:	3feffffe 	.word	0x3feffffe
    3674:	3ff71547 	.word	0x3ff71547
    3678:	f85ddf44 	.word	0xf85ddf44
    367c:	3e54ae0b 	.word	0x3e54ae0b
    3680:	3fd00000 	.word	0x3fd00000
    3684:	55555555 	.word	0x55555555
    3688:	3fd55555 	.word	0x3fd55555
    368c:	3fe00000 	.word	0x3fe00000
    3690:	652b82fe 	.word	0x652b82fe
    3694:	8800759c 	.word	0x8800759c
    3698:	7e37e43c 	.word	0x7e37e43c
    369c:	3fe2b803 	.word	0x3fe2b803
    36a0:	43cfd006 	.word	0x43cfd006
    36a4:	3e4cfdeb 	.word	0x3e4cfdeb
    36a8:	3ff80000 	.word	0x3ff80000

000036ac <__ieee754_sqrt>:
    36ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    36ae:	4656      	mov	r6, sl
    36b0:	464d      	mov	r5, r9
    36b2:	4644      	mov	r4, r8
    36b4:	465f      	mov	r7, fp
    36b6:	4b75      	ldr	r3, [pc, #468]	; (388c <__ieee754_sqrt+0x1e0>)
    36b8:	b4f0      	push	{r4, r5, r6, r7}
    36ba:	000a      	movs	r2, r1
    36bc:	000d      	movs	r5, r1
    36be:	0019      	movs	r1, r3
    36c0:	b083      	sub	sp, #12
    36c2:	0006      	movs	r6, r0
    36c4:	0004      	movs	r4, r0
    36c6:	4029      	ands	r1, r5
    36c8:	4299      	cmp	r1, r3
    36ca:	d100      	bne.n	36ce <__ieee754_sqrt+0x22>
    36cc:	e0ba      	b.n	3844 <__ieee754_sqrt+0x198>
    36ce:	2d00      	cmp	r5, #0
    36d0:	dc00      	bgt.n	36d4 <__ieee754_sqrt+0x28>
    36d2:	e094      	b.n	37fe <__ieee754_sqrt+0x152>
    36d4:	152d      	asrs	r5, r5, #20
    36d6:	d100      	bne.n	36da <__ieee754_sqrt+0x2e>
    36d8:	e0a3      	b.n	3822 <__ieee754_sqrt+0x176>
    36da:	4b6d      	ldr	r3, [pc, #436]	; (3890 <__ieee754_sqrt+0x1e4>)
    36dc:	0312      	lsls	r2, r2, #12
    36de:	469c      	mov	ip, r3
    36e0:	2380      	movs	r3, #128	; 0x80
    36e2:	0b12      	lsrs	r2, r2, #12
    36e4:	035b      	lsls	r3, r3, #13
    36e6:	4465      	add	r5, ip
    36e8:	431a      	orrs	r2, r3
    36ea:	07eb      	lsls	r3, r5, #31
    36ec:	d500      	bpl.n	36f0 <__ieee754_sqrt+0x44>
    36ee:	e081      	b.n	37f4 <__ieee754_sqrt+0x148>
    36f0:	106b      	asrs	r3, r5, #1
    36f2:	4698      	mov	r8, r3
    36f4:	0fe3      	lsrs	r3, r4, #31
    36f6:	189b      	adds	r3, r3, r2
    36f8:	189b      	adds	r3, r3, r2
    36fa:	2280      	movs	r2, #128	; 0x80
    36fc:	2116      	movs	r1, #22
    36fe:	2600      	movs	r6, #0
    3700:	2700      	movs	r7, #0
    3702:	0064      	lsls	r4, r4, #1
    3704:	0392      	lsls	r2, r2, #14
    3706:	18b8      	adds	r0, r7, r2
    3708:	4298      	cmp	r0, r3
    370a:	dc02      	bgt.n	3712 <__ieee754_sqrt+0x66>
    370c:	1887      	adds	r7, r0, r2
    370e:	1a1b      	subs	r3, r3, r0
    3710:	18b6      	adds	r6, r6, r2
    3712:	0fe0      	lsrs	r0, r4, #31
    3714:	005b      	lsls	r3, r3, #1
    3716:	3901      	subs	r1, #1
    3718:	181b      	adds	r3, r3, r0
    371a:	0064      	lsls	r4, r4, #1
    371c:	0852      	lsrs	r2, r2, #1
    371e:	2900      	cmp	r1, #0
    3720:	d1f1      	bne.n	3706 <__ieee754_sqrt+0x5a>
    3722:	2200      	movs	r2, #0
    3724:	9201      	str	r2, [sp, #4]
    3726:	4694      	mov	ip, r2
    3728:	2280      	movs	r2, #128	; 0x80
    372a:	0612      	lsls	r2, r2, #24
    372c:	2020      	movs	r0, #32
    372e:	4691      	mov	r9, r2
    3730:	e009      	b.n	3746 <__ieee754_sqrt+0x9a>
    3732:	429f      	cmp	r7, r3
    3734:	d041      	beq.n	37ba <__ieee754_sqrt+0x10e>
    3736:	0fe1      	lsrs	r1, r4, #31
    3738:	18c9      	adds	r1, r1, r3
    373a:	3801      	subs	r0, #1
    373c:	18cb      	adds	r3, r1, r3
    373e:	0064      	lsls	r4, r4, #1
    3740:	0852      	lsrs	r2, r2, #1
    3742:	2800      	cmp	r0, #0
    3744:	d01e      	beq.n	3784 <__ieee754_sqrt+0xd8>
    3746:	4661      	mov	r1, ip
    3748:	1851      	adds	r1, r2, r1
    374a:	429f      	cmp	r7, r3
    374c:	daf1      	bge.n	3732 <__ieee754_sqrt+0x86>
    374e:	188d      	adds	r5, r1, r2
    3750:	46ac      	mov	ip, r5
    3752:	0fcd      	lsrs	r5, r1, #31
    3754:	07ed      	lsls	r5, r5, #31
    3756:	46ba      	mov	sl, r7
    3758:	454d      	cmp	r5, r9
    375a:	d039      	beq.n	37d0 <__ieee754_sqrt+0x124>
    375c:	1bdb      	subs	r3, r3, r7
    375e:	428c      	cmp	r4, r1
    3760:	41bf      	sbcs	r7, r7
    3762:	427f      	negs	r7, r7
    3764:	1bdb      	subs	r3, r3, r7
    3766:	1a64      	subs	r4, r4, r1
    3768:	9901      	ldr	r1, [sp, #4]
    376a:	3801      	subs	r0, #1
    376c:	468b      	mov	fp, r1
    376e:	4493      	add	fp, r2
    3770:	4659      	mov	r1, fp
    3772:	9101      	str	r1, [sp, #4]
    3774:	0fe1      	lsrs	r1, r4, #31
    3776:	18c9      	adds	r1, r1, r3
    3778:	4657      	mov	r7, sl
    377a:	18cb      	adds	r3, r1, r3
    377c:	0064      	lsls	r4, r4, #1
    377e:	0852      	lsrs	r2, r2, #1
    3780:	2800      	cmp	r0, #0
    3782:	d1e0      	bne.n	3746 <__ieee754_sqrt+0x9a>
    3784:	4323      	orrs	r3, r4
    3786:	d12b      	bne.n	37e0 <__ieee754_sqrt+0x134>
    3788:	9b01      	ldr	r3, [sp, #4]
    378a:	085b      	lsrs	r3, r3, #1
    378c:	4941      	ldr	r1, [pc, #260]	; (3894 <__ieee754_sqrt+0x1e8>)
    378e:	1072      	asrs	r2, r6, #1
    3790:	468c      	mov	ip, r1
    3792:	4462      	add	r2, ip
    3794:	07f1      	lsls	r1, r6, #31
    3796:	d502      	bpl.n	379e <__ieee754_sqrt+0xf2>
    3798:	2180      	movs	r1, #128	; 0x80
    379a:	0609      	lsls	r1, r1, #24
    379c:	430b      	orrs	r3, r1
    379e:	4641      	mov	r1, r8
    37a0:	0509      	lsls	r1, r1, #20
    37a2:	188d      	adds	r5, r1, r2
    37a4:	001e      	movs	r6, r3
    37a6:	002f      	movs	r7, r5
    37a8:	0030      	movs	r0, r6
    37aa:	0039      	movs	r1, r7
    37ac:	b003      	add	sp, #12
    37ae:	bc3c      	pop	{r2, r3, r4, r5}
    37b0:	4690      	mov	r8, r2
    37b2:	4699      	mov	r9, r3
    37b4:	46a2      	mov	sl, r4
    37b6:	46ab      	mov	fp, r5
    37b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    37ba:	42a1      	cmp	r1, r4
    37bc:	d80e      	bhi.n	37dc <__ieee754_sqrt+0x130>
    37be:	188d      	adds	r5, r1, r2
    37c0:	46ac      	mov	ip, r5
    37c2:	0fcd      	lsrs	r5, r1, #31
    37c4:	07ed      	lsls	r5, r5, #31
    37c6:	454d      	cmp	r5, r9
    37c8:	d048      	beq.n	385c <__ieee754_sqrt+0x1b0>
    37ca:	469a      	mov	sl, r3
    37cc:	2300      	movs	r3, #0
    37ce:	e7ca      	b.n	3766 <__ieee754_sqrt+0xba>
    37d0:	4665      	mov	r5, ip
    37d2:	2d00      	cmp	r5, #0
    37d4:	dbc2      	blt.n	375c <__ieee754_sqrt+0xb0>
    37d6:	1c7d      	adds	r5, r7, #1
    37d8:	46aa      	mov	sl, r5
    37da:	e7bf      	b.n	375c <__ieee754_sqrt+0xb0>
    37dc:	003b      	movs	r3, r7
    37de:	e7aa      	b.n	3736 <__ieee754_sqrt+0x8a>
    37e0:	9b01      	ldr	r3, [sp, #4]
    37e2:	3301      	adds	r3, #1
    37e4:	d03e      	beq.n	3864 <__ieee754_sqrt+0x1b8>
    37e6:	9a01      	ldr	r2, [sp, #4]
    37e8:	2301      	movs	r3, #1
    37ea:	4694      	mov	ip, r2
    37ec:	4013      	ands	r3, r2
    37ee:	4463      	add	r3, ip
    37f0:	085b      	lsrs	r3, r3, #1
    37f2:	e7cb      	b.n	378c <__ieee754_sqrt+0xe0>
    37f4:	0fe3      	lsrs	r3, r4, #31
    37f6:	0052      	lsls	r2, r2, #1
    37f8:	189a      	adds	r2, r3, r2
    37fa:	0064      	lsls	r4, r4, #1
    37fc:	e778      	b.n	36f0 <__ieee754_sqrt+0x44>
    37fe:	006b      	lsls	r3, r5, #1
    3800:	085b      	lsrs	r3, r3, #1
    3802:	4303      	orrs	r3, r0
    3804:	002f      	movs	r7, r5
    3806:	2b00      	cmp	r3, #0
    3808:	d0ce      	beq.n	37a8 <__ieee754_sqrt+0xfc>
    380a:	2500      	movs	r5, #0
    380c:	2a00      	cmp	r2, #0
    380e:	d131      	bne.n	3874 <__ieee754_sqrt+0x1c8>
    3810:	0ae2      	lsrs	r2, r4, #11
    3812:	3d15      	subs	r5, #21
    3814:	0564      	lsls	r4, r4, #21
    3816:	2a00      	cmp	r2, #0
    3818:	d0fa      	beq.n	3810 <__ieee754_sqrt+0x164>
    381a:	2380      	movs	r3, #128	; 0x80
    381c:	035b      	lsls	r3, r3, #13
    381e:	421a      	tst	r2, r3
    3820:	d123      	bne.n	386a <__ieee754_sqrt+0x1be>
    3822:	2080      	movs	r0, #128	; 0x80
    3824:	2300      	movs	r3, #0
    3826:	0340      	lsls	r0, r0, #13
    3828:	e000      	b.n	382c <__ieee754_sqrt+0x180>
    382a:	000b      	movs	r3, r1
    382c:	0052      	lsls	r2, r2, #1
    382e:	1c59      	adds	r1, r3, #1
    3830:	4202      	tst	r2, r0
    3832:	d0fa      	beq.n	382a <__ieee754_sqrt+0x17e>
    3834:	2020      	movs	r0, #32
    3836:	1a40      	subs	r0, r0, r1
    3838:	1aed      	subs	r5, r5, r3
    383a:	0023      	movs	r3, r4
    383c:	40c3      	lsrs	r3, r0
    383e:	408c      	lsls	r4, r1
    3840:	431a      	orrs	r2, r3
    3842:	e74a      	b.n	36da <__ieee754_sqrt+0x2e>
    3844:	0002      	movs	r2, r0
    3846:	002b      	movs	r3, r5
    3848:	0029      	movs	r1, r5
    384a:	f001 fd35 	bl	52b8 <__aeabi_dmul>
    384e:	0032      	movs	r2, r6
    3850:	002b      	movs	r3, r5
    3852:	f000 fde1 	bl	4418 <__aeabi_dadd>
    3856:	0006      	movs	r6, r0
    3858:	000f      	movs	r7, r1
    385a:	e7a5      	b.n	37a8 <__ieee754_sqrt+0xfc>
    385c:	4665      	mov	r5, ip
    385e:	2d00      	cmp	r5, #0
    3860:	dab9      	bge.n	37d6 <__ieee754_sqrt+0x12a>
    3862:	e7b2      	b.n	37ca <__ieee754_sqrt+0x11e>
    3864:	3601      	adds	r6, #1
    3866:	2300      	movs	r3, #0
    3868:	e790      	b.n	378c <__ieee754_sqrt+0xe0>
    386a:	2301      	movs	r3, #1
    386c:	2020      	movs	r0, #32
    386e:	425b      	negs	r3, r3
    3870:	2100      	movs	r1, #0
    3872:	e7e1      	b.n	3838 <__ieee754_sqrt+0x18c>
    3874:	003b      	movs	r3, r7
    3876:	0002      	movs	r2, r0
    3878:	0039      	movs	r1, r7
    387a:	f001 ff97 	bl	57ac <__aeabi_dsub>
    387e:	0002      	movs	r2, r0
    3880:	000b      	movs	r3, r1
    3882:	f001 f8f5 	bl	4a70 <__aeabi_ddiv>
    3886:	0006      	movs	r6, r0
    3888:	000f      	movs	r7, r1
    388a:	e78d      	b.n	37a8 <__ieee754_sqrt+0xfc>
    388c:	7ff00000 	.word	0x7ff00000
    3890:	fffffc01 	.word	0xfffffc01
    3894:	3fe00000 	.word	0x3fe00000

00003898 <fabs>:
    3898:	0049      	lsls	r1, r1, #1
    389a:	084b      	lsrs	r3, r1, #1
    389c:	0019      	movs	r1, r3
    389e:	4770      	bx	lr

000038a0 <finite>:
    38a0:	4b03      	ldr	r3, [pc, #12]	; (38b0 <finite+0x10>)
    38a2:	0048      	lsls	r0, r1, #1
    38a4:	469c      	mov	ip, r3
    38a6:	0840      	lsrs	r0, r0, #1
    38a8:	4460      	add	r0, ip
    38aa:	0fc0      	lsrs	r0, r0, #31
    38ac:	4770      	bx	lr
    38ae:	46c0      	nop			; (mov r8, r8)
    38b0:	80100000 	.word	0x80100000

000038b4 <matherr>:
    38b4:	2000      	movs	r0, #0
    38b6:	4770      	bx	lr

000038b8 <nan>:
    38b8:	2000      	movs	r0, #0
    38ba:	4901      	ldr	r1, [pc, #4]	; (38c0 <nan+0x8>)
    38bc:	4770      	bx	lr
    38be:	46c0      	nop			; (mov r8, r8)
    38c0:	7ff80000 	.word	0x7ff80000

000038c4 <rint>:
    38c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    38c6:	4647      	mov	r7, r8
    38c8:	b480      	push	{r7}
    38ca:	0fcb      	lsrs	r3, r1, #31
    38cc:	4698      	mov	r8, r3
    38ce:	4c4a      	ldr	r4, [pc, #296]	; (39f8 <rint+0x134>)
    38d0:	004b      	lsls	r3, r1, #1
    38d2:	0d5b      	lsrs	r3, r3, #21
    38d4:	191e      	adds	r6, r3, r4
    38d6:	b082      	sub	sp, #8
    38d8:	0007      	movs	r7, r0
    38da:	000a      	movs	r2, r1
    38dc:	2e13      	cmp	r6, #19
    38de:	dc35      	bgt.n	394c <rint+0x88>
    38e0:	2e00      	cmp	r6, #0
    38e2:	db57      	blt.n	3994 <rint+0xd0>
    38e4:	4b45      	ldr	r3, [pc, #276]	; (39fc <rint+0x138>)
    38e6:	0004      	movs	r4, r0
    38e8:	4133      	asrs	r3, r6
    38ea:	001f      	movs	r7, r3
    38ec:	400f      	ands	r7, r1
    38ee:	4307      	orrs	r7, r0
    38f0:	000d      	movs	r5, r1
    38f2:	2f00      	cmp	r7, #0
    38f4:	d024      	beq.n	3940 <rint+0x7c>
    38f6:	085b      	lsrs	r3, r3, #1
    38f8:	001c      	movs	r4, r3
    38fa:	400c      	ands	r4, r1
    38fc:	4320      	orrs	r0, r4
    38fe:	2700      	movs	r7, #0
    3900:	2800      	cmp	r0, #0
    3902:	d007      	beq.n	3914 <rint+0x50>
    3904:	2e13      	cmp	r6, #19
    3906:	d100      	bne.n	390a <rint+0x46>
    3908:	e072      	b.n	39f0 <rint+0x12c>
    390a:	2280      	movs	r2, #128	; 0x80
    390c:	02d2      	lsls	r2, r2, #11
    390e:	4132      	asrs	r2, r6
    3910:	4399      	bics	r1, r3
    3912:	430a      	orrs	r2, r1
    3914:	4643      	mov	r3, r8
    3916:	00de      	lsls	r6, r3, #3
    3918:	4b39      	ldr	r3, [pc, #228]	; (3a00 <rint+0x13c>)
    391a:	0011      	movs	r1, r2
    391c:	199e      	adds	r6, r3, r6
    391e:	6834      	ldr	r4, [r6, #0]
    3920:	6875      	ldr	r5, [r6, #4]
    3922:	0038      	movs	r0, r7
    3924:	0022      	movs	r2, r4
    3926:	002b      	movs	r3, r5
    3928:	f000 fd76 	bl	4418 <__aeabi_dadd>
    392c:	9000      	str	r0, [sp, #0]
    392e:	9101      	str	r1, [sp, #4]
    3930:	9800      	ldr	r0, [sp, #0]
    3932:	9901      	ldr	r1, [sp, #4]
    3934:	0022      	movs	r2, r4
    3936:	002b      	movs	r3, r5
    3938:	f001 ff38 	bl	57ac <__aeabi_dsub>
    393c:	0004      	movs	r4, r0
    393e:	000d      	movs	r5, r1
    3940:	0020      	movs	r0, r4
    3942:	0029      	movs	r1, r5
    3944:	b002      	add	sp, #8
    3946:	bc04      	pop	{r2}
    3948:	4690      	mov	r8, r2
    394a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    394c:	2e33      	cmp	r6, #51	; 0x33
    394e:	dd0c      	ble.n	396a <rint+0xa6>
    3950:	2380      	movs	r3, #128	; 0x80
    3952:	0004      	movs	r4, r0
    3954:	000d      	movs	r5, r1
    3956:	00db      	lsls	r3, r3, #3
    3958:	429e      	cmp	r6, r3
    395a:	d1f1      	bne.n	3940 <rint+0x7c>
    395c:	0002      	movs	r2, r0
    395e:	000b      	movs	r3, r1
    3960:	f000 fd5a 	bl	4418 <__aeabi_dadd>
    3964:	0004      	movs	r4, r0
    3966:	000d      	movs	r5, r1
    3968:	e7ea      	b.n	3940 <rint+0x7c>
    396a:	4c26      	ldr	r4, [pc, #152]	; (3a04 <rint+0x140>)
    396c:	000d      	movs	r5, r1
    396e:	46a4      	mov	ip, r4
    3970:	2401      	movs	r4, #1
    3972:	4463      	add	r3, ip
    3974:	4264      	negs	r4, r4
    3976:	40dc      	lsrs	r4, r3
    3978:	46a4      	mov	ip, r4
    397a:	4661      	mov	r1, ip
    397c:	0004      	movs	r4, r0
    397e:	4201      	tst	r1, r0
    3980:	d0de      	beq.n	3940 <rint+0x7c>
    3982:	0849      	lsrs	r1, r1, #1
    3984:	4201      	tst	r1, r0
    3986:	d0c5      	beq.n	3914 <rint+0x50>
    3988:	2780      	movs	r7, #128	; 0x80
    398a:	05ff      	lsls	r7, r7, #23
    398c:	411f      	asrs	r7, r3
    398e:	4388      	bics	r0, r1
    3990:	4307      	orrs	r7, r0
    3992:	e7bf      	b.n	3914 <rint+0x50>
    3994:	004b      	lsls	r3, r1, #1
    3996:	085b      	lsrs	r3, r3, #1
    3998:	4303      	orrs	r3, r0
    399a:	0004      	movs	r4, r0
    399c:	000d      	movs	r5, r1
    399e:	2b00      	cmp	r3, #0
    39a0:	d0ce      	beq.n	3940 <rint+0x7c>
    39a2:	030b      	lsls	r3, r1, #12
    39a4:	0b1b      	lsrs	r3, r3, #12
    39a6:	4303      	orrs	r3, r0
    39a8:	425a      	negs	r2, r3
    39aa:	4313      	orrs	r3, r2
    39ac:	2280      	movs	r2, #128	; 0x80
    39ae:	0b1b      	lsrs	r3, r3, #12
    39b0:	0312      	lsls	r2, r2, #12
    39b2:	4013      	ands	r3, r2
    39b4:	0c4a      	lsrs	r2, r1, #17
    39b6:	0452      	lsls	r2, r2, #17
    39b8:	4313      	orrs	r3, r2
    39ba:	0019      	movs	r1, r3
    39bc:	4643      	mov	r3, r8
    39be:	4a10      	ldr	r2, [pc, #64]	; (3a00 <rint+0x13c>)
    39c0:	00db      	lsls	r3, r3, #3
    39c2:	18d3      	adds	r3, r2, r3
    39c4:	681c      	ldr	r4, [r3, #0]
    39c6:	685d      	ldr	r5, [r3, #4]
    39c8:	0022      	movs	r2, r4
    39ca:	002b      	movs	r3, r5
    39cc:	f000 fd24 	bl	4418 <__aeabi_dadd>
    39d0:	9000      	str	r0, [sp, #0]
    39d2:	9101      	str	r1, [sp, #4]
    39d4:	9800      	ldr	r0, [sp, #0]
    39d6:	9901      	ldr	r1, [sp, #4]
    39d8:	0022      	movs	r2, r4
    39da:	002b      	movs	r3, r5
    39dc:	f001 fee6 	bl	57ac <__aeabi_dsub>
    39e0:	4642      	mov	r2, r8
    39e2:	004b      	lsls	r3, r1, #1
    39e4:	085b      	lsrs	r3, r3, #1
    39e6:	07d6      	lsls	r6, r2, #31
    39e8:	4333      	orrs	r3, r6
    39ea:	0004      	movs	r4, r0
    39ec:	001d      	movs	r5, r3
    39ee:	e7a7      	b.n	3940 <rint+0x7c>
    39f0:	2780      	movs	r7, #128	; 0x80
    39f2:	063f      	lsls	r7, r7, #24
    39f4:	e789      	b.n	390a <rint+0x46>
    39f6:	46c0      	nop			; (mov r8, r8)
    39f8:	fffffc01 	.word	0xfffffc01
    39fc:	000fffff 	.word	0x000fffff
    3a00:	000064d0 	.word	0x000064d0
    3a04:	fffffbed 	.word	0xfffffbed

00003a08 <scalbn>:
    3a08:	004b      	lsls	r3, r1, #1
    3a0a:	b570      	push	{r4, r5, r6, lr}
    3a0c:	0d5b      	lsrs	r3, r3, #21
    3a0e:	0014      	movs	r4, r2
    3a10:	000a      	movs	r2, r1
    3a12:	2b00      	cmp	r3, #0
    3a14:	d11a      	bne.n	3a4c <scalbn+0x44>
    3a16:	004b      	lsls	r3, r1, #1
    3a18:	085b      	lsrs	r3, r3, #1
    3a1a:	4303      	orrs	r3, r0
    3a1c:	d015      	beq.n	3a4a <scalbn+0x42>
    3a1e:	2200      	movs	r2, #0
    3a20:	4b22      	ldr	r3, [pc, #136]	; (3aac <scalbn+0xa4>)
    3a22:	f001 fc49 	bl	52b8 <__aeabi_dmul>
    3a26:	4b22      	ldr	r3, [pc, #136]	; (3ab0 <scalbn+0xa8>)
    3a28:	000a      	movs	r2, r1
    3a2a:	429c      	cmp	r4, r3
    3a2c:	db22      	blt.n	3a74 <scalbn+0x6c>
    3a2e:	004b      	lsls	r3, r1, #1
    3a30:	0d5b      	lsrs	r3, r3, #21
    3a32:	3b36      	subs	r3, #54	; 0x36
    3a34:	4d1f      	ldr	r5, [pc, #124]	; (3ab4 <scalbn+0xac>)
    3a36:	18e3      	adds	r3, r4, r3
    3a38:	42ab      	cmp	r3, r5
    3a3a:	dc20      	bgt.n	3a7e <scalbn+0x76>
    3a3c:	2b00      	cmp	r3, #0
    3a3e:	dd0d      	ble.n	3a5c <scalbn+0x54>
    3a40:	4c1d      	ldr	r4, [pc, #116]	; (3ab8 <scalbn+0xb0>)
    3a42:	051b      	lsls	r3, r3, #20
    3a44:	4022      	ands	r2, r4
    3a46:	431a      	orrs	r2, r3
    3a48:	0011      	movs	r1, r2
    3a4a:	bd70      	pop	{r4, r5, r6, pc}
    3a4c:	4d1b      	ldr	r5, [pc, #108]	; (3abc <scalbn+0xb4>)
    3a4e:	42ab      	cmp	r3, r5
    3a50:	d1f0      	bne.n	3a34 <scalbn+0x2c>
    3a52:	0002      	movs	r2, r0
    3a54:	000b      	movs	r3, r1
    3a56:	f000 fcdf 	bl	4418 <__aeabi_dadd>
    3a5a:	e7f6      	b.n	3a4a <scalbn+0x42>
    3a5c:	001d      	movs	r5, r3
    3a5e:	3535      	adds	r5, #53	; 0x35
    3a60:	da18      	bge.n	3a94 <scalbn+0x8c>
    3a62:	4b17      	ldr	r3, [pc, #92]	; (3ac0 <scalbn+0xb8>)
    3a64:	0002      	movs	r2, r0
    3a66:	429c      	cmp	r4, r3
    3a68:	dc0a      	bgt.n	3a80 <scalbn+0x78>
    3a6a:	000b      	movs	r3, r1
    3a6c:	4815      	ldr	r0, [pc, #84]	; (3ac4 <scalbn+0xbc>)
    3a6e:	4916      	ldr	r1, [pc, #88]	; (3ac8 <scalbn+0xc0>)
    3a70:	f000 f832 	bl	3ad8 <copysign>
    3a74:	4a13      	ldr	r2, [pc, #76]	; (3ac4 <scalbn+0xbc>)
    3a76:	4b14      	ldr	r3, [pc, #80]	; (3ac8 <scalbn+0xc0>)
    3a78:	f001 fc1e 	bl	52b8 <__aeabi_dmul>
    3a7c:	e7e5      	b.n	3a4a <scalbn+0x42>
    3a7e:	0002      	movs	r2, r0
    3a80:	000b      	movs	r3, r1
    3a82:	4812      	ldr	r0, [pc, #72]	; (3acc <scalbn+0xc4>)
    3a84:	4912      	ldr	r1, [pc, #72]	; (3ad0 <scalbn+0xc8>)
    3a86:	f000 f827 	bl	3ad8 <copysign>
    3a8a:	4a10      	ldr	r2, [pc, #64]	; (3acc <scalbn+0xc4>)
    3a8c:	4b10      	ldr	r3, [pc, #64]	; (3ad0 <scalbn+0xc8>)
    3a8e:	f001 fc13 	bl	52b8 <__aeabi_dmul>
    3a92:	e7da      	b.n	3a4a <scalbn+0x42>
    3a94:	4c08      	ldr	r4, [pc, #32]	; (3ab8 <scalbn+0xb0>)
    3a96:	3336      	adds	r3, #54	; 0x36
    3a98:	4022      	ands	r2, r4
    3a9a:	051b      	lsls	r3, r3, #20
    3a9c:	4313      	orrs	r3, r2
    3a9e:	0019      	movs	r1, r3
    3aa0:	2200      	movs	r2, #0
    3aa2:	4b0c      	ldr	r3, [pc, #48]	; (3ad4 <scalbn+0xcc>)
    3aa4:	f001 fc08 	bl	52b8 <__aeabi_dmul>
    3aa8:	e7cf      	b.n	3a4a <scalbn+0x42>
    3aaa:	46c0      	nop			; (mov r8, r8)
    3aac:	43500000 	.word	0x43500000
    3ab0:	ffff3cb0 	.word	0xffff3cb0
    3ab4:	000007fe 	.word	0x000007fe
    3ab8:	800fffff 	.word	0x800fffff
    3abc:	000007ff 	.word	0x000007ff
    3ac0:	0000c350 	.word	0x0000c350
    3ac4:	c2f8f359 	.word	0xc2f8f359
    3ac8:	01a56e1f 	.word	0x01a56e1f
    3acc:	8800759c 	.word	0x8800759c
    3ad0:	7e37e43c 	.word	0x7e37e43c
    3ad4:	3c900000 	.word	0x3c900000

00003ad8 <copysign>:
    3ad8:	b530      	push	{r4, r5, lr}
    3ada:	004a      	lsls	r2, r1, #1
    3adc:	0fdb      	lsrs	r3, r3, #31
    3ade:	07db      	lsls	r3, r3, #31
    3ae0:	0852      	lsrs	r2, r2, #1
    3ae2:	431a      	orrs	r2, r3
    3ae4:	0011      	movs	r1, r2
    3ae6:	bd30      	pop	{r4, r5, pc}

00003ae8 <__gnu_thumb1_case_uqi>:
    3ae8:	b402      	push	{r1}
    3aea:	4671      	mov	r1, lr
    3aec:	0849      	lsrs	r1, r1, #1
    3aee:	0049      	lsls	r1, r1, #1
    3af0:	5c09      	ldrb	r1, [r1, r0]
    3af2:	0049      	lsls	r1, r1, #1
    3af4:	448e      	add	lr, r1
    3af6:	bc02      	pop	{r1}
    3af8:	4770      	bx	lr
    3afa:	46c0      	nop			; (mov r8, r8)

00003afc <__aeabi_cdrcmple>:
    3afc:	4684      	mov	ip, r0
    3afe:	1c10      	adds	r0, r2, #0
    3b00:	4662      	mov	r2, ip
    3b02:	468c      	mov	ip, r1
    3b04:	1c19      	adds	r1, r3, #0
    3b06:	4663      	mov	r3, ip
    3b08:	e000      	b.n	3b0c <__aeabi_cdcmpeq>
    3b0a:	46c0      	nop			; (mov r8, r8)

00003b0c <__aeabi_cdcmpeq>:
    3b0c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    3b0e:	f001 fb69 	bl	51e4 <__ledf2>
    3b12:	2800      	cmp	r0, #0
    3b14:	d401      	bmi.n	3b1a <__aeabi_cdcmpeq+0xe>
    3b16:	2100      	movs	r1, #0
    3b18:	42c8      	cmn	r0, r1
    3b1a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00003b1c <__aeabi_dcmpeq>:
    3b1c:	b510      	push	{r4, lr}
    3b1e:	f001 fabd 	bl	509c <__eqdf2>
    3b22:	4240      	negs	r0, r0
    3b24:	3001      	adds	r0, #1
    3b26:	bd10      	pop	{r4, pc}

00003b28 <__aeabi_dcmplt>:
    3b28:	b510      	push	{r4, lr}
    3b2a:	f001 fb5b 	bl	51e4 <__ledf2>
    3b2e:	2800      	cmp	r0, #0
    3b30:	db01      	blt.n	3b36 <__aeabi_dcmplt+0xe>
    3b32:	2000      	movs	r0, #0
    3b34:	bd10      	pop	{r4, pc}
    3b36:	2001      	movs	r0, #1
    3b38:	bd10      	pop	{r4, pc}
    3b3a:	46c0      	nop			; (mov r8, r8)

00003b3c <__aeabi_dcmple>:
    3b3c:	b510      	push	{r4, lr}
    3b3e:	f001 fb51 	bl	51e4 <__ledf2>
    3b42:	2800      	cmp	r0, #0
    3b44:	dd01      	ble.n	3b4a <__aeabi_dcmple+0xe>
    3b46:	2000      	movs	r0, #0
    3b48:	bd10      	pop	{r4, pc}
    3b4a:	2001      	movs	r0, #1
    3b4c:	bd10      	pop	{r4, pc}
    3b4e:	46c0      	nop			; (mov r8, r8)

00003b50 <__aeabi_dcmpgt>:
    3b50:	b510      	push	{r4, lr}
    3b52:	f001 fae3 	bl	511c <__gedf2>
    3b56:	2800      	cmp	r0, #0
    3b58:	dc01      	bgt.n	3b5e <__aeabi_dcmpgt+0xe>
    3b5a:	2000      	movs	r0, #0
    3b5c:	bd10      	pop	{r4, pc}
    3b5e:	2001      	movs	r0, #1
    3b60:	bd10      	pop	{r4, pc}
    3b62:	46c0      	nop			; (mov r8, r8)

00003b64 <__aeabi_dcmpge>:
    3b64:	b510      	push	{r4, lr}
    3b66:	f001 fad9 	bl	511c <__gedf2>
    3b6a:	2800      	cmp	r0, #0
    3b6c:	da01      	bge.n	3b72 <__aeabi_dcmpge+0xe>
    3b6e:	2000      	movs	r0, #0
    3b70:	bd10      	pop	{r4, pc}
    3b72:	2001      	movs	r0, #1
    3b74:	bd10      	pop	{r4, pc}
    3b76:	46c0      	nop			; (mov r8, r8)

00003b78 <__aeabi_cfrcmple>:
    3b78:	4684      	mov	ip, r0
    3b7a:	1c08      	adds	r0, r1, #0
    3b7c:	4661      	mov	r1, ip
    3b7e:	e7ff      	b.n	3b80 <__aeabi_cfcmpeq>

00003b80 <__aeabi_cfcmpeq>:
    3b80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    3b82:	f000 f901 	bl	3d88 <__lesf2>
    3b86:	2800      	cmp	r0, #0
    3b88:	d401      	bmi.n	3b8e <__aeabi_cfcmpeq+0xe>
    3b8a:	2100      	movs	r1, #0
    3b8c:	42c8      	cmn	r0, r1
    3b8e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00003b90 <__aeabi_fcmpeq>:
    3b90:	b510      	push	{r4, lr}
    3b92:	f000 f88d 	bl	3cb0 <__eqsf2>
    3b96:	4240      	negs	r0, r0
    3b98:	3001      	adds	r0, #1
    3b9a:	bd10      	pop	{r4, pc}

00003b9c <__aeabi_fcmplt>:
    3b9c:	b510      	push	{r4, lr}
    3b9e:	f000 f8f3 	bl	3d88 <__lesf2>
    3ba2:	2800      	cmp	r0, #0
    3ba4:	db01      	blt.n	3baa <__aeabi_fcmplt+0xe>
    3ba6:	2000      	movs	r0, #0
    3ba8:	bd10      	pop	{r4, pc}
    3baa:	2001      	movs	r0, #1
    3bac:	bd10      	pop	{r4, pc}
    3bae:	46c0      	nop			; (mov r8, r8)

00003bb0 <__aeabi_fcmple>:
    3bb0:	b510      	push	{r4, lr}
    3bb2:	f000 f8e9 	bl	3d88 <__lesf2>
    3bb6:	2800      	cmp	r0, #0
    3bb8:	dd01      	ble.n	3bbe <__aeabi_fcmple+0xe>
    3bba:	2000      	movs	r0, #0
    3bbc:	bd10      	pop	{r4, pc}
    3bbe:	2001      	movs	r0, #1
    3bc0:	bd10      	pop	{r4, pc}
    3bc2:	46c0      	nop			; (mov r8, r8)

00003bc4 <__aeabi_fcmpgt>:
    3bc4:	b510      	push	{r4, lr}
    3bc6:	f000 f89b 	bl	3d00 <__gesf2>
    3bca:	2800      	cmp	r0, #0
    3bcc:	dc01      	bgt.n	3bd2 <__aeabi_fcmpgt+0xe>
    3bce:	2000      	movs	r0, #0
    3bd0:	bd10      	pop	{r4, pc}
    3bd2:	2001      	movs	r0, #1
    3bd4:	bd10      	pop	{r4, pc}
    3bd6:	46c0      	nop			; (mov r8, r8)

00003bd8 <__aeabi_fcmpge>:
    3bd8:	b510      	push	{r4, lr}
    3bda:	f000 f891 	bl	3d00 <__gesf2>
    3bde:	2800      	cmp	r0, #0
    3be0:	da01      	bge.n	3be6 <__aeabi_fcmpge+0xe>
    3be2:	2000      	movs	r0, #0
    3be4:	bd10      	pop	{r4, pc}
    3be6:	2001      	movs	r0, #1
    3be8:	bd10      	pop	{r4, pc}
    3bea:	46c0      	nop			; (mov r8, r8)

00003bec <__aeabi_lmul>:
    3bec:	b5f0      	push	{r4, r5, r6, r7, lr}
    3bee:	464f      	mov	r7, r9
    3bf0:	4646      	mov	r6, r8
    3bf2:	b4c0      	push	{r6, r7}
    3bf4:	0416      	lsls	r6, r2, #16
    3bf6:	0c36      	lsrs	r6, r6, #16
    3bf8:	4699      	mov	r9, r3
    3bfa:	0033      	movs	r3, r6
    3bfc:	0405      	lsls	r5, r0, #16
    3bfe:	0c2c      	lsrs	r4, r5, #16
    3c00:	0c07      	lsrs	r7, r0, #16
    3c02:	0c15      	lsrs	r5, r2, #16
    3c04:	4363      	muls	r3, r4
    3c06:	437e      	muls	r6, r7
    3c08:	436f      	muls	r7, r5
    3c0a:	4365      	muls	r5, r4
    3c0c:	0c1c      	lsrs	r4, r3, #16
    3c0e:	19ad      	adds	r5, r5, r6
    3c10:	1964      	adds	r4, r4, r5
    3c12:	469c      	mov	ip, r3
    3c14:	42a6      	cmp	r6, r4
    3c16:	d903      	bls.n	3c20 <__aeabi_lmul+0x34>
    3c18:	2380      	movs	r3, #128	; 0x80
    3c1a:	025b      	lsls	r3, r3, #9
    3c1c:	4698      	mov	r8, r3
    3c1e:	4447      	add	r7, r8
    3c20:	4663      	mov	r3, ip
    3c22:	0c25      	lsrs	r5, r4, #16
    3c24:	19ef      	adds	r7, r5, r7
    3c26:	041d      	lsls	r5, r3, #16
    3c28:	464b      	mov	r3, r9
    3c2a:	434a      	muls	r2, r1
    3c2c:	4343      	muls	r3, r0
    3c2e:	0c2d      	lsrs	r5, r5, #16
    3c30:	0424      	lsls	r4, r4, #16
    3c32:	1964      	adds	r4, r4, r5
    3c34:	1899      	adds	r1, r3, r2
    3c36:	19c9      	adds	r1, r1, r7
    3c38:	0020      	movs	r0, r4
    3c3a:	bc0c      	pop	{r2, r3}
    3c3c:	4690      	mov	r8, r2
    3c3e:	4699      	mov	r9, r3
    3c40:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3c42:	46c0      	nop			; (mov r8, r8)

00003c44 <__aeabi_f2uiz>:
    3c44:	219e      	movs	r1, #158	; 0x9e
    3c46:	b510      	push	{r4, lr}
    3c48:	05c9      	lsls	r1, r1, #23
    3c4a:	1c04      	adds	r4, r0, #0
    3c4c:	f7ff ffc4 	bl	3bd8 <__aeabi_fcmpge>
    3c50:	2800      	cmp	r0, #0
    3c52:	d103      	bne.n	3c5c <__aeabi_f2uiz+0x18>
    3c54:	1c20      	adds	r0, r4, #0
    3c56:	f000 fb75 	bl	4344 <__aeabi_f2iz>
    3c5a:	bd10      	pop	{r4, pc}
    3c5c:	219e      	movs	r1, #158	; 0x9e
    3c5e:	1c20      	adds	r0, r4, #0
    3c60:	05c9      	lsls	r1, r1, #23
    3c62:	f000 f9e9 	bl	4038 <__aeabi_fsub>
    3c66:	f000 fb6d 	bl	4344 <__aeabi_f2iz>
    3c6a:	2380      	movs	r3, #128	; 0x80
    3c6c:	061b      	lsls	r3, r3, #24
    3c6e:	469c      	mov	ip, r3
    3c70:	4460      	add	r0, ip
    3c72:	e7f2      	b.n	3c5a <__aeabi_f2uiz+0x16>

00003c74 <__aeabi_d2uiz>:
    3c74:	b570      	push	{r4, r5, r6, lr}
    3c76:	2200      	movs	r2, #0
    3c78:	4b0c      	ldr	r3, [pc, #48]	; (3cac <__aeabi_d2uiz+0x38>)
    3c7a:	0004      	movs	r4, r0
    3c7c:	000d      	movs	r5, r1
    3c7e:	f7ff ff71 	bl	3b64 <__aeabi_dcmpge>
    3c82:	2800      	cmp	r0, #0
    3c84:	d104      	bne.n	3c90 <__aeabi_d2uiz+0x1c>
    3c86:	0020      	movs	r0, r4
    3c88:	0029      	movs	r1, r5
    3c8a:	f002 f903 	bl	5e94 <__aeabi_d2iz>
    3c8e:	bd70      	pop	{r4, r5, r6, pc}
    3c90:	4b06      	ldr	r3, [pc, #24]	; (3cac <__aeabi_d2uiz+0x38>)
    3c92:	2200      	movs	r2, #0
    3c94:	0020      	movs	r0, r4
    3c96:	0029      	movs	r1, r5
    3c98:	f001 fd88 	bl	57ac <__aeabi_dsub>
    3c9c:	f002 f8fa 	bl	5e94 <__aeabi_d2iz>
    3ca0:	2380      	movs	r3, #128	; 0x80
    3ca2:	061b      	lsls	r3, r3, #24
    3ca4:	469c      	mov	ip, r3
    3ca6:	4460      	add	r0, ip
    3ca8:	e7f1      	b.n	3c8e <__aeabi_d2uiz+0x1a>
    3caa:	46c0      	nop			; (mov r8, r8)
    3cac:	41e00000 	.word	0x41e00000

00003cb0 <__eqsf2>:
    3cb0:	0243      	lsls	r3, r0, #9
    3cb2:	b570      	push	{r4, r5, r6, lr}
    3cb4:	0042      	lsls	r2, r0, #1
    3cb6:	004c      	lsls	r4, r1, #1
    3cb8:	0a5d      	lsrs	r5, r3, #9
    3cba:	0fc3      	lsrs	r3, r0, #31
    3cbc:	0248      	lsls	r0, r1, #9
    3cbe:	0e12      	lsrs	r2, r2, #24
    3cc0:	0a46      	lsrs	r6, r0, #9
    3cc2:	0e24      	lsrs	r4, r4, #24
    3cc4:	0fc9      	lsrs	r1, r1, #31
    3cc6:	2aff      	cmp	r2, #255	; 0xff
    3cc8:	d00f      	beq.n	3cea <__eqsf2+0x3a>
    3cca:	2cff      	cmp	r4, #255	; 0xff
    3ccc:	d011      	beq.n	3cf2 <__eqsf2+0x42>
    3cce:	2001      	movs	r0, #1
    3cd0:	42a2      	cmp	r2, r4
    3cd2:	d000      	beq.n	3cd6 <__eqsf2+0x26>
    3cd4:	bd70      	pop	{r4, r5, r6, pc}
    3cd6:	42b5      	cmp	r5, r6
    3cd8:	d1fc      	bne.n	3cd4 <__eqsf2+0x24>
    3cda:	428b      	cmp	r3, r1
    3cdc:	d00d      	beq.n	3cfa <__eqsf2+0x4a>
    3cde:	2a00      	cmp	r2, #0
    3ce0:	d1f8      	bne.n	3cd4 <__eqsf2+0x24>
    3ce2:	0028      	movs	r0, r5
    3ce4:	1e43      	subs	r3, r0, #1
    3ce6:	4198      	sbcs	r0, r3
    3ce8:	e7f4      	b.n	3cd4 <__eqsf2+0x24>
    3cea:	2001      	movs	r0, #1
    3cec:	2d00      	cmp	r5, #0
    3cee:	d1f1      	bne.n	3cd4 <__eqsf2+0x24>
    3cf0:	e7eb      	b.n	3cca <__eqsf2+0x1a>
    3cf2:	2001      	movs	r0, #1
    3cf4:	2e00      	cmp	r6, #0
    3cf6:	d1ed      	bne.n	3cd4 <__eqsf2+0x24>
    3cf8:	e7e9      	b.n	3cce <__eqsf2+0x1e>
    3cfa:	2000      	movs	r0, #0
    3cfc:	e7ea      	b.n	3cd4 <__eqsf2+0x24>
    3cfe:	46c0      	nop			; (mov r8, r8)

00003d00 <__gesf2>:
    3d00:	0243      	lsls	r3, r0, #9
    3d02:	b5f0      	push	{r4, r5, r6, r7, lr}
    3d04:	0042      	lsls	r2, r0, #1
    3d06:	0a5d      	lsrs	r5, r3, #9
    3d08:	0fc3      	lsrs	r3, r0, #31
    3d0a:	0248      	lsls	r0, r1, #9
    3d0c:	0a44      	lsrs	r4, r0, #9
    3d0e:	0048      	lsls	r0, r1, #1
    3d10:	0e12      	lsrs	r2, r2, #24
    3d12:	0e00      	lsrs	r0, r0, #24
    3d14:	0fc9      	lsrs	r1, r1, #31
    3d16:	2aff      	cmp	r2, #255	; 0xff
    3d18:	d01f      	beq.n	3d5a <__gesf2+0x5a>
    3d1a:	28ff      	cmp	r0, #255	; 0xff
    3d1c:	d022      	beq.n	3d64 <__gesf2+0x64>
    3d1e:	2a00      	cmp	r2, #0
    3d20:	d109      	bne.n	3d36 <__gesf2+0x36>
    3d22:	426e      	negs	r6, r5
    3d24:	416e      	adcs	r6, r5
    3d26:	2800      	cmp	r0, #0
    3d28:	d10f      	bne.n	3d4a <__gesf2+0x4a>
    3d2a:	2c00      	cmp	r4, #0
    3d2c:	d10d      	bne.n	3d4a <__gesf2+0x4a>
    3d2e:	2000      	movs	r0, #0
    3d30:	2d00      	cmp	r5, #0
    3d32:	d009      	beq.n	3d48 <__gesf2+0x48>
    3d34:	e005      	b.n	3d42 <__gesf2+0x42>
    3d36:	2800      	cmp	r0, #0
    3d38:	d101      	bne.n	3d3e <__gesf2+0x3e>
    3d3a:	2c00      	cmp	r4, #0
    3d3c:	d001      	beq.n	3d42 <__gesf2+0x42>
    3d3e:	428b      	cmp	r3, r1
    3d40:	d013      	beq.n	3d6a <__gesf2+0x6a>
    3d42:	4258      	negs	r0, r3
    3d44:	2301      	movs	r3, #1
    3d46:	4318      	orrs	r0, r3
    3d48:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3d4a:	2e00      	cmp	r6, #0
    3d4c:	d0f7      	beq.n	3d3e <__gesf2+0x3e>
    3d4e:	4248      	negs	r0, r1
    3d50:	4141      	adcs	r1, r0
    3d52:	2001      	movs	r0, #1
    3d54:	4249      	negs	r1, r1
    3d56:	4308      	orrs	r0, r1
    3d58:	e7f6      	b.n	3d48 <__gesf2+0x48>
    3d5a:	2d00      	cmp	r5, #0
    3d5c:	d0dd      	beq.n	3d1a <__gesf2+0x1a>
    3d5e:	2002      	movs	r0, #2
    3d60:	4240      	negs	r0, r0
    3d62:	e7f1      	b.n	3d48 <__gesf2+0x48>
    3d64:	2c00      	cmp	r4, #0
    3d66:	d0da      	beq.n	3d1e <__gesf2+0x1e>
    3d68:	e7f9      	b.n	3d5e <__gesf2+0x5e>
    3d6a:	4282      	cmp	r2, r0
    3d6c:	dce9      	bgt.n	3d42 <__gesf2+0x42>
    3d6e:	db04      	blt.n	3d7a <__gesf2+0x7a>
    3d70:	42a5      	cmp	r5, r4
    3d72:	d8e6      	bhi.n	3d42 <__gesf2+0x42>
    3d74:	2000      	movs	r0, #0
    3d76:	42a5      	cmp	r5, r4
    3d78:	d2e6      	bcs.n	3d48 <__gesf2+0x48>
    3d7a:	4258      	negs	r0, r3
    3d7c:	4143      	adcs	r3, r0
    3d7e:	2001      	movs	r0, #1
    3d80:	425b      	negs	r3, r3
    3d82:	4318      	orrs	r0, r3
    3d84:	e7e0      	b.n	3d48 <__gesf2+0x48>
    3d86:	46c0      	nop			; (mov r8, r8)

00003d88 <__lesf2>:
    3d88:	0243      	lsls	r3, r0, #9
    3d8a:	b5f0      	push	{r4, r5, r6, r7, lr}
    3d8c:	0042      	lsls	r2, r0, #1
    3d8e:	004c      	lsls	r4, r1, #1
    3d90:	0a5e      	lsrs	r6, r3, #9
    3d92:	0fc3      	lsrs	r3, r0, #31
    3d94:	0248      	lsls	r0, r1, #9
    3d96:	0e12      	lsrs	r2, r2, #24
    3d98:	0a45      	lsrs	r5, r0, #9
    3d9a:	0e24      	lsrs	r4, r4, #24
    3d9c:	0fc9      	lsrs	r1, r1, #31
    3d9e:	2aff      	cmp	r2, #255	; 0xff
    3da0:	d017      	beq.n	3dd2 <__lesf2+0x4a>
    3da2:	2cff      	cmp	r4, #255	; 0xff
    3da4:	d019      	beq.n	3dda <__lesf2+0x52>
    3da6:	2a00      	cmp	r2, #0
    3da8:	d10b      	bne.n	3dc2 <__lesf2+0x3a>
    3daa:	4270      	negs	r0, r6
    3dac:	4170      	adcs	r0, r6
    3dae:	2c00      	cmp	r4, #0
    3db0:	d017      	beq.n	3de2 <__lesf2+0x5a>
    3db2:	2800      	cmp	r0, #0
    3db4:	d007      	beq.n	3dc6 <__lesf2+0x3e>
    3db6:	4248      	negs	r0, r1
    3db8:	4141      	adcs	r1, r0
    3dba:	2001      	movs	r0, #1
    3dbc:	4249      	negs	r1, r1
    3dbe:	4308      	orrs	r0, r1
    3dc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3dc2:	2c00      	cmp	r4, #0
    3dc4:	d013      	beq.n	3dee <__lesf2+0x66>
    3dc6:	428b      	cmp	r3, r1
    3dc8:	d014      	beq.n	3df4 <__lesf2+0x6c>
    3dca:	4258      	negs	r0, r3
    3dcc:	2301      	movs	r3, #1
    3dce:	4318      	orrs	r0, r3
    3dd0:	e7f6      	b.n	3dc0 <__lesf2+0x38>
    3dd2:	2002      	movs	r0, #2
    3dd4:	2e00      	cmp	r6, #0
    3dd6:	d1f3      	bne.n	3dc0 <__lesf2+0x38>
    3dd8:	e7e3      	b.n	3da2 <__lesf2+0x1a>
    3dda:	2002      	movs	r0, #2
    3ddc:	2d00      	cmp	r5, #0
    3dde:	d1ef      	bne.n	3dc0 <__lesf2+0x38>
    3de0:	e7e1      	b.n	3da6 <__lesf2+0x1e>
    3de2:	2d00      	cmp	r5, #0
    3de4:	d1e5      	bne.n	3db2 <__lesf2+0x2a>
    3de6:	2000      	movs	r0, #0
    3de8:	2e00      	cmp	r6, #0
    3dea:	d0e9      	beq.n	3dc0 <__lesf2+0x38>
    3dec:	e7ed      	b.n	3dca <__lesf2+0x42>
    3dee:	2d00      	cmp	r5, #0
    3df0:	d1e9      	bne.n	3dc6 <__lesf2+0x3e>
    3df2:	e7ea      	b.n	3dca <__lesf2+0x42>
    3df4:	42a2      	cmp	r2, r4
    3df6:	dce8      	bgt.n	3dca <__lesf2+0x42>
    3df8:	db04      	blt.n	3e04 <__lesf2+0x7c>
    3dfa:	42ae      	cmp	r6, r5
    3dfc:	d8e5      	bhi.n	3dca <__lesf2+0x42>
    3dfe:	2000      	movs	r0, #0
    3e00:	42ae      	cmp	r6, r5
    3e02:	d2dd      	bcs.n	3dc0 <__lesf2+0x38>
    3e04:	4258      	negs	r0, r3
    3e06:	4143      	adcs	r3, r0
    3e08:	2001      	movs	r0, #1
    3e0a:	425b      	negs	r3, r3
    3e0c:	4318      	orrs	r0, r3
    3e0e:	e7d7      	b.n	3dc0 <__lesf2+0x38>

00003e10 <__aeabi_fmul>:
    3e10:	b5f0      	push	{r4, r5, r6, r7, lr}
    3e12:	4657      	mov	r7, sl
    3e14:	464e      	mov	r6, r9
    3e16:	4645      	mov	r5, r8
    3e18:	0043      	lsls	r3, r0, #1
    3e1a:	b4e0      	push	{r5, r6, r7}
    3e1c:	0246      	lsls	r6, r0, #9
    3e1e:	4688      	mov	r8, r1
    3e20:	0a76      	lsrs	r6, r6, #9
    3e22:	0e1f      	lsrs	r7, r3, #24
    3e24:	0fc4      	lsrs	r4, r0, #31
    3e26:	2f00      	cmp	r7, #0
    3e28:	d047      	beq.n	3eba <__aeabi_fmul+0xaa>
    3e2a:	2fff      	cmp	r7, #255	; 0xff
    3e2c:	d025      	beq.n	3e7a <__aeabi_fmul+0x6a>
    3e2e:	2300      	movs	r3, #0
    3e30:	2580      	movs	r5, #128	; 0x80
    3e32:	469a      	mov	sl, r3
    3e34:	4699      	mov	r9, r3
    3e36:	00f6      	lsls	r6, r6, #3
    3e38:	04ed      	lsls	r5, r5, #19
    3e3a:	432e      	orrs	r6, r5
    3e3c:	3f7f      	subs	r7, #127	; 0x7f
    3e3e:	4643      	mov	r3, r8
    3e40:	4642      	mov	r2, r8
    3e42:	025d      	lsls	r5, r3, #9
    3e44:	0fd2      	lsrs	r2, r2, #31
    3e46:	005b      	lsls	r3, r3, #1
    3e48:	0a6d      	lsrs	r5, r5, #9
    3e4a:	0e1b      	lsrs	r3, r3, #24
    3e4c:	4690      	mov	r8, r2
    3e4e:	d040      	beq.n	3ed2 <__aeabi_fmul+0xc2>
    3e50:	2bff      	cmp	r3, #255	; 0xff
    3e52:	d039      	beq.n	3ec8 <__aeabi_fmul+0xb8>
    3e54:	2280      	movs	r2, #128	; 0x80
    3e56:	2000      	movs	r0, #0
    3e58:	00ed      	lsls	r5, r5, #3
    3e5a:	04d2      	lsls	r2, r2, #19
    3e5c:	4315      	orrs	r5, r2
    3e5e:	3b7f      	subs	r3, #127	; 0x7f
    3e60:	18fb      	adds	r3, r7, r3
    3e62:	4642      	mov	r2, r8
    3e64:	4657      	mov	r7, sl
    3e66:	1c59      	adds	r1, r3, #1
    3e68:	4062      	eors	r2, r4
    3e6a:	468c      	mov	ip, r1
    3e6c:	4307      	orrs	r7, r0
    3e6e:	2f0f      	cmp	r7, #15
    3e70:	d85c      	bhi.n	3f2c <__aeabi_fmul+0x11c>
    3e72:	496f      	ldr	r1, [pc, #444]	; (4030 <__aeabi_fmul+0x220>)
    3e74:	00bf      	lsls	r7, r7, #2
    3e76:	59c9      	ldr	r1, [r1, r7]
    3e78:	468f      	mov	pc, r1
    3e7a:	2e00      	cmp	r6, #0
    3e7c:	d145      	bne.n	3f0a <__aeabi_fmul+0xfa>
    3e7e:	2308      	movs	r3, #8
    3e80:	469a      	mov	sl, r3
    3e82:	3b06      	subs	r3, #6
    3e84:	4699      	mov	r9, r3
    3e86:	e7da      	b.n	3e3e <__aeabi_fmul+0x2e>
    3e88:	4642      	mov	r2, r8
    3e8a:	2802      	cmp	r0, #2
    3e8c:	d02d      	beq.n	3eea <__aeabi_fmul+0xda>
    3e8e:	2803      	cmp	r0, #3
    3e90:	d100      	bne.n	3e94 <__aeabi_fmul+0x84>
    3e92:	e0c3      	b.n	401c <__aeabi_fmul+0x20c>
    3e94:	2801      	cmp	r0, #1
    3e96:	d000      	beq.n	3e9a <__aeabi_fmul+0x8a>
    3e98:	e0a2      	b.n	3fe0 <__aeabi_fmul+0x1d0>
    3e9a:	2500      	movs	r5, #0
    3e9c:	2600      	movs	r6, #0
    3e9e:	4002      	ands	r2, r0
    3ea0:	b2d4      	uxtb	r4, r2
    3ea2:	0276      	lsls	r6, r6, #9
    3ea4:	05ed      	lsls	r5, r5, #23
    3ea6:	0a76      	lsrs	r6, r6, #9
    3ea8:	432e      	orrs	r6, r5
    3eaa:	07e4      	lsls	r4, r4, #31
    3eac:	4326      	orrs	r6, r4
    3eae:	0030      	movs	r0, r6
    3eb0:	bc1c      	pop	{r2, r3, r4}
    3eb2:	4690      	mov	r8, r2
    3eb4:	4699      	mov	r9, r3
    3eb6:	46a2      	mov	sl, r4
    3eb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3eba:	2e00      	cmp	r6, #0
    3ebc:	d11a      	bne.n	3ef4 <__aeabi_fmul+0xe4>
    3ebe:	2304      	movs	r3, #4
    3ec0:	469a      	mov	sl, r3
    3ec2:	3b03      	subs	r3, #3
    3ec4:	4699      	mov	r9, r3
    3ec6:	e7ba      	b.n	3e3e <__aeabi_fmul+0x2e>
    3ec8:	002a      	movs	r2, r5
    3eca:	1e51      	subs	r1, r2, #1
    3ecc:	418a      	sbcs	r2, r1
    3ece:	1c90      	adds	r0, r2, #2
    3ed0:	e7c6      	b.n	3e60 <__aeabi_fmul+0x50>
    3ed2:	2001      	movs	r0, #1
    3ed4:	2d00      	cmp	r5, #0
    3ed6:	d0c3      	beq.n	3e60 <__aeabi_fmul+0x50>
    3ed8:	0028      	movs	r0, r5
    3eda:	f002 f9f7 	bl	62cc <__clzsi2>
    3ede:	1f43      	subs	r3, r0, #5
    3ee0:	3076      	adds	r0, #118	; 0x76
    3ee2:	409d      	lsls	r5, r3
    3ee4:	4243      	negs	r3, r0
    3ee6:	2000      	movs	r0, #0
    3ee8:	e7ba      	b.n	3e60 <__aeabi_fmul+0x50>
    3eea:	2401      	movs	r4, #1
    3eec:	25ff      	movs	r5, #255	; 0xff
    3eee:	4014      	ands	r4, r2
    3ef0:	2600      	movs	r6, #0
    3ef2:	e7d6      	b.n	3ea2 <__aeabi_fmul+0x92>
    3ef4:	0030      	movs	r0, r6
    3ef6:	f002 f9e9 	bl	62cc <__clzsi2>
    3efa:	1f43      	subs	r3, r0, #5
    3efc:	409e      	lsls	r6, r3
    3efe:	2300      	movs	r3, #0
    3f00:	3076      	adds	r0, #118	; 0x76
    3f02:	4247      	negs	r7, r0
    3f04:	469a      	mov	sl, r3
    3f06:	4699      	mov	r9, r3
    3f08:	e799      	b.n	3e3e <__aeabi_fmul+0x2e>
    3f0a:	230c      	movs	r3, #12
    3f0c:	469a      	mov	sl, r3
    3f0e:	3b09      	subs	r3, #9
    3f10:	4699      	mov	r9, r3
    3f12:	e794      	b.n	3e3e <__aeabi_fmul+0x2e>
    3f14:	2680      	movs	r6, #128	; 0x80
    3f16:	2400      	movs	r4, #0
    3f18:	03f6      	lsls	r6, r6, #15
    3f1a:	25ff      	movs	r5, #255	; 0xff
    3f1c:	e7c1      	b.n	3ea2 <__aeabi_fmul+0x92>
    3f1e:	0035      	movs	r5, r6
    3f20:	4648      	mov	r0, r9
    3f22:	e7b2      	b.n	3e8a <__aeabi_fmul+0x7a>
    3f24:	0035      	movs	r5, r6
    3f26:	0022      	movs	r2, r4
    3f28:	4648      	mov	r0, r9
    3f2a:	e7ae      	b.n	3e8a <__aeabi_fmul+0x7a>
    3f2c:	0429      	lsls	r1, r5, #16
    3f2e:	0c09      	lsrs	r1, r1, #16
    3f30:	0008      	movs	r0, r1
    3f32:	0c37      	lsrs	r7, r6, #16
    3f34:	0436      	lsls	r6, r6, #16
    3f36:	0c36      	lsrs	r6, r6, #16
    3f38:	0c2c      	lsrs	r4, r5, #16
    3f3a:	4379      	muls	r1, r7
    3f3c:	4370      	muls	r0, r6
    3f3e:	4367      	muls	r7, r4
    3f40:	4374      	muls	r4, r6
    3f42:	0c06      	lsrs	r6, r0, #16
    3f44:	1864      	adds	r4, r4, r1
    3f46:	1936      	adds	r6, r6, r4
    3f48:	42b1      	cmp	r1, r6
    3f4a:	d903      	bls.n	3f54 <__aeabi_fmul+0x144>
    3f4c:	2180      	movs	r1, #128	; 0x80
    3f4e:	0249      	lsls	r1, r1, #9
    3f50:	4688      	mov	r8, r1
    3f52:	4447      	add	r7, r8
    3f54:	0400      	lsls	r0, r0, #16
    3f56:	0c00      	lsrs	r0, r0, #16
    3f58:	0431      	lsls	r1, r6, #16
    3f5a:	1809      	adds	r1, r1, r0
    3f5c:	018d      	lsls	r5, r1, #6
    3f5e:	1e68      	subs	r0, r5, #1
    3f60:	4185      	sbcs	r5, r0
    3f62:	0e89      	lsrs	r1, r1, #26
    3f64:	4329      	orrs	r1, r5
    3f66:	0c35      	lsrs	r5, r6, #16
    3f68:	19ed      	adds	r5, r5, r7
    3f6a:	01ad      	lsls	r5, r5, #6
    3f6c:	430d      	orrs	r5, r1
    3f6e:	0129      	lsls	r1, r5, #4
    3f70:	d504      	bpl.n	3f7c <__aeabi_fmul+0x16c>
    3f72:	2301      	movs	r3, #1
    3f74:	0869      	lsrs	r1, r5, #1
    3f76:	401d      	ands	r5, r3
    3f78:	4663      	mov	r3, ip
    3f7a:	430d      	orrs	r5, r1
    3f7c:	0019      	movs	r1, r3
    3f7e:	317f      	adds	r1, #127	; 0x7f
    3f80:	2900      	cmp	r1, #0
    3f82:	dd25      	ble.n	3fd0 <__aeabi_fmul+0x1c0>
    3f84:	0768      	lsls	r0, r5, #29
    3f86:	d004      	beq.n	3f92 <__aeabi_fmul+0x182>
    3f88:	200f      	movs	r0, #15
    3f8a:	4028      	ands	r0, r5
    3f8c:	2804      	cmp	r0, #4
    3f8e:	d000      	beq.n	3f92 <__aeabi_fmul+0x182>
    3f90:	3504      	adds	r5, #4
    3f92:	0128      	lsls	r0, r5, #4
    3f94:	d503      	bpl.n	3f9e <__aeabi_fmul+0x18e>
    3f96:	4927      	ldr	r1, [pc, #156]	; (4034 <__aeabi_fmul+0x224>)
    3f98:	3380      	adds	r3, #128	; 0x80
    3f9a:	400d      	ands	r5, r1
    3f9c:	0019      	movs	r1, r3
    3f9e:	29fe      	cmp	r1, #254	; 0xfe
    3fa0:	dca3      	bgt.n	3eea <__aeabi_fmul+0xda>
    3fa2:	2401      	movs	r4, #1
    3fa4:	01ad      	lsls	r5, r5, #6
    3fa6:	0a6e      	lsrs	r6, r5, #9
    3fa8:	4014      	ands	r4, r2
    3faa:	b2cd      	uxtb	r5, r1
    3fac:	e779      	b.n	3ea2 <__aeabi_fmul+0x92>
    3fae:	2080      	movs	r0, #128	; 0x80
    3fb0:	03c0      	lsls	r0, r0, #15
    3fb2:	4206      	tst	r6, r0
    3fb4:	d007      	beq.n	3fc6 <__aeabi_fmul+0x1b6>
    3fb6:	4205      	tst	r5, r0
    3fb8:	d105      	bne.n	3fc6 <__aeabi_fmul+0x1b6>
    3fba:	4328      	orrs	r0, r5
    3fbc:	0246      	lsls	r6, r0, #9
    3fbe:	0a76      	lsrs	r6, r6, #9
    3fc0:	4644      	mov	r4, r8
    3fc2:	25ff      	movs	r5, #255	; 0xff
    3fc4:	e76d      	b.n	3ea2 <__aeabi_fmul+0x92>
    3fc6:	4306      	orrs	r6, r0
    3fc8:	0276      	lsls	r6, r6, #9
    3fca:	0a76      	lsrs	r6, r6, #9
    3fcc:	25ff      	movs	r5, #255	; 0xff
    3fce:	e768      	b.n	3ea2 <__aeabi_fmul+0x92>
    3fd0:	2401      	movs	r4, #1
    3fd2:	1a61      	subs	r1, r4, r1
    3fd4:	291b      	cmp	r1, #27
    3fd6:	dd05      	ble.n	3fe4 <__aeabi_fmul+0x1d4>
    3fd8:	4014      	ands	r4, r2
    3fda:	2500      	movs	r5, #0
    3fdc:	2600      	movs	r6, #0
    3fde:	e760      	b.n	3ea2 <__aeabi_fmul+0x92>
    3fe0:	4663      	mov	r3, ip
    3fe2:	e7cb      	b.n	3f7c <__aeabi_fmul+0x16c>
    3fe4:	002e      	movs	r6, r5
    3fe6:	2320      	movs	r3, #32
    3fe8:	40ce      	lsrs	r6, r1
    3fea:	1a59      	subs	r1, r3, r1
    3fec:	408d      	lsls	r5, r1
    3fee:	1e6b      	subs	r3, r5, #1
    3ff0:	419d      	sbcs	r5, r3
    3ff2:	432e      	orrs	r6, r5
    3ff4:	0773      	lsls	r3, r6, #29
    3ff6:	d004      	beq.n	4002 <__aeabi_fmul+0x1f2>
    3ff8:	230f      	movs	r3, #15
    3ffa:	4033      	ands	r3, r6
    3ffc:	2b04      	cmp	r3, #4
    3ffe:	d000      	beq.n	4002 <__aeabi_fmul+0x1f2>
    4000:	3604      	adds	r6, #4
    4002:	0173      	lsls	r3, r6, #5
    4004:	d504      	bpl.n	4010 <__aeabi_fmul+0x200>
    4006:	2401      	movs	r4, #1
    4008:	2501      	movs	r5, #1
    400a:	4014      	ands	r4, r2
    400c:	2600      	movs	r6, #0
    400e:	e748      	b.n	3ea2 <__aeabi_fmul+0x92>
    4010:	2401      	movs	r4, #1
    4012:	01b6      	lsls	r6, r6, #6
    4014:	0a76      	lsrs	r6, r6, #9
    4016:	4014      	ands	r4, r2
    4018:	2500      	movs	r5, #0
    401a:	e742      	b.n	3ea2 <__aeabi_fmul+0x92>
    401c:	2680      	movs	r6, #128	; 0x80
    401e:	2401      	movs	r4, #1
    4020:	03f6      	lsls	r6, r6, #15
    4022:	432e      	orrs	r6, r5
    4024:	0276      	lsls	r6, r6, #9
    4026:	0a76      	lsrs	r6, r6, #9
    4028:	4014      	ands	r4, r2
    402a:	25ff      	movs	r5, #255	; 0xff
    402c:	e739      	b.n	3ea2 <__aeabi_fmul+0x92>
    402e:	46c0      	nop			; (mov r8, r8)
    4030:	000064e0 	.word	0x000064e0
    4034:	f7ffffff 	.word	0xf7ffffff

00004038 <__aeabi_fsub>:
    4038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    403a:	024a      	lsls	r2, r1, #9
    403c:	004e      	lsls	r6, r1, #1
    403e:	0243      	lsls	r3, r0, #9
    4040:	0044      	lsls	r4, r0, #1
    4042:	0e24      	lsrs	r4, r4, #24
    4044:	0fc5      	lsrs	r5, r0, #31
    4046:	099b      	lsrs	r3, r3, #6
    4048:	0e36      	lsrs	r6, r6, #24
    404a:	0fc9      	lsrs	r1, r1, #31
    404c:	0992      	lsrs	r2, r2, #6
    404e:	2eff      	cmp	r6, #255	; 0xff
    4050:	d100      	bne.n	4054 <__aeabi_fsub+0x1c>
    4052:	e083      	b.n	415c <__aeabi_fsub+0x124>
    4054:	2001      	movs	r0, #1
    4056:	4041      	eors	r1, r0
    4058:	1ba0      	subs	r0, r4, r6
    405a:	42a9      	cmp	r1, r5
    405c:	d05c      	beq.n	4118 <__aeabi_fsub+0xe0>
    405e:	2800      	cmp	r0, #0
    4060:	dc00      	bgt.n	4064 <__aeabi_fsub+0x2c>
    4062:	e095      	b.n	4190 <__aeabi_fsub+0x158>
    4064:	2e00      	cmp	r6, #0
    4066:	d11c      	bne.n	40a2 <__aeabi_fsub+0x6a>
    4068:	2a00      	cmp	r2, #0
    406a:	d000      	beq.n	406e <__aeabi_fsub+0x36>
    406c:	e081      	b.n	4172 <__aeabi_fsub+0x13a>
    406e:	075a      	lsls	r2, r3, #29
    4070:	d004      	beq.n	407c <__aeabi_fsub+0x44>
    4072:	220f      	movs	r2, #15
    4074:	401a      	ands	r2, r3
    4076:	2a04      	cmp	r2, #4
    4078:	d000      	beq.n	407c <__aeabi_fsub+0x44>
    407a:	3304      	adds	r3, #4
    407c:	015a      	lsls	r2, r3, #5
    407e:	d53b      	bpl.n	40f8 <__aeabi_fsub+0xc0>
    4080:	3401      	adds	r4, #1
    4082:	2cff      	cmp	r4, #255	; 0xff
    4084:	d100      	bne.n	4088 <__aeabi_fsub+0x50>
    4086:	e091      	b.n	41ac <__aeabi_fsub+0x174>
    4088:	2001      	movs	r0, #1
    408a:	019b      	lsls	r3, r3, #6
    408c:	0a5b      	lsrs	r3, r3, #9
    408e:	b2e4      	uxtb	r4, r4
    4090:	4005      	ands	r5, r0
    4092:	025b      	lsls	r3, r3, #9
    4094:	05e4      	lsls	r4, r4, #23
    4096:	0a5b      	lsrs	r3, r3, #9
    4098:	07ed      	lsls	r5, r5, #31
    409a:	4323      	orrs	r3, r4
    409c:	432b      	orrs	r3, r5
    409e:	0018      	movs	r0, r3
    40a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    40a2:	2cff      	cmp	r4, #255	; 0xff
    40a4:	d0e3      	beq.n	406e <__aeabi_fsub+0x36>
    40a6:	2180      	movs	r1, #128	; 0x80
    40a8:	04c9      	lsls	r1, r1, #19
    40aa:	430a      	orrs	r2, r1
    40ac:	281b      	cmp	r0, #27
    40ae:	dd00      	ble.n	40b2 <__aeabi_fsub+0x7a>
    40b0:	e090      	b.n	41d4 <__aeabi_fsub+0x19c>
    40b2:	0016      	movs	r6, r2
    40b4:	2120      	movs	r1, #32
    40b6:	40c6      	lsrs	r6, r0
    40b8:	1a08      	subs	r0, r1, r0
    40ba:	4082      	lsls	r2, r0
    40bc:	1e51      	subs	r1, r2, #1
    40be:	418a      	sbcs	r2, r1
    40c0:	4332      	orrs	r2, r6
    40c2:	1a9b      	subs	r3, r3, r2
    40c4:	015a      	lsls	r2, r3, #5
    40c6:	d515      	bpl.n	40f4 <__aeabi_fsub+0xbc>
    40c8:	019b      	lsls	r3, r3, #6
    40ca:	099e      	lsrs	r6, r3, #6
    40cc:	0030      	movs	r0, r6
    40ce:	f002 f8fd 	bl	62cc <__clzsi2>
    40d2:	3805      	subs	r0, #5
    40d4:	4086      	lsls	r6, r0
    40d6:	4284      	cmp	r4, r0
    40d8:	dc6c      	bgt.n	41b4 <__aeabi_fsub+0x17c>
    40da:	1b04      	subs	r4, r0, r4
    40dc:	0033      	movs	r3, r6
    40de:	2020      	movs	r0, #32
    40e0:	3401      	adds	r4, #1
    40e2:	40e3      	lsrs	r3, r4
    40e4:	1b04      	subs	r4, r0, r4
    40e6:	40a6      	lsls	r6, r4
    40e8:	1e72      	subs	r2, r6, #1
    40ea:	4196      	sbcs	r6, r2
    40ec:	2400      	movs	r4, #0
    40ee:	4333      	orrs	r3, r6
    40f0:	e7bd      	b.n	406e <__aeabi_fsub+0x36>
    40f2:	000d      	movs	r5, r1
    40f4:	075a      	lsls	r2, r3, #29
    40f6:	d1bc      	bne.n	4072 <__aeabi_fsub+0x3a>
    40f8:	08df      	lsrs	r7, r3, #3
    40fa:	2301      	movs	r3, #1
    40fc:	401d      	ands	r5, r3
    40fe:	2cff      	cmp	r4, #255	; 0xff
    4100:	d133      	bne.n	416a <__aeabi_fsub+0x132>
    4102:	2f00      	cmp	r7, #0
    4104:	d100      	bne.n	4108 <__aeabi_fsub+0xd0>
    4106:	e090      	b.n	422a <__aeabi_fsub+0x1f2>
    4108:	2280      	movs	r2, #128	; 0x80
    410a:	03d2      	lsls	r2, r2, #15
    410c:	0013      	movs	r3, r2
    410e:	433b      	orrs	r3, r7
    4110:	025b      	lsls	r3, r3, #9
    4112:	0a5b      	lsrs	r3, r3, #9
    4114:	24ff      	movs	r4, #255	; 0xff
    4116:	e7bc      	b.n	4092 <__aeabi_fsub+0x5a>
    4118:	2800      	cmp	r0, #0
    411a:	dd4f      	ble.n	41bc <__aeabi_fsub+0x184>
    411c:	2e00      	cmp	r6, #0
    411e:	d02e      	beq.n	417e <__aeabi_fsub+0x146>
    4120:	2cff      	cmp	r4, #255	; 0xff
    4122:	d0a4      	beq.n	406e <__aeabi_fsub+0x36>
    4124:	2580      	movs	r5, #128	; 0x80
    4126:	04ed      	lsls	r5, r5, #19
    4128:	432a      	orrs	r2, r5
    412a:	281b      	cmp	r0, #27
    412c:	dd00      	ble.n	4130 <__aeabi_fsub+0xf8>
    412e:	e097      	b.n	4260 <__aeabi_fsub+0x228>
    4130:	0016      	movs	r6, r2
    4132:	2520      	movs	r5, #32
    4134:	40c6      	lsrs	r6, r0
    4136:	1a28      	subs	r0, r5, r0
    4138:	4082      	lsls	r2, r0
    413a:	1e50      	subs	r0, r2, #1
    413c:	4182      	sbcs	r2, r0
    413e:	4332      	orrs	r2, r6
    4140:	189b      	adds	r3, r3, r2
    4142:	015a      	lsls	r2, r3, #5
    4144:	d5d5      	bpl.n	40f2 <__aeabi_fsub+0xba>
    4146:	3401      	adds	r4, #1
    4148:	2cff      	cmp	r4, #255	; 0xff
    414a:	d06d      	beq.n	4228 <__aeabi_fsub+0x1f0>
    414c:	2201      	movs	r2, #1
    414e:	487b      	ldr	r0, [pc, #492]	; (433c <__aeabi_fsub+0x304>)
    4150:	401a      	ands	r2, r3
    4152:	085b      	lsrs	r3, r3, #1
    4154:	4003      	ands	r3, r0
    4156:	4313      	orrs	r3, r2
    4158:	000d      	movs	r5, r1
    415a:	e788      	b.n	406e <__aeabi_fsub+0x36>
    415c:	2a00      	cmp	r2, #0
    415e:	d000      	beq.n	4162 <__aeabi_fsub+0x12a>
    4160:	e77a      	b.n	4058 <__aeabi_fsub+0x20>
    4162:	e777      	b.n	4054 <__aeabi_fsub+0x1c>
    4164:	1e03      	subs	r3, r0, #0
    4166:	d1c5      	bne.n	40f4 <__aeabi_fsub+0xbc>
    4168:	2500      	movs	r5, #0
    416a:	027b      	lsls	r3, r7, #9
    416c:	0a5b      	lsrs	r3, r3, #9
    416e:	b2e4      	uxtb	r4, r4
    4170:	e78f      	b.n	4092 <__aeabi_fsub+0x5a>
    4172:	3801      	subs	r0, #1
    4174:	2800      	cmp	r0, #0
    4176:	d0a4      	beq.n	40c2 <__aeabi_fsub+0x8a>
    4178:	2cff      	cmp	r4, #255	; 0xff
    417a:	d197      	bne.n	40ac <__aeabi_fsub+0x74>
    417c:	e777      	b.n	406e <__aeabi_fsub+0x36>
    417e:	2a00      	cmp	r2, #0
    4180:	d100      	bne.n	4184 <__aeabi_fsub+0x14c>
    4182:	e774      	b.n	406e <__aeabi_fsub+0x36>
    4184:	3801      	subs	r0, #1
    4186:	2800      	cmp	r0, #0
    4188:	d0da      	beq.n	4140 <__aeabi_fsub+0x108>
    418a:	2cff      	cmp	r4, #255	; 0xff
    418c:	d1cd      	bne.n	412a <__aeabi_fsub+0xf2>
    418e:	e76e      	b.n	406e <__aeabi_fsub+0x36>
    4190:	2800      	cmp	r0, #0
    4192:	d121      	bne.n	41d8 <__aeabi_fsub+0x1a0>
    4194:	1c60      	adds	r0, r4, #1
    4196:	b2c0      	uxtb	r0, r0
    4198:	2801      	cmp	r0, #1
    419a:	dd58      	ble.n	424e <__aeabi_fsub+0x216>
    419c:	2780      	movs	r7, #128	; 0x80
    419e:	1a9e      	subs	r6, r3, r2
    41a0:	04ff      	lsls	r7, r7, #19
    41a2:	4037      	ands	r7, r6
    41a4:	d02f      	beq.n	4206 <__aeabi_fsub+0x1ce>
    41a6:	1ad6      	subs	r6, r2, r3
    41a8:	000d      	movs	r5, r1
    41aa:	e78f      	b.n	40cc <__aeabi_fsub+0x94>
    41ac:	2301      	movs	r3, #1
    41ae:	401d      	ands	r5, r3
    41b0:	2300      	movs	r3, #0
    41b2:	e76e      	b.n	4092 <__aeabi_fsub+0x5a>
    41b4:	4b62      	ldr	r3, [pc, #392]	; (4340 <__aeabi_fsub+0x308>)
    41b6:	1a24      	subs	r4, r4, r0
    41b8:	4033      	ands	r3, r6
    41ba:	e758      	b.n	406e <__aeabi_fsub+0x36>
    41bc:	2800      	cmp	r0, #0
    41be:	d151      	bne.n	4264 <__aeabi_fsub+0x22c>
    41c0:	1c60      	adds	r0, r4, #1
    41c2:	b2c6      	uxtb	r6, r0
    41c4:	2e01      	cmp	r6, #1
    41c6:	dd33      	ble.n	4230 <__aeabi_fsub+0x1f8>
    41c8:	28ff      	cmp	r0, #255	; 0xff
    41ca:	d02d      	beq.n	4228 <__aeabi_fsub+0x1f0>
    41cc:	189b      	adds	r3, r3, r2
    41ce:	085b      	lsrs	r3, r3, #1
    41d0:	0004      	movs	r4, r0
    41d2:	e74c      	b.n	406e <__aeabi_fsub+0x36>
    41d4:	2201      	movs	r2, #1
    41d6:	e774      	b.n	40c2 <__aeabi_fsub+0x8a>
    41d8:	2c00      	cmp	r4, #0
    41da:	d01a      	beq.n	4212 <__aeabi_fsub+0x1da>
    41dc:	2eff      	cmp	r6, #255	; 0xff
    41de:	d01f      	beq.n	4220 <__aeabi_fsub+0x1e8>
    41e0:	2480      	movs	r4, #128	; 0x80
    41e2:	04e4      	lsls	r4, r4, #19
    41e4:	4240      	negs	r0, r0
    41e6:	4323      	orrs	r3, r4
    41e8:	281b      	cmp	r0, #27
    41ea:	dd00      	ble.n	41ee <__aeabi_fsub+0x1b6>
    41ec:	e096      	b.n	431c <__aeabi_fsub+0x2e4>
    41ee:	001d      	movs	r5, r3
    41f0:	2420      	movs	r4, #32
    41f2:	40c5      	lsrs	r5, r0
    41f4:	1a20      	subs	r0, r4, r0
    41f6:	4083      	lsls	r3, r0
    41f8:	1e58      	subs	r0, r3, #1
    41fa:	4183      	sbcs	r3, r0
    41fc:	432b      	orrs	r3, r5
    41fe:	1ad3      	subs	r3, r2, r3
    4200:	0034      	movs	r4, r6
    4202:	000d      	movs	r5, r1
    4204:	e75e      	b.n	40c4 <__aeabi_fsub+0x8c>
    4206:	2e00      	cmp	r6, #0
    4208:	d000      	beq.n	420c <__aeabi_fsub+0x1d4>
    420a:	e75f      	b.n	40cc <__aeabi_fsub+0x94>
    420c:	2500      	movs	r5, #0
    420e:	2400      	movs	r4, #0
    4210:	e7ab      	b.n	416a <__aeabi_fsub+0x132>
    4212:	2b00      	cmp	r3, #0
    4214:	d044      	beq.n	42a0 <__aeabi_fsub+0x268>
    4216:	43c0      	mvns	r0, r0
    4218:	2800      	cmp	r0, #0
    421a:	d0f0      	beq.n	41fe <__aeabi_fsub+0x1c6>
    421c:	2eff      	cmp	r6, #255	; 0xff
    421e:	d1e3      	bne.n	41e8 <__aeabi_fsub+0x1b0>
    4220:	0013      	movs	r3, r2
    4222:	24ff      	movs	r4, #255	; 0xff
    4224:	000d      	movs	r5, r1
    4226:	e722      	b.n	406e <__aeabi_fsub+0x36>
    4228:	000d      	movs	r5, r1
    422a:	24ff      	movs	r4, #255	; 0xff
    422c:	2300      	movs	r3, #0
    422e:	e730      	b.n	4092 <__aeabi_fsub+0x5a>
    4230:	2c00      	cmp	r4, #0
    4232:	d15d      	bne.n	42f0 <__aeabi_fsub+0x2b8>
    4234:	2b00      	cmp	r3, #0
    4236:	d07d      	beq.n	4334 <__aeabi_fsub+0x2fc>
    4238:	2a00      	cmp	r2, #0
    423a:	d100      	bne.n	423e <__aeabi_fsub+0x206>
    423c:	e717      	b.n	406e <__aeabi_fsub+0x36>
    423e:	189b      	adds	r3, r3, r2
    4240:	015a      	lsls	r2, r3, #5
    4242:	d400      	bmi.n	4246 <__aeabi_fsub+0x20e>
    4244:	e756      	b.n	40f4 <__aeabi_fsub+0xbc>
    4246:	4a3e      	ldr	r2, [pc, #248]	; (4340 <__aeabi_fsub+0x308>)
    4248:	0004      	movs	r4, r0
    424a:	4013      	ands	r3, r2
    424c:	e70f      	b.n	406e <__aeabi_fsub+0x36>
    424e:	2c00      	cmp	r4, #0
    4250:	d11e      	bne.n	4290 <__aeabi_fsub+0x258>
    4252:	2b00      	cmp	r3, #0
    4254:	d12f      	bne.n	42b6 <__aeabi_fsub+0x27e>
    4256:	2a00      	cmp	r2, #0
    4258:	d065      	beq.n	4326 <__aeabi_fsub+0x2ee>
    425a:	0013      	movs	r3, r2
    425c:	000d      	movs	r5, r1
    425e:	e706      	b.n	406e <__aeabi_fsub+0x36>
    4260:	2201      	movs	r2, #1
    4262:	e76d      	b.n	4140 <__aeabi_fsub+0x108>
    4264:	2c00      	cmp	r4, #0
    4266:	d11f      	bne.n	42a8 <__aeabi_fsub+0x270>
    4268:	2b00      	cmp	r3, #0
    426a:	d059      	beq.n	4320 <__aeabi_fsub+0x2e8>
    426c:	43c0      	mvns	r0, r0
    426e:	2800      	cmp	r0, #0
    4270:	d00b      	beq.n	428a <__aeabi_fsub+0x252>
    4272:	2eff      	cmp	r6, #255	; 0xff
    4274:	d04f      	beq.n	4316 <__aeabi_fsub+0x2de>
    4276:	281b      	cmp	r0, #27
    4278:	dc5e      	bgt.n	4338 <__aeabi_fsub+0x300>
    427a:	001d      	movs	r5, r3
    427c:	2420      	movs	r4, #32
    427e:	40c5      	lsrs	r5, r0
    4280:	1a20      	subs	r0, r4, r0
    4282:	4083      	lsls	r3, r0
    4284:	1e58      	subs	r0, r3, #1
    4286:	4183      	sbcs	r3, r0
    4288:	432b      	orrs	r3, r5
    428a:	189b      	adds	r3, r3, r2
    428c:	0034      	movs	r4, r6
    428e:	e758      	b.n	4142 <__aeabi_fsub+0x10a>
    4290:	2b00      	cmp	r3, #0
    4292:	d11c      	bne.n	42ce <__aeabi_fsub+0x296>
    4294:	2a00      	cmp	r2, #0
    4296:	d049      	beq.n	432c <__aeabi_fsub+0x2f4>
    4298:	0013      	movs	r3, r2
    429a:	000d      	movs	r5, r1
    429c:	24ff      	movs	r4, #255	; 0xff
    429e:	e6e6      	b.n	406e <__aeabi_fsub+0x36>
    42a0:	0013      	movs	r3, r2
    42a2:	0034      	movs	r4, r6
    42a4:	000d      	movs	r5, r1
    42a6:	e6e2      	b.n	406e <__aeabi_fsub+0x36>
    42a8:	2eff      	cmp	r6, #255	; 0xff
    42aa:	d034      	beq.n	4316 <__aeabi_fsub+0x2de>
    42ac:	2480      	movs	r4, #128	; 0x80
    42ae:	04e4      	lsls	r4, r4, #19
    42b0:	4240      	negs	r0, r0
    42b2:	4323      	orrs	r3, r4
    42b4:	e7df      	b.n	4276 <__aeabi_fsub+0x23e>
    42b6:	2a00      	cmp	r2, #0
    42b8:	d100      	bne.n	42bc <__aeabi_fsub+0x284>
    42ba:	e6d8      	b.n	406e <__aeabi_fsub+0x36>
    42bc:	2780      	movs	r7, #128	; 0x80
    42be:	1a98      	subs	r0, r3, r2
    42c0:	04ff      	lsls	r7, r7, #19
    42c2:	4007      	ands	r7, r0
    42c4:	d100      	bne.n	42c8 <__aeabi_fsub+0x290>
    42c6:	e74d      	b.n	4164 <__aeabi_fsub+0x12c>
    42c8:	1ad3      	subs	r3, r2, r3
    42ca:	000d      	movs	r5, r1
    42cc:	e6cf      	b.n	406e <__aeabi_fsub+0x36>
    42ce:	24ff      	movs	r4, #255	; 0xff
    42d0:	2a00      	cmp	r2, #0
    42d2:	d100      	bne.n	42d6 <__aeabi_fsub+0x29e>
    42d4:	e6cb      	b.n	406e <__aeabi_fsub+0x36>
    42d6:	2080      	movs	r0, #128	; 0x80
    42d8:	08db      	lsrs	r3, r3, #3
    42da:	03c0      	lsls	r0, r0, #15
    42dc:	4203      	tst	r3, r0
    42de:	d004      	beq.n	42ea <__aeabi_fsub+0x2b2>
    42e0:	08d2      	lsrs	r2, r2, #3
    42e2:	4202      	tst	r2, r0
    42e4:	d101      	bne.n	42ea <__aeabi_fsub+0x2b2>
    42e6:	0013      	movs	r3, r2
    42e8:	000d      	movs	r5, r1
    42ea:	00db      	lsls	r3, r3, #3
    42ec:	24ff      	movs	r4, #255	; 0xff
    42ee:	e6be      	b.n	406e <__aeabi_fsub+0x36>
    42f0:	2b00      	cmp	r3, #0
    42f2:	d010      	beq.n	4316 <__aeabi_fsub+0x2de>
    42f4:	24ff      	movs	r4, #255	; 0xff
    42f6:	2a00      	cmp	r2, #0
    42f8:	d100      	bne.n	42fc <__aeabi_fsub+0x2c4>
    42fa:	e6b8      	b.n	406e <__aeabi_fsub+0x36>
    42fc:	2080      	movs	r0, #128	; 0x80
    42fe:	08db      	lsrs	r3, r3, #3
    4300:	03c0      	lsls	r0, r0, #15
    4302:	4203      	tst	r3, r0
    4304:	d003      	beq.n	430e <__aeabi_fsub+0x2d6>
    4306:	08d2      	lsrs	r2, r2, #3
    4308:	4202      	tst	r2, r0
    430a:	d100      	bne.n	430e <__aeabi_fsub+0x2d6>
    430c:	0013      	movs	r3, r2
    430e:	00db      	lsls	r3, r3, #3
    4310:	000d      	movs	r5, r1
    4312:	24ff      	movs	r4, #255	; 0xff
    4314:	e6ab      	b.n	406e <__aeabi_fsub+0x36>
    4316:	0013      	movs	r3, r2
    4318:	24ff      	movs	r4, #255	; 0xff
    431a:	e6a8      	b.n	406e <__aeabi_fsub+0x36>
    431c:	2301      	movs	r3, #1
    431e:	e76e      	b.n	41fe <__aeabi_fsub+0x1c6>
    4320:	0013      	movs	r3, r2
    4322:	0034      	movs	r4, r6
    4324:	e6a3      	b.n	406e <__aeabi_fsub+0x36>
    4326:	2700      	movs	r7, #0
    4328:	2500      	movs	r5, #0
    432a:	e71e      	b.n	416a <__aeabi_fsub+0x132>
    432c:	2780      	movs	r7, #128	; 0x80
    432e:	2500      	movs	r5, #0
    4330:	03ff      	lsls	r7, r7, #15
    4332:	e6e9      	b.n	4108 <__aeabi_fsub+0xd0>
    4334:	0013      	movs	r3, r2
    4336:	e69a      	b.n	406e <__aeabi_fsub+0x36>
    4338:	2301      	movs	r3, #1
    433a:	e7a6      	b.n	428a <__aeabi_fsub+0x252>
    433c:	7dffffff 	.word	0x7dffffff
    4340:	fbffffff 	.word	0xfbffffff

00004344 <__aeabi_f2iz>:
    4344:	0243      	lsls	r3, r0, #9
    4346:	0a59      	lsrs	r1, r3, #9
    4348:	0043      	lsls	r3, r0, #1
    434a:	0fc2      	lsrs	r2, r0, #31
    434c:	0e1b      	lsrs	r3, r3, #24
    434e:	2000      	movs	r0, #0
    4350:	2b7e      	cmp	r3, #126	; 0x7e
    4352:	dd0e      	ble.n	4372 <__aeabi_f2iz+0x2e>
    4354:	2b9d      	cmp	r3, #157	; 0x9d
    4356:	dc0d      	bgt.n	4374 <__aeabi_f2iz+0x30>
    4358:	2080      	movs	r0, #128	; 0x80
    435a:	0400      	lsls	r0, r0, #16
    435c:	4301      	orrs	r1, r0
    435e:	2b95      	cmp	r3, #149	; 0x95
    4360:	dc0b      	bgt.n	437a <__aeabi_f2iz+0x36>
    4362:	2096      	movs	r0, #150	; 0x96
    4364:	1ac3      	subs	r3, r0, r3
    4366:	40d9      	lsrs	r1, r3
    4368:	000b      	movs	r3, r1
    436a:	4258      	negs	r0, r3
    436c:	2a00      	cmp	r2, #0
    436e:	d100      	bne.n	4372 <__aeabi_f2iz+0x2e>
    4370:	0018      	movs	r0, r3
    4372:	4770      	bx	lr
    4374:	4b03      	ldr	r3, [pc, #12]	; (4384 <__aeabi_f2iz+0x40>)
    4376:	18d0      	adds	r0, r2, r3
    4378:	e7fb      	b.n	4372 <__aeabi_f2iz+0x2e>
    437a:	3b96      	subs	r3, #150	; 0x96
    437c:	4099      	lsls	r1, r3
    437e:	000b      	movs	r3, r1
    4380:	e7f3      	b.n	436a <__aeabi_f2iz+0x26>
    4382:	46c0      	nop			; (mov r8, r8)
    4384:	7fffffff 	.word	0x7fffffff

00004388 <__aeabi_i2f>:
    4388:	b570      	push	{r4, r5, r6, lr}
    438a:	2800      	cmp	r0, #0
    438c:	d030      	beq.n	43f0 <__aeabi_i2f+0x68>
    438e:	17c3      	asrs	r3, r0, #31
    4390:	18c5      	adds	r5, r0, r3
    4392:	405d      	eors	r5, r3
    4394:	0fc4      	lsrs	r4, r0, #31
    4396:	0028      	movs	r0, r5
    4398:	f001 ff98 	bl	62cc <__clzsi2>
    439c:	239e      	movs	r3, #158	; 0x9e
    439e:	1a1b      	subs	r3, r3, r0
    43a0:	2b96      	cmp	r3, #150	; 0x96
    43a2:	dc0d      	bgt.n	43c0 <__aeabi_i2f+0x38>
    43a4:	2296      	movs	r2, #150	; 0x96
    43a6:	1ad2      	subs	r2, r2, r3
    43a8:	4095      	lsls	r5, r2
    43aa:	026a      	lsls	r2, r5, #9
    43ac:	0a52      	lsrs	r2, r2, #9
    43ae:	b2d8      	uxtb	r0, r3
    43b0:	0252      	lsls	r2, r2, #9
    43b2:	05c0      	lsls	r0, r0, #23
    43b4:	0a52      	lsrs	r2, r2, #9
    43b6:	07e4      	lsls	r4, r4, #31
    43b8:	4302      	orrs	r2, r0
    43ba:	4322      	orrs	r2, r4
    43bc:	0010      	movs	r0, r2
    43be:	bd70      	pop	{r4, r5, r6, pc}
    43c0:	2b99      	cmp	r3, #153	; 0x99
    43c2:	dc19      	bgt.n	43f8 <__aeabi_i2f+0x70>
    43c4:	2299      	movs	r2, #153	; 0x99
    43c6:	1ad2      	subs	r2, r2, r3
    43c8:	4095      	lsls	r5, r2
    43ca:	4a12      	ldr	r2, [pc, #72]	; (4414 <__aeabi_i2f+0x8c>)
    43cc:	402a      	ands	r2, r5
    43ce:	0769      	lsls	r1, r5, #29
    43d0:	d004      	beq.n	43dc <__aeabi_i2f+0x54>
    43d2:	210f      	movs	r1, #15
    43d4:	400d      	ands	r5, r1
    43d6:	2d04      	cmp	r5, #4
    43d8:	d000      	beq.n	43dc <__aeabi_i2f+0x54>
    43da:	3204      	adds	r2, #4
    43dc:	0151      	lsls	r1, r2, #5
    43de:	d503      	bpl.n	43e8 <__aeabi_i2f+0x60>
    43e0:	4b0c      	ldr	r3, [pc, #48]	; (4414 <__aeabi_i2f+0x8c>)
    43e2:	401a      	ands	r2, r3
    43e4:	239f      	movs	r3, #159	; 0x9f
    43e6:	1a1b      	subs	r3, r3, r0
    43e8:	0192      	lsls	r2, r2, #6
    43ea:	0a52      	lsrs	r2, r2, #9
    43ec:	b2d8      	uxtb	r0, r3
    43ee:	e7df      	b.n	43b0 <__aeabi_i2f+0x28>
    43f0:	2400      	movs	r4, #0
    43f2:	2000      	movs	r0, #0
    43f4:	2200      	movs	r2, #0
    43f6:	e7db      	b.n	43b0 <__aeabi_i2f+0x28>
    43f8:	2205      	movs	r2, #5
    43fa:	002e      	movs	r6, r5
    43fc:	1a12      	subs	r2, r2, r0
    43fe:	21b9      	movs	r1, #185	; 0xb9
    4400:	40d6      	lsrs	r6, r2
    4402:	002a      	movs	r2, r5
    4404:	1ac9      	subs	r1, r1, r3
    4406:	408a      	lsls	r2, r1
    4408:	1e55      	subs	r5, r2, #1
    440a:	41aa      	sbcs	r2, r5
    440c:	0035      	movs	r5, r6
    440e:	4315      	orrs	r5, r2
    4410:	e7db      	b.n	43ca <__aeabi_i2f+0x42>
    4412:	46c0      	nop			; (mov r8, r8)
    4414:	fbffffff 	.word	0xfbffffff

00004418 <__aeabi_dadd>:
    4418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    441a:	4656      	mov	r6, sl
    441c:	465f      	mov	r7, fp
    441e:	464d      	mov	r5, r9
    4420:	4644      	mov	r4, r8
    4422:	b4f0      	push	{r4, r5, r6, r7}
    4424:	000f      	movs	r7, r1
    4426:	0ffd      	lsrs	r5, r7, #31
    4428:	46aa      	mov	sl, r5
    442a:	0309      	lsls	r1, r1, #12
    442c:	007c      	lsls	r4, r7, #1
    442e:	002e      	movs	r6, r5
    4430:	005f      	lsls	r7, r3, #1
    4432:	0f45      	lsrs	r5, r0, #29
    4434:	0a49      	lsrs	r1, r1, #9
    4436:	0d7f      	lsrs	r7, r7, #21
    4438:	4329      	orrs	r1, r5
    443a:	00c5      	lsls	r5, r0, #3
    443c:	0318      	lsls	r0, r3, #12
    443e:	46bc      	mov	ip, r7
    4440:	0a40      	lsrs	r0, r0, #9
    4442:	0f57      	lsrs	r7, r2, #29
    4444:	0d64      	lsrs	r4, r4, #21
    4446:	0fdb      	lsrs	r3, r3, #31
    4448:	4338      	orrs	r0, r7
    444a:	00d2      	lsls	r2, r2, #3
    444c:	459a      	cmp	sl, r3
    444e:	d100      	bne.n	4452 <__aeabi_dadd+0x3a>
    4450:	e0aa      	b.n	45a8 <__aeabi_dadd+0x190>
    4452:	4666      	mov	r6, ip
    4454:	1ba6      	subs	r6, r4, r6
    4456:	2e00      	cmp	r6, #0
    4458:	dc00      	bgt.n	445c <__aeabi_dadd+0x44>
    445a:	e0ff      	b.n	465c <__aeabi_dadd+0x244>
    445c:	4663      	mov	r3, ip
    445e:	2b00      	cmp	r3, #0
    4460:	d139      	bne.n	44d6 <__aeabi_dadd+0xbe>
    4462:	0003      	movs	r3, r0
    4464:	4313      	orrs	r3, r2
    4466:	d000      	beq.n	446a <__aeabi_dadd+0x52>
    4468:	e0d9      	b.n	461e <__aeabi_dadd+0x206>
    446a:	076b      	lsls	r3, r5, #29
    446c:	d009      	beq.n	4482 <__aeabi_dadd+0x6a>
    446e:	230f      	movs	r3, #15
    4470:	402b      	ands	r3, r5
    4472:	2b04      	cmp	r3, #4
    4474:	d005      	beq.n	4482 <__aeabi_dadd+0x6a>
    4476:	1d2b      	adds	r3, r5, #4
    4478:	42ab      	cmp	r3, r5
    447a:	41ad      	sbcs	r5, r5
    447c:	426d      	negs	r5, r5
    447e:	1949      	adds	r1, r1, r5
    4480:	001d      	movs	r5, r3
    4482:	020b      	lsls	r3, r1, #8
    4484:	d400      	bmi.n	4488 <__aeabi_dadd+0x70>
    4486:	e082      	b.n	458e <__aeabi_dadd+0x176>
    4488:	4bca      	ldr	r3, [pc, #808]	; (47b4 <__aeabi_dadd+0x39c>)
    448a:	3401      	adds	r4, #1
    448c:	429c      	cmp	r4, r3
    448e:	d100      	bne.n	4492 <__aeabi_dadd+0x7a>
    4490:	e0fe      	b.n	4690 <__aeabi_dadd+0x278>
    4492:	000a      	movs	r2, r1
    4494:	4656      	mov	r6, sl
    4496:	4bc8      	ldr	r3, [pc, #800]	; (47b8 <__aeabi_dadd+0x3a0>)
    4498:	08ed      	lsrs	r5, r5, #3
    449a:	401a      	ands	r2, r3
    449c:	0750      	lsls	r0, r2, #29
    449e:	0564      	lsls	r4, r4, #21
    44a0:	0252      	lsls	r2, r2, #9
    44a2:	4305      	orrs	r5, r0
    44a4:	0b12      	lsrs	r2, r2, #12
    44a6:	0d64      	lsrs	r4, r4, #21
    44a8:	2100      	movs	r1, #0
    44aa:	0312      	lsls	r2, r2, #12
    44ac:	0d0b      	lsrs	r3, r1, #20
    44ae:	051b      	lsls	r3, r3, #20
    44b0:	0564      	lsls	r4, r4, #21
    44b2:	0b12      	lsrs	r2, r2, #12
    44b4:	431a      	orrs	r2, r3
    44b6:	0863      	lsrs	r3, r4, #1
    44b8:	4cc0      	ldr	r4, [pc, #768]	; (47bc <__aeabi_dadd+0x3a4>)
    44ba:	07f6      	lsls	r6, r6, #31
    44bc:	4014      	ands	r4, r2
    44be:	431c      	orrs	r4, r3
    44c0:	0064      	lsls	r4, r4, #1
    44c2:	0864      	lsrs	r4, r4, #1
    44c4:	4334      	orrs	r4, r6
    44c6:	0028      	movs	r0, r5
    44c8:	0021      	movs	r1, r4
    44ca:	bc3c      	pop	{r2, r3, r4, r5}
    44cc:	4690      	mov	r8, r2
    44ce:	4699      	mov	r9, r3
    44d0:	46a2      	mov	sl, r4
    44d2:	46ab      	mov	fp, r5
    44d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    44d6:	4bb7      	ldr	r3, [pc, #732]	; (47b4 <__aeabi_dadd+0x39c>)
    44d8:	429c      	cmp	r4, r3
    44da:	d0c6      	beq.n	446a <__aeabi_dadd+0x52>
    44dc:	2380      	movs	r3, #128	; 0x80
    44de:	041b      	lsls	r3, r3, #16
    44e0:	4318      	orrs	r0, r3
    44e2:	2e38      	cmp	r6, #56	; 0x38
    44e4:	dd00      	ble.n	44e8 <__aeabi_dadd+0xd0>
    44e6:	e0eb      	b.n	46c0 <__aeabi_dadd+0x2a8>
    44e8:	2e1f      	cmp	r6, #31
    44ea:	dd00      	ble.n	44ee <__aeabi_dadd+0xd6>
    44ec:	e11e      	b.n	472c <__aeabi_dadd+0x314>
    44ee:	2320      	movs	r3, #32
    44f0:	1b9b      	subs	r3, r3, r6
    44f2:	469c      	mov	ip, r3
    44f4:	0003      	movs	r3, r0
    44f6:	4667      	mov	r7, ip
    44f8:	40bb      	lsls	r3, r7
    44fa:	4698      	mov	r8, r3
    44fc:	0013      	movs	r3, r2
    44fe:	4647      	mov	r7, r8
    4500:	40f3      	lsrs	r3, r6
    4502:	433b      	orrs	r3, r7
    4504:	4667      	mov	r7, ip
    4506:	40ba      	lsls	r2, r7
    4508:	1e57      	subs	r7, r2, #1
    450a:	41ba      	sbcs	r2, r7
    450c:	4313      	orrs	r3, r2
    450e:	0002      	movs	r2, r0
    4510:	40f2      	lsrs	r2, r6
    4512:	1aeb      	subs	r3, r5, r3
    4514:	429d      	cmp	r5, r3
    4516:	41b6      	sbcs	r6, r6
    4518:	001d      	movs	r5, r3
    451a:	1a8a      	subs	r2, r1, r2
    451c:	4276      	negs	r6, r6
    451e:	1b91      	subs	r1, r2, r6
    4520:	020b      	lsls	r3, r1, #8
    4522:	d531      	bpl.n	4588 <__aeabi_dadd+0x170>
    4524:	024a      	lsls	r2, r1, #9
    4526:	0a56      	lsrs	r6, r2, #9
    4528:	2e00      	cmp	r6, #0
    452a:	d100      	bne.n	452e <__aeabi_dadd+0x116>
    452c:	e0b4      	b.n	4698 <__aeabi_dadd+0x280>
    452e:	0030      	movs	r0, r6
    4530:	f001 fecc 	bl	62cc <__clzsi2>
    4534:	0003      	movs	r3, r0
    4536:	3b08      	subs	r3, #8
    4538:	2b1f      	cmp	r3, #31
    453a:	dd00      	ble.n	453e <__aeabi_dadd+0x126>
    453c:	e0b5      	b.n	46aa <__aeabi_dadd+0x292>
    453e:	2220      	movs	r2, #32
    4540:	0029      	movs	r1, r5
    4542:	1ad2      	subs	r2, r2, r3
    4544:	40d1      	lsrs	r1, r2
    4546:	409e      	lsls	r6, r3
    4548:	000a      	movs	r2, r1
    454a:	409d      	lsls	r5, r3
    454c:	4332      	orrs	r2, r6
    454e:	429c      	cmp	r4, r3
    4550:	dd00      	ble.n	4554 <__aeabi_dadd+0x13c>
    4552:	e0b1      	b.n	46b8 <__aeabi_dadd+0x2a0>
    4554:	1b1c      	subs	r4, r3, r4
    4556:	1c63      	adds	r3, r4, #1
    4558:	2b1f      	cmp	r3, #31
    455a:	dd00      	ble.n	455e <__aeabi_dadd+0x146>
    455c:	e0d5      	b.n	470a <__aeabi_dadd+0x2f2>
    455e:	2120      	movs	r1, #32
    4560:	0014      	movs	r4, r2
    4562:	0028      	movs	r0, r5
    4564:	1ac9      	subs	r1, r1, r3
    4566:	408c      	lsls	r4, r1
    4568:	40d8      	lsrs	r0, r3
    456a:	408d      	lsls	r5, r1
    456c:	4304      	orrs	r4, r0
    456e:	40da      	lsrs	r2, r3
    4570:	1e68      	subs	r0, r5, #1
    4572:	4185      	sbcs	r5, r0
    4574:	0011      	movs	r1, r2
    4576:	4325      	orrs	r5, r4
    4578:	2400      	movs	r4, #0
    457a:	e776      	b.n	446a <__aeabi_dadd+0x52>
    457c:	4641      	mov	r1, r8
    457e:	4331      	orrs	r1, r6
    4580:	d100      	bne.n	4584 <__aeabi_dadd+0x16c>
    4582:	e234      	b.n	49ee <__aeabi_dadd+0x5d6>
    4584:	0031      	movs	r1, r6
    4586:	4645      	mov	r5, r8
    4588:	076b      	lsls	r3, r5, #29
    458a:	d000      	beq.n	458e <__aeabi_dadd+0x176>
    458c:	e76f      	b.n	446e <__aeabi_dadd+0x56>
    458e:	4656      	mov	r6, sl
    4590:	0748      	lsls	r0, r1, #29
    4592:	08ed      	lsrs	r5, r5, #3
    4594:	08c9      	lsrs	r1, r1, #3
    4596:	4305      	orrs	r5, r0
    4598:	4b86      	ldr	r3, [pc, #536]	; (47b4 <__aeabi_dadd+0x39c>)
    459a:	429c      	cmp	r4, r3
    459c:	d035      	beq.n	460a <__aeabi_dadd+0x1f2>
    459e:	030a      	lsls	r2, r1, #12
    45a0:	0564      	lsls	r4, r4, #21
    45a2:	0b12      	lsrs	r2, r2, #12
    45a4:	0d64      	lsrs	r4, r4, #21
    45a6:	e77f      	b.n	44a8 <__aeabi_dadd+0x90>
    45a8:	4663      	mov	r3, ip
    45aa:	1ae3      	subs	r3, r4, r3
    45ac:	469b      	mov	fp, r3
    45ae:	2b00      	cmp	r3, #0
    45b0:	dc00      	bgt.n	45b4 <__aeabi_dadd+0x19c>
    45b2:	e08b      	b.n	46cc <__aeabi_dadd+0x2b4>
    45b4:	4667      	mov	r7, ip
    45b6:	2f00      	cmp	r7, #0
    45b8:	d03c      	beq.n	4634 <__aeabi_dadd+0x21c>
    45ba:	4f7e      	ldr	r7, [pc, #504]	; (47b4 <__aeabi_dadd+0x39c>)
    45bc:	42bc      	cmp	r4, r7
    45be:	d100      	bne.n	45c2 <__aeabi_dadd+0x1aa>
    45c0:	e753      	b.n	446a <__aeabi_dadd+0x52>
    45c2:	2780      	movs	r7, #128	; 0x80
    45c4:	043f      	lsls	r7, r7, #16
    45c6:	4338      	orrs	r0, r7
    45c8:	465b      	mov	r3, fp
    45ca:	2b38      	cmp	r3, #56	; 0x38
    45cc:	dc00      	bgt.n	45d0 <__aeabi_dadd+0x1b8>
    45ce:	e0f7      	b.n	47c0 <__aeabi_dadd+0x3a8>
    45d0:	4302      	orrs	r2, r0
    45d2:	1e50      	subs	r0, r2, #1
    45d4:	4182      	sbcs	r2, r0
    45d6:	2000      	movs	r0, #0
    45d8:	b2d2      	uxtb	r2, r2
    45da:	1953      	adds	r3, r2, r5
    45dc:	1842      	adds	r2, r0, r1
    45de:	42ab      	cmp	r3, r5
    45e0:	4189      	sbcs	r1, r1
    45e2:	001d      	movs	r5, r3
    45e4:	4249      	negs	r1, r1
    45e6:	1889      	adds	r1, r1, r2
    45e8:	020b      	lsls	r3, r1, #8
    45ea:	d5cd      	bpl.n	4588 <__aeabi_dadd+0x170>
    45ec:	4b71      	ldr	r3, [pc, #452]	; (47b4 <__aeabi_dadd+0x39c>)
    45ee:	3401      	adds	r4, #1
    45f0:	429c      	cmp	r4, r3
    45f2:	d100      	bne.n	45f6 <__aeabi_dadd+0x1de>
    45f4:	e13d      	b.n	4872 <__aeabi_dadd+0x45a>
    45f6:	2001      	movs	r0, #1
    45f8:	4a6f      	ldr	r2, [pc, #444]	; (47b8 <__aeabi_dadd+0x3a0>)
    45fa:	086b      	lsrs	r3, r5, #1
    45fc:	400a      	ands	r2, r1
    45fe:	4028      	ands	r0, r5
    4600:	4318      	orrs	r0, r3
    4602:	07d5      	lsls	r5, r2, #31
    4604:	4305      	orrs	r5, r0
    4606:	0851      	lsrs	r1, r2, #1
    4608:	e72f      	b.n	446a <__aeabi_dadd+0x52>
    460a:	002b      	movs	r3, r5
    460c:	430b      	orrs	r3, r1
    460e:	d100      	bne.n	4612 <__aeabi_dadd+0x1fa>
    4610:	e1cb      	b.n	49aa <__aeabi_dadd+0x592>
    4612:	2380      	movs	r3, #128	; 0x80
    4614:	031b      	lsls	r3, r3, #12
    4616:	430b      	orrs	r3, r1
    4618:	031a      	lsls	r2, r3, #12
    461a:	0b12      	lsrs	r2, r2, #12
    461c:	e744      	b.n	44a8 <__aeabi_dadd+0x90>
    461e:	3e01      	subs	r6, #1
    4620:	2e00      	cmp	r6, #0
    4622:	d16d      	bne.n	4700 <__aeabi_dadd+0x2e8>
    4624:	1aae      	subs	r6, r5, r2
    4626:	42b5      	cmp	r5, r6
    4628:	419b      	sbcs	r3, r3
    462a:	1a09      	subs	r1, r1, r0
    462c:	425b      	negs	r3, r3
    462e:	1ac9      	subs	r1, r1, r3
    4630:	0035      	movs	r5, r6
    4632:	e775      	b.n	4520 <__aeabi_dadd+0x108>
    4634:	0007      	movs	r7, r0
    4636:	4317      	orrs	r7, r2
    4638:	d100      	bne.n	463c <__aeabi_dadd+0x224>
    463a:	e716      	b.n	446a <__aeabi_dadd+0x52>
    463c:	2301      	movs	r3, #1
    463e:	425b      	negs	r3, r3
    4640:	469c      	mov	ip, r3
    4642:	44e3      	add	fp, ip
    4644:	465b      	mov	r3, fp
    4646:	2b00      	cmp	r3, #0
    4648:	d000      	beq.n	464c <__aeabi_dadd+0x234>
    464a:	e0e0      	b.n	480e <__aeabi_dadd+0x3f6>
    464c:	18aa      	adds	r2, r5, r2
    464e:	42aa      	cmp	r2, r5
    4650:	419b      	sbcs	r3, r3
    4652:	1809      	adds	r1, r1, r0
    4654:	425b      	negs	r3, r3
    4656:	1859      	adds	r1, r3, r1
    4658:	0015      	movs	r5, r2
    465a:	e7c5      	b.n	45e8 <__aeabi_dadd+0x1d0>
    465c:	2e00      	cmp	r6, #0
    465e:	d175      	bne.n	474c <__aeabi_dadd+0x334>
    4660:	1c66      	adds	r6, r4, #1
    4662:	0576      	lsls	r6, r6, #21
    4664:	0d76      	lsrs	r6, r6, #21
    4666:	2e01      	cmp	r6, #1
    4668:	dc00      	bgt.n	466c <__aeabi_dadd+0x254>
    466a:	e0f3      	b.n	4854 <__aeabi_dadd+0x43c>
    466c:	1aae      	subs	r6, r5, r2
    466e:	46b0      	mov	r8, r6
    4670:	4545      	cmp	r5, r8
    4672:	41bf      	sbcs	r7, r7
    4674:	1a0e      	subs	r6, r1, r0
    4676:	427f      	negs	r7, r7
    4678:	1bf6      	subs	r6, r6, r7
    467a:	0237      	lsls	r7, r6, #8
    467c:	d400      	bmi.n	4680 <__aeabi_dadd+0x268>
    467e:	e08f      	b.n	47a0 <__aeabi_dadd+0x388>
    4680:	1b55      	subs	r5, r2, r5
    4682:	42aa      	cmp	r2, r5
    4684:	41b6      	sbcs	r6, r6
    4686:	1a41      	subs	r1, r0, r1
    4688:	4276      	negs	r6, r6
    468a:	1b8e      	subs	r6, r1, r6
    468c:	469a      	mov	sl, r3
    468e:	e74b      	b.n	4528 <__aeabi_dadd+0x110>
    4690:	4656      	mov	r6, sl
    4692:	2200      	movs	r2, #0
    4694:	2500      	movs	r5, #0
    4696:	e707      	b.n	44a8 <__aeabi_dadd+0x90>
    4698:	0028      	movs	r0, r5
    469a:	f001 fe17 	bl	62cc <__clzsi2>
    469e:	3020      	adds	r0, #32
    46a0:	0003      	movs	r3, r0
    46a2:	3b08      	subs	r3, #8
    46a4:	2b1f      	cmp	r3, #31
    46a6:	dc00      	bgt.n	46aa <__aeabi_dadd+0x292>
    46a8:	e749      	b.n	453e <__aeabi_dadd+0x126>
    46aa:	002a      	movs	r2, r5
    46ac:	3828      	subs	r0, #40	; 0x28
    46ae:	4082      	lsls	r2, r0
    46b0:	2500      	movs	r5, #0
    46b2:	429c      	cmp	r4, r3
    46b4:	dc00      	bgt.n	46b8 <__aeabi_dadd+0x2a0>
    46b6:	e74d      	b.n	4554 <__aeabi_dadd+0x13c>
    46b8:	493f      	ldr	r1, [pc, #252]	; (47b8 <__aeabi_dadd+0x3a0>)
    46ba:	1ae4      	subs	r4, r4, r3
    46bc:	4011      	ands	r1, r2
    46be:	e6d4      	b.n	446a <__aeabi_dadd+0x52>
    46c0:	4302      	orrs	r2, r0
    46c2:	1e50      	subs	r0, r2, #1
    46c4:	4182      	sbcs	r2, r0
    46c6:	b2d3      	uxtb	r3, r2
    46c8:	2200      	movs	r2, #0
    46ca:	e722      	b.n	4512 <__aeabi_dadd+0xfa>
    46cc:	2b00      	cmp	r3, #0
    46ce:	d000      	beq.n	46d2 <__aeabi_dadd+0x2ba>
    46d0:	e0f3      	b.n	48ba <__aeabi_dadd+0x4a2>
    46d2:	1c63      	adds	r3, r4, #1
    46d4:	469c      	mov	ip, r3
    46d6:	055b      	lsls	r3, r3, #21
    46d8:	0d5b      	lsrs	r3, r3, #21
    46da:	2b01      	cmp	r3, #1
    46dc:	dc00      	bgt.n	46e0 <__aeabi_dadd+0x2c8>
    46de:	e09f      	b.n	4820 <__aeabi_dadd+0x408>
    46e0:	4b34      	ldr	r3, [pc, #208]	; (47b4 <__aeabi_dadd+0x39c>)
    46e2:	459c      	cmp	ip, r3
    46e4:	d100      	bne.n	46e8 <__aeabi_dadd+0x2d0>
    46e6:	e0c3      	b.n	4870 <__aeabi_dadd+0x458>
    46e8:	18aa      	adds	r2, r5, r2
    46ea:	1809      	adds	r1, r1, r0
    46ec:	42aa      	cmp	r2, r5
    46ee:	4180      	sbcs	r0, r0
    46f0:	4240      	negs	r0, r0
    46f2:	1841      	adds	r1, r0, r1
    46f4:	07cd      	lsls	r5, r1, #31
    46f6:	0852      	lsrs	r2, r2, #1
    46f8:	4315      	orrs	r5, r2
    46fa:	0849      	lsrs	r1, r1, #1
    46fc:	4664      	mov	r4, ip
    46fe:	e6b4      	b.n	446a <__aeabi_dadd+0x52>
    4700:	4b2c      	ldr	r3, [pc, #176]	; (47b4 <__aeabi_dadd+0x39c>)
    4702:	429c      	cmp	r4, r3
    4704:	d000      	beq.n	4708 <__aeabi_dadd+0x2f0>
    4706:	e6ec      	b.n	44e2 <__aeabi_dadd+0xca>
    4708:	e6af      	b.n	446a <__aeabi_dadd+0x52>
    470a:	0011      	movs	r1, r2
    470c:	3c1f      	subs	r4, #31
    470e:	40e1      	lsrs	r1, r4
    4710:	000c      	movs	r4, r1
    4712:	2b20      	cmp	r3, #32
    4714:	d100      	bne.n	4718 <__aeabi_dadd+0x300>
    4716:	e07f      	b.n	4818 <__aeabi_dadd+0x400>
    4718:	2140      	movs	r1, #64	; 0x40
    471a:	1acb      	subs	r3, r1, r3
    471c:	409a      	lsls	r2, r3
    471e:	4315      	orrs	r5, r2
    4720:	1e6a      	subs	r2, r5, #1
    4722:	4195      	sbcs	r5, r2
    4724:	2100      	movs	r1, #0
    4726:	4325      	orrs	r5, r4
    4728:	2400      	movs	r4, #0
    472a:	e72d      	b.n	4588 <__aeabi_dadd+0x170>
    472c:	0033      	movs	r3, r6
    472e:	0007      	movs	r7, r0
    4730:	3b20      	subs	r3, #32
    4732:	40df      	lsrs	r7, r3
    4734:	003b      	movs	r3, r7
    4736:	2e20      	cmp	r6, #32
    4738:	d070      	beq.n	481c <__aeabi_dadd+0x404>
    473a:	2740      	movs	r7, #64	; 0x40
    473c:	1bbe      	subs	r6, r7, r6
    473e:	40b0      	lsls	r0, r6
    4740:	4302      	orrs	r2, r0
    4742:	1e50      	subs	r0, r2, #1
    4744:	4182      	sbcs	r2, r0
    4746:	4313      	orrs	r3, r2
    4748:	2200      	movs	r2, #0
    474a:	e6e2      	b.n	4512 <__aeabi_dadd+0xfa>
    474c:	2c00      	cmp	r4, #0
    474e:	d04f      	beq.n	47f0 <__aeabi_dadd+0x3d8>
    4750:	4c18      	ldr	r4, [pc, #96]	; (47b4 <__aeabi_dadd+0x39c>)
    4752:	45a4      	cmp	ip, r4
    4754:	d100      	bne.n	4758 <__aeabi_dadd+0x340>
    4756:	e0ab      	b.n	48b0 <__aeabi_dadd+0x498>
    4758:	2480      	movs	r4, #128	; 0x80
    475a:	0424      	lsls	r4, r4, #16
    475c:	4276      	negs	r6, r6
    475e:	4321      	orrs	r1, r4
    4760:	2e38      	cmp	r6, #56	; 0x38
    4762:	dd00      	ble.n	4766 <__aeabi_dadd+0x34e>
    4764:	e0df      	b.n	4926 <__aeabi_dadd+0x50e>
    4766:	2e1f      	cmp	r6, #31
    4768:	dd00      	ble.n	476c <__aeabi_dadd+0x354>
    476a:	e143      	b.n	49f4 <__aeabi_dadd+0x5dc>
    476c:	2720      	movs	r7, #32
    476e:	1bbc      	subs	r4, r7, r6
    4770:	46a1      	mov	r9, r4
    4772:	000c      	movs	r4, r1
    4774:	464f      	mov	r7, r9
    4776:	40bc      	lsls	r4, r7
    4778:	46a0      	mov	r8, r4
    477a:	002c      	movs	r4, r5
    477c:	4647      	mov	r7, r8
    477e:	40f4      	lsrs	r4, r6
    4780:	433c      	orrs	r4, r7
    4782:	464f      	mov	r7, r9
    4784:	40bd      	lsls	r5, r7
    4786:	1e6f      	subs	r7, r5, #1
    4788:	41bd      	sbcs	r5, r7
    478a:	40f1      	lsrs	r1, r6
    478c:	432c      	orrs	r4, r5
    478e:	1b15      	subs	r5, r2, r4
    4790:	42aa      	cmp	r2, r5
    4792:	4192      	sbcs	r2, r2
    4794:	1a41      	subs	r1, r0, r1
    4796:	4252      	negs	r2, r2
    4798:	1a89      	subs	r1, r1, r2
    479a:	4664      	mov	r4, ip
    479c:	469a      	mov	sl, r3
    479e:	e6bf      	b.n	4520 <__aeabi_dadd+0x108>
    47a0:	4641      	mov	r1, r8
    47a2:	4645      	mov	r5, r8
    47a4:	4331      	orrs	r1, r6
    47a6:	d000      	beq.n	47aa <__aeabi_dadd+0x392>
    47a8:	e6be      	b.n	4528 <__aeabi_dadd+0x110>
    47aa:	2600      	movs	r6, #0
    47ac:	2400      	movs	r4, #0
    47ae:	2500      	movs	r5, #0
    47b0:	e6f2      	b.n	4598 <__aeabi_dadd+0x180>
    47b2:	46c0      	nop			; (mov r8, r8)
    47b4:	000007ff 	.word	0x000007ff
    47b8:	ff7fffff 	.word	0xff7fffff
    47bc:	800fffff 	.word	0x800fffff
    47c0:	2b1f      	cmp	r3, #31
    47c2:	dc59      	bgt.n	4878 <__aeabi_dadd+0x460>
    47c4:	2720      	movs	r7, #32
    47c6:	1aff      	subs	r7, r7, r3
    47c8:	46bc      	mov	ip, r7
    47ca:	0007      	movs	r7, r0
    47cc:	4663      	mov	r3, ip
    47ce:	409f      	lsls	r7, r3
    47d0:	465b      	mov	r3, fp
    47d2:	46b9      	mov	r9, r7
    47d4:	0017      	movs	r7, r2
    47d6:	40df      	lsrs	r7, r3
    47d8:	46b8      	mov	r8, r7
    47da:	464f      	mov	r7, r9
    47dc:	4643      	mov	r3, r8
    47de:	431f      	orrs	r7, r3
    47e0:	4663      	mov	r3, ip
    47e2:	409a      	lsls	r2, r3
    47e4:	1e53      	subs	r3, r2, #1
    47e6:	419a      	sbcs	r2, r3
    47e8:	465b      	mov	r3, fp
    47ea:	433a      	orrs	r2, r7
    47ec:	40d8      	lsrs	r0, r3
    47ee:	e6f4      	b.n	45da <__aeabi_dadd+0x1c2>
    47f0:	000c      	movs	r4, r1
    47f2:	432c      	orrs	r4, r5
    47f4:	d05c      	beq.n	48b0 <__aeabi_dadd+0x498>
    47f6:	43f6      	mvns	r6, r6
    47f8:	2e00      	cmp	r6, #0
    47fa:	d155      	bne.n	48a8 <__aeabi_dadd+0x490>
    47fc:	1b55      	subs	r5, r2, r5
    47fe:	42aa      	cmp	r2, r5
    4800:	41a4      	sbcs	r4, r4
    4802:	1a41      	subs	r1, r0, r1
    4804:	4264      	negs	r4, r4
    4806:	1b09      	subs	r1, r1, r4
    4808:	469a      	mov	sl, r3
    480a:	4664      	mov	r4, ip
    480c:	e688      	b.n	4520 <__aeabi_dadd+0x108>
    480e:	4f96      	ldr	r7, [pc, #600]	; (4a68 <__aeabi_dadd+0x650>)
    4810:	42bc      	cmp	r4, r7
    4812:	d000      	beq.n	4816 <__aeabi_dadd+0x3fe>
    4814:	e6d8      	b.n	45c8 <__aeabi_dadd+0x1b0>
    4816:	e628      	b.n	446a <__aeabi_dadd+0x52>
    4818:	2200      	movs	r2, #0
    481a:	e780      	b.n	471e <__aeabi_dadd+0x306>
    481c:	2000      	movs	r0, #0
    481e:	e78f      	b.n	4740 <__aeabi_dadd+0x328>
    4820:	000b      	movs	r3, r1
    4822:	432b      	orrs	r3, r5
    4824:	2c00      	cmp	r4, #0
    4826:	d000      	beq.n	482a <__aeabi_dadd+0x412>
    4828:	e0c2      	b.n	49b0 <__aeabi_dadd+0x598>
    482a:	2b00      	cmp	r3, #0
    482c:	d100      	bne.n	4830 <__aeabi_dadd+0x418>
    482e:	e101      	b.n	4a34 <__aeabi_dadd+0x61c>
    4830:	0003      	movs	r3, r0
    4832:	4313      	orrs	r3, r2
    4834:	d100      	bne.n	4838 <__aeabi_dadd+0x420>
    4836:	e618      	b.n	446a <__aeabi_dadd+0x52>
    4838:	18ab      	adds	r3, r5, r2
    483a:	42ab      	cmp	r3, r5
    483c:	41b6      	sbcs	r6, r6
    483e:	1809      	adds	r1, r1, r0
    4840:	4276      	negs	r6, r6
    4842:	1871      	adds	r1, r6, r1
    4844:	020a      	lsls	r2, r1, #8
    4846:	d400      	bmi.n	484a <__aeabi_dadd+0x432>
    4848:	e109      	b.n	4a5e <__aeabi_dadd+0x646>
    484a:	4a88      	ldr	r2, [pc, #544]	; (4a6c <__aeabi_dadd+0x654>)
    484c:	001d      	movs	r5, r3
    484e:	4011      	ands	r1, r2
    4850:	4664      	mov	r4, ip
    4852:	e60a      	b.n	446a <__aeabi_dadd+0x52>
    4854:	2c00      	cmp	r4, #0
    4856:	d15b      	bne.n	4910 <__aeabi_dadd+0x4f8>
    4858:	000e      	movs	r6, r1
    485a:	432e      	orrs	r6, r5
    485c:	d000      	beq.n	4860 <__aeabi_dadd+0x448>
    485e:	e08a      	b.n	4976 <__aeabi_dadd+0x55e>
    4860:	0001      	movs	r1, r0
    4862:	4311      	orrs	r1, r2
    4864:	d100      	bne.n	4868 <__aeabi_dadd+0x450>
    4866:	e0c2      	b.n	49ee <__aeabi_dadd+0x5d6>
    4868:	0001      	movs	r1, r0
    486a:	0015      	movs	r5, r2
    486c:	469a      	mov	sl, r3
    486e:	e5fc      	b.n	446a <__aeabi_dadd+0x52>
    4870:	4664      	mov	r4, ip
    4872:	2100      	movs	r1, #0
    4874:	2500      	movs	r5, #0
    4876:	e68f      	b.n	4598 <__aeabi_dadd+0x180>
    4878:	2320      	movs	r3, #32
    487a:	425b      	negs	r3, r3
    487c:	469c      	mov	ip, r3
    487e:	44dc      	add	ip, fp
    4880:	4663      	mov	r3, ip
    4882:	0007      	movs	r7, r0
    4884:	40df      	lsrs	r7, r3
    4886:	465b      	mov	r3, fp
    4888:	46bc      	mov	ip, r7
    488a:	2b20      	cmp	r3, #32
    488c:	d100      	bne.n	4890 <__aeabi_dadd+0x478>
    488e:	e0ac      	b.n	49ea <__aeabi_dadd+0x5d2>
    4890:	2340      	movs	r3, #64	; 0x40
    4892:	465f      	mov	r7, fp
    4894:	1bdb      	subs	r3, r3, r7
    4896:	4098      	lsls	r0, r3
    4898:	4302      	orrs	r2, r0
    489a:	1e50      	subs	r0, r2, #1
    489c:	4182      	sbcs	r2, r0
    489e:	4663      	mov	r3, ip
    48a0:	4313      	orrs	r3, r2
    48a2:	001a      	movs	r2, r3
    48a4:	2000      	movs	r0, #0
    48a6:	e698      	b.n	45da <__aeabi_dadd+0x1c2>
    48a8:	4c6f      	ldr	r4, [pc, #444]	; (4a68 <__aeabi_dadd+0x650>)
    48aa:	45a4      	cmp	ip, r4
    48ac:	d000      	beq.n	48b0 <__aeabi_dadd+0x498>
    48ae:	e757      	b.n	4760 <__aeabi_dadd+0x348>
    48b0:	0001      	movs	r1, r0
    48b2:	0015      	movs	r5, r2
    48b4:	4664      	mov	r4, ip
    48b6:	469a      	mov	sl, r3
    48b8:	e5d7      	b.n	446a <__aeabi_dadd+0x52>
    48ba:	2c00      	cmp	r4, #0
    48bc:	d139      	bne.n	4932 <__aeabi_dadd+0x51a>
    48be:	000c      	movs	r4, r1
    48c0:	432c      	orrs	r4, r5
    48c2:	d06e      	beq.n	49a2 <__aeabi_dadd+0x58a>
    48c4:	43db      	mvns	r3, r3
    48c6:	2b00      	cmp	r3, #0
    48c8:	d01a      	beq.n	4900 <__aeabi_dadd+0x4e8>
    48ca:	4c67      	ldr	r4, [pc, #412]	; (4a68 <__aeabi_dadd+0x650>)
    48cc:	45a4      	cmp	ip, r4
    48ce:	d068      	beq.n	49a2 <__aeabi_dadd+0x58a>
    48d0:	2b38      	cmp	r3, #56	; 0x38
    48d2:	dd00      	ble.n	48d6 <__aeabi_dadd+0x4be>
    48d4:	e0a4      	b.n	4a20 <__aeabi_dadd+0x608>
    48d6:	2b1f      	cmp	r3, #31
    48d8:	dd00      	ble.n	48dc <__aeabi_dadd+0x4c4>
    48da:	e0ae      	b.n	4a3a <__aeabi_dadd+0x622>
    48dc:	2420      	movs	r4, #32
    48de:	000f      	movs	r7, r1
    48e0:	1ae4      	subs	r4, r4, r3
    48e2:	40a7      	lsls	r7, r4
    48e4:	46b9      	mov	r9, r7
    48e6:	002f      	movs	r7, r5
    48e8:	40df      	lsrs	r7, r3
    48ea:	46b8      	mov	r8, r7
    48ec:	46a3      	mov	fp, r4
    48ee:	464f      	mov	r7, r9
    48f0:	4644      	mov	r4, r8
    48f2:	4327      	orrs	r7, r4
    48f4:	465c      	mov	r4, fp
    48f6:	40a5      	lsls	r5, r4
    48f8:	1e6c      	subs	r4, r5, #1
    48fa:	41a5      	sbcs	r5, r4
    48fc:	40d9      	lsrs	r1, r3
    48fe:	433d      	orrs	r5, r7
    4900:	18ad      	adds	r5, r5, r2
    4902:	4295      	cmp	r5, r2
    4904:	419b      	sbcs	r3, r3
    4906:	1809      	adds	r1, r1, r0
    4908:	425b      	negs	r3, r3
    490a:	1859      	adds	r1, r3, r1
    490c:	4664      	mov	r4, ip
    490e:	e66b      	b.n	45e8 <__aeabi_dadd+0x1d0>
    4910:	000c      	movs	r4, r1
    4912:	432c      	orrs	r4, r5
    4914:	d115      	bne.n	4942 <__aeabi_dadd+0x52a>
    4916:	0001      	movs	r1, r0
    4918:	4311      	orrs	r1, r2
    491a:	d07b      	beq.n	4a14 <__aeabi_dadd+0x5fc>
    491c:	0001      	movs	r1, r0
    491e:	0015      	movs	r5, r2
    4920:	469a      	mov	sl, r3
    4922:	4c51      	ldr	r4, [pc, #324]	; (4a68 <__aeabi_dadd+0x650>)
    4924:	e5a1      	b.n	446a <__aeabi_dadd+0x52>
    4926:	430d      	orrs	r5, r1
    4928:	1e69      	subs	r1, r5, #1
    492a:	418d      	sbcs	r5, r1
    492c:	2100      	movs	r1, #0
    492e:	b2ec      	uxtb	r4, r5
    4930:	e72d      	b.n	478e <__aeabi_dadd+0x376>
    4932:	4c4d      	ldr	r4, [pc, #308]	; (4a68 <__aeabi_dadd+0x650>)
    4934:	45a4      	cmp	ip, r4
    4936:	d034      	beq.n	49a2 <__aeabi_dadd+0x58a>
    4938:	2480      	movs	r4, #128	; 0x80
    493a:	0424      	lsls	r4, r4, #16
    493c:	425b      	negs	r3, r3
    493e:	4321      	orrs	r1, r4
    4940:	e7c6      	b.n	48d0 <__aeabi_dadd+0x4b8>
    4942:	0004      	movs	r4, r0
    4944:	4314      	orrs	r4, r2
    4946:	d04e      	beq.n	49e6 <__aeabi_dadd+0x5ce>
    4948:	08ed      	lsrs	r5, r5, #3
    494a:	074c      	lsls	r4, r1, #29
    494c:	432c      	orrs	r4, r5
    494e:	2580      	movs	r5, #128	; 0x80
    4950:	08c9      	lsrs	r1, r1, #3
    4952:	032d      	lsls	r5, r5, #12
    4954:	4229      	tst	r1, r5
    4956:	d008      	beq.n	496a <__aeabi_dadd+0x552>
    4958:	08c6      	lsrs	r6, r0, #3
    495a:	422e      	tst	r6, r5
    495c:	d105      	bne.n	496a <__aeabi_dadd+0x552>
    495e:	08d2      	lsrs	r2, r2, #3
    4960:	0741      	lsls	r1, r0, #29
    4962:	4311      	orrs	r1, r2
    4964:	000c      	movs	r4, r1
    4966:	469a      	mov	sl, r3
    4968:	0031      	movs	r1, r6
    496a:	0f62      	lsrs	r2, r4, #29
    496c:	00c9      	lsls	r1, r1, #3
    496e:	00e5      	lsls	r5, r4, #3
    4970:	4311      	orrs	r1, r2
    4972:	4c3d      	ldr	r4, [pc, #244]	; (4a68 <__aeabi_dadd+0x650>)
    4974:	e579      	b.n	446a <__aeabi_dadd+0x52>
    4976:	0006      	movs	r6, r0
    4978:	4316      	orrs	r6, r2
    497a:	d100      	bne.n	497e <__aeabi_dadd+0x566>
    497c:	e575      	b.n	446a <__aeabi_dadd+0x52>
    497e:	1aae      	subs	r6, r5, r2
    4980:	46b0      	mov	r8, r6
    4982:	4545      	cmp	r5, r8
    4984:	41bf      	sbcs	r7, r7
    4986:	1a0e      	subs	r6, r1, r0
    4988:	427f      	negs	r7, r7
    498a:	1bf6      	subs	r6, r6, r7
    498c:	0237      	lsls	r7, r6, #8
    498e:	d400      	bmi.n	4992 <__aeabi_dadd+0x57a>
    4990:	e5f4      	b.n	457c <__aeabi_dadd+0x164>
    4992:	1b55      	subs	r5, r2, r5
    4994:	42aa      	cmp	r2, r5
    4996:	41b6      	sbcs	r6, r6
    4998:	1a41      	subs	r1, r0, r1
    499a:	4276      	negs	r6, r6
    499c:	1b89      	subs	r1, r1, r6
    499e:	469a      	mov	sl, r3
    49a0:	e563      	b.n	446a <__aeabi_dadd+0x52>
    49a2:	0001      	movs	r1, r0
    49a4:	0015      	movs	r5, r2
    49a6:	4664      	mov	r4, ip
    49a8:	e55f      	b.n	446a <__aeabi_dadd+0x52>
    49aa:	2200      	movs	r2, #0
    49ac:	2500      	movs	r5, #0
    49ae:	e57b      	b.n	44a8 <__aeabi_dadd+0x90>
    49b0:	2b00      	cmp	r3, #0
    49b2:	d03b      	beq.n	4a2c <__aeabi_dadd+0x614>
    49b4:	0003      	movs	r3, r0
    49b6:	4313      	orrs	r3, r2
    49b8:	d015      	beq.n	49e6 <__aeabi_dadd+0x5ce>
    49ba:	08ed      	lsrs	r5, r5, #3
    49bc:	074b      	lsls	r3, r1, #29
    49be:	432b      	orrs	r3, r5
    49c0:	2580      	movs	r5, #128	; 0x80
    49c2:	08c9      	lsrs	r1, r1, #3
    49c4:	032d      	lsls	r5, r5, #12
    49c6:	4229      	tst	r1, r5
    49c8:	d007      	beq.n	49da <__aeabi_dadd+0x5c2>
    49ca:	08c4      	lsrs	r4, r0, #3
    49cc:	422c      	tst	r4, r5
    49ce:	d104      	bne.n	49da <__aeabi_dadd+0x5c2>
    49d0:	0741      	lsls	r1, r0, #29
    49d2:	000b      	movs	r3, r1
    49d4:	0021      	movs	r1, r4
    49d6:	08d2      	lsrs	r2, r2, #3
    49d8:	4313      	orrs	r3, r2
    49da:	00c9      	lsls	r1, r1, #3
    49dc:	0f5a      	lsrs	r2, r3, #29
    49de:	4311      	orrs	r1, r2
    49e0:	00dd      	lsls	r5, r3, #3
    49e2:	4c21      	ldr	r4, [pc, #132]	; (4a68 <__aeabi_dadd+0x650>)
    49e4:	e541      	b.n	446a <__aeabi_dadd+0x52>
    49e6:	4c20      	ldr	r4, [pc, #128]	; (4a68 <__aeabi_dadd+0x650>)
    49e8:	e53f      	b.n	446a <__aeabi_dadd+0x52>
    49ea:	2000      	movs	r0, #0
    49ec:	e754      	b.n	4898 <__aeabi_dadd+0x480>
    49ee:	2600      	movs	r6, #0
    49f0:	2500      	movs	r5, #0
    49f2:	e5d1      	b.n	4598 <__aeabi_dadd+0x180>
    49f4:	0034      	movs	r4, r6
    49f6:	000f      	movs	r7, r1
    49f8:	3c20      	subs	r4, #32
    49fa:	40e7      	lsrs	r7, r4
    49fc:	003c      	movs	r4, r7
    49fe:	2e20      	cmp	r6, #32
    4a00:	d02b      	beq.n	4a5a <__aeabi_dadd+0x642>
    4a02:	2740      	movs	r7, #64	; 0x40
    4a04:	1bbe      	subs	r6, r7, r6
    4a06:	40b1      	lsls	r1, r6
    4a08:	430d      	orrs	r5, r1
    4a0a:	1e69      	subs	r1, r5, #1
    4a0c:	418d      	sbcs	r5, r1
    4a0e:	2100      	movs	r1, #0
    4a10:	432c      	orrs	r4, r5
    4a12:	e6bc      	b.n	478e <__aeabi_dadd+0x376>
    4a14:	2180      	movs	r1, #128	; 0x80
    4a16:	2600      	movs	r6, #0
    4a18:	0309      	lsls	r1, r1, #12
    4a1a:	4c13      	ldr	r4, [pc, #76]	; (4a68 <__aeabi_dadd+0x650>)
    4a1c:	2500      	movs	r5, #0
    4a1e:	e5bb      	b.n	4598 <__aeabi_dadd+0x180>
    4a20:	430d      	orrs	r5, r1
    4a22:	1e69      	subs	r1, r5, #1
    4a24:	418d      	sbcs	r5, r1
    4a26:	2100      	movs	r1, #0
    4a28:	b2ed      	uxtb	r5, r5
    4a2a:	e769      	b.n	4900 <__aeabi_dadd+0x4e8>
    4a2c:	0001      	movs	r1, r0
    4a2e:	0015      	movs	r5, r2
    4a30:	4c0d      	ldr	r4, [pc, #52]	; (4a68 <__aeabi_dadd+0x650>)
    4a32:	e51a      	b.n	446a <__aeabi_dadd+0x52>
    4a34:	0001      	movs	r1, r0
    4a36:	0015      	movs	r5, r2
    4a38:	e517      	b.n	446a <__aeabi_dadd+0x52>
    4a3a:	001c      	movs	r4, r3
    4a3c:	000f      	movs	r7, r1
    4a3e:	3c20      	subs	r4, #32
    4a40:	40e7      	lsrs	r7, r4
    4a42:	003c      	movs	r4, r7
    4a44:	2b20      	cmp	r3, #32
    4a46:	d00c      	beq.n	4a62 <__aeabi_dadd+0x64a>
    4a48:	2740      	movs	r7, #64	; 0x40
    4a4a:	1afb      	subs	r3, r7, r3
    4a4c:	4099      	lsls	r1, r3
    4a4e:	430d      	orrs	r5, r1
    4a50:	1e69      	subs	r1, r5, #1
    4a52:	418d      	sbcs	r5, r1
    4a54:	2100      	movs	r1, #0
    4a56:	4325      	orrs	r5, r4
    4a58:	e752      	b.n	4900 <__aeabi_dadd+0x4e8>
    4a5a:	2100      	movs	r1, #0
    4a5c:	e7d4      	b.n	4a08 <__aeabi_dadd+0x5f0>
    4a5e:	001d      	movs	r5, r3
    4a60:	e592      	b.n	4588 <__aeabi_dadd+0x170>
    4a62:	2100      	movs	r1, #0
    4a64:	e7f3      	b.n	4a4e <__aeabi_dadd+0x636>
    4a66:	46c0      	nop			; (mov r8, r8)
    4a68:	000007ff 	.word	0x000007ff
    4a6c:	ff7fffff 	.word	0xff7fffff

00004a70 <__aeabi_ddiv>:
    4a70:	b5f0      	push	{r4, r5, r6, r7, lr}
    4a72:	4656      	mov	r6, sl
    4a74:	464d      	mov	r5, r9
    4a76:	4644      	mov	r4, r8
    4a78:	465f      	mov	r7, fp
    4a7a:	b4f0      	push	{r4, r5, r6, r7}
    4a7c:	001d      	movs	r5, r3
    4a7e:	030e      	lsls	r6, r1, #12
    4a80:	004c      	lsls	r4, r1, #1
    4a82:	0fcb      	lsrs	r3, r1, #31
    4a84:	b087      	sub	sp, #28
    4a86:	0007      	movs	r7, r0
    4a88:	4692      	mov	sl, r2
    4a8a:	4681      	mov	r9, r0
    4a8c:	0b36      	lsrs	r6, r6, #12
    4a8e:	0d64      	lsrs	r4, r4, #21
    4a90:	4698      	mov	r8, r3
    4a92:	d06a      	beq.n	4b6a <__aeabi_ddiv+0xfa>
    4a94:	4b6d      	ldr	r3, [pc, #436]	; (4c4c <__aeabi_ddiv+0x1dc>)
    4a96:	429c      	cmp	r4, r3
    4a98:	d035      	beq.n	4b06 <__aeabi_ddiv+0x96>
    4a9a:	2280      	movs	r2, #128	; 0x80
    4a9c:	0f43      	lsrs	r3, r0, #29
    4a9e:	0412      	lsls	r2, r2, #16
    4aa0:	4313      	orrs	r3, r2
    4aa2:	00f6      	lsls	r6, r6, #3
    4aa4:	431e      	orrs	r6, r3
    4aa6:	00c3      	lsls	r3, r0, #3
    4aa8:	4699      	mov	r9, r3
    4aaa:	4b69      	ldr	r3, [pc, #420]	; (4c50 <__aeabi_ddiv+0x1e0>)
    4aac:	2700      	movs	r7, #0
    4aae:	469c      	mov	ip, r3
    4ab0:	2300      	movs	r3, #0
    4ab2:	4464      	add	r4, ip
    4ab4:	9302      	str	r3, [sp, #8]
    4ab6:	032b      	lsls	r3, r5, #12
    4ab8:	0068      	lsls	r0, r5, #1
    4aba:	0b1b      	lsrs	r3, r3, #12
    4abc:	0fed      	lsrs	r5, r5, #31
    4abe:	4651      	mov	r1, sl
    4ac0:	469b      	mov	fp, r3
    4ac2:	0d40      	lsrs	r0, r0, #21
    4ac4:	9500      	str	r5, [sp, #0]
    4ac6:	d100      	bne.n	4aca <__aeabi_ddiv+0x5a>
    4ac8:	e078      	b.n	4bbc <__aeabi_ddiv+0x14c>
    4aca:	4b60      	ldr	r3, [pc, #384]	; (4c4c <__aeabi_ddiv+0x1dc>)
    4acc:	4298      	cmp	r0, r3
    4ace:	d06c      	beq.n	4baa <__aeabi_ddiv+0x13a>
    4ad0:	465b      	mov	r3, fp
    4ad2:	00da      	lsls	r2, r3, #3
    4ad4:	0f4b      	lsrs	r3, r1, #29
    4ad6:	2180      	movs	r1, #128	; 0x80
    4ad8:	0409      	lsls	r1, r1, #16
    4ada:	430b      	orrs	r3, r1
    4adc:	4313      	orrs	r3, r2
    4ade:	469b      	mov	fp, r3
    4ae0:	4653      	mov	r3, sl
    4ae2:	00d9      	lsls	r1, r3, #3
    4ae4:	4b5a      	ldr	r3, [pc, #360]	; (4c50 <__aeabi_ddiv+0x1e0>)
    4ae6:	469c      	mov	ip, r3
    4ae8:	2300      	movs	r3, #0
    4aea:	4460      	add	r0, ip
    4aec:	4642      	mov	r2, r8
    4aee:	1a20      	subs	r0, r4, r0
    4af0:	406a      	eors	r2, r5
    4af2:	4692      	mov	sl, r2
    4af4:	9001      	str	r0, [sp, #4]
    4af6:	431f      	orrs	r7, r3
    4af8:	2f0f      	cmp	r7, #15
    4afa:	d900      	bls.n	4afe <__aeabi_ddiv+0x8e>
    4afc:	e0b0      	b.n	4c60 <__aeabi_ddiv+0x1f0>
    4afe:	4855      	ldr	r0, [pc, #340]	; (4c54 <__aeabi_ddiv+0x1e4>)
    4b00:	00bf      	lsls	r7, r7, #2
    4b02:	59c0      	ldr	r0, [r0, r7]
    4b04:	4687      	mov	pc, r0
    4b06:	4337      	orrs	r7, r6
    4b08:	d000      	beq.n	4b0c <__aeabi_ddiv+0x9c>
    4b0a:	e088      	b.n	4c1e <__aeabi_ddiv+0x1ae>
    4b0c:	2300      	movs	r3, #0
    4b0e:	4699      	mov	r9, r3
    4b10:	3302      	adds	r3, #2
    4b12:	2708      	movs	r7, #8
    4b14:	2600      	movs	r6, #0
    4b16:	9302      	str	r3, [sp, #8]
    4b18:	e7cd      	b.n	4ab6 <__aeabi_ddiv+0x46>
    4b1a:	4643      	mov	r3, r8
    4b1c:	46b3      	mov	fp, r6
    4b1e:	4649      	mov	r1, r9
    4b20:	9300      	str	r3, [sp, #0]
    4b22:	9b02      	ldr	r3, [sp, #8]
    4b24:	9a00      	ldr	r2, [sp, #0]
    4b26:	4692      	mov	sl, r2
    4b28:	2b02      	cmp	r3, #2
    4b2a:	d000      	beq.n	4b2e <__aeabi_ddiv+0xbe>
    4b2c:	e1bf      	b.n	4eae <__aeabi_ddiv+0x43e>
    4b2e:	2100      	movs	r1, #0
    4b30:	4653      	mov	r3, sl
    4b32:	2201      	movs	r2, #1
    4b34:	2600      	movs	r6, #0
    4b36:	4689      	mov	r9, r1
    4b38:	401a      	ands	r2, r3
    4b3a:	4b44      	ldr	r3, [pc, #272]	; (4c4c <__aeabi_ddiv+0x1dc>)
    4b3c:	2100      	movs	r1, #0
    4b3e:	0336      	lsls	r6, r6, #12
    4b40:	0d0c      	lsrs	r4, r1, #20
    4b42:	0524      	lsls	r4, r4, #20
    4b44:	0b36      	lsrs	r6, r6, #12
    4b46:	4326      	orrs	r6, r4
    4b48:	4c43      	ldr	r4, [pc, #268]	; (4c58 <__aeabi_ddiv+0x1e8>)
    4b4a:	051b      	lsls	r3, r3, #20
    4b4c:	4026      	ands	r6, r4
    4b4e:	431e      	orrs	r6, r3
    4b50:	0076      	lsls	r6, r6, #1
    4b52:	07d2      	lsls	r2, r2, #31
    4b54:	0876      	lsrs	r6, r6, #1
    4b56:	4316      	orrs	r6, r2
    4b58:	4648      	mov	r0, r9
    4b5a:	0031      	movs	r1, r6
    4b5c:	b007      	add	sp, #28
    4b5e:	bc3c      	pop	{r2, r3, r4, r5}
    4b60:	4690      	mov	r8, r2
    4b62:	4699      	mov	r9, r3
    4b64:	46a2      	mov	sl, r4
    4b66:	46ab      	mov	fp, r5
    4b68:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4b6a:	0033      	movs	r3, r6
    4b6c:	4303      	orrs	r3, r0
    4b6e:	d04f      	beq.n	4c10 <__aeabi_ddiv+0x1a0>
    4b70:	2e00      	cmp	r6, #0
    4b72:	d100      	bne.n	4b76 <__aeabi_ddiv+0x106>
    4b74:	e1bc      	b.n	4ef0 <__aeabi_ddiv+0x480>
    4b76:	0030      	movs	r0, r6
    4b78:	f001 fba8 	bl	62cc <__clzsi2>
    4b7c:	0003      	movs	r3, r0
    4b7e:	3b0b      	subs	r3, #11
    4b80:	2b1c      	cmp	r3, #28
    4b82:	dd00      	ble.n	4b86 <__aeabi_ddiv+0x116>
    4b84:	e1ad      	b.n	4ee2 <__aeabi_ddiv+0x472>
    4b86:	221d      	movs	r2, #29
    4b88:	0001      	movs	r1, r0
    4b8a:	1ad3      	subs	r3, r2, r3
    4b8c:	3908      	subs	r1, #8
    4b8e:	003a      	movs	r2, r7
    4b90:	408f      	lsls	r7, r1
    4b92:	408e      	lsls	r6, r1
    4b94:	40da      	lsrs	r2, r3
    4b96:	46b9      	mov	r9, r7
    4b98:	4316      	orrs	r6, r2
    4b9a:	4b30      	ldr	r3, [pc, #192]	; (4c5c <__aeabi_ddiv+0x1ec>)
    4b9c:	2700      	movs	r7, #0
    4b9e:	469c      	mov	ip, r3
    4ba0:	2300      	movs	r3, #0
    4ba2:	4460      	add	r0, ip
    4ba4:	4244      	negs	r4, r0
    4ba6:	9302      	str	r3, [sp, #8]
    4ba8:	e785      	b.n	4ab6 <__aeabi_ddiv+0x46>
    4baa:	4653      	mov	r3, sl
    4bac:	465a      	mov	r2, fp
    4bae:	4313      	orrs	r3, r2
    4bb0:	d12c      	bne.n	4c0c <__aeabi_ddiv+0x19c>
    4bb2:	2300      	movs	r3, #0
    4bb4:	2100      	movs	r1, #0
    4bb6:	469b      	mov	fp, r3
    4bb8:	3302      	adds	r3, #2
    4bba:	e797      	b.n	4aec <__aeabi_ddiv+0x7c>
    4bbc:	430b      	orrs	r3, r1
    4bbe:	d020      	beq.n	4c02 <__aeabi_ddiv+0x192>
    4bc0:	465b      	mov	r3, fp
    4bc2:	2b00      	cmp	r3, #0
    4bc4:	d100      	bne.n	4bc8 <__aeabi_ddiv+0x158>
    4bc6:	e19e      	b.n	4f06 <__aeabi_ddiv+0x496>
    4bc8:	4658      	mov	r0, fp
    4bca:	f001 fb7f 	bl	62cc <__clzsi2>
    4bce:	0003      	movs	r3, r0
    4bd0:	3b0b      	subs	r3, #11
    4bd2:	2b1c      	cmp	r3, #28
    4bd4:	dd00      	ble.n	4bd8 <__aeabi_ddiv+0x168>
    4bd6:	e18f      	b.n	4ef8 <__aeabi_ddiv+0x488>
    4bd8:	0002      	movs	r2, r0
    4bda:	4659      	mov	r1, fp
    4bdc:	3a08      	subs	r2, #8
    4bde:	4091      	lsls	r1, r2
    4be0:	468b      	mov	fp, r1
    4be2:	211d      	movs	r1, #29
    4be4:	1acb      	subs	r3, r1, r3
    4be6:	4651      	mov	r1, sl
    4be8:	40d9      	lsrs	r1, r3
    4bea:	000b      	movs	r3, r1
    4bec:	4659      	mov	r1, fp
    4bee:	430b      	orrs	r3, r1
    4bf0:	4651      	mov	r1, sl
    4bf2:	469b      	mov	fp, r3
    4bf4:	4091      	lsls	r1, r2
    4bf6:	4b19      	ldr	r3, [pc, #100]	; (4c5c <__aeabi_ddiv+0x1ec>)
    4bf8:	469c      	mov	ip, r3
    4bfa:	4460      	add	r0, ip
    4bfc:	4240      	negs	r0, r0
    4bfe:	2300      	movs	r3, #0
    4c00:	e774      	b.n	4aec <__aeabi_ddiv+0x7c>
    4c02:	2300      	movs	r3, #0
    4c04:	2100      	movs	r1, #0
    4c06:	469b      	mov	fp, r3
    4c08:	3301      	adds	r3, #1
    4c0a:	e76f      	b.n	4aec <__aeabi_ddiv+0x7c>
    4c0c:	2303      	movs	r3, #3
    4c0e:	e76d      	b.n	4aec <__aeabi_ddiv+0x7c>
    4c10:	2300      	movs	r3, #0
    4c12:	4699      	mov	r9, r3
    4c14:	3301      	adds	r3, #1
    4c16:	2704      	movs	r7, #4
    4c18:	2600      	movs	r6, #0
    4c1a:	9302      	str	r3, [sp, #8]
    4c1c:	e74b      	b.n	4ab6 <__aeabi_ddiv+0x46>
    4c1e:	2303      	movs	r3, #3
    4c20:	270c      	movs	r7, #12
    4c22:	9302      	str	r3, [sp, #8]
    4c24:	e747      	b.n	4ab6 <__aeabi_ddiv+0x46>
    4c26:	2201      	movs	r2, #1
    4c28:	1ad5      	subs	r5, r2, r3
    4c2a:	2d38      	cmp	r5, #56	; 0x38
    4c2c:	dc00      	bgt.n	4c30 <__aeabi_ddiv+0x1c0>
    4c2e:	e1b0      	b.n	4f92 <__aeabi_ddiv+0x522>
    4c30:	4653      	mov	r3, sl
    4c32:	401a      	ands	r2, r3
    4c34:	2100      	movs	r1, #0
    4c36:	2300      	movs	r3, #0
    4c38:	2600      	movs	r6, #0
    4c3a:	4689      	mov	r9, r1
    4c3c:	e77e      	b.n	4b3c <__aeabi_ddiv+0xcc>
    4c3e:	2300      	movs	r3, #0
    4c40:	2680      	movs	r6, #128	; 0x80
    4c42:	4699      	mov	r9, r3
    4c44:	2200      	movs	r2, #0
    4c46:	0336      	lsls	r6, r6, #12
    4c48:	4b00      	ldr	r3, [pc, #0]	; (4c4c <__aeabi_ddiv+0x1dc>)
    4c4a:	e777      	b.n	4b3c <__aeabi_ddiv+0xcc>
    4c4c:	000007ff 	.word	0x000007ff
    4c50:	fffffc01 	.word	0xfffffc01
    4c54:	00006520 	.word	0x00006520
    4c58:	800fffff 	.word	0x800fffff
    4c5c:	000003f3 	.word	0x000003f3
    4c60:	455e      	cmp	r6, fp
    4c62:	d900      	bls.n	4c66 <__aeabi_ddiv+0x1f6>
    4c64:	e172      	b.n	4f4c <__aeabi_ddiv+0x4dc>
    4c66:	d100      	bne.n	4c6a <__aeabi_ddiv+0x1fa>
    4c68:	e16d      	b.n	4f46 <__aeabi_ddiv+0x4d6>
    4c6a:	9b01      	ldr	r3, [sp, #4]
    4c6c:	464d      	mov	r5, r9
    4c6e:	3b01      	subs	r3, #1
    4c70:	9301      	str	r3, [sp, #4]
    4c72:	2300      	movs	r3, #0
    4c74:	0034      	movs	r4, r6
    4c76:	9302      	str	r3, [sp, #8]
    4c78:	465b      	mov	r3, fp
    4c7a:	021e      	lsls	r6, r3, #8
    4c7c:	0e0b      	lsrs	r3, r1, #24
    4c7e:	431e      	orrs	r6, r3
    4c80:	020b      	lsls	r3, r1, #8
    4c82:	9303      	str	r3, [sp, #12]
    4c84:	0c33      	lsrs	r3, r6, #16
    4c86:	4699      	mov	r9, r3
    4c88:	0433      	lsls	r3, r6, #16
    4c8a:	0c1b      	lsrs	r3, r3, #16
    4c8c:	4649      	mov	r1, r9
    4c8e:	0020      	movs	r0, r4
    4c90:	9300      	str	r3, [sp, #0]
    4c92:	f001 fa8f 	bl	61b4 <__aeabi_uidiv>
    4c96:	9b00      	ldr	r3, [sp, #0]
    4c98:	0037      	movs	r7, r6
    4c9a:	4343      	muls	r3, r0
    4c9c:	0006      	movs	r6, r0
    4c9e:	4649      	mov	r1, r9
    4ca0:	0020      	movs	r0, r4
    4ca2:	4698      	mov	r8, r3
    4ca4:	f001 fb0c 	bl	62c0 <__aeabi_uidivmod>
    4ca8:	0c2c      	lsrs	r4, r5, #16
    4caa:	0409      	lsls	r1, r1, #16
    4cac:	430c      	orrs	r4, r1
    4cae:	45a0      	cmp	r8, r4
    4cb0:	d909      	bls.n	4cc6 <__aeabi_ddiv+0x256>
    4cb2:	19e4      	adds	r4, r4, r7
    4cb4:	1e73      	subs	r3, r6, #1
    4cb6:	42a7      	cmp	r7, r4
    4cb8:	d900      	bls.n	4cbc <__aeabi_ddiv+0x24c>
    4cba:	e15c      	b.n	4f76 <__aeabi_ddiv+0x506>
    4cbc:	45a0      	cmp	r8, r4
    4cbe:	d800      	bhi.n	4cc2 <__aeabi_ddiv+0x252>
    4cc0:	e159      	b.n	4f76 <__aeabi_ddiv+0x506>
    4cc2:	3e02      	subs	r6, #2
    4cc4:	19e4      	adds	r4, r4, r7
    4cc6:	4643      	mov	r3, r8
    4cc8:	1ae4      	subs	r4, r4, r3
    4cca:	4649      	mov	r1, r9
    4ccc:	0020      	movs	r0, r4
    4cce:	f001 fa71 	bl	61b4 <__aeabi_uidiv>
    4cd2:	0003      	movs	r3, r0
    4cd4:	9a00      	ldr	r2, [sp, #0]
    4cd6:	4680      	mov	r8, r0
    4cd8:	4353      	muls	r3, r2
    4cda:	4649      	mov	r1, r9
    4cdc:	0020      	movs	r0, r4
    4cde:	469b      	mov	fp, r3
    4ce0:	f001 faee 	bl	62c0 <__aeabi_uidivmod>
    4ce4:	042a      	lsls	r2, r5, #16
    4ce6:	0409      	lsls	r1, r1, #16
    4ce8:	0c12      	lsrs	r2, r2, #16
    4cea:	430a      	orrs	r2, r1
    4cec:	4593      	cmp	fp, r2
    4cee:	d90d      	bls.n	4d0c <__aeabi_ddiv+0x29c>
    4cf0:	4643      	mov	r3, r8
    4cf2:	19d2      	adds	r2, r2, r7
    4cf4:	3b01      	subs	r3, #1
    4cf6:	4297      	cmp	r7, r2
    4cf8:	d900      	bls.n	4cfc <__aeabi_ddiv+0x28c>
    4cfa:	e13a      	b.n	4f72 <__aeabi_ddiv+0x502>
    4cfc:	4593      	cmp	fp, r2
    4cfe:	d800      	bhi.n	4d02 <__aeabi_ddiv+0x292>
    4d00:	e137      	b.n	4f72 <__aeabi_ddiv+0x502>
    4d02:	2302      	movs	r3, #2
    4d04:	425b      	negs	r3, r3
    4d06:	469c      	mov	ip, r3
    4d08:	19d2      	adds	r2, r2, r7
    4d0a:	44e0      	add	r8, ip
    4d0c:	465b      	mov	r3, fp
    4d0e:	1ad2      	subs	r2, r2, r3
    4d10:	4643      	mov	r3, r8
    4d12:	0436      	lsls	r6, r6, #16
    4d14:	4333      	orrs	r3, r6
    4d16:	469b      	mov	fp, r3
    4d18:	9903      	ldr	r1, [sp, #12]
    4d1a:	0c18      	lsrs	r0, r3, #16
    4d1c:	0c0b      	lsrs	r3, r1, #16
    4d1e:	001d      	movs	r5, r3
    4d20:	9305      	str	r3, [sp, #20]
    4d22:	0409      	lsls	r1, r1, #16
    4d24:	465b      	mov	r3, fp
    4d26:	0c09      	lsrs	r1, r1, #16
    4d28:	000c      	movs	r4, r1
    4d2a:	041b      	lsls	r3, r3, #16
    4d2c:	0c1b      	lsrs	r3, r3, #16
    4d2e:	4344      	muls	r4, r0
    4d30:	9104      	str	r1, [sp, #16]
    4d32:	4359      	muls	r1, r3
    4d34:	436b      	muls	r3, r5
    4d36:	4368      	muls	r0, r5
    4d38:	191b      	adds	r3, r3, r4
    4d3a:	0c0d      	lsrs	r5, r1, #16
    4d3c:	18eb      	adds	r3, r5, r3
    4d3e:	429c      	cmp	r4, r3
    4d40:	d903      	bls.n	4d4a <__aeabi_ddiv+0x2da>
    4d42:	2480      	movs	r4, #128	; 0x80
    4d44:	0264      	lsls	r4, r4, #9
    4d46:	46a4      	mov	ip, r4
    4d48:	4460      	add	r0, ip
    4d4a:	0c1c      	lsrs	r4, r3, #16
    4d4c:	0409      	lsls	r1, r1, #16
    4d4e:	041b      	lsls	r3, r3, #16
    4d50:	0c09      	lsrs	r1, r1, #16
    4d52:	1820      	adds	r0, r4, r0
    4d54:	185d      	adds	r5, r3, r1
    4d56:	4282      	cmp	r2, r0
    4d58:	d200      	bcs.n	4d5c <__aeabi_ddiv+0x2ec>
    4d5a:	e0de      	b.n	4f1a <__aeabi_ddiv+0x4aa>
    4d5c:	d100      	bne.n	4d60 <__aeabi_ddiv+0x2f0>
    4d5e:	e0d7      	b.n	4f10 <__aeabi_ddiv+0x4a0>
    4d60:	1a16      	subs	r6, r2, r0
    4d62:	9b02      	ldr	r3, [sp, #8]
    4d64:	469c      	mov	ip, r3
    4d66:	1b5d      	subs	r5, r3, r5
    4d68:	45ac      	cmp	ip, r5
    4d6a:	419b      	sbcs	r3, r3
    4d6c:	425b      	negs	r3, r3
    4d6e:	1af6      	subs	r6, r6, r3
    4d70:	42b7      	cmp	r7, r6
    4d72:	d100      	bne.n	4d76 <__aeabi_ddiv+0x306>
    4d74:	e106      	b.n	4f84 <__aeabi_ddiv+0x514>
    4d76:	4649      	mov	r1, r9
    4d78:	0030      	movs	r0, r6
    4d7a:	f001 fa1b 	bl	61b4 <__aeabi_uidiv>
    4d7e:	9b00      	ldr	r3, [sp, #0]
    4d80:	0004      	movs	r4, r0
    4d82:	4343      	muls	r3, r0
    4d84:	4649      	mov	r1, r9
    4d86:	0030      	movs	r0, r6
    4d88:	4698      	mov	r8, r3
    4d8a:	f001 fa99 	bl	62c0 <__aeabi_uidivmod>
    4d8e:	0c2e      	lsrs	r6, r5, #16
    4d90:	0409      	lsls	r1, r1, #16
    4d92:	430e      	orrs	r6, r1
    4d94:	45b0      	cmp	r8, r6
    4d96:	d909      	bls.n	4dac <__aeabi_ddiv+0x33c>
    4d98:	19f6      	adds	r6, r6, r7
    4d9a:	1e63      	subs	r3, r4, #1
    4d9c:	42b7      	cmp	r7, r6
    4d9e:	d900      	bls.n	4da2 <__aeabi_ddiv+0x332>
    4da0:	e0f3      	b.n	4f8a <__aeabi_ddiv+0x51a>
    4da2:	45b0      	cmp	r8, r6
    4da4:	d800      	bhi.n	4da8 <__aeabi_ddiv+0x338>
    4da6:	e0f0      	b.n	4f8a <__aeabi_ddiv+0x51a>
    4da8:	3c02      	subs	r4, #2
    4daa:	19f6      	adds	r6, r6, r7
    4dac:	4643      	mov	r3, r8
    4dae:	1af3      	subs	r3, r6, r3
    4db0:	4649      	mov	r1, r9
    4db2:	0018      	movs	r0, r3
    4db4:	9302      	str	r3, [sp, #8]
    4db6:	f001 f9fd 	bl	61b4 <__aeabi_uidiv>
    4dba:	9b00      	ldr	r3, [sp, #0]
    4dbc:	0006      	movs	r6, r0
    4dbe:	4343      	muls	r3, r0
    4dc0:	4649      	mov	r1, r9
    4dc2:	9802      	ldr	r0, [sp, #8]
    4dc4:	4698      	mov	r8, r3
    4dc6:	f001 fa7b 	bl	62c0 <__aeabi_uidivmod>
    4dca:	042d      	lsls	r5, r5, #16
    4dcc:	0409      	lsls	r1, r1, #16
    4dce:	0c2d      	lsrs	r5, r5, #16
    4dd0:	430d      	orrs	r5, r1
    4dd2:	45a8      	cmp	r8, r5
    4dd4:	d909      	bls.n	4dea <__aeabi_ddiv+0x37a>
    4dd6:	19ed      	adds	r5, r5, r7
    4dd8:	1e73      	subs	r3, r6, #1
    4dda:	42af      	cmp	r7, r5
    4ddc:	d900      	bls.n	4de0 <__aeabi_ddiv+0x370>
    4dde:	e0d6      	b.n	4f8e <__aeabi_ddiv+0x51e>
    4de0:	45a8      	cmp	r8, r5
    4de2:	d800      	bhi.n	4de6 <__aeabi_ddiv+0x376>
    4de4:	e0d3      	b.n	4f8e <__aeabi_ddiv+0x51e>
    4de6:	3e02      	subs	r6, #2
    4de8:	19ed      	adds	r5, r5, r7
    4dea:	0424      	lsls	r4, r4, #16
    4dec:	0021      	movs	r1, r4
    4dee:	4643      	mov	r3, r8
    4df0:	4331      	orrs	r1, r6
    4df2:	9e04      	ldr	r6, [sp, #16]
    4df4:	9a05      	ldr	r2, [sp, #20]
    4df6:	0030      	movs	r0, r6
    4df8:	1aed      	subs	r5, r5, r3
    4dfa:	040b      	lsls	r3, r1, #16
    4dfc:	0c0c      	lsrs	r4, r1, #16
    4dfe:	0c1b      	lsrs	r3, r3, #16
    4e00:	4358      	muls	r0, r3
    4e02:	4366      	muls	r6, r4
    4e04:	4353      	muls	r3, r2
    4e06:	4354      	muls	r4, r2
    4e08:	199a      	adds	r2, r3, r6
    4e0a:	0c03      	lsrs	r3, r0, #16
    4e0c:	189b      	adds	r3, r3, r2
    4e0e:	429e      	cmp	r6, r3
    4e10:	d903      	bls.n	4e1a <__aeabi_ddiv+0x3aa>
    4e12:	2280      	movs	r2, #128	; 0x80
    4e14:	0252      	lsls	r2, r2, #9
    4e16:	4694      	mov	ip, r2
    4e18:	4464      	add	r4, ip
    4e1a:	0c1a      	lsrs	r2, r3, #16
    4e1c:	0400      	lsls	r0, r0, #16
    4e1e:	041b      	lsls	r3, r3, #16
    4e20:	0c00      	lsrs	r0, r0, #16
    4e22:	1914      	adds	r4, r2, r4
    4e24:	181b      	adds	r3, r3, r0
    4e26:	42a5      	cmp	r5, r4
    4e28:	d350      	bcc.n	4ecc <__aeabi_ddiv+0x45c>
    4e2a:	d04d      	beq.n	4ec8 <__aeabi_ddiv+0x458>
    4e2c:	2301      	movs	r3, #1
    4e2e:	4319      	orrs	r1, r3
    4e30:	4a96      	ldr	r2, [pc, #600]	; (508c <__aeabi_ddiv+0x61c>)
    4e32:	9b01      	ldr	r3, [sp, #4]
    4e34:	4694      	mov	ip, r2
    4e36:	4463      	add	r3, ip
    4e38:	2b00      	cmp	r3, #0
    4e3a:	dc00      	bgt.n	4e3e <__aeabi_ddiv+0x3ce>
    4e3c:	e6f3      	b.n	4c26 <__aeabi_ddiv+0x1b6>
    4e3e:	074a      	lsls	r2, r1, #29
    4e40:	d009      	beq.n	4e56 <__aeabi_ddiv+0x3e6>
    4e42:	220f      	movs	r2, #15
    4e44:	400a      	ands	r2, r1
    4e46:	2a04      	cmp	r2, #4
    4e48:	d005      	beq.n	4e56 <__aeabi_ddiv+0x3e6>
    4e4a:	1d0a      	adds	r2, r1, #4
    4e4c:	428a      	cmp	r2, r1
    4e4e:	4189      	sbcs	r1, r1
    4e50:	4249      	negs	r1, r1
    4e52:	448b      	add	fp, r1
    4e54:	0011      	movs	r1, r2
    4e56:	465a      	mov	r2, fp
    4e58:	01d2      	lsls	r2, r2, #7
    4e5a:	d508      	bpl.n	4e6e <__aeabi_ddiv+0x3fe>
    4e5c:	465a      	mov	r2, fp
    4e5e:	4b8c      	ldr	r3, [pc, #560]	; (5090 <__aeabi_ddiv+0x620>)
    4e60:	401a      	ands	r2, r3
    4e62:	4693      	mov	fp, r2
    4e64:	2280      	movs	r2, #128	; 0x80
    4e66:	00d2      	lsls	r2, r2, #3
    4e68:	4694      	mov	ip, r2
    4e6a:	9b01      	ldr	r3, [sp, #4]
    4e6c:	4463      	add	r3, ip
    4e6e:	4a89      	ldr	r2, [pc, #548]	; (5094 <__aeabi_ddiv+0x624>)
    4e70:	4293      	cmp	r3, r2
    4e72:	dd00      	ble.n	4e76 <__aeabi_ddiv+0x406>
    4e74:	e65b      	b.n	4b2e <__aeabi_ddiv+0xbe>
    4e76:	465a      	mov	r2, fp
    4e78:	08c9      	lsrs	r1, r1, #3
    4e7a:	0750      	lsls	r0, r2, #29
    4e7c:	4308      	orrs	r0, r1
    4e7e:	0256      	lsls	r6, r2, #9
    4e80:	4651      	mov	r1, sl
    4e82:	2201      	movs	r2, #1
    4e84:	055b      	lsls	r3, r3, #21
    4e86:	4681      	mov	r9, r0
    4e88:	0b36      	lsrs	r6, r6, #12
    4e8a:	0d5b      	lsrs	r3, r3, #21
    4e8c:	400a      	ands	r2, r1
    4e8e:	e655      	b.n	4b3c <__aeabi_ddiv+0xcc>
    4e90:	2380      	movs	r3, #128	; 0x80
    4e92:	031b      	lsls	r3, r3, #12
    4e94:	421e      	tst	r6, r3
    4e96:	d011      	beq.n	4ebc <__aeabi_ddiv+0x44c>
    4e98:	465a      	mov	r2, fp
    4e9a:	421a      	tst	r2, r3
    4e9c:	d10e      	bne.n	4ebc <__aeabi_ddiv+0x44c>
    4e9e:	465e      	mov	r6, fp
    4ea0:	431e      	orrs	r6, r3
    4ea2:	0336      	lsls	r6, r6, #12
    4ea4:	0b36      	lsrs	r6, r6, #12
    4ea6:	002a      	movs	r2, r5
    4ea8:	4689      	mov	r9, r1
    4eaa:	4b7b      	ldr	r3, [pc, #492]	; (5098 <__aeabi_ddiv+0x628>)
    4eac:	e646      	b.n	4b3c <__aeabi_ddiv+0xcc>
    4eae:	2b03      	cmp	r3, #3
    4eb0:	d100      	bne.n	4eb4 <__aeabi_ddiv+0x444>
    4eb2:	e0e1      	b.n	5078 <__aeabi_ddiv+0x608>
    4eb4:	2b01      	cmp	r3, #1
    4eb6:	d1bb      	bne.n	4e30 <__aeabi_ddiv+0x3c0>
    4eb8:	401a      	ands	r2, r3
    4eba:	e6bb      	b.n	4c34 <__aeabi_ddiv+0x1c4>
    4ebc:	431e      	orrs	r6, r3
    4ebe:	0336      	lsls	r6, r6, #12
    4ec0:	0b36      	lsrs	r6, r6, #12
    4ec2:	4642      	mov	r2, r8
    4ec4:	4b74      	ldr	r3, [pc, #464]	; (5098 <__aeabi_ddiv+0x628>)
    4ec6:	e639      	b.n	4b3c <__aeabi_ddiv+0xcc>
    4ec8:	2b00      	cmp	r3, #0
    4eca:	d0b1      	beq.n	4e30 <__aeabi_ddiv+0x3c0>
    4ecc:	197d      	adds	r5, r7, r5
    4ece:	1e4a      	subs	r2, r1, #1
    4ed0:	42af      	cmp	r7, r5
    4ed2:	d952      	bls.n	4f7a <__aeabi_ddiv+0x50a>
    4ed4:	0011      	movs	r1, r2
    4ed6:	42a5      	cmp	r5, r4
    4ed8:	d1a8      	bne.n	4e2c <__aeabi_ddiv+0x3bc>
    4eda:	9a03      	ldr	r2, [sp, #12]
    4edc:	429a      	cmp	r2, r3
    4ede:	d1a5      	bne.n	4e2c <__aeabi_ddiv+0x3bc>
    4ee0:	e7a6      	b.n	4e30 <__aeabi_ddiv+0x3c0>
    4ee2:	0003      	movs	r3, r0
    4ee4:	003e      	movs	r6, r7
    4ee6:	3b28      	subs	r3, #40	; 0x28
    4ee8:	409e      	lsls	r6, r3
    4eea:	2300      	movs	r3, #0
    4eec:	4699      	mov	r9, r3
    4eee:	e654      	b.n	4b9a <__aeabi_ddiv+0x12a>
    4ef0:	f001 f9ec 	bl	62cc <__clzsi2>
    4ef4:	3020      	adds	r0, #32
    4ef6:	e641      	b.n	4b7c <__aeabi_ddiv+0x10c>
    4ef8:	0003      	movs	r3, r0
    4efa:	4652      	mov	r2, sl
    4efc:	3b28      	subs	r3, #40	; 0x28
    4efe:	409a      	lsls	r2, r3
    4f00:	2100      	movs	r1, #0
    4f02:	4693      	mov	fp, r2
    4f04:	e677      	b.n	4bf6 <__aeabi_ddiv+0x186>
    4f06:	4650      	mov	r0, sl
    4f08:	f001 f9e0 	bl	62cc <__clzsi2>
    4f0c:	3020      	adds	r0, #32
    4f0e:	e65e      	b.n	4bce <__aeabi_ddiv+0x15e>
    4f10:	9b02      	ldr	r3, [sp, #8]
    4f12:	2600      	movs	r6, #0
    4f14:	42ab      	cmp	r3, r5
    4f16:	d300      	bcc.n	4f1a <__aeabi_ddiv+0x4aa>
    4f18:	e723      	b.n	4d62 <__aeabi_ddiv+0x2f2>
    4f1a:	9e03      	ldr	r6, [sp, #12]
    4f1c:	9902      	ldr	r1, [sp, #8]
    4f1e:	46b4      	mov	ip, r6
    4f20:	4461      	add	r1, ip
    4f22:	4688      	mov	r8, r1
    4f24:	45b0      	cmp	r8, r6
    4f26:	41b6      	sbcs	r6, r6
    4f28:	465b      	mov	r3, fp
    4f2a:	4276      	negs	r6, r6
    4f2c:	19f6      	adds	r6, r6, r7
    4f2e:	18b2      	adds	r2, r6, r2
    4f30:	3b01      	subs	r3, #1
    4f32:	9102      	str	r1, [sp, #8]
    4f34:	4297      	cmp	r7, r2
    4f36:	d213      	bcs.n	4f60 <__aeabi_ddiv+0x4f0>
    4f38:	4290      	cmp	r0, r2
    4f3a:	d84f      	bhi.n	4fdc <__aeabi_ddiv+0x56c>
    4f3c:	d100      	bne.n	4f40 <__aeabi_ddiv+0x4d0>
    4f3e:	e08e      	b.n	505e <__aeabi_ddiv+0x5ee>
    4f40:	1a16      	subs	r6, r2, r0
    4f42:	469b      	mov	fp, r3
    4f44:	e70d      	b.n	4d62 <__aeabi_ddiv+0x2f2>
    4f46:	4589      	cmp	r9, r1
    4f48:	d200      	bcs.n	4f4c <__aeabi_ddiv+0x4dc>
    4f4a:	e68e      	b.n	4c6a <__aeabi_ddiv+0x1fa>
    4f4c:	0874      	lsrs	r4, r6, #1
    4f4e:	464b      	mov	r3, r9
    4f50:	07f6      	lsls	r6, r6, #31
    4f52:	0035      	movs	r5, r6
    4f54:	085b      	lsrs	r3, r3, #1
    4f56:	431d      	orrs	r5, r3
    4f58:	464b      	mov	r3, r9
    4f5a:	07db      	lsls	r3, r3, #31
    4f5c:	9302      	str	r3, [sp, #8]
    4f5e:	e68b      	b.n	4c78 <__aeabi_ddiv+0x208>
    4f60:	4297      	cmp	r7, r2
    4f62:	d1ed      	bne.n	4f40 <__aeabi_ddiv+0x4d0>
    4f64:	9903      	ldr	r1, [sp, #12]
    4f66:	9c02      	ldr	r4, [sp, #8]
    4f68:	42a1      	cmp	r1, r4
    4f6a:	d9e5      	bls.n	4f38 <__aeabi_ddiv+0x4c8>
    4f6c:	1a3e      	subs	r6, r7, r0
    4f6e:	469b      	mov	fp, r3
    4f70:	e6f7      	b.n	4d62 <__aeabi_ddiv+0x2f2>
    4f72:	4698      	mov	r8, r3
    4f74:	e6ca      	b.n	4d0c <__aeabi_ddiv+0x29c>
    4f76:	001e      	movs	r6, r3
    4f78:	e6a5      	b.n	4cc6 <__aeabi_ddiv+0x256>
    4f7a:	42ac      	cmp	r4, r5
    4f7c:	d83e      	bhi.n	4ffc <__aeabi_ddiv+0x58c>
    4f7e:	d074      	beq.n	506a <__aeabi_ddiv+0x5fa>
    4f80:	0011      	movs	r1, r2
    4f82:	e753      	b.n	4e2c <__aeabi_ddiv+0x3bc>
    4f84:	2101      	movs	r1, #1
    4f86:	4249      	negs	r1, r1
    4f88:	e752      	b.n	4e30 <__aeabi_ddiv+0x3c0>
    4f8a:	001c      	movs	r4, r3
    4f8c:	e70e      	b.n	4dac <__aeabi_ddiv+0x33c>
    4f8e:	001e      	movs	r6, r3
    4f90:	e72b      	b.n	4dea <__aeabi_ddiv+0x37a>
    4f92:	2d1f      	cmp	r5, #31
    4f94:	dc3c      	bgt.n	5010 <__aeabi_ddiv+0x5a0>
    4f96:	2320      	movs	r3, #32
    4f98:	000a      	movs	r2, r1
    4f9a:	4658      	mov	r0, fp
    4f9c:	1b5b      	subs	r3, r3, r5
    4f9e:	4098      	lsls	r0, r3
    4fa0:	40ea      	lsrs	r2, r5
    4fa2:	4099      	lsls	r1, r3
    4fa4:	4302      	orrs	r2, r0
    4fa6:	1e48      	subs	r0, r1, #1
    4fa8:	4181      	sbcs	r1, r0
    4faa:	465e      	mov	r6, fp
    4fac:	4311      	orrs	r1, r2
    4fae:	40ee      	lsrs	r6, r5
    4fb0:	074b      	lsls	r3, r1, #29
    4fb2:	d009      	beq.n	4fc8 <__aeabi_ddiv+0x558>
    4fb4:	230f      	movs	r3, #15
    4fb6:	400b      	ands	r3, r1
    4fb8:	2b04      	cmp	r3, #4
    4fba:	d005      	beq.n	4fc8 <__aeabi_ddiv+0x558>
    4fbc:	000b      	movs	r3, r1
    4fbe:	1d19      	adds	r1, r3, #4
    4fc0:	4299      	cmp	r1, r3
    4fc2:	419b      	sbcs	r3, r3
    4fc4:	425b      	negs	r3, r3
    4fc6:	18f6      	adds	r6, r6, r3
    4fc8:	0233      	lsls	r3, r6, #8
    4fca:	d53c      	bpl.n	5046 <__aeabi_ddiv+0x5d6>
    4fcc:	4653      	mov	r3, sl
    4fce:	2201      	movs	r2, #1
    4fd0:	2100      	movs	r1, #0
    4fd2:	401a      	ands	r2, r3
    4fd4:	2600      	movs	r6, #0
    4fd6:	2301      	movs	r3, #1
    4fd8:	4689      	mov	r9, r1
    4fda:	e5af      	b.n	4b3c <__aeabi_ddiv+0xcc>
    4fdc:	2302      	movs	r3, #2
    4fde:	425b      	negs	r3, r3
    4fe0:	469c      	mov	ip, r3
    4fe2:	9c03      	ldr	r4, [sp, #12]
    4fe4:	44e3      	add	fp, ip
    4fe6:	46a4      	mov	ip, r4
    4fe8:	9b02      	ldr	r3, [sp, #8]
    4fea:	4463      	add	r3, ip
    4fec:	4698      	mov	r8, r3
    4fee:	45a0      	cmp	r8, r4
    4ff0:	41b6      	sbcs	r6, r6
    4ff2:	4276      	negs	r6, r6
    4ff4:	19f6      	adds	r6, r6, r7
    4ff6:	9302      	str	r3, [sp, #8]
    4ff8:	18b2      	adds	r2, r6, r2
    4ffa:	e6b1      	b.n	4d60 <__aeabi_ddiv+0x2f0>
    4ffc:	9803      	ldr	r0, [sp, #12]
    4ffe:	1e8a      	subs	r2, r1, #2
    5000:	0041      	lsls	r1, r0, #1
    5002:	4281      	cmp	r1, r0
    5004:	41b6      	sbcs	r6, r6
    5006:	4276      	negs	r6, r6
    5008:	19f6      	adds	r6, r6, r7
    500a:	19ad      	adds	r5, r5, r6
    500c:	9103      	str	r1, [sp, #12]
    500e:	e761      	b.n	4ed4 <__aeabi_ddiv+0x464>
    5010:	221f      	movs	r2, #31
    5012:	4252      	negs	r2, r2
    5014:	1ad3      	subs	r3, r2, r3
    5016:	465a      	mov	r2, fp
    5018:	40da      	lsrs	r2, r3
    501a:	0013      	movs	r3, r2
    501c:	2d20      	cmp	r5, #32
    501e:	d029      	beq.n	5074 <__aeabi_ddiv+0x604>
    5020:	2240      	movs	r2, #64	; 0x40
    5022:	4658      	mov	r0, fp
    5024:	1b55      	subs	r5, r2, r5
    5026:	40a8      	lsls	r0, r5
    5028:	4301      	orrs	r1, r0
    502a:	1e48      	subs	r0, r1, #1
    502c:	4181      	sbcs	r1, r0
    502e:	2007      	movs	r0, #7
    5030:	430b      	orrs	r3, r1
    5032:	4018      	ands	r0, r3
    5034:	2600      	movs	r6, #0
    5036:	2800      	cmp	r0, #0
    5038:	d009      	beq.n	504e <__aeabi_ddiv+0x5de>
    503a:	220f      	movs	r2, #15
    503c:	2600      	movs	r6, #0
    503e:	401a      	ands	r2, r3
    5040:	0019      	movs	r1, r3
    5042:	2a04      	cmp	r2, #4
    5044:	d1bb      	bne.n	4fbe <__aeabi_ddiv+0x54e>
    5046:	000b      	movs	r3, r1
    5048:	0770      	lsls	r0, r6, #29
    504a:	0276      	lsls	r6, r6, #9
    504c:	0b36      	lsrs	r6, r6, #12
    504e:	08db      	lsrs	r3, r3, #3
    5050:	4303      	orrs	r3, r0
    5052:	4699      	mov	r9, r3
    5054:	2201      	movs	r2, #1
    5056:	4653      	mov	r3, sl
    5058:	401a      	ands	r2, r3
    505a:	2300      	movs	r3, #0
    505c:	e56e      	b.n	4b3c <__aeabi_ddiv+0xcc>
    505e:	9902      	ldr	r1, [sp, #8]
    5060:	428d      	cmp	r5, r1
    5062:	d8bb      	bhi.n	4fdc <__aeabi_ddiv+0x56c>
    5064:	469b      	mov	fp, r3
    5066:	2600      	movs	r6, #0
    5068:	e67b      	b.n	4d62 <__aeabi_ddiv+0x2f2>
    506a:	9803      	ldr	r0, [sp, #12]
    506c:	4298      	cmp	r0, r3
    506e:	d3c5      	bcc.n	4ffc <__aeabi_ddiv+0x58c>
    5070:	0011      	movs	r1, r2
    5072:	e732      	b.n	4eda <__aeabi_ddiv+0x46a>
    5074:	2000      	movs	r0, #0
    5076:	e7d7      	b.n	5028 <__aeabi_ddiv+0x5b8>
    5078:	2680      	movs	r6, #128	; 0x80
    507a:	465b      	mov	r3, fp
    507c:	0336      	lsls	r6, r6, #12
    507e:	431e      	orrs	r6, r3
    5080:	0336      	lsls	r6, r6, #12
    5082:	0b36      	lsrs	r6, r6, #12
    5084:	9a00      	ldr	r2, [sp, #0]
    5086:	4689      	mov	r9, r1
    5088:	4b03      	ldr	r3, [pc, #12]	; (5098 <__aeabi_ddiv+0x628>)
    508a:	e557      	b.n	4b3c <__aeabi_ddiv+0xcc>
    508c:	000003ff 	.word	0x000003ff
    5090:	feffffff 	.word	0xfeffffff
    5094:	000007fe 	.word	0x000007fe
    5098:	000007ff 	.word	0x000007ff

0000509c <__eqdf2>:
    509c:	b5f0      	push	{r4, r5, r6, r7, lr}
    509e:	465f      	mov	r7, fp
    50a0:	4656      	mov	r6, sl
    50a2:	464d      	mov	r5, r9
    50a4:	4644      	mov	r4, r8
    50a6:	b4f0      	push	{r4, r5, r6, r7}
    50a8:	031f      	lsls	r7, r3, #12
    50aa:	005c      	lsls	r4, r3, #1
    50ac:	0fdb      	lsrs	r3, r3, #31
    50ae:	469a      	mov	sl, r3
    50b0:	4b19      	ldr	r3, [pc, #100]	; (5118 <__eqdf2+0x7c>)
    50b2:	030e      	lsls	r6, r1, #12
    50b4:	004d      	lsls	r5, r1, #1
    50b6:	0fc9      	lsrs	r1, r1, #31
    50b8:	4680      	mov	r8, r0
    50ba:	0b36      	lsrs	r6, r6, #12
    50bc:	0d6d      	lsrs	r5, r5, #21
    50be:	468b      	mov	fp, r1
    50c0:	4691      	mov	r9, r2
    50c2:	0b3f      	lsrs	r7, r7, #12
    50c4:	0d64      	lsrs	r4, r4, #21
    50c6:	429d      	cmp	r5, r3
    50c8:	d019      	beq.n	50fe <__eqdf2+0x62>
    50ca:	4b13      	ldr	r3, [pc, #76]	; (5118 <__eqdf2+0x7c>)
    50cc:	429c      	cmp	r4, r3
    50ce:	d01b      	beq.n	5108 <__eqdf2+0x6c>
    50d0:	2301      	movs	r3, #1
    50d2:	42a5      	cmp	r5, r4
    50d4:	d006      	beq.n	50e4 <__eqdf2+0x48>
    50d6:	0018      	movs	r0, r3
    50d8:	bc3c      	pop	{r2, r3, r4, r5}
    50da:	4690      	mov	r8, r2
    50dc:	4699      	mov	r9, r3
    50de:	46a2      	mov	sl, r4
    50e0:	46ab      	mov	fp, r5
    50e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    50e4:	42be      	cmp	r6, r7
    50e6:	d1f6      	bne.n	50d6 <__eqdf2+0x3a>
    50e8:	45c8      	cmp	r8, r9
    50ea:	d1f4      	bne.n	50d6 <__eqdf2+0x3a>
    50ec:	45d3      	cmp	fp, sl
    50ee:	d010      	beq.n	5112 <__eqdf2+0x76>
    50f0:	2d00      	cmp	r5, #0
    50f2:	d1f0      	bne.n	50d6 <__eqdf2+0x3a>
    50f4:	4330      	orrs	r0, r6
    50f6:	0003      	movs	r3, r0
    50f8:	1e5a      	subs	r2, r3, #1
    50fa:	4193      	sbcs	r3, r2
    50fc:	e7eb      	b.n	50d6 <__eqdf2+0x3a>
    50fe:	0031      	movs	r1, r6
    5100:	2301      	movs	r3, #1
    5102:	4301      	orrs	r1, r0
    5104:	d1e7      	bne.n	50d6 <__eqdf2+0x3a>
    5106:	e7e0      	b.n	50ca <__eqdf2+0x2e>
    5108:	433a      	orrs	r2, r7
    510a:	2301      	movs	r3, #1
    510c:	2a00      	cmp	r2, #0
    510e:	d1e2      	bne.n	50d6 <__eqdf2+0x3a>
    5110:	e7de      	b.n	50d0 <__eqdf2+0x34>
    5112:	2300      	movs	r3, #0
    5114:	e7df      	b.n	50d6 <__eqdf2+0x3a>
    5116:	46c0      	nop			; (mov r8, r8)
    5118:	000007ff 	.word	0x000007ff

0000511c <__gedf2>:
    511c:	b5f0      	push	{r4, r5, r6, r7, lr}
    511e:	465f      	mov	r7, fp
    5120:	4644      	mov	r4, r8
    5122:	4656      	mov	r6, sl
    5124:	464d      	mov	r5, r9
    5126:	b4f0      	push	{r4, r5, r6, r7}
    5128:	031f      	lsls	r7, r3, #12
    512a:	0b3c      	lsrs	r4, r7, #12
    512c:	4f2c      	ldr	r7, [pc, #176]	; (51e0 <__gedf2+0xc4>)
    512e:	030e      	lsls	r6, r1, #12
    5130:	004d      	lsls	r5, r1, #1
    5132:	46a3      	mov	fp, r4
    5134:	005c      	lsls	r4, r3, #1
    5136:	4684      	mov	ip, r0
    5138:	0b36      	lsrs	r6, r6, #12
    513a:	0d6d      	lsrs	r5, r5, #21
    513c:	0fc9      	lsrs	r1, r1, #31
    513e:	4690      	mov	r8, r2
    5140:	0d64      	lsrs	r4, r4, #21
    5142:	0fdb      	lsrs	r3, r3, #31
    5144:	42bd      	cmp	r5, r7
    5146:	d02b      	beq.n	51a0 <__gedf2+0x84>
    5148:	4f25      	ldr	r7, [pc, #148]	; (51e0 <__gedf2+0xc4>)
    514a:	42bc      	cmp	r4, r7
    514c:	d02e      	beq.n	51ac <__gedf2+0x90>
    514e:	2d00      	cmp	r5, #0
    5150:	d10e      	bne.n	5170 <__gedf2+0x54>
    5152:	4330      	orrs	r0, r6
    5154:	0007      	movs	r7, r0
    5156:	4681      	mov	r9, r0
    5158:	4278      	negs	r0, r7
    515a:	4178      	adcs	r0, r7
    515c:	2c00      	cmp	r4, #0
    515e:	d117      	bne.n	5190 <__gedf2+0x74>
    5160:	465f      	mov	r7, fp
    5162:	433a      	orrs	r2, r7
    5164:	d114      	bne.n	5190 <__gedf2+0x74>
    5166:	464b      	mov	r3, r9
    5168:	2000      	movs	r0, #0
    516a:	2b00      	cmp	r3, #0
    516c:	d00a      	beq.n	5184 <__gedf2+0x68>
    516e:	e006      	b.n	517e <__gedf2+0x62>
    5170:	2c00      	cmp	r4, #0
    5172:	d102      	bne.n	517a <__gedf2+0x5e>
    5174:	4658      	mov	r0, fp
    5176:	4302      	orrs	r2, r0
    5178:	d001      	beq.n	517e <__gedf2+0x62>
    517a:	4299      	cmp	r1, r3
    517c:	d01a      	beq.n	51b4 <__gedf2+0x98>
    517e:	2301      	movs	r3, #1
    5180:	4248      	negs	r0, r1
    5182:	4318      	orrs	r0, r3
    5184:	bc3c      	pop	{r2, r3, r4, r5}
    5186:	4690      	mov	r8, r2
    5188:	4699      	mov	r9, r3
    518a:	46a2      	mov	sl, r4
    518c:	46ab      	mov	fp, r5
    518e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5190:	2800      	cmp	r0, #0
    5192:	d0f2      	beq.n	517a <__gedf2+0x5e>
    5194:	4258      	negs	r0, r3
    5196:	4158      	adcs	r0, r3
    5198:	2201      	movs	r2, #1
    519a:	4240      	negs	r0, r0
    519c:	4310      	orrs	r0, r2
    519e:	e7f1      	b.n	5184 <__gedf2+0x68>
    51a0:	0037      	movs	r7, r6
    51a2:	4307      	orrs	r7, r0
    51a4:	d0d0      	beq.n	5148 <__gedf2+0x2c>
    51a6:	2002      	movs	r0, #2
    51a8:	4240      	negs	r0, r0
    51aa:	e7eb      	b.n	5184 <__gedf2+0x68>
    51ac:	465f      	mov	r7, fp
    51ae:	4317      	orrs	r7, r2
    51b0:	d0cd      	beq.n	514e <__gedf2+0x32>
    51b2:	e7f8      	b.n	51a6 <__gedf2+0x8a>
    51b4:	42a5      	cmp	r5, r4
    51b6:	dce2      	bgt.n	517e <__gedf2+0x62>
    51b8:	db05      	blt.n	51c6 <__gedf2+0xaa>
    51ba:	455e      	cmp	r6, fp
    51bc:	d8df      	bhi.n	517e <__gedf2+0x62>
    51be:	d008      	beq.n	51d2 <__gedf2+0xb6>
    51c0:	2000      	movs	r0, #0
    51c2:	455e      	cmp	r6, fp
    51c4:	d2de      	bcs.n	5184 <__gedf2+0x68>
    51c6:	4248      	negs	r0, r1
    51c8:	4148      	adcs	r0, r1
    51ca:	2301      	movs	r3, #1
    51cc:	4240      	negs	r0, r0
    51ce:	4318      	orrs	r0, r3
    51d0:	e7d8      	b.n	5184 <__gedf2+0x68>
    51d2:	45c4      	cmp	ip, r8
    51d4:	d8d3      	bhi.n	517e <__gedf2+0x62>
    51d6:	2000      	movs	r0, #0
    51d8:	45c4      	cmp	ip, r8
    51da:	d3f4      	bcc.n	51c6 <__gedf2+0xaa>
    51dc:	e7d2      	b.n	5184 <__gedf2+0x68>
    51de:	46c0      	nop			; (mov r8, r8)
    51e0:	000007ff 	.word	0x000007ff

000051e4 <__ledf2>:
    51e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    51e6:	465f      	mov	r7, fp
    51e8:	464d      	mov	r5, r9
    51ea:	4644      	mov	r4, r8
    51ec:	4656      	mov	r6, sl
    51ee:	b4f0      	push	{r4, r5, r6, r7}
    51f0:	031c      	lsls	r4, r3, #12
    51f2:	0b24      	lsrs	r4, r4, #12
    51f4:	46a4      	mov	ip, r4
    51f6:	4c2f      	ldr	r4, [pc, #188]	; (52b4 <__ledf2+0xd0>)
    51f8:	030f      	lsls	r7, r1, #12
    51fa:	004d      	lsls	r5, r1, #1
    51fc:	005e      	lsls	r6, r3, #1
    51fe:	0fc9      	lsrs	r1, r1, #31
    5200:	4680      	mov	r8, r0
    5202:	0b3f      	lsrs	r7, r7, #12
    5204:	0d6d      	lsrs	r5, r5, #21
    5206:	468b      	mov	fp, r1
    5208:	4691      	mov	r9, r2
    520a:	0d76      	lsrs	r6, r6, #21
    520c:	0fdb      	lsrs	r3, r3, #31
    520e:	42a5      	cmp	r5, r4
    5210:	d020      	beq.n	5254 <__ledf2+0x70>
    5212:	4c28      	ldr	r4, [pc, #160]	; (52b4 <__ledf2+0xd0>)
    5214:	42a6      	cmp	r6, r4
    5216:	d022      	beq.n	525e <__ledf2+0x7a>
    5218:	2d00      	cmp	r5, #0
    521a:	d112      	bne.n	5242 <__ledf2+0x5e>
    521c:	4338      	orrs	r0, r7
    521e:	4244      	negs	r4, r0
    5220:	4144      	adcs	r4, r0
    5222:	2e00      	cmp	r6, #0
    5224:	d020      	beq.n	5268 <__ledf2+0x84>
    5226:	2c00      	cmp	r4, #0
    5228:	d00d      	beq.n	5246 <__ledf2+0x62>
    522a:	425c      	negs	r4, r3
    522c:	4163      	adcs	r3, r4
    522e:	2401      	movs	r4, #1
    5230:	425b      	negs	r3, r3
    5232:	431c      	orrs	r4, r3
    5234:	0020      	movs	r0, r4
    5236:	bc3c      	pop	{r2, r3, r4, r5}
    5238:	4690      	mov	r8, r2
    523a:	4699      	mov	r9, r3
    523c:	46a2      	mov	sl, r4
    523e:	46ab      	mov	fp, r5
    5240:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5242:	2e00      	cmp	r6, #0
    5244:	d017      	beq.n	5276 <__ledf2+0x92>
    5246:	455b      	cmp	r3, fp
    5248:	d019      	beq.n	527e <__ledf2+0x9a>
    524a:	465b      	mov	r3, fp
    524c:	425c      	negs	r4, r3
    524e:	2301      	movs	r3, #1
    5250:	431c      	orrs	r4, r3
    5252:	e7ef      	b.n	5234 <__ledf2+0x50>
    5254:	0039      	movs	r1, r7
    5256:	2402      	movs	r4, #2
    5258:	4301      	orrs	r1, r0
    525a:	d1eb      	bne.n	5234 <__ledf2+0x50>
    525c:	e7d9      	b.n	5212 <__ledf2+0x2e>
    525e:	4661      	mov	r1, ip
    5260:	2402      	movs	r4, #2
    5262:	4311      	orrs	r1, r2
    5264:	d1e6      	bne.n	5234 <__ledf2+0x50>
    5266:	e7d7      	b.n	5218 <__ledf2+0x34>
    5268:	4661      	mov	r1, ip
    526a:	430a      	orrs	r2, r1
    526c:	d1db      	bne.n	5226 <__ledf2+0x42>
    526e:	2400      	movs	r4, #0
    5270:	2800      	cmp	r0, #0
    5272:	d0df      	beq.n	5234 <__ledf2+0x50>
    5274:	e7e9      	b.n	524a <__ledf2+0x66>
    5276:	4661      	mov	r1, ip
    5278:	430a      	orrs	r2, r1
    527a:	d1e4      	bne.n	5246 <__ledf2+0x62>
    527c:	e7e5      	b.n	524a <__ledf2+0x66>
    527e:	42b5      	cmp	r5, r6
    5280:	dd03      	ble.n	528a <__ledf2+0xa6>
    5282:	2201      	movs	r2, #1
    5284:	425c      	negs	r4, r3
    5286:	4314      	orrs	r4, r2
    5288:	e7d4      	b.n	5234 <__ledf2+0x50>
    528a:	42b5      	cmp	r5, r6
    528c:	dbcd      	blt.n	522a <__ledf2+0x46>
    528e:	4567      	cmp	r7, ip
    5290:	d8db      	bhi.n	524a <__ledf2+0x66>
    5292:	d009      	beq.n	52a8 <__ledf2+0xc4>
    5294:	2400      	movs	r4, #0
    5296:	4567      	cmp	r7, ip
    5298:	d2cc      	bcs.n	5234 <__ledf2+0x50>
    529a:	4659      	mov	r1, fp
    529c:	424c      	negs	r4, r1
    529e:	4161      	adcs	r1, r4
    52a0:	2401      	movs	r4, #1
    52a2:	4249      	negs	r1, r1
    52a4:	430c      	orrs	r4, r1
    52a6:	e7c5      	b.n	5234 <__ledf2+0x50>
    52a8:	45c8      	cmp	r8, r9
    52aa:	d8ce      	bhi.n	524a <__ledf2+0x66>
    52ac:	2400      	movs	r4, #0
    52ae:	45c8      	cmp	r8, r9
    52b0:	d3f3      	bcc.n	529a <__ledf2+0xb6>
    52b2:	e7bf      	b.n	5234 <__ledf2+0x50>
    52b4:	000007ff 	.word	0x000007ff

000052b8 <__aeabi_dmul>:
    52b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    52ba:	465f      	mov	r7, fp
    52bc:	4656      	mov	r6, sl
    52be:	464d      	mov	r5, r9
    52c0:	4644      	mov	r4, r8
    52c2:	b4f0      	push	{r4, r5, r6, r7}
    52c4:	030d      	lsls	r5, r1, #12
    52c6:	4699      	mov	r9, r3
    52c8:	004e      	lsls	r6, r1, #1
    52ca:	0b2b      	lsrs	r3, r5, #12
    52cc:	b087      	sub	sp, #28
    52ce:	0007      	movs	r7, r0
    52d0:	4692      	mov	sl, r2
    52d2:	4680      	mov	r8, r0
    52d4:	469b      	mov	fp, r3
    52d6:	0d76      	lsrs	r6, r6, #21
    52d8:	0fcc      	lsrs	r4, r1, #31
    52da:	2e00      	cmp	r6, #0
    52dc:	d069      	beq.n	53b2 <__aeabi_dmul+0xfa>
    52de:	4b6d      	ldr	r3, [pc, #436]	; (5494 <__aeabi_dmul+0x1dc>)
    52e0:	429e      	cmp	r6, r3
    52e2:	d035      	beq.n	5350 <__aeabi_dmul+0x98>
    52e4:	465b      	mov	r3, fp
    52e6:	2280      	movs	r2, #128	; 0x80
    52e8:	00dd      	lsls	r5, r3, #3
    52ea:	0412      	lsls	r2, r2, #16
    52ec:	0f43      	lsrs	r3, r0, #29
    52ee:	4313      	orrs	r3, r2
    52f0:	432b      	orrs	r3, r5
    52f2:	469b      	mov	fp, r3
    52f4:	00c3      	lsls	r3, r0, #3
    52f6:	4698      	mov	r8, r3
    52f8:	4b67      	ldr	r3, [pc, #412]	; (5498 <__aeabi_dmul+0x1e0>)
    52fa:	2700      	movs	r7, #0
    52fc:	469c      	mov	ip, r3
    52fe:	2300      	movs	r3, #0
    5300:	4466      	add	r6, ip
    5302:	9301      	str	r3, [sp, #4]
    5304:	464a      	mov	r2, r9
    5306:	0315      	lsls	r5, r2, #12
    5308:	0050      	lsls	r0, r2, #1
    530a:	0fd2      	lsrs	r2, r2, #31
    530c:	4653      	mov	r3, sl
    530e:	0b2d      	lsrs	r5, r5, #12
    5310:	0d40      	lsrs	r0, r0, #21
    5312:	4691      	mov	r9, r2
    5314:	d100      	bne.n	5318 <__aeabi_dmul+0x60>
    5316:	e076      	b.n	5406 <__aeabi_dmul+0x14e>
    5318:	4a5e      	ldr	r2, [pc, #376]	; (5494 <__aeabi_dmul+0x1dc>)
    531a:	4290      	cmp	r0, r2
    531c:	d06c      	beq.n	53f8 <__aeabi_dmul+0x140>
    531e:	2280      	movs	r2, #128	; 0x80
    5320:	0f5b      	lsrs	r3, r3, #29
    5322:	0412      	lsls	r2, r2, #16
    5324:	4313      	orrs	r3, r2
    5326:	4a5c      	ldr	r2, [pc, #368]	; (5498 <__aeabi_dmul+0x1e0>)
    5328:	00ed      	lsls	r5, r5, #3
    532a:	4694      	mov	ip, r2
    532c:	431d      	orrs	r5, r3
    532e:	4653      	mov	r3, sl
    5330:	2200      	movs	r2, #0
    5332:	00db      	lsls	r3, r3, #3
    5334:	4460      	add	r0, ip
    5336:	4649      	mov	r1, r9
    5338:	1836      	adds	r6, r6, r0
    533a:	1c70      	adds	r0, r6, #1
    533c:	4061      	eors	r1, r4
    533e:	9002      	str	r0, [sp, #8]
    5340:	4317      	orrs	r7, r2
    5342:	2f0f      	cmp	r7, #15
    5344:	d900      	bls.n	5348 <__aeabi_dmul+0x90>
    5346:	e0af      	b.n	54a8 <__aeabi_dmul+0x1f0>
    5348:	4854      	ldr	r0, [pc, #336]	; (549c <__aeabi_dmul+0x1e4>)
    534a:	00bf      	lsls	r7, r7, #2
    534c:	59c7      	ldr	r7, [r0, r7]
    534e:	46bf      	mov	pc, r7
    5350:	465b      	mov	r3, fp
    5352:	431f      	orrs	r7, r3
    5354:	d000      	beq.n	5358 <__aeabi_dmul+0xa0>
    5356:	e088      	b.n	546a <__aeabi_dmul+0x1b2>
    5358:	2300      	movs	r3, #0
    535a:	469b      	mov	fp, r3
    535c:	4698      	mov	r8, r3
    535e:	3302      	adds	r3, #2
    5360:	2708      	movs	r7, #8
    5362:	9301      	str	r3, [sp, #4]
    5364:	e7ce      	b.n	5304 <__aeabi_dmul+0x4c>
    5366:	4649      	mov	r1, r9
    5368:	2a02      	cmp	r2, #2
    536a:	d06a      	beq.n	5442 <__aeabi_dmul+0x18a>
    536c:	2a03      	cmp	r2, #3
    536e:	d100      	bne.n	5372 <__aeabi_dmul+0xba>
    5370:	e209      	b.n	5786 <__aeabi_dmul+0x4ce>
    5372:	2a01      	cmp	r2, #1
    5374:	d000      	beq.n	5378 <__aeabi_dmul+0xc0>
    5376:	e1bb      	b.n	56f0 <__aeabi_dmul+0x438>
    5378:	4011      	ands	r1, r2
    537a:	2200      	movs	r2, #0
    537c:	2300      	movs	r3, #0
    537e:	2500      	movs	r5, #0
    5380:	4690      	mov	r8, r2
    5382:	b2cc      	uxtb	r4, r1
    5384:	2100      	movs	r1, #0
    5386:	032d      	lsls	r5, r5, #12
    5388:	0d0a      	lsrs	r2, r1, #20
    538a:	0512      	lsls	r2, r2, #20
    538c:	0b2d      	lsrs	r5, r5, #12
    538e:	4315      	orrs	r5, r2
    5390:	4a43      	ldr	r2, [pc, #268]	; (54a0 <__aeabi_dmul+0x1e8>)
    5392:	051b      	lsls	r3, r3, #20
    5394:	4015      	ands	r5, r2
    5396:	431d      	orrs	r5, r3
    5398:	006d      	lsls	r5, r5, #1
    539a:	07e4      	lsls	r4, r4, #31
    539c:	086d      	lsrs	r5, r5, #1
    539e:	4325      	orrs	r5, r4
    53a0:	4640      	mov	r0, r8
    53a2:	0029      	movs	r1, r5
    53a4:	b007      	add	sp, #28
    53a6:	bc3c      	pop	{r2, r3, r4, r5}
    53a8:	4690      	mov	r8, r2
    53aa:	4699      	mov	r9, r3
    53ac:	46a2      	mov	sl, r4
    53ae:	46ab      	mov	fp, r5
    53b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    53b2:	4303      	orrs	r3, r0
    53b4:	d052      	beq.n	545c <__aeabi_dmul+0x1a4>
    53b6:	465b      	mov	r3, fp
    53b8:	2b00      	cmp	r3, #0
    53ba:	d100      	bne.n	53be <__aeabi_dmul+0x106>
    53bc:	e18a      	b.n	56d4 <__aeabi_dmul+0x41c>
    53be:	4658      	mov	r0, fp
    53c0:	f000 ff84 	bl	62cc <__clzsi2>
    53c4:	0003      	movs	r3, r0
    53c6:	3b0b      	subs	r3, #11
    53c8:	2b1c      	cmp	r3, #28
    53ca:	dd00      	ble.n	53ce <__aeabi_dmul+0x116>
    53cc:	e17b      	b.n	56c6 <__aeabi_dmul+0x40e>
    53ce:	221d      	movs	r2, #29
    53d0:	1ad3      	subs	r3, r2, r3
    53d2:	003a      	movs	r2, r7
    53d4:	0001      	movs	r1, r0
    53d6:	465d      	mov	r5, fp
    53d8:	40da      	lsrs	r2, r3
    53da:	3908      	subs	r1, #8
    53dc:	408d      	lsls	r5, r1
    53de:	0013      	movs	r3, r2
    53e0:	408f      	lsls	r7, r1
    53e2:	432b      	orrs	r3, r5
    53e4:	469b      	mov	fp, r3
    53e6:	46b8      	mov	r8, r7
    53e8:	4b2e      	ldr	r3, [pc, #184]	; (54a4 <__aeabi_dmul+0x1ec>)
    53ea:	2700      	movs	r7, #0
    53ec:	469c      	mov	ip, r3
    53ee:	2300      	movs	r3, #0
    53f0:	4460      	add	r0, ip
    53f2:	4246      	negs	r6, r0
    53f4:	9301      	str	r3, [sp, #4]
    53f6:	e785      	b.n	5304 <__aeabi_dmul+0x4c>
    53f8:	4652      	mov	r2, sl
    53fa:	432a      	orrs	r2, r5
    53fc:	d12c      	bne.n	5458 <__aeabi_dmul+0x1a0>
    53fe:	2500      	movs	r5, #0
    5400:	2300      	movs	r3, #0
    5402:	2202      	movs	r2, #2
    5404:	e797      	b.n	5336 <__aeabi_dmul+0x7e>
    5406:	4652      	mov	r2, sl
    5408:	432a      	orrs	r2, r5
    540a:	d021      	beq.n	5450 <__aeabi_dmul+0x198>
    540c:	2d00      	cmp	r5, #0
    540e:	d100      	bne.n	5412 <__aeabi_dmul+0x15a>
    5410:	e154      	b.n	56bc <__aeabi_dmul+0x404>
    5412:	0028      	movs	r0, r5
    5414:	f000 ff5a 	bl	62cc <__clzsi2>
    5418:	0003      	movs	r3, r0
    541a:	3b0b      	subs	r3, #11
    541c:	2b1c      	cmp	r3, #28
    541e:	dd00      	ble.n	5422 <__aeabi_dmul+0x16a>
    5420:	e146      	b.n	56b0 <__aeabi_dmul+0x3f8>
    5422:	211d      	movs	r1, #29
    5424:	1acb      	subs	r3, r1, r3
    5426:	4651      	mov	r1, sl
    5428:	0002      	movs	r2, r0
    542a:	40d9      	lsrs	r1, r3
    542c:	4653      	mov	r3, sl
    542e:	3a08      	subs	r2, #8
    5430:	4095      	lsls	r5, r2
    5432:	4093      	lsls	r3, r2
    5434:	430d      	orrs	r5, r1
    5436:	4a1b      	ldr	r2, [pc, #108]	; (54a4 <__aeabi_dmul+0x1ec>)
    5438:	4694      	mov	ip, r2
    543a:	4460      	add	r0, ip
    543c:	4240      	negs	r0, r0
    543e:	2200      	movs	r2, #0
    5440:	e779      	b.n	5336 <__aeabi_dmul+0x7e>
    5442:	2401      	movs	r4, #1
    5444:	2200      	movs	r2, #0
    5446:	400c      	ands	r4, r1
    5448:	4b12      	ldr	r3, [pc, #72]	; (5494 <__aeabi_dmul+0x1dc>)
    544a:	2500      	movs	r5, #0
    544c:	4690      	mov	r8, r2
    544e:	e799      	b.n	5384 <__aeabi_dmul+0xcc>
    5450:	2500      	movs	r5, #0
    5452:	2300      	movs	r3, #0
    5454:	2201      	movs	r2, #1
    5456:	e76e      	b.n	5336 <__aeabi_dmul+0x7e>
    5458:	2203      	movs	r2, #3
    545a:	e76c      	b.n	5336 <__aeabi_dmul+0x7e>
    545c:	2300      	movs	r3, #0
    545e:	469b      	mov	fp, r3
    5460:	4698      	mov	r8, r3
    5462:	3301      	adds	r3, #1
    5464:	2704      	movs	r7, #4
    5466:	9301      	str	r3, [sp, #4]
    5468:	e74c      	b.n	5304 <__aeabi_dmul+0x4c>
    546a:	2303      	movs	r3, #3
    546c:	270c      	movs	r7, #12
    546e:	9301      	str	r3, [sp, #4]
    5470:	e748      	b.n	5304 <__aeabi_dmul+0x4c>
    5472:	2300      	movs	r3, #0
    5474:	2580      	movs	r5, #128	; 0x80
    5476:	4698      	mov	r8, r3
    5478:	2400      	movs	r4, #0
    547a:	032d      	lsls	r5, r5, #12
    547c:	4b05      	ldr	r3, [pc, #20]	; (5494 <__aeabi_dmul+0x1dc>)
    547e:	e781      	b.n	5384 <__aeabi_dmul+0xcc>
    5480:	465d      	mov	r5, fp
    5482:	4643      	mov	r3, r8
    5484:	9a01      	ldr	r2, [sp, #4]
    5486:	e76f      	b.n	5368 <__aeabi_dmul+0xb0>
    5488:	465d      	mov	r5, fp
    548a:	4643      	mov	r3, r8
    548c:	0021      	movs	r1, r4
    548e:	9a01      	ldr	r2, [sp, #4]
    5490:	e76a      	b.n	5368 <__aeabi_dmul+0xb0>
    5492:	46c0      	nop			; (mov r8, r8)
    5494:	000007ff 	.word	0x000007ff
    5498:	fffffc01 	.word	0xfffffc01
    549c:	00006560 	.word	0x00006560
    54a0:	800fffff 	.word	0x800fffff
    54a4:	000003f3 	.word	0x000003f3
    54a8:	4642      	mov	r2, r8
    54aa:	0c12      	lsrs	r2, r2, #16
    54ac:	4691      	mov	r9, r2
    54ae:	0c1a      	lsrs	r2, r3, #16
    54b0:	4694      	mov	ip, r2
    54b2:	4642      	mov	r2, r8
    54b4:	0417      	lsls	r7, r2, #16
    54b6:	464a      	mov	r2, r9
    54b8:	041b      	lsls	r3, r3, #16
    54ba:	0c1b      	lsrs	r3, r3, #16
    54bc:	435a      	muls	r2, r3
    54be:	4660      	mov	r0, ip
    54c0:	4690      	mov	r8, r2
    54c2:	464a      	mov	r2, r9
    54c4:	4342      	muls	r2, r0
    54c6:	0010      	movs	r0, r2
    54c8:	9203      	str	r2, [sp, #12]
    54ca:	4662      	mov	r2, ip
    54cc:	001c      	movs	r4, r3
    54ce:	0c3f      	lsrs	r7, r7, #16
    54d0:	437a      	muls	r2, r7
    54d2:	437c      	muls	r4, r7
    54d4:	4442      	add	r2, r8
    54d6:	9201      	str	r2, [sp, #4]
    54d8:	0c22      	lsrs	r2, r4, #16
    54da:	4692      	mov	sl, r2
    54dc:	9a01      	ldr	r2, [sp, #4]
    54de:	4452      	add	r2, sl
    54e0:	4590      	cmp	r8, r2
    54e2:	d906      	bls.n	54f2 <__aeabi_dmul+0x23a>
    54e4:	4682      	mov	sl, r0
    54e6:	2080      	movs	r0, #128	; 0x80
    54e8:	0240      	lsls	r0, r0, #9
    54ea:	4680      	mov	r8, r0
    54ec:	44c2      	add	sl, r8
    54ee:	4650      	mov	r0, sl
    54f0:	9003      	str	r0, [sp, #12]
    54f2:	0c10      	lsrs	r0, r2, #16
    54f4:	9004      	str	r0, [sp, #16]
    54f6:	4648      	mov	r0, r9
    54f8:	0424      	lsls	r4, r4, #16
    54fa:	0c24      	lsrs	r4, r4, #16
    54fc:	0412      	lsls	r2, r2, #16
    54fe:	1912      	adds	r2, r2, r4
    5500:	9205      	str	r2, [sp, #20]
    5502:	0c2a      	lsrs	r2, r5, #16
    5504:	042d      	lsls	r5, r5, #16
    5506:	0c2d      	lsrs	r5, r5, #16
    5508:	4368      	muls	r0, r5
    550a:	002c      	movs	r4, r5
    550c:	4682      	mov	sl, r0
    550e:	4648      	mov	r0, r9
    5510:	437c      	muls	r4, r7
    5512:	4350      	muls	r0, r2
    5514:	4681      	mov	r9, r0
    5516:	0c20      	lsrs	r0, r4, #16
    5518:	4680      	mov	r8, r0
    551a:	4357      	muls	r7, r2
    551c:	4457      	add	r7, sl
    551e:	4447      	add	r7, r8
    5520:	45ba      	cmp	sl, r7
    5522:	d903      	bls.n	552c <__aeabi_dmul+0x274>
    5524:	2080      	movs	r0, #128	; 0x80
    5526:	0240      	lsls	r0, r0, #9
    5528:	4680      	mov	r8, r0
    552a:	44c1      	add	r9, r8
    552c:	0c38      	lsrs	r0, r7, #16
    552e:	043f      	lsls	r7, r7, #16
    5530:	46b8      	mov	r8, r7
    5532:	4448      	add	r0, r9
    5534:	0424      	lsls	r4, r4, #16
    5536:	0c24      	lsrs	r4, r4, #16
    5538:	9001      	str	r0, [sp, #4]
    553a:	9804      	ldr	r0, [sp, #16]
    553c:	44a0      	add	r8, r4
    553e:	4440      	add	r0, r8
    5540:	9004      	str	r0, [sp, #16]
    5542:	4658      	mov	r0, fp
    5544:	0c00      	lsrs	r0, r0, #16
    5546:	4681      	mov	r9, r0
    5548:	4658      	mov	r0, fp
    554a:	0404      	lsls	r4, r0, #16
    554c:	0c20      	lsrs	r0, r4, #16
    554e:	4682      	mov	sl, r0
    5550:	0007      	movs	r7, r0
    5552:	4648      	mov	r0, r9
    5554:	435f      	muls	r7, r3
    5556:	464c      	mov	r4, r9
    5558:	4343      	muls	r3, r0
    555a:	4660      	mov	r0, ip
    555c:	4360      	muls	r0, r4
    555e:	4664      	mov	r4, ip
    5560:	4683      	mov	fp, r0
    5562:	4650      	mov	r0, sl
    5564:	4344      	muls	r4, r0
    5566:	0c38      	lsrs	r0, r7, #16
    5568:	4684      	mov	ip, r0
    556a:	18e4      	adds	r4, r4, r3
    556c:	4464      	add	r4, ip
    556e:	42a3      	cmp	r3, r4
    5570:	d903      	bls.n	557a <__aeabi_dmul+0x2c2>
    5572:	2380      	movs	r3, #128	; 0x80
    5574:	025b      	lsls	r3, r3, #9
    5576:	469c      	mov	ip, r3
    5578:	44e3      	add	fp, ip
    557a:	4648      	mov	r0, r9
    557c:	043f      	lsls	r7, r7, #16
    557e:	0c23      	lsrs	r3, r4, #16
    5580:	0c3f      	lsrs	r7, r7, #16
    5582:	0424      	lsls	r4, r4, #16
    5584:	19e4      	adds	r4, r4, r7
    5586:	4657      	mov	r7, sl
    5588:	4368      	muls	r0, r5
    558a:	436f      	muls	r7, r5
    558c:	4684      	mov	ip, r0
    558e:	464d      	mov	r5, r9
    5590:	4650      	mov	r0, sl
    5592:	4355      	muls	r5, r2
    5594:	4342      	muls	r2, r0
    5596:	0c38      	lsrs	r0, r7, #16
    5598:	4681      	mov	r9, r0
    559a:	4462      	add	r2, ip
    559c:	444a      	add	r2, r9
    559e:	445b      	add	r3, fp
    55a0:	4594      	cmp	ip, r2
    55a2:	d903      	bls.n	55ac <__aeabi_dmul+0x2f4>
    55a4:	2080      	movs	r0, #128	; 0x80
    55a6:	0240      	lsls	r0, r0, #9
    55a8:	4684      	mov	ip, r0
    55aa:	4465      	add	r5, ip
    55ac:	9803      	ldr	r0, [sp, #12]
    55ae:	043f      	lsls	r7, r7, #16
    55b0:	4683      	mov	fp, r0
    55b2:	9804      	ldr	r0, [sp, #16]
    55b4:	0c3f      	lsrs	r7, r7, #16
    55b6:	4684      	mov	ip, r0
    55b8:	44e3      	add	fp, ip
    55ba:	45c3      	cmp	fp, r8
    55bc:	4180      	sbcs	r0, r0
    55be:	4240      	negs	r0, r0
    55c0:	4682      	mov	sl, r0
    55c2:	0410      	lsls	r0, r2, #16
    55c4:	4684      	mov	ip, r0
    55c6:	9801      	ldr	r0, [sp, #4]
    55c8:	4467      	add	r7, ip
    55ca:	4684      	mov	ip, r0
    55cc:	4467      	add	r7, ip
    55ce:	44a3      	add	fp, r4
    55d0:	46bc      	mov	ip, r7
    55d2:	45a3      	cmp	fp, r4
    55d4:	41a4      	sbcs	r4, r4
    55d6:	4699      	mov	r9, r3
    55d8:	44d4      	add	ip, sl
    55da:	4264      	negs	r4, r4
    55dc:	4287      	cmp	r7, r0
    55de:	41bf      	sbcs	r7, r7
    55e0:	45d4      	cmp	ip, sl
    55e2:	4180      	sbcs	r0, r0
    55e4:	44e1      	add	r9, ip
    55e6:	46a0      	mov	r8, r4
    55e8:	4599      	cmp	r9, r3
    55ea:	419b      	sbcs	r3, r3
    55ec:	427f      	negs	r7, r7
    55ee:	4240      	negs	r0, r0
    55f0:	44c8      	add	r8, r9
    55f2:	4307      	orrs	r7, r0
    55f4:	0c12      	lsrs	r2, r2, #16
    55f6:	18ba      	adds	r2, r7, r2
    55f8:	45a0      	cmp	r8, r4
    55fa:	41a4      	sbcs	r4, r4
    55fc:	425f      	negs	r7, r3
    55fe:	003b      	movs	r3, r7
    5600:	4264      	negs	r4, r4
    5602:	4323      	orrs	r3, r4
    5604:	18d7      	adds	r7, r2, r3
    5606:	4643      	mov	r3, r8
    5608:	197d      	adds	r5, r7, r5
    560a:	0ddb      	lsrs	r3, r3, #23
    560c:	026d      	lsls	r5, r5, #9
    560e:	431d      	orrs	r5, r3
    5610:	465b      	mov	r3, fp
    5612:	025a      	lsls	r2, r3, #9
    5614:	9b05      	ldr	r3, [sp, #20]
    5616:	431a      	orrs	r2, r3
    5618:	1e53      	subs	r3, r2, #1
    561a:	419a      	sbcs	r2, r3
    561c:	465b      	mov	r3, fp
    561e:	0ddb      	lsrs	r3, r3, #23
    5620:	431a      	orrs	r2, r3
    5622:	4643      	mov	r3, r8
    5624:	025b      	lsls	r3, r3, #9
    5626:	4313      	orrs	r3, r2
    5628:	01ea      	lsls	r2, r5, #7
    562a:	d507      	bpl.n	563c <__aeabi_dmul+0x384>
    562c:	2201      	movs	r2, #1
    562e:	085c      	lsrs	r4, r3, #1
    5630:	4013      	ands	r3, r2
    5632:	4323      	orrs	r3, r4
    5634:	07ea      	lsls	r2, r5, #31
    5636:	9e02      	ldr	r6, [sp, #8]
    5638:	4313      	orrs	r3, r2
    563a:	086d      	lsrs	r5, r5, #1
    563c:	4a57      	ldr	r2, [pc, #348]	; (579c <__aeabi_dmul+0x4e4>)
    563e:	18b2      	adds	r2, r6, r2
    5640:	2a00      	cmp	r2, #0
    5642:	dd4b      	ble.n	56dc <__aeabi_dmul+0x424>
    5644:	0758      	lsls	r0, r3, #29
    5646:	d009      	beq.n	565c <__aeabi_dmul+0x3a4>
    5648:	200f      	movs	r0, #15
    564a:	4018      	ands	r0, r3
    564c:	2804      	cmp	r0, #4
    564e:	d005      	beq.n	565c <__aeabi_dmul+0x3a4>
    5650:	1d18      	adds	r0, r3, #4
    5652:	4298      	cmp	r0, r3
    5654:	419b      	sbcs	r3, r3
    5656:	425b      	negs	r3, r3
    5658:	18ed      	adds	r5, r5, r3
    565a:	0003      	movs	r3, r0
    565c:	01e8      	lsls	r0, r5, #7
    565e:	d504      	bpl.n	566a <__aeabi_dmul+0x3b2>
    5660:	4a4f      	ldr	r2, [pc, #316]	; (57a0 <__aeabi_dmul+0x4e8>)
    5662:	4015      	ands	r5, r2
    5664:	2280      	movs	r2, #128	; 0x80
    5666:	00d2      	lsls	r2, r2, #3
    5668:	18b2      	adds	r2, r6, r2
    566a:	484e      	ldr	r0, [pc, #312]	; (57a4 <__aeabi_dmul+0x4ec>)
    566c:	4282      	cmp	r2, r0
    566e:	dd00      	ble.n	5672 <__aeabi_dmul+0x3ba>
    5670:	e6e7      	b.n	5442 <__aeabi_dmul+0x18a>
    5672:	2401      	movs	r4, #1
    5674:	08db      	lsrs	r3, r3, #3
    5676:	0768      	lsls	r0, r5, #29
    5678:	4318      	orrs	r0, r3
    567a:	026d      	lsls	r5, r5, #9
    567c:	0553      	lsls	r3, r2, #21
    567e:	4680      	mov	r8, r0
    5680:	0b2d      	lsrs	r5, r5, #12
    5682:	0d5b      	lsrs	r3, r3, #21
    5684:	400c      	ands	r4, r1
    5686:	e67d      	b.n	5384 <__aeabi_dmul+0xcc>
    5688:	2280      	movs	r2, #128	; 0x80
    568a:	4659      	mov	r1, fp
    568c:	0312      	lsls	r2, r2, #12
    568e:	4211      	tst	r1, r2
    5690:	d008      	beq.n	56a4 <__aeabi_dmul+0x3ec>
    5692:	4215      	tst	r5, r2
    5694:	d106      	bne.n	56a4 <__aeabi_dmul+0x3ec>
    5696:	4315      	orrs	r5, r2
    5698:	032d      	lsls	r5, r5, #12
    569a:	4698      	mov	r8, r3
    569c:	0b2d      	lsrs	r5, r5, #12
    569e:	464c      	mov	r4, r9
    56a0:	4b41      	ldr	r3, [pc, #260]	; (57a8 <__aeabi_dmul+0x4f0>)
    56a2:	e66f      	b.n	5384 <__aeabi_dmul+0xcc>
    56a4:	465d      	mov	r5, fp
    56a6:	4315      	orrs	r5, r2
    56a8:	032d      	lsls	r5, r5, #12
    56aa:	0b2d      	lsrs	r5, r5, #12
    56ac:	4b3e      	ldr	r3, [pc, #248]	; (57a8 <__aeabi_dmul+0x4f0>)
    56ae:	e669      	b.n	5384 <__aeabi_dmul+0xcc>
    56b0:	0003      	movs	r3, r0
    56b2:	4655      	mov	r5, sl
    56b4:	3b28      	subs	r3, #40	; 0x28
    56b6:	409d      	lsls	r5, r3
    56b8:	2300      	movs	r3, #0
    56ba:	e6bc      	b.n	5436 <__aeabi_dmul+0x17e>
    56bc:	4650      	mov	r0, sl
    56be:	f000 fe05 	bl	62cc <__clzsi2>
    56c2:	3020      	adds	r0, #32
    56c4:	e6a8      	b.n	5418 <__aeabi_dmul+0x160>
    56c6:	0003      	movs	r3, r0
    56c8:	3b28      	subs	r3, #40	; 0x28
    56ca:	409f      	lsls	r7, r3
    56cc:	2300      	movs	r3, #0
    56ce:	46bb      	mov	fp, r7
    56d0:	4698      	mov	r8, r3
    56d2:	e689      	b.n	53e8 <__aeabi_dmul+0x130>
    56d4:	f000 fdfa 	bl	62cc <__clzsi2>
    56d8:	3020      	adds	r0, #32
    56da:	e673      	b.n	53c4 <__aeabi_dmul+0x10c>
    56dc:	2401      	movs	r4, #1
    56de:	1aa6      	subs	r6, r4, r2
    56e0:	2e38      	cmp	r6, #56	; 0x38
    56e2:	dd07      	ble.n	56f4 <__aeabi_dmul+0x43c>
    56e4:	2200      	movs	r2, #0
    56e6:	400c      	ands	r4, r1
    56e8:	2300      	movs	r3, #0
    56ea:	2500      	movs	r5, #0
    56ec:	4690      	mov	r8, r2
    56ee:	e649      	b.n	5384 <__aeabi_dmul+0xcc>
    56f0:	9e02      	ldr	r6, [sp, #8]
    56f2:	e7a3      	b.n	563c <__aeabi_dmul+0x384>
    56f4:	2e1f      	cmp	r6, #31
    56f6:	dc20      	bgt.n	573a <__aeabi_dmul+0x482>
    56f8:	2220      	movs	r2, #32
    56fa:	002c      	movs	r4, r5
    56fc:	0018      	movs	r0, r3
    56fe:	1b92      	subs	r2, r2, r6
    5700:	40f0      	lsrs	r0, r6
    5702:	4094      	lsls	r4, r2
    5704:	4093      	lsls	r3, r2
    5706:	4304      	orrs	r4, r0
    5708:	1e58      	subs	r0, r3, #1
    570a:	4183      	sbcs	r3, r0
    570c:	431c      	orrs	r4, r3
    570e:	40f5      	lsrs	r5, r6
    5710:	0763      	lsls	r3, r4, #29
    5712:	d009      	beq.n	5728 <__aeabi_dmul+0x470>
    5714:	230f      	movs	r3, #15
    5716:	4023      	ands	r3, r4
    5718:	2b04      	cmp	r3, #4
    571a:	d005      	beq.n	5728 <__aeabi_dmul+0x470>
    571c:	0023      	movs	r3, r4
    571e:	1d1c      	adds	r4, r3, #4
    5720:	429c      	cmp	r4, r3
    5722:	4192      	sbcs	r2, r2
    5724:	4252      	negs	r2, r2
    5726:	18ad      	adds	r5, r5, r2
    5728:	022b      	lsls	r3, r5, #8
    572a:	d51f      	bpl.n	576c <__aeabi_dmul+0x4b4>
    572c:	2401      	movs	r4, #1
    572e:	2200      	movs	r2, #0
    5730:	400c      	ands	r4, r1
    5732:	2301      	movs	r3, #1
    5734:	2500      	movs	r5, #0
    5736:	4690      	mov	r8, r2
    5738:	e624      	b.n	5384 <__aeabi_dmul+0xcc>
    573a:	201f      	movs	r0, #31
    573c:	002c      	movs	r4, r5
    573e:	4240      	negs	r0, r0
    5740:	1a82      	subs	r2, r0, r2
    5742:	40d4      	lsrs	r4, r2
    5744:	2e20      	cmp	r6, #32
    5746:	d01c      	beq.n	5782 <__aeabi_dmul+0x4ca>
    5748:	2240      	movs	r2, #64	; 0x40
    574a:	1b96      	subs	r6, r2, r6
    574c:	40b5      	lsls	r5, r6
    574e:	432b      	orrs	r3, r5
    5750:	1e58      	subs	r0, r3, #1
    5752:	4183      	sbcs	r3, r0
    5754:	2007      	movs	r0, #7
    5756:	4323      	orrs	r3, r4
    5758:	4018      	ands	r0, r3
    575a:	2500      	movs	r5, #0
    575c:	2800      	cmp	r0, #0
    575e:	d009      	beq.n	5774 <__aeabi_dmul+0x4bc>
    5760:	220f      	movs	r2, #15
    5762:	2500      	movs	r5, #0
    5764:	401a      	ands	r2, r3
    5766:	001c      	movs	r4, r3
    5768:	2a04      	cmp	r2, #4
    576a:	d1d8      	bne.n	571e <__aeabi_dmul+0x466>
    576c:	0023      	movs	r3, r4
    576e:	0768      	lsls	r0, r5, #29
    5770:	026d      	lsls	r5, r5, #9
    5772:	0b2d      	lsrs	r5, r5, #12
    5774:	2401      	movs	r4, #1
    5776:	08db      	lsrs	r3, r3, #3
    5778:	4303      	orrs	r3, r0
    577a:	4698      	mov	r8, r3
    577c:	400c      	ands	r4, r1
    577e:	2300      	movs	r3, #0
    5780:	e600      	b.n	5384 <__aeabi_dmul+0xcc>
    5782:	2500      	movs	r5, #0
    5784:	e7e3      	b.n	574e <__aeabi_dmul+0x496>
    5786:	2280      	movs	r2, #128	; 0x80
    5788:	2401      	movs	r4, #1
    578a:	0312      	lsls	r2, r2, #12
    578c:	4315      	orrs	r5, r2
    578e:	032d      	lsls	r5, r5, #12
    5790:	4698      	mov	r8, r3
    5792:	0b2d      	lsrs	r5, r5, #12
    5794:	400c      	ands	r4, r1
    5796:	4b04      	ldr	r3, [pc, #16]	; (57a8 <__aeabi_dmul+0x4f0>)
    5798:	e5f4      	b.n	5384 <__aeabi_dmul+0xcc>
    579a:	46c0      	nop			; (mov r8, r8)
    579c:	000003ff 	.word	0x000003ff
    57a0:	feffffff 	.word	0xfeffffff
    57a4:	000007fe 	.word	0x000007fe
    57a8:	000007ff 	.word	0x000007ff

000057ac <__aeabi_dsub>:
    57ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    57ae:	4657      	mov	r7, sl
    57b0:	464e      	mov	r6, r9
    57b2:	4645      	mov	r5, r8
    57b4:	b4e0      	push	{r5, r6, r7}
    57b6:	000e      	movs	r6, r1
    57b8:	0011      	movs	r1, r2
    57ba:	0ff2      	lsrs	r2, r6, #31
    57bc:	4692      	mov	sl, r2
    57be:	00c5      	lsls	r5, r0, #3
    57c0:	0f42      	lsrs	r2, r0, #29
    57c2:	0318      	lsls	r0, r3, #12
    57c4:	0337      	lsls	r7, r6, #12
    57c6:	0074      	lsls	r4, r6, #1
    57c8:	0a40      	lsrs	r0, r0, #9
    57ca:	0f4e      	lsrs	r6, r1, #29
    57cc:	0a7f      	lsrs	r7, r7, #9
    57ce:	4330      	orrs	r0, r6
    57d0:	4ecf      	ldr	r6, [pc, #828]	; (5b10 <__aeabi_dsub+0x364>)
    57d2:	4317      	orrs	r7, r2
    57d4:	005a      	lsls	r2, r3, #1
    57d6:	0d64      	lsrs	r4, r4, #21
    57d8:	0d52      	lsrs	r2, r2, #21
    57da:	0fdb      	lsrs	r3, r3, #31
    57dc:	00c9      	lsls	r1, r1, #3
    57de:	42b2      	cmp	r2, r6
    57e0:	d100      	bne.n	57e4 <__aeabi_dsub+0x38>
    57e2:	e0e5      	b.n	59b0 <__aeabi_dsub+0x204>
    57e4:	2601      	movs	r6, #1
    57e6:	4073      	eors	r3, r6
    57e8:	1aa6      	subs	r6, r4, r2
    57ea:	46b4      	mov	ip, r6
    57ec:	4553      	cmp	r3, sl
    57ee:	d100      	bne.n	57f2 <__aeabi_dsub+0x46>
    57f0:	e0af      	b.n	5952 <__aeabi_dsub+0x1a6>
    57f2:	2e00      	cmp	r6, #0
    57f4:	dc00      	bgt.n	57f8 <__aeabi_dsub+0x4c>
    57f6:	e10d      	b.n	5a14 <__aeabi_dsub+0x268>
    57f8:	2a00      	cmp	r2, #0
    57fa:	d13a      	bne.n	5872 <__aeabi_dsub+0xc6>
    57fc:	0003      	movs	r3, r0
    57fe:	430b      	orrs	r3, r1
    5800:	d000      	beq.n	5804 <__aeabi_dsub+0x58>
    5802:	e0e4      	b.n	59ce <__aeabi_dsub+0x222>
    5804:	076b      	lsls	r3, r5, #29
    5806:	d009      	beq.n	581c <__aeabi_dsub+0x70>
    5808:	230f      	movs	r3, #15
    580a:	402b      	ands	r3, r5
    580c:	2b04      	cmp	r3, #4
    580e:	d005      	beq.n	581c <__aeabi_dsub+0x70>
    5810:	1d2b      	adds	r3, r5, #4
    5812:	42ab      	cmp	r3, r5
    5814:	41ad      	sbcs	r5, r5
    5816:	426d      	negs	r5, r5
    5818:	197f      	adds	r7, r7, r5
    581a:	001d      	movs	r5, r3
    581c:	023b      	lsls	r3, r7, #8
    581e:	d400      	bmi.n	5822 <__aeabi_dsub+0x76>
    5820:	e088      	b.n	5934 <__aeabi_dsub+0x188>
    5822:	4bbb      	ldr	r3, [pc, #748]	; (5b10 <__aeabi_dsub+0x364>)
    5824:	3401      	adds	r4, #1
    5826:	429c      	cmp	r4, r3
    5828:	d100      	bne.n	582c <__aeabi_dsub+0x80>
    582a:	e110      	b.n	5a4e <__aeabi_dsub+0x2a2>
    582c:	003a      	movs	r2, r7
    582e:	4bb9      	ldr	r3, [pc, #740]	; (5b14 <__aeabi_dsub+0x368>)
    5830:	4651      	mov	r1, sl
    5832:	401a      	ands	r2, r3
    5834:	2301      	movs	r3, #1
    5836:	0750      	lsls	r0, r2, #29
    5838:	08ed      	lsrs	r5, r5, #3
    583a:	0252      	lsls	r2, r2, #9
    583c:	0564      	lsls	r4, r4, #21
    583e:	4305      	orrs	r5, r0
    5840:	0b12      	lsrs	r2, r2, #12
    5842:	0d64      	lsrs	r4, r4, #21
    5844:	400b      	ands	r3, r1
    5846:	2100      	movs	r1, #0
    5848:	0028      	movs	r0, r5
    584a:	0312      	lsls	r2, r2, #12
    584c:	0d0d      	lsrs	r5, r1, #20
    584e:	0b12      	lsrs	r2, r2, #12
    5850:	0564      	lsls	r4, r4, #21
    5852:	052d      	lsls	r5, r5, #20
    5854:	4315      	orrs	r5, r2
    5856:	0862      	lsrs	r2, r4, #1
    5858:	4caf      	ldr	r4, [pc, #700]	; (5b18 <__aeabi_dsub+0x36c>)
    585a:	07db      	lsls	r3, r3, #31
    585c:	402c      	ands	r4, r5
    585e:	4314      	orrs	r4, r2
    5860:	0064      	lsls	r4, r4, #1
    5862:	0864      	lsrs	r4, r4, #1
    5864:	431c      	orrs	r4, r3
    5866:	0021      	movs	r1, r4
    5868:	bc1c      	pop	{r2, r3, r4}
    586a:	4690      	mov	r8, r2
    586c:	4699      	mov	r9, r3
    586e:	46a2      	mov	sl, r4
    5870:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5872:	4ba7      	ldr	r3, [pc, #668]	; (5b10 <__aeabi_dsub+0x364>)
    5874:	429c      	cmp	r4, r3
    5876:	d0c5      	beq.n	5804 <__aeabi_dsub+0x58>
    5878:	2380      	movs	r3, #128	; 0x80
    587a:	041b      	lsls	r3, r3, #16
    587c:	4318      	orrs	r0, r3
    587e:	4663      	mov	r3, ip
    5880:	2b38      	cmp	r3, #56	; 0x38
    5882:	dd00      	ble.n	5886 <__aeabi_dsub+0xda>
    5884:	e0fd      	b.n	5a82 <__aeabi_dsub+0x2d6>
    5886:	2b1f      	cmp	r3, #31
    5888:	dd00      	ble.n	588c <__aeabi_dsub+0xe0>
    588a:	e130      	b.n	5aee <__aeabi_dsub+0x342>
    588c:	4662      	mov	r2, ip
    588e:	2320      	movs	r3, #32
    5890:	1a9b      	subs	r3, r3, r2
    5892:	0002      	movs	r2, r0
    5894:	409a      	lsls	r2, r3
    5896:	4666      	mov	r6, ip
    5898:	4690      	mov	r8, r2
    589a:	000a      	movs	r2, r1
    589c:	4099      	lsls	r1, r3
    589e:	40f2      	lsrs	r2, r6
    58a0:	4646      	mov	r6, r8
    58a2:	1e4b      	subs	r3, r1, #1
    58a4:	4199      	sbcs	r1, r3
    58a6:	4332      	orrs	r2, r6
    58a8:	4311      	orrs	r1, r2
    58aa:	4663      	mov	r3, ip
    58ac:	0002      	movs	r2, r0
    58ae:	40da      	lsrs	r2, r3
    58b0:	1a69      	subs	r1, r5, r1
    58b2:	428d      	cmp	r5, r1
    58b4:	419b      	sbcs	r3, r3
    58b6:	000d      	movs	r5, r1
    58b8:	1aba      	subs	r2, r7, r2
    58ba:	425b      	negs	r3, r3
    58bc:	1ad7      	subs	r7, r2, r3
    58be:	023b      	lsls	r3, r7, #8
    58c0:	d535      	bpl.n	592e <__aeabi_dsub+0x182>
    58c2:	027a      	lsls	r2, r7, #9
    58c4:	0a53      	lsrs	r3, r2, #9
    58c6:	4698      	mov	r8, r3
    58c8:	4643      	mov	r3, r8
    58ca:	2b00      	cmp	r3, #0
    58cc:	d100      	bne.n	58d0 <__aeabi_dsub+0x124>
    58ce:	e0c4      	b.n	5a5a <__aeabi_dsub+0x2ae>
    58d0:	4640      	mov	r0, r8
    58d2:	f000 fcfb 	bl	62cc <__clzsi2>
    58d6:	0003      	movs	r3, r0
    58d8:	3b08      	subs	r3, #8
    58da:	2b1f      	cmp	r3, #31
    58dc:	dd00      	ble.n	58e0 <__aeabi_dsub+0x134>
    58de:	e0c5      	b.n	5a6c <__aeabi_dsub+0x2c0>
    58e0:	2220      	movs	r2, #32
    58e2:	0029      	movs	r1, r5
    58e4:	1ad2      	subs	r2, r2, r3
    58e6:	4647      	mov	r7, r8
    58e8:	40d1      	lsrs	r1, r2
    58ea:	409f      	lsls	r7, r3
    58ec:	000a      	movs	r2, r1
    58ee:	409d      	lsls	r5, r3
    58f0:	433a      	orrs	r2, r7
    58f2:	429c      	cmp	r4, r3
    58f4:	dd00      	ble.n	58f8 <__aeabi_dsub+0x14c>
    58f6:	e0c0      	b.n	5a7a <__aeabi_dsub+0x2ce>
    58f8:	1b1c      	subs	r4, r3, r4
    58fa:	1c63      	adds	r3, r4, #1
    58fc:	2b1f      	cmp	r3, #31
    58fe:	dd00      	ble.n	5902 <__aeabi_dsub+0x156>
    5900:	e0e4      	b.n	5acc <__aeabi_dsub+0x320>
    5902:	2120      	movs	r1, #32
    5904:	0014      	movs	r4, r2
    5906:	0028      	movs	r0, r5
    5908:	1ac9      	subs	r1, r1, r3
    590a:	40d8      	lsrs	r0, r3
    590c:	408c      	lsls	r4, r1
    590e:	408d      	lsls	r5, r1
    5910:	4304      	orrs	r4, r0
    5912:	40da      	lsrs	r2, r3
    5914:	1e68      	subs	r0, r5, #1
    5916:	4185      	sbcs	r5, r0
    5918:	0017      	movs	r7, r2
    591a:	4325      	orrs	r5, r4
    591c:	2400      	movs	r4, #0
    591e:	e771      	b.n	5804 <__aeabi_dsub+0x58>
    5920:	4642      	mov	r2, r8
    5922:	4663      	mov	r3, ip
    5924:	431a      	orrs	r2, r3
    5926:	d100      	bne.n	592a <__aeabi_dsub+0x17e>
    5928:	e24c      	b.n	5dc4 <__aeabi_dsub+0x618>
    592a:	4667      	mov	r7, ip
    592c:	4645      	mov	r5, r8
    592e:	076b      	lsls	r3, r5, #29
    5930:	d000      	beq.n	5934 <__aeabi_dsub+0x188>
    5932:	e769      	b.n	5808 <__aeabi_dsub+0x5c>
    5934:	2301      	movs	r3, #1
    5936:	4651      	mov	r1, sl
    5938:	0778      	lsls	r0, r7, #29
    593a:	08ed      	lsrs	r5, r5, #3
    593c:	08fa      	lsrs	r2, r7, #3
    593e:	400b      	ands	r3, r1
    5940:	4305      	orrs	r5, r0
    5942:	4973      	ldr	r1, [pc, #460]	; (5b10 <__aeabi_dsub+0x364>)
    5944:	428c      	cmp	r4, r1
    5946:	d038      	beq.n	59ba <__aeabi_dsub+0x20e>
    5948:	0312      	lsls	r2, r2, #12
    594a:	0564      	lsls	r4, r4, #21
    594c:	0b12      	lsrs	r2, r2, #12
    594e:	0d64      	lsrs	r4, r4, #21
    5950:	e779      	b.n	5846 <__aeabi_dsub+0x9a>
    5952:	2e00      	cmp	r6, #0
    5954:	dc00      	bgt.n	5958 <__aeabi_dsub+0x1ac>
    5956:	e09a      	b.n	5a8e <__aeabi_dsub+0x2e2>
    5958:	2a00      	cmp	r2, #0
    595a:	d047      	beq.n	59ec <__aeabi_dsub+0x240>
    595c:	4a6c      	ldr	r2, [pc, #432]	; (5b10 <__aeabi_dsub+0x364>)
    595e:	4294      	cmp	r4, r2
    5960:	d100      	bne.n	5964 <__aeabi_dsub+0x1b8>
    5962:	e74f      	b.n	5804 <__aeabi_dsub+0x58>
    5964:	2280      	movs	r2, #128	; 0x80
    5966:	0412      	lsls	r2, r2, #16
    5968:	4310      	orrs	r0, r2
    596a:	4662      	mov	r2, ip
    596c:	2a38      	cmp	r2, #56	; 0x38
    596e:	dc00      	bgt.n	5972 <__aeabi_dsub+0x1c6>
    5970:	e108      	b.n	5b84 <__aeabi_dsub+0x3d8>
    5972:	4301      	orrs	r1, r0
    5974:	1e48      	subs	r0, r1, #1
    5976:	4181      	sbcs	r1, r0
    5978:	2200      	movs	r2, #0
    597a:	b2c9      	uxtb	r1, r1
    597c:	1949      	adds	r1, r1, r5
    597e:	19d2      	adds	r2, r2, r7
    5980:	42a9      	cmp	r1, r5
    5982:	41bf      	sbcs	r7, r7
    5984:	000d      	movs	r5, r1
    5986:	427f      	negs	r7, r7
    5988:	18bf      	adds	r7, r7, r2
    598a:	023a      	lsls	r2, r7, #8
    598c:	d400      	bmi.n	5990 <__aeabi_dsub+0x1e4>
    598e:	e142      	b.n	5c16 <__aeabi_dsub+0x46a>
    5990:	4a5f      	ldr	r2, [pc, #380]	; (5b10 <__aeabi_dsub+0x364>)
    5992:	3401      	adds	r4, #1
    5994:	4294      	cmp	r4, r2
    5996:	d100      	bne.n	599a <__aeabi_dsub+0x1ee>
    5998:	e14e      	b.n	5c38 <__aeabi_dsub+0x48c>
    599a:	2001      	movs	r0, #1
    599c:	4a5d      	ldr	r2, [pc, #372]	; (5b14 <__aeabi_dsub+0x368>)
    599e:	0869      	lsrs	r1, r5, #1
    59a0:	403a      	ands	r2, r7
    59a2:	4028      	ands	r0, r5
    59a4:	4308      	orrs	r0, r1
    59a6:	07d5      	lsls	r5, r2, #31
    59a8:	4305      	orrs	r5, r0
    59aa:	0857      	lsrs	r7, r2, #1
    59ac:	469a      	mov	sl, r3
    59ae:	e729      	b.n	5804 <__aeabi_dsub+0x58>
    59b0:	0006      	movs	r6, r0
    59b2:	430e      	orrs	r6, r1
    59b4:	d000      	beq.n	59b8 <__aeabi_dsub+0x20c>
    59b6:	e717      	b.n	57e8 <__aeabi_dsub+0x3c>
    59b8:	e714      	b.n	57e4 <__aeabi_dsub+0x38>
    59ba:	0029      	movs	r1, r5
    59bc:	4311      	orrs	r1, r2
    59be:	d100      	bne.n	59c2 <__aeabi_dsub+0x216>
    59c0:	e1f9      	b.n	5db6 <__aeabi_dsub+0x60a>
    59c2:	2180      	movs	r1, #128	; 0x80
    59c4:	0309      	lsls	r1, r1, #12
    59c6:	430a      	orrs	r2, r1
    59c8:	0312      	lsls	r2, r2, #12
    59ca:	0b12      	lsrs	r2, r2, #12
    59cc:	e73b      	b.n	5846 <__aeabi_dsub+0x9a>
    59ce:	2301      	movs	r3, #1
    59d0:	425b      	negs	r3, r3
    59d2:	4698      	mov	r8, r3
    59d4:	44c4      	add	ip, r8
    59d6:	4663      	mov	r3, ip
    59d8:	2b00      	cmp	r3, #0
    59da:	d172      	bne.n	5ac2 <__aeabi_dsub+0x316>
    59dc:	1a69      	subs	r1, r5, r1
    59de:	428d      	cmp	r5, r1
    59e0:	419b      	sbcs	r3, r3
    59e2:	1a3f      	subs	r7, r7, r0
    59e4:	425b      	negs	r3, r3
    59e6:	1aff      	subs	r7, r7, r3
    59e8:	000d      	movs	r5, r1
    59ea:	e768      	b.n	58be <__aeabi_dsub+0x112>
    59ec:	0002      	movs	r2, r0
    59ee:	430a      	orrs	r2, r1
    59f0:	d100      	bne.n	59f4 <__aeabi_dsub+0x248>
    59f2:	e707      	b.n	5804 <__aeabi_dsub+0x58>
    59f4:	2201      	movs	r2, #1
    59f6:	4252      	negs	r2, r2
    59f8:	4690      	mov	r8, r2
    59fa:	44c4      	add	ip, r8
    59fc:	4662      	mov	r2, ip
    59fe:	2a00      	cmp	r2, #0
    5a00:	d000      	beq.n	5a04 <__aeabi_dsub+0x258>
    5a02:	e0e6      	b.n	5bd2 <__aeabi_dsub+0x426>
    5a04:	1869      	adds	r1, r5, r1
    5a06:	42a9      	cmp	r1, r5
    5a08:	41b6      	sbcs	r6, r6
    5a0a:	183f      	adds	r7, r7, r0
    5a0c:	4276      	negs	r6, r6
    5a0e:	19f7      	adds	r7, r6, r7
    5a10:	000d      	movs	r5, r1
    5a12:	e7ba      	b.n	598a <__aeabi_dsub+0x1de>
    5a14:	2e00      	cmp	r6, #0
    5a16:	d000      	beq.n	5a1a <__aeabi_dsub+0x26e>
    5a18:	e080      	b.n	5b1c <__aeabi_dsub+0x370>
    5a1a:	1c62      	adds	r2, r4, #1
    5a1c:	0552      	lsls	r2, r2, #21
    5a1e:	0d52      	lsrs	r2, r2, #21
    5a20:	2a01      	cmp	r2, #1
    5a22:	dc00      	bgt.n	5a26 <__aeabi_dsub+0x27a>
    5a24:	e0f9      	b.n	5c1a <__aeabi_dsub+0x46e>
    5a26:	1a6a      	subs	r2, r5, r1
    5a28:	4691      	mov	r9, r2
    5a2a:	454d      	cmp	r5, r9
    5a2c:	41b6      	sbcs	r6, r6
    5a2e:	1a3a      	subs	r2, r7, r0
    5a30:	4276      	negs	r6, r6
    5a32:	1b92      	subs	r2, r2, r6
    5a34:	4690      	mov	r8, r2
    5a36:	0212      	lsls	r2, r2, #8
    5a38:	d400      	bmi.n	5a3c <__aeabi_dsub+0x290>
    5a3a:	e099      	b.n	5b70 <__aeabi_dsub+0x3c4>
    5a3c:	1b4d      	subs	r5, r1, r5
    5a3e:	42a9      	cmp	r1, r5
    5a40:	4189      	sbcs	r1, r1
    5a42:	1bc7      	subs	r7, r0, r7
    5a44:	4249      	negs	r1, r1
    5a46:	1a7a      	subs	r2, r7, r1
    5a48:	4690      	mov	r8, r2
    5a4a:	469a      	mov	sl, r3
    5a4c:	e73c      	b.n	58c8 <__aeabi_dsub+0x11c>
    5a4e:	4652      	mov	r2, sl
    5a50:	2301      	movs	r3, #1
    5a52:	2500      	movs	r5, #0
    5a54:	4013      	ands	r3, r2
    5a56:	2200      	movs	r2, #0
    5a58:	e6f5      	b.n	5846 <__aeabi_dsub+0x9a>
    5a5a:	0028      	movs	r0, r5
    5a5c:	f000 fc36 	bl	62cc <__clzsi2>
    5a60:	3020      	adds	r0, #32
    5a62:	0003      	movs	r3, r0
    5a64:	3b08      	subs	r3, #8
    5a66:	2b1f      	cmp	r3, #31
    5a68:	dc00      	bgt.n	5a6c <__aeabi_dsub+0x2c0>
    5a6a:	e739      	b.n	58e0 <__aeabi_dsub+0x134>
    5a6c:	002a      	movs	r2, r5
    5a6e:	3828      	subs	r0, #40	; 0x28
    5a70:	4082      	lsls	r2, r0
    5a72:	2500      	movs	r5, #0
    5a74:	429c      	cmp	r4, r3
    5a76:	dc00      	bgt.n	5a7a <__aeabi_dsub+0x2ce>
    5a78:	e73e      	b.n	58f8 <__aeabi_dsub+0x14c>
    5a7a:	4f26      	ldr	r7, [pc, #152]	; (5b14 <__aeabi_dsub+0x368>)
    5a7c:	1ae4      	subs	r4, r4, r3
    5a7e:	4017      	ands	r7, r2
    5a80:	e6c0      	b.n	5804 <__aeabi_dsub+0x58>
    5a82:	4301      	orrs	r1, r0
    5a84:	1e48      	subs	r0, r1, #1
    5a86:	4181      	sbcs	r1, r0
    5a88:	2200      	movs	r2, #0
    5a8a:	b2c9      	uxtb	r1, r1
    5a8c:	e710      	b.n	58b0 <__aeabi_dsub+0x104>
    5a8e:	2e00      	cmp	r6, #0
    5a90:	d000      	beq.n	5a94 <__aeabi_dsub+0x2e8>
    5a92:	e0f1      	b.n	5c78 <__aeabi_dsub+0x4cc>
    5a94:	1c62      	adds	r2, r4, #1
    5a96:	4694      	mov	ip, r2
    5a98:	0552      	lsls	r2, r2, #21
    5a9a:	0d52      	lsrs	r2, r2, #21
    5a9c:	2a01      	cmp	r2, #1
    5a9e:	dc00      	bgt.n	5aa2 <__aeabi_dsub+0x2f6>
    5aa0:	e0a0      	b.n	5be4 <__aeabi_dsub+0x438>
    5aa2:	4a1b      	ldr	r2, [pc, #108]	; (5b10 <__aeabi_dsub+0x364>)
    5aa4:	4594      	cmp	ip, r2
    5aa6:	d100      	bne.n	5aaa <__aeabi_dsub+0x2fe>
    5aa8:	e0c5      	b.n	5c36 <__aeabi_dsub+0x48a>
    5aaa:	1869      	adds	r1, r5, r1
    5aac:	42a9      	cmp	r1, r5
    5aae:	4192      	sbcs	r2, r2
    5ab0:	183f      	adds	r7, r7, r0
    5ab2:	4252      	negs	r2, r2
    5ab4:	19d2      	adds	r2, r2, r7
    5ab6:	0849      	lsrs	r1, r1, #1
    5ab8:	07d5      	lsls	r5, r2, #31
    5aba:	430d      	orrs	r5, r1
    5abc:	0857      	lsrs	r7, r2, #1
    5abe:	4664      	mov	r4, ip
    5ac0:	e6a0      	b.n	5804 <__aeabi_dsub+0x58>
    5ac2:	4b13      	ldr	r3, [pc, #76]	; (5b10 <__aeabi_dsub+0x364>)
    5ac4:	429c      	cmp	r4, r3
    5ac6:	d000      	beq.n	5aca <__aeabi_dsub+0x31e>
    5ac8:	e6d9      	b.n	587e <__aeabi_dsub+0xd2>
    5aca:	e69b      	b.n	5804 <__aeabi_dsub+0x58>
    5acc:	0011      	movs	r1, r2
    5ace:	3c1f      	subs	r4, #31
    5ad0:	40e1      	lsrs	r1, r4
    5ad2:	000c      	movs	r4, r1
    5ad4:	2b20      	cmp	r3, #32
    5ad6:	d100      	bne.n	5ada <__aeabi_dsub+0x32e>
    5ad8:	e080      	b.n	5bdc <__aeabi_dsub+0x430>
    5ada:	2140      	movs	r1, #64	; 0x40
    5adc:	1acb      	subs	r3, r1, r3
    5ade:	409a      	lsls	r2, r3
    5ae0:	4315      	orrs	r5, r2
    5ae2:	1e6a      	subs	r2, r5, #1
    5ae4:	4195      	sbcs	r5, r2
    5ae6:	2700      	movs	r7, #0
    5ae8:	4325      	orrs	r5, r4
    5aea:	2400      	movs	r4, #0
    5aec:	e71f      	b.n	592e <__aeabi_dsub+0x182>
    5aee:	4663      	mov	r3, ip
    5af0:	0002      	movs	r2, r0
    5af2:	3b20      	subs	r3, #32
    5af4:	40da      	lsrs	r2, r3
    5af6:	4663      	mov	r3, ip
    5af8:	2b20      	cmp	r3, #32
    5afa:	d071      	beq.n	5be0 <__aeabi_dsub+0x434>
    5afc:	2340      	movs	r3, #64	; 0x40
    5afe:	4666      	mov	r6, ip
    5b00:	1b9b      	subs	r3, r3, r6
    5b02:	4098      	lsls	r0, r3
    5b04:	4301      	orrs	r1, r0
    5b06:	1e48      	subs	r0, r1, #1
    5b08:	4181      	sbcs	r1, r0
    5b0a:	4311      	orrs	r1, r2
    5b0c:	2200      	movs	r2, #0
    5b0e:	e6cf      	b.n	58b0 <__aeabi_dsub+0x104>
    5b10:	000007ff 	.word	0x000007ff
    5b14:	ff7fffff 	.word	0xff7fffff
    5b18:	800fffff 	.word	0x800fffff
    5b1c:	2c00      	cmp	r4, #0
    5b1e:	d048      	beq.n	5bb2 <__aeabi_dsub+0x406>
    5b20:	4cca      	ldr	r4, [pc, #808]	; (5e4c <__aeabi_dsub+0x6a0>)
    5b22:	42a2      	cmp	r2, r4
    5b24:	d100      	bne.n	5b28 <__aeabi_dsub+0x37c>
    5b26:	e0a2      	b.n	5c6e <__aeabi_dsub+0x4c2>
    5b28:	4274      	negs	r4, r6
    5b2a:	46a1      	mov	r9, r4
    5b2c:	2480      	movs	r4, #128	; 0x80
    5b2e:	0424      	lsls	r4, r4, #16
    5b30:	4327      	orrs	r7, r4
    5b32:	464c      	mov	r4, r9
    5b34:	2c38      	cmp	r4, #56	; 0x38
    5b36:	dd00      	ble.n	5b3a <__aeabi_dsub+0x38e>
    5b38:	e0db      	b.n	5cf2 <__aeabi_dsub+0x546>
    5b3a:	2c1f      	cmp	r4, #31
    5b3c:	dd00      	ble.n	5b40 <__aeabi_dsub+0x394>
    5b3e:	e144      	b.n	5dca <__aeabi_dsub+0x61e>
    5b40:	464e      	mov	r6, r9
    5b42:	2420      	movs	r4, #32
    5b44:	1ba4      	subs	r4, r4, r6
    5b46:	003e      	movs	r6, r7
    5b48:	40a6      	lsls	r6, r4
    5b4a:	46a2      	mov	sl, r4
    5b4c:	46b0      	mov	r8, r6
    5b4e:	464c      	mov	r4, r9
    5b50:	002e      	movs	r6, r5
    5b52:	40e6      	lsrs	r6, r4
    5b54:	46b4      	mov	ip, r6
    5b56:	4646      	mov	r6, r8
    5b58:	4664      	mov	r4, ip
    5b5a:	4326      	orrs	r6, r4
    5b5c:	4654      	mov	r4, sl
    5b5e:	40a5      	lsls	r5, r4
    5b60:	1e6c      	subs	r4, r5, #1
    5b62:	41a5      	sbcs	r5, r4
    5b64:	0034      	movs	r4, r6
    5b66:	432c      	orrs	r4, r5
    5b68:	464d      	mov	r5, r9
    5b6a:	40ef      	lsrs	r7, r5
    5b6c:	1b0d      	subs	r5, r1, r4
    5b6e:	e028      	b.n	5bc2 <__aeabi_dsub+0x416>
    5b70:	464a      	mov	r2, r9
    5b72:	4643      	mov	r3, r8
    5b74:	464d      	mov	r5, r9
    5b76:	431a      	orrs	r2, r3
    5b78:	d000      	beq.n	5b7c <__aeabi_dsub+0x3d0>
    5b7a:	e6a5      	b.n	58c8 <__aeabi_dsub+0x11c>
    5b7c:	2300      	movs	r3, #0
    5b7e:	2400      	movs	r4, #0
    5b80:	2500      	movs	r5, #0
    5b82:	e6de      	b.n	5942 <__aeabi_dsub+0x196>
    5b84:	2a1f      	cmp	r2, #31
    5b86:	dc5a      	bgt.n	5c3e <__aeabi_dsub+0x492>
    5b88:	4666      	mov	r6, ip
    5b8a:	2220      	movs	r2, #32
    5b8c:	1b92      	subs	r2, r2, r6
    5b8e:	0006      	movs	r6, r0
    5b90:	4096      	lsls	r6, r2
    5b92:	4691      	mov	r9, r2
    5b94:	46b0      	mov	r8, r6
    5b96:	4662      	mov	r2, ip
    5b98:	000e      	movs	r6, r1
    5b9a:	40d6      	lsrs	r6, r2
    5b9c:	4642      	mov	r2, r8
    5b9e:	4316      	orrs	r6, r2
    5ba0:	464a      	mov	r2, r9
    5ba2:	4091      	lsls	r1, r2
    5ba4:	1e4a      	subs	r2, r1, #1
    5ba6:	4191      	sbcs	r1, r2
    5ba8:	0002      	movs	r2, r0
    5baa:	4660      	mov	r0, ip
    5bac:	4331      	orrs	r1, r6
    5bae:	40c2      	lsrs	r2, r0
    5bb0:	e6e4      	b.n	597c <__aeabi_dsub+0x1d0>
    5bb2:	003c      	movs	r4, r7
    5bb4:	432c      	orrs	r4, r5
    5bb6:	d05a      	beq.n	5c6e <__aeabi_dsub+0x4c2>
    5bb8:	43f4      	mvns	r4, r6
    5bba:	46a1      	mov	r9, r4
    5bbc:	2c00      	cmp	r4, #0
    5bbe:	d152      	bne.n	5c66 <__aeabi_dsub+0x4ba>
    5bc0:	1b4d      	subs	r5, r1, r5
    5bc2:	42a9      	cmp	r1, r5
    5bc4:	4189      	sbcs	r1, r1
    5bc6:	1bc7      	subs	r7, r0, r7
    5bc8:	4249      	negs	r1, r1
    5bca:	1a7f      	subs	r7, r7, r1
    5bcc:	0014      	movs	r4, r2
    5bce:	469a      	mov	sl, r3
    5bd0:	e675      	b.n	58be <__aeabi_dsub+0x112>
    5bd2:	4a9e      	ldr	r2, [pc, #632]	; (5e4c <__aeabi_dsub+0x6a0>)
    5bd4:	4294      	cmp	r4, r2
    5bd6:	d000      	beq.n	5bda <__aeabi_dsub+0x42e>
    5bd8:	e6c7      	b.n	596a <__aeabi_dsub+0x1be>
    5bda:	e613      	b.n	5804 <__aeabi_dsub+0x58>
    5bdc:	2200      	movs	r2, #0
    5bde:	e77f      	b.n	5ae0 <__aeabi_dsub+0x334>
    5be0:	2000      	movs	r0, #0
    5be2:	e78f      	b.n	5b04 <__aeabi_dsub+0x358>
    5be4:	2c00      	cmp	r4, #0
    5be6:	d000      	beq.n	5bea <__aeabi_dsub+0x43e>
    5be8:	e0c8      	b.n	5d7c <__aeabi_dsub+0x5d0>
    5bea:	003b      	movs	r3, r7
    5bec:	432b      	orrs	r3, r5
    5bee:	d100      	bne.n	5bf2 <__aeabi_dsub+0x446>
    5bf0:	e10f      	b.n	5e12 <__aeabi_dsub+0x666>
    5bf2:	0003      	movs	r3, r0
    5bf4:	430b      	orrs	r3, r1
    5bf6:	d100      	bne.n	5bfa <__aeabi_dsub+0x44e>
    5bf8:	e604      	b.n	5804 <__aeabi_dsub+0x58>
    5bfa:	1869      	adds	r1, r5, r1
    5bfc:	42a9      	cmp	r1, r5
    5bfe:	419b      	sbcs	r3, r3
    5c00:	183f      	adds	r7, r7, r0
    5c02:	425b      	negs	r3, r3
    5c04:	19df      	adds	r7, r3, r7
    5c06:	023b      	lsls	r3, r7, #8
    5c08:	d400      	bmi.n	5c0c <__aeabi_dsub+0x460>
    5c0a:	e11a      	b.n	5e42 <__aeabi_dsub+0x696>
    5c0c:	4b90      	ldr	r3, [pc, #576]	; (5e50 <__aeabi_dsub+0x6a4>)
    5c0e:	000d      	movs	r5, r1
    5c10:	401f      	ands	r7, r3
    5c12:	4664      	mov	r4, ip
    5c14:	e5f6      	b.n	5804 <__aeabi_dsub+0x58>
    5c16:	469a      	mov	sl, r3
    5c18:	e689      	b.n	592e <__aeabi_dsub+0x182>
    5c1a:	003a      	movs	r2, r7
    5c1c:	432a      	orrs	r2, r5
    5c1e:	2c00      	cmp	r4, #0
    5c20:	d15c      	bne.n	5cdc <__aeabi_dsub+0x530>
    5c22:	2a00      	cmp	r2, #0
    5c24:	d175      	bne.n	5d12 <__aeabi_dsub+0x566>
    5c26:	0002      	movs	r2, r0
    5c28:	430a      	orrs	r2, r1
    5c2a:	d100      	bne.n	5c2e <__aeabi_dsub+0x482>
    5c2c:	e0ca      	b.n	5dc4 <__aeabi_dsub+0x618>
    5c2e:	0007      	movs	r7, r0
    5c30:	000d      	movs	r5, r1
    5c32:	469a      	mov	sl, r3
    5c34:	e5e6      	b.n	5804 <__aeabi_dsub+0x58>
    5c36:	4664      	mov	r4, ip
    5c38:	2200      	movs	r2, #0
    5c3a:	2500      	movs	r5, #0
    5c3c:	e681      	b.n	5942 <__aeabi_dsub+0x196>
    5c3e:	4662      	mov	r2, ip
    5c40:	0006      	movs	r6, r0
    5c42:	3a20      	subs	r2, #32
    5c44:	40d6      	lsrs	r6, r2
    5c46:	4662      	mov	r2, ip
    5c48:	46b0      	mov	r8, r6
    5c4a:	2a20      	cmp	r2, #32
    5c4c:	d100      	bne.n	5c50 <__aeabi_dsub+0x4a4>
    5c4e:	e0b7      	b.n	5dc0 <__aeabi_dsub+0x614>
    5c50:	2240      	movs	r2, #64	; 0x40
    5c52:	4666      	mov	r6, ip
    5c54:	1b92      	subs	r2, r2, r6
    5c56:	4090      	lsls	r0, r2
    5c58:	4301      	orrs	r1, r0
    5c5a:	4642      	mov	r2, r8
    5c5c:	1e48      	subs	r0, r1, #1
    5c5e:	4181      	sbcs	r1, r0
    5c60:	4311      	orrs	r1, r2
    5c62:	2200      	movs	r2, #0
    5c64:	e68a      	b.n	597c <__aeabi_dsub+0x1d0>
    5c66:	4c79      	ldr	r4, [pc, #484]	; (5e4c <__aeabi_dsub+0x6a0>)
    5c68:	42a2      	cmp	r2, r4
    5c6a:	d000      	beq.n	5c6e <__aeabi_dsub+0x4c2>
    5c6c:	e761      	b.n	5b32 <__aeabi_dsub+0x386>
    5c6e:	0007      	movs	r7, r0
    5c70:	000d      	movs	r5, r1
    5c72:	0014      	movs	r4, r2
    5c74:	469a      	mov	sl, r3
    5c76:	e5c5      	b.n	5804 <__aeabi_dsub+0x58>
    5c78:	2c00      	cmp	r4, #0
    5c7a:	d141      	bne.n	5d00 <__aeabi_dsub+0x554>
    5c7c:	003c      	movs	r4, r7
    5c7e:	432c      	orrs	r4, r5
    5c80:	d078      	beq.n	5d74 <__aeabi_dsub+0x5c8>
    5c82:	43f4      	mvns	r4, r6
    5c84:	46a1      	mov	r9, r4
    5c86:	2c00      	cmp	r4, #0
    5c88:	d020      	beq.n	5ccc <__aeabi_dsub+0x520>
    5c8a:	4c70      	ldr	r4, [pc, #448]	; (5e4c <__aeabi_dsub+0x6a0>)
    5c8c:	42a2      	cmp	r2, r4
    5c8e:	d071      	beq.n	5d74 <__aeabi_dsub+0x5c8>
    5c90:	464c      	mov	r4, r9
    5c92:	2c38      	cmp	r4, #56	; 0x38
    5c94:	dd00      	ble.n	5c98 <__aeabi_dsub+0x4ec>
    5c96:	e0b2      	b.n	5dfe <__aeabi_dsub+0x652>
    5c98:	2c1f      	cmp	r4, #31
    5c9a:	dd00      	ble.n	5c9e <__aeabi_dsub+0x4f2>
    5c9c:	e0bc      	b.n	5e18 <__aeabi_dsub+0x66c>
    5c9e:	2620      	movs	r6, #32
    5ca0:	1b34      	subs	r4, r6, r4
    5ca2:	46a2      	mov	sl, r4
    5ca4:	003c      	movs	r4, r7
    5ca6:	4656      	mov	r6, sl
    5ca8:	40b4      	lsls	r4, r6
    5caa:	464e      	mov	r6, r9
    5cac:	46a0      	mov	r8, r4
    5cae:	002c      	movs	r4, r5
    5cb0:	40f4      	lsrs	r4, r6
    5cb2:	46a4      	mov	ip, r4
    5cb4:	4644      	mov	r4, r8
    5cb6:	4666      	mov	r6, ip
    5cb8:	4334      	orrs	r4, r6
    5cba:	46a4      	mov	ip, r4
    5cbc:	4654      	mov	r4, sl
    5cbe:	40a5      	lsls	r5, r4
    5cc0:	4664      	mov	r4, ip
    5cc2:	1e6e      	subs	r6, r5, #1
    5cc4:	41b5      	sbcs	r5, r6
    5cc6:	4325      	orrs	r5, r4
    5cc8:	464c      	mov	r4, r9
    5cca:	40e7      	lsrs	r7, r4
    5ccc:	186d      	adds	r5, r5, r1
    5cce:	428d      	cmp	r5, r1
    5cd0:	4189      	sbcs	r1, r1
    5cd2:	183f      	adds	r7, r7, r0
    5cd4:	4249      	negs	r1, r1
    5cd6:	19cf      	adds	r7, r1, r7
    5cd8:	0014      	movs	r4, r2
    5cda:	e656      	b.n	598a <__aeabi_dsub+0x1de>
    5cdc:	2a00      	cmp	r2, #0
    5cde:	d12f      	bne.n	5d40 <__aeabi_dsub+0x594>
    5ce0:	0002      	movs	r2, r0
    5ce2:	430a      	orrs	r2, r1
    5ce4:	d100      	bne.n	5ce8 <__aeabi_dsub+0x53c>
    5ce6:	e084      	b.n	5df2 <__aeabi_dsub+0x646>
    5ce8:	0007      	movs	r7, r0
    5cea:	000d      	movs	r5, r1
    5cec:	469a      	mov	sl, r3
    5cee:	4c57      	ldr	r4, [pc, #348]	; (5e4c <__aeabi_dsub+0x6a0>)
    5cf0:	e588      	b.n	5804 <__aeabi_dsub+0x58>
    5cf2:	433d      	orrs	r5, r7
    5cf4:	1e6f      	subs	r7, r5, #1
    5cf6:	41bd      	sbcs	r5, r7
    5cf8:	b2ec      	uxtb	r4, r5
    5cfa:	2700      	movs	r7, #0
    5cfc:	1b0d      	subs	r5, r1, r4
    5cfe:	e760      	b.n	5bc2 <__aeabi_dsub+0x416>
    5d00:	4c52      	ldr	r4, [pc, #328]	; (5e4c <__aeabi_dsub+0x6a0>)
    5d02:	42a2      	cmp	r2, r4
    5d04:	d036      	beq.n	5d74 <__aeabi_dsub+0x5c8>
    5d06:	4274      	negs	r4, r6
    5d08:	2680      	movs	r6, #128	; 0x80
    5d0a:	0436      	lsls	r6, r6, #16
    5d0c:	46a1      	mov	r9, r4
    5d0e:	4337      	orrs	r7, r6
    5d10:	e7be      	b.n	5c90 <__aeabi_dsub+0x4e4>
    5d12:	0002      	movs	r2, r0
    5d14:	430a      	orrs	r2, r1
    5d16:	d100      	bne.n	5d1a <__aeabi_dsub+0x56e>
    5d18:	e574      	b.n	5804 <__aeabi_dsub+0x58>
    5d1a:	1a6a      	subs	r2, r5, r1
    5d1c:	4690      	mov	r8, r2
    5d1e:	4545      	cmp	r5, r8
    5d20:	41b6      	sbcs	r6, r6
    5d22:	1a3a      	subs	r2, r7, r0
    5d24:	4276      	negs	r6, r6
    5d26:	1b92      	subs	r2, r2, r6
    5d28:	4694      	mov	ip, r2
    5d2a:	0212      	lsls	r2, r2, #8
    5d2c:	d400      	bmi.n	5d30 <__aeabi_dsub+0x584>
    5d2e:	e5f7      	b.n	5920 <__aeabi_dsub+0x174>
    5d30:	1b4d      	subs	r5, r1, r5
    5d32:	42a9      	cmp	r1, r5
    5d34:	4189      	sbcs	r1, r1
    5d36:	1bc7      	subs	r7, r0, r7
    5d38:	4249      	negs	r1, r1
    5d3a:	1a7f      	subs	r7, r7, r1
    5d3c:	469a      	mov	sl, r3
    5d3e:	e561      	b.n	5804 <__aeabi_dsub+0x58>
    5d40:	0002      	movs	r2, r0
    5d42:	430a      	orrs	r2, r1
    5d44:	d03a      	beq.n	5dbc <__aeabi_dsub+0x610>
    5d46:	08ed      	lsrs	r5, r5, #3
    5d48:	077c      	lsls	r4, r7, #29
    5d4a:	432c      	orrs	r4, r5
    5d4c:	2580      	movs	r5, #128	; 0x80
    5d4e:	08fa      	lsrs	r2, r7, #3
    5d50:	032d      	lsls	r5, r5, #12
    5d52:	422a      	tst	r2, r5
    5d54:	d008      	beq.n	5d68 <__aeabi_dsub+0x5bc>
    5d56:	08c7      	lsrs	r7, r0, #3
    5d58:	422f      	tst	r7, r5
    5d5a:	d105      	bne.n	5d68 <__aeabi_dsub+0x5bc>
    5d5c:	0745      	lsls	r5, r0, #29
    5d5e:	002c      	movs	r4, r5
    5d60:	003a      	movs	r2, r7
    5d62:	469a      	mov	sl, r3
    5d64:	08c9      	lsrs	r1, r1, #3
    5d66:	430c      	orrs	r4, r1
    5d68:	0f67      	lsrs	r7, r4, #29
    5d6a:	00d2      	lsls	r2, r2, #3
    5d6c:	00e5      	lsls	r5, r4, #3
    5d6e:	4317      	orrs	r7, r2
    5d70:	4c36      	ldr	r4, [pc, #216]	; (5e4c <__aeabi_dsub+0x6a0>)
    5d72:	e547      	b.n	5804 <__aeabi_dsub+0x58>
    5d74:	0007      	movs	r7, r0
    5d76:	000d      	movs	r5, r1
    5d78:	0014      	movs	r4, r2
    5d7a:	e543      	b.n	5804 <__aeabi_dsub+0x58>
    5d7c:	003a      	movs	r2, r7
    5d7e:	432a      	orrs	r2, r5
    5d80:	d043      	beq.n	5e0a <__aeabi_dsub+0x65e>
    5d82:	0002      	movs	r2, r0
    5d84:	430a      	orrs	r2, r1
    5d86:	d019      	beq.n	5dbc <__aeabi_dsub+0x610>
    5d88:	08ed      	lsrs	r5, r5, #3
    5d8a:	077c      	lsls	r4, r7, #29
    5d8c:	432c      	orrs	r4, r5
    5d8e:	2580      	movs	r5, #128	; 0x80
    5d90:	08fa      	lsrs	r2, r7, #3
    5d92:	032d      	lsls	r5, r5, #12
    5d94:	422a      	tst	r2, r5
    5d96:	d007      	beq.n	5da8 <__aeabi_dsub+0x5fc>
    5d98:	08c6      	lsrs	r6, r0, #3
    5d9a:	422e      	tst	r6, r5
    5d9c:	d104      	bne.n	5da8 <__aeabi_dsub+0x5fc>
    5d9e:	0747      	lsls	r7, r0, #29
    5da0:	003c      	movs	r4, r7
    5da2:	0032      	movs	r2, r6
    5da4:	08c9      	lsrs	r1, r1, #3
    5da6:	430c      	orrs	r4, r1
    5da8:	00d7      	lsls	r7, r2, #3
    5daa:	0f62      	lsrs	r2, r4, #29
    5dac:	00e5      	lsls	r5, r4, #3
    5dae:	4317      	orrs	r7, r2
    5db0:	469a      	mov	sl, r3
    5db2:	4c26      	ldr	r4, [pc, #152]	; (5e4c <__aeabi_dsub+0x6a0>)
    5db4:	e526      	b.n	5804 <__aeabi_dsub+0x58>
    5db6:	2200      	movs	r2, #0
    5db8:	2500      	movs	r5, #0
    5dba:	e544      	b.n	5846 <__aeabi_dsub+0x9a>
    5dbc:	4c23      	ldr	r4, [pc, #140]	; (5e4c <__aeabi_dsub+0x6a0>)
    5dbe:	e521      	b.n	5804 <__aeabi_dsub+0x58>
    5dc0:	2000      	movs	r0, #0
    5dc2:	e749      	b.n	5c58 <__aeabi_dsub+0x4ac>
    5dc4:	2300      	movs	r3, #0
    5dc6:	2500      	movs	r5, #0
    5dc8:	e5bb      	b.n	5942 <__aeabi_dsub+0x196>
    5dca:	464c      	mov	r4, r9
    5dcc:	003e      	movs	r6, r7
    5dce:	3c20      	subs	r4, #32
    5dd0:	40e6      	lsrs	r6, r4
    5dd2:	464c      	mov	r4, r9
    5dd4:	46b4      	mov	ip, r6
    5dd6:	2c20      	cmp	r4, #32
    5dd8:	d031      	beq.n	5e3e <__aeabi_dsub+0x692>
    5dda:	2440      	movs	r4, #64	; 0x40
    5ddc:	464e      	mov	r6, r9
    5dde:	1ba6      	subs	r6, r4, r6
    5de0:	40b7      	lsls	r7, r6
    5de2:	433d      	orrs	r5, r7
    5de4:	1e6c      	subs	r4, r5, #1
    5de6:	41a5      	sbcs	r5, r4
    5de8:	4664      	mov	r4, ip
    5dea:	432c      	orrs	r4, r5
    5dec:	2700      	movs	r7, #0
    5dee:	1b0d      	subs	r5, r1, r4
    5df0:	e6e7      	b.n	5bc2 <__aeabi_dsub+0x416>
    5df2:	2280      	movs	r2, #128	; 0x80
    5df4:	2300      	movs	r3, #0
    5df6:	0312      	lsls	r2, r2, #12
    5df8:	4c14      	ldr	r4, [pc, #80]	; (5e4c <__aeabi_dsub+0x6a0>)
    5dfa:	2500      	movs	r5, #0
    5dfc:	e5a1      	b.n	5942 <__aeabi_dsub+0x196>
    5dfe:	433d      	orrs	r5, r7
    5e00:	1e6f      	subs	r7, r5, #1
    5e02:	41bd      	sbcs	r5, r7
    5e04:	2700      	movs	r7, #0
    5e06:	b2ed      	uxtb	r5, r5
    5e08:	e760      	b.n	5ccc <__aeabi_dsub+0x520>
    5e0a:	0007      	movs	r7, r0
    5e0c:	000d      	movs	r5, r1
    5e0e:	4c0f      	ldr	r4, [pc, #60]	; (5e4c <__aeabi_dsub+0x6a0>)
    5e10:	e4f8      	b.n	5804 <__aeabi_dsub+0x58>
    5e12:	0007      	movs	r7, r0
    5e14:	000d      	movs	r5, r1
    5e16:	e4f5      	b.n	5804 <__aeabi_dsub+0x58>
    5e18:	464e      	mov	r6, r9
    5e1a:	003c      	movs	r4, r7
    5e1c:	3e20      	subs	r6, #32
    5e1e:	40f4      	lsrs	r4, r6
    5e20:	46a0      	mov	r8, r4
    5e22:	464c      	mov	r4, r9
    5e24:	2c20      	cmp	r4, #32
    5e26:	d00e      	beq.n	5e46 <__aeabi_dsub+0x69a>
    5e28:	2440      	movs	r4, #64	; 0x40
    5e2a:	464e      	mov	r6, r9
    5e2c:	1ba4      	subs	r4, r4, r6
    5e2e:	40a7      	lsls	r7, r4
    5e30:	433d      	orrs	r5, r7
    5e32:	1e6f      	subs	r7, r5, #1
    5e34:	41bd      	sbcs	r5, r7
    5e36:	4644      	mov	r4, r8
    5e38:	2700      	movs	r7, #0
    5e3a:	4325      	orrs	r5, r4
    5e3c:	e746      	b.n	5ccc <__aeabi_dsub+0x520>
    5e3e:	2700      	movs	r7, #0
    5e40:	e7cf      	b.n	5de2 <__aeabi_dsub+0x636>
    5e42:	000d      	movs	r5, r1
    5e44:	e573      	b.n	592e <__aeabi_dsub+0x182>
    5e46:	2700      	movs	r7, #0
    5e48:	e7f2      	b.n	5e30 <__aeabi_dsub+0x684>
    5e4a:	46c0      	nop			; (mov r8, r8)
    5e4c:	000007ff 	.word	0x000007ff
    5e50:	ff7fffff 	.word	0xff7fffff

00005e54 <__aeabi_dcmpun>:
    5e54:	b570      	push	{r4, r5, r6, lr}
    5e56:	4e0e      	ldr	r6, [pc, #56]	; (5e90 <__aeabi_dcmpun+0x3c>)
    5e58:	030c      	lsls	r4, r1, #12
    5e5a:	031d      	lsls	r5, r3, #12
    5e5c:	0049      	lsls	r1, r1, #1
    5e5e:	005b      	lsls	r3, r3, #1
    5e60:	0b24      	lsrs	r4, r4, #12
    5e62:	0d49      	lsrs	r1, r1, #21
    5e64:	0b2d      	lsrs	r5, r5, #12
    5e66:	0d5b      	lsrs	r3, r3, #21
    5e68:	42b1      	cmp	r1, r6
    5e6a:	d004      	beq.n	5e76 <__aeabi_dcmpun+0x22>
    5e6c:	4908      	ldr	r1, [pc, #32]	; (5e90 <__aeabi_dcmpun+0x3c>)
    5e6e:	2000      	movs	r0, #0
    5e70:	428b      	cmp	r3, r1
    5e72:	d008      	beq.n	5e86 <__aeabi_dcmpun+0x32>
    5e74:	bd70      	pop	{r4, r5, r6, pc}
    5e76:	4304      	orrs	r4, r0
    5e78:	2001      	movs	r0, #1
    5e7a:	2c00      	cmp	r4, #0
    5e7c:	d1fa      	bne.n	5e74 <__aeabi_dcmpun+0x20>
    5e7e:	4904      	ldr	r1, [pc, #16]	; (5e90 <__aeabi_dcmpun+0x3c>)
    5e80:	2000      	movs	r0, #0
    5e82:	428b      	cmp	r3, r1
    5e84:	d1f6      	bne.n	5e74 <__aeabi_dcmpun+0x20>
    5e86:	4315      	orrs	r5, r2
    5e88:	0028      	movs	r0, r5
    5e8a:	1e45      	subs	r5, r0, #1
    5e8c:	41a8      	sbcs	r0, r5
    5e8e:	e7f1      	b.n	5e74 <__aeabi_dcmpun+0x20>
    5e90:	000007ff 	.word	0x000007ff

00005e94 <__aeabi_d2iz>:
    5e94:	030b      	lsls	r3, r1, #12
    5e96:	b530      	push	{r4, r5, lr}
    5e98:	4d13      	ldr	r5, [pc, #76]	; (5ee8 <__aeabi_d2iz+0x54>)
    5e9a:	0b1a      	lsrs	r2, r3, #12
    5e9c:	004b      	lsls	r3, r1, #1
    5e9e:	0d5b      	lsrs	r3, r3, #21
    5ea0:	0fc9      	lsrs	r1, r1, #31
    5ea2:	2400      	movs	r4, #0
    5ea4:	42ab      	cmp	r3, r5
    5ea6:	dd11      	ble.n	5ecc <__aeabi_d2iz+0x38>
    5ea8:	4c10      	ldr	r4, [pc, #64]	; (5eec <__aeabi_d2iz+0x58>)
    5eaa:	42a3      	cmp	r3, r4
    5eac:	dc10      	bgt.n	5ed0 <__aeabi_d2iz+0x3c>
    5eae:	2480      	movs	r4, #128	; 0x80
    5eb0:	0364      	lsls	r4, r4, #13
    5eb2:	4322      	orrs	r2, r4
    5eb4:	4c0e      	ldr	r4, [pc, #56]	; (5ef0 <__aeabi_d2iz+0x5c>)
    5eb6:	1ae4      	subs	r4, r4, r3
    5eb8:	2c1f      	cmp	r4, #31
    5eba:	dd0c      	ble.n	5ed6 <__aeabi_d2iz+0x42>
    5ebc:	480d      	ldr	r0, [pc, #52]	; (5ef4 <__aeabi_d2iz+0x60>)
    5ebe:	1ac3      	subs	r3, r0, r3
    5ec0:	40da      	lsrs	r2, r3
    5ec2:	0013      	movs	r3, r2
    5ec4:	425c      	negs	r4, r3
    5ec6:	2900      	cmp	r1, #0
    5ec8:	d100      	bne.n	5ecc <__aeabi_d2iz+0x38>
    5eca:	001c      	movs	r4, r3
    5ecc:	0020      	movs	r0, r4
    5ece:	bd30      	pop	{r4, r5, pc}
    5ed0:	4b09      	ldr	r3, [pc, #36]	; (5ef8 <__aeabi_d2iz+0x64>)
    5ed2:	18cc      	adds	r4, r1, r3
    5ed4:	e7fa      	b.n	5ecc <__aeabi_d2iz+0x38>
    5ed6:	40e0      	lsrs	r0, r4
    5ed8:	4c08      	ldr	r4, [pc, #32]	; (5efc <__aeabi_d2iz+0x68>)
    5eda:	46a4      	mov	ip, r4
    5edc:	4463      	add	r3, ip
    5ede:	409a      	lsls	r2, r3
    5ee0:	0013      	movs	r3, r2
    5ee2:	4303      	orrs	r3, r0
    5ee4:	e7ee      	b.n	5ec4 <__aeabi_d2iz+0x30>
    5ee6:	46c0      	nop			; (mov r8, r8)
    5ee8:	000003fe 	.word	0x000003fe
    5eec:	0000041d 	.word	0x0000041d
    5ef0:	00000433 	.word	0x00000433
    5ef4:	00000413 	.word	0x00000413
    5ef8:	7fffffff 	.word	0x7fffffff
    5efc:	fffffbed 	.word	0xfffffbed

00005f00 <__aeabi_i2d>:
    5f00:	b570      	push	{r4, r5, r6, lr}
    5f02:	2800      	cmp	r0, #0
    5f04:	d030      	beq.n	5f68 <__aeabi_i2d+0x68>
    5f06:	17c3      	asrs	r3, r0, #31
    5f08:	18c4      	adds	r4, r0, r3
    5f0a:	405c      	eors	r4, r3
    5f0c:	0fc5      	lsrs	r5, r0, #31
    5f0e:	0020      	movs	r0, r4
    5f10:	f000 f9dc 	bl	62cc <__clzsi2>
    5f14:	4b17      	ldr	r3, [pc, #92]	; (5f74 <__aeabi_i2d+0x74>)
    5f16:	4a18      	ldr	r2, [pc, #96]	; (5f78 <__aeabi_i2d+0x78>)
    5f18:	1a1b      	subs	r3, r3, r0
    5f1a:	1ad2      	subs	r2, r2, r3
    5f1c:	2a1f      	cmp	r2, #31
    5f1e:	dd18      	ble.n	5f52 <__aeabi_i2d+0x52>
    5f20:	4a16      	ldr	r2, [pc, #88]	; (5f7c <__aeabi_i2d+0x7c>)
    5f22:	1ad2      	subs	r2, r2, r3
    5f24:	4094      	lsls	r4, r2
    5f26:	2200      	movs	r2, #0
    5f28:	0324      	lsls	r4, r4, #12
    5f2a:	055b      	lsls	r3, r3, #21
    5f2c:	0b24      	lsrs	r4, r4, #12
    5f2e:	0d5b      	lsrs	r3, r3, #21
    5f30:	2100      	movs	r1, #0
    5f32:	0010      	movs	r0, r2
    5f34:	0324      	lsls	r4, r4, #12
    5f36:	0d0a      	lsrs	r2, r1, #20
    5f38:	0512      	lsls	r2, r2, #20
    5f3a:	0b24      	lsrs	r4, r4, #12
    5f3c:	4314      	orrs	r4, r2
    5f3e:	4a10      	ldr	r2, [pc, #64]	; (5f80 <__aeabi_i2d+0x80>)
    5f40:	051b      	lsls	r3, r3, #20
    5f42:	4014      	ands	r4, r2
    5f44:	431c      	orrs	r4, r3
    5f46:	0064      	lsls	r4, r4, #1
    5f48:	07ed      	lsls	r5, r5, #31
    5f4a:	0864      	lsrs	r4, r4, #1
    5f4c:	432c      	orrs	r4, r5
    5f4e:	0021      	movs	r1, r4
    5f50:	bd70      	pop	{r4, r5, r6, pc}
    5f52:	0021      	movs	r1, r4
    5f54:	4091      	lsls	r1, r2
    5f56:	000a      	movs	r2, r1
    5f58:	210b      	movs	r1, #11
    5f5a:	1a08      	subs	r0, r1, r0
    5f5c:	40c4      	lsrs	r4, r0
    5f5e:	055b      	lsls	r3, r3, #21
    5f60:	0324      	lsls	r4, r4, #12
    5f62:	0b24      	lsrs	r4, r4, #12
    5f64:	0d5b      	lsrs	r3, r3, #21
    5f66:	e7e3      	b.n	5f30 <__aeabi_i2d+0x30>
    5f68:	2500      	movs	r5, #0
    5f6a:	2300      	movs	r3, #0
    5f6c:	2400      	movs	r4, #0
    5f6e:	2200      	movs	r2, #0
    5f70:	e7de      	b.n	5f30 <__aeabi_i2d+0x30>
    5f72:	46c0      	nop			; (mov r8, r8)
    5f74:	0000041e 	.word	0x0000041e
    5f78:	00000433 	.word	0x00000433
    5f7c:	00000413 	.word	0x00000413
    5f80:	800fffff 	.word	0x800fffff

00005f84 <__aeabi_ui2d>:
    5f84:	b570      	push	{r4, r5, r6, lr}
    5f86:	1e05      	subs	r5, r0, #0
    5f88:	d028      	beq.n	5fdc <__aeabi_ui2d+0x58>
    5f8a:	f000 f99f 	bl	62cc <__clzsi2>
    5f8e:	4b15      	ldr	r3, [pc, #84]	; (5fe4 <__aeabi_ui2d+0x60>)
    5f90:	4a15      	ldr	r2, [pc, #84]	; (5fe8 <__aeabi_ui2d+0x64>)
    5f92:	1a1b      	subs	r3, r3, r0
    5f94:	1ad2      	subs	r2, r2, r3
    5f96:	2a1f      	cmp	r2, #31
    5f98:	dd16      	ble.n	5fc8 <__aeabi_ui2d+0x44>
    5f9a:	002c      	movs	r4, r5
    5f9c:	4a13      	ldr	r2, [pc, #76]	; (5fec <__aeabi_ui2d+0x68>)
    5f9e:	2500      	movs	r5, #0
    5fa0:	1ad2      	subs	r2, r2, r3
    5fa2:	4094      	lsls	r4, r2
    5fa4:	055a      	lsls	r2, r3, #21
    5fa6:	0324      	lsls	r4, r4, #12
    5fa8:	0b24      	lsrs	r4, r4, #12
    5faa:	0d52      	lsrs	r2, r2, #21
    5fac:	2100      	movs	r1, #0
    5fae:	0324      	lsls	r4, r4, #12
    5fb0:	0d0b      	lsrs	r3, r1, #20
    5fb2:	0b24      	lsrs	r4, r4, #12
    5fb4:	051b      	lsls	r3, r3, #20
    5fb6:	4323      	orrs	r3, r4
    5fb8:	4c0d      	ldr	r4, [pc, #52]	; (5ff0 <__aeabi_ui2d+0x6c>)
    5fba:	0512      	lsls	r2, r2, #20
    5fbc:	4023      	ands	r3, r4
    5fbe:	4313      	orrs	r3, r2
    5fc0:	005b      	lsls	r3, r3, #1
    5fc2:	0028      	movs	r0, r5
    5fc4:	0859      	lsrs	r1, r3, #1
    5fc6:	bd70      	pop	{r4, r5, r6, pc}
    5fc8:	210b      	movs	r1, #11
    5fca:	002c      	movs	r4, r5
    5fcc:	1a08      	subs	r0, r1, r0
    5fce:	40c4      	lsrs	r4, r0
    5fd0:	4095      	lsls	r5, r2
    5fd2:	0324      	lsls	r4, r4, #12
    5fd4:	055a      	lsls	r2, r3, #21
    5fd6:	0b24      	lsrs	r4, r4, #12
    5fd8:	0d52      	lsrs	r2, r2, #21
    5fda:	e7e7      	b.n	5fac <__aeabi_ui2d+0x28>
    5fdc:	2200      	movs	r2, #0
    5fde:	2400      	movs	r4, #0
    5fe0:	e7e4      	b.n	5fac <__aeabi_ui2d+0x28>
    5fe2:	46c0      	nop			; (mov r8, r8)
    5fe4:	0000041e 	.word	0x0000041e
    5fe8:	00000433 	.word	0x00000433
    5fec:	00000413 	.word	0x00000413
    5ff0:	800fffff 	.word	0x800fffff

00005ff4 <__aeabi_f2d>:
    5ff4:	0042      	lsls	r2, r0, #1
    5ff6:	0e12      	lsrs	r2, r2, #24
    5ff8:	1c51      	adds	r1, r2, #1
    5ffa:	0243      	lsls	r3, r0, #9
    5ffc:	b2c9      	uxtb	r1, r1
    5ffe:	b570      	push	{r4, r5, r6, lr}
    6000:	0a5d      	lsrs	r5, r3, #9
    6002:	0fc4      	lsrs	r4, r0, #31
    6004:	2901      	cmp	r1, #1
    6006:	dd15      	ble.n	6034 <__aeabi_f2d+0x40>
    6008:	21e0      	movs	r1, #224	; 0xe0
    600a:	0089      	lsls	r1, r1, #2
    600c:	468c      	mov	ip, r1
    600e:	076d      	lsls	r5, r5, #29
    6010:	0b1b      	lsrs	r3, r3, #12
    6012:	4462      	add	r2, ip
    6014:	2100      	movs	r1, #0
    6016:	0028      	movs	r0, r5
    6018:	0d0d      	lsrs	r5, r1, #20
    601a:	052d      	lsls	r5, r5, #20
    601c:	432b      	orrs	r3, r5
    601e:	4d1c      	ldr	r5, [pc, #112]	; (6090 <__aeabi_f2d+0x9c>)
    6020:	0552      	lsls	r2, r2, #21
    6022:	402b      	ands	r3, r5
    6024:	0852      	lsrs	r2, r2, #1
    6026:	4313      	orrs	r3, r2
    6028:	005b      	lsls	r3, r3, #1
    602a:	07e4      	lsls	r4, r4, #31
    602c:	085b      	lsrs	r3, r3, #1
    602e:	4323      	orrs	r3, r4
    6030:	0019      	movs	r1, r3
    6032:	bd70      	pop	{r4, r5, r6, pc}
    6034:	2a00      	cmp	r2, #0
    6036:	d115      	bne.n	6064 <__aeabi_f2d+0x70>
    6038:	2d00      	cmp	r5, #0
    603a:	d01f      	beq.n	607c <__aeabi_f2d+0x88>
    603c:	0028      	movs	r0, r5
    603e:	f000 f945 	bl	62cc <__clzsi2>
    6042:	280a      	cmp	r0, #10
    6044:	dc1d      	bgt.n	6082 <__aeabi_f2d+0x8e>
    6046:	230b      	movs	r3, #11
    6048:	002a      	movs	r2, r5
    604a:	1a1b      	subs	r3, r3, r0
    604c:	40da      	lsrs	r2, r3
    604e:	0013      	movs	r3, r2
    6050:	0002      	movs	r2, r0
    6052:	3215      	adds	r2, #21
    6054:	4095      	lsls	r5, r2
    6056:	4a0f      	ldr	r2, [pc, #60]	; (6094 <__aeabi_f2d+0xa0>)
    6058:	031b      	lsls	r3, r3, #12
    605a:	1a12      	subs	r2, r2, r0
    605c:	0552      	lsls	r2, r2, #21
    605e:	0b1b      	lsrs	r3, r3, #12
    6060:	0d52      	lsrs	r2, r2, #21
    6062:	e7d7      	b.n	6014 <__aeabi_f2d+0x20>
    6064:	2d00      	cmp	r5, #0
    6066:	d006      	beq.n	6076 <__aeabi_f2d+0x82>
    6068:	2280      	movs	r2, #128	; 0x80
    606a:	0b1b      	lsrs	r3, r3, #12
    606c:	0312      	lsls	r2, r2, #12
    606e:	4313      	orrs	r3, r2
    6070:	076d      	lsls	r5, r5, #29
    6072:	4a09      	ldr	r2, [pc, #36]	; (6098 <__aeabi_f2d+0xa4>)
    6074:	e7ce      	b.n	6014 <__aeabi_f2d+0x20>
    6076:	4a08      	ldr	r2, [pc, #32]	; (6098 <__aeabi_f2d+0xa4>)
    6078:	2300      	movs	r3, #0
    607a:	e7cb      	b.n	6014 <__aeabi_f2d+0x20>
    607c:	2200      	movs	r2, #0
    607e:	2300      	movs	r3, #0
    6080:	e7c8      	b.n	6014 <__aeabi_f2d+0x20>
    6082:	0003      	movs	r3, r0
    6084:	3b0b      	subs	r3, #11
    6086:	409d      	lsls	r5, r3
    6088:	002b      	movs	r3, r5
    608a:	2500      	movs	r5, #0
    608c:	e7e3      	b.n	6056 <__aeabi_f2d+0x62>
    608e:	46c0      	nop			; (mov r8, r8)
    6090:	800fffff 	.word	0x800fffff
    6094:	00000389 	.word	0x00000389
    6098:	000007ff 	.word	0x000007ff

0000609c <__aeabi_d2f>:
    609c:	004b      	lsls	r3, r1, #1
    609e:	b570      	push	{r4, r5, r6, lr}
    60a0:	0d5e      	lsrs	r6, r3, #21
    60a2:	030c      	lsls	r4, r1, #12
    60a4:	1c75      	adds	r5, r6, #1
    60a6:	0a64      	lsrs	r4, r4, #9
    60a8:	0f42      	lsrs	r2, r0, #29
    60aa:	056d      	lsls	r5, r5, #21
    60ac:	4322      	orrs	r2, r4
    60ae:	0fc9      	lsrs	r1, r1, #31
    60b0:	00c4      	lsls	r4, r0, #3
    60b2:	0d6d      	lsrs	r5, r5, #21
    60b4:	2d01      	cmp	r5, #1
    60b6:	dd2a      	ble.n	610e <__aeabi_d2f+0x72>
    60b8:	4b3b      	ldr	r3, [pc, #236]	; (61a8 <__aeabi_d2f+0x10c>)
    60ba:	18f3      	adds	r3, r6, r3
    60bc:	2bfe      	cmp	r3, #254	; 0xfe
    60be:	dc1a      	bgt.n	60f6 <__aeabi_d2f+0x5a>
    60c0:	2b00      	cmp	r3, #0
    60c2:	dd42      	ble.n	614a <__aeabi_d2f+0xae>
    60c4:	0180      	lsls	r0, r0, #6
    60c6:	1e45      	subs	r5, r0, #1
    60c8:	41a8      	sbcs	r0, r5
    60ca:	00d2      	lsls	r2, r2, #3
    60cc:	4310      	orrs	r0, r2
    60ce:	0f62      	lsrs	r2, r4, #29
    60d0:	4302      	orrs	r2, r0
    60d2:	0750      	lsls	r0, r2, #29
    60d4:	d004      	beq.n	60e0 <__aeabi_d2f+0x44>
    60d6:	200f      	movs	r0, #15
    60d8:	4010      	ands	r0, r2
    60da:	2804      	cmp	r0, #4
    60dc:	d000      	beq.n	60e0 <__aeabi_d2f+0x44>
    60de:	3204      	adds	r2, #4
    60e0:	2080      	movs	r0, #128	; 0x80
    60e2:	04c0      	lsls	r0, r0, #19
    60e4:	4010      	ands	r0, r2
    60e6:	d021      	beq.n	612c <__aeabi_d2f+0x90>
    60e8:	3301      	adds	r3, #1
    60ea:	2bff      	cmp	r3, #255	; 0xff
    60ec:	d003      	beq.n	60f6 <__aeabi_d2f+0x5a>
    60ee:	0192      	lsls	r2, r2, #6
    60f0:	0a52      	lsrs	r2, r2, #9
    60f2:	b2db      	uxtb	r3, r3
    60f4:	e001      	b.n	60fa <__aeabi_d2f+0x5e>
    60f6:	23ff      	movs	r3, #255	; 0xff
    60f8:	2200      	movs	r2, #0
    60fa:	0252      	lsls	r2, r2, #9
    60fc:	0a52      	lsrs	r2, r2, #9
    60fe:	05db      	lsls	r3, r3, #23
    6100:	4313      	orrs	r3, r2
    6102:	005b      	lsls	r3, r3, #1
    6104:	07c9      	lsls	r1, r1, #31
    6106:	085b      	lsrs	r3, r3, #1
    6108:	430b      	orrs	r3, r1
    610a:	0018      	movs	r0, r3
    610c:	bd70      	pop	{r4, r5, r6, pc}
    610e:	2e00      	cmp	r6, #0
    6110:	d007      	beq.n	6122 <__aeabi_d2f+0x86>
    6112:	4314      	orrs	r4, r2
    6114:	d0ef      	beq.n	60f6 <__aeabi_d2f+0x5a>
    6116:	2080      	movs	r0, #128	; 0x80
    6118:	00d2      	lsls	r2, r2, #3
    611a:	0480      	lsls	r0, r0, #18
    611c:	4302      	orrs	r2, r0
    611e:	23ff      	movs	r3, #255	; 0xff
    6120:	e7d7      	b.n	60d2 <__aeabi_d2f+0x36>
    6122:	4322      	orrs	r2, r4
    6124:	2300      	movs	r3, #0
    6126:	2a00      	cmp	r2, #0
    6128:	d003      	beq.n	6132 <__aeabi_d2f+0x96>
    612a:	2205      	movs	r2, #5
    612c:	08d2      	lsrs	r2, r2, #3
    612e:	2bff      	cmp	r3, #255	; 0xff
    6130:	d003      	beq.n	613a <__aeabi_d2f+0x9e>
    6132:	0252      	lsls	r2, r2, #9
    6134:	0a52      	lsrs	r2, r2, #9
    6136:	b2db      	uxtb	r3, r3
    6138:	e7df      	b.n	60fa <__aeabi_d2f+0x5e>
    613a:	2a00      	cmp	r2, #0
    613c:	d032      	beq.n	61a4 <__aeabi_d2f+0x108>
    613e:	2080      	movs	r0, #128	; 0x80
    6140:	03c0      	lsls	r0, r0, #15
    6142:	4302      	orrs	r2, r0
    6144:	0252      	lsls	r2, r2, #9
    6146:	0a52      	lsrs	r2, r2, #9
    6148:	e7d7      	b.n	60fa <__aeabi_d2f+0x5e>
    614a:	0018      	movs	r0, r3
    614c:	3017      	adds	r0, #23
    614e:	db14      	blt.n	617a <__aeabi_d2f+0xde>
    6150:	2080      	movs	r0, #128	; 0x80
    6152:	0400      	lsls	r0, r0, #16
    6154:	4302      	orrs	r2, r0
    6156:	201e      	movs	r0, #30
    6158:	1ac0      	subs	r0, r0, r3
    615a:	281f      	cmp	r0, #31
    615c:	dc0f      	bgt.n	617e <__aeabi_d2f+0xe2>
    615e:	0025      	movs	r5, r4
    6160:	4b12      	ldr	r3, [pc, #72]	; (61ac <__aeabi_d2f+0x110>)
    6162:	18f3      	adds	r3, r6, r3
    6164:	409d      	lsls	r5, r3
    6166:	1e6e      	subs	r6, r5, #1
    6168:	41b5      	sbcs	r5, r6
    616a:	409a      	lsls	r2, r3
    616c:	002b      	movs	r3, r5
    616e:	4313      	orrs	r3, r2
    6170:	0022      	movs	r2, r4
    6172:	40c2      	lsrs	r2, r0
    6174:	431a      	orrs	r2, r3
    6176:	2300      	movs	r3, #0
    6178:	e7ab      	b.n	60d2 <__aeabi_d2f+0x36>
    617a:	2300      	movs	r3, #0
    617c:	e7d5      	b.n	612a <__aeabi_d2f+0x8e>
    617e:	2502      	movs	r5, #2
    6180:	426d      	negs	r5, r5
    6182:	1aeb      	subs	r3, r5, r3
    6184:	0015      	movs	r5, r2
    6186:	40dd      	lsrs	r5, r3
    6188:	2820      	cmp	r0, #32
    618a:	d009      	beq.n	61a0 <__aeabi_d2f+0x104>
    618c:	4b08      	ldr	r3, [pc, #32]	; (61b0 <__aeabi_d2f+0x114>)
    618e:	18f3      	adds	r3, r6, r3
    6190:	409a      	lsls	r2, r3
    6192:	4314      	orrs	r4, r2
    6194:	1e62      	subs	r2, r4, #1
    6196:	4194      	sbcs	r4, r2
    6198:	0022      	movs	r2, r4
    619a:	2300      	movs	r3, #0
    619c:	432a      	orrs	r2, r5
    619e:	e798      	b.n	60d2 <__aeabi_d2f+0x36>
    61a0:	2200      	movs	r2, #0
    61a2:	e7f6      	b.n	6192 <__aeabi_d2f+0xf6>
    61a4:	2200      	movs	r2, #0
    61a6:	e7a8      	b.n	60fa <__aeabi_d2f+0x5e>
    61a8:	fffffc80 	.word	0xfffffc80
    61ac:	fffffc82 	.word	0xfffffc82
    61b0:	fffffca2 	.word	0xfffffca2

000061b4 <__aeabi_uidiv>:
    61b4:	2200      	movs	r2, #0
    61b6:	0843      	lsrs	r3, r0, #1
    61b8:	428b      	cmp	r3, r1
    61ba:	d374      	bcc.n	62a6 <__aeabi_uidiv+0xf2>
    61bc:	0903      	lsrs	r3, r0, #4
    61be:	428b      	cmp	r3, r1
    61c0:	d35f      	bcc.n	6282 <__aeabi_uidiv+0xce>
    61c2:	0a03      	lsrs	r3, r0, #8
    61c4:	428b      	cmp	r3, r1
    61c6:	d344      	bcc.n	6252 <__aeabi_uidiv+0x9e>
    61c8:	0b03      	lsrs	r3, r0, #12
    61ca:	428b      	cmp	r3, r1
    61cc:	d328      	bcc.n	6220 <__aeabi_uidiv+0x6c>
    61ce:	0c03      	lsrs	r3, r0, #16
    61d0:	428b      	cmp	r3, r1
    61d2:	d30d      	bcc.n	61f0 <__aeabi_uidiv+0x3c>
    61d4:	22ff      	movs	r2, #255	; 0xff
    61d6:	0209      	lsls	r1, r1, #8
    61d8:	ba12      	rev	r2, r2
    61da:	0c03      	lsrs	r3, r0, #16
    61dc:	428b      	cmp	r3, r1
    61de:	d302      	bcc.n	61e6 <__aeabi_uidiv+0x32>
    61e0:	1212      	asrs	r2, r2, #8
    61e2:	0209      	lsls	r1, r1, #8
    61e4:	d065      	beq.n	62b2 <__aeabi_uidiv+0xfe>
    61e6:	0b03      	lsrs	r3, r0, #12
    61e8:	428b      	cmp	r3, r1
    61ea:	d319      	bcc.n	6220 <__aeabi_uidiv+0x6c>
    61ec:	e000      	b.n	61f0 <__aeabi_uidiv+0x3c>
    61ee:	0a09      	lsrs	r1, r1, #8
    61f0:	0bc3      	lsrs	r3, r0, #15
    61f2:	428b      	cmp	r3, r1
    61f4:	d301      	bcc.n	61fa <__aeabi_uidiv+0x46>
    61f6:	03cb      	lsls	r3, r1, #15
    61f8:	1ac0      	subs	r0, r0, r3
    61fa:	4152      	adcs	r2, r2
    61fc:	0b83      	lsrs	r3, r0, #14
    61fe:	428b      	cmp	r3, r1
    6200:	d301      	bcc.n	6206 <__aeabi_uidiv+0x52>
    6202:	038b      	lsls	r3, r1, #14
    6204:	1ac0      	subs	r0, r0, r3
    6206:	4152      	adcs	r2, r2
    6208:	0b43      	lsrs	r3, r0, #13
    620a:	428b      	cmp	r3, r1
    620c:	d301      	bcc.n	6212 <__aeabi_uidiv+0x5e>
    620e:	034b      	lsls	r3, r1, #13
    6210:	1ac0      	subs	r0, r0, r3
    6212:	4152      	adcs	r2, r2
    6214:	0b03      	lsrs	r3, r0, #12
    6216:	428b      	cmp	r3, r1
    6218:	d301      	bcc.n	621e <__aeabi_uidiv+0x6a>
    621a:	030b      	lsls	r3, r1, #12
    621c:	1ac0      	subs	r0, r0, r3
    621e:	4152      	adcs	r2, r2
    6220:	0ac3      	lsrs	r3, r0, #11
    6222:	428b      	cmp	r3, r1
    6224:	d301      	bcc.n	622a <__aeabi_uidiv+0x76>
    6226:	02cb      	lsls	r3, r1, #11
    6228:	1ac0      	subs	r0, r0, r3
    622a:	4152      	adcs	r2, r2
    622c:	0a83      	lsrs	r3, r0, #10
    622e:	428b      	cmp	r3, r1
    6230:	d301      	bcc.n	6236 <__aeabi_uidiv+0x82>
    6232:	028b      	lsls	r3, r1, #10
    6234:	1ac0      	subs	r0, r0, r3
    6236:	4152      	adcs	r2, r2
    6238:	0a43      	lsrs	r3, r0, #9
    623a:	428b      	cmp	r3, r1
    623c:	d301      	bcc.n	6242 <__aeabi_uidiv+0x8e>
    623e:	024b      	lsls	r3, r1, #9
    6240:	1ac0      	subs	r0, r0, r3
    6242:	4152      	adcs	r2, r2
    6244:	0a03      	lsrs	r3, r0, #8
    6246:	428b      	cmp	r3, r1
    6248:	d301      	bcc.n	624e <__aeabi_uidiv+0x9a>
    624a:	020b      	lsls	r3, r1, #8
    624c:	1ac0      	subs	r0, r0, r3
    624e:	4152      	adcs	r2, r2
    6250:	d2cd      	bcs.n	61ee <__aeabi_uidiv+0x3a>
    6252:	09c3      	lsrs	r3, r0, #7
    6254:	428b      	cmp	r3, r1
    6256:	d301      	bcc.n	625c <__aeabi_uidiv+0xa8>
    6258:	01cb      	lsls	r3, r1, #7
    625a:	1ac0      	subs	r0, r0, r3
    625c:	4152      	adcs	r2, r2
    625e:	0983      	lsrs	r3, r0, #6
    6260:	428b      	cmp	r3, r1
    6262:	d301      	bcc.n	6268 <__aeabi_uidiv+0xb4>
    6264:	018b      	lsls	r3, r1, #6
    6266:	1ac0      	subs	r0, r0, r3
    6268:	4152      	adcs	r2, r2
    626a:	0943      	lsrs	r3, r0, #5
    626c:	428b      	cmp	r3, r1
    626e:	d301      	bcc.n	6274 <__aeabi_uidiv+0xc0>
    6270:	014b      	lsls	r3, r1, #5
    6272:	1ac0      	subs	r0, r0, r3
    6274:	4152      	adcs	r2, r2
    6276:	0903      	lsrs	r3, r0, #4
    6278:	428b      	cmp	r3, r1
    627a:	d301      	bcc.n	6280 <__aeabi_uidiv+0xcc>
    627c:	010b      	lsls	r3, r1, #4
    627e:	1ac0      	subs	r0, r0, r3
    6280:	4152      	adcs	r2, r2
    6282:	08c3      	lsrs	r3, r0, #3
    6284:	428b      	cmp	r3, r1
    6286:	d301      	bcc.n	628c <__aeabi_uidiv+0xd8>
    6288:	00cb      	lsls	r3, r1, #3
    628a:	1ac0      	subs	r0, r0, r3
    628c:	4152      	adcs	r2, r2
    628e:	0883      	lsrs	r3, r0, #2
    6290:	428b      	cmp	r3, r1
    6292:	d301      	bcc.n	6298 <__aeabi_uidiv+0xe4>
    6294:	008b      	lsls	r3, r1, #2
    6296:	1ac0      	subs	r0, r0, r3
    6298:	4152      	adcs	r2, r2
    629a:	0843      	lsrs	r3, r0, #1
    629c:	428b      	cmp	r3, r1
    629e:	d301      	bcc.n	62a4 <__aeabi_uidiv+0xf0>
    62a0:	004b      	lsls	r3, r1, #1
    62a2:	1ac0      	subs	r0, r0, r3
    62a4:	4152      	adcs	r2, r2
    62a6:	1a41      	subs	r1, r0, r1
    62a8:	d200      	bcs.n	62ac <__aeabi_uidiv+0xf8>
    62aa:	4601      	mov	r1, r0
    62ac:	4152      	adcs	r2, r2
    62ae:	4610      	mov	r0, r2
    62b0:	4770      	bx	lr
    62b2:	e7ff      	b.n	62b4 <__aeabi_uidiv+0x100>
    62b4:	b501      	push	{r0, lr}
    62b6:	2000      	movs	r0, #0
    62b8:	f000 f806 	bl	62c8 <__aeabi_idiv0>
    62bc:	bd02      	pop	{r1, pc}
    62be:	46c0      	nop			; (mov r8, r8)

000062c0 <__aeabi_uidivmod>:
    62c0:	2900      	cmp	r1, #0
    62c2:	d0f7      	beq.n	62b4 <__aeabi_uidiv+0x100>
    62c4:	e776      	b.n	61b4 <__aeabi_uidiv>
    62c6:	4770      	bx	lr

000062c8 <__aeabi_idiv0>:
    62c8:	4770      	bx	lr
    62ca:	46c0      	nop			; (mov r8, r8)

000062cc <__clzsi2>:
    62cc:	211c      	movs	r1, #28
    62ce:	2301      	movs	r3, #1
    62d0:	041b      	lsls	r3, r3, #16
    62d2:	4298      	cmp	r0, r3
    62d4:	d301      	bcc.n	62da <__clzsi2+0xe>
    62d6:	0c00      	lsrs	r0, r0, #16
    62d8:	3910      	subs	r1, #16
    62da:	0a1b      	lsrs	r3, r3, #8
    62dc:	4298      	cmp	r0, r3
    62de:	d301      	bcc.n	62e4 <__clzsi2+0x18>
    62e0:	0a00      	lsrs	r0, r0, #8
    62e2:	3908      	subs	r1, #8
    62e4:	091b      	lsrs	r3, r3, #4
    62e6:	4298      	cmp	r0, r3
    62e8:	d301      	bcc.n	62ee <__clzsi2+0x22>
    62ea:	0900      	lsrs	r0, r0, #4
    62ec:	3904      	subs	r1, #4
    62ee:	a202      	add	r2, pc, #8	; (adr r2, 62f8 <__clzsi2+0x2c>)
    62f0:	5c10      	ldrb	r0, [r2, r0]
    62f2:	1840      	adds	r0, r0, r1
    62f4:	4770      	bx	lr
    62f6:	46c0      	nop			; (mov r8, r8)
    62f8:	02020304 	.word	0x02020304
    62fc:	01010101 	.word	0x01010101
	...

00006308 <__errno>:
    6308:	4b01      	ldr	r3, [pc, #4]	; (6310 <__errno+0x8>)
    630a:	6818      	ldr	r0, [r3, #0]
    630c:	4770      	bx	lr
    630e:	46c0      	nop			; (mov r8, r8)
    6310:	200004a0 	.word	0x200004a0

00006314 <__libc_init_array>:
    6314:	b570      	push	{r4, r5, r6, lr}
    6316:	4e0d      	ldr	r6, [pc, #52]	; (634c <__libc_init_array+0x38>)
    6318:	4d0d      	ldr	r5, [pc, #52]	; (6350 <__libc_init_array+0x3c>)
    631a:	2400      	movs	r4, #0
    631c:	1bad      	subs	r5, r5, r6
    631e:	10ad      	asrs	r5, r5, #2
    6320:	d005      	beq.n	632e <__libc_init_array+0x1a>
    6322:	00a3      	lsls	r3, r4, #2
    6324:	58f3      	ldr	r3, [r6, r3]
    6326:	3401      	adds	r4, #1
    6328:	4798      	blx	r3
    632a:	42a5      	cmp	r5, r4
    632c:	d1f9      	bne.n	6322 <__libc_init_array+0xe>
    632e:	f000 f93b 	bl	65a8 <_init>
    6332:	4e08      	ldr	r6, [pc, #32]	; (6354 <__libc_init_array+0x40>)
    6334:	4d08      	ldr	r5, [pc, #32]	; (6358 <__libc_init_array+0x44>)
    6336:	2400      	movs	r4, #0
    6338:	1bad      	subs	r5, r5, r6
    633a:	10ad      	asrs	r5, r5, #2
    633c:	d005      	beq.n	634a <__libc_init_array+0x36>
    633e:	00a3      	lsls	r3, r4, #2
    6340:	58f3      	ldr	r3, [r6, r3]
    6342:	3401      	adds	r4, #1
    6344:	4798      	blx	r3
    6346:	42a5      	cmp	r5, r4
    6348:	d1f9      	bne.n	633e <__libc_init_array+0x2a>
    634a:	bd70      	pop	{r4, r5, r6, pc}
    634c:	000065b4 	.word	0x000065b4
    6350:	000065b4 	.word	0x000065b4
    6354:	000065b4 	.word	0x000065b4
    6358:	000065bc 	.word	0x000065bc

0000635c <register_fini>:
    635c:	4b03      	ldr	r3, [pc, #12]	; (636c <register_fini+0x10>)
    635e:	b510      	push	{r4, lr}
    6360:	2b00      	cmp	r3, #0
    6362:	d002      	beq.n	636a <register_fini+0xe>
    6364:	4802      	ldr	r0, [pc, #8]	; (6370 <register_fini+0x14>)
    6366:	f000 f805 	bl	6374 <atexit>
    636a:	bd10      	pop	{r4, pc}
    636c:	00000000 	.word	0x00000000
    6370:	00006385 	.word	0x00006385

00006374 <atexit>:
    6374:	b510      	push	{r4, lr}
    6376:	0001      	movs	r1, r0
    6378:	2300      	movs	r3, #0
    637a:	2200      	movs	r2, #0
    637c:	2000      	movs	r0, #0
    637e:	f000 f81b 	bl	63b8 <__register_exitproc>
    6382:	bd10      	pop	{r4, pc}

00006384 <__libc_fini_array>:
    6384:	b570      	push	{r4, r5, r6, lr}
    6386:	4b09      	ldr	r3, [pc, #36]	; (63ac <__libc_fini_array+0x28>)
    6388:	4c09      	ldr	r4, [pc, #36]	; (63b0 <__libc_fini_array+0x2c>)
    638a:	1ae4      	subs	r4, r4, r3
    638c:	10a4      	asrs	r4, r4, #2
    638e:	d009      	beq.n	63a4 <__libc_fini_array+0x20>
    6390:	4a08      	ldr	r2, [pc, #32]	; (63b4 <__libc_fini_array+0x30>)
    6392:	18a5      	adds	r5, r4, r2
    6394:	00ad      	lsls	r5, r5, #2
    6396:	18ed      	adds	r5, r5, r3
    6398:	682b      	ldr	r3, [r5, #0]
    639a:	3c01      	subs	r4, #1
    639c:	4798      	blx	r3
    639e:	3d04      	subs	r5, #4
    63a0:	2c00      	cmp	r4, #0
    63a2:	d1f9      	bne.n	6398 <__libc_fini_array+0x14>
    63a4:	f000 f90a 	bl	65bc <_fini>
    63a8:	bd70      	pop	{r4, r5, r6, pc}
    63aa:	46c0      	nop			; (mov r8, r8)
    63ac:	000065c8 	.word	0x000065c8
    63b0:	000065cc 	.word	0x000065cc
    63b4:	3fffffff 	.word	0x3fffffff

000063b8 <__register_exitproc>:
    63b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    63ba:	4644      	mov	r4, r8
    63bc:	465f      	mov	r7, fp
    63be:	4656      	mov	r6, sl
    63c0:	464d      	mov	r5, r9
    63c2:	469b      	mov	fp, r3
    63c4:	4b2f      	ldr	r3, [pc, #188]	; (6484 <__register_exitproc+0xcc>)
    63c6:	b4f0      	push	{r4, r5, r6, r7}
    63c8:	681c      	ldr	r4, [r3, #0]
    63ca:	23a4      	movs	r3, #164	; 0xa4
    63cc:	005b      	lsls	r3, r3, #1
    63ce:	0005      	movs	r5, r0
    63d0:	58e0      	ldr	r0, [r4, r3]
    63d2:	000e      	movs	r6, r1
    63d4:	4690      	mov	r8, r2
    63d6:	2800      	cmp	r0, #0
    63d8:	d04b      	beq.n	6472 <__register_exitproc+0xba>
    63da:	6843      	ldr	r3, [r0, #4]
    63dc:	2b1f      	cmp	r3, #31
    63de:	dc0d      	bgt.n	63fc <__register_exitproc+0x44>
    63e0:	1c5c      	adds	r4, r3, #1
    63e2:	2d00      	cmp	r5, #0
    63e4:	d121      	bne.n	642a <__register_exitproc+0x72>
    63e6:	3302      	adds	r3, #2
    63e8:	009b      	lsls	r3, r3, #2
    63ea:	6044      	str	r4, [r0, #4]
    63ec:	501e      	str	r6, [r3, r0]
    63ee:	2000      	movs	r0, #0
    63f0:	bc3c      	pop	{r2, r3, r4, r5}
    63f2:	4690      	mov	r8, r2
    63f4:	4699      	mov	r9, r3
    63f6:	46a2      	mov	sl, r4
    63f8:	46ab      	mov	fp, r5
    63fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    63fc:	4b22      	ldr	r3, [pc, #136]	; (6488 <__register_exitproc+0xd0>)
    63fe:	2b00      	cmp	r3, #0
    6400:	d03c      	beq.n	647c <__register_exitproc+0xc4>
    6402:	20c8      	movs	r0, #200	; 0xc8
    6404:	0040      	lsls	r0, r0, #1
    6406:	e000      	b.n	640a <__register_exitproc+0x52>
    6408:	bf00      	nop
    640a:	2800      	cmp	r0, #0
    640c:	d036      	beq.n	647c <__register_exitproc+0xc4>
    640e:	22a4      	movs	r2, #164	; 0xa4
    6410:	2300      	movs	r3, #0
    6412:	0052      	lsls	r2, r2, #1
    6414:	58a1      	ldr	r1, [r4, r2]
    6416:	6043      	str	r3, [r0, #4]
    6418:	6001      	str	r1, [r0, #0]
    641a:	50a0      	str	r0, [r4, r2]
    641c:	3240      	adds	r2, #64	; 0x40
    641e:	5083      	str	r3, [r0, r2]
    6420:	3204      	adds	r2, #4
    6422:	5083      	str	r3, [r0, r2]
    6424:	2401      	movs	r4, #1
    6426:	2d00      	cmp	r5, #0
    6428:	d0dd      	beq.n	63e6 <__register_exitproc+0x2e>
    642a:	009a      	lsls	r2, r3, #2
    642c:	4691      	mov	r9, r2
    642e:	4481      	add	r9, r0
    6430:	4642      	mov	r2, r8
    6432:	2188      	movs	r1, #136	; 0x88
    6434:	464f      	mov	r7, r9
    6436:	507a      	str	r2, [r7, r1]
    6438:	22c4      	movs	r2, #196	; 0xc4
    643a:	0052      	lsls	r2, r2, #1
    643c:	4690      	mov	r8, r2
    643e:	4480      	add	r8, r0
    6440:	4642      	mov	r2, r8
    6442:	3987      	subs	r1, #135	; 0x87
    6444:	4099      	lsls	r1, r3
    6446:	6812      	ldr	r2, [r2, #0]
    6448:	468a      	mov	sl, r1
    644a:	430a      	orrs	r2, r1
    644c:	4694      	mov	ip, r2
    644e:	4642      	mov	r2, r8
    6450:	4661      	mov	r1, ip
    6452:	6011      	str	r1, [r2, #0]
    6454:	2284      	movs	r2, #132	; 0x84
    6456:	4649      	mov	r1, r9
    6458:	465f      	mov	r7, fp
    645a:	0052      	lsls	r2, r2, #1
    645c:	508f      	str	r7, [r1, r2]
    645e:	2d02      	cmp	r5, #2
    6460:	d1c1      	bne.n	63e6 <__register_exitproc+0x2e>
    6462:	0002      	movs	r2, r0
    6464:	4655      	mov	r5, sl
    6466:	328d      	adds	r2, #141	; 0x8d
    6468:	32ff      	adds	r2, #255	; 0xff
    646a:	6811      	ldr	r1, [r2, #0]
    646c:	430d      	orrs	r5, r1
    646e:	6015      	str	r5, [r2, #0]
    6470:	e7b9      	b.n	63e6 <__register_exitproc+0x2e>
    6472:	0020      	movs	r0, r4
    6474:	304d      	adds	r0, #77	; 0x4d
    6476:	30ff      	adds	r0, #255	; 0xff
    6478:	50e0      	str	r0, [r4, r3]
    647a:	e7ae      	b.n	63da <__register_exitproc+0x22>
    647c:	2001      	movs	r0, #1
    647e:	4240      	negs	r0, r0
    6480:	e7b6      	b.n	63f0 <__register_exitproc+0x38>
    6482:	46c0      	nop			; (mov r8, r8)
    6484:	000065a4 	.word	0x000065a4
    6488:	00000000 	.word	0x00000000

0000648c <spi2MOSI>:
    648c:	0c000002 00000200                                .....

00006491 <spi2SCK>:
    6491:	0f000002 00000200                                .....

00006496 <spi2MISO>:
    6496:	0d000002 00000000                                .....

0000649b <senseBatPin>:
    649b:	06000000 01000106                                .....

000064a0 <senseAPin>:
    64a0:	03010001 0100010b                                .....

000064a5 <senseBPin>:
    64a5:	02010001 0000000a                                .....

000064aa <senseCPin>:
    64aa:	03000000 00000003                                .....

000064af <senseDPin>:
    64af:	02000000 00000002                                .....

000064b4 <analogAccelPin>:
    64b4:	07000000 00000207                                .....

000064b9 <spi2MOSI>:
    64b9:	0c000002 00000200                                .....

000064be <spi2SCK>:
    64be:	0f000002 6f700000 00000077 00000000     ......pow.......
	...

000064d0 <TWO52>:
    64d0:	00000000 43300000 00000000 c3300000     ......0C......0.
    64e0:	00003f2c 00003e8a 00003e8a 00003e88     ,?...>...>...>..
    64f0:	00003f1e 00003f1e 00003f14 00003e88     .?...?...?...>..
    6500:	00003f1e 00003f14 00003f1e 00003e88     .?...?...?...>..
    6510:	00003f24 00003f24 00003f24 00003fae     $?..$?..$?...?..
    6520:	00004c60 00004b2e 00004c34 00004b24     `L...K..4L..$K..
    6530:	00004c34 00004c3e 00004c34 00004b24     4L..>L..4L..$K..
    6540:	00004b2e 00004b2e 00004c3e 00004b24     .K...K..>L..$K..
    6550:	00004b1a 00004b1a 00004b1a 00004e90     .K...K...K...N..
    6560:	000054a8 00005368 00005368 00005366     .T..hS..hS..fS..
    6570:	00005480 00005480 00005472 00005366     .T...T..rT..fS..
    6580:	00005480 00005472 00005480 00005366     .T..rT...T..fS..
    6590:	00005488 00005488 00005488 00005688     .T...T...T...V..
    65a0:	00000043                                C...

000065a4 <_global_impure_ptr>:
    65a4:	20000078                                x.. 

000065a8 <_init>:
    65a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    65aa:	46c0      	nop			; (mov r8, r8)
    65ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
    65ae:	bc08      	pop	{r3}
    65b0:	469e      	mov	lr, r3
    65b2:	4770      	bx	lr

000065b4 <__init_array_start>:
    65b4:	0000635d 	.word	0x0000635d

000065b8 <__frame_dummy_init_array_entry>:
    65b8:	000000dd                                ....

000065bc <_fini>:
    65bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    65be:	46c0      	nop			; (mov r8, r8)
    65c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    65c2:	bc08      	pop	{r3}
    65c4:	469e      	mov	lr, r3
    65c6:	4770      	bx	lr

000065c8 <__fini_array_start>:
    65c8:	000000b5 	.word	0x000000b5
