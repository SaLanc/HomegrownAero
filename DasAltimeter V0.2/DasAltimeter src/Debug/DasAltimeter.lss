
DasAltimeter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000651c  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000004a4  20000000  0000651c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000368  200004a8  000069c8  000204a8  2**3
                  ALLOC
  3 .stack        00002000  20000810  00006d30  000204a8  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000204a4  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  000204cc  2**0
                  CONTENTS, READONLY
  6 .debug_info   0001ffea  00000000  00000000  00020525  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002619  00000000  00000000  0004050f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000239b  00000000  00000000  00042b28  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000003d8  00000000  00000000  00044ec3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000ba0  00000000  00000000  0004529b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00015f56  00000000  00000000  00045e3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000093d1  00000000  00000000  0005bd91  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00072988  00000000  00000000  00065162  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001054  00000000  00000000  000d7aec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
 *         retrieved from cpu registers.
 */
void SystemCoreClockUpdate(void)
{
	// Not implemented
	SystemCoreClock = __SYSTEM_CLOCK;
       0:	20002810 	.word	0x20002810
       4:	00000119 	.word	0x00000119
	return;
}
       8:	00000115 	.word	0x00000115
       c:	00000115 	.word	0x00000115
	...
      2c:	00000115 	.word	0x00000115
	...
      38:	00000115 	.word	0x00000115
      3c:	00000115 	.word	0x00000115
      40:	00000115 	.word	0x00000115
      44:	00000115 	.word	0x00000115
      48:	00000115 	.word	0x00000115
      4c:	0000103d 	.word	0x0000103d
      50:	00000115 	.word	0x00000115
      54:	00000115 	.word	0x00000115
      58:	00000115 	.word	0x00000115
      5c:	00000115 	.word	0x00000115
      60:	00000115 	.word	0x00000115
      64:	00000115 	.word	0x00000115
      68:	00000115 	.word	0x00000115
      6c:	00000115 	.word	0x00000115
      70:	00000115 	.word	0x00000115
      74:	00000115 	.word	0x00000115
      78:	00000115 	.word	0x00000115
      7c:	00000115 	.word	0x00000115
      80:	00000115 	.word	0x00000115
      84:	00000115 	.word	0x00000115
      88:	00000115 	.word	0x00000115
      8c:	000010dd 	.word	0x000010dd
      90:	00001145 	.word	0x00001145
	...
      9c:	00000115 	.word	0x00000115
      a0:	00000115 	.word	0x00000115
      a4:	00000115 	.word	0x00000115
      a8:	00000115 	.word	0x00000115
      ac:	00000115 	.word	0x00000115
      b0:	00000000 	.word	0x00000000

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200004a8 	.word	0x200004a8
      d4:	00000000 	.word	0x00000000
      d8:	0000651c 	.word	0x0000651c

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200004ac 	.word	0x200004ac
     108:	0000651c 	.word	0x0000651c
     10c:	0000651c 	.word	0x0000651c
     110:	00000000 	.word	0x00000000

00000114 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     114:	e7fe      	b.n	114 <Dummy_Handler>
	...

00000118 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
     118:	4821      	ldr	r0, [pc, #132]	; (1a0 <Reset_Handler+0x88>)
     11a:	4922      	ldr	r1, [pc, #136]	; (1a4 <Reset_Handler+0x8c>)
     11c:	b570      	push	{r4, r5, r6, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
     11e:	4288      	cmp	r0, r1
     120:	d002      	beq.n	128 <Reset_Handler+0x10>
     122:	2300      	movs	r3, #0
                for (; pDest < &_erelocate;) {
     124:	4c20      	ldr	r4, [pc, #128]	; (1a8 <Reset_Handler+0x90>)
     126:	e003      	b.n	130 <Reset_Handler+0x18>
     128:	4b20      	ldr	r3, [pc, #128]	; (1ac <Reset_Handler+0x94>)
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     12a:	4a21      	ldr	r2, [pc, #132]	; (1b0 <Reset_Handler+0x98>)
                *pDest++ = 0;
     12c:	2100      	movs	r1, #0
     12e:	e006      	b.n	13e <Reset_Handler+0x26>
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
     130:	18ca      	adds	r2, r1, r3
     132:	42a2      	cmp	r2, r4
     134:	d2f8      	bcs.n	128 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
     136:	58c5      	ldr	r5, [r0, r3]
     138:	3304      	adds	r3, #4
     13a:	6015      	str	r5, [r2, #0]
     13c:	e7f8      	b.n	130 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     13e:	4293      	cmp	r3, r2
     140:	d201      	bcs.n	146 <Reset_Handler+0x2e>
                *pDest++ = 0;
     142:	c302      	stmia	r3!, {r1}
     144:	e7fb      	b.n	13e <Reset_Handler+0x26>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     146:	21ff      	movs	r1, #255	; 0xff

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     148:	2402      	movs	r4, #2
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     14a:	2503      	movs	r5, #3
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     14c:	4b19      	ldr	r3, [pc, #100]	; (1b4 <Reset_Handler+0x9c>)
     14e:	4a1a      	ldr	r2, [pc, #104]	; (1b8 <Reset_Handler+0xa0>)
     150:	438b      	bics	r3, r1

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     152:	260c      	movs	r6, #12
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     154:	6093      	str	r3, [r2, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     156:	2208      	movs	r2, #8
        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     158:	4b18      	ldr	r3, [pc, #96]	; (1bc <Reset_Handler+0xa4>)
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     15a:	4919      	ldr	r1, [pc, #100]	; (1c0 <Reset_Handler+0xa8>)
        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     15c:	625c      	str	r4, [r3, #36]	; 0x24
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     15e:	78cb      	ldrb	r3, [r1, #3]
     160:	43ab      	bics	r3, r5
     162:	4323      	orrs	r3, r4
     164:	70cb      	strb	r3, [r1, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     166:	78cb      	ldrb	r3, [r1, #3]
     168:	43b3      	bics	r3, r6
     16a:	4313      	orrs	r3, r2
     16c:	70cb      	strb	r3, [r1, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
     16e:	2130      	movs	r1, #48	; 0x30
     170:	4b14      	ldr	r3, [pc, #80]	; (1c4 <Reset_Handler+0xac>)
     172:	7b98      	ldrb	r0, [r3, #14]
     174:	4388      	bics	r0, r1
     176:	3910      	subs	r1, #16
     178:	4308      	orrs	r0, r1
     17a:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     17c:	7b99      	ldrb	r1, [r3, #14]
     17e:	43b1      	bics	r1, r6
     180:	4311      	orrs	r1, r2
     182:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
     184:	2180      	movs	r1, #128	; 0x80
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
        DMAC->QOSCTRL.bit.FQOS = 2;
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     186:	7b9a      	ldrb	r2, [r3, #14]
     188:	43aa      	bics	r2, r5
     18a:	4322      	orrs	r2, r4
     18c:	739a      	strb	r2, [r3, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
     18e:	4a0e      	ldr	r2, [pc, #56]	; (1c8 <Reset_Handler+0xb0>)
     190:	6853      	ldr	r3, [r2, #4]
     192:	430b      	orrs	r3, r1
     194:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
     196:	4b0d      	ldr	r3, [pc, #52]	; (1cc <Reset_Handler+0xb4>)
     198:	4798      	blx	r3

        /* Branch to main function */
        main();
     19a:	4b0d      	ldr	r3, [pc, #52]	; (1d0 <Reset_Handler+0xb8>)
     19c:	4798      	blx	r3
     19e:	e7fe      	b.n	19e <Reset_Handler+0x86>
     1a0:	0000651c 	.word	0x0000651c
     1a4:	20000000 	.word	0x20000000
     1a8:	200004a4 	.word	0x200004a4
     1ac:	200004a8 	.word	0x200004a8
     1b0:	20000810 	.word	0x20000810
     1b4:	00000000 	.word	0x00000000
     1b8:	e000ed00 	.word	0xe000ed00
     1bc:	410070fc 	.word	0x410070fc
     1c0:	41005000 	.word	0x41005000
     1c4:	41004800 	.word	0x41004800
     1c8:	41004000 	.word	0x41004000
     1cc:	0000627d 	.word	0x0000627d
     1d0:	00000a09 	.word	0x00000a09

000001d4 <SystemInit>:
     1d4:	4a01      	ldr	r2, [pc, #4]	; (1dc <SystemInit+0x8>)
     1d6:	4b02      	ldr	r3, [pc, #8]	; (1e0 <SystemInit+0xc>)
     1d8:	601a      	str	r2, [r3, #0]
     1da:	4770      	bx	lr
     1dc:	000f4240 	.word	0x000f4240
     1e0:	20000000 	.word	0x20000000

000001e4 <AT25SFHoldTillReady>:
    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
    pinHigh(cs_mem);
}

void AT25SFHoldTillReady(){
     1e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     1e6:	2380      	movs	r3, #128	; 0x80
     1e8:	4c0a      	ldr	r4, [pc, #40]	; (214 <AT25SFHoldTillReady+0x30>)
     1ea:	02db      	lsls	r3, r3, #11
	pinLow(cs_mem);
	dummy_rx = spiDataTransfer(SPI1,OPCODE_READSTATUS);
     1ec:	4d0a      	ldr	r5, [pc, #40]	; (218 <AT25SFHoldTillReady+0x34>)
     1ee:	6163      	str	r3, [r4, #20]
     1f0:	2105      	movs	r1, #5
     1f2:	2001      	movs	r0, #1
     1f4:	47a8      	blx	r5
     1f6:	4b09      	ldr	r3, [pc, #36]	; (21c <AT25SFHoldTillReady+0x38>)
     1f8:	002e      	movs	r6, r5
        while (spiDataTransfer(SPI1,dummy_rx) & 0x01);
     1fa:	2701      	movs	r7, #1
     1fc:	001d      	movs	r5, r3
    pinHigh(cs_mem);
}

void AT25SFHoldTillReady(){
	pinLow(cs_mem);
	dummy_rx = spiDataTransfer(SPI1,OPCODE_READSTATUS);
     1fe:	7018      	strb	r0, [r3, #0]
        while (spiDataTransfer(SPI1,dummy_rx) & 0x01);
     200:	7829      	ldrb	r1, [r5, #0]
     202:	2001      	movs	r0, #1
     204:	47b0      	blx	r6
     206:	4238      	tst	r0, r7
     208:	d1fa      	bne.n	200 <AT25SFHoldTillReady+0x1c>
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     20a:	2380      	movs	r3, #128	; 0x80
     20c:	02db      	lsls	r3, r3, #11
     20e:	61a3      	str	r3, [r4, #24]
	pinHigh(cs_mem);
}
     210:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     212:	46c0      	nop			; (mov r8, r8)
     214:	41004400 	.word	0x41004400
     218:	000026e5 	.word	0x000026e5
     21c:	200004cc 	.word	0x200004cc

00000220 <AT25SFChipErase>:
void AT25SFChipErase() {
     220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     222:	2580      	movs	r5, #128	; 0x80
     224:	4c08      	ldr	r4, [pc, #32]	; (248 <AT25SFChipErase+0x28>)
     226:	02ed      	lsls	r5, r5, #11

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
     228:	4f08      	ldr	r7, [pc, #32]	; (24c <AT25SFChipErase+0x2c>)
     22a:	6165      	str	r5, [r4, #20]
     22c:	2106      	movs	r1, #6
     22e:	2001      	movs	r0, #1
     230:	47b8      	blx	r7
     232:	4e07      	ldr	r6, [pc, #28]	; (250 <AT25SFChipErase+0x30>)
    pinHigh(cs_mem);

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_CHIP_ERASE);
     234:	2160      	movs	r1, #96	; 0x60
	pinHigh(cs_mem);
}
void AT25SFChipErase() {

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
     236:	7030      	strb	r0, [r6, #0]
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     238:	61a5      	str	r5, [r4, #24]
    pinHigh(cs_mem);

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_CHIP_ERASE);
     23a:	2001      	movs	r0, #1
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     23c:	6165      	str	r5, [r4, #20]
     23e:	47b8      	blx	r7
     240:	7030      	strb	r0, [r6, #0]
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     242:	61a5      	str	r5, [r4, #24]
    pinHigh(cs_mem);
}
     244:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     246:	46c0      	nop			; (mov r8, r8)
     248:	41004400 	.word	0x41004400
     24c:	000026e5 	.word	0x000026e5
     250:	200004cc 	.word	0x200004cc

00000254 <AT25SFWriteBytes>:
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     254:	2380      	movs	r3, #128	; 0x80
    pinHigh(cs_mem);

    return _byte;
}

void AT25SFWriteBytes(uint32_t address, u8_t len, uint8_t *bytes) {
     256:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     258:	4e19      	ldr	r6, [pc, #100]	; (2c0 <AT25SFWriteBytes+0x6c>)
     25a:	02db      	lsls	r3, r3, #11
     25c:	9201      	str	r2, [sp, #4]
     25e:	0007      	movs	r7, r0


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
     260:	4c18      	ldr	r4, [pc, #96]	; (2c4 <AT25SFWriteBytes+0x70>)
    pinHigh(cs_mem);

    return _byte;
}

void AT25SFWriteBytes(uint32_t address, u8_t len, uint8_t *bytes) {
     262:	9100      	str	r1, [sp, #0]


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
     264:	2001      	movs	r0, #1
     266:	6173      	str	r3, [r6, #20]
     268:	2106      	movs	r1, #6
     26a:	47a0      	blx	r4
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     26c:	2380      	movs	r3, #128	; 0x80
     26e:	4d16      	ldr	r5, [pc, #88]	; (2c8 <AT25SFWriteBytes+0x74>)
     270:	02db      	lsls	r3, r3, #11
     272:	7028      	strb	r0, [r5, #0]
    pinHigh(cs_mem);

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_PROGRAM);
     274:	2102      	movs	r1, #2
     276:	61b3      	str	r3, [r6, #24]
     278:	2001      	movs	r0, #1
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     27a:	6173      	str	r3, [r6, #20]
     27c:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1,((address & 0xFF0000) >> 16));
     27e:	0c39      	lsrs	r1, r7, #16
    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
    pinHigh(cs_mem);

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_PROGRAM);
     280:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1,((address & 0xFF0000) >> 16));
     282:	b2c9      	uxtb	r1, r1
     284:	2001      	movs	r0, #1
     286:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1,((address & 0x00FF00) >>  8));
     288:	0a39      	lsrs	r1, r7, #8
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
    pinHigh(cs_mem);

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_PROGRAM);
    dummy_rx = spiDataTransfer(SPI1,((address & 0xFF0000) >> 16));
     28a:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1,((address & 0x00FF00) >>  8));
     28c:	b2c9      	uxtb	r1, r1
     28e:	2001      	movs	r0, #1
     290:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1,((address & 0x0000FF) >>  0));
     292:	b2f9      	uxtb	r1, r7
    pinHigh(cs_mem);

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_PROGRAM);
    dummy_rx = spiDataTransfer(SPI1,((address & 0xFF0000) >> 16));
    dummy_rx = spiDataTransfer(SPI1,((address & 0x00FF00) >>  8));
     294:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1,((address & 0x0000FF) >>  0));
     296:	2001      	movs	r0, #1
     298:	47a0      	blx	r4
     29a:	9b00      	ldr	r3, [sp, #0]
     29c:	9f01      	ldr	r7, [sp, #4]
     29e:	7028      	strb	r0, [r5, #0]
     2a0:	18fb      	adds	r3, r7, r3
     2a2:	9300      	str	r3, [sp, #0]

    for (u8_t pos = 0; pos < len; ++pos) {
     2a4:	9b00      	ldr	r3, [sp, #0]
     2a6:	429f      	cmp	r7, r3
     2a8:	d005      	beq.n	2b6 <AT25SFWriteBytes+0x62>
        dummy_rx = spiDataTransfer(SPI1, bytes[pos]);
     2aa:	7839      	ldrb	r1, [r7, #0]
     2ac:	2001      	movs	r0, #1
     2ae:	47a0      	blx	r4
     2b0:	3701      	adds	r7, #1
     2b2:	7028      	strb	r0, [r5, #0]
     2b4:	e7f6      	b.n	2a4 <AT25SFWriteBytes+0x50>
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     2b6:	2380      	movs	r3, #128	; 0x80
     2b8:	02db      	lsls	r3, r3, #11
     2ba:	61b3      	str	r3, [r6, #24]
    }

    pinHigh(cs_mem);

}
     2bc:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
     2be:	46c0      	nop			; (mov r8, r8)
     2c0:	41004400 	.word	0x41004400
     2c4:	000026e5 	.word	0x000026e5
     2c8:	200004cc 	.word	0x200004cc

000002cc <AT25SEWritePage>:
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     2cc:	2380      	movs	r3, #128	; 0x80
    delay_ms(70);

}


u8_t AT25SEWritePage(u32_t startingAddress, u8_t *data) {
     2ce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     2d0:	4e18      	ldr	r6, [pc, #96]	; (334 <AT25SEWritePage+0x68>)
     2d2:	02db      	lsls	r3, r3, #11
     2d4:	0007      	movs	r7, r0

    u8_t bytesSent = 0;


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
     2d6:	4d18      	ldr	r5, [pc, #96]	; (338 <AT25SEWritePage+0x6c>)
    delay_ms(70);

}


u8_t AT25SEWritePage(u32_t startingAddress, u8_t *data) {
     2d8:	9101      	str	r1, [sp, #4]

    u8_t bytesSent = 0;


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
     2da:	2001      	movs	r0, #1
     2dc:	6173      	str	r3, [r6, #20]
     2de:	2106      	movs	r1, #6
     2e0:	47a8      	blx	r5
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     2e2:	2380      	movs	r3, #128	; 0x80
     2e4:	4c15      	ldr	r4, [pc, #84]	; (33c <AT25SEWritePage+0x70>)
     2e6:	02db      	lsls	r3, r3, #11
     2e8:	7020      	strb	r0, [r4, #0]
    pinHigh(cs_mem);


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_PROGRAM);
     2ea:	2102      	movs	r1, #2
     2ec:	61b3      	str	r3, [r6, #24]
     2ee:	2001      	movs	r0, #1
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     2f0:	6173      	str	r3, [r6, #20]
     2f2:	47a8      	blx	r5
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     2f4:	0c39      	lsrs	r1, r7, #16
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
    pinHigh(cs_mem);


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_PROGRAM);
     2f6:	7020      	strb	r0, [r4, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     2f8:	b2c9      	uxtb	r1, r1
     2fa:	2001      	movs	r0, #1
     2fc:	47a8      	blx	r5
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     2fe:	0a39      	lsrs	r1, r7, #8
    pinHigh(cs_mem);


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_PROGRAM);
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     300:	7020      	strb	r0, [r4, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     302:	b2c9      	uxtb	r1, r1
     304:	2001      	movs	r0, #1
     306:	47a8      	blx	r5
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
     308:	b2f9      	uxtb	r1, r7


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_PROGRAM);
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     30a:	7020      	strb	r0, [r4, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
     30c:	2001      	movs	r0, #1
     30e:	47a8      	blx	r5
     310:	9f01      	ldr	r7, [sp, #4]
     312:	7020      	strb	r0, [r4, #0]
     314:	1c7b      	adds	r3, r7, #1
     316:	33ff      	adds	r3, #255	; 0xff
     318:	9301      	str	r3, [sp, #4]


    for (u16_t pos = 0; pos < 256; ++pos) {
        ++bytesSent;
        dummy_rx = spiDataTransfer(SPI1,data[pos]);
     31a:	7839      	ldrb	r1, [r7, #0]
     31c:	2001      	movs	r0, #1
     31e:	47a8      	blx	r5
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));


    for (u16_t pos = 0; pos < 256; ++pos) {
     320:	9b01      	ldr	r3, [sp, #4]
     322:	3701      	adds	r7, #1
        ++bytesSent;
        dummy_rx = spiDataTransfer(SPI1,data[pos]);
     324:	7020      	strb	r0, [r4, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));


    for (u16_t pos = 0; pos < 256; ++pos) {
     326:	429f      	cmp	r7, r3
     328:	d1f7      	bne.n	31a <AT25SEWritePage+0x4e>
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     32a:	2380      	movs	r3, #128	; 0x80
     32c:	02db      	lsls	r3, r3, #11
     32e:	61b3      	str	r3, [r6, #24]
    }
    pinHigh(cs_mem);


    return bytesSent;
}
     330:	2000      	movs	r0, #0
     332:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
     334:	41004400 	.word	0x41004400
     338:	000026e5 	.word	0x000026e5
     33c:	200004cc 	.word	0x200004cc

00000340 <AT25SEreadSample>:
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     340:	2380      	movs	r3, #128	; 0x80

void AT25SEreadSample(u32_t startingAddress, u8_t len, u8_t *data) {
     342:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     344:	4f17      	ldr	r7, [pc, #92]	; (3a4 <AT25SEreadSample+0x64>)
     346:	02db      	lsls	r3, r3, #11
     348:	9201      	str	r2, [sp, #4]
     34a:	0006      	movs	r6, r0

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
     34c:	4c16      	ldr	r4, [pc, #88]	; (3a8 <AT25SEreadSample+0x68>)


    return bytesSent;
}

void AT25SEreadSample(u32_t startingAddress, u8_t len, u8_t *data) {
     34e:	9100      	str	r1, [sp, #0]

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
     350:	2001      	movs	r0, #1
     352:	617b      	str	r3, [r7, #20]
     354:	210b      	movs	r1, #11
     356:	47a0      	blx	r4
     358:	4d14      	ldr	r5, [pc, #80]	; (3ac <AT25SEreadSample+0x6c>)
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     35a:	0c31      	lsrs	r1, r6, #16
}

void AT25SEreadSample(u32_t startingAddress, u8_t len, u8_t *data) {

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
     35c:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     35e:	b2c9      	uxtb	r1, r1
     360:	2001      	movs	r0, #1
     362:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     364:	0a31      	lsrs	r1, r6, #8

void AT25SEreadSample(u32_t startingAddress, u8_t len, u8_t *data) {

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     366:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     368:	b2c9      	uxtb	r1, r1
     36a:	2001      	movs	r0, #1
     36c:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
     36e:	b2f1      	uxtb	r1, r6
void AT25SEreadSample(u32_t startingAddress, u8_t len, u8_t *data) {

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     370:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
     372:	2001      	movs	r0, #1
     374:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1, 0xFF);
     376:	21ff      	movs	r1, #255	; 0xff

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
     378:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1, 0xFF);
     37a:	2001      	movs	r0, #1
     37c:	47a0      	blx	r4
     37e:	9b00      	ldr	r3, [sp, #0]
     380:	9e01      	ldr	r6, [sp, #4]
     382:	7028      	strb	r0, [r5, #0]
     384:	18f3      	adds	r3, r6, r3
     386:	9300      	str	r3, [sp, #0]


    for (u8_t pos = 0; pos < len; ++pos) {
     388:	9b00      	ldr	r3, [sp, #0]
     38a:	429e      	cmp	r6, r3
     38c:	d005      	beq.n	39a <AT25SEreadSample+0x5a>
        data[pos] = spiDataTransfer(SPI1,dummy_rx);
     38e:	7829      	ldrb	r1, [r5, #0]
     390:	2001      	movs	r0, #1
     392:	47a0      	blx	r4
     394:	7030      	strb	r0, [r6, #0]
     396:	3601      	adds	r6, #1
     398:	e7f6      	b.n	388 <AT25SEreadSample+0x48>
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     39a:	2380      	movs	r3, #128	; 0x80
     39c:	02db      	lsls	r3, r3, #11
     39e:	61bb      	str	r3, [r7, #24]
    }
    pinHigh(cs_mem);

}
     3a0:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
     3a2:	46c0      	nop			; (mov r8, r8)
     3a4:	41004400 	.word	0x41004400
     3a8:	000026e5 	.word	0x000026e5
     3ac:	200004cc 	.word	0x200004cc

000003b0 <AT25SEreadPage>:
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     3b0:	2380      	movs	r3, #128	; 0x80

void AT25SEreadPage(u32_t startingAddress, u8_t *data) {
     3b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     3b4:	4f16      	ldr	r7, [pc, #88]	; (410 <AT25SEreadPage+0x60>)
     3b6:	02db      	lsls	r3, r3, #11
     3b8:	0006      	movs	r6, r0


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
     3ba:	4c16      	ldr	r4, [pc, #88]	; (414 <AT25SEreadPage+0x64>)
    }
    pinHigh(cs_mem);

}

void AT25SEreadPage(u32_t startingAddress, u8_t *data) {
     3bc:	9101      	str	r1, [sp, #4]


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
     3be:	2001      	movs	r0, #1
     3c0:	617b      	str	r3, [r7, #20]
     3c2:	210b      	movs	r1, #11
     3c4:	47a0      	blx	r4
     3c6:	4d14      	ldr	r5, [pc, #80]	; (418 <AT25SEreadPage+0x68>)
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     3c8:	0c31      	lsrs	r1, r6, #16

void AT25SEreadPage(u32_t startingAddress, u8_t *data) {


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
     3ca:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     3cc:	b2c9      	uxtb	r1, r1
     3ce:	2001      	movs	r0, #1
     3d0:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     3d2:	0a31      	lsrs	r1, r6, #8
void AT25SEreadPage(u32_t startingAddress, u8_t *data) {


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     3d4:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     3d6:	b2c9      	uxtb	r1, r1
     3d8:	2001      	movs	r0, #1
     3da:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
     3dc:	b2f1      	uxtb	r1, r6


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     3de:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
     3e0:	2001      	movs	r0, #1
     3e2:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1, 0xFF);
     3e4:	21ff      	movs	r1, #255	; 0xff

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
     3e6:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1, 0xFF);
     3e8:	2001      	movs	r0, #1
     3ea:	47a0      	blx	r4
     3ec:	9e01      	ldr	r6, [sp, #4]
     3ee:	7028      	strb	r0, [r5, #0]
     3f0:	1c73      	adds	r3, r6, #1
     3f2:	33ff      	adds	r3, #255	; 0xff
     3f4:	9301      	str	r3, [sp, #4]


    for (u16_t pos = 0; pos < 256; ++pos) {
        data[pos] = spiDataTransfer(SPI1,dummy_rx);
     3f6:	7829      	ldrb	r1, [r5, #0]
     3f8:	2001      	movs	r0, #1
     3fa:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
    dummy_rx = spiDataTransfer(SPI1, 0xFF);


    for (u16_t pos = 0; pos < 256; ++pos) {
     3fc:	9b01      	ldr	r3, [sp, #4]
        data[pos] = spiDataTransfer(SPI1,dummy_rx);
     3fe:	7030      	strb	r0, [r6, #0]
     400:	3601      	adds	r6, #1
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
    dummy_rx = spiDataTransfer(SPI1, 0xFF);


    for (u16_t pos = 0; pos < 256; ++pos) {
     402:	429e      	cmp	r6, r3
     404:	d1f7      	bne.n	3f6 <AT25SEreadPage+0x46>
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     406:	2380      	movs	r3, #128	; 0x80
     408:	02db      	lsls	r3, r3, #11
     40a:	61bb      	str	r3, [r7, #24]
        data[pos] = spiDataTransfer(SPI1,dummy_rx);
    }
    pinHigh(cs_mem);

}
     40c:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
     40e:	46c0      	nop			; (mov r8, r8)
     410:	41004400 	.word	0x41004400
     414:	000026e5 	.word	0x000026e5
     418:	200004cc 	.word	0x200004cc

0000041c <readMS5803AdcResults>:
#include <boardDefines.h>
#include <math.h>
//#include <tgmath.h>


u32_t readMS5803AdcResults() {
     41c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     41e:	2780      	movs	r7, #128	; 0x80
     420:	4e0c      	ldr	r6, [pc, #48]	; (454 <readMS5803AdcResults+0x38>)
     422:	01ff      	lsls	r7, r7, #7

    u8_t dummy_tx = 0xFF;


    pinLow(cs_baro);
    spiDataTransfer(SPI2, cmdAdcRead_);
     424:	4c0c      	ldr	r4, [pc, #48]	; (458 <readMS5803AdcResults+0x3c>)
     426:	6177      	str	r7, [r6, #20]
     428:	2100      	movs	r1, #0
     42a:	2002      	movs	r0, #2
     42c:	47a0      	blx	r4
    u8_t _byte1 = spiDataTransfer(SPI2,dummy_tx);
     42e:	21ff      	movs	r1, #255	; 0xff
     430:	2002      	movs	r0, #2
     432:	47a0      	blx	r4
    u8_t _byte2 = spiDataTransfer(SPI2,dummy_tx);
     434:	21ff      	movs	r1, #255	; 0xff
    u8_t dummy_tx = 0xFF;


    pinLow(cs_baro);
    spiDataTransfer(SPI2, cmdAdcRead_);
    u8_t _byte1 = spiDataTransfer(SPI2,dummy_tx);
     436:	0005      	movs	r5, r0
    u8_t _byte2 = spiDataTransfer(SPI2,dummy_tx);
     438:	2002      	movs	r0, #2
     43a:	47a0      	blx	r4
    u8_t _byte3 = spiDataTransfer(SPI2,dummy_tx);
     43c:	21ff      	movs	r1, #255	; 0xff


    pinLow(cs_baro);
    spiDataTransfer(SPI2, cmdAdcRead_);
    u8_t _byte1 = spiDataTransfer(SPI2,dummy_tx);
    u8_t _byte2 = spiDataTransfer(SPI2,dummy_tx);
     43e:	9001      	str	r0, [sp, #4]
    u8_t _byte3 = spiDataTransfer(SPI2,dummy_tx);
     440:	2002      	movs	r0, #2
     442:	47a0      	blx	r4
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     444:	61b7      	str	r7, [r6, #24]
    pinHigh(cs_baro);

    u32_t _receive = (_byte1 << 16) | (_byte2 << 8) | (_byte3);
    return _receive;
     446:	9b01      	ldr	r3, [sp, #4]
     448:	042d      	lsls	r5, r5, #16
     44a:	021b      	lsls	r3, r3, #8
     44c:	431d      	orrs	r5, r3
     44e:	4328      	orrs	r0, r5
}
     450:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
     452:	46c0      	nop			; (mov r8, r8)
     454:	41004400 	.word	0x41004400
     458:	000026e5 	.word	0x000026e5

0000045c <ConvertPressureTemperature>:

void ConvertPressureTemperature(u32_t pressureRaw, u32_t tempRaw, u32_t* temperatureCelcus, int32_t* pressureMbar ) {
     45c:	b5f0      	push	{r4, r5, r6, r7, lr}
     45e:	b087      	sub	sp, #28
     460:	9304      	str	r3, [sp, #16]
    const u16_t C1 = coefficients_[1];
     462:	4b24      	ldr	r3, [pc, #144]	; (4f4 <ConvertPressureTemperature+0x98>)

    u32_t _receive = (_byte1 << 16) | (_byte2 << 8) | (_byte3);
    return _receive;
}

void ConvertPressureTemperature(u32_t pressureRaw, u32_t tempRaw, u32_t* temperatureCelcus, int32_t* pressureMbar ) {
     464:	9003      	str	r0, [sp, #12]
     466:	0014      	movs	r4, r2
    const u16_t C1 = coefficients_[1];
     468:	885a      	ldrh	r2, [r3, #2]
    const u16_t C5 = coefficients_[5];
    const u16_t C6 = coefficients_[6];

    // calculate 1st order pressure and temperature (MS5607 1st order algorithm)
    const  int32_t dT = (tempRaw) - ((int32_t)C5 << 8);
    *temperatureCelcus  = 2000 + (((int64_t)dT * C6) >> 23) ;
     46a:	4f23      	ldr	r7, [pc, #140]	; (4f8 <ConvertPressureTemperature+0x9c>)
    u32_t _receive = (_byte1 << 16) | (_byte2 << 8) | (_byte3);
    return _receive;
}

void ConvertPressureTemperature(u32_t pressureRaw, u32_t tempRaw, u32_t* temperatureCelcus, int32_t* pressureMbar ) {
    const u16_t C1 = coefficients_[1];
     46c:	9200      	str	r2, [sp, #0]
    const u16_t C2 = coefficients_[2];
     46e:	889a      	ldrh	r2, [r3, #4]
     470:	9201      	str	r2, [sp, #4]
    const u16_t C3 = coefficients_[3];
    const u16_t C4 = coefficients_[4];
     472:	891a      	ldrh	r2, [r3, #8]
}

void ConvertPressureTemperature(u32_t pressureRaw, u32_t tempRaw, u32_t* temperatureCelcus, int32_t* pressureMbar ) {
    const u16_t C1 = coefficients_[1];
    const u16_t C2 = coefficients_[2];
    const u16_t C3 = coefficients_[3];
     474:	88dd      	ldrh	r5, [r3, #6]
    const u16_t C4 = coefficients_[4];
     476:	9202      	str	r2, [sp, #8]
    const u16_t C5 = coefficients_[5];
    const u16_t C6 = coefficients_[6];

    // calculate 1st order pressure and temperature (MS5607 1st order algorithm)
    const  int32_t dT = (tempRaw) - ((int32_t)C5 << 8);
    *temperatureCelcus  = 2000 + (((int64_t)dT * C6) >> 23) ;
     478:	895e      	ldrh	r6, [r3, #10]
     47a:	0236      	lsls	r6, r6, #8
     47c:	1b8e      	subs	r6, r1, r6
     47e:	17f2      	asrs	r2, r6, #31
     480:	9205      	str	r2, [sp, #20]
     482:	8998      	ldrh	r0, [r3, #12]
     484:	0032      	movs	r2, r6
     486:	17f3      	asrs	r3, r6, #31
     488:	2100      	movs	r1, #0
     48a:	47b8      	blx	r7
     48c:	23fa      	movs	r3, #250	; 0xfa
     48e:	0249      	lsls	r1, r1, #9
     490:	0dc0      	lsrs	r0, r0, #23
     492:	4308      	orrs	r0, r1
     494:	00db      	lsls	r3, r3, #3
     496:	18c0      	adds	r0, r0, r3
     498:	6020      	str	r0, [r4, #0]

    const  int64_t OFF   = ((int64_t)C2 << 16) + ((C4 * (int64_t)dT) >> 7);
    const  int64_t SENS  =  ((int64_t)C1 << 15) + ((C3 * (int64_t)dT) >> 8);
    *pressureMbar = ((((pressureRaw * SENS) >> 21) - OFF) >> 15);
     49a:	0032      	movs	r2, r6
     49c:	17f3      	asrs	r3, r6, #31
     49e:	0028      	movs	r0, r5
     4a0:	2100      	movs	r1, #0
     4a2:	47b8      	blx	r7
     4a4:	060c      	lsls	r4, r1, #24
     4a6:	120b      	asrs	r3, r1, #8
     4a8:	2100      	movs	r1, #0
     4aa:	0a02      	lsrs	r2, r0, #8
     4ac:	4322      	orrs	r2, r4
     4ae:	9c00      	ldr	r4, [sp, #0]
     4b0:	03e0      	lsls	r0, r4, #15
     4b2:	1880      	adds	r0, r0, r2
     4b4:	4159      	adcs	r1, r3
     4b6:	9a03      	ldr	r2, [sp, #12]
     4b8:	2300      	movs	r3, #0
     4ba:	47b8      	blx	r7
     4bc:	02cb      	lsls	r3, r1, #11
     4be:	0d44      	lsrs	r4, r0, #21
     4c0:	0032      	movs	r2, r6
     4c2:	431c      	orrs	r4, r3
     4c4:	154d      	asrs	r5, r1, #21
     4c6:	9b05      	ldr	r3, [sp, #20]
     4c8:	9802      	ldr	r0, [sp, #8]
     4ca:	2100      	movs	r1, #0
     4cc:	47b8      	blx	r7
     4ce:	064b      	lsls	r3, r1, #25
     4d0:	09c6      	lsrs	r6, r0, #7
     4d2:	431e      	orrs	r6, r3
     4d4:	2300      	movs	r3, #0
     4d6:	11cf      	asrs	r7, r1, #7
     4d8:	9901      	ldr	r1, [sp, #4]
     4da:	040a      	lsls	r2, r1, #16
     4dc:	1992      	adds	r2, r2, r6
     4de:	417b      	adcs	r3, r7
     4e0:	1aa4      	subs	r4, r4, r2
     4e2:	419d      	sbcs	r5, r3
     4e4:	046b      	lsls	r3, r5, #17
     4e6:	0be4      	lsrs	r4, r4, #15
     4e8:	431c      	orrs	r4, r3
     4ea:	9b04      	ldr	r3, [sp, #16]
     4ec:	601c      	str	r4, [r3, #0]

}
     4ee:	b007      	add	sp, #28
     4f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
     4f2:	46c0      	nop			; (mov r8, r8)
     4f4:	2000063a 	.word	0x2000063a
     4f8:	00003ae1 	.word	0x00003ae1

000004fc <paToFeetNOAA>:

double paToFeetNOAA(int32_t pressureMbar) {
     4fc:	b510      	push	{r4, lr}

    double lower =(((double)(pressureMbar)/10)/1013.25);
    double exponent = 0.190284;

    double altFeet = (1-pow(lower,exponent))*145366.45;
     4fe:	4b0c      	ldr	r3, [pc, #48]	; (530 <paToFeetNOAA+0x34>)
     500:	4798      	blx	r3
     502:	4c0c      	ldr	r4, [pc, #48]	; (534 <paToFeetNOAA+0x38>)
     504:	2200      	movs	r2, #0
     506:	4b0c      	ldr	r3, [pc, #48]	; (538 <paToFeetNOAA+0x3c>)
     508:	47a0      	blx	r4
     50a:	2200      	movs	r2, #0
     50c:	4b0b      	ldr	r3, [pc, #44]	; (53c <paToFeetNOAA+0x40>)
     50e:	47a0      	blx	r4
     510:	4a0b      	ldr	r2, [pc, #44]	; (540 <paToFeetNOAA+0x44>)
     512:	4b0c      	ldr	r3, [pc, #48]	; (544 <paToFeetNOAA+0x48>)
     514:	4c0c      	ldr	r4, [pc, #48]	; (548 <paToFeetNOAA+0x4c>)
     516:	47a0      	blx	r4
    return altFeet;
     518:	4c0c      	ldr	r4, [pc, #48]	; (54c <paToFeetNOAA+0x50>)
double paToFeetNOAA(int32_t pressureMbar) {

    double lower =(((double)(pressureMbar)/10)/1013.25);
    double exponent = 0.190284;

    double altFeet = (1-pow(lower,exponent))*145366.45;
     51a:	0002      	movs	r2, r0
     51c:	000b      	movs	r3, r1
    return altFeet;
     51e:	2000      	movs	r0, #0
     520:	490b      	ldr	r1, [pc, #44]	; (550 <paToFeetNOAA+0x54>)
     522:	47a0      	blx	r4
     524:	4a0b      	ldr	r2, [pc, #44]	; (554 <paToFeetNOAA+0x58>)
     526:	4b0c      	ldr	r3, [pc, #48]	; (558 <paToFeetNOAA+0x5c>)
     528:	4c0c      	ldr	r4, [pc, #48]	; (55c <paToFeetNOAA+0x60>)
     52a:	47a0      	blx	r4

}
     52c:	bd10      	pop	{r4, pc}
     52e:	46c0      	nop			; (mov r8, r8)
     530:	00005c95 	.word	0x00005c95
     534:	00004805 	.word	0x00004805
     538:	40240000 	.word	0x40240000
     53c:	408faa00 	.word	0x408faa00
     540:	e279dd3c 	.word	0xe279dd3c
     544:	3fc85b39 	.word	0x3fc85b39
     548:	00002831 	.word	0x00002831
     54c:	00005541 	.word	0x00005541
     550:	3ff00000 	.word	0x3ff00000
     554:	9999999a 	.word	0x9999999a
     558:	4101beb3 	.word	0x4101beb3
     55c:	0000504d 	.word	0x0000504d

00000560 <readMS5803Coefficients>:



void readMS5803Coefficients() {
     560:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     562:	24a2      	movs	r4, #162	; 0xa2
     564:	4d11      	ldr	r5, [pc, #68]	; (5ac <readMS5803Coefficients+0x4c>)

    u8_t dummy_tx = 0xFF;

    for (u8_t coeff_num = 1; coeff_num < 7 ; ++coeff_num ) {
        delay_us(600);
     566:	2096      	movs	r0, #150	; 0x96
     568:	4e11      	ldr	r6, [pc, #68]	; (5b0 <readMS5803Coefficients+0x50>)
     56a:	0080      	lsls	r0, r0, #2
     56c:	47b0      	blx	r6
        u8_t _cmd = MS5803_CMD_PROM_READ + ((coeff_num)*2);
        delay_us(600);
     56e:	2096      	movs	r0, #150	; 0x96
     570:	0080      	lsls	r0, r0, #2
     572:	47b0      	blx	r6
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     574:	2380      	movs	r3, #128	; 0x80
     576:	4f0f      	ldr	r7, [pc, #60]	; (5b4 <readMS5803Coefficients+0x54>)
     578:	01db      	lsls	r3, r3, #7
     57a:	617b      	str	r3, [r7, #20]
        pinLow(cs_baro);
        spiDataTransfer(SPI2, _cmd);
     57c:	0021      	movs	r1, r4
     57e:	4e0e      	ldr	r6, [pc, #56]	; (5b8 <readMS5803Coefficients+0x58>)
     580:	2002      	movs	r0, #2
     582:	47b0      	blx	r6
        u8_t _byte1 = spiDataTransfer(SPI2,dummy_tx);
     584:	21ff      	movs	r1, #255	; 0xff
     586:	2002      	movs	r0, #2
     588:	47b0      	blx	r6
        u8_t _byte2 = spiDataTransfer(SPI2,dummy_tx);
     58a:	21ff      	movs	r1, #255	; 0xff
        delay_us(600);
        u8_t _cmd = MS5803_CMD_PROM_READ + ((coeff_num)*2);
        delay_us(600);
        pinLow(cs_baro);
        spiDataTransfer(SPI2, _cmd);
        u8_t _byte1 = spiDataTransfer(SPI2,dummy_tx);
     58c:	9001      	str	r0, [sp, #4]
        u8_t _byte2 = spiDataTransfer(SPI2,dummy_tx);
     58e:	2002      	movs	r0, #2
     590:	47b0      	blx	r6
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     592:	2380      	movs	r3, #128	; 0x80
     594:	01db      	lsls	r3, r3, #7
     596:	61bb      	str	r3, [r7, #24]
        pinHigh(cs_baro);
        coefficients_[coeff_num] = (_byte1 << 8) | _byte2;
     598:	9b01      	ldr	r3, [sp, #4]
     59a:	3402      	adds	r4, #2
     59c:	021b      	lsls	r3, r3, #8
     59e:	4318      	orrs	r0, r3
     5a0:	b2e4      	uxtb	r4, r4
     5a2:	8028      	strh	r0, [r5, #0]
     5a4:	3502      	adds	r5, #2

void readMS5803Coefficients() {

    u8_t dummy_tx = 0xFF;

    for (u8_t coeff_num = 1; coeff_num < 7 ; ++coeff_num ) {
     5a6:	2cae      	cmp	r4, #174	; 0xae
     5a8:	d1dd      	bne.n	566 <readMS5803Coefficients+0x6>
        u8_t _byte2 = spiDataTransfer(SPI2,dummy_tx);
        pinHigh(cs_baro);
        coefficients_[coeff_num] = (_byte1 << 8) | _byte2;
    }

}
     5aa:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
     5ac:	2000063c 	.word	0x2000063c
     5b0:	00000fdd 	.word	0x00000fdd
     5b4:	41004400 	.word	0x41004400
     5b8:	000026e5 	.word	0x000026e5

000005bc <initMS5803Barometer>:

void initMS5803Barometer() {
     5bc:	b570      	push	{r4, r5, r6, lr}
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     5be:	2580      	movs	r5, #128	; 0x80
     5c0:	4c06      	ldr	r4, [pc, #24]	; (5dc <initMS5803Barometer+0x20>)
     5c2:	01ed      	lsls	r5, r5, #7


    pinLow(cs_baro);
    spiDataTransfer(SPI2, MS5803_CMD_RES);
     5c4:	211e      	movs	r1, #30
     5c6:	6165      	str	r5, [r4, #20]
     5c8:	4b05      	ldr	r3, [pc, #20]	; (5e0 <initMS5803Barometer+0x24>)
     5ca:	2002      	movs	r0, #2
     5cc:	4798      	blx	r3
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     5ce:	61a5      	str	r5, [r4, #24]

    pinHigh(cs_baro);
    delay_ms(200);
     5d0:	20c8      	movs	r0, #200	; 0xc8
     5d2:	4b04      	ldr	r3, [pc, #16]	; (5e4 <initMS5803Barometer+0x28>)
     5d4:	4798      	blx	r3
    readMS5803Coefficients();
     5d6:	4b04      	ldr	r3, [pc, #16]	; (5e8 <initMS5803Barometer+0x2c>)
     5d8:	4798      	blx	r3

}
     5da:	bd70      	pop	{r4, r5, r6, pc}
     5dc:	41004400 	.word	0x41004400
     5e0:	000026e5 	.word	0x000026e5
     5e4:	0000100d 	.word	0x0000100d
     5e8:	00000561 	.word	0x00000561

000005ec <MS5803_CRC4>:
                n_rem = (n_rem << 1);
            }
        }
    }
    n_rem = (0x000F & (n_rem >> 12));
    coefficients_[7] = crc_read;
     5ec:	4b02      	ldr	r3, [pc, #8]	; (5f8 <MS5803_CRC4+0xc>)
    return (n_rem & 0x00);
}
     5ee:	2000      	movs	r0, #0
                n_rem = (n_rem << 1);
            }
        }
    }
    n_rem = (0x000F & (n_rem >> 12));
    coefficients_[7] = crc_read;
     5f0:	7b9a      	ldrb	r2, [r3, #14]
     5f2:	81da      	strh	r2, [r3, #14]
    return (n_rem & 0x00);
}
     5f4:	4770      	bx	lr
     5f6:	46c0      	nop			; (mov r8, r8)
     5f8:	2000063a 	.word	0x2000063a

000005fc <init>:


void init() {

    /* Set 1 Flash Wait State for 48MHz, cf tables 20.9 and 35.27 in SAMD21 Datasheet */
    NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val;
     5fc:	211e      	movs	r1, #30
#include <util.h>
#include <boardDefines.h>
#include "math.h"


void init() {
     5fe:	b5f0      	push	{r4, r5, r6, r7, lr}

    /* Set 1 Flash Wait State for 48MHz, cf tables 20.9 and 35.27 in SAMD21 Datasheet */
    NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val;
     600:	4af0      	ldr	r2, [pc, #960]	; (9c4 <init+0x3c8>)
#include <util.h>
#include <boardDefines.h>
#include "math.h"


void init() {
     602:	b085      	sub	sp, #20

    /* Set 1 Flash Wait State for 48MHz, cf tables 20.9 and 35.27 in SAMD21 Datasheet */
    NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val;
     604:	6853      	ldr	r3, [r2, #4]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     606:	2401      	movs	r4, #1
     608:	438b      	bics	r3, r1
     60a:	391c      	subs	r1, #28
     60c:	430b      	orrs	r3, r1
     60e:	6053      	str	r3, [r2, #4]

    /* Turn on the digital interface clock */
    PM->APBAMASK.reg |= PM_APBAMASK_GCLK;
     610:	4aed      	ldr	r2, [pc, #948]	; (9c8 <init+0x3cc>)
     612:	3106      	adds	r1, #6
     614:	6993      	ldr	r3, [r2, #24]

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     616:	260f      	movs	r6, #15
     618:	430b      	orrs	r3, r1
     61a:	6193      	str	r3, [r2, #24]

    SystemInit();
     61c:	4beb      	ldr	r3, [pc, #940]	; (9cc <init+0x3d0>)
     61e:	4798      	blx	r3
    GclkInit();
     620:	4beb      	ldr	r3, [pc, #940]	; (9d0 <init+0x3d4>)
     622:	4798      	blx	r3
    RtcInit();
     624:	4beb      	ldr	r3, [pc, #940]	; (9d4 <init+0x3d8>)
     626:	4798      	blx	r3
    delayInit();
     628:	4beb      	ldr	r3, [pc, #940]	; (9d8 <init+0x3dc>)
     62a:	4798      	blx	r3
    adcInit();
     62c:	4beb      	ldr	r3, [pc, #940]	; (9dc <init+0x3e0>)
     62e:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     630:	2240      	movs	r2, #64	; 0x40
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     632:	21c1      	movs	r1, #193	; 0xc1

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     634:	4bea      	ldr	r3, [pc, #936]	; (9e0 <init+0x3e4>)
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     636:	0089      	lsls	r1, r1, #2

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     638:	601a      	str	r2, [r3, #0]
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     63a:	5858      	ldr	r0, [r3, r1]
     63c:	4ae9      	ldr	r2, [pc, #932]	; (9e4 <init+0x3e8>)
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     63e:	2510      	movs	r5, #16
     640:	4002      	ands	r2, r0
     642:	505a      	str	r2, [r3, r1]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     644:	4be8      	ldr	r3, [pc, #928]	; (9e8 <init+0x3ec>)
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     646:	2002      	movs	r0, #2
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     648:	0019      	movs	r1, r3
     64a:	3154      	adds	r1, #84	; 0x54
     64c:	780a      	ldrb	r2, [r1, #0]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     64e:	001f      	movs	r7, r3
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     650:	43a2      	bics	r2, r4
     652:	700a      	strb	r2, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     654:	2280      	movs	r2, #128	; 0x80
     656:	0352      	lsls	r2, r2, #13
     658:	609a      	str	r2, [r3, #8]

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     65a:	3921      	subs	r1, #33	; 0x21
     65c:	780a      	ldrb	r2, [r1, #0]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     65e:	3794      	adds	r7, #148	; 0x94

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     660:	43b2      	bics	r2, r6
     662:	4322      	orrs	r2, r4
     664:	700a      	strb	r2, [r1, #0]
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     666:	7cca      	ldrb	r2, [r1, #19]
     668:	4322      	orrs	r2, r4
     66a:	74ca      	strb	r2, [r1, #19]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     66c:	001a      	movs	r2, r3
     66e:	32c3      	adds	r2, #195	; 0xc3
     670:	7811      	ldrb	r1, [r2, #0]
     672:	43a1      	bics	r1, r4
     674:	7011      	strb	r1, [r2, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     676:	7811      	ldrb	r1, [r2, #0]
     678:	4301      	orrs	r1, r0
     67a:	7011      	strb	r1, [r2, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     67c:	2108      	movs	r1, #8
     67e:	468c      	mov	ip, r1
     680:	449c      	add	ip, r3
     682:	4661      	mov	r1, ip
     684:	3006      	adds	r0, #6
     686:	67c8      	str	r0, [r1, #124]	; 0x7c
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     688:	0019      	movs	r1, r3
     68a:	31b1      	adds	r1, #177	; 0xb1
     68c:	7808      	ldrb	r0, [r1, #0]
     68e:	4030      	ands	r0, r6
     690:	4328      	orrs	r0, r5
     692:	7008      	strb	r0, [r1, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     694:	7810      	ldrb	r0, [r2, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     696:	3d0e      	subs	r5, #14
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     698:	4320      	orrs	r0, r4
     69a:	7010      	strb	r0, [r2, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     69c:	0018      	movs	r0, r3
     69e:	30d7      	adds	r0, #215	; 0xd7
     6a0:	7802      	ldrb	r2, [r0, #0]
     6a2:	43a2      	bics	r2, r4
     6a4:	7002      	strb	r2, [r0, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     6a6:	2080      	movs	r0, #128	; 0x80
     6a8:	4ad0      	ldr	r2, [pc, #832]	; (9ec <init+0x3f0>)
     6aa:	0400      	lsls	r0, r0, #16
     6ac:	6010      	str	r0, [r2, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     6ae:	001a      	movs	r2, r3
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     6b0:	6038      	str	r0, [r7, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     6b2:	32c2      	adds	r2, #194	; 0xc2
     6b4:	7810      	ldrb	r0, [r2, #0]
     6b6:	43a0      	bics	r0, r4
     6b8:	7010      	strb	r0, [r2, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     6ba:	7810      	ldrb	r0, [r2, #0]
     6bc:	4328      	orrs	r0, r5
     6be:	7010      	strb	r0, [r2, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     6c0:	4660      	mov	r0, ip
     6c2:	3502      	adds	r5, #2
     6c4:	67c5      	str	r5, [r0, #124]	; 0x7c

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     6c6:	7808      	ldrb	r0, [r1, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     6c8:	350c      	adds	r5, #12
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     6ca:	43b0      	bics	r0, r6
     6cc:	4320      	orrs	r0, r4
     6ce:	7008      	strb	r0, [r1, #0]
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     6d0:	7811      	ldrb	r1, [r2, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     6d2:	2002      	movs	r0, #2
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     6d4:	4321      	orrs	r1, r4
     6d6:	7011      	strb	r1, [r2, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     6d8:	0019      	movs	r1, r3
     6da:	31d6      	adds	r1, #214	; 0xd6
     6dc:	780a      	ldrb	r2, [r1, #0]
     6de:	43a2      	bics	r2, r4
     6e0:	700a      	strb	r2, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     6e2:	2180      	movs	r1, #128	; 0x80
     6e4:	4ac1      	ldr	r2, [pc, #772]	; (9ec <init+0x3f0>)
     6e6:	03c9      	lsls	r1, r1, #15
     6e8:	6011      	str	r1, [r2, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     6ea:	001a      	movs	r2, r3
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     6ec:	6039      	str	r1, [r7, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     6ee:	3243      	adds	r2, #67	; 0x43
     6f0:	7811      	ldrb	r1, [r2, #0]
     6f2:	3f4b      	subs	r7, #75	; 0x4b
     6f4:	43a1      	bics	r1, r4
     6f6:	7011      	strb	r1, [r2, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     6f8:	7811      	ldrb	r1, [r2, #0]
     6fa:	4301      	orrs	r1, r0
     6fc:	7011      	strb	r1, [r2, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     6fe:	0018      	movs	r0, r3


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     700:	2108      	movs	r1, #8
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     702:	3031      	adds	r0, #49	; 0x31


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     704:	6059      	str	r1, [r3, #4]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     706:	7801      	ldrb	r1, [r0, #0]
     708:	4031      	ands	r1, r6
     70a:	430d      	orrs	r5, r1
     70c:	7005      	strb	r5, [r0, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     70e:	7811      	ldrb	r1, [r2, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     710:	2502      	movs	r5, #2
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     712:	4321      	orrs	r1, r4
     714:	7011      	strb	r1, [r2, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     716:	0019      	movs	r1, r3
     718:	3159      	adds	r1, #89	; 0x59
     71a:	780a      	ldrb	r2, [r1, #0]
     71c:	43a2      	bics	r2, r4
     71e:	700a      	strb	r2, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     720:	2280      	movs	r2, #128	; 0x80
     722:	0492      	lsls	r2, r2, #18
     724:	609a      	str	r2, [r3, #8]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     726:	615a      	str	r2, [r3, #20]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     728:	001a      	movs	r2, r3
     72a:	3242      	adds	r2, #66	; 0x42
     72c:	7811      	ldrb	r1, [r2, #0]
     72e:	43a1      	bics	r1, r4
     730:	7011      	strb	r1, [r2, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     732:	7811      	ldrb	r1, [r2, #0]
     734:	4329      	orrs	r1, r5
     736:	7011      	strb	r1, [r2, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     738:	2104      	movs	r1, #4
     73a:	6059      	str	r1, [r3, #4]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     73c:	7801      	ldrb	r1, [r0, #0]
     73e:	43b1      	bics	r1, r6
     740:	4321      	orrs	r1, r4
     742:	7001      	strb	r1, [r0, #0]
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     744:	7811      	ldrb	r1, [r2, #0]
     746:	4321      	orrs	r1, r4
     748:	7011      	strb	r1, [r2, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     74a:	0019      	movs	r1, r3
     74c:	3158      	adds	r1, #88	; 0x58
     74e:	780a      	ldrb	r2, [r1, #0]
     750:	43a2      	bics	r2, r4
     752:	700a      	strb	r2, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     754:	2280      	movs	r2, #128	; 0x80
    pinIn(senseDPin);
    pinMux(senseDPin);
    pinOut(fireDPin);
    pinLow(fireDPin);

    charges.Afired = false;
     756:	2100      	movs	r1, #0
     758:	0452      	lsls	r2, r2, #17
     75a:	609a      	str	r2, [r3, #8]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     75c:	615a      	str	r2, [r3, #20]
     75e:	4aa4      	ldr	r2, [pc, #656]	; (9f0 <init+0x3f4>)
     760:	7011      	strb	r1, [r2, #0]
    charges.Bfired = false;
     762:	2100      	movs	r1, #0
     764:	7051      	strb	r1, [r2, #1]
    charges.Cfired = false;
     766:	2100      	movs	r1, #0
     768:	7091      	strb	r1, [r2, #2]
    charges.Dfired = false;
     76a:	2100      	movs	r1, #0
     76c:	70d1      	strb	r1, [r2, #3]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     76e:	7dc2      	ldrb	r2, [r0, #23]
     770:	43a2      	bics	r2, r4
     772:	75c2      	strb	r2, [r0, #23]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     774:	2280      	movs	r2, #128	; 0x80
     776:	0052      	lsls	r2, r2, #1
     778:	609a      	str	r2, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     77a:	783a      	ldrb	r2, [r7, #0]
     77c:	43a2      	bics	r2, r4
     77e:	703a      	strb	r2, [r7, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     780:	2280      	movs	r2, #128	; 0x80
     782:	0092      	lsls	r2, r2, #2
     784:	609a      	str	r2, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     786:	001a      	movs	r2, r3
     788:	324b      	adds	r2, #75	; 0x4b
     78a:	7811      	ldrb	r1, [r2, #0]
     78c:	43a1      	bics	r1, r4
     78e:	7011      	strb	r1, [r2, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     790:	7811      	ldrb	r1, [r2, #0]
     792:	4329      	orrs	r1, r5
     794:	7011      	strb	r1, [r2, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     796:	2180      	movs	r1, #128	; 0x80
     798:	0109      	lsls	r1, r1, #4
     79a:	6059      	str	r1, [r3, #4]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     79c:	2135      	movs	r1, #53	; 0x35
     79e:	468c      	mov	ip, r1
     7a0:	449c      	add	ip, r3
     7a2:	4661      	mov	r1, ip
     7a4:	7809      	ldrb	r1, [r1, #0]
     7a6:	351e      	adds	r5, #30
     7a8:	4031      	ands	r1, r6
     7aa:	4329      	orrs	r1, r5
     7ac:	4665      	mov	r5, ip
     7ae:	7029      	strb	r1, [r5, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     7b0:	7811      	ldrb	r1, [r2, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     7b2:	2520      	movs	r5, #32
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     7b4:	4321      	orrs	r1, r4
     7b6:	7011      	strb	r1, [r2, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     7b8:	0019      	movs	r1, r3
     7ba:	3134      	adds	r1, #52	; 0x34
     7bc:	780a      	ldrb	r2, [r1, #0]
     7be:	4032      	ands	r2, r6
     7c0:	432a      	orrs	r2, r5
     7c2:	700a      	strb	r2, [r1, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     7c4:	783a      	ldrb	r2, [r7, #0]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     7c6:	3d1e      	subs	r5, #30
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     7c8:	4322      	orrs	r2, r4
     7ca:	703a      	strb	r2, [r7, #0]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     7cc:	780a      	ldrb	r2, [r1, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     7ce:	3706      	adds	r7, #6

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     7d0:	43b2      	bics	r2, r6
     7d2:	432a      	orrs	r2, r5
     7d4:	700a      	strb	r2, [r1, #0]
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     7d6:	7dc2      	ldrb	r2, [r0, #23]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     7d8:	3196      	adds	r1, #150	; 0x96
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     7da:	4322      	orrs	r2, r4
     7dc:	75c2      	strb	r2, [r0, #23]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     7de:	780a      	ldrb	r2, [r1, #0]
     7e0:	43a2      	bics	r2, r4
     7e2:	700a      	strb	r2, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     7e4:	2280      	movs	r2, #128	; 0x80
     7e6:	4981      	ldr	r1, [pc, #516]	; (9ec <init+0x3f0>)
     7e8:	00d2      	lsls	r2, r2, #3
     7ea:	600a      	str	r2, [r1, #0]
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     7ec:	0019      	movs	r1, r3
     7ee:	3198      	adds	r1, #152	; 0x98
     7f0:	600a      	str	r2, [r1, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     7f2:	7e41      	ldrb	r1, [r0, #25]
     7f4:	43a1      	bics	r1, r4
     7f6:	7641      	strb	r1, [r0, #25]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     7f8:	609a      	str	r2, [r3, #8]
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     7fa:	619a      	str	r2, [r3, #24]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     7fc:	7fc2      	ldrb	r2, [r0, #31]
     7fe:	43a2      	bics	r2, r4
     800:	77c2      	strb	r2, [r0, #31]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     802:	2280      	movs	r2, #128	; 0x80
     804:	0252      	lsls	r2, r2, #9
     806:	609a      	str	r2, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     808:	78ba      	ldrb	r2, [r7, #2]
     80a:	43a2      	bics	r2, r4
     80c:	70ba      	strb	r2, [r7, #2]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     80e:	2280      	movs	r2, #128	; 0x80
     810:	0292      	lsls	r2, r2, #10
     812:	609a      	str	r2, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     814:	001a      	movs	r2, r3
     816:	3253      	adds	r2, #83	; 0x53
     818:	7811      	ldrb	r1, [r2, #0]
     81a:	43a1      	bics	r1, r4
     81c:	7011      	strb	r1, [r2, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     81e:	7811      	ldrb	r1, [r2, #0]
     820:	4329      	orrs	r1, r5
     822:	7011      	strb	r1, [r2, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     824:	2180      	movs	r1, #128	; 0x80
     826:	0309      	lsls	r1, r1, #12
     828:	6059      	str	r1, [r3, #4]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     82a:	2139      	movs	r1, #57	; 0x39
     82c:	468c      	mov	ip, r1
     82e:	449c      	add	ip, r3
     830:	4661      	mov	r1, ip
     832:	7809      	ldrb	r1, [r1, #0]
     834:	351e      	adds	r5, #30
     836:	4031      	ands	r1, r6
     838:	4329      	orrs	r1, r5
     83a:	4665      	mov	r5, ip
     83c:	7029      	strb	r1, [r5, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     83e:	7811      	ldrb	r1, [r2, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     840:	2520      	movs	r5, #32
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     842:	4321      	orrs	r1, r4
     844:	7011      	strb	r1, [r2, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     846:	0019      	movs	r1, r3
     848:	3138      	adds	r1, #56	; 0x38
     84a:	780a      	ldrb	r2, [r1, #0]
     84c:	4032      	ands	r2, r6
     84e:	432a      	orrs	r2, r5
     850:	700a      	strb	r2, [r1, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     852:	78ba      	ldrb	r2, [r7, #2]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     854:	3d1e      	subs	r5, #30
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     856:	4322      	orrs	r2, r4
     858:	70ba      	strb	r2, [r7, #2]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     85a:	780a      	ldrb	r2, [r1, #0]
     85c:	43b2      	bics	r2, r6
     85e:	432a      	orrs	r2, r5
     860:	700a      	strb	r2, [r1, #0]
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     862:	7fc2      	ldrb	r2, [r0, #31]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     864:	3114      	adds	r1, #20
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     866:	4322      	orrs	r2, r4
     868:	77c2      	strb	r2, [r0, #31]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     86a:	798a      	ldrb	r2, [r1, #6]
     86c:	43a2      	bics	r2, r4
     86e:	718a      	strb	r2, [r1, #6]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     870:	2280      	movs	r2, #128	; 0x80
     872:	02d2      	lsls	r2, r2, #11
     874:	609a      	str	r2, [r3, #8]
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     876:	619a      	str	r2, [r3, #24]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     878:	9103      	str	r1, [sp, #12]
     87a:	780a      	ldrb	r2, [r1, #0]
     87c:	43a2      	bics	r2, r4
     87e:	700a      	strb	r2, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     880:	2280      	movs	r2, #128	; 0x80
     882:	0152      	lsls	r2, r2, #5
     884:	609a      	str	r2, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     886:	783a      	ldrb	r2, [r7, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     888:	2120      	movs	r1, #32
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     88a:	43a2      	bics	r2, r4
     88c:	703a      	strb	r2, [r7, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     88e:	2280      	movs	r2, #128	; 0x80
     890:	0212      	lsls	r2, r2, #8
     892:	609a      	str	r2, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     894:	001a      	movs	r2, r3
     896:	324d      	adds	r2, #77	; 0x4d
     898:	7810      	ldrb	r0, [r2, #0]
     89a:	43a0      	bics	r0, r4
     89c:	7010      	strb	r0, [r2, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     89e:	7810      	ldrb	r0, [r2, #0]
     8a0:	4328      	orrs	r0, r5
     8a2:	7010      	strb	r0, [r2, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     8a4:	2080      	movs	r0, #128	; 0x80
     8a6:	0180      	lsls	r0, r0, #6
     8a8:	6058      	str	r0, [r3, #4]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     8aa:	0018      	movs	r0, r3
     8ac:	3036      	adds	r0, #54	; 0x36
     8ae:	7805      	ldrb	r5, [r0, #0]
     8b0:	4035      	ands	r5, r6
     8b2:	430d      	orrs	r5, r1
     8b4:	7005      	strb	r5, [r0, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     8b6:	7811      	ldrb	r1, [r2, #0]
     8b8:	000d      	movs	r5, r1
     8ba:	4325      	orrs	r5, r4
     8bc:	7015      	strb	r5, [r2, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     8be:	2237      	movs	r2, #55	; 0x37
     8c0:	4694      	mov	ip, r2
     8c2:	449c      	add	ip, r3
     8c4:	4662      	mov	r2, ip
     8c6:	2120      	movs	r1, #32
     8c8:	7812      	ldrb	r2, [r2, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     8ca:	2502      	movs	r5, #2
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     8cc:	4032      	ands	r2, r6
     8ce:	430a      	orrs	r2, r1
     8d0:	4661      	mov	r1, ip
     8d2:	700a      	strb	r2, [r1, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     8d4:	2102      	movs	r1, #2
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     8d6:	783a      	ldrb	r2, [r7, #0]
     8d8:	4322      	orrs	r2, r4
     8da:	703a      	strb	r2, [r7, #0]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     8dc:	7802      	ldrb	r2, [r0, #0]
     8de:	43b2      	bics	r2, r6
     8e0:	430a      	orrs	r2, r1
     8e2:	7002      	strb	r2, [r0, #0]
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     8e4:	9a03      	ldr	r2, [sp, #12]
     8e6:	9903      	ldr	r1, [sp, #12]
     8e8:	7812      	ldrb	r2, [r2, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     8ea:	3020      	adds	r0, #32
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     8ec:	4322      	orrs	r2, r4
     8ee:	700a      	strb	r2, [r1, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     8f0:	0019      	movs	r1, r3
     8f2:	314e      	adds	r1, #78	; 0x4e
     8f4:	780a      	ldrb	r2, [r1, #0]
     8f6:	43a2      	bics	r2, r4
     8f8:	700a      	strb	r2, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     8fa:	2280      	movs	r2, #128	; 0x80
     8fc:	01d2      	lsls	r2, r2, #7
     8fe:	609a      	str	r2, [r3, #8]
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     900:	619a      	str	r2, [r3, #24]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     902:	001a      	movs	r2, r3
     904:	3255      	adds	r2, #85	; 0x55
     906:	7811      	ldrb	r1, [r2, #0]
     908:	43a1      	bics	r1, r4
     90a:	7011      	strb	r1, [r2, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     90c:	2180      	movs	r1, #128	; 0x80
     90e:	0389      	lsls	r1, r1, #14
     910:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
}


inline static void pinCfg(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].reg = p.cfg;
     912:	2140      	movs	r1, #64	; 0x40
     914:	7011      	strb	r1, [r2, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     916:	7802      	ldrb	r2, [r0, #0]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     918:	0019      	movs	r1, r3
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     91a:	43a2      	bics	r2, r4
     91c:	7002      	strb	r2, [r0, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     91e:	2280      	movs	r2, #128	; 0x80
     920:	03d2      	lsls	r2, r2, #15

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     922:	313b      	adds	r1, #59	; 0x3b
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     924:	609a      	str	r2, [r3, #8]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     926:	780a      	ldrb	r2, [r1, #0]
     928:	43b2      	bics	r2, r6
     92a:	432a      	orrs	r2, r5
     92c:	700a      	strb	r2, [r1, #0]
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     92e:	7802      	ldrb	r2, [r0, #0]
    pinOut(TxPo);
    pinMux(TxPo);
    pinIn(RxPo);
    pinMux(RxPo);

    sercomClockEnable(SPI2, 3, 4);
     930:	4f30      	ldr	r7, [pc, #192]	; (9f4 <init+0x3f8>)
     932:	4322      	orrs	r2, r4
     934:	7002      	strb	r2, [r0, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     936:	001a      	movs	r2, r3
     938:	3257      	adds	r2, #87	; 0x57
     93a:	7810      	ldrb	r0, [r2, #0]
     93c:	43a0      	bics	r0, r4
     93e:	7010      	strb	r0, [r2, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     940:	7810      	ldrb	r0, [r2, #0]
     942:	4328      	orrs	r0, r5
     944:	7010      	strb	r0, [r2, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     946:	2080      	movs	r0, #128	; 0x80
     948:	0400      	lsls	r0, r0, #16
     94a:	6058      	str	r0, [r3, #4]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     94c:	2020      	movs	r0, #32
     94e:	780b      	ldrb	r3, [r1, #0]
     950:	4033      	ands	r3, r6
     952:	4303      	orrs	r3, r0
     954:	700b      	strb	r3, [r1, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     956:	7813      	ldrb	r3, [r2, #0]
     958:	0028      	movs	r0, r5
     95a:	4323      	orrs	r3, r4
     95c:	7013      	strb	r3, [r2, #0]
     95e:	2103      	movs	r1, #3
     960:	2204      	movs	r2, #4
     962:	47b8      	blx	r7
    sercomSpiMasterInit(SPI2, 1, 3, 0, 0, 0x00);
     964:	2300      	movs	r3, #0
     966:	4e24      	ldr	r6, [pc, #144]	; (9f8 <init+0x3fc>)
     968:	9301      	str	r3, [sp, #4]
     96a:	9300      	str	r3, [sp, #0]
     96c:	0021      	movs	r1, r4
     96e:	0028      	movs	r0, r5
     970:	2203      	movs	r2, #3
     972:	47b0      	blx	r6

    sercomClockEnable(SPI0, 3, 4);
     974:	2204      	movs	r2, #4
     976:	2103      	movs	r1, #3
     978:	2000      	movs	r0, #0
     97a:	47b8      	blx	r7
    sercomSpiMasterInit(SPI0, 3, 0, 0, 0, 0x00);
     97c:	2300      	movs	r3, #0
     97e:	2103      	movs	r1, #3
     980:	9301      	str	r3, [sp, #4]
     982:	9300      	str	r3, [sp, #0]
     984:	001a      	movs	r2, r3
     986:	0018      	movs	r0, r3
     988:	47b0      	blx	r6

    sercomClockEnable(SPI1, 3, 4);
     98a:	0020      	movs	r0, r4
     98c:	2204      	movs	r2, #4
     98e:	2103      	movs	r1, #3
     990:	47b8      	blx	r7
    sercomSpiMasterInit(SPI1, 3, 0, 0, 0, 0x00);
     992:	2300      	movs	r3, #0
     994:	0020      	movs	r0, r4
     996:	9301      	str	r3, [sp, #4]
     998:	9300      	str	r3, [sp, #0]
     99a:	001a      	movs	r2, r3
     99c:	2103      	movs	r1, #3
     99e:	47b0      	blx	r6

    sercomClockEnable(USART3, 4, 8);
     9a0:	2208      	movs	r2, #8
     9a2:	2104      	movs	r1, #4
     9a4:	2003      	movs	r0, #3
     9a6:	47b8      	blx	r7
    sercomUartInit(USART3,1,0,19200);
     9a8:	2396      	movs	r3, #150	; 0x96
     9aa:	0021      	movs	r1, r4
     9ac:	2200      	movs	r2, #0
     9ae:	2003      	movs	r0, #3
     9b0:	01db      	lsls	r3, r3, #7
     9b2:	4c12      	ldr	r4, [pc, #72]	; (9fc <init+0x400>)
     9b4:	47a0      	blx	r4

    TC4Init();
     9b6:	4b12      	ldr	r3, [pc, #72]	; (a00 <init+0x404>)
     9b8:	4798      	blx	r3
    TC5Init();
     9ba:	4b12      	ldr	r3, [pc, #72]	; (a04 <init+0x408>)
     9bc:	4798      	blx	r3
}
     9be:	b005      	add	sp, #20
     9c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
     9c2:	46c0      	nop			; (mov r8, r8)
     9c4:	41004000 	.word	0x41004000
     9c8:	40000400 	.word	0x40000400
     9cc:	000001d5 	.word	0x000001d5
     9d0:	00000e35 	.word	0x00000e35
     9d4:	00000ebd 	.word	0x00000ebd
     9d8:	00000fbd 	.word	0x00000fbd
     9dc:	00000c99 	.word	0x00000c99
     9e0:	e000e100 	.word	0xe000e100
     9e4:	ff00ffff 	.word	0xff00ffff
     9e8:	41004400 	.word	0x41004400
     9ec:	41004488 	.word	0x41004488
     9f0:	20000680 	.word	0x20000680
     9f4:	000025d5 	.word	0x000025d5
     9f8:	00002639 	.word	0x00002639
     9fc:	0000269d 	.word	0x0000269d
     a00:	0000108d 	.word	0x0000108d
     a04:	000010f5 	.word	0x000010f5

00000a08 <main>:


int main(void) {
     a08:	b510      	push	{r4, lr}

    init();
     a0a:	4b0f      	ldr	r3, [pc, #60]	; (a48 <main+0x40>)
     a0c:	4798      	blx	r3

    initMS5803Barometer();
     a0e:	4b0f      	ldr	r3, [pc, #60]	; (a4c <main+0x44>)
     a10:	4798      	blx	r3
    IMUinit();
     a12:	4b0f      	ldr	r3, [pc, #60]	; (a50 <main+0x48>)
     a14:	4798      	blx	r3

    computeKalmanGains();
     a16:	4b0f      	ldr	r3, [pc, #60]	; (a54 <main+0x4c>)
     a18:	4798      	blx	r3

    sampleTick();
     a1a:	4c0f      	ldr	r4, [pc, #60]	; (a58 <main+0x50>)
     a1c:	47a0      	blx	r4

    POST();
     a1e:	4b0f      	ldr	r3, [pc, #60]	; (a5c <main+0x54>)
     a20:	4798      	blx	r3

    beep(400);
     a22:	20c8      	movs	r0, #200	; 0xc8
     a24:	4b0e      	ldr	r3, [pc, #56]	; (a60 <main+0x58>)
     a26:	0040      	lsls	r0, r0, #1
     a28:	4798      	blx	r3

    startupTick = millis();
     a2a:	4b0e      	ldr	r3, [pc, #56]	; (a64 <main+0x5c>)
     a2c:	4798      	blx	r3
     a2e:	4b0e      	ldr	r3, [pc, #56]	; (a68 <main+0x60>)
     a30:	6018      	str	r0, [r3, #0]

    while (1) {
        if (takeSample()) {
     a32:	4b0e      	ldr	r3, [pc, #56]	; (a6c <main+0x64>)
     a34:	4798      	blx	r3
     a36:	2800      	cmp	r0, #0
     a38:	d0fb      	beq.n	a32 <main+0x2a>
            sampleTick();
     a3a:	47a0      	blx	r4
            flight();
     a3c:	4b0c      	ldr	r3, [pc, #48]	; (a70 <main+0x68>)
     a3e:	4798      	blx	r3
            computeKalmanStates();
     a40:	4b0c      	ldr	r3, [pc, #48]	; (a74 <main+0x6c>)
     a42:	4798      	blx	r3
     a44:	e7f5      	b.n	a32 <main+0x2a>
     a46:	46c0      	nop			; (mov r8, r8)
     a48:	000005fd 	.word	0x000005fd
     a4c:	000005bd 	.word	0x000005bd
     a50:	00000a79 	.word	0x00000a79
     a54:	000013e5 	.word	0x000013e5
     a58:	000022f5 	.word	0x000022f5
     a5c:	00000bb1 	.word	0x00000bb1
     a60:	00000d7d 	.word	0x00000d7d
     a64:	00001059 	.word	0x00001059
     a68:	20000524 	.word	0x20000524
     a6c:	000022dd 	.word	0x000022dd
     a70:	0000115d 	.word	0x0000115d
     a74:	00001c85 	.word	0x00001c85

00000a78 <IMUinit>:
#include <util.h>
#include <boardDefines.h>


void IMUinit() {
     a78:	b570      	push	{r4, r5, r6, lr}
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     a7a:	4c08      	ldr	r4, [pc, #32]	; (a9c <IMUinit+0x24>)
     a7c:	2580      	movs	r5, #128	; 0x80
     a7e:	0023      	movs	r3, r4
     a80:	00ed      	lsls	r5, r5, #3
     a82:	3394      	adds	r3, #148	; 0x94
     a84:	601d      	str	r5, [r3, #0]

    uint8_t dummy_Tx = 0xFF;
    uint8_t dummy_rx;

    pinLow(cs_accel);
    spiDataTransfer(SPI0, BMI_ACCEL_PMU_RANGE);
     a86:	4e06      	ldr	r6, [pc, #24]	; (aa0 <IMUinit+0x28>)
     a88:	210f      	movs	r1, #15
     a8a:	2000      	movs	r0, #0
     a8c:	47b0      	blx	r6
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     a8e:	3498      	adds	r4, #152	; 0x98
    spiDataTransfer(SPI0, BMI_ACCEL_16G_RANGE);
     a90:	210c      	movs	r1, #12
     a92:	2000      	movs	r0, #0
     a94:	47b0      	blx	r6
     a96:	6025      	str	r5, [r4, #0]
    pinHigh(cs_accel);

}
     a98:	bd70      	pop	{r4, r5, r6, pc}
     a9a:	46c0      	nop			; (mov r8, r8)
     a9c:	41004400 	.word	0x41004400
     aa0:	000026e5 	.word	0x000026e5

00000aa4 <USARTconnectionAvaliable>:

bool USARTconnectionAvaliable() {
     aa4:	b510      	push	{r4, lr}

    if (sercom(USART3)->SPI.INTFLAG.bit.RXC == 1) {
     aa6:	4b09      	ldr	r3, [pc, #36]	; (acc <USARTconnectionAvaliable+0x28>)
     aa8:	7e1c      	ldrb	r4, [r3, #24]
     aaa:	0764      	lsls	r4, r4, #29
     aac:	0fe4      	lsrs	r4, r4, #31
     aae:	2c01      	cmp	r4, #1
     ab0:	d001      	beq.n	ab6 <USARTconnectionAvaliable+0x12>
            return true;
        } else {
            return false;
        }
    }
    return false;
     ab2:	2000      	movs	r0, #0
     ab4:	e009      	b.n	aca <USARTconnectionAvaliable+0x26>
}

bool USARTconnectionAvaliable() {

    if (sercom(USART3)->SPI.INTFLAG.bit.RXC == 1) {
        u8_t connectAttempt = usartDataIn(USART3);
     ab6:	2003      	movs	r0, #3
     ab8:	4b05      	ldr	r3, [pc, #20]	; (ad0 <USARTconnectionAvaliable+0x2c>)
     aba:	4798      	blx	r3
     abc:	1e01      	subs	r1, r0, #0
        if (connectAttempt == 0x48) {
     abe:	2948      	cmp	r1, #72	; 0x48
     ac0:	d1f7      	bne.n	ab2 <USARTconnectionAvaliable+0xe>
            usartDataOut(USART3, 'H');
     ac2:	2003      	movs	r0, #3
     ac4:	4b03      	ldr	r3, [pc, #12]	; (ad4 <USARTconnectionAvaliable+0x30>)
     ac6:	4798      	blx	r3
            return true;
     ac8:	0020      	movs	r0, r4
        } else {
            return false;
        }
    }
    return false;
}
     aca:	bd10      	pop	{r4, pc}
     acc:	42001400 	.word	0x42001400
     ad0:	00002731 	.word	0x00002731
     ad4:	00002719 	.word	0x00002719

00000ad8 <sendTheasePagesToComputer>:

void sendTheasePagesToComputer(u32_t firstPage, u32_t lastPage) {
     ad8:	b5f0      	push	{r4, r5, r6, r7, lr}
    for (u16_t page = 0; page <= pagesToSend; ++page) {

        u8_t data[256];
        AT25SEreadPage(pageToReadAddress , data);

        for (u16_t dataByte = 0; dataByte < 256; ++dataByte) {
     ada:	2780      	movs	r7, #128	; 0x80
        }
    }
    return false;
}

void sendTheasePagesToComputer(u32_t firstPage, u32_t lastPage) {
     adc:	0005      	movs	r5, r0

    u16_t pagesToSend = (lastPage - firstPage) >> 8;

    u32_t pageToReadAddress = firstPage;

    for (u16_t page = 0; page <= pagesToSend; ++page) {
     ade:	2400      	movs	r4, #0
    return false;
}

void sendTheasePagesToComputer(u32_t firstPage, u32_t lastPage) {

    u16_t pagesToSend = (lastPage - firstPage) >> 8;
     ae0:	1a09      	subs	r1, r1, r0
     ae2:	0a09      	lsrs	r1, r1, #8
        }
    }
    return false;
}

void sendTheasePagesToComputer(u32_t firstPage, u32_t lastPage) {
     ae4:	b0c3      	sub	sp, #268	; 0x10c

    u16_t pagesToSend = (lastPage - firstPage) >> 8;
     ae6:	b28b      	uxth	r3, r1
     ae8:	9301      	str	r3, [sp, #4]
    for (u16_t page = 0; page <= pagesToSend; ++page) {

        u8_t data[256];
        AT25SEreadPage(pageToReadAddress , data);

        for (u16_t dataByte = 0; dataByte < 256; ++dataByte) {
     aea:	007f      	lsls	r7, r7, #1
    u32_t pageToReadAddress = firstPage;

    for (u16_t page = 0; page <= pagesToSend; ++page) {

        u8_t data[256];
        AT25SEreadPage(pageToReadAddress , data);
     aec:	a902      	add	r1, sp, #8
     aee:	0028      	movs	r0, r5
     af0:	4b09      	ldr	r3, [pc, #36]	; (b18 <sendTheasePagesToComputer+0x40>)
     af2:	4798      	blx	r3
     af4:	2600      	movs	r6, #0

        for (u16_t dataByte = 0; dataByte < 256; ++dataByte) {
            usartDataOut(USART3, data[dataByte]);
     af6:	ab02      	add	r3, sp, #8
     af8:	5d99      	ldrb	r1, [r3, r6]
     afa:	2003      	movs	r0, #3
     afc:	4b07      	ldr	r3, [pc, #28]	; (b1c <sendTheasePagesToComputer+0x44>)
     afe:	3601      	adds	r6, #1
     b00:	4798      	blx	r3
    for (u16_t page = 0; page <= pagesToSend; ++page) {

        u8_t data[256];
        AT25SEreadPage(pageToReadAddress , data);

        for (u16_t dataByte = 0; dataByte < 256; ++dataByte) {
     b02:	42be      	cmp	r6, r7
     b04:	d1f7      	bne.n	af6 <sendTheasePagesToComputer+0x1e>

    u16_t pagesToSend = (lastPage - firstPage) >> 8;

    u32_t pageToReadAddress = firstPage;

    for (u16_t page = 0; page <= pagesToSend; ++page) {
     b06:	3401      	adds	r4, #1
     b08:	9b01      	ldr	r3, [sp, #4]

        for (u16_t dataByte = 0; dataByte < 256; ++dataByte) {
            usartDataOut(USART3, data[dataByte]);
        }

        pageToReadAddress = pageToReadAddress + 0x100;
     b0a:	3501      	adds	r5, #1

    u16_t pagesToSend = (lastPage - firstPage) >> 8;

    u32_t pageToReadAddress = firstPage;

    for (u16_t page = 0; page <= pagesToSend; ++page) {
     b0c:	b2a4      	uxth	r4, r4

        for (u16_t dataByte = 0; dataByte < 256; ++dataByte) {
            usartDataOut(USART3, data[dataByte]);
        }

        pageToReadAddress = pageToReadAddress + 0x100;
     b0e:	35ff      	adds	r5, #255	; 0xff

    u16_t pagesToSend = (lastPage - firstPage) >> 8;

    u32_t pageToReadAddress = firstPage;

    for (u16_t page = 0; page <= pagesToSend; ++page) {
     b10:	42a3      	cmp	r3, r4
     b12:	d2eb      	bcs.n	aec <sendTheasePagesToComputer+0x14>
            usartDataOut(USART3, data[dataByte]);
        }

        pageToReadAddress = pageToReadAddress + 0x100;
    }
}
     b14:	b043      	add	sp, #268	; 0x10c
     b16:	bdf0      	pop	{r4, r5, r6, r7, pc}
     b18:	000003b1 	.word	0x000003b1
     b1c:	00002719 	.word	0x00002719

00000b20 <altitudeAGL>:

int32_t altitudeAGL() {
    return altitude - offsets.groundOffset;
     b20:	4b07      	ldr	r3, [pc, #28]	; (b40 <altitudeAGL+0x20>)

        pageToReadAddress = pageToReadAddress + 0x100;
    }
}

int32_t altitudeAGL() {
     b22:	b510      	push	{r4, lr}
    return altitude - offsets.groundOffset;
     b24:	6998      	ldr	r0, [r3, #24]
     b26:	4b07      	ldr	r3, [pc, #28]	; (b44 <altitudeAGL+0x24>)
     b28:	4798      	blx	r3
     b2a:	000b      	movs	r3, r1
     b2c:	4906      	ldr	r1, [pc, #24]	; (b48 <altitudeAGL+0x28>)
     b2e:	0002      	movs	r2, r0
     b30:	6808      	ldr	r0, [r1, #0]
     b32:	6849      	ldr	r1, [r1, #4]
     b34:	4c05      	ldr	r4, [pc, #20]	; (b4c <altitudeAGL+0x2c>)
     b36:	47a0      	blx	r4
     b38:	4b05      	ldr	r3, [pc, #20]	; (b50 <altitudeAGL+0x30>)
     b3a:	4798      	blx	r3
}
     b3c:	bd10      	pop	{r4, pc}
     b3e:	46c0      	nop			; (mov r8, r8)
     b40:	200004d8 	.word	0x200004d8
     b44:	00005d19 	.word	0x00005d19
     b48:	20000698 	.word	0x20000698
     b4c:	00005541 	.word	0x00005541
     b50:	00005c29 	.word	0x00005c29

00000b54 <unplugged>:


bool unplugged() {
    if (sample.voltage.batFloat < 3.3) {
     b54:	4b07      	ldr	r3, [pc, #28]	; (b74 <unplugged+0x20>)
int32_t altitudeAGL() {
    return altitude - offsets.groundOffset;
}


bool unplugged() {
     b56:	b570      	push	{r4, r5, r6, lr}
     b58:	68d8      	ldr	r0, [r3, #12]
     b5a:	4b07      	ldr	r3, [pc, #28]	; (b78 <unplugged+0x24>)
     b5c:	4798      	blx	r3
     b5e:	4a07      	ldr	r2, [pc, #28]	; (b7c <unplugged+0x28>)
     b60:	4b07      	ldr	r3, [pc, #28]	; (b80 <unplugged+0x2c>)
     b62:	4d08      	ldr	r5, [pc, #32]	; (b84 <unplugged+0x30>)
     b64:	2401      	movs	r4, #1
     b66:	47a8      	blx	r5
     b68:	2800      	cmp	r0, #0
     b6a:	d100      	bne.n	b6e <unplugged+0x1a>
     b6c:	1c04      	adds	r4, r0, #0
     b6e:	b2e0      	uxtb	r0, r4
    if (sample.voltage.batFloat < 3.3) {
        return true;
    } else {
        return false;
    }
}
     b70:	bd70      	pop	{r4, r5, r6, pc}
     b72:	46c0      	nop			; (mov r8, r8)
     b74:	200007c8 	.word	0x200007c8
     b78:	00005d89 	.word	0x00005d89
     b7c:	66666666 	.word	0x66666666
     b80:	400a6666 	.word	0x400a6666
     b84:	00003a91 	.word	0x00003a91

00000b88 <finishFlight>:

void finishFlight() {

    flightState = flightIdle;
     b88:	2201      	movs	r2, #1
    } else {
        return false;
    }
}

void finishFlight() {
     b8a:	b510      	push	{r4, lr}

    flightState = flightIdle;
     b8c:	4b04      	ldr	r3, [pc, #16]	; (ba0 <finishFlight+0x18>)
     b8e:	701a      	strb	r2, [r3, #0]
    AT25SFHoldTillReady();
     b90:	4b04      	ldr	r3, [pc, #16]	; (ba4 <finishFlight+0x1c>)
     b92:	4798      	blx	r3
    writeFlightEndAddress( );
     b94:	4b04      	ldr	r3, [pc, #16]	; (ba8 <finishFlight+0x20>)
     b96:	4798      	blx	r3
    unpluggedJingle();
     b98:	4b04      	ldr	r3, [pc, #16]	; (bac <finishFlight+0x24>)
     b9a:	4798      	blx	r3
}
     b9c:	bd10      	pop	{r4, pc}
     b9e:	46c0      	nop			; (mov r8, r8)
     ba0:	20000684 	.word	0x20000684
     ba4:	000001e5 	.word	0x000001e5
     ba8:	000021ed 	.word	0x000021ed
     bac:	00000df1 	.word	0x00000df1

00000bb0 <POST>:

void POST() {
     bb0:	b5f0      	push	{r4, r5, r6, r7, lr}

    bool postFailed = false;
    u8_t failType = 0;

    //Baro post first
    u8_t crc = MS5803_CRC4();
     bb2:	4b30      	ldr	r3, [pc, #192]	; (c74 <POST+0xc4>)
    AT25SFHoldTillReady();
    writeFlightEndAddress( );
    unpluggedJingle();
}

void POST() {
     bb4:	b085      	sub	sp, #20

    bool postFailed = false;
    u8_t failType = 0;

    //Baro post first
    u8_t crc = MS5803_CRC4();
     bb6:	4798      	blx	r3
    if (crc != coefficients_[7]) {
     bb8:	4b2f      	ldr	r3, [pc, #188]	; (c78 <POST+0xc8>)
     bba:	b280      	uxth	r0, r0
     bbc:	89db      	ldrh	r3, [r3, #14]
        postFailed = true;
        failType = 1;
     bbe:	2501      	movs	r5, #1
    bool postFailed = false;
    u8_t failType = 0;

    //Baro post first
    u8_t crc = MS5803_CRC4();
    if (crc != coefficients_[7]) {
     bc0:	4283      	cmp	r3, r0
     bc2:	d100      	bne.n	bc6 <POST+0x16>
void POST() {
    uint8_t dummy_rx;
    uint8_t dummy_Tx = 0xFF;

    bool postFailed = false;
    u8_t failType = 0;
     bc4:	2500      	movs	r5, #0
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     bc6:	2780      	movs	r7, #128	; 0x80
     bc8:	4e2c      	ldr	r6, [pc, #176]	; (c7c <POST+0xcc>)
     bca:	02ff      	lsls	r7, r7, #11
        failType = 1;
    }

    //Memory Post
    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,0x9f); // read id and mfg code
     bcc:	4c2c      	ldr	r4, [pc, #176]	; (c80 <POST+0xd0>)

void POST() {
    uint8_t dummy_rx;
    uint8_t dummy_Tx = 0xFF;

    bool postFailed = false;
     bce:	9501      	str	r5, [sp, #4]
        failType = 1;
    }

    //Memory Post
    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,0x9f); // read id and mfg code
     bd0:	219f      	movs	r1, #159	; 0x9f
     bd2:	6177      	str	r7, [r6, #20]
     bd4:	2001      	movs	r0, #1
     bd6:	47a0      	blx	r4
    u8_t mfgID = spiDataTransfer(SPI1,dummy_Tx);
     bd8:	21ff      	movs	r1, #255	; 0xff
     bda:	2001      	movs	r0, #1
     bdc:	47a0      	blx	r4
    u8_t deviceID1 = spiDataTransfer(SPI1,dummy_Tx);
     bde:	21ff      	movs	r1, #255	; 0xff
    }

    //Memory Post
    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,0x9f); // read id and mfg code
    u8_t mfgID = spiDataTransfer(SPI1,dummy_Tx);
     be0:	9002      	str	r0, [sp, #8]
    u8_t deviceID1 = spiDataTransfer(SPI1,dummy_Tx);
     be2:	2001      	movs	r0, #1
     be4:	47a0      	blx	r4
    u8_t deviceID2 = spiDataTransfer(SPI1,dummy_Tx);
     be6:	21ff      	movs	r1, #255	; 0xff

    //Memory Post
    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,0x9f); // read id and mfg code
    u8_t mfgID = spiDataTransfer(SPI1,dummy_Tx);
    u8_t deviceID1 = spiDataTransfer(SPI1,dummy_Tx);
     be8:	9003      	str	r0, [sp, #12]
    u8_t deviceID2 = spiDataTransfer(SPI1,dummy_Tx);
     bea:	2001      	movs	r0, #1
     bec:	47a0      	blx	r4
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     bee:	61b7      	str	r7, [r6, #24]
    pinHigh(cs_mem);

    if ( mfgID != 0x1f & deviceID1 != 0x86 & deviceID2 != 0x01) {
     bf0:	9f02      	ldr	r7, [sp, #8]
     bf2:	3f1f      	subs	r7, #31
     bf4:	1e7b      	subs	r3, r7, #1
     bf6:	419f      	sbcs	r7, r3
     bf8:	9b03      	ldr	r3, [sp, #12]
     bfa:	3b86      	subs	r3, #134	; 0x86
     bfc:	1e5a      	subs	r2, r3, #1
     bfe:	4193      	sbcs	r3, r2
     c00:	423b      	tst	r3, r7
     c02:	d004      	beq.n	c0e <POST+0x5e>
     c04:	2801      	cmp	r0, #1
     c06:	d002      	beq.n	c0e <POST+0x5e>
        postFailed = true;
     c08:	2301      	movs	r3, #1
        failType = 2;
     c0a:	2502      	movs	r5, #2
    u8_t deviceID1 = spiDataTransfer(SPI1,dummy_Tx);
    u8_t deviceID2 = spiDataTransfer(SPI1,dummy_Tx);
    pinHigh(cs_mem);

    if ( mfgID != 0x1f & deviceID1 != 0x86 & deviceID2 != 0x01) {
        postFailed = true;
     c0c:	9301      	str	r3, [sp, #4]
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     c0e:	2780      	movs	r7, #128	; 0x80
     c10:	4b1c      	ldr	r3, [pc, #112]	; (c84 <POST+0xd4>)
     c12:	00ff      	lsls	r7, r7, #3
     c14:	601f      	str	r7, [r3, #0]
        failType = 2;
    }

    //Accelerometer Post
    pinLow(cs_accel);
    dummy_rx = spiDataTransfer(SPI0, BMI055_BGW_CHIPID | BMI055_READ_REG);
     c16:	2180      	movs	r1, #128	; 0x80
     c18:	2000      	movs	r0, #0
     c1a:	47a0      	blx	r4
    u8_t accelID = spiDataTransfer(SPI0,dummy_Tx);
     c1c:	21ff      	movs	r1, #255	; 0xff
     c1e:	2000      	movs	r0, #0
     c20:	47a0      	blx	r4
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     c22:	4b19      	ldr	r3, [pc, #100]	; (c88 <POST+0xd8>)
     c24:	601f      	str	r7, [r3, #0]
    pinHigh(cs_accel);

    if (accelID != 0xFA) {
     c26:	28fa      	cmp	r0, #250	; 0xfa
     c28:	d002      	beq.n	c30 <POST+0x80>
        postFailed = true;
     c2a:	2301      	movs	r3, #1
        failType = 3;
     c2c:	2503      	movs	r5, #3
    dummy_rx = spiDataTransfer(SPI0, BMI055_BGW_CHIPID | BMI055_READ_REG);
    u8_t accelID = spiDataTransfer(SPI0,dummy_Tx);
    pinHigh(cs_accel);

    if (accelID != 0xFA) {
        postFailed = true;
     c2e:	9301      	str	r3, [sp, #4]
        failType = 3;
    }

    //Gyro Post
    pinLow(cs_gyro);
    dummy_rx = spiDataTransfer(SPI0, BMI055_BGW_CHIPID | BMI055_READ_REG);
     c30:	2180      	movs	r1, #128	; 0x80
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     c32:	6177      	str	r7, [r6, #20]
     c34:	2000      	movs	r0, #0
     c36:	47a0      	blx	r4
    u8_t gyroID = spiDataTransfer(SPI0,dummy_Tx);
     c38:	21ff      	movs	r1, #255	; 0xff
     c3a:	2000      	movs	r0, #0
     c3c:	47a0      	blx	r4
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     c3e:	61b7      	str	r7, [r6, #24]
    pinHigh(cs_gyro);

    if (gyroID != 0x0F) {
     c40:	280f      	cmp	r0, #15
     c42:	d103      	bne.n	c4c <POST+0x9c>
    }

    //Analog Accelerometer Post


    if (postFailed) {
     c44:	9b01      	ldr	r3, [sp, #4]
     c46:	2b00      	cmp	r3, #0
     c48:	d101      	bne.n	c4e <POST+0x9e>
     c4a:	e011      	b.n	c70 <POST+0xc0>
    u8_t gyroID = spiDataTransfer(SPI0,dummy_Tx);
    pinHigh(cs_gyro);

    if (gyroID != 0x0F) {
        postFailed = true;
        failType = 4;
     c4c:	2504      	movs	r5, #4

    if (postFailed) {
        while (1) {
            u8_t beepCount;

            for (beepCount = failType; beepCount > 0; beepCount--) {
     c4e:	002c      	movs	r4, r5
     c50:	4e0e      	ldr	r6, [pc, #56]	; (c8c <POST+0xdc>)
     c52:	2c00      	cmp	r4, #0
     c54:	d009      	beq.n	c6a <POST+0xba>
                beep(300);
     c56:	2096      	movs	r0, #150	; 0x96
     c58:	4b0d      	ldr	r3, [pc, #52]	; (c90 <POST+0xe0>)
     c5a:	0040      	lsls	r0, r0, #1
     c5c:	4798      	blx	r3
                delay_ms(300);
     c5e:	2096      	movs	r0, #150	; 0x96

    if (postFailed) {
        while (1) {
            u8_t beepCount;

            for (beepCount = failType; beepCount > 0; beepCount--) {
     c60:	3c01      	subs	r4, #1
                beep(300);
                delay_ms(300);
     c62:	0040      	lsls	r0, r0, #1
     c64:	47b0      	blx	r6

    if (postFailed) {
        while (1) {
            u8_t beepCount;

            for (beepCount = failType; beepCount > 0; beepCount--) {
     c66:	b2e4      	uxtb	r4, r4
     c68:	e7f2      	b.n	c50 <POST+0xa0>
                beep(300);
                delay_ms(300);
            }
            delay_ms(1500);
     c6a:	480a      	ldr	r0, [pc, #40]	; (c94 <POST+0xe4>)
     c6c:	47b0      	blx	r6
        }
     c6e:	e7ee      	b.n	c4e <POST+0x9e>
    }
}
     c70:	b005      	add	sp, #20
     c72:	bdf0      	pop	{r4, r5, r6, r7, pc}
     c74:	000005ed 	.word	0x000005ed
     c78:	2000063a 	.word	0x2000063a
     c7c:	41004400 	.word	0x41004400
     c80:	000026e5 	.word	0x000026e5
     c84:	41004494 	.word	0x41004494
     c88:	41004498 	.word	0x41004498
     c8c:	0000100d 	.word	0x0000100d
     c90:	00000d7d 	.word	0x00000d7d
     c94:	000005dc 	.word	0x000005dc

00000c98 <adcInit>:
#include <util.h>

void adcInit() {

    // set up clock
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;
     c98:	2180      	movs	r1, #128	; 0x80


#include <util.h>

void adcInit() {
     c9a:	b510      	push	{r4, lr}

    // set up clock
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;
     c9c:	4a10      	ldr	r2, [pc, #64]	; (ce0 <adcInit+0x48>)
     c9e:	0249      	lsls	r1, r1, #9
     ca0:	6a13      	ldr	r3, [r2, #32]
    // divide prescaler by 512 (93.75KHz), max adc freq is 2.1MHz
    ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |
                     ADC_CTRLB_RESSEL_12BIT;

    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
     ca2:	4810      	ldr	r0, [pc, #64]	; (ce4 <adcInit+0x4c>)
#include <util.h>

void adcInit() {

    // set up clock
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;
     ca4:	430b      	orrs	r3, r1
     ca6:	6213      	str	r3, [r2, #32]

    // divide prescaler by 512 (93.75KHz), max adc freq is 2.1MHz
    ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |
     ca8:	23e0      	movs	r3, #224	; 0xe0
     caa:	490f      	ldr	r1, [pc, #60]	; (ce8 <adcInit+0x50>)
                     ADC_CTRLB_RESSEL_12BIT;

    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
     cac:	4a0f      	ldr	r2, [pc, #60]	; (cec <adcInit+0x54>)

    // set up clock
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;

    // divide prescaler by 512 (93.75KHz), max adc freq is 2.1MHz
    ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |
     cae:	00db      	lsls	r3, r3, #3
     cb0:	808b      	strh	r3, [r1, #4]
                     ADC_CTRLB_RESSEL_12BIT;

    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
     cb2:	8050      	strh	r0, [r2, #2]
                        GCLK_CLKCTRL_GEN(0) |
                        GCLK_CLKCTRL_ID(ADC_GCLK_ID);

    ADC->CALIB.reg =
        ADC_CALIB_BIAS_CAL(
     cb4:	4a0e      	ldr	r2, [pc, #56]	; (cf0 <adcInit+0x58>)
    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(0) |
                        GCLK_CLKCTRL_ID(ADC_GCLK_ID);

    ADC->CALIB.reg =
     cb6:	6812      	ldr	r2, [r2, #0]
     cb8:	0150      	lsls	r0, r2, #5
     cba:	4018      	ands	r0, r3
     cbc:	4b0d      	ldr	r3, [pc, #52]	; (cf4 <adcInit+0x5c>)
     cbe:	0154      	lsls	r4, r2, #5
     cc0:	681a      	ldr	r2, [r3, #0]
     cc2:	0ed3      	lsrs	r3, r2, #27
     cc4:	4323      	orrs	r3, r4
     cc6:	b2da      	uxtb	r2, r3
     cc8:	0003      	movs	r3, r0
     cca:	4313      	orrs	r3, r2
     ccc:	850b      	strh	r3, [r1, #40]	; 0x28
        ) |
        ADC_CALIB_LINEARITY_CAL(
            (*(uint64_t *)ADC_FUSES_LINEARITY_0_ADDR >> ADC_FUSES_LINEARITY_0_Pos)
        );

    ADC->REFCTRL.reg = ADC_REFCTRL_REFSEL_INTVCC1;
     cce:	2302      	movs	r3, #2
     cd0:	704b      	strb	r3, [r1, #1]

    ADC->CTRLA.reg = ADC_CTRLA_ENABLE; // enable
     cd2:	700b      	strb	r3, [r1, #0]
    while(ADC->STATUS.reg & ADC_STATUS_SYNCBUSY);
     cd4:	7e4b      	ldrb	r3, [r1, #25]
     cd6:	b25b      	sxtb	r3, r3
     cd8:	2b00      	cmp	r3, #0
     cda:	dbfb      	blt.n	cd4 <adcInit+0x3c>
}
     cdc:	bd10      	pop	{r4, pc}
     cde:	46c0      	nop			; (mov r8, r8)
     ce0:	40000400 	.word	0x40000400
     ce4:	0000401e 	.word	0x0000401e
     ce8:	42004000 	.word	0x42004000
     cec:	40000c00 	.word	0x40000c00
     cf0:	00806024 	.word	0x00806024
     cf4:	00806020 	.word	0x00806020

00000cf8 <adcSample>:



u16_t adcSample() {
    ADC->SWTRIG.reg = ADC_SWTRIG_START;
     cf8:	2202      	movs	r2, #2
     cfa:	4b05      	ldr	r3, [pc, #20]	; (d10 <adcSample+0x18>)
     cfc:	731a      	strb	r2, [r3, #12]
    while(!(ADC->INTFLAG.reg & ADC_INTFLAG_RESRDY)); // wait until result is ready
     cfe:	3a01      	subs	r2, #1
     d00:	7e19      	ldrb	r1, [r3, #24]
     d02:	4211      	tst	r1, r2
     d04:	d0fc      	beq.n	d00 <adcSample+0x8>
    return ADC->RESULT.reg;
     d06:	4b02      	ldr	r3, [pc, #8]	; (d10 <adcSample+0x18>)
     d08:	8b58      	ldrh	r0, [r3, #26]
     d0a:	b280      	uxth	r0, r0
}
     d0c:	4770      	bx	lr
     d0e:	46c0      	nop			; (mov r8, r8)
     d10:	42004000 	.word	0x42004000

00000d14 <adc_read>:


u16_t adc_read(Pin p) {
     d14:	b537      	push	{r0, r1, r2, r4, r5, lr}
    u16_t buad;

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
     d16:	2501      	movs	r5, #1
     d18:	0c02      	lsrs	r2, r0, #16
     d1a:	b2d4      	uxtb	r4, r2
     d1c:	9000      	str	r0, [sp, #0]
     d1e:	0e00      	lsrs	r0, r0, #24
     d20:	9101      	str	r1, [sp, #4]
     d22:	0842      	lsrs	r2, r0, #1
     d24:	01e3      	lsls	r3, r4, #7
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     d26:	4911      	ldr	r1, [pc, #68]	; (d6c <adc_read+0x58>)
     d28:	18d2      	adds	r2, r2, r3
     d2a:	1852      	adds	r2, r2, r1
    u16_t buad;

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
     d2c:	4228      	tst	r0, r5
     d2e:	d005      	beq.n	d3c <adc_read+0x28>
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     d30:	210f      	movs	r1, #15
     d32:	7814      	ldrb	r4, [r2, #0]
     d34:	4021      	ands	r1, r4
     d36:	2410      	movs	r4, #16
     d38:	4321      	orrs	r1, r4
     d3a:	e003      	b.n	d44 <adc_read+0x30>
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     d3c:	240f      	movs	r4, #15
     d3e:	7811      	ldrb	r1, [r2, #0]
     d40:	43a1      	bics	r1, r4
     d42:	4329      	orrs	r1, r5
     d44:	7011      	strb	r1, [r2, #0]
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     d46:	2101      	movs	r1, #1
     d48:	4a09      	ldr	r2, [pc, #36]	; (d70 <adc_read+0x5c>)
     d4a:	18c3      	adds	r3, r0, r3
     d4c:	189b      	adds	r3, r3, r2
     d4e:	781a      	ldrb	r2, [r3, #0]
     d50:	430a      	orrs	r2, r1
     d52:	701a      	strb	r2, [r3, #0]
    // switch pin mux to analog in
    pinAnalog(p);

    ADC->INPUTCTRL.reg = (ADC_INPUTCTRL_MUXPOS(p.chan) // select from proper pin
                          | ADC_INPUTCTRL_MUXNEG_GND // 0 = gnd
                          | ADC_INPUTCTRL_GAIN_1X);
     d54:	466b      	mov	r3, sp
     d56:	791a      	ldrb	r2, [r3, #4]
     d58:	231f      	movs	r3, #31
     d5a:	4013      	ands	r3, r2
     d5c:	22c0      	movs	r2, #192	; 0xc0
     d5e:	0152      	lsls	r2, r2, #5
     d60:	4313      	orrs	r3, r2

u16_t adc_read(Pin p) {
    // switch pin mux to analog in
    pinAnalog(p);

    ADC->INPUTCTRL.reg = (ADC_INPUTCTRL_MUXPOS(p.chan) // select from proper pin
     d62:	4a04      	ldr	r2, [pc, #16]	; (d74 <adc_read+0x60>)
     d64:	6113      	str	r3, [r2, #16]
                          | ADC_INPUTCTRL_MUXNEG_GND // 0 = gnd
                          | ADC_INPUTCTRL_GAIN_1X);

    return adcSample();
     d66:	4b04      	ldr	r3, [pc, #16]	; (d78 <adc_read+0x64>)
     d68:	4798      	blx	r3
     d6a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
     d6c:	41004430 	.word	0x41004430
     d70:	41004440 	.word	0x41004440
     d74:	42004000 	.word	0x42004000
     d78:	00000cf9 	.word	0x00000cf9

00000d7c <beep>:
#include <util.h>
#include <boardDefines.h>


void beep(u16_t toggles) {
     d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
}


inline static void pinToggle(Pin p) {
    PORT->Group[p.group].OUTTGL.reg = (1<<p.pin);
     d7e:	2380      	movs	r3, #128	; 0x80
     d80:	2780      	movs	r7, #128	; 0x80
     d82:	0006      	movs	r6, r0

    pinToggle(LedPin);
    for (u16_t buzz = 0; buzz < toggles; ++buzz) {
     d84:	2500      	movs	r5, #0
     d86:	4c0a      	ldr	r4, [pc, #40]	; (db0 <beep+0x34>)
     d88:	035b      	lsls	r3, r3, #13
     d8a:	61e3      	str	r3, [r4, #28]
     d8c:	03bf      	lsls	r7, r7, #14
     d8e:	42b5      	cmp	r5, r6
     d90:	d006      	beq.n	da0 <beep+0x24>
     d92:	61e7      	str	r7, [r4, #28]
        pinToggle(buzzerPin);
        delay_us(122);
     d94:	207a      	movs	r0, #122	; 0x7a
     d96:	4b07      	ldr	r3, [pc, #28]	; (db4 <beep+0x38>)


void beep(u16_t toggles) {

    pinToggle(LedPin);
    for (u16_t buzz = 0; buzz < toggles; ++buzz) {
     d98:	3501      	adds	r5, #1
        pinToggle(buzzerPin);
        delay_us(122);
     d9a:	4798      	blx	r3


void beep(u16_t toggles) {

    pinToggle(LedPin);
    for (u16_t buzz = 0; buzz < toggles; ++buzz) {
     d9c:	b2ad      	uxth	r5, r5
     d9e:	e7f6      	b.n	d8e <beep+0x12>
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     da0:	2380      	movs	r3, #128	; 0x80
     da2:	039b      	lsls	r3, r3, #14
     da4:	6163      	str	r3, [r4, #20]
}


inline static void pinToggle(Pin p) {
    PORT->Group[p.group].OUTTGL.reg = (1<<p.pin);
     da6:	2380      	movs	r3, #128	; 0x80
     da8:	035b      	lsls	r3, r3, #13
     daa:	61e3      	str	r3, [r4, #28]
        pinToggle(buzzerPin);
        delay_us(122);
    }
    pinLow(buzzerPin);
    pinToggle(LedPin);
}
     dac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     dae:	46c0      	nop			; (mov r8, r8)
     db0:	41004400 	.word	0x41004400
     db4:	00000fdd 	.word	0x00000fdd

00000db8 <startupJingle>:

void startupJingle(){
     db8:	b570      	push	{r4, r5, r6, lr}
    beep(300);
     dba:	2696      	movs	r6, #150	; 0x96
     dbc:	0076      	lsls	r6, r6, #1
     dbe:	4d0a      	ldr	r5, [pc, #40]	; (de8 <startupJingle+0x30>)
     dc0:	0030      	movs	r0, r6
     dc2:	47a8      	blx	r5
    delay_ms(80);
     dc4:	4c09      	ldr	r4, [pc, #36]	; (dec <startupJingle+0x34>)
     dc6:	2050      	movs	r0, #80	; 0x50
     dc8:	47a0      	blx	r4
    beep(300);
     dca:	0030      	movs	r0, r6
     dcc:	47a8      	blx	r5
    delay_ms(250);
     dce:	20fa      	movs	r0, #250	; 0xfa
     dd0:	47a0      	blx	r4
    beep(300);
     dd2:	0030      	movs	r0, r6
     dd4:	47a8      	blx	r5
    delay_ms(80);
     dd6:	2050      	movs	r0, #80	; 0x50
     dd8:	47a0      	blx	r4
    beep(300);
     dda:	0030      	movs	r0, r6
     ddc:	47a8      	blx	r5
    delay_ms(500);
     dde:	20fa      	movs	r0, #250	; 0xfa
     de0:	0040      	lsls	r0, r0, #1
     de2:	47a0      	blx	r4
}
     de4:	bd70      	pop	{r4, r5, r6, pc}
     de6:	46c0      	nop			; (mov r8, r8)
     de8:	00000d7d 	.word	0x00000d7d
     dec:	0000100d 	.word	0x0000100d

00000df0 <unpluggedJingle>:

void unpluggedJingle(){
     df0:	b570      	push	{r4, r5, r6, lr}
            delay_ms(80);
            beep(300);
     df2:	2696      	movs	r6, #150	; 0x96
    beep(300);
    delay_ms(500);
}

void unpluggedJingle(){
            delay_ms(80);
     df4:	4c0c      	ldr	r4, [pc, #48]	; (e28 <unpluggedJingle+0x38>)
            beep(300);
     df6:	0076      	lsls	r6, r6, #1
    beep(300);
    delay_ms(500);
}

void unpluggedJingle(){
            delay_ms(80);
     df8:	2050      	movs	r0, #80	; 0x50
     dfa:	47a0      	blx	r4
            beep(300);
     dfc:	4d0b      	ldr	r5, [pc, #44]	; (e2c <unpluggedJingle+0x3c>)
     dfe:	0030      	movs	r0, r6
     e00:	47a8      	blx	r5
            delay_ms(80);
     e02:	2050      	movs	r0, #80	; 0x50
     e04:	47a0      	blx	r4
            beep(300);
     e06:	0030      	movs	r0, r6
     e08:	47a8      	blx	r5
            delay_ms(80);
     e0a:	2050      	movs	r0, #80	; 0x50
     e0c:	47a0      	blx	r4
            beep(300);
     e0e:	0030      	movs	r0, r6
     e10:	47a8      	blx	r5
            delay_ms(80);
     e12:	2050      	movs	r0, #80	; 0x50
     e14:	47a0      	blx	r4
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     e16:	2280      	movs	r2, #128	; 0x80
     e18:	4b05      	ldr	r3, [pc, #20]	; (e30 <unpluggedJingle+0x40>)
     e1a:	0392      	lsls	r2, r2, #14
     e1c:	615a      	str	r2, [r3, #20]
     e1e:	2280      	movs	r2, #128	; 0x80
     e20:	0352      	lsls	r2, r2, #13
     e22:	615a      	str	r2, [r3, #20]
            pinLow(buzzerPin);
            pinLow(LedPin);

}
     e24:	bd70      	pop	{r4, r5, r6, pc}
     e26:	46c0      	nop			; (mov r8, r8)
     e28:	0000100d 	.word	0x0000100d
     e2c:	00000d7d 	.word	0x00000d7d
     e30:	41004400 	.word	0x41004400

00000e34 <GclkInit>:
static uint32_t cycles_per_us = 48000000UL / 1000000;

void GclkInit() {


    SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     e34:	23c2      	movs	r3, #194	; 0xc2
                           SYSCTRL_INTFLAG_DFLLRDY;
    NVMCTRL->CTRLB.reg |= NVMCTRL_CTRLB_RWS_HALF;
     e36:	2002      	movs	r0, #2


static uint32_t cycles_per_ms = 48000000UL / 1000;
static uint32_t cycles_per_us = 48000000UL / 1000000;

void GclkInit() {
     e38:	b510      	push	{r4, lr}


    SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     e3a:	4916      	ldr	r1, [pc, #88]	; (e94 <GclkInit+0x60>)
                           SYSCTRL_INTFLAG_DFLLRDY;
    NVMCTRL->CTRLB.reg |= NVMCTRL_CTRLB_RWS_HALF;
     e3c:	4a16      	ldr	r2, [pc, #88]	; (e98 <GclkInit+0x64>)
static uint32_t cycles_per_us = 48000000UL / 1000000;

void GclkInit() {


    SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     e3e:	00db      	lsls	r3, r3, #3
     e40:	608b      	str	r3, [r1, #8]
                           SYSCTRL_INTFLAG_DFLLRDY;
    NVMCTRL->CTRLB.reg |= NVMCTRL_CTRLB_RWS_HALF;
     e42:	6853      	ldr	r3, [r2, #4]
     e44:	4303      	orrs	r3, r0
     e46:	6053      	str	r3, [r2, #4]

#define NVM_DFLL_COARSE_POS    58
#define NVM_DFLL_COARSE_SIZE   6
#define NVM_DFLL_FINE_POS      64
#define NVM_DFLL_FINE_SIZE     10
    uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
     e48:	4b14      	ldr	r3, [pc, #80]	; (e9c <GclkInit+0x68>)
     e4a:	681a      	ldr	r2, [r3, #0]
     e4c:	0e92      	lsrs	r2, r2, #26
                         + (NVM_DFLL_COARSE_POS / 32))
                       >> (NVM_DFLL_COARSE_POS % 32))
                     & ((1 << NVM_DFLL_COARSE_SIZE) - 1);
    if (coarse == 0x3f) {
     e4e:	2a3f      	cmp	r2, #63	; 0x3f
     e50:	d100      	bne.n	e54 <GclkInit+0x20>
        coarse = 0x1f;
     e52:	3a20      	subs	r2, #32
    }
    uint32_t fine =( *((uint32_t *)(NVMCTRL_OTP4)
                       + (NVM_DFLL_FINE_POS / 32))
                     >> (NVM_DFLL_FINE_POS % 32))
     e54:	4b12      	ldr	r3, [pc, #72]	; (ea0 <GclkInit+0x6c>)
                   & ((1 << NVM_DFLL_FINE_SIZE) - 1);
    if (fine == 0x3ff) {
     e56:	4813      	ldr	r0, [pc, #76]	; (ea4 <GclkInit+0x70>)
                       >> (NVM_DFLL_COARSE_POS % 32))
                     & ((1 << NVM_DFLL_COARSE_SIZE) - 1);
    if (coarse == 0x3f) {
        coarse = 0x1f;
    }
    uint32_t fine =( *((uint32_t *)(NVMCTRL_OTP4)
     e58:	681b      	ldr	r3, [r3, #0]
     e5a:	059b      	lsls	r3, r3, #22
     e5c:	0d9b      	lsrs	r3, r3, #22
                       + (NVM_DFLL_FINE_POS / 32))
                     >> (NVM_DFLL_FINE_POS % 32))
                   & ((1 << NVM_DFLL_FINE_SIZE) - 1);
    if (fine == 0x3ff) {
     e5e:	4283      	cmp	r3, r0
     e60:	d100      	bne.n	e64 <GclkInit+0x30>
        fine = 0x1ff;
     e62:	4b11      	ldr	r3, [pc, #68]	; (ea8 <GclkInit+0x74>)
    }


    // Disable ONDEMAND mode while writing configurations (errata 9905)
    SYSCTRL->DFLLCTRL.reg = dfll_ctrl_usb & ~SYSCTRL_DFLLCTRL_ONDEMAND;
     e64:	4811      	ldr	r0, [pc, #68]	; (eac <GclkInit+0x78>)
     e66:	8488      	strh	r0, [r1, #36]	; 0x24
    while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_DFLLRDY)) == 0);
     e68:	2010      	movs	r0, #16
     e6a:	68cc      	ldr	r4, [r1, #12]
     e6c:	4204      	tst	r4, r0
     e6e:	d0fc      	beq.n	e6a <GclkInit+0x36>
    SYSCTRL->DFLLVAL.reg = SYSCTRL_DFLLVAL_COARSE(coarse) | SYSCTRL_DFLLVAL_FINE(fine);
     e70:	0292      	lsls	r2, r2, #10
     e72:	4313      	orrs	r3, r2
     e74:	4a07      	ldr	r2, [pc, #28]	; (e94 <GclkInit+0x60>)
     e76:	6293      	str	r3, [r2, #40]	; 0x28


    //Wait and see if the DFLL output is good . . .
    while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_DFLLRDY)) == 0);
     e78:	2310      	movs	r3, #16
     e7a:	68ca      	ldr	r2, [r1, #12]
     e7c:	421a      	tst	r2, r3
     e7e:	d0fc      	beq.n	e7a <GclkInit+0x46>


    SYSCTRL->DFLLCTRL.reg = dfll_ctrl_usb;
     e80:	4a0b      	ldr	r2, [pc, #44]	; (eb0 <GclkInit+0x7c>)
     e82:	4b04      	ldr	r3, [pc, #16]	; (e94 <GclkInit+0x60>)
     e84:	849a      	strh	r2, [r3, #36]	; 0x24


    //For generic clock generator 0, select the DFLL48 Clock as input
    GCLK->GENDIV.reg  = (GCLK_GENDIV_DIV(1)  | GCLK_GENDIV_ID(0));
     e86:	2280      	movs	r2, #128	; 0x80
     e88:	4b0a      	ldr	r3, [pc, #40]	; (eb4 <GclkInit+0x80>)
     e8a:	0052      	lsls	r2, r2, #1
     e8c:	609a      	str	r2, [r3, #8]
    GCLK->GENCTRL.reg = (GCLK_GENCTRL_ID(0)  | (GCLK_GENCTRL_SRC_DFLL48M) | (GCLK_GENCTRL_GENEN));
     e8e:	4a0a      	ldr	r2, [pc, #40]	; (eb8 <GclkInit+0x84>)
     e90:	605a      	str	r2, [r3, #4]
}
     e92:	bd10      	pop	{r4, pc}
     e94:	40000800 	.word	0x40000800
     e98:	41004000 	.word	0x41004000
     e9c:	00806024 	.word	0x00806024
     ea0:	00806028 	.word	0x00806028
     ea4:	000003ff 	.word	0x000003ff
     ea8:	000001ff 	.word	0x000001ff
     eac:	00000522 	.word	0x00000522
     eb0:	000005a2 	.word	0x000005a2
     eb4:	40000c00 	.word	0x40000c00
     eb8:	00010700 	.word	0x00010700

00000ebc <RtcInit>:
        //wait for crystal to warm up
        while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_OSC32KRDY)) == 0);

    */

    SYSCTRL->OSC32K.reg = SYSCTRL_OSC32K_ENABLE |
     ebc:	4b27      	ldr	r3, [pc, #156]	; (f5c <RtcInit+0xa0>)
     ebe:	4a28      	ldr	r2, [pc, #160]	; (f60 <RtcInit+0xa4>)
                          SYSCTRL_OSC32K_EN32K |
                          ( 6 << SYSCTRL_OSC32K_STARTUP_Pos);


    SYSCTRL->OSC32K.bit.CALIB =
     ec0:	4828      	ldr	r0, [pc, #160]	; (f64 <RtcInit+0xa8>)
        //wait for crystal to warm up
        while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_OSC32KRDY)) == 0);

    */

    SYSCTRL->OSC32K.reg = SYSCTRL_OSC32K_ENABLE |
     ec2:	619a      	str	r2, [r3, #24]
                          SYSCTRL_OSC32K_EN32K |
                          ( 6 << SYSCTRL_OSC32K_STARTUP_Pos);


    SYSCTRL->OSC32K.bit.CALIB =
        ((*(uint32_t *)FUSES_OSC32K_CAL_ADDR >>
     ec4:	4a28      	ldr	r2, [pc, #160]	; (f68 <RtcInit+0xac>)
    SYSCTRL->OSC32K.reg = SYSCTRL_OSC32K_ENABLE |
                          SYSCTRL_OSC32K_EN32K |
                          ( 6 << SYSCTRL_OSC32K_STARTUP_Pos);


    SYSCTRL->OSC32K.bit.CALIB =
     ec6:	6999      	ldr	r1, [r3, #24]
     ec8:	6812      	ldr	r2, [r2, #0]
     eca:	4001      	ands	r1, r0
     ecc:	04d2      	lsls	r2, r2, #19
     ece:	0e52      	lsrs	r2, r2, #25
     ed0:	0412      	lsls	r2, r2, #16
     ed2:	4311      	orrs	r1, r2
     ed4:	6199      	str	r1, [r3, #24]
        ((*(uint32_t *)FUSES_OSC32K_CAL_ADDR >>
          FUSES_OSC32K_CAL_Pos) & 0x7Ful);

    SYSCTRL->OSC32K.reg = SYSCTRL_OSC32K_STARTUP( 0x6u ) | // cf table 15.10 of product datasheet in chapter 15.8.6
     ed6:	4925      	ldr	r1, [pc, #148]	; (f6c <RtcInit+0xb0>)
     ed8:	6199      	str	r1, [r3, #24]
                          SYSCTRL_OSC32K_EN32K;
    SYSCTRL->OSC32K.bit.CALIB =
     eda:	6999      	ldr	r1, [r3, #24]
     edc:	4008      	ands	r0, r1
        ((*(uint32_t *)FUSES_OSC32K_CAL_ADDR >>
          FUSES_OSC32K_CAL_Pos) & 0x7Ful);



    SYSCTRL->OSC32K.bit.ENABLE = 1; // separate call, as described in chapter 15.6.3
     ede:	2102      	movs	r1, #2
        ((*(uint32_t *)FUSES_OSC32K_CAL_ADDR >>
          FUSES_OSC32K_CAL_Pos) & 0x7Ful);

    SYSCTRL->OSC32K.reg = SYSCTRL_OSC32K_STARTUP( 0x6u ) | // cf table 15.10 of product datasheet in chapter 15.8.6
                          SYSCTRL_OSC32K_EN32K;
    SYSCTRL->OSC32K.bit.CALIB =
     ee0:	4302      	orrs	r2, r0
     ee2:	619a      	str	r2, [r3, #24]
        ((*(uint32_t *)FUSES_OSC32K_CAL_ADDR >>
          FUSES_OSC32K_CAL_Pos) & 0x7Ful);



    SYSCTRL->OSC32K.bit.ENABLE = 1; // separate call, as described in chapter 15.6.3
     ee4:	699a      	ldr	r2, [r3, #24]
     ee6:	430a      	orrs	r2, r1
     ee8:	619a      	str	r2, [r3, #24]

    while (  (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_OSC32KRDY) == 0 ) {
     eea:	2204      	movs	r2, #4
     eec:	68d9      	ldr	r1, [r3, #12]
     eee:	4211      	tst	r1, r2
     ef0:	d0fc      	beq.n	eec <RtcInit+0x30>





    GCLK->GENDIV.reg = GCLK_GENDIV_ID(2) | GCLK_GENDIV_DIV(1);
     ef2:	2281      	movs	r2, #129	; 0x81
     ef4:	4b1e      	ldr	r3, [pc, #120]	; (f70 <RtcInit+0xb4>)
     ef6:	0052      	lsls	r2, r2, #1
     ef8:	609a      	str	r2, [r3, #8]

    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(2) |
     efa:	4a1e      	ldr	r2, [pc, #120]	; (f74 <RtcInit+0xb8>)
     efc:	605a      	str	r2, [r3, #4]
                        GCLK_GENCTRL_SRC(GCLK_GENCTRL_SRC_OSC32K) |
                        GCLK_GENCTRL_IDC |
                        GCLK_GENCTRL_RUNSTDBY |
                        GCLK_GENCTRL_GENEN;
    while (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY);
     efe:	785a      	ldrb	r2, [r3, #1]
     f00:	b252      	sxtb	r2, r2
     f02:	2a00      	cmp	r2, #0
     f04:	dbfb      	blt.n	efe <RtcInit+0x42>

// Configure RTC
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(RTC_GCLK_ID) |
     f06:	4a1c      	ldr	r2, [pc, #112]	; (f78 <RtcInit+0xbc>)
     f08:	4b19      	ldr	r3, [pc, #100]	; (f70 <RtcInit+0xb4>)
     f0a:	805a      	strh	r2, [r3, #2]
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    RTC->MODE1.CTRL.reg = RTC_MODE1_CTRL_MODE_COUNT16;
     f0c:	2204      	movs	r2, #4
     f0e:	4b1b      	ldr	r3, [pc, #108]	; (f7c <RtcInit+0xc0>)
     f10:	801a      	strh	r2, [r3, #0]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     f12:	7a9a      	ldrb	r2, [r3, #10]
     f14:	4919      	ldr	r1, [pc, #100]	; (f7c <RtcInit+0xc0>)
     f16:	09d2      	lsrs	r2, r2, #7
     f18:	d1fb      	bne.n	f12 <RtcInit+0x56>

// Prescaler needs to be enabled separately from the mode for some reason
    RTC->MODE1.CTRL.reg |= RTC_MODE1_CTRL_PRESCALER_DIV32;
     f1a:	20a0      	movs	r0, #160	; 0xa0
     f1c:	880a      	ldrh	r2, [r1, #0]
     f1e:	00c0      	lsls	r0, r0, #3
     f20:	4302      	orrs	r2, r0
     f22:	800a      	strh	r2, [r1, #0]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     f24:	7a9a      	ldrb	r2, [r3, #10]
     f26:	09d2      	lsrs	r2, r2, #7
     f28:	d1fc      	bne.n	f24 <RtcInit+0x68>

    RTC->MODE1.PER.reg = 998;
     f2a:	4915      	ldr	r1, [pc, #84]	; (f80 <RtcInit+0xc4>)
     f2c:	4a13      	ldr	r2, [pc, #76]	; (f7c <RtcInit+0xc0>)
     f2e:	8291      	strh	r1, [r2, #20]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     f30:	7a99      	ldrb	r1, [r3, #10]
     f32:	4a12      	ldr	r2, [pc, #72]	; (f7c <RtcInit+0xc0>)
     f34:	09c9      	lsrs	r1, r1, #7
     f36:	d1fb      	bne.n	f30 <RtcInit+0x74>

    RTC->MODE1.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_ADDR(0x10);
     f38:	8851      	ldrh	r1, [r2, #2]
     f3a:	4812      	ldr	r0, [pc, #72]	; (f84 <RtcInit+0xc8>)
     f3c:	4301      	orrs	r1, r0
     f3e:	8051      	strh	r1, [r2, #2]

    RTC->MODE1.INTENSET.reg = RTC_MODE1_INTENSET_OVF;
     f40:	2180      	movs	r1, #128	; 0x80

    RTC->MODE1.CTRL.bit.ENABLE = 1;
     f42:	2002      	movs	r0, #2
    RTC->MODE1.PER.reg = 998;
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);

    RTC->MODE1.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_ADDR(0x10);

    RTC->MODE1.INTENSET.reg = RTC_MODE1_INTENSET_OVF;
     f44:	71d1      	strb	r1, [r2, #7]

    RTC->MODE1.CTRL.bit.ENABLE = 1;
     f46:	8811      	ldrh	r1, [r2, #0]
     f48:	4301      	orrs	r1, r0
     f4a:	8011      	strh	r1, [r2, #0]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     f4c:	7a9a      	ldrb	r2, [r3, #10]
     f4e:	09d2      	lsrs	r2, r2, #7
     f50:	d1fc      	bne.n	f4c <RtcInit+0x90>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     f52:	4b0d      	ldr	r3, [pc, #52]	; (f88 <RtcInit+0xcc>)
     f54:	3208      	adds	r2, #8
     f56:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(RTC_IRQn);
}
     f58:	4770      	bx	lr
     f5a:	46c0      	nop			; (mov r8, r8)
     f5c:	40000800 	.word	0x40000800
     f60:	00000606 	.word	0x00000606
     f64:	ff80ffff 	.word	0xff80ffff
     f68:	00806024 	.word	0x00806024
     f6c:	00000604 	.word	0x00000604
     f70:	40000c00 	.word	0x40000c00
     f74:	00230002 	.word	0x00230002
     f78:	00004204 	.word	0x00004204
     f7c:	40001400 	.word	0x40001400
     f80:	000003e6 	.word	0x000003e6
     f84:	00004010 	.word	0x00004010
     f88:	e000e100 	.word	0xe000e100

00000f8c <gclkEnable>:


void gclkEnable(u32_t id, u32_t src, u32_t div) {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
     f8c:	230f      	movs	r3, #15
     f8e:	4018      	ands	r0, r3
     f90:	4b08      	ldr	r3, [pc, #32]	; (fb4 <gclkEnable+0x28>)
     f92:	0212      	lsls	r2, r2, #8
     f94:	401a      	ands	r2, r3
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     f96:	23f8      	movs	r3, #248	; 0xf8
     f98:	0209      	lsls	r1, r1, #8
     f9a:	015b      	lsls	r3, r3, #5
     f9c:	4019      	ands	r1, r3
     f9e:	2380      	movs	r3, #128	; 0x80

    NVIC_EnableIRQ(RTC_IRQn);
}


void gclkEnable(u32_t id, u32_t src, u32_t div) {
     fa0:	b510      	push	{r4, lr}
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     fa2:	025b      	lsls	r3, r3, #9
    NVIC_EnableIRQ(RTC_IRQn);
}


void gclkEnable(u32_t id, u32_t src, u32_t div) {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
     fa4:	4c04      	ldr	r4, [pc, #16]	; (fb8 <gclkEnable+0x2c>)
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     fa6:	4319      	orrs	r1, r3
    NVIC_EnableIRQ(RTC_IRQn);
}


void gclkEnable(u32_t id, u32_t src, u32_t div) {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
     fa8:	4302      	orrs	r2, r0
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     faa:	4308      	orrs	r0, r1
    NVIC_EnableIRQ(RTC_IRQn);
}


void gclkEnable(u32_t id, u32_t src, u32_t div) {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
     fac:	60a2      	str	r2, [r4, #8]
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     fae:	6060      	str	r0, [r4, #4]
}
     fb0:	bd10      	pop	{r4, pc}
     fb2:	46c0      	nop			; (mov r8, r8)
     fb4:	00ffff00 	.word	0x00ffff00
     fb8:	40000c00 	.word	0x40000c00

00000fbc <delayInit>:


void delayInit(void) {
    cycles_per_ms = 48000000UL;
    cycles_per_ms /= 1000;
     fbc:	4b04      	ldr	r3, [pc, #16]	; (fd0 <delayInit+0x14>)
     fbe:	4a05      	ldr	r2, [pc, #20]	; (fd4 <delayInit+0x18>)
     fc0:	601a      	str	r2, [r3, #0]
    cycles_per_us = cycles_per_ms / 1000;
     fc2:	2230      	movs	r2, #48	; 0x30
     fc4:	605a      	str	r2, [r3, #4]

    SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     fc6:	4b04      	ldr	r3, [pc, #16]	; (fd8 <delayInit+0x1c>)
     fc8:	3a2b      	subs	r2, #43	; 0x2b
     fca:	601a      	str	r2, [r3, #0]
}
     fcc:	4770      	bx	lr
     fce:	46c0      	nop			; (mov r8, r8)
     fd0:	20000004 	.word	0x20000004
     fd4:	0000bb80 	.word	0x0000bb80
     fd8:	e000e010 	.word	0xe000e010

00000fdc <delay_us>:
/**
 * \brief Delay loop to delay at least n number of microseconds
 *
 * \param n  Number of microseconds to wait
 */
void delay_us(uint32_t n) {
     fdc:	b570      	push	{r4, r5, r6, lr}
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
        SysTick->VAL = 0;

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     fde:	2480      	movs	r4, #128	; 0x80

static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
        SysTick->VAL = 0;
     fe0:	2100      	movs	r1, #0
    while (n--) {
        /* Devide up to blocks of 10u */
        delay_cycles(cycles_per_us);
     fe2:	4b08      	ldr	r3, [pc, #32]	; (1004 <delay_us+0x28>)


static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
     fe4:	4a08      	ldr	r2, [pc, #32]	; (1008 <delay_us+0x2c>)
     fe6:	685b      	ldr	r3, [r3, #4]
        SysTick->VAL = 0;

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     fe8:	0264      	lsls	r4, r4, #9
 * \brief Delay loop to delay at least n number of microseconds
 *
 * \param n  Number of microseconds to wait
 */
void delay_us(uint32_t n) {
    while (n--) {
     fea:	3801      	subs	r0, #1
     fec:	d308      	bcc.n	1000 <delay_us+0x24>



static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
     fee:	2b00      	cmp	r3, #0
     ff0:	d0fb      	beq.n	fea <delay_us+0xe>
     ff2:	4e05      	ldr	r6, [pc, #20]	; (1008 <delay_us+0x2c>)
        SysTick->LOAD = n;
     ff4:	6053      	str	r3, [r2, #4]
        SysTick->VAL = 0;
     ff6:	6091      	str	r1, [r2, #8]

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     ff8:	6835      	ldr	r5, [r6, #0]
     ffa:	4225      	tst	r5, r4
     ffc:	d0fc      	beq.n	ff8 <delay_us+0x1c>
     ffe:	e7f4      	b.n	fea <delay_us+0xe>
        /* Devide up to blocks of 10u */
        delay_cycles(cycles_per_us);
    }
}
    1000:	bd70      	pop	{r4, r5, r6, pc}
    1002:	46c0      	nop			; (mov r8, r8)
    1004:	20000004 	.word	0x20000004
    1008:	e000e010 	.word	0xe000e010

0000100c <delay_ms>:
/**
 * \brief Delay loop to delay at least n number of milliseconds
 *
 * \param n  Number of milliseconds to wait
 */
void delay_ms(uint32_t n) {
    100c:	b570      	push	{r4, r5, r6, lr}
    100e:	2480      	movs	r4, #128	; 0x80

static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
        SysTick->VAL = 0;
    1010:	2100      	movs	r1, #0
    while (n--) {
        /* Devide up to blocks of 1ms */
        delay_cycles(cycles_per_ms);
    1012:	4b08      	ldr	r3, [pc, #32]	; (1034 <delay_ms+0x28>)


static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
    1014:	4a08      	ldr	r2, [pc, #32]	; (1038 <delay_ms+0x2c>)
    1016:	681b      	ldr	r3, [r3, #0]
        SysTick->VAL = 0;

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    1018:	0264      	lsls	r4, r4, #9
 * \brief Delay loop to delay at least n number of milliseconds
 *
 * \param n  Number of milliseconds to wait
 */
void delay_ms(uint32_t n) {
    while (n--) {
    101a:	3801      	subs	r0, #1
    101c:	d308      	bcc.n	1030 <delay_ms+0x24>



static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
    101e:	2b00      	cmp	r3, #0
    1020:	d0fb      	beq.n	101a <delay_ms+0xe>
    1022:	4e05      	ldr	r6, [pc, #20]	; (1038 <delay_ms+0x2c>)
        SysTick->LOAD = n;
    1024:	6053      	str	r3, [r2, #4]
        SysTick->VAL = 0;
    1026:	6091      	str	r1, [r2, #8]

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    1028:	6835      	ldr	r5, [r6, #0]
    102a:	4225      	tst	r5, r4
    102c:	d0fc      	beq.n	1028 <delay_ms+0x1c>
    102e:	e7f4      	b.n	101a <delay_ms+0xe>
        /* Devide up to blocks of 1ms */
        delay_cycles(cycles_per_ms);
    }
}
    1030:	bd70      	pop	{r4, r5, r6, pc}
    1032:	46c0      	nop			; (mov r8, r8)
    1034:	20000004 	.word	0x20000004
    1038:	e000e010 	.word	0xe000e010

0000103c <RTC_Handler>:


volatile uint32_t time_ms = 0;

void RTC_Handler(void) {
    time_ms += 1000;
    103c:	21fa      	movs	r1, #250	; 0xfa
    103e:	4a04      	ldr	r2, [pc, #16]	; (1050 <RTC_Handler+0x14>)
    1040:	0089      	lsls	r1, r1, #2
    1042:	6813      	ldr	r3, [r2, #0]
    1044:	185b      	adds	r3, r3, r1
    1046:	6013      	str	r3, [r2, #0]
    RTC->MODE1.INTFLAG.reg = 0xFF;
    1048:	22ff      	movs	r2, #255	; 0xff
    104a:	4b02      	ldr	r3, [pc, #8]	; (1054 <RTC_Handler+0x18>)
    104c:	721a      	strb	r2, [r3, #8]
}
    104e:	4770      	bx	lr
    1050:	200004c4 	.word	0x200004c4
    1054:	40001400 	.word	0x40001400

00001058 <millis>:

uint32_t millis(void) {
    1058:	b530      	push	{r4, r5, lr}
    uint32_t ms;
    ATOMIC_SECTION_ENTER
    105a:	f3ef 8110 	mrs	r1, PRIMASK
    105e:	b672      	cpsid	i
    ms = time_ms + RTC->MODE1.COUNT.reg;
    1060:	4a08      	ldr	r2, [pc, #32]	; (1084 <millis+0x2c>)
    1062:	4d09      	ldr	r5, [pc, #36]	; (1088 <millis+0x30>)
    1064:	8a10      	ldrh	r0, [r2, #16]
    1066:	682b      	ldr	r3, [r5, #0]
    if (RTC->MODE1.INTFLAG.bit.OVF)
    1068:	7a14      	ldrb	r4, [r2, #8]
}

uint32_t millis(void) {
    uint32_t ms;
    ATOMIC_SECTION_ENTER
    ms = time_ms + RTC->MODE1.COUNT.reg;
    106a:	b280      	uxth	r0, r0
    if (RTC->MODE1.INTFLAG.bit.OVF)
    106c:	09e4      	lsrs	r4, r4, #7
    106e:	d004      	beq.n	107a <millis+0x22>
        ms = time_ms + RTC->MODE1.COUNT.reg + 1000;
    1070:	8a13      	ldrh	r3, [r2, #16]
    1072:	22fa      	movs	r2, #250	; 0xfa
    1074:	6828      	ldr	r0, [r5, #0]
    1076:	0092      	lsls	r2, r2, #2
    1078:	1880      	adds	r0, r0, r2
    107a:	18c0      	adds	r0, r0, r3
    ATOMIC_SECTION_LEAVE
    107c:	f381 8810 	msr	PRIMASK, r1
    return ms;
}
    1080:	bd30      	pop	{r4, r5, pc}
    1082:	46c0      	nop			; (mov r8, r8)
    1084:	40001400 	.word	0x40001400
    1088:	200004c4 	.word	0x200004c4

0000108c <TC4Init>:

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC4_GCLK_ID) |
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC4;
    108c:	2180      	movs	r1, #128	; 0x80
    return ms;
}

void TC4Init() {

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC4_GCLK_ID) |
    108e:	4a0d      	ldr	r2, [pc, #52]	; (10c4 <TC4Init+0x38>)
    1090:	4b0d      	ldr	r3, [pc, #52]	; (10c8 <TC4Init+0x3c>)
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC4;
    1092:	0149      	lsls	r1, r1, #5
    return ms;
}

void TC4Init() {

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC4_GCLK_ID) |
    1094:	805a      	strh	r2, [r3, #2]
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC4;
    1096:	4a0d      	ldr	r2, [pc, #52]	; (10cc <TC4Init+0x40>)
    1098:	6a13      	ldr	r3, [r2, #32]
    109a:	430b      	orrs	r3, r1
    109c:	6213      	str	r3, [r2, #32]

    TC4->COUNT8.CTRLA.reg = TC_CTRLA_MODE_COUNT8 |
    109e:	4b0c      	ldr	r3, [pc, #48]	; (10d0 <TC4Init+0x44>)
    10a0:	4a0c      	ldr	r2, [pc, #48]	; (10d4 <TC4Init+0x48>)

    TC4->COUNT8.INTENSET.reg = TC_INTENSET_OVF;

    TC4->COUNT8.EVCTRL.reg = TC_EVCTRL_OVFEO;

    TC4->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
    10a2:	2102      	movs	r1, #2
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC4;

    TC4->COUNT8.CTRLA.reg = TC_CTRLA_MODE_COUNT8 |
    10a4:	801a      	strh	r2, [r3, #0]
                            TC_CTRLA_RUNSTDBY |
                            TC_CTRLA_PRESCALER_DIV2;
    TC4->COUNT8.PER.reg = 0x50;
    10a6:	2250      	movs	r2, #80	; 0x50
    10a8:	751a      	strb	r2, [r3, #20]

    TC4->COUNT8.INTENSET.reg = TC_INTENSET_OVF;
    10aa:	3a4f      	subs	r2, #79	; 0x4f
    10ac:	735a      	strb	r2, [r3, #13]

    TC4->COUNT8.EVCTRL.reg = TC_EVCTRL_OVFEO;
    10ae:	32ff      	adds	r2, #255	; 0xff
    10b0:	815a      	strh	r2, [r3, #10]

    TC4->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
    10b2:	881a      	ldrh	r2, [r3, #0]
    10b4:	430a      	orrs	r2, r1
    10b6:	801a      	strh	r2, [r3, #0]
    10b8:	2280      	movs	r2, #128	; 0x80
    10ba:	4b07      	ldr	r3, [pc, #28]	; (10d8 <TC4Init+0x4c>)
    10bc:	0312      	lsls	r2, r2, #12
    10be:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(TC4_IRQn);
}
    10c0:	4770      	bx	lr
    10c2:	46c0      	nop			; (mov r8, r8)
    10c4:	0000421c 	.word	0x0000421c
    10c8:	40000c00 	.word	0x40000c00
    10cc:	40000400 	.word	0x40000400
    10d0:	42003000 	.word	0x42003000
    10d4:	00000904 	.word	0x00000904
    10d8:	e000e100 	.word	0xe000e100

000010dc <TC4_Handler>:

void TC4_Handler( void ) {
    TC4->COUNT8.INTFLAG.reg = 0xFF;
    10dc:	22ff      	movs	r2, #255	; 0xff
    TC4->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;

    NVIC_EnableIRQ(TC4_IRQn);
}

void TC4_Handler( void ) {
    10de:	b510      	push	{r4, lr}
    TC4->COUNT8.INTFLAG.reg = 0xFF;
    10e0:	4b02      	ldr	r3, [pc, #8]	; (10ec <TC4_Handler+0x10>)
    10e2:	739a      	strb	r2, [r3, #14]
    //pinToggle(TxPo);
    pullSample();
    10e4:	4b02      	ldr	r3, [pc, #8]	; (10f0 <TC4_Handler+0x14>)
    10e6:	4798      	blx	r3
}
    10e8:	bd10      	pop	{r4, pc}
    10ea:	46c0      	nop			; (mov r8, r8)
    10ec:	42003000 	.word	0x42003000
    10f0:	000022e9 	.word	0x000022e9

000010f4 <TC5Init>:

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC5_GCLK_ID) |
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC5;
    10f4:	2180      	movs	r1, #128	; 0x80
    pullSample();
}

void TC5Init() {

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC5_GCLK_ID) |
    10f6:	4a0d      	ldr	r2, [pc, #52]	; (112c <TC5Init+0x38>)
    10f8:	4b0d      	ldr	r3, [pc, #52]	; (1130 <TC5Init+0x3c>)
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC5;
    10fa:	0189      	lsls	r1, r1, #6
    pullSample();
}

void TC5Init() {

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC5_GCLK_ID) |
    10fc:	805a      	strh	r2, [r3, #2]
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC5;
    10fe:	4a0d      	ldr	r2, [pc, #52]	; (1134 <TC5Init+0x40>)
    1100:	6a13      	ldr	r3, [r2, #32]
    1102:	430b      	orrs	r3, r1
    1104:	6213      	str	r3, [r2, #32]

    TC5->COUNT8.CTRLA.reg = TC_CTRLA_MODE_COUNT8 |
    1106:	4b0c      	ldr	r3, [pc, #48]	; (1138 <TC5Init+0x44>)
    1108:	4a0c      	ldr	r2, [pc, #48]	; (113c <TC5Init+0x48>)

    TC5->COUNT8.INTENSET.reg = TC_INTENSET_OVF;

    TC5->COUNT8.EVCTRL.reg = TC_EVCTRL_OVFEO;

    TC5->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
    110a:	2102      	movs	r1, #2
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC5;

    TC5->COUNT8.CTRLA.reg = TC_CTRLA_MODE_COUNT8 |
    110c:	801a      	strh	r2, [r3, #0]
                            TC_CTRLA_PRESCALER_DIV16;

    u16_t logSpeed = 20; //Hz
    u8_t PER_Reg = (long)((32768/16) / logSpeed);

    TC5->COUNT8.PER.reg = PER_Reg;
    110e:	2266      	movs	r2, #102	; 0x66
    1110:	751a      	strb	r2, [r3, #20]

    TC5->COUNT8.INTENSET.reg = TC_INTENSET_OVF;
    1112:	3a65      	subs	r2, #101	; 0x65
    1114:	735a      	strb	r2, [r3, #13]

    TC5->COUNT8.EVCTRL.reg = TC_EVCTRL_OVFEO;
    1116:	32ff      	adds	r2, #255	; 0xff
    1118:	815a      	strh	r2, [r3, #10]

    TC5->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
    111a:	881a      	ldrh	r2, [r3, #0]
    111c:	430a      	orrs	r2, r1
    111e:	801a      	strh	r2, [r3, #0]
    1120:	2280      	movs	r2, #128	; 0x80
    1122:	4b07      	ldr	r3, [pc, #28]	; (1140 <TC5Init+0x4c>)
    1124:	0352      	lsls	r2, r2, #13
    1126:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(TC5_IRQn);
}
    1128:	4770      	bx	lr
    112a:	46c0      	nop			; (mov r8, r8)
    112c:	0000421c 	.word	0x0000421c
    1130:	40000c00 	.word	0x40000c00
    1134:	40000400 	.word	0x40000400
    1138:	42003400 	.word	0x42003400
    113c:	00000c04 	.word	0x00000c04
    1140:	e000e100 	.word	0xe000e100

00001144 <TC5_Handler>:

void TC5_Handler( void ) {
    TC5->COUNT8.INTFLAG.reg = 0xFF;
    1144:	22ff      	movs	r2, #255	; 0xff
    1146:	4b03      	ldr	r3, [pc, #12]	; (1154 <TC5_Handler+0x10>)
    1148:	739a      	strb	r2, [r3, #14]
    

    writeLog = true;
    114a:	4b03      	ldr	r3, [pc, #12]	; (1158 <TC5_Handler+0x14>)
    114c:	3afe      	subs	r2, #254	; 0xfe
    114e:	701a      	strb	r2, [r3, #0]
}
    1150:	4770      	bx	lr
    1152:	46c0      	nop			; (mov r8, r8)
    1154:	42003400 	.word	0x42003400
    1158:	20000520 	.word	0x20000520

0000115c <flight>:
#include <boardDefines.h>

flightState_t flightState;


void flight() {
    115c:	b570      	push	{r4, r5, r6, lr}


    switch(flightState) {
    115e:	4c4c      	ldr	r4, [pc, #304]	; (1290 <flight+0x134>)
    1160:	7820      	ldrb	r0, [r4, #0]
    1162:	280a      	cmp	r0, #10
    1164:	d900      	bls.n	1168 <flight+0xc>
    1166:	e082      	b.n	126e <flight+0x112>
    1168:	f002 fc72 	bl	3a50 <__gnu_thumb1_case_uqi>
    116c:	53342306 	.word	0x53342306
    1170:	81818181 	.word	0x81818181
    1174:	8181      	.short	0x8181
    1176:	6d          	.byte	0x6d
    1177:	00          	.byte	0x00
    case flightStatrup:


        updateGround( );
    1178:	4b46      	ldr	r3, [pc, #280]	; (1294 <flight+0x138>)
    117a:	4798      	blx	r3

        //logSensors( );


        if ((millis() - startupTick) > 10000) {
    117c:	4b46      	ldr	r3, [pc, #280]	; (1298 <flight+0x13c>)
    117e:	4798      	blx	r3
    1180:	4b46      	ldr	r3, [pc, #280]	; (129c <flight+0x140>)
    1182:	681b      	ldr	r3, [r3, #0]
    1184:	1ac0      	subs	r0, r0, r3
    1186:	4b46      	ldr	r3, [pc, #280]	; (12a0 <flight+0x144>)
    1188:	4298      	cmp	r0, r3
    118a:	d908      	bls.n	119e <flight+0x42>
            findNewFlightStart( );
    118c:	4b45      	ldr	r3, [pc, #276]	; (12a4 <flight+0x148>)
    118e:	4798      	blx	r3
            logFlight( );
    1190:	4b45      	ldr	r3, [pc, #276]	; (12a8 <flight+0x14c>)
    1192:	4798      	blx	r3
            startupJingle();
    1194:	4b45      	ldr	r3, [pc, #276]	; (12ac <flight+0x150>)
    1196:	4798      	blx	r3
            flightState = flightTest;
    1198:	230a      	movs	r3, #10
    119a:	7023      	strb	r3, [r4, #0]
            //flightState = flightPad;
            break;
    119c:	e067      	b.n	126e <flight+0x112>
        }

        attemptConnection();
    119e:	4b44      	ldr	r3, [pc, #272]	; (12b0 <flight+0x154>)
    11a0:	4798      	blx	r3

        if (unplugged()) {
    11a2:	4b44      	ldr	r3, [pc, #272]	; (12b4 <flight+0x158>)
    11a4:	4798      	blx	r3
    11a6:	2800      	cmp	r0, #0
    11a8:	d061      	beq.n	126e <flight+0x112>
            flightState = flightIdle;
    11aa:	2301      	movs	r3, #1
    11ac:	7023      	strb	r3, [r4, #0]
            unpluggedJingle();
    11ae:	4b42      	ldr	r3, [pc, #264]	; (12b8 <flight+0x15c>)
    11b0:	e05c      	b.n	126c <flight+0x110>
        //TC5->COUNT8.CTRLA.reg = 0;

        //delay_ms(1000);
        //pinToggle(LedPin);

        if (sercom(USART3)->SPI.INTFLAG.bit.RXC == 1) {
    11b2:	4b42      	ldr	r3, [pc, #264]	; (12bc <flight+0x160>)
    11b4:	7e1b      	ldrb	r3, [r3, #24]
    11b6:	075b      	lsls	r3, r3, #29
    11b8:	d567      	bpl.n	128a <flight+0x12e>
            u8_t possibleReset = usartDataIn(USART3);
    11ba:	2003      	movs	r0, #3
    11bc:	4b40      	ldr	r3, [pc, #256]	; (12c0 <flight+0x164>)
    11be:	4798      	blx	r3
            if (possibleReset == 0x52) {
    11c0:	2852      	cmp	r0, #82	; 0x52
    11c2:	d154      	bne.n	126e <flight+0x112>
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
    11c4:	f3bf 8f4f 	dsb	sy
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
    11c8:	4a3e      	ldr	r2, [pc, #248]	; (12c4 <flight+0x168>)
    11ca:	4b3f      	ldr	r3, [pc, #252]	; (12c8 <flight+0x16c>)
    11cc:	60da      	str	r2, [r3, #12]
    11ce:	f3bf 8f4f 	dsb	sy
    11d2:	e7fe      	b.n	11d2 <flight+0x76>
        *  Accel > 2g & vel > 5m/s
        *		 or
        *  baro alt > 40ft
        */

        updateGround();
    11d4:	4b2f      	ldr	r3, [pc, #188]	; (1294 <flight+0x138>)
    11d6:	4798      	blx	r3

        if (writeLog) {
    11d8:	4b3c      	ldr	r3, [pc, #240]	; (12cc <flight+0x170>)
    11da:	781a      	ldrb	r2, [r3, #0]
    11dc:	2a00      	cmp	r2, #0
    11de:	d005      	beq.n	11ec <flight+0x90>
            writeLog = false;
    11e0:	2200      	movs	r2, #0
    11e2:	701a      	strb	r2, [r3, #0]
}


inline static void pinToggle(Pin p) {
    PORT->Group[p.group].OUTTGL.reg = (1<<p.pin);
    11e4:	2280      	movs	r2, #128	; 0x80
    11e6:	4b3a      	ldr	r3, [pc, #232]	; (12d0 <flight+0x174>)
    11e8:	0352      	lsls	r2, r2, #13
    11ea:	61da      	str	r2, [r3, #28]
            //logSensors( );
            pinToggle(LedPin);
        }

        if (( velocity > 0.05) && (altitudeAGL() > 5)) {
    11ec:	4939      	ldr	r1, [pc, #228]	; (12d4 <flight+0x178>)
    11ee:	4a3a      	ldr	r2, [pc, #232]	; (12d8 <flight+0x17c>)
    11f0:	4b3a      	ldr	r3, [pc, #232]	; (12dc <flight+0x180>)
    11f2:	6808      	ldr	r0, [r1, #0]
    11f4:	6849      	ldr	r1, [r1, #4]
    11f6:	4d3a      	ldr	r5, [pc, #232]	; (12e0 <flight+0x184>)
    11f8:	47a8      	blx	r5
    11fa:	2800      	cmp	r0, #0
    11fc:	d037      	beq.n	126e <flight+0x112>
    11fe:	4b39      	ldr	r3, [pc, #228]	; (12e4 <flight+0x188>)
    1200:	4798      	blx	r3
    1202:	2805      	cmp	r0, #5
    1204:	dd33      	ble.n	126e <flight+0x112>
            flightState = flightBoost;
    1206:	2303      	movs	r3, #3
            logEvent('L');
    1208:	204c      	movs	r0, #76	; 0x4c
            //logSensors( );
            pinToggle(LedPin);
        }

        if (( velocity > 0.05) && (altitudeAGL() > 5)) {
            flightState = flightBoost;
    120a:	7023      	strb	r3, [r4, #0]
            logEvent('L');
    120c:	4b36      	ldr	r3, [pc, #216]	; (12e8 <flight+0x18c>)
    120e:	4798      	blx	r3
    1210:	e02d      	b.n	126e <flight+0x112>
        /*
        *	boost to fast
        *		while
        *	Accel > 1/4G
        */
        if (writeLog) {
    1212:	4b2e      	ldr	r3, [pc, #184]	; (12cc <flight+0x170>)
    1214:	781a      	ldrb	r2, [r3, #0]
    1216:	2a00      	cmp	r2, #0
    1218:	d003      	beq.n	1222 <flight+0xc6>
            writeLog = false;
    121a:	2200      	movs	r2, #0
    121c:	701a      	strb	r2, [r3, #0]
            logSensors( );
    121e:	4b33      	ldr	r3, [pc, #204]	; (12ec <flight+0x190>)
    1220:	4798      	blx	r3

        }


        if (velocity < 0) {
    1222:	492c      	ldr	r1, [pc, #176]	; (12d4 <flight+0x178>)
    1224:	2200      	movs	r2, #0
    1226:	6808      	ldr	r0, [r1, #0]
    1228:	6849      	ldr	r1, [r1, #4]
    122a:	2300      	movs	r3, #0
    122c:	4d30      	ldr	r5, [pc, #192]	; (12f0 <flight+0x194>)
    122e:	47a8      	blx	r5
    1230:	2800      	cmp	r0, #0
    1232:	d01c      	beq.n	126e <flight+0x112>
            flightState = flightDrogue;
    1234:	2306      	movs	r3, #6
            logEvent('A');
    1236:	2041      	movs	r0, #65	; 0x41

        }


        if (velocity < 0) {
            flightState = flightDrogue;
    1238:	7023      	strb	r3, [r4, #0]
            logEvent('A');
    123a:	4b2b      	ldr	r3, [pc, #172]	; (12e8 <flight+0x18c>)
    123c:	4798      	blx	r3
            beep(100);
    123e:	2064      	movs	r0, #100	; 0x64
    1240:	4b2c      	ldr	r3, [pc, #176]	; (12f4 <flight+0x198>)
    1242:	4798      	blx	r3
    1244:	e013      	b.n	126e <flight+0x112>


        break;
    case flightTest:
           //simple continuity test
           if ( (sample.voltage.senseA + sample.voltage.senseB +sample.voltage.senseC +sample.voltage.senseD) > 200) {
    1246:	4b2c      	ldr	r3, [pc, #176]	; (12f8 <flight+0x19c>)
    1248:	8a5a      	ldrh	r2, [r3, #18]
    124a:	8a19      	ldrh	r1, [r3, #16]
    124c:	1889      	adds	r1, r1, r2
    124e:	8a9a      	ldrh	r2, [r3, #20]
    1250:	1889      	adds	r1, r1, r2
    1252:	8ada      	ldrh	r2, [r3, #22]
    1254:	188b      	adds	r3, r1, r2
    1256:	2bc8      	cmp	r3, #200	; 0xc8
    1258:	dd01      	ble.n	125e <flight+0x102>
               unpluggedJingle();
    125a:	4b17      	ldr	r3, [pc, #92]	; (12b8 <flight+0x15c>)
    125c:	4798      	blx	r3
           }
        
        if (writeLog) {
    125e:	4b1b      	ldr	r3, [pc, #108]	; (12cc <flight+0x170>)
    1260:	781a      	ldrb	r2, [r3, #0]
    1262:	2a00      	cmp	r2, #0
    1264:	d003      	beq.n	126e <flight+0x112>
            writeLog = false;
    1266:	2200      	movs	r2, #0
    1268:	701a      	strb	r2, [r3, #0]
            logSensors( ); 
    126a:	4b20      	ldr	r3, [pc, #128]	; (12ec <flight+0x190>)
    126c:	4798      	blx	r3
        }
		
        break;
    }

    if (flightState != flightStatrup & flightState != flightIdle & unplugged()) {
    126e:	2301      	movs	r3, #1
    1270:	7824      	ldrb	r4, [r4, #0]
    1272:	42a3      	cmp	r3, r4
    1274:	41a4      	sbcs	r4, r4
    1276:	4b0f      	ldr	r3, [pc, #60]	; (12b4 <flight+0x158>)
    1278:	4264      	negs	r4, r4
    127a:	4798      	blx	r3
    127c:	2c00      	cmp	r4, #0
    127e:	d006      	beq.n	128e <flight+0x132>
    1280:	2800      	cmp	r0, #0
    1282:	d004      	beq.n	128e <flight+0x132>
        finishFlight();
    1284:	4b1d      	ldr	r3, [pc, #116]	; (12fc <flight+0x1a0>)
    1286:	4798      	blx	r3
    }

    1288:	e001      	b.n	128e <flight+0x132>
        }
		
        break;
    }

    if (flightState != flightStatrup & flightState != flightIdle & unplugged()) {
    128a:	4b0a      	ldr	r3, [pc, #40]	; (12b4 <flight+0x158>)
    128c:	4798      	blx	r3
        finishFlight();
    }

    128e:	bd70      	pop	{r4, r5, r6, pc}
    1290:	20000684 	.word	0x20000684
    1294:	00001301 	.word	0x00001301
    1298:	00001059 	.word	0x00001059
    129c:	20000524 	.word	0x20000524
    12a0:	00002710 	.word	0x00002710
    12a4:	00002229 	.word	0x00002229
    12a8:	00001f4d 	.word	0x00001f4d
    12ac:	00000db9 	.word	0x00000db9
    12b0:	00002741 	.word	0x00002741
    12b4:	00000b55 	.word	0x00000b55
    12b8:	00000df1 	.word	0x00000df1
    12bc:	42001400 	.word	0x42001400
    12c0:	00002731 	.word	0x00002731
    12c4:	05fa0004 	.word	0x05fa0004
    12c8:	e000ed00 	.word	0xe000ed00
    12cc:	20000520 	.word	0x20000520
    12d0:	41004400 	.word	0x41004400
    12d4:	20000690 	.word	0x20000690
    12d8:	9999999a 	.word	0x9999999a
    12dc:	3fa99999 	.word	0x3fa99999
    12e0:	00003ab9 	.word	0x00003ab9
    12e4:	00000b21 	.word	0x00000b21
    12e8:	00001fa9 	.word	0x00001fa9
    12ec:	00001ffd 	.word	0x00001ffd
    12f0:	00003a91 	.word	0x00003a91
    12f4:	00000d7d 	.word	0x00000d7d
    12f8:	200007c8 	.word	0x200007c8
    12fc:	00000b89 	.word	0x00000b89

00001300 <updateGround>:
#include <util.h>
#include <altimeter.h>

void updateGround(Altimeter *my_altimeter) {
    1300:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

    offsets.gravityOffsetBuffer = offsets.gravityOffsetBuffer * 0.8 + sample.accelZ * 0.2;
    1302:	4c2b      	ldr	r4, [pc, #172]	; (13b0 <updateGround+0xb0>)
    1304:	4d2b      	ldr	r5, [pc, #172]	; (13b4 <updateGround+0xb4>)
    1306:	4a2c      	ldr	r2, [pc, #176]	; (13b8 <updateGround+0xb8>)
    1308:	6920      	ldr	r0, [r4, #16]
    130a:	6961      	ldr	r1, [r4, #20]
    130c:	4b2b      	ldr	r3, [pc, #172]	; (13bc <updateGround+0xbc>)
    130e:	47a8      	blx	r5
    1310:	4b2b      	ldr	r3, [pc, #172]	; (13c0 <updateGround+0xc0>)
    1312:	0006      	movs	r6, r0
    1314:	6a98      	ldr	r0, [r3, #40]	; 0x28
    1316:	4b2b      	ldr	r3, [pc, #172]	; (13c4 <updateGround+0xc4>)
    1318:	000f      	movs	r7, r1
    131a:	4798      	blx	r3
    131c:	4a26      	ldr	r2, [pc, #152]	; (13b8 <updateGround+0xb8>)
    131e:	4b2a      	ldr	r3, [pc, #168]	; (13c8 <updateGround+0xc8>)
    1320:	47a8      	blx	r5
    1322:	0002      	movs	r2, r0
    1324:	000b      	movs	r3, r1
    1326:	0030      	movs	r0, r6
    1328:	0039      	movs	r1, r7
    132a:	4e28      	ldr	r6, [pc, #160]	; (13cc <updateGround+0xcc>)
    132c:	47b0      	blx	r6
    offsets.groundOffsetBuffer = offsets.groundOffsetBuffer * 0.5 + altitude * 0.5;
    132e:	4e28      	ldr	r6, [pc, #160]	; (13d0 <updateGround+0xd0>)
#include <util.h>
#include <altimeter.h>

void updateGround(Altimeter *my_altimeter) {

    offsets.gravityOffsetBuffer = offsets.gravityOffsetBuffer * 0.8 + sample.accelZ * 0.2;
    1330:	6120      	str	r0, [r4, #16]
    1332:	6161      	str	r1, [r4, #20]
    offsets.groundOffsetBuffer = offsets.groundOffsetBuffer * 0.5 + altitude * 0.5;
    1334:	69e0      	ldr	r0, [r4, #28]
    1336:	47b0      	blx	r6
    1338:	2200      	movs	r2, #0
    133a:	4b26      	ldr	r3, [pc, #152]	; (13d4 <updateGround+0xd4>)
    133c:	47a8      	blx	r5
    133e:	9000      	str	r0, [sp, #0]
    1340:	9101      	str	r1, [sp, #4]
    1342:	4925      	ldr	r1, [pc, #148]	; (13d8 <updateGround+0xd8>)
    1344:	2200      	movs	r2, #0
    1346:	6808      	ldr	r0, [r1, #0]
    1348:	6849      	ldr	r1, [r1, #4]
    134a:	4b22      	ldr	r3, [pc, #136]	; (13d4 <updateGround+0xd4>)
    134c:	47a8      	blx	r5
    134e:	4f1f      	ldr	r7, [pc, #124]	; (13cc <updateGround+0xcc>)
    1350:	0002      	movs	r2, r0
    1352:	000b      	movs	r3, r1
    1354:	9800      	ldr	r0, [sp, #0]
    1356:	9901      	ldr	r1, [sp, #4]
    1358:	47b8      	blx	r7
    135a:	4f20      	ldr	r7, [pc, #128]	; (13dc <updateGround+0xdc>)
    135c:	47b8      	blx	r7
    135e:	61e0      	str	r0, [r4, #28]
    offsets.groundTemperatureBuffer = offsets.groundTemperatureBuffer * 0.8 + sample.temperatureCelcus * 0.2;
    1360:	6a60      	ldr	r0, [r4, #36]	; 0x24
    1362:	47b0      	blx	r6
    1364:	4a14      	ldr	r2, [pc, #80]	; (13b8 <updateGround+0xb8>)
    1366:	4b15      	ldr	r3, [pc, #84]	; (13bc <updateGround+0xbc>)
    1368:	47a8      	blx	r5
    136a:	4b15      	ldr	r3, [pc, #84]	; (13c0 <updateGround+0xc0>)
    136c:	9000      	str	r0, [sp, #0]
    136e:	9101      	str	r1, [sp, #4]
    1370:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
    1372:	47b0      	blx	r6
    1374:	4a10      	ldr	r2, [pc, #64]	; (13b8 <updateGround+0xb8>)
    1376:	4b14      	ldr	r3, [pc, #80]	; (13c8 <updateGround+0xc8>)
    1378:	47a8      	blx	r5
    137a:	4d14      	ldr	r5, [pc, #80]	; (13cc <updateGround+0xcc>)
    137c:	000b      	movs	r3, r1
    137e:	0002      	movs	r2, r0
    1380:	9800      	ldr	r0, [sp, #0]
    1382:	9901      	ldr	r1, [sp, #4]
    1384:	47a8      	blx	r5
    1386:	47b8      	blx	r7

    if ((millis() - offsets.offsetBufferTime) > 2000) {
    1388:	4d15      	ldr	r5, [pc, #84]	; (13e0 <updateGround+0xe0>)

void updateGround(Altimeter *my_altimeter) {

    offsets.gravityOffsetBuffer = offsets.gravityOffsetBuffer * 0.8 + sample.accelZ * 0.2;
    offsets.groundOffsetBuffer = offsets.groundOffsetBuffer * 0.5 + altitude * 0.5;
    offsets.groundTemperatureBuffer = offsets.groundTemperatureBuffer * 0.8 + sample.temperatureCelcus * 0.2;
    138a:	6260      	str	r0, [r4, #36]	; 0x24

    if ((millis() - offsets.offsetBufferTime) > 2000) {
    138c:	47a8      	blx	r5
    138e:	6823      	ldr	r3, [r4, #0]
    1390:	1ac0      	subs	r0, r0, r3
    1392:	23fa      	movs	r3, #250	; 0xfa
    1394:	00db      	lsls	r3, r3, #3
    1396:	4298      	cmp	r0, r3
    1398:	d909      	bls.n	13ae <updateGround+0xae>
        //recursive filter
        offsets.groundOffset = offsets.groundOffsetBuffer;
    139a:	69e3      	ldr	r3, [r4, #28]
    139c:	61a3      	str	r3, [r4, #24]
        offsets.groundTemperature = offsets.groundTemperatureBuffer;
    139e:	6a63      	ldr	r3, [r4, #36]	; 0x24
    13a0:	6223      	str	r3, [r4, #32]
        offsets.gravityOffset = offsets.gravityOffsetBuffer;
    13a2:	6922      	ldr	r2, [r4, #16]
    13a4:	6963      	ldr	r3, [r4, #20]
    13a6:	60a2      	str	r2, [r4, #8]
    13a8:	60e3      	str	r3, [r4, #12]
        offsets.offsetBufferTime = millis();
    13aa:	47a8      	blx	r5
    13ac:	6020      	str	r0, [r4, #0]
    }
}
    13ae:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    13b0:	200004d8 	.word	0x200004d8
    13b4:	0000504d 	.word	0x0000504d
    13b8:	9999999a 	.word	0x9999999a
    13bc:	3fe99999 	.word	0x3fe99999
    13c0:	200007c8 	.word	0x200007c8
    13c4:	00005d89 	.word	0x00005d89
    13c8:	3fc99999 	.word	0x3fc99999
    13cc:	000041ad 	.word	0x000041ad
    13d0:	00005d19 	.word	0x00005d19
    13d4:	3fe00000 	.word	0x3fe00000
    13d8:	20000698 	.word	0x20000698
    13dc:	00003b69 	.word	0x00003b69
    13e0:	00001059 	.word	0x00001059

000013e4 <computeKalmanGains>:
    dt = 0.005;

    /*
     Fill in state transition matrix and its transpose
    */
    phi[0][1]    = dt;
    13e4:	4bdc      	ldr	r3, [pc, #880]	; (1758 <computeKalmanGains+0x374>)
    13e6:	48dd      	ldr	r0, [pc, #884]	; (175c <computeKalmanGains+0x378>)
    13e8:	49dd      	ldr	r1, [pc, #884]	; (1760 <computeKalmanGains+0x37c>)

double altitude_variance = ALTITUDESIGMA*ALTITUDESIGMA;
double acceleration_variance = ACCELERATIONSIGMA*ACCELERATIONSIGMA;
double model_variance  = MODELSIGMA*MODELSIGMA;

void computeKalmanGains() {
    13ea:	b5f0      	push	{r4, r5, r6, r7, lr}
    dt = 0.005;

    /*
     Fill in state transition matrix and its transpose
    */
    phi[0][1]    = dt;
    13ec:	6098      	str	r0, [r3, #8]
    13ee:	60d9      	str	r1, [r3, #12]
    phi[1][2]    = dt;
    13f0:	6298      	str	r0, [r3, #40]	; 0x28
    13f2:	62d9      	str	r1, [r3, #44]	; 0x2c
    phi[0][2]    = dt*dt/2.0;
    13f4:	48db      	ldr	r0, [pc, #876]	; (1764 <computeKalmanGains+0x380>)
    13f6:	49dc      	ldr	r1, [pc, #880]	; (1768 <computeKalmanGains+0x384>)
    13f8:	2200      	movs	r2, #0
    13fa:	6118      	str	r0, [r3, #16]
    13fc:	6159      	str	r1, [r3, #20]


    for( i = 0; i <= 2; i++)
        for( j = 0; j <=1; j++) {
            lastkgain[i][j] = .001;
            kgain[i][j] = 1.0;
    13fe:	2000      	movs	r0, #0
    1400:	49da      	ldr	r1, [pc, #872]	; (176c <computeKalmanGains+0x388>)



    for( i = 0; i <= 2; i++)
        for( j = 0; j <=1; j++) {
            lastkgain[i][j] = .001;
    1402:	4cdb      	ldr	r4, [pc, #876]	; (1770 <computeKalmanGains+0x38c>)
    1404:	468c      	mov	ip, r1
    1406:	4ddb      	ldr	r5, [pc, #876]	; (1774 <computeKalmanGains+0x390>)
            kgain[i][j] = 1.0;
    1408:	49db      	ldr	r1, [pc, #876]	; (1778 <computeKalmanGains+0x394>)

double altitude_variance = ALTITUDESIGMA*ALTITUDESIGMA;
double acceleration_variance = ACCELERATIONSIGMA*ACCELERATIONSIGMA;
double model_variance  = MODELSIGMA*MODELSIGMA;

void computeKalmanGains() {
    140a:	b0cd      	sub	sp, #308	; 0x134
    140c:	ae40      	add	r6, sp, #256	; 0x100
    140e:	1997      	adds	r7, r2, r6
    1410:	4666      	mov	r6, ip
    1412:	1996      	adds	r6, r2, r6
    1414:	3210      	adds	r2, #16



    for( i = 0; i <= 2; i++)
        for( j = 0; j <=1; j++) {
            lastkgain[i][j] = .001;
    1416:	603c      	str	r4, [r7, #0]
    1418:	607d      	str	r5, [r7, #4]
            kgain[i][j] = 1.0;
    141a:	6030      	str	r0, [r6, #0]
    141c:	6071      	str	r1, [r6, #4]



    for( i = 0; i <= 2; i++)
        for( j = 0; j <=1; j++) {
            lastkgain[i][j] = .001;
    141e:	60bc      	str	r4, [r7, #8]
    1420:	60fd      	str	r5, [r7, #12]
            kgain[i][j] = 1.0;
    1422:	60b0      	str	r0, [r6, #8]
    1424:	60f1      	str	r1, [r6, #12]
    phit[2][1]    = dt;
    phit[2][0]    = dt*dt/2.0;



    for( i = 0; i <= 2; i++)
    1426:	2a30      	cmp	r2, #48	; 0x30
    1428:	d1f0      	bne.n	140c <computeKalmanGains+0x28>

    /* Compute the Kalman gain matrix. */
    while(1) {
        /* Propagate state covariance */

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
    142a:	6819      	ldr	r1, [r3, #0]
    142c:	685a      	ldr	r2, [r3, #4]
    142e:	911a      	str	r1, [sp, #104]	; 0x68
    1430:	921b      	str	r2, [sp, #108]	; 0x6c
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
    1432:	6999      	ldr	r1, [r3, #24]
    1434:	69da      	ldr	r2, [r3, #28]
    1436:	911c      	str	r1, [sp, #112]	; 0x70
    1438:	921d      	str	r2, [sp, #116]	; 0x74
    143a:	6a19      	ldr	r1, [r3, #32]
    143c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    143e:	911e      	str	r1, [sp, #120]	; 0x78
    1440:	921f      	str	r2, [sp, #124]	; 0x7c
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
    1442:	6b19      	ldr	r1, [r3, #48]	; 0x30
    1444:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    1446:	9120      	str	r1, [sp, #128]	; 0x80
    1448:	9221      	str	r2, [sp, #132]	; 0x84
    144a:	6b99      	ldr	r1, [r3, #56]	; 0x38
    144c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    144e:	9122      	str	r1, [sp, #136]	; 0x88
    1450:	9223      	str	r2, [sp, #140]	; 0x8c
    1452:	6c19      	ldr	r1, [r3, #64]	; 0x40
    1454:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    1456:	9124      	str	r1, [sp, #144]	; 0x90
    1458:	9225      	str	r2, [sp, #148]	; 0x94
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
        pestp[2][1] = term[2][0] * phit[0][1] + term[2][1] * phit[1][1] + term[2][2] * phit[2][1];
        pestp[2][2] = term[2][0] * phit[0][2] + term[2][1] * phit[1][2] + term[2][2] * phit[2][2];

        pestp[2][2] = pestp[2][2] + model_variance;
    145a:	6c99      	ldr	r1, [r3, #72]	; 0x48
    145c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    145e:	913a      	str	r1, [sp, #232]	; 0xe8
    1460:	923b      	str	r2, [sp, #236]	; 0xec
        /*
          Calculate Kalman Gain
        */
        det = (pestp[0][0]+altitude_variance)*(pestp[2][2] + acceleration_variance) - pestp[2][0] * pestp[0][2];
    1462:	6d19      	ldr	r1, [r3, #80]	; 0x50
    1464:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    1466:	6ddc      	ldr	r4, [r3, #92]	; 0x5c
    1468:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    146a:	933e      	str	r3, [sp, #248]	; 0xf8
    146c:	943f      	str	r4, [sp, #252]	; 0xfc
    146e:	2300      	movs	r3, #0
    1470:	4cc2      	ldr	r4, [pc, #776]	; (177c <computeKalmanGains+0x398>)
    1472:	913c      	str	r1, [sp, #240]	; 0xf0
    1474:	923d      	str	r2, [sp, #244]	; 0xf4
    1476:	9302      	str	r3, [sp, #8]
    1478:	9403      	str	r4, [sp, #12]
    147a:	2300      	movs	r3, #0
    147c:	2400      	movs	r4, #0
    147e:	9310      	str	r3, [sp, #64]	; 0x40
    1480:	9411      	str	r4, [sp, #68]	; 0x44
    1482:	9300      	str	r3, [sp, #0]
    1484:	9401      	str	r4, [sp, #4]
    1486:	9304      	str	r3, [sp, #16]
    1488:	9405      	str	r4, [sp, #20]
    148a:	2300      	movs	r3, #0
    148c:	4cbb      	ldr	r4, [pc, #748]	; (177c <computeKalmanGains+0x398>)
    148e:	930e      	str	r3, [sp, #56]	; 0x38
    1490:	940f      	str	r4, [sp, #60]	; 0x3c
    1492:	2300      	movs	r3, #0
    1494:	2400      	movs	r4, #0
    1496:	9308      	str	r3, [sp, #32]
    1498:	9409      	str	r4, [sp, #36]	; 0x24
    149a:	930c      	str	r3, [sp, #48]	; 0x30
    149c:	940d      	str	r4, [sp, #52]	; 0x34
    149e:	930a      	str	r3, [sp, #40]	; 0x28
    14a0:	940b      	str	r4, [sp, #44]	; 0x2c
    14a2:	2480      	movs	r4, #128	; 0x80
    14a4:	2300      	movs	r3, #0
    14a6:	05e4      	lsls	r4, r4, #23
    14a8:	9306      	str	r3, [sp, #24]
    14aa:	9407      	str	r4, [sp, #28]
    14ac:	2300      	movs	r3, #0
    14ae:	9338      	str	r3, [sp, #224]	; 0xe0

    /* Compute the Kalman gain matrix. */
    while(1) {
        /* Propagate state covariance */

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
    14b0:	4db3      	ldr	r5, [pc, #716]	; (1780 <computeKalmanGains+0x39c>)
    14b2:	9a06      	ldr	r2, [sp, #24]
    14b4:	9b07      	ldr	r3, [sp, #28]
    14b6:	981a      	ldr	r0, [sp, #104]	; 0x68
    14b8:	991b      	ldr	r1, [sp, #108]	; 0x6c
    14ba:	47a8      	blx	r5
    14bc:	4aa7      	ldr	r2, [pc, #668]	; (175c <computeKalmanGains+0x378>)
    14be:	0006      	movs	r6, r0
    14c0:	000f      	movs	r7, r1
    14c2:	9808      	ldr	r0, [sp, #32]
    14c4:	9909      	ldr	r1, [sp, #36]	; 0x24
    14c6:	4ba6      	ldr	r3, [pc, #664]	; (1760 <computeKalmanGains+0x37c>)
    14c8:	47a8      	blx	r5
    14ca:	4cae      	ldr	r4, [pc, #696]	; (1784 <computeKalmanGains+0x3a0>)
    14cc:	0002      	movs	r2, r0
    14ce:	000b      	movs	r3, r1
    14d0:	0030      	movs	r0, r6
    14d2:	0039      	movs	r1, r7
    14d4:	47a0      	blx	r4
    14d6:	4aa3      	ldr	r2, [pc, #652]	; (1764 <computeKalmanGains+0x380>)
    14d8:	0006      	movs	r6, r0
    14da:	000f      	movs	r7, r1
    14dc:	9800      	ldr	r0, [sp, #0]
    14de:	9901      	ldr	r1, [sp, #4]
    14e0:	4ba1      	ldr	r3, [pc, #644]	; (1768 <computeKalmanGains+0x384>)
    14e2:	47a8      	blx	r5
    14e4:	0002      	movs	r2, r0
    14e6:	000b      	movs	r3, r1
    14e8:	0030      	movs	r0, r6
    14ea:	0039      	movs	r1, r7
    14ec:	47a0      	blx	r4
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
    14ee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    14f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c

    /* Compute the Kalman gain matrix. */
    while(1) {
        /* Propagate state covariance */

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
    14f2:	9016      	str	r0, [sp, #88]	; 0x58
    14f4:	9117      	str	r1, [sp, #92]	; 0x5c
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
    14f6:	981a      	ldr	r0, [sp, #104]	; 0x68
    14f8:	991b      	ldr	r1, [sp, #108]	; 0x6c
    14fa:	47a8      	blx	r5
    14fc:	4a97      	ldr	r2, [pc, #604]	; (175c <computeKalmanGains+0x378>)
    14fe:	0006      	movs	r6, r0
    1500:	000f      	movs	r7, r1
    1502:	980e      	ldr	r0, [sp, #56]	; 0x38
    1504:	990f      	ldr	r1, [sp, #60]	; 0x3c
    1506:	4b96      	ldr	r3, [pc, #600]	; (1760 <computeKalmanGains+0x37c>)
    1508:	47a8      	blx	r5
    150a:	0002      	movs	r2, r0
    150c:	000b      	movs	r3, r1
    150e:	0030      	movs	r0, r6
    1510:	0039      	movs	r1, r7
    1512:	47a0      	blx	r4
    1514:	4a93      	ldr	r2, [pc, #588]	; (1764 <computeKalmanGains+0x380>)
    1516:	0006      	movs	r6, r0
    1518:	000f      	movs	r7, r1
    151a:	9810      	ldr	r0, [sp, #64]	; 0x40
    151c:	9911      	ldr	r1, [sp, #68]	; 0x44
    151e:	4b92      	ldr	r3, [pc, #584]	; (1768 <computeKalmanGains+0x384>)
    1520:	47a8      	blx	r5
    1522:	0002      	movs	r2, r0
    1524:	000b      	movs	r3, r1
    1526:	0030      	movs	r0, r6
    1528:	0039      	movs	r1, r7
    152a:	47a0      	blx	r4
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
    152c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    152e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    /* Compute the Kalman gain matrix. */
    while(1) {
        /* Propagate state covariance */

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
    1530:	9012      	str	r0, [sp, #72]	; 0x48
    1532:	9113      	str	r1, [sp, #76]	; 0x4c
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
    1534:	981a      	ldr	r0, [sp, #104]	; 0x68
    1536:	991b      	ldr	r1, [sp, #108]	; 0x6c
    1538:	47a8      	blx	r5
    153a:	4a88      	ldr	r2, [pc, #544]	; (175c <computeKalmanGains+0x378>)
    153c:	0006      	movs	r6, r0
    153e:	000f      	movs	r7, r1
    1540:	9804      	ldr	r0, [sp, #16]
    1542:	9905      	ldr	r1, [sp, #20]
    1544:	4b86      	ldr	r3, [pc, #536]	; (1760 <computeKalmanGains+0x37c>)
    1546:	47a8      	blx	r5
    1548:	0002      	movs	r2, r0
    154a:	000b      	movs	r3, r1
    154c:	0030      	movs	r0, r6
    154e:	0039      	movs	r1, r7
    1550:	47a0      	blx	r4
    1552:	4a84      	ldr	r2, [pc, #528]	; (1764 <computeKalmanGains+0x380>)
    1554:	0006      	movs	r6, r0
    1556:	000f      	movs	r7, r1
    1558:	9802      	ldr	r0, [sp, #8]
    155a:	9903      	ldr	r1, [sp, #12]
    155c:	4b82      	ldr	r3, [pc, #520]	; (1768 <computeKalmanGains+0x384>)
    155e:	47a8      	blx	r5
    1560:	0002      	movs	r2, r0
    1562:	000b      	movs	r3, r1
    1564:	0030      	movs	r0, r6
    1566:	0039      	movs	r1, r7
    1568:	47a0      	blx	r4
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
    156a:	9a06      	ldr	r2, [sp, #24]
    156c:	9b07      	ldr	r3, [sp, #28]
    while(1) {
        /* Propagate state covariance */

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
    156e:	9014      	str	r0, [sp, #80]	; 0x50
    1570:	9115      	str	r1, [sp, #84]	; 0x54
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
    1572:	981c      	ldr	r0, [sp, #112]	; 0x70
    1574:	991d      	ldr	r1, [sp, #116]	; 0x74
    1576:	47a8      	blx	r5
    1578:	9a08      	ldr	r2, [sp, #32]
    157a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    157c:	0006      	movs	r6, r0
    157e:	000f      	movs	r7, r1
    1580:	981e      	ldr	r0, [sp, #120]	; 0x78
    1582:	991f      	ldr	r1, [sp, #124]	; 0x7c
    1584:	47a8      	blx	r5
    1586:	0002      	movs	r2, r0
    1588:	000b      	movs	r3, r1
    158a:	0030      	movs	r0, r6
    158c:	0039      	movs	r1, r7
    158e:	47a0      	blx	r4
    1590:	4a72      	ldr	r2, [pc, #456]	; (175c <computeKalmanGains+0x378>)
    1592:	0006      	movs	r6, r0
    1594:	000f      	movs	r7, r1
    1596:	9800      	ldr	r0, [sp, #0]
    1598:	9901      	ldr	r1, [sp, #4]
    159a:	4b71      	ldr	r3, [pc, #452]	; (1760 <computeKalmanGains+0x37c>)
    159c:	47a8      	blx	r5
    159e:	0002      	movs	r2, r0
    15a0:	000b      	movs	r3, r1
    15a2:	0030      	movs	r0, r6
    15a4:	0039      	movs	r1, r7
    15a6:	47a0      	blx	r4
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
    15a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    15aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
        /* Propagate state covariance */

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
    15ac:	9018      	str	r0, [sp, #96]	; 0x60
    15ae:	9119      	str	r1, [sp, #100]	; 0x64
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
    15b0:	981c      	ldr	r0, [sp, #112]	; 0x70
    15b2:	991d      	ldr	r1, [sp, #116]	; 0x74
    15b4:	47a8      	blx	r5
    15b6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    15b8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    15ba:	0006      	movs	r6, r0
    15bc:	000f      	movs	r7, r1
    15be:	981e      	ldr	r0, [sp, #120]	; 0x78
    15c0:	991f      	ldr	r1, [sp, #124]	; 0x7c
    15c2:	47a8      	blx	r5
    15c4:	0002      	movs	r2, r0
    15c6:	000b      	movs	r3, r1
    15c8:	0030      	movs	r0, r6
    15ca:	0039      	movs	r1, r7
    15cc:	47a0      	blx	r4
    15ce:	4a63      	ldr	r2, [pc, #396]	; (175c <computeKalmanGains+0x378>)
    15d0:	0006      	movs	r6, r0
    15d2:	000f      	movs	r7, r1
    15d4:	9810      	ldr	r0, [sp, #64]	; 0x40
    15d6:	9911      	ldr	r1, [sp, #68]	; 0x44
    15d8:	4b61      	ldr	r3, [pc, #388]	; (1760 <computeKalmanGains+0x37c>)
    15da:	47a8      	blx	r5
    15dc:	0002      	movs	r2, r0
    15de:	000b      	movs	r3, r1
    15e0:	0030      	movs	r0, r6
    15e2:	0039      	movs	r1, r7
    15e4:	47a0      	blx	r4
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
    15e6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    15e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
    15ea:	9026      	str	r0, [sp, #152]	; 0x98
    15ec:	9127      	str	r1, [sp, #156]	; 0x9c
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
    15ee:	981c      	ldr	r0, [sp, #112]	; 0x70
    15f0:	991d      	ldr	r1, [sp, #116]	; 0x74
    15f2:	47a8      	blx	r5
    15f4:	9a04      	ldr	r2, [sp, #16]
    15f6:	9b05      	ldr	r3, [sp, #20]
    15f8:	0006      	movs	r6, r0
    15fa:	000f      	movs	r7, r1
    15fc:	981e      	ldr	r0, [sp, #120]	; 0x78
    15fe:	991f      	ldr	r1, [sp, #124]	; 0x7c
    1600:	47a8      	blx	r5
    1602:	0002      	movs	r2, r0
    1604:	000b      	movs	r3, r1
    1606:	0030      	movs	r0, r6
    1608:	0039      	movs	r1, r7
    160a:	47a0      	blx	r4
    160c:	4a53      	ldr	r2, [pc, #332]	; (175c <computeKalmanGains+0x378>)
    160e:	0006      	movs	r6, r0
    1610:	000f      	movs	r7, r1
    1612:	9802      	ldr	r0, [sp, #8]
    1614:	9903      	ldr	r1, [sp, #12]
    1616:	4b52      	ldr	r3, [pc, #328]	; (1760 <computeKalmanGains+0x37c>)
    1618:	47a8      	blx	r5
    161a:	0002      	movs	r2, r0
    161c:	000b      	movs	r3, r1
    161e:	0030      	movs	r0, r6
    1620:	0039      	movs	r1, r7
    1622:	47a0      	blx	r4
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
    1624:	9a06      	ldr	r2, [sp, #24]
    1626:	9b07      	ldr	r3, [sp, #28]
        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
    1628:	9028      	str	r0, [sp, #160]	; 0xa0
    162a:	9129      	str	r1, [sp, #164]	; 0xa4
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
    162c:	9820      	ldr	r0, [sp, #128]	; 0x80
    162e:	9921      	ldr	r1, [sp, #132]	; 0x84
    1630:	47a8      	blx	r5
    1632:	9a08      	ldr	r2, [sp, #32]
    1634:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1636:	0006      	movs	r6, r0
    1638:	000f      	movs	r7, r1
    163a:	9822      	ldr	r0, [sp, #136]	; 0x88
    163c:	9923      	ldr	r1, [sp, #140]	; 0x8c
    163e:	47a8      	blx	r5
    1640:	0002      	movs	r2, r0
    1642:	000b      	movs	r3, r1
    1644:	0030      	movs	r0, r6
    1646:	0039      	movs	r1, r7
    1648:	47a0      	blx	r4
    164a:	9a00      	ldr	r2, [sp, #0]
    164c:	9b01      	ldr	r3, [sp, #4]
    164e:	0006      	movs	r6, r0
    1650:	000f      	movs	r7, r1
    1652:	9824      	ldr	r0, [sp, #144]	; 0x90
    1654:	9925      	ldr	r1, [sp, #148]	; 0x94
    1656:	47a8      	blx	r5
    1658:	0002      	movs	r2, r0
    165a:	000b      	movs	r3, r1
    165c:	0030      	movs	r0, r6
    165e:	0039      	movs	r1, r7
    1660:	47a0      	blx	r4
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
    1662:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    1664:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
    1666:	902e      	str	r0, [sp, #184]	; 0xb8
    1668:	912f      	str	r1, [sp, #188]	; 0xbc
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
    166a:	9820      	ldr	r0, [sp, #128]	; 0x80
    166c:	9921      	ldr	r1, [sp, #132]	; 0x84
    166e:	47a8      	blx	r5
    1670:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    1672:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1674:	0006      	movs	r6, r0
    1676:	000f      	movs	r7, r1
    1678:	9822      	ldr	r0, [sp, #136]	; 0x88
    167a:	9923      	ldr	r1, [sp, #140]	; 0x8c
    167c:	47a8      	blx	r5
    167e:	0002      	movs	r2, r0
    1680:	000b      	movs	r3, r1
    1682:	0030      	movs	r0, r6
    1684:	0039      	movs	r1, r7
    1686:	47a0      	blx	r4
    1688:	9a10      	ldr	r2, [sp, #64]	; 0x40
    168a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    168c:	0006      	movs	r6, r0
    168e:	000f      	movs	r7, r1
    1690:	9824      	ldr	r0, [sp, #144]	; 0x90
    1692:	9925      	ldr	r1, [sp, #148]	; 0x94
    1694:	47a8      	blx	r5
    1696:	0002      	movs	r2, r0
    1698:	000b      	movs	r3, r1
    169a:	0030      	movs	r0, r6
    169c:	0039      	movs	r1, r7
    169e:	47a0      	blx	r4
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];
    16a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    16a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
    16a4:	9006      	str	r0, [sp, #24]
    16a6:	9107      	str	r1, [sp, #28]
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];
    16a8:	9820      	ldr	r0, [sp, #128]	; 0x80
    16aa:	9921      	ldr	r1, [sp, #132]	; 0x84
    16ac:	47a8      	blx	r5
    16ae:	9a04      	ldr	r2, [sp, #16]
    16b0:	9b05      	ldr	r3, [sp, #20]
    16b2:	0006      	movs	r6, r0
    16b4:	000f      	movs	r7, r1
    16b6:	9822      	ldr	r0, [sp, #136]	; 0x88
    16b8:	9923      	ldr	r1, [sp, #140]	; 0x8c
    16ba:	47a8      	blx	r5
    16bc:	0002      	movs	r2, r0
    16be:	000b      	movs	r3, r1
    16c0:	0030      	movs	r0, r6
    16c2:	0039      	movs	r1, r7
    16c4:	47a0      	blx	r4
    16c6:	9a02      	ldr	r2, [sp, #8]
    16c8:	9b03      	ldr	r3, [sp, #12]
    16ca:	0006      	movs	r6, r0
    16cc:	000f      	movs	r7, r1
    16ce:	9824      	ldr	r0, [sp, #144]	; 0x90
    16d0:	9925      	ldr	r1, [sp, #148]	; 0x94
    16d2:	47a8      	blx	r5
    16d4:	0002      	movs	r2, r0
    16d6:	000b      	movs	r3, r1
    16d8:	0030      	movs	r0, r6
    16da:	0039      	movs	r1, r7
    16dc:	47a0      	blx	r4

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
    16de:	4a1f      	ldr	r2, [pc, #124]	; (175c <computeKalmanGains+0x378>)
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];
    16e0:	9002      	str	r0, [sp, #8]
    16e2:	9103      	str	r1, [sp, #12]

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
    16e4:	9812      	ldr	r0, [sp, #72]	; 0x48
    16e6:	9913      	ldr	r1, [sp, #76]	; 0x4c
    16e8:	4b1d      	ldr	r3, [pc, #116]	; (1760 <computeKalmanGains+0x37c>)
    16ea:	47a8      	blx	r5
    16ec:	9a16      	ldr	r2, [sp, #88]	; 0x58
    16ee:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    16f0:	47a0      	blx	r4
    16f2:	4a1c      	ldr	r2, [pc, #112]	; (1764 <computeKalmanGains+0x380>)
    16f4:	0006      	movs	r6, r0
    16f6:	000f      	movs	r7, r1
    16f8:	9814      	ldr	r0, [sp, #80]	; 0x50
    16fa:	9915      	ldr	r1, [sp, #84]	; 0x54
    16fc:	4b1a      	ldr	r3, [pc, #104]	; (1768 <computeKalmanGains+0x384>)
    16fe:	47a8      	blx	r5
    1700:	0002      	movs	r2, r0
    1702:	000b      	movs	r3, r1
    1704:	0030      	movs	r0, r6
    1706:	0039      	movs	r1, r7
    1708:	47a0      	blx	r4
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
    170a:	2200      	movs	r2, #0
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
    170c:	9008      	str	r0, [sp, #32]
    170e:	9109      	str	r1, [sp, #36]	; 0x24
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
    1710:	9816      	ldr	r0, [sp, #88]	; 0x58
    1712:	9917      	ldr	r1, [sp, #92]	; 0x5c
    1714:	2300      	movs	r3, #0
    1716:	47a8      	blx	r5
    1718:	0006      	movs	r6, r0
    171a:	000f      	movs	r7, r1
    171c:	0002      	movs	r2, r0
    171e:	000b      	movs	r3, r1
    1720:	9812      	ldr	r0, [sp, #72]	; 0x48
    1722:	9913      	ldr	r1, [sp, #76]	; 0x4c
    1724:	47a0      	blx	r4
    1726:	4a0d      	ldr	r2, [pc, #52]	; (175c <computeKalmanGains+0x378>)
    1728:	9000      	str	r0, [sp, #0]
    172a:	9101      	str	r1, [sp, #4]
    172c:	9814      	ldr	r0, [sp, #80]	; 0x50
    172e:	9915      	ldr	r1, [sp, #84]	; 0x54
    1730:	4b0b      	ldr	r3, [pc, #44]	; (1760 <computeKalmanGains+0x37c>)
    1732:	47a8      	blx	r5
    1734:	0002      	movs	r2, r0
    1736:	000b      	movs	r3, r1
    1738:	9800      	ldr	r0, [sp, #0]
    173a:	9901      	ldr	r1, [sp, #4]
    173c:	47a0      	blx	r4
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
    173e:	2200      	movs	r2, #0
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
    1740:	9030      	str	r0, [sp, #192]	; 0xc0
    1742:	9131      	str	r1, [sp, #196]	; 0xc4
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
    1744:	9812      	ldr	r0, [sp, #72]	; 0x48
    1746:	9913      	ldr	r1, [sp, #76]	; 0x4c
    1748:	2300      	movs	r3, #0
    174a:	47a8      	blx	r5
    174c:	0032      	movs	r2, r6
    174e:	003b      	movs	r3, r7
    1750:	47a0      	blx	r4
    1752:	9a14      	ldr	r2, [sp, #80]	; 0x50
    1754:	9b15      	ldr	r3, [sp, #84]	; 0x54
    1756:	e017      	b.n	1788 <computeKalmanGains+0x3a4>
    1758:	20000010 	.word	0x20000010
    175c:	47ae147b 	.word	0x47ae147b
    1760:	3f747ae1 	.word	0x3f747ae1
    1764:	eb1c432d 	.word	0xeb1c432d
    1768:	3eea36e2 	.word	0x3eea36e2
    176c:	20000650 	.word	0x20000650
    1770:	d2f1a9fc 	.word	0xd2f1a9fc
    1774:	3f50624d 	.word	0x3f50624d
    1778:	3ff00000 	.word	0x3ff00000
    177c:	40220000 	.word	0x40220000
    1780:	0000504d 	.word	0x0000504d
    1784:	000041ad 	.word	0x000041ad
    1788:	47a0      	blx	r4
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
    178a:	4ad9      	ldr	r2, [pc, #868]	; (1af0 <computeKalmanGains+0x70c>)
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
    178c:	9112      	str	r1, [sp, #72]	; 0x48
    178e:	9004      	str	r0, [sp, #16]
    1790:	9116      	str	r1, [sp, #88]	; 0x58
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
    1792:	4bd8      	ldr	r3, [pc, #864]	; (1af4 <computeKalmanGains+0x710>)
    1794:	9826      	ldr	r0, [sp, #152]	; 0x98
    1796:	9927      	ldr	r1, [sp, #156]	; 0x9c
    1798:	47a8      	blx	r5
    179a:	9a18      	ldr	r2, [sp, #96]	; 0x60
    179c:	9b19      	ldr	r3, [sp, #100]	; 0x64
    179e:	47a0      	blx	r4
    17a0:	4ad5      	ldr	r2, [pc, #852]	; (1af8 <computeKalmanGains+0x714>)
    17a2:	0006      	movs	r6, r0
    17a4:	000f      	movs	r7, r1
    17a6:	9828      	ldr	r0, [sp, #160]	; 0xa0
    17a8:	9929      	ldr	r1, [sp, #164]	; 0xa4
    17aa:	4bd4      	ldr	r3, [pc, #848]	; (1afc <computeKalmanGains+0x718>)
    17ac:	47a8      	blx	r5
    17ae:	0002      	movs	r2, r0
    17b0:	000b      	movs	r3, r1
    17b2:	0030      	movs	r0, r6
    17b4:	0039      	movs	r1, r7
    17b6:	47a0      	blx	r4
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
    17b8:	2200      	movs	r2, #0
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
    17ba:	902a      	str	r0, [sp, #168]	; 0xa8
    17bc:	912b      	str	r1, [sp, #172]	; 0xac
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
    17be:	9818      	ldr	r0, [sp, #96]	; 0x60
    17c0:	9919      	ldr	r1, [sp, #100]	; 0x64
    17c2:	2300      	movs	r3, #0
    17c4:	47a8      	blx	r5
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
    17c6:	2200      	movs	r2, #0

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
    17c8:	9032      	str	r0, [sp, #200]	; 0xc8
    17ca:	9133      	str	r1, [sp, #204]	; 0xcc
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
    17cc:	9826      	ldr	r0, [sp, #152]	; 0x98
    17ce:	9927      	ldr	r1, [sp, #156]	; 0x9c
    17d0:	2300      	movs	r3, #0
    17d2:	47a8      	blx	r5
    17d4:	9a32      	ldr	r2, [sp, #200]	; 0xc8
    17d6:	9b33      	ldr	r3, [sp, #204]	; 0xcc
    17d8:	47a0      	blx	r4
    17da:	9a28      	ldr	r2, [sp, #160]	; 0xa0
    17dc:	9b29      	ldr	r3, [sp, #164]	; 0xa4
    17de:	47a0      	blx	r4
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
    17e0:	4ac3      	ldr	r2, [pc, #780]	; (1af0 <computeKalmanGains+0x70c>)
        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
    17e2:	902c      	str	r0, [sp, #176]	; 0xb0
    17e4:	912d      	str	r1, [sp, #180]	; 0xb4
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
    17e6:	9806      	ldr	r0, [sp, #24]
    17e8:	9907      	ldr	r1, [sp, #28]
    17ea:	4bc2      	ldr	r3, [pc, #776]	; (1af4 <computeKalmanGains+0x710>)
    17ec:	47a8      	blx	r5
    17ee:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
    17f0:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
    17f2:	47a0      	blx	r4
    17f4:	4ac0      	ldr	r2, [pc, #768]	; (1af8 <computeKalmanGains+0x714>)
    17f6:	0006      	movs	r6, r0
    17f8:	000f      	movs	r7, r1
    17fa:	9802      	ldr	r0, [sp, #8]
    17fc:	9903      	ldr	r1, [sp, #12]
    17fe:	4bbf      	ldr	r3, [pc, #764]	; (1afc <computeKalmanGains+0x718>)
    1800:	47a8      	blx	r5
    1802:	0002      	movs	r2, r0
    1804:	000b      	movs	r3, r1
    1806:	0030      	movs	r0, r6
    1808:	0039      	movs	r1, r7
    180a:	47a0      	blx	r4
        pestp[2][1] = term[2][0] * phit[0][1] + term[2][1] * phit[1][1] + term[2][2] * phit[2][1];
    180c:	2200      	movs	r2, #0
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
    180e:	9000      	str	r0, [sp, #0]
    1810:	9101      	str	r1, [sp, #4]
        pestp[2][1] = term[2][0] * phit[0][1] + term[2][1] * phit[1][1] + term[2][2] * phit[2][1];
    1812:	982e      	ldr	r0, [sp, #184]	; 0xb8
    1814:	992f      	ldr	r1, [sp, #188]	; 0xbc
    1816:	2300      	movs	r3, #0
    1818:	47a8      	blx	r5
    181a:	0006      	movs	r6, r0
    181c:	000f      	movs	r7, r1
    181e:	0002      	movs	r2, r0
    1820:	000b      	movs	r3, r1
    1822:	9806      	ldr	r0, [sp, #24]
    1824:	9907      	ldr	r1, [sp, #28]
    1826:	47a0      	blx	r4
    1828:	4ab1      	ldr	r2, [pc, #708]	; (1af0 <computeKalmanGains+0x70c>)
    182a:	900a      	str	r0, [sp, #40]	; 0x28
    182c:	910b      	str	r1, [sp, #44]	; 0x2c
    182e:	9802      	ldr	r0, [sp, #8]
    1830:	9903      	ldr	r1, [sp, #12]
    1832:	4bb0      	ldr	r3, [pc, #704]	; (1af4 <computeKalmanGains+0x710>)
    1834:	47a8      	blx	r5
    1836:	0002      	movs	r2, r0
    1838:	000b      	movs	r3, r1
    183a:	980a      	ldr	r0, [sp, #40]	; 0x28
    183c:	990b      	ldr	r1, [sp, #44]	; 0x2c
    183e:	47a0      	blx	r4
        pestp[2][2] = term[2][0] * phit[0][2] + term[2][1] * phit[1][2] + term[2][2] * phit[2][2];

        pestp[2][2] = pestp[2][2] + model_variance;
    1840:	2200      	movs	r2, #0
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
        pestp[2][1] = term[2][0] * phit[0][1] + term[2][1] * phit[1][1] + term[2][2] * phit[2][1];
    1842:	9010      	str	r0, [sp, #64]	; 0x40
    1844:	9111      	str	r1, [sp, #68]	; 0x44
        pestp[2][2] = term[2][0] * phit[0][2] + term[2][1] * phit[1][2] + term[2][2] * phit[2][2];

        pestp[2][2] = pestp[2][2] + model_variance;
    1846:	9806      	ldr	r0, [sp, #24]
    1848:	9907      	ldr	r1, [sp, #28]
    184a:	2300      	movs	r3, #0
    184c:	47a8      	blx	r5
    184e:	0032      	movs	r2, r6
    1850:	003b      	movs	r3, r7
    1852:	47a0      	blx	r4
    1854:	9a02      	ldr	r2, [sp, #8]
    1856:	9b03      	ldr	r3, [sp, #12]
    1858:	47a0      	blx	r4
    185a:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
    185c:	9b3b      	ldr	r3, [sp, #236]	; 0xec
    185e:	47a0      	blx	r4
        /*
          Calculate Kalman Gain
        */
        det = (pestp[0][0]+altitude_variance)*(pestp[2][2] + acceleration_variance) - pestp[2][0] * pestp[0][2];
    1860:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
    1862:	9b3d      	ldr	r3, [sp, #244]	; 0xf4
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
        pestp[2][1] = term[2][0] * phit[0][1] + term[2][1] * phit[1][1] + term[2][2] * phit[2][1];
        pestp[2][2] = term[2][0] * phit[0][2] + term[2][1] * phit[1][2] + term[2][2] * phit[2][2];

        pestp[2][2] = pestp[2][2] + model_variance;
    1864:	9002      	str	r0, [sp, #8]
    1866:	9103      	str	r1, [sp, #12]
        /*
          Calculate Kalman Gain
        */
        det = (pestp[0][0]+altitude_variance)*(pestp[2][2] + acceleration_variance) - pestp[2][0] * pestp[0][2];
    1868:	9808      	ldr	r0, [sp, #32]
    186a:	9909      	ldr	r1, [sp, #36]	; 0x24
    186c:	47a0      	blx	r4
    186e:	9a3e      	ldr	r2, [sp, #248]	; 0xf8
    1870:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
    1872:	900a      	str	r0, [sp, #40]	; 0x28
    1874:	910b      	str	r1, [sp, #44]	; 0x2c
    1876:	9802      	ldr	r0, [sp, #8]
    1878:	9903      	ldr	r1, [sp, #12]
    187a:	47a0      	blx	r4
    187c:	9a00      	ldr	r2, [sp, #0]
    187e:	9b01      	ldr	r3, [sp, #4]
    1880:	900c      	str	r0, [sp, #48]	; 0x30
    1882:	910d      	str	r1, [sp, #52]	; 0x34
    1884:	9804      	ldr	r0, [sp, #16]
    1886:	9916      	ldr	r1, [sp, #88]	; 0x58
    1888:	47a8      	blx	r5
    188a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    188c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    188e:	900e      	str	r0, [sp, #56]	; 0x38
    1890:	910f      	str	r1, [sp, #60]	; 0x3c
    1892:	980a      	ldr	r0, [sp, #40]	; 0x28
    1894:	990b      	ldr	r1, [sp, #44]	; 0x2c
    1896:	47a8      	blx	r5
    1898:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    189a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    189c:	4e98      	ldr	r6, [pc, #608]	; (1b00 <computeKalmanGains+0x71c>)
    189e:	47b0      	blx	r6


        kgain[0][0] = (pestp[0][0] * (pestp[2][2] + acceleration_variance) - pestp[0][2] * pestp[2][0])/det;
    18a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    18a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34

        pestp[2][2] = pestp[2][2] + model_variance;
        /*
          Calculate Kalman Gain
        */
        det = (pestp[0][0]+altitude_variance)*(pestp[2][2] + acceleration_variance) - pestp[2][0] * pestp[0][2];
    18a4:	9006      	str	r0, [sp, #24]
    18a6:	9107      	str	r1, [sp, #28]


        kgain[0][0] = (pestp[0][0] * (pestp[2][2] + acceleration_variance) - pestp[0][2] * pestp[2][0])/det;
    18a8:	9808      	ldr	r0, [sp, #32]
    18aa:	9909      	ldr	r1, [sp, #36]	; 0x24
    18ac:	47a8      	blx	r5
    18ae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    18b0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    18b2:	47b0      	blx	r6
    18b4:	9a06      	ldr	r2, [sp, #24]
    18b6:	9b07      	ldr	r3, [sp, #28]
    18b8:	4e92      	ldr	r6, [pc, #584]	; (1b04 <computeKalmanGains+0x720>)
    18ba:	47b0      	blx	r6
    18bc:	9034      	str	r0, [sp, #208]	; 0xd0
    18be:	9135      	str	r1, [sp, #212]	; 0xd4
    18c0:	9a34      	ldr	r2, [sp, #208]	; 0xd0
    18c2:	9b35      	ldr	r3, [sp, #212]	; 0xd4
    18c4:	4990      	ldr	r1, [pc, #576]	; (1b08 <computeKalmanGains+0x724>)
    18c6:	600a      	str	r2, [r1, #0]
    18c8:	604b      	str	r3, [r1, #4]

        kgain[0][1] = (pestp[0][0] * (-pestp[0][2]) + pestp[0][2] * (pestp[0][0] + altitude_variance))/det;
    18ca:	9808      	ldr	r0, [sp, #32]
    18cc:	9909      	ldr	r1, [sp, #36]	; 0x24
    18ce:	2280      	movs	r2, #128	; 0x80
    18d0:	0612      	lsls	r2, r2, #24
    18d2:	4694      	mov	ip, r2
    18d4:	9b12      	ldr	r3, [sp, #72]	; 0x48
    18d6:	9a04      	ldr	r2, [sp, #16]
    18d8:	4463      	add	r3, ip
    18da:	932e      	str	r3, [sp, #184]	; 0xb8
    18dc:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    18de:	47a8      	blx	r5
    18e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    18e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    18e4:	0006      	movs	r6, r0
    18e6:	000f      	movs	r7, r1
    18e8:	9804      	ldr	r0, [sp, #16]
    18ea:	9916      	ldr	r1, [sp, #88]	; 0x58
    18ec:	47a8      	blx	r5
    18ee:	0002      	movs	r2, r0
    18f0:	000b      	movs	r3, r1
    18f2:	0030      	movs	r0, r6
    18f4:	0039      	movs	r1, r7
    18f6:	47a0      	blx	r4
    18f8:	9a06      	ldr	r2, [sp, #24]
    18fa:	9b07      	ldr	r3, [sp, #28]
    18fc:	4e81      	ldr	r6, [pc, #516]	; (1b04 <computeKalmanGains+0x720>)
    18fe:	47b0      	blx	r6
    1900:	900e      	str	r0, [sp, #56]	; 0x38
    1902:	910f      	str	r1, [sp, #60]	; 0x3c
    1904:	4980      	ldr	r1, [pc, #512]	; (1b08 <computeKalmanGains+0x724>)
    1906:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    1908:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    190a:	608a      	str	r2, [r1, #8]
    190c:	60cb      	str	r3, [r1, #12]

        kgain[1][0] = (pestp[1][0] * (pestp[2][2] + acceleration_variance) - pestp[1][2] * pestp[2][0])/det;
    190e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1910:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1912:	982a      	ldr	r0, [sp, #168]	; 0xa8
    1914:	992b      	ldr	r1, [sp, #172]	; 0xac
    1916:	47a8      	blx	r5
    1918:	9a00      	ldr	r2, [sp, #0]
    191a:	9b01      	ldr	r3, [sp, #4]
    191c:	0006      	movs	r6, r0
    191e:	000f      	movs	r7, r1
    1920:	982c      	ldr	r0, [sp, #176]	; 0xb0
    1922:	992d      	ldr	r1, [sp, #180]	; 0xb4
    1924:	47a8      	blx	r5
    1926:	0002      	movs	r2, r0
    1928:	000b      	movs	r3, r1
    192a:	0030      	movs	r0, r6
    192c:	0039      	movs	r1, r7
    192e:	4e74      	ldr	r6, [pc, #464]	; (1b00 <computeKalmanGains+0x71c>)
    1930:	47b0      	blx	r6
    1932:	9a06      	ldr	r2, [sp, #24]
    1934:	9b07      	ldr	r3, [sp, #28]
    1936:	4e73      	ldr	r6, [pc, #460]	; (1b04 <computeKalmanGains+0x720>)
    1938:	47b0      	blx	r6
    193a:	0002      	movs	r2, r0
    193c:	000b      	movs	r3, r1
    193e:	9139      	str	r1, [sp, #228]	; 0xe4
    1940:	4971      	ldr	r1, [pc, #452]	; (1b08 <computeKalmanGains+0x724>)
    1942:	9018      	str	r0, [sp, #96]	; 0x60
    1944:	610a      	str	r2, [r1, #16]
    1946:	614b      	str	r3, [r1, #20]

        kgain[1][1] = (pestp[1][0] * (-pestp[0][2]) + pestp[1][2] * (pestp[0][0] + altitude_variance))/det;
    1948:	982a      	ldr	r0, [sp, #168]	; 0xa8
    194a:	992b      	ldr	r1, [sp, #172]	; 0xac
    194c:	9a04      	ldr	r2, [sp, #16]
    194e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    1950:	47a8      	blx	r5
    1952:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    1954:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1956:	0006      	movs	r6, r0
    1958:	000f      	movs	r7, r1
    195a:	982c      	ldr	r0, [sp, #176]	; 0xb0
    195c:	992d      	ldr	r1, [sp, #180]	; 0xb4
    195e:	47a8      	blx	r5
    1960:	0002      	movs	r2, r0
    1962:	000b      	movs	r3, r1
    1964:	0030      	movs	r0, r6
    1966:	0039      	movs	r1, r7
    1968:	47a0      	blx	r4
    196a:	9a06      	ldr	r2, [sp, #24]
    196c:	9b07      	ldr	r3, [sp, #28]
    196e:	4e65      	ldr	r6, [pc, #404]	; (1b04 <computeKalmanGains+0x720>)
    1970:	47b0      	blx	r6
    1972:	9012      	str	r0, [sp, #72]	; 0x48
    1974:	9113      	str	r1, [sp, #76]	; 0x4c
    1976:	9a12      	ldr	r2, [sp, #72]	; 0x48
    1978:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    197a:	4963      	ldr	r1, [pc, #396]	; (1b08 <computeKalmanGains+0x724>)
    197c:	618a      	str	r2, [r1, #24]
    197e:	61cb      	str	r3, [r1, #28]

        kgain[2][0] = (pestp[2][0] * (pestp[2][2] + acceleration_variance) - pestp[2][2] * pestp[2][0])/det;
    1980:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1982:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1984:	9800      	ldr	r0, [sp, #0]
    1986:	9901      	ldr	r1, [sp, #4]
    1988:	47a8      	blx	r5
    198a:	9a02      	ldr	r2, [sp, #8]
    198c:	9b03      	ldr	r3, [sp, #12]
    198e:	0006      	movs	r6, r0
    1990:	000f      	movs	r7, r1
    1992:	9800      	ldr	r0, [sp, #0]
    1994:	9901      	ldr	r1, [sp, #4]
    1996:	47a8      	blx	r5
    1998:	0002      	movs	r2, r0
    199a:	000b      	movs	r3, r1
    199c:	0030      	movs	r0, r6
    199e:	0039      	movs	r1, r7
    19a0:	4e57      	ldr	r6, [pc, #348]	; (1b00 <computeKalmanGains+0x71c>)
    19a2:	47b0      	blx	r6
    19a4:	9a06      	ldr	r2, [sp, #24]
    19a6:	9b07      	ldr	r3, [sp, #28]
    19a8:	4e56      	ldr	r6, [pc, #344]	; (1b04 <computeKalmanGains+0x720>)
    19aa:	47b0      	blx	r6
    19ac:	9014      	str	r0, [sp, #80]	; 0x50
    19ae:	9115      	str	r1, [sp, #84]	; 0x54
    19b0:	9a14      	ldr	r2, [sp, #80]	; 0x50
    19b2:	9b15      	ldr	r3, [sp, #84]	; 0x54
    19b4:	4954      	ldr	r1, [pc, #336]	; (1b08 <computeKalmanGains+0x724>)
    19b6:	620a      	str	r2, [r1, #32]
    19b8:	624b      	str	r3, [r1, #36]	; 0x24

        kgain[2][1] = (pestp[2][0] * (-pestp[0][2]) + pestp[2][2] * (pestp[0][0] + altitude_variance))/det;
    19ba:	9800      	ldr	r0, [sp, #0]
    19bc:	9901      	ldr	r1, [sp, #4]
    19be:	9a04      	ldr	r2, [sp, #16]
    19c0:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    19c2:	47a8      	blx	r5
    19c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    19c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    19c8:	0006      	movs	r6, r0
    19ca:	000f      	movs	r7, r1
    19cc:	9802      	ldr	r0, [sp, #8]
    19ce:	9903      	ldr	r1, [sp, #12]
    19d0:	47a8      	blx	r5
    19d2:	0002      	movs	r2, r0
    19d4:	000b      	movs	r3, r1
    19d6:	0030      	movs	r0, r6
    19d8:	0039      	movs	r1, r7
    19da:	47a0      	blx	r4
    19dc:	9a06      	ldr	r2, [sp, #24]
    19de:	9b07      	ldr	r3, [sp, #28]
    19e0:	4e48      	ldr	r6, [pc, #288]	; (1b04 <computeKalmanGains+0x720>)
    19e2:	47b0      	blx	r6
    19e4:	9036      	str	r0, [sp, #216]	; 0xd8
    19e6:	9137      	str	r1, [sp, #220]	; 0xdc
    19e8:	9a36      	ldr	r2, [sp, #216]	; 0xd8
    19ea:	9b37      	ldr	r3, [sp, #220]	; 0xdc
    19ec:	4946      	ldr	r1, [pc, #280]	; (1b08 <computeKalmanGains+0x724>)

        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
    19ee:	4e44      	ldr	r6, [pc, #272]	; (1b00 <computeKalmanGains+0x71c>)

        kgain[1][1] = (pestp[1][0] * (-pestp[0][2]) + pestp[1][2] * (pestp[0][0] + altitude_variance))/det;

        kgain[2][0] = (pestp[2][0] * (pestp[2][2] + acceleration_variance) - pestp[2][2] * pestp[2][0])/det;

        kgain[2][1] = (pestp[2][0] * (-pestp[0][2]) + pestp[2][2] * (pestp[0][0] + altitude_variance))/det;
    19f0:	628a      	str	r2, [r1, #40]	; 0x28
    19f2:	62cb      	str	r3, [r1, #44]	; 0x2c

        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
    19f4:	9a34      	ldr	r2, [sp, #208]	; 0xd0
    19f6:	9b35      	ldr	r3, [sp, #212]	; 0xd4
    19f8:	2000      	movs	r0, #0
    19fa:	4944      	ldr	r1, [pc, #272]	; (1b0c <computeKalmanGains+0x728>)
    19fc:	47b0      	blx	r6
    19fe:	0002      	movs	r2, r0
    1a00:	000b      	movs	r3, r1
    1a02:	900c      	str	r0, [sp, #48]	; 0x30
    1a04:	910d      	str	r1, [sp, #52]	; 0x34
    1a06:	9808      	ldr	r0, [sp, #32]
    1a08:	9909      	ldr	r1, [sp, #36]	; 0x24
    1a0a:	47a8      	blx	r5
    1a0c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    1a0e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1a10:	0006      	movs	r6, r0
    1a12:	000f      	movs	r7, r1
    1a14:	9800      	ldr	r0, [sp, #0]
    1a16:	9901      	ldr	r1, [sp, #4]
    1a18:	47a8      	blx	r5
    1a1a:	0002      	movs	r2, r0
    1a1c:	000b      	movs	r3, r1
    1a1e:	0030      	movs	r0, r6
    1a20:	0039      	movs	r1, r7
    1a22:	4e37      	ldr	r6, [pc, #220]	; (1b00 <computeKalmanGains+0x71c>)
    1a24:	47b0      	blx	r6
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
    1a26:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1a28:	9b0d      	ldr	r3, [sp, #52]	; 0x34

        kgain[2][0] = (pestp[2][0] * (pestp[2][2] + acceleration_variance) - pestp[2][2] * pestp[2][0])/det;

        kgain[2][1] = (pestp[2][0] * (-pestp[0][2]) + pestp[2][2] * (pestp[0][0] + altitude_variance))/det;

        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
    1a2a:	9006      	str	r0, [sp, #24]
    1a2c:	9107      	str	r1, [sp, #28]
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
    1a2e:	9830      	ldr	r0, [sp, #192]	; 0xc0
    1a30:	9931      	ldr	r1, [sp, #196]	; 0xc4
    1a32:	47a8      	blx	r5
    1a34:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    1a36:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1a38:	0006      	movs	r6, r0
    1a3a:	000f      	movs	r7, r1
    1a3c:	9810      	ldr	r0, [sp, #64]	; 0x40
    1a3e:	9911      	ldr	r1, [sp, #68]	; 0x44
    1a40:	47a8      	blx	r5
    1a42:	0002      	movs	r2, r0
    1a44:	000b      	movs	r3, r1
    1a46:	0030      	movs	r0, r6
    1a48:	0039      	movs	r1, r7
    1a4a:	4e2d      	ldr	r6, [pc, #180]	; (1b00 <computeKalmanGains+0x71c>)
    1a4c:	47b0      	blx	r6
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
    1a4e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1a50:	9b0d      	ldr	r3, [sp, #52]	; 0x34
        kgain[2][0] = (pestp[2][0] * (pestp[2][2] + acceleration_variance) - pestp[2][2] * pestp[2][0])/det;

        kgain[2][1] = (pestp[2][0] * (-pestp[0][2]) + pestp[2][2] * (pestp[0][0] + altitude_variance))/det;

        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
    1a52:	900a      	str	r0, [sp, #40]	; 0x28
    1a54:	910b      	str	r1, [sp, #44]	; 0x2c
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
    1a56:	9804      	ldr	r0, [sp, #16]
    1a58:	9916      	ldr	r1, [sp, #88]	; 0x58
    1a5a:	47a8      	blx	r5
    1a5c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    1a5e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1a60:	0006      	movs	r6, r0
    1a62:	000f      	movs	r7, r1
    1a64:	9802      	ldr	r0, [sp, #8]
    1a66:	9903      	ldr	r1, [sp, #12]
    1a68:	47a8      	blx	r5
    1a6a:	0002      	movs	r2, r0
    1a6c:	000b      	movs	r3, r1
    1a6e:	0030      	movs	r0, r6
    1a70:	0039      	movs	r1, r7
    1a72:	4e23      	ldr	r6, [pc, #140]	; (1b00 <computeKalmanGains+0x71c>)
    1a74:	47b0      	blx	r6
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
    1a76:	2280      	movs	r2, #128	; 0x80
    1a78:	0612      	lsls	r2, r2, #24
    1a7a:	4694      	mov	ip, r2
    1a7c:	9b39      	ldr	r3, [sp, #228]	; 0xe4
    1a7e:	9a18      	ldr	r2, [sp, #96]	; 0x60
    1a80:	4463      	add	r3, ip
    1a82:	932e      	str	r3, [sp, #184]	; 0xb8
    1a84:	9b2e      	ldr	r3, [sp, #184]	; 0xb8

        kgain[2][1] = (pestp[2][0] * (-pestp[0][2]) + pestp[2][2] * (pestp[0][0] + altitude_variance))/det;

        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
    1a86:	900c      	str	r0, [sp, #48]	; 0x30
    1a88:	910d      	str	r1, [sp, #52]	; 0x34
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
    1a8a:	9808      	ldr	r0, [sp, #32]
    1a8c:	9909      	ldr	r1, [sp, #36]	; 0x24
    1a8e:	47a8      	blx	r5
    1a90:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
    1a92:	9b2b      	ldr	r3, [sp, #172]	; 0xac
    1a94:	47a0      	blx	r4
    1a96:	9a12      	ldr	r2, [sp, #72]	; 0x48
    1a98:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    1a9a:	0006      	movs	r6, r0
    1a9c:	000f      	movs	r7, r1
    1a9e:	9800      	ldr	r0, [sp, #0]
    1aa0:	9901      	ldr	r1, [sp, #4]
    1aa2:	47a8      	blx	r5
    1aa4:	0002      	movs	r2, r0
    1aa6:	000b      	movs	r3, r1
    1aa8:	0030      	movs	r0, r6
    1aaa:	0039      	movs	r1, r7
    1aac:	4e14      	ldr	r6, [pc, #80]	; (1b00 <computeKalmanGains+0x71c>)
    1aae:	47b0      	blx	r6
        pest[1][1] = pestp[0][1] * (-kgain[1][0]) + pestp[1][1] - kgain[1][1]*pestp[2][1];
    1ab0:	9a32      	ldr	r2, [sp, #200]	; 0xc8
    1ab2:	9b33      	ldr	r3, [sp, #204]	; 0xcc
        kgain[2][1] = (pestp[2][0] * (-pestp[0][2]) + pestp[2][2] * (pestp[0][0] + altitude_variance))/det;

        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
    1ab4:	9008      	str	r0, [sp, #32]
    1ab6:	9109      	str	r1, [sp, #36]	; 0x24
        pest[1][1] = pestp[0][1] * (-kgain[1][0]) + pestp[1][1] - kgain[1][1]*pestp[2][1];
    1ab8:	9826      	ldr	r0, [sp, #152]	; 0x98
    1aba:	9927      	ldr	r1, [sp, #156]	; 0x9c
    1abc:	47a0      	blx	r4
    1abe:	4a0c      	ldr	r2, [pc, #48]	; (1af0 <computeKalmanGains+0x70c>)
    1ac0:	0006      	movs	r6, r0
    1ac2:	000f      	movs	r7, r1
    1ac4:	9828      	ldr	r0, [sp, #160]	; 0xa0
    1ac6:	9929      	ldr	r1, [sp, #164]	; 0xa4
    1ac8:	4b0a      	ldr	r3, [pc, #40]	; (1af4 <computeKalmanGains+0x710>)
    1aca:	47a8      	blx	r5
    1acc:	0002      	movs	r2, r0
    1ace:	000b      	movs	r3, r1
    1ad0:	0030      	movs	r0, r6
    1ad2:	0039      	movs	r1, r7
    1ad4:	47a0      	blx	r4
    1ad6:	9a18      	ldr	r2, [sp, #96]	; 0x60
    1ad8:	0006      	movs	r6, r0
    1ada:	000f      	movs	r7, r1
    1adc:	9830      	ldr	r0, [sp, #192]	; 0xc0
    1ade:	9931      	ldr	r1, [sp, #196]	; 0xc4
    1ae0:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    1ae2:	47a8      	blx	r5
    1ae4:	0002      	movs	r2, r0
    1ae6:	000b      	movs	r3, r1
    1ae8:	0030      	movs	r0, r6
    1aea:	0039      	movs	r1, r7
    1aec:	47a0      	blx	r4
    1aee:	e00f      	b.n	1b10 <computeKalmanGains+0x72c>
    1af0:	47ae147b 	.word	0x47ae147b
    1af4:	3f747ae1 	.word	0x3f747ae1
    1af8:	eb1c432d 	.word	0xeb1c432d
    1afc:	3eea36e2 	.word	0x3eea36e2
    1b00:	00005541 	.word	0x00005541
    1b04:	00004805 	.word	0x00004805
    1b08:	20000650 	.word	0x20000650
    1b0c:	3ff00000 	.word	0x3ff00000
    1b10:	9a12      	ldr	r2, [sp, #72]	; 0x48
    1b12:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    1b14:	0006      	movs	r6, r0
    1b16:	000f      	movs	r7, r1
    1b18:	9810      	ldr	r0, [sp, #64]	; 0x40
    1b1a:	9911      	ldr	r1, [sp, #68]	; 0x44
    1b1c:	47a8      	blx	r5
    1b1e:	0002      	movs	r2, r0
    1b20:	000b      	movs	r3, r1
    1b22:	0030      	movs	r0, r6
    1b24:	0039      	movs	r1, r7
    1b26:	4e50      	ldr	r6, [pc, #320]	; (1c68 <computeKalmanGains+0x884>)
    1b28:	47b0      	blx	r6
        pest[1][2] = pestp[0][2] * (-kgain[1][0]) + pestp[1][2] - kgain[1][1]*pestp[2][2];
    1b2a:	9a18      	ldr	r2, [sp, #96]	; 0x60

        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
        pest[1][1] = pestp[0][1] * (-kgain[1][0]) + pestp[1][1] - kgain[1][1]*pestp[2][1];
    1b2c:	900e      	str	r0, [sp, #56]	; 0x38
    1b2e:	910f      	str	r1, [sp, #60]	; 0x3c
        pest[1][2] = pestp[0][2] * (-kgain[1][0]) + pestp[1][2] - kgain[1][1]*pestp[2][2];
    1b30:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    1b32:	9804      	ldr	r0, [sp, #16]
    1b34:	9916      	ldr	r1, [sp, #88]	; 0x58
    1b36:	47a8      	blx	r5
    1b38:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
    1b3a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    1b3c:	47a0      	blx	r4
    1b3e:	9a12      	ldr	r2, [sp, #72]	; 0x48
    1b40:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    1b42:	0006      	movs	r6, r0
    1b44:	000f      	movs	r7, r1
    1b46:	9802      	ldr	r0, [sp, #8]
    1b48:	9903      	ldr	r1, [sp, #12]
    1b4a:	47a8      	blx	r5
    1b4c:	4c46      	ldr	r4, [pc, #280]	; (1c68 <computeKalmanGains+0x884>)
    1b4e:	0002      	movs	r2, r0
    1b50:	000b      	movs	r3, r1
    1b52:	0030      	movs	r0, r6
    1b54:	0039      	movs	r1, r7
    1b56:	47a0      	blx	r4
        pest[2][0] = (1.0 - kgain[2][1]) * pestp[2][0] - kgain[2][0] * pestp[2][0];
    1b58:	9a36      	ldr	r2, [sp, #216]	; 0xd8
    1b5a:	9b37      	ldr	r3, [sp, #220]	; 0xdc
        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
        pest[1][1] = pestp[0][1] * (-kgain[1][0]) + pestp[1][1] - kgain[1][1]*pestp[2][1];
        pest[1][2] = pestp[0][2] * (-kgain[1][0]) + pestp[1][2] - kgain[1][1]*pestp[2][2];
    1b5c:	9004      	str	r0, [sp, #16]
    1b5e:	9105      	str	r1, [sp, #20]
        pest[2][0] = (1.0 - kgain[2][1]) * pestp[2][0] - kgain[2][0] * pestp[2][0];
    1b60:	2000      	movs	r0, #0
    1b62:	4942      	ldr	r1, [pc, #264]	; (1c6c <computeKalmanGains+0x888>)
    1b64:	47a0      	blx	r4
    1b66:	0002      	movs	r2, r0
    1b68:	000b      	movs	r3, r1
    1b6a:	9012      	str	r0, [sp, #72]	; 0x48
    1b6c:	9113      	str	r1, [sp, #76]	; 0x4c
    1b6e:	9800      	ldr	r0, [sp, #0]
    1b70:	9901      	ldr	r1, [sp, #4]
    1b72:	47a8      	blx	r5
    1b74:	9a14      	ldr	r2, [sp, #80]	; 0x50
    1b76:	9b15      	ldr	r3, [sp, #84]	; 0x54
    1b78:	0006      	movs	r6, r0
    1b7a:	000f      	movs	r7, r1
    1b7c:	9800      	ldr	r0, [sp, #0]
    1b7e:	9901      	ldr	r1, [sp, #4]
    1b80:	47a8      	blx	r5
    1b82:	0002      	movs	r2, r0
    1b84:	000b      	movs	r3, r1
    1b86:	0030      	movs	r0, r6
    1b88:	0039      	movs	r1, r7
    1b8a:	47a0      	blx	r4
    1b8c:	9000      	str	r0, [sp, #0]
    1b8e:	9101      	str	r1, [sp, #4]
        pest[2][1] = (1.0 - kgain[2][1]) * pestp[2][1] - kgain[2][0] * pestp[2][1];
    1b90:	9a12      	ldr	r2, [sp, #72]	; 0x48
    1b92:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    1b94:	9810      	ldr	r0, [sp, #64]	; 0x40
    1b96:	9911      	ldr	r1, [sp, #68]	; 0x44
    1b98:	47a8      	blx	r5
    1b9a:	9a14      	ldr	r2, [sp, #80]	; 0x50
    1b9c:	9b15      	ldr	r3, [sp, #84]	; 0x54
    1b9e:	0006      	movs	r6, r0
    1ba0:	000f      	movs	r7, r1
    1ba2:	9810      	ldr	r0, [sp, #64]	; 0x40
    1ba4:	9911      	ldr	r1, [sp, #68]	; 0x44
    1ba6:	47a8      	blx	r5
    1ba8:	0002      	movs	r2, r0
    1baa:	000b      	movs	r3, r1
    1bac:	0030      	movs	r0, r6
    1bae:	0039      	movs	r1, r7
    1bb0:	47a0      	blx	r4
        pest[2][2] = (1.0 - kgain[2][1]) * pestp[2][2] - kgain[2][0] * pestp[2][2];
    1bb2:	9a12      	ldr	r2, [sp, #72]	; 0x48
    1bb4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
        pest[1][1] = pestp[0][1] * (-kgain[1][0]) + pestp[1][1] - kgain[1][1]*pestp[2][1];
        pest[1][2] = pestp[0][2] * (-kgain[1][0]) + pestp[1][2] - kgain[1][1]*pestp[2][2];
        pest[2][0] = (1.0 - kgain[2][1]) * pestp[2][0] - kgain[2][0] * pestp[2][0];
        pest[2][1] = (1.0 - kgain[2][1]) * pestp[2][1] - kgain[2][0] * pestp[2][1];
    1bb6:	9010      	str	r0, [sp, #64]	; 0x40
    1bb8:	9111      	str	r1, [sp, #68]	; 0x44
        pest[2][2] = (1.0 - kgain[2][1]) * pestp[2][2] - kgain[2][0] * pestp[2][2];
    1bba:	9802      	ldr	r0, [sp, #8]
    1bbc:	9903      	ldr	r1, [sp, #12]
    1bbe:	47a8      	blx	r5
    1bc0:	9a14      	ldr	r2, [sp, #80]	; 0x50
    1bc2:	9b15      	ldr	r3, [sp, #84]	; 0x54
    1bc4:	0006      	movs	r6, r0
    1bc6:	000f      	movs	r7, r1
    1bc8:	9802      	ldr	r0, [sp, #8]
    1bca:	9903      	ldr	r1, [sp, #12]
    1bcc:	47a8      	blx	r5
    1bce:	000b      	movs	r3, r1
    1bd0:	0002      	movs	r2, r0
    1bd2:	0039      	movs	r1, r7
    1bd4:	0030      	movs	r0, r6
    1bd6:	47a0      	blx	r4
         * time through the mill. Because I have noticed very early convergance
         * in a few cases (< 20 iterations) I am delaying this for at least
         * 100 iterations.
         */
        notdone = 0;
        k++;
    1bd8:	2400      	movs	r4, #0
    1bda:	9b38      	ldr	r3, [sp, #224]	; 0xe0
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
        pest[1][1] = pestp[0][1] * (-kgain[1][0]) + pestp[1][1] - kgain[1][1]*pestp[2][1];
        pest[1][2] = pestp[0][2] * (-kgain[1][0]) + pestp[1][2] - kgain[1][1]*pestp[2][2];
        pest[2][0] = (1.0 - kgain[2][1]) * pestp[2][0] - kgain[2][0] * pestp[2][0];
        pest[2][1] = (1.0 - kgain[2][1]) * pestp[2][1] - kgain[2][0] * pestp[2][1];
        pest[2][2] = (1.0 - kgain[2][1]) * pestp[2][2] - kgain[2][0] * pestp[2][2];
    1bdc:	9002      	str	r0, [sp, #8]
    1bde:	9103      	str	r1, [sp, #12]
         * time through the mill. Because I have noticed very early convergance
         * in a few cases (< 20 iterations) I am delaying this for at least
         * 100 iterations.
         */
        notdone = 0;
        k++;
    1be0:	3301      	adds	r3, #1
    1be2:	9338      	str	r3, [sp, #224]	; 0xe0
        for( i = 0; i <= 2; i++)
            for( j = 0; j <= 1; j++) {
                if( (kgain[i][j] - lastkgain[i][j])/lastkgain[i][j] > 0.00001)
    1be4:	4b22      	ldr	r3, [pc, #136]	; (1c70 <computeKalmanGains+0x88c>)
        /* Check for convergance. Criteria is less than .001% change from last
         * time through the mill. Because I have noticed very early convergance
         * in a few cases (< 20 iterations) I am delaying this for at least
         * 100 iterations.
         */
        notdone = 0;
    1be6:	9414      	str	r4, [sp, #80]	; 0x50
        k++;
        for( i = 0; i <= 2; i++)
            for( j = 0; j <= 1; j++) {
                if( (kgain[i][j] - lastkgain[i][j])/lastkgain[i][j] > 0.00001)
    1be8:	9326      	str	r3, [sp, #152]	; 0x98
    1bea:	4b1f      	ldr	r3, [pc, #124]	; (1c68 <computeKalmanGains+0x884>)
    1bec:	9328      	str	r3, [sp, #160]	; 0xa0
    1bee:	ab40      	add	r3, sp, #256	; 0x100
    1bf0:	18e5      	adds	r5, r4, r3

        pestp[2][2] = pestp[2][2] + model_variance;
        /*
          Calculate Kalman Gain
        */
        det = (pestp[0][0]+altitude_variance)*(pestp[2][2] + acceleration_variance) - pestp[2][0] * pestp[0][2];
    1bf2:	2300      	movs	r3, #0
    1bf4:	9516      	str	r5, [sp, #88]	; 0x58
    1bf6:	9312      	str	r3, [sp, #72]	; 0x48
         */
        notdone = 0;
        k++;
        for( i = 0; i <= 2; i++)
            for( j = 0; j <= 1; j++) {
                if( (kgain[i][j] - lastkgain[i][j])/lastkgain[i][j] > 0.00001)
    1bf8:	9b12      	ldr	r3, [sp, #72]	; 0x48
    1bfa:	9a26      	ldr	r2, [sp, #152]	; 0x98
    1bfc:	18e3      	adds	r3, r4, r3
    1bfe:	189b      	adds	r3, r3, r2
    1c00:	681a      	ldr	r2, [r3, #0]
    1c02:	685b      	ldr	r3, [r3, #4]
    1c04:	9218      	str	r2, [sp, #96]	; 0x60
    1c06:	9319      	str	r3, [sp, #100]	; 0x64
    1c08:	9818      	ldr	r0, [sp, #96]	; 0x60
    1c0a:	9919      	ldr	r1, [sp, #100]	; 0x64
    1c0c:	9b16      	ldr	r3, [sp, #88]	; 0x58
    1c0e:	9d28      	ldr	r5, [sp, #160]	; 0xa0
    1c10:	681e      	ldr	r6, [r3, #0]
    1c12:	685f      	ldr	r7, [r3, #4]
    1c14:	0032      	movs	r2, r6
    1c16:	003b      	movs	r3, r7
    1c18:	47a8      	blx	r5
    1c1a:	0032      	movs	r2, r6
    1c1c:	003b      	movs	r3, r7
    1c1e:	4d15      	ldr	r5, [pc, #84]	; (1c74 <computeKalmanGains+0x890>)
    1c20:	47a8      	blx	r5
    1c22:	4b15      	ldr	r3, [pc, #84]	; (1c78 <computeKalmanGains+0x894>)
    1c24:	4a15      	ldr	r2, [pc, #84]	; (1c7c <computeKalmanGains+0x898>)
    1c26:	4e16      	ldr	r6, [pc, #88]	; (1c80 <computeKalmanGains+0x89c>)
    1c28:	47b0      	blx	r6
                    notdone++;
    1c2a:	1e43      	subs	r3, r0, #1
    1c2c:	4198      	sbcs	r0, r3
    1c2e:	9b14      	ldr	r3, [sp, #80]	; 0x50
                lastkgain[i][j] = kgain[i][j];
    1c30:	9916      	ldr	r1, [sp, #88]	; 0x58
        notdone = 0;
        k++;
        for( i = 0; i <= 2; i++)
            for( j = 0; j <= 1; j++) {
                if( (kgain[i][j] - lastkgain[i][j])/lastkgain[i][j] > 0.00001)
                    notdone++;
    1c32:	181b      	adds	r3, r3, r0
    1c34:	9314      	str	r3, [sp, #80]	; 0x50
                lastkgain[i][j] = kgain[i][j];
    1c36:	9a18      	ldr	r2, [sp, #96]	; 0x60
    1c38:	9b19      	ldr	r3, [sp, #100]	; 0x64
    1c3a:	c10c      	stmia	r1!, {r2, r3}
    1c3c:	9b12      	ldr	r3, [sp, #72]	; 0x48
    1c3e:	9116      	str	r1, [sp, #88]	; 0x58
    1c40:	3308      	adds	r3, #8
    1c42:	9312      	str	r3, [sp, #72]	; 0x48
         * 100 iterations.
         */
        notdone = 0;
        k++;
        for( i = 0; i <= 2; i++)
            for( j = 0; j <= 1; j++) {
    1c44:	2b10      	cmp	r3, #16
    1c46:	d1d7      	bne.n	1bf8 <computeKalmanGains+0x814>
    1c48:	3410      	adds	r4, #16
         * in a few cases (< 20 iterations) I am delaying this for at least
         * 100 iterations.
         */
        notdone = 0;
        k++;
        for( i = 0; i <= 2; i++)
    1c4a:	2c30      	cmp	r4, #48	; 0x30
    1c4c:	d1cf      	bne.n	1bee <computeKalmanGains+0x80a>
            for( j = 0; j <= 1; j++) {
                if( (kgain[i][j] - lastkgain[i][j])/lastkgain[i][j] > 0.00001)
                    notdone++;
                lastkgain[i][j] = kgain[i][j];
            }
        if( notdone || k < 100)
    1c4e:	9b14      	ldr	r3, [sp, #80]	; 0x50
    1c50:	2b00      	cmp	r3, #0
    1c52:	d001      	beq.n	1c58 <computeKalmanGains+0x874>
    1c54:	f7ff fc2c 	bl	14b0 <computeKalmanGains+0xcc>
    1c58:	9b38      	ldr	r3, [sp, #224]	; 0xe0
    1c5a:	2b63      	cmp	r3, #99	; 0x63
    1c5c:	dc01      	bgt.n	1c62 <computeKalmanGains+0x87e>
    1c5e:	f7ff fc27 	bl	14b0 <computeKalmanGains+0xcc>
            continue;
        else
            break;
    }
}
    1c62:	b04d      	add	sp, #308	; 0x134
    1c64:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1c66:	46c0      	nop			; (mov r8, r8)
    1c68:	00005541 	.word	0x00005541
    1c6c:	3ff00000 	.word	0x3ff00000
    1c70:	20000650 	.word	0x20000650
    1c74:	00004805 	.word	0x00004805
    1c78:	3ee4f8b5 	.word	0x3ee4f8b5
    1c7c:	88e368f1 	.word	0x88e368f1
    1c80:	00003ab9 	.word	0x00003ab9

00001c84 <computeKalmanStates>:

void computeKalmanStates() {
    1c84:	b5f0      	push	{r4, r5, r6, r7, lr}

    double alt_inovation, accel_inovation;


    double acceleration = (sample.accelZ - offsets.gravityOffset) * 32.17417;
    1c86:	4d7e      	ldr	r5, [pc, #504]	; (1e80 <computeKalmanStates+0x1fc>)
        else
            break;
    }
}

void computeKalmanStates() {
    1c88:	b08f      	sub	sp, #60	; 0x3c

    double alt_inovation, accel_inovation;


    double acceleration = (sample.accelZ - offsets.gravityOffset) * 32.17417;
    1c8a:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    1c8c:	4b7d      	ldr	r3, [pc, #500]	; (1e84 <computeKalmanStates+0x200>)
    1c8e:	4798      	blx	r3
    1c90:	4b7d      	ldr	r3, [pc, #500]	; (1e88 <computeKalmanStates+0x204>)
    1c92:	4c7e      	ldr	r4, [pc, #504]	; (1e8c <computeKalmanStates+0x208>)
    1c94:	689a      	ldr	r2, [r3, #8]
    1c96:	68db      	ldr	r3, [r3, #12]
    1c98:	47a0      	blx	r4
    1c9a:	4a7d      	ldr	r2, [pc, #500]	; (1e90 <computeKalmanStates+0x20c>)
    1c9c:	4b7d      	ldr	r3, [pc, #500]	; (1e94 <computeKalmanStates+0x210>)
    1c9e:	4e7e      	ldr	r6, [pc, #504]	; (1e98 <computeKalmanStates+0x214>)
    1ca0:	47b0      	blx	r6
    double pressure = sample.altitudefeet;
    1ca2:	6c2e      	ldr	r6, [r5, #64]	; 0x40
    1ca4:	6c6f      	ldr	r7, [r5, #68]	; 0x44

    if (altitude == 0) {
    1ca6:	4d7d      	ldr	r5, [pc, #500]	; (1e9c <computeKalmanStates+0x218>)
void computeKalmanStates() {

    double alt_inovation, accel_inovation;


    double acceleration = (sample.accelZ - offsets.gravityOffset) * 32.17417;
    1ca8:	9000      	str	r0, [sp, #0]
    1caa:	9101      	str	r1, [sp, #4]
    double pressure = sample.altitudefeet;

    if (altitude == 0) {
    1cac:	6828      	ldr	r0, [r5, #0]
    1cae:	6869      	ldr	r1, [r5, #4]
    1cb0:	4c7b      	ldr	r4, [pc, #492]	; (1ea0 <computeKalmanStates+0x21c>)
    1cb2:	2200      	movs	r2, #0
    1cb4:	2300      	movs	r3, #0
    1cb6:	47a0      	blx	r4
    1cb8:	4c74      	ldr	r4, [pc, #464]	; (1e8c <computeKalmanStates+0x208>)
    1cba:	2800      	cmp	r0, #0
    1cbc:	d001      	beq.n	1cc2 <computeKalmanStates+0x3e>
        altitude = pressure;
    1cbe:	602e      	str	r6, [r5, #0]
    1cc0:	606f      	str	r7, [r5, #4]
    }

    /* Compute the innovations */
    alt_inovation = pressure - estp[0];
    1cc2:	4b78      	ldr	r3, [pc, #480]	; (1ea4 <computeKalmanStates+0x220>)
    1cc4:	0030      	movs	r0, r6
    1cc6:	681a      	ldr	r2, [r3, #0]
    1cc8:	685b      	ldr	r3, [r3, #4]
    1cca:	0039      	movs	r1, r7
    1ccc:	47a0      	blx	r4
    accel_inovation = acceleration - estp[2];
    1cce:	4b75      	ldr	r3, [pc, #468]	; (1ea4 <computeKalmanStates+0x220>)
    if (altitude == 0) {
        altitude = pressure;
    }

    /* Compute the innovations */
    alt_inovation = pressure - estp[0];
    1cd0:	9006      	str	r0, [sp, #24]
    1cd2:	9107      	str	r1, [sp, #28]
    accel_inovation = acceleration - estp[2];
    1cd4:	691a      	ldr	r2, [r3, #16]
    1cd6:	695b      	ldr	r3, [r3, #20]
    1cd8:	9800      	ldr	r0, [sp, #0]
    1cda:	9901      	ldr	r1, [sp, #4]
    1cdc:	47a0      	blx	r4


    /* Propagate state */
    estp[0] = phi[0][0] * altitude + phi[0][1] *velocity + phi[0][2] * accel;
    1cde:	4b6f      	ldr	r3, [pc, #444]	; (1e9c <computeKalmanStates+0x218>)
    1ce0:	4d6d      	ldr	r5, [pc, #436]	; (1e98 <computeKalmanStates+0x214>)
    1ce2:	685c      	ldr	r4, [r3, #4]
    1ce4:	681b      	ldr	r3, [r3, #0]
    1ce6:	9300      	str	r3, [sp, #0]
    1ce8:	9401      	str	r4, [sp, #4]
    1cea:	4b6f      	ldr	r3, [pc, #444]	; (1ea8 <computeKalmanStates+0x224>)
        altitude = pressure;
    }

    /* Compute the innovations */
    alt_inovation = pressure - estp[0];
    accel_inovation = acceleration - estp[2];
    1cec:	9008      	str	r0, [sp, #32]
    1cee:	9109      	str	r1, [sp, #36]	; 0x24


    /* Propagate state */
    estp[0] = phi[0][0] * altitude + phi[0][1] *velocity + phi[0][2] * accel;
    1cf0:	685c      	ldr	r4, [r3, #4]
    1cf2:	681b      	ldr	r3, [r3, #0]
    1cf4:	9800      	ldr	r0, [sp, #0]
    1cf6:	9901      	ldr	r1, [sp, #4]
    1cf8:	9302      	str	r3, [sp, #8]
    1cfa:	9403      	str	r4, [sp, #12]
    1cfc:	4b6b      	ldr	r3, [pc, #428]	; (1eac <computeKalmanStates+0x228>)
    1cfe:	685c      	ldr	r4, [r3, #4]
    1d00:	681b      	ldr	r3, [r3, #0]
    1d02:	9304      	str	r3, [sp, #16]
    1d04:	9405      	str	r4, [sp, #20]
    1d06:	4c6a      	ldr	r4, [pc, #424]	; (1eb0 <computeKalmanStates+0x22c>)
    1d08:	6822      	ldr	r2, [r4, #0]
    1d0a:	6863      	ldr	r3, [r4, #4]
    1d0c:	47a8      	blx	r5
    1d0e:	68a2      	ldr	r2, [r4, #8]
    1d10:	68e3      	ldr	r3, [r4, #12]
    1d12:	0006      	movs	r6, r0
    1d14:	000f      	movs	r7, r1
    1d16:	9802      	ldr	r0, [sp, #8]
    1d18:	9903      	ldr	r1, [sp, #12]
    1d1a:	47a8      	blx	r5
    1d1c:	0002      	movs	r2, r0
    1d1e:	000b      	movs	r3, r1
    1d20:	0030      	movs	r0, r6
    1d22:	0039      	movs	r1, r7
    1d24:	4e63      	ldr	r6, [pc, #396]	; (1eb4 <computeKalmanStates+0x230>)
    1d26:	47b0      	blx	r6
    1d28:	6922      	ldr	r2, [r4, #16]
    1d2a:	6963      	ldr	r3, [r4, #20]
    1d2c:	0006      	movs	r6, r0
    1d2e:	000f      	movs	r7, r1
    1d30:	9804      	ldr	r0, [sp, #16]
    1d32:	9905      	ldr	r1, [sp, #20]
    1d34:	47a8      	blx	r5
    1d36:	0002      	movs	r2, r0
    1d38:	000b      	movs	r3, r1
    1d3a:	0030      	movs	r0, r6
    1d3c:	0039      	movs	r1, r7
    1d3e:	4e5d      	ldr	r6, [pc, #372]	; (1eb4 <computeKalmanStates+0x230>)
    1d40:	47b0      	blx	r6
    1d42:	900a      	str	r0, [sp, #40]	; 0x28
    1d44:	910b      	str	r1, [sp, #44]	; 0x2c
    1d46:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    1d48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1d4a:	4956      	ldr	r1, [pc, #344]	; (1ea4 <computeKalmanStates+0x220>)
    1d4c:	600a      	str	r2, [r1, #0]
    1d4e:	604b      	str	r3, [r1, #4]
    estp[1] = phi[1][0] * altitude + phi[1][1] * velocity + phi[1][2] * accel;
    1d50:	69a2      	ldr	r2, [r4, #24]
    1d52:	69e3      	ldr	r3, [r4, #28]
    1d54:	9800      	ldr	r0, [sp, #0]
    1d56:	9901      	ldr	r1, [sp, #4]
    1d58:	47a8      	blx	r5
    1d5a:	6a22      	ldr	r2, [r4, #32]
    1d5c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    1d5e:	0006      	movs	r6, r0
    1d60:	000f      	movs	r7, r1
    1d62:	9802      	ldr	r0, [sp, #8]
    1d64:	9903      	ldr	r1, [sp, #12]
    1d66:	47a8      	blx	r5
    1d68:	0002      	movs	r2, r0
    1d6a:	000b      	movs	r3, r1
    1d6c:	0030      	movs	r0, r6
    1d6e:	0039      	movs	r1, r7
    1d70:	4e50      	ldr	r6, [pc, #320]	; (1eb4 <computeKalmanStates+0x230>)
    1d72:	47b0      	blx	r6
    1d74:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    1d76:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    1d78:	0006      	movs	r6, r0
    1d7a:	000f      	movs	r7, r1
    1d7c:	9804      	ldr	r0, [sp, #16]
    1d7e:	9905      	ldr	r1, [sp, #20]
    1d80:	47a8      	blx	r5
    1d82:	0002      	movs	r2, r0
    1d84:	000b      	movs	r3, r1
    1d86:	0030      	movs	r0, r6
    1d88:	0039      	movs	r1, r7
    1d8a:	4e4a      	ldr	r6, [pc, #296]	; (1eb4 <computeKalmanStates+0x230>)
    1d8c:	47b0      	blx	r6
    1d8e:	900c      	str	r0, [sp, #48]	; 0x30
    1d90:	910d      	str	r1, [sp, #52]	; 0x34
    1d92:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1d94:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1d96:	4943      	ldr	r1, [pc, #268]	; (1ea4 <computeKalmanStates+0x220>)
    1d98:	608a      	str	r2, [r1, #8]
    1d9a:	60cb      	str	r3, [r1, #12]
    estp[2] = phi[2][0] * altitude + phi[2][1] * velocity + phi[2][2] * accel;
    1d9c:	6b22      	ldr	r2, [r4, #48]	; 0x30
    1d9e:	6b63      	ldr	r3, [r4, #52]	; 0x34
    1da0:	9800      	ldr	r0, [sp, #0]
    1da2:	9901      	ldr	r1, [sp, #4]
    1da4:	47a8      	blx	r5
    1da6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    1da8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    1daa:	0006      	movs	r6, r0
    1dac:	000f      	movs	r7, r1
    1dae:	9802      	ldr	r0, [sp, #8]
    1db0:	9903      	ldr	r1, [sp, #12]
    1db2:	47a8      	blx	r5
    1db4:	0002      	movs	r2, r0
    1db6:	000b      	movs	r3, r1
    1db8:	0030      	movs	r0, r6
    1dba:	0039      	movs	r1, r7
    1dbc:	4e3d      	ldr	r6, [pc, #244]	; (1eb4 <computeKalmanStates+0x230>)
    1dbe:	47b0      	blx	r6
    1dc0:	6c22      	ldr	r2, [r4, #64]	; 0x40
    1dc2:	6c63      	ldr	r3, [r4, #68]	; 0x44
    1dc4:	0006      	movs	r6, r0
    1dc6:	000f      	movs	r7, r1
    1dc8:	9804      	ldr	r0, [sp, #16]
    1dca:	9905      	ldr	r1, [sp, #20]
    1dcc:	47a8      	blx	r5
    1dce:	4c39      	ldr	r4, [pc, #228]	; (1eb4 <computeKalmanStates+0x230>)
    1dd0:	0002      	movs	r2, r0
    1dd2:	000b      	movs	r3, r1
    1dd4:	0030      	movs	r0, r6
    1dd6:	0039      	movs	r1, r7
    1dd8:	47a0      	blx	r4
    1dda:	0003      	movs	r3, r0
    1ddc:	000c      	movs	r4, r1
    1dde:	4a31      	ldr	r2, [pc, #196]	; (1ea4 <computeKalmanStates+0x220>)
    1de0:	9000      	str	r0, [sp, #0]
    1de2:	9101      	str	r1, [sp, #4]
    1de4:	6113      	str	r3, [r2, #16]
    1de6:	6154      	str	r4, [r2, #20]

    /*
    Update state
    */
    altitude = estp[0] + kgain[0][0] * alt_inovation + kgain[0][1] * accel_inovation;
    1de8:	4c33      	ldr	r4, [pc, #204]	; (1eb8 <computeKalmanStates+0x234>)
    1dea:	6822      	ldr	r2, [r4, #0]
    1dec:	6863      	ldr	r3, [r4, #4]
    1dee:	9806      	ldr	r0, [sp, #24]
    1df0:	9907      	ldr	r1, [sp, #28]
    1df2:	47a8      	blx	r5
    1df4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    1df6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1df8:	4e2e      	ldr	r6, [pc, #184]	; (1eb4 <computeKalmanStates+0x230>)
    1dfa:	47b0      	blx	r6
    1dfc:	68a2      	ldr	r2, [r4, #8]
    1dfe:	68e3      	ldr	r3, [r4, #12]
    1e00:	0006      	movs	r6, r0
    1e02:	000f      	movs	r7, r1
    1e04:	9808      	ldr	r0, [sp, #32]
    1e06:	9909      	ldr	r1, [sp, #36]	; 0x24
    1e08:	47a8      	blx	r5
    1e0a:	0002      	movs	r2, r0
    1e0c:	000b      	movs	r3, r1
    1e0e:	0030      	movs	r0, r6
    1e10:	0039      	movs	r1, r7
    1e12:	4e28      	ldr	r6, [pc, #160]	; (1eb4 <computeKalmanStates+0x230>)
    1e14:	47b0      	blx	r6
    1e16:	4b21      	ldr	r3, [pc, #132]	; (1e9c <computeKalmanStates+0x218>)
    1e18:	6018      	str	r0, [r3, #0]
    1e1a:	6059      	str	r1, [r3, #4]
    velocity = estp[1] + kgain[1][0] * alt_inovation + kgain[1][1] * accel_inovation;
    1e1c:	6922      	ldr	r2, [r4, #16]
    1e1e:	6963      	ldr	r3, [r4, #20]
    1e20:	9806      	ldr	r0, [sp, #24]
    1e22:	9907      	ldr	r1, [sp, #28]
    1e24:	47a8      	blx	r5
    1e26:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1e28:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1e2a:	47b0      	blx	r6
    1e2c:	69a2      	ldr	r2, [r4, #24]
    1e2e:	69e3      	ldr	r3, [r4, #28]
    1e30:	0006      	movs	r6, r0
    1e32:	000f      	movs	r7, r1
    1e34:	9808      	ldr	r0, [sp, #32]
    1e36:	9909      	ldr	r1, [sp, #36]	; 0x24
    1e38:	47a8      	blx	r5
    1e3a:	0002      	movs	r2, r0
    1e3c:	000b      	movs	r3, r1
    1e3e:	0030      	movs	r0, r6
    1e40:	0039      	movs	r1, r7
    1e42:	4e1c      	ldr	r6, [pc, #112]	; (1eb4 <computeKalmanStates+0x230>)
    1e44:	47b0      	blx	r6
    1e46:	4b18      	ldr	r3, [pc, #96]	; (1ea8 <computeKalmanStates+0x224>)
    1e48:	6018      	str	r0, [r3, #0]
    1e4a:	6059      	str	r1, [r3, #4]
    accel =    estp[2] + kgain[2][0] * alt_inovation + kgain[2][1] * accel_inovation;
    1e4c:	6a22      	ldr	r2, [r4, #32]
    1e4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
    1e50:	9806      	ldr	r0, [sp, #24]
    1e52:	9907      	ldr	r1, [sp, #28]
    1e54:	47a8      	blx	r5
    1e56:	9a00      	ldr	r2, [sp, #0]
    1e58:	9b01      	ldr	r3, [sp, #4]
    1e5a:	47b0      	blx	r6
    1e5c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    1e5e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    1e60:	0006      	movs	r6, r0
    1e62:	000f      	movs	r7, r1
    1e64:	9808      	ldr	r0, [sp, #32]
    1e66:	9909      	ldr	r1, [sp, #36]	; 0x24
    1e68:	47a8      	blx	r5
    1e6a:	4c12      	ldr	r4, [pc, #72]	; (1eb4 <computeKalmanStates+0x230>)
    1e6c:	0002      	movs	r2, r0
    1e6e:	000b      	movs	r3, r1
    1e70:	0030      	movs	r0, r6
    1e72:	0039      	movs	r1, r7
    1e74:	47a0      	blx	r4
    1e76:	4b0d      	ldr	r3, [pc, #52]	; (1eac <computeKalmanStates+0x228>)
    1e78:	6018      	str	r0, [r3, #0]
    1e7a:	6059      	str	r1, [r3, #4]

}
    1e7c:	b00f      	add	sp, #60	; 0x3c
    1e7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1e80:	200007c8 	.word	0x200007c8
    1e84:	00005d89 	.word	0x00005d89
    1e88:	200004d8 	.word	0x200004d8
    1e8c:	00005541 	.word	0x00005541
    1e90:	33daf8df 	.word	0x33daf8df
    1e94:	4040164b 	.word	0x4040164b
    1e98:	0000504d 	.word	0x0000504d
    1e9c:	20000698 	.word	0x20000698
    1ea0:	00003a85 	.word	0x00003a85
    1ea4:	200006a0 	.word	0x200006a0
    1ea8:	20000690 	.word	0x20000690
    1eac:	20000688 	.word	0x20000688
    1eb0:	20000010 	.word	0x20000010
    1eb4:	000041ad 	.word	0x000041ad
    1eb8:	20000650 	.word	0x20000650

00001ebc <makePage>:
u8_t pageLocation;

bool pageReady;


void makePage(u8_t bytesToWrite, u8_t* data) {
    1ebc:	b5f0      	push	{r4, r5, r6, r7, lr}


    u8_t location = pageLocation;
    1ebe:	4a1f      	ldr	r2, [pc, #124]	; (1f3c <makePage+0x80>)
    1ec0:	7815      	ldrb	r5, [r2, #0]
    u8_t bytesWritten = 0;

    if ((location + bytesToWrite) > 0xFF) {
    1ec2:	1943      	adds	r3, r0, r5
    1ec4:	2bff      	cmp	r3, #255	; 0xff
    1ec6:	dc03      	bgt.n	1ed0 <makePage+0x14>
    1ec8:	2300      	movs	r3, #0
            pageLocation = dataByte + 1;
        }
        pageReady = true;

    } else {
        for (u16_t dataByte = 0; dataByte <= bytesToWrite; ++dataByte) {
    1eca:	b280      	uxth	r0, r0
            pageBuffer[(dataByte + location)] = data[dataByte];
    1ecc:	4c1c      	ldr	r4, [pc, #112]	; (1f40 <makePage+0x84>)
    1ece:	e029      	b.n	1f24 <makePage+0x68>
    1ed0:	2300      	movs	r3, #0
    1ed2:	4e1b      	ldr	r6, [pc, #108]	; (1f40 <makePage+0x84>)

    u8_t location = pageLocation;
    u8_t bytesWritten = 0;

    if ((location + bytesToWrite) > 0xFF) {
        for (u16_t dataByte = 0; (dataByte + location) <= 0xFF; ++dataByte) {
    1ed4:	195f      	adds	r7, r3, r5
    1ed6:	b2dc      	uxtb	r4, r3
    1ed8:	46b4      	mov	ip, r6
    1eda:	2fff      	cmp	r7, #255	; 0xff
    1edc:	dc04      	bgt.n	1ee8 <makePage+0x2c>
            pageBuffer[(dataByte + location)] = data[dataByte];
    1ede:	5ccc      	ldrb	r4, [r1, r3]

    u8_t location = pageLocation;
    u8_t bytesWritten = 0;

    if ((location + bytesToWrite) > 0xFF) {
        for (u16_t dataByte = 0; (dataByte + location) <= 0xFF; ++dataByte) {
    1ee0:	3301      	adds	r3, #1
            pageBuffer[(dataByte + location)] = data[dataByte];
    1ee2:	55f4      	strb	r4, [r6, r7]

    u8_t location = pageLocation;
    u8_t bytesWritten = 0;

    if ((location + bytesToWrite) > 0xFF) {
        for (u16_t dataByte = 0; (dataByte + location) <= 0xFF; ++dataByte) {
    1ee4:	b29b      	uxth	r3, r3
    1ee6:	e7f5      	b.n	1ed4 <makePage+0x18>
            pageBuffer[(dataByte + location)] = data[dataByte];
            bytesWritten++;
        }
        pageLocation = 0x00;
    1ee8:	2300      	movs	r3, #0
        for(u16_t i = 0; i <= 0xFF; ++i) {
            pageToWrite[i] = pageBuffer[i];
    1eea:	4f16      	ldr	r7, [pc, #88]	; (1f44 <makePage+0x88>)
    if ((location + bytesToWrite) > 0xFF) {
        for (u16_t dataByte = 0; (dataByte + location) <= 0xFF; ++dataByte) {
            pageBuffer[(dataByte + location)] = data[dataByte];
            bytesWritten++;
        }
        pageLocation = 0x00;
    1eec:	7013      	strb	r3, [r2, #0]
        for(u16_t i = 0; i <= 0xFF; ++i) {
            pageToWrite[i] = pageBuffer[i];
    1eee:	4665      	mov	r5, ip
    1ef0:	18ed      	adds	r5, r5, r3
    1ef2:	782e      	ldrb	r6, [r5, #0]
    1ef4:	54fe      	strb	r6, [r7, r3]
            pageBuffer[i] = 0;
    1ef6:	2600      	movs	r6, #0
    1ef8:	702e      	strb	r6, [r5, #0]
        for (u16_t dataByte = 0; (dataByte + location) <= 0xFF; ++dataByte) {
            pageBuffer[(dataByte + location)] = data[dataByte];
            bytesWritten++;
        }
        pageLocation = 0x00;
        for(u16_t i = 0; i <= 0xFF; ++i) {
    1efa:	2580      	movs	r5, #128	; 0x80
    1efc:	3301      	adds	r3, #1
    1efe:	006d      	lsls	r5, r5, #1
    1f00:	42ab      	cmp	r3, r5
    1f02:	d1f4      	bne.n	1eee <makePage+0x32>
    1f04:	2300      	movs	r3, #0
    1f06:	1c5d      	adds	r5, r3, #1
            pageToWrite[i] = pageBuffer[i];
            pageBuffer[i] = 0;
        }
        for (u16_t dataByte = 0; bytesWritten < bytesToWrite; ++dataByte) {
    1f08:	4284      	cmp	r4, r0
    1f0a:	d207      	bcs.n	1f1c <makePage+0x60>
            pageBuffer[dataByte] = data[bytesWritten];
    1f0c:	4667      	mov	r7, ip
    1f0e:	5d0e      	ldrb	r6, [r1, r4]
            bytesWritten++;
    1f10:	3401      	adds	r4, #1
        for(u16_t i = 0; i <= 0xFF; ++i) {
            pageToWrite[i] = pageBuffer[i];
            pageBuffer[i] = 0;
        }
        for (u16_t dataByte = 0; bytesWritten < bytesToWrite; ++dataByte) {
            pageBuffer[dataByte] = data[bytesWritten];
    1f12:	54fe      	strb	r6, [r7, r3]
            bytesWritten++;
    1f14:	b2e4      	uxtb	r4, r4
            pageLocation = dataByte + 1;
    1f16:	7015      	strb	r5, [r2, #0]
    1f18:	002b      	movs	r3, r5
    1f1a:	e7f4      	b.n	1f06 <makePage+0x4a>
        }
        pageReady = true;
    1f1c:	2201      	movs	r2, #1
    1f1e:	4b0a      	ldr	r3, [pc, #40]	; (1f48 <makePage+0x8c>)
    1f20:	701a      	strb	r2, [r3, #0]
    1f22:	e009      	b.n	1f38 <makePage+0x7c>

    } else {
        for (u16_t dataByte = 0; dataByte <= bytesToWrite; ++dataByte) {
    1f24:	4283      	cmp	r3, r0
    1f26:	d807      	bhi.n	1f38 <makePage+0x7c>
            pageBuffer[(dataByte + location)] = data[dataByte];
    1f28:	5ccf      	ldrb	r7, [r1, r3]
    1f2a:	18e6      	adds	r6, r4, r3
    1f2c:	5577      	strb	r7, [r6, r5]
            bytesWritten++;
            pageLocation = location + dataByte;
    1f2e:	18ee      	adds	r6, r5, r3
            pageLocation = dataByte + 1;
        }
        pageReady = true;

    } else {
        for (u16_t dataByte = 0; dataByte <= bytesToWrite; ++dataByte) {
    1f30:	3301      	adds	r3, #1
            pageBuffer[(dataByte + location)] = data[dataByte];
            bytesWritten++;
            pageLocation = location + dataByte;
    1f32:	7016      	strb	r6, [r2, #0]
            pageLocation = dataByte + 1;
        }
        pageReady = true;

    } else {
        for (u16_t dataByte = 0; dataByte <= bytesToWrite; ++dataByte) {
    1f34:	b29b      	uxth	r3, r3
    1f36:	e7f5      	b.n	1f24 <makePage+0x68>
            pageBuffer[(dataByte + location)] = data[dataByte];
            bytesWritten++;
            pageLocation = location + dataByte;
        }
    }
}
    1f38:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1f3a:	46c0      	nop			; (mov r8, r8)
    1f3c:	200007c4 	.word	0x200007c4
    1f40:	20000539 	.word	0x20000539
    1f44:	200006b8 	.word	0x200006b8
    1f48:	200007b8 	.word	0x200007b8

00001f4c <logFlight>:


void logFlight() {
    1f4c:	b51f      	push	{r0, r1, r2, r3, r4, lr}

    u8_t bytesToSend = 16;
    u8_t dataToSend[16];

    dataToSend[0] = FLIGHT_LOG;
    1f4e:	2346      	movs	r3, #70	; 0x46
    1f50:	466a      	mov	r2, sp
    1f52:	7013      	strb	r3, [r2, #0]
    dataToSend[1] = 0;
    1f54:	2300      	movs	r3, #0

    dataToSend[2] = offsets.offsetBufferTime >> 0;
    1f56:	4669      	mov	r1, sp
    dataToSend[3] = offsets.offsetBufferTime >> 8;
    1f58:	4668      	mov	r0, sp

    u8_t bytesToSend = 16;
    u8_t dataToSend[16];

    dataToSend[0] = FLIGHT_LOG;
    dataToSend[1] = 0;
    1f5a:	7053      	strb	r3, [r2, #1]

    dataToSend[2] = offsets.offsetBufferTime >> 0;
    1f5c:	4a10      	ldr	r2, [pc, #64]	; (1fa0 <logFlight+0x54>)
    1f5e:	6813      	ldr	r3, [r2, #0]
    1f60:	708b      	strb	r3, [r1, #2]
    dataToSend[3] = offsets.offsetBufferTime >> 8;
    1f62:	0a19      	lsrs	r1, r3, #8
    1f64:	70c1      	strb	r1, [r0, #3]
    dataToSend[4] = offsets.offsetBufferTime >> 16;
    1f66:	0c19      	lsrs	r1, r3, #16
    dataToSend[5] = offsets.offsetBufferTime >> 24;
    1f68:	0e1b      	lsrs	r3, r3, #24
    1f6a:	7143      	strb	r3, [r0, #5]

    dataToSend[6] = offsets.groundOffset >> 0;
    1f6c:	6993      	ldr	r3, [r2, #24]
    dataToSend[0] = FLIGHT_LOG;
    dataToSend[1] = 0;

    dataToSend[2] = offsets.offsetBufferTime >> 0;
    dataToSend[3] = offsets.offsetBufferTime >> 8;
    dataToSend[4] = offsets.offsetBufferTime >> 16;
    1f6e:	7101      	strb	r1, [r0, #4]
    dataToSend[5] = offsets.offsetBufferTime >> 24;

    dataToSend[6] = offsets.groundOffset >> 0;
    dataToSend[7] = offsets.groundOffset >> 8;
    1f70:	0a19      	lsrs	r1, r3, #8
    dataToSend[2] = offsets.offsetBufferTime >> 0;
    dataToSend[3] = offsets.offsetBufferTime >> 8;
    dataToSend[4] = offsets.offsetBufferTime >> 16;
    dataToSend[5] = offsets.offsetBufferTime >> 24;

    dataToSend[6] = offsets.groundOffset >> 0;
    1f72:	7183      	strb	r3, [r0, #6]
    dataToSend[7] = offsets.groundOffset >> 8;
    1f74:	71c1      	strb	r1, [r0, #7]
    dataToSend[8] = offsets.groundOffset >> 16;
    1f76:	0c19      	lsrs	r1, r3, #16
    dataToSend[9] = offsets.groundOffset >> 24;
    1f78:	0e1b      	lsrs	r3, r3, #24
    1f7a:	7243      	strb	r3, [r0, #9]

    dataToSend[10] = offsets.groundTemperature >> 0;
    1f7c:	6a13      	ldr	r3, [r2, #32]
    dataToSend[4] = offsets.offsetBufferTime >> 16;
    dataToSend[5] = offsets.offsetBufferTime >> 24;

    dataToSend[6] = offsets.groundOffset >> 0;
    dataToSend[7] = offsets.groundOffset >> 8;
    dataToSend[8] = offsets.groundOffset >> 16;
    1f7e:	7201      	strb	r1, [r0, #8]
    dataToSend[9] = offsets.groundOffset >> 24;

    dataToSend[10] = offsets.groundTemperature >> 0;
    dataToSend[11] = offsets.groundTemperature >> 8;
    1f80:	0a1a      	lsrs	r2, r3, #8
    dataToSend[6] = offsets.groundOffset >> 0;
    dataToSend[7] = offsets.groundOffset >> 8;
    dataToSend[8] = offsets.groundOffset >> 16;
    dataToSend[9] = offsets.groundOffset >> 24;

    dataToSend[10] = offsets.groundTemperature >> 0;
    1f82:	7283      	strb	r3, [r0, #10]
    dataToSend[11] = offsets.groundTemperature >> 8;
    1f84:	72c2      	strb	r2, [r0, #11]
    dataToSend[12] = offsets.groundTemperature >> 16;
    1f86:	0c1a      	lsrs	r2, r3, #16
    dataToSend[13] = offsets.groundTemperature >> 24;
    1f88:	0e1b      	lsrs	r3, r3, #24
    1f8a:	7343      	strb	r3, [r0, #13]

    //dataToSend[14] = accel >> 0;
    dataToSend[15] = 0xfe;
    1f8c:	23fe      	movs	r3, #254	; 0xfe
    dataToSend[8] = offsets.groundOffset >> 16;
    dataToSend[9] = offsets.groundOffset >> 24;

    dataToSend[10] = offsets.groundTemperature >> 0;
    dataToSend[11] = offsets.groundTemperature >> 8;
    dataToSend[12] = offsets.groundTemperature >> 16;
    1f8e:	7302      	strb	r2, [r0, #12]
    dataToSend[13] = offsets.groundTemperature >> 24;

    //dataToSend[14] = accel >> 0;
    dataToSend[15] = 0xfe;
    1f90:	73c3      	strb	r3, [r0, #15]
    dataToSend[5] = offsets.offsetBufferTime >> 24;

    dataToSend[6] = offsets.groundOffset >> 0;
    dataToSend[7] = offsets.groundOffset >> 8;
    dataToSend[8] = offsets.groundOffset >> 16;
    dataToSend[9] = offsets.groundOffset >> 24;
    1f92:	4669      	mov	r1, sp
    dataToSend[13] = offsets.groundTemperature >> 24;

    //dataToSend[14] = accel >> 0;
    dataToSend[15] = 0xfe;

    makePage(bytesToSend, dataToSend);
    1f94:	2010      	movs	r0, #16
    1f96:	4b03      	ldr	r3, [pc, #12]	; (1fa4 <logFlight+0x58>)
    1f98:	4798      	blx	r3
}
    1f9a:	b005      	add	sp, #20
    1f9c:	bd00      	pop	{pc}
    1f9e:	46c0      	nop			; (mov r8, r8)
    1fa0:	200004d8 	.word	0x200004d8
    1fa4:	00001ebd 	.word	0x00001ebd

00001fa8 <logEvent>:

void logEvent(u8_t eventType) {
    1fa8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

    u8_t bytesToSend = 12;
    u8_t dataToSend[12];

    dataToSend[0] = EVENT_LOG;
    1faa:	2345      	movs	r3, #69	; 0x45
    dataToSend[1] = eventType;
    dataToSend[2] = sample.sampleTick >> 0;
    1fac:	4d10      	ldr	r5, [pc, #64]	; (1ff0 <logEvent+0x48>)
void logEvent(u8_t eventType) {

    u8_t bytesToSend = 12;
    u8_t dataToSend[12];

    dataToSend[0] = EVENT_LOG;
    1fae:	ac01      	add	r4, sp, #4
    1fb0:	7023      	strb	r3, [r4, #0]
    dataToSend[1] = eventType;
    dataToSend[2] = sample.sampleTick >> 0;
    1fb2:	686b      	ldr	r3, [r5, #4]
    dataToSend[3] = sample.sampleTick >> 8;
    dataToSend[4] = sample.sampleTick >> 16;
    dataToSend[5] = sample.sampleTick >> 24;

    dataToSend[6] = altitudeAGL() >> 0;
    1fb4:	4e0f      	ldr	r6, [pc, #60]	; (1ff4 <logEvent+0x4c>)
    u8_t dataToSend[12];

    dataToSend[0] = EVENT_LOG;
    dataToSend[1] = eventType;
    dataToSend[2] = sample.sampleTick >> 0;
    dataToSend[3] = sample.sampleTick >> 8;
    1fb6:	0a1a      	lsrs	r2, r3, #8
    u8_t bytesToSend = 12;
    u8_t dataToSend[12];

    dataToSend[0] = EVENT_LOG;
    dataToSend[1] = eventType;
    dataToSend[2] = sample.sampleTick >> 0;
    1fb8:	70a3      	strb	r3, [r4, #2]
    dataToSend[3] = sample.sampleTick >> 8;
    1fba:	70e2      	strb	r2, [r4, #3]
    dataToSend[4] = sample.sampleTick >> 16;
    1fbc:	0c1a      	lsrs	r2, r3, #16
    dataToSend[5] = sample.sampleTick >> 24;
    1fbe:	0e1b      	lsrs	r3, r3, #24

    dataToSend[0] = EVENT_LOG;
    dataToSend[1] = eventType;
    dataToSend[2] = sample.sampleTick >> 0;
    dataToSend[3] = sample.sampleTick >> 8;
    dataToSend[4] = sample.sampleTick >> 16;
    1fc0:	7122      	strb	r2, [r4, #4]
    dataToSend[5] = sample.sampleTick >> 24;
    1fc2:	7163      	strb	r3, [r4, #5]

    u8_t bytesToSend = 12;
    u8_t dataToSend[12];

    dataToSend[0] = EVENT_LOG;
    dataToSend[1] = eventType;
    1fc4:	7060      	strb	r0, [r4, #1]
    dataToSend[2] = sample.sampleTick >> 0;
    dataToSend[3] = sample.sampleTick >> 8;
    dataToSend[4] = sample.sampleTick >> 16;
    dataToSend[5] = sample.sampleTick >> 24;

    dataToSend[6] = altitudeAGL() >> 0;
    1fc6:	47b0      	blx	r6
    1fc8:	71a0      	strb	r0, [r4, #6]
    dataToSend[7] = altitudeAGL() >> 8;
    1fca:	47b0      	blx	r6
    1fcc:	1200      	asrs	r0, r0, #8
    1fce:	71e0      	strb	r0, [r4, #7]
    dataToSend[8] = altitudeAGL() >> 16;
    1fd0:	47b0      	blx	r6
    1fd2:	1400      	asrs	r0, r0, #16
    1fd4:	7220      	strb	r0, [r4, #8]
    dataToSend[9] = altitudeAGL() >> 24;
    1fd6:	47b0      	blx	r6
    1fd8:	1600      	asrs	r0, r0, #24
    1fda:	7260      	strb	r0, [r4, #9]

    dataToSend[10] = sample.voltage.batV >> 0;
    1fdc:	892b      	ldrh	r3, [r5, #8]
    dataToSend[11] = sample.voltage.batV >> 8;

    makePage(bytesToSend, dataToSend);
    1fde:	0021      	movs	r1, r4
    dataToSend[6] = altitudeAGL() >> 0;
    dataToSend[7] = altitudeAGL() >> 8;
    dataToSend[8] = altitudeAGL() >> 16;
    dataToSend[9] = altitudeAGL() >> 24;

    dataToSend[10] = sample.voltage.batV >> 0;
    1fe0:	72a3      	strb	r3, [r4, #10]
    dataToSend[11] = sample.voltage.batV >> 8;
    1fe2:	0a1b      	lsrs	r3, r3, #8
    1fe4:	72e3      	strb	r3, [r4, #11]

    makePage(bytesToSend, dataToSend);
    1fe6:	200c      	movs	r0, #12
    1fe8:	4b03      	ldr	r3, [pc, #12]	; (1ff8 <logEvent+0x50>)
    1fea:	4798      	blx	r3

}
    1fec:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
    1fee:	46c0      	nop			; (mov r8, r8)
    1ff0:	200007c8 	.word	0x200007c8
    1ff4:	00000b21 	.word	0x00000b21
    1ff8:	00001ebd 	.word	0x00001ebd

00001ffc <logSensors>:
void logSensors() {

    u8_t bytesToSend = 24;
    u8_t dataToSend[24];

    dataToSend[0] = SENSOR_LOG;
    1ffc:	2353      	movs	r3, #83	; 0x53

    makePage(bytesToSend, dataToSend);

}

void logSensors() {
    1ffe:	b5f0      	push	{r4, r5, r6, r7, lr}
    2000:	b08b      	sub	sp, #44	; 0x2c

    u8_t bytesToSend = 24;
    u8_t dataToSend[24];

    dataToSend[0] = SENSOR_LOG;
    2002:	ac04      	add	r4, sp, #16
    2004:	7023      	strb	r3, [r4, #0]

    dataToSend[1] = sample.sampleTick >> 0;
    2006:	4b49      	ldr	r3, [pc, #292]	; (212c <STACK_SIZE+0x12c>)
    dataToSend[2] = sample.sampleTick >> 8;
    dataToSend[3] = sample.sampleTick >> 16;
    dataToSend[4] = sample.sampleTick >> 24;

    dataToSend[5] = altitudeAGL() >> 0;
    2008:	4e49      	ldr	r6, [pc, #292]	; (2130 <STACK_SIZE+0x130>)
    u8_t bytesToSend = 24;
    u8_t dataToSend[24];

    dataToSend[0] = SENSOR_LOG;

    dataToSend[1] = sample.sampleTick >> 0;
    200a:	685b      	ldr	r3, [r3, #4]
    dataToSend[2] = sample.sampleTick >> 8;
    200c:	0a1a      	lsrs	r2, r3, #8
    u8_t bytesToSend = 24;
    u8_t dataToSend[24];

    dataToSend[0] = SENSOR_LOG;

    dataToSend[1] = sample.sampleTick >> 0;
    200e:	7063      	strb	r3, [r4, #1]
    dataToSend[2] = sample.sampleTick >> 8;
    2010:	70a2      	strb	r2, [r4, #2]
    dataToSend[3] = sample.sampleTick >> 16;
    2012:	0c1a      	lsrs	r2, r3, #16
    dataToSend[4] = sample.sampleTick >> 24;
    2014:	0e1b      	lsrs	r3, r3, #24

    dataToSend[0] = SENSOR_LOG;

    dataToSend[1] = sample.sampleTick >> 0;
    dataToSend[2] = sample.sampleTick >> 8;
    dataToSend[3] = sample.sampleTick >> 16;
    2016:	70e2      	strb	r2, [r4, #3]
    dataToSend[4] = sample.sampleTick >> 24;
    2018:	7123      	strb	r3, [r4, #4]

    dataToSend[5] = altitudeAGL() >> 0;
    201a:	47b0      	blx	r6
    201c:	7160      	strb	r0, [r4, #5]
    dataToSend[6] = altitudeAGL() >> 8;
    201e:	47b0      	blx	r6
    2020:	1200      	asrs	r0, r0, #8
    2022:	71a0      	strb	r0, [r4, #6]
    dataToSend[7] = altitudeAGL() >> 16;
    2024:	47b0      	blx	r6
    2026:	1400      	asrs	r0, r0, #16
    2028:	71e0      	strb	r0, [r4, #7]
    dataToSend[8] = altitudeAGL() >> 24;
    202a:	47b0      	blx	r6

    volatile float fractionalAccel = accel - (int16_t)(accel);
    202c:	4b41      	ldr	r3, [pc, #260]	; (2134 <STACK_SIZE+0x134>)
    dataToSend[4] = sample.sampleTick >> 24;

    dataToSend[5] = altitudeAGL() >> 0;
    dataToSend[6] = altitudeAGL() >> 8;
    dataToSend[7] = altitudeAGL() >> 16;
    dataToSend[8] = altitudeAGL() >> 24;
    202e:	1600      	asrs	r0, r0, #24

    volatile float fractionalAccel = accel - (int16_t)(accel);
    2030:	681e      	ldr	r6, [r3, #0]
    2032:	685f      	ldr	r7, [r3, #4]
    dataToSend[4] = sample.sampleTick >> 24;

    dataToSend[5] = altitudeAGL() >> 0;
    dataToSend[6] = altitudeAGL() >> 8;
    dataToSend[7] = altitudeAGL() >> 16;
    dataToSend[8] = altitudeAGL() >> 24;
    2034:	7220      	strb	r0, [r4, #8]

    volatile float fractionalAccel = accel - (int16_t)(accel);
    2036:	0039      	movs	r1, r7
    2038:	4b3f      	ldr	r3, [pc, #252]	; (2138 <STACK_SIZE+0x138>)
    203a:	0030      	movs	r0, r6
    203c:	4798      	blx	r3
    203e:	b203      	sxth	r3, r0
    2040:	001d      	movs	r5, r3
    2042:	0018      	movs	r0, r3
    2044:	4b3d      	ldr	r3, [pc, #244]	; (213c <STACK_SIZE+0x13c>)
    2046:	4798      	blx	r3
    2048:	0002      	movs	r2, r0
    204a:	000b      	movs	r3, r1
    204c:	0030      	movs	r0, r6
    204e:	0039      	movs	r1, r7
    2050:	4e3b      	ldr	r6, [pc, #236]	; (2140 <STACK_SIZE+0x140>)
    2052:	47b0      	blx	r6
    2054:	4b3b      	ldr	r3, [pc, #236]	; (2144 <STACK_SIZE+0x144>)
    2056:	4798      	blx	r3
    2058:	9003      	str	r0, [sp, #12]
    volatile int16_t fractAccelPart = fractionalAccel * 1000;
    205a:	9803      	ldr	r0, [sp, #12]
    205c:	4b3a      	ldr	r3, [pc, #232]	; (2148 <STACK_SIZE+0x148>)
    205e:	493b      	ldr	r1, [pc, #236]	; (214c <STACK_SIZE+0x14c>)
    2060:	4798      	blx	r3
    2062:	4e3b      	ldr	r6, [pc, #236]	; (2150 <STACK_SIZE+0x150>)
    2064:	47b0      	blx	r6
    2066:	ab02      	add	r3, sp, #8
    2068:	b200      	sxth	r0, r0
    206a:	8058      	strh	r0, [r3, #2]

    dataToSend[9] = (int16_t)(accel) >> 0;
    dataToSend[10] = (int16_t)(accel) >> 8;
    dataToSend[11] = fractAccelPart >> 0;
    206c:	885a      	ldrh	r2, [r3, #2]
    dataToSend[6] = altitudeAGL() >> 8;
    dataToSend[7] = altitudeAGL() >> 16;
    dataToSend[8] = altitudeAGL() >> 24;

    volatile float fractionalAccel = accel - (int16_t)(accel);
    volatile int16_t fractAccelPart = fractionalAccel * 1000;
    206e:	3302      	adds	r3, #2

    dataToSend[9] = (int16_t)(accel) >> 0;
    dataToSend[10] = (int16_t)(accel) >> 8;
    dataToSend[11] = fractAccelPart >> 0;
    dataToSend[12] = fractAccelPart >> 8;
    2070:	881b      	ldrh	r3, [r3, #0]

    volatile float fractionalAccel = accel - (int16_t)(accel);
    volatile int16_t fractAccelPart = fractionalAccel * 1000;

    dataToSend[9] = (int16_t)(accel) >> 0;
    dataToSend[10] = (int16_t)(accel) >> 8;
    2072:	1228      	asrs	r0, r5, #8
    dataToSend[11] = fractAccelPart >> 0;
    dataToSend[12] = fractAccelPart >> 8;
    2074:	0a1b      	lsrs	r3, r3, #8
    2076:	7323      	strb	r3, [r4, #12]


    float fractionalVelocity = velocity - (int16_t)(velocity);
    2078:	4b36      	ldr	r3, [pc, #216]	; (2154 <STACK_SIZE+0x154>)
    dataToSend[8] = altitudeAGL() >> 24;

    volatile float fractionalAccel = accel - (int16_t)(accel);
    volatile int16_t fractAccelPart = fractionalAccel * 1000;

    dataToSend[9] = (int16_t)(accel) >> 0;
    207a:	7265      	strb	r5, [r4, #9]
    dataToSend[10] = (int16_t)(accel) >> 8;
    207c:	72a0      	strb	r0, [r4, #10]
    dataToSend[11] = fractAccelPart >> 0;
    207e:	72e2      	strb	r2, [r4, #11]
    dataToSend[12] = fractAccelPart >> 8;


    float fractionalVelocity = velocity - (int16_t)(velocity);
    2080:	681a      	ldr	r2, [r3, #0]
    2082:	685b      	ldr	r3, [r3, #4]
    2084:	9200      	str	r2, [sp, #0]
    2086:	9301      	str	r3, [sp, #4]
    2088:	0010      	movs	r0, r2
    208a:	0019      	movs	r1, r3
    208c:	4b2a      	ldr	r3, [pc, #168]	; (2138 <STACK_SIZE+0x138>)
    208e:	4798      	blx	r3
    2090:	b207      	sxth	r7, r0
    int16_t fractVelocityPart = fractionalVelocity * 1000;
    2092:	4b2a      	ldr	r3, [pc, #168]	; (213c <STACK_SIZE+0x13c>)
    2094:	0038      	movs	r0, r7
    2096:	4798      	blx	r3
    2098:	4d29      	ldr	r5, [pc, #164]	; (2140 <STACK_SIZE+0x140>)
    209a:	0002      	movs	r2, r0
    209c:	000b      	movs	r3, r1
    209e:	9800      	ldr	r0, [sp, #0]
    20a0:	9901      	ldr	r1, [sp, #4]
    20a2:	47a8      	blx	r5
    20a4:	4b27      	ldr	r3, [pc, #156]	; (2144 <STACK_SIZE+0x144>)
    20a6:	4798      	blx	r3
    20a8:	4b27      	ldr	r3, [pc, #156]	; (2148 <STACK_SIZE+0x148>)
    20aa:	4928      	ldr	r1, [pc, #160]	; (214c <STACK_SIZE+0x14c>)
    20ac:	4798      	blx	r3
    20ae:	47b0      	blx	r6

    dataToSend[13] = (int16_t)(velocity) >> 0;
    20b0:	7367      	strb	r7, [r4, #13]
    dataToSend[11] = fractAccelPart >> 0;
    dataToSend[12] = fractAccelPart >> 8;


    float fractionalVelocity = velocity - (int16_t)(velocity);
    int16_t fractVelocityPart = fractionalVelocity * 1000;
    20b2:	b203      	sxth	r3, r0

    dataToSend[13] = (int16_t)(velocity) >> 0;
    dataToSend[14] = (int16_t)(velocity) >> 8;
    20b4:	123f      	asrs	r7, r7, #8
    20b6:	73a7      	strb	r7, [r4, #14]
    dataToSend[15] = fractVelocityPart >> 0;
    20b8:	73e3      	strb	r3, [r4, #15]
    dataToSend[16] = fractVelocityPart >> 8;
    20ba:	121b      	asrs	r3, r3, #8
    20bc:	7423      	strb	r3, [r4, #16]

//     if ( ((fractVelocityPart < 0) & ((int16_t)(velocity) > 0)) | ((fractVelocityPart > 0) & ((int16_t)(velocity) < 0)) ) {
//         beep(200);
//     }

    dataToSend[17] = (u32_t)sample.altitudefeet >> 0;
    20be:	4b1b      	ldr	r3, [pc, #108]	; (212c <STACK_SIZE+0x12c>)
    20c0:	6c18      	ldr	r0, [r3, #64]	; 0x40
    20c2:	6c59      	ldr	r1, [r3, #68]	; 0x44
    20c4:	4b24      	ldr	r3, [pc, #144]	; (2158 <STACK_SIZE+0x158>)
    20c6:	4798      	blx	r3
    dataToSend[18] = (u32_t)sample.altitudefeet >> 8;
    20c8:	0a03      	lsrs	r3, r0, #8
    20ca:	74a3      	strb	r3, [r4, #18]
    dataToSend[19] = (u32_t)sample.altitudefeet >> 16;
    20cc:	0c03      	lsrs	r3, r0, #16
    20ce:	74e3      	strb	r3, [r4, #19]
    dataToSend[20] = (u32_t)sample.altitudefeet >> 24;

    float fractionalAccelraw = sample.accelZ - (int16_t)(sample.accelZ);
    20d0:	4b16      	ldr	r3, [pc, #88]	; (212c <STACK_SIZE+0x12c>)

//     if ( ((fractVelocityPart < 0) & ((int16_t)(velocity) > 0)) | ((fractVelocityPart > 0) & ((int16_t)(velocity) < 0)) ) {
//         beep(200);
//     }

    dataToSend[17] = (u32_t)sample.altitudefeet >> 0;
    20d2:	7460      	strb	r0, [r4, #17]
    dataToSend[18] = (u32_t)sample.altitudefeet >> 8;
    dataToSend[19] = (u32_t)sample.altitudefeet >> 16;
    dataToSend[20] = (u32_t)sample.altitudefeet >> 24;

    float fractionalAccelraw = sample.accelZ - (int16_t)(sample.accelZ);
    20d4:	6a9d      	ldr	r5, [r3, #40]	; 0x28
//     }

    dataToSend[17] = (u32_t)sample.altitudefeet >> 0;
    dataToSend[18] = (u32_t)sample.altitudefeet >> 8;
    dataToSend[19] = (u32_t)sample.altitudefeet >> 16;
    dataToSend[20] = (u32_t)sample.altitudefeet >> 24;
    20d6:	0e00      	lsrs	r0, r0, #24
    20d8:	7520      	strb	r0, [r4, #20]

    float fractionalAccelraw = sample.accelZ - (int16_t)(sample.accelZ);
    20da:	1c28      	adds	r0, r5, #0
    20dc:	47b0      	blx	r6
    20de:	b200      	sxth	r0, r0
    u8_t fractAccelRawPart = fractionalAccelraw;

    dataToSend[21] = (int16_t)(sample.accelZ) >> 0;
    dataToSend[22] = (int16_t)(sample.accelZ) >> 8;
    20e0:	1203      	asrs	r3, r0, #8
    20e2:	75a3      	strb	r3, [r4, #22]
    dataToSend[20] = (u32_t)sample.altitudefeet >> 24;

    float fractionalAccelraw = sample.accelZ - (int16_t)(sample.accelZ);
    u8_t fractAccelRawPart = fractionalAccelraw;

    dataToSend[21] = (int16_t)(sample.accelZ) >> 0;
    20e4:	7560      	strb	r0, [r4, #21]
    dataToSend[22] = (int16_t)(sample.accelZ) >> 8;
    dataToSend[23] = fractAccelRawPart;
    20e6:	4b1d      	ldr	r3, [pc, #116]	; (215c <STACK_SIZE+0x15c>)
    20e8:	4798      	blx	r3
    20ea:	4b1d      	ldr	r3, [pc, #116]	; (2160 <STACK_SIZE+0x160>)
    20ec:	1c01      	adds	r1, r0, #0
    20ee:	1c28      	adds	r0, r5, #0
    20f0:	4798      	blx	r3
    20f2:	4b1c      	ldr	r3, [pc, #112]	; (2164 <STACK_SIZE+0x164>)
    20f4:	4798      	blx	r3
    //dataToSend[21] = my_altimeter->myAnalogAccelerometer.analogRaw >> 0;
    //dataToSend[22] = my_altimeter->myAnalogAccelerometer.analogRaw >> 8;



    makePage(bytesToSend, dataToSend);
    20f6:	4b1c      	ldr	r3, [pc, #112]	; (2168 <STACK_SIZE+0x168>)
    float fractionalAccelraw = sample.accelZ - (int16_t)(sample.accelZ);
    u8_t fractAccelRawPart = fractionalAccelraw;

    dataToSend[21] = (int16_t)(sample.accelZ) >> 0;
    dataToSend[22] = (int16_t)(sample.accelZ) >> 8;
    dataToSend[23] = fractAccelRawPart;
    20f8:	75e0      	strb	r0, [r4, #23]
    //dataToSend[21] = my_altimeter->myAnalogAccelerometer.analogRaw >> 0;
    //dataToSend[22] = my_altimeter->myAnalogAccelerometer.analogRaw >> 8;



    makePage(bytesToSend, dataToSend);
    20fa:	0021      	movs	r1, r4
    20fc:	2018      	movs	r0, #24
    20fe:	4798      	blx	r3

    if (pageReady) {
    2100:	4b1a      	ldr	r3, [pc, #104]	; (216c <STACK_SIZE+0x16c>)
    2102:	781a      	ldrb	r2, [r3, #0]
    2104:	2a00      	cmp	r2, #0
    2106:	d00e      	beq.n	2126 <STACK_SIZE+0x126>
        pageReady = false;
    2108:	2200      	movs	r2, #0
    210a:	701a      	strb	r2, [r3, #0]
    210c:	2280      	movs	r2, #128	; 0x80
    210e:	4b18      	ldr	r3, [pc, #96]	; (2170 <STACK_SIZE+0x170>)
        pinToggle(LedPin);
        u8_t bytesWritten = AT25SEWritePage(currentAddress,pageToWrite);
    2110:	4c18      	ldr	r4, [pc, #96]	; (2174 <STACK_SIZE+0x174>)
    2112:	0352      	lsls	r2, r2, #13
    2114:	61da      	str	r2, [r3, #28]
    2116:	4918      	ldr	r1, [pc, #96]	; (2178 <STACK_SIZE+0x178>)
    2118:	4b18      	ldr	r3, [pc, #96]	; (217c <STACK_SIZE+0x17c>)
    211a:	6820      	ldr	r0, [r4, #0]
    211c:	4798      	blx	r3
        currentAddress = (currentAddress + 0x100);
    211e:	6823      	ldr	r3, [r4, #0]
    2120:	3301      	adds	r3, #1
    2122:	33ff      	adds	r3, #255	; 0xff
    2124:	6023      	str	r3, [r4, #0]
    }
}
    2126:	b00b      	add	sp, #44	; 0x2c
    2128:	bdf0      	pop	{r4, r5, r6, r7, pc}
    212a:	46c0      	nop			; (mov r8, r8)
    212c:	200007c8 	.word	0x200007c8
    2130:	00000b21 	.word	0x00000b21
    2134:	20000688 	.word	0x20000688
    2138:	00005c29 	.word	0x00005c29
    213c:	00005c95 	.word	0x00005c95
    2140:	00005541 	.word	0x00005541
    2144:	00005e31 	.word	0x00005e31
    2148:	00003ba5 	.word	0x00003ba5
    214c:	447a0000 	.word	0x447a0000
    2150:	000040d9 	.word	0x000040d9
    2154:	20000690 	.word	0x20000690
    2158:	00003b69 	.word	0x00003b69
    215c:	0000411d 	.word	0x0000411d
    2160:	00003dcd 	.word	0x00003dcd
    2164:	00003b39 	.word	0x00003b39
    2168:	00001ebd 	.word	0x00001ebd
    216c:	200007b8 	.word	0x200007b8
    2170:	41004400 	.word	0x41004400
    2174:	200007bc 	.word	0x200007bc
    2178:	200006b8 	.word	0x200006b8
    217c:	000002cd 	.word	0x000002cd

00002180 <getFlightStartAddress>:

    u8_t addressToCheck[3];

    u16_t flightAddressLoc = FLIGHTZEROSTART + (flightToFind * 0x06);

    AT25SEreadSample(flightAddressLoc, 0x03, addressToCheck);
    2180:	2306      	movs	r3, #6
    }
}



u32_t getFlightStartAddress(u8_t flightToFind) {
    2182:	b513      	push	{r0, r1, r4, lr}

    u8_t addressToCheck[3];

    u16_t flightAddressLoc = FLIGHTZEROSTART + (flightToFind * 0x06);

    AT25SEreadSample(flightAddressLoc, 0x03, addressToCheck);
    2184:	4358      	muls	r0, r3
    2186:	ac01      	add	r4, sp, #4
    2188:	3001      	adds	r0, #1
    218a:	30ff      	adds	r0, #255	; 0xff
    218c:	0022      	movs	r2, r4
    218e:	2103      	movs	r1, #3
    2190:	4b04      	ldr	r3, [pc, #16]	; (21a4 <getFlightStartAddress+0x24>)
    2192:	4798      	blx	r3

    u32_t flightStartAddress = addressToCheck[0] << 0 | addressToCheck[1] << 8 | addressToCheck[2] << 16;
    2194:	7860      	ldrb	r0, [r4, #1]
    2196:	78a3      	ldrb	r3, [r4, #2]
    2198:	0200      	lsls	r0, r0, #8
    219a:	041b      	lsls	r3, r3, #16
    219c:	4318      	orrs	r0, r3
    219e:	7823      	ldrb	r3, [r4, #0]
    21a0:	4318      	orrs	r0, r3

    return flightStartAddress;
}
    21a2:	bd16      	pop	{r1, r2, r4, pc}
    21a4:	00000341 	.word	0x00000341

000021a8 <FindFlightEndingAddress>:

    u8_t addressToCheck[3];

    u16_t flightAddressLoc = FLIGHTZEROEND + (findThisFlightsEnd * 0x06);

    AT25SEreadSample(flightAddressLoc, 0x03, addressToCheck);
    21a8:	2306      	movs	r3, #6
    u32_t flightStartAddress = addressToCheck[0] << 0 | addressToCheck[1] << 8 | addressToCheck[2] << 16;

    return flightStartAddress;
}

u32_t FindFlightEndingAddress(u8_t findThisFlightsEnd) {
    21aa:	b513      	push	{r0, r1, r4, lr}

    u8_t addressToCheck[3];

    u16_t flightAddressLoc = FLIGHTZEROEND + (findThisFlightsEnd * 0x06);

    AT25SEreadSample(flightAddressLoc, 0x03, addressToCheck);
    21ac:	4358      	muls	r0, r3
    21ae:	ac01      	add	r4, sp, #4
    21b0:	3004      	adds	r0, #4
    21b2:	30ff      	adds	r0, #255	; 0xff
    21b4:	0022      	movs	r2, r4
    21b6:	2103      	movs	r1, #3
    21b8:	4b04      	ldr	r3, [pc, #16]	; (21cc <FindFlightEndingAddress+0x24>)
    21ba:	4798      	blx	r3

    u32_t flightEndAddress = addressToCheck[0] << 0 | addressToCheck[1] << 8 | addressToCheck[2] << 16;
    21bc:	7860      	ldrb	r0, [r4, #1]
    21be:	78a3      	ldrb	r3, [r4, #2]
    21c0:	0200      	lsls	r0, r0, #8
    21c2:	041b      	lsls	r3, r3, #16
    21c4:	4318      	orrs	r0, r3
    21c6:	7823      	ldrb	r3, [r4, #0]
    21c8:	4318      	orrs	r0, r3

    return flightEndAddress;
}
    21ca:	bd16      	pop	{r1, r2, r4, pc}
    21cc:	00000341 	.word	0x00000341

000021d0 <isFlightLogged>:

bool isFlightLogged(u8_t flightNumbToCheck) {
    21d0:	b510      	push	{r4, lr}

    u32_t possibleStart = getFlightStartAddress(flightNumbToCheck);
    21d2:	4b04      	ldr	r3, [pc, #16]	; (21e4 <isFlightLogged+0x14>)
    21d4:	4798      	blx	r3
    21d6:	4b04      	ldr	r3, [pc, #16]	; (21e8 <isFlightLogged+0x18>)
    if (possibleStart == 0xFFFFFF) {
        return false;
    } else {
        return true;
    }
}
    21d8:	18c0      	adds	r0, r0, r3
    21da:	1e43      	subs	r3, r0, #1
    21dc:	4198      	sbcs	r0, r3
    21de:	b2c0      	uxtb	r0, r0
    21e0:	bd10      	pop	{r4, pc}
    21e2:	46c0      	nop			; (mov r8, r8)
    21e4:	00002181 	.word	0x00002181
    21e8:	ff000001 	.word	0xff000001

000021ec <writeFlightEndAddress>:



void writeFlightEndAddress() {
    21ec:	b507      	push	{r0, r1, r2, lr}
    u32_t endingAddress = currentAddress;

    u8_t address[3] = {endingAddress >> 0, endingAddress >> 8, endingAddress >> 16};

    u16_t flightAddressLoc = FLIGHTZEROEND + (flightNumb * 0x06);
    AT25SFWriteBytes(flightAddressLoc, 3, address);
    21ee:	2006      	movs	r0, #6



void writeFlightEndAddress() {

    u32_t endingAddress = currentAddress;
    21f0:	4b09      	ldr	r3, [pc, #36]	; (2218 <writeFlightEndAddress+0x2c>)

    u8_t address[3] = {endingAddress >> 0, endingAddress >> 8, endingAddress >> 16};
    21f2:	aa01      	add	r2, sp, #4



void writeFlightEndAddress() {

    u32_t endingAddress = currentAddress;
    21f4:	681b      	ldr	r3, [r3, #0]

    u8_t address[3] = {endingAddress >> 0, endingAddress >> 8, endingAddress >> 16};
    21f6:	7013      	strb	r3, [r2, #0]
    21f8:	0a19      	lsrs	r1, r3, #8
    21fa:	0c1b      	lsrs	r3, r3, #16
    21fc:	7093      	strb	r3, [r2, #2]

    u16_t flightAddressLoc = FLIGHTZEROEND + (flightNumb * 0x06);
    21fe:	4b07      	ldr	r3, [pc, #28]	; (221c <writeFlightEndAddress+0x30>)

void writeFlightEndAddress() {

    u32_t endingAddress = currentAddress;

    u8_t address[3] = {endingAddress >> 0, endingAddress >> 8, endingAddress >> 16};
    2200:	7051      	strb	r1, [r2, #1]

    u16_t flightAddressLoc = FLIGHTZEROEND + (flightNumb * 0x06);
    AT25SFWriteBytes(flightAddressLoc, 3, address);
    2202:	781b      	ldrb	r3, [r3, #0]
    2204:	2103      	movs	r1, #3
    2206:	4358      	muls	r0, r3
    2208:	3004      	adds	r0, #4
    220a:	30ff      	adds	r0, #255	; 0xff
    220c:	4b04      	ldr	r3, [pc, #16]	; (2220 <writeFlightEndAddress+0x34>)
    220e:	4798      	blx	r3
    delay_ms(10);
    2210:	200a      	movs	r0, #10
    2212:	4b04      	ldr	r3, [pc, #16]	; (2224 <writeFlightEndAddress+0x38>)
    2214:	4798      	blx	r3

}
    2216:	bd07      	pop	{r0, r1, r2, pc}
    2218:	200007bc 	.word	0x200007bc
    221c:	20000521 	.word	0x20000521
    2220:	00000255 	.word	0x00000255
    2224:	0000100d 	.word	0x0000100d

00002228 <findNewFlightStart>:




void findNewFlightStart() {
    2228:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

    for (u8_t flightNumbToCheck = 0; flightNumbToCheck < 20; ++flightNumbToCheck) {
    222a:	2400      	movs	r4, #0

        if (!isFlightLogged(flightNumbToCheck)) {
    222c:	0020      	movs	r0, r4
    222e:	4b23      	ldr	r3, [pc, #140]	; (22bc <findNewFlightStart+0x94>)
    2230:	4798      	blx	r3
    2232:	2800      	cmp	r0, #0
    2234:	d13c      	bne.n	22b0 <findNewFlightStart+0x88>
    2236:	4f22      	ldr	r7, [pc, #136]	; (22c0 <findNewFlightStart+0x98>)
    2238:	ad01      	add	r5, sp, #4

            if (flightNumbToCheck > 0) {
    223a:	2c00      	cmp	r4, #0
    223c:	d016      	beq.n	226c <findNewFlightStart+0x44>


                u32_t startAddress = FindFlightEndingAddress(flightNumbToCheck - 1);
    223e:	1e60      	subs	r0, r4, #1
    2240:	4b20      	ldr	r3, [pc, #128]	; (22c4 <findNewFlightStart+0x9c>)
    2242:	b2c0      	uxtb	r0, r0
    2244:	4798      	blx	r3
                delay_ms(5);
    2246:	4b20      	ldr	r3, [pc, #128]	; (22c8 <findNewFlightStart+0xa0>)
        if (!isFlightLogged(flightNumbToCheck)) {

            if (flightNumbToCheck > 0) {


                u32_t startAddress = FindFlightEndingAddress(flightNumbToCheck - 1);
    2248:	0006      	movs	r6, r0
                delay_ms(5);
    224a:	2005      	movs	r0, #5
    224c:	4798      	blx	r3
                currentAddress = startAddress;

                u8_t address[3] = {startAddress >> 0, startAddress >> 8, startAddress >> 16};

                u16_t flightAddressLoc = FLIGHTZEROSTART + (flightNumbToCheck * 0x06);
                AT25SFWriteBytes(flightAddressLoc, 3, address);
    224e:	2006      	movs	r0, #6
    2250:	4360      	muls	r0, r4
                u32_t startAddress = FindFlightEndingAddress(flightNumbToCheck - 1);
                delay_ms(5);

                currentAddress = startAddress;

                u8_t address[3] = {startAddress >> 0, startAddress >> 8, startAddress >> 16};
    2252:	0a33      	lsrs	r3, r6, #8

                u16_t flightAddressLoc = FLIGHTZEROSTART + (flightNumbToCheck * 0x06);
                AT25SFWriteBytes(flightAddressLoc, 3, address);
    2254:	3001      	adds	r0, #1


                u32_t startAddress = FindFlightEndingAddress(flightNumbToCheck - 1);
                delay_ms(5);

                currentAddress = startAddress;
    2256:	603e      	str	r6, [r7, #0]

                u8_t address[3] = {startAddress >> 0, startAddress >> 8, startAddress >> 16};
    2258:	702e      	strb	r6, [r5, #0]
    225a:	706b      	strb	r3, [r5, #1]
    225c:	0c36      	lsrs	r6, r6, #16

                u16_t flightAddressLoc = FLIGHTZEROSTART + (flightNumbToCheck * 0x06);
                AT25SFWriteBytes(flightAddressLoc, 3, address);
    225e:	30ff      	adds	r0, #255	; 0xff
    2260:	002a      	movs	r2, r5
    2262:	2103      	movs	r1, #3
    2264:	4b19      	ldr	r3, [pc, #100]	; (22cc <findNewFlightStart+0xa4>)
                u32_t startAddress = FindFlightEndingAddress(flightNumbToCheck - 1);
                delay_ms(5);

                currentAddress = startAddress;

                u8_t address[3] = {startAddress >> 0, startAddress >> 8, startAddress >> 16};
    2266:	70ae      	strb	r6, [r5, #2]

                u16_t flightAddressLoc = FLIGHTZEROSTART + (flightNumbToCheck * 0x06);
                AT25SFWriteBytes(flightAddressLoc, 3, address);
    2268:	4798      	blx	r3
    226a:	e00f      	b.n	228c <findNewFlightStart+0x64>

                // for flight 0, starting address is always 0x00100 (beginning of second 4k block)
            } else {
                u8_t address[3] = {0x00,0x10,0x00};
    226c:	2310      	movs	r3, #16
                AT25SFWriteBytes(FLIGHTZEROSTART, 3, address);
    226e:	2080      	movs	r0, #128	; 0x80
                u16_t flightAddressLoc = FLIGHTZEROSTART + (flightNumbToCheck * 0x06);
                AT25SFWriteBytes(flightAddressLoc, 3, address);

                // for flight 0, starting address is always 0x00100 (beginning of second 4k block)
            } else {
                u8_t address[3] = {0x00,0x10,0x00};
    2270:	706b      	strb	r3, [r5, #1]
                AT25SFWriteBytes(FLIGHTZEROSTART, 3, address);
    2272:	0040      	lsls	r0, r0, #1
    2274:	4b15      	ldr	r3, [pc, #84]	; (22cc <findNewFlightStart+0xa4>)
    2276:	002a      	movs	r2, r5
    2278:	2103      	movs	r1, #3
                u16_t flightAddressLoc = FLIGHTZEROSTART + (flightNumbToCheck * 0x06);
                AT25SFWriteBytes(flightAddressLoc, 3, address);

                // for flight 0, starting address is always 0x00100 (beginning of second 4k block)
            } else {
                u8_t address[3] = {0x00,0x10,0x00};
    227a:	702c      	strb	r4, [r5, #0]
    227c:	70ac      	strb	r4, [r5, #2]
                AT25SFWriteBytes(FLIGHTZEROSTART, 3, address);
    227e:	4798      	blx	r3
                currentAddress = 0x001000;
    2280:	2380      	movs	r3, #128	; 0x80
    2282:	015b      	lsls	r3, r3, #5
    2284:	603b      	str	r3, [r7, #0]
                beep(1500);
    2286:	4812      	ldr	r0, [pc, #72]	; (22d0 <findNewFlightStart+0xa8>)
    2288:	4b12      	ldr	r3, [pc, #72]	; (22d4 <findNewFlightStart+0xac>)
    228a:	4798      	blx	r3
            }
            flightNumb = flightNumbToCheck;
    228c:	4b12      	ldr	r3, [pc, #72]	; (22d8 <findNewFlightStart+0xb0>)
    228e:	701c      	strb	r4, [r3, #0]

            while (flightNumbToCheck > 0) {
                beep(500);
    2290:	20fa      	movs	r0, #250	; 0xfa
    2292:	0040      	lsls	r0, r0, #1
                currentAddress = 0x001000;
                beep(1500);
            }
            flightNumb = flightNumbToCheck;

            while (flightNumbToCheck > 0) {
    2294:	2c00      	cmp	r4, #0
    2296:	d008      	beq.n	22aa <findNewFlightStart+0x82>
                beep(500);
    2298:	4b0e      	ldr	r3, [pc, #56]	; (22d4 <findNewFlightStart+0xac>)
    229a:	4798      	blx	r3
                delay_ms(500);
    229c:	20fa      	movs	r0, #250	; 0xfa
    229e:	4b0a      	ldr	r3, [pc, #40]	; (22c8 <findNewFlightStart+0xa0>)
    22a0:	0040      	lsls	r0, r0, #1
                --flightNumbToCheck;
    22a2:	3c01      	subs	r4, #1
            }
            flightNumb = flightNumbToCheck;

            while (flightNumbToCheck > 0) {
                beep(500);
                delay_ms(500);
    22a4:	4798      	blx	r3
                --flightNumbToCheck;
    22a6:	b2e4      	uxtb	r4, r4
    22a8:	e7f2      	b.n	2290 <findNewFlightStart+0x68>
            }
            delay_ms(500);
    22aa:	4b07      	ldr	r3, [pc, #28]	; (22c8 <findNewFlightStart+0xa0>)
    22ac:	4798      	blx	r3
            break;
    22ae:	e003      	b.n	22b8 <findNewFlightStart+0x90>



void findNewFlightStart() {

    for (u8_t flightNumbToCheck = 0; flightNumbToCheck < 20; ++flightNumbToCheck) {
    22b0:	3401      	adds	r4, #1
    22b2:	b2e4      	uxtb	r4, r4
    22b4:	2c14      	cmp	r4, #20
    22b6:	d1b9      	bne.n	222c <findNewFlightStart+0x4>
            }
            delay_ms(500);
            break;
        }
    }
}
    22b8:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    22ba:	46c0      	nop			; (mov r8, r8)
    22bc:	000021d1 	.word	0x000021d1
    22c0:	200007bc 	.word	0x200007bc
    22c4:	000021a9 	.word	0x000021a9
    22c8:	0000100d 	.word	0x0000100d
    22cc:	00000255 	.word	0x00000255
    22d0:	000005dc 	.word	0x000005dc
    22d4:	00000d7d 	.word	0x00000d7d
    22d8:	20000521 	.word	0x20000521

000022dc <takeSample>:
#include <util.h>
#include <boardDefines.h>
#include <MS5803.h>

bool takeSample() {
    return SampleBool;
    22dc:	4b01      	ldr	r3, [pc, #4]	; (22e4 <takeSample+0x8>)
    22de:	7818      	ldrb	r0, [r3, #0]
}
    22e0:	4770      	bx	lr
    22e2:	46c0      	nop			; (mov r8, r8)
    22e4:	20000538 	.word	0x20000538

000022e8 <pullSample>:

void pullSample() {
    SampleBool = true;
    22e8:	2201      	movs	r2, #1
    22ea:	4b01      	ldr	r3, [pc, #4]	; (22f0 <pullSample+0x8>)
    22ec:	701a      	strb	r2, [r3, #0]
}
    22ee:	4770      	bx	lr
    22f0:	20000538 	.word	0x20000538

000022f4 <sampleTick>:
    SampleBool = false;
}

sample_t sample;

void sampleTick() {
    22f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    SampleBool = false;
    22f6:	2500      	movs	r5, #0
    22f8:	4b9e      	ldr	r3, [pc, #632]	; (2574 <sampleTick+0x280>)
    SampleBool = false;
}

sample_t sample;

void sampleTick() {
    22fa:	b087      	sub	sp, #28
    SampleBool = false;

    // take last samples time to discover Dt before setting new time
    sample.tickDelta = millis() - sample.sampleTick;
    22fc:	4e9e      	ldr	r6, [pc, #632]	; (2578 <sampleTick+0x284>)
}

sample_t sample;

void sampleTick() {
    SampleBool = false;
    22fe:	701d      	strb	r5, [r3, #0]

    // take last samples time to discover Dt before setting new time
    sample.tickDelta = millis() - sample.sampleTick;
    2300:	47b0      	blx	r6
    2302:	4c9e      	ldr	r4, [pc, #632]	; (257c <sampleTick+0x288>)
    2304:	6863      	ldr	r3, [r4, #4]
    2306:	1ac0      	subs	r0, r0, r3
    2308:	8020      	strh	r0, [r4, #0]
    sample.sampleTick = millis();
    230a:	47b0      	blx	r6
    altimeter.flightTime = sample.sampleTick - offsets.StartupTick;
    230c:	4b9c      	ldr	r3, [pc, #624]	; (2580 <sampleTick+0x28c>)

    sample.voltage.batV = adc_read(senseBatPin);
    230e:	4e9d      	ldr	r6, [pc, #628]	; (2584 <sampleTick+0x290>)
    SampleBool = false;

    // take last samples time to discover Dt before setting new time
    sample.tickDelta = millis() - sample.sampleTick;
    sample.sampleTick = millis();
    altimeter.flightTime = sample.sampleTick - offsets.StartupTick;
    2310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
void sampleTick() {
    SampleBool = false;

    // take last samples time to discover Dt before setting new time
    sample.tickDelta = millis() - sample.sampleTick;
    sample.sampleTick = millis();
    2312:	6060      	str	r0, [r4, #4]
    altimeter.flightTime = sample.sampleTick - offsets.StartupTick;
    2314:	1ac0      	subs	r0, r0, r3
    2316:	4b9c      	ldr	r3, [pc, #624]	; (2588 <sampleTick+0x294>)

    sample.voltage.batV = adc_read(senseBatPin);
    2318:	7831      	ldrb	r1, [r6, #0]
    SampleBool = false;

    // take last samples time to discover Dt before setting new time
    sample.tickDelta = millis() - sample.sampleTick;
    sample.sampleTick = millis();
    altimeter.flightTime = sample.sampleTick - offsets.StartupTick;
    231a:	6098      	str	r0, [r3, #8]

    sample.voltage.batV = adc_read(senseBatPin);
    231c:	7873      	ldrb	r3, [r6, #1]
    231e:	78b0      	ldrb	r0, [r6, #2]
    2320:	021b      	lsls	r3, r3, #8
    2322:	430b      	orrs	r3, r1
    2324:	0400      	lsls	r0, r0, #16
    2326:	001a      	movs	r2, r3
    2328:	0003      	movs	r3, r0
    232a:	78f0      	ldrb	r0, [r6, #3]
    232c:	4313      	orrs	r3, r2
    232e:	0600      	lsls	r0, r0, #24
    2330:	7931      	ldrb	r1, [r6, #4]
    2332:	4318      	orrs	r0, r3
    2334:	4b95      	ldr	r3, [pc, #596]	; (258c <sampleTick+0x298>)
    2336:	4798      	blx	r3
    sample.voltage.batFloat = sample.voltage.batV * 0.0019;
    2338:	4b95      	ldr	r3, [pc, #596]	; (2590 <sampleTick+0x29c>)
    // take last samples time to discover Dt before setting new time
    sample.tickDelta = millis() - sample.sampleTick;
    sample.sampleTick = millis();
    altimeter.flightTime = sample.sampleTick - offsets.StartupTick;

    sample.voltage.batV = adc_read(senseBatPin);
    233a:	8120      	strh	r0, [r4, #8]
    sample.voltage.batFloat = sample.voltage.batV * 0.0019;
    233c:	4798      	blx	r3
    233e:	4a95      	ldr	r2, [pc, #596]	; (2594 <sampleTick+0x2a0>)
    2340:	4f95      	ldr	r7, [pc, #596]	; (2598 <sampleTick+0x2a4>)
    2342:	4b96      	ldr	r3, [pc, #600]	; (259c <sampleTick+0x2a8>)
    2344:	47b8      	blx	r7
    2346:	4b96      	ldr	r3, [pc, #600]	; (25a0 <sampleTick+0x2ac>)
    2348:	4798      	blx	r3

    sample.voltage.senseA = adc_read(senseAPin);
    234a:	79b3      	ldrb	r3, [r6, #6]
    234c:	7971      	ldrb	r1, [r6, #5]
    sample.tickDelta = millis() - sample.sampleTick;
    sample.sampleTick = millis();
    altimeter.flightTime = sample.sampleTick - offsets.StartupTick;

    sample.voltage.batV = adc_read(senseBatPin);
    sample.voltage.batFloat = sample.voltage.batV * 0.0019;
    234e:	60e0      	str	r0, [r4, #12]

    sample.voltage.senseA = adc_read(senseAPin);
    2350:	79f0      	ldrb	r0, [r6, #7]
    2352:	021b      	lsls	r3, r3, #8
    2354:	430b      	orrs	r3, r1
    2356:	0400      	lsls	r0, r0, #16
    2358:	4303      	orrs	r3, r0
    235a:	7a30      	ldrb	r0, [r6, #8]
    235c:	7a71      	ldrb	r1, [r6, #9]
    235e:	0600      	lsls	r0, r0, #24
    2360:	4318      	orrs	r0, r3
    2362:	4b8a      	ldr	r3, [pc, #552]	; (258c <sampleTick+0x298>)
    2364:	4798      	blx	r3
    sample.voltage.senseB = adc_read(senseBPin);
    2366:	7af3      	ldrb	r3, [r6, #11]
    2368:	7ab1      	ldrb	r1, [r6, #10]
    altimeter.flightTime = sample.sampleTick - offsets.StartupTick;

    sample.voltage.batV = adc_read(senseBatPin);
    sample.voltage.batFloat = sample.voltage.batV * 0.0019;

    sample.voltage.senseA = adc_read(senseAPin);
    236a:	8220      	strh	r0, [r4, #16]
    sample.voltage.senseB = adc_read(senseBPin);
    236c:	7b30      	ldrb	r0, [r6, #12]
    236e:	021b      	lsls	r3, r3, #8
    2370:	430b      	orrs	r3, r1
    2372:	0400      	lsls	r0, r0, #16
    2374:	4303      	orrs	r3, r0
    2376:	7b70      	ldrb	r0, [r6, #13]
    2378:	7bb1      	ldrb	r1, [r6, #14]
    237a:	0600      	lsls	r0, r0, #24
    237c:	4318      	orrs	r0, r3
    237e:	4b83      	ldr	r3, [pc, #524]	; (258c <sampleTick+0x298>)
    2380:	4798      	blx	r3
    sample.voltage.senseC = adc_read(senseCPin);
    2382:	7c33      	ldrb	r3, [r6, #16]
    2384:	7bf1      	ldrb	r1, [r6, #15]

    sample.voltage.batV = adc_read(senseBatPin);
    sample.voltage.batFloat = sample.voltage.batV * 0.0019;

    sample.voltage.senseA = adc_read(senseAPin);
    sample.voltage.senseB = adc_read(senseBPin);
    2386:	8260      	strh	r0, [r4, #18]
    sample.voltage.senseC = adc_read(senseCPin);
    2388:	7c70      	ldrb	r0, [r6, #17]
    238a:	021b      	lsls	r3, r3, #8
    238c:	430b      	orrs	r3, r1
    238e:	0400      	lsls	r0, r0, #16
    2390:	4303      	orrs	r3, r0
    2392:	7cb0      	ldrb	r0, [r6, #18]
    2394:	7cf1      	ldrb	r1, [r6, #19]
    2396:	0600      	lsls	r0, r0, #24
    2398:	4318      	orrs	r0, r3
    239a:	4b7c      	ldr	r3, [pc, #496]	; (258c <sampleTick+0x298>)
    239c:	4798      	blx	r3
    sample.voltage.senseD = adc_read(senseDPin);
    239e:	7d73      	ldrb	r3, [r6, #21]
    23a0:	7d31      	ldrb	r1, [r6, #20]
    sample.voltage.batV = adc_read(senseBatPin);
    sample.voltage.batFloat = sample.voltage.batV * 0.0019;

    sample.voltage.senseA = adc_read(senseAPin);
    sample.voltage.senseB = adc_read(senseBPin);
    sample.voltage.senseC = adc_read(senseCPin);
    23a2:	82a0      	strh	r0, [r4, #20]
    sample.voltage.senseD = adc_read(senseDPin);
    23a4:	7db0      	ldrb	r0, [r6, #22]
    23a6:	021b      	lsls	r3, r3, #8
    23a8:	430b      	orrs	r3, r1
    23aa:	0400      	lsls	r0, r0, #16
    23ac:	001a      	movs	r2, r3
    23ae:	0003      	movs	r3, r0
    23b0:	7df0      	ldrb	r0, [r6, #23]
    23b2:	4313      	orrs	r3, r2
    23b4:	0600      	lsls	r0, r0, #24
    23b6:	7e31      	ldrb	r1, [r6, #24]
    23b8:	4318      	orrs	r0, r3
    23ba:	4b74      	ldr	r3, [pc, #464]	; (258c <sampleTick+0x298>)
    23bc:	4798      	blx	r3

    sample.analogRaw = adc_read(analogAccelPin);
    23be:	7eb3      	ldrb	r3, [r6, #26]
    23c0:	7e71      	ldrb	r1, [r6, #25]
    sample.voltage.batFloat = sample.voltage.batV * 0.0019;

    sample.voltage.senseA = adc_read(senseAPin);
    sample.voltage.senseB = adc_read(senseBPin);
    sample.voltage.senseC = adc_read(senseCPin);
    sample.voltage.senseD = adc_read(senseDPin);
    23c2:	82e0      	strh	r0, [r4, #22]

    sample.analogRaw = adc_read(analogAccelPin);
    23c4:	7ef0      	ldrb	r0, [r6, #27]
    23c6:	021b      	lsls	r3, r3, #8
    23c8:	430b      	orrs	r3, r1
    23ca:	0400      	lsls	r0, r0, #16
    23cc:	4303      	orrs	r3, r0
    23ce:	7f30      	ldrb	r0, [r6, #28]
    23d0:	7f71      	ldrb	r1, [r6, #29]
    23d2:	0600      	lsls	r0, r0, #24
    23d4:	4318      	orrs	r0, r3
    23d6:	4b6d      	ldr	r3, [pc, #436]	; (258c <sampleTick+0x298>)
    23d8:	4798      	blx	r3
    sample.analogAccel = (sample.analogRaw - 3900) * -0.0154;
    23da:	4b72      	ldr	r3, [pc, #456]	; (25a4 <sampleTick+0x2b0>)
    sample.voltage.senseA = adc_read(senseAPin);
    sample.voltage.senseB = adc_read(senseBPin);
    sample.voltage.senseC = adc_read(senseCPin);
    sample.voltage.senseD = adc_read(senseDPin);

    sample.analogRaw = adc_read(analogAccelPin);
    23dc:	8320      	strh	r0, [r4, #24]
    sample.analogAccel = (sample.analogRaw - 3900) * -0.0154;
    23de:	18c0      	adds	r0, r0, r3
    23e0:	4b6b      	ldr	r3, [pc, #428]	; (2590 <sampleTick+0x29c>)
    23e2:	4798      	blx	r3
    23e4:	4a70      	ldr	r2, [pc, #448]	; (25a8 <sampleTick+0x2b4>)
    23e6:	4e6c      	ldr	r6, [pc, #432]	; (2598 <sampleTick+0x2a4>)
    23e8:	4b70      	ldr	r3, [pc, #448]	; (25ac <sampleTick+0x2b8>)
    23ea:	47b0      	blx	r6
    23ec:	4b6c      	ldr	r3, [pc, #432]	; (25a0 <sampleTick+0x2ac>)
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    23ee:	2680      	movs	r6, #128	; 0x80
    23f0:	4798      	blx	r3
    23f2:	4b6f      	ldr	r3, [pc, #444]	; (25b0 <sampleTick+0x2bc>)
    23f4:	01f6      	lsls	r6, r6, #7
    23f6:	61e0      	str	r0, [r4, #28]

    uint8_t dummy_Tx = 0xFF;
    uint8_t dummy_rx;

    pinLow(cs_baro);
    spiDataTransfer(SPI2, 0x50);
    23f8:	2150      	movs	r1, #80	; 0x50
    23fa:	615e      	str	r6, [r3, #20]
    23fc:	2002      	movs	r0, #2
    23fe:	4b6d      	ldr	r3, [pc, #436]	; (25b4 <sampleTick+0x2c0>)
    2400:	4798      	blx	r3
    pinHigh(cs_baro);
    delay_us(600);
    2402:	2096      	movs	r0, #150	; 0x96
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    2404:	4b6a      	ldr	r3, [pc, #424]	; (25b0 <sampleTick+0x2bc>)
    2406:	0080      	lsls	r0, r0, #2
    2408:	619e      	str	r6, [r3, #24]
    240a:	4b6b      	ldr	r3, [pc, #428]	; (25b8 <sampleTick+0x2c4>)
    240c:	4798      	blx	r3
    uint32_t tempRaw = readMS5803AdcResults();
    240e:	4b6b      	ldr	r3, [pc, #428]	; (25bc <sampleTick+0x2c8>)
    2410:	4798      	blx	r3
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    2412:	4b67      	ldr	r3, [pc, #412]	; (25b0 <sampleTick+0x2bc>)
    2414:	9001      	str	r0, [sp, #4]

    pinLow(cs_baro);
    spiDataTransfer(SPI2, 0x40);
    2416:	2140      	movs	r1, #64	; 0x40
    2418:	615e      	str	r6, [r3, #20]
    241a:	2002      	movs	r0, #2
    241c:	4b65      	ldr	r3, [pc, #404]	; (25b4 <sampleTick+0x2c0>)
    241e:	4798      	blx	r3
    2420:	2280      	movs	r2, #128	; 0x80
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    2422:	4b63      	ldr	r3, [pc, #396]	; (25b0 <sampleTick+0x2bc>)
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    2424:	00d2      	lsls	r2, r2, #3
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    2426:	619e      	str	r6, [r3, #24]
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    2428:	3394      	adds	r3, #148	; 0x94
    242a:	601a      	str	r2, [r3, #0]

    u8_t byteOne;
    u8_t byteTwo;
// Accel data
    pinLow(cs_accel);
    spiDataTransfer(SPI0, BMI055_X_ACC_LSB | BMI055_READ_REG);
    242c:	2182      	movs	r1, #130	; 0x82
    242e:	4b61      	ldr	r3, [pc, #388]	; (25b4 <sampleTick+0x2c0>)
    2430:	0028      	movs	r0, r5
    2432:	4798      	blx	r3
    byteOne = spiDataIn(SPI0);
    2434:	4e62      	ldr	r6, [pc, #392]	; (25c0 <sampleTick+0x2cc>)
    2436:	0028      	movs	r0, r5
    2438:	47b0      	blx	r6
    243a:	0007      	movs	r7, r0
    byteTwo = spiDataIn(SPI0);
    243c:	0028      	movs	r0, r5
    243e:	47b0      	blx	r6
    sample.altitudefeet = paToFeetNOAA(sample.pressureMbar);
}

int16_t twosComp(u8_t byteOne, u8_t byteTwo) {

    u16_t comp = byteOne | (byteTwo << 8);
    2440:	0200      	lsls	r0, r0, #8
    2442:	4307      	orrs	r7, r0
    2444:	b23b      	sxth	r3, r7
    pinLow(cs_accel);
    spiDataTransfer(SPI0, BMI055_X_ACC_LSB | BMI055_READ_REG);
    byteOne = spiDataIn(SPI0);
    byteTwo = spiDataIn(SPI0);
    int16_t accelXint = twosComp(byteOne,byteTwo);
    byteOne = spiDataIn(SPI0);
    2446:	0028      	movs	r0, r5
    sample.altitudefeet = paToFeetNOAA(sample.pressureMbar);
}

int16_t twosComp(u8_t byteOne, u8_t byteTwo) {

    u16_t comp = byteOne | (byteTwo << 8);
    2448:	9303      	str	r3, [sp, #12]
    pinLow(cs_accel);
    spiDataTransfer(SPI0, BMI055_X_ACC_LSB | BMI055_READ_REG);
    byteOne = spiDataIn(SPI0);
    byteTwo = spiDataIn(SPI0);
    int16_t accelXint = twosComp(byteOne,byteTwo);
    byteOne = spiDataIn(SPI0);
    244a:	47b0      	blx	r6
    244c:	0007      	movs	r7, r0
    byteTwo = spiDataIn(SPI0);
    244e:	0028      	movs	r0, r5
    2450:	47b0      	blx	r6
    sample.altitudefeet = paToFeetNOAA(sample.pressureMbar);
}

int16_t twosComp(u8_t byteOne, u8_t byteTwo) {

    u16_t comp = byteOne | (byteTwo << 8);
    2452:	0200      	lsls	r0, r0, #8
    2454:	4307      	orrs	r7, r0
    2456:	b23b      	sxth	r3, r7
    byteTwo = spiDataIn(SPI0);
    int16_t accelXint = twosComp(byteOne,byteTwo);
    byteOne = spiDataIn(SPI0);
    byteTwo = spiDataIn(SPI0);
    int16_t accelYint = twosComp(byteOne,byteTwo);
    byteOne = spiDataIn(SPI0);
    2458:	0028      	movs	r0, r5
    sample.altitudefeet = paToFeetNOAA(sample.pressureMbar);
}

int16_t twosComp(u8_t byteOne, u8_t byteTwo) {

    u16_t comp = byteOne | (byteTwo << 8);
    245a:	9302      	str	r3, [sp, #8]
    byteTwo = spiDataIn(SPI0);
    int16_t accelXint = twosComp(byteOne,byteTwo);
    byteOne = spiDataIn(SPI0);
    byteTwo = spiDataIn(SPI0);
    int16_t accelYint = twosComp(byteOne,byteTwo);
    byteOne = spiDataIn(SPI0);
    245c:	47b0      	blx	r6
    245e:	9004      	str	r0, [sp, #16]
    byteTwo = spiDataIn(SPI0);
    2460:	0028      	movs	r0, r5
    2462:	47b0      	blx	r6
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    2464:	2280      	movs	r2, #128	; 0x80
    2466:	4b52      	ldr	r3, [pc, #328]	; (25b0 <sampleTick+0x2bc>)
    2468:	00d2      	lsls	r2, r2, #3
    246a:	3398      	adds	r3, #152	; 0x98
    246c:	9005      	str	r0, [sp, #20]
    246e:	601a      	str	r2, [r3, #0]

    accelXint =  accelXint >> 4;
    accelYint =  accelYint >> 4;
    accelZint =  accelZint >> 4;

    sample.accelX =  accelXint * BMI055_ACCEL_16G_DIV;
    2470:	9b03      	ldr	r3, [sp, #12]
    2472:	1118      	asrs	r0, r3, #4
    2474:	4b46      	ldr	r3, [pc, #280]	; (2590 <sampleTick+0x29c>)
    2476:	4798      	blx	r3
    2478:	23fe      	movs	r3, #254	; 0xfe
    247a:	2200      	movs	r2, #0
    247c:	4f46      	ldr	r7, [pc, #280]	; (2598 <sampleTick+0x2a4>)
    247e:	059b      	lsls	r3, r3, #22
    2480:	47b8      	blx	r7
    2482:	4b47      	ldr	r3, [pc, #284]	; (25a0 <sampleTick+0x2ac>)
    2484:	4798      	blx	r3
    sample.accelY =  accelYint * BMI055_ACCEL_16G_DIV;
    2486:	9b02      	ldr	r3, [sp, #8]

    accelXint =  accelXint >> 4;
    accelYint =  accelYint >> 4;
    accelZint =  accelZint >> 4;

    sample.accelX =  accelXint * BMI055_ACCEL_16G_DIV;
    2488:	6220      	str	r0, [r4, #32]
    sample.accelY =  accelYint * BMI055_ACCEL_16G_DIV;
    248a:	1118      	asrs	r0, r3, #4
    248c:	4b40      	ldr	r3, [pc, #256]	; (2590 <sampleTick+0x29c>)
    248e:	4798      	blx	r3
    2490:	23fe      	movs	r3, #254	; 0xfe
    2492:	2200      	movs	r2, #0
    2494:	059b      	lsls	r3, r3, #22
    2496:	47b8      	blx	r7
    2498:	4b41      	ldr	r3, [pc, #260]	; (25a0 <sampleTick+0x2ac>)
    249a:	4798      	blx	r3
    sample.accelZ = -accelZint * BMI055_ACCEL_16G_DIV;
    249c:	9b05      	ldr	r3, [sp, #20]
    accelXint =  accelXint >> 4;
    accelYint =  accelYint >> 4;
    accelZint =  accelZint >> 4;

    sample.accelX =  accelXint * BMI055_ACCEL_16G_DIV;
    sample.accelY =  accelYint * BMI055_ACCEL_16G_DIV;
    249e:	6260      	str	r0, [r4, #36]	; 0x24
    sample.accelZ = -accelZint * BMI055_ACCEL_16G_DIV;
    24a0:	021f      	lsls	r7, r3, #8
    24a2:	9b04      	ldr	r3, [sp, #16]
    24a4:	431f      	orrs	r7, r3
    24a6:	b238      	sxth	r0, r7
    24a8:	1100      	asrs	r0, r0, #4
    24aa:	4b39      	ldr	r3, [pc, #228]	; (2590 <sampleTick+0x29c>)
    24ac:	4240      	negs	r0, r0
    24ae:	4798      	blx	r3
    24b0:	23fe      	movs	r3, #254	; 0xfe
    24b2:	2200      	movs	r2, #0
    24b4:	4f38      	ldr	r7, [pc, #224]	; (2598 <sampleTick+0x2a4>)
    24b6:	059b      	lsls	r3, r3, #22
    24b8:	47b8      	blx	r7
    24ba:	4b39      	ldr	r3, [pc, #228]	; (25a0 <sampleTick+0x2ac>)
    24bc:	4798      	blx	r3
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    24be:	2280      	movs	r2, #128	; 0x80
    24c0:	4b3b      	ldr	r3, [pc, #236]	; (25b0 <sampleTick+0x2bc>)
    24c2:	00d2      	lsls	r2, r2, #3

    // Gyro data
    pinLow(cs_gyro);
    spiDataTransfer(SPI0, BMI055_X_GYRO_LSB | BMI055_READ_REG);
    24c4:	2182      	movs	r1, #130	; 0x82
    accelYint =  accelYint >> 4;
    accelZint =  accelZint >> 4;

    sample.accelX =  accelXint * BMI055_ACCEL_16G_DIV;
    sample.accelY =  accelYint * BMI055_ACCEL_16G_DIV;
    sample.accelZ = -accelZint * BMI055_ACCEL_16G_DIV;
    24c6:	62a0      	str	r0, [r4, #40]	; 0x28
    24c8:	615a      	str	r2, [r3, #20]

    // Gyro data
    pinLow(cs_gyro);
    spiDataTransfer(SPI0, BMI055_X_GYRO_LSB | BMI055_READ_REG);
    24ca:	0028      	movs	r0, r5
    24cc:	4b39      	ldr	r3, [pc, #228]	; (25b4 <sampleTick+0x2c0>)
    24ce:	4798      	blx	r3
    byteOne = spiDataIn(SPI0);
    24d0:	0028      	movs	r0, r5
    24d2:	47b0      	blx	r6
    24d4:	0007      	movs	r7, r0
    byteTwo = spiDataIn(SPI0);
    24d6:	0028      	movs	r0, r5
    24d8:	47b0      	blx	r6
    sample.altitudefeet = paToFeetNOAA(sample.pressureMbar);
}

int16_t twosComp(u8_t byteOne, u8_t byteTwo) {

    u16_t comp = byteOne | (byteTwo << 8);
    24da:	0200      	lsls	r0, r0, #8
    24dc:	4307      	orrs	r7, r0
    24de:	b23b      	sxth	r3, r7
    pinLow(cs_gyro);
    spiDataTransfer(SPI0, BMI055_X_GYRO_LSB | BMI055_READ_REG);
    byteOne = spiDataIn(SPI0);
    byteTwo = spiDataIn(SPI0);
    int16_t gyroXint = twosComp(byteOne,byteTwo);
    byteOne = spiDataIn(SPI0);
    24e0:	0028      	movs	r0, r5
    sample.altitudefeet = paToFeetNOAA(sample.pressureMbar);
}

int16_t twosComp(u8_t byteOne, u8_t byteTwo) {

    u16_t comp = byteOne | (byteTwo << 8);
    24e2:	9303      	str	r3, [sp, #12]
    pinLow(cs_gyro);
    spiDataTransfer(SPI0, BMI055_X_GYRO_LSB | BMI055_READ_REG);
    byteOne = spiDataIn(SPI0);
    byteTwo = spiDataIn(SPI0);
    int16_t gyroXint = twosComp(byteOne,byteTwo);
    byteOne = spiDataIn(SPI0);
    24e4:	47b0      	blx	r6
    24e6:	0007      	movs	r7, r0
    byteTwo = spiDataIn(SPI0);
    24e8:	0028      	movs	r0, r5
    24ea:	47b0      	blx	r6
    sample.altitudefeet = paToFeetNOAA(sample.pressureMbar);
}

int16_t twosComp(u8_t byteOne, u8_t byteTwo) {

    u16_t comp = byteOne | (byteTwo << 8);
    24ec:	0200      	lsls	r0, r0, #8
    24ee:	4307      	orrs	r7, r0
    24f0:	b23b      	sxth	r3, r7
    byteTwo = spiDataIn(SPI0);
    int16_t gyroXint = twosComp(byteOne,byteTwo);
    byteOne = spiDataIn(SPI0);
    byteTwo = spiDataIn(SPI0);
    int16_t gyroYint = twosComp(byteOne,byteTwo);
    byteOne = spiDataIn(SPI0);
    24f2:	0028      	movs	r0, r5
    sample.altitudefeet = paToFeetNOAA(sample.pressureMbar);
}

int16_t twosComp(u8_t byteOne, u8_t byteTwo) {

    u16_t comp = byteOne | (byteTwo << 8);
    24f4:	9302      	str	r3, [sp, #8]
    byteTwo = spiDataIn(SPI0);
    int16_t gyroXint = twosComp(byteOne,byteTwo);
    byteOne = spiDataIn(SPI0);
    byteTwo = spiDataIn(SPI0);
    int16_t gyroYint = twosComp(byteOne,byteTwo);
    byteOne = spiDataIn(SPI0);
    24f6:	47b0      	blx	r6
    24f8:	0007      	movs	r7, r0
    byteTwo = spiDataIn(SPI0);
    24fa:	0028      	movs	r0, r5
    24fc:	47b0      	blx	r6
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    24fe:	2280      	movs	r2, #128	; 0x80
    2500:	4b2b      	ldr	r3, [pc, #172]	; (25b0 <sampleTick+0x2bc>)
    2502:	00d2      	lsls	r2, r2, #3
    2504:	619a      	str	r2, [r3, #24]

    gyroXint = gyroXint >> 4;
    gyroYint = gyroYint >> 4;
    gyroZint = gyroZint >> 4;

    sample.gyroX =  gyroXint * BMI055_GYRO_2000DS_DIV;
    2506:	9b03      	ldr	r3, [sp, #12]
    int16_t gyroXint = twosComp(byteOne,byteTwo);
    byteOne = spiDataIn(SPI0);
    byteTwo = spiDataIn(SPI0);
    int16_t gyroYint = twosComp(byteOne,byteTwo);
    byteOne = spiDataIn(SPI0);
    byteTwo = spiDataIn(SPI0);
    2508:	0005      	movs	r5, r0

    gyroXint = gyroXint >> 4;
    gyroYint = gyroYint >> 4;
    gyroZint = gyroZint >> 4;

    sample.gyroX =  gyroXint * BMI055_GYRO_2000DS_DIV;
    250a:	1118      	asrs	r0, r3, #4
    250c:	4b20      	ldr	r3, [pc, #128]	; (2590 <sampleTick+0x29c>)
    250e:	4798      	blx	r3
    2510:	23fe      	movs	r3, #254	; 0xfe
    2512:	4e21      	ldr	r6, [pc, #132]	; (2598 <sampleTick+0x2a4>)
    2514:	2200      	movs	r2, #0
    2516:	059b      	lsls	r3, r3, #22
    2518:	47b0      	blx	r6
    251a:	4b21      	ldr	r3, [pc, #132]	; (25a0 <sampleTick+0x2ac>)
    251c:	4798      	blx	r3
    sample.gyroY =  gyroYint * BMI055_GYRO_2000DS_DIV;
    251e:	9b02      	ldr	r3, [sp, #8]

    gyroXint = gyroXint >> 4;
    gyroYint = gyroYint >> 4;
    gyroZint = gyroZint >> 4;

    sample.gyroX =  gyroXint * BMI055_GYRO_2000DS_DIV;
    2520:	62e0      	str	r0, [r4, #44]	; 0x2c
    sample.gyroY =  gyroYint * BMI055_GYRO_2000DS_DIV;
    2522:	1118      	asrs	r0, r3, #4
    2524:	4b1a      	ldr	r3, [pc, #104]	; (2590 <sampleTick+0x29c>)
    2526:	4798      	blx	r3
    2528:	23fe      	movs	r3, #254	; 0xfe
    252a:	2200      	movs	r2, #0
    252c:	059b      	lsls	r3, r3, #22
    252e:	47b0      	blx	r6
    2530:	4b1b      	ldr	r3, [pc, #108]	; (25a0 <sampleTick+0x2ac>)
    2532:	4798      	blx	r3
    2534:	6320      	str	r0, [r4, #48]	; 0x30
    sample.gyroZ =  gyroZint * BMI055_GYRO_2000DS_DIV;
    2536:	0228      	lsls	r0, r5, #8
    2538:	4307      	orrs	r7, r0
    253a:	b238      	sxth	r0, r7
    253c:	4b14      	ldr	r3, [pc, #80]	; (2590 <sampleTick+0x29c>)
    253e:	1100      	asrs	r0, r0, #4
    2540:	4798      	blx	r3
    2542:	23fe      	movs	r3, #254	; 0xfe
    2544:	2200      	movs	r2, #0
    2546:	059b      	lsls	r3, r3, #22
    2548:	47b0      	blx	r6
    254a:	4b15      	ldr	r3, [pc, #84]	; (25a0 <sampleTick+0x2ac>)
    254c:	4798      	blx	r3
    254e:	6360      	str	r0, [r4, #52]	; 0x34


    delay_us(400);
    2550:	20c8      	movs	r0, #200	; 0xc8
    2552:	4b19      	ldr	r3, [pc, #100]	; (25b8 <sampleTick+0x2c4>)
    2554:	0040      	lsls	r0, r0, #1
    2556:	4798      	blx	r3
    u32_t PressureRaw = readMS5803AdcResults();
    2558:	4b18      	ldr	r3, [pc, #96]	; (25bc <sampleTick+0x2c8>)
    255a:	4798      	blx	r3
    ConvertPressureTemperature(PressureRaw, tempRaw, &sample.temperatureCelcus, &sample.pressureMbar);
    255c:	4a19      	ldr	r2, [pc, #100]	; (25c4 <sampleTick+0x2d0>)
    255e:	9901      	ldr	r1, [sp, #4]
    2560:	4b19      	ldr	r3, [pc, #100]	; (25c8 <sampleTick+0x2d4>)
    2562:	4d1a      	ldr	r5, [pc, #104]	; (25cc <sampleTick+0x2d8>)
    2564:	47a8      	blx	r5
    sample.altitudefeet = paToFeetNOAA(sample.pressureMbar);
    2566:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    2568:	4b19      	ldr	r3, [pc, #100]	; (25d0 <sampleTick+0x2dc>)
    256a:	4798      	blx	r3
    256c:	6420      	str	r0, [r4, #64]	; 0x40
    256e:	6461      	str	r1, [r4, #68]	; 0x44
}
    2570:	b007      	add	sp, #28
    2572:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2574:	20000538 	.word	0x20000538
    2578:	00001059 	.word	0x00001059
    257c:	200007c8 	.word	0x200007c8
    2580:	200004d8 	.word	0x200004d8
    2584:	000063f4 	.word	0x000063f4
    2588:	20000528 	.word	0x20000528
    258c:	00000d15 	.word	0x00000d15
    2590:	00005c95 	.word	0x00005c95
    2594:	77318fc5 	.word	0x77318fc5
    2598:	0000504d 	.word	0x0000504d
    259c:	3f5f212d 	.word	0x3f5f212d
    25a0:	00005e31 	.word	0x00005e31
    25a4:	fffff0c4 	.word	0xfffff0c4
    25a8:	02de00d2 	.word	0x02de00d2
    25ac:	bf8f8a09 	.word	0xbf8f8a09
    25b0:	41004400 	.word	0x41004400
    25b4:	000026e5 	.word	0x000026e5
    25b8:	00000fdd 	.word	0x00000fdd
    25bc:	0000041d 	.word	0x0000041d
    25c0:	000026fd 	.word	0x000026fd
    25c4:	20000804 	.word	0x20000804
    25c8:	20000800 	.word	0x20000800
    25cc:	0000045d 	.word	0x0000045d
    25d0:	000004fd 	.word	0x000004fd

000025d4 <sercomClockEnable>:
#include <util.h>

void sercomClockEnable(SercomId id, uint32_t clock_channel, u8_t divider) {
    25d4:	b570      	push	{r4, r5, r6, lr}
    25d6:	0004      	movs	r4, r0
    // prevent this clock write from changing any other clocks
    PM->APBCMASK.reg |= 1 << (PM_APBCMASK_SERCOM0_Pos + id);
    25d8:	2301      	movs	r3, #1
    25da:	1ca6      	adds	r6, r4, #2
    25dc:	40b3      	lsls	r3, r6
    25de:	480d      	ldr	r0, [pc, #52]	; (2614 <sercomClockEnable+0x40>)
#include <util.h>

void sercomClockEnable(SercomId id, uint32_t clock_channel, u8_t divider) {
    25e0:	000d      	movs	r5, r1
    // prevent this clock write from changing any other clocks
    PM->APBCMASK.reg |= 1 << (PM_APBCMASK_SERCOM0_Pos + id);
    25e2:	6a01      	ldr	r1, [r0, #32]
    25e4:	430b      	orrs	r3, r1
    25e6:	6203      	str	r3, [r0, #32]


    if (clock_channel != 0) {
    25e8:	2d00      	cmp	r5, #0
    25ea:	d003      	beq.n	25f4 <sercomClockEnable+0x20>
        // clock generators 3-8 have 8 division factor bits - DIV[7:0]
        gclkEnable(clock_channel, GCLK_SOURCE_DFLL48M, divider);
    25ec:	2107      	movs	r1, #7
    25ee:	0028      	movs	r0, r5
    25f0:	4b09      	ldr	r3, [pc, #36]	; (2618 <sercomClockEnable+0x44>)
    25f2:	4798      	blx	r3
    }


    // attach clock
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
    25f4:	22f0      	movs	r2, #240	; 0xf0
    25f6:	2080      	movs	r0, #128	; 0x80
    25f8:	0229      	lsls	r1, r5, #8
    25fa:	0112      	lsls	r2, r2, #4
    25fc:	4011      	ands	r1, r2
    25fe:	01c0      	lsls	r0, r0, #7
    2600:	4301      	orrs	r1, r0
    2602:	0020      	movs	r0, r4
    2604:	3014      	adds	r0, #20
    2606:	223f      	movs	r2, #63	; 0x3f
    2608:	0003      	movs	r3, r0
    260a:	4013      	ands	r3, r2
    260c:	4319      	orrs	r1, r3
    260e:	4b03      	ldr	r3, [pc, #12]	; (261c <sercomClockEnable+0x48>)
    2610:	8059      	strh	r1, [r3, #2]
                        GCLK_CLKCTRL_GEN(clock_channel) |
                        GCLK_CLKCTRL_ID(SERCOM0_GCLK_ID_CORE + id);
}
    2612:	bd70      	pop	{r4, r5, r6, pc}
    2614:	40000400 	.word	0x40000400
    2618:	00000f8d 	.word	0x00000f8d
    261c:	40000c00 	.word	0x40000c00

00002620 <sercomReset>:
void computeKalmanStates();



inline static Sercom* sercom(SercomId id) {
    return (Sercom*) (0x42000800U + id * 1024);
    2620:	4b04      	ldr	r3, [pc, #16]	; (2634 <sercomReset+0x14>)
    2622:	0280      	lsls	r0, r0, #10
    2624:	18c0      	adds	r0, r0, r3


void sercomReset(SercomId id) {
    sercom(id)->SPI.CTRLA.reg = SERCOM_SPI_CTRLA_SWRST;
    2626:	2301      	movs	r3, #1
    2628:	6003      	str	r3, [r0, #0]
    while(sercom(id)->SPI.CTRLA.reg & SERCOM_SPI_CTRLA_SWRST);
    262a:	6802      	ldr	r2, [r0, #0]
    262c:	421a      	tst	r2, r3
    262e:	d1fc      	bne.n	262a <sercomReset+0xa>
}
    2630:	4770      	bx	lr
    2632:	46c0      	nop			; (mov r8, r8)
    2634:	42000800 	.word	0x42000800

00002638 <sercomSpiMasterInit>:
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
}


void sercomSpiMasterInit(SercomId id, u32_t dipo, u32_t dopo, bool cpol, bool cpha, u8_t baud) {
    2638:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    263a:	0004      	movs	r4, r0
    263c:	9300      	str	r3, [sp, #0]
    263e:	ab08      	add	r3, sp, #32
    2640:	781b      	ldrb	r3, [r3, #0]
    2642:	000e      	movs	r6, r1
    2644:	9301      	str	r3, [sp, #4]
    2646:	ab09      	add	r3, sp, #36	; 0x24
    2648:	781f      	ldrb	r7, [r3, #0]

    sercomReset(id);
    264a:	4b12      	ldr	r3, [pc, #72]	; (2694 <sercomSpiMasterInit+0x5c>)
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
}


void sercomSpiMasterInit(SercomId id, u32_t dipo, u32_t dopo, bool cpol, bool cpha, u8_t baud) {
    264c:	0015      	movs	r5, r2

    sercomReset(id);
    264e:	4798      	blx	r3
    2650:	4b11      	ldr	r3, [pc, #68]	; (2698 <sercomSpiMasterInit+0x60>)
    2652:	02a4      	lsls	r4, r4, #10
    2654:	18e4      	adds	r4, r4, r3

    sercom(id)->SPI.CTRLB.reg
        = SERCOM_SPI_CTRLB_RXEN;
    2656:	2380      	movs	r3, #128	; 0x80
    2658:	029b      	lsls	r3, r3, #10
    265a:	6063      	str	r3, [r4, #4]
    265c:	23c0      	movs	r3, #192	; 0xc0
    sercom(id)->SPI.BAUD.reg = baud;

    sercom(id)->SPI.CTRLA.reg
        = SERCOM_SPI_CTRLA_ENABLE
          | SERCOM_SPI_CTRLA_MODE_SPI_MASTER
          | SERCOM_SPI_CTRLA_DIPO(dipo)
    265e:	21c0      	movs	r1, #192	; 0xc0
    2660:	042d      	lsls	r5, r5, #16
    2662:	029b      	lsls	r3, r3, #10
    2664:	402b      	ands	r3, r5
    2666:	250e      	movs	r5, #14
    2668:	0536      	lsls	r6, r6, #20
    266a:	0389      	lsls	r1, r1, #14
    266c:	4031      	ands	r1, r6
          | SERCOM_SPI_CTRLA_DOPO(dopo)
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
    266e:	9e00      	ldr	r6, [sp, #0]
    2670:	431d      	orrs	r5, r3
    2672:	1e73      	subs	r3, r6, #1
    2674:	419e      	sbcs	r6, r3
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
    2676:	9b01      	ldr	r3, [sp, #4]
    sercom(id)->SPI.CTRLA.reg
        = SERCOM_SPI_CTRLA_ENABLE
          | SERCOM_SPI_CTRLA_MODE_SPI_MASTER
          | SERCOM_SPI_CTRLA_DIPO(dipo)
          | SERCOM_SPI_CTRLA_DOPO(dopo)
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
    2678:	0772      	lsls	r2, r6, #29
    267a:	430d      	orrs	r5, r1
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
    267c:	432a      	orrs	r2, r5
    267e:	1e59      	subs	r1, r3, #1
    2680:	418b      	sbcs	r3, r1
    2682:	0016      	movs	r6, r2
    2684:	071b      	lsls	r3, r3, #28
    2686:	431e      	orrs	r6, r3
    sercomReset(id);

    sercom(id)->SPI.CTRLB.reg
        = SERCOM_SPI_CTRLB_RXEN;

    sercom(id)->SPI.BAUD.reg = baud;
    2688:	7327      	strb	r7, [r4, #12]

    sercom(id)->SPI.CTRLA.reg
        = SERCOM_SPI_CTRLA_ENABLE
    268a:	6026      	str	r6, [r4, #0]
        };
    }
}

static inline void SPI_sync(SercomId id) {
    while  (sercom(id)->SPI.SYNCBUSY.bit.CTRLB);
    268c:	69e3      	ldr	r3, [r4, #28]
    268e:	075b      	lsls	r3, r3, #29
    2690:	d4fc      	bmi.n	268c <sercomSpiMasterInit+0x54>
          | SERCOM_SPI_CTRLA_DOPO(dopo)
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);

    SPI_sync(id);
}
    2692:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    2694:	00002621 	.word	0x00002621
    2698:	42000800 	.word	0x42000800

0000269c <sercomUartInit>:




void sercomUartInit(SercomId id, u32_t rxpo, u32_t txpo, int32_t fBAUD) {
    269c:	b570      	push	{r4, r5, r6, lr}
    269e:	0006      	movs	r6, r0

    //float BAUD = 65536*(1-(16*(115200/(48000000/8))));


    sercomReset(id);
    26a0:	4b0c      	ldr	r3, [pc, #48]	; (26d4 <sercomUartInit+0x38>)
}




void sercomUartInit(SercomId id, u32_t rxpo, u32_t txpo, int32_t fBAUD) {
    26a2:	000d      	movs	r5, r1
    26a4:	0014      	movs	r4, r2

    //float BAUD = 65536*(1-(16*(115200/(48000000/8))));


    sercomReset(id);
    26a6:	4798      	blx	r3
void computeKalmanStates();



inline static Sercom* sercom(SercomId id) {
    return (Sercom*) (0x42000800U + id * 1024);
    26a8:	4b0b      	ldr	r3, [pc, #44]	; (26d8 <sercomUartInit+0x3c>)
    26aa:	02b0      	lsls	r0, r6, #10
    26ac:	18c0      	adds	r0, r0, r3
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    26ae:	2304      	movs	r3, #4
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    26b0:	22c0      	movs	r2, #192	; 0xc0

    //float BAUD = 65536*(1-(16*(115200/(48000000/8))));


    sercomReset(id);
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    26b2:	6003      	str	r3, [r0, #0]
    sercom(id)->USART.BAUD.reg = 45403;
    26b4:	4b09      	ldr	r3, [pc, #36]	; (26dc <sercomUartInit+0x40>)
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    26b6:	0529      	lsls	r1, r5, #20
    //float BAUD = 65536*(1-(16*(115200/(48000000/8))));


    sercomReset(id);
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    sercom(id)->USART.BAUD.reg = 45403;
    26b8:	8183      	strh	r3, [r0, #12]
    sercom(id)->USART.CTRLB.reg
        = SERCOM_USART_CTRLB_RXEN
    26ba:	23c0      	movs	r3, #192	; 0xc0
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    26bc:	0392      	lsls	r2, r2, #14
    26be:	4011      	ands	r1, r2
    26c0:	4a07      	ldr	r2, [pc, #28]	; (26e0 <sercomUartInit+0x44>)

    sercomReset(id);
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    sercom(id)->USART.BAUD.reg = 45403;
    sercom(id)->USART.CTRLB.reg
        = SERCOM_USART_CTRLB_RXEN
    26c2:	029b      	lsls	r3, r3, #10
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    26c4:	0424      	lsls	r4, r4, #16

    sercomReset(id);
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    sercom(id)->USART.BAUD.reg = 45403;
    sercom(id)->USART.CTRLB.reg
        = SERCOM_USART_CTRLB_RXEN
    26c6:	6043      	str	r3, [r0, #4]
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    26c8:	4311      	orrs	r1, r2
    26ca:	4023      	ands	r3, r4
    26cc:	430b      	orrs	r3, r1
    sercom(id)->USART.BAUD.reg = 45403;
    sercom(id)->USART.CTRLB.reg
        = SERCOM_USART_CTRLB_RXEN
          | SERCOM_USART_CTRLB_TXEN;
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
    26ce:	6003      	str	r3, [r0, #0]
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
}
    26d0:	bd70      	pop	{r4, r5, r6, pc}
    26d2:	46c0      	nop			; (mov r8, r8)
    26d4:	00002621 	.word	0x00002621
    26d8:	42000800 	.word	0x42000800
    26dc:	ffffb15b 	.word	0xffffb15b
    26e0:	40000006 	.word	0x40000006

000026e4 <spiDataTransfer>:
    26e4:	4b04      	ldr	r3, [pc, #16]	; (26f8 <spiDataTransfer+0x14>)
    26e6:	0280      	lsls	r0, r0, #10
    26e8:	18c0      	adds	r0, r0, r3

u8_t spiDataTransfer(SercomId id, u8_t data) {
    sercom(id)->SPI.DATA.reg = data;
    26ea:	6281      	str	r1, [r0, #40]	; 0x28
    while(sercom(id)->SPI.INTFLAG.bit.RXC == 0);
    26ec:	7e03      	ldrb	r3, [r0, #24]
    26ee:	075b      	lsls	r3, r3, #29
    26f0:	d5fc      	bpl.n	26ec <spiDataTransfer+0x8>
    return sercom(id)->SPI.DATA.reg;
    26f2:	6a80      	ldr	r0, [r0, #40]	; 0x28
    26f4:	b2c0      	uxtb	r0, r0
}
    26f6:	4770      	bx	lr
    26f8:	42000800 	.word	0x42000800

000026fc <spiDataIn>:
    26fc:	4b05      	ldr	r3, [pc, #20]	; (2714 <spiDataIn+0x18>)
    26fe:	0280      	lsls	r0, r0, #10
    2700:	18c0      	adds	r0, r0, r3
    while(sercom(id)->SPI.INTFLAG.bit.RXC == 0);
    u8_t dummy = sercom(id)->SPI.DATA.reg;
}

u8_t spiDataIn(SercomId id) {
    sercom(id)->SPI.DATA.reg = 0xFF;
    2702:	23ff      	movs	r3, #255	; 0xff
    2704:	6283      	str	r3, [r0, #40]	; 0x28
    while(sercom(id)->SPI.INTFLAG.bit.RXC == 0);
    2706:	7e03      	ldrb	r3, [r0, #24]
    2708:	075b      	lsls	r3, r3, #29
    270a:	d5fc      	bpl.n	2706 <spiDataIn+0xa>
    return sercom(id)->SPI.DATA.reg;
    270c:	6a80      	ldr	r0, [r0, #40]	; 0x28
    270e:	b2c0      	uxtb	r0, r0
}
    2710:	4770      	bx	lr
    2712:	46c0      	nop			; (mov r8, r8)
    2714:	42000800 	.word	0x42000800

00002718 <usartDataOut>:
    2718:	4b04      	ldr	r3, [pc, #16]	; (272c <usartDataOut+0x14>)
    271a:	0280      	lsls	r0, r0, #10
    271c:	18c0      	adds	r0, r0, r3

void usartDataOut(SercomId id, u8_t data) {
    sercom(id)->USART.DATA.reg = data;
    271e:	b289      	uxth	r1, r1
    2720:	8501      	strh	r1, [r0, #40]	; 0x28
    while(sercom(id)->USART.INTFLAG.bit.DRE == 0);
    2722:	7e03      	ldrb	r3, [r0, #24]
    2724:	07db      	lsls	r3, r3, #31
    2726:	d5fc      	bpl.n	2722 <usartDataOut+0xa>
}
    2728:	4770      	bx	lr
    272a:	46c0      	nop			; (mov r8, r8)
    272c:	42000800 	.word	0x42000800

00002730 <usartDataIn>:
    2730:	4b02      	ldr	r3, [pc, #8]	; (273c <usartDataIn+0xc>)
    2732:	0280      	lsls	r0, r0, #10
    2734:	18c0      	adds	r0, r0, r3

u8_t usartDataIn(SercomId id) {
    return sercom(id)->USART.DATA.reg;
    2736:	8d00      	ldrh	r0, [r0, #40]	; 0x28
    2738:	b2c0      	uxtb	r0, r0
}
    273a:	4770      	bx	lr
    273c:	42000800 	.word	0x42000800

00002740 <attemptConnection>:
#include <util.h>
#include <boardDefines.h>


void attemptConnection() {
    2740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

    if (USARTconnectionAvaliable()) {
    2742:	4b2f      	ldr	r3, [pc, #188]	; (2800 <attemptConnection+0xc0>)
    2744:	4798      	blx	r3
    2746:	2800      	cmp	r0, #0
    2748:	d058      	beq.n	27fc <attemptConnection+0xbc>

        flightState = flightIdle;
    274a:	2201      	movs	r2, #1
    274c:	4b2d      	ldr	r3, [pc, #180]	; (2804 <attemptConnection+0xc4>)
    274e:	701a      	strb	r2, [r3, #0]

        //wait for user to tell us what they want
        while(sercom(USART3)->SPI.INTFLAG.bit.RXC == 0);
    2750:	4a2d      	ldr	r2, [pc, #180]	; (2808 <attemptConnection+0xc8>)
    2752:	7e13      	ldrb	r3, [r2, #24]
    2754:	4e2c      	ldr	r6, [pc, #176]	; (2808 <attemptConnection+0xc8>)
    2756:	075b      	lsls	r3, r3, #29
    2758:	d5fb      	bpl.n	2752 <attemptConnection+0x12>
        u8_t option = usartDataIn(USART3);
    275a:	2003      	movs	r0, #3
    275c:	4d2b      	ldr	r5, [pc, #172]	; (280c <attemptConnection+0xcc>)
    275e:	47a8      	blx	r5
    2760:	1e04      	subs	r4, r0, #0

        //user wants to read flight logs
        if (option == 0x4C) {
    2762:	2c4c      	cmp	r4, #76	; 0x4c
    2764:	d13c      	bne.n	27e0 <attemptConnection+0xa0>
    2766:	2400      	movs	r4, #0

            //send list of available flight logs
            for (u8_t flightLog = 0; flightLog < 11; ++flightLog) {

                if (isFlightLogged(flightLog)) {
    2768:	0020      	movs	r0, r4
    276a:	4b29      	ldr	r3, [pc, #164]	; (2810 <attemptConnection+0xd0>)
    276c:	4798      	blx	r3
    276e:	2800      	cmp	r0, #0
    2770:	d005      	beq.n	277e <attemptConnection+0x3e>

                    usartDataOut(USART3, flightLog + 0x30);
    2772:	0021      	movs	r1, r4
    2774:	3130      	adds	r1, #48	; 0x30
    2776:	b2c9      	uxtb	r1, r1
    2778:	2003      	movs	r0, #3
    277a:	4b26      	ldr	r3, [pc, #152]	; (2814 <attemptConnection+0xd4>)
    277c:	4798      	blx	r3

        //user wants to read flight logs
        if (option == 0x4C) {

            //send list of available flight logs
            for (u8_t flightLog = 0; flightLog < 11; ++flightLog) {
    277e:	3401      	adds	r4, #1
    2780:	b2e4      	uxtb	r4, r4
    2782:	2c0b      	cmp	r4, #11
    2784:	d1f0      	bne.n	2768 <attemptConnection+0x28>

                    usartDataOut(USART3, flightLog + 0x30);
                }
            }
            //done sending flight numbers
            usartDataOut(USART3, 0x0F);
    2786:	210f      	movs	r1, #15
    2788:	2003      	movs	r0, #3
    278a:	4c22      	ldr	r4, [pc, #136]	; (2814 <attemptConnection+0xd4>)
    278c:	47a0      	blx	r4

            //wait for user to pick which flight to read
            while(sercom(USART3)->SPI.INTFLAG.bit.RXC == 0);
    278e:	7e33      	ldrb	r3, [r6, #24]
    2790:	075b      	lsls	r3, r3, #29
    2792:	d5fc      	bpl.n	278e <attemptConnection+0x4e>
            u8_t flightToRead = usartDataIn(USART3) - 0x30;
    2794:	2003      	movs	r0, #3
    2796:	47a8      	blx	r5
    2798:	3830      	subs	r0, #48	; 0x30
    279a:	b2c5      	uxtb	r5, r0


            u32_t flightStartAddress = getFlightStartAddress(flightToRead);
    279c:	0028      	movs	r0, r5
    279e:	4b1e      	ldr	r3, [pc, #120]	; (2818 <attemptConnection+0xd8>)
    27a0:	4798      	blx	r3
            u32_t flightEndAddress = FindFlightEndingAddress(flightToRead) - 0x100;
    27a2:	4b1e      	ldr	r3, [pc, #120]	; (281c <attemptConnection+0xdc>)
            //wait for user to pick which flight to read
            while(sercom(USART3)->SPI.INTFLAG.bit.RXC == 0);
            u8_t flightToRead = usartDataIn(USART3) - 0x30;


            u32_t flightStartAddress = getFlightStartAddress(flightToRead);
    27a4:	0007      	movs	r7, r0
            u32_t flightEndAddress = FindFlightEndingAddress(flightToRead) - 0x100;
    27a6:	0028      	movs	r0, r5
    27a8:	4798      	blx	r3
    27aa:	1e46      	subs	r6, r0, #1
    27ac:	3eff      	subs	r6, #255	; 0xff

            //inform of page numbers
            u16_t pagesToSend = (flightEndAddress  - flightStartAddress) >> 8;
    27ae:	1bf5      	subs	r5, r6, r7
    27b0:	0a2d      	lsrs	r5, r5, #8
            usartDataOut(USART3, pagesToSend >> 0);
    27b2:	b2e9      	uxtb	r1, r5
    27b4:	2003      	movs	r0, #3
    27b6:	47a0      	blx	r4
            usartDataOut(USART3, pagesToSend >> 8);
    27b8:	b2a9      	uxth	r1, r5
    27ba:	0a09      	lsrs	r1, r1, #8
    27bc:	2003      	movs	r0, #3
    27be:	47a0      	blx	r4

            //send flight end address for % full
            usartDataOut(USART3, flightEndAddress >> 0);
    27c0:	b2f1      	uxtb	r1, r6
    27c2:	2003      	movs	r0, #3
    27c4:	47a0      	blx	r4
            usartDataOut(USART3, flightEndAddress >> 8);
    27c6:	0a31      	lsrs	r1, r6, #8
    27c8:	b2c9      	uxtb	r1, r1
    27ca:	2003      	movs	r0, #3
    27cc:	47a0      	blx	r4
            usartDataOut(USART3, flightEndAddress >> 16);
    27ce:	0c31      	lsrs	r1, r6, #16
    27d0:	b2c9      	uxtb	r1, r1
    27d2:	2003      	movs	r0, #3
    27d4:	47a0      	blx	r4

            //USART out the flights pages
            sendTheasePagesToComputer(flightStartAddress, flightEndAddress);
    27d6:	0031      	movs	r1, r6
    27d8:	0038      	movs	r0, r7
    27da:	4b11      	ldr	r3, [pc, #68]	; (2820 <attemptConnection+0xe0>)
    27dc:	4798      	blx	r3
    27de:	e00d      	b.n	27fc <attemptConnection+0xbc>

        }
        //user wants to erase chip
        if (option == 0x45) { // 'E'
    27e0:	2845      	cmp	r0, #69	; 0x45
    27e2:	d10b      	bne.n	27fc <attemptConnection+0xbc>
            AT25SFChipErase();
    27e4:	4b0f      	ldr	r3, [pc, #60]	; (2824 <attemptConnection+0xe4>)
    27e6:	4798      	blx	r3

            AT25SFHoldTillReady();
    27e8:	4b0f      	ldr	r3, [pc, #60]	; (2828 <attemptConnection+0xe8>)
    27ea:	4798      	blx	r3

            usartDataOut(USART3, 'E');
    27ec:	2003      	movs	r0, #3
    27ee:	4b09      	ldr	r3, [pc, #36]	; (2814 <attemptConnection+0xd4>)
    27f0:	0021      	movs	r1, r4
    27f2:	4798      	blx	r3
            beep(400);
    27f4:	20c8      	movs	r0, #200	; 0xc8
    27f6:	4b0d      	ldr	r3, [pc, #52]	; (282c <attemptConnection+0xec>)
    27f8:	0040      	lsls	r0, r0, #1
    27fa:	4798      	blx	r3


        }
    }

}
    27fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    27fe:	46c0      	nop			; (mov r8, r8)
    2800:	00000aa5 	.word	0x00000aa5
    2804:	20000684 	.word	0x20000684
    2808:	42001400 	.word	0x42001400
    280c:	00002731 	.word	0x00002731
    2810:	000021d1 	.word	0x000021d1
    2814:	00002719 	.word	0x00002719
    2818:	00002181 	.word	0x00002181
    281c:	000021a9 	.word	0x000021a9
    2820:	00000ad9 	.word	0x00000ad9
    2824:	00000221 	.word	0x00000221
    2828:	000001e5 	.word	0x000001e5
    282c:	00000d7d 	.word	0x00000d7d

00002830 <pow>:
    2830:	b5f0      	push	{r4, r5, r6, r7, lr}
    2832:	465f      	mov	r7, fp
    2834:	464d      	mov	r5, r9
    2836:	4656      	mov	r6, sl
    2838:	4644      	mov	r4, r8
    283a:	b4f0      	push	{r4, r5, r6, r7}
    283c:	b091      	sub	sp, #68	; 0x44
    283e:	001f      	movs	r7, r3
    2840:	0004      	movs	r4, r0
    2842:	000d      	movs	r5, r1
    2844:	0016      	movs	r6, r2
    2846:	f000 f9af 	bl	2ba8 <__ieee754_pow>
    284a:	4bcf      	ldr	r3, [pc, #828]	; (2b88 <pow+0x358>)
    284c:	9002      	str	r0, [sp, #8]
    284e:	9103      	str	r1, [sp, #12]
    2850:	469b      	mov	fp, r3
    2852:	781b      	ldrb	r3, [r3, #0]
    2854:	b25b      	sxtb	r3, r3
    2856:	4699      	mov	r9, r3
    2858:	3301      	adds	r3, #1
    285a:	d04f      	beq.n	28fc <pow+0xcc>
    285c:	0032      	movs	r2, r6
    285e:	003b      	movs	r3, r7
    2860:	0030      	movs	r0, r6
    2862:	0039      	movs	r1, r7
    2864:	f003 f9c0 	bl	5be8 <__aeabi_dcmpun>
    2868:	9000      	str	r0, [sp, #0]
    286a:	2800      	cmp	r0, #0
    286c:	d146      	bne.n	28fc <pow+0xcc>
    286e:	0022      	movs	r2, r4
    2870:	002b      	movs	r3, r5
    2872:	0020      	movs	r0, r4
    2874:	0029      	movs	r1, r5
    2876:	f003 f9b7 	bl	5be8 <__aeabi_dcmpun>
    287a:	2200      	movs	r2, #0
    287c:	4682      	mov	sl, r0
    287e:	2800      	cmp	r0, #0
    2880:	d134      	bne.n	28ec <pow+0xbc>
    2882:	2300      	movs	r3, #0
    2884:	0020      	movs	r0, r4
    2886:	0029      	movs	r1, r5
    2888:	f001 f8fc 	bl	3a84 <__aeabi_dcmpeq>
    288c:	2800      	cmp	r0, #0
    288e:	d03a      	beq.n	2906 <pow+0xd6>
    2890:	2200      	movs	r2, #0
    2892:	2300      	movs	r3, #0
    2894:	0030      	movs	r0, r6
    2896:	0039      	movs	r1, r7
    2898:	f001 f8f4 	bl	3a84 <__aeabi_dcmpeq>
    289c:	9005      	str	r0, [sp, #20]
    289e:	2800      	cmp	r0, #0
    28a0:	d100      	bne.n	28a4 <pow+0x74>
    28a2:	e074      	b.n	298e <pow+0x15e>
    28a4:	ab06      	add	r3, sp, #24
    28a6:	4698      	mov	r8, r3
    28a8:	2301      	movs	r3, #1
    28aa:	4642      	mov	r2, r8
    28ac:	9306      	str	r3, [sp, #24]
    28ae:	4bb7      	ldr	r3, [pc, #732]	; (2b8c <pow+0x35c>)
    28b0:	6053      	str	r3, [r2, #4]
    28b2:	4643      	mov	r3, r8
    28b4:	4652      	mov	r2, sl
    28b6:	609c      	str	r4, [r3, #8]
    28b8:	60dd      	str	r5, [r3, #12]
    28ba:	621a      	str	r2, [r3, #32]
    28bc:	611e      	str	r6, [r3, #16]
    28be:	615f      	str	r7, [r3, #20]
    28c0:	4642      	mov	r2, r8
    28c2:	2300      	movs	r3, #0
    28c4:	2400      	movs	r4, #0
    28c6:	6193      	str	r3, [r2, #24]
    28c8:	61d4      	str	r4, [r2, #28]
    28ca:	464b      	mov	r3, r9
    28cc:	2b00      	cmp	r3, #0
    28ce:	d100      	bne.n	28d2 <pow+0xa2>
    28d0:	e094      	b.n	29fc <pow+0x1cc>
    28d2:	2300      	movs	r3, #0
    28d4:	4cae      	ldr	r4, [pc, #696]	; (2b90 <pow+0x360>)
    28d6:	9300      	str	r3, [sp, #0]
    28d8:	9401      	str	r4, [sp, #4]
    28da:	9800      	ldr	r0, [sp, #0]
    28dc:	9901      	ldr	r1, [sp, #4]
    28de:	b011      	add	sp, #68	; 0x44
    28e0:	bc3c      	pop	{r2, r3, r4, r5}
    28e2:	4690      	mov	r8, r2
    28e4:	4699      	mov	r9, r3
    28e6:	46a2      	mov	sl, r4
    28e8:	46ab      	mov	fp, r5
    28ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    28ec:	2300      	movs	r3, #0
    28ee:	0030      	movs	r0, r6
    28f0:	0039      	movs	r1, r7
    28f2:	f001 f8c7 	bl	3a84 <__aeabi_dcmpeq>
    28f6:	2800      	cmp	r0, #0
    28f8:	d000      	beq.n	28fc <pow+0xcc>
    28fa:	e0eb      	b.n	2ad4 <pow+0x2a4>
    28fc:	9b02      	ldr	r3, [sp, #8]
    28fe:	9c03      	ldr	r4, [sp, #12]
    2900:	9300      	str	r3, [sp, #0]
    2902:	9401      	str	r4, [sp, #4]
    2904:	e7e9      	b.n	28da <pow+0xaa>
    2906:	9802      	ldr	r0, [sp, #8]
    2908:	9903      	ldr	r1, [sp, #12]
    290a:	f000 ff7d 	bl	3808 <finite>
    290e:	4681      	mov	r9, r0
    2910:	2800      	cmp	r0, #0
    2912:	d100      	bne.n	2916 <pow+0xe6>
    2914:	e086      	b.n	2a24 <pow+0x1f4>
    2916:	9802      	ldr	r0, [sp, #8]
    2918:	9903      	ldr	r1, [sp, #12]
    291a:	2200      	movs	r2, #0
    291c:	2300      	movs	r3, #0
    291e:	f001 f8b1 	bl	3a84 <__aeabi_dcmpeq>
    2922:	2800      	cmp	r0, #0
    2924:	d0ea      	beq.n	28fc <pow+0xcc>
    2926:	0020      	movs	r0, r4
    2928:	0029      	movs	r1, r5
    292a:	f000 ff6d 	bl	3808 <finite>
    292e:	9a02      	ldr	r2, [sp, #8]
    2930:	9b03      	ldr	r3, [sp, #12]
    2932:	9200      	str	r2, [sp, #0]
    2934:	9301      	str	r3, [sp, #4]
    2936:	2800      	cmp	r0, #0
    2938:	d0cf      	beq.n	28da <pow+0xaa>
    293a:	0030      	movs	r0, r6
    293c:	0039      	movs	r1, r7
    293e:	f000 ff63 	bl	3808 <finite>
    2942:	9a02      	ldr	r2, [sp, #8]
    2944:	9b03      	ldr	r3, [sp, #12]
    2946:	9200      	str	r2, [sp, #0]
    2948:	9301      	str	r3, [sp, #4]
    294a:	2800      	cmp	r0, #0
    294c:	d0c5      	beq.n	28da <pow+0xaa>
    294e:	ab06      	add	r3, sp, #24
    2950:	4698      	mov	r8, r3
    2952:	2304      	movs	r3, #4
    2954:	4642      	mov	r2, r8
    2956:	9306      	str	r3, [sp, #24]
    2958:	4b8c      	ldr	r3, [pc, #560]	; (2b8c <pow+0x35c>)
    295a:	6094      	str	r4, [r2, #8]
    295c:	60d5      	str	r5, [r2, #12]
    295e:	6053      	str	r3, [r2, #4]
    2960:	2300      	movs	r3, #0
    2962:	2400      	movs	r4, #0
    2964:	6213      	str	r3, [r2, #32]
    2966:	2300      	movs	r3, #0
    2968:	6193      	str	r3, [r2, #24]
    296a:	61d4      	str	r4, [r2, #28]
    296c:	465b      	mov	r3, fp
    296e:	781b      	ldrb	r3, [r3, #0]
    2970:	6116      	str	r6, [r2, #16]
    2972:	6157      	str	r7, [r2, #20]
    2974:	b25b      	sxtb	r3, r3
    2976:	2b02      	cmp	r3, #2
    2978:	d004      	beq.n	2984 <pow+0x154>
    297a:	4640      	mov	r0, r8
    297c:	f000 ff4e 	bl	381c <matherr>
    2980:	2800      	cmp	r0, #0
    2982:	d140      	bne.n	2a06 <pow+0x1d6>
    2984:	f003 fc74 	bl	6270 <__errno>
    2988:	2322      	movs	r3, #34	; 0x22
    298a:	6003      	str	r3, [r0, #0]
    298c:	e03b      	b.n	2a06 <pow+0x1d6>
    298e:	0030      	movs	r0, r6
    2990:	0039      	movs	r1, r7
    2992:	f000 ff39 	bl	3808 <finite>
    2996:	9a02      	ldr	r2, [sp, #8]
    2998:	9b03      	ldr	r3, [sp, #12]
    299a:	9200      	str	r2, [sp, #0]
    299c:	9301      	str	r3, [sp, #4]
    299e:	2800      	cmp	r0, #0
    29a0:	d09b      	beq.n	28da <pow+0xaa>
    29a2:	2200      	movs	r2, #0
    29a4:	2300      	movs	r3, #0
    29a6:	0030      	movs	r0, r6
    29a8:	0039      	movs	r1, r7
    29aa:	f001 f871 	bl	3a90 <__aeabi_dcmplt>
    29ae:	2800      	cmp	r0, #0
    29b0:	d100      	bne.n	29b4 <pow+0x184>
    29b2:	e792      	b.n	28da <pow+0xaa>
    29b4:	ab06      	add	r3, sp, #24
    29b6:	4698      	mov	r8, r3
    29b8:	2301      	movs	r3, #1
    29ba:	4642      	mov	r2, r8
    29bc:	9306      	str	r3, [sp, #24]
    29be:	4b73      	ldr	r3, [pc, #460]	; (2b8c <pow+0x35c>)
    29c0:	6053      	str	r3, [r2, #4]
    29c2:	4643      	mov	r3, r8
    29c4:	9a05      	ldr	r2, [sp, #20]
    29c6:	609c      	str	r4, [r3, #8]
    29c8:	60dd      	str	r5, [r3, #12]
    29ca:	621a      	str	r2, [r3, #32]
    29cc:	611e      	str	r6, [r3, #16]
    29ce:	615f      	str	r7, [r3, #20]
    29d0:	465b      	mov	r3, fp
    29d2:	781b      	ldrb	r3, [r3, #0]
    29d4:	b25b      	sxtb	r3, r3
    29d6:	2b00      	cmp	r3, #0
    29d8:	d00b      	beq.n	29f2 <pow+0x1c2>
    29da:	2000      	movs	r0, #0
    29dc:	4642      	mov	r2, r8
    29de:	496d      	ldr	r1, [pc, #436]	; (2b94 <pow+0x364>)
    29e0:	6190      	str	r0, [r2, #24]
    29e2:	61d1      	str	r1, [r2, #28]
    29e4:	2b02      	cmp	r3, #2
    29e6:	d109      	bne.n	29fc <pow+0x1cc>
    29e8:	f003 fc42 	bl	6270 <__errno>
    29ec:	2321      	movs	r3, #33	; 0x21
    29ee:	6003      	str	r3, [r0, #0]
    29f0:	e009      	b.n	2a06 <pow+0x1d6>
    29f2:	4642      	mov	r2, r8
    29f4:	2300      	movs	r3, #0
    29f6:	2400      	movs	r4, #0
    29f8:	6193      	str	r3, [r2, #24]
    29fa:	61d4      	str	r4, [r2, #28]
    29fc:	4640      	mov	r0, r8
    29fe:	f000 ff0d 	bl	381c <matherr>
    2a02:	2800      	cmp	r0, #0
    2a04:	d0f0      	beq.n	29e8 <pow+0x1b8>
    2a06:	4643      	mov	r3, r8
    2a08:	6a1b      	ldr	r3, [r3, #32]
    2a0a:	2b00      	cmp	r3, #0
    2a0c:	d004      	beq.n	2a18 <pow+0x1e8>
    2a0e:	f003 fc2f 	bl	6270 <__errno>
    2a12:	4643      	mov	r3, r8
    2a14:	6a1b      	ldr	r3, [r3, #32]
    2a16:	6003      	str	r3, [r0, #0]
    2a18:	4643      	mov	r3, r8
    2a1a:	69dc      	ldr	r4, [r3, #28]
    2a1c:	699b      	ldr	r3, [r3, #24]
    2a1e:	9300      	str	r3, [sp, #0]
    2a20:	9401      	str	r4, [sp, #4]
    2a22:	e75a      	b.n	28da <pow+0xaa>
    2a24:	0020      	movs	r0, r4
    2a26:	0029      	movs	r1, r5
    2a28:	f000 feee 	bl	3808 <finite>
    2a2c:	2800      	cmp	r0, #0
    2a2e:	d100      	bne.n	2a32 <pow+0x202>
    2a30:	e771      	b.n	2916 <pow+0xe6>
    2a32:	0030      	movs	r0, r6
    2a34:	0039      	movs	r1, r7
    2a36:	f000 fee7 	bl	3808 <finite>
    2a3a:	2800      	cmp	r0, #0
    2a3c:	d100      	bne.n	2a40 <pow+0x210>
    2a3e:	e76a      	b.n	2916 <pow+0xe6>
    2a40:	9802      	ldr	r0, [sp, #8]
    2a42:	9903      	ldr	r1, [sp, #12]
    2a44:	000b      	movs	r3, r1
    2a46:	0002      	movs	r2, r0
    2a48:	f003 f8ce 	bl	5be8 <__aeabi_dcmpun>
    2a4c:	ab06      	add	r3, sp, #24
    2a4e:	4698      	mov	r8, r3
    2a50:	2800      	cmp	r0, #0
    2a52:	d17a      	bne.n	2b4a <pow+0x31a>
    2a54:	2303      	movs	r3, #3
    2a56:	4642      	mov	r2, r8
    2a58:	9306      	str	r3, [sp, #24]
    2a5a:	4b4c      	ldr	r3, [pc, #304]	; (2b8c <pow+0x35c>)
    2a5c:	6210      	str	r0, [r2, #32]
    2a5e:	6053      	str	r3, [r2, #4]
    2a60:	465b      	mov	r3, fp
    2a62:	781b      	ldrb	r3, [r3, #0]
    2a64:	6094      	str	r4, [r2, #8]
    2a66:	60d5      	str	r5, [r2, #12]
    2a68:	b25b      	sxtb	r3, r3
    2a6a:	6116      	str	r6, [r2, #16]
    2a6c:	6157      	str	r7, [r2, #20]
    2a6e:	4699      	mov	r9, r3
    2a70:	2b00      	cmp	r3, #0
    2a72:	d148      	bne.n	2b06 <pow+0x2d6>
    2a74:	22e0      	movs	r2, #224	; 0xe0
    2a76:	4641      	mov	r1, r8
    2a78:	4b47      	ldr	r3, [pc, #284]	; (2b98 <pow+0x368>)
    2a7a:	0612      	lsls	r2, r2, #24
    2a7c:	618a      	str	r2, [r1, #24]
    2a7e:	61cb      	str	r3, [r1, #28]
    2a80:	0020      	movs	r0, r4
    2a82:	2200      	movs	r2, #0
    2a84:	2300      	movs	r3, #0
    2a86:	0029      	movs	r1, r5
    2a88:	f001 f802 	bl	3a90 <__aeabi_dcmplt>
    2a8c:	2800      	cmp	r0, #0
    2a8e:	d100      	bne.n	2a92 <pow+0x262>
    2a90:	e773      	b.n	297a <pow+0x14a>
    2a92:	2200      	movs	r2, #0
    2a94:	4b41      	ldr	r3, [pc, #260]	; (2b9c <pow+0x36c>)
    2a96:	0030      	movs	r0, r6
    2a98:	0039      	movs	r1, r7
    2a9a:	f002 fad7 	bl	504c <__aeabi_dmul>
    2a9e:	0004      	movs	r4, r0
    2aa0:	000d      	movs	r5, r1
    2aa2:	f000 fec3 	bl	382c <rint>
    2aa6:	0002      	movs	r2, r0
    2aa8:	000b      	movs	r3, r1
    2aaa:	0020      	movs	r0, r4
    2aac:	0029      	movs	r1, r5
    2aae:	f000 ffe9 	bl	3a84 <__aeabi_dcmpeq>
    2ab2:	2800      	cmp	r0, #0
    2ab4:	d105      	bne.n	2ac2 <pow+0x292>
    2ab6:	22e0      	movs	r2, #224	; 0xe0
    2ab8:	4b39      	ldr	r3, [pc, #228]	; (2ba0 <pow+0x370>)
    2aba:	0612      	lsls	r2, r2, #24
    2abc:	4641      	mov	r1, r8
    2abe:	618a      	str	r2, [r1, #24]
    2ac0:	61cb      	str	r3, [r1, #28]
    2ac2:	465b      	mov	r3, fp
    2ac4:	781b      	ldrb	r3, [r3, #0]
    2ac6:	b25b      	sxtb	r3, r3
    2ac8:	4699      	mov	r9, r3
    2aca:	464b      	mov	r3, r9
    2acc:	2b02      	cmp	r3, #2
    2ace:	d000      	beq.n	2ad2 <pow+0x2a2>
    2ad0:	e753      	b.n	297a <pow+0x14a>
    2ad2:	e757      	b.n	2984 <pow+0x154>
    2ad4:	ab06      	add	r3, sp, #24
    2ad6:	4698      	mov	r8, r3
    2ad8:	2301      	movs	r3, #1
    2ada:	4642      	mov	r2, r8
    2adc:	9306      	str	r3, [sp, #24]
    2ade:	4b2b      	ldr	r3, [pc, #172]	; (2b8c <pow+0x35c>)
    2ae0:	6053      	str	r3, [r2, #4]
    2ae2:	4643      	mov	r3, r8
    2ae4:	609c      	str	r4, [r3, #8]
    2ae6:	60dd      	str	r5, [r3, #12]
    2ae8:	2400      	movs	r4, #0
    2aea:	9a00      	ldr	r2, [sp, #0]
    2aec:	4d28      	ldr	r5, [pc, #160]	; (2b90 <pow+0x360>)
    2aee:	621a      	str	r2, [r3, #32]
    2af0:	611e      	str	r6, [r3, #16]
    2af2:	615f      	str	r7, [r3, #20]
    2af4:	619c      	str	r4, [r3, #24]
    2af6:	61dd      	str	r5, [r3, #28]
    2af8:	464b      	mov	r3, r9
    2afa:	9400      	str	r4, [sp, #0]
    2afc:	9501      	str	r5, [sp, #4]
    2afe:	2b02      	cmp	r3, #2
    2b00:	d000      	beq.n	2b04 <pow+0x2d4>
    2b02:	e77b      	b.n	29fc <pow+0x1cc>
    2b04:	e6e9      	b.n	28da <pow+0xaa>
    2b06:	2200      	movs	r2, #0
    2b08:	4641      	mov	r1, r8
    2b0a:	4b26      	ldr	r3, [pc, #152]	; (2ba4 <pow+0x374>)
    2b0c:	0020      	movs	r0, r4
    2b0e:	618a      	str	r2, [r1, #24]
    2b10:	61cb      	str	r3, [r1, #28]
    2b12:	2200      	movs	r2, #0
    2b14:	2300      	movs	r3, #0
    2b16:	0029      	movs	r1, r5
    2b18:	f000 ffba 	bl	3a90 <__aeabi_dcmplt>
    2b1c:	2800      	cmp	r0, #0
    2b1e:	d0d4      	beq.n	2aca <pow+0x29a>
    2b20:	2200      	movs	r2, #0
    2b22:	4b1e      	ldr	r3, [pc, #120]	; (2b9c <pow+0x36c>)
    2b24:	0030      	movs	r0, r6
    2b26:	0039      	movs	r1, r7
    2b28:	f002 fa90 	bl	504c <__aeabi_dmul>
    2b2c:	0004      	movs	r4, r0
    2b2e:	000d      	movs	r5, r1
    2b30:	f000 fe7c 	bl	382c <rint>
    2b34:	0002      	movs	r2, r0
    2b36:	000b      	movs	r3, r1
    2b38:	0020      	movs	r0, r4
    2b3a:	0029      	movs	r1, r5
    2b3c:	f000 ffa2 	bl	3a84 <__aeabi_dcmpeq>
    2b40:	2800      	cmp	r0, #0
    2b42:	d1be      	bne.n	2ac2 <pow+0x292>
    2b44:	2200      	movs	r2, #0
    2b46:	4b13      	ldr	r3, [pc, #76]	; (2b94 <pow+0x364>)
    2b48:	e7b8      	b.n	2abc <pow+0x28c>
    2b4a:	2301      	movs	r3, #1
    2b4c:	4642      	mov	r2, r8
    2b4e:	9306      	str	r3, [sp, #24]
    2b50:	4b0e      	ldr	r3, [pc, #56]	; (2b8c <pow+0x35c>)
    2b52:	6053      	str	r3, [r2, #4]
    2b54:	4643      	mov	r3, r8
    2b56:	464a      	mov	r2, r9
    2b58:	609c      	str	r4, [r3, #8]
    2b5a:	60dd      	str	r5, [r3, #12]
    2b5c:	621a      	str	r2, [r3, #32]
    2b5e:	611e      	str	r6, [r3, #16]
    2b60:	615f      	str	r7, [r3, #20]
    2b62:	2400      	movs	r4, #0
    2b64:	465b      	mov	r3, fp
    2b66:	571c      	ldrsb	r4, [r3, r4]
    2b68:	2c00      	cmp	r4, #0
    2b6a:	d100      	bne.n	2b6e <pow+0x33e>
    2b6c:	e741      	b.n	29f2 <pow+0x1c2>
    2b6e:	2300      	movs	r3, #0
    2b70:	2200      	movs	r2, #0
    2b72:	0019      	movs	r1, r3
    2b74:	0010      	movs	r0, r2
    2b76:	f001 fe45 	bl	4804 <__aeabi_ddiv>
    2b7a:	4643      	mov	r3, r8
    2b7c:	6198      	str	r0, [r3, #24]
    2b7e:	61d9      	str	r1, [r3, #28]
    2b80:	2c02      	cmp	r4, #2
    2b82:	d100      	bne.n	2b86 <pow+0x356>
    2b84:	e730      	b.n	29e8 <pow+0x1b8>
    2b86:	e739      	b.n	29fc <pow+0x1cc>
    2b88:	20000070 	.word	0x20000070
    2b8c:	00006414 	.word	0x00006414
    2b90:	3ff00000 	.word	0x3ff00000
    2b94:	fff00000 	.word	0xfff00000
    2b98:	47efffff 	.word	0x47efffff
    2b9c:	3fe00000 	.word	0x3fe00000
    2ba0:	c7efffff 	.word	0xc7efffff
    2ba4:	7ff00000 	.word	0x7ff00000

00002ba8 <__ieee754_pow>:
    2ba8:	b5f0      	push	{r4, r5, r6, r7, lr}
    2baa:	4656      	mov	r6, sl
    2bac:	464d      	mov	r5, r9
    2bae:	4644      	mov	r4, r8
    2bb0:	465f      	mov	r7, fp
    2bb2:	b4f0      	push	{r4, r5, r6, r7}
    2bb4:	001c      	movs	r4, r3
    2bb6:	0013      	movs	r3, r2
    2bb8:	0067      	lsls	r7, r4, #1
    2bba:	b091      	sub	sp, #68	; 0x44
    2bbc:	087f      	lsrs	r7, r7, #1
    2bbe:	9300      	str	r3, [sp, #0]
    2bc0:	9401      	str	r4, [sp, #4]
    2bc2:	0006      	movs	r6, r0
    2bc4:	000d      	movs	r5, r1
    2bc6:	4680      	mov	r8, r0
    2bc8:	4689      	mov	r9, r1
    2bca:	46a2      	mov	sl, r4
    2bcc:	433b      	orrs	r3, r7
    2bce:	d032      	beq.n	2c36 <__ieee754_pow+0x8e>
    2bd0:	4b6e      	ldr	r3, [pc, #440]	; (2d8c <__ieee754_pow+0x1e4>)
    2bd2:	006c      	lsls	r4, r5, #1
    2bd4:	0864      	lsrs	r4, r4, #1
    2bd6:	429c      	cmp	r4, r3
    2bd8:	dc29      	bgt.n	2c2e <__ieee754_pow+0x86>
    2bda:	d026      	beq.n	2c2a <__ieee754_pow+0x82>
    2bdc:	429f      	cmp	r7, r3
    2bde:	dc26      	bgt.n	2c2e <__ieee754_pow+0x86>
    2be0:	4b6a      	ldr	r3, [pc, #424]	; (2d8c <__ieee754_pow+0x1e4>)
    2be2:	429f      	cmp	r7, r3
    2be4:	d100      	bne.n	2be8 <__ieee754_pow+0x40>
    2be6:	e089      	b.n	2cfc <__ieee754_pow+0x154>
    2be8:	2300      	movs	r3, #0
    2bea:	469b      	mov	fp, r3
    2bec:	464b      	mov	r3, r9
    2bee:	2b00      	cmp	r3, #0
    2bf0:	da00      	bge.n	2bf4 <__ieee754_pow+0x4c>
    2bf2:	e087      	b.n	2d04 <__ieee754_pow+0x15c>
    2bf4:	2a00      	cmp	r2, #0
    2bf6:	d12f      	bne.n	2c58 <__ieee754_pow+0xb0>
    2bf8:	4b64      	ldr	r3, [pc, #400]	; (2d8c <__ieee754_pow+0x1e4>)
    2bfa:	429f      	cmp	r7, r3
    2bfc:	d100      	bne.n	2c00 <__ieee754_pow+0x58>
    2bfe:	e09f      	b.n	2d40 <__ieee754_pow+0x198>
    2c00:	4b63      	ldr	r3, [pc, #396]	; (2d90 <__ieee754_pow+0x1e8>)
    2c02:	429f      	cmp	r7, r3
    2c04:	d05d      	beq.n	2cc2 <__ieee754_pow+0x11a>
    2c06:	2380      	movs	r3, #128	; 0x80
    2c08:	05db      	lsls	r3, r3, #23
    2c0a:	459a      	cmp	sl, r3
    2c0c:	d101      	bne.n	2c12 <__ieee754_pow+0x6a>
    2c0e:	f000 fbc1 	bl	3394 <__ieee754_pow+0x7ec>
    2c12:	4b60      	ldr	r3, [pc, #384]	; (2d94 <__ieee754_pow+0x1ec>)
    2c14:	459a      	cmp	sl, r3
    2c16:	d11f      	bne.n	2c58 <__ieee754_pow+0xb0>
    2c18:	464b      	mov	r3, r9
    2c1a:	2b00      	cmp	r3, #0
    2c1c:	db1c      	blt.n	2c58 <__ieee754_pow+0xb0>
    2c1e:	0030      	movs	r0, r6
    2c20:	0029      	movs	r1, r5
    2c22:	f000 fcf7 	bl	3614 <__ieee754_sqrt>
    2c26:	0006      	movs	r6, r0
    2c28:	e007      	b.n	2c3a <__ieee754_pow+0x92>
    2c2a:	2800      	cmp	r0, #0
    2c2c:	d00d      	beq.n	2c4a <__ieee754_pow+0xa2>
    2c2e:	4b5a      	ldr	r3, [pc, #360]	; (2d98 <__ieee754_pow+0x1f0>)
    2c30:	18e0      	adds	r0, r4, r3
    2c32:	4330      	orrs	r0, r6
    2c34:	d10b      	bne.n	2c4e <__ieee754_pow+0xa6>
    2c36:	2600      	movs	r6, #0
    2c38:	4955      	ldr	r1, [pc, #340]	; (2d90 <__ieee754_pow+0x1e8>)
    2c3a:	0030      	movs	r0, r6
    2c3c:	b011      	add	sp, #68	; 0x44
    2c3e:	bc3c      	pop	{r2, r3, r4, r5}
    2c40:	4690      	mov	r8, r2
    2c42:	4699      	mov	r9, r3
    2c44:	46a2      	mov	sl, r4
    2c46:	46ab      	mov	fp, r5
    2c48:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2c4a:	42a7      	cmp	r7, r4
    2c4c:	ddc8      	ble.n	2be0 <__ieee754_pow+0x38>
    2c4e:	4853      	ldr	r0, [pc, #332]	; (2d9c <__ieee754_pow+0x1f4>)
    2c50:	f000 fde6 	bl	3820 <nan>
    2c54:	0006      	movs	r6, r0
    2c56:	e7f0      	b.n	2c3a <__ieee754_pow+0x92>
    2c58:	0030      	movs	r0, r6
    2c5a:	0029      	movs	r1, r5
    2c5c:	f000 fdd0 	bl	3800 <fabs>
    2c60:	4643      	mov	r3, r8
    2c62:	2b00      	cmp	r3, #0
    2c64:	d01d      	beq.n	2ca2 <__ieee754_pow+0xfa>
    2c66:	0feb      	lsrs	r3, r5, #31
    2c68:	3b01      	subs	r3, #1
    2c6a:	4698      	mov	r8, r3
    2c6c:	465b      	mov	r3, fp
    2c6e:	4642      	mov	r2, r8
    2c70:	4313      	orrs	r3, r2
    2c72:	d079      	beq.n	2d68 <__ieee754_pow+0x1c0>
    2c74:	4b4a      	ldr	r3, [pc, #296]	; (2da0 <__ieee754_pow+0x1f8>)
    2c76:	429f      	cmp	r7, r3
    2c78:	dc00      	bgt.n	2c7c <__ieee754_pow+0xd4>
    2c7a:	e09f      	b.n	2dbc <__ieee754_pow+0x214>
    2c7c:	4b49      	ldr	r3, [pc, #292]	; (2da4 <__ieee754_pow+0x1fc>)
    2c7e:	429f      	cmp	r7, r3
    2c80:	dc01      	bgt.n	2c86 <__ieee754_pow+0xde>
    2c82:	f000 fbce 	bl	3422 <__ieee754_pow+0x87a>
    2c86:	4b48      	ldr	r3, [pc, #288]	; (2da8 <__ieee754_pow+0x200>)
    2c88:	429c      	cmp	r4, r3
    2c8a:	dd79      	ble.n	2d80 <__ieee754_pow+0x1d8>
    2c8c:	4653      	mov	r3, sl
    2c8e:	2b00      	cmp	r3, #0
    2c90:	dd79      	ble.n	2d86 <__ieee754_pow+0x1de>
    2c92:	4a46      	ldr	r2, [pc, #280]	; (2dac <__ieee754_pow+0x204>)
    2c94:	4b46      	ldr	r3, [pc, #280]	; (2db0 <__ieee754_pow+0x208>)
    2c96:	0010      	movs	r0, r2
    2c98:	0019      	movs	r1, r3
    2c9a:	f002 f9d7 	bl	504c <__aeabi_dmul>
    2c9e:	0006      	movs	r6, r0
    2ca0:	e7cb      	b.n	2c3a <__ieee754_pow+0x92>
    2ca2:	2c00      	cmp	r4, #0
    2ca4:	d004      	beq.n	2cb0 <__ieee754_pow+0x108>
    2ca6:	4a3a      	ldr	r2, [pc, #232]	; (2d90 <__ieee754_pow+0x1e8>)
    2ca8:	00ab      	lsls	r3, r5, #2
    2caa:	089b      	lsrs	r3, r3, #2
    2cac:	4293      	cmp	r3, r2
    2cae:	d1da      	bne.n	2c66 <__ieee754_pow+0xbe>
    2cb0:	4653      	mov	r3, sl
    2cb2:	2b00      	cmp	r3, #0
    2cb4:	da00      	bge.n	2cb8 <__ieee754_pow+0x110>
    2cb6:	e3ad      	b.n	3414 <__ieee754_pow+0x86c>
    2cb8:	464b      	mov	r3, r9
    2cba:	2b00      	cmp	r3, #0
    2cbc:	db0d      	blt.n	2cda <__ieee754_pow+0x132>
    2cbe:	0006      	movs	r6, r0
    2cc0:	e7bb      	b.n	2c3a <__ieee754_pow+0x92>
    2cc2:	4653      	mov	r3, sl
    2cc4:	0029      	movs	r1, r5
    2cc6:	2b00      	cmp	r3, #0
    2cc8:	dab7      	bge.n	2c3a <__ieee754_pow+0x92>
    2cca:	0032      	movs	r2, r6
    2ccc:	002b      	movs	r3, r5
    2cce:	2000      	movs	r0, #0
    2cd0:	492f      	ldr	r1, [pc, #188]	; (2d90 <__ieee754_pow+0x1e8>)
    2cd2:	f001 fd97 	bl	4804 <__aeabi_ddiv>
    2cd6:	0006      	movs	r6, r0
    2cd8:	e7af      	b.n	2c3a <__ieee754_pow+0x92>
    2cda:	4b2f      	ldr	r3, [pc, #188]	; (2d98 <__ieee754_pow+0x1f0>)
    2cdc:	469c      	mov	ip, r3
    2cde:	465b      	mov	r3, fp
    2ce0:	4464      	add	r4, ip
    2ce2:	431c      	orrs	r4, r3
    2ce4:	d101      	bne.n	2cea <__ieee754_pow+0x142>
    2ce6:	f000 fc2b 	bl	3540 <__ieee754_pow+0x998>
    2cea:	465b      	mov	r3, fp
    2cec:	0006      	movs	r6, r0
    2cee:	2b01      	cmp	r3, #1
    2cf0:	d1a3      	bne.n	2c3a <__ieee754_pow+0x92>
    2cf2:	2380      	movs	r3, #128	; 0x80
    2cf4:	061b      	lsls	r3, r3, #24
    2cf6:	469c      	mov	ip, r3
    2cf8:	4461      	add	r1, ip
    2cfa:	e79e      	b.n	2c3a <__ieee754_pow+0x92>
    2cfc:	2a00      	cmp	r2, #0
    2cfe:	d100      	bne.n	2d02 <__ieee754_pow+0x15a>
    2d00:	e772      	b.n	2be8 <__ieee754_pow+0x40>
    2d02:	e794      	b.n	2c2e <__ieee754_pow+0x86>
    2d04:	4b2b      	ldr	r3, [pc, #172]	; (2db4 <__ieee754_pow+0x20c>)
    2d06:	429f      	cmp	r7, r3
    2d08:	dc2b      	bgt.n	2d62 <__ieee754_pow+0x1ba>
    2d0a:	4b27      	ldr	r3, [pc, #156]	; (2da8 <__ieee754_pow+0x200>)
    2d0c:	429f      	cmp	r7, r3
    2d0e:	dc00      	bgt.n	2d12 <__ieee754_pow+0x16a>
    2d10:	e770      	b.n	2bf4 <__ieee754_pow+0x4c>
    2d12:	4929      	ldr	r1, [pc, #164]	; (2db8 <__ieee754_pow+0x210>)
    2d14:	153b      	asrs	r3, r7, #20
    2d16:	468c      	mov	ip, r1
    2d18:	4463      	add	r3, ip
    2d1a:	2b14      	cmp	r3, #20
    2d1c:	dc01      	bgt.n	2d22 <__ieee754_pow+0x17a>
    2d1e:	f000 fbf2 	bl	3506 <__ieee754_pow+0x95e>
    2d22:	2134      	movs	r1, #52	; 0x34
    2d24:	1acb      	subs	r3, r1, r3
    2d26:	9900      	ldr	r1, [sp, #0]
    2d28:	40d9      	lsrs	r1, r3
    2d2a:	0008      	movs	r0, r1
    2d2c:	4098      	lsls	r0, r3
    2d2e:	4282      	cmp	r2, r0
    2d30:	d000      	beq.n	2d34 <__ieee754_pow+0x18c>
    2d32:	e75f      	b.n	2bf4 <__ieee754_pow+0x4c>
    2d34:	2301      	movs	r3, #1
    2d36:	4019      	ands	r1, r3
    2d38:	3301      	adds	r3, #1
    2d3a:	1a5b      	subs	r3, r3, r1
    2d3c:	469b      	mov	fp, r3
    2d3e:	e759      	b.n	2bf4 <__ieee754_pow+0x4c>
    2d40:	4b15      	ldr	r3, [pc, #84]	; (2d98 <__ieee754_pow+0x1f0>)
    2d42:	18e0      	adds	r0, r4, r3
    2d44:	4306      	orrs	r6, r0
    2d46:	d100      	bne.n	2d4a <__ieee754_pow+0x1a2>
    2d48:	e775      	b.n	2c36 <__ieee754_pow+0x8e>
    2d4a:	4b17      	ldr	r3, [pc, #92]	; (2da8 <__ieee754_pow+0x200>)
    2d4c:	429c      	cmp	r4, r3
    2d4e:	dc00      	bgt.n	2d52 <__ieee754_pow+0x1aa>
    2d50:	e351      	b.n	33f6 <__ieee754_pow+0x84e>
    2d52:	4653      	mov	r3, sl
    2d54:	2b00      	cmp	r3, #0
    2d56:	db16      	blt.n	2d86 <__ieee754_pow+0x1de>
    2d58:	9b00      	ldr	r3, [sp, #0]
    2d5a:	9c01      	ldr	r4, [sp, #4]
    2d5c:	001e      	movs	r6, r3
    2d5e:	0021      	movs	r1, r4
    2d60:	e76b      	b.n	2c3a <__ieee754_pow+0x92>
    2d62:	2302      	movs	r3, #2
    2d64:	469b      	mov	fp, r3
    2d66:	e745      	b.n	2bf4 <__ieee754_pow+0x4c>
    2d68:	0032      	movs	r2, r6
    2d6a:	002b      	movs	r3, r5
    2d6c:	0030      	movs	r0, r6
    2d6e:	0029      	movs	r1, r5
    2d70:	f002 fbe6 	bl	5540 <__aeabi_dsub>
    2d74:	0002      	movs	r2, r0
    2d76:	000b      	movs	r3, r1
    2d78:	f001 fd44 	bl	4804 <__aeabi_ddiv>
    2d7c:	0006      	movs	r6, r0
    2d7e:	e75c      	b.n	2c3a <__ieee754_pow+0x92>
    2d80:	4653      	mov	r3, sl
    2d82:	2b00      	cmp	r3, #0
    2d84:	db85      	blt.n	2c92 <__ieee754_pow+0xea>
    2d86:	2600      	movs	r6, #0
    2d88:	2100      	movs	r1, #0
    2d8a:	e756      	b.n	2c3a <__ieee754_pow+0x92>
    2d8c:	7ff00000 	.word	0x7ff00000
    2d90:	3ff00000 	.word	0x3ff00000
    2d94:	3fe00000 	.word	0x3fe00000
    2d98:	c0100000 	.word	0xc0100000
    2d9c:	00006418 	.word	0x00006418
    2da0:	41e00000 	.word	0x41e00000
    2da4:	43f00000 	.word	0x43f00000
    2da8:	3fefffff 	.word	0x3fefffff
    2dac:	8800759c 	.word	0x8800759c
    2db0:	7e37e43c 	.word	0x7e37e43c
    2db4:	433fffff 	.word	0x433fffff
    2db8:	fffffc01 	.word	0xfffffc01
    2dbc:	4be8      	ldr	r3, [pc, #928]	; (3160 <__ieee754_pow+0x5b8>)
    2dbe:	2200      	movs	r2, #0
    2dc0:	429c      	cmp	r4, r3
    2dc2:	dc06      	bgt.n	2dd2 <__ieee754_pow+0x22a>
    2dc4:	2200      	movs	r2, #0
    2dc6:	4be7      	ldr	r3, [pc, #924]	; (3164 <__ieee754_pow+0x5bc>)
    2dc8:	f002 f940 	bl	504c <__aeabi_dmul>
    2dcc:	2235      	movs	r2, #53	; 0x35
    2dce:	000c      	movs	r4, r1
    2dd0:	4252      	negs	r2, r2
    2dd2:	4de5      	ldr	r5, [pc, #916]	; (3168 <__ieee754_pow+0x5c0>)
    2dd4:	1523      	asrs	r3, r4, #20
    2dd6:	46ac      	mov	ip, r5
    2dd8:	4463      	add	r3, ip
    2dda:	4699      	mov	r9, r3
    2ddc:	0324      	lsls	r4, r4, #12
    2dde:	4de3      	ldr	r5, [pc, #908]	; (316c <__ieee754_pow+0x5c4>)
    2de0:	4be3      	ldr	r3, [pc, #908]	; (3170 <__ieee754_pow+0x5c8>)
    2de2:	0b24      	lsrs	r4, r4, #12
    2de4:	4491      	add	r9, r2
    2de6:	4325      	orrs	r5, r4
    2de8:	429c      	cmp	r4, r3
    2dea:	dd09      	ble.n	2e00 <__ieee754_pow+0x258>
    2dec:	4be1      	ldr	r3, [pc, #900]	; (3174 <__ieee754_pow+0x5cc>)
    2dee:	429c      	cmp	r4, r3
    2df0:	dc00      	bgt.n	2df4 <__ieee754_pow+0x24c>
    2df2:	e3a9      	b.n	3548 <__ieee754_pow+0x9a0>
    2df4:	2301      	movs	r3, #1
    2df6:	469c      	mov	ip, r3
    2df8:	4bdf      	ldr	r3, [pc, #892]	; (3178 <__ieee754_pow+0x5d0>)
    2dfa:	44e1      	add	r9, ip
    2dfc:	469c      	mov	ip, r3
    2dfe:	4465      	add	r5, ip
    2e00:	2300      	movs	r3, #0
    2e02:	2400      	movs	r4, #0
    2e04:	2200      	movs	r2, #0
    2e06:	9308      	str	r3, [sp, #32]
    2e08:	9409      	str	r4, [sp, #36]	; 0x24
    2e0a:	930c      	str	r3, [sp, #48]	; 0x30
    2e0c:	940d      	str	r4, [sp, #52]	; 0x34
    2e0e:	2400      	movs	r4, #0
    2e10:	4bd6      	ldr	r3, [pc, #856]	; (316c <__ieee754_pow+0x5c4>)
    2e12:	9206      	str	r2, [sp, #24]
    2e14:	9307      	str	r3, [sp, #28]
    2e16:	9a06      	ldr	r2, [sp, #24]
    2e18:	9b07      	ldr	r3, [sp, #28]
    2e1a:	0029      	movs	r1, r5
    2e1c:	900a      	str	r0, [sp, #40]	; 0x28
    2e1e:	910b      	str	r1, [sp, #44]	; 0x2c
    2e20:	f002 fb8e 	bl	5540 <__aeabi_dsub>
    2e24:	9a06      	ldr	r2, [sp, #24]
    2e26:	9b07      	ldr	r3, [sp, #28]
    2e28:	0006      	movs	r6, r0
    2e2a:	000f      	movs	r7, r1
    2e2c:	980a      	ldr	r0, [sp, #40]	; 0x28
    2e2e:	990b      	ldr	r1, [sp, #44]	; 0x2c
    2e30:	f001 f9bc 	bl	41ac <__aeabi_dadd>
    2e34:	0002      	movs	r2, r0
    2e36:	000b      	movs	r3, r1
    2e38:	2000      	movs	r0, #0
    2e3a:	49cc      	ldr	r1, [pc, #816]	; (316c <__ieee754_pow+0x5c4>)
    2e3c:	f001 fce2 	bl	4804 <__aeabi_ddiv>
    2e40:	000a      	movs	r2, r1
    2e42:	0001      	movs	r1, r0
    2e44:	0013      	movs	r3, r2
    2e46:	910e      	str	r1, [sp, #56]	; 0x38
    2e48:	920f      	str	r2, [sp, #60]	; 0x3c
    2e4a:	0002      	movs	r2, r0
    2e4c:	0039      	movs	r1, r7
    2e4e:	0030      	movs	r0, r6
    2e50:	f002 f8fc 	bl	504c <__aeabi_dmul>
    2e54:	000a      	movs	r2, r1
    2e56:	0001      	movs	r1, r0
    2e58:	2080      	movs	r0, #128	; 0x80
    2e5a:	9104      	str	r1, [sp, #16]
    2e5c:	9205      	str	r2, [sp, #20]
    2e5e:	0013      	movs	r3, r2
    2e60:	2200      	movs	r2, #0
    2e62:	2180      	movs	r1, #128	; 0x80
    2e64:	0300      	lsls	r0, r0, #12
    2e66:	4684      	mov	ip, r0
    2e68:	9202      	str	r2, [sp, #8]
    2e6a:	9303      	str	r3, [sp, #12]
    2e6c:	2200      	movs	r2, #0
    2e6e:	0589      	lsls	r1, r1, #22
    2e70:	106d      	asrs	r5, r5, #1
    2e72:	430d      	orrs	r5, r1
    2e74:	4465      	add	r5, ip
    2e76:	192b      	adds	r3, r5, r4
    2e78:	9802      	ldr	r0, [sp, #8]
    2e7a:	9903      	ldr	r1, [sp, #12]
    2e7c:	0014      	movs	r4, r2
    2e7e:	001d      	movs	r5, r3
    2e80:	f002 f8e4 	bl	504c <__aeabi_dmul>
    2e84:	0002      	movs	r2, r0
    2e86:	000b      	movs	r3, r1
    2e88:	0030      	movs	r0, r6
    2e8a:	0039      	movs	r1, r7
    2e8c:	f002 fb58 	bl	5540 <__aeabi_dsub>
    2e90:	9a06      	ldr	r2, [sp, #24]
    2e92:	9b07      	ldr	r3, [sp, #28]
    2e94:	0006      	movs	r6, r0
    2e96:	000f      	movs	r7, r1
    2e98:	0020      	movs	r0, r4
    2e9a:	0029      	movs	r1, r5
    2e9c:	f002 fb50 	bl	5540 <__aeabi_dsub>
    2ea0:	0002      	movs	r2, r0
    2ea2:	000b      	movs	r3, r1
    2ea4:	980a      	ldr	r0, [sp, #40]	; 0x28
    2ea6:	990b      	ldr	r1, [sp, #44]	; 0x2c
    2ea8:	f002 fb4a 	bl	5540 <__aeabi_dsub>
    2eac:	9a02      	ldr	r2, [sp, #8]
    2eae:	9b03      	ldr	r3, [sp, #12]
    2eb0:	f002 f8cc 	bl	504c <__aeabi_dmul>
    2eb4:	0002      	movs	r2, r0
    2eb6:	000b      	movs	r3, r1
    2eb8:	0030      	movs	r0, r6
    2eba:	0039      	movs	r1, r7
    2ebc:	f002 fb40 	bl	5540 <__aeabi_dsub>
    2ec0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    2ec2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    2ec4:	f002 f8c2 	bl	504c <__aeabi_dmul>
    2ec8:	9d04      	ldr	r5, [sp, #16]
    2eca:	9e05      	ldr	r6, [sp, #20]
    2ecc:	9006      	str	r0, [sp, #24]
    2ece:	9107      	str	r1, [sp, #28]
    2ed0:	002a      	movs	r2, r5
    2ed2:	0033      	movs	r3, r6
    2ed4:	0028      	movs	r0, r5
    2ed6:	0031      	movs	r1, r6
    2ed8:	f002 f8b8 	bl	504c <__aeabi_dmul>
    2edc:	0006      	movs	r6, r0
    2ede:	000f      	movs	r7, r1
    2ee0:	4aa6      	ldr	r2, [pc, #664]	; (317c <__ieee754_pow+0x5d4>)
    2ee2:	4ba7      	ldr	r3, [pc, #668]	; (3180 <__ieee754_pow+0x5d8>)
    2ee4:	f002 f8b2 	bl	504c <__aeabi_dmul>
    2ee8:	4aa6      	ldr	r2, [pc, #664]	; (3184 <__ieee754_pow+0x5dc>)
    2eea:	4ba7      	ldr	r3, [pc, #668]	; (3188 <__ieee754_pow+0x5e0>)
    2eec:	f001 f95e 	bl	41ac <__aeabi_dadd>
    2ef0:	0032      	movs	r2, r6
    2ef2:	003b      	movs	r3, r7
    2ef4:	f002 f8aa 	bl	504c <__aeabi_dmul>
    2ef8:	4aa4      	ldr	r2, [pc, #656]	; (318c <__ieee754_pow+0x5e4>)
    2efa:	4ba5      	ldr	r3, [pc, #660]	; (3190 <__ieee754_pow+0x5e8>)
    2efc:	f001 f956 	bl	41ac <__aeabi_dadd>
    2f00:	0032      	movs	r2, r6
    2f02:	003b      	movs	r3, r7
    2f04:	f002 f8a2 	bl	504c <__aeabi_dmul>
    2f08:	4aa2      	ldr	r2, [pc, #648]	; (3194 <__ieee754_pow+0x5ec>)
    2f0a:	4ba3      	ldr	r3, [pc, #652]	; (3198 <__ieee754_pow+0x5f0>)
    2f0c:	f001 f94e 	bl	41ac <__aeabi_dadd>
    2f10:	0032      	movs	r2, r6
    2f12:	003b      	movs	r3, r7
    2f14:	f002 f89a 	bl	504c <__aeabi_dmul>
    2f18:	4aa0      	ldr	r2, [pc, #640]	; (319c <__ieee754_pow+0x5f4>)
    2f1a:	4ba1      	ldr	r3, [pc, #644]	; (31a0 <__ieee754_pow+0x5f8>)
    2f1c:	f001 f946 	bl	41ac <__aeabi_dadd>
    2f20:	0032      	movs	r2, r6
    2f22:	003b      	movs	r3, r7
    2f24:	f002 f892 	bl	504c <__aeabi_dmul>
    2f28:	4a9e      	ldr	r2, [pc, #632]	; (31a4 <__ieee754_pow+0x5fc>)
    2f2a:	4b9f      	ldr	r3, [pc, #636]	; (31a8 <__ieee754_pow+0x600>)
    2f2c:	f001 f93e 	bl	41ac <__aeabi_dadd>
    2f30:	0032      	movs	r2, r6
    2f32:	0004      	movs	r4, r0
    2f34:	000d      	movs	r5, r1
    2f36:	003b      	movs	r3, r7
    2f38:	0030      	movs	r0, r6
    2f3a:	0039      	movs	r1, r7
    2f3c:	f002 f886 	bl	504c <__aeabi_dmul>
    2f40:	0002      	movs	r2, r0
    2f42:	000b      	movs	r3, r1
    2f44:	0020      	movs	r0, r4
    2f46:	0029      	movs	r1, r5
    2f48:	f002 f880 	bl	504c <__aeabi_dmul>
    2f4c:	9e02      	ldr	r6, [sp, #8]
    2f4e:	9f03      	ldr	r7, [sp, #12]
    2f50:	0004      	movs	r4, r0
    2f52:	000d      	movs	r5, r1
    2f54:	9804      	ldr	r0, [sp, #16]
    2f56:	9905      	ldr	r1, [sp, #20]
    2f58:	0032      	movs	r2, r6
    2f5a:	003b      	movs	r3, r7
    2f5c:	f001 f926 	bl	41ac <__aeabi_dadd>
    2f60:	9a06      	ldr	r2, [sp, #24]
    2f62:	9b07      	ldr	r3, [sp, #28]
    2f64:	f002 f872 	bl	504c <__aeabi_dmul>
    2f68:	0022      	movs	r2, r4
    2f6a:	002b      	movs	r3, r5
    2f6c:	f001 f91e 	bl	41ac <__aeabi_dadd>
    2f70:	0032      	movs	r2, r6
    2f72:	900a      	str	r0, [sp, #40]	; 0x28
    2f74:	910b      	str	r1, [sp, #44]	; 0x2c
    2f76:	003b      	movs	r3, r7
    2f78:	0030      	movs	r0, r6
    2f7a:	0039      	movs	r1, r7
    2f7c:	9602      	str	r6, [sp, #8]
    2f7e:	9703      	str	r7, [sp, #12]
    2f80:	f002 f864 	bl	504c <__aeabi_dmul>
    2f84:	2200      	movs	r2, #0
    2f86:	4b89      	ldr	r3, [pc, #548]	; (31ac <__ieee754_pow+0x604>)
    2f88:	0004      	movs	r4, r0
    2f8a:	000d      	movs	r5, r1
    2f8c:	f001 f90e 	bl	41ac <__aeabi_dadd>
    2f90:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    2f92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    2f94:	f001 f90a 	bl	41ac <__aeabi_dadd>
    2f98:	2600      	movs	r6, #0
    2f9a:	000f      	movs	r7, r1
    2f9c:	0032      	movs	r2, r6
    2f9e:	000b      	movs	r3, r1
    2fa0:	9802      	ldr	r0, [sp, #8]
    2fa2:	9903      	ldr	r1, [sp, #12]
    2fa4:	f002 f852 	bl	504c <__aeabi_dmul>
    2fa8:	2200      	movs	r2, #0
    2faa:	9002      	str	r0, [sp, #8]
    2fac:	9103      	str	r1, [sp, #12]
    2fae:	4b7f      	ldr	r3, [pc, #508]	; (31ac <__ieee754_pow+0x604>)
    2fb0:	0030      	movs	r0, r6
    2fb2:	0039      	movs	r1, r7
    2fb4:	f002 fac4 	bl	5540 <__aeabi_dsub>
    2fb8:	0022      	movs	r2, r4
    2fba:	002b      	movs	r3, r5
    2fbc:	f002 fac0 	bl	5540 <__aeabi_dsub>
    2fc0:	0002      	movs	r2, r0
    2fc2:	000b      	movs	r3, r1
    2fc4:	980a      	ldr	r0, [sp, #40]	; 0x28
    2fc6:	990b      	ldr	r1, [sp, #44]	; 0x2c
    2fc8:	f002 faba 	bl	5540 <__aeabi_dsub>
    2fcc:	9a04      	ldr	r2, [sp, #16]
    2fce:	9b05      	ldr	r3, [sp, #20]
    2fd0:	f002 f83c 	bl	504c <__aeabi_dmul>
    2fd4:	0032      	movs	r2, r6
    2fd6:	0004      	movs	r4, r0
    2fd8:	000d      	movs	r5, r1
    2fda:	9806      	ldr	r0, [sp, #24]
    2fdc:	9907      	ldr	r1, [sp, #28]
    2fde:	003b      	movs	r3, r7
    2fe0:	f002 f834 	bl	504c <__aeabi_dmul>
    2fe4:	0002      	movs	r2, r0
    2fe6:	000b      	movs	r3, r1
    2fe8:	0020      	movs	r0, r4
    2fea:	0029      	movs	r1, r5
    2fec:	f001 f8de 	bl	41ac <__aeabi_dadd>
    2ff0:	0004      	movs	r4, r0
    2ff2:	000d      	movs	r5, r1
    2ff4:	0002      	movs	r2, r0
    2ff6:	000b      	movs	r3, r1
    2ff8:	9802      	ldr	r0, [sp, #8]
    2ffa:	9903      	ldr	r1, [sp, #12]
    2ffc:	f001 f8d6 	bl	41ac <__aeabi_dadd>
    3000:	2600      	movs	r6, #0
    3002:	22e0      	movs	r2, #224	; 0xe0
    3004:	4b6a      	ldr	r3, [pc, #424]	; (31b0 <__ieee754_pow+0x608>)
    3006:	0612      	lsls	r2, r2, #24
    3008:	0030      	movs	r0, r6
    300a:	000f      	movs	r7, r1
    300c:	f002 f81e 	bl	504c <__aeabi_dmul>
    3010:	9a02      	ldr	r2, [sp, #8]
    3012:	9b03      	ldr	r3, [sp, #12]
    3014:	9004      	str	r0, [sp, #16]
    3016:	9105      	str	r1, [sp, #20]
    3018:	0030      	movs	r0, r6
    301a:	0039      	movs	r1, r7
    301c:	f002 fa90 	bl	5540 <__aeabi_dsub>
    3020:	0002      	movs	r2, r0
    3022:	000b      	movs	r3, r1
    3024:	0020      	movs	r0, r4
    3026:	0029      	movs	r1, r5
    3028:	f002 fa8a 	bl	5540 <__aeabi_dsub>
    302c:	4a61      	ldr	r2, [pc, #388]	; (31b4 <__ieee754_pow+0x60c>)
    302e:	4b60      	ldr	r3, [pc, #384]	; (31b0 <__ieee754_pow+0x608>)
    3030:	f002 f80c 	bl	504c <__aeabi_dmul>
    3034:	4a60      	ldr	r2, [pc, #384]	; (31b8 <__ieee754_pow+0x610>)
    3036:	0004      	movs	r4, r0
    3038:	000d      	movs	r5, r1
    303a:	4b60      	ldr	r3, [pc, #384]	; (31bc <__ieee754_pow+0x614>)
    303c:	0030      	movs	r0, r6
    303e:	0039      	movs	r1, r7
    3040:	f002 f804 	bl	504c <__aeabi_dmul>
    3044:	0002      	movs	r2, r0
    3046:	000b      	movs	r3, r1
    3048:	0020      	movs	r0, r4
    304a:	0029      	movs	r1, r5
    304c:	f001 f8ae 	bl	41ac <__aeabi_dadd>
    3050:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    3052:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    3054:	f001 f8aa 	bl	41ac <__aeabi_dadd>
    3058:	0006      	movs	r6, r0
    305a:	4648      	mov	r0, r9
    305c:	000f      	movs	r7, r1
    305e:	f002 fe19 	bl	5c94 <__aeabi_i2d>
    3062:	0004      	movs	r4, r0
    3064:	000d      	movs	r5, r1
    3066:	9804      	ldr	r0, [sp, #16]
    3068:	9905      	ldr	r1, [sp, #20]
    306a:	0032      	movs	r2, r6
    306c:	003b      	movs	r3, r7
    306e:	f001 f89d 	bl	41ac <__aeabi_dadd>
    3072:	9a08      	ldr	r2, [sp, #32]
    3074:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3076:	f001 f899 	bl	41ac <__aeabi_dadd>
    307a:	0022      	movs	r2, r4
    307c:	002b      	movs	r3, r5
    307e:	f001 f895 	bl	41ac <__aeabi_dadd>
    3082:	2000      	movs	r0, #0
    3084:	0022      	movs	r2, r4
    3086:	002b      	movs	r3, r5
    3088:	9002      	str	r0, [sp, #8]
    308a:	9103      	str	r1, [sp, #12]
    308c:	f002 fa58 	bl	5540 <__aeabi_dsub>
    3090:	9a08      	ldr	r2, [sp, #32]
    3092:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3094:	f002 fa54 	bl	5540 <__aeabi_dsub>
    3098:	9a04      	ldr	r2, [sp, #16]
    309a:	9b05      	ldr	r3, [sp, #20]
    309c:	f002 fa50 	bl	5540 <__aeabi_dsub>
    30a0:	0002      	movs	r2, r0
    30a2:	000b      	movs	r3, r1
    30a4:	0030      	movs	r0, r6
    30a6:	0039      	movs	r1, r7
    30a8:	f002 fa4a 	bl	5540 <__aeabi_dsub>
    30ac:	9004      	str	r0, [sp, #16]
    30ae:	9105      	str	r1, [sp, #20]
    30b0:	465b      	mov	r3, fp
    30b2:	4642      	mov	r2, r8
    30b4:	3b01      	subs	r3, #1
    30b6:	4313      	orrs	r3, r2
    30b8:	d100      	bne.n	30bc <__ieee754_pow+0x514>
    30ba:	e197      	b.n	33ec <__ieee754_pow+0x844>
    30bc:	2300      	movs	r3, #0
    30be:	4c2b      	ldr	r4, [pc, #172]	; (316c <__ieee754_pow+0x5c4>)
    30c0:	9306      	str	r3, [sp, #24]
    30c2:	9407      	str	r4, [sp, #28]
    30c4:	9800      	ldr	r0, [sp, #0]
    30c6:	9901      	ldr	r1, [sp, #4]
    30c8:	2600      	movs	r6, #0
    30ca:	000b      	movs	r3, r1
    30cc:	0032      	movs	r2, r6
    30ce:	000f      	movs	r7, r1
    30d0:	f002 fa36 	bl	5540 <__aeabi_dsub>
    30d4:	9a02      	ldr	r2, [sp, #8]
    30d6:	9b03      	ldr	r3, [sp, #12]
    30d8:	f001 ffb8 	bl	504c <__aeabi_dmul>
    30dc:	9a00      	ldr	r2, [sp, #0]
    30de:	9b01      	ldr	r3, [sp, #4]
    30e0:	0004      	movs	r4, r0
    30e2:	000d      	movs	r5, r1
    30e4:	9804      	ldr	r0, [sp, #16]
    30e6:	9905      	ldr	r1, [sp, #20]
    30e8:	f001 ffb0 	bl	504c <__aeabi_dmul>
    30ec:	0002      	movs	r2, r0
    30ee:	000b      	movs	r3, r1
    30f0:	0020      	movs	r0, r4
    30f2:	0029      	movs	r1, r5
    30f4:	f001 f85a 	bl	41ac <__aeabi_dadd>
    30f8:	0004      	movs	r4, r0
    30fa:	000d      	movs	r5, r1
    30fc:	9802      	ldr	r0, [sp, #8]
    30fe:	9903      	ldr	r1, [sp, #12]
    3100:	003b      	movs	r3, r7
    3102:	0032      	movs	r2, r6
    3104:	9404      	str	r4, [sp, #16]
    3106:	9505      	str	r5, [sp, #20]
    3108:	f001 ffa0 	bl	504c <__aeabi_dmul>
    310c:	9000      	str	r0, [sp, #0]
    310e:	9101      	str	r1, [sp, #4]
    3110:	000b      	movs	r3, r1
    3112:	0002      	movs	r2, r0
    3114:	0029      	movs	r1, r5
    3116:	0020      	movs	r0, r4
    3118:	f001 f848 	bl	41ac <__aeabi_dadd>
    311c:	4b28      	ldr	r3, [pc, #160]	; (31c0 <__ieee754_pow+0x618>)
    311e:	4681      	mov	r9, r0
    3120:	1e0f      	subs	r7, r1, #0
    3122:	468a      	mov	sl, r1
    3124:	429f      	cmp	r7, r3
    3126:	dc00      	bgt.n	312a <__ieee754_pow+0x582>
    3128:	e13c      	b.n	33a4 <__ieee754_pow+0x7fc>
    312a:	4b26      	ldr	r3, [pc, #152]	; (31c4 <__ieee754_pow+0x61c>)
    312c:	18cb      	adds	r3, r1, r3
    312e:	4303      	orrs	r3, r0
    3130:	d000      	beq.n	3134 <__ieee754_pow+0x58c>
    3132:	e1db      	b.n	34ec <__ieee754_pow+0x944>
    3134:	9804      	ldr	r0, [sp, #16]
    3136:	9905      	ldr	r1, [sp, #20]
    3138:	4a23      	ldr	r2, [pc, #140]	; (31c8 <__ieee754_pow+0x620>)
    313a:	4b24      	ldr	r3, [pc, #144]	; (31cc <__ieee754_pow+0x624>)
    313c:	f001 f836 	bl	41ac <__aeabi_dadd>
    3140:	9a00      	ldr	r2, [sp, #0]
    3142:	9b01      	ldr	r3, [sp, #4]
    3144:	0004      	movs	r4, r0
    3146:	000d      	movs	r5, r1
    3148:	4648      	mov	r0, r9
    314a:	0039      	movs	r1, r7
    314c:	f002 f9f8 	bl	5540 <__aeabi_dsub>
    3150:	0002      	movs	r2, r0
    3152:	000b      	movs	r3, r1
    3154:	0020      	movs	r0, r4
    3156:	0029      	movs	r1, r5
    3158:	f000 fcae 	bl	3ab8 <__aeabi_dcmpgt>
    315c:	003e      	movs	r6, r7
    315e:	e037      	b.n	31d0 <__ieee754_pow+0x628>
    3160:	000fffff 	.word	0x000fffff
    3164:	43400000 	.word	0x43400000
    3168:	fffffc01 	.word	0xfffffc01
    316c:	3ff00000 	.word	0x3ff00000
    3170:	0003988e 	.word	0x0003988e
    3174:	000bb679 	.word	0x000bb679
    3178:	fff00000 	.word	0xfff00000
    317c:	4a454eef 	.word	0x4a454eef
    3180:	3fca7e28 	.word	0x3fca7e28
    3184:	93c9db65 	.word	0x93c9db65
    3188:	3fcd864a 	.word	0x3fcd864a
    318c:	a91d4101 	.word	0xa91d4101
    3190:	3fd17460 	.word	0x3fd17460
    3194:	518f264d 	.word	0x518f264d
    3198:	3fd55555 	.word	0x3fd55555
    319c:	db6fabff 	.word	0xdb6fabff
    31a0:	3fdb6db6 	.word	0x3fdb6db6
    31a4:	33333303 	.word	0x33333303
    31a8:	3fe33333 	.word	0x3fe33333
    31ac:	40080000 	.word	0x40080000
    31b0:	3feec709 	.word	0x3feec709
    31b4:	dc3a03fd 	.word	0xdc3a03fd
    31b8:	145b01f5 	.word	0x145b01f5
    31bc:	be3e2fe0 	.word	0xbe3e2fe0
    31c0:	408fffff 	.word	0x408fffff
    31c4:	bf700000 	.word	0xbf700000
    31c8:	652b82fe 	.word	0x652b82fe
    31cc:	3c971547 	.word	0x3c971547
    31d0:	2800      	cmp	r0, #0
    31d2:	d000      	beq.n	31d6 <__ieee754_pow+0x62e>
    31d4:	e18a      	b.n	34ec <__ieee754_pow+0x944>
    31d6:	2280      	movs	r2, #128	; 0x80
    31d8:	4be7      	ldr	r3, [pc, #924]	; (3578 <__ieee754_pow+0x9d0>)
    31da:	0352      	lsls	r2, r2, #13
    31dc:	469c      	mov	ip, r3
    31de:	0013      	movs	r3, r2
    31e0:	1536      	asrs	r6, r6, #20
    31e2:	4466      	add	r6, ip
    31e4:	4133      	asrs	r3, r6
    31e6:	49e5      	ldr	r1, [pc, #916]	; (357c <__ieee754_pow+0x9d4>)
    31e8:	19db      	adds	r3, r3, r7
    31ea:	005e      	lsls	r6, r3, #1
    31ec:	001c      	movs	r4, r3
    31ee:	031b      	lsls	r3, r3, #12
    31f0:	468c      	mov	ip, r1
    31f2:	0b1b      	lsrs	r3, r3, #12
    31f4:	4313      	orrs	r3, r2
    31f6:	2214      	movs	r2, #20
    31f8:	0d76      	lsrs	r6, r6, #21
    31fa:	4fe1      	ldr	r7, [pc, #900]	; (3580 <__ieee754_pow+0x9d8>)
    31fc:	4466      	add	r6, ip
    31fe:	4137      	asrs	r7, r6
    3200:	1b96      	subs	r6, r2, r6
    3202:	4133      	asrs	r3, r6
    3204:	4698      	mov	r8, r3
    3206:	4653      	mov	r3, sl
    3208:	43bc      	bics	r4, r7
    320a:	2000      	movs	r0, #0
    320c:	0021      	movs	r1, r4
    320e:	2b00      	cmp	r3, #0
    3210:	da00      	bge.n	3214 <__ieee754_pow+0x66c>
    3212:	e1a9      	b.n	3568 <__ieee754_pow+0x9c0>
    3214:	0002      	movs	r2, r0
    3216:	000b      	movs	r3, r1
    3218:	9800      	ldr	r0, [sp, #0]
    321a:	9901      	ldr	r1, [sp, #4]
    321c:	f002 f990 	bl	5540 <__aeabi_dsub>
    3220:	000b      	movs	r3, r1
    3222:	9000      	str	r0, [sp, #0]
    3224:	9101      	str	r1, [sp, #4]
    3226:	0002      	movs	r2, r0
    3228:	9804      	ldr	r0, [sp, #16]
    322a:	9905      	ldr	r1, [sp, #20]
    322c:	f000 ffbe 	bl	41ac <__aeabi_dadd>
    3230:	4643      	mov	r3, r8
    3232:	051b      	lsls	r3, r3, #20
    3234:	4699      	mov	r9, r3
    3236:	2000      	movs	r0, #0
    3238:	2200      	movs	r2, #0
    323a:	4bd2      	ldr	r3, [pc, #840]	; (3584 <__ieee754_pow+0x9dc>)
    323c:	0006      	movs	r6, r0
    323e:	000f      	movs	r7, r1
    3240:	f001 ff04 	bl	504c <__aeabi_dmul>
    3244:	9a00      	ldr	r2, [sp, #0]
    3246:	9b01      	ldr	r3, [sp, #4]
    3248:	9002      	str	r0, [sp, #8]
    324a:	9103      	str	r1, [sp, #12]
    324c:	0030      	movs	r0, r6
    324e:	0039      	movs	r1, r7
    3250:	f002 f976 	bl	5540 <__aeabi_dsub>
    3254:	0002      	movs	r2, r0
    3256:	000b      	movs	r3, r1
    3258:	9804      	ldr	r0, [sp, #16]
    325a:	9905      	ldr	r1, [sp, #20]
    325c:	f002 f970 	bl	5540 <__aeabi_dsub>
    3260:	4ac9      	ldr	r2, [pc, #804]	; (3588 <__ieee754_pow+0x9e0>)
    3262:	4bca      	ldr	r3, [pc, #808]	; (358c <__ieee754_pow+0x9e4>)
    3264:	f001 fef2 	bl	504c <__aeabi_dmul>
    3268:	4ac9      	ldr	r2, [pc, #804]	; (3590 <__ieee754_pow+0x9e8>)
    326a:	0004      	movs	r4, r0
    326c:	000d      	movs	r5, r1
    326e:	4bc9      	ldr	r3, [pc, #804]	; (3594 <__ieee754_pow+0x9ec>)
    3270:	0030      	movs	r0, r6
    3272:	0039      	movs	r1, r7
    3274:	f001 feea 	bl	504c <__aeabi_dmul>
    3278:	0002      	movs	r2, r0
    327a:	000b      	movs	r3, r1
    327c:	0020      	movs	r0, r4
    327e:	0029      	movs	r1, r5
    3280:	f000 ff94 	bl	41ac <__aeabi_dadd>
    3284:	0004      	movs	r4, r0
    3286:	000d      	movs	r5, r1
    3288:	0002      	movs	r2, r0
    328a:	000b      	movs	r3, r1
    328c:	9802      	ldr	r0, [sp, #8]
    328e:	9903      	ldr	r1, [sp, #12]
    3290:	f000 ff8c 	bl	41ac <__aeabi_dadd>
    3294:	9a02      	ldr	r2, [sp, #8]
    3296:	9b03      	ldr	r3, [sp, #12]
    3298:	0006      	movs	r6, r0
    329a:	000f      	movs	r7, r1
    329c:	f002 f950 	bl	5540 <__aeabi_dsub>
    32a0:	0002      	movs	r2, r0
    32a2:	000b      	movs	r3, r1
    32a4:	0020      	movs	r0, r4
    32a6:	0029      	movs	r1, r5
    32a8:	f002 f94a 	bl	5540 <__aeabi_dsub>
    32ac:	0032      	movs	r2, r6
    32ae:	9000      	str	r0, [sp, #0]
    32b0:	9101      	str	r1, [sp, #4]
    32b2:	003b      	movs	r3, r7
    32b4:	0030      	movs	r0, r6
    32b6:	0039      	movs	r1, r7
    32b8:	f001 fec8 	bl	504c <__aeabi_dmul>
    32bc:	0004      	movs	r4, r0
    32be:	000d      	movs	r5, r1
    32c0:	4ab5      	ldr	r2, [pc, #724]	; (3598 <__ieee754_pow+0x9f0>)
    32c2:	4bb6      	ldr	r3, [pc, #728]	; (359c <__ieee754_pow+0x9f4>)
    32c4:	f001 fec2 	bl	504c <__aeabi_dmul>
    32c8:	4ab5      	ldr	r2, [pc, #724]	; (35a0 <__ieee754_pow+0x9f8>)
    32ca:	4bb6      	ldr	r3, [pc, #728]	; (35a4 <__ieee754_pow+0x9fc>)
    32cc:	f002 f938 	bl	5540 <__aeabi_dsub>
    32d0:	0022      	movs	r2, r4
    32d2:	002b      	movs	r3, r5
    32d4:	f001 feba 	bl	504c <__aeabi_dmul>
    32d8:	4ab3      	ldr	r2, [pc, #716]	; (35a8 <__ieee754_pow+0xa00>)
    32da:	4bb4      	ldr	r3, [pc, #720]	; (35ac <__ieee754_pow+0xa04>)
    32dc:	f000 ff66 	bl	41ac <__aeabi_dadd>
    32e0:	0022      	movs	r2, r4
    32e2:	002b      	movs	r3, r5
    32e4:	f001 feb2 	bl	504c <__aeabi_dmul>
    32e8:	4ab1      	ldr	r2, [pc, #708]	; (35b0 <__ieee754_pow+0xa08>)
    32ea:	4bb2      	ldr	r3, [pc, #712]	; (35b4 <__ieee754_pow+0xa0c>)
    32ec:	f002 f928 	bl	5540 <__aeabi_dsub>
    32f0:	0022      	movs	r2, r4
    32f2:	002b      	movs	r3, r5
    32f4:	f001 feaa 	bl	504c <__aeabi_dmul>
    32f8:	4aaf      	ldr	r2, [pc, #700]	; (35b8 <__ieee754_pow+0xa10>)
    32fa:	4bb0      	ldr	r3, [pc, #704]	; (35bc <__ieee754_pow+0xa14>)
    32fc:	f000 ff56 	bl	41ac <__aeabi_dadd>
    3300:	0022      	movs	r2, r4
    3302:	002b      	movs	r3, r5
    3304:	f001 fea2 	bl	504c <__aeabi_dmul>
    3308:	0002      	movs	r2, r0
    330a:	000b      	movs	r3, r1
    330c:	0030      	movs	r0, r6
    330e:	0039      	movs	r1, r7
    3310:	f002 f916 	bl	5540 <__aeabi_dsub>
    3314:	0004      	movs	r4, r0
    3316:	000d      	movs	r5, r1
    3318:	0002      	movs	r2, r0
    331a:	000b      	movs	r3, r1
    331c:	0030      	movs	r0, r6
    331e:	0039      	movs	r1, r7
    3320:	f001 fe94 	bl	504c <__aeabi_dmul>
    3324:	2380      	movs	r3, #128	; 0x80
    3326:	9002      	str	r0, [sp, #8]
    3328:	9103      	str	r1, [sp, #12]
    332a:	2200      	movs	r2, #0
    332c:	05db      	lsls	r3, r3, #23
    332e:	0020      	movs	r0, r4
    3330:	0029      	movs	r1, r5
    3332:	f002 f905 	bl	5540 <__aeabi_dsub>
    3336:	0002      	movs	r2, r0
    3338:	000b      	movs	r3, r1
    333a:	9802      	ldr	r0, [sp, #8]
    333c:	9903      	ldr	r1, [sp, #12]
    333e:	f001 fa61 	bl	4804 <__aeabi_ddiv>
    3342:	9a00      	ldr	r2, [sp, #0]
    3344:	9b01      	ldr	r3, [sp, #4]
    3346:	0004      	movs	r4, r0
    3348:	000d      	movs	r5, r1
    334a:	0030      	movs	r0, r6
    334c:	0039      	movs	r1, r7
    334e:	f001 fe7d 	bl	504c <__aeabi_dmul>
    3352:	9a00      	ldr	r2, [sp, #0]
    3354:	9b01      	ldr	r3, [sp, #4]
    3356:	f000 ff29 	bl	41ac <__aeabi_dadd>
    335a:	0002      	movs	r2, r0
    335c:	000b      	movs	r3, r1
    335e:	0020      	movs	r0, r4
    3360:	0029      	movs	r1, r5
    3362:	f002 f8ed 	bl	5540 <__aeabi_dsub>
    3366:	0032      	movs	r2, r6
    3368:	003b      	movs	r3, r7
    336a:	f002 f8e9 	bl	5540 <__aeabi_dsub>
    336e:	0002      	movs	r2, r0
    3370:	000b      	movs	r3, r1
    3372:	2000      	movs	r0, #0
    3374:	4992      	ldr	r1, [pc, #584]	; (35c0 <__ieee754_pow+0xa18>)
    3376:	f002 f8e3 	bl	5540 <__aeabi_dsub>
    337a:	464b      	mov	r3, r9
    337c:	185b      	adds	r3, r3, r1
    337e:	151a      	asrs	r2, r3, #20
    3380:	2a00      	cmp	r2, #0
    3382:	dc00      	bgt.n	3386 <__ieee754_pow+0x7de>
    3384:	e0f4      	b.n	3570 <__ieee754_pow+0x9c8>
    3386:	0019      	movs	r1, r3
    3388:	9a06      	ldr	r2, [sp, #24]
    338a:	9b07      	ldr	r3, [sp, #28]
    338c:	f001 fe5e 	bl	504c <__aeabi_dmul>
    3390:	0006      	movs	r6, r0
    3392:	e452      	b.n	2c3a <__ieee754_pow+0x92>
    3394:	0032      	movs	r2, r6
    3396:	0030      	movs	r0, r6
    3398:	002b      	movs	r3, r5
    339a:	0029      	movs	r1, r5
    339c:	f001 fe56 	bl	504c <__aeabi_dmul>
    33a0:	0006      	movs	r6, r0
    33a2:	e44a      	b.n	2c3a <__ieee754_pow+0x92>
    33a4:	4b87      	ldr	r3, [pc, #540]	; (35c4 <__ieee754_pow+0xa1c>)
    33a6:	004e      	lsls	r6, r1, #1
    33a8:	0876      	lsrs	r6, r6, #1
    33aa:	429e      	cmp	r6, r3
    33ac:	dc00      	bgt.n	33b0 <__ieee754_pow+0x808>
    33ae:	e0bf      	b.n	3530 <__ieee754_pow+0x988>
    33b0:	4b85      	ldr	r3, [pc, #532]	; (35c8 <__ieee754_pow+0xa20>)
    33b2:	18cb      	adds	r3, r1, r3
    33b4:	4303      	orrs	r3, r0
    33b6:	d10c      	bne.n	33d2 <__ieee754_pow+0x82a>
    33b8:	9a00      	ldr	r2, [sp, #0]
    33ba:	9b01      	ldr	r3, [sp, #4]
    33bc:	f002 f8c0 	bl	5540 <__aeabi_dsub>
    33c0:	0002      	movs	r2, r0
    33c2:	000b      	movs	r3, r1
    33c4:	9804      	ldr	r0, [sp, #16]
    33c6:	9905      	ldr	r1, [sp, #20]
    33c8:	f000 fb6c 	bl	3aa4 <__aeabi_dcmple>
    33cc:	2800      	cmp	r0, #0
    33ce:	d100      	bne.n	33d2 <__ieee754_pow+0x82a>
    33d0:	e701      	b.n	31d6 <__ieee754_pow+0x62e>
    33d2:	9806      	ldr	r0, [sp, #24]
    33d4:	9907      	ldr	r1, [sp, #28]
    33d6:	4a7d      	ldr	r2, [pc, #500]	; (35cc <__ieee754_pow+0xa24>)
    33d8:	4b7d      	ldr	r3, [pc, #500]	; (35d0 <__ieee754_pow+0xa28>)
    33da:	f001 fe37 	bl	504c <__aeabi_dmul>
    33de:	4a7b      	ldr	r2, [pc, #492]	; (35cc <__ieee754_pow+0xa24>)
    33e0:	4b7b      	ldr	r3, [pc, #492]	; (35d0 <__ieee754_pow+0xa28>)
    33e2:	f001 fe33 	bl	504c <__aeabi_dmul>
    33e6:	0006      	movs	r6, r0
    33e8:	f7ff fc27 	bl	2c3a <__ieee754_pow+0x92>
    33ec:	2300      	movs	r3, #0
    33ee:	4c79      	ldr	r4, [pc, #484]	; (35d4 <__ieee754_pow+0xa2c>)
    33f0:	9306      	str	r3, [sp, #24]
    33f2:	9407      	str	r4, [sp, #28]
    33f4:	e666      	b.n	30c4 <__ieee754_pow+0x51c>
    33f6:	4653      	mov	r3, sl
    33f8:	2b00      	cmp	r3, #0
    33fa:	db00      	blt.n	33fe <__ieee754_pow+0x856>
    33fc:	e4c3      	b.n	2d86 <__ieee754_pow+0x1de>
    33fe:	9b00      	ldr	r3, [sp, #0]
    3400:	9c01      	ldr	r4, [sp, #4]
    3402:	2280      	movs	r2, #128	; 0x80
    3404:	0612      	lsls	r2, r2, #24
    3406:	001e      	movs	r6, r3
    3408:	4694      	mov	ip, r2
    340a:	0023      	movs	r3, r4
    340c:	4463      	add	r3, ip
    340e:	0019      	movs	r1, r3
    3410:	f7ff fc13 	bl	2c3a <__ieee754_pow+0x92>
    3414:	0002      	movs	r2, r0
    3416:	000b      	movs	r3, r1
    3418:	2000      	movs	r0, #0
    341a:	4969      	ldr	r1, [pc, #420]	; (35c0 <__ieee754_pow+0xa18>)
    341c:	f001 f9f2 	bl	4804 <__aeabi_ddiv>
    3420:	e44a      	b.n	2cb8 <__ieee754_pow+0x110>
    3422:	4b6d      	ldr	r3, [pc, #436]	; (35d8 <__ieee754_pow+0xa30>)
    3424:	429c      	cmp	r4, r3
    3426:	dc00      	bgt.n	342a <__ieee754_pow+0x882>
    3428:	e4aa      	b.n	2d80 <__ieee754_pow+0x1d8>
    342a:	4b65      	ldr	r3, [pc, #404]	; (35c0 <__ieee754_pow+0xa18>)
    342c:	429c      	cmp	r4, r3
    342e:	dd01      	ble.n	3434 <__ieee754_pow+0x88c>
    3430:	f7ff fc2c 	bl	2c8c <__ieee754_pow+0xe4>
    3434:	2200      	movs	r2, #0
    3436:	4b62      	ldr	r3, [pc, #392]	; (35c0 <__ieee754_pow+0xa18>)
    3438:	f002 f882 	bl	5540 <__aeabi_dsub>
    343c:	22c0      	movs	r2, #192	; 0xc0
    343e:	4b67      	ldr	r3, [pc, #412]	; (35dc <__ieee754_pow+0xa34>)
    3440:	05d2      	lsls	r2, r2, #23
    3442:	0004      	movs	r4, r0
    3444:	000d      	movs	r5, r1
    3446:	f001 fe01 	bl	504c <__aeabi_dmul>
    344a:	4a65      	ldr	r2, [pc, #404]	; (35e0 <__ieee754_pow+0xa38>)
    344c:	0006      	movs	r6, r0
    344e:	000f      	movs	r7, r1
    3450:	4b64      	ldr	r3, [pc, #400]	; (35e4 <__ieee754_pow+0xa3c>)
    3452:	0020      	movs	r0, r4
    3454:	0029      	movs	r1, r5
    3456:	f001 fdf9 	bl	504c <__aeabi_dmul>
    345a:	2200      	movs	r2, #0
    345c:	9002      	str	r0, [sp, #8]
    345e:	9103      	str	r1, [sp, #12]
    3460:	4b61      	ldr	r3, [pc, #388]	; (35e8 <__ieee754_pow+0xa40>)
    3462:	0020      	movs	r0, r4
    3464:	0029      	movs	r1, r5
    3466:	f001 fdf1 	bl	504c <__aeabi_dmul>
    346a:	0002      	movs	r2, r0
    346c:	000b      	movs	r3, r1
    346e:	485f      	ldr	r0, [pc, #380]	; (35ec <__ieee754_pow+0xa44>)
    3470:	495f      	ldr	r1, [pc, #380]	; (35f0 <__ieee754_pow+0xa48>)
    3472:	f002 f865 	bl	5540 <__aeabi_dsub>
    3476:	0022      	movs	r2, r4
    3478:	002b      	movs	r3, r5
    347a:	f001 fde7 	bl	504c <__aeabi_dmul>
    347e:	0002      	movs	r2, r0
    3480:	000b      	movs	r3, r1
    3482:	2000      	movs	r0, #0
    3484:	495b      	ldr	r1, [pc, #364]	; (35f4 <__ieee754_pow+0xa4c>)
    3486:	f002 f85b 	bl	5540 <__aeabi_dsub>
    348a:	0022      	movs	r2, r4
    348c:	9004      	str	r0, [sp, #16]
    348e:	9105      	str	r1, [sp, #20]
    3490:	002b      	movs	r3, r5
    3492:	0020      	movs	r0, r4
    3494:	0029      	movs	r1, r5
    3496:	f001 fdd9 	bl	504c <__aeabi_dmul>
    349a:	0002      	movs	r2, r0
    349c:	000b      	movs	r3, r1
    349e:	9804      	ldr	r0, [sp, #16]
    34a0:	9905      	ldr	r1, [sp, #20]
    34a2:	f001 fdd3 	bl	504c <__aeabi_dmul>
    34a6:	4a54      	ldr	r2, [pc, #336]	; (35f8 <__ieee754_pow+0xa50>)
    34a8:	4b4c      	ldr	r3, [pc, #304]	; (35dc <__ieee754_pow+0xa34>)
    34aa:	f001 fdcf 	bl	504c <__aeabi_dmul>
    34ae:	0002      	movs	r2, r0
    34b0:	000b      	movs	r3, r1
    34b2:	9802      	ldr	r0, [sp, #8]
    34b4:	9903      	ldr	r1, [sp, #12]
    34b6:	f002 f843 	bl	5540 <__aeabi_dsub>
    34ba:	0002      	movs	r2, r0
    34bc:	000b      	movs	r3, r1
    34be:	0004      	movs	r4, r0
    34c0:	000d      	movs	r5, r1
    34c2:	0030      	movs	r0, r6
    34c4:	0039      	movs	r1, r7
    34c6:	f000 fe71 	bl	41ac <__aeabi_dadd>
    34ca:	2200      	movs	r2, #0
    34cc:	0010      	movs	r0, r2
    34ce:	003b      	movs	r3, r7
    34d0:	0032      	movs	r2, r6
    34d2:	9002      	str	r0, [sp, #8]
    34d4:	9103      	str	r1, [sp, #12]
    34d6:	f002 f833 	bl	5540 <__aeabi_dsub>
    34da:	0002      	movs	r2, r0
    34dc:	000b      	movs	r3, r1
    34de:	0020      	movs	r0, r4
    34e0:	0029      	movs	r1, r5
    34e2:	f002 f82d 	bl	5540 <__aeabi_dsub>
    34e6:	9004      	str	r0, [sp, #16]
    34e8:	9105      	str	r1, [sp, #20]
    34ea:	e5e1      	b.n	30b0 <__ieee754_pow+0x508>
    34ec:	4a43      	ldr	r2, [pc, #268]	; (35fc <__ieee754_pow+0xa54>)
    34ee:	4b44      	ldr	r3, [pc, #272]	; (3600 <__ieee754_pow+0xa58>)
    34f0:	9806      	ldr	r0, [sp, #24]
    34f2:	9907      	ldr	r1, [sp, #28]
    34f4:	f001 fdaa 	bl	504c <__aeabi_dmul>
    34f8:	4a40      	ldr	r2, [pc, #256]	; (35fc <__ieee754_pow+0xa54>)
    34fa:	4b41      	ldr	r3, [pc, #260]	; (3600 <__ieee754_pow+0xa58>)
    34fc:	f001 fda6 	bl	504c <__aeabi_dmul>
    3500:	0006      	movs	r6, r0
    3502:	f7ff fb9a 	bl	2c3a <__ieee754_pow+0x92>
    3506:	2a00      	cmp	r2, #0
    3508:	d001      	beq.n	350e <__ieee754_pow+0x966>
    350a:	f7ff fba5 	bl	2c58 <__ieee754_pow+0xb0>
    350e:	3214      	adds	r2, #20
    3510:	1ad3      	subs	r3, r2, r3
    3512:	003a      	movs	r2, r7
    3514:	411a      	asrs	r2, r3
    3516:	0011      	movs	r1, r2
    3518:	4099      	lsls	r1, r3
    351a:	428f      	cmp	r7, r1
    351c:	d001      	beq.n	3522 <__ieee754_pow+0x97a>
    351e:	f7ff fb6f 	bl	2c00 <__ieee754_pow+0x58>
    3522:	2301      	movs	r3, #1
    3524:	4013      	ands	r3, r2
    3526:	2202      	movs	r2, #2
    3528:	1ad3      	subs	r3, r2, r3
    352a:	469b      	mov	fp, r3
    352c:	f7ff fb68 	bl	2c00 <__ieee754_pow+0x58>
    3530:	4b30      	ldr	r3, [pc, #192]	; (35f4 <__ieee754_pow+0xa4c>)
    3532:	429e      	cmp	r6, r3
    3534:	dd00      	ble.n	3538 <__ieee754_pow+0x990>
    3536:	e64e      	b.n	31d6 <__ieee754_pow+0x62e>
    3538:	2300      	movs	r3, #0
    353a:	4699      	mov	r9, r3
    353c:	4698      	mov	r8, r3
    353e:	e67a      	b.n	3236 <__ieee754_pow+0x68e>
    3540:	0002      	movs	r2, r0
    3542:	000b      	movs	r3, r1
    3544:	f7ff fc14 	bl	2d70 <__ieee754_pow+0x1c8>
    3548:	2380      	movs	r3, #128	; 0x80
    354a:	4c2e      	ldr	r4, [pc, #184]	; (3604 <__ieee754_pow+0xa5c>)
    354c:	05db      	lsls	r3, r3, #23
    354e:	9308      	str	r3, [sp, #32]
    3550:	9409      	str	r4, [sp, #36]	; 0x24
    3552:	4b2d      	ldr	r3, [pc, #180]	; (3608 <__ieee754_pow+0xa60>)
    3554:	4c2d      	ldr	r4, [pc, #180]	; (360c <__ieee754_pow+0xa64>)
    3556:	2200      	movs	r2, #0
    3558:	930c      	str	r3, [sp, #48]	; 0x30
    355a:	940d      	str	r4, [sp, #52]	; 0x34
    355c:	2480      	movs	r4, #128	; 0x80
    355e:	4b2c      	ldr	r3, [pc, #176]	; (3610 <__ieee754_pow+0xa68>)
    3560:	02e4      	lsls	r4, r4, #11
    3562:	9206      	str	r2, [sp, #24]
    3564:	9307      	str	r3, [sp, #28]
    3566:	e456      	b.n	2e16 <__ieee754_pow+0x26e>
    3568:	4643      	mov	r3, r8
    356a:	425b      	negs	r3, r3
    356c:	4698      	mov	r8, r3
    356e:	e651      	b.n	3214 <__ieee754_pow+0x66c>
    3570:	4642      	mov	r2, r8
    3572:	f000 f9fd 	bl	3970 <scalbn>
    3576:	e707      	b.n	3388 <__ieee754_pow+0x7e0>
    3578:	fffffc02 	.word	0xfffffc02
    357c:	fffffc01 	.word	0xfffffc01
    3580:	000fffff 	.word	0x000fffff
    3584:	3fe62e43 	.word	0x3fe62e43
    3588:	fefa39ef 	.word	0xfefa39ef
    358c:	3fe62e42 	.word	0x3fe62e42
    3590:	0ca86c39 	.word	0x0ca86c39
    3594:	be205c61 	.word	0xbe205c61
    3598:	72bea4d0 	.word	0x72bea4d0
    359c:	3e663769 	.word	0x3e663769
    35a0:	c5d26bf1 	.word	0xc5d26bf1
    35a4:	3ebbbd41 	.word	0x3ebbbd41
    35a8:	af25de2c 	.word	0xaf25de2c
    35ac:	3f11566a 	.word	0x3f11566a
    35b0:	16bebd93 	.word	0x16bebd93
    35b4:	3f66c16c 	.word	0x3f66c16c
    35b8:	5555553e 	.word	0x5555553e
    35bc:	3fc55555 	.word	0x3fc55555
    35c0:	3ff00000 	.word	0x3ff00000
    35c4:	4090cbff 	.word	0x4090cbff
    35c8:	3f6f3400 	.word	0x3f6f3400
    35cc:	c2f8f359 	.word	0xc2f8f359
    35d0:	01a56e1f 	.word	0x01a56e1f
    35d4:	bff00000 	.word	0xbff00000
    35d8:	3feffffe 	.word	0x3feffffe
    35dc:	3ff71547 	.word	0x3ff71547
    35e0:	f85ddf44 	.word	0xf85ddf44
    35e4:	3e54ae0b 	.word	0x3e54ae0b
    35e8:	3fd00000 	.word	0x3fd00000
    35ec:	55555555 	.word	0x55555555
    35f0:	3fd55555 	.word	0x3fd55555
    35f4:	3fe00000 	.word	0x3fe00000
    35f8:	652b82fe 	.word	0x652b82fe
    35fc:	8800759c 	.word	0x8800759c
    3600:	7e37e43c 	.word	0x7e37e43c
    3604:	3fe2b803 	.word	0x3fe2b803
    3608:	43cfd006 	.word	0x43cfd006
    360c:	3e4cfdeb 	.word	0x3e4cfdeb
    3610:	3ff80000 	.word	0x3ff80000

00003614 <__ieee754_sqrt>:
    3614:	b5f0      	push	{r4, r5, r6, r7, lr}
    3616:	4656      	mov	r6, sl
    3618:	464d      	mov	r5, r9
    361a:	4644      	mov	r4, r8
    361c:	465f      	mov	r7, fp
    361e:	4b75      	ldr	r3, [pc, #468]	; (37f4 <__ieee754_sqrt+0x1e0>)
    3620:	b4f0      	push	{r4, r5, r6, r7}
    3622:	000a      	movs	r2, r1
    3624:	000d      	movs	r5, r1
    3626:	0019      	movs	r1, r3
    3628:	b083      	sub	sp, #12
    362a:	0006      	movs	r6, r0
    362c:	0004      	movs	r4, r0
    362e:	4029      	ands	r1, r5
    3630:	4299      	cmp	r1, r3
    3632:	d100      	bne.n	3636 <__ieee754_sqrt+0x22>
    3634:	e0ba      	b.n	37ac <__ieee754_sqrt+0x198>
    3636:	2d00      	cmp	r5, #0
    3638:	dc00      	bgt.n	363c <__ieee754_sqrt+0x28>
    363a:	e094      	b.n	3766 <__ieee754_sqrt+0x152>
    363c:	152d      	asrs	r5, r5, #20
    363e:	d100      	bne.n	3642 <__ieee754_sqrt+0x2e>
    3640:	e0a3      	b.n	378a <__ieee754_sqrt+0x176>
    3642:	4b6d      	ldr	r3, [pc, #436]	; (37f8 <__ieee754_sqrt+0x1e4>)
    3644:	0312      	lsls	r2, r2, #12
    3646:	469c      	mov	ip, r3
    3648:	2380      	movs	r3, #128	; 0x80
    364a:	0b12      	lsrs	r2, r2, #12
    364c:	035b      	lsls	r3, r3, #13
    364e:	4465      	add	r5, ip
    3650:	431a      	orrs	r2, r3
    3652:	07eb      	lsls	r3, r5, #31
    3654:	d500      	bpl.n	3658 <__ieee754_sqrt+0x44>
    3656:	e081      	b.n	375c <__ieee754_sqrt+0x148>
    3658:	106b      	asrs	r3, r5, #1
    365a:	4698      	mov	r8, r3
    365c:	0fe3      	lsrs	r3, r4, #31
    365e:	189b      	adds	r3, r3, r2
    3660:	189b      	adds	r3, r3, r2
    3662:	2280      	movs	r2, #128	; 0x80
    3664:	2116      	movs	r1, #22
    3666:	2600      	movs	r6, #0
    3668:	2700      	movs	r7, #0
    366a:	0064      	lsls	r4, r4, #1
    366c:	0392      	lsls	r2, r2, #14
    366e:	18b8      	adds	r0, r7, r2
    3670:	4298      	cmp	r0, r3
    3672:	dc02      	bgt.n	367a <__ieee754_sqrt+0x66>
    3674:	1887      	adds	r7, r0, r2
    3676:	1a1b      	subs	r3, r3, r0
    3678:	18b6      	adds	r6, r6, r2
    367a:	0fe0      	lsrs	r0, r4, #31
    367c:	005b      	lsls	r3, r3, #1
    367e:	3901      	subs	r1, #1
    3680:	181b      	adds	r3, r3, r0
    3682:	0064      	lsls	r4, r4, #1
    3684:	0852      	lsrs	r2, r2, #1
    3686:	2900      	cmp	r1, #0
    3688:	d1f1      	bne.n	366e <__ieee754_sqrt+0x5a>
    368a:	2200      	movs	r2, #0
    368c:	9201      	str	r2, [sp, #4]
    368e:	4694      	mov	ip, r2
    3690:	2280      	movs	r2, #128	; 0x80
    3692:	0612      	lsls	r2, r2, #24
    3694:	2020      	movs	r0, #32
    3696:	4691      	mov	r9, r2
    3698:	e009      	b.n	36ae <__ieee754_sqrt+0x9a>
    369a:	429f      	cmp	r7, r3
    369c:	d041      	beq.n	3722 <__ieee754_sqrt+0x10e>
    369e:	0fe1      	lsrs	r1, r4, #31
    36a0:	18c9      	adds	r1, r1, r3
    36a2:	3801      	subs	r0, #1
    36a4:	18cb      	adds	r3, r1, r3
    36a6:	0064      	lsls	r4, r4, #1
    36a8:	0852      	lsrs	r2, r2, #1
    36aa:	2800      	cmp	r0, #0
    36ac:	d01e      	beq.n	36ec <__ieee754_sqrt+0xd8>
    36ae:	4661      	mov	r1, ip
    36b0:	1851      	adds	r1, r2, r1
    36b2:	429f      	cmp	r7, r3
    36b4:	daf1      	bge.n	369a <__ieee754_sqrt+0x86>
    36b6:	188d      	adds	r5, r1, r2
    36b8:	46ac      	mov	ip, r5
    36ba:	0fcd      	lsrs	r5, r1, #31
    36bc:	07ed      	lsls	r5, r5, #31
    36be:	46ba      	mov	sl, r7
    36c0:	454d      	cmp	r5, r9
    36c2:	d039      	beq.n	3738 <__ieee754_sqrt+0x124>
    36c4:	1bdb      	subs	r3, r3, r7
    36c6:	428c      	cmp	r4, r1
    36c8:	41bf      	sbcs	r7, r7
    36ca:	427f      	negs	r7, r7
    36cc:	1bdb      	subs	r3, r3, r7
    36ce:	1a64      	subs	r4, r4, r1
    36d0:	9901      	ldr	r1, [sp, #4]
    36d2:	3801      	subs	r0, #1
    36d4:	468b      	mov	fp, r1
    36d6:	4493      	add	fp, r2
    36d8:	4659      	mov	r1, fp
    36da:	9101      	str	r1, [sp, #4]
    36dc:	0fe1      	lsrs	r1, r4, #31
    36de:	18c9      	adds	r1, r1, r3
    36e0:	4657      	mov	r7, sl
    36e2:	18cb      	adds	r3, r1, r3
    36e4:	0064      	lsls	r4, r4, #1
    36e6:	0852      	lsrs	r2, r2, #1
    36e8:	2800      	cmp	r0, #0
    36ea:	d1e0      	bne.n	36ae <__ieee754_sqrt+0x9a>
    36ec:	4323      	orrs	r3, r4
    36ee:	d12b      	bne.n	3748 <__ieee754_sqrt+0x134>
    36f0:	9b01      	ldr	r3, [sp, #4]
    36f2:	085b      	lsrs	r3, r3, #1
    36f4:	4941      	ldr	r1, [pc, #260]	; (37fc <__ieee754_sqrt+0x1e8>)
    36f6:	1072      	asrs	r2, r6, #1
    36f8:	468c      	mov	ip, r1
    36fa:	4462      	add	r2, ip
    36fc:	07f1      	lsls	r1, r6, #31
    36fe:	d502      	bpl.n	3706 <__ieee754_sqrt+0xf2>
    3700:	2180      	movs	r1, #128	; 0x80
    3702:	0609      	lsls	r1, r1, #24
    3704:	430b      	orrs	r3, r1
    3706:	4641      	mov	r1, r8
    3708:	0509      	lsls	r1, r1, #20
    370a:	188d      	adds	r5, r1, r2
    370c:	001e      	movs	r6, r3
    370e:	002f      	movs	r7, r5
    3710:	0030      	movs	r0, r6
    3712:	0039      	movs	r1, r7
    3714:	b003      	add	sp, #12
    3716:	bc3c      	pop	{r2, r3, r4, r5}
    3718:	4690      	mov	r8, r2
    371a:	4699      	mov	r9, r3
    371c:	46a2      	mov	sl, r4
    371e:	46ab      	mov	fp, r5
    3720:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3722:	42a1      	cmp	r1, r4
    3724:	d80e      	bhi.n	3744 <__ieee754_sqrt+0x130>
    3726:	188d      	adds	r5, r1, r2
    3728:	46ac      	mov	ip, r5
    372a:	0fcd      	lsrs	r5, r1, #31
    372c:	07ed      	lsls	r5, r5, #31
    372e:	454d      	cmp	r5, r9
    3730:	d048      	beq.n	37c4 <__ieee754_sqrt+0x1b0>
    3732:	469a      	mov	sl, r3
    3734:	2300      	movs	r3, #0
    3736:	e7ca      	b.n	36ce <__ieee754_sqrt+0xba>
    3738:	4665      	mov	r5, ip
    373a:	2d00      	cmp	r5, #0
    373c:	dbc2      	blt.n	36c4 <__ieee754_sqrt+0xb0>
    373e:	1c7d      	adds	r5, r7, #1
    3740:	46aa      	mov	sl, r5
    3742:	e7bf      	b.n	36c4 <__ieee754_sqrt+0xb0>
    3744:	003b      	movs	r3, r7
    3746:	e7aa      	b.n	369e <__ieee754_sqrt+0x8a>
    3748:	9b01      	ldr	r3, [sp, #4]
    374a:	3301      	adds	r3, #1
    374c:	d03e      	beq.n	37cc <__ieee754_sqrt+0x1b8>
    374e:	9a01      	ldr	r2, [sp, #4]
    3750:	2301      	movs	r3, #1
    3752:	4694      	mov	ip, r2
    3754:	4013      	ands	r3, r2
    3756:	4463      	add	r3, ip
    3758:	085b      	lsrs	r3, r3, #1
    375a:	e7cb      	b.n	36f4 <__ieee754_sqrt+0xe0>
    375c:	0fe3      	lsrs	r3, r4, #31
    375e:	0052      	lsls	r2, r2, #1
    3760:	189a      	adds	r2, r3, r2
    3762:	0064      	lsls	r4, r4, #1
    3764:	e778      	b.n	3658 <__ieee754_sqrt+0x44>
    3766:	006b      	lsls	r3, r5, #1
    3768:	085b      	lsrs	r3, r3, #1
    376a:	4303      	orrs	r3, r0
    376c:	002f      	movs	r7, r5
    376e:	2b00      	cmp	r3, #0
    3770:	d0ce      	beq.n	3710 <__ieee754_sqrt+0xfc>
    3772:	2500      	movs	r5, #0
    3774:	2a00      	cmp	r2, #0
    3776:	d131      	bne.n	37dc <__ieee754_sqrt+0x1c8>
    3778:	0ae2      	lsrs	r2, r4, #11
    377a:	3d15      	subs	r5, #21
    377c:	0564      	lsls	r4, r4, #21
    377e:	2a00      	cmp	r2, #0
    3780:	d0fa      	beq.n	3778 <__ieee754_sqrt+0x164>
    3782:	2380      	movs	r3, #128	; 0x80
    3784:	035b      	lsls	r3, r3, #13
    3786:	421a      	tst	r2, r3
    3788:	d123      	bne.n	37d2 <__ieee754_sqrt+0x1be>
    378a:	2080      	movs	r0, #128	; 0x80
    378c:	2300      	movs	r3, #0
    378e:	0340      	lsls	r0, r0, #13
    3790:	e000      	b.n	3794 <__ieee754_sqrt+0x180>
    3792:	000b      	movs	r3, r1
    3794:	0052      	lsls	r2, r2, #1
    3796:	1c59      	adds	r1, r3, #1
    3798:	4202      	tst	r2, r0
    379a:	d0fa      	beq.n	3792 <__ieee754_sqrt+0x17e>
    379c:	2020      	movs	r0, #32
    379e:	1a40      	subs	r0, r0, r1
    37a0:	1aed      	subs	r5, r5, r3
    37a2:	0023      	movs	r3, r4
    37a4:	40c3      	lsrs	r3, r0
    37a6:	408c      	lsls	r4, r1
    37a8:	431a      	orrs	r2, r3
    37aa:	e74a      	b.n	3642 <__ieee754_sqrt+0x2e>
    37ac:	0002      	movs	r2, r0
    37ae:	002b      	movs	r3, r5
    37b0:	0029      	movs	r1, r5
    37b2:	f001 fc4b 	bl	504c <__aeabi_dmul>
    37b6:	0032      	movs	r2, r6
    37b8:	002b      	movs	r3, r5
    37ba:	f000 fcf7 	bl	41ac <__aeabi_dadd>
    37be:	0006      	movs	r6, r0
    37c0:	000f      	movs	r7, r1
    37c2:	e7a5      	b.n	3710 <__ieee754_sqrt+0xfc>
    37c4:	4665      	mov	r5, ip
    37c6:	2d00      	cmp	r5, #0
    37c8:	dab9      	bge.n	373e <__ieee754_sqrt+0x12a>
    37ca:	e7b2      	b.n	3732 <__ieee754_sqrt+0x11e>
    37cc:	3601      	adds	r6, #1
    37ce:	2300      	movs	r3, #0
    37d0:	e790      	b.n	36f4 <__ieee754_sqrt+0xe0>
    37d2:	2301      	movs	r3, #1
    37d4:	2020      	movs	r0, #32
    37d6:	425b      	negs	r3, r3
    37d8:	2100      	movs	r1, #0
    37da:	e7e1      	b.n	37a0 <__ieee754_sqrt+0x18c>
    37dc:	003b      	movs	r3, r7
    37de:	0002      	movs	r2, r0
    37e0:	0039      	movs	r1, r7
    37e2:	f001 fead 	bl	5540 <__aeabi_dsub>
    37e6:	0002      	movs	r2, r0
    37e8:	000b      	movs	r3, r1
    37ea:	f001 f80b 	bl	4804 <__aeabi_ddiv>
    37ee:	0006      	movs	r6, r0
    37f0:	000f      	movs	r7, r1
    37f2:	e78d      	b.n	3710 <__ieee754_sqrt+0xfc>
    37f4:	7ff00000 	.word	0x7ff00000
    37f8:	fffffc01 	.word	0xfffffc01
    37fc:	3fe00000 	.word	0x3fe00000

00003800 <fabs>:
    3800:	0049      	lsls	r1, r1, #1
    3802:	084b      	lsrs	r3, r1, #1
    3804:	0019      	movs	r1, r3
    3806:	4770      	bx	lr

00003808 <finite>:
    3808:	4b03      	ldr	r3, [pc, #12]	; (3818 <finite+0x10>)
    380a:	0048      	lsls	r0, r1, #1
    380c:	469c      	mov	ip, r3
    380e:	0840      	lsrs	r0, r0, #1
    3810:	4460      	add	r0, ip
    3812:	0fc0      	lsrs	r0, r0, #31
    3814:	4770      	bx	lr
    3816:	46c0      	nop			; (mov r8, r8)
    3818:	80100000 	.word	0x80100000

0000381c <matherr>:
    381c:	2000      	movs	r0, #0
    381e:	4770      	bx	lr

00003820 <nan>:
    3820:	2000      	movs	r0, #0
    3822:	4901      	ldr	r1, [pc, #4]	; (3828 <nan+0x8>)
    3824:	4770      	bx	lr
    3826:	46c0      	nop			; (mov r8, r8)
    3828:	7ff80000 	.word	0x7ff80000

0000382c <rint>:
    382c:	b5f0      	push	{r4, r5, r6, r7, lr}
    382e:	4647      	mov	r7, r8
    3830:	b480      	push	{r7}
    3832:	0fcb      	lsrs	r3, r1, #31
    3834:	4698      	mov	r8, r3
    3836:	4c4a      	ldr	r4, [pc, #296]	; (3960 <rint+0x134>)
    3838:	004b      	lsls	r3, r1, #1
    383a:	0d5b      	lsrs	r3, r3, #21
    383c:	191e      	adds	r6, r3, r4
    383e:	b082      	sub	sp, #8
    3840:	0007      	movs	r7, r0
    3842:	000a      	movs	r2, r1
    3844:	2e13      	cmp	r6, #19
    3846:	dc35      	bgt.n	38b4 <rint+0x88>
    3848:	2e00      	cmp	r6, #0
    384a:	db57      	blt.n	38fc <rint+0xd0>
    384c:	4b45      	ldr	r3, [pc, #276]	; (3964 <rint+0x138>)
    384e:	0004      	movs	r4, r0
    3850:	4133      	asrs	r3, r6
    3852:	001f      	movs	r7, r3
    3854:	400f      	ands	r7, r1
    3856:	4307      	orrs	r7, r0
    3858:	000d      	movs	r5, r1
    385a:	2f00      	cmp	r7, #0
    385c:	d024      	beq.n	38a8 <rint+0x7c>
    385e:	085b      	lsrs	r3, r3, #1
    3860:	001c      	movs	r4, r3
    3862:	400c      	ands	r4, r1
    3864:	4320      	orrs	r0, r4
    3866:	2700      	movs	r7, #0
    3868:	2800      	cmp	r0, #0
    386a:	d007      	beq.n	387c <rint+0x50>
    386c:	2e13      	cmp	r6, #19
    386e:	d100      	bne.n	3872 <rint+0x46>
    3870:	e072      	b.n	3958 <rint+0x12c>
    3872:	2280      	movs	r2, #128	; 0x80
    3874:	02d2      	lsls	r2, r2, #11
    3876:	4132      	asrs	r2, r6
    3878:	4399      	bics	r1, r3
    387a:	430a      	orrs	r2, r1
    387c:	4643      	mov	r3, r8
    387e:	00de      	lsls	r6, r3, #3
    3880:	4b39      	ldr	r3, [pc, #228]	; (3968 <rint+0x13c>)
    3882:	0011      	movs	r1, r2
    3884:	199e      	adds	r6, r3, r6
    3886:	6834      	ldr	r4, [r6, #0]
    3888:	6875      	ldr	r5, [r6, #4]
    388a:	0038      	movs	r0, r7
    388c:	0022      	movs	r2, r4
    388e:	002b      	movs	r3, r5
    3890:	f000 fc8c 	bl	41ac <__aeabi_dadd>
    3894:	9000      	str	r0, [sp, #0]
    3896:	9101      	str	r1, [sp, #4]
    3898:	9800      	ldr	r0, [sp, #0]
    389a:	9901      	ldr	r1, [sp, #4]
    389c:	0022      	movs	r2, r4
    389e:	002b      	movs	r3, r5
    38a0:	f001 fe4e 	bl	5540 <__aeabi_dsub>
    38a4:	0004      	movs	r4, r0
    38a6:	000d      	movs	r5, r1
    38a8:	0020      	movs	r0, r4
    38aa:	0029      	movs	r1, r5
    38ac:	b002      	add	sp, #8
    38ae:	bc04      	pop	{r2}
    38b0:	4690      	mov	r8, r2
    38b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    38b4:	2e33      	cmp	r6, #51	; 0x33
    38b6:	dd0c      	ble.n	38d2 <rint+0xa6>
    38b8:	2380      	movs	r3, #128	; 0x80
    38ba:	0004      	movs	r4, r0
    38bc:	000d      	movs	r5, r1
    38be:	00db      	lsls	r3, r3, #3
    38c0:	429e      	cmp	r6, r3
    38c2:	d1f1      	bne.n	38a8 <rint+0x7c>
    38c4:	0002      	movs	r2, r0
    38c6:	000b      	movs	r3, r1
    38c8:	f000 fc70 	bl	41ac <__aeabi_dadd>
    38cc:	0004      	movs	r4, r0
    38ce:	000d      	movs	r5, r1
    38d0:	e7ea      	b.n	38a8 <rint+0x7c>
    38d2:	4c26      	ldr	r4, [pc, #152]	; (396c <rint+0x140>)
    38d4:	000d      	movs	r5, r1
    38d6:	46a4      	mov	ip, r4
    38d8:	2401      	movs	r4, #1
    38da:	4463      	add	r3, ip
    38dc:	4264      	negs	r4, r4
    38de:	40dc      	lsrs	r4, r3
    38e0:	46a4      	mov	ip, r4
    38e2:	4661      	mov	r1, ip
    38e4:	0004      	movs	r4, r0
    38e6:	4201      	tst	r1, r0
    38e8:	d0de      	beq.n	38a8 <rint+0x7c>
    38ea:	0849      	lsrs	r1, r1, #1
    38ec:	4201      	tst	r1, r0
    38ee:	d0c5      	beq.n	387c <rint+0x50>
    38f0:	2780      	movs	r7, #128	; 0x80
    38f2:	05ff      	lsls	r7, r7, #23
    38f4:	411f      	asrs	r7, r3
    38f6:	4388      	bics	r0, r1
    38f8:	4307      	orrs	r7, r0
    38fa:	e7bf      	b.n	387c <rint+0x50>
    38fc:	004b      	lsls	r3, r1, #1
    38fe:	085b      	lsrs	r3, r3, #1
    3900:	4303      	orrs	r3, r0
    3902:	0004      	movs	r4, r0
    3904:	000d      	movs	r5, r1
    3906:	2b00      	cmp	r3, #0
    3908:	d0ce      	beq.n	38a8 <rint+0x7c>
    390a:	030b      	lsls	r3, r1, #12
    390c:	0b1b      	lsrs	r3, r3, #12
    390e:	4303      	orrs	r3, r0
    3910:	425a      	negs	r2, r3
    3912:	4313      	orrs	r3, r2
    3914:	2280      	movs	r2, #128	; 0x80
    3916:	0b1b      	lsrs	r3, r3, #12
    3918:	0312      	lsls	r2, r2, #12
    391a:	4013      	ands	r3, r2
    391c:	0c4a      	lsrs	r2, r1, #17
    391e:	0452      	lsls	r2, r2, #17
    3920:	4313      	orrs	r3, r2
    3922:	0019      	movs	r1, r3
    3924:	4643      	mov	r3, r8
    3926:	4a10      	ldr	r2, [pc, #64]	; (3968 <rint+0x13c>)
    3928:	00db      	lsls	r3, r3, #3
    392a:	18d3      	adds	r3, r2, r3
    392c:	681c      	ldr	r4, [r3, #0]
    392e:	685d      	ldr	r5, [r3, #4]
    3930:	0022      	movs	r2, r4
    3932:	002b      	movs	r3, r5
    3934:	f000 fc3a 	bl	41ac <__aeabi_dadd>
    3938:	9000      	str	r0, [sp, #0]
    393a:	9101      	str	r1, [sp, #4]
    393c:	9800      	ldr	r0, [sp, #0]
    393e:	9901      	ldr	r1, [sp, #4]
    3940:	0022      	movs	r2, r4
    3942:	002b      	movs	r3, r5
    3944:	f001 fdfc 	bl	5540 <__aeabi_dsub>
    3948:	4642      	mov	r2, r8
    394a:	004b      	lsls	r3, r1, #1
    394c:	085b      	lsrs	r3, r3, #1
    394e:	07d6      	lsls	r6, r2, #31
    3950:	4333      	orrs	r3, r6
    3952:	0004      	movs	r4, r0
    3954:	001d      	movs	r5, r3
    3956:	e7a7      	b.n	38a8 <rint+0x7c>
    3958:	2780      	movs	r7, #128	; 0x80
    395a:	063f      	lsls	r7, r7, #24
    395c:	e789      	b.n	3872 <rint+0x46>
    395e:	46c0      	nop			; (mov r8, r8)
    3960:	fffffc01 	.word	0xfffffc01
    3964:	000fffff 	.word	0x000fffff
    3968:	00006420 	.word	0x00006420
    396c:	fffffbed 	.word	0xfffffbed

00003970 <scalbn>:
    3970:	004b      	lsls	r3, r1, #1
    3972:	b570      	push	{r4, r5, r6, lr}
    3974:	0d5b      	lsrs	r3, r3, #21
    3976:	0014      	movs	r4, r2
    3978:	000a      	movs	r2, r1
    397a:	2b00      	cmp	r3, #0
    397c:	d11a      	bne.n	39b4 <scalbn+0x44>
    397e:	004b      	lsls	r3, r1, #1
    3980:	085b      	lsrs	r3, r3, #1
    3982:	4303      	orrs	r3, r0
    3984:	d015      	beq.n	39b2 <scalbn+0x42>
    3986:	2200      	movs	r2, #0
    3988:	4b22      	ldr	r3, [pc, #136]	; (3a14 <scalbn+0xa4>)
    398a:	f001 fb5f 	bl	504c <__aeabi_dmul>
    398e:	4b22      	ldr	r3, [pc, #136]	; (3a18 <scalbn+0xa8>)
    3990:	000a      	movs	r2, r1
    3992:	429c      	cmp	r4, r3
    3994:	db22      	blt.n	39dc <scalbn+0x6c>
    3996:	004b      	lsls	r3, r1, #1
    3998:	0d5b      	lsrs	r3, r3, #21
    399a:	3b36      	subs	r3, #54	; 0x36
    399c:	4d1f      	ldr	r5, [pc, #124]	; (3a1c <scalbn+0xac>)
    399e:	18e3      	adds	r3, r4, r3
    39a0:	42ab      	cmp	r3, r5
    39a2:	dc20      	bgt.n	39e6 <scalbn+0x76>
    39a4:	2b00      	cmp	r3, #0
    39a6:	dd0d      	ble.n	39c4 <scalbn+0x54>
    39a8:	4c1d      	ldr	r4, [pc, #116]	; (3a20 <scalbn+0xb0>)
    39aa:	051b      	lsls	r3, r3, #20
    39ac:	4022      	ands	r2, r4
    39ae:	431a      	orrs	r2, r3
    39b0:	0011      	movs	r1, r2
    39b2:	bd70      	pop	{r4, r5, r6, pc}
    39b4:	4d1b      	ldr	r5, [pc, #108]	; (3a24 <scalbn+0xb4>)
    39b6:	42ab      	cmp	r3, r5
    39b8:	d1f0      	bne.n	399c <scalbn+0x2c>
    39ba:	0002      	movs	r2, r0
    39bc:	000b      	movs	r3, r1
    39be:	f000 fbf5 	bl	41ac <__aeabi_dadd>
    39c2:	e7f6      	b.n	39b2 <scalbn+0x42>
    39c4:	001d      	movs	r5, r3
    39c6:	3535      	adds	r5, #53	; 0x35
    39c8:	da18      	bge.n	39fc <scalbn+0x8c>
    39ca:	4b17      	ldr	r3, [pc, #92]	; (3a28 <scalbn+0xb8>)
    39cc:	0002      	movs	r2, r0
    39ce:	429c      	cmp	r4, r3
    39d0:	dc0a      	bgt.n	39e8 <scalbn+0x78>
    39d2:	000b      	movs	r3, r1
    39d4:	4815      	ldr	r0, [pc, #84]	; (3a2c <scalbn+0xbc>)
    39d6:	4916      	ldr	r1, [pc, #88]	; (3a30 <scalbn+0xc0>)
    39d8:	f000 f832 	bl	3a40 <copysign>
    39dc:	4a13      	ldr	r2, [pc, #76]	; (3a2c <scalbn+0xbc>)
    39de:	4b14      	ldr	r3, [pc, #80]	; (3a30 <scalbn+0xc0>)
    39e0:	f001 fb34 	bl	504c <__aeabi_dmul>
    39e4:	e7e5      	b.n	39b2 <scalbn+0x42>
    39e6:	0002      	movs	r2, r0
    39e8:	000b      	movs	r3, r1
    39ea:	4812      	ldr	r0, [pc, #72]	; (3a34 <scalbn+0xc4>)
    39ec:	4912      	ldr	r1, [pc, #72]	; (3a38 <scalbn+0xc8>)
    39ee:	f000 f827 	bl	3a40 <copysign>
    39f2:	4a10      	ldr	r2, [pc, #64]	; (3a34 <scalbn+0xc4>)
    39f4:	4b10      	ldr	r3, [pc, #64]	; (3a38 <scalbn+0xc8>)
    39f6:	f001 fb29 	bl	504c <__aeabi_dmul>
    39fa:	e7da      	b.n	39b2 <scalbn+0x42>
    39fc:	4c08      	ldr	r4, [pc, #32]	; (3a20 <scalbn+0xb0>)
    39fe:	3336      	adds	r3, #54	; 0x36
    3a00:	4022      	ands	r2, r4
    3a02:	051b      	lsls	r3, r3, #20
    3a04:	4313      	orrs	r3, r2
    3a06:	0019      	movs	r1, r3
    3a08:	2200      	movs	r2, #0
    3a0a:	4b0c      	ldr	r3, [pc, #48]	; (3a3c <scalbn+0xcc>)
    3a0c:	f001 fb1e 	bl	504c <__aeabi_dmul>
    3a10:	e7cf      	b.n	39b2 <scalbn+0x42>
    3a12:	46c0      	nop			; (mov r8, r8)
    3a14:	43500000 	.word	0x43500000
    3a18:	ffff3cb0 	.word	0xffff3cb0
    3a1c:	000007fe 	.word	0x000007fe
    3a20:	800fffff 	.word	0x800fffff
    3a24:	000007ff 	.word	0x000007ff
    3a28:	0000c350 	.word	0x0000c350
    3a2c:	c2f8f359 	.word	0xc2f8f359
    3a30:	01a56e1f 	.word	0x01a56e1f
    3a34:	8800759c 	.word	0x8800759c
    3a38:	7e37e43c 	.word	0x7e37e43c
    3a3c:	3c900000 	.word	0x3c900000

00003a40 <copysign>:
    3a40:	b530      	push	{r4, r5, lr}
    3a42:	004a      	lsls	r2, r1, #1
    3a44:	0fdb      	lsrs	r3, r3, #31
    3a46:	07db      	lsls	r3, r3, #31
    3a48:	0852      	lsrs	r2, r2, #1
    3a4a:	431a      	orrs	r2, r3
    3a4c:	0011      	movs	r1, r2
    3a4e:	bd30      	pop	{r4, r5, pc}

00003a50 <__gnu_thumb1_case_uqi>:
    3a50:	b402      	push	{r1}
    3a52:	4671      	mov	r1, lr
    3a54:	0849      	lsrs	r1, r1, #1
    3a56:	0049      	lsls	r1, r1, #1
    3a58:	5c09      	ldrb	r1, [r1, r0]
    3a5a:	0049      	lsls	r1, r1, #1
    3a5c:	448e      	add	lr, r1
    3a5e:	bc02      	pop	{r1}
    3a60:	4770      	bx	lr
    3a62:	46c0      	nop			; (mov r8, r8)

00003a64 <__aeabi_cdrcmple>:
    3a64:	4684      	mov	ip, r0
    3a66:	1c10      	adds	r0, r2, #0
    3a68:	4662      	mov	r2, ip
    3a6a:	468c      	mov	ip, r1
    3a6c:	1c19      	adds	r1, r3, #0
    3a6e:	4663      	mov	r3, ip
    3a70:	e000      	b.n	3a74 <__aeabi_cdcmpeq>
    3a72:	46c0      	nop			; (mov r8, r8)

00003a74 <__aeabi_cdcmpeq>:
    3a74:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    3a76:	f001 fa7f 	bl	4f78 <__ledf2>
    3a7a:	2800      	cmp	r0, #0
    3a7c:	d401      	bmi.n	3a82 <__aeabi_cdcmpeq+0xe>
    3a7e:	2100      	movs	r1, #0
    3a80:	42c8      	cmn	r0, r1
    3a82:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00003a84 <__aeabi_dcmpeq>:
    3a84:	b510      	push	{r4, lr}
    3a86:	f001 f9d3 	bl	4e30 <__eqdf2>
    3a8a:	4240      	negs	r0, r0
    3a8c:	3001      	adds	r0, #1
    3a8e:	bd10      	pop	{r4, pc}

00003a90 <__aeabi_dcmplt>:
    3a90:	b510      	push	{r4, lr}
    3a92:	f001 fa71 	bl	4f78 <__ledf2>
    3a96:	2800      	cmp	r0, #0
    3a98:	db01      	blt.n	3a9e <__aeabi_dcmplt+0xe>
    3a9a:	2000      	movs	r0, #0
    3a9c:	bd10      	pop	{r4, pc}
    3a9e:	2001      	movs	r0, #1
    3aa0:	bd10      	pop	{r4, pc}
    3aa2:	46c0      	nop			; (mov r8, r8)

00003aa4 <__aeabi_dcmple>:
    3aa4:	b510      	push	{r4, lr}
    3aa6:	f001 fa67 	bl	4f78 <__ledf2>
    3aaa:	2800      	cmp	r0, #0
    3aac:	dd01      	ble.n	3ab2 <__aeabi_dcmple+0xe>
    3aae:	2000      	movs	r0, #0
    3ab0:	bd10      	pop	{r4, pc}
    3ab2:	2001      	movs	r0, #1
    3ab4:	bd10      	pop	{r4, pc}
    3ab6:	46c0      	nop			; (mov r8, r8)

00003ab8 <__aeabi_dcmpgt>:
    3ab8:	b510      	push	{r4, lr}
    3aba:	f001 f9f9 	bl	4eb0 <__gedf2>
    3abe:	2800      	cmp	r0, #0
    3ac0:	dc01      	bgt.n	3ac6 <__aeabi_dcmpgt+0xe>
    3ac2:	2000      	movs	r0, #0
    3ac4:	bd10      	pop	{r4, pc}
    3ac6:	2001      	movs	r0, #1
    3ac8:	bd10      	pop	{r4, pc}
    3aca:	46c0      	nop			; (mov r8, r8)

00003acc <__aeabi_dcmpge>:
    3acc:	b510      	push	{r4, lr}
    3ace:	f001 f9ef 	bl	4eb0 <__gedf2>
    3ad2:	2800      	cmp	r0, #0
    3ad4:	da01      	bge.n	3ada <__aeabi_dcmpge+0xe>
    3ad6:	2000      	movs	r0, #0
    3ad8:	bd10      	pop	{r4, pc}
    3ada:	2001      	movs	r0, #1
    3adc:	bd10      	pop	{r4, pc}
    3ade:	46c0      	nop			; (mov r8, r8)

00003ae0 <__aeabi_lmul>:
    3ae0:	b5f0      	push	{r4, r5, r6, r7, lr}
    3ae2:	464f      	mov	r7, r9
    3ae4:	4646      	mov	r6, r8
    3ae6:	b4c0      	push	{r6, r7}
    3ae8:	0416      	lsls	r6, r2, #16
    3aea:	0c36      	lsrs	r6, r6, #16
    3aec:	4699      	mov	r9, r3
    3aee:	0033      	movs	r3, r6
    3af0:	0405      	lsls	r5, r0, #16
    3af2:	0c2c      	lsrs	r4, r5, #16
    3af4:	0c07      	lsrs	r7, r0, #16
    3af6:	0c15      	lsrs	r5, r2, #16
    3af8:	4363      	muls	r3, r4
    3afa:	437e      	muls	r6, r7
    3afc:	436f      	muls	r7, r5
    3afe:	4365      	muls	r5, r4
    3b00:	0c1c      	lsrs	r4, r3, #16
    3b02:	19ad      	adds	r5, r5, r6
    3b04:	1964      	adds	r4, r4, r5
    3b06:	469c      	mov	ip, r3
    3b08:	42a6      	cmp	r6, r4
    3b0a:	d903      	bls.n	3b14 <__aeabi_lmul+0x34>
    3b0c:	2380      	movs	r3, #128	; 0x80
    3b0e:	025b      	lsls	r3, r3, #9
    3b10:	4698      	mov	r8, r3
    3b12:	4447      	add	r7, r8
    3b14:	4663      	mov	r3, ip
    3b16:	0c25      	lsrs	r5, r4, #16
    3b18:	19ef      	adds	r7, r5, r7
    3b1a:	041d      	lsls	r5, r3, #16
    3b1c:	464b      	mov	r3, r9
    3b1e:	434a      	muls	r2, r1
    3b20:	4343      	muls	r3, r0
    3b22:	0c2d      	lsrs	r5, r5, #16
    3b24:	0424      	lsls	r4, r4, #16
    3b26:	1964      	adds	r4, r4, r5
    3b28:	1899      	adds	r1, r3, r2
    3b2a:	19c9      	adds	r1, r1, r7
    3b2c:	0020      	movs	r0, r4
    3b2e:	bc0c      	pop	{r2, r3}
    3b30:	4690      	mov	r8, r2
    3b32:	4699      	mov	r9, r3
    3b34:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3b36:	46c0      	nop			; (mov r8, r8)

00003b38 <__aeabi_f2uiz>:
    3b38:	219e      	movs	r1, #158	; 0x9e
    3b3a:	b510      	push	{r4, lr}
    3b3c:	05c9      	lsls	r1, r1, #23
    3b3e:	1c04      	adds	r4, r0, #0
    3b40:	f002 fabe 	bl	60c0 <__aeabi_fcmpge>
    3b44:	2800      	cmp	r0, #0
    3b46:	d103      	bne.n	3b50 <__aeabi_f2uiz+0x18>
    3b48:	1c20      	adds	r0, r4, #0
    3b4a:	f000 fac5 	bl	40d8 <__aeabi_f2iz>
    3b4e:	bd10      	pop	{r4, pc}
    3b50:	219e      	movs	r1, #158	; 0x9e
    3b52:	1c20      	adds	r0, r4, #0
    3b54:	05c9      	lsls	r1, r1, #23
    3b56:	f000 f939 	bl	3dcc <__aeabi_fsub>
    3b5a:	f000 fabd 	bl	40d8 <__aeabi_f2iz>
    3b5e:	2380      	movs	r3, #128	; 0x80
    3b60:	061b      	lsls	r3, r3, #24
    3b62:	469c      	mov	ip, r3
    3b64:	4460      	add	r0, ip
    3b66:	e7f2      	b.n	3b4e <__aeabi_f2uiz+0x16>

00003b68 <__aeabi_d2uiz>:
    3b68:	b570      	push	{r4, r5, r6, lr}
    3b6a:	2200      	movs	r2, #0
    3b6c:	4b0c      	ldr	r3, [pc, #48]	; (3ba0 <__aeabi_d2uiz+0x38>)
    3b6e:	0004      	movs	r4, r0
    3b70:	000d      	movs	r5, r1
    3b72:	f7ff ffab 	bl	3acc <__aeabi_dcmpge>
    3b76:	2800      	cmp	r0, #0
    3b78:	d104      	bne.n	3b84 <__aeabi_d2uiz+0x1c>
    3b7a:	0020      	movs	r0, r4
    3b7c:	0029      	movs	r1, r5
    3b7e:	f002 f853 	bl	5c28 <__aeabi_d2iz>
    3b82:	bd70      	pop	{r4, r5, r6, pc}
    3b84:	4b06      	ldr	r3, [pc, #24]	; (3ba0 <__aeabi_d2uiz+0x38>)
    3b86:	2200      	movs	r2, #0
    3b88:	0020      	movs	r0, r4
    3b8a:	0029      	movs	r1, r5
    3b8c:	f001 fcd8 	bl	5540 <__aeabi_dsub>
    3b90:	f002 f84a 	bl	5c28 <__aeabi_d2iz>
    3b94:	2380      	movs	r3, #128	; 0x80
    3b96:	061b      	lsls	r3, r3, #24
    3b98:	469c      	mov	ip, r3
    3b9a:	4460      	add	r0, ip
    3b9c:	e7f1      	b.n	3b82 <__aeabi_d2uiz+0x1a>
    3b9e:	46c0      	nop			; (mov r8, r8)
    3ba0:	41e00000 	.word	0x41e00000

00003ba4 <__aeabi_fmul>:
    3ba4:	b5f0      	push	{r4, r5, r6, r7, lr}
    3ba6:	4657      	mov	r7, sl
    3ba8:	464e      	mov	r6, r9
    3baa:	4645      	mov	r5, r8
    3bac:	0043      	lsls	r3, r0, #1
    3bae:	b4e0      	push	{r5, r6, r7}
    3bb0:	0246      	lsls	r6, r0, #9
    3bb2:	4688      	mov	r8, r1
    3bb4:	0a76      	lsrs	r6, r6, #9
    3bb6:	0e1f      	lsrs	r7, r3, #24
    3bb8:	0fc4      	lsrs	r4, r0, #31
    3bba:	2f00      	cmp	r7, #0
    3bbc:	d047      	beq.n	3c4e <__aeabi_fmul+0xaa>
    3bbe:	2fff      	cmp	r7, #255	; 0xff
    3bc0:	d025      	beq.n	3c0e <__aeabi_fmul+0x6a>
    3bc2:	2300      	movs	r3, #0
    3bc4:	2580      	movs	r5, #128	; 0x80
    3bc6:	469a      	mov	sl, r3
    3bc8:	4699      	mov	r9, r3
    3bca:	00f6      	lsls	r6, r6, #3
    3bcc:	04ed      	lsls	r5, r5, #19
    3bce:	432e      	orrs	r6, r5
    3bd0:	3f7f      	subs	r7, #127	; 0x7f
    3bd2:	4643      	mov	r3, r8
    3bd4:	4642      	mov	r2, r8
    3bd6:	025d      	lsls	r5, r3, #9
    3bd8:	0fd2      	lsrs	r2, r2, #31
    3bda:	005b      	lsls	r3, r3, #1
    3bdc:	0a6d      	lsrs	r5, r5, #9
    3bde:	0e1b      	lsrs	r3, r3, #24
    3be0:	4690      	mov	r8, r2
    3be2:	d040      	beq.n	3c66 <__aeabi_fmul+0xc2>
    3be4:	2bff      	cmp	r3, #255	; 0xff
    3be6:	d039      	beq.n	3c5c <__aeabi_fmul+0xb8>
    3be8:	2280      	movs	r2, #128	; 0x80
    3bea:	2000      	movs	r0, #0
    3bec:	00ed      	lsls	r5, r5, #3
    3bee:	04d2      	lsls	r2, r2, #19
    3bf0:	4315      	orrs	r5, r2
    3bf2:	3b7f      	subs	r3, #127	; 0x7f
    3bf4:	18fb      	adds	r3, r7, r3
    3bf6:	4642      	mov	r2, r8
    3bf8:	4657      	mov	r7, sl
    3bfa:	1c59      	adds	r1, r3, #1
    3bfc:	4062      	eors	r2, r4
    3bfe:	468c      	mov	ip, r1
    3c00:	4307      	orrs	r7, r0
    3c02:	2f0f      	cmp	r7, #15
    3c04:	d85c      	bhi.n	3cc0 <__aeabi_fmul+0x11c>
    3c06:	496f      	ldr	r1, [pc, #444]	; (3dc4 <__aeabi_fmul+0x220>)
    3c08:	00bf      	lsls	r7, r7, #2
    3c0a:	59c9      	ldr	r1, [r1, r7]
    3c0c:	468f      	mov	pc, r1
    3c0e:	2e00      	cmp	r6, #0
    3c10:	d145      	bne.n	3c9e <__aeabi_fmul+0xfa>
    3c12:	2308      	movs	r3, #8
    3c14:	469a      	mov	sl, r3
    3c16:	3b06      	subs	r3, #6
    3c18:	4699      	mov	r9, r3
    3c1a:	e7da      	b.n	3bd2 <__aeabi_fmul+0x2e>
    3c1c:	4642      	mov	r2, r8
    3c1e:	2802      	cmp	r0, #2
    3c20:	d02d      	beq.n	3c7e <__aeabi_fmul+0xda>
    3c22:	2803      	cmp	r0, #3
    3c24:	d100      	bne.n	3c28 <__aeabi_fmul+0x84>
    3c26:	e0c3      	b.n	3db0 <__aeabi_fmul+0x20c>
    3c28:	2801      	cmp	r0, #1
    3c2a:	d000      	beq.n	3c2e <__aeabi_fmul+0x8a>
    3c2c:	e0a2      	b.n	3d74 <__aeabi_fmul+0x1d0>
    3c2e:	2500      	movs	r5, #0
    3c30:	2600      	movs	r6, #0
    3c32:	4002      	ands	r2, r0
    3c34:	b2d4      	uxtb	r4, r2
    3c36:	0276      	lsls	r6, r6, #9
    3c38:	05ed      	lsls	r5, r5, #23
    3c3a:	0a76      	lsrs	r6, r6, #9
    3c3c:	432e      	orrs	r6, r5
    3c3e:	07e4      	lsls	r4, r4, #31
    3c40:	4326      	orrs	r6, r4
    3c42:	0030      	movs	r0, r6
    3c44:	bc1c      	pop	{r2, r3, r4}
    3c46:	4690      	mov	r8, r2
    3c48:	4699      	mov	r9, r3
    3c4a:	46a2      	mov	sl, r4
    3c4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3c4e:	2e00      	cmp	r6, #0
    3c50:	d11a      	bne.n	3c88 <__aeabi_fmul+0xe4>
    3c52:	2304      	movs	r3, #4
    3c54:	469a      	mov	sl, r3
    3c56:	3b03      	subs	r3, #3
    3c58:	4699      	mov	r9, r3
    3c5a:	e7ba      	b.n	3bd2 <__aeabi_fmul+0x2e>
    3c5c:	002a      	movs	r2, r5
    3c5e:	1e51      	subs	r1, r2, #1
    3c60:	418a      	sbcs	r2, r1
    3c62:	1c90      	adds	r0, r2, #2
    3c64:	e7c6      	b.n	3bf4 <__aeabi_fmul+0x50>
    3c66:	2001      	movs	r0, #1
    3c68:	2d00      	cmp	r5, #0
    3c6a:	d0c3      	beq.n	3bf4 <__aeabi_fmul+0x50>
    3c6c:	0028      	movs	r0, r5
    3c6e:	f002 fa31 	bl	60d4 <__clzsi2>
    3c72:	1f43      	subs	r3, r0, #5
    3c74:	3076      	adds	r0, #118	; 0x76
    3c76:	409d      	lsls	r5, r3
    3c78:	4243      	negs	r3, r0
    3c7a:	2000      	movs	r0, #0
    3c7c:	e7ba      	b.n	3bf4 <__aeabi_fmul+0x50>
    3c7e:	2401      	movs	r4, #1
    3c80:	25ff      	movs	r5, #255	; 0xff
    3c82:	4014      	ands	r4, r2
    3c84:	2600      	movs	r6, #0
    3c86:	e7d6      	b.n	3c36 <__aeabi_fmul+0x92>
    3c88:	0030      	movs	r0, r6
    3c8a:	f002 fa23 	bl	60d4 <__clzsi2>
    3c8e:	1f43      	subs	r3, r0, #5
    3c90:	409e      	lsls	r6, r3
    3c92:	2300      	movs	r3, #0
    3c94:	3076      	adds	r0, #118	; 0x76
    3c96:	4247      	negs	r7, r0
    3c98:	469a      	mov	sl, r3
    3c9a:	4699      	mov	r9, r3
    3c9c:	e799      	b.n	3bd2 <__aeabi_fmul+0x2e>
    3c9e:	230c      	movs	r3, #12
    3ca0:	469a      	mov	sl, r3
    3ca2:	3b09      	subs	r3, #9
    3ca4:	4699      	mov	r9, r3
    3ca6:	e794      	b.n	3bd2 <__aeabi_fmul+0x2e>
    3ca8:	2680      	movs	r6, #128	; 0x80
    3caa:	2400      	movs	r4, #0
    3cac:	03f6      	lsls	r6, r6, #15
    3cae:	25ff      	movs	r5, #255	; 0xff
    3cb0:	e7c1      	b.n	3c36 <__aeabi_fmul+0x92>
    3cb2:	0035      	movs	r5, r6
    3cb4:	4648      	mov	r0, r9
    3cb6:	e7b2      	b.n	3c1e <__aeabi_fmul+0x7a>
    3cb8:	0035      	movs	r5, r6
    3cba:	0022      	movs	r2, r4
    3cbc:	4648      	mov	r0, r9
    3cbe:	e7ae      	b.n	3c1e <__aeabi_fmul+0x7a>
    3cc0:	0429      	lsls	r1, r5, #16
    3cc2:	0c09      	lsrs	r1, r1, #16
    3cc4:	0008      	movs	r0, r1
    3cc6:	0c37      	lsrs	r7, r6, #16
    3cc8:	0436      	lsls	r6, r6, #16
    3cca:	0c36      	lsrs	r6, r6, #16
    3ccc:	0c2c      	lsrs	r4, r5, #16
    3cce:	4379      	muls	r1, r7
    3cd0:	4370      	muls	r0, r6
    3cd2:	4367      	muls	r7, r4
    3cd4:	4374      	muls	r4, r6
    3cd6:	0c06      	lsrs	r6, r0, #16
    3cd8:	1864      	adds	r4, r4, r1
    3cda:	1936      	adds	r6, r6, r4
    3cdc:	42b1      	cmp	r1, r6
    3cde:	d903      	bls.n	3ce8 <__aeabi_fmul+0x144>
    3ce0:	2180      	movs	r1, #128	; 0x80
    3ce2:	0249      	lsls	r1, r1, #9
    3ce4:	4688      	mov	r8, r1
    3ce6:	4447      	add	r7, r8
    3ce8:	0400      	lsls	r0, r0, #16
    3cea:	0c00      	lsrs	r0, r0, #16
    3cec:	0431      	lsls	r1, r6, #16
    3cee:	1809      	adds	r1, r1, r0
    3cf0:	018d      	lsls	r5, r1, #6
    3cf2:	1e68      	subs	r0, r5, #1
    3cf4:	4185      	sbcs	r5, r0
    3cf6:	0e89      	lsrs	r1, r1, #26
    3cf8:	4329      	orrs	r1, r5
    3cfa:	0c35      	lsrs	r5, r6, #16
    3cfc:	19ed      	adds	r5, r5, r7
    3cfe:	01ad      	lsls	r5, r5, #6
    3d00:	430d      	orrs	r5, r1
    3d02:	0129      	lsls	r1, r5, #4
    3d04:	d504      	bpl.n	3d10 <__aeabi_fmul+0x16c>
    3d06:	2301      	movs	r3, #1
    3d08:	0869      	lsrs	r1, r5, #1
    3d0a:	401d      	ands	r5, r3
    3d0c:	4663      	mov	r3, ip
    3d0e:	430d      	orrs	r5, r1
    3d10:	0019      	movs	r1, r3
    3d12:	317f      	adds	r1, #127	; 0x7f
    3d14:	2900      	cmp	r1, #0
    3d16:	dd25      	ble.n	3d64 <__aeabi_fmul+0x1c0>
    3d18:	0768      	lsls	r0, r5, #29
    3d1a:	d004      	beq.n	3d26 <__aeabi_fmul+0x182>
    3d1c:	200f      	movs	r0, #15
    3d1e:	4028      	ands	r0, r5
    3d20:	2804      	cmp	r0, #4
    3d22:	d000      	beq.n	3d26 <__aeabi_fmul+0x182>
    3d24:	3504      	adds	r5, #4
    3d26:	0128      	lsls	r0, r5, #4
    3d28:	d503      	bpl.n	3d32 <__aeabi_fmul+0x18e>
    3d2a:	4927      	ldr	r1, [pc, #156]	; (3dc8 <__aeabi_fmul+0x224>)
    3d2c:	3380      	adds	r3, #128	; 0x80
    3d2e:	400d      	ands	r5, r1
    3d30:	0019      	movs	r1, r3
    3d32:	29fe      	cmp	r1, #254	; 0xfe
    3d34:	dca3      	bgt.n	3c7e <__aeabi_fmul+0xda>
    3d36:	2401      	movs	r4, #1
    3d38:	01ad      	lsls	r5, r5, #6
    3d3a:	0a6e      	lsrs	r6, r5, #9
    3d3c:	4014      	ands	r4, r2
    3d3e:	b2cd      	uxtb	r5, r1
    3d40:	e779      	b.n	3c36 <__aeabi_fmul+0x92>
    3d42:	2080      	movs	r0, #128	; 0x80
    3d44:	03c0      	lsls	r0, r0, #15
    3d46:	4206      	tst	r6, r0
    3d48:	d007      	beq.n	3d5a <__aeabi_fmul+0x1b6>
    3d4a:	4205      	tst	r5, r0
    3d4c:	d105      	bne.n	3d5a <__aeabi_fmul+0x1b6>
    3d4e:	4328      	orrs	r0, r5
    3d50:	0246      	lsls	r6, r0, #9
    3d52:	0a76      	lsrs	r6, r6, #9
    3d54:	4644      	mov	r4, r8
    3d56:	25ff      	movs	r5, #255	; 0xff
    3d58:	e76d      	b.n	3c36 <__aeabi_fmul+0x92>
    3d5a:	4306      	orrs	r6, r0
    3d5c:	0276      	lsls	r6, r6, #9
    3d5e:	0a76      	lsrs	r6, r6, #9
    3d60:	25ff      	movs	r5, #255	; 0xff
    3d62:	e768      	b.n	3c36 <__aeabi_fmul+0x92>
    3d64:	2401      	movs	r4, #1
    3d66:	1a61      	subs	r1, r4, r1
    3d68:	291b      	cmp	r1, #27
    3d6a:	dd05      	ble.n	3d78 <__aeabi_fmul+0x1d4>
    3d6c:	4014      	ands	r4, r2
    3d6e:	2500      	movs	r5, #0
    3d70:	2600      	movs	r6, #0
    3d72:	e760      	b.n	3c36 <__aeabi_fmul+0x92>
    3d74:	4663      	mov	r3, ip
    3d76:	e7cb      	b.n	3d10 <__aeabi_fmul+0x16c>
    3d78:	002e      	movs	r6, r5
    3d7a:	2320      	movs	r3, #32
    3d7c:	40ce      	lsrs	r6, r1
    3d7e:	1a59      	subs	r1, r3, r1
    3d80:	408d      	lsls	r5, r1
    3d82:	1e6b      	subs	r3, r5, #1
    3d84:	419d      	sbcs	r5, r3
    3d86:	432e      	orrs	r6, r5
    3d88:	0773      	lsls	r3, r6, #29
    3d8a:	d004      	beq.n	3d96 <__aeabi_fmul+0x1f2>
    3d8c:	230f      	movs	r3, #15
    3d8e:	4033      	ands	r3, r6
    3d90:	2b04      	cmp	r3, #4
    3d92:	d000      	beq.n	3d96 <__aeabi_fmul+0x1f2>
    3d94:	3604      	adds	r6, #4
    3d96:	0173      	lsls	r3, r6, #5
    3d98:	d504      	bpl.n	3da4 <__aeabi_fmul+0x200>
    3d9a:	2401      	movs	r4, #1
    3d9c:	2501      	movs	r5, #1
    3d9e:	4014      	ands	r4, r2
    3da0:	2600      	movs	r6, #0
    3da2:	e748      	b.n	3c36 <__aeabi_fmul+0x92>
    3da4:	2401      	movs	r4, #1
    3da6:	01b6      	lsls	r6, r6, #6
    3da8:	0a76      	lsrs	r6, r6, #9
    3daa:	4014      	ands	r4, r2
    3dac:	2500      	movs	r5, #0
    3dae:	e742      	b.n	3c36 <__aeabi_fmul+0x92>
    3db0:	2680      	movs	r6, #128	; 0x80
    3db2:	2401      	movs	r4, #1
    3db4:	03f6      	lsls	r6, r6, #15
    3db6:	432e      	orrs	r6, r5
    3db8:	0276      	lsls	r6, r6, #9
    3dba:	0a76      	lsrs	r6, r6, #9
    3dbc:	4014      	ands	r4, r2
    3dbe:	25ff      	movs	r5, #255	; 0xff
    3dc0:	e739      	b.n	3c36 <__aeabi_fmul+0x92>
    3dc2:	46c0      	nop			; (mov r8, r8)
    3dc4:	00006430 	.word	0x00006430
    3dc8:	f7ffffff 	.word	0xf7ffffff

00003dcc <__aeabi_fsub>:
    3dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3dce:	024a      	lsls	r2, r1, #9
    3dd0:	004e      	lsls	r6, r1, #1
    3dd2:	0243      	lsls	r3, r0, #9
    3dd4:	0044      	lsls	r4, r0, #1
    3dd6:	0e24      	lsrs	r4, r4, #24
    3dd8:	0fc5      	lsrs	r5, r0, #31
    3dda:	099b      	lsrs	r3, r3, #6
    3ddc:	0e36      	lsrs	r6, r6, #24
    3dde:	0fc9      	lsrs	r1, r1, #31
    3de0:	0992      	lsrs	r2, r2, #6
    3de2:	2eff      	cmp	r6, #255	; 0xff
    3de4:	d100      	bne.n	3de8 <__aeabi_fsub+0x1c>
    3de6:	e083      	b.n	3ef0 <__aeabi_fsub+0x124>
    3de8:	2001      	movs	r0, #1
    3dea:	4041      	eors	r1, r0
    3dec:	1ba0      	subs	r0, r4, r6
    3dee:	42a9      	cmp	r1, r5
    3df0:	d05c      	beq.n	3eac <__aeabi_fsub+0xe0>
    3df2:	2800      	cmp	r0, #0
    3df4:	dc00      	bgt.n	3df8 <__aeabi_fsub+0x2c>
    3df6:	e095      	b.n	3f24 <__aeabi_fsub+0x158>
    3df8:	2e00      	cmp	r6, #0
    3dfa:	d11c      	bne.n	3e36 <__aeabi_fsub+0x6a>
    3dfc:	2a00      	cmp	r2, #0
    3dfe:	d000      	beq.n	3e02 <__aeabi_fsub+0x36>
    3e00:	e081      	b.n	3f06 <__aeabi_fsub+0x13a>
    3e02:	075a      	lsls	r2, r3, #29
    3e04:	d004      	beq.n	3e10 <__aeabi_fsub+0x44>
    3e06:	220f      	movs	r2, #15
    3e08:	401a      	ands	r2, r3
    3e0a:	2a04      	cmp	r2, #4
    3e0c:	d000      	beq.n	3e10 <__aeabi_fsub+0x44>
    3e0e:	3304      	adds	r3, #4
    3e10:	015a      	lsls	r2, r3, #5
    3e12:	d53b      	bpl.n	3e8c <__aeabi_fsub+0xc0>
    3e14:	3401      	adds	r4, #1
    3e16:	2cff      	cmp	r4, #255	; 0xff
    3e18:	d100      	bne.n	3e1c <__aeabi_fsub+0x50>
    3e1a:	e091      	b.n	3f40 <__aeabi_fsub+0x174>
    3e1c:	2001      	movs	r0, #1
    3e1e:	019b      	lsls	r3, r3, #6
    3e20:	0a5b      	lsrs	r3, r3, #9
    3e22:	b2e4      	uxtb	r4, r4
    3e24:	4005      	ands	r5, r0
    3e26:	025b      	lsls	r3, r3, #9
    3e28:	05e4      	lsls	r4, r4, #23
    3e2a:	0a5b      	lsrs	r3, r3, #9
    3e2c:	07ed      	lsls	r5, r5, #31
    3e2e:	4323      	orrs	r3, r4
    3e30:	432b      	orrs	r3, r5
    3e32:	0018      	movs	r0, r3
    3e34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3e36:	2cff      	cmp	r4, #255	; 0xff
    3e38:	d0e3      	beq.n	3e02 <__aeabi_fsub+0x36>
    3e3a:	2180      	movs	r1, #128	; 0x80
    3e3c:	04c9      	lsls	r1, r1, #19
    3e3e:	430a      	orrs	r2, r1
    3e40:	281b      	cmp	r0, #27
    3e42:	dd00      	ble.n	3e46 <__aeabi_fsub+0x7a>
    3e44:	e090      	b.n	3f68 <__aeabi_fsub+0x19c>
    3e46:	0016      	movs	r6, r2
    3e48:	2120      	movs	r1, #32
    3e4a:	40c6      	lsrs	r6, r0
    3e4c:	1a08      	subs	r0, r1, r0
    3e4e:	4082      	lsls	r2, r0
    3e50:	1e51      	subs	r1, r2, #1
    3e52:	418a      	sbcs	r2, r1
    3e54:	4332      	orrs	r2, r6
    3e56:	1a9b      	subs	r3, r3, r2
    3e58:	015a      	lsls	r2, r3, #5
    3e5a:	d515      	bpl.n	3e88 <__aeabi_fsub+0xbc>
    3e5c:	019b      	lsls	r3, r3, #6
    3e5e:	099e      	lsrs	r6, r3, #6
    3e60:	0030      	movs	r0, r6
    3e62:	f002 f937 	bl	60d4 <__clzsi2>
    3e66:	3805      	subs	r0, #5
    3e68:	4086      	lsls	r6, r0
    3e6a:	4284      	cmp	r4, r0
    3e6c:	dc6c      	bgt.n	3f48 <__aeabi_fsub+0x17c>
    3e6e:	1b04      	subs	r4, r0, r4
    3e70:	0033      	movs	r3, r6
    3e72:	2020      	movs	r0, #32
    3e74:	3401      	adds	r4, #1
    3e76:	40e3      	lsrs	r3, r4
    3e78:	1b04      	subs	r4, r0, r4
    3e7a:	40a6      	lsls	r6, r4
    3e7c:	1e72      	subs	r2, r6, #1
    3e7e:	4196      	sbcs	r6, r2
    3e80:	2400      	movs	r4, #0
    3e82:	4333      	orrs	r3, r6
    3e84:	e7bd      	b.n	3e02 <__aeabi_fsub+0x36>
    3e86:	000d      	movs	r5, r1
    3e88:	075a      	lsls	r2, r3, #29
    3e8a:	d1bc      	bne.n	3e06 <__aeabi_fsub+0x3a>
    3e8c:	08df      	lsrs	r7, r3, #3
    3e8e:	2301      	movs	r3, #1
    3e90:	401d      	ands	r5, r3
    3e92:	2cff      	cmp	r4, #255	; 0xff
    3e94:	d133      	bne.n	3efe <__aeabi_fsub+0x132>
    3e96:	2f00      	cmp	r7, #0
    3e98:	d100      	bne.n	3e9c <__aeabi_fsub+0xd0>
    3e9a:	e090      	b.n	3fbe <__aeabi_fsub+0x1f2>
    3e9c:	2280      	movs	r2, #128	; 0x80
    3e9e:	03d2      	lsls	r2, r2, #15
    3ea0:	0013      	movs	r3, r2
    3ea2:	433b      	orrs	r3, r7
    3ea4:	025b      	lsls	r3, r3, #9
    3ea6:	0a5b      	lsrs	r3, r3, #9
    3ea8:	24ff      	movs	r4, #255	; 0xff
    3eaa:	e7bc      	b.n	3e26 <__aeabi_fsub+0x5a>
    3eac:	2800      	cmp	r0, #0
    3eae:	dd4f      	ble.n	3f50 <__aeabi_fsub+0x184>
    3eb0:	2e00      	cmp	r6, #0
    3eb2:	d02e      	beq.n	3f12 <__aeabi_fsub+0x146>
    3eb4:	2cff      	cmp	r4, #255	; 0xff
    3eb6:	d0a4      	beq.n	3e02 <__aeabi_fsub+0x36>
    3eb8:	2580      	movs	r5, #128	; 0x80
    3eba:	04ed      	lsls	r5, r5, #19
    3ebc:	432a      	orrs	r2, r5
    3ebe:	281b      	cmp	r0, #27
    3ec0:	dd00      	ble.n	3ec4 <__aeabi_fsub+0xf8>
    3ec2:	e097      	b.n	3ff4 <__aeabi_fsub+0x228>
    3ec4:	0016      	movs	r6, r2
    3ec6:	2520      	movs	r5, #32
    3ec8:	40c6      	lsrs	r6, r0
    3eca:	1a28      	subs	r0, r5, r0
    3ecc:	4082      	lsls	r2, r0
    3ece:	1e50      	subs	r0, r2, #1
    3ed0:	4182      	sbcs	r2, r0
    3ed2:	4332      	orrs	r2, r6
    3ed4:	189b      	adds	r3, r3, r2
    3ed6:	015a      	lsls	r2, r3, #5
    3ed8:	d5d5      	bpl.n	3e86 <__aeabi_fsub+0xba>
    3eda:	3401      	adds	r4, #1
    3edc:	2cff      	cmp	r4, #255	; 0xff
    3ede:	d06d      	beq.n	3fbc <__aeabi_fsub+0x1f0>
    3ee0:	2201      	movs	r2, #1
    3ee2:	487b      	ldr	r0, [pc, #492]	; (40d0 <__aeabi_fsub+0x304>)
    3ee4:	401a      	ands	r2, r3
    3ee6:	085b      	lsrs	r3, r3, #1
    3ee8:	4003      	ands	r3, r0
    3eea:	4313      	orrs	r3, r2
    3eec:	000d      	movs	r5, r1
    3eee:	e788      	b.n	3e02 <__aeabi_fsub+0x36>
    3ef0:	2a00      	cmp	r2, #0
    3ef2:	d000      	beq.n	3ef6 <__aeabi_fsub+0x12a>
    3ef4:	e77a      	b.n	3dec <__aeabi_fsub+0x20>
    3ef6:	e777      	b.n	3de8 <__aeabi_fsub+0x1c>
    3ef8:	1e03      	subs	r3, r0, #0
    3efa:	d1c5      	bne.n	3e88 <__aeabi_fsub+0xbc>
    3efc:	2500      	movs	r5, #0
    3efe:	027b      	lsls	r3, r7, #9
    3f00:	0a5b      	lsrs	r3, r3, #9
    3f02:	b2e4      	uxtb	r4, r4
    3f04:	e78f      	b.n	3e26 <__aeabi_fsub+0x5a>
    3f06:	3801      	subs	r0, #1
    3f08:	2800      	cmp	r0, #0
    3f0a:	d0a4      	beq.n	3e56 <__aeabi_fsub+0x8a>
    3f0c:	2cff      	cmp	r4, #255	; 0xff
    3f0e:	d197      	bne.n	3e40 <__aeabi_fsub+0x74>
    3f10:	e777      	b.n	3e02 <__aeabi_fsub+0x36>
    3f12:	2a00      	cmp	r2, #0
    3f14:	d100      	bne.n	3f18 <__aeabi_fsub+0x14c>
    3f16:	e774      	b.n	3e02 <__aeabi_fsub+0x36>
    3f18:	3801      	subs	r0, #1
    3f1a:	2800      	cmp	r0, #0
    3f1c:	d0da      	beq.n	3ed4 <__aeabi_fsub+0x108>
    3f1e:	2cff      	cmp	r4, #255	; 0xff
    3f20:	d1cd      	bne.n	3ebe <__aeabi_fsub+0xf2>
    3f22:	e76e      	b.n	3e02 <__aeabi_fsub+0x36>
    3f24:	2800      	cmp	r0, #0
    3f26:	d121      	bne.n	3f6c <__aeabi_fsub+0x1a0>
    3f28:	1c60      	adds	r0, r4, #1
    3f2a:	b2c0      	uxtb	r0, r0
    3f2c:	2801      	cmp	r0, #1
    3f2e:	dd58      	ble.n	3fe2 <__aeabi_fsub+0x216>
    3f30:	2780      	movs	r7, #128	; 0x80
    3f32:	1a9e      	subs	r6, r3, r2
    3f34:	04ff      	lsls	r7, r7, #19
    3f36:	4037      	ands	r7, r6
    3f38:	d02f      	beq.n	3f9a <__aeabi_fsub+0x1ce>
    3f3a:	1ad6      	subs	r6, r2, r3
    3f3c:	000d      	movs	r5, r1
    3f3e:	e78f      	b.n	3e60 <__aeabi_fsub+0x94>
    3f40:	2301      	movs	r3, #1
    3f42:	401d      	ands	r5, r3
    3f44:	2300      	movs	r3, #0
    3f46:	e76e      	b.n	3e26 <__aeabi_fsub+0x5a>
    3f48:	4b62      	ldr	r3, [pc, #392]	; (40d4 <__aeabi_fsub+0x308>)
    3f4a:	1a24      	subs	r4, r4, r0
    3f4c:	4033      	ands	r3, r6
    3f4e:	e758      	b.n	3e02 <__aeabi_fsub+0x36>
    3f50:	2800      	cmp	r0, #0
    3f52:	d151      	bne.n	3ff8 <__aeabi_fsub+0x22c>
    3f54:	1c60      	adds	r0, r4, #1
    3f56:	b2c6      	uxtb	r6, r0
    3f58:	2e01      	cmp	r6, #1
    3f5a:	dd33      	ble.n	3fc4 <__aeabi_fsub+0x1f8>
    3f5c:	28ff      	cmp	r0, #255	; 0xff
    3f5e:	d02d      	beq.n	3fbc <__aeabi_fsub+0x1f0>
    3f60:	189b      	adds	r3, r3, r2
    3f62:	085b      	lsrs	r3, r3, #1
    3f64:	0004      	movs	r4, r0
    3f66:	e74c      	b.n	3e02 <__aeabi_fsub+0x36>
    3f68:	2201      	movs	r2, #1
    3f6a:	e774      	b.n	3e56 <__aeabi_fsub+0x8a>
    3f6c:	2c00      	cmp	r4, #0
    3f6e:	d01a      	beq.n	3fa6 <__aeabi_fsub+0x1da>
    3f70:	2eff      	cmp	r6, #255	; 0xff
    3f72:	d01f      	beq.n	3fb4 <__aeabi_fsub+0x1e8>
    3f74:	2480      	movs	r4, #128	; 0x80
    3f76:	04e4      	lsls	r4, r4, #19
    3f78:	4240      	negs	r0, r0
    3f7a:	4323      	orrs	r3, r4
    3f7c:	281b      	cmp	r0, #27
    3f7e:	dd00      	ble.n	3f82 <__aeabi_fsub+0x1b6>
    3f80:	e096      	b.n	40b0 <__aeabi_fsub+0x2e4>
    3f82:	001d      	movs	r5, r3
    3f84:	2420      	movs	r4, #32
    3f86:	40c5      	lsrs	r5, r0
    3f88:	1a20      	subs	r0, r4, r0
    3f8a:	4083      	lsls	r3, r0
    3f8c:	1e58      	subs	r0, r3, #1
    3f8e:	4183      	sbcs	r3, r0
    3f90:	432b      	orrs	r3, r5
    3f92:	1ad3      	subs	r3, r2, r3
    3f94:	0034      	movs	r4, r6
    3f96:	000d      	movs	r5, r1
    3f98:	e75e      	b.n	3e58 <__aeabi_fsub+0x8c>
    3f9a:	2e00      	cmp	r6, #0
    3f9c:	d000      	beq.n	3fa0 <__aeabi_fsub+0x1d4>
    3f9e:	e75f      	b.n	3e60 <__aeabi_fsub+0x94>
    3fa0:	2500      	movs	r5, #0
    3fa2:	2400      	movs	r4, #0
    3fa4:	e7ab      	b.n	3efe <__aeabi_fsub+0x132>
    3fa6:	2b00      	cmp	r3, #0
    3fa8:	d044      	beq.n	4034 <__aeabi_fsub+0x268>
    3faa:	43c0      	mvns	r0, r0
    3fac:	2800      	cmp	r0, #0
    3fae:	d0f0      	beq.n	3f92 <__aeabi_fsub+0x1c6>
    3fb0:	2eff      	cmp	r6, #255	; 0xff
    3fb2:	d1e3      	bne.n	3f7c <__aeabi_fsub+0x1b0>
    3fb4:	0013      	movs	r3, r2
    3fb6:	24ff      	movs	r4, #255	; 0xff
    3fb8:	000d      	movs	r5, r1
    3fba:	e722      	b.n	3e02 <__aeabi_fsub+0x36>
    3fbc:	000d      	movs	r5, r1
    3fbe:	24ff      	movs	r4, #255	; 0xff
    3fc0:	2300      	movs	r3, #0
    3fc2:	e730      	b.n	3e26 <__aeabi_fsub+0x5a>
    3fc4:	2c00      	cmp	r4, #0
    3fc6:	d15d      	bne.n	4084 <__aeabi_fsub+0x2b8>
    3fc8:	2b00      	cmp	r3, #0
    3fca:	d07d      	beq.n	40c8 <__aeabi_fsub+0x2fc>
    3fcc:	2a00      	cmp	r2, #0
    3fce:	d100      	bne.n	3fd2 <__aeabi_fsub+0x206>
    3fd0:	e717      	b.n	3e02 <__aeabi_fsub+0x36>
    3fd2:	189b      	adds	r3, r3, r2
    3fd4:	015a      	lsls	r2, r3, #5
    3fd6:	d400      	bmi.n	3fda <__aeabi_fsub+0x20e>
    3fd8:	e756      	b.n	3e88 <__aeabi_fsub+0xbc>
    3fda:	4a3e      	ldr	r2, [pc, #248]	; (40d4 <__aeabi_fsub+0x308>)
    3fdc:	0004      	movs	r4, r0
    3fde:	4013      	ands	r3, r2
    3fe0:	e70f      	b.n	3e02 <__aeabi_fsub+0x36>
    3fe2:	2c00      	cmp	r4, #0
    3fe4:	d11e      	bne.n	4024 <__aeabi_fsub+0x258>
    3fe6:	2b00      	cmp	r3, #0
    3fe8:	d12f      	bne.n	404a <__aeabi_fsub+0x27e>
    3fea:	2a00      	cmp	r2, #0
    3fec:	d065      	beq.n	40ba <__aeabi_fsub+0x2ee>
    3fee:	0013      	movs	r3, r2
    3ff0:	000d      	movs	r5, r1
    3ff2:	e706      	b.n	3e02 <__aeabi_fsub+0x36>
    3ff4:	2201      	movs	r2, #1
    3ff6:	e76d      	b.n	3ed4 <__aeabi_fsub+0x108>
    3ff8:	2c00      	cmp	r4, #0
    3ffa:	d11f      	bne.n	403c <__aeabi_fsub+0x270>
    3ffc:	2b00      	cmp	r3, #0
    3ffe:	d059      	beq.n	40b4 <__aeabi_fsub+0x2e8>
    4000:	43c0      	mvns	r0, r0
    4002:	2800      	cmp	r0, #0
    4004:	d00b      	beq.n	401e <__aeabi_fsub+0x252>
    4006:	2eff      	cmp	r6, #255	; 0xff
    4008:	d04f      	beq.n	40aa <__aeabi_fsub+0x2de>
    400a:	281b      	cmp	r0, #27
    400c:	dc5e      	bgt.n	40cc <__aeabi_fsub+0x300>
    400e:	001d      	movs	r5, r3
    4010:	2420      	movs	r4, #32
    4012:	40c5      	lsrs	r5, r0
    4014:	1a20      	subs	r0, r4, r0
    4016:	4083      	lsls	r3, r0
    4018:	1e58      	subs	r0, r3, #1
    401a:	4183      	sbcs	r3, r0
    401c:	432b      	orrs	r3, r5
    401e:	189b      	adds	r3, r3, r2
    4020:	0034      	movs	r4, r6
    4022:	e758      	b.n	3ed6 <__aeabi_fsub+0x10a>
    4024:	2b00      	cmp	r3, #0
    4026:	d11c      	bne.n	4062 <__aeabi_fsub+0x296>
    4028:	2a00      	cmp	r2, #0
    402a:	d049      	beq.n	40c0 <__aeabi_fsub+0x2f4>
    402c:	0013      	movs	r3, r2
    402e:	000d      	movs	r5, r1
    4030:	24ff      	movs	r4, #255	; 0xff
    4032:	e6e6      	b.n	3e02 <__aeabi_fsub+0x36>
    4034:	0013      	movs	r3, r2
    4036:	0034      	movs	r4, r6
    4038:	000d      	movs	r5, r1
    403a:	e6e2      	b.n	3e02 <__aeabi_fsub+0x36>
    403c:	2eff      	cmp	r6, #255	; 0xff
    403e:	d034      	beq.n	40aa <__aeabi_fsub+0x2de>
    4040:	2480      	movs	r4, #128	; 0x80
    4042:	04e4      	lsls	r4, r4, #19
    4044:	4240      	negs	r0, r0
    4046:	4323      	orrs	r3, r4
    4048:	e7df      	b.n	400a <__aeabi_fsub+0x23e>
    404a:	2a00      	cmp	r2, #0
    404c:	d100      	bne.n	4050 <__aeabi_fsub+0x284>
    404e:	e6d8      	b.n	3e02 <__aeabi_fsub+0x36>
    4050:	2780      	movs	r7, #128	; 0x80
    4052:	1a98      	subs	r0, r3, r2
    4054:	04ff      	lsls	r7, r7, #19
    4056:	4007      	ands	r7, r0
    4058:	d100      	bne.n	405c <__aeabi_fsub+0x290>
    405a:	e74d      	b.n	3ef8 <__aeabi_fsub+0x12c>
    405c:	1ad3      	subs	r3, r2, r3
    405e:	000d      	movs	r5, r1
    4060:	e6cf      	b.n	3e02 <__aeabi_fsub+0x36>
    4062:	24ff      	movs	r4, #255	; 0xff
    4064:	2a00      	cmp	r2, #0
    4066:	d100      	bne.n	406a <__aeabi_fsub+0x29e>
    4068:	e6cb      	b.n	3e02 <__aeabi_fsub+0x36>
    406a:	2080      	movs	r0, #128	; 0x80
    406c:	08db      	lsrs	r3, r3, #3
    406e:	03c0      	lsls	r0, r0, #15
    4070:	4203      	tst	r3, r0
    4072:	d004      	beq.n	407e <__aeabi_fsub+0x2b2>
    4074:	08d2      	lsrs	r2, r2, #3
    4076:	4202      	tst	r2, r0
    4078:	d101      	bne.n	407e <__aeabi_fsub+0x2b2>
    407a:	0013      	movs	r3, r2
    407c:	000d      	movs	r5, r1
    407e:	00db      	lsls	r3, r3, #3
    4080:	24ff      	movs	r4, #255	; 0xff
    4082:	e6be      	b.n	3e02 <__aeabi_fsub+0x36>
    4084:	2b00      	cmp	r3, #0
    4086:	d010      	beq.n	40aa <__aeabi_fsub+0x2de>
    4088:	24ff      	movs	r4, #255	; 0xff
    408a:	2a00      	cmp	r2, #0
    408c:	d100      	bne.n	4090 <__aeabi_fsub+0x2c4>
    408e:	e6b8      	b.n	3e02 <__aeabi_fsub+0x36>
    4090:	2080      	movs	r0, #128	; 0x80
    4092:	08db      	lsrs	r3, r3, #3
    4094:	03c0      	lsls	r0, r0, #15
    4096:	4203      	tst	r3, r0
    4098:	d003      	beq.n	40a2 <__aeabi_fsub+0x2d6>
    409a:	08d2      	lsrs	r2, r2, #3
    409c:	4202      	tst	r2, r0
    409e:	d100      	bne.n	40a2 <__aeabi_fsub+0x2d6>
    40a0:	0013      	movs	r3, r2
    40a2:	00db      	lsls	r3, r3, #3
    40a4:	000d      	movs	r5, r1
    40a6:	24ff      	movs	r4, #255	; 0xff
    40a8:	e6ab      	b.n	3e02 <__aeabi_fsub+0x36>
    40aa:	0013      	movs	r3, r2
    40ac:	24ff      	movs	r4, #255	; 0xff
    40ae:	e6a8      	b.n	3e02 <__aeabi_fsub+0x36>
    40b0:	2301      	movs	r3, #1
    40b2:	e76e      	b.n	3f92 <__aeabi_fsub+0x1c6>
    40b4:	0013      	movs	r3, r2
    40b6:	0034      	movs	r4, r6
    40b8:	e6a3      	b.n	3e02 <__aeabi_fsub+0x36>
    40ba:	2700      	movs	r7, #0
    40bc:	2500      	movs	r5, #0
    40be:	e71e      	b.n	3efe <__aeabi_fsub+0x132>
    40c0:	2780      	movs	r7, #128	; 0x80
    40c2:	2500      	movs	r5, #0
    40c4:	03ff      	lsls	r7, r7, #15
    40c6:	e6e9      	b.n	3e9c <__aeabi_fsub+0xd0>
    40c8:	0013      	movs	r3, r2
    40ca:	e69a      	b.n	3e02 <__aeabi_fsub+0x36>
    40cc:	2301      	movs	r3, #1
    40ce:	e7a6      	b.n	401e <__aeabi_fsub+0x252>
    40d0:	7dffffff 	.word	0x7dffffff
    40d4:	fbffffff 	.word	0xfbffffff

000040d8 <__aeabi_f2iz>:
    40d8:	0243      	lsls	r3, r0, #9
    40da:	0a59      	lsrs	r1, r3, #9
    40dc:	0043      	lsls	r3, r0, #1
    40de:	0fc2      	lsrs	r2, r0, #31
    40e0:	0e1b      	lsrs	r3, r3, #24
    40e2:	2000      	movs	r0, #0
    40e4:	2b7e      	cmp	r3, #126	; 0x7e
    40e6:	dd0e      	ble.n	4106 <__aeabi_f2iz+0x2e>
    40e8:	2b9d      	cmp	r3, #157	; 0x9d
    40ea:	dc0d      	bgt.n	4108 <__aeabi_f2iz+0x30>
    40ec:	2080      	movs	r0, #128	; 0x80
    40ee:	0400      	lsls	r0, r0, #16
    40f0:	4301      	orrs	r1, r0
    40f2:	2b95      	cmp	r3, #149	; 0x95
    40f4:	dc0b      	bgt.n	410e <__aeabi_f2iz+0x36>
    40f6:	2096      	movs	r0, #150	; 0x96
    40f8:	1ac3      	subs	r3, r0, r3
    40fa:	40d9      	lsrs	r1, r3
    40fc:	000b      	movs	r3, r1
    40fe:	4258      	negs	r0, r3
    4100:	2a00      	cmp	r2, #0
    4102:	d100      	bne.n	4106 <__aeabi_f2iz+0x2e>
    4104:	0018      	movs	r0, r3
    4106:	4770      	bx	lr
    4108:	4b03      	ldr	r3, [pc, #12]	; (4118 <__aeabi_f2iz+0x40>)
    410a:	18d0      	adds	r0, r2, r3
    410c:	e7fb      	b.n	4106 <__aeabi_f2iz+0x2e>
    410e:	3b96      	subs	r3, #150	; 0x96
    4110:	4099      	lsls	r1, r3
    4112:	000b      	movs	r3, r1
    4114:	e7f3      	b.n	40fe <__aeabi_f2iz+0x26>
    4116:	46c0      	nop			; (mov r8, r8)
    4118:	7fffffff 	.word	0x7fffffff

0000411c <__aeabi_i2f>:
    411c:	b570      	push	{r4, r5, r6, lr}
    411e:	2800      	cmp	r0, #0
    4120:	d030      	beq.n	4184 <__aeabi_i2f+0x68>
    4122:	17c3      	asrs	r3, r0, #31
    4124:	18c5      	adds	r5, r0, r3
    4126:	405d      	eors	r5, r3
    4128:	0fc4      	lsrs	r4, r0, #31
    412a:	0028      	movs	r0, r5
    412c:	f001 ffd2 	bl	60d4 <__clzsi2>
    4130:	239e      	movs	r3, #158	; 0x9e
    4132:	1a1b      	subs	r3, r3, r0
    4134:	2b96      	cmp	r3, #150	; 0x96
    4136:	dc0d      	bgt.n	4154 <__aeabi_i2f+0x38>
    4138:	2296      	movs	r2, #150	; 0x96
    413a:	1ad2      	subs	r2, r2, r3
    413c:	4095      	lsls	r5, r2
    413e:	026a      	lsls	r2, r5, #9
    4140:	0a52      	lsrs	r2, r2, #9
    4142:	b2d8      	uxtb	r0, r3
    4144:	0252      	lsls	r2, r2, #9
    4146:	05c0      	lsls	r0, r0, #23
    4148:	0a52      	lsrs	r2, r2, #9
    414a:	07e4      	lsls	r4, r4, #31
    414c:	4302      	orrs	r2, r0
    414e:	4322      	orrs	r2, r4
    4150:	0010      	movs	r0, r2
    4152:	bd70      	pop	{r4, r5, r6, pc}
    4154:	2b99      	cmp	r3, #153	; 0x99
    4156:	dc19      	bgt.n	418c <__aeabi_i2f+0x70>
    4158:	2299      	movs	r2, #153	; 0x99
    415a:	1ad2      	subs	r2, r2, r3
    415c:	4095      	lsls	r5, r2
    415e:	4a12      	ldr	r2, [pc, #72]	; (41a8 <__aeabi_i2f+0x8c>)
    4160:	402a      	ands	r2, r5
    4162:	0769      	lsls	r1, r5, #29
    4164:	d004      	beq.n	4170 <__aeabi_i2f+0x54>
    4166:	210f      	movs	r1, #15
    4168:	400d      	ands	r5, r1
    416a:	2d04      	cmp	r5, #4
    416c:	d000      	beq.n	4170 <__aeabi_i2f+0x54>
    416e:	3204      	adds	r2, #4
    4170:	0151      	lsls	r1, r2, #5
    4172:	d503      	bpl.n	417c <__aeabi_i2f+0x60>
    4174:	4b0c      	ldr	r3, [pc, #48]	; (41a8 <__aeabi_i2f+0x8c>)
    4176:	401a      	ands	r2, r3
    4178:	239f      	movs	r3, #159	; 0x9f
    417a:	1a1b      	subs	r3, r3, r0
    417c:	0192      	lsls	r2, r2, #6
    417e:	0a52      	lsrs	r2, r2, #9
    4180:	b2d8      	uxtb	r0, r3
    4182:	e7df      	b.n	4144 <__aeabi_i2f+0x28>
    4184:	2400      	movs	r4, #0
    4186:	2000      	movs	r0, #0
    4188:	2200      	movs	r2, #0
    418a:	e7db      	b.n	4144 <__aeabi_i2f+0x28>
    418c:	2205      	movs	r2, #5
    418e:	002e      	movs	r6, r5
    4190:	1a12      	subs	r2, r2, r0
    4192:	21b9      	movs	r1, #185	; 0xb9
    4194:	40d6      	lsrs	r6, r2
    4196:	002a      	movs	r2, r5
    4198:	1ac9      	subs	r1, r1, r3
    419a:	408a      	lsls	r2, r1
    419c:	1e55      	subs	r5, r2, #1
    419e:	41aa      	sbcs	r2, r5
    41a0:	0035      	movs	r5, r6
    41a2:	4315      	orrs	r5, r2
    41a4:	e7db      	b.n	415e <__aeabi_i2f+0x42>
    41a6:	46c0      	nop			; (mov r8, r8)
    41a8:	fbffffff 	.word	0xfbffffff

000041ac <__aeabi_dadd>:
    41ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    41ae:	4656      	mov	r6, sl
    41b0:	465f      	mov	r7, fp
    41b2:	464d      	mov	r5, r9
    41b4:	4644      	mov	r4, r8
    41b6:	b4f0      	push	{r4, r5, r6, r7}
    41b8:	000f      	movs	r7, r1
    41ba:	0ffd      	lsrs	r5, r7, #31
    41bc:	46aa      	mov	sl, r5
    41be:	0309      	lsls	r1, r1, #12
    41c0:	007c      	lsls	r4, r7, #1
    41c2:	002e      	movs	r6, r5
    41c4:	005f      	lsls	r7, r3, #1
    41c6:	0f45      	lsrs	r5, r0, #29
    41c8:	0a49      	lsrs	r1, r1, #9
    41ca:	0d7f      	lsrs	r7, r7, #21
    41cc:	4329      	orrs	r1, r5
    41ce:	00c5      	lsls	r5, r0, #3
    41d0:	0318      	lsls	r0, r3, #12
    41d2:	46bc      	mov	ip, r7
    41d4:	0a40      	lsrs	r0, r0, #9
    41d6:	0f57      	lsrs	r7, r2, #29
    41d8:	0d64      	lsrs	r4, r4, #21
    41da:	0fdb      	lsrs	r3, r3, #31
    41dc:	4338      	orrs	r0, r7
    41de:	00d2      	lsls	r2, r2, #3
    41e0:	459a      	cmp	sl, r3
    41e2:	d100      	bne.n	41e6 <__aeabi_dadd+0x3a>
    41e4:	e0aa      	b.n	433c <__aeabi_dadd+0x190>
    41e6:	4666      	mov	r6, ip
    41e8:	1ba6      	subs	r6, r4, r6
    41ea:	2e00      	cmp	r6, #0
    41ec:	dc00      	bgt.n	41f0 <__aeabi_dadd+0x44>
    41ee:	e0ff      	b.n	43f0 <__aeabi_dadd+0x244>
    41f0:	4663      	mov	r3, ip
    41f2:	2b00      	cmp	r3, #0
    41f4:	d139      	bne.n	426a <__aeabi_dadd+0xbe>
    41f6:	0003      	movs	r3, r0
    41f8:	4313      	orrs	r3, r2
    41fa:	d000      	beq.n	41fe <__aeabi_dadd+0x52>
    41fc:	e0d9      	b.n	43b2 <__aeabi_dadd+0x206>
    41fe:	076b      	lsls	r3, r5, #29
    4200:	d009      	beq.n	4216 <__aeabi_dadd+0x6a>
    4202:	230f      	movs	r3, #15
    4204:	402b      	ands	r3, r5
    4206:	2b04      	cmp	r3, #4
    4208:	d005      	beq.n	4216 <__aeabi_dadd+0x6a>
    420a:	1d2b      	adds	r3, r5, #4
    420c:	42ab      	cmp	r3, r5
    420e:	41ad      	sbcs	r5, r5
    4210:	426d      	negs	r5, r5
    4212:	1949      	adds	r1, r1, r5
    4214:	001d      	movs	r5, r3
    4216:	020b      	lsls	r3, r1, #8
    4218:	d400      	bmi.n	421c <__aeabi_dadd+0x70>
    421a:	e082      	b.n	4322 <__aeabi_dadd+0x176>
    421c:	4bca      	ldr	r3, [pc, #808]	; (4548 <__aeabi_dadd+0x39c>)
    421e:	3401      	adds	r4, #1
    4220:	429c      	cmp	r4, r3
    4222:	d100      	bne.n	4226 <__aeabi_dadd+0x7a>
    4224:	e0fe      	b.n	4424 <__aeabi_dadd+0x278>
    4226:	000a      	movs	r2, r1
    4228:	4656      	mov	r6, sl
    422a:	4bc8      	ldr	r3, [pc, #800]	; (454c <__aeabi_dadd+0x3a0>)
    422c:	08ed      	lsrs	r5, r5, #3
    422e:	401a      	ands	r2, r3
    4230:	0750      	lsls	r0, r2, #29
    4232:	0564      	lsls	r4, r4, #21
    4234:	0252      	lsls	r2, r2, #9
    4236:	4305      	orrs	r5, r0
    4238:	0b12      	lsrs	r2, r2, #12
    423a:	0d64      	lsrs	r4, r4, #21
    423c:	2100      	movs	r1, #0
    423e:	0312      	lsls	r2, r2, #12
    4240:	0d0b      	lsrs	r3, r1, #20
    4242:	051b      	lsls	r3, r3, #20
    4244:	0564      	lsls	r4, r4, #21
    4246:	0b12      	lsrs	r2, r2, #12
    4248:	431a      	orrs	r2, r3
    424a:	0863      	lsrs	r3, r4, #1
    424c:	4cc0      	ldr	r4, [pc, #768]	; (4550 <__aeabi_dadd+0x3a4>)
    424e:	07f6      	lsls	r6, r6, #31
    4250:	4014      	ands	r4, r2
    4252:	431c      	orrs	r4, r3
    4254:	0064      	lsls	r4, r4, #1
    4256:	0864      	lsrs	r4, r4, #1
    4258:	4334      	orrs	r4, r6
    425a:	0028      	movs	r0, r5
    425c:	0021      	movs	r1, r4
    425e:	bc3c      	pop	{r2, r3, r4, r5}
    4260:	4690      	mov	r8, r2
    4262:	4699      	mov	r9, r3
    4264:	46a2      	mov	sl, r4
    4266:	46ab      	mov	fp, r5
    4268:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    426a:	4bb7      	ldr	r3, [pc, #732]	; (4548 <__aeabi_dadd+0x39c>)
    426c:	429c      	cmp	r4, r3
    426e:	d0c6      	beq.n	41fe <__aeabi_dadd+0x52>
    4270:	2380      	movs	r3, #128	; 0x80
    4272:	041b      	lsls	r3, r3, #16
    4274:	4318      	orrs	r0, r3
    4276:	2e38      	cmp	r6, #56	; 0x38
    4278:	dd00      	ble.n	427c <__aeabi_dadd+0xd0>
    427a:	e0eb      	b.n	4454 <__aeabi_dadd+0x2a8>
    427c:	2e1f      	cmp	r6, #31
    427e:	dd00      	ble.n	4282 <__aeabi_dadd+0xd6>
    4280:	e11e      	b.n	44c0 <__aeabi_dadd+0x314>
    4282:	2320      	movs	r3, #32
    4284:	1b9b      	subs	r3, r3, r6
    4286:	469c      	mov	ip, r3
    4288:	0003      	movs	r3, r0
    428a:	4667      	mov	r7, ip
    428c:	40bb      	lsls	r3, r7
    428e:	4698      	mov	r8, r3
    4290:	0013      	movs	r3, r2
    4292:	4647      	mov	r7, r8
    4294:	40f3      	lsrs	r3, r6
    4296:	433b      	orrs	r3, r7
    4298:	4667      	mov	r7, ip
    429a:	40ba      	lsls	r2, r7
    429c:	1e57      	subs	r7, r2, #1
    429e:	41ba      	sbcs	r2, r7
    42a0:	4313      	orrs	r3, r2
    42a2:	0002      	movs	r2, r0
    42a4:	40f2      	lsrs	r2, r6
    42a6:	1aeb      	subs	r3, r5, r3
    42a8:	429d      	cmp	r5, r3
    42aa:	41b6      	sbcs	r6, r6
    42ac:	001d      	movs	r5, r3
    42ae:	1a8a      	subs	r2, r1, r2
    42b0:	4276      	negs	r6, r6
    42b2:	1b91      	subs	r1, r2, r6
    42b4:	020b      	lsls	r3, r1, #8
    42b6:	d531      	bpl.n	431c <__aeabi_dadd+0x170>
    42b8:	024a      	lsls	r2, r1, #9
    42ba:	0a56      	lsrs	r6, r2, #9
    42bc:	2e00      	cmp	r6, #0
    42be:	d100      	bne.n	42c2 <__aeabi_dadd+0x116>
    42c0:	e0b4      	b.n	442c <__aeabi_dadd+0x280>
    42c2:	0030      	movs	r0, r6
    42c4:	f001 ff06 	bl	60d4 <__clzsi2>
    42c8:	0003      	movs	r3, r0
    42ca:	3b08      	subs	r3, #8
    42cc:	2b1f      	cmp	r3, #31
    42ce:	dd00      	ble.n	42d2 <__aeabi_dadd+0x126>
    42d0:	e0b5      	b.n	443e <__aeabi_dadd+0x292>
    42d2:	2220      	movs	r2, #32
    42d4:	0029      	movs	r1, r5
    42d6:	1ad2      	subs	r2, r2, r3
    42d8:	40d1      	lsrs	r1, r2
    42da:	409e      	lsls	r6, r3
    42dc:	000a      	movs	r2, r1
    42de:	409d      	lsls	r5, r3
    42e0:	4332      	orrs	r2, r6
    42e2:	429c      	cmp	r4, r3
    42e4:	dd00      	ble.n	42e8 <__aeabi_dadd+0x13c>
    42e6:	e0b1      	b.n	444c <__aeabi_dadd+0x2a0>
    42e8:	1b1c      	subs	r4, r3, r4
    42ea:	1c63      	adds	r3, r4, #1
    42ec:	2b1f      	cmp	r3, #31
    42ee:	dd00      	ble.n	42f2 <__aeabi_dadd+0x146>
    42f0:	e0d5      	b.n	449e <__aeabi_dadd+0x2f2>
    42f2:	2120      	movs	r1, #32
    42f4:	0014      	movs	r4, r2
    42f6:	0028      	movs	r0, r5
    42f8:	1ac9      	subs	r1, r1, r3
    42fa:	408c      	lsls	r4, r1
    42fc:	40d8      	lsrs	r0, r3
    42fe:	408d      	lsls	r5, r1
    4300:	4304      	orrs	r4, r0
    4302:	40da      	lsrs	r2, r3
    4304:	1e68      	subs	r0, r5, #1
    4306:	4185      	sbcs	r5, r0
    4308:	0011      	movs	r1, r2
    430a:	4325      	orrs	r5, r4
    430c:	2400      	movs	r4, #0
    430e:	e776      	b.n	41fe <__aeabi_dadd+0x52>
    4310:	4641      	mov	r1, r8
    4312:	4331      	orrs	r1, r6
    4314:	d100      	bne.n	4318 <__aeabi_dadd+0x16c>
    4316:	e234      	b.n	4782 <__aeabi_dadd+0x5d6>
    4318:	0031      	movs	r1, r6
    431a:	4645      	mov	r5, r8
    431c:	076b      	lsls	r3, r5, #29
    431e:	d000      	beq.n	4322 <__aeabi_dadd+0x176>
    4320:	e76f      	b.n	4202 <__aeabi_dadd+0x56>
    4322:	4656      	mov	r6, sl
    4324:	0748      	lsls	r0, r1, #29
    4326:	08ed      	lsrs	r5, r5, #3
    4328:	08c9      	lsrs	r1, r1, #3
    432a:	4305      	orrs	r5, r0
    432c:	4b86      	ldr	r3, [pc, #536]	; (4548 <__aeabi_dadd+0x39c>)
    432e:	429c      	cmp	r4, r3
    4330:	d035      	beq.n	439e <__aeabi_dadd+0x1f2>
    4332:	030a      	lsls	r2, r1, #12
    4334:	0564      	lsls	r4, r4, #21
    4336:	0b12      	lsrs	r2, r2, #12
    4338:	0d64      	lsrs	r4, r4, #21
    433a:	e77f      	b.n	423c <__aeabi_dadd+0x90>
    433c:	4663      	mov	r3, ip
    433e:	1ae3      	subs	r3, r4, r3
    4340:	469b      	mov	fp, r3
    4342:	2b00      	cmp	r3, #0
    4344:	dc00      	bgt.n	4348 <__aeabi_dadd+0x19c>
    4346:	e08b      	b.n	4460 <__aeabi_dadd+0x2b4>
    4348:	4667      	mov	r7, ip
    434a:	2f00      	cmp	r7, #0
    434c:	d03c      	beq.n	43c8 <__aeabi_dadd+0x21c>
    434e:	4f7e      	ldr	r7, [pc, #504]	; (4548 <__aeabi_dadd+0x39c>)
    4350:	42bc      	cmp	r4, r7
    4352:	d100      	bne.n	4356 <__aeabi_dadd+0x1aa>
    4354:	e753      	b.n	41fe <__aeabi_dadd+0x52>
    4356:	2780      	movs	r7, #128	; 0x80
    4358:	043f      	lsls	r7, r7, #16
    435a:	4338      	orrs	r0, r7
    435c:	465b      	mov	r3, fp
    435e:	2b38      	cmp	r3, #56	; 0x38
    4360:	dc00      	bgt.n	4364 <__aeabi_dadd+0x1b8>
    4362:	e0f7      	b.n	4554 <__aeabi_dadd+0x3a8>
    4364:	4302      	orrs	r2, r0
    4366:	1e50      	subs	r0, r2, #1
    4368:	4182      	sbcs	r2, r0
    436a:	2000      	movs	r0, #0
    436c:	b2d2      	uxtb	r2, r2
    436e:	1953      	adds	r3, r2, r5
    4370:	1842      	adds	r2, r0, r1
    4372:	42ab      	cmp	r3, r5
    4374:	4189      	sbcs	r1, r1
    4376:	001d      	movs	r5, r3
    4378:	4249      	negs	r1, r1
    437a:	1889      	adds	r1, r1, r2
    437c:	020b      	lsls	r3, r1, #8
    437e:	d5cd      	bpl.n	431c <__aeabi_dadd+0x170>
    4380:	4b71      	ldr	r3, [pc, #452]	; (4548 <__aeabi_dadd+0x39c>)
    4382:	3401      	adds	r4, #1
    4384:	429c      	cmp	r4, r3
    4386:	d100      	bne.n	438a <__aeabi_dadd+0x1de>
    4388:	e13d      	b.n	4606 <__aeabi_dadd+0x45a>
    438a:	2001      	movs	r0, #1
    438c:	4a6f      	ldr	r2, [pc, #444]	; (454c <__aeabi_dadd+0x3a0>)
    438e:	086b      	lsrs	r3, r5, #1
    4390:	400a      	ands	r2, r1
    4392:	4028      	ands	r0, r5
    4394:	4318      	orrs	r0, r3
    4396:	07d5      	lsls	r5, r2, #31
    4398:	4305      	orrs	r5, r0
    439a:	0851      	lsrs	r1, r2, #1
    439c:	e72f      	b.n	41fe <__aeabi_dadd+0x52>
    439e:	002b      	movs	r3, r5
    43a0:	430b      	orrs	r3, r1
    43a2:	d100      	bne.n	43a6 <__aeabi_dadd+0x1fa>
    43a4:	e1cb      	b.n	473e <__aeabi_dadd+0x592>
    43a6:	2380      	movs	r3, #128	; 0x80
    43a8:	031b      	lsls	r3, r3, #12
    43aa:	430b      	orrs	r3, r1
    43ac:	031a      	lsls	r2, r3, #12
    43ae:	0b12      	lsrs	r2, r2, #12
    43b0:	e744      	b.n	423c <__aeabi_dadd+0x90>
    43b2:	3e01      	subs	r6, #1
    43b4:	2e00      	cmp	r6, #0
    43b6:	d16d      	bne.n	4494 <__aeabi_dadd+0x2e8>
    43b8:	1aae      	subs	r6, r5, r2
    43ba:	42b5      	cmp	r5, r6
    43bc:	419b      	sbcs	r3, r3
    43be:	1a09      	subs	r1, r1, r0
    43c0:	425b      	negs	r3, r3
    43c2:	1ac9      	subs	r1, r1, r3
    43c4:	0035      	movs	r5, r6
    43c6:	e775      	b.n	42b4 <__aeabi_dadd+0x108>
    43c8:	0007      	movs	r7, r0
    43ca:	4317      	orrs	r7, r2
    43cc:	d100      	bne.n	43d0 <__aeabi_dadd+0x224>
    43ce:	e716      	b.n	41fe <__aeabi_dadd+0x52>
    43d0:	2301      	movs	r3, #1
    43d2:	425b      	negs	r3, r3
    43d4:	469c      	mov	ip, r3
    43d6:	44e3      	add	fp, ip
    43d8:	465b      	mov	r3, fp
    43da:	2b00      	cmp	r3, #0
    43dc:	d000      	beq.n	43e0 <__aeabi_dadd+0x234>
    43de:	e0e0      	b.n	45a2 <__aeabi_dadd+0x3f6>
    43e0:	18aa      	adds	r2, r5, r2
    43e2:	42aa      	cmp	r2, r5
    43e4:	419b      	sbcs	r3, r3
    43e6:	1809      	adds	r1, r1, r0
    43e8:	425b      	negs	r3, r3
    43ea:	1859      	adds	r1, r3, r1
    43ec:	0015      	movs	r5, r2
    43ee:	e7c5      	b.n	437c <__aeabi_dadd+0x1d0>
    43f0:	2e00      	cmp	r6, #0
    43f2:	d175      	bne.n	44e0 <__aeabi_dadd+0x334>
    43f4:	1c66      	adds	r6, r4, #1
    43f6:	0576      	lsls	r6, r6, #21
    43f8:	0d76      	lsrs	r6, r6, #21
    43fa:	2e01      	cmp	r6, #1
    43fc:	dc00      	bgt.n	4400 <__aeabi_dadd+0x254>
    43fe:	e0f3      	b.n	45e8 <__aeabi_dadd+0x43c>
    4400:	1aae      	subs	r6, r5, r2
    4402:	46b0      	mov	r8, r6
    4404:	4545      	cmp	r5, r8
    4406:	41bf      	sbcs	r7, r7
    4408:	1a0e      	subs	r6, r1, r0
    440a:	427f      	negs	r7, r7
    440c:	1bf6      	subs	r6, r6, r7
    440e:	0237      	lsls	r7, r6, #8
    4410:	d400      	bmi.n	4414 <__aeabi_dadd+0x268>
    4412:	e08f      	b.n	4534 <__aeabi_dadd+0x388>
    4414:	1b55      	subs	r5, r2, r5
    4416:	42aa      	cmp	r2, r5
    4418:	41b6      	sbcs	r6, r6
    441a:	1a41      	subs	r1, r0, r1
    441c:	4276      	negs	r6, r6
    441e:	1b8e      	subs	r6, r1, r6
    4420:	469a      	mov	sl, r3
    4422:	e74b      	b.n	42bc <__aeabi_dadd+0x110>
    4424:	4656      	mov	r6, sl
    4426:	2200      	movs	r2, #0
    4428:	2500      	movs	r5, #0
    442a:	e707      	b.n	423c <__aeabi_dadd+0x90>
    442c:	0028      	movs	r0, r5
    442e:	f001 fe51 	bl	60d4 <__clzsi2>
    4432:	3020      	adds	r0, #32
    4434:	0003      	movs	r3, r0
    4436:	3b08      	subs	r3, #8
    4438:	2b1f      	cmp	r3, #31
    443a:	dc00      	bgt.n	443e <__aeabi_dadd+0x292>
    443c:	e749      	b.n	42d2 <__aeabi_dadd+0x126>
    443e:	002a      	movs	r2, r5
    4440:	3828      	subs	r0, #40	; 0x28
    4442:	4082      	lsls	r2, r0
    4444:	2500      	movs	r5, #0
    4446:	429c      	cmp	r4, r3
    4448:	dc00      	bgt.n	444c <__aeabi_dadd+0x2a0>
    444a:	e74d      	b.n	42e8 <__aeabi_dadd+0x13c>
    444c:	493f      	ldr	r1, [pc, #252]	; (454c <__aeabi_dadd+0x3a0>)
    444e:	1ae4      	subs	r4, r4, r3
    4450:	4011      	ands	r1, r2
    4452:	e6d4      	b.n	41fe <__aeabi_dadd+0x52>
    4454:	4302      	orrs	r2, r0
    4456:	1e50      	subs	r0, r2, #1
    4458:	4182      	sbcs	r2, r0
    445a:	b2d3      	uxtb	r3, r2
    445c:	2200      	movs	r2, #0
    445e:	e722      	b.n	42a6 <__aeabi_dadd+0xfa>
    4460:	2b00      	cmp	r3, #0
    4462:	d000      	beq.n	4466 <__aeabi_dadd+0x2ba>
    4464:	e0f3      	b.n	464e <__aeabi_dadd+0x4a2>
    4466:	1c63      	adds	r3, r4, #1
    4468:	469c      	mov	ip, r3
    446a:	055b      	lsls	r3, r3, #21
    446c:	0d5b      	lsrs	r3, r3, #21
    446e:	2b01      	cmp	r3, #1
    4470:	dc00      	bgt.n	4474 <__aeabi_dadd+0x2c8>
    4472:	e09f      	b.n	45b4 <__aeabi_dadd+0x408>
    4474:	4b34      	ldr	r3, [pc, #208]	; (4548 <__aeabi_dadd+0x39c>)
    4476:	459c      	cmp	ip, r3
    4478:	d100      	bne.n	447c <__aeabi_dadd+0x2d0>
    447a:	e0c3      	b.n	4604 <__aeabi_dadd+0x458>
    447c:	18aa      	adds	r2, r5, r2
    447e:	1809      	adds	r1, r1, r0
    4480:	42aa      	cmp	r2, r5
    4482:	4180      	sbcs	r0, r0
    4484:	4240      	negs	r0, r0
    4486:	1841      	adds	r1, r0, r1
    4488:	07cd      	lsls	r5, r1, #31
    448a:	0852      	lsrs	r2, r2, #1
    448c:	4315      	orrs	r5, r2
    448e:	0849      	lsrs	r1, r1, #1
    4490:	4664      	mov	r4, ip
    4492:	e6b4      	b.n	41fe <__aeabi_dadd+0x52>
    4494:	4b2c      	ldr	r3, [pc, #176]	; (4548 <__aeabi_dadd+0x39c>)
    4496:	429c      	cmp	r4, r3
    4498:	d000      	beq.n	449c <__aeabi_dadd+0x2f0>
    449a:	e6ec      	b.n	4276 <__aeabi_dadd+0xca>
    449c:	e6af      	b.n	41fe <__aeabi_dadd+0x52>
    449e:	0011      	movs	r1, r2
    44a0:	3c1f      	subs	r4, #31
    44a2:	40e1      	lsrs	r1, r4
    44a4:	000c      	movs	r4, r1
    44a6:	2b20      	cmp	r3, #32
    44a8:	d100      	bne.n	44ac <__aeabi_dadd+0x300>
    44aa:	e07f      	b.n	45ac <__aeabi_dadd+0x400>
    44ac:	2140      	movs	r1, #64	; 0x40
    44ae:	1acb      	subs	r3, r1, r3
    44b0:	409a      	lsls	r2, r3
    44b2:	4315      	orrs	r5, r2
    44b4:	1e6a      	subs	r2, r5, #1
    44b6:	4195      	sbcs	r5, r2
    44b8:	2100      	movs	r1, #0
    44ba:	4325      	orrs	r5, r4
    44bc:	2400      	movs	r4, #0
    44be:	e72d      	b.n	431c <__aeabi_dadd+0x170>
    44c0:	0033      	movs	r3, r6
    44c2:	0007      	movs	r7, r0
    44c4:	3b20      	subs	r3, #32
    44c6:	40df      	lsrs	r7, r3
    44c8:	003b      	movs	r3, r7
    44ca:	2e20      	cmp	r6, #32
    44cc:	d070      	beq.n	45b0 <__aeabi_dadd+0x404>
    44ce:	2740      	movs	r7, #64	; 0x40
    44d0:	1bbe      	subs	r6, r7, r6
    44d2:	40b0      	lsls	r0, r6
    44d4:	4302      	orrs	r2, r0
    44d6:	1e50      	subs	r0, r2, #1
    44d8:	4182      	sbcs	r2, r0
    44da:	4313      	orrs	r3, r2
    44dc:	2200      	movs	r2, #0
    44de:	e6e2      	b.n	42a6 <__aeabi_dadd+0xfa>
    44e0:	2c00      	cmp	r4, #0
    44e2:	d04f      	beq.n	4584 <__aeabi_dadd+0x3d8>
    44e4:	4c18      	ldr	r4, [pc, #96]	; (4548 <__aeabi_dadd+0x39c>)
    44e6:	45a4      	cmp	ip, r4
    44e8:	d100      	bne.n	44ec <__aeabi_dadd+0x340>
    44ea:	e0ab      	b.n	4644 <__aeabi_dadd+0x498>
    44ec:	2480      	movs	r4, #128	; 0x80
    44ee:	0424      	lsls	r4, r4, #16
    44f0:	4276      	negs	r6, r6
    44f2:	4321      	orrs	r1, r4
    44f4:	2e38      	cmp	r6, #56	; 0x38
    44f6:	dd00      	ble.n	44fa <__aeabi_dadd+0x34e>
    44f8:	e0df      	b.n	46ba <__aeabi_dadd+0x50e>
    44fa:	2e1f      	cmp	r6, #31
    44fc:	dd00      	ble.n	4500 <__aeabi_dadd+0x354>
    44fe:	e143      	b.n	4788 <__aeabi_dadd+0x5dc>
    4500:	2720      	movs	r7, #32
    4502:	1bbc      	subs	r4, r7, r6
    4504:	46a1      	mov	r9, r4
    4506:	000c      	movs	r4, r1
    4508:	464f      	mov	r7, r9
    450a:	40bc      	lsls	r4, r7
    450c:	46a0      	mov	r8, r4
    450e:	002c      	movs	r4, r5
    4510:	4647      	mov	r7, r8
    4512:	40f4      	lsrs	r4, r6
    4514:	433c      	orrs	r4, r7
    4516:	464f      	mov	r7, r9
    4518:	40bd      	lsls	r5, r7
    451a:	1e6f      	subs	r7, r5, #1
    451c:	41bd      	sbcs	r5, r7
    451e:	40f1      	lsrs	r1, r6
    4520:	432c      	orrs	r4, r5
    4522:	1b15      	subs	r5, r2, r4
    4524:	42aa      	cmp	r2, r5
    4526:	4192      	sbcs	r2, r2
    4528:	1a41      	subs	r1, r0, r1
    452a:	4252      	negs	r2, r2
    452c:	1a89      	subs	r1, r1, r2
    452e:	4664      	mov	r4, ip
    4530:	469a      	mov	sl, r3
    4532:	e6bf      	b.n	42b4 <__aeabi_dadd+0x108>
    4534:	4641      	mov	r1, r8
    4536:	4645      	mov	r5, r8
    4538:	4331      	orrs	r1, r6
    453a:	d000      	beq.n	453e <__aeabi_dadd+0x392>
    453c:	e6be      	b.n	42bc <__aeabi_dadd+0x110>
    453e:	2600      	movs	r6, #0
    4540:	2400      	movs	r4, #0
    4542:	2500      	movs	r5, #0
    4544:	e6f2      	b.n	432c <__aeabi_dadd+0x180>
    4546:	46c0      	nop			; (mov r8, r8)
    4548:	000007ff 	.word	0x000007ff
    454c:	ff7fffff 	.word	0xff7fffff
    4550:	800fffff 	.word	0x800fffff
    4554:	2b1f      	cmp	r3, #31
    4556:	dc59      	bgt.n	460c <__aeabi_dadd+0x460>
    4558:	2720      	movs	r7, #32
    455a:	1aff      	subs	r7, r7, r3
    455c:	46bc      	mov	ip, r7
    455e:	0007      	movs	r7, r0
    4560:	4663      	mov	r3, ip
    4562:	409f      	lsls	r7, r3
    4564:	465b      	mov	r3, fp
    4566:	46b9      	mov	r9, r7
    4568:	0017      	movs	r7, r2
    456a:	40df      	lsrs	r7, r3
    456c:	46b8      	mov	r8, r7
    456e:	464f      	mov	r7, r9
    4570:	4643      	mov	r3, r8
    4572:	431f      	orrs	r7, r3
    4574:	4663      	mov	r3, ip
    4576:	409a      	lsls	r2, r3
    4578:	1e53      	subs	r3, r2, #1
    457a:	419a      	sbcs	r2, r3
    457c:	465b      	mov	r3, fp
    457e:	433a      	orrs	r2, r7
    4580:	40d8      	lsrs	r0, r3
    4582:	e6f4      	b.n	436e <__aeabi_dadd+0x1c2>
    4584:	000c      	movs	r4, r1
    4586:	432c      	orrs	r4, r5
    4588:	d05c      	beq.n	4644 <__aeabi_dadd+0x498>
    458a:	43f6      	mvns	r6, r6
    458c:	2e00      	cmp	r6, #0
    458e:	d155      	bne.n	463c <__aeabi_dadd+0x490>
    4590:	1b55      	subs	r5, r2, r5
    4592:	42aa      	cmp	r2, r5
    4594:	41a4      	sbcs	r4, r4
    4596:	1a41      	subs	r1, r0, r1
    4598:	4264      	negs	r4, r4
    459a:	1b09      	subs	r1, r1, r4
    459c:	469a      	mov	sl, r3
    459e:	4664      	mov	r4, ip
    45a0:	e688      	b.n	42b4 <__aeabi_dadd+0x108>
    45a2:	4f96      	ldr	r7, [pc, #600]	; (47fc <__aeabi_dadd+0x650>)
    45a4:	42bc      	cmp	r4, r7
    45a6:	d000      	beq.n	45aa <__aeabi_dadd+0x3fe>
    45a8:	e6d8      	b.n	435c <__aeabi_dadd+0x1b0>
    45aa:	e628      	b.n	41fe <__aeabi_dadd+0x52>
    45ac:	2200      	movs	r2, #0
    45ae:	e780      	b.n	44b2 <__aeabi_dadd+0x306>
    45b0:	2000      	movs	r0, #0
    45b2:	e78f      	b.n	44d4 <__aeabi_dadd+0x328>
    45b4:	000b      	movs	r3, r1
    45b6:	432b      	orrs	r3, r5
    45b8:	2c00      	cmp	r4, #0
    45ba:	d000      	beq.n	45be <__aeabi_dadd+0x412>
    45bc:	e0c2      	b.n	4744 <__aeabi_dadd+0x598>
    45be:	2b00      	cmp	r3, #0
    45c0:	d100      	bne.n	45c4 <__aeabi_dadd+0x418>
    45c2:	e101      	b.n	47c8 <__aeabi_dadd+0x61c>
    45c4:	0003      	movs	r3, r0
    45c6:	4313      	orrs	r3, r2
    45c8:	d100      	bne.n	45cc <__aeabi_dadd+0x420>
    45ca:	e618      	b.n	41fe <__aeabi_dadd+0x52>
    45cc:	18ab      	adds	r3, r5, r2
    45ce:	42ab      	cmp	r3, r5
    45d0:	41b6      	sbcs	r6, r6
    45d2:	1809      	adds	r1, r1, r0
    45d4:	4276      	negs	r6, r6
    45d6:	1871      	adds	r1, r6, r1
    45d8:	020a      	lsls	r2, r1, #8
    45da:	d400      	bmi.n	45de <__aeabi_dadd+0x432>
    45dc:	e109      	b.n	47f2 <__aeabi_dadd+0x646>
    45de:	4a88      	ldr	r2, [pc, #544]	; (4800 <__aeabi_dadd+0x654>)
    45e0:	001d      	movs	r5, r3
    45e2:	4011      	ands	r1, r2
    45e4:	4664      	mov	r4, ip
    45e6:	e60a      	b.n	41fe <__aeabi_dadd+0x52>
    45e8:	2c00      	cmp	r4, #0
    45ea:	d15b      	bne.n	46a4 <__aeabi_dadd+0x4f8>
    45ec:	000e      	movs	r6, r1
    45ee:	432e      	orrs	r6, r5
    45f0:	d000      	beq.n	45f4 <__aeabi_dadd+0x448>
    45f2:	e08a      	b.n	470a <__aeabi_dadd+0x55e>
    45f4:	0001      	movs	r1, r0
    45f6:	4311      	orrs	r1, r2
    45f8:	d100      	bne.n	45fc <__aeabi_dadd+0x450>
    45fa:	e0c2      	b.n	4782 <__aeabi_dadd+0x5d6>
    45fc:	0001      	movs	r1, r0
    45fe:	0015      	movs	r5, r2
    4600:	469a      	mov	sl, r3
    4602:	e5fc      	b.n	41fe <__aeabi_dadd+0x52>
    4604:	4664      	mov	r4, ip
    4606:	2100      	movs	r1, #0
    4608:	2500      	movs	r5, #0
    460a:	e68f      	b.n	432c <__aeabi_dadd+0x180>
    460c:	2320      	movs	r3, #32
    460e:	425b      	negs	r3, r3
    4610:	469c      	mov	ip, r3
    4612:	44dc      	add	ip, fp
    4614:	4663      	mov	r3, ip
    4616:	0007      	movs	r7, r0
    4618:	40df      	lsrs	r7, r3
    461a:	465b      	mov	r3, fp
    461c:	46bc      	mov	ip, r7
    461e:	2b20      	cmp	r3, #32
    4620:	d100      	bne.n	4624 <__aeabi_dadd+0x478>
    4622:	e0ac      	b.n	477e <__aeabi_dadd+0x5d2>
    4624:	2340      	movs	r3, #64	; 0x40
    4626:	465f      	mov	r7, fp
    4628:	1bdb      	subs	r3, r3, r7
    462a:	4098      	lsls	r0, r3
    462c:	4302      	orrs	r2, r0
    462e:	1e50      	subs	r0, r2, #1
    4630:	4182      	sbcs	r2, r0
    4632:	4663      	mov	r3, ip
    4634:	4313      	orrs	r3, r2
    4636:	001a      	movs	r2, r3
    4638:	2000      	movs	r0, #0
    463a:	e698      	b.n	436e <__aeabi_dadd+0x1c2>
    463c:	4c6f      	ldr	r4, [pc, #444]	; (47fc <__aeabi_dadd+0x650>)
    463e:	45a4      	cmp	ip, r4
    4640:	d000      	beq.n	4644 <__aeabi_dadd+0x498>
    4642:	e757      	b.n	44f4 <__aeabi_dadd+0x348>
    4644:	0001      	movs	r1, r0
    4646:	0015      	movs	r5, r2
    4648:	4664      	mov	r4, ip
    464a:	469a      	mov	sl, r3
    464c:	e5d7      	b.n	41fe <__aeabi_dadd+0x52>
    464e:	2c00      	cmp	r4, #0
    4650:	d139      	bne.n	46c6 <__aeabi_dadd+0x51a>
    4652:	000c      	movs	r4, r1
    4654:	432c      	orrs	r4, r5
    4656:	d06e      	beq.n	4736 <__aeabi_dadd+0x58a>
    4658:	43db      	mvns	r3, r3
    465a:	2b00      	cmp	r3, #0
    465c:	d01a      	beq.n	4694 <__aeabi_dadd+0x4e8>
    465e:	4c67      	ldr	r4, [pc, #412]	; (47fc <__aeabi_dadd+0x650>)
    4660:	45a4      	cmp	ip, r4
    4662:	d068      	beq.n	4736 <__aeabi_dadd+0x58a>
    4664:	2b38      	cmp	r3, #56	; 0x38
    4666:	dd00      	ble.n	466a <__aeabi_dadd+0x4be>
    4668:	e0a4      	b.n	47b4 <__aeabi_dadd+0x608>
    466a:	2b1f      	cmp	r3, #31
    466c:	dd00      	ble.n	4670 <__aeabi_dadd+0x4c4>
    466e:	e0ae      	b.n	47ce <__aeabi_dadd+0x622>
    4670:	2420      	movs	r4, #32
    4672:	000f      	movs	r7, r1
    4674:	1ae4      	subs	r4, r4, r3
    4676:	40a7      	lsls	r7, r4
    4678:	46b9      	mov	r9, r7
    467a:	002f      	movs	r7, r5
    467c:	40df      	lsrs	r7, r3
    467e:	46b8      	mov	r8, r7
    4680:	46a3      	mov	fp, r4
    4682:	464f      	mov	r7, r9
    4684:	4644      	mov	r4, r8
    4686:	4327      	orrs	r7, r4
    4688:	465c      	mov	r4, fp
    468a:	40a5      	lsls	r5, r4
    468c:	1e6c      	subs	r4, r5, #1
    468e:	41a5      	sbcs	r5, r4
    4690:	40d9      	lsrs	r1, r3
    4692:	433d      	orrs	r5, r7
    4694:	18ad      	adds	r5, r5, r2
    4696:	4295      	cmp	r5, r2
    4698:	419b      	sbcs	r3, r3
    469a:	1809      	adds	r1, r1, r0
    469c:	425b      	negs	r3, r3
    469e:	1859      	adds	r1, r3, r1
    46a0:	4664      	mov	r4, ip
    46a2:	e66b      	b.n	437c <__aeabi_dadd+0x1d0>
    46a4:	000c      	movs	r4, r1
    46a6:	432c      	orrs	r4, r5
    46a8:	d115      	bne.n	46d6 <__aeabi_dadd+0x52a>
    46aa:	0001      	movs	r1, r0
    46ac:	4311      	orrs	r1, r2
    46ae:	d07b      	beq.n	47a8 <__aeabi_dadd+0x5fc>
    46b0:	0001      	movs	r1, r0
    46b2:	0015      	movs	r5, r2
    46b4:	469a      	mov	sl, r3
    46b6:	4c51      	ldr	r4, [pc, #324]	; (47fc <__aeabi_dadd+0x650>)
    46b8:	e5a1      	b.n	41fe <__aeabi_dadd+0x52>
    46ba:	430d      	orrs	r5, r1
    46bc:	1e69      	subs	r1, r5, #1
    46be:	418d      	sbcs	r5, r1
    46c0:	2100      	movs	r1, #0
    46c2:	b2ec      	uxtb	r4, r5
    46c4:	e72d      	b.n	4522 <__aeabi_dadd+0x376>
    46c6:	4c4d      	ldr	r4, [pc, #308]	; (47fc <__aeabi_dadd+0x650>)
    46c8:	45a4      	cmp	ip, r4
    46ca:	d034      	beq.n	4736 <__aeabi_dadd+0x58a>
    46cc:	2480      	movs	r4, #128	; 0x80
    46ce:	0424      	lsls	r4, r4, #16
    46d0:	425b      	negs	r3, r3
    46d2:	4321      	orrs	r1, r4
    46d4:	e7c6      	b.n	4664 <__aeabi_dadd+0x4b8>
    46d6:	0004      	movs	r4, r0
    46d8:	4314      	orrs	r4, r2
    46da:	d04e      	beq.n	477a <__aeabi_dadd+0x5ce>
    46dc:	08ed      	lsrs	r5, r5, #3
    46de:	074c      	lsls	r4, r1, #29
    46e0:	432c      	orrs	r4, r5
    46e2:	2580      	movs	r5, #128	; 0x80
    46e4:	08c9      	lsrs	r1, r1, #3
    46e6:	032d      	lsls	r5, r5, #12
    46e8:	4229      	tst	r1, r5
    46ea:	d008      	beq.n	46fe <__aeabi_dadd+0x552>
    46ec:	08c6      	lsrs	r6, r0, #3
    46ee:	422e      	tst	r6, r5
    46f0:	d105      	bne.n	46fe <__aeabi_dadd+0x552>
    46f2:	08d2      	lsrs	r2, r2, #3
    46f4:	0741      	lsls	r1, r0, #29
    46f6:	4311      	orrs	r1, r2
    46f8:	000c      	movs	r4, r1
    46fa:	469a      	mov	sl, r3
    46fc:	0031      	movs	r1, r6
    46fe:	0f62      	lsrs	r2, r4, #29
    4700:	00c9      	lsls	r1, r1, #3
    4702:	00e5      	lsls	r5, r4, #3
    4704:	4311      	orrs	r1, r2
    4706:	4c3d      	ldr	r4, [pc, #244]	; (47fc <__aeabi_dadd+0x650>)
    4708:	e579      	b.n	41fe <__aeabi_dadd+0x52>
    470a:	0006      	movs	r6, r0
    470c:	4316      	orrs	r6, r2
    470e:	d100      	bne.n	4712 <__aeabi_dadd+0x566>
    4710:	e575      	b.n	41fe <__aeabi_dadd+0x52>
    4712:	1aae      	subs	r6, r5, r2
    4714:	46b0      	mov	r8, r6
    4716:	4545      	cmp	r5, r8
    4718:	41bf      	sbcs	r7, r7
    471a:	1a0e      	subs	r6, r1, r0
    471c:	427f      	negs	r7, r7
    471e:	1bf6      	subs	r6, r6, r7
    4720:	0237      	lsls	r7, r6, #8
    4722:	d400      	bmi.n	4726 <__aeabi_dadd+0x57a>
    4724:	e5f4      	b.n	4310 <__aeabi_dadd+0x164>
    4726:	1b55      	subs	r5, r2, r5
    4728:	42aa      	cmp	r2, r5
    472a:	41b6      	sbcs	r6, r6
    472c:	1a41      	subs	r1, r0, r1
    472e:	4276      	negs	r6, r6
    4730:	1b89      	subs	r1, r1, r6
    4732:	469a      	mov	sl, r3
    4734:	e563      	b.n	41fe <__aeabi_dadd+0x52>
    4736:	0001      	movs	r1, r0
    4738:	0015      	movs	r5, r2
    473a:	4664      	mov	r4, ip
    473c:	e55f      	b.n	41fe <__aeabi_dadd+0x52>
    473e:	2200      	movs	r2, #0
    4740:	2500      	movs	r5, #0
    4742:	e57b      	b.n	423c <__aeabi_dadd+0x90>
    4744:	2b00      	cmp	r3, #0
    4746:	d03b      	beq.n	47c0 <__aeabi_dadd+0x614>
    4748:	0003      	movs	r3, r0
    474a:	4313      	orrs	r3, r2
    474c:	d015      	beq.n	477a <__aeabi_dadd+0x5ce>
    474e:	08ed      	lsrs	r5, r5, #3
    4750:	074b      	lsls	r3, r1, #29
    4752:	432b      	orrs	r3, r5
    4754:	2580      	movs	r5, #128	; 0x80
    4756:	08c9      	lsrs	r1, r1, #3
    4758:	032d      	lsls	r5, r5, #12
    475a:	4229      	tst	r1, r5
    475c:	d007      	beq.n	476e <__aeabi_dadd+0x5c2>
    475e:	08c4      	lsrs	r4, r0, #3
    4760:	422c      	tst	r4, r5
    4762:	d104      	bne.n	476e <__aeabi_dadd+0x5c2>
    4764:	0741      	lsls	r1, r0, #29
    4766:	000b      	movs	r3, r1
    4768:	0021      	movs	r1, r4
    476a:	08d2      	lsrs	r2, r2, #3
    476c:	4313      	orrs	r3, r2
    476e:	00c9      	lsls	r1, r1, #3
    4770:	0f5a      	lsrs	r2, r3, #29
    4772:	4311      	orrs	r1, r2
    4774:	00dd      	lsls	r5, r3, #3
    4776:	4c21      	ldr	r4, [pc, #132]	; (47fc <__aeabi_dadd+0x650>)
    4778:	e541      	b.n	41fe <__aeabi_dadd+0x52>
    477a:	4c20      	ldr	r4, [pc, #128]	; (47fc <__aeabi_dadd+0x650>)
    477c:	e53f      	b.n	41fe <__aeabi_dadd+0x52>
    477e:	2000      	movs	r0, #0
    4780:	e754      	b.n	462c <__aeabi_dadd+0x480>
    4782:	2600      	movs	r6, #0
    4784:	2500      	movs	r5, #0
    4786:	e5d1      	b.n	432c <__aeabi_dadd+0x180>
    4788:	0034      	movs	r4, r6
    478a:	000f      	movs	r7, r1
    478c:	3c20      	subs	r4, #32
    478e:	40e7      	lsrs	r7, r4
    4790:	003c      	movs	r4, r7
    4792:	2e20      	cmp	r6, #32
    4794:	d02b      	beq.n	47ee <__aeabi_dadd+0x642>
    4796:	2740      	movs	r7, #64	; 0x40
    4798:	1bbe      	subs	r6, r7, r6
    479a:	40b1      	lsls	r1, r6
    479c:	430d      	orrs	r5, r1
    479e:	1e69      	subs	r1, r5, #1
    47a0:	418d      	sbcs	r5, r1
    47a2:	2100      	movs	r1, #0
    47a4:	432c      	orrs	r4, r5
    47a6:	e6bc      	b.n	4522 <__aeabi_dadd+0x376>
    47a8:	2180      	movs	r1, #128	; 0x80
    47aa:	2600      	movs	r6, #0
    47ac:	0309      	lsls	r1, r1, #12
    47ae:	4c13      	ldr	r4, [pc, #76]	; (47fc <__aeabi_dadd+0x650>)
    47b0:	2500      	movs	r5, #0
    47b2:	e5bb      	b.n	432c <__aeabi_dadd+0x180>
    47b4:	430d      	orrs	r5, r1
    47b6:	1e69      	subs	r1, r5, #1
    47b8:	418d      	sbcs	r5, r1
    47ba:	2100      	movs	r1, #0
    47bc:	b2ed      	uxtb	r5, r5
    47be:	e769      	b.n	4694 <__aeabi_dadd+0x4e8>
    47c0:	0001      	movs	r1, r0
    47c2:	0015      	movs	r5, r2
    47c4:	4c0d      	ldr	r4, [pc, #52]	; (47fc <__aeabi_dadd+0x650>)
    47c6:	e51a      	b.n	41fe <__aeabi_dadd+0x52>
    47c8:	0001      	movs	r1, r0
    47ca:	0015      	movs	r5, r2
    47cc:	e517      	b.n	41fe <__aeabi_dadd+0x52>
    47ce:	001c      	movs	r4, r3
    47d0:	000f      	movs	r7, r1
    47d2:	3c20      	subs	r4, #32
    47d4:	40e7      	lsrs	r7, r4
    47d6:	003c      	movs	r4, r7
    47d8:	2b20      	cmp	r3, #32
    47da:	d00c      	beq.n	47f6 <__aeabi_dadd+0x64a>
    47dc:	2740      	movs	r7, #64	; 0x40
    47de:	1afb      	subs	r3, r7, r3
    47e0:	4099      	lsls	r1, r3
    47e2:	430d      	orrs	r5, r1
    47e4:	1e69      	subs	r1, r5, #1
    47e6:	418d      	sbcs	r5, r1
    47e8:	2100      	movs	r1, #0
    47ea:	4325      	orrs	r5, r4
    47ec:	e752      	b.n	4694 <__aeabi_dadd+0x4e8>
    47ee:	2100      	movs	r1, #0
    47f0:	e7d4      	b.n	479c <__aeabi_dadd+0x5f0>
    47f2:	001d      	movs	r5, r3
    47f4:	e592      	b.n	431c <__aeabi_dadd+0x170>
    47f6:	2100      	movs	r1, #0
    47f8:	e7f3      	b.n	47e2 <__aeabi_dadd+0x636>
    47fa:	46c0      	nop			; (mov r8, r8)
    47fc:	000007ff 	.word	0x000007ff
    4800:	ff7fffff 	.word	0xff7fffff

00004804 <__aeabi_ddiv>:
    4804:	b5f0      	push	{r4, r5, r6, r7, lr}
    4806:	4656      	mov	r6, sl
    4808:	464d      	mov	r5, r9
    480a:	4644      	mov	r4, r8
    480c:	465f      	mov	r7, fp
    480e:	b4f0      	push	{r4, r5, r6, r7}
    4810:	001d      	movs	r5, r3
    4812:	030e      	lsls	r6, r1, #12
    4814:	004c      	lsls	r4, r1, #1
    4816:	0fcb      	lsrs	r3, r1, #31
    4818:	b087      	sub	sp, #28
    481a:	0007      	movs	r7, r0
    481c:	4692      	mov	sl, r2
    481e:	4681      	mov	r9, r0
    4820:	0b36      	lsrs	r6, r6, #12
    4822:	0d64      	lsrs	r4, r4, #21
    4824:	4698      	mov	r8, r3
    4826:	d06a      	beq.n	48fe <__aeabi_ddiv+0xfa>
    4828:	4b6d      	ldr	r3, [pc, #436]	; (49e0 <__aeabi_ddiv+0x1dc>)
    482a:	429c      	cmp	r4, r3
    482c:	d035      	beq.n	489a <__aeabi_ddiv+0x96>
    482e:	2280      	movs	r2, #128	; 0x80
    4830:	0f43      	lsrs	r3, r0, #29
    4832:	0412      	lsls	r2, r2, #16
    4834:	4313      	orrs	r3, r2
    4836:	00f6      	lsls	r6, r6, #3
    4838:	431e      	orrs	r6, r3
    483a:	00c3      	lsls	r3, r0, #3
    483c:	4699      	mov	r9, r3
    483e:	4b69      	ldr	r3, [pc, #420]	; (49e4 <__aeabi_ddiv+0x1e0>)
    4840:	2700      	movs	r7, #0
    4842:	469c      	mov	ip, r3
    4844:	2300      	movs	r3, #0
    4846:	4464      	add	r4, ip
    4848:	9302      	str	r3, [sp, #8]
    484a:	032b      	lsls	r3, r5, #12
    484c:	0068      	lsls	r0, r5, #1
    484e:	0b1b      	lsrs	r3, r3, #12
    4850:	0fed      	lsrs	r5, r5, #31
    4852:	4651      	mov	r1, sl
    4854:	469b      	mov	fp, r3
    4856:	0d40      	lsrs	r0, r0, #21
    4858:	9500      	str	r5, [sp, #0]
    485a:	d100      	bne.n	485e <__aeabi_ddiv+0x5a>
    485c:	e078      	b.n	4950 <__aeabi_ddiv+0x14c>
    485e:	4b60      	ldr	r3, [pc, #384]	; (49e0 <__aeabi_ddiv+0x1dc>)
    4860:	4298      	cmp	r0, r3
    4862:	d06c      	beq.n	493e <__aeabi_ddiv+0x13a>
    4864:	465b      	mov	r3, fp
    4866:	00da      	lsls	r2, r3, #3
    4868:	0f4b      	lsrs	r3, r1, #29
    486a:	2180      	movs	r1, #128	; 0x80
    486c:	0409      	lsls	r1, r1, #16
    486e:	430b      	orrs	r3, r1
    4870:	4313      	orrs	r3, r2
    4872:	469b      	mov	fp, r3
    4874:	4653      	mov	r3, sl
    4876:	00d9      	lsls	r1, r3, #3
    4878:	4b5a      	ldr	r3, [pc, #360]	; (49e4 <__aeabi_ddiv+0x1e0>)
    487a:	469c      	mov	ip, r3
    487c:	2300      	movs	r3, #0
    487e:	4460      	add	r0, ip
    4880:	4642      	mov	r2, r8
    4882:	1a20      	subs	r0, r4, r0
    4884:	406a      	eors	r2, r5
    4886:	4692      	mov	sl, r2
    4888:	9001      	str	r0, [sp, #4]
    488a:	431f      	orrs	r7, r3
    488c:	2f0f      	cmp	r7, #15
    488e:	d900      	bls.n	4892 <__aeabi_ddiv+0x8e>
    4890:	e0b0      	b.n	49f4 <__aeabi_ddiv+0x1f0>
    4892:	4855      	ldr	r0, [pc, #340]	; (49e8 <__aeabi_ddiv+0x1e4>)
    4894:	00bf      	lsls	r7, r7, #2
    4896:	59c0      	ldr	r0, [r0, r7]
    4898:	4687      	mov	pc, r0
    489a:	4337      	orrs	r7, r6
    489c:	d000      	beq.n	48a0 <__aeabi_ddiv+0x9c>
    489e:	e088      	b.n	49b2 <__aeabi_ddiv+0x1ae>
    48a0:	2300      	movs	r3, #0
    48a2:	4699      	mov	r9, r3
    48a4:	3302      	adds	r3, #2
    48a6:	2708      	movs	r7, #8
    48a8:	2600      	movs	r6, #0
    48aa:	9302      	str	r3, [sp, #8]
    48ac:	e7cd      	b.n	484a <__aeabi_ddiv+0x46>
    48ae:	4643      	mov	r3, r8
    48b0:	46b3      	mov	fp, r6
    48b2:	4649      	mov	r1, r9
    48b4:	9300      	str	r3, [sp, #0]
    48b6:	9b02      	ldr	r3, [sp, #8]
    48b8:	9a00      	ldr	r2, [sp, #0]
    48ba:	4692      	mov	sl, r2
    48bc:	2b02      	cmp	r3, #2
    48be:	d000      	beq.n	48c2 <__aeabi_ddiv+0xbe>
    48c0:	e1bf      	b.n	4c42 <__aeabi_ddiv+0x43e>
    48c2:	2100      	movs	r1, #0
    48c4:	4653      	mov	r3, sl
    48c6:	2201      	movs	r2, #1
    48c8:	2600      	movs	r6, #0
    48ca:	4689      	mov	r9, r1
    48cc:	401a      	ands	r2, r3
    48ce:	4b44      	ldr	r3, [pc, #272]	; (49e0 <__aeabi_ddiv+0x1dc>)
    48d0:	2100      	movs	r1, #0
    48d2:	0336      	lsls	r6, r6, #12
    48d4:	0d0c      	lsrs	r4, r1, #20
    48d6:	0524      	lsls	r4, r4, #20
    48d8:	0b36      	lsrs	r6, r6, #12
    48da:	4326      	orrs	r6, r4
    48dc:	4c43      	ldr	r4, [pc, #268]	; (49ec <__aeabi_ddiv+0x1e8>)
    48de:	051b      	lsls	r3, r3, #20
    48e0:	4026      	ands	r6, r4
    48e2:	431e      	orrs	r6, r3
    48e4:	0076      	lsls	r6, r6, #1
    48e6:	07d2      	lsls	r2, r2, #31
    48e8:	0876      	lsrs	r6, r6, #1
    48ea:	4316      	orrs	r6, r2
    48ec:	4648      	mov	r0, r9
    48ee:	0031      	movs	r1, r6
    48f0:	b007      	add	sp, #28
    48f2:	bc3c      	pop	{r2, r3, r4, r5}
    48f4:	4690      	mov	r8, r2
    48f6:	4699      	mov	r9, r3
    48f8:	46a2      	mov	sl, r4
    48fa:	46ab      	mov	fp, r5
    48fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    48fe:	0033      	movs	r3, r6
    4900:	4303      	orrs	r3, r0
    4902:	d04f      	beq.n	49a4 <__aeabi_ddiv+0x1a0>
    4904:	2e00      	cmp	r6, #0
    4906:	d100      	bne.n	490a <__aeabi_ddiv+0x106>
    4908:	e1bc      	b.n	4c84 <__aeabi_ddiv+0x480>
    490a:	0030      	movs	r0, r6
    490c:	f001 fbe2 	bl	60d4 <__clzsi2>
    4910:	0003      	movs	r3, r0
    4912:	3b0b      	subs	r3, #11
    4914:	2b1c      	cmp	r3, #28
    4916:	dd00      	ble.n	491a <__aeabi_ddiv+0x116>
    4918:	e1ad      	b.n	4c76 <__aeabi_ddiv+0x472>
    491a:	221d      	movs	r2, #29
    491c:	0001      	movs	r1, r0
    491e:	1ad3      	subs	r3, r2, r3
    4920:	3908      	subs	r1, #8
    4922:	003a      	movs	r2, r7
    4924:	408f      	lsls	r7, r1
    4926:	408e      	lsls	r6, r1
    4928:	40da      	lsrs	r2, r3
    492a:	46b9      	mov	r9, r7
    492c:	4316      	orrs	r6, r2
    492e:	4b30      	ldr	r3, [pc, #192]	; (49f0 <__aeabi_ddiv+0x1ec>)
    4930:	2700      	movs	r7, #0
    4932:	469c      	mov	ip, r3
    4934:	2300      	movs	r3, #0
    4936:	4460      	add	r0, ip
    4938:	4244      	negs	r4, r0
    493a:	9302      	str	r3, [sp, #8]
    493c:	e785      	b.n	484a <__aeabi_ddiv+0x46>
    493e:	4653      	mov	r3, sl
    4940:	465a      	mov	r2, fp
    4942:	4313      	orrs	r3, r2
    4944:	d12c      	bne.n	49a0 <__aeabi_ddiv+0x19c>
    4946:	2300      	movs	r3, #0
    4948:	2100      	movs	r1, #0
    494a:	469b      	mov	fp, r3
    494c:	3302      	adds	r3, #2
    494e:	e797      	b.n	4880 <__aeabi_ddiv+0x7c>
    4950:	430b      	orrs	r3, r1
    4952:	d020      	beq.n	4996 <__aeabi_ddiv+0x192>
    4954:	465b      	mov	r3, fp
    4956:	2b00      	cmp	r3, #0
    4958:	d100      	bne.n	495c <__aeabi_ddiv+0x158>
    495a:	e19e      	b.n	4c9a <__aeabi_ddiv+0x496>
    495c:	4658      	mov	r0, fp
    495e:	f001 fbb9 	bl	60d4 <__clzsi2>
    4962:	0003      	movs	r3, r0
    4964:	3b0b      	subs	r3, #11
    4966:	2b1c      	cmp	r3, #28
    4968:	dd00      	ble.n	496c <__aeabi_ddiv+0x168>
    496a:	e18f      	b.n	4c8c <__aeabi_ddiv+0x488>
    496c:	0002      	movs	r2, r0
    496e:	4659      	mov	r1, fp
    4970:	3a08      	subs	r2, #8
    4972:	4091      	lsls	r1, r2
    4974:	468b      	mov	fp, r1
    4976:	211d      	movs	r1, #29
    4978:	1acb      	subs	r3, r1, r3
    497a:	4651      	mov	r1, sl
    497c:	40d9      	lsrs	r1, r3
    497e:	000b      	movs	r3, r1
    4980:	4659      	mov	r1, fp
    4982:	430b      	orrs	r3, r1
    4984:	4651      	mov	r1, sl
    4986:	469b      	mov	fp, r3
    4988:	4091      	lsls	r1, r2
    498a:	4b19      	ldr	r3, [pc, #100]	; (49f0 <__aeabi_ddiv+0x1ec>)
    498c:	469c      	mov	ip, r3
    498e:	4460      	add	r0, ip
    4990:	4240      	negs	r0, r0
    4992:	2300      	movs	r3, #0
    4994:	e774      	b.n	4880 <__aeabi_ddiv+0x7c>
    4996:	2300      	movs	r3, #0
    4998:	2100      	movs	r1, #0
    499a:	469b      	mov	fp, r3
    499c:	3301      	adds	r3, #1
    499e:	e76f      	b.n	4880 <__aeabi_ddiv+0x7c>
    49a0:	2303      	movs	r3, #3
    49a2:	e76d      	b.n	4880 <__aeabi_ddiv+0x7c>
    49a4:	2300      	movs	r3, #0
    49a6:	4699      	mov	r9, r3
    49a8:	3301      	adds	r3, #1
    49aa:	2704      	movs	r7, #4
    49ac:	2600      	movs	r6, #0
    49ae:	9302      	str	r3, [sp, #8]
    49b0:	e74b      	b.n	484a <__aeabi_ddiv+0x46>
    49b2:	2303      	movs	r3, #3
    49b4:	270c      	movs	r7, #12
    49b6:	9302      	str	r3, [sp, #8]
    49b8:	e747      	b.n	484a <__aeabi_ddiv+0x46>
    49ba:	2201      	movs	r2, #1
    49bc:	1ad5      	subs	r5, r2, r3
    49be:	2d38      	cmp	r5, #56	; 0x38
    49c0:	dc00      	bgt.n	49c4 <__aeabi_ddiv+0x1c0>
    49c2:	e1b0      	b.n	4d26 <__aeabi_ddiv+0x522>
    49c4:	4653      	mov	r3, sl
    49c6:	401a      	ands	r2, r3
    49c8:	2100      	movs	r1, #0
    49ca:	2300      	movs	r3, #0
    49cc:	2600      	movs	r6, #0
    49ce:	4689      	mov	r9, r1
    49d0:	e77e      	b.n	48d0 <__aeabi_ddiv+0xcc>
    49d2:	2300      	movs	r3, #0
    49d4:	2680      	movs	r6, #128	; 0x80
    49d6:	4699      	mov	r9, r3
    49d8:	2200      	movs	r2, #0
    49da:	0336      	lsls	r6, r6, #12
    49dc:	4b00      	ldr	r3, [pc, #0]	; (49e0 <__aeabi_ddiv+0x1dc>)
    49de:	e777      	b.n	48d0 <__aeabi_ddiv+0xcc>
    49e0:	000007ff 	.word	0x000007ff
    49e4:	fffffc01 	.word	0xfffffc01
    49e8:	00006470 	.word	0x00006470
    49ec:	800fffff 	.word	0x800fffff
    49f0:	000003f3 	.word	0x000003f3
    49f4:	455e      	cmp	r6, fp
    49f6:	d900      	bls.n	49fa <__aeabi_ddiv+0x1f6>
    49f8:	e172      	b.n	4ce0 <__aeabi_ddiv+0x4dc>
    49fa:	d100      	bne.n	49fe <__aeabi_ddiv+0x1fa>
    49fc:	e16d      	b.n	4cda <__aeabi_ddiv+0x4d6>
    49fe:	9b01      	ldr	r3, [sp, #4]
    4a00:	464d      	mov	r5, r9
    4a02:	3b01      	subs	r3, #1
    4a04:	9301      	str	r3, [sp, #4]
    4a06:	2300      	movs	r3, #0
    4a08:	0034      	movs	r4, r6
    4a0a:	9302      	str	r3, [sp, #8]
    4a0c:	465b      	mov	r3, fp
    4a0e:	021e      	lsls	r6, r3, #8
    4a10:	0e0b      	lsrs	r3, r1, #24
    4a12:	431e      	orrs	r6, r3
    4a14:	020b      	lsls	r3, r1, #8
    4a16:	9303      	str	r3, [sp, #12]
    4a18:	0c33      	lsrs	r3, r6, #16
    4a1a:	4699      	mov	r9, r3
    4a1c:	0433      	lsls	r3, r6, #16
    4a1e:	0c1b      	lsrs	r3, r3, #16
    4a20:	4649      	mov	r1, r9
    4a22:	0020      	movs	r0, r4
    4a24:	9300      	str	r3, [sp, #0]
    4a26:	f001 fa8f 	bl	5f48 <__aeabi_uidiv>
    4a2a:	9b00      	ldr	r3, [sp, #0]
    4a2c:	0037      	movs	r7, r6
    4a2e:	4343      	muls	r3, r0
    4a30:	0006      	movs	r6, r0
    4a32:	4649      	mov	r1, r9
    4a34:	0020      	movs	r0, r4
    4a36:	4698      	mov	r8, r3
    4a38:	f001 fb0c 	bl	6054 <__aeabi_uidivmod>
    4a3c:	0c2c      	lsrs	r4, r5, #16
    4a3e:	0409      	lsls	r1, r1, #16
    4a40:	430c      	orrs	r4, r1
    4a42:	45a0      	cmp	r8, r4
    4a44:	d909      	bls.n	4a5a <__aeabi_ddiv+0x256>
    4a46:	19e4      	adds	r4, r4, r7
    4a48:	1e73      	subs	r3, r6, #1
    4a4a:	42a7      	cmp	r7, r4
    4a4c:	d900      	bls.n	4a50 <__aeabi_ddiv+0x24c>
    4a4e:	e15c      	b.n	4d0a <__aeabi_ddiv+0x506>
    4a50:	45a0      	cmp	r8, r4
    4a52:	d800      	bhi.n	4a56 <__aeabi_ddiv+0x252>
    4a54:	e159      	b.n	4d0a <__aeabi_ddiv+0x506>
    4a56:	3e02      	subs	r6, #2
    4a58:	19e4      	adds	r4, r4, r7
    4a5a:	4643      	mov	r3, r8
    4a5c:	1ae4      	subs	r4, r4, r3
    4a5e:	4649      	mov	r1, r9
    4a60:	0020      	movs	r0, r4
    4a62:	f001 fa71 	bl	5f48 <__aeabi_uidiv>
    4a66:	0003      	movs	r3, r0
    4a68:	9a00      	ldr	r2, [sp, #0]
    4a6a:	4680      	mov	r8, r0
    4a6c:	4353      	muls	r3, r2
    4a6e:	4649      	mov	r1, r9
    4a70:	0020      	movs	r0, r4
    4a72:	469b      	mov	fp, r3
    4a74:	f001 faee 	bl	6054 <__aeabi_uidivmod>
    4a78:	042a      	lsls	r2, r5, #16
    4a7a:	0409      	lsls	r1, r1, #16
    4a7c:	0c12      	lsrs	r2, r2, #16
    4a7e:	430a      	orrs	r2, r1
    4a80:	4593      	cmp	fp, r2
    4a82:	d90d      	bls.n	4aa0 <__aeabi_ddiv+0x29c>
    4a84:	4643      	mov	r3, r8
    4a86:	19d2      	adds	r2, r2, r7
    4a88:	3b01      	subs	r3, #1
    4a8a:	4297      	cmp	r7, r2
    4a8c:	d900      	bls.n	4a90 <__aeabi_ddiv+0x28c>
    4a8e:	e13a      	b.n	4d06 <__aeabi_ddiv+0x502>
    4a90:	4593      	cmp	fp, r2
    4a92:	d800      	bhi.n	4a96 <__aeabi_ddiv+0x292>
    4a94:	e137      	b.n	4d06 <__aeabi_ddiv+0x502>
    4a96:	2302      	movs	r3, #2
    4a98:	425b      	negs	r3, r3
    4a9a:	469c      	mov	ip, r3
    4a9c:	19d2      	adds	r2, r2, r7
    4a9e:	44e0      	add	r8, ip
    4aa0:	465b      	mov	r3, fp
    4aa2:	1ad2      	subs	r2, r2, r3
    4aa4:	4643      	mov	r3, r8
    4aa6:	0436      	lsls	r6, r6, #16
    4aa8:	4333      	orrs	r3, r6
    4aaa:	469b      	mov	fp, r3
    4aac:	9903      	ldr	r1, [sp, #12]
    4aae:	0c18      	lsrs	r0, r3, #16
    4ab0:	0c0b      	lsrs	r3, r1, #16
    4ab2:	001d      	movs	r5, r3
    4ab4:	9305      	str	r3, [sp, #20]
    4ab6:	0409      	lsls	r1, r1, #16
    4ab8:	465b      	mov	r3, fp
    4aba:	0c09      	lsrs	r1, r1, #16
    4abc:	000c      	movs	r4, r1
    4abe:	041b      	lsls	r3, r3, #16
    4ac0:	0c1b      	lsrs	r3, r3, #16
    4ac2:	4344      	muls	r4, r0
    4ac4:	9104      	str	r1, [sp, #16]
    4ac6:	4359      	muls	r1, r3
    4ac8:	436b      	muls	r3, r5
    4aca:	4368      	muls	r0, r5
    4acc:	191b      	adds	r3, r3, r4
    4ace:	0c0d      	lsrs	r5, r1, #16
    4ad0:	18eb      	adds	r3, r5, r3
    4ad2:	429c      	cmp	r4, r3
    4ad4:	d903      	bls.n	4ade <__aeabi_ddiv+0x2da>
    4ad6:	2480      	movs	r4, #128	; 0x80
    4ad8:	0264      	lsls	r4, r4, #9
    4ada:	46a4      	mov	ip, r4
    4adc:	4460      	add	r0, ip
    4ade:	0c1c      	lsrs	r4, r3, #16
    4ae0:	0409      	lsls	r1, r1, #16
    4ae2:	041b      	lsls	r3, r3, #16
    4ae4:	0c09      	lsrs	r1, r1, #16
    4ae6:	1820      	adds	r0, r4, r0
    4ae8:	185d      	adds	r5, r3, r1
    4aea:	4282      	cmp	r2, r0
    4aec:	d200      	bcs.n	4af0 <__aeabi_ddiv+0x2ec>
    4aee:	e0de      	b.n	4cae <__aeabi_ddiv+0x4aa>
    4af0:	d100      	bne.n	4af4 <__aeabi_ddiv+0x2f0>
    4af2:	e0d7      	b.n	4ca4 <__aeabi_ddiv+0x4a0>
    4af4:	1a16      	subs	r6, r2, r0
    4af6:	9b02      	ldr	r3, [sp, #8]
    4af8:	469c      	mov	ip, r3
    4afa:	1b5d      	subs	r5, r3, r5
    4afc:	45ac      	cmp	ip, r5
    4afe:	419b      	sbcs	r3, r3
    4b00:	425b      	negs	r3, r3
    4b02:	1af6      	subs	r6, r6, r3
    4b04:	42b7      	cmp	r7, r6
    4b06:	d100      	bne.n	4b0a <__aeabi_ddiv+0x306>
    4b08:	e106      	b.n	4d18 <__aeabi_ddiv+0x514>
    4b0a:	4649      	mov	r1, r9
    4b0c:	0030      	movs	r0, r6
    4b0e:	f001 fa1b 	bl	5f48 <__aeabi_uidiv>
    4b12:	9b00      	ldr	r3, [sp, #0]
    4b14:	0004      	movs	r4, r0
    4b16:	4343      	muls	r3, r0
    4b18:	4649      	mov	r1, r9
    4b1a:	0030      	movs	r0, r6
    4b1c:	4698      	mov	r8, r3
    4b1e:	f001 fa99 	bl	6054 <__aeabi_uidivmod>
    4b22:	0c2e      	lsrs	r6, r5, #16
    4b24:	0409      	lsls	r1, r1, #16
    4b26:	430e      	orrs	r6, r1
    4b28:	45b0      	cmp	r8, r6
    4b2a:	d909      	bls.n	4b40 <__aeabi_ddiv+0x33c>
    4b2c:	19f6      	adds	r6, r6, r7
    4b2e:	1e63      	subs	r3, r4, #1
    4b30:	42b7      	cmp	r7, r6
    4b32:	d900      	bls.n	4b36 <__aeabi_ddiv+0x332>
    4b34:	e0f3      	b.n	4d1e <__aeabi_ddiv+0x51a>
    4b36:	45b0      	cmp	r8, r6
    4b38:	d800      	bhi.n	4b3c <__aeabi_ddiv+0x338>
    4b3a:	e0f0      	b.n	4d1e <__aeabi_ddiv+0x51a>
    4b3c:	3c02      	subs	r4, #2
    4b3e:	19f6      	adds	r6, r6, r7
    4b40:	4643      	mov	r3, r8
    4b42:	1af3      	subs	r3, r6, r3
    4b44:	4649      	mov	r1, r9
    4b46:	0018      	movs	r0, r3
    4b48:	9302      	str	r3, [sp, #8]
    4b4a:	f001 f9fd 	bl	5f48 <__aeabi_uidiv>
    4b4e:	9b00      	ldr	r3, [sp, #0]
    4b50:	0006      	movs	r6, r0
    4b52:	4343      	muls	r3, r0
    4b54:	4649      	mov	r1, r9
    4b56:	9802      	ldr	r0, [sp, #8]
    4b58:	4698      	mov	r8, r3
    4b5a:	f001 fa7b 	bl	6054 <__aeabi_uidivmod>
    4b5e:	042d      	lsls	r5, r5, #16
    4b60:	0409      	lsls	r1, r1, #16
    4b62:	0c2d      	lsrs	r5, r5, #16
    4b64:	430d      	orrs	r5, r1
    4b66:	45a8      	cmp	r8, r5
    4b68:	d909      	bls.n	4b7e <__aeabi_ddiv+0x37a>
    4b6a:	19ed      	adds	r5, r5, r7
    4b6c:	1e73      	subs	r3, r6, #1
    4b6e:	42af      	cmp	r7, r5
    4b70:	d900      	bls.n	4b74 <__aeabi_ddiv+0x370>
    4b72:	e0d6      	b.n	4d22 <__aeabi_ddiv+0x51e>
    4b74:	45a8      	cmp	r8, r5
    4b76:	d800      	bhi.n	4b7a <__aeabi_ddiv+0x376>
    4b78:	e0d3      	b.n	4d22 <__aeabi_ddiv+0x51e>
    4b7a:	3e02      	subs	r6, #2
    4b7c:	19ed      	adds	r5, r5, r7
    4b7e:	0424      	lsls	r4, r4, #16
    4b80:	0021      	movs	r1, r4
    4b82:	4643      	mov	r3, r8
    4b84:	4331      	orrs	r1, r6
    4b86:	9e04      	ldr	r6, [sp, #16]
    4b88:	9a05      	ldr	r2, [sp, #20]
    4b8a:	0030      	movs	r0, r6
    4b8c:	1aed      	subs	r5, r5, r3
    4b8e:	040b      	lsls	r3, r1, #16
    4b90:	0c0c      	lsrs	r4, r1, #16
    4b92:	0c1b      	lsrs	r3, r3, #16
    4b94:	4358      	muls	r0, r3
    4b96:	4366      	muls	r6, r4
    4b98:	4353      	muls	r3, r2
    4b9a:	4354      	muls	r4, r2
    4b9c:	199a      	adds	r2, r3, r6
    4b9e:	0c03      	lsrs	r3, r0, #16
    4ba0:	189b      	adds	r3, r3, r2
    4ba2:	429e      	cmp	r6, r3
    4ba4:	d903      	bls.n	4bae <__aeabi_ddiv+0x3aa>
    4ba6:	2280      	movs	r2, #128	; 0x80
    4ba8:	0252      	lsls	r2, r2, #9
    4baa:	4694      	mov	ip, r2
    4bac:	4464      	add	r4, ip
    4bae:	0c1a      	lsrs	r2, r3, #16
    4bb0:	0400      	lsls	r0, r0, #16
    4bb2:	041b      	lsls	r3, r3, #16
    4bb4:	0c00      	lsrs	r0, r0, #16
    4bb6:	1914      	adds	r4, r2, r4
    4bb8:	181b      	adds	r3, r3, r0
    4bba:	42a5      	cmp	r5, r4
    4bbc:	d350      	bcc.n	4c60 <__aeabi_ddiv+0x45c>
    4bbe:	d04d      	beq.n	4c5c <__aeabi_ddiv+0x458>
    4bc0:	2301      	movs	r3, #1
    4bc2:	4319      	orrs	r1, r3
    4bc4:	4a96      	ldr	r2, [pc, #600]	; (4e20 <__aeabi_ddiv+0x61c>)
    4bc6:	9b01      	ldr	r3, [sp, #4]
    4bc8:	4694      	mov	ip, r2
    4bca:	4463      	add	r3, ip
    4bcc:	2b00      	cmp	r3, #0
    4bce:	dc00      	bgt.n	4bd2 <__aeabi_ddiv+0x3ce>
    4bd0:	e6f3      	b.n	49ba <__aeabi_ddiv+0x1b6>
    4bd2:	074a      	lsls	r2, r1, #29
    4bd4:	d009      	beq.n	4bea <__aeabi_ddiv+0x3e6>
    4bd6:	220f      	movs	r2, #15
    4bd8:	400a      	ands	r2, r1
    4bda:	2a04      	cmp	r2, #4
    4bdc:	d005      	beq.n	4bea <__aeabi_ddiv+0x3e6>
    4bde:	1d0a      	adds	r2, r1, #4
    4be0:	428a      	cmp	r2, r1
    4be2:	4189      	sbcs	r1, r1
    4be4:	4249      	negs	r1, r1
    4be6:	448b      	add	fp, r1
    4be8:	0011      	movs	r1, r2
    4bea:	465a      	mov	r2, fp
    4bec:	01d2      	lsls	r2, r2, #7
    4bee:	d508      	bpl.n	4c02 <__aeabi_ddiv+0x3fe>
    4bf0:	465a      	mov	r2, fp
    4bf2:	4b8c      	ldr	r3, [pc, #560]	; (4e24 <__aeabi_ddiv+0x620>)
    4bf4:	401a      	ands	r2, r3
    4bf6:	4693      	mov	fp, r2
    4bf8:	2280      	movs	r2, #128	; 0x80
    4bfa:	00d2      	lsls	r2, r2, #3
    4bfc:	4694      	mov	ip, r2
    4bfe:	9b01      	ldr	r3, [sp, #4]
    4c00:	4463      	add	r3, ip
    4c02:	4a89      	ldr	r2, [pc, #548]	; (4e28 <__aeabi_ddiv+0x624>)
    4c04:	4293      	cmp	r3, r2
    4c06:	dd00      	ble.n	4c0a <__aeabi_ddiv+0x406>
    4c08:	e65b      	b.n	48c2 <__aeabi_ddiv+0xbe>
    4c0a:	465a      	mov	r2, fp
    4c0c:	08c9      	lsrs	r1, r1, #3
    4c0e:	0750      	lsls	r0, r2, #29
    4c10:	4308      	orrs	r0, r1
    4c12:	0256      	lsls	r6, r2, #9
    4c14:	4651      	mov	r1, sl
    4c16:	2201      	movs	r2, #1
    4c18:	055b      	lsls	r3, r3, #21
    4c1a:	4681      	mov	r9, r0
    4c1c:	0b36      	lsrs	r6, r6, #12
    4c1e:	0d5b      	lsrs	r3, r3, #21
    4c20:	400a      	ands	r2, r1
    4c22:	e655      	b.n	48d0 <__aeabi_ddiv+0xcc>
    4c24:	2380      	movs	r3, #128	; 0x80
    4c26:	031b      	lsls	r3, r3, #12
    4c28:	421e      	tst	r6, r3
    4c2a:	d011      	beq.n	4c50 <__aeabi_ddiv+0x44c>
    4c2c:	465a      	mov	r2, fp
    4c2e:	421a      	tst	r2, r3
    4c30:	d10e      	bne.n	4c50 <__aeabi_ddiv+0x44c>
    4c32:	465e      	mov	r6, fp
    4c34:	431e      	orrs	r6, r3
    4c36:	0336      	lsls	r6, r6, #12
    4c38:	0b36      	lsrs	r6, r6, #12
    4c3a:	002a      	movs	r2, r5
    4c3c:	4689      	mov	r9, r1
    4c3e:	4b7b      	ldr	r3, [pc, #492]	; (4e2c <__aeabi_ddiv+0x628>)
    4c40:	e646      	b.n	48d0 <__aeabi_ddiv+0xcc>
    4c42:	2b03      	cmp	r3, #3
    4c44:	d100      	bne.n	4c48 <__aeabi_ddiv+0x444>
    4c46:	e0e1      	b.n	4e0c <__aeabi_ddiv+0x608>
    4c48:	2b01      	cmp	r3, #1
    4c4a:	d1bb      	bne.n	4bc4 <__aeabi_ddiv+0x3c0>
    4c4c:	401a      	ands	r2, r3
    4c4e:	e6bb      	b.n	49c8 <__aeabi_ddiv+0x1c4>
    4c50:	431e      	orrs	r6, r3
    4c52:	0336      	lsls	r6, r6, #12
    4c54:	0b36      	lsrs	r6, r6, #12
    4c56:	4642      	mov	r2, r8
    4c58:	4b74      	ldr	r3, [pc, #464]	; (4e2c <__aeabi_ddiv+0x628>)
    4c5a:	e639      	b.n	48d0 <__aeabi_ddiv+0xcc>
    4c5c:	2b00      	cmp	r3, #0
    4c5e:	d0b1      	beq.n	4bc4 <__aeabi_ddiv+0x3c0>
    4c60:	197d      	adds	r5, r7, r5
    4c62:	1e4a      	subs	r2, r1, #1
    4c64:	42af      	cmp	r7, r5
    4c66:	d952      	bls.n	4d0e <__aeabi_ddiv+0x50a>
    4c68:	0011      	movs	r1, r2
    4c6a:	42a5      	cmp	r5, r4
    4c6c:	d1a8      	bne.n	4bc0 <__aeabi_ddiv+0x3bc>
    4c6e:	9a03      	ldr	r2, [sp, #12]
    4c70:	429a      	cmp	r2, r3
    4c72:	d1a5      	bne.n	4bc0 <__aeabi_ddiv+0x3bc>
    4c74:	e7a6      	b.n	4bc4 <__aeabi_ddiv+0x3c0>
    4c76:	0003      	movs	r3, r0
    4c78:	003e      	movs	r6, r7
    4c7a:	3b28      	subs	r3, #40	; 0x28
    4c7c:	409e      	lsls	r6, r3
    4c7e:	2300      	movs	r3, #0
    4c80:	4699      	mov	r9, r3
    4c82:	e654      	b.n	492e <__aeabi_ddiv+0x12a>
    4c84:	f001 fa26 	bl	60d4 <__clzsi2>
    4c88:	3020      	adds	r0, #32
    4c8a:	e641      	b.n	4910 <__aeabi_ddiv+0x10c>
    4c8c:	0003      	movs	r3, r0
    4c8e:	4652      	mov	r2, sl
    4c90:	3b28      	subs	r3, #40	; 0x28
    4c92:	409a      	lsls	r2, r3
    4c94:	2100      	movs	r1, #0
    4c96:	4693      	mov	fp, r2
    4c98:	e677      	b.n	498a <__aeabi_ddiv+0x186>
    4c9a:	4650      	mov	r0, sl
    4c9c:	f001 fa1a 	bl	60d4 <__clzsi2>
    4ca0:	3020      	adds	r0, #32
    4ca2:	e65e      	b.n	4962 <__aeabi_ddiv+0x15e>
    4ca4:	9b02      	ldr	r3, [sp, #8]
    4ca6:	2600      	movs	r6, #0
    4ca8:	42ab      	cmp	r3, r5
    4caa:	d300      	bcc.n	4cae <__aeabi_ddiv+0x4aa>
    4cac:	e723      	b.n	4af6 <__aeabi_ddiv+0x2f2>
    4cae:	9e03      	ldr	r6, [sp, #12]
    4cb0:	9902      	ldr	r1, [sp, #8]
    4cb2:	46b4      	mov	ip, r6
    4cb4:	4461      	add	r1, ip
    4cb6:	4688      	mov	r8, r1
    4cb8:	45b0      	cmp	r8, r6
    4cba:	41b6      	sbcs	r6, r6
    4cbc:	465b      	mov	r3, fp
    4cbe:	4276      	negs	r6, r6
    4cc0:	19f6      	adds	r6, r6, r7
    4cc2:	18b2      	adds	r2, r6, r2
    4cc4:	3b01      	subs	r3, #1
    4cc6:	9102      	str	r1, [sp, #8]
    4cc8:	4297      	cmp	r7, r2
    4cca:	d213      	bcs.n	4cf4 <__aeabi_ddiv+0x4f0>
    4ccc:	4290      	cmp	r0, r2
    4cce:	d84f      	bhi.n	4d70 <__aeabi_ddiv+0x56c>
    4cd0:	d100      	bne.n	4cd4 <__aeabi_ddiv+0x4d0>
    4cd2:	e08e      	b.n	4df2 <__aeabi_ddiv+0x5ee>
    4cd4:	1a16      	subs	r6, r2, r0
    4cd6:	469b      	mov	fp, r3
    4cd8:	e70d      	b.n	4af6 <__aeabi_ddiv+0x2f2>
    4cda:	4589      	cmp	r9, r1
    4cdc:	d200      	bcs.n	4ce0 <__aeabi_ddiv+0x4dc>
    4cde:	e68e      	b.n	49fe <__aeabi_ddiv+0x1fa>
    4ce0:	0874      	lsrs	r4, r6, #1
    4ce2:	464b      	mov	r3, r9
    4ce4:	07f6      	lsls	r6, r6, #31
    4ce6:	0035      	movs	r5, r6
    4ce8:	085b      	lsrs	r3, r3, #1
    4cea:	431d      	orrs	r5, r3
    4cec:	464b      	mov	r3, r9
    4cee:	07db      	lsls	r3, r3, #31
    4cf0:	9302      	str	r3, [sp, #8]
    4cf2:	e68b      	b.n	4a0c <__aeabi_ddiv+0x208>
    4cf4:	4297      	cmp	r7, r2
    4cf6:	d1ed      	bne.n	4cd4 <__aeabi_ddiv+0x4d0>
    4cf8:	9903      	ldr	r1, [sp, #12]
    4cfa:	9c02      	ldr	r4, [sp, #8]
    4cfc:	42a1      	cmp	r1, r4
    4cfe:	d9e5      	bls.n	4ccc <__aeabi_ddiv+0x4c8>
    4d00:	1a3e      	subs	r6, r7, r0
    4d02:	469b      	mov	fp, r3
    4d04:	e6f7      	b.n	4af6 <__aeabi_ddiv+0x2f2>
    4d06:	4698      	mov	r8, r3
    4d08:	e6ca      	b.n	4aa0 <__aeabi_ddiv+0x29c>
    4d0a:	001e      	movs	r6, r3
    4d0c:	e6a5      	b.n	4a5a <__aeabi_ddiv+0x256>
    4d0e:	42ac      	cmp	r4, r5
    4d10:	d83e      	bhi.n	4d90 <__aeabi_ddiv+0x58c>
    4d12:	d074      	beq.n	4dfe <__aeabi_ddiv+0x5fa>
    4d14:	0011      	movs	r1, r2
    4d16:	e753      	b.n	4bc0 <__aeabi_ddiv+0x3bc>
    4d18:	2101      	movs	r1, #1
    4d1a:	4249      	negs	r1, r1
    4d1c:	e752      	b.n	4bc4 <__aeabi_ddiv+0x3c0>
    4d1e:	001c      	movs	r4, r3
    4d20:	e70e      	b.n	4b40 <__aeabi_ddiv+0x33c>
    4d22:	001e      	movs	r6, r3
    4d24:	e72b      	b.n	4b7e <__aeabi_ddiv+0x37a>
    4d26:	2d1f      	cmp	r5, #31
    4d28:	dc3c      	bgt.n	4da4 <__aeabi_ddiv+0x5a0>
    4d2a:	2320      	movs	r3, #32
    4d2c:	000a      	movs	r2, r1
    4d2e:	4658      	mov	r0, fp
    4d30:	1b5b      	subs	r3, r3, r5
    4d32:	4098      	lsls	r0, r3
    4d34:	40ea      	lsrs	r2, r5
    4d36:	4099      	lsls	r1, r3
    4d38:	4302      	orrs	r2, r0
    4d3a:	1e48      	subs	r0, r1, #1
    4d3c:	4181      	sbcs	r1, r0
    4d3e:	465e      	mov	r6, fp
    4d40:	4311      	orrs	r1, r2
    4d42:	40ee      	lsrs	r6, r5
    4d44:	074b      	lsls	r3, r1, #29
    4d46:	d009      	beq.n	4d5c <__aeabi_ddiv+0x558>
    4d48:	230f      	movs	r3, #15
    4d4a:	400b      	ands	r3, r1
    4d4c:	2b04      	cmp	r3, #4
    4d4e:	d005      	beq.n	4d5c <__aeabi_ddiv+0x558>
    4d50:	000b      	movs	r3, r1
    4d52:	1d19      	adds	r1, r3, #4
    4d54:	4299      	cmp	r1, r3
    4d56:	419b      	sbcs	r3, r3
    4d58:	425b      	negs	r3, r3
    4d5a:	18f6      	adds	r6, r6, r3
    4d5c:	0233      	lsls	r3, r6, #8
    4d5e:	d53c      	bpl.n	4dda <__aeabi_ddiv+0x5d6>
    4d60:	4653      	mov	r3, sl
    4d62:	2201      	movs	r2, #1
    4d64:	2100      	movs	r1, #0
    4d66:	401a      	ands	r2, r3
    4d68:	2600      	movs	r6, #0
    4d6a:	2301      	movs	r3, #1
    4d6c:	4689      	mov	r9, r1
    4d6e:	e5af      	b.n	48d0 <__aeabi_ddiv+0xcc>
    4d70:	2302      	movs	r3, #2
    4d72:	425b      	negs	r3, r3
    4d74:	469c      	mov	ip, r3
    4d76:	9c03      	ldr	r4, [sp, #12]
    4d78:	44e3      	add	fp, ip
    4d7a:	46a4      	mov	ip, r4
    4d7c:	9b02      	ldr	r3, [sp, #8]
    4d7e:	4463      	add	r3, ip
    4d80:	4698      	mov	r8, r3
    4d82:	45a0      	cmp	r8, r4
    4d84:	41b6      	sbcs	r6, r6
    4d86:	4276      	negs	r6, r6
    4d88:	19f6      	adds	r6, r6, r7
    4d8a:	9302      	str	r3, [sp, #8]
    4d8c:	18b2      	adds	r2, r6, r2
    4d8e:	e6b1      	b.n	4af4 <__aeabi_ddiv+0x2f0>
    4d90:	9803      	ldr	r0, [sp, #12]
    4d92:	1e8a      	subs	r2, r1, #2
    4d94:	0041      	lsls	r1, r0, #1
    4d96:	4281      	cmp	r1, r0
    4d98:	41b6      	sbcs	r6, r6
    4d9a:	4276      	negs	r6, r6
    4d9c:	19f6      	adds	r6, r6, r7
    4d9e:	19ad      	adds	r5, r5, r6
    4da0:	9103      	str	r1, [sp, #12]
    4da2:	e761      	b.n	4c68 <__aeabi_ddiv+0x464>
    4da4:	221f      	movs	r2, #31
    4da6:	4252      	negs	r2, r2
    4da8:	1ad3      	subs	r3, r2, r3
    4daa:	465a      	mov	r2, fp
    4dac:	40da      	lsrs	r2, r3
    4dae:	0013      	movs	r3, r2
    4db0:	2d20      	cmp	r5, #32
    4db2:	d029      	beq.n	4e08 <__aeabi_ddiv+0x604>
    4db4:	2240      	movs	r2, #64	; 0x40
    4db6:	4658      	mov	r0, fp
    4db8:	1b55      	subs	r5, r2, r5
    4dba:	40a8      	lsls	r0, r5
    4dbc:	4301      	orrs	r1, r0
    4dbe:	1e48      	subs	r0, r1, #1
    4dc0:	4181      	sbcs	r1, r0
    4dc2:	2007      	movs	r0, #7
    4dc4:	430b      	orrs	r3, r1
    4dc6:	4018      	ands	r0, r3
    4dc8:	2600      	movs	r6, #0
    4dca:	2800      	cmp	r0, #0
    4dcc:	d009      	beq.n	4de2 <__aeabi_ddiv+0x5de>
    4dce:	220f      	movs	r2, #15
    4dd0:	2600      	movs	r6, #0
    4dd2:	401a      	ands	r2, r3
    4dd4:	0019      	movs	r1, r3
    4dd6:	2a04      	cmp	r2, #4
    4dd8:	d1bb      	bne.n	4d52 <__aeabi_ddiv+0x54e>
    4dda:	000b      	movs	r3, r1
    4ddc:	0770      	lsls	r0, r6, #29
    4dde:	0276      	lsls	r6, r6, #9
    4de0:	0b36      	lsrs	r6, r6, #12
    4de2:	08db      	lsrs	r3, r3, #3
    4de4:	4303      	orrs	r3, r0
    4de6:	4699      	mov	r9, r3
    4de8:	2201      	movs	r2, #1
    4dea:	4653      	mov	r3, sl
    4dec:	401a      	ands	r2, r3
    4dee:	2300      	movs	r3, #0
    4df0:	e56e      	b.n	48d0 <__aeabi_ddiv+0xcc>
    4df2:	9902      	ldr	r1, [sp, #8]
    4df4:	428d      	cmp	r5, r1
    4df6:	d8bb      	bhi.n	4d70 <__aeabi_ddiv+0x56c>
    4df8:	469b      	mov	fp, r3
    4dfa:	2600      	movs	r6, #0
    4dfc:	e67b      	b.n	4af6 <__aeabi_ddiv+0x2f2>
    4dfe:	9803      	ldr	r0, [sp, #12]
    4e00:	4298      	cmp	r0, r3
    4e02:	d3c5      	bcc.n	4d90 <__aeabi_ddiv+0x58c>
    4e04:	0011      	movs	r1, r2
    4e06:	e732      	b.n	4c6e <__aeabi_ddiv+0x46a>
    4e08:	2000      	movs	r0, #0
    4e0a:	e7d7      	b.n	4dbc <__aeabi_ddiv+0x5b8>
    4e0c:	2680      	movs	r6, #128	; 0x80
    4e0e:	465b      	mov	r3, fp
    4e10:	0336      	lsls	r6, r6, #12
    4e12:	431e      	orrs	r6, r3
    4e14:	0336      	lsls	r6, r6, #12
    4e16:	0b36      	lsrs	r6, r6, #12
    4e18:	9a00      	ldr	r2, [sp, #0]
    4e1a:	4689      	mov	r9, r1
    4e1c:	4b03      	ldr	r3, [pc, #12]	; (4e2c <__aeabi_ddiv+0x628>)
    4e1e:	e557      	b.n	48d0 <__aeabi_ddiv+0xcc>
    4e20:	000003ff 	.word	0x000003ff
    4e24:	feffffff 	.word	0xfeffffff
    4e28:	000007fe 	.word	0x000007fe
    4e2c:	000007ff 	.word	0x000007ff

00004e30 <__eqdf2>:
    4e30:	b5f0      	push	{r4, r5, r6, r7, lr}
    4e32:	465f      	mov	r7, fp
    4e34:	4656      	mov	r6, sl
    4e36:	464d      	mov	r5, r9
    4e38:	4644      	mov	r4, r8
    4e3a:	b4f0      	push	{r4, r5, r6, r7}
    4e3c:	031f      	lsls	r7, r3, #12
    4e3e:	005c      	lsls	r4, r3, #1
    4e40:	0fdb      	lsrs	r3, r3, #31
    4e42:	469a      	mov	sl, r3
    4e44:	4b19      	ldr	r3, [pc, #100]	; (4eac <__eqdf2+0x7c>)
    4e46:	030e      	lsls	r6, r1, #12
    4e48:	004d      	lsls	r5, r1, #1
    4e4a:	0fc9      	lsrs	r1, r1, #31
    4e4c:	4680      	mov	r8, r0
    4e4e:	0b36      	lsrs	r6, r6, #12
    4e50:	0d6d      	lsrs	r5, r5, #21
    4e52:	468b      	mov	fp, r1
    4e54:	4691      	mov	r9, r2
    4e56:	0b3f      	lsrs	r7, r7, #12
    4e58:	0d64      	lsrs	r4, r4, #21
    4e5a:	429d      	cmp	r5, r3
    4e5c:	d019      	beq.n	4e92 <__eqdf2+0x62>
    4e5e:	4b13      	ldr	r3, [pc, #76]	; (4eac <__eqdf2+0x7c>)
    4e60:	429c      	cmp	r4, r3
    4e62:	d01b      	beq.n	4e9c <__eqdf2+0x6c>
    4e64:	2301      	movs	r3, #1
    4e66:	42a5      	cmp	r5, r4
    4e68:	d006      	beq.n	4e78 <__eqdf2+0x48>
    4e6a:	0018      	movs	r0, r3
    4e6c:	bc3c      	pop	{r2, r3, r4, r5}
    4e6e:	4690      	mov	r8, r2
    4e70:	4699      	mov	r9, r3
    4e72:	46a2      	mov	sl, r4
    4e74:	46ab      	mov	fp, r5
    4e76:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4e78:	42be      	cmp	r6, r7
    4e7a:	d1f6      	bne.n	4e6a <__eqdf2+0x3a>
    4e7c:	45c8      	cmp	r8, r9
    4e7e:	d1f4      	bne.n	4e6a <__eqdf2+0x3a>
    4e80:	45d3      	cmp	fp, sl
    4e82:	d010      	beq.n	4ea6 <__eqdf2+0x76>
    4e84:	2d00      	cmp	r5, #0
    4e86:	d1f0      	bne.n	4e6a <__eqdf2+0x3a>
    4e88:	4330      	orrs	r0, r6
    4e8a:	0003      	movs	r3, r0
    4e8c:	1e5a      	subs	r2, r3, #1
    4e8e:	4193      	sbcs	r3, r2
    4e90:	e7eb      	b.n	4e6a <__eqdf2+0x3a>
    4e92:	0031      	movs	r1, r6
    4e94:	2301      	movs	r3, #1
    4e96:	4301      	orrs	r1, r0
    4e98:	d1e7      	bne.n	4e6a <__eqdf2+0x3a>
    4e9a:	e7e0      	b.n	4e5e <__eqdf2+0x2e>
    4e9c:	433a      	orrs	r2, r7
    4e9e:	2301      	movs	r3, #1
    4ea0:	2a00      	cmp	r2, #0
    4ea2:	d1e2      	bne.n	4e6a <__eqdf2+0x3a>
    4ea4:	e7de      	b.n	4e64 <__eqdf2+0x34>
    4ea6:	2300      	movs	r3, #0
    4ea8:	e7df      	b.n	4e6a <__eqdf2+0x3a>
    4eaa:	46c0      	nop			; (mov r8, r8)
    4eac:	000007ff 	.word	0x000007ff

00004eb0 <__gedf2>:
    4eb0:	b5f0      	push	{r4, r5, r6, r7, lr}
    4eb2:	465f      	mov	r7, fp
    4eb4:	4644      	mov	r4, r8
    4eb6:	4656      	mov	r6, sl
    4eb8:	464d      	mov	r5, r9
    4eba:	b4f0      	push	{r4, r5, r6, r7}
    4ebc:	031f      	lsls	r7, r3, #12
    4ebe:	0b3c      	lsrs	r4, r7, #12
    4ec0:	4f2c      	ldr	r7, [pc, #176]	; (4f74 <__gedf2+0xc4>)
    4ec2:	030e      	lsls	r6, r1, #12
    4ec4:	004d      	lsls	r5, r1, #1
    4ec6:	46a3      	mov	fp, r4
    4ec8:	005c      	lsls	r4, r3, #1
    4eca:	4684      	mov	ip, r0
    4ecc:	0b36      	lsrs	r6, r6, #12
    4ece:	0d6d      	lsrs	r5, r5, #21
    4ed0:	0fc9      	lsrs	r1, r1, #31
    4ed2:	4690      	mov	r8, r2
    4ed4:	0d64      	lsrs	r4, r4, #21
    4ed6:	0fdb      	lsrs	r3, r3, #31
    4ed8:	42bd      	cmp	r5, r7
    4eda:	d02b      	beq.n	4f34 <__gedf2+0x84>
    4edc:	4f25      	ldr	r7, [pc, #148]	; (4f74 <__gedf2+0xc4>)
    4ede:	42bc      	cmp	r4, r7
    4ee0:	d02e      	beq.n	4f40 <__gedf2+0x90>
    4ee2:	2d00      	cmp	r5, #0
    4ee4:	d10e      	bne.n	4f04 <__gedf2+0x54>
    4ee6:	4330      	orrs	r0, r6
    4ee8:	0007      	movs	r7, r0
    4eea:	4681      	mov	r9, r0
    4eec:	4278      	negs	r0, r7
    4eee:	4178      	adcs	r0, r7
    4ef0:	2c00      	cmp	r4, #0
    4ef2:	d117      	bne.n	4f24 <__gedf2+0x74>
    4ef4:	465f      	mov	r7, fp
    4ef6:	433a      	orrs	r2, r7
    4ef8:	d114      	bne.n	4f24 <__gedf2+0x74>
    4efa:	464b      	mov	r3, r9
    4efc:	2000      	movs	r0, #0
    4efe:	2b00      	cmp	r3, #0
    4f00:	d00a      	beq.n	4f18 <__gedf2+0x68>
    4f02:	e006      	b.n	4f12 <__gedf2+0x62>
    4f04:	2c00      	cmp	r4, #0
    4f06:	d102      	bne.n	4f0e <__gedf2+0x5e>
    4f08:	4658      	mov	r0, fp
    4f0a:	4302      	orrs	r2, r0
    4f0c:	d001      	beq.n	4f12 <__gedf2+0x62>
    4f0e:	4299      	cmp	r1, r3
    4f10:	d01a      	beq.n	4f48 <__gedf2+0x98>
    4f12:	2301      	movs	r3, #1
    4f14:	4248      	negs	r0, r1
    4f16:	4318      	orrs	r0, r3
    4f18:	bc3c      	pop	{r2, r3, r4, r5}
    4f1a:	4690      	mov	r8, r2
    4f1c:	4699      	mov	r9, r3
    4f1e:	46a2      	mov	sl, r4
    4f20:	46ab      	mov	fp, r5
    4f22:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4f24:	2800      	cmp	r0, #0
    4f26:	d0f2      	beq.n	4f0e <__gedf2+0x5e>
    4f28:	4258      	negs	r0, r3
    4f2a:	4158      	adcs	r0, r3
    4f2c:	2201      	movs	r2, #1
    4f2e:	4240      	negs	r0, r0
    4f30:	4310      	orrs	r0, r2
    4f32:	e7f1      	b.n	4f18 <__gedf2+0x68>
    4f34:	0037      	movs	r7, r6
    4f36:	4307      	orrs	r7, r0
    4f38:	d0d0      	beq.n	4edc <__gedf2+0x2c>
    4f3a:	2002      	movs	r0, #2
    4f3c:	4240      	negs	r0, r0
    4f3e:	e7eb      	b.n	4f18 <__gedf2+0x68>
    4f40:	465f      	mov	r7, fp
    4f42:	4317      	orrs	r7, r2
    4f44:	d0cd      	beq.n	4ee2 <__gedf2+0x32>
    4f46:	e7f8      	b.n	4f3a <__gedf2+0x8a>
    4f48:	42a5      	cmp	r5, r4
    4f4a:	dce2      	bgt.n	4f12 <__gedf2+0x62>
    4f4c:	db05      	blt.n	4f5a <__gedf2+0xaa>
    4f4e:	455e      	cmp	r6, fp
    4f50:	d8df      	bhi.n	4f12 <__gedf2+0x62>
    4f52:	d008      	beq.n	4f66 <__gedf2+0xb6>
    4f54:	2000      	movs	r0, #0
    4f56:	455e      	cmp	r6, fp
    4f58:	d2de      	bcs.n	4f18 <__gedf2+0x68>
    4f5a:	4248      	negs	r0, r1
    4f5c:	4148      	adcs	r0, r1
    4f5e:	2301      	movs	r3, #1
    4f60:	4240      	negs	r0, r0
    4f62:	4318      	orrs	r0, r3
    4f64:	e7d8      	b.n	4f18 <__gedf2+0x68>
    4f66:	45c4      	cmp	ip, r8
    4f68:	d8d3      	bhi.n	4f12 <__gedf2+0x62>
    4f6a:	2000      	movs	r0, #0
    4f6c:	45c4      	cmp	ip, r8
    4f6e:	d3f4      	bcc.n	4f5a <__gedf2+0xaa>
    4f70:	e7d2      	b.n	4f18 <__gedf2+0x68>
    4f72:	46c0      	nop			; (mov r8, r8)
    4f74:	000007ff 	.word	0x000007ff

00004f78 <__ledf2>:
    4f78:	b5f0      	push	{r4, r5, r6, r7, lr}
    4f7a:	465f      	mov	r7, fp
    4f7c:	464d      	mov	r5, r9
    4f7e:	4644      	mov	r4, r8
    4f80:	4656      	mov	r6, sl
    4f82:	b4f0      	push	{r4, r5, r6, r7}
    4f84:	031c      	lsls	r4, r3, #12
    4f86:	0b24      	lsrs	r4, r4, #12
    4f88:	46a4      	mov	ip, r4
    4f8a:	4c2f      	ldr	r4, [pc, #188]	; (5048 <__ledf2+0xd0>)
    4f8c:	030f      	lsls	r7, r1, #12
    4f8e:	004d      	lsls	r5, r1, #1
    4f90:	005e      	lsls	r6, r3, #1
    4f92:	0fc9      	lsrs	r1, r1, #31
    4f94:	4680      	mov	r8, r0
    4f96:	0b3f      	lsrs	r7, r7, #12
    4f98:	0d6d      	lsrs	r5, r5, #21
    4f9a:	468b      	mov	fp, r1
    4f9c:	4691      	mov	r9, r2
    4f9e:	0d76      	lsrs	r6, r6, #21
    4fa0:	0fdb      	lsrs	r3, r3, #31
    4fa2:	42a5      	cmp	r5, r4
    4fa4:	d020      	beq.n	4fe8 <__ledf2+0x70>
    4fa6:	4c28      	ldr	r4, [pc, #160]	; (5048 <__ledf2+0xd0>)
    4fa8:	42a6      	cmp	r6, r4
    4faa:	d022      	beq.n	4ff2 <__ledf2+0x7a>
    4fac:	2d00      	cmp	r5, #0
    4fae:	d112      	bne.n	4fd6 <__ledf2+0x5e>
    4fb0:	4338      	orrs	r0, r7
    4fb2:	4244      	negs	r4, r0
    4fb4:	4144      	adcs	r4, r0
    4fb6:	2e00      	cmp	r6, #0
    4fb8:	d020      	beq.n	4ffc <__ledf2+0x84>
    4fba:	2c00      	cmp	r4, #0
    4fbc:	d00d      	beq.n	4fda <__ledf2+0x62>
    4fbe:	425c      	negs	r4, r3
    4fc0:	4163      	adcs	r3, r4
    4fc2:	2401      	movs	r4, #1
    4fc4:	425b      	negs	r3, r3
    4fc6:	431c      	orrs	r4, r3
    4fc8:	0020      	movs	r0, r4
    4fca:	bc3c      	pop	{r2, r3, r4, r5}
    4fcc:	4690      	mov	r8, r2
    4fce:	4699      	mov	r9, r3
    4fd0:	46a2      	mov	sl, r4
    4fd2:	46ab      	mov	fp, r5
    4fd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4fd6:	2e00      	cmp	r6, #0
    4fd8:	d017      	beq.n	500a <__ledf2+0x92>
    4fda:	455b      	cmp	r3, fp
    4fdc:	d019      	beq.n	5012 <__ledf2+0x9a>
    4fde:	465b      	mov	r3, fp
    4fe0:	425c      	negs	r4, r3
    4fe2:	2301      	movs	r3, #1
    4fe4:	431c      	orrs	r4, r3
    4fe6:	e7ef      	b.n	4fc8 <__ledf2+0x50>
    4fe8:	0039      	movs	r1, r7
    4fea:	2402      	movs	r4, #2
    4fec:	4301      	orrs	r1, r0
    4fee:	d1eb      	bne.n	4fc8 <__ledf2+0x50>
    4ff0:	e7d9      	b.n	4fa6 <__ledf2+0x2e>
    4ff2:	4661      	mov	r1, ip
    4ff4:	2402      	movs	r4, #2
    4ff6:	4311      	orrs	r1, r2
    4ff8:	d1e6      	bne.n	4fc8 <__ledf2+0x50>
    4ffa:	e7d7      	b.n	4fac <__ledf2+0x34>
    4ffc:	4661      	mov	r1, ip
    4ffe:	430a      	orrs	r2, r1
    5000:	d1db      	bne.n	4fba <__ledf2+0x42>
    5002:	2400      	movs	r4, #0
    5004:	2800      	cmp	r0, #0
    5006:	d0df      	beq.n	4fc8 <__ledf2+0x50>
    5008:	e7e9      	b.n	4fde <__ledf2+0x66>
    500a:	4661      	mov	r1, ip
    500c:	430a      	orrs	r2, r1
    500e:	d1e4      	bne.n	4fda <__ledf2+0x62>
    5010:	e7e5      	b.n	4fde <__ledf2+0x66>
    5012:	42b5      	cmp	r5, r6
    5014:	dd03      	ble.n	501e <__ledf2+0xa6>
    5016:	2201      	movs	r2, #1
    5018:	425c      	negs	r4, r3
    501a:	4314      	orrs	r4, r2
    501c:	e7d4      	b.n	4fc8 <__ledf2+0x50>
    501e:	42b5      	cmp	r5, r6
    5020:	dbcd      	blt.n	4fbe <__ledf2+0x46>
    5022:	4567      	cmp	r7, ip
    5024:	d8db      	bhi.n	4fde <__ledf2+0x66>
    5026:	d009      	beq.n	503c <__ledf2+0xc4>
    5028:	2400      	movs	r4, #0
    502a:	4567      	cmp	r7, ip
    502c:	d2cc      	bcs.n	4fc8 <__ledf2+0x50>
    502e:	4659      	mov	r1, fp
    5030:	424c      	negs	r4, r1
    5032:	4161      	adcs	r1, r4
    5034:	2401      	movs	r4, #1
    5036:	4249      	negs	r1, r1
    5038:	430c      	orrs	r4, r1
    503a:	e7c5      	b.n	4fc8 <__ledf2+0x50>
    503c:	45c8      	cmp	r8, r9
    503e:	d8ce      	bhi.n	4fde <__ledf2+0x66>
    5040:	2400      	movs	r4, #0
    5042:	45c8      	cmp	r8, r9
    5044:	d3f3      	bcc.n	502e <__ledf2+0xb6>
    5046:	e7bf      	b.n	4fc8 <__ledf2+0x50>
    5048:	000007ff 	.word	0x000007ff

0000504c <__aeabi_dmul>:
    504c:	b5f0      	push	{r4, r5, r6, r7, lr}
    504e:	465f      	mov	r7, fp
    5050:	4656      	mov	r6, sl
    5052:	464d      	mov	r5, r9
    5054:	4644      	mov	r4, r8
    5056:	b4f0      	push	{r4, r5, r6, r7}
    5058:	030d      	lsls	r5, r1, #12
    505a:	4699      	mov	r9, r3
    505c:	004e      	lsls	r6, r1, #1
    505e:	0b2b      	lsrs	r3, r5, #12
    5060:	b087      	sub	sp, #28
    5062:	0007      	movs	r7, r0
    5064:	4692      	mov	sl, r2
    5066:	4680      	mov	r8, r0
    5068:	469b      	mov	fp, r3
    506a:	0d76      	lsrs	r6, r6, #21
    506c:	0fcc      	lsrs	r4, r1, #31
    506e:	2e00      	cmp	r6, #0
    5070:	d069      	beq.n	5146 <__aeabi_dmul+0xfa>
    5072:	4b6d      	ldr	r3, [pc, #436]	; (5228 <__aeabi_dmul+0x1dc>)
    5074:	429e      	cmp	r6, r3
    5076:	d035      	beq.n	50e4 <__aeabi_dmul+0x98>
    5078:	465b      	mov	r3, fp
    507a:	2280      	movs	r2, #128	; 0x80
    507c:	00dd      	lsls	r5, r3, #3
    507e:	0412      	lsls	r2, r2, #16
    5080:	0f43      	lsrs	r3, r0, #29
    5082:	4313      	orrs	r3, r2
    5084:	432b      	orrs	r3, r5
    5086:	469b      	mov	fp, r3
    5088:	00c3      	lsls	r3, r0, #3
    508a:	4698      	mov	r8, r3
    508c:	4b67      	ldr	r3, [pc, #412]	; (522c <__aeabi_dmul+0x1e0>)
    508e:	2700      	movs	r7, #0
    5090:	469c      	mov	ip, r3
    5092:	2300      	movs	r3, #0
    5094:	4466      	add	r6, ip
    5096:	9301      	str	r3, [sp, #4]
    5098:	464a      	mov	r2, r9
    509a:	0315      	lsls	r5, r2, #12
    509c:	0050      	lsls	r0, r2, #1
    509e:	0fd2      	lsrs	r2, r2, #31
    50a0:	4653      	mov	r3, sl
    50a2:	0b2d      	lsrs	r5, r5, #12
    50a4:	0d40      	lsrs	r0, r0, #21
    50a6:	4691      	mov	r9, r2
    50a8:	d100      	bne.n	50ac <__aeabi_dmul+0x60>
    50aa:	e076      	b.n	519a <__aeabi_dmul+0x14e>
    50ac:	4a5e      	ldr	r2, [pc, #376]	; (5228 <__aeabi_dmul+0x1dc>)
    50ae:	4290      	cmp	r0, r2
    50b0:	d06c      	beq.n	518c <__aeabi_dmul+0x140>
    50b2:	2280      	movs	r2, #128	; 0x80
    50b4:	0f5b      	lsrs	r3, r3, #29
    50b6:	0412      	lsls	r2, r2, #16
    50b8:	4313      	orrs	r3, r2
    50ba:	4a5c      	ldr	r2, [pc, #368]	; (522c <__aeabi_dmul+0x1e0>)
    50bc:	00ed      	lsls	r5, r5, #3
    50be:	4694      	mov	ip, r2
    50c0:	431d      	orrs	r5, r3
    50c2:	4653      	mov	r3, sl
    50c4:	2200      	movs	r2, #0
    50c6:	00db      	lsls	r3, r3, #3
    50c8:	4460      	add	r0, ip
    50ca:	4649      	mov	r1, r9
    50cc:	1836      	adds	r6, r6, r0
    50ce:	1c70      	adds	r0, r6, #1
    50d0:	4061      	eors	r1, r4
    50d2:	9002      	str	r0, [sp, #8]
    50d4:	4317      	orrs	r7, r2
    50d6:	2f0f      	cmp	r7, #15
    50d8:	d900      	bls.n	50dc <__aeabi_dmul+0x90>
    50da:	e0af      	b.n	523c <__aeabi_dmul+0x1f0>
    50dc:	4854      	ldr	r0, [pc, #336]	; (5230 <__aeabi_dmul+0x1e4>)
    50de:	00bf      	lsls	r7, r7, #2
    50e0:	59c7      	ldr	r7, [r0, r7]
    50e2:	46bf      	mov	pc, r7
    50e4:	465b      	mov	r3, fp
    50e6:	431f      	orrs	r7, r3
    50e8:	d000      	beq.n	50ec <__aeabi_dmul+0xa0>
    50ea:	e088      	b.n	51fe <__aeabi_dmul+0x1b2>
    50ec:	2300      	movs	r3, #0
    50ee:	469b      	mov	fp, r3
    50f0:	4698      	mov	r8, r3
    50f2:	3302      	adds	r3, #2
    50f4:	2708      	movs	r7, #8
    50f6:	9301      	str	r3, [sp, #4]
    50f8:	e7ce      	b.n	5098 <__aeabi_dmul+0x4c>
    50fa:	4649      	mov	r1, r9
    50fc:	2a02      	cmp	r2, #2
    50fe:	d06a      	beq.n	51d6 <__aeabi_dmul+0x18a>
    5100:	2a03      	cmp	r2, #3
    5102:	d100      	bne.n	5106 <__aeabi_dmul+0xba>
    5104:	e209      	b.n	551a <__aeabi_dmul+0x4ce>
    5106:	2a01      	cmp	r2, #1
    5108:	d000      	beq.n	510c <__aeabi_dmul+0xc0>
    510a:	e1bb      	b.n	5484 <__aeabi_dmul+0x438>
    510c:	4011      	ands	r1, r2
    510e:	2200      	movs	r2, #0
    5110:	2300      	movs	r3, #0
    5112:	2500      	movs	r5, #0
    5114:	4690      	mov	r8, r2
    5116:	b2cc      	uxtb	r4, r1
    5118:	2100      	movs	r1, #0
    511a:	032d      	lsls	r5, r5, #12
    511c:	0d0a      	lsrs	r2, r1, #20
    511e:	0512      	lsls	r2, r2, #20
    5120:	0b2d      	lsrs	r5, r5, #12
    5122:	4315      	orrs	r5, r2
    5124:	4a43      	ldr	r2, [pc, #268]	; (5234 <__aeabi_dmul+0x1e8>)
    5126:	051b      	lsls	r3, r3, #20
    5128:	4015      	ands	r5, r2
    512a:	431d      	orrs	r5, r3
    512c:	006d      	lsls	r5, r5, #1
    512e:	07e4      	lsls	r4, r4, #31
    5130:	086d      	lsrs	r5, r5, #1
    5132:	4325      	orrs	r5, r4
    5134:	4640      	mov	r0, r8
    5136:	0029      	movs	r1, r5
    5138:	b007      	add	sp, #28
    513a:	bc3c      	pop	{r2, r3, r4, r5}
    513c:	4690      	mov	r8, r2
    513e:	4699      	mov	r9, r3
    5140:	46a2      	mov	sl, r4
    5142:	46ab      	mov	fp, r5
    5144:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5146:	4303      	orrs	r3, r0
    5148:	d052      	beq.n	51f0 <__aeabi_dmul+0x1a4>
    514a:	465b      	mov	r3, fp
    514c:	2b00      	cmp	r3, #0
    514e:	d100      	bne.n	5152 <__aeabi_dmul+0x106>
    5150:	e18a      	b.n	5468 <__aeabi_dmul+0x41c>
    5152:	4658      	mov	r0, fp
    5154:	f000 ffbe 	bl	60d4 <__clzsi2>
    5158:	0003      	movs	r3, r0
    515a:	3b0b      	subs	r3, #11
    515c:	2b1c      	cmp	r3, #28
    515e:	dd00      	ble.n	5162 <__aeabi_dmul+0x116>
    5160:	e17b      	b.n	545a <__aeabi_dmul+0x40e>
    5162:	221d      	movs	r2, #29
    5164:	1ad3      	subs	r3, r2, r3
    5166:	003a      	movs	r2, r7
    5168:	0001      	movs	r1, r0
    516a:	465d      	mov	r5, fp
    516c:	40da      	lsrs	r2, r3
    516e:	3908      	subs	r1, #8
    5170:	408d      	lsls	r5, r1
    5172:	0013      	movs	r3, r2
    5174:	408f      	lsls	r7, r1
    5176:	432b      	orrs	r3, r5
    5178:	469b      	mov	fp, r3
    517a:	46b8      	mov	r8, r7
    517c:	4b2e      	ldr	r3, [pc, #184]	; (5238 <__aeabi_dmul+0x1ec>)
    517e:	2700      	movs	r7, #0
    5180:	469c      	mov	ip, r3
    5182:	2300      	movs	r3, #0
    5184:	4460      	add	r0, ip
    5186:	4246      	negs	r6, r0
    5188:	9301      	str	r3, [sp, #4]
    518a:	e785      	b.n	5098 <__aeabi_dmul+0x4c>
    518c:	4652      	mov	r2, sl
    518e:	432a      	orrs	r2, r5
    5190:	d12c      	bne.n	51ec <__aeabi_dmul+0x1a0>
    5192:	2500      	movs	r5, #0
    5194:	2300      	movs	r3, #0
    5196:	2202      	movs	r2, #2
    5198:	e797      	b.n	50ca <__aeabi_dmul+0x7e>
    519a:	4652      	mov	r2, sl
    519c:	432a      	orrs	r2, r5
    519e:	d021      	beq.n	51e4 <__aeabi_dmul+0x198>
    51a0:	2d00      	cmp	r5, #0
    51a2:	d100      	bne.n	51a6 <__aeabi_dmul+0x15a>
    51a4:	e154      	b.n	5450 <__aeabi_dmul+0x404>
    51a6:	0028      	movs	r0, r5
    51a8:	f000 ff94 	bl	60d4 <__clzsi2>
    51ac:	0003      	movs	r3, r0
    51ae:	3b0b      	subs	r3, #11
    51b0:	2b1c      	cmp	r3, #28
    51b2:	dd00      	ble.n	51b6 <__aeabi_dmul+0x16a>
    51b4:	e146      	b.n	5444 <__aeabi_dmul+0x3f8>
    51b6:	211d      	movs	r1, #29
    51b8:	1acb      	subs	r3, r1, r3
    51ba:	4651      	mov	r1, sl
    51bc:	0002      	movs	r2, r0
    51be:	40d9      	lsrs	r1, r3
    51c0:	4653      	mov	r3, sl
    51c2:	3a08      	subs	r2, #8
    51c4:	4095      	lsls	r5, r2
    51c6:	4093      	lsls	r3, r2
    51c8:	430d      	orrs	r5, r1
    51ca:	4a1b      	ldr	r2, [pc, #108]	; (5238 <__aeabi_dmul+0x1ec>)
    51cc:	4694      	mov	ip, r2
    51ce:	4460      	add	r0, ip
    51d0:	4240      	negs	r0, r0
    51d2:	2200      	movs	r2, #0
    51d4:	e779      	b.n	50ca <__aeabi_dmul+0x7e>
    51d6:	2401      	movs	r4, #1
    51d8:	2200      	movs	r2, #0
    51da:	400c      	ands	r4, r1
    51dc:	4b12      	ldr	r3, [pc, #72]	; (5228 <__aeabi_dmul+0x1dc>)
    51de:	2500      	movs	r5, #0
    51e0:	4690      	mov	r8, r2
    51e2:	e799      	b.n	5118 <__aeabi_dmul+0xcc>
    51e4:	2500      	movs	r5, #0
    51e6:	2300      	movs	r3, #0
    51e8:	2201      	movs	r2, #1
    51ea:	e76e      	b.n	50ca <__aeabi_dmul+0x7e>
    51ec:	2203      	movs	r2, #3
    51ee:	e76c      	b.n	50ca <__aeabi_dmul+0x7e>
    51f0:	2300      	movs	r3, #0
    51f2:	469b      	mov	fp, r3
    51f4:	4698      	mov	r8, r3
    51f6:	3301      	adds	r3, #1
    51f8:	2704      	movs	r7, #4
    51fa:	9301      	str	r3, [sp, #4]
    51fc:	e74c      	b.n	5098 <__aeabi_dmul+0x4c>
    51fe:	2303      	movs	r3, #3
    5200:	270c      	movs	r7, #12
    5202:	9301      	str	r3, [sp, #4]
    5204:	e748      	b.n	5098 <__aeabi_dmul+0x4c>
    5206:	2300      	movs	r3, #0
    5208:	2580      	movs	r5, #128	; 0x80
    520a:	4698      	mov	r8, r3
    520c:	2400      	movs	r4, #0
    520e:	032d      	lsls	r5, r5, #12
    5210:	4b05      	ldr	r3, [pc, #20]	; (5228 <__aeabi_dmul+0x1dc>)
    5212:	e781      	b.n	5118 <__aeabi_dmul+0xcc>
    5214:	465d      	mov	r5, fp
    5216:	4643      	mov	r3, r8
    5218:	9a01      	ldr	r2, [sp, #4]
    521a:	e76f      	b.n	50fc <__aeabi_dmul+0xb0>
    521c:	465d      	mov	r5, fp
    521e:	4643      	mov	r3, r8
    5220:	0021      	movs	r1, r4
    5222:	9a01      	ldr	r2, [sp, #4]
    5224:	e76a      	b.n	50fc <__aeabi_dmul+0xb0>
    5226:	46c0      	nop			; (mov r8, r8)
    5228:	000007ff 	.word	0x000007ff
    522c:	fffffc01 	.word	0xfffffc01
    5230:	000064b0 	.word	0x000064b0
    5234:	800fffff 	.word	0x800fffff
    5238:	000003f3 	.word	0x000003f3
    523c:	4642      	mov	r2, r8
    523e:	0c12      	lsrs	r2, r2, #16
    5240:	4691      	mov	r9, r2
    5242:	0c1a      	lsrs	r2, r3, #16
    5244:	4694      	mov	ip, r2
    5246:	4642      	mov	r2, r8
    5248:	0417      	lsls	r7, r2, #16
    524a:	464a      	mov	r2, r9
    524c:	041b      	lsls	r3, r3, #16
    524e:	0c1b      	lsrs	r3, r3, #16
    5250:	435a      	muls	r2, r3
    5252:	4660      	mov	r0, ip
    5254:	4690      	mov	r8, r2
    5256:	464a      	mov	r2, r9
    5258:	4342      	muls	r2, r0
    525a:	0010      	movs	r0, r2
    525c:	9203      	str	r2, [sp, #12]
    525e:	4662      	mov	r2, ip
    5260:	001c      	movs	r4, r3
    5262:	0c3f      	lsrs	r7, r7, #16
    5264:	437a      	muls	r2, r7
    5266:	437c      	muls	r4, r7
    5268:	4442      	add	r2, r8
    526a:	9201      	str	r2, [sp, #4]
    526c:	0c22      	lsrs	r2, r4, #16
    526e:	4692      	mov	sl, r2
    5270:	9a01      	ldr	r2, [sp, #4]
    5272:	4452      	add	r2, sl
    5274:	4590      	cmp	r8, r2
    5276:	d906      	bls.n	5286 <__aeabi_dmul+0x23a>
    5278:	4682      	mov	sl, r0
    527a:	2080      	movs	r0, #128	; 0x80
    527c:	0240      	lsls	r0, r0, #9
    527e:	4680      	mov	r8, r0
    5280:	44c2      	add	sl, r8
    5282:	4650      	mov	r0, sl
    5284:	9003      	str	r0, [sp, #12]
    5286:	0c10      	lsrs	r0, r2, #16
    5288:	9004      	str	r0, [sp, #16]
    528a:	4648      	mov	r0, r9
    528c:	0424      	lsls	r4, r4, #16
    528e:	0c24      	lsrs	r4, r4, #16
    5290:	0412      	lsls	r2, r2, #16
    5292:	1912      	adds	r2, r2, r4
    5294:	9205      	str	r2, [sp, #20]
    5296:	0c2a      	lsrs	r2, r5, #16
    5298:	042d      	lsls	r5, r5, #16
    529a:	0c2d      	lsrs	r5, r5, #16
    529c:	4368      	muls	r0, r5
    529e:	002c      	movs	r4, r5
    52a0:	4682      	mov	sl, r0
    52a2:	4648      	mov	r0, r9
    52a4:	437c      	muls	r4, r7
    52a6:	4350      	muls	r0, r2
    52a8:	4681      	mov	r9, r0
    52aa:	0c20      	lsrs	r0, r4, #16
    52ac:	4680      	mov	r8, r0
    52ae:	4357      	muls	r7, r2
    52b0:	4457      	add	r7, sl
    52b2:	4447      	add	r7, r8
    52b4:	45ba      	cmp	sl, r7
    52b6:	d903      	bls.n	52c0 <__aeabi_dmul+0x274>
    52b8:	2080      	movs	r0, #128	; 0x80
    52ba:	0240      	lsls	r0, r0, #9
    52bc:	4680      	mov	r8, r0
    52be:	44c1      	add	r9, r8
    52c0:	0c38      	lsrs	r0, r7, #16
    52c2:	043f      	lsls	r7, r7, #16
    52c4:	46b8      	mov	r8, r7
    52c6:	4448      	add	r0, r9
    52c8:	0424      	lsls	r4, r4, #16
    52ca:	0c24      	lsrs	r4, r4, #16
    52cc:	9001      	str	r0, [sp, #4]
    52ce:	9804      	ldr	r0, [sp, #16]
    52d0:	44a0      	add	r8, r4
    52d2:	4440      	add	r0, r8
    52d4:	9004      	str	r0, [sp, #16]
    52d6:	4658      	mov	r0, fp
    52d8:	0c00      	lsrs	r0, r0, #16
    52da:	4681      	mov	r9, r0
    52dc:	4658      	mov	r0, fp
    52de:	0404      	lsls	r4, r0, #16
    52e0:	0c20      	lsrs	r0, r4, #16
    52e2:	4682      	mov	sl, r0
    52e4:	0007      	movs	r7, r0
    52e6:	4648      	mov	r0, r9
    52e8:	435f      	muls	r7, r3
    52ea:	464c      	mov	r4, r9
    52ec:	4343      	muls	r3, r0
    52ee:	4660      	mov	r0, ip
    52f0:	4360      	muls	r0, r4
    52f2:	4664      	mov	r4, ip
    52f4:	4683      	mov	fp, r0
    52f6:	4650      	mov	r0, sl
    52f8:	4344      	muls	r4, r0
    52fa:	0c38      	lsrs	r0, r7, #16
    52fc:	4684      	mov	ip, r0
    52fe:	18e4      	adds	r4, r4, r3
    5300:	4464      	add	r4, ip
    5302:	42a3      	cmp	r3, r4
    5304:	d903      	bls.n	530e <__aeabi_dmul+0x2c2>
    5306:	2380      	movs	r3, #128	; 0x80
    5308:	025b      	lsls	r3, r3, #9
    530a:	469c      	mov	ip, r3
    530c:	44e3      	add	fp, ip
    530e:	4648      	mov	r0, r9
    5310:	043f      	lsls	r7, r7, #16
    5312:	0c23      	lsrs	r3, r4, #16
    5314:	0c3f      	lsrs	r7, r7, #16
    5316:	0424      	lsls	r4, r4, #16
    5318:	19e4      	adds	r4, r4, r7
    531a:	4657      	mov	r7, sl
    531c:	4368      	muls	r0, r5
    531e:	436f      	muls	r7, r5
    5320:	4684      	mov	ip, r0
    5322:	464d      	mov	r5, r9
    5324:	4650      	mov	r0, sl
    5326:	4355      	muls	r5, r2
    5328:	4342      	muls	r2, r0
    532a:	0c38      	lsrs	r0, r7, #16
    532c:	4681      	mov	r9, r0
    532e:	4462      	add	r2, ip
    5330:	444a      	add	r2, r9
    5332:	445b      	add	r3, fp
    5334:	4594      	cmp	ip, r2
    5336:	d903      	bls.n	5340 <__aeabi_dmul+0x2f4>
    5338:	2080      	movs	r0, #128	; 0x80
    533a:	0240      	lsls	r0, r0, #9
    533c:	4684      	mov	ip, r0
    533e:	4465      	add	r5, ip
    5340:	9803      	ldr	r0, [sp, #12]
    5342:	043f      	lsls	r7, r7, #16
    5344:	4683      	mov	fp, r0
    5346:	9804      	ldr	r0, [sp, #16]
    5348:	0c3f      	lsrs	r7, r7, #16
    534a:	4684      	mov	ip, r0
    534c:	44e3      	add	fp, ip
    534e:	45c3      	cmp	fp, r8
    5350:	4180      	sbcs	r0, r0
    5352:	4240      	negs	r0, r0
    5354:	4682      	mov	sl, r0
    5356:	0410      	lsls	r0, r2, #16
    5358:	4684      	mov	ip, r0
    535a:	9801      	ldr	r0, [sp, #4]
    535c:	4467      	add	r7, ip
    535e:	4684      	mov	ip, r0
    5360:	4467      	add	r7, ip
    5362:	44a3      	add	fp, r4
    5364:	46bc      	mov	ip, r7
    5366:	45a3      	cmp	fp, r4
    5368:	41a4      	sbcs	r4, r4
    536a:	4699      	mov	r9, r3
    536c:	44d4      	add	ip, sl
    536e:	4264      	negs	r4, r4
    5370:	4287      	cmp	r7, r0
    5372:	41bf      	sbcs	r7, r7
    5374:	45d4      	cmp	ip, sl
    5376:	4180      	sbcs	r0, r0
    5378:	44e1      	add	r9, ip
    537a:	46a0      	mov	r8, r4
    537c:	4599      	cmp	r9, r3
    537e:	419b      	sbcs	r3, r3
    5380:	427f      	negs	r7, r7
    5382:	4240      	negs	r0, r0
    5384:	44c8      	add	r8, r9
    5386:	4307      	orrs	r7, r0
    5388:	0c12      	lsrs	r2, r2, #16
    538a:	18ba      	adds	r2, r7, r2
    538c:	45a0      	cmp	r8, r4
    538e:	41a4      	sbcs	r4, r4
    5390:	425f      	negs	r7, r3
    5392:	003b      	movs	r3, r7
    5394:	4264      	negs	r4, r4
    5396:	4323      	orrs	r3, r4
    5398:	18d7      	adds	r7, r2, r3
    539a:	4643      	mov	r3, r8
    539c:	197d      	adds	r5, r7, r5
    539e:	0ddb      	lsrs	r3, r3, #23
    53a0:	026d      	lsls	r5, r5, #9
    53a2:	431d      	orrs	r5, r3
    53a4:	465b      	mov	r3, fp
    53a6:	025a      	lsls	r2, r3, #9
    53a8:	9b05      	ldr	r3, [sp, #20]
    53aa:	431a      	orrs	r2, r3
    53ac:	1e53      	subs	r3, r2, #1
    53ae:	419a      	sbcs	r2, r3
    53b0:	465b      	mov	r3, fp
    53b2:	0ddb      	lsrs	r3, r3, #23
    53b4:	431a      	orrs	r2, r3
    53b6:	4643      	mov	r3, r8
    53b8:	025b      	lsls	r3, r3, #9
    53ba:	4313      	orrs	r3, r2
    53bc:	01ea      	lsls	r2, r5, #7
    53be:	d507      	bpl.n	53d0 <__aeabi_dmul+0x384>
    53c0:	2201      	movs	r2, #1
    53c2:	085c      	lsrs	r4, r3, #1
    53c4:	4013      	ands	r3, r2
    53c6:	4323      	orrs	r3, r4
    53c8:	07ea      	lsls	r2, r5, #31
    53ca:	9e02      	ldr	r6, [sp, #8]
    53cc:	4313      	orrs	r3, r2
    53ce:	086d      	lsrs	r5, r5, #1
    53d0:	4a57      	ldr	r2, [pc, #348]	; (5530 <__aeabi_dmul+0x4e4>)
    53d2:	18b2      	adds	r2, r6, r2
    53d4:	2a00      	cmp	r2, #0
    53d6:	dd4b      	ble.n	5470 <__aeabi_dmul+0x424>
    53d8:	0758      	lsls	r0, r3, #29
    53da:	d009      	beq.n	53f0 <__aeabi_dmul+0x3a4>
    53dc:	200f      	movs	r0, #15
    53de:	4018      	ands	r0, r3
    53e0:	2804      	cmp	r0, #4
    53e2:	d005      	beq.n	53f0 <__aeabi_dmul+0x3a4>
    53e4:	1d18      	adds	r0, r3, #4
    53e6:	4298      	cmp	r0, r3
    53e8:	419b      	sbcs	r3, r3
    53ea:	425b      	negs	r3, r3
    53ec:	18ed      	adds	r5, r5, r3
    53ee:	0003      	movs	r3, r0
    53f0:	01e8      	lsls	r0, r5, #7
    53f2:	d504      	bpl.n	53fe <__aeabi_dmul+0x3b2>
    53f4:	4a4f      	ldr	r2, [pc, #316]	; (5534 <__aeabi_dmul+0x4e8>)
    53f6:	4015      	ands	r5, r2
    53f8:	2280      	movs	r2, #128	; 0x80
    53fa:	00d2      	lsls	r2, r2, #3
    53fc:	18b2      	adds	r2, r6, r2
    53fe:	484e      	ldr	r0, [pc, #312]	; (5538 <__aeabi_dmul+0x4ec>)
    5400:	4282      	cmp	r2, r0
    5402:	dd00      	ble.n	5406 <__aeabi_dmul+0x3ba>
    5404:	e6e7      	b.n	51d6 <__aeabi_dmul+0x18a>
    5406:	2401      	movs	r4, #1
    5408:	08db      	lsrs	r3, r3, #3
    540a:	0768      	lsls	r0, r5, #29
    540c:	4318      	orrs	r0, r3
    540e:	026d      	lsls	r5, r5, #9
    5410:	0553      	lsls	r3, r2, #21
    5412:	4680      	mov	r8, r0
    5414:	0b2d      	lsrs	r5, r5, #12
    5416:	0d5b      	lsrs	r3, r3, #21
    5418:	400c      	ands	r4, r1
    541a:	e67d      	b.n	5118 <__aeabi_dmul+0xcc>
    541c:	2280      	movs	r2, #128	; 0x80
    541e:	4659      	mov	r1, fp
    5420:	0312      	lsls	r2, r2, #12
    5422:	4211      	tst	r1, r2
    5424:	d008      	beq.n	5438 <__aeabi_dmul+0x3ec>
    5426:	4215      	tst	r5, r2
    5428:	d106      	bne.n	5438 <__aeabi_dmul+0x3ec>
    542a:	4315      	orrs	r5, r2
    542c:	032d      	lsls	r5, r5, #12
    542e:	4698      	mov	r8, r3
    5430:	0b2d      	lsrs	r5, r5, #12
    5432:	464c      	mov	r4, r9
    5434:	4b41      	ldr	r3, [pc, #260]	; (553c <__aeabi_dmul+0x4f0>)
    5436:	e66f      	b.n	5118 <__aeabi_dmul+0xcc>
    5438:	465d      	mov	r5, fp
    543a:	4315      	orrs	r5, r2
    543c:	032d      	lsls	r5, r5, #12
    543e:	0b2d      	lsrs	r5, r5, #12
    5440:	4b3e      	ldr	r3, [pc, #248]	; (553c <__aeabi_dmul+0x4f0>)
    5442:	e669      	b.n	5118 <__aeabi_dmul+0xcc>
    5444:	0003      	movs	r3, r0
    5446:	4655      	mov	r5, sl
    5448:	3b28      	subs	r3, #40	; 0x28
    544a:	409d      	lsls	r5, r3
    544c:	2300      	movs	r3, #0
    544e:	e6bc      	b.n	51ca <__aeabi_dmul+0x17e>
    5450:	4650      	mov	r0, sl
    5452:	f000 fe3f 	bl	60d4 <__clzsi2>
    5456:	3020      	adds	r0, #32
    5458:	e6a8      	b.n	51ac <__aeabi_dmul+0x160>
    545a:	0003      	movs	r3, r0
    545c:	3b28      	subs	r3, #40	; 0x28
    545e:	409f      	lsls	r7, r3
    5460:	2300      	movs	r3, #0
    5462:	46bb      	mov	fp, r7
    5464:	4698      	mov	r8, r3
    5466:	e689      	b.n	517c <__aeabi_dmul+0x130>
    5468:	f000 fe34 	bl	60d4 <__clzsi2>
    546c:	3020      	adds	r0, #32
    546e:	e673      	b.n	5158 <__aeabi_dmul+0x10c>
    5470:	2401      	movs	r4, #1
    5472:	1aa6      	subs	r6, r4, r2
    5474:	2e38      	cmp	r6, #56	; 0x38
    5476:	dd07      	ble.n	5488 <__aeabi_dmul+0x43c>
    5478:	2200      	movs	r2, #0
    547a:	400c      	ands	r4, r1
    547c:	2300      	movs	r3, #0
    547e:	2500      	movs	r5, #0
    5480:	4690      	mov	r8, r2
    5482:	e649      	b.n	5118 <__aeabi_dmul+0xcc>
    5484:	9e02      	ldr	r6, [sp, #8]
    5486:	e7a3      	b.n	53d0 <__aeabi_dmul+0x384>
    5488:	2e1f      	cmp	r6, #31
    548a:	dc20      	bgt.n	54ce <__aeabi_dmul+0x482>
    548c:	2220      	movs	r2, #32
    548e:	002c      	movs	r4, r5
    5490:	0018      	movs	r0, r3
    5492:	1b92      	subs	r2, r2, r6
    5494:	40f0      	lsrs	r0, r6
    5496:	4094      	lsls	r4, r2
    5498:	4093      	lsls	r3, r2
    549a:	4304      	orrs	r4, r0
    549c:	1e58      	subs	r0, r3, #1
    549e:	4183      	sbcs	r3, r0
    54a0:	431c      	orrs	r4, r3
    54a2:	40f5      	lsrs	r5, r6
    54a4:	0763      	lsls	r3, r4, #29
    54a6:	d009      	beq.n	54bc <__aeabi_dmul+0x470>
    54a8:	230f      	movs	r3, #15
    54aa:	4023      	ands	r3, r4
    54ac:	2b04      	cmp	r3, #4
    54ae:	d005      	beq.n	54bc <__aeabi_dmul+0x470>
    54b0:	0023      	movs	r3, r4
    54b2:	1d1c      	adds	r4, r3, #4
    54b4:	429c      	cmp	r4, r3
    54b6:	4192      	sbcs	r2, r2
    54b8:	4252      	negs	r2, r2
    54ba:	18ad      	adds	r5, r5, r2
    54bc:	022b      	lsls	r3, r5, #8
    54be:	d51f      	bpl.n	5500 <__aeabi_dmul+0x4b4>
    54c0:	2401      	movs	r4, #1
    54c2:	2200      	movs	r2, #0
    54c4:	400c      	ands	r4, r1
    54c6:	2301      	movs	r3, #1
    54c8:	2500      	movs	r5, #0
    54ca:	4690      	mov	r8, r2
    54cc:	e624      	b.n	5118 <__aeabi_dmul+0xcc>
    54ce:	201f      	movs	r0, #31
    54d0:	002c      	movs	r4, r5
    54d2:	4240      	negs	r0, r0
    54d4:	1a82      	subs	r2, r0, r2
    54d6:	40d4      	lsrs	r4, r2
    54d8:	2e20      	cmp	r6, #32
    54da:	d01c      	beq.n	5516 <__aeabi_dmul+0x4ca>
    54dc:	2240      	movs	r2, #64	; 0x40
    54de:	1b96      	subs	r6, r2, r6
    54e0:	40b5      	lsls	r5, r6
    54e2:	432b      	orrs	r3, r5
    54e4:	1e58      	subs	r0, r3, #1
    54e6:	4183      	sbcs	r3, r0
    54e8:	2007      	movs	r0, #7
    54ea:	4323      	orrs	r3, r4
    54ec:	4018      	ands	r0, r3
    54ee:	2500      	movs	r5, #0
    54f0:	2800      	cmp	r0, #0
    54f2:	d009      	beq.n	5508 <__aeabi_dmul+0x4bc>
    54f4:	220f      	movs	r2, #15
    54f6:	2500      	movs	r5, #0
    54f8:	401a      	ands	r2, r3
    54fa:	001c      	movs	r4, r3
    54fc:	2a04      	cmp	r2, #4
    54fe:	d1d8      	bne.n	54b2 <__aeabi_dmul+0x466>
    5500:	0023      	movs	r3, r4
    5502:	0768      	lsls	r0, r5, #29
    5504:	026d      	lsls	r5, r5, #9
    5506:	0b2d      	lsrs	r5, r5, #12
    5508:	2401      	movs	r4, #1
    550a:	08db      	lsrs	r3, r3, #3
    550c:	4303      	orrs	r3, r0
    550e:	4698      	mov	r8, r3
    5510:	400c      	ands	r4, r1
    5512:	2300      	movs	r3, #0
    5514:	e600      	b.n	5118 <__aeabi_dmul+0xcc>
    5516:	2500      	movs	r5, #0
    5518:	e7e3      	b.n	54e2 <__aeabi_dmul+0x496>
    551a:	2280      	movs	r2, #128	; 0x80
    551c:	2401      	movs	r4, #1
    551e:	0312      	lsls	r2, r2, #12
    5520:	4315      	orrs	r5, r2
    5522:	032d      	lsls	r5, r5, #12
    5524:	4698      	mov	r8, r3
    5526:	0b2d      	lsrs	r5, r5, #12
    5528:	400c      	ands	r4, r1
    552a:	4b04      	ldr	r3, [pc, #16]	; (553c <__aeabi_dmul+0x4f0>)
    552c:	e5f4      	b.n	5118 <__aeabi_dmul+0xcc>
    552e:	46c0      	nop			; (mov r8, r8)
    5530:	000003ff 	.word	0x000003ff
    5534:	feffffff 	.word	0xfeffffff
    5538:	000007fe 	.word	0x000007fe
    553c:	000007ff 	.word	0x000007ff

00005540 <__aeabi_dsub>:
    5540:	b5f0      	push	{r4, r5, r6, r7, lr}
    5542:	4657      	mov	r7, sl
    5544:	464e      	mov	r6, r9
    5546:	4645      	mov	r5, r8
    5548:	b4e0      	push	{r5, r6, r7}
    554a:	000e      	movs	r6, r1
    554c:	0011      	movs	r1, r2
    554e:	0ff2      	lsrs	r2, r6, #31
    5550:	4692      	mov	sl, r2
    5552:	00c5      	lsls	r5, r0, #3
    5554:	0f42      	lsrs	r2, r0, #29
    5556:	0318      	lsls	r0, r3, #12
    5558:	0337      	lsls	r7, r6, #12
    555a:	0074      	lsls	r4, r6, #1
    555c:	0a40      	lsrs	r0, r0, #9
    555e:	0f4e      	lsrs	r6, r1, #29
    5560:	0a7f      	lsrs	r7, r7, #9
    5562:	4330      	orrs	r0, r6
    5564:	4ecf      	ldr	r6, [pc, #828]	; (58a4 <__aeabi_dsub+0x364>)
    5566:	4317      	orrs	r7, r2
    5568:	005a      	lsls	r2, r3, #1
    556a:	0d64      	lsrs	r4, r4, #21
    556c:	0d52      	lsrs	r2, r2, #21
    556e:	0fdb      	lsrs	r3, r3, #31
    5570:	00c9      	lsls	r1, r1, #3
    5572:	42b2      	cmp	r2, r6
    5574:	d100      	bne.n	5578 <__aeabi_dsub+0x38>
    5576:	e0e5      	b.n	5744 <__aeabi_dsub+0x204>
    5578:	2601      	movs	r6, #1
    557a:	4073      	eors	r3, r6
    557c:	1aa6      	subs	r6, r4, r2
    557e:	46b4      	mov	ip, r6
    5580:	4553      	cmp	r3, sl
    5582:	d100      	bne.n	5586 <__aeabi_dsub+0x46>
    5584:	e0af      	b.n	56e6 <__aeabi_dsub+0x1a6>
    5586:	2e00      	cmp	r6, #0
    5588:	dc00      	bgt.n	558c <__aeabi_dsub+0x4c>
    558a:	e10d      	b.n	57a8 <__aeabi_dsub+0x268>
    558c:	2a00      	cmp	r2, #0
    558e:	d13a      	bne.n	5606 <__aeabi_dsub+0xc6>
    5590:	0003      	movs	r3, r0
    5592:	430b      	orrs	r3, r1
    5594:	d000      	beq.n	5598 <__aeabi_dsub+0x58>
    5596:	e0e4      	b.n	5762 <__aeabi_dsub+0x222>
    5598:	076b      	lsls	r3, r5, #29
    559a:	d009      	beq.n	55b0 <__aeabi_dsub+0x70>
    559c:	230f      	movs	r3, #15
    559e:	402b      	ands	r3, r5
    55a0:	2b04      	cmp	r3, #4
    55a2:	d005      	beq.n	55b0 <__aeabi_dsub+0x70>
    55a4:	1d2b      	adds	r3, r5, #4
    55a6:	42ab      	cmp	r3, r5
    55a8:	41ad      	sbcs	r5, r5
    55aa:	426d      	negs	r5, r5
    55ac:	197f      	adds	r7, r7, r5
    55ae:	001d      	movs	r5, r3
    55b0:	023b      	lsls	r3, r7, #8
    55b2:	d400      	bmi.n	55b6 <__aeabi_dsub+0x76>
    55b4:	e088      	b.n	56c8 <__aeabi_dsub+0x188>
    55b6:	4bbb      	ldr	r3, [pc, #748]	; (58a4 <__aeabi_dsub+0x364>)
    55b8:	3401      	adds	r4, #1
    55ba:	429c      	cmp	r4, r3
    55bc:	d100      	bne.n	55c0 <__aeabi_dsub+0x80>
    55be:	e110      	b.n	57e2 <__aeabi_dsub+0x2a2>
    55c0:	003a      	movs	r2, r7
    55c2:	4bb9      	ldr	r3, [pc, #740]	; (58a8 <__aeabi_dsub+0x368>)
    55c4:	4651      	mov	r1, sl
    55c6:	401a      	ands	r2, r3
    55c8:	2301      	movs	r3, #1
    55ca:	0750      	lsls	r0, r2, #29
    55cc:	08ed      	lsrs	r5, r5, #3
    55ce:	0252      	lsls	r2, r2, #9
    55d0:	0564      	lsls	r4, r4, #21
    55d2:	4305      	orrs	r5, r0
    55d4:	0b12      	lsrs	r2, r2, #12
    55d6:	0d64      	lsrs	r4, r4, #21
    55d8:	400b      	ands	r3, r1
    55da:	2100      	movs	r1, #0
    55dc:	0028      	movs	r0, r5
    55de:	0312      	lsls	r2, r2, #12
    55e0:	0d0d      	lsrs	r5, r1, #20
    55e2:	0b12      	lsrs	r2, r2, #12
    55e4:	0564      	lsls	r4, r4, #21
    55e6:	052d      	lsls	r5, r5, #20
    55e8:	4315      	orrs	r5, r2
    55ea:	0862      	lsrs	r2, r4, #1
    55ec:	4caf      	ldr	r4, [pc, #700]	; (58ac <__aeabi_dsub+0x36c>)
    55ee:	07db      	lsls	r3, r3, #31
    55f0:	402c      	ands	r4, r5
    55f2:	4314      	orrs	r4, r2
    55f4:	0064      	lsls	r4, r4, #1
    55f6:	0864      	lsrs	r4, r4, #1
    55f8:	431c      	orrs	r4, r3
    55fa:	0021      	movs	r1, r4
    55fc:	bc1c      	pop	{r2, r3, r4}
    55fe:	4690      	mov	r8, r2
    5600:	4699      	mov	r9, r3
    5602:	46a2      	mov	sl, r4
    5604:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5606:	4ba7      	ldr	r3, [pc, #668]	; (58a4 <__aeabi_dsub+0x364>)
    5608:	429c      	cmp	r4, r3
    560a:	d0c5      	beq.n	5598 <__aeabi_dsub+0x58>
    560c:	2380      	movs	r3, #128	; 0x80
    560e:	041b      	lsls	r3, r3, #16
    5610:	4318      	orrs	r0, r3
    5612:	4663      	mov	r3, ip
    5614:	2b38      	cmp	r3, #56	; 0x38
    5616:	dd00      	ble.n	561a <__aeabi_dsub+0xda>
    5618:	e0fd      	b.n	5816 <__aeabi_dsub+0x2d6>
    561a:	2b1f      	cmp	r3, #31
    561c:	dd00      	ble.n	5620 <__aeabi_dsub+0xe0>
    561e:	e130      	b.n	5882 <__aeabi_dsub+0x342>
    5620:	4662      	mov	r2, ip
    5622:	2320      	movs	r3, #32
    5624:	1a9b      	subs	r3, r3, r2
    5626:	0002      	movs	r2, r0
    5628:	409a      	lsls	r2, r3
    562a:	4666      	mov	r6, ip
    562c:	4690      	mov	r8, r2
    562e:	000a      	movs	r2, r1
    5630:	4099      	lsls	r1, r3
    5632:	40f2      	lsrs	r2, r6
    5634:	4646      	mov	r6, r8
    5636:	1e4b      	subs	r3, r1, #1
    5638:	4199      	sbcs	r1, r3
    563a:	4332      	orrs	r2, r6
    563c:	4311      	orrs	r1, r2
    563e:	4663      	mov	r3, ip
    5640:	0002      	movs	r2, r0
    5642:	40da      	lsrs	r2, r3
    5644:	1a69      	subs	r1, r5, r1
    5646:	428d      	cmp	r5, r1
    5648:	419b      	sbcs	r3, r3
    564a:	000d      	movs	r5, r1
    564c:	1aba      	subs	r2, r7, r2
    564e:	425b      	negs	r3, r3
    5650:	1ad7      	subs	r7, r2, r3
    5652:	023b      	lsls	r3, r7, #8
    5654:	d535      	bpl.n	56c2 <__aeabi_dsub+0x182>
    5656:	027a      	lsls	r2, r7, #9
    5658:	0a53      	lsrs	r3, r2, #9
    565a:	4698      	mov	r8, r3
    565c:	4643      	mov	r3, r8
    565e:	2b00      	cmp	r3, #0
    5660:	d100      	bne.n	5664 <__aeabi_dsub+0x124>
    5662:	e0c4      	b.n	57ee <__aeabi_dsub+0x2ae>
    5664:	4640      	mov	r0, r8
    5666:	f000 fd35 	bl	60d4 <__clzsi2>
    566a:	0003      	movs	r3, r0
    566c:	3b08      	subs	r3, #8
    566e:	2b1f      	cmp	r3, #31
    5670:	dd00      	ble.n	5674 <__aeabi_dsub+0x134>
    5672:	e0c5      	b.n	5800 <__aeabi_dsub+0x2c0>
    5674:	2220      	movs	r2, #32
    5676:	0029      	movs	r1, r5
    5678:	1ad2      	subs	r2, r2, r3
    567a:	4647      	mov	r7, r8
    567c:	40d1      	lsrs	r1, r2
    567e:	409f      	lsls	r7, r3
    5680:	000a      	movs	r2, r1
    5682:	409d      	lsls	r5, r3
    5684:	433a      	orrs	r2, r7
    5686:	429c      	cmp	r4, r3
    5688:	dd00      	ble.n	568c <__aeabi_dsub+0x14c>
    568a:	e0c0      	b.n	580e <__aeabi_dsub+0x2ce>
    568c:	1b1c      	subs	r4, r3, r4
    568e:	1c63      	adds	r3, r4, #1
    5690:	2b1f      	cmp	r3, #31
    5692:	dd00      	ble.n	5696 <__aeabi_dsub+0x156>
    5694:	e0e4      	b.n	5860 <__aeabi_dsub+0x320>
    5696:	2120      	movs	r1, #32
    5698:	0014      	movs	r4, r2
    569a:	0028      	movs	r0, r5
    569c:	1ac9      	subs	r1, r1, r3
    569e:	40d8      	lsrs	r0, r3
    56a0:	408c      	lsls	r4, r1
    56a2:	408d      	lsls	r5, r1
    56a4:	4304      	orrs	r4, r0
    56a6:	40da      	lsrs	r2, r3
    56a8:	1e68      	subs	r0, r5, #1
    56aa:	4185      	sbcs	r5, r0
    56ac:	0017      	movs	r7, r2
    56ae:	4325      	orrs	r5, r4
    56b0:	2400      	movs	r4, #0
    56b2:	e771      	b.n	5598 <__aeabi_dsub+0x58>
    56b4:	4642      	mov	r2, r8
    56b6:	4663      	mov	r3, ip
    56b8:	431a      	orrs	r2, r3
    56ba:	d100      	bne.n	56be <__aeabi_dsub+0x17e>
    56bc:	e24c      	b.n	5b58 <__aeabi_dsub+0x618>
    56be:	4667      	mov	r7, ip
    56c0:	4645      	mov	r5, r8
    56c2:	076b      	lsls	r3, r5, #29
    56c4:	d000      	beq.n	56c8 <__aeabi_dsub+0x188>
    56c6:	e769      	b.n	559c <__aeabi_dsub+0x5c>
    56c8:	2301      	movs	r3, #1
    56ca:	4651      	mov	r1, sl
    56cc:	0778      	lsls	r0, r7, #29
    56ce:	08ed      	lsrs	r5, r5, #3
    56d0:	08fa      	lsrs	r2, r7, #3
    56d2:	400b      	ands	r3, r1
    56d4:	4305      	orrs	r5, r0
    56d6:	4973      	ldr	r1, [pc, #460]	; (58a4 <__aeabi_dsub+0x364>)
    56d8:	428c      	cmp	r4, r1
    56da:	d038      	beq.n	574e <__aeabi_dsub+0x20e>
    56dc:	0312      	lsls	r2, r2, #12
    56de:	0564      	lsls	r4, r4, #21
    56e0:	0b12      	lsrs	r2, r2, #12
    56e2:	0d64      	lsrs	r4, r4, #21
    56e4:	e779      	b.n	55da <__aeabi_dsub+0x9a>
    56e6:	2e00      	cmp	r6, #0
    56e8:	dc00      	bgt.n	56ec <__aeabi_dsub+0x1ac>
    56ea:	e09a      	b.n	5822 <__aeabi_dsub+0x2e2>
    56ec:	2a00      	cmp	r2, #0
    56ee:	d047      	beq.n	5780 <__aeabi_dsub+0x240>
    56f0:	4a6c      	ldr	r2, [pc, #432]	; (58a4 <__aeabi_dsub+0x364>)
    56f2:	4294      	cmp	r4, r2
    56f4:	d100      	bne.n	56f8 <__aeabi_dsub+0x1b8>
    56f6:	e74f      	b.n	5598 <__aeabi_dsub+0x58>
    56f8:	2280      	movs	r2, #128	; 0x80
    56fa:	0412      	lsls	r2, r2, #16
    56fc:	4310      	orrs	r0, r2
    56fe:	4662      	mov	r2, ip
    5700:	2a38      	cmp	r2, #56	; 0x38
    5702:	dc00      	bgt.n	5706 <__aeabi_dsub+0x1c6>
    5704:	e108      	b.n	5918 <__aeabi_dsub+0x3d8>
    5706:	4301      	orrs	r1, r0
    5708:	1e48      	subs	r0, r1, #1
    570a:	4181      	sbcs	r1, r0
    570c:	2200      	movs	r2, #0
    570e:	b2c9      	uxtb	r1, r1
    5710:	1949      	adds	r1, r1, r5
    5712:	19d2      	adds	r2, r2, r7
    5714:	42a9      	cmp	r1, r5
    5716:	41bf      	sbcs	r7, r7
    5718:	000d      	movs	r5, r1
    571a:	427f      	negs	r7, r7
    571c:	18bf      	adds	r7, r7, r2
    571e:	023a      	lsls	r2, r7, #8
    5720:	d400      	bmi.n	5724 <__aeabi_dsub+0x1e4>
    5722:	e142      	b.n	59aa <__aeabi_dsub+0x46a>
    5724:	4a5f      	ldr	r2, [pc, #380]	; (58a4 <__aeabi_dsub+0x364>)
    5726:	3401      	adds	r4, #1
    5728:	4294      	cmp	r4, r2
    572a:	d100      	bne.n	572e <__aeabi_dsub+0x1ee>
    572c:	e14e      	b.n	59cc <__aeabi_dsub+0x48c>
    572e:	2001      	movs	r0, #1
    5730:	4a5d      	ldr	r2, [pc, #372]	; (58a8 <__aeabi_dsub+0x368>)
    5732:	0869      	lsrs	r1, r5, #1
    5734:	403a      	ands	r2, r7
    5736:	4028      	ands	r0, r5
    5738:	4308      	orrs	r0, r1
    573a:	07d5      	lsls	r5, r2, #31
    573c:	4305      	orrs	r5, r0
    573e:	0857      	lsrs	r7, r2, #1
    5740:	469a      	mov	sl, r3
    5742:	e729      	b.n	5598 <__aeabi_dsub+0x58>
    5744:	0006      	movs	r6, r0
    5746:	430e      	orrs	r6, r1
    5748:	d000      	beq.n	574c <__aeabi_dsub+0x20c>
    574a:	e717      	b.n	557c <__aeabi_dsub+0x3c>
    574c:	e714      	b.n	5578 <__aeabi_dsub+0x38>
    574e:	0029      	movs	r1, r5
    5750:	4311      	orrs	r1, r2
    5752:	d100      	bne.n	5756 <__aeabi_dsub+0x216>
    5754:	e1f9      	b.n	5b4a <__aeabi_dsub+0x60a>
    5756:	2180      	movs	r1, #128	; 0x80
    5758:	0309      	lsls	r1, r1, #12
    575a:	430a      	orrs	r2, r1
    575c:	0312      	lsls	r2, r2, #12
    575e:	0b12      	lsrs	r2, r2, #12
    5760:	e73b      	b.n	55da <__aeabi_dsub+0x9a>
    5762:	2301      	movs	r3, #1
    5764:	425b      	negs	r3, r3
    5766:	4698      	mov	r8, r3
    5768:	44c4      	add	ip, r8
    576a:	4663      	mov	r3, ip
    576c:	2b00      	cmp	r3, #0
    576e:	d172      	bne.n	5856 <__aeabi_dsub+0x316>
    5770:	1a69      	subs	r1, r5, r1
    5772:	428d      	cmp	r5, r1
    5774:	419b      	sbcs	r3, r3
    5776:	1a3f      	subs	r7, r7, r0
    5778:	425b      	negs	r3, r3
    577a:	1aff      	subs	r7, r7, r3
    577c:	000d      	movs	r5, r1
    577e:	e768      	b.n	5652 <__aeabi_dsub+0x112>
    5780:	0002      	movs	r2, r0
    5782:	430a      	orrs	r2, r1
    5784:	d100      	bne.n	5788 <__aeabi_dsub+0x248>
    5786:	e707      	b.n	5598 <__aeabi_dsub+0x58>
    5788:	2201      	movs	r2, #1
    578a:	4252      	negs	r2, r2
    578c:	4690      	mov	r8, r2
    578e:	44c4      	add	ip, r8
    5790:	4662      	mov	r2, ip
    5792:	2a00      	cmp	r2, #0
    5794:	d000      	beq.n	5798 <__aeabi_dsub+0x258>
    5796:	e0e6      	b.n	5966 <__aeabi_dsub+0x426>
    5798:	1869      	adds	r1, r5, r1
    579a:	42a9      	cmp	r1, r5
    579c:	41b6      	sbcs	r6, r6
    579e:	183f      	adds	r7, r7, r0
    57a0:	4276      	negs	r6, r6
    57a2:	19f7      	adds	r7, r6, r7
    57a4:	000d      	movs	r5, r1
    57a6:	e7ba      	b.n	571e <__aeabi_dsub+0x1de>
    57a8:	2e00      	cmp	r6, #0
    57aa:	d000      	beq.n	57ae <__aeabi_dsub+0x26e>
    57ac:	e080      	b.n	58b0 <__aeabi_dsub+0x370>
    57ae:	1c62      	adds	r2, r4, #1
    57b0:	0552      	lsls	r2, r2, #21
    57b2:	0d52      	lsrs	r2, r2, #21
    57b4:	2a01      	cmp	r2, #1
    57b6:	dc00      	bgt.n	57ba <__aeabi_dsub+0x27a>
    57b8:	e0f9      	b.n	59ae <__aeabi_dsub+0x46e>
    57ba:	1a6a      	subs	r2, r5, r1
    57bc:	4691      	mov	r9, r2
    57be:	454d      	cmp	r5, r9
    57c0:	41b6      	sbcs	r6, r6
    57c2:	1a3a      	subs	r2, r7, r0
    57c4:	4276      	negs	r6, r6
    57c6:	1b92      	subs	r2, r2, r6
    57c8:	4690      	mov	r8, r2
    57ca:	0212      	lsls	r2, r2, #8
    57cc:	d400      	bmi.n	57d0 <__aeabi_dsub+0x290>
    57ce:	e099      	b.n	5904 <__aeabi_dsub+0x3c4>
    57d0:	1b4d      	subs	r5, r1, r5
    57d2:	42a9      	cmp	r1, r5
    57d4:	4189      	sbcs	r1, r1
    57d6:	1bc7      	subs	r7, r0, r7
    57d8:	4249      	negs	r1, r1
    57da:	1a7a      	subs	r2, r7, r1
    57dc:	4690      	mov	r8, r2
    57de:	469a      	mov	sl, r3
    57e0:	e73c      	b.n	565c <__aeabi_dsub+0x11c>
    57e2:	4652      	mov	r2, sl
    57e4:	2301      	movs	r3, #1
    57e6:	2500      	movs	r5, #0
    57e8:	4013      	ands	r3, r2
    57ea:	2200      	movs	r2, #0
    57ec:	e6f5      	b.n	55da <__aeabi_dsub+0x9a>
    57ee:	0028      	movs	r0, r5
    57f0:	f000 fc70 	bl	60d4 <__clzsi2>
    57f4:	3020      	adds	r0, #32
    57f6:	0003      	movs	r3, r0
    57f8:	3b08      	subs	r3, #8
    57fa:	2b1f      	cmp	r3, #31
    57fc:	dc00      	bgt.n	5800 <__aeabi_dsub+0x2c0>
    57fe:	e739      	b.n	5674 <__aeabi_dsub+0x134>
    5800:	002a      	movs	r2, r5
    5802:	3828      	subs	r0, #40	; 0x28
    5804:	4082      	lsls	r2, r0
    5806:	2500      	movs	r5, #0
    5808:	429c      	cmp	r4, r3
    580a:	dc00      	bgt.n	580e <__aeabi_dsub+0x2ce>
    580c:	e73e      	b.n	568c <__aeabi_dsub+0x14c>
    580e:	4f26      	ldr	r7, [pc, #152]	; (58a8 <__aeabi_dsub+0x368>)
    5810:	1ae4      	subs	r4, r4, r3
    5812:	4017      	ands	r7, r2
    5814:	e6c0      	b.n	5598 <__aeabi_dsub+0x58>
    5816:	4301      	orrs	r1, r0
    5818:	1e48      	subs	r0, r1, #1
    581a:	4181      	sbcs	r1, r0
    581c:	2200      	movs	r2, #0
    581e:	b2c9      	uxtb	r1, r1
    5820:	e710      	b.n	5644 <__aeabi_dsub+0x104>
    5822:	2e00      	cmp	r6, #0
    5824:	d000      	beq.n	5828 <__aeabi_dsub+0x2e8>
    5826:	e0f1      	b.n	5a0c <__aeabi_dsub+0x4cc>
    5828:	1c62      	adds	r2, r4, #1
    582a:	4694      	mov	ip, r2
    582c:	0552      	lsls	r2, r2, #21
    582e:	0d52      	lsrs	r2, r2, #21
    5830:	2a01      	cmp	r2, #1
    5832:	dc00      	bgt.n	5836 <__aeabi_dsub+0x2f6>
    5834:	e0a0      	b.n	5978 <__aeabi_dsub+0x438>
    5836:	4a1b      	ldr	r2, [pc, #108]	; (58a4 <__aeabi_dsub+0x364>)
    5838:	4594      	cmp	ip, r2
    583a:	d100      	bne.n	583e <__aeabi_dsub+0x2fe>
    583c:	e0c5      	b.n	59ca <__aeabi_dsub+0x48a>
    583e:	1869      	adds	r1, r5, r1
    5840:	42a9      	cmp	r1, r5
    5842:	4192      	sbcs	r2, r2
    5844:	183f      	adds	r7, r7, r0
    5846:	4252      	negs	r2, r2
    5848:	19d2      	adds	r2, r2, r7
    584a:	0849      	lsrs	r1, r1, #1
    584c:	07d5      	lsls	r5, r2, #31
    584e:	430d      	orrs	r5, r1
    5850:	0857      	lsrs	r7, r2, #1
    5852:	4664      	mov	r4, ip
    5854:	e6a0      	b.n	5598 <__aeabi_dsub+0x58>
    5856:	4b13      	ldr	r3, [pc, #76]	; (58a4 <__aeabi_dsub+0x364>)
    5858:	429c      	cmp	r4, r3
    585a:	d000      	beq.n	585e <__aeabi_dsub+0x31e>
    585c:	e6d9      	b.n	5612 <__aeabi_dsub+0xd2>
    585e:	e69b      	b.n	5598 <__aeabi_dsub+0x58>
    5860:	0011      	movs	r1, r2
    5862:	3c1f      	subs	r4, #31
    5864:	40e1      	lsrs	r1, r4
    5866:	000c      	movs	r4, r1
    5868:	2b20      	cmp	r3, #32
    586a:	d100      	bne.n	586e <__aeabi_dsub+0x32e>
    586c:	e080      	b.n	5970 <__aeabi_dsub+0x430>
    586e:	2140      	movs	r1, #64	; 0x40
    5870:	1acb      	subs	r3, r1, r3
    5872:	409a      	lsls	r2, r3
    5874:	4315      	orrs	r5, r2
    5876:	1e6a      	subs	r2, r5, #1
    5878:	4195      	sbcs	r5, r2
    587a:	2700      	movs	r7, #0
    587c:	4325      	orrs	r5, r4
    587e:	2400      	movs	r4, #0
    5880:	e71f      	b.n	56c2 <__aeabi_dsub+0x182>
    5882:	4663      	mov	r3, ip
    5884:	0002      	movs	r2, r0
    5886:	3b20      	subs	r3, #32
    5888:	40da      	lsrs	r2, r3
    588a:	4663      	mov	r3, ip
    588c:	2b20      	cmp	r3, #32
    588e:	d071      	beq.n	5974 <__aeabi_dsub+0x434>
    5890:	2340      	movs	r3, #64	; 0x40
    5892:	4666      	mov	r6, ip
    5894:	1b9b      	subs	r3, r3, r6
    5896:	4098      	lsls	r0, r3
    5898:	4301      	orrs	r1, r0
    589a:	1e48      	subs	r0, r1, #1
    589c:	4181      	sbcs	r1, r0
    589e:	4311      	orrs	r1, r2
    58a0:	2200      	movs	r2, #0
    58a2:	e6cf      	b.n	5644 <__aeabi_dsub+0x104>
    58a4:	000007ff 	.word	0x000007ff
    58a8:	ff7fffff 	.word	0xff7fffff
    58ac:	800fffff 	.word	0x800fffff
    58b0:	2c00      	cmp	r4, #0
    58b2:	d048      	beq.n	5946 <__aeabi_dsub+0x406>
    58b4:	4cca      	ldr	r4, [pc, #808]	; (5be0 <__aeabi_dsub+0x6a0>)
    58b6:	42a2      	cmp	r2, r4
    58b8:	d100      	bne.n	58bc <__aeabi_dsub+0x37c>
    58ba:	e0a2      	b.n	5a02 <__aeabi_dsub+0x4c2>
    58bc:	4274      	negs	r4, r6
    58be:	46a1      	mov	r9, r4
    58c0:	2480      	movs	r4, #128	; 0x80
    58c2:	0424      	lsls	r4, r4, #16
    58c4:	4327      	orrs	r7, r4
    58c6:	464c      	mov	r4, r9
    58c8:	2c38      	cmp	r4, #56	; 0x38
    58ca:	dd00      	ble.n	58ce <__aeabi_dsub+0x38e>
    58cc:	e0db      	b.n	5a86 <__aeabi_dsub+0x546>
    58ce:	2c1f      	cmp	r4, #31
    58d0:	dd00      	ble.n	58d4 <__aeabi_dsub+0x394>
    58d2:	e144      	b.n	5b5e <__aeabi_dsub+0x61e>
    58d4:	464e      	mov	r6, r9
    58d6:	2420      	movs	r4, #32
    58d8:	1ba4      	subs	r4, r4, r6
    58da:	003e      	movs	r6, r7
    58dc:	40a6      	lsls	r6, r4
    58de:	46a2      	mov	sl, r4
    58e0:	46b0      	mov	r8, r6
    58e2:	464c      	mov	r4, r9
    58e4:	002e      	movs	r6, r5
    58e6:	40e6      	lsrs	r6, r4
    58e8:	46b4      	mov	ip, r6
    58ea:	4646      	mov	r6, r8
    58ec:	4664      	mov	r4, ip
    58ee:	4326      	orrs	r6, r4
    58f0:	4654      	mov	r4, sl
    58f2:	40a5      	lsls	r5, r4
    58f4:	1e6c      	subs	r4, r5, #1
    58f6:	41a5      	sbcs	r5, r4
    58f8:	0034      	movs	r4, r6
    58fa:	432c      	orrs	r4, r5
    58fc:	464d      	mov	r5, r9
    58fe:	40ef      	lsrs	r7, r5
    5900:	1b0d      	subs	r5, r1, r4
    5902:	e028      	b.n	5956 <__aeabi_dsub+0x416>
    5904:	464a      	mov	r2, r9
    5906:	4643      	mov	r3, r8
    5908:	464d      	mov	r5, r9
    590a:	431a      	orrs	r2, r3
    590c:	d000      	beq.n	5910 <__aeabi_dsub+0x3d0>
    590e:	e6a5      	b.n	565c <__aeabi_dsub+0x11c>
    5910:	2300      	movs	r3, #0
    5912:	2400      	movs	r4, #0
    5914:	2500      	movs	r5, #0
    5916:	e6de      	b.n	56d6 <__aeabi_dsub+0x196>
    5918:	2a1f      	cmp	r2, #31
    591a:	dc5a      	bgt.n	59d2 <__aeabi_dsub+0x492>
    591c:	4666      	mov	r6, ip
    591e:	2220      	movs	r2, #32
    5920:	1b92      	subs	r2, r2, r6
    5922:	0006      	movs	r6, r0
    5924:	4096      	lsls	r6, r2
    5926:	4691      	mov	r9, r2
    5928:	46b0      	mov	r8, r6
    592a:	4662      	mov	r2, ip
    592c:	000e      	movs	r6, r1
    592e:	40d6      	lsrs	r6, r2
    5930:	4642      	mov	r2, r8
    5932:	4316      	orrs	r6, r2
    5934:	464a      	mov	r2, r9
    5936:	4091      	lsls	r1, r2
    5938:	1e4a      	subs	r2, r1, #1
    593a:	4191      	sbcs	r1, r2
    593c:	0002      	movs	r2, r0
    593e:	4660      	mov	r0, ip
    5940:	4331      	orrs	r1, r6
    5942:	40c2      	lsrs	r2, r0
    5944:	e6e4      	b.n	5710 <__aeabi_dsub+0x1d0>
    5946:	003c      	movs	r4, r7
    5948:	432c      	orrs	r4, r5
    594a:	d05a      	beq.n	5a02 <__aeabi_dsub+0x4c2>
    594c:	43f4      	mvns	r4, r6
    594e:	46a1      	mov	r9, r4
    5950:	2c00      	cmp	r4, #0
    5952:	d152      	bne.n	59fa <__aeabi_dsub+0x4ba>
    5954:	1b4d      	subs	r5, r1, r5
    5956:	42a9      	cmp	r1, r5
    5958:	4189      	sbcs	r1, r1
    595a:	1bc7      	subs	r7, r0, r7
    595c:	4249      	negs	r1, r1
    595e:	1a7f      	subs	r7, r7, r1
    5960:	0014      	movs	r4, r2
    5962:	469a      	mov	sl, r3
    5964:	e675      	b.n	5652 <__aeabi_dsub+0x112>
    5966:	4a9e      	ldr	r2, [pc, #632]	; (5be0 <__aeabi_dsub+0x6a0>)
    5968:	4294      	cmp	r4, r2
    596a:	d000      	beq.n	596e <__aeabi_dsub+0x42e>
    596c:	e6c7      	b.n	56fe <__aeabi_dsub+0x1be>
    596e:	e613      	b.n	5598 <__aeabi_dsub+0x58>
    5970:	2200      	movs	r2, #0
    5972:	e77f      	b.n	5874 <__aeabi_dsub+0x334>
    5974:	2000      	movs	r0, #0
    5976:	e78f      	b.n	5898 <__aeabi_dsub+0x358>
    5978:	2c00      	cmp	r4, #0
    597a:	d000      	beq.n	597e <__aeabi_dsub+0x43e>
    597c:	e0c8      	b.n	5b10 <__aeabi_dsub+0x5d0>
    597e:	003b      	movs	r3, r7
    5980:	432b      	orrs	r3, r5
    5982:	d100      	bne.n	5986 <__aeabi_dsub+0x446>
    5984:	e10f      	b.n	5ba6 <__aeabi_dsub+0x666>
    5986:	0003      	movs	r3, r0
    5988:	430b      	orrs	r3, r1
    598a:	d100      	bne.n	598e <__aeabi_dsub+0x44e>
    598c:	e604      	b.n	5598 <__aeabi_dsub+0x58>
    598e:	1869      	adds	r1, r5, r1
    5990:	42a9      	cmp	r1, r5
    5992:	419b      	sbcs	r3, r3
    5994:	183f      	adds	r7, r7, r0
    5996:	425b      	negs	r3, r3
    5998:	19df      	adds	r7, r3, r7
    599a:	023b      	lsls	r3, r7, #8
    599c:	d400      	bmi.n	59a0 <__aeabi_dsub+0x460>
    599e:	e11a      	b.n	5bd6 <__aeabi_dsub+0x696>
    59a0:	4b90      	ldr	r3, [pc, #576]	; (5be4 <__aeabi_dsub+0x6a4>)
    59a2:	000d      	movs	r5, r1
    59a4:	401f      	ands	r7, r3
    59a6:	4664      	mov	r4, ip
    59a8:	e5f6      	b.n	5598 <__aeabi_dsub+0x58>
    59aa:	469a      	mov	sl, r3
    59ac:	e689      	b.n	56c2 <__aeabi_dsub+0x182>
    59ae:	003a      	movs	r2, r7
    59b0:	432a      	orrs	r2, r5
    59b2:	2c00      	cmp	r4, #0
    59b4:	d15c      	bne.n	5a70 <__aeabi_dsub+0x530>
    59b6:	2a00      	cmp	r2, #0
    59b8:	d175      	bne.n	5aa6 <__aeabi_dsub+0x566>
    59ba:	0002      	movs	r2, r0
    59bc:	430a      	orrs	r2, r1
    59be:	d100      	bne.n	59c2 <__aeabi_dsub+0x482>
    59c0:	e0ca      	b.n	5b58 <__aeabi_dsub+0x618>
    59c2:	0007      	movs	r7, r0
    59c4:	000d      	movs	r5, r1
    59c6:	469a      	mov	sl, r3
    59c8:	e5e6      	b.n	5598 <__aeabi_dsub+0x58>
    59ca:	4664      	mov	r4, ip
    59cc:	2200      	movs	r2, #0
    59ce:	2500      	movs	r5, #0
    59d0:	e681      	b.n	56d6 <__aeabi_dsub+0x196>
    59d2:	4662      	mov	r2, ip
    59d4:	0006      	movs	r6, r0
    59d6:	3a20      	subs	r2, #32
    59d8:	40d6      	lsrs	r6, r2
    59da:	4662      	mov	r2, ip
    59dc:	46b0      	mov	r8, r6
    59de:	2a20      	cmp	r2, #32
    59e0:	d100      	bne.n	59e4 <__aeabi_dsub+0x4a4>
    59e2:	e0b7      	b.n	5b54 <__aeabi_dsub+0x614>
    59e4:	2240      	movs	r2, #64	; 0x40
    59e6:	4666      	mov	r6, ip
    59e8:	1b92      	subs	r2, r2, r6
    59ea:	4090      	lsls	r0, r2
    59ec:	4301      	orrs	r1, r0
    59ee:	4642      	mov	r2, r8
    59f0:	1e48      	subs	r0, r1, #1
    59f2:	4181      	sbcs	r1, r0
    59f4:	4311      	orrs	r1, r2
    59f6:	2200      	movs	r2, #0
    59f8:	e68a      	b.n	5710 <__aeabi_dsub+0x1d0>
    59fa:	4c79      	ldr	r4, [pc, #484]	; (5be0 <__aeabi_dsub+0x6a0>)
    59fc:	42a2      	cmp	r2, r4
    59fe:	d000      	beq.n	5a02 <__aeabi_dsub+0x4c2>
    5a00:	e761      	b.n	58c6 <__aeabi_dsub+0x386>
    5a02:	0007      	movs	r7, r0
    5a04:	000d      	movs	r5, r1
    5a06:	0014      	movs	r4, r2
    5a08:	469a      	mov	sl, r3
    5a0a:	e5c5      	b.n	5598 <__aeabi_dsub+0x58>
    5a0c:	2c00      	cmp	r4, #0
    5a0e:	d141      	bne.n	5a94 <__aeabi_dsub+0x554>
    5a10:	003c      	movs	r4, r7
    5a12:	432c      	orrs	r4, r5
    5a14:	d078      	beq.n	5b08 <__aeabi_dsub+0x5c8>
    5a16:	43f4      	mvns	r4, r6
    5a18:	46a1      	mov	r9, r4
    5a1a:	2c00      	cmp	r4, #0
    5a1c:	d020      	beq.n	5a60 <__aeabi_dsub+0x520>
    5a1e:	4c70      	ldr	r4, [pc, #448]	; (5be0 <__aeabi_dsub+0x6a0>)
    5a20:	42a2      	cmp	r2, r4
    5a22:	d071      	beq.n	5b08 <__aeabi_dsub+0x5c8>
    5a24:	464c      	mov	r4, r9
    5a26:	2c38      	cmp	r4, #56	; 0x38
    5a28:	dd00      	ble.n	5a2c <__aeabi_dsub+0x4ec>
    5a2a:	e0b2      	b.n	5b92 <__aeabi_dsub+0x652>
    5a2c:	2c1f      	cmp	r4, #31
    5a2e:	dd00      	ble.n	5a32 <__aeabi_dsub+0x4f2>
    5a30:	e0bc      	b.n	5bac <__aeabi_dsub+0x66c>
    5a32:	2620      	movs	r6, #32
    5a34:	1b34      	subs	r4, r6, r4
    5a36:	46a2      	mov	sl, r4
    5a38:	003c      	movs	r4, r7
    5a3a:	4656      	mov	r6, sl
    5a3c:	40b4      	lsls	r4, r6
    5a3e:	464e      	mov	r6, r9
    5a40:	46a0      	mov	r8, r4
    5a42:	002c      	movs	r4, r5
    5a44:	40f4      	lsrs	r4, r6
    5a46:	46a4      	mov	ip, r4
    5a48:	4644      	mov	r4, r8
    5a4a:	4666      	mov	r6, ip
    5a4c:	4334      	orrs	r4, r6
    5a4e:	46a4      	mov	ip, r4
    5a50:	4654      	mov	r4, sl
    5a52:	40a5      	lsls	r5, r4
    5a54:	4664      	mov	r4, ip
    5a56:	1e6e      	subs	r6, r5, #1
    5a58:	41b5      	sbcs	r5, r6
    5a5a:	4325      	orrs	r5, r4
    5a5c:	464c      	mov	r4, r9
    5a5e:	40e7      	lsrs	r7, r4
    5a60:	186d      	adds	r5, r5, r1
    5a62:	428d      	cmp	r5, r1
    5a64:	4189      	sbcs	r1, r1
    5a66:	183f      	adds	r7, r7, r0
    5a68:	4249      	negs	r1, r1
    5a6a:	19cf      	adds	r7, r1, r7
    5a6c:	0014      	movs	r4, r2
    5a6e:	e656      	b.n	571e <__aeabi_dsub+0x1de>
    5a70:	2a00      	cmp	r2, #0
    5a72:	d12f      	bne.n	5ad4 <__aeabi_dsub+0x594>
    5a74:	0002      	movs	r2, r0
    5a76:	430a      	orrs	r2, r1
    5a78:	d100      	bne.n	5a7c <__aeabi_dsub+0x53c>
    5a7a:	e084      	b.n	5b86 <__aeabi_dsub+0x646>
    5a7c:	0007      	movs	r7, r0
    5a7e:	000d      	movs	r5, r1
    5a80:	469a      	mov	sl, r3
    5a82:	4c57      	ldr	r4, [pc, #348]	; (5be0 <__aeabi_dsub+0x6a0>)
    5a84:	e588      	b.n	5598 <__aeabi_dsub+0x58>
    5a86:	433d      	orrs	r5, r7
    5a88:	1e6f      	subs	r7, r5, #1
    5a8a:	41bd      	sbcs	r5, r7
    5a8c:	b2ec      	uxtb	r4, r5
    5a8e:	2700      	movs	r7, #0
    5a90:	1b0d      	subs	r5, r1, r4
    5a92:	e760      	b.n	5956 <__aeabi_dsub+0x416>
    5a94:	4c52      	ldr	r4, [pc, #328]	; (5be0 <__aeabi_dsub+0x6a0>)
    5a96:	42a2      	cmp	r2, r4
    5a98:	d036      	beq.n	5b08 <__aeabi_dsub+0x5c8>
    5a9a:	4274      	negs	r4, r6
    5a9c:	2680      	movs	r6, #128	; 0x80
    5a9e:	0436      	lsls	r6, r6, #16
    5aa0:	46a1      	mov	r9, r4
    5aa2:	4337      	orrs	r7, r6
    5aa4:	e7be      	b.n	5a24 <__aeabi_dsub+0x4e4>
    5aa6:	0002      	movs	r2, r0
    5aa8:	430a      	orrs	r2, r1
    5aaa:	d100      	bne.n	5aae <__aeabi_dsub+0x56e>
    5aac:	e574      	b.n	5598 <__aeabi_dsub+0x58>
    5aae:	1a6a      	subs	r2, r5, r1
    5ab0:	4690      	mov	r8, r2
    5ab2:	4545      	cmp	r5, r8
    5ab4:	41b6      	sbcs	r6, r6
    5ab6:	1a3a      	subs	r2, r7, r0
    5ab8:	4276      	negs	r6, r6
    5aba:	1b92      	subs	r2, r2, r6
    5abc:	4694      	mov	ip, r2
    5abe:	0212      	lsls	r2, r2, #8
    5ac0:	d400      	bmi.n	5ac4 <__aeabi_dsub+0x584>
    5ac2:	e5f7      	b.n	56b4 <__aeabi_dsub+0x174>
    5ac4:	1b4d      	subs	r5, r1, r5
    5ac6:	42a9      	cmp	r1, r5
    5ac8:	4189      	sbcs	r1, r1
    5aca:	1bc7      	subs	r7, r0, r7
    5acc:	4249      	negs	r1, r1
    5ace:	1a7f      	subs	r7, r7, r1
    5ad0:	469a      	mov	sl, r3
    5ad2:	e561      	b.n	5598 <__aeabi_dsub+0x58>
    5ad4:	0002      	movs	r2, r0
    5ad6:	430a      	orrs	r2, r1
    5ad8:	d03a      	beq.n	5b50 <__aeabi_dsub+0x610>
    5ada:	08ed      	lsrs	r5, r5, #3
    5adc:	077c      	lsls	r4, r7, #29
    5ade:	432c      	orrs	r4, r5
    5ae0:	2580      	movs	r5, #128	; 0x80
    5ae2:	08fa      	lsrs	r2, r7, #3
    5ae4:	032d      	lsls	r5, r5, #12
    5ae6:	422a      	tst	r2, r5
    5ae8:	d008      	beq.n	5afc <__aeabi_dsub+0x5bc>
    5aea:	08c7      	lsrs	r7, r0, #3
    5aec:	422f      	tst	r7, r5
    5aee:	d105      	bne.n	5afc <__aeabi_dsub+0x5bc>
    5af0:	0745      	lsls	r5, r0, #29
    5af2:	002c      	movs	r4, r5
    5af4:	003a      	movs	r2, r7
    5af6:	469a      	mov	sl, r3
    5af8:	08c9      	lsrs	r1, r1, #3
    5afa:	430c      	orrs	r4, r1
    5afc:	0f67      	lsrs	r7, r4, #29
    5afe:	00d2      	lsls	r2, r2, #3
    5b00:	00e5      	lsls	r5, r4, #3
    5b02:	4317      	orrs	r7, r2
    5b04:	4c36      	ldr	r4, [pc, #216]	; (5be0 <__aeabi_dsub+0x6a0>)
    5b06:	e547      	b.n	5598 <__aeabi_dsub+0x58>
    5b08:	0007      	movs	r7, r0
    5b0a:	000d      	movs	r5, r1
    5b0c:	0014      	movs	r4, r2
    5b0e:	e543      	b.n	5598 <__aeabi_dsub+0x58>
    5b10:	003a      	movs	r2, r7
    5b12:	432a      	orrs	r2, r5
    5b14:	d043      	beq.n	5b9e <__aeabi_dsub+0x65e>
    5b16:	0002      	movs	r2, r0
    5b18:	430a      	orrs	r2, r1
    5b1a:	d019      	beq.n	5b50 <__aeabi_dsub+0x610>
    5b1c:	08ed      	lsrs	r5, r5, #3
    5b1e:	077c      	lsls	r4, r7, #29
    5b20:	432c      	orrs	r4, r5
    5b22:	2580      	movs	r5, #128	; 0x80
    5b24:	08fa      	lsrs	r2, r7, #3
    5b26:	032d      	lsls	r5, r5, #12
    5b28:	422a      	tst	r2, r5
    5b2a:	d007      	beq.n	5b3c <__aeabi_dsub+0x5fc>
    5b2c:	08c6      	lsrs	r6, r0, #3
    5b2e:	422e      	tst	r6, r5
    5b30:	d104      	bne.n	5b3c <__aeabi_dsub+0x5fc>
    5b32:	0747      	lsls	r7, r0, #29
    5b34:	003c      	movs	r4, r7
    5b36:	0032      	movs	r2, r6
    5b38:	08c9      	lsrs	r1, r1, #3
    5b3a:	430c      	orrs	r4, r1
    5b3c:	00d7      	lsls	r7, r2, #3
    5b3e:	0f62      	lsrs	r2, r4, #29
    5b40:	00e5      	lsls	r5, r4, #3
    5b42:	4317      	orrs	r7, r2
    5b44:	469a      	mov	sl, r3
    5b46:	4c26      	ldr	r4, [pc, #152]	; (5be0 <__aeabi_dsub+0x6a0>)
    5b48:	e526      	b.n	5598 <__aeabi_dsub+0x58>
    5b4a:	2200      	movs	r2, #0
    5b4c:	2500      	movs	r5, #0
    5b4e:	e544      	b.n	55da <__aeabi_dsub+0x9a>
    5b50:	4c23      	ldr	r4, [pc, #140]	; (5be0 <__aeabi_dsub+0x6a0>)
    5b52:	e521      	b.n	5598 <__aeabi_dsub+0x58>
    5b54:	2000      	movs	r0, #0
    5b56:	e749      	b.n	59ec <__aeabi_dsub+0x4ac>
    5b58:	2300      	movs	r3, #0
    5b5a:	2500      	movs	r5, #0
    5b5c:	e5bb      	b.n	56d6 <__aeabi_dsub+0x196>
    5b5e:	464c      	mov	r4, r9
    5b60:	003e      	movs	r6, r7
    5b62:	3c20      	subs	r4, #32
    5b64:	40e6      	lsrs	r6, r4
    5b66:	464c      	mov	r4, r9
    5b68:	46b4      	mov	ip, r6
    5b6a:	2c20      	cmp	r4, #32
    5b6c:	d031      	beq.n	5bd2 <__aeabi_dsub+0x692>
    5b6e:	2440      	movs	r4, #64	; 0x40
    5b70:	464e      	mov	r6, r9
    5b72:	1ba6      	subs	r6, r4, r6
    5b74:	40b7      	lsls	r7, r6
    5b76:	433d      	orrs	r5, r7
    5b78:	1e6c      	subs	r4, r5, #1
    5b7a:	41a5      	sbcs	r5, r4
    5b7c:	4664      	mov	r4, ip
    5b7e:	432c      	orrs	r4, r5
    5b80:	2700      	movs	r7, #0
    5b82:	1b0d      	subs	r5, r1, r4
    5b84:	e6e7      	b.n	5956 <__aeabi_dsub+0x416>
    5b86:	2280      	movs	r2, #128	; 0x80
    5b88:	2300      	movs	r3, #0
    5b8a:	0312      	lsls	r2, r2, #12
    5b8c:	4c14      	ldr	r4, [pc, #80]	; (5be0 <__aeabi_dsub+0x6a0>)
    5b8e:	2500      	movs	r5, #0
    5b90:	e5a1      	b.n	56d6 <__aeabi_dsub+0x196>
    5b92:	433d      	orrs	r5, r7
    5b94:	1e6f      	subs	r7, r5, #1
    5b96:	41bd      	sbcs	r5, r7
    5b98:	2700      	movs	r7, #0
    5b9a:	b2ed      	uxtb	r5, r5
    5b9c:	e760      	b.n	5a60 <__aeabi_dsub+0x520>
    5b9e:	0007      	movs	r7, r0
    5ba0:	000d      	movs	r5, r1
    5ba2:	4c0f      	ldr	r4, [pc, #60]	; (5be0 <__aeabi_dsub+0x6a0>)
    5ba4:	e4f8      	b.n	5598 <__aeabi_dsub+0x58>
    5ba6:	0007      	movs	r7, r0
    5ba8:	000d      	movs	r5, r1
    5baa:	e4f5      	b.n	5598 <__aeabi_dsub+0x58>
    5bac:	464e      	mov	r6, r9
    5bae:	003c      	movs	r4, r7
    5bb0:	3e20      	subs	r6, #32
    5bb2:	40f4      	lsrs	r4, r6
    5bb4:	46a0      	mov	r8, r4
    5bb6:	464c      	mov	r4, r9
    5bb8:	2c20      	cmp	r4, #32
    5bba:	d00e      	beq.n	5bda <__aeabi_dsub+0x69a>
    5bbc:	2440      	movs	r4, #64	; 0x40
    5bbe:	464e      	mov	r6, r9
    5bc0:	1ba4      	subs	r4, r4, r6
    5bc2:	40a7      	lsls	r7, r4
    5bc4:	433d      	orrs	r5, r7
    5bc6:	1e6f      	subs	r7, r5, #1
    5bc8:	41bd      	sbcs	r5, r7
    5bca:	4644      	mov	r4, r8
    5bcc:	2700      	movs	r7, #0
    5bce:	4325      	orrs	r5, r4
    5bd0:	e746      	b.n	5a60 <__aeabi_dsub+0x520>
    5bd2:	2700      	movs	r7, #0
    5bd4:	e7cf      	b.n	5b76 <__aeabi_dsub+0x636>
    5bd6:	000d      	movs	r5, r1
    5bd8:	e573      	b.n	56c2 <__aeabi_dsub+0x182>
    5bda:	2700      	movs	r7, #0
    5bdc:	e7f2      	b.n	5bc4 <__aeabi_dsub+0x684>
    5bde:	46c0      	nop			; (mov r8, r8)
    5be0:	000007ff 	.word	0x000007ff
    5be4:	ff7fffff 	.word	0xff7fffff

00005be8 <__aeabi_dcmpun>:
    5be8:	b570      	push	{r4, r5, r6, lr}
    5bea:	4e0e      	ldr	r6, [pc, #56]	; (5c24 <__aeabi_dcmpun+0x3c>)
    5bec:	030c      	lsls	r4, r1, #12
    5bee:	031d      	lsls	r5, r3, #12
    5bf0:	0049      	lsls	r1, r1, #1
    5bf2:	005b      	lsls	r3, r3, #1
    5bf4:	0b24      	lsrs	r4, r4, #12
    5bf6:	0d49      	lsrs	r1, r1, #21
    5bf8:	0b2d      	lsrs	r5, r5, #12
    5bfa:	0d5b      	lsrs	r3, r3, #21
    5bfc:	42b1      	cmp	r1, r6
    5bfe:	d004      	beq.n	5c0a <__aeabi_dcmpun+0x22>
    5c00:	4908      	ldr	r1, [pc, #32]	; (5c24 <__aeabi_dcmpun+0x3c>)
    5c02:	2000      	movs	r0, #0
    5c04:	428b      	cmp	r3, r1
    5c06:	d008      	beq.n	5c1a <__aeabi_dcmpun+0x32>
    5c08:	bd70      	pop	{r4, r5, r6, pc}
    5c0a:	4304      	orrs	r4, r0
    5c0c:	2001      	movs	r0, #1
    5c0e:	2c00      	cmp	r4, #0
    5c10:	d1fa      	bne.n	5c08 <__aeabi_dcmpun+0x20>
    5c12:	4904      	ldr	r1, [pc, #16]	; (5c24 <__aeabi_dcmpun+0x3c>)
    5c14:	2000      	movs	r0, #0
    5c16:	428b      	cmp	r3, r1
    5c18:	d1f6      	bne.n	5c08 <__aeabi_dcmpun+0x20>
    5c1a:	4315      	orrs	r5, r2
    5c1c:	0028      	movs	r0, r5
    5c1e:	1e45      	subs	r5, r0, #1
    5c20:	41a8      	sbcs	r0, r5
    5c22:	e7f1      	b.n	5c08 <__aeabi_dcmpun+0x20>
    5c24:	000007ff 	.word	0x000007ff

00005c28 <__aeabi_d2iz>:
    5c28:	030b      	lsls	r3, r1, #12
    5c2a:	b530      	push	{r4, r5, lr}
    5c2c:	4d13      	ldr	r5, [pc, #76]	; (5c7c <__aeabi_d2iz+0x54>)
    5c2e:	0b1a      	lsrs	r2, r3, #12
    5c30:	004b      	lsls	r3, r1, #1
    5c32:	0d5b      	lsrs	r3, r3, #21
    5c34:	0fc9      	lsrs	r1, r1, #31
    5c36:	2400      	movs	r4, #0
    5c38:	42ab      	cmp	r3, r5
    5c3a:	dd11      	ble.n	5c60 <__aeabi_d2iz+0x38>
    5c3c:	4c10      	ldr	r4, [pc, #64]	; (5c80 <__aeabi_d2iz+0x58>)
    5c3e:	42a3      	cmp	r3, r4
    5c40:	dc10      	bgt.n	5c64 <__aeabi_d2iz+0x3c>
    5c42:	2480      	movs	r4, #128	; 0x80
    5c44:	0364      	lsls	r4, r4, #13
    5c46:	4322      	orrs	r2, r4
    5c48:	4c0e      	ldr	r4, [pc, #56]	; (5c84 <__aeabi_d2iz+0x5c>)
    5c4a:	1ae4      	subs	r4, r4, r3
    5c4c:	2c1f      	cmp	r4, #31
    5c4e:	dd0c      	ble.n	5c6a <__aeabi_d2iz+0x42>
    5c50:	480d      	ldr	r0, [pc, #52]	; (5c88 <__aeabi_d2iz+0x60>)
    5c52:	1ac3      	subs	r3, r0, r3
    5c54:	40da      	lsrs	r2, r3
    5c56:	0013      	movs	r3, r2
    5c58:	425c      	negs	r4, r3
    5c5a:	2900      	cmp	r1, #0
    5c5c:	d100      	bne.n	5c60 <__aeabi_d2iz+0x38>
    5c5e:	001c      	movs	r4, r3
    5c60:	0020      	movs	r0, r4
    5c62:	bd30      	pop	{r4, r5, pc}
    5c64:	4b09      	ldr	r3, [pc, #36]	; (5c8c <__aeabi_d2iz+0x64>)
    5c66:	18cc      	adds	r4, r1, r3
    5c68:	e7fa      	b.n	5c60 <__aeabi_d2iz+0x38>
    5c6a:	40e0      	lsrs	r0, r4
    5c6c:	4c08      	ldr	r4, [pc, #32]	; (5c90 <__aeabi_d2iz+0x68>)
    5c6e:	46a4      	mov	ip, r4
    5c70:	4463      	add	r3, ip
    5c72:	409a      	lsls	r2, r3
    5c74:	0013      	movs	r3, r2
    5c76:	4303      	orrs	r3, r0
    5c78:	e7ee      	b.n	5c58 <__aeabi_d2iz+0x30>
    5c7a:	46c0      	nop			; (mov r8, r8)
    5c7c:	000003fe 	.word	0x000003fe
    5c80:	0000041d 	.word	0x0000041d
    5c84:	00000433 	.word	0x00000433
    5c88:	00000413 	.word	0x00000413
    5c8c:	7fffffff 	.word	0x7fffffff
    5c90:	fffffbed 	.word	0xfffffbed

00005c94 <__aeabi_i2d>:
    5c94:	b570      	push	{r4, r5, r6, lr}
    5c96:	2800      	cmp	r0, #0
    5c98:	d030      	beq.n	5cfc <__aeabi_i2d+0x68>
    5c9a:	17c3      	asrs	r3, r0, #31
    5c9c:	18c4      	adds	r4, r0, r3
    5c9e:	405c      	eors	r4, r3
    5ca0:	0fc5      	lsrs	r5, r0, #31
    5ca2:	0020      	movs	r0, r4
    5ca4:	f000 fa16 	bl	60d4 <__clzsi2>
    5ca8:	4b17      	ldr	r3, [pc, #92]	; (5d08 <__aeabi_i2d+0x74>)
    5caa:	4a18      	ldr	r2, [pc, #96]	; (5d0c <__aeabi_i2d+0x78>)
    5cac:	1a1b      	subs	r3, r3, r0
    5cae:	1ad2      	subs	r2, r2, r3
    5cb0:	2a1f      	cmp	r2, #31
    5cb2:	dd18      	ble.n	5ce6 <__aeabi_i2d+0x52>
    5cb4:	4a16      	ldr	r2, [pc, #88]	; (5d10 <__aeabi_i2d+0x7c>)
    5cb6:	1ad2      	subs	r2, r2, r3
    5cb8:	4094      	lsls	r4, r2
    5cba:	2200      	movs	r2, #0
    5cbc:	0324      	lsls	r4, r4, #12
    5cbe:	055b      	lsls	r3, r3, #21
    5cc0:	0b24      	lsrs	r4, r4, #12
    5cc2:	0d5b      	lsrs	r3, r3, #21
    5cc4:	2100      	movs	r1, #0
    5cc6:	0010      	movs	r0, r2
    5cc8:	0324      	lsls	r4, r4, #12
    5cca:	0d0a      	lsrs	r2, r1, #20
    5ccc:	0512      	lsls	r2, r2, #20
    5cce:	0b24      	lsrs	r4, r4, #12
    5cd0:	4314      	orrs	r4, r2
    5cd2:	4a10      	ldr	r2, [pc, #64]	; (5d14 <__aeabi_i2d+0x80>)
    5cd4:	051b      	lsls	r3, r3, #20
    5cd6:	4014      	ands	r4, r2
    5cd8:	431c      	orrs	r4, r3
    5cda:	0064      	lsls	r4, r4, #1
    5cdc:	07ed      	lsls	r5, r5, #31
    5cde:	0864      	lsrs	r4, r4, #1
    5ce0:	432c      	orrs	r4, r5
    5ce2:	0021      	movs	r1, r4
    5ce4:	bd70      	pop	{r4, r5, r6, pc}
    5ce6:	0021      	movs	r1, r4
    5ce8:	4091      	lsls	r1, r2
    5cea:	000a      	movs	r2, r1
    5cec:	210b      	movs	r1, #11
    5cee:	1a08      	subs	r0, r1, r0
    5cf0:	40c4      	lsrs	r4, r0
    5cf2:	055b      	lsls	r3, r3, #21
    5cf4:	0324      	lsls	r4, r4, #12
    5cf6:	0b24      	lsrs	r4, r4, #12
    5cf8:	0d5b      	lsrs	r3, r3, #21
    5cfa:	e7e3      	b.n	5cc4 <__aeabi_i2d+0x30>
    5cfc:	2500      	movs	r5, #0
    5cfe:	2300      	movs	r3, #0
    5d00:	2400      	movs	r4, #0
    5d02:	2200      	movs	r2, #0
    5d04:	e7de      	b.n	5cc4 <__aeabi_i2d+0x30>
    5d06:	46c0      	nop			; (mov r8, r8)
    5d08:	0000041e 	.word	0x0000041e
    5d0c:	00000433 	.word	0x00000433
    5d10:	00000413 	.word	0x00000413
    5d14:	800fffff 	.word	0x800fffff

00005d18 <__aeabi_ui2d>:
    5d18:	b570      	push	{r4, r5, r6, lr}
    5d1a:	1e05      	subs	r5, r0, #0
    5d1c:	d028      	beq.n	5d70 <__aeabi_ui2d+0x58>
    5d1e:	f000 f9d9 	bl	60d4 <__clzsi2>
    5d22:	4b15      	ldr	r3, [pc, #84]	; (5d78 <__aeabi_ui2d+0x60>)
    5d24:	4a15      	ldr	r2, [pc, #84]	; (5d7c <__aeabi_ui2d+0x64>)
    5d26:	1a1b      	subs	r3, r3, r0
    5d28:	1ad2      	subs	r2, r2, r3
    5d2a:	2a1f      	cmp	r2, #31
    5d2c:	dd16      	ble.n	5d5c <__aeabi_ui2d+0x44>
    5d2e:	002c      	movs	r4, r5
    5d30:	4a13      	ldr	r2, [pc, #76]	; (5d80 <__aeabi_ui2d+0x68>)
    5d32:	2500      	movs	r5, #0
    5d34:	1ad2      	subs	r2, r2, r3
    5d36:	4094      	lsls	r4, r2
    5d38:	055a      	lsls	r2, r3, #21
    5d3a:	0324      	lsls	r4, r4, #12
    5d3c:	0b24      	lsrs	r4, r4, #12
    5d3e:	0d52      	lsrs	r2, r2, #21
    5d40:	2100      	movs	r1, #0
    5d42:	0324      	lsls	r4, r4, #12
    5d44:	0d0b      	lsrs	r3, r1, #20
    5d46:	0b24      	lsrs	r4, r4, #12
    5d48:	051b      	lsls	r3, r3, #20
    5d4a:	4323      	orrs	r3, r4
    5d4c:	4c0d      	ldr	r4, [pc, #52]	; (5d84 <__aeabi_ui2d+0x6c>)
    5d4e:	0512      	lsls	r2, r2, #20
    5d50:	4023      	ands	r3, r4
    5d52:	4313      	orrs	r3, r2
    5d54:	005b      	lsls	r3, r3, #1
    5d56:	0028      	movs	r0, r5
    5d58:	0859      	lsrs	r1, r3, #1
    5d5a:	bd70      	pop	{r4, r5, r6, pc}
    5d5c:	210b      	movs	r1, #11
    5d5e:	002c      	movs	r4, r5
    5d60:	1a08      	subs	r0, r1, r0
    5d62:	40c4      	lsrs	r4, r0
    5d64:	4095      	lsls	r5, r2
    5d66:	0324      	lsls	r4, r4, #12
    5d68:	055a      	lsls	r2, r3, #21
    5d6a:	0b24      	lsrs	r4, r4, #12
    5d6c:	0d52      	lsrs	r2, r2, #21
    5d6e:	e7e7      	b.n	5d40 <__aeabi_ui2d+0x28>
    5d70:	2200      	movs	r2, #0
    5d72:	2400      	movs	r4, #0
    5d74:	e7e4      	b.n	5d40 <__aeabi_ui2d+0x28>
    5d76:	46c0      	nop			; (mov r8, r8)
    5d78:	0000041e 	.word	0x0000041e
    5d7c:	00000433 	.word	0x00000433
    5d80:	00000413 	.word	0x00000413
    5d84:	800fffff 	.word	0x800fffff

00005d88 <__aeabi_f2d>:
    5d88:	0042      	lsls	r2, r0, #1
    5d8a:	0e12      	lsrs	r2, r2, #24
    5d8c:	1c51      	adds	r1, r2, #1
    5d8e:	0243      	lsls	r3, r0, #9
    5d90:	b2c9      	uxtb	r1, r1
    5d92:	b570      	push	{r4, r5, r6, lr}
    5d94:	0a5d      	lsrs	r5, r3, #9
    5d96:	0fc4      	lsrs	r4, r0, #31
    5d98:	2901      	cmp	r1, #1
    5d9a:	dd15      	ble.n	5dc8 <__aeabi_f2d+0x40>
    5d9c:	21e0      	movs	r1, #224	; 0xe0
    5d9e:	0089      	lsls	r1, r1, #2
    5da0:	468c      	mov	ip, r1
    5da2:	076d      	lsls	r5, r5, #29
    5da4:	0b1b      	lsrs	r3, r3, #12
    5da6:	4462      	add	r2, ip
    5da8:	2100      	movs	r1, #0
    5daa:	0028      	movs	r0, r5
    5dac:	0d0d      	lsrs	r5, r1, #20
    5dae:	052d      	lsls	r5, r5, #20
    5db0:	432b      	orrs	r3, r5
    5db2:	4d1c      	ldr	r5, [pc, #112]	; (5e24 <__aeabi_f2d+0x9c>)
    5db4:	0552      	lsls	r2, r2, #21
    5db6:	402b      	ands	r3, r5
    5db8:	0852      	lsrs	r2, r2, #1
    5dba:	4313      	orrs	r3, r2
    5dbc:	005b      	lsls	r3, r3, #1
    5dbe:	07e4      	lsls	r4, r4, #31
    5dc0:	085b      	lsrs	r3, r3, #1
    5dc2:	4323      	orrs	r3, r4
    5dc4:	0019      	movs	r1, r3
    5dc6:	bd70      	pop	{r4, r5, r6, pc}
    5dc8:	2a00      	cmp	r2, #0
    5dca:	d115      	bne.n	5df8 <__aeabi_f2d+0x70>
    5dcc:	2d00      	cmp	r5, #0
    5dce:	d01f      	beq.n	5e10 <__aeabi_f2d+0x88>
    5dd0:	0028      	movs	r0, r5
    5dd2:	f000 f97f 	bl	60d4 <__clzsi2>
    5dd6:	280a      	cmp	r0, #10
    5dd8:	dc1d      	bgt.n	5e16 <__aeabi_f2d+0x8e>
    5dda:	230b      	movs	r3, #11
    5ddc:	002a      	movs	r2, r5
    5dde:	1a1b      	subs	r3, r3, r0
    5de0:	40da      	lsrs	r2, r3
    5de2:	0013      	movs	r3, r2
    5de4:	0002      	movs	r2, r0
    5de6:	3215      	adds	r2, #21
    5de8:	4095      	lsls	r5, r2
    5dea:	4a0f      	ldr	r2, [pc, #60]	; (5e28 <__aeabi_f2d+0xa0>)
    5dec:	031b      	lsls	r3, r3, #12
    5dee:	1a12      	subs	r2, r2, r0
    5df0:	0552      	lsls	r2, r2, #21
    5df2:	0b1b      	lsrs	r3, r3, #12
    5df4:	0d52      	lsrs	r2, r2, #21
    5df6:	e7d7      	b.n	5da8 <__aeabi_f2d+0x20>
    5df8:	2d00      	cmp	r5, #0
    5dfa:	d006      	beq.n	5e0a <__aeabi_f2d+0x82>
    5dfc:	2280      	movs	r2, #128	; 0x80
    5dfe:	0b1b      	lsrs	r3, r3, #12
    5e00:	0312      	lsls	r2, r2, #12
    5e02:	4313      	orrs	r3, r2
    5e04:	076d      	lsls	r5, r5, #29
    5e06:	4a09      	ldr	r2, [pc, #36]	; (5e2c <__aeabi_f2d+0xa4>)
    5e08:	e7ce      	b.n	5da8 <__aeabi_f2d+0x20>
    5e0a:	4a08      	ldr	r2, [pc, #32]	; (5e2c <__aeabi_f2d+0xa4>)
    5e0c:	2300      	movs	r3, #0
    5e0e:	e7cb      	b.n	5da8 <__aeabi_f2d+0x20>
    5e10:	2200      	movs	r2, #0
    5e12:	2300      	movs	r3, #0
    5e14:	e7c8      	b.n	5da8 <__aeabi_f2d+0x20>
    5e16:	0003      	movs	r3, r0
    5e18:	3b0b      	subs	r3, #11
    5e1a:	409d      	lsls	r5, r3
    5e1c:	002b      	movs	r3, r5
    5e1e:	2500      	movs	r5, #0
    5e20:	e7e3      	b.n	5dea <__aeabi_f2d+0x62>
    5e22:	46c0      	nop			; (mov r8, r8)
    5e24:	800fffff 	.word	0x800fffff
    5e28:	00000389 	.word	0x00000389
    5e2c:	000007ff 	.word	0x000007ff

00005e30 <__aeabi_d2f>:
    5e30:	004b      	lsls	r3, r1, #1
    5e32:	b570      	push	{r4, r5, r6, lr}
    5e34:	0d5e      	lsrs	r6, r3, #21
    5e36:	030c      	lsls	r4, r1, #12
    5e38:	1c75      	adds	r5, r6, #1
    5e3a:	0a64      	lsrs	r4, r4, #9
    5e3c:	0f42      	lsrs	r2, r0, #29
    5e3e:	056d      	lsls	r5, r5, #21
    5e40:	4322      	orrs	r2, r4
    5e42:	0fc9      	lsrs	r1, r1, #31
    5e44:	00c4      	lsls	r4, r0, #3
    5e46:	0d6d      	lsrs	r5, r5, #21
    5e48:	2d01      	cmp	r5, #1
    5e4a:	dd2a      	ble.n	5ea2 <__aeabi_d2f+0x72>
    5e4c:	4b3b      	ldr	r3, [pc, #236]	; (5f3c <__aeabi_d2f+0x10c>)
    5e4e:	18f3      	adds	r3, r6, r3
    5e50:	2bfe      	cmp	r3, #254	; 0xfe
    5e52:	dc1a      	bgt.n	5e8a <__aeabi_d2f+0x5a>
    5e54:	2b00      	cmp	r3, #0
    5e56:	dd42      	ble.n	5ede <__aeabi_d2f+0xae>
    5e58:	0180      	lsls	r0, r0, #6
    5e5a:	1e45      	subs	r5, r0, #1
    5e5c:	41a8      	sbcs	r0, r5
    5e5e:	00d2      	lsls	r2, r2, #3
    5e60:	4310      	orrs	r0, r2
    5e62:	0f62      	lsrs	r2, r4, #29
    5e64:	4302      	orrs	r2, r0
    5e66:	0750      	lsls	r0, r2, #29
    5e68:	d004      	beq.n	5e74 <__aeabi_d2f+0x44>
    5e6a:	200f      	movs	r0, #15
    5e6c:	4010      	ands	r0, r2
    5e6e:	2804      	cmp	r0, #4
    5e70:	d000      	beq.n	5e74 <__aeabi_d2f+0x44>
    5e72:	3204      	adds	r2, #4
    5e74:	2080      	movs	r0, #128	; 0x80
    5e76:	04c0      	lsls	r0, r0, #19
    5e78:	4010      	ands	r0, r2
    5e7a:	d021      	beq.n	5ec0 <__aeabi_d2f+0x90>
    5e7c:	3301      	adds	r3, #1
    5e7e:	2bff      	cmp	r3, #255	; 0xff
    5e80:	d003      	beq.n	5e8a <__aeabi_d2f+0x5a>
    5e82:	0192      	lsls	r2, r2, #6
    5e84:	0a52      	lsrs	r2, r2, #9
    5e86:	b2db      	uxtb	r3, r3
    5e88:	e001      	b.n	5e8e <__aeabi_d2f+0x5e>
    5e8a:	23ff      	movs	r3, #255	; 0xff
    5e8c:	2200      	movs	r2, #0
    5e8e:	0252      	lsls	r2, r2, #9
    5e90:	0a52      	lsrs	r2, r2, #9
    5e92:	05db      	lsls	r3, r3, #23
    5e94:	4313      	orrs	r3, r2
    5e96:	005b      	lsls	r3, r3, #1
    5e98:	07c9      	lsls	r1, r1, #31
    5e9a:	085b      	lsrs	r3, r3, #1
    5e9c:	430b      	orrs	r3, r1
    5e9e:	0018      	movs	r0, r3
    5ea0:	bd70      	pop	{r4, r5, r6, pc}
    5ea2:	2e00      	cmp	r6, #0
    5ea4:	d007      	beq.n	5eb6 <__aeabi_d2f+0x86>
    5ea6:	4314      	orrs	r4, r2
    5ea8:	d0ef      	beq.n	5e8a <__aeabi_d2f+0x5a>
    5eaa:	2080      	movs	r0, #128	; 0x80
    5eac:	00d2      	lsls	r2, r2, #3
    5eae:	0480      	lsls	r0, r0, #18
    5eb0:	4302      	orrs	r2, r0
    5eb2:	23ff      	movs	r3, #255	; 0xff
    5eb4:	e7d7      	b.n	5e66 <__aeabi_d2f+0x36>
    5eb6:	4322      	orrs	r2, r4
    5eb8:	2300      	movs	r3, #0
    5eba:	2a00      	cmp	r2, #0
    5ebc:	d003      	beq.n	5ec6 <__aeabi_d2f+0x96>
    5ebe:	2205      	movs	r2, #5
    5ec0:	08d2      	lsrs	r2, r2, #3
    5ec2:	2bff      	cmp	r3, #255	; 0xff
    5ec4:	d003      	beq.n	5ece <__aeabi_d2f+0x9e>
    5ec6:	0252      	lsls	r2, r2, #9
    5ec8:	0a52      	lsrs	r2, r2, #9
    5eca:	b2db      	uxtb	r3, r3
    5ecc:	e7df      	b.n	5e8e <__aeabi_d2f+0x5e>
    5ece:	2a00      	cmp	r2, #0
    5ed0:	d032      	beq.n	5f38 <__aeabi_d2f+0x108>
    5ed2:	2080      	movs	r0, #128	; 0x80
    5ed4:	03c0      	lsls	r0, r0, #15
    5ed6:	4302      	orrs	r2, r0
    5ed8:	0252      	lsls	r2, r2, #9
    5eda:	0a52      	lsrs	r2, r2, #9
    5edc:	e7d7      	b.n	5e8e <__aeabi_d2f+0x5e>
    5ede:	0018      	movs	r0, r3
    5ee0:	3017      	adds	r0, #23
    5ee2:	db14      	blt.n	5f0e <__aeabi_d2f+0xde>
    5ee4:	2080      	movs	r0, #128	; 0x80
    5ee6:	0400      	lsls	r0, r0, #16
    5ee8:	4302      	orrs	r2, r0
    5eea:	201e      	movs	r0, #30
    5eec:	1ac0      	subs	r0, r0, r3
    5eee:	281f      	cmp	r0, #31
    5ef0:	dc0f      	bgt.n	5f12 <__aeabi_d2f+0xe2>
    5ef2:	0025      	movs	r5, r4
    5ef4:	4b12      	ldr	r3, [pc, #72]	; (5f40 <__aeabi_d2f+0x110>)
    5ef6:	18f3      	adds	r3, r6, r3
    5ef8:	409d      	lsls	r5, r3
    5efa:	1e6e      	subs	r6, r5, #1
    5efc:	41b5      	sbcs	r5, r6
    5efe:	409a      	lsls	r2, r3
    5f00:	002b      	movs	r3, r5
    5f02:	4313      	orrs	r3, r2
    5f04:	0022      	movs	r2, r4
    5f06:	40c2      	lsrs	r2, r0
    5f08:	431a      	orrs	r2, r3
    5f0a:	2300      	movs	r3, #0
    5f0c:	e7ab      	b.n	5e66 <__aeabi_d2f+0x36>
    5f0e:	2300      	movs	r3, #0
    5f10:	e7d5      	b.n	5ebe <__aeabi_d2f+0x8e>
    5f12:	2502      	movs	r5, #2
    5f14:	426d      	negs	r5, r5
    5f16:	1aeb      	subs	r3, r5, r3
    5f18:	0015      	movs	r5, r2
    5f1a:	40dd      	lsrs	r5, r3
    5f1c:	2820      	cmp	r0, #32
    5f1e:	d009      	beq.n	5f34 <__aeabi_d2f+0x104>
    5f20:	4b08      	ldr	r3, [pc, #32]	; (5f44 <__aeabi_d2f+0x114>)
    5f22:	18f3      	adds	r3, r6, r3
    5f24:	409a      	lsls	r2, r3
    5f26:	4314      	orrs	r4, r2
    5f28:	1e62      	subs	r2, r4, #1
    5f2a:	4194      	sbcs	r4, r2
    5f2c:	0022      	movs	r2, r4
    5f2e:	2300      	movs	r3, #0
    5f30:	432a      	orrs	r2, r5
    5f32:	e798      	b.n	5e66 <__aeabi_d2f+0x36>
    5f34:	2200      	movs	r2, #0
    5f36:	e7f6      	b.n	5f26 <__aeabi_d2f+0xf6>
    5f38:	2200      	movs	r2, #0
    5f3a:	e7a8      	b.n	5e8e <__aeabi_d2f+0x5e>
    5f3c:	fffffc80 	.word	0xfffffc80
    5f40:	fffffc82 	.word	0xfffffc82
    5f44:	fffffca2 	.word	0xfffffca2

00005f48 <__aeabi_uidiv>:
    5f48:	2200      	movs	r2, #0
    5f4a:	0843      	lsrs	r3, r0, #1
    5f4c:	428b      	cmp	r3, r1
    5f4e:	d374      	bcc.n	603a <__aeabi_uidiv+0xf2>
    5f50:	0903      	lsrs	r3, r0, #4
    5f52:	428b      	cmp	r3, r1
    5f54:	d35f      	bcc.n	6016 <__aeabi_uidiv+0xce>
    5f56:	0a03      	lsrs	r3, r0, #8
    5f58:	428b      	cmp	r3, r1
    5f5a:	d344      	bcc.n	5fe6 <__aeabi_uidiv+0x9e>
    5f5c:	0b03      	lsrs	r3, r0, #12
    5f5e:	428b      	cmp	r3, r1
    5f60:	d328      	bcc.n	5fb4 <__aeabi_uidiv+0x6c>
    5f62:	0c03      	lsrs	r3, r0, #16
    5f64:	428b      	cmp	r3, r1
    5f66:	d30d      	bcc.n	5f84 <__aeabi_uidiv+0x3c>
    5f68:	22ff      	movs	r2, #255	; 0xff
    5f6a:	0209      	lsls	r1, r1, #8
    5f6c:	ba12      	rev	r2, r2
    5f6e:	0c03      	lsrs	r3, r0, #16
    5f70:	428b      	cmp	r3, r1
    5f72:	d302      	bcc.n	5f7a <__aeabi_uidiv+0x32>
    5f74:	1212      	asrs	r2, r2, #8
    5f76:	0209      	lsls	r1, r1, #8
    5f78:	d065      	beq.n	6046 <__aeabi_uidiv+0xfe>
    5f7a:	0b03      	lsrs	r3, r0, #12
    5f7c:	428b      	cmp	r3, r1
    5f7e:	d319      	bcc.n	5fb4 <__aeabi_uidiv+0x6c>
    5f80:	e000      	b.n	5f84 <__aeabi_uidiv+0x3c>
    5f82:	0a09      	lsrs	r1, r1, #8
    5f84:	0bc3      	lsrs	r3, r0, #15
    5f86:	428b      	cmp	r3, r1
    5f88:	d301      	bcc.n	5f8e <__aeabi_uidiv+0x46>
    5f8a:	03cb      	lsls	r3, r1, #15
    5f8c:	1ac0      	subs	r0, r0, r3
    5f8e:	4152      	adcs	r2, r2
    5f90:	0b83      	lsrs	r3, r0, #14
    5f92:	428b      	cmp	r3, r1
    5f94:	d301      	bcc.n	5f9a <__aeabi_uidiv+0x52>
    5f96:	038b      	lsls	r3, r1, #14
    5f98:	1ac0      	subs	r0, r0, r3
    5f9a:	4152      	adcs	r2, r2
    5f9c:	0b43      	lsrs	r3, r0, #13
    5f9e:	428b      	cmp	r3, r1
    5fa0:	d301      	bcc.n	5fa6 <__aeabi_uidiv+0x5e>
    5fa2:	034b      	lsls	r3, r1, #13
    5fa4:	1ac0      	subs	r0, r0, r3
    5fa6:	4152      	adcs	r2, r2
    5fa8:	0b03      	lsrs	r3, r0, #12
    5faa:	428b      	cmp	r3, r1
    5fac:	d301      	bcc.n	5fb2 <__aeabi_uidiv+0x6a>
    5fae:	030b      	lsls	r3, r1, #12
    5fb0:	1ac0      	subs	r0, r0, r3
    5fb2:	4152      	adcs	r2, r2
    5fb4:	0ac3      	lsrs	r3, r0, #11
    5fb6:	428b      	cmp	r3, r1
    5fb8:	d301      	bcc.n	5fbe <__aeabi_uidiv+0x76>
    5fba:	02cb      	lsls	r3, r1, #11
    5fbc:	1ac0      	subs	r0, r0, r3
    5fbe:	4152      	adcs	r2, r2
    5fc0:	0a83      	lsrs	r3, r0, #10
    5fc2:	428b      	cmp	r3, r1
    5fc4:	d301      	bcc.n	5fca <__aeabi_uidiv+0x82>
    5fc6:	028b      	lsls	r3, r1, #10
    5fc8:	1ac0      	subs	r0, r0, r3
    5fca:	4152      	adcs	r2, r2
    5fcc:	0a43      	lsrs	r3, r0, #9
    5fce:	428b      	cmp	r3, r1
    5fd0:	d301      	bcc.n	5fd6 <__aeabi_uidiv+0x8e>
    5fd2:	024b      	lsls	r3, r1, #9
    5fd4:	1ac0      	subs	r0, r0, r3
    5fd6:	4152      	adcs	r2, r2
    5fd8:	0a03      	lsrs	r3, r0, #8
    5fda:	428b      	cmp	r3, r1
    5fdc:	d301      	bcc.n	5fe2 <__aeabi_uidiv+0x9a>
    5fde:	020b      	lsls	r3, r1, #8
    5fe0:	1ac0      	subs	r0, r0, r3
    5fe2:	4152      	adcs	r2, r2
    5fe4:	d2cd      	bcs.n	5f82 <__aeabi_uidiv+0x3a>
    5fe6:	09c3      	lsrs	r3, r0, #7
    5fe8:	428b      	cmp	r3, r1
    5fea:	d301      	bcc.n	5ff0 <__aeabi_uidiv+0xa8>
    5fec:	01cb      	lsls	r3, r1, #7
    5fee:	1ac0      	subs	r0, r0, r3
    5ff0:	4152      	adcs	r2, r2
    5ff2:	0983      	lsrs	r3, r0, #6
    5ff4:	428b      	cmp	r3, r1
    5ff6:	d301      	bcc.n	5ffc <__aeabi_uidiv+0xb4>
    5ff8:	018b      	lsls	r3, r1, #6
    5ffa:	1ac0      	subs	r0, r0, r3
    5ffc:	4152      	adcs	r2, r2
    5ffe:	0943      	lsrs	r3, r0, #5
    6000:	428b      	cmp	r3, r1
    6002:	d301      	bcc.n	6008 <__aeabi_uidiv+0xc0>
    6004:	014b      	lsls	r3, r1, #5
    6006:	1ac0      	subs	r0, r0, r3
    6008:	4152      	adcs	r2, r2
    600a:	0903      	lsrs	r3, r0, #4
    600c:	428b      	cmp	r3, r1
    600e:	d301      	bcc.n	6014 <__aeabi_uidiv+0xcc>
    6010:	010b      	lsls	r3, r1, #4
    6012:	1ac0      	subs	r0, r0, r3
    6014:	4152      	adcs	r2, r2
    6016:	08c3      	lsrs	r3, r0, #3
    6018:	428b      	cmp	r3, r1
    601a:	d301      	bcc.n	6020 <__aeabi_uidiv+0xd8>
    601c:	00cb      	lsls	r3, r1, #3
    601e:	1ac0      	subs	r0, r0, r3
    6020:	4152      	adcs	r2, r2
    6022:	0883      	lsrs	r3, r0, #2
    6024:	428b      	cmp	r3, r1
    6026:	d301      	bcc.n	602c <__aeabi_uidiv+0xe4>
    6028:	008b      	lsls	r3, r1, #2
    602a:	1ac0      	subs	r0, r0, r3
    602c:	4152      	adcs	r2, r2
    602e:	0843      	lsrs	r3, r0, #1
    6030:	428b      	cmp	r3, r1
    6032:	d301      	bcc.n	6038 <__aeabi_uidiv+0xf0>
    6034:	004b      	lsls	r3, r1, #1
    6036:	1ac0      	subs	r0, r0, r3
    6038:	4152      	adcs	r2, r2
    603a:	1a41      	subs	r1, r0, r1
    603c:	d200      	bcs.n	6040 <__aeabi_uidiv+0xf8>
    603e:	4601      	mov	r1, r0
    6040:	4152      	adcs	r2, r2
    6042:	4610      	mov	r0, r2
    6044:	4770      	bx	lr
    6046:	e7ff      	b.n	6048 <__aeabi_uidiv+0x100>
    6048:	b501      	push	{r0, lr}
    604a:	2000      	movs	r0, #0
    604c:	f000 f806 	bl	605c <__aeabi_idiv0>
    6050:	bd02      	pop	{r1, pc}
    6052:	46c0      	nop			; (mov r8, r8)

00006054 <__aeabi_uidivmod>:
    6054:	2900      	cmp	r1, #0
    6056:	d0f7      	beq.n	6048 <__aeabi_uidiv+0x100>
    6058:	e776      	b.n	5f48 <__aeabi_uidiv>
    605a:	4770      	bx	lr

0000605c <__aeabi_idiv0>:
    605c:	4770      	bx	lr
    605e:	46c0      	nop			; (mov r8, r8)

00006060 <__aeabi_cfrcmple>:
    6060:	4684      	mov	ip, r0
    6062:	1c08      	adds	r0, r1, #0
    6064:	4661      	mov	r1, ip
    6066:	e7ff      	b.n	6068 <__aeabi_cfcmpeq>

00006068 <__aeabi_cfcmpeq>:
    6068:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    606a:	f000 f8bd 	bl	61e8 <__lesf2>
    606e:	2800      	cmp	r0, #0
    6070:	d401      	bmi.n	6076 <__aeabi_cfcmpeq+0xe>
    6072:	2100      	movs	r1, #0
    6074:	42c8      	cmn	r0, r1
    6076:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00006078 <__aeabi_fcmpeq>:
    6078:	b510      	push	{r4, lr}
    607a:	f000 f849 	bl	6110 <__eqsf2>
    607e:	4240      	negs	r0, r0
    6080:	3001      	adds	r0, #1
    6082:	bd10      	pop	{r4, pc}

00006084 <__aeabi_fcmplt>:
    6084:	b510      	push	{r4, lr}
    6086:	f000 f8af 	bl	61e8 <__lesf2>
    608a:	2800      	cmp	r0, #0
    608c:	db01      	blt.n	6092 <__aeabi_fcmplt+0xe>
    608e:	2000      	movs	r0, #0
    6090:	bd10      	pop	{r4, pc}
    6092:	2001      	movs	r0, #1
    6094:	bd10      	pop	{r4, pc}
    6096:	46c0      	nop			; (mov r8, r8)

00006098 <__aeabi_fcmple>:
    6098:	b510      	push	{r4, lr}
    609a:	f000 f8a5 	bl	61e8 <__lesf2>
    609e:	2800      	cmp	r0, #0
    60a0:	dd01      	ble.n	60a6 <__aeabi_fcmple+0xe>
    60a2:	2000      	movs	r0, #0
    60a4:	bd10      	pop	{r4, pc}
    60a6:	2001      	movs	r0, #1
    60a8:	bd10      	pop	{r4, pc}
    60aa:	46c0      	nop			; (mov r8, r8)

000060ac <__aeabi_fcmpgt>:
    60ac:	b510      	push	{r4, lr}
    60ae:	f000 f857 	bl	6160 <__gesf2>
    60b2:	2800      	cmp	r0, #0
    60b4:	dc01      	bgt.n	60ba <__aeabi_fcmpgt+0xe>
    60b6:	2000      	movs	r0, #0
    60b8:	bd10      	pop	{r4, pc}
    60ba:	2001      	movs	r0, #1
    60bc:	bd10      	pop	{r4, pc}
    60be:	46c0      	nop			; (mov r8, r8)

000060c0 <__aeabi_fcmpge>:
    60c0:	b510      	push	{r4, lr}
    60c2:	f000 f84d 	bl	6160 <__gesf2>
    60c6:	2800      	cmp	r0, #0
    60c8:	da01      	bge.n	60ce <__aeabi_fcmpge+0xe>
    60ca:	2000      	movs	r0, #0
    60cc:	bd10      	pop	{r4, pc}
    60ce:	2001      	movs	r0, #1
    60d0:	bd10      	pop	{r4, pc}
    60d2:	46c0      	nop			; (mov r8, r8)

000060d4 <__clzsi2>:
    60d4:	211c      	movs	r1, #28
    60d6:	2301      	movs	r3, #1
    60d8:	041b      	lsls	r3, r3, #16
    60da:	4298      	cmp	r0, r3
    60dc:	d301      	bcc.n	60e2 <__clzsi2+0xe>
    60de:	0c00      	lsrs	r0, r0, #16
    60e0:	3910      	subs	r1, #16
    60e2:	0a1b      	lsrs	r3, r3, #8
    60e4:	4298      	cmp	r0, r3
    60e6:	d301      	bcc.n	60ec <__clzsi2+0x18>
    60e8:	0a00      	lsrs	r0, r0, #8
    60ea:	3908      	subs	r1, #8
    60ec:	091b      	lsrs	r3, r3, #4
    60ee:	4298      	cmp	r0, r3
    60f0:	d301      	bcc.n	60f6 <__clzsi2+0x22>
    60f2:	0900      	lsrs	r0, r0, #4
    60f4:	3904      	subs	r1, #4
    60f6:	a202      	add	r2, pc, #8	; (adr r2, 6100 <__clzsi2+0x2c>)
    60f8:	5c10      	ldrb	r0, [r2, r0]
    60fa:	1840      	adds	r0, r0, r1
    60fc:	4770      	bx	lr
    60fe:	46c0      	nop			; (mov r8, r8)
    6100:	02020304 	.word	0x02020304
    6104:	01010101 	.word	0x01010101
	...

00006110 <__eqsf2>:
    6110:	0243      	lsls	r3, r0, #9
    6112:	b570      	push	{r4, r5, r6, lr}
    6114:	0042      	lsls	r2, r0, #1
    6116:	004c      	lsls	r4, r1, #1
    6118:	0a5d      	lsrs	r5, r3, #9
    611a:	0fc3      	lsrs	r3, r0, #31
    611c:	0248      	lsls	r0, r1, #9
    611e:	0e12      	lsrs	r2, r2, #24
    6120:	0a46      	lsrs	r6, r0, #9
    6122:	0e24      	lsrs	r4, r4, #24
    6124:	0fc9      	lsrs	r1, r1, #31
    6126:	2aff      	cmp	r2, #255	; 0xff
    6128:	d00f      	beq.n	614a <__eqsf2+0x3a>
    612a:	2cff      	cmp	r4, #255	; 0xff
    612c:	d011      	beq.n	6152 <__eqsf2+0x42>
    612e:	2001      	movs	r0, #1
    6130:	42a2      	cmp	r2, r4
    6132:	d000      	beq.n	6136 <__eqsf2+0x26>
    6134:	bd70      	pop	{r4, r5, r6, pc}
    6136:	42b5      	cmp	r5, r6
    6138:	d1fc      	bne.n	6134 <__eqsf2+0x24>
    613a:	428b      	cmp	r3, r1
    613c:	d00d      	beq.n	615a <__eqsf2+0x4a>
    613e:	2a00      	cmp	r2, #0
    6140:	d1f8      	bne.n	6134 <__eqsf2+0x24>
    6142:	0028      	movs	r0, r5
    6144:	1e43      	subs	r3, r0, #1
    6146:	4198      	sbcs	r0, r3
    6148:	e7f4      	b.n	6134 <__eqsf2+0x24>
    614a:	2001      	movs	r0, #1
    614c:	2d00      	cmp	r5, #0
    614e:	d1f1      	bne.n	6134 <__eqsf2+0x24>
    6150:	e7eb      	b.n	612a <__eqsf2+0x1a>
    6152:	2001      	movs	r0, #1
    6154:	2e00      	cmp	r6, #0
    6156:	d1ed      	bne.n	6134 <__eqsf2+0x24>
    6158:	e7e9      	b.n	612e <__eqsf2+0x1e>
    615a:	2000      	movs	r0, #0
    615c:	e7ea      	b.n	6134 <__eqsf2+0x24>
    615e:	46c0      	nop			; (mov r8, r8)

00006160 <__gesf2>:
    6160:	0243      	lsls	r3, r0, #9
    6162:	b5f0      	push	{r4, r5, r6, r7, lr}
    6164:	0042      	lsls	r2, r0, #1
    6166:	0a5d      	lsrs	r5, r3, #9
    6168:	0fc3      	lsrs	r3, r0, #31
    616a:	0248      	lsls	r0, r1, #9
    616c:	0a44      	lsrs	r4, r0, #9
    616e:	0048      	lsls	r0, r1, #1
    6170:	0e12      	lsrs	r2, r2, #24
    6172:	0e00      	lsrs	r0, r0, #24
    6174:	0fc9      	lsrs	r1, r1, #31
    6176:	2aff      	cmp	r2, #255	; 0xff
    6178:	d01f      	beq.n	61ba <__gesf2+0x5a>
    617a:	28ff      	cmp	r0, #255	; 0xff
    617c:	d022      	beq.n	61c4 <__gesf2+0x64>
    617e:	2a00      	cmp	r2, #0
    6180:	d109      	bne.n	6196 <__gesf2+0x36>
    6182:	426e      	negs	r6, r5
    6184:	416e      	adcs	r6, r5
    6186:	2800      	cmp	r0, #0
    6188:	d10f      	bne.n	61aa <__gesf2+0x4a>
    618a:	2c00      	cmp	r4, #0
    618c:	d10d      	bne.n	61aa <__gesf2+0x4a>
    618e:	2000      	movs	r0, #0
    6190:	2d00      	cmp	r5, #0
    6192:	d009      	beq.n	61a8 <__gesf2+0x48>
    6194:	e005      	b.n	61a2 <__gesf2+0x42>
    6196:	2800      	cmp	r0, #0
    6198:	d101      	bne.n	619e <__gesf2+0x3e>
    619a:	2c00      	cmp	r4, #0
    619c:	d001      	beq.n	61a2 <__gesf2+0x42>
    619e:	428b      	cmp	r3, r1
    61a0:	d013      	beq.n	61ca <__gesf2+0x6a>
    61a2:	4258      	negs	r0, r3
    61a4:	2301      	movs	r3, #1
    61a6:	4318      	orrs	r0, r3
    61a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    61aa:	2e00      	cmp	r6, #0
    61ac:	d0f7      	beq.n	619e <__gesf2+0x3e>
    61ae:	4248      	negs	r0, r1
    61b0:	4141      	adcs	r1, r0
    61b2:	2001      	movs	r0, #1
    61b4:	4249      	negs	r1, r1
    61b6:	4308      	orrs	r0, r1
    61b8:	e7f6      	b.n	61a8 <__gesf2+0x48>
    61ba:	2d00      	cmp	r5, #0
    61bc:	d0dd      	beq.n	617a <__gesf2+0x1a>
    61be:	2002      	movs	r0, #2
    61c0:	4240      	negs	r0, r0
    61c2:	e7f1      	b.n	61a8 <__gesf2+0x48>
    61c4:	2c00      	cmp	r4, #0
    61c6:	d0da      	beq.n	617e <__gesf2+0x1e>
    61c8:	e7f9      	b.n	61be <__gesf2+0x5e>
    61ca:	4282      	cmp	r2, r0
    61cc:	dce9      	bgt.n	61a2 <__gesf2+0x42>
    61ce:	db04      	blt.n	61da <__gesf2+0x7a>
    61d0:	42a5      	cmp	r5, r4
    61d2:	d8e6      	bhi.n	61a2 <__gesf2+0x42>
    61d4:	2000      	movs	r0, #0
    61d6:	42a5      	cmp	r5, r4
    61d8:	d2e6      	bcs.n	61a8 <__gesf2+0x48>
    61da:	4258      	negs	r0, r3
    61dc:	4143      	adcs	r3, r0
    61de:	2001      	movs	r0, #1
    61e0:	425b      	negs	r3, r3
    61e2:	4318      	orrs	r0, r3
    61e4:	e7e0      	b.n	61a8 <__gesf2+0x48>
    61e6:	46c0      	nop			; (mov r8, r8)

000061e8 <__lesf2>:
    61e8:	0243      	lsls	r3, r0, #9
    61ea:	b5f0      	push	{r4, r5, r6, r7, lr}
    61ec:	0042      	lsls	r2, r0, #1
    61ee:	004c      	lsls	r4, r1, #1
    61f0:	0a5e      	lsrs	r6, r3, #9
    61f2:	0fc3      	lsrs	r3, r0, #31
    61f4:	0248      	lsls	r0, r1, #9
    61f6:	0e12      	lsrs	r2, r2, #24
    61f8:	0a45      	lsrs	r5, r0, #9
    61fa:	0e24      	lsrs	r4, r4, #24
    61fc:	0fc9      	lsrs	r1, r1, #31
    61fe:	2aff      	cmp	r2, #255	; 0xff
    6200:	d017      	beq.n	6232 <__lesf2+0x4a>
    6202:	2cff      	cmp	r4, #255	; 0xff
    6204:	d019      	beq.n	623a <__lesf2+0x52>
    6206:	2a00      	cmp	r2, #0
    6208:	d10b      	bne.n	6222 <__lesf2+0x3a>
    620a:	4270      	negs	r0, r6
    620c:	4170      	adcs	r0, r6
    620e:	2c00      	cmp	r4, #0
    6210:	d017      	beq.n	6242 <__lesf2+0x5a>
    6212:	2800      	cmp	r0, #0
    6214:	d007      	beq.n	6226 <__lesf2+0x3e>
    6216:	4248      	negs	r0, r1
    6218:	4141      	adcs	r1, r0
    621a:	2001      	movs	r0, #1
    621c:	4249      	negs	r1, r1
    621e:	4308      	orrs	r0, r1
    6220:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6222:	2c00      	cmp	r4, #0
    6224:	d013      	beq.n	624e <__lesf2+0x66>
    6226:	428b      	cmp	r3, r1
    6228:	d014      	beq.n	6254 <__lesf2+0x6c>
    622a:	4258      	negs	r0, r3
    622c:	2301      	movs	r3, #1
    622e:	4318      	orrs	r0, r3
    6230:	e7f6      	b.n	6220 <__lesf2+0x38>
    6232:	2002      	movs	r0, #2
    6234:	2e00      	cmp	r6, #0
    6236:	d1f3      	bne.n	6220 <__lesf2+0x38>
    6238:	e7e3      	b.n	6202 <__lesf2+0x1a>
    623a:	2002      	movs	r0, #2
    623c:	2d00      	cmp	r5, #0
    623e:	d1ef      	bne.n	6220 <__lesf2+0x38>
    6240:	e7e1      	b.n	6206 <__lesf2+0x1e>
    6242:	2d00      	cmp	r5, #0
    6244:	d1e5      	bne.n	6212 <__lesf2+0x2a>
    6246:	2000      	movs	r0, #0
    6248:	2e00      	cmp	r6, #0
    624a:	d0e9      	beq.n	6220 <__lesf2+0x38>
    624c:	e7ed      	b.n	622a <__lesf2+0x42>
    624e:	2d00      	cmp	r5, #0
    6250:	d1e9      	bne.n	6226 <__lesf2+0x3e>
    6252:	e7ea      	b.n	622a <__lesf2+0x42>
    6254:	42a2      	cmp	r2, r4
    6256:	dce8      	bgt.n	622a <__lesf2+0x42>
    6258:	db04      	blt.n	6264 <__lesf2+0x7c>
    625a:	42ae      	cmp	r6, r5
    625c:	d8e5      	bhi.n	622a <__lesf2+0x42>
    625e:	2000      	movs	r0, #0
    6260:	42ae      	cmp	r6, r5
    6262:	d2dd      	bcs.n	6220 <__lesf2+0x38>
    6264:	4258      	negs	r0, r3
    6266:	4143      	adcs	r3, r0
    6268:	2001      	movs	r0, #1
    626a:	425b      	negs	r3, r3
    626c:	4318      	orrs	r0, r3
    626e:	e7d7      	b.n	6220 <__lesf2+0x38>

00006270 <__errno>:
    6270:	4b01      	ldr	r3, [pc, #4]	; (6278 <__errno+0x8>)
    6272:	6818      	ldr	r0, [r3, #0]
    6274:	4770      	bx	lr
    6276:	46c0      	nop			; (mov r8, r8)
    6278:	200004a0 	.word	0x200004a0

0000627c <__libc_init_array>:
    627c:	b570      	push	{r4, r5, r6, lr}
    627e:	4e0d      	ldr	r6, [pc, #52]	; (62b4 <__libc_init_array+0x38>)
    6280:	4d0d      	ldr	r5, [pc, #52]	; (62b8 <__libc_init_array+0x3c>)
    6282:	2400      	movs	r4, #0
    6284:	1bad      	subs	r5, r5, r6
    6286:	10ad      	asrs	r5, r5, #2
    6288:	d005      	beq.n	6296 <__libc_init_array+0x1a>
    628a:	00a3      	lsls	r3, r4, #2
    628c:	58f3      	ldr	r3, [r6, r3]
    628e:	3401      	adds	r4, #1
    6290:	4798      	blx	r3
    6292:	42a5      	cmp	r5, r4
    6294:	d1f9      	bne.n	628a <__libc_init_array+0xe>
    6296:	f000 f92f 	bl	64f8 <_init>
    629a:	4e08      	ldr	r6, [pc, #32]	; (62bc <__libc_init_array+0x40>)
    629c:	4d08      	ldr	r5, [pc, #32]	; (62c0 <__libc_init_array+0x44>)
    629e:	2400      	movs	r4, #0
    62a0:	1bad      	subs	r5, r5, r6
    62a2:	10ad      	asrs	r5, r5, #2
    62a4:	d005      	beq.n	62b2 <__libc_init_array+0x36>
    62a6:	00a3      	lsls	r3, r4, #2
    62a8:	58f3      	ldr	r3, [r6, r3]
    62aa:	3401      	adds	r4, #1
    62ac:	4798      	blx	r3
    62ae:	42a5      	cmp	r5, r4
    62b0:	d1f9      	bne.n	62a6 <__libc_init_array+0x2a>
    62b2:	bd70      	pop	{r4, r5, r6, pc}
    62b4:	00006504 	.word	0x00006504
    62b8:	00006504 	.word	0x00006504
    62bc:	00006504 	.word	0x00006504
    62c0:	0000650c 	.word	0x0000650c

000062c4 <register_fini>:
    62c4:	4b03      	ldr	r3, [pc, #12]	; (62d4 <register_fini+0x10>)
    62c6:	b510      	push	{r4, lr}
    62c8:	2b00      	cmp	r3, #0
    62ca:	d002      	beq.n	62d2 <register_fini+0xe>
    62cc:	4802      	ldr	r0, [pc, #8]	; (62d8 <register_fini+0x14>)
    62ce:	f000 f805 	bl	62dc <atexit>
    62d2:	bd10      	pop	{r4, pc}
    62d4:	00000000 	.word	0x00000000
    62d8:	000062ed 	.word	0x000062ed

000062dc <atexit>:
    62dc:	b510      	push	{r4, lr}
    62de:	0001      	movs	r1, r0
    62e0:	2300      	movs	r3, #0
    62e2:	2200      	movs	r2, #0
    62e4:	2000      	movs	r0, #0
    62e6:	f000 f81b 	bl	6320 <__register_exitproc>
    62ea:	bd10      	pop	{r4, pc}

000062ec <__libc_fini_array>:
    62ec:	b570      	push	{r4, r5, r6, lr}
    62ee:	4b09      	ldr	r3, [pc, #36]	; (6314 <__libc_fini_array+0x28>)
    62f0:	4c09      	ldr	r4, [pc, #36]	; (6318 <__libc_fini_array+0x2c>)
    62f2:	1ae4      	subs	r4, r4, r3
    62f4:	10a4      	asrs	r4, r4, #2
    62f6:	d009      	beq.n	630c <__libc_fini_array+0x20>
    62f8:	4a08      	ldr	r2, [pc, #32]	; (631c <__libc_fini_array+0x30>)
    62fa:	18a5      	adds	r5, r4, r2
    62fc:	00ad      	lsls	r5, r5, #2
    62fe:	18ed      	adds	r5, r5, r3
    6300:	682b      	ldr	r3, [r5, #0]
    6302:	3c01      	subs	r4, #1
    6304:	4798      	blx	r3
    6306:	3d04      	subs	r5, #4
    6308:	2c00      	cmp	r4, #0
    630a:	d1f9      	bne.n	6300 <__libc_fini_array+0x14>
    630c:	f000 f8fe 	bl	650c <_fini>
    6310:	bd70      	pop	{r4, r5, r6, pc}
    6312:	46c0      	nop			; (mov r8, r8)
    6314:	00006518 	.word	0x00006518
    6318:	0000651c 	.word	0x0000651c
    631c:	3fffffff 	.word	0x3fffffff

00006320 <__register_exitproc>:
    6320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6322:	4644      	mov	r4, r8
    6324:	465f      	mov	r7, fp
    6326:	4656      	mov	r6, sl
    6328:	464d      	mov	r5, r9
    632a:	469b      	mov	fp, r3
    632c:	4b2f      	ldr	r3, [pc, #188]	; (63ec <__register_exitproc+0xcc>)
    632e:	b4f0      	push	{r4, r5, r6, r7}
    6330:	681c      	ldr	r4, [r3, #0]
    6332:	23a4      	movs	r3, #164	; 0xa4
    6334:	005b      	lsls	r3, r3, #1
    6336:	0005      	movs	r5, r0
    6338:	58e0      	ldr	r0, [r4, r3]
    633a:	000e      	movs	r6, r1
    633c:	4690      	mov	r8, r2
    633e:	2800      	cmp	r0, #0
    6340:	d04b      	beq.n	63da <__register_exitproc+0xba>
    6342:	6843      	ldr	r3, [r0, #4]
    6344:	2b1f      	cmp	r3, #31
    6346:	dc0d      	bgt.n	6364 <__register_exitproc+0x44>
    6348:	1c5c      	adds	r4, r3, #1
    634a:	2d00      	cmp	r5, #0
    634c:	d121      	bne.n	6392 <__register_exitproc+0x72>
    634e:	3302      	adds	r3, #2
    6350:	009b      	lsls	r3, r3, #2
    6352:	6044      	str	r4, [r0, #4]
    6354:	501e      	str	r6, [r3, r0]
    6356:	2000      	movs	r0, #0
    6358:	bc3c      	pop	{r2, r3, r4, r5}
    635a:	4690      	mov	r8, r2
    635c:	4699      	mov	r9, r3
    635e:	46a2      	mov	sl, r4
    6360:	46ab      	mov	fp, r5
    6362:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6364:	4b22      	ldr	r3, [pc, #136]	; (63f0 <__register_exitproc+0xd0>)
    6366:	2b00      	cmp	r3, #0
    6368:	d03c      	beq.n	63e4 <__register_exitproc+0xc4>
    636a:	20c8      	movs	r0, #200	; 0xc8
    636c:	0040      	lsls	r0, r0, #1
    636e:	e000      	b.n	6372 <__register_exitproc+0x52>
    6370:	bf00      	nop
    6372:	2800      	cmp	r0, #0
    6374:	d036      	beq.n	63e4 <__register_exitproc+0xc4>
    6376:	22a4      	movs	r2, #164	; 0xa4
    6378:	2300      	movs	r3, #0
    637a:	0052      	lsls	r2, r2, #1
    637c:	58a1      	ldr	r1, [r4, r2]
    637e:	6043      	str	r3, [r0, #4]
    6380:	6001      	str	r1, [r0, #0]
    6382:	50a0      	str	r0, [r4, r2]
    6384:	3240      	adds	r2, #64	; 0x40
    6386:	5083      	str	r3, [r0, r2]
    6388:	3204      	adds	r2, #4
    638a:	5083      	str	r3, [r0, r2]
    638c:	2401      	movs	r4, #1
    638e:	2d00      	cmp	r5, #0
    6390:	d0dd      	beq.n	634e <__register_exitproc+0x2e>
    6392:	009a      	lsls	r2, r3, #2
    6394:	4691      	mov	r9, r2
    6396:	4481      	add	r9, r0
    6398:	4642      	mov	r2, r8
    639a:	2188      	movs	r1, #136	; 0x88
    639c:	464f      	mov	r7, r9
    639e:	507a      	str	r2, [r7, r1]
    63a0:	22c4      	movs	r2, #196	; 0xc4
    63a2:	0052      	lsls	r2, r2, #1
    63a4:	4690      	mov	r8, r2
    63a6:	4480      	add	r8, r0
    63a8:	4642      	mov	r2, r8
    63aa:	3987      	subs	r1, #135	; 0x87
    63ac:	4099      	lsls	r1, r3
    63ae:	6812      	ldr	r2, [r2, #0]
    63b0:	468a      	mov	sl, r1
    63b2:	430a      	orrs	r2, r1
    63b4:	4694      	mov	ip, r2
    63b6:	4642      	mov	r2, r8
    63b8:	4661      	mov	r1, ip
    63ba:	6011      	str	r1, [r2, #0]
    63bc:	2284      	movs	r2, #132	; 0x84
    63be:	4649      	mov	r1, r9
    63c0:	465f      	mov	r7, fp
    63c2:	0052      	lsls	r2, r2, #1
    63c4:	508f      	str	r7, [r1, r2]
    63c6:	2d02      	cmp	r5, #2
    63c8:	d1c1      	bne.n	634e <__register_exitproc+0x2e>
    63ca:	0002      	movs	r2, r0
    63cc:	4655      	mov	r5, sl
    63ce:	328d      	adds	r2, #141	; 0x8d
    63d0:	32ff      	adds	r2, #255	; 0xff
    63d2:	6811      	ldr	r1, [r2, #0]
    63d4:	430d      	orrs	r5, r1
    63d6:	6015      	str	r5, [r2, #0]
    63d8:	e7b9      	b.n	634e <__register_exitproc+0x2e>
    63da:	0020      	movs	r0, r4
    63dc:	304d      	adds	r0, #77	; 0x4d
    63de:	30ff      	adds	r0, #255	; 0xff
    63e0:	50e0      	str	r0, [r4, r3]
    63e2:	e7ae      	b.n	6342 <__register_exitproc+0x22>
    63e4:	2001      	movs	r0, #1
    63e6:	4240      	negs	r0, r0
    63e8:	e7b6      	b.n	6358 <__register_exitproc+0x38>
    63ea:	46c0      	nop			; (mov r8, r8)
    63ec:	000064f4 	.word	0x000064f4
    63f0:	00000000 	.word	0x00000000

000063f4 <senseBatPin>:
    63f4:	06000000 01000106                                .....

000063f9 <senseAPin>:
    63f9:	03010001 0100010b                                .....

000063fe <senseBPin>:
    63fe:	02010001 0000010a                                .....

00006403 <senseCPin>:
    6403:	03000001 00000101                                .....

00006408 <senseDPin>:
    6408:	02000001 00000000                                .....

0000640d <analogAccelPin>:
    640d:	07000000 70000007 0000776f 00000000     .......pow......
    641d:	00000000                                         ...

00006420 <TWO52>:
    6420:	00000000 43300000 00000000 c3300000     ......0C......0.
    6430:	00003cc0 00003c1e 00003c1e 00003c1c     .<...<...<...<..
    6440:	00003cb2 00003cb2 00003ca8 00003c1c     .<...<...<...<..
    6450:	00003cb2 00003ca8 00003cb2 00003c1c     .<...<...<...<..
    6460:	00003cb8 00003cb8 00003cb8 00003d42     .<...<...<..B=..
    6470:	000049f4 000048c2 000049c8 000048b8     .I...H...I...H..
    6480:	000049c8 000049d2 000049c8 000048b8     .I...I...I...H..
    6490:	000048c2 000048c2 000049d2 000048b8     .H...H...I...H..
    64a0:	000048ae 000048ae 000048ae 00004c24     .H...H...H..$L..
    64b0:	0000523c 000050fc 000050fc 000050fa     <R...P...P...P..
    64c0:	00005214 00005214 00005206 000050fa     .R...R...R...P..
    64d0:	00005214 00005206 00005214 000050fa     .R...R...R...P..
    64e0:	0000521c 0000521c 0000521c 0000541c     .R...R...R...T..
    64f0:	00000043                                C...

000064f4 <_global_impure_ptr>:
    64f4:	20000078                                x.. 

000064f8 <_init>:
    64f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    64fa:	46c0      	nop			; (mov r8, r8)
    64fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
    64fe:	bc08      	pop	{r3}
    6500:	469e      	mov	lr, r3
    6502:	4770      	bx	lr

00006504 <__init_array_start>:
    6504:	000062c5 	.word	0x000062c5

00006508 <__frame_dummy_init_array_entry>:
    6508:	000000dd                                ....

0000650c <_fini>:
    650c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    650e:	46c0      	nop			; (mov r8, r8)
    6510:	bcf8      	pop	{r3, r4, r5, r6, r7}
    6512:	bc08      	pop	{r3}
    6514:	469e      	mov	lr, r3
    6516:	4770      	bx	lr

00006518 <__fini_array_start>:
    6518:	000000b5 	.word	0x000000b5
