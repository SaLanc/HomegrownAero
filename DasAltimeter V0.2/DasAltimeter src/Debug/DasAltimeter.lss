
DasAltimeter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000064d4  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000004a4  20000000  000064d4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000340  200004a8  00006980  000204a8  2**3
                  ALLOC
  3 .stack        00002000  200007e8  00006cc0  000204a8  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000204a4  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  000204cc  2**0
                  CONTENTS, READONLY
  6 .debug_info   0001e1c1  00000000  00000000  00020525  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002443  00000000  00000000  0003e6e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000020c3  00000000  00000000  00040b29  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000003c0  00000000  00000000  00042bec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000b40  00000000  00000000  00042fac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00015e3e  00000000  00000000  00043aec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000092b8  00000000  00000000  0005992a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00072520  00000000  00000000  00062be2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001010  00000000  00000000  000d5104  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
 *         retrieved from cpu registers.
 */
void SystemCoreClockUpdate(void)
{
	// Not implemented
	SystemCoreClock = __SYSTEM_CLOCK;
       0:	200027e8 	.word	0x200027e8
       4:	00000119 	.word	0x00000119
	return;
}
       8:	00000115 	.word	0x00000115
       c:	00000115 	.word	0x00000115
	...
      2c:	00000115 	.word	0x00000115
	...
      38:	00000115 	.word	0x00000115
      3c:	00000115 	.word	0x00000115
      40:	00000115 	.word	0x00000115
      44:	00000115 	.word	0x00000115
      48:	00000115 	.word	0x00000115
      4c:	00000f29 	.word	0x00000f29
      50:	00000115 	.word	0x00000115
      54:	00000115 	.word	0x00000115
      58:	00000115 	.word	0x00000115
      5c:	00000115 	.word	0x00000115
      60:	00000115 	.word	0x00000115
      64:	00000115 	.word	0x00000115
      68:	00000115 	.word	0x00000115
      6c:	00000115 	.word	0x00000115
      70:	00000115 	.word	0x00000115
      74:	00000115 	.word	0x00000115
      78:	00000115 	.word	0x00000115
      7c:	00000115 	.word	0x00000115
      80:	00000115 	.word	0x00000115
      84:	00000115 	.word	0x00000115
      88:	00000115 	.word	0x00000115
      8c:	00000fc9 	.word	0x00000fc9
      90:	00001031 	.word	0x00001031
	...
      9c:	00000115 	.word	0x00000115
      a0:	00000115 	.word	0x00000115
      a4:	00000115 	.word	0x00000115
      a8:	00000115 	.word	0x00000115
      ac:	00000115 	.word	0x00000115
      b0:	00000000 	.word	0x00000000

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200004a8 	.word	0x200004a8
      d4:	00000000 	.word	0x00000000
      d8:	000064d4 	.word	0x000064d4

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200004ac 	.word	0x200004ac
     108:	000064d4 	.word	0x000064d4
     10c:	000064d4 	.word	0x000064d4
     110:	00000000 	.word	0x00000000

00000114 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     114:	e7fe      	b.n	114 <Dummy_Handler>
	...

00000118 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
     118:	4821      	ldr	r0, [pc, #132]	; (1a0 <Reset_Handler+0x88>)
     11a:	4922      	ldr	r1, [pc, #136]	; (1a4 <Reset_Handler+0x8c>)
     11c:	b570      	push	{r4, r5, r6, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
     11e:	4288      	cmp	r0, r1
     120:	d002      	beq.n	128 <Reset_Handler+0x10>
     122:	2300      	movs	r3, #0
                for (; pDest < &_erelocate;) {
     124:	4c20      	ldr	r4, [pc, #128]	; (1a8 <Reset_Handler+0x90>)
     126:	e003      	b.n	130 <Reset_Handler+0x18>
     128:	4b20      	ldr	r3, [pc, #128]	; (1ac <Reset_Handler+0x94>)
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     12a:	4a21      	ldr	r2, [pc, #132]	; (1b0 <Reset_Handler+0x98>)
                *pDest++ = 0;
     12c:	2100      	movs	r1, #0
     12e:	e006      	b.n	13e <Reset_Handler+0x26>
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
     130:	18ca      	adds	r2, r1, r3
     132:	42a2      	cmp	r2, r4
     134:	d2f8      	bcs.n	128 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
     136:	58c5      	ldr	r5, [r0, r3]
     138:	3304      	adds	r3, #4
     13a:	6015      	str	r5, [r2, #0]
     13c:	e7f8      	b.n	130 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     13e:	4293      	cmp	r3, r2
     140:	d201      	bcs.n	146 <Reset_Handler+0x2e>
                *pDest++ = 0;
     142:	c302      	stmia	r3!, {r1}
     144:	e7fb      	b.n	13e <Reset_Handler+0x26>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     146:	21ff      	movs	r1, #255	; 0xff

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     148:	2402      	movs	r4, #2
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     14a:	2503      	movs	r5, #3
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     14c:	4b19      	ldr	r3, [pc, #100]	; (1b4 <Reset_Handler+0x9c>)
     14e:	4a1a      	ldr	r2, [pc, #104]	; (1b8 <Reset_Handler+0xa0>)
     150:	438b      	bics	r3, r1

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     152:	260c      	movs	r6, #12
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     154:	6093      	str	r3, [r2, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     156:	2208      	movs	r2, #8
        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     158:	4b18      	ldr	r3, [pc, #96]	; (1bc <Reset_Handler+0xa4>)
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     15a:	4919      	ldr	r1, [pc, #100]	; (1c0 <Reset_Handler+0xa8>)
        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     15c:	625c      	str	r4, [r3, #36]	; 0x24
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     15e:	78cb      	ldrb	r3, [r1, #3]
     160:	43ab      	bics	r3, r5
     162:	4323      	orrs	r3, r4
     164:	70cb      	strb	r3, [r1, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     166:	78cb      	ldrb	r3, [r1, #3]
     168:	43b3      	bics	r3, r6
     16a:	4313      	orrs	r3, r2
     16c:	70cb      	strb	r3, [r1, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
     16e:	2130      	movs	r1, #48	; 0x30
     170:	4b14      	ldr	r3, [pc, #80]	; (1c4 <Reset_Handler+0xac>)
     172:	7b98      	ldrb	r0, [r3, #14]
     174:	4388      	bics	r0, r1
     176:	3910      	subs	r1, #16
     178:	4308      	orrs	r0, r1
     17a:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     17c:	7b99      	ldrb	r1, [r3, #14]
     17e:	43b1      	bics	r1, r6
     180:	4311      	orrs	r1, r2
     182:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
     184:	2180      	movs	r1, #128	; 0x80
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
        DMAC->QOSCTRL.bit.FQOS = 2;
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     186:	7b9a      	ldrb	r2, [r3, #14]
     188:	43aa      	bics	r2, r5
     18a:	4322      	orrs	r2, r4
     18c:	739a      	strb	r2, [r3, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
     18e:	4a0e      	ldr	r2, [pc, #56]	; (1c8 <Reset_Handler+0xb0>)
     190:	6853      	ldr	r3, [r2, #4]
     192:	430b      	orrs	r3, r1
     194:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
     196:	4b0d      	ldr	r3, [pc, #52]	; (1cc <Reset_Handler+0xb4>)
     198:	4798      	blx	r3

        /* Branch to main function */
        main();
     19a:	4b0d      	ldr	r3, [pc, #52]	; (1d0 <Reset_Handler+0xb8>)
     19c:	4798      	blx	r3
     19e:	e7fe      	b.n	19e <Reset_Handler+0x86>
     1a0:	000064d4 	.word	0x000064d4
     1a4:	20000000 	.word	0x20000000
     1a8:	200004a4 	.word	0x200004a4
     1ac:	200004a8 	.word	0x200004a8
     1b0:	200007e8 	.word	0x200007e8
     1b4:	00000000 	.word	0x00000000
     1b8:	e000ed00 	.word	0xe000ed00
     1bc:	410070fc 	.word	0x410070fc
     1c0:	41005000 	.word	0x41005000
     1c4:	41004800 	.word	0x41004800
     1c8:	41004000 	.word	0x41004000
     1cc:	00006235 	.word	0x00006235
     1d0:	000009f5 	.word	0x000009f5

000001d4 <SystemInit>:
     1d4:	4a01      	ldr	r2, [pc, #4]	; (1dc <SystemInit+0x8>)
     1d6:	4b02      	ldr	r3, [pc, #8]	; (1e0 <SystemInit+0xc>)
     1d8:	601a      	str	r2, [r3, #0]
     1da:	4770      	bx	lr
     1dc:	000f4240 	.word	0x000f4240
     1e0:	20000000 	.word	0x20000000

000001e4 <AT25SFHoldTillReady>:
    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
    pinHigh(cs_mem);
}

void AT25SFHoldTillReady(){
     1e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     1e6:	2380      	movs	r3, #128	; 0x80
     1e8:	4c0a      	ldr	r4, [pc, #40]	; (214 <AT25SFHoldTillReady+0x30>)
     1ea:	02db      	lsls	r3, r3, #11
	pinLow(cs_mem);
	dummy_rx = spiDataTransfer(SPI1,OPCODE_READSTATUS);
     1ec:	4d0a      	ldr	r5, [pc, #40]	; (218 <AT25SFHoldTillReady+0x34>)
     1ee:	6163      	str	r3, [r4, #20]
     1f0:	2105      	movs	r1, #5
     1f2:	2001      	movs	r0, #1
     1f4:	47a8      	blx	r5
     1f6:	4b09      	ldr	r3, [pc, #36]	; (21c <AT25SFHoldTillReady+0x38>)
     1f8:	002e      	movs	r6, r5
        while (spiDataTransfer(SPI1,dummy_rx) & 0x01);
     1fa:	2701      	movs	r7, #1
     1fc:	001d      	movs	r5, r3
    pinHigh(cs_mem);
}

void AT25SFHoldTillReady(){
	pinLow(cs_mem);
	dummy_rx = spiDataTransfer(SPI1,OPCODE_READSTATUS);
     1fe:	7018      	strb	r0, [r3, #0]
        while (spiDataTransfer(SPI1,dummy_rx) & 0x01);
     200:	7829      	ldrb	r1, [r5, #0]
     202:	2001      	movs	r0, #1
     204:	47b0      	blx	r6
     206:	4238      	tst	r0, r7
     208:	d1fa      	bne.n	200 <AT25SFHoldTillReady+0x1c>
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     20a:	2380      	movs	r3, #128	; 0x80
     20c:	02db      	lsls	r3, r3, #11
     20e:	61a3      	str	r3, [r4, #24]
	pinHigh(cs_mem);
}
     210:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     212:	46c0      	nop			; (mov r8, r8)
     214:	41004400 	.word	0x41004400
     218:	000026b9 	.word	0x000026b9
     21c:	200004c8 	.word	0x200004c8

00000220 <AT25SFChipErase>:
void AT25SFChipErase() {
     220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     222:	2580      	movs	r5, #128	; 0x80
     224:	4c08      	ldr	r4, [pc, #32]	; (248 <AT25SFChipErase+0x28>)
     226:	02ed      	lsls	r5, r5, #11

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
     228:	4f08      	ldr	r7, [pc, #32]	; (24c <AT25SFChipErase+0x2c>)
     22a:	6165      	str	r5, [r4, #20]
     22c:	2106      	movs	r1, #6
     22e:	2001      	movs	r0, #1
     230:	47b8      	blx	r7
     232:	4e07      	ldr	r6, [pc, #28]	; (250 <AT25SFChipErase+0x30>)
    pinHigh(cs_mem);

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_CHIP_ERASE);
     234:	2160      	movs	r1, #96	; 0x60
	pinHigh(cs_mem);
}
void AT25SFChipErase() {

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
     236:	7030      	strb	r0, [r6, #0]
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     238:	61a5      	str	r5, [r4, #24]
    pinHigh(cs_mem);

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_CHIP_ERASE);
     23a:	2001      	movs	r0, #1
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     23c:	6165      	str	r5, [r4, #20]
     23e:	47b8      	blx	r7
     240:	7030      	strb	r0, [r6, #0]
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     242:	61a5      	str	r5, [r4, #24]
    pinHigh(cs_mem);
}
     244:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     246:	46c0      	nop			; (mov r8, r8)
     248:	41004400 	.word	0x41004400
     24c:	000026b9 	.word	0x000026b9
     250:	200004c8 	.word	0x200004c8

00000254 <AT25SFWriteBytes>:
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     254:	2380      	movs	r3, #128	; 0x80
    pinHigh(cs_mem);

    return _byte;
}

void AT25SFWriteBytes(uint32_t address, u8_t len, uint8_t *bytes) {
     256:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     258:	4e19      	ldr	r6, [pc, #100]	; (2c0 <AT25SFWriteBytes+0x6c>)
     25a:	02db      	lsls	r3, r3, #11
     25c:	9201      	str	r2, [sp, #4]
     25e:	0007      	movs	r7, r0


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
     260:	4c18      	ldr	r4, [pc, #96]	; (2c4 <AT25SFWriteBytes+0x70>)
    pinHigh(cs_mem);

    return _byte;
}

void AT25SFWriteBytes(uint32_t address, u8_t len, uint8_t *bytes) {
     262:	9100      	str	r1, [sp, #0]


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
     264:	2001      	movs	r0, #1
     266:	6173      	str	r3, [r6, #20]
     268:	2106      	movs	r1, #6
     26a:	47a0      	blx	r4
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     26c:	2380      	movs	r3, #128	; 0x80
     26e:	4d16      	ldr	r5, [pc, #88]	; (2c8 <AT25SFWriteBytes+0x74>)
     270:	02db      	lsls	r3, r3, #11
     272:	7028      	strb	r0, [r5, #0]
    pinHigh(cs_mem);

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_PROGRAM);
     274:	2102      	movs	r1, #2
     276:	61b3      	str	r3, [r6, #24]
     278:	2001      	movs	r0, #1
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     27a:	6173      	str	r3, [r6, #20]
     27c:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1,((address & 0xFF0000) >> 16));
     27e:	0c39      	lsrs	r1, r7, #16
    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
    pinHigh(cs_mem);

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_PROGRAM);
     280:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1,((address & 0xFF0000) >> 16));
     282:	b2c9      	uxtb	r1, r1
     284:	2001      	movs	r0, #1
     286:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1,((address & 0x00FF00) >>  8));
     288:	0a39      	lsrs	r1, r7, #8
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
    pinHigh(cs_mem);

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_PROGRAM);
    dummy_rx = spiDataTransfer(SPI1,((address & 0xFF0000) >> 16));
     28a:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1,((address & 0x00FF00) >>  8));
     28c:	b2c9      	uxtb	r1, r1
     28e:	2001      	movs	r0, #1
     290:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1,((address & 0x0000FF) >>  0));
     292:	b2f9      	uxtb	r1, r7
    pinHigh(cs_mem);

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_PROGRAM);
    dummy_rx = spiDataTransfer(SPI1,((address & 0xFF0000) >> 16));
    dummy_rx = spiDataTransfer(SPI1,((address & 0x00FF00) >>  8));
     294:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1,((address & 0x0000FF) >>  0));
     296:	2001      	movs	r0, #1
     298:	47a0      	blx	r4
     29a:	9b00      	ldr	r3, [sp, #0]
     29c:	9f01      	ldr	r7, [sp, #4]
     29e:	7028      	strb	r0, [r5, #0]
     2a0:	18fb      	adds	r3, r7, r3
     2a2:	9300      	str	r3, [sp, #0]

    for (u8_t pos = 0; pos < len; ++pos) {
     2a4:	9b00      	ldr	r3, [sp, #0]
     2a6:	429f      	cmp	r7, r3
     2a8:	d005      	beq.n	2b6 <AT25SFWriteBytes+0x62>
        dummy_rx = spiDataTransfer(SPI1, bytes[pos]);
     2aa:	7839      	ldrb	r1, [r7, #0]
     2ac:	2001      	movs	r0, #1
     2ae:	47a0      	blx	r4
     2b0:	3701      	adds	r7, #1
     2b2:	7028      	strb	r0, [r5, #0]
     2b4:	e7f6      	b.n	2a4 <AT25SFWriteBytes+0x50>
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     2b6:	2380      	movs	r3, #128	; 0x80
     2b8:	02db      	lsls	r3, r3, #11
     2ba:	61b3      	str	r3, [r6, #24]
    }

    pinHigh(cs_mem);

}
     2bc:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
     2be:	46c0      	nop			; (mov r8, r8)
     2c0:	41004400 	.word	0x41004400
     2c4:	000026b9 	.word	0x000026b9
     2c8:	200004c8 	.word	0x200004c8

000002cc <AT25SEWritePage>:
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     2cc:	2380      	movs	r3, #128	; 0x80
    delay_ms(70);

}


u8_t AT25SEWritePage(u32_t startingAddress, u8_t *data) {
     2ce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     2d0:	4e18      	ldr	r6, [pc, #96]	; (334 <AT25SEWritePage+0x68>)
     2d2:	02db      	lsls	r3, r3, #11
     2d4:	0007      	movs	r7, r0

    u8_t bytesSent = 0;


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
     2d6:	4d18      	ldr	r5, [pc, #96]	; (338 <AT25SEWritePage+0x6c>)
    delay_ms(70);

}


u8_t AT25SEWritePage(u32_t startingAddress, u8_t *data) {
     2d8:	9101      	str	r1, [sp, #4]

    u8_t bytesSent = 0;


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
     2da:	2001      	movs	r0, #1
     2dc:	6173      	str	r3, [r6, #20]
     2de:	2106      	movs	r1, #6
     2e0:	47a8      	blx	r5
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     2e2:	2380      	movs	r3, #128	; 0x80
     2e4:	4c15      	ldr	r4, [pc, #84]	; (33c <AT25SEWritePage+0x70>)
     2e6:	02db      	lsls	r3, r3, #11
     2e8:	7020      	strb	r0, [r4, #0]
    pinHigh(cs_mem);


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_PROGRAM);
     2ea:	2102      	movs	r1, #2
     2ec:	61b3      	str	r3, [r6, #24]
     2ee:	2001      	movs	r0, #1
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     2f0:	6173      	str	r3, [r6, #20]
     2f2:	47a8      	blx	r5
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     2f4:	0c39      	lsrs	r1, r7, #16
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
    pinHigh(cs_mem);


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_PROGRAM);
     2f6:	7020      	strb	r0, [r4, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     2f8:	b2c9      	uxtb	r1, r1
     2fa:	2001      	movs	r0, #1
     2fc:	47a8      	blx	r5
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     2fe:	0a39      	lsrs	r1, r7, #8
    pinHigh(cs_mem);


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_PROGRAM);
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     300:	7020      	strb	r0, [r4, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     302:	b2c9      	uxtb	r1, r1
     304:	2001      	movs	r0, #1
     306:	47a8      	blx	r5
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
     308:	b2f9      	uxtb	r1, r7


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_PROGRAM);
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     30a:	7020      	strb	r0, [r4, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
     30c:	2001      	movs	r0, #1
     30e:	47a8      	blx	r5
     310:	9f01      	ldr	r7, [sp, #4]
     312:	7020      	strb	r0, [r4, #0]
     314:	1c7b      	adds	r3, r7, #1
     316:	33ff      	adds	r3, #255	; 0xff
     318:	9301      	str	r3, [sp, #4]


    for (u16_t pos = 0; pos < 256; ++pos) {
        ++bytesSent;
        dummy_rx = spiDataTransfer(SPI1,data[pos]);
     31a:	7839      	ldrb	r1, [r7, #0]
     31c:	2001      	movs	r0, #1
     31e:	47a8      	blx	r5
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));


    for (u16_t pos = 0; pos < 256; ++pos) {
     320:	9b01      	ldr	r3, [sp, #4]
     322:	3701      	adds	r7, #1
        ++bytesSent;
        dummy_rx = spiDataTransfer(SPI1,data[pos]);
     324:	7020      	strb	r0, [r4, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));


    for (u16_t pos = 0; pos < 256; ++pos) {
     326:	429f      	cmp	r7, r3
     328:	d1f7      	bne.n	31a <AT25SEWritePage+0x4e>
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     32a:	2380      	movs	r3, #128	; 0x80
     32c:	02db      	lsls	r3, r3, #11
     32e:	61b3      	str	r3, [r6, #24]
    }
    pinHigh(cs_mem);


    return bytesSent;
}
     330:	2000      	movs	r0, #0
     332:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
     334:	41004400 	.word	0x41004400
     338:	000026b9 	.word	0x000026b9
     33c:	200004c8 	.word	0x200004c8

00000340 <AT25SEreadSample>:
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     340:	2380      	movs	r3, #128	; 0x80

void AT25SEreadSample(u32_t startingAddress, u8_t len, u8_t *data) {
     342:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     344:	4f17      	ldr	r7, [pc, #92]	; (3a4 <AT25SEreadSample+0x64>)
     346:	02db      	lsls	r3, r3, #11
     348:	9201      	str	r2, [sp, #4]
     34a:	0006      	movs	r6, r0

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
     34c:	4c16      	ldr	r4, [pc, #88]	; (3a8 <AT25SEreadSample+0x68>)


    return bytesSent;
}

void AT25SEreadSample(u32_t startingAddress, u8_t len, u8_t *data) {
     34e:	9100      	str	r1, [sp, #0]

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
     350:	2001      	movs	r0, #1
     352:	617b      	str	r3, [r7, #20]
     354:	210b      	movs	r1, #11
     356:	47a0      	blx	r4
     358:	4d14      	ldr	r5, [pc, #80]	; (3ac <AT25SEreadSample+0x6c>)
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     35a:	0c31      	lsrs	r1, r6, #16
}

void AT25SEreadSample(u32_t startingAddress, u8_t len, u8_t *data) {

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
     35c:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     35e:	b2c9      	uxtb	r1, r1
     360:	2001      	movs	r0, #1
     362:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     364:	0a31      	lsrs	r1, r6, #8

void AT25SEreadSample(u32_t startingAddress, u8_t len, u8_t *data) {

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     366:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     368:	b2c9      	uxtb	r1, r1
     36a:	2001      	movs	r0, #1
     36c:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
     36e:	b2f1      	uxtb	r1, r6
void AT25SEreadSample(u32_t startingAddress, u8_t len, u8_t *data) {

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     370:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
     372:	2001      	movs	r0, #1
     374:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1, 0xFF);
     376:	21ff      	movs	r1, #255	; 0xff

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
     378:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1, 0xFF);
     37a:	2001      	movs	r0, #1
     37c:	47a0      	blx	r4
     37e:	9b00      	ldr	r3, [sp, #0]
     380:	9e01      	ldr	r6, [sp, #4]
     382:	7028      	strb	r0, [r5, #0]
     384:	18f3      	adds	r3, r6, r3
     386:	9300      	str	r3, [sp, #0]


    for (u8_t pos = 0; pos < len; ++pos) {
     388:	9b00      	ldr	r3, [sp, #0]
     38a:	429e      	cmp	r6, r3
     38c:	d005      	beq.n	39a <AT25SEreadSample+0x5a>
        data[pos] = spiDataTransfer(SPI1,dummy_rx);
     38e:	7829      	ldrb	r1, [r5, #0]
     390:	2001      	movs	r0, #1
     392:	47a0      	blx	r4
     394:	7030      	strb	r0, [r6, #0]
     396:	3601      	adds	r6, #1
     398:	e7f6      	b.n	388 <AT25SEreadSample+0x48>
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     39a:	2380      	movs	r3, #128	; 0x80
     39c:	02db      	lsls	r3, r3, #11
     39e:	61bb      	str	r3, [r7, #24]
    }
    pinHigh(cs_mem);

}
     3a0:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
     3a2:	46c0      	nop			; (mov r8, r8)
     3a4:	41004400 	.word	0x41004400
     3a8:	000026b9 	.word	0x000026b9
     3ac:	200004c8 	.word	0x200004c8

000003b0 <AT25SEreadPage>:
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     3b0:	2380      	movs	r3, #128	; 0x80

void AT25SEreadPage(u32_t startingAddress, u8_t *data) {
     3b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     3b4:	4f16      	ldr	r7, [pc, #88]	; (410 <AT25SEreadPage+0x60>)
     3b6:	02db      	lsls	r3, r3, #11
     3b8:	0006      	movs	r6, r0


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
     3ba:	4c16      	ldr	r4, [pc, #88]	; (414 <AT25SEreadPage+0x64>)
    }
    pinHigh(cs_mem);

}

void AT25SEreadPage(u32_t startingAddress, u8_t *data) {
     3bc:	9101      	str	r1, [sp, #4]


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
     3be:	2001      	movs	r0, #1
     3c0:	617b      	str	r3, [r7, #20]
     3c2:	210b      	movs	r1, #11
     3c4:	47a0      	blx	r4
     3c6:	4d14      	ldr	r5, [pc, #80]	; (418 <AT25SEreadPage+0x68>)
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     3c8:	0c31      	lsrs	r1, r6, #16

void AT25SEreadPage(u32_t startingAddress, u8_t *data) {


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
     3ca:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     3cc:	b2c9      	uxtb	r1, r1
     3ce:	2001      	movs	r0, #1
     3d0:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     3d2:	0a31      	lsrs	r1, r6, #8
void AT25SEreadPage(u32_t startingAddress, u8_t *data) {


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     3d4:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     3d6:	b2c9      	uxtb	r1, r1
     3d8:	2001      	movs	r0, #1
     3da:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
     3dc:	b2f1      	uxtb	r1, r6


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     3de:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
     3e0:	2001      	movs	r0, #1
     3e2:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1, 0xFF);
     3e4:	21ff      	movs	r1, #255	; 0xff

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
     3e6:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1, 0xFF);
     3e8:	2001      	movs	r0, #1
     3ea:	47a0      	blx	r4
     3ec:	9e01      	ldr	r6, [sp, #4]
     3ee:	7028      	strb	r0, [r5, #0]
     3f0:	1c73      	adds	r3, r6, #1
     3f2:	33ff      	adds	r3, #255	; 0xff
     3f4:	9301      	str	r3, [sp, #4]


    for (u16_t pos = 0; pos < 256; ++pos) {
        data[pos] = spiDataTransfer(SPI1,dummy_rx);
     3f6:	7829      	ldrb	r1, [r5, #0]
     3f8:	2001      	movs	r0, #1
     3fa:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
    dummy_rx = spiDataTransfer(SPI1, 0xFF);


    for (u16_t pos = 0; pos < 256; ++pos) {
     3fc:	9b01      	ldr	r3, [sp, #4]
        data[pos] = spiDataTransfer(SPI1,dummy_rx);
     3fe:	7030      	strb	r0, [r6, #0]
     400:	3601      	adds	r6, #1
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
    dummy_rx = spiDataTransfer(SPI1, 0xFF);


    for (u16_t pos = 0; pos < 256; ++pos) {
     402:	429e      	cmp	r6, r3
     404:	d1f7      	bne.n	3f6 <AT25SEreadPage+0x46>
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     406:	2380      	movs	r3, #128	; 0x80
     408:	02db      	lsls	r3, r3, #11
     40a:	61bb      	str	r3, [r7, #24]
        data[pos] = spiDataTransfer(SPI1,dummy_rx);
    }
    pinHigh(cs_mem);

}
     40c:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
     40e:	46c0      	nop			; (mov r8, r8)
     410:	41004400 	.word	0x41004400
     414:	000026b9 	.word	0x000026b9
     418:	200004c8 	.word	0x200004c8

0000041c <readMS5803AdcResults>:
#include <boardDefines.h>
#include <math.h>
//#include <tgmath.h>


u32_t readMS5803AdcResults() {
     41c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     41e:	2780      	movs	r7, #128	; 0x80
     420:	4e0c      	ldr	r6, [pc, #48]	; (454 <readMS5803AdcResults+0x38>)
     422:	01ff      	lsls	r7, r7, #7

    u8_t dummy_tx = 0xFF;
    u8_t dummy_rx;

    pinLow(cs_baro);
    dummy_rx = spiDataTransfer(SPI2, cmdAdcRead_);
     424:	4c0c      	ldr	r4, [pc, #48]	; (458 <readMS5803AdcResults+0x3c>)
     426:	6177      	str	r7, [r6, #20]
     428:	2100      	movs	r1, #0
     42a:	2002      	movs	r0, #2
     42c:	47a0      	blx	r4
    u8_t _byte1 = spiDataTransfer(SPI2,dummy_tx);
     42e:	21ff      	movs	r1, #255	; 0xff
     430:	2002      	movs	r0, #2
     432:	47a0      	blx	r4
    u8_t _byte2 = spiDataTransfer(SPI2,dummy_tx);
     434:	21ff      	movs	r1, #255	; 0xff
    u8_t dummy_tx = 0xFF;
    u8_t dummy_rx;

    pinLow(cs_baro);
    dummy_rx = spiDataTransfer(SPI2, cmdAdcRead_);
    u8_t _byte1 = spiDataTransfer(SPI2,dummy_tx);
     436:	0005      	movs	r5, r0
    u8_t _byte2 = spiDataTransfer(SPI2,dummy_tx);
     438:	2002      	movs	r0, #2
     43a:	47a0      	blx	r4
    u8_t _byte3 = spiDataTransfer(SPI2,dummy_tx);
     43c:	21ff      	movs	r1, #255	; 0xff
    u8_t dummy_rx;

    pinLow(cs_baro);
    dummy_rx = spiDataTransfer(SPI2, cmdAdcRead_);
    u8_t _byte1 = spiDataTransfer(SPI2,dummy_tx);
    u8_t _byte2 = spiDataTransfer(SPI2,dummy_tx);
     43e:	9001      	str	r0, [sp, #4]
    u8_t _byte3 = spiDataTransfer(SPI2,dummy_tx);
     440:	2002      	movs	r0, #2
     442:	47a0      	blx	r4
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     444:	61b7      	str	r7, [r6, #24]
//    u8_t _byte2 = byteIn(spi2SCK,spi2MISO);
//    u8_t _byte3 = byteIn(spi2SCK,spi2MISO);
    pinHigh(cs_baro);

    u32_t _receive = (_byte1 << 16) | (_byte2 << 8) | (_byte3);
    return _receive;
     446:	9b01      	ldr	r3, [sp, #4]
     448:	042d      	lsls	r5, r5, #16
     44a:	021b      	lsls	r3, r3, #8
     44c:	431d      	orrs	r5, r3
     44e:	4328      	orrs	r0, r5
}
     450:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
     452:	46c0      	nop			; (mov r8, r8)
     454:	41004400 	.word	0x41004400
     458:	000026b9 	.word	0x000026b9

0000045c <ConvertPressureTemperature>:

void ConvertPressureTemperature(u32_t pressureRaw, u32_t tempRaw, u32_t* temperatureCelcus, int32_t* pressureMbar ) {
     45c:	b5f0      	push	{r4, r5, r6, r7, lr}
     45e:	b087      	sub	sp, #28
     460:	9304      	str	r3, [sp, #16]
    const u16_t C1 = coefficients_[0];
     462:	4b24      	ldr	r3, [pc, #144]	; (4f4 <ConvertPressureTemperature+0x98>)

    u32_t _receive = (_byte1 << 16) | (_byte2 << 8) | (_byte3);
    return _receive;
}

void ConvertPressureTemperature(u32_t pressureRaw, u32_t tempRaw, u32_t* temperatureCelcus, int32_t* pressureMbar ) {
     464:	0014      	movs	r4, r2
    const u16_t C1 = coefficients_[0];
     466:	881a      	ldrh	r2, [r3, #0]

    u32_t _receive = (_byte1 << 16) | (_byte2 << 8) | (_byte3);
    return _receive;
}

void ConvertPressureTemperature(u32_t pressureRaw, u32_t tempRaw, u32_t* temperatureCelcus, int32_t* pressureMbar ) {
     468:	9003      	str	r0, [sp, #12]
    const u16_t C1 = coefficients_[0];
     46a:	9200      	str	r2, [sp, #0]
    const u16_t C2 = coefficients_[1];
     46c:	885a      	ldrh	r2, [r3, #2]
    const u16_t C5 = coefficients_[4];
    const u16_t C6 = coefficients_[5];

    // calculate 1st order pressure and temperature (MS5607 1st order algorithm)
    const  int32_t dT = (tempRaw) - ((int32_t)C5 << 8);
    *temperatureCelcus  = 2000 + (((int64_t)dT * C6) >> 23) ;
     46e:	4f22      	ldr	r7, [pc, #136]	; (4f8 <ConvertPressureTemperature+0x9c>)
    return _receive;
}

void ConvertPressureTemperature(u32_t pressureRaw, u32_t tempRaw, u32_t* temperatureCelcus, int32_t* pressureMbar ) {
    const u16_t C1 = coefficients_[0];
    const u16_t C2 = coefficients_[1];
     470:	9201      	str	r2, [sp, #4]
    const u16_t C3 = coefficients_[2];
    const u16_t C4 = coefficients_[3];
     472:	88da      	ldrh	r2, [r3, #6]
}

void ConvertPressureTemperature(u32_t pressureRaw, u32_t tempRaw, u32_t* temperatureCelcus, int32_t* pressureMbar ) {
    const u16_t C1 = coefficients_[0];
    const u16_t C2 = coefficients_[1];
    const u16_t C3 = coefficients_[2];
     474:	889d      	ldrh	r5, [r3, #4]
    const u16_t C4 = coefficients_[3];
     476:	9202      	str	r2, [sp, #8]
    const u16_t C5 = coefficients_[4];
    const u16_t C6 = coefficients_[5];

    // calculate 1st order pressure and temperature (MS5607 1st order algorithm)
    const  int32_t dT = (tempRaw) - ((int32_t)C5 << 8);
    *temperatureCelcus  = 2000 + (((int64_t)dT * C6) >> 23) ;
     478:	891e      	ldrh	r6, [r3, #8]
     47a:	0236      	lsls	r6, r6, #8
     47c:	1b8e      	subs	r6, r1, r6
     47e:	17f2      	asrs	r2, r6, #31
     480:	9205      	str	r2, [sp, #20]
     482:	8958      	ldrh	r0, [r3, #10]
     484:	0032      	movs	r2, r6
     486:	17f3      	asrs	r3, r6, #31
     488:	2100      	movs	r1, #0
     48a:	47b8      	blx	r7
     48c:	23fa      	movs	r3, #250	; 0xfa
     48e:	0249      	lsls	r1, r1, #9
     490:	0dc0      	lsrs	r0, r0, #23
     492:	4308      	orrs	r0, r1
     494:	00db      	lsls	r3, r3, #3
     496:	18c0      	adds	r0, r0, r3
     498:	6020      	str	r0, [r4, #0]

    const  int64_t OFF   = ((int64_t)C2 << 16) + ((C4 * (int64_t)dT) >> 7);
    const  int64_t SENS  =  ((int64_t)C1 << 15) + ((C3 * (int64_t)dT) >> 8);
    *pressureMbar = ((((pressureRaw * SENS) >> 21) - OFF) >> 15);
     49a:	0032      	movs	r2, r6
     49c:	17f3      	asrs	r3, r6, #31
     49e:	0028      	movs	r0, r5
     4a0:	2100      	movs	r1, #0
     4a2:	47b8      	blx	r7
     4a4:	060c      	lsls	r4, r1, #24
     4a6:	120b      	asrs	r3, r1, #8
     4a8:	2100      	movs	r1, #0
     4aa:	0a02      	lsrs	r2, r0, #8
     4ac:	4322      	orrs	r2, r4
     4ae:	9c00      	ldr	r4, [sp, #0]
     4b0:	03e0      	lsls	r0, r4, #15
     4b2:	1880      	adds	r0, r0, r2
     4b4:	4159      	adcs	r1, r3
     4b6:	9a03      	ldr	r2, [sp, #12]
     4b8:	2300      	movs	r3, #0
     4ba:	47b8      	blx	r7
     4bc:	02cb      	lsls	r3, r1, #11
     4be:	0d44      	lsrs	r4, r0, #21
     4c0:	0032      	movs	r2, r6
     4c2:	431c      	orrs	r4, r3
     4c4:	154d      	asrs	r5, r1, #21
     4c6:	9b05      	ldr	r3, [sp, #20]
     4c8:	9802      	ldr	r0, [sp, #8]
     4ca:	2100      	movs	r1, #0
     4cc:	47b8      	blx	r7
     4ce:	064b      	lsls	r3, r1, #25
     4d0:	09c6      	lsrs	r6, r0, #7
     4d2:	431e      	orrs	r6, r3
     4d4:	2300      	movs	r3, #0
     4d6:	11cf      	asrs	r7, r1, #7
     4d8:	9901      	ldr	r1, [sp, #4]
     4da:	040a      	lsls	r2, r1, #16
     4dc:	1992      	adds	r2, r2, r6
     4de:	417b      	adcs	r3, r7
     4e0:	1aa4      	subs	r4, r4, r2
     4e2:	419d      	sbcs	r5, r3
     4e4:	046b      	lsls	r3, r5, #17
     4e6:	0be4      	lsrs	r4, r4, #15
     4e8:	431c      	orrs	r4, r3
     4ea:	9b04      	ldr	r3, [sp, #16]
     4ec:	601c      	str	r4, [r3, #0]

}
     4ee:	b007      	add	sp, #28
     4f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
     4f2:	46c0      	nop			; (mov r8, r8)
     4f4:	20000616 	.word	0x20000616
     4f8:	00003b0d 	.word	0x00003b0d

000004fc <paToFeetNOAA>:

double paToFeetNOAA(int32_t pressureMbar) {
     4fc:	b510      	push	{r4, lr}

    double lower =(((double)(pressureMbar)/10)/1013.25);
    double exponent = 0.190284;

    double altFeet = (1-pow(lower,exponent))*145366.45;
     4fe:	4b0c      	ldr	r3, [pc, #48]	; (530 <paToFeetNOAA+0x34>)
     500:	4798      	blx	r3
     502:	4c0c      	ldr	r4, [pc, #48]	; (534 <paToFeetNOAA+0x38>)
     504:	2200      	movs	r2, #0
     506:	4b0c      	ldr	r3, [pc, #48]	; (538 <paToFeetNOAA+0x3c>)
     508:	47a0      	blx	r4
     50a:	2200      	movs	r2, #0
     50c:	4b0b      	ldr	r3, [pc, #44]	; (53c <paToFeetNOAA+0x40>)
     50e:	47a0      	blx	r4
     510:	4a0b      	ldr	r2, [pc, #44]	; (540 <paToFeetNOAA+0x44>)
     512:	4b0c      	ldr	r3, [pc, #48]	; (544 <paToFeetNOAA+0x48>)
     514:	4c0c      	ldr	r4, [pc, #48]	; (548 <paToFeetNOAA+0x4c>)
     516:	47a0      	blx	r4
    return altFeet;
     518:	4c0c      	ldr	r4, [pc, #48]	; (54c <paToFeetNOAA+0x50>)
double paToFeetNOAA(int32_t pressureMbar) {

    double lower =(((double)(pressureMbar)/10)/1013.25);
    double exponent = 0.190284;

    double altFeet = (1-pow(lower,exponent))*145366.45;
     51a:	0002      	movs	r2, r0
     51c:	000b      	movs	r3, r1
    return altFeet;
     51e:	2000      	movs	r0, #0
     520:	490b      	ldr	r1, [pc, #44]	; (550 <paToFeetNOAA+0x54>)
     522:	47a0      	blx	r4
     524:	4a0b      	ldr	r2, [pc, #44]	; (554 <paToFeetNOAA+0x58>)
     526:	4b0c      	ldr	r3, [pc, #48]	; (558 <paToFeetNOAA+0x5c>)
     528:	4c0c      	ldr	r4, [pc, #48]	; (55c <paToFeetNOAA+0x60>)
     52a:	47a0      	blx	r4

}
     52c:	bd10      	pop	{r4, pc}
     52e:	46c0      	nop			; (mov r8, r8)
     530:	00005e21 	.word	0x00005e21
     534:	00004991 	.word	0x00004991
     538:	40240000 	.word	0x40240000
     53c:	408faa00 	.word	0x408faa00
     540:	e279dd3c 	.word	0xe279dd3c
     544:	3fc85b39 	.word	0x3fc85b39
     548:	000027e9 	.word	0x000027e9
     54c:	000056cd 	.word	0x000056cd
     550:	3ff00000 	.word	0x3ff00000
     554:	9999999a 	.word	0x9999999a
     558:	4101beb3 	.word	0x4101beb3
     55c:	000051d9 	.word	0x000051d9

00000560 <readMS5803Coefficients>:
    }
}

*/

void readMS5803Coefficients() {
     560:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     562:	2400      	movs	r4, #0

    u8_t dummy_tx = 0xFF;
    u8_t dummy_rx;

    for (u8_t coeff_num = 0; coeff_num < 6 ; ++coeff_num ) {
        delay_us(600);
     564:	2096      	movs	r0, #150	; 0x96
     566:	4d10      	ldr	r5, [pc, #64]	; (5a8 <readMS5803Coefficients+0x48>)
     568:	0080      	lsls	r0, r0, #2
     56a:	47a8      	blx	r5
        u8_t _cmd = MS5803_CMD_PROM_READ + ((coeff_num+1)*2);
        delay_us(600);
     56c:	2096      	movs	r0, #150	; 0x96
     56e:	0080      	lsls	r0, r0, #2
     570:	47a8      	blx	r5
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     572:	2780      	movs	r7, #128	; 0x80
        pinLow(cs_baro);
        dummy_rx = spiDataTransfer(SPI2, _cmd);
     574:	0021      	movs	r1, r4
     576:	4e0d      	ldr	r6, [pc, #52]	; (5ac <readMS5803Coefficients+0x4c>)
     578:	01ff      	lsls	r7, r7, #7
     57a:	395e      	subs	r1, #94	; 0x5e
     57c:	4d0c      	ldr	r5, [pc, #48]	; (5b0 <readMS5803Coefficients+0x50>)
     57e:	b2c9      	uxtb	r1, r1
     580:	6177      	str	r7, [r6, #20]
     582:	2002      	movs	r0, #2
     584:	47a8      	blx	r5
        u8_t _byte1 = spiDataTransfer(SPI2,dummy_tx);
     586:	21ff      	movs	r1, #255	; 0xff
     588:	2002      	movs	r0, #2
     58a:	47a8      	blx	r5
        u8_t _byte2 = spiDataTransfer(SPI2,dummy_tx);
     58c:	21ff      	movs	r1, #255	; 0xff
        delay_us(600);
        u8_t _cmd = MS5803_CMD_PROM_READ + ((coeff_num+1)*2);
        delay_us(600);
        pinLow(cs_baro);
        dummy_rx = spiDataTransfer(SPI2, _cmd);
        u8_t _byte1 = spiDataTransfer(SPI2,dummy_tx);
     58e:	9001      	str	r0, [sp, #4]
        u8_t _byte2 = spiDataTransfer(SPI2,dummy_tx);
     590:	2002      	movs	r0, #2
     592:	47a8      	blx	r5
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     594:	61b7      	str	r7, [r6, #24]
//        byteOut(spi2SCK,spi2MOSI, _cmd);
//        u8_t _byte1 = byteIn(spi2SCK,spi2MISO);
//        u8_t _byte2 = byteIn(spi2SCK,spi2MISO);
        pinHigh(cs_baro);
        coefficients_[coeff_num] = (_byte1 << 8) | _byte2;
     596:	9b01      	ldr	r3, [sp, #4]
     598:	021b      	lsls	r3, r3, #8
     59a:	4318      	orrs	r0, r3
     59c:	4b05      	ldr	r3, [pc, #20]	; (5b4 <readMS5803Coefficients+0x54>)
     59e:	5318      	strh	r0, [r3, r4]
     5a0:	3402      	adds	r4, #2
void readMS5803Coefficients() {

    u8_t dummy_tx = 0xFF;
    u8_t dummy_rx;

    for (u8_t coeff_num = 0; coeff_num < 6 ; ++coeff_num ) {
     5a2:	2c0c      	cmp	r4, #12
     5a4:	d1de      	bne.n	564 <readMS5803Coefficients+0x4>
//        u8_t _byte2 = byteIn(spi2SCK,spi2MISO);
        pinHigh(cs_baro);
        coefficients_[coeff_num] = (_byte1 << 8) | _byte2;
    }

}
     5a6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
     5a8:	00000ec9 	.word	0x00000ec9
     5ac:	41004400 	.word	0x41004400
     5b0:	000026b9 	.word	0x000026b9
     5b4:	20000616 	.word	0x20000616

000005b8 <initMS5803Barometer>:

void initMS5803Barometer() {
     5b8:	b570      	push	{r4, r5, r6, lr}
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     5ba:	2580      	movs	r5, #128	; 0x80
     5bc:	4c06      	ldr	r4, [pc, #24]	; (5d8 <initMS5803Barometer+0x20>)
     5be:	01ed      	lsls	r5, r5, #7

    u8_t dummy_tx = 0xFF;
    u8_t dummy_rx;

    pinLow(cs_baro);
    dummy_rx = spiDataTransfer(SPI2, MS5803_CMD_RES);
     5c0:	211e      	movs	r1, #30
     5c2:	6165      	str	r5, [r4, #20]
     5c4:	4b05      	ldr	r3, [pc, #20]	; (5dc <initMS5803Barometer+0x24>)
     5c6:	2002      	movs	r0, #2
     5c8:	4798      	blx	r3
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     5ca:	61a5      	str	r5, [r4, #24]
    //byteOut(spi2SCK,spi2MOSI, MS5803_CMD_RES);
    pinHigh(cs_baro);
    delay_ms(200);
     5cc:	20c8      	movs	r0, #200	; 0xc8
     5ce:	4b04      	ldr	r3, [pc, #16]	; (5e0 <initMS5803Barometer+0x28>)
     5d0:	4798      	blx	r3
    readMS5803Coefficients();
     5d2:	4b04      	ldr	r3, [pc, #16]	; (5e4 <initMS5803Barometer+0x2c>)
     5d4:	4798      	blx	r3
    //my_barometer->temperatureCelcus = 2000;




}
     5d6:	bd70      	pop	{r4, r5, r6, pc}
     5d8:	41004400 	.word	0x41004400
     5dc:	000026b9 	.word	0x000026b9
     5e0:	00000ef9 	.word	0x00000ef9
     5e4:	00000561 	.word	0x00000561

000005e8 <init>:

void init() {


    /* Set 1 Flash Wait State for 48MHz, cf tables 20.9 and 35.27 in SAMD21 Datasheet */
    NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val;
     5e8:	211e      	movs	r1, #30
#include <util.h>
#include <boardDefines.h>
#include "math.h"


void init() {
     5ea:	b5f0      	push	{r4, r5, r6, r7, lr}


    /* Set 1 Flash Wait State for 48MHz, cf tables 20.9 and 35.27 in SAMD21 Datasheet */
    NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val;
     5ec:	4af0      	ldr	r2, [pc, #960]	; (9b0 <init+0x3c8>)
#include <util.h>
#include <boardDefines.h>
#include "math.h"


void init() {
     5ee:	b085      	sub	sp, #20


    /* Set 1 Flash Wait State for 48MHz, cf tables 20.9 and 35.27 in SAMD21 Datasheet */
    NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val;
     5f0:	6853      	ldr	r3, [r2, #4]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     5f2:	2401      	movs	r4, #1
     5f4:	438b      	bics	r3, r1
     5f6:	391c      	subs	r1, #28
     5f8:	430b      	orrs	r3, r1
     5fa:	6053      	str	r3, [r2, #4]


    /* Turn on the digital interface clock */
    PM->APBAMASK.reg |= PM_APBAMASK_GCLK;
     5fc:	4aed      	ldr	r2, [pc, #948]	; (9b4 <init+0x3cc>)
     5fe:	3106      	adds	r1, #6
     600:	6993      	ldr	r3, [r2, #24]

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     602:	260f      	movs	r6, #15
     604:	430b      	orrs	r3, r1
     606:	6193      	str	r3, [r2, #24]


    SystemInit();
     608:	4beb      	ldr	r3, [pc, #940]	; (9b8 <init+0x3d0>)
     60a:	4798      	blx	r3
    GclkInit();
     60c:	4beb      	ldr	r3, [pc, #940]	; (9bc <init+0x3d4>)
     60e:	4798      	blx	r3
    RtcInit();
     610:	4beb      	ldr	r3, [pc, #940]	; (9c0 <init+0x3d8>)
     612:	4798      	blx	r3
    delayInit();
     614:	4beb      	ldr	r3, [pc, #940]	; (9c4 <init+0x3dc>)
     616:	4798      	blx	r3
    adcInit();
     618:	4beb      	ldr	r3, [pc, #940]	; (9c8 <init+0x3e0>)
     61a:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     61c:	2240      	movs	r2, #64	; 0x40
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     61e:	21c1      	movs	r1, #193	; 0xc1

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     620:	4bea      	ldr	r3, [pc, #936]	; (9cc <init+0x3e4>)
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     622:	0089      	lsls	r1, r1, #2

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     624:	601a      	str	r2, [r3, #0]
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     626:	5858      	ldr	r0, [r3, r1]
     628:	4ae9      	ldr	r2, [pc, #932]	; (9d0 <init+0x3e8>)
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     62a:	2510      	movs	r5, #16
     62c:	4002      	ands	r2, r0
     62e:	505a      	str	r2, [r3, r1]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     630:	4be8      	ldr	r3, [pc, #928]	; (9d4 <init+0x3ec>)
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     632:	2002      	movs	r0, #2
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     634:	0019      	movs	r1, r3
     636:	3154      	adds	r1, #84	; 0x54
     638:	780a      	ldrb	r2, [r1, #0]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     63a:	001f      	movs	r7, r3
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     63c:	43a2      	bics	r2, r4
     63e:	700a      	strb	r2, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     640:	2280      	movs	r2, #128	; 0x80
     642:	0352      	lsls	r2, r2, #13
     644:	609a      	str	r2, [r3, #8]

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     646:	3921      	subs	r1, #33	; 0x21
     648:	780a      	ldrb	r2, [r1, #0]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     64a:	3794      	adds	r7, #148	; 0x94

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     64c:	43b2      	bics	r2, r6
     64e:	4322      	orrs	r2, r4
     650:	700a      	strb	r2, [r1, #0]
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     652:	7cca      	ldrb	r2, [r1, #19]
     654:	4322      	orrs	r2, r4
     656:	74ca      	strb	r2, [r1, #19]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     658:	001a      	movs	r2, r3
     65a:	32c3      	adds	r2, #195	; 0xc3
     65c:	7811      	ldrb	r1, [r2, #0]
     65e:	43a1      	bics	r1, r4
     660:	7011      	strb	r1, [r2, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     662:	7811      	ldrb	r1, [r2, #0]
     664:	4301      	orrs	r1, r0
     666:	7011      	strb	r1, [r2, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     668:	2108      	movs	r1, #8
     66a:	468c      	mov	ip, r1
     66c:	449c      	add	ip, r3
     66e:	4661      	mov	r1, ip
     670:	3006      	adds	r0, #6
     672:	67c8      	str	r0, [r1, #124]	; 0x7c
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     674:	0019      	movs	r1, r3
     676:	31b1      	adds	r1, #177	; 0xb1
     678:	7808      	ldrb	r0, [r1, #0]
     67a:	4030      	ands	r0, r6
     67c:	4328      	orrs	r0, r5
     67e:	7008      	strb	r0, [r1, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     680:	7810      	ldrb	r0, [r2, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     682:	3d0e      	subs	r5, #14
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     684:	4320      	orrs	r0, r4
     686:	7010      	strb	r0, [r2, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     688:	0018      	movs	r0, r3
     68a:	30d7      	adds	r0, #215	; 0xd7
     68c:	7802      	ldrb	r2, [r0, #0]
     68e:	43a2      	bics	r2, r4
     690:	7002      	strb	r2, [r0, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     692:	2080      	movs	r0, #128	; 0x80
     694:	4ad0      	ldr	r2, [pc, #832]	; (9d8 <init+0x3f0>)
     696:	0400      	lsls	r0, r0, #16
     698:	6010      	str	r0, [r2, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     69a:	001a      	movs	r2, r3
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     69c:	6038      	str	r0, [r7, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     69e:	32c2      	adds	r2, #194	; 0xc2
     6a0:	7810      	ldrb	r0, [r2, #0]
     6a2:	43a0      	bics	r0, r4
     6a4:	7010      	strb	r0, [r2, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     6a6:	7810      	ldrb	r0, [r2, #0]
     6a8:	4328      	orrs	r0, r5
     6aa:	7010      	strb	r0, [r2, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     6ac:	4660      	mov	r0, ip
     6ae:	3502      	adds	r5, #2
     6b0:	67c5      	str	r5, [r0, #124]	; 0x7c

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     6b2:	7808      	ldrb	r0, [r1, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     6b4:	350c      	adds	r5, #12
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     6b6:	43b0      	bics	r0, r6
     6b8:	4320      	orrs	r0, r4
     6ba:	7008      	strb	r0, [r1, #0]
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     6bc:	7811      	ldrb	r1, [r2, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     6be:	2002      	movs	r0, #2
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     6c0:	4321      	orrs	r1, r4
     6c2:	7011      	strb	r1, [r2, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     6c4:	0019      	movs	r1, r3
     6c6:	31d6      	adds	r1, #214	; 0xd6
     6c8:	780a      	ldrb	r2, [r1, #0]
     6ca:	43a2      	bics	r2, r4
     6cc:	700a      	strb	r2, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     6ce:	2180      	movs	r1, #128	; 0x80
     6d0:	4ac1      	ldr	r2, [pc, #772]	; (9d8 <init+0x3f0>)
     6d2:	03c9      	lsls	r1, r1, #15
     6d4:	6011      	str	r1, [r2, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     6d6:	001a      	movs	r2, r3
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     6d8:	6039      	str	r1, [r7, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     6da:	3243      	adds	r2, #67	; 0x43
     6dc:	7811      	ldrb	r1, [r2, #0]
     6de:	3f4b      	subs	r7, #75	; 0x4b
     6e0:	43a1      	bics	r1, r4
     6e2:	7011      	strb	r1, [r2, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     6e4:	7811      	ldrb	r1, [r2, #0]
     6e6:	4301      	orrs	r1, r0
     6e8:	7011      	strb	r1, [r2, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     6ea:	0018      	movs	r0, r3


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     6ec:	2108      	movs	r1, #8
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     6ee:	3031      	adds	r0, #49	; 0x31


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     6f0:	6059      	str	r1, [r3, #4]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     6f2:	7801      	ldrb	r1, [r0, #0]
     6f4:	4031      	ands	r1, r6
     6f6:	430d      	orrs	r5, r1
     6f8:	7005      	strb	r5, [r0, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     6fa:	7811      	ldrb	r1, [r2, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     6fc:	2502      	movs	r5, #2
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     6fe:	4321      	orrs	r1, r4
     700:	7011      	strb	r1, [r2, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     702:	0019      	movs	r1, r3
     704:	3159      	adds	r1, #89	; 0x59
     706:	780a      	ldrb	r2, [r1, #0]
     708:	43a2      	bics	r2, r4
     70a:	700a      	strb	r2, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     70c:	2280      	movs	r2, #128	; 0x80
     70e:	0492      	lsls	r2, r2, #18
     710:	609a      	str	r2, [r3, #8]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     712:	615a      	str	r2, [r3, #20]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     714:	001a      	movs	r2, r3
     716:	3242      	adds	r2, #66	; 0x42
     718:	7811      	ldrb	r1, [r2, #0]
     71a:	43a1      	bics	r1, r4
     71c:	7011      	strb	r1, [r2, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     71e:	7811      	ldrb	r1, [r2, #0]
     720:	4329      	orrs	r1, r5
     722:	7011      	strb	r1, [r2, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     724:	2104      	movs	r1, #4
     726:	6059      	str	r1, [r3, #4]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     728:	7801      	ldrb	r1, [r0, #0]
     72a:	43b1      	bics	r1, r6
     72c:	4321      	orrs	r1, r4
     72e:	7001      	strb	r1, [r0, #0]
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     730:	7811      	ldrb	r1, [r2, #0]
     732:	4321      	orrs	r1, r4
     734:	7011      	strb	r1, [r2, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     736:	0019      	movs	r1, r3
     738:	3158      	adds	r1, #88	; 0x58
     73a:	780a      	ldrb	r2, [r1, #0]
     73c:	43a2      	bics	r2, r4
     73e:	700a      	strb	r2, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     740:	2280      	movs	r2, #128	; 0x80
    pinIn(senseDPin);
    pinMux(senseDPin);
    pinOut(fireDPin);
    pinLow(fireDPin);

    charges.Afired = false;
     742:	2100      	movs	r1, #0
     744:	0452      	lsls	r2, r2, #17
     746:	609a      	str	r2, [r3, #8]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     748:	615a      	str	r2, [r3, #20]
     74a:	4aa4      	ldr	r2, [pc, #656]	; (9dc <init+0x3f4>)
     74c:	7011      	strb	r1, [r2, #0]
    charges.Bfired = false;
     74e:	2100      	movs	r1, #0
     750:	7051      	strb	r1, [r2, #1]
    charges.Cfired = false;
     752:	2100      	movs	r1, #0
     754:	7091      	strb	r1, [r2, #2]
    charges.Dfired = false;
     756:	2100      	movs	r1, #0
     758:	70d1      	strb	r1, [r2, #3]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     75a:	7dc2      	ldrb	r2, [r0, #23]
     75c:	43a2      	bics	r2, r4
     75e:	75c2      	strb	r2, [r0, #23]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     760:	2280      	movs	r2, #128	; 0x80
     762:	0052      	lsls	r2, r2, #1
     764:	609a      	str	r2, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     766:	783a      	ldrb	r2, [r7, #0]
     768:	43a2      	bics	r2, r4
     76a:	703a      	strb	r2, [r7, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     76c:	2280      	movs	r2, #128	; 0x80
     76e:	0092      	lsls	r2, r2, #2
     770:	609a      	str	r2, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     772:	001a      	movs	r2, r3
     774:	324b      	adds	r2, #75	; 0x4b
     776:	7811      	ldrb	r1, [r2, #0]
     778:	43a1      	bics	r1, r4
     77a:	7011      	strb	r1, [r2, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     77c:	7811      	ldrb	r1, [r2, #0]
     77e:	4329      	orrs	r1, r5
     780:	7011      	strb	r1, [r2, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     782:	2180      	movs	r1, #128	; 0x80
     784:	0109      	lsls	r1, r1, #4
     786:	6059      	str	r1, [r3, #4]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     788:	2135      	movs	r1, #53	; 0x35
     78a:	468c      	mov	ip, r1
     78c:	449c      	add	ip, r3
     78e:	4661      	mov	r1, ip
     790:	7809      	ldrb	r1, [r1, #0]
     792:	351e      	adds	r5, #30
     794:	4031      	ands	r1, r6
     796:	4329      	orrs	r1, r5
     798:	4665      	mov	r5, ip
     79a:	7029      	strb	r1, [r5, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     79c:	7811      	ldrb	r1, [r2, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     79e:	2520      	movs	r5, #32
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     7a0:	4321      	orrs	r1, r4
     7a2:	7011      	strb	r1, [r2, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     7a4:	0019      	movs	r1, r3
     7a6:	3134      	adds	r1, #52	; 0x34
     7a8:	780a      	ldrb	r2, [r1, #0]
     7aa:	4032      	ands	r2, r6
     7ac:	432a      	orrs	r2, r5
     7ae:	700a      	strb	r2, [r1, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     7b0:	783a      	ldrb	r2, [r7, #0]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     7b2:	3d1e      	subs	r5, #30
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     7b4:	4322      	orrs	r2, r4
     7b6:	703a      	strb	r2, [r7, #0]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     7b8:	780a      	ldrb	r2, [r1, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     7ba:	3706      	adds	r7, #6

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     7bc:	43b2      	bics	r2, r6
     7be:	432a      	orrs	r2, r5
     7c0:	700a      	strb	r2, [r1, #0]
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     7c2:	7dc2      	ldrb	r2, [r0, #23]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     7c4:	3196      	adds	r1, #150	; 0x96
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     7c6:	4322      	orrs	r2, r4
     7c8:	75c2      	strb	r2, [r0, #23]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     7ca:	780a      	ldrb	r2, [r1, #0]
     7cc:	43a2      	bics	r2, r4
     7ce:	700a      	strb	r2, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     7d0:	2280      	movs	r2, #128	; 0x80
     7d2:	4981      	ldr	r1, [pc, #516]	; (9d8 <init+0x3f0>)
     7d4:	00d2      	lsls	r2, r2, #3
     7d6:	600a      	str	r2, [r1, #0]
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     7d8:	0019      	movs	r1, r3
     7da:	3198      	adds	r1, #152	; 0x98
     7dc:	600a      	str	r2, [r1, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     7de:	7e41      	ldrb	r1, [r0, #25]
     7e0:	43a1      	bics	r1, r4
     7e2:	7641      	strb	r1, [r0, #25]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     7e4:	609a      	str	r2, [r3, #8]
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     7e6:	619a      	str	r2, [r3, #24]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     7e8:	7fc2      	ldrb	r2, [r0, #31]
     7ea:	43a2      	bics	r2, r4
     7ec:	77c2      	strb	r2, [r0, #31]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     7ee:	2280      	movs	r2, #128	; 0x80
     7f0:	0252      	lsls	r2, r2, #9
     7f2:	609a      	str	r2, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     7f4:	78ba      	ldrb	r2, [r7, #2]
     7f6:	43a2      	bics	r2, r4
     7f8:	70ba      	strb	r2, [r7, #2]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     7fa:	2280      	movs	r2, #128	; 0x80
     7fc:	0292      	lsls	r2, r2, #10
     7fe:	609a      	str	r2, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     800:	001a      	movs	r2, r3
     802:	3253      	adds	r2, #83	; 0x53
     804:	7811      	ldrb	r1, [r2, #0]
     806:	43a1      	bics	r1, r4
     808:	7011      	strb	r1, [r2, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     80a:	7811      	ldrb	r1, [r2, #0]
     80c:	4329      	orrs	r1, r5
     80e:	7011      	strb	r1, [r2, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     810:	2180      	movs	r1, #128	; 0x80
     812:	0309      	lsls	r1, r1, #12
     814:	6059      	str	r1, [r3, #4]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     816:	2139      	movs	r1, #57	; 0x39
     818:	468c      	mov	ip, r1
     81a:	449c      	add	ip, r3
     81c:	4661      	mov	r1, ip
     81e:	7809      	ldrb	r1, [r1, #0]
     820:	351e      	adds	r5, #30
     822:	4031      	ands	r1, r6
     824:	4329      	orrs	r1, r5
     826:	4665      	mov	r5, ip
     828:	7029      	strb	r1, [r5, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     82a:	7811      	ldrb	r1, [r2, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     82c:	2520      	movs	r5, #32
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     82e:	4321      	orrs	r1, r4
     830:	7011      	strb	r1, [r2, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     832:	0019      	movs	r1, r3
     834:	3138      	adds	r1, #56	; 0x38
     836:	780a      	ldrb	r2, [r1, #0]
     838:	4032      	ands	r2, r6
     83a:	432a      	orrs	r2, r5
     83c:	700a      	strb	r2, [r1, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     83e:	78ba      	ldrb	r2, [r7, #2]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     840:	3d1e      	subs	r5, #30
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     842:	4322      	orrs	r2, r4
     844:	70ba      	strb	r2, [r7, #2]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     846:	780a      	ldrb	r2, [r1, #0]
     848:	43b2      	bics	r2, r6
     84a:	432a      	orrs	r2, r5
     84c:	700a      	strb	r2, [r1, #0]
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     84e:	7fc2      	ldrb	r2, [r0, #31]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     850:	3114      	adds	r1, #20
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     852:	4322      	orrs	r2, r4
     854:	77c2      	strb	r2, [r0, #31]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     856:	798a      	ldrb	r2, [r1, #6]
     858:	43a2      	bics	r2, r4
     85a:	718a      	strb	r2, [r1, #6]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     85c:	2280      	movs	r2, #128	; 0x80
     85e:	02d2      	lsls	r2, r2, #11
     860:	609a      	str	r2, [r3, #8]
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     862:	619a      	str	r2, [r3, #24]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     864:	9103      	str	r1, [sp, #12]
     866:	780a      	ldrb	r2, [r1, #0]
     868:	43a2      	bics	r2, r4
     86a:	700a      	strb	r2, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     86c:	2280      	movs	r2, #128	; 0x80
     86e:	0152      	lsls	r2, r2, #5
     870:	609a      	str	r2, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     872:	783a      	ldrb	r2, [r7, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     874:	2120      	movs	r1, #32
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     876:	43a2      	bics	r2, r4
     878:	703a      	strb	r2, [r7, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     87a:	2280      	movs	r2, #128	; 0x80
     87c:	0212      	lsls	r2, r2, #8
     87e:	609a      	str	r2, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     880:	001a      	movs	r2, r3
     882:	324d      	adds	r2, #77	; 0x4d
     884:	7810      	ldrb	r0, [r2, #0]
     886:	43a0      	bics	r0, r4
     888:	7010      	strb	r0, [r2, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     88a:	7810      	ldrb	r0, [r2, #0]
     88c:	4328      	orrs	r0, r5
     88e:	7010      	strb	r0, [r2, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     890:	2080      	movs	r0, #128	; 0x80
     892:	0180      	lsls	r0, r0, #6
     894:	6058      	str	r0, [r3, #4]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     896:	0018      	movs	r0, r3
     898:	3036      	adds	r0, #54	; 0x36
     89a:	7805      	ldrb	r5, [r0, #0]
     89c:	4035      	ands	r5, r6
     89e:	430d      	orrs	r5, r1
     8a0:	7005      	strb	r5, [r0, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     8a2:	7811      	ldrb	r1, [r2, #0]
     8a4:	000d      	movs	r5, r1
     8a6:	4325      	orrs	r5, r4
     8a8:	7015      	strb	r5, [r2, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     8aa:	2237      	movs	r2, #55	; 0x37
     8ac:	4694      	mov	ip, r2
     8ae:	449c      	add	ip, r3
     8b0:	4662      	mov	r2, ip
     8b2:	2120      	movs	r1, #32
     8b4:	7812      	ldrb	r2, [r2, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     8b6:	2502      	movs	r5, #2
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     8b8:	4032      	ands	r2, r6
     8ba:	430a      	orrs	r2, r1
     8bc:	4661      	mov	r1, ip
     8be:	700a      	strb	r2, [r1, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     8c0:	2102      	movs	r1, #2
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     8c2:	783a      	ldrb	r2, [r7, #0]
     8c4:	4322      	orrs	r2, r4
     8c6:	703a      	strb	r2, [r7, #0]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     8c8:	7802      	ldrb	r2, [r0, #0]
     8ca:	43b2      	bics	r2, r6
     8cc:	430a      	orrs	r2, r1
     8ce:	7002      	strb	r2, [r0, #0]
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     8d0:	9a03      	ldr	r2, [sp, #12]
     8d2:	9903      	ldr	r1, [sp, #12]
     8d4:	7812      	ldrb	r2, [r2, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     8d6:	3020      	adds	r0, #32
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     8d8:	4322      	orrs	r2, r4
     8da:	700a      	strb	r2, [r1, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     8dc:	0019      	movs	r1, r3
     8de:	314e      	adds	r1, #78	; 0x4e
     8e0:	780a      	ldrb	r2, [r1, #0]
     8e2:	43a2      	bics	r2, r4
     8e4:	700a      	strb	r2, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     8e6:	2280      	movs	r2, #128	; 0x80
     8e8:	01d2      	lsls	r2, r2, #7
     8ea:	609a      	str	r2, [r3, #8]
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     8ec:	619a      	str	r2, [r3, #24]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     8ee:	001a      	movs	r2, r3
     8f0:	3255      	adds	r2, #85	; 0x55
     8f2:	7811      	ldrb	r1, [r2, #0]
     8f4:	43a1      	bics	r1, r4
     8f6:	7011      	strb	r1, [r2, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     8f8:	2180      	movs	r1, #128	; 0x80
     8fa:	0389      	lsls	r1, r1, #14
     8fc:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
}


inline static void pinCfg(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].reg = p.cfg;
     8fe:	2140      	movs	r1, #64	; 0x40
     900:	7011      	strb	r1, [r2, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     902:	7802      	ldrb	r2, [r0, #0]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     904:	0019      	movs	r1, r3
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     906:	43a2      	bics	r2, r4
     908:	7002      	strb	r2, [r0, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     90a:	2280      	movs	r2, #128	; 0x80
     90c:	03d2      	lsls	r2, r2, #15

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     90e:	313b      	adds	r1, #59	; 0x3b
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     910:	609a      	str	r2, [r3, #8]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     912:	780a      	ldrb	r2, [r1, #0]
     914:	43b2      	bics	r2, r6
     916:	432a      	orrs	r2, r5
     918:	700a      	strb	r2, [r1, #0]
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     91a:	7802      	ldrb	r2, [r0, #0]
    pinMux(TxPo);
    pinIn(RxPo);
    pinMux(RxPo);


    sercomClockEnable(SPI2, 3, 4);
     91c:	4f30      	ldr	r7, [pc, #192]	; (9e0 <init+0x3f8>)
     91e:	4322      	orrs	r2, r4
     920:	7002      	strb	r2, [r0, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     922:	001a      	movs	r2, r3
     924:	3257      	adds	r2, #87	; 0x57
     926:	7810      	ldrb	r0, [r2, #0]
     928:	43a0      	bics	r0, r4
     92a:	7010      	strb	r0, [r2, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     92c:	7810      	ldrb	r0, [r2, #0]
     92e:	4328      	orrs	r0, r5
     930:	7010      	strb	r0, [r2, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     932:	2080      	movs	r0, #128	; 0x80
     934:	0400      	lsls	r0, r0, #16
     936:	6058      	str	r0, [r3, #4]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     938:	2020      	movs	r0, #32
     93a:	780b      	ldrb	r3, [r1, #0]
     93c:	4033      	ands	r3, r6
     93e:	4303      	orrs	r3, r0
     940:	700b      	strb	r3, [r1, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     942:	7813      	ldrb	r3, [r2, #0]
     944:	0028      	movs	r0, r5
     946:	4323      	orrs	r3, r4
     948:	7013      	strb	r3, [r2, #0]
     94a:	2103      	movs	r1, #3
     94c:	2204      	movs	r2, #4
     94e:	47b8      	blx	r7
    sercomSpiMasterInit(SPI2, 1, 3, 0, 0, 0x00);
     950:	2300      	movs	r3, #0
     952:	4e24      	ldr	r6, [pc, #144]	; (9e4 <init+0x3fc>)
     954:	9301      	str	r3, [sp, #4]
     956:	9300      	str	r3, [sp, #0]
     958:	0021      	movs	r1, r4
     95a:	0028      	movs	r0, r5
     95c:	2203      	movs	r2, #3
     95e:	47b0      	blx	r6


    sercomClockEnable(SPI0, 3, 4);
     960:	2204      	movs	r2, #4
     962:	2103      	movs	r1, #3
     964:	2000      	movs	r0, #0
     966:	47b8      	blx	r7
    sercomSpiMasterInit(SPI0, 3, 0, 0, 0, 0x00);
     968:	2300      	movs	r3, #0
     96a:	2103      	movs	r1, #3
     96c:	9301      	str	r3, [sp, #4]
     96e:	9300      	str	r3, [sp, #0]
     970:	001a      	movs	r2, r3
     972:	0018      	movs	r0, r3
     974:	47b0      	blx	r6


    sercomClockEnable(SPI1, 3, 4);
     976:	0020      	movs	r0, r4
     978:	2204      	movs	r2, #4
     97a:	2103      	movs	r1, #3
     97c:	47b8      	blx	r7
    sercomSpiMasterInit(SPI1, 3, 0, 0, 0, 0x00);
     97e:	2300      	movs	r3, #0
     980:	0020      	movs	r0, r4
     982:	9301      	str	r3, [sp, #4]
     984:	9300      	str	r3, [sp, #0]
     986:	001a      	movs	r2, r3
     988:	2103      	movs	r1, #3
     98a:	47b0      	blx	r6


    sercomClockEnable(USART3, 4, 8);
     98c:	2208      	movs	r2, #8
     98e:	2104      	movs	r1, #4
     990:	2003      	movs	r0, #3
     992:	47b8      	blx	r7
    sercomUartInit(USART3,1,0,19200);
     994:	2396      	movs	r3, #150	; 0x96
     996:	0021      	movs	r1, r4
     998:	2200      	movs	r2, #0
     99a:	2003      	movs	r0, #3
     99c:	01db      	lsls	r3, r3, #7
     99e:	4c12      	ldr	r4, [pc, #72]	; (9e8 <init+0x400>)
     9a0:	47a0      	blx	r4


    TC4Init();
     9a2:	4b12      	ldr	r3, [pc, #72]	; (9ec <init+0x404>)
     9a4:	4798      	blx	r3
    TC5Init();
     9a6:	4b12      	ldr	r3, [pc, #72]	; (9f0 <init+0x408>)
     9a8:	4798      	blx	r3
}
     9aa:	b005      	add	sp, #20
     9ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
     9ae:	46c0      	nop			; (mov r8, r8)
     9b0:	41004000 	.word	0x41004000
     9b4:	40000400 	.word	0x40000400
     9b8:	000001d5 	.word	0x000001d5
     9bc:	00000d21 	.word	0x00000d21
     9c0:	00000da9 	.word	0x00000da9
     9c4:	00000ea9 	.word	0x00000ea9
     9c8:	00000b85 	.word	0x00000b85
     9cc:	e000e100 	.word	0xe000e100
     9d0:	ff00ffff 	.word	0xff00ffff
     9d4:	41004400 	.word	0x41004400
     9d8:	41004488 	.word	0x41004488
     9dc:	20000658 	.word	0x20000658
     9e0:	000025a9 	.word	0x000025a9
     9e4:	0000260d 	.word	0x0000260d
     9e8:	00002671 	.word	0x00002671
     9ec:	00000f79 	.word	0x00000f79
     9f0:	00000fe1 	.word	0x00000fe1

000009f4 <main>:




int main(void) {
     9f4:	b510      	push	{r4, lr}

    init();
     9f6:	4b0e      	ldr	r3, [pc, #56]	; (a30 <main+0x3c>)
     9f8:	4798      	blx	r3

    initMS5803Barometer();
     9fa:	4b0e      	ldr	r3, [pc, #56]	; (a34 <main+0x40>)
     9fc:	4798      	blx	r3
    IMUinit();
     9fe:	4b0e      	ldr	r3, [pc, #56]	; (a38 <main+0x44>)
     a00:	4798      	blx	r3

    computeKalmanGains();
     a02:	4b0e      	ldr	r3, [pc, #56]	; (a3c <main+0x48>)
     a04:	4798      	blx	r3


    sampleTick();
     a06:	4c0e      	ldr	r4, [pc, #56]	; (a40 <main+0x4c>)
     a08:	47a0      	blx	r4

    beep(400);
     a0a:	20c8      	movs	r0, #200	; 0xc8
     a0c:	4b0d      	ldr	r3, [pc, #52]	; (a44 <main+0x50>)
     a0e:	0040      	lsls	r0, r0, #1
     a10:	4798      	blx	r3


    startupTick = millis();
     a12:	4b0d      	ldr	r3, [pc, #52]	; (a48 <main+0x54>)
     a14:	4798      	blx	r3
     a16:	4b0d      	ldr	r3, [pc, #52]	; (a4c <main+0x58>)
     a18:	6018      	str	r0, [r3, #0]

    while (1) {



        if (takeSample()) {
     a1a:	4b0d      	ldr	r3, [pc, #52]	; (a50 <main+0x5c>)
     a1c:	4798      	blx	r3
     a1e:	2800      	cmp	r0, #0
     a20:	d0fb      	beq.n	a1a <main+0x26>
            sampleTick();
     a22:	47a0      	blx	r4
            flight();
     a24:	4b0b      	ldr	r3, [pc, #44]	; (a54 <main+0x60>)
     a26:	4798      	blx	r3
            computeKalmanStates();
     a28:	4b0b      	ldr	r3, [pc, #44]	; (a58 <main+0x64>)
     a2a:	4798      	blx	r3
     a2c:	e7f5      	b.n	a1a <main+0x26>
     a2e:	46c0      	nop			; (mov r8, r8)
     a30:	000005e9 	.word	0x000005e9
     a34:	000005b9 	.word	0x000005b9
     a38:	00000a5d 	.word	0x00000a5d
     a3c:	0000132d 	.word	0x0000132d
     a40:	00002275 	.word	0x00002275
     a44:	00000c69 	.word	0x00000c69
     a48:	00000f45 	.word	0x00000f45
     a4c:	20000504 	.word	0x20000504
     a50:	0000225d 	.word	0x0000225d
     a54:	00001049 	.word	0x00001049
     a58:	00001bcd 	.word	0x00001bcd

00000a5c <IMUinit>:
#include <util.h>
#include <boardDefines.h>


void IMUinit() {
     a5c:	b570      	push	{r4, r5, r6, lr}
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     a5e:	4c08      	ldr	r4, [pc, #32]	; (a80 <IMUinit+0x24>)
     a60:	2580      	movs	r5, #128	; 0x80
     a62:	0023      	movs	r3, r4
     a64:	00ed      	lsls	r5, r5, #3
     a66:	3394      	adds	r3, #148	; 0x94
     a68:	601d      	str	r5, [r3, #0]

    uint8_t dummy_Tx = 0xFF;
    uint8_t dummy_rx;

    pinLow(cs_accel);
    dummy_rx = spiDataTransfer(SPI0, BMI_ACCEL_PMU_RANGE);
     a6a:	4e06      	ldr	r6, [pc, #24]	; (a84 <IMUinit+0x28>)
     a6c:	210f      	movs	r1, #15
     a6e:	2000      	movs	r0, #0
     a70:	47b0      	blx	r6
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     a72:	3498      	adds	r4, #152	; 0x98
    dummy_rx = spiDataTransfer(SPI0, BMI_ACCEL_16G_RANGE);
     a74:	210c      	movs	r1, #12
     a76:	2000      	movs	r0, #0
     a78:	47b0      	blx	r6
     a7a:	6025      	str	r5, [r4, #0]
    pinHigh(cs_accel);

}
     a7c:	bd70      	pop	{r4, r5, r6, pc}
     a7e:	46c0      	nop			; (mov r8, r8)
     a80:	41004400 	.word	0x41004400
     a84:	000026b9 	.word	0x000026b9

00000a88 <USARTconnectionAvaliable>:

bool USARTconnectionAvaliable() {
     a88:	b510      	push	{r4, lr}

    if (sercom(USART3)->SPI.INTFLAG.bit.RXC == 1) {
     a8a:	4b09      	ldr	r3, [pc, #36]	; (ab0 <USARTconnectionAvaliable+0x28>)
     a8c:	7e1c      	ldrb	r4, [r3, #24]
     a8e:	0764      	lsls	r4, r4, #29
     a90:	0fe4      	lsrs	r4, r4, #31
     a92:	2c01      	cmp	r4, #1
     a94:	d001      	beq.n	a9a <USARTconnectionAvaliable+0x12>
            return true;
        } else {
            return false;
        }
    }
    return false;
     a96:	2000      	movs	r0, #0
     a98:	e009      	b.n	aae <USARTconnectionAvaliable+0x26>
}

bool USARTconnectionAvaliable() {

    if (sercom(USART3)->SPI.INTFLAG.bit.RXC == 1) {
        u8_t connectAttempt = usartDataIn(USART3);
     a9a:	2003      	movs	r0, #3
     a9c:	4b05      	ldr	r3, [pc, #20]	; (ab4 <USARTconnectionAvaliable+0x2c>)
     a9e:	4798      	blx	r3
     aa0:	1e01      	subs	r1, r0, #0
        if (connectAttempt == 0x48) {
     aa2:	2948      	cmp	r1, #72	; 0x48
     aa4:	d1f7      	bne.n	a96 <USARTconnectionAvaliable+0xe>
            usartDataOut(USART3, 'H');
     aa6:	2003      	movs	r0, #3
     aa8:	4b03      	ldr	r3, [pc, #12]	; (ab8 <USARTconnectionAvaliable+0x30>)
     aaa:	4798      	blx	r3
            return true;
     aac:	0020      	movs	r0, r4
        } else {
            return false;
        }
    }
    return false;
}
     aae:	bd10      	pop	{r4, pc}
     ab0:	42001400 	.word	0x42001400
     ab4:	000026e9 	.word	0x000026e9
     ab8:	000026d1 	.word	0x000026d1

00000abc <sendTheasePagesToComputer>:

void sendTheasePagesToComputer(u32_t firstPage, u32_t lastPage) {
     abc:	b5f0      	push	{r4, r5, r6, r7, lr}
    for (u16_t page = 0; page <= pagesToSend; ++page) {

        u8_t data[256];
        AT25SEreadPage(pageToReadAddress , data);

        for (u16_t dataByte = 0; dataByte < 256; ++dataByte) {
     abe:	2780      	movs	r7, #128	; 0x80
        }
    }
    return false;
}

void sendTheasePagesToComputer(u32_t firstPage, u32_t lastPage) {
     ac0:	0005      	movs	r5, r0

    u16_t pagesToSend = (lastPage - firstPage) >> 8;

    u32_t pageToReadAddress = firstPage;

    for (u16_t page = 0; page <= pagesToSend; ++page) {
     ac2:	2400      	movs	r4, #0
    return false;
}

void sendTheasePagesToComputer(u32_t firstPage, u32_t lastPage) {

    u16_t pagesToSend = (lastPage - firstPage) >> 8;
     ac4:	1a09      	subs	r1, r1, r0
     ac6:	0a09      	lsrs	r1, r1, #8
        }
    }
    return false;
}

void sendTheasePagesToComputer(u32_t firstPage, u32_t lastPage) {
     ac8:	b0c3      	sub	sp, #268	; 0x10c

    u16_t pagesToSend = (lastPage - firstPage) >> 8;
     aca:	b28b      	uxth	r3, r1
     acc:	9301      	str	r3, [sp, #4]
    for (u16_t page = 0; page <= pagesToSend; ++page) {

        u8_t data[256];
        AT25SEreadPage(pageToReadAddress , data);

        for (u16_t dataByte = 0; dataByte < 256; ++dataByte) {
     ace:	007f      	lsls	r7, r7, #1
    u32_t pageToReadAddress = firstPage;

    for (u16_t page = 0; page <= pagesToSend; ++page) {

        u8_t data[256];
        AT25SEreadPage(pageToReadAddress , data);
     ad0:	a902      	add	r1, sp, #8
     ad2:	0028      	movs	r0, r5
     ad4:	4b09      	ldr	r3, [pc, #36]	; (afc <sendTheasePagesToComputer+0x40>)
     ad6:	4798      	blx	r3
     ad8:	2600      	movs	r6, #0

        for (u16_t dataByte = 0; dataByte < 256; ++dataByte) {
            usartDataOut(USART3, data[dataByte]);
     ada:	ab02      	add	r3, sp, #8
     adc:	5d99      	ldrb	r1, [r3, r6]
     ade:	2003      	movs	r0, #3
     ae0:	4b07      	ldr	r3, [pc, #28]	; (b00 <sendTheasePagesToComputer+0x44>)
     ae2:	3601      	adds	r6, #1
     ae4:	4798      	blx	r3
    for (u16_t page = 0; page <= pagesToSend; ++page) {

        u8_t data[256];
        AT25SEreadPage(pageToReadAddress , data);

        for (u16_t dataByte = 0; dataByte < 256; ++dataByte) {
     ae6:	42be      	cmp	r6, r7
     ae8:	d1f7      	bne.n	ada <sendTheasePagesToComputer+0x1e>

    u16_t pagesToSend = (lastPage - firstPage) >> 8;

    u32_t pageToReadAddress = firstPage;

    for (u16_t page = 0; page <= pagesToSend; ++page) {
     aea:	3401      	adds	r4, #1
     aec:	9b01      	ldr	r3, [sp, #4]

        for (u16_t dataByte = 0; dataByte < 256; ++dataByte) {
            usartDataOut(USART3, data[dataByte]);
        }

        pageToReadAddress = pageToReadAddress + 0x100;
     aee:	3501      	adds	r5, #1

    u16_t pagesToSend = (lastPage - firstPage) >> 8;

    u32_t pageToReadAddress = firstPage;

    for (u16_t page = 0; page <= pagesToSend; ++page) {
     af0:	b2a4      	uxth	r4, r4

        for (u16_t dataByte = 0; dataByte < 256; ++dataByte) {
            usartDataOut(USART3, data[dataByte]);
        }

        pageToReadAddress = pageToReadAddress + 0x100;
     af2:	35ff      	adds	r5, #255	; 0xff

    u16_t pagesToSend = (lastPage - firstPage) >> 8;

    u32_t pageToReadAddress = firstPage;

    for (u16_t page = 0; page <= pagesToSend; ++page) {
     af4:	42a3      	cmp	r3, r4
     af6:	d2eb      	bcs.n	ad0 <sendTheasePagesToComputer+0x14>
            usartDataOut(USART3, data[dataByte]);
        }

        pageToReadAddress = pageToReadAddress + 0x100;
    }
}
     af8:	b043      	add	sp, #268	; 0x10c
     afa:	bdf0      	pop	{r4, r5, r6, r7, pc}
     afc:	000003b1 	.word	0x000003b1
     b00:	000026d1 	.word	0x000026d1

00000b04 <altitudeAGL>:

int32_t altitudeAGL() {
    return altitude - offsets.groundOffset;
     b04:	4b07      	ldr	r3, [pc, #28]	; (b24 <altitudeAGL+0x20>)

        pageToReadAddress = pageToReadAddress + 0x100;
    }
}

int32_t altitudeAGL() {
     b06:	b510      	push	{r4, lr}
    return altitude - offsets.groundOffset;
     b08:	6998      	ldr	r0, [r3, #24]
     b0a:	4b07      	ldr	r3, [pc, #28]	; (b28 <altitudeAGL+0x24>)
     b0c:	4798      	blx	r3
     b0e:	000b      	movs	r3, r1
     b10:	4906      	ldr	r1, [pc, #24]	; (b2c <altitudeAGL+0x28>)
     b12:	0002      	movs	r2, r0
     b14:	6808      	ldr	r0, [r1, #0]
     b16:	6849      	ldr	r1, [r1, #4]
     b18:	4c05      	ldr	r4, [pc, #20]	; (b30 <altitudeAGL+0x2c>)
     b1a:	47a0      	blx	r4
     b1c:	4b05      	ldr	r3, [pc, #20]	; (b34 <altitudeAGL+0x30>)
     b1e:	4798      	blx	r3
}
     b20:	bd10      	pop	{r4, pc}
     b22:	46c0      	nop			; (mov r8, r8)
     b24:	200004d0 	.word	0x200004d0
     b28:	00005ea5 	.word	0x00005ea5
     b2c:	20000670 	.word	0x20000670
     b30:	000056cd 	.word	0x000056cd
     b34:	00005db5 	.word	0x00005db5

00000b38 <unplugged>:


bool unplugged() {
    if (sample.voltage.batFloat < 3.5) {
     b38:	4b05      	ldr	r3, [pc, #20]	; (b50 <unplugged+0x18>)
int32_t altitudeAGL() {
    return altitude - offsets.groundOffset;
}


bool unplugged() {
     b3a:	b510      	push	{r4, lr}
    if (sample.voltage.batFloat < 3.5) {
     b3c:	68d8      	ldr	r0, [r3, #12]
     b3e:	4905      	ldr	r1, [pc, #20]	; (b54 <unplugged+0x1c>)
     b40:	4b05      	ldr	r3, [pc, #20]	; (b58 <unplugged+0x20>)
     b42:	2401      	movs	r4, #1
     b44:	4798      	blx	r3
     b46:	2800      	cmp	r0, #0
     b48:	d100      	bne.n	b4c <unplugged+0x14>
     b4a:	1c04      	adds	r4, r0, #0
     b4c:	b2e0      	uxtb	r0, r4
        return true;
    } else {
        return false;
    }
}
     b4e:	bd10      	pop	{r4, pc}
     b50:	200007a0 	.word	0x200007a0
     b54:	40600000 	.word	0x40600000
     b58:	00003abd 	.word	0x00003abd

00000b5c <finishFlight>:

void finishFlight() {
	
    flightState = flightIdle;
     b5c:	2201      	movs	r2, #1
    } else {
        return false;
    }
}

void finishFlight() {
     b5e:	b510      	push	{r4, lr}
	
    flightState = flightIdle;
     b60:	4b04      	ldr	r3, [pc, #16]	; (b74 <finishFlight+0x18>)
     b62:	701a      	strb	r2, [r3, #0]
    AT25SFHoldTillReady();
     b64:	4b04      	ldr	r3, [pc, #16]	; (b78 <finishFlight+0x1c>)
     b66:	4798      	blx	r3
    writeFlightEndAddress( );
     b68:	4b04      	ldr	r3, [pc, #16]	; (b7c <finishFlight+0x20>)
     b6a:	4798      	blx	r3
    unpluggedJingle();
     b6c:	4b04      	ldr	r3, [pc, #16]	; (b80 <finishFlight+0x24>)
     b6e:	4798      	blx	r3
     b70:	bd10      	pop	{r4, pc}
     b72:	46c0      	nop			; (mov r8, r8)
     b74:	2000065c 	.word	0x2000065c
     b78:	000001e5 	.word	0x000001e5
     b7c:	0000216d 	.word	0x0000216d
     b80:	00000cdd 	.word	0x00000cdd

00000b84 <adcInit>:
#include <util.h>

void adcInit() {

    // set up clock
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;
     b84:	2180      	movs	r1, #128	; 0x80


#include <util.h>

void adcInit() {
     b86:	b510      	push	{r4, lr}

    // set up clock
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;
     b88:	4a10      	ldr	r2, [pc, #64]	; (bcc <adcInit+0x48>)
     b8a:	0249      	lsls	r1, r1, #9
     b8c:	6a13      	ldr	r3, [r2, #32]
    // divide prescaler by 512 (93.75KHz), max adc freq is 2.1MHz
    ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |
                     ADC_CTRLB_RESSEL_12BIT;

    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
     b8e:	4810      	ldr	r0, [pc, #64]	; (bd0 <adcInit+0x4c>)
#include <util.h>

void adcInit() {

    // set up clock
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;
     b90:	430b      	orrs	r3, r1
     b92:	6213      	str	r3, [r2, #32]

    // divide prescaler by 512 (93.75KHz), max adc freq is 2.1MHz
    ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |
     b94:	23e0      	movs	r3, #224	; 0xe0
     b96:	490f      	ldr	r1, [pc, #60]	; (bd4 <adcInit+0x50>)
                     ADC_CTRLB_RESSEL_12BIT;

    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
     b98:	4a0f      	ldr	r2, [pc, #60]	; (bd8 <adcInit+0x54>)

    // set up clock
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;

    // divide prescaler by 512 (93.75KHz), max adc freq is 2.1MHz
    ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |
     b9a:	00db      	lsls	r3, r3, #3
     b9c:	808b      	strh	r3, [r1, #4]
                     ADC_CTRLB_RESSEL_12BIT;

    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
     b9e:	8050      	strh	r0, [r2, #2]
                        GCLK_CLKCTRL_GEN(0) |
                        GCLK_CLKCTRL_ID(ADC_GCLK_ID);

    ADC->CALIB.reg =
        ADC_CALIB_BIAS_CAL(
     ba0:	4a0e      	ldr	r2, [pc, #56]	; (bdc <adcInit+0x58>)
    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(0) |
                        GCLK_CLKCTRL_ID(ADC_GCLK_ID);

    ADC->CALIB.reg =
     ba2:	6812      	ldr	r2, [r2, #0]
     ba4:	0150      	lsls	r0, r2, #5
     ba6:	4018      	ands	r0, r3
     ba8:	4b0d      	ldr	r3, [pc, #52]	; (be0 <adcInit+0x5c>)
     baa:	0154      	lsls	r4, r2, #5
     bac:	681a      	ldr	r2, [r3, #0]
     bae:	0ed3      	lsrs	r3, r2, #27
     bb0:	4323      	orrs	r3, r4
     bb2:	b2da      	uxtb	r2, r3
     bb4:	0003      	movs	r3, r0
     bb6:	4313      	orrs	r3, r2
     bb8:	850b      	strh	r3, [r1, #40]	; 0x28
        ) |
        ADC_CALIB_LINEARITY_CAL(
            (*(uint64_t *)ADC_FUSES_LINEARITY_0_ADDR >> ADC_FUSES_LINEARITY_0_Pos)
        );

    ADC->REFCTRL.reg = ADC_REFCTRL_REFSEL_INTVCC1;
     bba:	2302      	movs	r3, #2
     bbc:	704b      	strb	r3, [r1, #1]

    ADC->CTRLA.reg = ADC_CTRLA_ENABLE; // enable
     bbe:	700b      	strb	r3, [r1, #0]
    while(ADC->STATUS.reg & ADC_STATUS_SYNCBUSY);
     bc0:	7e4b      	ldrb	r3, [r1, #25]
     bc2:	b25b      	sxtb	r3, r3
     bc4:	2b00      	cmp	r3, #0
     bc6:	dbfb      	blt.n	bc0 <adcInit+0x3c>
}
     bc8:	bd10      	pop	{r4, pc}
     bca:	46c0      	nop			; (mov r8, r8)
     bcc:	40000400 	.word	0x40000400
     bd0:	0000401e 	.word	0x0000401e
     bd4:	42004000 	.word	0x42004000
     bd8:	40000c00 	.word	0x40000c00
     bdc:	00806024 	.word	0x00806024
     be0:	00806020 	.word	0x00806020

00000be4 <adcSample>:



u16_t adcSample() {
    ADC->SWTRIG.reg = ADC_SWTRIG_START;
     be4:	2202      	movs	r2, #2
     be6:	4b05      	ldr	r3, [pc, #20]	; (bfc <adcSample+0x18>)
     be8:	731a      	strb	r2, [r3, #12]
    while(!(ADC->INTFLAG.reg & ADC_INTFLAG_RESRDY)); // wait until result is ready
     bea:	3a01      	subs	r2, #1
     bec:	7e19      	ldrb	r1, [r3, #24]
     bee:	4211      	tst	r1, r2
     bf0:	d0fc      	beq.n	bec <adcSample+0x8>
    return ADC->RESULT.reg;
     bf2:	4b02      	ldr	r3, [pc, #8]	; (bfc <adcSample+0x18>)
     bf4:	8b58      	ldrh	r0, [r3, #26]
     bf6:	b280      	uxth	r0, r0
}
     bf8:	4770      	bx	lr
     bfa:	46c0      	nop			; (mov r8, r8)
     bfc:	42004000 	.word	0x42004000

00000c00 <adc_read>:


u16_t adc_read(Pin p) {
     c00:	b537      	push	{r0, r1, r2, r4, r5, lr}
    u16_t buad;

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
     c02:	2501      	movs	r5, #1
     c04:	0c02      	lsrs	r2, r0, #16
     c06:	b2d4      	uxtb	r4, r2
     c08:	9000      	str	r0, [sp, #0]
     c0a:	0e00      	lsrs	r0, r0, #24
     c0c:	9101      	str	r1, [sp, #4]
     c0e:	0842      	lsrs	r2, r0, #1
     c10:	01e3      	lsls	r3, r4, #7
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     c12:	4911      	ldr	r1, [pc, #68]	; (c58 <adc_read+0x58>)
     c14:	18d2      	adds	r2, r2, r3
     c16:	1852      	adds	r2, r2, r1
    u16_t buad;

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
     c18:	4228      	tst	r0, r5
     c1a:	d005      	beq.n	c28 <adc_read+0x28>
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     c1c:	210f      	movs	r1, #15
     c1e:	7814      	ldrb	r4, [r2, #0]
     c20:	4021      	ands	r1, r4
     c22:	2410      	movs	r4, #16
     c24:	4321      	orrs	r1, r4
     c26:	e003      	b.n	c30 <adc_read+0x30>
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     c28:	240f      	movs	r4, #15
     c2a:	7811      	ldrb	r1, [r2, #0]
     c2c:	43a1      	bics	r1, r4
     c2e:	4329      	orrs	r1, r5
     c30:	7011      	strb	r1, [r2, #0]
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     c32:	2101      	movs	r1, #1
     c34:	4a09      	ldr	r2, [pc, #36]	; (c5c <adc_read+0x5c>)
     c36:	18c3      	adds	r3, r0, r3
     c38:	189b      	adds	r3, r3, r2
     c3a:	781a      	ldrb	r2, [r3, #0]
     c3c:	430a      	orrs	r2, r1
     c3e:	701a      	strb	r2, [r3, #0]
    // switch pin mux to analog in
    pinAnalog(p);

    ADC->INPUTCTRL.reg = (ADC_INPUTCTRL_MUXPOS(p.chan) // select from proper pin
                          | ADC_INPUTCTRL_MUXNEG_GND // 0 = gnd
                          | ADC_INPUTCTRL_GAIN_1X);
     c40:	466b      	mov	r3, sp
     c42:	791a      	ldrb	r2, [r3, #4]
     c44:	231f      	movs	r3, #31
     c46:	4013      	ands	r3, r2
     c48:	22c0      	movs	r2, #192	; 0xc0
     c4a:	0152      	lsls	r2, r2, #5
     c4c:	4313      	orrs	r3, r2

u16_t adc_read(Pin p) {
    // switch pin mux to analog in
    pinAnalog(p);

    ADC->INPUTCTRL.reg = (ADC_INPUTCTRL_MUXPOS(p.chan) // select from proper pin
     c4e:	4a04      	ldr	r2, [pc, #16]	; (c60 <adc_read+0x60>)
     c50:	6113      	str	r3, [r2, #16]
                          | ADC_INPUTCTRL_MUXNEG_GND // 0 = gnd
                          | ADC_INPUTCTRL_GAIN_1X);

    return adcSample();
     c52:	4b04      	ldr	r3, [pc, #16]	; (c64 <adc_read+0x64>)
     c54:	4798      	blx	r3
     c56:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
     c58:	41004430 	.word	0x41004430
     c5c:	41004440 	.word	0x41004440
     c60:	42004000 	.word	0x42004000
     c64:	00000be5 	.word	0x00000be5

00000c68 <beep>:
#include <util.h>
#include <boardDefines.h>


void beep(u16_t toggles) {
     c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
}


inline static void pinToggle(Pin p) {
    PORT->Group[p.group].OUTTGL.reg = (1<<p.pin);
     c6a:	2380      	movs	r3, #128	; 0x80
     c6c:	2780      	movs	r7, #128	; 0x80
     c6e:	0006      	movs	r6, r0

    pinToggle(LedPin);
    for (u16_t buzz = 0; buzz < toggles; ++buzz) {
     c70:	2500      	movs	r5, #0
     c72:	4c0a      	ldr	r4, [pc, #40]	; (c9c <beep+0x34>)
     c74:	035b      	lsls	r3, r3, #13
     c76:	61e3      	str	r3, [r4, #28]
     c78:	03bf      	lsls	r7, r7, #14
     c7a:	42b5      	cmp	r5, r6
     c7c:	d006      	beq.n	c8c <beep+0x24>
     c7e:	61e7      	str	r7, [r4, #28]
        pinToggle(buzzerPin);
        delay_us(122);
     c80:	207a      	movs	r0, #122	; 0x7a
     c82:	4b07      	ldr	r3, [pc, #28]	; (ca0 <beep+0x38>)


void beep(u16_t toggles) {

    pinToggle(LedPin);
    for (u16_t buzz = 0; buzz < toggles; ++buzz) {
     c84:	3501      	adds	r5, #1
        pinToggle(buzzerPin);
        delay_us(122);
     c86:	4798      	blx	r3


void beep(u16_t toggles) {

    pinToggle(LedPin);
    for (u16_t buzz = 0; buzz < toggles; ++buzz) {
     c88:	b2ad      	uxth	r5, r5
     c8a:	e7f6      	b.n	c7a <beep+0x12>
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     c8c:	2380      	movs	r3, #128	; 0x80
     c8e:	039b      	lsls	r3, r3, #14
     c90:	6163      	str	r3, [r4, #20]
}


inline static void pinToggle(Pin p) {
    PORT->Group[p.group].OUTTGL.reg = (1<<p.pin);
     c92:	2380      	movs	r3, #128	; 0x80
     c94:	035b      	lsls	r3, r3, #13
     c96:	61e3      	str	r3, [r4, #28]
        pinToggle(buzzerPin);
        delay_us(122);
    }
    pinLow(buzzerPin);
    pinToggle(LedPin);
}
     c98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     c9a:	46c0      	nop			; (mov r8, r8)
     c9c:	41004400 	.word	0x41004400
     ca0:	00000ec9 	.word	0x00000ec9

00000ca4 <startupJingle>:

void startupJingle(){
     ca4:	b570      	push	{r4, r5, r6, lr}
    beep(300);
     ca6:	2696      	movs	r6, #150	; 0x96
     ca8:	0076      	lsls	r6, r6, #1
     caa:	4d0a      	ldr	r5, [pc, #40]	; (cd4 <startupJingle+0x30>)
     cac:	0030      	movs	r0, r6
     cae:	47a8      	blx	r5
    delay_ms(80);
     cb0:	4c09      	ldr	r4, [pc, #36]	; (cd8 <startupJingle+0x34>)
     cb2:	2050      	movs	r0, #80	; 0x50
     cb4:	47a0      	blx	r4
    beep(300);
     cb6:	0030      	movs	r0, r6
     cb8:	47a8      	blx	r5
    delay_ms(250);
     cba:	20fa      	movs	r0, #250	; 0xfa
     cbc:	47a0      	blx	r4
    beep(300);
     cbe:	0030      	movs	r0, r6
     cc0:	47a8      	blx	r5
    delay_ms(80);
     cc2:	2050      	movs	r0, #80	; 0x50
     cc4:	47a0      	blx	r4
    beep(300);
     cc6:	0030      	movs	r0, r6
     cc8:	47a8      	blx	r5
    delay_ms(500);
     cca:	20fa      	movs	r0, #250	; 0xfa
     ccc:	0040      	lsls	r0, r0, #1
     cce:	47a0      	blx	r4
}
     cd0:	bd70      	pop	{r4, r5, r6, pc}
     cd2:	46c0      	nop			; (mov r8, r8)
     cd4:	00000c69 	.word	0x00000c69
     cd8:	00000ef9 	.word	0x00000ef9

00000cdc <unpluggedJingle>:

void unpluggedJingle(){
     cdc:	b570      	push	{r4, r5, r6, lr}
            delay_ms(80);
            beep(300);
     cde:	2696      	movs	r6, #150	; 0x96
    beep(300);
    delay_ms(500);
}

void unpluggedJingle(){
            delay_ms(80);
     ce0:	4c0c      	ldr	r4, [pc, #48]	; (d14 <unpluggedJingle+0x38>)
            beep(300);
     ce2:	0076      	lsls	r6, r6, #1
    beep(300);
    delay_ms(500);
}

void unpluggedJingle(){
            delay_ms(80);
     ce4:	2050      	movs	r0, #80	; 0x50
     ce6:	47a0      	blx	r4
            beep(300);
     ce8:	4d0b      	ldr	r5, [pc, #44]	; (d18 <unpluggedJingle+0x3c>)
     cea:	0030      	movs	r0, r6
     cec:	47a8      	blx	r5
            delay_ms(80);
     cee:	2050      	movs	r0, #80	; 0x50
     cf0:	47a0      	blx	r4
            beep(300);
     cf2:	0030      	movs	r0, r6
     cf4:	47a8      	blx	r5
            delay_ms(80);
     cf6:	2050      	movs	r0, #80	; 0x50
     cf8:	47a0      	blx	r4
            beep(300);
     cfa:	0030      	movs	r0, r6
     cfc:	47a8      	blx	r5
            delay_ms(80);
     cfe:	2050      	movs	r0, #80	; 0x50
     d00:	47a0      	blx	r4
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     d02:	2280      	movs	r2, #128	; 0x80
     d04:	4b05      	ldr	r3, [pc, #20]	; (d1c <unpluggedJingle+0x40>)
     d06:	0392      	lsls	r2, r2, #14
     d08:	615a      	str	r2, [r3, #20]
     d0a:	2280      	movs	r2, #128	; 0x80
     d0c:	0352      	lsls	r2, r2, #13
     d0e:	615a      	str	r2, [r3, #20]
            pinLow(buzzerPin);
            pinLow(LedPin);

}
     d10:	bd70      	pop	{r4, r5, r6, pc}
     d12:	46c0      	nop			; (mov r8, r8)
     d14:	00000ef9 	.word	0x00000ef9
     d18:	00000c69 	.word	0x00000c69
     d1c:	41004400 	.word	0x41004400

00000d20 <GclkInit>:
static uint32_t cycles_per_us = 48000000UL / 1000000;

void GclkInit() {


    SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     d20:	23c2      	movs	r3, #194	; 0xc2
                           SYSCTRL_INTFLAG_DFLLRDY;
    NVMCTRL->CTRLB.reg |= NVMCTRL_CTRLB_RWS_HALF;
     d22:	2002      	movs	r0, #2


static uint32_t cycles_per_ms = 48000000UL / 1000;
static uint32_t cycles_per_us = 48000000UL / 1000000;

void GclkInit() {
     d24:	b510      	push	{r4, lr}


    SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     d26:	4916      	ldr	r1, [pc, #88]	; (d80 <GclkInit+0x60>)
                           SYSCTRL_INTFLAG_DFLLRDY;
    NVMCTRL->CTRLB.reg |= NVMCTRL_CTRLB_RWS_HALF;
     d28:	4a16      	ldr	r2, [pc, #88]	; (d84 <GclkInit+0x64>)
static uint32_t cycles_per_us = 48000000UL / 1000000;

void GclkInit() {


    SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     d2a:	00db      	lsls	r3, r3, #3
     d2c:	608b      	str	r3, [r1, #8]
                           SYSCTRL_INTFLAG_DFLLRDY;
    NVMCTRL->CTRLB.reg |= NVMCTRL_CTRLB_RWS_HALF;
     d2e:	6853      	ldr	r3, [r2, #4]
     d30:	4303      	orrs	r3, r0
     d32:	6053      	str	r3, [r2, #4]

#define NVM_DFLL_COARSE_POS    58
#define NVM_DFLL_COARSE_SIZE   6
#define NVM_DFLL_FINE_POS      64
#define NVM_DFLL_FINE_SIZE     10
    uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
     d34:	4b14      	ldr	r3, [pc, #80]	; (d88 <GclkInit+0x68>)
     d36:	681a      	ldr	r2, [r3, #0]
     d38:	0e92      	lsrs	r2, r2, #26
                         + (NVM_DFLL_COARSE_POS / 32))
                       >> (NVM_DFLL_COARSE_POS % 32))
                     & ((1 << NVM_DFLL_COARSE_SIZE) - 1);
    if (coarse == 0x3f) {
     d3a:	2a3f      	cmp	r2, #63	; 0x3f
     d3c:	d100      	bne.n	d40 <GclkInit+0x20>
        coarse = 0x1f;
     d3e:	3a20      	subs	r2, #32
    }
    uint32_t fine =( *((uint32_t *)(NVMCTRL_OTP4)
                       + (NVM_DFLL_FINE_POS / 32))
                     >> (NVM_DFLL_FINE_POS % 32))
     d40:	4b12      	ldr	r3, [pc, #72]	; (d8c <GclkInit+0x6c>)
                   & ((1 << NVM_DFLL_FINE_SIZE) - 1);
    if (fine == 0x3ff) {
     d42:	4813      	ldr	r0, [pc, #76]	; (d90 <GclkInit+0x70>)
                       >> (NVM_DFLL_COARSE_POS % 32))
                     & ((1 << NVM_DFLL_COARSE_SIZE) - 1);
    if (coarse == 0x3f) {
        coarse = 0x1f;
    }
    uint32_t fine =( *((uint32_t *)(NVMCTRL_OTP4)
     d44:	681b      	ldr	r3, [r3, #0]
     d46:	059b      	lsls	r3, r3, #22
     d48:	0d9b      	lsrs	r3, r3, #22
                       + (NVM_DFLL_FINE_POS / 32))
                     >> (NVM_DFLL_FINE_POS % 32))
                   & ((1 << NVM_DFLL_FINE_SIZE) - 1);
    if (fine == 0x3ff) {
     d4a:	4283      	cmp	r3, r0
     d4c:	d100      	bne.n	d50 <GclkInit+0x30>
        fine = 0x1ff;
     d4e:	4b11      	ldr	r3, [pc, #68]	; (d94 <GclkInit+0x74>)
    }


    // Disable ONDEMAND mode while writing configurations (errata 9905)
    SYSCTRL->DFLLCTRL.reg = dfll_ctrl_usb & ~SYSCTRL_DFLLCTRL_ONDEMAND;
     d50:	4811      	ldr	r0, [pc, #68]	; (d98 <GclkInit+0x78>)
     d52:	8488      	strh	r0, [r1, #36]	; 0x24
    while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_DFLLRDY)) == 0);
     d54:	2010      	movs	r0, #16
     d56:	68cc      	ldr	r4, [r1, #12]
     d58:	4204      	tst	r4, r0
     d5a:	d0fc      	beq.n	d56 <GclkInit+0x36>
    SYSCTRL->DFLLVAL.reg = SYSCTRL_DFLLVAL_COARSE(coarse) | SYSCTRL_DFLLVAL_FINE(fine);
     d5c:	0292      	lsls	r2, r2, #10
     d5e:	4313      	orrs	r3, r2
     d60:	4a07      	ldr	r2, [pc, #28]	; (d80 <GclkInit+0x60>)
     d62:	6293      	str	r3, [r2, #40]	; 0x28


    //Wait and see if the DFLL output is good . . .
    while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_DFLLRDY)) == 0);
     d64:	2310      	movs	r3, #16
     d66:	68ca      	ldr	r2, [r1, #12]
     d68:	421a      	tst	r2, r3
     d6a:	d0fc      	beq.n	d66 <GclkInit+0x46>


    SYSCTRL->DFLLCTRL.reg = dfll_ctrl_usb;
     d6c:	4a0b      	ldr	r2, [pc, #44]	; (d9c <GclkInit+0x7c>)
     d6e:	4b04      	ldr	r3, [pc, #16]	; (d80 <GclkInit+0x60>)
     d70:	849a      	strh	r2, [r3, #36]	; 0x24


    //For generic clock generator 0, select the DFLL48 Clock as input
    GCLK->GENDIV.reg  = (GCLK_GENDIV_DIV(1)  | GCLK_GENDIV_ID(0));
     d72:	2280      	movs	r2, #128	; 0x80
     d74:	4b0a      	ldr	r3, [pc, #40]	; (da0 <GclkInit+0x80>)
     d76:	0052      	lsls	r2, r2, #1
     d78:	609a      	str	r2, [r3, #8]
    GCLK->GENCTRL.reg = (GCLK_GENCTRL_ID(0)  | (GCLK_GENCTRL_SRC_DFLL48M) | (GCLK_GENCTRL_GENEN));
     d7a:	4a0a      	ldr	r2, [pc, #40]	; (da4 <GclkInit+0x84>)
     d7c:	605a      	str	r2, [r3, #4]
}
     d7e:	bd10      	pop	{r4, pc}
     d80:	40000800 	.word	0x40000800
     d84:	41004000 	.word	0x41004000
     d88:	00806024 	.word	0x00806024
     d8c:	00806028 	.word	0x00806028
     d90:	000003ff 	.word	0x000003ff
     d94:	000001ff 	.word	0x000001ff
     d98:	00000522 	.word	0x00000522
     d9c:	000005a2 	.word	0x000005a2
     da0:	40000c00 	.word	0x40000c00
     da4:	00010700 	.word	0x00010700

00000da8 <RtcInit>:
        //wait for crystal to warm up
        while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_OSC32KRDY)) == 0);

    */

    SYSCTRL->OSC32K.reg = SYSCTRL_OSC32K_ENABLE |
     da8:	4b27      	ldr	r3, [pc, #156]	; (e48 <RtcInit+0xa0>)
     daa:	4a28      	ldr	r2, [pc, #160]	; (e4c <RtcInit+0xa4>)
                          SYSCTRL_OSC32K_EN32K |
                          ( 6 << SYSCTRL_OSC32K_STARTUP_Pos);


    SYSCTRL->OSC32K.bit.CALIB =
     dac:	4828      	ldr	r0, [pc, #160]	; (e50 <RtcInit+0xa8>)
        //wait for crystal to warm up
        while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_OSC32KRDY)) == 0);

    */

    SYSCTRL->OSC32K.reg = SYSCTRL_OSC32K_ENABLE |
     dae:	619a      	str	r2, [r3, #24]
                          SYSCTRL_OSC32K_EN32K |
                          ( 6 << SYSCTRL_OSC32K_STARTUP_Pos);


    SYSCTRL->OSC32K.bit.CALIB =
        ((*(uint32_t *)FUSES_OSC32K_CAL_ADDR >>
     db0:	4a28      	ldr	r2, [pc, #160]	; (e54 <RtcInit+0xac>)
    SYSCTRL->OSC32K.reg = SYSCTRL_OSC32K_ENABLE |
                          SYSCTRL_OSC32K_EN32K |
                          ( 6 << SYSCTRL_OSC32K_STARTUP_Pos);


    SYSCTRL->OSC32K.bit.CALIB =
     db2:	6999      	ldr	r1, [r3, #24]
     db4:	6812      	ldr	r2, [r2, #0]
     db6:	4001      	ands	r1, r0
     db8:	04d2      	lsls	r2, r2, #19
     dba:	0e52      	lsrs	r2, r2, #25
     dbc:	0412      	lsls	r2, r2, #16
     dbe:	4311      	orrs	r1, r2
     dc0:	6199      	str	r1, [r3, #24]
        ((*(uint32_t *)FUSES_OSC32K_CAL_ADDR >>
          FUSES_OSC32K_CAL_Pos) & 0x7Ful);

    SYSCTRL->OSC32K.reg = SYSCTRL_OSC32K_STARTUP( 0x6u ) | // cf table 15.10 of product datasheet in chapter 15.8.6
     dc2:	4925      	ldr	r1, [pc, #148]	; (e58 <RtcInit+0xb0>)
     dc4:	6199      	str	r1, [r3, #24]
                          SYSCTRL_OSC32K_EN32K;
    SYSCTRL->OSC32K.bit.CALIB =
     dc6:	6999      	ldr	r1, [r3, #24]
     dc8:	4008      	ands	r0, r1
        ((*(uint32_t *)FUSES_OSC32K_CAL_ADDR >>
          FUSES_OSC32K_CAL_Pos) & 0x7Ful);



    SYSCTRL->OSC32K.bit.ENABLE = 1; // separate call, as described in chapter 15.6.3
     dca:	2102      	movs	r1, #2
        ((*(uint32_t *)FUSES_OSC32K_CAL_ADDR >>
          FUSES_OSC32K_CAL_Pos) & 0x7Ful);

    SYSCTRL->OSC32K.reg = SYSCTRL_OSC32K_STARTUP( 0x6u ) | // cf table 15.10 of product datasheet in chapter 15.8.6
                          SYSCTRL_OSC32K_EN32K;
    SYSCTRL->OSC32K.bit.CALIB =
     dcc:	4302      	orrs	r2, r0
     dce:	619a      	str	r2, [r3, #24]
        ((*(uint32_t *)FUSES_OSC32K_CAL_ADDR >>
          FUSES_OSC32K_CAL_Pos) & 0x7Ful);



    SYSCTRL->OSC32K.bit.ENABLE = 1; // separate call, as described in chapter 15.6.3
     dd0:	699a      	ldr	r2, [r3, #24]
     dd2:	430a      	orrs	r2, r1
     dd4:	619a      	str	r2, [r3, #24]

    while (  (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_OSC32KRDY) == 0 ) {
     dd6:	2204      	movs	r2, #4
     dd8:	68d9      	ldr	r1, [r3, #12]
     dda:	4211      	tst	r1, r2
     ddc:	d0fc      	beq.n	dd8 <RtcInit+0x30>





    GCLK->GENDIV.reg = GCLK_GENDIV_ID(2) | GCLK_GENDIV_DIV(1);
     dde:	2281      	movs	r2, #129	; 0x81
     de0:	4b1e      	ldr	r3, [pc, #120]	; (e5c <RtcInit+0xb4>)
     de2:	0052      	lsls	r2, r2, #1
     de4:	609a      	str	r2, [r3, #8]

    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(2) |
     de6:	4a1e      	ldr	r2, [pc, #120]	; (e60 <RtcInit+0xb8>)
     de8:	605a      	str	r2, [r3, #4]
                        GCLK_GENCTRL_SRC(GCLK_GENCTRL_SRC_OSC32K) |
                        GCLK_GENCTRL_IDC |
                        GCLK_GENCTRL_RUNSTDBY |
                        GCLK_GENCTRL_GENEN;
    while (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY);
     dea:	785a      	ldrb	r2, [r3, #1]
     dec:	b252      	sxtb	r2, r2
     dee:	2a00      	cmp	r2, #0
     df0:	dbfb      	blt.n	dea <RtcInit+0x42>

// Configure RTC
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(RTC_GCLK_ID) |
     df2:	4a1c      	ldr	r2, [pc, #112]	; (e64 <RtcInit+0xbc>)
     df4:	4b19      	ldr	r3, [pc, #100]	; (e5c <RtcInit+0xb4>)
     df6:	805a      	strh	r2, [r3, #2]
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    RTC->MODE1.CTRL.reg = RTC_MODE1_CTRL_MODE_COUNT16;
     df8:	2204      	movs	r2, #4
     dfa:	4b1b      	ldr	r3, [pc, #108]	; (e68 <RtcInit+0xc0>)
     dfc:	801a      	strh	r2, [r3, #0]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     dfe:	7a9a      	ldrb	r2, [r3, #10]
     e00:	4919      	ldr	r1, [pc, #100]	; (e68 <RtcInit+0xc0>)
     e02:	09d2      	lsrs	r2, r2, #7
     e04:	d1fb      	bne.n	dfe <RtcInit+0x56>

// Prescaler needs to be enabled separately from the mode for some reason
    RTC->MODE1.CTRL.reg |= RTC_MODE1_CTRL_PRESCALER_DIV32;
     e06:	20a0      	movs	r0, #160	; 0xa0
     e08:	880a      	ldrh	r2, [r1, #0]
     e0a:	00c0      	lsls	r0, r0, #3
     e0c:	4302      	orrs	r2, r0
     e0e:	800a      	strh	r2, [r1, #0]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     e10:	7a9a      	ldrb	r2, [r3, #10]
     e12:	09d2      	lsrs	r2, r2, #7
     e14:	d1fc      	bne.n	e10 <RtcInit+0x68>

    RTC->MODE1.PER.reg = 998;
     e16:	4915      	ldr	r1, [pc, #84]	; (e6c <RtcInit+0xc4>)
     e18:	4a13      	ldr	r2, [pc, #76]	; (e68 <RtcInit+0xc0>)
     e1a:	8291      	strh	r1, [r2, #20]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     e1c:	7a99      	ldrb	r1, [r3, #10]
     e1e:	4a12      	ldr	r2, [pc, #72]	; (e68 <RtcInit+0xc0>)
     e20:	09c9      	lsrs	r1, r1, #7
     e22:	d1fb      	bne.n	e1c <RtcInit+0x74>

    RTC->MODE1.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_ADDR(0x10);
     e24:	8851      	ldrh	r1, [r2, #2]
     e26:	4812      	ldr	r0, [pc, #72]	; (e70 <RtcInit+0xc8>)
     e28:	4301      	orrs	r1, r0
     e2a:	8051      	strh	r1, [r2, #2]

    RTC->MODE1.INTENSET.reg = RTC_MODE1_INTENSET_OVF;
     e2c:	2180      	movs	r1, #128	; 0x80

    RTC->MODE1.CTRL.bit.ENABLE = 1;
     e2e:	2002      	movs	r0, #2
    RTC->MODE1.PER.reg = 998;
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);

    RTC->MODE1.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_ADDR(0x10);

    RTC->MODE1.INTENSET.reg = RTC_MODE1_INTENSET_OVF;
     e30:	71d1      	strb	r1, [r2, #7]

    RTC->MODE1.CTRL.bit.ENABLE = 1;
     e32:	8811      	ldrh	r1, [r2, #0]
     e34:	4301      	orrs	r1, r0
     e36:	8011      	strh	r1, [r2, #0]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     e38:	7a9a      	ldrb	r2, [r3, #10]
     e3a:	09d2      	lsrs	r2, r2, #7
     e3c:	d1fc      	bne.n	e38 <RtcInit+0x90>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     e3e:	4b0d      	ldr	r3, [pc, #52]	; (e74 <RtcInit+0xcc>)
     e40:	3208      	adds	r2, #8
     e42:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(RTC_IRQn);
}
     e44:	4770      	bx	lr
     e46:	46c0      	nop			; (mov r8, r8)
     e48:	40000800 	.word	0x40000800
     e4c:	00000606 	.word	0x00000606
     e50:	ff80ffff 	.word	0xff80ffff
     e54:	00806024 	.word	0x00806024
     e58:	00000604 	.word	0x00000604
     e5c:	40000c00 	.word	0x40000c00
     e60:	00230002 	.word	0x00230002
     e64:	00004204 	.word	0x00004204
     e68:	40001400 	.word	0x40001400
     e6c:	000003e6 	.word	0x000003e6
     e70:	00004010 	.word	0x00004010
     e74:	e000e100 	.word	0xe000e100

00000e78 <gclkEnable>:


void gclkEnable(u32_t id, u32_t src, u32_t div) {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
     e78:	230f      	movs	r3, #15
     e7a:	4018      	ands	r0, r3
     e7c:	4b08      	ldr	r3, [pc, #32]	; (ea0 <gclkEnable+0x28>)
     e7e:	0212      	lsls	r2, r2, #8
     e80:	401a      	ands	r2, r3
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     e82:	23f8      	movs	r3, #248	; 0xf8
     e84:	0209      	lsls	r1, r1, #8
     e86:	015b      	lsls	r3, r3, #5
     e88:	4019      	ands	r1, r3
     e8a:	2380      	movs	r3, #128	; 0x80

    NVIC_EnableIRQ(RTC_IRQn);
}


void gclkEnable(u32_t id, u32_t src, u32_t div) {
     e8c:	b510      	push	{r4, lr}
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     e8e:	025b      	lsls	r3, r3, #9
    NVIC_EnableIRQ(RTC_IRQn);
}


void gclkEnable(u32_t id, u32_t src, u32_t div) {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
     e90:	4c04      	ldr	r4, [pc, #16]	; (ea4 <gclkEnable+0x2c>)
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     e92:	4319      	orrs	r1, r3
    NVIC_EnableIRQ(RTC_IRQn);
}


void gclkEnable(u32_t id, u32_t src, u32_t div) {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
     e94:	4302      	orrs	r2, r0
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     e96:	4308      	orrs	r0, r1
    NVIC_EnableIRQ(RTC_IRQn);
}


void gclkEnable(u32_t id, u32_t src, u32_t div) {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
     e98:	60a2      	str	r2, [r4, #8]
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     e9a:	6060      	str	r0, [r4, #4]
}
     e9c:	bd10      	pop	{r4, pc}
     e9e:	46c0      	nop			; (mov r8, r8)
     ea0:	00ffff00 	.word	0x00ffff00
     ea4:	40000c00 	.word	0x40000c00

00000ea8 <delayInit>:


void delayInit(void) {
    cycles_per_ms = 48000000UL;
    cycles_per_ms /= 1000;
     ea8:	4b04      	ldr	r3, [pc, #16]	; (ebc <delayInit+0x14>)
     eaa:	4a05      	ldr	r2, [pc, #20]	; (ec0 <delayInit+0x18>)
     eac:	601a      	str	r2, [r3, #0]
    cycles_per_us = cycles_per_ms / 1000;
     eae:	2230      	movs	r2, #48	; 0x30
     eb0:	605a      	str	r2, [r3, #4]

    SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     eb2:	4b04      	ldr	r3, [pc, #16]	; (ec4 <delayInit+0x1c>)
     eb4:	3a2b      	subs	r2, #43	; 0x2b
     eb6:	601a      	str	r2, [r3, #0]
}
     eb8:	4770      	bx	lr
     eba:	46c0      	nop			; (mov r8, r8)
     ebc:	20000004 	.word	0x20000004
     ec0:	0000bb80 	.word	0x0000bb80
     ec4:	e000e010 	.word	0xe000e010

00000ec8 <delay_us>:
/**
 * \brief Delay loop to delay at least n number of microseconds
 *
 * \param n  Number of microseconds to wait
 */
void delay_us(uint32_t n) {
     ec8:	b570      	push	{r4, r5, r6, lr}
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
        SysTick->VAL = 0;

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     eca:	2480      	movs	r4, #128	; 0x80

static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
        SysTick->VAL = 0;
     ecc:	2100      	movs	r1, #0
    while (n--) {
        /* Devide up to blocks of 10u */
        delay_cycles(cycles_per_us);
     ece:	4b08      	ldr	r3, [pc, #32]	; (ef0 <delay_us+0x28>)


static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
     ed0:	4a08      	ldr	r2, [pc, #32]	; (ef4 <delay_us+0x2c>)
     ed2:	685b      	ldr	r3, [r3, #4]
        SysTick->VAL = 0;

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     ed4:	0264      	lsls	r4, r4, #9
 * \brief Delay loop to delay at least n number of microseconds
 *
 * \param n  Number of microseconds to wait
 */
void delay_us(uint32_t n) {
    while (n--) {
     ed6:	3801      	subs	r0, #1
     ed8:	d308      	bcc.n	eec <delay_us+0x24>



static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
     eda:	2b00      	cmp	r3, #0
     edc:	d0fb      	beq.n	ed6 <delay_us+0xe>
     ede:	4e05      	ldr	r6, [pc, #20]	; (ef4 <delay_us+0x2c>)
        SysTick->LOAD = n;
     ee0:	6053      	str	r3, [r2, #4]
        SysTick->VAL = 0;
     ee2:	6091      	str	r1, [r2, #8]

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     ee4:	6835      	ldr	r5, [r6, #0]
     ee6:	4225      	tst	r5, r4
     ee8:	d0fc      	beq.n	ee4 <delay_us+0x1c>
     eea:	e7f4      	b.n	ed6 <delay_us+0xe>
        /* Devide up to blocks of 10u */
        delay_cycles(cycles_per_us);
    }
}
     eec:	bd70      	pop	{r4, r5, r6, pc}
     eee:	46c0      	nop			; (mov r8, r8)
     ef0:	20000004 	.word	0x20000004
     ef4:	e000e010 	.word	0xe000e010

00000ef8 <delay_ms>:
/**
 * \brief Delay loop to delay at least n number of milliseconds
 *
 * \param n  Number of milliseconds to wait
 */
void delay_ms(uint32_t n) {
     ef8:	b570      	push	{r4, r5, r6, lr}
     efa:	2480      	movs	r4, #128	; 0x80

static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
        SysTick->VAL = 0;
     efc:	2100      	movs	r1, #0
    while (n--) {
        /* Devide up to blocks of 1ms */
        delay_cycles(cycles_per_ms);
     efe:	4b08      	ldr	r3, [pc, #32]	; (f20 <delay_ms+0x28>)


static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
     f00:	4a08      	ldr	r2, [pc, #32]	; (f24 <delay_ms+0x2c>)
     f02:	681b      	ldr	r3, [r3, #0]
        SysTick->VAL = 0;

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     f04:	0264      	lsls	r4, r4, #9
 * \brief Delay loop to delay at least n number of milliseconds
 *
 * \param n  Number of milliseconds to wait
 */
void delay_ms(uint32_t n) {
    while (n--) {
     f06:	3801      	subs	r0, #1
     f08:	d308      	bcc.n	f1c <delay_ms+0x24>



static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
     f0a:	2b00      	cmp	r3, #0
     f0c:	d0fb      	beq.n	f06 <delay_ms+0xe>
     f0e:	4e05      	ldr	r6, [pc, #20]	; (f24 <delay_ms+0x2c>)
        SysTick->LOAD = n;
     f10:	6053      	str	r3, [r2, #4]
        SysTick->VAL = 0;
     f12:	6091      	str	r1, [r2, #8]

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     f14:	6835      	ldr	r5, [r6, #0]
     f16:	4225      	tst	r5, r4
     f18:	d0fc      	beq.n	f14 <delay_ms+0x1c>
     f1a:	e7f4      	b.n	f06 <delay_ms+0xe>
        /* Devide up to blocks of 1ms */
        delay_cycles(cycles_per_ms);
    }
}
     f1c:	bd70      	pop	{r4, r5, r6, pc}
     f1e:	46c0      	nop			; (mov r8, r8)
     f20:	20000004 	.word	0x20000004
     f24:	e000e010 	.word	0xe000e010

00000f28 <RTC_Handler>:


volatile uint32_t time_ms = 0;

void RTC_Handler(void) {
    time_ms += 1000;
     f28:	21fa      	movs	r1, #250	; 0xfa
     f2a:	4a04      	ldr	r2, [pc, #16]	; (f3c <RTC_Handler+0x14>)
     f2c:	0089      	lsls	r1, r1, #2
     f2e:	6813      	ldr	r3, [r2, #0]
     f30:	185b      	adds	r3, r3, r1
     f32:	6013      	str	r3, [r2, #0]
    RTC->MODE1.INTFLAG.reg = 0xFF;
     f34:	22ff      	movs	r2, #255	; 0xff
     f36:	4b02      	ldr	r3, [pc, #8]	; (f40 <RTC_Handler+0x18>)
     f38:	721a      	strb	r2, [r3, #8]
}
     f3a:	4770      	bx	lr
     f3c:	200004c4 	.word	0x200004c4
     f40:	40001400 	.word	0x40001400

00000f44 <millis>:

uint32_t millis(void) {
     f44:	b530      	push	{r4, r5, lr}
    uint32_t ms;
    ATOMIC_SECTION_ENTER
     f46:	f3ef 8110 	mrs	r1, PRIMASK
     f4a:	b672      	cpsid	i
    ms = time_ms + RTC->MODE1.COUNT.reg;
     f4c:	4a08      	ldr	r2, [pc, #32]	; (f70 <millis+0x2c>)
     f4e:	4d09      	ldr	r5, [pc, #36]	; (f74 <millis+0x30>)
     f50:	8a10      	ldrh	r0, [r2, #16]
     f52:	682b      	ldr	r3, [r5, #0]
    if (RTC->MODE1.INTFLAG.bit.OVF)
     f54:	7a14      	ldrb	r4, [r2, #8]
}

uint32_t millis(void) {
    uint32_t ms;
    ATOMIC_SECTION_ENTER
    ms = time_ms + RTC->MODE1.COUNT.reg;
     f56:	b280      	uxth	r0, r0
    if (RTC->MODE1.INTFLAG.bit.OVF)
     f58:	09e4      	lsrs	r4, r4, #7
     f5a:	d004      	beq.n	f66 <millis+0x22>
        ms = time_ms + RTC->MODE1.COUNT.reg + 1000;
     f5c:	8a13      	ldrh	r3, [r2, #16]
     f5e:	22fa      	movs	r2, #250	; 0xfa
     f60:	6828      	ldr	r0, [r5, #0]
     f62:	0092      	lsls	r2, r2, #2
     f64:	1880      	adds	r0, r0, r2
     f66:	18c0      	adds	r0, r0, r3
    ATOMIC_SECTION_LEAVE
     f68:	f381 8810 	msr	PRIMASK, r1
    return ms;
}
     f6c:	bd30      	pop	{r4, r5, pc}
     f6e:	46c0      	nop			; (mov r8, r8)
     f70:	40001400 	.word	0x40001400
     f74:	200004c4 	.word	0x200004c4

00000f78 <TC4Init>:

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC4_GCLK_ID) |
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC4;
     f78:	2180      	movs	r1, #128	; 0x80
    return ms;
}

void TC4Init() {

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC4_GCLK_ID) |
     f7a:	4a0d      	ldr	r2, [pc, #52]	; (fb0 <TC4Init+0x38>)
     f7c:	4b0d      	ldr	r3, [pc, #52]	; (fb4 <TC4Init+0x3c>)
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC4;
     f7e:	0149      	lsls	r1, r1, #5
    return ms;
}

void TC4Init() {

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC4_GCLK_ID) |
     f80:	805a      	strh	r2, [r3, #2]
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC4;
     f82:	4a0d      	ldr	r2, [pc, #52]	; (fb8 <TC4Init+0x40>)
     f84:	6a13      	ldr	r3, [r2, #32]
     f86:	430b      	orrs	r3, r1
     f88:	6213      	str	r3, [r2, #32]

    TC4->COUNT8.CTRLA.reg = TC_CTRLA_MODE_COUNT8 |
     f8a:	4b0c      	ldr	r3, [pc, #48]	; (fbc <TC4Init+0x44>)
     f8c:	4a0c      	ldr	r2, [pc, #48]	; (fc0 <TC4Init+0x48>)

    TC4->COUNT8.INTENSET.reg = TC_INTENSET_OVF;

    TC4->COUNT8.EVCTRL.reg = TC_EVCTRL_OVFEO;

    TC4->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
     f8e:	2102      	movs	r1, #2
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC4;

    TC4->COUNT8.CTRLA.reg = TC_CTRLA_MODE_COUNT8 |
     f90:	801a      	strh	r2, [r3, #0]
                            TC_CTRLA_RUNSTDBY |
                            TC_CTRLA_PRESCALER_DIV2;
    TC4->COUNT8.PER.reg = 0x50;
     f92:	2250      	movs	r2, #80	; 0x50
     f94:	751a      	strb	r2, [r3, #20]

    TC4->COUNT8.INTENSET.reg = TC_INTENSET_OVF;
     f96:	3a4f      	subs	r2, #79	; 0x4f
     f98:	735a      	strb	r2, [r3, #13]

    TC4->COUNT8.EVCTRL.reg = TC_EVCTRL_OVFEO;
     f9a:	32ff      	adds	r2, #255	; 0xff
     f9c:	815a      	strh	r2, [r3, #10]

    TC4->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
     f9e:	881a      	ldrh	r2, [r3, #0]
     fa0:	430a      	orrs	r2, r1
     fa2:	801a      	strh	r2, [r3, #0]
     fa4:	2280      	movs	r2, #128	; 0x80
     fa6:	4b07      	ldr	r3, [pc, #28]	; (fc4 <TC4Init+0x4c>)
     fa8:	0312      	lsls	r2, r2, #12
     faa:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(TC4_IRQn);
}
     fac:	4770      	bx	lr
     fae:	46c0      	nop			; (mov r8, r8)
     fb0:	0000421c 	.word	0x0000421c
     fb4:	40000c00 	.word	0x40000c00
     fb8:	40000400 	.word	0x40000400
     fbc:	42003000 	.word	0x42003000
     fc0:	00000904 	.word	0x00000904
     fc4:	e000e100 	.word	0xe000e100

00000fc8 <TC4_Handler>:

void TC4_Handler( void ) {
    TC4->COUNT8.INTFLAG.reg = 0xFF;
     fc8:	22ff      	movs	r2, #255	; 0xff
    TC4->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;

    NVIC_EnableIRQ(TC4_IRQn);
}

void TC4_Handler( void ) {
     fca:	b510      	push	{r4, lr}
    TC4->COUNT8.INTFLAG.reg = 0xFF;
     fcc:	4b02      	ldr	r3, [pc, #8]	; (fd8 <TC4_Handler+0x10>)
     fce:	739a      	strb	r2, [r3, #14]
    //pinToggle(TxPo);
    pullSample();
     fd0:	4b02      	ldr	r3, [pc, #8]	; (fdc <TC4_Handler+0x14>)
     fd2:	4798      	blx	r3
}
     fd4:	bd10      	pop	{r4, pc}
     fd6:	46c0      	nop			; (mov r8, r8)
     fd8:	42003000 	.word	0x42003000
     fdc:	00002269 	.word	0x00002269

00000fe0 <TC5Init>:

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC5_GCLK_ID) |
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC5;
     fe0:	2180      	movs	r1, #128	; 0x80
    pullSample();
}

void TC5Init() {

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC5_GCLK_ID) |
     fe2:	4a0d      	ldr	r2, [pc, #52]	; (1018 <TC5Init+0x38>)
     fe4:	4b0d      	ldr	r3, [pc, #52]	; (101c <TC5Init+0x3c>)
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC5;
     fe6:	0189      	lsls	r1, r1, #6
    pullSample();
}

void TC5Init() {

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC5_GCLK_ID) |
     fe8:	805a      	strh	r2, [r3, #2]
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC5;
     fea:	4a0d      	ldr	r2, [pc, #52]	; (1020 <TC5Init+0x40>)
     fec:	6a13      	ldr	r3, [r2, #32]
     fee:	430b      	orrs	r3, r1
     ff0:	6213      	str	r3, [r2, #32]

    TC5->COUNT8.CTRLA.reg = TC_CTRLA_MODE_COUNT8 |
     ff2:	4b0c      	ldr	r3, [pc, #48]	; (1024 <TC5Init+0x44>)
     ff4:	4a0c      	ldr	r2, [pc, #48]	; (1028 <TC5Init+0x48>)

    TC5->COUNT8.INTENSET.reg = TC_INTENSET_OVF;

    TC5->COUNT8.EVCTRL.reg = TC_EVCTRL_OVFEO;

    TC5->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
     ff6:	2102      	movs	r1, #2
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC5;

    TC5->COUNT8.CTRLA.reg = TC_CTRLA_MODE_COUNT8 |
     ff8:	801a      	strh	r2, [r3, #0]
                            TC_CTRLA_PRESCALER_DIV16;

    u16_t logSpeed = 20; //Hz
    u8_t PER_Reg = (long)((32768/16) / logSpeed);

    TC5->COUNT8.PER.reg = PER_Reg;
     ffa:	2266      	movs	r2, #102	; 0x66
     ffc:	751a      	strb	r2, [r3, #20]

    TC5->COUNT8.INTENSET.reg = TC_INTENSET_OVF;
     ffe:	3a65      	subs	r2, #101	; 0x65
    1000:	735a      	strb	r2, [r3, #13]

    TC5->COUNT8.EVCTRL.reg = TC_EVCTRL_OVFEO;
    1002:	32ff      	adds	r2, #255	; 0xff
    1004:	815a      	strh	r2, [r3, #10]

    TC5->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
    1006:	881a      	ldrh	r2, [r3, #0]
    1008:	430a      	orrs	r2, r1
    100a:	801a      	strh	r2, [r3, #0]
    100c:	2280      	movs	r2, #128	; 0x80
    100e:	4b07      	ldr	r3, [pc, #28]	; (102c <TC5Init+0x4c>)
    1010:	0352      	lsls	r2, r2, #13
    1012:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(TC5_IRQn);
}
    1014:	4770      	bx	lr
    1016:	46c0      	nop			; (mov r8, r8)
    1018:	0000421c 	.word	0x0000421c
    101c:	40000c00 	.word	0x40000c00
    1020:	40000400 	.word	0x40000400
    1024:	42003400 	.word	0x42003400
    1028:	00000c04 	.word	0x00000c04
    102c:	e000e100 	.word	0xe000e100

00001030 <TC5_Handler>:

void TC5_Handler( void ) {
    TC5->COUNT8.INTFLAG.reg = 0xFF;
    1030:	22ff      	movs	r2, #255	; 0xff
    1032:	4b03      	ldr	r3, [pc, #12]	; (1040 <TC5_Handler+0x10>)
    1034:	739a      	strb	r2, [r3, #14]
    

    writeLog = true;
    1036:	4b03      	ldr	r3, [pc, #12]	; (1044 <TC5_Handler+0x14>)
    1038:	3afe      	subs	r2, #254	; 0xfe
    103a:	701a      	strb	r2, [r3, #0]
}
    103c:	4770      	bx	lr
    103e:	46c0      	nop			; (mov r8, r8)
    1040:	42003400 	.word	0x42003400
    1044:	20000500 	.word	0x20000500

00001048 <flight>:
#include <boardDefines.h>

flightState_t flightState;


void flight() {
    1048:	b570      	push	{r4, r5, r6, lr}


    switch(flightState) {
    104a:	4c5d      	ldr	r4, [pc, #372]	; (11c0 <flight+0x178>)
    104c:	7820      	ldrb	r0, [r4, #0]
    104e:	280a      	cmp	r0, #10
    1050:	d900      	bls.n	1054 <flight+0xc>
    1052:	e0a4      	b.n	119e <flight+0x156>
    1054:	f002 fcd8 	bl	3a08 <__gnu_thumb1_case_uqi>
    1058:	56372506 	.word	0x56372506
    105c:	a382a3a3 	.word	0xa382a3a3
    1060:	a3a3      	.short	0xa3a3
    1062:	89          	.byte	0x89
    1063:	00          	.byte	0x00
    case flightStatrup:


        updateGround( );
    1064:	4b57      	ldr	r3, [pc, #348]	; (11c4 <flight+0x17c>)
    1066:	4798      	blx	r3

        //logSensors( );


        if ((millis() - startupTick) > 10000) {
    1068:	4b57      	ldr	r3, [pc, #348]	; (11c8 <flight+0x180>)
    106a:	4798      	blx	r3
    106c:	4b57      	ldr	r3, [pc, #348]	; (11cc <flight+0x184>)
    106e:	681b      	ldr	r3, [r3, #0]
    1070:	1ac0      	subs	r0, r0, r3
    1072:	4b57      	ldr	r3, [pc, #348]	; (11d0 <flight+0x188>)
    1074:	4298      	cmp	r0, r3
    1076:	d908      	bls.n	108a <flight+0x42>
            findNewFlightStart( );
    1078:	4b56      	ldr	r3, [pc, #344]	; (11d4 <flight+0x18c>)
    107a:	4798      	blx	r3
            logFlight( );
    107c:	4b56      	ldr	r3, [pc, #344]	; (11d8 <flight+0x190>)
    107e:	4798      	blx	r3
            startupJingle();
    1080:	4b56      	ldr	r3, [pc, #344]	; (11dc <flight+0x194>)
    1082:	4798      	blx	r3
            flightState = flightTest;
    1084:	230a      	movs	r3, #10
    1086:	7023      	strb	r3, [r4, #0]
            //flightState = flightPad;
            break;
    1088:	e089      	b.n	119e <flight+0x156>
        }

        attemptConnection();
    108a:	4b55      	ldr	r3, [pc, #340]	; (11e0 <flight+0x198>)
    108c:	4798      	blx	r3

        if (unplugged()) {
    108e:	4b55      	ldr	r3, [pc, #340]	; (11e4 <flight+0x19c>)
    1090:	4798      	blx	r3
    1092:	2800      	cmp	r0, #0
    1094:	d100      	bne.n	1098 <flight+0x50>
    1096:	e082      	b.n	119e <flight+0x156>
            flightState = flightIdle;
    1098:	2301      	movs	r3, #1
    109a:	7023      	strb	r3, [r4, #0]
            unpluggedJingle();
    109c:	4b52      	ldr	r3, [pc, #328]	; (11e8 <flight+0x1a0>)
    109e:	4798      	blx	r3
    10a0:	e07d      	b.n	119e <flight+0x156>
        //TC5->COUNT8.CTRLA.reg = 0;

        //delay_ms(1000);
        //pinToggle(LedPin);

        if (sercom(USART3)->SPI.INTFLAG.bit.RXC == 1) {
    10a2:	4b52      	ldr	r3, [pc, #328]	; (11ec <flight+0x1a4>)
    10a4:	7e1b      	ldrb	r3, [r3, #24]
    10a6:	075b      	lsls	r3, r3, #29
    10a8:	d400      	bmi.n	10ac <flight+0x64>
    10aa:	e086      	b.n	11ba <flight+0x172>
            u8_t possibleReset = usartDataIn(USART3);
    10ac:	2003      	movs	r0, #3
    10ae:	4b50      	ldr	r3, [pc, #320]	; (11f0 <flight+0x1a8>)
    10b0:	4798      	blx	r3
            if (possibleReset == 0x52) {
    10b2:	2852      	cmp	r0, #82	; 0x52
    10b4:	d173      	bne.n	119e <flight+0x156>
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
    10b6:	f3bf 8f4f 	dsb	sy
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
    10ba:	4a4e      	ldr	r2, [pc, #312]	; (11f4 <flight+0x1ac>)
    10bc:	4b4e      	ldr	r3, [pc, #312]	; (11f8 <flight+0x1b0>)
    10be:	60da      	str	r2, [r3, #12]
    10c0:	f3bf 8f4f 	dsb	sy
    10c4:	e7fe      	b.n	10c4 <flight+0x7c>
        *  Accel > 2g & vel > 5m/s
        *		 or
        *  baro alt > 40ft
        */

        updateGround();
    10c6:	4b3f      	ldr	r3, [pc, #252]	; (11c4 <flight+0x17c>)
    10c8:	4798      	blx	r3

        if (writeLog) {
    10ca:	4b4c      	ldr	r3, [pc, #304]	; (11fc <flight+0x1b4>)
    10cc:	781a      	ldrb	r2, [r3, #0]
    10ce:	2a00      	cmp	r2, #0
    10d0:	d005      	beq.n	10de <flight+0x96>
            writeLog = false;
    10d2:	2200      	movs	r2, #0
    10d4:	701a      	strb	r2, [r3, #0]
}


inline static void pinToggle(Pin p) {
    PORT->Group[p.group].OUTTGL.reg = (1<<p.pin);
    10d6:	2280      	movs	r2, #128	; 0x80
    10d8:	4b49      	ldr	r3, [pc, #292]	; (1200 <flight+0x1b8>)
    10da:	0352      	lsls	r2, r2, #13
    10dc:	61da      	str	r2, [r3, #28]
            //logSensors( );
            pinToggle(LedPin);
        }

        if (( velocity > 0.05) && (altitudeAGL() > 5)) {
    10de:	4949      	ldr	r1, [pc, #292]	; (1204 <flight+0x1bc>)
    10e0:	4a49      	ldr	r2, [pc, #292]	; (1208 <flight+0x1c0>)
    10e2:	4b4a      	ldr	r3, [pc, #296]	; (120c <flight+0x1c4>)
    10e4:	6808      	ldr	r0, [r1, #0]
    10e6:	6849      	ldr	r1, [r1, #4]
    10e8:	4d49      	ldr	r5, [pc, #292]	; (1210 <flight+0x1c8>)
    10ea:	47a8      	blx	r5
    10ec:	2800      	cmp	r0, #0
    10ee:	d056      	beq.n	119e <flight+0x156>
    10f0:	4b48      	ldr	r3, [pc, #288]	; (1214 <flight+0x1cc>)
    10f2:	4798      	blx	r3
    10f4:	2805      	cmp	r0, #5
    10f6:	dd52      	ble.n	119e <flight+0x156>
            flightState = flightBoost;
    10f8:	2303      	movs	r3, #3
            logEvent('L');
    10fa:	204c      	movs	r0, #76	; 0x4c
            //logSensors( );
            pinToggle(LedPin);
        }

        if (( velocity > 0.05) && (altitudeAGL() > 5)) {
            flightState = flightBoost;
    10fc:	7023      	strb	r3, [r4, #0]
            logEvent('L');
    10fe:	4b46      	ldr	r3, [pc, #280]	; (1218 <flight+0x1d0>)
    1100:	4798      	blx	r3
    1102:	e04c      	b.n	119e <flight+0x156>
        *	boost to fast
        *		while
        *	Accel > 1/4G
        */

        if (writeLog) {
    1104:	4b3d      	ldr	r3, [pc, #244]	; (11fc <flight+0x1b4>)
    1106:	781a      	ldrb	r2, [r3, #0]
    1108:	2a00      	cmp	r2, #0
    110a:	d015      	beq.n	1138 <flight+0xf0>
            writeLog = false;
    110c:	2500      	movs	r5, #0
    110e:	701d      	strb	r5, [r3, #0]
            logSensors( );
    1110:	4b42      	ldr	r3, [pc, #264]	; (121c <flight+0x1d4>)
    1112:	4798      	blx	r3
            if (pageReady) {
    1114:	4b42      	ldr	r3, [pc, #264]	; (1220 <flight+0x1d8>)
    1116:	781a      	ldrb	r2, [r3, #0]
    1118:	42aa      	cmp	r2, r5
    111a:	d00d      	beq.n	1138 <flight+0xf0>
    111c:	2280      	movs	r2, #128	; 0x80
                pageReady = false;
    111e:	701d      	strb	r5, [r3, #0]
    1120:	4b37      	ldr	r3, [pc, #220]	; (1200 <flight+0x1b8>)
                pinToggle(LedPin);
                u8_t bytesWritten = AT25SEWritePage(currentAddress,pageToWrite);
    1122:	4d40      	ldr	r5, [pc, #256]	; (1224 <flight+0x1dc>)
    1124:	0352      	lsls	r2, r2, #13
    1126:	61da      	str	r2, [r3, #28]
    1128:	493f      	ldr	r1, [pc, #252]	; (1228 <flight+0x1e0>)
    112a:	4b40      	ldr	r3, [pc, #256]	; (122c <flight+0x1e4>)
    112c:	6828      	ldr	r0, [r5, #0]
    112e:	4798      	blx	r3
                currentAddress = (currentAddress + 0x100);
    1130:	682b      	ldr	r3, [r5, #0]
    1132:	3301      	adds	r3, #1
    1134:	33ff      	adds	r3, #255	; 0xff
    1136:	602b      	str	r3, [r5, #0]
            }
        }


        if (velocity < 0) {
    1138:	4932      	ldr	r1, [pc, #200]	; (1204 <flight+0x1bc>)
    113a:	2200      	movs	r2, #0
    113c:	6808      	ldr	r0, [r1, #0]
    113e:	6849      	ldr	r1, [r1, #4]
    1140:	2300      	movs	r3, #0
    1142:	4d3b      	ldr	r5, [pc, #236]	; (1230 <flight+0x1e8>)
    1144:	47a8      	blx	r5
    1146:	2800      	cmp	r0, #0
    1148:	d029      	beq.n	119e <flight+0x156>
            flightState = flightDrogue;
    114a:	2306      	movs	r3, #6
            logEvent('A');
    114c:	2041      	movs	r0, #65	; 0x41
            }
        }


        if (velocity < 0) {
            flightState = flightDrogue;
    114e:	7023      	strb	r3, [r4, #0]
            logEvent('A');
    1150:	4b31      	ldr	r3, [pc, #196]	; (1218 <flight+0x1d0>)
    1152:	4798      	blx	r3
            beep(100);
    1154:	2064      	movs	r0, #100	; 0x64
    1156:	4b37      	ldr	r3, [pc, #220]	; (1234 <flight+0x1ec>)
    1158:	4798      	blx	r3
    115a:	e020      	b.n	119e <flight+0x156>

        break;
    case flightDrogue:


        if (pageReady) {
    115c:	4b30      	ldr	r3, [pc, #192]	; (1220 <flight+0x1d8>)
    115e:	781a      	ldrb	r2, [r3, #0]
    1160:	2a00      	cmp	r2, #0
    1162:	d01c      	beq.n	119e <flight+0x156>
            pageReady = false;
    1164:	2200      	movs	r2, #0
    1166:	701a      	strb	r2, [r3, #0]
    1168:	e00c      	b.n	1184 <flight+0x13c>
           }
        */



        if (writeLog) {
    116a:	4b24      	ldr	r3, [pc, #144]	; (11fc <flight+0x1b4>)
    116c:	781a      	ldrb	r2, [r3, #0]
    116e:	2a00      	cmp	r2, #0
    1170:	d015      	beq.n	119e <flight+0x156>
            writeLog = false;
    1172:	2500      	movs	r5, #0
    1174:	701d      	strb	r5, [r3, #0]
            logSensors( );
    1176:	4b29      	ldr	r3, [pc, #164]	; (121c <flight+0x1d4>)
    1178:	4798      	blx	r3
            if (pageReady) {
    117a:	4b29      	ldr	r3, [pc, #164]	; (1220 <flight+0x1d8>)
    117c:	781a      	ldrb	r2, [r3, #0]
    117e:	42aa      	cmp	r2, r5
    1180:	d00d      	beq.n	119e <flight+0x156>
                pageReady = false;
    1182:	701d      	strb	r5, [r3, #0]
    1184:	2280      	movs	r2, #128	; 0x80
    1186:	4b1e      	ldr	r3, [pc, #120]	; (1200 <flight+0x1b8>)

                pinToggle(LedPin);
                u8_t bytesWritten = AT25SEWritePage(currentAddress,pageToWrite);
    1188:	4d26      	ldr	r5, [pc, #152]	; (1224 <flight+0x1dc>)
    118a:	0352      	lsls	r2, r2, #13
    118c:	61da      	str	r2, [r3, #28]
    118e:	4926      	ldr	r1, [pc, #152]	; (1228 <flight+0x1e0>)
    1190:	4b26      	ldr	r3, [pc, #152]	; (122c <flight+0x1e4>)
    1192:	6828      	ldr	r0, [r5, #0]
    1194:	4798      	blx	r3
                currentAddress = (currentAddress + 0x100);
    1196:	682b      	ldr	r3, [r5, #0]
    1198:	3301      	adds	r3, #1
    119a:	33ff      	adds	r3, #255	; 0xff
    119c:	602b      	str	r3, [r5, #0]


        break;
    }

    if (flightState != flightStatrup & flightState != flightIdle & unplugged()) {
    119e:	2301      	movs	r3, #1
    11a0:	7824      	ldrb	r4, [r4, #0]
    11a2:	42a3      	cmp	r3, r4
    11a4:	41a4      	sbcs	r4, r4
    11a6:	4b0f      	ldr	r3, [pc, #60]	; (11e4 <flight+0x19c>)
    11a8:	4264      	negs	r4, r4
    11aa:	4798      	blx	r3
    11ac:	2c00      	cmp	r4, #0
    11ae:	d006      	beq.n	11be <flight+0x176>
    11b0:	2800      	cmp	r0, #0
    11b2:	d004      	beq.n	11be <flight+0x176>
        finishFlight();
    11b4:	4b20      	ldr	r3, [pc, #128]	; (1238 <flight+0x1f0>)
    11b6:	4798      	blx	r3
    }


}
    11b8:	e001      	b.n	11be <flight+0x176>


        break;
    }

    if (flightState != flightStatrup & flightState != flightIdle & unplugged()) {
    11ba:	4b0a      	ldr	r3, [pc, #40]	; (11e4 <flight+0x19c>)
    11bc:	4798      	blx	r3
        finishFlight();
    }


}
    11be:	bd70      	pop	{r4, r5, r6, pc}
    11c0:	2000065c 	.word	0x2000065c
    11c4:	0000123d 	.word	0x0000123d
    11c8:	00000f45 	.word	0x00000f45
    11cc:	20000504 	.word	0x20000504
    11d0:	00002710 	.word	0x00002710
    11d4:	000021a9 	.word	0x000021a9
    11d8:	00001e95 	.word	0x00001e95
    11dc:	00000ca5 	.word	0x00000ca5
    11e0:	000026f9 	.word	0x000026f9
    11e4:	00000b39 	.word	0x00000b39
    11e8:	00000cdd 	.word	0x00000cdd
    11ec:	42001400 	.word	0x42001400
    11f0:	000026e9 	.word	0x000026e9
    11f4:	05fa0004 	.word	0x05fa0004
    11f8:	e000ed00 	.word	0xe000ed00
    11fc:	20000500 	.word	0x20000500
    1200:	41004400 	.word	0x41004400
    1204:	20000668 	.word	0x20000668
    1208:	9999999a 	.word	0x9999999a
    120c:	3fa99999 	.word	0x3fa99999
    1210:	00003a71 	.word	0x00003a71
    1214:	00000b05 	.word	0x00000b05
    1218:	00001ef1 	.word	0x00001ef1
    121c:	00001f4d 	.word	0x00001f4d
    1220:	20000790 	.word	0x20000790
    1224:	20000794 	.word	0x20000794
    1228:	20000690 	.word	0x20000690
    122c:	000002cd 	.word	0x000002cd
    1230:	00003a49 	.word	0x00003a49
    1234:	00000c69 	.word	0x00000c69
    1238:	00000b5d 	.word	0x00000b5d

0000123c <updateGround>:
#include <util.h>
#include <altimeter.h>

void updateGround(Altimeter *my_altimeter) {
    123c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

    offsets.gravityOffsetBuffer = offsets.gravityOffsetBuffer * 0.8 + sample.accelZ * 0.2;
    123e:	4b2e      	ldr	r3, [pc, #184]	; (12f8 <updateGround+0xbc>)
    1240:	4c2e      	ldr	r4, [pc, #184]	; (12fc <updateGround+0xc0>)
    1242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1244:	4d2e      	ldr	r5, [pc, #184]	; (1300 <updateGround+0xc4>)
    1246:	4a2f      	ldr	r2, [pc, #188]	; (1304 <updateGround+0xc8>)
    1248:	6920      	ldr	r0, [r4, #16]
    124a:	6961      	ldr	r1, [r4, #20]
    124c:	9300      	str	r3, [sp, #0]
    124e:	4b2e      	ldr	r3, [pc, #184]	; (1308 <updateGround+0xcc>)
    1250:	47a8      	blx	r5
    1252:	4b2e      	ldr	r3, [pc, #184]	; (130c <updateGround+0xd0>)
    1254:	0006      	movs	r6, r0
    1256:	9800      	ldr	r0, [sp, #0]
    1258:	000f      	movs	r7, r1
    125a:	4798      	blx	r3
    125c:	4a29      	ldr	r2, [pc, #164]	; (1304 <updateGround+0xc8>)
    125e:	4b2c      	ldr	r3, [pc, #176]	; (1310 <updateGround+0xd4>)
    1260:	47a8      	blx	r5
    1262:	0002      	movs	r2, r0
    1264:	000b      	movs	r3, r1
    1266:	0030      	movs	r0, r6
    1268:	0039      	movs	r1, r7
    126a:	4e2a      	ldr	r6, [pc, #168]	; (1314 <updateGround+0xd8>)
    126c:	47b0      	blx	r6
    offsets.groundOffsetBuffer = offsets.groundOffsetBuffer * 0.5 + altitude * 0.5;
    126e:	4b2a      	ldr	r3, [pc, #168]	; (1318 <updateGround+0xdc>)
#include <util.h>
#include <altimeter.h>

void updateGround(Altimeter *my_altimeter) {

    offsets.gravityOffsetBuffer = offsets.gravityOffsetBuffer * 0.8 + sample.accelZ * 0.2;
    1270:	6120      	str	r0, [r4, #16]
    1272:	6161      	str	r1, [r4, #20]
    offsets.groundOffsetBuffer = offsets.groundOffsetBuffer * 0.5 + altitude * 0.5;
    1274:	69e0      	ldr	r0, [r4, #28]
    1276:	4798      	blx	r3
    1278:	2200      	movs	r2, #0
    127a:	4b28      	ldr	r3, [pc, #160]	; (131c <updateGround+0xe0>)
    127c:	47a8      	blx	r5
    127e:	000f      	movs	r7, r1
    1280:	4927      	ldr	r1, [pc, #156]	; (1320 <updateGround+0xe4>)
    1282:	0006      	movs	r6, r0
    1284:	6808      	ldr	r0, [r1, #0]
    1286:	6849      	ldr	r1, [r1, #4]
    1288:	2200      	movs	r2, #0
    128a:	4b24      	ldr	r3, [pc, #144]	; (131c <updateGround+0xe0>)
    128c:	47a8      	blx	r5
    128e:	0002      	movs	r2, r0
    1290:	000b      	movs	r3, r1
    1292:	0030      	movs	r0, r6
    1294:	0039      	movs	r1, r7
    1296:	4e1f      	ldr	r6, [pc, #124]	; (1314 <updateGround+0xd8>)
    1298:	47b0      	blx	r6
    129a:	4f22      	ldr	r7, [pc, #136]	; (1324 <updateGround+0xe8>)
    129c:	47b8      	blx	r7
    offsets.groundTemperatureBuffer = offsets.groundTemperatureBuffer * 0.8 + sample.temperatureCelcus * 0.2;
    129e:	4b16      	ldr	r3, [pc, #88]	; (12f8 <updateGround+0xbc>)
#include <altimeter.h>

void updateGround(Altimeter *my_altimeter) {

    offsets.gravityOffsetBuffer = offsets.gravityOffsetBuffer * 0.8 + sample.accelZ * 0.2;
    offsets.groundOffsetBuffer = offsets.groundOffsetBuffer * 0.5 + altitude * 0.5;
    12a0:	61e0      	str	r0, [r4, #28]
    offsets.groundTemperatureBuffer = offsets.groundTemperatureBuffer * 0.8 + sample.temperatureCelcus * 0.2;
    12a2:	6bde      	ldr	r6, [r3, #60]	; 0x3c
    12a4:	6a60      	ldr	r0, [r4, #36]	; 0x24
    12a6:	4b1c      	ldr	r3, [pc, #112]	; (1318 <updateGround+0xdc>)
    12a8:	4798      	blx	r3
    12aa:	4a16      	ldr	r2, [pc, #88]	; (1304 <updateGround+0xc8>)
    12ac:	4b16      	ldr	r3, [pc, #88]	; (1308 <updateGround+0xcc>)
    12ae:	47a8      	blx	r5
    12b0:	4b19      	ldr	r3, [pc, #100]	; (1318 <updateGround+0xdc>)
    12b2:	9000      	str	r0, [sp, #0]
    12b4:	9101      	str	r1, [sp, #4]
    12b6:	0030      	movs	r0, r6
    12b8:	4798      	blx	r3
    12ba:	4a12      	ldr	r2, [pc, #72]	; (1304 <updateGround+0xc8>)
    12bc:	4b14      	ldr	r3, [pc, #80]	; (1310 <updateGround+0xd4>)
    12be:	47a8      	blx	r5
    12c0:	000b      	movs	r3, r1
    12c2:	0002      	movs	r2, r0
    12c4:	9800      	ldr	r0, [sp, #0]
    12c6:	9901      	ldr	r1, [sp, #4]
    12c8:	4d12      	ldr	r5, [pc, #72]	; (1314 <updateGround+0xd8>)
    12ca:	47a8      	blx	r5
    12cc:	47b8      	blx	r7

    if ((millis() - offsets.offsetBufferTime) > 2000) {
    12ce:	4d16      	ldr	r5, [pc, #88]	; (1328 <updateGround+0xec>)

void updateGround(Altimeter *my_altimeter) {

    offsets.gravityOffsetBuffer = offsets.gravityOffsetBuffer * 0.8 + sample.accelZ * 0.2;
    offsets.groundOffsetBuffer = offsets.groundOffsetBuffer * 0.5 + altitude * 0.5;
    offsets.groundTemperatureBuffer = offsets.groundTemperatureBuffer * 0.8 + sample.temperatureCelcus * 0.2;
    12d0:	6260      	str	r0, [r4, #36]	; 0x24

    if ((millis() - offsets.offsetBufferTime) > 2000) {
    12d2:	47a8      	blx	r5
    12d4:	6823      	ldr	r3, [r4, #0]
    12d6:	1ac0      	subs	r0, r0, r3
    12d8:	23fa      	movs	r3, #250	; 0xfa
    12da:	00db      	lsls	r3, r3, #3
    12dc:	4298      	cmp	r0, r3
    12de:	d909      	bls.n	12f4 <updateGround+0xb8>
        //recursive filter
        offsets.groundOffset = offsets.groundOffsetBuffer;
    12e0:	69e3      	ldr	r3, [r4, #28]
    12e2:	61a3      	str	r3, [r4, #24]
        offsets.groundTemperature = offsets.groundTemperatureBuffer;
    12e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
    12e6:	6223      	str	r3, [r4, #32]
        offsets.gravityOffset = offsets.gravityOffsetBuffer;
    12e8:	6922      	ldr	r2, [r4, #16]
    12ea:	6963      	ldr	r3, [r4, #20]
    12ec:	60a2      	str	r2, [r4, #8]
    12ee:	60e3      	str	r3, [r4, #12]
        offsets.offsetBufferTime = millis();
    12f0:	47a8      	blx	r5
    12f2:	6020      	str	r0, [r4, #0]
    }
}
    12f4:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    12f6:	46c0      	nop			; (mov r8, r8)
    12f8:	200007a0 	.word	0x200007a0
    12fc:	200004d0 	.word	0x200004d0
    1300:	000051d9 	.word	0x000051d9
    1304:	9999999a 	.word	0x9999999a
    1308:	3fe99999 	.word	0x3fe99999
    130c:	00005f15 	.word	0x00005f15
    1310:	3fc99999 	.word	0x3fc99999
    1314:	00004339 	.word	0x00004339
    1318:	00005ea5 	.word	0x00005ea5
    131c:	3fe00000 	.word	0x3fe00000
    1320:	20000670 	.word	0x20000670
    1324:	00003b95 	.word	0x00003b95
    1328:	00000f45 	.word	0x00000f45

0000132c <computeKalmanGains>:
    dt = 0.005;

    /*
     Fill in state transition matrix and its transpose
    */
    phi[0][1]    = dt;
    132c:	4bdc      	ldr	r3, [pc, #880]	; (16a0 <computeKalmanGains+0x374>)
    132e:	48dd      	ldr	r0, [pc, #884]	; (16a4 <computeKalmanGains+0x378>)
    1330:	49dd      	ldr	r1, [pc, #884]	; (16a8 <computeKalmanGains+0x37c>)

double altitude_variance = ALTITUDESIGMA*ALTITUDESIGMA;
double acceleration_variance = ACCELERATIONSIGMA*ACCELERATIONSIGMA;
double model_variance  = MODELSIGMA*MODELSIGMA;

void computeKalmanGains() {
    1332:	b5f0      	push	{r4, r5, r6, r7, lr}
    dt = 0.005;

    /*
     Fill in state transition matrix and its transpose
    */
    phi[0][1]    = dt;
    1334:	6098      	str	r0, [r3, #8]
    1336:	60d9      	str	r1, [r3, #12]
    phi[1][2]    = dt;
    1338:	6298      	str	r0, [r3, #40]	; 0x28
    133a:	62d9      	str	r1, [r3, #44]	; 0x2c
    phi[0][2]    = dt*dt/2.0;
    133c:	48db      	ldr	r0, [pc, #876]	; (16ac <computeKalmanGains+0x380>)
    133e:	49dc      	ldr	r1, [pc, #880]	; (16b0 <computeKalmanGains+0x384>)
    1340:	2200      	movs	r2, #0
    1342:	6118      	str	r0, [r3, #16]
    1344:	6159      	str	r1, [r3, #20]


    for( i = 0; i <= 2; i++)
        for( j = 0; j <=1; j++) {
            lastkgain[i][j] = .001;
            kgain[i][j] = 1.0;
    1346:	2000      	movs	r0, #0
    1348:	49da      	ldr	r1, [pc, #872]	; (16b4 <computeKalmanGains+0x388>)



    for( i = 0; i <= 2; i++)
        for( j = 0; j <=1; j++) {
            lastkgain[i][j] = .001;
    134a:	4cdb      	ldr	r4, [pc, #876]	; (16b8 <computeKalmanGains+0x38c>)
    134c:	468c      	mov	ip, r1
    134e:	4ddb      	ldr	r5, [pc, #876]	; (16bc <computeKalmanGains+0x390>)
            kgain[i][j] = 1.0;
    1350:	49db      	ldr	r1, [pc, #876]	; (16c0 <computeKalmanGains+0x394>)

double altitude_variance = ALTITUDESIGMA*ALTITUDESIGMA;
double acceleration_variance = ACCELERATIONSIGMA*ACCELERATIONSIGMA;
double model_variance  = MODELSIGMA*MODELSIGMA;

void computeKalmanGains() {
    1352:	b0cd      	sub	sp, #308	; 0x134
    1354:	ae40      	add	r6, sp, #256	; 0x100
    1356:	1997      	adds	r7, r2, r6
    1358:	4666      	mov	r6, ip
    135a:	1996      	adds	r6, r2, r6
    135c:	3210      	adds	r2, #16



    for( i = 0; i <= 2; i++)
        for( j = 0; j <=1; j++) {
            lastkgain[i][j] = .001;
    135e:	603c      	str	r4, [r7, #0]
    1360:	607d      	str	r5, [r7, #4]
            kgain[i][j] = 1.0;
    1362:	6030      	str	r0, [r6, #0]
    1364:	6071      	str	r1, [r6, #4]



    for( i = 0; i <= 2; i++)
        for( j = 0; j <=1; j++) {
            lastkgain[i][j] = .001;
    1366:	60bc      	str	r4, [r7, #8]
    1368:	60fd      	str	r5, [r7, #12]
            kgain[i][j] = 1.0;
    136a:	60b0      	str	r0, [r6, #8]
    136c:	60f1      	str	r1, [r6, #12]
    phit[2][1]    = dt;
    phit[2][0]    = dt*dt/2.0;



    for( i = 0; i <= 2; i++)
    136e:	2a30      	cmp	r2, #48	; 0x30
    1370:	d1f0      	bne.n	1354 <computeKalmanGains+0x28>

    /* Compute the Kalman gain matrix. */
    while(1) {
        /* Propagate state covariance */

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
    1372:	6819      	ldr	r1, [r3, #0]
    1374:	685a      	ldr	r2, [r3, #4]
    1376:	911a      	str	r1, [sp, #104]	; 0x68
    1378:	921b      	str	r2, [sp, #108]	; 0x6c
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
    137a:	6999      	ldr	r1, [r3, #24]
    137c:	69da      	ldr	r2, [r3, #28]
    137e:	911c      	str	r1, [sp, #112]	; 0x70
    1380:	921d      	str	r2, [sp, #116]	; 0x74
    1382:	6a19      	ldr	r1, [r3, #32]
    1384:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    1386:	911e      	str	r1, [sp, #120]	; 0x78
    1388:	921f      	str	r2, [sp, #124]	; 0x7c
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
    138a:	6b19      	ldr	r1, [r3, #48]	; 0x30
    138c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    138e:	9120      	str	r1, [sp, #128]	; 0x80
    1390:	9221      	str	r2, [sp, #132]	; 0x84
    1392:	6b99      	ldr	r1, [r3, #56]	; 0x38
    1394:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    1396:	9122      	str	r1, [sp, #136]	; 0x88
    1398:	9223      	str	r2, [sp, #140]	; 0x8c
    139a:	6c19      	ldr	r1, [r3, #64]	; 0x40
    139c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    139e:	9124      	str	r1, [sp, #144]	; 0x90
    13a0:	9225      	str	r2, [sp, #148]	; 0x94
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
        pestp[2][1] = term[2][0] * phit[0][1] + term[2][1] * phit[1][1] + term[2][2] * phit[2][1];
        pestp[2][2] = term[2][0] * phit[0][2] + term[2][1] * phit[1][2] + term[2][2] * phit[2][2];

        pestp[2][2] = pestp[2][2] + model_variance;
    13a2:	6c99      	ldr	r1, [r3, #72]	; 0x48
    13a4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    13a6:	913a      	str	r1, [sp, #232]	; 0xe8
    13a8:	923b      	str	r2, [sp, #236]	; 0xec
        /*
          Calculate Kalman Gain
        */
        det = (pestp[0][0]+altitude_variance)*(pestp[2][2] + acceleration_variance) - pestp[2][0] * pestp[0][2];
    13aa:	6d19      	ldr	r1, [r3, #80]	; 0x50
    13ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    13ae:	6ddc      	ldr	r4, [r3, #92]	; 0x5c
    13b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    13b2:	933e      	str	r3, [sp, #248]	; 0xf8
    13b4:	943f      	str	r4, [sp, #252]	; 0xfc
    13b6:	2300      	movs	r3, #0
    13b8:	4cc2      	ldr	r4, [pc, #776]	; (16c4 <computeKalmanGains+0x398>)
    13ba:	913c      	str	r1, [sp, #240]	; 0xf0
    13bc:	923d      	str	r2, [sp, #244]	; 0xf4
    13be:	9302      	str	r3, [sp, #8]
    13c0:	9403      	str	r4, [sp, #12]
    13c2:	2300      	movs	r3, #0
    13c4:	2400      	movs	r4, #0
    13c6:	9310      	str	r3, [sp, #64]	; 0x40
    13c8:	9411      	str	r4, [sp, #68]	; 0x44
    13ca:	9300      	str	r3, [sp, #0]
    13cc:	9401      	str	r4, [sp, #4]
    13ce:	9304      	str	r3, [sp, #16]
    13d0:	9405      	str	r4, [sp, #20]
    13d2:	2300      	movs	r3, #0
    13d4:	4cbb      	ldr	r4, [pc, #748]	; (16c4 <computeKalmanGains+0x398>)
    13d6:	930e      	str	r3, [sp, #56]	; 0x38
    13d8:	940f      	str	r4, [sp, #60]	; 0x3c
    13da:	2300      	movs	r3, #0
    13dc:	2400      	movs	r4, #0
    13de:	9308      	str	r3, [sp, #32]
    13e0:	9409      	str	r4, [sp, #36]	; 0x24
    13e2:	930c      	str	r3, [sp, #48]	; 0x30
    13e4:	940d      	str	r4, [sp, #52]	; 0x34
    13e6:	930a      	str	r3, [sp, #40]	; 0x28
    13e8:	940b      	str	r4, [sp, #44]	; 0x2c
    13ea:	2480      	movs	r4, #128	; 0x80
    13ec:	2300      	movs	r3, #0
    13ee:	05e4      	lsls	r4, r4, #23
    13f0:	9306      	str	r3, [sp, #24]
    13f2:	9407      	str	r4, [sp, #28]
    13f4:	2300      	movs	r3, #0
    13f6:	9338      	str	r3, [sp, #224]	; 0xe0

    /* Compute the Kalman gain matrix. */
    while(1) {
        /* Propagate state covariance */

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
    13f8:	4db3      	ldr	r5, [pc, #716]	; (16c8 <computeKalmanGains+0x39c>)
    13fa:	9a06      	ldr	r2, [sp, #24]
    13fc:	9b07      	ldr	r3, [sp, #28]
    13fe:	981a      	ldr	r0, [sp, #104]	; 0x68
    1400:	991b      	ldr	r1, [sp, #108]	; 0x6c
    1402:	47a8      	blx	r5
    1404:	4aa7      	ldr	r2, [pc, #668]	; (16a4 <computeKalmanGains+0x378>)
    1406:	0006      	movs	r6, r0
    1408:	000f      	movs	r7, r1
    140a:	9808      	ldr	r0, [sp, #32]
    140c:	9909      	ldr	r1, [sp, #36]	; 0x24
    140e:	4ba6      	ldr	r3, [pc, #664]	; (16a8 <computeKalmanGains+0x37c>)
    1410:	47a8      	blx	r5
    1412:	4cae      	ldr	r4, [pc, #696]	; (16cc <computeKalmanGains+0x3a0>)
    1414:	0002      	movs	r2, r0
    1416:	000b      	movs	r3, r1
    1418:	0030      	movs	r0, r6
    141a:	0039      	movs	r1, r7
    141c:	47a0      	blx	r4
    141e:	4aa3      	ldr	r2, [pc, #652]	; (16ac <computeKalmanGains+0x380>)
    1420:	0006      	movs	r6, r0
    1422:	000f      	movs	r7, r1
    1424:	9800      	ldr	r0, [sp, #0]
    1426:	9901      	ldr	r1, [sp, #4]
    1428:	4ba1      	ldr	r3, [pc, #644]	; (16b0 <computeKalmanGains+0x384>)
    142a:	47a8      	blx	r5
    142c:	0002      	movs	r2, r0
    142e:	000b      	movs	r3, r1
    1430:	0030      	movs	r0, r6
    1432:	0039      	movs	r1, r7
    1434:	47a0      	blx	r4
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
    1436:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    1438:	9b0b      	ldr	r3, [sp, #44]	; 0x2c

    /* Compute the Kalman gain matrix. */
    while(1) {
        /* Propagate state covariance */

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
    143a:	9016      	str	r0, [sp, #88]	; 0x58
    143c:	9117      	str	r1, [sp, #92]	; 0x5c
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
    143e:	981a      	ldr	r0, [sp, #104]	; 0x68
    1440:	991b      	ldr	r1, [sp, #108]	; 0x6c
    1442:	47a8      	blx	r5
    1444:	4a97      	ldr	r2, [pc, #604]	; (16a4 <computeKalmanGains+0x378>)
    1446:	0006      	movs	r6, r0
    1448:	000f      	movs	r7, r1
    144a:	980e      	ldr	r0, [sp, #56]	; 0x38
    144c:	990f      	ldr	r1, [sp, #60]	; 0x3c
    144e:	4b96      	ldr	r3, [pc, #600]	; (16a8 <computeKalmanGains+0x37c>)
    1450:	47a8      	blx	r5
    1452:	0002      	movs	r2, r0
    1454:	000b      	movs	r3, r1
    1456:	0030      	movs	r0, r6
    1458:	0039      	movs	r1, r7
    145a:	47a0      	blx	r4
    145c:	4a93      	ldr	r2, [pc, #588]	; (16ac <computeKalmanGains+0x380>)
    145e:	0006      	movs	r6, r0
    1460:	000f      	movs	r7, r1
    1462:	9810      	ldr	r0, [sp, #64]	; 0x40
    1464:	9911      	ldr	r1, [sp, #68]	; 0x44
    1466:	4b92      	ldr	r3, [pc, #584]	; (16b0 <computeKalmanGains+0x384>)
    1468:	47a8      	blx	r5
    146a:	0002      	movs	r2, r0
    146c:	000b      	movs	r3, r1
    146e:	0030      	movs	r0, r6
    1470:	0039      	movs	r1, r7
    1472:	47a0      	blx	r4
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
    1474:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1476:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    /* Compute the Kalman gain matrix. */
    while(1) {
        /* Propagate state covariance */

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
    1478:	9012      	str	r0, [sp, #72]	; 0x48
    147a:	9113      	str	r1, [sp, #76]	; 0x4c
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
    147c:	981a      	ldr	r0, [sp, #104]	; 0x68
    147e:	991b      	ldr	r1, [sp, #108]	; 0x6c
    1480:	47a8      	blx	r5
    1482:	4a88      	ldr	r2, [pc, #544]	; (16a4 <computeKalmanGains+0x378>)
    1484:	0006      	movs	r6, r0
    1486:	000f      	movs	r7, r1
    1488:	9804      	ldr	r0, [sp, #16]
    148a:	9905      	ldr	r1, [sp, #20]
    148c:	4b86      	ldr	r3, [pc, #536]	; (16a8 <computeKalmanGains+0x37c>)
    148e:	47a8      	blx	r5
    1490:	0002      	movs	r2, r0
    1492:	000b      	movs	r3, r1
    1494:	0030      	movs	r0, r6
    1496:	0039      	movs	r1, r7
    1498:	47a0      	blx	r4
    149a:	4a84      	ldr	r2, [pc, #528]	; (16ac <computeKalmanGains+0x380>)
    149c:	0006      	movs	r6, r0
    149e:	000f      	movs	r7, r1
    14a0:	9802      	ldr	r0, [sp, #8]
    14a2:	9903      	ldr	r1, [sp, #12]
    14a4:	4b82      	ldr	r3, [pc, #520]	; (16b0 <computeKalmanGains+0x384>)
    14a6:	47a8      	blx	r5
    14a8:	0002      	movs	r2, r0
    14aa:	000b      	movs	r3, r1
    14ac:	0030      	movs	r0, r6
    14ae:	0039      	movs	r1, r7
    14b0:	47a0      	blx	r4
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
    14b2:	9a06      	ldr	r2, [sp, #24]
    14b4:	9b07      	ldr	r3, [sp, #28]
    while(1) {
        /* Propagate state covariance */

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
    14b6:	9014      	str	r0, [sp, #80]	; 0x50
    14b8:	9115      	str	r1, [sp, #84]	; 0x54
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
    14ba:	981c      	ldr	r0, [sp, #112]	; 0x70
    14bc:	991d      	ldr	r1, [sp, #116]	; 0x74
    14be:	47a8      	blx	r5
    14c0:	9a08      	ldr	r2, [sp, #32]
    14c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    14c4:	0006      	movs	r6, r0
    14c6:	000f      	movs	r7, r1
    14c8:	981e      	ldr	r0, [sp, #120]	; 0x78
    14ca:	991f      	ldr	r1, [sp, #124]	; 0x7c
    14cc:	47a8      	blx	r5
    14ce:	0002      	movs	r2, r0
    14d0:	000b      	movs	r3, r1
    14d2:	0030      	movs	r0, r6
    14d4:	0039      	movs	r1, r7
    14d6:	47a0      	blx	r4
    14d8:	4a72      	ldr	r2, [pc, #456]	; (16a4 <computeKalmanGains+0x378>)
    14da:	0006      	movs	r6, r0
    14dc:	000f      	movs	r7, r1
    14de:	9800      	ldr	r0, [sp, #0]
    14e0:	9901      	ldr	r1, [sp, #4]
    14e2:	4b71      	ldr	r3, [pc, #452]	; (16a8 <computeKalmanGains+0x37c>)
    14e4:	47a8      	blx	r5
    14e6:	0002      	movs	r2, r0
    14e8:	000b      	movs	r3, r1
    14ea:	0030      	movs	r0, r6
    14ec:	0039      	movs	r1, r7
    14ee:	47a0      	blx	r4
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
    14f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    14f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
        /* Propagate state covariance */

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
    14f4:	9018      	str	r0, [sp, #96]	; 0x60
    14f6:	9119      	str	r1, [sp, #100]	; 0x64
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
    14f8:	981c      	ldr	r0, [sp, #112]	; 0x70
    14fa:	991d      	ldr	r1, [sp, #116]	; 0x74
    14fc:	47a8      	blx	r5
    14fe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    1500:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1502:	0006      	movs	r6, r0
    1504:	000f      	movs	r7, r1
    1506:	981e      	ldr	r0, [sp, #120]	; 0x78
    1508:	991f      	ldr	r1, [sp, #124]	; 0x7c
    150a:	47a8      	blx	r5
    150c:	0002      	movs	r2, r0
    150e:	000b      	movs	r3, r1
    1510:	0030      	movs	r0, r6
    1512:	0039      	movs	r1, r7
    1514:	47a0      	blx	r4
    1516:	4a63      	ldr	r2, [pc, #396]	; (16a4 <computeKalmanGains+0x378>)
    1518:	0006      	movs	r6, r0
    151a:	000f      	movs	r7, r1
    151c:	9810      	ldr	r0, [sp, #64]	; 0x40
    151e:	9911      	ldr	r1, [sp, #68]	; 0x44
    1520:	4b61      	ldr	r3, [pc, #388]	; (16a8 <computeKalmanGains+0x37c>)
    1522:	47a8      	blx	r5
    1524:	0002      	movs	r2, r0
    1526:	000b      	movs	r3, r1
    1528:	0030      	movs	r0, r6
    152a:	0039      	movs	r1, r7
    152c:	47a0      	blx	r4
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
    152e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1530:	9b0d      	ldr	r3, [sp, #52]	; 0x34

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
    1532:	9026      	str	r0, [sp, #152]	; 0x98
    1534:	9127      	str	r1, [sp, #156]	; 0x9c
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
    1536:	981c      	ldr	r0, [sp, #112]	; 0x70
    1538:	991d      	ldr	r1, [sp, #116]	; 0x74
    153a:	47a8      	blx	r5
    153c:	9a04      	ldr	r2, [sp, #16]
    153e:	9b05      	ldr	r3, [sp, #20]
    1540:	0006      	movs	r6, r0
    1542:	000f      	movs	r7, r1
    1544:	981e      	ldr	r0, [sp, #120]	; 0x78
    1546:	991f      	ldr	r1, [sp, #124]	; 0x7c
    1548:	47a8      	blx	r5
    154a:	0002      	movs	r2, r0
    154c:	000b      	movs	r3, r1
    154e:	0030      	movs	r0, r6
    1550:	0039      	movs	r1, r7
    1552:	47a0      	blx	r4
    1554:	4a53      	ldr	r2, [pc, #332]	; (16a4 <computeKalmanGains+0x378>)
    1556:	0006      	movs	r6, r0
    1558:	000f      	movs	r7, r1
    155a:	9802      	ldr	r0, [sp, #8]
    155c:	9903      	ldr	r1, [sp, #12]
    155e:	4b52      	ldr	r3, [pc, #328]	; (16a8 <computeKalmanGains+0x37c>)
    1560:	47a8      	blx	r5
    1562:	0002      	movs	r2, r0
    1564:	000b      	movs	r3, r1
    1566:	0030      	movs	r0, r6
    1568:	0039      	movs	r1, r7
    156a:	47a0      	blx	r4
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
    156c:	9a06      	ldr	r2, [sp, #24]
    156e:	9b07      	ldr	r3, [sp, #28]
        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
    1570:	9028      	str	r0, [sp, #160]	; 0xa0
    1572:	9129      	str	r1, [sp, #164]	; 0xa4
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
    1574:	9820      	ldr	r0, [sp, #128]	; 0x80
    1576:	9921      	ldr	r1, [sp, #132]	; 0x84
    1578:	47a8      	blx	r5
    157a:	9a08      	ldr	r2, [sp, #32]
    157c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    157e:	0006      	movs	r6, r0
    1580:	000f      	movs	r7, r1
    1582:	9822      	ldr	r0, [sp, #136]	; 0x88
    1584:	9923      	ldr	r1, [sp, #140]	; 0x8c
    1586:	47a8      	blx	r5
    1588:	0002      	movs	r2, r0
    158a:	000b      	movs	r3, r1
    158c:	0030      	movs	r0, r6
    158e:	0039      	movs	r1, r7
    1590:	47a0      	blx	r4
    1592:	9a00      	ldr	r2, [sp, #0]
    1594:	9b01      	ldr	r3, [sp, #4]
    1596:	0006      	movs	r6, r0
    1598:	000f      	movs	r7, r1
    159a:	9824      	ldr	r0, [sp, #144]	; 0x90
    159c:	9925      	ldr	r1, [sp, #148]	; 0x94
    159e:	47a8      	blx	r5
    15a0:	0002      	movs	r2, r0
    15a2:	000b      	movs	r3, r1
    15a4:	0030      	movs	r0, r6
    15a6:	0039      	movs	r1, r7
    15a8:	47a0      	blx	r4
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
    15aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    15ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
    15ae:	902e      	str	r0, [sp, #184]	; 0xb8
    15b0:	912f      	str	r1, [sp, #188]	; 0xbc
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
    15b2:	9820      	ldr	r0, [sp, #128]	; 0x80
    15b4:	9921      	ldr	r1, [sp, #132]	; 0x84
    15b6:	47a8      	blx	r5
    15b8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    15ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    15bc:	0006      	movs	r6, r0
    15be:	000f      	movs	r7, r1
    15c0:	9822      	ldr	r0, [sp, #136]	; 0x88
    15c2:	9923      	ldr	r1, [sp, #140]	; 0x8c
    15c4:	47a8      	blx	r5
    15c6:	0002      	movs	r2, r0
    15c8:	000b      	movs	r3, r1
    15ca:	0030      	movs	r0, r6
    15cc:	0039      	movs	r1, r7
    15ce:	47a0      	blx	r4
    15d0:	9a10      	ldr	r2, [sp, #64]	; 0x40
    15d2:	9b11      	ldr	r3, [sp, #68]	; 0x44
    15d4:	0006      	movs	r6, r0
    15d6:	000f      	movs	r7, r1
    15d8:	9824      	ldr	r0, [sp, #144]	; 0x90
    15da:	9925      	ldr	r1, [sp, #148]	; 0x94
    15dc:	47a8      	blx	r5
    15de:	0002      	movs	r2, r0
    15e0:	000b      	movs	r3, r1
    15e2:	0030      	movs	r0, r6
    15e4:	0039      	movs	r1, r7
    15e6:	47a0      	blx	r4
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];
    15e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    15ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
    15ec:	9006      	str	r0, [sp, #24]
    15ee:	9107      	str	r1, [sp, #28]
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];
    15f0:	9820      	ldr	r0, [sp, #128]	; 0x80
    15f2:	9921      	ldr	r1, [sp, #132]	; 0x84
    15f4:	47a8      	blx	r5
    15f6:	9a04      	ldr	r2, [sp, #16]
    15f8:	9b05      	ldr	r3, [sp, #20]
    15fa:	0006      	movs	r6, r0
    15fc:	000f      	movs	r7, r1
    15fe:	9822      	ldr	r0, [sp, #136]	; 0x88
    1600:	9923      	ldr	r1, [sp, #140]	; 0x8c
    1602:	47a8      	blx	r5
    1604:	0002      	movs	r2, r0
    1606:	000b      	movs	r3, r1
    1608:	0030      	movs	r0, r6
    160a:	0039      	movs	r1, r7
    160c:	47a0      	blx	r4
    160e:	9a02      	ldr	r2, [sp, #8]
    1610:	9b03      	ldr	r3, [sp, #12]
    1612:	0006      	movs	r6, r0
    1614:	000f      	movs	r7, r1
    1616:	9824      	ldr	r0, [sp, #144]	; 0x90
    1618:	9925      	ldr	r1, [sp, #148]	; 0x94
    161a:	47a8      	blx	r5
    161c:	0002      	movs	r2, r0
    161e:	000b      	movs	r3, r1
    1620:	0030      	movs	r0, r6
    1622:	0039      	movs	r1, r7
    1624:	47a0      	blx	r4

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
    1626:	4a1f      	ldr	r2, [pc, #124]	; (16a4 <computeKalmanGains+0x378>)
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];
    1628:	9002      	str	r0, [sp, #8]
    162a:	9103      	str	r1, [sp, #12]

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
    162c:	9812      	ldr	r0, [sp, #72]	; 0x48
    162e:	9913      	ldr	r1, [sp, #76]	; 0x4c
    1630:	4b1d      	ldr	r3, [pc, #116]	; (16a8 <computeKalmanGains+0x37c>)
    1632:	47a8      	blx	r5
    1634:	9a16      	ldr	r2, [sp, #88]	; 0x58
    1636:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    1638:	47a0      	blx	r4
    163a:	4a1c      	ldr	r2, [pc, #112]	; (16ac <computeKalmanGains+0x380>)
    163c:	0006      	movs	r6, r0
    163e:	000f      	movs	r7, r1
    1640:	9814      	ldr	r0, [sp, #80]	; 0x50
    1642:	9915      	ldr	r1, [sp, #84]	; 0x54
    1644:	4b1a      	ldr	r3, [pc, #104]	; (16b0 <computeKalmanGains+0x384>)
    1646:	47a8      	blx	r5
    1648:	0002      	movs	r2, r0
    164a:	000b      	movs	r3, r1
    164c:	0030      	movs	r0, r6
    164e:	0039      	movs	r1, r7
    1650:	47a0      	blx	r4
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
    1652:	2200      	movs	r2, #0
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
    1654:	9008      	str	r0, [sp, #32]
    1656:	9109      	str	r1, [sp, #36]	; 0x24
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
    1658:	9816      	ldr	r0, [sp, #88]	; 0x58
    165a:	9917      	ldr	r1, [sp, #92]	; 0x5c
    165c:	2300      	movs	r3, #0
    165e:	47a8      	blx	r5
    1660:	0006      	movs	r6, r0
    1662:	000f      	movs	r7, r1
    1664:	0002      	movs	r2, r0
    1666:	000b      	movs	r3, r1
    1668:	9812      	ldr	r0, [sp, #72]	; 0x48
    166a:	9913      	ldr	r1, [sp, #76]	; 0x4c
    166c:	47a0      	blx	r4
    166e:	4a0d      	ldr	r2, [pc, #52]	; (16a4 <computeKalmanGains+0x378>)
    1670:	9000      	str	r0, [sp, #0]
    1672:	9101      	str	r1, [sp, #4]
    1674:	9814      	ldr	r0, [sp, #80]	; 0x50
    1676:	9915      	ldr	r1, [sp, #84]	; 0x54
    1678:	4b0b      	ldr	r3, [pc, #44]	; (16a8 <computeKalmanGains+0x37c>)
    167a:	47a8      	blx	r5
    167c:	0002      	movs	r2, r0
    167e:	000b      	movs	r3, r1
    1680:	9800      	ldr	r0, [sp, #0]
    1682:	9901      	ldr	r1, [sp, #4]
    1684:	47a0      	blx	r4
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
    1686:	2200      	movs	r2, #0
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
    1688:	9030      	str	r0, [sp, #192]	; 0xc0
    168a:	9131      	str	r1, [sp, #196]	; 0xc4
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
    168c:	9812      	ldr	r0, [sp, #72]	; 0x48
    168e:	9913      	ldr	r1, [sp, #76]	; 0x4c
    1690:	2300      	movs	r3, #0
    1692:	47a8      	blx	r5
    1694:	0032      	movs	r2, r6
    1696:	003b      	movs	r3, r7
    1698:	47a0      	blx	r4
    169a:	9a14      	ldr	r2, [sp, #80]	; 0x50
    169c:	9b15      	ldr	r3, [sp, #84]	; 0x54
    169e:	e017      	b.n	16d0 <computeKalmanGains+0x3a4>
    16a0:	20000010 	.word	0x20000010
    16a4:	47ae147b 	.word	0x47ae147b
    16a8:	3f747ae1 	.word	0x3f747ae1
    16ac:	eb1c432d 	.word	0xeb1c432d
    16b0:	3eea36e2 	.word	0x3eea36e2
    16b4:	20000628 	.word	0x20000628
    16b8:	d2f1a9fc 	.word	0xd2f1a9fc
    16bc:	3f50624d 	.word	0x3f50624d
    16c0:	3ff00000 	.word	0x3ff00000
    16c4:	40220000 	.word	0x40220000
    16c8:	000051d9 	.word	0x000051d9
    16cc:	00004339 	.word	0x00004339
    16d0:	47a0      	blx	r4
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
    16d2:	4ad9      	ldr	r2, [pc, #868]	; (1a38 <computeKalmanGains+0x70c>)
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
    16d4:	9112      	str	r1, [sp, #72]	; 0x48
    16d6:	9004      	str	r0, [sp, #16]
    16d8:	9116      	str	r1, [sp, #88]	; 0x58
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
    16da:	4bd8      	ldr	r3, [pc, #864]	; (1a3c <computeKalmanGains+0x710>)
    16dc:	9826      	ldr	r0, [sp, #152]	; 0x98
    16de:	9927      	ldr	r1, [sp, #156]	; 0x9c
    16e0:	47a8      	blx	r5
    16e2:	9a18      	ldr	r2, [sp, #96]	; 0x60
    16e4:	9b19      	ldr	r3, [sp, #100]	; 0x64
    16e6:	47a0      	blx	r4
    16e8:	4ad5      	ldr	r2, [pc, #852]	; (1a40 <computeKalmanGains+0x714>)
    16ea:	0006      	movs	r6, r0
    16ec:	000f      	movs	r7, r1
    16ee:	9828      	ldr	r0, [sp, #160]	; 0xa0
    16f0:	9929      	ldr	r1, [sp, #164]	; 0xa4
    16f2:	4bd4      	ldr	r3, [pc, #848]	; (1a44 <computeKalmanGains+0x718>)
    16f4:	47a8      	blx	r5
    16f6:	0002      	movs	r2, r0
    16f8:	000b      	movs	r3, r1
    16fa:	0030      	movs	r0, r6
    16fc:	0039      	movs	r1, r7
    16fe:	47a0      	blx	r4
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
    1700:	2200      	movs	r2, #0
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
    1702:	902a      	str	r0, [sp, #168]	; 0xa8
    1704:	912b      	str	r1, [sp, #172]	; 0xac
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
    1706:	9818      	ldr	r0, [sp, #96]	; 0x60
    1708:	9919      	ldr	r1, [sp, #100]	; 0x64
    170a:	2300      	movs	r3, #0
    170c:	47a8      	blx	r5
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
    170e:	2200      	movs	r2, #0

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
    1710:	9032      	str	r0, [sp, #200]	; 0xc8
    1712:	9133      	str	r1, [sp, #204]	; 0xcc
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
    1714:	9826      	ldr	r0, [sp, #152]	; 0x98
    1716:	9927      	ldr	r1, [sp, #156]	; 0x9c
    1718:	2300      	movs	r3, #0
    171a:	47a8      	blx	r5
    171c:	9a32      	ldr	r2, [sp, #200]	; 0xc8
    171e:	9b33      	ldr	r3, [sp, #204]	; 0xcc
    1720:	47a0      	blx	r4
    1722:	9a28      	ldr	r2, [sp, #160]	; 0xa0
    1724:	9b29      	ldr	r3, [sp, #164]	; 0xa4
    1726:	47a0      	blx	r4
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
    1728:	4ac3      	ldr	r2, [pc, #780]	; (1a38 <computeKalmanGains+0x70c>)
        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
    172a:	902c      	str	r0, [sp, #176]	; 0xb0
    172c:	912d      	str	r1, [sp, #180]	; 0xb4
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
    172e:	9806      	ldr	r0, [sp, #24]
    1730:	9907      	ldr	r1, [sp, #28]
    1732:	4bc2      	ldr	r3, [pc, #776]	; (1a3c <computeKalmanGains+0x710>)
    1734:	47a8      	blx	r5
    1736:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
    1738:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
    173a:	47a0      	blx	r4
    173c:	4ac0      	ldr	r2, [pc, #768]	; (1a40 <computeKalmanGains+0x714>)
    173e:	0006      	movs	r6, r0
    1740:	000f      	movs	r7, r1
    1742:	9802      	ldr	r0, [sp, #8]
    1744:	9903      	ldr	r1, [sp, #12]
    1746:	4bbf      	ldr	r3, [pc, #764]	; (1a44 <computeKalmanGains+0x718>)
    1748:	47a8      	blx	r5
    174a:	0002      	movs	r2, r0
    174c:	000b      	movs	r3, r1
    174e:	0030      	movs	r0, r6
    1750:	0039      	movs	r1, r7
    1752:	47a0      	blx	r4
        pestp[2][1] = term[2][0] * phit[0][1] + term[2][1] * phit[1][1] + term[2][2] * phit[2][1];
    1754:	2200      	movs	r2, #0
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
    1756:	9000      	str	r0, [sp, #0]
    1758:	9101      	str	r1, [sp, #4]
        pestp[2][1] = term[2][0] * phit[0][1] + term[2][1] * phit[1][1] + term[2][2] * phit[2][1];
    175a:	982e      	ldr	r0, [sp, #184]	; 0xb8
    175c:	992f      	ldr	r1, [sp, #188]	; 0xbc
    175e:	2300      	movs	r3, #0
    1760:	47a8      	blx	r5
    1762:	0006      	movs	r6, r0
    1764:	000f      	movs	r7, r1
    1766:	0002      	movs	r2, r0
    1768:	000b      	movs	r3, r1
    176a:	9806      	ldr	r0, [sp, #24]
    176c:	9907      	ldr	r1, [sp, #28]
    176e:	47a0      	blx	r4
    1770:	4ab1      	ldr	r2, [pc, #708]	; (1a38 <computeKalmanGains+0x70c>)
    1772:	900a      	str	r0, [sp, #40]	; 0x28
    1774:	910b      	str	r1, [sp, #44]	; 0x2c
    1776:	9802      	ldr	r0, [sp, #8]
    1778:	9903      	ldr	r1, [sp, #12]
    177a:	4bb0      	ldr	r3, [pc, #704]	; (1a3c <computeKalmanGains+0x710>)
    177c:	47a8      	blx	r5
    177e:	0002      	movs	r2, r0
    1780:	000b      	movs	r3, r1
    1782:	980a      	ldr	r0, [sp, #40]	; 0x28
    1784:	990b      	ldr	r1, [sp, #44]	; 0x2c
    1786:	47a0      	blx	r4
        pestp[2][2] = term[2][0] * phit[0][2] + term[2][1] * phit[1][2] + term[2][2] * phit[2][2];

        pestp[2][2] = pestp[2][2] + model_variance;
    1788:	2200      	movs	r2, #0
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
        pestp[2][1] = term[2][0] * phit[0][1] + term[2][1] * phit[1][1] + term[2][2] * phit[2][1];
    178a:	9010      	str	r0, [sp, #64]	; 0x40
    178c:	9111      	str	r1, [sp, #68]	; 0x44
        pestp[2][2] = term[2][0] * phit[0][2] + term[2][1] * phit[1][2] + term[2][2] * phit[2][2];

        pestp[2][2] = pestp[2][2] + model_variance;
    178e:	9806      	ldr	r0, [sp, #24]
    1790:	9907      	ldr	r1, [sp, #28]
    1792:	2300      	movs	r3, #0
    1794:	47a8      	blx	r5
    1796:	0032      	movs	r2, r6
    1798:	003b      	movs	r3, r7
    179a:	47a0      	blx	r4
    179c:	9a02      	ldr	r2, [sp, #8]
    179e:	9b03      	ldr	r3, [sp, #12]
    17a0:	47a0      	blx	r4
    17a2:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
    17a4:	9b3b      	ldr	r3, [sp, #236]	; 0xec
    17a6:	47a0      	blx	r4
        /*
          Calculate Kalman Gain
        */
        det = (pestp[0][0]+altitude_variance)*(pestp[2][2] + acceleration_variance) - pestp[2][0] * pestp[0][2];
    17a8:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
    17aa:	9b3d      	ldr	r3, [sp, #244]	; 0xf4
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
        pestp[2][1] = term[2][0] * phit[0][1] + term[2][1] * phit[1][1] + term[2][2] * phit[2][1];
        pestp[2][2] = term[2][0] * phit[0][2] + term[2][1] * phit[1][2] + term[2][2] * phit[2][2];

        pestp[2][2] = pestp[2][2] + model_variance;
    17ac:	9002      	str	r0, [sp, #8]
    17ae:	9103      	str	r1, [sp, #12]
        /*
          Calculate Kalman Gain
        */
        det = (pestp[0][0]+altitude_variance)*(pestp[2][2] + acceleration_variance) - pestp[2][0] * pestp[0][2];
    17b0:	9808      	ldr	r0, [sp, #32]
    17b2:	9909      	ldr	r1, [sp, #36]	; 0x24
    17b4:	47a0      	blx	r4
    17b6:	9a3e      	ldr	r2, [sp, #248]	; 0xf8
    17b8:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
    17ba:	900a      	str	r0, [sp, #40]	; 0x28
    17bc:	910b      	str	r1, [sp, #44]	; 0x2c
    17be:	9802      	ldr	r0, [sp, #8]
    17c0:	9903      	ldr	r1, [sp, #12]
    17c2:	47a0      	blx	r4
    17c4:	9a00      	ldr	r2, [sp, #0]
    17c6:	9b01      	ldr	r3, [sp, #4]
    17c8:	900c      	str	r0, [sp, #48]	; 0x30
    17ca:	910d      	str	r1, [sp, #52]	; 0x34
    17cc:	9804      	ldr	r0, [sp, #16]
    17ce:	9916      	ldr	r1, [sp, #88]	; 0x58
    17d0:	47a8      	blx	r5
    17d2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    17d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    17d6:	900e      	str	r0, [sp, #56]	; 0x38
    17d8:	910f      	str	r1, [sp, #60]	; 0x3c
    17da:	980a      	ldr	r0, [sp, #40]	; 0x28
    17dc:	990b      	ldr	r1, [sp, #44]	; 0x2c
    17de:	47a8      	blx	r5
    17e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    17e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    17e4:	4e98      	ldr	r6, [pc, #608]	; (1a48 <computeKalmanGains+0x71c>)
    17e6:	47b0      	blx	r6


        kgain[0][0] = (pestp[0][0] * (pestp[2][2] + acceleration_variance) - pestp[0][2] * pestp[2][0])/det;
    17e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    17ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34

        pestp[2][2] = pestp[2][2] + model_variance;
        /*
          Calculate Kalman Gain
        */
        det = (pestp[0][0]+altitude_variance)*(pestp[2][2] + acceleration_variance) - pestp[2][0] * pestp[0][2];
    17ec:	9006      	str	r0, [sp, #24]
    17ee:	9107      	str	r1, [sp, #28]


        kgain[0][0] = (pestp[0][0] * (pestp[2][2] + acceleration_variance) - pestp[0][2] * pestp[2][0])/det;
    17f0:	9808      	ldr	r0, [sp, #32]
    17f2:	9909      	ldr	r1, [sp, #36]	; 0x24
    17f4:	47a8      	blx	r5
    17f6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    17f8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    17fa:	47b0      	blx	r6
    17fc:	9a06      	ldr	r2, [sp, #24]
    17fe:	9b07      	ldr	r3, [sp, #28]
    1800:	4e92      	ldr	r6, [pc, #584]	; (1a4c <computeKalmanGains+0x720>)
    1802:	47b0      	blx	r6
    1804:	9034      	str	r0, [sp, #208]	; 0xd0
    1806:	9135      	str	r1, [sp, #212]	; 0xd4
    1808:	9a34      	ldr	r2, [sp, #208]	; 0xd0
    180a:	9b35      	ldr	r3, [sp, #212]	; 0xd4
    180c:	4990      	ldr	r1, [pc, #576]	; (1a50 <computeKalmanGains+0x724>)
    180e:	600a      	str	r2, [r1, #0]
    1810:	604b      	str	r3, [r1, #4]

        kgain[0][1] = (pestp[0][0] * (-pestp[0][2]) + pestp[0][2] * (pestp[0][0] + altitude_variance))/det;
    1812:	9808      	ldr	r0, [sp, #32]
    1814:	9909      	ldr	r1, [sp, #36]	; 0x24
    1816:	2280      	movs	r2, #128	; 0x80
    1818:	0612      	lsls	r2, r2, #24
    181a:	4694      	mov	ip, r2
    181c:	9b12      	ldr	r3, [sp, #72]	; 0x48
    181e:	9a04      	ldr	r2, [sp, #16]
    1820:	4463      	add	r3, ip
    1822:	932e      	str	r3, [sp, #184]	; 0xb8
    1824:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    1826:	47a8      	blx	r5
    1828:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    182a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    182c:	0006      	movs	r6, r0
    182e:	000f      	movs	r7, r1
    1830:	9804      	ldr	r0, [sp, #16]
    1832:	9916      	ldr	r1, [sp, #88]	; 0x58
    1834:	47a8      	blx	r5
    1836:	0002      	movs	r2, r0
    1838:	000b      	movs	r3, r1
    183a:	0030      	movs	r0, r6
    183c:	0039      	movs	r1, r7
    183e:	47a0      	blx	r4
    1840:	9a06      	ldr	r2, [sp, #24]
    1842:	9b07      	ldr	r3, [sp, #28]
    1844:	4e81      	ldr	r6, [pc, #516]	; (1a4c <computeKalmanGains+0x720>)
    1846:	47b0      	blx	r6
    1848:	900e      	str	r0, [sp, #56]	; 0x38
    184a:	910f      	str	r1, [sp, #60]	; 0x3c
    184c:	4980      	ldr	r1, [pc, #512]	; (1a50 <computeKalmanGains+0x724>)
    184e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    1850:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1852:	608a      	str	r2, [r1, #8]
    1854:	60cb      	str	r3, [r1, #12]

        kgain[1][0] = (pestp[1][0] * (pestp[2][2] + acceleration_variance) - pestp[1][2] * pestp[2][0])/det;
    1856:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1858:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    185a:	982a      	ldr	r0, [sp, #168]	; 0xa8
    185c:	992b      	ldr	r1, [sp, #172]	; 0xac
    185e:	47a8      	blx	r5
    1860:	9a00      	ldr	r2, [sp, #0]
    1862:	9b01      	ldr	r3, [sp, #4]
    1864:	0006      	movs	r6, r0
    1866:	000f      	movs	r7, r1
    1868:	982c      	ldr	r0, [sp, #176]	; 0xb0
    186a:	992d      	ldr	r1, [sp, #180]	; 0xb4
    186c:	47a8      	blx	r5
    186e:	0002      	movs	r2, r0
    1870:	000b      	movs	r3, r1
    1872:	0030      	movs	r0, r6
    1874:	0039      	movs	r1, r7
    1876:	4e74      	ldr	r6, [pc, #464]	; (1a48 <computeKalmanGains+0x71c>)
    1878:	47b0      	blx	r6
    187a:	9a06      	ldr	r2, [sp, #24]
    187c:	9b07      	ldr	r3, [sp, #28]
    187e:	4e73      	ldr	r6, [pc, #460]	; (1a4c <computeKalmanGains+0x720>)
    1880:	47b0      	blx	r6
    1882:	0002      	movs	r2, r0
    1884:	000b      	movs	r3, r1
    1886:	9139      	str	r1, [sp, #228]	; 0xe4
    1888:	4971      	ldr	r1, [pc, #452]	; (1a50 <computeKalmanGains+0x724>)
    188a:	9018      	str	r0, [sp, #96]	; 0x60
    188c:	610a      	str	r2, [r1, #16]
    188e:	614b      	str	r3, [r1, #20]

        kgain[1][1] = (pestp[1][0] * (-pestp[0][2]) + pestp[1][2] * (pestp[0][0] + altitude_variance))/det;
    1890:	982a      	ldr	r0, [sp, #168]	; 0xa8
    1892:	992b      	ldr	r1, [sp, #172]	; 0xac
    1894:	9a04      	ldr	r2, [sp, #16]
    1896:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    1898:	47a8      	blx	r5
    189a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    189c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    189e:	0006      	movs	r6, r0
    18a0:	000f      	movs	r7, r1
    18a2:	982c      	ldr	r0, [sp, #176]	; 0xb0
    18a4:	992d      	ldr	r1, [sp, #180]	; 0xb4
    18a6:	47a8      	blx	r5
    18a8:	0002      	movs	r2, r0
    18aa:	000b      	movs	r3, r1
    18ac:	0030      	movs	r0, r6
    18ae:	0039      	movs	r1, r7
    18b0:	47a0      	blx	r4
    18b2:	9a06      	ldr	r2, [sp, #24]
    18b4:	9b07      	ldr	r3, [sp, #28]
    18b6:	4e65      	ldr	r6, [pc, #404]	; (1a4c <computeKalmanGains+0x720>)
    18b8:	47b0      	blx	r6
    18ba:	9012      	str	r0, [sp, #72]	; 0x48
    18bc:	9113      	str	r1, [sp, #76]	; 0x4c
    18be:	9a12      	ldr	r2, [sp, #72]	; 0x48
    18c0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    18c2:	4963      	ldr	r1, [pc, #396]	; (1a50 <computeKalmanGains+0x724>)
    18c4:	618a      	str	r2, [r1, #24]
    18c6:	61cb      	str	r3, [r1, #28]

        kgain[2][0] = (pestp[2][0] * (pestp[2][2] + acceleration_variance) - pestp[2][2] * pestp[2][0])/det;
    18c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    18ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    18cc:	9800      	ldr	r0, [sp, #0]
    18ce:	9901      	ldr	r1, [sp, #4]
    18d0:	47a8      	blx	r5
    18d2:	9a02      	ldr	r2, [sp, #8]
    18d4:	9b03      	ldr	r3, [sp, #12]
    18d6:	0006      	movs	r6, r0
    18d8:	000f      	movs	r7, r1
    18da:	9800      	ldr	r0, [sp, #0]
    18dc:	9901      	ldr	r1, [sp, #4]
    18de:	47a8      	blx	r5
    18e0:	0002      	movs	r2, r0
    18e2:	000b      	movs	r3, r1
    18e4:	0030      	movs	r0, r6
    18e6:	0039      	movs	r1, r7
    18e8:	4e57      	ldr	r6, [pc, #348]	; (1a48 <computeKalmanGains+0x71c>)
    18ea:	47b0      	blx	r6
    18ec:	9a06      	ldr	r2, [sp, #24]
    18ee:	9b07      	ldr	r3, [sp, #28]
    18f0:	4e56      	ldr	r6, [pc, #344]	; (1a4c <computeKalmanGains+0x720>)
    18f2:	47b0      	blx	r6
    18f4:	9014      	str	r0, [sp, #80]	; 0x50
    18f6:	9115      	str	r1, [sp, #84]	; 0x54
    18f8:	9a14      	ldr	r2, [sp, #80]	; 0x50
    18fa:	9b15      	ldr	r3, [sp, #84]	; 0x54
    18fc:	4954      	ldr	r1, [pc, #336]	; (1a50 <computeKalmanGains+0x724>)
    18fe:	620a      	str	r2, [r1, #32]
    1900:	624b      	str	r3, [r1, #36]	; 0x24

        kgain[2][1] = (pestp[2][0] * (-pestp[0][2]) + pestp[2][2] * (pestp[0][0] + altitude_variance))/det;
    1902:	9800      	ldr	r0, [sp, #0]
    1904:	9901      	ldr	r1, [sp, #4]
    1906:	9a04      	ldr	r2, [sp, #16]
    1908:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    190a:	47a8      	blx	r5
    190c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    190e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1910:	0006      	movs	r6, r0
    1912:	000f      	movs	r7, r1
    1914:	9802      	ldr	r0, [sp, #8]
    1916:	9903      	ldr	r1, [sp, #12]
    1918:	47a8      	blx	r5
    191a:	0002      	movs	r2, r0
    191c:	000b      	movs	r3, r1
    191e:	0030      	movs	r0, r6
    1920:	0039      	movs	r1, r7
    1922:	47a0      	blx	r4
    1924:	9a06      	ldr	r2, [sp, #24]
    1926:	9b07      	ldr	r3, [sp, #28]
    1928:	4e48      	ldr	r6, [pc, #288]	; (1a4c <computeKalmanGains+0x720>)
    192a:	47b0      	blx	r6
    192c:	9036      	str	r0, [sp, #216]	; 0xd8
    192e:	9137      	str	r1, [sp, #220]	; 0xdc
    1930:	9a36      	ldr	r2, [sp, #216]	; 0xd8
    1932:	9b37      	ldr	r3, [sp, #220]	; 0xdc
    1934:	4946      	ldr	r1, [pc, #280]	; (1a50 <computeKalmanGains+0x724>)

        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
    1936:	4e44      	ldr	r6, [pc, #272]	; (1a48 <computeKalmanGains+0x71c>)

        kgain[1][1] = (pestp[1][0] * (-pestp[0][2]) + pestp[1][2] * (pestp[0][0] + altitude_variance))/det;

        kgain[2][0] = (pestp[2][0] * (pestp[2][2] + acceleration_variance) - pestp[2][2] * pestp[2][0])/det;

        kgain[2][1] = (pestp[2][0] * (-pestp[0][2]) + pestp[2][2] * (pestp[0][0] + altitude_variance))/det;
    1938:	628a      	str	r2, [r1, #40]	; 0x28
    193a:	62cb      	str	r3, [r1, #44]	; 0x2c

        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
    193c:	9a34      	ldr	r2, [sp, #208]	; 0xd0
    193e:	9b35      	ldr	r3, [sp, #212]	; 0xd4
    1940:	2000      	movs	r0, #0
    1942:	4944      	ldr	r1, [pc, #272]	; (1a54 <computeKalmanGains+0x728>)
    1944:	47b0      	blx	r6
    1946:	0002      	movs	r2, r0
    1948:	000b      	movs	r3, r1
    194a:	900c      	str	r0, [sp, #48]	; 0x30
    194c:	910d      	str	r1, [sp, #52]	; 0x34
    194e:	9808      	ldr	r0, [sp, #32]
    1950:	9909      	ldr	r1, [sp, #36]	; 0x24
    1952:	47a8      	blx	r5
    1954:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    1956:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1958:	0006      	movs	r6, r0
    195a:	000f      	movs	r7, r1
    195c:	9800      	ldr	r0, [sp, #0]
    195e:	9901      	ldr	r1, [sp, #4]
    1960:	47a8      	blx	r5
    1962:	0002      	movs	r2, r0
    1964:	000b      	movs	r3, r1
    1966:	0030      	movs	r0, r6
    1968:	0039      	movs	r1, r7
    196a:	4e37      	ldr	r6, [pc, #220]	; (1a48 <computeKalmanGains+0x71c>)
    196c:	47b0      	blx	r6
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
    196e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1970:	9b0d      	ldr	r3, [sp, #52]	; 0x34

        kgain[2][0] = (pestp[2][0] * (pestp[2][2] + acceleration_variance) - pestp[2][2] * pestp[2][0])/det;

        kgain[2][1] = (pestp[2][0] * (-pestp[0][2]) + pestp[2][2] * (pestp[0][0] + altitude_variance))/det;

        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
    1972:	9006      	str	r0, [sp, #24]
    1974:	9107      	str	r1, [sp, #28]
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
    1976:	9830      	ldr	r0, [sp, #192]	; 0xc0
    1978:	9931      	ldr	r1, [sp, #196]	; 0xc4
    197a:	47a8      	blx	r5
    197c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    197e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1980:	0006      	movs	r6, r0
    1982:	000f      	movs	r7, r1
    1984:	9810      	ldr	r0, [sp, #64]	; 0x40
    1986:	9911      	ldr	r1, [sp, #68]	; 0x44
    1988:	47a8      	blx	r5
    198a:	0002      	movs	r2, r0
    198c:	000b      	movs	r3, r1
    198e:	0030      	movs	r0, r6
    1990:	0039      	movs	r1, r7
    1992:	4e2d      	ldr	r6, [pc, #180]	; (1a48 <computeKalmanGains+0x71c>)
    1994:	47b0      	blx	r6
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
    1996:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1998:	9b0d      	ldr	r3, [sp, #52]	; 0x34
        kgain[2][0] = (pestp[2][0] * (pestp[2][2] + acceleration_variance) - pestp[2][2] * pestp[2][0])/det;

        kgain[2][1] = (pestp[2][0] * (-pestp[0][2]) + pestp[2][2] * (pestp[0][0] + altitude_variance))/det;

        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
    199a:	900a      	str	r0, [sp, #40]	; 0x28
    199c:	910b      	str	r1, [sp, #44]	; 0x2c
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
    199e:	9804      	ldr	r0, [sp, #16]
    19a0:	9916      	ldr	r1, [sp, #88]	; 0x58
    19a2:	47a8      	blx	r5
    19a4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    19a6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    19a8:	0006      	movs	r6, r0
    19aa:	000f      	movs	r7, r1
    19ac:	9802      	ldr	r0, [sp, #8]
    19ae:	9903      	ldr	r1, [sp, #12]
    19b0:	47a8      	blx	r5
    19b2:	0002      	movs	r2, r0
    19b4:	000b      	movs	r3, r1
    19b6:	0030      	movs	r0, r6
    19b8:	0039      	movs	r1, r7
    19ba:	4e23      	ldr	r6, [pc, #140]	; (1a48 <computeKalmanGains+0x71c>)
    19bc:	47b0      	blx	r6
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
    19be:	2280      	movs	r2, #128	; 0x80
    19c0:	0612      	lsls	r2, r2, #24
    19c2:	4694      	mov	ip, r2
    19c4:	9b39      	ldr	r3, [sp, #228]	; 0xe4
    19c6:	9a18      	ldr	r2, [sp, #96]	; 0x60
    19c8:	4463      	add	r3, ip
    19ca:	932e      	str	r3, [sp, #184]	; 0xb8
    19cc:	9b2e      	ldr	r3, [sp, #184]	; 0xb8

        kgain[2][1] = (pestp[2][0] * (-pestp[0][2]) + pestp[2][2] * (pestp[0][0] + altitude_variance))/det;

        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
    19ce:	900c      	str	r0, [sp, #48]	; 0x30
    19d0:	910d      	str	r1, [sp, #52]	; 0x34
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
    19d2:	9808      	ldr	r0, [sp, #32]
    19d4:	9909      	ldr	r1, [sp, #36]	; 0x24
    19d6:	47a8      	blx	r5
    19d8:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
    19da:	9b2b      	ldr	r3, [sp, #172]	; 0xac
    19dc:	47a0      	blx	r4
    19de:	9a12      	ldr	r2, [sp, #72]	; 0x48
    19e0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    19e2:	0006      	movs	r6, r0
    19e4:	000f      	movs	r7, r1
    19e6:	9800      	ldr	r0, [sp, #0]
    19e8:	9901      	ldr	r1, [sp, #4]
    19ea:	47a8      	blx	r5
    19ec:	0002      	movs	r2, r0
    19ee:	000b      	movs	r3, r1
    19f0:	0030      	movs	r0, r6
    19f2:	0039      	movs	r1, r7
    19f4:	4e14      	ldr	r6, [pc, #80]	; (1a48 <computeKalmanGains+0x71c>)
    19f6:	47b0      	blx	r6
        pest[1][1] = pestp[0][1] * (-kgain[1][0]) + pestp[1][1] - kgain[1][1]*pestp[2][1];
    19f8:	9a32      	ldr	r2, [sp, #200]	; 0xc8
    19fa:	9b33      	ldr	r3, [sp, #204]	; 0xcc
        kgain[2][1] = (pestp[2][0] * (-pestp[0][2]) + pestp[2][2] * (pestp[0][0] + altitude_variance))/det;

        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
    19fc:	9008      	str	r0, [sp, #32]
    19fe:	9109      	str	r1, [sp, #36]	; 0x24
        pest[1][1] = pestp[0][1] * (-kgain[1][0]) + pestp[1][1] - kgain[1][1]*pestp[2][1];
    1a00:	9826      	ldr	r0, [sp, #152]	; 0x98
    1a02:	9927      	ldr	r1, [sp, #156]	; 0x9c
    1a04:	47a0      	blx	r4
    1a06:	4a0c      	ldr	r2, [pc, #48]	; (1a38 <computeKalmanGains+0x70c>)
    1a08:	0006      	movs	r6, r0
    1a0a:	000f      	movs	r7, r1
    1a0c:	9828      	ldr	r0, [sp, #160]	; 0xa0
    1a0e:	9929      	ldr	r1, [sp, #164]	; 0xa4
    1a10:	4b0a      	ldr	r3, [pc, #40]	; (1a3c <computeKalmanGains+0x710>)
    1a12:	47a8      	blx	r5
    1a14:	0002      	movs	r2, r0
    1a16:	000b      	movs	r3, r1
    1a18:	0030      	movs	r0, r6
    1a1a:	0039      	movs	r1, r7
    1a1c:	47a0      	blx	r4
    1a1e:	9a18      	ldr	r2, [sp, #96]	; 0x60
    1a20:	0006      	movs	r6, r0
    1a22:	000f      	movs	r7, r1
    1a24:	9830      	ldr	r0, [sp, #192]	; 0xc0
    1a26:	9931      	ldr	r1, [sp, #196]	; 0xc4
    1a28:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    1a2a:	47a8      	blx	r5
    1a2c:	0002      	movs	r2, r0
    1a2e:	000b      	movs	r3, r1
    1a30:	0030      	movs	r0, r6
    1a32:	0039      	movs	r1, r7
    1a34:	47a0      	blx	r4
    1a36:	e00f      	b.n	1a58 <computeKalmanGains+0x72c>
    1a38:	47ae147b 	.word	0x47ae147b
    1a3c:	3f747ae1 	.word	0x3f747ae1
    1a40:	eb1c432d 	.word	0xeb1c432d
    1a44:	3eea36e2 	.word	0x3eea36e2
    1a48:	000056cd 	.word	0x000056cd
    1a4c:	00004991 	.word	0x00004991
    1a50:	20000628 	.word	0x20000628
    1a54:	3ff00000 	.word	0x3ff00000
    1a58:	9a12      	ldr	r2, [sp, #72]	; 0x48
    1a5a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    1a5c:	0006      	movs	r6, r0
    1a5e:	000f      	movs	r7, r1
    1a60:	9810      	ldr	r0, [sp, #64]	; 0x40
    1a62:	9911      	ldr	r1, [sp, #68]	; 0x44
    1a64:	47a8      	blx	r5
    1a66:	0002      	movs	r2, r0
    1a68:	000b      	movs	r3, r1
    1a6a:	0030      	movs	r0, r6
    1a6c:	0039      	movs	r1, r7
    1a6e:	4e50      	ldr	r6, [pc, #320]	; (1bb0 <computeKalmanGains+0x884>)
    1a70:	47b0      	blx	r6
        pest[1][2] = pestp[0][2] * (-kgain[1][0]) + pestp[1][2] - kgain[1][1]*pestp[2][2];
    1a72:	9a18      	ldr	r2, [sp, #96]	; 0x60

        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
        pest[1][1] = pestp[0][1] * (-kgain[1][0]) + pestp[1][1] - kgain[1][1]*pestp[2][1];
    1a74:	900e      	str	r0, [sp, #56]	; 0x38
    1a76:	910f      	str	r1, [sp, #60]	; 0x3c
        pest[1][2] = pestp[0][2] * (-kgain[1][0]) + pestp[1][2] - kgain[1][1]*pestp[2][2];
    1a78:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    1a7a:	9804      	ldr	r0, [sp, #16]
    1a7c:	9916      	ldr	r1, [sp, #88]	; 0x58
    1a7e:	47a8      	blx	r5
    1a80:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
    1a82:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    1a84:	47a0      	blx	r4
    1a86:	9a12      	ldr	r2, [sp, #72]	; 0x48
    1a88:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    1a8a:	0006      	movs	r6, r0
    1a8c:	000f      	movs	r7, r1
    1a8e:	9802      	ldr	r0, [sp, #8]
    1a90:	9903      	ldr	r1, [sp, #12]
    1a92:	47a8      	blx	r5
    1a94:	4c46      	ldr	r4, [pc, #280]	; (1bb0 <computeKalmanGains+0x884>)
    1a96:	0002      	movs	r2, r0
    1a98:	000b      	movs	r3, r1
    1a9a:	0030      	movs	r0, r6
    1a9c:	0039      	movs	r1, r7
    1a9e:	47a0      	blx	r4
        pest[2][0] = (1.0 - kgain[2][1]) * pestp[2][0] - kgain[2][0] * pestp[2][0];
    1aa0:	9a36      	ldr	r2, [sp, #216]	; 0xd8
    1aa2:	9b37      	ldr	r3, [sp, #220]	; 0xdc
        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
        pest[1][1] = pestp[0][1] * (-kgain[1][0]) + pestp[1][1] - kgain[1][1]*pestp[2][1];
        pest[1][2] = pestp[0][2] * (-kgain[1][0]) + pestp[1][2] - kgain[1][1]*pestp[2][2];
    1aa4:	9004      	str	r0, [sp, #16]
    1aa6:	9105      	str	r1, [sp, #20]
        pest[2][0] = (1.0 - kgain[2][1]) * pestp[2][0] - kgain[2][0] * pestp[2][0];
    1aa8:	2000      	movs	r0, #0
    1aaa:	4942      	ldr	r1, [pc, #264]	; (1bb4 <computeKalmanGains+0x888>)
    1aac:	47a0      	blx	r4
    1aae:	0002      	movs	r2, r0
    1ab0:	000b      	movs	r3, r1
    1ab2:	9012      	str	r0, [sp, #72]	; 0x48
    1ab4:	9113      	str	r1, [sp, #76]	; 0x4c
    1ab6:	9800      	ldr	r0, [sp, #0]
    1ab8:	9901      	ldr	r1, [sp, #4]
    1aba:	47a8      	blx	r5
    1abc:	9a14      	ldr	r2, [sp, #80]	; 0x50
    1abe:	9b15      	ldr	r3, [sp, #84]	; 0x54
    1ac0:	0006      	movs	r6, r0
    1ac2:	000f      	movs	r7, r1
    1ac4:	9800      	ldr	r0, [sp, #0]
    1ac6:	9901      	ldr	r1, [sp, #4]
    1ac8:	47a8      	blx	r5
    1aca:	0002      	movs	r2, r0
    1acc:	000b      	movs	r3, r1
    1ace:	0030      	movs	r0, r6
    1ad0:	0039      	movs	r1, r7
    1ad2:	47a0      	blx	r4
    1ad4:	9000      	str	r0, [sp, #0]
    1ad6:	9101      	str	r1, [sp, #4]
        pest[2][1] = (1.0 - kgain[2][1]) * pestp[2][1] - kgain[2][0] * pestp[2][1];
    1ad8:	9a12      	ldr	r2, [sp, #72]	; 0x48
    1ada:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    1adc:	9810      	ldr	r0, [sp, #64]	; 0x40
    1ade:	9911      	ldr	r1, [sp, #68]	; 0x44
    1ae0:	47a8      	blx	r5
    1ae2:	9a14      	ldr	r2, [sp, #80]	; 0x50
    1ae4:	9b15      	ldr	r3, [sp, #84]	; 0x54
    1ae6:	0006      	movs	r6, r0
    1ae8:	000f      	movs	r7, r1
    1aea:	9810      	ldr	r0, [sp, #64]	; 0x40
    1aec:	9911      	ldr	r1, [sp, #68]	; 0x44
    1aee:	47a8      	blx	r5
    1af0:	0002      	movs	r2, r0
    1af2:	000b      	movs	r3, r1
    1af4:	0030      	movs	r0, r6
    1af6:	0039      	movs	r1, r7
    1af8:	47a0      	blx	r4
        pest[2][2] = (1.0 - kgain[2][1]) * pestp[2][2] - kgain[2][0] * pestp[2][2];
    1afa:	9a12      	ldr	r2, [sp, #72]	; 0x48
    1afc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
        pest[1][1] = pestp[0][1] * (-kgain[1][0]) + pestp[1][1] - kgain[1][1]*pestp[2][1];
        pest[1][2] = pestp[0][2] * (-kgain[1][0]) + pestp[1][2] - kgain[1][1]*pestp[2][2];
        pest[2][0] = (1.0 - kgain[2][1]) * pestp[2][0] - kgain[2][0] * pestp[2][0];
        pest[2][1] = (1.0 - kgain[2][1]) * pestp[2][1] - kgain[2][0] * pestp[2][1];
    1afe:	9010      	str	r0, [sp, #64]	; 0x40
    1b00:	9111      	str	r1, [sp, #68]	; 0x44
        pest[2][2] = (1.0 - kgain[2][1]) * pestp[2][2] - kgain[2][0] * pestp[2][2];
    1b02:	9802      	ldr	r0, [sp, #8]
    1b04:	9903      	ldr	r1, [sp, #12]
    1b06:	47a8      	blx	r5
    1b08:	9a14      	ldr	r2, [sp, #80]	; 0x50
    1b0a:	9b15      	ldr	r3, [sp, #84]	; 0x54
    1b0c:	0006      	movs	r6, r0
    1b0e:	000f      	movs	r7, r1
    1b10:	9802      	ldr	r0, [sp, #8]
    1b12:	9903      	ldr	r1, [sp, #12]
    1b14:	47a8      	blx	r5
    1b16:	000b      	movs	r3, r1
    1b18:	0002      	movs	r2, r0
    1b1a:	0039      	movs	r1, r7
    1b1c:	0030      	movs	r0, r6
    1b1e:	47a0      	blx	r4
         * time through the mill. Because I have noticed very early convergance
         * in a few cases (< 20 iterations) I am delaying this for at least
         * 100 iterations.
         */
        notdone = 0;
        k++;
    1b20:	2400      	movs	r4, #0
    1b22:	9b38      	ldr	r3, [sp, #224]	; 0xe0
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
        pest[1][1] = pestp[0][1] * (-kgain[1][0]) + pestp[1][1] - kgain[1][1]*pestp[2][1];
        pest[1][2] = pestp[0][2] * (-kgain[1][0]) + pestp[1][2] - kgain[1][1]*pestp[2][2];
        pest[2][0] = (1.0 - kgain[2][1]) * pestp[2][0] - kgain[2][0] * pestp[2][0];
        pest[2][1] = (1.0 - kgain[2][1]) * pestp[2][1] - kgain[2][0] * pestp[2][1];
        pest[2][2] = (1.0 - kgain[2][1]) * pestp[2][2] - kgain[2][0] * pestp[2][2];
    1b24:	9002      	str	r0, [sp, #8]
    1b26:	9103      	str	r1, [sp, #12]
         * time through the mill. Because I have noticed very early convergance
         * in a few cases (< 20 iterations) I am delaying this for at least
         * 100 iterations.
         */
        notdone = 0;
        k++;
    1b28:	3301      	adds	r3, #1
    1b2a:	9338      	str	r3, [sp, #224]	; 0xe0
        for( i = 0; i <= 2; i++)
            for( j = 0; j <= 1; j++) {
                if( (kgain[i][j] - lastkgain[i][j])/lastkgain[i][j] > 0.00001)
    1b2c:	4b22      	ldr	r3, [pc, #136]	; (1bb8 <computeKalmanGains+0x88c>)
        /* Check for convergance. Criteria is less than .001% change from last
         * time through the mill. Because I have noticed very early convergance
         * in a few cases (< 20 iterations) I am delaying this for at least
         * 100 iterations.
         */
        notdone = 0;
    1b2e:	9414      	str	r4, [sp, #80]	; 0x50
        k++;
        for( i = 0; i <= 2; i++)
            for( j = 0; j <= 1; j++) {
                if( (kgain[i][j] - lastkgain[i][j])/lastkgain[i][j] > 0.00001)
    1b30:	9326      	str	r3, [sp, #152]	; 0x98
    1b32:	4b1f      	ldr	r3, [pc, #124]	; (1bb0 <computeKalmanGains+0x884>)
    1b34:	9328      	str	r3, [sp, #160]	; 0xa0
    1b36:	ab40      	add	r3, sp, #256	; 0x100
    1b38:	18e5      	adds	r5, r4, r3

        pestp[2][2] = pestp[2][2] + model_variance;
        /*
          Calculate Kalman Gain
        */
        det = (pestp[0][0]+altitude_variance)*(pestp[2][2] + acceleration_variance) - pestp[2][0] * pestp[0][2];
    1b3a:	2300      	movs	r3, #0
    1b3c:	9516      	str	r5, [sp, #88]	; 0x58
    1b3e:	9312      	str	r3, [sp, #72]	; 0x48
         */
        notdone = 0;
        k++;
        for( i = 0; i <= 2; i++)
            for( j = 0; j <= 1; j++) {
                if( (kgain[i][j] - lastkgain[i][j])/lastkgain[i][j] > 0.00001)
    1b40:	9b12      	ldr	r3, [sp, #72]	; 0x48
    1b42:	9a26      	ldr	r2, [sp, #152]	; 0x98
    1b44:	18e3      	adds	r3, r4, r3
    1b46:	189b      	adds	r3, r3, r2
    1b48:	681a      	ldr	r2, [r3, #0]
    1b4a:	685b      	ldr	r3, [r3, #4]
    1b4c:	9218      	str	r2, [sp, #96]	; 0x60
    1b4e:	9319      	str	r3, [sp, #100]	; 0x64
    1b50:	9818      	ldr	r0, [sp, #96]	; 0x60
    1b52:	9919      	ldr	r1, [sp, #100]	; 0x64
    1b54:	9b16      	ldr	r3, [sp, #88]	; 0x58
    1b56:	9d28      	ldr	r5, [sp, #160]	; 0xa0
    1b58:	681e      	ldr	r6, [r3, #0]
    1b5a:	685f      	ldr	r7, [r3, #4]
    1b5c:	0032      	movs	r2, r6
    1b5e:	003b      	movs	r3, r7
    1b60:	47a8      	blx	r5
    1b62:	0032      	movs	r2, r6
    1b64:	003b      	movs	r3, r7
    1b66:	4d15      	ldr	r5, [pc, #84]	; (1bbc <computeKalmanGains+0x890>)
    1b68:	47a8      	blx	r5
    1b6a:	4b15      	ldr	r3, [pc, #84]	; (1bc0 <computeKalmanGains+0x894>)
    1b6c:	4a15      	ldr	r2, [pc, #84]	; (1bc4 <computeKalmanGains+0x898>)
    1b6e:	4e16      	ldr	r6, [pc, #88]	; (1bc8 <computeKalmanGains+0x89c>)
    1b70:	47b0      	blx	r6
                    notdone++;
    1b72:	1e43      	subs	r3, r0, #1
    1b74:	4198      	sbcs	r0, r3
    1b76:	9b14      	ldr	r3, [sp, #80]	; 0x50
                lastkgain[i][j] = kgain[i][j];
    1b78:	9916      	ldr	r1, [sp, #88]	; 0x58
        notdone = 0;
        k++;
        for( i = 0; i <= 2; i++)
            for( j = 0; j <= 1; j++) {
                if( (kgain[i][j] - lastkgain[i][j])/lastkgain[i][j] > 0.00001)
                    notdone++;
    1b7a:	181b      	adds	r3, r3, r0
    1b7c:	9314      	str	r3, [sp, #80]	; 0x50
                lastkgain[i][j] = kgain[i][j];
    1b7e:	9a18      	ldr	r2, [sp, #96]	; 0x60
    1b80:	9b19      	ldr	r3, [sp, #100]	; 0x64
    1b82:	c10c      	stmia	r1!, {r2, r3}
    1b84:	9b12      	ldr	r3, [sp, #72]	; 0x48
    1b86:	9116      	str	r1, [sp, #88]	; 0x58
    1b88:	3308      	adds	r3, #8
    1b8a:	9312      	str	r3, [sp, #72]	; 0x48
         * 100 iterations.
         */
        notdone = 0;
        k++;
        for( i = 0; i <= 2; i++)
            for( j = 0; j <= 1; j++) {
    1b8c:	2b10      	cmp	r3, #16
    1b8e:	d1d7      	bne.n	1b40 <computeKalmanGains+0x814>
    1b90:	3410      	adds	r4, #16
         * in a few cases (< 20 iterations) I am delaying this for at least
         * 100 iterations.
         */
        notdone = 0;
        k++;
        for( i = 0; i <= 2; i++)
    1b92:	2c30      	cmp	r4, #48	; 0x30
    1b94:	d1cf      	bne.n	1b36 <computeKalmanGains+0x80a>
            for( j = 0; j <= 1; j++) {
                if( (kgain[i][j] - lastkgain[i][j])/lastkgain[i][j] > 0.00001)
                    notdone++;
                lastkgain[i][j] = kgain[i][j];
            }
        if( notdone || k < 100)
    1b96:	9b14      	ldr	r3, [sp, #80]	; 0x50
    1b98:	2b00      	cmp	r3, #0
    1b9a:	d001      	beq.n	1ba0 <computeKalmanGains+0x874>
    1b9c:	f7ff fc2c 	bl	13f8 <computeKalmanGains+0xcc>
    1ba0:	9b38      	ldr	r3, [sp, #224]	; 0xe0
    1ba2:	2b63      	cmp	r3, #99	; 0x63
    1ba4:	dc01      	bgt.n	1baa <computeKalmanGains+0x87e>
    1ba6:	f7ff fc27 	bl	13f8 <computeKalmanGains+0xcc>
            continue;
        else
            break;
    }
}
    1baa:	b04d      	add	sp, #308	; 0x134
    1bac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1bae:	46c0      	nop			; (mov r8, r8)
    1bb0:	000056cd 	.word	0x000056cd
    1bb4:	3ff00000 	.word	0x3ff00000
    1bb8:	20000628 	.word	0x20000628
    1bbc:	00004991 	.word	0x00004991
    1bc0:	3ee4f8b5 	.word	0x3ee4f8b5
    1bc4:	88e368f1 	.word	0x88e368f1
    1bc8:	00003a71 	.word	0x00003a71

00001bcc <computeKalmanStates>:

void computeKalmanStates() {
    1bcc:	b5f0      	push	{r4, r5, r6, r7, lr}

    double alt_inovation, accel_inovation;


    double acceleration = (sample.accelZ - offsets.gravityOffset) * 32.17417;
    1bce:	4d7e      	ldr	r5, [pc, #504]	; (1dc8 <computeKalmanStates+0x1fc>)
        else
            break;
    }
}

void computeKalmanStates() {
    1bd0:	b08f      	sub	sp, #60	; 0x3c

    double alt_inovation, accel_inovation;


    double acceleration = (sample.accelZ - offsets.gravityOffset) * 32.17417;
    1bd2:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    1bd4:	4b7d      	ldr	r3, [pc, #500]	; (1dcc <computeKalmanStates+0x200>)
    1bd6:	4798      	blx	r3
    1bd8:	4b7d      	ldr	r3, [pc, #500]	; (1dd0 <computeKalmanStates+0x204>)
    1bda:	4c7e      	ldr	r4, [pc, #504]	; (1dd4 <computeKalmanStates+0x208>)
    1bdc:	689a      	ldr	r2, [r3, #8]
    1bde:	68db      	ldr	r3, [r3, #12]
    1be0:	47a0      	blx	r4
    1be2:	4a7d      	ldr	r2, [pc, #500]	; (1dd8 <computeKalmanStates+0x20c>)
    1be4:	4b7d      	ldr	r3, [pc, #500]	; (1ddc <computeKalmanStates+0x210>)
    1be6:	4e7e      	ldr	r6, [pc, #504]	; (1de0 <computeKalmanStates+0x214>)
    1be8:	47b0      	blx	r6
    double pressure = sample.altitudefeet;
    1bea:	6c2e      	ldr	r6, [r5, #64]	; 0x40
    1bec:	6c6f      	ldr	r7, [r5, #68]	; 0x44

    if (altitude == 0) {
    1bee:	4d7d      	ldr	r5, [pc, #500]	; (1de4 <computeKalmanStates+0x218>)
void computeKalmanStates() {

    double alt_inovation, accel_inovation;


    double acceleration = (sample.accelZ - offsets.gravityOffset) * 32.17417;
    1bf0:	9000      	str	r0, [sp, #0]
    1bf2:	9101      	str	r1, [sp, #4]
    double pressure = sample.altitudefeet;

    if (altitude == 0) {
    1bf4:	6828      	ldr	r0, [r5, #0]
    1bf6:	6869      	ldr	r1, [r5, #4]
    1bf8:	4c7b      	ldr	r4, [pc, #492]	; (1de8 <computeKalmanStates+0x21c>)
    1bfa:	2200      	movs	r2, #0
    1bfc:	2300      	movs	r3, #0
    1bfe:	47a0      	blx	r4
    1c00:	4c74      	ldr	r4, [pc, #464]	; (1dd4 <computeKalmanStates+0x208>)
    1c02:	2800      	cmp	r0, #0
    1c04:	d001      	beq.n	1c0a <computeKalmanStates+0x3e>
        altitude = pressure;
    1c06:	602e      	str	r6, [r5, #0]
    1c08:	606f      	str	r7, [r5, #4]
    }

    /* Compute the innovations */
    alt_inovation = pressure - estp[0];
    1c0a:	4b78      	ldr	r3, [pc, #480]	; (1dec <computeKalmanStates+0x220>)
    1c0c:	0030      	movs	r0, r6
    1c0e:	681a      	ldr	r2, [r3, #0]
    1c10:	685b      	ldr	r3, [r3, #4]
    1c12:	0039      	movs	r1, r7
    1c14:	47a0      	blx	r4
    accel_inovation = acceleration - estp[2];
    1c16:	4b75      	ldr	r3, [pc, #468]	; (1dec <computeKalmanStates+0x220>)
    if (altitude == 0) {
        altitude = pressure;
    }

    /* Compute the innovations */
    alt_inovation = pressure - estp[0];
    1c18:	9006      	str	r0, [sp, #24]
    1c1a:	9107      	str	r1, [sp, #28]
    accel_inovation = acceleration - estp[2];
    1c1c:	691a      	ldr	r2, [r3, #16]
    1c1e:	695b      	ldr	r3, [r3, #20]
    1c20:	9800      	ldr	r0, [sp, #0]
    1c22:	9901      	ldr	r1, [sp, #4]
    1c24:	47a0      	blx	r4


    /* Propagate state */
    estp[0] = phi[0][0] * altitude + phi[0][1] *velocity + phi[0][2] * accel;
    1c26:	4b6f      	ldr	r3, [pc, #444]	; (1de4 <computeKalmanStates+0x218>)
    1c28:	4d6d      	ldr	r5, [pc, #436]	; (1de0 <computeKalmanStates+0x214>)
    1c2a:	685c      	ldr	r4, [r3, #4]
    1c2c:	681b      	ldr	r3, [r3, #0]
    1c2e:	9300      	str	r3, [sp, #0]
    1c30:	9401      	str	r4, [sp, #4]
    1c32:	4b6f      	ldr	r3, [pc, #444]	; (1df0 <computeKalmanStates+0x224>)
        altitude = pressure;
    }

    /* Compute the innovations */
    alt_inovation = pressure - estp[0];
    accel_inovation = acceleration - estp[2];
    1c34:	9008      	str	r0, [sp, #32]
    1c36:	9109      	str	r1, [sp, #36]	; 0x24


    /* Propagate state */
    estp[0] = phi[0][0] * altitude + phi[0][1] *velocity + phi[0][2] * accel;
    1c38:	685c      	ldr	r4, [r3, #4]
    1c3a:	681b      	ldr	r3, [r3, #0]
    1c3c:	9800      	ldr	r0, [sp, #0]
    1c3e:	9901      	ldr	r1, [sp, #4]
    1c40:	9302      	str	r3, [sp, #8]
    1c42:	9403      	str	r4, [sp, #12]
    1c44:	4b6b      	ldr	r3, [pc, #428]	; (1df4 <computeKalmanStates+0x228>)
    1c46:	685c      	ldr	r4, [r3, #4]
    1c48:	681b      	ldr	r3, [r3, #0]
    1c4a:	9304      	str	r3, [sp, #16]
    1c4c:	9405      	str	r4, [sp, #20]
    1c4e:	4c6a      	ldr	r4, [pc, #424]	; (1df8 <computeKalmanStates+0x22c>)
    1c50:	6822      	ldr	r2, [r4, #0]
    1c52:	6863      	ldr	r3, [r4, #4]
    1c54:	47a8      	blx	r5
    1c56:	68a2      	ldr	r2, [r4, #8]
    1c58:	68e3      	ldr	r3, [r4, #12]
    1c5a:	0006      	movs	r6, r0
    1c5c:	000f      	movs	r7, r1
    1c5e:	9802      	ldr	r0, [sp, #8]
    1c60:	9903      	ldr	r1, [sp, #12]
    1c62:	47a8      	blx	r5
    1c64:	0002      	movs	r2, r0
    1c66:	000b      	movs	r3, r1
    1c68:	0030      	movs	r0, r6
    1c6a:	0039      	movs	r1, r7
    1c6c:	4e63      	ldr	r6, [pc, #396]	; (1dfc <computeKalmanStates+0x230>)
    1c6e:	47b0      	blx	r6
    1c70:	6922      	ldr	r2, [r4, #16]
    1c72:	6963      	ldr	r3, [r4, #20]
    1c74:	0006      	movs	r6, r0
    1c76:	000f      	movs	r7, r1
    1c78:	9804      	ldr	r0, [sp, #16]
    1c7a:	9905      	ldr	r1, [sp, #20]
    1c7c:	47a8      	blx	r5
    1c7e:	0002      	movs	r2, r0
    1c80:	000b      	movs	r3, r1
    1c82:	0030      	movs	r0, r6
    1c84:	0039      	movs	r1, r7
    1c86:	4e5d      	ldr	r6, [pc, #372]	; (1dfc <computeKalmanStates+0x230>)
    1c88:	47b0      	blx	r6
    1c8a:	900a      	str	r0, [sp, #40]	; 0x28
    1c8c:	910b      	str	r1, [sp, #44]	; 0x2c
    1c8e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    1c90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1c92:	4956      	ldr	r1, [pc, #344]	; (1dec <computeKalmanStates+0x220>)
    1c94:	600a      	str	r2, [r1, #0]
    1c96:	604b      	str	r3, [r1, #4]
    estp[1] = phi[1][0] * altitude + phi[1][1] * velocity + phi[1][2] * accel;
    1c98:	69a2      	ldr	r2, [r4, #24]
    1c9a:	69e3      	ldr	r3, [r4, #28]
    1c9c:	9800      	ldr	r0, [sp, #0]
    1c9e:	9901      	ldr	r1, [sp, #4]
    1ca0:	47a8      	blx	r5
    1ca2:	6a22      	ldr	r2, [r4, #32]
    1ca4:	6a63      	ldr	r3, [r4, #36]	; 0x24
    1ca6:	0006      	movs	r6, r0
    1ca8:	000f      	movs	r7, r1
    1caa:	9802      	ldr	r0, [sp, #8]
    1cac:	9903      	ldr	r1, [sp, #12]
    1cae:	47a8      	blx	r5
    1cb0:	0002      	movs	r2, r0
    1cb2:	000b      	movs	r3, r1
    1cb4:	0030      	movs	r0, r6
    1cb6:	0039      	movs	r1, r7
    1cb8:	4e50      	ldr	r6, [pc, #320]	; (1dfc <computeKalmanStates+0x230>)
    1cba:	47b0      	blx	r6
    1cbc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    1cbe:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    1cc0:	0006      	movs	r6, r0
    1cc2:	000f      	movs	r7, r1
    1cc4:	9804      	ldr	r0, [sp, #16]
    1cc6:	9905      	ldr	r1, [sp, #20]
    1cc8:	47a8      	blx	r5
    1cca:	0002      	movs	r2, r0
    1ccc:	000b      	movs	r3, r1
    1cce:	0030      	movs	r0, r6
    1cd0:	0039      	movs	r1, r7
    1cd2:	4e4a      	ldr	r6, [pc, #296]	; (1dfc <computeKalmanStates+0x230>)
    1cd4:	47b0      	blx	r6
    1cd6:	900c      	str	r0, [sp, #48]	; 0x30
    1cd8:	910d      	str	r1, [sp, #52]	; 0x34
    1cda:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1cdc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1cde:	4943      	ldr	r1, [pc, #268]	; (1dec <computeKalmanStates+0x220>)
    1ce0:	608a      	str	r2, [r1, #8]
    1ce2:	60cb      	str	r3, [r1, #12]
    estp[2] = phi[2][0] * altitude + phi[2][1] * velocity + phi[2][2] * accel;
    1ce4:	6b22      	ldr	r2, [r4, #48]	; 0x30
    1ce6:	6b63      	ldr	r3, [r4, #52]	; 0x34
    1ce8:	9800      	ldr	r0, [sp, #0]
    1cea:	9901      	ldr	r1, [sp, #4]
    1cec:	47a8      	blx	r5
    1cee:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    1cf0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    1cf2:	0006      	movs	r6, r0
    1cf4:	000f      	movs	r7, r1
    1cf6:	9802      	ldr	r0, [sp, #8]
    1cf8:	9903      	ldr	r1, [sp, #12]
    1cfa:	47a8      	blx	r5
    1cfc:	0002      	movs	r2, r0
    1cfe:	000b      	movs	r3, r1
    1d00:	0030      	movs	r0, r6
    1d02:	0039      	movs	r1, r7
    1d04:	4e3d      	ldr	r6, [pc, #244]	; (1dfc <computeKalmanStates+0x230>)
    1d06:	47b0      	blx	r6
    1d08:	6c22      	ldr	r2, [r4, #64]	; 0x40
    1d0a:	6c63      	ldr	r3, [r4, #68]	; 0x44
    1d0c:	0006      	movs	r6, r0
    1d0e:	000f      	movs	r7, r1
    1d10:	9804      	ldr	r0, [sp, #16]
    1d12:	9905      	ldr	r1, [sp, #20]
    1d14:	47a8      	blx	r5
    1d16:	4c39      	ldr	r4, [pc, #228]	; (1dfc <computeKalmanStates+0x230>)
    1d18:	0002      	movs	r2, r0
    1d1a:	000b      	movs	r3, r1
    1d1c:	0030      	movs	r0, r6
    1d1e:	0039      	movs	r1, r7
    1d20:	47a0      	blx	r4
    1d22:	0003      	movs	r3, r0
    1d24:	000c      	movs	r4, r1
    1d26:	4a31      	ldr	r2, [pc, #196]	; (1dec <computeKalmanStates+0x220>)
    1d28:	9000      	str	r0, [sp, #0]
    1d2a:	9101      	str	r1, [sp, #4]
    1d2c:	6113      	str	r3, [r2, #16]
    1d2e:	6154      	str	r4, [r2, #20]

    /*
    Update state
    */
    altitude = estp[0] + kgain[0][0] * alt_inovation + kgain[0][1] * accel_inovation;
    1d30:	4c33      	ldr	r4, [pc, #204]	; (1e00 <computeKalmanStates+0x234>)
    1d32:	6822      	ldr	r2, [r4, #0]
    1d34:	6863      	ldr	r3, [r4, #4]
    1d36:	9806      	ldr	r0, [sp, #24]
    1d38:	9907      	ldr	r1, [sp, #28]
    1d3a:	47a8      	blx	r5
    1d3c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    1d3e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1d40:	4e2e      	ldr	r6, [pc, #184]	; (1dfc <computeKalmanStates+0x230>)
    1d42:	47b0      	blx	r6
    1d44:	68a2      	ldr	r2, [r4, #8]
    1d46:	68e3      	ldr	r3, [r4, #12]
    1d48:	0006      	movs	r6, r0
    1d4a:	000f      	movs	r7, r1
    1d4c:	9808      	ldr	r0, [sp, #32]
    1d4e:	9909      	ldr	r1, [sp, #36]	; 0x24
    1d50:	47a8      	blx	r5
    1d52:	0002      	movs	r2, r0
    1d54:	000b      	movs	r3, r1
    1d56:	0030      	movs	r0, r6
    1d58:	0039      	movs	r1, r7
    1d5a:	4e28      	ldr	r6, [pc, #160]	; (1dfc <computeKalmanStates+0x230>)
    1d5c:	47b0      	blx	r6
    1d5e:	4b21      	ldr	r3, [pc, #132]	; (1de4 <computeKalmanStates+0x218>)
    1d60:	6018      	str	r0, [r3, #0]
    1d62:	6059      	str	r1, [r3, #4]
    velocity = estp[1] + kgain[1][0] * alt_inovation + kgain[1][1] * accel_inovation;
    1d64:	6922      	ldr	r2, [r4, #16]
    1d66:	6963      	ldr	r3, [r4, #20]
    1d68:	9806      	ldr	r0, [sp, #24]
    1d6a:	9907      	ldr	r1, [sp, #28]
    1d6c:	47a8      	blx	r5
    1d6e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1d70:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1d72:	47b0      	blx	r6
    1d74:	69a2      	ldr	r2, [r4, #24]
    1d76:	69e3      	ldr	r3, [r4, #28]
    1d78:	0006      	movs	r6, r0
    1d7a:	000f      	movs	r7, r1
    1d7c:	9808      	ldr	r0, [sp, #32]
    1d7e:	9909      	ldr	r1, [sp, #36]	; 0x24
    1d80:	47a8      	blx	r5
    1d82:	0002      	movs	r2, r0
    1d84:	000b      	movs	r3, r1
    1d86:	0030      	movs	r0, r6
    1d88:	0039      	movs	r1, r7
    1d8a:	4e1c      	ldr	r6, [pc, #112]	; (1dfc <computeKalmanStates+0x230>)
    1d8c:	47b0      	blx	r6
    1d8e:	4b18      	ldr	r3, [pc, #96]	; (1df0 <computeKalmanStates+0x224>)
    1d90:	6018      	str	r0, [r3, #0]
    1d92:	6059      	str	r1, [r3, #4]
    accel =    estp[2] + kgain[2][0] * alt_inovation + kgain[2][1] * accel_inovation;
    1d94:	6a22      	ldr	r2, [r4, #32]
    1d96:	6a63      	ldr	r3, [r4, #36]	; 0x24
    1d98:	9806      	ldr	r0, [sp, #24]
    1d9a:	9907      	ldr	r1, [sp, #28]
    1d9c:	47a8      	blx	r5
    1d9e:	9a00      	ldr	r2, [sp, #0]
    1da0:	9b01      	ldr	r3, [sp, #4]
    1da2:	47b0      	blx	r6
    1da4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    1da6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    1da8:	0006      	movs	r6, r0
    1daa:	000f      	movs	r7, r1
    1dac:	9808      	ldr	r0, [sp, #32]
    1dae:	9909      	ldr	r1, [sp, #36]	; 0x24
    1db0:	47a8      	blx	r5
    1db2:	4c12      	ldr	r4, [pc, #72]	; (1dfc <computeKalmanStates+0x230>)
    1db4:	0002      	movs	r2, r0
    1db6:	000b      	movs	r3, r1
    1db8:	0030      	movs	r0, r6
    1dba:	0039      	movs	r1, r7
    1dbc:	47a0      	blx	r4
    1dbe:	4b0d      	ldr	r3, [pc, #52]	; (1df4 <computeKalmanStates+0x228>)
    1dc0:	6018      	str	r0, [r3, #0]
    1dc2:	6059      	str	r1, [r3, #4]

}
    1dc4:	b00f      	add	sp, #60	; 0x3c
    1dc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1dc8:	200007a0 	.word	0x200007a0
    1dcc:	00005f15 	.word	0x00005f15
    1dd0:	200004d0 	.word	0x200004d0
    1dd4:	000056cd 	.word	0x000056cd
    1dd8:	33daf8df 	.word	0x33daf8df
    1ddc:	4040164b 	.word	0x4040164b
    1de0:	000051d9 	.word	0x000051d9
    1de4:	20000670 	.word	0x20000670
    1de8:	00003a3d 	.word	0x00003a3d
    1dec:	20000678 	.word	0x20000678
    1df0:	20000668 	.word	0x20000668
    1df4:	20000660 	.word	0x20000660
    1df8:	20000010 	.word	0x20000010
    1dfc:	00004339 	.word	0x00004339
    1e00:	20000628 	.word	0x20000628

00001e04 <makePage>:
u8_t pageLocation;

bool pageReady;


void makePage(u8_t bytesToWrite, u8_t* data) {
    1e04:	b5f0      	push	{r4, r5, r6, r7, lr}


    u8_t location = pageLocation;
    1e06:	4a1f      	ldr	r2, [pc, #124]	; (1e84 <makePage+0x80>)
    1e08:	7815      	ldrb	r5, [r2, #0]
    u8_t bytesWritten = 0;

    if ((location + bytesToWrite) > 0xFF) {
    1e0a:	1943      	adds	r3, r0, r5
    1e0c:	2bff      	cmp	r3, #255	; 0xff
    1e0e:	dc03      	bgt.n	1e18 <makePage+0x14>
    1e10:	2300      	movs	r3, #0
            pageLocation = dataByte + 1;
        }
        pageReady = true;

    } else {
        for (u16_t dataByte = 0; dataByte <= bytesToWrite; ++dataByte) {
    1e12:	b280      	uxth	r0, r0
            pageBuffer[(dataByte + location)] = data[dataByte];
    1e14:	4c1c      	ldr	r4, [pc, #112]	; (1e88 <makePage+0x84>)
    1e16:	e029      	b.n	1e6c <makePage+0x68>
    1e18:	2300      	movs	r3, #0
    1e1a:	4e1b      	ldr	r6, [pc, #108]	; (1e88 <makePage+0x84>)

    u8_t location = pageLocation;
    u8_t bytesWritten = 0;

    if ((location + bytesToWrite) > 0xFF) {
        for (u16_t dataByte = 0; (dataByte + location) <= 0xFF; ++dataByte) {
    1e1c:	195f      	adds	r7, r3, r5
    1e1e:	b2dc      	uxtb	r4, r3
    1e20:	46b4      	mov	ip, r6
    1e22:	2fff      	cmp	r7, #255	; 0xff
    1e24:	dc04      	bgt.n	1e30 <makePage+0x2c>
            pageBuffer[(dataByte + location)] = data[dataByte];
    1e26:	5ccc      	ldrb	r4, [r1, r3]

    u8_t location = pageLocation;
    u8_t bytesWritten = 0;

    if ((location + bytesToWrite) > 0xFF) {
        for (u16_t dataByte = 0; (dataByte + location) <= 0xFF; ++dataByte) {
    1e28:	3301      	adds	r3, #1
            pageBuffer[(dataByte + location)] = data[dataByte];
    1e2a:	55f4      	strb	r4, [r6, r7]

    u8_t location = pageLocation;
    u8_t bytesWritten = 0;

    if ((location + bytesToWrite) > 0xFF) {
        for (u16_t dataByte = 0; (dataByte + location) <= 0xFF; ++dataByte) {
    1e2c:	b29b      	uxth	r3, r3
    1e2e:	e7f5      	b.n	1e1c <makePage+0x18>
            pageBuffer[(dataByte + location)] = data[dataByte];
            bytesWritten++;
        }
        pageLocation = 0x00;
    1e30:	2300      	movs	r3, #0
        for(u16_t i = 0; i <= 0xFF; ++i) {
            pageToWrite[i] = pageBuffer[i];
    1e32:	4f16      	ldr	r7, [pc, #88]	; (1e8c <makePage+0x88>)
    if ((location + bytesToWrite) > 0xFF) {
        for (u16_t dataByte = 0; (dataByte + location) <= 0xFF; ++dataByte) {
            pageBuffer[(dataByte + location)] = data[dataByte];
            bytesWritten++;
        }
        pageLocation = 0x00;
    1e34:	7013      	strb	r3, [r2, #0]
        for(u16_t i = 0; i <= 0xFF; ++i) {
            pageToWrite[i] = pageBuffer[i];
    1e36:	4665      	mov	r5, ip
    1e38:	18ed      	adds	r5, r5, r3
    1e3a:	782e      	ldrb	r6, [r5, #0]
    1e3c:	54fe      	strb	r6, [r7, r3]
            pageBuffer[i] = 0;
    1e3e:	2600      	movs	r6, #0
    1e40:	702e      	strb	r6, [r5, #0]
        for (u16_t dataByte = 0; (dataByte + location) <= 0xFF; ++dataByte) {
            pageBuffer[(dataByte + location)] = data[dataByte];
            bytesWritten++;
        }
        pageLocation = 0x00;
        for(u16_t i = 0; i <= 0xFF; ++i) {
    1e42:	2580      	movs	r5, #128	; 0x80
    1e44:	3301      	adds	r3, #1
    1e46:	006d      	lsls	r5, r5, #1
    1e48:	42ab      	cmp	r3, r5
    1e4a:	d1f4      	bne.n	1e36 <makePage+0x32>
    1e4c:	2300      	movs	r3, #0
    1e4e:	1c5d      	adds	r5, r3, #1
            pageToWrite[i] = pageBuffer[i];
            pageBuffer[i] = 0;
        }
        for (u16_t dataByte = 0; bytesWritten < bytesToWrite; ++dataByte) {
    1e50:	4284      	cmp	r4, r0
    1e52:	d207      	bcs.n	1e64 <makePage+0x60>
            pageBuffer[dataByte] = data[bytesWritten];
    1e54:	4667      	mov	r7, ip
    1e56:	5d0e      	ldrb	r6, [r1, r4]
            bytesWritten++;
    1e58:	3401      	adds	r4, #1
        for(u16_t i = 0; i <= 0xFF; ++i) {
            pageToWrite[i] = pageBuffer[i];
            pageBuffer[i] = 0;
        }
        for (u16_t dataByte = 0; bytesWritten < bytesToWrite; ++dataByte) {
            pageBuffer[dataByte] = data[bytesWritten];
    1e5a:	54fe      	strb	r6, [r7, r3]
            bytesWritten++;
    1e5c:	b2e4      	uxtb	r4, r4
            pageLocation = dataByte + 1;
    1e5e:	7015      	strb	r5, [r2, #0]
    1e60:	002b      	movs	r3, r5
    1e62:	e7f4      	b.n	1e4e <makePage+0x4a>
        }
        pageReady = true;
    1e64:	2201      	movs	r2, #1
    1e66:	4b0a      	ldr	r3, [pc, #40]	; (1e90 <makePage+0x8c>)
    1e68:	701a      	strb	r2, [r3, #0]
    1e6a:	e009      	b.n	1e80 <makePage+0x7c>

    } else {
        for (u16_t dataByte = 0; dataByte <= bytesToWrite; ++dataByte) {
    1e6c:	4283      	cmp	r3, r0
    1e6e:	d807      	bhi.n	1e80 <makePage+0x7c>
            pageBuffer[(dataByte + location)] = data[dataByte];
    1e70:	5ccf      	ldrb	r7, [r1, r3]
    1e72:	18e6      	adds	r6, r4, r3
    1e74:	5577      	strb	r7, [r6, r5]
            bytesWritten++;
            pageLocation = location + dataByte;
    1e76:	18ee      	adds	r6, r5, r3
            pageLocation = dataByte + 1;
        }
        pageReady = true;

    } else {
        for (u16_t dataByte = 0; dataByte <= bytesToWrite; ++dataByte) {
    1e78:	3301      	adds	r3, #1
            pageBuffer[(dataByte + location)] = data[dataByte];
            bytesWritten++;
            pageLocation = location + dataByte;
    1e7a:	7016      	strb	r6, [r2, #0]
            pageLocation = dataByte + 1;
        }
        pageReady = true;

    } else {
        for (u16_t dataByte = 0; dataByte <= bytesToWrite; ++dataByte) {
    1e7c:	b29b      	uxth	r3, r3
    1e7e:	e7f5      	b.n	1e6c <makePage+0x68>
            pageBuffer[(dataByte + location)] = data[dataByte];
            bytesWritten++;
            pageLocation = location + dataByte;
        }
    }
}
    1e80:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1e82:	46c0      	nop			; (mov r8, r8)
    1e84:	2000079c 	.word	0x2000079c
    1e88:	20000515 	.word	0x20000515
    1e8c:	20000690 	.word	0x20000690
    1e90:	20000790 	.word	0x20000790

00001e94 <logFlight>:


void logFlight() {
    1e94:	b51f      	push	{r0, r1, r2, r3, r4, lr}

    u8_t bytesToSend = 16;
    u8_t dataToSend[16];

    dataToSend[0] = FLIGHT_LOG;
    1e96:	2346      	movs	r3, #70	; 0x46
    1e98:	466a      	mov	r2, sp
    1e9a:	7013      	strb	r3, [r2, #0]
    dataToSend[1] = 0;
    1e9c:	2300      	movs	r3, #0

    dataToSend[2] = offsets.offsetBufferTime >> 0;
    1e9e:	4669      	mov	r1, sp
    dataToSend[3] = offsets.offsetBufferTime >> 8;
    1ea0:	4668      	mov	r0, sp

    u8_t bytesToSend = 16;
    u8_t dataToSend[16];

    dataToSend[0] = FLIGHT_LOG;
    dataToSend[1] = 0;
    1ea2:	7053      	strb	r3, [r2, #1]

    dataToSend[2] = offsets.offsetBufferTime >> 0;
    1ea4:	4a10      	ldr	r2, [pc, #64]	; (1ee8 <logFlight+0x54>)
    1ea6:	6813      	ldr	r3, [r2, #0]
    1ea8:	708b      	strb	r3, [r1, #2]
    dataToSend[3] = offsets.offsetBufferTime >> 8;
    1eaa:	0a19      	lsrs	r1, r3, #8
    1eac:	70c1      	strb	r1, [r0, #3]
    dataToSend[4] = offsets.offsetBufferTime >> 16;
    1eae:	0c19      	lsrs	r1, r3, #16
    dataToSend[5] = offsets.offsetBufferTime >> 24;
    1eb0:	0e1b      	lsrs	r3, r3, #24
    1eb2:	7143      	strb	r3, [r0, #5]

    dataToSend[6] = offsets.groundOffset >> 0;
    1eb4:	6993      	ldr	r3, [r2, #24]
    dataToSend[0] = FLIGHT_LOG;
    dataToSend[1] = 0;

    dataToSend[2] = offsets.offsetBufferTime >> 0;
    dataToSend[3] = offsets.offsetBufferTime >> 8;
    dataToSend[4] = offsets.offsetBufferTime >> 16;
    1eb6:	7101      	strb	r1, [r0, #4]
    dataToSend[5] = offsets.offsetBufferTime >> 24;

    dataToSend[6] = offsets.groundOffset >> 0;
    dataToSend[7] = offsets.groundOffset >> 8;
    1eb8:	0a19      	lsrs	r1, r3, #8
    dataToSend[2] = offsets.offsetBufferTime >> 0;
    dataToSend[3] = offsets.offsetBufferTime >> 8;
    dataToSend[4] = offsets.offsetBufferTime >> 16;
    dataToSend[5] = offsets.offsetBufferTime >> 24;

    dataToSend[6] = offsets.groundOffset >> 0;
    1eba:	7183      	strb	r3, [r0, #6]
    dataToSend[7] = offsets.groundOffset >> 8;
    1ebc:	71c1      	strb	r1, [r0, #7]
    dataToSend[8] = offsets.groundOffset >> 16;
    1ebe:	0c19      	lsrs	r1, r3, #16
    dataToSend[9] = offsets.groundOffset >> 24;
    1ec0:	0e1b      	lsrs	r3, r3, #24
    1ec2:	7243      	strb	r3, [r0, #9]

    dataToSend[10] = offsets.groundTemperature >> 0;
    1ec4:	6a13      	ldr	r3, [r2, #32]
    dataToSend[4] = offsets.offsetBufferTime >> 16;
    dataToSend[5] = offsets.offsetBufferTime >> 24;

    dataToSend[6] = offsets.groundOffset >> 0;
    dataToSend[7] = offsets.groundOffset >> 8;
    dataToSend[8] = offsets.groundOffset >> 16;
    1ec6:	7201      	strb	r1, [r0, #8]
    dataToSend[9] = offsets.groundOffset >> 24;

    dataToSend[10] = offsets.groundTemperature >> 0;
    dataToSend[11] = offsets.groundTemperature >> 8;
    1ec8:	0a1a      	lsrs	r2, r3, #8
    dataToSend[6] = offsets.groundOffset >> 0;
    dataToSend[7] = offsets.groundOffset >> 8;
    dataToSend[8] = offsets.groundOffset >> 16;
    dataToSend[9] = offsets.groundOffset >> 24;

    dataToSend[10] = offsets.groundTemperature >> 0;
    1eca:	7283      	strb	r3, [r0, #10]
    dataToSend[11] = offsets.groundTemperature >> 8;
    1ecc:	72c2      	strb	r2, [r0, #11]
    dataToSend[12] = offsets.groundTemperature >> 16;
    1ece:	0c1a      	lsrs	r2, r3, #16
    dataToSend[13] = offsets.groundTemperature >> 24;
    1ed0:	0e1b      	lsrs	r3, r3, #24
    1ed2:	7343      	strb	r3, [r0, #13]

    //dataToSend[14] = accel >> 0;
    dataToSend[15] = 0xfe;
    1ed4:	23fe      	movs	r3, #254	; 0xfe
    dataToSend[8] = offsets.groundOffset >> 16;
    dataToSend[9] = offsets.groundOffset >> 24;

    dataToSend[10] = offsets.groundTemperature >> 0;
    dataToSend[11] = offsets.groundTemperature >> 8;
    dataToSend[12] = offsets.groundTemperature >> 16;
    1ed6:	7302      	strb	r2, [r0, #12]
    dataToSend[13] = offsets.groundTemperature >> 24;

    //dataToSend[14] = accel >> 0;
    dataToSend[15] = 0xfe;
    1ed8:	73c3      	strb	r3, [r0, #15]
    dataToSend[5] = offsets.offsetBufferTime >> 24;

    dataToSend[6] = offsets.groundOffset >> 0;
    dataToSend[7] = offsets.groundOffset >> 8;
    dataToSend[8] = offsets.groundOffset >> 16;
    dataToSend[9] = offsets.groundOffset >> 24;
    1eda:	4669      	mov	r1, sp
    dataToSend[13] = offsets.groundTemperature >> 24;

    //dataToSend[14] = accel >> 0;
    dataToSend[15] = 0xfe;

    makePage(bytesToSend, dataToSend);
    1edc:	2010      	movs	r0, #16
    1ede:	4b03      	ldr	r3, [pc, #12]	; (1eec <logFlight+0x58>)
    1ee0:	4798      	blx	r3
}
    1ee2:	b005      	add	sp, #20
    1ee4:	bd00      	pop	{pc}
    1ee6:	46c0      	nop			; (mov r8, r8)
    1ee8:	200004d0 	.word	0x200004d0
    1eec:	00001e05 	.word	0x00001e05

00001ef0 <logEvent>:

void logEvent(u8_t eventType) {
    1ef0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

    u8_t bytesToSend = 12;
    u8_t dataToSend[12];

    dataToSend[0] = EVENT_LOG;
    1ef2:	2345      	movs	r3, #69	; 0x45
    dataToSend[1] = eventType;
    dataToSend[2] = sample.sampleTick >> 0;
    1ef4:	4d12      	ldr	r5, [pc, #72]	; (1f40 <logEvent+0x50>)
void logEvent(u8_t eventType) {

    u8_t bytesToSend = 12;
    u8_t dataToSend[12];

    dataToSend[0] = EVENT_LOG;
    1ef6:	ac01      	add	r4, sp, #4
    1ef8:	7023      	strb	r3, [r4, #0]
    dataToSend[1] = eventType;
    dataToSend[2] = sample.sampleTick >> 0;
    1efa:	686b      	ldr	r3, [r5, #4]
    dataToSend[3] = sample.sampleTick >> 8;
    dataToSend[4] = sample.sampleTick >> 16;
    dataToSend[5] = sample.sampleTick >> 24;

    dataToSend[6] = altitudeAGL() >> 0;
    1efc:	4e11      	ldr	r6, [pc, #68]	; (1f44 <logEvent+0x54>)
    u8_t bytesToSend = 12;
    u8_t dataToSend[12];

    dataToSend[0] = EVENT_LOG;
    dataToSend[1] = eventType;
    dataToSend[2] = sample.sampleTick >> 0;
    1efe:	70a3      	strb	r3, [r4, #2]
    dataToSend[3] = sample.sampleTick >> 8;
    1f00:	686b      	ldr	r3, [r5, #4]

    u8_t bytesToSend = 12;
    u8_t dataToSend[12];

    dataToSend[0] = EVENT_LOG;
    dataToSend[1] = eventType;
    1f02:	7060      	strb	r0, [r4, #1]
    dataToSend[2] = sample.sampleTick >> 0;
    dataToSend[3] = sample.sampleTick >> 8;
    1f04:	0a1b      	lsrs	r3, r3, #8
    1f06:	70e3      	strb	r3, [r4, #3]
    dataToSend[4] = sample.sampleTick >> 16;
    1f08:	686b      	ldr	r3, [r5, #4]
    1f0a:	0c1b      	lsrs	r3, r3, #16
    1f0c:	7123      	strb	r3, [r4, #4]
    dataToSend[5] = sample.sampleTick >> 24;
    1f0e:	686b      	ldr	r3, [r5, #4]
    1f10:	0e1b      	lsrs	r3, r3, #24
    1f12:	7163      	strb	r3, [r4, #5]

    dataToSend[6] = altitudeAGL() >> 0;
    1f14:	47b0      	blx	r6
    1f16:	71a0      	strb	r0, [r4, #6]
    dataToSend[7] = altitudeAGL() >> 8;
    1f18:	47b0      	blx	r6
    1f1a:	1200      	asrs	r0, r0, #8
    1f1c:	71e0      	strb	r0, [r4, #7]
    dataToSend[8] = altitudeAGL() >> 16;
    1f1e:	47b0      	blx	r6
    1f20:	1400      	asrs	r0, r0, #16
    1f22:	7220      	strb	r0, [r4, #8]
    dataToSend[9] = altitudeAGL() >> 24;
    1f24:	47b0      	blx	r6
    1f26:	1600      	asrs	r0, r0, #24
    1f28:	7260      	strb	r0, [r4, #9]

    dataToSend[10] = sample.voltage.batV >> 0;
    1f2a:	892b      	ldrh	r3, [r5, #8]
    dataToSend[11] = sample.voltage.batV >> 8;

    makePage(bytesToSend, dataToSend);
    1f2c:	0021      	movs	r1, r4
    dataToSend[6] = altitudeAGL() >> 0;
    dataToSend[7] = altitudeAGL() >> 8;
    dataToSend[8] = altitudeAGL() >> 16;
    dataToSend[9] = altitudeAGL() >> 24;

    dataToSend[10] = sample.voltage.batV >> 0;
    1f2e:	72a3      	strb	r3, [r4, #10]
    dataToSend[11] = sample.voltage.batV >> 8;
    1f30:	892b      	ldrh	r3, [r5, #8]

    makePage(bytesToSend, dataToSend);
    1f32:	200c      	movs	r0, #12
    dataToSend[7] = altitudeAGL() >> 8;
    dataToSend[8] = altitudeAGL() >> 16;
    dataToSend[9] = altitudeAGL() >> 24;

    dataToSend[10] = sample.voltage.batV >> 0;
    dataToSend[11] = sample.voltage.batV >> 8;
    1f34:	0a1b      	lsrs	r3, r3, #8
    1f36:	72e3      	strb	r3, [r4, #11]

    makePage(bytesToSend, dataToSend);
    1f38:	4b03      	ldr	r3, [pc, #12]	; (1f48 <logEvent+0x58>)
    1f3a:	4798      	blx	r3

}
    1f3c:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
    1f3e:	46c0      	nop			; (mov r8, r8)
    1f40:	200007a0 	.word	0x200007a0
    1f44:	00000b05 	.word	0x00000b05
    1f48:	00001e05 	.word	0x00001e05

00001f4c <logSensors>:
void logSensors() {

    u8_t bytesToSend = 24;
    u8_t dataToSend[24];

    dataToSend[0] = SENSOR_LOG;
    1f4c:	2353      	movs	r3, #83	; 0x53

    makePage(bytesToSend, dataToSend);

}

void logSensors() {
    1f4e:	b5f0      	push	{r4, r5, r6, r7, lr}
    u8_t bytesToSend = 24;
    u8_t dataToSend[24];

    dataToSend[0] = SENSOR_LOG;

    dataToSend[1] = sample.sampleTick >> 0;
    1f50:	4e5a      	ldr	r6, [pc, #360]	; (20bc <STACK_SIZE+0xbc>)

    makePage(bytesToSend, dataToSend);

}

void logSensors() {
    1f52:	b08f      	sub	sp, #60	; 0x3c

    u8_t bytesToSend = 24;
    u8_t dataToSend[24];

    dataToSend[0] = SENSOR_LOG;
    1f54:	af08      	add	r7, sp, #32
    1f56:	703b      	strb	r3, [r7, #0]

    dataToSend[1] = sample.sampleTick >> 0;
    1f58:	6873      	ldr	r3, [r6, #4]
    dataToSend[2] = sample.sampleTick >> 8;
    dataToSend[3] = sample.sampleTick >> 16;
    dataToSend[4] = sample.sampleTick >> 24;

    dataToSend[5] = altitudeAGL() >> 0;
    1f5a:	4c59      	ldr	r4, [pc, #356]	; (20c0 <STACK_SIZE+0xc0>)
    u8_t bytesToSend = 24;
    u8_t dataToSend[24];

    dataToSend[0] = SENSOR_LOG;

    dataToSend[1] = sample.sampleTick >> 0;
    1f5c:	707b      	strb	r3, [r7, #1]
    dataToSend[2] = sample.sampleTick >> 8;
    1f5e:	6873      	ldr	r3, [r6, #4]
    1f60:	0a1b      	lsrs	r3, r3, #8
    1f62:	70bb      	strb	r3, [r7, #2]
    dataToSend[3] = sample.sampleTick >> 16;
    1f64:	6873      	ldr	r3, [r6, #4]
    1f66:	0c1b      	lsrs	r3, r3, #16
    1f68:	70fb      	strb	r3, [r7, #3]
    dataToSend[4] = sample.sampleTick >> 24;
    1f6a:	6873      	ldr	r3, [r6, #4]
    1f6c:	0e1b      	lsrs	r3, r3, #24
    1f6e:	713b      	strb	r3, [r7, #4]

    dataToSend[5] = altitudeAGL() >> 0;
    1f70:	47a0      	blx	r4
    1f72:	7178      	strb	r0, [r7, #5]
    dataToSend[6] = altitudeAGL() >> 8;
    1f74:	47a0      	blx	r4
    1f76:	1200      	asrs	r0, r0, #8
    1f78:	71b8      	strb	r0, [r7, #6]
    dataToSend[7] = altitudeAGL() >> 16;
    1f7a:	47a0      	blx	r4
    1f7c:	1400      	asrs	r0, r0, #16
    1f7e:	71f8      	strb	r0, [r7, #7]
    dataToSend[8] = altitudeAGL() >> 24;
    1f80:	47a0      	blx	r4

    volatile float fractionalAccel = accel - (int16_t)(accel);
    1f82:	4b50      	ldr	r3, [pc, #320]	; (20c4 <STACK_SIZE+0xc4>)
    dataToSend[4] = sample.sampleTick >> 24;

    dataToSend[5] = altitudeAGL() >> 0;
    dataToSend[6] = altitudeAGL() >> 8;
    dataToSend[7] = altitudeAGL() >> 16;
    dataToSend[8] = altitudeAGL() >> 24;
    1f84:	1600      	asrs	r0, r0, #24

    volatile float fractionalAccel = accel - (int16_t)(accel);
    1f86:	681c      	ldr	r4, [r3, #0]
    1f88:	685d      	ldr	r5, [r3, #4]
    dataToSend[4] = sample.sampleTick >> 24;

    dataToSend[5] = altitudeAGL() >> 0;
    dataToSend[6] = altitudeAGL() >> 8;
    dataToSend[7] = altitudeAGL() >> 16;
    dataToSend[8] = altitudeAGL() >> 24;
    1f8a:	7238      	strb	r0, [r7, #8]

    volatile float fractionalAccel = accel - (int16_t)(accel);
    1f8c:	0029      	movs	r1, r5
    1f8e:	4b4e      	ldr	r3, [pc, #312]	; (20c8 <STACK_SIZE+0xc8>)
    1f90:	0020      	movs	r0, r4
    1f92:	4798      	blx	r3
    1f94:	b203      	sxth	r3, r0
    1f96:	9300      	str	r3, [sp, #0]
    1f98:	0018      	movs	r0, r3
    1f9a:	4b4c      	ldr	r3, [pc, #304]	; (20cc <STACK_SIZE+0xcc>)
    1f9c:	4798      	blx	r3
    1f9e:	0002      	movs	r2, r0
    1fa0:	000b      	movs	r3, r1
    1fa2:	0020      	movs	r0, r4
    1fa4:	0029      	movs	r1, r5
    1fa6:	4c4a      	ldr	r4, [pc, #296]	; (20d0 <STACK_SIZE+0xd0>)
    1fa8:	47a0      	blx	r4
    1faa:	4b4a      	ldr	r3, [pc, #296]	; (20d4 <STACK_SIZE+0xd4>)
    1fac:	4798      	blx	r3
    1fae:	9006      	str	r0, [sp, #24]
    volatile int16_t fractAccelPart = fractionalAccel * 1000;
    1fb0:	9806      	ldr	r0, [sp, #24]
    1fb2:	4949      	ldr	r1, [pc, #292]	; (20d8 <STACK_SIZE+0xd8>)
    1fb4:	4b49      	ldr	r3, [pc, #292]	; (20dc <STACK_SIZE+0xdc>)
    1fb6:	4798      	blx	r3
    1fb8:	4b49      	ldr	r3, [pc, #292]	; (20e0 <STACK_SIZE+0xe0>)
    1fba:	4798      	blx	r3

    dataToSend[9] = (int16_t)(accel) >> 0;
    1fbc:	466a      	mov	r2, sp
    1fbe:	7812      	ldrb	r2, [r2, #0]
    dataToSend[6] = altitudeAGL() >> 8;
    dataToSend[7] = altitudeAGL() >> 16;
    dataToSend[8] = altitudeAGL() >> 24;

    volatile float fractionalAccel = accel - (int16_t)(accel);
    volatile int16_t fractAccelPart = fractionalAccel * 1000;
    1fc0:	ab04      	add	r3, sp, #16

    dataToSend[9] = (int16_t)(accel) >> 0;
    1fc2:	727a      	strb	r2, [r7, #9]
    dataToSend[10] = (int16_t)(accel) >> 8;
    1fc4:	9a00      	ldr	r2, [sp, #0]
    dataToSend[6] = altitudeAGL() >> 8;
    dataToSend[7] = altitudeAGL() >> 16;
    dataToSend[8] = altitudeAGL() >> 24;

    volatile float fractionalAccel = accel - (int16_t)(accel);
    volatile int16_t fractAccelPart = fractionalAccel * 1000;
    1fc6:	b200      	sxth	r0, r0
    1fc8:	8058      	strh	r0, [r3, #2]

    dataToSend[9] = (int16_t)(accel) >> 0;
    dataToSend[10] = (int16_t)(accel) >> 8;
    1fca:	1212      	asrs	r2, r2, #8
    1fcc:	72ba      	strb	r2, [r7, #10]
    dataToSend[6] = altitudeAGL() >> 8;
    dataToSend[7] = altitudeAGL() >> 16;
    dataToSend[8] = altitudeAGL() >> 24;

    volatile float fractionalAccel = accel - (int16_t)(accel);
    volatile int16_t fractAccelPart = fractionalAccel * 1000;
    1fce:	3302      	adds	r3, #2

    dataToSend[9] = (int16_t)(accel) >> 0;
    dataToSend[10] = (int16_t)(accel) >> 8;
    dataToSend[11] = fractAccelPart >> 0;
    1fd0:	881a      	ldrh	r2, [r3, #0]
    dataToSend[12] = fractAccelPart >> 8;
    1fd2:	881b      	ldrh	r3, [r3, #0]
    volatile float fractionalAccel = accel - (int16_t)(accel);
    volatile int16_t fractAccelPart = fractionalAccel * 1000;

    dataToSend[9] = (int16_t)(accel) >> 0;
    dataToSend[10] = (int16_t)(accel) >> 8;
    dataToSend[11] = fractAccelPart >> 0;
    1fd4:	72fa      	strb	r2, [r7, #11]
    dataToSend[12] = fractAccelPart >> 8;
    1fd6:	0a1b      	lsrs	r3, r3, #8
    1fd8:	733b      	strb	r3, [r7, #12]


    volatile float fractionalVelocity = velocity - (int16_t)(velocity);
    1fda:	4b42      	ldr	r3, [pc, #264]	; (20e4 <STACK_SIZE+0xe4>)
    1fdc:	681a      	ldr	r2, [r3, #0]
    1fde:	685b      	ldr	r3, [r3, #4]
    1fe0:	9200      	str	r2, [sp, #0]
    1fe2:	9301      	str	r3, [sp, #4]
    1fe4:	0010      	movs	r0, r2
    1fe6:	0019      	movs	r1, r3
    1fe8:	4b37      	ldr	r3, [pc, #220]	; (20c8 <STACK_SIZE+0xc8>)
    1fea:	4798      	blx	r3
    1fec:	b205      	sxth	r5, r0
    1fee:	4b37      	ldr	r3, [pc, #220]	; (20cc <STACK_SIZE+0xcc>)
    1ff0:	0028      	movs	r0, r5
    1ff2:	4798      	blx	r3
    1ff4:	0002      	movs	r2, r0
    1ff6:	000b      	movs	r3, r1
    1ff8:	9800      	ldr	r0, [sp, #0]
    1ffa:	9901      	ldr	r1, [sp, #4]
    1ffc:	47a0      	blx	r4
    1ffe:	4b35      	ldr	r3, [pc, #212]	; (20d4 <STACK_SIZE+0xd4>)
    2000:	4798      	blx	r3
    2002:	9007      	str	r0, [sp, #28]
    volatile int16_t fractVelocityPart = fractionalVelocity * 1000;
    2004:	4934      	ldr	r1, [pc, #208]	; (20d8 <STACK_SIZE+0xd8>)
    2006:	4b35      	ldr	r3, [pc, #212]	; (20dc <STACK_SIZE+0xdc>)
    2008:	9807      	ldr	r0, [sp, #28]
    200a:	4798      	blx	r3
    200c:	4b34      	ldr	r3, [pc, #208]	; (20e0 <STACK_SIZE+0xe0>)
    200e:	4798      	blx	r3
    2010:	ab05      	add	r3, sp, #20
    2012:	b200      	sxth	r0, r0
	volatile int16_t wholePart = (int16_t)(velocity);
    2014:	aa04      	add	r2, sp, #16
    dataToSend[11] = fractAccelPart >> 0;
    dataToSend[12] = fractAccelPart >> 8;


    volatile float fractionalVelocity = velocity - (int16_t)(velocity);
    volatile int16_t fractVelocityPart = fractionalVelocity * 1000;
    2016:	8018      	strh	r0, [r3, #0]
	volatile int16_t wholePart = (int16_t)(velocity);
    2018:	80d5      	strh	r5, [r2, #6]

    dataToSend[13] = (int16_t)(velocity) >> 0;
    dataToSend[14] = (int16_t)(velocity) >> 8;
    201a:	122a      	asrs	r2, r5, #8
    201c:	73ba      	strb	r2, [r7, #14]
    dataToSend[15] = fractVelocityPart >> 0;
    201e:	881a      	ldrh	r2, [r3, #0]
    2020:	492e      	ldr	r1, [pc, #184]	; (20dc <STACK_SIZE+0xdc>)
    2022:	73fa      	strb	r2, [r7, #15]
    dataToSend[16] = fractVelocityPart >> 8;
    2024:	881a      	ldrh	r2, [r3, #0]

    volatile float fractionalVelocity = velocity - (int16_t)(velocity);
    volatile int16_t fractVelocityPart = fractionalVelocity * 1000;
	volatile int16_t wholePart = (int16_t)(velocity);

    dataToSend[13] = (int16_t)(velocity) >> 0;
    2026:	737d      	strb	r5, [r7, #13]
    dataToSend[14] = (int16_t)(velocity) >> 8;
    dataToSend[15] = fractVelocityPart >> 0;
    dataToSend[16] = fractVelocityPart >> 8;
    2028:	0a12      	lsrs	r2, r2, #8
    202a:	743a      	strb	r2, [r7, #16]

    if ( (fractVelocityPart < 0 & (int16_t)(velocity) > 0) | (fractVelocityPart > 0 & (int16_t)(velocity) < 0) ) {
    202c:	881a      	ldrh	r2, [r3, #0]
    202e:	8818      	ldrh	r0, [r3, #0]
    2030:	17eb      	asrs	r3, r5, #31
    2032:	1b5b      	subs	r3, r3, r5
    2034:	0bd2      	lsrs	r2, r2, #15
    2036:	0fdb      	lsrs	r3, r3, #31
    2038:	b200      	sxth	r0, r0
    203a:	0034      	movs	r4, r6
    203c:	9103      	str	r1, [sp, #12]
    203e:	4213      	tst	r3, r2
    2040:	d103      	bne.n	204a <STACK_SIZE+0x4a>
    2042:	17c3      	asrs	r3, r0, #31
    2044:	1a18      	subs	r0, r3, r0
    2046:	4005      	ands	r5, r0
    2048:	d502      	bpl.n	2050 <STACK_SIZE+0x50>
        beep(200);
    204a:	20c8      	movs	r0, #200	; 0xc8
    204c:	4b26      	ldr	r3, [pc, #152]	; (20e8 <STACK_SIZE+0xe8>)
    204e:	4798      	blx	r3
    }

    dataToSend[17] = (u32_t)sample.altitudefeet >> 0;
    2050:	6c20      	ldr	r0, [r4, #64]	; 0x40
    2052:	6c61      	ldr	r1, [r4, #68]	; 0x44
    2054:	4d25      	ldr	r5, [pc, #148]	; (20ec <STACK_SIZE+0xec>)
    2056:	47a8      	blx	r5
    2058:	7478      	strb	r0, [r7, #17]
    dataToSend[18] = (u32_t)sample.altitudefeet >> 8;
    205a:	6c20      	ldr	r0, [r4, #64]	; 0x40
    205c:	6c61      	ldr	r1, [r4, #68]	; 0x44
    205e:	47a8      	blx	r5
    2060:	0a00      	lsrs	r0, r0, #8
    2062:	74b8      	strb	r0, [r7, #18]
    dataToSend[19] = (u32_t)sample.altitudefeet >> 16;
    2064:	6c20      	ldr	r0, [r4, #64]	; 0x40
    2066:	6c61      	ldr	r1, [r4, #68]	; 0x44
    2068:	47a8      	blx	r5
    206a:	0c00      	lsrs	r0, r0, #16
    206c:	74f8      	strb	r0, [r7, #19]
    dataToSend[20] = (u32_t)sample.altitudefeet >> 24;
    206e:	6c20      	ldr	r0, [r4, #64]	; 0x40
    2070:	6c61      	ldr	r1, [r4, #68]	; 0x44
    2072:	47a8      	blx	r5

    float fractionalAccelraw = sample.accelZ - (int16_t)(sample.accelZ);
    2074:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    2076:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    }

    dataToSend[17] = (u32_t)sample.altitudefeet >> 0;
    dataToSend[18] = (u32_t)sample.altitudefeet >> 8;
    dataToSend[19] = (u32_t)sample.altitudefeet >> 16;
    dataToSend[20] = (u32_t)sample.altitudefeet >> 24;
    2078:	0e00      	lsrs	r0, r0, #24

    float fractionalAccelraw = sample.accelZ - (int16_t)(sample.accelZ);
    207a:	9300      	str	r3, [sp, #0]
    u8_t fractAccelRawPart = fractionalAccelraw * 256;

    dataToSend[21] = (int16_t)(sample.accelZ) >> 0;
    207c:	4d18      	ldr	r5, [pc, #96]	; (20e0 <STACK_SIZE+0xe0>)
    }

    dataToSend[17] = (u32_t)sample.altitudefeet >> 0;
    dataToSend[18] = (u32_t)sample.altitudefeet >> 8;
    dataToSend[19] = (u32_t)sample.altitudefeet >> 16;
    dataToSend[20] = (u32_t)sample.altitudefeet >> 24;
    207e:	7538      	strb	r0, [r7, #20]

    float fractionalAccelraw = sample.accelZ - (int16_t)(sample.accelZ);
    u8_t fractAccelRawPart = fractionalAccelraw * 256;

    dataToSend[21] = (int16_t)(sample.accelZ) >> 0;
    2080:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    2082:	47a8      	blx	r5
    2084:	7578      	strb	r0, [r7, #21]
    dataToSend[22] = (int16_t)(sample.accelZ) >> 8;
    2086:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    2088:	47a8      	blx	r5
    208a:	0a00      	lsrs	r0, r0, #8
    208c:	75b8      	strb	r0, [r7, #22]
    dataToSend[23] = fractAccelRawPart >> 0;
    208e:	9800      	ldr	r0, [sp, #0]
    2090:	47a8      	blx	r5
    2092:	4b17      	ldr	r3, [pc, #92]	; (20f0 <STACK_SIZE+0xf0>)
    2094:	b200      	sxth	r0, r0
    2096:	4798      	blx	r3
    2098:	4b16      	ldr	r3, [pc, #88]	; (20f4 <STACK_SIZE+0xf4>)
    209a:	1c01      	adds	r1, r0, #0
    209c:	1c30      	adds	r0, r6, #0
    209e:	4798      	blx	r3
    20a0:	2187      	movs	r1, #135	; 0x87
    20a2:	9b03      	ldr	r3, [sp, #12]
    20a4:	05c9      	lsls	r1, r1, #23
    20a6:	4798      	blx	r3
    20a8:	4b13      	ldr	r3, [pc, #76]	; (20f8 <STACK_SIZE+0xf8>)
    20aa:	4798      	blx	r3
     dataToSend[22] = 0xfd;
     dataToSend[23] = 0xfe;

     */

    makePage(bytesToSend, dataToSend);
    20ac:	0039      	movs	r1, r7
    float fractionalAccelraw = sample.accelZ - (int16_t)(sample.accelZ);
    u8_t fractAccelRawPart = fractionalAccelraw * 256;

    dataToSend[21] = (int16_t)(sample.accelZ) >> 0;
    dataToSend[22] = (int16_t)(sample.accelZ) >> 8;
    dataToSend[23] = fractAccelRawPart >> 0;
    20ae:	75f8      	strb	r0, [r7, #23]
     dataToSend[22] = 0xfd;
     dataToSend[23] = 0xfe;

     */

    makePage(bytesToSend, dataToSend);
    20b0:	4b12      	ldr	r3, [pc, #72]	; (20fc <STACK_SIZE+0xfc>)
    20b2:	2018      	movs	r0, #24
    20b4:	4798      	blx	r3
}
    20b6:	b00f      	add	sp, #60	; 0x3c
    20b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    20ba:	46c0      	nop			; (mov r8, r8)
    20bc:	200007a0 	.word	0x200007a0
    20c0:	00000b05 	.word	0x00000b05
    20c4:	20000660 	.word	0x20000660
    20c8:	00005db5 	.word	0x00005db5
    20cc:	00005e21 	.word	0x00005e21
    20d0:	000056cd 	.word	0x000056cd
    20d4:	00005fbd 	.word	0x00005fbd
    20d8:	447a0000 	.word	0x447a0000
    20dc:	00003d31 	.word	0x00003d31
    20e0:	00004265 	.word	0x00004265
    20e4:	20000668 	.word	0x20000668
    20e8:	00000c69 	.word	0x00000c69
    20ec:	00003b95 	.word	0x00003b95
    20f0:	000042a9 	.word	0x000042a9
    20f4:	00003f59 	.word	0x00003f59
    20f8:	00003b65 	.word	0x00003b65
    20fc:	00001e05 	.word	0x00001e05

00002100 <getFlightStartAddress>:

    u8_t addressToCheck[3];

    u16_t flightAddressLoc = FLIGHTZEROSTART + (flightToFind * 0x06);

    AT25SEreadSample(flightAddressLoc, 0x03, addressToCheck);
    2100:	2306      	movs	r3, #6
    makePage(bytesToSend, dataToSend);
}



u32_t getFlightStartAddress(u8_t flightToFind) {
    2102:	b513      	push	{r0, r1, r4, lr}

    u8_t addressToCheck[3];

    u16_t flightAddressLoc = FLIGHTZEROSTART + (flightToFind * 0x06);

    AT25SEreadSample(flightAddressLoc, 0x03, addressToCheck);
    2104:	4358      	muls	r0, r3
    2106:	ac01      	add	r4, sp, #4
    2108:	3001      	adds	r0, #1
    210a:	30ff      	adds	r0, #255	; 0xff
    210c:	0022      	movs	r2, r4
    210e:	2103      	movs	r1, #3
    2110:	4b04      	ldr	r3, [pc, #16]	; (2124 <getFlightStartAddress+0x24>)
    2112:	4798      	blx	r3

    u32_t flightStartAddress = addressToCheck[0] << 0 | addressToCheck[1] << 8 | addressToCheck[2] << 16;
    2114:	7860      	ldrb	r0, [r4, #1]
    2116:	78a3      	ldrb	r3, [r4, #2]
    2118:	0200      	lsls	r0, r0, #8
    211a:	041b      	lsls	r3, r3, #16
    211c:	4318      	orrs	r0, r3
    211e:	7823      	ldrb	r3, [r4, #0]
    2120:	4318      	orrs	r0, r3

    return flightStartAddress;
}
    2122:	bd16      	pop	{r1, r2, r4, pc}
    2124:	00000341 	.word	0x00000341

00002128 <FindFlightEndingAddress>:

    u8_t addressToCheck[3];

    u16_t flightAddressLoc = FLIGHTZEROEND + (findThisFlightsEnd * 0x06);

    AT25SEreadSample(flightAddressLoc, 0x03, addressToCheck);
    2128:	2306      	movs	r3, #6
    u32_t flightStartAddress = addressToCheck[0] << 0 | addressToCheck[1] << 8 | addressToCheck[2] << 16;

    return flightStartAddress;
}

u32_t FindFlightEndingAddress(u8_t findThisFlightsEnd) {
    212a:	b513      	push	{r0, r1, r4, lr}

    u8_t addressToCheck[3];

    u16_t flightAddressLoc = FLIGHTZEROEND + (findThisFlightsEnd * 0x06);

    AT25SEreadSample(flightAddressLoc, 0x03, addressToCheck);
    212c:	4358      	muls	r0, r3
    212e:	ac01      	add	r4, sp, #4
    2130:	3004      	adds	r0, #4
    2132:	30ff      	adds	r0, #255	; 0xff
    2134:	0022      	movs	r2, r4
    2136:	2103      	movs	r1, #3
    2138:	4b04      	ldr	r3, [pc, #16]	; (214c <FindFlightEndingAddress+0x24>)
    213a:	4798      	blx	r3

    u32_t flightEndAddress = addressToCheck[0] << 0 | addressToCheck[1] << 8 | addressToCheck[2] << 16;
    213c:	7860      	ldrb	r0, [r4, #1]
    213e:	78a3      	ldrb	r3, [r4, #2]
    2140:	0200      	lsls	r0, r0, #8
    2142:	041b      	lsls	r3, r3, #16
    2144:	4318      	orrs	r0, r3
    2146:	7823      	ldrb	r3, [r4, #0]
    2148:	4318      	orrs	r0, r3

    return flightEndAddress;
}
    214a:	bd16      	pop	{r1, r2, r4, pc}
    214c:	00000341 	.word	0x00000341

00002150 <isFlightLogged>:

bool isFlightLogged(u8_t flightNumbToCheck) {
    2150:	b510      	push	{r4, lr}

    u32_t possibleStart = getFlightStartAddress(flightNumbToCheck);
    2152:	4b04      	ldr	r3, [pc, #16]	; (2164 <isFlightLogged+0x14>)
    2154:	4798      	blx	r3
    2156:	4b04      	ldr	r3, [pc, #16]	; (2168 <isFlightLogged+0x18>)
    if (possibleStart == 0xFFFFFF) {
        return false;
    } else {
        return true;
    }
}
    2158:	18c0      	adds	r0, r0, r3
    215a:	1e43      	subs	r3, r0, #1
    215c:	4198      	sbcs	r0, r3
    215e:	b2c0      	uxtb	r0, r0
    2160:	bd10      	pop	{r4, pc}
    2162:	46c0      	nop			; (mov r8, r8)
    2164:	00002101 	.word	0x00002101
    2168:	ff000001 	.word	0xff000001

0000216c <writeFlightEndAddress>:



void writeFlightEndAddress() {
    216c:	b507      	push	{r0, r1, r2, lr}
    u32_t endingAddress = currentAddress;

    u8_t address[3] = {endingAddress >> 0, endingAddress >> 8, endingAddress >> 16};

    u16_t flightAddressLoc = FLIGHTZEROEND + (flightNumb * 0x06);
    AT25SFWriteBytes(flightAddressLoc, 3, address);
    216e:	2006      	movs	r0, #6



void writeFlightEndAddress() {

    u32_t endingAddress = currentAddress;
    2170:	4b09      	ldr	r3, [pc, #36]	; (2198 <writeFlightEndAddress+0x2c>)

    u8_t address[3] = {endingAddress >> 0, endingAddress >> 8, endingAddress >> 16};
    2172:	aa01      	add	r2, sp, #4



void writeFlightEndAddress() {

    u32_t endingAddress = currentAddress;
    2174:	681b      	ldr	r3, [r3, #0]

    u8_t address[3] = {endingAddress >> 0, endingAddress >> 8, endingAddress >> 16};
    2176:	7013      	strb	r3, [r2, #0]
    2178:	0a19      	lsrs	r1, r3, #8
    217a:	0c1b      	lsrs	r3, r3, #16
    217c:	7093      	strb	r3, [r2, #2]

    u16_t flightAddressLoc = FLIGHTZEROEND + (flightNumb * 0x06);
    217e:	4b07      	ldr	r3, [pc, #28]	; (219c <writeFlightEndAddress+0x30>)

void writeFlightEndAddress() {

    u32_t endingAddress = currentAddress;

    u8_t address[3] = {endingAddress >> 0, endingAddress >> 8, endingAddress >> 16};
    2180:	7051      	strb	r1, [r2, #1]

    u16_t flightAddressLoc = FLIGHTZEROEND + (flightNumb * 0x06);
    AT25SFWriteBytes(flightAddressLoc, 3, address);
    2182:	781b      	ldrb	r3, [r3, #0]
    2184:	2103      	movs	r1, #3
    2186:	4358      	muls	r0, r3
    2188:	3004      	adds	r0, #4
    218a:	30ff      	adds	r0, #255	; 0xff
    218c:	4b04      	ldr	r3, [pc, #16]	; (21a0 <writeFlightEndAddress+0x34>)
    218e:	4798      	blx	r3
    delay_ms(10);
    2190:	200a      	movs	r0, #10
    2192:	4b04      	ldr	r3, [pc, #16]	; (21a4 <writeFlightEndAddress+0x38>)
    2194:	4798      	blx	r3

}
    2196:	bd07      	pop	{r0, r1, r2, pc}
    2198:	20000794 	.word	0x20000794
    219c:	20000501 	.word	0x20000501
    21a0:	00000255 	.word	0x00000255
    21a4:	00000ef9 	.word	0x00000ef9

000021a8 <findNewFlightStart>:




void findNewFlightStart() {
    21a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

    for (u8_t flightNumbToCheck = 0; flightNumbToCheck < 20; ++flightNumbToCheck) {
    21aa:	2400      	movs	r4, #0

        if (!isFlightLogged(flightNumbToCheck)) {
    21ac:	0020      	movs	r0, r4
    21ae:	4b23      	ldr	r3, [pc, #140]	; (223c <findNewFlightStart+0x94>)
    21b0:	4798      	blx	r3
    21b2:	2800      	cmp	r0, #0
    21b4:	d13c      	bne.n	2230 <findNewFlightStart+0x88>
    21b6:	4f22      	ldr	r7, [pc, #136]	; (2240 <findNewFlightStart+0x98>)
    21b8:	ad01      	add	r5, sp, #4

            if (flightNumbToCheck > 0) {
    21ba:	2c00      	cmp	r4, #0
    21bc:	d016      	beq.n	21ec <findNewFlightStart+0x44>


                u32_t startAddress = FindFlightEndingAddress(flightNumbToCheck - 1);
    21be:	1e60      	subs	r0, r4, #1
    21c0:	4b20      	ldr	r3, [pc, #128]	; (2244 <findNewFlightStart+0x9c>)
    21c2:	b2c0      	uxtb	r0, r0
    21c4:	4798      	blx	r3
                delay_ms(5);
    21c6:	4b20      	ldr	r3, [pc, #128]	; (2248 <findNewFlightStart+0xa0>)
        if (!isFlightLogged(flightNumbToCheck)) {

            if (flightNumbToCheck > 0) {


                u32_t startAddress = FindFlightEndingAddress(flightNumbToCheck - 1);
    21c8:	0006      	movs	r6, r0
                delay_ms(5);
    21ca:	2005      	movs	r0, #5
    21cc:	4798      	blx	r3
                currentAddress = startAddress;

                u8_t address[3] = {startAddress >> 0, startAddress >> 8, startAddress >> 16};

                u16_t flightAddressLoc = FLIGHTZEROSTART + (flightNumbToCheck * 0x06);
                AT25SFWriteBytes(flightAddressLoc, 3, address);
    21ce:	2006      	movs	r0, #6
    21d0:	4360      	muls	r0, r4
                u32_t startAddress = FindFlightEndingAddress(flightNumbToCheck - 1);
                delay_ms(5);

                currentAddress = startAddress;

                u8_t address[3] = {startAddress >> 0, startAddress >> 8, startAddress >> 16};
    21d2:	0a33      	lsrs	r3, r6, #8

                u16_t flightAddressLoc = FLIGHTZEROSTART + (flightNumbToCheck * 0x06);
                AT25SFWriteBytes(flightAddressLoc, 3, address);
    21d4:	3001      	adds	r0, #1


                u32_t startAddress = FindFlightEndingAddress(flightNumbToCheck - 1);
                delay_ms(5);

                currentAddress = startAddress;
    21d6:	603e      	str	r6, [r7, #0]

                u8_t address[3] = {startAddress >> 0, startAddress >> 8, startAddress >> 16};
    21d8:	702e      	strb	r6, [r5, #0]
    21da:	706b      	strb	r3, [r5, #1]
    21dc:	0c36      	lsrs	r6, r6, #16

                u16_t flightAddressLoc = FLIGHTZEROSTART + (flightNumbToCheck * 0x06);
                AT25SFWriteBytes(flightAddressLoc, 3, address);
    21de:	30ff      	adds	r0, #255	; 0xff
    21e0:	002a      	movs	r2, r5
    21e2:	2103      	movs	r1, #3
    21e4:	4b19      	ldr	r3, [pc, #100]	; (224c <findNewFlightStart+0xa4>)
                u32_t startAddress = FindFlightEndingAddress(flightNumbToCheck - 1);
                delay_ms(5);

                currentAddress = startAddress;

                u8_t address[3] = {startAddress >> 0, startAddress >> 8, startAddress >> 16};
    21e6:	70ae      	strb	r6, [r5, #2]

                u16_t flightAddressLoc = FLIGHTZEROSTART + (flightNumbToCheck * 0x06);
                AT25SFWriteBytes(flightAddressLoc, 3, address);
    21e8:	4798      	blx	r3
    21ea:	e00f      	b.n	220c <findNewFlightStart+0x64>

                // for flight 0, starting address is always 0x00100 (beginning of second 4k block)
            } else {
                u8_t address[3] = {0x00,0x10,0x00};
    21ec:	2310      	movs	r3, #16
                AT25SFWriteBytes(FLIGHTZEROSTART, 3, address);
    21ee:	2080      	movs	r0, #128	; 0x80
                u16_t flightAddressLoc = FLIGHTZEROSTART + (flightNumbToCheck * 0x06);
                AT25SFWriteBytes(flightAddressLoc, 3, address);

                // for flight 0, starting address is always 0x00100 (beginning of second 4k block)
            } else {
                u8_t address[3] = {0x00,0x10,0x00};
    21f0:	706b      	strb	r3, [r5, #1]
                AT25SFWriteBytes(FLIGHTZEROSTART, 3, address);
    21f2:	0040      	lsls	r0, r0, #1
    21f4:	4b15      	ldr	r3, [pc, #84]	; (224c <findNewFlightStart+0xa4>)
    21f6:	002a      	movs	r2, r5
    21f8:	2103      	movs	r1, #3
                u16_t flightAddressLoc = FLIGHTZEROSTART + (flightNumbToCheck * 0x06);
                AT25SFWriteBytes(flightAddressLoc, 3, address);

                // for flight 0, starting address is always 0x00100 (beginning of second 4k block)
            } else {
                u8_t address[3] = {0x00,0x10,0x00};
    21fa:	702c      	strb	r4, [r5, #0]
    21fc:	70ac      	strb	r4, [r5, #2]
                AT25SFWriteBytes(FLIGHTZEROSTART, 3, address);
    21fe:	4798      	blx	r3
                currentAddress = 0x001000;
    2200:	2380      	movs	r3, #128	; 0x80
    2202:	015b      	lsls	r3, r3, #5
    2204:	603b      	str	r3, [r7, #0]
                beep(1500);
    2206:	4812      	ldr	r0, [pc, #72]	; (2250 <findNewFlightStart+0xa8>)
    2208:	4b12      	ldr	r3, [pc, #72]	; (2254 <findNewFlightStart+0xac>)
    220a:	4798      	blx	r3
            }
            flightNumb = flightNumbToCheck;
    220c:	4b12      	ldr	r3, [pc, #72]	; (2258 <findNewFlightStart+0xb0>)
    220e:	701c      	strb	r4, [r3, #0]

            while (flightNumbToCheck > 0) {
                beep(500);
    2210:	20fa      	movs	r0, #250	; 0xfa
    2212:	0040      	lsls	r0, r0, #1
                currentAddress = 0x001000;
                beep(1500);
            }
            flightNumb = flightNumbToCheck;

            while (flightNumbToCheck > 0) {
    2214:	2c00      	cmp	r4, #0
    2216:	d008      	beq.n	222a <findNewFlightStart+0x82>
                beep(500);
    2218:	4b0e      	ldr	r3, [pc, #56]	; (2254 <findNewFlightStart+0xac>)
    221a:	4798      	blx	r3
                delay_ms(500);
    221c:	20fa      	movs	r0, #250	; 0xfa
    221e:	4b0a      	ldr	r3, [pc, #40]	; (2248 <findNewFlightStart+0xa0>)
    2220:	0040      	lsls	r0, r0, #1
                --flightNumbToCheck;
    2222:	3c01      	subs	r4, #1
            }
            flightNumb = flightNumbToCheck;

            while (flightNumbToCheck > 0) {
                beep(500);
                delay_ms(500);
    2224:	4798      	blx	r3
                --flightNumbToCheck;
    2226:	b2e4      	uxtb	r4, r4
    2228:	e7f2      	b.n	2210 <findNewFlightStart+0x68>
            }
            delay_ms(500);
    222a:	4b07      	ldr	r3, [pc, #28]	; (2248 <findNewFlightStart+0xa0>)
    222c:	4798      	blx	r3
            break;
    222e:	e003      	b.n	2238 <findNewFlightStart+0x90>



void findNewFlightStart() {

    for (u8_t flightNumbToCheck = 0; flightNumbToCheck < 20; ++flightNumbToCheck) {
    2230:	3401      	adds	r4, #1
    2232:	b2e4      	uxtb	r4, r4
    2234:	2c14      	cmp	r4, #20
    2236:	d1b9      	bne.n	21ac <findNewFlightStart+0x4>
            }
            delay_ms(500);
            break;
        }
    }
}
    2238:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    223a:	46c0      	nop			; (mov r8, r8)
    223c:	00002151 	.word	0x00002151
    2240:	20000794 	.word	0x20000794
    2244:	00002129 	.word	0x00002129
    2248:	00000ef9 	.word	0x00000ef9
    224c:	00000255 	.word	0x00000255
    2250:	000005dc 	.word	0x000005dc
    2254:	00000c69 	.word	0x00000c69
    2258:	20000501 	.word	0x20000501

0000225c <takeSample>:
#include <util.h>
#include <boardDefines.h>
#include <MS5803.h>

bool takeSample() {
    return SampleBool;
    225c:	4b01      	ldr	r3, [pc, #4]	; (2264 <takeSample+0x8>)
    225e:	7818      	ldrb	r0, [r3, #0]
}
    2260:	4770      	bx	lr
    2262:	46c0      	nop			; (mov r8, r8)
    2264:	20000514 	.word	0x20000514

00002268 <pullSample>:

void pullSample() {
    SampleBool = true;
    2268:	2201      	movs	r2, #1
    226a:	4b01      	ldr	r3, [pc, #4]	; (2270 <pullSample+0x8>)
    226c:	701a      	strb	r2, [r3, #0]
}
    226e:	4770      	bx	lr
    2270:	20000514 	.word	0x20000514

00002274 <sampleTick>:
}

volatile sample_t sample;

void sampleTick() {
    SampleBool = false;
    2274:	2200      	movs	r2, #0
    SampleBool = false;
}

volatile sample_t sample;

void sampleTick() {
    2276:	b5f0      	push	{r4, r5, r6, r7, lr}
    SampleBool = false;
    2278:	4bb1      	ldr	r3, [pc, #708]	; (2540 <sampleTick+0x2cc>)
    SampleBool = false;
}

volatile sample_t sample;

void sampleTick() {
    227a:	b085      	sub	sp, #20
    SampleBool = false;

    // take last samples time to discover Dt before setting new time
    sample.tickDelta = millis() - sample.sampleTick;
    227c:	4db1      	ldr	r5, [pc, #708]	; (2544 <sampleTick+0x2d0>)
}

volatile sample_t sample;

void sampleTick() {
    SampleBool = false;
    227e:	701a      	strb	r2, [r3, #0]

    // take last samples time to discover Dt before setting new time
    sample.tickDelta = millis() - sample.sampleTick;
    2280:	47a8      	blx	r5
    2282:	4cb1      	ldr	r4, [pc, #708]	; (2548 <sampleTick+0x2d4>)
    2284:	6863      	ldr	r3, [r4, #4]
    2286:	1ac0      	subs	r0, r0, r3
    2288:	b280      	uxth	r0, r0
    228a:	8020      	strh	r0, [r4, #0]
    sample.sampleTick = millis();
    228c:	47a8      	blx	r5
    altimeter.flightTime = sample.sampleTick - offsets.StartupTick;
    228e:	4aaf      	ldr	r2, [pc, #700]	; (254c <sampleTick+0x2d8>)
void sampleTick() {
    SampleBool = false;

    // take last samples time to discover Dt before setting new time
    sample.tickDelta = millis() - sample.sampleTick;
    sample.sampleTick = millis();
    2290:	6060      	str	r0, [r4, #4]
    altimeter.flightTime = sample.sampleTick - offsets.StartupTick;
    2292:	6a92      	ldr	r2, [r2, #40]	; 0x28
    2294:	6863      	ldr	r3, [r4, #4]

    sample.voltage.batV = adc_read(senseBatPin);
    2296:	4eae      	ldr	r6, [pc, #696]	; (2550 <sampleTick+0x2dc>)
    SampleBool = false;

    // take last samples time to discover Dt before setting new time
    sample.tickDelta = millis() - sample.sampleTick;
    sample.sampleTick = millis();
    altimeter.flightTime = sample.sampleTick - offsets.StartupTick;
    2298:	1a9b      	subs	r3, r3, r2
    229a:	4aae      	ldr	r2, [pc, #696]	; (2554 <sampleTick+0x2e0>)

    sample.voltage.batV = adc_read(senseBatPin);
    229c:	7831      	ldrb	r1, [r6, #0]
    SampleBool = false;

    // take last samples time to discover Dt before setting new time
    sample.tickDelta = millis() - sample.sampleTick;
    sample.sampleTick = millis();
    altimeter.flightTime = sample.sampleTick - offsets.StartupTick;
    229e:	6093      	str	r3, [r2, #8]

    sample.voltage.batV = adc_read(senseBatPin);
    22a0:	7873      	ldrb	r3, [r6, #1]
    22a2:	78b0      	ldrb	r0, [r6, #2]
    22a4:	021b      	lsls	r3, r3, #8
    22a6:	430b      	orrs	r3, r1
    22a8:	0400      	lsls	r0, r0, #16
    22aa:	001a      	movs	r2, r3
    22ac:	0003      	movs	r3, r0
    22ae:	78f0      	ldrb	r0, [r6, #3]
    22b0:	4313      	orrs	r3, r2
    22b2:	0600      	lsls	r0, r0, #24
    22b4:	4da8      	ldr	r5, [pc, #672]	; (2558 <sampleTick+0x2e4>)
    22b6:	7931      	ldrb	r1, [r6, #4]
    22b8:	4318      	orrs	r0, r3
    22ba:	47a8      	blx	r5
    22bc:	8120      	strh	r0, [r4, #8]
    sample.voltage.batFloat = sample.voltage.batV * 0.0019;
    22be:	8920      	ldrh	r0, [r4, #8]
    22c0:	4ba6      	ldr	r3, [pc, #664]	; (255c <sampleTick+0x2e8>)
    22c2:	b280      	uxth	r0, r0
    22c4:	4798      	blx	r3
    22c6:	4aa6      	ldr	r2, [pc, #664]	; (2560 <sampleTick+0x2ec>)
    22c8:	4fa6      	ldr	r7, [pc, #664]	; (2564 <sampleTick+0x2f0>)
    22ca:	4ba7      	ldr	r3, [pc, #668]	; (2568 <sampleTick+0x2f4>)
    22cc:	47b8      	blx	r7
    22ce:	4ba7      	ldr	r3, [pc, #668]	; (256c <sampleTick+0x2f8>)
    22d0:	4798      	blx	r3

    sample.voltage.senseA = adc_read(senseAPin);
    22d2:	79b3      	ldrb	r3, [r6, #6]
    22d4:	7971      	ldrb	r1, [r6, #5]
    sample.tickDelta = millis() - sample.sampleTick;
    sample.sampleTick = millis();
    altimeter.flightTime = sample.sampleTick - offsets.StartupTick;

    sample.voltage.batV = adc_read(senseBatPin);
    sample.voltage.batFloat = sample.voltage.batV * 0.0019;
    22d6:	60e0      	str	r0, [r4, #12]

    sample.voltage.senseA = adc_read(senseAPin);
    22d8:	79f0      	ldrb	r0, [r6, #7]
    22da:	021b      	lsls	r3, r3, #8
    22dc:	430b      	orrs	r3, r1
    22de:	0400      	lsls	r0, r0, #16
    22e0:	001a      	movs	r2, r3
    22e2:	0003      	movs	r3, r0
    22e4:	7a30      	ldrb	r0, [r6, #8]
    22e6:	4313      	orrs	r3, r2
    22e8:	0600      	lsls	r0, r0, #24
    22ea:	7a71      	ldrb	r1, [r6, #9]
    22ec:	4318      	orrs	r0, r3
    22ee:	47a8      	blx	r5
    sample.voltage.senseB = adc_read(senseBPin);
    22f0:	7af3      	ldrb	r3, [r6, #11]
    22f2:	7ab1      	ldrb	r1, [r6, #10]
    altimeter.flightTime = sample.sampleTick - offsets.StartupTick;

    sample.voltage.batV = adc_read(senseBatPin);
    sample.voltage.batFloat = sample.voltage.batV * 0.0019;

    sample.voltage.senseA = adc_read(senseAPin);
    22f4:	8220      	strh	r0, [r4, #16]
    sample.voltage.senseB = adc_read(senseBPin);
    22f6:	7b30      	ldrb	r0, [r6, #12]
    22f8:	021b      	lsls	r3, r3, #8
    22fa:	430b      	orrs	r3, r1
    22fc:	0400      	lsls	r0, r0, #16
    22fe:	001a      	movs	r2, r3
    2300:	0003      	movs	r3, r0
    2302:	7b70      	ldrb	r0, [r6, #13]
    2304:	4313      	orrs	r3, r2
    2306:	0600      	lsls	r0, r0, #24
    2308:	7bb1      	ldrb	r1, [r6, #14]
    230a:	4318      	orrs	r0, r3
    230c:	47a8      	blx	r5
    sample.voltage.senseC = adc_read(senseCPin);
    230e:	7c33      	ldrb	r3, [r6, #16]
    2310:	7bf1      	ldrb	r1, [r6, #15]

    sample.voltage.batV = adc_read(senseBatPin);
    sample.voltage.batFloat = sample.voltage.batV * 0.0019;

    sample.voltage.senseA = adc_read(senseAPin);
    sample.voltage.senseB = adc_read(senseBPin);
    2312:	8260      	strh	r0, [r4, #18]
    sample.voltage.senseC = adc_read(senseCPin);
    2314:	7c70      	ldrb	r0, [r6, #17]
    2316:	021b      	lsls	r3, r3, #8
    2318:	430b      	orrs	r3, r1
    231a:	0400      	lsls	r0, r0, #16
    231c:	001a      	movs	r2, r3
    231e:	0003      	movs	r3, r0
    2320:	7cb0      	ldrb	r0, [r6, #18]
    2322:	4313      	orrs	r3, r2
    2324:	0600      	lsls	r0, r0, #24
    2326:	7cf1      	ldrb	r1, [r6, #19]
    2328:	4318      	orrs	r0, r3
    232a:	47a8      	blx	r5
    sample.voltage.senseD = adc_read(senseDPin);
    232c:	7d73      	ldrb	r3, [r6, #21]
    232e:	7d31      	ldrb	r1, [r6, #20]
    sample.voltage.batV = adc_read(senseBatPin);
    sample.voltage.batFloat = sample.voltage.batV * 0.0019;

    sample.voltage.senseA = adc_read(senseAPin);
    sample.voltage.senseB = adc_read(senseBPin);
    sample.voltage.senseC = adc_read(senseCPin);
    2330:	82a0      	strh	r0, [r4, #20]
    sample.voltage.senseD = adc_read(senseDPin);
    2332:	7db0      	ldrb	r0, [r6, #22]
    2334:	021b      	lsls	r3, r3, #8
    2336:	430b      	orrs	r3, r1
    2338:	0400      	lsls	r0, r0, #16
    233a:	001a      	movs	r2, r3
    233c:	0003      	movs	r3, r0
    233e:	7df0      	ldrb	r0, [r6, #23]
    2340:	4313      	orrs	r3, r2
    2342:	0600      	lsls	r0, r0, #24
    2344:	7e31      	ldrb	r1, [r6, #24]
    2346:	4318      	orrs	r0, r3
    2348:	47a8      	blx	r5

    sample.analogRaw = adc_read(analogAccelPin);
    234a:	7eb3      	ldrb	r3, [r6, #26]
    234c:	7e71      	ldrb	r1, [r6, #25]
    sample.voltage.batFloat = sample.voltage.batV * 0.0019;

    sample.voltage.senseA = adc_read(senseAPin);
    sample.voltage.senseB = adc_read(senseBPin);
    sample.voltage.senseC = adc_read(senseCPin);
    sample.voltage.senseD = adc_read(senseDPin);
    234e:	82e0      	strh	r0, [r4, #22]

    sample.analogRaw = adc_read(analogAccelPin);
    2350:	7ef0      	ldrb	r0, [r6, #27]
    2352:	021b      	lsls	r3, r3, #8
    2354:	430b      	orrs	r3, r1
    2356:	0400      	lsls	r0, r0, #16
    2358:	001a      	movs	r2, r3
    235a:	0003      	movs	r3, r0
    235c:	0037      	movs	r7, r6
    235e:	7f30      	ldrb	r0, [r6, #28]
    2360:	4313      	orrs	r3, r2
    2362:	0600      	lsls	r0, r0, #24
    2364:	7f79      	ldrb	r1, [r7, #29]
    2366:	4318      	orrs	r0, r3
    2368:	47a8      	blx	r5
    236a:	8320      	strh	r0, [r4, #24]
    sample.analogAccel = (sample.analogRaw - 3900) * -0.0154;
    236c:	8b20      	ldrh	r0, [r4, #24]
    236e:	4b80      	ldr	r3, [pc, #512]	; (2570 <sampleTick+0x2fc>)
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    2370:	2780      	movs	r7, #128	; 0x80
    2372:	18c0      	adds	r0, r0, r3
    2374:	4b79      	ldr	r3, [pc, #484]	; (255c <sampleTick+0x2e8>)
    2376:	4798      	blx	r3
    2378:	4a7e      	ldr	r2, [pc, #504]	; (2574 <sampleTick+0x300>)
    237a:	4d7a      	ldr	r5, [pc, #488]	; (2564 <sampleTick+0x2f0>)
    237c:	4b7e      	ldr	r3, [pc, #504]	; (2578 <sampleTick+0x304>)
    237e:	47a8      	blx	r5
    2380:	4b7a      	ldr	r3, [pc, #488]	; (256c <sampleTick+0x2f8>)
    2382:	4798      	blx	r3
    2384:	4b7d      	ldr	r3, [pc, #500]	; (257c <sampleTick+0x308>)
    2386:	01ff      	lsls	r7, r7, #7

    uint8_t dummy_Tx = 0xFF;
    uint8_t dummy_rx;

    pinLow(cs_baro);
    dummy_rx = spiDataTransfer(SPI2, 0x50);
    2388:	4d7d      	ldr	r5, [pc, #500]	; (2580 <sampleTick+0x30c>)
    238a:	2150      	movs	r1, #80	; 0x50
    sample.voltage.senseB = adc_read(senseBPin);
    sample.voltage.senseC = adc_read(senseCPin);
    sample.voltage.senseD = adc_read(senseDPin);

    sample.analogRaw = adc_read(analogAccelPin);
    sample.analogAccel = (sample.analogRaw - 3900) * -0.0154;
    238c:	61e0      	str	r0, [r4, #28]
    238e:	615f      	str	r7, [r3, #20]

    uint8_t dummy_Tx = 0xFF;
    uint8_t dummy_rx;

    pinLow(cs_baro);
    dummy_rx = spiDataTransfer(SPI2, 0x50);
    2390:	2002      	movs	r0, #2
    2392:	47a8      	blx	r5
    pinHigh(cs_baro);
    delay_us(600);
    2394:	2096      	movs	r0, #150	; 0x96
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    2396:	4b79      	ldr	r3, [pc, #484]	; (257c <sampleTick+0x308>)
    2398:	0080      	lsls	r0, r0, #2
    239a:	619f      	str	r7, [r3, #24]
    239c:	4b79      	ldr	r3, [pc, #484]	; (2584 <sampleTick+0x310>)
    239e:	4798      	blx	r3
    uint32_t tempRaw = readMS5803AdcResults();
    23a0:	4b79      	ldr	r3, [pc, #484]	; (2588 <sampleTick+0x314>)
    23a2:	4798      	blx	r3
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    23a4:	4b75      	ldr	r3, [pc, #468]	; (257c <sampleTick+0x308>)
    23a6:	9001      	str	r0, [sp, #4]

    pinLow(cs_baro);
    dummy_rx = spiDataTransfer(SPI2, 0x40);
    23a8:	2140      	movs	r1, #64	; 0x40
    23aa:	615f      	str	r7, [r3, #20]
    23ac:	2002      	movs	r0, #2
    23ae:	47a8      	blx	r5
    23b0:	2280      	movs	r2, #128	; 0x80
    sample.voltage.senseA = adc_read(senseAPin);
    sample.voltage.senseB = adc_read(senseBPin);
    sample.voltage.senseC = adc_read(senseCPin);
    sample.voltage.senseD = adc_read(senseDPin);

    sample.analogRaw = adc_read(analogAccelPin);
    23b2:	26ff      	movs	r6, #255	; 0xff
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    23b4:	4b71      	ldr	r3, [pc, #452]	; (257c <sampleTick+0x308>)
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    23b6:	00d2      	lsls	r2, r2, #3
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    23b8:	619f      	str	r7, [r3, #24]
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    23ba:	4b74      	ldr	r3, [pc, #464]	; (258c <sampleTick+0x318>)



// Accel data
    pinLow(cs_accel);
    dummy_rx = spiDataTransfer(SPI0, BMI055_X_ACC_LSB | BMI055_READ_REG);
    23bc:	2182      	movs	r1, #130	; 0x82
    23be:	601a      	str	r2, [r3, #0]
    23c0:	2000      	movs	r0, #0
    23c2:	47a8      	blx	r5

    u16_t accelXRaw = spiDataTransfer(SPI0,dummy_Tx);
    23c4:	0031      	movs	r1, r6
    23c6:	2000      	movs	r0, #0
    23c8:	47a8      	blx	r5
    accelXRaw = accelXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    23ca:	0031      	movs	r1, r6

// Accel data
    pinLow(cs_accel);
    dummy_rx = spiDataTransfer(SPI0, BMI055_X_ACC_LSB | BMI055_READ_REG);

    u16_t accelXRaw = spiDataTransfer(SPI0,dummy_Tx);
    23cc:	0007      	movs	r7, r0
    accelXRaw = accelXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    23ce:	2000      	movs	r0, #0
    23d0:	47a8      	blx	r5
    23d2:	0200      	lsls	r0, r0, #8
    23d4:	4307      	orrs	r7, r0
    23d6:	b23b      	sxth	r3, r7
    u16_t accelYRaw = spiDataTransfer(SPI0,dummy_Tx);
    23d8:	0031      	movs	r1, r6
    23da:	2000      	movs	r0, #0
// Accel data
    pinLow(cs_accel);
    dummy_rx = spiDataTransfer(SPI0, BMI055_X_ACC_LSB | BMI055_READ_REG);

    u16_t accelXRaw = spiDataTransfer(SPI0,dummy_Tx);
    accelXRaw = accelXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    23dc:	9302      	str	r3, [sp, #8]
    u16_t accelYRaw = spiDataTransfer(SPI0,dummy_Tx);
    23de:	47a8      	blx	r5
    accelYRaw = accelYRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    23e0:	0031      	movs	r1, r6
    pinLow(cs_accel);
    dummy_rx = spiDataTransfer(SPI0, BMI055_X_ACC_LSB | BMI055_READ_REG);

    u16_t accelXRaw = spiDataTransfer(SPI0,dummy_Tx);
    accelXRaw = accelXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    u16_t accelYRaw = spiDataTransfer(SPI0,dummy_Tx);
    23e2:	0007      	movs	r7, r0
    accelYRaw = accelYRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    23e4:	2000      	movs	r0, #0
    23e6:	47a8      	blx	r5
    23e8:	0200      	lsls	r0, r0, #8
    23ea:	4307      	orrs	r7, r0
    23ec:	b23b      	sxth	r3, r7
    u16_t accelZRaw = spiDataTransfer(SPI0,dummy_Tx);
    23ee:	0031      	movs	r1, r6
    23f0:	2000      	movs	r0, #0
    dummy_rx = spiDataTransfer(SPI0, BMI055_X_ACC_LSB | BMI055_READ_REG);

    u16_t accelXRaw = spiDataTransfer(SPI0,dummy_Tx);
    accelXRaw = accelXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    u16_t accelYRaw = spiDataTransfer(SPI0,dummy_Tx);
    accelYRaw = accelYRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    23f2:	9303      	str	r3, [sp, #12]
    u16_t accelZRaw = spiDataTransfer(SPI0,dummy_Tx);
    23f4:	47a8      	blx	r5
    accelZRaw = accelZRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    23f6:	0031      	movs	r1, r6

    u16_t accelXRaw = spiDataTransfer(SPI0,dummy_Tx);
    accelXRaw = accelXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    u16_t accelYRaw = spiDataTransfer(SPI0,dummy_Tx);
    accelYRaw = accelYRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    u16_t accelZRaw = spiDataTransfer(SPI0,dummy_Tx);
    23f8:	0007      	movs	r7, r0
    accelZRaw = accelZRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    23fa:	2000      	movs	r0, #0
    23fc:	47a8      	blx	r5
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    23fe:	2180      	movs	r1, #128	; 0x80
    2400:	4a63      	ldr	r2, [pc, #396]	; (2590 <sampleTick+0x31c>)
    2402:	00c9      	lsls	r1, r1, #3
    2404:	6011      	str	r1, [r2, #0]

    if (negativeX) {
        accelXint = accelXint | ~((1 << 16) - 1);
        accelXint =  accelXint >> 4;
    } else {
        accelXint =  accelXint >> 4;
    2406:	9a02      	ldr	r2, [sp, #8]
    u16_t accelXRaw = spiDataTransfer(SPI0,dummy_Tx);
    accelXRaw = accelXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    u16_t accelYRaw = spiDataTransfer(SPI0,dummy_Tx);
    accelYRaw = accelYRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    u16_t accelZRaw = spiDataTransfer(SPI0,dummy_Tx);
    accelZRaw = accelZRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    2408:	0203      	lsls	r3, r0, #8
    240a:	431f      	orrs	r7, r3

    if (negativeX) {
        accelXint = accelXint | ~((1 << 16) - 1);
        accelXint =  accelXint >> 4;
    } else {
        accelXint =  accelXint >> 4;
    240c:	1110      	asrs	r0, r2, #4
    }
    if (negativeY) {
        accelYint =  accelYint | ~((1 << 16) - 1);
        accelYint =  accelYint >> 4;
    } else {
        accelYint =  accelYint >> 4;
    240e:	9a03      	ldr	r2, [sp, #12]
    u16_t accelXRaw = spiDataTransfer(SPI0,dummy_Tx);
    accelXRaw = accelXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    u16_t accelYRaw = spiDataTransfer(SPI0,dummy_Tx);
    accelYRaw = accelYRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    u16_t accelZRaw = spiDataTransfer(SPI0,dummy_Tx);
    accelZRaw = accelZRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    2410:	b23b      	sxth	r3, r7
    }
    if (negativeY) {
        accelYint =  accelYint | ~((1 << 16) - 1);
        accelYint =  accelYint >> 4;
    } else {
        accelYint =  accelYint >> 4;
    2412:	1112      	asrs	r2, r2, #4
    }
    if (negativeZ) {
        accelZint =  accelZint | ~((1 << 16) - 1);
        accelZint =  accelZint >> 4;
    } else {
        accelZint =  accelZint >> 4;
    2414:	111b      	asrs	r3, r3, #4
    }
    if (negativeY) {
        accelYint =  accelYint | ~((1 << 16) - 1);
        accelYint =  accelYint >> 4;
    } else {
        accelYint =  accelYint >> 4;
    2416:	9202      	str	r2, [sp, #8]
    }
    if (negativeZ) {
        accelZint =  accelZint | ~((1 << 16) - 1);
        accelZint =  accelZint >> 4;
    } else {
        accelZint =  accelZint >> 4;
    2418:	9303      	str	r3, [sp, #12]
    }

    sample.accelX =  accelXint * BMI055_ACCEL_16G_DIV;
    241a:	4b50      	ldr	r3, [pc, #320]	; (255c <sampleTick+0x2e8>)
    241c:	4798      	blx	r3
    241e:	23fe      	movs	r3, #254	; 0xfe
    2420:	4f50      	ldr	r7, [pc, #320]	; (2564 <sampleTick+0x2f0>)
    2422:	2200      	movs	r2, #0
    2424:	059b      	lsls	r3, r3, #22
    2426:	47b8      	blx	r7
    2428:	4b50      	ldr	r3, [pc, #320]	; (256c <sampleTick+0x2f8>)
    242a:	4798      	blx	r3
    sample.accelY =  accelYint * BMI055_ACCEL_16G_DIV;
    242c:	4b4b      	ldr	r3, [pc, #300]	; (255c <sampleTick+0x2e8>)
        accelZint =  accelZint >> 4;
    } else {
        accelZint =  accelZint >> 4;
    }

    sample.accelX =  accelXint * BMI055_ACCEL_16G_DIV;
    242e:	6220      	str	r0, [r4, #32]
    sample.accelY =  accelYint * BMI055_ACCEL_16G_DIV;
    2430:	9802      	ldr	r0, [sp, #8]
    2432:	4798      	blx	r3
    2434:	23fe      	movs	r3, #254	; 0xfe
    2436:	2200      	movs	r2, #0
    2438:	059b      	lsls	r3, r3, #22
    243a:	47b8      	blx	r7
    243c:	4b4b      	ldr	r3, [pc, #300]	; (256c <sampleTick+0x2f8>)
    243e:	4798      	blx	r3
    sample.accelZ = -accelZint * BMI055_ACCEL_16G_DIV;
    2440:	9b03      	ldr	r3, [sp, #12]
    } else {
        accelZint =  accelZint >> 4;
    }

    sample.accelX =  accelXint * BMI055_ACCEL_16G_DIV;
    sample.accelY =  accelYint * BMI055_ACCEL_16G_DIV;
    2442:	6260      	str	r0, [r4, #36]	; 0x24
    sample.accelZ = -accelZint * BMI055_ACCEL_16G_DIV;
    2444:	4258      	negs	r0, r3
    2446:	4b45      	ldr	r3, [pc, #276]	; (255c <sampleTick+0x2e8>)
    2448:	4798      	blx	r3
    244a:	23fe      	movs	r3, #254	; 0xfe
    244c:	2200      	movs	r2, #0
    244e:	059b      	lsls	r3, r3, #22
    2450:	47b8      	blx	r7
    2452:	4b46      	ldr	r3, [pc, #280]	; (256c <sampleTick+0x2f8>)
    2454:	4798      	blx	r3
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    2456:	2280      	movs	r2, #128	; 0x80
    2458:	4b48      	ldr	r3, [pc, #288]	; (257c <sampleTick+0x308>)
    245a:	00d2      	lsls	r2, r2, #3
    245c:	62a0      	str	r0, [r4, #40]	; 0x28


    // Gyro data
    pinLow(cs_gyro);
    dummy_rx = spiDataTransfer(SPI0, BMI055_X_GYRO_LSB | BMI055_READ_REG);
    245e:	2182      	movs	r1, #130	; 0x82
    2460:	615a      	str	r2, [r3, #20]
    2462:	2000      	movs	r0, #0
    2464:	47a8      	blx	r5
    u16_t gyroXRaw = spiDataTransfer(SPI0,dummy_Tx);
    2466:	0031      	movs	r1, r6
    2468:	2000      	movs	r0, #0
    246a:	47a8      	blx	r5
    gyroXRaw =  gyroXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    246c:	0031      	movs	r1, r6


    // Gyro data
    pinLow(cs_gyro);
    dummy_rx = spiDataTransfer(SPI0, BMI055_X_GYRO_LSB | BMI055_READ_REG);
    u16_t gyroXRaw = spiDataTransfer(SPI0,dummy_Tx);
    246e:	0007      	movs	r7, r0
    gyroXRaw =  gyroXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    2470:	2000      	movs	r0, #0
    2472:	47a8      	blx	r5
    2474:	0200      	lsls	r0, r0, #8
    2476:	4307      	orrs	r7, r0
    2478:	b23b      	sxth	r3, r7
    u16_t gyroYRaw = spiDataTransfer(SPI0,dummy_Tx);
    247a:	0031      	movs	r1, r6
    247c:	2000      	movs	r0, #0

    // Gyro data
    pinLow(cs_gyro);
    dummy_rx = spiDataTransfer(SPI0, BMI055_X_GYRO_LSB | BMI055_READ_REG);
    u16_t gyroXRaw = spiDataTransfer(SPI0,dummy_Tx);
    gyroXRaw =  gyroXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    247e:	9302      	str	r3, [sp, #8]
    u16_t gyroYRaw = spiDataTransfer(SPI0,dummy_Tx);
    2480:	47a8      	blx	r5
    gyroYRaw =  gyroYRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    2482:	0031      	movs	r1, r6
    // Gyro data
    pinLow(cs_gyro);
    dummy_rx = spiDataTransfer(SPI0, BMI055_X_GYRO_LSB | BMI055_READ_REG);
    u16_t gyroXRaw = spiDataTransfer(SPI0,dummy_Tx);
    gyroXRaw =  gyroXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    u16_t gyroYRaw = spiDataTransfer(SPI0,dummy_Tx);
    2484:	0007      	movs	r7, r0
    gyroYRaw =  gyroYRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    2486:	2000      	movs	r0, #0
    2488:	47a8      	blx	r5
    248a:	0200      	lsls	r0, r0, #8
    248c:	4307      	orrs	r7, r0
    248e:	b23b      	sxth	r3, r7
    u16_t gyroZRaw = spiDataTransfer(SPI0,dummy_Tx);
    2490:	0031      	movs	r1, r6
    2492:	2000      	movs	r0, #0
    pinLow(cs_gyro);
    dummy_rx = spiDataTransfer(SPI0, BMI055_X_GYRO_LSB | BMI055_READ_REG);
    u16_t gyroXRaw = spiDataTransfer(SPI0,dummy_Tx);
    gyroXRaw =  gyroXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    u16_t gyroYRaw = spiDataTransfer(SPI0,dummy_Tx);
    gyroYRaw =  gyroYRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    2494:	9303      	str	r3, [sp, #12]
    u16_t gyroZRaw = spiDataTransfer(SPI0,dummy_Tx);
    2496:	47a8      	blx	r5
    gyroZRaw =  gyroZRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    2498:	0031      	movs	r1, r6
    dummy_rx = spiDataTransfer(SPI0, BMI055_X_GYRO_LSB | BMI055_READ_REG);
    u16_t gyroXRaw = spiDataTransfer(SPI0,dummy_Tx);
    gyroXRaw =  gyroXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    u16_t gyroYRaw = spiDataTransfer(SPI0,dummy_Tx);
    gyroYRaw =  gyroYRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    u16_t gyroZRaw = spiDataTransfer(SPI0,dummy_Tx);
    249a:	0007      	movs	r7, r0
    gyroZRaw =  gyroZRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    249c:	2000      	movs	r0, #0
    249e:	47a8      	blx	r5
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    24a0:	2280      	movs	r2, #128	; 0x80
    24a2:	4b36      	ldr	r3, [pc, #216]	; (257c <sampleTick+0x308>)
    24a4:	00d2      	lsls	r2, r2, #3
    24a6:	619a      	str	r2, [r3, #24]

    if (negativeXgyro) {
        gyroXint =  gyroXint | ~((1 << 16) - 1);
        gyroXint =  gyroXint >> 4;
    } else {
        gyroXint =  gyroXint >> 4;
    24a8:	9b02      	ldr	r3, [sp, #8]
    u16_t gyroXRaw = spiDataTransfer(SPI0,dummy_Tx);
    gyroXRaw =  gyroXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    u16_t gyroYRaw = spiDataTransfer(SPI0,dummy_Tx);
    gyroYRaw =  gyroYRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    u16_t gyroZRaw = spiDataTransfer(SPI0,dummy_Tx);
    gyroZRaw =  gyroZRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    24aa:	0205      	lsls	r5, r0, #8

    if (negativeXgyro) {
        gyroXint =  gyroXint | ~((1 << 16) - 1);
        gyroXint =  gyroXint >> 4;
    } else {
        gyroXint =  gyroXint >> 4;
    24ac:	1118      	asrs	r0, r3, #4

    if (negativeYgyro) {
        gyroYint =  gyroYint | ~((1 << 16) - 1);
        gyroYint =  gyroYint >> 4;
    } else {
        gyroYint =  gyroYint >> 4;
    24ae:	9b03      	ldr	r3, [sp, #12]
    u16_t gyroXRaw = spiDataTransfer(SPI0,dummy_Tx);
    gyroXRaw =  gyroXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    u16_t gyroYRaw = spiDataTransfer(SPI0,dummy_Tx);
    gyroYRaw =  gyroYRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    u16_t gyroZRaw = spiDataTransfer(SPI0,dummy_Tx);
    gyroZRaw =  gyroZRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    24b0:	432f      	orrs	r7, r5

    if (negativeYgyro) {
        gyroYint =  gyroYint | ~((1 << 16) - 1);
        gyroYint =  gyroYint >> 4;
    } else {
        gyroYint =  gyroYint >> 4;
    24b2:	111e      	asrs	r6, r3, #4
        gyroZint =  gyroZint >> 4;
    } else {
        gyroZint =  gyroZint >> 4;
    }

    sample.gyroX =  gyroXint * BMI055_GYRO_2000DS_DIV;
    24b4:	4b29      	ldr	r3, [pc, #164]	; (255c <sampleTick+0x2e8>)
    24b6:	4798      	blx	r3
    24b8:	23fe      	movs	r3, #254	; 0xfe
    24ba:	2200      	movs	r2, #0
    u16_t gyroXRaw = spiDataTransfer(SPI0,dummy_Tx);
    gyroXRaw =  gyroXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    u16_t gyroYRaw = spiDataTransfer(SPI0,dummy_Tx);
    gyroYRaw =  gyroYRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    u16_t gyroZRaw = spiDataTransfer(SPI0,dummy_Tx);
    gyroZRaw =  gyroZRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    24bc:	b23d      	sxth	r5, r7
        gyroZint =  gyroZint >> 4;
    } else {
        gyroZint =  gyroZint >> 4;
    }

    sample.gyroX =  gyroXint * BMI055_GYRO_2000DS_DIV;
    24be:	059b      	lsls	r3, r3, #22
    24c0:	4f28      	ldr	r7, [pc, #160]	; (2564 <sampleTick+0x2f0>)
    24c2:	47b8      	blx	r7
    24c4:	4b29      	ldr	r3, [pc, #164]	; (256c <sampleTick+0x2f8>)
    24c6:	4798      	blx	r3
    sample.gyroY =  gyroYint * BMI055_GYRO_2000DS_DIV;
    24c8:	4b24      	ldr	r3, [pc, #144]	; (255c <sampleTick+0x2e8>)
        gyroZint =  gyroZint >> 4;
    } else {
        gyroZint =  gyroZint >> 4;
    }

    sample.gyroX =  gyroXint * BMI055_GYRO_2000DS_DIV;
    24ca:	62e0      	str	r0, [r4, #44]	; 0x2c
    sample.gyroY =  gyroYint * BMI055_GYRO_2000DS_DIV;
    24cc:	0030      	movs	r0, r6
    24ce:	4798      	blx	r3
    24d0:	23fe      	movs	r3, #254	; 0xfe
    24d2:	2200      	movs	r2, #0
    24d4:	059b      	lsls	r3, r3, #22
    24d6:	47b8      	blx	r7
    24d8:	4b24      	ldr	r3, [pc, #144]	; (256c <sampleTick+0x2f8>)
    24da:	4798      	blx	r3

    if (negativeZgyro) {
        gyroZint =  gyroZint | ~((1 << 16) - 1);
        gyroZint =  gyroZint >> 4;
    } else {
        gyroZint =  gyroZint >> 4;
    24dc:	112d      	asrs	r5, r5, #4
    }

    sample.gyroX =  gyroXint * BMI055_GYRO_2000DS_DIV;
    sample.gyroY =  gyroYint * BMI055_GYRO_2000DS_DIV;
    sample.gyroZ =  gyroZint * BMI055_GYRO_2000DS_DIV;
    24de:	4b1f      	ldr	r3, [pc, #124]	; (255c <sampleTick+0x2e8>)
    } else {
        gyroZint =  gyroZint >> 4;
    }

    sample.gyroX =  gyroXint * BMI055_GYRO_2000DS_DIV;
    sample.gyroY =  gyroYint * BMI055_GYRO_2000DS_DIV;
    24e0:	6320      	str	r0, [r4, #48]	; 0x30
    sample.gyroZ =  gyroZint * BMI055_GYRO_2000DS_DIV;
    24e2:	0028      	movs	r0, r5
    24e4:	4798      	blx	r3
    24e6:	23fe      	movs	r3, #254	; 0xfe
    24e8:	2200      	movs	r2, #0
    24ea:	059b      	lsls	r3, r3, #22
    24ec:	47b8      	blx	r7
    24ee:	4b1f      	ldr	r3, [pc, #124]	; (256c <sampleTick+0x2f8>)
    24f0:	4798      	blx	r3
    24f2:	6360      	str	r0, [r4, #52]	; 0x34


    delay_us(400);
    24f4:	20c8      	movs	r0, #200	; 0xc8
    24f6:	4b23      	ldr	r3, [pc, #140]	; (2584 <sampleTick+0x310>)
    24f8:	0040      	lsls	r0, r0, #1
    24fa:	4798      	blx	r3
    u32_t PressureRaw = readMS5803AdcResults();
    24fc:	4b22      	ldr	r3, [pc, #136]	; (2588 <sampleTick+0x314>)
    24fe:	4798      	blx	r3
    ConvertPressureTemperature(PressureRaw, tempRaw, &sample.temperatureCelcus, &sample.pressureMbar);
    2500:	4a24      	ldr	r2, [pc, #144]	; (2594 <sampleTick+0x320>)
    2502:	4b25      	ldr	r3, [pc, #148]	; (2598 <sampleTick+0x324>)
    2504:	9901      	ldr	r1, [sp, #4]
    2506:	4e25      	ldr	r6, [pc, #148]	; (259c <sampleTick+0x328>)
    sample.gyroY =  gyroYint * BMI055_GYRO_2000DS_DIV;
    sample.gyroZ =  gyroZint * BMI055_GYRO_2000DS_DIV;


    delay_us(400);
    u32_t PressureRaw = readMS5803AdcResults();
    2508:	0005      	movs	r5, r0
    ConvertPressureTemperature(PressureRaw, tempRaw, &sample.temperatureCelcus, &sample.pressureMbar);
    250a:	47b0      	blx	r6
    sample.altitudefeet = paToFeetNOAA(sample.pressureMbar);
    250c:	4b24      	ldr	r3, [pc, #144]	; (25a0 <sampleTick+0x32c>)
    250e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    2510:	4798      	blx	r3

    if ( PressureRaw < 10 | tempRaw < 10) {
    2512:	2300      	movs	r3, #0
    2514:	2209      	movs	r2, #9


    delay_us(400);
    u32_t PressureRaw = readMS5803AdcResults();
    ConvertPressureTemperature(PressureRaw, tempRaw, &sample.temperatureCelcus, &sample.pressureMbar);
    sample.altitudefeet = paToFeetNOAA(sample.pressureMbar);
    2516:	6420      	str	r0, [r4, #64]	; 0x40
    2518:	6461      	str	r1, [r4, #68]	; 0x44

    if ( PressureRaw < 10 | tempRaw < 10) {
    251a:	0019      	movs	r1, r3
    251c:	42aa      	cmp	r2, r5
    251e:	415b      	adcs	r3, r3
    2520:	b2db      	uxtb	r3, r3
    2522:	428b      	cmp	r3, r1
    2524:	d105      	bne.n	2532 <sampleTick+0x2be>
    2526:	9901      	ldr	r1, [sp, #4]
    2528:	428a      	cmp	r2, r1
    252a:	415b      	adcs	r3, r3
    252c:	b2db      	uxtb	r3, r3
    252e:	2b00      	cmp	r3, #0
    2530:	d003      	beq.n	253a <sampleTick+0x2c6>
        beep(400);
    2532:	20c8      	movs	r0, #200	; 0xc8
    2534:	4b1b      	ldr	r3, [pc, #108]	; (25a4 <sampleTick+0x330>)
    2536:	0040      	lsls	r0, r0, #1
    2538:	4798      	blx	r3
    }


}
    253a:	b005      	add	sp, #20
    253c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    253e:	46c0      	nop			; (mov r8, r8)
    2540:	20000514 	.word	0x20000514
    2544:	00000f45 	.word	0x00000f45
    2548:	200007a0 	.word	0x200007a0
    254c:	200004d0 	.word	0x200004d0
    2550:	000063ac 	.word	0x000063ac
    2554:	20000508 	.word	0x20000508
    2558:	00000c01 	.word	0x00000c01
    255c:	00005e21 	.word	0x00005e21
    2560:	77318fc5 	.word	0x77318fc5
    2564:	000051d9 	.word	0x000051d9
    2568:	3f5f212d 	.word	0x3f5f212d
    256c:	00005fbd 	.word	0x00005fbd
    2570:	fffff0c4 	.word	0xfffff0c4
    2574:	02de00d2 	.word	0x02de00d2
    2578:	bf8f8a09 	.word	0xbf8f8a09
    257c:	41004400 	.word	0x41004400
    2580:	000026b9 	.word	0x000026b9
    2584:	00000ec9 	.word	0x00000ec9
    2588:	0000041d 	.word	0x0000041d
    258c:	41004494 	.word	0x41004494
    2590:	41004498 	.word	0x41004498
    2594:	200007dc 	.word	0x200007dc
    2598:	200007d8 	.word	0x200007d8
    259c:	0000045d 	.word	0x0000045d
    25a0:	000004fd 	.word	0x000004fd
    25a4:	00000c69 	.word	0x00000c69

000025a8 <sercomClockEnable>:
#include <util.h>

void sercomClockEnable(SercomId id, uint32_t clock_channel, u8_t divider) {
    25a8:	b570      	push	{r4, r5, r6, lr}
    25aa:	0004      	movs	r4, r0
    // prevent this clock write from changing any other clocks
    PM->APBCMASK.reg |= 1 << (PM_APBCMASK_SERCOM0_Pos + id);
    25ac:	2301      	movs	r3, #1
    25ae:	1ca6      	adds	r6, r4, #2
    25b0:	40b3      	lsls	r3, r6
    25b2:	480d      	ldr	r0, [pc, #52]	; (25e8 <sercomClockEnable+0x40>)
#include <util.h>

void sercomClockEnable(SercomId id, uint32_t clock_channel, u8_t divider) {
    25b4:	000d      	movs	r5, r1
    // prevent this clock write from changing any other clocks
    PM->APBCMASK.reg |= 1 << (PM_APBCMASK_SERCOM0_Pos + id);
    25b6:	6a01      	ldr	r1, [r0, #32]
    25b8:	430b      	orrs	r3, r1
    25ba:	6203      	str	r3, [r0, #32]


    if (clock_channel != 0) {
    25bc:	2d00      	cmp	r5, #0
    25be:	d003      	beq.n	25c8 <sercomClockEnable+0x20>
        // clock generators 3-8 have 8 division factor bits - DIV[7:0]
        gclkEnable(clock_channel, GCLK_SOURCE_DFLL48M, divider);
    25c0:	2107      	movs	r1, #7
    25c2:	0028      	movs	r0, r5
    25c4:	4b09      	ldr	r3, [pc, #36]	; (25ec <sercomClockEnable+0x44>)
    25c6:	4798      	blx	r3
    }


    // attach clock
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
    25c8:	22f0      	movs	r2, #240	; 0xf0
    25ca:	2080      	movs	r0, #128	; 0x80
    25cc:	0229      	lsls	r1, r5, #8
    25ce:	0112      	lsls	r2, r2, #4
    25d0:	4011      	ands	r1, r2
    25d2:	01c0      	lsls	r0, r0, #7
    25d4:	4301      	orrs	r1, r0
    25d6:	0020      	movs	r0, r4
    25d8:	3014      	adds	r0, #20
    25da:	223f      	movs	r2, #63	; 0x3f
    25dc:	0003      	movs	r3, r0
    25de:	4013      	ands	r3, r2
    25e0:	4319      	orrs	r1, r3
    25e2:	4b03      	ldr	r3, [pc, #12]	; (25f0 <sercomClockEnable+0x48>)
    25e4:	8059      	strh	r1, [r3, #2]
                        GCLK_CLKCTRL_GEN(clock_channel) |
                        GCLK_CLKCTRL_ID(SERCOM0_GCLK_ID_CORE + id);
}
    25e6:	bd70      	pop	{r4, r5, r6, pc}
    25e8:	40000400 	.word	0x40000400
    25ec:	00000e79 	.word	0x00000e79
    25f0:	40000c00 	.word	0x40000c00

000025f4 <sercomReset>:
void computeKalmanStates();



inline static Sercom* sercom(SercomId id) {
    return (Sercom*) (0x42000800U + id * 1024);
    25f4:	4b04      	ldr	r3, [pc, #16]	; (2608 <sercomReset+0x14>)
    25f6:	0280      	lsls	r0, r0, #10
    25f8:	18c0      	adds	r0, r0, r3


void sercomReset(SercomId id) {
    sercom(id)->SPI.CTRLA.reg = SERCOM_SPI_CTRLA_SWRST;
    25fa:	2301      	movs	r3, #1
    25fc:	6003      	str	r3, [r0, #0]
    while(sercom(id)->SPI.CTRLA.reg & SERCOM_SPI_CTRLA_SWRST);
    25fe:	6802      	ldr	r2, [r0, #0]
    2600:	421a      	tst	r2, r3
    2602:	d1fc      	bne.n	25fe <sercomReset+0xa>
}
    2604:	4770      	bx	lr
    2606:	46c0      	nop			; (mov r8, r8)
    2608:	42000800 	.word	0x42000800

0000260c <sercomSpiMasterInit>:
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
}


void sercomSpiMasterInit(SercomId id, u32_t dipo, u32_t dopo, bool cpol, bool cpha, u8_t baud) {
    260c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    260e:	0004      	movs	r4, r0
    2610:	9300      	str	r3, [sp, #0]
    2612:	ab08      	add	r3, sp, #32
    2614:	781b      	ldrb	r3, [r3, #0]
    2616:	000e      	movs	r6, r1
    2618:	9301      	str	r3, [sp, #4]
    261a:	ab09      	add	r3, sp, #36	; 0x24
    261c:	781f      	ldrb	r7, [r3, #0]

    sercomReset(id);
    261e:	4b12      	ldr	r3, [pc, #72]	; (2668 <sercomSpiMasterInit+0x5c>)
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
}


void sercomSpiMasterInit(SercomId id, u32_t dipo, u32_t dopo, bool cpol, bool cpha, u8_t baud) {
    2620:	0015      	movs	r5, r2

    sercomReset(id);
    2622:	4798      	blx	r3
    2624:	4b11      	ldr	r3, [pc, #68]	; (266c <sercomSpiMasterInit+0x60>)
    2626:	02a4      	lsls	r4, r4, #10
    2628:	18e4      	adds	r4, r4, r3

    sercom(id)->SPI.CTRLB.reg
        = SERCOM_SPI_CTRLB_RXEN;
    262a:	2380      	movs	r3, #128	; 0x80
    262c:	029b      	lsls	r3, r3, #10
    262e:	6063      	str	r3, [r4, #4]
    2630:	23c0      	movs	r3, #192	; 0xc0
    sercom(id)->SPI.BAUD.reg = baud;

    sercom(id)->SPI.CTRLA.reg
        = SERCOM_SPI_CTRLA_ENABLE
          | SERCOM_SPI_CTRLA_MODE_SPI_MASTER
          | SERCOM_SPI_CTRLA_DIPO(dipo)
    2632:	21c0      	movs	r1, #192	; 0xc0
    2634:	042d      	lsls	r5, r5, #16
    2636:	029b      	lsls	r3, r3, #10
    2638:	402b      	ands	r3, r5
    263a:	250e      	movs	r5, #14
    263c:	0536      	lsls	r6, r6, #20
    263e:	0389      	lsls	r1, r1, #14
    2640:	4031      	ands	r1, r6
          | SERCOM_SPI_CTRLA_DOPO(dopo)
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
    2642:	9e00      	ldr	r6, [sp, #0]
    2644:	431d      	orrs	r5, r3
    2646:	1e73      	subs	r3, r6, #1
    2648:	419e      	sbcs	r6, r3
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
    264a:	9b01      	ldr	r3, [sp, #4]
    sercom(id)->SPI.CTRLA.reg
        = SERCOM_SPI_CTRLA_ENABLE
          | SERCOM_SPI_CTRLA_MODE_SPI_MASTER
          | SERCOM_SPI_CTRLA_DIPO(dipo)
          | SERCOM_SPI_CTRLA_DOPO(dopo)
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
    264c:	0772      	lsls	r2, r6, #29
    264e:	430d      	orrs	r5, r1
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
    2650:	432a      	orrs	r2, r5
    2652:	1e59      	subs	r1, r3, #1
    2654:	418b      	sbcs	r3, r1
    2656:	0016      	movs	r6, r2
    2658:	071b      	lsls	r3, r3, #28
    265a:	431e      	orrs	r6, r3
    sercomReset(id);

    sercom(id)->SPI.CTRLB.reg
        = SERCOM_SPI_CTRLB_RXEN;

    sercom(id)->SPI.BAUD.reg = baud;
    265c:	7327      	strb	r7, [r4, #12]

    sercom(id)->SPI.CTRLA.reg
        = SERCOM_SPI_CTRLA_ENABLE
    265e:	6026      	str	r6, [r4, #0]
        };
    }
}

static inline void SPI_sync(SercomId id) {
    while  (sercom(id)->SPI.SYNCBUSY.bit.CTRLB);
    2660:	69e3      	ldr	r3, [r4, #28]
    2662:	075b      	lsls	r3, r3, #29
    2664:	d4fc      	bmi.n	2660 <sercomSpiMasterInit+0x54>
          | SERCOM_SPI_CTRLA_DOPO(dopo)
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);

    SPI_sync(id);
}
    2666:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    2668:	000025f5 	.word	0x000025f5
    266c:	42000800 	.word	0x42000800

00002670 <sercomUartInit>:




void sercomUartInit(SercomId id, u32_t rxpo, u32_t txpo, int32_t fBAUD) {
    2670:	b570      	push	{r4, r5, r6, lr}
    2672:	0006      	movs	r6, r0

    //float BAUD = 65536*(1-(16*(115200/(48000000/8))));


    sercomReset(id);
    2674:	4b0c      	ldr	r3, [pc, #48]	; (26a8 <sercomUartInit+0x38>)
}




void sercomUartInit(SercomId id, u32_t rxpo, u32_t txpo, int32_t fBAUD) {
    2676:	000d      	movs	r5, r1
    2678:	0014      	movs	r4, r2

    //float BAUD = 65536*(1-(16*(115200/(48000000/8))));


    sercomReset(id);
    267a:	4798      	blx	r3
void computeKalmanStates();



inline static Sercom* sercom(SercomId id) {
    return (Sercom*) (0x42000800U + id * 1024);
    267c:	4b0b      	ldr	r3, [pc, #44]	; (26ac <sercomUartInit+0x3c>)
    267e:	02b0      	lsls	r0, r6, #10
    2680:	18c0      	adds	r0, r0, r3
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    2682:	2304      	movs	r3, #4
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    2684:	22c0      	movs	r2, #192	; 0xc0

    //float BAUD = 65536*(1-(16*(115200/(48000000/8))));


    sercomReset(id);
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    2686:	6003      	str	r3, [r0, #0]
    sercom(id)->USART.BAUD.reg = 45403;
    2688:	4b09      	ldr	r3, [pc, #36]	; (26b0 <sercomUartInit+0x40>)
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    268a:	0529      	lsls	r1, r5, #20
    //float BAUD = 65536*(1-(16*(115200/(48000000/8))));


    sercomReset(id);
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    sercom(id)->USART.BAUD.reg = 45403;
    268c:	8183      	strh	r3, [r0, #12]
    sercom(id)->USART.CTRLB.reg
        = SERCOM_USART_CTRLB_RXEN
    268e:	23c0      	movs	r3, #192	; 0xc0
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    2690:	0392      	lsls	r2, r2, #14
    2692:	4011      	ands	r1, r2
    2694:	4a07      	ldr	r2, [pc, #28]	; (26b4 <sercomUartInit+0x44>)

    sercomReset(id);
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    sercom(id)->USART.BAUD.reg = 45403;
    sercom(id)->USART.CTRLB.reg
        = SERCOM_USART_CTRLB_RXEN
    2696:	029b      	lsls	r3, r3, #10
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    2698:	0424      	lsls	r4, r4, #16

    sercomReset(id);
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    sercom(id)->USART.BAUD.reg = 45403;
    sercom(id)->USART.CTRLB.reg
        = SERCOM_USART_CTRLB_RXEN
    269a:	6043      	str	r3, [r0, #4]
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    269c:	4311      	orrs	r1, r2
    269e:	4023      	ands	r3, r4
    26a0:	430b      	orrs	r3, r1
    sercom(id)->USART.BAUD.reg = 45403;
    sercom(id)->USART.CTRLB.reg
        = SERCOM_USART_CTRLB_RXEN
          | SERCOM_USART_CTRLB_TXEN;
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
    26a2:	6003      	str	r3, [r0, #0]
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
}
    26a4:	bd70      	pop	{r4, r5, r6, pc}
    26a6:	46c0      	nop			; (mov r8, r8)
    26a8:	000025f5 	.word	0x000025f5
    26ac:	42000800 	.word	0x42000800
    26b0:	ffffb15b 	.word	0xffffb15b
    26b4:	40000006 	.word	0x40000006

000026b8 <spiDataTransfer>:
    26b8:	4b04      	ldr	r3, [pc, #16]	; (26cc <spiDataTransfer+0x14>)
    26ba:	0280      	lsls	r0, r0, #10
    26bc:	18c0      	adds	r0, r0, r3

u8_t spiDataTransfer(SercomId id, u8_t data) {
    sercom(id)->SPI.DATA.reg = data;
    26be:	6281      	str	r1, [r0, #40]	; 0x28
    while(sercom(id)->SPI.INTFLAG.bit.RXC == 0);
    26c0:	7e03      	ldrb	r3, [r0, #24]
    26c2:	075b      	lsls	r3, r3, #29
    26c4:	d5fc      	bpl.n	26c0 <spiDataTransfer+0x8>
    return sercom(id)->SPI.DATA.reg;
    26c6:	6a80      	ldr	r0, [r0, #40]	; 0x28
    26c8:	b2c0      	uxtb	r0, r0
}
    26ca:	4770      	bx	lr
    26cc:	42000800 	.word	0x42000800

000026d0 <usartDataOut>:
    26d0:	4b04      	ldr	r3, [pc, #16]	; (26e4 <usartDataOut+0x14>)
    26d2:	0280      	lsls	r0, r0, #10
    26d4:	18c0      	adds	r0, r0, r3
    while(sercom(id)->SPI.INTFLAG.bit.DRE == 0);
    return sercom(id)->SPI.DATA.reg;
}

void usartDataOut(SercomId id, u8_t data) {
    sercom(id)->USART.DATA.reg = data;
    26d6:	b289      	uxth	r1, r1
    26d8:	8501      	strh	r1, [r0, #40]	; 0x28
    while(sercom(id)->USART.INTFLAG.bit.DRE == 0);
    26da:	7e03      	ldrb	r3, [r0, #24]
    26dc:	07db      	lsls	r3, r3, #31
    26de:	d5fc      	bpl.n	26da <usartDataOut+0xa>
}
    26e0:	4770      	bx	lr
    26e2:	46c0      	nop			; (mov r8, r8)
    26e4:	42000800 	.word	0x42000800

000026e8 <usartDataIn>:
    26e8:	4b02      	ldr	r3, [pc, #8]	; (26f4 <usartDataIn+0xc>)
    26ea:	0280      	lsls	r0, r0, #10
    26ec:	18c0      	adds	r0, r0, r3

u8_t usartDataIn(SercomId id) {
    return sercom(id)->USART.DATA.reg;
    26ee:	8d00      	ldrh	r0, [r0, #40]	; 0x28
    26f0:	b2c0      	uxtb	r0, r0
}
    26f2:	4770      	bx	lr
    26f4:	42000800 	.word	0x42000800

000026f8 <attemptConnection>:
#include <util.h>
#include <boardDefines.h>


void attemptConnection() {
    26f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

    if (USARTconnectionAvaliable()) {
    26fa:	4b2f      	ldr	r3, [pc, #188]	; (27b8 <attemptConnection+0xc0>)
    26fc:	4798      	blx	r3
    26fe:	2800      	cmp	r0, #0
    2700:	d058      	beq.n	27b4 <attemptConnection+0xbc>

        flightState = flightIdle;
    2702:	2201      	movs	r2, #1
    2704:	4b2d      	ldr	r3, [pc, #180]	; (27bc <attemptConnection+0xc4>)
    2706:	701a      	strb	r2, [r3, #0]

        //wait for user to tell us what they want
        while(sercom(USART3)->SPI.INTFLAG.bit.RXC == 0);
    2708:	4a2d      	ldr	r2, [pc, #180]	; (27c0 <attemptConnection+0xc8>)
    270a:	7e13      	ldrb	r3, [r2, #24]
    270c:	4e2c      	ldr	r6, [pc, #176]	; (27c0 <attemptConnection+0xc8>)
    270e:	075b      	lsls	r3, r3, #29
    2710:	d5fb      	bpl.n	270a <attemptConnection+0x12>
        u8_t option = usartDataIn(USART3);
    2712:	2003      	movs	r0, #3
    2714:	4d2b      	ldr	r5, [pc, #172]	; (27c4 <attemptConnection+0xcc>)
    2716:	47a8      	blx	r5
    2718:	1e04      	subs	r4, r0, #0

        //user wants to read flight logs
        if (option == 0x4C) {
    271a:	2c4c      	cmp	r4, #76	; 0x4c
    271c:	d13c      	bne.n	2798 <attemptConnection+0xa0>
    271e:	2400      	movs	r4, #0

            //send list of available flight logs
            for (u8_t flightLog = 0; flightLog < 11; ++flightLog) {

                if (isFlightLogged(flightLog)) {
    2720:	0020      	movs	r0, r4
    2722:	4b29      	ldr	r3, [pc, #164]	; (27c8 <attemptConnection+0xd0>)
    2724:	4798      	blx	r3
    2726:	2800      	cmp	r0, #0
    2728:	d005      	beq.n	2736 <attemptConnection+0x3e>

                    usartDataOut(USART3, flightLog + 0x30);
    272a:	0021      	movs	r1, r4
    272c:	3130      	adds	r1, #48	; 0x30
    272e:	b2c9      	uxtb	r1, r1
    2730:	2003      	movs	r0, #3
    2732:	4b26      	ldr	r3, [pc, #152]	; (27cc <attemptConnection+0xd4>)
    2734:	4798      	blx	r3

        //user wants to read flight logs
        if (option == 0x4C) {

            //send list of available flight logs
            for (u8_t flightLog = 0; flightLog < 11; ++flightLog) {
    2736:	3401      	adds	r4, #1
    2738:	b2e4      	uxtb	r4, r4
    273a:	2c0b      	cmp	r4, #11
    273c:	d1f0      	bne.n	2720 <attemptConnection+0x28>

                    usartDataOut(USART3, flightLog + 0x30);
                }
            }
            //done sending flight numbers
            usartDataOut(USART3, 0x0F);
    273e:	210f      	movs	r1, #15
    2740:	2003      	movs	r0, #3
    2742:	4c22      	ldr	r4, [pc, #136]	; (27cc <attemptConnection+0xd4>)
    2744:	47a0      	blx	r4

            //wait for user to pick which flight to read
            while(sercom(USART3)->SPI.INTFLAG.bit.RXC == 0);
    2746:	7e33      	ldrb	r3, [r6, #24]
    2748:	075b      	lsls	r3, r3, #29
    274a:	d5fc      	bpl.n	2746 <attemptConnection+0x4e>
            u8_t flightToRead = usartDataIn(USART3) - 0x30;
    274c:	2003      	movs	r0, #3
    274e:	47a8      	blx	r5
    2750:	3830      	subs	r0, #48	; 0x30
    2752:	b2c5      	uxtb	r5, r0


            u32_t flightStartAddress = getFlightStartAddress(flightToRead);
    2754:	0028      	movs	r0, r5
    2756:	4b1e      	ldr	r3, [pc, #120]	; (27d0 <attemptConnection+0xd8>)
    2758:	4798      	blx	r3
            u32_t flightEndAddress = FindFlightEndingAddress(flightToRead) - 0x100;
    275a:	4b1e      	ldr	r3, [pc, #120]	; (27d4 <attemptConnection+0xdc>)
            //wait for user to pick which flight to read
            while(sercom(USART3)->SPI.INTFLAG.bit.RXC == 0);
            u8_t flightToRead = usartDataIn(USART3) - 0x30;


            u32_t flightStartAddress = getFlightStartAddress(flightToRead);
    275c:	0007      	movs	r7, r0
            u32_t flightEndAddress = FindFlightEndingAddress(flightToRead) - 0x100;
    275e:	0028      	movs	r0, r5
    2760:	4798      	blx	r3
    2762:	1e46      	subs	r6, r0, #1
    2764:	3eff      	subs	r6, #255	; 0xff

            //inform of page numbers
            u16_t pagesToSend = (flightEndAddress  - flightStartAddress) >> 8;
    2766:	1bf5      	subs	r5, r6, r7
    2768:	0a2d      	lsrs	r5, r5, #8
            usartDataOut(USART3, pagesToSend >> 0);
    276a:	b2e9      	uxtb	r1, r5
    276c:	2003      	movs	r0, #3
    276e:	47a0      	blx	r4
            usartDataOut(USART3, pagesToSend >> 8);
    2770:	b2a9      	uxth	r1, r5
    2772:	0a09      	lsrs	r1, r1, #8
    2774:	2003      	movs	r0, #3
    2776:	47a0      	blx	r4

            //send flight end address for % full
            usartDataOut(USART3, flightEndAddress >> 0);
    2778:	b2f1      	uxtb	r1, r6
    277a:	2003      	movs	r0, #3
    277c:	47a0      	blx	r4
            usartDataOut(USART3, flightEndAddress >> 8);
    277e:	0a31      	lsrs	r1, r6, #8
    2780:	b2c9      	uxtb	r1, r1
    2782:	2003      	movs	r0, #3
    2784:	47a0      	blx	r4
            usartDataOut(USART3, flightEndAddress >> 16);
    2786:	0c31      	lsrs	r1, r6, #16
    2788:	b2c9      	uxtb	r1, r1
    278a:	2003      	movs	r0, #3
    278c:	47a0      	blx	r4

            //USART out the flights pages
            sendTheasePagesToComputer(flightStartAddress, flightEndAddress);
    278e:	0031      	movs	r1, r6
    2790:	0038      	movs	r0, r7
    2792:	4b11      	ldr	r3, [pc, #68]	; (27d8 <attemptConnection+0xe0>)
    2794:	4798      	blx	r3
    2796:	e00d      	b.n	27b4 <attemptConnection+0xbc>

        }
        //user wants to erase chip
        if (option == 0x45) { // 'E'
    2798:	2845      	cmp	r0, #69	; 0x45
    279a:	d10b      	bne.n	27b4 <attemptConnection+0xbc>
            AT25SFChipErase();
    279c:	4b0f      	ldr	r3, [pc, #60]	; (27dc <attemptConnection+0xe4>)
    279e:	4798      	blx	r3

            AT25SFHoldTillReady();
    27a0:	4b0f      	ldr	r3, [pc, #60]	; (27e0 <attemptConnection+0xe8>)
    27a2:	4798      	blx	r3

            usartDataOut(USART3, 'E');
    27a4:	2003      	movs	r0, #3
    27a6:	4b09      	ldr	r3, [pc, #36]	; (27cc <attemptConnection+0xd4>)
    27a8:	0021      	movs	r1, r4
    27aa:	4798      	blx	r3
            beep(400);
    27ac:	20c8      	movs	r0, #200	; 0xc8
    27ae:	4b0d      	ldr	r3, [pc, #52]	; (27e4 <attemptConnection+0xec>)
    27b0:	0040      	lsls	r0, r0, #1
    27b2:	4798      	blx	r3


        }
    }

}
    27b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    27b6:	46c0      	nop			; (mov r8, r8)
    27b8:	00000a89 	.word	0x00000a89
    27bc:	2000065c 	.word	0x2000065c
    27c0:	42001400 	.word	0x42001400
    27c4:	000026e9 	.word	0x000026e9
    27c8:	00002151 	.word	0x00002151
    27cc:	000026d1 	.word	0x000026d1
    27d0:	00002101 	.word	0x00002101
    27d4:	00002129 	.word	0x00002129
    27d8:	00000abd 	.word	0x00000abd
    27dc:	00000221 	.word	0x00000221
    27e0:	000001e5 	.word	0x000001e5
    27e4:	00000c69 	.word	0x00000c69

000027e8 <pow>:
    27e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    27ea:	465f      	mov	r7, fp
    27ec:	464d      	mov	r5, r9
    27ee:	4656      	mov	r6, sl
    27f0:	4644      	mov	r4, r8
    27f2:	b4f0      	push	{r4, r5, r6, r7}
    27f4:	b091      	sub	sp, #68	; 0x44
    27f6:	001f      	movs	r7, r3
    27f8:	0004      	movs	r4, r0
    27fa:	000d      	movs	r5, r1
    27fc:	0016      	movs	r6, r2
    27fe:	f000 f9af 	bl	2b60 <__ieee754_pow>
    2802:	4bcf      	ldr	r3, [pc, #828]	; (2b40 <pow+0x358>)
    2804:	9002      	str	r0, [sp, #8]
    2806:	9103      	str	r1, [sp, #12]
    2808:	469b      	mov	fp, r3
    280a:	781b      	ldrb	r3, [r3, #0]
    280c:	b25b      	sxtb	r3, r3
    280e:	4699      	mov	r9, r3
    2810:	3301      	adds	r3, #1
    2812:	d04f      	beq.n	28b4 <pow+0xcc>
    2814:	0032      	movs	r2, r6
    2816:	003b      	movs	r3, r7
    2818:	0030      	movs	r0, r6
    281a:	0039      	movs	r1, r7
    281c:	f003 faaa 	bl	5d74 <__aeabi_dcmpun>
    2820:	9000      	str	r0, [sp, #0]
    2822:	2800      	cmp	r0, #0
    2824:	d146      	bne.n	28b4 <pow+0xcc>
    2826:	0022      	movs	r2, r4
    2828:	002b      	movs	r3, r5
    282a:	0020      	movs	r0, r4
    282c:	0029      	movs	r1, r5
    282e:	f003 faa1 	bl	5d74 <__aeabi_dcmpun>
    2832:	2200      	movs	r2, #0
    2834:	4682      	mov	sl, r0
    2836:	2800      	cmp	r0, #0
    2838:	d134      	bne.n	28a4 <pow+0xbc>
    283a:	2300      	movs	r3, #0
    283c:	0020      	movs	r0, r4
    283e:	0029      	movs	r1, r5
    2840:	f001 f8fc 	bl	3a3c <__aeabi_dcmpeq>
    2844:	2800      	cmp	r0, #0
    2846:	d03a      	beq.n	28be <pow+0xd6>
    2848:	2200      	movs	r2, #0
    284a:	2300      	movs	r3, #0
    284c:	0030      	movs	r0, r6
    284e:	0039      	movs	r1, r7
    2850:	f001 f8f4 	bl	3a3c <__aeabi_dcmpeq>
    2854:	9005      	str	r0, [sp, #20]
    2856:	2800      	cmp	r0, #0
    2858:	d100      	bne.n	285c <pow+0x74>
    285a:	e074      	b.n	2946 <pow+0x15e>
    285c:	ab06      	add	r3, sp, #24
    285e:	4698      	mov	r8, r3
    2860:	2301      	movs	r3, #1
    2862:	4642      	mov	r2, r8
    2864:	9306      	str	r3, [sp, #24]
    2866:	4bb7      	ldr	r3, [pc, #732]	; (2b44 <pow+0x35c>)
    2868:	6053      	str	r3, [r2, #4]
    286a:	4643      	mov	r3, r8
    286c:	4652      	mov	r2, sl
    286e:	609c      	str	r4, [r3, #8]
    2870:	60dd      	str	r5, [r3, #12]
    2872:	621a      	str	r2, [r3, #32]
    2874:	611e      	str	r6, [r3, #16]
    2876:	615f      	str	r7, [r3, #20]
    2878:	4642      	mov	r2, r8
    287a:	2300      	movs	r3, #0
    287c:	2400      	movs	r4, #0
    287e:	6193      	str	r3, [r2, #24]
    2880:	61d4      	str	r4, [r2, #28]
    2882:	464b      	mov	r3, r9
    2884:	2b00      	cmp	r3, #0
    2886:	d100      	bne.n	288a <pow+0xa2>
    2888:	e094      	b.n	29b4 <pow+0x1cc>
    288a:	2300      	movs	r3, #0
    288c:	4cae      	ldr	r4, [pc, #696]	; (2b48 <pow+0x360>)
    288e:	9300      	str	r3, [sp, #0]
    2890:	9401      	str	r4, [sp, #4]
    2892:	9800      	ldr	r0, [sp, #0]
    2894:	9901      	ldr	r1, [sp, #4]
    2896:	b011      	add	sp, #68	; 0x44
    2898:	bc3c      	pop	{r2, r3, r4, r5}
    289a:	4690      	mov	r8, r2
    289c:	4699      	mov	r9, r3
    289e:	46a2      	mov	sl, r4
    28a0:	46ab      	mov	fp, r5
    28a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    28a4:	2300      	movs	r3, #0
    28a6:	0030      	movs	r0, r6
    28a8:	0039      	movs	r1, r7
    28aa:	f001 f8c7 	bl	3a3c <__aeabi_dcmpeq>
    28ae:	2800      	cmp	r0, #0
    28b0:	d000      	beq.n	28b4 <pow+0xcc>
    28b2:	e0eb      	b.n	2a8c <pow+0x2a4>
    28b4:	9b02      	ldr	r3, [sp, #8]
    28b6:	9c03      	ldr	r4, [sp, #12]
    28b8:	9300      	str	r3, [sp, #0]
    28ba:	9401      	str	r4, [sp, #4]
    28bc:	e7e9      	b.n	2892 <pow+0xaa>
    28be:	9802      	ldr	r0, [sp, #8]
    28c0:	9903      	ldr	r1, [sp, #12]
    28c2:	f000 ff7d 	bl	37c0 <finite>
    28c6:	4681      	mov	r9, r0
    28c8:	2800      	cmp	r0, #0
    28ca:	d100      	bne.n	28ce <pow+0xe6>
    28cc:	e086      	b.n	29dc <pow+0x1f4>
    28ce:	9802      	ldr	r0, [sp, #8]
    28d0:	9903      	ldr	r1, [sp, #12]
    28d2:	2200      	movs	r2, #0
    28d4:	2300      	movs	r3, #0
    28d6:	f001 f8b1 	bl	3a3c <__aeabi_dcmpeq>
    28da:	2800      	cmp	r0, #0
    28dc:	d0ea      	beq.n	28b4 <pow+0xcc>
    28de:	0020      	movs	r0, r4
    28e0:	0029      	movs	r1, r5
    28e2:	f000 ff6d 	bl	37c0 <finite>
    28e6:	9a02      	ldr	r2, [sp, #8]
    28e8:	9b03      	ldr	r3, [sp, #12]
    28ea:	9200      	str	r2, [sp, #0]
    28ec:	9301      	str	r3, [sp, #4]
    28ee:	2800      	cmp	r0, #0
    28f0:	d0cf      	beq.n	2892 <pow+0xaa>
    28f2:	0030      	movs	r0, r6
    28f4:	0039      	movs	r1, r7
    28f6:	f000 ff63 	bl	37c0 <finite>
    28fa:	9a02      	ldr	r2, [sp, #8]
    28fc:	9b03      	ldr	r3, [sp, #12]
    28fe:	9200      	str	r2, [sp, #0]
    2900:	9301      	str	r3, [sp, #4]
    2902:	2800      	cmp	r0, #0
    2904:	d0c5      	beq.n	2892 <pow+0xaa>
    2906:	ab06      	add	r3, sp, #24
    2908:	4698      	mov	r8, r3
    290a:	2304      	movs	r3, #4
    290c:	4642      	mov	r2, r8
    290e:	9306      	str	r3, [sp, #24]
    2910:	4b8c      	ldr	r3, [pc, #560]	; (2b44 <pow+0x35c>)
    2912:	6094      	str	r4, [r2, #8]
    2914:	60d5      	str	r5, [r2, #12]
    2916:	6053      	str	r3, [r2, #4]
    2918:	2300      	movs	r3, #0
    291a:	2400      	movs	r4, #0
    291c:	6213      	str	r3, [r2, #32]
    291e:	2300      	movs	r3, #0
    2920:	6193      	str	r3, [r2, #24]
    2922:	61d4      	str	r4, [r2, #28]
    2924:	465b      	mov	r3, fp
    2926:	781b      	ldrb	r3, [r3, #0]
    2928:	6116      	str	r6, [r2, #16]
    292a:	6157      	str	r7, [r2, #20]
    292c:	b25b      	sxtb	r3, r3
    292e:	2b02      	cmp	r3, #2
    2930:	d004      	beq.n	293c <pow+0x154>
    2932:	4640      	mov	r0, r8
    2934:	f000 ff4e 	bl	37d4 <matherr>
    2938:	2800      	cmp	r0, #0
    293a:	d140      	bne.n	29be <pow+0x1d6>
    293c:	f003 fc74 	bl	6228 <__errno>
    2940:	2322      	movs	r3, #34	; 0x22
    2942:	6003      	str	r3, [r0, #0]
    2944:	e03b      	b.n	29be <pow+0x1d6>
    2946:	0030      	movs	r0, r6
    2948:	0039      	movs	r1, r7
    294a:	f000 ff39 	bl	37c0 <finite>
    294e:	9a02      	ldr	r2, [sp, #8]
    2950:	9b03      	ldr	r3, [sp, #12]
    2952:	9200      	str	r2, [sp, #0]
    2954:	9301      	str	r3, [sp, #4]
    2956:	2800      	cmp	r0, #0
    2958:	d09b      	beq.n	2892 <pow+0xaa>
    295a:	2200      	movs	r2, #0
    295c:	2300      	movs	r3, #0
    295e:	0030      	movs	r0, r6
    2960:	0039      	movs	r1, r7
    2962:	f001 f871 	bl	3a48 <__aeabi_dcmplt>
    2966:	2800      	cmp	r0, #0
    2968:	d100      	bne.n	296c <pow+0x184>
    296a:	e792      	b.n	2892 <pow+0xaa>
    296c:	ab06      	add	r3, sp, #24
    296e:	4698      	mov	r8, r3
    2970:	2301      	movs	r3, #1
    2972:	4642      	mov	r2, r8
    2974:	9306      	str	r3, [sp, #24]
    2976:	4b73      	ldr	r3, [pc, #460]	; (2b44 <pow+0x35c>)
    2978:	6053      	str	r3, [r2, #4]
    297a:	4643      	mov	r3, r8
    297c:	9a05      	ldr	r2, [sp, #20]
    297e:	609c      	str	r4, [r3, #8]
    2980:	60dd      	str	r5, [r3, #12]
    2982:	621a      	str	r2, [r3, #32]
    2984:	611e      	str	r6, [r3, #16]
    2986:	615f      	str	r7, [r3, #20]
    2988:	465b      	mov	r3, fp
    298a:	781b      	ldrb	r3, [r3, #0]
    298c:	b25b      	sxtb	r3, r3
    298e:	2b00      	cmp	r3, #0
    2990:	d00b      	beq.n	29aa <pow+0x1c2>
    2992:	2000      	movs	r0, #0
    2994:	4642      	mov	r2, r8
    2996:	496d      	ldr	r1, [pc, #436]	; (2b4c <pow+0x364>)
    2998:	6190      	str	r0, [r2, #24]
    299a:	61d1      	str	r1, [r2, #28]
    299c:	2b02      	cmp	r3, #2
    299e:	d109      	bne.n	29b4 <pow+0x1cc>
    29a0:	f003 fc42 	bl	6228 <__errno>
    29a4:	2321      	movs	r3, #33	; 0x21
    29a6:	6003      	str	r3, [r0, #0]
    29a8:	e009      	b.n	29be <pow+0x1d6>
    29aa:	4642      	mov	r2, r8
    29ac:	2300      	movs	r3, #0
    29ae:	2400      	movs	r4, #0
    29b0:	6193      	str	r3, [r2, #24]
    29b2:	61d4      	str	r4, [r2, #28]
    29b4:	4640      	mov	r0, r8
    29b6:	f000 ff0d 	bl	37d4 <matherr>
    29ba:	2800      	cmp	r0, #0
    29bc:	d0f0      	beq.n	29a0 <pow+0x1b8>
    29be:	4643      	mov	r3, r8
    29c0:	6a1b      	ldr	r3, [r3, #32]
    29c2:	2b00      	cmp	r3, #0
    29c4:	d004      	beq.n	29d0 <pow+0x1e8>
    29c6:	f003 fc2f 	bl	6228 <__errno>
    29ca:	4643      	mov	r3, r8
    29cc:	6a1b      	ldr	r3, [r3, #32]
    29ce:	6003      	str	r3, [r0, #0]
    29d0:	4643      	mov	r3, r8
    29d2:	69dc      	ldr	r4, [r3, #28]
    29d4:	699b      	ldr	r3, [r3, #24]
    29d6:	9300      	str	r3, [sp, #0]
    29d8:	9401      	str	r4, [sp, #4]
    29da:	e75a      	b.n	2892 <pow+0xaa>
    29dc:	0020      	movs	r0, r4
    29de:	0029      	movs	r1, r5
    29e0:	f000 feee 	bl	37c0 <finite>
    29e4:	2800      	cmp	r0, #0
    29e6:	d100      	bne.n	29ea <pow+0x202>
    29e8:	e771      	b.n	28ce <pow+0xe6>
    29ea:	0030      	movs	r0, r6
    29ec:	0039      	movs	r1, r7
    29ee:	f000 fee7 	bl	37c0 <finite>
    29f2:	2800      	cmp	r0, #0
    29f4:	d100      	bne.n	29f8 <pow+0x210>
    29f6:	e76a      	b.n	28ce <pow+0xe6>
    29f8:	9802      	ldr	r0, [sp, #8]
    29fa:	9903      	ldr	r1, [sp, #12]
    29fc:	000b      	movs	r3, r1
    29fe:	0002      	movs	r2, r0
    2a00:	f003 f9b8 	bl	5d74 <__aeabi_dcmpun>
    2a04:	ab06      	add	r3, sp, #24
    2a06:	4698      	mov	r8, r3
    2a08:	2800      	cmp	r0, #0
    2a0a:	d17a      	bne.n	2b02 <pow+0x31a>
    2a0c:	2303      	movs	r3, #3
    2a0e:	4642      	mov	r2, r8
    2a10:	9306      	str	r3, [sp, #24]
    2a12:	4b4c      	ldr	r3, [pc, #304]	; (2b44 <pow+0x35c>)
    2a14:	6210      	str	r0, [r2, #32]
    2a16:	6053      	str	r3, [r2, #4]
    2a18:	465b      	mov	r3, fp
    2a1a:	781b      	ldrb	r3, [r3, #0]
    2a1c:	6094      	str	r4, [r2, #8]
    2a1e:	60d5      	str	r5, [r2, #12]
    2a20:	b25b      	sxtb	r3, r3
    2a22:	6116      	str	r6, [r2, #16]
    2a24:	6157      	str	r7, [r2, #20]
    2a26:	4699      	mov	r9, r3
    2a28:	2b00      	cmp	r3, #0
    2a2a:	d148      	bne.n	2abe <pow+0x2d6>
    2a2c:	22e0      	movs	r2, #224	; 0xe0
    2a2e:	4641      	mov	r1, r8
    2a30:	4b47      	ldr	r3, [pc, #284]	; (2b50 <pow+0x368>)
    2a32:	0612      	lsls	r2, r2, #24
    2a34:	618a      	str	r2, [r1, #24]
    2a36:	61cb      	str	r3, [r1, #28]
    2a38:	0020      	movs	r0, r4
    2a3a:	2200      	movs	r2, #0
    2a3c:	2300      	movs	r3, #0
    2a3e:	0029      	movs	r1, r5
    2a40:	f001 f802 	bl	3a48 <__aeabi_dcmplt>
    2a44:	2800      	cmp	r0, #0
    2a46:	d100      	bne.n	2a4a <pow+0x262>
    2a48:	e773      	b.n	2932 <pow+0x14a>
    2a4a:	2200      	movs	r2, #0
    2a4c:	4b41      	ldr	r3, [pc, #260]	; (2b54 <pow+0x36c>)
    2a4e:	0030      	movs	r0, r6
    2a50:	0039      	movs	r1, r7
    2a52:	f002 fbc1 	bl	51d8 <__aeabi_dmul>
    2a56:	0004      	movs	r4, r0
    2a58:	000d      	movs	r5, r1
    2a5a:	f000 fec3 	bl	37e4 <rint>
    2a5e:	0002      	movs	r2, r0
    2a60:	000b      	movs	r3, r1
    2a62:	0020      	movs	r0, r4
    2a64:	0029      	movs	r1, r5
    2a66:	f000 ffe9 	bl	3a3c <__aeabi_dcmpeq>
    2a6a:	2800      	cmp	r0, #0
    2a6c:	d105      	bne.n	2a7a <pow+0x292>
    2a6e:	22e0      	movs	r2, #224	; 0xe0
    2a70:	4b39      	ldr	r3, [pc, #228]	; (2b58 <pow+0x370>)
    2a72:	0612      	lsls	r2, r2, #24
    2a74:	4641      	mov	r1, r8
    2a76:	618a      	str	r2, [r1, #24]
    2a78:	61cb      	str	r3, [r1, #28]
    2a7a:	465b      	mov	r3, fp
    2a7c:	781b      	ldrb	r3, [r3, #0]
    2a7e:	b25b      	sxtb	r3, r3
    2a80:	4699      	mov	r9, r3
    2a82:	464b      	mov	r3, r9
    2a84:	2b02      	cmp	r3, #2
    2a86:	d000      	beq.n	2a8a <pow+0x2a2>
    2a88:	e753      	b.n	2932 <pow+0x14a>
    2a8a:	e757      	b.n	293c <pow+0x154>
    2a8c:	ab06      	add	r3, sp, #24
    2a8e:	4698      	mov	r8, r3
    2a90:	2301      	movs	r3, #1
    2a92:	4642      	mov	r2, r8
    2a94:	9306      	str	r3, [sp, #24]
    2a96:	4b2b      	ldr	r3, [pc, #172]	; (2b44 <pow+0x35c>)
    2a98:	6053      	str	r3, [r2, #4]
    2a9a:	4643      	mov	r3, r8
    2a9c:	609c      	str	r4, [r3, #8]
    2a9e:	60dd      	str	r5, [r3, #12]
    2aa0:	2400      	movs	r4, #0
    2aa2:	9a00      	ldr	r2, [sp, #0]
    2aa4:	4d28      	ldr	r5, [pc, #160]	; (2b48 <pow+0x360>)
    2aa6:	621a      	str	r2, [r3, #32]
    2aa8:	611e      	str	r6, [r3, #16]
    2aaa:	615f      	str	r7, [r3, #20]
    2aac:	619c      	str	r4, [r3, #24]
    2aae:	61dd      	str	r5, [r3, #28]
    2ab0:	464b      	mov	r3, r9
    2ab2:	9400      	str	r4, [sp, #0]
    2ab4:	9501      	str	r5, [sp, #4]
    2ab6:	2b02      	cmp	r3, #2
    2ab8:	d000      	beq.n	2abc <pow+0x2d4>
    2aba:	e77b      	b.n	29b4 <pow+0x1cc>
    2abc:	e6e9      	b.n	2892 <pow+0xaa>
    2abe:	2200      	movs	r2, #0
    2ac0:	4641      	mov	r1, r8
    2ac2:	4b26      	ldr	r3, [pc, #152]	; (2b5c <pow+0x374>)
    2ac4:	0020      	movs	r0, r4
    2ac6:	618a      	str	r2, [r1, #24]
    2ac8:	61cb      	str	r3, [r1, #28]
    2aca:	2200      	movs	r2, #0
    2acc:	2300      	movs	r3, #0
    2ace:	0029      	movs	r1, r5
    2ad0:	f000 ffba 	bl	3a48 <__aeabi_dcmplt>
    2ad4:	2800      	cmp	r0, #0
    2ad6:	d0d4      	beq.n	2a82 <pow+0x29a>
    2ad8:	2200      	movs	r2, #0
    2ada:	4b1e      	ldr	r3, [pc, #120]	; (2b54 <pow+0x36c>)
    2adc:	0030      	movs	r0, r6
    2ade:	0039      	movs	r1, r7
    2ae0:	f002 fb7a 	bl	51d8 <__aeabi_dmul>
    2ae4:	0004      	movs	r4, r0
    2ae6:	000d      	movs	r5, r1
    2ae8:	f000 fe7c 	bl	37e4 <rint>
    2aec:	0002      	movs	r2, r0
    2aee:	000b      	movs	r3, r1
    2af0:	0020      	movs	r0, r4
    2af2:	0029      	movs	r1, r5
    2af4:	f000 ffa2 	bl	3a3c <__aeabi_dcmpeq>
    2af8:	2800      	cmp	r0, #0
    2afa:	d1be      	bne.n	2a7a <pow+0x292>
    2afc:	2200      	movs	r2, #0
    2afe:	4b13      	ldr	r3, [pc, #76]	; (2b4c <pow+0x364>)
    2b00:	e7b8      	b.n	2a74 <pow+0x28c>
    2b02:	2301      	movs	r3, #1
    2b04:	4642      	mov	r2, r8
    2b06:	9306      	str	r3, [sp, #24]
    2b08:	4b0e      	ldr	r3, [pc, #56]	; (2b44 <pow+0x35c>)
    2b0a:	6053      	str	r3, [r2, #4]
    2b0c:	4643      	mov	r3, r8
    2b0e:	464a      	mov	r2, r9
    2b10:	609c      	str	r4, [r3, #8]
    2b12:	60dd      	str	r5, [r3, #12]
    2b14:	621a      	str	r2, [r3, #32]
    2b16:	611e      	str	r6, [r3, #16]
    2b18:	615f      	str	r7, [r3, #20]
    2b1a:	2400      	movs	r4, #0
    2b1c:	465b      	mov	r3, fp
    2b1e:	571c      	ldrsb	r4, [r3, r4]
    2b20:	2c00      	cmp	r4, #0
    2b22:	d100      	bne.n	2b26 <pow+0x33e>
    2b24:	e741      	b.n	29aa <pow+0x1c2>
    2b26:	2300      	movs	r3, #0
    2b28:	2200      	movs	r2, #0
    2b2a:	0019      	movs	r1, r3
    2b2c:	0010      	movs	r0, r2
    2b2e:	f001 ff2f 	bl	4990 <__aeabi_ddiv>
    2b32:	4643      	mov	r3, r8
    2b34:	6198      	str	r0, [r3, #24]
    2b36:	61d9      	str	r1, [r3, #28]
    2b38:	2c02      	cmp	r4, #2
    2b3a:	d100      	bne.n	2b3e <pow+0x356>
    2b3c:	e730      	b.n	29a0 <pow+0x1b8>
    2b3e:	e739      	b.n	29b4 <pow+0x1cc>
    2b40:	20000070 	.word	0x20000070
    2b44:	000063cc 	.word	0x000063cc
    2b48:	3ff00000 	.word	0x3ff00000
    2b4c:	fff00000 	.word	0xfff00000
    2b50:	47efffff 	.word	0x47efffff
    2b54:	3fe00000 	.word	0x3fe00000
    2b58:	c7efffff 	.word	0xc7efffff
    2b5c:	7ff00000 	.word	0x7ff00000

00002b60 <__ieee754_pow>:
    2b60:	b5f0      	push	{r4, r5, r6, r7, lr}
    2b62:	4656      	mov	r6, sl
    2b64:	464d      	mov	r5, r9
    2b66:	4644      	mov	r4, r8
    2b68:	465f      	mov	r7, fp
    2b6a:	b4f0      	push	{r4, r5, r6, r7}
    2b6c:	001c      	movs	r4, r3
    2b6e:	0013      	movs	r3, r2
    2b70:	0067      	lsls	r7, r4, #1
    2b72:	b091      	sub	sp, #68	; 0x44
    2b74:	087f      	lsrs	r7, r7, #1
    2b76:	9300      	str	r3, [sp, #0]
    2b78:	9401      	str	r4, [sp, #4]
    2b7a:	0006      	movs	r6, r0
    2b7c:	000d      	movs	r5, r1
    2b7e:	4680      	mov	r8, r0
    2b80:	4689      	mov	r9, r1
    2b82:	46a2      	mov	sl, r4
    2b84:	433b      	orrs	r3, r7
    2b86:	d032      	beq.n	2bee <__ieee754_pow+0x8e>
    2b88:	4b6e      	ldr	r3, [pc, #440]	; (2d44 <__ieee754_pow+0x1e4>)
    2b8a:	006c      	lsls	r4, r5, #1
    2b8c:	0864      	lsrs	r4, r4, #1
    2b8e:	429c      	cmp	r4, r3
    2b90:	dc29      	bgt.n	2be6 <__ieee754_pow+0x86>
    2b92:	d026      	beq.n	2be2 <__ieee754_pow+0x82>
    2b94:	429f      	cmp	r7, r3
    2b96:	dc26      	bgt.n	2be6 <__ieee754_pow+0x86>
    2b98:	4b6a      	ldr	r3, [pc, #424]	; (2d44 <__ieee754_pow+0x1e4>)
    2b9a:	429f      	cmp	r7, r3
    2b9c:	d100      	bne.n	2ba0 <__ieee754_pow+0x40>
    2b9e:	e089      	b.n	2cb4 <__ieee754_pow+0x154>
    2ba0:	2300      	movs	r3, #0
    2ba2:	469b      	mov	fp, r3
    2ba4:	464b      	mov	r3, r9
    2ba6:	2b00      	cmp	r3, #0
    2ba8:	da00      	bge.n	2bac <__ieee754_pow+0x4c>
    2baa:	e087      	b.n	2cbc <__ieee754_pow+0x15c>
    2bac:	2a00      	cmp	r2, #0
    2bae:	d12f      	bne.n	2c10 <__ieee754_pow+0xb0>
    2bb0:	4b64      	ldr	r3, [pc, #400]	; (2d44 <__ieee754_pow+0x1e4>)
    2bb2:	429f      	cmp	r7, r3
    2bb4:	d100      	bne.n	2bb8 <__ieee754_pow+0x58>
    2bb6:	e09f      	b.n	2cf8 <__ieee754_pow+0x198>
    2bb8:	4b63      	ldr	r3, [pc, #396]	; (2d48 <__ieee754_pow+0x1e8>)
    2bba:	429f      	cmp	r7, r3
    2bbc:	d05d      	beq.n	2c7a <__ieee754_pow+0x11a>
    2bbe:	2380      	movs	r3, #128	; 0x80
    2bc0:	05db      	lsls	r3, r3, #23
    2bc2:	459a      	cmp	sl, r3
    2bc4:	d101      	bne.n	2bca <__ieee754_pow+0x6a>
    2bc6:	f000 fbc1 	bl	334c <__ieee754_pow+0x7ec>
    2bca:	4b60      	ldr	r3, [pc, #384]	; (2d4c <__ieee754_pow+0x1ec>)
    2bcc:	459a      	cmp	sl, r3
    2bce:	d11f      	bne.n	2c10 <__ieee754_pow+0xb0>
    2bd0:	464b      	mov	r3, r9
    2bd2:	2b00      	cmp	r3, #0
    2bd4:	db1c      	blt.n	2c10 <__ieee754_pow+0xb0>
    2bd6:	0030      	movs	r0, r6
    2bd8:	0029      	movs	r1, r5
    2bda:	f000 fcf7 	bl	35cc <__ieee754_sqrt>
    2bde:	0006      	movs	r6, r0
    2be0:	e007      	b.n	2bf2 <__ieee754_pow+0x92>
    2be2:	2800      	cmp	r0, #0
    2be4:	d00d      	beq.n	2c02 <__ieee754_pow+0xa2>
    2be6:	4b5a      	ldr	r3, [pc, #360]	; (2d50 <__ieee754_pow+0x1f0>)
    2be8:	18e0      	adds	r0, r4, r3
    2bea:	4330      	orrs	r0, r6
    2bec:	d10b      	bne.n	2c06 <__ieee754_pow+0xa6>
    2bee:	2600      	movs	r6, #0
    2bf0:	4955      	ldr	r1, [pc, #340]	; (2d48 <__ieee754_pow+0x1e8>)
    2bf2:	0030      	movs	r0, r6
    2bf4:	b011      	add	sp, #68	; 0x44
    2bf6:	bc3c      	pop	{r2, r3, r4, r5}
    2bf8:	4690      	mov	r8, r2
    2bfa:	4699      	mov	r9, r3
    2bfc:	46a2      	mov	sl, r4
    2bfe:	46ab      	mov	fp, r5
    2c00:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2c02:	42a7      	cmp	r7, r4
    2c04:	ddc8      	ble.n	2b98 <__ieee754_pow+0x38>
    2c06:	4853      	ldr	r0, [pc, #332]	; (2d54 <__ieee754_pow+0x1f4>)
    2c08:	f000 fde6 	bl	37d8 <nan>
    2c0c:	0006      	movs	r6, r0
    2c0e:	e7f0      	b.n	2bf2 <__ieee754_pow+0x92>
    2c10:	0030      	movs	r0, r6
    2c12:	0029      	movs	r1, r5
    2c14:	f000 fdd0 	bl	37b8 <fabs>
    2c18:	4643      	mov	r3, r8
    2c1a:	2b00      	cmp	r3, #0
    2c1c:	d01d      	beq.n	2c5a <__ieee754_pow+0xfa>
    2c1e:	0feb      	lsrs	r3, r5, #31
    2c20:	3b01      	subs	r3, #1
    2c22:	4698      	mov	r8, r3
    2c24:	465b      	mov	r3, fp
    2c26:	4642      	mov	r2, r8
    2c28:	4313      	orrs	r3, r2
    2c2a:	d079      	beq.n	2d20 <__ieee754_pow+0x1c0>
    2c2c:	4b4a      	ldr	r3, [pc, #296]	; (2d58 <__ieee754_pow+0x1f8>)
    2c2e:	429f      	cmp	r7, r3
    2c30:	dc00      	bgt.n	2c34 <__ieee754_pow+0xd4>
    2c32:	e09f      	b.n	2d74 <__ieee754_pow+0x214>
    2c34:	4b49      	ldr	r3, [pc, #292]	; (2d5c <__ieee754_pow+0x1fc>)
    2c36:	429f      	cmp	r7, r3
    2c38:	dc01      	bgt.n	2c3e <__ieee754_pow+0xde>
    2c3a:	f000 fbce 	bl	33da <__ieee754_pow+0x87a>
    2c3e:	4b48      	ldr	r3, [pc, #288]	; (2d60 <__ieee754_pow+0x200>)
    2c40:	429c      	cmp	r4, r3
    2c42:	dd79      	ble.n	2d38 <__ieee754_pow+0x1d8>
    2c44:	4653      	mov	r3, sl
    2c46:	2b00      	cmp	r3, #0
    2c48:	dd79      	ble.n	2d3e <__ieee754_pow+0x1de>
    2c4a:	4a46      	ldr	r2, [pc, #280]	; (2d64 <__ieee754_pow+0x204>)
    2c4c:	4b46      	ldr	r3, [pc, #280]	; (2d68 <__ieee754_pow+0x208>)
    2c4e:	0010      	movs	r0, r2
    2c50:	0019      	movs	r1, r3
    2c52:	f002 fac1 	bl	51d8 <__aeabi_dmul>
    2c56:	0006      	movs	r6, r0
    2c58:	e7cb      	b.n	2bf2 <__ieee754_pow+0x92>
    2c5a:	2c00      	cmp	r4, #0
    2c5c:	d004      	beq.n	2c68 <__ieee754_pow+0x108>
    2c5e:	4a3a      	ldr	r2, [pc, #232]	; (2d48 <__ieee754_pow+0x1e8>)
    2c60:	00ab      	lsls	r3, r5, #2
    2c62:	089b      	lsrs	r3, r3, #2
    2c64:	4293      	cmp	r3, r2
    2c66:	d1da      	bne.n	2c1e <__ieee754_pow+0xbe>
    2c68:	4653      	mov	r3, sl
    2c6a:	2b00      	cmp	r3, #0
    2c6c:	da00      	bge.n	2c70 <__ieee754_pow+0x110>
    2c6e:	e3ad      	b.n	33cc <__ieee754_pow+0x86c>
    2c70:	464b      	mov	r3, r9
    2c72:	2b00      	cmp	r3, #0
    2c74:	db0d      	blt.n	2c92 <__ieee754_pow+0x132>
    2c76:	0006      	movs	r6, r0
    2c78:	e7bb      	b.n	2bf2 <__ieee754_pow+0x92>
    2c7a:	4653      	mov	r3, sl
    2c7c:	0029      	movs	r1, r5
    2c7e:	2b00      	cmp	r3, #0
    2c80:	dab7      	bge.n	2bf2 <__ieee754_pow+0x92>
    2c82:	0032      	movs	r2, r6
    2c84:	002b      	movs	r3, r5
    2c86:	2000      	movs	r0, #0
    2c88:	492f      	ldr	r1, [pc, #188]	; (2d48 <__ieee754_pow+0x1e8>)
    2c8a:	f001 fe81 	bl	4990 <__aeabi_ddiv>
    2c8e:	0006      	movs	r6, r0
    2c90:	e7af      	b.n	2bf2 <__ieee754_pow+0x92>
    2c92:	4b2f      	ldr	r3, [pc, #188]	; (2d50 <__ieee754_pow+0x1f0>)
    2c94:	469c      	mov	ip, r3
    2c96:	465b      	mov	r3, fp
    2c98:	4464      	add	r4, ip
    2c9a:	431c      	orrs	r4, r3
    2c9c:	d101      	bne.n	2ca2 <__ieee754_pow+0x142>
    2c9e:	f000 fc2b 	bl	34f8 <__ieee754_pow+0x998>
    2ca2:	465b      	mov	r3, fp
    2ca4:	0006      	movs	r6, r0
    2ca6:	2b01      	cmp	r3, #1
    2ca8:	d1a3      	bne.n	2bf2 <__ieee754_pow+0x92>
    2caa:	2380      	movs	r3, #128	; 0x80
    2cac:	061b      	lsls	r3, r3, #24
    2cae:	469c      	mov	ip, r3
    2cb0:	4461      	add	r1, ip
    2cb2:	e79e      	b.n	2bf2 <__ieee754_pow+0x92>
    2cb4:	2a00      	cmp	r2, #0
    2cb6:	d100      	bne.n	2cba <__ieee754_pow+0x15a>
    2cb8:	e772      	b.n	2ba0 <__ieee754_pow+0x40>
    2cba:	e794      	b.n	2be6 <__ieee754_pow+0x86>
    2cbc:	4b2b      	ldr	r3, [pc, #172]	; (2d6c <__ieee754_pow+0x20c>)
    2cbe:	429f      	cmp	r7, r3
    2cc0:	dc2b      	bgt.n	2d1a <__ieee754_pow+0x1ba>
    2cc2:	4b27      	ldr	r3, [pc, #156]	; (2d60 <__ieee754_pow+0x200>)
    2cc4:	429f      	cmp	r7, r3
    2cc6:	dc00      	bgt.n	2cca <__ieee754_pow+0x16a>
    2cc8:	e770      	b.n	2bac <__ieee754_pow+0x4c>
    2cca:	4929      	ldr	r1, [pc, #164]	; (2d70 <__ieee754_pow+0x210>)
    2ccc:	153b      	asrs	r3, r7, #20
    2cce:	468c      	mov	ip, r1
    2cd0:	4463      	add	r3, ip
    2cd2:	2b14      	cmp	r3, #20
    2cd4:	dc01      	bgt.n	2cda <__ieee754_pow+0x17a>
    2cd6:	f000 fbf2 	bl	34be <__ieee754_pow+0x95e>
    2cda:	2134      	movs	r1, #52	; 0x34
    2cdc:	1acb      	subs	r3, r1, r3
    2cde:	9900      	ldr	r1, [sp, #0]
    2ce0:	40d9      	lsrs	r1, r3
    2ce2:	0008      	movs	r0, r1
    2ce4:	4098      	lsls	r0, r3
    2ce6:	4282      	cmp	r2, r0
    2ce8:	d000      	beq.n	2cec <__ieee754_pow+0x18c>
    2cea:	e75f      	b.n	2bac <__ieee754_pow+0x4c>
    2cec:	2301      	movs	r3, #1
    2cee:	4019      	ands	r1, r3
    2cf0:	3301      	adds	r3, #1
    2cf2:	1a5b      	subs	r3, r3, r1
    2cf4:	469b      	mov	fp, r3
    2cf6:	e759      	b.n	2bac <__ieee754_pow+0x4c>
    2cf8:	4b15      	ldr	r3, [pc, #84]	; (2d50 <__ieee754_pow+0x1f0>)
    2cfa:	18e0      	adds	r0, r4, r3
    2cfc:	4306      	orrs	r6, r0
    2cfe:	d100      	bne.n	2d02 <__ieee754_pow+0x1a2>
    2d00:	e775      	b.n	2bee <__ieee754_pow+0x8e>
    2d02:	4b17      	ldr	r3, [pc, #92]	; (2d60 <__ieee754_pow+0x200>)
    2d04:	429c      	cmp	r4, r3
    2d06:	dc00      	bgt.n	2d0a <__ieee754_pow+0x1aa>
    2d08:	e351      	b.n	33ae <__ieee754_pow+0x84e>
    2d0a:	4653      	mov	r3, sl
    2d0c:	2b00      	cmp	r3, #0
    2d0e:	db16      	blt.n	2d3e <__ieee754_pow+0x1de>
    2d10:	9b00      	ldr	r3, [sp, #0]
    2d12:	9c01      	ldr	r4, [sp, #4]
    2d14:	001e      	movs	r6, r3
    2d16:	0021      	movs	r1, r4
    2d18:	e76b      	b.n	2bf2 <__ieee754_pow+0x92>
    2d1a:	2302      	movs	r3, #2
    2d1c:	469b      	mov	fp, r3
    2d1e:	e745      	b.n	2bac <__ieee754_pow+0x4c>
    2d20:	0032      	movs	r2, r6
    2d22:	002b      	movs	r3, r5
    2d24:	0030      	movs	r0, r6
    2d26:	0029      	movs	r1, r5
    2d28:	f002 fcd0 	bl	56cc <__aeabi_dsub>
    2d2c:	0002      	movs	r2, r0
    2d2e:	000b      	movs	r3, r1
    2d30:	f001 fe2e 	bl	4990 <__aeabi_ddiv>
    2d34:	0006      	movs	r6, r0
    2d36:	e75c      	b.n	2bf2 <__ieee754_pow+0x92>
    2d38:	4653      	mov	r3, sl
    2d3a:	2b00      	cmp	r3, #0
    2d3c:	db85      	blt.n	2c4a <__ieee754_pow+0xea>
    2d3e:	2600      	movs	r6, #0
    2d40:	2100      	movs	r1, #0
    2d42:	e756      	b.n	2bf2 <__ieee754_pow+0x92>
    2d44:	7ff00000 	.word	0x7ff00000
    2d48:	3ff00000 	.word	0x3ff00000
    2d4c:	3fe00000 	.word	0x3fe00000
    2d50:	c0100000 	.word	0xc0100000
    2d54:	000063d0 	.word	0x000063d0
    2d58:	41e00000 	.word	0x41e00000
    2d5c:	43f00000 	.word	0x43f00000
    2d60:	3fefffff 	.word	0x3fefffff
    2d64:	8800759c 	.word	0x8800759c
    2d68:	7e37e43c 	.word	0x7e37e43c
    2d6c:	433fffff 	.word	0x433fffff
    2d70:	fffffc01 	.word	0xfffffc01
    2d74:	4be8      	ldr	r3, [pc, #928]	; (3118 <__ieee754_pow+0x5b8>)
    2d76:	2200      	movs	r2, #0
    2d78:	429c      	cmp	r4, r3
    2d7a:	dc06      	bgt.n	2d8a <__ieee754_pow+0x22a>
    2d7c:	2200      	movs	r2, #0
    2d7e:	4be7      	ldr	r3, [pc, #924]	; (311c <__ieee754_pow+0x5bc>)
    2d80:	f002 fa2a 	bl	51d8 <__aeabi_dmul>
    2d84:	2235      	movs	r2, #53	; 0x35
    2d86:	000c      	movs	r4, r1
    2d88:	4252      	negs	r2, r2
    2d8a:	4de5      	ldr	r5, [pc, #916]	; (3120 <__ieee754_pow+0x5c0>)
    2d8c:	1523      	asrs	r3, r4, #20
    2d8e:	46ac      	mov	ip, r5
    2d90:	4463      	add	r3, ip
    2d92:	4699      	mov	r9, r3
    2d94:	0324      	lsls	r4, r4, #12
    2d96:	4de3      	ldr	r5, [pc, #908]	; (3124 <__ieee754_pow+0x5c4>)
    2d98:	4be3      	ldr	r3, [pc, #908]	; (3128 <__ieee754_pow+0x5c8>)
    2d9a:	0b24      	lsrs	r4, r4, #12
    2d9c:	4491      	add	r9, r2
    2d9e:	4325      	orrs	r5, r4
    2da0:	429c      	cmp	r4, r3
    2da2:	dd09      	ble.n	2db8 <__ieee754_pow+0x258>
    2da4:	4be1      	ldr	r3, [pc, #900]	; (312c <__ieee754_pow+0x5cc>)
    2da6:	429c      	cmp	r4, r3
    2da8:	dc00      	bgt.n	2dac <__ieee754_pow+0x24c>
    2daa:	e3a9      	b.n	3500 <__ieee754_pow+0x9a0>
    2dac:	2301      	movs	r3, #1
    2dae:	469c      	mov	ip, r3
    2db0:	4bdf      	ldr	r3, [pc, #892]	; (3130 <__ieee754_pow+0x5d0>)
    2db2:	44e1      	add	r9, ip
    2db4:	469c      	mov	ip, r3
    2db6:	4465      	add	r5, ip
    2db8:	2300      	movs	r3, #0
    2dba:	2400      	movs	r4, #0
    2dbc:	2200      	movs	r2, #0
    2dbe:	9308      	str	r3, [sp, #32]
    2dc0:	9409      	str	r4, [sp, #36]	; 0x24
    2dc2:	930c      	str	r3, [sp, #48]	; 0x30
    2dc4:	940d      	str	r4, [sp, #52]	; 0x34
    2dc6:	2400      	movs	r4, #0
    2dc8:	4bd6      	ldr	r3, [pc, #856]	; (3124 <__ieee754_pow+0x5c4>)
    2dca:	9206      	str	r2, [sp, #24]
    2dcc:	9307      	str	r3, [sp, #28]
    2dce:	9a06      	ldr	r2, [sp, #24]
    2dd0:	9b07      	ldr	r3, [sp, #28]
    2dd2:	0029      	movs	r1, r5
    2dd4:	900a      	str	r0, [sp, #40]	; 0x28
    2dd6:	910b      	str	r1, [sp, #44]	; 0x2c
    2dd8:	f002 fc78 	bl	56cc <__aeabi_dsub>
    2ddc:	9a06      	ldr	r2, [sp, #24]
    2dde:	9b07      	ldr	r3, [sp, #28]
    2de0:	0006      	movs	r6, r0
    2de2:	000f      	movs	r7, r1
    2de4:	980a      	ldr	r0, [sp, #40]	; 0x28
    2de6:	990b      	ldr	r1, [sp, #44]	; 0x2c
    2de8:	f001 faa6 	bl	4338 <__aeabi_dadd>
    2dec:	0002      	movs	r2, r0
    2dee:	000b      	movs	r3, r1
    2df0:	2000      	movs	r0, #0
    2df2:	49cc      	ldr	r1, [pc, #816]	; (3124 <__ieee754_pow+0x5c4>)
    2df4:	f001 fdcc 	bl	4990 <__aeabi_ddiv>
    2df8:	000a      	movs	r2, r1
    2dfa:	0001      	movs	r1, r0
    2dfc:	0013      	movs	r3, r2
    2dfe:	910e      	str	r1, [sp, #56]	; 0x38
    2e00:	920f      	str	r2, [sp, #60]	; 0x3c
    2e02:	0002      	movs	r2, r0
    2e04:	0039      	movs	r1, r7
    2e06:	0030      	movs	r0, r6
    2e08:	f002 f9e6 	bl	51d8 <__aeabi_dmul>
    2e0c:	000a      	movs	r2, r1
    2e0e:	0001      	movs	r1, r0
    2e10:	2080      	movs	r0, #128	; 0x80
    2e12:	9104      	str	r1, [sp, #16]
    2e14:	9205      	str	r2, [sp, #20]
    2e16:	0013      	movs	r3, r2
    2e18:	2200      	movs	r2, #0
    2e1a:	2180      	movs	r1, #128	; 0x80
    2e1c:	0300      	lsls	r0, r0, #12
    2e1e:	4684      	mov	ip, r0
    2e20:	9202      	str	r2, [sp, #8]
    2e22:	9303      	str	r3, [sp, #12]
    2e24:	2200      	movs	r2, #0
    2e26:	0589      	lsls	r1, r1, #22
    2e28:	106d      	asrs	r5, r5, #1
    2e2a:	430d      	orrs	r5, r1
    2e2c:	4465      	add	r5, ip
    2e2e:	192b      	adds	r3, r5, r4
    2e30:	9802      	ldr	r0, [sp, #8]
    2e32:	9903      	ldr	r1, [sp, #12]
    2e34:	0014      	movs	r4, r2
    2e36:	001d      	movs	r5, r3
    2e38:	f002 f9ce 	bl	51d8 <__aeabi_dmul>
    2e3c:	0002      	movs	r2, r0
    2e3e:	000b      	movs	r3, r1
    2e40:	0030      	movs	r0, r6
    2e42:	0039      	movs	r1, r7
    2e44:	f002 fc42 	bl	56cc <__aeabi_dsub>
    2e48:	9a06      	ldr	r2, [sp, #24]
    2e4a:	9b07      	ldr	r3, [sp, #28]
    2e4c:	0006      	movs	r6, r0
    2e4e:	000f      	movs	r7, r1
    2e50:	0020      	movs	r0, r4
    2e52:	0029      	movs	r1, r5
    2e54:	f002 fc3a 	bl	56cc <__aeabi_dsub>
    2e58:	0002      	movs	r2, r0
    2e5a:	000b      	movs	r3, r1
    2e5c:	980a      	ldr	r0, [sp, #40]	; 0x28
    2e5e:	990b      	ldr	r1, [sp, #44]	; 0x2c
    2e60:	f002 fc34 	bl	56cc <__aeabi_dsub>
    2e64:	9a02      	ldr	r2, [sp, #8]
    2e66:	9b03      	ldr	r3, [sp, #12]
    2e68:	f002 f9b6 	bl	51d8 <__aeabi_dmul>
    2e6c:	0002      	movs	r2, r0
    2e6e:	000b      	movs	r3, r1
    2e70:	0030      	movs	r0, r6
    2e72:	0039      	movs	r1, r7
    2e74:	f002 fc2a 	bl	56cc <__aeabi_dsub>
    2e78:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    2e7a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    2e7c:	f002 f9ac 	bl	51d8 <__aeabi_dmul>
    2e80:	9d04      	ldr	r5, [sp, #16]
    2e82:	9e05      	ldr	r6, [sp, #20]
    2e84:	9006      	str	r0, [sp, #24]
    2e86:	9107      	str	r1, [sp, #28]
    2e88:	002a      	movs	r2, r5
    2e8a:	0033      	movs	r3, r6
    2e8c:	0028      	movs	r0, r5
    2e8e:	0031      	movs	r1, r6
    2e90:	f002 f9a2 	bl	51d8 <__aeabi_dmul>
    2e94:	0006      	movs	r6, r0
    2e96:	000f      	movs	r7, r1
    2e98:	4aa6      	ldr	r2, [pc, #664]	; (3134 <__ieee754_pow+0x5d4>)
    2e9a:	4ba7      	ldr	r3, [pc, #668]	; (3138 <__ieee754_pow+0x5d8>)
    2e9c:	f002 f99c 	bl	51d8 <__aeabi_dmul>
    2ea0:	4aa6      	ldr	r2, [pc, #664]	; (313c <__ieee754_pow+0x5dc>)
    2ea2:	4ba7      	ldr	r3, [pc, #668]	; (3140 <__ieee754_pow+0x5e0>)
    2ea4:	f001 fa48 	bl	4338 <__aeabi_dadd>
    2ea8:	0032      	movs	r2, r6
    2eaa:	003b      	movs	r3, r7
    2eac:	f002 f994 	bl	51d8 <__aeabi_dmul>
    2eb0:	4aa4      	ldr	r2, [pc, #656]	; (3144 <__ieee754_pow+0x5e4>)
    2eb2:	4ba5      	ldr	r3, [pc, #660]	; (3148 <__ieee754_pow+0x5e8>)
    2eb4:	f001 fa40 	bl	4338 <__aeabi_dadd>
    2eb8:	0032      	movs	r2, r6
    2eba:	003b      	movs	r3, r7
    2ebc:	f002 f98c 	bl	51d8 <__aeabi_dmul>
    2ec0:	4aa2      	ldr	r2, [pc, #648]	; (314c <__ieee754_pow+0x5ec>)
    2ec2:	4ba3      	ldr	r3, [pc, #652]	; (3150 <__ieee754_pow+0x5f0>)
    2ec4:	f001 fa38 	bl	4338 <__aeabi_dadd>
    2ec8:	0032      	movs	r2, r6
    2eca:	003b      	movs	r3, r7
    2ecc:	f002 f984 	bl	51d8 <__aeabi_dmul>
    2ed0:	4aa0      	ldr	r2, [pc, #640]	; (3154 <__ieee754_pow+0x5f4>)
    2ed2:	4ba1      	ldr	r3, [pc, #644]	; (3158 <__ieee754_pow+0x5f8>)
    2ed4:	f001 fa30 	bl	4338 <__aeabi_dadd>
    2ed8:	0032      	movs	r2, r6
    2eda:	003b      	movs	r3, r7
    2edc:	f002 f97c 	bl	51d8 <__aeabi_dmul>
    2ee0:	4a9e      	ldr	r2, [pc, #632]	; (315c <__ieee754_pow+0x5fc>)
    2ee2:	4b9f      	ldr	r3, [pc, #636]	; (3160 <__ieee754_pow+0x600>)
    2ee4:	f001 fa28 	bl	4338 <__aeabi_dadd>
    2ee8:	0032      	movs	r2, r6
    2eea:	0004      	movs	r4, r0
    2eec:	000d      	movs	r5, r1
    2eee:	003b      	movs	r3, r7
    2ef0:	0030      	movs	r0, r6
    2ef2:	0039      	movs	r1, r7
    2ef4:	f002 f970 	bl	51d8 <__aeabi_dmul>
    2ef8:	0002      	movs	r2, r0
    2efa:	000b      	movs	r3, r1
    2efc:	0020      	movs	r0, r4
    2efe:	0029      	movs	r1, r5
    2f00:	f002 f96a 	bl	51d8 <__aeabi_dmul>
    2f04:	9e02      	ldr	r6, [sp, #8]
    2f06:	9f03      	ldr	r7, [sp, #12]
    2f08:	0004      	movs	r4, r0
    2f0a:	000d      	movs	r5, r1
    2f0c:	9804      	ldr	r0, [sp, #16]
    2f0e:	9905      	ldr	r1, [sp, #20]
    2f10:	0032      	movs	r2, r6
    2f12:	003b      	movs	r3, r7
    2f14:	f001 fa10 	bl	4338 <__aeabi_dadd>
    2f18:	9a06      	ldr	r2, [sp, #24]
    2f1a:	9b07      	ldr	r3, [sp, #28]
    2f1c:	f002 f95c 	bl	51d8 <__aeabi_dmul>
    2f20:	0022      	movs	r2, r4
    2f22:	002b      	movs	r3, r5
    2f24:	f001 fa08 	bl	4338 <__aeabi_dadd>
    2f28:	0032      	movs	r2, r6
    2f2a:	900a      	str	r0, [sp, #40]	; 0x28
    2f2c:	910b      	str	r1, [sp, #44]	; 0x2c
    2f2e:	003b      	movs	r3, r7
    2f30:	0030      	movs	r0, r6
    2f32:	0039      	movs	r1, r7
    2f34:	9602      	str	r6, [sp, #8]
    2f36:	9703      	str	r7, [sp, #12]
    2f38:	f002 f94e 	bl	51d8 <__aeabi_dmul>
    2f3c:	2200      	movs	r2, #0
    2f3e:	4b89      	ldr	r3, [pc, #548]	; (3164 <__ieee754_pow+0x604>)
    2f40:	0004      	movs	r4, r0
    2f42:	000d      	movs	r5, r1
    2f44:	f001 f9f8 	bl	4338 <__aeabi_dadd>
    2f48:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    2f4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    2f4c:	f001 f9f4 	bl	4338 <__aeabi_dadd>
    2f50:	2600      	movs	r6, #0
    2f52:	000f      	movs	r7, r1
    2f54:	0032      	movs	r2, r6
    2f56:	000b      	movs	r3, r1
    2f58:	9802      	ldr	r0, [sp, #8]
    2f5a:	9903      	ldr	r1, [sp, #12]
    2f5c:	f002 f93c 	bl	51d8 <__aeabi_dmul>
    2f60:	2200      	movs	r2, #0
    2f62:	9002      	str	r0, [sp, #8]
    2f64:	9103      	str	r1, [sp, #12]
    2f66:	4b7f      	ldr	r3, [pc, #508]	; (3164 <__ieee754_pow+0x604>)
    2f68:	0030      	movs	r0, r6
    2f6a:	0039      	movs	r1, r7
    2f6c:	f002 fbae 	bl	56cc <__aeabi_dsub>
    2f70:	0022      	movs	r2, r4
    2f72:	002b      	movs	r3, r5
    2f74:	f002 fbaa 	bl	56cc <__aeabi_dsub>
    2f78:	0002      	movs	r2, r0
    2f7a:	000b      	movs	r3, r1
    2f7c:	980a      	ldr	r0, [sp, #40]	; 0x28
    2f7e:	990b      	ldr	r1, [sp, #44]	; 0x2c
    2f80:	f002 fba4 	bl	56cc <__aeabi_dsub>
    2f84:	9a04      	ldr	r2, [sp, #16]
    2f86:	9b05      	ldr	r3, [sp, #20]
    2f88:	f002 f926 	bl	51d8 <__aeabi_dmul>
    2f8c:	0032      	movs	r2, r6
    2f8e:	0004      	movs	r4, r0
    2f90:	000d      	movs	r5, r1
    2f92:	9806      	ldr	r0, [sp, #24]
    2f94:	9907      	ldr	r1, [sp, #28]
    2f96:	003b      	movs	r3, r7
    2f98:	f002 f91e 	bl	51d8 <__aeabi_dmul>
    2f9c:	0002      	movs	r2, r0
    2f9e:	000b      	movs	r3, r1
    2fa0:	0020      	movs	r0, r4
    2fa2:	0029      	movs	r1, r5
    2fa4:	f001 f9c8 	bl	4338 <__aeabi_dadd>
    2fa8:	0004      	movs	r4, r0
    2faa:	000d      	movs	r5, r1
    2fac:	0002      	movs	r2, r0
    2fae:	000b      	movs	r3, r1
    2fb0:	9802      	ldr	r0, [sp, #8]
    2fb2:	9903      	ldr	r1, [sp, #12]
    2fb4:	f001 f9c0 	bl	4338 <__aeabi_dadd>
    2fb8:	2600      	movs	r6, #0
    2fba:	22e0      	movs	r2, #224	; 0xe0
    2fbc:	4b6a      	ldr	r3, [pc, #424]	; (3168 <__ieee754_pow+0x608>)
    2fbe:	0612      	lsls	r2, r2, #24
    2fc0:	0030      	movs	r0, r6
    2fc2:	000f      	movs	r7, r1
    2fc4:	f002 f908 	bl	51d8 <__aeabi_dmul>
    2fc8:	9a02      	ldr	r2, [sp, #8]
    2fca:	9b03      	ldr	r3, [sp, #12]
    2fcc:	9004      	str	r0, [sp, #16]
    2fce:	9105      	str	r1, [sp, #20]
    2fd0:	0030      	movs	r0, r6
    2fd2:	0039      	movs	r1, r7
    2fd4:	f002 fb7a 	bl	56cc <__aeabi_dsub>
    2fd8:	0002      	movs	r2, r0
    2fda:	000b      	movs	r3, r1
    2fdc:	0020      	movs	r0, r4
    2fde:	0029      	movs	r1, r5
    2fe0:	f002 fb74 	bl	56cc <__aeabi_dsub>
    2fe4:	4a61      	ldr	r2, [pc, #388]	; (316c <__ieee754_pow+0x60c>)
    2fe6:	4b60      	ldr	r3, [pc, #384]	; (3168 <__ieee754_pow+0x608>)
    2fe8:	f002 f8f6 	bl	51d8 <__aeabi_dmul>
    2fec:	4a60      	ldr	r2, [pc, #384]	; (3170 <__ieee754_pow+0x610>)
    2fee:	0004      	movs	r4, r0
    2ff0:	000d      	movs	r5, r1
    2ff2:	4b60      	ldr	r3, [pc, #384]	; (3174 <__ieee754_pow+0x614>)
    2ff4:	0030      	movs	r0, r6
    2ff6:	0039      	movs	r1, r7
    2ff8:	f002 f8ee 	bl	51d8 <__aeabi_dmul>
    2ffc:	0002      	movs	r2, r0
    2ffe:	000b      	movs	r3, r1
    3000:	0020      	movs	r0, r4
    3002:	0029      	movs	r1, r5
    3004:	f001 f998 	bl	4338 <__aeabi_dadd>
    3008:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    300a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    300c:	f001 f994 	bl	4338 <__aeabi_dadd>
    3010:	0006      	movs	r6, r0
    3012:	4648      	mov	r0, r9
    3014:	000f      	movs	r7, r1
    3016:	f002 ff03 	bl	5e20 <__aeabi_i2d>
    301a:	0004      	movs	r4, r0
    301c:	000d      	movs	r5, r1
    301e:	9804      	ldr	r0, [sp, #16]
    3020:	9905      	ldr	r1, [sp, #20]
    3022:	0032      	movs	r2, r6
    3024:	003b      	movs	r3, r7
    3026:	f001 f987 	bl	4338 <__aeabi_dadd>
    302a:	9a08      	ldr	r2, [sp, #32]
    302c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    302e:	f001 f983 	bl	4338 <__aeabi_dadd>
    3032:	0022      	movs	r2, r4
    3034:	002b      	movs	r3, r5
    3036:	f001 f97f 	bl	4338 <__aeabi_dadd>
    303a:	2000      	movs	r0, #0
    303c:	0022      	movs	r2, r4
    303e:	002b      	movs	r3, r5
    3040:	9002      	str	r0, [sp, #8]
    3042:	9103      	str	r1, [sp, #12]
    3044:	f002 fb42 	bl	56cc <__aeabi_dsub>
    3048:	9a08      	ldr	r2, [sp, #32]
    304a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    304c:	f002 fb3e 	bl	56cc <__aeabi_dsub>
    3050:	9a04      	ldr	r2, [sp, #16]
    3052:	9b05      	ldr	r3, [sp, #20]
    3054:	f002 fb3a 	bl	56cc <__aeabi_dsub>
    3058:	0002      	movs	r2, r0
    305a:	000b      	movs	r3, r1
    305c:	0030      	movs	r0, r6
    305e:	0039      	movs	r1, r7
    3060:	f002 fb34 	bl	56cc <__aeabi_dsub>
    3064:	9004      	str	r0, [sp, #16]
    3066:	9105      	str	r1, [sp, #20]
    3068:	465b      	mov	r3, fp
    306a:	4642      	mov	r2, r8
    306c:	3b01      	subs	r3, #1
    306e:	4313      	orrs	r3, r2
    3070:	d100      	bne.n	3074 <__ieee754_pow+0x514>
    3072:	e197      	b.n	33a4 <__ieee754_pow+0x844>
    3074:	2300      	movs	r3, #0
    3076:	4c2b      	ldr	r4, [pc, #172]	; (3124 <__ieee754_pow+0x5c4>)
    3078:	9306      	str	r3, [sp, #24]
    307a:	9407      	str	r4, [sp, #28]
    307c:	9800      	ldr	r0, [sp, #0]
    307e:	9901      	ldr	r1, [sp, #4]
    3080:	2600      	movs	r6, #0
    3082:	000b      	movs	r3, r1
    3084:	0032      	movs	r2, r6
    3086:	000f      	movs	r7, r1
    3088:	f002 fb20 	bl	56cc <__aeabi_dsub>
    308c:	9a02      	ldr	r2, [sp, #8]
    308e:	9b03      	ldr	r3, [sp, #12]
    3090:	f002 f8a2 	bl	51d8 <__aeabi_dmul>
    3094:	9a00      	ldr	r2, [sp, #0]
    3096:	9b01      	ldr	r3, [sp, #4]
    3098:	0004      	movs	r4, r0
    309a:	000d      	movs	r5, r1
    309c:	9804      	ldr	r0, [sp, #16]
    309e:	9905      	ldr	r1, [sp, #20]
    30a0:	f002 f89a 	bl	51d8 <__aeabi_dmul>
    30a4:	0002      	movs	r2, r0
    30a6:	000b      	movs	r3, r1
    30a8:	0020      	movs	r0, r4
    30aa:	0029      	movs	r1, r5
    30ac:	f001 f944 	bl	4338 <__aeabi_dadd>
    30b0:	0004      	movs	r4, r0
    30b2:	000d      	movs	r5, r1
    30b4:	9802      	ldr	r0, [sp, #8]
    30b6:	9903      	ldr	r1, [sp, #12]
    30b8:	003b      	movs	r3, r7
    30ba:	0032      	movs	r2, r6
    30bc:	9404      	str	r4, [sp, #16]
    30be:	9505      	str	r5, [sp, #20]
    30c0:	f002 f88a 	bl	51d8 <__aeabi_dmul>
    30c4:	9000      	str	r0, [sp, #0]
    30c6:	9101      	str	r1, [sp, #4]
    30c8:	000b      	movs	r3, r1
    30ca:	0002      	movs	r2, r0
    30cc:	0029      	movs	r1, r5
    30ce:	0020      	movs	r0, r4
    30d0:	f001 f932 	bl	4338 <__aeabi_dadd>
    30d4:	4b28      	ldr	r3, [pc, #160]	; (3178 <__ieee754_pow+0x618>)
    30d6:	4681      	mov	r9, r0
    30d8:	1e0f      	subs	r7, r1, #0
    30da:	468a      	mov	sl, r1
    30dc:	429f      	cmp	r7, r3
    30de:	dc00      	bgt.n	30e2 <__ieee754_pow+0x582>
    30e0:	e13c      	b.n	335c <__ieee754_pow+0x7fc>
    30e2:	4b26      	ldr	r3, [pc, #152]	; (317c <__ieee754_pow+0x61c>)
    30e4:	18cb      	adds	r3, r1, r3
    30e6:	4303      	orrs	r3, r0
    30e8:	d000      	beq.n	30ec <__ieee754_pow+0x58c>
    30ea:	e1db      	b.n	34a4 <__ieee754_pow+0x944>
    30ec:	9804      	ldr	r0, [sp, #16]
    30ee:	9905      	ldr	r1, [sp, #20]
    30f0:	4a23      	ldr	r2, [pc, #140]	; (3180 <__ieee754_pow+0x620>)
    30f2:	4b24      	ldr	r3, [pc, #144]	; (3184 <__ieee754_pow+0x624>)
    30f4:	f001 f920 	bl	4338 <__aeabi_dadd>
    30f8:	9a00      	ldr	r2, [sp, #0]
    30fa:	9b01      	ldr	r3, [sp, #4]
    30fc:	0004      	movs	r4, r0
    30fe:	000d      	movs	r5, r1
    3100:	4648      	mov	r0, r9
    3102:	0039      	movs	r1, r7
    3104:	f002 fae2 	bl	56cc <__aeabi_dsub>
    3108:	0002      	movs	r2, r0
    310a:	000b      	movs	r3, r1
    310c:	0020      	movs	r0, r4
    310e:	0029      	movs	r1, r5
    3110:	f000 fcae 	bl	3a70 <__aeabi_dcmpgt>
    3114:	003e      	movs	r6, r7
    3116:	e037      	b.n	3188 <__ieee754_pow+0x628>
    3118:	000fffff 	.word	0x000fffff
    311c:	43400000 	.word	0x43400000
    3120:	fffffc01 	.word	0xfffffc01
    3124:	3ff00000 	.word	0x3ff00000
    3128:	0003988e 	.word	0x0003988e
    312c:	000bb679 	.word	0x000bb679
    3130:	fff00000 	.word	0xfff00000
    3134:	4a454eef 	.word	0x4a454eef
    3138:	3fca7e28 	.word	0x3fca7e28
    313c:	93c9db65 	.word	0x93c9db65
    3140:	3fcd864a 	.word	0x3fcd864a
    3144:	a91d4101 	.word	0xa91d4101
    3148:	3fd17460 	.word	0x3fd17460
    314c:	518f264d 	.word	0x518f264d
    3150:	3fd55555 	.word	0x3fd55555
    3154:	db6fabff 	.word	0xdb6fabff
    3158:	3fdb6db6 	.word	0x3fdb6db6
    315c:	33333303 	.word	0x33333303
    3160:	3fe33333 	.word	0x3fe33333
    3164:	40080000 	.word	0x40080000
    3168:	3feec709 	.word	0x3feec709
    316c:	dc3a03fd 	.word	0xdc3a03fd
    3170:	145b01f5 	.word	0x145b01f5
    3174:	be3e2fe0 	.word	0xbe3e2fe0
    3178:	408fffff 	.word	0x408fffff
    317c:	bf700000 	.word	0xbf700000
    3180:	652b82fe 	.word	0x652b82fe
    3184:	3c971547 	.word	0x3c971547
    3188:	2800      	cmp	r0, #0
    318a:	d000      	beq.n	318e <__ieee754_pow+0x62e>
    318c:	e18a      	b.n	34a4 <__ieee754_pow+0x944>
    318e:	2280      	movs	r2, #128	; 0x80
    3190:	4be7      	ldr	r3, [pc, #924]	; (3530 <__ieee754_pow+0x9d0>)
    3192:	0352      	lsls	r2, r2, #13
    3194:	469c      	mov	ip, r3
    3196:	0013      	movs	r3, r2
    3198:	1536      	asrs	r6, r6, #20
    319a:	4466      	add	r6, ip
    319c:	4133      	asrs	r3, r6
    319e:	49e5      	ldr	r1, [pc, #916]	; (3534 <__ieee754_pow+0x9d4>)
    31a0:	19db      	adds	r3, r3, r7
    31a2:	005e      	lsls	r6, r3, #1
    31a4:	001c      	movs	r4, r3
    31a6:	031b      	lsls	r3, r3, #12
    31a8:	468c      	mov	ip, r1
    31aa:	0b1b      	lsrs	r3, r3, #12
    31ac:	4313      	orrs	r3, r2
    31ae:	2214      	movs	r2, #20
    31b0:	0d76      	lsrs	r6, r6, #21
    31b2:	4fe1      	ldr	r7, [pc, #900]	; (3538 <__ieee754_pow+0x9d8>)
    31b4:	4466      	add	r6, ip
    31b6:	4137      	asrs	r7, r6
    31b8:	1b96      	subs	r6, r2, r6
    31ba:	4133      	asrs	r3, r6
    31bc:	4698      	mov	r8, r3
    31be:	4653      	mov	r3, sl
    31c0:	43bc      	bics	r4, r7
    31c2:	2000      	movs	r0, #0
    31c4:	0021      	movs	r1, r4
    31c6:	2b00      	cmp	r3, #0
    31c8:	da00      	bge.n	31cc <__ieee754_pow+0x66c>
    31ca:	e1a9      	b.n	3520 <__ieee754_pow+0x9c0>
    31cc:	0002      	movs	r2, r0
    31ce:	000b      	movs	r3, r1
    31d0:	9800      	ldr	r0, [sp, #0]
    31d2:	9901      	ldr	r1, [sp, #4]
    31d4:	f002 fa7a 	bl	56cc <__aeabi_dsub>
    31d8:	000b      	movs	r3, r1
    31da:	9000      	str	r0, [sp, #0]
    31dc:	9101      	str	r1, [sp, #4]
    31de:	0002      	movs	r2, r0
    31e0:	9804      	ldr	r0, [sp, #16]
    31e2:	9905      	ldr	r1, [sp, #20]
    31e4:	f001 f8a8 	bl	4338 <__aeabi_dadd>
    31e8:	4643      	mov	r3, r8
    31ea:	051b      	lsls	r3, r3, #20
    31ec:	4699      	mov	r9, r3
    31ee:	2000      	movs	r0, #0
    31f0:	2200      	movs	r2, #0
    31f2:	4bd2      	ldr	r3, [pc, #840]	; (353c <__ieee754_pow+0x9dc>)
    31f4:	0006      	movs	r6, r0
    31f6:	000f      	movs	r7, r1
    31f8:	f001 ffee 	bl	51d8 <__aeabi_dmul>
    31fc:	9a00      	ldr	r2, [sp, #0]
    31fe:	9b01      	ldr	r3, [sp, #4]
    3200:	9002      	str	r0, [sp, #8]
    3202:	9103      	str	r1, [sp, #12]
    3204:	0030      	movs	r0, r6
    3206:	0039      	movs	r1, r7
    3208:	f002 fa60 	bl	56cc <__aeabi_dsub>
    320c:	0002      	movs	r2, r0
    320e:	000b      	movs	r3, r1
    3210:	9804      	ldr	r0, [sp, #16]
    3212:	9905      	ldr	r1, [sp, #20]
    3214:	f002 fa5a 	bl	56cc <__aeabi_dsub>
    3218:	4ac9      	ldr	r2, [pc, #804]	; (3540 <__ieee754_pow+0x9e0>)
    321a:	4bca      	ldr	r3, [pc, #808]	; (3544 <__ieee754_pow+0x9e4>)
    321c:	f001 ffdc 	bl	51d8 <__aeabi_dmul>
    3220:	4ac9      	ldr	r2, [pc, #804]	; (3548 <__ieee754_pow+0x9e8>)
    3222:	0004      	movs	r4, r0
    3224:	000d      	movs	r5, r1
    3226:	4bc9      	ldr	r3, [pc, #804]	; (354c <__ieee754_pow+0x9ec>)
    3228:	0030      	movs	r0, r6
    322a:	0039      	movs	r1, r7
    322c:	f001 ffd4 	bl	51d8 <__aeabi_dmul>
    3230:	0002      	movs	r2, r0
    3232:	000b      	movs	r3, r1
    3234:	0020      	movs	r0, r4
    3236:	0029      	movs	r1, r5
    3238:	f001 f87e 	bl	4338 <__aeabi_dadd>
    323c:	0004      	movs	r4, r0
    323e:	000d      	movs	r5, r1
    3240:	0002      	movs	r2, r0
    3242:	000b      	movs	r3, r1
    3244:	9802      	ldr	r0, [sp, #8]
    3246:	9903      	ldr	r1, [sp, #12]
    3248:	f001 f876 	bl	4338 <__aeabi_dadd>
    324c:	9a02      	ldr	r2, [sp, #8]
    324e:	9b03      	ldr	r3, [sp, #12]
    3250:	0006      	movs	r6, r0
    3252:	000f      	movs	r7, r1
    3254:	f002 fa3a 	bl	56cc <__aeabi_dsub>
    3258:	0002      	movs	r2, r0
    325a:	000b      	movs	r3, r1
    325c:	0020      	movs	r0, r4
    325e:	0029      	movs	r1, r5
    3260:	f002 fa34 	bl	56cc <__aeabi_dsub>
    3264:	0032      	movs	r2, r6
    3266:	9000      	str	r0, [sp, #0]
    3268:	9101      	str	r1, [sp, #4]
    326a:	003b      	movs	r3, r7
    326c:	0030      	movs	r0, r6
    326e:	0039      	movs	r1, r7
    3270:	f001 ffb2 	bl	51d8 <__aeabi_dmul>
    3274:	0004      	movs	r4, r0
    3276:	000d      	movs	r5, r1
    3278:	4ab5      	ldr	r2, [pc, #724]	; (3550 <__ieee754_pow+0x9f0>)
    327a:	4bb6      	ldr	r3, [pc, #728]	; (3554 <__ieee754_pow+0x9f4>)
    327c:	f001 ffac 	bl	51d8 <__aeabi_dmul>
    3280:	4ab5      	ldr	r2, [pc, #724]	; (3558 <__ieee754_pow+0x9f8>)
    3282:	4bb6      	ldr	r3, [pc, #728]	; (355c <__ieee754_pow+0x9fc>)
    3284:	f002 fa22 	bl	56cc <__aeabi_dsub>
    3288:	0022      	movs	r2, r4
    328a:	002b      	movs	r3, r5
    328c:	f001 ffa4 	bl	51d8 <__aeabi_dmul>
    3290:	4ab3      	ldr	r2, [pc, #716]	; (3560 <__ieee754_pow+0xa00>)
    3292:	4bb4      	ldr	r3, [pc, #720]	; (3564 <__ieee754_pow+0xa04>)
    3294:	f001 f850 	bl	4338 <__aeabi_dadd>
    3298:	0022      	movs	r2, r4
    329a:	002b      	movs	r3, r5
    329c:	f001 ff9c 	bl	51d8 <__aeabi_dmul>
    32a0:	4ab1      	ldr	r2, [pc, #708]	; (3568 <__ieee754_pow+0xa08>)
    32a2:	4bb2      	ldr	r3, [pc, #712]	; (356c <__ieee754_pow+0xa0c>)
    32a4:	f002 fa12 	bl	56cc <__aeabi_dsub>
    32a8:	0022      	movs	r2, r4
    32aa:	002b      	movs	r3, r5
    32ac:	f001 ff94 	bl	51d8 <__aeabi_dmul>
    32b0:	4aaf      	ldr	r2, [pc, #700]	; (3570 <__ieee754_pow+0xa10>)
    32b2:	4bb0      	ldr	r3, [pc, #704]	; (3574 <__ieee754_pow+0xa14>)
    32b4:	f001 f840 	bl	4338 <__aeabi_dadd>
    32b8:	0022      	movs	r2, r4
    32ba:	002b      	movs	r3, r5
    32bc:	f001 ff8c 	bl	51d8 <__aeabi_dmul>
    32c0:	0002      	movs	r2, r0
    32c2:	000b      	movs	r3, r1
    32c4:	0030      	movs	r0, r6
    32c6:	0039      	movs	r1, r7
    32c8:	f002 fa00 	bl	56cc <__aeabi_dsub>
    32cc:	0004      	movs	r4, r0
    32ce:	000d      	movs	r5, r1
    32d0:	0002      	movs	r2, r0
    32d2:	000b      	movs	r3, r1
    32d4:	0030      	movs	r0, r6
    32d6:	0039      	movs	r1, r7
    32d8:	f001 ff7e 	bl	51d8 <__aeabi_dmul>
    32dc:	2380      	movs	r3, #128	; 0x80
    32de:	9002      	str	r0, [sp, #8]
    32e0:	9103      	str	r1, [sp, #12]
    32e2:	2200      	movs	r2, #0
    32e4:	05db      	lsls	r3, r3, #23
    32e6:	0020      	movs	r0, r4
    32e8:	0029      	movs	r1, r5
    32ea:	f002 f9ef 	bl	56cc <__aeabi_dsub>
    32ee:	0002      	movs	r2, r0
    32f0:	000b      	movs	r3, r1
    32f2:	9802      	ldr	r0, [sp, #8]
    32f4:	9903      	ldr	r1, [sp, #12]
    32f6:	f001 fb4b 	bl	4990 <__aeabi_ddiv>
    32fa:	9a00      	ldr	r2, [sp, #0]
    32fc:	9b01      	ldr	r3, [sp, #4]
    32fe:	0004      	movs	r4, r0
    3300:	000d      	movs	r5, r1
    3302:	0030      	movs	r0, r6
    3304:	0039      	movs	r1, r7
    3306:	f001 ff67 	bl	51d8 <__aeabi_dmul>
    330a:	9a00      	ldr	r2, [sp, #0]
    330c:	9b01      	ldr	r3, [sp, #4]
    330e:	f001 f813 	bl	4338 <__aeabi_dadd>
    3312:	0002      	movs	r2, r0
    3314:	000b      	movs	r3, r1
    3316:	0020      	movs	r0, r4
    3318:	0029      	movs	r1, r5
    331a:	f002 f9d7 	bl	56cc <__aeabi_dsub>
    331e:	0032      	movs	r2, r6
    3320:	003b      	movs	r3, r7
    3322:	f002 f9d3 	bl	56cc <__aeabi_dsub>
    3326:	0002      	movs	r2, r0
    3328:	000b      	movs	r3, r1
    332a:	2000      	movs	r0, #0
    332c:	4992      	ldr	r1, [pc, #584]	; (3578 <__ieee754_pow+0xa18>)
    332e:	f002 f9cd 	bl	56cc <__aeabi_dsub>
    3332:	464b      	mov	r3, r9
    3334:	185b      	adds	r3, r3, r1
    3336:	151a      	asrs	r2, r3, #20
    3338:	2a00      	cmp	r2, #0
    333a:	dc00      	bgt.n	333e <__ieee754_pow+0x7de>
    333c:	e0f4      	b.n	3528 <__ieee754_pow+0x9c8>
    333e:	0019      	movs	r1, r3
    3340:	9a06      	ldr	r2, [sp, #24]
    3342:	9b07      	ldr	r3, [sp, #28]
    3344:	f001 ff48 	bl	51d8 <__aeabi_dmul>
    3348:	0006      	movs	r6, r0
    334a:	e452      	b.n	2bf2 <__ieee754_pow+0x92>
    334c:	0032      	movs	r2, r6
    334e:	0030      	movs	r0, r6
    3350:	002b      	movs	r3, r5
    3352:	0029      	movs	r1, r5
    3354:	f001 ff40 	bl	51d8 <__aeabi_dmul>
    3358:	0006      	movs	r6, r0
    335a:	e44a      	b.n	2bf2 <__ieee754_pow+0x92>
    335c:	4b87      	ldr	r3, [pc, #540]	; (357c <__ieee754_pow+0xa1c>)
    335e:	004e      	lsls	r6, r1, #1
    3360:	0876      	lsrs	r6, r6, #1
    3362:	429e      	cmp	r6, r3
    3364:	dc00      	bgt.n	3368 <__ieee754_pow+0x808>
    3366:	e0bf      	b.n	34e8 <__ieee754_pow+0x988>
    3368:	4b85      	ldr	r3, [pc, #532]	; (3580 <__ieee754_pow+0xa20>)
    336a:	18cb      	adds	r3, r1, r3
    336c:	4303      	orrs	r3, r0
    336e:	d10c      	bne.n	338a <__ieee754_pow+0x82a>
    3370:	9a00      	ldr	r2, [sp, #0]
    3372:	9b01      	ldr	r3, [sp, #4]
    3374:	f002 f9aa 	bl	56cc <__aeabi_dsub>
    3378:	0002      	movs	r2, r0
    337a:	000b      	movs	r3, r1
    337c:	9804      	ldr	r0, [sp, #16]
    337e:	9905      	ldr	r1, [sp, #20]
    3380:	f000 fb6c 	bl	3a5c <__aeabi_dcmple>
    3384:	2800      	cmp	r0, #0
    3386:	d100      	bne.n	338a <__ieee754_pow+0x82a>
    3388:	e701      	b.n	318e <__ieee754_pow+0x62e>
    338a:	9806      	ldr	r0, [sp, #24]
    338c:	9907      	ldr	r1, [sp, #28]
    338e:	4a7d      	ldr	r2, [pc, #500]	; (3584 <__ieee754_pow+0xa24>)
    3390:	4b7d      	ldr	r3, [pc, #500]	; (3588 <__ieee754_pow+0xa28>)
    3392:	f001 ff21 	bl	51d8 <__aeabi_dmul>
    3396:	4a7b      	ldr	r2, [pc, #492]	; (3584 <__ieee754_pow+0xa24>)
    3398:	4b7b      	ldr	r3, [pc, #492]	; (3588 <__ieee754_pow+0xa28>)
    339a:	f001 ff1d 	bl	51d8 <__aeabi_dmul>
    339e:	0006      	movs	r6, r0
    33a0:	f7ff fc27 	bl	2bf2 <__ieee754_pow+0x92>
    33a4:	2300      	movs	r3, #0
    33a6:	4c79      	ldr	r4, [pc, #484]	; (358c <__ieee754_pow+0xa2c>)
    33a8:	9306      	str	r3, [sp, #24]
    33aa:	9407      	str	r4, [sp, #28]
    33ac:	e666      	b.n	307c <__ieee754_pow+0x51c>
    33ae:	4653      	mov	r3, sl
    33b0:	2b00      	cmp	r3, #0
    33b2:	db00      	blt.n	33b6 <__ieee754_pow+0x856>
    33b4:	e4c3      	b.n	2d3e <__ieee754_pow+0x1de>
    33b6:	9b00      	ldr	r3, [sp, #0]
    33b8:	9c01      	ldr	r4, [sp, #4]
    33ba:	2280      	movs	r2, #128	; 0x80
    33bc:	0612      	lsls	r2, r2, #24
    33be:	001e      	movs	r6, r3
    33c0:	4694      	mov	ip, r2
    33c2:	0023      	movs	r3, r4
    33c4:	4463      	add	r3, ip
    33c6:	0019      	movs	r1, r3
    33c8:	f7ff fc13 	bl	2bf2 <__ieee754_pow+0x92>
    33cc:	0002      	movs	r2, r0
    33ce:	000b      	movs	r3, r1
    33d0:	2000      	movs	r0, #0
    33d2:	4969      	ldr	r1, [pc, #420]	; (3578 <__ieee754_pow+0xa18>)
    33d4:	f001 fadc 	bl	4990 <__aeabi_ddiv>
    33d8:	e44a      	b.n	2c70 <__ieee754_pow+0x110>
    33da:	4b6d      	ldr	r3, [pc, #436]	; (3590 <__ieee754_pow+0xa30>)
    33dc:	429c      	cmp	r4, r3
    33de:	dc00      	bgt.n	33e2 <__ieee754_pow+0x882>
    33e0:	e4aa      	b.n	2d38 <__ieee754_pow+0x1d8>
    33e2:	4b65      	ldr	r3, [pc, #404]	; (3578 <__ieee754_pow+0xa18>)
    33e4:	429c      	cmp	r4, r3
    33e6:	dd01      	ble.n	33ec <__ieee754_pow+0x88c>
    33e8:	f7ff fc2c 	bl	2c44 <__ieee754_pow+0xe4>
    33ec:	2200      	movs	r2, #0
    33ee:	4b62      	ldr	r3, [pc, #392]	; (3578 <__ieee754_pow+0xa18>)
    33f0:	f002 f96c 	bl	56cc <__aeabi_dsub>
    33f4:	22c0      	movs	r2, #192	; 0xc0
    33f6:	4b67      	ldr	r3, [pc, #412]	; (3594 <__ieee754_pow+0xa34>)
    33f8:	05d2      	lsls	r2, r2, #23
    33fa:	0004      	movs	r4, r0
    33fc:	000d      	movs	r5, r1
    33fe:	f001 feeb 	bl	51d8 <__aeabi_dmul>
    3402:	4a65      	ldr	r2, [pc, #404]	; (3598 <__ieee754_pow+0xa38>)
    3404:	0006      	movs	r6, r0
    3406:	000f      	movs	r7, r1
    3408:	4b64      	ldr	r3, [pc, #400]	; (359c <__ieee754_pow+0xa3c>)
    340a:	0020      	movs	r0, r4
    340c:	0029      	movs	r1, r5
    340e:	f001 fee3 	bl	51d8 <__aeabi_dmul>
    3412:	2200      	movs	r2, #0
    3414:	9002      	str	r0, [sp, #8]
    3416:	9103      	str	r1, [sp, #12]
    3418:	4b61      	ldr	r3, [pc, #388]	; (35a0 <__ieee754_pow+0xa40>)
    341a:	0020      	movs	r0, r4
    341c:	0029      	movs	r1, r5
    341e:	f001 fedb 	bl	51d8 <__aeabi_dmul>
    3422:	0002      	movs	r2, r0
    3424:	000b      	movs	r3, r1
    3426:	485f      	ldr	r0, [pc, #380]	; (35a4 <__ieee754_pow+0xa44>)
    3428:	495f      	ldr	r1, [pc, #380]	; (35a8 <__ieee754_pow+0xa48>)
    342a:	f002 f94f 	bl	56cc <__aeabi_dsub>
    342e:	0022      	movs	r2, r4
    3430:	002b      	movs	r3, r5
    3432:	f001 fed1 	bl	51d8 <__aeabi_dmul>
    3436:	0002      	movs	r2, r0
    3438:	000b      	movs	r3, r1
    343a:	2000      	movs	r0, #0
    343c:	495b      	ldr	r1, [pc, #364]	; (35ac <__ieee754_pow+0xa4c>)
    343e:	f002 f945 	bl	56cc <__aeabi_dsub>
    3442:	0022      	movs	r2, r4
    3444:	9004      	str	r0, [sp, #16]
    3446:	9105      	str	r1, [sp, #20]
    3448:	002b      	movs	r3, r5
    344a:	0020      	movs	r0, r4
    344c:	0029      	movs	r1, r5
    344e:	f001 fec3 	bl	51d8 <__aeabi_dmul>
    3452:	0002      	movs	r2, r0
    3454:	000b      	movs	r3, r1
    3456:	9804      	ldr	r0, [sp, #16]
    3458:	9905      	ldr	r1, [sp, #20]
    345a:	f001 febd 	bl	51d8 <__aeabi_dmul>
    345e:	4a54      	ldr	r2, [pc, #336]	; (35b0 <__ieee754_pow+0xa50>)
    3460:	4b4c      	ldr	r3, [pc, #304]	; (3594 <__ieee754_pow+0xa34>)
    3462:	f001 feb9 	bl	51d8 <__aeabi_dmul>
    3466:	0002      	movs	r2, r0
    3468:	000b      	movs	r3, r1
    346a:	9802      	ldr	r0, [sp, #8]
    346c:	9903      	ldr	r1, [sp, #12]
    346e:	f002 f92d 	bl	56cc <__aeabi_dsub>
    3472:	0002      	movs	r2, r0
    3474:	000b      	movs	r3, r1
    3476:	0004      	movs	r4, r0
    3478:	000d      	movs	r5, r1
    347a:	0030      	movs	r0, r6
    347c:	0039      	movs	r1, r7
    347e:	f000 ff5b 	bl	4338 <__aeabi_dadd>
    3482:	2200      	movs	r2, #0
    3484:	0010      	movs	r0, r2
    3486:	003b      	movs	r3, r7
    3488:	0032      	movs	r2, r6
    348a:	9002      	str	r0, [sp, #8]
    348c:	9103      	str	r1, [sp, #12]
    348e:	f002 f91d 	bl	56cc <__aeabi_dsub>
    3492:	0002      	movs	r2, r0
    3494:	000b      	movs	r3, r1
    3496:	0020      	movs	r0, r4
    3498:	0029      	movs	r1, r5
    349a:	f002 f917 	bl	56cc <__aeabi_dsub>
    349e:	9004      	str	r0, [sp, #16]
    34a0:	9105      	str	r1, [sp, #20]
    34a2:	e5e1      	b.n	3068 <__ieee754_pow+0x508>
    34a4:	4a43      	ldr	r2, [pc, #268]	; (35b4 <__ieee754_pow+0xa54>)
    34a6:	4b44      	ldr	r3, [pc, #272]	; (35b8 <__ieee754_pow+0xa58>)
    34a8:	9806      	ldr	r0, [sp, #24]
    34aa:	9907      	ldr	r1, [sp, #28]
    34ac:	f001 fe94 	bl	51d8 <__aeabi_dmul>
    34b0:	4a40      	ldr	r2, [pc, #256]	; (35b4 <__ieee754_pow+0xa54>)
    34b2:	4b41      	ldr	r3, [pc, #260]	; (35b8 <__ieee754_pow+0xa58>)
    34b4:	f001 fe90 	bl	51d8 <__aeabi_dmul>
    34b8:	0006      	movs	r6, r0
    34ba:	f7ff fb9a 	bl	2bf2 <__ieee754_pow+0x92>
    34be:	2a00      	cmp	r2, #0
    34c0:	d001      	beq.n	34c6 <__ieee754_pow+0x966>
    34c2:	f7ff fba5 	bl	2c10 <__ieee754_pow+0xb0>
    34c6:	3214      	adds	r2, #20
    34c8:	1ad3      	subs	r3, r2, r3
    34ca:	003a      	movs	r2, r7
    34cc:	411a      	asrs	r2, r3
    34ce:	0011      	movs	r1, r2
    34d0:	4099      	lsls	r1, r3
    34d2:	428f      	cmp	r7, r1
    34d4:	d001      	beq.n	34da <__ieee754_pow+0x97a>
    34d6:	f7ff fb6f 	bl	2bb8 <__ieee754_pow+0x58>
    34da:	2301      	movs	r3, #1
    34dc:	4013      	ands	r3, r2
    34de:	2202      	movs	r2, #2
    34e0:	1ad3      	subs	r3, r2, r3
    34e2:	469b      	mov	fp, r3
    34e4:	f7ff fb68 	bl	2bb8 <__ieee754_pow+0x58>
    34e8:	4b30      	ldr	r3, [pc, #192]	; (35ac <__ieee754_pow+0xa4c>)
    34ea:	429e      	cmp	r6, r3
    34ec:	dd00      	ble.n	34f0 <__ieee754_pow+0x990>
    34ee:	e64e      	b.n	318e <__ieee754_pow+0x62e>
    34f0:	2300      	movs	r3, #0
    34f2:	4699      	mov	r9, r3
    34f4:	4698      	mov	r8, r3
    34f6:	e67a      	b.n	31ee <__ieee754_pow+0x68e>
    34f8:	0002      	movs	r2, r0
    34fa:	000b      	movs	r3, r1
    34fc:	f7ff fc14 	bl	2d28 <__ieee754_pow+0x1c8>
    3500:	2380      	movs	r3, #128	; 0x80
    3502:	4c2e      	ldr	r4, [pc, #184]	; (35bc <__ieee754_pow+0xa5c>)
    3504:	05db      	lsls	r3, r3, #23
    3506:	9308      	str	r3, [sp, #32]
    3508:	9409      	str	r4, [sp, #36]	; 0x24
    350a:	4b2d      	ldr	r3, [pc, #180]	; (35c0 <__ieee754_pow+0xa60>)
    350c:	4c2d      	ldr	r4, [pc, #180]	; (35c4 <__ieee754_pow+0xa64>)
    350e:	2200      	movs	r2, #0
    3510:	930c      	str	r3, [sp, #48]	; 0x30
    3512:	940d      	str	r4, [sp, #52]	; 0x34
    3514:	2480      	movs	r4, #128	; 0x80
    3516:	4b2c      	ldr	r3, [pc, #176]	; (35c8 <__ieee754_pow+0xa68>)
    3518:	02e4      	lsls	r4, r4, #11
    351a:	9206      	str	r2, [sp, #24]
    351c:	9307      	str	r3, [sp, #28]
    351e:	e456      	b.n	2dce <__ieee754_pow+0x26e>
    3520:	4643      	mov	r3, r8
    3522:	425b      	negs	r3, r3
    3524:	4698      	mov	r8, r3
    3526:	e651      	b.n	31cc <__ieee754_pow+0x66c>
    3528:	4642      	mov	r2, r8
    352a:	f000 f9fd 	bl	3928 <scalbn>
    352e:	e707      	b.n	3340 <__ieee754_pow+0x7e0>
    3530:	fffffc02 	.word	0xfffffc02
    3534:	fffffc01 	.word	0xfffffc01
    3538:	000fffff 	.word	0x000fffff
    353c:	3fe62e43 	.word	0x3fe62e43
    3540:	fefa39ef 	.word	0xfefa39ef
    3544:	3fe62e42 	.word	0x3fe62e42
    3548:	0ca86c39 	.word	0x0ca86c39
    354c:	be205c61 	.word	0xbe205c61
    3550:	72bea4d0 	.word	0x72bea4d0
    3554:	3e663769 	.word	0x3e663769
    3558:	c5d26bf1 	.word	0xc5d26bf1
    355c:	3ebbbd41 	.word	0x3ebbbd41
    3560:	af25de2c 	.word	0xaf25de2c
    3564:	3f11566a 	.word	0x3f11566a
    3568:	16bebd93 	.word	0x16bebd93
    356c:	3f66c16c 	.word	0x3f66c16c
    3570:	5555553e 	.word	0x5555553e
    3574:	3fc55555 	.word	0x3fc55555
    3578:	3ff00000 	.word	0x3ff00000
    357c:	4090cbff 	.word	0x4090cbff
    3580:	3f6f3400 	.word	0x3f6f3400
    3584:	c2f8f359 	.word	0xc2f8f359
    3588:	01a56e1f 	.word	0x01a56e1f
    358c:	bff00000 	.word	0xbff00000
    3590:	3feffffe 	.word	0x3feffffe
    3594:	3ff71547 	.word	0x3ff71547
    3598:	f85ddf44 	.word	0xf85ddf44
    359c:	3e54ae0b 	.word	0x3e54ae0b
    35a0:	3fd00000 	.word	0x3fd00000
    35a4:	55555555 	.word	0x55555555
    35a8:	3fd55555 	.word	0x3fd55555
    35ac:	3fe00000 	.word	0x3fe00000
    35b0:	652b82fe 	.word	0x652b82fe
    35b4:	8800759c 	.word	0x8800759c
    35b8:	7e37e43c 	.word	0x7e37e43c
    35bc:	3fe2b803 	.word	0x3fe2b803
    35c0:	43cfd006 	.word	0x43cfd006
    35c4:	3e4cfdeb 	.word	0x3e4cfdeb
    35c8:	3ff80000 	.word	0x3ff80000

000035cc <__ieee754_sqrt>:
    35cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    35ce:	4656      	mov	r6, sl
    35d0:	464d      	mov	r5, r9
    35d2:	4644      	mov	r4, r8
    35d4:	465f      	mov	r7, fp
    35d6:	4b75      	ldr	r3, [pc, #468]	; (37ac <__ieee754_sqrt+0x1e0>)
    35d8:	b4f0      	push	{r4, r5, r6, r7}
    35da:	000a      	movs	r2, r1
    35dc:	000d      	movs	r5, r1
    35de:	0019      	movs	r1, r3
    35e0:	b083      	sub	sp, #12
    35e2:	0006      	movs	r6, r0
    35e4:	0004      	movs	r4, r0
    35e6:	4029      	ands	r1, r5
    35e8:	4299      	cmp	r1, r3
    35ea:	d100      	bne.n	35ee <__ieee754_sqrt+0x22>
    35ec:	e0ba      	b.n	3764 <__ieee754_sqrt+0x198>
    35ee:	2d00      	cmp	r5, #0
    35f0:	dc00      	bgt.n	35f4 <__ieee754_sqrt+0x28>
    35f2:	e094      	b.n	371e <__ieee754_sqrt+0x152>
    35f4:	152d      	asrs	r5, r5, #20
    35f6:	d100      	bne.n	35fa <__ieee754_sqrt+0x2e>
    35f8:	e0a3      	b.n	3742 <__ieee754_sqrt+0x176>
    35fa:	4b6d      	ldr	r3, [pc, #436]	; (37b0 <__ieee754_sqrt+0x1e4>)
    35fc:	0312      	lsls	r2, r2, #12
    35fe:	469c      	mov	ip, r3
    3600:	2380      	movs	r3, #128	; 0x80
    3602:	0b12      	lsrs	r2, r2, #12
    3604:	035b      	lsls	r3, r3, #13
    3606:	4465      	add	r5, ip
    3608:	431a      	orrs	r2, r3
    360a:	07eb      	lsls	r3, r5, #31
    360c:	d500      	bpl.n	3610 <__ieee754_sqrt+0x44>
    360e:	e081      	b.n	3714 <__ieee754_sqrt+0x148>
    3610:	106b      	asrs	r3, r5, #1
    3612:	4698      	mov	r8, r3
    3614:	0fe3      	lsrs	r3, r4, #31
    3616:	189b      	adds	r3, r3, r2
    3618:	189b      	adds	r3, r3, r2
    361a:	2280      	movs	r2, #128	; 0x80
    361c:	2116      	movs	r1, #22
    361e:	2600      	movs	r6, #0
    3620:	2700      	movs	r7, #0
    3622:	0064      	lsls	r4, r4, #1
    3624:	0392      	lsls	r2, r2, #14
    3626:	18b8      	adds	r0, r7, r2
    3628:	4298      	cmp	r0, r3
    362a:	dc02      	bgt.n	3632 <__ieee754_sqrt+0x66>
    362c:	1887      	adds	r7, r0, r2
    362e:	1a1b      	subs	r3, r3, r0
    3630:	18b6      	adds	r6, r6, r2
    3632:	0fe0      	lsrs	r0, r4, #31
    3634:	005b      	lsls	r3, r3, #1
    3636:	3901      	subs	r1, #1
    3638:	181b      	adds	r3, r3, r0
    363a:	0064      	lsls	r4, r4, #1
    363c:	0852      	lsrs	r2, r2, #1
    363e:	2900      	cmp	r1, #0
    3640:	d1f1      	bne.n	3626 <__ieee754_sqrt+0x5a>
    3642:	2200      	movs	r2, #0
    3644:	9201      	str	r2, [sp, #4]
    3646:	4694      	mov	ip, r2
    3648:	2280      	movs	r2, #128	; 0x80
    364a:	0612      	lsls	r2, r2, #24
    364c:	2020      	movs	r0, #32
    364e:	4691      	mov	r9, r2
    3650:	e009      	b.n	3666 <__ieee754_sqrt+0x9a>
    3652:	429f      	cmp	r7, r3
    3654:	d041      	beq.n	36da <__ieee754_sqrt+0x10e>
    3656:	0fe1      	lsrs	r1, r4, #31
    3658:	18c9      	adds	r1, r1, r3
    365a:	3801      	subs	r0, #1
    365c:	18cb      	adds	r3, r1, r3
    365e:	0064      	lsls	r4, r4, #1
    3660:	0852      	lsrs	r2, r2, #1
    3662:	2800      	cmp	r0, #0
    3664:	d01e      	beq.n	36a4 <__ieee754_sqrt+0xd8>
    3666:	4661      	mov	r1, ip
    3668:	1851      	adds	r1, r2, r1
    366a:	429f      	cmp	r7, r3
    366c:	daf1      	bge.n	3652 <__ieee754_sqrt+0x86>
    366e:	188d      	adds	r5, r1, r2
    3670:	46ac      	mov	ip, r5
    3672:	0fcd      	lsrs	r5, r1, #31
    3674:	07ed      	lsls	r5, r5, #31
    3676:	46ba      	mov	sl, r7
    3678:	454d      	cmp	r5, r9
    367a:	d039      	beq.n	36f0 <__ieee754_sqrt+0x124>
    367c:	1bdb      	subs	r3, r3, r7
    367e:	428c      	cmp	r4, r1
    3680:	41bf      	sbcs	r7, r7
    3682:	427f      	negs	r7, r7
    3684:	1bdb      	subs	r3, r3, r7
    3686:	1a64      	subs	r4, r4, r1
    3688:	9901      	ldr	r1, [sp, #4]
    368a:	3801      	subs	r0, #1
    368c:	468b      	mov	fp, r1
    368e:	4493      	add	fp, r2
    3690:	4659      	mov	r1, fp
    3692:	9101      	str	r1, [sp, #4]
    3694:	0fe1      	lsrs	r1, r4, #31
    3696:	18c9      	adds	r1, r1, r3
    3698:	4657      	mov	r7, sl
    369a:	18cb      	adds	r3, r1, r3
    369c:	0064      	lsls	r4, r4, #1
    369e:	0852      	lsrs	r2, r2, #1
    36a0:	2800      	cmp	r0, #0
    36a2:	d1e0      	bne.n	3666 <__ieee754_sqrt+0x9a>
    36a4:	4323      	orrs	r3, r4
    36a6:	d12b      	bne.n	3700 <__ieee754_sqrt+0x134>
    36a8:	9b01      	ldr	r3, [sp, #4]
    36aa:	085b      	lsrs	r3, r3, #1
    36ac:	4941      	ldr	r1, [pc, #260]	; (37b4 <__ieee754_sqrt+0x1e8>)
    36ae:	1072      	asrs	r2, r6, #1
    36b0:	468c      	mov	ip, r1
    36b2:	4462      	add	r2, ip
    36b4:	07f1      	lsls	r1, r6, #31
    36b6:	d502      	bpl.n	36be <__ieee754_sqrt+0xf2>
    36b8:	2180      	movs	r1, #128	; 0x80
    36ba:	0609      	lsls	r1, r1, #24
    36bc:	430b      	orrs	r3, r1
    36be:	4641      	mov	r1, r8
    36c0:	0509      	lsls	r1, r1, #20
    36c2:	188d      	adds	r5, r1, r2
    36c4:	001e      	movs	r6, r3
    36c6:	002f      	movs	r7, r5
    36c8:	0030      	movs	r0, r6
    36ca:	0039      	movs	r1, r7
    36cc:	b003      	add	sp, #12
    36ce:	bc3c      	pop	{r2, r3, r4, r5}
    36d0:	4690      	mov	r8, r2
    36d2:	4699      	mov	r9, r3
    36d4:	46a2      	mov	sl, r4
    36d6:	46ab      	mov	fp, r5
    36d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    36da:	42a1      	cmp	r1, r4
    36dc:	d80e      	bhi.n	36fc <__ieee754_sqrt+0x130>
    36de:	188d      	adds	r5, r1, r2
    36e0:	46ac      	mov	ip, r5
    36e2:	0fcd      	lsrs	r5, r1, #31
    36e4:	07ed      	lsls	r5, r5, #31
    36e6:	454d      	cmp	r5, r9
    36e8:	d048      	beq.n	377c <__ieee754_sqrt+0x1b0>
    36ea:	469a      	mov	sl, r3
    36ec:	2300      	movs	r3, #0
    36ee:	e7ca      	b.n	3686 <__ieee754_sqrt+0xba>
    36f0:	4665      	mov	r5, ip
    36f2:	2d00      	cmp	r5, #0
    36f4:	dbc2      	blt.n	367c <__ieee754_sqrt+0xb0>
    36f6:	1c7d      	adds	r5, r7, #1
    36f8:	46aa      	mov	sl, r5
    36fa:	e7bf      	b.n	367c <__ieee754_sqrt+0xb0>
    36fc:	003b      	movs	r3, r7
    36fe:	e7aa      	b.n	3656 <__ieee754_sqrt+0x8a>
    3700:	9b01      	ldr	r3, [sp, #4]
    3702:	3301      	adds	r3, #1
    3704:	d03e      	beq.n	3784 <__ieee754_sqrt+0x1b8>
    3706:	9a01      	ldr	r2, [sp, #4]
    3708:	2301      	movs	r3, #1
    370a:	4694      	mov	ip, r2
    370c:	4013      	ands	r3, r2
    370e:	4463      	add	r3, ip
    3710:	085b      	lsrs	r3, r3, #1
    3712:	e7cb      	b.n	36ac <__ieee754_sqrt+0xe0>
    3714:	0fe3      	lsrs	r3, r4, #31
    3716:	0052      	lsls	r2, r2, #1
    3718:	189a      	adds	r2, r3, r2
    371a:	0064      	lsls	r4, r4, #1
    371c:	e778      	b.n	3610 <__ieee754_sqrt+0x44>
    371e:	006b      	lsls	r3, r5, #1
    3720:	085b      	lsrs	r3, r3, #1
    3722:	4303      	orrs	r3, r0
    3724:	002f      	movs	r7, r5
    3726:	2b00      	cmp	r3, #0
    3728:	d0ce      	beq.n	36c8 <__ieee754_sqrt+0xfc>
    372a:	2500      	movs	r5, #0
    372c:	2a00      	cmp	r2, #0
    372e:	d131      	bne.n	3794 <__ieee754_sqrt+0x1c8>
    3730:	0ae2      	lsrs	r2, r4, #11
    3732:	3d15      	subs	r5, #21
    3734:	0564      	lsls	r4, r4, #21
    3736:	2a00      	cmp	r2, #0
    3738:	d0fa      	beq.n	3730 <__ieee754_sqrt+0x164>
    373a:	2380      	movs	r3, #128	; 0x80
    373c:	035b      	lsls	r3, r3, #13
    373e:	421a      	tst	r2, r3
    3740:	d123      	bne.n	378a <__ieee754_sqrt+0x1be>
    3742:	2080      	movs	r0, #128	; 0x80
    3744:	2300      	movs	r3, #0
    3746:	0340      	lsls	r0, r0, #13
    3748:	e000      	b.n	374c <__ieee754_sqrt+0x180>
    374a:	000b      	movs	r3, r1
    374c:	0052      	lsls	r2, r2, #1
    374e:	1c59      	adds	r1, r3, #1
    3750:	4202      	tst	r2, r0
    3752:	d0fa      	beq.n	374a <__ieee754_sqrt+0x17e>
    3754:	2020      	movs	r0, #32
    3756:	1a40      	subs	r0, r0, r1
    3758:	1aed      	subs	r5, r5, r3
    375a:	0023      	movs	r3, r4
    375c:	40c3      	lsrs	r3, r0
    375e:	408c      	lsls	r4, r1
    3760:	431a      	orrs	r2, r3
    3762:	e74a      	b.n	35fa <__ieee754_sqrt+0x2e>
    3764:	0002      	movs	r2, r0
    3766:	002b      	movs	r3, r5
    3768:	0029      	movs	r1, r5
    376a:	f001 fd35 	bl	51d8 <__aeabi_dmul>
    376e:	0032      	movs	r2, r6
    3770:	002b      	movs	r3, r5
    3772:	f000 fde1 	bl	4338 <__aeabi_dadd>
    3776:	0006      	movs	r6, r0
    3778:	000f      	movs	r7, r1
    377a:	e7a5      	b.n	36c8 <__ieee754_sqrt+0xfc>
    377c:	4665      	mov	r5, ip
    377e:	2d00      	cmp	r5, #0
    3780:	dab9      	bge.n	36f6 <__ieee754_sqrt+0x12a>
    3782:	e7b2      	b.n	36ea <__ieee754_sqrt+0x11e>
    3784:	3601      	adds	r6, #1
    3786:	2300      	movs	r3, #0
    3788:	e790      	b.n	36ac <__ieee754_sqrt+0xe0>
    378a:	2301      	movs	r3, #1
    378c:	2020      	movs	r0, #32
    378e:	425b      	negs	r3, r3
    3790:	2100      	movs	r1, #0
    3792:	e7e1      	b.n	3758 <__ieee754_sqrt+0x18c>
    3794:	003b      	movs	r3, r7
    3796:	0002      	movs	r2, r0
    3798:	0039      	movs	r1, r7
    379a:	f001 ff97 	bl	56cc <__aeabi_dsub>
    379e:	0002      	movs	r2, r0
    37a0:	000b      	movs	r3, r1
    37a2:	f001 f8f5 	bl	4990 <__aeabi_ddiv>
    37a6:	0006      	movs	r6, r0
    37a8:	000f      	movs	r7, r1
    37aa:	e78d      	b.n	36c8 <__ieee754_sqrt+0xfc>
    37ac:	7ff00000 	.word	0x7ff00000
    37b0:	fffffc01 	.word	0xfffffc01
    37b4:	3fe00000 	.word	0x3fe00000

000037b8 <fabs>:
    37b8:	0049      	lsls	r1, r1, #1
    37ba:	084b      	lsrs	r3, r1, #1
    37bc:	0019      	movs	r1, r3
    37be:	4770      	bx	lr

000037c0 <finite>:
    37c0:	4b03      	ldr	r3, [pc, #12]	; (37d0 <finite+0x10>)
    37c2:	0048      	lsls	r0, r1, #1
    37c4:	469c      	mov	ip, r3
    37c6:	0840      	lsrs	r0, r0, #1
    37c8:	4460      	add	r0, ip
    37ca:	0fc0      	lsrs	r0, r0, #31
    37cc:	4770      	bx	lr
    37ce:	46c0      	nop			; (mov r8, r8)
    37d0:	80100000 	.word	0x80100000

000037d4 <matherr>:
    37d4:	2000      	movs	r0, #0
    37d6:	4770      	bx	lr

000037d8 <nan>:
    37d8:	2000      	movs	r0, #0
    37da:	4901      	ldr	r1, [pc, #4]	; (37e0 <nan+0x8>)
    37dc:	4770      	bx	lr
    37de:	46c0      	nop			; (mov r8, r8)
    37e0:	7ff80000 	.word	0x7ff80000

000037e4 <rint>:
    37e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    37e6:	4647      	mov	r7, r8
    37e8:	b480      	push	{r7}
    37ea:	0fcb      	lsrs	r3, r1, #31
    37ec:	4698      	mov	r8, r3
    37ee:	4c4a      	ldr	r4, [pc, #296]	; (3918 <rint+0x134>)
    37f0:	004b      	lsls	r3, r1, #1
    37f2:	0d5b      	lsrs	r3, r3, #21
    37f4:	191e      	adds	r6, r3, r4
    37f6:	b082      	sub	sp, #8
    37f8:	0007      	movs	r7, r0
    37fa:	000a      	movs	r2, r1
    37fc:	2e13      	cmp	r6, #19
    37fe:	dc35      	bgt.n	386c <rint+0x88>
    3800:	2e00      	cmp	r6, #0
    3802:	db57      	blt.n	38b4 <rint+0xd0>
    3804:	4b45      	ldr	r3, [pc, #276]	; (391c <rint+0x138>)
    3806:	0004      	movs	r4, r0
    3808:	4133      	asrs	r3, r6
    380a:	001f      	movs	r7, r3
    380c:	400f      	ands	r7, r1
    380e:	4307      	orrs	r7, r0
    3810:	000d      	movs	r5, r1
    3812:	2f00      	cmp	r7, #0
    3814:	d024      	beq.n	3860 <rint+0x7c>
    3816:	085b      	lsrs	r3, r3, #1
    3818:	001c      	movs	r4, r3
    381a:	400c      	ands	r4, r1
    381c:	4320      	orrs	r0, r4
    381e:	2700      	movs	r7, #0
    3820:	2800      	cmp	r0, #0
    3822:	d007      	beq.n	3834 <rint+0x50>
    3824:	2e13      	cmp	r6, #19
    3826:	d100      	bne.n	382a <rint+0x46>
    3828:	e072      	b.n	3910 <rint+0x12c>
    382a:	2280      	movs	r2, #128	; 0x80
    382c:	02d2      	lsls	r2, r2, #11
    382e:	4132      	asrs	r2, r6
    3830:	4399      	bics	r1, r3
    3832:	430a      	orrs	r2, r1
    3834:	4643      	mov	r3, r8
    3836:	00de      	lsls	r6, r3, #3
    3838:	4b39      	ldr	r3, [pc, #228]	; (3920 <rint+0x13c>)
    383a:	0011      	movs	r1, r2
    383c:	199e      	adds	r6, r3, r6
    383e:	6834      	ldr	r4, [r6, #0]
    3840:	6875      	ldr	r5, [r6, #4]
    3842:	0038      	movs	r0, r7
    3844:	0022      	movs	r2, r4
    3846:	002b      	movs	r3, r5
    3848:	f000 fd76 	bl	4338 <__aeabi_dadd>
    384c:	9000      	str	r0, [sp, #0]
    384e:	9101      	str	r1, [sp, #4]
    3850:	9800      	ldr	r0, [sp, #0]
    3852:	9901      	ldr	r1, [sp, #4]
    3854:	0022      	movs	r2, r4
    3856:	002b      	movs	r3, r5
    3858:	f001 ff38 	bl	56cc <__aeabi_dsub>
    385c:	0004      	movs	r4, r0
    385e:	000d      	movs	r5, r1
    3860:	0020      	movs	r0, r4
    3862:	0029      	movs	r1, r5
    3864:	b002      	add	sp, #8
    3866:	bc04      	pop	{r2}
    3868:	4690      	mov	r8, r2
    386a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    386c:	2e33      	cmp	r6, #51	; 0x33
    386e:	dd0c      	ble.n	388a <rint+0xa6>
    3870:	2380      	movs	r3, #128	; 0x80
    3872:	0004      	movs	r4, r0
    3874:	000d      	movs	r5, r1
    3876:	00db      	lsls	r3, r3, #3
    3878:	429e      	cmp	r6, r3
    387a:	d1f1      	bne.n	3860 <rint+0x7c>
    387c:	0002      	movs	r2, r0
    387e:	000b      	movs	r3, r1
    3880:	f000 fd5a 	bl	4338 <__aeabi_dadd>
    3884:	0004      	movs	r4, r0
    3886:	000d      	movs	r5, r1
    3888:	e7ea      	b.n	3860 <rint+0x7c>
    388a:	4c26      	ldr	r4, [pc, #152]	; (3924 <rint+0x140>)
    388c:	000d      	movs	r5, r1
    388e:	46a4      	mov	ip, r4
    3890:	2401      	movs	r4, #1
    3892:	4463      	add	r3, ip
    3894:	4264      	negs	r4, r4
    3896:	40dc      	lsrs	r4, r3
    3898:	46a4      	mov	ip, r4
    389a:	4661      	mov	r1, ip
    389c:	0004      	movs	r4, r0
    389e:	4201      	tst	r1, r0
    38a0:	d0de      	beq.n	3860 <rint+0x7c>
    38a2:	0849      	lsrs	r1, r1, #1
    38a4:	4201      	tst	r1, r0
    38a6:	d0c5      	beq.n	3834 <rint+0x50>
    38a8:	2780      	movs	r7, #128	; 0x80
    38aa:	05ff      	lsls	r7, r7, #23
    38ac:	411f      	asrs	r7, r3
    38ae:	4388      	bics	r0, r1
    38b0:	4307      	orrs	r7, r0
    38b2:	e7bf      	b.n	3834 <rint+0x50>
    38b4:	004b      	lsls	r3, r1, #1
    38b6:	085b      	lsrs	r3, r3, #1
    38b8:	4303      	orrs	r3, r0
    38ba:	0004      	movs	r4, r0
    38bc:	000d      	movs	r5, r1
    38be:	2b00      	cmp	r3, #0
    38c0:	d0ce      	beq.n	3860 <rint+0x7c>
    38c2:	030b      	lsls	r3, r1, #12
    38c4:	0b1b      	lsrs	r3, r3, #12
    38c6:	4303      	orrs	r3, r0
    38c8:	425a      	negs	r2, r3
    38ca:	4313      	orrs	r3, r2
    38cc:	2280      	movs	r2, #128	; 0x80
    38ce:	0b1b      	lsrs	r3, r3, #12
    38d0:	0312      	lsls	r2, r2, #12
    38d2:	4013      	ands	r3, r2
    38d4:	0c4a      	lsrs	r2, r1, #17
    38d6:	0452      	lsls	r2, r2, #17
    38d8:	4313      	orrs	r3, r2
    38da:	0019      	movs	r1, r3
    38dc:	4643      	mov	r3, r8
    38de:	4a10      	ldr	r2, [pc, #64]	; (3920 <rint+0x13c>)
    38e0:	00db      	lsls	r3, r3, #3
    38e2:	18d3      	adds	r3, r2, r3
    38e4:	681c      	ldr	r4, [r3, #0]
    38e6:	685d      	ldr	r5, [r3, #4]
    38e8:	0022      	movs	r2, r4
    38ea:	002b      	movs	r3, r5
    38ec:	f000 fd24 	bl	4338 <__aeabi_dadd>
    38f0:	9000      	str	r0, [sp, #0]
    38f2:	9101      	str	r1, [sp, #4]
    38f4:	9800      	ldr	r0, [sp, #0]
    38f6:	9901      	ldr	r1, [sp, #4]
    38f8:	0022      	movs	r2, r4
    38fa:	002b      	movs	r3, r5
    38fc:	f001 fee6 	bl	56cc <__aeabi_dsub>
    3900:	4642      	mov	r2, r8
    3902:	004b      	lsls	r3, r1, #1
    3904:	085b      	lsrs	r3, r3, #1
    3906:	07d6      	lsls	r6, r2, #31
    3908:	4333      	orrs	r3, r6
    390a:	0004      	movs	r4, r0
    390c:	001d      	movs	r5, r3
    390e:	e7a7      	b.n	3860 <rint+0x7c>
    3910:	2780      	movs	r7, #128	; 0x80
    3912:	063f      	lsls	r7, r7, #24
    3914:	e789      	b.n	382a <rint+0x46>
    3916:	46c0      	nop			; (mov r8, r8)
    3918:	fffffc01 	.word	0xfffffc01
    391c:	000fffff 	.word	0x000fffff
    3920:	000063d8 	.word	0x000063d8
    3924:	fffffbed 	.word	0xfffffbed

00003928 <scalbn>:
    3928:	004b      	lsls	r3, r1, #1
    392a:	b570      	push	{r4, r5, r6, lr}
    392c:	0d5b      	lsrs	r3, r3, #21
    392e:	0014      	movs	r4, r2
    3930:	000a      	movs	r2, r1
    3932:	2b00      	cmp	r3, #0
    3934:	d11a      	bne.n	396c <scalbn+0x44>
    3936:	004b      	lsls	r3, r1, #1
    3938:	085b      	lsrs	r3, r3, #1
    393a:	4303      	orrs	r3, r0
    393c:	d015      	beq.n	396a <scalbn+0x42>
    393e:	2200      	movs	r2, #0
    3940:	4b22      	ldr	r3, [pc, #136]	; (39cc <scalbn+0xa4>)
    3942:	f001 fc49 	bl	51d8 <__aeabi_dmul>
    3946:	4b22      	ldr	r3, [pc, #136]	; (39d0 <scalbn+0xa8>)
    3948:	000a      	movs	r2, r1
    394a:	429c      	cmp	r4, r3
    394c:	db22      	blt.n	3994 <scalbn+0x6c>
    394e:	004b      	lsls	r3, r1, #1
    3950:	0d5b      	lsrs	r3, r3, #21
    3952:	3b36      	subs	r3, #54	; 0x36
    3954:	4d1f      	ldr	r5, [pc, #124]	; (39d4 <scalbn+0xac>)
    3956:	18e3      	adds	r3, r4, r3
    3958:	42ab      	cmp	r3, r5
    395a:	dc20      	bgt.n	399e <scalbn+0x76>
    395c:	2b00      	cmp	r3, #0
    395e:	dd0d      	ble.n	397c <scalbn+0x54>
    3960:	4c1d      	ldr	r4, [pc, #116]	; (39d8 <scalbn+0xb0>)
    3962:	051b      	lsls	r3, r3, #20
    3964:	4022      	ands	r2, r4
    3966:	431a      	orrs	r2, r3
    3968:	0011      	movs	r1, r2
    396a:	bd70      	pop	{r4, r5, r6, pc}
    396c:	4d1b      	ldr	r5, [pc, #108]	; (39dc <scalbn+0xb4>)
    396e:	42ab      	cmp	r3, r5
    3970:	d1f0      	bne.n	3954 <scalbn+0x2c>
    3972:	0002      	movs	r2, r0
    3974:	000b      	movs	r3, r1
    3976:	f000 fcdf 	bl	4338 <__aeabi_dadd>
    397a:	e7f6      	b.n	396a <scalbn+0x42>
    397c:	001d      	movs	r5, r3
    397e:	3535      	adds	r5, #53	; 0x35
    3980:	da18      	bge.n	39b4 <scalbn+0x8c>
    3982:	4b17      	ldr	r3, [pc, #92]	; (39e0 <scalbn+0xb8>)
    3984:	0002      	movs	r2, r0
    3986:	429c      	cmp	r4, r3
    3988:	dc0a      	bgt.n	39a0 <scalbn+0x78>
    398a:	000b      	movs	r3, r1
    398c:	4815      	ldr	r0, [pc, #84]	; (39e4 <scalbn+0xbc>)
    398e:	4916      	ldr	r1, [pc, #88]	; (39e8 <scalbn+0xc0>)
    3990:	f000 f832 	bl	39f8 <copysign>
    3994:	4a13      	ldr	r2, [pc, #76]	; (39e4 <scalbn+0xbc>)
    3996:	4b14      	ldr	r3, [pc, #80]	; (39e8 <scalbn+0xc0>)
    3998:	f001 fc1e 	bl	51d8 <__aeabi_dmul>
    399c:	e7e5      	b.n	396a <scalbn+0x42>
    399e:	0002      	movs	r2, r0
    39a0:	000b      	movs	r3, r1
    39a2:	4812      	ldr	r0, [pc, #72]	; (39ec <scalbn+0xc4>)
    39a4:	4912      	ldr	r1, [pc, #72]	; (39f0 <scalbn+0xc8>)
    39a6:	f000 f827 	bl	39f8 <copysign>
    39aa:	4a10      	ldr	r2, [pc, #64]	; (39ec <scalbn+0xc4>)
    39ac:	4b10      	ldr	r3, [pc, #64]	; (39f0 <scalbn+0xc8>)
    39ae:	f001 fc13 	bl	51d8 <__aeabi_dmul>
    39b2:	e7da      	b.n	396a <scalbn+0x42>
    39b4:	4c08      	ldr	r4, [pc, #32]	; (39d8 <scalbn+0xb0>)
    39b6:	3336      	adds	r3, #54	; 0x36
    39b8:	4022      	ands	r2, r4
    39ba:	051b      	lsls	r3, r3, #20
    39bc:	4313      	orrs	r3, r2
    39be:	0019      	movs	r1, r3
    39c0:	2200      	movs	r2, #0
    39c2:	4b0c      	ldr	r3, [pc, #48]	; (39f4 <scalbn+0xcc>)
    39c4:	f001 fc08 	bl	51d8 <__aeabi_dmul>
    39c8:	e7cf      	b.n	396a <scalbn+0x42>
    39ca:	46c0      	nop			; (mov r8, r8)
    39cc:	43500000 	.word	0x43500000
    39d0:	ffff3cb0 	.word	0xffff3cb0
    39d4:	000007fe 	.word	0x000007fe
    39d8:	800fffff 	.word	0x800fffff
    39dc:	000007ff 	.word	0x000007ff
    39e0:	0000c350 	.word	0x0000c350
    39e4:	c2f8f359 	.word	0xc2f8f359
    39e8:	01a56e1f 	.word	0x01a56e1f
    39ec:	8800759c 	.word	0x8800759c
    39f0:	7e37e43c 	.word	0x7e37e43c
    39f4:	3c900000 	.word	0x3c900000

000039f8 <copysign>:
    39f8:	b530      	push	{r4, r5, lr}
    39fa:	004a      	lsls	r2, r1, #1
    39fc:	0fdb      	lsrs	r3, r3, #31
    39fe:	07db      	lsls	r3, r3, #31
    3a00:	0852      	lsrs	r2, r2, #1
    3a02:	431a      	orrs	r2, r3
    3a04:	0011      	movs	r1, r2
    3a06:	bd30      	pop	{r4, r5, pc}

00003a08 <__gnu_thumb1_case_uqi>:
    3a08:	b402      	push	{r1}
    3a0a:	4671      	mov	r1, lr
    3a0c:	0849      	lsrs	r1, r1, #1
    3a0e:	0049      	lsls	r1, r1, #1
    3a10:	5c09      	ldrb	r1, [r1, r0]
    3a12:	0049      	lsls	r1, r1, #1
    3a14:	448e      	add	lr, r1
    3a16:	bc02      	pop	{r1}
    3a18:	4770      	bx	lr
    3a1a:	46c0      	nop			; (mov r8, r8)

00003a1c <__aeabi_cdrcmple>:
    3a1c:	4684      	mov	ip, r0
    3a1e:	1c10      	adds	r0, r2, #0
    3a20:	4662      	mov	r2, ip
    3a22:	468c      	mov	ip, r1
    3a24:	1c19      	adds	r1, r3, #0
    3a26:	4663      	mov	r3, ip
    3a28:	e000      	b.n	3a2c <__aeabi_cdcmpeq>
    3a2a:	46c0      	nop			; (mov r8, r8)

00003a2c <__aeabi_cdcmpeq>:
    3a2c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    3a2e:	f001 fb69 	bl	5104 <__ledf2>
    3a32:	2800      	cmp	r0, #0
    3a34:	d401      	bmi.n	3a3a <__aeabi_cdcmpeq+0xe>
    3a36:	2100      	movs	r1, #0
    3a38:	42c8      	cmn	r0, r1
    3a3a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00003a3c <__aeabi_dcmpeq>:
    3a3c:	b510      	push	{r4, lr}
    3a3e:	f001 fabd 	bl	4fbc <__eqdf2>
    3a42:	4240      	negs	r0, r0
    3a44:	3001      	adds	r0, #1
    3a46:	bd10      	pop	{r4, pc}

00003a48 <__aeabi_dcmplt>:
    3a48:	b510      	push	{r4, lr}
    3a4a:	f001 fb5b 	bl	5104 <__ledf2>
    3a4e:	2800      	cmp	r0, #0
    3a50:	db01      	blt.n	3a56 <__aeabi_dcmplt+0xe>
    3a52:	2000      	movs	r0, #0
    3a54:	bd10      	pop	{r4, pc}
    3a56:	2001      	movs	r0, #1
    3a58:	bd10      	pop	{r4, pc}
    3a5a:	46c0      	nop			; (mov r8, r8)

00003a5c <__aeabi_dcmple>:
    3a5c:	b510      	push	{r4, lr}
    3a5e:	f001 fb51 	bl	5104 <__ledf2>
    3a62:	2800      	cmp	r0, #0
    3a64:	dd01      	ble.n	3a6a <__aeabi_dcmple+0xe>
    3a66:	2000      	movs	r0, #0
    3a68:	bd10      	pop	{r4, pc}
    3a6a:	2001      	movs	r0, #1
    3a6c:	bd10      	pop	{r4, pc}
    3a6e:	46c0      	nop			; (mov r8, r8)

00003a70 <__aeabi_dcmpgt>:
    3a70:	b510      	push	{r4, lr}
    3a72:	f001 fae3 	bl	503c <__gedf2>
    3a76:	2800      	cmp	r0, #0
    3a78:	dc01      	bgt.n	3a7e <__aeabi_dcmpgt+0xe>
    3a7a:	2000      	movs	r0, #0
    3a7c:	bd10      	pop	{r4, pc}
    3a7e:	2001      	movs	r0, #1
    3a80:	bd10      	pop	{r4, pc}
    3a82:	46c0      	nop			; (mov r8, r8)

00003a84 <__aeabi_dcmpge>:
    3a84:	b510      	push	{r4, lr}
    3a86:	f001 fad9 	bl	503c <__gedf2>
    3a8a:	2800      	cmp	r0, #0
    3a8c:	da01      	bge.n	3a92 <__aeabi_dcmpge+0xe>
    3a8e:	2000      	movs	r0, #0
    3a90:	bd10      	pop	{r4, pc}
    3a92:	2001      	movs	r0, #1
    3a94:	bd10      	pop	{r4, pc}
    3a96:	46c0      	nop			; (mov r8, r8)

00003a98 <__aeabi_cfrcmple>:
    3a98:	4684      	mov	ip, r0
    3a9a:	1c08      	adds	r0, r1, #0
    3a9c:	4661      	mov	r1, ip
    3a9e:	e7ff      	b.n	3aa0 <__aeabi_cfcmpeq>

00003aa0 <__aeabi_cfcmpeq>:
    3aa0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    3aa2:	f000 f901 	bl	3ca8 <__lesf2>
    3aa6:	2800      	cmp	r0, #0
    3aa8:	d401      	bmi.n	3aae <__aeabi_cfcmpeq+0xe>
    3aaa:	2100      	movs	r1, #0
    3aac:	42c8      	cmn	r0, r1
    3aae:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00003ab0 <__aeabi_fcmpeq>:
    3ab0:	b510      	push	{r4, lr}
    3ab2:	f000 f88d 	bl	3bd0 <__eqsf2>
    3ab6:	4240      	negs	r0, r0
    3ab8:	3001      	adds	r0, #1
    3aba:	bd10      	pop	{r4, pc}

00003abc <__aeabi_fcmplt>:
    3abc:	b510      	push	{r4, lr}
    3abe:	f000 f8f3 	bl	3ca8 <__lesf2>
    3ac2:	2800      	cmp	r0, #0
    3ac4:	db01      	blt.n	3aca <__aeabi_fcmplt+0xe>
    3ac6:	2000      	movs	r0, #0
    3ac8:	bd10      	pop	{r4, pc}
    3aca:	2001      	movs	r0, #1
    3acc:	bd10      	pop	{r4, pc}
    3ace:	46c0      	nop			; (mov r8, r8)

00003ad0 <__aeabi_fcmple>:
    3ad0:	b510      	push	{r4, lr}
    3ad2:	f000 f8e9 	bl	3ca8 <__lesf2>
    3ad6:	2800      	cmp	r0, #0
    3ad8:	dd01      	ble.n	3ade <__aeabi_fcmple+0xe>
    3ada:	2000      	movs	r0, #0
    3adc:	bd10      	pop	{r4, pc}
    3ade:	2001      	movs	r0, #1
    3ae0:	bd10      	pop	{r4, pc}
    3ae2:	46c0      	nop			; (mov r8, r8)

00003ae4 <__aeabi_fcmpgt>:
    3ae4:	b510      	push	{r4, lr}
    3ae6:	f000 f89b 	bl	3c20 <__gesf2>
    3aea:	2800      	cmp	r0, #0
    3aec:	dc01      	bgt.n	3af2 <__aeabi_fcmpgt+0xe>
    3aee:	2000      	movs	r0, #0
    3af0:	bd10      	pop	{r4, pc}
    3af2:	2001      	movs	r0, #1
    3af4:	bd10      	pop	{r4, pc}
    3af6:	46c0      	nop			; (mov r8, r8)

00003af8 <__aeabi_fcmpge>:
    3af8:	b510      	push	{r4, lr}
    3afa:	f000 f891 	bl	3c20 <__gesf2>
    3afe:	2800      	cmp	r0, #0
    3b00:	da01      	bge.n	3b06 <__aeabi_fcmpge+0xe>
    3b02:	2000      	movs	r0, #0
    3b04:	bd10      	pop	{r4, pc}
    3b06:	2001      	movs	r0, #1
    3b08:	bd10      	pop	{r4, pc}
    3b0a:	46c0      	nop			; (mov r8, r8)

00003b0c <__aeabi_lmul>:
    3b0c:	b5f0      	push	{r4, r5, r6, r7, lr}
    3b0e:	464f      	mov	r7, r9
    3b10:	4646      	mov	r6, r8
    3b12:	b4c0      	push	{r6, r7}
    3b14:	0416      	lsls	r6, r2, #16
    3b16:	0c36      	lsrs	r6, r6, #16
    3b18:	4699      	mov	r9, r3
    3b1a:	0033      	movs	r3, r6
    3b1c:	0405      	lsls	r5, r0, #16
    3b1e:	0c2c      	lsrs	r4, r5, #16
    3b20:	0c07      	lsrs	r7, r0, #16
    3b22:	0c15      	lsrs	r5, r2, #16
    3b24:	4363      	muls	r3, r4
    3b26:	437e      	muls	r6, r7
    3b28:	436f      	muls	r7, r5
    3b2a:	4365      	muls	r5, r4
    3b2c:	0c1c      	lsrs	r4, r3, #16
    3b2e:	19ad      	adds	r5, r5, r6
    3b30:	1964      	adds	r4, r4, r5
    3b32:	469c      	mov	ip, r3
    3b34:	42a6      	cmp	r6, r4
    3b36:	d903      	bls.n	3b40 <__aeabi_lmul+0x34>
    3b38:	2380      	movs	r3, #128	; 0x80
    3b3a:	025b      	lsls	r3, r3, #9
    3b3c:	4698      	mov	r8, r3
    3b3e:	4447      	add	r7, r8
    3b40:	4663      	mov	r3, ip
    3b42:	0c25      	lsrs	r5, r4, #16
    3b44:	19ef      	adds	r7, r5, r7
    3b46:	041d      	lsls	r5, r3, #16
    3b48:	464b      	mov	r3, r9
    3b4a:	434a      	muls	r2, r1
    3b4c:	4343      	muls	r3, r0
    3b4e:	0c2d      	lsrs	r5, r5, #16
    3b50:	0424      	lsls	r4, r4, #16
    3b52:	1964      	adds	r4, r4, r5
    3b54:	1899      	adds	r1, r3, r2
    3b56:	19c9      	adds	r1, r1, r7
    3b58:	0020      	movs	r0, r4
    3b5a:	bc0c      	pop	{r2, r3}
    3b5c:	4690      	mov	r8, r2
    3b5e:	4699      	mov	r9, r3
    3b60:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3b62:	46c0      	nop			; (mov r8, r8)

00003b64 <__aeabi_f2uiz>:
    3b64:	219e      	movs	r1, #158	; 0x9e
    3b66:	b510      	push	{r4, lr}
    3b68:	05c9      	lsls	r1, r1, #23
    3b6a:	1c04      	adds	r4, r0, #0
    3b6c:	f7ff ffc4 	bl	3af8 <__aeabi_fcmpge>
    3b70:	2800      	cmp	r0, #0
    3b72:	d103      	bne.n	3b7c <__aeabi_f2uiz+0x18>
    3b74:	1c20      	adds	r0, r4, #0
    3b76:	f000 fb75 	bl	4264 <__aeabi_f2iz>
    3b7a:	bd10      	pop	{r4, pc}
    3b7c:	219e      	movs	r1, #158	; 0x9e
    3b7e:	1c20      	adds	r0, r4, #0
    3b80:	05c9      	lsls	r1, r1, #23
    3b82:	f000 f9e9 	bl	3f58 <__aeabi_fsub>
    3b86:	f000 fb6d 	bl	4264 <__aeabi_f2iz>
    3b8a:	2380      	movs	r3, #128	; 0x80
    3b8c:	061b      	lsls	r3, r3, #24
    3b8e:	469c      	mov	ip, r3
    3b90:	4460      	add	r0, ip
    3b92:	e7f2      	b.n	3b7a <__aeabi_f2uiz+0x16>

00003b94 <__aeabi_d2uiz>:
    3b94:	b570      	push	{r4, r5, r6, lr}
    3b96:	2200      	movs	r2, #0
    3b98:	4b0c      	ldr	r3, [pc, #48]	; (3bcc <__aeabi_d2uiz+0x38>)
    3b9a:	0004      	movs	r4, r0
    3b9c:	000d      	movs	r5, r1
    3b9e:	f7ff ff71 	bl	3a84 <__aeabi_dcmpge>
    3ba2:	2800      	cmp	r0, #0
    3ba4:	d104      	bne.n	3bb0 <__aeabi_d2uiz+0x1c>
    3ba6:	0020      	movs	r0, r4
    3ba8:	0029      	movs	r1, r5
    3baa:	f002 f903 	bl	5db4 <__aeabi_d2iz>
    3bae:	bd70      	pop	{r4, r5, r6, pc}
    3bb0:	4b06      	ldr	r3, [pc, #24]	; (3bcc <__aeabi_d2uiz+0x38>)
    3bb2:	2200      	movs	r2, #0
    3bb4:	0020      	movs	r0, r4
    3bb6:	0029      	movs	r1, r5
    3bb8:	f001 fd88 	bl	56cc <__aeabi_dsub>
    3bbc:	f002 f8fa 	bl	5db4 <__aeabi_d2iz>
    3bc0:	2380      	movs	r3, #128	; 0x80
    3bc2:	061b      	lsls	r3, r3, #24
    3bc4:	469c      	mov	ip, r3
    3bc6:	4460      	add	r0, ip
    3bc8:	e7f1      	b.n	3bae <__aeabi_d2uiz+0x1a>
    3bca:	46c0      	nop			; (mov r8, r8)
    3bcc:	41e00000 	.word	0x41e00000

00003bd0 <__eqsf2>:
    3bd0:	0243      	lsls	r3, r0, #9
    3bd2:	b570      	push	{r4, r5, r6, lr}
    3bd4:	0042      	lsls	r2, r0, #1
    3bd6:	004c      	lsls	r4, r1, #1
    3bd8:	0a5d      	lsrs	r5, r3, #9
    3bda:	0fc3      	lsrs	r3, r0, #31
    3bdc:	0248      	lsls	r0, r1, #9
    3bde:	0e12      	lsrs	r2, r2, #24
    3be0:	0a46      	lsrs	r6, r0, #9
    3be2:	0e24      	lsrs	r4, r4, #24
    3be4:	0fc9      	lsrs	r1, r1, #31
    3be6:	2aff      	cmp	r2, #255	; 0xff
    3be8:	d00f      	beq.n	3c0a <__eqsf2+0x3a>
    3bea:	2cff      	cmp	r4, #255	; 0xff
    3bec:	d011      	beq.n	3c12 <__eqsf2+0x42>
    3bee:	2001      	movs	r0, #1
    3bf0:	42a2      	cmp	r2, r4
    3bf2:	d000      	beq.n	3bf6 <__eqsf2+0x26>
    3bf4:	bd70      	pop	{r4, r5, r6, pc}
    3bf6:	42b5      	cmp	r5, r6
    3bf8:	d1fc      	bne.n	3bf4 <__eqsf2+0x24>
    3bfa:	428b      	cmp	r3, r1
    3bfc:	d00d      	beq.n	3c1a <__eqsf2+0x4a>
    3bfe:	2a00      	cmp	r2, #0
    3c00:	d1f8      	bne.n	3bf4 <__eqsf2+0x24>
    3c02:	0028      	movs	r0, r5
    3c04:	1e43      	subs	r3, r0, #1
    3c06:	4198      	sbcs	r0, r3
    3c08:	e7f4      	b.n	3bf4 <__eqsf2+0x24>
    3c0a:	2001      	movs	r0, #1
    3c0c:	2d00      	cmp	r5, #0
    3c0e:	d1f1      	bne.n	3bf4 <__eqsf2+0x24>
    3c10:	e7eb      	b.n	3bea <__eqsf2+0x1a>
    3c12:	2001      	movs	r0, #1
    3c14:	2e00      	cmp	r6, #0
    3c16:	d1ed      	bne.n	3bf4 <__eqsf2+0x24>
    3c18:	e7e9      	b.n	3bee <__eqsf2+0x1e>
    3c1a:	2000      	movs	r0, #0
    3c1c:	e7ea      	b.n	3bf4 <__eqsf2+0x24>
    3c1e:	46c0      	nop			; (mov r8, r8)

00003c20 <__gesf2>:
    3c20:	0243      	lsls	r3, r0, #9
    3c22:	b5f0      	push	{r4, r5, r6, r7, lr}
    3c24:	0042      	lsls	r2, r0, #1
    3c26:	0a5d      	lsrs	r5, r3, #9
    3c28:	0fc3      	lsrs	r3, r0, #31
    3c2a:	0248      	lsls	r0, r1, #9
    3c2c:	0a44      	lsrs	r4, r0, #9
    3c2e:	0048      	lsls	r0, r1, #1
    3c30:	0e12      	lsrs	r2, r2, #24
    3c32:	0e00      	lsrs	r0, r0, #24
    3c34:	0fc9      	lsrs	r1, r1, #31
    3c36:	2aff      	cmp	r2, #255	; 0xff
    3c38:	d01f      	beq.n	3c7a <__gesf2+0x5a>
    3c3a:	28ff      	cmp	r0, #255	; 0xff
    3c3c:	d022      	beq.n	3c84 <__gesf2+0x64>
    3c3e:	2a00      	cmp	r2, #0
    3c40:	d109      	bne.n	3c56 <__gesf2+0x36>
    3c42:	426e      	negs	r6, r5
    3c44:	416e      	adcs	r6, r5
    3c46:	2800      	cmp	r0, #0
    3c48:	d10f      	bne.n	3c6a <__gesf2+0x4a>
    3c4a:	2c00      	cmp	r4, #0
    3c4c:	d10d      	bne.n	3c6a <__gesf2+0x4a>
    3c4e:	2000      	movs	r0, #0
    3c50:	2d00      	cmp	r5, #0
    3c52:	d009      	beq.n	3c68 <__gesf2+0x48>
    3c54:	e005      	b.n	3c62 <__gesf2+0x42>
    3c56:	2800      	cmp	r0, #0
    3c58:	d101      	bne.n	3c5e <__gesf2+0x3e>
    3c5a:	2c00      	cmp	r4, #0
    3c5c:	d001      	beq.n	3c62 <__gesf2+0x42>
    3c5e:	428b      	cmp	r3, r1
    3c60:	d013      	beq.n	3c8a <__gesf2+0x6a>
    3c62:	4258      	negs	r0, r3
    3c64:	2301      	movs	r3, #1
    3c66:	4318      	orrs	r0, r3
    3c68:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3c6a:	2e00      	cmp	r6, #0
    3c6c:	d0f7      	beq.n	3c5e <__gesf2+0x3e>
    3c6e:	4248      	negs	r0, r1
    3c70:	4141      	adcs	r1, r0
    3c72:	2001      	movs	r0, #1
    3c74:	4249      	negs	r1, r1
    3c76:	4308      	orrs	r0, r1
    3c78:	e7f6      	b.n	3c68 <__gesf2+0x48>
    3c7a:	2d00      	cmp	r5, #0
    3c7c:	d0dd      	beq.n	3c3a <__gesf2+0x1a>
    3c7e:	2002      	movs	r0, #2
    3c80:	4240      	negs	r0, r0
    3c82:	e7f1      	b.n	3c68 <__gesf2+0x48>
    3c84:	2c00      	cmp	r4, #0
    3c86:	d0da      	beq.n	3c3e <__gesf2+0x1e>
    3c88:	e7f9      	b.n	3c7e <__gesf2+0x5e>
    3c8a:	4282      	cmp	r2, r0
    3c8c:	dce9      	bgt.n	3c62 <__gesf2+0x42>
    3c8e:	db04      	blt.n	3c9a <__gesf2+0x7a>
    3c90:	42a5      	cmp	r5, r4
    3c92:	d8e6      	bhi.n	3c62 <__gesf2+0x42>
    3c94:	2000      	movs	r0, #0
    3c96:	42a5      	cmp	r5, r4
    3c98:	d2e6      	bcs.n	3c68 <__gesf2+0x48>
    3c9a:	4258      	negs	r0, r3
    3c9c:	4143      	adcs	r3, r0
    3c9e:	2001      	movs	r0, #1
    3ca0:	425b      	negs	r3, r3
    3ca2:	4318      	orrs	r0, r3
    3ca4:	e7e0      	b.n	3c68 <__gesf2+0x48>
    3ca6:	46c0      	nop			; (mov r8, r8)

00003ca8 <__lesf2>:
    3ca8:	0243      	lsls	r3, r0, #9
    3caa:	b5f0      	push	{r4, r5, r6, r7, lr}
    3cac:	0042      	lsls	r2, r0, #1
    3cae:	004c      	lsls	r4, r1, #1
    3cb0:	0a5e      	lsrs	r6, r3, #9
    3cb2:	0fc3      	lsrs	r3, r0, #31
    3cb4:	0248      	lsls	r0, r1, #9
    3cb6:	0e12      	lsrs	r2, r2, #24
    3cb8:	0a45      	lsrs	r5, r0, #9
    3cba:	0e24      	lsrs	r4, r4, #24
    3cbc:	0fc9      	lsrs	r1, r1, #31
    3cbe:	2aff      	cmp	r2, #255	; 0xff
    3cc0:	d017      	beq.n	3cf2 <__lesf2+0x4a>
    3cc2:	2cff      	cmp	r4, #255	; 0xff
    3cc4:	d019      	beq.n	3cfa <__lesf2+0x52>
    3cc6:	2a00      	cmp	r2, #0
    3cc8:	d10b      	bne.n	3ce2 <__lesf2+0x3a>
    3cca:	4270      	negs	r0, r6
    3ccc:	4170      	adcs	r0, r6
    3cce:	2c00      	cmp	r4, #0
    3cd0:	d017      	beq.n	3d02 <__lesf2+0x5a>
    3cd2:	2800      	cmp	r0, #0
    3cd4:	d007      	beq.n	3ce6 <__lesf2+0x3e>
    3cd6:	4248      	negs	r0, r1
    3cd8:	4141      	adcs	r1, r0
    3cda:	2001      	movs	r0, #1
    3cdc:	4249      	negs	r1, r1
    3cde:	4308      	orrs	r0, r1
    3ce0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3ce2:	2c00      	cmp	r4, #0
    3ce4:	d013      	beq.n	3d0e <__lesf2+0x66>
    3ce6:	428b      	cmp	r3, r1
    3ce8:	d014      	beq.n	3d14 <__lesf2+0x6c>
    3cea:	4258      	negs	r0, r3
    3cec:	2301      	movs	r3, #1
    3cee:	4318      	orrs	r0, r3
    3cf0:	e7f6      	b.n	3ce0 <__lesf2+0x38>
    3cf2:	2002      	movs	r0, #2
    3cf4:	2e00      	cmp	r6, #0
    3cf6:	d1f3      	bne.n	3ce0 <__lesf2+0x38>
    3cf8:	e7e3      	b.n	3cc2 <__lesf2+0x1a>
    3cfa:	2002      	movs	r0, #2
    3cfc:	2d00      	cmp	r5, #0
    3cfe:	d1ef      	bne.n	3ce0 <__lesf2+0x38>
    3d00:	e7e1      	b.n	3cc6 <__lesf2+0x1e>
    3d02:	2d00      	cmp	r5, #0
    3d04:	d1e5      	bne.n	3cd2 <__lesf2+0x2a>
    3d06:	2000      	movs	r0, #0
    3d08:	2e00      	cmp	r6, #0
    3d0a:	d0e9      	beq.n	3ce0 <__lesf2+0x38>
    3d0c:	e7ed      	b.n	3cea <__lesf2+0x42>
    3d0e:	2d00      	cmp	r5, #0
    3d10:	d1e9      	bne.n	3ce6 <__lesf2+0x3e>
    3d12:	e7ea      	b.n	3cea <__lesf2+0x42>
    3d14:	42a2      	cmp	r2, r4
    3d16:	dce8      	bgt.n	3cea <__lesf2+0x42>
    3d18:	db04      	blt.n	3d24 <__lesf2+0x7c>
    3d1a:	42ae      	cmp	r6, r5
    3d1c:	d8e5      	bhi.n	3cea <__lesf2+0x42>
    3d1e:	2000      	movs	r0, #0
    3d20:	42ae      	cmp	r6, r5
    3d22:	d2dd      	bcs.n	3ce0 <__lesf2+0x38>
    3d24:	4258      	negs	r0, r3
    3d26:	4143      	adcs	r3, r0
    3d28:	2001      	movs	r0, #1
    3d2a:	425b      	negs	r3, r3
    3d2c:	4318      	orrs	r0, r3
    3d2e:	e7d7      	b.n	3ce0 <__lesf2+0x38>

00003d30 <__aeabi_fmul>:
    3d30:	b5f0      	push	{r4, r5, r6, r7, lr}
    3d32:	4657      	mov	r7, sl
    3d34:	464e      	mov	r6, r9
    3d36:	4645      	mov	r5, r8
    3d38:	0043      	lsls	r3, r0, #1
    3d3a:	b4e0      	push	{r5, r6, r7}
    3d3c:	0246      	lsls	r6, r0, #9
    3d3e:	4688      	mov	r8, r1
    3d40:	0a76      	lsrs	r6, r6, #9
    3d42:	0e1f      	lsrs	r7, r3, #24
    3d44:	0fc4      	lsrs	r4, r0, #31
    3d46:	2f00      	cmp	r7, #0
    3d48:	d047      	beq.n	3dda <__aeabi_fmul+0xaa>
    3d4a:	2fff      	cmp	r7, #255	; 0xff
    3d4c:	d025      	beq.n	3d9a <__aeabi_fmul+0x6a>
    3d4e:	2300      	movs	r3, #0
    3d50:	2580      	movs	r5, #128	; 0x80
    3d52:	469a      	mov	sl, r3
    3d54:	4699      	mov	r9, r3
    3d56:	00f6      	lsls	r6, r6, #3
    3d58:	04ed      	lsls	r5, r5, #19
    3d5a:	432e      	orrs	r6, r5
    3d5c:	3f7f      	subs	r7, #127	; 0x7f
    3d5e:	4643      	mov	r3, r8
    3d60:	4642      	mov	r2, r8
    3d62:	025d      	lsls	r5, r3, #9
    3d64:	0fd2      	lsrs	r2, r2, #31
    3d66:	005b      	lsls	r3, r3, #1
    3d68:	0a6d      	lsrs	r5, r5, #9
    3d6a:	0e1b      	lsrs	r3, r3, #24
    3d6c:	4690      	mov	r8, r2
    3d6e:	d040      	beq.n	3df2 <__aeabi_fmul+0xc2>
    3d70:	2bff      	cmp	r3, #255	; 0xff
    3d72:	d039      	beq.n	3de8 <__aeabi_fmul+0xb8>
    3d74:	2280      	movs	r2, #128	; 0x80
    3d76:	2000      	movs	r0, #0
    3d78:	00ed      	lsls	r5, r5, #3
    3d7a:	04d2      	lsls	r2, r2, #19
    3d7c:	4315      	orrs	r5, r2
    3d7e:	3b7f      	subs	r3, #127	; 0x7f
    3d80:	18fb      	adds	r3, r7, r3
    3d82:	4642      	mov	r2, r8
    3d84:	4657      	mov	r7, sl
    3d86:	1c59      	adds	r1, r3, #1
    3d88:	4062      	eors	r2, r4
    3d8a:	468c      	mov	ip, r1
    3d8c:	4307      	orrs	r7, r0
    3d8e:	2f0f      	cmp	r7, #15
    3d90:	d85c      	bhi.n	3e4c <__aeabi_fmul+0x11c>
    3d92:	496f      	ldr	r1, [pc, #444]	; (3f50 <__aeabi_fmul+0x220>)
    3d94:	00bf      	lsls	r7, r7, #2
    3d96:	59c9      	ldr	r1, [r1, r7]
    3d98:	468f      	mov	pc, r1
    3d9a:	2e00      	cmp	r6, #0
    3d9c:	d145      	bne.n	3e2a <__aeabi_fmul+0xfa>
    3d9e:	2308      	movs	r3, #8
    3da0:	469a      	mov	sl, r3
    3da2:	3b06      	subs	r3, #6
    3da4:	4699      	mov	r9, r3
    3da6:	e7da      	b.n	3d5e <__aeabi_fmul+0x2e>
    3da8:	4642      	mov	r2, r8
    3daa:	2802      	cmp	r0, #2
    3dac:	d02d      	beq.n	3e0a <__aeabi_fmul+0xda>
    3dae:	2803      	cmp	r0, #3
    3db0:	d100      	bne.n	3db4 <__aeabi_fmul+0x84>
    3db2:	e0c3      	b.n	3f3c <__aeabi_fmul+0x20c>
    3db4:	2801      	cmp	r0, #1
    3db6:	d000      	beq.n	3dba <__aeabi_fmul+0x8a>
    3db8:	e0a2      	b.n	3f00 <__aeabi_fmul+0x1d0>
    3dba:	2500      	movs	r5, #0
    3dbc:	2600      	movs	r6, #0
    3dbe:	4002      	ands	r2, r0
    3dc0:	b2d4      	uxtb	r4, r2
    3dc2:	0276      	lsls	r6, r6, #9
    3dc4:	05ed      	lsls	r5, r5, #23
    3dc6:	0a76      	lsrs	r6, r6, #9
    3dc8:	432e      	orrs	r6, r5
    3dca:	07e4      	lsls	r4, r4, #31
    3dcc:	4326      	orrs	r6, r4
    3dce:	0030      	movs	r0, r6
    3dd0:	bc1c      	pop	{r2, r3, r4}
    3dd2:	4690      	mov	r8, r2
    3dd4:	4699      	mov	r9, r3
    3dd6:	46a2      	mov	sl, r4
    3dd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3dda:	2e00      	cmp	r6, #0
    3ddc:	d11a      	bne.n	3e14 <__aeabi_fmul+0xe4>
    3dde:	2304      	movs	r3, #4
    3de0:	469a      	mov	sl, r3
    3de2:	3b03      	subs	r3, #3
    3de4:	4699      	mov	r9, r3
    3de6:	e7ba      	b.n	3d5e <__aeabi_fmul+0x2e>
    3de8:	002a      	movs	r2, r5
    3dea:	1e51      	subs	r1, r2, #1
    3dec:	418a      	sbcs	r2, r1
    3dee:	1c90      	adds	r0, r2, #2
    3df0:	e7c6      	b.n	3d80 <__aeabi_fmul+0x50>
    3df2:	2001      	movs	r0, #1
    3df4:	2d00      	cmp	r5, #0
    3df6:	d0c3      	beq.n	3d80 <__aeabi_fmul+0x50>
    3df8:	0028      	movs	r0, r5
    3dfa:	f002 f9f7 	bl	61ec <__clzsi2>
    3dfe:	1f43      	subs	r3, r0, #5
    3e00:	3076      	adds	r0, #118	; 0x76
    3e02:	409d      	lsls	r5, r3
    3e04:	4243      	negs	r3, r0
    3e06:	2000      	movs	r0, #0
    3e08:	e7ba      	b.n	3d80 <__aeabi_fmul+0x50>
    3e0a:	2401      	movs	r4, #1
    3e0c:	25ff      	movs	r5, #255	; 0xff
    3e0e:	4014      	ands	r4, r2
    3e10:	2600      	movs	r6, #0
    3e12:	e7d6      	b.n	3dc2 <__aeabi_fmul+0x92>
    3e14:	0030      	movs	r0, r6
    3e16:	f002 f9e9 	bl	61ec <__clzsi2>
    3e1a:	1f43      	subs	r3, r0, #5
    3e1c:	409e      	lsls	r6, r3
    3e1e:	2300      	movs	r3, #0
    3e20:	3076      	adds	r0, #118	; 0x76
    3e22:	4247      	negs	r7, r0
    3e24:	469a      	mov	sl, r3
    3e26:	4699      	mov	r9, r3
    3e28:	e799      	b.n	3d5e <__aeabi_fmul+0x2e>
    3e2a:	230c      	movs	r3, #12
    3e2c:	469a      	mov	sl, r3
    3e2e:	3b09      	subs	r3, #9
    3e30:	4699      	mov	r9, r3
    3e32:	e794      	b.n	3d5e <__aeabi_fmul+0x2e>
    3e34:	2680      	movs	r6, #128	; 0x80
    3e36:	2400      	movs	r4, #0
    3e38:	03f6      	lsls	r6, r6, #15
    3e3a:	25ff      	movs	r5, #255	; 0xff
    3e3c:	e7c1      	b.n	3dc2 <__aeabi_fmul+0x92>
    3e3e:	0035      	movs	r5, r6
    3e40:	4648      	mov	r0, r9
    3e42:	e7b2      	b.n	3daa <__aeabi_fmul+0x7a>
    3e44:	0035      	movs	r5, r6
    3e46:	0022      	movs	r2, r4
    3e48:	4648      	mov	r0, r9
    3e4a:	e7ae      	b.n	3daa <__aeabi_fmul+0x7a>
    3e4c:	0429      	lsls	r1, r5, #16
    3e4e:	0c09      	lsrs	r1, r1, #16
    3e50:	0008      	movs	r0, r1
    3e52:	0c37      	lsrs	r7, r6, #16
    3e54:	0436      	lsls	r6, r6, #16
    3e56:	0c36      	lsrs	r6, r6, #16
    3e58:	0c2c      	lsrs	r4, r5, #16
    3e5a:	4379      	muls	r1, r7
    3e5c:	4370      	muls	r0, r6
    3e5e:	4367      	muls	r7, r4
    3e60:	4374      	muls	r4, r6
    3e62:	0c06      	lsrs	r6, r0, #16
    3e64:	1864      	adds	r4, r4, r1
    3e66:	1936      	adds	r6, r6, r4
    3e68:	42b1      	cmp	r1, r6
    3e6a:	d903      	bls.n	3e74 <__aeabi_fmul+0x144>
    3e6c:	2180      	movs	r1, #128	; 0x80
    3e6e:	0249      	lsls	r1, r1, #9
    3e70:	4688      	mov	r8, r1
    3e72:	4447      	add	r7, r8
    3e74:	0400      	lsls	r0, r0, #16
    3e76:	0c00      	lsrs	r0, r0, #16
    3e78:	0431      	lsls	r1, r6, #16
    3e7a:	1809      	adds	r1, r1, r0
    3e7c:	018d      	lsls	r5, r1, #6
    3e7e:	1e68      	subs	r0, r5, #1
    3e80:	4185      	sbcs	r5, r0
    3e82:	0e89      	lsrs	r1, r1, #26
    3e84:	4329      	orrs	r1, r5
    3e86:	0c35      	lsrs	r5, r6, #16
    3e88:	19ed      	adds	r5, r5, r7
    3e8a:	01ad      	lsls	r5, r5, #6
    3e8c:	430d      	orrs	r5, r1
    3e8e:	0129      	lsls	r1, r5, #4
    3e90:	d504      	bpl.n	3e9c <__aeabi_fmul+0x16c>
    3e92:	2301      	movs	r3, #1
    3e94:	0869      	lsrs	r1, r5, #1
    3e96:	401d      	ands	r5, r3
    3e98:	4663      	mov	r3, ip
    3e9a:	430d      	orrs	r5, r1
    3e9c:	0019      	movs	r1, r3
    3e9e:	317f      	adds	r1, #127	; 0x7f
    3ea0:	2900      	cmp	r1, #0
    3ea2:	dd25      	ble.n	3ef0 <__aeabi_fmul+0x1c0>
    3ea4:	0768      	lsls	r0, r5, #29
    3ea6:	d004      	beq.n	3eb2 <__aeabi_fmul+0x182>
    3ea8:	200f      	movs	r0, #15
    3eaa:	4028      	ands	r0, r5
    3eac:	2804      	cmp	r0, #4
    3eae:	d000      	beq.n	3eb2 <__aeabi_fmul+0x182>
    3eb0:	3504      	adds	r5, #4
    3eb2:	0128      	lsls	r0, r5, #4
    3eb4:	d503      	bpl.n	3ebe <__aeabi_fmul+0x18e>
    3eb6:	4927      	ldr	r1, [pc, #156]	; (3f54 <__aeabi_fmul+0x224>)
    3eb8:	3380      	adds	r3, #128	; 0x80
    3eba:	400d      	ands	r5, r1
    3ebc:	0019      	movs	r1, r3
    3ebe:	29fe      	cmp	r1, #254	; 0xfe
    3ec0:	dca3      	bgt.n	3e0a <__aeabi_fmul+0xda>
    3ec2:	2401      	movs	r4, #1
    3ec4:	01ad      	lsls	r5, r5, #6
    3ec6:	0a6e      	lsrs	r6, r5, #9
    3ec8:	4014      	ands	r4, r2
    3eca:	b2cd      	uxtb	r5, r1
    3ecc:	e779      	b.n	3dc2 <__aeabi_fmul+0x92>
    3ece:	2080      	movs	r0, #128	; 0x80
    3ed0:	03c0      	lsls	r0, r0, #15
    3ed2:	4206      	tst	r6, r0
    3ed4:	d007      	beq.n	3ee6 <__aeabi_fmul+0x1b6>
    3ed6:	4205      	tst	r5, r0
    3ed8:	d105      	bne.n	3ee6 <__aeabi_fmul+0x1b6>
    3eda:	4328      	orrs	r0, r5
    3edc:	0246      	lsls	r6, r0, #9
    3ede:	0a76      	lsrs	r6, r6, #9
    3ee0:	4644      	mov	r4, r8
    3ee2:	25ff      	movs	r5, #255	; 0xff
    3ee4:	e76d      	b.n	3dc2 <__aeabi_fmul+0x92>
    3ee6:	4306      	orrs	r6, r0
    3ee8:	0276      	lsls	r6, r6, #9
    3eea:	0a76      	lsrs	r6, r6, #9
    3eec:	25ff      	movs	r5, #255	; 0xff
    3eee:	e768      	b.n	3dc2 <__aeabi_fmul+0x92>
    3ef0:	2401      	movs	r4, #1
    3ef2:	1a61      	subs	r1, r4, r1
    3ef4:	291b      	cmp	r1, #27
    3ef6:	dd05      	ble.n	3f04 <__aeabi_fmul+0x1d4>
    3ef8:	4014      	ands	r4, r2
    3efa:	2500      	movs	r5, #0
    3efc:	2600      	movs	r6, #0
    3efe:	e760      	b.n	3dc2 <__aeabi_fmul+0x92>
    3f00:	4663      	mov	r3, ip
    3f02:	e7cb      	b.n	3e9c <__aeabi_fmul+0x16c>
    3f04:	002e      	movs	r6, r5
    3f06:	2320      	movs	r3, #32
    3f08:	40ce      	lsrs	r6, r1
    3f0a:	1a59      	subs	r1, r3, r1
    3f0c:	408d      	lsls	r5, r1
    3f0e:	1e6b      	subs	r3, r5, #1
    3f10:	419d      	sbcs	r5, r3
    3f12:	432e      	orrs	r6, r5
    3f14:	0773      	lsls	r3, r6, #29
    3f16:	d004      	beq.n	3f22 <__aeabi_fmul+0x1f2>
    3f18:	230f      	movs	r3, #15
    3f1a:	4033      	ands	r3, r6
    3f1c:	2b04      	cmp	r3, #4
    3f1e:	d000      	beq.n	3f22 <__aeabi_fmul+0x1f2>
    3f20:	3604      	adds	r6, #4
    3f22:	0173      	lsls	r3, r6, #5
    3f24:	d504      	bpl.n	3f30 <__aeabi_fmul+0x200>
    3f26:	2401      	movs	r4, #1
    3f28:	2501      	movs	r5, #1
    3f2a:	4014      	ands	r4, r2
    3f2c:	2600      	movs	r6, #0
    3f2e:	e748      	b.n	3dc2 <__aeabi_fmul+0x92>
    3f30:	2401      	movs	r4, #1
    3f32:	01b6      	lsls	r6, r6, #6
    3f34:	0a76      	lsrs	r6, r6, #9
    3f36:	4014      	ands	r4, r2
    3f38:	2500      	movs	r5, #0
    3f3a:	e742      	b.n	3dc2 <__aeabi_fmul+0x92>
    3f3c:	2680      	movs	r6, #128	; 0x80
    3f3e:	2401      	movs	r4, #1
    3f40:	03f6      	lsls	r6, r6, #15
    3f42:	432e      	orrs	r6, r5
    3f44:	0276      	lsls	r6, r6, #9
    3f46:	0a76      	lsrs	r6, r6, #9
    3f48:	4014      	ands	r4, r2
    3f4a:	25ff      	movs	r5, #255	; 0xff
    3f4c:	e739      	b.n	3dc2 <__aeabi_fmul+0x92>
    3f4e:	46c0      	nop			; (mov r8, r8)
    3f50:	000063e8 	.word	0x000063e8
    3f54:	f7ffffff 	.word	0xf7ffffff

00003f58 <__aeabi_fsub>:
    3f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3f5a:	024a      	lsls	r2, r1, #9
    3f5c:	004e      	lsls	r6, r1, #1
    3f5e:	0243      	lsls	r3, r0, #9
    3f60:	0044      	lsls	r4, r0, #1
    3f62:	0e24      	lsrs	r4, r4, #24
    3f64:	0fc5      	lsrs	r5, r0, #31
    3f66:	099b      	lsrs	r3, r3, #6
    3f68:	0e36      	lsrs	r6, r6, #24
    3f6a:	0fc9      	lsrs	r1, r1, #31
    3f6c:	0992      	lsrs	r2, r2, #6
    3f6e:	2eff      	cmp	r6, #255	; 0xff
    3f70:	d100      	bne.n	3f74 <__aeabi_fsub+0x1c>
    3f72:	e083      	b.n	407c <__aeabi_fsub+0x124>
    3f74:	2001      	movs	r0, #1
    3f76:	4041      	eors	r1, r0
    3f78:	1ba0      	subs	r0, r4, r6
    3f7a:	42a9      	cmp	r1, r5
    3f7c:	d05c      	beq.n	4038 <__aeabi_fsub+0xe0>
    3f7e:	2800      	cmp	r0, #0
    3f80:	dc00      	bgt.n	3f84 <__aeabi_fsub+0x2c>
    3f82:	e095      	b.n	40b0 <__aeabi_fsub+0x158>
    3f84:	2e00      	cmp	r6, #0
    3f86:	d11c      	bne.n	3fc2 <__aeabi_fsub+0x6a>
    3f88:	2a00      	cmp	r2, #0
    3f8a:	d000      	beq.n	3f8e <__aeabi_fsub+0x36>
    3f8c:	e081      	b.n	4092 <__aeabi_fsub+0x13a>
    3f8e:	075a      	lsls	r2, r3, #29
    3f90:	d004      	beq.n	3f9c <__aeabi_fsub+0x44>
    3f92:	220f      	movs	r2, #15
    3f94:	401a      	ands	r2, r3
    3f96:	2a04      	cmp	r2, #4
    3f98:	d000      	beq.n	3f9c <__aeabi_fsub+0x44>
    3f9a:	3304      	adds	r3, #4
    3f9c:	015a      	lsls	r2, r3, #5
    3f9e:	d53b      	bpl.n	4018 <__aeabi_fsub+0xc0>
    3fa0:	3401      	adds	r4, #1
    3fa2:	2cff      	cmp	r4, #255	; 0xff
    3fa4:	d100      	bne.n	3fa8 <__aeabi_fsub+0x50>
    3fa6:	e091      	b.n	40cc <__aeabi_fsub+0x174>
    3fa8:	2001      	movs	r0, #1
    3faa:	019b      	lsls	r3, r3, #6
    3fac:	0a5b      	lsrs	r3, r3, #9
    3fae:	b2e4      	uxtb	r4, r4
    3fb0:	4005      	ands	r5, r0
    3fb2:	025b      	lsls	r3, r3, #9
    3fb4:	05e4      	lsls	r4, r4, #23
    3fb6:	0a5b      	lsrs	r3, r3, #9
    3fb8:	07ed      	lsls	r5, r5, #31
    3fba:	4323      	orrs	r3, r4
    3fbc:	432b      	orrs	r3, r5
    3fbe:	0018      	movs	r0, r3
    3fc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3fc2:	2cff      	cmp	r4, #255	; 0xff
    3fc4:	d0e3      	beq.n	3f8e <__aeabi_fsub+0x36>
    3fc6:	2180      	movs	r1, #128	; 0x80
    3fc8:	04c9      	lsls	r1, r1, #19
    3fca:	430a      	orrs	r2, r1
    3fcc:	281b      	cmp	r0, #27
    3fce:	dd00      	ble.n	3fd2 <__aeabi_fsub+0x7a>
    3fd0:	e090      	b.n	40f4 <__aeabi_fsub+0x19c>
    3fd2:	0016      	movs	r6, r2
    3fd4:	2120      	movs	r1, #32
    3fd6:	40c6      	lsrs	r6, r0
    3fd8:	1a08      	subs	r0, r1, r0
    3fda:	4082      	lsls	r2, r0
    3fdc:	1e51      	subs	r1, r2, #1
    3fde:	418a      	sbcs	r2, r1
    3fe0:	4332      	orrs	r2, r6
    3fe2:	1a9b      	subs	r3, r3, r2
    3fe4:	015a      	lsls	r2, r3, #5
    3fe6:	d515      	bpl.n	4014 <__aeabi_fsub+0xbc>
    3fe8:	019b      	lsls	r3, r3, #6
    3fea:	099e      	lsrs	r6, r3, #6
    3fec:	0030      	movs	r0, r6
    3fee:	f002 f8fd 	bl	61ec <__clzsi2>
    3ff2:	3805      	subs	r0, #5
    3ff4:	4086      	lsls	r6, r0
    3ff6:	4284      	cmp	r4, r0
    3ff8:	dc6c      	bgt.n	40d4 <__aeabi_fsub+0x17c>
    3ffa:	1b04      	subs	r4, r0, r4
    3ffc:	0033      	movs	r3, r6
    3ffe:	2020      	movs	r0, #32
    4000:	3401      	adds	r4, #1
    4002:	40e3      	lsrs	r3, r4
    4004:	1b04      	subs	r4, r0, r4
    4006:	40a6      	lsls	r6, r4
    4008:	1e72      	subs	r2, r6, #1
    400a:	4196      	sbcs	r6, r2
    400c:	2400      	movs	r4, #0
    400e:	4333      	orrs	r3, r6
    4010:	e7bd      	b.n	3f8e <__aeabi_fsub+0x36>
    4012:	000d      	movs	r5, r1
    4014:	075a      	lsls	r2, r3, #29
    4016:	d1bc      	bne.n	3f92 <__aeabi_fsub+0x3a>
    4018:	08df      	lsrs	r7, r3, #3
    401a:	2301      	movs	r3, #1
    401c:	401d      	ands	r5, r3
    401e:	2cff      	cmp	r4, #255	; 0xff
    4020:	d133      	bne.n	408a <__aeabi_fsub+0x132>
    4022:	2f00      	cmp	r7, #0
    4024:	d100      	bne.n	4028 <__aeabi_fsub+0xd0>
    4026:	e090      	b.n	414a <__aeabi_fsub+0x1f2>
    4028:	2280      	movs	r2, #128	; 0x80
    402a:	03d2      	lsls	r2, r2, #15
    402c:	0013      	movs	r3, r2
    402e:	433b      	orrs	r3, r7
    4030:	025b      	lsls	r3, r3, #9
    4032:	0a5b      	lsrs	r3, r3, #9
    4034:	24ff      	movs	r4, #255	; 0xff
    4036:	e7bc      	b.n	3fb2 <__aeabi_fsub+0x5a>
    4038:	2800      	cmp	r0, #0
    403a:	dd4f      	ble.n	40dc <__aeabi_fsub+0x184>
    403c:	2e00      	cmp	r6, #0
    403e:	d02e      	beq.n	409e <__aeabi_fsub+0x146>
    4040:	2cff      	cmp	r4, #255	; 0xff
    4042:	d0a4      	beq.n	3f8e <__aeabi_fsub+0x36>
    4044:	2580      	movs	r5, #128	; 0x80
    4046:	04ed      	lsls	r5, r5, #19
    4048:	432a      	orrs	r2, r5
    404a:	281b      	cmp	r0, #27
    404c:	dd00      	ble.n	4050 <__aeabi_fsub+0xf8>
    404e:	e097      	b.n	4180 <__aeabi_fsub+0x228>
    4050:	0016      	movs	r6, r2
    4052:	2520      	movs	r5, #32
    4054:	40c6      	lsrs	r6, r0
    4056:	1a28      	subs	r0, r5, r0
    4058:	4082      	lsls	r2, r0
    405a:	1e50      	subs	r0, r2, #1
    405c:	4182      	sbcs	r2, r0
    405e:	4332      	orrs	r2, r6
    4060:	189b      	adds	r3, r3, r2
    4062:	015a      	lsls	r2, r3, #5
    4064:	d5d5      	bpl.n	4012 <__aeabi_fsub+0xba>
    4066:	3401      	adds	r4, #1
    4068:	2cff      	cmp	r4, #255	; 0xff
    406a:	d06d      	beq.n	4148 <__aeabi_fsub+0x1f0>
    406c:	2201      	movs	r2, #1
    406e:	487b      	ldr	r0, [pc, #492]	; (425c <__aeabi_fsub+0x304>)
    4070:	401a      	ands	r2, r3
    4072:	085b      	lsrs	r3, r3, #1
    4074:	4003      	ands	r3, r0
    4076:	4313      	orrs	r3, r2
    4078:	000d      	movs	r5, r1
    407a:	e788      	b.n	3f8e <__aeabi_fsub+0x36>
    407c:	2a00      	cmp	r2, #0
    407e:	d000      	beq.n	4082 <__aeabi_fsub+0x12a>
    4080:	e77a      	b.n	3f78 <__aeabi_fsub+0x20>
    4082:	e777      	b.n	3f74 <__aeabi_fsub+0x1c>
    4084:	1e03      	subs	r3, r0, #0
    4086:	d1c5      	bne.n	4014 <__aeabi_fsub+0xbc>
    4088:	2500      	movs	r5, #0
    408a:	027b      	lsls	r3, r7, #9
    408c:	0a5b      	lsrs	r3, r3, #9
    408e:	b2e4      	uxtb	r4, r4
    4090:	e78f      	b.n	3fb2 <__aeabi_fsub+0x5a>
    4092:	3801      	subs	r0, #1
    4094:	2800      	cmp	r0, #0
    4096:	d0a4      	beq.n	3fe2 <__aeabi_fsub+0x8a>
    4098:	2cff      	cmp	r4, #255	; 0xff
    409a:	d197      	bne.n	3fcc <__aeabi_fsub+0x74>
    409c:	e777      	b.n	3f8e <__aeabi_fsub+0x36>
    409e:	2a00      	cmp	r2, #0
    40a0:	d100      	bne.n	40a4 <__aeabi_fsub+0x14c>
    40a2:	e774      	b.n	3f8e <__aeabi_fsub+0x36>
    40a4:	3801      	subs	r0, #1
    40a6:	2800      	cmp	r0, #0
    40a8:	d0da      	beq.n	4060 <__aeabi_fsub+0x108>
    40aa:	2cff      	cmp	r4, #255	; 0xff
    40ac:	d1cd      	bne.n	404a <__aeabi_fsub+0xf2>
    40ae:	e76e      	b.n	3f8e <__aeabi_fsub+0x36>
    40b0:	2800      	cmp	r0, #0
    40b2:	d121      	bne.n	40f8 <__aeabi_fsub+0x1a0>
    40b4:	1c60      	adds	r0, r4, #1
    40b6:	b2c0      	uxtb	r0, r0
    40b8:	2801      	cmp	r0, #1
    40ba:	dd58      	ble.n	416e <__aeabi_fsub+0x216>
    40bc:	2780      	movs	r7, #128	; 0x80
    40be:	1a9e      	subs	r6, r3, r2
    40c0:	04ff      	lsls	r7, r7, #19
    40c2:	4037      	ands	r7, r6
    40c4:	d02f      	beq.n	4126 <__aeabi_fsub+0x1ce>
    40c6:	1ad6      	subs	r6, r2, r3
    40c8:	000d      	movs	r5, r1
    40ca:	e78f      	b.n	3fec <__aeabi_fsub+0x94>
    40cc:	2301      	movs	r3, #1
    40ce:	401d      	ands	r5, r3
    40d0:	2300      	movs	r3, #0
    40d2:	e76e      	b.n	3fb2 <__aeabi_fsub+0x5a>
    40d4:	4b62      	ldr	r3, [pc, #392]	; (4260 <__aeabi_fsub+0x308>)
    40d6:	1a24      	subs	r4, r4, r0
    40d8:	4033      	ands	r3, r6
    40da:	e758      	b.n	3f8e <__aeabi_fsub+0x36>
    40dc:	2800      	cmp	r0, #0
    40de:	d151      	bne.n	4184 <__aeabi_fsub+0x22c>
    40e0:	1c60      	adds	r0, r4, #1
    40e2:	b2c6      	uxtb	r6, r0
    40e4:	2e01      	cmp	r6, #1
    40e6:	dd33      	ble.n	4150 <__aeabi_fsub+0x1f8>
    40e8:	28ff      	cmp	r0, #255	; 0xff
    40ea:	d02d      	beq.n	4148 <__aeabi_fsub+0x1f0>
    40ec:	189b      	adds	r3, r3, r2
    40ee:	085b      	lsrs	r3, r3, #1
    40f0:	0004      	movs	r4, r0
    40f2:	e74c      	b.n	3f8e <__aeabi_fsub+0x36>
    40f4:	2201      	movs	r2, #1
    40f6:	e774      	b.n	3fe2 <__aeabi_fsub+0x8a>
    40f8:	2c00      	cmp	r4, #0
    40fa:	d01a      	beq.n	4132 <__aeabi_fsub+0x1da>
    40fc:	2eff      	cmp	r6, #255	; 0xff
    40fe:	d01f      	beq.n	4140 <__aeabi_fsub+0x1e8>
    4100:	2480      	movs	r4, #128	; 0x80
    4102:	04e4      	lsls	r4, r4, #19
    4104:	4240      	negs	r0, r0
    4106:	4323      	orrs	r3, r4
    4108:	281b      	cmp	r0, #27
    410a:	dd00      	ble.n	410e <__aeabi_fsub+0x1b6>
    410c:	e096      	b.n	423c <__aeabi_fsub+0x2e4>
    410e:	001d      	movs	r5, r3
    4110:	2420      	movs	r4, #32
    4112:	40c5      	lsrs	r5, r0
    4114:	1a20      	subs	r0, r4, r0
    4116:	4083      	lsls	r3, r0
    4118:	1e58      	subs	r0, r3, #1
    411a:	4183      	sbcs	r3, r0
    411c:	432b      	orrs	r3, r5
    411e:	1ad3      	subs	r3, r2, r3
    4120:	0034      	movs	r4, r6
    4122:	000d      	movs	r5, r1
    4124:	e75e      	b.n	3fe4 <__aeabi_fsub+0x8c>
    4126:	2e00      	cmp	r6, #0
    4128:	d000      	beq.n	412c <__aeabi_fsub+0x1d4>
    412a:	e75f      	b.n	3fec <__aeabi_fsub+0x94>
    412c:	2500      	movs	r5, #0
    412e:	2400      	movs	r4, #0
    4130:	e7ab      	b.n	408a <__aeabi_fsub+0x132>
    4132:	2b00      	cmp	r3, #0
    4134:	d044      	beq.n	41c0 <__aeabi_fsub+0x268>
    4136:	43c0      	mvns	r0, r0
    4138:	2800      	cmp	r0, #0
    413a:	d0f0      	beq.n	411e <__aeabi_fsub+0x1c6>
    413c:	2eff      	cmp	r6, #255	; 0xff
    413e:	d1e3      	bne.n	4108 <__aeabi_fsub+0x1b0>
    4140:	0013      	movs	r3, r2
    4142:	24ff      	movs	r4, #255	; 0xff
    4144:	000d      	movs	r5, r1
    4146:	e722      	b.n	3f8e <__aeabi_fsub+0x36>
    4148:	000d      	movs	r5, r1
    414a:	24ff      	movs	r4, #255	; 0xff
    414c:	2300      	movs	r3, #0
    414e:	e730      	b.n	3fb2 <__aeabi_fsub+0x5a>
    4150:	2c00      	cmp	r4, #0
    4152:	d15d      	bne.n	4210 <__aeabi_fsub+0x2b8>
    4154:	2b00      	cmp	r3, #0
    4156:	d07d      	beq.n	4254 <__aeabi_fsub+0x2fc>
    4158:	2a00      	cmp	r2, #0
    415a:	d100      	bne.n	415e <__aeabi_fsub+0x206>
    415c:	e717      	b.n	3f8e <__aeabi_fsub+0x36>
    415e:	189b      	adds	r3, r3, r2
    4160:	015a      	lsls	r2, r3, #5
    4162:	d400      	bmi.n	4166 <__aeabi_fsub+0x20e>
    4164:	e756      	b.n	4014 <__aeabi_fsub+0xbc>
    4166:	4a3e      	ldr	r2, [pc, #248]	; (4260 <__aeabi_fsub+0x308>)
    4168:	0004      	movs	r4, r0
    416a:	4013      	ands	r3, r2
    416c:	e70f      	b.n	3f8e <__aeabi_fsub+0x36>
    416e:	2c00      	cmp	r4, #0
    4170:	d11e      	bne.n	41b0 <__aeabi_fsub+0x258>
    4172:	2b00      	cmp	r3, #0
    4174:	d12f      	bne.n	41d6 <__aeabi_fsub+0x27e>
    4176:	2a00      	cmp	r2, #0
    4178:	d065      	beq.n	4246 <__aeabi_fsub+0x2ee>
    417a:	0013      	movs	r3, r2
    417c:	000d      	movs	r5, r1
    417e:	e706      	b.n	3f8e <__aeabi_fsub+0x36>
    4180:	2201      	movs	r2, #1
    4182:	e76d      	b.n	4060 <__aeabi_fsub+0x108>
    4184:	2c00      	cmp	r4, #0
    4186:	d11f      	bne.n	41c8 <__aeabi_fsub+0x270>
    4188:	2b00      	cmp	r3, #0
    418a:	d059      	beq.n	4240 <__aeabi_fsub+0x2e8>
    418c:	43c0      	mvns	r0, r0
    418e:	2800      	cmp	r0, #0
    4190:	d00b      	beq.n	41aa <__aeabi_fsub+0x252>
    4192:	2eff      	cmp	r6, #255	; 0xff
    4194:	d04f      	beq.n	4236 <__aeabi_fsub+0x2de>
    4196:	281b      	cmp	r0, #27
    4198:	dc5e      	bgt.n	4258 <__aeabi_fsub+0x300>
    419a:	001d      	movs	r5, r3
    419c:	2420      	movs	r4, #32
    419e:	40c5      	lsrs	r5, r0
    41a0:	1a20      	subs	r0, r4, r0
    41a2:	4083      	lsls	r3, r0
    41a4:	1e58      	subs	r0, r3, #1
    41a6:	4183      	sbcs	r3, r0
    41a8:	432b      	orrs	r3, r5
    41aa:	189b      	adds	r3, r3, r2
    41ac:	0034      	movs	r4, r6
    41ae:	e758      	b.n	4062 <__aeabi_fsub+0x10a>
    41b0:	2b00      	cmp	r3, #0
    41b2:	d11c      	bne.n	41ee <__aeabi_fsub+0x296>
    41b4:	2a00      	cmp	r2, #0
    41b6:	d049      	beq.n	424c <__aeabi_fsub+0x2f4>
    41b8:	0013      	movs	r3, r2
    41ba:	000d      	movs	r5, r1
    41bc:	24ff      	movs	r4, #255	; 0xff
    41be:	e6e6      	b.n	3f8e <__aeabi_fsub+0x36>
    41c0:	0013      	movs	r3, r2
    41c2:	0034      	movs	r4, r6
    41c4:	000d      	movs	r5, r1
    41c6:	e6e2      	b.n	3f8e <__aeabi_fsub+0x36>
    41c8:	2eff      	cmp	r6, #255	; 0xff
    41ca:	d034      	beq.n	4236 <__aeabi_fsub+0x2de>
    41cc:	2480      	movs	r4, #128	; 0x80
    41ce:	04e4      	lsls	r4, r4, #19
    41d0:	4240      	negs	r0, r0
    41d2:	4323      	orrs	r3, r4
    41d4:	e7df      	b.n	4196 <__aeabi_fsub+0x23e>
    41d6:	2a00      	cmp	r2, #0
    41d8:	d100      	bne.n	41dc <__aeabi_fsub+0x284>
    41da:	e6d8      	b.n	3f8e <__aeabi_fsub+0x36>
    41dc:	2780      	movs	r7, #128	; 0x80
    41de:	1a98      	subs	r0, r3, r2
    41e0:	04ff      	lsls	r7, r7, #19
    41e2:	4007      	ands	r7, r0
    41e4:	d100      	bne.n	41e8 <__aeabi_fsub+0x290>
    41e6:	e74d      	b.n	4084 <__aeabi_fsub+0x12c>
    41e8:	1ad3      	subs	r3, r2, r3
    41ea:	000d      	movs	r5, r1
    41ec:	e6cf      	b.n	3f8e <__aeabi_fsub+0x36>
    41ee:	24ff      	movs	r4, #255	; 0xff
    41f0:	2a00      	cmp	r2, #0
    41f2:	d100      	bne.n	41f6 <__aeabi_fsub+0x29e>
    41f4:	e6cb      	b.n	3f8e <__aeabi_fsub+0x36>
    41f6:	2080      	movs	r0, #128	; 0x80
    41f8:	08db      	lsrs	r3, r3, #3
    41fa:	03c0      	lsls	r0, r0, #15
    41fc:	4203      	tst	r3, r0
    41fe:	d004      	beq.n	420a <__aeabi_fsub+0x2b2>
    4200:	08d2      	lsrs	r2, r2, #3
    4202:	4202      	tst	r2, r0
    4204:	d101      	bne.n	420a <__aeabi_fsub+0x2b2>
    4206:	0013      	movs	r3, r2
    4208:	000d      	movs	r5, r1
    420a:	00db      	lsls	r3, r3, #3
    420c:	24ff      	movs	r4, #255	; 0xff
    420e:	e6be      	b.n	3f8e <__aeabi_fsub+0x36>
    4210:	2b00      	cmp	r3, #0
    4212:	d010      	beq.n	4236 <__aeabi_fsub+0x2de>
    4214:	24ff      	movs	r4, #255	; 0xff
    4216:	2a00      	cmp	r2, #0
    4218:	d100      	bne.n	421c <__aeabi_fsub+0x2c4>
    421a:	e6b8      	b.n	3f8e <__aeabi_fsub+0x36>
    421c:	2080      	movs	r0, #128	; 0x80
    421e:	08db      	lsrs	r3, r3, #3
    4220:	03c0      	lsls	r0, r0, #15
    4222:	4203      	tst	r3, r0
    4224:	d003      	beq.n	422e <__aeabi_fsub+0x2d6>
    4226:	08d2      	lsrs	r2, r2, #3
    4228:	4202      	tst	r2, r0
    422a:	d100      	bne.n	422e <__aeabi_fsub+0x2d6>
    422c:	0013      	movs	r3, r2
    422e:	00db      	lsls	r3, r3, #3
    4230:	000d      	movs	r5, r1
    4232:	24ff      	movs	r4, #255	; 0xff
    4234:	e6ab      	b.n	3f8e <__aeabi_fsub+0x36>
    4236:	0013      	movs	r3, r2
    4238:	24ff      	movs	r4, #255	; 0xff
    423a:	e6a8      	b.n	3f8e <__aeabi_fsub+0x36>
    423c:	2301      	movs	r3, #1
    423e:	e76e      	b.n	411e <__aeabi_fsub+0x1c6>
    4240:	0013      	movs	r3, r2
    4242:	0034      	movs	r4, r6
    4244:	e6a3      	b.n	3f8e <__aeabi_fsub+0x36>
    4246:	2700      	movs	r7, #0
    4248:	2500      	movs	r5, #0
    424a:	e71e      	b.n	408a <__aeabi_fsub+0x132>
    424c:	2780      	movs	r7, #128	; 0x80
    424e:	2500      	movs	r5, #0
    4250:	03ff      	lsls	r7, r7, #15
    4252:	e6e9      	b.n	4028 <__aeabi_fsub+0xd0>
    4254:	0013      	movs	r3, r2
    4256:	e69a      	b.n	3f8e <__aeabi_fsub+0x36>
    4258:	2301      	movs	r3, #1
    425a:	e7a6      	b.n	41aa <__aeabi_fsub+0x252>
    425c:	7dffffff 	.word	0x7dffffff
    4260:	fbffffff 	.word	0xfbffffff

00004264 <__aeabi_f2iz>:
    4264:	0243      	lsls	r3, r0, #9
    4266:	0a59      	lsrs	r1, r3, #9
    4268:	0043      	lsls	r3, r0, #1
    426a:	0fc2      	lsrs	r2, r0, #31
    426c:	0e1b      	lsrs	r3, r3, #24
    426e:	2000      	movs	r0, #0
    4270:	2b7e      	cmp	r3, #126	; 0x7e
    4272:	dd0e      	ble.n	4292 <__aeabi_f2iz+0x2e>
    4274:	2b9d      	cmp	r3, #157	; 0x9d
    4276:	dc0d      	bgt.n	4294 <__aeabi_f2iz+0x30>
    4278:	2080      	movs	r0, #128	; 0x80
    427a:	0400      	lsls	r0, r0, #16
    427c:	4301      	orrs	r1, r0
    427e:	2b95      	cmp	r3, #149	; 0x95
    4280:	dc0b      	bgt.n	429a <__aeabi_f2iz+0x36>
    4282:	2096      	movs	r0, #150	; 0x96
    4284:	1ac3      	subs	r3, r0, r3
    4286:	40d9      	lsrs	r1, r3
    4288:	000b      	movs	r3, r1
    428a:	4258      	negs	r0, r3
    428c:	2a00      	cmp	r2, #0
    428e:	d100      	bne.n	4292 <__aeabi_f2iz+0x2e>
    4290:	0018      	movs	r0, r3
    4292:	4770      	bx	lr
    4294:	4b03      	ldr	r3, [pc, #12]	; (42a4 <__aeabi_f2iz+0x40>)
    4296:	18d0      	adds	r0, r2, r3
    4298:	e7fb      	b.n	4292 <__aeabi_f2iz+0x2e>
    429a:	3b96      	subs	r3, #150	; 0x96
    429c:	4099      	lsls	r1, r3
    429e:	000b      	movs	r3, r1
    42a0:	e7f3      	b.n	428a <__aeabi_f2iz+0x26>
    42a2:	46c0      	nop			; (mov r8, r8)
    42a4:	7fffffff 	.word	0x7fffffff

000042a8 <__aeabi_i2f>:
    42a8:	b570      	push	{r4, r5, r6, lr}
    42aa:	2800      	cmp	r0, #0
    42ac:	d030      	beq.n	4310 <__aeabi_i2f+0x68>
    42ae:	17c3      	asrs	r3, r0, #31
    42b0:	18c5      	adds	r5, r0, r3
    42b2:	405d      	eors	r5, r3
    42b4:	0fc4      	lsrs	r4, r0, #31
    42b6:	0028      	movs	r0, r5
    42b8:	f001 ff98 	bl	61ec <__clzsi2>
    42bc:	239e      	movs	r3, #158	; 0x9e
    42be:	1a1b      	subs	r3, r3, r0
    42c0:	2b96      	cmp	r3, #150	; 0x96
    42c2:	dc0d      	bgt.n	42e0 <__aeabi_i2f+0x38>
    42c4:	2296      	movs	r2, #150	; 0x96
    42c6:	1ad2      	subs	r2, r2, r3
    42c8:	4095      	lsls	r5, r2
    42ca:	026a      	lsls	r2, r5, #9
    42cc:	0a52      	lsrs	r2, r2, #9
    42ce:	b2d8      	uxtb	r0, r3
    42d0:	0252      	lsls	r2, r2, #9
    42d2:	05c0      	lsls	r0, r0, #23
    42d4:	0a52      	lsrs	r2, r2, #9
    42d6:	07e4      	lsls	r4, r4, #31
    42d8:	4302      	orrs	r2, r0
    42da:	4322      	orrs	r2, r4
    42dc:	0010      	movs	r0, r2
    42de:	bd70      	pop	{r4, r5, r6, pc}
    42e0:	2b99      	cmp	r3, #153	; 0x99
    42e2:	dc19      	bgt.n	4318 <__aeabi_i2f+0x70>
    42e4:	2299      	movs	r2, #153	; 0x99
    42e6:	1ad2      	subs	r2, r2, r3
    42e8:	4095      	lsls	r5, r2
    42ea:	4a12      	ldr	r2, [pc, #72]	; (4334 <__aeabi_i2f+0x8c>)
    42ec:	402a      	ands	r2, r5
    42ee:	0769      	lsls	r1, r5, #29
    42f0:	d004      	beq.n	42fc <__aeabi_i2f+0x54>
    42f2:	210f      	movs	r1, #15
    42f4:	400d      	ands	r5, r1
    42f6:	2d04      	cmp	r5, #4
    42f8:	d000      	beq.n	42fc <__aeabi_i2f+0x54>
    42fa:	3204      	adds	r2, #4
    42fc:	0151      	lsls	r1, r2, #5
    42fe:	d503      	bpl.n	4308 <__aeabi_i2f+0x60>
    4300:	4b0c      	ldr	r3, [pc, #48]	; (4334 <__aeabi_i2f+0x8c>)
    4302:	401a      	ands	r2, r3
    4304:	239f      	movs	r3, #159	; 0x9f
    4306:	1a1b      	subs	r3, r3, r0
    4308:	0192      	lsls	r2, r2, #6
    430a:	0a52      	lsrs	r2, r2, #9
    430c:	b2d8      	uxtb	r0, r3
    430e:	e7df      	b.n	42d0 <__aeabi_i2f+0x28>
    4310:	2400      	movs	r4, #0
    4312:	2000      	movs	r0, #0
    4314:	2200      	movs	r2, #0
    4316:	e7db      	b.n	42d0 <__aeabi_i2f+0x28>
    4318:	2205      	movs	r2, #5
    431a:	002e      	movs	r6, r5
    431c:	1a12      	subs	r2, r2, r0
    431e:	21b9      	movs	r1, #185	; 0xb9
    4320:	40d6      	lsrs	r6, r2
    4322:	002a      	movs	r2, r5
    4324:	1ac9      	subs	r1, r1, r3
    4326:	408a      	lsls	r2, r1
    4328:	1e55      	subs	r5, r2, #1
    432a:	41aa      	sbcs	r2, r5
    432c:	0035      	movs	r5, r6
    432e:	4315      	orrs	r5, r2
    4330:	e7db      	b.n	42ea <__aeabi_i2f+0x42>
    4332:	46c0      	nop			; (mov r8, r8)
    4334:	fbffffff 	.word	0xfbffffff

00004338 <__aeabi_dadd>:
    4338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    433a:	4656      	mov	r6, sl
    433c:	465f      	mov	r7, fp
    433e:	464d      	mov	r5, r9
    4340:	4644      	mov	r4, r8
    4342:	b4f0      	push	{r4, r5, r6, r7}
    4344:	000f      	movs	r7, r1
    4346:	0ffd      	lsrs	r5, r7, #31
    4348:	46aa      	mov	sl, r5
    434a:	0309      	lsls	r1, r1, #12
    434c:	007c      	lsls	r4, r7, #1
    434e:	002e      	movs	r6, r5
    4350:	005f      	lsls	r7, r3, #1
    4352:	0f45      	lsrs	r5, r0, #29
    4354:	0a49      	lsrs	r1, r1, #9
    4356:	0d7f      	lsrs	r7, r7, #21
    4358:	4329      	orrs	r1, r5
    435a:	00c5      	lsls	r5, r0, #3
    435c:	0318      	lsls	r0, r3, #12
    435e:	46bc      	mov	ip, r7
    4360:	0a40      	lsrs	r0, r0, #9
    4362:	0f57      	lsrs	r7, r2, #29
    4364:	0d64      	lsrs	r4, r4, #21
    4366:	0fdb      	lsrs	r3, r3, #31
    4368:	4338      	orrs	r0, r7
    436a:	00d2      	lsls	r2, r2, #3
    436c:	459a      	cmp	sl, r3
    436e:	d100      	bne.n	4372 <__aeabi_dadd+0x3a>
    4370:	e0aa      	b.n	44c8 <__aeabi_dadd+0x190>
    4372:	4666      	mov	r6, ip
    4374:	1ba6      	subs	r6, r4, r6
    4376:	2e00      	cmp	r6, #0
    4378:	dc00      	bgt.n	437c <__aeabi_dadd+0x44>
    437a:	e0ff      	b.n	457c <__aeabi_dadd+0x244>
    437c:	4663      	mov	r3, ip
    437e:	2b00      	cmp	r3, #0
    4380:	d139      	bne.n	43f6 <__aeabi_dadd+0xbe>
    4382:	0003      	movs	r3, r0
    4384:	4313      	orrs	r3, r2
    4386:	d000      	beq.n	438a <__aeabi_dadd+0x52>
    4388:	e0d9      	b.n	453e <__aeabi_dadd+0x206>
    438a:	076b      	lsls	r3, r5, #29
    438c:	d009      	beq.n	43a2 <__aeabi_dadd+0x6a>
    438e:	230f      	movs	r3, #15
    4390:	402b      	ands	r3, r5
    4392:	2b04      	cmp	r3, #4
    4394:	d005      	beq.n	43a2 <__aeabi_dadd+0x6a>
    4396:	1d2b      	adds	r3, r5, #4
    4398:	42ab      	cmp	r3, r5
    439a:	41ad      	sbcs	r5, r5
    439c:	426d      	negs	r5, r5
    439e:	1949      	adds	r1, r1, r5
    43a0:	001d      	movs	r5, r3
    43a2:	020b      	lsls	r3, r1, #8
    43a4:	d400      	bmi.n	43a8 <__aeabi_dadd+0x70>
    43a6:	e082      	b.n	44ae <__aeabi_dadd+0x176>
    43a8:	4bca      	ldr	r3, [pc, #808]	; (46d4 <__aeabi_dadd+0x39c>)
    43aa:	3401      	adds	r4, #1
    43ac:	429c      	cmp	r4, r3
    43ae:	d100      	bne.n	43b2 <__aeabi_dadd+0x7a>
    43b0:	e0fe      	b.n	45b0 <__aeabi_dadd+0x278>
    43b2:	000a      	movs	r2, r1
    43b4:	4656      	mov	r6, sl
    43b6:	4bc8      	ldr	r3, [pc, #800]	; (46d8 <__aeabi_dadd+0x3a0>)
    43b8:	08ed      	lsrs	r5, r5, #3
    43ba:	401a      	ands	r2, r3
    43bc:	0750      	lsls	r0, r2, #29
    43be:	0564      	lsls	r4, r4, #21
    43c0:	0252      	lsls	r2, r2, #9
    43c2:	4305      	orrs	r5, r0
    43c4:	0b12      	lsrs	r2, r2, #12
    43c6:	0d64      	lsrs	r4, r4, #21
    43c8:	2100      	movs	r1, #0
    43ca:	0312      	lsls	r2, r2, #12
    43cc:	0d0b      	lsrs	r3, r1, #20
    43ce:	051b      	lsls	r3, r3, #20
    43d0:	0564      	lsls	r4, r4, #21
    43d2:	0b12      	lsrs	r2, r2, #12
    43d4:	431a      	orrs	r2, r3
    43d6:	0863      	lsrs	r3, r4, #1
    43d8:	4cc0      	ldr	r4, [pc, #768]	; (46dc <__aeabi_dadd+0x3a4>)
    43da:	07f6      	lsls	r6, r6, #31
    43dc:	4014      	ands	r4, r2
    43de:	431c      	orrs	r4, r3
    43e0:	0064      	lsls	r4, r4, #1
    43e2:	0864      	lsrs	r4, r4, #1
    43e4:	4334      	orrs	r4, r6
    43e6:	0028      	movs	r0, r5
    43e8:	0021      	movs	r1, r4
    43ea:	bc3c      	pop	{r2, r3, r4, r5}
    43ec:	4690      	mov	r8, r2
    43ee:	4699      	mov	r9, r3
    43f0:	46a2      	mov	sl, r4
    43f2:	46ab      	mov	fp, r5
    43f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    43f6:	4bb7      	ldr	r3, [pc, #732]	; (46d4 <__aeabi_dadd+0x39c>)
    43f8:	429c      	cmp	r4, r3
    43fa:	d0c6      	beq.n	438a <__aeabi_dadd+0x52>
    43fc:	2380      	movs	r3, #128	; 0x80
    43fe:	041b      	lsls	r3, r3, #16
    4400:	4318      	orrs	r0, r3
    4402:	2e38      	cmp	r6, #56	; 0x38
    4404:	dd00      	ble.n	4408 <__aeabi_dadd+0xd0>
    4406:	e0eb      	b.n	45e0 <__aeabi_dadd+0x2a8>
    4408:	2e1f      	cmp	r6, #31
    440a:	dd00      	ble.n	440e <__aeabi_dadd+0xd6>
    440c:	e11e      	b.n	464c <__aeabi_dadd+0x314>
    440e:	2320      	movs	r3, #32
    4410:	1b9b      	subs	r3, r3, r6
    4412:	469c      	mov	ip, r3
    4414:	0003      	movs	r3, r0
    4416:	4667      	mov	r7, ip
    4418:	40bb      	lsls	r3, r7
    441a:	4698      	mov	r8, r3
    441c:	0013      	movs	r3, r2
    441e:	4647      	mov	r7, r8
    4420:	40f3      	lsrs	r3, r6
    4422:	433b      	orrs	r3, r7
    4424:	4667      	mov	r7, ip
    4426:	40ba      	lsls	r2, r7
    4428:	1e57      	subs	r7, r2, #1
    442a:	41ba      	sbcs	r2, r7
    442c:	4313      	orrs	r3, r2
    442e:	0002      	movs	r2, r0
    4430:	40f2      	lsrs	r2, r6
    4432:	1aeb      	subs	r3, r5, r3
    4434:	429d      	cmp	r5, r3
    4436:	41b6      	sbcs	r6, r6
    4438:	001d      	movs	r5, r3
    443a:	1a8a      	subs	r2, r1, r2
    443c:	4276      	negs	r6, r6
    443e:	1b91      	subs	r1, r2, r6
    4440:	020b      	lsls	r3, r1, #8
    4442:	d531      	bpl.n	44a8 <__aeabi_dadd+0x170>
    4444:	024a      	lsls	r2, r1, #9
    4446:	0a56      	lsrs	r6, r2, #9
    4448:	2e00      	cmp	r6, #0
    444a:	d100      	bne.n	444e <__aeabi_dadd+0x116>
    444c:	e0b4      	b.n	45b8 <__aeabi_dadd+0x280>
    444e:	0030      	movs	r0, r6
    4450:	f001 fecc 	bl	61ec <__clzsi2>
    4454:	0003      	movs	r3, r0
    4456:	3b08      	subs	r3, #8
    4458:	2b1f      	cmp	r3, #31
    445a:	dd00      	ble.n	445e <__aeabi_dadd+0x126>
    445c:	e0b5      	b.n	45ca <__aeabi_dadd+0x292>
    445e:	2220      	movs	r2, #32
    4460:	0029      	movs	r1, r5
    4462:	1ad2      	subs	r2, r2, r3
    4464:	40d1      	lsrs	r1, r2
    4466:	409e      	lsls	r6, r3
    4468:	000a      	movs	r2, r1
    446a:	409d      	lsls	r5, r3
    446c:	4332      	orrs	r2, r6
    446e:	429c      	cmp	r4, r3
    4470:	dd00      	ble.n	4474 <__aeabi_dadd+0x13c>
    4472:	e0b1      	b.n	45d8 <__aeabi_dadd+0x2a0>
    4474:	1b1c      	subs	r4, r3, r4
    4476:	1c63      	adds	r3, r4, #1
    4478:	2b1f      	cmp	r3, #31
    447a:	dd00      	ble.n	447e <__aeabi_dadd+0x146>
    447c:	e0d5      	b.n	462a <__aeabi_dadd+0x2f2>
    447e:	2120      	movs	r1, #32
    4480:	0014      	movs	r4, r2
    4482:	0028      	movs	r0, r5
    4484:	1ac9      	subs	r1, r1, r3
    4486:	408c      	lsls	r4, r1
    4488:	40d8      	lsrs	r0, r3
    448a:	408d      	lsls	r5, r1
    448c:	4304      	orrs	r4, r0
    448e:	40da      	lsrs	r2, r3
    4490:	1e68      	subs	r0, r5, #1
    4492:	4185      	sbcs	r5, r0
    4494:	0011      	movs	r1, r2
    4496:	4325      	orrs	r5, r4
    4498:	2400      	movs	r4, #0
    449a:	e776      	b.n	438a <__aeabi_dadd+0x52>
    449c:	4641      	mov	r1, r8
    449e:	4331      	orrs	r1, r6
    44a0:	d100      	bne.n	44a4 <__aeabi_dadd+0x16c>
    44a2:	e234      	b.n	490e <__aeabi_dadd+0x5d6>
    44a4:	0031      	movs	r1, r6
    44a6:	4645      	mov	r5, r8
    44a8:	076b      	lsls	r3, r5, #29
    44aa:	d000      	beq.n	44ae <__aeabi_dadd+0x176>
    44ac:	e76f      	b.n	438e <__aeabi_dadd+0x56>
    44ae:	4656      	mov	r6, sl
    44b0:	0748      	lsls	r0, r1, #29
    44b2:	08ed      	lsrs	r5, r5, #3
    44b4:	08c9      	lsrs	r1, r1, #3
    44b6:	4305      	orrs	r5, r0
    44b8:	4b86      	ldr	r3, [pc, #536]	; (46d4 <__aeabi_dadd+0x39c>)
    44ba:	429c      	cmp	r4, r3
    44bc:	d035      	beq.n	452a <__aeabi_dadd+0x1f2>
    44be:	030a      	lsls	r2, r1, #12
    44c0:	0564      	lsls	r4, r4, #21
    44c2:	0b12      	lsrs	r2, r2, #12
    44c4:	0d64      	lsrs	r4, r4, #21
    44c6:	e77f      	b.n	43c8 <__aeabi_dadd+0x90>
    44c8:	4663      	mov	r3, ip
    44ca:	1ae3      	subs	r3, r4, r3
    44cc:	469b      	mov	fp, r3
    44ce:	2b00      	cmp	r3, #0
    44d0:	dc00      	bgt.n	44d4 <__aeabi_dadd+0x19c>
    44d2:	e08b      	b.n	45ec <__aeabi_dadd+0x2b4>
    44d4:	4667      	mov	r7, ip
    44d6:	2f00      	cmp	r7, #0
    44d8:	d03c      	beq.n	4554 <__aeabi_dadd+0x21c>
    44da:	4f7e      	ldr	r7, [pc, #504]	; (46d4 <__aeabi_dadd+0x39c>)
    44dc:	42bc      	cmp	r4, r7
    44de:	d100      	bne.n	44e2 <__aeabi_dadd+0x1aa>
    44e0:	e753      	b.n	438a <__aeabi_dadd+0x52>
    44e2:	2780      	movs	r7, #128	; 0x80
    44e4:	043f      	lsls	r7, r7, #16
    44e6:	4338      	orrs	r0, r7
    44e8:	465b      	mov	r3, fp
    44ea:	2b38      	cmp	r3, #56	; 0x38
    44ec:	dc00      	bgt.n	44f0 <__aeabi_dadd+0x1b8>
    44ee:	e0f7      	b.n	46e0 <__aeabi_dadd+0x3a8>
    44f0:	4302      	orrs	r2, r0
    44f2:	1e50      	subs	r0, r2, #1
    44f4:	4182      	sbcs	r2, r0
    44f6:	2000      	movs	r0, #0
    44f8:	b2d2      	uxtb	r2, r2
    44fa:	1953      	adds	r3, r2, r5
    44fc:	1842      	adds	r2, r0, r1
    44fe:	42ab      	cmp	r3, r5
    4500:	4189      	sbcs	r1, r1
    4502:	001d      	movs	r5, r3
    4504:	4249      	negs	r1, r1
    4506:	1889      	adds	r1, r1, r2
    4508:	020b      	lsls	r3, r1, #8
    450a:	d5cd      	bpl.n	44a8 <__aeabi_dadd+0x170>
    450c:	4b71      	ldr	r3, [pc, #452]	; (46d4 <__aeabi_dadd+0x39c>)
    450e:	3401      	adds	r4, #1
    4510:	429c      	cmp	r4, r3
    4512:	d100      	bne.n	4516 <__aeabi_dadd+0x1de>
    4514:	e13d      	b.n	4792 <__aeabi_dadd+0x45a>
    4516:	2001      	movs	r0, #1
    4518:	4a6f      	ldr	r2, [pc, #444]	; (46d8 <__aeabi_dadd+0x3a0>)
    451a:	086b      	lsrs	r3, r5, #1
    451c:	400a      	ands	r2, r1
    451e:	4028      	ands	r0, r5
    4520:	4318      	orrs	r0, r3
    4522:	07d5      	lsls	r5, r2, #31
    4524:	4305      	orrs	r5, r0
    4526:	0851      	lsrs	r1, r2, #1
    4528:	e72f      	b.n	438a <__aeabi_dadd+0x52>
    452a:	002b      	movs	r3, r5
    452c:	430b      	orrs	r3, r1
    452e:	d100      	bne.n	4532 <__aeabi_dadd+0x1fa>
    4530:	e1cb      	b.n	48ca <__aeabi_dadd+0x592>
    4532:	2380      	movs	r3, #128	; 0x80
    4534:	031b      	lsls	r3, r3, #12
    4536:	430b      	orrs	r3, r1
    4538:	031a      	lsls	r2, r3, #12
    453a:	0b12      	lsrs	r2, r2, #12
    453c:	e744      	b.n	43c8 <__aeabi_dadd+0x90>
    453e:	3e01      	subs	r6, #1
    4540:	2e00      	cmp	r6, #0
    4542:	d16d      	bne.n	4620 <__aeabi_dadd+0x2e8>
    4544:	1aae      	subs	r6, r5, r2
    4546:	42b5      	cmp	r5, r6
    4548:	419b      	sbcs	r3, r3
    454a:	1a09      	subs	r1, r1, r0
    454c:	425b      	negs	r3, r3
    454e:	1ac9      	subs	r1, r1, r3
    4550:	0035      	movs	r5, r6
    4552:	e775      	b.n	4440 <__aeabi_dadd+0x108>
    4554:	0007      	movs	r7, r0
    4556:	4317      	orrs	r7, r2
    4558:	d100      	bne.n	455c <__aeabi_dadd+0x224>
    455a:	e716      	b.n	438a <__aeabi_dadd+0x52>
    455c:	2301      	movs	r3, #1
    455e:	425b      	negs	r3, r3
    4560:	469c      	mov	ip, r3
    4562:	44e3      	add	fp, ip
    4564:	465b      	mov	r3, fp
    4566:	2b00      	cmp	r3, #0
    4568:	d000      	beq.n	456c <__aeabi_dadd+0x234>
    456a:	e0e0      	b.n	472e <__aeabi_dadd+0x3f6>
    456c:	18aa      	adds	r2, r5, r2
    456e:	42aa      	cmp	r2, r5
    4570:	419b      	sbcs	r3, r3
    4572:	1809      	adds	r1, r1, r0
    4574:	425b      	negs	r3, r3
    4576:	1859      	adds	r1, r3, r1
    4578:	0015      	movs	r5, r2
    457a:	e7c5      	b.n	4508 <__aeabi_dadd+0x1d0>
    457c:	2e00      	cmp	r6, #0
    457e:	d175      	bne.n	466c <__aeabi_dadd+0x334>
    4580:	1c66      	adds	r6, r4, #1
    4582:	0576      	lsls	r6, r6, #21
    4584:	0d76      	lsrs	r6, r6, #21
    4586:	2e01      	cmp	r6, #1
    4588:	dc00      	bgt.n	458c <__aeabi_dadd+0x254>
    458a:	e0f3      	b.n	4774 <__aeabi_dadd+0x43c>
    458c:	1aae      	subs	r6, r5, r2
    458e:	46b0      	mov	r8, r6
    4590:	4545      	cmp	r5, r8
    4592:	41bf      	sbcs	r7, r7
    4594:	1a0e      	subs	r6, r1, r0
    4596:	427f      	negs	r7, r7
    4598:	1bf6      	subs	r6, r6, r7
    459a:	0237      	lsls	r7, r6, #8
    459c:	d400      	bmi.n	45a0 <__aeabi_dadd+0x268>
    459e:	e08f      	b.n	46c0 <__aeabi_dadd+0x388>
    45a0:	1b55      	subs	r5, r2, r5
    45a2:	42aa      	cmp	r2, r5
    45a4:	41b6      	sbcs	r6, r6
    45a6:	1a41      	subs	r1, r0, r1
    45a8:	4276      	negs	r6, r6
    45aa:	1b8e      	subs	r6, r1, r6
    45ac:	469a      	mov	sl, r3
    45ae:	e74b      	b.n	4448 <__aeabi_dadd+0x110>
    45b0:	4656      	mov	r6, sl
    45b2:	2200      	movs	r2, #0
    45b4:	2500      	movs	r5, #0
    45b6:	e707      	b.n	43c8 <__aeabi_dadd+0x90>
    45b8:	0028      	movs	r0, r5
    45ba:	f001 fe17 	bl	61ec <__clzsi2>
    45be:	3020      	adds	r0, #32
    45c0:	0003      	movs	r3, r0
    45c2:	3b08      	subs	r3, #8
    45c4:	2b1f      	cmp	r3, #31
    45c6:	dc00      	bgt.n	45ca <__aeabi_dadd+0x292>
    45c8:	e749      	b.n	445e <__aeabi_dadd+0x126>
    45ca:	002a      	movs	r2, r5
    45cc:	3828      	subs	r0, #40	; 0x28
    45ce:	4082      	lsls	r2, r0
    45d0:	2500      	movs	r5, #0
    45d2:	429c      	cmp	r4, r3
    45d4:	dc00      	bgt.n	45d8 <__aeabi_dadd+0x2a0>
    45d6:	e74d      	b.n	4474 <__aeabi_dadd+0x13c>
    45d8:	493f      	ldr	r1, [pc, #252]	; (46d8 <__aeabi_dadd+0x3a0>)
    45da:	1ae4      	subs	r4, r4, r3
    45dc:	4011      	ands	r1, r2
    45de:	e6d4      	b.n	438a <__aeabi_dadd+0x52>
    45e0:	4302      	orrs	r2, r0
    45e2:	1e50      	subs	r0, r2, #1
    45e4:	4182      	sbcs	r2, r0
    45e6:	b2d3      	uxtb	r3, r2
    45e8:	2200      	movs	r2, #0
    45ea:	e722      	b.n	4432 <__aeabi_dadd+0xfa>
    45ec:	2b00      	cmp	r3, #0
    45ee:	d000      	beq.n	45f2 <__aeabi_dadd+0x2ba>
    45f0:	e0f3      	b.n	47da <__aeabi_dadd+0x4a2>
    45f2:	1c63      	adds	r3, r4, #1
    45f4:	469c      	mov	ip, r3
    45f6:	055b      	lsls	r3, r3, #21
    45f8:	0d5b      	lsrs	r3, r3, #21
    45fa:	2b01      	cmp	r3, #1
    45fc:	dc00      	bgt.n	4600 <__aeabi_dadd+0x2c8>
    45fe:	e09f      	b.n	4740 <__aeabi_dadd+0x408>
    4600:	4b34      	ldr	r3, [pc, #208]	; (46d4 <__aeabi_dadd+0x39c>)
    4602:	459c      	cmp	ip, r3
    4604:	d100      	bne.n	4608 <__aeabi_dadd+0x2d0>
    4606:	e0c3      	b.n	4790 <__aeabi_dadd+0x458>
    4608:	18aa      	adds	r2, r5, r2
    460a:	1809      	adds	r1, r1, r0
    460c:	42aa      	cmp	r2, r5
    460e:	4180      	sbcs	r0, r0
    4610:	4240      	negs	r0, r0
    4612:	1841      	adds	r1, r0, r1
    4614:	07cd      	lsls	r5, r1, #31
    4616:	0852      	lsrs	r2, r2, #1
    4618:	4315      	orrs	r5, r2
    461a:	0849      	lsrs	r1, r1, #1
    461c:	4664      	mov	r4, ip
    461e:	e6b4      	b.n	438a <__aeabi_dadd+0x52>
    4620:	4b2c      	ldr	r3, [pc, #176]	; (46d4 <__aeabi_dadd+0x39c>)
    4622:	429c      	cmp	r4, r3
    4624:	d000      	beq.n	4628 <__aeabi_dadd+0x2f0>
    4626:	e6ec      	b.n	4402 <__aeabi_dadd+0xca>
    4628:	e6af      	b.n	438a <__aeabi_dadd+0x52>
    462a:	0011      	movs	r1, r2
    462c:	3c1f      	subs	r4, #31
    462e:	40e1      	lsrs	r1, r4
    4630:	000c      	movs	r4, r1
    4632:	2b20      	cmp	r3, #32
    4634:	d100      	bne.n	4638 <__aeabi_dadd+0x300>
    4636:	e07f      	b.n	4738 <__aeabi_dadd+0x400>
    4638:	2140      	movs	r1, #64	; 0x40
    463a:	1acb      	subs	r3, r1, r3
    463c:	409a      	lsls	r2, r3
    463e:	4315      	orrs	r5, r2
    4640:	1e6a      	subs	r2, r5, #1
    4642:	4195      	sbcs	r5, r2
    4644:	2100      	movs	r1, #0
    4646:	4325      	orrs	r5, r4
    4648:	2400      	movs	r4, #0
    464a:	e72d      	b.n	44a8 <__aeabi_dadd+0x170>
    464c:	0033      	movs	r3, r6
    464e:	0007      	movs	r7, r0
    4650:	3b20      	subs	r3, #32
    4652:	40df      	lsrs	r7, r3
    4654:	003b      	movs	r3, r7
    4656:	2e20      	cmp	r6, #32
    4658:	d070      	beq.n	473c <__aeabi_dadd+0x404>
    465a:	2740      	movs	r7, #64	; 0x40
    465c:	1bbe      	subs	r6, r7, r6
    465e:	40b0      	lsls	r0, r6
    4660:	4302      	orrs	r2, r0
    4662:	1e50      	subs	r0, r2, #1
    4664:	4182      	sbcs	r2, r0
    4666:	4313      	orrs	r3, r2
    4668:	2200      	movs	r2, #0
    466a:	e6e2      	b.n	4432 <__aeabi_dadd+0xfa>
    466c:	2c00      	cmp	r4, #0
    466e:	d04f      	beq.n	4710 <__aeabi_dadd+0x3d8>
    4670:	4c18      	ldr	r4, [pc, #96]	; (46d4 <__aeabi_dadd+0x39c>)
    4672:	45a4      	cmp	ip, r4
    4674:	d100      	bne.n	4678 <__aeabi_dadd+0x340>
    4676:	e0ab      	b.n	47d0 <__aeabi_dadd+0x498>
    4678:	2480      	movs	r4, #128	; 0x80
    467a:	0424      	lsls	r4, r4, #16
    467c:	4276      	negs	r6, r6
    467e:	4321      	orrs	r1, r4
    4680:	2e38      	cmp	r6, #56	; 0x38
    4682:	dd00      	ble.n	4686 <__aeabi_dadd+0x34e>
    4684:	e0df      	b.n	4846 <__aeabi_dadd+0x50e>
    4686:	2e1f      	cmp	r6, #31
    4688:	dd00      	ble.n	468c <__aeabi_dadd+0x354>
    468a:	e143      	b.n	4914 <__aeabi_dadd+0x5dc>
    468c:	2720      	movs	r7, #32
    468e:	1bbc      	subs	r4, r7, r6
    4690:	46a1      	mov	r9, r4
    4692:	000c      	movs	r4, r1
    4694:	464f      	mov	r7, r9
    4696:	40bc      	lsls	r4, r7
    4698:	46a0      	mov	r8, r4
    469a:	002c      	movs	r4, r5
    469c:	4647      	mov	r7, r8
    469e:	40f4      	lsrs	r4, r6
    46a0:	433c      	orrs	r4, r7
    46a2:	464f      	mov	r7, r9
    46a4:	40bd      	lsls	r5, r7
    46a6:	1e6f      	subs	r7, r5, #1
    46a8:	41bd      	sbcs	r5, r7
    46aa:	40f1      	lsrs	r1, r6
    46ac:	432c      	orrs	r4, r5
    46ae:	1b15      	subs	r5, r2, r4
    46b0:	42aa      	cmp	r2, r5
    46b2:	4192      	sbcs	r2, r2
    46b4:	1a41      	subs	r1, r0, r1
    46b6:	4252      	negs	r2, r2
    46b8:	1a89      	subs	r1, r1, r2
    46ba:	4664      	mov	r4, ip
    46bc:	469a      	mov	sl, r3
    46be:	e6bf      	b.n	4440 <__aeabi_dadd+0x108>
    46c0:	4641      	mov	r1, r8
    46c2:	4645      	mov	r5, r8
    46c4:	4331      	orrs	r1, r6
    46c6:	d000      	beq.n	46ca <__aeabi_dadd+0x392>
    46c8:	e6be      	b.n	4448 <__aeabi_dadd+0x110>
    46ca:	2600      	movs	r6, #0
    46cc:	2400      	movs	r4, #0
    46ce:	2500      	movs	r5, #0
    46d0:	e6f2      	b.n	44b8 <__aeabi_dadd+0x180>
    46d2:	46c0      	nop			; (mov r8, r8)
    46d4:	000007ff 	.word	0x000007ff
    46d8:	ff7fffff 	.word	0xff7fffff
    46dc:	800fffff 	.word	0x800fffff
    46e0:	2b1f      	cmp	r3, #31
    46e2:	dc59      	bgt.n	4798 <__aeabi_dadd+0x460>
    46e4:	2720      	movs	r7, #32
    46e6:	1aff      	subs	r7, r7, r3
    46e8:	46bc      	mov	ip, r7
    46ea:	0007      	movs	r7, r0
    46ec:	4663      	mov	r3, ip
    46ee:	409f      	lsls	r7, r3
    46f0:	465b      	mov	r3, fp
    46f2:	46b9      	mov	r9, r7
    46f4:	0017      	movs	r7, r2
    46f6:	40df      	lsrs	r7, r3
    46f8:	46b8      	mov	r8, r7
    46fa:	464f      	mov	r7, r9
    46fc:	4643      	mov	r3, r8
    46fe:	431f      	orrs	r7, r3
    4700:	4663      	mov	r3, ip
    4702:	409a      	lsls	r2, r3
    4704:	1e53      	subs	r3, r2, #1
    4706:	419a      	sbcs	r2, r3
    4708:	465b      	mov	r3, fp
    470a:	433a      	orrs	r2, r7
    470c:	40d8      	lsrs	r0, r3
    470e:	e6f4      	b.n	44fa <__aeabi_dadd+0x1c2>
    4710:	000c      	movs	r4, r1
    4712:	432c      	orrs	r4, r5
    4714:	d05c      	beq.n	47d0 <__aeabi_dadd+0x498>
    4716:	43f6      	mvns	r6, r6
    4718:	2e00      	cmp	r6, #0
    471a:	d155      	bne.n	47c8 <__aeabi_dadd+0x490>
    471c:	1b55      	subs	r5, r2, r5
    471e:	42aa      	cmp	r2, r5
    4720:	41a4      	sbcs	r4, r4
    4722:	1a41      	subs	r1, r0, r1
    4724:	4264      	negs	r4, r4
    4726:	1b09      	subs	r1, r1, r4
    4728:	469a      	mov	sl, r3
    472a:	4664      	mov	r4, ip
    472c:	e688      	b.n	4440 <__aeabi_dadd+0x108>
    472e:	4f96      	ldr	r7, [pc, #600]	; (4988 <__aeabi_dadd+0x650>)
    4730:	42bc      	cmp	r4, r7
    4732:	d000      	beq.n	4736 <__aeabi_dadd+0x3fe>
    4734:	e6d8      	b.n	44e8 <__aeabi_dadd+0x1b0>
    4736:	e628      	b.n	438a <__aeabi_dadd+0x52>
    4738:	2200      	movs	r2, #0
    473a:	e780      	b.n	463e <__aeabi_dadd+0x306>
    473c:	2000      	movs	r0, #0
    473e:	e78f      	b.n	4660 <__aeabi_dadd+0x328>
    4740:	000b      	movs	r3, r1
    4742:	432b      	orrs	r3, r5
    4744:	2c00      	cmp	r4, #0
    4746:	d000      	beq.n	474a <__aeabi_dadd+0x412>
    4748:	e0c2      	b.n	48d0 <__aeabi_dadd+0x598>
    474a:	2b00      	cmp	r3, #0
    474c:	d100      	bne.n	4750 <__aeabi_dadd+0x418>
    474e:	e101      	b.n	4954 <__aeabi_dadd+0x61c>
    4750:	0003      	movs	r3, r0
    4752:	4313      	orrs	r3, r2
    4754:	d100      	bne.n	4758 <__aeabi_dadd+0x420>
    4756:	e618      	b.n	438a <__aeabi_dadd+0x52>
    4758:	18ab      	adds	r3, r5, r2
    475a:	42ab      	cmp	r3, r5
    475c:	41b6      	sbcs	r6, r6
    475e:	1809      	adds	r1, r1, r0
    4760:	4276      	negs	r6, r6
    4762:	1871      	adds	r1, r6, r1
    4764:	020a      	lsls	r2, r1, #8
    4766:	d400      	bmi.n	476a <__aeabi_dadd+0x432>
    4768:	e109      	b.n	497e <__aeabi_dadd+0x646>
    476a:	4a88      	ldr	r2, [pc, #544]	; (498c <__aeabi_dadd+0x654>)
    476c:	001d      	movs	r5, r3
    476e:	4011      	ands	r1, r2
    4770:	4664      	mov	r4, ip
    4772:	e60a      	b.n	438a <__aeabi_dadd+0x52>
    4774:	2c00      	cmp	r4, #0
    4776:	d15b      	bne.n	4830 <__aeabi_dadd+0x4f8>
    4778:	000e      	movs	r6, r1
    477a:	432e      	orrs	r6, r5
    477c:	d000      	beq.n	4780 <__aeabi_dadd+0x448>
    477e:	e08a      	b.n	4896 <__aeabi_dadd+0x55e>
    4780:	0001      	movs	r1, r0
    4782:	4311      	orrs	r1, r2
    4784:	d100      	bne.n	4788 <__aeabi_dadd+0x450>
    4786:	e0c2      	b.n	490e <__aeabi_dadd+0x5d6>
    4788:	0001      	movs	r1, r0
    478a:	0015      	movs	r5, r2
    478c:	469a      	mov	sl, r3
    478e:	e5fc      	b.n	438a <__aeabi_dadd+0x52>
    4790:	4664      	mov	r4, ip
    4792:	2100      	movs	r1, #0
    4794:	2500      	movs	r5, #0
    4796:	e68f      	b.n	44b8 <__aeabi_dadd+0x180>
    4798:	2320      	movs	r3, #32
    479a:	425b      	negs	r3, r3
    479c:	469c      	mov	ip, r3
    479e:	44dc      	add	ip, fp
    47a0:	4663      	mov	r3, ip
    47a2:	0007      	movs	r7, r0
    47a4:	40df      	lsrs	r7, r3
    47a6:	465b      	mov	r3, fp
    47a8:	46bc      	mov	ip, r7
    47aa:	2b20      	cmp	r3, #32
    47ac:	d100      	bne.n	47b0 <__aeabi_dadd+0x478>
    47ae:	e0ac      	b.n	490a <__aeabi_dadd+0x5d2>
    47b0:	2340      	movs	r3, #64	; 0x40
    47b2:	465f      	mov	r7, fp
    47b4:	1bdb      	subs	r3, r3, r7
    47b6:	4098      	lsls	r0, r3
    47b8:	4302      	orrs	r2, r0
    47ba:	1e50      	subs	r0, r2, #1
    47bc:	4182      	sbcs	r2, r0
    47be:	4663      	mov	r3, ip
    47c0:	4313      	orrs	r3, r2
    47c2:	001a      	movs	r2, r3
    47c4:	2000      	movs	r0, #0
    47c6:	e698      	b.n	44fa <__aeabi_dadd+0x1c2>
    47c8:	4c6f      	ldr	r4, [pc, #444]	; (4988 <__aeabi_dadd+0x650>)
    47ca:	45a4      	cmp	ip, r4
    47cc:	d000      	beq.n	47d0 <__aeabi_dadd+0x498>
    47ce:	e757      	b.n	4680 <__aeabi_dadd+0x348>
    47d0:	0001      	movs	r1, r0
    47d2:	0015      	movs	r5, r2
    47d4:	4664      	mov	r4, ip
    47d6:	469a      	mov	sl, r3
    47d8:	e5d7      	b.n	438a <__aeabi_dadd+0x52>
    47da:	2c00      	cmp	r4, #0
    47dc:	d139      	bne.n	4852 <__aeabi_dadd+0x51a>
    47de:	000c      	movs	r4, r1
    47e0:	432c      	orrs	r4, r5
    47e2:	d06e      	beq.n	48c2 <__aeabi_dadd+0x58a>
    47e4:	43db      	mvns	r3, r3
    47e6:	2b00      	cmp	r3, #0
    47e8:	d01a      	beq.n	4820 <__aeabi_dadd+0x4e8>
    47ea:	4c67      	ldr	r4, [pc, #412]	; (4988 <__aeabi_dadd+0x650>)
    47ec:	45a4      	cmp	ip, r4
    47ee:	d068      	beq.n	48c2 <__aeabi_dadd+0x58a>
    47f0:	2b38      	cmp	r3, #56	; 0x38
    47f2:	dd00      	ble.n	47f6 <__aeabi_dadd+0x4be>
    47f4:	e0a4      	b.n	4940 <__aeabi_dadd+0x608>
    47f6:	2b1f      	cmp	r3, #31
    47f8:	dd00      	ble.n	47fc <__aeabi_dadd+0x4c4>
    47fa:	e0ae      	b.n	495a <__aeabi_dadd+0x622>
    47fc:	2420      	movs	r4, #32
    47fe:	000f      	movs	r7, r1
    4800:	1ae4      	subs	r4, r4, r3
    4802:	40a7      	lsls	r7, r4
    4804:	46b9      	mov	r9, r7
    4806:	002f      	movs	r7, r5
    4808:	40df      	lsrs	r7, r3
    480a:	46b8      	mov	r8, r7
    480c:	46a3      	mov	fp, r4
    480e:	464f      	mov	r7, r9
    4810:	4644      	mov	r4, r8
    4812:	4327      	orrs	r7, r4
    4814:	465c      	mov	r4, fp
    4816:	40a5      	lsls	r5, r4
    4818:	1e6c      	subs	r4, r5, #1
    481a:	41a5      	sbcs	r5, r4
    481c:	40d9      	lsrs	r1, r3
    481e:	433d      	orrs	r5, r7
    4820:	18ad      	adds	r5, r5, r2
    4822:	4295      	cmp	r5, r2
    4824:	419b      	sbcs	r3, r3
    4826:	1809      	adds	r1, r1, r0
    4828:	425b      	negs	r3, r3
    482a:	1859      	adds	r1, r3, r1
    482c:	4664      	mov	r4, ip
    482e:	e66b      	b.n	4508 <__aeabi_dadd+0x1d0>
    4830:	000c      	movs	r4, r1
    4832:	432c      	orrs	r4, r5
    4834:	d115      	bne.n	4862 <__aeabi_dadd+0x52a>
    4836:	0001      	movs	r1, r0
    4838:	4311      	orrs	r1, r2
    483a:	d07b      	beq.n	4934 <__aeabi_dadd+0x5fc>
    483c:	0001      	movs	r1, r0
    483e:	0015      	movs	r5, r2
    4840:	469a      	mov	sl, r3
    4842:	4c51      	ldr	r4, [pc, #324]	; (4988 <__aeabi_dadd+0x650>)
    4844:	e5a1      	b.n	438a <__aeabi_dadd+0x52>
    4846:	430d      	orrs	r5, r1
    4848:	1e69      	subs	r1, r5, #1
    484a:	418d      	sbcs	r5, r1
    484c:	2100      	movs	r1, #0
    484e:	b2ec      	uxtb	r4, r5
    4850:	e72d      	b.n	46ae <__aeabi_dadd+0x376>
    4852:	4c4d      	ldr	r4, [pc, #308]	; (4988 <__aeabi_dadd+0x650>)
    4854:	45a4      	cmp	ip, r4
    4856:	d034      	beq.n	48c2 <__aeabi_dadd+0x58a>
    4858:	2480      	movs	r4, #128	; 0x80
    485a:	0424      	lsls	r4, r4, #16
    485c:	425b      	negs	r3, r3
    485e:	4321      	orrs	r1, r4
    4860:	e7c6      	b.n	47f0 <__aeabi_dadd+0x4b8>
    4862:	0004      	movs	r4, r0
    4864:	4314      	orrs	r4, r2
    4866:	d04e      	beq.n	4906 <__aeabi_dadd+0x5ce>
    4868:	08ed      	lsrs	r5, r5, #3
    486a:	074c      	lsls	r4, r1, #29
    486c:	432c      	orrs	r4, r5
    486e:	2580      	movs	r5, #128	; 0x80
    4870:	08c9      	lsrs	r1, r1, #3
    4872:	032d      	lsls	r5, r5, #12
    4874:	4229      	tst	r1, r5
    4876:	d008      	beq.n	488a <__aeabi_dadd+0x552>
    4878:	08c6      	lsrs	r6, r0, #3
    487a:	422e      	tst	r6, r5
    487c:	d105      	bne.n	488a <__aeabi_dadd+0x552>
    487e:	08d2      	lsrs	r2, r2, #3
    4880:	0741      	lsls	r1, r0, #29
    4882:	4311      	orrs	r1, r2
    4884:	000c      	movs	r4, r1
    4886:	469a      	mov	sl, r3
    4888:	0031      	movs	r1, r6
    488a:	0f62      	lsrs	r2, r4, #29
    488c:	00c9      	lsls	r1, r1, #3
    488e:	00e5      	lsls	r5, r4, #3
    4890:	4311      	orrs	r1, r2
    4892:	4c3d      	ldr	r4, [pc, #244]	; (4988 <__aeabi_dadd+0x650>)
    4894:	e579      	b.n	438a <__aeabi_dadd+0x52>
    4896:	0006      	movs	r6, r0
    4898:	4316      	orrs	r6, r2
    489a:	d100      	bne.n	489e <__aeabi_dadd+0x566>
    489c:	e575      	b.n	438a <__aeabi_dadd+0x52>
    489e:	1aae      	subs	r6, r5, r2
    48a0:	46b0      	mov	r8, r6
    48a2:	4545      	cmp	r5, r8
    48a4:	41bf      	sbcs	r7, r7
    48a6:	1a0e      	subs	r6, r1, r0
    48a8:	427f      	negs	r7, r7
    48aa:	1bf6      	subs	r6, r6, r7
    48ac:	0237      	lsls	r7, r6, #8
    48ae:	d400      	bmi.n	48b2 <__aeabi_dadd+0x57a>
    48b0:	e5f4      	b.n	449c <__aeabi_dadd+0x164>
    48b2:	1b55      	subs	r5, r2, r5
    48b4:	42aa      	cmp	r2, r5
    48b6:	41b6      	sbcs	r6, r6
    48b8:	1a41      	subs	r1, r0, r1
    48ba:	4276      	negs	r6, r6
    48bc:	1b89      	subs	r1, r1, r6
    48be:	469a      	mov	sl, r3
    48c0:	e563      	b.n	438a <__aeabi_dadd+0x52>
    48c2:	0001      	movs	r1, r0
    48c4:	0015      	movs	r5, r2
    48c6:	4664      	mov	r4, ip
    48c8:	e55f      	b.n	438a <__aeabi_dadd+0x52>
    48ca:	2200      	movs	r2, #0
    48cc:	2500      	movs	r5, #0
    48ce:	e57b      	b.n	43c8 <__aeabi_dadd+0x90>
    48d0:	2b00      	cmp	r3, #0
    48d2:	d03b      	beq.n	494c <__aeabi_dadd+0x614>
    48d4:	0003      	movs	r3, r0
    48d6:	4313      	orrs	r3, r2
    48d8:	d015      	beq.n	4906 <__aeabi_dadd+0x5ce>
    48da:	08ed      	lsrs	r5, r5, #3
    48dc:	074b      	lsls	r3, r1, #29
    48de:	432b      	orrs	r3, r5
    48e0:	2580      	movs	r5, #128	; 0x80
    48e2:	08c9      	lsrs	r1, r1, #3
    48e4:	032d      	lsls	r5, r5, #12
    48e6:	4229      	tst	r1, r5
    48e8:	d007      	beq.n	48fa <__aeabi_dadd+0x5c2>
    48ea:	08c4      	lsrs	r4, r0, #3
    48ec:	422c      	tst	r4, r5
    48ee:	d104      	bne.n	48fa <__aeabi_dadd+0x5c2>
    48f0:	0741      	lsls	r1, r0, #29
    48f2:	000b      	movs	r3, r1
    48f4:	0021      	movs	r1, r4
    48f6:	08d2      	lsrs	r2, r2, #3
    48f8:	4313      	orrs	r3, r2
    48fa:	00c9      	lsls	r1, r1, #3
    48fc:	0f5a      	lsrs	r2, r3, #29
    48fe:	4311      	orrs	r1, r2
    4900:	00dd      	lsls	r5, r3, #3
    4902:	4c21      	ldr	r4, [pc, #132]	; (4988 <__aeabi_dadd+0x650>)
    4904:	e541      	b.n	438a <__aeabi_dadd+0x52>
    4906:	4c20      	ldr	r4, [pc, #128]	; (4988 <__aeabi_dadd+0x650>)
    4908:	e53f      	b.n	438a <__aeabi_dadd+0x52>
    490a:	2000      	movs	r0, #0
    490c:	e754      	b.n	47b8 <__aeabi_dadd+0x480>
    490e:	2600      	movs	r6, #0
    4910:	2500      	movs	r5, #0
    4912:	e5d1      	b.n	44b8 <__aeabi_dadd+0x180>
    4914:	0034      	movs	r4, r6
    4916:	000f      	movs	r7, r1
    4918:	3c20      	subs	r4, #32
    491a:	40e7      	lsrs	r7, r4
    491c:	003c      	movs	r4, r7
    491e:	2e20      	cmp	r6, #32
    4920:	d02b      	beq.n	497a <__aeabi_dadd+0x642>
    4922:	2740      	movs	r7, #64	; 0x40
    4924:	1bbe      	subs	r6, r7, r6
    4926:	40b1      	lsls	r1, r6
    4928:	430d      	orrs	r5, r1
    492a:	1e69      	subs	r1, r5, #1
    492c:	418d      	sbcs	r5, r1
    492e:	2100      	movs	r1, #0
    4930:	432c      	orrs	r4, r5
    4932:	e6bc      	b.n	46ae <__aeabi_dadd+0x376>
    4934:	2180      	movs	r1, #128	; 0x80
    4936:	2600      	movs	r6, #0
    4938:	0309      	lsls	r1, r1, #12
    493a:	4c13      	ldr	r4, [pc, #76]	; (4988 <__aeabi_dadd+0x650>)
    493c:	2500      	movs	r5, #0
    493e:	e5bb      	b.n	44b8 <__aeabi_dadd+0x180>
    4940:	430d      	orrs	r5, r1
    4942:	1e69      	subs	r1, r5, #1
    4944:	418d      	sbcs	r5, r1
    4946:	2100      	movs	r1, #0
    4948:	b2ed      	uxtb	r5, r5
    494a:	e769      	b.n	4820 <__aeabi_dadd+0x4e8>
    494c:	0001      	movs	r1, r0
    494e:	0015      	movs	r5, r2
    4950:	4c0d      	ldr	r4, [pc, #52]	; (4988 <__aeabi_dadd+0x650>)
    4952:	e51a      	b.n	438a <__aeabi_dadd+0x52>
    4954:	0001      	movs	r1, r0
    4956:	0015      	movs	r5, r2
    4958:	e517      	b.n	438a <__aeabi_dadd+0x52>
    495a:	001c      	movs	r4, r3
    495c:	000f      	movs	r7, r1
    495e:	3c20      	subs	r4, #32
    4960:	40e7      	lsrs	r7, r4
    4962:	003c      	movs	r4, r7
    4964:	2b20      	cmp	r3, #32
    4966:	d00c      	beq.n	4982 <__aeabi_dadd+0x64a>
    4968:	2740      	movs	r7, #64	; 0x40
    496a:	1afb      	subs	r3, r7, r3
    496c:	4099      	lsls	r1, r3
    496e:	430d      	orrs	r5, r1
    4970:	1e69      	subs	r1, r5, #1
    4972:	418d      	sbcs	r5, r1
    4974:	2100      	movs	r1, #0
    4976:	4325      	orrs	r5, r4
    4978:	e752      	b.n	4820 <__aeabi_dadd+0x4e8>
    497a:	2100      	movs	r1, #0
    497c:	e7d4      	b.n	4928 <__aeabi_dadd+0x5f0>
    497e:	001d      	movs	r5, r3
    4980:	e592      	b.n	44a8 <__aeabi_dadd+0x170>
    4982:	2100      	movs	r1, #0
    4984:	e7f3      	b.n	496e <__aeabi_dadd+0x636>
    4986:	46c0      	nop			; (mov r8, r8)
    4988:	000007ff 	.word	0x000007ff
    498c:	ff7fffff 	.word	0xff7fffff

00004990 <__aeabi_ddiv>:
    4990:	b5f0      	push	{r4, r5, r6, r7, lr}
    4992:	4656      	mov	r6, sl
    4994:	464d      	mov	r5, r9
    4996:	4644      	mov	r4, r8
    4998:	465f      	mov	r7, fp
    499a:	b4f0      	push	{r4, r5, r6, r7}
    499c:	001d      	movs	r5, r3
    499e:	030e      	lsls	r6, r1, #12
    49a0:	004c      	lsls	r4, r1, #1
    49a2:	0fcb      	lsrs	r3, r1, #31
    49a4:	b087      	sub	sp, #28
    49a6:	0007      	movs	r7, r0
    49a8:	4692      	mov	sl, r2
    49aa:	4681      	mov	r9, r0
    49ac:	0b36      	lsrs	r6, r6, #12
    49ae:	0d64      	lsrs	r4, r4, #21
    49b0:	4698      	mov	r8, r3
    49b2:	d06a      	beq.n	4a8a <__aeabi_ddiv+0xfa>
    49b4:	4b6d      	ldr	r3, [pc, #436]	; (4b6c <__aeabi_ddiv+0x1dc>)
    49b6:	429c      	cmp	r4, r3
    49b8:	d035      	beq.n	4a26 <__aeabi_ddiv+0x96>
    49ba:	2280      	movs	r2, #128	; 0x80
    49bc:	0f43      	lsrs	r3, r0, #29
    49be:	0412      	lsls	r2, r2, #16
    49c0:	4313      	orrs	r3, r2
    49c2:	00f6      	lsls	r6, r6, #3
    49c4:	431e      	orrs	r6, r3
    49c6:	00c3      	lsls	r3, r0, #3
    49c8:	4699      	mov	r9, r3
    49ca:	4b69      	ldr	r3, [pc, #420]	; (4b70 <__aeabi_ddiv+0x1e0>)
    49cc:	2700      	movs	r7, #0
    49ce:	469c      	mov	ip, r3
    49d0:	2300      	movs	r3, #0
    49d2:	4464      	add	r4, ip
    49d4:	9302      	str	r3, [sp, #8]
    49d6:	032b      	lsls	r3, r5, #12
    49d8:	0068      	lsls	r0, r5, #1
    49da:	0b1b      	lsrs	r3, r3, #12
    49dc:	0fed      	lsrs	r5, r5, #31
    49de:	4651      	mov	r1, sl
    49e0:	469b      	mov	fp, r3
    49e2:	0d40      	lsrs	r0, r0, #21
    49e4:	9500      	str	r5, [sp, #0]
    49e6:	d100      	bne.n	49ea <__aeabi_ddiv+0x5a>
    49e8:	e078      	b.n	4adc <__aeabi_ddiv+0x14c>
    49ea:	4b60      	ldr	r3, [pc, #384]	; (4b6c <__aeabi_ddiv+0x1dc>)
    49ec:	4298      	cmp	r0, r3
    49ee:	d06c      	beq.n	4aca <__aeabi_ddiv+0x13a>
    49f0:	465b      	mov	r3, fp
    49f2:	00da      	lsls	r2, r3, #3
    49f4:	0f4b      	lsrs	r3, r1, #29
    49f6:	2180      	movs	r1, #128	; 0x80
    49f8:	0409      	lsls	r1, r1, #16
    49fa:	430b      	orrs	r3, r1
    49fc:	4313      	orrs	r3, r2
    49fe:	469b      	mov	fp, r3
    4a00:	4653      	mov	r3, sl
    4a02:	00d9      	lsls	r1, r3, #3
    4a04:	4b5a      	ldr	r3, [pc, #360]	; (4b70 <__aeabi_ddiv+0x1e0>)
    4a06:	469c      	mov	ip, r3
    4a08:	2300      	movs	r3, #0
    4a0a:	4460      	add	r0, ip
    4a0c:	4642      	mov	r2, r8
    4a0e:	1a20      	subs	r0, r4, r0
    4a10:	406a      	eors	r2, r5
    4a12:	4692      	mov	sl, r2
    4a14:	9001      	str	r0, [sp, #4]
    4a16:	431f      	orrs	r7, r3
    4a18:	2f0f      	cmp	r7, #15
    4a1a:	d900      	bls.n	4a1e <__aeabi_ddiv+0x8e>
    4a1c:	e0b0      	b.n	4b80 <__aeabi_ddiv+0x1f0>
    4a1e:	4855      	ldr	r0, [pc, #340]	; (4b74 <__aeabi_ddiv+0x1e4>)
    4a20:	00bf      	lsls	r7, r7, #2
    4a22:	59c0      	ldr	r0, [r0, r7]
    4a24:	4687      	mov	pc, r0
    4a26:	4337      	orrs	r7, r6
    4a28:	d000      	beq.n	4a2c <__aeabi_ddiv+0x9c>
    4a2a:	e088      	b.n	4b3e <__aeabi_ddiv+0x1ae>
    4a2c:	2300      	movs	r3, #0
    4a2e:	4699      	mov	r9, r3
    4a30:	3302      	adds	r3, #2
    4a32:	2708      	movs	r7, #8
    4a34:	2600      	movs	r6, #0
    4a36:	9302      	str	r3, [sp, #8]
    4a38:	e7cd      	b.n	49d6 <__aeabi_ddiv+0x46>
    4a3a:	4643      	mov	r3, r8
    4a3c:	46b3      	mov	fp, r6
    4a3e:	4649      	mov	r1, r9
    4a40:	9300      	str	r3, [sp, #0]
    4a42:	9b02      	ldr	r3, [sp, #8]
    4a44:	9a00      	ldr	r2, [sp, #0]
    4a46:	4692      	mov	sl, r2
    4a48:	2b02      	cmp	r3, #2
    4a4a:	d000      	beq.n	4a4e <__aeabi_ddiv+0xbe>
    4a4c:	e1bf      	b.n	4dce <__aeabi_ddiv+0x43e>
    4a4e:	2100      	movs	r1, #0
    4a50:	4653      	mov	r3, sl
    4a52:	2201      	movs	r2, #1
    4a54:	2600      	movs	r6, #0
    4a56:	4689      	mov	r9, r1
    4a58:	401a      	ands	r2, r3
    4a5a:	4b44      	ldr	r3, [pc, #272]	; (4b6c <__aeabi_ddiv+0x1dc>)
    4a5c:	2100      	movs	r1, #0
    4a5e:	0336      	lsls	r6, r6, #12
    4a60:	0d0c      	lsrs	r4, r1, #20
    4a62:	0524      	lsls	r4, r4, #20
    4a64:	0b36      	lsrs	r6, r6, #12
    4a66:	4326      	orrs	r6, r4
    4a68:	4c43      	ldr	r4, [pc, #268]	; (4b78 <__aeabi_ddiv+0x1e8>)
    4a6a:	051b      	lsls	r3, r3, #20
    4a6c:	4026      	ands	r6, r4
    4a6e:	431e      	orrs	r6, r3
    4a70:	0076      	lsls	r6, r6, #1
    4a72:	07d2      	lsls	r2, r2, #31
    4a74:	0876      	lsrs	r6, r6, #1
    4a76:	4316      	orrs	r6, r2
    4a78:	4648      	mov	r0, r9
    4a7a:	0031      	movs	r1, r6
    4a7c:	b007      	add	sp, #28
    4a7e:	bc3c      	pop	{r2, r3, r4, r5}
    4a80:	4690      	mov	r8, r2
    4a82:	4699      	mov	r9, r3
    4a84:	46a2      	mov	sl, r4
    4a86:	46ab      	mov	fp, r5
    4a88:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4a8a:	0033      	movs	r3, r6
    4a8c:	4303      	orrs	r3, r0
    4a8e:	d04f      	beq.n	4b30 <__aeabi_ddiv+0x1a0>
    4a90:	2e00      	cmp	r6, #0
    4a92:	d100      	bne.n	4a96 <__aeabi_ddiv+0x106>
    4a94:	e1bc      	b.n	4e10 <__aeabi_ddiv+0x480>
    4a96:	0030      	movs	r0, r6
    4a98:	f001 fba8 	bl	61ec <__clzsi2>
    4a9c:	0003      	movs	r3, r0
    4a9e:	3b0b      	subs	r3, #11
    4aa0:	2b1c      	cmp	r3, #28
    4aa2:	dd00      	ble.n	4aa6 <__aeabi_ddiv+0x116>
    4aa4:	e1ad      	b.n	4e02 <__aeabi_ddiv+0x472>
    4aa6:	221d      	movs	r2, #29
    4aa8:	0001      	movs	r1, r0
    4aaa:	1ad3      	subs	r3, r2, r3
    4aac:	3908      	subs	r1, #8
    4aae:	003a      	movs	r2, r7
    4ab0:	408f      	lsls	r7, r1
    4ab2:	408e      	lsls	r6, r1
    4ab4:	40da      	lsrs	r2, r3
    4ab6:	46b9      	mov	r9, r7
    4ab8:	4316      	orrs	r6, r2
    4aba:	4b30      	ldr	r3, [pc, #192]	; (4b7c <__aeabi_ddiv+0x1ec>)
    4abc:	2700      	movs	r7, #0
    4abe:	469c      	mov	ip, r3
    4ac0:	2300      	movs	r3, #0
    4ac2:	4460      	add	r0, ip
    4ac4:	4244      	negs	r4, r0
    4ac6:	9302      	str	r3, [sp, #8]
    4ac8:	e785      	b.n	49d6 <__aeabi_ddiv+0x46>
    4aca:	4653      	mov	r3, sl
    4acc:	465a      	mov	r2, fp
    4ace:	4313      	orrs	r3, r2
    4ad0:	d12c      	bne.n	4b2c <__aeabi_ddiv+0x19c>
    4ad2:	2300      	movs	r3, #0
    4ad4:	2100      	movs	r1, #0
    4ad6:	469b      	mov	fp, r3
    4ad8:	3302      	adds	r3, #2
    4ada:	e797      	b.n	4a0c <__aeabi_ddiv+0x7c>
    4adc:	430b      	orrs	r3, r1
    4ade:	d020      	beq.n	4b22 <__aeabi_ddiv+0x192>
    4ae0:	465b      	mov	r3, fp
    4ae2:	2b00      	cmp	r3, #0
    4ae4:	d100      	bne.n	4ae8 <__aeabi_ddiv+0x158>
    4ae6:	e19e      	b.n	4e26 <__aeabi_ddiv+0x496>
    4ae8:	4658      	mov	r0, fp
    4aea:	f001 fb7f 	bl	61ec <__clzsi2>
    4aee:	0003      	movs	r3, r0
    4af0:	3b0b      	subs	r3, #11
    4af2:	2b1c      	cmp	r3, #28
    4af4:	dd00      	ble.n	4af8 <__aeabi_ddiv+0x168>
    4af6:	e18f      	b.n	4e18 <__aeabi_ddiv+0x488>
    4af8:	0002      	movs	r2, r0
    4afa:	4659      	mov	r1, fp
    4afc:	3a08      	subs	r2, #8
    4afe:	4091      	lsls	r1, r2
    4b00:	468b      	mov	fp, r1
    4b02:	211d      	movs	r1, #29
    4b04:	1acb      	subs	r3, r1, r3
    4b06:	4651      	mov	r1, sl
    4b08:	40d9      	lsrs	r1, r3
    4b0a:	000b      	movs	r3, r1
    4b0c:	4659      	mov	r1, fp
    4b0e:	430b      	orrs	r3, r1
    4b10:	4651      	mov	r1, sl
    4b12:	469b      	mov	fp, r3
    4b14:	4091      	lsls	r1, r2
    4b16:	4b19      	ldr	r3, [pc, #100]	; (4b7c <__aeabi_ddiv+0x1ec>)
    4b18:	469c      	mov	ip, r3
    4b1a:	4460      	add	r0, ip
    4b1c:	4240      	negs	r0, r0
    4b1e:	2300      	movs	r3, #0
    4b20:	e774      	b.n	4a0c <__aeabi_ddiv+0x7c>
    4b22:	2300      	movs	r3, #0
    4b24:	2100      	movs	r1, #0
    4b26:	469b      	mov	fp, r3
    4b28:	3301      	adds	r3, #1
    4b2a:	e76f      	b.n	4a0c <__aeabi_ddiv+0x7c>
    4b2c:	2303      	movs	r3, #3
    4b2e:	e76d      	b.n	4a0c <__aeabi_ddiv+0x7c>
    4b30:	2300      	movs	r3, #0
    4b32:	4699      	mov	r9, r3
    4b34:	3301      	adds	r3, #1
    4b36:	2704      	movs	r7, #4
    4b38:	2600      	movs	r6, #0
    4b3a:	9302      	str	r3, [sp, #8]
    4b3c:	e74b      	b.n	49d6 <__aeabi_ddiv+0x46>
    4b3e:	2303      	movs	r3, #3
    4b40:	270c      	movs	r7, #12
    4b42:	9302      	str	r3, [sp, #8]
    4b44:	e747      	b.n	49d6 <__aeabi_ddiv+0x46>
    4b46:	2201      	movs	r2, #1
    4b48:	1ad5      	subs	r5, r2, r3
    4b4a:	2d38      	cmp	r5, #56	; 0x38
    4b4c:	dc00      	bgt.n	4b50 <__aeabi_ddiv+0x1c0>
    4b4e:	e1b0      	b.n	4eb2 <__aeabi_ddiv+0x522>
    4b50:	4653      	mov	r3, sl
    4b52:	401a      	ands	r2, r3
    4b54:	2100      	movs	r1, #0
    4b56:	2300      	movs	r3, #0
    4b58:	2600      	movs	r6, #0
    4b5a:	4689      	mov	r9, r1
    4b5c:	e77e      	b.n	4a5c <__aeabi_ddiv+0xcc>
    4b5e:	2300      	movs	r3, #0
    4b60:	2680      	movs	r6, #128	; 0x80
    4b62:	4699      	mov	r9, r3
    4b64:	2200      	movs	r2, #0
    4b66:	0336      	lsls	r6, r6, #12
    4b68:	4b00      	ldr	r3, [pc, #0]	; (4b6c <__aeabi_ddiv+0x1dc>)
    4b6a:	e777      	b.n	4a5c <__aeabi_ddiv+0xcc>
    4b6c:	000007ff 	.word	0x000007ff
    4b70:	fffffc01 	.word	0xfffffc01
    4b74:	00006428 	.word	0x00006428
    4b78:	800fffff 	.word	0x800fffff
    4b7c:	000003f3 	.word	0x000003f3
    4b80:	455e      	cmp	r6, fp
    4b82:	d900      	bls.n	4b86 <__aeabi_ddiv+0x1f6>
    4b84:	e172      	b.n	4e6c <__aeabi_ddiv+0x4dc>
    4b86:	d100      	bne.n	4b8a <__aeabi_ddiv+0x1fa>
    4b88:	e16d      	b.n	4e66 <__aeabi_ddiv+0x4d6>
    4b8a:	9b01      	ldr	r3, [sp, #4]
    4b8c:	464d      	mov	r5, r9
    4b8e:	3b01      	subs	r3, #1
    4b90:	9301      	str	r3, [sp, #4]
    4b92:	2300      	movs	r3, #0
    4b94:	0034      	movs	r4, r6
    4b96:	9302      	str	r3, [sp, #8]
    4b98:	465b      	mov	r3, fp
    4b9a:	021e      	lsls	r6, r3, #8
    4b9c:	0e0b      	lsrs	r3, r1, #24
    4b9e:	431e      	orrs	r6, r3
    4ba0:	020b      	lsls	r3, r1, #8
    4ba2:	9303      	str	r3, [sp, #12]
    4ba4:	0c33      	lsrs	r3, r6, #16
    4ba6:	4699      	mov	r9, r3
    4ba8:	0433      	lsls	r3, r6, #16
    4baa:	0c1b      	lsrs	r3, r3, #16
    4bac:	4649      	mov	r1, r9
    4bae:	0020      	movs	r0, r4
    4bb0:	9300      	str	r3, [sp, #0]
    4bb2:	f001 fa8f 	bl	60d4 <__aeabi_uidiv>
    4bb6:	9b00      	ldr	r3, [sp, #0]
    4bb8:	0037      	movs	r7, r6
    4bba:	4343      	muls	r3, r0
    4bbc:	0006      	movs	r6, r0
    4bbe:	4649      	mov	r1, r9
    4bc0:	0020      	movs	r0, r4
    4bc2:	4698      	mov	r8, r3
    4bc4:	f001 fb0c 	bl	61e0 <__aeabi_uidivmod>
    4bc8:	0c2c      	lsrs	r4, r5, #16
    4bca:	0409      	lsls	r1, r1, #16
    4bcc:	430c      	orrs	r4, r1
    4bce:	45a0      	cmp	r8, r4
    4bd0:	d909      	bls.n	4be6 <__aeabi_ddiv+0x256>
    4bd2:	19e4      	adds	r4, r4, r7
    4bd4:	1e73      	subs	r3, r6, #1
    4bd6:	42a7      	cmp	r7, r4
    4bd8:	d900      	bls.n	4bdc <__aeabi_ddiv+0x24c>
    4bda:	e15c      	b.n	4e96 <__aeabi_ddiv+0x506>
    4bdc:	45a0      	cmp	r8, r4
    4bde:	d800      	bhi.n	4be2 <__aeabi_ddiv+0x252>
    4be0:	e159      	b.n	4e96 <__aeabi_ddiv+0x506>
    4be2:	3e02      	subs	r6, #2
    4be4:	19e4      	adds	r4, r4, r7
    4be6:	4643      	mov	r3, r8
    4be8:	1ae4      	subs	r4, r4, r3
    4bea:	4649      	mov	r1, r9
    4bec:	0020      	movs	r0, r4
    4bee:	f001 fa71 	bl	60d4 <__aeabi_uidiv>
    4bf2:	0003      	movs	r3, r0
    4bf4:	9a00      	ldr	r2, [sp, #0]
    4bf6:	4680      	mov	r8, r0
    4bf8:	4353      	muls	r3, r2
    4bfa:	4649      	mov	r1, r9
    4bfc:	0020      	movs	r0, r4
    4bfe:	469b      	mov	fp, r3
    4c00:	f001 faee 	bl	61e0 <__aeabi_uidivmod>
    4c04:	042a      	lsls	r2, r5, #16
    4c06:	0409      	lsls	r1, r1, #16
    4c08:	0c12      	lsrs	r2, r2, #16
    4c0a:	430a      	orrs	r2, r1
    4c0c:	4593      	cmp	fp, r2
    4c0e:	d90d      	bls.n	4c2c <__aeabi_ddiv+0x29c>
    4c10:	4643      	mov	r3, r8
    4c12:	19d2      	adds	r2, r2, r7
    4c14:	3b01      	subs	r3, #1
    4c16:	4297      	cmp	r7, r2
    4c18:	d900      	bls.n	4c1c <__aeabi_ddiv+0x28c>
    4c1a:	e13a      	b.n	4e92 <__aeabi_ddiv+0x502>
    4c1c:	4593      	cmp	fp, r2
    4c1e:	d800      	bhi.n	4c22 <__aeabi_ddiv+0x292>
    4c20:	e137      	b.n	4e92 <__aeabi_ddiv+0x502>
    4c22:	2302      	movs	r3, #2
    4c24:	425b      	negs	r3, r3
    4c26:	469c      	mov	ip, r3
    4c28:	19d2      	adds	r2, r2, r7
    4c2a:	44e0      	add	r8, ip
    4c2c:	465b      	mov	r3, fp
    4c2e:	1ad2      	subs	r2, r2, r3
    4c30:	4643      	mov	r3, r8
    4c32:	0436      	lsls	r6, r6, #16
    4c34:	4333      	orrs	r3, r6
    4c36:	469b      	mov	fp, r3
    4c38:	9903      	ldr	r1, [sp, #12]
    4c3a:	0c18      	lsrs	r0, r3, #16
    4c3c:	0c0b      	lsrs	r3, r1, #16
    4c3e:	001d      	movs	r5, r3
    4c40:	9305      	str	r3, [sp, #20]
    4c42:	0409      	lsls	r1, r1, #16
    4c44:	465b      	mov	r3, fp
    4c46:	0c09      	lsrs	r1, r1, #16
    4c48:	000c      	movs	r4, r1
    4c4a:	041b      	lsls	r3, r3, #16
    4c4c:	0c1b      	lsrs	r3, r3, #16
    4c4e:	4344      	muls	r4, r0
    4c50:	9104      	str	r1, [sp, #16]
    4c52:	4359      	muls	r1, r3
    4c54:	436b      	muls	r3, r5
    4c56:	4368      	muls	r0, r5
    4c58:	191b      	adds	r3, r3, r4
    4c5a:	0c0d      	lsrs	r5, r1, #16
    4c5c:	18eb      	adds	r3, r5, r3
    4c5e:	429c      	cmp	r4, r3
    4c60:	d903      	bls.n	4c6a <__aeabi_ddiv+0x2da>
    4c62:	2480      	movs	r4, #128	; 0x80
    4c64:	0264      	lsls	r4, r4, #9
    4c66:	46a4      	mov	ip, r4
    4c68:	4460      	add	r0, ip
    4c6a:	0c1c      	lsrs	r4, r3, #16
    4c6c:	0409      	lsls	r1, r1, #16
    4c6e:	041b      	lsls	r3, r3, #16
    4c70:	0c09      	lsrs	r1, r1, #16
    4c72:	1820      	adds	r0, r4, r0
    4c74:	185d      	adds	r5, r3, r1
    4c76:	4282      	cmp	r2, r0
    4c78:	d200      	bcs.n	4c7c <__aeabi_ddiv+0x2ec>
    4c7a:	e0de      	b.n	4e3a <__aeabi_ddiv+0x4aa>
    4c7c:	d100      	bne.n	4c80 <__aeabi_ddiv+0x2f0>
    4c7e:	e0d7      	b.n	4e30 <__aeabi_ddiv+0x4a0>
    4c80:	1a16      	subs	r6, r2, r0
    4c82:	9b02      	ldr	r3, [sp, #8]
    4c84:	469c      	mov	ip, r3
    4c86:	1b5d      	subs	r5, r3, r5
    4c88:	45ac      	cmp	ip, r5
    4c8a:	419b      	sbcs	r3, r3
    4c8c:	425b      	negs	r3, r3
    4c8e:	1af6      	subs	r6, r6, r3
    4c90:	42b7      	cmp	r7, r6
    4c92:	d100      	bne.n	4c96 <__aeabi_ddiv+0x306>
    4c94:	e106      	b.n	4ea4 <__aeabi_ddiv+0x514>
    4c96:	4649      	mov	r1, r9
    4c98:	0030      	movs	r0, r6
    4c9a:	f001 fa1b 	bl	60d4 <__aeabi_uidiv>
    4c9e:	9b00      	ldr	r3, [sp, #0]
    4ca0:	0004      	movs	r4, r0
    4ca2:	4343      	muls	r3, r0
    4ca4:	4649      	mov	r1, r9
    4ca6:	0030      	movs	r0, r6
    4ca8:	4698      	mov	r8, r3
    4caa:	f001 fa99 	bl	61e0 <__aeabi_uidivmod>
    4cae:	0c2e      	lsrs	r6, r5, #16
    4cb0:	0409      	lsls	r1, r1, #16
    4cb2:	430e      	orrs	r6, r1
    4cb4:	45b0      	cmp	r8, r6
    4cb6:	d909      	bls.n	4ccc <__aeabi_ddiv+0x33c>
    4cb8:	19f6      	adds	r6, r6, r7
    4cba:	1e63      	subs	r3, r4, #1
    4cbc:	42b7      	cmp	r7, r6
    4cbe:	d900      	bls.n	4cc2 <__aeabi_ddiv+0x332>
    4cc0:	e0f3      	b.n	4eaa <__aeabi_ddiv+0x51a>
    4cc2:	45b0      	cmp	r8, r6
    4cc4:	d800      	bhi.n	4cc8 <__aeabi_ddiv+0x338>
    4cc6:	e0f0      	b.n	4eaa <__aeabi_ddiv+0x51a>
    4cc8:	3c02      	subs	r4, #2
    4cca:	19f6      	adds	r6, r6, r7
    4ccc:	4643      	mov	r3, r8
    4cce:	1af3      	subs	r3, r6, r3
    4cd0:	4649      	mov	r1, r9
    4cd2:	0018      	movs	r0, r3
    4cd4:	9302      	str	r3, [sp, #8]
    4cd6:	f001 f9fd 	bl	60d4 <__aeabi_uidiv>
    4cda:	9b00      	ldr	r3, [sp, #0]
    4cdc:	0006      	movs	r6, r0
    4cde:	4343      	muls	r3, r0
    4ce0:	4649      	mov	r1, r9
    4ce2:	9802      	ldr	r0, [sp, #8]
    4ce4:	4698      	mov	r8, r3
    4ce6:	f001 fa7b 	bl	61e0 <__aeabi_uidivmod>
    4cea:	042d      	lsls	r5, r5, #16
    4cec:	0409      	lsls	r1, r1, #16
    4cee:	0c2d      	lsrs	r5, r5, #16
    4cf0:	430d      	orrs	r5, r1
    4cf2:	45a8      	cmp	r8, r5
    4cf4:	d909      	bls.n	4d0a <__aeabi_ddiv+0x37a>
    4cf6:	19ed      	adds	r5, r5, r7
    4cf8:	1e73      	subs	r3, r6, #1
    4cfa:	42af      	cmp	r7, r5
    4cfc:	d900      	bls.n	4d00 <__aeabi_ddiv+0x370>
    4cfe:	e0d6      	b.n	4eae <__aeabi_ddiv+0x51e>
    4d00:	45a8      	cmp	r8, r5
    4d02:	d800      	bhi.n	4d06 <__aeabi_ddiv+0x376>
    4d04:	e0d3      	b.n	4eae <__aeabi_ddiv+0x51e>
    4d06:	3e02      	subs	r6, #2
    4d08:	19ed      	adds	r5, r5, r7
    4d0a:	0424      	lsls	r4, r4, #16
    4d0c:	0021      	movs	r1, r4
    4d0e:	4643      	mov	r3, r8
    4d10:	4331      	orrs	r1, r6
    4d12:	9e04      	ldr	r6, [sp, #16]
    4d14:	9a05      	ldr	r2, [sp, #20]
    4d16:	0030      	movs	r0, r6
    4d18:	1aed      	subs	r5, r5, r3
    4d1a:	040b      	lsls	r3, r1, #16
    4d1c:	0c0c      	lsrs	r4, r1, #16
    4d1e:	0c1b      	lsrs	r3, r3, #16
    4d20:	4358      	muls	r0, r3
    4d22:	4366      	muls	r6, r4
    4d24:	4353      	muls	r3, r2
    4d26:	4354      	muls	r4, r2
    4d28:	199a      	adds	r2, r3, r6
    4d2a:	0c03      	lsrs	r3, r0, #16
    4d2c:	189b      	adds	r3, r3, r2
    4d2e:	429e      	cmp	r6, r3
    4d30:	d903      	bls.n	4d3a <__aeabi_ddiv+0x3aa>
    4d32:	2280      	movs	r2, #128	; 0x80
    4d34:	0252      	lsls	r2, r2, #9
    4d36:	4694      	mov	ip, r2
    4d38:	4464      	add	r4, ip
    4d3a:	0c1a      	lsrs	r2, r3, #16
    4d3c:	0400      	lsls	r0, r0, #16
    4d3e:	041b      	lsls	r3, r3, #16
    4d40:	0c00      	lsrs	r0, r0, #16
    4d42:	1914      	adds	r4, r2, r4
    4d44:	181b      	adds	r3, r3, r0
    4d46:	42a5      	cmp	r5, r4
    4d48:	d350      	bcc.n	4dec <__aeabi_ddiv+0x45c>
    4d4a:	d04d      	beq.n	4de8 <__aeabi_ddiv+0x458>
    4d4c:	2301      	movs	r3, #1
    4d4e:	4319      	orrs	r1, r3
    4d50:	4a96      	ldr	r2, [pc, #600]	; (4fac <__aeabi_ddiv+0x61c>)
    4d52:	9b01      	ldr	r3, [sp, #4]
    4d54:	4694      	mov	ip, r2
    4d56:	4463      	add	r3, ip
    4d58:	2b00      	cmp	r3, #0
    4d5a:	dc00      	bgt.n	4d5e <__aeabi_ddiv+0x3ce>
    4d5c:	e6f3      	b.n	4b46 <__aeabi_ddiv+0x1b6>
    4d5e:	074a      	lsls	r2, r1, #29
    4d60:	d009      	beq.n	4d76 <__aeabi_ddiv+0x3e6>
    4d62:	220f      	movs	r2, #15
    4d64:	400a      	ands	r2, r1
    4d66:	2a04      	cmp	r2, #4
    4d68:	d005      	beq.n	4d76 <__aeabi_ddiv+0x3e6>
    4d6a:	1d0a      	adds	r2, r1, #4
    4d6c:	428a      	cmp	r2, r1
    4d6e:	4189      	sbcs	r1, r1
    4d70:	4249      	negs	r1, r1
    4d72:	448b      	add	fp, r1
    4d74:	0011      	movs	r1, r2
    4d76:	465a      	mov	r2, fp
    4d78:	01d2      	lsls	r2, r2, #7
    4d7a:	d508      	bpl.n	4d8e <__aeabi_ddiv+0x3fe>
    4d7c:	465a      	mov	r2, fp
    4d7e:	4b8c      	ldr	r3, [pc, #560]	; (4fb0 <__aeabi_ddiv+0x620>)
    4d80:	401a      	ands	r2, r3
    4d82:	4693      	mov	fp, r2
    4d84:	2280      	movs	r2, #128	; 0x80
    4d86:	00d2      	lsls	r2, r2, #3
    4d88:	4694      	mov	ip, r2
    4d8a:	9b01      	ldr	r3, [sp, #4]
    4d8c:	4463      	add	r3, ip
    4d8e:	4a89      	ldr	r2, [pc, #548]	; (4fb4 <__aeabi_ddiv+0x624>)
    4d90:	4293      	cmp	r3, r2
    4d92:	dd00      	ble.n	4d96 <__aeabi_ddiv+0x406>
    4d94:	e65b      	b.n	4a4e <__aeabi_ddiv+0xbe>
    4d96:	465a      	mov	r2, fp
    4d98:	08c9      	lsrs	r1, r1, #3
    4d9a:	0750      	lsls	r0, r2, #29
    4d9c:	4308      	orrs	r0, r1
    4d9e:	0256      	lsls	r6, r2, #9
    4da0:	4651      	mov	r1, sl
    4da2:	2201      	movs	r2, #1
    4da4:	055b      	lsls	r3, r3, #21
    4da6:	4681      	mov	r9, r0
    4da8:	0b36      	lsrs	r6, r6, #12
    4daa:	0d5b      	lsrs	r3, r3, #21
    4dac:	400a      	ands	r2, r1
    4dae:	e655      	b.n	4a5c <__aeabi_ddiv+0xcc>
    4db0:	2380      	movs	r3, #128	; 0x80
    4db2:	031b      	lsls	r3, r3, #12
    4db4:	421e      	tst	r6, r3
    4db6:	d011      	beq.n	4ddc <__aeabi_ddiv+0x44c>
    4db8:	465a      	mov	r2, fp
    4dba:	421a      	tst	r2, r3
    4dbc:	d10e      	bne.n	4ddc <__aeabi_ddiv+0x44c>
    4dbe:	465e      	mov	r6, fp
    4dc0:	431e      	orrs	r6, r3
    4dc2:	0336      	lsls	r6, r6, #12
    4dc4:	0b36      	lsrs	r6, r6, #12
    4dc6:	002a      	movs	r2, r5
    4dc8:	4689      	mov	r9, r1
    4dca:	4b7b      	ldr	r3, [pc, #492]	; (4fb8 <__aeabi_ddiv+0x628>)
    4dcc:	e646      	b.n	4a5c <__aeabi_ddiv+0xcc>
    4dce:	2b03      	cmp	r3, #3
    4dd0:	d100      	bne.n	4dd4 <__aeabi_ddiv+0x444>
    4dd2:	e0e1      	b.n	4f98 <__aeabi_ddiv+0x608>
    4dd4:	2b01      	cmp	r3, #1
    4dd6:	d1bb      	bne.n	4d50 <__aeabi_ddiv+0x3c0>
    4dd8:	401a      	ands	r2, r3
    4dda:	e6bb      	b.n	4b54 <__aeabi_ddiv+0x1c4>
    4ddc:	431e      	orrs	r6, r3
    4dde:	0336      	lsls	r6, r6, #12
    4de0:	0b36      	lsrs	r6, r6, #12
    4de2:	4642      	mov	r2, r8
    4de4:	4b74      	ldr	r3, [pc, #464]	; (4fb8 <__aeabi_ddiv+0x628>)
    4de6:	e639      	b.n	4a5c <__aeabi_ddiv+0xcc>
    4de8:	2b00      	cmp	r3, #0
    4dea:	d0b1      	beq.n	4d50 <__aeabi_ddiv+0x3c0>
    4dec:	197d      	adds	r5, r7, r5
    4dee:	1e4a      	subs	r2, r1, #1
    4df0:	42af      	cmp	r7, r5
    4df2:	d952      	bls.n	4e9a <__aeabi_ddiv+0x50a>
    4df4:	0011      	movs	r1, r2
    4df6:	42a5      	cmp	r5, r4
    4df8:	d1a8      	bne.n	4d4c <__aeabi_ddiv+0x3bc>
    4dfa:	9a03      	ldr	r2, [sp, #12]
    4dfc:	429a      	cmp	r2, r3
    4dfe:	d1a5      	bne.n	4d4c <__aeabi_ddiv+0x3bc>
    4e00:	e7a6      	b.n	4d50 <__aeabi_ddiv+0x3c0>
    4e02:	0003      	movs	r3, r0
    4e04:	003e      	movs	r6, r7
    4e06:	3b28      	subs	r3, #40	; 0x28
    4e08:	409e      	lsls	r6, r3
    4e0a:	2300      	movs	r3, #0
    4e0c:	4699      	mov	r9, r3
    4e0e:	e654      	b.n	4aba <__aeabi_ddiv+0x12a>
    4e10:	f001 f9ec 	bl	61ec <__clzsi2>
    4e14:	3020      	adds	r0, #32
    4e16:	e641      	b.n	4a9c <__aeabi_ddiv+0x10c>
    4e18:	0003      	movs	r3, r0
    4e1a:	4652      	mov	r2, sl
    4e1c:	3b28      	subs	r3, #40	; 0x28
    4e1e:	409a      	lsls	r2, r3
    4e20:	2100      	movs	r1, #0
    4e22:	4693      	mov	fp, r2
    4e24:	e677      	b.n	4b16 <__aeabi_ddiv+0x186>
    4e26:	4650      	mov	r0, sl
    4e28:	f001 f9e0 	bl	61ec <__clzsi2>
    4e2c:	3020      	adds	r0, #32
    4e2e:	e65e      	b.n	4aee <__aeabi_ddiv+0x15e>
    4e30:	9b02      	ldr	r3, [sp, #8]
    4e32:	2600      	movs	r6, #0
    4e34:	42ab      	cmp	r3, r5
    4e36:	d300      	bcc.n	4e3a <__aeabi_ddiv+0x4aa>
    4e38:	e723      	b.n	4c82 <__aeabi_ddiv+0x2f2>
    4e3a:	9e03      	ldr	r6, [sp, #12]
    4e3c:	9902      	ldr	r1, [sp, #8]
    4e3e:	46b4      	mov	ip, r6
    4e40:	4461      	add	r1, ip
    4e42:	4688      	mov	r8, r1
    4e44:	45b0      	cmp	r8, r6
    4e46:	41b6      	sbcs	r6, r6
    4e48:	465b      	mov	r3, fp
    4e4a:	4276      	negs	r6, r6
    4e4c:	19f6      	adds	r6, r6, r7
    4e4e:	18b2      	adds	r2, r6, r2
    4e50:	3b01      	subs	r3, #1
    4e52:	9102      	str	r1, [sp, #8]
    4e54:	4297      	cmp	r7, r2
    4e56:	d213      	bcs.n	4e80 <__aeabi_ddiv+0x4f0>
    4e58:	4290      	cmp	r0, r2
    4e5a:	d84f      	bhi.n	4efc <__aeabi_ddiv+0x56c>
    4e5c:	d100      	bne.n	4e60 <__aeabi_ddiv+0x4d0>
    4e5e:	e08e      	b.n	4f7e <__aeabi_ddiv+0x5ee>
    4e60:	1a16      	subs	r6, r2, r0
    4e62:	469b      	mov	fp, r3
    4e64:	e70d      	b.n	4c82 <__aeabi_ddiv+0x2f2>
    4e66:	4589      	cmp	r9, r1
    4e68:	d200      	bcs.n	4e6c <__aeabi_ddiv+0x4dc>
    4e6a:	e68e      	b.n	4b8a <__aeabi_ddiv+0x1fa>
    4e6c:	0874      	lsrs	r4, r6, #1
    4e6e:	464b      	mov	r3, r9
    4e70:	07f6      	lsls	r6, r6, #31
    4e72:	0035      	movs	r5, r6
    4e74:	085b      	lsrs	r3, r3, #1
    4e76:	431d      	orrs	r5, r3
    4e78:	464b      	mov	r3, r9
    4e7a:	07db      	lsls	r3, r3, #31
    4e7c:	9302      	str	r3, [sp, #8]
    4e7e:	e68b      	b.n	4b98 <__aeabi_ddiv+0x208>
    4e80:	4297      	cmp	r7, r2
    4e82:	d1ed      	bne.n	4e60 <__aeabi_ddiv+0x4d0>
    4e84:	9903      	ldr	r1, [sp, #12]
    4e86:	9c02      	ldr	r4, [sp, #8]
    4e88:	42a1      	cmp	r1, r4
    4e8a:	d9e5      	bls.n	4e58 <__aeabi_ddiv+0x4c8>
    4e8c:	1a3e      	subs	r6, r7, r0
    4e8e:	469b      	mov	fp, r3
    4e90:	e6f7      	b.n	4c82 <__aeabi_ddiv+0x2f2>
    4e92:	4698      	mov	r8, r3
    4e94:	e6ca      	b.n	4c2c <__aeabi_ddiv+0x29c>
    4e96:	001e      	movs	r6, r3
    4e98:	e6a5      	b.n	4be6 <__aeabi_ddiv+0x256>
    4e9a:	42ac      	cmp	r4, r5
    4e9c:	d83e      	bhi.n	4f1c <__aeabi_ddiv+0x58c>
    4e9e:	d074      	beq.n	4f8a <__aeabi_ddiv+0x5fa>
    4ea0:	0011      	movs	r1, r2
    4ea2:	e753      	b.n	4d4c <__aeabi_ddiv+0x3bc>
    4ea4:	2101      	movs	r1, #1
    4ea6:	4249      	negs	r1, r1
    4ea8:	e752      	b.n	4d50 <__aeabi_ddiv+0x3c0>
    4eaa:	001c      	movs	r4, r3
    4eac:	e70e      	b.n	4ccc <__aeabi_ddiv+0x33c>
    4eae:	001e      	movs	r6, r3
    4eb0:	e72b      	b.n	4d0a <__aeabi_ddiv+0x37a>
    4eb2:	2d1f      	cmp	r5, #31
    4eb4:	dc3c      	bgt.n	4f30 <__aeabi_ddiv+0x5a0>
    4eb6:	2320      	movs	r3, #32
    4eb8:	000a      	movs	r2, r1
    4eba:	4658      	mov	r0, fp
    4ebc:	1b5b      	subs	r3, r3, r5
    4ebe:	4098      	lsls	r0, r3
    4ec0:	40ea      	lsrs	r2, r5
    4ec2:	4099      	lsls	r1, r3
    4ec4:	4302      	orrs	r2, r0
    4ec6:	1e48      	subs	r0, r1, #1
    4ec8:	4181      	sbcs	r1, r0
    4eca:	465e      	mov	r6, fp
    4ecc:	4311      	orrs	r1, r2
    4ece:	40ee      	lsrs	r6, r5
    4ed0:	074b      	lsls	r3, r1, #29
    4ed2:	d009      	beq.n	4ee8 <__aeabi_ddiv+0x558>
    4ed4:	230f      	movs	r3, #15
    4ed6:	400b      	ands	r3, r1
    4ed8:	2b04      	cmp	r3, #4
    4eda:	d005      	beq.n	4ee8 <__aeabi_ddiv+0x558>
    4edc:	000b      	movs	r3, r1
    4ede:	1d19      	adds	r1, r3, #4
    4ee0:	4299      	cmp	r1, r3
    4ee2:	419b      	sbcs	r3, r3
    4ee4:	425b      	negs	r3, r3
    4ee6:	18f6      	adds	r6, r6, r3
    4ee8:	0233      	lsls	r3, r6, #8
    4eea:	d53c      	bpl.n	4f66 <__aeabi_ddiv+0x5d6>
    4eec:	4653      	mov	r3, sl
    4eee:	2201      	movs	r2, #1
    4ef0:	2100      	movs	r1, #0
    4ef2:	401a      	ands	r2, r3
    4ef4:	2600      	movs	r6, #0
    4ef6:	2301      	movs	r3, #1
    4ef8:	4689      	mov	r9, r1
    4efa:	e5af      	b.n	4a5c <__aeabi_ddiv+0xcc>
    4efc:	2302      	movs	r3, #2
    4efe:	425b      	negs	r3, r3
    4f00:	469c      	mov	ip, r3
    4f02:	9c03      	ldr	r4, [sp, #12]
    4f04:	44e3      	add	fp, ip
    4f06:	46a4      	mov	ip, r4
    4f08:	9b02      	ldr	r3, [sp, #8]
    4f0a:	4463      	add	r3, ip
    4f0c:	4698      	mov	r8, r3
    4f0e:	45a0      	cmp	r8, r4
    4f10:	41b6      	sbcs	r6, r6
    4f12:	4276      	negs	r6, r6
    4f14:	19f6      	adds	r6, r6, r7
    4f16:	9302      	str	r3, [sp, #8]
    4f18:	18b2      	adds	r2, r6, r2
    4f1a:	e6b1      	b.n	4c80 <__aeabi_ddiv+0x2f0>
    4f1c:	9803      	ldr	r0, [sp, #12]
    4f1e:	1e8a      	subs	r2, r1, #2
    4f20:	0041      	lsls	r1, r0, #1
    4f22:	4281      	cmp	r1, r0
    4f24:	41b6      	sbcs	r6, r6
    4f26:	4276      	negs	r6, r6
    4f28:	19f6      	adds	r6, r6, r7
    4f2a:	19ad      	adds	r5, r5, r6
    4f2c:	9103      	str	r1, [sp, #12]
    4f2e:	e761      	b.n	4df4 <__aeabi_ddiv+0x464>
    4f30:	221f      	movs	r2, #31
    4f32:	4252      	negs	r2, r2
    4f34:	1ad3      	subs	r3, r2, r3
    4f36:	465a      	mov	r2, fp
    4f38:	40da      	lsrs	r2, r3
    4f3a:	0013      	movs	r3, r2
    4f3c:	2d20      	cmp	r5, #32
    4f3e:	d029      	beq.n	4f94 <__aeabi_ddiv+0x604>
    4f40:	2240      	movs	r2, #64	; 0x40
    4f42:	4658      	mov	r0, fp
    4f44:	1b55      	subs	r5, r2, r5
    4f46:	40a8      	lsls	r0, r5
    4f48:	4301      	orrs	r1, r0
    4f4a:	1e48      	subs	r0, r1, #1
    4f4c:	4181      	sbcs	r1, r0
    4f4e:	2007      	movs	r0, #7
    4f50:	430b      	orrs	r3, r1
    4f52:	4018      	ands	r0, r3
    4f54:	2600      	movs	r6, #0
    4f56:	2800      	cmp	r0, #0
    4f58:	d009      	beq.n	4f6e <__aeabi_ddiv+0x5de>
    4f5a:	220f      	movs	r2, #15
    4f5c:	2600      	movs	r6, #0
    4f5e:	401a      	ands	r2, r3
    4f60:	0019      	movs	r1, r3
    4f62:	2a04      	cmp	r2, #4
    4f64:	d1bb      	bne.n	4ede <__aeabi_ddiv+0x54e>
    4f66:	000b      	movs	r3, r1
    4f68:	0770      	lsls	r0, r6, #29
    4f6a:	0276      	lsls	r6, r6, #9
    4f6c:	0b36      	lsrs	r6, r6, #12
    4f6e:	08db      	lsrs	r3, r3, #3
    4f70:	4303      	orrs	r3, r0
    4f72:	4699      	mov	r9, r3
    4f74:	2201      	movs	r2, #1
    4f76:	4653      	mov	r3, sl
    4f78:	401a      	ands	r2, r3
    4f7a:	2300      	movs	r3, #0
    4f7c:	e56e      	b.n	4a5c <__aeabi_ddiv+0xcc>
    4f7e:	9902      	ldr	r1, [sp, #8]
    4f80:	428d      	cmp	r5, r1
    4f82:	d8bb      	bhi.n	4efc <__aeabi_ddiv+0x56c>
    4f84:	469b      	mov	fp, r3
    4f86:	2600      	movs	r6, #0
    4f88:	e67b      	b.n	4c82 <__aeabi_ddiv+0x2f2>
    4f8a:	9803      	ldr	r0, [sp, #12]
    4f8c:	4298      	cmp	r0, r3
    4f8e:	d3c5      	bcc.n	4f1c <__aeabi_ddiv+0x58c>
    4f90:	0011      	movs	r1, r2
    4f92:	e732      	b.n	4dfa <__aeabi_ddiv+0x46a>
    4f94:	2000      	movs	r0, #0
    4f96:	e7d7      	b.n	4f48 <__aeabi_ddiv+0x5b8>
    4f98:	2680      	movs	r6, #128	; 0x80
    4f9a:	465b      	mov	r3, fp
    4f9c:	0336      	lsls	r6, r6, #12
    4f9e:	431e      	orrs	r6, r3
    4fa0:	0336      	lsls	r6, r6, #12
    4fa2:	0b36      	lsrs	r6, r6, #12
    4fa4:	9a00      	ldr	r2, [sp, #0]
    4fa6:	4689      	mov	r9, r1
    4fa8:	4b03      	ldr	r3, [pc, #12]	; (4fb8 <__aeabi_ddiv+0x628>)
    4faa:	e557      	b.n	4a5c <__aeabi_ddiv+0xcc>
    4fac:	000003ff 	.word	0x000003ff
    4fb0:	feffffff 	.word	0xfeffffff
    4fb4:	000007fe 	.word	0x000007fe
    4fb8:	000007ff 	.word	0x000007ff

00004fbc <__eqdf2>:
    4fbc:	b5f0      	push	{r4, r5, r6, r7, lr}
    4fbe:	465f      	mov	r7, fp
    4fc0:	4656      	mov	r6, sl
    4fc2:	464d      	mov	r5, r9
    4fc4:	4644      	mov	r4, r8
    4fc6:	b4f0      	push	{r4, r5, r6, r7}
    4fc8:	031f      	lsls	r7, r3, #12
    4fca:	005c      	lsls	r4, r3, #1
    4fcc:	0fdb      	lsrs	r3, r3, #31
    4fce:	469a      	mov	sl, r3
    4fd0:	4b19      	ldr	r3, [pc, #100]	; (5038 <__eqdf2+0x7c>)
    4fd2:	030e      	lsls	r6, r1, #12
    4fd4:	004d      	lsls	r5, r1, #1
    4fd6:	0fc9      	lsrs	r1, r1, #31
    4fd8:	4680      	mov	r8, r0
    4fda:	0b36      	lsrs	r6, r6, #12
    4fdc:	0d6d      	lsrs	r5, r5, #21
    4fde:	468b      	mov	fp, r1
    4fe0:	4691      	mov	r9, r2
    4fe2:	0b3f      	lsrs	r7, r7, #12
    4fe4:	0d64      	lsrs	r4, r4, #21
    4fe6:	429d      	cmp	r5, r3
    4fe8:	d019      	beq.n	501e <__eqdf2+0x62>
    4fea:	4b13      	ldr	r3, [pc, #76]	; (5038 <__eqdf2+0x7c>)
    4fec:	429c      	cmp	r4, r3
    4fee:	d01b      	beq.n	5028 <__eqdf2+0x6c>
    4ff0:	2301      	movs	r3, #1
    4ff2:	42a5      	cmp	r5, r4
    4ff4:	d006      	beq.n	5004 <__eqdf2+0x48>
    4ff6:	0018      	movs	r0, r3
    4ff8:	bc3c      	pop	{r2, r3, r4, r5}
    4ffa:	4690      	mov	r8, r2
    4ffc:	4699      	mov	r9, r3
    4ffe:	46a2      	mov	sl, r4
    5000:	46ab      	mov	fp, r5
    5002:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5004:	42be      	cmp	r6, r7
    5006:	d1f6      	bne.n	4ff6 <__eqdf2+0x3a>
    5008:	45c8      	cmp	r8, r9
    500a:	d1f4      	bne.n	4ff6 <__eqdf2+0x3a>
    500c:	45d3      	cmp	fp, sl
    500e:	d010      	beq.n	5032 <__eqdf2+0x76>
    5010:	2d00      	cmp	r5, #0
    5012:	d1f0      	bne.n	4ff6 <__eqdf2+0x3a>
    5014:	4330      	orrs	r0, r6
    5016:	0003      	movs	r3, r0
    5018:	1e5a      	subs	r2, r3, #1
    501a:	4193      	sbcs	r3, r2
    501c:	e7eb      	b.n	4ff6 <__eqdf2+0x3a>
    501e:	0031      	movs	r1, r6
    5020:	2301      	movs	r3, #1
    5022:	4301      	orrs	r1, r0
    5024:	d1e7      	bne.n	4ff6 <__eqdf2+0x3a>
    5026:	e7e0      	b.n	4fea <__eqdf2+0x2e>
    5028:	433a      	orrs	r2, r7
    502a:	2301      	movs	r3, #1
    502c:	2a00      	cmp	r2, #0
    502e:	d1e2      	bne.n	4ff6 <__eqdf2+0x3a>
    5030:	e7de      	b.n	4ff0 <__eqdf2+0x34>
    5032:	2300      	movs	r3, #0
    5034:	e7df      	b.n	4ff6 <__eqdf2+0x3a>
    5036:	46c0      	nop			; (mov r8, r8)
    5038:	000007ff 	.word	0x000007ff

0000503c <__gedf2>:
    503c:	b5f0      	push	{r4, r5, r6, r7, lr}
    503e:	465f      	mov	r7, fp
    5040:	4644      	mov	r4, r8
    5042:	4656      	mov	r6, sl
    5044:	464d      	mov	r5, r9
    5046:	b4f0      	push	{r4, r5, r6, r7}
    5048:	031f      	lsls	r7, r3, #12
    504a:	0b3c      	lsrs	r4, r7, #12
    504c:	4f2c      	ldr	r7, [pc, #176]	; (5100 <__gedf2+0xc4>)
    504e:	030e      	lsls	r6, r1, #12
    5050:	004d      	lsls	r5, r1, #1
    5052:	46a3      	mov	fp, r4
    5054:	005c      	lsls	r4, r3, #1
    5056:	4684      	mov	ip, r0
    5058:	0b36      	lsrs	r6, r6, #12
    505a:	0d6d      	lsrs	r5, r5, #21
    505c:	0fc9      	lsrs	r1, r1, #31
    505e:	4690      	mov	r8, r2
    5060:	0d64      	lsrs	r4, r4, #21
    5062:	0fdb      	lsrs	r3, r3, #31
    5064:	42bd      	cmp	r5, r7
    5066:	d02b      	beq.n	50c0 <__gedf2+0x84>
    5068:	4f25      	ldr	r7, [pc, #148]	; (5100 <__gedf2+0xc4>)
    506a:	42bc      	cmp	r4, r7
    506c:	d02e      	beq.n	50cc <__gedf2+0x90>
    506e:	2d00      	cmp	r5, #0
    5070:	d10e      	bne.n	5090 <__gedf2+0x54>
    5072:	4330      	orrs	r0, r6
    5074:	0007      	movs	r7, r0
    5076:	4681      	mov	r9, r0
    5078:	4278      	negs	r0, r7
    507a:	4178      	adcs	r0, r7
    507c:	2c00      	cmp	r4, #0
    507e:	d117      	bne.n	50b0 <__gedf2+0x74>
    5080:	465f      	mov	r7, fp
    5082:	433a      	orrs	r2, r7
    5084:	d114      	bne.n	50b0 <__gedf2+0x74>
    5086:	464b      	mov	r3, r9
    5088:	2000      	movs	r0, #0
    508a:	2b00      	cmp	r3, #0
    508c:	d00a      	beq.n	50a4 <__gedf2+0x68>
    508e:	e006      	b.n	509e <__gedf2+0x62>
    5090:	2c00      	cmp	r4, #0
    5092:	d102      	bne.n	509a <__gedf2+0x5e>
    5094:	4658      	mov	r0, fp
    5096:	4302      	orrs	r2, r0
    5098:	d001      	beq.n	509e <__gedf2+0x62>
    509a:	4299      	cmp	r1, r3
    509c:	d01a      	beq.n	50d4 <__gedf2+0x98>
    509e:	2301      	movs	r3, #1
    50a0:	4248      	negs	r0, r1
    50a2:	4318      	orrs	r0, r3
    50a4:	bc3c      	pop	{r2, r3, r4, r5}
    50a6:	4690      	mov	r8, r2
    50a8:	4699      	mov	r9, r3
    50aa:	46a2      	mov	sl, r4
    50ac:	46ab      	mov	fp, r5
    50ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    50b0:	2800      	cmp	r0, #0
    50b2:	d0f2      	beq.n	509a <__gedf2+0x5e>
    50b4:	4258      	negs	r0, r3
    50b6:	4158      	adcs	r0, r3
    50b8:	2201      	movs	r2, #1
    50ba:	4240      	negs	r0, r0
    50bc:	4310      	orrs	r0, r2
    50be:	e7f1      	b.n	50a4 <__gedf2+0x68>
    50c0:	0037      	movs	r7, r6
    50c2:	4307      	orrs	r7, r0
    50c4:	d0d0      	beq.n	5068 <__gedf2+0x2c>
    50c6:	2002      	movs	r0, #2
    50c8:	4240      	negs	r0, r0
    50ca:	e7eb      	b.n	50a4 <__gedf2+0x68>
    50cc:	465f      	mov	r7, fp
    50ce:	4317      	orrs	r7, r2
    50d0:	d0cd      	beq.n	506e <__gedf2+0x32>
    50d2:	e7f8      	b.n	50c6 <__gedf2+0x8a>
    50d4:	42a5      	cmp	r5, r4
    50d6:	dce2      	bgt.n	509e <__gedf2+0x62>
    50d8:	db05      	blt.n	50e6 <__gedf2+0xaa>
    50da:	455e      	cmp	r6, fp
    50dc:	d8df      	bhi.n	509e <__gedf2+0x62>
    50de:	d008      	beq.n	50f2 <__gedf2+0xb6>
    50e0:	2000      	movs	r0, #0
    50e2:	455e      	cmp	r6, fp
    50e4:	d2de      	bcs.n	50a4 <__gedf2+0x68>
    50e6:	4248      	negs	r0, r1
    50e8:	4148      	adcs	r0, r1
    50ea:	2301      	movs	r3, #1
    50ec:	4240      	negs	r0, r0
    50ee:	4318      	orrs	r0, r3
    50f0:	e7d8      	b.n	50a4 <__gedf2+0x68>
    50f2:	45c4      	cmp	ip, r8
    50f4:	d8d3      	bhi.n	509e <__gedf2+0x62>
    50f6:	2000      	movs	r0, #0
    50f8:	45c4      	cmp	ip, r8
    50fa:	d3f4      	bcc.n	50e6 <__gedf2+0xaa>
    50fc:	e7d2      	b.n	50a4 <__gedf2+0x68>
    50fe:	46c0      	nop			; (mov r8, r8)
    5100:	000007ff 	.word	0x000007ff

00005104 <__ledf2>:
    5104:	b5f0      	push	{r4, r5, r6, r7, lr}
    5106:	465f      	mov	r7, fp
    5108:	464d      	mov	r5, r9
    510a:	4644      	mov	r4, r8
    510c:	4656      	mov	r6, sl
    510e:	b4f0      	push	{r4, r5, r6, r7}
    5110:	031c      	lsls	r4, r3, #12
    5112:	0b24      	lsrs	r4, r4, #12
    5114:	46a4      	mov	ip, r4
    5116:	4c2f      	ldr	r4, [pc, #188]	; (51d4 <__ledf2+0xd0>)
    5118:	030f      	lsls	r7, r1, #12
    511a:	004d      	lsls	r5, r1, #1
    511c:	005e      	lsls	r6, r3, #1
    511e:	0fc9      	lsrs	r1, r1, #31
    5120:	4680      	mov	r8, r0
    5122:	0b3f      	lsrs	r7, r7, #12
    5124:	0d6d      	lsrs	r5, r5, #21
    5126:	468b      	mov	fp, r1
    5128:	4691      	mov	r9, r2
    512a:	0d76      	lsrs	r6, r6, #21
    512c:	0fdb      	lsrs	r3, r3, #31
    512e:	42a5      	cmp	r5, r4
    5130:	d020      	beq.n	5174 <__ledf2+0x70>
    5132:	4c28      	ldr	r4, [pc, #160]	; (51d4 <__ledf2+0xd0>)
    5134:	42a6      	cmp	r6, r4
    5136:	d022      	beq.n	517e <__ledf2+0x7a>
    5138:	2d00      	cmp	r5, #0
    513a:	d112      	bne.n	5162 <__ledf2+0x5e>
    513c:	4338      	orrs	r0, r7
    513e:	4244      	negs	r4, r0
    5140:	4144      	adcs	r4, r0
    5142:	2e00      	cmp	r6, #0
    5144:	d020      	beq.n	5188 <__ledf2+0x84>
    5146:	2c00      	cmp	r4, #0
    5148:	d00d      	beq.n	5166 <__ledf2+0x62>
    514a:	425c      	negs	r4, r3
    514c:	4163      	adcs	r3, r4
    514e:	2401      	movs	r4, #1
    5150:	425b      	negs	r3, r3
    5152:	431c      	orrs	r4, r3
    5154:	0020      	movs	r0, r4
    5156:	bc3c      	pop	{r2, r3, r4, r5}
    5158:	4690      	mov	r8, r2
    515a:	4699      	mov	r9, r3
    515c:	46a2      	mov	sl, r4
    515e:	46ab      	mov	fp, r5
    5160:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5162:	2e00      	cmp	r6, #0
    5164:	d017      	beq.n	5196 <__ledf2+0x92>
    5166:	455b      	cmp	r3, fp
    5168:	d019      	beq.n	519e <__ledf2+0x9a>
    516a:	465b      	mov	r3, fp
    516c:	425c      	negs	r4, r3
    516e:	2301      	movs	r3, #1
    5170:	431c      	orrs	r4, r3
    5172:	e7ef      	b.n	5154 <__ledf2+0x50>
    5174:	0039      	movs	r1, r7
    5176:	2402      	movs	r4, #2
    5178:	4301      	orrs	r1, r0
    517a:	d1eb      	bne.n	5154 <__ledf2+0x50>
    517c:	e7d9      	b.n	5132 <__ledf2+0x2e>
    517e:	4661      	mov	r1, ip
    5180:	2402      	movs	r4, #2
    5182:	4311      	orrs	r1, r2
    5184:	d1e6      	bne.n	5154 <__ledf2+0x50>
    5186:	e7d7      	b.n	5138 <__ledf2+0x34>
    5188:	4661      	mov	r1, ip
    518a:	430a      	orrs	r2, r1
    518c:	d1db      	bne.n	5146 <__ledf2+0x42>
    518e:	2400      	movs	r4, #0
    5190:	2800      	cmp	r0, #0
    5192:	d0df      	beq.n	5154 <__ledf2+0x50>
    5194:	e7e9      	b.n	516a <__ledf2+0x66>
    5196:	4661      	mov	r1, ip
    5198:	430a      	orrs	r2, r1
    519a:	d1e4      	bne.n	5166 <__ledf2+0x62>
    519c:	e7e5      	b.n	516a <__ledf2+0x66>
    519e:	42b5      	cmp	r5, r6
    51a0:	dd03      	ble.n	51aa <__ledf2+0xa6>
    51a2:	2201      	movs	r2, #1
    51a4:	425c      	negs	r4, r3
    51a6:	4314      	orrs	r4, r2
    51a8:	e7d4      	b.n	5154 <__ledf2+0x50>
    51aa:	42b5      	cmp	r5, r6
    51ac:	dbcd      	blt.n	514a <__ledf2+0x46>
    51ae:	4567      	cmp	r7, ip
    51b0:	d8db      	bhi.n	516a <__ledf2+0x66>
    51b2:	d009      	beq.n	51c8 <__ledf2+0xc4>
    51b4:	2400      	movs	r4, #0
    51b6:	4567      	cmp	r7, ip
    51b8:	d2cc      	bcs.n	5154 <__ledf2+0x50>
    51ba:	4659      	mov	r1, fp
    51bc:	424c      	negs	r4, r1
    51be:	4161      	adcs	r1, r4
    51c0:	2401      	movs	r4, #1
    51c2:	4249      	negs	r1, r1
    51c4:	430c      	orrs	r4, r1
    51c6:	e7c5      	b.n	5154 <__ledf2+0x50>
    51c8:	45c8      	cmp	r8, r9
    51ca:	d8ce      	bhi.n	516a <__ledf2+0x66>
    51cc:	2400      	movs	r4, #0
    51ce:	45c8      	cmp	r8, r9
    51d0:	d3f3      	bcc.n	51ba <__ledf2+0xb6>
    51d2:	e7bf      	b.n	5154 <__ledf2+0x50>
    51d4:	000007ff 	.word	0x000007ff

000051d8 <__aeabi_dmul>:
    51d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    51da:	465f      	mov	r7, fp
    51dc:	4656      	mov	r6, sl
    51de:	464d      	mov	r5, r9
    51e0:	4644      	mov	r4, r8
    51e2:	b4f0      	push	{r4, r5, r6, r7}
    51e4:	030d      	lsls	r5, r1, #12
    51e6:	4699      	mov	r9, r3
    51e8:	004e      	lsls	r6, r1, #1
    51ea:	0b2b      	lsrs	r3, r5, #12
    51ec:	b087      	sub	sp, #28
    51ee:	0007      	movs	r7, r0
    51f0:	4692      	mov	sl, r2
    51f2:	4680      	mov	r8, r0
    51f4:	469b      	mov	fp, r3
    51f6:	0d76      	lsrs	r6, r6, #21
    51f8:	0fcc      	lsrs	r4, r1, #31
    51fa:	2e00      	cmp	r6, #0
    51fc:	d069      	beq.n	52d2 <__aeabi_dmul+0xfa>
    51fe:	4b6d      	ldr	r3, [pc, #436]	; (53b4 <__aeabi_dmul+0x1dc>)
    5200:	429e      	cmp	r6, r3
    5202:	d035      	beq.n	5270 <__aeabi_dmul+0x98>
    5204:	465b      	mov	r3, fp
    5206:	2280      	movs	r2, #128	; 0x80
    5208:	00dd      	lsls	r5, r3, #3
    520a:	0412      	lsls	r2, r2, #16
    520c:	0f43      	lsrs	r3, r0, #29
    520e:	4313      	orrs	r3, r2
    5210:	432b      	orrs	r3, r5
    5212:	469b      	mov	fp, r3
    5214:	00c3      	lsls	r3, r0, #3
    5216:	4698      	mov	r8, r3
    5218:	4b67      	ldr	r3, [pc, #412]	; (53b8 <__aeabi_dmul+0x1e0>)
    521a:	2700      	movs	r7, #0
    521c:	469c      	mov	ip, r3
    521e:	2300      	movs	r3, #0
    5220:	4466      	add	r6, ip
    5222:	9301      	str	r3, [sp, #4]
    5224:	464a      	mov	r2, r9
    5226:	0315      	lsls	r5, r2, #12
    5228:	0050      	lsls	r0, r2, #1
    522a:	0fd2      	lsrs	r2, r2, #31
    522c:	4653      	mov	r3, sl
    522e:	0b2d      	lsrs	r5, r5, #12
    5230:	0d40      	lsrs	r0, r0, #21
    5232:	4691      	mov	r9, r2
    5234:	d100      	bne.n	5238 <__aeabi_dmul+0x60>
    5236:	e076      	b.n	5326 <__aeabi_dmul+0x14e>
    5238:	4a5e      	ldr	r2, [pc, #376]	; (53b4 <__aeabi_dmul+0x1dc>)
    523a:	4290      	cmp	r0, r2
    523c:	d06c      	beq.n	5318 <__aeabi_dmul+0x140>
    523e:	2280      	movs	r2, #128	; 0x80
    5240:	0f5b      	lsrs	r3, r3, #29
    5242:	0412      	lsls	r2, r2, #16
    5244:	4313      	orrs	r3, r2
    5246:	4a5c      	ldr	r2, [pc, #368]	; (53b8 <__aeabi_dmul+0x1e0>)
    5248:	00ed      	lsls	r5, r5, #3
    524a:	4694      	mov	ip, r2
    524c:	431d      	orrs	r5, r3
    524e:	4653      	mov	r3, sl
    5250:	2200      	movs	r2, #0
    5252:	00db      	lsls	r3, r3, #3
    5254:	4460      	add	r0, ip
    5256:	4649      	mov	r1, r9
    5258:	1836      	adds	r6, r6, r0
    525a:	1c70      	adds	r0, r6, #1
    525c:	4061      	eors	r1, r4
    525e:	9002      	str	r0, [sp, #8]
    5260:	4317      	orrs	r7, r2
    5262:	2f0f      	cmp	r7, #15
    5264:	d900      	bls.n	5268 <__aeabi_dmul+0x90>
    5266:	e0af      	b.n	53c8 <__aeabi_dmul+0x1f0>
    5268:	4854      	ldr	r0, [pc, #336]	; (53bc <__aeabi_dmul+0x1e4>)
    526a:	00bf      	lsls	r7, r7, #2
    526c:	59c7      	ldr	r7, [r0, r7]
    526e:	46bf      	mov	pc, r7
    5270:	465b      	mov	r3, fp
    5272:	431f      	orrs	r7, r3
    5274:	d000      	beq.n	5278 <__aeabi_dmul+0xa0>
    5276:	e088      	b.n	538a <__aeabi_dmul+0x1b2>
    5278:	2300      	movs	r3, #0
    527a:	469b      	mov	fp, r3
    527c:	4698      	mov	r8, r3
    527e:	3302      	adds	r3, #2
    5280:	2708      	movs	r7, #8
    5282:	9301      	str	r3, [sp, #4]
    5284:	e7ce      	b.n	5224 <__aeabi_dmul+0x4c>
    5286:	4649      	mov	r1, r9
    5288:	2a02      	cmp	r2, #2
    528a:	d06a      	beq.n	5362 <__aeabi_dmul+0x18a>
    528c:	2a03      	cmp	r2, #3
    528e:	d100      	bne.n	5292 <__aeabi_dmul+0xba>
    5290:	e209      	b.n	56a6 <__aeabi_dmul+0x4ce>
    5292:	2a01      	cmp	r2, #1
    5294:	d000      	beq.n	5298 <__aeabi_dmul+0xc0>
    5296:	e1bb      	b.n	5610 <__aeabi_dmul+0x438>
    5298:	4011      	ands	r1, r2
    529a:	2200      	movs	r2, #0
    529c:	2300      	movs	r3, #0
    529e:	2500      	movs	r5, #0
    52a0:	4690      	mov	r8, r2
    52a2:	b2cc      	uxtb	r4, r1
    52a4:	2100      	movs	r1, #0
    52a6:	032d      	lsls	r5, r5, #12
    52a8:	0d0a      	lsrs	r2, r1, #20
    52aa:	0512      	lsls	r2, r2, #20
    52ac:	0b2d      	lsrs	r5, r5, #12
    52ae:	4315      	orrs	r5, r2
    52b0:	4a43      	ldr	r2, [pc, #268]	; (53c0 <__aeabi_dmul+0x1e8>)
    52b2:	051b      	lsls	r3, r3, #20
    52b4:	4015      	ands	r5, r2
    52b6:	431d      	orrs	r5, r3
    52b8:	006d      	lsls	r5, r5, #1
    52ba:	07e4      	lsls	r4, r4, #31
    52bc:	086d      	lsrs	r5, r5, #1
    52be:	4325      	orrs	r5, r4
    52c0:	4640      	mov	r0, r8
    52c2:	0029      	movs	r1, r5
    52c4:	b007      	add	sp, #28
    52c6:	bc3c      	pop	{r2, r3, r4, r5}
    52c8:	4690      	mov	r8, r2
    52ca:	4699      	mov	r9, r3
    52cc:	46a2      	mov	sl, r4
    52ce:	46ab      	mov	fp, r5
    52d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    52d2:	4303      	orrs	r3, r0
    52d4:	d052      	beq.n	537c <__aeabi_dmul+0x1a4>
    52d6:	465b      	mov	r3, fp
    52d8:	2b00      	cmp	r3, #0
    52da:	d100      	bne.n	52de <__aeabi_dmul+0x106>
    52dc:	e18a      	b.n	55f4 <__aeabi_dmul+0x41c>
    52de:	4658      	mov	r0, fp
    52e0:	f000 ff84 	bl	61ec <__clzsi2>
    52e4:	0003      	movs	r3, r0
    52e6:	3b0b      	subs	r3, #11
    52e8:	2b1c      	cmp	r3, #28
    52ea:	dd00      	ble.n	52ee <__aeabi_dmul+0x116>
    52ec:	e17b      	b.n	55e6 <__aeabi_dmul+0x40e>
    52ee:	221d      	movs	r2, #29
    52f0:	1ad3      	subs	r3, r2, r3
    52f2:	003a      	movs	r2, r7
    52f4:	0001      	movs	r1, r0
    52f6:	465d      	mov	r5, fp
    52f8:	40da      	lsrs	r2, r3
    52fa:	3908      	subs	r1, #8
    52fc:	408d      	lsls	r5, r1
    52fe:	0013      	movs	r3, r2
    5300:	408f      	lsls	r7, r1
    5302:	432b      	orrs	r3, r5
    5304:	469b      	mov	fp, r3
    5306:	46b8      	mov	r8, r7
    5308:	4b2e      	ldr	r3, [pc, #184]	; (53c4 <__aeabi_dmul+0x1ec>)
    530a:	2700      	movs	r7, #0
    530c:	469c      	mov	ip, r3
    530e:	2300      	movs	r3, #0
    5310:	4460      	add	r0, ip
    5312:	4246      	negs	r6, r0
    5314:	9301      	str	r3, [sp, #4]
    5316:	e785      	b.n	5224 <__aeabi_dmul+0x4c>
    5318:	4652      	mov	r2, sl
    531a:	432a      	orrs	r2, r5
    531c:	d12c      	bne.n	5378 <__aeabi_dmul+0x1a0>
    531e:	2500      	movs	r5, #0
    5320:	2300      	movs	r3, #0
    5322:	2202      	movs	r2, #2
    5324:	e797      	b.n	5256 <__aeabi_dmul+0x7e>
    5326:	4652      	mov	r2, sl
    5328:	432a      	orrs	r2, r5
    532a:	d021      	beq.n	5370 <__aeabi_dmul+0x198>
    532c:	2d00      	cmp	r5, #0
    532e:	d100      	bne.n	5332 <__aeabi_dmul+0x15a>
    5330:	e154      	b.n	55dc <__aeabi_dmul+0x404>
    5332:	0028      	movs	r0, r5
    5334:	f000 ff5a 	bl	61ec <__clzsi2>
    5338:	0003      	movs	r3, r0
    533a:	3b0b      	subs	r3, #11
    533c:	2b1c      	cmp	r3, #28
    533e:	dd00      	ble.n	5342 <__aeabi_dmul+0x16a>
    5340:	e146      	b.n	55d0 <__aeabi_dmul+0x3f8>
    5342:	211d      	movs	r1, #29
    5344:	1acb      	subs	r3, r1, r3
    5346:	4651      	mov	r1, sl
    5348:	0002      	movs	r2, r0
    534a:	40d9      	lsrs	r1, r3
    534c:	4653      	mov	r3, sl
    534e:	3a08      	subs	r2, #8
    5350:	4095      	lsls	r5, r2
    5352:	4093      	lsls	r3, r2
    5354:	430d      	orrs	r5, r1
    5356:	4a1b      	ldr	r2, [pc, #108]	; (53c4 <__aeabi_dmul+0x1ec>)
    5358:	4694      	mov	ip, r2
    535a:	4460      	add	r0, ip
    535c:	4240      	negs	r0, r0
    535e:	2200      	movs	r2, #0
    5360:	e779      	b.n	5256 <__aeabi_dmul+0x7e>
    5362:	2401      	movs	r4, #1
    5364:	2200      	movs	r2, #0
    5366:	400c      	ands	r4, r1
    5368:	4b12      	ldr	r3, [pc, #72]	; (53b4 <__aeabi_dmul+0x1dc>)
    536a:	2500      	movs	r5, #0
    536c:	4690      	mov	r8, r2
    536e:	e799      	b.n	52a4 <__aeabi_dmul+0xcc>
    5370:	2500      	movs	r5, #0
    5372:	2300      	movs	r3, #0
    5374:	2201      	movs	r2, #1
    5376:	e76e      	b.n	5256 <__aeabi_dmul+0x7e>
    5378:	2203      	movs	r2, #3
    537a:	e76c      	b.n	5256 <__aeabi_dmul+0x7e>
    537c:	2300      	movs	r3, #0
    537e:	469b      	mov	fp, r3
    5380:	4698      	mov	r8, r3
    5382:	3301      	adds	r3, #1
    5384:	2704      	movs	r7, #4
    5386:	9301      	str	r3, [sp, #4]
    5388:	e74c      	b.n	5224 <__aeabi_dmul+0x4c>
    538a:	2303      	movs	r3, #3
    538c:	270c      	movs	r7, #12
    538e:	9301      	str	r3, [sp, #4]
    5390:	e748      	b.n	5224 <__aeabi_dmul+0x4c>
    5392:	2300      	movs	r3, #0
    5394:	2580      	movs	r5, #128	; 0x80
    5396:	4698      	mov	r8, r3
    5398:	2400      	movs	r4, #0
    539a:	032d      	lsls	r5, r5, #12
    539c:	4b05      	ldr	r3, [pc, #20]	; (53b4 <__aeabi_dmul+0x1dc>)
    539e:	e781      	b.n	52a4 <__aeabi_dmul+0xcc>
    53a0:	465d      	mov	r5, fp
    53a2:	4643      	mov	r3, r8
    53a4:	9a01      	ldr	r2, [sp, #4]
    53a6:	e76f      	b.n	5288 <__aeabi_dmul+0xb0>
    53a8:	465d      	mov	r5, fp
    53aa:	4643      	mov	r3, r8
    53ac:	0021      	movs	r1, r4
    53ae:	9a01      	ldr	r2, [sp, #4]
    53b0:	e76a      	b.n	5288 <__aeabi_dmul+0xb0>
    53b2:	46c0      	nop			; (mov r8, r8)
    53b4:	000007ff 	.word	0x000007ff
    53b8:	fffffc01 	.word	0xfffffc01
    53bc:	00006468 	.word	0x00006468
    53c0:	800fffff 	.word	0x800fffff
    53c4:	000003f3 	.word	0x000003f3
    53c8:	4642      	mov	r2, r8
    53ca:	0c12      	lsrs	r2, r2, #16
    53cc:	4691      	mov	r9, r2
    53ce:	0c1a      	lsrs	r2, r3, #16
    53d0:	4694      	mov	ip, r2
    53d2:	4642      	mov	r2, r8
    53d4:	0417      	lsls	r7, r2, #16
    53d6:	464a      	mov	r2, r9
    53d8:	041b      	lsls	r3, r3, #16
    53da:	0c1b      	lsrs	r3, r3, #16
    53dc:	435a      	muls	r2, r3
    53de:	4660      	mov	r0, ip
    53e0:	4690      	mov	r8, r2
    53e2:	464a      	mov	r2, r9
    53e4:	4342      	muls	r2, r0
    53e6:	0010      	movs	r0, r2
    53e8:	9203      	str	r2, [sp, #12]
    53ea:	4662      	mov	r2, ip
    53ec:	001c      	movs	r4, r3
    53ee:	0c3f      	lsrs	r7, r7, #16
    53f0:	437a      	muls	r2, r7
    53f2:	437c      	muls	r4, r7
    53f4:	4442      	add	r2, r8
    53f6:	9201      	str	r2, [sp, #4]
    53f8:	0c22      	lsrs	r2, r4, #16
    53fa:	4692      	mov	sl, r2
    53fc:	9a01      	ldr	r2, [sp, #4]
    53fe:	4452      	add	r2, sl
    5400:	4590      	cmp	r8, r2
    5402:	d906      	bls.n	5412 <__aeabi_dmul+0x23a>
    5404:	4682      	mov	sl, r0
    5406:	2080      	movs	r0, #128	; 0x80
    5408:	0240      	lsls	r0, r0, #9
    540a:	4680      	mov	r8, r0
    540c:	44c2      	add	sl, r8
    540e:	4650      	mov	r0, sl
    5410:	9003      	str	r0, [sp, #12]
    5412:	0c10      	lsrs	r0, r2, #16
    5414:	9004      	str	r0, [sp, #16]
    5416:	4648      	mov	r0, r9
    5418:	0424      	lsls	r4, r4, #16
    541a:	0c24      	lsrs	r4, r4, #16
    541c:	0412      	lsls	r2, r2, #16
    541e:	1912      	adds	r2, r2, r4
    5420:	9205      	str	r2, [sp, #20]
    5422:	0c2a      	lsrs	r2, r5, #16
    5424:	042d      	lsls	r5, r5, #16
    5426:	0c2d      	lsrs	r5, r5, #16
    5428:	4368      	muls	r0, r5
    542a:	002c      	movs	r4, r5
    542c:	4682      	mov	sl, r0
    542e:	4648      	mov	r0, r9
    5430:	437c      	muls	r4, r7
    5432:	4350      	muls	r0, r2
    5434:	4681      	mov	r9, r0
    5436:	0c20      	lsrs	r0, r4, #16
    5438:	4680      	mov	r8, r0
    543a:	4357      	muls	r7, r2
    543c:	4457      	add	r7, sl
    543e:	4447      	add	r7, r8
    5440:	45ba      	cmp	sl, r7
    5442:	d903      	bls.n	544c <__aeabi_dmul+0x274>
    5444:	2080      	movs	r0, #128	; 0x80
    5446:	0240      	lsls	r0, r0, #9
    5448:	4680      	mov	r8, r0
    544a:	44c1      	add	r9, r8
    544c:	0c38      	lsrs	r0, r7, #16
    544e:	043f      	lsls	r7, r7, #16
    5450:	46b8      	mov	r8, r7
    5452:	4448      	add	r0, r9
    5454:	0424      	lsls	r4, r4, #16
    5456:	0c24      	lsrs	r4, r4, #16
    5458:	9001      	str	r0, [sp, #4]
    545a:	9804      	ldr	r0, [sp, #16]
    545c:	44a0      	add	r8, r4
    545e:	4440      	add	r0, r8
    5460:	9004      	str	r0, [sp, #16]
    5462:	4658      	mov	r0, fp
    5464:	0c00      	lsrs	r0, r0, #16
    5466:	4681      	mov	r9, r0
    5468:	4658      	mov	r0, fp
    546a:	0404      	lsls	r4, r0, #16
    546c:	0c20      	lsrs	r0, r4, #16
    546e:	4682      	mov	sl, r0
    5470:	0007      	movs	r7, r0
    5472:	4648      	mov	r0, r9
    5474:	435f      	muls	r7, r3
    5476:	464c      	mov	r4, r9
    5478:	4343      	muls	r3, r0
    547a:	4660      	mov	r0, ip
    547c:	4360      	muls	r0, r4
    547e:	4664      	mov	r4, ip
    5480:	4683      	mov	fp, r0
    5482:	4650      	mov	r0, sl
    5484:	4344      	muls	r4, r0
    5486:	0c38      	lsrs	r0, r7, #16
    5488:	4684      	mov	ip, r0
    548a:	18e4      	adds	r4, r4, r3
    548c:	4464      	add	r4, ip
    548e:	42a3      	cmp	r3, r4
    5490:	d903      	bls.n	549a <__aeabi_dmul+0x2c2>
    5492:	2380      	movs	r3, #128	; 0x80
    5494:	025b      	lsls	r3, r3, #9
    5496:	469c      	mov	ip, r3
    5498:	44e3      	add	fp, ip
    549a:	4648      	mov	r0, r9
    549c:	043f      	lsls	r7, r7, #16
    549e:	0c23      	lsrs	r3, r4, #16
    54a0:	0c3f      	lsrs	r7, r7, #16
    54a2:	0424      	lsls	r4, r4, #16
    54a4:	19e4      	adds	r4, r4, r7
    54a6:	4657      	mov	r7, sl
    54a8:	4368      	muls	r0, r5
    54aa:	436f      	muls	r7, r5
    54ac:	4684      	mov	ip, r0
    54ae:	464d      	mov	r5, r9
    54b0:	4650      	mov	r0, sl
    54b2:	4355      	muls	r5, r2
    54b4:	4342      	muls	r2, r0
    54b6:	0c38      	lsrs	r0, r7, #16
    54b8:	4681      	mov	r9, r0
    54ba:	4462      	add	r2, ip
    54bc:	444a      	add	r2, r9
    54be:	445b      	add	r3, fp
    54c0:	4594      	cmp	ip, r2
    54c2:	d903      	bls.n	54cc <__aeabi_dmul+0x2f4>
    54c4:	2080      	movs	r0, #128	; 0x80
    54c6:	0240      	lsls	r0, r0, #9
    54c8:	4684      	mov	ip, r0
    54ca:	4465      	add	r5, ip
    54cc:	9803      	ldr	r0, [sp, #12]
    54ce:	043f      	lsls	r7, r7, #16
    54d0:	4683      	mov	fp, r0
    54d2:	9804      	ldr	r0, [sp, #16]
    54d4:	0c3f      	lsrs	r7, r7, #16
    54d6:	4684      	mov	ip, r0
    54d8:	44e3      	add	fp, ip
    54da:	45c3      	cmp	fp, r8
    54dc:	4180      	sbcs	r0, r0
    54de:	4240      	negs	r0, r0
    54e0:	4682      	mov	sl, r0
    54e2:	0410      	lsls	r0, r2, #16
    54e4:	4684      	mov	ip, r0
    54e6:	9801      	ldr	r0, [sp, #4]
    54e8:	4467      	add	r7, ip
    54ea:	4684      	mov	ip, r0
    54ec:	4467      	add	r7, ip
    54ee:	44a3      	add	fp, r4
    54f0:	46bc      	mov	ip, r7
    54f2:	45a3      	cmp	fp, r4
    54f4:	41a4      	sbcs	r4, r4
    54f6:	4699      	mov	r9, r3
    54f8:	44d4      	add	ip, sl
    54fa:	4264      	negs	r4, r4
    54fc:	4287      	cmp	r7, r0
    54fe:	41bf      	sbcs	r7, r7
    5500:	45d4      	cmp	ip, sl
    5502:	4180      	sbcs	r0, r0
    5504:	44e1      	add	r9, ip
    5506:	46a0      	mov	r8, r4
    5508:	4599      	cmp	r9, r3
    550a:	419b      	sbcs	r3, r3
    550c:	427f      	negs	r7, r7
    550e:	4240      	negs	r0, r0
    5510:	44c8      	add	r8, r9
    5512:	4307      	orrs	r7, r0
    5514:	0c12      	lsrs	r2, r2, #16
    5516:	18ba      	adds	r2, r7, r2
    5518:	45a0      	cmp	r8, r4
    551a:	41a4      	sbcs	r4, r4
    551c:	425f      	negs	r7, r3
    551e:	003b      	movs	r3, r7
    5520:	4264      	negs	r4, r4
    5522:	4323      	orrs	r3, r4
    5524:	18d7      	adds	r7, r2, r3
    5526:	4643      	mov	r3, r8
    5528:	197d      	adds	r5, r7, r5
    552a:	0ddb      	lsrs	r3, r3, #23
    552c:	026d      	lsls	r5, r5, #9
    552e:	431d      	orrs	r5, r3
    5530:	465b      	mov	r3, fp
    5532:	025a      	lsls	r2, r3, #9
    5534:	9b05      	ldr	r3, [sp, #20]
    5536:	431a      	orrs	r2, r3
    5538:	1e53      	subs	r3, r2, #1
    553a:	419a      	sbcs	r2, r3
    553c:	465b      	mov	r3, fp
    553e:	0ddb      	lsrs	r3, r3, #23
    5540:	431a      	orrs	r2, r3
    5542:	4643      	mov	r3, r8
    5544:	025b      	lsls	r3, r3, #9
    5546:	4313      	orrs	r3, r2
    5548:	01ea      	lsls	r2, r5, #7
    554a:	d507      	bpl.n	555c <__aeabi_dmul+0x384>
    554c:	2201      	movs	r2, #1
    554e:	085c      	lsrs	r4, r3, #1
    5550:	4013      	ands	r3, r2
    5552:	4323      	orrs	r3, r4
    5554:	07ea      	lsls	r2, r5, #31
    5556:	9e02      	ldr	r6, [sp, #8]
    5558:	4313      	orrs	r3, r2
    555a:	086d      	lsrs	r5, r5, #1
    555c:	4a57      	ldr	r2, [pc, #348]	; (56bc <__aeabi_dmul+0x4e4>)
    555e:	18b2      	adds	r2, r6, r2
    5560:	2a00      	cmp	r2, #0
    5562:	dd4b      	ble.n	55fc <__aeabi_dmul+0x424>
    5564:	0758      	lsls	r0, r3, #29
    5566:	d009      	beq.n	557c <__aeabi_dmul+0x3a4>
    5568:	200f      	movs	r0, #15
    556a:	4018      	ands	r0, r3
    556c:	2804      	cmp	r0, #4
    556e:	d005      	beq.n	557c <__aeabi_dmul+0x3a4>
    5570:	1d18      	adds	r0, r3, #4
    5572:	4298      	cmp	r0, r3
    5574:	419b      	sbcs	r3, r3
    5576:	425b      	negs	r3, r3
    5578:	18ed      	adds	r5, r5, r3
    557a:	0003      	movs	r3, r0
    557c:	01e8      	lsls	r0, r5, #7
    557e:	d504      	bpl.n	558a <__aeabi_dmul+0x3b2>
    5580:	4a4f      	ldr	r2, [pc, #316]	; (56c0 <__aeabi_dmul+0x4e8>)
    5582:	4015      	ands	r5, r2
    5584:	2280      	movs	r2, #128	; 0x80
    5586:	00d2      	lsls	r2, r2, #3
    5588:	18b2      	adds	r2, r6, r2
    558a:	484e      	ldr	r0, [pc, #312]	; (56c4 <__aeabi_dmul+0x4ec>)
    558c:	4282      	cmp	r2, r0
    558e:	dd00      	ble.n	5592 <__aeabi_dmul+0x3ba>
    5590:	e6e7      	b.n	5362 <__aeabi_dmul+0x18a>
    5592:	2401      	movs	r4, #1
    5594:	08db      	lsrs	r3, r3, #3
    5596:	0768      	lsls	r0, r5, #29
    5598:	4318      	orrs	r0, r3
    559a:	026d      	lsls	r5, r5, #9
    559c:	0553      	lsls	r3, r2, #21
    559e:	4680      	mov	r8, r0
    55a0:	0b2d      	lsrs	r5, r5, #12
    55a2:	0d5b      	lsrs	r3, r3, #21
    55a4:	400c      	ands	r4, r1
    55a6:	e67d      	b.n	52a4 <__aeabi_dmul+0xcc>
    55a8:	2280      	movs	r2, #128	; 0x80
    55aa:	4659      	mov	r1, fp
    55ac:	0312      	lsls	r2, r2, #12
    55ae:	4211      	tst	r1, r2
    55b0:	d008      	beq.n	55c4 <__aeabi_dmul+0x3ec>
    55b2:	4215      	tst	r5, r2
    55b4:	d106      	bne.n	55c4 <__aeabi_dmul+0x3ec>
    55b6:	4315      	orrs	r5, r2
    55b8:	032d      	lsls	r5, r5, #12
    55ba:	4698      	mov	r8, r3
    55bc:	0b2d      	lsrs	r5, r5, #12
    55be:	464c      	mov	r4, r9
    55c0:	4b41      	ldr	r3, [pc, #260]	; (56c8 <__aeabi_dmul+0x4f0>)
    55c2:	e66f      	b.n	52a4 <__aeabi_dmul+0xcc>
    55c4:	465d      	mov	r5, fp
    55c6:	4315      	orrs	r5, r2
    55c8:	032d      	lsls	r5, r5, #12
    55ca:	0b2d      	lsrs	r5, r5, #12
    55cc:	4b3e      	ldr	r3, [pc, #248]	; (56c8 <__aeabi_dmul+0x4f0>)
    55ce:	e669      	b.n	52a4 <__aeabi_dmul+0xcc>
    55d0:	0003      	movs	r3, r0
    55d2:	4655      	mov	r5, sl
    55d4:	3b28      	subs	r3, #40	; 0x28
    55d6:	409d      	lsls	r5, r3
    55d8:	2300      	movs	r3, #0
    55da:	e6bc      	b.n	5356 <__aeabi_dmul+0x17e>
    55dc:	4650      	mov	r0, sl
    55de:	f000 fe05 	bl	61ec <__clzsi2>
    55e2:	3020      	adds	r0, #32
    55e4:	e6a8      	b.n	5338 <__aeabi_dmul+0x160>
    55e6:	0003      	movs	r3, r0
    55e8:	3b28      	subs	r3, #40	; 0x28
    55ea:	409f      	lsls	r7, r3
    55ec:	2300      	movs	r3, #0
    55ee:	46bb      	mov	fp, r7
    55f0:	4698      	mov	r8, r3
    55f2:	e689      	b.n	5308 <__aeabi_dmul+0x130>
    55f4:	f000 fdfa 	bl	61ec <__clzsi2>
    55f8:	3020      	adds	r0, #32
    55fa:	e673      	b.n	52e4 <__aeabi_dmul+0x10c>
    55fc:	2401      	movs	r4, #1
    55fe:	1aa6      	subs	r6, r4, r2
    5600:	2e38      	cmp	r6, #56	; 0x38
    5602:	dd07      	ble.n	5614 <__aeabi_dmul+0x43c>
    5604:	2200      	movs	r2, #0
    5606:	400c      	ands	r4, r1
    5608:	2300      	movs	r3, #0
    560a:	2500      	movs	r5, #0
    560c:	4690      	mov	r8, r2
    560e:	e649      	b.n	52a4 <__aeabi_dmul+0xcc>
    5610:	9e02      	ldr	r6, [sp, #8]
    5612:	e7a3      	b.n	555c <__aeabi_dmul+0x384>
    5614:	2e1f      	cmp	r6, #31
    5616:	dc20      	bgt.n	565a <__aeabi_dmul+0x482>
    5618:	2220      	movs	r2, #32
    561a:	002c      	movs	r4, r5
    561c:	0018      	movs	r0, r3
    561e:	1b92      	subs	r2, r2, r6
    5620:	40f0      	lsrs	r0, r6
    5622:	4094      	lsls	r4, r2
    5624:	4093      	lsls	r3, r2
    5626:	4304      	orrs	r4, r0
    5628:	1e58      	subs	r0, r3, #1
    562a:	4183      	sbcs	r3, r0
    562c:	431c      	orrs	r4, r3
    562e:	40f5      	lsrs	r5, r6
    5630:	0763      	lsls	r3, r4, #29
    5632:	d009      	beq.n	5648 <__aeabi_dmul+0x470>
    5634:	230f      	movs	r3, #15
    5636:	4023      	ands	r3, r4
    5638:	2b04      	cmp	r3, #4
    563a:	d005      	beq.n	5648 <__aeabi_dmul+0x470>
    563c:	0023      	movs	r3, r4
    563e:	1d1c      	adds	r4, r3, #4
    5640:	429c      	cmp	r4, r3
    5642:	4192      	sbcs	r2, r2
    5644:	4252      	negs	r2, r2
    5646:	18ad      	adds	r5, r5, r2
    5648:	022b      	lsls	r3, r5, #8
    564a:	d51f      	bpl.n	568c <__aeabi_dmul+0x4b4>
    564c:	2401      	movs	r4, #1
    564e:	2200      	movs	r2, #0
    5650:	400c      	ands	r4, r1
    5652:	2301      	movs	r3, #1
    5654:	2500      	movs	r5, #0
    5656:	4690      	mov	r8, r2
    5658:	e624      	b.n	52a4 <__aeabi_dmul+0xcc>
    565a:	201f      	movs	r0, #31
    565c:	002c      	movs	r4, r5
    565e:	4240      	negs	r0, r0
    5660:	1a82      	subs	r2, r0, r2
    5662:	40d4      	lsrs	r4, r2
    5664:	2e20      	cmp	r6, #32
    5666:	d01c      	beq.n	56a2 <__aeabi_dmul+0x4ca>
    5668:	2240      	movs	r2, #64	; 0x40
    566a:	1b96      	subs	r6, r2, r6
    566c:	40b5      	lsls	r5, r6
    566e:	432b      	orrs	r3, r5
    5670:	1e58      	subs	r0, r3, #1
    5672:	4183      	sbcs	r3, r0
    5674:	2007      	movs	r0, #7
    5676:	4323      	orrs	r3, r4
    5678:	4018      	ands	r0, r3
    567a:	2500      	movs	r5, #0
    567c:	2800      	cmp	r0, #0
    567e:	d009      	beq.n	5694 <__aeabi_dmul+0x4bc>
    5680:	220f      	movs	r2, #15
    5682:	2500      	movs	r5, #0
    5684:	401a      	ands	r2, r3
    5686:	001c      	movs	r4, r3
    5688:	2a04      	cmp	r2, #4
    568a:	d1d8      	bne.n	563e <__aeabi_dmul+0x466>
    568c:	0023      	movs	r3, r4
    568e:	0768      	lsls	r0, r5, #29
    5690:	026d      	lsls	r5, r5, #9
    5692:	0b2d      	lsrs	r5, r5, #12
    5694:	2401      	movs	r4, #1
    5696:	08db      	lsrs	r3, r3, #3
    5698:	4303      	orrs	r3, r0
    569a:	4698      	mov	r8, r3
    569c:	400c      	ands	r4, r1
    569e:	2300      	movs	r3, #0
    56a0:	e600      	b.n	52a4 <__aeabi_dmul+0xcc>
    56a2:	2500      	movs	r5, #0
    56a4:	e7e3      	b.n	566e <__aeabi_dmul+0x496>
    56a6:	2280      	movs	r2, #128	; 0x80
    56a8:	2401      	movs	r4, #1
    56aa:	0312      	lsls	r2, r2, #12
    56ac:	4315      	orrs	r5, r2
    56ae:	032d      	lsls	r5, r5, #12
    56b0:	4698      	mov	r8, r3
    56b2:	0b2d      	lsrs	r5, r5, #12
    56b4:	400c      	ands	r4, r1
    56b6:	4b04      	ldr	r3, [pc, #16]	; (56c8 <__aeabi_dmul+0x4f0>)
    56b8:	e5f4      	b.n	52a4 <__aeabi_dmul+0xcc>
    56ba:	46c0      	nop			; (mov r8, r8)
    56bc:	000003ff 	.word	0x000003ff
    56c0:	feffffff 	.word	0xfeffffff
    56c4:	000007fe 	.word	0x000007fe
    56c8:	000007ff 	.word	0x000007ff

000056cc <__aeabi_dsub>:
    56cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    56ce:	4657      	mov	r7, sl
    56d0:	464e      	mov	r6, r9
    56d2:	4645      	mov	r5, r8
    56d4:	b4e0      	push	{r5, r6, r7}
    56d6:	000e      	movs	r6, r1
    56d8:	0011      	movs	r1, r2
    56da:	0ff2      	lsrs	r2, r6, #31
    56dc:	4692      	mov	sl, r2
    56de:	00c5      	lsls	r5, r0, #3
    56e0:	0f42      	lsrs	r2, r0, #29
    56e2:	0318      	lsls	r0, r3, #12
    56e4:	0337      	lsls	r7, r6, #12
    56e6:	0074      	lsls	r4, r6, #1
    56e8:	0a40      	lsrs	r0, r0, #9
    56ea:	0f4e      	lsrs	r6, r1, #29
    56ec:	0a7f      	lsrs	r7, r7, #9
    56ee:	4330      	orrs	r0, r6
    56f0:	4ecf      	ldr	r6, [pc, #828]	; (5a30 <__aeabi_dsub+0x364>)
    56f2:	4317      	orrs	r7, r2
    56f4:	005a      	lsls	r2, r3, #1
    56f6:	0d64      	lsrs	r4, r4, #21
    56f8:	0d52      	lsrs	r2, r2, #21
    56fa:	0fdb      	lsrs	r3, r3, #31
    56fc:	00c9      	lsls	r1, r1, #3
    56fe:	42b2      	cmp	r2, r6
    5700:	d100      	bne.n	5704 <__aeabi_dsub+0x38>
    5702:	e0e5      	b.n	58d0 <__aeabi_dsub+0x204>
    5704:	2601      	movs	r6, #1
    5706:	4073      	eors	r3, r6
    5708:	1aa6      	subs	r6, r4, r2
    570a:	46b4      	mov	ip, r6
    570c:	4553      	cmp	r3, sl
    570e:	d100      	bne.n	5712 <__aeabi_dsub+0x46>
    5710:	e0af      	b.n	5872 <__aeabi_dsub+0x1a6>
    5712:	2e00      	cmp	r6, #0
    5714:	dc00      	bgt.n	5718 <__aeabi_dsub+0x4c>
    5716:	e10d      	b.n	5934 <__aeabi_dsub+0x268>
    5718:	2a00      	cmp	r2, #0
    571a:	d13a      	bne.n	5792 <__aeabi_dsub+0xc6>
    571c:	0003      	movs	r3, r0
    571e:	430b      	orrs	r3, r1
    5720:	d000      	beq.n	5724 <__aeabi_dsub+0x58>
    5722:	e0e4      	b.n	58ee <__aeabi_dsub+0x222>
    5724:	076b      	lsls	r3, r5, #29
    5726:	d009      	beq.n	573c <__aeabi_dsub+0x70>
    5728:	230f      	movs	r3, #15
    572a:	402b      	ands	r3, r5
    572c:	2b04      	cmp	r3, #4
    572e:	d005      	beq.n	573c <__aeabi_dsub+0x70>
    5730:	1d2b      	adds	r3, r5, #4
    5732:	42ab      	cmp	r3, r5
    5734:	41ad      	sbcs	r5, r5
    5736:	426d      	negs	r5, r5
    5738:	197f      	adds	r7, r7, r5
    573a:	001d      	movs	r5, r3
    573c:	023b      	lsls	r3, r7, #8
    573e:	d400      	bmi.n	5742 <__aeabi_dsub+0x76>
    5740:	e088      	b.n	5854 <__aeabi_dsub+0x188>
    5742:	4bbb      	ldr	r3, [pc, #748]	; (5a30 <__aeabi_dsub+0x364>)
    5744:	3401      	adds	r4, #1
    5746:	429c      	cmp	r4, r3
    5748:	d100      	bne.n	574c <__aeabi_dsub+0x80>
    574a:	e110      	b.n	596e <__aeabi_dsub+0x2a2>
    574c:	003a      	movs	r2, r7
    574e:	4bb9      	ldr	r3, [pc, #740]	; (5a34 <__aeabi_dsub+0x368>)
    5750:	4651      	mov	r1, sl
    5752:	401a      	ands	r2, r3
    5754:	2301      	movs	r3, #1
    5756:	0750      	lsls	r0, r2, #29
    5758:	08ed      	lsrs	r5, r5, #3
    575a:	0252      	lsls	r2, r2, #9
    575c:	0564      	lsls	r4, r4, #21
    575e:	4305      	orrs	r5, r0
    5760:	0b12      	lsrs	r2, r2, #12
    5762:	0d64      	lsrs	r4, r4, #21
    5764:	400b      	ands	r3, r1
    5766:	2100      	movs	r1, #0
    5768:	0028      	movs	r0, r5
    576a:	0312      	lsls	r2, r2, #12
    576c:	0d0d      	lsrs	r5, r1, #20
    576e:	0b12      	lsrs	r2, r2, #12
    5770:	0564      	lsls	r4, r4, #21
    5772:	052d      	lsls	r5, r5, #20
    5774:	4315      	orrs	r5, r2
    5776:	0862      	lsrs	r2, r4, #1
    5778:	4caf      	ldr	r4, [pc, #700]	; (5a38 <__aeabi_dsub+0x36c>)
    577a:	07db      	lsls	r3, r3, #31
    577c:	402c      	ands	r4, r5
    577e:	4314      	orrs	r4, r2
    5780:	0064      	lsls	r4, r4, #1
    5782:	0864      	lsrs	r4, r4, #1
    5784:	431c      	orrs	r4, r3
    5786:	0021      	movs	r1, r4
    5788:	bc1c      	pop	{r2, r3, r4}
    578a:	4690      	mov	r8, r2
    578c:	4699      	mov	r9, r3
    578e:	46a2      	mov	sl, r4
    5790:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5792:	4ba7      	ldr	r3, [pc, #668]	; (5a30 <__aeabi_dsub+0x364>)
    5794:	429c      	cmp	r4, r3
    5796:	d0c5      	beq.n	5724 <__aeabi_dsub+0x58>
    5798:	2380      	movs	r3, #128	; 0x80
    579a:	041b      	lsls	r3, r3, #16
    579c:	4318      	orrs	r0, r3
    579e:	4663      	mov	r3, ip
    57a0:	2b38      	cmp	r3, #56	; 0x38
    57a2:	dd00      	ble.n	57a6 <__aeabi_dsub+0xda>
    57a4:	e0fd      	b.n	59a2 <__aeabi_dsub+0x2d6>
    57a6:	2b1f      	cmp	r3, #31
    57a8:	dd00      	ble.n	57ac <__aeabi_dsub+0xe0>
    57aa:	e130      	b.n	5a0e <__aeabi_dsub+0x342>
    57ac:	4662      	mov	r2, ip
    57ae:	2320      	movs	r3, #32
    57b0:	1a9b      	subs	r3, r3, r2
    57b2:	0002      	movs	r2, r0
    57b4:	409a      	lsls	r2, r3
    57b6:	4666      	mov	r6, ip
    57b8:	4690      	mov	r8, r2
    57ba:	000a      	movs	r2, r1
    57bc:	4099      	lsls	r1, r3
    57be:	40f2      	lsrs	r2, r6
    57c0:	4646      	mov	r6, r8
    57c2:	1e4b      	subs	r3, r1, #1
    57c4:	4199      	sbcs	r1, r3
    57c6:	4332      	orrs	r2, r6
    57c8:	4311      	orrs	r1, r2
    57ca:	4663      	mov	r3, ip
    57cc:	0002      	movs	r2, r0
    57ce:	40da      	lsrs	r2, r3
    57d0:	1a69      	subs	r1, r5, r1
    57d2:	428d      	cmp	r5, r1
    57d4:	419b      	sbcs	r3, r3
    57d6:	000d      	movs	r5, r1
    57d8:	1aba      	subs	r2, r7, r2
    57da:	425b      	negs	r3, r3
    57dc:	1ad7      	subs	r7, r2, r3
    57de:	023b      	lsls	r3, r7, #8
    57e0:	d535      	bpl.n	584e <__aeabi_dsub+0x182>
    57e2:	027a      	lsls	r2, r7, #9
    57e4:	0a53      	lsrs	r3, r2, #9
    57e6:	4698      	mov	r8, r3
    57e8:	4643      	mov	r3, r8
    57ea:	2b00      	cmp	r3, #0
    57ec:	d100      	bne.n	57f0 <__aeabi_dsub+0x124>
    57ee:	e0c4      	b.n	597a <__aeabi_dsub+0x2ae>
    57f0:	4640      	mov	r0, r8
    57f2:	f000 fcfb 	bl	61ec <__clzsi2>
    57f6:	0003      	movs	r3, r0
    57f8:	3b08      	subs	r3, #8
    57fa:	2b1f      	cmp	r3, #31
    57fc:	dd00      	ble.n	5800 <__aeabi_dsub+0x134>
    57fe:	e0c5      	b.n	598c <__aeabi_dsub+0x2c0>
    5800:	2220      	movs	r2, #32
    5802:	0029      	movs	r1, r5
    5804:	1ad2      	subs	r2, r2, r3
    5806:	4647      	mov	r7, r8
    5808:	40d1      	lsrs	r1, r2
    580a:	409f      	lsls	r7, r3
    580c:	000a      	movs	r2, r1
    580e:	409d      	lsls	r5, r3
    5810:	433a      	orrs	r2, r7
    5812:	429c      	cmp	r4, r3
    5814:	dd00      	ble.n	5818 <__aeabi_dsub+0x14c>
    5816:	e0c0      	b.n	599a <__aeabi_dsub+0x2ce>
    5818:	1b1c      	subs	r4, r3, r4
    581a:	1c63      	adds	r3, r4, #1
    581c:	2b1f      	cmp	r3, #31
    581e:	dd00      	ble.n	5822 <__aeabi_dsub+0x156>
    5820:	e0e4      	b.n	59ec <__aeabi_dsub+0x320>
    5822:	2120      	movs	r1, #32
    5824:	0014      	movs	r4, r2
    5826:	0028      	movs	r0, r5
    5828:	1ac9      	subs	r1, r1, r3
    582a:	40d8      	lsrs	r0, r3
    582c:	408c      	lsls	r4, r1
    582e:	408d      	lsls	r5, r1
    5830:	4304      	orrs	r4, r0
    5832:	40da      	lsrs	r2, r3
    5834:	1e68      	subs	r0, r5, #1
    5836:	4185      	sbcs	r5, r0
    5838:	0017      	movs	r7, r2
    583a:	4325      	orrs	r5, r4
    583c:	2400      	movs	r4, #0
    583e:	e771      	b.n	5724 <__aeabi_dsub+0x58>
    5840:	4642      	mov	r2, r8
    5842:	4663      	mov	r3, ip
    5844:	431a      	orrs	r2, r3
    5846:	d100      	bne.n	584a <__aeabi_dsub+0x17e>
    5848:	e24c      	b.n	5ce4 <__aeabi_dsub+0x618>
    584a:	4667      	mov	r7, ip
    584c:	4645      	mov	r5, r8
    584e:	076b      	lsls	r3, r5, #29
    5850:	d000      	beq.n	5854 <__aeabi_dsub+0x188>
    5852:	e769      	b.n	5728 <__aeabi_dsub+0x5c>
    5854:	2301      	movs	r3, #1
    5856:	4651      	mov	r1, sl
    5858:	0778      	lsls	r0, r7, #29
    585a:	08ed      	lsrs	r5, r5, #3
    585c:	08fa      	lsrs	r2, r7, #3
    585e:	400b      	ands	r3, r1
    5860:	4305      	orrs	r5, r0
    5862:	4973      	ldr	r1, [pc, #460]	; (5a30 <__aeabi_dsub+0x364>)
    5864:	428c      	cmp	r4, r1
    5866:	d038      	beq.n	58da <__aeabi_dsub+0x20e>
    5868:	0312      	lsls	r2, r2, #12
    586a:	0564      	lsls	r4, r4, #21
    586c:	0b12      	lsrs	r2, r2, #12
    586e:	0d64      	lsrs	r4, r4, #21
    5870:	e779      	b.n	5766 <__aeabi_dsub+0x9a>
    5872:	2e00      	cmp	r6, #0
    5874:	dc00      	bgt.n	5878 <__aeabi_dsub+0x1ac>
    5876:	e09a      	b.n	59ae <__aeabi_dsub+0x2e2>
    5878:	2a00      	cmp	r2, #0
    587a:	d047      	beq.n	590c <__aeabi_dsub+0x240>
    587c:	4a6c      	ldr	r2, [pc, #432]	; (5a30 <__aeabi_dsub+0x364>)
    587e:	4294      	cmp	r4, r2
    5880:	d100      	bne.n	5884 <__aeabi_dsub+0x1b8>
    5882:	e74f      	b.n	5724 <__aeabi_dsub+0x58>
    5884:	2280      	movs	r2, #128	; 0x80
    5886:	0412      	lsls	r2, r2, #16
    5888:	4310      	orrs	r0, r2
    588a:	4662      	mov	r2, ip
    588c:	2a38      	cmp	r2, #56	; 0x38
    588e:	dc00      	bgt.n	5892 <__aeabi_dsub+0x1c6>
    5890:	e108      	b.n	5aa4 <__aeabi_dsub+0x3d8>
    5892:	4301      	orrs	r1, r0
    5894:	1e48      	subs	r0, r1, #1
    5896:	4181      	sbcs	r1, r0
    5898:	2200      	movs	r2, #0
    589a:	b2c9      	uxtb	r1, r1
    589c:	1949      	adds	r1, r1, r5
    589e:	19d2      	adds	r2, r2, r7
    58a0:	42a9      	cmp	r1, r5
    58a2:	41bf      	sbcs	r7, r7
    58a4:	000d      	movs	r5, r1
    58a6:	427f      	negs	r7, r7
    58a8:	18bf      	adds	r7, r7, r2
    58aa:	023a      	lsls	r2, r7, #8
    58ac:	d400      	bmi.n	58b0 <__aeabi_dsub+0x1e4>
    58ae:	e142      	b.n	5b36 <__aeabi_dsub+0x46a>
    58b0:	4a5f      	ldr	r2, [pc, #380]	; (5a30 <__aeabi_dsub+0x364>)
    58b2:	3401      	adds	r4, #1
    58b4:	4294      	cmp	r4, r2
    58b6:	d100      	bne.n	58ba <__aeabi_dsub+0x1ee>
    58b8:	e14e      	b.n	5b58 <__aeabi_dsub+0x48c>
    58ba:	2001      	movs	r0, #1
    58bc:	4a5d      	ldr	r2, [pc, #372]	; (5a34 <__aeabi_dsub+0x368>)
    58be:	0869      	lsrs	r1, r5, #1
    58c0:	403a      	ands	r2, r7
    58c2:	4028      	ands	r0, r5
    58c4:	4308      	orrs	r0, r1
    58c6:	07d5      	lsls	r5, r2, #31
    58c8:	4305      	orrs	r5, r0
    58ca:	0857      	lsrs	r7, r2, #1
    58cc:	469a      	mov	sl, r3
    58ce:	e729      	b.n	5724 <__aeabi_dsub+0x58>
    58d0:	0006      	movs	r6, r0
    58d2:	430e      	orrs	r6, r1
    58d4:	d000      	beq.n	58d8 <__aeabi_dsub+0x20c>
    58d6:	e717      	b.n	5708 <__aeabi_dsub+0x3c>
    58d8:	e714      	b.n	5704 <__aeabi_dsub+0x38>
    58da:	0029      	movs	r1, r5
    58dc:	4311      	orrs	r1, r2
    58de:	d100      	bne.n	58e2 <__aeabi_dsub+0x216>
    58e0:	e1f9      	b.n	5cd6 <__aeabi_dsub+0x60a>
    58e2:	2180      	movs	r1, #128	; 0x80
    58e4:	0309      	lsls	r1, r1, #12
    58e6:	430a      	orrs	r2, r1
    58e8:	0312      	lsls	r2, r2, #12
    58ea:	0b12      	lsrs	r2, r2, #12
    58ec:	e73b      	b.n	5766 <__aeabi_dsub+0x9a>
    58ee:	2301      	movs	r3, #1
    58f0:	425b      	negs	r3, r3
    58f2:	4698      	mov	r8, r3
    58f4:	44c4      	add	ip, r8
    58f6:	4663      	mov	r3, ip
    58f8:	2b00      	cmp	r3, #0
    58fa:	d172      	bne.n	59e2 <__aeabi_dsub+0x316>
    58fc:	1a69      	subs	r1, r5, r1
    58fe:	428d      	cmp	r5, r1
    5900:	419b      	sbcs	r3, r3
    5902:	1a3f      	subs	r7, r7, r0
    5904:	425b      	negs	r3, r3
    5906:	1aff      	subs	r7, r7, r3
    5908:	000d      	movs	r5, r1
    590a:	e768      	b.n	57de <__aeabi_dsub+0x112>
    590c:	0002      	movs	r2, r0
    590e:	430a      	orrs	r2, r1
    5910:	d100      	bne.n	5914 <__aeabi_dsub+0x248>
    5912:	e707      	b.n	5724 <__aeabi_dsub+0x58>
    5914:	2201      	movs	r2, #1
    5916:	4252      	negs	r2, r2
    5918:	4690      	mov	r8, r2
    591a:	44c4      	add	ip, r8
    591c:	4662      	mov	r2, ip
    591e:	2a00      	cmp	r2, #0
    5920:	d000      	beq.n	5924 <__aeabi_dsub+0x258>
    5922:	e0e6      	b.n	5af2 <__aeabi_dsub+0x426>
    5924:	1869      	adds	r1, r5, r1
    5926:	42a9      	cmp	r1, r5
    5928:	41b6      	sbcs	r6, r6
    592a:	183f      	adds	r7, r7, r0
    592c:	4276      	negs	r6, r6
    592e:	19f7      	adds	r7, r6, r7
    5930:	000d      	movs	r5, r1
    5932:	e7ba      	b.n	58aa <__aeabi_dsub+0x1de>
    5934:	2e00      	cmp	r6, #0
    5936:	d000      	beq.n	593a <__aeabi_dsub+0x26e>
    5938:	e080      	b.n	5a3c <__aeabi_dsub+0x370>
    593a:	1c62      	adds	r2, r4, #1
    593c:	0552      	lsls	r2, r2, #21
    593e:	0d52      	lsrs	r2, r2, #21
    5940:	2a01      	cmp	r2, #1
    5942:	dc00      	bgt.n	5946 <__aeabi_dsub+0x27a>
    5944:	e0f9      	b.n	5b3a <__aeabi_dsub+0x46e>
    5946:	1a6a      	subs	r2, r5, r1
    5948:	4691      	mov	r9, r2
    594a:	454d      	cmp	r5, r9
    594c:	41b6      	sbcs	r6, r6
    594e:	1a3a      	subs	r2, r7, r0
    5950:	4276      	negs	r6, r6
    5952:	1b92      	subs	r2, r2, r6
    5954:	4690      	mov	r8, r2
    5956:	0212      	lsls	r2, r2, #8
    5958:	d400      	bmi.n	595c <__aeabi_dsub+0x290>
    595a:	e099      	b.n	5a90 <__aeabi_dsub+0x3c4>
    595c:	1b4d      	subs	r5, r1, r5
    595e:	42a9      	cmp	r1, r5
    5960:	4189      	sbcs	r1, r1
    5962:	1bc7      	subs	r7, r0, r7
    5964:	4249      	negs	r1, r1
    5966:	1a7a      	subs	r2, r7, r1
    5968:	4690      	mov	r8, r2
    596a:	469a      	mov	sl, r3
    596c:	e73c      	b.n	57e8 <__aeabi_dsub+0x11c>
    596e:	4652      	mov	r2, sl
    5970:	2301      	movs	r3, #1
    5972:	2500      	movs	r5, #0
    5974:	4013      	ands	r3, r2
    5976:	2200      	movs	r2, #0
    5978:	e6f5      	b.n	5766 <__aeabi_dsub+0x9a>
    597a:	0028      	movs	r0, r5
    597c:	f000 fc36 	bl	61ec <__clzsi2>
    5980:	3020      	adds	r0, #32
    5982:	0003      	movs	r3, r0
    5984:	3b08      	subs	r3, #8
    5986:	2b1f      	cmp	r3, #31
    5988:	dc00      	bgt.n	598c <__aeabi_dsub+0x2c0>
    598a:	e739      	b.n	5800 <__aeabi_dsub+0x134>
    598c:	002a      	movs	r2, r5
    598e:	3828      	subs	r0, #40	; 0x28
    5990:	4082      	lsls	r2, r0
    5992:	2500      	movs	r5, #0
    5994:	429c      	cmp	r4, r3
    5996:	dc00      	bgt.n	599a <__aeabi_dsub+0x2ce>
    5998:	e73e      	b.n	5818 <__aeabi_dsub+0x14c>
    599a:	4f26      	ldr	r7, [pc, #152]	; (5a34 <__aeabi_dsub+0x368>)
    599c:	1ae4      	subs	r4, r4, r3
    599e:	4017      	ands	r7, r2
    59a0:	e6c0      	b.n	5724 <__aeabi_dsub+0x58>
    59a2:	4301      	orrs	r1, r0
    59a4:	1e48      	subs	r0, r1, #1
    59a6:	4181      	sbcs	r1, r0
    59a8:	2200      	movs	r2, #0
    59aa:	b2c9      	uxtb	r1, r1
    59ac:	e710      	b.n	57d0 <__aeabi_dsub+0x104>
    59ae:	2e00      	cmp	r6, #0
    59b0:	d000      	beq.n	59b4 <__aeabi_dsub+0x2e8>
    59b2:	e0f1      	b.n	5b98 <__aeabi_dsub+0x4cc>
    59b4:	1c62      	adds	r2, r4, #1
    59b6:	4694      	mov	ip, r2
    59b8:	0552      	lsls	r2, r2, #21
    59ba:	0d52      	lsrs	r2, r2, #21
    59bc:	2a01      	cmp	r2, #1
    59be:	dc00      	bgt.n	59c2 <__aeabi_dsub+0x2f6>
    59c0:	e0a0      	b.n	5b04 <__aeabi_dsub+0x438>
    59c2:	4a1b      	ldr	r2, [pc, #108]	; (5a30 <__aeabi_dsub+0x364>)
    59c4:	4594      	cmp	ip, r2
    59c6:	d100      	bne.n	59ca <__aeabi_dsub+0x2fe>
    59c8:	e0c5      	b.n	5b56 <__aeabi_dsub+0x48a>
    59ca:	1869      	adds	r1, r5, r1
    59cc:	42a9      	cmp	r1, r5
    59ce:	4192      	sbcs	r2, r2
    59d0:	183f      	adds	r7, r7, r0
    59d2:	4252      	negs	r2, r2
    59d4:	19d2      	adds	r2, r2, r7
    59d6:	0849      	lsrs	r1, r1, #1
    59d8:	07d5      	lsls	r5, r2, #31
    59da:	430d      	orrs	r5, r1
    59dc:	0857      	lsrs	r7, r2, #1
    59de:	4664      	mov	r4, ip
    59e0:	e6a0      	b.n	5724 <__aeabi_dsub+0x58>
    59e2:	4b13      	ldr	r3, [pc, #76]	; (5a30 <__aeabi_dsub+0x364>)
    59e4:	429c      	cmp	r4, r3
    59e6:	d000      	beq.n	59ea <__aeabi_dsub+0x31e>
    59e8:	e6d9      	b.n	579e <__aeabi_dsub+0xd2>
    59ea:	e69b      	b.n	5724 <__aeabi_dsub+0x58>
    59ec:	0011      	movs	r1, r2
    59ee:	3c1f      	subs	r4, #31
    59f0:	40e1      	lsrs	r1, r4
    59f2:	000c      	movs	r4, r1
    59f4:	2b20      	cmp	r3, #32
    59f6:	d100      	bne.n	59fa <__aeabi_dsub+0x32e>
    59f8:	e080      	b.n	5afc <__aeabi_dsub+0x430>
    59fa:	2140      	movs	r1, #64	; 0x40
    59fc:	1acb      	subs	r3, r1, r3
    59fe:	409a      	lsls	r2, r3
    5a00:	4315      	orrs	r5, r2
    5a02:	1e6a      	subs	r2, r5, #1
    5a04:	4195      	sbcs	r5, r2
    5a06:	2700      	movs	r7, #0
    5a08:	4325      	orrs	r5, r4
    5a0a:	2400      	movs	r4, #0
    5a0c:	e71f      	b.n	584e <__aeabi_dsub+0x182>
    5a0e:	4663      	mov	r3, ip
    5a10:	0002      	movs	r2, r0
    5a12:	3b20      	subs	r3, #32
    5a14:	40da      	lsrs	r2, r3
    5a16:	4663      	mov	r3, ip
    5a18:	2b20      	cmp	r3, #32
    5a1a:	d071      	beq.n	5b00 <__aeabi_dsub+0x434>
    5a1c:	2340      	movs	r3, #64	; 0x40
    5a1e:	4666      	mov	r6, ip
    5a20:	1b9b      	subs	r3, r3, r6
    5a22:	4098      	lsls	r0, r3
    5a24:	4301      	orrs	r1, r0
    5a26:	1e48      	subs	r0, r1, #1
    5a28:	4181      	sbcs	r1, r0
    5a2a:	4311      	orrs	r1, r2
    5a2c:	2200      	movs	r2, #0
    5a2e:	e6cf      	b.n	57d0 <__aeabi_dsub+0x104>
    5a30:	000007ff 	.word	0x000007ff
    5a34:	ff7fffff 	.word	0xff7fffff
    5a38:	800fffff 	.word	0x800fffff
    5a3c:	2c00      	cmp	r4, #0
    5a3e:	d048      	beq.n	5ad2 <__aeabi_dsub+0x406>
    5a40:	4cca      	ldr	r4, [pc, #808]	; (5d6c <__aeabi_dsub+0x6a0>)
    5a42:	42a2      	cmp	r2, r4
    5a44:	d100      	bne.n	5a48 <__aeabi_dsub+0x37c>
    5a46:	e0a2      	b.n	5b8e <__aeabi_dsub+0x4c2>
    5a48:	4274      	negs	r4, r6
    5a4a:	46a1      	mov	r9, r4
    5a4c:	2480      	movs	r4, #128	; 0x80
    5a4e:	0424      	lsls	r4, r4, #16
    5a50:	4327      	orrs	r7, r4
    5a52:	464c      	mov	r4, r9
    5a54:	2c38      	cmp	r4, #56	; 0x38
    5a56:	dd00      	ble.n	5a5a <__aeabi_dsub+0x38e>
    5a58:	e0db      	b.n	5c12 <__aeabi_dsub+0x546>
    5a5a:	2c1f      	cmp	r4, #31
    5a5c:	dd00      	ble.n	5a60 <__aeabi_dsub+0x394>
    5a5e:	e144      	b.n	5cea <__aeabi_dsub+0x61e>
    5a60:	464e      	mov	r6, r9
    5a62:	2420      	movs	r4, #32
    5a64:	1ba4      	subs	r4, r4, r6
    5a66:	003e      	movs	r6, r7
    5a68:	40a6      	lsls	r6, r4
    5a6a:	46a2      	mov	sl, r4
    5a6c:	46b0      	mov	r8, r6
    5a6e:	464c      	mov	r4, r9
    5a70:	002e      	movs	r6, r5
    5a72:	40e6      	lsrs	r6, r4
    5a74:	46b4      	mov	ip, r6
    5a76:	4646      	mov	r6, r8
    5a78:	4664      	mov	r4, ip
    5a7a:	4326      	orrs	r6, r4
    5a7c:	4654      	mov	r4, sl
    5a7e:	40a5      	lsls	r5, r4
    5a80:	1e6c      	subs	r4, r5, #1
    5a82:	41a5      	sbcs	r5, r4
    5a84:	0034      	movs	r4, r6
    5a86:	432c      	orrs	r4, r5
    5a88:	464d      	mov	r5, r9
    5a8a:	40ef      	lsrs	r7, r5
    5a8c:	1b0d      	subs	r5, r1, r4
    5a8e:	e028      	b.n	5ae2 <__aeabi_dsub+0x416>
    5a90:	464a      	mov	r2, r9
    5a92:	4643      	mov	r3, r8
    5a94:	464d      	mov	r5, r9
    5a96:	431a      	orrs	r2, r3
    5a98:	d000      	beq.n	5a9c <__aeabi_dsub+0x3d0>
    5a9a:	e6a5      	b.n	57e8 <__aeabi_dsub+0x11c>
    5a9c:	2300      	movs	r3, #0
    5a9e:	2400      	movs	r4, #0
    5aa0:	2500      	movs	r5, #0
    5aa2:	e6de      	b.n	5862 <__aeabi_dsub+0x196>
    5aa4:	2a1f      	cmp	r2, #31
    5aa6:	dc5a      	bgt.n	5b5e <__aeabi_dsub+0x492>
    5aa8:	4666      	mov	r6, ip
    5aaa:	2220      	movs	r2, #32
    5aac:	1b92      	subs	r2, r2, r6
    5aae:	0006      	movs	r6, r0
    5ab0:	4096      	lsls	r6, r2
    5ab2:	4691      	mov	r9, r2
    5ab4:	46b0      	mov	r8, r6
    5ab6:	4662      	mov	r2, ip
    5ab8:	000e      	movs	r6, r1
    5aba:	40d6      	lsrs	r6, r2
    5abc:	4642      	mov	r2, r8
    5abe:	4316      	orrs	r6, r2
    5ac0:	464a      	mov	r2, r9
    5ac2:	4091      	lsls	r1, r2
    5ac4:	1e4a      	subs	r2, r1, #1
    5ac6:	4191      	sbcs	r1, r2
    5ac8:	0002      	movs	r2, r0
    5aca:	4660      	mov	r0, ip
    5acc:	4331      	orrs	r1, r6
    5ace:	40c2      	lsrs	r2, r0
    5ad0:	e6e4      	b.n	589c <__aeabi_dsub+0x1d0>
    5ad2:	003c      	movs	r4, r7
    5ad4:	432c      	orrs	r4, r5
    5ad6:	d05a      	beq.n	5b8e <__aeabi_dsub+0x4c2>
    5ad8:	43f4      	mvns	r4, r6
    5ada:	46a1      	mov	r9, r4
    5adc:	2c00      	cmp	r4, #0
    5ade:	d152      	bne.n	5b86 <__aeabi_dsub+0x4ba>
    5ae0:	1b4d      	subs	r5, r1, r5
    5ae2:	42a9      	cmp	r1, r5
    5ae4:	4189      	sbcs	r1, r1
    5ae6:	1bc7      	subs	r7, r0, r7
    5ae8:	4249      	negs	r1, r1
    5aea:	1a7f      	subs	r7, r7, r1
    5aec:	0014      	movs	r4, r2
    5aee:	469a      	mov	sl, r3
    5af0:	e675      	b.n	57de <__aeabi_dsub+0x112>
    5af2:	4a9e      	ldr	r2, [pc, #632]	; (5d6c <__aeabi_dsub+0x6a0>)
    5af4:	4294      	cmp	r4, r2
    5af6:	d000      	beq.n	5afa <__aeabi_dsub+0x42e>
    5af8:	e6c7      	b.n	588a <__aeabi_dsub+0x1be>
    5afa:	e613      	b.n	5724 <__aeabi_dsub+0x58>
    5afc:	2200      	movs	r2, #0
    5afe:	e77f      	b.n	5a00 <__aeabi_dsub+0x334>
    5b00:	2000      	movs	r0, #0
    5b02:	e78f      	b.n	5a24 <__aeabi_dsub+0x358>
    5b04:	2c00      	cmp	r4, #0
    5b06:	d000      	beq.n	5b0a <__aeabi_dsub+0x43e>
    5b08:	e0c8      	b.n	5c9c <__aeabi_dsub+0x5d0>
    5b0a:	003b      	movs	r3, r7
    5b0c:	432b      	orrs	r3, r5
    5b0e:	d100      	bne.n	5b12 <__aeabi_dsub+0x446>
    5b10:	e10f      	b.n	5d32 <__aeabi_dsub+0x666>
    5b12:	0003      	movs	r3, r0
    5b14:	430b      	orrs	r3, r1
    5b16:	d100      	bne.n	5b1a <__aeabi_dsub+0x44e>
    5b18:	e604      	b.n	5724 <__aeabi_dsub+0x58>
    5b1a:	1869      	adds	r1, r5, r1
    5b1c:	42a9      	cmp	r1, r5
    5b1e:	419b      	sbcs	r3, r3
    5b20:	183f      	adds	r7, r7, r0
    5b22:	425b      	negs	r3, r3
    5b24:	19df      	adds	r7, r3, r7
    5b26:	023b      	lsls	r3, r7, #8
    5b28:	d400      	bmi.n	5b2c <__aeabi_dsub+0x460>
    5b2a:	e11a      	b.n	5d62 <__aeabi_dsub+0x696>
    5b2c:	4b90      	ldr	r3, [pc, #576]	; (5d70 <__aeabi_dsub+0x6a4>)
    5b2e:	000d      	movs	r5, r1
    5b30:	401f      	ands	r7, r3
    5b32:	4664      	mov	r4, ip
    5b34:	e5f6      	b.n	5724 <__aeabi_dsub+0x58>
    5b36:	469a      	mov	sl, r3
    5b38:	e689      	b.n	584e <__aeabi_dsub+0x182>
    5b3a:	003a      	movs	r2, r7
    5b3c:	432a      	orrs	r2, r5
    5b3e:	2c00      	cmp	r4, #0
    5b40:	d15c      	bne.n	5bfc <__aeabi_dsub+0x530>
    5b42:	2a00      	cmp	r2, #0
    5b44:	d175      	bne.n	5c32 <__aeabi_dsub+0x566>
    5b46:	0002      	movs	r2, r0
    5b48:	430a      	orrs	r2, r1
    5b4a:	d100      	bne.n	5b4e <__aeabi_dsub+0x482>
    5b4c:	e0ca      	b.n	5ce4 <__aeabi_dsub+0x618>
    5b4e:	0007      	movs	r7, r0
    5b50:	000d      	movs	r5, r1
    5b52:	469a      	mov	sl, r3
    5b54:	e5e6      	b.n	5724 <__aeabi_dsub+0x58>
    5b56:	4664      	mov	r4, ip
    5b58:	2200      	movs	r2, #0
    5b5a:	2500      	movs	r5, #0
    5b5c:	e681      	b.n	5862 <__aeabi_dsub+0x196>
    5b5e:	4662      	mov	r2, ip
    5b60:	0006      	movs	r6, r0
    5b62:	3a20      	subs	r2, #32
    5b64:	40d6      	lsrs	r6, r2
    5b66:	4662      	mov	r2, ip
    5b68:	46b0      	mov	r8, r6
    5b6a:	2a20      	cmp	r2, #32
    5b6c:	d100      	bne.n	5b70 <__aeabi_dsub+0x4a4>
    5b6e:	e0b7      	b.n	5ce0 <__aeabi_dsub+0x614>
    5b70:	2240      	movs	r2, #64	; 0x40
    5b72:	4666      	mov	r6, ip
    5b74:	1b92      	subs	r2, r2, r6
    5b76:	4090      	lsls	r0, r2
    5b78:	4301      	orrs	r1, r0
    5b7a:	4642      	mov	r2, r8
    5b7c:	1e48      	subs	r0, r1, #1
    5b7e:	4181      	sbcs	r1, r0
    5b80:	4311      	orrs	r1, r2
    5b82:	2200      	movs	r2, #0
    5b84:	e68a      	b.n	589c <__aeabi_dsub+0x1d0>
    5b86:	4c79      	ldr	r4, [pc, #484]	; (5d6c <__aeabi_dsub+0x6a0>)
    5b88:	42a2      	cmp	r2, r4
    5b8a:	d000      	beq.n	5b8e <__aeabi_dsub+0x4c2>
    5b8c:	e761      	b.n	5a52 <__aeabi_dsub+0x386>
    5b8e:	0007      	movs	r7, r0
    5b90:	000d      	movs	r5, r1
    5b92:	0014      	movs	r4, r2
    5b94:	469a      	mov	sl, r3
    5b96:	e5c5      	b.n	5724 <__aeabi_dsub+0x58>
    5b98:	2c00      	cmp	r4, #0
    5b9a:	d141      	bne.n	5c20 <__aeabi_dsub+0x554>
    5b9c:	003c      	movs	r4, r7
    5b9e:	432c      	orrs	r4, r5
    5ba0:	d078      	beq.n	5c94 <__aeabi_dsub+0x5c8>
    5ba2:	43f4      	mvns	r4, r6
    5ba4:	46a1      	mov	r9, r4
    5ba6:	2c00      	cmp	r4, #0
    5ba8:	d020      	beq.n	5bec <__aeabi_dsub+0x520>
    5baa:	4c70      	ldr	r4, [pc, #448]	; (5d6c <__aeabi_dsub+0x6a0>)
    5bac:	42a2      	cmp	r2, r4
    5bae:	d071      	beq.n	5c94 <__aeabi_dsub+0x5c8>
    5bb0:	464c      	mov	r4, r9
    5bb2:	2c38      	cmp	r4, #56	; 0x38
    5bb4:	dd00      	ble.n	5bb8 <__aeabi_dsub+0x4ec>
    5bb6:	e0b2      	b.n	5d1e <__aeabi_dsub+0x652>
    5bb8:	2c1f      	cmp	r4, #31
    5bba:	dd00      	ble.n	5bbe <__aeabi_dsub+0x4f2>
    5bbc:	e0bc      	b.n	5d38 <__aeabi_dsub+0x66c>
    5bbe:	2620      	movs	r6, #32
    5bc0:	1b34      	subs	r4, r6, r4
    5bc2:	46a2      	mov	sl, r4
    5bc4:	003c      	movs	r4, r7
    5bc6:	4656      	mov	r6, sl
    5bc8:	40b4      	lsls	r4, r6
    5bca:	464e      	mov	r6, r9
    5bcc:	46a0      	mov	r8, r4
    5bce:	002c      	movs	r4, r5
    5bd0:	40f4      	lsrs	r4, r6
    5bd2:	46a4      	mov	ip, r4
    5bd4:	4644      	mov	r4, r8
    5bd6:	4666      	mov	r6, ip
    5bd8:	4334      	orrs	r4, r6
    5bda:	46a4      	mov	ip, r4
    5bdc:	4654      	mov	r4, sl
    5bde:	40a5      	lsls	r5, r4
    5be0:	4664      	mov	r4, ip
    5be2:	1e6e      	subs	r6, r5, #1
    5be4:	41b5      	sbcs	r5, r6
    5be6:	4325      	orrs	r5, r4
    5be8:	464c      	mov	r4, r9
    5bea:	40e7      	lsrs	r7, r4
    5bec:	186d      	adds	r5, r5, r1
    5bee:	428d      	cmp	r5, r1
    5bf0:	4189      	sbcs	r1, r1
    5bf2:	183f      	adds	r7, r7, r0
    5bf4:	4249      	negs	r1, r1
    5bf6:	19cf      	adds	r7, r1, r7
    5bf8:	0014      	movs	r4, r2
    5bfa:	e656      	b.n	58aa <__aeabi_dsub+0x1de>
    5bfc:	2a00      	cmp	r2, #0
    5bfe:	d12f      	bne.n	5c60 <__aeabi_dsub+0x594>
    5c00:	0002      	movs	r2, r0
    5c02:	430a      	orrs	r2, r1
    5c04:	d100      	bne.n	5c08 <__aeabi_dsub+0x53c>
    5c06:	e084      	b.n	5d12 <__aeabi_dsub+0x646>
    5c08:	0007      	movs	r7, r0
    5c0a:	000d      	movs	r5, r1
    5c0c:	469a      	mov	sl, r3
    5c0e:	4c57      	ldr	r4, [pc, #348]	; (5d6c <__aeabi_dsub+0x6a0>)
    5c10:	e588      	b.n	5724 <__aeabi_dsub+0x58>
    5c12:	433d      	orrs	r5, r7
    5c14:	1e6f      	subs	r7, r5, #1
    5c16:	41bd      	sbcs	r5, r7
    5c18:	b2ec      	uxtb	r4, r5
    5c1a:	2700      	movs	r7, #0
    5c1c:	1b0d      	subs	r5, r1, r4
    5c1e:	e760      	b.n	5ae2 <__aeabi_dsub+0x416>
    5c20:	4c52      	ldr	r4, [pc, #328]	; (5d6c <__aeabi_dsub+0x6a0>)
    5c22:	42a2      	cmp	r2, r4
    5c24:	d036      	beq.n	5c94 <__aeabi_dsub+0x5c8>
    5c26:	4274      	negs	r4, r6
    5c28:	2680      	movs	r6, #128	; 0x80
    5c2a:	0436      	lsls	r6, r6, #16
    5c2c:	46a1      	mov	r9, r4
    5c2e:	4337      	orrs	r7, r6
    5c30:	e7be      	b.n	5bb0 <__aeabi_dsub+0x4e4>
    5c32:	0002      	movs	r2, r0
    5c34:	430a      	orrs	r2, r1
    5c36:	d100      	bne.n	5c3a <__aeabi_dsub+0x56e>
    5c38:	e574      	b.n	5724 <__aeabi_dsub+0x58>
    5c3a:	1a6a      	subs	r2, r5, r1
    5c3c:	4690      	mov	r8, r2
    5c3e:	4545      	cmp	r5, r8
    5c40:	41b6      	sbcs	r6, r6
    5c42:	1a3a      	subs	r2, r7, r0
    5c44:	4276      	negs	r6, r6
    5c46:	1b92      	subs	r2, r2, r6
    5c48:	4694      	mov	ip, r2
    5c4a:	0212      	lsls	r2, r2, #8
    5c4c:	d400      	bmi.n	5c50 <__aeabi_dsub+0x584>
    5c4e:	e5f7      	b.n	5840 <__aeabi_dsub+0x174>
    5c50:	1b4d      	subs	r5, r1, r5
    5c52:	42a9      	cmp	r1, r5
    5c54:	4189      	sbcs	r1, r1
    5c56:	1bc7      	subs	r7, r0, r7
    5c58:	4249      	negs	r1, r1
    5c5a:	1a7f      	subs	r7, r7, r1
    5c5c:	469a      	mov	sl, r3
    5c5e:	e561      	b.n	5724 <__aeabi_dsub+0x58>
    5c60:	0002      	movs	r2, r0
    5c62:	430a      	orrs	r2, r1
    5c64:	d03a      	beq.n	5cdc <__aeabi_dsub+0x610>
    5c66:	08ed      	lsrs	r5, r5, #3
    5c68:	077c      	lsls	r4, r7, #29
    5c6a:	432c      	orrs	r4, r5
    5c6c:	2580      	movs	r5, #128	; 0x80
    5c6e:	08fa      	lsrs	r2, r7, #3
    5c70:	032d      	lsls	r5, r5, #12
    5c72:	422a      	tst	r2, r5
    5c74:	d008      	beq.n	5c88 <__aeabi_dsub+0x5bc>
    5c76:	08c7      	lsrs	r7, r0, #3
    5c78:	422f      	tst	r7, r5
    5c7a:	d105      	bne.n	5c88 <__aeabi_dsub+0x5bc>
    5c7c:	0745      	lsls	r5, r0, #29
    5c7e:	002c      	movs	r4, r5
    5c80:	003a      	movs	r2, r7
    5c82:	469a      	mov	sl, r3
    5c84:	08c9      	lsrs	r1, r1, #3
    5c86:	430c      	orrs	r4, r1
    5c88:	0f67      	lsrs	r7, r4, #29
    5c8a:	00d2      	lsls	r2, r2, #3
    5c8c:	00e5      	lsls	r5, r4, #3
    5c8e:	4317      	orrs	r7, r2
    5c90:	4c36      	ldr	r4, [pc, #216]	; (5d6c <__aeabi_dsub+0x6a0>)
    5c92:	e547      	b.n	5724 <__aeabi_dsub+0x58>
    5c94:	0007      	movs	r7, r0
    5c96:	000d      	movs	r5, r1
    5c98:	0014      	movs	r4, r2
    5c9a:	e543      	b.n	5724 <__aeabi_dsub+0x58>
    5c9c:	003a      	movs	r2, r7
    5c9e:	432a      	orrs	r2, r5
    5ca0:	d043      	beq.n	5d2a <__aeabi_dsub+0x65e>
    5ca2:	0002      	movs	r2, r0
    5ca4:	430a      	orrs	r2, r1
    5ca6:	d019      	beq.n	5cdc <__aeabi_dsub+0x610>
    5ca8:	08ed      	lsrs	r5, r5, #3
    5caa:	077c      	lsls	r4, r7, #29
    5cac:	432c      	orrs	r4, r5
    5cae:	2580      	movs	r5, #128	; 0x80
    5cb0:	08fa      	lsrs	r2, r7, #3
    5cb2:	032d      	lsls	r5, r5, #12
    5cb4:	422a      	tst	r2, r5
    5cb6:	d007      	beq.n	5cc8 <__aeabi_dsub+0x5fc>
    5cb8:	08c6      	lsrs	r6, r0, #3
    5cba:	422e      	tst	r6, r5
    5cbc:	d104      	bne.n	5cc8 <__aeabi_dsub+0x5fc>
    5cbe:	0747      	lsls	r7, r0, #29
    5cc0:	003c      	movs	r4, r7
    5cc2:	0032      	movs	r2, r6
    5cc4:	08c9      	lsrs	r1, r1, #3
    5cc6:	430c      	orrs	r4, r1
    5cc8:	00d7      	lsls	r7, r2, #3
    5cca:	0f62      	lsrs	r2, r4, #29
    5ccc:	00e5      	lsls	r5, r4, #3
    5cce:	4317      	orrs	r7, r2
    5cd0:	469a      	mov	sl, r3
    5cd2:	4c26      	ldr	r4, [pc, #152]	; (5d6c <__aeabi_dsub+0x6a0>)
    5cd4:	e526      	b.n	5724 <__aeabi_dsub+0x58>
    5cd6:	2200      	movs	r2, #0
    5cd8:	2500      	movs	r5, #0
    5cda:	e544      	b.n	5766 <__aeabi_dsub+0x9a>
    5cdc:	4c23      	ldr	r4, [pc, #140]	; (5d6c <__aeabi_dsub+0x6a0>)
    5cde:	e521      	b.n	5724 <__aeabi_dsub+0x58>
    5ce0:	2000      	movs	r0, #0
    5ce2:	e749      	b.n	5b78 <__aeabi_dsub+0x4ac>
    5ce4:	2300      	movs	r3, #0
    5ce6:	2500      	movs	r5, #0
    5ce8:	e5bb      	b.n	5862 <__aeabi_dsub+0x196>
    5cea:	464c      	mov	r4, r9
    5cec:	003e      	movs	r6, r7
    5cee:	3c20      	subs	r4, #32
    5cf0:	40e6      	lsrs	r6, r4
    5cf2:	464c      	mov	r4, r9
    5cf4:	46b4      	mov	ip, r6
    5cf6:	2c20      	cmp	r4, #32
    5cf8:	d031      	beq.n	5d5e <__aeabi_dsub+0x692>
    5cfa:	2440      	movs	r4, #64	; 0x40
    5cfc:	464e      	mov	r6, r9
    5cfe:	1ba6      	subs	r6, r4, r6
    5d00:	40b7      	lsls	r7, r6
    5d02:	433d      	orrs	r5, r7
    5d04:	1e6c      	subs	r4, r5, #1
    5d06:	41a5      	sbcs	r5, r4
    5d08:	4664      	mov	r4, ip
    5d0a:	432c      	orrs	r4, r5
    5d0c:	2700      	movs	r7, #0
    5d0e:	1b0d      	subs	r5, r1, r4
    5d10:	e6e7      	b.n	5ae2 <__aeabi_dsub+0x416>
    5d12:	2280      	movs	r2, #128	; 0x80
    5d14:	2300      	movs	r3, #0
    5d16:	0312      	lsls	r2, r2, #12
    5d18:	4c14      	ldr	r4, [pc, #80]	; (5d6c <__aeabi_dsub+0x6a0>)
    5d1a:	2500      	movs	r5, #0
    5d1c:	e5a1      	b.n	5862 <__aeabi_dsub+0x196>
    5d1e:	433d      	orrs	r5, r7
    5d20:	1e6f      	subs	r7, r5, #1
    5d22:	41bd      	sbcs	r5, r7
    5d24:	2700      	movs	r7, #0
    5d26:	b2ed      	uxtb	r5, r5
    5d28:	e760      	b.n	5bec <__aeabi_dsub+0x520>
    5d2a:	0007      	movs	r7, r0
    5d2c:	000d      	movs	r5, r1
    5d2e:	4c0f      	ldr	r4, [pc, #60]	; (5d6c <__aeabi_dsub+0x6a0>)
    5d30:	e4f8      	b.n	5724 <__aeabi_dsub+0x58>
    5d32:	0007      	movs	r7, r0
    5d34:	000d      	movs	r5, r1
    5d36:	e4f5      	b.n	5724 <__aeabi_dsub+0x58>
    5d38:	464e      	mov	r6, r9
    5d3a:	003c      	movs	r4, r7
    5d3c:	3e20      	subs	r6, #32
    5d3e:	40f4      	lsrs	r4, r6
    5d40:	46a0      	mov	r8, r4
    5d42:	464c      	mov	r4, r9
    5d44:	2c20      	cmp	r4, #32
    5d46:	d00e      	beq.n	5d66 <__aeabi_dsub+0x69a>
    5d48:	2440      	movs	r4, #64	; 0x40
    5d4a:	464e      	mov	r6, r9
    5d4c:	1ba4      	subs	r4, r4, r6
    5d4e:	40a7      	lsls	r7, r4
    5d50:	433d      	orrs	r5, r7
    5d52:	1e6f      	subs	r7, r5, #1
    5d54:	41bd      	sbcs	r5, r7
    5d56:	4644      	mov	r4, r8
    5d58:	2700      	movs	r7, #0
    5d5a:	4325      	orrs	r5, r4
    5d5c:	e746      	b.n	5bec <__aeabi_dsub+0x520>
    5d5e:	2700      	movs	r7, #0
    5d60:	e7cf      	b.n	5d02 <__aeabi_dsub+0x636>
    5d62:	000d      	movs	r5, r1
    5d64:	e573      	b.n	584e <__aeabi_dsub+0x182>
    5d66:	2700      	movs	r7, #0
    5d68:	e7f2      	b.n	5d50 <__aeabi_dsub+0x684>
    5d6a:	46c0      	nop			; (mov r8, r8)
    5d6c:	000007ff 	.word	0x000007ff
    5d70:	ff7fffff 	.word	0xff7fffff

00005d74 <__aeabi_dcmpun>:
    5d74:	b570      	push	{r4, r5, r6, lr}
    5d76:	4e0e      	ldr	r6, [pc, #56]	; (5db0 <__aeabi_dcmpun+0x3c>)
    5d78:	030c      	lsls	r4, r1, #12
    5d7a:	031d      	lsls	r5, r3, #12
    5d7c:	0049      	lsls	r1, r1, #1
    5d7e:	005b      	lsls	r3, r3, #1
    5d80:	0b24      	lsrs	r4, r4, #12
    5d82:	0d49      	lsrs	r1, r1, #21
    5d84:	0b2d      	lsrs	r5, r5, #12
    5d86:	0d5b      	lsrs	r3, r3, #21
    5d88:	42b1      	cmp	r1, r6
    5d8a:	d004      	beq.n	5d96 <__aeabi_dcmpun+0x22>
    5d8c:	4908      	ldr	r1, [pc, #32]	; (5db0 <__aeabi_dcmpun+0x3c>)
    5d8e:	2000      	movs	r0, #0
    5d90:	428b      	cmp	r3, r1
    5d92:	d008      	beq.n	5da6 <__aeabi_dcmpun+0x32>
    5d94:	bd70      	pop	{r4, r5, r6, pc}
    5d96:	4304      	orrs	r4, r0
    5d98:	2001      	movs	r0, #1
    5d9a:	2c00      	cmp	r4, #0
    5d9c:	d1fa      	bne.n	5d94 <__aeabi_dcmpun+0x20>
    5d9e:	4904      	ldr	r1, [pc, #16]	; (5db0 <__aeabi_dcmpun+0x3c>)
    5da0:	2000      	movs	r0, #0
    5da2:	428b      	cmp	r3, r1
    5da4:	d1f6      	bne.n	5d94 <__aeabi_dcmpun+0x20>
    5da6:	4315      	orrs	r5, r2
    5da8:	0028      	movs	r0, r5
    5daa:	1e45      	subs	r5, r0, #1
    5dac:	41a8      	sbcs	r0, r5
    5dae:	e7f1      	b.n	5d94 <__aeabi_dcmpun+0x20>
    5db0:	000007ff 	.word	0x000007ff

00005db4 <__aeabi_d2iz>:
    5db4:	030b      	lsls	r3, r1, #12
    5db6:	b530      	push	{r4, r5, lr}
    5db8:	4d13      	ldr	r5, [pc, #76]	; (5e08 <__aeabi_d2iz+0x54>)
    5dba:	0b1a      	lsrs	r2, r3, #12
    5dbc:	004b      	lsls	r3, r1, #1
    5dbe:	0d5b      	lsrs	r3, r3, #21
    5dc0:	0fc9      	lsrs	r1, r1, #31
    5dc2:	2400      	movs	r4, #0
    5dc4:	42ab      	cmp	r3, r5
    5dc6:	dd11      	ble.n	5dec <__aeabi_d2iz+0x38>
    5dc8:	4c10      	ldr	r4, [pc, #64]	; (5e0c <__aeabi_d2iz+0x58>)
    5dca:	42a3      	cmp	r3, r4
    5dcc:	dc10      	bgt.n	5df0 <__aeabi_d2iz+0x3c>
    5dce:	2480      	movs	r4, #128	; 0x80
    5dd0:	0364      	lsls	r4, r4, #13
    5dd2:	4322      	orrs	r2, r4
    5dd4:	4c0e      	ldr	r4, [pc, #56]	; (5e10 <__aeabi_d2iz+0x5c>)
    5dd6:	1ae4      	subs	r4, r4, r3
    5dd8:	2c1f      	cmp	r4, #31
    5dda:	dd0c      	ble.n	5df6 <__aeabi_d2iz+0x42>
    5ddc:	480d      	ldr	r0, [pc, #52]	; (5e14 <__aeabi_d2iz+0x60>)
    5dde:	1ac3      	subs	r3, r0, r3
    5de0:	40da      	lsrs	r2, r3
    5de2:	0013      	movs	r3, r2
    5de4:	425c      	negs	r4, r3
    5de6:	2900      	cmp	r1, #0
    5de8:	d100      	bne.n	5dec <__aeabi_d2iz+0x38>
    5dea:	001c      	movs	r4, r3
    5dec:	0020      	movs	r0, r4
    5dee:	bd30      	pop	{r4, r5, pc}
    5df0:	4b09      	ldr	r3, [pc, #36]	; (5e18 <__aeabi_d2iz+0x64>)
    5df2:	18cc      	adds	r4, r1, r3
    5df4:	e7fa      	b.n	5dec <__aeabi_d2iz+0x38>
    5df6:	40e0      	lsrs	r0, r4
    5df8:	4c08      	ldr	r4, [pc, #32]	; (5e1c <__aeabi_d2iz+0x68>)
    5dfa:	46a4      	mov	ip, r4
    5dfc:	4463      	add	r3, ip
    5dfe:	409a      	lsls	r2, r3
    5e00:	0013      	movs	r3, r2
    5e02:	4303      	orrs	r3, r0
    5e04:	e7ee      	b.n	5de4 <__aeabi_d2iz+0x30>
    5e06:	46c0      	nop			; (mov r8, r8)
    5e08:	000003fe 	.word	0x000003fe
    5e0c:	0000041d 	.word	0x0000041d
    5e10:	00000433 	.word	0x00000433
    5e14:	00000413 	.word	0x00000413
    5e18:	7fffffff 	.word	0x7fffffff
    5e1c:	fffffbed 	.word	0xfffffbed

00005e20 <__aeabi_i2d>:
    5e20:	b570      	push	{r4, r5, r6, lr}
    5e22:	2800      	cmp	r0, #0
    5e24:	d030      	beq.n	5e88 <__aeabi_i2d+0x68>
    5e26:	17c3      	asrs	r3, r0, #31
    5e28:	18c4      	adds	r4, r0, r3
    5e2a:	405c      	eors	r4, r3
    5e2c:	0fc5      	lsrs	r5, r0, #31
    5e2e:	0020      	movs	r0, r4
    5e30:	f000 f9dc 	bl	61ec <__clzsi2>
    5e34:	4b17      	ldr	r3, [pc, #92]	; (5e94 <__aeabi_i2d+0x74>)
    5e36:	4a18      	ldr	r2, [pc, #96]	; (5e98 <__aeabi_i2d+0x78>)
    5e38:	1a1b      	subs	r3, r3, r0
    5e3a:	1ad2      	subs	r2, r2, r3
    5e3c:	2a1f      	cmp	r2, #31
    5e3e:	dd18      	ble.n	5e72 <__aeabi_i2d+0x52>
    5e40:	4a16      	ldr	r2, [pc, #88]	; (5e9c <__aeabi_i2d+0x7c>)
    5e42:	1ad2      	subs	r2, r2, r3
    5e44:	4094      	lsls	r4, r2
    5e46:	2200      	movs	r2, #0
    5e48:	0324      	lsls	r4, r4, #12
    5e4a:	055b      	lsls	r3, r3, #21
    5e4c:	0b24      	lsrs	r4, r4, #12
    5e4e:	0d5b      	lsrs	r3, r3, #21
    5e50:	2100      	movs	r1, #0
    5e52:	0010      	movs	r0, r2
    5e54:	0324      	lsls	r4, r4, #12
    5e56:	0d0a      	lsrs	r2, r1, #20
    5e58:	0512      	lsls	r2, r2, #20
    5e5a:	0b24      	lsrs	r4, r4, #12
    5e5c:	4314      	orrs	r4, r2
    5e5e:	4a10      	ldr	r2, [pc, #64]	; (5ea0 <__aeabi_i2d+0x80>)
    5e60:	051b      	lsls	r3, r3, #20
    5e62:	4014      	ands	r4, r2
    5e64:	431c      	orrs	r4, r3
    5e66:	0064      	lsls	r4, r4, #1
    5e68:	07ed      	lsls	r5, r5, #31
    5e6a:	0864      	lsrs	r4, r4, #1
    5e6c:	432c      	orrs	r4, r5
    5e6e:	0021      	movs	r1, r4
    5e70:	bd70      	pop	{r4, r5, r6, pc}
    5e72:	0021      	movs	r1, r4
    5e74:	4091      	lsls	r1, r2
    5e76:	000a      	movs	r2, r1
    5e78:	210b      	movs	r1, #11
    5e7a:	1a08      	subs	r0, r1, r0
    5e7c:	40c4      	lsrs	r4, r0
    5e7e:	055b      	lsls	r3, r3, #21
    5e80:	0324      	lsls	r4, r4, #12
    5e82:	0b24      	lsrs	r4, r4, #12
    5e84:	0d5b      	lsrs	r3, r3, #21
    5e86:	e7e3      	b.n	5e50 <__aeabi_i2d+0x30>
    5e88:	2500      	movs	r5, #0
    5e8a:	2300      	movs	r3, #0
    5e8c:	2400      	movs	r4, #0
    5e8e:	2200      	movs	r2, #0
    5e90:	e7de      	b.n	5e50 <__aeabi_i2d+0x30>
    5e92:	46c0      	nop			; (mov r8, r8)
    5e94:	0000041e 	.word	0x0000041e
    5e98:	00000433 	.word	0x00000433
    5e9c:	00000413 	.word	0x00000413
    5ea0:	800fffff 	.word	0x800fffff

00005ea4 <__aeabi_ui2d>:
    5ea4:	b570      	push	{r4, r5, r6, lr}
    5ea6:	1e05      	subs	r5, r0, #0
    5ea8:	d028      	beq.n	5efc <__aeabi_ui2d+0x58>
    5eaa:	f000 f99f 	bl	61ec <__clzsi2>
    5eae:	4b15      	ldr	r3, [pc, #84]	; (5f04 <__aeabi_ui2d+0x60>)
    5eb0:	4a15      	ldr	r2, [pc, #84]	; (5f08 <__aeabi_ui2d+0x64>)
    5eb2:	1a1b      	subs	r3, r3, r0
    5eb4:	1ad2      	subs	r2, r2, r3
    5eb6:	2a1f      	cmp	r2, #31
    5eb8:	dd16      	ble.n	5ee8 <__aeabi_ui2d+0x44>
    5eba:	002c      	movs	r4, r5
    5ebc:	4a13      	ldr	r2, [pc, #76]	; (5f0c <__aeabi_ui2d+0x68>)
    5ebe:	2500      	movs	r5, #0
    5ec0:	1ad2      	subs	r2, r2, r3
    5ec2:	4094      	lsls	r4, r2
    5ec4:	055a      	lsls	r2, r3, #21
    5ec6:	0324      	lsls	r4, r4, #12
    5ec8:	0b24      	lsrs	r4, r4, #12
    5eca:	0d52      	lsrs	r2, r2, #21
    5ecc:	2100      	movs	r1, #0
    5ece:	0324      	lsls	r4, r4, #12
    5ed0:	0d0b      	lsrs	r3, r1, #20
    5ed2:	0b24      	lsrs	r4, r4, #12
    5ed4:	051b      	lsls	r3, r3, #20
    5ed6:	4323      	orrs	r3, r4
    5ed8:	4c0d      	ldr	r4, [pc, #52]	; (5f10 <__aeabi_ui2d+0x6c>)
    5eda:	0512      	lsls	r2, r2, #20
    5edc:	4023      	ands	r3, r4
    5ede:	4313      	orrs	r3, r2
    5ee0:	005b      	lsls	r3, r3, #1
    5ee2:	0028      	movs	r0, r5
    5ee4:	0859      	lsrs	r1, r3, #1
    5ee6:	bd70      	pop	{r4, r5, r6, pc}
    5ee8:	210b      	movs	r1, #11
    5eea:	002c      	movs	r4, r5
    5eec:	1a08      	subs	r0, r1, r0
    5eee:	40c4      	lsrs	r4, r0
    5ef0:	4095      	lsls	r5, r2
    5ef2:	0324      	lsls	r4, r4, #12
    5ef4:	055a      	lsls	r2, r3, #21
    5ef6:	0b24      	lsrs	r4, r4, #12
    5ef8:	0d52      	lsrs	r2, r2, #21
    5efa:	e7e7      	b.n	5ecc <__aeabi_ui2d+0x28>
    5efc:	2200      	movs	r2, #0
    5efe:	2400      	movs	r4, #0
    5f00:	e7e4      	b.n	5ecc <__aeabi_ui2d+0x28>
    5f02:	46c0      	nop			; (mov r8, r8)
    5f04:	0000041e 	.word	0x0000041e
    5f08:	00000433 	.word	0x00000433
    5f0c:	00000413 	.word	0x00000413
    5f10:	800fffff 	.word	0x800fffff

00005f14 <__aeabi_f2d>:
    5f14:	0042      	lsls	r2, r0, #1
    5f16:	0e12      	lsrs	r2, r2, #24
    5f18:	1c51      	adds	r1, r2, #1
    5f1a:	0243      	lsls	r3, r0, #9
    5f1c:	b2c9      	uxtb	r1, r1
    5f1e:	b570      	push	{r4, r5, r6, lr}
    5f20:	0a5d      	lsrs	r5, r3, #9
    5f22:	0fc4      	lsrs	r4, r0, #31
    5f24:	2901      	cmp	r1, #1
    5f26:	dd15      	ble.n	5f54 <__aeabi_f2d+0x40>
    5f28:	21e0      	movs	r1, #224	; 0xe0
    5f2a:	0089      	lsls	r1, r1, #2
    5f2c:	468c      	mov	ip, r1
    5f2e:	076d      	lsls	r5, r5, #29
    5f30:	0b1b      	lsrs	r3, r3, #12
    5f32:	4462      	add	r2, ip
    5f34:	2100      	movs	r1, #0
    5f36:	0028      	movs	r0, r5
    5f38:	0d0d      	lsrs	r5, r1, #20
    5f3a:	052d      	lsls	r5, r5, #20
    5f3c:	432b      	orrs	r3, r5
    5f3e:	4d1c      	ldr	r5, [pc, #112]	; (5fb0 <__aeabi_f2d+0x9c>)
    5f40:	0552      	lsls	r2, r2, #21
    5f42:	402b      	ands	r3, r5
    5f44:	0852      	lsrs	r2, r2, #1
    5f46:	4313      	orrs	r3, r2
    5f48:	005b      	lsls	r3, r3, #1
    5f4a:	07e4      	lsls	r4, r4, #31
    5f4c:	085b      	lsrs	r3, r3, #1
    5f4e:	4323      	orrs	r3, r4
    5f50:	0019      	movs	r1, r3
    5f52:	bd70      	pop	{r4, r5, r6, pc}
    5f54:	2a00      	cmp	r2, #0
    5f56:	d115      	bne.n	5f84 <__aeabi_f2d+0x70>
    5f58:	2d00      	cmp	r5, #0
    5f5a:	d01f      	beq.n	5f9c <__aeabi_f2d+0x88>
    5f5c:	0028      	movs	r0, r5
    5f5e:	f000 f945 	bl	61ec <__clzsi2>
    5f62:	280a      	cmp	r0, #10
    5f64:	dc1d      	bgt.n	5fa2 <__aeabi_f2d+0x8e>
    5f66:	230b      	movs	r3, #11
    5f68:	002a      	movs	r2, r5
    5f6a:	1a1b      	subs	r3, r3, r0
    5f6c:	40da      	lsrs	r2, r3
    5f6e:	0013      	movs	r3, r2
    5f70:	0002      	movs	r2, r0
    5f72:	3215      	adds	r2, #21
    5f74:	4095      	lsls	r5, r2
    5f76:	4a0f      	ldr	r2, [pc, #60]	; (5fb4 <__aeabi_f2d+0xa0>)
    5f78:	031b      	lsls	r3, r3, #12
    5f7a:	1a12      	subs	r2, r2, r0
    5f7c:	0552      	lsls	r2, r2, #21
    5f7e:	0b1b      	lsrs	r3, r3, #12
    5f80:	0d52      	lsrs	r2, r2, #21
    5f82:	e7d7      	b.n	5f34 <__aeabi_f2d+0x20>
    5f84:	2d00      	cmp	r5, #0
    5f86:	d006      	beq.n	5f96 <__aeabi_f2d+0x82>
    5f88:	2280      	movs	r2, #128	; 0x80
    5f8a:	0b1b      	lsrs	r3, r3, #12
    5f8c:	0312      	lsls	r2, r2, #12
    5f8e:	4313      	orrs	r3, r2
    5f90:	076d      	lsls	r5, r5, #29
    5f92:	4a09      	ldr	r2, [pc, #36]	; (5fb8 <__aeabi_f2d+0xa4>)
    5f94:	e7ce      	b.n	5f34 <__aeabi_f2d+0x20>
    5f96:	4a08      	ldr	r2, [pc, #32]	; (5fb8 <__aeabi_f2d+0xa4>)
    5f98:	2300      	movs	r3, #0
    5f9a:	e7cb      	b.n	5f34 <__aeabi_f2d+0x20>
    5f9c:	2200      	movs	r2, #0
    5f9e:	2300      	movs	r3, #0
    5fa0:	e7c8      	b.n	5f34 <__aeabi_f2d+0x20>
    5fa2:	0003      	movs	r3, r0
    5fa4:	3b0b      	subs	r3, #11
    5fa6:	409d      	lsls	r5, r3
    5fa8:	002b      	movs	r3, r5
    5faa:	2500      	movs	r5, #0
    5fac:	e7e3      	b.n	5f76 <__aeabi_f2d+0x62>
    5fae:	46c0      	nop			; (mov r8, r8)
    5fb0:	800fffff 	.word	0x800fffff
    5fb4:	00000389 	.word	0x00000389
    5fb8:	000007ff 	.word	0x000007ff

00005fbc <__aeabi_d2f>:
    5fbc:	004b      	lsls	r3, r1, #1
    5fbe:	b570      	push	{r4, r5, r6, lr}
    5fc0:	0d5e      	lsrs	r6, r3, #21
    5fc2:	030c      	lsls	r4, r1, #12
    5fc4:	1c75      	adds	r5, r6, #1
    5fc6:	0a64      	lsrs	r4, r4, #9
    5fc8:	0f42      	lsrs	r2, r0, #29
    5fca:	056d      	lsls	r5, r5, #21
    5fcc:	4322      	orrs	r2, r4
    5fce:	0fc9      	lsrs	r1, r1, #31
    5fd0:	00c4      	lsls	r4, r0, #3
    5fd2:	0d6d      	lsrs	r5, r5, #21
    5fd4:	2d01      	cmp	r5, #1
    5fd6:	dd2a      	ble.n	602e <__aeabi_d2f+0x72>
    5fd8:	4b3b      	ldr	r3, [pc, #236]	; (60c8 <__aeabi_d2f+0x10c>)
    5fda:	18f3      	adds	r3, r6, r3
    5fdc:	2bfe      	cmp	r3, #254	; 0xfe
    5fde:	dc1a      	bgt.n	6016 <__aeabi_d2f+0x5a>
    5fe0:	2b00      	cmp	r3, #0
    5fe2:	dd42      	ble.n	606a <__aeabi_d2f+0xae>
    5fe4:	0180      	lsls	r0, r0, #6
    5fe6:	1e45      	subs	r5, r0, #1
    5fe8:	41a8      	sbcs	r0, r5
    5fea:	00d2      	lsls	r2, r2, #3
    5fec:	4310      	orrs	r0, r2
    5fee:	0f62      	lsrs	r2, r4, #29
    5ff0:	4302      	orrs	r2, r0
    5ff2:	0750      	lsls	r0, r2, #29
    5ff4:	d004      	beq.n	6000 <__aeabi_d2f+0x44>
    5ff6:	200f      	movs	r0, #15
    5ff8:	4010      	ands	r0, r2
    5ffa:	2804      	cmp	r0, #4
    5ffc:	d000      	beq.n	6000 <__aeabi_d2f+0x44>
    5ffe:	3204      	adds	r2, #4
    6000:	2080      	movs	r0, #128	; 0x80
    6002:	04c0      	lsls	r0, r0, #19
    6004:	4010      	ands	r0, r2
    6006:	d021      	beq.n	604c <__aeabi_d2f+0x90>
    6008:	3301      	adds	r3, #1
    600a:	2bff      	cmp	r3, #255	; 0xff
    600c:	d003      	beq.n	6016 <__aeabi_d2f+0x5a>
    600e:	0192      	lsls	r2, r2, #6
    6010:	0a52      	lsrs	r2, r2, #9
    6012:	b2db      	uxtb	r3, r3
    6014:	e001      	b.n	601a <__aeabi_d2f+0x5e>
    6016:	23ff      	movs	r3, #255	; 0xff
    6018:	2200      	movs	r2, #0
    601a:	0252      	lsls	r2, r2, #9
    601c:	0a52      	lsrs	r2, r2, #9
    601e:	05db      	lsls	r3, r3, #23
    6020:	4313      	orrs	r3, r2
    6022:	005b      	lsls	r3, r3, #1
    6024:	07c9      	lsls	r1, r1, #31
    6026:	085b      	lsrs	r3, r3, #1
    6028:	430b      	orrs	r3, r1
    602a:	0018      	movs	r0, r3
    602c:	bd70      	pop	{r4, r5, r6, pc}
    602e:	2e00      	cmp	r6, #0
    6030:	d007      	beq.n	6042 <__aeabi_d2f+0x86>
    6032:	4314      	orrs	r4, r2
    6034:	d0ef      	beq.n	6016 <__aeabi_d2f+0x5a>
    6036:	2080      	movs	r0, #128	; 0x80
    6038:	00d2      	lsls	r2, r2, #3
    603a:	0480      	lsls	r0, r0, #18
    603c:	4302      	orrs	r2, r0
    603e:	23ff      	movs	r3, #255	; 0xff
    6040:	e7d7      	b.n	5ff2 <__aeabi_d2f+0x36>
    6042:	4322      	orrs	r2, r4
    6044:	2300      	movs	r3, #0
    6046:	2a00      	cmp	r2, #0
    6048:	d003      	beq.n	6052 <__aeabi_d2f+0x96>
    604a:	2205      	movs	r2, #5
    604c:	08d2      	lsrs	r2, r2, #3
    604e:	2bff      	cmp	r3, #255	; 0xff
    6050:	d003      	beq.n	605a <__aeabi_d2f+0x9e>
    6052:	0252      	lsls	r2, r2, #9
    6054:	0a52      	lsrs	r2, r2, #9
    6056:	b2db      	uxtb	r3, r3
    6058:	e7df      	b.n	601a <__aeabi_d2f+0x5e>
    605a:	2a00      	cmp	r2, #0
    605c:	d032      	beq.n	60c4 <__aeabi_d2f+0x108>
    605e:	2080      	movs	r0, #128	; 0x80
    6060:	03c0      	lsls	r0, r0, #15
    6062:	4302      	orrs	r2, r0
    6064:	0252      	lsls	r2, r2, #9
    6066:	0a52      	lsrs	r2, r2, #9
    6068:	e7d7      	b.n	601a <__aeabi_d2f+0x5e>
    606a:	0018      	movs	r0, r3
    606c:	3017      	adds	r0, #23
    606e:	db14      	blt.n	609a <__aeabi_d2f+0xde>
    6070:	2080      	movs	r0, #128	; 0x80
    6072:	0400      	lsls	r0, r0, #16
    6074:	4302      	orrs	r2, r0
    6076:	201e      	movs	r0, #30
    6078:	1ac0      	subs	r0, r0, r3
    607a:	281f      	cmp	r0, #31
    607c:	dc0f      	bgt.n	609e <__aeabi_d2f+0xe2>
    607e:	0025      	movs	r5, r4
    6080:	4b12      	ldr	r3, [pc, #72]	; (60cc <__aeabi_d2f+0x110>)
    6082:	18f3      	adds	r3, r6, r3
    6084:	409d      	lsls	r5, r3
    6086:	1e6e      	subs	r6, r5, #1
    6088:	41b5      	sbcs	r5, r6
    608a:	409a      	lsls	r2, r3
    608c:	002b      	movs	r3, r5
    608e:	4313      	orrs	r3, r2
    6090:	0022      	movs	r2, r4
    6092:	40c2      	lsrs	r2, r0
    6094:	431a      	orrs	r2, r3
    6096:	2300      	movs	r3, #0
    6098:	e7ab      	b.n	5ff2 <__aeabi_d2f+0x36>
    609a:	2300      	movs	r3, #0
    609c:	e7d5      	b.n	604a <__aeabi_d2f+0x8e>
    609e:	2502      	movs	r5, #2
    60a0:	426d      	negs	r5, r5
    60a2:	1aeb      	subs	r3, r5, r3
    60a4:	0015      	movs	r5, r2
    60a6:	40dd      	lsrs	r5, r3
    60a8:	2820      	cmp	r0, #32
    60aa:	d009      	beq.n	60c0 <__aeabi_d2f+0x104>
    60ac:	4b08      	ldr	r3, [pc, #32]	; (60d0 <__aeabi_d2f+0x114>)
    60ae:	18f3      	adds	r3, r6, r3
    60b0:	409a      	lsls	r2, r3
    60b2:	4314      	orrs	r4, r2
    60b4:	1e62      	subs	r2, r4, #1
    60b6:	4194      	sbcs	r4, r2
    60b8:	0022      	movs	r2, r4
    60ba:	2300      	movs	r3, #0
    60bc:	432a      	orrs	r2, r5
    60be:	e798      	b.n	5ff2 <__aeabi_d2f+0x36>
    60c0:	2200      	movs	r2, #0
    60c2:	e7f6      	b.n	60b2 <__aeabi_d2f+0xf6>
    60c4:	2200      	movs	r2, #0
    60c6:	e7a8      	b.n	601a <__aeabi_d2f+0x5e>
    60c8:	fffffc80 	.word	0xfffffc80
    60cc:	fffffc82 	.word	0xfffffc82
    60d0:	fffffca2 	.word	0xfffffca2

000060d4 <__aeabi_uidiv>:
    60d4:	2200      	movs	r2, #0
    60d6:	0843      	lsrs	r3, r0, #1
    60d8:	428b      	cmp	r3, r1
    60da:	d374      	bcc.n	61c6 <__aeabi_uidiv+0xf2>
    60dc:	0903      	lsrs	r3, r0, #4
    60de:	428b      	cmp	r3, r1
    60e0:	d35f      	bcc.n	61a2 <__aeabi_uidiv+0xce>
    60e2:	0a03      	lsrs	r3, r0, #8
    60e4:	428b      	cmp	r3, r1
    60e6:	d344      	bcc.n	6172 <__aeabi_uidiv+0x9e>
    60e8:	0b03      	lsrs	r3, r0, #12
    60ea:	428b      	cmp	r3, r1
    60ec:	d328      	bcc.n	6140 <__aeabi_uidiv+0x6c>
    60ee:	0c03      	lsrs	r3, r0, #16
    60f0:	428b      	cmp	r3, r1
    60f2:	d30d      	bcc.n	6110 <__aeabi_uidiv+0x3c>
    60f4:	22ff      	movs	r2, #255	; 0xff
    60f6:	0209      	lsls	r1, r1, #8
    60f8:	ba12      	rev	r2, r2
    60fa:	0c03      	lsrs	r3, r0, #16
    60fc:	428b      	cmp	r3, r1
    60fe:	d302      	bcc.n	6106 <__aeabi_uidiv+0x32>
    6100:	1212      	asrs	r2, r2, #8
    6102:	0209      	lsls	r1, r1, #8
    6104:	d065      	beq.n	61d2 <__aeabi_uidiv+0xfe>
    6106:	0b03      	lsrs	r3, r0, #12
    6108:	428b      	cmp	r3, r1
    610a:	d319      	bcc.n	6140 <__aeabi_uidiv+0x6c>
    610c:	e000      	b.n	6110 <__aeabi_uidiv+0x3c>
    610e:	0a09      	lsrs	r1, r1, #8
    6110:	0bc3      	lsrs	r3, r0, #15
    6112:	428b      	cmp	r3, r1
    6114:	d301      	bcc.n	611a <__aeabi_uidiv+0x46>
    6116:	03cb      	lsls	r3, r1, #15
    6118:	1ac0      	subs	r0, r0, r3
    611a:	4152      	adcs	r2, r2
    611c:	0b83      	lsrs	r3, r0, #14
    611e:	428b      	cmp	r3, r1
    6120:	d301      	bcc.n	6126 <__aeabi_uidiv+0x52>
    6122:	038b      	lsls	r3, r1, #14
    6124:	1ac0      	subs	r0, r0, r3
    6126:	4152      	adcs	r2, r2
    6128:	0b43      	lsrs	r3, r0, #13
    612a:	428b      	cmp	r3, r1
    612c:	d301      	bcc.n	6132 <__aeabi_uidiv+0x5e>
    612e:	034b      	lsls	r3, r1, #13
    6130:	1ac0      	subs	r0, r0, r3
    6132:	4152      	adcs	r2, r2
    6134:	0b03      	lsrs	r3, r0, #12
    6136:	428b      	cmp	r3, r1
    6138:	d301      	bcc.n	613e <__aeabi_uidiv+0x6a>
    613a:	030b      	lsls	r3, r1, #12
    613c:	1ac0      	subs	r0, r0, r3
    613e:	4152      	adcs	r2, r2
    6140:	0ac3      	lsrs	r3, r0, #11
    6142:	428b      	cmp	r3, r1
    6144:	d301      	bcc.n	614a <__aeabi_uidiv+0x76>
    6146:	02cb      	lsls	r3, r1, #11
    6148:	1ac0      	subs	r0, r0, r3
    614a:	4152      	adcs	r2, r2
    614c:	0a83      	lsrs	r3, r0, #10
    614e:	428b      	cmp	r3, r1
    6150:	d301      	bcc.n	6156 <__aeabi_uidiv+0x82>
    6152:	028b      	lsls	r3, r1, #10
    6154:	1ac0      	subs	r0, r0, r3
    6156:	4152      	adcs	r2, r2
    6158:	0a43      	lsrs	r3, r0, #9
    615a:	428b      	cmp	r3, r1
    615c:	d301      	bcc.n	6162 <__aeabi_uidiv+0x8e>
    615e:	024b      	lsls	r3, r1, #9
    6160:	1ac0      	subs	r0, r0, r3
    6162:	4152      	adcs	r2, r2
    6164:	0a03      	lsrs	r3, r0, #8
    6166:	428b      	cmp	r3, r1
    6168:	d301      	bcc.n	616e <__aeabi_uidiv+0x9a>
    616a:	020b      	lsls	r3, r1, #8
    616c:	1ac0      	subs	r0, r0, r3
    616e:	4152      	adcs	r2, r2
    6170:	d2cd      	bcs.n	610e <__aeabi_uidiv+0x3a>
    6172:	09c3      	lsrs	r3, r0, #7
    6174:	428b      	cmp	r3, r1
    6176:	d301      	bcc.n	617c <__aeabi_uidiv+0xa8>
    6178:	01cb      	lsls	r3, r1, #7
    617a:	1ac0      	subs	r0, r0, r3
    617c:	4152      	adcs	r2, r2
    617e:	0983      	lsrs	r3, r0, #6
    6180:	428b      	cmp	r3, r1
    6182:	d301      	bcc.n	6188 <__aeabi_uidiv+0xb4>
    6184:	018b      	lsls	r3, r1, #6
    6186:	1ac0      	subs	r0, r0, r3
    6188:	4152      	adcs	r2, r2
    618a:	0943      	lsrs	r3, r0, #5
    618c:	428b      	cmp	r3, r1
    618e:	d301      	bcc.n	6194 <__aeabi_uidiv+0xc0>
    6190:	014b      	lsls	r3, r1, #5
    6192:	1ac0      	subs	r0, r0, r3
    6194:	4152      	adcs	r2, r2
    6196:	0903      	lsrs	r3, r0, #4
    6198:	428b      	cmp	r3, r1
    619a:	d301      	bcc.n	61a0 <__aeabi_uidiv+0xcc>
    619c:	010b      	lsls	r3, r1, #4
    619e:	1ac0      	subs	r0, r0, r3
    61a0:	4152      	adcs	r2, r2
    61a2:	08c3      	lsrs	r3, r0, #3
    61a4:	428b      	cmp	r3, r1
    61a6:	d301      	bcc.n	61ac <__aeabi_uidiv+0xd8>
    61a8:	00cb      	lsls	r3, r1, #3
    61aa:	1ac0      	subs	r0, r0, r3
    61ac:	4152      	adcs	r2, r2
    61ae:	0883      	lsrs	r3, r0, #2
    61b0:	428b      	cmp	r3, r1
    61b2:	d301      	bcc.n	61b8 <__aeabi_uidiv+0xe4>
    61b4:	008b      	lsls	r3, r1, #2
    61b6:	1ac0      	subs	r0, r0, r3
    61b8:	4152      	adcs	r2, r2
    61ba:	0843      	lsrs	r3, r0, #1
    61bc:	428b      	cmp	r3, r1
    61be:	d301      	bcc.n	61c4 <__aeabi_uidiv+0xf0>
    61c0:	004b      	lsls	r3, r1, #1
    61c2:	1ac0      	subs	r0, r0, r3
    61c4:	4152      	adcs	r2, r2
    61c6:	1a41      	subs	r1, r0, r1
    61c8:	d200      	bcs.n	61cc <__aeabi_uidiv+0xf8>
    61ca:	4601      	mov	r1, r0
    61cc:	4152      	adcs	r2, r2
    61ce:	4610      	mov	r0, r2
    61d0:	4770      	bx	lr
    61d2:	e7ff      	b.n	61d4 <__aeabi_uidiv+0x100>
    61d4:	b501      	push	{r0, lr}
    61d6:	2000      	movs	r0, #0
    61d8:	f000 f806 	bl	61e8 <__aeabi_idiv0>
    61dc:	bd02      	pop	{r1, pc}
    61de:	46c0      	nop			; (mov r8, r8)

000061e0 <__aeabi_uidivmod>:
    61e0:	2900      	cmp	r1, #0
    61e2:	d0f7      	beq.n	61d4 <__aeabi_uidiv+0x100>
    61e4:	e776      	b.n	60d4 <__aeabi_uidiv>
    61e6:	4770      	bx	lr

000061e8 <__aeabi_idiv0>:
    61e8:	4770      	bx	lr
    61ea:	46c0      	nop			; (mov r8, r8)

000061ec <__clzsi2>:
    61ec:	211c      	movs	r1, #28
    61ee:	2301      	movs	r3, #1
    61f0:	041b      	lsls	r3, r3, #16
    61f2:	4298      	cmp	r0, r3
    61f4:	d301      	bcc.n	61fa <__clzsi2+0xe>
    61f6:	0c00      	lsrs	r0, r0, #16
    61f8:	3910      	subs	r1, #16
    61fa:	0a1b      	lsrs	r3, r3, #8
    61fc:	4298      	cmp	r0, r3
    61fe:	d301      	bcc.n	6204 <__clzsi2+0x18>
    6200:	0a00      	lsrs	r0, r0, #8
    6202:	3908      	subs	r1, #8
    6204:	091b      	lsrs	r3, r3, #4
    6206:	4298      	cmp	r0, r3
    6208:	d301      	bcc.n	620e <__clzsi2+0x22>
    620a:	0900      	lsrs	r0, r0, #4
    620c:	3904      	subs	r1, #4
    620e:	a202      	add	r2, pc, #8	; (adr r2, 6218 <__clzsi2+0x2c>)
    6210:	5c10      	ldrb	r0, [r2, r0]
    6212:	1840      	adds	r0, r0, r1
    6214:	4770      	bx	lr
    6216:	46c0      	nop			; (mov r8, r8)
    6218:	02020304 	.word	0x02020304
    621c:	01010101 	.word	0x01010101
	...

00006228 <__errno>:
    6228:	4b01      	ldr	r3, [pc, #4]	; (6230 <__errno+0x8>)
    622a:	6818      	ldr	r0, [r3, #0]
    622c:	4770      	bx	lr
    622e:	46c0      	nop			; (mov r8, r8)
    6230:	200004a0 	.word	0x200004a0

00006234 <__libc_init_array>:
    6234:	b570      	push	{r4, r5, r6, lr}
    6236:	4e0d      	ldr	r6, [pc, #52]	; (626c <__libc_init_array+0x38>)
    6238:	4d0d      	ldr	r5, [pc, #52]	; (6270 <__libc_init_array+0x3c>)
    623a:	2400      	movs	r4, #0
    623c:	1bad      	subs	r5, r5, r6
    623e:	10ad      	asrs	r5, r5, #2
    6240:	d005      	beq.n	624e <__libc_init_array+0x1a>
    6242:	00a3      	lsls	r3, r4, #2
    6244:	58f3      	ldr	r3, [r6, r3]
    6246:	3401      	adds	r4, #1
    6248:	4798      	blx	r3
    624a:	42a5      	cmp	r5, r4
    624c:	d1f9      	bne.n	6242 <__libc_init_array+0xe>
    624e:	f000 f92f 	bl	64b0 <_init>
    6252:	4e08      	ldr	r6, [pc, #32]	; (6274 <__libc_init_array+0x40>)
    6254:	4d08      	ldr	r5, [pc, #32]	; (6278 <__libc_init_array+0x44>)
    6256:	2400      	movs	r4, #0
    6258:	1bad      	subs	r5, r5, r6
    625a:	10ad      	asrs	r5, r5, #2
    625c:	d005      	beq.n	626a <__libc_init_array+0x36>
    625e:	00a3      	lsls	r3, r4, #2
    6260:	58f3      	ldr	r3, [r6, r3]
    6262:	3401      	adds	r4, #1
    6264:	4798      	blx	r3
    6266:	42a5      	cmp	r5, r4
    6268:	d1f9      	bne.n	625e <__libc_init_array+0x2a>
    626a:	bd70      	pop	{r4, r5, r6, pc}
    626c:	000064bc 	.word	0x000064bc
    6270:	000064bc 	.word	0x000064bc
    6274:	000064bc 	.word	0x000064bc
    6278:	000064c4 	.word	0x000064c4

0000627c <register_fini>:
    627c:	4b03      	ldr	r3, [pc, #12]	; (628c <register_fini+0x10>)
    627e:	b510      	push	{r4, lr}
    6280:	2b00      	cmp	r3, #0
    6282:	d002      	beq.n	628a <register_fini+0xe>
    6284:	4802      	ldr	r0, [pc, #8]	; (6290 <register_fini+0x14>)
    6286:	f000 f805 	bl	6294 <atexit>
    628a:	bd10      	pop	{r4, pc}
    628c:	00000000 	.word	0x00000000
    6290:	000062a5 	.word	0x000062a5

00006294 <atexit>:
    6294:	b510      	push	{r4, lr}
    6296:	0001      	movs	r1, r0
    6298:	2300      	movs	r3, #0
    629a:	2200      	movs	r2, #0
    629c:	2000      	movs	r0, #0
    629e:	f000 f81b 	bl	62d8 <__register_exitproc>
    62a2:	bd10      	pop	{r4, pc}

000062a4 <__libc_fini_array>:
    62a4:	b570      	push	{r4, r5, r6, lr}
    62a6:	4b09      	ldr	r3, [pc, #36]	; (62cc <__libc_fini_array+0x28>)
    62a8:	4c09      	ldr	r4, [pc, #36]	; (62d0 <__libc_fini_array+0x2c>)
    62aa:	1ae4      	subs	r4, r4, r3
    62ac:	10a4      	asrs	r4, r4, #2
    62ae:	d009      	beq.n	62c4 <__libc_fini_array+0x20>
    62b0:	4a08      	ldr	r2, [pc, #32]	; (62d4 <__libc_fini_array+0x30>)
    62b2:	18a5      	adds	r5, r4, r2
    62b4:	00ad      	lsls	r5, r5, #2
    62b6:	18ed      	adds	r5, r5, r3
    62b8:	682b      	ldr	r3, [r5, #0]
    62ba:	3c01      	subs	r4, #1
    62bc:	4798      	blx	r3
    62be:	3d04      	subs	r5, #4
    62c0:	2c00      	cmp	r4, #0
    62c2:	d1f9      	bne.n	62b8 <__libc_fini_array+0x14>
    62c4:	f000 f8fe 	bl	64c4 <_fini>
    62c8:	bd70      	pop	{r4, r5, r6, pc}
    62ca:	46c0      	nop			; (mov r8, r8)
    62cc:	000064d0 	.word	0x000064d0
    62d0:	000064d4 	.word	0x000064d4
    62d4:	3fffffff 	.word	0x3fffffff

000062d8 <__register_exitproc>:
    62d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    62da:	4644      	mov	r4, r8
    62dc:	465f      	mov	r7, fp
    62de:	4656      	mov	r6, sl
    62e0:	464d      	mov	r5, r9
    62e2:	469b      	mov	fp, r3
    62e4:	4b2f      	ldr	r3, [pc, #188]	; (63a4 <__register_exitproc+0xcc>)
    62e6:	b4f0      	push	{r4, r5, r6, r7}
    62e8:	681c      	ldr	r4, [r3, #0]
    62ea:	23a4      	movs	r3, #164	; 0xa4
    62ec:	005b      	lsls	r3, r3, #1
    62ee:	0005      	movs	r5, r0
    62f0:	58e0      	ldr	r0, [r4, r3]
    62f2:	000e      	movs	r6, r1
    62f4:	4690      	mov	r8, r2
    62f6:	2800      	cmp	r0, #0
    62f8:	d04b      	beq.n	6392 <__register_exitproc+0xba>
    62fa:	6843      	ldr	r3, [r0, #4]
    62fc:	2b1f      	cmp	r3, #31
    62fe:	dc0d      	bgt.n	631c <__register_exitproc+0x44>
    6300:	1c5c      	adds	r4, r3, #1
    6302:	2d00      	cmp	r5, #0
    6304:	d121      	bne.n	634a <__register_exitproc+0x72>
    6306:	3302      	adds	r3, #2
    6308:	009b      	lsls	r3, r3, #2
    630a:	6044      	str	r4, [r0, #4]
    630c:	501e      	str	r6, [r3, r0]
    630e:	2000      	movs	r0, #0
    6310:	bc3c      	pop	{r2, r3, r4, r5}
    6312:	4690      	mov	r8, r2
    6314:	4699      	mov	r9, r3
    6316:	46a2      	mov	sl, r4
    6318:	46ab      	mov	fp, r5
    631a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    631c:	4b22      	ldr	r3, [pc, #136]	; (63a8 <__register_exitproc+0xd0>)
    631e:	2b00      	cmp	r3, #0
    6320:	d03c      	beq.n	639c <__register_exitproc+0xc4>
    6322:	20c8      	movs	r0, #200	; 0xc8
    6324:	0040      	lsls	r0, r0, #1
    6326:	e000      	b.n	632a <__register_exitproc+0x52>
    6328:	bf00      	nop
    632a:	2800      	cmp	r0, #0
    632c:	d036      	beq.n	639c <__register_exitproc+0xc4>
    632e:	22a4      	movs	r2, #164	; 0xa4
    6330:	2300      	movs	r3, #0
    6332:	0052      	lsls	r2, r2, #1
    6334:	58a1      	ldr	r1, [r4, r2]
    6336:	6043      	str	r3, [r0, #4]
    6338:	6001      	str	r1, [r0, #0]
    633a:	50a0      	str	r0, [r4, r2]
    633c:	3240      	adds	r2, #64	; 0x40
    633e:	5083      	str	r3, [r0, r2]
    6340:	3204      	adds	r2, #4
    6342:	5083      	str	r3, [r0, r2]
    6344:	2401      	movs	r4, #1
    6346:	2d00      	cmp	r5, #0
    6348:	d0dd      	beq.n	6306 <__register_exitproc+0x2e>
    634a:	009a      	lsls	r2, r3, #2
    634c:	4691      	mov	r9, r2
    634e:	4481      	add	r9, r0
    6350:	4642      	mov	r2, r8
    6352:	2188      	movs	r1, #136	; 0x88
    6354:	464f      	mov	r7, r9
    6356:	507a      	str	r2, [r7, r1]
    6358:	22c4      	movs	r2, #196	; 0xc4
    635a:	0052      	lsls	r2, r2, #1
    635c:	4690      	mov	r8, r2
    635e:	4480      	add	r8, r0
    6360:	4642      	mov	r2, r8
    6362:	3987      	subs	r1, #135	; 0x87
    6364:	4099      	lsls	r1, r3
    6366:	6812      	ldr	r2, [r2, #0]
    6368:	468a      	mov	sl, r1
    636a:	430a      	orrs	r2, r1
    636c:	4694      	mov	ip, r2
    636e:	4642      	mov	r2, r8
    6370:	4661      	mov	r1, ip
    6372:	6011      	str	r1, [r2, #0]
    6374:	2284      	movs	r2, #132	; 0x84
    6376:	4649      	mov	r1, r9
    6378:	465f      	mov	r7, fp
    637a:	0052      	lsls	r2, r2, #1
    637c:	508f      	str	r7, [r1, r2]
    637e:	2d02      	cmp	r5, #2
    6380:	d1c1      	bne.n	6306 <__register_exitproc+0x2e>
    6382:	0002      	movs	r2, r0
    6384:	4655      	mov	r5, sl
    6386:	328d      	adds	r2, #141	; 0x8d
    6388:	32ff      	adds	r2, #255	; 0xff
    638a:	6811      	ldr	r1, [r2, #0]
    638c:	430d      	orrs	r5, r1
    638e:	6015      	str	r5, [r2, #0]
    6390:	e7b9      	b.n	6306 <__register_exitproc+0x2e>
    6392:	0020      	movs	r0, r4
    6394:	304d      	adds	r0, #77	; 0x4d
    6396:	30ff      	adds	r0, #255	; 0xff
    6398:	50e0      	str	r0, [r4, r3]
    639a:	e7ae      	b.n	62fa <__register_exitproc+0x22>
    639c:	2001      	movs	r0, #1
    639e:	4240      	negs	r0, r0
    63a0:	e7b6      	b.n	6310 <__register_exitproc+0x38>
    63a2:	46c0      	nop			; (mov r8, r8)
    63a4:	000064ac 	.word	0x000064ac
    63a8:	00000000 	.word	0x00000000

000063ac <senseBatPin>:
    63ac:	06000000 01000106                                .....

000063b1 <senseAPin>:
    63b1:	03010001 0100010b                                .....

000063b6 <senseBPin>:
    63b6:	02010001 0000010a                                .....

000063bb <senseCPin>:
    63bb:	03000001 00000101                                .....

000063c0 <senseDPin>:
    63c0:	02000001 00000000                                .....

000063c5 <analogAccelPin>:
    63c5:	07000000 70000007 0000776f 00000000     .......pow......
    63d5:	00000000                                         ...

000063d8 <TWO52>:
    63d8:	00000000 43300000 00000000 c3300000     ......0C......0.
    63e8:	00003e4c 00003daa 00003daa 00003da8     L>...=...=...=..
    63f8:	00003e3e 00003e3e 00003e34 00003da8     >>..>>..4>...=..
    6408:	00003e3e 00003e34 00003e3e 00003da8     >>..4>..>>...=..
    6418:	00003e44 00003e44 00003e44 00003ece     D>..D>..D>...>..
    6428:	00004b80 00004a4e 00004b54 00004a44     .K..NJ..TK..DJ..
    6438:	00004b54 00004b5e 00004b54 00004a44     TK..^K..TK..DJ..
    6448:	00004a4e 00004a4e 00004b5e 00004a44     NJ..NJ..^K..DJ..
    6458:	00004a3a 00004a3a 00004a3a 00004db0     :J..:J..:J...M..
    6468:	000053c8 00005288 00005288 00005286     .S...R...R...R..
    6478:	000053a0 000053a0 00005392 00005286     .S...S...S...R..
    6488:	000053a0 00005392 000053a0 00005286     .S...S...S...R..
    6498:	000053a8 000053a8 000053a8 000055a8     .S...S...S...U..
    64a8:	00000043                                C...

000064ac <_global_impure_ptr>:
    64ac:	20000078                                x.. 

000064b0 <_init>:
    64b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    64b2:	46c0      	nop			; (mov r8, r8)
    64b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    64b6:	bc08      	pop	{r3}
    64b8:	469e      	mov	lr, r3
    64ba:	4770      	bx	lr

000064bc <__init_array_start>:
    64bc:	0000627d 	.word	0x0000627d

000064c0 <__frame_dummy_init_array_entry>:
    64c0:	000000dd                                ....

000064c4 <_fini>:
    64c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    64c6:	46c0      	nop			; (mov r8, r8)
    64c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    64ca:	bc08      	pop	{r3}
    64cc:	469e      	mov	lr, r3
    64ce:	4770      	bx	lr

000064d0 <__fini_array_start>:
    64d0:	000000b5 	.word	0x000000b5
