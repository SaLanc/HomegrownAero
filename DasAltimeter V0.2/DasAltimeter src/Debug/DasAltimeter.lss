
DasAltimeter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000683c  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000004a4  20000000  0000683c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000388  200004a8  00006ce8  000204a8  2**3
                  ALLOC
  3 .stack        00002000  20000830  00007070  000204a8  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000204a4  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  000204cc  2**0
                  CONTENTS, READONLY
  6 .debug_info   00021b08  00000000  00000000  00020525  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002830  00000000  00000000  0004202d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00002538  00000000  00000000  0004485d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000430  00000000  00000000  00046d95  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000c70  00000000  00000000  000471c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00016435  00000000  00000000  00047e35  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00009d55  00000000  00000000  0005e26a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00072afe  00000000  00000000  00067fbf  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001124  00000000  00000000  000daac0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
 *         retrieved from cpu registers.
 */
void SystemCoreClockUpdate(void)
{
	// Not implemented
	SystemCoreClock = __SYSTEM_CLOCK;
       0:	20002830 	.word	0x20002830
       4:	00000119 	.word	0x00000119
	return;
}
       8:	00000115 	.word	0x00000115
       c:	00000115 	.word	0x00000115
	...
      2c:	00000115 	.word	0x00000115
	...
      38:	00000115 	.word	0x00000115
      3c:	00000115 	.word	0x00000115
      40:	00000115 	.word	0x00000115
      44:	00000115 	.word	0x00000115
      48:	00000115 	.word	0x00000115
      4c:	00001021 	.word	0x00001021
      50:	00000115 	.word	0x00000115
      54:	00000115 	.word	0x00000115
      58:	00000115 	.word	0x00000115
      5c:	00000115 	.word	0x00000115
      60:	00000115 	.word	0x00000115
      64:	00000115 	.word	0x00000115
      68:	00000115 	.word	0x00000115
      6c:	00000115 	.word	0x00000115
      70:	00000115 	.word	0x00000115
      74:	00000115 	.word	0x00000115
      78:	00000115 	.word	0x00000115
      7c:	00000115 	.word	0x00000115
      80:	00000115 	.word	0x00000115
      84:	00000115 	.word	0x00000115
      88:	00000115 	.word	0x00000115
      8c:	000010c1 	.word	0x000010c1
      90:	00001129 	.word	0x00001129
	...
      9c:	00000115 	.word	0x00000115
      a0:	00000115 	.word	0x00000115
      a4:	00000115 	.word	0x00000115
      a8:	00000115 	.word	0x00000115
      ac:	00000115 	.word	0x00000115
      b0:	00000000 	.word	0x00000000

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200004a8 	.word	0x200004a8
      d4:	00000000 	.word	0x00000000
      d8:	0000683c 	.word	0x0000683c

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200004ac 	.word	0x200004ac
     108:	0000683c 	.word	0x0000683c
     10c:	0000683c 	.word	0x0000683c
     110:	00000000 	.word	0x00000000

00000114 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     114:	e7fe      	b.n	114 <Dummy_Handler>
	...

00000118 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
     118:	4821      	ldr	r0, [pc, #132]	; (1a0 <Reset_Handler+0x88>)
     11a:	4922      	ldr	r1, [pc, #136]	; (1a4 <Reset_Handler+0x8c>)
     11c:	b570      	push	{r4, r5, r6, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
     11e:	4288      	cmp	r0, r1
     120:	d002      	beq.n	128 <Reset_Handler+0x10>
     122:	2300      	movs	r3, #0
                for (; pDest < &_erelocate;) {
     124:	4c20      	ldr	r4, [pc, #128]	; (1a8 <Reset_Handler+0x90>)
     126:	e003      	b.n	130 <Reset_Handler+0x18>
     128:	4b20      	ldr	r3, [pc, #128]	; (1ac <Reset_Handler+0x94>)
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     12a:	4a21      	ldr	r2, [pc, #132]	; (1b0 <Reset_Handler+0x98>)
                *pDest++ = 0;
     12c:	2100      	movs	r1, #0
     12e:	e006      	b.n	13e <Reset_Handler+0x26>
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
     130:	18ca      	adds	r2, r1, r3
     132:	42a2      	cmp	r2, r4
     134:	d2f8      	bcs.n	128 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
     136:	58c5      	ldr	r5, [r0, r3]
     138:	3304      	adds	r3, #4
     13a:	6015      	str	r5, [r2, #0]
     13c:	e7f8      	b.n	130 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     13e:	4293      	cmp	r3, r2
     140:	d201      	bcs.n	146 <Reset_Handler+0x2e>
                *pDest++ = 0;
     142:	c302      	stmia	r3!, {r1}
     144:	e7fb      	b.n	13e <Reset_Handler+0x26>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     146:	21ff      	movs	r1, #255	; 0xff

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     148:	2402      	movs	r4, #2
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     14a:	2503      	movs	r5, #3
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     14c:	4b19      	ldr	r3, [pc, #100]	; (1b4 <Reset_Handler+0x9c>)
     14e:	4a1a      	ldr	r2, [pc, #104]	; (1b8 <Reset_Handler+0xa0>)
     150:	438b      	bics	r3, r1

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     152:	260c      	movs	r6, #12
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     154:	6093      	str	r3, [r2, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     156:	2208      	movs	r2, #8
        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     158:	4b18      	ldr	r3, [pc, #96]	; (1bc <Reset_Handler+0xa4>)
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     15a:	4919      	ldr	r1, [pc, #100]	; (1c0 <Reset_Handler+0xa8>)
        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     15c:	625c      	str	r4, [r3, #36]	; 0x24
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     15e:	78cb      	ldrb	r3, [r1, #3]
     160:	43ab      	bics	r3, r5
     162:	4323      	orrs	r3, r4
     164:	70cb      	strb	r3, [r1, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     166:	78cb      	ldrb	r3, [r1, #3]
     168:	43b3      	bics	r3, r6
     16a:	4313      	orrs	r3, r2
     16c:	70cb      	strb	r3, [r1, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
     16e:	2130      	movs	r1, #48	; 0x30
     170:	4b14      	ldr	r3, [pc, #80]	; (1c4 <Reset_Handler+0xac>)
     172:	7b98      	ldrb	r0, [r3, #14]
     174:	4388      	bics	r0, r1
     176:	3910      	subs	r1, #16
     178:	4308      	orrs	r0, r1
     17a:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     17c:	7b99      	ldrb	r1, [r3, #14]
     17e:	43b1      	bics	r1, r6
     180:	4311      	orrs	r1, r2
     182:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
     184:	2180      	movs	r1, #128	; 0x80
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
        DMAC->QOSCTRL.bit.FQOS = 2;
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     186:	7b9a      	ldrb	r2, [r3, #14]
     188:	43aa      	bics	r2, r5
     18a:	4322      	orrs	r2, r4
     18c:	739a      	strb	r2, [r3, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
     18e:	4a0e      	ldr	r2, [pc, #56]	; (1c8 <Reset_Handler+0xb0>)
     190:	6853      	ldr	r3, [r2, #4]
     192:	430b      	orrs	r3, r1
     194:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
     196:	4b0d      	ldr	r3, [pc, #52]	; (1cc <Reset_Handler+0xb4>)
     198:	4798      	blx	r3

        /* Branch to main function */
        main();
     19a:	4b0d      	ldr	r3, [pc, #52]	; (1d0 <Reset_Handler+0xb8>)
     19c:	4798      	blx	r3
     19e:	e7fe      	b.n	19e <Reset_Handler+0x86>
     1a0:	0000683c 	.word	0x0000683c
     1a4:	20000000 	.word	0x20000000
     1a8:	200004a4 	.word	0x200004a4
     1ac:	200004a8 	.word	0x200004a8
     1b0:	20000830 	.word	0x20000830
     1b4:	00000000 	.word	0x00000000
     1b8:	e000ed00 	.word	0xe000ed00
     1bc:	410070fc 	.word	0x410070fc
     1c0:	41005000 	.word	0x41005000
     1c4:	41004800 	.word	0x41004800
     1c8:	41004000 	.word	0x41004000
     1cc:	0000659d 	.word	0x0000659d
     1d0:	000009c1 	.word	0x000009c1

000001d4 <SystemInit>:
     1d4:	4a01      	ldr	r2, [pc, #4]	; (1dc <SystemInit+0x8>)
     1d6:	4b02      	ldr	r3, [pc, #8]	; (1e0 <SystemInit+0xc>)
     1d8:	601a      	str	r2, [r3, #0]
     1da:	4770      	bx	lr
     1dc:	000f4240 	.word	0x000f4240
     1e0:	20000000 	.word	0x20000000

000001e4 <AT25SFHoldTillReady>:
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     1e4:	2380      	movs	r3, #128	; 0x80
    pinLow(cs_mem);
    spiDataOut(MEM_SPI,OPCODE_WRITEENABLE);
    pinHigh(cs_mem);
}

void AT25SFHoldTillReady() {
     1e6:	b570      	push	{r4, r5, r6, lr}
     1e8:	4c08      	ldr	r4, [pc, #32]	; (20c <AT25SFHoldTillReady+0x28>)
     1ea:	02db      	lsls	r3, r3, #11
     1ec:	6163      	str	r3, [r4, #20]
    pinLow(cs_mem);
    spiDataOut(MEM_SPI,OPCODE_READSTATUS);
     1ee:	2105      	movs	r1, #5
     1f0:	2001      	movs	r0, #1
     1f2:	4b07      	ldr	r3, [pc, #28]	; (210 <AT25SFHoldTillReady+0x2c>)
     1f4:	4798      	blx	r3
    while (spiDataIn(MEM_SPI) & 0x01);
     1f6:	2501      	movs	r5, #1
     1f8:	2001      	movs	r0, #1
     1fa:	4b06      	ldr	r3, [pc, #24]	; (214 <AT25SFHoldTillReady+0x30>)
     1fc:	4798      	blx	r3
     1fe:	4228      	tst	r0, r5
     200:	d1fa      	bne.n	1f8 <AT25SFHoldTillReady+0x14>
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     202:	2380      	movs	r3, #128	; 0x80
     204:	02db      	lsls	r3, r3, #11
     206:	61a3      	str	r3, [r4, #24]
    pinHigh(cs_mem);
}
     208:	bd70      	pop	{r4, r5, r6, pc}
     20a:	46c0      	nop			; (mov r8, r8)
     20c:	41004400 	.word	0x41004400
     210:	00002a05 	.word	0x00002a05
     214:	00002a1d 	.word	0x00002a1d

00000218 <AT25SFChipErase>:
void AT25SFChipErase() {
     218:	b570      	push	{r4, r5, r6, lr}
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     21a:	2580      	movs	r5, #128	; 0x80
     21c:	4c06      	ldr	r4, [pc, #24]	; (238 <AT25SFChipErase+0x20>)
     21e:	02ed      	lsls	r5, r5, #11

    pinLow(cs_mem);
    spiDataOut(MEM_SPI,OPCODE_WRITEENABLE);
     220:	4e06      	ldr	r6, [pc, #24]	; (23c <AT25SFChipErase+0x24>)
     222:	6165      	str	r5, [r4, #20]
     224:	2106      	movs	r1, #6
     226:	2001      	movs	r0, #1
     228:	47b0      	blx	r6
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     22a:	61a5      	str	r5, [r4, #24]
    pinHigh(cs_mem);

    pinLow(cs_mem);
    spiDataOut(MEM_SPI,OPCODE_CHIP_ERASE);
     22c:	2160      	movs	r1, #96	; 0x60
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     22e:	6165      	str	r5, [r4, #20]
     230:	2001      	movs	r0, #1
     232:	47b0      	blx	r6
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     234:	61a5      	str	r5, [r4, #24]
    pinHigh(cs_mem);
}
     236:	bd70      	pop	{r4, r5, r6, pc}
     238:	41004400 	.word	0x41004400
     23c:	00002a05 	.word	0x00002a05

00000240 <AT25SFWriteBytes>:
    pinHigh(cs_mem);

    return _byte;
}

void AT25SFWriteBytes(uint32_t address, u8_t len, uint8_t *bytes) {
     240:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     242:	2780      	movs	r7, #128	; 0x80
     244:	0006      	movs	r6, r0
     246:	4d13      	ldr	r5, [pc, #76]	; (294 <AT25SFWriteBytes+0x54>)
     248:	02ff      	lsls	r7, r7, #11
     24a:	9201      	str	r2, [sp, #4]


    pinLow(cs_mem);
    spiDataOut(MEM_SPI,OPCODE_WRITEENABLE);
     24c:	4c12      	ldr	r4, [pc, #72]	; (298 <AT25SFWriteBytes+0x58>)
    pinHigh(cs_mem);

    return _byte;
}

void AT25SFWriteBytes(uint32_t address, u8_t len, uint8_t *bytes) {
     24e:	9100      	str	r1, [sp, #0]


    pinLow(cs_mem);
    spiDataOut(MEM_SPI,OPCODE_WRITEENABLE);
     250:	2001      	movs	r0, #1
     252:	616f      	str	r7, [r5, #20]
     254:	2106      	movs	r1, #6
     256:	47a0      	blx	r4
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     258:	61af      	str	r7, [r5, #24]
    pinHigh(cs_mem);

    pinLow(cs_mem);
    spiDataOut(MEM_SPI,OPCODE_PROGRAM);
     25a:	2102      	movs	r1, #2
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     25c:	616f      	str	r7, [r5, #20]
     25e:	2001      	movs	r0, #1
     260:	47a0      	blx	r4
    spiDataOut(MEM_SPI,((address & 0xFF0000) >> 16));
     262:	0c31      	lsrs	r1, r6, #16
     264:	b2c9      	uxtb	r1, r1
     266:	2001      	movs	r0, #1
     268:	47a0      	blx	r4
    spiDataOut(MEM_SPI,((address & 0x00FF00) >>  8));
     26a:	0a31      	lsrs	r1, r6, #8
     26c:	b2c9      	uxtb	r1, r1
     26e:	2001      	movs	r0, #1
     270:	47a0      	blx	r4
    spiDataOut(MEM_SPI,((address & 0x0000FF) >>  0));
     272:	b2f1      	uxtb	r1, r6
     274:	2001      	movs	r0, #1
     276:	47a0      	blx	r4
     278:	9e01      	ldr	r6, [sp, #4]
     27a:	9b00      	ldr	r3, [sp, #0]
     27c:	18f7      	adds	r7, r6, r3

    for (u8_t pos = 0; pos < len; ++pos) {
     27e:	42be      	cmp	r6, r7
     280:	d004      	beq.n	28c <AT25SFWriteBytes+0x4c>
        spiDataOut(MEM_SPI, bytes[pos]);
     282:	7831      	ldrb	r1, [r6, #0]
     284:	2001      	movs	r0, #1
     286:	47a0      	blx	r4
     288:	3601      	adds	r6, #1
     28a:	e7f8      	b.n	27e <AT25SFWriteBytes+0x3e>
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     28c:	2380      	movs	r3, #128	; 0x80
     28e:	02db      	lsls	r3, r3, #11
     290:	61ab      	str	r3, [r5, #24]
    }

    pinHigh(cs_mem);

}
     292:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
     294:	41004400 	.word	0x41004400
     298:	00002a05 	.word	0x00002a05

0000029c <AT25SEWritePage>:
    delay_ms(70);

}


u8_t AT25SEWritePage(u32_t startingAddress, u8_t *data) {
     29c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     29e:	2780      	movs	r7, #128	; 0x80
     2a0:	0006      	movs	r6, r0
     2a2:	4d13      	ldr	r5, [pc, #76]	; (2f0 <AT25SEWritePage+0x54>)
     2a4:	02ff      	lsls	r7, r7, #11

    u8_t bytesSent = 0;

    pinLow(cs_mem);
    spiDataOut(MEM_SPI,OPCODE_WRITEENABLE);
     2a6:	4c13      	ldr	r4, [pc, #76]	; (2f4 <AT25SEWritePage+0x58>)
    delay_ms(70);

}


u8_t AT25SEWritePage(u32_t startingAddress, u8_t *data) {
     2a8:	9101      	str	r1, [sp, #4]

    u8_t bytesSent = 0;

    pinLow(cs_mem);
    spiDataOut(MEM_SPI,OPCODE_WRITEENABLE);
     2aa:	2001      	movs	r0, #1
     2ac:	616f      	str	r7, [r5, #20]
     2ae:	2106      	movs	r1, #6
     2b0:	47a0      	blx	r4
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     2b2:	61af      	str	r7, [r5, #24]
    pinHigh(cs_mem);

    pinLow(cs_mem);
    spiDataOut(MEM_SPI,OPCODE_PROGRAM);
     2b4:	2102      	movs	r1, #2
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     2b6:	616f      	str	r7, [r5, #20]
     2b8:	2001      	movs	r0, #1
     2ba:	47a0      	blx	r4
    spiDataOut(MEM_SPI,((startingAddress & 0xFF0000) >> 16));
     2bc:	0c31      	lsrs	r1, r6, #16
     2be:	b2c9      	uxtb	r1, r1
     2c0:	2001      	movs	r0, #1
     2c2:	47a0      	blx	r4
    spiDataOut(MEM_SPI,((startingAddress & 0x00FF00) >>  8));
     2c4:	0a31      	lsrs	r1, r6, #8
     2c6:	b2c9      	uxtb	r1, r1
     2c8:	2001      	movs	r0, #1
     2ca:	47a0      	blx	r4
    spiDataOut(MEM_SPI,((startingAddress & 0x0000FF) >>  0));
     2cc:	b2f1      	uxtb	r1, r6
     2ce:	2001      	movs	r0, #1
     2d0:	47a0      	blx	r4
     2d2:	9e01      	ldr	r6, [sp, #4]
     2d4:	1c77      	adds	r7, r6, #1
     2d6:	37ff      	adds	r7, #255	; 0xff


    for (u16_t pos = 0; pos < 256; ++pos) {
        ++bytesSent;
        spiDataOut(SPI1,data[pos]);
     2d8:	7831      	ldrb	r1, [r6, #0]
     2da:	2001      	movs	r0, #1
     2dc:	3601      	adds	r6, #1
     2de:	47a0      	blx	r4
    spiDataOut(MEM_SPI,((startingAddress & 0xFF0000) >> 16));
    spiDataOut(MEM_SPI,((startingAddress & 0x00FF00) >>  8));
    spiDataOut(MEM_SPI,((startingAddress & 0x0000FF) >>  0));


    for (u16_t pos = 0; pos < 256; ++pos) {
     2e0:	42be      	cmp	r6, r7
     2e2:	d1f9      	bne.n	2d8 <AT25SEWritePage+0x3c>
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     2e4:	2380      	movs	r3, #128	; 0x80
     2e6:	02db      	lsls	r3, r3, #11
     2e8:	61ab      	str	r3, [r5, #24]
    }
    pinHigh(cs_mem);


    return bytesSent;
}
     2ea:	2000      	movs	r0, #0
     2ec:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
     2ee:	46c0      	nop			; (mov r8, r8)
     2f0:	41004400 	.word	0x41004400
     2f4:	00002a05 	.word	0x00002a05

000002f8 <AT25SEreadSample>:
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     2f8:	2380      	movs	r3, #128	; 0x80

void AT25SEreadSample(u32_t startingAddress, u8_t len, u8_t *data) {
     2fa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     2fc:	0005      	movs	r5, r0
     2fe:	000f      	movs	r7, r1
     300:	4e11      	ldr	r6, [pc, #68]	; (348 <AT25SEreadSample+0x50>)
     302:	02db      	lsls	r3, r3, #11
     304:	9201      	str	r2, [sp, #4]

    pinLow(cs_mem);
    spiDataOut(MEM_SPI,OPCODE_FASTREAD_ARRAY);
     306:	4c11      	ldr	r4, [pc, #68]	; (34c <AT25SEreadSample+0x54>)
     308:	6173      	str	r3, [r6, #20]
     30a:	210b      	movs	r1, #11
     30c:	2001      	movs	r0, #1
     30e:	47a0      	blx	r4
    spiDataOut(MEM_SPI,((startingAddress & 0xFF0000) >> 16));
     310:	0c29      	lsrs	r1, r5, #16
     312:	b2c9      	uxtb	r1, r1
     314:	2001      	movs	r0, #1
     316:	47a0      	blx	r4
    spiDataOut(MEM_SPI,((startingAddress & 0x00FF00) >>  8));
     318:	0a29      	lsrs	r1, r5, #8
     31a:	b2c9      	uxtb	r1, r1
     31c:	2001      	movs	r0, #1
     31e:	47a0      	blx	r4
    spiDataOut(MEM_SPI,((startingAddress & 0x0000FF) >>  0));
     320:	b2e9      	uxtb	r1, r5
     322:	2001      	movs	r0, #1
     324:	47a0      	blx	r4
    spiDataOut(MEM_SPI, 0xFF);
     326:	21ff      	movs	r1, #255	; 0xff
     328:	2001      	movs	r0, #1
     32a:	47a0      	blx	r4
     32c:	9c01      	ldr	r4, [sp, #4]
     32e:	19e7      	adds	r7, r4, r7


    for (u8_t pos = 0; pos < len; ++pos) {
     330:	42bc      	cmp	r4, r7
     332:	d005      	beq.n	340 <AT25SEreadSample+0x48>
        data[pos] = spiDataIn(MEM_SPI);
     334:	2001      	movs	r0, #1
     336:	4b06      	ldr	r3, [pc, #24]	; (350 <AT25SEreadSample+0x58>)
     338:	4798      	blx	r3
     33a:	7020      	strb	r0, [r4, #0]
     33c:	3401      	adds	r4, #1
     33e:	e7f7      	b.n	330 <AT25SEreadSample+0x38>
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     340:	2380      	movs	r3, #128	; 0x80
     342:	02db      	lsls	r3, r3, #11
     344:	61b3      	str	r3, [r6, #24]
    }
    pinHigh(cs_mem);

}
     346:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
     348:	41004400 	.word	0x41004400
     34c:	00002a05 	.word	0x00002a05
     350:	00002a1d 	.word	0x00002a1d

00000354 <AT25SEreadPage>:

void AT25SEreadPage(u32_t startingAddress, u8_t *data) {
     354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     356:	2380      	movs	r3, #128	; 0x80
     358:	0007      	movs	r7, r0
     35a:	000c      	movs	r4, r1
     35c:	4e10      	ldr	r6, [pc, #64]	; (3a0 <AT25SEreadPage+0x4c>)
     35e:	02db      	lsls	r3, r3, #11


    pinLow(cs_mem);
    spiDataOut(MEM_SPI,OPCODE_FASTREAD_ARRAY);
     360:	4d10      	ldr	r5, [pc, #64]	; (3a4 <AT25SEreadPage+0x50>)
     362:	6173      	str	r3, [r6, #20]
     364:	210b      	movs	r1, #11
     366:	2001      	movs	r0, #1
     368:	47a8      	blx	r5
    spiDataOut(MEM_SPI,((startingAddress & 0xFF0000) >> 16));
     36a:	0c39      	lsrs	r1, r7, #16
     36c:	b2c9      	uxtb	r1, r1
     36e:	2001      	movs	r0, #1
     370:	47a8      	blx	r5
    spiDataOut(MEM_SPI,((startingAddress & 0x00FF00) >>  8));
     372:	0a39      	lsrs	r1, r7, #8
     374:	b2c9      	uxtb	r1, r1
     376:	2001      	movs	r0, #1
     378:	47a8      	blx	r5
    spiDataOut(MEM_SPI,((startingAddress & 0x0000FF) >>  0));
     37a:	b2f9      	uxtb	r1, r7
     37c:	2001      	movs	r0, #1
     37e:	47a8      	blx	r5
    spiDataOut(MEM_SPI, 0xFF);
     380:	21ff      	movs	r1, #255	; 0xff
     382:	2001      	movs	r0, #1
     384:	47a8      	blx	r5
     386:	1c65      	adds	r5, r4, #1
     388:	35ff      	adds	r5, #255	; 0xff


    for (u16_t pos = 0; pos < 256; ++pos) {
        data[pos] = spiDataIn(MEM_SPI);
     38a:	2001      	movs	r0, #1
     38c:	4b06      	ldr	r3, [pc, #24]	; (3a8 <AT25SEreadPage+0x54>)
     38e:	4798      	blx	r3
     390:	7020      	strb	r0, [r4, #0]
     392:	3401      	adds	r4, #1
    spiDataOut(MEM_SPI,((startingAddress & 0x00FF00) >>  8));
    spiDataOut(MEM_SPI,((startingAddress & 0x0000FF) >>  0));
    spiDataOut(MEM_SPI, 0xFF);


    for (u16_t pos = 0; pos < 256; ++pos) {
     394:	42ac      	cmp	r4, r5
     396:	d1f8      	bne.n	38a <AT25SEreadPage+0x36>
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     398:	2380      	movs	r3, #128	; 0x80
     39a:	02db      	lsls	r3, r3, #11
     39c:	61b3      	str	r3, [r6, #24]
        data[pos] = spiDataIn(MEM_SPI);
    }
    pinHigh(cs_mem);

}
     39e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     3a0:	41004400 	.word	0x41004400
     3a4:	00002a05 	.word	0x00002a05
     3a8:	00002a1d 	.word	0x00002a1d

000003ac <readMS5803AdcResults>:
#include <MS5803.h>
#include <boardDefines.h>
#include <math.h>

u32_t readMS5803AdcResults() {
     3ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     3ae:	2780      	movs	r7, #128	; 0x80
     3b0:	4e0b      	ldr	r6, [pc, #44]	; (3e0 <readMS5803AdcResults+0x34>)
     3b2:	01ff      	lsls	r7, r7, #7

    pinLow(cs_baro);
    spiDataOut(BARO_SPI, cmdAdcRead_);
     3b4:	2100      	movs	r1, #0
     3b6:	4b0b      	ldr	r3, [pc, #44]	; (3e4 <readMS5803AdcResults+0x38>)
     3b8:	6177      	str	r7, [r6, #20]
     3ba:	2002      	movs	r0, #2
     3bc:	4798      	blx	r3
    u8_t _byte1 = spiDataIn(SPI2);
     3be:	4d0a      	ldr	r5, [pc, #40]	; (3e8 <readMS5803AdcResults+0x3c>)
     3c0:	2002      	movs	r0, #2
     3c2:	47a8      	blx	r5
     3c4:	0004      	movs	r4, r0
    u8_t _byte2 = spiDataIn(SPI2);
     3c6:	2002      	movs	r0, #2
     3c8:	47a8      	blx	r5
     3ca:	9001      	str	r0, [sp, #4]
    u8_t _byte3 = spiDataIn(SPI2);
     3cc:	2002      	movs	r0, #2
     3ce:	47a8      	blx	r5
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     3d0:	61b7      	str	r7, [r6, #24]
    pinHigh(cs_baro);

    u32_t _receive = (_byte1 << 16) | (_byte2 << 8) | (_byte3);
    return _receive;
     3d2:	9b01      	ldr	r3, [sp, #4]
     3d4:	0424      	lsls	r4, r4, #16
     3d6:	021b      	lsls	r3, r3, #8
     3d8:	431c      	orrs	r4, r3
     3da:	4320      	orrs	r0, r4
}
     3dc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
     3de:	46c0      	nop			; (mov r8, r8)
     3e0:	41004400 	.word	0x41004400
     3e4:	00002a05 	.word	0x00002a05
     3e8:	00002a1d 	.word	0x00002a1d

000003ec <ConvertPressureTemperature>:

void ConvertPressureTemperature(u32_t pressureRaw, u32_t tempRaw, u32_t* temperatureCelcus, int32_t* pressureMbar ) {
     3ec:	b5f0      	push	{r4, r5, r6, r7, lr}
     3ee:	b087      	sub	sp, #28
     3f0:	9304      	str	r3, [sp, #16]
    const u16_t C1 = coefficients_[1];
     3f2:	4b24      	ldr	r3, [pc, #144]	; (484 <ConvertPressureTemperature+0x98>)

    u32_t _receive = (_byte1 << 16) | (_byte2 << 8) | (_byte3);
    return _receive;
}

void ConvertPressureTemperature(u32_t pressureRaw, u32_t tempRaw, u32_t* temperatureCelcus, int32_t* pressureMbar ) {
     3f4:	9003      	str	r0, [sp, #12]
     3f6:	0014      	movs	r4, r2
    const u16_t C1 = coefficients_[1];
     3f8:	885a      	ldrh	r2, [r3, #2]
    const u16_t C5 = coefficients_[5];
    const u16_t C6 = coefficients_[6];

    // calculate 1st order pressure and temperature (MS5607 1st order algorithm)
    const  int32_t dT = (tempRaw) - ((int32_t)C5 << 8);
    *temperatureCelcus  = 2000 + (((int64_t)dT * C6) >> 23) ;
     3fa:	4f23      	ldr	r7, [pc, #140]	; (488 <ConvertPressureTemperature+0x9c>)
    u32_t _receive = (_byte1 << 16) | (_byte2 << 8) | (_byte3);
    return _receive;
}

void ConvertPressureTemperature(u32_t pressureRaw, u32_t tempRaw, u32_t* temperatureCelcus, int32_t* pressureMbar ) {
    const u16_t C1 = coefficients_[1];
     3fc:	9200      	str	r2, [sp, #0]
    const u16_t C2 = coefficients_[2];
     3fe:	889a      	ldrh	r2, [r3, #4]
     400:	9201      	str	r2, [sp, #4]
    const u16_t C3 = coefficients_[3];
    const u16_t C4 = coefficients_[4];
     402:	891a      	ldrh	r2, [r3, #8]
}

void ConvertPressureTemperature(u32_t pressureRaw, u32_t tempRaw, u32_t* temperatureCelcus, int32_t* pressureMbar ) {
    const u16_t C1 = coefficients_[1];
    const u16_t C2 = coefficients_[2];
    const u16_t C3 = coefficients_[3];
     404:	88dd      	ldrh	r5, [r3, #6]
    const u16_t C4 = coefficients_[4];
     406:	9202      	str	r2, [sp, #8]
    const u16_t C5 = coefficients_[5];
    const u16_t C6 = coefficients_[6];

    // calculate 1st order pressure and temperature (MS5607 1st order algorithm)
    const  int32_t dT = (tempRaw) - ((int32_t)C5 << 8);
    *temperatureCelcus  = 2000 + (((int64_t)dT * C6) >> 23) ;
     408:	895e      	ldrh	r6, [r3, #10]
     40a:	0236      	lsls	r6, r6, #8
     40c:	1b8e      	subs	r6, r1, r6
     40e:	17f2      	asrs	r2, r6, #31
     410:	9205      	str	r2, [sp, #20]
     412:	8998      	ldrh	r0, [r3, #12]
     414:	0032      	movs	r2, r6
     416:	17f3      	asrs	r3, r6, #31
     418:	2100      	movs	r1, #0
     41a:	47b8      	blx	r7
     41c:	23fa      	movs	r3, #250	; 0xfa
     41e:	0249      	lsls	r1, r1, #9
     420:	0dc0      	lsrs	r0, r0, #23
     422:	4308      	orrs	r0, r1
     424:	00db      	lsls	r3, r3, #3
     426:	18c0      	adds	r0, r0, r3
     428:	6020      	str	r0, [r4, #0]

    const  int64_t OFF   = ((int64_t)C2 << 16) + ((C4 * (int64_t)dT) >> 7);
    const  int64_t SENS  =  ((int64_t)C1 << 15) + ((C3 * (int64_t)dT) >> 8);
    *pressureMbar = ((((pressureRaw * SENS) >> 21) - OFF) >> 15);
     42a:	0032      	movs	r2, r6
     42c:	17f3      	asrs	r3, r6, #31
     42e:	0028      	movs	r0, r5
     430:	2100      	movs	r1, #0
     432:	47b8      	blx	r7
     434:	060c      	lsls	r4, r1, #24
     436:	120b      	asrs	r3, r1, #8
     438:	2100      	movs	r1, #0
     43a:	0a02      	lsrs	r2, r0, #8
     43c:	4322      	orrs	r2, r4
     43e:	9c00      	ldr	r4, [sp, #0]
     440:	03e0      	lsls	r0, r4, #15
     442:	1880      	adds	r0, r0, r2
     444:	4159      	adcs	r1, r3
     446:	9a03      	ldr	r2, [sp, #12]
     448:	2300      	movs	r3, #0
     44a:	47b8      	blx	r7
     44c:	02cb      	lsls	r3, r1, #11
     44e:	0d44      	lsrs	r4, r0, #21
     450:	0032      	movs	r2, r6
     452:	431c      	orrs	r4, r3
     454:	154d      	asrs	r5, r1, #21
     456:	9b05      	ldr	r3, [sp, #20]
     458:	9802      	ldr	r0, [sp, #8]
     45a:	2100      	movs	r1, #0
     45c:	47b8      	blx	r7
     45e:	064b      	lsls	r3, r1, #25
     460:	09c6      	lsrs	r6, r0, #7
     462:	431e      	orrs	r6, r3
     464:	2300      	movs	r3, #0
     466:	11cf      	asrs	r7, r1, #7
     468:	9901      	ldr	r1, [sp, #4]
     46a:	040a      	lsls	r2, r1, #16
     46c:	1992      	adds	r2, r2, r6
     46e:	417b      	adcs	r3, r7
     470:	1aa4      	subs	r4, r4, r2
     472:	419d      	sbcs	r5, r3
     474:	046b      	lsls	r3, r5, #17
     476:	0be4      	lsrs	r4, r4, #15
     478:	431c      	orrs	r4, r3
     47a:	9b04      	ldr	r3, [sp, #16]
     47c:	601c      	str	r4, [r3, #0]

}
     47e:	b007      	add	sp, #28
     480:	bdf0      	pop	{r4, r5, r6, r7, pc}
     482:	46c0      	nop			; (mov r8, r8)
     484:	2000063e 	.word	0x2000063e
     488:	00003e01 	.word	0x00003e01

0000048c <paToFeetNOAA>:

double paToFeetNOAA(int32_t pressureMbar) {
     48c:	b510      	push	{r4, lr}

    double lower =(((double)(pressureMbar)/10)/1013.25);
    double exponent = 0.190284;

    double altFeet = (1-pow(lower,exponent))*145366.45;
     48e:	4b0c      	ldr	r3, [pc, #48]	; (4c0 <paToFeetNOAA+0x34>)
     490:	4798      	blx	r3
     492:	4c0c      	ldr	r4, [pc, #48]	; (4c4 <paToFeetNOAA+0x38>)
     494:	2200      	movs	r2, #0
     496:	4b0c      	ldr	r3, [pc, #48]	; (4c8 <paToFeetNOAA+0x3c>)
     498:	47a0      	blx	r4
     49a:	2200      	movs	r2, #0
     49c:	4b0b      	ldr	r3, [pc, #44]	; (4cc <paToFeetNOAA+0x40>)
     49e:	47a0      	blx	r4
     4a0:	4a0b      	ldr	r2, [pc, #44]	; (4d0 <paToFeetNOAA+0x44>)
     4a2:	4b0c      	ldr	r3, [pc, #48]	; (4d4 <paToFeetNOAA+0x48>)
     4a4:	4c0c      	ldr	r4, [pc, #48]	; (4d8 <paToFeetNOAA+0x4c>)
     4a6:	47a0      	blx	r4
    return altFeet;
     4a8:	4c0c      	ldr	r4, [pc, #48]	; (4dc <paToFeetNOAA+0x50>)
double paToFeetNOAA(int32_t pressureMbar) {

    double lower =(((double)(pressureMbar)/10)/1013.25);
    double exponent = 0.190284;

    double altFeet = (1-pow(lower,exponent))*145366.45;
     4aa:	0002      	movs	r2, r0
     4ac:	000b      	movs	r3, r1
    return altFeet;
     4ae:	2000      	movs	r0, #0
     4b0:	490b      	ldr	r1, [pc, #44]	; (4e0 <paToFeetNOAA+0x54>)
     4b2:	47a0      	blx	r4
     4b4:	4a0b      	ldr	r2, [pc, #44]	; (4e4 <paToFeetNOAA+0x58>)
     4b6:	4b0c      	ldr	r3, [pc, #48]	; (4e8 <paToFeetNOAA+0x5c>)
     4b8:	4c0c      	ldr	r4, [pc, #48]	; (4ec <paToFeetNOAA+0x60>)
     4ba:	47a0      	blx	r4

}
     4bc:	bd10      	pop	{r4, pc}
     4be:	46c0      	nop			; (mov r8, r8)
     4c0:	00005fb5 	.word	0x00005fb5
     4c4:	00004b25 	.word	0x00004b25
     4c8:	40240000 	.word	0x40240000
     4cc:	408faa00 	.word	0x408faa00
     4d0:	e279dd3c 	.word	0xe279dd3c
     4d4:	3fc85b39 	.word	0x3fc85b39
     4d8:	00002b51 	.word	0x00002b51
     4dc:	00005861 	.word	0x00005861
     4e0:	3ff00000 	.word	0x3ff00000
     4e4:	9999999a 	.word	0x9999999a
     4e8:	4101beb3 	.word	0x4101beb3
     4ec:	0000536d 	.word	0x0000536d

000004f0 <readMS5803Coefficients>:



void readMS5803Coefficients() {
     4f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     4f2:	24a2      	movs	r4, #162	; 0xa2
     4f4:	4d11      	ldr	r5, [pc, #68]	; (53c <readMS5803Coefficients+0x4c>)

    for (u8_t coeff_num = 1; coeff_num < 7 ; ++coeff_num ) {
        delay_us(600);
     4f6:	2096      	movs	r0, #150	; 0x96
     4f8:	4e11      	ldr	r6, [pc, #68]	; (540 <readMS5803Coefficients+0x50>)
     4fa:	0080      	lsls	r0, r0, #2
     4fc:	47b0      	blx	r6
        u8_t _cmd = MS5803_CMD_PROM_READ + ((coeff_num)*2);
        delay_us(600);
     4fe:	2096      	movs	r0, #150	; 0x96
     500:	0080      	lsls	r0, r0, #2
     502:	47b0      	blx	r6
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     504:	2380      	movs	r3, #128	; 0x80
     506:	4e0f      	ldr	r6, [pc, #60]	; (544 <readMS5803Coefficients+0x54>)
     508:	01db      	lsls	r3, r3, #7
        pinLow(cs_baro);
        spiDataOut(SPI2, _cmd);
     50a:	0021      	movs	r1, r4
     50c:	6173      	str	r3, [r6, #20]
     50e:	2002      	movs	r0, #2
     510:	4b0d      	ldr	r3, [pc, #52]	; (548 <readMS5803Coefficients+0x58>)
     512:	4798      	blx	r3
        u8_t _byte1 = spiDataIn(SPI2);
     514:	4f0d      	ldr	r7, [pc, #52]	; (54c <readMS5803Coefficients+0x5c>)
     516:	2002      	movs	r0, #2
     518:	47b8      	blx	r7
     51a:	9001      	str	r0, [sp, #4]
        u8_t _byte2 = spiDataIn(SPI2);
     51c:	2002      	movs	r0, #2
     51e:	47b8      	blx	r7
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     520:	2380      	movs	r3, #128	; 0x80
     522:	01db      	lsls	r3, r3, #7
     524:	61b3      	str	r3, [r6, #24]
        pinHigh(cs_baro);
        coefficients_[coeff_num] = (_byte1 << 8) | _byte2;
     526:	9b01      	ldr	r3, [sp, #4]
     528:	3402      	adds	r4, #2
     52a:	021b      	lsls	r3, r3, #8
     52c:	4318      	orrs	r0, r3
     52e:	b2e4      	uxtb	r4, r4
     530:	8028      	strh	r0, [r5, #0]
     532:	3502      	adds	r5, #2



void readMS5803Coefficients() {

    for (u8_t coeff_num = 1; coeff_num < 7 ; ++coeff_num ) {
     534:	2cae      	cmp	r4, #174	; 0xae
     536:	d1de      	bne.n	4f6 <readMS5803Coefficients+0x6>
        u8_t _byte2 = spiDataIn(SPI2);
        pinHigh(cs_baro);
        coefficients_[coeff_num] = (_byte1 << 8) | _byte2;
    }

}
     538:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
     53a:	46c0      	nop			; (mov r8, r8)
     53c:	20000640 	.word	0x20000640
     540:	00000fc1 	.word	0x00000fc1
     544:	41004400 	.word	0x41004400
     548:	00002a05 	.word	0x00002a05
     54c:	00002a1d 	.word	0x00002a1d

00000550 <initMS5803Barometer>:

void initMS5803Barometer() {
     550:	b570      	push	{r4, r5, r6, lr}
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     552:	2580      	movs	r5, #128	; 0x80
     554:	4c06      	ldr	r4, [pc, #24]	; (570 <initMS5803Barometer+0x20>)
     556:	01ed      	lsls	r5, r5, #7


    pinLow(cs_baro);
    spiDataOut(BARO_SPI, MS5803_CMD_RES);
     558:	211e      	movs	r1, #30
     55a:	6165      	str	r5, [r4, #20]
     55c:	2002      	movs	r0, #2
     55e:	4b05      	ldr	r3, [pc, #20]	; (574 <initMS5803Barometer+0x24>)
     560:	4798      	blx	r3
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     562:	61a5      	str	r5, [r4, #24]

    pinHigh(cs_baro);
    delay_ms(200);
     564:	20c8      	movs	r0, #200	; 0xc8
     566:	4b04      	ldr	r3, [pc, #16]	; (578 <initMS5803Barometer+0x28>)
     568:	4798      	blx	r3
    readMS5803Coefficients();
     56a:	4b04      	ldr	r3, [pc, #16]	; (57c <initMS5803Barometer+0x2c>)
     56c:	4798      	blx	r3

}
     56e:	bd70      	pop	{r4, r5, r6, pc}
     570:	41004400 	.word	0x41004400
     574:	00002a05 	.word	0x00002a05
     578:	00000ff1 	.word	0x00000ff1
     57c:	000004f1 	.word	0x000004f1

00000580 <MS5803_CRC4>:
                n_rem = (n_rem << 1);
            }
        }
    }
    n_rem = (0x000F & (n_rem >> 12));
    coefficients_[7] = crc_read;
     580:	4b02      	ldr	r3, [pc, #8]	; (58c <MS5803_CRC4+0xc>)
    return (n_rem & 0x00);
}
     582:	2000      	movs	r0, #0
                n_rem = (n_rem << 1);
            }
        }
    }
    n_rem = (0x000F & (n_rem >> 12));
    coefficients_[7] = crc_read;
     584:	7b9a      	ldrb	r2, [r3, #14]
     586:	81da      	strh	r2, [r3, #14]
    return (n_rem & 0x00);
}
     588:	4770      	bx	lr
     58a:	46c0      	nop			; (mov r8, r8)
     58c:	2000063e 	.word	0x2000063e

00000590 <init>:


void init() {

    /* Set 1 Flash Wait State for 48MHz, cf tables 20.9 and 35.27 in SAMD21 Datasheet */
    NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val;
     590:	211e      	movs	r1, #30
#include <util.h>
#include <boardDefines.h>
#include "math.h"


void init() {
     592:	b5f0      	push	{r4, r5, r6, r7, lr}

    /* Set 1 Flash Wait State for 48MHz, cf tables 20.9 and 35.27 in SAMD21 Datasheet */
    NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val;
     594:	4af8      	ldr	r2, [pc, #992]	; (978 <init+0x3e8>)
#include <util.h>
#include <boardDefines.h>
#include "math.h"


void init() {
     596:	b085      	sub	sp, #20

    /* Set 1 Flash Wait State for 48MHz, cf tables 20.9 and 35.27 in SAMD21 Datasheet */
    NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val;
     598:	6853      	ldr	r3, [r2, #4]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     59a:	2401      	movs	r4, #1
     59c:	438b      	bics	r3, r1
     59e:	391c      	subs	r1, #28
     5a0:	430b      	orrs	r3, r1
     5a2:	6053      	str	r3, [r2, #4]

    /* Turn on the digital interface clock */
    PM->APBAMASK.reg |= PM_APBAMASK_GCLK;
     5a4:	4af5      	ldr	r2, [pc, #980]	; (97c <init+0x3ec>)
     5a6:	3106      	adds	r1, #6
     5a8:	6993      	ldr	r3, [r2, #24]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     5aa:	250f      	movs	r5, #15
     5ac:	430b      	orrs	r3, r1
     5ae:	6193      	str	r3, [r2, #24]

    SystemInit();
     5b0:	4bf3      	ldr	r3, [pc, #972]	; (980 <init+0x3f0>)
     5b2:	4798      	blx	r3
    GclkInit();
     5b4:	4bf3      	ldr	r3, [pc, #972]	; (984 <init+0x3f4>)
     5b6:	4798      	blx	r3
    RtcInit();
     5b8:	4bf3      	ldr	r3, [pc, #972]	; (988 <init+0x3f8>)
     5ba:	4798      	blx	r3
    delayInit();
     5bc:	4bf3      	ldr	r3, [pc, #972]	; (98c <init+0x3fc>)
     5be:	4798      	blx	r3
    adcInit();
     5c0:	4bf3      	ldr	r3, [pc, #972]	; (990 <init+0x400>)
     5c2:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     5c4:	2240      	movs	r2, #64	; 0x40
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     5c6:	21c1      	movs	r1, #193	; 0xc1

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     5c8:	4bf2      	ldr	r3, [pc, #968]	; (994 <init+0x404>)
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     5ca:	0089      	lsls	r1, r1, #2

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     5cc:	601a      	str	r2, [r3, #0]
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     5ce:	5858      	ldr	r0, [r3, r1]
     5d0:	4af1      	ldr	r2, [pc, #964]	; (998 <init+0x408>)
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     5d2:	2602      	movs	r6, #2
     5d4:	4002      	ands	r2, r0
     5d6:	505a      	str	r2, [r3, r1]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     5d8:	4bf0      	ldr	r3, [pc, #960]	; (99c <init+0x40c>)

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     5da:	200f      	movs	r0, #15
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     5dc:	0019      	movs	r1, r3
     5de:	3154      	adds	r1, #84	; 0x54
     5e0:	780a      	ldrb	r2, [r1, #0]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     5e2:	001f      	movs	r7, r3
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     5e4:	43a2      	bics	r2, r4
     5e6:	700a      	strb	r2, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     5e8:	2280      	movs	r2, #128	; 0x80
     5ea:	0352      	lsls	r2, r2, #13
     5ec:	609a      	str	r2, [r3, #8]

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     5ee:	3921      	subs	r1, #33	; 0x21
     5f0:	780a      	ldrb	r2, [r1, #0]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     5f2:	3794      	adds	r7, #148	; 0x94

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     5f4:	4382      	bics	r2, r0
     5f6:	4322      	orrs	r2, r4
     5f8:	700a      	strb	r2, [r1, #0]
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     5fa:	7cca      	ldrb	r2, [r1, #19]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     5fc:	380d      	subs	r0, #13
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     5fe:	4322      	orrs	r2, r4
     600:	74ca      	strb	r2, [r1, #19]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     602:	001a      	movs	r2, r3
     604:	32c3      	adds	r2, #195	; 0xc3
     606:	7811      	ldrb	r1, [r2, #0]
     608:	43a1      	bics	r1, r4
     60a:	7011      	strb	r1, [r2, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     60c:	7811      	ldrb	r1, [r2, #0]
     60e:	4301      	orrs	r1, r0
     610:	7011      	strb	r1, [r2, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     612:	2108      	movs	r1, #8
     614:	468c      	mov	ip, r1
     616:	449c      	add	ip, r3
     618:	4661      	mov	r1, ip
     61a:	3006      	adds	r0, #6
     61c:	67c8      	str	r0, [r1, #124]	; 0x7c
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     61e:	0019      	movs	r1, r3
     620:	31b1      	adds	r1, #177	; 0xb1
     622:	7808      	ldrb	r0, [r1, #0]
     624:	4028      	ands	r0, r5
     626:	192d      	adds	r5, r5, r4
     628:	4328      	orrs	r0, r5
     62a:	7008      	strb	r0, [r1, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     62c:	7810      	ldrb	r0, [r2, #0]
     62e:	4320      	orrs	r0, r4
     630:	7010      	strb	r0, [r2, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     632:	0018      	movs	r0, r3
     634:	30d7      	adds	r0, #215	; 0xd7
     636:	7802      	ldrb	r2, [r0, #0]
     638:	43a2      	bics	r2, r4
     63a:	7002      	strb	r2, [r0, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     63c:	2080      	movs	r0, #128	; 0x80
     63e:	4ad8      	ldr	r2, [pc, #864]	; (9a0 <init+0x410>)
     640:	0400      	lsls	r0, r0, #16
     642:	6010      	str	r0, [r2, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     644:	001a      	movs	r2, r3
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     646:	6038      	str	r0, [r7, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     648:	32c2      	adds	r2, #194	; 0xc2
     64a:	7810      	ldrb	r0, [r2, #0]
     64c:	43a0      	bics	r0, r4
     64e:	7010      	strb	r0, [r2, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     650:	7810      	ldrb	r0, [r2, #0]
     652:	4330      	orrs	r0, r6
     654:	7010      	strb	r0, [r2, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     656:	4660      	mov	r0, ip
     658:	19b6      	adds	r6, r6, r6
     65a:	67c6      	str	r6, [r0, #124]	; 0x7c

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     65c:	7808      	ldrb	r0, [r1, #0]
     65e:	360b      	adds	r6, #11
     660:	43b0      	bics	r0, r6
     662:	4320      	orrs	r0, r4
     664:	7008      	strb	r0, [r1, #0]
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     666:	7811      	ldrb	r1, [r2, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     668:	2002      	movs	r0, #2
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     66a:	4321      	orrs	r1, r4
     66c:	7011      	strb	r1, [r2, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     66e:	0019      	movs	r1, r3
     670:	31d6      	adds	r1, #214	; 0xd6
     672:	780a      	ldrb	r2, [r1, #0]
     674:	43a2      	bics	r2, r4
     676:	700a      	strb	r2, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     678:	2180      	movs	r1, #128	; 0x80
     67a:	4ac9      	ldr	r2, [pc, #804]	; (9a0 <init+0x410>)
     67c:	03c9      	lsls	r1, r1, #15
     67e:	6011      	str	r1, [r2, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     680:	001a      	movs	r2, r3
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     682:	6039      	str	r1, [r7, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     684:	3243      	adds	r2, #67	; 0x43
     686:	7811      	ldrb	r1, [r2, #0]
     688:	3f4b      	subs	r7, #75	; 0x4b
     68a:	43a1      	bics	r1, r4
     68c:	7011      	strb	r1, [r2, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     68e:	7811      	ldrb	r1, [r2, #0]
     690:	4301      	orrs	r1, r0
     692:	7011      	strb	r1, [r2, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     694:	0018      	movs	r0, r3


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     696:	2108      	movs	r1, #8
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     698:	3031      	adds	r0, #49	; 0x31


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     69a:	6059      	str	r1, [r3, #4]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     69c:	7801      	ldrb	r1, [r0, #0]
     69e:	4031      	ands	r1, r6
     6a0:	430d      	orrs	r5, r1
     6a2:	7005      	strb	r5, [r0, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     6a4:	7811      	ldrb	r1, [r2, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     6a6:	2502      	movs	r5, #2
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     6a8:	4321      	orrs	r1, r4
     6aa:	7011      	strb	r1, [r2, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     6ac:	0019      	movs	r1, r3
     6ae:	3159      	adds	r1, #89	; 0x59
     6b0:	780a      	ldrb	r2, [r1, #0]
     6b2:	43a2      	bics	r2, r4
     6b4:	700a      	strb	r2, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     6b6:	2280      	movs	r2, #128	; 0x80
     6b8:	0492      	lsls	r2, r2, #18
     6ba:	609a      	str	r2, [r3, #8]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     6bc:	615a      	str	r2, [r3, #20]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     6be:	001a      	movs	r2, r3
     6c0:	3242      	adds	r2, #66	; 0x42
     6c2:	7811      	ldrb	r1, [r2, #0]
     6c4:	43a1      	bics	r1, r4
     6c6:	7011      	strb	r1, [r2, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     6c8:	7811      	ldrb	r1, [r2, #0]
     6ca:	4329      	orrs	r1, r5
     6cc:	7011      	strb	r1, [r2, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     6ce:	2104      	movs	r1, #4
     6d0:	6059      	str	r1, [r3, #4]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     6d2:	7801      	ldrb	r1, [r0, #0]
    pinIn(senseDPin);
    pinMux(senseDPin);
    pinOut(fireDPin);
    pinLow(fireDPin);

    charges.igniterAHot = false;
     6d4:	2500      	movs	r5, #0
     6d6:	43b1      	bics	r1, r6
     6d8:	4321      	orrs	r1, r4
     6da:	7001      	strb	r1, [r0, #0]
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     6dc:	7811      	ldrb	r1, [r2, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     6de:	3e0d      	subs	r6, #13
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     6e0:	4321      	orrs	r1, r4
     6e2:	7011      	strb	r1, [r2, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     6e4:	0019      	movs	r1, r3
     6e6:	3158      	adds	r1, #88	; 0x58
     6e8:	780a      	ldrb	r2, [r1, #0]
     6ea:	43a2      	bics	r2, r4
     6ec:	700a      	strb	r2, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     6ee:	2280      	movs	r2, #128	; 0x80
     6f0:	0452      	lsls	r2, r2, #17
     6f2:	609a      	str	r2, [r3, #8]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     6f4:	615a      	str	r2, [r3, #20]
     6f6:	4aab      	ldr	r2, [pc, #684]	; (9a4 <init+0x414>)
     6f8:	7015      	strb	r5, [r2, #0]
    charges.igniterAMain = false;
     6fa:	7055      	strb	r5, [r2, #1]
    charges.igniterADrogue = false;
     6fc:	7095      	strb	r5, [r2, #2]

    charges.igniterBHot = false;
     6fe:	7215      	strb	r5, [r2, #8]
    charges.igniterBMain = false;
     700:	7255      	strb	r5, [r2, #9]
    charges.igniterBDrogue = false;
     702:	7295      	strb	r5, [r2, #10]

    charges.igniterCHot = false;
     704:	7415      	strb	r5, [r2, #16]
    charges.igniterCMain = false;
     706:	7455      	strb	r5, [r2, #17]
    charges.igniterCDrogue = false;
     708:	7495      	strb	r5, [r2, #18]

    charges.igniterDHot = false;
     70a:	7615      	strb	r5, [r2, #24]
    charges.igniterDMain = false;
     70c:	7655      	strb	r5, [r2, #25]
    charges.igniterDDrogue = false;
     70e:	7695      	strb	r5, [r2, #26]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     710:	7dc2      	ldrb	r2, [r0, #23]
     712:	43a2      	bics	r2, r4
     714:	75c2      	strb	r2, [r0, #23]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     716:	2280      	movs	r2, #128	; 0x80
     718:	0052      	lsls	r2, r2, #1
     71a:	609a      	str	r2, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     71c:	783a      	ldrb	r2, [r7, #0]
     71e:	43a2      	bics	r2, r4
     720:	703a      	strb	r2, [r7, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     722:	2280      	movs	r2, #128	; 0x80
     724:	0092      	lsls	r2, r2, #2
     726:	609a      	str	r2, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     728:	001a      	movs	r2, r3
     72a:	324b      	adds	r2, #75	; 0x4b
     72c:	7811      	ldrb	r1, [r2, #0]
     72e:	43a1      	bics	r1, r4
     730:	7011      	strb	r1, [r2, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     732:	7811      	ldrb	r1, [r2, #0]
     734:	4331      	orrs	r1, r6
     736:	7011      	strb	r1, [r2, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     738:	2180      	movs	r1, #128	; 0x80
     73a:	0109      	lsls	r1, r1, #4
     73c:	6059      	str	r1, [r3, #4]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     73e:	2135      	movs	r1, #53	; 0x35
     740:	468c      	mov	ip, r1
     742:	449c      	add	ip, r3
     744:	4661      	mov	r1, ip
     746:	7809      	ldrb	r1, [r1, #0]
     748:	360d      	adds	r6, #13
     74a:	4031      	ands	r1, r6
     74c:	3611      	adds	r6, #17
     74e:	4331      	orrs	r1, r6
     750:	4666      	mov	r6, ip
     752:	7031      	strb	r1, [r6, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     754:	7811      	ldrb	r1, [r2, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     756:	260f      	movs	r6, #15
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     758:	4321      	orrs	r1, r4
     75a:	7011      	strb	r1, [r2, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     75c:	0019      	movs	r1, r3
     75e:	3134      	adds	r1, #52	; 0x34
     760:	780a      	ldrb	r2, [r1, #0]
     762:	4032      	ands	r2, r6
     764:	3611      	adds	r6, #17
     766:	4332      	orrs	r2, r6
     768:	700a      	strb	r2, [r1, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     76a:	783a      	ldrb	r2, [r7, #0]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     76c:	3e11      	subs	r6, #17
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     76e:	4322      	orrs	r2, r4
     770:	703a      	strb	r2, [r7, #0]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     772:	780a      	ldrb	r2, [r1, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     774:	3706      	adds	r7, #6

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     776:	43b2      	bics	r2, r6
     778:	3e0d      	subs	r6, #13
     77a:	4332      	orrs	r2, r6
     77c:	700a      	strb	r2, [r1, #0]
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     77e:	7dc2      	ldrb	r2, [r0, #23]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     780:	3196      	adds	r1, #150	; 0x96
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     782:	4322      	orrs	r2, r4
     784:	75c2      	strb	r2, [r0, #23]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     786:	780a      	ldrb	r2, [r1, #0]
     788:	43a2      	bics	r2, r4
     78a:	700a      	strb	r2, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     78c:	2280      	movs	r2, #128	; 0x80
     78e:	4984      	ldr	r1, [pc, #528]	; (9a0 <init+0x410>)
     790:	00d2      	lsls	r2, r2, #3
     792:	600a      	str	r2, [r1, #0]
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     794:	0019      	movs	r1, r3
     796:	3198      	adds	r1, #152	; 0x98
     798:	600a      	str	r2, [r1, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     79a:	7e41      	ldrb	r1, [r0, #25]
     79c:	43a1      	bics	r1, r4
     79e:	7641      	strb	r1, [r0, #25]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     7a0:	609a      	str	r2, [r3, #8]
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     7a2:	619a      	str	r2, [r3, #24]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     7a4:	7fc2      	ldrb	r2, [r0, #31]
     7a6:	43a2      	bics	r2, r4
     7a8:	77c2      	strb	r2, [r0, #31]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     7aa:	2280      	movs	r2, #128	; 0x80
     7ac:	0252      	lsls	r2, r2, #9
     7ae:	609a      	str	r2, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     7b0:	78ba      	ldrb	r2, [r7, #2]
     7b2:	43a2      	bics	r2, r4
     7b4:	70ba      	strb	r2, [r7, #2]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     7b6:	2280      	movs	r2, #128	; 0x80
     7b8:	0292      	lsls	r2, r2, #10
     7ba:	609a      	str	r2, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     7bc:	001a      	movs	r2, r3
     7be:	3253      	adds	r2, #83	; 0x53
     7c0:	7811      	ldrb	r1, [r2, #0]
     7c2:	43a1      	bics	r1, r4
     7c4:	7011      	strb	r1, [r2, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     7c6:	7811      	ldrb	r1, [r2, #0]
     7c8:	4331      	orrs	r1, r6
     7ca:	7011      	strb	r1, [r2, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     7cc:	2180      	movs	r1, #128	; 0x80
     7ce:	0309      	lsls	r1, r1, #12
     7d0:	6059      	str	r1, [r3, #4]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     7d2:	2139      	movs	r1, #57	; 0x39
     7d4:	468c      	mov	ip, r1
     7d6:	449c      	add	ip, r3
     7d8:	4661      	mov	r1, ip
     7da:	7809      	ldrb	r1, [r1, #0]
     7dc:	360d      	adds	r6, #13
     7de:	4031      	ands	r1, r6
     7e0:	3611      	adds	r6, #17
     7e2:	4331      	orrs	r1, r6
     7e4:	4666      	mov	r6, ip
     7e6:	7031      	strb	r1, [r6, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     7e8:	7811      	ldrb	r1, [r2, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     7ea:	260f      	movs	r6, #15
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     7ec:	4321      	orrs	r1, r4
     7ee:	7011      	strb	r1, [r2, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     7f0:	0019      	movs	r1, r3
     7f2:	3138      	adds	r1, #56	; 0x38
     7f4:	780a      	ldrb	r2, [r1, #0]
     7f6:	4032      	ands	r2, r6
     7f8:	3611      	adds	r6, #17
     7fa:	4332      	orrs	r2, r6
     7fc:	700a      	strb	r2, [r1, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     7fe:	78ba      	ldrb	r2, [r7, #2]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     800:	3e11      	subs	r6, #17
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     802:	4322      	orrs	r2, r4
     804:	70ba      	strb	r2, [r7, #2]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     806:	780a      	ldrb	r2, [r1, #0]
     808:	43b2      	bics	r2, r6
     80a:	3e0d      	subs	r6, #13
     80c:	4332      	orrs	r2, r6
     80e:	700a      	strb	r2, [r1, #0]
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     810:	7fc2      	ldrb	r2, [r0, #31]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     812:	3114      	adds	r1, #20
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     814:	4322      	orrs	r2, r4
     816:	77c2      	strb	r2, [r0, #31]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     818:	798a      	ldrb	r2, [r1, #6]
     81a:	43a2      	bics	r2, r4
     81c:	718a      	strb	r2, [r1, #6]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     81e:	2280      	movs	r2, #128	; 0x80
     820:	02d2      	lsls	r2, r2, #11
     822:	609a      	str	r2, [r3, #8]
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     824:	619a      	str	r2, [r3, #24]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     826:	9103      	str	r1, [sp, #12]
     828:	780a      	ldrb	r2, [r1, #0]
     82a:	43a2      	bics	r2, r4
     82c:	700a      	strb	r2, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     82e:	2280      	movs	r2, #128	; 0x80
     830:	0152      	lsls	r2, r2, #5
     832:	609a      	str	r2, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     834:	783a      	ldrb	r2, [r7, #0]
     836:	43a2      	bics	r2, r4
     838:	703a      	strb	r2, [r7, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     83a:	2280      	movs	r2, #128	; 0x80
     83c:	0212      	lsls	r2, r2, #8
     83e:	609a      	str	r2, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     840:	001a      	movs	r2, r3
     842:	324d      	adds	r2, #77	; 0x4d
     844:	7810      	ldrb	r0, [r2, #0]
     846:	43a0      	bics	r0, r4
     848:	7010      	strb	r0, [r2, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     84a:	7810      	ldrb	r0, [r2, #0]
     84c:	4330      	orrs	r0, r6
     84e:	7010      	strb	r0, [r2, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     850:	2080      	movs	r0, #128	; 0x80
     852:	0180      	lsls	r0, r0, #6
     854:	6058      	str	r0, [r3, #4]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     856:	0018      	movs	r0, r3
     858:	3036      	adds	r0, #54	; 0x36
     85a:	7801      	ldrb	r1, [r0, #0]
     85c:	360d      	adds	r6, #13
     85e:	4031      	ands	r1, r6
     860:	3611      	adds	r6, #17
     862:	4331      	orrs	r1, r6
     864:	7001      	strb	r1, [r0, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     866:	7811      	ldrb	r1, [r2, #0]
     868:	4321      	orrs	r1, r4
     86a:	7011      	strb	r1, [r2, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     86c:	2237      	movs	r2, #55	; 0x37
     86e:	4694      	mov	ip, r2
     870:	449c      	add	ip, r3
     872:	4662      	mov	r2, ip
     874:	210f      	movs	r1, #15
     876:	7812      	ldrb	r2, [r2, #0]
     878:	400a      	ands	r2, r1
     87a:	4661      	mov	r1, ip
     87c:	4332      	orrs	r2, r6
     87e:	700a      	strb	r2, [r1, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     880:	210f      	movs	r1, #15
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     882:	783a      	ldrb	r2, [r7, #0]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     884:	3e11      	subs	r6, #17
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     886:	4322      	orrs	r2, r4
     888:	703a      	strb	r2, [r7, #0]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     88a:	7802      	ldrb	r2, [r0, #0]
     88c:	438a      	bics	r2, r1
     88e:	390d      	subs	r1, #13
     890:	430a      	orrs	r2, r1
     892:	7002      	strb	r2, [r0, #0]
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     894:	9a03      	ldr	r2, [sp, #12]
     896:	9903      	ldr	r1, [sp, #12]
     898:	7812      	ldrb	r2, [r2, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     89a:	3020      	adds	r0, #32
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     89c:	4322      	orrs	r2, r4
     89e:	700a      	strb	r2, [r1, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     8a0:	0019      	movs	r1, r3
     8a2:	314e      	adds	r1, #78	; 0x4e
     8a4:	780a      	ldrb	r2, [r1, #0]
     8a6:	43a2      	bics	r2, r4
     8a8:	700a      	strb	r2, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     8aa:	2280      	movs	r2, #128	; 0x80
     8ac:	01d2      	lsls	r2, r2, #7
     8ae:	609a      	str	r2, [r3, #8]
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     8b0:	619a      	str	r2, [r3, #24]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     8b2:	001a      	movs	r2, r3
     8b4:	3255      	adds	r2, #85	; 0x55
     8b6:	7811      	ldrb	r1, [r2, #0]
    pinOut(TxPo);
    pinMux(TxPo);
    pinIn(RxPo);
    pinMux(RxPo);

    sercomClockEnable(SPI2, 3, 4);
     8b8:	4f3b      	ldr	r7, [pc, #236]	; (9a8 <init+0x418>)
     8ba:	43a1      	bics	r1, r4
     8bc:	7011      	strb	r1, [r2, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     8be:	2180      	movs	r1, #128	; 0x80
     8c0:	0389      	lsls	r1, r1, #14
     8c2:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
}


inline static void pinCfg(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].reg = p.cfg;
     8c4:	2140      	movs	r1, #64	; 0x40
     8c6:	7011      	strb	r1, [r2, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     8c8:	7802      	ldrb	r2, [r0, #0]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     8ca:	0019      	movs	r1, r3
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     8cc:	43a2      	bics	r2, r4
     8ce:	7002      	strb	r2, [r0, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     8d0:	2280      	movs	r2, #128	; 0x80
     8d2:	03d2      	lsls	r2, r2, #15
     8d4:	609a      	str	r2, [r3, #8]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     8d6:	313b      	adds	r1, #59	; 0x3b
     8d8:	780a      	ldrb	r2, [r1, #0]
     8da:	43b2      	bics	r2, r6
     8dc:	3e0d      	subs	r6, #13
     8de:	4332      	orrs	r2, r6
     8e0:	700a      	strb	r2, [r1, #0]
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     8e2:	7802      	ldrb	r2, [r0, #0]
     8e4:	4322      	orrs	r2, r4
     8e6:	7002      	strb	r2, [r0, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     8e8:	001a      	movs	r2, r3
     8ea:	3257      	adds	r2, #87	; 0x57
     8ec:	7810      	ldrb	r0, [r2, #0]
     8ee:	43a0      	bics	r0, r4
     8f0:	7010      	strb	r0, [r2, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     8f2:	7810      	ldrb	r0, [r2, #0]
     8f4:	4330      	orrs	r0, r6
     8f6:	7010      	strb	r0, [r2, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     8f8:	2080      	movs	r0, #128	; 0x80
     8fa:	0400      	lsls	r0, r0, #16
     8fc:	6058      	str	r0, [r3, #4]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     8fe:	200f      	movs	r0, #15
     900:	780b      	ldrb	r3, [r1, #0]
     902:	4003      	ands	r3, r0
     904:	3011      	adds	r0, #17
     906:	4303      	orrs	r3, r0
     908:	700b      	strb	r3, [r1, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     90a:	7813      	ldrb	r3, [r2, #0]
     90c:	0030      	movs	r0, r6
     90e:	4323      	orrs	r3, r4
     910:	7013      	strb	r3, [r2, #0]
     912:	2103      	movs	r1, #3
     914:	2204      	movs	r2, #4
     916:	47b8      	blx	r7
    sercomSpiMasterInit(SPI2, 1, 3, 0, 0, 0x00);
     918:	002b      	movs	r3, r5
     91a:	0021      	movs	r1, r4
     91c:	0030      	movs	r0, r6
     91e:	9501      	str	r5, [sp, #4]
     920:	4e22      	ldr	r6, [pc, #136]	; (9ac <init+0x41c>)
     922:	9500      	str	r5, [sp, #0]
     924:	2203      	movs	r2, #3
     926:	47b0      	blx	r6

    sercomClockEnable(SPI0, 3, 4);
     928:	0028      	movs	r0, r5
     92a:	2204      	movs	r2, #4
     92c:	2103      	movs	r1, #3
     92e:	47b8      	blx	r7
    sercomSpiMasterInit(SPI0, 3, 0, 0, 0, 0x00);
     930:	002b      	movs	r3, r5
     932:	002a      	movs	r2, r5
     934:	0028      	movs	r0, r5
     936:	9501      	str	r5, [sp, #4]
     938:	9500      	str	r5, [sp, #0]
     93a:	2103      	movs	r1, #3
     93c:	47b0      	blx	r6

    sercomClockEnable(SPI1, 3, 4);
     93e:	0020      	movs	r0, r4
     940:	2204      	movs	r2, #4
     942:	2103      	movs	r1, #3
     944:	47b8      	blx	r7
    sercomSpiMasterInit(SPI1, 3, 0, 0, 0, 0x00);
     946:	002b      	movs	r3, r5
     948:	002a      	movs	r2, r5
     94a:	0020      	movs	r0, r4
     94c:	9501      	str	r5, [sp, #4]
     94e:	9500      	str	r5, [sp, #0]
     950:	2103      	movs	r1, #3
     952:	47b0      	blx	r6

    sercomClockEnable(USART3, 4, 8);
     954:	2208      	movs	r2, #8
     956:	2104      	movs	r1, #4
     958:	2003      	movs	r0, #3
     95a:	47b8      	blx	r7
    sercomUartInit(USART3,1,0,19200);
     95c:	2396      	movs	r3, #150	; 0x96
     95e:	0021      	movs	r1, r4
     960:	002a      	movs	r2, r5
     962:	2003      	movs	r0, #3
     964:	01db      	lsls	r3, r3, #7
     966:	4c12      	ldr	r4, [pc, #72]	; (9b0 <init+0x420>)
     968:	47a0      	blx	r4

    TC4Init();
     96a:	4b12      	ldr	r3, [pc, #72]	; (9b4 <init+0x424>)
     96c:	4798      	blx	r3
    TC5Init();
     96e:	4b12      	ldr	r3, [pc, #72]	; (9b8 <init+0x428>)
     970:	4798      	blx	r3
}
     972:	b005      	add	sp, #20
     974:	e022      	b.n	9bc <init+0x42c>
     976:	46c0      	nop			; (mov r8, r8)
     978:	41004000 	.word	0x41004000
     97c:	40000400 	.word	0x40000400
     980:	000001d5 	.word	0x000001d5
     984:	00000e19 	.word	0x00000e19
     988:	00000ea1 	.word	0x00000ea1
     98c:	00000fa1 	.word	0x00000fa1
     990:	00000c7d 	.word	0x00000c7d
     994:	e000e100 	.word	0xe000e100
     998:	ff00ffff 	.word	0xff00ffff
     99c:	41004400 	.word	0x41004400
     9a0:	41004488 	.word	0x41004488
     9a4:	20000680 	.word	0x20000680
     9a8:	000028dd 	.word	0x000028dd
     9ac:	00002941 	.word	0x00002941
     9b0:	000029a5 	.word	0x000029a5
     9b4:	00001071 	.word	0x00001071
     9b8:	000010d9 	.word	0x000010d9
     9bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
     9be:	46c0      	nop			; (mov r8, r8)

000009c0 <main>:


int main(void) {
     9c0:	b510      	push	{r4, lr}

    init();
     9c2:	4b13      	ldr	r3, [pc, #76]	; (a10 <main+0x50>)
     9c4:	4798      	blx	r3

    initMS5803Barometer();
     9c6:	4b13      	ldr	r3, [pc, #76]	; (a14 <main+0x54>)
     9c8:	4798      	blx	r3
    IMUinit();
     9ca:	4b13      	ldr	r3, [pc, #76]	; (a18 <main+0x58>)
     9cc:	4798      	blx	r3

    computeKalmanGains();
     9ce:	4b13      	ldr	r3, [pc, #76]	; (a1c <main+0x5c>)
     9d0:	4798      	blx	r3

    sampleTick();
     9d2:	4c13      	ldr	r4, [pc, #76]	; (a20 <main+0x60>)
     9d4:	47a0      	blx	r4

    POST();
     9d6:	4b13      	ldr	r3, [pc, #76]	; (a24 <main+0x64>)
     9d8:	4798      	blx	r3

    isItPointingUp();
     9da:	4b13      	ldr	r3, [pc, #76]	; (a28 <main+0x68>)
     9dc:	4798      	blx	r3

    beep(400);
     9de:	20c8      	movs	r0, #200	; 0xc8
     9e0:	4b12      	ldr	r3, [pc, #72]	; (a2c <main+0x6c>)
     9e2:	0040      	lsls	r0, r0, #1
     9e4:	4798      	blx	r3

    startupTick = millis();
     9e6:	4b12      	ldr	r3, [pc, #72]	; (a30 <main+0x70>)
     9e8:	4798      	blx	r3
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     9ea:	2280      	movs	r2, #128	; 0x80
     9ec:	4b11      	ldr	r3, [pc, #68]	; (a34 <main+0x74>)
     9ee:	0412      	lsls	r2, r2, #16
     9f0:	6018      	str	r0, [r3, #0]
     9f2:	4b11      	ldr	r3, [pc, #68]	; (a38 <main+0x78>)
     9f4:	601a      	str	r2, [r3, #0]

    pinLow(fireAPin);

    while (1) {
        if (takeSample()) {
     9f6:	4b11      	ldr	r3, [pc, #68]	; (a3c <main+0x7c>)
     9f8:	4798      	blx	r3
     9fa:	2800      	cmp	r0, #0
     9fc:	d0fb      	beq.n	9f6 <main+0x36>
            sampleTick();
     9fe:	47a0      	blx	r4
            flight();
     a00:	4b0f      	ldr	r3, [pc, #60]	; (a40 <main+0x80>)
     a02:	4798      	blx	r3
            igniterTick();
     a04:	4b0f      	ldr	r3, [pc, #60]	; (a44 <main+0x84>)
     a06:	4798      	blx	r3
            computeKalmanStates();
     a08:	4b0f      	ldr	r3, [pc, #60]	; (a48 <main+0x88>)
     a0a:	4798      	blx	r3
     a0c:	e7f3      	b.n	9f6 <main+0x36>
     a0e:	46c0      	nop			; (mov r8, r8)
     a10:	00000591 	.word	0x00000591
     a14:	00000551 	.word	0x00000551
     a18:	00000a4d 	.word	0x00000a4d
     a1c:	000016c5 	.word	0x000016c5
     a20:	000025fd 	.word	0x000025fd
     a24:	00000b85 	.word	0x00000b85
     a28:	00001451 	.word	0x00001451
     a2c:	00000d61 	.word	0x00000d61
     a30:	0000103d 	.word	0x0000103d
     a34:	20000524 	.word	0x20000524
     a38:	41004494 	.word	0x41004494
     a3c:	000025e5 	.word	0x000025e5
     a40:	00001141 	.word	0x00001141
     a44:	0000152d 	.word	0x0000152d
     a48:	00001f65 	.word	0x00001f65

00000a4c <IMUinit>:
#include <util.h>
#include <boardDefines.h>


void IMUinit() {
     a4c:	b570      	push	{r4, r5, r6, lr}
     a4e:	4c08      	ldr	r4, [pc, #32]	; (a70 <IMUinit+0x24>)
     a50:	2580      	movs	r5, #128	; 0x80
     a52:	0023      	movs	r3, r4
     a54:	00ed      	lsls	r5, r5, #3
     a56:	3394      	adds	r3, #148	; 0x94
     a58:	601d      	str	r5, [r3, #0]

    pinLow(cs_accel);
    spiDataOut(SPI0, BMI_ACCEL_PMU_RANGE);
     a5a:	4e06      	ldr	r6, [pc, #24]	; (a74 <IMUinit+0x28>)
     a5c:	210f      	movs	r1, #15
     a5e:	2000      	movs	r0, #0
     a60:	47b0      	blx	r6
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     a62:	3498      	adds	r4, #152	; 0x98
    spiDataOut(SPI0, BMI_ACCEL_16G_RANGE);
     a64:	210c      	movs	r1, #12
     a66:	2000      	movs	r0, #0
     a68:	47b0      	blx	r6
     a6a:	6025      	str	r5, [r4, #0]
    pinHigh(cs_accel);

}
     a6c:	bd70      	pop	{r4, r5, r6, pc}
     a6e:	46c0      	nop			; (mov r8, r8)
     a70:	41004400 	.word	0x41004400
     a74:	00002a05 	.word	0x00002a05

00000a78 <USARTconnectionAvaliable>:

bool USARTconnectionAvaliable() {
     a78:	b510      	push	{r4, lr}

    if (sercom(USART3)->SPI.INTFLAG.bit.RXC == 1) {
     a7a:	4b09      	ldr	r3, [pc, #36]	; (aa0 <USARTconnectionAvaliable+0x28>)
     a7c:	7e1c      	ldrb	r4, [r3, #24]
     a7e:	0764      	lsls	r4, r4, #29
     a80:	0fe4      	lsrs	r4, r4, #31
     a82:	2c01      	cmp	r4, #1
     a84:	d001      	beq.n	a8a <USARTconnectionAvaliable+0x12>
            return true;
        } else {
            return false;
        }
    }
    return false;
     a86:	2000      	movs	r0, #0
     a88:	e009      	b.n	a9e <USARTconnectionAvaliable+0x26>
}

bool USARTconnectionAvaliable() {

    if (sercom(USART3)->SPI.INTFLAG.bit.RXC == 1) {
        u8_t connectAttempt = usartDataIn(USART3);
     a8a:	2003      	movs	r0, #3
     a8c:	4b05      	ldr	r3, [pc, #20]	; (aa4 <USARTconnectionAvaliable+0x2c>)
     a8e:	4798      	blx	r3
     a90:	1e01      	subs	r1, r0, #0
        if (connectAttempt == 0x48) {
     a92:	2948      	cmp	r1, #72	; 0x48
     a94:	d1f7      	bne.n	a86 <USARTconnectionAvaliable+0xe>
            usartDataOut(USART3, 'H');
     a96:	2003      	movs	r0, #3
     a98:	4b03      	ldr	r3, [pc, #12]	; (aa8 <USARTconnectionAvaliable+0x30>)
     a9a:	4798      	blx	r3
            return true;
     a9c:	0020      	movs	r0, r4
        } else {
            return false;
        }
    }
    return false;
}
     a9e:	bd10      	pop	{r4, pc}
     aa0:	42001400 	.word	0x42001400
     aa4:	00002a51 	.word	0x00002a51
     aa8:	00002a39 	.word	0x00002a39

00000aac <sendTheasePagesToComputer>:

void sendTheasePagesToComputer(u32_t firstPage, u32_t lastPage) {
     aac:	b5f0      	push	{r4, r5, r6, r7, lr}
    for (u16_t page = 0; page <= pagesToSend; ++page) {

        u8_t data[256];
        AT25SEreadPage(pageToReadAddress , data);

        for (u16_t dataByte = 0; dataByte < 256; ++dataByte) {
     aae:	2780      	movs	r7, #128	; 0x80
        }
    }
    return false;
}

void sendTheasePagesToComputer(u32_t firstPage, u32_t lastPage) {
     ab0:	0005      	movs	r5, r0

    u16_t pagesToSend = (lastPage - firstPage) >> 8;

    u32_t pageToReadAddress = firstPage;

    for (u16_t page = 0; page <= pagesToSend; ++page) {
     ab2:	2400      	movs	r4, #0
    return false;
}

void sendTheasePagesToComputer(u32_t firstPage, u32_t lastPage) {

    u16_t pagesToSend = (lastPage - firstPage) >> 8;
     ab4:	1a09      	subs	r1, r1, r0
     ab6:	0a09      	lsrs	r1, r1, #8
        }
    }
    return false;
}

void sendTheasePagesToComputer(u32_t firstPage, u32_t lastPage) {
     ab8:	b0c3      	sub	sp, #268	; 0x10c

    u16_t pagesToSend = (lastPage - firstPage) >> 8;
     aba:	b28b      	uxth	r3, r1
     abc:	9301      	str	r3, [sp, #4]
    for (u16_t page = 0; page <= pagesToSend; ++page) {

        u8_t data[256];
        AT25SEreadPage(pageToReadAddress , data);

        for (u16_t dataByte = 0; dataByte < 256; ++dataByte) {
     abe:	007f      	lsls	r7, r7, #1
    u32_t pageToReadAddress = firstPage;

    for (u16_t page = 0; page <= pagesToSend; ++page) {

        u8_t data[256];
        AT25SEreadPage(pageToReadAddress , data);
     ac0:	a902      	add	r1, sp, #8
     ac2:	0028      	movs	r0, r5
     ac4:	4b09      	ldr	r3, [pc, #36]	; (aec <sendTheasePagesToComputer+0x40>)
     ac6:	4798      	blx	r3
     ac8:	2600      	movs	r6, #0

        for (u16_t dataByte = 0; dataByte < 256; ++dataByte) {
            usartDataOut(USART3, data[dataByte]);
     aca:	ab02      	add	r3, sp, #8
     acc:	5d99      	ldrb	r1, [r3, r6]
     ace:	2003      	movs	r0, #3
     ad0:	4b07      	ldr	r3, [pc, #28]	; (af0 <sendTheasePagesToComputer+0x44>)
     ad2:	3601      	adds	r6, #1
     ad4:	4798      	blx	r3
    for (u16_t page = 0; page <= pagesToSend; ++page) {

        u8_t data[256];
        AT25SEreadPage(pageToReadAddress , data);

        for (u16_t dataByte = 0; dataByte < 256; ++dataByte) {
     ad6:	42be      	cmp	r6, r7
     ad8:	d1f7      	bne.n	aca <sendTheasePagesToComputer+0x1e>

    u16_t pagesToSend = (lastPage - firstPage) >> 8;

    u32_t pageToReadAddress = firstPage;

    for (u16_t page = 0; page <= pagesToSend; ++page) {
     ada:	3401      	adds	r4, #1
     adc:	9b01      	ldr	r3, [sp, #4]

        for (u16_t dataByte = 0; dataByte < 256; ++dataByte) {
            usartDataOut(USART3, data[dataByte]);
        }

        pageToReadAddress = pageToReadAddress + 0x100;
     ade:	3501      	adds	r5, #1

    u16_t pagesToSend = (lastPage - firstPage) >> 8;

    u32_t pageToReadAddress = firstPage;

    for (u16_t page = 0; page <= pagesToSend; ++page) {
     ae0:	b2a4      	uxth	r4, r4

        for (u16_t dataByte = 0; dataByte < 256; ++dataByte) {
            usartDataOut(USART3, data[dataByte]);
        }

        pageToReadAddress = pageToReadAddress + 0x100;
     ae2:	35ff      	adds	r5, #255	; 0xff

    u16_t pagesToSend = (lastPage - firstPage) >> 8;

    u32_t pageToReadAddress = firstPage;

    for (u16_t page = 0; page <= pagesToSend; ++page) {
     ae4:	42a3      	cmp	r3, r4
     ae6:	d2eb      	bcs.n	ac0 <sendTheasePagesToComputer+0x14>
            usartDataOut(USART3, data[dataByte]);
        }

        pageToReadAddress = pageToReadAddress + 0x100;
    }
}
     ae8:	b043      	add	sp, #268	; 0x10c
     aea:	bdf0      	pop	{r4, r5, r6, r7, pc}
     aec:	00000355 	.word	0x00000355
     af0:	00002a39 	.word	0x00002a39

00000af4 <altitudeAGL>:

int32_t altitudeAGL() {
    return altitude - offsets.groundOffset;
     af4:	4b07      	ldr	r3, [pc, #28]	; (b14 <altitudeAGL+0x20>)

        pageToReadAddress = pageToReadAddress + 0x100;
    }
}

int32_t altitudeAGL() {
     af6:	b510      	push	{r4, lr}
    return altitude - offsets.groundOffset;
     af8:	6998      	ldr	r0, [r3, #24]
     afa:	4b07      	ldr	r3, [pc, #28]	; (b18 <altitudeAGL+0x24>)
     afc:	4798      	blx	r3
     afe:	000b      	movs	r3, r1
     b00:	4906      	ldr	r1, [pc, #24]	; (b1c <altitudeAGL+0x28>)
     b02:	0002      	movs	r2, r0
     b04:	6808      	ldr	r0, [r1, #0]
     b06:	6849      	ldr	r1, [r1, #4]
     b08:	4c05      	ldr	r4, [pc, #20]	; (b20 <altitudeAGL+0x2c>)
     b0a:	47a0      	blx	r4
     b0c:	4b05      	ldr	r3, [pc, #20]	; (b24 <altitudeAGL+0x30>)
     b0e:	4798      	blx	r3
}
     b10:	bd10      	pop	{r4, pc}
     b12:	46c0      	nop			; (mov r8, r8)
     b14:	200004d8 	.word	0x200004d8
     b18:	00006039 	.word	0x00006039
     b1c:	200006b8 	.word	0x200006b8
     b20:	00005861 	.word	0x00005861
     b24:	00005f49 	.word	0x00005f49

00000b28 <unplugged>:


bool unplugged() {
    if (sample.voltage.batFloat < 3.3) {
     b28:	4b07      	ldr	r3, [pc, #28]	; (b48 <unplugged+0x20>)
int32_t altitudeAGL() {
    return altitude - offsets.groundOffset;
}


bool unplugged() {
     b2a:	b570      	push	{r4, r5, r6, lr}
     b2c:	68d8      	ldr	r0, [r3, #12]
     b2e:	4b07      	ldr	r3, [pc, #28]	; (b4c <unplugged+0x24>)
     b30:	4798      	blx	r3
     b32:	4a07      	ldr	r2, [pc, #28]	; (b50 <unplugged+0x28>)
     b34:	4b07      	ldr	r3, [pc, #28]	; (b54 <unplugged+0x2c>)
     b36:	4d08      	ldr	r5, [pc, #32]	; (b58 <unplugged+0x30>)
     b38:	2401      	movs	r4, #1
     b3a:	47a8      	blx	r5
     b3c:	2800      	cmp	r0, #0
     b3e:	d100      	bne.n	b42 <unplugged+0x1a>
     b40:	1c04      	adds	r4, r0, #0
     b42:	b2e0      	uxtb	r0, r4
    if (sample.voltage.batFloat < 3.3) {
        return true;
    } else {
        return false;
    }
}
     b44:	bd70      	pop	{r4, r5, r6, pc}
     b46:	46c0      	nop			; (mov r8, r8)
     b48:	200007e8 	.word	0x200007e8
     b4c:	000060a9 	.word	0x000060a9
     b50:	66666666 	.word	0x66666666
     b54:	400a6666 	.word	0x400a6666
     b58:	00003db1 	.word	0x00003db1

00000b5c <finishFlight>:

void finishFlight() {

    flightState = flightIdle;
     b5c:	2201      	movs	r2, #1
    } else {
        return false;
    }
}

void finishFlight() {
     b5e:	b510      	push	{r4, lr}

    flightState = flightIdle;
     b60:	4b04      	ldr	r3, [pc, #16]	; (b74 <finishFlight+0x18>)
     b62:	701a      	strb	r2, [r3, #0]
    AT25SFHoldTillReady();
     b64:	4b04      	ldr	r3, [pc, #16]	; (b78 <finishFlight+0x1c>)
     b66:	4798      	blx	r3
    writeFlightEndAddress( );
     b68:	4b04      	ldr	r3, [pc, #16]	; (b7c <finishFlight+0x20>)
     b6a:	4798      	blx	r3
    unpluggedJingle();
     b6c:	4b04      	ldr	r3, [pc, #16]	; (b80 <finishFlight+0x24>)
     b6e:	4798      	blx	r3
}
     b70:	bd10      	pop	{r4, pc}
     b72:	46c0      	nop			; (mov r8, r8)
     b74:	200006a0 	.word	0x200006a0
     b78:	000001e5 	.word	0x000001e5
     b7c:	000024f5 	.word	0x000024f5
     b80:	00000dd5 	.word	0x00000dd5

00000b84 <POST>:

void POST() {
     b84:	b5f0      	push	{r4, r5, r6, r7, lr}

    bool postFailed = false;
    u8_t failType = 0;

    //Baro post first
    u8_t crc = MS5803_CRC4();
     b86:	4b32      	ldr	r3, [pc, #200]	; (c50 <POST+0xcc>)
    AT25SFHoldTillReady();
    writeFlightEndAddress( );
    unpluggedJingle();
}

void POST() {
     b88:	b085      	sub	sp, #20

    bool postFailed = false;
    u8_t failType = 0;

    //Baro post first
    u8_t crc = MS5803_CRC4();
     b8a:	4798      	blx	r3
    if (crc != coefficients_[7]) {
     b8c:	4b31      	ldr	r3, [pc, #196]	; (c54 <POST+0xd0>)
     b8e:	b280      	uxth	r0, r0
     b90:	89db      	ldrh	r3, [r3, #14]
        postFailed = true;
        failType = 1;
     b92:	2401      	movs	r4, #1
    bool postFailed = false;
    u8_t failType = 0;

    //Baro post first
    u8_t crc = MS5803_CRC4();
    if (crc != coefficients_[7]) {
     b94:	4283      	cmp	r3, r0
     b96:	d100      	bne.n	b9a <POST+0x16>

void POST() {
    uint8_t dummy_Tx = 0xFF;

    bool postFailed = false;
    u8_t failType = 0;
     b98:	2400      	movs	r4, #0
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     b9a:	2780      	movs	r7, #128	; 0x80
     b9c:	4d2e      	ldr	r5, [pc, #184]	; (c58 <POST+0xd4>)
     b9e:	02ff      	lsls	r7, r7, #11
        failType = 1;
    }

    //Memory Post
    pinLow(cs_mem);
    spiDataOut(SPI1,0x9f); // read id and mfg code
     ba0:	219f      	movs	r1, #159	; 0x9f
     ba2:	4b2e      	ldr	r3, [pc, #184]	; (c5c <POST+0xd8>)
}

void POST() {
    uint8_t dummy_Tx = 0xFF;

    bool postFailed = false;
     ba4:	9401      	str	r4, [sp, #4]
        failType = 1;
    }

    //Memory Post
    pinLow(cs_mem);
    spiDataOut(SPI1,0x9f); // read id and mfg code
     ba6:	2001      	movs	r0, #1
     ba8:	616f      	str	r7, [r5, #20]
     baa:	4798      	blx	r3
    u8_t mfgID = spiDataIn(SPI1);
     bac:	4e2c      	ldr	r6, [pc, #176]	; (c60 <POST+0xdc>)
     bae:	2001      	movs	r0, #1
     bb0:	47b0      	blx	r6
     bb2:	9002      	str	r0, [sp, #8]
    u8_t deviceID1 = spiDataIn(SPI1);
     bb4:	2001      	movs	r0, #1
     bb6:	47b0      	blx	r6
     bb8:	9003      	str	r0, [sp, #12]
    u8_t deviceID2 = spiDataIn(SPI1);
     bba:	2001      	movs	r0, #1
     bbc:	47b0      	blx	r6
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     bbe:	61af      	str	r7, [r5, #24]
    pinHigh(cs_mem);

    if ( (mfgID != 0x1f) & (deviceID1 != 0x86) & (deviceID2 != 0x01)) {
     bc0:	9b02      	ldr	r3, [sp, #8]
     bc2:	3b1f      	subs	r3, #31
     bc4:	1e5a      	subs	r2, r3, #1
     bc6:	4193      	sbcs	r3, r2
     bc8:	0019      	movs	r1, r3
     bca:	9b03      	ldr	r3, [sp, #12]
     bcc:	3b86      	subs	r3, #134	; 0x86
     bce:	1e5a      	subs	r2, r3, #1
     bd0:	4193      	sbcs	r3, r2
     bd2:	4a22      	ldr	r2, [pc, #136]	; (c5c <POST+0xd8>)
     bd4:	9202      	str	r2, [sp, #8]
     bd6:	420b      	tst	r3, r1
     bd8:	d004      	beq.n	be4 <POST+0x60>
     bda:	2801      	cmp	r0, #1
     bdc:	d002      	beq.n	be4 <POST+0x60>
        postFailed = true;
     bde:	2301      	movs	r3, #1
        failType = 2;
     be0:	2402      	movs	r4, #2
    u8_t deviceID1 = spiDataIn(SPI1);
    u8_t deviceID2 = spiDataIn(SPI1);
    pinHigh(cs_mem);

    if ( (mfgID != 0x1f) & (deviceID1 != 0x86) & (deviceID2 != 0x01)) {
        postFailed = true;
     be2:	9301      	str	r3, [sp, #4]
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     be4:	2780      	movs	r7, #128	; 0x80
     be6:	4b1f      	ldr	r3, [pc, #124]	; (c64 <POST+0xe0>)
     be8:	00ff      	lsls	r7, r7, #3
     bea:	601f      	str	r7, [r3, #0]
        failType = 2;
    }

    //Accelerometer Post
    pinLow(cs_accel);
    spiDataOut(SPI0, BMI055_BGW_CHIPID | BMI055_READ_REG);
     bec:	9b02      	ldr	r3, [sp, #8]
     bee:	2180      	movs	r1, #128	; 0x80
     bf0:	2000      	movs	r0, #0
     bf2:	4798      	blx	r3
    u8_t accelID = spiDataTransfer(SPI0,dummy_Tx);
     bf4:	21ff      	movs	r1, #255	; 0xff
     bf6:	2000      	movs	r0, #0
     bf8:	4e1b      	ldr	r6, [pc, #108]	; (c68 <POST+0xe4>)
     bfa:	47b0      	blx	r6
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     bfc:	4b1b      	ldr	r3, [pc, #108]	; (c6c <POST+0xe8>)
     bfe:	601f      	str	r7, [r3, #0]
    pinHigh(cs_accel);

    if (accelID != 0xFA) {
     c00:	28fa      	cmp	r0, #250	; 0xfa
     c02:	d002      	beq.n	c0a <POST+0x86>
        postFailed = true;
     c04:	2301      	movs	r3, #1
        failType = 3;
     c06:	2403      	movs	r4, #3
    spiDataOut(SPI0, BMI055_BGW_CHIPID | BMI055_READ_REG);
    u8_t accelID = spiDataTransfer(SPI0,dummy_Tx);
    pinHigh(cs_accel);

    if (accelID != 0xFA) {
        postFailed = true;
     c08:	9301      	str	r3, [sp, #4]
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     c0a:	616f      	str	r7, [r5, #20]
        failType = 3;
    }

    //Gyro Post
    pinLow(cs_gyro);
    spiDataOut(SPI0, BMI055_BGW_CHIPID | BMI055_READ_REG);
     c0c:	2180      	movs	r1, #128	; 0x80
     c0e:	2000      	movs	r0, #0
     c10:	9b02      	ldr	r3, [sp, #8]
     c12:	4798      	blx	r3
    u8_t gyroID = spiDataTransfer(SPI0,dummy_Tx);
     c14:	21ff      	movs	r1, #255	; 0xff
     c16:	2000      	movs	r0, #0
     c18:	47b0      	blx	r6
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     c1a:	61af      	str	r7, [r5, #24]
    pinHigh(cs_gyro);

    if (gyroID != 0x0F) {
     c1c:	280f      	cmp	r0, #15
     c1e:	d103      	bne.n	c28 <POST+0xa4>
    }

    //Analog Accelerometer Post


    if (postFailed) {
     c20:	9b01      	ldr	r3, [sp, #4]
     c22:	2b00      	cmp	r3, #0
     c24:	d101      	bne.n	c2a <POST+0xa6>
     c26:	e011      	b.n	c4c <POST+0xc8>
    u8_t gyroID = spiDataTransfer(SPI0,dummy_Tx);
    pinHigh(cs_gyro);

    if (gyroID != 0x0F) {
        postFailed = true;
        failType = 4;
     c28:	2404      	movs	r4, #4

    if (postFailed) {
        while (1) {
            u8_t beepCount;

            for (beepCount = failType; beepCount > 0; beepCount--) {
     c2a:	0025      	movs	r5, r4
     c2c:	4e10      	ldr	r6, [pc, #64]	; (c70 <POST+0xec>)
     c2e:	2d00      	cmp	r5, #0
     c30:	d009      	beq.n	c46 <POST+0xc2>
                beep(300);
     c32:	2096      	movs	r0, #150	; 0x96
     c34:	4b0f      	ldr	r3, [pc, #60]	; (c74 <POST+0xf0>)
     c36:	0040      	lsls	r0, r0, #1
     c38:	4798      	blx	r3
                delay_ms(300);
     c3a:	2096      	movs	r0, #150	; 0x96

    if (postFailed) {
        while (1) {
            u8_t beepCount;

            for (beepCount = failType; beepCount > 0; beepCount--) {
     c3c:	3d01      	subs	r5, #1
                beep(300);
                delay_ms(300);
     c3e:	0040      	lsls	r0, r0, #1
     c40:	47b0      	blx	r6

    if (postFailed) {
        while (1) {
            u8_t beepCount;

            for (beepCount = failType; beepCount > 0; beepCount--) {
     c42:	b2ed      	uxtb	r5, r5
     c44:	e7f2      	b.n	c2c <POST+0xa8>
                beep(300);
                delay_ms(300);
            }
            delay_ms(1500);
     c46:	480c      	ldr	r0, [pc, #48]	; (c78 <POST+0xf4>)
     c48:	47b0      	blx	r6
        }
     c4a:	e7ee      	b.n	c2a <POST+0xa6>
    }
}
     c4c:	b005      	add	sp, #20
     c4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     c50:	00000581 	.word	0x00000581
     c54:	2000063e 	.word	0x2000063e
     c58:	41004400 	.word	0x41004400
     c5c:	00002a05 	.word	0x00002a05
     c60:	00002a1d 	.word	0x00002a1d
     c64:	41004494 	.word	0x41004494
     c68:	000029ed 	.word	0x000029ed
     c6c:	41004498 	.word	0x41004498
     c70:	00000ff1 	.word	0x00000ff1
     c74:	00000d61 	.word	0x00000d61
     c78:	000005dc 	.word	0x000005dc

00000c7c <adcInit>:
#include <util.h>

void adcInit() {

    // set up clock
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;
     c7c:	2180      	movs	r1, #128	; 0x80


#include <util.h>

void adcInit() {
     c7e:	b510      	push	{r4, lr}

    // set up clock
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;
     c80:	4a10      	ldr	r2, [pc, #64]	; (cc4 <adcInit+0x48>)
     c82:	0249      	lsls	r1, r1, #9
     c84:	6a13      	ldr	r3, [r2, #32]
    // divide prescaler by 512 (93.75KHz), max adc freq is 2.1MHz
    ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |
                     ADC_CTRLB_RESSEL_12BIT;

    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
     c86:	4810      	ldr	r0, [pc, #64]	; (cc8 <adcInit+0x4c>)
#include <util.h>

void adcInit() {

    // set up clock
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;
     c88:	430b      	orrs	r3, r1
     c8a:	6213      	str	r3, [r2, #32]

    // divide prescaler by 512 (93.75KHz), max adc freq is 2.1MHz
    ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |
     c8c:	23e0      	movs	r3, #224	; 0xe0
     c8e:	490f      	ldr	r1, [pc, #60]	; (ccc <adcInit+0x50>)
                     ADC_CTRLB_RESSEL_12BIT;

    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
     c90:	4a0f      	ldr	r2, [pc, #60]	; (cd0 <adcInit+0x54>)

    // set up clock
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;

    // divide prescaler by 512 (93.75KHz), max adc freq is 2.1MHz
    ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |
     c92:	00db      	lsls	r3, r3, #3
     c94:	808b      	strh	r3, [r1, #4]
                     ADC_CTRLB_RESSEL_12BIT;

    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
     c96:	8050      	strh	r0, [r2, #2]
                        GCLK_CLKCTRL_GEN(0) |
                        GCLK_CLKCTRL_ID(ADC_GCLK_ID);

    ADC->CALIB.reg =
        ADC_CALIB_BIAS_CAL(
     c98:	4a0e      	ldr	r2, [pc, #56]	; (cd4 <adcInit+0x58>)
    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(0) |
                        GCLK_CLKCTRL_ID(ADC_GCLK_ID);

    ADC->CALIB.reg =
     c9a:	6812      	ldr	r2, [r2, #0]
     c9c:	0150      	lsls	r0, r2, #5
     c9e:	4018      	ands	r0, r3
     ca0:	4b0d      	ldr	r3, [pc, #52]	; (cd8 <adcInit+0x5c>)
     ca2:	0154      	lsls	r4, r2, #5
     ca4:	681a      	ldr	r2, [r3, #0]
     ca6:	0ed3      	lsrs	r3, r2, #27
     ca8:	4323      	orrs	r3, r4
     caa:	b2da      	uxtb	r2, r3
     cac:	0003      	movs	r3, r0
     cae:	4313      	orrs	r3, r2
     cb0:	850b      	strh	r3, [r1, #40]	; 0x28
        ) |
        ADC_CALIB_LINEARITY_CAL(
            (*(uint64_t *)ADC_FUSES_LINEARITY_0_ADDR >> ADC_FUSES_LINEARITY_0_Pos)
        );

    ADC->REFCTRL.reg = ADC_REFCTRL_REFSEL_INTVCC1;
     cb2:	2302      	movs	r3, #2
     cb4:	704b      	strb	r3, [r1, #1]

    ADC->CTRLA.reg = ADC_CTRLA_ENABLE; // enable
     cb6:	700b      	strb	r3, [r1, #0]
    while(ADC->STATUS.reg & ADC_STATUS_SYNCBUSY);
     cb8:	7e4b      	ldrb	r3, [r1, #25]
     cba:	b25b      	sxtb	r3, r3
     cbc:	2b00      	cmp	r3, #0
     cbe:	dbfb      	blt.n	cb8 <adcInit+0x3c>
}
     cc0:	bd10      	pop	{r4, pc}
     cc2:	46c0      	nop			; (mov r8, r8)
     cc4:	40000400 	.word	0x40000400
     cc8:	0000401e 	.word	0x0000401e
     ccc:	42004000 	.word	0x42004000
     cd0:	40000c00 	.word	0x40000c00
     cd4:	00806024 	.word	0x00806024
     cd8:	00806020 	.word	0x00806020

00000cdc <adcSample>:



u16_t adcSample() {
    ADC->SWTRIG.reg = ADC_SWTRIG_START;
     cdc:	2202      	movs	r2, #2
     cde:	4b05      	ldr	r3, [pc, #20]	; (cf4 <adcSample+0x18>)
     ce0:	731a      	strb	r2, [r3, #12]
    while(!(ADC->INTFLAG.reg & ADC_INTFLAG_RESRDY)); // wait until result is ready
     ce2:	3a01      	subs	r2, #1
     ce4:	7e19      	ldrb	r1, [r3, #24]
     ce6:	4211      	tst	r1, r2
     ce8:	d0fc      	beq.n	ce4 <adcSample+0x8>
    return ADC->RESULT.reg;
     cea:	4b02      	ldr	r3, [pc, #8]	; (cf4 <adcSample+0x18>)
     cec:	8b58      	ldrh	r0, [r3, #26]
     cee:	b280      	uxth	r0, r0
}
     cf0:	4770      	bx	lr
     cf2:	46c0      	nop			; (mov r8, r8)
     cf4:	42004000 	.word	0x42004000

00000cf8 <adc_read>:


u16_t adc_read(Pin p) {
     cf8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    u16_t buad;

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
     cfa:	2501      	movs	r5, #1
     cfc:	0c02      	lsrs	r2, r0, #16
     cfe:	b2d4      	uxtb	r4, r2
     d00:	9000      	str	r0, [sp, #0]
     d02:	0e00      	lsrs	r0, r0, #24
     d04:	9101      	str	r1, [sp, #4]
     d06:	0842      	lsrs	r2, r0, #1
     d08:	01e3      	lsls	r3, r4, #7
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     d0a:	4911      	ldr	r1, [pc, #68]	; (d50 <adc_read+0x58>)
     d0c:	18d2      	adds	r2, r2, r3
     d0e:	1852      	adds	r2, r2, r1
    u16_t buad;

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
     d10:	4228      	tst	r0, r5
     d12:	d005      	beq.n	d20 <adc_read+0x28>
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     d14:	210f      	movs	r1, #15
     d16:	7814      	ldrb	r4, [r2, #0]
     d18:	4021      	ands	r1, r4
     d1a:	2410      	movs	r4, #16
     d1c:	4321      	orrs	r1, r4
     d1e:	e003      	b.n	d28 <adc_read+0x30>
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     d20:	240f      	movs	r4, #15
     d22:	7811      	ldrb	r1, [r2, #0]
     d24:	43a1      	bics	r1, r4
     d26:	4329      	orrs	r1, r5
     d28:	7011      	strb	r1, [r2, #0]
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     d2a:	2101      	movs	r1, #1
     d2c:	4a09      	ldr	r2, [pc, #36]	; (d54 <adc_read+0x5c>)
     d2e:	18c3      	adds	r3, r0, r3
     d30:	189b      	adds	r3, r3, r2
     d32:	781a      	ldrb	r2, [r3, #0]
     d34:	430a      	orrs	r2, r1
     d36:	701a      	strb	r2, [r3, #0]
    // switch pin mux to analog in
    pinAnalog(p);

    ADC->INPUTCTRL.reg = (ADC_INPUTCTRL_MUXPOS(p.chan) // select from proper pin
                          | ADC_INPUTCTRL_MUXNEG_GND // 0 = gnd
                          | ADC_INPUTCTRL_GAIN_1X);
     d38:	466b      	mov	r3, sp
     d3a:	791a      	ldrb	r2, [r3, #4]
     d3c:	231f      	movs	r3, #31
     d3e:	4013      	ands	r3, r2
     d40:	22c0      	movs	r2, #192	; 0xc0
     d42:	0152      	lsls	r2, r2, #5
     d44:	4313      	orrs	r3, r2

u16_t adc_read(Pin p) {
    // switch pin mux to analog in
    pinAnalog(p);

    ADC->INPUTCTRL.reg = (ADC_INPUTCTRL_MUXPOS(p.chan) // select from proper pin
     d46:	4a04      	ldr	r2, [pc, #16]	; (d58 <adc_read+0x60>)
     d48:	6113      	str	r3, [r2, #16]
                          | ADC_INPUTCTRL_MUXNEG_GND // 0 = gnd
                          | ADC_INPUTCTRL_GAIN_1X);

    return adcSample();
     d4a:	4b04      	ldr	r3, [pc, #16]	; (d5c <adc_read+0x64>)
     d4c:	4798      	blx	r3
     d4e:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
     d50:	41004430 	.word	0x41004430
     d54:	41004440 	.word	0x41004440
     d58:	42004000 	.word	0x42004000
     d5c:	00000cdd 	.word	0x00000cdd

00000d60 <beep>:
#include <util.h>
#include <boardDefines.h>


void beep(u16_t toggles) {
     d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
}


inline static void pinToggle(Pin p) {
    PORT->Group[p.group].OUTTGL.reg = (1<<p.pin);
     d62:	2380      	movs	r3, #128	; 0x80
     d64:	2780      	movs	r7, #128	; 0x80
     d66:	0006      	movs	r6, r0

    pinToggle(LedPin);
    for (u16_t buzz = 0; buzz < toggles; ++buzz) {
     d68:	2500      	movs	r5, #0
     d6a:	4c0a      	ldr	r4, [pc, #40]	; (d94 <beep+0x34>)
     d6c:	035b      	lsls	r3, r3, #13
     d6e:	61e3      	str	r3, [r4, #28]
     d70:	03bf      	lsls	r7, r7, #14
     d72:	42b5      	cmp	r5, r6
     d74:	d006      	beq.n	d84 <beep+0x24>
     d76:	61e7      	str	r7, [r4, #28]
        pinToggle(buzzerPin);
        delay_us(122);
     d78:	207a      	movs	r0, #122	; 0x7a
     d7a:	4b07      	ldr	r3, [pc, #28]	; (d98 <beep+0x38>)


void beep(u16_t toggles) {

    pinToggle(LedPin);
    for (u16_t buzz = 0; buzz < toggles; ++buzz) {
     d7c:	3501      	adds	r5, #1
        pinToggle(buzzerPin);
        delay_us(122);
     d7e:	4798      	blx	r3


void beep(u16_t toggles) {

    pinToggle(LedPin);
    for (u16_t buzz = 0; buzz < toggles; ++buzz) {
     d80:	b2ad      	uxth	r5, r5
     d82:	e7f6      	b.n	d72 <beep+0x12>
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     d84:	2380      	movs	r3, #128	; 0x80
     d86:	039b      	lsls	r3, r3, #14
     d88:	6163      	str	r3, [r4, #20]
}


inline static void pinToggle(Pin p) {
    PORT->Group[p.group].OUTTGL.reg = (1<<p.pin);
     d8a:	2380      	movs	r3, #128	; 0x80
     d8c:	035b      	lsls	r3, r3, #13
     d8e:	61e3      	str	r3, [r4, #28]
        pinToggle(buzzerPin);
        delay_us(122);
    }
    pinLow(buzzerPin);
    pinToggle(LedPin);
}
     d90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     d92:	46c0      	nop			; (mov r8, r8)
     d94:	41004400 	.word	0x41004400
     d98:	00000fc1 	.word	0x00000fc1

00000d9c <startupJingle>:

void startupJingle(){
     d9c:	b570      	push	{r4, r5, r6, lr}
    beep(300);
     d9e:	2696      	movs	r6, #150	; 0x96
     da0:	0076      	lsls	r6, r6, #1
     da2:	4d0a      	ldr	r5, [pc, #40]	; (dcc <startupJingle+0x30>)
     da4:	0030      	movs	r0, r6
     da6:	47a8      	blx	r5
    delay_ms(80);
     da8:	4c09      	ldr	r4, [pc, #36]	; (dd0 <startupJingle+0x34>)
     daa:	2050      	movs	r0, #80	; 0x50
     dac:	47a0      	blx	r4
    beep(300);
     dae:	0030      	movs	r0, r6
     db0:	47a8      	blx	r5
    delay_ms(250);
     db2:	20fa      	movs	r0, #250	; 0xfa
     db4:	47a0      	blx	r4
    beep(300);
     db6:	0030      	movs	r0, r6
     db8:	47a8      	blx	r5
    delay_ms(80);
     dba:	2050      	movs	r0, #80	; 0x50
     dbc:	47a0      	blx	r4
    beep(300);
     dbe:	0030      	movs	r0, r6
     dc0:	47a8      	blx	r5
    delay_ms(500);
     dc2:	20fa      	movs	r0, #250	; 0xfa
     dc4:	0040      	lsls	r0, r0, #1
     dc6:	47a0      	blx	r4
}
     dc8:	bd70      	pop	{r4, r5, r6, pc}
     dca:	46c0      	nop			; (mov r8, r8)
     dcc:	00000d61 	.word	0x00000d61
     dd0:	00000ff1 	.word	0x00000ff1

00000dd4 <unpluggedJingle>:

void unpluggedJingle(){
     dd4:	b570      	push	{r4, r5, r6, lr}
            delay_ms(80);
            beep(300);
     dd6:	2696      	movs	r6, #150	; 0x96
    beep(300);
    delay_ms(500);
}

void unpluggedJingle(){
            delay_ms(80);
     dd8:	4c0c      	ldr	r4, [pc, #48]	; (e0c <unpluggedJingle+0x38>)
            beep(300);
     dda:	0076      	lsls	r6, r6, #1
    beep(300);
    delay_ms(500);
}

void unpluggedJingle(){
            delay_ms(80);
     ddc:	2050      	movs	r0, #80	; 0x50
     dde:	47a0      	blx	r4
            beep(300);
     de0:	4d0b      	ldr	r5, [pc, #44]	; (e10 <unpluggedJingle+0x3c>)
     de2:	0030      	movs	r0, r6
     de4:	47a8      	blx	r5
            delay_ms(80);
     de6:	2050      	movs	r0, #80	; 0x50
     de8:	47a0      	blx	r4
            beep(300);
     dea:	0030      	movs	r0, r6
     dec:	47a8      	blx	r5
            delay_ms(80);
     dee:	2050      	movs	r0, #80	; 0x50
     df0:	47a0      	blx	r4
            beep(300);
     df2:	0030      	movs	r0, r6
     df4:	47a8      	blx	r5
            delay_ms(80);
     df6:	2050      	movs	r0, #80	; 0x50
     df8:	47a0      	blx	r4
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     dfa:	2280      	movs	r2, #128	; 0x80
     dfc:	4b05      	ldr	r3, [pc, #20]	; (e14 <unpluggedJingle+0x40>)
     dfe:	0392      	lsls	r2, r2, #14
     e00:	615a      	str	r2, [r3, #20]
     e02:	2280      	movs	r2, #128	; 0x80
     e04:	0352      	lsls	r2, r2, #13
     e06:	615a      	str	r2, [r3, #20]
            pinLow(buzzerPin);
            pinLow(LedPin);

}
     e08:	bd70      	pop	{r4, r5, r6, pc}
     e0a:	46c0      	nop			; (mov r8, r8)
     e0c:	00000ff1 	.word	0x00000ff1
     e10:	00000d61 	.word	0x00000d61
     e14:	41004400 	.word	0x41004400

00000e18 <GclkInit>:
static uint32_t cycles_per_us = 48000000UL / 1000000;

void GclkInit() {


    SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     e18:	23c2      	movs	r3, #194	; 0xc2
                           SYSCTRL_INTFLAG_DFLLRDY;
    NVMCTRL->CTRLB.reg |= NVMCTRL_CTRLB_RWS_HALF;
     e1a:	2002      	movs	r0, #2


static uint32_t cycles_per_ms = 48000000UL / 1000;
static uint32_t cycles_per_us = 48000000UL / 1000000;

void GclkInit() {
     e1c:	b510      	push	{r4, lr}


    SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     e1e:	4916      	ldr	r1, [pc, #88]	; (e78 <GclkInit+0x60>)
                           SYSCTRL_INTFLAG_DFLLRDY;
    NVMCTRL->CTRLB.reg |= NVMCTRL_CTRLB_RWS_HALF;
     e20:	4a16      	ldr	r2, [pc, #88]	; (e7c <GclkInit+0x64>)
static uint32_t cycles_per_us = 48000000UL / 1000000;

void GclkInit() {


    SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     e22:	00db      	lsls	r3, r3, #3
     e24:	608b      	str	r3, [r1, #8]
                           SYSCTRL_INTFLAG_DFLLRDY;
    NVMCTRL->CTRLB.reg |= NVMCTRL_CTRLB_RWS_HALF;
     e26:	6853      	ldr	r3, [r2, #4]
     e28:	4303      	orrs	r3, r0
     e2a:	6053      	str	r3, [r2, #4]

#define NVM_DFLL_COARSE_POS    58
#define NVM_DFLL_COARSE_SIZE   6
#define NVM_DFLL_FINE_POS      64
#define NVM_DFLL_FINE_SIZE     10
    uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
     e2c:	4b14      	ldr	r3, [pc, #80]	; (e80 <GclkInit+0x68>)
     e2e:	681a      	ldr	r2, [r3, #0]
     e30:	0e92      	lsrs	r2, r2, #26
                         + (NVM_DFLL_COARSE_POS / 32))
                       >> (NVM_DFLL_COARSE_POS % 32))
                     & ((1 << NVM_DFLL_COARSE_SIZE) - 1);
    if (coarse == 0x3f) {
     e32:	2a3f      	cmp	r2, #63	; 0x3f
     e34:	d100      	bne.n	e38 <GclkInit+0x20>
        coarse = 0x1f;
     e36:	3a20      	subs	r2, #32
    }
    uint32_t fine =( *((uint32_t *)(NVMCTRL_OTP4)
                       + (NVM_DFLL_FINE_POS / 32))
                     >> (NVM_DFLL_FINE_POS % 32))
     e38:	4b12      	ldr	r3, [pc, #72]	; (e84 <GclkInit+0x6c>)
                   & ((1 << NVM_DFLL_FINE_SIZE) - 1);
    if (fine == 0x3ff) {
     e3a:	4813      	ldr	r0, [pc, #76]	; (e88 <GclkInit+0x70>)
                       >> (NVM_DFLL_COARSE_POS % 32))
                     & ((1 << NVM_DFLL_COARSE_SIZE) - 1);
    if (coarse == 0x3f) {
        coarse = 0x1f;
    }
    uint32_t fine =( *((uint32_t *)(NVMCTRL_OTP4)
     e3c:	681b      	ldr	r3, [r3, #0]
     e3e:	059b      	lsls	r3, r3, #22
     e40:	0d9b      	lsrs	r3, r3, #22
                       + (NVM_DFLL_FINE_POS / 32))
                     >> (NVM_DFLL_FINE_POS % 32))
                   & ((1 << NVM_DFLL_FINE_SIZE) - 1);
    if (fine == 0x3ff) {
     e42:	4283      	cmp	r3, r0
     e44:	d100      	bne.n	e48 <GclkInit+0x30>
        fine = 0x1ff;
     e46:	4b11      	ldr	r3, [pc, #68]	; (e8c <GclkInit+0x74>)
    }


    // Disable ONDEMAND mode while writing configurations (errata 9905)
    SYSCTRL->DFLLCTRL.reg = dfll_ctrl_usb & ~SYSCTRL_DFLLCTRL_ONDEMAND;
     e48:	4811      	ldr	r0, [pc, #68]	; (e90 <GclkInit+0x78>)
     e4a:	8488      	strh	r0, [r1, #36]	; 0x24
    while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_DFLLRDY)) == 0);
     e4c:	2010      	movs	r0, #16
     e4e:	68cc      	ldr	r4, [r1, #12]
     e50:	4204      	tst	r4, r0
     e52:	d0fc      	beq.n	e4e <GclkInit+0x36>
    SYSCTRL->DFLLVAL.reg = SYSCTRL_DFLLVAL_COARSE(coarse) | SYSCTRL_DFLLVAL_FINE(fine);
     e54:	0292      	lsls	r2, r2, #10
     e56:	4313      	orrs	r3, r2
     e58:	4a07      	ldr	r2, [pc, #28]	; (e78 <GclkInit+0x60>)
     e5a:	6293      	str	r3, [r2, #40]	; 0x28


    //Wait and see if the DFLL output is good . . .
    while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_DFLLRDY)) == 0);
     e5c:	2310      	movs	r3, #16
     e5e:	68ca      	ldr	r2, [r1, #12]
     e60:	421a      	tst	r2, r3
     e62:	d0fc      	beq.n	e5e <GclkInit+0x46>


    SYSCTRL->DFLLCTRL.reg = dfll_ctrl_usb;
     e64:	4a0b      	ldr	r2, [pc, #44]	; (e94 <GclkInit+0x7c>)
     e66:	4b04      	ldr	r3, [pc, #16]	; (e78 <GclkInit+0x60>)
     e68:	849a      	strh	r2, [r3, #36]	; 0x24


    //For generic clock generator 0, select the DFLL48 Clock as input
    GCLK->GENDIV.reg  = (GCLK_GENDIV_DIV(1)  | GCLK_GENDIV_ID(0));
     e6a:	2280      	movs	r2, #128	; 0x80
     e6c:	4b0a      	ldr	r3, [pc, #40]	; (e98 <GclkInit+0x80>)
     e6e:	0052      	lsls	r2, r2, #1
     e70:	609a      	str	r2, [r3, #8]
    GCLK->GENCTRL.reg = (GCLK_GENCTRL_ID(0)  | (GCLK_GENCTRL_SRC_DFLL48M) | (GCLK_GENCTRL_GENEN));
     e72:	4a0a      	ldr	r2, [pc, #40]	; (e9c <GclkInit+0x84>)
     e74:	605a      	str	r2, [r3, #4]
}
     e76:	bd10      	pop	{r4, pc}
     e78:	40000800 	.word	0x40000800
     e7c:	41004000 	.word	0x41004000
     e80:	00806024 	.word	0x00806024
     e84:	00806028 	.word	0x00806028
     e88:	000003ff 	.word	0x000003ff
     e8c:	000001ff 	.word	0x000001ff
     e90:	00000522 	.word	0x00000522
     e94:	000005a2 	.word	0x000005a2
     e98:	40000c00 	.word	0x40000c00
     e9c:	00010700 	.word	0x00010700

00000ea0 <RtcInit>:
        //wait for crystal to warm up
        while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_OSC32KRDY)) == 0);

    */

    SYSCTRL->OSC32K.reg = SYSCTRL_OSC32K_ENABLE |
     ea0:	4b27      	ldr	r3, [pc, #156]	; (f40 <RtcInit+0xa0>)
     ea2:	4a28      	ldr	r2, [pc, #160]	; (f44 <RtcInit+0xa4>)
                          SYSCTRL_OSC32K_EN32K |
                          ( 6 << SYSCTRL_OSC32K_STARTUP_Pos);


    SYSCTRL->OSC32K.bit.CALIB =
     ea4:	4828      	ldr	r0, [pc, #160]	; (f48 <RtcInit+0xa8>)
        //wait for crystal to warm up
        while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_OSC32KRDY)) == 0);

    */

    SYSCTRL->OSC32K.reg = SYSCTRL_OSC32K_ENABLE |
     ea6:	619a      	str	r2, [r3, #24]
                          SYSCTRL_OSC32K_EN32K |
                          ( 6 << SYSCTRL_OSC32K_STARTUP_Pos);


    SYSCTRL->OSC32K.bit.CALIB =
        ((*(uint32_t *)FUSES_OSC32K_CAL_ADDR >>
     ea8:	4a28      	ldr	r2, [pc, #160]	; (f4c <RtcInit+0xac>)
    SYSCTRL->OSC32K.reg = SYSCTRL_OSC32K_ENABLE |
                          SYSCTRL_OSC32K_EN32K |
                          ( 6 << SYSCTRL_OSC32K_STARTUP_Pos);


    SYSCTRL->OSC32K.bit.CALIB =
     eaa:	6999      	ldr	r1, [r3, #24]
     eac:	6812      	ldr	r2, [r2, #0]
     eae:	4001      	ands	r1, r0
     eb0:	04d2      	lsls	r2, r2, #19
     eb2:	0e52      	lsrs	r2, r2, #25
     eb4:	0412      	lsls	r2, r2, #16
     eb6:	4311      	orrs	r1, r2
     eb8:	6199      	str	r1, [r3, #24]
        ((*(uint32_t *)FUSES_OSC32K_CAL_ADDR >>
          FUSES_OSC32K_CAL_Pos) & 0x7Ful);

    SYSCTRL->OSC32K.reg = SYSCTRL_OSC32K_STARTUP( 0x6u ) | // cf table 15.10 of product datasheet in chapter 15.8.6
     eba:	4925      	ldr	r1, [pc, #148]	; (f50 <RtcInit+0xb0>)
     ebc:	6199      	str	r1, [r3, #24]
                          SYSCTRL_OSC32K_EN32K;
    SYSCTRL->OSC32K.bit.CALIB =
     ebe:	6999      	ldr	r1, [r3, #24]
     ec0:	4008      	ands	r0, r1
        ((*(uint32_t *)FUSES_OSC32K_CAL_ADDR >>
          FUSES_OSC32K_CAL_Pos) & 0x7Ful);



    SYSCTRL->OSC32K.bit.ENABLE = 1; // separate call, as described in chapter 15.6.3
     ec2:	2102      	movs	r1, #2
        ((*(uint32_t *)FUSES_OSC32K_CAL_ADDR >>
          FUSES_OSC32K_CAL_Pos) & 0x7Ful);

    SYSCTRL->OSC32K.reg = SYSCTRL_OSC32K_STARTUP( 0x6u ) | // cf table 15.10 of product datasheet in chapter 15.8.6
                          SYSCTRL_OSC32K_EN32K;
    SYSCTRL->OSC32K.bit.CALIB =
     ec4:	4302      	orrs	r2, r0
     ec6:	619a      	str	r2, [r3, #24]
        ((*(uint32_t *)FUSES_OSC32K_CAL_ADDR >>
          FUSES_OSC32K_CAL_Pos) & 0x7Ful);



    SYSCTRL->OSC32K.bit.ENABLE = 1; // separate call, as described in chapter 15.6.3
     ec8:	699a      	ldr	r2, [r3, #24]
     eca:	430a      	orrs	r2, r1
     ecc:	619a      	str	r2, [r3, #24]

    while (  (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_OSC32KRDY) == 0 ) {
     ece:	2204      	movs	r2, #4
     ed0:	68d9      	ldr	r1, [r3, #12]
     ed2:	4211      	tst	r1, r2
     ed4:	d0fc      	beq.n	ed0 <RtcInit+0x30>





    GCLK->GENDIV.reg = GCLK_GENDIV_ID(2) | GCLK_GENDIV_DIV(1);
     ed6:	2281      	movs	r2, #129	; 0x81
     ed8:	4b1e      	ldr	r3, [pc, #120]	; (f54 <RtcInit+0xb4>)
     eda:	0052      	lsls	r2, r2, #1
     edc:	609a      	str	r2, [r3, #8]

    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(2) |
     ede:	4a1e      	ldr	r2, [pc, #120]	; (f58 <RtcInit+0xb8>)
     ee0:	605a      	str	r2, [r3, #4]
                        GCLK_GENCTRL_SRC(GCLK_GENCTRL_SRC_OSC32K) |
                        GCLK_GENCTRL_IDC |
                        GCLK_GENCTRL_RUNSTDBY |
                        GCLK_GENCTRL_GENEN;
    while (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY);
     ee2:	785a      	ldrb	r2, [r3, #1]
     ee4:	b252      	sxtb	r2, r2
     ee6:	2a00      	cmp	r2, #0
     ee8:	dbfb      	blt.n	ee2 <RtcInit+0x42>

// Configure RTC
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(RTC_GCLK_ID) |
     eea:	4a1c      	ldr	r2, [pc, #112]	; (f5c <RtcInit+0xbc>)
     eec:	4b19      	ldr	r3, [pc, #100]	; (f54 <RtcInit+0xb4>)
     eee:	805a      	strh	r2, [r3, #2]
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    RTC->MODE1.CTRL.reg = RTC_MODE1_CTRL_MODE_COUNT16;
     ef0:	2204      	movs	r2, #4
     ef2:	4b1b      	ldr	r3, [pc, #108]	; (f60 <RtcInit+0xc0>)
     ef4:	801a      	strh	r2, [r3, #0]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     ef6:	7a9a      	ldrb	r2, [r3, #10]
     ef8:	4919      	ldr	r1, [pc, #100]	; (f60 <RtcInit+0xc0>)
     efa:	09d2      	lsrs	r2, r2, #7
     efc:	d1fb      	bne.n	ef6 <RtcInit+0x56>

// Prescaler needs to be enabled separately from the mode for some reason
    RTC->MODE1.CTRL.reg |= RTC_MODE1_CTRL_PRESCALER_DIV32;
     efe:	20a0      	movs	r0, #160	; 0xa0
     f00:	880a      	ldrh	r2, [r1, #0]
     f02:	00c0      	lsls	r0, r0, #3
     f04:	4302      	orrs	r2, r0
     f06:	800a      	strh	r2, [r1, #0]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     f08:	7a9a      	ldrb	r2, [r3, #10]
     f0a:	09d2      	lsrs	r2, r2, #7
     f0c:	d1fc      	bne.n	f08 <RtcInit+0x68>

    RTC->MODE1.PER.reg = 998;
     f0e:	4915      	ldr	r1, [pc, #84]	; (f64 <RtcInit+0xc4>)
     f10:	4a13      	ldr	r2, [pc, #76]	; (f60 <RtcInit+0xc0>)
     f12:	8291      	strh	r1, [r2, #20]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     f14:	7a99      	ldrb	r1, [r3, #10]
     f16:	4a12      	ldr	r2, [pc, #72]	; (f60 <RtcInit+0xc0>)
     f18:	09c9      	lsrs	r1, r1, #7
     f1a:	d1fb      	bne.n	f14 <RtcInit+0x74>

    RTC->MODE1.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_ADDR(0x10);
     f1c:	8851      	ldrh	r1, [r2, #2]
     f1e:	4812      	ldr	r0, [pc, #72]	; (f68 <RtcInit+0xc8>)
     f20:	4301      	orrs	r1, r0
     f22:	8051      	strh	r1, [r2, #2]

    RTC->MODE1.INTENSET.reg = RTC_MODE1_INTENSET_OVF;
     f24:	2180      	movs	r1, #128	; 0x80

    RTC->MODE1.CTRL.bit.ENABLE = 1;
     f26:	2002      	movs	r0, #2
    RTC->MODE1.PER.reg = 998;
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);

    RTC->MODE1.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_ADDR(0x10);

    RTC->MODE1.INTENSET.reg = RTC_MODE1_INTENSET_OVF;
     f28:	71d1      	strb	r1, [r2, #7]

    RTC->MODE1.CTRL.bit.ENABLE = 1;
     f2a:	8811      	ldrh	r1, [r2, #0]
     f2c:	4301      	orrs	r1, r0
     f2e:	8011      	strh	r1, [r2, #0]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     f30:	7a9a      	ldrb	r2, [r3, #10]
     f32:	09d2      	lsrs	r2, r2, #7
     f34:	d1fc      	bne.n	f30 <RtcInit+0x90>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     f36:	4b0d      	ldr	r3, [pc, #52]	; (f6c <RtcInit+0xcc>)
     f38:	3208      	adds	r2, #8
     f3a:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(RTC_IRQn);
}
     f3c:	4770      	bx	lr
     f3e:	46c0      	nop			; (mov r8, r8)
     f40:	40000800 	.word	0x40000800
     f44:	00000606 	.word	0x00000606
     f48:	ff80ffff 	.word	0xff80ffff
     f4c:	00806024 	.word	0x00806024
     f50:	00000604 	.word	0x00000604
     f54:	40000c00 	.word	0x40000c00
     f58:	00230002 	.word	0x00230002
     f5c:	00004204 	.word	0x00004204
     f60:	40001400 	.word	0x40001400
     f64:	000003e6 	.word	0x000003e6
     f68:	00004010 	.word	0x00004010
     f6c:	e000e100 	.word	0xe000e100

00000f70 <gclkEnable>:


void gclkEnable(u32_t id, u32_t src, u32_t div) {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
     f70:	230f      	movs	r3, #15
     f72:	4018      	ands	r0, r3
     f74:	4b08      	ldr	r3, [pc, #32]	; (f98 <gclkEnable+0x28>)
     f76:	0212      	lsls	r2, r2, #8
     f78:	401a      	ands	r2, r3
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     f7a:	23f8      	movs	r3, #248	; 0xf8
     f7c:	0209      	lsls	r1, r1, #8
     f7e:	015b      	lsls	r3, r3, #5
     f80:	4019      	ands	r1, r3
     f82:	2380      	movs	r3, #128	; 0x80

    NVIC_EnableIRQ(RTC_IRQn);
}


void gclkEnable(u32_t id, u32_t src, u32_t div) {
     f84:	b510      	push	{r4, lr}
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     f86:	025b      	lsls	r3, r3, #9
    NVIC_EnableIRQ(RTC_IRQn);
}


void gclkEnable(u32_t id, u32_t src, u32_t div) {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
     f88:	4c04      	ldr	r4, [pc, #16]	; (f9c <gclkEnable+0x2c>)
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     f8a:	4319      	orrs	r1, r3
    NVIC_EnableIRQ(RTC_IRQn);
}


void gclkEnable(u32_t id, u32_t src, u32_t div) {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
     f8c:	4302      	orrs	r2, r0
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     f8e:	4308      	orrs	r0, r1
    NVIC_EnableIRQ(RTC_IRQn);
}


void gclkEnable(u32_t id, u32_t src, u32_t div) {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
     f90:	60a2      	str	r2, [r4, #8]
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     f92:	6060      	str	r0, [r4, #4]
}
     f94:	bd10      	pop	{r4, pc}
     f96:	46c0      	nop			; (mov r8, r8)
     f98:	00ffff00 	.word	0x00ffff00
     f9c:	40000c00 	.word	0x40000c00

00000fa0 <delayInit>:


void delayInit(void) {
    cycles_per_ms = 48000000UL;
    cycles_per_ms /= 1000;
     fa0:	4b04      	ldr	r3, [pc, #16]	; (fb4 <delayInit+0x14>)
     fa2:	4a05      	ldr	r2, [pc, #20]	; (fb8 <delayInit+0x18>)
     fa4:	601a      	str	r2, [r3, #0]
    cycles_per_us = cycles_per_ms / 1000;
     fa6:	2230      	movs	r2, #48	; 0x30
     fa8:	605a      	str	r2, [r3, #4]

    SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     faa:	4b04      	ldr	r3, [pc, #16]	; (fbc <delayInit+0x1c>)
     fac:	3a2b      	subs	r2, #43	; 0x2b
     fae:	601a      	str	r2, [r3, #0]
}
     fb0:	4770      	bx	lr
     fb2:	46c0      	nop			; (mov r8, r8)
     fb4:	20000004 	.word	0x20000004
     fb8:	0000bb80 	.word	0x0000bb80
     fbc:	e000e010 	.word	0xe000e010

00000fc0 <delay_us>:
/**
 * \brief Delay loop to delay at least n number of microseconds
 *
 * \param n  Number of microseconds to wait
 */
void delay_us(uint32_t n) {
     fc0:	b570      	push	{r4, r5, r6, lr}
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
        SysTick->VAL = 0;

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     fc2:	2480      	movs	r4, #128	; 0x80

static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
        SysTick->VAL = 0;
     fc4:	2100      	movs	r1, #0
    while (n--) {
        /* Devide up to blocks of 10u */
        delay_cycles(cycles_per_us);
     fc6:	4b08      	ldr	r3, [pc, #32]	; (fe8 <delay_us+0x28>)


static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
     fc8:	4a08      	ldr	r2, [pc, #32]	; (fec <delay_us+0x2c>)
     fca:	685b      	ldr	r3, [r3, #4]
        SysTick->VAL = 0;

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     fcc:	0264      	lsls	r4, r4, #9
 * \brief Delay loop to delay at least n number of microseconds
 *
 * \param n  Number of microseconds to wait
 */
void delay_us(uint32_t n) {
    while (n--) {
     fce:	3801      	subs	r0, #1
     fd0:	d308      	bcc.n	fe4 <delay_us+0x24>



static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
     fd2:	2b00      	cmp	r3, #0
     fd4:	d0fb      	beq.n	fce <delay_us+0xe>
     fd6:	4e05      	ldr	r6, [pc, #20]	; (fec <delay_us+0x2c>)
        SysTick->LOAD = n;
     fd8:	6053      	str	r3, [r2, #4]
        SysTick->VAL = 0;
     fda:	6091      	str	r1, [r2, #8]

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     fdc:	6835      	ldr	r5, [r6, #0]
     fde:	4225      	tst	r5, r4
     fe0:	d0fc      	beq.n	fdc <delay_us+0x1c>
     fe2:	e7f4      	b.n	fce <delay_us+0xe>
        /* Devide up to blocks of 10u */
        delay_cycles(cycles_per_us);
    }
}
     fe4:	bd70      	pop	{r4, r5, r6, pc}
     fe6:	46c0      	nop			; (mov r8, r8)
     fe8:	20000004 	.word	0x20000004
     fec:	e000e010 	.word	0xe000e010

00000ff0 <delay_ms>:
/**
 * \brief Delay loop to delay at least n number of milliseconds
 *
 * \param n  Number of milliseconds to wait
 */
void delay_ms(uint32_t n) {
     ff0:	b570      	push	{r4, r5, r6, lr}
     ff2:	2480      	movs	r4, #128	; 0x80

static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
        SysTick->VAL = 0;
     ff4:	2100      	movs	r1, #0
    while (n--) {
        /* Devide up to blocks of 1ms */
        delay_cycles(cycles_per_ms);
     ff6:	4b08      	ldr	r3, [pc, #32]	; (1018 <delay_ms+0x28>)


static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
     ff8:	4a08      	ldr	r2, [pc, #32]	; (101c <delay_ms+0x2c>)
     ffa:	681b      	ldr	r3, [r3, #0]
        SysTick->VAL = 0;

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     ffc:	0264      	lsls	r4, r4, #9
 * \brief Delay loop to delay at least n number of milliseconds
 *
 * \param n  Number of milliseconds to wait
 */
void delay_ms(uint32_t n) {
    while (n--) {
     ffe:	3801      	subs	r0, #1
    1000:	d308      	bcc.n	1014 <delay_ms+0x24>



static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
    1002:	2b00      	cmp	r3, #0
    1004:	d0fb      	beq.n	ffe <delay_ms+0xe>
    1006:	4e05      	ldr	r6, [pc, #20]	; (101c <delay_ms+0x2c>)
        SysTick->LOAD = n;
    1008:	6053      	str	r3, [r2, #4]
        SysTick->VAL = 0;
    100a:	6091      	str	r1, [r2, #8]

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    100c:	6835      	ldr	r5, [r6, #0]
    100e:	4225      	tst	r5, r4
    1010:	d0fc      	beq.n	100c <delay_ms+0x1c>
    1012:	e7f4      	b.n	ffe <delay_ms+0xe>
        /* Devide up to blocks of 1ms */
        delay_cycles(cycles_per_ms);
    }
}
    1014:	bd70      	pop	{r4, r5, r6, pc}
    1016:	46c0      	nop			; (mov r8, r8)
    1018:	20000004 	.word	0x20000004
    101c:	e000e010 	.word	0xe000e010

00001020 <RTC_Handler>:


volatile uint32_t time_ms = 0;

void RTC_Handler(void) {
    time_ms += 1000;
    1020:	21fa      	movs	r1, #250	; 0xfa
    1022:	4a04      	ldr	r2, [pc, #16]	; (1034 <RTC_Handler+0x14>)
    1024:	0089      	lsls	r1, r1, #2
    1026:	6813      	ldr	r3, [r2, #0]
    1028:	185b      	adds	r3, r3, r1
    102a:	6013      	str	r3, [r2, #0]
    RTC->MODE1.INTFLAG.reg = 0xFF;
    102c:	22ff      	movs	r2, #255	; 0xff
    102e:	4b02      	ldr	r3, [pc, #8]	; (1038 <RTC_Handler+0x18>)
    1030:	721a      	strb	r2, [r3, #8]
}
    1032:	4770      	bx	lr
    1034:	200004c4 	.word	0x200004c4
    1038:	40001400 	.word	0x40001400

0000103c <millis>:

uint32_t millis(void) {
    103c:	b530      	push	{r4, r5, lr}
    uint32_t ms;
    ATOMIC_SECTION_ENTER
    103e:	f3ef 8110 	mrs	r1, PRIMASK
    1042:	b672      	cpsid	i
    ms = time_ms + RTC->MODE1.COUNT.reg;
    1044:	4a08      	ldr	r2, [pc, #32]	; (1068 <millis+0x2c>)
    1046:	4d09      	ldr	r5, [pc, #36]	; (106c <millis+0x30>)
    1048:	8a10      	ldrh	r0, [r2, #16]
    104a:	682b      	ldr	r3, [r5, #0]
    if (RTC->MODE1.INTFLAG.bit.OVF)
    104c:	7a14      	ldrb	r4, [r2, #8]
}

uint32_t millis(void) {
    uint32_t ms;
    ATOMIC_SECTION_ENTER
    ms = time_ms + RTC->MODE1.COUNT.reg;
    104e:	b280      	uxth	r0, r0
    if (RTC->MODE1.INTFLAG.bit.OVF)
    1050:	09e4      	lsrs	r4, r4, #7
    1052:	d004      	beq.n	105e <millis+0x22>
        ms = time_ms + RTC->MODE1.COUNT.reg + 1000;
    1054:	8a13      	ldrh	r3, [r2, #16]
    1056:	22fa      	movs	r2, #250	; 0xfa
    1058:	6828      	ldr	r0, [r5, #0]
    105a:	0092      	lsls	r2, r2, #2
    105c:	1880      	adds	r0, r0, r2
    105e:	18c0      	adds	r0, r0, r3
    ATOMIC_SECTION_LEAVE
    1060:	f381 8810 	msr	PRIMASK, r1
    return ms;
}
    1064:	bd30      	pop	{r4, r5, pc}
    1066:	46c0      	nop			; (mov r8, r8)
    1068:	40001400 	.word	0x40001400
    106c:	200004c4 	.word	0x200004c4

00001070 <TC4Init>:

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC4_GCLK_ID) |
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC4;
    1070:	2180      	movs	r1, #128	; 0x80
    return ms;
}

void TC4Init() {

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC4_GCLK_ID) |
    1072:	4a0d      	ldr	r2, [pc, #52]	; (10a8 <TC4Init+0x38>)
    1074:	4b0d      	ldr	r3, [pc, #52]	; (10ac <TC4Init+0x3c>)
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC4;
    1076:	0149      	lsls	r1, r1, #5
    return ms;
}

void TC4Init() {

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC4_GCLK_ID) |
    1078:	805a      	strh	r2, [r3, #2]
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC4;
    107a:	4a0d      	ldr	r2, [pc, #52]	; (10b0 <TC4Init+0x40>)
    107c:	6a13      	ldr	r3, [r2, #32]
    107e:	430b      	orrs	r3, r1
    1080:	6213      	str	r3, [r2, #32]

    TC4->COUNT8.CTRLA.reg = TC_CTRLA_MODE_COUNT8 |
    1082:	4b0c      	ldr	r3, [pc, #48]	; (10b4 <TC4Init+0x44>)
    1084:	4a0c      	ldr	r2, [pc, #48]	; (10b8 <TC4Init+0x48>)

    TC4->COUNT8.INTENSET.reg = TC_INTENSET_OVF;

    TC4->COUNT8.EVCTRL.reg = TC_EVCTRL_OVFEO;

    TC4->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
    1086:	2102      	movs	r1, #2
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC4;

    TC4->COUNT8.CTRLA.reg = TC_CTRLA_MODE_COUNT8 |
    1088:	801a      	strh	r2, [r3, #0]
                            TC_CTRLA_RUNSTDBY |
                            TC_CTRLA_PRESCALER_DIV2;
    TC4->COUNT8.PER.reg = 0x50;
    108a:	2250      	movs	r2, #80	; 0x50
    108c:	751a      	strb	r2, [r3, #20]

    TC4->COUNT8.INTENSET.reg = TC_INTENSET_OVF;
    108e:	3a4f      	subs	r2, #79	; 0x4f
    1090:	735a      	strb	r2, [r3, #13]

    TC4->COUNT8.EVCTRL.reg = TC_EVCTRL_OVFEO;
    1092:	32ff      	adds	r2, #255	; 0xff
    1094:	815a      	strh	r2, [r3, #10]

    TC4->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
    1096:	881a      	ldrh	r2, [r3, #0]
    1098:	430a      	orrs	r2, r1
    109a:	801a      	strh	r2, [r3, #0]
    109c:	2280      	movs	r2, #128	; 0x80
    109e:	4b07      	ldr	r3, [pc, #28]	; (10bc <TC4Init+0x4c>)
    10a0:	0312      	lsls	r2, r2, #12
    10a2:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(TC4_IRQn);
}
    10a4:	4770      	bx	lr
    10a6:	46c0      	nop			; (mov r8, r8)
    10a8:	0000421c 	.word	0x0000421c
    10ac:	40000c00 	.word	0x40000c00
    10b0:	40000400 	.word	0x40000400
    10b4:	42003000 	.word	0x42003000
    10b8:	00000904 	.word	0x00000904
    10bc:	e000e100 	.word	0xe000e100

000010c0 <TC4_Handler>:

void TC4_Handler( void ) {
    TC4->COUNT8.INTFLAG.reg = 0xFF;
    10c0:	22ff      	movs	r2, #255	; 0xff
    TC4->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;

    NVIC_EnableIRQ(TC4_IRQn);
}

void TC4_Handler( void ) {
    10c2:	b510      	push	{r4, lr}
    TC4->COUNT8.INTFLAG.reg = 0xFF;
    10c4:	4b02      	ldr	r3, [pc, #8]	; (10d0 <TC4_Handler+0x10>)
    10c6:	739a      	strb	r2, [r3, #14]
    //pinToggle(TxPo);
    pullSample();
    10c8:	4b02      	ldr	r3, [pc, #8]	; (10d4 <TC4_Handler+0x14>)
    10ca:	4798      	blx	r3
}
    10cc:	bd10      	pop	{r4, pc}
    10ce:	46c0      	nop			; (mov r8, r8)
    10d0:	42003000 	.word	0x42003000
    10d4:	000025f1 	.word	0x000025f1

000010d8 <TC5Init>:

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC5_GCLK_ID) |
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC5;
    10d8:	2180      	movs	r1, #128	; 0x80
    pullSample();
}

void TC5Init() {

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC5_GCLK_ID) |
    10da:	4a0d      	ldr	r2, [pc, #52]	; (1110 <TC5Init+0x38>)
    10dc:	4b0d      	ldr	r3, [pc, #52]	; (1114 <TC5Init+0x3c>)
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC5;
    10de:	0189      	lsls	r1, r1, #6
    pullSample();
}

void TC5Init() {

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC5_GCLK_ID) |
    10e0:	805a      	strh	r2, [r3, #2]
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC5;
    10e2:	4a0d      	ldr	r2, [pc, #52]	; (1118 <TC5Init+0x40>)
    10e4:	6a13      	ldr	r3, [r2, #32]
    10e6:	430b      	orrs	r3, r1
    10e8:	6213      	str	r3, [r2, #32]

    TC5->COUNT8.CTRLA.reg = TC_CTRLA_MODE_COUNT8 |
    10ea:	4b0c      	ldr	r3, [pc, #48]	; (111c <TC5Init+0x44>)
    10ec:	4a0c      	ldr	r2, [pc, #48]	; (1120 <TC5Init+0x48>)

    TC5->COUNT8.INTENSET.reg = TC_INTENSET_OVF;

    TC5->COUNT8.EVCTRL.reg = TC_EVCTRL_OVFEO;

    TC5->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
    10ee:	2102      	movs	r1, #2
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC5;

    TC5->COUNT8.CTRLA.reg = TC_CTRLA_MODE_COUNT8 |
    10f0:	801a      	strh	r2, [r3, #0]
                            TC_CTRLA_PRESCALER_DIV16;

    u16_t logSpeed = 20; //Hz
    u8_t PER_Reg = (long)((32768/16) / logSpeed);

    TC5->COUNT8.PER.reg = PER_Reg;
    10f2:	2266      	movs	r2, #102	; 0x66
    10f4:	751a      	strb	r2, [r3, #20]

    TC5->COUNT8.INTENSET.reg = TC_INTENSET_OVF;
    10f6:	3a65      	subs	r2, #101	; 0x65
    10f8:	735a      	strb	r2, [r3, #13]

    TC5->COUNT8.EVCTRL.reg = TC_EVCTRL_OVFEO;
    10fa:	32ff      	adds	r2, #255	; 0xff
    10fc:	815a      	strh	r2, [r3, #10]

    TC5->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
    10fe:	881a      	ldrh	r2, [r3, #0]
    1100:	430a      	orrs	r2, r1
    1102:	801a      	strh	r2, [r3, #0]
    1104:	2280      	movs	r2, #128	; 0x80
    1106:	4b07      	ldr	r3, [pc, #28]	; (1124 <TC5Init+0x4c>)
    1108:	0352      	lsls	r2, r2, #13
    110a:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(TC5_IRQn);
}
    110c:	4770      	bx	lr
    110e:	46c0      	nop			; (mov r8, r8)
    1110:	0000421c 	.word	0x0000421c
    1114:	40000c00 	.word	0x40000c00
    1118:	40000400 	.word	0x40000400
    111c:	42003400 	.word	0x42003400
    1120:	00000c04 	.word	0x00000c04
    1124:	e000e100 	.word	0xe000e100

00001128 <TC5_Handler>:

void TC5_Handler( void ) {
    TC5->COUNT8.INTFLAG.reg = 0xFF;
    1128:	22ff      	movs	r2, #255	; 0xff
    112a:	4b03      	ldr	r3, [pc, #12]	; (1138 <TC5_Handler+0x10>)
    112c:	739a      	strb	r2, [r3, #14]
    

    writeLog = true;
    112e:	4b03      	ldr	r3, [pc, #12]	; (113c <TC5_Handler+0x14>)
    1130:	3afe      	subs	r2, #254	; 0xfe
    1132:	701a      	strb	r2, [r3, #0]
}
    1134:	4770      	bx	lr
    1136:	46c0      	nop			; (mov r8, r8)
    1138:	42003400 	.word	0x42003400
    113c:	20000522 	.word	0x20000522

00001140 <flight>:
#include <boardDefines.h>

flightState_t flightState;


void flight() {
    1140:	b570      	push	{r4, r5, r6, lr}

    switch(flightState) {
    1142:	4d68      	ldr	r5, [pc, #416]	; (12e4 <flight+0x1a4>)
    1144:	7828      	ldrb	r0, [r5, #0]
    1146:	280a      	cmp	r0, #10
    1148:	d900      	bls.n	114c <flight+0xc>
    114a:	e0b9      	b.n	12c0 <flight+0x180>
    114c:	f002 fe10 	bl	3d70 <__gnu_thumb1_case_uqi>
    1150:	61362306 	.word	0x61362306
    1154:	947bb8b8 	.word	0x947bb8b8
    1158:	b8b8      	.short	0xb8b8
    115a:	a6          	.byte	0xa6
    115b:	00          	.byte	0x00
    case flightStatrup:

        updateGround( );
    115c:	4b62      	ldr	r3, [pc, #392]	; (12e8 <flight+0x1a8>)
    115e:	4798      	blx	r3

        if ((millis() - startupTick) > 10000) {
    1160:	4b62      	ldr	r3, [pc, #392]	; (12ec <flight+0x1ac>)
    1162:	4798      	blx	r3
    1164:	4b62      	ldr	r3, [pc, #392]	; (12f0 <flight+0x1b0>)
    1166:	681b      	ldr	r3, [r3, #0]
    1168:	1ac0      	subs	r0, r0, r3
    116a:	4b62      	ldr	r3, [pc, #392]	; (12f4 <flight+0x1b4>)
    116c:	4298      	cmp	r0, r3
    116e:	d907      	bls.n	1180 <flight+0x40>
            findNewFlightStart( );
    1170:	4b61      	ldr	r3, [pc, #388]	; (12f8 <flight+0x1b8>)
    1172:	4798      	blx	r3
            logFlight( );
    1174:	4b61      	ldr	r3, [pc, #388]	; (12fc <flight+0x1bc>)
    1176:	4798      	blx	r3
            startupJingle();
    1178:	4b61      	ldr	r3, [pc, #388]	; (1300 <flight+0x1c0>)
    117a:	4798      	blx	r3
            flightState = flightTest;
    117c:	230a      	movs	r3, #10
    117e:	e08b      	b.n	1298 <flight+0x158>
            //flightState = flightPad;
            break;
        }

        attemptConnection();
    1180:	4b60      	ldr	r3, [pc, #384]	; (1304 <flight+0x1c4>)
    1182:	4798      	blx	r3

        if (unplugged()) {
    1184:	4b60      	ldr	r3, [pc, #384]	; (1308 <flight+0x1c8>)
    1186:	4798      	blx	r3
    1188:	2800      	cmp	r0, #0
    118a:	d100      	bne.n	118e <flight+0x4e>
    118c:	e098      	b.n	12c0 <flight+0x180>
            flightState = flightIdle;
    118e:	2301      	movs	r3, #1
    1190:	702b      	strb	r3, [r5, #0]
            unpluggedJingle();
    1192:	4b5e      	ldr	r3, [pc, #376]	; (130c <flight+0x1cc>)
    1194:	e093      	b.n	12be <flight+0x17e>
        //TC5->COUNT8.CTRLA.reg = 0;

        //delay_ms(1000);
        //pinToggle(LedPin);

        if (sercom(USART3)->SPI.INTFLAG.bit.RXC == 1) {
    1196:	4b5e      	ldr	r3, [pc, #376]	; (1310 <flight+0x1d0>)
    1198:	7e1b      	ldrb	r3, [r3, #24]
    119a:	075b      	lsls	r3, r3, #29
    119c:	d400      	bmi.n	11a0 <flight+0x60>
    119e:	e09d      	b.n	12dc <flight+0x19c>
            u8_t possibleReset = usartDataIn(USART3);
    11a0:	2003      	movs	r0, #3
    11a2:	4b5c      	ldr	r3, [pc, #368]	; (1314 <flight+0x1d4>)
    11a4:	4798      	blx	r3
            if (possibleReset == 0x52) {
    11a6:	2852      	cmp	r0, #82	; 0x52
    11a8:	d000      	beq.n	11ac <flight+0x6c>
    11aa:	e089      	b.n	12c0 <flight+0x180>
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
    11ac:	f3bf 8f4f 	dsb	sy
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
    11b0:	4a59      	ldr	r2, [pc, #356]	; (1318 <flight+0x1d8>)
    11b2:	4b5a      	ldr	r3, [pc, #360]	; (131c <flight+0x1dc>)
    11b4:	60da      	str	r2, [r3, #12]
    11b6:	f3bf 8f4f 	dsb	sy
    11ba:	e7fe      	b.n	11ba <flight+0x7a>
        *  Accel > 2g & vel > 15ft/s
        *		 or
        *  baro alt > 100ft
        */

        updateGround();
    11bc:	4b4a      	ldr	r3, [pc, #296]	; (12e8 <flight+0x1a8>)
    11be:	4798      	blx	r3

        if (writeLog) {
    11c0:	4b57      	ldr	r3, [pc, #348]	; (1320 <flight+0x1e0>)
    11c2:	781b      	ldrb	r3, [r3, #0]
    11c4:	2b00      	cmp	r3, #0
    11c6:	d003      	beq.n	11d0 <flight+0x90>
}


inline static void pinToggle(Pin p) {
    PORT->Group[p.group].OUTTGL.reg = (1<<p.pin);
    11c8:	2280      	movs	r2, #128	; 0x80
    11ca:	4b56      	ldr	r3, [pc, #344]	; (1324 <flight+0x1e4>)
    11cc:	0352      	lsls	r2, r2, #13
    11ce:	61da      	str	r2, [r3, #28]
            //logSensors( );
            pinToggle(LedPin);
        }


        if ((( velocity > 15) && (accel > 2)) | (altitudeAGL() > 100)) {
    11d0:	4955      	ldr	r1, [pc, #340]	; (1328 <flight+0x1e8>)
    11d2:	4c56      	ldr	r4, [pc, #344]	; (132c <flight+0x1ec>)
    11d4:	2200      	movs	r2, #0
    11d6:	6808      	ldr	r0, [r1, #0]
    11d8:	6849      	ldr	r1, [r1, #4]
    11da:	4b55      	ldr	r3, [pc, #340]	; (1330 <flight+0x1f0>)
    11dc:	47a0      	blx	r4
    11de:	2800      	cmp	r0, #0
    11e0:	d00c      	beq.n	11fc <flight+0xbc>
    11e2:	2380      	movs	r3, #128	; 0x80
    11e4:	4953      	ldr	r1, [pc, #332]	; (1334 <flight+0x1f4>)
    11e6:	2200      	movs	r2, #0
    11e8:	6808      	ldr	r0, [r1, #0]
    11ea:	6849      	ldr	r1, [r1, #4]
    11ec:	05db      	lsls	r3, r3, #23
    11ee:	47a0      	blx	r4
    11f0:	1e44      	subs	r4, r0, #1
    11f2:	41a0      	sbcs	r0, r4
    11f4:	2401      	movs	r4, #1
    11f6:	4240      	negs	r0, r0
    11f8:	4004      	ands	r4, r0
    11fa:	e000      	b.n	11fe <flight+0xbe>
    11fc:	0004      	movs	r4, r0
    11fe:	4b4e      	ldr	r3, [pc, #312]	; (1338 <flight+0x1f8>)
    1200:	4798      	blx	r3
    1202:	2864      	cmp	r0, #100	; 0x64
    1204:	dc01      	bgt.n	120a <flight+0xca>
    1206:	07e3      	lsls	r3, r4, #31
    1208:	d55a      	bpl.n	12c0 <flight+0x180>
            flightState = flightBoost;
    120a:	2303      	movs	r3, #3
            logEvent('L');
    120c:	204c      	movs	r0, #76	; 0x4c
            pinToggle(LedPin);
        }


        if ((( velocity > 15) && (accel > 2)) | (altitudeAGL() > 100)) {
            flightState = flightBoost;
    120e:	702b      	strb	r3, [r5, #0]
    1210:	e02f      	b.n	1272 <flight+0x132>
        /*
        *	boost to fast
        *		while
        *	Accel > 1/4G
        */
        if (writeLog) {
    1212:	4b43      	ldr	r3, [pc, #268]	; (1320 <flight+0x1e0>)
    1214:	781b      	ldrb	r3, [r3, #0]
    1216:	2b00      	cmp	r3, #0
    1218:	d001      	beq.n	121e <flight+0xde>
            logSensors( );
    121a:	4b48      	ldr	r3, [pc, #288]	; (133c <flight+0x1fc>)
    121c:	4798      	blx	r3
        }

        if (velocity < 0) {
    121e:	4942      	ldr	r1, [pc, #264]	; (1328 <flight+0x1e8>)
    1220:	2200      	movs	r2, #0
    1222:	6808      	ldr	r0, [r1, #0]
    1224:	6849      	ldr	r1, [r1, #4]
    1226:	2300      	movs	r3, #0
    1228:	4c45      	ldr	r4, [pc, #276]	; (1340 <flight+0x200>)
    122a:	47a0      	blx	r4
    122c:	2800      	cmp	r0, #0
    122e:	d047      	beq.n	12c0 <flight+0x180>
            flightState = flightDrogue;
    1230:	2306      	movs	r3, #6
    1232:	702b      	strb	r3, [r5, #0]
            igniteDrogue();
    1234:	4b43      	ldr	r3, [pc, #268]	; (1344 <flight+0x204>)
    1236:	4798      	blx	r3
            logEvent('A');
    1238:	2041      	movs	r0, #65	; 0x41
    123a:	4b43      	ldr	r3, [pc, #268]	; (1348 <flight+0x208>)
    123c:	4798      	blx	r3
            beep(100);
    123e:	2064      	movs	r0, #100	; 0x64
    1240:	4b42      	ldr	r3, [pc, #264]	; (134c <flight+0x20c>)
    1242:	4798      	blx	r3
    1244:	e03c      	b.n	12c0 <flight+0x180>


        break;
    case flightDrogue:

        if (writeLog) {
    1246:	4b36      	ldr	r3, [pc, #216]	; (1320 <flight+0x1e0>)
    1248:	781b      	ldrb	r3, [r3, #0]
    124a:	2b00      	cmp	r3, #0
    124c:	d001      	beq.n	1252 <flight+0x112>
            logSensors( );
    124e:	4b3b      	ldr	r3, [pc, #236]	; (133c <flight+0x1fc>)
    1250:	4798      	blx	r3
        }


        if (altitude < deploymentSettings.MAIN_DEPLOY) {
    1252:	4b3f      	ldr	r3, [pc, #252]	; (1350 <flight+0x210>)
    1254:	8b18      	ldrh	r0, [r3, #24]
    1256:	4b3f      	ldr	r3, [pc, #252]	; (1354 <flight+0x214>)
    1258:	4798      	blx	r3
    125a:	4b3f      	ldr	r3, [pc, #252]	; (1358 <flight+0x218>)
    125c:	4c33      	ldr	r4, [pc, #204]	; (132c <flight+0x1ec>)
    125e:	681a      	ldr	r2, [r3, #0]
    1260:	685b      	ldr	r3, [r3, #4]
    1262:	47a0      	blx	r4
    1264:	2800      	cmp	r0, #0
    1266:	d02b      	beq.n	12c0 <flight+0x180>
            flightState = flightMain;
    1268:	2307      	movs	r3, #7
    126a:	702b      	strb	r3, [r5, #0]
            igniteMain();
    126c:	4b3b      	ldr	r3, [pc, #236]	; (135c <flight+0x21c>)
    126e:	4798      	blx	r3
            logEvent('M');
    1270:	204d      	movs	r0, #77	; 0x4d
    1272:	4b35      	ldr	r3, [pc, #212]	; (1348 <flight+0x208>)
    1274:	4798      	blx	r3
    1276:	e023      	b.n	12c0 <flight+0x180>
        }

        break;
    case flightMain:

        if (writeLog) {
    1278:	4b29      	ldr	r3, [pc, #164]	; (1320 <flight+0x1e0>)
    127a:	781b      	ldrb	r3, [r3, #0]
    127c:	2b00      	cmp	r3, #0
    127e:	d001      	beq.n	1284 <flight+0x144>
            logSensors( );
    1280:	4b2e      	ldr	r3, [pc, #184]	; (133c <flight+0x1fc>)
    1282:	4798      	blx	r3
        }

        if (velocity < 5) {
    1284:	4928      	ldr	r1, [pc, #160]	; (1328 <flight+0x1e8>)
    1286:	2200      	movs	r2, #0
    1288:	6808      	ldr	r0, [r1, #0]
    128a:	6849      	ldr	r1, [r1, #4]
    128c:	4b34      	ldr	r3, [pc, #208]	; (1360 <flight+0x220>)
    128e:	4c2c      	ldr	r4, [pc, #176]	; (1340 <flight+0x200>)
    1290:	47a0      	blx	r4
    1292:	2800      	cmp	r0, #0
    1294:	d014      	beq.n	12c0 <flight+0x180>
            flightState = flightLanded;
    1296:	2308      	movs	r3, #8
    1298:	702b      	strb	r3, [r5, #0]
    129a:	e011      	b.n	12c0 <flight+0x180>


        break;
    case flightTest:
        //simple continuity test
        if ( (sample.voltage.senseA + sample.voltage.senseB +sample.voltage.senseC +sample.voltage.senseD) > 200) {
    129c:	4b31      	ldr	r3, [pc, #196]	; (1364 <flight+0x224>)
    129e:	8a5a      	ldrh	r2, [r3, #18]
    12a0:	8a19      	ldrh	r1, [r3, #16]
    12a2:	1889      	adds	r1, r1, r2
    12a4:	8a9a      	ldrh	r2, [r3, #20]
    12a6:	1889      	adds	r1, r1, r2
    12a8:	8ada      	ldrh	r2, [r3, #22]
    12aa:	188b      	adds	r3, r1, r2
    12ac:	2bc8      	cmp	r3, #200	; 0xc8
    12ae:	dd01      	ble.n	12b4 <flight+0x174>
            unpluggedJingle();
    12b0:	4b16      	ldr	r3, [pc, #88]	; (130c <flight+0x1cc>)
    12b2:	4798      	blx	r3
        }

        if (writeLog) {
    12b4:	4b1a      	ldr	r3, [pc, #104]	; (1320 <flight+0x1e0>)
    12b6:	781b      	ldrb	r3, [r3, #0]
    12b8:	2b00      	cmp	r3, #0
    12ba:	d001      	beq.n	12c0 <flight+0x180>
            logSensors( );
    12bc:	4b1f      	ldr	r3, [pc, #124]	; (133c <flight+0x1fc>)
    12be:	4798      	blx	r3
        }

        break;
    }

    if ((flightState != flightStatrup) & ((flightState != flightIdle) & unplugged())) {
    12c0:	2301      	movs	r3, #1
    12c2:	782c      	ldrb	r4, [r5, #0]
    12c4:	42a3      	cmp	r3, r4
    12c6:	41a4      	sbcs	r4, r4
    12c8:	4b0f      	ldr	r3, [pc, #60]	; (1308 <flight+0x1c8>)
    12ca:	4264      	negs	r4, r4
    12cc:	4798      	blx	r3
    12ce:	2800      	cmp	r0, #0
    12d0:	d006      	beq.n	12e0 <flight+0x1a0>
    12d2:	2c00      	cmp	r4, #0
    12d4:	d004      	beq.n	12e0 <flight+0x1a0>
        finishFlight();
    12d6:	4b24      	ldr	r3, [pc, #144]	; (1368 <flight+0x228>)
    12d8:	4798      	blx	r3
    }

    12da:	e001      	b.n	12e0 <flight+0x1a0>
        }

        break;
    }

    if ((flightState != flightStatrup) & ((flightState != flightIdle) & unplugged())) {
    12dc:	4b0a      	ldr	r3, [pc, #40]	; (1308 <flight+0x1c8>)
    12de:	4798      	blx	r3
        finishFlight();
    }

    12e0:	bd70      	pop	{r4, r5, r6, pc}
    12e2:	46c0      	nop			; (mov r8, r8)
    12e4:	200006a0 	.word	0x200006a0
    12e8:	0000136d 	.word	0x0000136d
    12ec:	0000103d 	.word	0x0000103d
    12f0:	20000524 	.word	0x20000524
    12f4:	00002710 	.word	0x00002710
    12f8:	00002531 	.word	0x00002531
    12fc:	0000224d 	.word	0x0000224d
    1300:	00000d9d 	.word	0x00000d9d
    1304:	00002a61 	.word	0x00002a61
    1308:	00000b29 	.word	0x00000b29
    130c:	00000dd5 	.word	0x00000dd5
    1310:	42001400 	.word	0x42001400
    1314:	00002a51 	.word	0x00002a51
    1318:	05fa0004 	.word	0x05fa0004
    131c:	e000ed00 	.word	0xe000ed00
    1320:	20000522 	.word	0x20000522
    1324:	41004400 	.word	0x41004400
    1328:	200006b0 	.word	0x200006b0
    132c:	00003dd9 	.word	0x00003dd9
    1330:	402e0000 	.word	0x402e0000
    1334:	200006a8 	.word	0x200006a8
    1338:	00000af5 	.word	0x00000af5
    133c:	000022fd 	.word	0x000022fd
    1340:	00003db1 	.word	0x00003db1
    1344:	00001691 	.word	0x00001691
    1348:	000022a9 	.word	0x000022a9
    134c:	00000d61 	.word	0x00000d61
    1350:	20000508 	.word	0x20000508
    1354:	00005fb5 	.word	0x00005fb5
    1358:	200006b8 	.word	0x200006b8
    135c:	0000165d 	.word	0x0000165d
    1360:	40140000 	.word	0x40140000
    1364:	200007e8 	.word	0x200007e8
    1368:	00000b5d 	.word	0x00000b5d

0000136c <updateGround>:
#include <util.h>
#include <altimeter.h>

void updateGround(Altimeter *my_altimeter) {
    136c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}



    offsets.gravityOffsetBuffer = offsets.gravityOffsetBuffer * 0.8 + sample.accelZ * 0.2;
    136e:	4c2b      	ldr	r4, [pc, #172]	; (141c <updateGround+0xb0>)
    1370:	4d2b      	ldr	r5, [pc, #172]	; (1420 <updateGround+0xb4>)
    1372:	4a2c      	ldr	r2, [pc, #176]	; (1424 <updateGround+0xb8>)
    1374:	6920      	ldr	r0, [r4, #16]
    1376:	6961      	ldr	r1, [r4, #20]
    1378:	4b2b      	ldr	r3, [pc, #172]	; (1428 <updateGround+0xbc>)
    137a:	47a8      	blx	r5
    137c:	4b2b      	ldr	r3, [pc, #172]	; (142c <updateGround+0xc0>)
    137e:	0006      	movs	r6, r0
    1380:	6a98      	ldr	r0, [r3, #40]	; 0x28
    1382:	4b2b      	ldr	r3, [pc, #172]	; (1430 <updateGround+0xc4>)
    1384:	000f      	movs	r7, r1
    1386:	4798      	blx	r3
    1388:	4a26      	ldr	r2, [pc, #152]	; (1424 <updateGround+0xb8>)
    138a:	4b2a      	ldr	r3, [pc, #168]	; (1434 <updateGround+0xc8>)
    138c:	47a8      	blx	r5
    138e:	0002      	movs	r2, r0
    1390:	000b      	movs	r3, r1
    1392:	0030      	movs	r0, r6
    1394:	0039      	movs	r1, r7
    1396:	4e28      	ldr	r6, [pc, #160]	; (1438 <updateGround+0xcc>)
    1398:	47b0      	blx	r6
    offsets.groundOffsetBuffer = offsets.groundOffsetBuffer * 0.5 + altitude * 0.5;
    139a:	4e28      	ldr	r6, [pc, #160]	; (143c <updateGround+0xd0>)

void updateGround(Altimeter *my_altimeter) {



    offsets.gravityOffsetBuffer = offsets.gravityOffsetBuffer * 0.8 + sample.accelZ * 0.2;
    139c:	6120      	str	r0, [r4, #16]
    139e:	6161      	str	r1, [r4, #20]
    offsets.groundOffsetBuffer = offsets.groundOffsetBuffer * 0.5 + altitude * 0.5;
    13a0:	69e0      	ldr	r0, [r4, #28]
    13a2:	47b0      	blx	r6
    13a4:	2200      	movs	r2, #0
    13a6:	4b26      	ldr	r3, [pc, #152]	; (1440 <updateGround+0xd4>)
    13a8:	47a8      	blx	r5
    13aa:	9000      	str	r0, [sp, #0]
    13ac:	9101      	str	r1, [sp, #4]
    13ae:	4925      	ldr	r1, [pc, #148]	; (1444 <updateGround+0xd8>)
    13b0:	2200      	movs	r2, #0
    13b2:	6808      	ldr	r0, [r1, #0]
    13b4:	6849      	ldr	r1, [r1, #4]
    13b6:	4b22      	ldr	r3, [pc, #136]	; (1440 <updateGround+0xd4>)
    13b8:	47a8      	blx	r5
    13ba:	4f1f      	ldr	r7, [pc, #124]	; (1438 <updateGround+0xcc>)
    13bc:	0002      	movs	r2, r0
    13be:	000b      	movs	r3, r1
    13c0:	9800      	ldr	r0, [sp, #0]
    13c2:	9901      	ldr	r1, [sp, #4]
    13c4:	47b8      	blx	r7
    13c6:	4f20      	ldr	r7, [pc, #128]	; (1448 <updateGround+0xdc>)
    13c8:	47b8      	blx	r7
    13ca:	61e0      	str	r0, [r4, #28]
    offsets.groundTemperatureBuffer = offsets.groundTemperatureBuffer * 0.8 + sample.temperatureCelcus * 0.2;
    13cc:	6a60      	ldr	r0, [r4, #36]	; 0x24
    13ce:	47b0      	blx	r6
    13d0:	4a14      	ldr	r2, [pc, #80]	; (1424 <updateGround+0xb8>)
    13d2:	4b15      	ldr	r3, [pc, #84]	; (1428 <updateGround+0xbc>)
    13d4:	47a8      	blx	r5
    13d6:	4b15      	ldr	r3, [pc, #84]	; (142c <updateGround+0xc0>)
    13d8:	9000      	str	r0, [sp, #0]
    13da:	9101      	str	r1, [sp, #4]
    13dc:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
    13de:	47b0      	blx	r6
    13e0:	4a10      	ldr	r2, [pc, #64]	; (1424 <updateGround+0xb8>)
    13e2:	4b14      	ldr	r3, [pc, #80]	; (1434 <updateGround+0xc8>)
    13e4:	47a8      	blx	r5
    13e6:	4d14      	ldr	r5, [pc, #80]	; (1438 <updateGround+0xcc>)
    13e8:	000b      	movs	r3, r1
    13ea:	0002      	movs	r2, r0
    13ec:	9800      	ldr	r0, [sp, #0]
    13ee:	9901      	ldr	r1, [sp, #4]
    13f0:	47a8      	blx	r5
    13f2:	47b8      	blx	r7

    if ((millis() - offsets.offsetBufferTime) > 2000) {
    13f4:	4d15      	ldr	r5, [pc, #84]	; (144c <updateGround+0xe0>)



    offsets.gravityOffsetBuffer = offsets.gravityOffsetBuffer * 0.8 + sample.accelZ * 0.2;
    offsets.groundOffsetBuffer = offsets.groundOffsetBuffer * 0.5 + altitude * 0.5;
    offsets.groundTemperatureBuffer = offsets.groundTemperatureBuffer * 0.8 + sample.temperatureCelcus * 0.2;
    13f6:	6260      	str	r0, [r4, #36]	; 0x24

    if ((millis() - offsets.offsetBufferTime) > 2000) {
    13f8:	47a8      	blx	r5
    13fa:	6823      	ldr	r3, [r4, #0]
    13fc:	1ac0      	subs	r0, r0, r3
    13fe:	23fa      	movs	r3, #250	; 0xfa
    1400:	00db      	lsls	r3, r3, #3
    1402:	4298      	cmp	r0, r3
    1404:	d909      	bls.n	141a <updateGround+0xae>
        //recursive filter
        offsets.groundOffset = offsets.groundOffsetBuffer;
    1406:	69e3      	ldr	r3, [r4, #28]
    1408:	61a3      	str	r3, [r4, #24]
        offsets.groundTemperature = offsets.groundTemperatureBuffer;
    140a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    140c:	6223      	str	r3, [r4, #32]
        offsets.gravityOffset = offsets.gravityOffsetBuffer;
    140e:	6922      	ldr	r2, [r4, #16]
    1410:	6963      	ldr	r3, [r4, #20]
    1412:	60a2      	str	r2, [r4, #8]
    1414:	60e3      	str	r3, [r4, #12]
        offsets.offsetBufferTime = millis();
    1416:	47a8      	blx	r5
    1418:	6020      	str	r0, [r4, #0]
    }
}
    141a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    141c:	200004d8 	.word	0x200004d8
    1420:	0000536d 	.word	0x0000536d
    1424:	9999999a 	.word	0x9999999a
    1428:	3fe99999 	.word	0x3fe99999
    142c:	200007e8 	.word	0x200007e8
    1430:	000060a9 	.word	0x000060a9
    1434:	3fc99999 	.word	0x3fc99999
    1438:	000044cd 	.word	0x000044cd
    143c:	00006039 	.word	0x00006039
    1440:	3fe00000 	.word	0x3fe00000
    1444:	200006b8 	.word	0x200006b8
    1448:	00003e89 	.word	0x00003e89
    144c:	0000103d 	.word	0x0000103d

00001450 <isItPointingUp>:

void isItPointingUp() {
    1450:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    u8_t i;

    double pointingUpBuffer;

    pointingUpBuffer = sample.accelZ;
    1452:	4f25      	ldr	r7, [pc, #148]	; (14e8 <isItPointingUp+0x98>)
    1454:	4b25      	ldr	r3, [pc, #148]	; (14ec <isItPointingUp+0x9c>)
    1456:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    1458:	4798      	blx	r3
    145a:	260a      	movs	r6, #10
    145c:	0004      	movs	r4, r0
    145e:	000d      	movs	r5, r1
    1460:	9701      	str	r7, [sp, #4]

    for ( i = 0; i < 10 ; ++i ) {
        delay_ms(10);
    1462:	200a      	movs	r0, #10
    1464:	4b22      	ldr	r3, [pc, #136]	; (14f0 <isItPointingUp+0xa0>)
    1466:	4798      	blx	r3
        sampleTick();
    1468:	4b22      	ldr	r3, [pc, #136]	; (14f4 <isItPointingUp+0xa4>)
    146a:	4798      	blx	r3
        pointingUpBuffer = pointingUpBuffer * 0.8 + sample.accelZ * 0.2;
    146c:	4a22      	ldr	r2, [pc, #136]	; (14f8 <isItPointingUp+0xa8>)
    146e:	4b23      	ldr	r3, [pc, #140]	; (14fc <isItPointingUp+0xac>)
    1470:	0020      	movs	r0, r4
    1472:	0029      	movs	r1, r5
    1474:	4c22      	ldr	r4, [pc, #136]	; (1500 <isItPointingUp+0xb0>)
    1476:	47a0      	blx	r4
    1478:	0004      	movs	r4, r0
    147a:	000d      	movs	r5, r1
    147c:	9b01      	ldr	r3, [sp, #4]
    147e:	3e01      	subs	r6, #1
    1480:	6a98      	ldr	r0, [r3, #40]	; 0x28
    1482:	4b1a      	ldr	r3, [pc, #104]	; (14ec <isItPointingUp+0x9c>)
    1484:	4798      	blx	r3
    1486:	4a1c      	ldr	r2, [pc, #112]	; (14f8 <isItPointingUp+0xa8>)
    1488:	4b1e      	ldr	r3, [pc, #120]	; (1504 <isItPointingUp+0xb4>)
    148a:	4f1d      	ldr	r7, [pc, #116]	; (1500 <isItPointingUp+0xb0>)
    148c:	47b8      	blx	r7
    148e:	0022      	movs	r2, r4
    1490:	002b      	movs	r3, r5
    1492:	4c1d      	ldr	r4, [pc, #116]	; (1508 <isItPointingUp+0xb8>)
    1494:	47a0      	blx	r4
    1496:	b2f6      	uxtb	r6, r6
    1498:	0004      	movs	r4, r0
    149a:	000d      	movs	r5, r1

    double pointingUpBuffer;

    pointingUpBuffer = sample.accelZ;

    for ( i = 0; i < 10 ; ++i ) {
    149c:	2e00      	cmp	r6, #0
    149e:	d1e0      	bne.n	1462 <isItPointingUp+0x12>
        delay_ms(10);
        sampleTick();
        pointingUpBuffer = pointingUpBuffer * 0.8 + sample.accelZ * 0.2;
    }
    if ((pointingUpBuffer > 0.9) & (pointingUpBuffer <1.1)) {
    14a0:	4e1a      	ldr	r6, [pc, #104]	; (150c <isItPointingUp+0xbc>)
    14a2:	4a1b      	ldr	r2, [pc, #108]	; (1510 <isItPointingUp+0xc0>)
    14a4:	4b1b      	ldr	r3, [pc, #108]	; (1514 <isItPointingUp+0xc4>)
    14a6:	47b0      	blx	r6
    14a8:	0037      	movs	r7, r6
    14aa:	4e1b      	ldr	r6, [pc, #108]	; (1518 <isItPointingUp+0xc8>)
    14ac:	2800      	cmp	r0, #0
    14ae:	d007      	beq.n	14c0 <isItPointingUp+0x70>
    14b0:	4a11      	ldr	r2, [pc, #68]	; (14f8 <isItPointingUp+0xa8>)
    14b2:	4b1a      	ldr	r3, [pc, #104]	; (151c <isItPointingUp+0xcc>)
    14b4:	0020      	movs	r0, r4
    14b6:	0029      	movs	r1, r5
    14b8:	47b0      	blx	r6
        altimeter.pointingUp = true;
    14ba:	2201      	movs	r2, #1
    for ( i = 0; i < 10 ; ++i ) {
        delay_ms(10);
        sampleTick();
        pointingUpBuffer = pointingUpBuffer * 0.8 + sample.accelZ * 0.2;
    }
    if ((pointingUpBuffer > 0.9) & (pointingUpBuffer <1.1)) {
    14bc:	2800      	cmp	r0, #0
    14be:	d10e      	bne.n	14de <isItPointingUp+0x8e>
        altimeter.pointingUp = true;
    } else if ((pointingUpBuffer < -0.9) & (pointingUpBuffer > -1.1)) {
    14c0:	4a13      	ldr	r2, [pc, #76]	; (1510 <isItPointingUp+0xc0>)
    14c2:	4b17      	ldr	r3, [pc, #92]	; (1520 <isItPointingUp+0xd0>)
    14c4:	0020      	movs	r0, r4
    14c6:	0029      	movs	r1, r5
    14c8:	47b0      	blx	r6
    14ca:	2800      	cmp	r0, #0
    14cc:	d00a      	beq.n	14e4 <isItPointingUp+0x94>
    14ce:	4a0a      	ldr	r2, [pc, #40]	; (14f8 <isItPointingUp+0xa8>)
    14d0:	4b14      	ldr	r3, [pc, #80]	; (1524 <isItPointingUp+0xd4>)
    14d2:	0020      	movs	r0, r4
    14d4:	0029      	movs	r1, r5
    14d6:	47b8      	blx	r7
    14d8:	2800      	cmp	r0, #0
    14da:	d003      	beq.n	14e4 <isItPointingUp+0x94>
        altimeter.pointingUp = false;
    14dc:	2200      	movs	r2, #0
    14de:	4b12      	ldr	r3, [pc, #72]	; (1528 <isItPointingUp+0xd8>)
    14e0:	731a      	strb	r2, [r3, #12]

        }

    }

    14e2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    14e4:	e7fe      	b.n	14e4 <isItPointingUp+0x94>
    14e6:	46c0      	nop			; (mov r8, r8)
    14e8:	200007e8 	.word	0x200007e8
    14ec:	000060a9 	.word	0x000060a9
    14f0:	00000ff1 	.word	0x00000ff1
    14f4:	000025fd 	.word	0x000025fd
    14f8:	9999999a 	.word	0x9999999a
    14fc:	3fe99999 	.word	0x3fe99999
    1500:	0000536d 	.word	0x0000536d
    1504:	3fc99999 	.word	0x3fc99999
    1508:	000044cd 	.word	0x000044cd
    150c:	00003dd9 	.word	0x00003dd9
    1510:	cccccccd 	.word	0xcccccccd
    1514:	3feccccc 	.word	0x3feccccc
    1518:	00003db1 	.word	0x00003db1
    151c:	3ff19999 	.word	0x3ff19999
    1520:	bfeccccc 	.word	0xbfeccccc
    1524:	bff19999 	.word	0xbff19999
    1528:	20000528 	.word	0x20000528

0000152c <igniterTick>:
#include <util.h>
#include <boardDefines.h>


void igniterTick() {
    152c:	b510      	push	{r4, lr}

    if (charges.igniterAHot) {
    152e:	4c23      	ldr	r4, [pc, #140]	; (15bc <igniterTick+0x90>)
    1530:	7823      	ldrb	r3, [r4, #0]
    1532:	2b00      	cmp	r3, #0
    1534:	d00d      	beq.n	1552 <igniterTick+0x26>
        if ((millis() - charges.igniterATick) > 2000) {
    1536:	4b22      	ldr	r3, [pc, #136]	; (15c0 <igniterTick+0x94>)
    1538:	4798      	blx	r3
    153a:	6863      	ldr	r3, [r4, #4]
    153c:	1ac0      	subs	r0, r0, r3
    153e:	23fa      	movs	r3, #250	; 0xfa
    1540:	00db      	lsls	r3, r3, #3
    1542:	4298      	cmp	r0, r3
    1544:	d905      	bls.n	1552 <igniterTick+0x26>
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    1546:	2280      	movs	r2, #128	; 0x80
    1548:	4b1e      	ldr	r3, [pc, #120]	; (15c4 <igniterTick+0x98>)
    154a:	0412      	lsls	r2, r2, #16
    154c:	601a      	str	r2, [r3, #0]
            pinLow(fireAPin);
            charges.igniterAHot = false;
    154e:	2300      	movs	r3, #0
    1550:	7023      	strb	r3, [r4, #0]
        }
    }

    if (charges.igniterBHot) {
    1552:	7a23      	ldrb	r3, [r4, #8]
    1554:	2b00      	cmp	r3, #0
    1556:	d00d      	beq.n	1574 <igniterTick+0x48>
        if ((millis() - charges.igniterBTick) > 2000) {
    1558:	4b19      	ldr	r3, [pc, #100]	; (15c0 <igniterTick+0x94>)
    155a:	4798      	blx	r3
    155c:	68e3      	ldr	r3, [r4, #12]
    155e:	1ac0      	subs	r0, r0, r3
    1560:	23fa      	movs	r3, #250	; 0xfa
    1562:	00db      	lsls	r3, r3, #3
    1564:	4298      	cmp	r0, r3
    1566:	d905      	bls.n	1574 <igniterTick+0x48>
    1568:	2280      	movs	r2, #128	; 0x80
    156a:	4b16      	ldr	r3, [pc, #88]	; (15c4 <igniterTick+0x98>)
    156c:	03d2      	lsls	r2, r2, #15
    156e:	601a      	str	r2, [r3, #0]
            pinLow(fireBPin);
            charges.igniterBHot = false;
    1570:	2300      	movs	r3, #0
    1572:	7223      	strb	r3, [r4, #8]
        }
    }

    if (charges.igniterCHot) {
    1574:	7c23      	ldrb	r3, [r4, #16]
    1576:	2b00      	cmp	r3, #0
    1578:	d00d      	beq.n	1596 <igniterTick+0x6a>
        if ((millis() - charges.igniterCTick) > 2000) {
    157a:	4b11      	ldr	r3, [pc, #68]	; (15c0 <igniterTick+0x94>)
    157c:	4798      	blx	r3
    157e:	6963      	ldr	r3, [r4, #20]
    1580:	1ac0      	subs	r0, r0, r3
    1582:	23fa      	movs	r3, #250	; 0xfa
    1584:	00db      	lsls	r3, r3, #3
    1586:	4298      	cmp	r0, r3
    1588:	d905      	bls.n	1596 <igniterTick+0x6a>
    158a:	2280      	movs	r2, #128	; 0x80
    158c:	4b0e      	ldr	r3, [pc, #56]	; (15c8 <igniterTick+0x9c>)
    158e:	0492      	lsls	r2, r2, #18
    1590:	615a      	str	r2, [r3, #20]
            pinLow(fireCPin);
            charges.igniterCHot = false;
    1592:	2300      	movs	r3, #0
    1594:	7423      	strb	r3, [r4, #16]
        }
    }

    if (charges.igniterDHot) {
    1596:	7e23      	ldrb	r3, [r4, #24]
    1598:	2b00      	cmp	r3, #0
    159a:	d00d      	beq.n	15b8 <igniterTick+0x8c>
        if ((millis() - charges.igniterDTick) > 2000) {
    159c:	4b08      	ldr	r3, [pc, #32]	; (15c0 <igniterTick+0x94>)
    159e:	4798      	blx	r3
    15a0:	69e3      	ldr	r3, [r4, #28]
    15a2:	1ac0      	subs	r0, r0, r3
    15a4:	23fa      	movs	r3, #250	; 0xfa
    15a6:	00db      	lsls	r3, r3, #3
    15a8:	4298      	cmp	r0, r3
    15aa:	d905      	bls.n	15b8 <igniterTick+0x8c>
    15ac:	2280      	movs	r2, #128	; 0x80
    15ae:	4b06      	ldr	r3, [pc, #24]	; (15c8 <igniterTick+0x9c>)
    15b0:	0452      	lsls	r2, r2, #17
    15b2:	615a      	str	r2, [r3, #20]
            pinLow(fireDPin);
            charges.igniterDHot = false;
    15b4:	2300      	movs	r3, #0
    15b6:	7623      	strb	r3, [r4, #24]
        }
    }
}
    15b8:	bd10      	pop	{r4, pc}
    15ba:	46c0      	nop			; (mov r8, r8)
    15bc:	20000680 	.word	0x20000680
    15c0:	0000103d 	.word	0x0000103d
    15c4:	41004494 	.word	0x41004494
    15c8:	41004400 	.word	0x41004400

000015cc <lightIgniterA>:
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    15cc:	2280      	movs	r2, #128	; 0x80
    15ce:	4b05      	ldr	r3, [pc, #20]	; (15e4 <lightIgniterA+0x18>)
    15d0:	0412      	lsls	r2, r2, #16
    if ((charges.igniterDDrogue = true)) {
        lightIgniterD();
    }
}

void lightIgniterA() {
    15d2:	b510      	push	{r4, lr}
    15d4:	601a      	str	r2, [r3, #0]
    pinHigh(fireAPin);
    charges.igniterAHot = true;
    15d6:	2301      	movs	r3, #1
    15d8:	4c03      	ldr	r4, [pc, #12]	; (15e8 <lightIgniterA+0x1c>)
    15da:	7023      	strb	r3, [r4, #0]
    charges.igniterATick = millis();
    15dc:	4b03      	ldr	r3, [pc, #12]	; (15ec <lightIgniterA+0x20>)
    15de:	4798      	blx	r3
    15e0:	6060      	str	r0, [r4, #4]
}
    15e2:	bd10      	pop	{r4, pc}
    15e4:	41004498 	.word	0x41004498
    15e8:	20000680 	.word	0x20000680
    15ec:	0000103d 	.word	0x0000103d

000015f0 <lightIgniterB>:
    15f0:	2280      	movs	r2, #128	; 0x80
    15f2:	4b05      	ldr	r3, [pc, #20]	; (1608 <lightIgniterB+0x18>)
    15f4:	03d2      	lsls	r2, r2, #15

void lightIgniterB() {
    15f6:	b510      	push	{r4, lr}
    15f8:	601a      	str	r2, [r3, #0]
    pinHigh(fireBPin);
    charges.igniterBHot = true;
    15fa:	2301      	movs	r3, #1
    15fc:	4c03      	ldr	r4, [pc, #12]	; (160c <lightIgniterB+0x1c>)
    15fe:	7223      	strb	r3, [r4, #8]
    charges.igniterBTick = millis();
    1600:	4b03      	ldr	r3, [pc, #12]	; (1610 <lightIgniterB+0x20>)
    1602:	4798      	blx	r3
    1604:	60e0      	str	r0, [r4, #12]
}
    1606:	bd10      	pop	{r4, pc}
    1608:	41004498 	.word	0x41004498
    160c:	20000680 	.word	0x20000680
    1610:	0000103d 	.word	0x0000103d

00001614 <lightIgniterC>:
    1614:	2280      	movs	r2, #128	; 0x80
    1616:	4b05      	ldr	r3, [pc, #20]	; (162c <lightIgniterC+0x18>)
    1618:	0492      	lsls	r2, r2, #18

void lightIgniterC() {
    161a:	b510      	push	{r4, lr}
    161c:	619a      	str	r2, [r3, #24]
    pinHigh(fireCPin);
    charges.igniterCHot = true;
    161e:	2301      	movs	r3, #1
    1620:	4c03      	ldr	r4, [pc, #12]	; (1630 <lightIgniterC+0x1c>)
    1622:	7423      	strb	r3, [r4, #16]
    charges.igniterCTick = millis();
    1624:	4b03      	ldr	r3, [pc, #12]	; (1634 <lightIgniterC+0x20>)
    1626:	4798      	blx	r3
    1628:	6160      	str	r0, [r4, #20]
}
    162a:	bd10      	pop	{r4, pc}
    162c:	41004400 	.word	0x41004400
    1630:	20000680 	.word	0x20000680
    1634:	0000103d 	.word	0x0000103d

00001638 <lightIgniterD>:
    1638:	2280      	movs	r2, #128	; 0x80
    163a:	4b05      	ldr	r3, [pc, #20]	; (1650 <lightIgniterD+0x18>)
    163c:	0452      	lsls	r2, r2, #17

void lightIgniterD() {
    163e:	b510      	push	{r4, lr}
    1640:	619a      	str	r2, [r3, #24]
    pinHigh(fireDPin);
    charges.igniterDHot = true;
    1642:	2301      	movs	r3, #1
    1644:	4c03      	ldr	r4, [pc, #12]	; (1654 <lightIgniterD+0x1c>)
    1646:	7623      	strb	r3, [r4, #24]
    charges.igniterDTick = millis();
    1648:	4b03      	ldr	r3, [pc, #12]	; (1658 <lightIgniterD+0x20>)
    164a:	4798      	blx	r3
    164c:	61e0      	str	r0, [r4, #28]
    164e:	bd10      	pop	{r4, pc}
    1650:	41004400 	.word	0x41004400
    1654:	20000680 	.word	0x20000680
    1658:	0000103d 	.word	0x0000103d

0000165c <igniteMain>:
            charges.igniterDHot = false;
        }
    }
}

void igniteMain() {
    165c:	b570      	push	{r4, r5, r6, lr}

    if ((charges.igniterAMain = true)) {
    165e:	2501      	movs	r5, #1
    1660:	4c06      	ldr	r4, [pc, #24]	; (167c <igniteMain+0x20>)
        lightIgniterA();
    1662:	4b07      	ldr	r3, [pc, #28]	; (1680 <igniteMain+0x24>)
    }
}

void igniteMain() {

    if ((charges.igniterAMain = true)) {
    1664:	7065      	strb	r5, [r4, #1]
        lightIgniterA();
    1666:	4798      	blx	r3
    }
    if ((charges.igniterBMain = true)) {
        lightIgniterB();
    1668:	4b06      	ldr	r3, [pc, #24]	; (1684 <igniteMain+0x28>)
void igniteMain() {

    if ((charges.igniterAMain = true)) {
        lightIgniterA();
    }
    if ((charges.igniterBMain = true)) {
    166a:	7265      	strb	r5, [r4, #9]
        lightIgniterB();
    166c:	4798      	blx	r3
    }
    if ((charges.igniterCMain = true)) {
        lightIgniterC();
    166e:	4b06      	ldr	r3, [pc, #24]	; (1688 <igniteMain+0x2c>)
        lightIgniterA();
    }
    if ((charges.igniterBMain = true)) {
        lightIgniterB();
    }
    if ((charges.igniterCMain = true)) {
    1670:	7465      	strb	r5, [r4, #17]
        lightIgniterC();
    1672:	4798      	blx	r3
    }
    if ((charges.igniterDMain = true)) {
        lightIgniterD();
    1674:	4b05      	ldr	r3, [pc, #20]	; (168c <igniteMain+0x30>)
        lightIgniterB();
    }
    if ((charges.igniterCMain = true)) {
        lightIgniterC();
    }
    if ((charges.igniterDMain = true)) {
    1676:	7665      	strb	r5, [r4, #25]
        lightIgniterD();
    1678:	4798      	blx	r3
    }
}
    167a:	bd70      	pop	{r4, r5, r6, pc}
    167c:	20000680 	.word	0x20000680
    1680:	000015cd 	.word	0x000015cd
    1684:	000015f1 	.word	0x000015f1
    1688:	00001615 	.word	0x00001615
    168c:	00001639 	.word	0x00001639

00001690 <igniteDrogue>:

void igniteDrogue() {
    1690:	b570      	push	{r4, r5, r6, lr}

    if ((charges.igniterADrogue = true)) {
    1692:	2501      	movs	r5, #1
    1694:	4c06      	ldr	r4, [pc, #24]	; (16b0 <igniteDrogue+0x20>)
        lightIgniterA();
    1696:	4b07      	ldr	r3, [pc, #28]	; (16b4 <igniteDrogue+0x24>)
    }
}

void igniteDrogue() {

    if ((charges.igniterADrogue = true)) {
    1698:	70a5      	strb	r5, [r4, #2]
        lightIgniterA();
    169a:	4798      	blx	r3
    }
    if ((charges.igniterBDrogue = true)) {
        lightIgniterB();
    169c:	4b06      	ldr	r3, [pc, #24]	; (16b8 <igniteDrogue+0x28>)
void igniteDrogue() {

    if ((charges.igniterADrogue = true)) {
        lightIgniterA();
    }
    if ((charges.igniterBDrogue = true)) {
    169e:	72a5      	strb	r5, [r4, #10]
        lightIgniterB();
    16a0:	4798      	blx	r3
    }
    if ((charges.igniterCDrogue = true)) {
        lightIgniterC();
    16a2:	4b06      	ldr	r3, [pc, #24]	; (16bc <igniteDrogue+0x2c>)
        lightIgniterA();
    }
    if ((charges.igniterBDrogue = true)) {
        lightIgniterB();
    }
    if ((charges.igniterCDrogue = true)) {
    16a4:	74a5      	strb	r5, [r4, #18]
        lightIgniterC();
    16a6:	4798      	blx	r3
    }
    if ((charges.igniterDDrogue = true)) {
        lightIgniterD();
    16a8:	4b05      	ldr	r3, [pc, #20]	; (16c0 <igniteDrogue+0x30>)
        lightIgniterB();
    }
    if ((charges.igniterCDrogue = true)) {
        lightIgniterC();
    }
    if ((charges.igniterDDrogue = true)) {
    16aa:	76a5      	strb	r5, [r4, #26]
        lightIgniterD();
    16ac:	4798      	blx	r3
    }
}
    16ae:	bd70      	pop	{r4, r5, r6, pc}
    16b0:	20000680 	.word	0x20000680
    16b4:	000015cd 	.word	0x000015cd
    16b8:	000015f1 	.word	0x000015f1
    16bc:	00001615 	.word	0x00001615
    16c0:	00001639 	.word	0x00001639

000016c4 <computeKalmanGains>:
    dt = 0.005;

    /*
     Fill in state transition matrix and its transpose
    */
    phi[0][1]    = dt;
    16c4:	4bdc      	ldr	r3, [pc, #880]	; (1a38 <computeKalmanGains+0x374>)
    16c6:	48dd      	ldr	r0, [pc, #884]	; (1a3c <computeKalmanGains+0x378>)
    16c8:	49dd      	ldr	r1, [pc, #884]	; (1a40 <computeKalmanGains+0x37c>)

double altitude_variance = ALTITUDESIGMA*ALTITUDESIGMA;
double acceleration_variance = ACCELERATIONSIGMA*ACCELERATIONSIGMA;
double model_variance  = MODELSIGMA*MODELSIGMA;

void computeKalmanGains() {
    16ca:	b5f0      	push	{r4, r5, r6, r7, lr}
    dt = 0.005;

    /*
     Fill in state transition matrix and its transpose
    */
    phi[0][1]    = dt;
    16cc:	6098      	str	r0, [r3, #8]
    16ce:	60d9      	str	r1, [r3, #12]
    phi[1][2]    = dt;
    16d0:	6298      	str	r0, [r3, #40]	; 0x28
    16d2:	62d9      	str	r1, [r3, #44]	; 0x2c
    phi[0][2]    = dt*dt/2.0;
    16d4:	48db      	ldr	r0, [pc, #876]	; (1a44 <computeKalmanGains+0x380>)
    16d6:	49dc      	ldr	r1, [pc, #880]	; (1a48 <computeKalmanGains+0x384>)
    16d8:	2200      	movs	r2, #0
    16da:	6118      	str	r0, [r3, #16]
    16dc:	6159      	str	r1, [r3, #20]
    phit[2][0]    = dt*dt/2.0;

    for( i = 0; i <= 2; i++)
        for( j = 0; j <=1; j++) {
            lastkgain[i][j] = .001;
            kgain[i][j] = 1.0;
    16de:	2000      	movs	r0, #0
    16e0:	49da      	ldr	r1, [pc, #872]	; (1a4c <computeKalmanGains+0x388>)
    phit[2][1]    = dt;
    phit[2][0]    = dt*dt/2.0;

    for( i = 0; i <= 2; i++)
        for( j = 0; j <=1; j++) {
            lastkgain[i][j] = .001;
    16e2:	4cdb      	ldr	r4, [pc, #876]	; (1a50 <computeKalmanGains+0x38c>)
    16e4:	468c      	mov	ip, r1
    16e6:	4ddb      	ldr	r5, [pc, #876]	; (1a54 <computeKalmanGains+0x390>)
            kgain[i][j] = 1.0;
    16e8:	49db      	ldr	r1, [pc, #876]	; (1a58 <computeKalmanGains+0x394>)

double altitude_variance = ALTITUDESIGMA*ALTITUDESIGMA;
double acceleration_variance = ACCELERATIONSIGMA*ACCELERATIONSIGMA;
double model_variance  = MODELSIGMA*MODELSIGMA;

void computeKalmanGains() {
    16ea:	b0cd      	sub	sp, #308	; 0x134
    16ec:	ae40      	add	r6, sp, #256	; 0x100
    16ee:	1997      	adds	r7, r2, r6
    16f0:	4666      	mov	r6, ip
    16f2:	1996      	adds	r6, r2, r6
    16f4:	3210      	adds	r2, #16
    phit[2][1]    = dt;
    phit[2][0]    = dt*dt/2.0;

    for( i = 0; i <= 2; i++)
        for( j = 0; j <=1; j++) {
            lastkgain[i][j] = .001;
    16f6:	603c      	str	r4, [r7, #0]
    16f8:	607d      	str	r5, [r7, #4]
            kgain[i][j] = 1.0;
    16fa:	6030      	str	r0, [r6, #0]
    16fc:	6071      	str	r1, [r6, #4]
    phit[2][1]    = dt;
    phit[2][0]    = dt*dt/2.0;

    for( i = 0; i <= 2; i++)
        for( j = 0; j <=1; j++) {
            lastkgain[i][j] = .001;
    16fe:	60bc      	str	r4, [r7, #8]
    1700:	60fd      	str	r5, [r7, #12]
            kgain[i][j] = 1.0;
    1702:	60b0      	str	r0, [r6, #8]
    1704:	60f1      	str	r1, [r6, #12]
    phi[0][2]    = dt*dt/2.0;
    phit[1][0]    = dt;
    phit[2][1]    = dt;
    phit[2][0]    = dt*dt/2.0;

    for( i = 0; i <= 2; i++)
    1706:	2a30      	cmp	r2, #48	; 0x30
    1708:	d1f0      	bne.n	16ec <computeKalmanGains+0x28>

    /* Compute the Kalman gain matrix. */
    while(1) {
        /* Propagate state covariance */

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
    170a:	6819      	ldr	r1, [r3, #0]
    170c:	685a      	ldr	r2, [r3, #4]
    170e:	911a      	str	r1, [sp, #104]	; 0x68
    1710:	921b      	str	r2, [sp, #108]	; 0x6c
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
    1712:	6999      	ldr	r1, [r3, #24]
    1714:	69da      	ldr	r2, [r3, #28]
    1716:	911c      	str	r1, [sp, #112]	; 0x70
    1718:	921d      	str	r2, [sp, #116]	; 0x74
    171a:	6a19      	ldr	r1, [r3, #32]
    171c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    171e:	911e      	str	r1, [sp, #120]	; 0x78
    1720:	921f      	str	r2, [sp, #124]	; 0x7c
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
    1722:	6b19      	ldr	r1, [r3, #48]	; 0x30
    1724:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    1726:	9120      	str	r1, [sp, #128]	; 0x80
    1728:	9221      	str	r2, [sp, #132]	; 0x84
    172a:	6b99      	ldr	r1, [r3, #56]	; 0x38
    172c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    172e:	9122      	str	r1, [sp, #136]	; 0x88
    1730:	9223      	str	r2, [sp, #140]	; 0x8c
    1732:	6c19      	ldr	r1, [r3, #64]	; 0x40
    1734:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    1736:	9124      	str	r1, [sp, #144]	; 0x90
    1738:	9225      	str	r2, [sp, #148]	; 0x94
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
        pestp[2][1] = term[2][0] * phit[0][1] + term[2][1] * phit[1][1] + term[2][2] * phit[2][1];
        pestp[2][2] = term[2][0] * phit[0][2] + term[2][1] * phit[1][2] + term[2][2] * phit[2][2];

        pestp[2][2] = pestp[2][2] + model_variance;
    173a:	6c99      	ldr	r1, [r3, #72]	; 0x48
    173c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    173e:	913a      	str	r1, [sp, #232]	; 0xe8
    1740:	923b      	str	r2, [sp, #236]	; 0xec
        /*
          Calculate Kalman Gain
        */
        det = (pestp[0][0]+altitude_variance)*(pestp[2][2] + acceleration_variance) - pestp[2][0] * pestp[0][2];
    1742:	6d19      	ldr	r1, [r3, #80]	; 0x50
    1744:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    1746:	6ddc      	ldr	r4, [r3, #92]	; 0x5c
    1748:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    174a:	933e      	str	r3, [sp, #248]	; 0xf8
    174c:	943f      	str	r4, [sp, #252]	; 0xfc
    174e:	2300      	movs	r3, #0
    1750:	4cc2      	ldr	r4, [pc, #776]	; (1a5c <computeKalmanGains+0x398>)
    1752:	913c      	str	r1, [sp, #240]	; 0xf0
    1754:	923d      	str	r2, [sp, #244]	; 0xf4
    1756:	9302      	str	r3, [sp, #8]
    1758:	9403      	str	r4, [sp, #12]
    175a:	2300      	movs	r3, #0
    175c:	2400      	movs	r4, #0
    175e:	9310      	str	r3, [sp, #64]	; 0x40
    1760:	9411      	str	r4, [sp, #68]	; 0x44
    1762:	9300      	str	r3, [sp, #0]
    1764:	9401      	str	r4, [sp, #4]
    1766:	9304      	str	r3, [sp, #16]
    1768:	9405      	str	r4, [sp, #20]
    176a:	2300      	movs	r3, #0
    176c:	4cbb      	ldr	r4, [pc, #748]	; (1a5c <computeKalmanGains+0x398>)
    176e:	930e      	str	r3, [sp, #56]	; 0x38
    1770:	940f      	str	r4, [sp, #60]	; 0x3c
    1772:	2300      	movs	r3, #0
    1774:	2400      	movs	r4, #0
    1776:	9308      	str	r3, [sp, #32]
    1778:	9409      	str	r4, [sp, #36]	; 0x24
    177a:	930c      	str	r3, [sp, #48]	; 0x30
    177c:	940d      	str	r4, [sp, #52]	; 0x34
    177e:	930a      	str	r3, [sp, #40]	; 0x28
    1780:	940b      	str	r4, [sp, #44]	; 0x2c
    1782:	2480      	movs	r4, #128	; 0x80
    1784:	2300      	movs	r3, #0
    1786:	05e4      	lsls	r4, r4, #23
    1788:	9306      	str	r3, [sp, #24]
    178a:	9407      	str	r4, [sp, #28]
    178c:	2300      	movs	r3, #0
    178e:	9338      	str	r3, [sp, #224]	; 0xe0

    /* Compute the Kalman gain matrix. */
    while(1) {
        /* Propagate state covariance */

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
    1790:	4db3      	ldr	r5, [pc, #716]	; (1a60 <computeKalmanGains+0x39c>)
    1792:	9a06      	ldr	r2, [sp, #24]
    1794:	9b07      	ldr	r3, [sp, #28]
    1796:	981a      	ldr	r0, [sp, #104]	; 0x68
    1798:	991b      	ldr	r1, [sp, #108]	; 0x6c
    179a:	47a8      	blx	r5
    179c:	4aa7      	ldr	r2, [pc, #668]	; (1a3c <computeKalmanGains+0x378>)
    179e:	0006      	movs	r6, r0
    17a0:	000f      	movs	r7, r1
    17a2:	9808      	ldr	r0, [sp, #32]
    17a4:	9909      	ldr	r1, [sp, #36]	; 0x24
    17a6:	4ba6      	ldr	r3, [pc, #664]	; (1a40 <computeKalmanGains+0x37c>)
    17a8:	47a8      	blx	r5
    17aa:	4cae      	ldr	r4, [pc, #696]	; (1a64 <computeKalmanGains+0x3a0>)
    17ac:	0002      	movs	r2, r0
    17ae:	000b      	movs	r3, r1
    17b0:	0030      	movs	r0, r6
    17b2:	0039      	movs	r1, r7
    17b4:	47a0      	blx	r4
    17b6:	4aa3      	ldr	r2, [pc, #652]	; (1a44 <computeKalmanGains+0x380>)
    17b8:	0006      	movs	r6, r0
    17ba:	000f      	movs	r7, r1
    17bc:	9800      	ldr	r0, [sp, #0]
    17be:	9901      	ldr	r1, [sp, #4]
    17c0:	4ba1      	ldr	r3, [pc, #644]	; (1a48 <computeKalmanGains+0x384>)
    17c2:	47a8      	blx	r5
    17c4:	0002      	movs	r2, r0
    17c6:	000b      	movs	r3, r1
    17c8:	0030      	movs	r0, r6
    17ca:	0039      	movs	r1, r7
    17cc:	47a0      	blx	r4
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
    17ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    17d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c

    /* Compute the Kalman gain matrix. */
    while(1) {
        /* Propagate state covariance */

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
    17d2:	9016      	str	r0, [sp, #88]	; 0x58
    17d4:	9117      	str	r1, [sp, #92]	; 0x5c
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
    17d6:	981a      	ldr	r0, [sp, #104]	; 0x68
    17d8:	991b      	ldr	r1, [sp, #108]	; 0x6c
    17da:	47a8      	blx	r5
    17dc:	4a97      	ldr	r2, [pc, #604]	; (1a3c <computeKalmanGains+0x378>)
    17de:	0006      	movs	r6, r0
    17e0:	000f      	movs	r7, r1
    17e2:	980e      	ldr	r0, [sp, #56]	; 0x38
    17e4:	990f      	ldr	r1, [sp, #60]	; 0x3c
    17e6:	4b96      	ldr	r3, [pc, #600]	; (1a40 <computeKalmanGains+0x37c>)
    17e8:	47a8      	blx	r5
    17ea:	0002      	movs	r2, r0
    17ec:	000b      	movs	r3, r1
    17ee:	0030      	movs	r0, r6
    17f0:	0039      	movs	r1, r7
    17f2:	47a0      	blx	r4
    17f4:	4a93      	ldr	r2, [pc, #588]	; (1a44 <computeKalmanGains+0x380>)
    17f6:	0006      	movs	r6, r0
    17f8:	000f      	movs	r7, r1
    17fa:	9810      	ldr	r0, [sp, #64]	; 0x40
    17fc:	9911      	ldr	r1, [sp, #68]	; 0x44
    17fe:	4b92      	ldr	r3, [pc, #584]	; (1a48 <computeKalmanGains+0x384>)
    1800:	47a8      	blx	r5
    1802:	0002      	movs	r2, r0
    1804:	000b      	movs	r3, r1
    1806:	0030      	movs	r0, r6
    1808:	0039      	movs	r1, r7
    180a:	47a0      	blx	r4
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
    180c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    180e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    /* Compute the Kalman gain matrix. */
    while(1) {
        /* Propagate state covariance */

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
    1810:	9012      	str	r0, [sp, #72]	; 0x48
    1812:	9113      	str	r1, [sp, #76]	; 0x4c
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
    1814:	981a      	ldr	r0, [sp, #104]	; 0x68
    1816:	991b      	ldr	r1, [sp, #108]	; 0x6c
    1818:	47a8      	blx	r5
    181a:	4a88      	ldr	r2, [pc, #544]	; (1a3c <computeKalmanGains+0x378>)
    181c:	0006      	movs	r6, r0
    181e:	000f      	movs	r7, r1
    1820:	9804      	ldr	r0, [sp, #16]
    1822:	9905      	ldr	r1, [sp, #20]
    1824:	4b86      	ldr	r3, [pc, #536]	; (1a40 <computeKalmanGains+0x37c>)
    1826:	47a8      	blx	r5
    1828:	0002      	movs	r2, r0
    182a:	000b      	movs	r3, r1
    182c:	0030      	movs	r0, r6
    182e:	0039      	movs	r1, r7
    1830:	47a0      	blx	r4
    1832:	4a84      	ldr	r2, [pc, #528]	; (1a44 <computeKalmanGains+0x380>)
    1834:	0006      	movs	r6, r0
    1836:	000f      	movs	r7, r1
    1838:	9802      	ldr	r0, [sp, #8]
    183a:	9903      	ldr	r1, [sp, #12]
    183c:	4b82      	ldr	r3, [pc, #520]	; (1a48 <computeKalmanGains+0x384>)
    183e:	47a8      	blx	r5
    1840:	0002      	movs	r2, r0
    1842:	000b      	movs	r3, r1
    1844:	0030      	movs	r0, r6
    1846:	0039      	movs	r1, r7
    1848:	47a0      	blx	r4
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
    184a:	9a06      	ldr	r2, [sp, #24]
    184c:	9b07      	ldr	r3, [sp, #28]
    while(1) {
        /* Propagate state covariance */

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
    184e:	9014      	str	r0, [sp, #80]	; 0x50
    1850:	9115      	str	r1, [sp, #84]	; 0x54
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
    1852:	981c      	ldr	r0, [sp, #112]	; 0x70
    1854:	991d      	ldr	r1, [sp, #116]	; 0x74
    1856:	47a8      	blx	r5
    1858:	9a08      	ldr	r2, [sp, #32]
    185a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    185c:	0006      	movs	r6, r0
    185e:	000f      	movs	r7, r1
    1860:	981e      	ldr	r0, [sp, #120]	; 0x78
    1862:	991f      	ldr	r1, [sp, #124]	; 0x7c
    1864:	47a8      	blx	r5
    1866:	0002      	movs	r2, r0
    1868:	000b      	movs	r3, r1
    186a:	0030      	movs	r0, r6
    186c:	0039      	movs	r1, r7
    186e:	47a0      	blx	r4
    1870:	4a72      	ldr	r2, [pc, #456]	; (1a3c <computeKalmanGains+0x378>)
    1872:	0006      	movs	r6, r0
    1874:	000f      	movs	r7, r1
    1876:	9800      	ldr	r0, [sp, #0]
    1878:	9901      	ldr	r1, [sp, #4]
    187a:	4b71      	ldr	r3, [pc, #452]	; (1a40 <computeKalmanGains+0x37c>)
    187c:	47a8      	blx	r5
    187e:	0002      	movs	r2, r0
    1880:	000b      	movs	r3, r1
    1882:	0030      	movs	r0, r6
    1884:	0039      	movs	r1, r7
    1886:	47a0      	blx	r4
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
    1888:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    188a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
        /* Propagate state covariance */

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
    188c:	9018      	str	r0, [sp, #96]	; 0x60
    188e:	9119      	str	r1, [sp, #100]	; 0x64
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
    1890:	981c      	ldr	r0, [sp, #112]	; 0x70
    1892:	991d      	ldr	r1, [sp, #116]	; 0x74
    1894:	47a8      	blx	r5
    1896:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    1898:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    189a:	0006      	movs	r6, r0
    189c:	000f      	movs	r7, r1
    189e:	981e      	ldr	r0, [sp, #120]	; 0x78
    18a0:	991f      	ldr	r1, [sp, #124]	; 0x7c
    18a2:	47a8      	blx	r5
    18a4:	0002      	movs	r2, r0
    18a6:	000b      	movs	r3, r1
    18a8:	0030      	movs	r0, r6
    18aa:	0039      	movs	r1, r7
    18ac:	47a0      	blx	r4
    18ae:	4a63      	ldr	r2, [pc, #396]	; (1a3c <computeKalmanGains+0x378>)
    18b0:	0006      	movs	r6, r0
    18b2:	000f      	movs	r7, r1
    18b4:	9810      	ldr	r0, [sp, #64]	; 0x40
    18b6:	9911      	ldr	r1, [sp, #68]	; 0x44
    18b8:	4b61      	ldr	r3, [pc, #388]	; (1a40 <computeKalmanGains+0x37c>)
    18ba:	47a8      	blx	r5
    18bc:	0002      	movs	r2, r0
    18be:	000b      	movs	r3, r1
    18c0:	0030      	movs	r0, r6
    18c2:	0039      	movs	r1, r7
    18c4:	47a0      	blx	r4
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
    18c6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    18c8:	9b0d      	ldr	r3, [sp, #52]	; 0x34

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
    18ca:	9026      	str	r0, [sp, #152]	; 0x98
    18cc:	9127      	str	r1, [sp, #156]	; 0x9c
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
    18ce:	981c      	ldr	r0, [sp, #112]	; 0x70
    18d0:	991d      	ldr	r1, [sp, #116]	; 0x74
    18d2:	47a8      	blx	r5
    18d4:	9a04      	ldr	r2, [sp, #16]
    18d6:	9b05      	ldr	r3, [sp, #20]
    18d8:	0006      	movs	r6, r0
    18da:	000f      	movs	r7, r1
    18dc:	981e      	ldr	r0, [sp, #120]	; 0x78
    18de:	991f      	ldr	r1, [sp, #124]	; 0x7c
    18e0:	47a8      	blx	r5
    18e2:	0002      	movs	r2, r0
    18e4:	000b      	movs	r3, r1
    18e6:	0030      	movs	r0, r6
    18e8:	0039      	movs	r1, r7
    18ea:	47a0      	blx	r4
    18ec:	4a53      	ldr	r2, [pc, #332]	; (1a3c <computeKalmanGains+0x378>)
    18ee:	0006      	movs	r6, r0
    18f0:	000f      	movs	r7, r1
    18f2:	9802      	ldr	r0, [sp, #8]
    18f4:	9903      	ldr	r1, [sp, #12]
    18f6:	4b52      	ldr	r3, [pc, #328]	; (1a40 <computeKalmanGains+0x37c>)
    18f8:	47a8      	blx	r5
    18fa:	0002      	movs	r2, r0
    18fc:	000b      	movs	r3, r1
    18fe:	0030      	movs	r0, r6
    1900:	0039      	movs	r1, r7
    1902:	47a0      	blx	r4
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
    1904:	9a06      	ldr	r2, [sp, #24]
    1906:	9b07      	ldr	r3, [sp, #28]
        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
    1908:	9028      	str	r0, [sp, #160]	; 0xa0
    190a:	9129      	str	r1, [sp, #164]	; 0xa4
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
    190c:	9820      	ldr	r0, [sp, #128]	; 0x80
    190e:	9921      	ldr	r1, [sp, #132]	; 0x84
    1910:	47a8      	blx	r5
    1912:	9a08      	ldr	r2, [sp, #32]
    1914:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1916:	0006      	movs	r6, r0
    1918:	000f      	movs	r7, r1
    191a:	9822      	ldr	r0, [sp, #136]	; 0x88
    191c:	9923      	ldr	r1, [sp, #140]	; 0x8c
    191e:	47a8      	blx	r5
    1920:	0002      	movs	r2, r0
    1922:	000b      	movs	r3, r1
    1924:	0030      	movs	r0, r6
    1926:	0039      	movs	r1, r7
    1928:	47a0      	blx	r4
    192a:	9a00      	ldr	r2, [sp, #0]
    192c:	9b01      	ldr	r3, [sp, #4]
    192e:	0006      	movs	r6, r0
    1930:	000f      	movs	r7, r1
    1932:	9824      	ldr	r0, [sp, #144]	; 0x90
    1934:	9925      	ldr	r1, [sp, #148]	; 0x94
    1936:	47a8      	blx	r5
    1938:	0002      	movs	r2, r0
    193a:	000b      	movs	r3, r1
    193c:	0030      	movs	r0, r6
    193e:	0039      	movs	r1, r7
    1940:	47a0      	blx	r4
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
    1942:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    1944:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
    1946:	902e      	str	r0, [sp, #184]	; 0xb8
    1948:	912f      	str	r1, [sp, #188]	; 0xbc
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
    194a:	9820      	ldr	r0, [sp, #128]	; 0x80
    194c:	9921      	ldr	r1, [sp, #132]	; 0x84
    194e:	47a8      	blx	r5
    1950:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    1952:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1954:	0006      	movs	r6, r0
    1956:	000f      	movs	r7, r1
    1958:	9822      	ldr	r0, [sp, #136]	; 0x88
    195a:	9923      	ldr	r1, [sp, #140]	; 0x8c
    195c:	47a8      	blx	r5
    195e:	0002      	movs	r2, r0
    1960:	000b      	movs	r3, r1
    1962:	0030      	movs	r0, r6
    1964:	0039      	movs	r1, r7
    1966:	47a0      	blx	r4
    1968:	9a10      	ldr	r2, [sp, #64]	; 0x40
    196a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    196c:	0006      	movs	r6, r0
    196e:	000f      	movs	r7, r1
    1970:	9824      	ldr	r0, [sp, #144]	; 0x90
    1972:	9925      	ldr	r1, [sp, #148]	; 0x94
    1974:	47a8      	blx	r5
    1976:	0002      	movs	r2, r0
    1978:	000b      	movs	r3, r1
    197a:	0030      	movs	r0, r6
    197c:	0039      	movs	r1, r7
    197e:	47a0      	blx	r4
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];
    1980:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1982:	9b0d      	ldr	r3, [sp, #52]	; 0x34
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
    1984:	9006      	str	r0, [sp, #24]
    1986:	9107      	str	r1, [sp, #28]
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];
    1988:	9820      	ldr	r0, [sp, #128]	; 0x80
    198a:	9921      	ldr	r1, [sp, #132]	; 0x84
    198c:	47a8      	blx	r5
    198e:	9a04      	ldr	r2, [sp, #16]
    1990:	9b05      	ldr	r3, [sp, #20]
    1992:	0006      	movs	r6, r0
    1994:	000f      	movs	r7, r1
    1996:	9822      	ldr	r0, [sp, #136]	; 0x88
    1998:	9923      	ldr	r1, [sp, #140]	; 0x8c
    199a:	47a8      	blx	r5
    199c:	0002      	movs	r2, r0
    199e:	000b      	movs	r3, r1
    19a0:	0030      	movs	r0, r6
    19a2:	0039      	movs	r1, r7
    19a4:	47a0      	blx	r4
    19a6:	9a02      	ldr	r2, [sp, #8]
    19a8:	9b03      	ldr	r3, [sp, #12]
    19aa:	0006      	movs	r6, r0
    19ac:	000f      	movs	r7, r1
    19ae:	9824      	ldr	r0, [sp, #144]	; 0x90
    19b0:	9925      	ldr	r1, [sp, #148]	; 0x94
    19b2:	47a8      	blx	r5
    19b4:	0002      	movs	r2, r0
    19b6:	000b      	movs	r3, r1
    19b8:	0030      	movs	r0, r6
    19ba:	0039      	movs	r1, r7
    19bc:	47a0      	blx	r4

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
    19be:	4a1f      	ldr	r2, [pc, #124]	; (1a3c <computeKalmanGains+0x378>)
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];
    19c0:	9002      	str	r0, [sp, #8]
    19c2:	9103      	str	r1, [sp, #12]

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
    19c4:	9812      	ldr	r0, [sp, #72]	; 0x48
    19c6:	9913      	ldr	r1, [sp, #76]	; 0x4c
    19c8:	4b1d      	ldr	r3, [pc, #116]	; (1a40 <computeKalmanGains+0x37c>)
    19ca:	47a8      	blx	r5
    19cc:	9a16      	ldr	r2, [sp, #88]	; 0x58
    19ce:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    19d0:	47a0      	blx	r4
    19d2:	4a1c      	ldr	r2, [pc, #112]	; (1a44 <computeKalmanGains+0x380>)
    19d4:	0006      	movs	r6, r0
    19d6:	000f      	movs	r7, r1
    19d8:	9814      	ldr	r0, [sp, #80]	; 0x50
    19da:	9915      	ldr	r1, [sp, #84]	; 0x54
    19dc:	4b1a      	ldr	r3, [pc, #104]	; (1a48 <computeKalmanGains+0x384>)
    19de:	47a8      	blx	r5
    19e0:	0002      	movs	r2, r0
    19e2:	000b      	movs	r3, r1
    19e4:	0030      	movs	r0, r6
    19e6:	0039      	movs	r1, r7
    19e8:	47a0      	blx	r4
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
    19ea:	2200      	movs	r2, #0
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
    19ec:	9008      	str	r0, [sp, #32]
    19ee:	9109      	str	r1, [sp, #36]	; 0x24
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
    19f0:	9816      	ldr	r0, [sp, #88]	; 0x58
    19f2:	9917      	ldr	r1, [sp, #92]	; 0x5c
    19f4:	2300      	movs	r3, #0
    19f6:	47a8      	blx	r5
    19f8:	0006      	movs	r6, r0
    19fa:	000f      	movs	r7, r1
    19fc:	0002      	movs	r2, r0
    19fe:	000b      	movs	r3, r1
    1a00:	9812      	ldr	r0, [sp, #72]	; 0x48
    1a02:	9913      	ldr	r1, [sp, #76]	; 0x4c
    1a04:	47a0      	blx	r4
    1a06:	4a0d      	ldr	r2, [pc, #52]	; (1a3c <computeKalmanGains+0x378>)
    1a08:	9000      	str	r0, [sp, #0]
    1a0a:	9101      	str	r1, [sp, #4]
    1a0c:	9814      	ldr	r0, [sp, #80]	; 0x50
    1a0e:	9915      	ldr	r1, [sp, #84]	; 0x54
    1a10:	4b0b      	ldr	r3, [pc, #44]	; (1a40 <computeKalmanGains+0x37c>)
    1a12:	47a8      	blx	r5
    1a14:	0002      	movs	r2, r0
    1a16:	000b      	movs	r3, r1
    1a18:	9800      	ldr	r0, [sp, #0]
    1a1a:	9901      	ldr	r1, [sp, #4]
    1a1c:	47a0      	blx	r4
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
    1a1e:	2200      	movs	r2, #0
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
    1a20:	9030      	str	r0, [sp, #192]	; 0xc0
    1a22:	9131      	str	r1, [sp, #196]	; 0xc4
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
    1a24:	9812      	ldr	r0, [sp, #72]	; 0x48
    1a26:	9913      	ldr	r1, [sp, #76]	; 0x4c
    1a28:	2300      	movs	r3, #0
    1a2a:	47a8      	blx	r5
    1a2c:	0032      	movs	r2, r6
    1a2e:	003b      	movs	r3, r7
    1a30:	47a0      	blx	r4
    1a32:	9a14      	ldr	r2, [sp, #80]	; 0x50
    1a34:	9b15      	ldr	r3, [sp, #84]	; 0x54
    1a36:	e017      	b.n	1a68 <computeKalmanGains+0x3a4>
    1a38:	20000010 	.word	0x20000010
    1a3c:	47ae147b 	.word	0x47ae147b
    1a40:	3f747ae1 	.word	0x3f747ae1
    1a44:	eb1c432d 	.word	0xeb1c432d
    1a48:	3eea36e2 	.word	0x3eea36e2
    1a4c:	20000650 	.word	0x20000650
    1a50:	d2f1a9fc 	.word	0xd2f1a9fc
    1a54:	3f50624d 	.word	0x3f50624d
    1a58:	3ff00000 	.word	0x3ff00000
    1a5c:	40220000 	.word	0x40220000
    1a60:	0000536d 	.word	0x0000536d
    1a64:	000044cd 	.word	0x000044cd
    1a68:	47a0      	blx	r4
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
    1a6a:	4ad9      	ldr	r2, [pc, #868]	; (1dd0 <computeKalmanGains+0x70c>)
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
    1a6c:	9112      	str	r1, [sp, #72]	; 0x48
    1a6e:	9004      	str	r0, [sp, #16]
    1a70:	9116      	str	r1, [sp, #88]	; 0x58
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
    1a72:	4bd8      	ldr	r3, [pc, #864]	; (1dd4 <computeKalmanGains+0x710>)
    1a74:	9826      	ldr	r0, [sp, #152]	; 0x98
    1a76:	9927      	ldr	r1, [sp, #156]	; 0x9c
    1a78:	47a8      	blx	r5
    1a7a:	9a18      	ldr	r2, [sp, #96]	; 0x60
    1a7c:	9b19      	ldr	r3, [sp, #100]	; 0x64
    1a7e:	47a0      	blx	r4
    1a80:	4ad5      	ldr	r2, [pc, #852]	; (1dd8 <computeKalmanGains+0x714>)
    1a82:	0006      	movs	r6, r0
    1a84:	000f      	movs	r7, r1
    1a86:	9828      	ldr	r0, [sp, #160]	; 0xa0
    1a88:	9929      	ldr	r1, [sp, #164]	; 0xa4
    1a8a:	4bd4      	ldr	r3, [pc, #848]	; (1ddc <computeKalmanGains+0x718>)
    1a8c:	47a8      	blx	r5
    1a8e:	0002      	movs	r2, r0
    1a90:	000b      	movs	r3, r1
    1a92:	0030      	movs	r0, r6
    1a94:	0039      	movs	r1, r7
    1a96:	47a0      	blx	r4
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
    1a98:	2200      	movs	r2, #0
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
    1a9a:	902a      	str	r0, [sp, #168]	; 0xa8
    1a9c:	912b      	str	r1, [sp, #172]	; 0xac
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
    1a9e:	9818      	ldr	r0, [sp, #96]	; 0x60
    1aa0:	9919      	ldr	r1, [sp, #100]	; 0x64
    1aa2:	2300      	movs	r3, #0
    1aa4:	47a8      	blx	r5
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
    1aa6:	2200      	movs	r2, #0

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
    1aa8:	9032      	str	r0, [sp, #200]	; 0xc8
    1aaa:	9133      	str	r1, [sp, #204]	; 0xcc
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
    1aac:	9826      	ldr	r0, [sp, #152]	; 0x98
    1aae:	9927      	ldr	r1, [sp, #156]	; 0x9c
    1ab0:	2300      	movs	r3, #0
    1ab2:	47a8      	blx	r5
    1ab4:	9a32      	ldr	r2, [sp, #200]	; 0xc8
    1ab6:	9b33      	ldr	r3, [sp, #204]	; 0xcc
    1ab8:	47a0      	blx	r4
    1aba:	9a28      	ldr	r2, [sp, #160]	; 0xa0
    1abc:	9b29      	ldr	r3, [sp, #164]	; 0xa4
    1abe:	47a0      	blx	r4
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
    1ac0:	4ac3      	ldr	r2, [pc, #780]	; (1dd0 <computeKalmanGains+0x70c>)
        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
    1ac2:	902c      	str	r0, [sp, #176]	; 0xb0
    1ac4:	912d      	str	r1, [sp, #180]	; 0xb4
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
    1ac6:	9806      	ldr	r0, [sp, #24]
    1ac8:	9907      	ldr	r1, [sp, #28]
    1aca:	4bc2      	ldr	r3, [pc, #776]	; (1dd4 <computeKalmanGains+0x710>)
    1acc:	47a8      	blx	r5
    1ace:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
    1ad0:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
    1ad2:	47a0      	blx	r4
    1ad4:	4ac0      	ldr	r2, [pc, #768]	; (1dd8 <computeKalmanGains+0x714>)
    1ad6:	0006      	movs	r6, r0
    1ad8:	000f      	movs	r7, r1
    1ada:	9802      	ldr	r0, [sp, #8]
    1adc:	9903      	ldr	r1, [sp, #12]
    1ade:	4bbf      	ldr	r3, [pc, #764]	; (1ddc <computeKalmanGains+0x718>)
    1ae0:	47a8      	blx	r5
    1ae2:	0002      	movs	r2, r0
    1ae4:	000b      	movs	r3, r1
    1ae6:	0030      	movs	r0, r6
    1ae8:	0039      	movs	r1, r7
    1aea:	47a0      	blx	r4
        pestp[2][1] = term[2][0] * phit[0][1] + term[2][1] * phit[1][1] + term[2][2] * phit[2][1];
    1aec:	2200      	movs	r2, #0
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
    1aee:	9000      	str	r0, [sp, #0]
    1af0:	9101      	str	r1, [sp, #4]
        pestp[2][1] = term[2][0] * phit[0][1] + term[2][1] * phit[1][1] + term[2][2] * phit[2][1];
    1af2:	982e      	ldr	r0, [sp, #184]	; 0xb8
    1af4:	992f      	ldr	r1, [sp, #188]	; 0xbc
    1af6:	2300      	movs	r3, #0
    1af8:	47a8      	blx	r5
    1afa:	0006      	movs	r6, r0
    1afc:	000f      	movs	r7, r1
    1afe:	0002      	movs	r2, r0
    1b00:	000b      	movs	r3, r1
    1b02:	9806      	ldr	r0, [sp, #24]
    1b04:	9907      	ldr	r1, [sp, #28]
    1b06:	47a0      	blx	r4
    1b08:	4ab1      	ldr	r2, [pc, #708]	; (1dd0 <computeKalmanGains+0x70c>)
    1b0a:	900a      	str	r0, [sp, #40]	; 0x28
    1b0c:	910b      	str	r1, [sp, #44]	; 0x2c
    1b0e:	9802      	ldr	r0, [sp, #8]
    1b10:	9903      	ldr	r1, [sp, #12]
    1b12:	4bb0      	ldr	r3, [pc, #704]	; (1dd4 <computeKalmanGains+0x710>)
    1b14:	47a8      	blx	r5
    1b16:	0002      	movs	r2, r0
    1b18:	000b      	movs	r3, r1
    1b1a:	980a      	ldr	r0, [sp, #40]	; 0x28
    1b1c:	990b      	ldr	r1, [sp, #44]	; 0x2c
    1b1e:	47a0      	blx	r4
        pestp[2][2] = term[2][0] * phit[0][2] + term[2][1] * phit[1][2] + term[2][2] * phit[2][2];

        pestp[2][2] = pestp[2][2] + model_variance;
    1b20:	2200      	movs	r2, #0
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
        pestp[2][1] = term[2][0] * phit[0][1] + term[2][1] * phit[1][1] + term[2][2] * phit[2][1];
    1b22:	9010      	str	r0, [sp, #64]	; 0x40
    1b24:	9111      	str	r1, [sp, #68]	; 0x44
        pestp[2][2] = term[2][0] * phit[0][2] + term[2][1] * phit[1][2] + term[2][2] * phit[2][2];

        pestp[2][2] = pestp[2][2] + model_variance;
    1b26:	9806      	ldr	r0, [sp, #24]
    1b28:	9907      	ldr	r1, [sp, #28]
    1b2a:	2300      	movs	r3, #0
    1b2c:	47a8      	blx	r5
    1b2e:	0032      	movs	r2, r6
    1b30:	003b      	movs	r3, r7
    1b32:	47a0      	blx	r4
    1b34:	9a02      	ldr	r2, [sp, #8]
    1b36:	9b03      	ldr	r3, [sp, #12]
    1b38:	47a0      	blx	r4
    1b3a:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
    1b3c:	9b3b      	ldr	r3, [sp, #236]	; 0xec
    1b3e:	47a0      	blx	r4
        /*
          Calculate Kalman Gain
        */
        det = (pestp[0][0]+altitude_variance)*(pestp[2][2] + acceleration_variance) - pestp[2][0] * pestp[0][2];
    1b40:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
    1b42:	9b3d      	ldr	r3, [sp, #244]	; 0xf4
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
        pestp[2][1] = term[2][0] * phit[0][1] + term[2][1] * phit[1][1] + term[2][2] * phit[2][1];
        pestp[2][2] = term[2][0] * phit[0][2] + term[2][1] * phit[1][2] + term[2][2] * phit[2][2];

        pestp[2][2] = pestp[2][2] + model_variance;
    1b44:	9002      	str	r0, [sp, #8]
    1b46:	9103      	str	r1, [sp, #12]
        /*
          Calculate Kalman Gain
        */
        det = (pestp[0][0]+altitude_variance)*(pestp[2][2] + acceleration_variance) - pestp[2][0] * pestp[0][2];
    1b48:	9808      	ldr	r0, [sp, #32]
    1b4a:	9909      	ldr	r1, [sp, #36]	; 0x24
    1b4c:	47a0      	blx	r4
    1b4e:	9a3e      	ldr	r2, [sp, #248]	; 0xf8
    1b50:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
    1b52:	900a      	str	r0, [sp, #40]	; 0x28
    1b54:	910b      	str	r1, [sp, #44]	; 0x2c
    1b56:	9802      	ldr	r0, [sp, #8]
    1b58:	9903      	ldr	r1, [sp, #12]
    1b5a:	47a0      	blx	r4
    1b5c:	9a00      	ldr	r2, [sp, #0]
    1b5e:	9b01      	ldr	r3, [sp, #4]
    1b60:	900c      	str	r0, [sp, #48]	; 0x30
    1b62:	910d      	str	r1, [sp, #52]	; 0x34
    1b64:	9804      	ldr	r0, [sp, #16]
    1b66:	9916      	ldr	r1, [sp, #88]	; 0x58
    1b68:	47a8      	blx	r5
    1b6a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1b6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1b6e:	900e      	str	r0, [sp, #56]	; 0x38
    1b70:	910f      	str	r1, [sp, #60]	; 0x3c
    1b72:	980a      	ldr	r0, [sp, #40]	; 0x28
    1b74:	990b      	ldr	r1, [sp, #44]	; 0x2c
    1b76:	47a8      	blx	r5
    1b78:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    1b7a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1b7c:	4e98      	ldr	r6, [pc, #608]	; (1de0 <computeKalmanGains+0x71c>)
    1b7e:	47b0      	blx	r6

        kgain[0][0] = (pestp[0][0] * (pestp[2][2] + acceleration_variance) - pestp[0][2] * pestp[2][0])/det;
    1b80:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1b82:	9b0d      	ldr	r3, [sp, #52]	; 0x34

        pestp[2][2] = pestp[2][2] + model_variance;
        /*
          Calculate Kalman Gain
        */
        det = (pestp[0][0]+altitude_variance)*(pestp[2][2] + acceleration_variance) - pestp[2][0] * pestp[0][2];
    1b84:	9006      	str	r0, [sp, #24]
    1b86:	9107      	str	r1, [sp, #28]

        kgain[0][0] = (pestp[0][0] * (pestp[2][2] + acceleration_variance) - pestp[0][2] * pestp[2][0])/det;
    1b88:	9808      	ldr	r0, [sp, #32]
    1b8a:	9909      	ldr	r1, [sp, #36]	; 0x24
    1b8c:	47a8      	blx	r5
    1b8e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    1b90:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1b92:	47b0      	blx	r6
    1b94:	9a06      	ldr	r2, [sp, #24]
    1b96:	9b07      	ldr	r3, [sp, #28]
    1b98:	4e92      	ldr	r6, [pc, #584]	; (1de4 <computeKalmanGains+0x720>)
    1b9a:	47b0      	blx	r6
    1b9c:	9034      	str	r0, [sp, #208]	; 0xd0
    1b9e:	9135      	str	r1, [sp, #212]	; 0xd4
    1ba0:	9a34      	ldr	r2, [sp, #208]	; 0xd0
    1ba2:	9b35      	ldr	r3, [sp, #212]	; 0xd4
    1ba4:	4990      	ldr	r1, [pc, #576]	; (1de8 <computeKalmanGains+0x724>)
    1ba6:	600a      	str	r2, [r1, #0]
    1ba8:	604b      	str	r3, [r1, #4]
        kgain[0][1] = (pestp[0][0] * (-pestp[0][2]) + pestp[0][2] * (pestp[0][0] + altitude_variance))/det;
    1baa:	9808      	ldr	r0, [sp, #32]
    1bac:	9909      	ldr	r1, [sp, #36]	; 0x24
    1bae:	2280      	movs	r2, #128	; 0x80
    1bb0:	0612      	lsls	r2, r2, #24
    1bb2:	4694      	mov	ip, r2
    1bb4:	9b12      	ldr	r3, [sp, #72]	; 0x48
    1bb6:	9a04      	ldr	r2, [sp, #16]
    1bb8:	4463      	add	r3, ip
    1bba:	932e      	str	r3, [sp, #184]	; 0xb8
    1bbc:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    1bbe:	47a8      	blx	r5
    1bc0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    1bc2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1bc4:	0006      	movs	r6, r0
    1bc6:	000f      	movs	r7, r1
    1bc8:	9804      	ldr	r0, [sp, #16]
    1bca:	9916      	ldr	r1, [sp, #88]	; 0x58
    1bcc:	47a8      	blx	r5
    1bce:	0002      	movs	r2, r0
    1bd0:	000b      	movs	r3, r1
    1bd2:	0030      	movs	r0, r6
    1bd4:	0039      	movs	r1, r7
    1bd6:	47a0      	blx	r4
    1bd8:	9a06      	ldr	r2, [sp, #24]
    1bda:	9b07      	ldr	r3, [sp, #28]
    1bdc:	4e81      	ldr	r6, [pc, #516]	; (1de4 <computeKalmanGains+0x720>)
    1bde:	47b0      	blx	r6
    1be0:	900e      	str	r0, [sp, #56]	; 0x38
    1be2:	910f      	str	r1, [sp, #60]	; 0x3c
    1be4:	4980      	ldr	r1, [pc, #512]	; (1de8 <computeKalmanGains+0x724>)
    1be6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    1be8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1bea:	608a      	str	r2, [r1, #8]
    1bec:	60cb      	str	r3, [r1, #12]
        kgain[1][0] = (pestp[1][0] * (pestp[2][2] + acceleration_variance) - pestp[1][2] * pestp[2][0])/det;
    1bee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1bf0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1bf2:	982a      	ldr	r0, [sp, #168]	; 0xa8
    1bf4:	992b      	ldr	r1, [sp, #172]	; 0xac
    1bf6:	47a8      	blx	r5
    1bf8:	9a00      	ldr	r2, [sp, #0]
    1bfa:	9b01      	ldr	r3, [sp, #4]
    1bfc:	0006      	movs	r6, r0
    1bfe:	000f      	movs	r7, r1
    1c00:	982c      	ldr	r0, [sp, #176]	; 0xb0
    1c02:	992d      	ldr	r1, [sp, #180]	; 0xb4
    1c04:	47a8      	blx	r5
    1c06:	0002      	movs	r2, r0
    1c08:	000b      	movs	r3, r1
    1c0a:	0030      	movs	r0, r6
    1c0c:	0039      	movs	r1, r7
    1c0e:	4e74      	ldr	r6, [pc, #464]	; (1de0 <computeKalmanGains+0x71c>)
    1c10:	47b0      	blx	r6
    1c12:	9a06      	ldr	r2, [sp, #24]
    1c14:	9b07      	ldr	r3, [sp, #28]
    1c16:	4e73      	ldr	r6, [pc, #460]	; (1de4 <computeKalmanGains+0x720>)
    1c18:	47b0      	blx	r6
    1c1a:	0002      	movs	r2, r0
    1c1c:	000b      	movs	r3, r1
    1c1e:	9139      	str	r1, [sp, #228]	; 0xe4
    1c20:	4971      	ldr	r1, [pc, #452]	; (1de8 <computeKalmanGains+0x724>)
    1c22:	9018      	str	r0, [sp, #96]	; 0x60
    1c24:	610a      	str	r2, [r1, #16]
    1c26:	614b      	str	r3, [r1, #20]
        kgain[1][1] = (pestp[1][0] * (-pestp[0][2]) + pestp[1][2] * (pestp[0][0] + altitude_variance))/det;
    1c28:	982a      	ldr	r0, [sp, #168]	; 0xa8
    1c2a:	992b      	ldr	r1, [sp, #172]	; 0xac
    1c2c:	9a04      	ldr	r2, [sp, #16]
    1c2e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    1c30:	47a8      	blx	r5
    1c32:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    1c34:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1c36:	0006      	movs	r6, r0
    1c38:	000f      	movs	r7, r1
    1c3a:	982c      	ldr	r0, [sp, #176]	; 0xb0
    1c3c:	992d      	ldr	r1, [sp, #180]	; 0xb4
    1c3e:	47a8      	blx	r5
    1c40:	0002      	movs	r2, r0
    1c42:	000b      	movs	r3, r1
    1c44:	0030      	movs	r0, r6
    1c46:	0039      	movs	r1, r7
    1c48:	47a0      	blx	r4
    1c4a:	9a06      	ldr	r2, [sp, #24]
    1c4c:	9b07      	ldr	r3, [sp, #28]
    1c4e:	4e65      	ldr	r6, [pc, #404]	; (1de4 <computeKalmanGains+0x720>)
    1c50:	47b0      	blx	r6
    1c52:	9012      	str	r0, [sp, #72]	; 0x48
    1c54:	9113      	str	r1, [sp, #76]	; 0x4c
    1c56:	9a12      	ldr	r2, [sp, #72]	; 0x48
    1c58:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    1c5a:	4963      	ldr	r1, [pc, #396]	; (1de8 <computeKalmanGains+0x724>)
    1c5c:	618a      	str	r2, [r1, #24]
    1c5e:	61cb      	str	r3, [r1, #28]
        kgain[2][0] = (pestp[2][0] * (pestp[2][2] + acceleration_variance) - pestp[2][2] * pestp[2][0])/det;
    1c60:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1c62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1c64:	9800      	ldr	r0, [sp, #0]
    1c66:	9901      	ldr	r1, [sp, #4]
    1c68:	47a8      	blx	r5
    1c6a:	9a02      	ldr	r2, [sp, #8]
    1c6c:	9b03      	ldr	r3, [sp, #12]
    1c6e:	0006      	movs	r6, r0
    1c70:	000f      	movs	r7, r1
    1c72:	9800      	ldr	r0, [sp, #0]
    1c74:	9901      	ldr	r1, [sp, #4]
    1c76:	47a8      	blx	r5
    1c78:	0002      	movs	r2, r0
    1c7a:	000b      	movs	r3, r1
    1c7c:	0030      	movs	r0, r6
    1c7e:	0039      	movs	r1, r7
    1c80:	4e57      	ldr	r6, [pc, #348]	; (1de0 <computeKalmanGains+0x71c>)
    1c82:	47b0      	blx	r6
    1c84:	9a06      	ldr	r2, [sp, #24]
    1c86:	9b07      	ldr	r3, [sp, #28]
    1c88:	4e56      	ldr	r6, [pc, #344]	; (1de4 <computeKalmanGains+0x720>)
    1c8a:	47b0      	blx	r6
    1c8c:	9014      	str	r0, [sp, #80]	; 0x50
    1c8e:	9115      	str	r1, [sp, #84]	; 0x54
    1c90:	9a14      	ldr	r2, [sp, #80]	; 0x50
    1c92:	9b15      	ldr	r3, [sp, #84]	; 0x54
    1c94:	4954      	ldr	r1, [pc, #336]	; (1de8 <computeKalmanGains+0x724>)
    1c96:	620a      	str	r2, [r1, #32]
    1c98:	624b      	str	r3, [r1, #36]	; 0x24
        kgain[2][1] = (pestp[2][0] * (-pestp[0][2]) + pestp[2][2] * (pestp[0][0] + altitude_variance))/det;
    1c9a:	9800      	ldr	r0, [sp, #0]
    1c9c:	9901      	ldr	r1, [sp, #4]
    1c9e:	9a04      	ldr	r2, [sp, #16]
    1ca0:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    1ca2:	47a8      	blx	r5
    1ca4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    1ca6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1ca8:	0006      	movs	r6, r0
    1caa:	000f      	movs	r7, r1
    1cac:	9802      	ldr	r0, [sp, #8]
    1cae:	9903      	ldr	r1, [sp, #12]
    1cb0:	47a8      	blx	r5
    1cb2:	0002      	movs	r2, r0
    1cb4:	000b      	movs	r3, r1
    1cb6:	0030      	movs	r0, r6
    1cb8:	0039      	movs	r1, r7
    1cba:	47a0      	blx	r4
    1cbc:	9a06      	ldr	r2, [sp, #24]
    1cbe:	9b07      	ldr	r3, [sp, #28]
    1cc0:	4e48      	ldr	r6, [pc, #288]	; (1de4 <computeKalmanGains+0x720>)
    1cc2:	47b0      	blx	r6
    1cc4:	9036      	str	r0, [sp, #216]	; 0xd8
    1cc6:	9137      	str	r1, [sp, #220]	; 0xdc
    1cc8:	9a36      	ldr	r2, [sp, #216]	; 0xd8
    1cca:	9b37      	ldr	r3, [sp, #220]	; 0xdc
    1ccc:	4946      	ldr	r1, [pc, #280]	; (1de8 <computeKalmanGains+0x724>)

        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
    1cce:	4e44      	ldr	r6, [pc, #272]	; (1de0 <computeKalmanGains+0x71c>)
        kgain[0][0] = (pestp[0][0] * (pestp[2][2] + acceleration_variance) - pestp[0][2] * pestp[2][0])/det;
        kgain[0][1] = (pestp[0][0] * (-pestp[0][2]) + pestp[0][2] * (pestp[0][0] + altitude_variance))/det;
        kgain[1][0] = (pestp[1][0] * (pestp[2][2] + acceleration_variance) - pestp[1][2] * pestp[2][0])/det;
        kgain[1][1] = (pestp[1][0] * (-pestp[0][2]) + pestp[1][2] * (pestp[0][0] + altitude_variance))/det;
        kgain[2][0] = (pestp[2][0] * (pestp[2][2] + acceleration_variance) - pestp[2][2] * pestp[2][0])/det;
        kgain[2][1] = (pestp[2][0] * (-pestp[0][2]) + pestp[2][2] * (pestp[0][0] + altitude_variance))/det;
    1cd0:	628a      	str	r2, [r1, #40]	; 0x28
    1cd2:	62cb      	str	r3, [r1, #44]	; 0x2c

        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
    1cd4:	9a34      	ldr	r2, [sp, #208]	; 0xd0
    1cd6:	9b35      	ldr	r3, [sp, #212]	; 0xd4
    1cd8:	2000      	movs	r0, #0
    1cda:	4944      	ldr	r1, [pc, #272]	; (1dec <computeKalmanGains+0x728>)
    1cdc:	47b0      	blx	r6
    1cde:	0002      	movs	r2, r0
    1ce0:	000b      	movs	r3, r1
    1ce2:	900c      	str	r0, [sp, #48]	; 0x30
    1ce4:	910d      	str	r1, [sp, #52]	; 0x34
    1ce6:	9808      	ldr	r0, [sp, #32]
    1ce8:	9909      	ldr	r1, [sp, #36]	; 0x24
    1cea:	47a8      	blx	r5
    1cec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    1cee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1cf0:	0006      	movs	r6, r0
    1cf2:	000f      	movs	r7, r1
    1cf4:	9800      	ldr	r0, [sp, #0]
    1cf6:	9901      	ldr	r1, [sp, #4]
    1cf8:	47a8      	blx	r5
    1cfa:	0002      	movs	r2, r0
    1cfc:	000b      	movs	r3, r1
    1cfe:	0030      	movs	r0, r6
    1d00:	0039      	movs	r1, r7
    1d02:	4e37      	ldr	r6, [pc, #220]	; (1de0 <computeKalmanGains+0x71c>)
    1d04:	47b0      	blx	r6
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
    1d06:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1d08:	9b0d      	ldr	r3, [sp, #52]	; 0x34
        kgain[1][0] = (pestp[1][0] * (pestp[2][2] + acceleration_variance) - pestp[1][2] * pestp[2][0])/det;
        kgain[1][1] = (pestp[1][0] * (-pestp[0][2]) + pestp[1][2] * (pestp[0][0] + altitude_variance))/det;
        kgain[2][0] = (pestp[2][0] * (pestp[2][2] + acceleration_variance) - pestp[2][2] * pestp[2][0])/det;
        kgain[2][1] = (pestp[2][0] * (-pestp[0][2]) + pestp[2][2] * (pestp[0][0] + altitude_variance))/det;

        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
    1d0a:	9006      	str	r0, [sp, #24]
    1d0c:	9107      	str	r1, [sp, #28]
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
    1d0e:	9830      	ldr	r0, [sp, #192]	; 0xc0
    1d10:	9931      	ldr	r1, [sp, #196]	; 0xc4
    1d12:	47a8      	blx	r5
    1d14:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    1d16:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1d18:	0006      	movs	r6, r0
    1d1a:	000f      	movs	r7, r1
    1d1c:	9810      	ldr	r0, [sp, #64]	; 0x40
    1d1e:	9911      	ldr	r1, [sp, #68]	; 0x44
    1d20:	47a8      	blx	r5
    1d22:	0002      	movs	r2, r0
    1d24:	000b      	movs	r3, r1
    1d26:	0030      	movs	r0, r6
    1d28:	0039      	movs	r1, r7
    1d2a:	4e2d      	ldr	r6, [pc, #180]	; (1de0 <computeKalmanGains+0x71c>)
    1d2c:	47b0      	blx	r6
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
    1d2e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1d30:	9b0d      	ldr	r3, [sp, #52]	; 0x34
        kgain[1][1] = (pestp[1][0] * (-pestp[0][2]) + pestp[1][2] * (pestp[0][0] + altitude_variance))/det;
        kgain[2][0] = (pestp[2][0] * (pestp[2][2] + acceleration_variance) - pestp[2][2] * pestp[2][0])/det;
        kgain[2][1] = (pestp[2][0] * (-pestp[0][2]) + pestp[2][2] * (pestp[0][0] + altitude_variance))/det;

        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
    1d32:	900a      	str	r0, [sp, #40]	; 0x28
    1d34:	910b      	str	r1, [sp, #44]	; 0x2c
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
    1d36:	9804      	ldr	r0, [sp, #16]
    1d38:	9916      	ldr	r1, [sp, #88]	; 0x58
    1d3a:	47a8      	blx	r5
    1d3c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    1d3e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1d40:	0006      	movs	r6, r0
    1d42:	000f      	movs	r7, r1
    1d44:	9802      	ldr	r0, [sp, #8]
    1d46:	9903      	ldr	r1, [sp, #12]
    1d48:	47a8      	blx	r5
    1d4a:	0002      	movs	r2, r0
    1d4c:	000b      	movs	r3, r1
    1d4e:	0030      	movs	r0, r6
    1d50:	0039      	movs	r1, r7
    1d52:	4e23      	ldr	r6, [pc, #140]	; (1de0 <computeKalmanGains+0x71c>)
    1d54:	47b0      	blx	r6
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
    1d56:	2280      	movs	r2, #128	; 0x80
    1d58:	0612      	lsls	r2, r2, #24
    1d5a:	4694      	mov	ip, r2
    1d5c:	9b39      	ldr	r3, [sp, #228]	; 0xe4
    1d5e:	9a18      	ldr	r2, [sp, #96]	; 0x60
    1d60:	4463      	add	r3, ip
    1d62:	932e      	str	r3, [sp, #184]	; 0xb8
    1d64:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
        kgain[2][0] = (pestp[2][0] * (pestp[2][2] + acceleration_variance) - pestp[2][2] * pestp[2][0])/det;
        kgain[2][1] = (pestp[2][0] * (-pestp[0][2]) + pestp[2][2] * (pestp[0][0] + altitude_variance))/det;

        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
    1d66:	900c      	str	r0, [sp, #48]	; 0x30
    1d68:	910d      	str	r1, [sp, #52]	; 0x34
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
    1d6a:	9808      	ldr	r0, [sp, #32]
    1d6c:	9909      	ldr	r1, [sp, #36]	; 0x24
    1d6e:	47a8      	blx	r5
    1d70:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
    1d72:	9b2b      	ldr	r3, [sp, #172]	; 0xac
    1d74:	47a0      	blx	r4
    1d76:	9a12      	ldr	r2, [sp, #72]	; 0x48
    1d78:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    1d7a:	0006      	movs	r6, r0
    1d7c:	000f      	movs	r7, r1
    1d7e:	9800      	ldr	r0, [sp, #0]
    1d80:	9901      	ldr	r1, [sp, #4]
    1d82:	47a8      	blx	r5
    1d84:	0002      	movs	r2, r0
    1d86:	000b      	movs	r3, r1
    1d88:	0030      	movs	r0, r6
    1d8a:	0039      	movs	r1, r7
    1d8c:	4e14      	ldr	r6, [pc, #80]	; (1de0 <computeKalmanGains+0x71c>)
    1d8e:	47b0      	blx	r6
        pest[1][1] = pestp[0][1] * (-kgain[1][0]) + pestp[1][1] - kgain[1][1]*pestp[2][1];
    1d90:	9a32      	ldr	r2, [sp, #200]	; 0xc8
    1d92:	9b33      	ldr	r3, [sp, #204]	; 0xcc
        kgain[2][1] = (pestp[2][0] * (-pestp[0][2]) + pestp[2][2] * (pestp[0][0] + altitude_variance))/det;

        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
    1d94:	9008      	str	r0, [sp, #32]
    1d96:	9109      	str	r1, [sp, #36]	; 0x24
        pest[1][1] = pestp[0][1] * (-kgain[1][0]) + pestp[1][1] - kgain[1][1]*pestp[2][1];
    1d98:	9826      	ldr	r0, [sp, #152]	; 0x98
    1d9a:	9927      	ldr	r1, [sp, #156]	; 0x9c
    1d9c:	47a0      	blx	r4
    1d9e:	4a0c      	ldr	r2, [pc, #48]	; (1dd0 <computeKalmanGains+0x70c>)
    1da0:	0006      	movs	r6, r0
    1da2:	000f      	movs	r7, r1
    1da4:	9828      	ldr	r0, [sp, #160]	; 0xa0
    1da6:	9929      	ldr	r1, [sp, #164]	; 0xa4
    1da8:	4b0a      	ldr	r3, [pc, #40]	; (1dd4 <computeKalmanGains+0x710>)
    1daa:	47a8      	blx	r5
    1dac:	0002      	movs	r2, r0
    1dae:	000b      	movs	r3, r1
    1db0:	0030      	movs	r0, r6
    1db2:	0039      	movs	r1, r7
    1db4:	47a0      	blx	r4
    1db6:	9a18      	ldr	r2, [sp, #96]	; 0x60
    1db8:	0006      	movs	r6, r0
    1dba:	000f      	movs	r7, r1
    1dbc:	9830      	ldr	r0, [sp, #192]	; 0xc0
    1dbe:	9931      	ldr	r1, [sp, #196]	; 0xc4
    1dc0:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    1dc2:	47a8      	blx	r5
    1dc4:	0002      	movs	r2, r0
    1dc6:	000b      	movs	r3, r1
    1dc8:	0030      	movs	r0, r6
    1dca:	0039      	movs	r1, r7
    1dcc:	47a0      	blx	r4
    1dce:	e00f      	b.n	1df0 <computeKalmanGains+0x72c>
    1dd0:	47ae147b 	.word	0x47ae147b
    1dd4:	3f747ae1 	.word	0x3f747ae1
    1dd8:	eb1c432d 	.word	0xeb1c432d
    1ddc:	3eea36e2 	.word	0x3eea36e2
    1de0:	00005861 	.word	0x00005861
    1de4:	00004b25 	.word	0x00004b25
    1de8:	20000650 	.word	0x20000650
    1dec:	3ff00000 	.word	0x3ff00000
    1df0:	9a12      	ldr	r2, [sp, #72]	; 0x48
    1df2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    1df4:	0006      	movs	r6, r0
    1df6:	000f      	movs	r7, r1
    1df8:	9810      	ldr	r0, [sp, #64]	; 0x40
    1dfa:	9911      	ldr	r1, [sp, #68]	; 0x44
    1dfc:	47a8      	blx	r5
    1dfe:	0002      	movs	r2, r0
    1e00:	000b      	movs	r3, r1
    1e02:	0030      	movs	r0, r6
    1e04:	0039      	movs	r1, r7
    1e06:	4e50      	ldr	r6, [pc, #320]	; (1f48 <computeKalmanGains+0x884>)
    1e08:	47b0      	blx	r6
        pest[1][2] = pestp[0][2] * (-kgain[1][0]) + pestp[1][2] - kgain[1][1]*pestp[2][2];
    1e0a:	9a18      	ldr	r2, [sp, #96]	; 0x60

        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
        pest[1][1] = pestp[0][1] * (-kgain[1][0]) + pestp[1][1] - kgain[1][1]*pestp[2][1];
    1e0c:	900e      	str	r0, [sp, #56]	; 0x38
    1e0e:	910f      	str	r1, [sp, #60]	; 0x3c
        pest[1][2] = pestp[0][2] * (-kgain[1][0]) + pestp[1][2] - kgain[1][1]*pestp[2][2];
    1e10:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    1e12:	9804      	ldr	r0, [sp, #16]
    1e14:	9916      	ldr	r1, [sp, #88]	; 0x58
    1e16:	47a8      	blx	r5
    1e18:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
    1e1a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    1e1c:	47a0      	blx	r4
    1e1e:	9a12      	ldr	r2, [sp, #72]	; 0x48
    1e20:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    1e22:	0006      	movs	r6, r0
    1e24:	000f      	movs	r7, r1
    1e26:	9802      	ldr	r0, [sp, #8]
    1e28:	9903      	ldr	r1, [sp, #12]
    1e2a:	47a8      	blx	r5
    1e2c:	4c46      	ldr	r4, [pc, #280]	; (1f48 <computeKalmanGains+0x884>)
    1e2e:	0002      	movs	r2, r0
    1e30:	000b      	movs	r3, r1
    1e32:	0030      	movs	r0, r6
    1e34:	0039      	movs	r1, r7
    1e36:	47a0      	blx	r4
        pest[2][0] = (1.0 - kgain[2][1]) * pestp[2][0] - kgain[2][0] * pestp[2][0];
    1e38:	9a36      	ldr	r2, [sp, #216]	; 0xd8
    1e3a:	9b37      	ldr	r3, [sp, #220]	; 0xdc
        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
        pest[1][1] = pestp[0][1] * (-kgain[1][0]) + pestp[1][1] - kgain[1][1]*pestp[2][1];
        pest[1][2] = pestp[0][2] * (-kgain[1][0]) + pestp[1][2] - kgain[1][1]*pestp[2][2];
    1e3c:	9004      	str	r0, [sp, #16]
    1e3e:	9105      	str	r1, [sp, #20]
        pest[2][0] = (1.0 - kgain[2][1]) * pestp[2][0] - kgain[2][0] * pestp[2][0];
    1e40:	2000      	movs	r0, #0
    1e42:	4942      	ldr	r1, [pc, #264]	; (1f4c <computeKalmanGains+0x888>)
    1e44:	47a0      	blx	r4
    1e46:	0002      	movs	r2, r0
    1e48:	000b      	movs	r3, r1
    1e4a:	9012      	str	r0, [sp, #72]	; 0x48
    1e4c:	9113      	str	r1, [sp, #76]	; 0x4c
    1e4e:	9800      	ldr	r0, [sp, #0]
    1e50:	9901      	ldr	r1, [sp, #4]
    1e52:	47a8      	blx	r5
    1e54:	9a14      	ldr	r2, [sp, #80]	; 0x50
    1e56:	9b15      	ldr	r3, [sp, #84]	; 0x54
    1e58:	0006      	movs	r6, r0
    1e5a:	000f      	movs	r7, r1
    1e5c:	9800      	ldr	r0, [sp, #0]
    1e5e:	9901      	ldr	r1, [sp, #4]
    1e60:	47a8      	blx	r5
    1e62:	0002      	movs	r2, r0
    1e64:	000b      	movs	r3, r1
    1e66:	0030      	movs	r0, r6
    1e68:	0039      	movs	r1, r7
    1e6a:	47a0      	blx	r4
    1e6c:	9000      	str	r0, [sp, #0]
    1e6e:	9101      	str	r1, [sp, #4]
        pest[2][1] = (1.0 - kgain[2][1]) * pestp[2][1] - kgain[2][0] * pestp[2][1];
    1e70:	9a12      	ldr	r2, [sp, #72]	; 0x48
    1e72:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    1e74:	9810      	ldr	r0, [sp, #64]	; 0x40
    1e76:	9911      	ldr	r1, [sp, #68]	; 0x44
    1e78:	47a8      	blx	r5
    1e7a:	9a14      	ldr	r2, [sp, #80]	; 0x50
    1e7c:	9b15      	ldr	r3, [sp, #84]	; 0x54
    1e7e:	0006      	movs	r6, r0
    1e80:	000f      	movs	r7, r1
    1e82:	9810      	ldr	r0, [sp, #64]	; 0x40
    1e84:	9911      	ldr	r1, [sp, #68]	; 0x44
    1e86:	47a8      	blx	r5
    1e88:	0002      	movs	r2, r0
    1e8a:	000b      	movs	r3, r1
    1e8c:	0030      	movs	r0, r6
    1e8e:	0039      	movs	r1, r7
    1e90:	47a0      	blx	r4
        pest[2][2] = (1.0 - kgain[2][1]) * pestp[2][2] - kgain[2][0] * pestp[2][2];
    1e92:	9a12      	ldr	r2, [sp, #72]	; 0x48
    1e94:	9b13      	ldr	r3, [sp, #76]	; 0x4c
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
        pest[1][1] = pestp[0][1] * (-kgain[1][0]) + pestp[1][1] - kgain[1][1]*pestp[2][1];
        pest[1][2] = pestp[0][2] * (-kgain[1][0]) + pestp[1][2] - kgain[1][1]*pestp[2][2];
        pest[2][0] = (1.0 - kgain[2][1]) * pestp[2][0] - kgain[2][0] * pestp[2][0];
        pest[2][1] = (1.0 - kgain[2][1]) * pestp[2][1] - kgain[2][0] * pestp[2][1];
    1e96:	9010      	str	r0, [sp, #64]	; 0x40
    1e98:	9111      	str	r1, [sp, #68]	; 0x44
        pest[2][2] = (1.0 - kgain[2][1]) * pestp[2][2] - kgain[2][0] * pestp[2][2];
    1e9a:	9802      	ldr	r0, [sp, #8]
    1e9c:	9903      	ldr	r1, [sp, #12]
    1e9e:	47a8      	blx	r5
    1ea0:	9a14      	ldr	r2, [sp, #80]	; 0x50
    1ea2:	9b15      	ldr	r3, [sp, #84]	; 0x54
    1ea4:	0006      	movs	r6, r0
    1ea6:	000f      	movs	r7, r1
    1ea8:	9802      	ldr	r0, [sp, #8]
    1eaa:	9903      	ldr	r1, [sp, #12]
    1eac:	47a8      	blx	r5
    1eae:	000b      	movs	r3, r1
    1eb0:	0002      	movs	r2, r0
    1eb2:	0039      	movs	r1, r7
    1eb4:	0030      	movs	r0, r6
    1eb6:	47a0      	blx	r4
         * time through the mill. Because I have noticed very early convergance
         * in a few cases (< 20 iterations) I am delaying this for at least
         * 100 iterations.
         */
        notdone = 0;
        k++;
    1eb8:	2400      	movs	r4, #0
    1eba:	9b38      	ldr	r3, [sp, #224]	; 0xe0
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
        pest[1][1] = pestp[0][1] * (-kgain[1][0]) + pestp[1][1] - kgain[1][1]*pestp[2][1];
        pest[1][2] = pestp[0][2] * (-kgain[1][0]) + pestp[1][2] - kgain[1][1]*pestp[2][2];
        pest[2][0] = (1.0 - kgain[2][1]) * pestp[2][0] - kgain[2][0] * pestp[2][0];
        pest[2][1] = (1.0 - kgain[2][1]) * pestp[2][1] - kgain[2][0] * pestp[2][1];
        pest[2][2] = (1.0 - kgain[2][1]) * pestp[2][2] - kgain[2][0] * pestp[2][2];
    1ebc:	9002      	str	r0, [sp, #8]
    1ebe:	9103      	str	r1, [sp, #12]
         * time through the mill. Because I have noticed very early convergance
         * in a few cases (< 20 iterations) I am delaying this for at least
         * 100 iterations.
         */
        notdone = 0;
        k++;
    1ec0:	3301      	adds	r3, #1
    1ec2:	9338      	str	r3, [sp, #224]	; 0xe0
        for( i = 0; i <= 2; i++)
            for( j = 0; j <= 1; j++) {
                if( (kgain[i][j] - lastkgain[i][j])/lastkgain[i][j] > 0.00001)
    1ec4:	4b22      	ldr	r3, [pc, #136]	; (1f50 <computeKalmanGains+0x88c>)
        /* Check for convergance. Criteria is less than .001% change from last
         * time through the mill. Because I have noticed very early convergance
         * in a few cases (< 20 iterations) I am delaying this for at least
         * 100 iterations.
         */
        notdone = 0;
    1ec6:	9414      	str	r4, [sp, #80]	; 0x50
        k++;
        for( i = 0; i <= 2; i++)
            for( j = 0; j <= 1; j++) {
                if( (kgain[i][j] - lastkgain[i][j])/lastkgain[i][j] > 0.00001)
    1ec8:	9326      	str	r3, [sp, #152]	; 0x98
    1eca:	4b1f      	ldr	r3, [pc, #124]	; (1f48 <computeKalmanGains+0x884>)
    1ecc:	9328      	str	r3, [sp, #160]	; 0xa0
    1ece:	ab40      	add	r3, sp, #256	; 0x100
    1ed0:	18e5      	adds	r5, r4, r3

        pestp[2][2] = pestp[2][2] + model_variance;
        /*
          Calculate Kalman Gain
        */
        det = (pestp[0][0]+altitude_variance)*(pestp[2][2] + acceleration_variance) - pestp[2][0] * pestp[0][2];
    1ed2:	2300      	movs	r3, #0
    1ed4:	9516      	str	r5, [sp, #88]	; 0x58
    1ed6:	9312      	str	r3, [sp, #72]	; 0x48
         */
        notdone = 0;
        k++;
        for( i = 0; i <= 2; i++)
            for( j = 0; j <= 1; j++) {
                if( (kgain[i][j] - lastkgain[i][j])/lastkgain[i][j] > 0.00001)
    1ed8:	9b12      	ldr	r3, [sp, #72]	; 0x48
    1eda:	9a26      	ldr	r2, [sp, #152]	; 0x98
    1edc:	18e3      	adds	r3, r4, r3
    1ede:	189b      	adds	r3, r3, r2
    1ee0:	681a      	ldr	r2, [r3, #0]
    1ee2:	685b      	ldr	r3, [r3, #4]
    1ee4:	9218      	str	r2, [sp, #96]	; 0x60
    1ee6:	9319      	str	r3, [sp, #100]	; 0x64
    1ee8:	9818      	ldr	r0, [sp, #96]	; 0x60
    1eea:	9919      	ldr	r1, [sp, #100]	; 0x64
    1eec:	9b16      	ldr	r3, [sp, #88]	; 0x58
    1eee:	9d28      	ldr	r5, [sp, #160]	; 0xa0
    1ef0:	681e      	ldr	r6, [r3, #0]
    1ef2:	685f      	ldr	r7, [r3, #4]
    1ef4:	0032      	movs	r2, r6
    1ef6:	003b      	movs	r3, r7
    1ef8:	47a8      	blx	r5
    1efa:	0032      	movs	r2, r6
    1efc:	003b      	movs	r3, r7
    1efe:	4d15      	ldr	r5, [pc, #84]	; (1f54 <computeKalmanGains+0x890>)
    1f00:	47a8      	blx	r5
    1f02:	4b15      	ldr	r3, [pc, #84]	; (1f58 <computeKalmanGains+0x894>)
    1f04:	4a15      	ldr	r2, [pc, #84]	; (1f5c <computeKalmanGains+0x898>)
    1f06:	4e16      	ldr	r6, [pc, #88]	; (1f60 <computeKalmanGains+0x89c>)
    1f08:	47b0      	blx	r6
                    notdone++;
    1f0a:	1e43      	subs	r3, r0, #1
    1f0c:	4198      	sbcs	r0, r3
    1f0e:	9b14      	ldr	r3, [sp, #80]	; 0x50
                lastkgain[i][j] = kgain[i][j];
    1f10:	9916      	ldr	r1, [sp, #88]	; 0x58
        notdone = 0;
        k++;
        for( i = 0; i <= 2; i++)
            for( j = 0; j <= 1; j++) {
                if( (kgain[i][j] - lastkgain[i][j])/lastkgain[i][j] > 0.00001)
                    notdone++;
    1f12:	181b      	adds	r3, r3, r0
    1f14:	9314      	str	r3, [sp, #80]	; 0x50
                lastkgain[i][j] = kgain[i][j];
    1f16:	9a18      	ldr	r2, [sp, #96]	; 0x60
    1f18:	9b19      	ldr	r3, [sp, #100]	; 0x64
    1f1a:	c10c      	stmia	r1!, {r2, r3}
    1f1c:	9b12      	ldr	r3, [sp, #72]	; 0x48
    1f1e:	9116      	str	r1, [sp, #88]	; 0x58
    1f20:	3308      	adds	r3, #8
    1f22:	9312      	str	r3, [sp, #72]	; 0x48
         * 100 iterations.
         */
        notdone = 0;
        k++;
        for( i = 0; i <= 2; i++)
            for( j = 0; j <= 1; j++) {
    1f24:	2b10      	cmp	r3, #16
    1f26:	d1d7      	bne.n	1ed8 <computeKalmanGains+0x814>
    1f28:	3410      	adds	r4, #16
         * in a few cases (< 20 iterations) I am delaying this for at least
         * 100 iterations.
         */
        notdone = 0;
        k++;
        for( i = 0; i <= 2; i++)
    1f2a:	2c30      	cmp	r4, #48	; 0x30
    1f2c:	d1cf      	bne.n	1ece <computeKalmanGains+0x80a>
            for( j = 0; j <= 1; j++) {
                if( (kgain[i][j] - lastkgain[i][j])/lastkgain[i][j] > 0.00001)
                    notdone++;
                lastkgain[i][j] = kgain[i][j];
            }
        if( notdone || k < 100)
    1f2e:	9b14      	ldr	r3, [sp, #80]	; 0x50
    1f30:	2b00      	cmp	r3, #0
    1f32:	d001      	beq.n	1f38 <computeKalmanGains+0x874>
    1f34:	f7ff fc2c 	bl	1790 <computeKalmanGains+0xcc>
    1f38:	9b38      	ldr	r3, [sp, #224]	; 0xe0
    1f3a:	2b63      	cmp	r3, #99	; 0x63
    1f3c:	dc01      	bgt.n	1f42 <computeKalmanGains+0x87e>
    1f3e:	f7ff fc27 	bl	1790 <computeKalmanGains+0xcc>
            continue;
        else
            break;
    }
}
    1f42:	b04d      	add	sp, #308	; 0x134
    1f44:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1f46:	46c0      	nop			; (mov r8, r8)
    1f48:	00005861 	.word	0x00005861
    1f4c:	3ff00000 	.word	0x3ff00000
    1f50:	20000650 	.word	0x20000650
    1f54:	00004b25 	.word	0x00004b25
    1f58:	3ee4f8b5 	.word	0x3ee4f8b5
    1f5c:	88e368f1 	.word	0x88e368f1
    1f60:	00003dd9 	.word	0x00003dd9

00001f64 <computeKalmanStates>:

void computeKalmanStates() {
    1f64:	b5f0      	push	{r4, r5, r6, r7, lr}

    double alt_inovation, accel_inovation, acceleration;

    if (altimeter.pointingUp) {
    1f66:	4b85      	ldr	r3, [pc, #532]	; (217c <STACK_SIZE+0x17c>)
        else
            break;
    }
}

void computeKalmanStates() {
    1f68:	b08f      	sub	sp, #60	; 0x3c

    double alt_inovation, accel_inovation, acceleration;

    if (altimeter.pointingUp) {
    1f6a:	7b1a      	ldrb	r2, [r3, #12]
    1f6c:	4c84      	ldr	r4, [pc, #528]	; (2180 <STACK_SIZE+0x180>)
    1f6e:	4b85      	ldr	r3, [pc, #532]	; (2184 <STACK_SIZE+0x184>)
    1f70:	4e85      	ldr	r6, [pc, #532]	; (2188 <STACK_SIZE+0x188>)
    1f72:	4d86      	ldr	r5, [pc, #536]	; (218c <STACK_SIZE+0x18c>)
    1f74:	2a00      	cmp	r2, #0
    1f76:	d004      	beq.n	1f82 <computeKalmanStates+0x1e>
        acceleration = (-sample.accelZ - offsets.gravityOffset) * 32.17417;
    1f78:	2180      	movs	r1, #128	; 0x80
    1f7a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    1f7c:	0609      	lsls	r1, r1, #24
    1f7e:	1850      	adds	r0, r2, r1
    1f80:	e000      	b.n	1f84 <computeKalmanStates+0x20>
    } else {
        acceleration = (sample.accelZ - offsets.gravityOffset) * 32.17417;
    1f82:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    1f84:	4798      	blx	r3
    1f86:	68b2      	ldr	r2, [r6, #8]
    1f88:	68f3      	ldr	r3, [r6, #12]
    1f8a:	47a8      	blx	r5
    1f8c:	4a80      	ldr	r2, [pc, #512]	; (2190 <STACK_SIZE+0x190>)
    1f8e:	4b81      	ldr	r3, [pc, #516]	; (2194 <STACK_SIZE+0x194>)
    1f90:	4d81      	ldr	r5, [pc, #516]	; (2198 <STACK_SIZE+0x198>)
    1f92:	47a8      	blx	r5
    }

    double pressure = sample.altitudefeet;
    1f94:	6c23      	ldr	r3, [r4, #64]	; 0x40
    1f96:	6c64      	ldr	r4, [r4, #68]	; 0x44
    1f98:	9300      	str	r3, [sp, #0]
    1f9a:	9401      	str	r4, [sp, #4]

    if (altitude == 0) {
    1f9c:	4c7f      	ldr	r4, [pc, #508]	; (219c <STACK_SIZE+0x19c>)
    double alt_inovation, accel_inovation, acceleration;

    if (altimeter.pointingUp) {
        acceleration = (-sample.accelZ - offsets.gravityOffset) * 32.17417;
    } else {
        acceleration = (sample.accelZ - offsets.gravityOffset) * 32.17417;
    1f9e:	0006      	movs	r6, r0
    1fa0:	000f      	movs	r7, r1
    }

    double pressure = sample.altitudefeet;

    if (altitude == 0) {
    1fa2:	6820      	ldr	r0, [r4, #0]
    1fa4:	6861      	ldr	r1, [r4, #4]
    1fa6:	2200      	movs	r2, #0
    1fa8:	2300      	movs	r3, #0
    1faa:	4d7d      	ldr	r5, [pc, #500]	; (21a0 <STACK_SIZE+0x1a0>)
    1fac:	47a8      	blx	r5
    1fae:	2800      	cmp	r0, #0
    1fb0:	d003      	beq.n	1fba <computeKalmanStates+0x56>
        altitude = pressure;
    1fb2:	9a00      	ldr	r2, [sp, #0]
    1fb4:	9b01      	ldr	r3, [sp, #4]
    1fb6:	6022      	str	r2, [r4, #0]
    1fb8:	6063      	str	r3, [r4, #4]
    }

    /* Compute the innovations */
    alt_inovation = pressure - estp[0];
    1fba:	9800      	ldr	r0, [sp, #0]
    1fbc:	9901      	ldr	r1, [sp, #4]
    1fbe:	4b79      	ldr	r3, [pc, #484]	; (21a4 <STACK_SIZE+0x1a4>)
    1fc0:	4c72      	ldr	r4, [pc, #456]	; (218c <STACK_SIZE+0x18c>)
    1fc2:	681a      	ldr	r2, [r3, #0]
    1fc4:	685b      	ldr	r3, [r3, #4]
    1fc6:	47a0      	blx	r4
    accel_inovation = acceleration - estp[2];
    1fc8:	4b76      	ldr	r3, [pc, #472]	; (21a4 <STACK_SIZE+0x1a4>)
    if (altitude == 0) {
        altitude = pressure;
    }

    /* Compute the innovations */
    alt_inovation = pressure - estp[0];
    1fca:	9006      	str	r0, [sp, #24]
    1fcc:	9107      	str	r1, [sp, #28]
    accel_inovation = acceleration - estp[2];
    1fce:	691a      	ldr	r2, [r3, #16]
    1fd0:	695b      	ldr	r3, [r3, #20]
    1fd2:	0030      	movs	r0, r6
    1fd4:	0039      	movs	r1, r7
    1fd6:	47a0      	blx	r4


    /* Propagate state */
    estp[0] = phi[0][0] * altitude + phi[0][1] *velocity + phi[0][2] * accel;
    1fd8:	4b70      	ldr	r3, [pc, #448]	; (219c <STACK_SIZE+0x19c>)
    1fda:	4d6f      	ldr	r5, [pc, #444]	; (2198 <STACK_SIZE+0x198>)
    1fdc:	685c      	ldr	r4, [r3, #4]
    1fde:	681b      	ldr	r3, [r3, #0]
    1fe0:	9300      	str	r3, [sp, #0]
    1fe2:	9401      	str	r4, [sp, #4]
    1fe4:	4b70      	ldr	r3, [pc, #448]	; (21a8 <STACK_SIZE+0x1a8>)
        altitude = pressure;
    }

    /* Compute the innovations */
    alt_inovation = pressure - estp[0];
    accel_inovation = acceleration - estp[2];
    1fe6:	9008      	str	r0, [sp, #32]
    1fe8:	9109      	str	r1, [sp, #36]	; 0x24


    /* Propagate state */
    estp[0] = phi[0][0] * altitude + phi[0][1] *velocity + phi[0][2] * accel;
    1fea:	685c      	ldr	r4, [r3, #4]
    1fec:	681b      	ldr	r3, [r3, #0]
    1fee:	9800      	ldr	r0, [sp, #0]
    1ff0:	9901      	ldr	r1, [sp, #4]
    1ff2:	9302      	str	r3, [sp, #8]
    1ff4:	9403      	str	r4, [sp, #12]
    1ff6:	4b6d      	ldr	r3, [pc, #436]	; (21ac <STACK_SIZE+0x1ac>)
    1ff8:	685c      	ldr	r4, [r3, #4]
    1ffa:	681b      	ldr	r3, [r3, #0]
    1ffc:	9304      	str	r3, [sp, #16]
    1ffe:	9405      	str	r4, [sp, #20]
    2000:	4c6b      	ldr	r4, [pc, #428]	; (21b0 <STACK_SIZE+0x1b0>)
    2002:	6822      	ldr	r2, [r4, #0]
    2004:	6863      	ldr	r3, [r4, #4]
    2006:	47a8      	blx	r5
    2008:	68a2      	ldr	r2, [r4, #8]
    200a:	68e3      	ldr	r3, [r4, #12]
    200c:	0006      	movs	r6, r0
    200e:	000f      	movs	r7, r1
    2010:	9802      	ldr	r0, [sp, #8]
    2012:	9903      	ldr	r1, [sp, #12]
    2014:	47a8      	blx	r5
    2016:	0002      	movs	r2, r0
    2018:	000b      	movs	r3, r1
    201a:	0030      	movs	r0, r6
    201c:	0039      	movs	r1, r7
    201e:	4e65      	ldr	r6, [pc, #404]	; (21b4 <STACK_SIZE+0x1b4>)
    2020:	47b0      	blx	r6
    2022:	6922      	ldr	r2, [r4, #16]
    2024:	6963      	ldr	r3, [r4, #20]
    2026:	0006      	movs	r6, r0
    2028:	000f      	movs	r7, r1
    202a:	9804      	ldr	r0, [sp, #16]
    202c:	9905      	ldr	r1, [sp, #20]
    202e:	47a8      	blx	r5
    2030:	0002      	movs	r2, r0
    2032:	000b      	movs	r3, r1
    2034:	0030      	movs	r0, r6
    2036:	0039      	movs	r1, r7
    2038:	4e5e      	ldr	r6, [pc, #376]	; (21b4 <STACK_SIZE+0x1b4>)
    203a:	47b0      	blx	r6
    203c:	900a      	str	r0, [sp, #40]	; 0x28
    203e:	910b      	str	r1, [sp, #44]	; 0x2c
    2040:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    2042:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    2044:	4957      	ldr	r1, [pc, #348]	; (21a4 <STACK_SIZE+0x1a4>)
    2046:	600a      	str	r2, [r1, #0]
    2048:	604b      	str	r3, [r1, #4]
    estp[1] = phi[1][0] * altitude + phi[1][1] * velocity + phi[1][2] * accel;
    204a:	69a2      	ldr	r2, [r4, #24]
    204c:	69e3      	ldr	r3, [r4, #28]
    204e:	9800      	ldr	r0, [sp, #0]
    2050:	9901      	ldr	r1, [sp, #4]
    2052:	47a8      	blx	r5
    2054:	6a22      	ldr	r2, [r4, #32]
    2056:	6a63      	ldr	r3, [r4, #36]	; 0x24
    2058:	0006      	movs	r6, r0
    205a:	000f      	movs	r7, r1
    205c:	9802      	ldr	r0, [sp, #8]
    205e:	9903      	ldr	r1, [sp, #12]
    2060:	47a8      	blx	r5
    2062:	0002      	movs	r2, r0
    2064:	000b      	movs	r3, r1
    2066:	0030      	movs	r0, r6
    2068:	0039      	movs	r1, r7
    206a:	4e52      	ldr	r6, [pc, #328]	; (21b4 <STACK_SIZE+0x1b4>)
    206c:	47b0      	blx	r6
    206e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    2070:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    2072:	0006      	movs	r6, r0
    2074:	000f      	movs	r7, r1
    2076:	9804      	ldr	r0, [sp, #16]
    2078:	9905      	ldr	r1, [sp, #20]
    207a:	47a8      	blx	r5
    207c:	0002      	movs	r2, r0
    207e:	000b      	movs	r3, r1
    2080:	0030      	movs	r0, r6
    2082:	0039      	movs	r1, r7
    2084:	4e4b      	ldr	r6, [pc, #300]	; (21b4 <STACK_SIZE+0x1b4>)
    2086:	47b0      	blx	r6
    2088:	900c      	str	r0, [sp, #48]	; 0x30
    208a:	910d      	str	r1, [sp, #52]	; 0x34
    208c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    208e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    2090:	4944      	ldr	r1, [pc, #272]	; (21a4 <STACK_SIZE+0x1a4>)
    2092:	608a      	str	r2, [r1, #8]
    2094:	60cb      	str	r3, [r1, #12]
    estp[2] = phi[2][0] * altitude + phi[2][1] * velocity + phi[2][2] * accel;
    2096:	6b22      	ldr	r2, [r4, #48]	; 0x30
    2098:	6b63      	ldr	r3, [r4, #52]	; 0x34
    209a:	9800      	ldr	r0, [sp, #0]
    209c:	9901      	ldr	r1, [sp, #4]
    209e:	47a8      	blx	r5
    20a0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    20a2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    20a4:	0006      	movs	r6, r0
    20a6:	000f      	movs	r7, r1
    20a8:	9802      	ldr	r0, [sp, #8]
    20aa:	9903      	ldr	r1, [sp, #12]
    20ac:	47a8      	blx	r5
    20ae:	0002      	movs	r2, r0
    20b0:	000b      	movs	r3, r1
    20b2:	0030      	movs	r0, r6
    20b4:	0039      	movs	r1, r7
    20b6:	4e3f      	ldr	r6, [pc, #252]	; (21b4 <STACK_SIZE+0x1b4>)
    20b8:	47b0      	blx	r6
    20ba:	6c22      	ldr	r2, [r4, #64]	; 0x40
    20bc:	6c63      	ldr	r3, [r4, #68]	; 0x44
    20be:	0006      	movs	r6, r0
    20c0:	000f      	movs	r7, r1
    20c2:	9804      	ldr	r0, [sp, #16]
    20c4:	9905      	ldr	r1, [sp, #20]
    20c6:	47a8      	blx	r5
    20c8:	4c3a      	ldr	r4, [pc, #232]	; (21b4 <STACK_SIZE+0x1b4>)
    20ca:	0002      	movs	r2, r0
    20cc:	000b      	movs	r3, r1
    20ce:	0030      	movs	r0, r6
    20d0:	0039      	movs	r1, r7
    20d2:	47a0      	blx	r4
    20d4:	0003      	movs	r3, r0
    20d6:	000c      	movs	r4, r1
    20d8:	4a32      	ldr	r2, [pc, #200]	; (21a4 <STACK_SIZE+0x1a4>)
    20da:	9000      	str	r0, [sp, #0]
    20dc:	9101      	str	r1, [sp, #4]
    20de:	6113      	str	r3, [r2, #16]
    20e0:	6154      	str	r4, [r2, #20]

    /*
    Update state
    */
    altitude = estp[0] + kgain[0][0] * alt_inovation + kgain[0][1] * accel_inovation;
    20e2:	4c35      	ldr	r4, [pc, #212]	; (21b8 <STACK_SIZE+0x1b8>)
    20e4:	6822      	ldr	r2, [r4, #0]
    20e6:	6863      	ldr	r3, [r4, #4]
    20e8:	9806      	ldr	r0, [sp, #24]
    20ea:	9907      	ldr	r1, [sp, #28]
    20ec:	47a8      	blx	r5
    20ee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    20f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    20f2:	4e30      	ldr	r6, [pc, #192]	; (21b4 <STACK_SIZE+0x1b4>)
    20f4:	47b0      	blx	r6
    20f6:	68a2      	ldr	r2, [r4, #8]
    20f8:	68e3      	ldr	r3, [r4, #12]
    20fa:	0006      	movs	r6, r0
    20fc:	000f      	movs	r7, r1
    20fe:	9808      	ldr	r0, [sp, #32]
    2100:	9909      	ldr	r1, [sp, #36]	; 0x24
    2102:	47a8      	blx	r5
    2104:	0002      	movs	r2, r0
    2106:	000b      	movs	r3, r1
    2108:	0030      	movs	r0, r6
    210a:	0039      	movs	r1, r7
    210c:	4e29      	ldr	r6, [pc, #164]	; (21b4 <STACK_SIZE+0x1b4>)
    210e:	47b0      	blx	r6
    2110:	4b22      	ldr	r3, [pc, #136]	; (219c <STACK_SIZE+0x19c>)
    2112:	6018      	str	r0, [r3, #0]
    2114:	6059      	str	r1, [r3, #4]
    velocity = estp[1] + kgain[1][0] * alt_inovation + kgain[1][1] * accel_inovation;
    2116:	6922      	ldr	r2, [r4, #16]
    2118:	6963      	ldr	r3, [r4, #20]
    211a:	9806      	ldr	r0, [sp, #24]
    211c:	9907      	ldr	r1, [sp, #28]
    211e:	47a8      	blx	r5
    2120:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    2122:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    2124:	47b0      	blx	r6
    2126:	69a2      	ldr	r2, [r4, #24]
    2128:	69e3      	ldr	r3, [r4, #28]
    212a:	0006      	movs	r6, r0
    212c:	000f      	movs	r7, r1
    212e:	9808      	ldr	r0, [sp, #32]
    2130:	9909      	ldr	r1, [sp, #36]	; 0x24
    2132:	47a8      	blx	r5
    2134:	0002      	movs	r2, r0
    2136:	000b      	movs	r3, r1
    2138:	0030      	movs	r0, r6
    213a:	0039      	movs	r1, r7
    213c:	4e1d      	ldr	r6, [pc, #116]	; (21b4 <STACK_SIZE+0x1b4>)
    213e:	47b0      	blx	r6
    2140:	4b19      	ldr	r3, [pc, #100]	; (21a8 <STACK_SIZE+0x1a8>)
    2142:	6018      	str	r0, [r3, #0]
    2144:	6059      	str	r1, [r3, #4]
    accel =    estp[2] + kgain[2][0] * alt_inovation + kgain[2][1] * accel_inovation;
    2146:	6a22      	ldr	r2, [r4, #32]
    2148:	6a63      	ldr	r3, [r4, #36]	; 0x24
    214a:	9806      	ldr	r0, [sp, #24]
    214c:	9907      	ldr	r1, [sp, #28]
    214e:	47a8      	blx	r5
    2150:	9a00      	ldr	r2, [sp, #0]
    2152:	9b01      	ldr	r3, [sp, #4]
    2154:	47b0      	blx	r6
    2156:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    2158:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    215a:	0006      	movs	r6, r0
    215c:	000f      	movs	r7, r1
    215e:	9808      	ldr	r0, [sp, #32]
    2160:	9909      	ldr	r1, [sp, #36]	; 0x24
    2162:	47a8      	blx	r5
    2164:	4c13      	ldr	r4, [pc, #76]	; (21b4 <STACK_SIZE+0x1b4>)
    2166:	0002      	movs	r2, r0
    2168:	000b      	movs	r3, r1
    216a:	0030      	movs	r0, r6
    216c:	0039      	movs	r1, r7
    216e:	47a0      	blx	r4
    2170:	4b0e      	ldr	r3, [pc, #56]	; (21ac <STACK_SIZE+0x1ac>)
    2172:	6018      	str	r0, [r3, #0]
    2174:	6059      	str	r1, [r3, #4]

}
    2176:	b00f      	add	sp, #60	; 0x3c
    2178:	bdf0      	pop	{r4, r5, r6, r7, pc}
    217a:	46c0      	nop			; (mov r8, r8)
    217c:	20000528 	.word	0x20000528
    2180:	200007e8 	.word	0x200007e8
    2184:	000060a9 	.word	0x000060a9
    2188:	200004d8 	.word	0x200004d8
    218c:	00005861 	.word	0x00005861
    2190:	33daf8df 	.word	0x33daf8df
    2194:	4040164b 	.word	0x4040164b
    2198:	0000536d 	.word	0x0000536d
    219c:	200006b8 	.word	0x200006b8
    21a0:	00003da5 	.word	0x00003da5
    21a4:	200006c0 	.word	0x200006c0
    21a8:	200006b0 	.word	0x200006b0
    21ac:	200006a8 	.word	0x200006a8
    21b0:	20000010 	.word	0x20000010
    21b4:	000044cd 	.word	0x000044cd
    21b8:	20000650 	.word	0x20000650

000021bc <makePage>:
u8_t pageLocation;

bool pageReady;


void makePage(u8_t bytesToWrite, u8_t* data) {
    21bc:	b5f0      	push	{r4, r5, r6, r7, lr}


    u8_t location = pageLocation;
    21be:	4a1f      	ldr	r2, [pc, #124]	; (223c <makePage+0x80>)
    21c0:	7815      	ldrb	r5, [r2, #0]
    u8_t bytesWritten = 0;

    if ((location + bytesToWrite) > 0xFF) {
    21c2:	1943      	adds	r3, r0, r5
    21c4:	2bff      	cmp	r3, #255	; 0xff
    21c6:	dc03      	bgt.n	21d0 <makePage+0x14>
    21c8:	2300      	movs	r3, #0
            pageLocation = dataByte + 1;
        }
        pageReady = true;

    } else {
        for (u16_t dataByte = 0; dataByte <= bytesToWrite; ++dataByte) {
    21ca:	b280      	uxth	r0, r0
            pageBuffer[(dataByte + location)] = data[dataByte];
    21cc:	4c1c      	ldr	r4, [pc, #112]	; (2240 <makePage+0x84>)
    21ce:	e029      	b.n	2224 <makePage+0x68>
    21d0:	2300      	movs	r3, #0
    21d2:	4e1b      	ldr	r6, [pc, #108]	; (2240 <makePage+0x84>)

    u8_t location = pageLocation;
    u8_t bytesWritten = 0;

    if ((location + bytesToWrite) > 0xFF) {
        for (u16_t dataByte = 0; (dataByte + location) <= 0xFF; ++dataByte) {
    21d4:	195f      	adds	r7, r3, r5
    21d6:	b2dc      	uxtb	r4, r3
    21d8:	46b4      	mov	ip, r6
    21da:	2fff      	cmp	r7, #255	; 0xff
    21dc:	dc04      	bgt.n	21e8 <makePage+0x2c>
            pageBuffer[(dataByte + location)] = data[dataByte];
    21de:	5ccc      	ldrb	r4, [r1, r3]

    u8_t location = pageLocation;
    u8_t bytesWritten = 0;

    if ((location + bytesToWrite) > 0xFF) {
        for (u16_t dataByte = 0; (dataByte + location) <= 0xFF; ++dataByte) {
    21e0:	3301      	adds	r3, #1
            pageBuffer[(dataByte + location)] = data[dataByte];
    21e2:	55f4      	strb	r4, [r6, r7]

    u8_t location = pageLocation;
    u8_t bytesWritten = 0;

    if ((location + bytesToWrite) > 0xFF) {
        for (u16_t dataByte = 0; (dataByte + location) <= 0xFF; ++dataByte) {
    21e4:	b29b      	uxth	r3, r3
    21e6:	e7f5      	b.n	21d4 <makePage+0x18>
            pageBuffer[(dataByte + location)] = data[dataByte];
            bytesWritten++;
        }
        pageLocation = 0x00;
    21e8:	2300      	movs	r3, #0
        for(u16_t i = 0; i <= 0xFF; ++i) {
            pageToWrite[i] = pageBuffer[i];
    21ea:	4f16      	ldr	r7, [pc, #88]	; (2244 <makePage+0x88>)
    if ((location + bytesToWrite) > 0xFF) {
        for (u16_t dataByte = 0; (dataByte + location) <= 0xFF; ++dataByte) {
            pageBuffer[(dataByte + location)] = data[dataByte];
            bytesWritten++;
        }
        pageLocation = 0x00;
    21ec:	7013      	strb	r3, [r2, #0]
        for(u16_t i = 0; i <= 0xFF; ++i) {
            pageToWrite[i] = pageBuffer[i];
    21ee:	4665      	mov	r5, ip
    21f0:	18ed      	adds	r5, r5, r3
    21f2:	782e      	ldrb	r6, [r5, #0]
    21f4:	54fe      	strb	r6, [r7, r3]
            pageBuffer[i] = 0;
    21f6:	2600      	movs	r6, #0
    21f8:	702e      	strb	r6, [r5, #0]
        for (u16_t dataByte = 0; (dataByte + location) <= 0xFF; ++dataByte) {
            pageBuffer[(dataByte + location)] = data[dataByte];
            bytesWritten++;
        }
        pageLocation = 0x00;
        for(u16_t i = 0; i <= 0xFF; ++i) {
    21fa:	2580      	movs	r5, #128	; 0x80
    21fc:	3301      	adds	r3, #1
    21fe:	006d      	lsls	r5, r5, #1
    2200:	42ab      	cmp	r3, r5
    2202:	d1f4      	bne.n	21ee <makePage+0x32>
    2204:	2300      	movs	r3, #0
    2206:	1c5d      	adds	r5, r3, #1
            pageToWrite[i] = pageBuffer[i];
            pageBuffer[i] = 0;
        }
        for (u16_t dataByte = 0; bytesWritten < bytesToWrite; ++dataByte) {
    2208:	4284      	cmp	r4, r0
    220a:	d207      	bcs.n	221c <makePage+0x60>
            pageBuffer[dataByte] = data[bytesWritten];
    220c:	4667      	mov	r7, ip
    220e:	5d0e      	ldrb	r6, [r1, r4]
            bytesWritten++;
    2210:	3401      	adds	r4, #1
        for(u16_t i = 0; i <= 0xFF; ++i) {
            pageToWrite[i] = pageBuffer[i];
            pageBuffer[i] = 0;
        }
        for (u16_t dataByte = 0; bytesWritten < bytesToWrite; ++dataByte) {
            pageBuffer[dataByte] = data[bytesWritten];
    2212:	54fe      	strb	r6, [r7, r3]
            bytesWritten++;
    2214:	b2e4      	uxtb	r4, r4
            pageLocation = dataByte + 1;
    2216:	7015      	strb	r5, [r2, #0]
    2218:	002b      	movs	r3, r5
    221a:	e7f4      	b.n	2206 <makePage+0x4a>
        }
        pageReady = true;
    221c:	2201      	movs	r2, #1
    221e:	4b0a      	ldr	r3, [pc, #40]	; (2248 <makePage+0x8c>)
    2220:	701a      	strb	r2, [r3, #0]
    2222:	e009      	b.n	2238 <makePage+0x7c>

    } else {
        for (u16_t dataByte = 0; dataByte <= bytesToWrite; ++dataByte) {
    2224:	4283      	cmp	r3, r0
    2226:	d807      	bhi.n	2238 <makePage+0x7c>
            pageBuffer[(dataByte + location)] = data[dataByte];
    2228:	5ccf      	ldrb	r7, [r1, r3]
    222a:	18e6      	adds	r6, r4, r3
    222c:	5577      	strb	r7, [r6, r5]
            bytesWritten++;
            pageLocation = location + dataByte;
    222e:	18ee      	adds	r6, r5, r3
            pageLocation = dataByte + 1;
        }
        pageReady = true;

    } else {
        for (u16_t dataByte = 0; dataByte <= bytesToWrite; ++dataByte) {
    2230:	3301      	adds	r3, #1
            pageBuffer[(dataByte + location)] = data[dataByte];
            bytesWritten++;
            pageLocation = location + dataByte;
    2232:	7016      	strb	r6, [r2, #0]
            pageLocation = dataByte + 1;
        }
        pageReady = true;

    } else {
        for (u16_t dataByte = 0; dataByte <= bytesToWrite; ++dataByte) {
    2234:	b29b      	uxth	r3, r3
    2236:	e7f5      	b.n	2224 <makePage+0x68>
            pageBuffer[(dataByte + location)] = data[dataByte];
            bytesWritten++;
            pageLocation = location + dataByte;
        }
    }
}
    2238:	bdf0      	pop	{r4, r5, r6, r7, pc}
    223a:	46c0      	nop			; (mov r8, r8)
    223c:	200007e4 	.word	0x200007e4
    2240:	2000053d 	.word	0x2000053d
    2244:	200006d8 	.word	0x200006d8
    2248:	200007d8 	.word	0x200007d8

0000224c <logFlight>:


void logFlight() {
    224c:	b51f      	push	{r0, r1, r2, r3, r4, lr}

    u8_t bytesToSend = 16;
    u8_t dataToSend[16];

    dataToSend[0] = FLIGHT_LOG;
    224e:	2346      	movs	r3, #70	; 0x46
    2250:	466a      	mov	r2, sp
    2252:	7013      	strb	r3, [r2, #0]
    dataToSend[1] = 0;
    2254:	2300      	movs	r3, #0

    dataToSend[2] = offsets.offsetBufferTime >> 0;
    2256:	4669      	mov	r1, sp
    dataToSend[3] = offsets.offsetBufferTime >> 8;
    2258:	4668      	mov	r0, sp

    u8_t bytesToSend = 16;
    u8_t dataToSend[16];

    dataToSend[0] = FLIGHT_LOG;
    dataToSend[1] = 0;
    225a:	7053      	strb	r3, [r2, #1]

    dataToSend[2] = offsets.offsetBufferTime >> 0;
    225c:	4a10      	ldr	r2, [pc, #64]	; (22a0 <logFlight+0x54>)
    225e:	6813      	ldr	r3, [r2, #0]
    2260:	708b      	strb	r3, [r1, #2]
    dataToSend[3] = offsets.offsetBufferTime >> 8;
    2262:	0a19      	lsrs	r1, r3, #8
    2264:	70c1      	strb	r1, [r0, #3]
    dataToSend[4] = offsets.offsetBufferTime >> 16;
    2266:	0c19      	lsrs	r1, r3, #16
    dataToSend[5] = offsets.offsetBufferTime >> 24;
    2268:	0e1b      	lsrs	r3, r3, #24
    226a:	7143      	strb	r3, [r0, #5]

    dataToSend[6] = offsets.groundOffset >> 0;
    226c:	6993      	ldr	r3, [r2, #24]
    dataToSend[0] = FLIGHT_LOG;
    dataToSend[1] = 0;

    dataToSend[2] = offsets.offsetBufferTime >> 0;
    dataToSend[3] = offsets.offsetBufferTime >> 8;
    dataToSend[4] = offsets.offsetBufferTime >> 16;
    226e:	7101      	strb	r1, [r0, #4]
    dataToSend[5] = offsets.offsetBufferTime >> 24;

    dataToSend[6] = offsets.groundOffset >> 0;
    dataToSend[7] = offsets.groundOffset >> 8;
    2270:	0a19      	lsrs	r1, r3, #8
    dataToSend[2] = offsets.offsetBufferTime >> 0;
    dataToSend[3] = offsets.offsetBufferTime >> 8;
    dataToSend[4] = offsets.offsetBufferTime >> 16;
    dataToSend[5] = offsets.offsetBufferTime >> 24;

    dataToSend[6] = offsets.groundOffset >> 0;
    2272:	7183      	strb	r3, [r0, #6]
    dataToSend[7] = offsets.groundOffset >> 8;
    2274:	71c1      	strb	r1, [r0, #7]
    dataToSend[8] = offsets.groundOffset >> 16;
    2276:	0c19      	lsrs	r1, r3, #16
    dataToSend[9] = offsets.groundOffset >> 24;
    2278:	0e1b      	lsrs	r3, r3, #24
    227a:	7243      	strb	r3, [r0, #9]

    dataToSend[10] = offsets.groundTemperature >> 0;
    227c:	6a13      	ldr	r3, [r2, #32]
    dataToSend[4] = offsets.offsetBufferTime >> 16;
    dataToSend[5] = offsets.offsetBufferTime >> 24;

    dataToSend[6] = offsets.groundOffset >> 0;
    dataToSend[7] = offsets.groundOffset >> 8;
    dataToSend[8] = offsets.groundOffset >> 16;
    227e:	7201      	strb	r1, [r0, #8]
    dataToSend[9] = offsets.groundOffset >> 24;

    dataToSend[10] = offsets.groundTemperature >> 0;
    dataToSend[11] = offsets.groundTemperature >> 8;
    2280:	0a1a      	lsrs	r2, r3, #8
    dataToSend[6] = offsets.groundOffset >> 0;
    dataToSend[7] = offsets.groundOffset >> 8;
    dataToSend[8] = offsets.groundOffset >> 16;
    dataToSend[9] = offsets.groundOffset >> 24;

    dataToSend[10] = offsets.groundTemperature >> 0;
    2282:	7283      	strb	r3, [r0, #10]
    dataToSend[11] = offsets.groundTemperature >> 8;
    2284:	72c2      	strb	r2, [r0, #11]
    dataToSend[12] = offsets.groundTemperature >> 16;
    2286:	0c1a      	lsrs	r2, r3, #16
    dataToSend[13] = offsets.groundTemperature >> 24;
    2288:	0e1b      	lsrs	r3, r3, #24
    228a:	7343      	strb	r3, [r0, #13]

    //dataToSend[14] = accel >> 0;
    dataToSend[15] = 0xfe;
    228c:	23fe      	movs	r3, #254	; 0xfe
    dataToSend[8] = offsets.groundOffset >> 16;
    dataToSend[9] = offsets.groundOffset >> 24;

    dataToSend[10] = offsets.groundTemperature >> 0;
    dataToSend[11] = offsets.groundTemperature >> 8;
    dataToSend[12] = offsets.groundTemperature >> 16;
    228e:	7302      	strb	r2, [r0, #12]
    dataToSend[13] = offsets.groundTemperature >> 24;

    //dataToSend[14] = accel >> 0;
    dataToSend[15] = 0xfe;
    2290:	73c3      	strb	r3, [r0, #15]
    dataToSend[5] = offsets.offsetBufferTime >> 24;

    dataToSend[6] = offsets.groundOffset >> 0;
    dataToSend[7] = offsets.groundOffset >> 8;
    dataToSend[8] = offsets.groundOffset >> 16;
    dataToSend[9] = offsets.groundOffset >> 24;
    2292:	4669      	mov	r1, sp
    dataToSend[13] = offsets.groundTemperature >> 24;

    //dataToSend[14] = accel >> 0;
    dataToSend[15] = 0xfe;

    makePage(bytesToSend, dataToSend);
    2294:	2010      	movs	r0, #16
    2296:	4b03      	ldr	r3, [pc, #12]	; (22a4 <logFlight+0x58>)
    2298:	4798      	blx	r3
}
    229a:	b005      	add	sp, #20
    229c:	bd00      	pop	{pc}
    229e:	46c0      	nop			; (mov r8, r8)
    22a0:	200004d8 	.word	0x200004d8
    22a4:	000021bd 	.word	0x000021bd

000022a8 <logEvent>:

void logEvent(u8_t eventType) {
    22a8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

    u8_t bytesToSend = 12;
    u8_t dataToSend[12];

    dataToSend[0] = EVENT_LOG;
    22aa:	2345      	movs	r3, #69	; 0x45
    dataToSend[1] = eventType;
    dataToSend[2] = sample.sampleTick >> 0;
    22ac:	4d10      	ldr	r5, [pc, #64]	; (22f0 <logEvent+0x48>)
void logEvent(u8_t eventType) {

    u8_t bytesToSend = 12;
    u8_t dataToSend[12];

    dataToSend[0] = EVENT_LOG;
    22ae:	ac01      	add	r4, sp, #4
    22b0:	7023      	strb	r3, [r4, #0]
    dataToSend[1] = eventType;
    dataToSend[2] = sample.sampleTick >> 0;
    22b2:	686b      	ldr	r3, [r5, #4]
    dataToSend[3] = sample.sampleTick >> 8;
    dataToSend[4] = sample.sampleTick >> 16;
    dataToSend[5] = sample.sampleTick >> 24;

    dataToSend[6] = altitudeAGL() >> 0;
    22b4:	4e0f      	ldr	r6, [pc, #60]	; (22f4 <logEvent+0x4c>)
    u8_t dataToSend[12];

    dataToSend[0] = EVENT_LOG;
    dataToSend[1] = eventType;
    dataToSend[2] = sample.sampleTick >> 0;
    dataToSend[3] = sample.sampleTick >> 8;
    22b6:	0a1a      	lsrs	r2, r3, #8
    u8_t bytesToSend = 12;
    u8_t dataToSend[12];

    dataToSend[0] = EVENT_LOG;
    dataToSend[1] = eventType;
    dataToSend[2] = sample.sampleTick >> 0;
    22b8:	70a3      	strb	r3, [r4, #2]
    dataToSend[3] = sample.sampleTick >> 8;
    22ba:	70e2      	strb	r2, [r4, #3]
    dataToSend[4] = sample.sampleTick >> 16;
    22bc:	0c1a      	lsrs	r2, r3, #16
    dataToSend[5] = sample.sampleTick >> 24;
    22be:	0e1b      	lsrs	r3, r3, #24

    dataToSend[0] = EVENT_LOG;
    dataToSend[1] = eventType;
    dataToSend[2] = sample.sampleTick >> 0;
    dataToSend[3] = sample.sampleTick >> 8;
    dataToSend[4] = sample.sampleTick >> 16;
    22c0:	7122      	strb	r2, [r4, #4]
    dataToSend[5] = sample.sampleTick >> 24;
    22c2:	7163      	strb	r3, [r4, #5]

    u8_t bytesToSend = 12;
    u8_t dataToSend[12];

    dataToSend[0] = EVENT_LOG;
    dataToSend[1] = eventType;
    22c4:	7060      	strb	r0, [r4, #1]
    dataToSend[2] = sample.sampleTick >> 0;
    dataToSend[3] = sample.sampleTick >> 8;
    dataToSend[4] = sample.sampleTick >> 16;
    dataToSend[5] = sample.sampleTick >> 24;

    dataToSend[6] = altitudeAGL() >> 0;
    22c6:	47b0      	blx	r6
    22c8:	71a0      	strb	r0, [r4, #6]
    dataToSend[7] = altitudeAGL() >> 8;
    22ca:	47b0      	blx	r6
    22cc:	1200      	asrs	r0, r0, #8
    22ce:	71e0      	strb	r0, [r4, #7]
    dataToSend[8] = altitudeAGL() >> 16;
    22d0:	47b0      	blx	r6
    22d2:	1400      	asrs	r0, r0, #16
    22d4:	7220      	strb	r0, [r4, #8]
    dataToSend[9] = altitudeAGL() >> 24;
    22d6:	47b0      	blx	r6
    22d8:	1600      	asrs	r0, r0, #24
    22da:	7260      	strb	r0, [r4, #9]

    dataToSend[10] = sample.voltage.batV >> 0;
    22dc:	892b      	ldrh	r3, [r5, #8]
    dataToSend[11] = sample.voltage.batV >> 8;

    makePage(bytesToSend, dataToSend);
    22de:	0021      	movs	r1, r4
    dataToSend[6] = altitudeAGL() >> 0;
    dataToSend[7] = altitudeAGL() >> 8;
    dataToSend[8] = altitudeAGL() >> 16;
    dataToSend[9] = altitudeAGL() >> 24;

    dataToSend[10] = sample.voltage.batV >> 0;
    22e0:	72a3      	strb	r3, [r4, #10]
    dataToSend[11] = sample.voltage.batV >> 8;
    22e2:	0a1b      	lsrs	r3, r3, #8
    22e4:	72e3      	strb	r3, [r4, #11]

    makePage(bytesToSend, dataToSend);
    22e6:	200c      	movs	r0, #12
    22e8:	4b03      	ldr	r3, [pc, #12]	; (22f8 <logEvent+0x50>)
    22ea:	4798      	blx	r3

}
    22ec:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
    22ee:	46c0      	nop			; (mov r8, r8)
    22f0:	200007e8 	.word	0x200007e8
    22f4:	00000af5 	.word	0x00000af5
    22f8:	000021bd 	.word	0x000021bd

000022fc <logSensors>:

void logSensors() {

    writeLog = false;
    22fc:	2200      	movs	r2, #0
    22fe:	4b4c      	ldr	r3, [pc, #304]	; (2430 <logSensors+0x134>)

    makePage(bytesToSend, dataToSend);

}

void logSensors() {
    2300:	b5f0      	push	{r4, r5, r6, r7, lr}

    writeLog = false;
    2302:	701a      	strb	r2, [r3, #0]

    u8_t bytesToSend = 24;
    u8_t dataToSend[24];

    dataToSend[0] = SENSOR_LOG;
    2304:	2353      	movs	r3, #83	; 0x53

    makePage(bytesToSend, dataToSend);

}

void logSensors() {
    2306:	b08b      	sub	sp, #44	; 0x2c
    writeLog = false;

    u8_t bytesToSend = 24;
    u8_t dataToSend[24];

    dataToSend[0] = SENSOR_LOG;
    2308:	ac04      	add	r4, sp, #16
    230a:	7023      	strb	r3, [r4, #0]

    dataToSend[1] = sample.sampleTick >> 0;
    230c:	4b49      	ldr	r3, [pc, #292]	; (2434 <logSensors+0x138>)
    dataToSend[2] = sample.sampleTick >> 8;
    dataToSend[3] = sample.sampleTick >> 16;
    dataToSend[4] = sample.sampleTick >> 24;

    dataToSend[5] = altitudeAGL() >> 0;
    230e:	4e4a      	ldr	r6, [pc, #296]	; (2438 <logSensors+0x13c>)
    u8_t bytesToSend = 24;
    u8_t dataToSend[24];

    dataToSend[0] = SENSOR_LOG;

    dataToSend[1] = sample.sampleTick >> 0;
    2310:	685b      	ldr	r3, [r3, #4]
    dataToSend[2] = sample.sampleTick >> 8;
    2312:	0a1a      	lsrs	r2, r3, #8
    u8_t bytesToSend = 24;
    u8_t dataToSend[24];

    dataToSend[0] = SENSOR_LOG;

    dataToSend[1] = sample.sampleTick >> 0;
    2314:	7063      	strb	r3, [r4, #1]
    dataToSend[2] = sample.sampleTick >> 8;
    2316:	70a2      	strb	r2, [r4, #2]
    dataToSend[3] = sample.sampleTick >> 16;
    2318:	0c1a      	lsrs	r2, r3, #16
    dataToSend[4] = sample.sampleTick >> 24;
    231a:	0e1b      	lsrs	r3, r3, #24

    dataToSend[0] = SENSOR_LOG;

    dataToSend[1] = sample.sampleTick >> 0;
    dataToSend[2] = sample.sampleTick >> 8;
    dataToSend[3] = sample.sampleTick >> 16;
    231c:	70e2      	strb	r2, [r4, #3]
    dataToSend[4] = sample.sampleTick >> 24;
    231e:	7123      	strb	r3, [r4, #4]

    dataToSend[5] = altitudeAGL() >> 0;
    2320:	47b0      	blx	r6
    2322:	7160      	strb	r0, [r4, #5]
    dataToSend[6] = altitudeAGL() >> 8;
    2324:	47b0      	blx	r6
    2326:	1200      	asrs	r0, r0, #8
    2328:	71a0      	strb	r0, [r4, #6]
    dataToSend[7] = altitudeAGL() >> 16;
    232a:	47b0      	blx	r6
    232c:	1400      	asrs	r0, r0, #16
    232e:	71e0      	strb	r0, [r4, #7]
    dataToSend[8] = altitudeAGL() >> 24;
    2330:	47b0      	blx	r6

    volatile float fractionalAccel = accel - (int16_t)(accel);
    2332:	4b42      	ldr	r3, [pc, #264]	; (243c <logSensors+0x140>)
    dataToSend[4] = sample.sampleTick >> 24;

    dataToSend[5] = altitudeAGL() >> 0;
    dataToSend[6] = altitudeAGL() >> 8;
    dataToSend[7] = altitudeAGL() >> 16;
    dataToSend[8] = altitudeAGL() >> 24;
    2334:	1600      	asrs	r0, r0, #24

    volatile float fractionalAccel = accel - (int16_t)(accel);
    2336:	681e      	ldr	r6, [r3, #0]
    2338:	685f      	ldr	r7, [r3, #4]
    dataToSend[4] = sample.sampleTick >> 24;

    dataToSend[5] = altitudeAGL() >> 0;
    dataToSend[6] = altitudeAGL() >> 8;
    dataToSend[7] = altitudeAGL() >> 16;
    dataToSend[8] = altitudeAGL() >> 24;
    233a:	7220      	strb	r0, [r4, #8]

    volatile float fractionalAccel = accel - (int16_t)(accel);
    233c:	0039      	movs	r1, r7
    233e:	4b40      	ldr	r3, [pc, #256]	; (2440 <logSensors+0x144>)
    2340:	0030      	movs	r0, r6
    2342:	4798      	blx	r3
    2344:	b203      	sxth	r3, r0
    2346:	001d      	movs	r5, r3
    2348:	0018      	movs	r0, r3
    234a:	4b3e      	ldr	r3, [pc, #248]	; (2444 <logSensors+0x148>)
    234c:	4798      	blx	r3
    234e:	0002      	movs	r2, r0
    2350:	000b      	movs	r3, r1
    2352:	0030      	movs	r0, r6
    2354:	0039      	movs	r1, r7
    2356:	4e3c      	ldr	r6, [pc, #240]	; (2448 <logSensors+0x14c>)
    2358:	47b0      	blx	r6
    235a:	4b3c      	ldr	r3, [pc, #240]	; (244c <logSensors+0x150>)
    235c:	4798      	blx	r3
    235e:	9003      	str	r0, [sp, #12]
    volatile int16_t fractAccelPart = fractionalAccel * 1000;
    2360:	9803      	ldr	r0, [sp, #12]
    2362:	4b3b      	ldr	r3, [pc, #236]	; (2450 <logSensors+0x154>)
    2364:	493b      	ldr	r1, [pc, #236]	; (2454 <logSensors+0x158>)
    2366:	4798      	blx	r3
    2368:	4f3b      	ldr	r7, [pc, #236]	; (2458 <logSensors+0x15c>)
    236a:	47b8      	blx	r7
    236c:	ab02      	add	r3, sp, #8
    236e:	b200      	sxth	r0, r0
    2370:	8058      	strh	r0, [r3, #2]

    dataToSend[9] = (int16_t)(accel) >> 0;
    dataToSend[10] = (int16_t)(accel) >> 8;
    dataToSend[11] = fractAccelPart >> 0;
    2372:	885a      	ldrh	r2, [r3, #2]
    dataToSend[6] = altitudeAGL() >> 8;
    dataToSend[7] = altitudeAGL() >> 16;
    dataToSend[8] = altitudeAGL() >> 24;

    volatile float fractionalAccel = accel - (int16_t)(accel);
    volatile int16_t fractAccelPart = fractionalAccel * 1000;
    2374:	3302      	adds	r3, #2

    dataToSend[9] = (int16_t)(accel) >> 0;
    dataToSend[10] = (int16_t)(accel) >> 8;
    dataToSend[11] = fractAccelPart >> 0;
    dataToSend[12] = fractAccelPart >> 8;
    2376:	881b      	ldrh	r3, [r3, #0]

    volatile float fractionalAccel = accel - (int16_t)(accel);
    volatile int16_t fractAccelPart = fractionalAccel * 1000;

    dataToSend[9] = (int16_t)(accel) >> 0;
    dataToSend[10] = (int16_t)(accel) >> 8;
    2378:	1228      	asrs	r0, r5, #8
    dataToSend[11] = fractAccelPart >> 0;
    dataToSend[12] = fractAccelPart >> 8;
    237a:	0a1b      	lsrs	r3, r3, #8
    237c:	7323      	strb	r3, [r4, #12]


    float fractionalVelocity = velocity - (int16_t)(velocity);
    237e:	4b37      	ldr	r3, [pc, #220]	; (245c <logSensors+0x160>)
    dataToSend[8] = altitudeAGL() >> 24;

    volatile float fractionalAccel = accel - (int16_t)(accel);
    volatile int16_t fractAccelPart = fractionalAccel * 1000;

    dataToSend[9] = (int16_t)(accel) >> 0;
    2380:	7265      	strb	r5, [r4, #9]
    dataToSend[10] = (int16_t)(accel) >> 8;
    2382:	72a0      	strb	r0, [r4, #10]
    dataToSend[11] = fractAccelPart >> 0;
    2384:	72e2      	strb	r2, [r4, #11]
    dataToSend[12] = fractAccelPart >> 8;


    float fractionalVelocity = velocity - (int16_t)(velocity);
    2386:	681a      	ldr	r2, [r3, #0]
    2388:	685b      	ldr	r3, [r3, #4]
    238a:	9200      	str	r2, [sp, #0]
    238c:	9301      	str	r3, [sp, #4]
    238e:	0010      	movs	r0, r2
    2390:	0019      	movs	r1, r3
    2392:	4b2b      	ldr	r3, [pc, #172]	; (2440 <logSensors+0x144>)
    2394:	4798      	blx	r3
    2396:	b206      	sxth	r6, r0
    int16_t fractVelocityPart = fractionalVelocity * 1000;
    2398:	4b2a      	ldr	r3, [pc, #168]	; (2444 <logSensors+0x148>)
    239a:	0030      	movs	r0, r6
    239c:	4798      	blx	r3
    239e:	4d2a      	ldr	r5, [pc, #168]	; (2448 <logSensors+0x14c>)
    23a0:	0002      	movs	r2, r0
    23a2:	000b      	movs	r3, r1
    23a4:	9800      	ldr	r0, [sp, #0]
    23a6:	9901      	ldr	r1, [sp, #4]
    23a8:	47a8      	blx	r5
    23aa:	4b28      	ldr	r3, [pc, #160]	; (244c <logSensors+0x150>)
    23ac:	4798      	blx	r3
    23ae:	4b28      	ldr	r3, [pc, #160]	; (2450 <logSensors+0x154>)
    23b0:	4928      	ldr	r1, [pc, #160]	; (2454 <logSensors+0x158>)
    23b2:	4798      	blx	r3
    23b4:	47b8      	blx	r7

    dataToSend[13] = (int16_t)(velocity) >> 0;
    23b6:	7366      	strb	r6, [r4, #13]
    dataToSend[11] = fractAccelPart >> 0;
    dataToSend[12] = fractAccelPart >> 8;


    float fractionalVelocity = velocity - (int16_t)(velocity);
    int16_t fractVelocityPart = fractionalVelocity * 1000;
    23b8:	b203      	sxth	r3, r0

    dataToSend[13] = (int16_t)(velocity) >> 0;
    dataToSend[14] = (int16_t)(velocity) >> 8;
    23ba:	1236      	asrs	r6, r6, #8
    23bc:	73a6      	strb	r6, [r4, #14]
    dataToSend[15] = fractVelocityPart >> 0;
    23be:	73e3      	strb	r3, [r4, #15]
    dataToSend[16] = fractVelocityPart >> 8;
    23c0:	121b      	asrs	r3, r3, #8
    23c2:	7423      	strb	r3, [r4, #16]

//     if ( ((fractVelocityPart < 0) & ((int16_t)(velocity) > 0)) | ((fractVelocityPart > 0) & ((int16_t)(velocity) < 0)) ) {
//         beep(200);
//     }

    dataToSend[17] = (u32_t)sample.altitudefeet >> 0;
    23c4:	4b1b      	ldr	r3, [pc, #108]	; (2434 <logSensors+0x138>)
    23c6:	6c18      	ldr	r0, [r3, #64]	; 0x40
    23c8:	6c59      	ldr	r1, [r3, #68]	; 0x44
    23ca:	4b25      	ldr	r3, [pc, #148]	; (2460 <logSensors+0x164>)
    23cc:	4798      	blx	r3
    dataToSend[18] = (u32_t)sample.altitudefeet >> 8;
    23ce:	0a03      	lsrs	r3, r0, #8
    23d0:	74a3      	strb	r3, [r4, #18]
    dataToSend[19] = (u32_t)sample.altitudefeet >> 16;
    23d2:	0c03      	lsrs	r3, r0, #16
    23d4:	74e3      	strb	r3, [r4, #19]
    dataToSend[20] = (u32_t)sample.altitudefeet >> 24;

    float fractionalAccelraw = sample.accelZ - (int16_t)(sample.accelZ);
    23d6:	4b17      	ldr	r3, [pc, #92]	; (2434 <logSensors+0x138>)

//     if ( ((fractVelocityPart < 0) & ((int16_t)(velocity) > 0)) | ((fractVelocityPart > 0) & ((int16_t)(velocity) < 0)) ) {
//         beep(200);
//     }

    dataToSend[17] = (u32_t)sample.altitudefeet >> 0;
    23d8:	7460      	strb	r0, [r4, #17]
    dataToSend[18] = (u32_t)sample.altitudefeet >> 8;
    dataToSend[19] = (u32_t)sample.altitudefeet >> 16;
    dataToSend[20] = (u32_t)sample.altitudefeet >> 24;

    float fractionalAccelraw = sample.accelZ - (int16_t)(sample.accelZ);
    23da:	6a9d      	ldr	r5, [r3, #40]	; 0x28
//     }

    dataToSend[17] = (u32_t)sample.altitudefeet >> 0;
    dataToSend[18] = (u32_t)sample.altitudefeet >> 8;
    dataToSend[19] = (u32_t)sample.altitudefeet >> 16;
    dataToSend[20] = (u32_t)sample.altitudefeet >> 24;
    23dc:	0e00      	lsrs	r0, r0, #24
    23de:	7520      	strb	r0, [r4, #20]

    float fractionalAccelraw = sample.accelZ - (int16_t)(sample.accelZ);
    23e0:	1c28      	adds	r0, r5, #0
    23e2:	47b8      	blx	r7
    23e4:	b200      	sxth	r0, r0
    u8_t fractAccelRawPart = fractionalAccelraw;

    dataToSend[21] = (int16_t)(sample.accelZ) >> 0;
    dataToSend[22] = (int16_t)(sample.accelZ) >> 8;
    23e6:	1203      	asrs	r3, r0, #8
    23e8:	75a3      	strb	r3, [r4, #22]
    dataToSend[20] = (u32_t)sample.altitudefeet >> 24;

    float fractionalAccelraw = sample.accelZ - (int16_t)(sample.accelZ);
    u8_t fractAccelRawPart = fractionalAccelraw;

    dataToSend[21] = (int16_t)(sample.accelZ) >> 0;
    23ea:	7560      	strb	r0, [r4, #21]
    dataToSend[22] = (int16_t)(sample.accelZ) >> 8;
    dataToSend[23] = fractAccelRawPart;
    23ec:	4b1d      	ldr	r3, [pc, #116]	; (2464 <logSensors+0x168>)
    23ee:	4798      	blx	r3
    23f0:	4b1d      	ldr	r3, [pc, #116]	; (2468 <logSensors+0x16c>)
    23f2:	1c01      	adds	r1, r0, #0
    23f4:	1c28      	adds	r0, r5, #0
    23f6:	4798      	blx	r3
    23f8:	4b1c      	ldr	r3, [pc, #112]	; (246c <logSensors+0x170>)
    23fa:	4798      	blx	r3
    //dataToSend[21] = my_altimeter->myAnalogAccelerometer.analogRaw >> 0;
    //dataToSend[22] = my_altimeter->myAnalogAccelerometer.analogRaw >> 8;



    makePage(bytesToSend, dataToSend);
    23fc:	4b1c      	ldr	r3, [pc, #112]	; (2470 <logSensors+0x174>)
    float fractionalAccelraw = sample.accelZ - (int16_t)(sample.accelZ);
    u8_t fractAccelRawPart = fractionalAccelraw;

    dataToSend[21] = (int16_t)(sample.accelZ) >> 0;
    dataToSend[22] = (int16_t)(sample.accelZ) >> 8;
    dataToSend[23] = fractAccelRawPart;
    23fe:	75e0      	strb	r0, [r4, #23]
    //dataToSend[21] = my_altimeter->myAnalogAccelerometer.analogRaw >> 0;
    //dataToSend[22] = my_altimeter->myAnalogAccelerometer.analogRaw >> 8;



    makePage(bytesToSend, dataToSend);
    2400:	0021      	movs	r1, r4
    2402:	2018      	movs	r0, #24
    2404:	4798      	blx	r3

    if (pageReady) {
    2406:	4b1b      	ldr	r3, [pc, #108]	; (2474 <logSensors+0x178>)
    2408:	781a      	ldrb	r2, [r3, #0]
    240a:	2a00      	cmp	r2, #0
    240c:	d00e      	beq.n	242c <logSensors+0x130>
        pageReady = false;
    240e:	2200      	movs	r2, #0
    2410:	701a      	strb	r2, [r3, #0]
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
}


inline static void pinToggle(Pin p) {
    PORT->Group[p.group].OUTTGL.reg = (1<<p.pin);
    2412:	2280      	movs	r2, #128	; 0x80
    2414:	4b18      	ldr	r3, [pc, #96]	; (2478 <logSensors+0x17c>)
        pinToggle(LedPin);
        u8_t bytesWritten = AT25SEWritePage(currentAddress,pageToWrite);
    2416:	4c19      	ldr	r4, [pc, #100]	; (247c <logSensors+0x180>)
    2418:	0352      	lsls	r2, r2, #13
    241a:	61da      	str	r2, [r3, #28]
    241c:	4918      	ldr	r1, [pc, #96]	; (2480 <logSensors+0x184>)
    241e:	4b19      	ldr	r3, [pc, #100]	; (2484 <logSensors+0x188>)
    2420:	6820      	ldr	r0, [r4, #0]
    2422:	4798      	blx	r3
        currentAddress = (currentAddress + 0x100);
    2424:	6823      	ldr	r3, [r4, #0]
    2426:	3301      	adds	r3, #1
    2428:	33ff      	adds	r3, #255	; 0xff
    242a:	6023      	str	r3, [r4, #0]
    }
}
    242c:	b00b      	add	sp, #44	; 0x2c
    242e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2430:	20000522 	.word	0x20000522
    2434:	200007e8 	.word	0x200007e8
    2438:	00000af5 	.word	0x00000af5
    243c:	200006a8 	.word	0x200006a8
    2440:	00005f49 	.word	0x00005f49
    2444:	00005fb5 	.word	0x00005fb5
    2448:	00005861 	.word	0x00005861
    244c:	00006151 	.word	0x00006151
    2450:	00003ec5 	.word	0x00003ec5
    2454:	447a0000 	.word	0x447a0000
    2458:	000043f9 	.word	0x000043f9
    245c:	200006b0 	.word	0x200006b0
    2460:	00003e89 	.word	0x00003e89
    2464:	0000443d 	.word	0x0000443d
    2468:	000040ed 	.word	0x000040ed
    246c:	00003e59 	.word	0x00003e59
    2470:	000021bd 	.word	0x000021bd
    2474:	200007d8 	.word	0x200007d8
    2478:	41004400 	.word	0x41004400
    247c:	200007dc 	.word	0x200007dc
    2480:	200006d8 	.word	0x200006d8
    2484:	0000029d 	.word	0x0000029d

00002488 <getFlightStartAddress>:

    u8_t addressToCheck[3];

    u16_t flightAddressLoc = FLIGHTZEROSTART + (flightToFind * 0x06);

    AT25SEreadSample(flightAddressLoc, 0x03, addressToCheck);
    2488:	2306      	movs	r3, #6
    }
}



u32_t getFlightStartAddress(u8_t flightToFind) {
    248a:	b513      	push	{r0, r1, r4, lr}

    u8_t addressToCheck[3];

    u16_t flightAddressLoc = FLIGHTZEROSTART + (flightToFind * 0x06);

    AT25SEreadSample(flightAddressLoc, 0x03, addressToCheck);
    248c:	4358      	muls	r0, r3
    248e:	ac01      	add	r4, sp, #4
    2490:	3001      	adds	r0, #1
    2492:	30ff      	adds	r0, #255	; 0xff
    2494:	0022      	movs	r2, r4
    2496:	2103      	movs	r1, #3
    2498:	4b04      	ldr	r3, [pc, #16]	; (24ac <getFlightStartAddress+0x24>)
    249a:	4798      	blx	r3

    u32_t flightStartAddress = addressToCheck[0] << 0 | addressToCheck[1] << 8 | addressToCheck[2] << 16;
    249c:	7860      	ldrb	r0, [r4, #1]
    249e:	78a3      	ldrb	r3, [r4, #2]
    24a0:	0200      	lsls	r0, r0, #8
    24a2:	041b      	lsls	r3, r3, #16
    24a4:	4318      	orrs	r0, r3
    24a6:	7823      	ldrb	r3, [r4, #0]
    24a8:	4318      	orrs	r0, r3

    return flightStartAddress;
}
    24aa:	bd16      	pop	{r1, r2, r4, pc}
    24ac:	000002f9 	.word	0x000002f9

000024b0 <FindFlightEndingAddress>:

    u8_t addressToCheck[3];

    u16_t flightAddressLoc = FLIGHTZEROEND + (findThisFlightsEnd * 0x06);

    AT25SEreadSample(flightAddressLoc, 0x03, addressToCheck);
    24b0:	2306      	movs	r3, #6
    u32_t flightStartAddress = addressToCheck[0] << 0 | addressToCheck[1] << 8 | addressToCheck[2] << 16;

    return flightStartAddress;
}

u32_t FindFlightEndingAddress(u8_t findThisFlightsEnd) {
    24b2:	b513      	push	{r0, r1, r4, lr}

    u8_t addressToCheck[3];

    u16_t flightAddressLoc = FLIGHTZEROEND + (findThisFlightsEnd * 0x06);

    AT25SEreadSample(flightAddressLoc, 0x03, addressToCheck);
    24b4:	4358      	muls	r0, r3
    24b6:	ac01      	add	r4, sp, #4
    24b8:	3004      	adds	r0, #4
    24ba:	30ff      	adds	r0, #255	; 0xff
    24bc:	0022      	movs	r2, r4
    24be:	2103      	movs	r1, #3
    24c0:	4b04      	ldr	r3, [pc, #16]	; (24d4 <FindFlightEndingAddress+0x24>)
    24c2:	4798      	blx	r3

    u32_t flightEndAddress = addressToCheck[0] << 0 | addressToCheck[1] << 8 | addressToCheck[2] << 16;
    24c4:	7860      	ldrb	r0, [r4, #1]
    24c6:	78a3      	ldrb	r3, [r4, #2]
    24c8:	0200      	lsls	r0, r0, #8
    24ca:	041b      	lsls	r3, r3, #16
    24cc:	4318      	orrs	r0, r3
    24ce:	7823      	ldrb	r3, [r4, #0]
    24d0:	4318      	orrs	r0, r3

    return flightEndAddress;
}
    24d2:	bd16      	pop	{r1, r2, r4, pc}
    24d4:	000002f9 	.word	0x000002f9

000024d8 <isFlightLogged>:

bool isFlightLogged(u8_t flightNumbToCheck) {
    24d8:	b510      	push	{r4, lr}

    u32_t possibleStart = getFlightStartAddress(flightNumbToCheck);
    24da:	4b04      	ldr	r3, [pc, #16]	; (24ec <isFlightLogged+0x14>)
    24dc:	4798      	blx	r3
    24de:	4b04      	ldr	r3, [pc, #16]	; (24f0 <isFlightLogged+0x18>)
    if (possibleStart == 0xFFFFFF) {
        return false;
    } else {
        return true;
    }
}
    24e0:	18c0      	adds	r0, r0, r3
    24e2:	1e43      	subs	r3, r0, #1
    24e4:	4198      	sbcs	r0, r3
    24e6:	b2c0      	uxtb	r0, r0
    24e8:	bd10      	pop	{r4, pc}
    24ea:	46c0      	nop			; (mov r8, r8)
    24ec:	00002489 	.word	0x00002489
    24f0:	ff000001 	.word	0xff000001

000024f4 <writeFlightEndAddress>:



void writeFlightEndAddress() {
    24f4:	b507      	push	{r0, r1, r2, lr}
    u32_t endingAddress = currentAddress;

    u8_t address[3] = {endingAddress >> 0, endingAddress >> 8, endingAddress >> 16};

    u16_t flightAddressLoc = FLIGHTZEROEND + (flightNumb * 0x06);
    AT25SFWriteBytes(flightAddressLoc, 3, address);
    24f6:	2006      	movs	r0, #6



void writeFlightEndAddress() {

    u32_t endingAddress = currentAddress;
    24f8:	4b09      	ldr	r3, [pc, #36]	; (2520 <writeFlightEndAddress+0x2c>)

    u8_t address[3] = {endingAddress >> 0, endingAddress >> 8, endingAddress >> 16};
    24fa:	aa01      	add	r2, sp, #4



void writeFlightEndAddress() {

    u32_t endingAddress = currentAddress;
    24fc:	681b      	ldr	r3, [r3, #0]

    u8_t address[3] = {endingAddress >> 0, endingAddress >> 8, endingAddress >> 16};
    24fe:	7013      	strb	r3, [r2, #0]
    2500:	0a19      	lsrs	r1, r3, #8
    2502:	0c1b      	lsrs	r3, r3, #16
    2504:	7093      	strb	r3, [r2, #2]

    u16_t flightAddressLoc = FLIGHTZEROEND + (flightNumb * 0x06);
    2506:	4b07      	ldr	r3, [pc, #28]	; (2524 <writeFlightEndAddress+0x30>)

void writeFlightEndAddress() {

    u32_t endingAddress = currentAddress;

    u8_t address[3] = {endingAddress >> 0, endingAddress >> 8, endingAddress >> 16};
    2508:	7051      	strb	r1, [r2, #1]

    u16_t flightAddressLoc = FLIGHTZEROEND + (flightNumb * 0x06);
    AT25SFWriteBytes(flightAddressLoc, 3, address);
    250a:	781b      	ldrb	r3, [r3, #0]
    250c:	2103      	movs	r1, #3
    250e:	4358      	muls	r0, r3
    2510:	3004      	adds	r0, #4
    2512:	30ff      	adds	r0, #255	; 0xff
    2514:	4b04      	ldr	r3, [pc, #16]	; (2528 <writeFlightEndAddress+0x34>)
    2516:	4798      	blx	r3
    delay_ms(10);
    2518:	200a      	movs	r0, #10
    251a:	4b04      	ldr	r3, [pc, #16]	; (252c <writeFlightEndAddress+0x38>)
    251c:	4798      	blx	r3

}
    251e:	bd07      	pop	{r0, r1, r2, pc}
    2520:	200007dc 	.word	0x200007dc
    2524:	20000523 	.word	0x20000523
    2528:	00000241 	.word	0x00000241
    252c:	00000ff1 	.word	0x00000ff1

00002530 <findNewFlightStart>:




void findNewFlightStart() {
    2530:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

    for (u8_t flightNumbToCheck = 0; flightNumbToCheck < 20; ++flightNumbToCheck) {
    2532:	2400      	movs	r4, #0

        if (!isFlightLogged(flightNumbToCheck)) {
    2534:	0020      	movs	r0, r4
    2536:	4b23      	ldr	r3, [pc, #140]	; (25c4 <findNewFlightStart+0x94>)
    2538:	4798      	blx	r3
    253a:	2800      	cmp	r0, #0
    253c:	d13c      	bne.n	25b8 <findNewFlightStart+0x88>
    253e:	4f22      	ldr	r7, [pc, #136]	; (25c8 <findNewFlightStart+0x98>)
    2540:	ad01      	add	r5, sp, #4

            if (flightNumbToCheck > 0) {
    2542:	2c00      	cmp	r4, #0
    2544:	d016      	beq.n	2574 <findNewFlightStart+0x44>


                u32_t startAddress = FindFlightEndingAddress(flightNumbToCheck - 1);
    2546:	1e60      	subs	r0, r4, #1
    2548:	4b20      	ldr	r3, [pc, #128]	; (25cc <findNewFlightStart+0x9c>)
    254a:	b2c0      	uxtb	r0, r0
    254c:	4798      	blx	r3
                delay_ms(5);
    254e:	4b20      	ldr	r3, [pc, #128]	; (25d0 <findNewFlightStart+0xa0>)
        if (!isFlightLogged(flightNumbToCheck)) {

            if (flightNumbToCheck > 0) {


                u32_t startAddress = FindFlightEndingAddress(flightNumbToCheck - 1);
    2550:	0006      	movs	r6, r0
                delay_ms(5);
    2552:	2005      	movs	r0, #5
    2554:	4798      	blx	r3
                currentAddress = startAddress;

                u8_t address[3] = {startAddress >> 0, startAddress >> 8, startAddress >> 16};

                u16_t flightAddressLoc = FLIGHTZEROSTART + (flightNumbToCheck * 0x06);
                AT25SFWriteBytes(flightAddressLoc, 3, address);
    2556:	2006      	movs	r0, #6
    2558:	4360      	muls	r0, r4
                u32_t startAddress = FindFlightEndingAddress(flightNumbToCheck - 1);
                delay_ms(5);

                currentAddress = startAddress;

                u8_t address[3] = {startAddress >> 0, startAddress >> 8, startAddress >> 16};
    255a:	0a33      	lsrs	r3, r6, #8

                u16_t flightAddressLoc = FLIGHTZEROSTART + (flightNumbToCheck * 0x06);
                AT25SFWriteBytes(flightAddressLoc, 3, address);
    255c:	3001      	adds	r0, #1


                u32_t startAddress = FindFlightEndingAddress(flightNumbToCheck - 1);
                delay_ms(5);

                currentAddress = startAddress;
    255e:	603e      	str	r6, [r7, #0]

                u8_t address[3] = {startAddress >> 0, startAddress >> 8, startAddress >> 16};
    2560:	702e      	strb	r6, [r5, #0]
    2562:	706b      	strb	r3, [r5, #1]
    2564:	0c36      	lsrs	r6, r6, #16

                u16_t flightAddressLoc = FLIGHTZEROSTART + (flightNumbToCheck * 0x06);
                AT25SFWriteBytes(flightAddressLoc, 3, address);
    2566:	30ff      	adds	r0, #255	; 0xff
    2568:	002a      	movs	r2, r5
    256a:	2103      	movs	r1, #3
    256c:	4b19      	ldr	r3, [pc, #100]	; (25d4 <findNewFlightStart+0xa4>)
                u32_t startAddress = FindFlightEndingAddress(flightNumbToCheck - 1);
                delay_ms(5);

                currentAddress = startAddress;

                u8_t address[3] = {startAddress >> 0, startAddress >> 8, startAddress >> 16};
    256e:	70ae      	strb	r6, [r5, #2]

                u16_t flightAddressLoc = FLIGHTZEROSTART + (flightNumbToCheck * 0x06);
                AT25SFWriteBytes(flightAddressLoc, 3, address);
    2570:	4798      	blx	r3
    2572:	e00f      	b.n	2594 <findNewFlightStart+0x64>

                // for flight 0, starting address is always 0x00100 (beginning of second 4k block)
            } else {
                u8_t address[3] = {0x00,0x10,0x00};
    2574:	2310      	movs	r3, #16
                AT25SFWriteBytes(FLIGHTZEROSTART, 3, address);
    2576:	2080      	movs	r0, #128	; 0x80
                u16_t flightAddressLoc = FLIGHTZEROSTART + (flightNumbToCheck * 0x06);
                AT25SFWriteBytes(flightAddressLoc, 3, address);

                // for flight 0, starting address is always 0x00100 (beginning of second 4k block)
            } else {
                u8_t address[3] = {0x00,0x10,0x00};
    2578:	706b      	strb	r3, [r5, #1]
                AT25SFWriteBytes(FLIGHTZEROSTART, 3, address);
    257a:	0040      	lsls	r0, r0, #1
    257c:	4b15      	ldr	r3, [pc, #84]	; (25d4 <findNewFlightStart+0xa4>)
    257e:	002a      	movs	r2, r5
    2580:	2103      	movs	r1, #3
                u16_t flightAddressLoc = FLIGHTZEROSTART + (flightNumbToCheck * 0x06);
                AT25SFWriteBytes(flightAddressLoc, 3, address);

                // for flight 0, starting address is always 0x00100 (beginning of second 4k block)
            } else {
                u8_t address[3] = {0x00,0x10,0x00};
    2582:	702c      	strb	r4, [r5, #0]
    2584:	70ac      	strb	r4, [r5, #2]
                AT25SFWriteBytes(FLIGHTZEROSTART, 3, address);
    2586:	4798      	blx	r3
                currentAddress = 0x001000;
    2588:	2380      	movs	r3, #128	; 0x80
    258a:	015b      	lsls	r3, r3, #5
    258c:	603b      	str	r3, [r7, #0]
                beep(1500);
    258e:	4812      	ldr	r0, [pc, #72]	; (25d8 <findNewFlightStart+0xa8>)
    2590:	4b12      	ldr	r3, [pc, #72]	; (25dc <findNewFlightStart+0xac>)
    2592:	4798      	blx	r3
            }
            flightNumb = flightNumbToCheck;
    2594:	4b12      	ldr	r3, [pc, #72]	; (25e0 <findNewFlightStart+0xb0>)
    2596:	701c      	strb	r4, [r3, #0]

            while (flightNumbToCheck > 0) {
                beep(500);
    2598:	20fa      	movs	r0, #250	; 0xfa
    259a:	0040      	lsls	r0, r0, #1
                currentAddress = 0x001000;
                beep(1500);
            }
            flightNumb = flightNumbToCheck;

            while (flightNumbToCheck > 0) {
    259c:	2c00      	cmp	r4, #0
    259e:	d008      	beq.n	25b2 <findNewFlightStart+0x82>
                beep(500);
    25a0:	4b0e      	ldr	r3, [pc, #56]	; (25dc <findNewFlightStart+0xac>)
    25a2:	4798      	blx	r3
                delay_ms(500);
    25a4:	20fa      	movs	r0, #250	; 0xfa
    25a6:	4b0a      	ldr	r3, [pc, #40]	; (25d0 <findNewFlightStart+0xa0>)
    25a8:	0040      	lsls	r0, r0, #1
                --flightNumbToCheck;
    25aa:	3c01      	subs	r4, #1
            }
            flightNumb = flightNumbToCheck;

            while (flightNumbToCheck > 0) {
                beep(500);
                delay_ms(500);
    25ac:	4798      	blx	r3
                --flightNumbToCheck;
    25ae:	b2e4      	uxtb	r4, r4
    25b0:	e7f2      	b.n	2598 <findNewFlightStart+0x68>
            }
            delay_ms(500);
    25b2:	4b07      	ldr	r3, [pc, #28]	; (25d0 <findNewFlightStart+0xa0>)
    25b4:	4798      	blx	r3
            break;
    25b6:	e003      	b.n	25c0 <findNewFlightStart+0x90>



void findNewFlightStart() {

    for (u8_t flightNumbToCheck = 0; flightNumbToCheck < 20; ++flightNumbToCheck) {
    25b8:	3401      	adds	r4, #1
    25ba:	b2e4      	uxtb	r4, r4
    25bc:	2c14      	cmp	r4, #20
    25be:	d1b9      	bne.n	2534 <findNewFlightStart+0x4>
            }
            delay_ms(500);
            break;
        }
    }
}
    25c0:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    25c2:	46c0      	nop			; (mov r8, r8)
    25c4:	000024d9 	.word	0x000024d9
    25c8:	200007dc 	.word	0x200007dc
    25cc:	000024b1 	.word	0x000024b1
    25d0:	00000ff1 	.word	0x00000ff1
    25d4:	00000241 	.word	0x00000241
    25d8:	000005dc 	.word	0x000005dc
    25dc:	00000d61 	.word	0x00000d61
    25e0:	20000523 	.word	0x20000523

000025e4 <takeSample>:
#include <util.h>
#include <boardDefines.h>
#include <MS5803.h>

bool takeSample() {
    return SampleBool;
    25e4:	4b01      	ldr	r3, [pc, #4]	; (25ec <takeSample+0x8>)
    25e6:	7818      	ldrb	r0, [r3, #0]
}
    25e8:	4770      	bx	lr
    25ea:	46c0      	nop			; (mov r8, r8)
    25ec:	2000053c 	.word	0x2000053c

000025f0 <pullSample>:

void pullSample() {
    SampleBool = true;
    25f0:	2201      	movs	r2, #1
    25f2:	4b01      	ldr	r3, [pc, #4]	; (25f8 <pullSample+0x8>)
    25f4:	701a      	strb	r2, [r3, #0]
}
    25f6:	4770      	bx	lr
    25f8:	2000053c 	.word	0x2000053c

000025fc <sampleTick>:
    SampleBool = false;
}

sample_t sample;

void sampleTick() {
    25fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    SampleBool = false;
    25fe:	2500      	movs	r5, #0
    2600:	4b9e      	ldr	r3, [pc, #632]	; (287c <sampleTick+0x280>)
    SampleBool = false;
}

sample_t sample;

void sampleTick() {
    2602:	b087      	sub	sp, #28
    SampleBool = false;

    // take last samples time to discover Dt before setting new time
    sample.tickDelta = millis() - sample.sampleTick;
    2604:	4e9e      	ldr	r6, [pc, #632]	; (2880 <sampleTick+0x284>)
}

sample_t sample;

void sampleTick() {
    SampleBool = false;
    2606:	701d      	strb	r5, [r3, #0]

    // take last samples time to discover Dt before setting new time
    sample.tickDelta = millis() - sample.sampleTick;
    2608:	47b0      	blx	r6
    260a:	4c9e      	ldr	r4, [pc, #632]	; (2884 <sampleTick+0x288>)
    260c:	6863      	ldr	r3, [r4, #4]
    260e:	1ac0      	subs	r0, r0, r3
    2610:	8020      	strh	r0, [r4, #0]
    sample.sampleTick = millis();
    2612:	47b0      	blx	r6
    altimeter.flightTime = sample.sampleTick - offsets.StartupTick;
    2614:	4b9c      	ldr	r3, [pc, #624]	; (2888 <sampleTick+0x28c>)

    sample.voltage.batV = adc_read(senseBatPin);
    2616:	4e9d      	ldr	r6, [pc, #628]	; (288c <sampleTick+0x290>)
    SampleBool = false;

    // take last samples time to discover Dt before setting new time
    sample.tickDelta = millis() - sample.sampleTick;
    sample.sampleTick = millis();
    altimeter.flightTime = sample.sampleTick - offsets.StartupTick;
    2618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
void sampleTick() {
    SampleBool = false;

    // take last samples time to discover Dt before setting new time
    sample.tickDelta = millis() - sample.sampleTick;
    sample.sampleTick = millis();
    261a:	6060      	str	r0, [r4, #4]
    altimeter.flightTime = sample.sampleTick - offsets.StartupTick;
    261c:	1ac0      	subs	r0, r0, r3
    261e:	4b9c      	ldr	r3, [pc, #624]	; (2890 <sampleTick+0x294>)

    sample.voltage.batV = adc_read(senseBatPin);
    2620:	7831      	ldrb	r1, [r6, #0]
    SampleBool = false;

    // take last samples time to discover Dt before setting new time
    sample.tickDelta = millis() - sample.sampleTick;
    sample.sampleTick = millis();
    altimeter.flightTime = sample.sampleTick - offsets.StartupTick;
    2622:	6098      	str	r0, [r3, #8]

    sample.voltage.batV = adc_read(senseBatPin);
    2624:	7873      	ldrb	r3, [r6, #1]
    2626:	78b0      	ldrb	r0, [r6, #2]
    2628:	021b      	lsls	r3, r3, #8
    262a:	430b      	orrs	r3, r1
    262c:	0400      	lsls	r0, r0, #16
    262e:	001a      	movs	r2, r3
    2630:	0003      	movs	r3, r0
    2632:	78f0      	ldrb	r0, [r6, #3]
    2634:	4313      	orrs	r3, r2
    2636:	0600      	lsls	r0, r0, #24
    2638:	7931      	ldrb	r1, [r6, #4]
    263a:	4318      	orrs	r0, r3
    263c:	4b95      	ldr	r3, [pc, #596]	; (2894 <sampleTick+0x298>)
    263e:	4798      	blx	r3
    sample.voltage.batFloat = sample.voltage.batV * 0.0019;
    2640:	4b95      	ldr	r3, [pc, #596]	; (2898 <sampleTick+0x29c>)
    // take last samples time to discover Dt before setting new time
    sample.tickDelta = millis() - sample.sampleTick;
    sample.sampleTick = millis();
    altimeter.flightTime = sample.sampleTick - offsets.StartupTick;

    sample.voltage.batV = adc_read(senseBatPin);
    2642:	8120      	strh	r0, [r4, #8]
    sample.voltage.batFloat = sample.voltage.batV * 0.0019;
    2644:	4798      	blx	r3
    2646:	4a95      	ldr	r2, [pc, #596]	; (289c <sampleTick+0x2a0>)
    2648:	4f95      	ldr	r7, [pc, #596]	; (28a0 <sampleTick+0x2a4>)
    264a:	4b96      	ldr	r3, [pc, #600]	; (28a4 <sampleTick+0x2a8>)
    264c:	47b8      	blx	r7
    264e:	4b96      	ldr	r3, [pc, #600]	; (28a8 <sampleTick+0x2ac>)
    2650:	4798      	blx	r3

    sample.voltage.senseA = adc_read(senseAPin);
    2652:	79b3      	ldrb	r3, [r6, #6]
    2654:	7971      	ldrb	r1, [r6, #5]
    sample.tickDelta = millis() - sample.sampleTick;
    sample.sampleTick = millis();
    altimeter.flightTime = sample.sampleTick - offsets.StartupTick;

    sample.voltage.batV = adc_read(senseBatPin);
    sample.voltage.batFloat = sample.voltage.batV * 0.0019;
    2656:	60e0      	str	r0, [r4, #12]

    sample.voltage.senseA = adc_read(senseAPin);
    2658:	79f0      	ldrb	r0, [r6, #7]
    265a:	021b      	lsls	r3, r3, #8
    265c:	430b      	orrs	r3, r1
    265e:	0400      	lsls	r0, r0, #16
    2660:	4303      	orrs	r3, r0
    2662:	7a30      	ldrb	r0, [r6, #8]
    2664:	7a71      	ldrb	r1, [r6, #9]
    2666:	0600      	lsls	r0, r0, #24
    2668:	4318      	orrs	r0, r3
    266a:	4b8a      	ldr	r3, [pc, #552]	; (2894 <sampleTick+0x298>)
    266c:	4798      	blx	r3
    sample.voltage.senseB = adc_read(senseBPin);
    266e:	7af3      	ldrb	r3, [r6, #11]
    2670:	7ab1      	ldrb	r1, [r6, #10]
    altimeter.flightTime = sample.sampleTick - offsets.StartupTick;

    sample.voltage.batV = adc_read(senseBatPin);
    sample.voltage.batFloat = sample.voltage.batV * 0.0019;

    sample.voltage.senseA = adc_read(senseAPin);
    2672:	8220      	strh	r0, [r4, #16]
    sample.voltage.senseB = adc_read(senseBPin);
    2674:	7b30      	ldrb	r0, [r6, #12]
    2676:	021b      	lsls	r3, r3, #8
    2678:	430b      	orrs	r3, r1
    267a:	0400      	lsls	r0, r0, #16
    267c:	4303      	orrs	r3, r0
    267e:	7b70      	ldrb	r0, [r6, #13]
    2680:	7bb1      	ldrb	r1, [r6, #14]
    2682:	0600      	lsls	r0, r0, #24
    2684:	4318      	orrs	r0, r3
    2686:	4b83      	ldr	r3, [pc, #524]	; (2894 <sampleTick+0x298>)
    2688:	4798      	blx	r3
    sample.voltage.senseC = adc_read(senseCPin);
    268a:	7c33      	ldrb	r3, [r6, #16]
    268c:	7bf1      	ldrb	r1, [r6, #15]

    sample.voltage.batV = adc_read(senseBatPin);
    sample.voltage.batFloat = sample.voltage.batV * 0.0019;

    sample.voltage.senseA = adc_read(senseAPin);
    sample.voltage.senseB = adc_read(senseBPin);
    268e:	8260      	strh	r0, [r4, #18]
    sample.voltage.senseC = adc_read(senseCPin);
    2690:	7c70      	ldrb	r0, [r6, #17]
    2692:	021b      	lsls	r3, r3, #8
    2694:	430b      	orrs	r3, r1
    2696:	0400      	lsls	r0, r0, #16
    2698:	4303      	orrs	r3, r0
    269a:	7cb0      	ldrb	r0, [r6, #18]
    269c:	7cf1      	ldrb	r1, [r6, #19]
    269e:	0600      	lsls	r0, r0, #24
    26a0:	4318      	orrs	r0, r3
    26a2:	4b7c      	ldr	r3, [pc, #496]	; (2894 <sampleTick+0x298>)
    26a4:	4798      	blx	r3
    sample.voltage.senseD = adc_read(senseDPin);
    26a6:	7d73      	ldrb	r3, [r6, #21]
    26a8:	7d31      	ldrb	r1, [r6, #20]
    sample.voltage.batV = adc_read(senseBatPin);
    sample.voltage.batFloat = sample.voltage.batV * 0.0019;

    sample.voltage.senseA = adc_read(senseAPin);
    sample.voltage.senseB = adc_read(senseBPin);
    sample.voltage.senseC = adc_read(senseCPin);
    26aa:	82a0      	strh	r0, [r4, #20]
    sample.voltage.senseD = adc_read(senseDPin);
    26ac:	7db0      	ldrb	r0, [r6, #22]
    26ae:	021b      	lsls	r3, r3, #8
    26b0:	430b      	orrs	r3, r1
    26b2:	0400      	lsls	r0, r0, #16
    26b4:	001a      	movs	r2, r3
    26b6:	0003      	movs	r3, r0
    26b8:	7df0      	ldrb	r0, [r6, #23]
    26ba:	4313      	orrs	r3, r2
    26bc:	0600      	lsls	r0, r0, #24
    26be:	7e31      	ldrb	r1, [r6, #24]
    26c0:	4318      	orrs	r0, r3
    26c2:	4b74      	ldr	r3, [pc, #464]	; (2894 <sampleTick+0x298>)
    26c4:	4798      	blx	r3

    sample.analogRaw = adc_read(analogAccelPin);
    26c6:	7eb3      	ldrb	r3, [r6, #26]
    26c8:	7e71      	ldrb	r1, [r6, #25]
    sample.voltage.batFloat = sample.voltage.batV * 0.0019;

    sample.voltage.senseA = adc_read(senseAPin);
    sample.voltage.senseB = adc_read(senseBPin);
    sample.voltage.senseC = adc_read(senseCPin);
    sample.voltage.senseD = adc_read(senseDPin);
    26ca:	82e0      	strh	r0, [r4, #22]

    sample.analogRaw = adc_read(analogAccelPin);
    26cc:	7ef0      	ldrb	r0, [r6, #27]
    26ce:	021b      	lsls	r3, r3, #8
    26d0:	430b      	orrs	r3, r1
    26d2:	0400      	lsls	r0, r0, #16
    26d4:	4303      	orrs	r3, r0
    26d6:	7f30      	ldrb	r0, [r6, #28]
    26d8:	7f71      	ldrb	r1, [r6, #29]
    26da:	0600      	lsls	r0, r0, #24
    26dc:	4318      	orrs	r0, r3
    26de:	4b6d      	ldr	r3, [pc, #436]	; (2894 <sampleTick+0x298>)
    26e0:	4798      	blx	r3
    sample.analogAccel = (sample.analogRaw - 3900) * -0.0154;
    26e2:	4b72      	ldr	r3, [pc, #456]	; (28ac <sampleTick+0x2b0>)
    sample.voltage.senseA = adc_read(senseAPin);
    sample.voltage.senseB = adc_read(senseBPin);
    sample.voltage.senseC = adc_read(senseCPin);
    sample.voltage.senseD = adc_read(senseDPin);

    sample.analogRaw = adc_read(analogAccelPin);
    26e4:	8320      	strh	r0, [r4, #24]
    sample.analogAccel = (sample.analogRaw - 3900) * -0.0154;
    26e6:	18c0      	adds	r0, r0, r3
    26e8:	4b6b      	ldr	r3, [pc, #428]	; (2898 <sampleTick+0x29c>)
    26ea:	4798      	blx	r3
    26ec:	4a70      	ldr	r2, [pc, #448]	; (28b0 <sampleTick+0x2b4>)
    26ee:	4e6c      	ldr	r6, [pc, #432]	; (28a0 <sampleTick+0x2a4>)
    26f0:	4b70      	ldr	r3, [pc, #448]	; (28b4 <sampleTick+0x2b8>)
    26f2:	47b0      	blx	r6
    26f4:	4b6c      	ldr	r3, [pc, #432]	; (28a8 <sampleTick+0x2ac>)
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    26f6:	2680      	movs	r6, #128	; 0x80
    26f8:	4798      	blx	r3
    26fa:	4b6f      	ldr	r3, [pc, #444]	; (28b8 <sampleTick+0x2bc>)
    26fc:	01f6      	lsls	r6, r6, #7
    26fe:	61e0      	str	r0, [r4, #28]


    pinLow(cs_baro);
    spiDataOut(BARO_SPI, 0x50);
    2700:	2150      	movs	r1, #80	; 0x50
    2702:	615e      	str	r6, [r3, #20]
    2704:	2002      	movs	r0, #2
    2706:	4b6d      	ldr	r3, [pc, #436]	; (28bc <sampleTick+0x2c0>)
    2708:	4798      	blx	r3
    pinHigh(cs_baro);
    delay_us(600);
    270a:	2096      	movs	r0, #150	; 0x96
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    270c:	4b6a      	ldr	r3, [pc, #424]	; (28b8 <sampleTick+0x2bc>)
    270e:	0080      	lsls	r0, r0, #2
    2710:	619e      	str	r6, [r3, #24]
    2712:	4b6b      	ldr	r3, [pc, #428]	; (28c0 <sampleTick+0x2c4>)
    2714:	4798      	blx	r3
    uint32_t tempRaw = readMS5803AdcResults();
    2716:	4b6b      	ldr	r3, [pc, #428]	; (28c4 <sampleTick+0x2c8>)
    2718:	4798      	blx	r3
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    271a:	4b67      	ldr	r3, [pc, #412]	; (28b8 <sampleTick+0x2bc>)
    271c:	9001      	str	r0, [sp, #4]

    pinLow(cs_baro);
    spiDataOut(BARO_SPI, 0x40);
    271e:	2140      	movs	r1, #64	; 0x40
    2720:	615e      	str	r6, [r3, #20]
    2722:	2002      	movs	r0, #2
    2724:	4b65      	ldr	r3, [pc, #404]	; (28bc <sampleTick+0x2c0>)
    2726:	4798      	blx	r3
    2728:	2280      	movs	r2, #128	; 0x80
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    272a:	4b63      	ldr	r3, [pc, #396]	; (28b8 <sampleTick+0x2bc>)
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    272c:	00d2      	lsls	r2, r2, #3
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    272e:	619e      	str	r6, [r3, #24]
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    2730:	3394      	adds	r3, #148	; 0x94
    2732:	601a      	str	r2, [r3, #0]

    u8_t byteOne;
    u8_t byteTwo;
// Accel data
    pinLow(cs_accel);
    spiDataOut(ACCEL_SPI, BMI055_X_ACC_LSB | BMI055_READ_REG);
    2734:	2182      	movs	r1, #130	; 0x82
    2736:	4b61      	ldr	r3, [pc, #388]	; (28bc <sampleTick+0x2c0>)
    2738:	0028      	movs	r0, r5
    273a:	4798      	blx	r3
    byteOne = spiDataIn(ACCEL_SPI);
    273c:	4e62      	ldr	r6, [pc, #392]	; (28c8 <sampleTick+0x2cc>)
    273e:	0028      	movs	r0, r5
    2740:	47b0      	blx	r6
    2742:	0007      	movs	r7, r0
    byteTwo = spiDataIn(ACCEL_SPI);
    2744:	0028      	movs	r0, r5
    2746:	47b0      	blx	r6
    sample.altitudefeet = paToFeetNOAA(sample.pressureMbar);
}

int16_t twosComp(u8_t byteOne, u8_t byteTwo) {

    u16_t comp = byteOne | (byteTwo << 8);
    2748:	0200      	lsls	r0, r0, #8
    274a:	4307      	orrs	r7, r0
    274c:	b23b      	sxth	r3, r7
    pinLow(cs_accel);
    spiDataOut(ACCEL_SPI, BMI055_X_ACC_LSB | BMI055_READ_REG);
    byteOne = spiDataIn(ACCEL_SPI);
    byteTwo = spiDataIn(ACCEL_SPI);
    int16_t accelXint = twosComp(byteOne,byteTwo);
    byteOne = spiDataIn(ACCEL_SPI);
    274e:	0028      	movs	r0, r5
    sample.altitudefeet = paToFeetNOAA(sample.pressureMbar);
}

int16_t twosComp(u8_t byteOne, u8_t byteTwo) {

    u16_t comp = byteOne | (byteTwo << 8);
    2750:	9303      	str	r3, [sp, #12]
    pinLow(cs_accel);
    spiDataOut(ACCEL_SPI, BMI055_X_ACC_LSB | BMI055_READ_REG);
    byteOne = spiDataIn(ACCEL_SPI);
    byteTwo = spiDataIn(ACCEL_SPI);
    int16_t accelXint = twosComp(byteOne,byteTwo);
    byteOne = spiDataIn(ACCEL_SPI);
    2752:	47b0      	blx	r6
    2754:	0007      	movs	r7, r0
    byteTwo = spiDataIn(ACCEL_SPI);
    2756:	0028      	movs	r0, r5
    2758:	47b0      	blx	r6
    sample.altitudefeet = paToFeetNOAA(sample.pressureMbar);
}

int16_t twosComp(u8_t byteOne, u8_t byteTwo) {

    u16_t comp = byteOne | (byteTwo << 8);
    275a:	0200      	lsls	r0, r0, #8
    275c:	4307      	orrs	r7, r0
    275e:	b23b      	sxth	r3, r7
    byteTwo = spiDataIn(ACCEL_SPI);
    int16_t accelXint = twosComp(byteOne,byteTwo);
    byteOne = spiDataIn(ACCEL_SPI);
    byteTwo = spiDataIn(ACCEL_SPI);
    int16_t accelYint = twosComp(byteOne,byteTwo);
    byteOne = spiDataIn(ACCEL_SPI);
    2760:	0028      	movs	r0, r5
    sample.altitudefeet = paToFeetNOAA(sample.pressureMbar);
}

int16_t twosComp(u8_t byteOne, u8_t byteTwo) {

    u16_t comp = byteOne | (byteTwo << 8);
    2762:	9302      	str	r3, [sp, #8]
    byteTwo = spiDataIn(ACCEL_SPI);
    int16_t accelXint = twosComp(byteOne,byteTwo);
    byteOne = spiDataIn(ACCEL_SPI);
    byteTwo = spiDataIn(ACCEL_SPI);
    int16_t accelYint = twosComp(byteOne,byteTwo);
    byteOne = spiDataIn(ACCEL_SPI);
    2764:	47b0      	blx	r6
    2766:	9004      	str	r0, [sp, #16]
    byteTwo = spiDataIn(ACCEL_SPI);
    2768:	0028      	movs	r0, r5
    276a:	47b0      	blx	r6
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    276c:	2280      	movs	r2, #128	; 0x80
    276e:	4b52      	ldr	r3, [pc, #328]	; (28b8 <sampleTick+0x2bc>)
    2770:	00d2      	lsls	r2, r2, #3
    2772:	3398      	adds	r3, #152	; 0x98
    2774:	9005      	str	r0, [sp, #20]
    2776:	601a      	str	r2, [r3, #0]

    accelXint =  accelXint >> 4;
    accelYint =  accelYint >> 4;
    accelZint =  accelZint >> 4;

    sample.accelX =  accelXint * BMI055_ACCEL_16G_DIV;
    2778:	9b03      	ldr	r3, [sp, #12]
    277a:	1118      	asrs	r0, r3, #4
    277c:	4b46      	ldr	r3, [pc, #280]	; (2898 <sampleTick+0x29c>)
    277e:	4798      	blx	r3
    2780:	23fe      	movs	r3, #254	; 0xfe
    2782:	2200      	movs	r2, #0
    2784:	4f46      	ldr	r7, [pc, #280]	; (28a0 <sampleTick+0x2a4>)
    2786:	059b      	lsls	r3, r3, #22
    2788:	47b8      	blx	r7
    278a:	4b47      	ldr	r3, [pc, #284]	; (28a8 <sampleTick+0x2ac>)
    278c:	4798      	blx	r3
    sample.accelY =  accelYint * BMI055_ACCEL_16G_DIV;
    278e:	9b02      	ldr	r3, [sp, #8]

    accelXint =  accelXint >> 4;
    accelYint =  accelYint >> 4;
    accelZint =  accelZint >> 4;

    sample.accelX =  accelXint * BMI055_ACCEL_16G_DIV;
    2790:	6220      	str	r0, [r4, #32]
    sample.accelY =  accelYint * BMI055_ACCEL_16G_DIV;
    2792:	1118      	asrs	r0, r3, #4
    2794:	4b40      	ldr	r3, [pc, #256]	; (2898 <sampleTick+0x29c>)
    2796:	4798      	blx	r3
    2798:	23fe      	movs	r3, #254	; 0xfe
    279a:	2200      	movs	r2, #0
    279c:	059b      	lsls	r3, r3, #22
    279e:	47b8      	blx	r7
    27a0:	4b41      	ldr	r3, [pc, #260]	; (28a8 <sampleTick+0x2ac>)
    27a2:	4798      	blx	r3
    sample.accelZ = accelZint * BMI055_ACCEL_16G_DIV;
    27a4:	9b05      	ldr	r3, [sp, #20]
    accelXint =  accelXint >> 4;
    accelYint =  accelYint >> 4;
    accelZint =  accelZint >> 4;

    sample.accelX =  accelXint * BMI055_ACCEL_16G_DIV;
    sample.accelY =  accelYint * BMI055_ACCEL_16G_DIV;
    27a6:	6260      	str	r0, [r4, #36]	; 0x24
    sample.accelZ = accelZint * BMI055_ACCEL_16G_DIV;
    27a8:	021f      	lsls	r7, r3, #8
    27aa:	9b04      	ldr	r3, [sp, #16]
    27ac:	431f      	orrs	r7, r3
    27ae:	b238      	sxth	r0, r7
    27b0:	4b39      	ldr	r3, [pc, #228]	; (2898 <sampleTick+0x29c>)
    27b2:	1100      	asrs	r0, r0, #4
    27b4:	4798      	blx	r3
    27b6:	23fe      	movs	r3, #254	; 0xfe
    27b8:	2200      	movs	r2, #0
    27ba:	4f39      	ldr	r7, [pc, #228]	; (28a0 <sampleTick+0x2a4>)
    27bc:	059b      	lsls	r3, r3, #22
    27be:	47b8      	blx	r7
    27c0:	4b39      	ldr	r3, [pc, #228]	; (28a8 <sampleTick+0x2ac>)
    27c2:	4798      	blx	r3
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    27c4:	2280      	movs	r2, #128	; 0x80
    27c6:	4b3c      	ldr	r3, [pc, #240]	; (28b8 <sampleTick+0x2bc>)
    27c8:	00d2      	lsls	r2, r2, #3

    // Gyro data
    pinLow(cs_gyro);
    spiDataOut(GYRO_SPI, BMI055_X_GYRO_LSB | BMI055_READ_REG);
    27ca:	2182      	movs	r1, #130	; 0x82
    accelYint =  accelYint >> 4;
    accelZint =  accelZint >> 4;

    sample.accelX =  accelXint * BMI055_ACCEL_16G_DIV;
    sample.accelY =  accelYint * BMI055_ACCEL_16G_DIV;
    sample.accelZ = accelZint * BMI055_ACCEL_16G_DIV;
    27cc:	62a0      	str	r0, [r4, #40]	; 0x28
    27ce:	615a      	str	r2, [r3, #20]

    // Gyro data
    pinLow(cs_gyro);
    spiDataOut(GYRO_SPI, BMI055_X_GYRO_LSB | BMI055_READ_REG);
    27d0:	0028      	movs	r0, r5
    27d2:	4b3a      	ldr	r3, [pc, #232]	; (28bc <sampleTick+0x2c0>)
    27d4:	4798      	blx	r3
    byteOne = spiDataIn(GYRO_SPI);
    27d6:	0028      	movs	r0, r5
    27d8:	47b0      	blx	r6
    27da:	0007      	movs	r7, r0
    byteTwo = spiDataIn(GYRO_SPI);
    27dc:	0028      	movs	r0, r5
    27de:	47b0      	blx	r6
    sample.altitudefeet = paToFeetNOAA(sample.pressureMbar);
}

int16_t twosComp(u8_t byteOne, u8_t byteTwo) {

    u16_t comp = byteOne | (byteTwo << 8);
    27e0:	0200      	lsls	r0, r0, #8
    27e2:	4307      	orrs	r7, r0
    27e4:	b23b      	sxth	r3, r7
    pinLow(cs_gyro);
    spiDataOut(GYRO_SPI, BMI055_X_GYRO_LSB | BMI055_READ_REG);
    byteOne = spiDataIn(GYRO_SPI);
    byteTwo = spiDataIn(GYRO_SPI);
    int16_t gyroXint = twosComp(byteOne,byteTwo);
    byteOne = spiDataIn(GYRO_SPI);
    27e6:	0028      	movs	r0, r5
    sample.altitudefeet = paToFeetNOAA(sample.pressureMbar);
}

int16_t twosComp(u8_t byteOne, u8_t byteTwo) {

    u16_t comp = byteOne | (byteTwo << 8);
    27e8:	9303      	str	r3, [sp, #12]
    pinLow(cs_gyro);
    spiDataOut(GYRO_SPI, BMI055_X_GYRO_LSB | BMI055_READ_REG);
    byteOne = spiDataIn(GYRO_SPI);
    byteTwo = spiDataIn(GYRO_SPI);
    int16_t gyroXint = twosComp(byteOne,byteTwo);
    byteOne = spiDataIn(GYRO_SPI);
    27ea:	47b0      	blx	r6
    27ec:	0007      	movs	r7, r0
    byteTwo = spiDataIn(GYRO_SPI);
    27ee:	0028      	movs	r0, r5
    27f0:	47b0      	blx	r6
    sample.altitudefeet = paToFeetNOAA(sample.pressureMbar);
}

int16_t twosComp(u8_t byteOne, u8_t byteTwo) {

    u16_t comp = byteOne | (byteTwo << 8);
    27f2:	0200      	lsls	r0, r0, #8
    27f4:	4307      	orrs	r7, r0
    27f6:	b23b      	sxth	r3, r7
    byteTwo = spiDataIn(GYRO_SPI);
    int16_t gyroXint = twosComp(byteOne,byteTwo);
    byteOne = spiDataIn(GYRO_SPI);
    byteTwo = spiDataIn(GYRO_SPI);
    int16_t gyroYint = twosComp(byteOne,byteTwo);
    byteOne = spiDataIn(GYRO_SPI);
    27f8:	0028      	movs	r0, r5
    sample.altitudefeet = paToFeetNOAA(sample.pressureMbar);
}

int16_t twosComp(u8_t byteOne, u8_t byteTwo) {

    u16_t comp = byteOne | (byteTwo << 8);
    27fa:	9302      	str	r3, [sp, #8]
    byteTwo = spiDataIn(GYRO_SPI);
    int16_t gyroXint = twosComp(byteOne,byteTwo);
    byteOne = spiDataIn(GYRO_SPI);
    byteTwo = spiDataIn(GYRO_SPI);
    int16_t gyroYint = twosComp(byteOne,byteTwo);
    byteOne = spiDataIn(GYRO_SPI);
    27fc:	47b0      	blx	r6
    27fe:	0007      	movs	r7, r0
    byteTwo = spiDataIn(GYRO_SPI);
    2800:	0028      	movs	r0, r5
    2802:	47b0      	blx	r6
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    2804:	2280      	movs	r2, #128	; 0x80
    2806:	4b2c      	ldr	r3, [pc, #176]	; (28b8 <sampleTick+0x2bc>)
    2808:	00d2      	lsls	r2, r2, #3
    280a:	619a      	str	r2, [r3, #24]

    gyroXint = gyroXint >> 4;
    gyroYint = gyroYint >> 4;
    gyroZint = gyroZint >> 4;

    sample.gyroX =  gyroXint * BMI055_GYRO_2000DS_DIV;
    280c:	9b03      	ldr	r3, [sp, #12]
    int16_t gyroXint = twosComp(byteOne,byteTwo);
    byteOne = spiDataIn(GYRO_SPI);
    byteTwo = spiDataIn(GYRO_SPI);
    int16_t gyroYint = twosComp(byteOne,byteTwo);
    byteOne = spiDataIn(GYRO_SPI);
    byteTwo = spiDataIn(GYRO_SPI);
    280e:	0005      	movs	r5, r0

    gyroXint = gyroXint >> 4;
    gyroYint = gyroYint >> 4;
    gyroZint = gyroZint >> 4;

    sample.gyroX =  gyroXint * BMI055_GYRO_2000DS_DIV;
    2810:	1118      	asrs	r0, r3, #4
    2812:	4b21      	ldr	r3, [pc, #132]	; (2898 <sampleTick+0x29c>)
    2814:	4798      	blx	r3
    2816:	23fe      	movs	r3, #254	; 0xfe
    2818:	4e21      	ldr	r6, [pc, #132]	; (28a0 <sampleTick+0x2a4>)
    281a:	2200      	movs	r2, #0
    281c:	059b      	lsls	r3, r3, #22
    281e:	47b0      	blx	r6
    2820:	4b21      	ldr	r3, [pc, #132]	; (28a8 <sampleTick+0x2ac>)
    2822:	4798      	blx	r3
    sample.gyroY =  gyroYint * BMI055_GYRO_2000DS_DIV;
    2824:	9b02      	ldr	r3, [sp, #8]

    gyroXint = gyroXint >> 4;
    gyroYint = gyroYint >> 4;
    gyroZint = gyroZint >> 4;

    sample.gyroX =  gyroXint * BMI055_GYRO_2000DS_DIV;
    2826:	62e0      	str	r0, [r4, #44]	; 0x2c
    sample.gyroY =  gyroYint * BMI055_GYRO_2000DS_DIV;
    2828:	1118      	asrs	r0, r3, #4
    282a:	4b1b      	ldr	r3, [pc, #108]	; (2898 <sampleTick+0x29c>)
    282c:	4798      	blx	r3
    282e:	23fe      	movs	r3, #254	; 0xfe
    2830:	2200      	movs	r2, #0
    2832:	059b      	lsls	r3, r3, #22
    2834:	47b0      	blx	r6
    2836:	4b1c      	ldr	r3, [pc, #112]	; (28a8 <sampleTick+0x2ac>)
    2838:	4798      	blx	r3
    283a:	6320      	str	r0, [r4, #48]	; 0x30
    sample.gyroZ =  gyroZint * BMI055_GYRO_2000DS_DIV;
    283c:	0228      	lsls	r0, r5, #8
    283e:	4307      	orrs	r7, r0
    2840:	b238      	sxth	r0, r7
    2842:	4b15      	ldr	r3, [pc, #84]	; (2898 <sampleTick+0x29c>)
    2844:	1100      	asrs	r0, r0, #4
    2846:	4798      	blx	r3
    2848:	23fe      	movs	r3, #254	; 0xfe
    284a:	2200      	movs	r2, #0
    284c:	059b      	lsls	r3, r3, #22
    284e:	47b0      	blx	r6
    2850:	4b15      	ldr	r3, [pc, #84]	; (28a8 <sampleTick+0x2ac>)
    2852:	4798      	blx	r3
    2854:	6360      	str	r0, [r4, #52]	; 0x34


    delay_us(400);
    2856:	20c8      	movs	r0, #200	; 0xc8
    2858:	4b19      	ldr	r3, [pc, #100]	; (28c0 <sampleTick+0x2c4>)
    285a:	0040      	lsls	r0, r0, #1
    285c:	4798      	blx	r3
    u32_t PressureRaw = readMS5803AdcResults();
    285e:	4b19      	ldr	r3, [pc, #100]	; (28c4 <sampleTick+0x2c8>)
    2860:	4798      	blx	r3
    ConvertPressureTemperature(PressureRaw, tempRaw, &sample.temperatureCelcus, &sample.pressureMbar);
    2862:	4a1a      	ldr	r2, [pc, #104]	; (28cc <sampleTick+0x2d0>)
    2864:	9901      	ldr	r1, [sp, #4]
    2866:	4b1a      	ldr	r3, [pc, #104]	; (28d0 <sampleTick+0x2d4>)
    2868:	4d1a      	ldr	r5, [pc, #104]	; (28d4 <sampleTick+0x2d8>)
    286a:	47a8      	blx	r5
    sample.altitudefeet = paToFeetNOAA(sample.pressureMbar);
    286c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    286e:	4b1a      	ldr	r3, [pc, #104]	; (28d8 <sampleTick+0x2dc>)
    2870:	4798      	blx	r3
    2872:	6420      	str	r0, [r4, #64]	; 0x40
    2874:	6461      	str	r1, [r4, #68]	; 0x44
}
    2876:	b007      	add	sp, #28
    2878:	bdf0      	pop	{r4, r5, r6, r7, pc}
    287a:	46c0      	nop			; (mov r8, r8)
    287c:	2000053c 	.word	0x2000053c
    2880:	0000103d 	.word	0x0000103d
    2884:	200007e8 	.word	0x200007e8
    2888:	200004d8 	.word	0x200004d8
    288c:	00006714 	.word	0x00006714
    2890:	20000528 	.word	0x20000528
    2894:	00000cf9 	.word	0x00000cf9
    2898:	00005fb5 	.word	0x00005fb5
    289c:	77318fc5 	.word	0x77318fc5
    28a0:	0000536d 	.word	0x0000536d
    28a4:	3f5f212d 	.word	0x3f5f212d
    28a8:	00006151 	.word	0x00006151
    28ac:	fffff0c4 	.word	0xfffff0c4
    28b0:	02de00d2 	.word	0x02de00d2
    28b4:	bf8f8a09 	.word	0xbf8f8a09
    28b8:	41004400 	.word	0x41004400
    28bc:	00002a05 	.word	0x00002a05
    28c0:	00000fc1 	.word	0x00000fc1
    28c4:	000003ad 	.word	0x000003ad
    28c8:	00002a1d 	.word	0x00002a1d
    28cc:	20000824 	.word	0x20000824
    28d0:	20000820 	.word	0x20000820
    28d4:	000003ed 	.word	0x000003ed
    28d8:	0000048d 	.word	0x0000048d

000028dc <sercomClockEnable>:
#include <util.h>

void sercomClockEnable(SercomId id, uint32_t clock_channel, u8_t divider) {
    28dc:	b570      	push	{r4, r5, r6, lr}
    28de:	0004      	movs	r4, r0
    // prevent this clock write from changing any other clocks
    PM->APBCMASK.reg |= 1 << (PM_APBCMASK_SERCOM0_Pos + id);
    28e0:	2301      	movs	r3, #1
    28e2:	1ca6      	adds	r6, r4, #2
    28e4:	40b3      	lsls	r3, r6
    28e6:	480d      	ldr	r0, [pc, #52]	; (291c <sercomClockEnable+0x40>)
#include <util.h>

void sercomClockEnable(SercomId id, uint32_t clock_channel, u8_t divider) {
    28e8:	000d      	movs	r5, r1
    // prevent this clock write from changing any other clocks
    PM->APBCMASK.reg |= 1 << (PM_APBCMASK_SERCOM0_Pos + id);
    28ea:	6a01      	ldr	r1, [r0, #32]
    28ec:	430b      	orrs	r3, r1
    28ee:	6203      	str	r3, [r0, #32]


    if (clock_channel != 0) {
    28f0:	2d00      	cmp	r5, #0
    28f2:	d003      	beq.n	28fc <sercomClockEnable+0x20>
        // clock generators 3-8 have 8 division factor bits - DIV[7:0]
        gclkEnable(clock_channel, GCLK_SOURCE_DFLL48M, divider);
    28f4:	2107      	movs	r1, #7
    28f6:	0028      	movs	r0, r5
    28f8:	4b09      	ldr	r3, [pc, #36]	; (2920 <sercomClockEnable+0x44>)
    28fa:	4798      	blx	r3
    }


    // attach clock
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
    28fc:	22f0      	movs	r2, #240	; 0xf0
    28fe:	2080      	movs	r0, #128	; 0x80
    2900:	0229      	lsls	r1, r5, #8
    2902:	0112      	lsls	r2, r2, #4
    2904:	4011      	ands	r1, r2
    2906:	01c0      	lsls	r0, r0, #7
    2908:	4301      	orrs	r1, r0
    290a:	0020      	movs	r0, r4
    290c:	3014      	adds	r0, #20
    290e:	223f      	movs	r2, #63	; 0x3f
    2910:	0003      	movs	r3, r0
    2912:	4013      	ands	r3, r2
    2914:	4319      	orrs	r1, r3
    2916:	4b03      	ldr	r3, [pc, #12]	; (2924 <sercomClockEnable+0x48>)
    2918:	8059      	strh	r1, [r3, #2]
                        GCLK_CLKCTRL_GEN(clock_channel) |
                        GCLK_CLKCTRL_ID(SERCOM0_GCLK_ID_CORE + id);
}
    291a:	bd70      	pop	{r4, r5, r6, pc}
    291c:	40000400 	.word	0x40000400
    2920:	00000f71 	.word	0x00000f71
    2924:	40000c00 	.word	0x40000c00

00002928 <sercomReset>:
void computeKalmanStates();



inline static Sercom* sercom(SercomId id) {
    return (Sercom*) (0x42000800U + id * 1024);
    2928:	4b04      	ldr	r3, [pc, #16]	; (293c <sercomReset+0x14>)
    292a:	0280      	lsls	r0, r0, #10
    292c:	18c0      	adds	r0, r0, r3


void sercomReset(SercomId id) {
    sercom(id)->SPI.CTRLA.reg = SERCOM_SPI_CTRLA_SWRST;
    292e:	2301      	movs	r3, #1
    2930:	6003      	str	r3, [r0, #0]
    while(sercom(id)->SPI.CTRLA.reg & SERCOM_SPI_CTRLA_SWRST);
    2932:	6802      	ldr	r2, [r0, #0]
    2934:	421a      	tst	r2, r3
    2936:	d1fc      	bne.n	2932 <sercomReset+0xa>
}
    2938:	4770      	bx	lr
    293a:	46c0      	nop			; (mov r8, r8)
    293c:	42000800 	.word	0x42000800

00002940 <sercomSpiMasterInit>:
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
}


void sercomSpiMasterInit(SercomId id, u32_t dipo, u32_t dopo, bool cpol, bool cpha, u8_t baud) {
    2940:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2942:	0004      	movs	r4, r0
    2944:	9300      	str	r3, [sp, #0]
    2946:	ab08      	add	r3, sp, #32
    2948:	781b      	ldrb	r3, [r3, #0]
    294a:	000e      	movs	r6, r1
    294c:	9301      	str	r3, [sp, #4]
    294e:	ab09      	add	r3, sp, #36	; 0x24
    2950:	781f      	ldrb	r7, [r3, #0]

    sercomReset(id);
    2952:	4b12      	ldr	r3, [pc, #72]	; (299c <sercomSpiMasterInit+0x5c>)
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
}


void sercomSpiMasterInit(SercomId id, u32_t dipo, u32_t dopo, bool cpol, bool cpha, u8_t baud) {
    2954:	0015      	movs	r5, r2

    sercomReset(id);
    2956:	4798      	blx	r3
    2958:	4b11      	ldr	r3, [pc, #68]	; (29a0 <sercomSpiMasterInit+0x60>)
    295a:	02a4      	lsls	r4, r4, #10
    295c:	18e4      	adds	r4, r4, r3

    sercom(id)->SPI.CTRLB.reg
        = SERCOM_SPI_CTRLB_RXEN;
    295e:	2380      	movs	r3, #128	; 0x80
    2960:	029b      	lsls	r3, r3, #10
    2962:	6063      	str	r3, [r4, #4]
    2964:	23c0      	movs	r3, #192	; 0xc0
    sercom(id)->SPI.BAUD.reg = baud;

    sercom(id)->SPI.CTRLA.reg
        = SERCOM_SPI_CTRLA_ENABLE
          | SERCOM_SPI_CTRLA_MODE_SPI_MASTER
          | SERCOM_SPI_CTRLA_DIPO(dipo)
    2966:	21c0      	movs	r1, #192	; 0xc0
    2968:	042d      	lsls	r5, r5, #16
    296a:	029b      	lsls	r3, r3, #10
    296c:	402b      	ands	r3, r5
    296e:	250e      	movs	r5, #14
    2970:	0536      	lsls	r6, r6, #20
    2972:	0389      	lsls	r1, r1, #14
    2974:	4031      	ands	r1, r6
          | SERCOM_SPI_CTRLA_DOPO(dopo)
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
    2976:	9e00      	ldr	r6, [sp, #0]
    2978:	431d      	orrs	r5, r3
    297a:	1e73      	subs	r3, r6, #1
    297c:	419e      	sbcs	r6, r3
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
    297e:	9b01      	ldr	r3, [sp, #4]
    sercom(id)->SPI.CTRLA.reg
        = SERCOM_SPI_CTRLA_ENABLE
          | SERCOM_SPI_CTRLA_MODE_SPI_MASTER
          | SERCOM_SPI_CTRLA_DIPO(dipo)
          | SERCOM_SPI_CTRLA_DOPO(dopo)
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
    2980:	0772      	lsls	r2, r6, #29
    2982:	430d      	orrs	r5, r1
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
    2984:	432a      	orrs	r2, r5
    2986:	1e59      	subs	r1, r3, #1
    2988:	418b      	sbcs	r3, r1
    298a:	0016      	movs	r6, r2
    298c:	071b      	lsls	r3, r3, #28
    298e:	431e      	orrs	r6, r3
    sercomReset(id);

    sercom(id)->SPI.CTRLB.reg
        = SERCOM_SPI_CTRLB_RXEN;

    sercom(id)->SPI.BAUD.reg = baud;
    2990:	7327      	strb	r7, [r4, #12]

    sercom(id)->SPI.CTRLA.reg
        = SERCOM_SPI_CTRLA_ENABLE
    2992:	6026      	str	r6, [r4, #0]
        };
    }
}

static inline void SPI_sync(SercomId id) {
    while  (sercom(id)->SPI.SYNCBUSY.bit.CTRLB);
    2994:	69e3      	ldr	r3, [r4, #28]
    2996:	075b      	lsls	r3, r3, #29
    2998:	d4fc      	bmi.n	2994 <sercomSpiMasterInit+0x54>
          | SERCOM_SPI_CTRLA_DOPO(dopo)
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);

    SPI_sync(id);
}
    299a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    299c:	00002929 	.word	0x00002929
    29a0:	42000800 	.word	0x42000800

000029a4 <sercomUartInit>:




void sercomUartInit(SercomId id, u32_t rxpo, u32_t txpo, int32_t fBAUD) {
    29a4:	b570      	push	{r4, r5, r6, lr}
    29a6:	0006      	movs	r6, r0

    //float BAUD = 65536*(1-(16*(115200/(48000000/8))));


    sercomReset(id);
    29a8:	4b0c      	ldr	r3, [pc, #48]	; (29dc <sercomUartInit+0x38>)
}




void sercomUartInit(SercomId id, u32_t rxpo, u32_t txpo, int32_t fBAUD) {
    29aa:	000d      	movs	r5, r1
    29ac:	0014      	movs	r4, r2

    //float BAUD = 65536*(1-(16*(115200/(48000000/8))));


    sercomReset(id);
    29ae:	4798      	blx	r3
void computeKalmanStates();



inline static Sercom* sercom(SercomId id) {
    return (Sercom*) (0x42000800U + id * 1024);
    29b0:	4b0b      	ldr	r3, [pc, #44]	; (29e0 <sercomUartInit+0x3c>)
    29b2:	02b0      	lsls	r0, r6, #10
    29b4:	18c0      	adds	r0, r0, r3
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    29b6:	2304      	movs	r3, #4
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    29b8:	22c0      	movs	r2, #192	; 0xc0

    //float BAUD = 65536*(1-(16*(115200/(48000000/8))));


    sercomReset(id);
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    29ba:	6003      	str	r3, [r0, #0]
    sercom(id)->USART.BAUD.reg = 45403;
    29bc:	4b09      	ldr	r3, [pc, #36]	; (29e4 <sercomUartInit+0x40>)
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    29be:	0529      	lsls	r1, r5, #20
    //float BAUD = 65536*(1-(16*(115200/(48000000/8))));


    sercomReset(id);
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    sercom(id)->USART.BAUD.reg = 45403;
    29c0:	8183      	strh	r3, [r0, #12]
    sercom(id)->USART.CTRLB.reg
        = SERCOM_USART_CTRLB_RXEN
    29c2:	23c0      	movs	r3, #192	; 0xc0
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    29c4:	0392      	lsls	r2, r2, #14
    29c6:	4011      	ands	r1, r2
    29c8:	4a07      	ldr	r2, [pc, #28]	; (29e8 <sercomUartInit+0x44>)

    sercomReset(id);
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    sercom(id)->USART.BAUD.reg = 45403;
    sercom(id)->USART.CTRLB.reg
        = SERCOM_USART_CTRLB_RXEN
    29ca:	029b      	lsls	r3, r3, #10
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    29cc:	0424      	lsls	r4, r4, #16

    sercomReset(id);
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    sercom(id)->USART.BAUD.reg = 45403;
    sercom(id)->USART.CTRLB.reg
        = SERCOM_USART_CTRLB_RXEN
    29ce:	6043      	str	r3, [r0, #4]
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    29d0:	4311      	orrs	r1, r2
    29d2:	4023      	ands	r3, r4
    29d4:	430b      	orrs	r3, r1
    sercom(id)->USART.BAUD.reg = 45403;
    sercom(id)->USART.CTRLB.reg
        = SERCOM_USART_CTRLB_RXEN
          | SERCOM_USART_CTRLB_TXEN;
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
    29d6:	6003      	str	r3, [r0, #0]
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
}
    29d8:	bd70      	pop	{r4, r5, r6, pc}
    29da:	46c0      	nop			; (mov r8, r8)
    29dc:	00002929 	.word	0x00002929
    29e0:	42000800 	.word	0x42000800
    29e4:	ffffb15b 	.word	0xffffb15b
    29e8:	40000006 	.word	0x40000006

000029ec <spiDataTransfer>:
    29ec:	4b04      	ldr	r3, [pc, #16]	; (2a00 <spiDataTransfer+0x14>)
    29ee:	0280      	lsls	r0, r0, #10
    29f0:	18c0      	adds	r0, r0, r3

u8_t spiDataTransfer(SercomId id, u8_t data) {
    sercom(id)->SPI.DATA.reg = data;
    29f2:	6281      	str	r1, [r0, #40]	; 0x28
    while(sercom(id)->SPI.INTFLAG.bit.RXC == 0);
    29f4:	7e03      	ldrb	r3, [r0, #24]
    29f6:	075b      	lsls	r3, r3, #29
    29f8:	d5fc      	bpl.n	29f4 <spiDataTransfer+0x8>
    return sercom(id)->SPI.DATA.reg;
    29fa:	6a80      	ldr	r0, [r0, #40]	; 0x28
    29fc:	b2c0      	uxtb	r0, r0
}
    29fe:	4770      	bx	lr
    2a00:	42000800 	.word	0x42000800

00002a04 <spiDataOut>:
    2a04:	4b04      	ldr	r3, [pc, #16]	; (2a18 <spiDataOut+0x14>)
    2a06:	0280      	lsls	r0, r0, #10
    2a08:	18c0      	adds	r0, r0, r3

void spiDataOut(SercomId id, u8_t data) {
    sercom(id)->SPI.DATA.reg = data;
    2a0a:	6281      	str	r1, [r0, #40]	; 0x28
    while(sercom(id)->SPI.INTFLAG.bit.RXC == 0);
    2a0c:	7e03      	ldrb	r3, [r0, #24]
    2a0e:	075b      	lsls	r3, r3, #29
    2a10:	d5fc      	bpl.n	2a0c <spiDataOut+0x8>
    u8_t dummy = sercom(id)->SPI.DATA.reg;
    2a12:	6a83      	ldr	r3, [r0, #40]	; 0x28
}
    2a14:	4770      	bx	lr
    2a16:	46c0      	nop			; (mov r8, r8)
    2a18:	42000800 	.word	0x42000800

00002a1c <spiDataIn>:
    2a1c:	4b05      	ldr	r3, [pc, #20]	; (2a34 <spiDataIn+0x18>)
    2a1e:	0280      	lsls	r0, r0, #10
    2a20:	18c0      	adds	r0, r0, r3

u8_t spiDataIn(SercomId id) {
    sercom(id)->SPI.DATA.reg = 0xFF;
    2a22:	23ff      	movs	r3, #255	; 0xff
    2a24:	6283      	str	r3, [r0, #40]	; 0x28
    while(sercom(id)->SPI.INTFLAG.bit.RXC == 0);
    2a26:	7e03      	ldrb	r3, [r0, #24]
    2a28:	075b      	lsls	r3, r3, #29
    2a2a:	d5fc      	bpl.n	2a26 <spiDataIn+0xa>
    return sercom(id)->SPI.DATA.reg;
    2a2c:	6a80      	ldr	r0, [r0, #40]	; 0x28
    2a2e:	b2c0      	uxtb	r0, r0
}
    2a30:	4770      	bx	lr
    2a32:	46c0      	nop			; (mov r8, r8)
    2a34:	42000800 	.word	0x42000800

00002a38 <usartDataOut>:
    2a38:	4b04      	ldr	r3, [pc, #16]	; (2a4c <usartDataOut+0x14>)
    2a3a:	0280      	lsls	r0, r0, #10
    2a3c:	18c0      	adds	r0, r0, r3

void usartDataOut(SercomId id, u8_t data) {
    sercom(id)->USART.DATA.reg = data;
    2a3e:	b289      	uxth	r1, r1
    2a40:	8501      	strh	r1, [r0, #40]	; 0x28
    while(sercom(id)->USART.INTFLAG.bit.DRE == 0);
    2a42:	7e03      	ldrb	r3, [r0, #24]
    2a44:	07db      	lsls	r3, r3, #31
    2a46:	d5fc      	bpl.n	2a42 <usartDataOut+0xa>
}
    2a48:	4770      	bx	lr
    2a4a:	46c0      	nop			; (mov r8, r8)
    2a4c:	42000800 	.word	0x42000800

00002a50 <usartDataIn>:
    2a50:	4b02      	ldr	r3, [pc, #8]	; (2a5c <usartDataIn+0xc>)
    2a52:	0280      	lsls	r0, r0, #10
    2a54:	18c0      	adds	r0, r0, r3

u8_t usartDataIn(SercomId id) {
    return sercom(id)->USART.DATA.reg;
    2a56:	8d00      	ldrh	r0, [r0, #40]	; 0x28
    2a58:	b2c0      	uxtb	r0, r0
}
    2a5a:	4770      	bx	lr
    2a5c:	42000800 	.word	0x42000800

00002a60 <attemptConnection>:
#include <util.h>
#include <boardDefines.h>


void attemptConnection() {
    2a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

    if (USARTconnectionAvaliable()) {
    2a62:	4b2f      	ldr	r3, [pc, #188]	; (2b20 <attemptConnection+0xc0>)
    2a64:	4798      	blx	r3
    2a66:	2800      	cmp	r0, #0
    2a68:	d058      	beq.n	2b1c <attemptConnection+0xbc>

        flightState = flightIdle;
    2a6a:	2201      	movs	r2, #1
    2a6c:	4b2d      	ldr	r3, [pc, #180]	; (2b24 <attemptConnection+0xc4>)
    2a6e:	701a      	strb	r2, [r3, #0]

        //wait for user to tell us what they want
        while(sercom(USART3)->SPI.INTFLAG.bit.RXC == 0);
    2a70:	4a2d      	ldr	r2, [pc, #180]	; (2b28 <attemptConnection+0xc8>)
    2a72:	7e13      	ldrb	r3, [r2, #24]
    2a74:	4e2c      	ldr	r6, [pc, #176]	; (2b28 <attemptConnection+0xc8>)
    2a76:	075b      	lsls	r3, r3, #29
    2a78:	d5fb      	bpl.n	2a72 <attemptConnection+0x12>
        u8_t option = usartDataIn(USART3);
    2a7a:	2003      	movs	r0, #3
    2a7c:	4d2b      	ldr	r5, [pc, #172]	; (2b2c <attemptConnection+0xcc>)
    2a7e:	47a8      	blx	r5
    2a80:	1e04      	subs	r4, r0, #0

        //user wants to read flight logs
        if (option == 0x4C) {
    2a82:	2c4c      	cmp	r4, #76	; 0x4c
    2a84:	d13c      	bne.n	2b00 <attemptConnection+0xa0>
    2a86:	2400      	movs	r4, #0

            //send list of available flight logs
            for (u8_t flightLog = 0; flightLog < 11; ++flightLog) {

                if (isFlightLogged(flightLog)) {
    2a88:	0020      	movs	r0, r4
    2a8a:	4b29      	ldr	r3, [pc, #164]	; (2b30 <attemptConnection+0xd0>)
    2a8c:	4798      	blx	r3
    2a8e:	2800      	cmp	r0, #0
    2a90:	d005      	beq.n	2a9e <attemptConnection+0x3e>

                    usartDataOut(USART3, flightLog + 0x30);
    2a92:	0021      	movs	r1, r4
    2a94:	3130      	adds	r1, #48	; 0x30
    2a96:	b2c9      	uxtb	r1, r1
    2a98:	2003      	movs	r0, #3
    2a9a:	4b26      	ldr	r3, [pc, #152]	; (2b34 <attemptConnection+0xd4>)
    2a9c:	4798      	blx	r3

        //user wants to read flight logs
        if (option == 0x4C) {

            //send list of available flight logs
            for (u8_t flightLog = 0; flightLog < 11; ++flightLog) {
    2a9e:	3401      	adds	r4, #1
    2aa0:	b2e4      	uxtb	r4, r4
    2aa2:	2c0b      	cmp	r4, #11
    2aa4:	d1f0      	bne.n	2a88 <attemptConnection+0x28>

                    usartDataOut(USART3, flightLog + 0x30);
                }
            }
            //done sending flight numbers
            usartDataOut(USART3, 0x0F);
    2aa6:	210f      	movs	r1, #15
    2aa8:	2003      	movs	r0, #3
    2aaa:	4c22      	ldr	r4, [pc, #136]	; (2b34 <attemptConnection+0xd4>)
    2aac:	47a0      	blx	r4

            //wait for user to pick which flight to read
            while(sercom(USART3)->SPI.INTFLAG.bit.RXC == 0);
    2aae:	7e33      	ldrb	r3, [r6, #24]
    2ab0:	075b      	lsls	r3, r3, #29
    2ab2:	d5fc      	bpl.n	2aae <attemptConnection+0x4e>
            u8_t flightToRead = usartDataIn(USART3) - 0x30;
    2ab4:	2003      	movs	r0, #3
    2ab6:	47a8      	blx	r5
    2ab8:	3830      	subs	r0, #48	; 0x30
    2aba:	b2c5      	uxtb	r5, r0


            u32_t flightStartAddress = getFlightStartAddress(flightToRead);
    2abc:	0028      	movs	r0, r5
    2abe:	4b1e      	ldr	r3, [pc, #120]	; (2b38 <attemptConnection+0xd8>)
    2ac0:	4798      	blx	r3
            u32_t flightEndAddress = FindFlightEndingAddress(flightToRead) - 0x100;
    2ac2:	4b1e      	ldr	r3, [pc, #120]	; (2b3c <attemptConnection+0xdc>)
            //wait for user to pick which flight to read
            while(sercom(USART3)->SPI.INTFLAG.bit.RXC == 0);
            u8_t flightToRead = usartDataIn(USART3) - 0x30;


            u32_t flightStartAddress = getFlightStartAddress(flightToRead);
    2ac4:	0007      	movs	r7, r0
            u32_t flightEndAddress = FindFlightEndingAddress(flightToRead) - 0x100;
    2ac6:	0028      	movs	r0, r5
    2ac8:	4798      	blx	r3
    2aca:	1e46      	subs	r6, r0, #1
    2acc:	3eff      	subs	r6, #255	; 0xff

            //inform of page numbers
            u16_t pagesToSend = (flightEndAddress  - flightStartAddress) >> 8;
    2ace:	1bf5      	subs	r5, r6, r7
    2ad0:	0a2d      	lsrs	r5, r5, #8
            usartDataOut(USART3, pagesToSend >> 0);
    2ad2:	b2e9      	uxtb	r1, r5
    2ad4:	2003      	movs	r0, #3
    2ad6:	47a0      	blx	r4
            usartDataOut(USART3, pagesToSend >> 8);
    2ad8:	b2a9      	uxth	r1, r5
    2ada:	0a09      	lsrs	r1, r1, #8
    2adc:	2003      	movs	r0, #3
    2ade:	47a0      	blx	r4

            //send flight end address for % full
            usartDataOut(USART3, flightEndAddress >> 0);
    2ae0:	b2f1      	uxtb	r1, r6
    2ae2:	2003      	movs	r0, #3
    2ae4:	47a0      	blx	r4
            usartDataOut(USART3, flightEndAddress >> 8);
    2ae6:	0a31      	lsrs	r1, r6, #8
    2ae8:	b2c9      	uxtb	r1, r1
    2aea:	2003      	movs	r0, #3
    2aec:	47a0      	blx	r4
            usartDataOut(USART3, flightEndAddress >> 16);
    2aee:	0c31      	lsrs	r1, r6, #16
    2af0:	b2c9      	uxtb	r1, r1
    2af2:	2003      	movs	r0, #3
    2af4:	47a0      	blx	r4

            //USART out the flights pages
            sendTheasePagesToComputer(flightStartAddress, flightEndAddress);
    2af6:	0031      	movs	r1, r6
    2af8:	0038      	movs	r0, r7
    2afa:	4b11      	ldr	r3, [pc, #68]	; (2b40 <attemptConnection+0xe0>)
    2afc:	4798      	blx	r3
    2afe:	e00d      	b.n	2b1c <attemptConnection+0xbc>

        }
        //user wants to erase chip
        if (option == 0x45) { // 'E'
    2b00:	2845      	cmp	r0, #69	; 0x45
    2b02:	d10b      	bne.n	2b1c <attemptConnection+0xbc>
            AT25SFChipErase();
    2b04:	4b0f      	ldr	r3, [pc, #60]	; (2b44 <attemptConnection+0xe4>)
    2b06:	4798      	blx	r3

            AT25SFHoldTillReady();
    2b08:	4b0f      	ldr	r3, [pc, #60]	; (2b48 <attemptConnection+0xe8>)
    2b0a:	4798      	blx	r3

            usartDataOut(USART3, 'E');
    2b0c:	2003      	movs	r0, #3
    2b0e:	4b09      	ldr	r3, [pc, #36]	; (2b34 <attemptConnection+0xd4>)
    2b10:	0021      	movs	r1, r4
    2b12:	4798      	blx	r3
            beep(400);
    2b14:	20c8      	movs	r0, #200	; 0xc8
    2b16:	4b0d      	ldr	r3, [pc, #52]	; (2b4c <attemptConnection+0xec>)
    2b18:	0040      	lsls	r0, r0, #1
    2b1a:	4798      	blx	r3


        }
    }

}
    2b1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2b1e:	46c0      	nop			; (mov r8, r8)
    2b20:	00000a79 	.word	0x00000a79
    2b24:	200006a0 	.word	0x200006a0
    2b28:	42001400 	.word	0x42001400
    2b2c:	00002a51 	.word	0x00002a51
    2b30:	000024d9 	.word	0x000024d9
    2b34:	00002a39 	.word	0x00002a39
    2b38:	00002489 	.word	0x00002489
    2b3c:	000024b1 	.word	0x000024b1
    2b40:	00000aad 	.word	0x00000aad
    2b44:	00000219 	.word	0x00000219
    2b48:	000001e5 	.word	0x000001e5
    2b4c:	00000d61 	.word	0x00000d61

00002b50 <pow>:
    2b50:	b5f0      	push	{r4, r5, r6, r7, lr}
    2b52:	465f      	mov	r7, fp
    2b54:	464d      	mov	r5, r9
    2b56:	4656      	mov	r6, sl
    2b58:	4644      	mov	r4, r8
    2b5a:	b4f0      	push	{r4, r5, r6, r7}
    2b5c:	b091      	sub	sp, #68	; 0x44
    2b5e:	001f      	movs	r7, r3
    2b60:	0004      	movs	r4, r0
    2b62:	000d      	movs	r5, r1
    2b64:	0016      	movs	r6, r2
    2b66:	f000 f9af 	bl	2ec8 <__ieee754_pow>
    2b6a:	4bcf      	ldr	r3, [pc, #828]	; (2ea8 <pow+0x358>)
    2b6c:	9002      	str	r0, [sp, #8]
    2b6e:	9103      	str	r1, [sp, #12]
    2b70:	469b      	mov	fp, r3
    2b72:	781b      	ldrb	r3, [r3, #0]
    2b74:	b25b      	sxtb	r3, r3
    2b76:	4699      	mov	r9, r3
    2b78:	3301      	adds	r3, #1
    2b7a:	d04f      	beq.n	2c1c <pow+0xcc>
    2b7c:	0032      	movs	r2, r6
    2b7e:	003b      	movs	r3, r7
    2b80:	0030      	movs	r0, r6
    2b82:	0039      	movs	r1, r7
    2b84:	f003 f9c0 	bl	5f08 <__aeabi_dcmpun>
    2b88:	9000      	str	r0, [sp, #0]
    2b8a:	2800      	cmp	r0, #0
    2b8c:	d146      	bne.n	2c1c <pow+0xcc>
    2b8e:	0022      	movs	r2, r4
    2b90:	002b      	movs	r3, r5
    2b92:	0020      	movs	r0, r4
    2b94:	0029      	movs	r1, r5
    2b96:	f003 f9b7 	bl	5f08 <__aeabi_dcmpun>
    2b9a:	2200      	movs	r2, #0
    2b9c:	4682      	mov	sl, r0
    2b9e:	2800      	cmp	r0, #0
    2ba0:	d134      	bne.n	2c0c <pow+0xbc>
    2ba2:	2300      	movs	r3, #0
    2ba4:	0020      	movs	r0, r4
    2ba6:	0029      	movs	r1, r5
    2ba8:	f001 f8fc 	bl	3da4 <__aeabi_dcmpeq>
    2bac:	2800      	cmp	r0, #0
    2bae:	d03a      	beq.n	2c26 <pow+0xd6>
    2bb0:	2200      	movs	r2, #0
    2bb2:	2300      	movs	r3, #0
    2bb4:	0030      	movs	r0, r6
    2bb6:	0039      	movs	r1, r7
    2bb8:	f001 f8f4 	bl	3da4 <__aeabi_dcmpeq>
    2bbc:	9005      	str	r0, [sp, #20]
    2bbe:	2800      	cmp	r0, #0
    2bc0:	d100      	bne.n	2bc4 <pow+0x74>
    2bc2:	e074      	b.n	2cae <pow+0x15e>
    2bc4:	ab06      	add	r3, sp, #24
    2bc6:	4698      	mov	r8, r3
    2bc8:	2301      	movs	r3, #1
    2bca:	4642      	mov	r2, r8
    2bcc:	9306      	str	r3, [sp, #24]
    2bce:	4bb7      	ldr	r3, [pc, #732]	; (2eac <pow+0x35c>)
    2bd0:	6053      	str	r3, [r2, #4]
    2bd2:	4643      	mov	r3, r8
    2bd4:	4652      	mov	r2, sl
    2bd6:	609c      	str	r4, [r3, #8]
    2bd8:	60dd      	str	r5, [r3, #12]
    2bda:	621a      	str	r2, [r3, #32]
    2bdc:	611e      	str	r6, [r3, #16]
    2bde:	615f      	str	r7, [r3, #20]
    2be0:	4642      	mov	r2, r8
    2be2:	2300      	movs	r3, #0
    2be4:	2400      	movs	r4, #0
    2be6:	6193      	str	r3, [r2, #24]
    2be8:	61d4      	str	r4, [r2, #28]
    2bea:	464b      	mov	r3, r9
    2bec:	2b00      	cmp	r3, #0
    2bee:	d100      	bne.n	2bf2 <pow+0xa2>
    2bf0:	e094      	b.n	2d1c <pow+0x1cc>
    2bf2:	2300      	movs	r3, #0
    2bf4:	4cae      	ldr	r4, [pc, #696]	; (2eb0 <pow+0x360>)
    2bf6:	9300      	str	r3, [sp, #0]
    2bf8:	9401      	str	r4, [sp, #4]
    2bfa:	9800      	ldr	r0, [sp, #0]
    2bfc:	9901      	ldr	r1, [sp, #4]
    2bfe:	b011      	add	sp, #68	; 0x44
    2c00:	bc3c      	pop	{r2, r3, r4, r5}
    2c02:	4690      	mov	r8, r2
    2c04:	4699      	mov	r9, r3
    2c06:	46a2      	mov	sl, r4
    2c08:	46ab      	mov	fp, r5
    2c0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2c0c:	2300      	movs	r3, #0
    2c0e:	0030      	movs	r0, r6
    2c10:	0039      	movs	r1, r7
    2c12:	f001 f8c7 	bl	3da4 <__aeabi_dcmpeq>
    2c16:	2800      	cmp	r0, #0
    2c18:	d000      	beq.n	2c1c <pow+0xcc>
    2c1a:	e0eb      	b.n	2df4 <pow+0x2a4>
    2c1c:	9b02      	ldr	r3, [sp, #8]
    2c1e:	9c03      	ldr	r4, [sp, #12]
    2c20:	9300      	str	r3, [sp, #0]
    2c22:	9401      	str	r4, [sp, #4]
    2c24:	e7e9      	b.n	2bfa <pow+0xaa>
    2c26:	9802      	ldr	r0, [sp, #8]
    2c28:	9903      	ldr	r1, [sp, #12]
    2c2a:	f000 ff7d 	bl	3b28 <finite>
    2c2e:	4681      	mov	r9, r0
    2c30:	2800      	cmp	r0, #0
    2c32:	d100      	bne.n	2c36 <pow+0xe6>
    2c34:	e086      	b.n	2d44 <pow+0x1f4>
    2c36:	9802      	ldr	r0, [sp, #8]
    2c38:	9903      	ldr	r1, [sp, #12]
    2c3a:	2200      	movs	r2, #0
    2c3c:	2300      	movs	r3, #0
    2c3e:	f001 f8b1 	bl	3da4 <__aeabi_dcmpeq>
    2c42:	2800      	cmp	r0, #0
    2c44:	d0ea      	beq.n	2c1c <pow+0xcc>
    2c46:	0020      	movs	r0, r4
    2c48:	0029      	movs	r1, r5
    2c4a:	f000 ff6d 	bl	3b28 <finite>
    2c4e:	9a02      	ldr	r2, [sp, #8]
    2c50:	9b03      	ldr	r3, [sp, #12]
    2c52:	9200      	str	r2, [sp, #0]
    2c54:	9301      	str	r3, [sp, #4]
    2c56:	2800      	cmp	r0, #0
    2c58:	d0cf      	beq.n	2bfa <pow+0xaa>
    2c5a:	0030      	movs	r0, r6
    2c5c:	0039      	movs	r1, r7
    2c5e:	f000 ff63 	bl	3b28 <finite>
    2c62:	9a02      	ldr	r2, [sp, #8]
    2c64:	9b03      	ldr	r3, [sp, #12]
    2c66:	9200      	str	r2, [sp, #0]
    2c68:	9301      	str	r3, [sp, #4]
    2c6a:	2800      	cmp	r0, #0
    2c6c:	d0c5      	beq.n	2bfa <pow+0xaa>
    2c6e:	ab06      	add	r3, sp, #24
    2c70:	4698      	mov	r8, r3
    2c72:	2304      	movs	r3, #4
    2c74:	4642      	mov	r2, r8
    2c76:	9306      	str	r3, [sp, #24]
    2c78:	4b8c      	ldr	r3, [pc, #560]	; (2eac <pow+0x35c>)
    2c7a:	6094      	str	r4, [r2, #8]
    2c7c:	60d5      	str	r5, [r2, #12]
    2c7e:	6053      	str	r3, [r2, #4]
    2c80:	2300      	movs	r3, #0
    2c82:	2400      	movs	r4, #0
    2c84:	6213      	str	r3, [r2, #32]
    2c86:	2300      	movs	r3, #0
    2c88:	6193      	str	r3, [r2, #24]
    2c8a:	61d4      	str	r4, [r2, #28]
    2c8c:	465b      	mov	r3, fp
    2c8e:	781b      	ldrb	r3, [r3, #0]
    2c90:	6116      	str	r6, [r2, #16]
    2c92:	6157      	str	r7, [r2, #20]
    2c94:	b25b      	sxtb	r3, r3
    2c96:	2b02      	cmp	r3, #2
    2c98:	d004      	beq.n	2ca4 <pow+0x154>
    2c9a:	4640      	mov	r0, r8
    2c9c:	f000 ff4e 	bl	3b3c <matherr>
    2ca0:	2800      	cmp	r0, #0
    2ca2:	d140      	bne.n	2d26 <pow+0x1d6>
    2ca4:	f003 fc74 	bl	6590 <__errno>
    2ca8:	2322      	movs	r3, #34	; 0x22
    2caa:	6003      	str	r3, [r0, #0]
    2cac:	e03b      	b.n	2d26 <pow+0x1d6>
    2cae:	0030      	movs	r0, r6
    2cb0:	0039      	movs	r1, r7
    2cb2:	f000 ff39 	bl	3b28 <finite>
    2cb6:	9a02      	ldr	r2, [sp, #8]
    2cb8:	9b03      	ldr	r3, [sp, #12]
    2cba:	9200      	str	r2, [sp, #0]
    2cbc:	9301      	str	r3, [sp, #4]
    2cbe:	2800      	cmp	r0, #0
    2cc0:	d09b      	beq.n	2bfa <pow+0xaa>
    2cc2:	2200      	movs	r2, #0
    2cc4:	2300      	movs	r3, #0
    2cc6:	0030      	movs	r0, r6
    2cc8:	0039      	movs	r1, r7
    2cca:	f001 f871 	bl	3db0 <__aeabi_dcmplt>
    2cce:	2800      	cmp	r0, #0
    2cd0:	d100      	bne.n	2cd4 <pow+0x184>
    2cd2:	e792      	b.n	2bfa <pow+0xaa>
    2cd4:	ab06      	add	r3, sp, #24
    2cd6:	4698      	mov	r8, r3
    2cd8:	2301      	movs	r3, #1
    2cda:	4642      	mov	r2, r8
    2cdc:	9306      	str	r3, [sp, #24]
    2cde:	4b73      	ldr	r3, [pc, #460]	; (2eac <pow+0x35c>)
    2ce0:	6053      	str	r3, [r2, #4]
    2ce2:	4643      	mov	r3, r8
    2ce4:	9a05      	ldr	r2, [sp, #20]
    2ce6:	609c      	str	r4, [r3, #8]
    2ce8:	60dd      	str	r5, [r3, #12]
    2cea:	621a      	str	r2, [r3, #32]
    2cec:	611e      	str	r6, [r3, #16]
    2cee:	615f      	str	r7, [r3, #20]
    2cf0:	465b      	mov	r3, fp
    2cf2:	781b      	ldrb	r3, [r3, #0]
    2cf4:	b25b      	sxtb	r3, r3
    2cf6:	2b00      	cmp	r3, #0
    2cf8:	d00b      	beq.n	2d12 <pow+0x1c2>
    2cfa:	2000      	movs	r0, #0
    2cfc:	4642      	mov	r2, r8
    2cfe:	496d      	ldr	r1, [pc, #436]	; (2eb4 <pow+0x364>)
    2d00:	6190      	str	r0, [r2, #24]
    2d02:	61d1      	str	r1, [r2, #28]
    2d04:	2b02      	cmp	r3, #2
    2d06:	d109      	bne.n	2d1c <pow+0x1cc>
    2d08:	f003 fc42 	bl	6590 <__errno>
    2d0c:	2321      	movs	r3, #33	; 0x21
    2d0e:	6003      	str	r3, [r0, #0]
    2d10:	e009      	b.n	2d26 <pow+0x1d6>
    2d12:	4642      	mov	r2, r8
    2d14:	2300      	movs	r3, #0
    2d16:	2400      	movs	r4, #0
    2d18:	6193      	str	r3, [r2, #24]
    2d1a:	61d4      	str	r4, [r2, #28]
    2d1c:	4640      	mov	r0, r8
    2d1e:	f000 ff0d 	bl	3b3c <matherr>
    2d22:	2800      	cmp	r0, #0
    2d24:	d0f0      	beq.n	2d08 <pow+0x1b8>
    2d26:	4643      	mov	r3, r8
    2d28:	6a1b      	ldr	r3, [r3, #32]
    2d2a:	2b00      	cmp	r3, #0
    2d2c:	d004      	beq.n	2d38 <pow+0x1e8>
    2d2e:	f003 fc2f 	bl	6590 <__errno>
    2d32:	4643      	mov	r3, r8
    2d34:	6a1b      	ldr	r3, [r3, #32]
    2d36:	6003      	str	r3, [r0, #0]
    2d38:	4643      	mov	r3, r8
    2d3a:	69dc      	ldr	r4, [r3, #28]
    2d3c:	699b      	ldr	r3, [r3, #24]
    2d3e:	9300      	str	r3, [sp, #0]
    2d40:	9401      	str	r4, [sp, #4]
    2d42:	e75a      	b.n	2bfa <pow+0xaa>
    2d44:	0020      	movs	r0, r4
    2d46:	0029      	movs	r1, r5
    2d48:	f000 feee 	bl	3b28 <finite>
    2d4c:	2800      	cmp	r0, #0
    2d4e:	d100      	bne.n	2d52 <pow+0x202>
    2d50:	e771      	b.n	2c36 <pow+0xe6>
    2d52:	0030      	movs	r0, r6
    2d54:	0039      	movs	r1, r7
    2d56:	f000 fee7 	bl	3b28 <finite>
    2d5a:	2800      	cmp	r0, #0
    2d5c:	d100      	bne.n	2d60 <pow+0x210>
    2d5e:	e76a      	b.n	2c36 <pow+0xe6>
    2d60:	9802      	ldr	r0, [sp, #8]
    2d62:	9903      	ldr	r1, [sp, #12]
    2d64:	000b      	movs	r3, r1
    2d66:	0002      	movs	r2, r0
    2d68:	f003 f8ce 	bl	5f08 <__aeabi_dcmpun>
    2d6c:	ab06      	add	r3, sp, #24
    2d6e:	4698      	mov	r8, r3
    2d70:	2800      	cmp	r0, #0
    2d72:	d17a      	bne.n	2e6a <pow+0x31a>
    2d74:	2303      	movs	r3, #3
    2d76:	4642      	mov	r2, r8
    2d78:	9306      	str	r3, [sp, #24]
    2d7a:	4b4c      	ldr	r3, [pc, #304]	; (2eac <pow+0x35c>)
    2d7c:	6210      	str	r0, [r2, #32]
    2d7e:	6053      	str	r3, [r2, #4]
    2d80:	465b      	mov	r3, fp
    2d82:	781b      	ldrb	r3, [r3, #0]
    2d84:	6094      	str	r4, [r2, #8]
    2d86:	60d5      	str	r5, [r2, #12]
    2d88:	b25b      	sxtb	r3, r3
    2d8a:	6116      	str	r6, [r2, #16]
    2d8c:	6157      	str	r7, [r2, #20]
    2d8e:	4699      	mov	r9, r3
    2d90:	2b00      	cmp	r3, #0
    2d92:	d148      	bne.n	2e26 <pow+0x2d6>
    2d94:	22e0      	movs	r2, #224	; 0xe0
    2d96:	4641      	mov	r1, r8
    2d98:	4b47      	ldr	r3, [pc, #284]	; (2eb8 <pow+0x368>)
    2d9a:	0612      	lsls	r2, r2, #24
    2d9c:	618a      	str	r2, [r1, #24]
    2d9e:	61cb      	str	r3, [r1, #28]
    2da0:	0020      	movs	r0, r4
    2da2:	2200      	movs	r2, #0
    2da4:	2300      	movs	r3, #0
    2da6:	0029      	movs	r1, r5
    2da8:	f001 f802 	bl	3db0 <__aeabi_dcmplt>
    2dac:	2800      	cmp	r0, #0
    2dae:	d100      	bne.n	2db2 <pow+0x262>
    2db0:	e773      	b.n	2c9a <pow+0x14a>
    2db2:	2200      	movs	r2, #0
    2db4:	4b41      	ldr	r3, [pc, #260]	; (2ebc <pow+0x36c>)
    2db6:	0030      	movs	r0, r6
    2db8:	0039      	movs	r1, r7
    2dba:	f002 fad7 	bl	536c <__aeabi_dmul>
    2dbe:	0004      	movs	r4, r0
    2dc0:	000d      	movs	r5, r1
    2dc2:	f000 fec3 	bl	3b4c <rint>
    2dc6:	0002      	movs	r2, r0
    2dc8:	000b      	movs	r3, r1
    2dca:	0020      	movs	r0, r4
    2dcc:	0029      	movs	r1, r5
    2dce:	f000 ffe9 	bl	3da4 <__aeabi_dcmpeq>
    2dd2:	2800      	cmp	r0, #0
    2dd4:	d105      	bne.n	2de2 <pow+0x292>
    2dd6:	22e0      	movs	r2, #224	; 0xe0
    2dd8:	4b39      	ldr	r3, [pc, #228]	; (2ec0 <pow+0x370>)
    2dda:	0612      	lsls	r2, r2, #24
    2ddc:	4641      	mov	r1, r8
    2dde:	618a      	str	r2, [r1, #24]
    2de0:	61cb      	str	r3, [r1, #28]
    2de2:	465b      	mov	r3, fp
    2de4:	781b      	ldrb	r3, [r3, #0]
    2de6:	b25b      	sxtb	r3, r3
    2de8:	4699      	mov	r9, r3
    2dea:	464b      	mov	r3, r9
    2dec:	2b02      	cmp	r3, #2
    2dee:	d000      	beq.n	2df2 <pow+0x2a2>
    2df0:	e753      	b.n	2c9a <pow+0x14a>
    2df2:	e757      	b.n	2ca4 <pow+0x154>
    2df4:	ab06      	add	r3, sp, #24
    2df6:	4698      	mov	r8, r3
    2df8:	2301      	movs	r3, #1
    2dfa:	4642      	mov	r2, r8
    2dfc:	9306      	str	r3, [sp, #24]
    2dfe:	4b2b      	ldr	r3, [pc, #172]	; (2eac <pow+0x35c>)
    2e00:	6053      	str	r3, [r2, #4]
    2e02:	4643      	mov	r3, r8
    2e04:	609c      	str	r4, [r3, #8]
    2e06:	60dd      	str	r5, [r3, #12]
    2e08:	2400      	movs	r4, #0
    2e0a:	9a00      	ldr	r2, [sp, #0]
    2e0c:	4d28      	ldr	r5, [pc, #160]	; (2eb0 <pow+0x360>)
    2e0e:	621a      	str	r2, [r3, #32]
    2e10:	611e      	str	r6, [r3, #16]
    2e12:	615f      	str	r7, [r3, #20]
    2e14:	619c      	str	r4, [r3, #24]
    2e16:	61dd      	str	r5, [r3, #28]
    2e18:	464b      	mov	r3, r9
    2e1a:	9400      	str	r4, [sp, #0]
    2e1c:	9501      	str	r5, [sp, #4]
    2e1e:	2b02      	cmp	r3, #2
    2e20:	d000      	beq.n	2e24 <pow+0x2d4>
    2e22:	e77b      	b.n	2d1c <pow+0x1cc>
    2e24:	e6e9      	b.n	2bfa <pow+0xaa>
    2e26:	2200      	movs	r2, #0
    2e28:	4641      	mov	r1, r8
    2e2a:	4b26      	ldr	r3, [pc, #152]	; (2ec4 <pow+0x374>)
    2e2c:	0020      	movs	r0, r4
    2e2e:	618a      	str	r2, [r1, #24]
    2e30:	61cb      	str	r3, [r1, #28]
    2e32:	2200      	movs	r2, #0
    2e34:	2300      	movs	r3, #0
    2e36:	0029      	movs	r1, r5
    2e38:	f000 ffba 	bl	3db0 <__aeabi_dcmplt>
    2e3c:	2800      	cmp	r0, #0
    2e3e:	d0d4      	beq.n	2dea <pow+0x29a>
    2e40:	2200      	movs	r2, #0
    2e42:	4b1e      	ldr	r3, [pc, #120]	; (2ebc <pow+0x36c>)
    2e44:	0030      	movs	r0, r6
    2e46:	0039      	movs	r1, r7
    2e48:	f002 fa90 	bl	536c <__aeabi_dmul>
    2e4c:	0004      	movs	r4, r0
    2e4e:	000d      	movs	r5, r1
    2e50:	f000 fe7c 	bl	3b4c <rint>
    2e54:	0002      	movs	r2, r0
    2e56:	000b      	movs	r3, r1
    2e58:	0020      	movs	r0, r4
    2e5a:	0029      	movs	r1, r5
    2e5c:	f000 ffa2 	bl	3da4 <__aeabi_dcmpeq>
    2e60:	2800      	cmp	r0, #0
    2e62:	d1be      	bne.n	2de2 <pow+0x292>
    2e64:	2200      	movs	r2, #0
    2e66:	4b13      	ldr	r3, [pc, #76]	; (2eb4 <pow+0x364>)
    2e68:	e7b8      	b.n	2ddc <pow+0x28c>
    2e6a:	2301      	movs	r3, #1
    2e6c:	4642      	mov	r2, r8
    2e6e:	9306      	str	r3, [sp, #24]
    2e70:	4b0e      	ldr	r3, [pc, #56]	; (2eac <pow+0x35c>)
    2e72:	6053      	str	r3, [r2, #4]
    2e74:	4643      	mov	r3, r8
    2e76:	464a      	mov	r2, r9
    2e78:	609c      	str	r4, [r3, #8]
    2e7a:	60dd      	str	r5, [r3, #12]
    2e7c:	621a      	str	r2, [r3, #32]
    2e7e:	611e      	str	r6, [r3, #16]
    2e80:	615f      	str	r7, [r3, #20]
    2e82:	2400      	movs	r4, #0
    2e84:	465b      	mov	r3, fp
    2e86:	571c      	ldrsb	r4, [r3, r4]
    2e88:	2c00      	cmp	r4, #0
    2e8a:	d100      	bne.n	2e8e <pow+0x33e>
    2e8c:	e741      	b.n	2d12 <pow+0x1c2>
    2e8e:	2300      	movs	r3, #0
    2e90:	2200      	movs	r2, #0
    2e92:	0019      	movs	r1, r3
    2e94:	0010      	movs	r0, r2
    2e96:	f001 fe45 	bl	4b24 <__aeabi_ddiv>
    2e9a:	4643      	mov	r3, r8
    2e9c:	6198      	str	r0, [r3, #24]
    2e9e:	61d9      	str	r1, [r3, #28]
    2ea0:	2c02      	cmp	r4, #2
    2ea2:	d100      	bne.n	2ea6 <pow+0x356>
    2ea4:	e730      	b.n	2d08 <pow+0x1b8>
    2ea6:	e739      	b.n	2d1c <pow+0x1cc>
    2ea8:	20000070 	.word	0x20000070
    2eac:	00006734 	.word	0x00006734
    2eb0:	3ff00000 	.word	0x3ff00000
    2eb4:	fff00000 	.word	0xfff00000
    2eb8:	47efffff 	.word	0x47efffff
    2ebc:	3fe00000 	.word	0x3fe00000
    2ec0:	c7efffff 	.word	0xc7efffff
    2ec4:	7ff00000 	.word	0x7ff00000

00002ec8 <__ieee754_pow>:
    2ec8:	b5f0      	push	{r4, r5, r6, r7, lr}
    2eca:	4656      	mov	r6, sl
    2ecc:	464d      	mov	r5, r9
    2ece:	4644      	mov	r4, r8
    2ed0:	465f      	mov	r7, fp
    2ed2:	b4f0      	push	{r4, r5, r6, r7}
    2ed4:	001c      	movs	r4, r3
    2ed6:	0013      	movs	r3, r2
    2ed8:	0067      	lsls	r7, r4, #1
    2eda:	b091      	sub	sp, #68	; 0x44
    2edc:	087f      	lsrs	r7, r7, #1
    2ede:	9300      	str	r3, [sp, #0]
    2ee0:	9401      	str	r4, [sp, #4]
    2ee2:	0006      	movs	r6, r0
    2ee4:	000d      	movs	r5, r1
    2ee6:	4680      	mov	r8, r0
    2ee8:	4689      	mov	r9, r1
    2eea:	46a2      	mov	sl, r4
    2eec:	433b      	orrs	r3, r7
    2eee:	d032      	beq.n	2f56 <__ieee754_pow+0x8e>
    2ef0:	4b6e      	ldr	r3, [pc, #440]	; (30ac <__ieee754_pow+0x1e4>)
    2ef2:	006c      	lsls	r4, r5, #1
    2ef4:	0864      	lsrs	r4, r4, #1
    2ef6:	429c      	cmp	r4, r3
    2ef8:	dc29      	bgt.n	2f4e <__ieee754_pow+0x86>
    2efa:	d026      	beq.n	2f4a <__ieee754_pow+0x82>
    2efc:	429f      	cmp	r7, r3
    2efe:	dc26      	bgt.n	2f4e <__ieee754_pow+0x86>
    2f00:	4b6a      	ldr	r3, [pc, #424]	; (30ac <__ieee754_pow+0x1e4>)
    2f02:	429f      	cmp	r7, r3
    2f04:	d100      	bne.n	2f08 <__ieee754_pow+0x40>
    2f06:	e089      	b.n	301c <__ieee754_pow+0x154>
    2f08:	2300      	movs	r3, #0
    2f0a:	469b      	mov	fp, r3
    2f0c:	464b      	mov	r3, r9
    2f0e:	2b00      	cmp	r3, #0
    2f10:	da00      	bge.n	2f14 <__ieee754_pow+0x4c>
    2f12:	e087      	b.n	3024 <__ieee754_pow+0x15c>
    2f14:	2a00      	cmp	r2, #0
    2f16:	d12f      	bne.n	2f78 <__ieee754_pow+0xb0>
    2f18:	4b64      	ldr	r3, [pc, #400]	; (30ac <__ieee754_pow+0x1e4>)
    2f1a:	429f      	cmp	r7, r3
    2f1c:	d100      	bne.n	2f20 <__ieee754_pow+0x58>
    2f1e:	e09f      	b.n	3060 <__ieee754_pow+0x198>
    2f20:	4b63      	ldr	r3, [pc, #396]	; (30b0 <__ieee754_pow+0x1e8>)
    2f22:	429f      	cmp	r7, r3
    2f24:	d05d      	beq.n	2fe2 <__ieee754_pow+0x11a>
    2f26:	2380      	movs	r3, #128	; 0x80
    2f28:	05db      	lsls	r3, r3, #23
    2f2a:	459a      	cmp	sl, r3
    2f2c:	d101      	bne.n	2f32 <__ieee754_pow+0x6a>
    2f2e:	f000 fbc1 	bl	36b4 <__ieee754_pow+0x7ec>
    2f32:	4b60      	ldr	r3, [pc, #384]	; (30b4 <__ieee754_pow+0x1ec>)
    2f34:	459a      	cmp	sl, r3
    2f36:	d11f      	bne.n	2f78 <__ieee754_pow+0xb0>
    2f38:	464b      	mov	r3, r9
    2f3a:	2b00      	cmp	r3, #0
    2f3c:	db1c      	blt.n	2f78 <__ieee754_pow+0xb0>
    2f3e:	0030      	movs	r0, r6
    2f40:	0029      	movs	r1, r5
    2f42:	f000 fcf7 	bl	3934 <__ieee754_sqrt>
    2f46:	0006      	movs	r6, r0
    2f48:	e007      	b.n	2f5a <__ieee754_pow+0x92>
    2f4a:	2800      	cmp	r0, #0
    2f4c:	d00d      	beq.n	2f6a <__ieee754_pow+0xa2>
    2f4e:	4b5a      	ldr	r3, [pc, #360]	; (30b8 <__ieee754_pow+0x1f0>)
    2f50:	18e0      	adds	r0, r4, r3
    2f52:	4330      	orrs	r0, r6
    2f54:	d10b      	bne.n	2f6e <__ieee754_pow+0xa6>
    2f56:	2600      	movs	r6, #0
    2f58:	4955      	ldr	r1, [pc, #340]	; (30b0 <__ieee754_pow+0x1e8>)
    2f5a:	0030      	movs	r0, r6
    2f5c:	b011      	add	sp, #68	; 0x44
    2f5e:	bc3c      	pop	{r2, r3, r4, r5}
    2f60:	4690      	mov	r8, r2
    2f62:	4699      	mov	r9, r3
    2f64:	46a2      	mov	sl, r4
    2f66:	46ab      	mov	fp, r5
    2f68:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2f6a:	42a7      	cmp	r7, r4
    2f6c:	ddc8      	ble.n	2f00 <__ieee754_pow+0x38>
    2f6e:	4853      	ldr	r0, [pc, #332]	; (30bc <__ieee754_pow+0x1f4>)
    2f70:	f000 fde6 	bl	3b40 <nan>
    2f74:	0006      	movs	r6, r0
    2f76:	e7f0      	b.n	2f5a <__ieee754_pow+0x92>
    2f78:	0030      	movs	r0, r6
    2f7a:	0029      	movs	r1, r5
    2f7c:	f000 fdd0 	bl	3b20 <fabs>
    2f80:	4643      	mov	r3, r8
    2f82:	2b00      	cmp	r3, #0
    2f84:	d01d      	beq.n	2fc2 <__ieee754_pow+0xfa>
    2f86:	0feb      	lsrs	r3, r5, #31
    2f88:	3b01      	subs	r3, #1
    2f8a:	4698      	mov	r8, r3
    2f8c:	465b      	mov	r3, fp
    2f8e:	4642      	mov	r2, r8
    2f90:	4313      	orrs	r3, r2
    2f92:	d079      	beq.n	3088 <__ieee754_pow+0x1c0>
    2f94:	4b4a      	ldr	r3, [pc, #296]	; (30c0 <__ieee754_pow+0x1f8>)
    2f96:	429f      	cmp	r7, r3
    2f98:	dc00      	bgt.n	2f9c <__ieee754_pow+0xd4>
    2f9a:	e09f      	b.n	30dc <__ieee754_pow+0x214>
    2f9c:	4b49      	ldr	r3, [pc, #292]	; (30c4 <__ieee754_pow+0x1fc>)
    2f9e:	429f      	cmp	r7, r3
    2fa0:	dc01      	bgt.n	2fa6 <__ieee754_pow+0xde>
    2fa2:	f000 fbce 	bl	3742 <__ieee754_pow+0x87a>
    2fa6:	4b48      	ldr	r3, [pc, #288]	; (30c8 <__ieee754_pow+0x200>)
    2fa8:	429c      	cmp	r4, r3
    2faa:	dd79      	ble.n	30a0 <__ieee754_pow+0x1d8>
    2fac:	4653      	mov	r3, sl
    2fae:	2b00      	cmp	r3, #0
    2fb0:	dd79      	ble.n	30a6 <__ieee754_pow+0x1de>
    2fb2:	4a46      	ldr	r2, [pc, #280]	; (30cc <__ieee754_pow+0x204>)
    2fb4:	4b46      	ldr	r3, [pc, #280]	; (30d0 <__ieee754_pow+0x208>)
    2fb6:	0010      	movs	r0, r2
    2fb8:	0019      	movs	r1, r3
    2fba:	f002 f9d7 	bl	536c <__aeabi_dmul>
    2fbe:	0006      	movs	r6, r0
    2fc0:	e7cb      	b.n	2f5a <__ieee754_pow+0x92>
    2fc2:	2c00      	cmp	r4, #0
    2fc4:	d004      	beq.n	2fd0 <__ieee754_pow+0x108>
    2fc6:	4a3a      	ldr	r2, [pc, #232]	; (30b0 <__ieee754_pow+0x1e8>)
    2fc8:	00ab      	lsls	r3, r5, #2
    2fca:	089b      	lsrs	r3, r3, #2
    2fcc:	4293      	cmp	r3, r2
    2fce:	d1da      	bne.n	2f86 <__ieee754_pow+0xbe>
    2fd0:	4653      	mov	r3, sl
    2fd2:	2b00      	cmp	r3, #0
    2fd4:	da00      	bge.n	2fd8 <__ieee754_pow+0x110>
    2fd6:	e3ad      	b.n	3734 <__ieee754_pow+0x86c>
    2fd8:	464b      	mov	r3, r9
    2fda:	2b00      	cmp	r3, #0
    2fdc:	db0d      	blt.n	2ffa <__ieee754_pow+0x132>
    2fde:	0006      	movs	r6, r0
    2fe0:	e7bb      	b.n	2f5a <__ieee754_pow+0x92>
    2fe2:	4653      	mov	r3, sl
    2fe4:	0029      	movs	r1, r5
    2fe6:	2b00      	cmp	r3, #0
    2fe8:	dab7      	bge.n	2f5a <__ieee754_pow+0x92>
    2fea:	0032      	movs	r2, r6
    2fec:	002b      	movs	r3, r5
    2fee:	2000      	movs	r0, #0
    2ff0:	492f      	ldr	r1, [pc, #188]	; (30b0 <__ieee754_pow+0x1e8>)
    2ff2:	f001 fd97 	bl	4b24 <__aeabi_ddiv>
    2ff6:	0006      	movs	r6, r0
    2ff8:	e7af      	b.n	2f5a <__ieee754_pow+0x92>
    2ffa:	4b2f      	ldr	r3, [pc, #188]	; (30b8 <__ieee754_pow+0x1f0>)
    2ffc:	469c      	mov	ip, r3
    2ffe:	465b      	mov	r3, fp
    3000:	4464      	add	r4, ip
    3002:	431c      	orrs	r4, r3
    3004:	d101      	bne.n	300a <__ieee754_pow+0x142>
    3006:	f000 fc2b 	bl	3860 <__ieee754_pow+0x998>
    300a:	465b      	mov	r3, fp
    300c:	0006      	movs	r6, r0
    300e:	2b01      	cmp	r3, #1
    3010:	d1a3      	bne.n	2f5a <__ieee754_pow+0x92>
    3012:	2380      	movs	r3, #128	; 0x80
    3014:	061b      	lsls	r3, r3, #24
    3016:	469c      	mov	ip, r3
    3018:	4461      	add	r1, ip
    301a:	e79e      	b.n	2f5a <__ieee754_pow+0x92>
    301c:	2a00      	cmp	r2, #0
    301e:	d100      	bne.n	3022 <__ieee754_pow+0x15a>
    3020:	e772      	b.n	2f08 <__ieee754_pow+0x40>
    3022:	e794      	b.n	2f4e <__ieee754_pow+0x86>
    3024:	4b2b      	ldr	r3, [pc, #172]	; (30d4 <__ieee754_pow+0x20c>)
    3026:	429f      	cmp	r7, r3
    3028:	dc2b      	bgt.n	3082 <__ieee754_pow+0x1ba>
    302a:	4b27      	ldr	r3, [pc, #156]	; (30c8 <__ieee754_pow+0x200>)
    302c:	429f      	cmp	r7, r3
    302e:	dc00      	bgt.n	3032 <__ieee754_pow+0x16a>
    3030:	e770      	b.n	2f14 <__ieee754_pow+0x4c>
    3032:	4929      	ldr	r1, [pc, #164]	; (30d8 <__ieee754_pow+0x210>)
    3034:	153b      	asrs	r3, r7, #20
    3036:	468c      	mov	ip, r1
    3038:	4463      	add	r3, ip
    303a:	2b14      	cmp	r3, #20
    303c:	dc01      	bgt.n	3042 <__ieee754_pow+0x17a>
    303e:	f000 fbf2 	bl	3826 <__ieee754_pow+0x95e>
    3042:	2134      	movs	r1, #52	; 0x34
    3044:	1acb      	subs	r3, r1, r3
    3046:	9900      	ldr	r1, [sp, #0]
    3048:	40d9      	lsrs	r1, r3
    304a:	0008      	movs	r0, r1
    304c:	4098      	lsls	r0, r3
    304e:	4282      	cmp	r2, r0
    3050:	d000      	beq.n	3054 <__ieee754_pow+0x18c>
    3052:	e75f      	b.n	2f14 <__ieee754_pow+0x4c>
    3054:	2301      	movs	r3, #1
    3056:	4019      	ands	r1, r3
    3058:	3301      	adds	r3, #1
    305a:	1a5b      	subs	r3, r3, r1
    305c:	469b      	mov	fp, r3
    305e:	e759      	b.n	2f14 <__ieee754_pow+0x4c>
    3060:	4b15      	ldr	r3, [pc, #84]	; (30b8 <__ieee754_pow+0x1f0>)
    3062:	18e0      	adds	r0, r4, r3
    3064:	4306      	orrs	r6, r0
    3066:	d100      	bne.n	306a <__ieee754_pow+0x1a2>
    3068:	e775      	b.n	2f56 <__ieee754_pow+0x8e>
    306a:	4b17      	ldr	r3, [pc, #92]	; (30c8 <__ieee754_pow+0x200>)
    306c:	429c      	cmp	r4, r3
    306e:	dc00      	bgt.n	3072 <__ieee754_pow+0x1aa>
    3070:	e351      	b.n	3716 <__ieee754_pow+0x84e>
    3072:	4653      	mov	r3, sl
    3074:	2b00      	cmp	r3, #0
    3076:	db16      	blt.n	30a6 <__ieee754_pow+0x1de>
    3078:	9b00      	ldr	r3, [sp, #0]
    307a:	9c01      	ldr	r4, [sp, #4]
    307c:	001e      	movs	r6, r3
    307e:	0021      	movs	r1, r4
    3080:	e76b      	b.n	2f5a <__ieee754_pow+0x92>
    3082:	2302      	movs	r3, #2
    3084:	469b      	mov	fp, r3
    3086:	e745      	b.n	2f14 <__ieee754_pow+0x4c>
    3088:	0032      	movs	r2, r6
    308a:	002b      	movs	r3, r5
    308c:	0030      	movs	r0, r6
    308e:	0029      	movs	r1, r5
    3090:	f002 fbe6 	bl	5860 <__aeabi_dsub>
    3094:	0002      	movs	r2, r0
    3096:	000b      	movs	r3, r1
    3098:	f001 fd44 	bl	4b24 <__aeabi_ddiv>
    309c:	0006      	movs	r6, r0
    309e:	e75c      	b.n	2f5a <__ieee754_pow+0x92>
    30a0:	4653      	mov	r3, sl
    30a2:	2b00      	cmp	r3, #0
    30a4:	db85      	blt.n	2fb2 <__ieee754_pow+0xea>
    30a6:	2600      	movs	r6, #0
    30a8:	2100      	movs	r1, #0
    30aa:	e756      	b.n	2f5a <__ieee754_pow+0x92>
    30ac:	7ff00000 	.word	0x7ff00000
    30b0:	3ff00000 	.word	0x3ff00000
    30b4:	3fe00000 	.word	0x3fe00000
    30b8:	c0100000 	.word	0xc0100000
    30bc:	00006738 	.word	0x00006738
    30c0:	41e00000 	.word	0x41e00000
    30c4:	43f00000 	.word	0x43f00000
    30c8:	3fefffff 	.word	0x3fefffff
    30cc:	8800759c 	.word	0x8800759c
    30d0:	7e37e43c 	.word	0x7e37e43c
    30d4:	433fffff 	.word	0x433fffff
    30d8:	fffffc01 	.word	0xfffffc01
    30dc:	4be8      	ldr	r3, [pc, #928]	; (3480 <__ieee754_pow+0x5b8>)
    30de:	2200      	movs	r2, #0
    30e0:	429c      	cmp	r4, r3
    30e2:	dc06      	bgt.n	30f2 <__ieee754_pow+0x22a>
    30e4:	2200      	movs	r2, #0
    30e6:	4be7      	ldr	r3, [pc, #924]	; (3484 <__ieee754_pow+0x5bc>)
    30e8:	f002 f940 	bl	536c <__aeabi_dmul>
    30ec:	2235      	movs	r2, #53	; 0x35
    30ee:	000c      	movs	r4, r1
    30f0:	4252      	negs	r2, r2
    30f2:	4de5      	ldr	r5, [pc, #916]	; (3488 <__ieee754_pow+0x5c0>)
    30f4:	1523      	asrs	r3, r4, #20
    30f6:	46ac      	mov	ip, r5
    30f8:	4463      	add	r3, ip
    30fa:	4699      	mov	r9, r3
    30fc:	0324      	lsls	r4, r4, #12
    30fe:	4de3      	ldr	r5, [pc, #908]	; (348c <__ieee754_pow+0x5c4>)
    3100:	4be3      	ldr	r3, [pc, #908]	; (3490 <__ieee754_pow+0x5c8>)
    3102:	0b24      	lsrs	r4, r4, #12
    3104:	4491      	add	r9, r2
    3106:	4325      	orrs	r5, r4
    3108:	429c      	cmp	r4, r3
    310a:	dd09      	ble.n	3120 <__ieee754_pow+0x258>
    310c:	4be1      	ldr	r3, [pc, #900]	; (3494 <__ieee754_pow+0x5cc>)
    310e:	429c      	cmp	r4, r3
    3110:	dc00      	bgt.n	3114 <__ieee754_pow+0x24c>
    3112:	e3a9      	b.n	3868 <__ieee754_pow+0x9a0>
    3114:	2301      	movs	r3, #1
    3116:	469c      	mov	ip, r3
    3118:	4bdf      	ldr	r3, [pc, #892]	; (3498 <__ieee754_pow+0x5d0>)
    311a:	44e1      	add	r9, ip
    311c:	469c      	mov	ip, r3
    311e:	4465      	add	r5, ip
    3120:	2300      	movs	r3, #0
    3122:	2400      	movs	r4, #0
    3124:	2200      	movs	r2, #0
    3126:	9308      	str	r3, [sp, #32]
    3128:	9409      	str	r4, [sp, #36]	; 0x24
    312a:	930c      	str	r3, [sp, #48]	; 0x30
    312c:	940d      	str	r4, [sp, #52]	; 0x34
    312e:	2400      	movs	r4, #0
    3130:	4bd6      	ldr	r3, [pc, #856]	; (348c <__ieee754_pow+0x5c4>)
    3132:	9206      	str	r2, [sp, #24]
    3134:	9307      	str	r3, [sp, #28]
    3136:	9a06      	ldr	r2, [sp, #24]
    3138:	9b07      	ldr	r3, [sp, #28]
    313a:	0029      	movs	r1, r5
    313c:	900a      	str	r0, [sp, #40]	; 0x28
    313e:	910b      	str	r1, [sp, #44]	; 0x2c
    3140:	f002 fb8e 	bl	5860 <__aeabi_dsub>
    3144:	9a06      	ldr	r2, [sp, #24]
    3146:	9b07      	ldr	r3, [sp, #28]
    3148:	0006      	movs	r6, r0
    314a:	000f      	movs	r7, r1
    314c:	980a      	ldr	r0, [sp, #40]	; 0x28
    314e:	990b      	ldr	r1, [sp, #44]	; 0x2c
    3150:	f001 f9bc 	bl	44cc <__aeabi_dadd>
    3154:	0002      	movs	r2, r0
    3156:	000b      	movs	r3, r1
    3158:	2000      	movs	r0, #0
    315a:	49cc      	ldr	r1, [pc, #816]	; (348c <__ieee754_pow+0x5c4>)
    315c:	f001 fce2 	bl	4b24 <__aeabi_ddiv>
    3160:	000a      	movs	r2, r1
    3162:	0001      	movs	r1, r0
    3164:	0013      	movs	r3, r2
    3166:	910e      	str	r1, [sp, #56]	; 0x38
    3168:	920f      	str	r2, [sp, #60]	; 0x3c
    316a:	0002      	movs	r2, r0
    316c:	0039      	movs	r1, r7
    316e:	0030      	movs	r0, r6
    3170:	f002 f8fc 	bl	536c <__aeabi_dmul>
    3174:	000a      	movs	r2, r1
    3176:	0001      	movs	r1, r0
    3178:	2080      	movs	r0, #128	; 0x80
    317a:	9104      	str	r1, [sp, #16]
    317c:	9205      	str	r2, [sp, #20]
    317e:	0013      	movs	r3, r2
    3180:	2200      	movs	r2, #0
    3182:	2180      	movs	r1, #128	; 0x80
    3184:	0300      	lsls	r0, r0, #12
    3186:	4684      	mov	ip, r0
    3188:	9202      	str	r2, [sp, #8]
    318a:	9303      	str	r3, [sp, #12]
    318c:	2200      	movs	r2, #0
    318e:	0589      	lsls	r1, r1, #22
    3190:	106d      	asrs	r5, r5, #1
    3192:	430d      	orrs	r5, r1
    3194:	4465      	add	r5, ip
    3196:	192b      	adds	r3, r5, r4
    3198:	9802      	ldr	r0, [sp, #8]
    319a:	9903      	ldr	r1, [sp, #12]
    319c:	0014      	movs	r4, r2
    319e:	001d      	movs	r5, r3
    31a0:	f002 f8e4 	bl	536c <__aeabi_dmul>
    31a4:	0002      	movs	r2, r0
    31a6:	000b      	movs	r3, r1
    31a8:	0030      	movs	r0, r6
    31aa:	0039      	movs	r1, r7
    31ac:	f002 fb58 	bl	5860 <__aeabi_dsub>
    31b0:	9a06      	ldr	r2, [sp, #24]
    31b2:	9b07      	ldr	r3, [sp, #28]
    31b4:	0006      	movs	r6, r0
    31b6:	000f      	movs	r7, r1
    31b8:	0020      	movs	r0, r4
    31ba:	0029      	movs	r1, r5
    31bc:	f002 fb50 	bl	5860 <__aeabi_dsub>
    31c0:	0002      	movs	r2, r0
    31c2:	000b      	movs	r3, r1
    31c4:	980a      	ldr	r0, [sp, #40]	; 0x28
    31c6:	990b      	ldr	r1, [sp, #44]	; 0x2c
    31c8:	f002 fb4a 	bl	5860 <__aeabi_dsub>
    31cc:	9a02      	ldr	r2, [sp, #8]
    31ce:	9b03      	ldr	r3, [sp, #12]
    31d0:	f002 f8cc 	bl	536c <__aeabi_dmul>
    31d4:	0002      	movs	r2, r0
    31d6:	000b      	movs	r3, r1
    31d8:	0030      	movs	r0, r6
    31da:	0039      	movs	r1, r7
    31dc:	f002 fb40 	bl	5860 <__aeabi_dsub>
    31e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    31e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    31e4:	f002 f8c2 	bl	536c <__aeabi_dmul>
    31e8:	9d04      	ldr	r5, [sp, #16]
    31ea:	9e05      	ldr	r6, [sp, #20]
    31ec:	9006      	str	r0, [sp, #24]
    31ee:	9107      	str	r1, [sp, #28]
    31f0:	002a      	movs	r2, r5
    31f2:	0033      	movs	r3, r6
    31f4:	0028      	movs	r0, r5
    31f6:	0031      	movs	r1, r6
    31f8:	f002 f8b8 	bl	536c <__aeabi_dmul>
    31fc:	0006      	movs	r6, r0
    31fe:	000f      	movs	r7, r1
    3200:	4aa6      	ldr	r2, [pc, #664]	; (349c <__ieee754_pow+0x5d4>)
    3202:	4ba7      	ldr	r3, [pc, #668]	; (34a0 <__ieee754_pow+0x5d8>)
    3204:	f002 f8b2 	bl	536c <__aeabi_dmul>
    3208:	4aa6      	ldr	r2, [pc, #664]	; (34a4 <__ieee754_pow+0x5dc>)
    320a:	4ba7      	ldr	r3, [pc, #668]	; (34a8 <__ieee754_pow+0x5e0>)
    320c:	f001 f95e 	bl	44cc <__aeabi_dadd>
    3210:	0032      	movs	r2, r6
    3212:	003b      	movs	r3, r7
    3214:	f002 f8aa 	bl	536c <__aeabi_dmul>
    3218:	4aa4      	ldr	r2, [pc, #656]	; (34ac <__ieee754_pow+0x5e4>)
    321a:	4ba5      	ldr	r3, [pc, #660]	; (34b0 <__ieee754_pow+0x5e8>)
    321c:	f001 f956 	bl	44cc <__aeabi_dadd>
    3220:	0032      	movs	r2, r6
    3222:	003b      	movs	r3, r7
    3224:	f002 f8a2 	bl	536c <__aeabi_dmul>
    3228:	4aa2      	ldr	r2, [pc, #648]	; (34b4 <__ieee754_pow+0x5ec>)
    322a:	4ba3      	ldr	r3, [pc, #652]	; (34b8 <__ieee754_pow+0x5f0>)
    322c:	f001 f94e 	bl	44cc <__aeabi_dadd>
    3230:	0032      	movs	r2, r6
    3232:	003b      	movs	r3, r7
    3234:	f002 f89a 	bl	536c <__aeabi_dmul>
    3238:	4aa0      	ldr	r2, [pc, #640]	; (34bc <__ieee754_pow+0x5f4>)
    323a:	4ba1      	ldr	r3, [pc, #644]	; (34c0 <__ieee754_pow+0x5f8>)
    323c:	f001 f946 	bl	44cc <__aeabi_dadd>
    3240:	0032      	movs	r2, r6
    3242:	003b      	movs	r3, r7
    3244:	f002 f892 	bl	536c <__aeabi_dmul>
    3248:	4a9e      	ldr	r2, [pc, #632]	; (34c4 <__ieee754_pow+0x5fc>)
    324a:	4b9f      	ldr	r3, [pc, #636]	; (34c8 <__ieee754_pow+0x600>)
    324c:	f001 f93e 	bl	44cc <__aeabi_dadd>
    3250:	0032      	movs	r2, r6
    3252:	0004      	movs	r4, r0
    3254:	000d      	movs	r5, r1
    3256:	003b      	movs	r3, r7
    3258:	0030      	movs	r0, r6
    325a:	0039      	movs	r1, r7
    325c:	f002 f886 	bl	536c <__aeabi_dmul>
    3260:	0002      	movs	r2, r0
    3262:	000b      	movs	r3, r1
    3264:	0020      	movs	r0, r4
    3266:	0029      	movs	r1, r5
    3268:	f002 f880 	bl	536c <__aeabi_dmul>
    326c:	9e02      	ldr	r6, [sp, #8]
    326e:	9f03      	ldr	r7, [sp, #12]
    3270:	0004      	movs	r4, r0
    3272:	000d      	movs	r5, r1
    3274:	9804      	ldr	r0, [sp, #16]
    3276:	9905      	ldr	r1, [sp, #20]
    3278:	0032      	movs	r2, r6
    327a:	003b      	movs	r3, r7
    327c:	f001 f926 	bl	44cc <__aeabi_dadd>
    3280:	9a06      	ldr	r2, [sp, #24]
    3282:	9b07      	ldr	r3, [sp, #28]
    3284:	f002 f872 	bl	536c <__aeabi_dmul>
    3288:	0022      	movs	r2, r4
    328a:	002b      	movs	r3, r5
    328c:	f001 f91e 	bl	44cc <__aeabi_dadd>
    3290:	0032      	movs	r2, r6
    3292:	900a      	str	r0, [sp, #40]	; 0x28
    3294:	910b      	str	r1, [sp, #44]	; 0x2c
    3296:	003b      	movs	r3, r7
    3298:	0030      	movs	r0, r6
    329a:	0039      	movs	r1, r7
    329c:	9602      	str	r6, [sp, #8]
    329e:	9703      	str	r7, [sp, #12]
    32a0:	f002 f864 	bl	536c <__aeabi_dmul>
    32a4:	2200      	movs	r2, #0
    32a6:	4b89      	ldr	r3, [pc, #548]	; (34cc <__ieee754_pow+0x604>)
    32a8:	0004      	movs	r4, r0
    32aa:	000d      	movs	r5, r1
    32ac:	f001 f90e 	bl	44cc <__aeabi_dadd>
    32b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    32b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    32b4:	f001 f90a 	bl	44cc <__aeabi_dadd>
    32b8:	2600      	movs	r6, #0
    32ba:	000f      	movs	r7, r1
    32bc:	0032      	movs	r2, r6
    32be:	000b      	movs	r3, r1
    32c0:	9802      	ldr	r0, [sp, #8]
    32c2:	9903      	ldr	r1, [sp, #12]
    32c4:	f002 f852 	bl	536c <__aeabi_dmul>
    32c8:	2200      	movs	r2, #0
    32ca:	9002      	str	r0, [sp, #8]
    32cc:	9103      	str	r1, [sp, #12]
    32ce:	4b7f      	ldr	r3, [pc, #508]	; (34cc <__ieee754_pow+0x604>)
    32d0:	0030      	movs	r0, r6
    32d2:	0039      	movs	r1, r7
    32d4:	f002 fac4 	bl	5860 <__aeabi_dsub>
    32d8:	0022      	movs	r2, r4
    32da:	002b      	movs	r3, r5
    32dc:	f002 fac0 	bl	5860 <__aeabi_dsub>
    32e0:	0002      	movs	r2, r0
    32e2:	000b      	movs	r3, r1
    32e4:	980a      	ldr	r0, [sp, #40]	; 0x28
    32e6:	990b      	ldr	r1, [sp, #44]	; 0x2c
    32e8:	f002 faba 	bl	5860 <__aeabi_dsub>
    32ec:	9a04      	ldr	r2, [sp, #16]
    32ee:	9b05      	ldr	r3, [sp, #20]
    32f0:	f002 f83c 	bl	536c <__aeabi_dmul>
    32f4:	0032      	movs	r2, r6
    32f6:	0004      	movs	r4, r0
    32f8:	000d      	movs	r5, r1
    32fa:	9806      	ldr	r0, [sp, #24]
    32fc:	9907      	ldr	r1, [sp, #28]
    32fe:	003b      	movs	r3, r7
    3300:	f002 f834 	bl	536c <__aeabi_dmul>
    3304:	0002      	movs	r2, r0
    3306:	000b      	movs	r3, r1
    3308:	0020      	movs	r0, r4
    330a:	0029      	movs	r1, r5
    330c:	f001 f8de 	bl	44cc <__aeabi_dadd>
    3310:	0004      	movs	r4, r0
    3312:	000d      	movs	r5, r1
    3314:	0002      	movs	r2, r0
    3316:	000b      	movs	r3, r1
    3318:	9802      	ldr	r0, [sp, #8]
    331a:	9903      	ldr	r1, [sp, #12]
    331c:	f001 f8d6 	bl	44cc <__aeabi_dadd>
    3320:	2600      	movs	r6, #0
    3322:	22e0      	movs	r2, #224	; 0xe0
    3324:	4b6a      	ldr	r3, [pc, #424]	; (34d0 <__ieee754_pow+0x608>)
    3326:	0612      	lsls	r2, r2, #24
    3328:	0030      	movs	r0, r6
    332a:	000f      	movs	r7, r1
    332c:	f002 f81e 	bl	536c <__aeabi_dmul>
    3330:	9a02      	ldr	r2, [sp, #8]
    3332:	9b03      	ldr	r3, [sp, #12]
    3334:	9004      	str	r0, [sp, #16]
    3336:	9105      	str	r1, [sp, #20]
    3338:	0030      	movs	r0, r6
    333a:	0039      	movs	r1, r7
    333c:	f002 fa90 	bl	5860 <__aeabi_dsub>
    3340:	0002      	movs	r2, r0
    3342:	000b      	movs	r3, r1
    3344:	0020      	movs	r0, r4
    3346:	0029      	movs	r1, r5
    3348:	f002 fa8a 	bl	5860 <__aeabi_dsub>
    334c:	4a61      	ldr	r2, [pc, #388]	; (34d4 <__ieee754_pow+0x60c>)
    334e:	4b60      	ldr	r3, [pc, #384]	; (34d0 <__ieee754_pow+0x608>)
    3350:	f002 f80c 	bl	536c <__aeabi_dmul>
    3354:	4a60      	ldr	r2, [pc, #384]	; (34d8 <__ieee754_pow+0x610>)
    3356:	0004      	movs	r4, r0
    3358:	000d      	movs	r5, r1
    335a:	4b60      	ldr	r3, [pc, #384]	; (34dc <__ieee754_pow+0x614>)
    335c:	0030      	movs	r0, r6
    335e:	0039      	movs	r1, r7
    3360:	f002 f804 	bl	536c <__aeabi_dmul>
    3364:	0002      	movs	r2, r0
    3366:	000b      	movs	r3, r1
    3368:	0020      	movs	r0, r4
    336a:	0029      	movs	r1, r5
    336c:	f001 f8ae 	bl	44cc <__aeabi_dadd>
    3370:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    3372:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    3374:	f001 f8aa 	bl	44cc <__aeabi_dadd>
    3378:	0006      	movs	r6, r0
    337a:	4648      	mov	r0, r9
    337c:	000f      	movs	r7, r1
    337e:	f002 fe19 	bl	5fb4 <__aeabi_i2d>
    3382:	0004      	movs	r4, r0
    3384:	000d      	movs	r5, r1
    3386:	9804      	ldr	r0, [sp, #16]
    3388:	9905      	ldr	r1, [sp, #20]
    338a:	0032      	movs	r2, r6
    338c:	003b      	movs	r3, r7
    338e:	f001 f89d 	bl	44cc <__aeabi_dadd>
    3392:	9a08      	ldr	r2, [sp, #32]
    3394:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3396:	f001 f899 	bl	44cc <__aeabi_dadd>
    339a:	0022      	movs	r2, r4
    339c:	002b      	movs	r3, r5
    339e:	f001 f895 	bl	44cc <__aeabi_dadd>
    33a2:	2000      	movs	r0, #0
    33a4:	0022      	movs	r2, r4
    33a6:	002b      	movs	r3, r5
    33a8:	9002      	str	r0, [sp, #8]
    33aa:	9103      	str	r1, [sp, #12]
    33ac:	f002 fa58 	bl	5860 <__aeabi_dsub>
    33b0:	9a08      	ldr	r2, [sp, #32]
    33b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    33b4:	f002 fa54 	bl	5860 <__aeabi_dsub>
    33b8:	9a04      	ldr	r2, [sp, #16]
    33ba:	9b05      	ldr	r3, [sp, #20]
    33bc:	f002 fa50 	bl	5860 <__aeabi_dsub>
    33c0:	0002      	movs	r2, r0
    33c2:	000b      	movs	r3, r1
    33c4:	0030      	movs	r0, r6
    33c6:	0039      	movs	r1, r7
    33c8:	f002 fa4a 	bl	5860 <__aeabi_dsub>
    33cc:	9004      	str	r0, [sp, #16]
    33ce:	9105      	str	r1, [sp, #20]
    33d0:	465b      	mov	r3, fp
    33d2:	4642      	mov	r2, r8
    33d4:	3b01      	subs	r3, #1
    33d6:	4313      	orrs	r3, r2
    33d8:	d100      	bne.n	33dc <__ieee754_pow+0x514>
    33da:	e197      	b.n	370c <__ieee754_pow+0x844>
    33dc:	2300      	movs	r3, #0
    33de:	4c2b      	ldr	r4, [pc, #172]	; (348c <__ieee754_pow+0x5c4>)
    33e0:	9306      	str	r3, [sp, #24]
    33e2:	9407      	str	r4, [sp, #28]
    33e4:	9800      	ldr	r0, [sp, #0]
    33e6:	9901      	ldr	r1, [sp, #4]
    33e8:	2600      	movs	r6, #0
    33ea:	000b      	movs	r3, r1
    33ec:	0032      	movs	r2, r6
    33ee:	000f      	movs	r7, r1
    33f0:	f002 fa36 	bl	5860 <__aeabi_dsub>
    33f4:	9a02      	ldr	r2, [sp, #8]
    33f6:	9b03      	ldr	r3, [sp, #12]
    33f8:	f001 ffb8 	bl	536c <__aeabi_dmul>
    33fc:	9a00      	ldr	r2, [sp, #0]
    33fe:	9b01      	ldr	r3, [sp, #4]
    3400:	0004      	movs	r4, r0
    3402:	000d      	movs	r5, r1
    3404:	9804      	ldr	r0, [sp, #16]
    3406:	9905      	ldr	r1, [sp, #20]
    3408:	f001 ffb0 	bl	536c <__aeabi_dmul>
    340c:	0002      	movs	r2, r0
    340e:	000b      	movs	r3, r1
    3410:	0020      	movs	r0, r4
    3412:	0029      	movs	r1, r5
    3414:	f001 f85a 	bl	44cc <__aeabi_dadd>
    3418:	0004      	movs	r4, r0
    341a:	000d      	movs	r5, r1
    341c:	9802      	ldr	r0, [sp, #8]
    341e:	9903      	ldr	r1, [sp, #12]
    3420:	003b      	movs	r3, r7
    3422:	0032      	movs	r2, r6
    3424:	9404      	str	r4, [sp, #16]
    3426:	9505      	str	r5, [sp, #20]
    3428:	f001 ffa0 	bl	536c <__aeabi_dmul>
    342c:	9000      	str	r0, [sp, #0]
    342e:	9101      	str	r1, [sp, #4]
    3430:	000b      	movs	r3, r1
    3432:	0002      	movs	r2, r0
    3434:	0029      	movs	r1, r5
    3436:	0020      	movs	r0, r4
    3438:	f001 f848 	bl	44cc <__aeabi_dadd>
    343c:	4b28      	ldr	r3, [pc, #160]	; (34e0 <__ieee754_pow+0x618>)
    343e:	4681      	mov	r9, r0
    3440:	1e0f      	subs	r7, r1, #0
    3442:	468a      	mov	sl, r1
    3444:	429f      	cmp	r7, r3
    3446:	dc00      	bgt.n	344a <__ieee754_pow+0x582>
    3448:	e13c      	b.n	36c4 <__ieee754_pow+0x7fc>
    344a:	4b26      	ldr	r3, [pc, #152]	; (34e4 <__ieee754_pow+0x61c>)
    344c:	18cb      	adds	r3, r1, r3
    344e:	4303      	orrs	r3, r0
    3450:	d000      	beq.n	3454 <__ieee754_pow+0x58c>
    3452:	e1db      	b.n	380c <__ieee754_pow+0x944>
    3454:	9804      	ldr	r0, [sp, #16]
    3456:	9905      	ldr	r1, [sp, #20]
    3458:	4a23      	ldr	r2, [pc, #140]	; (34e8 <__ieee754_pow+0x620>)
    345a:	4b24      	ldr	r3, [pc, #144]	; (34ec <__ieee754_pow+0x624>)
    345c:	f001 f836 	bl	44cc <__aeabi_dadd>
    3460:	9a00      	ldr	r2, [sp, #0]
    3462:	9b01      	ldr	r3, [sp, #4]
    3464:	0004      	movs	r4, r0
    3466:	000d      	movs	r5, r1
    3468:	4648      	mov	r0, r9
    346a:	0039      	movs	r1, r7
    346c:	f002 f9f8 	bl	5860 <__aeabi_dsub>
    3470:	0002      	movs	r2, r0
    3472:	000b      	movs	r3, r1
    3474:	0020      	movs	r0, r4
    3476:	0029      	movs	r1, r5
    3478:	f000 fcae 	bl	3dd8 <__aeabi_dcmpgt>
    347c:	003e      	movs	r6, r7
    347e:	e037      	b.n	34f0 <__ieee754_pow+0x628>
    3480:	000fffff 	.word	0x000fffff
    3484:	43400000 	.word	0x43400000
    3488:	fffffc01 	.word	0xfffffc01
    348c:	3ff00000 	.word	0x3ff00000
    3490:	0003988e 	.word	0x0003988e
    3494:	000bb679 	.word	0x000bb679
    3498:	fff00000 	.word	0xfff00000
    349c:	4a454eef 	.word	0x4a454eef
    34a0:	3fca7e28 	.word	0x3fca7e28
    34a4:	93c9db65 	.word	0x93c9db65
    34a8:	3fcd864a 	.word	0x3fcd864a
    34ac:	a91d4101 	.word	0xa91d4101
    34b0:	3fd17460 	.word	0x3fd17460
    34b4:	518f264d 	.word	0x518f264d
    34b8:	3fd55555 	.word	0x3fd55555
    34bc:	db6fabff 	.word	0xdb6fabff
    34c0:	3fdb6db6 	.word	0x3fdb6db6
    34c4:	33333303 	.word	0x33333303
    34c8:	3fe33333 	.word	0x3fe33333
    34cc:	40080000 	.word	0x40080000
    34d0:	3feec709 	.word	0x3feec709
    34d4:	dc3a03fd 	.word	0xdc3a03fd
    34d8:	145b01f5 	.word	0x145b01f5
    34dc:	be3e2fe0 	.word	0xbe3e2fe0
    34e0:	408fffff 	.word	0x408fffff
    34e4:	bf700000 	.word	0xbf700000
    34e8:	652b82fe 	.word	0x652b82fe
    34ec:	3c971547 	.word	0x3c971547
    34f0:	2800      	cmp	r0, #0
    34f2:	d000      	beq.n	34f6 <__ieee754_pow+0x62e>
    34f4:	e18a      	b.n	380c <__ieee754_pow+0x944>
    34f6:	2280      	movs	r2, #128	; 0x80
    34f8:	4be7      	ldr	r3, [pc, #924]	; (3898 <__ieee754_pow+0x9d0>)
    34fa:	0352      	lsls	r2, r2, #13
    34fc:	469c      	mov	ip, r3
    34fe:	0013      	movs	r3, r2
    3500:	1536      	asrs	r6, r6, #20
    3502:	4466      	add	r6, ip
    3504:	4133      	asrs	r3, r6
    3506:	49e5      	ldr	r1, [pc, #916]	; (389c <__ieee754_pow+0x9d4>)
    3508:	19db      	adds	r3, r3, r7
    350a:	005e      	lsls	r6, r3, #1
    350c:	001c      	movs	r4, r3
    350e:	031b      	lsls	r3, r3, #12
    3510:	468c      	mov	ip, r1
    3512:	0b1b      	lsrs	r3, r3, #12
    3514:	4313      	orrs	r3, r2
    3516:	2214      	movs	r2, #20
    3518:	0d76      	lsrs	r6, r6, #21
    351a:	4fe1      	ldr	r7, [pc, #900]	; (38a0 <__ieee754_pow+0x9d8>)
    351c:	4466      	add	r6, ip
    351e:	4137      	asrs	r7, r6
    3520:	1b96      	subs	r6, r2, r6
    3522:	4133      	asrs	r3, r6
    3524:	4698      	mov	r8, r3
    3526:	4653      	mov	r3, sl
    3528:	43bc      	bics	r4, r7
    352a:	2000      	movs	r0, #0
    352c:	0021      	movs	r1, r4
    352e:	2b00      	cmp	r3, #0
    3530:	da00      	bge.n	3534 <__ieee754_pow+0x66c>
    3532:	e1a9      	b.n	3888 <__ieee754_pow+0x9c0>
    3534:	0002      	movs	r2, r0
    3536:	000b      	movs	r3, r1
    3538:	9800      	ldr	r0, [sp, #0]
    353a:	9901      	ldr	r1, [sp, #4]
    353c:	f002 f990 	bl	5860 <__aeabi_dsub>
    3540:	000b      	movs	r3, r1
    3542:	9000      	str	r0, [sp, #0]
    3544:	9101      	str	r1, [sp, #4]
    3546:	0002      	movs	r2, r0
    3548:	9804      	ldr	r0, [sp, #16]
    354a:	9905      	ldr	r1, [sp, #20]
    354c:	f000 ffbe 	bl	44cc <__aeabi_dadd>
    3550:	4643      	mov	r3, r8
    3552:	051b      	lsls	r3, r3, #20
    3554:	4699      	mov	r9, r3
    3556:	2000      	movs	r0, #0
    3558:	2200      	movs	r2, #0
    355a:	4bd2      	ldr	r3, [pc, #840]	; (38a4 <__ieee754_pow+0x9dc>)
    355c:	0006      	movs	r6, r0
    355e:	000f      	movs	r7, r1
    3560:	f001 ff04 	bl	536c <__aeabi_dmul>
    3564:	9a00      	ldr	r2, [sp, #0]
    3566:	9b01      	ldr	r3, [sp, #4]
    3568:	9002      	str	r0, [sp, #8]
    356a:	9103      	str	r1, [sp, #12]
    356c:	0030      	movs	r0, r6
    356e:	0039      	movs	r1, r7
    3570:	f002 f976 	bl	5860 <__aeabi_dsub>
    3574:	0002      	movs	r2, r0
    3576:	000b      	movs	r3, r1
    3578:	9804      	ldr	r0, [sp, #16]
    357a:	9905      	ldr	r1, [sp, #20]
    357c:	f002 f970 	bl	5860 <__aeabi_dsub>
    3580:	4ac9      	ldr	r2, [pc, #804]	; (38a8 <__ieee754_pow+0x9e0>)
    3582:	4bca      	ldr	r3, [pc, #808]	; (38ac <__ieee754_pow+0x9e4>)
    3584:	f001 fef2 	bl	536c <__aeabi_dmul>
    3588:	4ac9      	ldr	r2, [pc, #804]	; (38b0 <__ieee754_pow+0x9e8>)
    358a:	0004      	movs	r4, r0
    358c:	000d      	movs	r5, r1
    358e:	4bc9      	ldr	r3, [pc, #804]	; (38b4 <__ieee754_pow+0x9ec>)
    3590:	0030      	movs	r0, r6
    3592:	0039      	movs	r1, r7
    3594:	f001 feea 	bl	536c <__aeabi_dmul>
    3598:	0002      	movs	r2, r0
    359a:	000b      	movs	r3, r1
    359c:	0020      	movs	r0, r4
    359e:	0029      	movs	r1, r5
    35a0:	f000 ff94 	bl	44cc <__aeabi_dadd>
    35a4:	0004      	movs	r4, r0
    35a6:	000d      	movs	r5, r1
    35a8:	0002      	movs	r2, r0
    35aa:	000b      	movs	r3, r1
    35ac:	9802      	ldr	r0, [sp, #8]
    35ae:	9903      	ldr	r1, [sp, #12]
    35b0:	f000 ff8c 	bl	44cc <__aeabi_dadd>
    35b4:	9a02      	ldr	r2, [sp, #8]
    35b6:	9b03      	ldr	r3, [sp, #12]
    35b8:	0006      	movs	r6, r0
    35ba:	000f      	movs	r7, r1
    35bc:	f002 f950 	bl	5860 <__aeabi_dsub>
    35c0:	0002      	movs	r2, r0
    35c2:	000b      	movs	r3, r1
    35c4:	0020      	movs	r0, r4
    35c6:	0029      	movs	r1, r5
    35c8:	f002 f94a 	bl	5860 <__aeabi_dsub>
    35cc:	0032      	movs	r2, r6
    35ce:	9000      	str	r0, [sp, #0]
    35d0:	9101      	str	r1, [sp, #4]
    35d2:	003b      	movs	r3, r7
    35d4:	0030      	movs	r0, r6
    35d6:	0039      	movs	r1, r7
    35d8:	f001 fec8 	bl	536c <__aeabi_dmul>
    35dc:	0004      	movs	r4, r0
    35de:	000d      	movs	r5, r1
    35e0:	4ab5      	ldr	r2, [pc, #724]	; (38b8 <__ieee754_pow+0x9f0>)
    35e2:	4bb6      	ldr	r3, [pc, #728]	; (38bc <__ieee754_pow+0x9f4>)
    35e4:	f001 fec2 	bl	536c <__aeabi_dmul>
    35e8:	4ab5      	ldr	r2, [pc, #724]	; (38c0 <__ieee754_pow+0x9f8>)
    35ea:	4bb6      	ldr	r3, [pc, #728]	; (38c4 <__ieee754_pow+0x9fc>)
    35ec:	f002 f938 	bl	5860 <__aeabi_dsub>
    35f0:	0022      	movs	r2, r4
    35f2:	002b      	movs	r3, r5
    35f4:	f001 feba 	bl	536c <__aeabi_dmul>
    35f8:	4ab3      	ldr	r2, [pc, #716]	; (38c8 <__ieee754_pow+0xa00>)
    35fa:	4bb4      	ldr	r3, [pc, #720]	; (38cc <__ieee754_pow+0xa04>)
    35fc:	f000 ff66 	bl	44cc <__aeabi_dadd>
    3600:	0022      	movs	r2, r4
    3602:	002b      	movs	r3, r5
    3604:	f001 feb2 	bl	536c <__aeabi_dmul>
    3608:	4ab1      	ldr	r2, [pc, #708]	; (38d0 <__ieee754_pow+0xa08>)
    360a:	4bb2      	ldr	r3, [pc, #712]	; (38d4 <__ieee754_pow+0xa0c>)
    360c:	f002 f928 	bl	5860 <__aeabi_dsub>
    3610:	0022      	movs	r2, r4
    3612:	002b      	movs	r3, r5
    3614:	f001 feaa 	bl	536c <__aeabi_dmul>
    3618:	4aaf      	ldr	r2, [pc, #700]	; (38d8 <__ieee754_pow+0xa10>)
    361a:	4bb0      	ldr	r3, [pc, #704]	; (38dc <__ieee754_pow+0xa14>)
    361c:	f000 ff56 	bl	44cc <__aeabi_dadd>
    3620:	0022      	movs	r2, r4
    3622:	002b      	movs	r3, r5
    3624:	f001 fea2 	bl	536c <__aeabi_dmul>
    3628:	0002      	movs	r2, r0
    362a:	000b      	movs	r3, r1
    362c:	0030      	movs	r0, r6
    362e:	0039      	movs	r1, r7
    3630:	f002 f916 	bl	5860 <__aeabi_dsub>
    3634:	0004      	movs	r4, r0
    3636:	000d      	movs	r5, r1
    3638:	0002      	movs	r2, r0
    363a:	000b      	movs	r3, r1
    363c:	0030      	movs	r0, r6
    363e:	0039      	movs	r1, r7
    3640:	f001 fe94 	bl	536c <__aeabi_dmul>
    3644:	2380      	movs	r3, #128	; 0x80
    3646:	9002      	str	r0, [sp, #8]
    3648:	9103      	str	r1, [sp, #12]
    364a:	2200      	movs	r2, #0
    364c:	05db      	lsls	r3, r3, #23
    364e:	0020      	movs	r0, r4
    3650:	0029      	movs	r1, r5
    3652:	f002 f905 	bl	5860 <__aeabi_dsub>
    3656:	0002      	movs	r2, r0
    3658:	000b      	movs	r3, r1
    365a:	9802      	ldr	r0, [sp, #8]
    365c:	9903      	ldr	r1, [sp, #12]
    365e:	f001 fa61 	bl	4b24 <__aeabi_ddiv>
    3662:	9a00      	ldr	r2, [sp, #0]
    3664:	9b01      	ldr	r3, [sp, #4]
    3666:	0004      	movs	r4, r0
    3668:	000d      	movs	r5, r1
    366a:	0030      	movs	r0, r6
    366c:	0039      	movs	r1, r7
    366e:	f001 fe7d 	bl	536c <__aeabi_dmul>
    3672:	9a00      	ldr	r2, [sp, #0]
    3674:	9b01      	ldr	r3, [sp, #4]
    3676:	f000 ff29 	bl	44cc <__aeabi_dadd>
    367a:	0002      	movs	r2, r0
    367c:	000b      	movs	r3, r1
    367e:	0020      	movs	r0, r4
    3680:	0029      	movs	r1, r5
    3682:	f002 f8ed 	bl	5860 <__aeabi_dsub>
    3686:	0032      	movs	r2, r6
    3688:	003b      	movs	r3, r7
    368a:	f002 f8e9 	bl	5860 <__aeabi_dsub>
    368e:	0002      	movs	r2, r0
    3690:	000b      	movs	r3, r1
    3692:	2000      	movs	r0, #0
    3694:	4992      	ldr	r1, [pc, #584]	; (38e0 <__ieee754_pow+0xa18>)
    3696:	f002 f8e3 	bl	5860 <__aeabi_dsub>
    369a:	464b      	mov	r3, r9
    369c:	185b      	adds	r3, r3, r1
    369e:	151a      	asrs	r2, r3, #20
    36a0:	2a00      	cmp	r2, #0
    36a2:	dc00      	bgt.n	36a6 <__ieee754_pow+0x7de>
    36a4:	e0f4      	b.n	3890 <__ieee754_pow+0x9c8>
    36a6:	0019      	movs	r1, r3
    36a8:	9a06      	ldr	r2, [sp, #24]
    36aa:	9b07      	ldr	r3, [sp, #28]
    36ac:	f001 fe5e 	bl	536c <__aeabi_dmul>
    36b0:	0006      	movs	r6, r0
    36b2:	e452      	b.n	2f5a <__ieee754_pow+0x92>
    36b4:	0032      	movs	r2, r6
    36b6:	0030      	movs	r0, r6
    36b8:	002b      	movs	r3, r5
    36ba:	0029      	movs	r1, r5
    36bc:	f001 fe56 	bl	536c <__aeabi_dmul>
    36c0:	0006      	movs	r6, r0
    36c2:	e44a      	b.n	2f5a <__ieee754_pow+0x92>
    36c4:	4b87      	ldr	r3, [pc, #540]	; (38e4 <__ieee754_pow+0xa1c>)
    36c6:	004e      	lsls	r6, r1, #1
    36c8:	0876      	lsrs	r6, r6, #1
    36ca:	429e      	cmp	r6, r3
    36cc:	dc00      	bgt.n	36d0 <__ieee754_pow+0x808>
    36ce:	e0bf      	b.n	3850 <__ieee754_pow+0x988>
    36d0:	4b85      	ldr	r3, [pc, #532]	; (38e8 <__ieee754_pow+0xa20>)
    36d2:	18cb      	adds	r3, r1, r3
    36d4:	4303      	orrs	r3, r0
    36d6:	d10c      	bne.n	36f2 <__ieee754_pow+0x82a>
    36d8:	9a00      	ldr	r2, [sp, #0]
    36da:	9b01      	ldr	r3, [sp, #4]
    36dc:	f002 f8c0 	bl	5860 <__aeabi_dsub>
    36e0:	0002      	movs	r2, r0
    36e2:	000b      	movs	r3, r1
    36e4:	9804      	ldr	r0, [sp, #16]
    36e6:	9905      	ldr	r1, [sp, #20]
    36e8:	f000 fb6c 	bl	3dc4 <__aeabi_dcmple>
    36ec:	2800      	cmp	r0, #0
    36ee:	d100      	bne.n	36f2 <__ieee754_pow+0x82a>
    36f0:	e701      	b.n	34f6 <__ieee754_pow+0x62e>
    36f2:	9806      	ldr	r0, [sp, #24]
    36f4:	9907      	ldr	r1, [sp, #28]
    36f6:	4a7d      	ldr	r2, [pc, #500]	; (38ec <__ieee754_pow+0xa24>)
    36f8:	4b7d      	ldr	r3, [pc, #500]	; (38f0 <__ieee754_pow+0xa28>)
    36fa:	f001 fe37 	bl	536c <__aeabi_dmul>
    36fe:	4a7b      	ldr	r2, [pc, #492]	; (38ec <__ieee754_pow+0xa24>)
    3700:	4b7b      	ldr	r3, [pc, #492]	; (38f0 <__ieee754_pow+0xa28>)
    3702:	f001 fe33 	bl	536c <__aeabi_dmul>
    3706:	0006      	movs	r6, r0
    3708:	f7ff fc27 	bl	2f5a <__ieee754_pow+0x92>
    370c:	2300      	movs	r3, #0
    370e:	4c79      	ldr	r4, [pc, #484]	; (38f4 <__ieee754_pow+0xa2c>)
    3710:	9306      	str	r3, [sp, #24]
    3712:	9407      	str	r4, [sp, #28]
    3714:	e666      	b.n	33e4 <__ieee754_pow+0x51c>
    3716:	4653      	mov	r3, sl
    3718:	2b00      	cmp	r3, #0
    371a:	db00      	blt.n	371e <__ieee754_pow+0x856>
    371c:	e4c3      	b.n	30a6 <__ieee754_pow+0x1de>
    371e:	9b00      	ldr	r3, [sp, #0]
    3720:	9c01      	ldr	r4, [sp, #4]
    3722:	2280      	movs	r2, #128	; 0x80
    3724:	0612      	lsls	r2, r2, #24
    3726:	001e      	movs	r6, r3
    3728:	4694      	mov	ip, r2
    372a:	0023      	movs	r3, r4
    372c:	4463      	add	r3, ip
    372e:	0019      	movs	r1, r3
    3730:	f7ff fc13 	bl	2f5a <__ieee754_pow+0x92>
    3734:	0002      	movs	r2, r0
    3736:	000b      	movs	r3, r1
    3738:	2000      	movs	r0, #0
    373a:	4969      	ldr	r1, [pc, #420]	; (38e0 <__ieee754_pow+0xa18>)
    373c:	f001 f9f2 	bl	4b24 <__aeabi_ddiv>
    3740:	e44a      	b.n	2fd8 <__ieee754_pow+0x110>
    3742:	4b6d      	ldr	r3, [pc, #436]	; (38f8 <__ieee754_pow+0xa30>)
    3744:	429c      	cmp	r4, r3
    3746:	dc00      	bgt.n	374a <__ieee754_pow+0x882>
    3748:	e4aa      	b.n	30a0 <__ieee754_pow+0x1d8>
    374a:	4b65      	ldr	r3, [pc, #404]	; (38e0 <__ieee754_pow+0xa18>)
    374c:	429c      	cmp	r4, r3
    374e:	dd01      	ble.n	3754 <__ieee754_pow+0x88c>
    3750:	f7ff fc2c 	bl	2fac <__ieee754_pow+0xe4>
    3754:	2200      	movs	r2, #0
    3756:	4b62      	ldr	r3, [pc, #392]	; (38e0 <__ieee754_pow+0xa18>)
    3758:	f002 f882 	bl	5860 <__aeabi_dsub>
    375c:	22c0      	movs	r2, #192	; 0xc0
    375e:	4b67      	ldr	r3, [pc, #412]	; (38fc <__ieee754_pow+0xa34>)
    3760:	05d2      	lsls	r2, r2, #23
    3762:	0004      	movs	r4, r0
    3764:	000d      	movs	r5, r1
    3766:	f001 fe01 	bl	536c <__aeabi_dmul>
    376a:	4a65      	ldr	r2, [pc, #404]	; (3900 <__ieee754_pow+0xa38>)
    376c:	0006      	movs	r6, r0
    376e:	000f      	movs	r7, r1
    3770:	4b64      	ldr	r3, [pc, #400]	; (3904 <__ieee754_pow+0xa3c>)
    3772:	0020      	movs	r0, r4
    3774:	0029      	movs	r1, r5
    3776:	f001 fdf9 	bl	536c <__aeabi_dmul>
    377a:	2200      	movs	r2, #0
    377c:	9002      	str	r0, [sp, #8]
    377e:	9103      	str	r1, [sp, #12]
    3780:	4b61      	ldr	r3, [pc, #388]	; (3908 <__ieee754_pow+0xa40>)
    3782:	0020      	movs	r0, r4
    3784:	0029      	movs	r1, r5
    3786:	f001 fdf1 	bl	536c <__aeabi_dmul>
    378a:	0002      	movs	r2, r0
    378c:	000b      	movs	r3, r1
    378e:	485f      	ldr	r0, [pc, #380]	; (390c <__ieee754_pow+0xa44>)
    3790:	495f      	ldr	r1, [pc, #380]	; (3910 <__ieee754_pow+0xa48>)
    3792:	f002 f865 	bl	5860 <__aeabi_dsub>
    3796:	0022      	movs	r2, r4
    3798:	002b      	movs	r3, r5
    379a:	f001 fde7 	bl	536c <__aeabi_dmul>
    379e:	0002      	movs	r2, r0
    37a0:	000b      	movs	r3, r1
    37a2:	2000      	movs	r0, #0
    37a4:	495b      	ldr	r1, [pc, #364]	; (3914 <__ieee754_pow+0xa4c>)
    37a6:	f002 f85b 	bl	5860 <__aeabi_dsub>
    37aa:	0022      	movs	r2, r4
    37ac:	9004      	str	r0, [sp, #16]
    37ae:	9105      	str	r1, [sp, #20]
    37b0:	002b      	movs	r3, r5
    37b2:	0020      	movs	r0, r4
    37b4:	0029      	movs	r1, r5
    37b6:	f001 fdd9 	bl	536c <__aeabi_dmul>
    37ba:	0002      	movs	r2, r0
    37bc:	000b      	movs	r3, r1
    37be:	9804      	ldr	r0, [sp, #16]
    37c0:	9905      	ldr	r1, [sp, #20]
    37c2:	f001 fdd3 	bl	536c <__aeabi_dmul>
    37c6:	4a54      	ldr	r2, [pc, #336]	; (3918 <__ieee754_pow+0xa50>)
    37c8:	4b4c      	ldr	r3, [pc, #304]	; (38fc <__ieee754_pow+0xa34>)
    37ca:	f001 fdcf 	bl	536c <__aeabi_dmul>
    37ce:	0002      	movs	r2, r0
    37d0:	000b      	movs	r3, r1
    37d2:	9802      	ldr	r0, [sp, #8]
    37d4:	9903      	ldr	r1, [sp, #12]
    37d6:	f002 f843 	bl	5860 <__aeabi_dsub>
    37da:	0002      	movs	r2, r0
    37dc:	000b      	movs	r3, r1
    37de:	0004      	movs	r4, r0
    37e0:	000d      	movs	r5, r1
    37e2:	0030      	movs	r0, r6
    37e4:	0039      	movs	r1, r7
    37e6:	f000 fe71 	bl	44cc <__aeabi_dadd>
    37ea:	2200      	movs	r2, #0
    37ec:	0010      	movs	r0, r2
    37ee:	003b      	movs	r3, r7
    37f0:	0032      	movs	r2, r6
    37f2:	9002      	str	r0, [sp, #8]
    37f4:	9103      	str	r1, [sp, #12]
    37f6:	f002 f833 	bl	5860 <__aeabi_dsub>
    37fa:	0002      	movs	r2, r0
    37fc:	000b      	movs	r3, r1
    37fe:	0020      	movs	r0, r4
    3800:	0029      	movs	r1, r5
    3802:	f002 f82d 	bl	5860 <__aeabi_dsub>
    3806:	9004      	str	r0, [sp, #16]
    3808:	9105      	str	r1, [sp, #20]
    380a:	e5e1      	b.n	33d0 <__ieee754_pow+0x508>
    380c:	4a43      	ldr	r2, [pc, #268]	; (391c <__ieee754_pow+0xa54>)
    380e:	4b44      	ldr	r3, [pc, #272]	; (3920 <__ieee754_pow+0xa58>)
    3810:	9806      	ldr	r0, [sp, #24]
    3812:	9907      	ldr	r1, [sp, #28]
    3814:	f001 fdaa 	bl	536c <__aeabi_dmul>
    3818:	4a40      	ldr	r2, [pc, #256]	; (391c <__ieee754_pow+0xa54>)
    381a:	4b41      	ldr	r3, [pc, #260]	; (3920 <__ieee754_pow+0xa58>)
    381c:	f001 fda6 	bl	536c <__aeabi_dmul>
    3820:	0006      	movs	r6, r0
    3822:	f7ff fb9a 	bl	2f5a <__ieee754_pow+0x92>
    3826:	2a00      	cmp	r2, #0
    3828:	d001      	beq.n	382e <__ieee754_pow+0x966>
    382a:	f7ff fba5 	bl	2f78 <__ieee754_pow+0xb0>
    382e:	3214      	adds	r2, #20
    3830:	1ad3      	subs	r3, r2, r3
    3832:	003a      	movs	r2, r7
    3834:	411a      	asrs	r2, r3
    3836:	0011      	movs	r1, r2
    3838:	4099      	lsls	r1, r3
    383a:	428f      	cmp	r7, r1
    383c:	d001      	beq.n	3842 <__ieee754_pow+0x97a>
    383e:	f7ff fb6f 	bl	2f20 <__ieee754_pow+0x58>
    3842:	2301      	movs	r3, #1
    3844:	4013      	ands	r3, r2
    3846:	2202      	movs	r2, #2
    3848:	1ad3      	subs	r3, r2, r3
    384a:	469b      	mov	fp, r3
    384c:	f7ff fb68 	bl	2f20 <__ieee754_pow+0x58>
    3850:	4b30      	ldr	r3, [pc, #192]	; (3914 <__ieee754_pow+0xa4c>)
    3852:	429e      	cmp	r6, r3
    3854:	dd00      	ble.n	3858 <__ieee754_pow+0x990>
    3856:	e64e      	b.n	34f6 <__ieee754_pow+0x62e>
    3858:	2300      	movs	r3, #0
    385a:	4699      	mov	r9, r3
    385c:	4698      	mov	r8, r3
    385e:	e67a      	b.n	3556 <__ieee754_pow+0x68e>
    3860:	0002      	movs	r2, r0
    3862:	000b      	movs	r3, r1
    3864:	f7ff fc14 	bl	3090 <__ieee754_pow+0x1c8>
    3868:	2380      	movs	r3, #128	; 0x80
    386a:	4c2e      	ldr	r4, [pc, #184]	; (3924 <__ieee754_pow+0xa5c>)
    386c:	05db      	lsls	r3, r3, #23
    386e:	9308      	str	r3, [sp, #32]
    3870:	9409      	str	r4, [sp, #36]	; 0x24
    3872:	4b2d      	ldr	r3, [pc, #180]	; (3928 <__ieee754_pow+0xa60>)
    3874:	4c2d      	ldr	r4, [pc, #180]	; (392c <__ieee754_pow+0xa64>)
    3876:	2200      	movs	r2, #0
    3878:	930c      	str	r3, [sp, #48]	; 0x30
    387a:	940d      	str	r4, [sp, #52]	; 0x34
    387c:	2480      	movs	r4, #128	; 0x80
    387e:	4b2c      	ldr	r3, [pc, #176]	; (3930 <__ieee754_pow+0xa68>)
    3880:	02e4      	lsls	r4, r4, #11
    3882:	9206      	str	r2, [sp, #24]
    3884:	9307      	str	r3, [sp, #28]
    3886:	e456      	b.n	3136 <__ieee754_pow+0x26e>
    3888:	4643      	mov	r3, r8
    388a:	425b      	negs	r3, r3
    388c:	4698      	mov	r8, r3
    388e:	e651      	b.n	3534 <__ieee754_pow+0x66c>
    3890:	4642      	mov	r2, r8
    3892:	f000 f9fd 	bl	3c90 <scalbn>
    3896:	e707      	b.n	36a8 <__ieee754_pow+0x7e0>
    3898:	fffffc02 	.word	0xfffffc02
    389c:	fffffc01 	.word	0xfffffc01
    38a0:	000fffff 	.word	0x000fffff
    38a4:	3fe62e43 	.word	0x3fe62e43
    38a8:	fefa39ef 	.word	0xfefa39ef
    38ac:	3fe62e42 	.word	0x3fe62e42
    38b0:	0ca86c39 	.word	0x0ca86c39
    38b4:	be205c61 	.word	0xbe205c61
    38b8:	72bea4d0 	.word	0x72bea4d0
    38bc:	3e663769 	.word	0x3e663769
    38c0:	c5d26bf1 	.word	0xc5d26bf1
    38c4:	3ebbbd41 	.word	0x3ebbbd41
    38c8:	af25de2c 	.word	0xaf25de2c
    38cc:	3f11566a 	.word	0x3f11566a
    38d0:	16bebd93 	.word	0x16bebd93
    38d4:	3f66c16c 	.word	0x3f66c16c
    38d8:	5555553e 	.word	0x5555553e
    38dc:	3fc55555 	.word	0x3fc55555
    38e0:	3ff00000 	.word	0x3ff00000
    38e4:	4090cbff 	.word	0x4090cbff
    38e8:	3f6f3400 	.word	0x3f6f3400
    38ec:	c2f8f359 	.word	0xc2f8f359
    38f0:	01a56e1f 	.word	0x01a56e1f
    38f4:	bff00000 	.word	0xbff00000
    38f8:	3feffffe 	.word	0x3feffffe
    38fc:	3ff71547 	.word	0x3ff71547
    3900:	f85ddf44 	.word	0xf85ddf44
    3904:	3e54ae0b 	.word	0x3e54ae0b
    3908:	3fd00000 	.word	0x3fd00000
    390c:	55555555 	.word	0x55555555
    3910:	3fd55555 	.word	0x3fd55555
    3914:	3fe00000 	.word	0x3fe00000
    3918:	652b82fe 	.word	0x652b82fe
    391c:	8800759c 	.word	0x8800759c
    3920:	7e37e43c 	.word	0x7e37e43c
    3924:	3fe2b803 	.word	0x3fe2b803
    3928:	43cfd006 	.word	0x43cfd006
    392c:	3e4cfdeb 	.word	0x3e4cfdeb
    3930:	3ff80000 	.word	0x3ff80000

00003934 <__ieee754_sqrt>:
    3934:	b5f0      	push	{r4, r5, r6, r7, lr}
    3936:	4656      	mov	r6, sl
    3938:	464d      	mov	r5, r9
    393a:	4644      	mov	r4, r8
    393c:	465f      	mov	r7, fp
    393e:	4b75      	ldr	r3, [pc, #468]	; (3b14 <__ieee754_sqrt+0x1e0>)
    3940:	b4f0      	push	{r4, r5, r6, r7}
    3942:	000a      	movs	r2, r1
    3944:	000d      	movs	r5, r1
    3946:	0019      	movs	r1, r3
    3948:	b083      	sub	sp, #12
    394a:	0006      	movs	r6, r0
    394c:	0004      	movs	r4, r0
    394e:	4029      	ands	r1, r5
    3950:	4299      	cmp	r1, r3
    3952:	d100      	bne.n	3956 <__ieee754_sqrt+0x22>
    3954:	e0ba      	b.n	3acc <__ieee754_sqrt+0x198>
    3956:	2d00      	cmp	r5, #0
    3958:	dc00      	bgt.n	395c <__ieee754_sqrt+0x28>
    395a:	e094      	b.n	3a86 <__ieee754_sqrt+0x152>
    395c:	152d      	asrs	r5, r5, #20
    395e:	d100      	bne.n	3962 <__ieee754_sqrt+0x2e>
    3960:	e0a3      	b.n	3aaa <__ieee754_sqrt+0x176>
    3962:	4b6d      	ldr	r3, [pc, #436]	; (3b18 <__ieee754_sqrt+0x1e4>)
    3964:	0312      	lsls	r2, r2, #12
    3966:	469c      	mov	ip, r3
    3968:	2380      	movs	r3, #128	; 0x80
    396a:	0b12      	lsrs	r2, r2, #12
    396c:	035b      	lsls	r3, r3, #13
    396e:	4465      	add	r5, ip
    3970:	431a      	orrs	r2, r3
    3972:	07eb      	lsls	r3, r5, #31
    3974:	d500      	bpl.n	3978 <__ieee754_sqrt+0x44>
    3976:	e081      	b.n	3a7c <__ieee754_sqrt+0x148>
    3978:	106b      	asrs	r3, r5, #1
    397a:	4698      	mov	r8, r3
    397c:	0fe3      	lsrs	r3, r4, #31
    397e:	189b      	adds	r3, r3, r2
    3980:	189b      	adds	r3, r3, r2
    3982:	2280      	movs	r2, #128	; 0x80
    3984:	2116      	movs	r1, #22
    3986:	2600      	movs	r6, #0
    3988:	2700      	movs	r7, #0
    398a:	0064      	lsls	r4, r4, #1
    398c:	0392      	lsls	r2, r2, #14
    398e:	18b8      	adds	r0, r7, r2
    3990:	4298      	cmp	r0, r3
    3992:	dc02      	bgt.n	399a <__ieee754_sqrt+0x66>
    3994:	1887      	adds	r7, r0, r2
    3996:	1a1b      	subs	r3, r3, r0
    3998:	18b6      	adds	r6, r6, r2
    399a:	0fe0      	lsrs	r0, r4, #31
    399c:	005b      	lsls	r3, r3, #1
    399e:	3901      	subs	r1, #1
    39a0:	181b      	adds	r3, r3, r0
    39a2:	0064      	lsls	r4, r4, #1
    39a4:	0852      	lsrs	r2, r2, #1
    39a6:	2900      	cmp	r1, #0
    39a8:	d1f1      	bne.n	398e <__ieee754_sqrt+0x5a>
    39aa:	2200      	movs	r2, #0
    39ac:	9201      	str	r2, [sp, #4]
    39ae:	4694      	mov	ip, r2
    39b0:	2280      	movs	r2, #128	; 0x80
    39b2:	0612      	lsls	r2, r2, #24
    39b4:	2020      	movs	r0, #32
    39b6:	4691      	mov	r9, r2
    39b8:	e009      	b.n	39ce <__ieee754_sqrt+0x9a>
    39ba:	429f      	cmp	r7, r3
    39bc:	d041      	beq.n	3a42 <__ieee754_sqrt+0x10e>
    39be:	0fe1      	lsrs	r1, r4, #31
    39c0:	18c9      	adds	r1, r1, r3
    39c2:	3801      	subs	r0, #1
    39c4:	18cb      	adds	r3, r1, r3
    39c6:	0064      	lsls	r4, r4, #1
    39c8:	0852      	lsrs	r2, r2, #1
    39ca:	2800      	cmp	r0, #0
    39cc:	d01e      	beq.n	3a0c <__ieee754_sqrt+0xd8>
    39ce:	4661      	mov	r1, ip
    39d0:	1851      	adds	r1, r2, r1
    39d2:	429f      	cmp	r7, r3
    39d4:	daf1      	bge.n	39ba <__ieee754_sqrt+0x86>
    39d6:	188d      	adds	r5, r1, r2
    39d8:	46ac      	mov	ip, r5
    39da:	0fcd      	lsrs	r5, r1, #31
    39dc:	07ed      	lsls	r5, r5, #31
    39de:	46ba      	mov	sl, r7
    39e0:	454d      	cmp	r5, r9
    39e2:	d039      	beq.n	3a58 <__ieee754_sqrt+0x124>
    39e4:	1bdb      	subs	r3, r3, r7
    39e6:	428c      	cmp	r4, r1
    39e8:	41bf      	sbcs	r7, r7
    39ea:	427f      	negs	r7, r7
    39ec:	1bdb      	subs	r3, r3, r7
    39ee:	1a64      	subs	r4, r4, r1
    39f0:	9901      	ldr	r1, [sp, #4]
    39f2:	3801      	subs	r0, #1
    39f4:	468b      	mov	fp, r1
    39f6:	4493      	add	fp, r2
    39f8:	4659      	mov	r1, fp
    39fa:	9101      	str	r1, [sp, #4]
    39fc:	0fe1      	lsrs	r1, r4, #31
    39fe:	18c9      	adds	r1, r1, r3
    3a00:	4657      	mov	r7, sl
    3a02:	18cb      	adds	r3, r1, r3
    3a04:	0064      	lsls	r4, r4, #1
    3a06:	0852      	lsrs	r2, r2, #1
    3a08:	2800      	cmp	r0, #0
    3a0a:	d1e0      	bne.n	39ce <__ieee754_sqrt+0x9a>
    3a0c:	4323      	orrs	r3, r4
    3a0e:	d12b      	bne.n	3a68 <__ieee754_sqrt+0x134>
    3a10:	9b01      	ldr	r3, [sp, #4]
    3a12:	085b      	lsrs	r3, r3, #1
    3a14:	4941      	ldr	r1, [pc, #260]	; (3b1c <__ieee754_sqrt+0x1e8>)
    3a16:	1072      	asrs	r2, r6, #1
    3a18:	468c      	mov	ip, r1
    3a1a:	4462      	add	r2, ip
    3a1c:	07f1      	lsls	r1, r6, #31
    3a1e:	d502      	bpl.n	3a26 <__ieee754_sqrt+0xf2>
    3a20:	2180      	movs	r1, #128	; 0x80
    3a22:	0609      	lsls	r1, r1, #24
    3a24:	430b      	orrs	r3, r1
    3a26:	4641      	mov	r1, r8
    3a28:	0509      	lsls	r1, r1, #20
    3a2a:	188d      	adds	r5, r1, r2
    3a2c:	001e      	movs	r6, r3
    3a2e:	002f      	movs	r7, r5
    3a30:	0030      	movs	r0, r6
    3a32:	0039      	movs	r1, r7
    3a34:	b003      	add	sp, #12
    3a36:	bc3c      	pop	{r2, r3, r4, r5}
    3a38:	4690      	mov	r8, r2
    3a3a:	4699      	mov	r9, r3
    3a3c:	46a2      	mov	sl, r4
    3a3e:	46ab      	mov	fp, r5
    3a40:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3a42:	42a1      	cmp	r1, r4
    3a44:	d80e      	bhi.n	3a64 <__ieee754_sqrt+0x130>
    3a46:	188d      	adds	r5, r1, r2
    3a48:	46ac      	mov	ip, r5
    3a4a:	0fcd      	lsrs	r5, r1, #31
    3a4c:	07ed      	lsls	r5, r5, #31
    3a4e:	454d      	cmp	r5, r9
    3a50:	d048      	beq.n	3ae4 <__ieee754_sqrt+0x1b0>
    3a52:	469a      	mov	sl, r3
    3a54:	2300      	movs	r3, #0
    3a56:	e7ca      	b.n	39ee <__ieee754_sqrt+0xba>
    3a58:	4665      	mov	r5, ip
    3a5a:	2d00      	cmp	r5, #0
    3a5c:	dbc2      	blt.n	39e4 <__ieee754_sqrt+0xb0>
    3a5e:	1c7d      	adds	r5, r7, #1
    3a60:	46aa      	mov	sl, r5
    3a62:	e7bf      	b.n	39e4 <__ieee754_sqrt+0xb0>
    3a64:	003b      	movs	r3, r7
    3a66:	e7aa      	b.n	39be <__ieee754_sqrt+0x8a>
    3a68:	9b01      	ldr	r3, [sp, #4]
    3a6a:	3301      	adds	r3, #1
    3a6c:	d03e      	beq.n	3aec <__ieee754_sqrt+0x1b8>
    3a6e:	9a01      	ldr	r2, [sp, #4]
    3a70:	2301      	movs	r3, #1
    3a72:	4694      	mov	ip, r2
    3a74:	4013      	ands	r3, r2
    3a76:	4463      	add	r3, ip
    3a78:	085b      	lsrs	r3, r3, #1
    3a7a:	e7cb      	b.n	3a14 <__ieee754_sqrt+0xe0>
    3a7c:	0fe3      	lsrs	r3, r4, #31
    3a7e:	0052      	lsls	r2, r2, #1
    3a80:	189a      	adds	r2, r3, r2
    3a82:	0064      	lsls	r4, r4, #1
    3a84:	e778      	b.n	3978 <__ieee754_sqrt+0x44>
    3a86:	006b      	lsls	r3, r5, #1
    3a88:	085b      	lsrs	r3, r3, #1
    3a8a:	4303      	orrs	r3, r0
    3a8c:	002f      	movs	r7, r5
    3a8e:	2b00      	cmp	r3, #0
    3a90:	d0ce      	beq.n	3a30 <__ieee754_sqrt+0xfc>
    3a92:	2500      	movs	r5, #0
    3a94:	2a00      	cmp	r2, #0
    3a96:	d131      	bne.n	3afc <__ieee754_sqrt+0x1c8>
    3a98:	0ae2      	lsrs	r2, r4, #11
    3a9a:	3d15      	subs	r5, #21
    3a9c:	0564      	lsls	r4, r4, #21
    3a9e:	2a00      	cmp	r2, #0
    3aa0:	d0fa      	beq.n	3a98 <__ieee754_sqrt+0x164>
    3aa2:	2380      	movs	r3, #128	; 0x80
    3aa4:	035b      	lsls	r3, r3, #13
    3aa6:	421a      	tst	r2, r3
    3aa8:	d123      	bne.n	3af2 <__ieee754_sqrt+0x1be>
    3aaa:	2080      	movs	r0, #128	; 0x80
    3aac:	2300      	movs	r3, #0
    3aae:	0340      	lsls	r0, r0, #13
    3ab0:	e000      	b.n	3ab4 <__ieee754_sqrt+0x180>
    3ab2:	000b      	movs	r3, r1
    3ab4:	0052      	lsls	r2, r2, #1
    3ab6:	1c59      	adds	r1, r3, #1
    3ab8:	4202      	tst	r2, r0
    3aba:	d0fa      	beq.n	3ab2 <__ieee754_sqrt+0x17e>
    3abc:	2020      	movs	r0, #32
    3abe:	1a40      	subs	r0, r0, r1
    3ac0:	1aed      	subs	r5, r5, r3
    3ac2:	0023      	movs	r3, r4
    3ac4:	40c3      	lsrs	r3, r0
    3ac6:	408c      	lsls	r4, r1
    3ac8:	431a      	orrs	r2, r3
    3aca:	e74a      	b.n	3962 <__ieee754_sqrt+0x2e>
    3acc:	0002      	movs	r2, r0
    3ace:	002b      	movs	r3, r5
    3ad0:	0029      	movs	r1, r5
    3ad2:	f001 fc4b 	bl	536c <__aeabi_dmul>
    3ad6:	0032      	movs	r2, r6
    3ad8:	002b      	movs	r3, r5
    3ada:	f000 fcf7 	bl	44cc <__aeabi_dadd>
    3ade:	0006      	movs	r6, r0
    3ae0:	000f      	movs	r7, r1
    3ae2:	e7a5      	b.n	3a30 <__ieee754_sqrt+0xfc>
    3ae4:	4665      	mov	r5, ip
    3ae6:	2d00      	cmp	r5, #0
    3ae8:	dab9      	bge.n	3a5e <__ieee754_sqrt+0x12a>
    3aea:	e7b2      	b.n	3a52 <__ieee754_sqrt+0x11e>
    3aec:	3601      	adds	r6, #1
    3aee:	2300      	movs	r3, #0
    3af0:	e790      	b.n	3a14 <__ieee754_sqrt+0xe0>
    3af2:	2301      	movs	r3, #1
    3af4:	2020      	movs	r0, #32
    3af6:	425b      	negs	r3, r3
    3af8:	2100      	movs	r1, #0
    3afa:	e7e1      	b.n	3ac0 <__ieee754_sqrt+0x18c>
    3afc:	003b      	movs	r3, r7
    3afe:	0002      	movs	r2, r0
    3b00:	0039      	movs	r1, r7
    3b02:	f001 fead 	bl	5860 <__aeabi_dsub>
    3b06:	0002      	movs	r2, r0
    3b08:	000b      	movs	r3, r1
    3b0a:	f001 f80b 	bl	4b24 <__aeabi_ddiv>
    3b0e:	0006      	movs	r6, r0
    3b10:	000f      	movs	r7, r1
    3b12:	e78d      	b.n	3a30 <__ieee754_sqrt+0xfc>
    3b14:	7ff00000 	.word	0x7ff00000
    3b18:	fffffc01 	.word	0xfffffc01
    3b1c:	3fe00000 	.word	0x3fe00000

00003b20 <fabs>:
    3b20:	0049      	lsls	r1, r1, #1
    3b22:	084b      	lsrs	r3, r1, #1
    3b24:	0019      	movs	r1, r3
    3b26:	4770      	bx	lr

00003b28 <finite>:
    3b28:	4b03      	ldr	r3, [pc, #12]	; (3b38 <finite+0x10>)
    3b2a:	0048      	lsls	r0, r1, #1
    3b2c:	469c      	mov	ip, r3
    3b2e:	0840      	lsrs	r0, r0, #1
    3b30:	4460      	add	r0, ip
    3b32:	0fc0      	lsrs	r0, r0, #31
    3b34:	4770      	bx	lr
    3b36:	46c0      	nop			; (mov r8, r8)
    3b38:	80100000 	.word	0x80100000

00003b3c <matherr>:
    3b3c:	2000      	movs	r0, #0
    3b3e:	4770      	bx	lr

00003b40 <nan>:
    3b40:	2000      	movs	r0, #0
    3b42:	4901      	ldr	r1, [pc, #4]	; (3b48 <nan+0x8>)
    3b44:	4770      	bx	lr
    3b46:	46c0      	nop			; (mov r8, r8)
    3b48:	7ff80000 	.word	0x7ff80000

00003b4c <rint>:
    3b4c:	b5f0      	push	{r4, r5, r6, r7, lr}
    3b4e:	4647      	mov	r7, r8
    3b50:	b480      	push	{r7}
    3b52:	0fcb      	lsrs	r3, r1, #31
    3b54:	4698      	mov	r8, r3
    3b56:	4c4a      	ldr	r4, [pc, #296]	; (3c80 <rint+0x134>)
    3b58:	004b      	lsls	r3, r1, #1
    3b5a:	0d5b      	lsrs	r3, r3, #21
    3b5c:	191e      	adds	r6, r3, r4
    3b5e:	b082      	sub	sp, #8
    3b60:	0007      	movs	r7, r0
    3b62:	000a      	movs	r2, r1
    3b64:	2e13      	cmp	r6, #19
    3b66:	dc35      	bgt.n	3bd4 <rint+0x88>
    3b68:	2e00      	cmp	r6, #0
    3b6a:	db57      	blt.n	3c1c <rint+0xd0>
    3b6c:	4b45      	ldr	r3, [pc, #276]	; (3c84 <rint+0x138>)
    3b6e:	0004      	movs	r4, r0
    3b70:	4133      	asrs	r3, r6
    3b72:	001f      	movs	r7, r3
    3b74:	400f      	ands	r7, r1
    3b76:	4307      	orrs	r7, r0
    3b78:	000d      	movs	r5, r1
    3b7a:	2f00      	cmp	r7, #0
    3b7c:	d024      	beq.n	3bc8 <rint+0x7c>
    3b7e:	085b      	lsrs	r3, r3, #1
    3b80:	001c      	movs	r4, r3
    3b82:	400c      	ands	r4, r1
    3b84:	4320      	orrs	r0, r4
    3b86:	2700      	movs	r7, #0
    3b88:	2800      	cmp	r0, #0
    3b8a:	d007      	beq.n	3b9c <rint+0x50>
    3b8c:	2e13      	cmp	r6, #19
    3b8e:	d100      	bne.n	3b92 <rint+0x46>
    3b90:	e072      	b.n	3c78 <rint+0x12c>
    3b92:	2280      	movs	r2, #128	; 0x80
    3b94:	02d2      	lsls	r2, r2, #11
    3b96:	4132      	asrs	r2, r6
    3b98:	4399      	bics	r1, r3
    3b9a:	430a      	orrs	r2, r1
    3b9c:	4643      	mov	r3, r8
    3b9e:	00de      	lsls	r6, r3, #3
    3ba0:	4b39      	ldr	r3, [pc, #228]	; (3c88 <rint+0x13c>)
    3ba2:	0011      	movs	r1, r2
    3ba4:	199e      	adds	r6, r3, r6
    3ba6:	6834      	ldr	r4, [r6, #0]
    3ba8:	6875      	ldr	r5, [r6, #4]
    3baa:	0038      	movs	r0, r7
    3bac:	0022      	movs	r2, r4
    3bae:	002b      	movs	r3, r5
    3bb0:	f000 fc8c 	bl	44cc <__aeabi_dadd>
    3bb4:	9000      	str	r0, [sp, #0]
    3bb6:	9101      	str	r1, [sp, #4]
    3bb8:	9800      	ldr	r0, [sp, #0]
    3bba:	9901      	ldr	r1, [sp, #4]
    3bbc:	0022      	movs	r2, r4
    3bbe:	002b      	movs	r3, r5
    3bc0:	f001 fe4e 	bl	5860 <__aeabi_dsub>
    3bc4:	0004      	movs	r4, r0
    3bc6:	000d      	movs	r5, r1
    3bc8:	0020      	movs	r0, r4
    3bca:	0029      	movs	r1, r5
    3bcc:	b002      	add	sp, #8
    3bce:	bc04      	pop	{r2}
    3bd0:	4690      	mov	r8, r2
    3bd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3bd4:	2e33      	cmp	r6, #51	; 0x33
    3bd6:	dd0c      	ble.n	3bf2 <rint+0xa6>
    3bd8:	2380      	movs	r3, #128	; 0x80
    3bda:	0004      	movs	r4, r0
    3bdc:	000d      	movs	r5, r1
    3bde:	00db      	lsls	r3, r3, #3
    3be0:	429e      	cmp	r6, r3
    3be2:	d1f1      	bne.n	3bc8 <rint+0x7c>
    3be4:	0002      	movs	r2, r0
    3be6:	000b      	movs	r3, r1
    3be8:	f000 fc70 	bl	44cc <__aeabi_dadd>
    3bec:	0004      	movs	r4, r0
    3bee:	000d      	movs	r5, r1
    3bf0:	e7ea      	b.n	3bc8 <rint+0x7c>
    3bf2:	4c26      	ldr	r4, [pc, #152]	; (3c8c <rint+0x140>)
    3bf4:	000d      	movs	r5, r1
    3bf6:	46a4      	mov	ip, r4
    3bf8:	2401      	movs	r4, #1
    3bfa:	4463      	add	r3, ip
    3bfc:	4264      	negs	r4, r4
    3bfe:	40dc      	lsrs	r4, r3
    3c00:	46a4      	mov	ip, r4
    3c02:	4661      	mov	r1, ip
    3c04:	0004      	movs	r4, r0
    3c06:	4201      	tst	r1, r0
    3c08:	d0de      	beq.n	3bc8 <rint+0x7c>
    3c0a:	0849      	lsrs	r1, r1, #1
    3c0c:	4201      	tst	r1, r0
    3c0e:	d0c5      	beq.n	3b9c <rint+0x50>
    3c10:	2780      	movs	r7, #128	; 0x80
    3c12:	05ff      	lsls	r7, r7, #23
    3c14:	411f      	asrs	r7, r3
    3c16:	4388      	bics	r0, r1
    3c18:	4307      	orrs	r7, r0
    3c1a:	e7bf      	b.n	3b9c <rint+0x50>
    3c1c:	004b      	lsls	r3, r1, #1
    3c1e:	085b      	lsrs	r3, r3, #1
    3c20:	4303      	orrs	r3, r0
    3c22:	0004      	movs	r4, r0
    3c24:	000d      	movs	r5, r1
    3c26:	2b00      	cmp	r3, #0
    3c28:	d0ce      	beq.n	3bc8 <rint+0x7c>
    3c2a:	030b      	lsls	r3, r1, #12
    3c2c:	0b1b      	lsrs	r3, r3, #12
    3c2e:	4303      	orrs	r3, r0
    3c30:	425a      	negs	r2, r3
    3c32:	4313      	orrs	r3, r2
    3c34:	2280      	movs	r2, #128	; 0x80
    3c36:	0b1b      	lsrs	r3, r3, #12
    3c38:	0312      	lsls	r2, r2, #12
    3c3a:	4013      	ands	r3, r2
    3c3c:	0c4a      	lsrs	r2, r1, #17
    3c3e:	0452      	lsls	r2, r2, #17
    3c40:	4313      	orrs	r3, r2
    3c42:	0019      	movs	r1, r3
    3c44:	4643      	mov	r3, r8
    3c46:	4a10      	ldr	r2, [pc, #64]	; (3c88 <rint+0x13c>)
    3c48:	00db      	lsls	r3, r3, #3
    3c4a:	18d3      	adds	r3, r2, r3
    3c4c:	681c      	ldr	r4, [r3, #0]
    3c4e:	685d      	ldr	r5, [r3, #4]
    3c50:	0022      	movs	r2, r4
    3c52:	002b      	movs	r3, r5
    3c54:	f000 fc3a 	bl	44cc <__aeabi_dadd>
    3c58:	9000      	str	r0, [sp, #0]
    3c5a:	9101      	str	r1, [sp, #4]
    3c5c:	9800      	ldr	r0, [sp, #0]
    3c5e:	9901      	ldr	r1, [sp, #4]
    3c60:	0022      	movs	r2, r4
    3c62:	002b      	movs	r3, r5
    3c64:	f001 fdfc 	bl	5860 <__aeabi_dsub>
    3c68:	4642      	mov	r2, r8
    3c6a:	004b      	lsls	r3, r1, #1
    3c6c:	085b      	lsrs	r3, r3, #1
    3c6e:	07d6      	lsls	r6, r2, #31
    3c70:	4333      	orrs	r3, r6
    3c72:	0004      	movs	r4, r0
    3c74:	001d      	movs	r5, r3
    3c76:	e7a7      	b.n	3bc8 <rint+0x7c>
    3c78:	2780      	movs	r7, #128	; 0x80
    3c7a:	063f      	lsls	r7, r7, #24
    3c7c:	e789      	b.n	3b92 <rint+0x46>
    3c7e:	46c0      	nop			; (mov r8, r8)
    3c80:	fffffc01 	.word	0xfffffc01
    3c84:	000fffff 	.word	0x000fffff
    3c88:	00006740 	.word	0x00006740
    3c8c:	fffffbed 	.word	0xfffffbed

00003c90 <scalbn>:
    3c90:	004b      	lsls	r3, r1, #1
    3c92:	b570      	push	{r4, r5, r6, lr}
    3c94:	0d5b      	lsrs	r3, r3, #21
    3c96:	0014      	movs	r4, r2
    3c98:	000a      	movs	r2, r1
    3c9a:	2b00      	cmp	r3, #0
    3c9c:	d11a      	bne.n	3cd4 <scalbn+0x44>
    3c9e:	004b      	lsls	r3, r1, #1
    3ca0:	085b      	lsrs	r3, r3, #1
    3ca2:	4303      	orrs	r3, r0
    3ca4:	d015      	beq.n	3cd2 <scalbn+0x42>
    3ca6:	2200      	movs	r2, #0
    3ca8:	4b22      	ldr	r3, [pc, #136]	; (3d34 <scalbn+0xa4>)
    3caa:	f001 fb5f 	bl	536c <__aeabi_dmul>
    3cae:	4b22      	ldr	r3, [pc, #136]	; (3d38 <scalbn+0xa8>)
    3cb0:	000a      	movs	r2, r1
    3cb2:	429c      	cmp	r4, r3
    3cb4:	db22      	blt.n	3cfc <scalbn+0x6c>
    3cb6:	004b      	lsls	r3, r1, #1
    3cb8:	0d5b      	lsrs	r3, r3, #21
    3cba:	3b36      	subs	r3, #54	; 0x36
    3cbc:	4d1f      	ldr	r5, [pc, #124]	; (3d3c <scalbn+0xac>)
    3cbe:	18e3      	adds	r3, r4, r3
    3cc0:	42ab      	cmp	r3, r5
    3cc2:	dc20      	bgt.n	3d06 <scalbn+0x76>
    3cc4:	2b00      	cmp	r3, #0
    3cc6:	dd0d      	ble.n	3ce4 <scalbn+0x54>
    3cc8:	4c1d      	ldr	r4, [pc, #116]	; (3d40 <scalbn+0xb0>)
    3cca:	051b      	lsls	r3, r3, #20
    3ccc:	4022      	ands	r2, r4
    3cce:	431a      	orrs	r2, r3
    3cd0:	0011      	movs	r1, r2
    3cd2:	bd70      	pop	{r4, r5, r6, pc}
    3cd4:	4d1b      	ldr	r5, [pc, #108]	; (3d44 <scalbn+0xb4>)
    3cd6:	42ab      	cmp	r3, r5
    3cd8:	d1f0      	bne.n	3cbc <scalbn+0x2c>
    3cda:	0002      	movs	r2, r0
    3cdc:	000b      	movs	r3, r1
    3cde:	f000 fbf5 	bl	44cc <__aeabi_dadd>
    3ce2:	e7f6      	b.n	3cd2 <scalbn+0x42>
    3ce4:	001d      	movs	r5, r3
    3ce6:	3535      	adds	r5, #53	; 0x35
    3ce8:	da18      	bge.n	3d1c <scalbn+0x8c>
    3cea:	4b17      	ldr	r3, [pc, #92]	; (3d48 <scalbn+0xb8>)
    3cec:	0002      	movs	r2, r0
    3cee:	429c      	cmp	r4, r3
    3cf0:	dc0a      	bgt.n	3d08 <scalbn+0x78>
    3cf2:	000b      	movs	r3, r1
    3cf4:	4815      	ldr	r0, [pc, #84]	; (3d4c <scalbn+0xbc>)
    3cf6:	4916      	ldr	r1, [pc, #88]	; (3d50 <scalbn+0xc0>)
    3cf8:	f000 f832 	bl	3d60 <copysign>
    3cfc:	4a13      	ldr	r2, [pc, #76]	; (3d4c <scalbn+0xbc>)
    3cfe:	4b14      	ldr	r3, [pc, #80]	; (3d50 <scalbn+0xc0>)
    3d00:	f001 fb34 	bl	536c <__aeabi_dmul>
    3d04:	e7e5      	b.n	3cd2 <scalbn+0x42>
    3d06:	0002      	movs	r2, r0
    3d08:	000b      	movs	r3, r1
    3d0a:	4812      	ldr	r0, [pc, #72]	; (3d54 <scalbn+0xc4>)
    3d0c:	4912      	ldr	r1, [pc, #72]	; (3d58 <scalbn+0xc8>)
    3d0e:	f000 f827 	bl	3d60 <copysign>
    3d12:	4a10      	ldr	r2, [pc, #64]	; (3d54 <scalbn+0xc4>)
    3d14:	4b10      	ldr	r3, [pc, #64]	; (3d58 <scalbn+0xc8>)
    3d16:	f001 fb29 	bl	536c <__aeabi_dmul>
    3d1a:	e7da      	b.n	3cd2 <scalbn+0x42>
    3d1c:	4c08      	ldr	r4, [pc, #32]	; (3d40 <scalbn+0xb0>)
    3d1e:	3336      	adds	r3, #54	; 0x36
    3d20:	4022      	ands	r2, r4
    3d22:	051b      	lsls	r3, r3, #20
    3d24:	4313      	orrs	r3, r2
    3d26:	0019      	movs	r1, r3
    3d28:	2200      	movs	r2, #0
    3d2a:	4b0c      	ldr	r3, [pc, #48]	; (3d5c <scalbn+0xcc>)
    3d2c:	f001 fb1e 	bl	536c <__aeabi_dmul>
    3d30:	e7cf      	b.n	3cd2 <scalbn+0x42>
    3d32:	46c0      	nop			; (mov r8, r8)
    3d34:	43500000 	.word	0x43500000
    3d38:	ffff3cb0 	.word	0xffff3cb0
    3d3c:	000007fe 	.word	0x000007fe
    3d40:	800fffff 	.word	0x800fffff
    3d44:	000007ff 	.word	0x000007ff
    3d48:	0000c350 	.word	0x0000c350
    3d4c:	c2f8f359 	.word	0xc2f8f359
    3d50:	01a56e1f 	.word	0x01a56e1f
    3d54:	8800759c 	.word	0x8800759c
    3d58:	7e37e43c 	.word	0x7e37e43c
    3d5c:	3c900000 	.word	0x3c900000

00003d60 <copysign>:
    3d60:	b530      	push	{r4, r5, lr}
    3d62:	004a      	lsls	r2, r1, #1
    3d64:	0fdb      	lsrs	r3, r3, #31
    3d66:	07db      	lsls	r3, r3, #31
    3d68:	0852      	lsrs	r2, r2, #1
    3d6a:	431a      	orrs	r2, r3
    3d6c:	0011      	movs	r1, r2
    3d6e:	bd30      	pop	{r4, r5, pc}

00003d70 <__gnu_thumb1_case_uqi>:
    3d70:	b402      	push	{r1}
    3d72:	4671      	mov	r1, lr
    3d74:	0849      	lsrs	r1, r1, #1
    3d76:	0049      	lsls	r1, r1, #1
    3d78:	5c09      	ldrb	r1, [r1, r0]
    3d7a:	0049      	lsls	r1, r1, #1
    3d7c:	448e      	add	lr, r1
    3d7e:	bc02      	pop	{r1}
    3d80:	4770      	bx	lr
    3d82:	46c0      	nop			; (mov r8, r8)

00003d84 <__aeabi_cdrcmple>:
    3d84:	4684      	mov	ip, r0
    3d86:	1c10      	adds	r0, r2, #0
    3d88:	4662      	mov	r2, ip
    3d8a:	468c      	mov	ip, r1
    3d8c:	1c19      	adds	r1, r3, #0
    3d8e:	4663      	mov	r3, ip
    3d90:	e000      	b.n	3d94 <__aeabi_cdcmpeq>
    3d92:	46c0      	nop			; (mov r8, r8)

00003d94 <__aeabi_cdcmpeq>:
    3d94:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    3d96:	f001 fa7f 	bl	5298 <__ledf2>
    3d9a:	2800      	cmp	r0, #0
    3d9c:	d401      	bmi.n	3da2 <__aeabi_cdcmpeq+0xe>
    3d9e:	2100      	movs	r1, #0
    3da0:	42c8      	cmn	r0, r1
    3da2:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00003da4 <__aeabi_dcmpeq>:
    3da4:	b510      	push	{r4, lr}
    3da6:	f001 f9d3 	bl	5150 <__eqdf2>
    3daa:	4240      	negs	r0, r0
    3dac:	3001      	adds	r0, #1
    3dae:	bd10      	pop	{r4, pc}

00003db0 <__aeabi_dcmplt>:
    3db0:	b510      	push	{r4, lr}
    3db2:	f001 fa71 	bl	5298 <__ledf2>
    3db6:	2800      	cmp	r0, #0
    3db8:	db01      	blt.n	3dbe <__aeabi_dcmplt+0xe>
    3dba:	2000      	movs	r0, #0
    3dbc:	bd10      	pop	{r4, pc}
    3dbe:	2001      	movs	r0, #1
    3dc0:	bd10      	pop	{r4, pc}
    3dc2:	46c0      	nop			; (mov r8, r8)

00003dc4 <__aeabi_dcmple>:
    3dc4:	b510      	push	{r4, lr}
    3dc6:	f001 fa67 	bl	5298 <__ledf2>
    3dca:	2800      	cmp	r0, #0
    3dcc:	dd01      	ble.n	3dd2 <__aeabi_dcmple+0xe>
    3dce:	2000      	movs	r0, #0
    3dd0:	bd10      	pop	{r4, pc}
    3dd2:	2001      	movs	r0, #1
    3dd4:	bd10      	pop	{r4, pc}
    3dd6:	46c0      	nop			; (mov r8, r8)

00003dd8 <__aeabi_dcmpgt>:
    3dd8:	b510      	push	{r4, lr}
    3dda:	f001 f9f9 	bl	51d0 <__gedf2>
    3dde:	2800      	cmp	r0, #0
    3de0:	dc01      	bgt.n	3de6 <__aeabi_dcmpgt+0xe>
    3de2:	2000      	movs	r0, #0
    3de4:	bd10      	pop	{r4, pc}
    3de6:	2001      	movs	r0, #1
    3de8:	bd10      	pop	{r4, pc}
    3dea:	46c0      	nop			; (mov r8, r8)

00003dec <__aeabi_dcmpge>:
    3dec:	b510      	push	{r4, lr}
    3dee:	f001 f9ef 	bl	51d0 <__gedf2>
    3df2:	2800      	cmp	r0, #0
    3df4:	da01      	bge.n	3dfa <__aeabi_dcmpge+0xe>
    3df6:	2000      	movs	r0, #0
    3df8:	bd10      	pop	{r4, pc}
    3dfa:	2001      	movs	r0, #1
    3dfc:	bd10      	pop	{r4, pc}
    3dfe:	46c0      	nop			; (mov r8, r8)

00003e00 <__aeabi_lmul>:
    3e00:	b5f0      	push	{r4, r5, r6, r7, lr}
    3e02:	464f      	mov	r7, r9
    3e04:	4646      	mov	r6, r8
    3e06:	b4c0      	push	{r6, r7}
    3e08:	0416      	lsls	r6, r2, #16
    3e0a:	0c36      	lsrs	r6, r6, #16
    3e0c:	4699      	mov	r9, r3
    3e0e:	0033      	movs	r3, r6
    3e10:	0405      	lsls	r5, r0, #16
    3e12:	0c2c      	lsrs	r4, r5, #16
    3e14:	0c07      	lsrs	r7, r0, #16
    3e16:	0c15      	lsrs	r5, r2, #16
    3e18:	4363      	muls	r3, r4
    3e1a:	437e      	muls	r6, r7
    3e1c:	436f      	muls	r7, r5
    3e1e:	4365      	muls	r5, r4
    3e20:	0c1c      	lsrs	r4, r3, #16
    3e22:	19ad      	adds	r5, r5, r6
    3e24:	1964      	adds	r4, r4, r5
    3e26:	469c      	mov	ip, r3
    3e28:	42a6      	cmp	r6, r4
    3e2a:	d903      	bls.n	3e34 <__aeabi_lmul+0x34>
    3e2c:	2380      	movs	r3, #128	; 0x80
    3e2e:	025b      	lsls	r3, r3, #9
    3e30:	4698      	mov	r8, r3
    3e32:	4447      	add	r7, r8
    3e34:	4663      	mov	r3, ip
    3e36:	0c25      	lsrs	r5, r4, #16
    3e38:	19ef      	adds	r7, r5, r7
    3e3a:	041d      	lsls	r5, r3, #16
    3e3c:	464b      	mov	r3, r9
    3e3e:	434a      	muls	r2, r1
    3e40:	4343      	muls	r3, r0
    3e42:	0c2d      	lsrs	r5, r5, #16
    3e44:	0424      	lsls	r4, r4, #16
    3e46:	1964      	adds	r4, r4, r5
    3e48:	1899      	adds	r1, r3, r2
    3e4a:	19c9      	adds	r1, r1, r7
    3e4c:	0020      	movs	r0, r4
    3e4e:	bc0c      	pop	{r2, r3}
    3e50:	4690      	mov	r8, r2
    3e52:	4699      	mov	r9, r3
    3e54:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3e56:	46c0      	nop			; (mov r8, r8)

00003e58 <__aeabi_f2uiz>:
    3e58:	219e      	movs	r1, #158	; 0x9e
    3e5a:	b510      	push	{r4, lr}
    3e5c:	05c9      	lsls	r1, r1, #23
    3e5e:	1c04      	adds	r4, r0, #0
    3e60:	f002 fabe 	bl	63e0 <__aeabi_fcmpge>
    3e64:	2800      	cmp	r0, #0
    3e66:	d103      	bne.n	3e70 <__aeabi_f2uiz+0x18>
    3e68:	1c20      	adds	r0, r4, #0
    3e6a:	f000 fac5 	bl	43f8 <__aeabi_f2iz>
    3e6e:	bd10      	pop	{r4, pc}
    3e70:	219e      	movs	r1, #158	; 0x9e
    3e72:	1c20      	adds	r0, r4, #0
    3e74:	05c9      	lsls	r1, r1, #23
    3e76:	f000 f939 	bl	40ec <__aeabi_fsub>
    3e7a:	f000 fabd 	bl	43f8 <__aeabi_f2iz>
    3e7e:	2380      	movs	r3, #128	; 0x80
    3e80:	061b      	lsls	r3, r3, #24
    3e82:	469c      	mov	ip, r3
    3e84:	4460      	add	r0, ip
    3e86:	e7f2      	b.n	3e6e <__aeabi_f2uiz+0x16>

00003e88 <__aeabi_d2uiz>:
    3e88:	b570      	push	{r4, r5, r6, lr}
    3e8a:	2200      	movs	r2, #0
    3e8c:	4b0c      	ldr	r3, [pc, #48]	; (3ec0 <__aeabi_d2uiz+0x38>)
    3e8e:	0004      	movs	r4, r0
    3e90:	000d      	movs	r5, r1
    3e92:	f7ff ffab 	bl	3dec <__aeabi_dcmpge>
    3e96:	2800      	cmp	r0, #0
    3e98:	d104      	bne.n	3ea4 <__aeabi_d2uiz+0x1c>
    3e9a:	0020      	movs	r0, r4
    3e9c:	0029      	movs	r1, r5
    3e9e:	f002 f853 	bl	5f48 <__aeabi_d2iz>
    3ea2:	bd70      	pop	{r4, r5, r6, pc}
    3ea4:	4b06      	ldr	r3, [pc, #24]	; (3ec0 <__aeabi_d2uiz+0x38>)
    3ea6:	2200      	movs	r2, #0
    3ea8:	0020      	movs	r0, r4
    3eaa:	0029      	movs	r1, r5
    3eac:	f001 fcd8 	bl	5860 <__aeabi_dsub>
    3eb0:	f002 f84a 	bl	5f48 <__aeabi_d2iz>
    3eb4:	2380      	movs	r3, #128	; 0x80
    3eb6:	061b      	lsls	r3, r3, #24
    3eb8:	469c      	mov	ip, r3
    3eba:	4460      	add	r0, ip
    3ebc:	e7f1      	b.n	3ea2 <__aeabi_d2uiz+0x1a>
    3ebe:	46c0      	nop			; (mov r8, r8)
    3ec0:	41e00000 	.word	0x41e00000

00003ec4 <__aeabi_fmul>:
    3ec4:	b5f0      	push	{r4, r5, r6, r7, lr}
    3ec6:	4657      	mov	r7, sl
    3ec8:	464e      	mov	r6, r9
    3eca:	4645      	mov	r5, r8
    3ecc:	0043      	lsls	r3, r0, #1
    3ece:	b4e0      	push	{r5, r6, r7}
    3ed0:	0246      	lsls	r6, r0, #9
    3ed2:	4688      	mov	r8, r1
    3ed4:	0a76      	lsrs	r6, r6, #9
    3ed6:	0e1f      	lsrs	r7, r3, #24
    3ed8:	0fc4      	lsrs	r4, r0, #31
    3eda:	2f00      	cmp	r7, #0
    3edc:	d047      	beq.n	3f6e <__aeabi_fmul+0xaa>
    3ede:	2fff      	cmp	r7, #255	; 0xff
    3ee0:	d025      	beq.n	3f2e <__aeabi_fmul+0x6a>
    3ee2:	2300      	movs	r3, #0
    3ee4:	2580      	movs	r5, #128	; 0x80
    3ee6:	469a      	mov	sl, r3
    3ee8:	4699      	mov	r9, r3
    3eea:	00f6      	lsls	r6, r6, #3
    3eec:	04ed      	lsls	r5, r5, #19
    3eee:	432e      	orrs	r6, r5
    3ef0:	3f7f      	subs	r7, #127	; 0x7f
    3ef2:	4643      	mov	r3, r8
    3ef4:	4642      	mov	r2, r8
    3ef6:	025d      	lsls	r5, r3, #9
    3ef8:	0fd2      	lsrs	r2, r2, #31
    3efa:	005b      	lsls	r3, r3, #1
    3efc:	0a6d      	lsrs	r5, r5, #9
    3efe:	0e1b      	lsrs	r3, r3, #24
    3f00:	4690      	mov	r8, r2
    3f02:	d040      	beq.n	3f86 <__aeabi_fmul+0xc2>
    3f04:	2bff      	cmp	r3, #255	; 0xff
    3f06:	d039      	beq.n	3f7c <__aeabi_fmul+0xb8>
    3f08:	2280      	movs	r2, #128	; 0x80
    3f0a:	2000      	movs	r0, #0
    3f0c:	00ed      	lsls	r5, r5, #3
    3f0e:	04d2      	lsls	r2, r2, #19
    3f10:	4315      	orrs	r5, r2
    3f12:	3b7f      	subs	r3, #127	; 0x7f
    3f14:	18fb      	adds	r3, r7, r3
    3f16:	4642      	mov	r2, r8
    3f18:	4657      	mov	r7, sl
    3f1a:	1c59      	adds	r1, r3, #1
    3f1c:	4062      	eors	r2, r4
    3f1e:	468c      	mov	ip, r1
    3f20:	4307      	orrs	r7, r0
    3f22:	2f0f      	cmp	r7, #15
    3f24:	d85c      	bhi.n	3fe0 <__aeabi_fmul+0x11c>
    3f26:	496f      	ldr	r1, [pc, #444]	; (40e4 <__aeabi_fmul+0x220>)
    3f28:	00bf      	lsls	r7, r7, #2
    3f2a:	59c9      	ldr	r1, [r1, r7]
    3f2c:	468f      	mov	pc, r1
    3f2e:	2e00      	cmp	r6, #0
    3f30:	d145      	bne.n	3fbe <__aeabi_fmul+0xfa>
    3f32:	2308      	movs	r3, #8
    3f34:	469a      	mov	sl, r3
    3f36:	3b06      	subs	r3, #6
    3f38:	4699      	mov	r9, r3
    3f3a:	e7da      	b.n	3ef2 <__aeabi_fmul+0x2e>
    3f3c:	4642      	mov	r2, r8
    3f3e:	2802      	cmp	r0, #2
    3f40:	d02d      	beq.n	3f9e <__aeabi_fmul+0xda>
    3f42:	2803      	cmp	r0, #3
    3f44:	d100      	bne.n	3f48 <__aeabi_fmul+0x84>
    3f46:	e0c3      	b.n	40d0 <__aeabi_fmul+0x20c>
    3f48:	2801      	cmp	r0, #1
    3f4a:	d000      	beq.n	3f4e <__aeabi_fmul+0x8a>
    3f4c:	e0a2      	b.n	4094 <__aeabi_fmul+0x1d0>
    3f4e:	2500      	movs	r5, #0
    3f50:	2600      	movs	r6, #0
    3f52:	4002      	ands	r2, r0
    3f54:	b2d4      	uxtb	r4, r2
    3f56:	0276      	lsls	r6, r6, #9
    3f58:	05ed      	lsls	r5, r5, #23
    3f5a:	0a76      	lsrs	r6, r6, #9
    3f5c:	432e      	orrs	r6, r5
    3f5e:	07e4      	lsls	r4, r4, #31
    3f60:	4326      	orrs	r6, r4
    3f62:	0030      	movs	r0, r6
    3f64:	bc1c      	pop	{r2, r3, r4}
    3f66:	4690      	mov	r8, r2
    3f68:	4699      	mov	r9, r3
    3f6a:	46a2      	mov	sl, r4
    3f6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3f6e:	2e00      	cmp	r6, #0
    3f70:	d11a      	bne.n	3fa8 <__aeabi_fmul+0xe4>
    3f72:	2304      	movs	r3, #4
    3f74:	469a      	mov	sl, r3
    3f76:	3b03      	subs	r3, #3
    3f78:	4699      	mov	r9, r3
    3f7a:	e7ba      	b.n	3ef2 <__aeabi_fmul+0x2e>
    3f7c:	002a      	movs	r2, r5
    3f7e:	1e51      	subs	r1, r2, #1
    3f80:	418a      	sbcs	r2, r1
    3f82:	1c90      	adds	r0, r2, #2
    3f84:	e7c6      	b.n	3f14 <__aeabi_fmul+0x50>
    3f86:	2001      	movs	r0, #1
    3f88:	2d00      	cmp	r5, #0
    3f8a:	d0c3      	beq.n	3f14 <__aeabi_fmul+0x50>
    3f8c:	0028      	movs	r0, r5
    3f8e:	f002 fa31 	bl	63f4 <__clzsi2>
    3f92:	1f43      	subs	r3, r0, #5
    3f94:	3076      	adds	r0, #118	; 0x76
    3f96:	409d      	lsls	r5, r3
    3f98:	4243      	negs	r3, r0
    3f9a:	2000      	movs	r0, #0
    3f9c:	e7ba      	b.n	3f14 <__aeabi_fmul+0x50>
    3f9e:	2401      	movs	r4, #1
    3fa0:	25ff      	movs	r5, #255	; 0xff
    3fa2:	4014      	ands	r4, r2
    3fa4:	2600      	movs	r6, #0
    3fa6:	e7d6      	b.n	3f56 <__aeabi_fmul+0x92>
    3fa8:	0030      	movs	r0, r6
    3faa:	f002 fa23 	bl	63f4 <__clzsi2>
    3fae:	1f43      	subs	r3, r0, #5
    3fb0:	409e      	lsls	r6, r3
    3fb2:	2300      	movs	r3, #0
    3fb4:	3076      	adds	r0, #118	; 0x76
    3fb6:	4247      	negs	r7, r0
    3fb8:	469a      	mov	sl, r3
    3fba:	4699      	mov	r9, r3
    3fbc:	e799      	b.n	3ef2 <__aeabi_fmul+0x2e>
    3fbe:	230c      	movs	r3, #12
    3fc0:	469a      	mov	sl, r3
    3fc2:	3b09      	subs	r3, #9
    3fc4:	4699      	mov	r9, r3
    3fc6:	e794      	b.n	3ef2 <__aeabi_fmul+0x2e>
    3fc8:	2680      	movs	r6, #128	; 0x80
    3fca:	2400      	movs	r4, #0
    3fcc:	03f6      	lsls	r6, r6, #15
    3fce:	25ff      	movs	r5, #255	; 0xff
    3fd0:	e7c1      	b.n	3f56 <__aeabi_fmul+0x92>
    3fd2:	0035      	movs	r5, r6
    3fd4:	4648      	mov	r0, r9
    3fd6:	e7b2      	b.n	3f3e <__aeabi_fmul+0x7a>
    3fd8:	0035      	movs	r5, r6
    3fda:	0022      	movs	r2, r4
    3fdc:	4648      	mov	r0, r9
    3fde:	e7ae      	b.n	3f3e <__aeabi_fmul+0x7a>
    3fe0:	0429      	lsls	r1, r5, #16
    3fe2:	0c09      	lsrs	r1, r1, #16
    3fe4:	0008      	movs	r0, r1
    3fe6:	0c37      	lsrs	r7, r6, #16
    3fe8:	0436      	lsls	r6, r6, #16
    3fea:	0c36      	lsrs	r6, r6, #16
    3fec:	0c2c      	lsrs	r4, r5, #16
    3fee:	4379      	muls	r1, r7
    3ff0:	4370      	muls	r0, r6
    3ff2:	4367      	muls	r7, r4
    3ff4:	4374      	muls	r4, r6
    3ff6:	0c06      	lsrs	r6, r0, #16
    3ff8:	1864      	adds	r4, r4, r1
    3ffa:	1936      	adds	r6, r6, r4
    3ffc:	42b1      	cmp	r1, r6
    3ffe:	d903      	bls.n	4008 <__aeabi_fmul+0x144>
    4000:	2180      	movs	r1, #128	; 0x80
    4002:	0249      	lsls	r1, r1, #9
    4004:	4688      	mov	r8, r1
    4006:	4447      	add	r7, r8
    4008:	0400      	lsls	r0, r0, #16
    400a:	0c00      	lsrs	r0, r0, #16
    400c:	0431      	lsls	r1, r6, #16
    400e:	1809      	adds	r1, r1, r0
    4010:	018d      	lsls	r5, r1, #6
    4012:	1e68      	subs	r0, r5, #1
    4014:	4185      	sbcs	r5, r0
    4016:	0e89      	lsrs	r1, r1, #26
    4018:	4329      	orrs	r1, r5
    401a:	0c35      	lsrs	r5, r6, #16
    401c:	19ed      	adds	r5, r5, r7
    401e:	01ad      	lsls	r5, r5, #6
    4020:	430d      	orrs	r5, r1
    4022:	0129      	lsls	r1, r5, #4
    4024:	d504      	bpl.n	4030 <__aeabi_fmul+0x16c>
    4026:	2301      	movs	r3, #1
    4028:	0869      	lsrs	r1, r5, #1
    402a:	401d      	ands	r5, r3
    402c:	4663      	mov	r3, ip
    402e:	430d      	orrs	r5, r1
    4030:	0019      	movs	r1, r3
    4032:	317f      	adds	r1, #127	; 0x7f
    4034:	2900      	cmp	r1, #0
    4036:	dd25      	ble.n	4084 <__aeabi_fmul+0x1c0>
    4038:	0768      	lsls	r0, r5, #29
    403a:	d004      	beq.n	4046 <__aeabi_fmul+0x182>
    403c:	200f      	movs	r0, #15
    403e:	4028      	ands	r0, r5
    4040:	2804      	cmp	r0, #4
    4042:	d000      	beq.n	4046 <__aeabi_fmul+0x182>
    4044:	3504      	adds	r5, #4
    4046:	0128      	lsls	r0, r5, #4
    4048:	d503      	bpl.n	4052 <__aeabi_fmul+0x18e>
    404a:	4927      	ldr	r1, [pc, #156]	; (40e8 <__aeabi_fmul+0x224>)
    404c:	3380      	adds	r3, #128	; 0x80
    404e:	400d      	ands	r5, r1
    4050:	0019      	movs	r1, r3
    4052:	29fe      	cmp	r1, #254	; 0xfe
    4054:	dca3      	bgt.n	3f9e <__aeabi_fmul+0xda>
    4056:	2401      	movs	r4, #1
    4058:	01ad      	lsls	r5, r5, #6
    405a:	0a6e      	lsrs	r6, r5, #9
    405c:	4014      	ands	r4, r2
    405e:	b2cd      	uxtb	r5, r1
    4060:	e779      	b.n	3f56 <__aeabi_fmul+0x92>
    4062:	2080      	movs	r0, #128	; 0x80
    4064:	03c0      	lsls	r0, r0, #15
    4066:	4206      	tst	r6, r0
    4068:	d007      	beq.n	407a <__aeabi_fmul+0x1b6>
    406a:	4205      	tst	r5, r0
    406c:	d105      	bne.n	407a <__aeabi_fmul+0x1b6>
    406e:	4328      	orrs	r0, r5
    4070:	0246      	lsls	r6, r0, #9
    4072:	0a76      	lsrs	r6, r6, #9
    4074:	4644      	mov	r4, r8
    4076:	25ff      	movs	r5, #255	; 0xff
    4078:	e76d      	b.n	3f56 <__aeabi_fmul+0x92>
    407a:	4306      	orrs	r6, r0
    407c:	0276      	lsls	r6, r6, #9
    407e:	0a76      	lsrs	r6, r6, #9
    4080:	25ff      	movs	r5, #255	; 0xff
    4082:	e768      	b.n	3f56 <__aeabi_fmul+0x92>
    4084:	2401      	movs	r4, #1
    4086:	1a61      	subs	r1, r4, r1
    4088:	291b      	cmp	r1, #27
    408a:	dd05      	ble.n	4098 <__aeabi_fmul+0x1d4>
    408c:	4014      	ands	r4, r2
    408e:	2500      	movs	r5, #0
    4090:	2600      	movs	r6, #0
    4092:	e760      	b.n	3f56 <__aeabi_fmul+0x92>
    4094:	4663      	mov	r3, ip
    4096:	e7cb      	b.n	4030 <__aeabi_fmul+0x16c>
    4098:	002e      	movs	r6, r5
    409a:	2320      	movs	r3, #32
    409c:	40ce      	lsrs	r6, r1
    409e:	1a59      	subs	r1, r3, r1
    40a0:	408d      	lsls	r5, r1
    40a2:	1e6b      	subs	r3, r5, #1
    40a4:	419d      	sbcs	r5, r3
    40a6:	432e      	orrs	r6, r5
    40a8:	0773      	lsls	r3, r6, #29
    40aa:	d004      	beq.n	40b6 <__aeabi_fmul+0x1f2>
    40ac:	230f      	movs	r3, #15
    40ae:	4033      	ands	r3, r6
    40b0:	2b04      	cmp	r3, #4
    40b2:	d000      	beq.n	40b6 <__aeabi_fmul+0x1f2>
    40b4:	3604      	adds	r6, #4
    40b6:	0173      	lsls	r3, r6, #5
    40b8:	d504      	bpl.n	40c4 <__aeabi_fmul+0x200>
    40ba:	2401      	movs	r4, #1
    40bc:	2501      	movs	r5, #1
    40be:	4014      	ands	r4, r2
    40c0:	2600      	movs	r6, #0
    40c2:	e748      	b.n	3f56 <__aeabi_fmul+0x92>
    40c4:	2401      	movs	r4, #1
    40c6:	01b6      	lsls	r6, r6, #6
    40c8:	0a76      	lsrs	r6, r6, #9
    40ca:	4014      	ands	r4, r2
    40cc:	2500      	movs	r5, #0
    40ce:	e742      	b.n	3f56 <__aeabi_fmul+0x92>
    40d0:	2680      	movs	r6, #128	; 0x80
    40d2:	2401      	movs	r4, #1
    40d4:	03f6      	lsls	r6, r6, #15
    40d6:	432e      	orrs	r6, r5
    40d8:	0276      	lsls	r6, r6, #9
    40da:	0a76      	lsrs	r6, r6, #9
    40dc:	4014      	ands	r4, r2
    40de:	25ff      	movs	r5, #255	; 0xff
    40e0:	e739      	b.n	3f56 <__aeabi_fmul+0x92>
    40e2:	46c0      	nop			; (mov r8, r8)
    40e4:	00006750 	.word	0x00006750
    40e8:	f7ffffff 	.word	0xf7ffffff

000040ec <__aeabi_fsub>:
    40ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    40ee:	024a      	lsls	r2, r1, #9
    40f0:	004e      	lsls	r6, r1, #1
    40f2:	0243      	lsls	r3, r0, #9
    40f4:	0044      	lsls	r4, r0, #1
    40f6:	0e24      	lsrs	r4, r4, #24
    40f8:	0fc5      	lsrs	r5, r0, #31
    40fa:	099b      	lsrs	r3, r3, #6
    40fc:	0e36      	lsrs	r6, r6, #24
    40fe:	0fc9      	lsrs	r1, r1, #31
    4100:	0992      	lsrs	r2, r2, #6
    4102:	2eff      	cmp	r6, #255	; 0xff
    4104:	d100      	bne.n	4108 <__aeabi_fsub+0x1c>
    4106:	e083      	b.n	4210 <__aeabi_fsub+0x124>
    4108:	2001      	movs	r0, #1
    410a:	4041      	eors	r1, r0
    410c:	1ba0      	subs	r0, r4, r6
    410e:	42a9      	cmp	r1, r5
    4110:	d05c      	beq.n	41cc <__aeabi_fsub+0xe0>
    4112:	2800      	cmp	r0, #0
    4114:	dc00      	bgt.n	4118 <__aeabi_fsub+0x2c>
    4116:	e095      	b.n	4244 <__aeabi_fsub+0x158>
    4118:	2e00      	cmp	r6, #0
    411a:	d11c      	bne.n	4156 <__aeabi_fsub+0x6a>
    411c:	2a00      	cmp	r2, #0
    411e:	d000      	beq.n	4122 <__aeabi_fsub+0x36>
    4120:	e081      	b.n	4226 <__aeabi_fsub+0x13a>
    4122:	075a      	lsls	r2, r3, #29
    4124:	d004      	beq.n	4130 <__aeabi_fsub+0x44>
    4126:	220f      	movs	r2, #15
    4128:	401a      	ands	r2, r3
    412a:	2a04      	cmp	r2, #4
    412c:	d000      	beq.n	4130 <__aeabi_fsub+0x44>
    412e:	3304      	adds	r3, #4
    4130:	015a      	lsls	r2, r3, #5
    4132:	d53b      	bpl.n	41ac <__aeabi_fsub+0xc0>
    4134:	3401      	adds	r4, #1
    4136:	2cff      	cmp	r4, #255	; 0xff
    4138:	d100      	bne.n	413c <__aeabi_fsub+0x50>
    413a:	e091      	b.n	4260 <__aeabi_fsub+0x174>
    413c:	2001      	movs	r0, #1
    413e:	019b      	lsls	r3, r3, #6
    4140:	0a5b      	lsrs	r3, r3, #9
    4142:	b2e4      	uxtb	r4, r4
    4144:	4005      	ands	r5, r0
    4146:	025b      	lsls	r3, r3, #9
    4148:	05e4      	lsls	r4, r4, #23
    414a:	0a5b      	lsrs	r3, r3, #9
    414c:	07ed      	lsls	r5, r5, #31
    414e:	4323      	orrs	r3, r4
    4150:	432b      	orrs	r3, r5
    4152:	0018      	movs	r0, r3
    4154:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4156:	2cff      	cmp	r4, #255	; 0xff
    4158:	d0e3      	beq.n	4122 <__aeabi_fsub+0x36>
    415a:	2180      	movs	r1, #128	; 0x80
    415c:	04c9      	lsls	r1, r1, #19
    415e:	430a      	orrs	r2, r1
    4160:	281b      	cmp	r0, #27
    4162:	dd00      	ble.n	4166 <__aeabi_fsub+0x7a>
    4164:	e090      	b.n	4288 <__aeabi_fsub+0x19c>
    4166:	0016      	movs	r6, r2
    4168:	2120      	movs	r1, #32
    416a:	40c6      	lsrs	r6, r0
    416c:	1a08      	subs	r0, r1, r0
    416e:	4082      	lsls	r2, r0
    4170:	1e51      	subs	r1, r2, #1
    4172:	418a      	sbcs	r2, r1
    4174:	4332      	orrs	r2, r6
    4176:	1a9b      	subs	r3, r3, r2
    4178:	015a      	lsls	r2, r3, #5
    417a:	d515      	bpl.n	41a8 <__aeabi_fsub+0xbc>
    417c:	019b      	lsls	r3, r3, #6
    417e:	099e      	lsrs	r6, r3, #6
    4180:	0030      	movs	r0, r6
    4182:	f002 f937 	bl	63f4 <__clzsi2>
    4186:	3805      	subs	r0, #5
    4188:	4086      	lsls	r6, r0
    418a:	4284      	cmp	r4, r0
    418c:	dc6c      	bgt.n	4268 <__aeabi_fsub+0x17c>
    418e:	1b04      	subs	r4, r0, r4
    4190:	0033      	movs	r3, r6
    4192:	2020      	movs	r0, #32
    4194:	3401      	adds	r4, #1
    4196:	40e3      	lsrs	r3, r4
    4198:	1b04      	subs	r4, r0, r4
    419a:	40a6      	lsls	r6, r4
    419c:	1e72      	subs	r2, r6, #1
    419e:	4196      	sbcs	r6, r2
    41a0:	2400      	movs	r4, #0
    41a2:	4333      	orrs	r3, r6
    41a4:	e7bd      	b.n	4122 <__aeabi_fsub+0x36>
    41a6:	000d      	movs	r5, r1
    41a8:	075a      	lsls	r2, r3, #29
    41aa:	d1bc      	bne.n	4126 <__aeabi_fsub+0x3a>
    41ac:	08df      	lsrs	r7, r3, #3
    41ae:	2301      	movs	r3, #1
    41b0:	401d      	ands	r5, r3
    41b2:	2cff      	cmp	r4, #255	; 0xff
    41b4:	d133      	bne.n	421e <__aeabi_fsub+0x132>
    41b6:	2f00      	cmp	r7, #0
    41b8:	d100      	bne.n	41bc <__aeabi_fsub+0xd0>
    41ba:	e090      	b.n	42de <__aeabi_fsub+0x1f2>
    41bc:	2280      	movs	r2, #128	; 0x80
    41be:	03d2      	lsls	r2, r2, #15
    41c0:	0013      	movs	r3, r2
    41c2:	433b      	orrs	r3, r7
    41c4:	025b      	lsls	r3, r3, #9
    41c6:	0a5b      	lsrs	r3, r3, #9
    41c8:	24ff      	movs	r4, #255	; 0xff
    41ca:	e7bc      	b.n	4146 <__aeabi_fsub+0x5a>
    41cc:	2800      	cmp	r0, #0
    41ce:	dd4f      	ble.n	4270 <__aeabi_fsub+0x184>
    41d0:	2e00      	cmp	r6, #0
    41d2:	d02e      	beq.n	4232 <__aeabi_fsub+0x146>
    41d4:	2cff      	cmp	r4, #255	; 0xff
    41d6:	d0a4      	beq.n	4122 <__aeabi_fsub+0x36>
    41d8:	2580      	movs	r5, #128	; 0x80
    41da:	04ed      	lsls	r5, r5, #19
    41dc:	432a      	orrs	r2, r5
    41de:	281b      	cmp	r0, #27
    41e0:	dd00      	ble.n	41e4 <__aeabi_fsub+0xf8>
    41e2:	e097      	b.n	4314 <__aeabi_fsub+0x228>
    41e4:	0016      	movs	r6, r2
    41e6:	2520      	movs	r5, #32
    41e8:	40c6      	lsrs	r6, r0
    41ea:	1a28      	subs	r0, r5, r0
    41ec:	4082      	lsls	r2, r0
    41ee:	1e50      	subs	r0, r2, #1
    41f0:	4182      	sbcs	r2, r0
    41f2:	4332      	orrs	r2, r6
    41f4:	189b      	adds	r3, r3, r2
    41f6:	015a      	lsls	r2, r3, #5
    41f8:	d5d5      	bpl.n	41a6 <__aeabi_fsub+0xba>
    41fa:	3401      	adds	r4, #1
    41fc:	2cff      	cmp	r4, #255	; 0xff
    41fe:	d06d      	beq.n	42dc <__aeabi_fsub+0x1f0>
    4200:	2201      	movs	r2, #1
    4202:	487b      	ldr	r0, [pc, #492]	; (43f0 <__aeabi_fsub+0x304>)
    4204:	401a      	ands	r2, r3
    4206:	085b      	lsrs	r3, r3, #1
    4208:	4003      	ands	r3, r0
    420a:	4313      	orrs	r3, r2
    420c:	000d      	movs	r5, r1
    420e:	e788      	b.n	4122 <__aeabi_fsub+0x36>
    4210:	2a00      	cmp	r2, #0
    4212:	d000      	beq.n	4216 <__aeabi_fsub+0x12a>
    4214:	e77a      	b.n	410c <__aeabi_fsub+0x20>
    4216:	e777      	b.n	4108 <__aeabi_fsub+0x1c>
    4218:	1e03      	subs	r3, r0, #0
    421a:	d1c5      	bne.n	41a8 <__aeabi_fsub+0xbc>
    421c:	2500      	movs	r5, #0
    421e:	027b      	lsls	r3, r7, #9
    4220:	0a5b      	lsrs	r3, r3, #9
    4222:	b2e4      	uxtb	r4, r4
    4224:	e78f      	b.n	4146 <__aeabi_fsub+0x5a>
    4226:	3801      	subs	r0, #1
    4228:	2800      	cmp	r0, #0
    422a:	d0a4      	beq.n	4176 <__aeabi_fsub+0x8a>
    422c:	2cff      	cmp	r4, #255	; 0xff
    422e:	d197      	bne.n	4160 <__aeabi_fsub+0x74>
    4230:	e777      	b.n	4122 <__aeabi_fsub+0x36>
    4232:	2a00      	cmp	r2, #0
    4234:	d100      	bne.n	4238 <__aeabi_fsub+0x14c>
    4236:	e774      	b.n	4122 <__aeabi_fsub+0x36>
    4238:	3801      	subs	r0, #1
    423a:	2800      	cmp	r0, #0
    423c:	d0da      	beq.n	41f4 <__aeabi_fsub+0x108>
    423e:	2cff      	cmp	r4, #255	; 0xff
    4240:	d1cd      	bne.n	41de <__aeabi_fsub+0xf2>
    4242:	e76e      	b.n	4122 <__aeabi_fsub+0x36>
    4244:	2800      	cmp	r0, #0
    4246:	d121      	bne.n	428c <__aeabi_fsub+0x1a0>
    4248:	1c60      	adds	r0, r4, #1
    424a:	b2c0      	uxtb	r0, r0
    424c:	2801      	cmp	r0, #1
    424e:	dd58      	ble.n	4302 <__aeabi_fsub+0x216>
    4250:	2780      	movs	r7, #128	; 0x80
    4252:	1a9e      	subs	r6, r3, r2
    4254:	04ff      	lsls	r7, r7, #19
    4256:	4037      	ands	r7, r6
    4258:	d02f      	beq.n	42ba <__aeabi_fsub+0x1ce>
    425a:	1ad6      	subs	r6, r2, r3
    425c:	000d      	movs	r5, r1
    425e:	e78f      	b.n	4180 <__aeabi_fsub+0x94>
    4260:	2301      	movs	r3, #1
    4262:	401d      	ands	r5, r3
    4264:	2300      	movs	r3, #0
    4266:	e76e      	b.n	4146 <__aeabi_fsub+0x5a>
    4268:	4b62      	ldr	r3, [pc, #392]	; (43f4 <__aeabi_fsub+0x308>)
    426a:	1a24      	subs	r4, r4, r0
    426c:	4033      	ands	r3, r6
    426e:	e758      	b.n	4122 <__aeabi_fsub+0x36>
    4270:	2800      	cmp	r0, #0
    4272:	d151      	bne.n	4318 <__aeabi_fsub+0x22c>
    4274:	1c60      	adds	r0, r4, #1
    4276:	b2c6      	uxtb	r6, r0
    4278:	2e01      	cmp	r6, #1
    427a:	dd33      	ble.n	42e4 <__aeabi_fsub+0x1f8>
    427c:	28ff      	cmp	r0, #255	; 0xff
    427e:	d02d      	beq.n	42dc <__aeabi_fsub+0x1f0>
    4280:	189b      	adds	r3, r3, r2
    4282:	085b      	lsrs	r3, r3, #1
    4284:	0004      	movs	r4, r0
    4286:	e74c      	b.n	4122 <__aeabi_fsub+0x36>
    4288:	2201      	movs	r2, #1
    428a:	e774      	b.n	4176 <__aeabi_fsub+0x8a>
    428c:	2c00      	cmp	r4, #0
    428e:	d01a      	beq.n	42c6 <__aeabi_fsub+0x1da>
    4290:	2eff      	cmp	r6, #255	; 0xff
    4292:	d01f      	beq.n	42d4 <__aeabi_fsub+0x1e8>
    4294:	2480      	movs	r4, #128	; 0x80
    4296:	04e4      	lsls	r4, r4, #19
    4298:	4240      	negs	r0, r0
    429a:	4323      	orrs	r3, r4
    429c:	281b      	cmp	r0, #27
    429e:	dd00      	ble.n	42a2 <__aeabi_fsub+0x1b6>
    42a0:	e096      	b.n	43d0 <__aeabi_fsub+0x2e4>
    42a2:	001d      	movs	r5, r3
    42a4:	2420      	movs	r4, #32
    42a6:	40c5      	lsrs	r5, r0
    42a8:	1a20      	subs	r0, r4, r0
    42aa:	4083      	lsls	r3, r0
    42ac:	1e58      	subs	r0, r3, #1
    42ae:	4183      	sbcs	r3, r0
    42b0:	432b      	orrs	r3, r5
    42b2:	1ad3      	subs	r3, r2, r3
    42b4:	0034      	movs	r4, r6
    42b6:	000d      	movs	r5, r1
    42b8:	e75e      	b.n	4178 <__aeabi_fsub+0x8c>
    42ba:	2e00      	cmp	r6, #0
    42bc:	d000      	beq.n	42c0 <__aeabi_fsub+0x1d4>
    42be:	e75f      	b.n	4180 <__aeabi_fsub+0x94>
    42c0:	2500      	movs	r5, #0
    42c2:	2400      	movs	r4, #0
    42c4:	e7ab      	b.n	421e <__aeabi_fsub+0x132>
    42c6:	2b00      	cmp	r3, #0
    42c8:	d044      	beq.n	4354 <__aeabi_fsub+0x268>
    42ca:	43c0      	mvns	r0, r0
    42cc:	2800      	cmp	r0, #0
    42ce:	d0f0      	beq.n	42b2 <__aeabi_fsub+0x1c6>
    42d0:	2eff      	cmp	r6, #255	; 0xff
    42d2:	d1e3      	bne.n	429c <__aeabi_fsub+0x1b0>
    42d4:	0013      	movs	r3, r2
    42d6:	24ff      	movs	r4, #255	; 0xff
    42d8:	000d      	movs	r5, r1
    42da:	e722      	b.n	4122 <__aeabi_fsub+0x36>
    42dc:	000d      	movs	r5, r1
    42de:	24ff      	movs	r4, #255	; 0xff
    42e0:	2300      	movs	r3, #0
    42e2:	e730      	b.n	4146 <__aeabi_fsub+0x5a>
    42e4:	2c00      	cmp	r4, #0
    42e6:	d15d      	bne.n	43a4 <__aeabi_fsub+0x2b8>
    42e8:	2b00      	cmp	r3, #0
    42ea:	d07d      	beq.n	43e8 <__aeabi_fsub+0x2fc>
    42ec:	2a00      	cmp	r2, #0
    42ee:	d100      	bne.n	42f2 <__aeabi_fsub+0x206>
    42f0:	e717      	b.n	4122 <__aeabi_fsub+0x36>
    42f2:	189b      	adds	r3, r3, r2
    42f4:	015a      	lsls	r2, r3, #5
    42f6:	d400      	bmi.n	42fa <__aeabi_fsub+0x20e>
    42f8:	e756      	b.n	41a8 <__aeabi_fsub+0xbc>
    42fa:	4a3e      	ldr	r2, [pc, #248]	; (43f4 <__aeabi_fsub+0x308>)
    42fc:	0004      	movs	r4, r0
    42fe:	4013      	ands	r3, r2
    4300:	e70f      	b.n	4122 <__aeabi_fsub+0x36>
    4302:	2c00      	cmp	r4, #0
    4304:	d11e      	bne.n	4344 <__aeabi_fsub+0x258>
    4306:	2b00      	cmp	r3, #0
    4308:	d12f      	bne.n	436a <__aeabi_fsub+0x27e>
    430a:	2a00      	cmp	r2, #0
    430c:	d065      	beq.n	43da <__aeabi_fsub+0x2ee>
    430e:	0013      	movs	r3, r2
    4310:	000d      	movs	r5, r1
    4312:	e706      	b.n	4122 <__aeabi_fsub+0x36>
    4314:	2201      	movs	r2, #1
    4316:	e76d      	b.n	41f4 <__aeabi_fsub+0x108>
    4318:	2c00      	cmp	r4, #0
    431a:	d11f      	bne.n	435c <__aeabi_fsub+0x270>
    431c:	2b00      	cmp	r3, #0
    431e:	d059      	beq.n	43d4 <__aeabi_fsub+0x2e8>
    4320:	43c0      	mvns	r0, r0
    4322:	2800      	cmp	r0, #0
    4324:	d00b      	beq.n	433e <__aeabi_fsub+0x252>
    4326:	2eff      	cmp	r6, #255	; 0xff
    4328:	d04f      	beq.n	43ca <__aeabi_fsub+0x2de>
    432a:	281b      	cmp	r0, #27
    432c:	dc5e      	bgt.n	43ec <__aeabi_fsub+0x300>
    432e:	001d      	movs	r5, r3
    4330:	2420      	movs	r4, #32
    4332:	40c5      	lsrs	r5, r0
    4334:	1a20      	subs	r0, r4, r0
    4336:	4083      	lsls	r3, r0
    4338:	1e58      	subs	r0, r3, #1
    433a:	4183      	sbcs	r3, r0
    433c:	432b      	orrs	r3, r5
    433e:	189b      	adds	r3, r3, r2
    4340:	0034      	movs	r4, r6
    4342:	e758      	b.n	41f6 <__aeabi_fsub+0x10a>
    4344:	2b00      	cmp	r3, #0
    4346:	d11c      	bne.n	4382 <__aeabi_fsub+0x296>
    4348:	2a00      	cmp	r2, #0
    434a:	d049      	beq.n	43e0 <__aeabi_fsub+0x2f4>
    434c:	0013      	movs	r3, r2
    434e:	000d      	movs	r5, r1
    4350:	24ff      	movs	r4, #255	; 0xff
    4352:	e6e6      	b.n	4122 <__aeabi_fsub+0x36>
    4354:	0013      	movs	r3, r2
    4356:	0034      	movs	r4, r6
    4358:	000d      	movs	r5, r1
    435a:	e6e2      	b.n	4122 <__aeabi_fsub+0x36>
    435c:	2eff      	cmp	r6, #255	; 0xff
    435e:	d034      	beq.n	43ca <__aeabi_fsub+0x2de>
    4360:	2480      	movs	r4, #128	; 0x80
    4362:	04e4      	lsls	r4, r4, #19
    4364:	4240      	negs	r0, r0
    4366:	4323      	orrs	r3, r4
    4368:	e7df      	b.n	432a <__aeabi_fsub+0x23e>
    436a:	2a00      	cmp	r2, #0
    436c:	d100      	bne.n	4370 <__aeabi_fsub+0x284>
    436e:	e6d8      	b.n	4122 <__aeabi_fsub+0x36>
    4370:	2780      	movs	r7, #128	; 0x80
    4372:	1a98      	subs	r0, r3, r2
    4374:	04ff      	lsls	r7, r7, #19
    4376:	4007      	ands	r7, r0
    4378:	d100      	bne.n	437c <__aeabi_fsub+0x290>
    437a:	e74d      	b.n	4218 <__aeabi_fsub+0x12c>
    437c:	1ad3      	subs	r3, r2, r3
    437e:	000d      	movs	r5, r1
    4380:	e6cf      	b.n	4122 <__aeabi_fsub+0x36>
    4382:	24ff      	movs	r4, #255	; 0xff
    4384:	2a00      	cmp	r2, #0
    4386:	d100      	bne.n	438a <__aeabi_fsub+0x29e>
    4388:	e6cb      	b.n	4122 <__aeabi_fsub+0x36>
    438a:	2080      	movs	r0, #128	; 0x80
    438c:	08db      	lsrs	r3, r3, #3
    438e:	03c0      	lsls	r0, r0, #15
    4390:	4203      	tst	r3, r0
    4392:	d004      	beq.n	439e <__aeabi_fsub+0x2b2>
    4394:	08d2      	lsrs	r2, r2, #3
    4396:	4202      	tst	r2, r0
    4398:	d101      	bne.n	439e <__aeabi_fsub+0x2b2>
    439a:	0013      	movs	r3, r2
    439c:	000d      	movs	r5, r1
    439e:	00db      	lsls	r3, r3, #3
    43a0:	24ff      	movs	r4, #255	; 0xff
    43a2:	e6be      	b.n	4122 <__aeabi_fsub+0x36>
    43a4:	2b00      	cmp	r3, #0
    43a6:	d010      	beq.n	43ca <__aeabi_fsub+0x2de>
    43a8:	24ff      	movs	r4, #255	; 0xff
    43aa:	2a00      	cmp	r2, #0
    43ac:	d100      	bne.n	43b0 <__aeabi_fsub+0x2c4>
    43ae:	e6b8      	b.n	4122 <__aeabi_fsub+0x36>
    43b0:	2080      	movs	r0, #128	; 0x80
    43b2:	08db      	lsrs	r3, r3, #3
    43b4:	03c0      	lsls	r0, r0, #15
    43b6:	4203      	tst	r3, r0
    43b8:	d003      	beq.n	43c2 <__aeabi_fsub+0x2d6>
    43ba:	08d2      	lsrs	r2, r2, #3
    43bc:	4202      	tst	r2, r0
    43be:	d100      	bne.n	43c2 <__aeabi_fsub+0x2d6>
    43c0:	0013      	movs	r3, r2
    43c2:	00db      	lsls	r3, r3, #3
    43c4:	000d      	movs	r5, r1
    43c6:	24ff      	movs	r4, #255	; 0xff
    43c8:	e6ab      	b.n	4122 <__aeabi_fsub+0x36>
    43ca:	0013      	movs	r3, r2
    43cc:	24ff      	movs	r4, #255	; 0xff
    43ce:	e6a8      	b.n	4122 <__aeabi_fsub+0x36>
    43d0:	2301      	movs	r3, #1
    43d2:	e76e      	b.n	42b2 <__aeabi_fsub+0x1c6>
    43d4:	0013      	movs	r3, r2
    43d6:	0034      	movs	r4, r6
    43d8:	e6a3      	b.n	4122 <__aeabi_fsub+0x36>
    43da:	2700      	movs	r7, #0
    43dc:	2500      	movs	r5, #0
    43de:	e71e      	b.n	421e <__aeabi_fsub+0x132>
    43e0:	2780      	movs	r7, #128	; 0x80
    43e2:	2500      	movs	r5, #0
    43e4:	03ff      	lsls	r7, r7, #15
    43e6:	e6e9      	b.n	41bc <__aeabi_fsub+0xd0>
    43e8:	0013      	movs	r3, r2
    43ea:	e69a      	b.n	4122 <__aeabi_fsub+0x36>
    43ec:	2301      	movs	r3, #1
    43ee:	e7a6      	b.n	433e <__aeabi_fsub+0x252>
    43f0:	7dffffff 	.word	0x7dffffff
    43f4:	fbffffff 	.word	0xfbffffff

000043f8 <__aeabi_f2iz>:
    43f8:	0243      	lsls	r3, r0, #9
    43fa:	0a59      	lsrs	r1, r3, #9
    43fc:	0043      	lsls	r3, r0, #1
    43fe:	0fc2      	lsrs	r2, r0, #31
    4400:	0e1b      	lsrs	r3, r3, #24
    4402:	2000      	movs	r0, #0
    4404:	2b7e      	cmp	r3, #126	; 0x7e
    4406:	dd0e      	ble.n	4426 <__aeabi_f2iz+0x2e>
    4408:	2b9d      	cmp	r3, #157	; 0x9d
    440a:	dc0d      	bgt.n	4428 <__aeabi_f2iz+0x30>
    440c:	2080      	movs	r0, #128	; 0x80
    440e:	0400      	lsls	r0, r0, #16
    4410:	4301      	orrs	r1, r0
    4412:	2b95      	cmp	r3, #149	; 0x95
    4414:	dc0b      	bgt.n	442e <__aeabi_f2iz+0x36>
    4416:	2096      	movs	r0, #150	; 0x96
    4418:	1ac3      	subs	r3, r0, r3
    441a:	40d9      	lsrs	r1, r3
    441c:	000b      	movs	r3, r1
    441e:	4258      	negs	r0, r3
    4420:	2a00      	cmp	r2, #0
    4422:	d100      	bne.n	4426 <__aeabi_f2iz+0x2e>
    4424:	0018      	movs	r0, r3
    4426:	4770      	bx	lr
    4428:	4b03      	ldr	r3, [pc, #12]	; (4438 <__aeabi_f2iz+0x40>)
    442a:	18d0      	adds	r0, r2, r3
    442c:	e7fb      	b.n	4426 <__aeabi_f2iz+0x2e>
    442e:	3b96      	subs	r3, #150	; 0x96
    4430:	4099      	lsls	r1, r3
    4432:	000b      	movs	r3, r1
    4434:	e7f3      	b.n	441e <__aeabi_f2iz+0x26>
    4436:	46c0      	nop			; (mov r8, r8)
    4438:	7fffffff 	.word	0x7fffffff

0000443c <__aeabi_i2f>:
    443c:	b570      	push	{r4, r5, r6, lr}
    443e:	2800      	cmp	r0, #0
    4440:	d030      	beq.n	44a4 <__aeabi_i2f+0x68>
    4442:	17c3      	asrs	r3, r0, #31
    4444:	18c5      	adds	r5, r0, r3
    4446:	405d      	eors	r5, r3
    4448:	0fc4      	lsrs	r4, r0, #31
    444a:	0028      	movs	r0, r5
    444c:	f001 ffd2 	bl	63f4 <__clzsi2>
    4450:	239e      	movs	r3, #158	; 0x9e
    4452:	1a1b      	subs	r3, r3, r0
    4454:	2b96      	cmp	r3, #150	; 0x96
    4456:	dc0d      	bgt.n	4474 <__aeabi_i2f+0x38>
    4458:	2296      	movs	r2, #150	; 0x96
    445a:	1ad2      	subs	r2, r2, r3
    445c:	4095      	lsls	r5, r2
    445e:	026a      	lsls	r2, r5, #9
    4460:	0a52      	lsrs	r2, r2, #9
    4462:	b2d8      	uxtb	r0, r3
    4464:	0252      	lsls	r2, r2, #9
    4466:	05c0      	lsls	r0, r0, #23
    4468:	0a52      	lsrs	r2, r2, #9
    446a:	07e4      	lsls	r4, r4, #31
    446c:	4302      	orrs	r2, r0
    446e:	4322      	orrs	r2, r4
    4470:	0010      	movs	r0, r2
    4472:	bd70      	pop	{r4, r5, r6, pc}
    4474:	2b99      	cmp	r3, #153	; 0x99
    4476:	dc19      	bgt.n	44ac <__aeabi_i2f+0x70>
    4478:	2299      	movs	r2, #153	; 0x99
    447a:	1ad2      	subs	r2, r2, r3
    447c:	4095      	lsls	r5, r2
    447e:	4a12      	ldr	r2, [pc, #72]	; (44c8 <__aeabi_i2f+0x8c>)
    4480:	402a      	ands	r2, r5
    4482:	0769      	lsls	r1, r5, #29
    4484:	d004      	beq.n	4490 <__aeabi_i2f+0x54>
    4486:	210f      	movs	r1, #15
    4488:	400d      	ands	r5, r1
    448a:	2d04      	cmp	r5, #4
    448c:	d000      	beq.n	4490 <__aeabi_i2f+0x54>
    448e:	3204      	adds	r2, #4
    4490:	0151      	lsls	r1, r2, #5
    4492:	d503      	bpl.n	449c <__aeabi_i2f+0x60>
    4494:	4b0c      	ldr	r3, [pc, #48]	; (44c8 <__aeabi_i2f+0x8c>)
    4496:	401a      	ands	r2, r3
    4498:	239f      	movs	r3, #159	; 0x9f
    449a:	1a1b      	subs	r3, r3, r0
    449c:	0192      	lsls	r2, r2, #6
    449e:	0a52      	lsrs	r2, r2, #9
    44a0:	b2d8      	uxtb	r0, r3
    44a2:	e7df      	b.n	4464 <__aeabi_i2f+0x28>
    44a4:	2400      	movs	r4, #0
    44a6:	2000      	movs	r0, #0
    44a8:	2200      	movs	r2, #0
    44aa:	e7db      	b.n	4464 <__aeabi_i2f+0x28>
    44ac:	2205      	movs	r2, #5
    44ae:	002e      	movs	r6, r5
    44b0:	1a12      	subs	r2, r2, r0
    44b2:	21b9      	movs	r1, #185	; 0xb9
    44b4:	40d6      	lsrs	r6, r2
    44b6:	002a      	movs	r2, r5
    44b8:	1ac9      	subs	r1, r1, r3
    44ba:	408a      	lsls	r2, r1
    44bc:	1e55      	subs	r5, r2, #1
    44be:	41aa      	sbcs	r2, r5
    44c0:	0035      	movs	r5, r6
    44c2:	4315      	orrs	r5, r2
    44c4:	e7db      	b.n	447e <__aeabi_i2f+0x42>
    44c6:	46c0      	nop			; (mov r8, r8)
    44c8:	fbffffff 	.word	0xfbffffff

000044cc <__aeabi_dadd>:
    44cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    44ce:	4656      	mov	r6, sl
    44d0:	465f      	mov	r7, fp
    44d2:	464d      	mov	r5, r9
    44d4:	4644      	mov	r4, r8
    44d6:	b4f0      	push	{r4, r5, r6, r7}
    44d8:	000f      	movs	r7, r1
    44da:	0ffd      	lsrs	r5, r7, #31
    44dc:	46aa      	mov	sl, r5
    44de:	0309      	lsls	r1, r1, #12
    44e0:	007c      	lsls	r4, r7, #1
    44e2:	002e      	movs	r6, r5
    44e4:	005f      	lsls	r7, r3, #1
    44e6:	0f45      	lsrs	r5, r0, #29
    44e8:	0a49      	lsrs	r1, r1, #9
    44ea:	0d7f      	lsrs	r7, r7, #21
    44ec:	4329      	orrs	r1, r5
    44ee:	00c5      	lsls	r5, r0, #3
    44f0:	0318      	lsls	r0, r3, #12
    44f2:	46bc      	mov	ip, r7
    44f4:	0a40      	lsrs	r0, r0, #9
    44f6:	0f57      	lsrs	r7, r2, #29
    44f8:	0d64      	lsrs	r4, r4, #21
    44fa:	0fdb      	lsrs	r3, r3, #31
    44fc:	4338      	orrs	r0, r7
    44fe:	00d2      	lsls	r2, r2, #3
    4500:	459a      	cmp	sl, r3
    4502:	d100      	bne.n	4506 <__aeabi_dadd+0x3a>
    4504:	e0aa      	b.n	465c <__aeabi_dadd+0x190>
    4506:	4666      	mov	r6, ip
    4508:	1ba6      	subs	r6, r4, r6
    450a:	2e00      	cmp	r6, #0
    450c:	dc00      	bgt.n	4510 <__aeabi_dadd+0x44>
    450e:	e0ff      	b.n	4710 <__aeabi_dadd+0x244>
    4510:	4663      	mov	r3, ip
    4512:	2b00      	cmp	r3, #0
    4514:	d139      	bne.n	458a <__aeabi_dadd+0xbe>
    4516:	0003      	movs	r3, r0
    4518:	4313      	orrs	r3, r2
    451a:	d000      	beq.n	451e <__aeabi_dadd+0x52>
    451c:	e0d9      	b.n	46d2 <__aeabi_dadd+0x206>
    451e:	076b      	lsls	r3, r5, #29
    4520:	d009      	beq.n	4536 <__aeabi_dadd+0x6a>
    4522:	230f      	movs	r3, #15
    4524:	402b      	ands	r3, r5
    4526:	2b04      	cmp	r3, #4
    4528:	d005      	beq.n	4536 <__aeabi_dadd+0x6a>
    452a:	1d2b      	adds	r3, r5, #4
    452c:	42ab      	cmp	r3, r5
    452e:	41ad      	sbcs	r5, r5
    4530:	426d      	negs	r5, r5
    4532:	1949      	adds	r1, r1, r5
    4534:	001d      	movs	r5, r3
    4536:	020b      	lsls	r3, r1, #8
    4538:	d400      	bmi.n	453c <__aeabi_dadd+0x70>
    453a:	e082      	b.n	4642 <__aeabi_dadd+0x176>
    453c:	4bca      	ldr	r3, [pc, #808]	; (4868 <__aeabi_dadd+0x39c>)
    453e:	3401      	adds	r4, #1
    4540:	429c      	cmp	r4, r3
    4542:	d100      	bne.n	4546 <__aeabi_dadd+0x7a>
    4544:	e0fe      	b.n	4744 <__aeabi_dadd+0x278>
    4546:	000a      	movs	r2, r1
    4548:	4656      	mov	r6, sl
    454a:	4bc8      	ldr	r3, [pc, #800]	; (486c <__aeabi_dadd+0x3a0>)
    454c:	08ed      	lsrs	r5, r5, #3
    454e:	401a      	ands	r2, r3
    4550:	0750      	lsls	r0, r2, #29
    4552:	0564      	lsls	r4, r4, #21
    4554:	0252      	lsls	r2, r2, #9
    4556:	4305      	orrs	r5, r0
    4558:	0b12      	lsrs	r2, r2, #12
    455a:	0d64      	lsrs	r4, r4, #21
    455c:	2100      	movs	r1, #0
    455e:	0312      	lsls	r2, r2, #12
    4560:	0d0b      	lsrs	r3, r1, #20
    4562:	051b      	lsls	r3, r3, #20
    4564:	0564      	lsls	r4, r4, #21
    4566:	0b12      	lsrs	r2, r2, #12
    4568:	431a      	orrs	r2, r3
    456a:	0863      	lsrs	r3, r4, #1
    456c:	4cc0      	ldr	r4, [pc, #768]	; (4870 <__aeabi_dadd+0x3a4>)
    456e:	07f6      	lsls	r6, r6, #31
    4570:	4014      	ands	r4, r2
    4572:	431c      	orrs	r4, r3
    4574:	0064      	lsls	r4, r4, #1
    4576:	0864      	lsrs	r4, r4, #1
    4578:	4334      	orrs	r4, r6
    457a:	0028      	movs	r0, r5
    457c:	0021      	movs	r1, r4
    457e:	bc3c      	pop	{r2, r3, r4, r5}
    4580:	4690      	mov	r8, r2
    4582:	4699      	mov	r9, r3
    4584:	46a2      	mov	sl, r4
    4586:	46ab      	mov	fp, r5
    4588:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    458a:	4bb7      	ldr	r3, [pc, #732]	; (4868 <__aeabi_dadd+0x39c>)
    458c:	429c      	cmp	r4, r3
    458e:	d0c6      	beq.n	451e <__aeabi_dadd+0x52>
    4590:	2380      	movs	r3, #128	; 0x80
    4592:	041b      	lsls	r3, r3, #16
    4594:	4318      	orrs	r0, r3
    4596:	2e38      	cmp	r6, #56	; 0x38
    4598:	dd00      	ble.n	459c <__aeabi_dadd+0xd0>
    459a:	e0eb      	b.n	4774 <__aeabi_dadd+0x2a8>
    459c:	2e1f      	cmp	r6, #31
    459e:	dd00      	ble.n	45a2 <__aeabi_dadd+0xd6>
    45a0:	e11e      	b.n	47e0 <__aeabi_dadd+0x314>
    45a2:	2320      	movs	r3, #32
    45a4:	1b9b      	subs	r3, r3, r6
    45a6:	469c      	mov	ip, r3
    45a8:	0003      	movs	r3, r0
    45aa:	4667      	mov	r7, ip
    45ac:	40bb      	lsls	r3, r7
    45ae:	4698      	mov	r8, r3
    45b0:	0013      	movs	r3, r2
    45b2:	4647      	mov	r7, r8
    45b4:	40f3      	lsrs	r3, r6
    45b6:	433b      	orrs	r3, r7
    45b8:	4667      	mov	r7, ip
    45ba:	40ba      	lsls	r2, r7
    45bc:	1e57      	subs	r7, r2, #1
    45be:	41ba      	sbcs	r2, r7
    45c0:	4313      	orrs	r3, r2
    45c2:	0002      	movs	r2, r0
    45c4:	40f2      	lsrs	r2, r6
    45c6:	1aeb      	subs	r3, r5, r3
    45c8:	429d      	cmp	r5, r3
    45ca:	41b6      	sbcs	r6, r6
    45cc:	001d      	movs	r5, r3
    45ce:	1a8a      	subs	r2, r1, r2
    45d0:	4276      	negs	r6, r6
    45d2:	1b91      	subs	r1, r2, r6
    45d4:	020b      	lsls	r3, r1, #8
    45d6:	d531      	bpl.n	463c <__aeabi_dadd+0x170>
    45d8:	024a      	lsls	r2, r1, #9
    45da:	0a56      	lsrs	r6, r2, #9
    45dc:	2e00      	cmp	r6, #0
    45de:	d100      	bne.n	45e2 <__aeabi_dadd+0x116>
    45e0:	e0b4      	b.n	474c <__aeabi_dadd+0x280>
    45e2:	0030      	movs	r0, r6
    45e4:	f001 ff06 	bl	63f4 <__clzsi2>
    45e8:	0003      	movs	r3, r0
    45ea:	3b08      	subs	r3, #8
    45ec:	2b1f      	cmp	r3, #31
    45ee:	dd00      	ble.n	45f2 <__aeabi_dadd+0x126>
    45f0:	e0b5      	b.n	475e <__aeabi_dadd+0x292>
    45f2:	2220      	movs	r2, #32
    45f4:	0029      	movs	r1, r5
    45f6:	1ad2      	subs	r2, r2, r3
    45f8:	40d1      	lsrs	r1, r2
    45fa:	409e      	lsls	r6, r3
    45fc:	000a      	movs	r2, r1
    45fe:	409d      	lsls	r5, r3
    4600:	4332      	orrs	r2, r6
    4602:	429c      	cmp	r4, r3
    4604:	dd00      	ble.n	4608 <__aeabi_dadd+0x13c>
    4606:	e0b1      	b.n	476c <__aeabi_dadd+0x2a0>
    4608:	1b1c      	subs	r4, r3, r4
    460a:	1c63      	adds	r3, r4, #1
    460c:	2b1f      	cmp	r3, #31
    460e:	dd00      	ble.n	4612 <__aeabi_dadd+0x146>
    4610:	e0d5      	b.n	47be <__aeabi_dadd+0x2f2>
    4612:	2120      	movs	r1, #32
    4614:	0014      	movs	r4, r2
    4616:	0028      	movs	r0, r5
    4618:	1ac9      	subs	r1, r1, r3
    461a:	408c      	lsls	r4, r1
    461c:	40d8      	lsrs	r0, r3
    461e:	408d      	lsls	r5, r1
    4620:	4304      	orrs	r4, r0
    4622:	40da      	lsrs	r2, r3
    4624:	1e68      	subs	r0, r5, #1
    4626:	4185      	sbcs	r5, r0
    4628:	0011      	movs	r1, r2
    462a:	4325      	orrs	r5, r4
    462c:	2400      	movs	r4, #0
    462e:	e776      	b.n	451e <__aeabi_dadd+0x52>
    4630:	4641      	mov	r1, r8
    4632:	4331      	orrs	r1, r6
    4634:	d100      	bne.n	4638 <__aeabi_dadd+0x16c>
    4636:	e234      	b.n	4aa2 <__aeabi_dadd+0x5d6>
    4638:	0031      	movs	r1, r6
    463a:	4645      	mov	r5, r8
    463c:	076b      	lsls	r3, r5, #29
    463e:	d000      	beq.n	4642 <__aeabi_dadd+0x176>
    4640:	e76f      	b.n	4522 <__aeabi_dadd+0x56>
    4642:	4656      	mov	r6, sl
    4644:	0748      	lsls	r0, r1, #29
    4646:	08ed      	lsrs	r5, r5, #3
    4648:	08c9      	lsrs	r1, r1, #3
    464a:	4305      	orrs	r5, r0
    464c:	4b86      	ldr	r3, [pc, #536]	; (4868 <__aeabi_dadd+0x39c>)
    464e:	429c      	cmp	r4, r3
    4650:	d035      	beq.n	46be <__aeabi_dadd+0x1f2>
    4652:	030a      	lsls	r2, r1, #12
    4654:	0564      	lsls	r4, r4, #21
    4656:	0b12      	lsrs	r2, r2, #12
    4658:	0d64      	lsrs	r4, r4, #21
    465a:	e77f      	b.n	455c <__aeabi_dadd+0x90>
    465c:	4663      	mov	r3, ip
    465e:	1ae3      	subs	r3, r4, r3
    4660:	469b      	mov	fp, r3
    4662:	2b00      	cmp	r3, #0
    4664:	dc00      	bgt.n	4668 <__aeabi_dadd+0x19c>
    4666:	e08b      	b.n	4780 <__aeabi_dadd+0x2b4>
    4668:	4667      	mov	r7, ip
    466a:	2f00      	cmp	r7, #0
    466c:	d03c      	beq.n	46e8 <__aeabi_dadd+0x21c>
    466e:	4f7e      	ldr	r7, [pc, #504]	; (4868 <__aeabi_dadd+0x39c>)
    4670:	42bc      	cmp	r4, r7
    4672:	d100      	bne.n	4676 <__aeabi_dadd+0x1aa>
    4674:	e753      	b.n	451e <__aeabi_dadd+0x52>
    4676:	2780      	movs	r7, #128	; 0x80
    4678:	043f      	lsls	r7, r7, #16
    467a:	4338      	orrs	r0, r7
    467c:	465b      	mov	r3, fp
    467e:	2b38      	cmp	r3, #56	; 0x38
    4680:	dc00      	bgt.n	4684 <__aeabi_dadd+0x1b8>
    4682:	e0f7      	b.n	4874 <__aeabi_dadd+0x3a8>
    4684:	4302      	orrs	r2, r0
    4686:	1e50      	subs	r0, r2, #1
    4688:	4182      	sbcs	r2, r0
    468a:	2000      	movs	r0, #0
    468c:	b2d2      	uxtb	r2, r2
    468e:	1953      	adds	r3, r2, r5
    4690:	1842      	adds	r2, r0, r1
    4692:	42ab      	cmp	r3, r5
    4694:	4189      	sbcs	r1, r1
    4696:	001d      	movs	r5, r3
    4698:	4249      	negs	r1, r1
    469a:	1889      	adds	r1, r1, r2
    469c:	020b      	lsls	r3, r1, #8
    469e:	d5cd      	bpl.n	463c <__aeabi_dadd+0x170>
    46a0:	4b71      	ldr	r3, [pc, #452]	; (4868 <__aeabi_dadd+0x39c>)
    46a2:	3401      	adds	r4, #1
    46a4:	429c      	cmp	r4, r3
    46a6:	d100      	bne.n	46aa <__aeabi_dadd+0x1de>
    46a8:	e13d      	b.n	4926 <__aeabi_dadd+0x45a>
    46aa:	2001      	movs	r0, #1
    46ac:	4a6f      	ldr	r2, [pc, #444]	; (486c <__aeabi_dadd+0x3a0>)
    46ae:	086b      	lsrs	r3, r5, #1
    46b0:	400a      	ands	r2, r1
    46b2:	4028      	ands	r0, r5
    46b4:	4318      	orrs	r0, r3
    46b6:	07d5      	lsls	r5, r2, #31
    46b8:	4305      	orrs	r5, r0
    46ba:	0851      	lsrs	r1, r2, #1
    46bc:	e72f      	b.n	451e <__aeabi_dadd+0x52>
    46be:	002b      	movs	r3, r5
    46c0:	430b      	orrs	r3, r1
    46c2:	d100      	bne.n	46c6 <__aeabi_dadd+0x1fa>
    46c4:	e1cb      	b.n	4a5e <__aeabi_dadd+0x592>
    46c6:	2380      	movs	r3, #128	; 0x80
    46c8:	031b      	lsls	r3, r3, #12
    46ca:	430b      	orrs	r3, r1
    46cc:	031a      	lsls	r2, r3, #12
    46ce:	0b12      	lsrs	r2, r2, #12
    46d0:	e744      	b.n	455c <__aeabi_dadd+0x90>
    46d2:	3e01      	subs	r6, #1
    46d4:	2e00      	cmp	r6, #0
    46d6:	d16d      	bne.n	47b4 <__aeabi_dadd+0x2e8>
    46d8:	1aae      	subs	r6, r5, r2
    46da:	42b5      	cmp	r5, r6
    46dc:	419b      	sbcs	r3, r3
    46de:	1a09      	subs	r1, r1, r0
    46e0:	425b      	negs	r3, r3
    46e2:	1ac9      	subs	r1, r1, r3
    46e4:	0035      	movs	r5, r6
    46e6:	e775      	b.n	45d4 <__aeabi_dadd+0x108>
    46e8:	0007      	movs	r7, r0
    46ea:	4317      	orrs	r7, r2
    46ec:	d100      	bne.n	46f0 <__aeabi_dadd+0x224>
    46ee:	e716      	b.n	451e <__aeabi_dadd+0x52>
    46f0:	2301      	movs	r3, #1
    46f2:	425b      	negs	r3, r3
    46f4:	469c      	mov	ip, r3
    46f6:	44e3      	add	fp, ip
    46f8:	465b      	mov	r3, fp
    46fa:	2b00      	cmp	r3, #0
    46fc:	d000      	beq.n	4700 <__aeabi_dadd+0x234>
    46fe:	e0e0      	b.n	48c2 <__aeabi_dadd+0x3f6>
    4700:	18aa      	adds	r2, r5, r2
    4702:	42aa      	cmp	r2, r5
    4704:	419b      	sbcs	r3, r3
    4706:	1809      	adds	r1, r1, r0
    4708:	425b      	negs	r3, r3
    470a:	1859      	adds	r1, r3, r1
    470c:	0015      	movs	r5, r2
    470e:	e7c5      	b.n	469c <__aeabi_dadd+0x1d0>
    4710:	2e00      	cmp	r6, #0
    4712:	d175      	bne.n	4800 <__aeabi_dadd+0x334>
    4714:	1c66      	adds	r6, r4, #1
    4716:	0576      	lsls	r6, r6, #21
    4718:	0d76      	lsrs	r6, r6, #21
    471a:	2e01      	cmp	r6, #1
    471c:	dc00      	bgt.n	4720 <__aeabi_dadd+0x254>
    471e:	e0f3      	b.n	4908 <__aeabi_dadd+0x43c>
    4720:	1aae      	subs	r6, r5, r2
    4722:	46b0      	mov	r8, r6
    4724:	4545      	cmp	r5, r8
    4726:	41bf      	sbcs	r7, r7
    4728:	1a0e      	subs	r6, r1, r0
    472a:	427f      	negs	r7, r7
    472c:	1bf6      	subs	r6, r6, r7
    472e:	0237      	lsls	r7, r6, #8
    4730:	d400      	bmi.n	4734 <__aeabi_dadd+0x268>
    4732:	e08f      	b.n	4854 <__aeabi_dadd+0x388>
    4734:	1b55      	subs	r5, r2, r5
    4736:	42aa      	cmp	r2, r5
    4738:	41b6      	sbcs	r6, r6
    473a:	1a41      	subs	r1, r0, r1
    473c:	4276      	negs	r6, r6
    473e:	1b8e      	subs	r6, r1, r6
    4740:	469a      	mov	sl, r3
    4742:	e74b      	b.n	45dc <__aeabi_dadd+0x110>
    4744:	4656      	mov	r6, sl
    4746:	2200      	movs	r2, #0
    4748:	2500      	movs	r5, #0
    474a:	e707      	b.n	455c <__aeabi_dadd+0x90>
    474c:	0028      	movs	r0, r5
    474e:	f001 fe51 	bl	63f4 <__clzsi2>
    4752:	3020      	adds	r0, #32
    4754:	0003      	movs	r3, r0
    4756:	3b08      	subs	r3, #8
    4758:	2b1f      	cmp	r3, #31
    475a:	dc00      	bgt.n	475e <__aeabi_dadd+0x292>
    475c:	e749      	b.n	45f2 <__aeabi_dadd+0x126>
    475e:	002a      	movs	r2, r5
    4760:	3828      	subs	r0, #40	; 0x28
    4762:	4082      	lsls	r2, r0
    4764:	2500      	movs	r5, #0
    4766:	429c      	cmp	r4, r3
    4768:	dc00      	bgt.n	476c <__aeabi_dadd+0x2a0>
    476a:	e74d      	b.n	4608 <__aeabi_dadd+0x13c>
    476c:	493f      	ldr	r1, [pc, #252]	; (486c <__aeabi_dadd+0x3a0>)
    476e:	1ae4      	subs	r4, r4, r3
    4770:	4011      	ands	r1, r2
    4772:	e6d4      	b.n	451e <__aeabi_dadd+0x52>
    4774:	4302      	orrs	r2, r0
    4776:	1e50      	subs	r0, r2, #1
    4778:	4182      	sbcs	r2, r0
    477a:	b2d3      	uxtb	r3, r2
    477c:	2200      	movs	r2, #0
    477e:	e722      	b.n	45c6 <__aeabi_dadd+0xfa>
    4780:	2b00      	cmp	r3, #0
    4782:	d000      	beq.n	4786 <__aeabi_dadd+0x2ba>
    4784:	e0f3      	b.n	496e <__aeabi_dadd+0x4a2>
    4786:	1c63      	adds	r3, r4, #1
    4788:	469c      	mov	ip, r3
    478a:	055b      	lsls	r3, r3, #21
    478c:	0d5b      	lsrs	r3, r3, #21
    478e:	2b01      	cmp	r3, #1
    4790:	dc00      	bgt.n	4794 <__aeabi_dadd+0x2c8>
    4792:	e09f      	b.n	48d4 <__aeabi_dadd+0x408>
    4794:	4b34      	ldr	r3, [pc, #208]	; (4868 <__aeabi_dadd+0x39c>)
    4796:	459c      	cmp	ip, r3
    4798:	d100      	bne.n	479c <__aeabi_dadd+0x2d0>
    479a:	e0c3      	b.n	4924 <__aeabi_dadd+0x458>
    479c:	18aa      	adds	r2, r5, r2
    479e:	1809      	adds	r1, r1, r0
    47a0:	42aa      	cmp	r2, r5
    47a2:	4180      	sbcs	r0, r0
    47a4:	4240      	negs	r0, r0
    47a6:	1841      	adds	r1, r0, r1
    47a8:	07cd      	lsls	r5, r1, #31
    47aa:	0852      	lsrs	r2, r2, #1
    47ac:	4315      	orrs	r5, r2
    47ae:	0849      	lsrs	r1, r1, #1
    47b0:	4664      	mov	r4, ip
    47b2:	e6b4      	b.n	451e <__aeabi_dadd+0x52>
    47b4:	4b2c      	ldr	r3, [pc, #176]	; (4868 <__aeabi_dadd+0x39c>)
    47b6:	429c      	cmp	r4, r3
    47b8:	d000      	beq.n	47bc <__aeabi_dadd+0x2f0>
    47ba:	e6ec      	b.n	4596 <__aeabi_dadd+0xca>
    47bc:	e6af      	b.n	451e <__aeabi_dadd+0x52>
    47be:	0011      	movs	r1, r2
    47c0:	3c1f      	subs	r4, #31
    47c2:	40e1      	lsrs	r1, r4
    47c4:	000c      	movs	r4, r1
    47c6:	2b20      	cmp	r3, #32
    47c8:	d100      	bne.n	47cc <__aeabi_dadd+0x300>
    47ca:	e07f      	b.n	48cc <__aeabi_dadd+0x400>
    47cc:	2140      	movs	r1, #64	; 0x40
    47ce:	1acb      	subs	r3, r1, r3
    47d0:	409a      	lsls	r2, r3
    47d2:	4315      	orrs	r5, r2
    47d4:	1e6a      	subs	r2, r5, #1
    47d6:	4195      	sbcs	r5, r2
    47d8:	2100      	movs	r1, #0
    47da:	4325      	orrs	r5, r4
    47dc:	2400      	movs	r4, #0
    47de:	e72d      	b.n	463c <__aeabi_dadd+0x170>
    47e0:	0033      	movs	r3, r6
    47e2:	0007      	movs	r7, r0
    47e4:	3b20      	subs	r3, #32
    47e6:	40df      	lsrs	r7, r3
    47e8:	003b      	movs	r3, r7
    47ea:	2e20      	cmp	r6, #32
    47ec:	d070      	beq.n	48d0 <__aeabi_dadd+0x404>
    47ee:	2740      	movs	r7, #64	; 0x40
    47f0:	1bbe      	subs	r6, r7, r6
    47f2:	40b0      	lsls	r0, r6
    47f4:	4302      	orrs	r2, r0
    47f6:	1e50      	subs	r0, r2, #1
    47f8:	4182      	sbcs	r2, r0
    47fa:	4313      	orrs	r3, r2
    47fc:	2200      	movs	r2, #0
    47fe:	e6e2      	b.n	45c6 <__aeabi_dadd+0xfa>
    4800:	2c00      	cmp	r4, #0
    4802:	d04f      	beq.n	48a4 <__aeabi_dadd+0x3d8>
    4804:	4c18      	ldr	r4, [pc, #96]	; (4868 <__aeabi_dadd+0x39c>)
    4806:	45a4      	cmp	ip, r4
    4808:	d100      	bne.n	480c <__aeabi_dadd+0x340>
    480a:	e0ab      	b.n	4964 <__aeabi_dadd+0x498>
    480c:	2480      	movs	r4, #128	; 0x80
    480e:	0424      	lsls	r4, r4, #16
    4810:	4276      	negs	r6, r6
    4812:	4321      	orrs	r1, r4
    4814:	2e38      	cmp	r6, #56	; 0x38
    4816:	dd00      	ble.n	481a <__aeabi_dadd+0x34e>
    4818:	e0df      	b.n	49da <__aeabi_dadd+0x50e>
    481a:	2e1f      	cmp	r6, #31
    481c:	dd00      	ble.n	4820 <__aeabi_dadd+0x354>
    481e:	e143      	b.n	4aa8 <__aeabi_dadd+0x5dc>
    4820:	2720      	movs	r7, #32
    4822:	1bbc      	subs	r4, r7, r6
    4824:	46a1      	mov	r9, r4
    4826:	000c      	movs	r4, r1
    4828:	464f      	mov	r7, r9
    482a:	40bc      	lsls	r4, r7
    482c:	46a0      	mov	r8, r4
    482e:	002c      	movs	r4, r5
    4830:	4647      	mov	r7, r8
    4832:	40f4      	lsrs	r4, r6
    4834:	433c      	orrs	r4, r7
    4836:	464f      	mov	r7, r9
    4838:	40bd      	lsls	r5, r7
    483a:	1e6f      	subs	r7, r5, #1
    483c:	41bd      	sbcs	r5, r7
    483e:	40f1      	lsrs	r1, r6
    4840:	432c      	orrs	r4, r5
    4842:	1b15      	subs	r5, r2, r4
    4844:	42aa      	cmp	r2, r5
    4846:	4192      	sbcs	r2, r2
    4848:	1a41      	subs	r1, r0, r1
    484a:	4252      	negs	r2, r2
    484c:	1a89      	subs	r1, r1, r2
    484e:	4664      	mov	r4, ip
    4850:	469a      	mov	sl, r3
    4852:	e6bf      	b.n	45d4 <__aeabi_dadd+0x108>
    4854:	4641      	mov	r1, r8
    4856:	4645      	mov	r5, r8
    4858:	4331      	orrs	r1, r6
    485a:	d000      	beq.n	485e <__aeabi_dadd+0x392>
    485c:	e6be      	b.n	45dc <__aeabi_dadd+0x110>
    485e:	2600      	movs	r6, #0
    4860:	2400      	movs	r4, #0
    4862:	2500      	movs	r5, #0
    4864:	e6f2      	b.n	464c <__aeabi_dadd+0x180>
    4866:	46c0      	nop			; (mov r8, r8)
    4868:	000007ff 	.word	0x000007ff
    486c:	ff7fffff 	.word	0xff7fffff
    4870:	800fffff 	.word	0x800fffff
    4874:	2b1f      	cmp	r3, #31
    4876:	dc59      	bgt.n	492c <__aeabi_dadd+0x460>
    4878:	2720      	movs	r7, #32
    487a:	1aff      	subs	r7, r7, r3
    487c:	46bc      	mov	ip, r7
    487e:	0007      	movs	r7, r0
    4880:	4663      	mov	r3, ip
    4882:	409f      	lsls	r7, r3
    4884:	465b      	mov	r3, fp
    4886:	46b9      	mov	r9, r7
    4888:	0017      	movs	r7, r2
    488a:	40df      	lsrs	r7, r3
    488c:	46b8      	mov	r8, r7
    488e:	464f      	mov	r7, r9
    4890:	4643      	mov	r3, r8
    4892:	431f      	orrs	r7, r3
    4894:	4663      	mov	r3, ip
    4896:	409a      	lsls	r2, r3
    4898:	1e53      	subs	r3, r2, #1
    489a:	419a      	sbcs	r2, r3
    489c:	465b      	mov	r3, fp
    489e:	433a      	orrs	r2, r7
    48a0:	40d8      	lsrs	r0, r3
    48a2:	e6f4      	b.n	468e <__aeabi_dadd+0x1c2>
    48a4:	000c      	movs	r4, r1
    48a6:	432c      	orrs	r4, r5
    48a8:	d05c      	beq.n	4964 <__aeabi_dadd+0x498>
    48aa:	43f6      	mvns	r6, r6
    48ac:	2e00      	cmp	r6, #0
    48ae:	d155      	bne.n	495c <__aeabi_dadd+0x490>
    48b0:	1b55      	subs	r5, r2, r5
    48b2:	42aa      	cmp	r2, r5
    48b4:	41a4      	sbcs	r4, r4
    48b6:	1a41      	subs	r1, r0, r1
    48b8:	4264      	negs	r4, r4
    48ba:	1b09      	subs	r1, r1, r4
    48bc:	469a      	mov	sl, r3
    48be:	4664      	mov	r4, ip
    48c0:	e688      	b.n	45d4 <__aeabi_dadd+0x108>
    48c2:	4f96      	ldr	r7, [pc, #600]	; (4b1c <__aeabi_dadd+0x650>)
    48c4:	42bc      	cmp	r4, r7
    48c6:	d000      	beq.n	48ca <__aeabi_dadd+0x3fe>
    48c8:	e6d8      	b.n	467c <__aeabi_dadd+0x1b0>
    48ca:	e628      	b.n	451e <__aeabi_dadd+0x52>
    48cc:	2200      	movs	r2, #0
    48ce:	e780      	b.n	47d2 <__aeabi_dadd+0x306>
    48d0:	2000      	movs	r0, #0
    48d2:	e78f      	b.n	47f4 <__aeabi_dadd+0x328>
    48d4:	000b      	movs	r3, r1
    48d6:	432b      	orrs	r3, r5
    48d8:	2c00      	cmp	r4, #0
    48da:	d000      	beq.n	48de <__aeabi_dadd+0x412>
    48dc:	e0c2      	b.n	4a64 <__aeabi_dadd+0x598>
    48de:	2b00      	cmp	r3, #0
    48e0:	d100      	bne.n	48e4 <__aeabi_dadd+0x418>
    48e2:	e101      	b.n	4ae8 <__aeabi_dadd+0x61c>
    48e4:	0003      	movs	r3, r0
    48e6:	4313      	orrs	r3, r2
    48e8:	d100      	bne.n	48ec <__aeabi_dadd+0x420>
    48ea:	e618      	b.n	451e <__aeabi_dadd+0x52>
    48ec:	18ab      	adds	r3, r5, r2
    48ee:	42ab      	cmp	r3, r5
    48f0:	41b6      	sbcs	r6, r6
    48f2:	1809      	adds	r1, r1, r0
    48f4:	4276      	negs	r6, r6
    48f6:	1871      	adds	r1, r6, r1
    48f8:	020a      	lsls	r2, r1, #8
    48fa:	d400      	bmi.n	48fe <__aeabi_dadd+0x432>
    48fc:	e109      	b.n	4b12 <__aeabi_dadd+0x646>
    48fe:	4a88      	ldr	r2, [pc, #544]	; (4b20 <__aeabi_dadd+0x654>)
    4900:	001d      	movs	r5, r3
    4902:	4011      	ands	r1, r2
    4904:	4664      	mov	r4, ip
    4906:	e60a      	b.n	451e <__aeabi_dadd+0x52>
    4908:	2c00      	cmp	r4, #0
    490a:	d15b      	bne.n	49c4 <__aeabi_dadd+0x4f8>
    490c:	000e      	movs	r6, r1
    490e:	432e      	orrs	r6, r5
    4910:	d000      	beq.n	4914 <__aeabi_dadd+0x448>
    4912:	e08a      	b.n	4a2a <__aeabi_dadd+0x55e>
    4914:	0001      	movs	r1, r0
    4916:	4311      	orrs	r1, r2
    4918:	d100      	bne.n	491c <__aeabi_dadd+0x450>
    491a:	e0c2      	b.n	4aa2 <__aeabi_dadd+0x5d6>
    491c:	0001      	movs	r1, r0
    491e:	0015      	movs	r5, r2
    4920:	469a      	mov	sl, r3
    4922:	e5fc      	b.n	451e <__aeabi_dadd+0x52>
    4924:	4664      	mov	r4, ip
    4926:	2100      	movs	r1, #0
    4928:	2500      	movs	r5, #0
    492a:	e68f      	b.n	464c <__aeabi_dadd+0x180>
    492c:	2320      	movs	r3, #32
    492e:	425b      	negs	r3, r3
    4930:	469c      	mov	ip, r3
    4932:	44dc      	add	ip, fp
    4934:	4663      	mov	r3, ip
    4936:	0007      	movs	r7, r0
    4938:	40df      	lsrs	r7, r3
    493a:	465b      	mov	r3, fp
    493c:	46bc      	mov	ip, r7
    493e:	2b20      	cmp	r3, #32
    4940:	d100      	bne.n	4944 <__aeabi_dadd+0x478>
    4942:	e0ac      	b.n	4a9e <__aeabi_dadd+0x5d2>
    4944:	2340      	movs	r3, #64	; 0x40
    4946:	465f      	mov	r7, fp
    4948:	1bdb      	subs	r3, r3, r7
    494a:	4098      	lsls	r0, r3
    494c:	4302      	orrs	r2, r0
    494e:	1e50      	subs	r0, r2, #1
    4950:	4182      	sbcs	r2, r0
    4952:	4663      	mov	r3, ip
    4954:	4313      	orrs	r3, r2
    4956:	001a      	movs	r2, r3
    4958:	2000      	movs	r0, #0
    495a:	e698      	b.n	468e <__aeabi_dadd+0x1c2>
    495c:	4c6f      	ldr	r4, [pc, #444]	; (4b1c <__aeabi_dadd+0x650>)
    495e:	45a4      	cmp	ip, r4
    4960:	d000      	beq.n	4964 <__aeabi_dadd+0x498>
    4962:	e757      	b.n	4814 <__aeabi_dadd+0x348>
    4964:	0001      	movs	r1, r0
    4966:	0015      	movs	r5, r2
    4968:	4664      	mov	r4, ip
    496a:	469a      	mov	sl, r3
    496c:	e5d7      	b.n	451e <__aeabi_dadd+0x52>
    496e:	2c00      	cmp	r4, #0
    4970:	d139      	bne.n	49e6 <__aeabi_dadd+0x51a>
    4972:	000c      	movs	r4, r1
    4974:	432c      	orrs	r4, r5
    4976:	d06e      	beq.n	4a56 <__aeabi_dadd+0x58a>
    4978:	43db      	mvns	r3, r3
    497a:	2b00      	cmp	r3, #0
    497c:	d01a      	beq.n	49b4 <__aeabi_dadd+0x4e8>
    497e:	4c67      	ldr	r4, [pc, #412]	; (4b1c <__aeabi_dadd+0x650>)
    4980:	45a4      	cmp	ip, r4
    4982:	d068      	beq.n	4a56 <__aeabi_dadd+0x58a>
    4984:	2b38      	cmp	r3, #56	; 0x38
    4986:	dd00      	ble.n	498a <__aeabi_dadd+0x4be>
    4988:	e0a4      	b.n	4ad4 <__aeabi_dadd+0x608>
    498a:	2b1f      	cmp	r3, #31
    498c:	dd00      	ble.n	4990 <__aeabi_dadd+0x4c4>
    498e:	e0ae      	b.n	4aee <__aeabi_dadd+0x622>
    4990:	2420      	movs	r4, #32
    4992:	000f      	movs	r7, r1
    4994:	1ae4      	subs	r4, r4, r3
    4996:	40a7      	lsls	r7, r4
    4998:	46b9      	mov	r9, r7
    499a:	002f      	movs	r7, r5
    499c:	40df      	lsrs	r7, r3
    499e:	46b8      	mov	r8, r7
    49a0:	46a3      	mov	fp, r4
    49a2:	464f      	mov	r7, r9
    49a4:	4644      	mov	r4, r8
    49a6:	4327      	orrs	r7, r4
    49a8:	465c      	mov	r4, fp
    49aa:	40a5      	lsls	r5, r4
    49ac:	1e6c      	subs	r4, r5, #1
    49ae:	41a5      	sbcs	r5, r4
    49b0:	40d9      	lsrs	r1, r3
    49b2:	433d      	orrs	r5, r7
    49b4:	18ad      	adds	r5, r5, r2
    49b6:	4295      	cmp	r5, r2
    49b8:	419b      	sbcs	r3, r3
    49ba:	1809      	adds	r1, r1, r0
    49bc:	425b      	negs	r3, r3
    49be:	1859      	adds	r1, r3, r1
    49c0:	4664      	mov	r4, ip
    49c2:	e66b      	b.n	469c <__aeabi_dadd+0x1d0>
    49c4:	000c      	movs	r4, r1
    49c6:	432c      	orrs	r4, r5
    49c8:	d115      	bne.n	49f6 <__aeabi_dadd+0x52a>
    49ca:	0001      	movs	r1, r0
    49cc:	4311      	orrs	r1, r2
    49ce:	d07b      	beq.n	4ac8 <__aeabi_dadd+0x5fc>
    49d0:	0001      	movs	r1, r0
    49d2:	0015      	movs	r5, r2
    49d4:	469a      	mov	sl, r3
    49d6:	4c51      	ldr	r4, [pc, #324]	; (4b1c <__aeabi_dadd+0x650>)
    49d8:	e5a1      	b.n	451e <__aeabi_dadd+0x52>
    49da:	430d      	orrs	r5, r1
    49dc:	1e69      	subs	r1, r5, #1
    49de:	418d      	sbcs	r5, r1
    49e0:	2100      	movs	r1, #0
    49e2:	b2ec      	uxtb	r4, r5
    49e4:	e72d      	b.n	4842 <__aeabi_dadd+0x376>
    49e6:	4c4d      	ldr	r4, [pc, #308]	; (4b1c <__aeabi_dadd+0x650>)
    49e8:	45a4      	cmp	ip, r4
    49ea:	d034      	beq.n	4a56 <__aeabi_dadd+0x58a>
    49ec:	2480      	movs	r4, #128	; 0x80
    49ee:	0424      	lsls	r4, r4, #16
    49f0:	425b      	negs	r3, r3
    49f2:	4321      	orrs	r1, r4
    49f4:	e7c6      	b.n	4984 <__aeabi_dadd+0x4b8>
    49f6:	0004      	movs	r4, r0
    49f8:	4314      	orrs	r4, r2
    49fa:	d04e      	beq.n	4a9a <__aeabi_dadd+0x5ce>
    49fc:	08ed      	lsrs	r5, r5, #3
    49fe:	074c      	lsls	r4, r1, #29
    4a00:	432c      	orrs	r4, r5
    4a02:	2580      	movs	r5, #128	; 0x80
    4a04:	08c9      	lsrs	r1, r1, #3
    4a06:	032d      	lsls	r5, r5, #12
    4a08:	4229      	tst	r1, r5
    4a0a:	d008      	beq.n	4a1e <__aeabi_dadd+0x552>
    4a0c:	08c6      	lsrs	r6, r0, #3
    4a0e:	422e      	tst	r6, r5
    4a10:	d105      	bne.n	4a1e <__aeabi_dadd+0x552>
    4a12:	08d2      	lsrs	r2, r2, #3
    4a14:	0741      	lsls	r1, r0, #29
    4a16:	4311      	orrs	r1, r2
    4a18:	000c      	movs	r4, r1
    4a1a:	469a      	mov	sl, r3
    4a1c:	0031      	movs	r1, r6
    4a1e:	0f62      	lsrs	r2, r4, #29
    4a20:	00c9      	lsls	r1, r1, #3
    4a22:	00e5      	lsls	r5, r4, #3
    4a24:	4311      	orrs	r1, r2
    4a26:	4c3d      	ldr	r4, [pc, #244]	; (4b1c <__aeabi_dadd+0x650>)
    4a28:	e579      	b.n	451e <__aeabi_dadd+0x52>
    4a2a:	0006      	movs	r6, r0
    4a2c:	4316      	orrs	r6, r2
    4a2e:	d100      	bne.n	4a32 <__aeabi_dadd+0x566>
    4a30:	e575      	b.n	451e <__aeabi_dadd+0x52>
    4a32:	1aae      	subs	r6, r5, r2
    4a34:	46b0      	mov	r8, r6
    4a36:	4545      	cmp	r5, r8
    4a38:	41bf      	sbcs	r7, r7
    4a3a:	1a0e      	subs	r6, r1, r0
    4a3c:	427f      	negs	r7, r7
    4a3e:	1bf6      	subs	r6, r6, r7
    4a40:	0237      	lsls	r7, r6, #8
    4a42:	d400      	bmi.n	4a46 <__aeabi_dadd+0x57a>
    4a44:	e5f4      	b.n	4630 <__aeabi_dadd+0x164>
    4a46:	1b55      	subs	r5, r2, r5
    4a48:	42aa      	cmp	r2, r5
    4a4a:	41b6      	sbcs	r6, r6
    4a4c:	1a41      	subs	r1, r0, r1
    4a4e:	4276      	negs	r6, r6
    4a50:	1b89      	subs	r1, r1, r6
    4a52:	469a      	mov	sl, r3
    4a54:	e563      	b.n	451e <__aeabi_dadd+0x52>
    4a56:	0001      	movs	r1, r0
    4a58:	0015      	movs	r5, r2
    4a5a:	4664      	mov	r4, ip
    4a5c:	e55f      	b.n	451e <__aeabi_dadd+0x52>
    4a5e:	2200      	movs	r2, #0
    4a60:	2500      	movs	r5, #0
    4a62:	e57b      	b.n	455c <__aeabi_dadd+0x90>
    4a64:	2b00      	cmp	r3, #0
    4a66:	d03b      	beq.n	4ae0 <__aeabi_dadd+0x614>
    4a68:	0003      	movs	r3, r0
    4a6a:	4313      	orrs	r3, r2
    4a6c:	d015      	beq.n	4a9a <__aeabi_dadd+0x5ce>
    4a6e:	08ed      	lsrs	r5, r5, #3
    4a70:	074b      	lsls	r3, r1, #29
    4a72:	432b      	orrs	r3, r5
    4a74:	2580      	movs	r5, #128	; 0x80
    4a76:	08c9      	lsrs	r1, r1, #3
    4a78:	032d      	lsls	r5, r5, #12
    4a7a:	4229      	tst	r1, r5
    4a7c:	d007      	beq.n	4a8e <__aeabi_dadd+0x5c2>
    4a7e:	08c4      	lsrs	r4, r0, #3
    4a80:	422c      	tst	r4, r5
    4a82:	d104      	bne.n	4a8e <__aeabi_dadd+0x5c2>
    4a84:	0741      	lsls	r1, r0, #29
    4a86:	000b      	movs	r3, r1
    4a88:	0021      	movs	r1, r4
    4a8a:	08d2      	lsrs	r2, r2, #3
    4a8c:	4313      	orrs	r3, r2
    4a8e:	00c9      	lsls	r1, r1, #3
    4a90:	0f5a      	lsrs	r2, r3, #29
    4a92:	4311      	orrs	r1, r2
    4a94:	00dd      	lsls	r5, r3, #3
    4a96:	4c21      	ldr	r4, [pc, #132]	; (4b1c <__aeabi_dadd+0x650>)
    4a98:	e541      	b.n	451e <__aeabi_dadd+0x52>
    4a9a:	4c20      	ldr	r4, [pc, #128]	; (4b1c <__aeabi_dadd+0x650>)
    4a9c:	e53f      	b.n	451e <__aeabi_dadd+0x52>
    4a9e:	2000      	movs	r0, #0
    4aa0:	e754      	b.n	494c <__aeabi_dadd+0x480>
    4aa2:	2600      	movs	r6, #0
    4aa4:	2500      	movs	r5, #0
    4aa6:	e5d1      	b.n	464c <__aeabi_dadd+0x180>
    4aa8:	0034      	movs	r4, r6
    4aaa:	000f      	movs	r7, r1
    4aac:	3c20      	subs	r4, #32
    4aae:	40e7      	lsrs	r7, r4
    4ab0:	003c      	movs	r4, r7
    4ab2:	2e20      	cmp	r6, #32
    4ab4:	d02b      	beq.n	4b0e <__aeabi_dadd+0x642>
    4ab6:	2740      	movs	r7, #64	; 0x40
    4ab8:	1bbe      	subs	r6, r7, r6
    4aba:	40b1      	lsls	r1, r6
    4abc:	430d      	orrs	r5, r1
    4abe:	1e69      	subs	r1, r5, #1
    4ac0:	418d      	sbcs	r5, r1
    4ac2:	2100      	movs	r1, #0
    4ac4:	432c      	orrs	r4, r5
    4ac6:	e6bc      	b.n	4842 <__aeabi_dadd+0x376>
    4ac8:	2180      	movs	r1, #128	; 0x80
    4aca:	2600      	movs	r6, #0
    4acc:	0309      	lsls	r1, r1, #12
    4ace:	4c13      	ldr	r4, [pc, #76]	; (4b1c <__aeabi_dadd+0x650>)
    4ad0:	2500      	movs	r5, #0
    4ad2:	e5bb      	b.n	464c <__aeabi_dadd+0x180>
    4ad4:	430d      	orrs	r5, r1
    4ad6:	1e69      	subs	r1, r5, #1
    4ad8:	418d      	sbcs	r5, r1
    4ada:	2100      	movs	r1, #0
    4adc:	b2ed      	uxtb	r5, r5
    4ade:	e769      	b.n	49b4 <__aeabi_dadd+0x4e8>
    4ae0:	0001      	movs	r1, r0
    4ae2:	0015      	movs	r5, r2
    4ae4:	4c0d      	ldr	r4, [pc, #52]	; (4b1c <__aeabi_dadd+0x650>)
    4ae6:	e51a      	b.n	451e <__aeabi_dadd+0x52>
    4ae8:	0001      	movs	r1, r0
    4aea:	0015      	movs	r5, r2
    4aec:	e517      	b.n	451e <__aeabi_dadd+0x52>
    4aee:	001c      	movs	r4, r3
    4af0:	000f      	movs	r7, r1
    4af2:	3c20      	subs	r4, #32
    4af4:	40e7      	lsrs	r7, r4
    4af6:	003c      	movs	r4, r7
    4af8:	2b20      	cmp	r3, #32
    4afa:	d00c      	beq.n	4b16 <__aeabi_dadd+0x64a>
    4afc:	2740      	movs	r7, #64	; 0x40
    4afe:	1afb      	subs	r3, r7, r3
    4b00:	4099      	lsls	r1, r3
    4b02:	430d      	orrs	r5, r1
    4b04:	1e69      	subs	r1, r5, #1
    4b06:	418d      	sbcs	r5, r1
    4b08:	2100      	movs	r1, #0
    4b0a:	4325      	orrs	r5, r4
    4b0c:	e752      	b.n	49b4 <__aeabi_dadd+0x4e8>
    4b0e:	2100      	movs	r1, #0
    4b10:	e7d4      	b.n	4abc <__aeabi_dadd+0x5f0>
    4b12:	001d      	movs	r5, r3
    4b14:	e592      	b.n	463c <__aeabi_dadd+0x170>
    4b16:	2100      	movs	r1, #0
    4b18:	e7f3      	b.n	4b02 <__aeabi_dadd+0x636>
    4b1a:	46c0      	nop			; (mov r8, r8)
    4b1c:	000007ff 	.word	0x000007ff
    4b20:	ff7fffff 	.word	0xff7fffff

00004b24 <__aeabi_ddiv>:
    4b24:	b5f0      	push	{r4, r5, r6, r7, lr}
    4b26:	4656      	mov	r6, sl
    4b28:	464d      	mov	r5, r9
    4b2a:	4644      	mov	r4, r8
    4b2c:	465f      	mov	r7, fp
    4b2e:	b4f0      	push	{r4, r5, r6, r7}
    4b30:	001d      	movs	r5, r3
    4b32:	030e      	lsls	r6, r1, #12
    4b34:	004c      	lsls	r4, r1, #1
    4b36:	0fcb      	lsrs	r3, r1, #31
    4b38:	b087      	sub	sp, #28
    4b3a:	0007      	movs	r7, r0
    4b3c:	4692      	mov	sl, r2
    4b3e:	4681      	mov	r9, r0
    4b40:	0b36      	lsrs	r6, r6, #12
    4b42:	0d64      	lsrs	r4, r4, #21
    4b44:	4698      	mov	r8, r3
    4b46:	d06a      	beq.n	4c1e <__aeabi_ddiv+0xfa>
    4b48:	4b6d      	ldr	r3, [pc, #436]	; (4d00 <__aeabi_ddiv+0x1dc>)
    4b4a:	429c      	cmp	r4, r3
    4b4c:	d035      	beq.n	4bba <__aeabi_ddiv+0x96>
    4b4e:	2280      	movs	r2, #128	; 0x80
    4b50:	0f43      	lsrs	r3, r0, #29
    4b52:	0412      	lsls	r2, r2, #16
    4b54:	4313      	orrs	r3, r2
    4b56:	00f6      	lsls	r6, r6, #3
    4b58:	431e      	orrs	r6, r3
    4b5a:	00c3      	lsls	r3, r0, #3
    4b5c:	4699      	mov	r9, r3
    4b5e:	4b69      	ldr	r3, [pc, #420]	; (4d04 <__aeabi_ddiv+0x1e0>)
    4b60:	2700      	movs	r7, #0
    4b62:	469c      	mov	ip, r3
    4b64:	2300      	movs	r3, #0
    4b66:	4464      	add	r4, ip
    4b68:	9302      	str	r3, [sp, #8]
    4b6a:	032b      	lsls	r3, r5, #12
    4b6c:	0068      	lsls	r0, r5, #1
    4b6e:	0b1b      	lsrs	r3, r3, #12
    4b70:	0fed      	lsrs	r5, r5, #31
    4b72:	4651      	mov	r1, sl
    4b74:	469b      	mov	fp, r3
    4b76:	0d40      	lsrs	r0, r0, #21
    4b78:	9500      	str	r5, [sp, #0]
    4b7a:	d100      	bne.n	4b7e <__aeabi_ddiv+0x5a>
    4b7c:	e078      	b.n	4c70 <__aeabi_ddiv+0x14c>
    4b7e:	4b60      	ldr	r3, [pc, #384]	; (4d00 <__aeabi_ddiv+0x1dc>)
    4b80:	4298      	cmp	r0, r3
    4b82:	d06c      	beq.n	4c5e <__aeabi_ddiv+0x13a>
    4b84:	465b      	mov	r3, fp
    4b86:	00da      	lsls	r2, r3, #3
    4b88:	0f4b      	lsrs	r3, r1, #29
    4b8a:	2180      	movs	r1, #128	; 0x80
    4b8c:	0409      	lsls	r1, r1, #16
    4b8e:	430b      	orrs	r3, r1
    4b90:	4313      	orrs	r3, r2
    4b92:	469b      	mov	fp, r3
    4b94:	4653      	mov	r3, sl
    4b96:	00d9      	lsls	r1, r3, #3
    4b98:	4b5a      	ldr	r3, [pc, #360]	; (4d04 <__aeabi_ddiv+0x1e0>)
    4b9a:	469c      	mov	ip, r3
    4b9c:	2300      	movs	r3, #0
    4b9e:	4460      	add	r0, ip
    4ba0:	4642      	mov	r2, r8
    4ba2:	1a20      	subs	r0, r4, r0
    4ba4:	406a      	eors	r2, r5
    4ba6:	4692      	mov	sl, r2
    4ba8:	9001      	str	r0, [sp, #4]
    4baa:	431f      	orrs	r7, r3
    4bac:	2f0f      	cmp	r7, #15
    4bae:	d900      	bls.n	4bb2 <__aeabi_ddiv+0x8e>
    4bb0:	e0b0      	b.n	4d14 <__aeabi_ddiv+0x1f0>
    4bb2:	4855      	ldr	r0, [pc, #340]	; (4d08 <__aeabi_ddiv+0x1e4>)
    4bb4:	00bf      	lsls	r7, r7, #2
    4bb6:	59c0      	ldr	r0, [r0, r7]
    4bb8:	4687      	mov	pc, r0
    4bba:	4337      	orrs	r7, r6
    4bbc:	d000      	beq.n	4bc0 <__aeabi_ddiv+0x9c>
    4bbe:	e088      	b.n	4cd2 <__aeabi_ddiv+0x1ae>
    4bc0:	2300      	movs	r3, #0
    4bc2:	4699      	mov	r9, r3
    4bc4:	3302      	adds	r3, #2
    4bc6:	2708      	movs	r7, #8
    4bc8:	2600      	movs	r6, #0
    4bca:	9302      	str	r3, [sp, #8]
    4bcc:	e7cd      	b.n	4b6a <__aeabi_ddiv+0x46>
    4bce:	4643      	mov	r3, r8
    4bd0:	46b3      	mov	fp, r6
    4bd2:	4649      	mov	r1, r9
    4bd4:	9300      	str	r3, [sp, #0]
    4bd6:	9b02      	ldr	r3, [sp, #8]
    4bd8:	9a00      	ldr	r2, [sp, #0]
    4bda:	4692      	mov	sl, r2
    4bdc:	2b02      	cmp	r3, #2
    4bde:	d000      	beq.n	4be2 <__aeabi_ddiv+0xbe>
    4be0:	e1bf      	b.n	4f62 <__aeabi_ddiv+0x43e>
    4be2:	2100      	movs	r1, #0
    4be4:	4653      	mov	r3, sl
    4be6:	2201      	movs	r2, #1
    4be8:	2600      	movs	r6, #0
    4bea:	4689      	mov	r9, r1
    4bec:	401a      	ands	r2, r3
    4bee:	4b44      	ldr	r3, [pc, #272]	; (4d00 <__aeabi_ddiv+0x1dc>)
    4bf0:	2100      	movs	r1, #0
    4bf2:	0336      	lsls	r6, r6, #12
    4bf4:	0d0c      	lsrs	r4, r1, #20
    4bf6:	0524      	lsls	r4, r4, #20
    4bf8:	0b36      	lsrs	r6, r6, #12
    4bfa:	4326      	orrs	r6, r4
    4bfc:	4c43      	ldr	r4, [pc, #268]	; (4d0c <__aeabi_ddiv+0x1e8>)
    4bfe:	051b      	lsls	r3, r3, #20
    4c00:	4026      	ands	r6, r4
    4c02:	431e      	orrs	r6, r3
    4c04:	0076      	lsls	r6, r6, #1
    4c06:	07d2      	lsls	r2, r2, #31
    4c08:	0876      	lsrs	r6, r6, #1
    4c0a:	4316      	orrs	r6, r2
    4c0c:	4648      	mov	r0, r9
    4c0e:	0031      	movs	r1, r6
    4c10:	b007      	add	sp, #28
    4c12:	bc3c      	pop	{r2, r3, r4, r5}
    4c14:	4690      	mov	r8, r2
    4c16:	4699      	mov	r9, r3
    4c18:	46a2      	mov	sl, r4
    4c1a:	46ab      	mov	fp, r5
    4c1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4c1e:	0033      	movs	r3, r6
    4c20:	4303      	orrs	r3, r0
    4c22:	d04f      	beq.n	4cc4 <__aeabi_ddiv+0x1a0>
    4c24:	2e00      	cmp	r6, #0
    4c26:	d100      	bne.n	4c2a <__aeabi_ddiv+0x106>
    4c28:	e1bc      	b.n	4fa4 <__aeabi_ddiv+0x480>
    4c2a:	0030      	movs	r0, r6
    4c2c:	f001 fbe2 	bl	63f4 <__clzsi2>
    4c30:	0003      	movs	r3, r0
    4c32:	3b0b      	subs	r3, #11
    4c34:	2b1c      	cmp	r3, #28
    4c36:	dd00      	ble.n	4c3a <__aeabi_ddiv+0x116>
    4c38:	e1ad      	b.n	4f96 <__aeabi_ddiv+0x472>
    4c3a:	221d      	movs	r2, #29
    4c3c:	0001      	movs	r1, r0
    4c3e:	1ad3      	subs	r3, r2, r3
    4c40:	3908      	subs	r1, #8
    4c42:	003a      	movs	r2, r7
    4c44:	408f      	lsls	r7, r1
    4c46:	408e      	lsls	r6, r1
    4c48:	40da      	lsrs	r2, r3
    4c4a:	46b9      	mov	r9, r7
    4c4c:	4316      	orrs	r6, r2
    4c4e:	4b30      	ldr	r3, [pc, #192]	; (4d10 <__aeabi_ddiv+0x1ec>)
    4c50:	2700      	movs	r7, #0
    4c52:	469c      	mov	ip, r3
    4c54:	2300      	movs	r3, #0
    4c56:	4460      	add	r0, ip
    4c58:	4244      	negs	r4, r0
    4c5a:	9302      	str	r3, [sp, #8]
    4c5c:	e785      	b.n	4b6a <__aeabi_ddiv+0x46>
    4c5e:	4653      	mov	r3, sl
    4c60:	465a      	mov	r2, fp
    4c62:	4313      	orrs	r3, r2
    4c64:	d12c      	bne.n	4cc0 <__aeabi_ddiv+0x19c>
    4c66:	2300      	movs	r3, #0
    4c68:	2100      	movs	r1, #0
    4c6a:	469b      	mov	fp, r3
    4c6c:	3302      	adds	r3, #2
    4c6e:	e797      	b.n	4ba0 <__aeabi_ddiv+0x7c>
    4c70:	430b      	orrs	r3, r1
    4c72:	d020      	beq.n	4cb6 <__aeabi_ddiv+0x192>
    4c74:	465b      	mov	r3, fp
    4c76:	2b00      	cmp	r3, #0
    4c78:	d100      	bne.n	4c7c <__aeabi_ddiv+0x158>
    4c7a:	e19e      	b.n	4fba <__aeabi_ddiv+0x496>
    4c7c:	4658      	mov	r0, fp
    4c7e:	f001 fbb9 	bl	63f4 <__clzsi2>
    4c82:	0003      	movs	r3, r0
    4c84:	3b0b      	subs	r3, #11
    4c86:	2b1c      	cmp	r3, #28
    4c88:	dd00      	ble.n	4c8c <__aeabi_ddiv+0x168>
    4c8a:	e18f      	b.n	4fac <__aeabi_ddiv+0x488>
    4c8c:	0002      	movs	r2, r0
    4c8e:	4659      	mov	r1, fp
    4c90:	3a08      	subs	r2, #8
    4c92:	4091      	lsls	r1, r2
    4c94:	468b      	mov	fp, r1
    4c96:	211d      	movs	r1, #29
    4c98:	1acb      	subs	r3, r1, r3
    4c9a:	4651      	mov	r1, sl
    4c9c:	40d9      	lsrs	r1, r3
    4c9e:	000b      	movs	r3, r1
    4ca0:	4659      	mov	r1, fp
    4ca2:	430b      	orrs	r3, r1
    4ca4:	4651      	mov	r1, sl
    4ca6:	469b      	mov	fp, r3
    4ca8:	4091      	lsls	r1, r2
    4caa:	4b19      	ldr	r3, [pc, #100]	; (4d10 <__aeabi_ddiv+0x1ec>)
    4cac:	469c      	mov	ip, r3
    4cae:	4460      	add	r0, ip
    4cb0:	4240      	negs	r0, r0
    4cb2:	2300      	movs	r3, #0
    4cb4:	e774      	b.n	4ba0 <__aeabi_ddiv+0x7c>
    4cb6:	2300      	movs	r3, #0
    4cb8:	2100      	movs	r1, #0
    4cba:	469b      	mov	fp, r3
    4cbc:	3301      	adds	r3, #1
    4cbe:	e76f      	b.n	4ba0 <__aeabi_ddiv+0x7c>
    4cc0:	2303      	movs	r3, #3
    4cc2:	e76d      	b.n	4ba0 <__aeabi_ddiv+0x7c>
    4cc4:	2300      	movs	r3, #0
    4cc6:	4699      	mov	r9, r3
    4cc8:	3301      	adds	r3, #1
    4cca:	2704      	movs	r7, #4
    4ccc:	2600      	movs	r6, #0
    4cce:	9302      	str	r3, [sp, #8]
    4cd0:	e74b      	b.n	4b6a <__aeabi_ddiv+0x46>
    4cd2:	2303      	movs	r3, #3
    4cd4:	270c      	movs	r7, #12
    4cd6:	9302      	str	r3, [sp, #8]
    4cd8:	e747      	b.n	4b6a <__aeabi_ddiv+0x46>
    4cda:	2201      	movs	r2, #1
    4cdc:	1ad5      	subs	r5, r2, r3
    4cde:	2d38      	cmp	r5, #56	; 0x38
    4ce0:	dc00      	bgt.n	4ce4 <__aeabi_ddiv+0x1c0>
    4ce2:	e1b0      	b.n	5046 <__aeabi_ddiv+0x522>
    4ce4:	4653      	mov	r3, sl
    4ce6:	401a      	ands	r2, r3
    4ce8:	2100      	movs	r1, #0
    4cea:	2300      	movs	r3, #0
    4cec:	2600      	movs	r6, #0
    4cee:	4689      	mov	r9, r1
    4cf0:	e77e      	b.n	4bf0 <__aeabi_ddiv+0xcc>
    4cf2:	2300      	movs	r3, #0
    4cf4:	2680      	movs	r6, #128	; 0x80
    4cf6:	4699      	mov	r9, r3
    4cf8:	2200      	movs	r2, #0
    4cfa:	0336      	lsls	r6, r6, #12
    4cfc:	4b00      	ldr	r3, [pc, #0]	; (4d00 <__aeabi_ddiv+0x1dc>)
    4cfe:	e777      	b.n	4bf0 <__aeabi_ddiv+0xcc>
    4d00:	000007ff 	.word	0x000007ff
    4d04:	fffffc01 	.word	0xfffffc01
    4d08:	00006790 	.word	0x00006790
    4d0c:	800fffff 	.word	0x800fffff
    4d10:	000003f3 	.word	0x000003f3
    4d14:	455e      	cmp	r6, fp
    4d16:	d900      	bls.n	4d1a <__aeabi_ddiv+0x1f6>
    4d18:	e172      	b.n	5000 <__aeabi_ddiv+0x4dc>
    4d1a:	d100      	bne.n	4d1e <__aeabi_ddiv+0x1fa>
    4d1c:	e16d      	b.n	4ffa <__aeabi_ddiv+0x4d6>
    4d1e:	9b01      	ldr	r3, [sp, #4]
    4d20:	464d      	mov	r5, r9
    4d22:	3b01      	subs	r3, #1
    4d24:	9301      	str	r3, [sp, #4]
    4d26:	2300      	movs	r3, #0
    4d28:	0034      	movs	r4, r6
    4d2a:	9302      	str	r3, [sp, #8]
    4d2c:	465b      	mov	r3, fp
    4d2e:	021e      	lsls	r6, r3, #8
    4d30:	0e0b      	lsrs	r3, r1, #24
    4d32:	431e      	orrs	r6, r3
    4d34:	020b      	lsls	r3, r1, #8
    4d36:	9303      	str	r3, [sp, #12]
    4d38:	0c33      	lsrs	r3, r6, #16
    4d3a:	4699      	mov	r9, r3
    4d3c:	0433      	lsls	r3, r6, #16
    4d3e:	0c1b      	lsrs	r3, r3, #16
    4d40:	4649      	mov	r1, r9
    4d42:	0020      	movs	r0, r4
    4d44:	9300      	str	r3, [sp, #0]
    4d46:	f001 fa8f 	bl	6268 <__aeabi_uidiv>
    4d4a:	9b00      	ldr	r3, [sp, #0]
    4d4c:	0037      	movs	r7, r6
    4d4e:	4343      	muls	r3, r0
    4d50:	0006      	movs	r6, r0
    4d52:	4649      	mov	r1, r9
    4d54:	0020      	movs	r0, r4
    4d56:	4698      	mov	r8, r3
    4d58:	f001 fb0c 	bl	6374 <__aeabi_uidivmod>
    4d5c:	0c2c      	lsrs	r4, r5, #16
    4d5e:	0409      	lsls	r1, r1, #16
    4d60:	430c      	orrs	r4, r1
    4d62:	45a0      	cmp	r8, r4
    4d64:	d909      	bls.n	4d7a <__aeabi_ddiv+0x256>
    4d66:	19e4      	adds	r4, r4, r7
    4d68:	1e73      	subs	r3, r6, #1
    4d6a:	42a7      	cmp	r7, r4
    4d6c:	d900      	bls.n	4d70 <__aeabi_ddiv+0x24c>
    4d6e:	e15c      	b.n	502a <__aeabi_ddiv+0x506>
    4d70:	45a0      	cmp	r8, r4
    4d72:	d800      	bhi.n	4d76 <__aeabi_ddiv+0x252>
    4d74:	e159      	b.n	502a <__aeabi_ddiv+0x506>
    4d76:	3e02      	subs	r6, #2
    4d78:	19e4      	adds	r4, r4, r7
    4d7a:	4643      	mov	r3, r8
    4d7c:	1ae4      	subs	r4, r4, r3
    4d7e:	4649      	mov	r1, r9
    4d80:	0020      	movs	r0, r4
    4d82:	f001 fa71 	bl	6268 <__aeabi_uidiv>
    4d86:	0003      	movs	r3, r0
    4d88:	9a00      	ldr	r2, [sp, #0]
    4d8a:	4680      	mov	r8, r0
    4d8c:	4353      	muls	r3, r2
    4d8e:	4649      	mov	r1, r9
    4d90:	0020      	movs	r0, r4
    4d92:	469b      	mov	fp, r3
    4d94:	f001 faee 	bl	6374 <__aeabi_uidivmod>
    4d98:	042a      	lsls	r2, r5, #16
    4d9a:	0409      	lsls	r1, r1, #16
    4d9c:	0c12      	lsrs	r2, r2, #16
    4d9e:	430a      	orrs	r2, r1
    4da0:	4593      	cmp	fp, r2
    4da2:	d90d      	bls.n	4dc0 <__aeabi_ddiv+0x29c>
    4da4:	4643      	mov	r3, r8
    4da6:	19d2      	adds	r2, r2, r7
    4da8:	3b01      	subs	r3, #1
    4daa:	4297      	cmp	r7, r2
    4dac:	d900      	bls.n	4db0 <__aeabi_ddiv+0x28c>
    4dae:	e13a      	b.n	5026 <__aeabi_ddiv+0x502>
    4db0:	4593      	cmp	fp, r2
    4db2:	d800      	bhi.n	4db6 <__aeabi_ddiv+0x292>
    4db4:	e137      	b.n	5026 <__aeabi_ddiv+0x502>
    4db6:	2302      	movs	r3, #2
    4db8:	425b      	negs	r3, r3
    4dba:	469c      	mov	ip, r3
    4dbc:	19d2      	adds	r2, r2, r7
    4dbe:	44e0      	add	r8, ip
    4dc0:	465b      	mov	r3, fp
    4dc2:	1ad2      	subs	r2, r2, r3
    4dc4:	4643      	mov	r3, r8
    4dc6:	0436      	lsls	r6, r6, #16
    4dc8:	4333      	orrs	r3, r6
    4dca:	469b      	mov	fp, r3
    4dcc:	9903      	ldr	r1, [sp, #12]
    4dce:	0c18      	lsrs	r0, r3, #16
    4dd0:	0c0b      	lsrs	r3, r1, #16
    4dd2:	001d      	movs	r5, r3
    4dd4:	9305      	str	r3, [sp, #20]
    4dd6:	0409      	lsls	r1, r1, #16
    4dd8:	465b      	mov	r3, fp
    4dda:	0c09      	lsrs	r1, r1, #16
    4ddc:	000c      	movs	r4, r1
    4dde:	041b      	lsls	r3, r3, #16
    4de0:	0c1b      	lsrs	r3, r3, #16
    4de2:	4344      	muls	r4, r0
    4de4:	9104      	str	r1, [sp, #16]
    4de6:	4359      	muls	r1, r3
    4de8:	436b      	muls	r3, r5
    4dea:	4368      	muls	r0, r5
    4dec:	191b      	adds	r3, r3, r4
    4dee:	0c0d      	lsrs	r5, r1, #16
    4df0:	18eb      	adds	r3, r5, r3
    4df2:	429c      	cmp	r4, r3
    4df4:	d903      	bls.n	4dfe <__aeabi_ddiv+0x2da>
    4df6:	2480      	movs	r4, #128	; 0x80
    4df8:	0264      	lsls	r4, r4, #9
    4dfa:	46a4      	mov	ip, r4
    4dfc:	4460      	add	r0, ip
    4dfe:	0c1c      	lsrs	r4, r3, #16
    4e00:	0409      	lsls	r1, r1, #16
    4e02:	041b      	lsls	r3, r3, #16
    4e04:	0c09      	lsrs	r1, r1, #16
    4e06:	1820      	adds	r0, r4, r0
    4e08:	185d      	adds	r5, r3, r1
    4e0a:	4282      	cmp	r2, r0
    4e0c:	d200      	bcs.n	4e10 <__aeabi_ddiv+0x2ec>
    4e0e:	e0de      	b.n	4fce <__aeabi_ddiv+0x4aa>
    4e10:	d100      	bne.n	4e14 <__aeabi_ddiv+0x2f0>
    4e12:	e0d7      	b.n	4fc4 <__aeabi_ddiv+0x4a0>
    4e14:	1a16      	subs	r6, r2, r0
    4e16:	9b02      	ldr	r3, [sp, #8]
    4e18:	469c      	mov	ip, r3
    4e1a:	1b5d      	subs	r5, r3, r5
    4e1c:	45ac      	cmp	ip, r5
    4e1e:	419b      	sbcs	r3, r3
    4e20:	425b      	negs	r3, r3
    4e22:	1af6      	subs	r6, r6, r3
    4e24:	42b7      	cmp	r7, r6
    4e26:	d100      	bne.n	4e2a <__aeabi_ddiv+0x306>
    4e28:	e106      	b.n	5038 <__aeabi_ddiv+0x514>
    4e2a:	4649      	mov	r1, r9
    4e2c:	0030      	movs	r0, r6
    4e2e:	f001 fa1b 	bl	6268 <__aeabi_uidiv>
    4e32:	9b00      	ldr	r3, [sp, #0]
    4e34:	0004      	movs	r4, r0
    4e36:	4343      	muls	r3, r0
    4e38:	4649      	mov	r1, r9
    4e3a:	0030      	movs	r0, r6
    4e3c:	4698      	mov	r8, r3
    4e3e:	f001 fa99 	bl	6374 <__aeabi_uidivmod>
    4e42:	0c2e      	lsrs	r6, r5, #16
    4e44:	0409      	lsls	r1, r1, #16
    4e46:	430e      	orrs	r6, r1
    4e48:	45b0      	cmp	r8, r6
    4e4a:	d909      	bls.n	4e60 <__aeabi_ddiv+0x33c>
    4e4c:	19f6      	adds	r6, r6, r7
    4e4e:	1e63      	subs	r3, r4, #1
    4e50:	42b7      	cmp	r7, r6
    4e52:	d900      	bls.n	4e56 <__aeabi_ddiv+0x332>
    4e54:	e0f3      	b.n	503e <__aeabi_ddiv+0x51a>
    4e56:	45b0      	cmp	r8, r6
    4e58:	d800      	bhi.n	4e5c <__aeabi_ddiv+0x338>
    4e5a:	e0f0      	b.n	503e <__aeabi_ddiv+0x51a>
    4e5c:	3c02      	subs	r4, #2
    4e5e:	19f6      	adds	r6, r6, r7
    4e60:	4643      	mov	r3, r8
    4e62:	1af3      	subs	r3, r6, r3
    4e64:	4649      	mov	r1, r9
    4e66:	0018      	movs	r0, r3
    4e68:	9302      	str	r3, [sp, #8]
    4e6a:	f001 f9fd 	bl	6268 <__aeabi_uidiv>
    4e6e:	9b00      	ldr	r3, [sp, #0]
    4e70:	0006      	movs	r6, r0
    4e72:	4343      	muls	r3, r0
    4e74:	4649      	mov	r1, r9
    4e76:	9802      	ldr	r0, [sp, #8]
    4e78:	4698      	mov	r8, r3
    4e7a:	f001 fa7b 	bl	6374 <__aeabi_uidivmod>
    4e7e:	042d      	lsls	r5, r5, #16
    4e80:	0409      	lsls	r1, r1, #16
    4e82:	0c2d      	lsrs	r5, r5, #16
    4e84:	430d      	orrs	r5, r1
    4e86:	45a8      	cmp	r8, r5
    4e88:	d909      	bls.n	4e9e <__aeabi_ddiv+0x37a>
    4e8a:	19ed      	adds	r5, r5, r7
    4e8c:	1e73      	subs	r3, r6, #1
    4e8e:	42af      	cmp	r7, r5
    4e90:	d900      	bls.n	4e94 <__aeabi_ddiv+0x370>
    4e92:	e0d6      	b.n	5042 <__aeabi_ddiv+0x51e>
    4e94:	45a8      	cmp	r8, r5
    4e96:	d800      	bhi.n	4e9a <__aeabi_ddiv+0x376>
    4e98:	e0d3      	b.n	5042 <__aeabi_ddiv+0x51e>
    4e9a:	3e02      	subs	r6, #2
    4e9c:	19ed      	adds	r5, r5, r7
    4e9e:	0424      	lsls	r4, r4, #16
    4ea0:	0021      	movs	r1, r4
    4ea2:	4643      	mov	r3, r8
    4ea4:	4331      	orrs	r1, r6
    4ea6:	9e04      	ldr	r6, [sp, #16]
    4ea8:	9a05      	ldr	r2, [sp, #20]
    4eaa:	0030      	movs	r0, r6
    4eac:	1aed      	subs	r5, r5, r3
    4eae:	040b      	lsls	r3, r1, #16
    4eb0:	0c0c      	lsrs	r4, r1, #16
    4eb2:	0c1b      	lsrs	r3, r3, #16
    4eb4:	4358      	muls	r0, r3
    4eb6:	4366      	muls	r6, r4
    4eb8:	4353      	muls	r3, r2
    4eba:	4354      	muls	r4, r2
    4ebc:	199a      	adds	r2, r3, r6
    4ebe:	0c03      	lsrs	r3, r0, #16
    4ec0:	189b      	adds	r3, r3, r2
    4ec2:	429e      	cmp	r6, r3
    4ec4:	d903      	bls.n	4ece <__aeabi_ddiv+0x3aa>
    4ec6:	2280      	movs	r2, #128	; 0x80
    4ec8:	0252      	lsls	r2, r2, #9
    4eca:	4694      	mov	ip, r2
    4ecc:	4464      	add	r4, ip
    4ece:	0c1a      	lsrs	r2, r3, #16
    4ed0:	0400      	lsls	r0, r0, #16
    4ed2:	041b      	lsls	r3, r3, #16
    4ed4:	0c00      	lsrs	r0, r0, #16
    4ed6:	1914      	adds	r4, r2, r4
    4ed8:	181b      	adds	r3, r3, r0
    4eda:	42a5      	cmp	r5, r4
    4edc:	d350      	bcc.n	4f80 <__aeabi_ddiv+0x45c>
    4ede:	d04d      	beq.n	4f7c <__aeabi_ddiv+0x458>
    4ee0:	2301      	movs	r3, #1
    4ee2:	4319      	orrs	r1, r3
    4ee4:	4a96      	ldr	r2, [pc, #600]	; (5140 <__aeabi_ddiv+0x61c>)
    4ee6:	9b01      	ldr	r3, [sp, #4]
    4ee8:	4694      	mov	ip, r2
    4eea:	4463      	add	r3, ip
    4eec:	2b00      	cmp	r3, #0
    4eee:	dc00      	bgt.n	4ef2 <__aeabi_ddiv+0x3ce>
    4ef0:	e6f3      	b.n	4cda <__aeabi_ddiv+0x1b6>
    4ef2:	074a      	lsls	r2, r1, #29
    4ef4:	d009      	beq.n	4f0a <__aeabi_ddiv+0x3e6>
    4ef6:	220f      	movs	r2, #15
    4ef8:	400a      	ands	r2, r1
    4efa:	2a04      	cmp	r2, #4
    4efc:	d005      	beq.n	4f0a <__aeabi_ddiv+0x3e6>
    4efe:	1d0a      	adds	r2, r1, #4
    4f00:	428a      	cmp	r2, r1
    4f02:	4189      	sbcs	r1, r1
    4f04:	4249      	negs	r1, r1
    4f06:	448b      	add	fp, r1
    4f08:	0011      	movs	r1, r2
    4f0a:	465a      	mov	r2, fp
    4f0c:	01d2      	lsls	r2, r2, #7
    4f0e:	d508      	bpl.n	4f22 <__aeabi_ddiv+0x3fe>
    4f10:	465a      	mov	r2, fp
    4f12:	4b8c      	ldr	r3, [pc, #560]	; (5144 <__aeabi_ddiv+0x620>)
    4f14:	401a      	ands	r2, r3
    4f16:	4693      	mov	fp, r2
    4f18:	2280      	movs	r2, #128	; 0x80
    4f1a:	00d2      	lsls	r2, r2, #3
    4f1c:	4694      	mov	ip, r2
    4f1e:	9b01      	ldr	r3, [sp, #4]
    4f20:	4463      	add	r3, ip
    4f22:	4a89      	ldr	r2, [pc, #548]	; (5148 <__aeabi_ddiv+0x624>)
    4f24:	4293      	cmp	r3, r2
    4f26:	dd00      	ble.n	4f2a <__aeabi_ddiv+0x406>
    4f28:	e65b      	b.n	4be2 <__aeabi_ddiv+0xbe>
    4f2a:	465a      	mov	r2, fp
    4f2c:	08c9      	lsrs	r1, r1, #3
    4f2e:	0750      	lsls	r0, r2, #29
    4f30:	4308      	orrs	r0, r1
    4f32:	0256      	lsls	r6, r2, #9
    4f34:	4651      	mov	r1, sl
    4f36:	2201      	movs	r2, #1
    4f38:	055b      	lsls	r3, r3, #21
    4f3a:	4681      	mov	r9, r0
    4f3c:	0b36      	lsrs	r6, r6, #12
    4f3e:	0d5b      	lsrs	r3, r3, #21
    4f40:	400a      	ands	r2, r1
    4f42:	e655      	b.n	4bf0 <__aeabi_ddiv+0xcc>
    4f44:	2380      	movs	r3, #128	; 0x80
    4f46:	031b      	lsls	r3, r3, #12
    4f48:	421e      	tst	r6, r3
    4f4a:	d011      	beq.n	4f70 <__aeabi_ddiv+0x44c>
    4f4c:	465a      	mov	r2, fp
    4f4e:	421a      	tst	r2, r3
    4f50:	d10e      	bne.n	4f70 <__aeabi_ddiv+0x44c>
    4f52:	465e      	mov	r6, fp
    4f54:	431e      	orrs	r6, r3
    4f56:	0336      	lsls	r6, r6, #12
    4f58:	0b36      	lsrs	r6, r6, #12
    4f5a:	002a      	movs	r2, r5
    4f5c:	4689      	mov	r9, r1
    4f5e:	4b7b      	ldr	r3, [pc, #492]	; (514c <__aeabi_ddiv+0x628>)
    4f60:	e646      	b.n	4bf0 <__aeabi_ddiv+0xcc>
    4f62:	2b03      	cmp	r3, #3
    4f64:	d100      	bne.n	4f68 <__aeabi_ddiv+0x444>
    4f66:	e0e1      	b.n	512c <__aeabi_ddiv+0x608>
    4f68:	2b01      	cmp	r3, #1
    4f6a:	d1bb      	bne.n	4ee4 <__aeabi_ddiv+0x3c0>
    4f6c:	401a      	ands	r2, r3
    4f6e:	e6bb      	b.n	4ce8 <__aeabi_ddiv+0x1c4>
    4f70:	431e      	orrs	r6, r3
    4f72:	0336      	lsls	r6, r6, #12
    4f74:	0b36      	lsrs	r6, r6, #12
    4f76:	4642      	mov	r2, r8
    4f78:	4b74      	ldr	r3, [pc, #464]	; (514c <__aeabi_ddiv+0x628>)
    4f7a:	e639      	b.n	4bf0 <__aeabi_ddiv+0xcc>
    4f7c:	2b00      	cmp	r3, #0
    4f7e:	d0b1      	beq.n	4ee4 <__aeabi_ddiv+0x3c0>
    4f80:	197d      	adds	r5, r7, r5
    4f82:	1e4a      	subs	r2, r1, #1
    4f84:	42af      	cmp	r7, r5
    4f86:	d952      	bls.n	502e <__aeabi_ddiv+0x50a>
    4f88:	0011      	movs	r1, r2
    4f8a:	42a5      	cmp	r5, r4
    4f8c:	d1a8      	bne.n	4ee0 <__aeabi_ddiv+0x3bc>
    4f8e:	9a03      	ldr	r2, [sp, #12]
    4f90:	429a      	cmp	r2, r3
    4f92:	d1a5      	bne.n	4ee0 <__aeabi_ddiv+0x3bc>
    4f94:	e7a6      	b.n	4ee4 <__aeabi_ddiv+0x3c0>
    4f96:	0003      	movs	r3, r0
    4f98:	003e      	movs	r6, r7
    4f9a:	3b28      	subs	r3, #40	; 0x28
    4f9c:	409e      	lsls	r6, r3
    4f9e:	2300      	movs	r3, #0
    4fa0:	4699      	mov	r9, r3
    4fa2:	e654      	b.n	4c4e <__aeabi_ddiv+0x12a>
    4fa4:	f001 fa26 	bl	63f4 <__clzsi2>
    4fa8:	3020      	adds	r0, #32
    4faa:	e641      	b.n	4c30 <__aeabi_ddiv+0x10c>
    4fac:	0003      	movs	r3, r0
    4fae:	4652      	mov	r2, sl
    4fb0:	3b28      	subs	r3, #40	; 0x28
    4fb2:	409a      	lsls	r2, r3
    4fb4:	2100      	movs	r1, #0
    4fb6:	4693      	mov	fp, r2
    4fb8:	e677      	b.n	4caa <__aeabi_ddiv+0x186>
    4fba:	4650      	mov	r0, sl
    4fbc:	f001 fa1a 	bl	63f4 <__clzsi2>
    4fc0:	3020      	adds	r0, #32
    4fc2:	e65e      	b.n	4c82 <__aeabi_ddiv+0x15e>
    4fc4:	9b02      	ldr	r3, [sp, #8]
    4fc6:	2600      	movs	r6, #0
    4fc8:	42ab      	cmp	r3, r5
    4fca:	d300      	bcc.n	4fce <__aeabi_ddiv+0x4aa>
    4fcc:	e723      	b.n	4e16 <__aeabi_ddiv+0x2f2>
    4fce:	9e03      	ldr	r6, [sp, #12]
    4fd0:	9902      	ldr	r1, [sp, #8]
    4fd2:	46b4      	mov	ip, r6
    4fd4:	4461      	add	r1, ip
    4fd6:	4688      	mov	r8, r1
    4fd8:	45b0      	cmp	r8, r6
    4fda:	41b6      	sbcs	r6, r6
    4fdc:	465b      	mov	r3, fp
    4fde:	4276      	negs	r6, r6
    4fe0:	19f6      	adds	r6, r6, r7
    4fe2:	18b2      	adds	r2, r6, r2
    4fe4:	3b01      	subs	r3, #1
    4fe6:	9102      	str	r1, [sp, #8]
    4fe8:	4297      	cmp	r7, r2
    4fea:	d213      	bcs.n	5014 <__aeabi_ddiv+0x4f0>
    4fec:	4290      	cmp	r0, r2
    4fee:	d84f      	bhi.n	5090 <__aeabi_ddiv+0x56c>
    4ff0:	d100      	bne.n	4ff4 <__aeabi_ddiv+0x4d0>
    4ff2:	e08e      	b.n	5112 <__aeabi_ddiv+0x5ee>
    4ff4:	1a16      	subs	r6, r2, r0
    4ff6:	469b      	mov	fp, r3
    4ff8:	e70d      	b.n	4e16 <__aeabi_ddiv+0x2f2>
    4ffa:	4589      	cmp	r9, r1
    4ffc:	d200      	bcs.n	5000 <__aeabi_ddiv+0x4dc>
    4ffe:	e68e      	b.n	4d1e <__aeabi_ddiv+0x1fa>
    5000:	0874      	lsrs	r4, r6, #1
    5002:	464b      	mov	r3, r9
    5004:	07f6      	lsls	r6, r6, #31
    5006:	0035      	movs	r5, r6
    5008:	085b      	lsrs	r3, r3, #1
    500a:	431d      	orrs	r5, r3
    500c:	464b      	mov	r3, r9
    500e:	07db      	lsls	r3, r3, #31
    5010:	9302      	str	r3, [sp, #8]
    5012:	e68b      	b.n	4d2c <__aeabi_ddiv+0x208>
    5014:	4297      	cmp	r7, r2
    5016:	d1ed      	bne.n	4ff4 <__aeabi_ddiv+0x4d0>
    5018:	9903      	ldr	r1, [sp, #12]
    501a:	9c02      	ldr	r4, [sp, #8]
    501c:	42a1      	cmp	r1, r4
    501e:	d9e5      	bls.n	4fec <__aeabi_ddiv+0x4c8>
    5020:	1a3e      	subs	r6, r7, r0
    5022:	469b      	mov	fp, r3
    5024:	e6f7      	b.n	4e16 <__aeabi_ddiv+0x2f2>
    5026:	4698      	mov	r8, r3
    5028:	e6ca      	b.n	4dc0 <__aeabi_ddiv+0x29c>
    502a:	001e      	movs	r6, r3
    502c:	e6a5      	b.n	4d7a <__aeabi_ddiv+0x256>
    502e:	42ac      	cmp	r4, r5
    5030:	d83e      	bhi.n	50b0 <__aeabi_ddiv+0x58c>
    5032:	d074      	beq.n	511e <__aeabi_ddiv+0x5fa>
    5034:	0011      	movs	r1, r2
    5036:	e753      	b.n	4ee0 <__aeabi_ddiv+0x3bc>
    5038:	2101      	movs	r1, #1
    503a:	4249      	negs	r1, r1
    503c:	e752      	b.n	4ee4 <__aeabi_ddiv+0x3c0>
    503e:	001c      	movs	r4, r3
    5040:	e70e      	b.n	4e60 <__aeabi_ddiv+0x33c>
    5042:	001e      	movs	r6, r3
    5044:	e72b      	b.n	4e9e <__aeabi_ddiv+0x37a>
    5046:	2d1f      	cmp	r5, #31
    5048:	dc3c      	bgt.n	50c4 <__aeabi_ddiv+0x5a0>
    504a:	2320      	movs	r3, #32
    504c:	000a      	movs	r2, r1
    504e:	4658      	mov	r0, fp
    5050:	1b5b      	subs	r3, r3, r5
    5052:	4098      	lsls	r0, r3
    5054:	40ea      	lsrs	r2, r5
    5056:	4099      	lsls	r1, r3
    5058:	4302      	orrs	r2, r0
    505a:	1e48      	subs	r0, r1, #1
    505c:	4181      	sbcs	r1, r0
    505e:	465e      	mov	r6, fp
    5060:	4311      	orrs	r1, r2
    5062:	40ee      	lsrs	r6, r5
    5064:	074b      	lsls	r3, r1, #29
    5066:	d009      	beq.n	507c <__aeabi_ddiv+0x558>
    5068:	230f      	movs	r3, #15
    506a:	400b      	ands	r3, r1
    506c:	2b04      	cmp	r3, #4
    506e:	d005      	beq.n	507c <__aeabi_ddiv+0x558>
    5070:	000b      	movs	r3, r1
    5072:	1d19      	adds	r1, r3, #4
    5074:	4299      	cmp	r1, r3
    5076:	419b      	sbcs	r3, r3
    5078:	425b      	negs	r3, r3
    507a:	18f6      	adds	r6, r6, r3
    507c:	0233      	lsls	r3, r6, #8
    507e:	d53c      	bpl.n	50fa <__aeabi_ddiv+0x5d6>
    5080:	4653      	mov	r3, sl
    5082:	2201      	movs	r2, #1
    5084:	2100      	movs	r1, #0
    5086:	401a      	ands	r2, r3
    5088:	2600      	movs	r6, #0
    508a:	2301      	movs	r3, #1
    508c:	4689      	mov	r9, r1
    508e:	e5af      	b.n	4bf0 <__aeabi_ddiv+0xcc>
    5090:	2302      	movs	r3, #2
    5092:	425b      	negs	r3, r3
    5094:	469c      	mov	ip, r3
    5096:	9c03      	ldr	r4, [sp, #12]
    5098:	44e3      	add	fp, ip
    509a:	46a4      	mov	ip, r4
    509c:	9b02      	ldr	r3, [sp, #8]
    509e:	4463      	add	r3, ip
    50a0:	4698      	mov	r8, r3
    50a2:	45a0      	cmp	r8, r4
    50a4:	41b6      	sbcs	r6, r6
    50a6:	4276      	negs	r6, r6
    50a8:	19f6      	adds	r6, r6, r7
    50aa:	9302      	str	r3, [sp, #8]
    50ac:	18b2      	adds	r2, r6, r2
    50ae:	e6b1      	b.n	4e14 <__aeabi_ddiv+0x2f0>
    50b0:	9803      	ldr	r0, [sp, #12]
    50b2:	1e8a      	subs	r2, r1, #2
    50b4:	0041      	lsls	r1, r0, #1
    50b6:	4281      	cmp	r1, r0
    50b8:	41b6      	sbcs	r6, r6
    50ba:	4276      	negs	r6, r6
    50bc:	19f6      	adds	r6, r6, r7
    50be:	19ad      	adds	r5, r5, r6
    50c0:	9103      	str	r1, [sp, #12]
    50c2:	e761      	b.n	4f88 <__aeabi_ddiv+0x464>
    50c4:	221f      	movs	r2, #31
    50c6:	4252      	negs	r2, r2
    50c8:	1ad3      	subs	r3, r2, r3
    50ca:	465a      	mov	r2, fp
    50cc:	40da      	lsrs	r2, r3
    50ce:	0013      	movs	r3, r2
    50d0:	2d20      	cmp	r5, #32
    50d2:	d029      	beq.n	5128 <__aeabi_ddiv+0x604>
    50d4:	2240      	movs	r2, #64	; 0x40
    50d6:	4658      	mov	r0, fp
    50d8:	1b55      	subs	r5, r2, r5
    50da:	40a8      	lsls	r0, r5
    50dc:	4301      	orrs	r1, r0
    50de:	1e48      	subs	r0, r1, #1
    50e0:	4181      	sbcs	r1, r0
    50e2:	2007      	movs	r0, #7
    50e4:	430b      	orrs	r3, r1
    50e6:	4018      	ands	r0, r3
    50e8:	2600      	movs	r6, #0
    50ea:	2800      	cmp	r0, #0
    50ec:	d009      	beq.n	5102 <__aeabi_ddiv+0x5de>
    50ee:	220f      	movs	r2, #15
    50f0:	2600      	movs	r6, #0
    50f2:	401a      	ands	r2, r3
    50f4:	0019      	movs	r1, r3
    50f6:	2a04      	cmp	r2, #4
    50f8:	d1bb      	bne.n	5072 <__aeabi_ddiv+0x54e>
    50fa:	000b      	movs	r3, r1
    50fc:	0770      	lsls	r0, r6, #29
    50fe:	0276      	lsls	r6, r6, #9
    5100:	0b36      	lsrs	r6, r6, #12
    5102:	08db      	lsrs	r3, r3, #3
    5104:	4303      	orrs	r3, r0
    5106:	4699      	mov	r9, r3
    5108:	2201      	movs	r2, #1
    510a:	4653      	mov	r3, sl
    510c:	401a      	ands	r2, r3
    510e:	2300      	movs	r3, #0
    5110:	e56e      	b.n	4bf0 <__aeabi_ddiv+0xcc>
    5112:	9902      	ldr	r1, [sp, #8]
    5114:	428d      	cmp	r5, r1
    5116:	d8bb      	bhi.n	5090 <__aeabi_ddiv+0x56c>
    5118:	469b      	mov	fp, r3
    511a:	2600      	movs	r6, #0
    511c:	e67b      	b.n	4e16 <__aeabi_ddiv+0x2f2>
    511e:	9803      	ldr	r0, [sp, #12]
    5120:	4298      	cmp	r0, r3
    5122:	d3c5      	bcc.n	50b0 <__aeabi_ddiv+0x58c>
    5124:	0011      	movs	r1, r2
    5126:	e732      	b.n	4f8e <__aeabi_ddiv+0x46a>
    5128:	2000      	movs	r0, #0
    512a:	e7d7      	b.n	50dc <__aeabi_ddiv+0x5b8>
    512c:	2680      	movs	r6, #128	; 0x80
    512e:	465b      	mov	r3, fp
    5130:	0336      	lsls	r6, r6, #12
    5132:	431e      	orrs	r6, r3
    5134:	0336      	lsls	r6, r6, #12
    5136:	0b36      	lsrs	r6, r6, #12
    5138:	9a00      	ldr	r2, [sp, #0]
    513a:	4689      	mov	r9, r1
    513c:	4b03      	ldr	r3, [pc, #12]	; (514c <__aeabi_ddiv+0x628>)
    513e:	e557      	b.n	4bf0 <__aeabi_ddiv+0xcc>
    5140:	000003ff 	.word	0x000003ff
    5144:	feffffff 	.word	0xfeffffff
    5148:	000007fe 	.word	0x000007fe
    514c:	000007ff 	.word	0x000007ff

00005150 <__eqdf2>:
    5150:	b5f0      	push	{r4, r5, r6, r7, lr}
    5152:	465f      	mov	r7, fp
    5154:	4656      	mov	r6, sl
    5156:	464d      	mov	r5, r9
    5158:	4644      	mov	r4, r8
    515a:	b4f0      	push	{r4, r5, r6, r7}
    515c:	031f      	lsls	r7, r3, #12
    515e:	005c      	lsls	r4, r3, #1
    5160:	0fdb      	lsrs	r3, r3, #31
    5162:	469a      	mov	sl, r3
    5164:	4b19      	ldr	r3, [pc, #100]	; (51cc <__eqdf2+0x7c>)
    5166:	030e      	lsls	r6, r1, #12
    5168:	004d      	lsls	r5, r1, #1
    516a:	0fc9      	lsrs	r1, r1, #31
    516c:	4680      	mov	r8, r0
    516e:	0b36      	lsrs	r6, r6, #12
    5170:	0d6d      	lsrs	r5, r5, #21
    5172:	468b      	mov	fp, r1
    5174:	4691      	mov	r9, r2
    5176:	0b3f      	lsrs	r7, r7, #12
    5178:	0d64      	lsrs	r4, r4, #21
    517a:	429d      	cmp	r5, r3
    517c:	d019      	beq.n	51b2 <__eqdf2+0x62>
    517e:	4b13      	ldr	r3, [pc, #76]	; (51cc <__eqdf2+0x7c>)
    5180:	429c      	cmp	r4, r3
    5182:	d01b      	beq.n	51bc <__eqdf2+0x6c>
    5184:	2301      	movs	r3, #1
    5186:	42a5      	cmp	r5, r4
    5188:	d006      	beq.n	5198 <__eqdf2+0x48>
    518a:	0018      	movs	r0, r3
    518c:	bc3c      	pop	{r2, r3, r4, r5}
    518e:	4690      	mov	r8, r2
    5190:	4699      	mov	r9, r3
    5192:	46a2      	mov	sl, r4
    5194:	46ab      	mov	fp, r5
    5196:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5198:	42be      	cmp	r6, r7
    519a:	d1f6      	bne.n	518a <__eqdf2+0x3a>
    519c:	45c8      	cmp	r8, r9
    519e:	d1f4      	bne.n	518a <__eqdf2+0x3a>
    51a0:	45d3      	cmp	fp, sl
    51a2:	d010      	beq.n	51c6 <__eqdf2+0x76>
    51a4:	2d00      	cmp	r5, #0
    51a6:	d1f0      	bne.n	518a <__eqdf2+0x3a>
    51a8:	4330      	orrs	r0, r6
    51aa:	0003      	movs	r3, r0
    51ac:	1e5a      	subs	r2, r3, #1
    51ae:	4193      	sbcs	r3, r2
    51b0:	e7eb      	b.n	518a <__eqdf2+0x3a>
    51b2:	0031      	movs	r1, r6
    51b4:	2301      	movs	r3, #1
    51b6:	4301      	orrs	r1, r0
    51b8:	d1e7      	bne.n	518a <__eqdf2+0x3a>
    51ba:	e7e0      	b.n	517e <__eqdf2+0x2e>
    51bc:	433a      	orrs	r2, r7
    51be:	2301      	movs	r3, #1
    51c0:	2a00      	cmp	r2, #0
    51c2:	d1e2      	bne.n	518a <__eqdf2+0x3a>
    51c4:	e7de      	b.n	5184 <__eqdf2+0x34>
    51c6:	2300      	movs	r3, #0
    51c8:	e7df      	b.n	518a <__eqdf2+0x3a>
    51ca:	46c0      	nop			; (mov r8, r8)
    51cc:	000007ff 	.word	0x000007ff

000051d0 <__gedf2>:
    51d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    51d2:	465f      	mov	r7, fp
    51d4:	4644      	mov	r4, r8
    51d6:	4656      	mov	r6, sl
    51d8:	464d      	mov	r5, r9
    51da:	b4f0      	push	{r4, r5, r6, r7}
    51dc:	031f      	lsls	r7, r3, #12
    51de:	0b3c      	lsrs	r4, r7, #12
    51e0:	4f2c      	ldr	r7, [pc, #176]	; (5294 <__gedf2+0xc4>)
    51e2:	030e      	lsls	r6, r1, #12
    51e4:	004d      	lsls	r5, r1, #1
    51e6:	46a3      	mov	fp, r4
    51e8:	005c      	lsls	r4, r3, #1
    51ea:	4684      	mov	ip, r0
    51ec:	0b36      	lsrs	r6, r6, #12
    51ee:	0d6d      	lsrs	r5, r5, #21
    51f0:	0fc9      	lsrs	r1, r1, #31
    51f2:	4690      	mov	r8, r2
    51f4:	0d64      	lsrs	r4, r4, #21
    51f6:	0fdb      	lsrs	r3, r3, #31
    51f8:	42bd      	cmp	r5, r7
    51fa:	d02b      	beq.n	5254 <__gedf2+0x84>
    51fc:	4f25      	ldr	r7, [pc, #148]	; (5294 <__gedf2+0xc4>)
    51fe:	42bc      	cmp	r4, r7
    5200:	d02e      	beq.n	5260 <__gedf2+0x90>
    5202:	2d00      	cmp	r5, #0
    5204:	d10e      	bne.n	5224 <__gedf2+0x54>
    5206:	4330      	orrs	r0, r6
    5208:	0007      	movs	r7, r0
    520a:	4681      	mov	r9, r0
    520c:	4278      	negs	r0, r7
    520e:	4178      	adcs	r0, r7
    5210:	2c00      	cmp	r4, #0
    5212:	d117      	bne.n	5244 <__gedf2+0x74>
    5214:	465f      	mov	r7, fp
    5216:	433a      	orrs	r2, r7
    5218:	d114      	bne.n	5244 <__gedf2+0x74>
    521a:	464b      	mov	r3, r9
    521c:	2000      	movs	r0, #0
    521e:	2b00      	cmp	r3, #0
    5220:	d00a      	beq.n	5238 <__gedf2+0x68>
    5222:	e006      	b.n	5232 <__gedf2+0x62>
    5224:	2c00      	cmp	r4, #0
    5226:	d102      	bne.n	522e <__gedf2+0x5e>
    5228:	4658      	mov	r0, fp
    522a:	4302      	orrs	r2, r0
    522c:	d001      	beq.n	5232 <__gedf2+0x62>
    522e:	4299      	cmp	r1, r3
    5230:	d01a      	beq.n	5268 <__gedf2+0x98>
    5232:	2301      	movs	r3, #1
    5234:	4248      	negs	r0, r1
    5236:	4318      	orrs	r0, r3
    5238:	bc3c      	pop	{r2, r3, r4, r5}
    523a:	4690      	mov	r8, r2
    523c:	4699      	mov	r9, r3
    523e:	46a2      	mov	sl, r4
    5240:	46ab      	mov	fp, r5
    5242:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5244:	2800      	cmp	r0, #0
    5246:	d0f2      	beq.n	522e <__gedf2+0x5e>
    5248:	4258      	negs	r0, r3
    524a:	4158      	adcs	r0, r3
    524c:	2201      	movs	r2, #1
    524e:	4240      	negs	r0, r0
    5250:	4310      	orrs	r0, r2
    5252:	e7f1      	b.n	5238 <__gedf2+0x68>
    5254:	0037      	movs	r7, r6
    5256:	4307      	orrs	r7, r0
    5258:	d0d0      	beq.n	51fc <__gedf2+0x2c>
    525a:	2002      	movs	r0, #2
    525c:	4240      	negs	r0, r0
    525e:	e7eb      	b.n	5238 <__gedf2+0x68>
    5260:	465f      	mov	r7, fp
    5262:	4317      	orrs	r7, r2
    5264:	d0cd      	beq.n	5202 <__gedf2+0x32>
    5266:	e7f8      	b.n	525a <__gedf2+0x8a>
    5268:	42a5      	cmp	r5, r4
    526a:	dce2      	bgt.n	5232 <__gedf2+0x62>
    526c:	db05      	blt.n	527a <__gedf2+0xaa>
    526e:	455e      	cmp	r6, fp
    5270:	d8df      	bhi.n	5232 <__gedf2+0x62>
    5272:	d008      	beq.n	5286 <__gedf2+0xb6>
    5274:	2000      	movs	r0, #0
    5276:	455e      	cmp	r6, fp
    5278:	d2de      	bcs.n	5238 <__gedf2+0x68>
    527a:	4248      	negs	r0, r1
    527c:	4148      	adcs	r0, r1
    527e:	2301      	movs	r3, #1
    5280:	4240      	negs	r0, r0
    5282:	4318      	orrs	r0, r3
    5284:	e7d8      	b.n	5238 <__gedf2+0x68>
    5286:	45c4      	cmp	ip, r8
    5288:	d8d3      	bhi.n	5232 <__gedf2+0x62>
    528a:	2000      	movs	r0, #0
    528c:	45c4      	cmp	ip, r8
    528e:	d3f4      	bcc.n	527a <__gedf2+0xaa>
    5290:	e7d2      	b.n	5238 <__gedf2+0x68>
    5292:	46c0      	nop			; (mov r8, r8)
    5294:	000007ff 	.word	0x000007ff

00005298 <__ledf2>:
    5298:	b5f0      	push	{r4, r5, r6, r7, lr}
    529a:	465f      	mov	r7, fp
    529c:	464d      	mov	r5, r9
    529e:	4644      	mov	r4, r8
    52a0:	4656      	mov	r6, sl
    52a2:	b4f0      	push	{r4, r5, r6, r7}
    52a4:	031c      	lsls	r4, r3, #12
    52a6:	0b24      	lsrs	r4, r4, #12
    52a8:	46a4      	mov	ip, r4
    52aa:	4c2f      	ldr	r4, [pc, #188]	; (5368 <__ledf2+0xd0>)
    52ac:	030f      	lsls	r7, r1, #12
    52ae:	004d      	lsls	r5, r1, #1
    52b0:	005e      	lsls	r6, r3, #1
    52b2:	0fc9      	lsrs	r1, r1, #31
    52b4:	4680      	mov	r8, r0
    52b6:	0b3f      	lsrs	r7, r7, #12
    52b8:	0d6d      	lsrs	r5, r5, #21
    52ba:	468b      	mov	fp, r1
    52bc:	4691      	mov	r9, r2
    52be:	0d76      	lsrs	r6, r6, #21
    52c0:	0fdb      	lsrs	r3, r3, #31
    52c2:	42a5      	cmp	r5, r4
    52c4:	d020      	beq.n	5308 <__ledf2+0x70>
    52c6:	4c28      	ldr	r4, [pc, #160]	; (5368 <__ledf2+0xd0>)
    52c8:	42a6      	cmp	r6, r4
    52ca:	d022      	beq.n	5312 <__ledf2+0x7a>
    52cc:	2d00      	cmp	r5, #0
    52ce:	d112      	bne.n	52f6 <__ledf2+0x5e>
    52d0:	4338      	orrs	r0, r7
    52d2:	4244      	negs	r4, r0
    52d4:	4144      	adcs	r4, r0
    52d6:	2e00      	cmp	r6, #0
    52d8:	d020      	beq.n	531c <__ledf2+0x84>
    52da:	2c00      	cmp	r4, #0
    52dc:	d00d      	beq.n	52fa <__ledf2+0x62>
    52de:	425c      	negs	r4, r3
    52e0:	4163      	adcs	r3, r4
    52e2:	2401      	movs	r4, #1
    52e4:	425b      	negs	r3, r3
    52e6:	431c      	orrs	r4, r3
    52e8:	0020      	movs	r0, r4
    52ea:	bc3c      	pop	{r2, r3, r4, r5}
    52ec:	4690      	mov	r8, r2
    52ee:	4699      	mov	r9, r3
    52f0:	46a2      	mov	sl, r4
    52f2:	46ab      	mov	fp, r5
    52f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    52f6:	2e00      	cmp	r6, #0
    52f8:	d017      	beq.n	532a <__ledf2+0x92>
    52fa:	455b      	cmp	r3, fp
    52fc:	d019      	beq.n	5332 <__ledf2+0x9a>
    52fe:	465b      	mov	r3, fp
    5300:	425c      	negs	r4, r3
    5302:	2301      	movs	r3, #1
    5304:	431c      	orrs	r4, r3
    5306:	e7ef      	b.n	52e8 <__ledf2+0x50>
    5308:	0039      	movs	r1, r7
    530a:	2402      	movs	r4, #2
    530c:	4301      	orrs	r1, r0
    530e:	d1eb      	bne.n	52e8 <__ledf2+0x50>
    5310:	e7d9      	b.n	52c6 <__ledf2+0x2e>
    5312:	4661      	mov	r1, ip
    5314:	2402      	movs	r4, #2
    5316:	4311      	orrs	r1, r2
    5318:	d1e6      	bne.n	52e8 <__ledf2+0x50>
    531a:	e7d7      	b.n	52cc <__ledf2+0x34>
    531c:	4661      	mov	r1, ip
    531e:	430a      	orrs	r2, r1
    5320:	d1db      	bne.n	52da <__ledf2+0x42>
    5322:	2400      	movs	r4, #0
    5324:	2800      	cmp	r0, #0
    5326:	d0df      	beq.n	52e8 <__ledf2+0x50>
    5328:	e7e9      	b.n	52fe <__ledf2+0x66>
    532a:	4661      	mov	r1, ip
    532c:	430a      	orrs	r2, r1
    532e:	d1e4      	bne.n	52fa <__ledf2+0x62>
    5330:	e7e5      	b.n	52fe <__ledf2+0x66>
    5332:	42b5      	cmp	r5, r6
    5334:	dd03      	ble.n	533e <__ledf2+0xa6>
    5336:	2201      	movs	r2, #1
    5338:	425c      	negs	r4, r3
    533a:	4314      	orrs	r4, r2
    533c:	e7d4      	b.n	52e8 <__ledf2+0x50>
    533e:	42b5      	cmp	r5, r6
    5340:	dbcd      	blt.n	52de <__ledf2+0x46>
    5342:	4567      	cmp	r7, ip
    5344:	d8db      	bhi.n	52fe <__ledf2+0x66>
    5346:	d009      	beq.n	535c <__ledf2+0xc4>
    5348:	2400      	movs	r4, #0
    534a:	4567      	cmp	r7, ip
    534c:	d2cc      	bcs.n	52e8 <__ledf2+0x50>
    534e:	4659      	mov	r1, fp
    5350:	424c      	negs	r4, r1
    5352:	4161      	adcs	r1, r4
    5354:	2401      	movs	r4, #1
    5356:	4249      	negs	r1, r1
    5358:	430c      	orrs	r4, r1
    535a:	e7c5      	b.n	52e8 <__ledf2+0x50>
    535c:	45c8      	cmp	r8, r9
    535e:	d8ce      	bhi.n	52fe <__ledf2+0x66>
    5360:	2400      	movs	r4, #0
    5362:	45c8      	cmp	r8, r9
    5364:	d3f3      	bcc.n	534e <__ledf2+0xb6>
    5366:	e7bf      	b.n	52e8 <__ledf2+0x50>
    5368:	000007ff 	.word	0x000007ff

0000536c <__aeabi_dmul>:
    536c:	b5f0      	push	{r4, r5, r6, r7, lr}
    536e:	465f      	mov	r7, fp
    5370:	4656      	mov	r6, sl
    5372:	464d      	mov	r5, r9
    5374:	4644      	mov	r4, r8
    5376:	b4f0      	push	{r4, r5, r6, r7}
    5378:	030d      	lsls	r5, r1, #12
    537a:	4699      	mov	r9, r3
    537c:	004e      	lsls	r6, r1, #1
    537e:	0b2b      	lsrs	r3, r5, #12
    5380:	b087      	sub	sp, #28
    5382:	0007      	movs	r7, r0
    5384:	4692      	mov	sl, r2
    5386:	4680      	mov	r8, r0
    5388:	469b      	mov	fp, r3
    538a:	0d76      	lsrs	r6, r6, #21
    538c:	0fcc      	lsrs	r4, r1, #31
    538e:	2e00      	cmp	r6, #0
    5390:	d069      	beq.n	5466 <__aeabi_dmul+0xfa>
    5392:	4b6d      	ldr	r3, [pc, #436]	; (5548 <__aeabi_dmul+0x1dc>)
    5394:	429e      	cmp	r6, r3
    5396:	d035      	beq.n	5404 <__aeabi_dmul+0x98>
    5398:	465b      	mov	r3, fp
    539a:	2280      	movs	r2, #128	; 0x80
    539c:	00dd      	lsls	r5, r3, #3
    539e:	0412      	lsls	r2, r2, #16
    53a0:	0f43      	lsrs	r3, r0, #29
    53a2:	4313      	orrs	r3, r2
    53a4:	432b      	orrs	r3, r5
    53a6:	469b      	mov	fp, r3
    53a8:	00c3      	lsls	r3, r0, #3
    53aa:	4698      	mov	r8, r3
    53ac:	4b67      	ldr	r3, [pc, #412]	; (554c <__aeabi_dmul+0x1e0>)
    53ae:	2700      	movs	r7, #0
    53b0:	469c      	mov	ip, r3
    53b2:	2300      	movs	r3, #0
    53b4:	4466      	add	r6, ip
    53b6:	9301      	str	r3, [sp, #4]
    53b8:	464a      	mov	r2, r9
    53ba:	0315      	lsls	r5, r2, #12
    53bc:	0050      	lsls	r0, r2, #1
    53be:	0fd2      	lsrs	r2, r2, #31
    53c0:	4653      	mov	r3, sl
    53c2:	0b2d      	lsrs	r5, r5, #12
    53c4:	0d40      	lsrs	r0, r0, #21
    53c6:	4691      	mov	r9, r2
    53c8:	d100      	bne.n	53cc <__aeabi_dmul+0x60>
    53ca:	e076      	b.n	54ba <__aeabi_dmul+0x14e>
    53cc:	4a5e      	ldr	r2, [pc, #376]	; (5548 <__aeabi_dmul+0x1dc>)
    53ce:	4290      	cmp	r0, r2
    53d0:	d06c      	beq.n	54ac <__aeabi_dmul+0x140>
    53d2:	2280      	movs	r2, #128	; 0x80
    53d4:	0f5b      	lsrs	r3, r3, #29
    53d6:	0412      	lsls	r2, r2, #16
    53d8:	4313      	orrs	r3, r2
    53da:	4a5c      	ldr	r2, [pc, #368]	; (554c <__aeabi_dmul+0x1e0>)
    53dc:	00ed      	lsls	r5, r5, #3
    53de:	4694      	mov	ip, r2
    53e0:	431d      	orrs	r5, r3
    53e2:	4653      	mov	r3, sl
    53e4:	2200      	movs	r2, #0
    53e6:	00db      	lsls	r3, r3, #3
    53e8:	4460      	add	r0, ip
    53ea:	4649      	mov	r1, r9
    53ec:	1836      	adds	r6, r6, r0
    53ee:	1c70      	adds	r0, r6, #1
    53f0:	4061      	eors	r1, r4
    53f2:	9002      	str	r0, [sp, #8]
    53f4:	4317      	orrs	r7, r2
    53f6:	2f0f      	cmp	r7, #15
    53f8:	d900      	bls.n	53fc <__aeabi_dmul+0x90>
    53fa:	e0af      	b.n	555c <__aeabi_dmul+0x1f0>
    53fc:	4854      	ldr	r0, [pc, #336]	; (5550 <__aeabi_dmul+0x1e4>)
    53fe:	00bf      	lsls	r7, r7, #2
    5400:	59c7      	ldr	r7, [r0, r7]
    5402:	46bf      	mov	pc, r7
    5404:	465b      	mov	r3, fp
    5406:	431f      	orrs	r7, r3
    5408:	d000      	beq.n	540c <__aeabi_dmul+0xa0>
    540a:	e088      	b.n	551e <__aeabi_dmul+0x1b2>
    540c:	2300      	movs	r3, #0
    540e:	469b      	mov	fp, r3
    5410:	4698      	mov	r8, r3
    5412:	3302      	adds	r3, #2
    5414:	2708      	movs	r7, #8
    5416:	9301      	str	r3, [sp, #4]
    5418:	e7ce      	b.n	53b8 <__aeabi_dmul+0x4c>
    541a:	4649      	mov	r1, r9
    541c:	2a02      	cmp	r2, #2
    541e:	d06a      	beq.n	54f6 <__aeabi_dmul+0x18a>
    5420:	2a03      	cmp	r2, #3
    5422:	d100      	bne.n	5426 <__aeabi_dmul+0xba>
    5424:	e209      	b.n	583a <__aeabi_dmul+0x4ce>
    5426:	2a01      	cmp	r2, #1
    5428:	d000      	beq.n	542c <__aeabi_dmul+0xc0>
    542a:	e1bb      	b.n	57a4 <__aeabi_dmul+0x438>
    542c:	4011      	ands	r1, r2
    542e:	2200      	movs	r2, #0
    5430:	2300      	movs	r3, #0
    5432:	2500      	movs	r5, #0
    5434:	4690      	mov	r8, r2
    5436:	b2cc      	uxtb	r4, r1
    5438:	2100      	movs	r1, #0
    543a:	032d      	lsls	r5, r5, #12
    543c:	0d0a      	lsrs	r2, r1, #20
    543e:	0512      	lsls	r2, r2, #20
    5440:	0b2d      	lsrs	r5, r5, #12
    5442:	4315      	orrs	r5, r2
    5444:	4a43      	ldr	r2, [pc, #268]	; (5554 <__aeabi_dmul+0x1e8>)
    5446:	051b      	lsls	r3, r3, #20
    5448:	4015      	ands	r5, r2
    544a:	431d      	orrs	r5, r3
    544c:	006d      	lsls	r5, r5, #1
    544e:	07e4      	lsls	r4, r4, #31
    5450:	086d      	lsrs	r5, r5, #1
    5452:	4325      	orrs	r5, r4
    5454:	4640      	mov	r0, r8
    5456:	0029      	movs	r1, r5
    5458:	b007      	add	sp, #28
    545a:	bc3c      	pop	{r2, r3, r4, r5}
    545c:	4690      	mov	r8, r2
    545e:	4699      	mov	r9, r3
    5460:	46a2      	mov	sl, r4
    5462:	46ab      	mov	fp, r5
    5464:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5466:	4303      	orrs	r3, r0
    5468:	d052      	beq.n	5510 <__aeabi_dmul+0x1a4>
    546a:	465b      	mov	r3, fp
    546c:	2b00      	cmp	r3, #0
    546e:	d100      	bne.n	5472 <__aeabi_dmul+0x106>
    5470:	e18a      	b.n	5788 <__aeabi_dmul+0x41c>
    5472:	4658      	mov	r0, fp
    5474:	f000 ffbe 	bl	63f4 <__clzsi2>
    5478:	0003      	movs	r3, r0
    547a:	3b0b      	subs	r3, #11
    547c:	2b1c      	cmp	r3, #28
    547e:	dd00      	ble.n	5482 <__aeabi_dmul+0x116>
    5480:	e17b      	b.n	577a <__aeabi_dmul+0x40e>
    5482:	221d      	movs	r2, #29
    5484:	1ad3      	subs	r3, r2, r3
    5486:	003a      	movs	r2, r7
    5488:	0001      	movs	r1, r0
    548a:	465d      	mov	r5, fp
    548c:	40da      	lsrs	r2, r3
    548e:	3908      	subs	r1, #8
    5490:	408d      	lsls	r5, r1
    5492:	0013      	movs	r3, r2
    5494:	408f      	lsls	r7, r1
    5496:	432b      	orrs	r3, r5
    5498:	469b      	mov	fp, r3
    549a:	46b8      	mov	r8, r7
    549c:	4b2e      	ldr	r3, [pc, #184]	; (5558 <__aeabi_dmul+0x1ec>)
    549e:	2700      	movs	r7, #0
    54a0:	469c      	mov	ip, r3
    54a2:	2300      	movs	r3, #0
    54a4:	4460      	add	r0, ip
    54a6:	4246      	negs	r6, r0
    54a8:	9301      	str	r3, [sp, #4]
    54aa:	e785      	b.n	53b8 <__aeabi_dmul+0x4c>
    54ac:	4652      	mov	r2, sl
    54ae:	432a      	orrs	r2, r5
    54b0:	d12c      	bne.n	550c <__aeabi_dmul+0x1a0>
    54b2:	2500      	movs	r5, #0
    54b4:	2300      	movs	r3, #0
    54b6:	2202      	movs	r2, #2
    54b8:	e797      	b.n	53ea <__aeabi_dmul+0x7e>
    54ba:	4652      	mov	r2, sl
    54bc:	432a      	orrs	r2, r5
    54be:	d021      	beq.n	5504 <__aeabi_dmul+0x198>
    54c0:	2d00      	cmp	r5, #0
    54c2:	d100      	bne.n	54c6 <__aeabi_dmul+0x15a>
    54c4:	e154      	b.n	5770 <__aeabi_dmul+0x404>
    54c6:	0028      	movs	r0, r5
    54c8:	f000 ff94 	bl	63f4 <__clzsi2>
    54cc:	0003      	movs	r3, r0
    54ce:	3b0b      	subs	r3, #11
    54d0:	2b1c      	cmp	r3, #28
    54d2:	dd00      	ble.n	54d6 <__aeabi_dmul+0x16a>
    54d4:	e146      	b.n	5764 <__aeabi_dmul+0x3f8>
    54d6:	211d      	movs	r1, #29
    54d8:	1acb      	subs	r3, r1, r3
    54da:	4651      	mov	r1, sl
    54dc:	0002      	movs	r2, r0
    54de:	40d9      	lsrs	r1, r3
    54e0:	4653      	mov	r3, sl
    54e2:	3a08      	subs	r2, #8
    54e4:	4095      	lsls	r5, r2
    54e6:	4093      	lsls	r3, r2
    54e8:	430d      	orrs	r5, r1
    54ea:	4a1b      	ldr	r2, [pc, #108]	; (5558 <__aeabi_dmul+0x1ec>)
    54ec:	4694      	mov	ip, r2
    54ee:	4460      	add	r0, ip
    54f0:	4240      	negs	r0, r0
    54f2:	2200      	movs	r2, #0
    54f4:	e779      	b.n	53ea <__aeabi_dmul+0x7e>
    54f6:	2401      	movs	r4, #1
    54f8:	2200      	movs	r2, #0
    54fa:	400c      	ands	r4, r1
    54fc:	4b12      	ldr	r3, [pc, #72]	; (5548 <__aeabi_dmul+0x1dc>)
    54fe:	2500      	movs	r5, #0
    5500:	4690      	mov	r8, r2
    5502:	e799      	b.n	5438 <__aeabi_dmul+0xcc>
    5504:	2500      	movs	r5, #0
    5506:	2300      	movs	r3, #0
    5508:	2201      	movs	r2, #1
    550a:	e76e      	b.n	53ea <__aeabi_dmul+0x7e>
    550c:	2203      	movs	r2, #3
    550e:	e76c      	b.n	53ea <__aeabi_dmul+0x7e>
    5510:	2300      	movs	r3, #0
    5512:	469b      	mov	fp, r3
    5514:	4698      	mov	r8, r3
    5516:	3301      	adds	r3, #1
    5518:	2704      	movs	r7, #4
    551a:	9301      	str	r3, [sp, #4]
    551c:	e74c      	b.n	53b8 <__aeabi_dmul+0x4c>
    551e:	2303      	movs	r3, #3
    5520:	270c      	movs	r7, #12
    5522:	9301      	str	r3, [sp, #4]
    5524:	e748      	b.n	53b8 <__aeabi_dmul+0x4c>
    5526:	2300      	movs	r3, #0
    5528:	2580      	movs	r5, #128	; 0x80
    552a:	4698      	mov	r8, r3
    552c:	2400      	movs	r4, #0
    552e:	032d      	lsls	r5, r5, #12
    5530:	4b05      	ldr	r3, [pc, #20]	; (5548 <__aeabi_dmul+0x1dc>)
    5532:	e781      	b.n	5438 <__aeabi_dmul+0xcc>
    5534:	465d      	mov	r5, fp
    5536:	4643      	mov	r3, r8
    5538:	9a01      	ldr	r2, [sp, #4]
    553a:	e76f      	b.n	541c <__aeabi_dmul+0xb0>
    553c:	465d      	mov	r5, fp
    553e:	4643      	mov	r3, r8
    5540:	0021      	movs	r1, r4
    5542:	9a01      	ldr	r2, [sp, #4]
    5544:	e76a      	b.n	541c <__aeabi_dmul+0xb0>
    5546:	46c0      	nop			; (mov r8, r8)
    5548:	000007ff 	.word	0x000007ff
    554c:	fffffc01 	.word	0xfffffc01
    5550:	000067d0 	.word	0x000067d0
    5554:	800fffff 	.word	0x800fffff
    5558:	000003f3 	.word	0x000003f3
    555c:	4642      	mov	r2, r8
    555e:	0c12      	lsrs	r2, r2, #16
    5560:	4691      	mov	r9, r2
    5562:	0c1a      	lsrs	r2, r3, #16
    5564:	4694      	mov	ip, r2
    5566:	4642      	mov	r2, r8
    5568:	0417      	lsls	r7, r2, #16
    556a:	464a      	mov	r2, r9
    556c:	041b      	lsls	r3, r3, #16
    556e:	0c1b      	lsrs	r3, r3, #16
    5570:	435a      	muls	r2, r3
    5572:	4660      	mov	r0, ip
    5574:	4690      	mov	r8, r2
    5576:	464a      	mov	r2, r9
    5578:	4342      	muls	r2, r0
    557a:	0010      	movs	r0, r2
    557c:	9203      	str	r2, [sp, #12]
    557e:	4662      	mov	r2, ip
    5580:	001c      	movs	r4, r3
    5582:	0c3f      	lsrs	r7, r7, #16
    5584:	437a      	muls	r2, r7
    5586:	437c      	muls	r4, r7
    5588:	4442      	add	r2, r8
    558a:	9201      	str	r2, [sp, #4]
    558c:	0c22      	lsrs	r2, r4, #16
    558e:	4692      	mov	sl, r2
    5590:	9a01      	ldr	r2, [sp, #4]
    5592:	4452      	add	r2, sl
    5594:	4590      	cmp	r8, r2
    5596:	d906      	bls.n	55a6 <__aeabi_dmul+0x23a>
    5598:	4682      	mov	sl, r0
    559a:	2080      	movs	r0, #128	; 0x80
    559c:	0240      	lsls	r0, r0, #9
    559e:	4680      	mov	r8, r0
    55a0:	44c2      	add	sl, r8
    55a2:	4650      	mov	r0, sl
    55a4:	9003      	str	r0, [sp, #12]
    55a6:	0c10      	lsrs	r0, r2, #16
    55a8:	9004      	str	r0, [sp, #16]
    55aa:	4648      	mov	r0, r9
    55ac:	0424      	lsls	r4, r4, #16
    55ae:	0c24      	lsrs	r4, r4, #16
    55b0:	0412      	lsls	r2, r2, #16
    55b2:	1912      	adds	r2, r2, r4
    55b4:	9205      	str	r2, [sp, #20]
    55b6:	0c2a      	lsrs	r2, r5, #16
    55b8:	042d      	lsls	r5, r5, #16
    55ba:	0c2d      	lsrs	r5, r5, #16
    55bc:	4368      	muls	r0, r5
    55be:	002c      	movs	r4, r5
    55c0:	4682      	mov	sl, r0
    55c2:	4648      	mov	r0, r9
    55c4:	437c      	muls	r4, r7
    55c6:	4350      	muls	r0, r2
    55c8:	4681      	mov	r9, r0
    55ca:	0c20      	lsrs	r0, r4, #16
    55cc:	4680      	mov	r8, r0
    55ce:	4357      	muls	r7, r2
    55d0:	4457      	add	r7, sl
    55d2:	4447      	add	r7, r8
    55d4:	45ba      	cmp	sl, r7
    55d6:	d903      	bls.n	55e0 <__aeabi_dmul+0x274>
    55d8:	2080      	movs	r0, #128	; 0x80
    55da:	0240      	lsls	r0, r0, #9
    55dc:	4680      	mov	r8, r0
    55de:	44c1      	add	r9, r8
    55e0:	0c38      	lsrs	r0, r7, #16
    55e2:	043f      	lsls	r7, r7, #16
    55e4:	46b8      	mov	r8, r7
    55e6:	4448      	add	r0, r9
    55e8:	0424      	lsls	r4, r4, #16
    55ea:	0c24      	lsrs	r4, r4, #16
    55ec:	9001      	str	r0, [sp, #4]
    55ee:	9804      	ldr	r0, [sp, #16]
    55f0:	44a0      	add	r8, r4
    55f2:	4440      	add	r0, r8
    55f4:	9004      	str	r0, [sp, #16]
    55f6:	4658      	mov	r0, fp
    55f8:	0c00      	lsrs	r0, r0, #16
    55fa:	4681      	mov	r9, r0
    55fc:	4658      	mov	r0, fp
    55fe:	0404      	lsls	r4, r0, #16
    5600:	0c20      	lsrs	r0, r4, #16
    5602:	4682      	mov	sl, r0
    5604:	0007      	movs	r7, r0
    5606:	4648      	mov	r0, r9
    5608:	435f      	muls	r7, r3
    560a:	464c      	mov	r4, r9
    560c:	4343      	muls	r3, r0
    560e:	4660      	mov	r0, ip
    5610:	4360      	muls	r0, r4
    5612:	4664      	mov	r4, ip
    5614:	4683      	mov	fp, r0
    5616:	4650      	mov	r0, sl
    5618:	4344      	muls	r4, r0
    561a:	0c38      	lsrs	r0, r7, #16
    561c:	4684      	mov	ip, r0
    561e:	18e4      	adds	r4, r4, r3
    5620:	4464      	add	r4, ip
    5622:	42a3      	cmp	r3, r4
    5624:	d903      	bls.n	562e <__aeabi_dmul+0x2c2>
    5626:	2380      	movs	r3, #128	; 0x80
    5628:	025b      	lsls	r3, r3, #9
    562a:	469c      	mov	ip, r3
    562c:	44e3      	add	fp, ip
    562e:	4648      	mov	r0, r9
    5630:	043f      	lsls	r7, r7, #16
    5632:	0c23      	lsrs	r3, r4, #16
    5634:	0c3f      	lsrs	r7, r7, #16
    5636:	0424      	lsls	r4, r4, #16
    5638:	19e4      	adds	r4, r4, r7
    563a:	4657      	mov	r7, sl
    563c:	4368      	muls	r0, r5
    563e:	436f      	muls	r7, r5
    5640:	4684      	mov	ip, r0
    5642:	464d      	mov	r5, r9
    5644:	4650      	mov	r0, sl
    5646:	4355      	muls	r5, r2
    5648:	4342      	muls	r2, r0
    564a:	0c38      	lsrs	r0, r7, #16
    564c:	4681      	mov	r9, r0
    564e:	4462      	add	r2, ip
    5650:	444a      	add	r2, r9
    5652:	445b      	add	r3, fp
    5654:	4594      	cmp	ip, r2
    5656:	d903      	bls.n	5660 <__aeabi_dmul+0x2f4>
    5658:	2080      	movs	r0, #128	; 0x80
    565a:	0240      	lsls	r0, r0, #9
    565c:	4684      	mov	ip, r0
    565e:	4465      	add	r5, ip
    5660:	9803      	ldr	r0, [sp, #12]
    5662:	043f      	lsls	r7, r7, #16
    5664:	4683      	mov	fp, r0
    5666:	9804      	ldr	r0, [sp, #16]
    5668:	0c3f      	lsrs	r7, r7, #16
    566a:	4684      	mov	ip, r0
    566c:	44e3      	add	fp, ip
    566e:	45c3      	cmp	fp, r8
    5670:	4180      	sbcs	r0, r0
    5672:	4240      	negs	r0, r0
    5674:	4682      	mov	sl, r0
    5676:	0410      	lsls	r0, r2, #16
    5678:	4684      	mov	ip, r0
    567a:	9801      	ldr	r0, [sp, #4]
    567c:	4467      	add	r7, ip
    567e:	4684      	mov	ip, r0
    5680:	4467      	add	r7, ip
    5682:	44a3      	add	fp, r4
    5684:	46bc      	mov	ip, r7
    5686:	45a3      	cmp	fp, r4
    5688:	41a4      	sbcs	r4, r4
    568a:	4699      	mov	r9, r3
    568c:	44d4      	add	ip, sl
    568e:	4264      	negs	r4, r4
    5690:	4287      	cmp	r7, r0
    5692:	41bf      	sbcs	r7, r7
    5694:	45d4      	cmp	ip, sl
    5696:	4180      	sbcs	r0, r0
    5698:	44e1      	add	r9, ip
    569a:	46a0      	mov	r8, r4
    569c:	4599      	cmp	r9, r3
    569e:	419b      	sbcs	r3, r3
    56a0:	427f      	negs	r7, r7
    56a2:	4240      	negs	r0, r0
    56a4:	44c8      	add	r8, r9
    56a6:	4307      	orrs	r7, r0
    56a8:	0c12      	lsrs	r2, r2, #16
    56aa:	18ba      	adds	r2, r7, r2
    56ac:	45a0      	cmp	r8, r4
    56ae:	41a4      	sbcs	r4, r4
    56b0:	425f      	negs	r7, r3
    56b2:	003b      	movs	r3, r7
    56b4:	4264      	negs	r4, r4
    56b6:	4323      	orrs	r3, r4
    56b8:	18d7      	adds	r7, r2, r3
    56ba:	4643      	mov	r3, r8
    56bc:	197d      	adds	r5, r7, r5
    56be:	0ddb      	lsrs	r3, r3, #23
    56c0:	026d      	lsls	r5, r5, #9
    56c2:	431d      	orrs	r5, r3
    56c4:	465b      	mov	r3, fp
    56c6:	025a      	lsls	r2, r3, #9
    56c8:	9b05      	ldr	r3, [sp, #20]
    56ca:	431a      	orrs	r2, r3
    56cc:	1e53      	subs	r3, r2, #1
    56ce:	419a      	sbcs	r2, r3
    56d0:	465b      	mov	r3, fp
    56d2:	0ddb      	lsrs	r3, r3, #23
    56d4:	431a      	orrs	r2, r3
    56d6:	4643      	mov	r3, r8
    56d8:	025b      	lsls	r3, r3, #9
    56da:	4313      	orrs	r3, r2
    56dc:	01ea      	lsls	r2, r5, #7
    56de:	d507      	bpl.n	56f0 <__aeabi_dmul+0x384>
    56e0:	2201      	movs	r2, #1
    56e2:	085c      	lsrs	r4, r3, #1
    56e4:	4013      	ands	r3, r2
    56e6:	4323      	orrs	r3, r4
    56e8:	07ea      	lsls	r2, r5, #31
    56ea:	9e02      	ldr	r6, [sp, #8]
    56ec:	4313      	orrs	r3, r2
    56ee:	086d      	lsrs	r5, r5, #1
    56f0:	4a57      	ldr	r2, [pc, #348]	; (5850 <__aeabi_dmul+0x4e4>)
    56f2:	18b2      	adds	r2, r6, r2
    56f4:	2a00      	cmp	r2, #0
    56f6:	dd4b      	ble.n	5790 <__aeabi_dmul+0x424>
    56f8:	0758      	lsls	r0, r3, #29
    56fa:	d009      	beq.n	5710 <__aeabi_dmul+0x3a4>
    56fc:	200f      	movs	r0, #15
    56fe:	4018      	ands	r0, r3
    5700:	2804      	cmp	r0, #4
    5702:	d005      	beq.n	5710 <__aeabi_dmul+0x3a4>
    5704:	1d18      	adds	r0, r3, #4
    5706:	4298      	cmp	r0, r3
    5708:	419b      	sbcs	r3, r3
    570a:	425b      	negs	r3, r3
    570c:	18ed      	adds	r5, r5, r3
    570e:	0003      	movs	r3, r0
    5710:	01e8      	lsls	r0, r5, #7
    5712:	d504      	bpl.n	571e <__aeabi_dmul+0x3b2>
    5714:	4a4f      	ldr	r2, [pc, #316]	; (5854 <__aeabi_dmul+0x4e8>)
    5716:	4015      	ands	r5, r2
    5718:	2280      	movs	r2, #128	; 0x80
    571a:	00d2      	lsls	r2, r2, #3
    571c:	18b2      	adds	r2, r6, r2
    571e:	484e      	ldr	r0, [pc, #312]	; (5858 <__aeabi_dmul+0x4ec>)
    5720:	4282      	cmp	r2, r0
    5722:	dd00      	ble.n	5726 <__aeabi_dmul+0x3ba>
    5724:	e6e7      	b.n	54f6 <__aeabi_dmul+0x18a>
    5726:	2401      	movs	r4, #1
    5728:	08db      	lsrs	r3, r3, #3
    572a:	0768      	lsls	r0, r5, #29
    572c:	4318      	orrs	r0, r3
    572e:	026d      	lsls	r5, r5, #9
    5730:	0553      	lsls	r3, r2, #21
    5732:	4680      	mov	r8, r0
    5734:	0b2d      	lsrs	r5, r5, #12
    5736:	0d5b      	lsrs	r3, r3, #21
    5738:	400c      	ands	r4, r1
    573a:	e67d      	b.n	5438 <__aeabi_dmul+0xcc>
    573c:	2280      	movs	r2, #128	; 0x80
    573e:	4659      	mov	r1, fp
    5740:	0312      	lsls	r2, r2, #12
    5742:	4211      	tst	r1, r2
    5744:	d008      	beq.n	5758 <__aeabi_dmul+0x3ec>
    5746:	4215      	tst	r5, r2
    5748:	d106      	bne.n	5758 <__aeabi_dmul+0x3ec>
    574a:	4315      	orrs	r5, r2
    574c:	032d      	lsls	r5, r5, #12
    574e:	4698      	mov	r8, r3
    5750:	0b2d      	lsrs	r5, r5, #12
    5752:	464c      	mov	r4, r9
    5754:	4b41      	ldr	r3, [pc, #260]	; (585c <__aeabi_dmul+0x4f0>)
    5756:	e66f      	b.n	5438 <__aeabi_dmul+0xcc>
    5758:	465d      	mov	r5, fp
    575a:	4315      	orrs	r5, r2
    575c:	032d      	lsls	r5, r5, #12
    575e:	0b2d      	lsrs	r5, r5, #12
    5760:	4b3e      	ldr	r3, [pc, #248]	; (585c <__aeabi_dmul+0x4f0>)
    5762:	e669      	b.n	5438 <__aeabi_dmul+0xcc>
    5764:	0003      	movs	r3, r0
    5766:	4655      	mov	r5, sl
    5768:	3b28      	subs	r3, #40	; 0x28
    576a:	409d      	lsls	r5, r3
    576c:	2300      	movs	r3, #0
    576e:	e6bc      	b.n	54ea <__aeabi_dmul+0x17e>
    5770:	4650      	mov	r0, sl
    5772:	f000 fe3f 	bl	63f4 <__clzsi2>
    5776:	3020      	adds	r0, #32
    5778:	e6a8      	b.n	54cc <__aeabi_dmul+0x160>
    577a:	0003      	movs	r3, r0
    577c:	3b28      	subs	r3, #40	; 0x28
    577e:	409f      	lsls	r7, r3
    5780:	2300      	movs	r3, #0
    5782:	46bb      	mov	fp, r7
    5784:	4698      	mov	r8, r3
    5786:	e689      	b.n	549c <__aeabi_dmul+0x130>
    5788:	f000 fe34 	bl	63f4 <__clzsi2>
    578c:	3020      	adds	r0, #32
    578e:	e673      	b.n	5478 <__aeabi_dmul+0x10c>
    5790:	2401      	movs	r4, #1
    5792:	1aa6      	subs	r6, r4, r2
    5794:	2e38      	cmp	r6, #56	; 0x38
    5796:	dd07      	ble.n	57a8 <__aeabi_dmul+0x43c>
    5798:	2200      	movs	r2, #0
    579a:	400c      	ands	r4, r1
    579c:	2300      	movs	r3, #0
    579e:	2500      	movs	r5, #0
    57a0:	4690      	mov	r8, r2
    57a2:	e649      	b.n	5438 <__aeabi_dmul+0xcc>
    57a4:	9e02      	ldr	r6, [sp, #8]
    57a6:	e7a3      	b.n	56f0 <__aeabi_dmul+0x384>
    57a8:	2e1f      	cmp	r6, #31
    57aa:	dc20      	bgt.n	57ee <__aeabi_dmul+0x482>
    57ac:	2220      	movs	r2, #32
    57ae:	002c      	movs	r4, r5
    57b0:	0018      	movs	r0, r3
    57b2:	1b92      	subs	r2, r2, r6
    57b4:	40f0      	lsrs	r0, r6
    57b6:	4094      	lsls	r4, r2
    57b8:	4093      	lsls	r3, r2
    57ba:	4304      	orrs	r4, r0
    57bc:	1e58      	subs	r0, r3, #1
    57be:	4183      	sbcs	r3, r0
    57c0:	431c      	orrs	r4, r3
    57c2:	40f5      	lsrs	r5, r6
    57c4:	0763      	lsls	r3, r4, #29
    57c6:	d009      	beq.n	57dc <__aeabi_dmul+0x470>
    57c8:	230f      	movs	r3, #15
    57ca:	4023      	ands	r3, r4
    57cc:	2b04      	cmp	r3, #4
    57ce:	d005      	beq.n	57dc <__aeabi_dmul+0x470>
    57d0:	0023      	movs	r3, r4
    57d2:	1d1c      	adds	r4, r3, #4
    57d4:	429c      	cmp	r4, r3
    57d6:	4192      	sbcs	r2, r2
    57d8:	4252      	negs	r2, r2
    57da:	18ad      	adds	r5, r5, r2
    57dc:	022b      	lsls	r3, r5, #8
    57de:	d51f      	bpl.n	5820 <__aeabi_dmul+0x4b4>
    57e0:	2401      	movs	r4, #1
    57e2:	2200      	movs	r2, #0
    57e4:	400c      	ands	r4, r1
    57e6:	2301      	movs	r3, #1
    57e8:	2500      	movs	r5, #0
    57ea:	4690      	mov	r8, r2
    57ec:	e624      	b.n	5438 <__aeabi_dmul+0xcc>
    57ee:	201f      	movs	r0, #31
    57f0:	002c      	movs	r4, r5
    57f2:	4240      	negs	r0, r0
    57f4:	1a82      	subs	r2, r0, r2
    57f6:	40d4      	lsrs	r4, r2
    57f8:	2e20      	cmp	r6, #32
    57fa:	d01c      	beq.n	5836 <__aeabi_dmul+0x4ca>
    57fc:	2240      	movs	r2, #64	; 0x40
    57fe:	1b96      	subs	r6, r2, r6
    5800:	40b5      	lsls	r5, r6
    5802:	432b      	orrs	r3, r5
    5804:	1e58      	subs	r0, r3, #1
    5806:	4183      	sbcs	r3, r0
    5808:	2007      	movs	r0, #7
    580a:	4323      	orrs	r3, r4
    580c:	4018      	ands	r0, r3
    580e:	2500      	movs	r5, #0
    5810:	2800      	cmp	r0, #0
    5812:	d009      	beq.n	5828 <__aeabi_dmul+0x4bc>
    5814:	220f      	movs	r2, #15
    5816:	2500      	movs	r5, #0
    5818:	401a      	ands	r2, r3
    581a:	001c      	movs	r4, r3
    581c:	2a04      	cmp	r2, #4
    581e:	d1d8      	bne.n	57d2 <__aeabi_dmul+0x466>
    5820:	0023      	movs	r3, r4
    5822:	0768      	lsls	r0, r5, #29
    5824:	026d      	lsls	r5, r5, #9
    5826:	0b2d      	lsrs	r5, r5, #12
    5828:	2401      	movs	r4, #1
    582a:	08db      	lsrs	r3, r3, #3
    582c:	4303      	orrs	r3, r0
    582e:	4698      	mov	r8, r3
    5830:	400c      	ands	r4, r1
    5832:	2300      	movs	r3, #0
    5834:	e600      	b.n	5438 <__aeabi_dmul+0xcc>
    5836:	2500      	movs	r5, #0
    5838:	e7e3      	b.n	5802 <__aeabi_dmul+0x496>
    583a:	2280      	movs	r2, #128	; 0x80
    583c:	2401      	movs	r4, #1
    583e:	0312      	lsls	r2, r2, #12
    5840:	4315      	orrs	r5, r2
    5842:	032d      	lsls	r5, r5, #12
    5844:	4698      	mov	r8, r3
    5846:	0b2d      	lsrs	r5, r5, #12
    5848:	400c      	ands	r4, r1
    584a:	4b04      	ldr	r3, [pc, #16]	; (585c <__aeabi_dmul+0x4f0>)
    584c:	e5f4      	b.n	5438 <__aeabi_dmul+0xcc>
    584e:	46c0      	nop			; (mov r8, r8)
    5850:	000003ff 	.word	0x000003ff
    5854:	feffffff 	.word	0xfeffffff
    5858:	000007fe 	.word	0x000007fe
    585c:	000007ff 	.word	0x000007ff

00005860 <__aeabi_dsub>:
    5860:	b5f0      	push	{r4, r5, r6, r7, lr}
    5862:	4657      	mov	r7, sl
    5864:	464e      	mov	r6, r9
    5866:	4645      	mov	r5, r8
    5868:	b4e0      	push	{r5, r6, r7}
    586a:	000e      	movs	r6, r1
    586c:	0011      	movs	r1, r2
    586e:	0ff2      	lsrs	r2, r6, #31
    5870:	4692      	mov	sl, r2
    5872:	00c5      	lsls	r5, r0, #3
    5874:	0f42      	lsrs	r2, r0, #29
    5876:	0318      	lsls	r0, r3, #12
    5878:	0337      	lsls	r7, r6, #12
    587a:	0074      	lsls	r4, r6, #1
    587c:	0a40      	lsrs	r0, r0, #9
    587e:	0f4e      	lsrs	r6, r1, #29
    5880:	0a7f      	lsrs	r7, r7, #9
    5882:	4330      	orrs	r0, r6
    5884:	4ecf      	ldr	r6, [pc, #828]	; (5bc4 <__aeabi_dsub+0x364>)
    5886:	4317      	orrs	r7, r2
    5888:	005a      	lsls	r2, r3, #1
    588a:	0d64      	lsrs	r4, r4, #21
    588c:	0d52      	lsrs	r2, r2, #21
    588e:	0fdb      	lsrs	r3, r3, #31
    5890:	00c9      	lsls	r1, r1, #3
    5892:	42b2      	cmp	r2, r6
    5894:	d100      	bne.n	5898 <__aeabi_dsub+0x38>
    5896:	e0e5      	b.n	5a64 <__aeabi_dsub+0x204>
    5898:	2601      	movs	r6, #1
    589a:	4073      	eors	r3, r6
    589c:	1aa6      	subs	r6, r4, r2
    589e:	46b4      	mov	ip, r6
    58a0:	4553      	cmp	r3, sl
    58a2:	d100      	bne.n	58a6 <__aeabi_dsub+0x46>
    58a4:	e0af      	b.n	5a06 <__aeabi_dsub+0x1a6>
    58a6:	2e00      	cmp	r6, #0
    58a8:	dc00      	bgt.n	58ac <__aeabi_dsub+0x4c>
    58aa:	e10d      	b.n	5ac8 <__aeabi_dsub+0x268>
    58ac:	2a00      	cmp	r2, #0
    58ae:	d13a      	bne.n	5926 <__aeabi_dsub+0xc6>
    58b0:	0003      	movs	r3, r0
    58b2:	430b      	orrs	r3, r1
    58b4:	d000      	beq.n	58b8 <__aeabi_dsub+0x58>
    58b6:	e0e4      	b.n	5a82 <__aeabi_dsub+0x222>
    58b8:	076b      	lsls	r3, r5, #29
    58ba:	d009      	beq.n	58d0 <__aeabi_dsub+0x70>
    58bc:	230f      	movs	r3, #15
    58be:	402b      	ands	r3, r5
    58c0:	2b04      	cmp	r3, #4
    58c2:	d005      	beq.n	58d0 <__aeabi_dsub+0x70>
    58c4:	1d2b      	adds	r3, r5, #4
    58c6:	42ab      	cmp	r3, r5
    58c8:	41ad      	sbcs	r5, r5
    58ca:	426d      	negs	r5, r5
    58cc:	197f      	adds	r7, r7, r5
    58ce:	001d      	movs	r5, r3
    58d0:	023b      	lsls	r3, r7, #8
    58d2:	d400      	bmi.n	58d6 <__aeabi_dsub+0x76>
    58d4:	e088      	b.n	59e8 <__aeabi_dsub+0x188>
    58d6:	4bbb      	ldr	r3, [pc, #748]	; (5bc4 <__aeabi_dsub+0x364>)
    58d8:	3401      	adds	r4, #1
    58da:	429c      	cmp	r4, r3
    58dc:	d100      	bne.n	58e0 <__aeabi_dsub+0x80>
    58de:	e110      	b.n	5b02 <__aeabi_dsub+0x2a2>
    58e0:	003a      	movs	r2, r7
    58e2:	4bb9      	ldr	r3, [pc, #740]	; (5bc8 <__aeabi_dsub+0x368>)
    58e4:	4651      	mov	r1, sl
    58e6:	401a      	ands	r2, r3
    58e8:	2301      	movs	r3, #1
    58ea:	0750      	lsls	r0, r2, #29
    58ec:	08ed      	lsrs	r5, r5, #3
    58ee:	0252      	lsls	r2, r2, #9
    58f0:	0564      	lsls	r4, r4, #21
    58f2:	4305      	orrs	r5, r0
    58f4:	0b12      	lsrs	r2, r2, #12
    58f6:	0d64      	lsrs	r4, r4, #21
    58f8:	400b      	ands	r3, r1
    58fa:	2100      	movs	r1, #0
    58fc:	0028      	movs	r0, r5
    58fe:	0312      	lsls	r2, r2, #12
    5900:	0d0d      	lsrs	r5, r1, #20
    5902:	0b12      	lsrs	r2, r2, #12
    5904:	0564      	lsls	r4, r4, #21
    5906:	052d      	lsls	r5, r5, #20
    5908:	4315      	orrs	r5, r2
    590a:	0862      	lsrs	r2, r4, #1
    590c:	4caf      	ldr	r4, [pc, #700]	; (5bcc <__aeabi_dsub+0x36c>)
    590e:	07db      	lsls	r3, r3, #31
    5910:	402c      	ands	r4, r5
    5912:	4314      	orrs	r4, r2
    5914:	0064      	lsls	r4, r4, #1
    5916:	0864      	lsrs	r4, r4, #1
    5918:	431c      	orrs	r4, r3
    591a:	0021      	movs	r1, r4
    591c:	bc1c      	pop	{r2, r3, r4}
    591e:	4690      	mov	r8, r2
    5920:	4699      	mov	r9, r3
    5922:	46a2      	mov	sl, r4
    5924:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5926:	4ba7      	ldr	r3, [pc, #668]	; (5bc4 <__aeabi_dsub+0x364>)
    5928:	429c      	cmp	r4, r3
    592a:	d0c5      	beq.n	58b8 <__aeabi_dsub+0x58>
    592c:	2380      	movs	r3, #128	; 0x80
    592e:	041b      	lsls	r3, r3, #16
    5930:	4318      	orrs	r0, r3
    5932:	4663      	mov	r3, ip
    5934:	2b38      	cmp	r3, #56	; 0x38
    5936:	dd00      	ble.n	593a <__aeabi_dsub+0xda>
    5938:	e0fd      	b.n	5b36 <__aeabi_dsub+0x2d6>
    593a:	2b1f      	cmp	r3, #31
    593c:	dd00      	ble.n	5940 <__aeabi_dsub+0xe0>
    593e:	e130      	b.n	5ba2 <__aeabi_dsub+0x342>
    5940:	4662      	mov	r2, ip
    5942:	2320      	movs	r3, #32
    5944:	1a9b      	subs	r3, r3, r2
    5946:	0002      	movs	r2, r0
    5948:	409a      	lsls	r2, r3
    594a:	4666      	mov	r6, ip
    594c:	4690      	mov	r8, r2
    594e:	000a      	movs	r2, r1
    5950:	4099      	lsls	r1, r3
    5952:	40f2      	lsrs	r2, r6
    5954:	4646      	mov	r6, r8
    5956:	1e4b      	subs	r3, r1, #1
    5958:	4199      	sbcs	r1, r3
    595a:	4332      	orrs	r2, r6
    595c:	4311      	orrs	r1, r2
    595e:	4663      	mov	r3, ip
    5960:	0002      	movs	r2, r0
    5962:	40da      	lsrs	r2, r3
    5964:	1a69      	subs	r1, r5, r1
    5966:	428d      	cmp	r5, r1
    5968:	419b      	sbcs	r3, r3
    596a:	000d      	movs	r5, r1
    596c:	1aba      	subs	r2, r7, r2
    596e:	425b      	negs	r3, r3
    5970:	1ad7      	subs	r7, r2, r3
    5972:	023b      	lsls	r3, r7, #8
    5974:	d535      	bpl.n	59e2 <__aeabi_dsub+0x182>
    5976:	027a      	lsls	r2, r7, #9
    5978:	0a53      	lsrs	r3, r2, #9
    597a:	4698      	mov	r8, r3
    597c:	4643      	mov	r3, r8
    597e:	2b00      	cmp	r3, #0
    5980:	d100      	bne.n	5984 <__aeabi_dsub+0x124>
    5982:	e0c4      	b.n	5b0e <__aeabi_dsub+0x2ae>
    5984:	4640      	mov	r0, r8
    5986:	f000 fd35 	bl	63f4 <__clzsi2>
    598a:	0003      	movs	r3, r0
    598c:	3b08      	subs	r3, #8
    598e:	2b1f      	cmp	r3, #31
    5990:	dd00      	ble.n	5994 <__aeabi_dsub+0x134>
    5992:	e0c5      	b.n	5b20 <__aeabi_dsub+0x2c0>
    5994:	2220      	movs	r2, #32
    5996:	0029      	movs	r1, r5
    5998:	1ad2      	subs	r2, r2, r3
    599a:	4647      	mov	r7, r8
    599c:	40d1      	lsrs	r1, r2
    599e:	409f      	lsls	r7, r3
    59a0:	000a      	movs	r2, r1
    59a2:	409d      	lsls	r5, r3
    59a4:	433a      	orrs	r2, r7
    59a6:	429c      	cmp	r4, r3
    59a8:	dd00      	ble.n	59ac <__aeabi_dsub+0x14c>
    59aa:	e0c0      	b.n	5b2e <__aeabi_dsub+0x2ce>
    59ac:	1b1c      	subs	r4, r3, r4
    59ae:	1c63      	adds	r3, r4, #1
    59b0:	2b1f      	cmp	r3, #31
    59b2:	dd00      	ble.n	59b6 <__aeabi_dsub+0x156>
    59b4:	e0e4      	b.n	5b80 <__aeabi_dsub+0x320>
    59b6:	2120      	movs	r1, #32
    59b8:	0014      	movs	r4, r2
    59ba:	0028      	movs	r0, r5
    59bc:	1ac9      	subs	r1, r1, r3
    59be:	40d8      	lsrs	r0, r3
    59c0:	408c      	lsls	r4, r1
    59c2:	408d      	lsls	r5, r1
    59c4:	4304      	orrs	r4, r0
    59c6:	40da      	lsrs	r2, r3
    59c8:	1e68      	subs	r0, r5, #1
    59ca:	4185      	sbcs	r5, r0
    59cc:	0017      	movs	r7, r2
    59ce:	4325      	orrs	r5, r4
    59d0:	2400      	movs	r4, #0
    59d2:	e771      	b.n	58b8 <__aeabi_dsub+0x58>
    59d4:	4642      	mov	r2, r8
    59d6:	4663      	mov	r3, ip
    59d8:	431a      	orrs	r2, r3
    59da:	d100      	bne.n	59de <__aeabi_dsub+0x17e>
    59dc:	e24c      	b.n	5e78 <__aeabi_dsub+0x618>
    59de:	4667      	mov	r7, ip
    59e0:	4645      	mov	r5, r8
    59e2:	076b      	lsls	r3, r5, #29
    59e4:	d000      	beq.n	59e8 <__aeabi_dsub+0x188>
    59e6:	e769      	b.n	58bc <__aeabi_dsub+0x5c>
    59e8:	2301      	movs	r3, #1
    59ea:	4651      	mov	r1, sl
    59ec:	0778      	lsls	r0, r7, #29
    59ee:	08ed      	lsrs	r5, r5, #3
    59f0:	08fa      	lsrs	r2, r7, #3
    59f2:	400b      	ands	r3, r1
    59f4:	4305      	orrs	r5, r0
    59f6:	4973      	ldr	r1, [pc, #460]	; (5bc4 <__aeabi_dsub+0x364>)
    59f8:	428c      	cmp	r4, r1
    59fa:	d038      	beq.n	5a6e <__aeabi_dsub+0x20e>
    59fc:	0312      	lsls	r2, r2, #12
    59fe:	0564      	lsls	r4, r4, #21
    5a00:	0b12      	lsrs	r2, r2, #12
    5a02:	0d64      	lsrs	r4, r4, #21
    5a04:	e779      	b.n	58fa <__aeabi_dsub+0x9a>
    5a06:	2e00      	cmp	r6, #0
    5a08:	dc00      	bgt.n	5a0c <__aeabi_dsub+0x1ac>
    5a0a:	e09a      	b.n	5b42 <__aeabi_dsub+0x2e2>
    5a0c:	2a00      	cmp	r2, #0
    5a0e:	d047      	beq.n	5aa0 <__aeabi_dsub+0x240>
    5a10:	4a6c      	ldr	r2, [pc, #432]	; (5bc4 <__aeabi_dsub+0x364>)
    5a12:	4294      	cmp	r4, r2
    5a14:	d100      	bne.n	5a18 <__aeabi_dsub+0x1b8>
    5a16:	e74f      	b.n	58b8 <__aeabi_dsub+0x58>
    5a18:	2280      	movs	r2, #128	; 0x80
    5a1a:	0412      	lsls	r2, r2, #16
    5a1c:	4310      	orrs	r0, r2
    5a1e:	4662      	mov	r2, ip
    5a20:	2a38      	cmp	r2, #56	; 0x38
    5a22:	dc00      	bgt.n	5a26 <__aeabi_dsub+0x1c6>
    5a24:	e108      	b.n	5c38 <__aeabi_dsub+0x3d8>
    5a26:	4301      	orrs	r1, r0
    5a28:	1e48      	subs	r0, r1, #1
    5a2a:	4181      	sbcs	r1, r0
    5a2c:	2200      	movs	r2, #0
    5a2e:	b2c9      	uxtb	r1, r1
    5a30:	1949      	adds	r1, r1, r5
    5a32:	19d2      	adds	r2, r2, r7
    5a34:	42a9      	cmp	r1, r5
    5a36:	41bf      	sbcs	r7, r7
    5a38:	000d      	movs	r5, r1
    5a3a:	427f      	negs	r7, r7
    5a3c:	18bf      	adds	r7, r7, r2
    5a3e:	023a      	lsls	r2, r7, #8
    5a40:	d400      	bmi.n	5a44 <__aeabi_dsub+0x1e4>
    5a42:	e142      	b.n	5cca <__aeabi_dsub+0x46a>
    5a44:	4a5f      	ldr	r2, [pc, #380]	; (5bc4 <__aeabi_dsub+0x364>)
    5a46:	3401      	adds	r4, #1
    5a48:	4294      	cmp	r4, r2
    5a4a:	d100      	bne.n	5a4e <__aeabi_dsub+0x1ee>
    5a4c:	e14e      	b.n	5cec <__aeabi_dsub+0x48c>
    5a4e:	2001      	movs	r0, #1
    5a50:	4a5d      	ldr	r2, [pc, #372]	; (5bc8 <__aeabi_dsub+0x368>)
    5a52:	0869      	lsrs	r1, r5, #1
    5a54:	403a      	ands	r2, r7
    5a56:	4028      	ands	r0, r5
    5a58:	4308      	orrs	r0, r1
    5a5a:	07d5      	lsls	r5, r2, #31
    5a5c:	4305      	orrs	r5, r0
    5a5e:	0857      	lsrs	r7, r2, #1
    5a60:	469a      	mov	sl, r3
    5a62:	e729      	b.n	58b8 <__aeabi_dsub+0x58>
    5a64:	0006      	movs	r6, r0
    5a66:	430e      	orrs	r6, r1
    5a68:	d000      	beq.n	5a6c <__aeabi_dsub+0x20c>
    5a6a:	e717      	b.n	589c <__aeabi_dsub+0x3c>
    5a6c:	e714      	b.n	5898 <__aeabi_dsub+0x38>
    5a6e:	0029      	movs	r1, r5
    5a70:	4311      	orrs	r1, r2
    5a72:	d100      	bne.n	5a76 <__aeabi_dsub+0x216>
    5a74:	e1f9      	b.n	5e6a <__aeabi_dsub+0x60a>
    5a76:	2180      	movs	r1, #128	; 0x80
    5a78:	0309      	lsls	r1, r1, #12
    5a7a:	430a      	orrs	r2, r1
    5a7c:	0312      	lsls	r2, r2, #12
    5a7e:	0b12      	lsrs	r2, r2, #12
    5a80:	e73b      	b.n	58fa <__aeabi_dsub+0x9a>
    5a82:	2301      	movs	r3, #1
    5a84:	425b      	negs	r3, r3
    5a86:	4698      	mov	r8, r3
    5a88:	44c4      	add	ip, r8
    5a8a:	4663      	mov	r3, ip
    5a8c:	2b00      	cmp	r3, #0
    5a8e:	d172      	bne.n	5b76 <__aeabi_dsub+0x316>
    5a90:	1a69      	subs	r1, r5, r1
    5a92:	428d      	cmp	r5, r1
    5a94:	419b      	sbcs	r3, r3
    5a96:	1a3f      	subs	r7, r7, r0
    5a98:	425b      	negs	r3, r3
    5a9a:	1aff      	subs	r7, r7, r3
    5a9c:	000d      	movs	r5, r1
    5a9e:	e768      	b.n	5972 <__aeabi_dsub+0x112>
    5aa0:	0002      	movs	r2, r0
    5aa2:	430a      	orrs	r2, r1
    5aa4:	d100      	bne.n	5aa8 <__aeabi_dsub+0x248>
    5aa6:	e707      	b.n	58b8 <__aeabi_dsub+0x58>
    5aa8:	2201      	movs	r2, #1
    5aaa:	4252      	negs	r2, r2
    5aac:	4690      	mov	r8, r2
    5aae:	44c4      	add	ip, r8
    5ab0:	4662      	mov	r2, ip
    5ab2:	2a00      	cmp	r2, #0
    5ab4:	d000      	beq.n	5ab8 <__aeabi_dsub+0x258>
    5ab6:	e0e6      	b.n	5c86 <__aeabi_dsub+0x426>
    5ab8:	1869      	adds	r1, r5, r1
    5aba:	42a9      	cmp	r1, r5
    5abc:	41b6      	sbcs	r6, r6
    5abe:	183f      	adds	r7, r7, r0
    5ac0:	4276      	negs	r6, r6
    5ac2:	19f7      	adds	r7, r6, r7
    5ac4:	000d      	movs	r5, r1
    5ac6:	e7ba      	b.n	5a3e <__aeabi_dsub+0x1de>
    5ac8:	2e00      	cmp	r6, #0
    5aca:	d000      	beq.n	5ace <__aeabi_dsub+0x26e>
    5acc:	e080      	b.n	5bd0 <__aeabi_dsub+0x370>
    5ace:	1c62      	adds	r2, r4, #1
    5ad0:	0552      	lsls	r2, r2, #21
    5ad2:	0d52      	lsrs	r2, r2, #21
    5ad4:	2a01      	cmp	r2, #1
    5ad6:	dc00      	bgt.n	5ada <__aeabi_dsub+0x27a>
    5ad8:	e0f9      	b.n	5cce <__aeabi_dsub+0x46e>
    5ada:	1a6a      	subs	r2, r5, r1
    5adc:	4691      	mov	r9, r2
    5ade:	454d      	cmp	r5, r9
    5ae0:	41b6      	sbcs	r6, r6
    5ae2:	1a3a      	subs	r2, r7, r0
    5ae4:	4276      	negs	r6, r6
    5ae6:	1b92      	subs	r2, r2, r6
    5ae8:	4690      	mov	r8, r2
    5aea:	0212      	lsls	r2, r2, #8
    5aec:	d400      	bmi.n	5af0 <__aeabi_dsub+0x290>
    5aee:	e099      	b.n	5c24 <__aeabi_dsub+0x3c4>
    5af0:	1b4d      	subs	r5, r1, r5
    5af2:	42a9      	cmp	r1, r5
    5af4:	4189      	sbcs	r1, r1
    5af6:	1bc7      	subs	r7, r0, r7
    5af8:	4249      	negs	r1, r1
    5afa:	1a7a      	subs	r2, r7, r1
    5afc:	4690      	mov	r8, r2
    5afe:	469a      	mov	sl, r3
    5b00:	e73c      	b.n	597c <__aeabi_dsub+0x11c>
    5b02:	4652      	mov	r2, sl
    5b04:	2301      	movs	r3, #1
    5b06:	2500      	movs	r5, #0
    5b08:	4013      	ands	r3, r2
    5b0a:	2200      	movs	r2, #0
    5b0c:	e6f5      	b.n	58fa <__aeabi_dsub+0x9a>
    5b0e:	0028      	movs	r0, r5
    5b10:	f000 fc70 	bl	63f4 <__clzsi2>
    5b14:	3020      	adds	r0, #32
    5b16:	0003      	movs	r3, r0
    5b18:	3b08      	subs	r3, #8
    5b1a:	2b1f      	cmp	r3, #31
    5b1c:	dc00      	bgt.n	5b20 <__aeabi_dsub+0x2c0>
    5b1e:	e739      	b.n	5994 <__aeabi_dsub+0x134>
    5b20:	002a      	movs	r2, r5
    5b22:	3828      	subs	r0, #40	; 0x28
    5b24:	4082      	lsls	r2, r0
    5b26:	2500      	movs	r5, #0
    5b28:	429c      	cmp	r4, r3
    5b2a:	dc00      	bgt.n	5b2e <__aeabi_dsub+0x2ce>
    5b2c:	e73e      	b.n	59ac <__aeabi_dsub+0x14c>
    5b2e:	4f26      	ldr	r7, [pc, #152]	; (5bc8 <__aeabi_dsub+0x368>)
    5b30:	1ae4      	subs	r4, r4, r3
    5b32:	4017      	ands	r7, r2
    5b34:	e6c0      	b.n	58b8 <__aeabi_dsub+0x58>
    5b36:	4301      	orrs	r1, r0
    5b38:	1e48      	subs	r0, r1, #1
    5b3a:	4181      	sbcs	r1, r0
    5b3c:	2200      	movs	r2, #0
    5b3e:	b2c9      	uxtb	r1, r1
    5b40:	e710      	b.n	5964 <__aeabi_dsub+0x104>
    5b42:	2e00      	cmp	r6, #0
    5b44:	d000      	beq.n	5b48 <__aeabi_dsub+0x2e8>
    5b46:	e0f1      	b.n	5d2c <__aeabi_dsub+0x4cc>
    5b48:	1c62      	adds	r2, r4, #1
    5b4a:	4694      	mov	ip, r2
    5b4c:	0552      	lsls	r2, r2, #21
    5b4e:	0d52      	lsrs	r2, r2, #21
    5b50:	2a01      	cmp	r2, #1
    5b52:	dc00      	bgt.n	5b56 <__aeabi_dsub+0x2f6>
    5b54:	e0a0      	b.n	5c98 <__aeabi_dsub+0x438>
    5b56:	4a1b      	ldr	r2, [pc, #108]	; (5bc4 <__aeabi_dsub+0x364>)
    5b58:	4594      	cmp	ip, r2
    5b5a:	d100      	bne.n	5b5e <__aeabi_dsub+0x2fe>
    5b5c:	e0c5      	b.n	5cea <__aeabi_dsub+0x48a>
    5b5e:	1869      	adds	r1, r5, r1
    5b60:	42a9      	cmp	r1, r5
    5b62:	4192      	sbcs	r2, r2
    5b64:	183f      	adds	r7, r7, r0
    5b66:	4252      	negs	r2, r2
    5b68:	19d2      	adds	r2, r2, r7
    5b6a:	0849      	lsrs	r1, r1, #1
    5b6c:	07d5      	lsls	r5, r2, #31
    5b6e:	430d      	orrs	r5, r1
    5b70:	0857      	lsrs	r7, r2, #1
    5b72:	4664      	mov	r4, ip
    5b74:	e6a0      	b.n	58b8 <__aeabi_dsub+0x58>
    5b76:	4b13      	ldr	r3, [pc, #76]	; (5bc4 <__aeabi_dsub+0x364>)
    5b78:	429c      	cmp	r4, r3
    5b7a:	d000      	beq.n	5b7e <__aeabi_dsub+0x31e>
    5b7c:	e6d9      	b.n	5932 <__aeabi_dsub+0xd2>
    5b7e:	e69b      	b.n	58b8 <__aeabi_dsub+0x58>
    5b80:	0011      	movs	r1, r2
    5b82:	3c1f      	subs	r4, #31
    5b84:	40e1      	lsrs	r1, r4
    5b86:	000c      	movs	r4, r1
    5b88:	2b20      	cmp	r3, #32
    5b8a:	d100      	bne.n	5b8e <__aeabi_dsub+0x32e>
    5b8c:	e080      	b.n	5c90 <__aeabi_dsub+0x430>
    5b8e:	2140      	movs	r1, #64	; 0x40
    5b90:	1acb      	subs	r3, r1, r3
    5b92:	409a      	lsls	r2, r3
    5b94:	4315      	orrs	r5, r2
    5b96:	1e6a      	subs	r2, r5, #1
    5b98:	4195      	sbcs	r5, r2
    5b9a:	2700      	movs	r7, #0
    5b9c:	4325      	orrs	r5, r4
    5b9e:	2400      	movs	r4, #0
    5ba0:	e71f      	b.n	59e2 <__aeabi_dsub+0x182>
    5ba2:	4663      	mov	r3, ip
    5ba4:	0002      	movs	r2, r0
    5ba6:	3b20      	subs	r3, #32
    5ba8:	40da      	lsrs	r2, r3
    5baa:	4663      	mov	r3, ip
    5bac:	2b20      	cmp	r3, #32
    5bae:	d071      	beq.n	5c94 <__aeabi_dsub+0x434>
    5bb0:	2340      	movs	r3, #64	; 0x40
    5bb2:	4666      	mov	r6, ip
    5bb4:	1b9b      	subs	r3, r3, r6
    5bb6:	4098      	lsls	r0, r3
    5bb8:	4301      	orrs	r1, r0
    5bba:	1e48      	subs	r0, r1, #1
    5bbc:	4181      	sbcs	r1, r0
    5bbe:	4311      	orrs	r1, r2
    5bc0:	2200      	movs	r2, #0
    5bc2:	e6cf      	b.n	5964 <__aeabi_dsub+0x104>
    5bc4:	000007ff 	.word	0x000007ff
    5bc8:	ff7fffff 	.word	0xff7fffff
    5bcc:	800fffff 	.word	0x800fffff
    5bd0:	2c00      	cmp	r4, #0
    5bd2:	d048      	beq.n	5c66 <__aeabi_dsub+0x406>
    5bd4:	4cca      	ldr	r4, [pc, #808]	; (5f00 <__aeabi_dsub+0x6a0>)
    5bd6:	42a2      	cmp	r2, r4
    5bd8:	d100      	bne.n	5bdc <__aeabi_dsub+0x37c>
    5bda:	e0a2      	b.n	5d22 <__aeabi_dsub+0x4c2>
    5bdc:	4274      	negs	r4, r6
    5bde:	46a1      	mov	r9, r4
    5be0:	2480      	movs	r4, #128	; 0x80
    5be2:	0424      	lsls	r4, r4, #16
    5be4:	4327      	orrs	r7, r4
    5be6:	464c      	mov	r4, r9
    5be8:	2c38      	cmp	r4, #56	; 0x38
    5bea:	dd00      	ble.n	5bee <__aeabi_dsub+0x38e>
    5bec:	e0db      	b.n	5da6 <__aeabi_dsub+0x546>
    5bee:	2c1f      	cmp	r4, #31
    5bf0:	dd00      	ble.n	5bf4 <__aeabi_dsub+0x394>
    5bf2:	e144      	b.n	5e7e <__aeabi_dsub+0x61e>
    5bf4:	464e      	mov	r6, r9
    5bf6:	2420      	movs	r4, #32
    5bf8:	1ba4      	subs	r4, r4, r6
    5bfa:	003e      	movs	r6, r7
    5bfc:	40a6      	lsls	r6, r4
    5bfe:	46a2      	mov	sl, r4
    5c00:	46b0      	mov	r8, r6
    5c02:	464c      	mov	r4, r9
    5c04:	002e      	movs	r6, r5
    5c06:	40e6      	lsrs	r6, r4
    5c08:	46b4      	mov	ip, r6
    5c0a:	4646      	mov	r6, r8
    5c0c:	4664      	mov	r4, ip
    5c0e:	4326      	orrs	r6, r4
    5c10:	4654      	mov	r4, sl
    5c12:	40a5      	lsls	r5, r4
    5c14:	1e6c      	subs	r4, r5, #1
    5c16:	41a5      	sbcs	r5, r4
    5c18:	0034      	movs	r4, r6
    5c1a:	432c      	orrs	r4, r5
    5c1c:	464d      	mov	r5, r9
    5c1e:	40ef      	lsrs	r7, r5
    5c20:	1b0d      	subs	r5, r1, r4
    5c22:	e028      	b.n	5c76 <__aeabi_dsub+0x416>
    5c24:	464a      	mov	r2, r9
    5c26:	4643      	mov	r3, r8
    5c28:	464d      	mov	r5, r9
    5c2a:	431a      	orrs	r2, r3
    5c2c:	d000      	beq.n	5c30 <__aeabi_dsub+0x3d0>
    5c2e:	e6a5      	b.n	597c <__aeabi_dsub+0x11c>
    5c30:	2300      	movs	r3, #0
    5c32:	2400      	movs	r4, #0
    5c34:	2500      	movs	r5, #0
    5c36:	e6de      	b.n	59f6 <__aeabi_dsub+0x196>
    5c38:	2a1f      	cmp	r2, #31
    5c3a:	dc5a      	bgt.n	5cf2 <__aeabi_dsub+0x492>
    5c3c:	4666      	mov	r6, ip
    5c3e:	2220      	movs	r2, #32
    5c40:	1b92      	subs	r2, r2, r6
    5c42:	0006      	movs	r6, r0
    5c44:	4096      	lsls	r6, r2
    5c46:	4691      	mov	r9, r2
    5c48:	46b0      	mov	r8, r6
    5c4a:	4662      	mov	r2, ip
    5c4c:	000e      	movs	r6, r1
    5c4e:	40d6      	lsrs	r6, r2
    5c50:	4642      	mov	r2, r8
    5c52:	4316      	orrs	r6, r2
    5c54:	464a      	mov	r2, r9
    5c56:	4091      	lsls	r1, r2
    5c58:	1e4a      	subs	r2, r1, #1
    5c5a:	4191      	sbcs	r1, r2
    5c5c:	0002      	movs	r2, r0
    5c5e:	4660      	mov	r0, ip
    5c60:	4331      	orrs	r1, r6
    5c62:	40c2      	lsrs	r2, r0
    5c64:	e6e4      	b.n	5a30 <__aeabi_dsub+0x1d0>
    5c66:	003c      	movs	r4, r7
    5c68:	432c      	orrs	r4, r5
    5c6a:	d05a      	beq.n	5d22 <__aeabi_dsub+0x4c2>
    5c6c:	43f4      	mvns	r4, r6
    5c6e:	46a1      	mov	r9, r4
    5c70:	2c00      	cmp	r4, #0
    5c72:	d152      	bne.n	5d1a <__aeabi_dsub+0x4ba>
    5c74:	1b4d      	subs	r5, r1, r5
    5c76:	42a9      	cmp	r1, r5
    5c78:	4189      	sbcs	r1, r1
    5c7a:	1bc7      	subs	r7, r0, r7
    5c7c:	4249      	negs	r1, r1
    5c7e:	1a7f      	subs	r7, r7, r1
    5c80:	0014      	movs	r4, r2
    5c82:	469a      	mov	sl, r3
    5c84:	e675      	b.n	5972 <__aeabi_dsub+0x112>
    5c86:	4a9e      	ldr	r2, [pc, #632]	; (5f00 <__aeabi_dsub+0x6a0>)
    5c88:	4294      	cmp	r4, r2
    5c8a:	d000      	beq.n	5c8e <__aeabi_dsub+0x42e>
    5c8c:	e6c7      	b.n	5a1e <__aeabi_dsub+0x1be>
    5c8e:	e613      	b.n	58b8 <__aeabi_dsub+0x58>
    5c90:	2200      	movs	r2, #0
    5c92:	e77f      	b.n	5b94 <__aeabi_dsub+0x334>
    5c94:	2000      	movs	r0, #0
    5c96:	e78f      	b.n	5bb8 <__aeabi_dsub+0x358>
    5c98:	2c00      	cmp	r4, #0
    5c9a:	d000      	beq.n	5c9e <__aeabi_dsub+0x43e>
    5c9c:	e0c8      	b.n	5e30 <__aeabi_dsub+0x5d0>
    5c9e:	003b      	movs	r3, r7
    5ca0:	432b      	orrs	r3, r5
    5ca2:	d100      	bne.n	5ca6 <__aeabi_dsub+0x446>
    5ca4:	e10f      	b.n	5ec6 <__aeabi_dsub+0x666>
    5ca6:	0003      	movs	r3, r0
    5ca8:	430b      	orrs	r3, r1
    5caa:	d100      	bne.n	5cae <__aeabi_dsub+0x44e>
    5cac:	e604      	b.n	58b8 <__aeabi_dsub+0x58>
    5cae:	1869      	adds	r1, r5, r1
    5cb0:	42a9      	cmp	r1, r5
    5cb2:	419b      	sbcs	r3, r3
    5cb4:	183f      	adds	r7, r7, r0
    5cb6:	425b      	negs	r3, r3
    5cb8:	19df      	adds	r7, r3, r7
    5cba:	023b      	lsls	r3, r7, #8
    5cbc:	d400      	bmi.n	5cc0 <__aeabi_dsub+0x460>
    5cbe:	e11a      	b.n	5ef6 <__aeabi_dsub+0x696>
    5cc0:	4b90      	ldr	r3, [pc, #576]	; (5f04 <__aeabi_dsub+0x6a4>)
    5cc2:	000d      	movs	r5, r1
    5cc4:	401f      	ands	r7, r3
    5cc6:	4664      	mov	r4, ip
    5cc8:	e5f6      	b.n	58b8 <__aeabi_dsub+0x58>
    5cca:	469a      	mov	sl, r3
    5ccc:	e689      	b.n	59e2 <__aeabi_dsub+0x182>
    5cce:	003a      	movs	r2, r7
    5cd0:	432a      	orrs	r2, r5
    5cd2:	2c00      	cmp	r4, #0
    5cd4:	d15c      	bne.n	5d90 <__aeabi_dsub+0x530>
    5cd6:	2a00      	cmp	r2, #0
    5cd8:	d175      	bne.n	5dc6 <__aeabi_dsub+0x566>
    5cda:	0002      	movs	r2, r0
    5cdc:	430a      	orrs	r2, r1
    5cde:	d100      	bne.n	5ce2 <__aeabi_dsub+0x482>
    5ce0:	e0ca      	b.n	5e78 <__aeabi_dsub+0x618>
    5ce2:	0007      	movs	r7, r0
    5ce4:	000d      	movs	r5, r1
    5ce6:	469a      	mov	sl, r3
    5ce8:	e5e6      	b.n	58b8 <__aeabi_dsub+0x58>
    5cea:	4664      	mov	r4, ip
    5cec:	2200      	movs	r2, #0
    5cee:	2500      	movs	r5, #0
    5cf0:	e681      	b.n	59f6 <__aeabi_dsub+0x196>
    5cf2:	4662      	mov	r2, ip
    5cf4:	0006      	movs	r6, r0
    5cf6:	3a20      	subs	r2, #32
    5cf8:	40d6      	lsrs	r6, r2
    5cfa:	4662      	mov	r2, ip
    5cfc:	46b0      	mov	r8, r6
    5cfe:	2a20      	cmp	r2, #32
    5d00:	d100      	bne.n	5d04 <__aeabi_dsub+0x4a4>
    5d02:	e0b7      	b.n	5e74 <__aeabi_dsub+0x614>
    5d04:	2240      	movs	r2, #64	; 0x40
    5d06:	4666      	mov	r6, ip
    5d08:	1b92      	subs	r2, r2, r6
    5d0a:	4090      	lsls	r0, r2
    5d0c:	4301      	orrs	r1, r0
    5d0e:	4642      	mov	r2, r8
    5d10:	1e48      	subs	r0, r1, #1
    5d12:	4181      	sbcs	r1, r0
    5d14:	4311      	orrs	r1, r2
    5d16:	2200      	movs	r2, #0
    5d18:	e68a      	b.n	5a30 <__aeabi_dsub+0x1d0>
    5d1a:	4c79      	ldr	r4, [pc, #484]	; (5f00 <__aeabi_dsub+0x6a0>)
    5d1c:	42a2      	cmp	r2, r4
    5d1e:	d000      	beq.n	5d22 <__aeabi_dsub+0x4c2>
    5d20:	e761      	b.n	5be6 <__aeabi_dsub+0x386>
    5d22:	0007      	movs	r7, r0
    5d24:	000d      	movs	r5, r1
    5d26:	0014      	movs	r4, r2
    5d28:	469a      	mov	sl, r3
    5d2a:	e5c5      	b.n	58b8 <__aeabi_dsub+0x58>
    5d2c:	2c00      	cmp	r4, #0
    5d2e:	d141      	bne.n	5db4 <__aeabi_dsub+0x554>
    5d30:	003c      	movs	r4, r7
    5d32:	432c      	orrs	r4, r5
    5d34:	d078      	beq.n	5e28 <__aeabi_dsub+0x5c8>
    5d36:	43f4      	mvns	r4, r6
    5d38:	46a1      	mov	r9, r4
    5d3a:	2c00      	cmp	r4, #0
    5d3c:	d020      	beq.n	5d80 <__aeabi_dsub+0x520>
    5d3e:	4c70      	ldr	r4, [pc, #448]	; (5f00 <__aeabi_dsub+0x6a0>)
    5d40:	42a2      	cmp	r2, r4
    5d42:	d071      	beq.n	5e28 <__aeabi_dsub+0x5c8>
    5d44:	464c      	mov	r4, r9
    5d46:	2c38      	cmp	r4, #56	; 0x38
    5d48:	dd00      	ble.n	5d4c <__aeabi_dsub+0x4ec>
    5d4a:	e0b2      	b.n	5eb2 <__aeabi_dsub+0x652>
    5d4c:	2c1f      	cmp	r4, #31
    5d4e:	dd00      	ble.n	5d52 <__aeabi_dsub+0x4f2>
    5d50:	e0bc      	b.n	5ecc <__aeabi_dsub+0x66c>
    5d52:	2620      	movs	r6, #32
    5d54:	1b34      	subs	r4, r6, r4
    5d56:	46a2      	mov	sl, r4
    5d58:	003c      	movs	r4, r7
    5d5a:	4656      	mov	r6, sl
    5d5c:	40b4      	lsls	r4, r6
    5d5e:	464e      	mov	r6, r9
    5d60:	46a0      	mov	r8, r4
    5d62:	002c      	movs	r4, r5
    5d64:	40f4      	lsrs	r4, r6
    5d66:	46a4      	mov	ip, r4
    5d68:	4644      	mov	r4, r8
    5d6a:	4666      	mov	r6, ip
    5d6c:	4334      	orrs	r4, r6
    5d6e:	46a4      	mov	ip, r4
    5d70:	4654      	mov	r4, sl
    5d72:	40a5      	lsls	r5, r4
    5d74:	4664      	mov	r4, ip
    5d76:	1e6e      	subs	r6, r5, #1
    5d78:	41b5      	sbcs	r5, r6
    5d7a:	4325      	orrs	r5, r4
    5d7c:	464c      	mov	r4, r9
    5d7e:	40e7      	lsrs	r7, r4
    5d80:	186d      	adds	r5, r5, r1
    5d82:	428d      	cmp	r5, r1
    5d84:	4189      	sbcs	r1, r1
    5d86:	183f      	adds	r7, r7, r0
    5d88:	4249      	negs	r1, r1
    5d8a:	19cf      	adds	r7, r1, r7
    5d8c:	0014      	movs	r4, r2
    5d8e:	e656      	b.n	5a3e <__aeabi_dsub+0x1de>
    5d90:	2a00      	cmp	r2, #0
    5d92:	d12f      	bne.n	5df4 <__aeabi_dsub+0x594>
    5d94:	0002      	movs	r2, r0
    5d96:	430a      	orrs	r2, r1
    5d98:	d100      	bne.n	5d9c <__aeabi_dsub+0x53c>
    5d9a:	e084      	b.n	5ea6 <__aeabi_dsub+0x646>
    5d9c:	0007      	movs	r7, r0
    5d9e:	000d      	movs	r5, r1
    5da0:	469a      	mov	sl, r3
    5da2:	4c57      	ldr	r4, [pc, #348]	; (5f00 <__aeabi_dsub+0x6a0>)
    5da4:	e588      	b.n	58b8 <__aeabi_dsub+0x58>
    5da6:	433d      	orrs	r5, r7
    5da8:	1e6f      	subs	r7, r5, #1
    5daa:	41bd      	sbcs	r5, r7
    5dac:	b2ec      	uxtb	r4, r5
    5dae:	2700      	movs	r7, #0
    5db0:	1b0d      	subs	r5, r1, r4
    5db2:	e760      	b.n	5c76 <__aeabi_dsub+0x416>
    5db4:	4c52      	ldr	r4, [pc, #328]	; (5f00 <__aeabi_dsub+0x6a0>)
    5db6:	42a2      	cmp	r2, r4
    5db8:	d036      	beq.n	5e28 <__aeabi_dsub+0x5c8>
    5dba:	4274      	negs	r4, r6
    5dbc:	2680      	movs	r6, #128	; 0x80
    5dbe:	0436      	lsls	r6, r6, #16
    5dc0:	46a1      	mov	r9, r4
    5dc2:	4337      	orrs	r7, r6
    5dc4:	e7be      	b.n	5d44 <__aeabi_dsub+0x4e4>
    5dc6:	0002      	movs	r2, r0
    5dc8:	430a      	orrs	r2, r1
    5dca:	d100      	bne.n	5dce <__aeabi_dsub+0x56e>
    5dcc:	e574      	b.n	58b8 <__aeabi_dsub+0x58>
    5dce:	1a6a      	subs	r2, r5, r1
    5dd0:	4690      	mov	r8, r2
    5dd2:	4545      	cmp	r5, r8
    5dd4:	41b6      	sbcs	r6, r6
    5dd6:	1a3a      	subs	r2, r7, r0
    5dd8:	4276      	negs	r6, r6
    5dda:	1b92      	subs	r2, r2, r6
    5ddc:	4694      	mov	ip, r2
    5dde:	0212      	lsls	r2, r2, #8
    5de0:	d400      	bmi.n	5de4 <__aeabi_dsub+0x584>
    5de2:	e5f7      	b.n	59d4 <__aeabi_dsub+0x174>
    5de4:	1b4d      	subs	r5, r1, r5
    5de6:	42a9      	cmp	r1, r5
    5de8:	4189      	sbcs	r1, r1
    5dea:	1bc7      	subs	r7, r0, r7
    5dec:	4249      	negs	r1, r1
    5dee:	1a7f      	subs	r7, r7, r1
    5df0:	469a      	mov	sl, r3
    5df2:	e561      	b.n	58b8 <__aeabi_dsub+0x58>
    5df4:	0002      	movs	r2, r0
    5df6:	430a      	orrs	r2, r1
    5df8:	d03a      	beq.n	5e70 <__aeabi_dsub+0x610>
    5dfa:	08ed      	lsrs	r5, r5, #3
    5dfc:	077c      	lsls	r4, r7, #29
    5dfe:	432c      	orrs	r4, r5
    5e00:	2580      	movs	r5, #128	; 0x80
    5e02:	08fa      	lsrs	r2, r7, #3
    5e04:	032d      	lsls	r5, r5, #12
    5e06:	422a      	tst	r2, r5
    5e08:	d008      	beq.n	5e1c <__aeabi_dsub+0x5bc>
    5e0a:	08c7      	lsrs	r7, r0, #3
    5e0c:	422f      	tst	r7, r5
    5e0e:	d105      	bne.n	5e1c <__aeabi_dsub+0x5bc>
    5e10:	0745      	lsls	r5, r0, #29
    5e12:	002c      	movs	r4, r5
    5e14:	003a      	movs	r2, r7
    5e16:	469a      	mov	sl, r3
    5e18:	08c9      	lsrs	r1, r1, #3
    5e1a:	430c      	orrs	r4, r1
    5e1c:	0f67      	lsrs	r7, r4, #29
    5e1e:	00d2      	lsls	r2, r2, #3
    5e20:	00e5      	lsls	r5, r4, #3
    5e22:	4317      	orrs	r7, r2
    5e24:	4c36      	ldr	r4, [pc, #216]	; (5f00 <__aeabi_dsub+0x6a0>)
    5e26:	e547      	b.n	58b8 <__aeabi_dsub+0x58>
    5e28:	0007      	movs	r7, r0
    5e2a:	000d      	movs	r5, r1
    5e2c:	0014      	movs	r4, r2
    5e2e:	e543      	b.n	58b8 <__aeabi_dsub+0x58>
    5e30:	003a      	movs	r2, r7
    5e32:	432a      	orrs	r2, r5
    5e34:	d043      	beq.n	5ebe <__aeabi_dsub+0x65e>
    5e36:	0002      	movs	r2, r0
    5e38:	430a      	orrs	r2, r1
    5e3a:	d019      	beq.n	5e70 <__aeabi_dsub+0x610>
    5e3c:	08ed      	lsrs	r5, r5, #3
    5e3e:	077c      	lsls	r4, r7, #29
    5e40:	432c      	orrs	r4, r5
    5e42:	2580      	movs	r5, #128	; 0x80
    5e44:	08fa      	lsrs	r2, r7, #3
    5e46:	032d      	lsls	r5, r5, #12
    5e48:	422a      	tst	r2, r5
    5e4a:	d007      	beq.n	5e5c <__aeabi_dsub+0x5fc>
    5e4c:	08c6      	lsrs	r6, r0, #3
    5e4e:	422e      	tst	r6, r5
    5e50:	d104      	bne.n	5e5c <__aeabi_dsub+0x5fc>
    5e52:	0747      	lsls	r7, r0, #29
    5e54:	003c      	movs	r4, r7
    5e56:	0032      	movs	r2, r6
    5e58:	08c9      	lsrs	r1, r1, #3
    5e5a:	430c      	orrs	r4, r1
    5e5c:	00d7      	lsls	r7, r2, #3
    5e5e:	0f62      	lsrs	r2, r4, #29
    5e60:	00e5      	lsls	r5, r4, #3
    5e62:	4317      	orrs	r7, r2
    5e64:	469a      	mov	sl, r3
    5e66:	4c26      	ldr	r4, [pc, #152]	; (5f00 <__aeabi_dsub+0x6a0>)
    5e68:	e526      	b.n	58b8 <__aeabi_dsub+0x58>
    5e6a:	2200      	movs	r2, #0
    5e6c:	2500      	movs	r5, #0
    5e6e:	e544      	b.n	58fa <__aeabi_dsub+0x9a>
    5e70:	4c23      	ldr	r4, [pc, #140]	; (5f00 <__aeabi_dsub+0x6a0>)
    5e72:	e521      	b.n	58b8 <__aeabi_dsub+0x58>
    5e74:	2000      	movs	r0, #0
    5e76:	e749      	b.n	5d0c <__aeabi_dsub+0x4ac>
    5e78:	2300      	movs	r3, #0
    5e7a:	2500      	movs	r5, #0
    5e7c:	e5bb      	b.n	59f6 <__aeabi_dsub+0x196>
    5e7e:	464c      	mov	r4, r9
    5e80:	003e      	movs	r6, r7
    5e82:	3c20      	subs	r4, #32
    5e84:	40e6      	lsrs	r6, r4
    5e86:	464c      	mov	r4, r9
    5e88:	46b4      	mov	ip, r6
    5e8a:	2c20      	cmp	r4, #32
    5e8c:	d031      	beq.n	5ef2 <__aeabi_dsub+0x692>
    5e8e:	2440      	movs	r4, #64	; 0x40
    5e90:	464e      	mov	r6, r9
    5e92:	1ba6      	subs	r6, r4, r6
    5e94:	40b7      	lsls	r7, r6
    5e96:	433d      	orrs	r5, r7
    5e98:	1e6c      	subs	r4, r5, #1
    5e9a:	41a5      	sbcs	r5, r4
    5e9c:	4664      	mov	r4, ip
    5e9e:	432c      	orrs	r4, r5
    5ea0:	2700      	movs	r7, #0
    5ea2:	1b0d      	subs	r5, r1, r4
    5ea4:	e6e7      	b.n	5c76 <__aeabi_dsub+0x416>
    5ea6:	2280      	movs	r2, #128	; 0x80
    5ea8:	2300      	movs	r3, #0
    5eaa:	0312      	lsls	r2, r2, #12
    5eac:	4c14      	ldr	r4, [pc, #80]	; (5f00 <__aeabi_dsub+0x6a0>)
    5eae:	2500      	movs	r5, #0
    5eb0:	e5a1      	b.n	59f6 <__aeabi_dsub+0x196>
    5eb2:	433d      	orrs	r5, r7
    5eb4:	1e6f      	subs	r7, r5, #1
    5eb6:	41bd      	sbcs	r5, r7
    5eb8:	2700      	movs	r7, #0
    5eba:	b2ed      	uxtb	r5, r5
    5ebc:	e760      	b.n	5d80 <__aeabi_dsub+0x520>
    5ebe:	0007      	movs	r7, r0
    5ec0:	000d      	movs	r5, r1
    5ec2:	4c0f      	ldr	r4, [pc, #60]	; (5f00 <__aeabi_dsub+0x6a0>)
    5ec4:	e4f8      	b.n	58b8 <__aeabi_dsub+0x58>
    5ec6:	0007      	movs	r7, r0
    5ec8:	000d      	movs	r5, r1
    5eca:	e4f5      	b.n	58b8 <__aeabi_dsub+0x58>
    5ecc:	464e      	mov	r6, r9
    5ece:	003c      	movs	r4, r7
    5ed0:	3e20      	subs	r6, #32
    5ed2:	40f4      	lsrs	r4, r6
    5ed4:	46a0      	mov	r8, r4
    5ed6:	464c      	mov	r4, r9
    5ed8:	2c20      	cmp	r4, #32
    5eda:	d00e      	beq.n	5efa <__aeabi_dsub+0x69a>
    5edc:	2440      	movs	r4, #64	; 0x40
    5ede:	464e      	mov	r6, r9
    5ee0:	1ba4      	subs	r4, r4, r6
    5ee2:	40a7      	lsls	r7, r4
    5ee4:	433d      	orrs	r5, r7
    5ee6:	1e6f      	subs	r7, r5, #1
    5ee8:	41bd      	sbcs	r5, r7
    5eea:	4644      	mov	r4, r8
    5eec:	2700      	movs	r7, #0
    5eee:	4325      	orrs	r5, r4
    5ef0:	e746      	b.n	5d80 <__aeabi_dsub+0x520>
    5ef2:	2700      	movs	r7, #0
    5ef4:	e7cf      	b.n	5e96 <__aeabi_dsub+0x636>
    5ef6:	000d      	movs	r5, r1
    5ef8:	e573      	b.n	59e2 <__aeabi_dsub+0x182>
    5efa:	2700      	movs	r7, #0
    5efc:	e7f2      	b.n	5ee4 <__aeabi_dsub+0x684>
    5efe:	46c0      	nop			; (mov r8, r8)
    5f00:	000007ff 	.word	0x000007ff
    5f04:	ff7fffff 	.word	0xff7fffff

00005f08 <__aeabi_dcmpun>:
    5f08:	b570      	push	{r4, r5, r6, lr}
    5f0a:	4e0e      	ldr	r6, [pc, #56]	; (5f44 <__aeabi_dcmpun+0x3c>)
    5f0c:	030c      	lsls	r4, r1, #12
    5f0e:	031d      	lsls	r5, r3, #12
    5f10:	0049      	lsls	r1, r1, #1
    5f12:	005b      	lsls	r3, r3, #1
    5f14:	0b24      	lsrs	r4, r4, #12
    5f16:	0d49      	lsrs	r1, r1, #21
    5f18:	0b2d      	lsrs	r5, r5, #12
    5f1a:	0d5b      	lsrs	r3, r3, #21
    5f1c:	42b1      	cmp	r1, r6
    5f1e:	d004      	beq.n	5f2a <__aeabi_dcmpun+0x22>
    5f20:	4908      	ldr	r1, [pc, #32]	; (5f44 <__aeabi_dcmpun+0x3c>)
    5f22:	2000      	movs	r0, #0
    5f24:	428b      	cmp	r3, r1
    5f26:	d008      	beq.n	5f3a <__aeabi_dcmpun+0x32>
    5f28:	bd70      	pop	{r4, r5, r6, pc}
    5f2a:	4304      	orrs	r4, r0
    5f2c:	2001      	movs	r0, #1
    5f2e:	2c00      	cmp	r4, #0
    5f30:	d1fa      	bne.n	5f28 <__aeabi_dcmpun+0x20>
    5f32:	4904      	ldr	r1, [pc, #16]	; (5f44 <__aeabi_dcmpun+0x3c>)
    5f34:	2000      	movs	r0, #0
    5f36:	428b      	cmp	r3, r1
    5f38:	d1f6      	bne.n	5f28 <__aeabi_dcmpun+0x20>
    5f3a:	4315      	orrs	r5, r2
    5f3c:	0028      	movs	r0, r5
    5f3e:	1e45      	subs	r5, r0, #1
    5f40:	41a8      	sbcs	r0, r5
    5f42:	e7f1      	b.n	5f28 <__aeabi_dcmpun+0x20>
    5f44:	000007ff 	.word	0x000007ff

00005f48 <__aeabi_d2iz>:
    5f48:	030b      	lsls	r3, r1, #12
    5f4a:	b530      	push	{r4, r5, lr}
    5f4c:	4d13      	ldr	r5, [pc, #76]	; (5f9c <__aeabi_d2iz+0x54>)
    5f4e:	0b1a      	lsrs	r2, r3, #12
    5f50:	004b      	lsls	r3, r1, #1
    5f52:	0d5b      	lsrs	r3, r3, #21
    5f54:	0fc9      	lsrs	r1, r1, #31
    5f56:	2400      	movs	r4, #0
    5f58:	42ab      	cmp	r3, r5
    5f5a:	dd11      	ble.n	5f80 <__aeabi_d2iz+0x38>
    5f5c:	4c10      	ldr	r4, [pc, #64]	; (5fa0 <__aeabi_d2iz+0x58>)
    5f5e:	42a3      	cmp	r3, r4
    5f60:	dc10      	bgt.n	5f84 <__aeabi_d2iz+0x3c>
    5f62:	2480      	movs	r4, #128	; 0x80
    5f64:	0364      	lsls	r4, r4, #13
    5f66:	4322      	orrs	r2, r4
    5f68:	4c0e      	ldr	r4, [pc, #56]	; (5fa4 <__aeabi_d2iz+0x5c>)
    5f6a:	1ae4      	subs	r4, r4, r3
    5f6c:	2c1f      	cmp	r4, #31
    5f6e:	dd0c      	ble.n	5f8a <__aeabi_d2iz+0x42>
    5f70:	480d      	ldr	r0, [pc, #52]	; (5fa8 <__aeabi_d2iz+0x60>)
    5f72:	1ac3      	subs	r3, r0, r3
    5f74:	40da      	lsrs	r2, r3
    5f76:	0013      	movs	r3, r2
    5f78:	425c      	negs	r4, r3
    5f7a:	2900      	cmp	r1, #0
    5f7c:	d100      	bne.n	5f80 <__aeabi_d2iz+0x38>
    5f7e:	001c      	movs	r4, r3
    5f80:	0020      	movs	r0, r4
    5f82:	bd30      	pop	{r4, r5, pc}
    5f84:	4b09      	ldr	r3, [pc, #36]	; (5fac <__aeabi_d2iz+0x64>)
    5f86:	18cc      	adds	r4, r1, r3
    5f88:	e7fa      	b.n	5f80 <__aeabi_d2iz+0x38>
    5f8a:	40e0      	lsrs	r0, r4
    5f8c:	4c08      	ldr	r4, [pc, #32]	; (5fb0 <__aeabi_d2iz+0x68>)
    5f8e:	46a4      	mov	ip, r4
    5f90:	4463      	add	r3, ip
    5f92:	409a      	lsls	r2, r3
    5f94:	0013      	movs	r3, r2
    5f96:	4303      	orrs	r3, r0
    5f98:	e7ee      	b.n	5f78 <__aeabi_d2iz+0x30>
    5f9a:	46c0      	nop			; (mov r8, r8)
    5f9c:	000003fe 	.word	0x000003fe
    5fa0:	0000041d 	.word	0x0000041d
    5fa4:	00000433 	.word	0x00000433
    5fa8:	00000413 	.word	0x00000413
    5fac:	7fffffff 	.word	0x7fffffff
    5fb0:	fffffbed 	.word	0xfffffbed

00005fb4 <__aeabi_i2d>:
    5fb4:	b570      	push	{r4, r5, r6, lr}
    5fb6:	2800      	cmp	r0, #0
    5fb8:	d030      	beq.n	601c <__aeabi_i2d+0x68>
    5fba:	17c3      	asrs	r3, r0, #31
    5fbc:	18c4      	adds	r4, r0, r3
    5fbe:	405c      	eors	r4, r3
    5fc0:	0fc5      	lsrs	r5, r0, #31
    5fc2:	0020      	movs	r0, r4
    5fc4:	f000 fa16 	bl	63f4 <__clzsi2>
    5fc8:	4b17      	ldr	r3, [pc, #92]	; (6028 <__aeabi_i2d+0x74>)
    5fca:	4a18      	ldr	r2, [pc, #96]	; (602c <__aeabi_i2d+0x78>)
    5fcc:	1a1b      	subs	r3, r3, r0
    5fce:	1ad2      	subs	r2, r2, r3
    5fd0:	2a1f      	cmp	r2, #31
    5fd2:	dd18      	ble.n	6006 <__aeabi_i2d+0x52>
    5fd4:	4a16      	ldr	r2, [pc, #88]	; (6030 <__aeabi_i2d+0x7c>)
    5fd6:	1ad2      	subs	r2, r2, r3
    5fd8:	4094      	lsls	r4, r2
    5fda:	2200      	movs	r2, #0
    5fdc:	0324      	lsls	r4, r4, #12
    5fde:	055b      	lsls	r3, r3, #21
    5fe0:	0b24      	lsrs	r4, r4, #12
    5fe2:	0d5b      	lsrs	r3, r3, #21
    5fe4:	2100      	movs	r1, #0
    5fe6:	0010      	movs	r0, r2
    5fe8:	0324      	lsls	r4, r4, #12
    5fea:	0d0a      	lsrs	r2, r1, #20
    5fec:	0512      	lsls	r2, r2, #20
    5fee:	0b24      	lsrs	r4, r4, #12
    5ff0:	4314      	orrs	r4, r2
    5ff2:	4a10      	ldr	r2, [pc, #64]	; (6034 <__aeabi_i2d+0x80>)
    5ff4:	051b      	lsls	r3, r3, #20
    5ff6:	4014      	ands	r4, r2
    5ff8:	431c      	orrs	r4, r3
    5ffa:	0064      	lsls	r4, r4, #1
    5ffc:	07ed      	lsls	r5, r5, #31
    5ffe:	0864      	lsrs	r4, r4, #1
    6000:	432c      	orrs	r4, r5
    6002:	0021      	movs	r1, r4
    6004:	bd70      	pop	{r4, r5, r6, pc}
    6006:	0021      	movs	r1, r4
    6008:	4091      	lsls	r1, r2
    600a:	000a      	movs	r2, r1
    600c:	210b      	movs	r1, #11
    600e:	1a08      	subs	r0, r1, r0
    6010:	40c4      	lsrs	r4, r0
    6012:	055b      	lsls	r3, r3, #21
    6014:	0324      	lsls	r4, r4, #12
    6016:	0b24      	lsrs	r4, r4, #12
    6018:	0d5b      	lsrs	r3, r3, #21
    601a:	e7e3      	b.n	5fe4 <__aeabi_i2d+0x30>
    601c:	2500      	movs	r5, #0
    601e:	2300      	movs	r3, #0
    6020:	2400      	movs	r4, #0
    6022:	2200      	movs	r2, #0
    6024:	e7de      	b.n	5fe4 <__aeabi_i2d+0x30>
    6026:	46c0      	nop			; (mov r8, r8)
    6028:	0000041e 	.word	0x0000041e
    602c:	00000433 	.word	0x00000433
    6030:	00000413 	.word	0x00000413
    6034:	800fffff 	.word	0x800fffff

00006038 <__aeabi_ui2d>:
    6038:	b570      	push	{r4, r5, r6, lr}
    603a:	1e05      	subs	r5, r0, #0
    603c:	d028      	beq.n	6090 <__aeabi_ui2d+0x58>
    603e:	f000 f9d9 	bl	63f4 <__clzsi2>
    6042:	4b15      	ldr	r3, [pc, #84]	; (6098 <__aeabi_ui2d+0x60>)
    6044:	4a15      	ldr	r2, [pc, #84]	; (609c <__aeabi_ui2d+0x64>)
    6046:	1a1b      	subs	r3, r3, r0
    6048:	1ad2      	subs	r2, r2, r3
    604a:	2a1f      	cmp	r2, #31
    604c:	dd16      	ble.n	607c <__aeabi_ui2d+0x44>
    604e:	002c      	movs	r4, r5
    6050:	4a13      	ldr	r2, [pc, #76]	; (60a0 <__aeabi_ui2d+0x68>)
    6052:	2500      	movs	r5, #0
    6054:	1ad2      	subs	r2, r2, r3
    6056:	4094      	lsls	r4, r2
    6058:	055a      	lsls	r2, r3, #21
    605a:	0324      	lsls	r4, r4, #12
    605c:	0b24      	lsrs	r4, r4, #12
    605e:	0d52      	lsrs	r2, r2, #21
    6060:	2100      	movs	r1, #0
    6062:	0324      	lsls	r4, r4, #12
    6064:	0d0b      	lsrs	r3, r1, #20
    6066:	0b24      	lsrs	r4, r4, #12
    6068:	051b      	lsls	r3, r3, #20
    606a:	4323      	orrs	r3, r4
    606c:	4c0d      	ldr	r4, [pc, #52]	; (60a4 <__aeabi_ui2d+0x6c>)
    606e:	0512      	lsls	r2, r2, #20
    6070:	4023      	ands	r3, r4
    6072:	4313      	orrs	r3, r2
    6074:	005b      	lsls	r3, r3, #1
    6076:	0028      	movs	r0, r5
    6078:	0859      	lsrs	r1, r3, #1
    607a:	bd70      	pop	{r4, r5, r6, pc}
    607c:	210b      	movs	r1, #11
    607e:	002c      	movs	r4, r5
    6080:	1a08      	subs	r0, r1, r0
    6082:	40c4      	lsrs	r4, r0
    6084:	4095      	lsls	r5, r2
    6086:	0324      	lsls	r4, r4, #12
    6088:	055a      	lsls	r2, r3, #21
    608a:	0b24      	lsrs	r4, r4, #12
    608c:	0d52      	lsrs	r2, r2, #21
    608e:	e7e7      	b.n	6060 <__aeabi_ui2d+0x28>
    6090:	2200      	movs	r2, #0
    6092:	2400      	movs	r4, #0
    6094:	e7e4      	b.n	6060 <__aeabi_ui2d+0x28>
    6096:	46c0      	nop			; (mov r8, r8)
    6098:	0000041e 	.word	0x0000041e
    609c:	00000433 	.word	0x00000433
    60a0:	00000413 	.word	0x00000413
    60a4:	800fffff 	.word	0x800fffff

000060a8 <__aeabi_f2d>:
    60a8:	0042      	lsls	r2, r0, #1
    60aa:	0e12      	lsrs	r2, r2, #24
    60ac:	1c51      	adds	r1, r2, #1
    60ae:	0243      	lsls	r3, r0, #9
    60b0:	b2c9      	uxtb	r1, r1
    60b2:	b570      	push	{r4, r5, r6, lr}
    60b4:	0a5d      	lsrs	r5, r3, #9
    60b6:	0fc4      	lsrs	r4, r0, #31
    60b8:	2901      	cmp	r1, #1
    60ba:	dd15      	ble.n	60e8 <__aeabi_f2d+0x40>
    60bc:	21e0      	movs	r1, #224	; 0xe0
    60be:	0089      	lsls	r1, r1, #2
    60c0:	468c      	mov	ip, r1
    60c2:	076d      	lsls	r5, r5, #29
    60c4:	0b1b      	lsrs	r3, r3, #12
    60c6:	4462      	add	r2, ip
    60c8:	2100      	movs	r1, #0
    60ca:	0028      	movs	r0, r5
    60cc:	0d0d      	lsrs	r5, r1, #20
    60ce:	052d      	lsls	r5, r5, #20
    60d0:	432b      	orrs	r3, r5
    60d2:	4d1c      	ldr	r5, [pc, #112]	; (6144 <__aeabi_f2d+0x9c>)
    60d4:	0552      	lsls	r2, r2, #21
    60d6:	402b      	ands	r3, r5
    60d8:	0852      	lsrs	r2, r2, #1
    60da:	4313      	orrs	r3, r2
    60dc:	005b      	lsls	r3, r3, #1
    60de:	07e4      	lsls	r4, r4, #31
    60e0:	085b      	lsrs	r3, r3, #1
    60e2:	4323      	orrs	r3, r4
    60e4:	0019      	movs	r1, r3
    60e6:	bd70      	pop	{r4, r5, r6, pc}
    60e8:	2a00      	cmp	r2, #0
    60ea:	d115      	bne.n	6118 <__aeabi_f2d+0x70>
    60ec:	2d00      	cmp	r5, #0
    60ee:	d01f      	beq.n	6130 <__aeabi_f2d+0x88>
    60f0:	0028      	movs	r0, r5
    60f2:	f000 f97f 	bl	63f4 <__clzsi2>
    60f6:	280a      	cmp	r0, #10
    60f8:	dc1d      	bgt.n	6136 <__aeabi_f2d+0x8e>
    60fa:	230b      	movs	r3, #11
    60fc:	002a      	movs	r2, r5
    60fe:	1a1b      	subs	r3, r3, r0
    6100:	40da      	lsrs	r2, r3
    6102:	0013      	movs	r3, r2
    6104:	0002      	movs	r2, r0
    6106:	3215      	adds	r2, #21
    6108:	4095      	lsls	r5, r2
    610a:	4a0f      	ldr	r2, [pc, #60]	; (6148 <__aeabi_f2d+0xa0>)
    610c:	031b      	lsls	r3, r3, #12
    610e:	1a12      	subs	r2, r2, r0
    6110:	0552      	lsls	r2, r2, #21
    6112:	0b1b      	lsrs	r3, r3, #12
    6114:	0d52      	lsrs	r2, r2, #21
    6116:	e7d7      	b.n	60c8 <__aeabi_f2d+0x20>
    6118:	2d00      	cmp	r5, #0
    611a:	d006      	beq.n	612a <__aeabi_f2d+0x82>
    611c:	2280      	movs	r2, #128	; 0x80
    611e:	0b1b      	lsrs	r3, r3, #12
    6120:	0312      	lsls	r2, r2, #12
    6122:	4313      	orrs	r3, r2
    6124:	076d      	lsls	r5, r5, #29
    6126:	4a09      	ldr	r2, [pc, #36]	; (614c <__aeabi_f2d+0xa4>)
    6128:	e7ce      	b.n	60c8 <__aeabi_f2d+0x20>
    612a:	4a08      	ldr	r2, [pc, #32]	; (614c <__aeabi_f2d+0xa4>)
    612c:	2300      	movs	r3, #0
    612e:	e7cb      	b.n	60c8 <__aeabi_f2d+0x20>
    6130:	2200      	movs	r2, #0
    6132:	2300      	movs	r3, #0
    6134:	e7c8      	b.n	60c8 <__aeabi_f2d+0x20>
    6136:	0003      	movs	r3, r0
    6138:	3b0b      	subs	r3, #11
    613a:	409d      	lsls	r5, r3
    613c:	002b      	movs	r3, r5
    613e:	2500      	movs	r5, #0
    6140:	e7e3      	b.n	610a <__aeabi_f2d+0x62>
    6142:	46c0      	nop			; (mov r8, r8)
    6144:	800fffff 	.word	0x800fffff
    6148:	00000389 	.word	0x00000389
    614c:	000007ff 	.word	0x000007ff

00006150 <__aeabi_d2f>:
    6150:	004b      	lsls	r3, r1, #1
    6152:	b570      	push	{r4, r5, r6, lr}
    6154:	0d5e      	lsrs	r6, r3, #21
    6156:	030c      	lsls	r4, r1, #12
    6158:	1c75      	adds	r5, r6, #1
    615a:	0a64      	lsrs	r4, r4, #9
    615c:	0f42      	lsrs	r2, r0, #29
    615e:	056d      	lsls	r5, r5, #21
    6160:	4322      	orrs	r2, r4
    6162:	0fc9      	lsrs	r1, r1, #31
    6164:	00c4      	lsls	r4, r0, #3
    6166:	0d6d      	lsrs	r5, r5, #21
    6168:	2d01      	cmp	r5, #1
    616a:	dd2a      	ble.n	61c2 <__aeabi_d2f+0x72>
    616c:	4b3b      	ldr	r3, [pc, #236]	; (625c <__aeabi_d2f+0x10c>)
    616e:	18f3      	adds	r3, r6, r3
    6170:	2bfe      	cmp	r3, #254	; 0xfe
    6172:	dc1a      	bgt.n	61aa <__aeabi_d2f+0x5a>
    6174:	2b00      	cmp	r3, #0
    6176:	dd42      	ble.n	61fe <__aeabi_d2f+0xae>
    6178:	0180      	lsls	r0, r0, #6
    617a:	1e45      	subs	r5, r0, #1
    617c:	41a8      	sbcs	r0, r5
    617e:	00d2      	lsls	r2, r2, #3
    6180:	4310      	orrs	r0, r2
    6182:	0f62      	lsrs	r2, r4, #29
    6184:	4302      	orrs	r2, r0
    6186:	0750      	lsls	r0, r2, #29
    6188:	d004      	beq.n	6194 <__aeabi_d2f+0x44>
    618a:	200f      	movs	r0, #15
    618c:	4010      	ands	r0, r2
    618e:	2804      	cmp	r0, #4
    6190:	d000      	beq.n	6194 <__aeabi_d2f+0x44>
    6192:	3204      	adds	r2, #4
    6194:	2080      	movs	r0, #128	; 0x80
    6196:	04c0      	lsls	r0, r0, #19
    6198:	4010      	ands	r0, r2
    619a:	d021      	beq.n	61e0 <__aeabi_d2f+0x90>
    619c:	3301      	adds	r3, #1
    619e:	2bff      	cmp	r3, #255	; 0xff
    61a0:	d003      	beq.n	61aa <__aeabi_d2f+0x5a>
    61a2:	0192      	lsls	r2, r2, #6
    61a4:	0a52      	lsrs	r2, r2, #9
    61a6:	b2db      	uxtb	r3, r3
    61a8:	e001      	b.n	61ae <__aeabi_d2f+0x5e>
    61aa:	23ff      	movs	r3, #255	; 0xff
    61ac:	2200      	movs	r2, #0
    61ae:	0252      	lsls	r2, r2, #9
    61b0:	0a52      	lsrs	r2, r2, #9
    61b2:	05db      	lsls	r3, r3, #23
    61b4:	4313      	orrs	r3, r2
    61b6:	005b      	lsls	r3, r3, #1
    61b8:	07c9      	lsls	r1, r1, #31
    61ba:	085b      	lsrs	r3, r3, #1
    61bc:	430b      	orrs	r3, r1
    61be:	0018      	movs	r0, r3
    61c0:	bd70      	pop	{r4, r5, r6, pc}
    61c2:	2e00      	cmp	r6, #0
    61c4:	d007      	beq.n	61d6 <__aeabi_d2f+0x86>
    61c6:	4314      	orrs	r4, r2
    61c8:	d0ef      	beq.n	61aa <__aeabi_d2f+0x5a>
    61ca:	2080      	movs	r0, #128	; 0x80
    61cc:	00d2      	lsls	r2, r2, #3
    61ce:	0480      	lsls	r0, r0, #18
    61d0:	4302      	orrs	r2, r0
    61d2:	23ff      	movs	r3, #255	; 0xff
    61d4:	e7d7      	b.n	6186 <__aeabi_d2f+0x36>
    61d6:	4322      	orrs	r2, r4
    61d8:	2300      	movs	r3, #0
    61da:	2a00      	cmp	r2, #0
    61dc:	d003      	beq.n	61e6 <__aeabi_d2f+0x96>
    61de:	2205      	movs	r2, #5
    61e0:	08d2      	lsrs	r2, r2, #3
    61e2:	2bff      	cmp	r3, #255	; 0xff
    61e4:	d003      	beq.n	61ee <__aeabi_d2f+0x9e>
    61e6:	0252      	lsls	r2, r2, #9
    61e8:	0a52      	lsrs	r2, r2, #9
    61ea:	b2db      	uxtb	r3, r3
    61ec:	e7df      	b.n	61ae <__aeabi_d2f+0x5e>
    61ee:	2a00      	cmp	r2, #0
    61f0:	d032      	beq.n	6258 <__aeabi_d2f+0x108>
    61f2:	2080      	movs	r0, #128	; 0x80
    61f4:	03c0      	lsls	r0, r0, #15
    61f6:	4302      	orrs	r2, r0
    61f8:	0252      	lsls	r2, r2, #9
    61fa:	0a52      	lsrs	r2, r2, #9
    61fc:	e7d7      	b.n	61ae <__aeabi_d2f+0x5e>
    61fe:	0018      	movs	r0, r3
    6200:	3017      	adds	r0, #23
    6202:	db14      	blt.n	622e <__aeabi_d2f+0xde>
    6204:	2080      	movs	r0, #128	; 0x80
    6206:	0400      	lsls	r0, r0, #16
    6208:	4302      	orrs	r2, r0
    620a:	201e      	movs	r0, #30
    620c:	1ac0      	subs	r0, r0, r3
    620e:	281f      	cmp	r0, #31
    6210:	dc0f      	bgt.n	6232 <__aeabi_d2f+0xe2>
    6212:	0025      	movs	r5, r4
    6214:	4b12      	ldr	r3, [pc, #72]	; (6260 <__aeabi_d2f+0x110>)
    6216:	18f3      	adds	r3, r6, r3
    6218:	409d      	lsls	r5, r3
    621a:	1e6e      	subs	r6, r5, #1
    621c:	41b5      	sbcs	r5, r6
    621e:	409a      	lsls	r2, r3
    6220:	002b      	movs	r3, r5
    6222:	4313      	orrs	r3, r2
    6224:	0022      	movs	r2, r4
    6226:	40c2      	lsrs	r2, r0
    6228:	431a      	orrs	r2, r3
    622a:	2300      	movs	r3, #0
    622c:	e7ab      	b.n	6186 <__aeabi_d2f+0x36>
    622e:	2300      	movs	r3, #0
    6230:	e7d5      	b.n	61de <__aeabi_d2f+0x8e>
    6232:	2502      	movs	r5, #2
    6234:	426d      	negs	r5, r5
    6236:	1aeb      	subs	r3, r5, r3
    6238:	0015      	movs	r5, r2
    623a:	40dd      	lsrs	r5, r3
    623c:	2820      	cmp	r0, #32
    623e:	d009      	beq.n	6254 <__aeabi_d2f+0x104>
    6240:	4b08      	ldr	r3, [pc, #32]	; (6264 <__aeabi_d2f+0x114>)
    6242:	18f3      	adds	r3, r6, r3
    6244:	409a      	lsls	r2, r3
    6246:	4314      	orrs	r4, r2
    6248:	1e62      	subs	r2, r4, #1
    624a:	4194      	sbcs	r4, r2
    624c:	0022      	movs	r2, r4
    624e:	2300      	movs	r3, #0
    6250:	432a      	orrs	r2, r5
    6252:	e798      	b.n	6186 <__aeabi_d2f+0x36>
    6254:	2200      	movs	r2, #0
    6256:	e7f6      	b.n	6246 <__aeabi_d2f+0xf6>
    6258:	2200      	movs	r2, #0
    625a:	e7a8      	b.n	61ae <__aeabi_d2f+0x5e>
    625c:	fffffc80 	.word	0xfffffc80
    6260:	fffffc82 	.word	0xfffffc82
    6264:	fffffca2 	.word	0xfffffca2

00006268 <__aeabi_uidiv>:
    6268:	2200      	movs	r2, #0
    626a:	0843      	lsrs	r3, r0, #1
    626c:	428b      	cmp	r3, r1
    626e:	d374      	bcc.n	635a <__aeabi_uidiv+0xf2>
    6270:	0903      	lsrs	r3, r0, #4
    6272:	428b      	cmp	r3, r1
    6274:	d35f      	bcc.n	6336 <__aeabi_uidiv+0xce>
    6276:	0a03      	lsrs	r3, r0, #8
    6278:	428b      	cmp	r3, r1
    627a:	d344      	bcc.n	6306 <__aeabi_uidiv+0x9e>
    627c:	0b03      	lsrs	r3, r0, #12
    627e:	428b      	cmp	r3, r1
    6280:	d328      	bcc.n	62d4 <__aeabi_uidiv+0x6c>
    6282:	0c03      	lsrs	r3, r0, #16
    6284:	428b      	cmp	r3, r1
    6286:	d30d      	bcc.n	62a4 <__aeabi_uidiv+0x3c>
    6288:	22ff      	movs	r2, #255	; 0xff
    628a:	0209      	lsls	r1, r1, #8
    628c:	ba12      	rev	r2, r2
    628e:	0c03      	lsrs	r3, r0, #16
    6290:	428b      	cmp	r3, r1
    6292:	d302      	bcc.n	629a <__aeabi_uidiv+0x32>
    6294:	1212      	asrs	r2, r2, #8
    6296:	0209      	lsls	r1, r1, #8
    6298:	d065      	beq.n	6366 <__aeabi_uidiv+0xfe>
    629a:	0b03      	lsrs	r3, r0, #12
    629c:	428b      	cmp	r3, r1
    629e:	d319      	bcc.n	62d4 <__aeabi_uidiv+0x6c>
    62a0:	e000      	b.n	62a4 <__aeabi_uidiv+0x3c>
    62a2:	0a09      	lsrs	r1, r1, #8
    62a4:	0bc3      	lsrs	r3, r0, #15
    62a6:	428b      	cmp	r3, r1
    62a8:	d301      	bcc.n	62ae <__aeabi_uidiv+0x46>
    62aa:	03cb      	lsls	r3, r1, #15
    62ac:	1ac0      	subs	r0, r0, r3
    62ae:	4152      	adcs	r2, r2
    62b0:	0b83      	lsrs	r3, r0, #14
    62b2:	428b      	cmp	r3, r1
    62b4:	d301      	bcc.n	62ba <__aeabi_uidiv+0x52>
    62b6:	038b      	lsls	r3, r1, #14
    62b8:	1ac0      	subs	r0, r0, r3
    62ba:	4152      	adcs	r2, r2
    62bc:	0b43      	lsrs	r3, r0, #13
    62be:	428b      	cmp	r3, r1
    62c0:	d301      	bcc.n	62c6 <__aeabi_uidiv+0x5e>
    62c2:	034b      	lsls	r3, r1, #13
    62c4:	1ac0      	subs	r0, r0, r3
    62c6:	4152      	adcs	r2, r2
    62c8:	0b03      	lsrs	r3, r0, #12
    62ca:	428b      	cmp	r3, r1
    62cc:	d301      	bcc.n	62d2 <__aeabi_uidiv+0x6a>
    62ce:	030b      	lsls	r3, r1, #12
    62d0:	1ac0      	subs	r0, r0, r3
    62d2:	4152      	adcs	r2, r2
    62d4:	0ac3      	lsrs	r3, r0, #11
    62d6:	428b      	cmp	r3, r1
    62d8:	d301      	bcc.n	62de <__aeabi_uidiv+0x76>
    62da:	02cb      	lsls	r3, r1, #11
    62dc:	1ac0      	subs	r0, r0, r3
    62de:	4152      	adcs	r2, r2
    62e0:	0a83      	lsrs	r3, r0, #10
    62e2:	428b      	cmp	r3, r1
    62e4:	d301      	bcc.n	62ea <__aeabi_uidiv+0x82>
    62e6:	028b      	lsls	r3, r1, #10
    62e8:	1ac0      	subs	r0, r0, r3
    62ea:	4152      	adcs	r2, r2
    62ec:	0a43      	lsrs	r3, r0, #9
    62ee:	428b      	cmp	r3, r1
    62f0:	d301      	bcc.n	62f6 <__aeabi_uidiv+0x8e>
    62f2:	024b      	lsls	r3, r1, #9
    62f4:	1ac0      	subs	r0, r0, r3
    62f6:	4152      	adcs	r2, r2
    62f8:	0a03      	lsrs	r3, r0, #8
    62fa:	428b      	cmp	r3, r1
    62fc:	d301      	bcc.n	6302 <__aeabi_uidiv+0x9a>
    62fe:	020b      	lsls	r3, r1, #8
    6300:	1ac0      	subs	r0, r0, r3
    6302:	4152      	adcs	r2, r2
    6304:	d2cd      	bcs.n	62a2 <__aeabi_uidiv+0x3a>
    6306:	09c3      	lsrs	r3, r0, #7
    6308:	428b      	cmp	r3, r1
    630a:	d301      	bcc.n	6310 <__aeabi_uidiv+0xa8>
    630c:	01cb      	lsls	r3, r1, #7
    630e:	1ac0      	subs	r0, r0, r3
    6310:	4152      	adcs	r2, r2
    6312:	0983      	lsrs	r3, r0, #6
    6314:	428b      	cmp	r3, r1
    6316:	d301      	bcc.n	631c <__aeabi_uidiv+0xb4>
    6318:	018b      	lsls	r3, r1, #6
    631a:	1ac0      	subs	r0, r0, r3
    631c:	4152      	adcs	r2, r2
    631e:	0943      	lsrs	r3, r0, #5
    6320:	428b      	cmp	r3, r1
    6322:	d301      	bcc.n	6328 <__aeabi_uidiv+0xc0>
    6324:	014b      	lsls	r3, r1, #5
    6326:	1ac0      	subs	r0, r0, r3
    6328:	4152      	adcs	r2, r2
    632a:	0903      	lsrs	r3, r0, #4
    632c:	428b      	cmp	r3, r1
    632e:	d301      	bcc.n	6334 <__aeabi_uidiv+0xcc>
    6330:	010b      	lsls	r3, r1, #4
    6332:	1ac0      	subs	r0, r0, r3
    6334:	4152      	adcs	r2, r2
    6336:	08c3      	lsrs	r3, r0, #3
    6338:	428b      	cmp	r3, r1
    633a:	d301      	bcc.n	6340 <__aeabi_uidiv+0xd8>
    633c:	00cb      	lsls	r3, r1, #3
    633e:	1ac0      	subs	r0, r0, r3
    6340:	4152      	adcs	r2, r2
    6342:	0883      	lsrs	r3, r0, #2
    6344:	428b      	cmp	r3, r1
    6346:	d301      	bcc.n	634c <__aeabi_uidiv+0xe4>
    6348:	008b      	lsls	r3, r1, #2
    634a:	1ac0      	subs	r0, r0, r3
    634c:	4152      	adcs	r2, r2
    634e:	0843      	lsrs	r3, r0, #1
    6350:	428b      	cmp	r3, r1
    6352:	d301      	bcc.n	6358 <__aeabi_uidiv+0xf0>
    6354:	004b      	lsls	r3, r1, #1
    6356:	1ac0      	subs	r0, r0, r3
    6358:	4152      	adcs	r2, r2
    635a:	1a41      	subs	r1, r0, r1
    635c:	d200      	bcs.n	6360 <__aeabi_uidiv+0xf8>
    635e:	4601      	mov	r1, r0
    6360:	4152      	adcs	r2, r2
    6362:	4610      	mov	r0, r2
    6364:	4770      	bx	lr
    6366:	e7ff      	b.n	6368 <__aeabi_uidiv+0x100>
    6368:	b501      	push	{r0, lr}
    636a:	2000      	movs	r0, #0
    636c:	f000 f806 	bl	637c <__aeabi_idiv0>
    6370:	bd02      	pop	{r1, pc}
    6372:	46c0      	nop			; (mov r8, r8)

00006374 <__aeabi_uidivmod>:
    6374:	2900      	cmp	r1, #0
    6376:	d0f7      	beq.n	6368 <__aeabi_uidiv+0x100>
    6378:	e776      	b.n	6268 <__aeabi_uidiv>
    637a:	4770      	bx	lr

0000637c <__aeabi_idiv0>:
    637c:	4770      	bx	lr
    637e:	46c0      	nop			; (mov r8, r8)

00006380 <__aeabi_cfrcmple>:
    6380:	4684      	mov	ip, r0
    6382:	1c08      	adds	r0, r1, #0
    6384:	4661      	mov	r1, ip
    6386:	e7ff      	b.n	6388 <__aeabi_cfcmpeq>

00006388 <__aeabi_cfcmpeq>:
    6388:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    638a:	f000 f8bd 	bl	6508 <__lesf2>
    638e:	2800      	cmp	r0, #0
    6390:	d401      	bmi.n	6396 <__aeabi_cfcmpeq+0xe>
    6392:	2100      	movs	r1, #0
    6394:	42c8      	cmn	r0, r1
    6396:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00006398 <__aeabi_fcmpeq>:
    6398:	b510      	push	{r4, lr}
    639a:	f000 f849 	bl	6430 <__eqsf2>
    639e:	4240      	negs	r0, r0
    63a0:	3001      	adds	r0, #1
    63a2:	bd10      	pop	{r4, pc}

000063a4 <__aeabi_fcmplt>:
    63a4:	b510      	push	{r4, lr}
    63a6:	f000 f8af 	bl	6508 <__lesf2>
    63aa:	2800      	cmp	r0, #0
    63ac:	db01      	blt.n	63b2 <__aeabi_fcmplt+0xe>
    63ae:	2000      	movs	r0, #0
    63b0:	bd10      	pop	{r4, pc}
    63b2:	2001      	movs	r0, #1
    63b4:	bd10      	pop	{r4, pc}
    63b6:	46c0      	nop			; (mov r8, r8)

000063b8 <__aeabi_fcmple>:
    63b8:	b510      	push	{r4, lr}
    63ba:	f000 f8a5 	bl	6508 <__lesf2>
    63be:	2800      	cmp	r0, #0
    63c0:	dd01      	ble.n	63c6 <__aeabi_fcmple+0xe>
    63c2:	2000      	movs	r0, #0
    63c4:	bd10      	pop	{r4, pc}
    63c6:	2001      	movs	r0, #1
    63c8:	bd10      	pop	{r4, pc}
    63ca:	46c0      	nop			; (mov r8, r8)

000063cc <__aeabi_fcmpgt>:
    63cc:	b510      	push	{r4, lr}
    63ce:	f000 f857 	bl	6480 <__gesf2>
    63d2:	2800      	cmp	r0, #0
    63d4:	dc01      	bgt.n	63da <__aeabi_fcmpgt+0xe>
    63d6:	2000      	movs	r0, #0
    63d8:	bd10      	pop	{r4, pc}
    63da:	2001      	movs	r0, #1
    63dc:	bd10      	pop	{r4, pc}
    63de:	46c0      	nop			; (mov r8, r8)

000063e0 <__aeabi_fcmpge>:
    63e0:	b510      	push	{r4, lr}
    63e2:	f000 f84d 	bl	6480 <__gesf2>
    63e6:	2800      	cmp	r0, #0
    63e8:	da01      	bge.n	63ee <__aeabi_fcmpge+0xe>
    63ea:	2000      	movs	r0, #0
    63ec:	bd10      	pop	{r4, pc}
    63ee:	2001      	movs	r0, #1
    63f0:	bd10      	pop	{r4, pc}
    63f2:	46c0      	nop			; (mov r8, r8)

000063f4 <__clzsi2>:
    63f4:	211c      	movs	r1, #28
    63f6:	2301      	movs	r3, #1
    63f8:	041b      	lsls	r3, r3, #16
    63fa:	4298      	cmp	r0, r3
    63fc:	d301      	bcc.n	6402 <__clzsi2+0xe>
    63fe:	0c00      	lsrs	r0, r0, #16
    6400:	3910      	subs	r1, #16
    6402:	0a1b      	lsrs	r3, r3, #8
    6404:	4298      	cmp	r0, r3
    6406:	d301      	bcc.n	640c <__clzsi2+0x18>
    6408:	0a00      	lsrs	r0, r0, #8
    640a:	3908      	subs	r1, #8
    640c:	091b      	lsrs	r3, r3, #4
    640e:	4298      	cmp	r0, r3
    6410:	d301      	bcc.n	6416 <__clzsi2+0x22>
    6412:	0900      	lsrs	r0, r0, #4
    6414:	3904      	subs	r1, #4
    6416:	a202      	add	r2, pc, #8	; (adr r2, 6420 <__clzsi2+0x2c>)
    6418:	5c10      	ldrb	r0, [r2, r0]
    641a:	1840      	adds	r0, r0, r1
    641c:	4770      	bx	lr
    641e:	46c0      	nop			; (mov r8, r8)
    6420:	02020304 	.word	0x02020304
    6424:	01010101 	.word	0x01010101
	...

00006430 <__eqsf2>:
    6430:	0243      	lsls	r3, r0, #9
    6432:	b570      	push	{r4, r5, r6, lr}
    6434:	0042      	lsls	r2, r0, #1
    6436:	004c      	lsls	r4, r1, #1
    6438:	0a5d      	lsrs	r5, r3, #9
    643a:	0fc3      	lsrs	r3, r0, #31
    643c:	0248      	lsls	r0, r1, #9
    643e:	0e12      	lsrs	r2, r2, #24
    6440:	0a46      	lsrs	r6, r0, #9
    6442:	0e24      	lsrs	r4, r4, #24
    6444:	0fc9      	lsrs	r1, r1, #31
    6446:	2aff      	cmp	r2, #255	; 0xff
    6448:	d00f      	beq.n	646a <__eqsf2+0x3a>
    644a:	2cff      	cmp	r4, #255	; 0xff
    644c:	d011      	beq.n	6472 <__eqsf2+0x42>
    644e:	2001      	movs	r0, #1
    6450:	42a2      	cmp	r2, r4
    6452:	d000      	beq.n	6456 <__eqsf2+0x26>
    6454:	bd70      	pop	{r4, r5, r6, pc}
    6456:	42b5      	cmp	r5, r6
    6458:	d1fc      	bne.n	6454 <__eqsf2+0x24>
    645a:	428b      	cmp	r3, r1
    645c:	d00d      	beq.n	647a <__eqsf2+0x4a>
    645e:	2a00      	cmp	r2, #0
    6460:	d1f8      	bne.n	6454 <__eqsf2+0x24>
    6462:	0028      	movs	r0, r5
    6464:	1e43      	subs	r3, r0, #1
    6466:	4198      	sbcs	r0, r3
    6468:	e7f4      	b.n	6454 <__eqsf2+0x24>
    646a:	2001      	movs	r0, #1
    646c:	2d00      	cmp	r5, #0
    646e:	d1f1      	bne.n	6454 <__eqsf2+0x24>
    6470:	e7eb      	b.n	644a <__eqsf2+0x1a>
    6472:	2001      	movs	r0, #1
    6474:	2e00      	cmp	r6, #0
    6476:	d1ed      	bne.n	6454 <__eqsf2+0x24>
    6478:	e7e9      	b.n	644e <__eqsf2+0x1e>
    647a:	2000      	movs	r0, #0
    647c:	e7ea      	b.n	6454 <__eqsf2+0x24>
    647e:	46c0      	nop			; (mov r8, r8)

00006480 <__gesf2>:
    6480:	0243      	lsls	r3, r0, #9
    6482:	b5f0      	push	{r4, r5, r6, r7, lr}
    6484:	0042      	lsls	r2, r0, #1
    6486:	0a5d      	lsrs	r5, r3, #9
    6488:	0fc3      	lsrs	r3, r0, #31
    648a:	0248      	lsls	r0, r1, #9
    648c:	0a44      	lsrs	r4, r0, #9
    648e:	0048      	lsls	r0, r1, #1
    6490:	0e12      	lsrs	r2, r2, #24
    6492:	0e00      	lsrs	r0, r0, #24
    6494:	0fc9      	lsrs	r1, r1, #31
    6496:	2aff      	cmp	r2, #255	; 0xff
    6498:	d01f      	beq.n	64da <__gesf2+0x5a>
    649a:	28ff      	cmp	r0, #255	; 0xff
    649c:	d022      	beq.n	64e4 <__gesf2+0x64>
    649e:	2a00      	cmp	r2, #0
    64a0:	d109      	bne.n	64b6 <__gesf2+0x36>
    64a2:	426e      	negs	r6, r5
    64a4:	416e      	adcs	r6, r5
    64a6:	2800      	cmp	r0, #0
    64a8:	d10f      	bne.n	64ca <__gesf2+0x4a>
    64aa:	2c00      	cmp	r4, #0
    64ac:	d10d      	bne.n	64ca <__gesf2+0x4a>
    64ae:	2000      	movs	r0, #0
    64b0:	2d00      	cmp	r5, #0
    64b2:	d009      	beq.n	64c8 <__gesf2+0x48>
    64b4:	e005      	b.n	64c2 <__gesf2+0x42>
    64b6:	2800      	cmp	r0, #0
    64b8:	d101      	bne.n	64be <__gesf2+0x3e>
    64ba:	2c00      	cmp	r4, #0
    64bc:	d001      	beq.n	64c2 <__gesf2+0x42>
    64be:	428b      	cmp	r3, r1
    64c0:	d013      	beq.n	64ea <__gesf2+0x6a>
    64c2:	4258      	negs	r0, r3
    64c4:	2301      	movs	r3, #1
    64c6:	4318      	orrs	r0, r3
    64c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    64ca:	2e00      	cmp	r6, #0
    64cc:	d0f7      	beq.n	64be <__gesf2+0x3e>
    64ce:	4248      	negs	r0, r1
    64d0:	4141      	adcs	r1, r0
    64d2:	2001      	movs	r0, #1
    64d4:	4249      	negs	r1, r1
    64d6:	4308      	orrs	r0, r1
    64d8:	e7f6      	b.n	64c8 <__gesf2+0x48>
    64da:	2d00      	cmp	r5, #0
    64dc:	d0dd      	beq.n	649a <__gesf2+0x1a>
    64de:	2002      	movs	r0, #2
    64e0:	4240      	negs	r0, r0
    64e2:	e7f1      	b.n	64c8 <__gesf2+0x48>
    64e4:	2c00      	cmp	r4, #0
    64e6:	d0da      	beq.n	649e <__gesf2+0x1e>
    64e8:	e7f9      	b.n	64de <__gesf2+0x5e>
    64ea:	4282      	cmp	r2, r0
    64ec:	dce9      	bgt.n	64c2 <__gesf2+0x42>
    64ee:	db04      	blt.n	64fa <__gesf2+0x7a>
    64f0:	42a5      	cmp	r5, r4
    64f2:	d8e6      	bhi.n	64c2 <__gesf2+0x42>
    64f4:	2000      	movs	r0, #0
    64f6:	42a5      	cmp	r5, r4
    64f8:	d2e6      	bcs.n	64c8 <__gesf2+0x48>
    64fa:	4258      	negs	r0, r3
    64fc:	4143      	adcs	r3, r0
    64fe:	2001      	movs	r0, #1
    6500:	425b      	negs	r3, r3
    6502:	4318      	orrs	r0, r3
    6504:	e7e0      	b.n	64c8 <__gesf2+0x48>
    6506:	46c0      	nop			; (mov r8, r8)

00006508 <__lesf2>:
    6508:	0243      	lsls	r3, r0, #9
    650a:	b5f0      	push	{r4, r5, r6, r7, lr}
    650c:	0042      	lsls	r2, r0, #1
    650e:	004c      	lsls	r4, r1, #1
    6510:	0a5e      	lsrs	r6, r3, #9
    6512:	0fc3      	lsrs	r3, r0, #31
    6514:	0248      	lsls	r0, r1, #9
    6516:	0e12      	lsrs	r2, r2, #24
    6518:	0a45      	lsrs	r5, r0, #9
    651a:	0e24      	lsrs	r4, r4, #24
    651c:	0fc9      	lsrs	r1, r1, #31
    651e:	2aff      	cmp	r2, #255	; 0xff
    6520:	d017      	beq.n	6552 <__lesf2+0x4a>
    6522:	2cff      	cmp	r4, #255	; 0xff
    6524:	d019      	beq.n	655a <__lesf2+0x52>
    6526:	2a00      	cmp	r2, #0
    6528:	d10b      	bne.n	6542 <__lesf2+0x3a>
    652a:	4270      	negs	r0, r6
    652c:	4170      	adcs	r0, r6
    652e:	2c00      	cmp	r4, #0
    6530:	d017      	beq.n	6562 <__lesf2+0x5a>
    6532:	2800      	cmp	r0, #0
    6534:	d007      	beq.n	6546 <__lesf2+0x3e>
    6536:	4248      	negs	r0, r1
    6538:	4141      	adcs	r1, r0
    653a:	2001      	movs	r0, #1
    653c:	4249      	negs	r1, r1
    653e:	4308      	orrs	r0, r1
    6540:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6542:	2c00      	cmp	r4, #0
    6544:	d013      	beq.n	656e <__lesf2+0x66>
    6546:	428b      	cmp	r3, r1
    6548:	d014      	beq.n	6574 <__lesf2+0x6c>
    654a:	4258      	negs	r0, r3
    654c:	2301      	movs	r3, #1
    654e:	4318      	orrs	r0, r3
    6550:	e7f6      	b.n	6540 <__lesf2+0x38>
    6552:	2002      	movs	r0, #2
    6554:	2e00      	cmp	r6, #0
    6556:	d1f3      	bne.n	6540 <__lesf2+0x38>
    6558:	e7e3      	b.n	6522 <__lesf2+0x1a>
    655a:	2002      	movs	r0, #2
    655c:	2d00      	cmp	r5, #0
    655e:	d1ef      	bne.n	6540 <__lesf2+0x38>
    6560:	e7e1      	b.n	6526 <__lesf2+0x1e>
    6562:	2d00      	cmp	r5, #0
    6564:	d1e5      	bne.n	6532 <__lesf2+0x2a>
    6566:	2000      	movs	r0, #0
    6568:	2e00      	cmp	r6, #0
    656a:	d0e9      	beq.n	6540 <__lesf2+0x38>
    656c:	e7ed      	b.n	654a <__lesf2+0x42>
    656e:	2d00      	cmp	r5, #0
    6570:	d1e9      	bne.n	6546 <__lesf2+0x3e>
    6572:	e7ea      	b.n	654a <__lesf2+0x42>
    6574:	42a2      	cmp	r2, r4
    6576:	dce8      	bgt.n	654a <__lesf2+0x42>
    6578:	db04      	blt.n	6584 <__lesf2+0x7c>
    657a:	42ae      	cmp	r6, r5
    657c:	d8e5      	bhi.n	654a <__lesf2+0x42>
    657e:	2000      	movs	r0, #0
    6580:	42ae      	cmp	r6, r5
    6582:	d2dd      	bcs.n	6540 <__lesf2+0x38>
    6584:	4258      	negs	r0, r3
    6586:	4143      	adcs	r3, r0
    6588:	2001      	movs	r0, #1
    658a:	425b      	negs	r3, r3
    658c:	4318      	orrs	r0, r3
    658e:	e7d7      	b.n	6540 <__lesf2+0x38>

00006590 <__errno>:
    6590:	4b01      	ldr	r3, [pc, #4]	; (6598 <__errno+0x8>)
    6592:	6818      	ldr	r0, [r3, #0]
    6594:	4770      	bx	lr
    6596:	46c0      	nop			; (mov r8, r8)
    6598:	200004a0 	.word	0x200004a0

0000659c <__libc_init_array>:
    659c:	b570      	push	{r4, r5, r6, lr}
    659e:	4e0d      	ldr	r6, [pc, #52]	; (65d4 <__libc_init_array+0x38>)
    65a0:	4d0d      	ldr	r5, [pc, #52]	; (65d8 <__libc_init_array+0x3c>)
    65a2:	2400      	movs	r4, #0
    65a4:	1bad      	subs	r5, r5, r6
    65a6:	10ad      	asrs	r5, r5, #2
    65a8:	d005      	beq.n	65b6 <__libc_init_array+0x1a>
    65aa:	00a3      	lsls	r3, r4, #2
    65ac:	58f3      	ldr	r3, [r6, r3]
    65ae:	3401      	adds	r4, #1
    65b0:	4798      	blx	r3
    65b2:	42a5      	cmp	r5, r4
    65b4:	d1f9      	bne.n	65aa <__libc_init_array+0xe>
    65b6:	f000 f92f 	bl	6818 <_init>
    65ba:	4e08      	ldr	r6, [pc, #32]	; (65dc <__libc_init_array+0x40>)
    65bc:	4d08      	ldr	r5, [pc, #32]	; (65e0 <__libc_init_array+0x44>)
    65be:	2400      	movs	r4, #0
    65c0:	1bad      	subs	r5, r5, r6
    65c2:	10ad      	asrs	r5, r5, #2
    65c4:	d005      	beq.n	65d2 <__libc_init_array+0x36>
    65c6:	00a3      	lsls	r3, r4, #2
    65c8:	58f3      	ldr	r3, [r6, r3]
    65ca:	3401      	adds	r4, #1
    65cc:	4798      	blx	r3
    65ce:	42a5      	cmp	r5, r4
    65d0:	d1f9      	bne.n	65c6 <__libc_init_array+0x2a>
    65d2:	bd70      	pop	{r4, r5, r6, pc}
    65d4:	00006824 	.word	0x00006824
    65d8:	00006824 	.word	0x00006824
    65dc:	00006824 	.word	0x00006824
    65e0:	0000682c 	.word	0x0000682c

000065e4 <register_fini>:
    65e4:	4b03      	ldr	r3, [pc, #12]	; (65f4 <register_fini+0x10>)
    65e6:	b510      	push	{r4, lr}
    65e8:	2b00      	cmp	r3, #0
    65ea:	d002      	beq.n	65f2 <register_fini+0xe>
    65ec:	4802      	ldr	r0, [pc, #8]	; (65f8 <register_fini+0x14>)
    65ee:	f000 f805 	bl	65fc <atexit>
    65f2:	bd10      	pop	{r4, pc}
    65f4:	00000000 	.word	0x00000000
    65f8:	0000660d 	.word	0x0000660d

000065fc <atexit>:
    65fc:	b510      	push	{r4, lr}
    65fe:	0001      	movs	r1, r0
    6600:	2300      	movs	r3, #0
    6602:	2200      	movs	r2, #0
    6604:	2000      	movs	r0, #0
    6606:	f000 f81b 	bl	6640 <__register_exitproc>
    660a:	bd10      	pop	{r4, pc}

0000660c <__libc_fini_array>:
    660c:	b570      	push	{r4, r5, r6, lr}
    660e:	4b09      	ldr	r3, [pc, #36]	; (6634 <__libc_fini_array+0x28>)
    6610:	4c09      	ldr	r4, [pc, #36]	; (6638 <__libc_fini_array+0x2c>)
    6612:	1ae4      	subs	r4, r4, r3
    6614:	10a4      	asrs	r4, r4, #2
    6616:	d009      	beq.n	662c <__libc_fini_array+0x20>
    6618:	4a08      	ldr	r2, [pc, #32]	; (663c <__libc_fini_array+0x30>)
    661a:	18a5      	adds	r5, r4, r2
    661c:	00ad      	lsls	r5, r5, #2
    661e:	18ed      	adds	r5, r5, r3
    6620:	682b      	ldr	r3, [r5, #0]
    6622:	3c01      	subs	r4, #1
    6624:	4798      	blx	r3
    6626:	3d04      	subs	r5, #4
    6628:	2c00      	cmp	r4, #0
    662a:	d1f9      	bne.n	6620 <__libc_fini_array+0x14>
    662c:	f000 f8fe 	bl	682c <_fini>
    6630:	bd70      	pop	{r4, r5, r6, pc}
    6632:	46c0      	nop			; (mov r8, r8)
    6634:	00006838 	.word	0x00006838
    6638:	0000683c 	.word	0x0000683c
    663c:	3fffffff 	.word	0x3fffffff

00006640 <__register_exitproc>:
    6640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6642:	4644      	mov	r4, r8
    6644:	465f      	mov	r7, fp
    6646:	4656      	mov	r6, sl
    6648:	464d      	mov	r5, r9
    664a:	469b      	mov	fp, r3
    664c:	4b2f      	ldr	r3, [pc, #188]	; (670c <__register_exitproc+0xcc>)
    664e:	b4f0      	push	{r4, r5, r6, r7}
    6650:	681c      	ldr	r4, [r3, #0]
    6652:	23a4      	movs	r3, #164	; 0xa4
    6654:	005b      	lsls	r3, r3, #1
    6656:	0005      	movs	r5, r0
    6658:	58e0      	ldr	r0, [r4, r3]
    665a:	000e      	movs	r6, r1
    665c:	4690      	mov	r8, r2
    665e:	2800      	cmp	r0, #0
    6660:	d04b      	beq.n	66fa <__register_exitproc+0xba>
    6662:	6843      	ldr	r3, [r0, #4]
    6664:	2b1f      	cmp	r3, #31
    6666:	dc0d      	bgt.n	6684 <__register_exitproc+0x44>
    6668:	1c5c      	adds	r4, r3, #1
    666a:	2d00      	cmp	r5, #0
    666c:	d121      	bne.n	66b2 <__register_exitproc+0x72>
    666e:	3302      	adds	r3, #2
    6670:	009b      	lsls	r3, r3, #2
    6672:	6044      	str	r4, [r0, #4]
    6674:	501e      	str	r6, [r3, r0]
    6676:	2000      	movs	r0, #0
    6678:	bc3c      	pop	{r2, r3, r4, r5}
    667a:	4690      	mov	r8, r2
    667c:	4699      	mov	r9, r3
    667e:	46a2      	mov	sl, r4
    6680:	46ab      	mov	fp, r5
    6682:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6684:	4b22      	ldr	r3, [pc, #136]	; (6710 <__register_exitproc+0xd0>)
    6686:	2b00      	cmp	r3, #0
    6688:	d03c      	beq.n	6704 <__register_exitproc+0xc4>
    668a:	20c8      	movs	r0, #200	; 0xc8
    668c:	0040      	lsls	r0, r0, #1
    668e:	e000      	b.n	6692 <__register_exitproc+0x52>
    6690:	bf00      	nop
    6692:	2800      	cmp	r0, #0
    6694:	d036      	beq.n	6704 <__register_exitproc+0xc4>
    6696:	22a4      	movs	r2, #164	; 0xa4
    6698:	2300      	movs	r3, #0
    669a:	0052      	lsls	r2, r2, #1
    669c:	58a1      	ldr	r1, [r4, r2]
    669e:	6043      	str	r3, [r0, #4]
    66a0:	6001      	str	r1, [r0, #0]
    66a2:	50a0      	str	r0, [r4, r2]
    66a4:	3240      	adds	r2, #64	; 0x40
    66a6:	5083      	str	r3, [r0, r2]
    66a8:	3204      	adds	r2, #4
    66aa:	5083      	str	r3, [r0, r2]
    66ac:	2401      	movs	r4, #1
    66ae:	2d00      	cmp	r5, #0
    66b0:	d0dd      	beq.n	666e <__register_exitproc+0x2e>
    66b2:	009a      	lsls	r2, r3, #2
    66b4:	4691      	mov	r9, r2
    66b6:	4481      	add	r9, r0
    66b8:	4642      	mov	r2, r8
    66ba:	2188      	movs	r1, #136	; 0x88
    66bc:	464f      	mov	r7, r9
    66be:	507a      	str	r2, [r7, r1]
    66c0:	22c4      	movs	r2, #196	; 0xc4
    66c2:	0052      	lsls	r2, r2, #1
    66c4:	4690      	mov	r8, r2
    66c6:	4480      	add	r8, r0
    66c8:	4642      	mov	r2, r8
    66ca:	3987      	subs	r1, #135	; 0x87
    66cc:	4099      	lsls	r1, r3
    66ce:	6812      	ldr	r2, [r2, #0]
    66d0:	468a      	mov	sl, r1
    66d2:	430a      	orrs	r2, r1
    66d4:	4694      	mov	ip, r2
    66d6:	4642      	mov	r2, r8
    66d8:	4661      	mov	r1, ip
    66da:	6011      	str	r1, [r2, #0]
    66dc:	2284      	movs	r2, #132	; 0x84
    66de:	4649      	mov	r1, r9
    66e0:	465f      	mov	r7, fp
    66e2:	0052      	lsls	r2, r2, #1
    66e4:	508f      	str	r7, [r1, r2]
    66e6:	2d02      	cmp	r5, #2
    66e8:	d1c1      	bne.n	666e <__register_exitproc+0x2e>
    66ea:	0002      	movs	r2, r0
    66ec:	4655      	mov	r5, sl
    66ee:	328d      	adds	r2, #141	; 0x8d
    66f0:	32ff      	adds	r2, #255	; 0xff
    66f2:	6811      	ldr	r1, [r2, #0]
    66f4:	430d      	orrs	r5, r1
    66f6:	6015      	str	r5, [r2, #0]
    66f8:	e7b9      	b.n	666e <__register_exitproc+0x2e>
    66fa:	0020      	movs	r0, r4
    66fc:	304d      	adds	r0, #77	; 0x4d
    66fe:	30ff      	adds	r0, #255	; 0xff
    6700:	50e0      	str	r0, [r4, r3]
    6702:	e7ae      	b.n	6662 <__register_exitproc+0x22>
    6704:	2001      	movs	r0, #1
    6706:	4240      	negs	r0, r0
    6708:	e7b6      	b.n	6678 <__register_exitproc+0x38>
    670a:	46c0      	nop			; (mov r8, r8)
    670c:	00006814 	.word	0x00006814
    6710:	00000000 	.word	0x00000000

00006714 <senseBatPin>:
    6714:	06000000 01000106                                .....

00006719 <senseAPin>:
    6719:	03010001 0100010b                                .....

0000671e <senseBPin>:
    671e:	02010001 0000010a                                .....

00006723 <senseCPin>:
    6723:	03000001 00000101                                .....

00006728 <senseDPin>:
    6728:	02000001 00000000                                .....

0000672d <analogAccelPin>:
    672d:	07000000 70000007 0000776f 00000000     .......pow......
    673d:	00000000                                         ...

00006740 <TWO52>:
    6740:	00000000 43300000 00000000 c3300000     ......0C......0.
    6750:	00003fe0 00003f3e 00003f3e 00003f3c     .?..>?..>?..<?..
    6760:	00003fd2 00003fd2 00003fc8 00003f3c     .?...?...?..<?..
    6770:	00003fd2 00003fc8 00003fd2 00003f3c     .?...?...?..<?..
    6780:	00003fd8 00003fd8 00003fd8 00004062     .?...?...?..b@..
    6790:	00004d14 00004be2 00004ce8 00004bd8     .M...K...L...K..
    67a0:	00004ce8 00004cf2 00004ce8 00004bd8     .L...L...L...K..
    67b0:	00004be2 00004be2 00004cf2 00004bd8     .K...K...L...K..
    67c0:	00004bce 00004bce 00004bce 00004f44     .K...K...K..DO..
    67d0:	0000555c 0000541c 0000541c 0000541a     \U...T...T...T..
    67e0:	00005534 00005534 00005526 0000541a     4U..4U..&U...T..
    67f0:	00005534 00005526 00005534 0000541a     4U..&U..4U...T..
    6800:	0000553c 0000553c 0000553c 0000573c     <U..<U..<U..<W..
    6810:	00000043                                C...

00006814 <_global_impure_ptr>:
    6814:	20000078                                x.. 

00006818 <_init>:
    6818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    681a:	46c0      	nop			; (mov r8, r8)
    681c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    681e:	bc08      	pop	{r3}
    6820:	469e      	mov	lr, r3
    6822:	4770      	bx	lr

00006824 <__init_array_start>:
    6824:	000065e5 	.word	0x000065e5

00006828 <__frame_dummy_init_array_entry>:
    6828:	000000dd                                ....

0000682c <_fini>:
    682c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    682e:	46c0      	nop			; (mov r8, r8)
    6830:	bcf8      	pop	{r3, r4, r5, r6, r7}
    6832:	bc08      	pop	{r3}
    6834:	469e      	mov	lr, r3
    6836:	4770      	bx	lr

00006838 <__fini_array_start>:
    6838:	000000b5 	.word	0x000000b5
