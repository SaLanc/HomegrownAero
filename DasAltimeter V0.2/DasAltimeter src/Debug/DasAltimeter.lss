
DasAltimeter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000661c  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000004a4  20000000  0000661c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000368  200004a8  00006ac8  000204a8  2**3
                  ALLOC
  3 .stack        00002000  20000810  00006e30  000204a8  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000204a4  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  000204cc  2**0
                  CONTENTS, READONLY
  6 .debug_info   00020132  00000000  00000000  00020525  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000265d  00000000  00000000  00040657  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00002416  00000000  00000000  00042cb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000003e0  00000000  00000000  000450ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000ba8  00000000  00000000  000454aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00015f56  00000000  00000000  00046052  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00009400  00000000  00000000  0005bfa8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000729b3  00000000  00000000  000653a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001078  00000000  00000000  000d7d5c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
 *         retrieved from cpu registers.
 */
void SystemCoreClockUpdate(void)
{
	// Not implemented
	SystemCoreClock = __SYSTEM_CLOCK;
       0:	20002810 	.word	0x20002810
       4:	00000119 	.word	0x00000119
	return;
}
       8:	00000115 	.word	0x00000115
       c:	00000115 	.word	0x00000115
	...
      2c:	00000115 	.word	0x00000115
	...
      38:	00000115 	.word	0x00000115
      3c:	00000115 	.word	0x00000115
      40:	00000115 	.word	0x00000115
      44:	00000115 	.word	0x00000115
      48:	00000115 	.word	0x00000115
      4c:	00001045 	.word	0x00001045
      50:	00000115 	.word	0x00000115
      54:	00000115 	.word	0x00000115
      58:	00000115 	.word	0x00000115
      5c:	00000115 	.word	0x00000115
      60:	00000115 	.word	0x00000115
      64:	00000115 	.word	0x00000115
      68:	00000115 	.word	0x00000115
      6c:	00000115 	.word	0x00000115
      70:	00000115 	.word	0x00000115
      74:	00000115 	.word	0x00000115
      78:	00000115 	.word	0x00000115
      7c:	00000115 	.word	0x00000115
      80:	00000115 	.word	0x00000115
      84:	00000115 	.word	0x00000115
      88:	00000115 	.word	0x00000115
      8c:	000010e5 	.word	0x000010e5
      90:	0000114d 	.word	0x0000114d
	...
      9c:	00000115 	.word	0x00000115
      a0:	00000115 	.word	0x00000115
      a4:	00000115 	.word	0x00000115
      a8:	00000115 	.word	0x00000115
      ac:	00000115 	.word	0x00000115
      b0:	00000000 	.word	0x00000000

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200004a8 	.word	0x200004a8
      d4:	00000000 	.word	0x00000000
      d8:	0000661c 	.word	0x0000661c

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200004ac 	.word	0x200004ac
     108:	0000661c 	.word	0x0000661c
     10c:	0000661c 	.word	0x0000661c
     110:	00000000 	.word	0x00000000

00000114 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     114:	e7fe      	b.n	114 <Dummy_Handler>
	...

00000118 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
     118:	4821      	ldr	r0, [pc, #132]	; (1a0 <Reset_Handler+0x88>)
     11a:	4922      	ldr	r1, [pc, #136]	; (1a4 <Reset_Handler+0x8c>)
     11c:	b570      	push	{r4, r5, r6, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
     11e:	4288      	cmp	r0, r1
     120:	d002      	beq.n	128 <Reset_Handler+0x10>
     122:	2300      	movs	r3, #0
                for (; pDest < &_erelocate;) {
     124:	4c20      	ldr	r4, [pc, #128]	; (1a8 <Reset_Handler+0x90>)
     126:	e003      	b.n	130 <Reset_Handler+0x18>
     128:	4b20      	ldr	r3, [pc, #128]	; (1ac <Reset_Handler+0x94>)
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     12a:	4a21      	ldr	r2, [pc, #132]	; (1b0 <Reset_Handler+0x98>)
                *pDest++ = 0;
     12c:	2100      	movs	r1, #0
     12e:	e006      	b.n	13e <Reset_Handler+0x26>
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
     130:	18ca      	adds	r2, r1, r3
     132:	42a2      	cmp	r2, r4
     134:	d2f8      	bcs.n	128 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
     136:	58c5      	ldr	r5, [r0, r3]
     138:	3304      	adds	r3, #4
     13a:	6015      	str	r5, [r2, #0]
     13c:	e7f8      	b.n	130 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     13e:	4293      	cmp	r3, r2
     140:	d201      	bcs.n	146 <Reset_Handler+0x2e>
                *pDest++ = 0;
     142:	c302      	stmia	r3!, {r1}
     144:	e7fb      	b.n	13e <Reset_Handler+0x26>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     146:	21ff      	movs	r1, #255	; 0xff

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     148:	2402      	movs	r4, #2
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     14a:	2503      	movs	r5, #3
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     14c:	4b19      	ldr	r3, [pc, #100]	; (1b4 <Reset_Handler+0x9c>)
     14e:	4a1a      	ldr	r2, [pc, #104]	; (1b8 <Reset_Handler+0xa0>)
     150:	438b      	bics	r3, r1

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     152:	260c      	movs	r6, #12
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     154:	6093      	str	r3, [r2, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     156:	2208      	movs	r2, #8
        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     158:	4b18      	ldr	r3, [pc, #96]	; (1bc <Reset_Handler+0xa4>)
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     15a:	4919      	ldr	r1, [pc, #100]	; (1c0 <Reset_Handler+0xa8>)
        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     15c:	625c      	str	r4, [r3, #36]	; 0x24
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     15e:	78cb      	ldrb	r3, [r1, #3]
     160:	43ab      	bics	r3, r5
     162:	4323      	orrs	r3, r4
     164:	70cb      	strb	r3, [r1, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     166:	78cb      	ldrb	r3, [r1, #3]
     168:	43b3      	bics	r3, r6
     16a:	4313      	orrs	r3, r2
     16c:	70cb      	strb	r3, [r1, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
     16e:	2130      	movs	r1, #48	; 0x30
     170:	4b14      	ldr	r3, [pc, #80]	; (1c4 <Reset_Handler+0xac>)
     172:	7b98      	ldrb	r0, [r3, #14]
     174:	4388      	bics	r0, r1
     176:	3910      	subs	r1, #16
     178:	4308      	orrs	r0, r1
     17a:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     17c:	7b99      	ldrb	r1, [r3, #14]
     17e:	43b1      	bics	r1, r6
     180:	4311      	orrs	r1, r2
     182:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
     184:	2180      	movs	r1, #128	; 0x80
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
        DMAC->QOSCTRL.bit.FQOS = 2;
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     186:	7b9a      	ldrb	r2, [r3, #14]
     188:	43aa      	bics	r2, r5
     18a:	4322      	orrs	r2, r4
     18c:	739a      	strb	r2, [r3, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
     18e:	4a0e      	ldr	r2, [pc, #56]	; (1c8 <Reset_Handler+0xb0>)
     190:	6853      	ldr	r3, [r2, #4]
     192:	430b      	orrs	r3, r1
     194:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
     196:	4b0d      	ldr	r3, [pc, #52]	; (1cc <Reset_Handler+0xb4>)
     198:	4798      	blx	r3

        /* Branch to main function */
        main();
     19a:	4b0d      	ldr	r3, [pc, #52]	; (1d0 <Reset_Handler+0xb8>)
     19c:	4798      	blx	r3
     19e:	e7fe      	b.n	19e <Reset_Handler+0x86>
     1a0:	0000661c 	.word	0x0000661c
     1a4:	20000000 	.word	0x20000000
     1a8:	200004a4 	.word	0x200004a4
     1ac:	200004a8 	.word	0x200004a8
     1b0:	20000810 	.word	0x20000810
     1b4:	00000000 	.word	0x00000000
     1b8:	e000ed00 	.word	0xe000ed00
     1bc:	410070fc 	.word	0x410070fc
     1c0:	41005000 	.word	0x41005000
     1c4:	41004800 	.word	0x41004800
     1c8:	41004000 	.word	0x41004000
     1cc:	00006381 	.word	0x00006381
     1d0:	00000a09 	.word	0x00000a09

000001d4 <SystemInit>:
     1d4:	4a01      	ldr	r2, [pc, #4]	; (1dc <SystemInit+0x8>)
     1d6:	4b02      	ldr	r3, [pc, #8]	; (1e0 <SystemInit+0xc>)
     1d8:	601a      	str	r2, [r3, #0]
     1da:	4770      	bx	lr
     1dc:	000f4240 	.word	0x000f4240
     1e0:	20000000 	.word	0x20000000

000001e4 <AT25SFHoldTillReady>:
    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
    pinHigh(cs_mem);
}

void AT25SFHoldTillReady(){
     1e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     1e6:	2380      	movs	r3, #128	; 0x80
     1e8:	4c0a      	ldr	r4, [pc, #40]	; (214 <AT25SFHoldTillReady+0x30>)
     1ea:	02db      	lsls	r3, r3, #11
	pinLow(cs_mem);
	dummy_rx = spiDataTransfer(SPI1,OPCODE_READSTATUS);
     1ec:	4d0a      	ldr	r5, [pc, #40]	; (218 <AT25SFHoldTillReady+0x34>)
     1ee:	6163      	str	r3, [r4, #20]
     1f0:	2105      	movs	r1, #5
     1f2:	2001      	movs	r0, #1
     1f4:	47a8      	blx	r5
     1f6:	4b09      	ldr	r3, [pc, #36]	; (21c <AT25SFHoldTillReady+0x38>)
     1f8:	002e      	movs	r6, r5
        while (spiDataTransfer(SPI1,dummy_rx) & 0x01);
     1fa:	2701      	movs	r7, #1
     1fc:	001d      	movs	r5, r3
    pinHigh(cs_mem);
}

void AT25SFHoldTillReady(){
	pinLow(cs_mem);
	dummy_rx = spiDataTransfer(SPI1,OPCODE_READSTATUS);
     1fe:	7018      	strb	r0, [r3, #0]
        while (spiDataTransfer(SPI1,dummy_rx) & 0x01);
     200:	7829      	ldrb	r1, [r5, #0]
     202:	2001      	movs	r0, #1
     204:	47b0      	blx	r6
     206:	4238      	tst	r0, r7
     208:	d1fa      	bne.n	200 <AT25SFHoldTillReady+0x1c>
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     20a:	2380      	movs	r3, #128	; 0x80
     20c:	02db      	lsls	r3, r3, #11
     20e:	61a3      	str	r3, [r4, #24]
	pinHigh(cs_mem);
}
     210:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     212:	46c0      	nop			; (mov r8, r8)
     214:	41004400 	.word	0x41004400
     218:	000027e9 	.word	0x000027e9
     21c:	200004cc 	.word	0x200004cc

00000220 <AT25SFChipErase>:
void AT25SFChipErase() {
     220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     222:	2580      	movs	r5, #128	; 0x80
     224:	4c08      	ldr	r4, [pc, #32]	; (248 <AT25SFChipErase+0x28>)
     226:	02ed      	lsls	r5, r5, #11

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
     228:	4f08      	ldr	r7, [pc, #32]	; (24c <AT25SFChipErase+0x2c>)
     22a:	6165      	str	r5, [r4, #20]
     22c:	2106      	movs	r1, #6
     22e:	2001      	movs	r0, #1
     230:	47b8      	blx	r7
     232:	4e07      	ldr	r6, [pc, #28]	; (250 <AT25SFChipErase+0x30>)
    pinHigh(cs_mem);

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_CHIP_ERASE);
     234:	2160      	movs	r1, #96	; 0x60
	pinHigh(cs_mem);
}
void AT25SFChipErase() {

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
     236:	7030      	strb	r0, [r6, #0]
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     238:	61a5      	str	r5, [r4, #24]
    pinHigh(cs_mem);

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_CHIP_ERASE);
     23a:	2001      	movs	r0, #1
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     23c:	6165      	str	r5, [r4, #20]
     23e:	47b8      	blx	r7
     240:	7030      	strb	r0, [r6, #0]
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     242:	61a5      	str	r5, [r4, #24]
    pinHigh(cs_mem);
}
     244:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     246:	46c0      	nop			; (mov r8, r8)
     248:	41004400 	.word	0x41004400
     24c:	000027e9 	.word	0x000027e9
     250:	200004cc 	.word	0x200004cc

00000254 <AT25SFWriteBytes>:
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     254:	2380      	movs	r3, #128	; 0x80
    pinHigh(cs_mem);

    return _byte;
}

void AT25SFWriteBytes(uint32_t address, u8_t len, uint8_t *bytes) {
     256:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     258:	4e19      	ldr	r6, [pc, #100]	; (2c0 <AT25SFWriteBytes+0x6c>)
     25a:	02db      	lsls	r3, r3, #11
     25c:	9201      	str	r2, [sp, #4]
     25e:	0007      	movs	r7, r0


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
     260:	4c18      	ldr	r4, [pc, #96]	; (2c4 <AT25SFWriteBytes+0x70>)
    pinHigh(cs_mem);

    return _byte;
}

void AT25SFWriteBytes(uint32_t address, u8_t len, uint8_t *bytes) {
     262:	9100      	str	r1, [sp, #0]


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
     264:	2001      	movs	r0, #1
     266:	6173      	str	r3, [r6, #20]
     268:	2106      	movs	r1, #6
     26a:	47a0      	blx	r4
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     26c:	2380      	movs	r3, #128	; 0x80
     26e:	4d16      	ldr	r5, [pc, #88]	; (2c8 <AT25SFWriteBytes+0x74>)
     270:	02db      	lsls	r3, r3, #11
     272:	7028      	strb	r0, [r5, #0]
    pinHigh(cs_mem);

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_PROGRAM);
     274:	2102      	movs	r1, #2
     276:	61b3      	str	r3, [r6, #24]
     278:	2001      	movs	r0, #1
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     27a:	6173      	str	r3, [r6, #20]
     27c:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1,((address & 0xFF0000) >> 16));
     27e:	0c39      	lsrs	r1, r7, #16
    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
    pinHigh(cs_mem);

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_PROGRAM);
     280:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1,((address & 0xFF0000) >> 16));
     282:	b2c9      	uxtb	r1, r1
     284:	2001      	movs	r0, #1
     286:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1,((address & 0x00FF00) >>  8));
     288:	0a39      	lsrs	r1, r7, #8
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
    pinHigh(cs_mem);

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_PROGRAM);
    dummy_rx = spiDataTransfer(SPI1,((address & 0xFF0000) >> 16));
     28a:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1,((address & 0x00FF00) >>  8));
     28c:	b2c9      	uxtb	r1, r1
     28e:	2001      	movs	r0, #1
     290:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1,((address & 0x0000FF) >>  0));
     292:	b2f9      	uxtb	r1, r7
    pinHigh(cs_mem);

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_PROGRAM);
    dummy_rx = spiDataTransfer(SPI1,((address & 0xFF0000) >> 16));
    dummy_rx = spiDataTransfer(SPI1,((address & 0x00FF00) >>  8));
     294:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1,((address & 0x0000FF) >>  0));
     296:	2001      	movs	r0, #1
     298:	47a0      	blx	r4
     29a:	9b00      	ldr	r3, [sp, #0]
     29c:	9f01      	ldr	r7, [sp, #4]
     29e:	7028      	strb	r0, [r5, #0]
     2a0:	18fb      	adds	r3, r7, r3
     2a2:	9300      	str	r3, [sp, #0]

    for (u8_t pos = 0; pos < len; ++pos) {
     2a4:	9b00      	ldr	r3, [sp, #0]
     2a6:	429f      	cmp	r7, r3
     2a8:	d005      	beq.n	2b6 <AT25SFWriteBytes+0x62>
        dummy_rx = spiDataTransfer(SPI1, bytes[pos]);
     2aa:	7839      	ldrb	r1, [r7, #0]
     2ac:	2001      	movs	r0, #1
     2ae:	47a0      	blx	r4
     2b0:	3701      	adds	r7, #1
     2b2:	7028      	strb	r0, [r5, #0]
     2b4:	e7f6      	b.n	2a4 <AT25SFWriteBytes+0x50>
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     2b6:	2380      	movs	r3, #128	; 0x80
     2b8:	02db      	lsls	r3, r3, #11
     2ba:	61b3      	str	r3, [r6, #24]
    }

    pinHigh(cs_mem);

}
     2bc:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
     2be:	46c0      	nop			; (mov r8, r8)
     2c0:	41004400 	.word	0x41004400
     2c4:	000027e9 	.word	0x000027e9
     2c8:	200004cc 	.word	0x200004cc

000002cc <AT25SEWritePage>:
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     2cc:	2380      	movs	r3, #128	; 0x80
    delay_ms(70);

}


u8_t AT25SEWritePage(u32_t startingAddress, u8_t *data) {
     2ce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     2d0:	4e18      	ldr	r6, [pc, #96]	; (334 <AT25SEWritePage+0x68>)
     2d2:	02db      	lsls	r3, r3, #11
     2d4:	0007      	movs	r7, r0

    u8_t bytesSent = 0;


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
     2d6:	4d18      	ldr	r5, [pc, #96]	; (338 <AT25SEWritePage+0x6c>)
    delay_ms(70);

}


u8_t AT25SEWritePage(u32_t startingAddress, u8_t *data) {
     2d8:	9101      	str	r1, [sp, #4]

    u8_t bytesSent = 0;


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
     2da:	2001      	movs	r0, #1
     2dc:	6173      	str	r3, [r6, #20]
     2de:	2106      	movs	r1, #6
     2e0:	47a8      	blx	r5
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     2e2:	2380      	movs	r3, #128	; 0x80
     2e4:	4c15      	ldr	r4, [pc, #84]	; (33c <AT25SEWritePage+0x70>)
     2e6:	02db      	lsls	r3, r3, #11
     2e8:	7020      	strb	r0, [r4, #0]
    pinHigh(cs_mem);


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_PROGRAM);
     2ea:	2102      	movs	r1, #2
     2ec:	61b3      	str	r3, [r6, #24]
     2ee:	2001      	movs	r0, #1
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     2f0:	6173      	str	r3, [r6, #20]
     2f2:	47a8      	blx	r5
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     2f4:	0c39      	lsrs	r1, r7, #16
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
    pinHigh(cs_mem);


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_PROGRAM);
     2f6:	7020      	strb	r0, [r4, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     2f8:	b2c9      	uxtb	r1, r1
     2fa:	2001      	movs	r0, #1
     2fc:	47a8      	blx	r5
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     2fe:	0a39      	lsrs	r1, r7, #8
    pinHigh(cs_mem);


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_PROGRAM);
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     300:	7020      	strb	r0, [r4, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     302:	b2c9      	uxtb	r1, r1
     304:	2001      	movs	r0, #1
     306:	47a8      	blx	r5
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
     308:	b2f9      	uxtb	r1, r7


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_PROGRAM);
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     30a:	7020      	strb	r0, [r4, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
     30c:	2001      	movs	r0, #1
     30e:	47a8      	blx	r5
     310:	9f01      	ldr	r7, [sp, #4]
     312:	7020      	strb	r0, [r4, #0]
     314:	1c7b      	adds	r3, r7, #1
     316:	33ff      	adds	r3, #255	; 0xff
     318:	9301      	str	r3, [sp, #4]


    for (u16_t pos = 0; pos < 256; ++pos) {
        ++bytesSent;
        dummy_rx = spiDataTransfer(SPI1,data[pos]);
     31a:	7839      	ldrb	r1, [r7, #0]
     31c:	2001      	movs	r0, #1
     31e:	47a8      	blx	r5
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));


    for (u16_t pos = 0; pos < 256; ++pos) {
     320:	9b01      	ldr	r3, [sp, #4]
     322:	3701      	adds	r7, #1
        ++bytesSent;
        dummy_rx = spiDataTransfer(SPI1,data[pos]);
     324:	7020      	strb	r0, [r4, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));


    for (u16_t pos = 0; pos < 256; ++pos) {
     326:	429f      	cmp	r7, r3
     328:	d1f7      	bne.n	31a <AT25SEWritePage+0x4e>
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     32a:	2380      	movs	r3, #128	; 0x80
     32c:	02db      	lsls	r3, r3, #11
     32e:	61b3      	str	r3, [r6, #24]
    }
    pinHigh(cs_mem);


    return bytesSent;
}
     330:	2000      	movs	r0, #0
     332:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
     334:	41004400 	.word	0x41004400
     338:	000027e9 	.word	0x000027e9
     33c:	200004cc 	.word	0x200004cc

00000340 <AT25SEreadSample>:
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     340:	2380      	movs	r3, #128	; 0x80

void AT25SEreadSample(u32_t startingAddress, u8_t len, u8_t *data) {
     342:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     344:	4f17      	ldr	r7, [pc, #92]	; (3a4 <AT25SEreadSample+0x64>)
     346:	02db      	lsls	r3, r3, #11
     348:	9201      	str	r2, [sp, #4]
     34a:	0006      	movs	r6, r0

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
     34c:	4c16      	ldr	r4, [pc, #88]	; (3a8 <AT25SEreadSample+0x68>)


    return bytesSent;
}

void AT25SEreadSample(u32_t startingAddress, u8_t len, u8_t *data) {
     34e:	9100      	str	r1, [sp, #0]

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
     350:	2001      	movs	r0, #1
     352:	617b      	str	r3, [r7, #20]
     354:	210b      	movs	r1, #11
     356:	47a0      	blx	r4
     358:	4d14      	ldr	r5, [pc, #80]	; (3ac <AT25SEreadSample+0x6c>)
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     35a:	0c31      	lsrs	r1, r6, #16
}

void AT25SEreadSample(u32_t startingAddress, u8_t len, u8_t *data) {

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
     35c:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     35e:	b2c9      	uxtb	r1, r1
     360:	2001      	movs	r0, #1
     362:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     364:	0a31      	lsrs	r1, r6, #8

void AT25SEreadSample(u32_t startingAddress, u8_t len, u8_t *data) {

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     366:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     368:	b2c9      	uxtb	r1, r1
     36a:	2001      	movs	r0, #1
     36c:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
     36e:	b2f1      	uxtb	r1, r6
void AT25SEreadSample(u32_t startingAddress, u8_t len, u8_t *data) {

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     370:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
     372:	2001      	movs	r0, #1
     374:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1, 0xFF);
     376:	21ff      	movs	r1, #255	; 0xff

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
     378:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1, 0xFF);
     37a:	2001      	movs	r0, #1
     37c:	47a0      	blx	r4
     37e:	9b00      	ldr	r3, [sp, #0]
     380:	9e01      	ldr	r6, [sp, #4]
     382:	7028      	strb	r0, [r5, #0]
     384:	18f3      	adds	r3, r6, r3
     386:	9300      	str	r3, [sp, #0]


    for (u8_t pos = 0; pos < len; ++pos) {
     388:	9b00      	ldr	r3, [sp, #0]
     38a:	429e      	cmp	r6, r3
     38c:	d005      	beq.n	39a <AT25SEreadSample+0x5a>
        data[pos] = spiDataTransfer(SPI1,dummy_rx);
     38e:	7829      	ldrb	r1, [r5, #0]
     390:	2001      	movs	r0, #1
     392:	47a0      	blx	r4
     394:	7030      	strb	r0, [r6, #0]
     396:	3601      	adds	r6, #1
     398:	e7f6      	b.n	388 <AT25SEreadSample+0x48>
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     39a:	2380      	movs	r3, #128	; 0x80
     39c:	02db      	lsls	r3, r3, #11
     39e:	61bb      	str	r3, [r7, #24]
    }
    pinHigh(cs_mem);

}
     3a0:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
     3a2:	46c0      	nop			; (mov r8, r8)
     3a4:	41004400 	.word	0x41004400
     3a8:	000027e9 	.word	0x000027e9
     3ac:	200004cc 	.word	0x200004cc

000003b0 <AT25SEreadPage>:
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     3b0:	2380      	movs	r3, #128	; 0x80

void AT25SEreadPage(u32_t startingAddress, u8_t *data) {
     3b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     3b4:	4f16      	ldr	r7, [pc, #88]	; (410 <AT25SEreadPage+0x60>)
     3b6:	02db      	lsls	r3, r3, #11
     3b8:	0006      	movs	r6, r0


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
     3ba:	4c16      	ldr	r4, [pc, #88]	; (414 <AT25SEreadPage+0x64>)
    }
    pinHigh(cs_mem);

}

void AT25SEreadPage(u32_t startingAddress, u8_t *data) {
     3bc:	9101      	str	r1, [sp, #4]


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
     3be:	2001      	movs	r0, #1
     3c0:	617b      	str	r3, [r7, #20]
     3c2:	210b      	movs	r1, #11
     3c4:	47a0      	blx	r4
     3c6:	4d14      	ldr	r5, [pc, #80]	; (418 <AT25SEreadPage+0x68>)
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     3c8:	0c31      	lsrs	r1, r6, #16

void AT25SEreadPage(u32_t startingAddress, u8_t *data) {


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
     3ca:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     3cc:	b2c9      	uxtb	r1, r1
     3ce:	2001      	movs	r0, #1
     3d0:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     3d2:	0a31      	lsrs	r1, r6, #8
void AT25SEreadPage(u32_t startingAddress, u8_t *data) {


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     3d4:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     3d6:	b2c9      	uxtb	r1, r1
     3d8:	2001      	movs	r0, #1
     3da:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
     3dc:	b2f1      	uxtb	r1, r6


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     3de:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
     3e0:	2001      	movs	r0, #1
     3e2:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1, 0xFF);
     3e4:	21ff      	movs	r1, #255	; 0xff

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
     3e6:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1, 0xFF);
     3e8:	2001      	movs	r0, #1
     3ea:	47a0      	blx	r4
     3ec:	9e01      	ldr	r6, [sp, #4]
     3ee:	7028      	strb	r0, [r5, #0]
     3f0:	1c73      	adds	r3, r6, #1
     3f2:	33ff      	adds	r3, #255	; 0xff
     3f4:	9301      	str	r3, [sp, #4]


    for (u16_t pos = 0; pos < 256; ++pos) {
        data[pos] = spiDataTransfer(SPI1,dummy_rx);
     3f6:	7829      	ldrb	r1, [r5, #0]
     3f8:	2001      	movs	r0, #1
     3fa:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
    dummy_rx = spiDataTransfer(SPI1, 0xFF);


    for (u16_t pos = 0; pos < 256; ++pos) {
     3fc:	9b01      	ldr	r3, [sp, #4]
        data[pos] = spiDataTransfer(SPI1,dummy_rx);
     3fe:	7030      	strb	r0, [r6, #0]
     400:	3601      	adds	r6, #1
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
    dummy_rx = spiDataTransfer(SPI1, 0xFF);


    for (u16_t pos = 0; pos < 256; ++pos) {
     402:	429e      	cmp	r6, r3
     404:	d1f7      	bne.n	3f6 <AT25SEreadPage+0x46>
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     406:	2380      	movs	r3, #128	; 0x80
     408:	02db      	lsls	r3, r3, #11
     40a:	61bb      	str	r3, [r7, #24]
        data[pos] = spiDataTransfer(SPI1,dummy_rx);
    }
    pinHigh(cs_mem);

}
     40c:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
     40e:	46c0      	nop			; (mov r8, r8)
     410:	41004400 	.word	0x41004400
     414:	000027e9 	.word	0x000027e9
     418:	200004cc 	.word	0x200004cc

0000041c <readMS5803AdcResults>:
#include <boardDefines.h>
#include <math.h>
//#include <tgmath.h>


u32_t readMS5803AdcResults() {
     41c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     41e:	2780      	movs	r7, #128	; 0x80
     420:	4e0c      	ldr	r6, [pc, #48]	; (454 <readMS5803AdcResults+0x38>)
     422:	01ff      	lsls	r7, r7, #7

    u8_t dummy_tx = 0xFF;


    pinLow(cs_baro);
    spiDataTransfer(SPI2, cmdAdcRead_);
     424:	4c0c      	ldr	r4, [pc, #48]	; (458 <readMS5803AdcResults+0x3c>)
     426:	6177      	str	r7, [r6, #20]
     428:	2100      	movs	r1, #0
     42a:	2002      	movs	r0, #2
     42c:	47a0      	blx	r4
    u8_t _byte1 = spiDataTransfer(SPI2,dummy_tx);
     42e:	21ff      	movs	r1, #255	; 0xff
     430:	2002      	movs	r0, #2
     432:	47a0      	blx	r4
    u8_t _byte2 = spiDataTransfer(SPI2,dummy_tx);
     434:	21ff      	movs	r1, #255	; 0xff
    u8_t dummy_tx = 0xFF;


    pinLow(cs_baro);
    spiDataTransfer(SPI2, cmdAdcRead_);
    u8_t _byte1 = spiDataTransfer(SPI2,dummy_tx);
     436:	0005      	movs	r5, r0
    u8_t _byte2 = spiDataTransfer(SPI2,dummy_tx);
     438:	2002      	movs	r0, #2
     43a:	47a0      	blx	r4
    u8_t _byte3 = spiDataTransfer(SPI2,dummy_tx);
     43c:	21ff      	movs	r1, #255	; 0xff


    pinLow(cs_baro);
    spiDataTransfer(SPI2, cmdAdcRead_);
    u8_t _byte1 = spiDataTransfer(SPI2,dummy_tx);
    u8_t _byte2 = spiDataTransfer(SPI2,dummy_tx);
     43e:	9001      	str	r0, [sp, #4]
    u8_t _byte3 = spiDataTransfer(SPI2,dummy_tx);
     440:	2002      	movs	r0, #2
     442:	47a0      	blx	r4
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     444:	61b7      	str	r7, [r6, #24]
    pinHigh(cs_baro);

    u32_t _receive = (_byte1 << 16) | (_byte2 << 8) | (_byte3);
    return _receive;
     446:	9b01      	ldr	r3, [sp, #4]
     448:	042d      	lsls	r5, r5, #16
     44a:	021b      	lsls	r3, r3, #8
     44c:	431d      	orrs	r5, r3
     44e:	4328      	orrs	r0, r5
}
     450:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
     452:	46c0      	nop			; (mov r8, r8)
     454:	41004400 	.word	0x41004400
     458:	000027e9 	.word	0x000027e9

0000045c <ConvertPressureTemperature>:

void ConvertPressureTemperature(u32_t pressureRaw, u32_t tempRaw, u32_t* temperatureCelcus, int32_t* pressureMbar ) {
     45c:	b5f0      	push	{r4, r5, r6, r7, lr}
     45e:	b087      	sub	sp, #28
     460:	9304      	str	r3, [sp, #16]
    const u16_t C1 = coefficients_[1];
     462:	4b24      	ldr	r3, [pc, #144]	; (4f4 <ConvertPressureTemperature+0x98>)

    u32_t _receive = (_byte1 << 16) | (_byte2 << 8) | (_byte3);
    return _receive;
}

void ConvertPressureTemperature(u32_t pressureRaw, u32_t tempRaw, u32_t* temperatureCelcus, int32_t* pressureMbar ) {
     464:	9003      	str	r0, [sp, #12]
     466:	0014      	movs	r4, r2
    const u16_t C1 = coefficients_[1];
     468:	885a      	ldrh	r2, [r3, #2]
    const u16_t C5 = coefficients_[5];
    const u16_t C6 = coefficients_[6];

    // calculate 1st order pressure and temperature (MS5607 1st order algorithm)
    const  int32_t dT = (tempRaw) - ((int32_t)C5 << 8);
    *temperatureCelcus  = 2000 + (((int64_t)dT * C6) >> 23) ;
     46a:	4f23      	ldr	r7, [pc, #140]	; (4f8 <ConvertPressureTemperature+0x9c>)
    u32_t _receive = (_byte1 << 16) | (_byte2 << 8) | (_byte3);
    return _receive;
}

void ConvertPressureTemperature(u32_t pressureRaw, u32_t tempRaw, u32_t* temperatureCelcus, int32_t* pressureMbar ) {
    const u16_t C1 = coefficients_[1];
     46c:	9200      	str	r2, [sp, #0]
    const u16_t C2 = coefficients_[2];
     46e:	889a      	ldrh	r2, [r3, #4]
     470:	9201      	str	r2, [sp, #4]
    const u16_t C3 = coefficients_[3];
    const u16_t C4 = coefficients_[4];
     472:	891a      	ldrh	r2, [r3, #8]
}

void ConvertPressureTemperature(u32_t pressureRaw, u32_t tempRaw, u32_t* temperatureCelcus, int32_t* pressureMbar ) {
    const u16_t C1 = coefficients_[1];
    const u16_t C2 = coefficients_[2];
    const u16_t C3 = coefficients_[3];
     474:	88dd      	ldrh	r5, [r3, #6]
    const u16_t C4 = coefficients_[4];
     476:	9202      	str	r2, [sp, #8]
    const u16_t C5 = coefficients_[5];
    const u16_t C6 = coefficients_[6];

    // calculate 1st order pressure and temperature (MS5607 1st order algorithm)
    const  int32_t dT = (tempRaw) - ((int32_t)C5 << 8);
    *temperatureCelcus  = 2000 + (((int64_t)dT * C6) >> 23) ;
     478:	895e      	ldrh	r6, [r3, #10]
     47a:	0236      	lsls	r6, r6, #8
     47c:	1b8e      	subs	r6, r1, r6
     47e:	17f2      	asrs	r2, r6, #31
     480:	9205      	str	r2, [sp, #20]
     482:	8998      	ldrh	r0, [r3, #12]
     484:	0032      	movs	r2, r6
     486:	17f3      	asrs	r3, r6, #31
     488:	2100      	movs	r1, #0
     48a:	47b8      	blx	r7
     48c:	23fa      	movs	r3, #250	; 0xfa
     48e:	0249      	lsls	r1, r1, #9
     490:	0dc0      	lsrs	r0, r0, #23
     492:	4308      	orrs	r0, r1
     494:	00db      	lsls	r3, r3, #3
     496:	18c0      	adds	r0, r0, r3
     498:	6020      	str	r0, [r4, #0]

    const  int64_t OFF   = ((int64_t)C2 << 16) + ((C4 * (int64_t)dT) >> 7);
    const  int64_t SENS  =  ((int64_t)C1 << 15) + ((C3 * (int64_t)dT) >> 8);
    *pressureMbar = ((((pressureRaw * SENS) >> 21) - OFF) >> 15);
     49a:	0032      	movs	r2, r6
     49c:	17f3      	asrs	r3, r6, #31
     49e:	0028      	movs	r0, r5
     4a0:	2100      	movs	r1, #0
     4a2:	47b8      	blx	r7
     4a4:	060c      	lsls	r4, r1, #24
     4a6:	120b      	asrs	r3, r1, #8
     4a8:	2100      	movs	r1, #0
     4aa:	0a02      	lsrs	r2, r0, #8
     4ac:	4322      	orrs	r2, r4
     4ae:	9c00      	ldr	r4, [sp, #0]
     4b0:	03e0      	lsls	r0, r4, #15
     4b2:	1880      	adds	r0, r0, r2
     4b4:	4159      	adcs	r1, r3
     4b6:	9a03      	ldr	r2, [sp, #12]
     4b8:	2300      	movs	r3, #0
     4ba:	47b8      	blx	r7
     4bc:	02cb      	lsls	r3, r1, #11
     4be:	0d44      	lsrs	r4, r0, #21
     4c0:	0032      	movs	r2, r6
     4c2:	431c      	orrs	r4, r3
     4c4:	154d      	asrs	r5, r1, #21
     4c6:	9b05      	ldr	r3, [sp, #20]
     4c8:	9802      	ldr	r0, [sp, #8]
     4ca:	2100      	movs	r1, #0
     4cc:	47b8      	blx	r7
     4ce:	064b      	lsls	r3, r1, #25
     4d0:	09c6      	lsrs	r6, r0, #7
     4d2:	431e      	orrs	r6, r3
     4d4:	2300      	movs	r3, #0
     4d6:	11cf      	asrs	r7, r1, #7
     4d8:	9901      	ldr	r1, [sp, #4]
     4da:	040a      	lsls	r2, r1, #16
     4dc:	1992      	adds	r2, r2, r6
     4de:	417b      	adcs	r3, r7
     4e0:	1aa4      	subs	r4, r4, r2
     4e2:	419d      	sbcs	r5, r3
     4e4:	046b      	lsls	r3, r5, #17
     4e6:	0be4      	lsrs	r4, r4, #15
     4e8:	431c      	orrs	r4, r3
     4ea:	9b04      	ldr	r3, [sp, #16]
     4ec:	601c      	str	r4, [r3, #0]

}
     4ee:	b007      	add	sp, #28
     4f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
     4f2:	46c0      	nop			; (mov r8, r8)
     4f4:	2000063e 	.word	0x2000063e
     4f8:	00003be5 	.word	0x00003be5

000004fc <paToFeetNOAA>:

double paToFeetNOAA(int32_t pressureMbar) {
     4fc:	b510      	push	{r4, lr}

    double lower =(((double)(pressureMbar)/10)/1013.25);
    double exponent = 0.190284;

    double altFeet = (1-pow(lower,exponent))*145366.45;
     4fe:	4b0c      	ldr	r3, [pc, #48]	; (530 <paToFeetNOAA+0x34>)
     500:	4798      	blx	r3
     502:	4c0c      	ldr	r4, [pc, #48]	; (534 <paToFeetNOAA+0x38>)
     504:	2200      	movs	r2, #0
     506:	4b0c      	ldr	r3, [pc, #48]	; (538 <paToFeetNOAA+0x3c>)
     508:	47a0      	blx	r4
     50a:	2200      	movs	r2, #0
     50c:	4b0b      	ldr	r3, [pc, #44]	; (53c <paToFeetNOAA+0x40>)
     50e:	47a0      	blx	r4
     510:	4a0b      	ldr	r2, [pc, #44]	; (540 <paToFeetNOAA+0x44>)
     512:	4b0c      	ldr	r3, [pc, #48]	; (544 <paToFeetNOAA+0x48>)
     514:	4c0c      	ldr	r4, [pc, #48]	; (548 <paToFeetNOAA+0x4c>)
     516:	47a0      	blx	r4
    return altFeet;
     518:	4c0c      	ldr	r4, [pc, #48]	; (54c <paToFeetNOAA+0x50>)
double paToFeetNOAA(int32_t pressureMbar) {

    double lower =(((double)(pressureMbar)/10)/1013.25);
    double exponent = 0.190284;

    double altFeet = (1-pow(lower,exponent))*145366.45;
     51a:	0002      	movs	r2, r0
     51c:	000b      	movs	r3, r1
    return altFeet;
     51e:	2000      	movs	r0, #0
     520:	490b      	ldr	r1, [pc, #44]	; (550 <paToFeetNOAA+0x54>)
     522:	47a0      	blx	r4
     524:	4a0b      	ldr	r2, [pc, #44]	; (554 <paToFeetNOAA+0x58>)
     526:	4b0c      	ldr	r3, [pc, #48]	; (558 <paToFeetNOAA+0x5c>)
     528:	4c0c      	ldr	r4, [pc, #48]	; (55c <paToFeetNOAA+0x60>)
     52a:	47a0      	blx	r4

}
     52c:	bd10      	pop	{r4, pc}
     52e:	46c0      	nop			; (mov r8, r8)
     530:	00005d99 	.word	0x00005d99
     534:	00004909 	.word	0x00004909
     538:	40240000 	.word	0x40240000
     53c:	408faa00 	.word	0x408faa00
     540:	e279dd3c 	.word	0xe279dd3c
     544:	3fc85b39 	.word	0x3fc85b39
     548:	00002935 	.word	0x00002935
     54c:	00005645 	.word	0x00005645
     550:	3ff00000 	.word	0x3ff00000
     554:	9999999a 	.word	0x9999999a
     558:	4101beb3 	.word	0x4101beb3
     55c:	00005151 	.word	0x00005151

00000560 <readMS5803Coefficients>:



void readMS5803Coefficients() {
     560:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     562:	24a2      	movs	r4, #162	; 0xa2
     564:	4d11      	ldr	r5, [pc, #68]	; (5ac <readMS5803Coefficients+0x4c>)

    u8_t dummy_tx = 0xFF;

    for (u8_t coeff_num = 1; coeff_num < 7 ; ++coeff_num ) {
        delay_us(600);
     566:	2096      	movs	r0, #150	; 0x96
     568:	4e11      	ldr	r6, [pc, #68]	; (5b0 <readMS5803Coefficients+0x50>)
     56a:	0080      	lsls	r0, r0, #2
     56c:	47b0      	blx	r6
        u8_t _cmd = MS5803_CMD_PROM_READ + ((coeff_num)*2);
        delay_us(600);
     56e:	2096      	movs	r0, #150	; 0x96
     570:	0080      	lsls	r0, r0, #2
     572:	47b0      	blx	r6
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     574:	2380      	movs	r3, #128	; 0x80
     576:	4f0f      	ldr	r7, [pc, #60]	; (5b4 <readMS5803Coefficients+0x54>)
     578:	01db      	lsls	r3, r3, #7
     57a:	617b      	str	r3, [r7, #20]
        pinLow(cs_baro);
        spiDataTransfer(SPI2, _cmd);
     57c:	0021      	movs	r1, r4
     57e:	4e0e      	ldr	r6, [pc, #56]	; (5b8 <readMS5803Coefficients+0x58>)
     580:	2002      	movs	r0, #2
     582:	47b0      	blx	r6
        u8_t _byte1 = spiDataTransfer(SPI2,dummy_tx);
     584:	21ff      	movs	r1, #255	; 0xff
     586:	2002      	movs	r0, #2
     588:	47b0      	blx	r6
        u8_t _byte2 = spiDataTransfer(SPI2,dummy_tx);
     58a:	21ff      	movs	r1, #255	; 0xff
        delay_us(600);
        u8_t _cmd = MS5803_CMD_PROM_READ + ((coeff_num)*2);
        delay_us(600);
        pinLow(cs_baro);
        spiDataTransfer(SPI2, _cmd);
        u8_t _byte1 = spiDataTransfer(SPI2,dummy_tx);
     58c:	9001      	str	r0, [sp, #4]
        u8_t _byte2 = spiDataTransfer(SPI2,dummy_tx);
     58e:	2002      	movs	r0, #2
     590:	47b0      	blx	r6
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     592:	2380      	movs	r3, #128	; 0x80
     594:	01db      	lsls	r3, r3, #7
     596:	61bb      	str	r3, [r7, #24]
        pinHigh(cs_baro);
        coefficients_[coeff_num] = (_byte1 << 8) | _byte2;
     598:	9b01      	ldr	r3, [sp, #4]
     59a:	3402      	adds	r4, #2
     59c:	021b      	lsls	r3, r3, #8
     59e:	4318      	orrs	r0, r3
     5a0:	b2e4      	uxtb	r4, r4
     5a2:	8028      	strh	r0, [r5, #0]
     5a4:	3502      	adds	r5, #2

void readMS5803Coefficients() {

    u8_t dummy_tx = 0xFF;

    for (u8_t coeff_num = 1; coeff_num < 7 ; ++coeff_num ) {
     5a6:	2cae      	cmp	r4, #174	; 0xae
     5a8:	d1dd      	bne.n	566 <readMS5803Coefficients+0x6>
        u8_t _byte2 = spiDataTransfer(SPI2,dummy_tx);
        pinHigh(cs_baro);
        coefficients_[coeff_num] = (_byte1 << 8) | _byte2;
    }

}
     5aa:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
     5ac:	20000640 	.word	0x20000640
     5b0:	00000fe5 	.word	0x00000fe5
     5b4:	41004400 	.word	0x41004400
     5b8:	000027e9 	.word	0x000027e9

000005bc <initMS5803Barometer>:

void initMS5803Barometer() {
     5bc:	b570      	push	{r4, r5, r6, lr}
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     5be:	2580      	movs	r5, #128	; 0x80
     5c0:	4c06      	ldr	r4, [pc, #24]	; (5dc <initMS5803Barometer+0x20>)
     5c2:	01ed      	lsls	r5, r5, #7


    pinLow(cs_baro);
    spiDataTransfer(SPI2, MS5803_CMD_RES);
     5c4:	211e      	movs	r1, #30
     5c6:	6165      	str	r5, [r4, #20]
     5c8:	4b05      	ldr	r3, [pc, #20]	; (5e0 <initMS5803Barometer+0x24>)
     5ca:	2002      	movs	r0, #2
     5cc:	4798      	blx	r3
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     5ce:	61a5      	str	r5, [r4, #24]

    pinHigh(cs_baro);
    delay_ms(200);
     5d0:	20c8      	movs	r0, #200	; 0xc8
     5d2:	4b04      	ldr	r3, [pc, #16]	; (5e4 <initMS5803Barometer+0x28>)
     5d4:	4798      	blx	r3
    readMS5803Coefficients();
     5d6:	4b04      	ldr	r3, [pc, #16]	; (5e8 <initMS5803Barometer+0x2c>)
     5d8:	4798      	blx	r3

}
     5da:	bd70      	pop	{r4, r5, r6, pc}
     5dc:	41004400 	.word	0x41004400
     5e0:	000027e9 	.word	0x000027e9
     5e4:	00001015 	.word	0x00001015
     5e8:	00000561 	.word	0x00000561

000005ec <MS5803_CRC4>:
                n_rem = (n_rem << 1);
            }
        }
    }
    n_rem = (0x000F & (n_rem >> 12));
    coefficients_[7] = crc_read;
     5ec:	4b02      	ldr	r3, [pc, #8]	; (5f8 <MS5803_CRC4+0xc>)
    return (n_rem & 0x00);
}
     5ee:	2000      	movs	r0, #0
                n_rem = (n_rem << 1);
            }
        }
    }
    n_rem = (0x000F & (n_rem >> 12));
    coefficients_[7] = crc_read;
     5f0:	7b9a      	ldrb	r2, [r3, #14]
     5f2:	81da      	strh	r2, [r3, #14]
    return (n_rem & 0x00);
}
     5f4:	4770      	bx	lr
     5f6:	46c0      	nop			; (mov r8, r8)
     5f8:	2000063e 	.word	0x2000063e

000005fc <init>:


void init() {

    /* Set 1 Flash Wait State for 48MHz, cf tables 20.9 and 35.27 in SAMD21 Datasheet */
    NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val;
     5fc:	211e      	movs	r1, #30
#include <util.h>
#include <boardDefines.h>
#include "math.h"


void init() {
     5fe:	b5f0      	push	{r4, r5, r6, r7, lr}

    /* Set 1 Flash Wait State for 48MHz, cf tables 20.9 and 35.27 in SAMD21 Datasheet */
    NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val;
     600:	4af0      	ldr	r2, [pc, #960]	; (9c4 <init+0x3c8>)
#include <util.h>
#include <boardDefines.h>
#include "math.h"


void init() {
     602:	b085      	sub	sp, #20

    /* Set 1 Flash Wait State for 48MHz, cf tables 20.9 and 35.27 in SAMD21 Datasheet */
    NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val;
     604:	6853      	ldr	r3, [r2, #4]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     606:	2401      	movs	r4, #1
     608:	438b      	bics	r3, r1
     60a:	391c      	subs	r1, #28
     60c:	430b      	orrs	r3, r1
     60e:	6053      	str	r3, [r2, #4]

    /* Turn on the digital interface clock */
    PM->APBAMASK.reg |= PM_APBAMASK_GCLK;
     610:	4aed      	ldr	r2, [pc, #948]	; (9c8 <init+0x3cc>)
     612:	3106      	adds	r1, #6
     614:	6993      	ldr	r3, [r2, #24]

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     616:	260f      	movs	r6, #15
     618:	430b      	orrs	r3, r1
     61a:	6193      	str	r3, [r2, #24]

    SystemInit();
     61c:	4beb      	ldr	r3, [pc, #940]	; (9cc <init+0x3d0>)
     61e:	4798      	blx	r3
    GclkInit();
     620:	4beb      	ldr	r3, [pc, #940]	; (9d0 <init+0x3d4>)
     622:	4798      	blx	r3
    RtcInit();
     624:	4beb      	ldr	r3, [pc, #940]	; (9d4 <init+0x3d8>)
     626:	4798      	blx	r3
    delayInit();
     628:	4beb      	ldr	r3, [pc, #940]	; (9d8 <init+0x3dc>)
     62a:	4798      	blx	r3
    adcInit();
     62c:	4beb      	ldr	r3, [pc, #940]	; (9dc <init+0x3e0>)
     62e:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     630:	2240      	movs	r2, #64	; 0x40
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     632:	21c1      	movs	r1, #193	; 0xc1

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     634:	4bea      	ldr	r3, [pc, #936]	; (9e0 <init+0x3e4>)
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     636:	0089      	lsls	r1, r1, #2

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     638:	601a      	str	r2, [r3, #0]
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     63a:	5858      	ldr	r0, [r3, r1]
     63c:	4ae9      	ldr	r2, [pc, #932]	; (9e4 <init+0x3e8>)
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     63e:	2510      	movs	r5, #16
     640:	4002      	ands	r2, r0
     642:	505a      	str	r2, [r3, r1]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     644:	4be8      	ldr	r3, [pc, #928]	; (9e8 <init+0x3ec>)
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     646:	2002      	movs	r0, #2
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     648:	0019      	movs	r1, r3
     64a:	3154      	adds	r1, #84	; 0x54
     64c:	780a      	ldrb	r2, [r1, #0]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     64e:	001f      	movs	r7, r3
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     650:	43a2      	bics	r2, r4
     652:	700a      	strb	r2, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     654:	2280      	movs	r2, #128	; 0x80
     656:	0352      	lsls	r2, r2, #13
     658:	609a      	str	r2, [r3, #8]

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     65a:	3921      	subs	r1, #33	; 0x21
     65c:	780a      	ldrb	r2, [r1, #0]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     65e:	3794      	adds	r7, #148	; 0x94

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     660:	43b2      	bics	r2, r6
     662:	4322      	orrs	r2, r4
     664:	700a      	strb	r2, [r1, #0]
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     666:	7cca      	ldrb	r2, [r1, #19]
     668:	4322      	orrs	r2, r4
     66a:	74ca      	strb	r2, [r1, #19]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     66c:	001a      	movs	r2, r3
     66e:	32c3      	adds	r2, #195	; 0xc3
     670:	7811      	ldrb	r1, [r2, #0]
     672:	43a1      	bics	r1, r4
     674:	7011      	strb	r1, [r2, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     676:	7811      	ldrb	r1, [r2, #0]
     678:	4301      	orrs	r1, r0
     67a:	7011      	strb	r1, [r2, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     67c:	2108      	movs	r1, #8
     67e:	468c      	mov	ip, r1
     680:	449c      	add	ip, r3
     682:	4661      	mov	r1, ip
     684:	3006      	adds	r0, #6
     686:	67c8      	str	r0, [r1, #124]	; 0x7c
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     688:	0019      	movs	r1, r3
     68a:	31b1      	adds	r1, #177	; 0xb1
     68c:	7808      	ldrb	r0, [r1, #0]
     68e:	4030      	ands	r0, r6
     690:	4328      	orrs	r0, r5
     692:	7008      	strb	r0, [r1, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     694:	7810      	ldrb	r0, [r2, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     696:	3d0e      	subs	r5, #14
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     698:	4320      	orrs	r0, r4
     69a:	7010      	strb	r0, [r2, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     69c:	0018      	movs	r0, r3
     69e:	30d7      	adds	r0, #215	; 0xd7
     6a0:	7802      	ldrb	r2, [r0, #0]
     6a2:	43a2      	bics	r2, r4
     6a4:	7002      	strb	r2, [r0, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     6a6:	2080      	movs	r0, #128	; 0x80
     6a8:	4ad0      	ldr	r2, [pc, #832]	; (9ec <init+0x3f0>)
     6aa:	0400      	lsls	r0, r0, #16
     6ac:	6010      	str	r0, [r2, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     6ae:	001a      	movs	r2, r3
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     6b0:	6038      	str	r0, [r7, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     6b2:	32c2      	adds	r2, #194	; 0xc2
     6b4:	7810      	ldrb	r0, [r2, #0]
     6b6:	43a0      	bics	r0, r4
     6b8:	7010      	strb	r0, [r2, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     6ba:	7810      	ldrb	r0, [r2, #0]
     6bc:	4328      	orrs	r0, r5
     6be:	7010      	strb	r0, [r2, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     6c0:	4660      	mov	r0, ip
     6c2:	3502      	adds	r5, #2
     6c4:	67c5      	str	r5, [r0, #124]	; 0x7c

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     6c6:	7808      	ldrb	r0, [r1, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     6c8:	350c      	adds	r5, #12
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     6ca:	43b0      	bics	r0, r6
     6cc:	4320      	orrs	r0, r4
     6ce:	7008      	strb	r0, [r1, #0]
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     6d0:	7811      	ldrb	r1, [r2, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     6d2:	2002      	movs	r0, #2
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     6d4:	4321      	orrs	r1, r4
     6d6:	7011      	strb	r1, [r2, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     6d8:	0019      	movs	r1, r3
     6da:	31d6      	adds	r1, #214	; 0xd6
     6dc:	780a      	ldrb	r2, [r1, #0]
     6de:	43a2      	bics	r2, r4
     6e0:	700a      	strb	r2, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     6e2:	2180      	movs	r1, #128	; 0x80
     6e4:	4ac1      	ldr	r2, [pc, #772]	; (9ec <init+0x3f0>)
     6e6:	03c9      	lsls	r1, r1, #15
     6e8:	6011      	str	r1, [r2, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     6ea:	001a      	movs	r2, r3
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     6ec:	6039      	str	r1, [r7, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     6ee:	3243      	adds	r2, #67	; 0x43
     6f0:	7811      	ldrb	r1, [r2, #0]
     6f2:	3f4b      	subs	r7, #75	; 0x4b
     6f4:	43a1      	bics	r1, r4
     6f6:	7011      	strb	r1, [r2, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     6f8:	7811      	ldrb	r1, [r2, #0]
     6fa:	4301      	orrs	r1, r0
     6fc:	7011      	strb	r1, [r2, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     6fe:	0018      	movs	r0, r3


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     700:	2108      	movs	r1, #8
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     702:	3031      	adds	r0, #49	; 0x31


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     704:	6059      	str	r1, [r3, #4]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     706:	7801      	ldrb	r1, [r0, #0]
     708:	4031      	ands	r1, r6
     70a:	430d      	orrs	r5, r1
     70c:	7005      	strb	r5, [r0, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     70e:	7811      	ldrb	r1, [r2, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     710:	2502      	movs	r5, #2
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     712:	4321      	orrs	r1, r4
     714:	7011      	strb	r1, [r2, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     716:	0019      	movs	r1, r3
     718:	3159      	adds	r1, #89	; 0x59
     71a:	780a      	ldrb	r2, [r1, #0]
     71c:	43a2      	bics	r2, r4
     71e:	700a      	strb	r2, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     720:	2280      	movs	r2, #128	; 0x80
     722:	0492      	lsls	r2, r2, #18
     724:	609a      	str	r2, [r3, #8]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     726:	615a      	str	r2, [r3, #20]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     728:	001a      	movs	r2, r3
     72a:	3242      	adds	r2, #66	; 0x42
     72c:	7811      	ldrb	r1, [r2, #0]
     72e:	43a1      	bics	r1, r4
     730:	7011      	strb	r1, [r2, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     732:	7811      	ldrb	r1, [r2, #0]
     734:	4329      	orrs	r1, r5
     736:	7011      	strb	r1, [r2, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     738:	2104      	movs	r1, #4
     73a:	6059      	str	r1, [r3, #4]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     73c:	7801      	ldrb	r1, [r0, #0]
     73e:	43b1      	bics	r1, r6
     740:	4321      	orrs	r1, r4
     742:	7001      	strb	r1, [r0, #0]
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     744:	7811      	ldrb	r1, [r2, #0]
     746:	4321      	orrs	r1, r4
     748:	7011      	strb	r1, [r2, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     74a:	0019      	movs	r1, r3
     74c:	3158      	adds	r1, #88	; 0x58
     74e:	780a      	ldrb	r2, [r1, #0]
     750:	43a2      	bics	r2, r4
     752:	700a      	strb	r2, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     754:	2280      	movs	r2, #128	; 0x80
    pinIn(senseDPin);
    pinMux(senseDPin);
    pinOut(fireDPin);
    pinLow(fireDPin);

    charges.Afired = false;
     756:	2100      	movs	r1, #0
     758:	0452      	lsls	r2, r2, #17
     75a:	609a      	str	r2, [r3, #8]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     75c:	615a      	str	r2, [r3, #20]
     75e:	4aa4      	ldr	r2, [pc, #656]	; (9f0 <init+0x3f4>)
     760:	7011      	strb	r1, [r2, #0]
    charges.Bfired = false;
     762:	2100      	movs	r1, #0
     764:	7051      	strb	r1, [r2, #1]
    charges.Cfired = false;
     766:	2100      	movs	r1, #0
     768:	7091      	strb	r1, [r2, #2]
    charges.Dfired = false;
     76a:	2100      	movs	r1, #0
     76c:	70d1      	strb	r1, [r2, #3]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     76e:	7dc2      	ldrb	r2, [r0, #23]
     770:	43a2      	bics	r2, r4
     772:	75c2      	strb	r2, [r0, #23]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     774:	2280      	movs	r2, #128	; 0x80
     776:	0052      	lsls	r2, r2, #1
     778:	609a      	str	r2, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     77a:	783a      	ldrb	r2, [r7, #0]
     77c:	43a2      	bics	r2, r4
     77e:	703a      	strb	r2, [r7, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     780:	2280      	movs	r2, #128	; 0x80
     782:	0092      	lsls	r2, r2, #2
     784:	609a      	str	r2, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     786:	001a      	movs	r2, r3
     788:	324b      	adds	r2, #75	; 0x4b
     78a:	7811      	ldrb	r1, [r2, #0]
     78c:	43a1      	bics	r1, r4
     78e:	7011      	strb	r1, [r2, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     790:	7811      	ldrb	r1, [r2, #0]
     792:	4329      	orrs	r1, r5
     794:	7011      	strb	r1, [r2, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     796:	2180      	movs	r1, #128	; 0x80
     798:	0109      	lsls	r1, r1, #4
     79a:	6059      	str	r1, [r3, #4]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     79c:	2135      	movs	r1, #53	; 0x35
     79e:	468c      	mov	ip, r1
     7a0:	449c      	add	ip, r3
     7a2:	4661      	mov	r1, ip
     7a4:	7809      	ldrb	r1, [r1, #0]
     7a6:	351e      	adds	r5, #30
     7a8:	4031      	ands	r1, r6
     7aa:	4329      	orrs	r1, r5
     7ac:	4665      	mov	r5, ip
     7ae:	7029      	strb	r1, [r5, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     7b0:	7811      	ldrb	r1, [r2, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     7b2:	2520      	movs	r5, #32
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     7b4:	4321      	orrs	r1, r4
     7b6:	7011      	strb	r1, [r2, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     7b8:	0019      	movs	r1, r3
     7ba:	3134      	adds	r1, #52	; 0x34
     7bc:	780a      	ldrb	r2, [r1, #0]
     7be:	4032      	ands	r2, r6
     7c0:	432a      	orrs	r2, r5
     7c2:	700a      	strb	r2, [r1, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     7c4:	783a      	ldrb	r2, [r7, #0]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     7c6:	3d1e      	subs	r5, #30
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     7c8:	4322      	orrs	r2, r4
     7ca:	703a      	strb	r2, [r7, #0]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     7cc:	780a      	ldrb	r2, [r1, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     7ce:	3706      	adds	r7, #6

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     7d0:	43b2      	bics	r2, r6
     7d2:	432a      	orrs	r2, r5
     7d4:	700a      	strb	r2, [r1, #0]
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     7d6:	7dc2      	ldrb	r2, [r0, #23]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     7d8:	3196      	adds	r1, #150	; 0x96
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     7da:	4322      	orrs	r2, r4
     7dc:	75c2      	strb	r2, [r0, #23]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     7de:	780a      	ldrb	r2, [r1, #0]
     7e0:	43a2      	bics	r2, r4
     7e2:	700a      	strb	r2, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     7e4:	2280      	movs	r2, #128	; 0x80
     7e6:	4981      	ldr	r1, [pc, #516]	; (9ec <init+0x3f0>)
     7e8:	00d2      	lsls	r2, r2, #3
     7ea:	600a      	str	r2, [r1, #0]
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     7ec:	0019      	movs	r1, r3
     7ee:	3198      	adds	r1, #152	; 0x98
     7f0:	600a      	str	r2, [r1, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     7f2:	7e41      	ldrb	r1, [r0, #25]
     7f4:	43a1      	bics	r1, r4
     7f6:	7641      	strb	r1, [r0, #25]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     7f8:	609a      	str	r2, [r3, #8]
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     7fa:	619a      	str	r2, [r3, #24]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     7fc:	7fc2      	ldrb	r2, [r0, #31]
     7fe:	43a2      	bics	r2, r4
     800:	77c2      	strb	r2, [r0, #31]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     802:	2280      	movs	r2, #128	; 0x80
     804:	0252      	lsls	r2, r2, #9
     806:	609a      	str	r2, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     808:	78ba      	ldrb	r2, [r7, #2]
     80a:	43a2      	bics	r2, r4
     80c:	70ba      	strb	r2, [r7, #2]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     80e:	2280      	movs	r2, #128	; 0x80
     810:	0292      	lsls	r2, r2, #10
     812:	609a      	str	r2, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     814:	001a      	movs	r2, r3
     816:	3253      	adds	r2, #83	; 0x53
     818:	7811      	ldrb	r1, [r2, #0]
     81a:	43a1      	bics	r1, r4
     81c:	7011      	strb	r1, [r2, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     81e:	7811      	ldrb	r1, [r2, #0]
     820:	4329      	orrs	r1, r5
     822:	7011      	strb	r1, [r2, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     824:	2180      	movs	r1, #128	; 0x80
     826:	0309      	lsls	r1, r1, #12
     828:	6059      	str	r1, [r3, #4]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     82a:	2139      	movs	r1, #57	; 0x39
     82c:	468c      	mov	ip, r1
     82e:	449c      	add	ip, r3
     830:	4661      	mov	r1, ip
     832:	7809      	ldrb	r1, [r1, #0]
     834:	351e      	adds	r5, #30
     836:	4031      	ands	r1, r6
     838:	4329      	orrs	r1, r5
     83a:	4665      	mov	r5, ip
     83c:	7029      	strb	r1, [r5, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     83e:	7811      	ldrb	r1, [r2, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     840:	2520      	movs	r5, #32
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     842:	4321      	orrs	r1, r4
     844:	7011      	strb	r1, [r2, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     846:	0019      	movs	r1, r3
     848:	3138      	adds	r1, #56	; 0x38
     84a:	780a      	ldrb	r2, [r1, #0]
     84c:	4032      	ands	r2, r6
     84e:	432a      	orrs	r2, r5
     850:	700a      	strb	r2, [r1, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     852:	78ba      	ldrb	r2, [r7, #2]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     854:	3d1e      	subs	r5, #30
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     856:	4322      	orrs	r2, r4
     858:	70ba      	strb	r2, [r7, #2]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     85a:	780a      	ldrb	r2, [r1, #0]
     85c:	43b2      	bics	r2, r6
     85e:	432a      	orrs	r2, r5
     860:	700a      	strb	r2, [r1, #0]
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     862:	7fc2      	ldrb	r2, [r0, #31]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     864:	3114      	adds	r1, #20
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     866:	4322      	orrs	r2, r4
     868:	77c2      	strb	r2, [r0, #31]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     86a:	798a      	ldrb	r2, [r1, #6]
     86c:	43a2      	bics	r2, r4
     86e:	718a      	strb	r2, [r1, #6]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     870:	2280      	movs	r2, #128	; 0x80
     872:	02d2      	lsls	r2, r2, #11
     874:	609a      	str	r2, [r3, #8]
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     876:	619a      	str	r2, [r3, #24]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     878:	9103      	str	r1, [sp, #12]
     87a:	780a      	ldrb	r2, [r1, #0]
     87c:	43a2      	bics	r2, r4
     87e:	700a      	strb	r2, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     880:	2280      	movs	r2, #128	; 0x80
     882:	0152      	lsls	r2, r2, #5
     884:	609a      	str	r2, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     886:	783a      	ldrb	r2, [r7, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     888:	2120      	movs	r1, #32
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     88a:	43a2      	bics	r2, r4
     88c:	703a      	strb	r2, [r7, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     88e:	2280      	movs	r2, #128	; 0x80
     890:	0212      	lsls	r2, r2, #8
     892:	609a      	str	r2, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     894:	001a      	movs	r2, r3
     896:	324d      	adds	r2, #77	; 0x4d
     898:	7810      	ldrb	r0, [r2, #0]
     89a:	43a0      	bics	r0, r4
     89c:	7010      	strb	r0, [r2, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     89e:	7810      	ldrb	r0, [r2, #0]
     8a0:	4328      	orrs	r0, r5
     8a2:	7010      	strb	r0, [r2, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     8a4:	2080      	movs	r0, #128	; 0x80
     8a6:	0180      	lsls	r0, r0, #6
     8a8:	6058      	str	r0, [r3, #4]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     8aa:	0018      	movs	r0, r3
     8ac:	3036      	adds	r0, #54	; 0x36
     8ae:	7805      	ldrb	r5, [r0, #0]
     8b0:	4035      	ands	r5, r6
     8b2:	430d      	orrs	r5, r1
     8b4:	7005      	strb	r5, [r0, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     8b6:	7811      	ldrb	r1, [r2, #0]
     8b8:	000d      	movs	r5, r1
     8ba:	4325      	orrs	r5, r4
     8bc:	7015      	strb	r5, [r2, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     8be:	2237      	movs	r2, #55	; 0x37
     8c0:	4694      	mov	ip, r2
     8c2:	449c      	add	ip, r3
     8c4:	4662      	mov	r2, ip
     8c6:	2120      	movs	r1, #32
     8c8:	7812      	ldrb	r2, [r2, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     8ca:	2502      	movs	r5, #2
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     8cc:	4032      	ands	r2, r6
     8ce:	430a      	orrs	r2, r1
     8d0:	4661      	mov	r1, ip
     8d2:	700a      	strb	r2, [r1, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     8d4:	2102      	movs	r1, #2
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     8d6:	783a      	ldrb	r2, [r7, #0]
     8d8:	4322      	orrs	r2, r4
     8da:	703a      	strb	r2, [r7, #0]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     8dc:	7802      	ldrb	r2, [r0, #0]
     8de:	43b2      	bics	r2, r6
     8e0:	430a      	orrs	r2, r1
     8e2:	7002      	strb	r2, [r0, #0]
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     8e4:	9a03      	ldr	r2, [sp, #12]
     8e6:	9903      	ldr	r1, [sp, #12]
     8e8:	7812      	ldrb	r2, [r2, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     8ea:	3020      	adds	r0, #32
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     8ec:	4322      	orrs	r2, r4
     8ee:	700a      	strb	r2, [r1, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     8f0:	0019      	movs	r1, r3
     8f2:	314e      	adds	r1, #78	; 0x4e
     8f4:	780a      	ldrb	r2, [r1, #0]
     8f6:	43a2      	bics	r2, r4
     8f8:	700a      	strb	r2, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     8fa:	2280      	movs	r2, #128	; 0x80
     8fc:	01d2      	lsls	r2, r2, #7
     8fe:	609a      	str	r2, [r3, #8]
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     900:	619a      	str	r2, [r3, #24]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     902:	001a      	movs	r2, r3
     904:	3255      	adds	r2, #85	; 0x55
     906:	7811      	ldrb	r1, [r2, #0]
     908:	43a1      	bics	r1, r4
     90a:	7011      	strb	r1, [r2, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     90c:	2180      	movs	r1, #128	; 0x80
     90e:	0389      	lsls	r1, r1, #14
     910:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
}


inline static void pinCfg(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].reg = p.cfg;
     912:	2140      	movs	r1, #64	; 0x40
     914:	7011      	strb	r1, [r2, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     916:	7802      	ldrb	r2, [r0, #0]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     918:	0019      	movs	r1, r3
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     91a:	43a2      	bics	r2, r4
     91c:	7002      	strb	r2, [r0, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     91e:	2280      	movs	r2, #128	; 0x80
     920:	03d2      	lsls	r2, r2, #15

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     922:	313b      	adds	r1, #59	; 0x3b
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     924:	609a      	str	r2, [r3, #8]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     926:	780a      	ldrb	r2, [r1, #0]
     928:	43b2      	bics	r2, r6
     92a:	432a      	orrs	r2, r5
     92c:	700a      	strb	r2, [r1, #0]
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     92e:	7802      	ldrb	r2, [r0, #0]
    pinOut(TxPo);
    pinMux(TxPo);
    pinIn(RxPo);
    pinMux(RxPo);

    sercomClockEnable(SPI2, 3, 4);
     930:	4f30      	ldr	r7, [pc, #192]	; (9f4 <init+0x3f8>)
     932:	4322      	orrs	r2, r4
     934:	7002      	strb	r2, [r0, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     936:	001a      	movs	r2, r3
     938:	3257      	adds	r2, #87	; 0x57
     93a:	7810      	ldrb	r0, [r2, #0]
     93c:	43a0      	bics	r0, r4
     93e:	7010      	strb	r0, [r2, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     940:	7810      	ldrb	r0, [r2, #0]
     942:	4328      	orrs	r0, r5
     944:	7010      	strb	r0, [r2, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     946:	2080      	movs	r0, #128	; 0x80
     948:	0400      	lsls	r0, r0, #16
     94a:	6058      	str	r0, [r3, #4]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     94c:	2020      	movs	r0, #32
     94e:	780b      	ldrb	r3, [r1, #0]
     950:	4033      	ands	r3, r6
     952:	4303      	orrs	r3, r0
     954:	700b      	strb	r3, [r1, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     956:	7813      	ldrb	r3, [r2, #0]
     958:	0028      	movs	r0, r5
     95a:	4323      	orrs	r3, r4
     95c:	7013      	strb	r3, [r2, #0]
     95e:	2103      	movs	r1, #3
     960:	2204      	movs	r2, #4
     962:	47b8      	blx	r7
    sercomSpiMasterInit(SPI2, 1, 3, 0, 0, 0x00);
     964:	2300      	movs	r3, #0
     966:	4e24      	ldr	r6, [pc, #144]	; (9f8 <init+0x3fc>)
     968:	9301      	str	r3, [sp, #4]
     96a:	9300      	str	r3, [sp, #0]
     96c:	0021      	movs	r1, r4
     96e:	0028      	movs	r0, r5
     970:	2203      	movs	r2, #3
     972:	47b0      	blx	r6

    sercomClockEnable(SPI0, 3, 4);
     974:	2204      	movs	r2, #4
     976:	2103      	movs	r1, #3
     978:	2000      	movs	r0, #0
     97a:	47b8      	blx	r7
    sercomSpiMasterInit(SPI0, 3, 0, 0, 0, 0x00);
     97c:	2300      	movs	r3, #0
     97e:	2103      	movs	r1, #3
     980:	9301      	str	r3, [sp, #4]
     982:	9300      	str	r3, [sp, #0]
     984:	001a      	movs	r2, r3
     986:	0018      	movs	r0, r3
     988:	47b0      	blx	r6

    sercomClockEnable(SPI1, 3, 4);
     98a:	0020      	movs	r0, r4
     98c:	2204      	movs	r2, #4
     98e:	2103      	movs	r1, #3
     990:	47b8      	blx	r7
    sercomSpiMasterInit(SPI1, 3, 0, 0, 0, 0x00);
     992:	2300      	movs	r3, #0
     994:	0020      	movs	r0, r4
     996:	9301      	str	r3, [sp, #4]
     998:	9300      	str	r3, [sp, #0]
     99a:	001a      	movs	r2, r3
     99c:	2103      	movs	r1, #3
     99e:	47b0      	blx	r6

    sercomClockEnable(USART3, 4, 8);
     9a0:	2208      	movs	r2, #8
     9a2:	2104      	movs	r1, #4
     9a4:	2003      	movs	r0, #3
     9a6:	47b8      	blx	r7
    sercomUartInit(USART3,1,0,19200);
     9a8:	2396      	movs	r3, #150	; 0x96
     9aa:	0021      	movs	r1, r4
     9ac:	2200      	movs	r2, #0
     9ae:	2003      	movs	r0, #3
     9b0:	01db      	lsls	r3, r3, #7
     9b2:	4c12      	ldr	r4, [pc, #72]	; (9fc <init+0x400>)
     9b4:	47a0      	blx	r4

    TC4Init();
     9b6:	4b12      	ldr	r3, [pc, #72]	; (a00 <init+0x404>)
     9b8:	4798      	blx	r3
    TC5Init();
     9ba:	4b12      	ldr	r3, [pc, #72]	; (a04 <init+0x408>)
     9bc:	4798      	blx	r3
}
     9be:	b005      	add	sp, #20
     9c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
     9c2:	46c0      	nop			; (mov r8, r8)
     9c4:	41004000 	.word	0x41004000
     9c8:	40000400 	.word	0x40000400
     9cc:	000001d5 	.word	0x000001d5
     9d0:	00000e3d 	.word	0x00000e3d
     9d4:	00000ec5 	.word	0x00000ec5
     9d8:	00000fc5 	.word	0x00000fc5
     9dc:	00000ca1 	.word	0x00000ca1
     9e0:	e000e100 	.word	0xe000e100
     9e4:	ff00ffff 	.word	0xff00ffff
     9e8:	41004400 	.word	0x41004400
     9ec:	41004488 	.word	0x41004488
     9f0:	20000680 	.word	0x20000680
     9f4:	000026d9 	.word	0x000026d9
     9f8:	0000273d 	.word	0x0000273d
     9fc:	000027a1 	.word	0x000027a1
     a00:	00001095 	.word	0x00001095
     a04:	000010fd 	.word	0x000010fd

00000a08 <main>:


int main(void) {
     a08:	b510      	push	{r4, lr}

    init();
     a0a:	4b10      	ldr	r3, [pc, #64]	; (a4c <main+0x44>)
     a0c:	4798      	blx	r3

    initMS5803Barometer();
     a0e:	4b10      	ldr	r3, [pc, #64]	; (a50 <main+0x48>)
     a10:	4798      	blx	r3
    IMUinit();
     a12:	4b10      	ldr	r3, [pc, #64]	; (a54 <main+0x4c>)
     a14:	4798      	blx	r3

    computeKalmanGains();
     a16:	4b10      	ldr	r3, [pc, #64]	; (a58 <main+0x50>)
     a18:	4798      	blx	r3

    sampleTick();
     a1a:	4c10      	ldr	r4, [pc, #64]	; (a5c <main+0x54>)
     a1c:	47a0      	blx	r4

    POST();
     a1e:	4b10      	ldr	r3, [pc, #64]	; (a60 <main+0x58>)
     a20:	4798      	blx	r3

    isItPointingUp();
     a22:	4b10      	ldr	r3, [pc, #64]	; (a64 <main+0x5c>)
     a24:	4798      	blx	r3

    beep(400);
     a26:	20c8      	movs	r0, #200	; 0xc8
     a28:	4b0f      	ldr	r3, [pc, #60]	; (a68 <main+0x60>)
     a2a:	0040      	lsls	r0, r0, #1
     a2c:	4798      	blx	r3
	
    startupTick = millis();
     a2e:	4b0f      	ldr	r3, [pc, #60]	; (a6c <main+0x64>)
     a30:	4798      	blx	r3
     a32:	4b0f      	ldr	r3, [pc, #60]	; (a70 <main+0x68>)
     a34:	6018      	str	r0, [r3, #0]

    while (1) {
        if (takeSample()) {
     a36:	4b0f      	ldr	r3, [pc, #60]	; (a74 <main+0x6c>)
     a38:	4798      	blx	r3
     a3a:	2800      	cmp	r0, #0
     a3c:	d0fb      	beq.n	a36 <main+0x2e>
            sampleTick();
     a3e:	47a0      	blx	r4
            flight();
     a40:	4b0d      	ldr	r3, [pc, #52]	; (a78 <main+0x70>)
     a42:	4798      	blx	r3
            computeKalmanStates();
     a44:	4b0d      	ldr	r3, [pc, #52]	; (a7c <main+0x74>)
     a46:	4798      	blx	r3
     a48:	e7f5      	b.n	a36 <main+0x2e>
     a4a:	46c0      	nop			; (mov r8, r8)
     a4c:	000005fd 	.word	0x000005fd
     a50:	000005bd 	.word	0x000005bd
     a54:	00000a81 	.word	0x00000a81
     a58:	000014c9 	.word	0x000014c9
     a5c:	000023f9 	.word	0x000023f9
     a60:	00000bb9 	.word	0x00000bb9
     a64:	000013ed 	.word	0x000013ed
     a68:	00000d85 	.word	0x00000d85
     a6c:	00001061 	.word	0x00001061
     a70:	20000524 	.word	0x20000524
     a74:	000023e1 	.word	0x000023e1
     a78:	00001165 	.word	0x00001165
     a7c:	00001d69 	.word	0x00001d69

00000a80 <IMUinit>:
#include <util.h>
#include <boardDefines.h>


void IMUinit() {
     a80:	b570      	push	{r4, r5, r6, lr}
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     a82:	4c08      	ldr	r4, [pc, #32]	; (aa4 <IMUinit+0x24>)
     a84:	2580      	movs	r5, #128	; 0x80
     a86:	0023      	movs	r3, r4
     a88:	00ed      	lsls	r5, r5, #3
     a8a:	3394      	adds	r3, #148	; 0x94
     a8c:	601d      	str	r5, [r3, #0]

    uint8_t dummy_Tx = 0xFF;
    uint8_t dummy_rx;

    pinLow(cs_accel);
    spiDataTransfer(SPI0, BMI_ACCEL_PMU_RANGE);
     a8e:	4e06      	ldr	r6, [pc, #24]	; (aa8 <IMUinit+0x28>)
     a90:	210f      	movs	r1, #15
     a92:	2000      	movs	r0, #0
     a94:	47b0      	blx	r6
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     a96:	3498      	adds	r4, #152	; 0x98
    spiDataTransfer(SPI0, BMI_ACCEL_16G_RANGE);
     a98:	210c      	movs	r1, #12
     a9a:	2000      	movs	r0, #0
     a9c:	47b0      	blx	r6
     a9e:	6025      	str	r5, [r4, #0]
    pinHigh(cs_accel);

}
     aa0:	bd70      	pop	{r4, r5, r6, pc}
     aa2:	46c0      	nop			; (mov r8, r8)
     aa4:	41004400 	.word	0x41004400
     aa8:	000027e9 	.word	0x000027e9

00000aac <USARTconnectionAvaliable>:

bool USARTconnectionAvaliable() {
     aac:	b510      	push	{r4, lr}

    if (sercom(USART3)->SPI.INTFLAG.bit.RXC == 1) {
     aae:	4b09      	ldr	r3, [pc, #36]	; (ad4 <USARTconnectionAvaliable+0x28>)
     ab0:	7e1c      	ldrb	r4, [r3, #24]
     ab2:	0764      	lsls	r4, r4, #29
     ab4:	0fe4      	lsrs	r4, r4, #31
     ab6:	2c01      	cmp	r4, #1
     ab8:	d001      	beq.n	abe <USARTconnectionAvaliable+0x12>
            return true;
        } else {
            return false;
        }
    }
    return false;
     aba:	2000      	movs	r0, #0
     abc:	e009      	b.n	ad2 <USARTconnectionAvaliable+0x26>
}

bool USARTconnectionAvaliable() {

    if (sercom(USART3)->SPI.INTFLAG.bit.RXC == 1) {
        u8_t connectAttempt = usartDataIn(USART3);
     abe:	2003      	movs	r0, #3
     ac0:	4b05      	ldr	r3, [pc, #20]	; (ad8 <USARTconnectionAvaliable+0x2c>)
     ac2:	4798      	blx	r3
     ac4:	1e01      	subs	r1, r0, #0
        if (connectAttempt == 0x48) {
     ac6:	2948      	cmp	r1, #72	; 0x48
     ac8:	d1f7      	bne.n	aba <USARTconnectionAvaliable+0xe>
            usartDataOut(USART3, 'H');
     aca:	2003      	movs	r0, #3
     acc:	4b03      	ldr	r3, [pc, #12]	; (adc <USARTconnectionAvaliable+0x30>)
     ace:	4798      	blx	r3
            return true;
     ad0:	0020      	movs	r0, r4
        } else {
            return false;
        }
    }
    return false;
}
     ad2:	bd10      	pop	{r4, pc}
     ad4:	42001400 	.word	0x42001400
     ad8:	00002835 	.word	0x00002835
     adc:	0000281d 	.word	0x0000281d

00000ae0 <sendTheasePagesToComputer>:

void sendTheasePagesToComputer(u32_t firstPage, u32_t lastPage) {
     ae0:	b5f0      	push	{r4, r5, r6, r7, lr}
    for (u16_t page = 0; page <= pagesToSend; ++page) {

        u8_t data[256];
        AT25SEreadPage(pageToReadAddress , data);

        for (u16_t dataByte = 0; dataByte < 256; ++dataByte) {
     ae2:	2780      	movs	r7, #128	; 0x80
        }
    }
    return false;
}

void sendTheasePagesToComputer(u32_t firstPage, u32_t lastPage) {
     ae4:	0005      	movs	r5, r0

    u16_t pagesToSend = (lastPage - firstPage) >> 8;

    u32_t pageToReadAddress = firstPage;

    for (u16_t page = 0; page <= pagesToSend; ++page) {
     ae6:	2400      	movs	r4, #0
    return false;
}

void sendTheasePagesToComputer(u32_t firstPage, u32_t lastPage) {

    u16_t pagesToSend = (lastPage - firstPage) >> 8;
     ae8:	1a09      	subs	r1, r1, r0
     aea:	0a09      	lsrs	r1, r1, #8
        }
    }
    return false;
}

void sendTheasePagesToComputer(u32_t firstPage, u32_t lastPage) {
     aec:	b0c3      	sub	sp, #268	; 0x10c

    u16_t pagesToSend = (lastPage - firstPage) >> 8;
     aee:	b28b      	uxth	r3, r1
     af0:	9301      	str	r3, [sp, #4]
    for (u16_t page = 0; page <= pagesToSend; ++page) {

        u8_t data[256];
        AT25SEreadPage(pageToReadAddress , data);

        for (u16_t dataByte = 0; dataByte < 256; ++dataByte) {
     af2:	007f      	lsls	r7, r7, #1
    u32_t pageToReadAddress = firstPage;

    for (u16_t page = 0; page <= pagesToSend; ++page) {

        u8_t data[256];
        AT25SEreadPage(pageToReadAddress , data);
     af4:	a902      	add	r1, sp, #8
     af6:	0028      	movs	r0, r5
     af8:	4b09      	ldr	r3, [pc, #36]	; (b20 <sendTheasePagesToComputer+0x40>)
     afa:	4798      	blx	r3
     afc:	2600      	movs	r6, #0

        for (u16_t dataByte = 0; dataByte < 256; ++dataByte) {
            usartDataOut(USART3, data[dataByte]);
     afe:	ab02      	add	r3, sp, #8
     b00:	5d99      	ldrb	r1, [r3, r6]
     b02:	2003      	movs	r0, #3
     b04:	4b07      	ldr	r3, [pc, #28]	; (b24 <sendTheasePagesToComputer+0x44>)
     b06:	3601      	adds	r6, #1
     b08:	4798      	blx	r3
    for (u16_t page = 0; page <= pagesToSend; ++page) {

        u8_t data[256];
        AT25SEreadPage(pageToReadAddress , data);

        for (u16_t dataByte = 0; dataByte < 256; ++dataByte) {
     b0a:	42be      	cmp	r6, r7
     b0c:	d1f7      	bne.n	afe <sendTheasePagesToComputer+0x1e>

    u16_t pagesToSend = (lastPage - firstPage) >> 8;

    u32_t pageToReadAddress = firstPage;

    for (u16_t page = 0; page <= pagesToSend; ++page) {
     b0e:	3401      	adds	r4, #1
     b10:	9b01      	ldr	r3, [sp, #4]

        for (u16_t dataByte = 0; dataByte < 256; ++dataByte) {
            usartDataOut(USART3, data[dataByte]);
        }

        pageToReadAddress = pageToReadAddress + 0x100;
     b12:	3501      	adds	r5, #1

    u16_t pagesToSend = (lastPage - firstPage) >> 8;

    u32_t pageToReadAddress = firstPage;

    for (u16_t page = 0; page <= pagesToSend; ++page) {
     b14:	b2a4      	uxth	r4, r4

        for (u16_t dataByte = 0; dataByte < 256; ++dataByte) {
            usartDataOut(USART3, data[dataByte]);
        }

        pageToReadAddress = pageToReadAddress + 0x100;
     b16:	35ff      	adds	r5, #255	; 0xff

    u16_t pagesToSend = (lastPage - firstPage) >> 8;

    u32_t pageToReadAddress = firstPage;

    for (u16_t page = 0; page <= pagesToSend; ++page) {
     b18:	42a3      	cmp	r3, r4
     b1a:	d2eb      	bcs.n	af4 <sendTheasePagesToComputer+0x14>
            usartDataOut(USART3, data[dataByte]);
        }

        pageToReadAddress = pageToReadAddress + 0x100;
    }
}
     b1c:	b043      	add	sp, #268	; 0x10c
     b1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     b20:	000003b1 	.word	0x000003b1
     b24:	0000281d 	.word	0x0000281d

00000b28 <altitudeAGL>:

int32_t altitudeAGL() {
    return altitude - offsets.groundOffset;
     b28:	4b07      	ldr	r3, [pc, #28]	; (b48 <altitudeAGL+0x20>)

        pageToReadAddress = pageToReadAddress + 0x100;
    }
}

int32_t altitudeAGL() {
     b2a:	b510      	push	{r4, lr}
    return altitude - offsets.groundOffset;
     b2c:	6998      	ldr	r0, [r3, #24]
     b2e:	4b07      	ldr	r3, [pc, #28]	; (b4c <altitudeAGL+0x24>)
     b30:	4798      	blx	r3
     b32:	000b      	movs	r3, r1
     b34:	4906      	ldr	r1, [pc, #24]	; (b50 <altitudeAGL+0x28>)
     b36:	0002      	movs	r2, r0
     b38:	6808      	ldr	r0, [r1, #0]
     b3a:	6849      	ldr	r1, [r1, #4]
     b3c:	4c05      	ldr	r4, [pc, #20]	; (b54 <altitudeAGL+0x2c>)
     b3e:	47a0      	blx	r4
     b40:	4b05      	ldr	r3, [pc, #20]	; (b58 <altitudeAGL+0x30>)
     b42:	4798      	blx	r3
}
     b44:	bd10      	pop	{r4, pc}
     b46:	46c0      	nop			; (mov r8, r8)
     b48:	200004d8 	.word	0x200004d8
     b4c:	00005e1d 	.word	0x00005e1d
     b50:	20000698 	.word	0x20000698
     b54:	00005645 	.word	0x00005645
     b58:	00005d2d 	.word	0x00005d2d

00000b5c <unplugged>:


bool unplugged() {
    if (sample.voltage.batFloat < 3.3) {
     b5c:	4b07      	ldr	r3, [pc, #28]	; (b7c <unplugged+0x20>)
int32_t altitudeAGL() {
    return altitude - offsets.groundOffset;
}


bool unplugged() {
     b5e:	b570      	push	{r4, r5, r6, lr}
     b60:	68d8      	ldr	r0, [r3, #12]
     b62:	4b07      	ldr	r3, [pc, #28]	; (b80 <unplugged+0x24>)
     b64:	4798      	blx	r3
     b66:	4a07      	ldr	r2, [pc, #28]	; (b84 <unplugged+0x28>)
     b68:	4b07      	ldr	r3, [pc, #28]	; (b88 <unplugged+0x2c>)
     b6a:	4d08      	ldr	r5, [pc, #32]	; (b8c <unplugged+0x30>)
     b6c:	2401      	movs	r4, #1
     b6e:	47a8      	blx	r5
     b70:	2800      	cmp	r0, #0
     b72:	d100      	bne.n	b76 <unplugged+0x1a>
     b74:	1c04      	adds	r4, r0, #0
     b76:	b2e0      	uxtb	r0, r4
    if (sample.voltage.batFloat < 3.3) {
        return true;
    } else {
        return false;
    }
}
     b78:	bd70      	pop	{r4, r5, r6, pc}
     b7a:	46c0      	nop			; (mov r8, r8)
     b7c:	200007c8 	.word	0x200007c8
     b80:	00005e8d 	.word	0x00005e8d
     b84:	66666666 	.word	0x66666666
     b88:	400a6666 	.word	0x400a6666
     b8c:	00003b95 	.word	0x00003b95

00000b90 <finishFlight>:

void finishFlight() {

    flightState = flightIdle;
     b90:	2201      	movs	r2, #1
    } else {
        return false;
    }
}

void finishFlight() {
     b92:	b510      	push	{r4, lr}

    flightState = flightIdle;
     b94:	4b04      	ldr	r3, [pc, #16]	; (ba8 <finishFlight+0x18>)
     b96:	701a      	strb	r2, [r3, #0]
    AT25SFHoldTillReady();
     b98:	4b04      	ldr	r3, [pc, #16]	; (bac <finishFlight+0x1c>)
     b9a:	4798      	blx	r3
    writeFlightEndAddress( );
     b9c:	4b04      	ldr	r3, [pc, #16]	; (bb0 <finishFlight+0x20>)
     b9e:	4798      	blx	r3
    unpluggedJingle();
     ba0:	4b04      	ldr	r3, [pc, #16]	; (bb4 <finishFlight+0x24>)
     ba2:	4798      	blx	r3
}
     ba4:	bd10      	pop	{r4, pc}
     ba6:	46c0      	nop			; (mov r8, r8)
     ba8:	20000684 	.word	0x20000684
     bac:	000001e5 	.word	0x000001e5
     bb0:	000022f1 	.word	0x000022f1
     bb4:	00000df9 	.word	0x00000df9

00000bb8 <POST>:

void POST() {
     bb8:	b5f0      	push	{r4, r5, r6, r7, lr}

    bool postFailed = false;
    u8_t failType = 0;

    //Baro post first
    u8_t crc = MS5803_CRC4();
     bba:	4b30      	ldr	r3, [pc, #192]	; (c7c <POST+0xc4>)
    AT25SFHoldTillReady();
    writeFlightEndAddress( );
    unpluggedJingle();
}

void POST() {
     bbc:	b085      	sub	sp, #20

    bool postFailed = false;
    u8_t failType = 0;

    //Baro post first
    u8_t crc = MS5803_CRC4();
     bbe:	4798      	blx	r3
    if (crc != coefficients_[7]) {
     bc0:	4b2f      	ldr	r3, [pc, #188]	; (c80 <POST+0xc8>)
     bc2:	b280      	uxth	r0, r0
     bc4:	89db      	ldrh	r3, [r3, #14]
        postFailed = true;
        failType = 1;
     bc6:	2501      	movs	r5, #1
    bool postFailed = false;
    u8_t failType = 0;

    //Baro post first
    u8_t crc = MS5803_CRC4();
    if (crc != coefficients_[7]) {
     bc8:	4283      	cmp	r3, r0
     bca:	d100      	bne.n	bce <POST+0x16>
void POST() {
    uint8_t dummy_rx;
    uint8_t dummy_Tx = 0xFF;

    bool postFailed = false;
    u8_t failType = 0;
     bcc:	2500      	movs	r5, #0
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     bce:	2780      	movs	r7, #128	; 0x80
     bd0:	4e2c      	ldr	r6, [pc, #176]	; (c84 <POST+0xcc>)
     bd2:	02ff      	lsls	r7, r7, #11
        failType = 1;
    }

    //Memory Post
    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,0x9f); // read id and mfg code
     bd4:	4c2c      	ldr	r4, [pc, #176]	; (c88 <POST+0xd0>)

void POST() {
    uint8_t dummy_rx;
    uint8_t dummy_Tx = 0xFF;

    bool postFailed = false;
     bd6:	9501      	str	r5, [sp, #4]
        failType = 1;
    }

    //Memory Post
    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,0x9f); // read id and mfg code
     bd8:	219f      	movs	r1, #159	; 0x9f
     bda:	6177      	str	r7, [r6, #20]
     bdc:	2001      	movs	r0, #1
     bde:	47a0      	blx	r4
    u8_t mfgID = spiDataTransfer(SPI1,dummy_Tx);
     be0:	21ff      	movs	r1, #255	; 0xff
     be2:	2001      	movs	r0, #1
     be4:	47a0      	blx	r4
    u8_t deviceID1 = spiDataTransfer(SPI1,dummy_Tx);
     be6:	21ff      	movs	r1, #255	; 0xff
    }

    //Memory Post
    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,0x9f); // read id and mfg code
    u8_t mfgID = spiDataTransfer(SPI1,dummy_Tx);
     be8:	9002      	str	r0, [sp, #8]
    u8_t deviceID1 = spiDataTransfer(SPI1,dummy_Tx);
     bea:	2001      	movs	r0, #1
     bec:	47a0      	blx	r4
    u8_t deviceID2 = spiDataTransfer(SPI1,dummy_Tx);
     bee:	21ff      	movs	r1, #255	; 0xff

    //Memory Post
    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,0x9f); // read id and mfg code
    u8_t mfgID = spiDataTransfer(SPI1,dummy_Tx);
    u8_t deviceID1 = spiDataTransfer(SPI1,dummy_Tx);
     bf0:	9003      	str	r0, [sp, #12]
    u8_t deviceID2 = spiDataTransfer(SPI1,dummy_Tx);
     bf2:	2001      	movs	r0, #1
     bf4:	47a0      	blx	r4
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     bf6:	61b7      	str	r7, [r6, #24]
    pinHigh(cs_mem);

    if ( mfgID != 0x1f & deviceID1 != 0x86 & deviceID2 != 0x01) {
     bf8:	9f02      	ldr	r7, [sp, #8]
     bfa:	3f1f      	subs	r7, #31
     bfc:	1e7b      	subs	r3, r7, #1
     bfe:	419f      	sbcs	r7, r3
     c00:	9b03      	ldr	r3, [sp, #12]
     c02:	3b86      	subs	r3, #134	; 0x86
     c04:	1e5a      	subs	r2, r3, #1
     c06:	4193      	sbcs	r3, r2
     c08:	423b      	tst	r3, r7
     c0a:	d004      	beq.n	c16 <POST+0x5e>
     c0c:	2801      	cmp	r0, #1
     c0e:	d002      	beq.n	c16 <POST+0x5e>
        postFailed = true;
     c10:	2301      	movs	r3, #1
        failType = 2;
     c12:	2502      	movs	r5, #2
    u8_t deviceID1 = spiDataTransfer(SPI1,dummy_Tx);
    u8_t deviceID2 = spiDataTransfer(SPI1,dummy_Tx);
    pinHigh(cs_mem);

    if ( mfgID != 0x1f & deviceID1 != 0x86 & deviceID2 != 0x01) {
        postFailed = true;
     c14:	9301      	str	r3, [sp, #4]
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     c16:	2780      	movs	r7, #128	; 0x80
     c18:	4b1c      	ldr	r3, [pc, #112]	; (c8c <POST+0xd4>)
     c1a:	00ff      	lsls	r7, r7, #3
     c1c:	601f      	str	r7, [r3, #0]
        failType = 2;
    }

    //Accelerometer Post
    pinLow(cs_accel);
    dummy_rx = spiDataTransfer(SPI0, BMI055_BGW_CHIPID | BMI055_READ_REG);
     c1e:	2180      	movs	r1, #128	; 0x80
     c20:	2000      	movs	r0, #0
     c22:	47a0      	blx	r4
    u8_t accelID = spiDataTransfer(SPI0,dummy_Tx);
     c24:	21ff      	movs	r1, #255	; 0xff
     c26:	2000      	movs	r0, #0
     c28:	47a0      	blx	r4
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     c2a:	4b19      	ldr	r3, [pc, #100]	; (c90 <POST+0xd8>)
     c2c:	601f      	str	r7, [r3, #0]
    pinHigh(cs_accel);

    if (accelID != 0xFA) {
     c2e:	28fa      	cmp	r0, #250	; 0xfa
     c30:	d002      	beq.n	c38 <POST+0x80>
        postFailed = true;
     c32:	2301      	movs	r3, #1
        failType = 3;
     c34:	2503      	movs	r5, #3
    dummy_rx = spiDataTransfer(SPI0, BMI055_BGW_CHIPID | BMI055_READ_REG);
    u8_t accelID = spiDataTransfer(SPI0,dummy_Tx);
    pinHigh(cs_accel);

    if (accelID != 0xFA) {
        postFailed = true;
     c36:	9301      	str	r3, [sp, #4]
        failType = 3;
    }

    //Gyro Post
    pinLow(cs_gyro);
    dummy_rx = spiDataTransfer(SPI0, BMI055_BGW_CHIPID | BMI055_READ_REG);
     c38:	2180      	movs	r1, #128	; 0x80
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     c3a:	6177      	str	r7, [r6, #20]
     c3c:	2000      	movs	r0, #0
     c3e:	47a0      	blx	r4
    u8_t gyroID = spiDataTransfer(SPI0,dummy_Tx);
     c40:	21ff      	movs	r1, #255	; 0xff
     c42:	2000      	movs	r0, #0
     c44:	47a0      	blx	r4
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     c46:	61b7      	str	r7, [r6, #24]
    pinHigh(cs_gyro);

    if (gyroID != 0x0F) {
     c48:	280f      	cmp	r0, #15
     c4a:	d103      	bne.n	c54 <POST+0x9c>
    }

    //Analog Accelerometer Post


    if (postFailed) {
     c4c:	9b01      	ldr	r3, [sp, #4]
     c4e:	2b00      	cmp	r3, #0
     c50:	d101      	bne.n	c56 <POST+0x9e>
     c52:	e011      	b.n	c78 <POST+0xc0>
    u8_t gyroID = spiDataTransfer(SPI0,dummy_Tx);
    pinHigh(cs_gyro);

    if (gyroID != 0x0F) {
        postFailed = true;
        failType = 4;
     c54:	2504      	movs	r5, #4

    if (postFailed) {
        while (1) {
            u8_t beepCount;

            for (beepCount = failType; beepCount > 0; beepCount--) {
     c56:	002c      	movs	r4, r5
     c58:	4e0e      	ldr	r6, [pc, #56]	; (c94 <POST+0xdc>)
     c5a:	2c00      	cmp	r4, #0
     c5c:	d009      	beq.n	c72 <POST+0xba>
                beep(300);
     c5e:	2096      	movs	r0, #150	; 0x96
     c60:	4b0d      	ldr	r3, [pc, #52]	; (c98 <POST+0xe0>)
     c62:	0040      	lsls	r0, r0, #1
     c64:	4798      	blx	r3
                delay_ms(300);
     c66:	2096      	movs	r0, #150	; 0x96

    if (postFailed) {
        while (1) {
            u8_t beepCount;

            for (beepCount = failType; beepCount > 0; beepCount--) {
     c68:	3c01      	subs	r4, #1
                beep(300);
                delay_ms(300);
     c6a:	0040      	lsls	r0, r0, #1
     c6c:	47b0      	blx	r6

    if (postFailed) {
        while (1) {
            u8_t beepCount;

            for (beepCount = failType; beepCount > 0; beepCount--) {
     c6e:	b2e4      	uxtb	r4, r4
     c70:	e7f2      	b.n	c58 <POST+0xa0>
                beep(300);
                delay_ms(300);
            }
            delay_ms(1500);
     c72:	480a      	ldr	r0, [pc, #40]	; (c9c <POST+0xe4>)
     c74:	47b0      	blx	r6
        }
     c76:	e7ee      	b.n	c56 <POST+0x9e>
    }
}
     c78:	b005      	add	sp, #20
     c7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     c7c:	000005ed 	.word	0x000005ed
     c80:	2000063e 	.word	0x2000063e
     c84:	41004400 	.word	0x41004400
     c88:	000027e9 	.word	0x000027e9
     c8c:	41004494 	.word	0x41004494
     c90:	41004498 	.word	0x41004498
     c94:	00001015 	.word	0x00001015
     c98:	00000d85 	.word	0x00000d85
     c9c:	000005dc 	.word	0x000005dc

00000ca0 <adcInit>:
#include <util.h>

void adcInit() {

    // set up clock
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;
     ca0:	2180      	movs	r1, #128	; 0x80


#include <util.h>

void adcInit() {
     ca2:	b510      	push	{r4, lr}

    // set up clock
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;
     ca4:	4a10      	ldr	r2, [pc, #64]	; (ce8 <adcInit+0x48>)
     ca6:	0249      	lsls	r1, r1, #9
     ca8:	6a13      	ldr	r3, [r2, #32]
    // divide prescaler by 512 (93.75KHz), max adc freq is 2.1MHz
    ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |
                     ADC_CTRLB_RESSEL_12BIT;

    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
     caa:	4810      	ldr	r0, [pc, #64]	; (cec <adcInit+0x4c>)
#include <util.h>

void adcInit() {

    // set up clock
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;
     cac:	430b      	orrs	r3, r1
     cae:	6213      	str	r3, [r2, #32]

    // divide prescaler by 512 (93.75KHz), max adc freq is 2.1MHz
    ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |
     cb0:	23e0      	movs	r3, #224	; 0xe0
     cb2:	490f      	ldr	r1, [pc, #60]	; (cf0 <adcInit+0x50>)
                     ADC_CTRLB_RESSEL_12BIT;

    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
     cb4:	4a0f      	ldr	r2, [pc, #60]	; (cf4 <adcInit+0x54>)

    // set up clock
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;

    // divide prescaler by 512 (93.75KHz), max adc freq is 2.1MHz
    ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |
     cb6:	00db      	lsls	r3, r3, #3
     cb8:	808b      	strh	r3, [r1, #4]
                     ADC_CTRLB_RESSEL_12BIT;

    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
     cba:	8050      	strh	r0, [r2, #2]
                        GCLK_CLKCTRL_GEN(0) |
                        GCLK_CLKCTRL_ID(ADC_GCLK_ID);

    ADC->CALIB.reg =
        ADC_CALIB_BIAS_CAL(
     cbc:	4a0e      	ldr	r2, [pc, #56]	; (cf8 <adcInit+0x58>)
    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(0) |
                        GCLK_CLKCTRL_ID(ADC_GCLK_ID);

    ADC->CALIB.reg =
     cbe:	6812      	ldr	r2, [r2, #0]
     cc0:	0150      	lsls	r0, r2, #5
     cc2:	4018      	ands	r0, r3
     cc4:	4b0d      	ldr	r3, [pc, #52]	; (cfc <adcInit+0x5c>)
     cc6:	0154      	lsls	r4, r2, #5
     cc8:	681a      	ldr	r2, [r3, #0]
     cca:	0ed3      	lsrs	r3, r2, #27
     ccc:	4323      	orrs	r3, r4
     cce:	b2da      	uxtb	r2, r3
     cd0:	0003      	movs	r3, r0
     cd2:	4313      	orrs	r3, r2
     cd4:	850b      	strh	r3, [r1, #40]	; 0x28
        ) |
        ADC_CALIB_LINEARITY_CAL(
            (*(uint64_t *)ADC_FUSES_LINEARITY_0_ADDR >> ADC_FUSES_LINEARITY_0_Pos)
        );

    ADC->REFCTRL.reg = ADC_REFCTRL_REFSEL_INTVCC1;
     cd6:	2302      	movs	r3, #2
     cd8:	704b      	strb	r3, [r1, #1]

    ADC->CTRLA.reg = ADC_CTRLA_ENABLE; // enable
     cda:	700b      	strb	r3, [r1, #0]
    while(ADC->STATUS.reg & ADC_STATUS_SYNCBUSY);
     cdc:	7e4b      	ldrb	r3, [r1, #25]
     cde:	b25b      	sxtb	r3, r3
     ce0:	2b00      	cmp	r3, #0
     ce2:	dbfb      	blt.n	cdc <adcInit+0x3c>
}
     ce4:	bd10      	pop	{r4, pc}
     ce6:	46c0      	nop			; (mov r8, r8)
     ce8:	40000400 	.word	0x40000400
     cec:	0000401e 	.word	0x0000401e
     cf0:	42004000 	.word	0x42004000
     cf4:	40000c00 	.word	0x40000c00
     cf8:	00806024 	.word	0x00806024
     cfc:	00806020 	.word	0x00806020

00000d00 <adcSample>:



u16_t adcSample() {
    ADC->SWTRIG.reg = ADC_SWTRIG_START;
     d00:	2202      	movs	r2, #2
     d02:	4b05      	ldr	r3, [pc, #20]	; (d18 <adcSample+0x18>)
     d04:	731a      	strb	r2, [r3, #12]
    while(!(ADC->INTFLAG.reg & ADC_INTFLAG_RESRDY)); // wait until result is ready
     d06:	3a01      	subs	r2, #1
     d08:	7e19      	ldrb	r1, [r3, #24]
     d0a:	4211      	tst	r1, r2
     d0c:	d0fc      	beq.n	d08 <adcSample+0x8>
    return ADC->RESULT.reg;
     d0e:	4b02      	ldr	r3, [pc, #8]	; (d18 <adcSample+0x18>)
     d10:	8b58      	ldrh	r0, [r3, #26]
     d12:	b280      	uxth	r0, r0
}
     d14:	4770      	bx	lr
     d16:	46c0      	nop			; (mov r8, r8)
     d18:	42004000 	.word	0x42004000

00000d1c <adc_read>:


u16_t adc_read(Pin p) {
     d1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    u16_t buad;

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
     d1e:	2501      	movs	r5, #1
     d20:	0c02      	lsrs	r2, r0, #16
     d22:	b2d4      	uxtb	r4, r2
     d24:	9000      	str	r0, [sp, #0]
     d26:	0e00      	lsrs	r0, r0, #24
     d28:	9101      	str	r1, [sp, #4]
     d2a:	0842      	lsrs	r2, r0, #1
     d2c:	01e3      	lsls	r3, r4, #7
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     d2e:	4911      	ldr	r1, [pc, #68]	; (d74 <adc_read+0x58>)
     d30:	18d2      	adds	r2, r2, r3
     d32:	1852      	adds	r2, r2, r1
    u16_t buad;

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
     d34:	4228      	tst	r0, r5
     d36:	d005      	beq.n	d44 <adc_read+0x28>
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     d38:	210f      	movs	r1, #15
     d3a:	7814      	ldrb	r4, [r2, #0]
     d3c:	4021      	ands	r1, r4
     d3e:	2410      	movs	r4, #16
     d40:	4321      	orrs	r1, r4
     d42:	e003      	b.n	d4c <adc_read+0x30>
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     d44:	240f      	movs	r4, #15
     d46:	7811      	ldrb	r1, [r2, #0]
     d48:	43a1      	bics	r1, r4
     d4a:	4329      	orrs	r1, r5
     d4c:	7011      	strb	r1, [r2, #0]
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     d4e:	2101      	movs	r1, #1
     d50:	4a09      	ldr	r2, [pc, #36]	; (d78 <adc_read+0x5c>)
     d52:	18c3      	adds	r3, r0, r3
     d54:	189b      	adds	r3, r3, r2
     d56:	781a      	ldrb	r2, [r3, #0]
     d58:	430a      	orrs	r2, r1
     d5a:	701a      	strb	r2, [r3, #0]
    // switch pin mux to analog in
    pinAnalog(p);

    ADC->INPUTCTRL.reg = (ADC_INPUTCTRL_MUXPOS(p.chan) // select from proper pin
                          | ADC_INPUTCTRL_MUXNEG_GND // 0 = gnd
                          | ADC_INPUTCTRL_GAIN_1X);
     d5c:	466b      	mov	r3, sp
     d5e:	791a      	ldrb	r2, [r3, #4]
     d60:	231f      	movs	r3, #31
     d62:	4013      	ands	r3, r2
     d64:	22c0      	movs	r2, #192	; 0xc0
     d66:	0152      	lsls	r2, r2, #5
     d68:	4313      	orrs	r3, r2

u16_t adc_read(Pin p) {
    // switch pin mux to analog in
    pinAnalog(p);

    ADC->INPUTCTRL.reg = (ADC_INPUTCTRL_MUXPOS(p.chan) // select from proper pin
     d6a:	4a04      	ldr	r2, [pc, #16]	; (d7c <adc_read+0x60>)
     d6c:	6113      	str	r3, [r2, #16]
                          | ADC_INPUTCTRL_MUXNEG_GND // 0 = gnd
                          | ADC_INPUTCTRL_GAIN_1X);

    return adcSample();
     d6e:	4b04      	ldr	r3, [pc, #16]	; (d80 <adc_read+0x64>)
     d70:	4798      	blx	r3
     d72:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
     d74:	41004430 	.word	0x41004430
     d78:	41004440 	.word	0x41004440
     d7c:	42004000 	.word	0x42004000
     d80:	00000d01 	.word	0x00000d01

00000d84 <beep>:
#include <util.h>
#include <boardDefines.h>


void beep(u16_t toggles) {
     d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
}


inline static void pinToggle(Pin p) {
    PORT->Group[p.group].OUTTGL.reg = (1<<p.pin);
     d86:	2380      	movs	r3, #128	; 0x80
     d88:	2780      	movs	r7, #128	; 0x80
     d8a:	0006      	movs	r6, r0

    pinToggle(LedPin);
    for (u16_t buzz = 0; buzz < toggles; ++buzz) {
     d8c:	2500      	movs	r5, #0
     d8e:	4c0a      	ldr	r4, [pc, #40]	; (db8 <beep+0x34>)
     d90:	035b      	lsls	r3, r3, #13
     d92:	61e3      	str	r3, [r4, #28]
     d94:	03bf      	lsls	r7, r7, #14
     d96:	42b5      	cmp	r5, r6
     d98:	d006      	beq.n	da8 <beep+0x24>
     d9a:	61e7      	str	r7, [r4, #28]
        pinToggle(buzzerPin);
        delay_us(122);
     d9c:	207a      	movs	r0, #122	; 0x7a
     d9e:	4b07      	ldr	r3, [pc, #28]	; (dbc <beep+0x38>)


void beep(u16_t toggles) {

    pinToggle(LedPin);
    for (u16_t buzz = 0; buzz < toggles; ++buzz) {
     da0:	3501      	adds	r5, #1
        pinToggle(buzzerPin);
        delay_us(122);
     da2:	4798      	blx	r3


void beep(u16_t toggles) {

    pinToggle(LedPin);
    for (u16_t buzz = 0; buzz < toggles; ++buzz) {
     da4:	b2ad      	uxth	r5, r5
     da6:	e7f6      	b.n	d96 <beep+0x12>
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     da8:	2380      	movs	r3, #128	; 0x80
     daa:	039b      	lsls	r3, r3, #14
     dac:	6163      	str	r3, [r4, #20]
}


inline static void pinToggle(Pin p) {
    PORT->Group[p.group].OUTTGL.reg = (1<<p.pin);
     dae:	2380      	movs	r3, #128	; 0x80
     db0:	035b      	lsls	r3, r3, #13
     db2:	61e3      	str	r3, [r4, #28]
        pinToggle(buzzerPin);
        delay_us(122);
    }
    pinLow(buzzerPin);
    pinToggle(LedPin);
}
     db4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     db6:	46c0      	nop			; (mov r8, r8)
     db8:	41004400 	.word	0x41004400
     dbc:	00000fe5 	.word	0x00000fe5

00000dc0 <startupJingle>:

void startupJingle(){
     dc0:	b570      	push	{r4, r5, r6, lr}
    beep(300);
     dc2:	2696      	movs	r6, #150	; 0x96
     dc4:	0076      	lsls	r6, r6, #1
     dc6:	4d0a      	ldr	r5, [pc, #40]	; (df0 <startupJingle+0x30>)
     dc8:	0030      	movs	r0, r6
     dca:	47a8      	blx	r5
    delay_ms(80);
     dcc:	4c09      	ldr	r4, [pc, #36]	; (df4 <startupJingle+0x34>)
     dce:	2050      	movs	r0, #80	; 0x50
     dd0:	47a0      	blx	r4
    beep(300);
     dd2:	0030      	movs	r0, r6
     dd4:	47a8      	blx	r5
    delay_ms(250);
     dd6:	20fa      	movs	r0, #250	; 0xfa
     dd8:	47a0      	blx	r4
    beep(300);
     dda:	0030      	movs	r0, r6
     ddc:	47a8      	blx	r5
    delay_ms(80);
     dde:	2050      	movs	r0, #80	; 0x50
     de0:	47a0      	blx	r4
    beep(300);
     de2:	0030      	movs	r0, r6
     de4:	47a8      	blx	r5
    delay_ms(500);
     de6:	20fa      	movs	r0, #250	; 0xfa
     de8:	0040      	lsls	r0, r0, #1
     dea:	47a0      	blx	r4
}
     dec:	bd70      	pop	{r4, r5, r6, pc}
     dee:	46c0      	nop			; (mov r8, r8)
     df0:	00000d85 	.word	0x00000d85
     df4:	00001015 	.word	0x00001015

00000df8 <unpluggedJingle>:

void unpluggedJingle(){
     df8:	b570      	push	{r4, r5, r6, lr}
            delay_ms(80);
            beep(300);
     dfa:	2696      	movs	r6, #150	; 0x96
    beep(300);
    delay_ms(500);
}

void unpluggedJingle(){
            delay_ms(80);
     dfc:	4c0c      	ldr	r4, [pc, #48]	; (e30 <unpluggedJingle+0x38>)
            beep(300);
     dfe:	0076      	lsls	r6, r6, #1
    beep(300);
    delay_ms(500);
}

void unpluggedJingle(){
            delay_ms(80);
     e00:	2050      	movs	r0, #80	; 0x50
     e02:	47a0      	blx	r4
            beep(300);
     e04:	4d0b      	ldr	r5, [pc, #44]	; (e34 <unpluggedJingle+0x3c>)
     e06:	0030      	movs	r0, r6
     e08:	47a8      	blx	r5
            delay_ms(80);
     e0a:	2050      	movs	r0, #80	; 0x50
     e0c:	47a0      	blx	r4
            beep(300);
     e0e:	0030      	movs	r0, r6
     e10:	47a8      	blx	r5
            delay_ms(80);
     e12:	2050      	movs	r0, #80	; 0x50
     e14:	47a0      	blx	r4
            beep(300);
     e16:	0030      	movs	r0, r6
     e18:	47a8      	blx	r5
            delay_ms(80);
     e1a:	2050      	movs	r0, #80	; 0x50
     e1c:	47a0      	blx	r4
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     e1e:	2280      	movs	r2, #128	; 0x80
     e20:	4b05      	ldr	r3, [pc, #20]	; (e38 <unpluggedJingle+0x40>)
     e22:	0392      	lsls	r2, r2, #14
     e24:	615a      	str	r2, [r3, #20]
     e26:	2280      	movs	r2, #128	; 0x80
     e28:	0352      	lsls	r2, r2, #13
     e2a:	615a      	str	r2, [r3, #20]
            pinLow(buzzerPin);
            pinLow(LedPin);

}
     e2c:	bd70      	pop	{r4, r5, r6, pc}
     e2e:	46c0      	nop			; (mov r8, r8)
     e30:	00001015 	.word	0x00001015
     e34:	00000d85 	.word	0x00000d85
     e38:	41004400 	.word	0x41004400

00000e3c <GclkInit>:
static uint32_t cycles_per_us = 48000000UL / 1000000;

void GclkInit() {


    SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     e3c:	23c2      	movs	r3, #194	; 0xc2
                           SYSCTRL_INTFLAG_DFLLRDY;
    NVMCTRL->CTRLB.reg |= NVMCTRL_CTRLB_RWS_HALF;
     e3e:	2002      	movs	r0, #2


static uint32_t cycles_per_ms = 48000000UL / 1000;
static uint32_t cycles_per_us = 48000000UL / 1000000;

void GclkInit() {
     e40:	b510      	push	{r4, lr}


    SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     e42:	4916      	ldr	r1, [pc, #88]	; (e9c <GclkInit+0x60>)
                           SYSCTRL_INTFLAG_DFLLRDY;
    NVMCTRL->CTRLB.reg |= NVMCTRL_CTRLB_RWS_HALF;
     e44:	4a16      	ldr	r2, [pc, #88]	; (ea0 <GclkInit+0x64>)
static uint32_t cycles_per_us = 48000000UL / 1000000;

void GclkInit() {


    SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     e46:	00db      	lsls	r3, r3, #3
     e48:	608b      	str	r3, [r1, #8]
                           SYSCTRL_INTFLAG_DFLLRDY;
    NVMCTRL->CTRLB.reg |= NVMCTRL_CTRLB_RWS_HALF;
     e4a:	6853      	ldr	r3, [r2, #4]
     e4c:	4303      	orrs	r3, r0
     e4e:	6053      	str	r3, [r2, #4]

#define NVM_DFLL_COARSE_POS    58
#define NVM_DFLL_COARSE_SIZE   6
#define NVM_DFLL_FINE_POS      64
#define NVM_DFLL_FINE_SIZE     10
    uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
     e50:	4b14      	ldr	r3, [pc, #80]	; (ea4 <GclkInit+0x68>)
     e52:	681a      	ldr	r2, [r3, #0]
     e54:	0e92      	lsrs	r2, r2, #26
                         + (NVM_DFLL_COARSE_POS / 32))
                       >> (NVM_DFLL_COARSE_POS % 32))
                     & ((1 << NVM_DFLL_COARSE_SIZE) - 1);
    if (coarse == 0x3f) {
     e56:	2a3f      	cmp	r2, #63	; 0x3f
     e58:	d100      	bne.n	e5c <GclkInit+0x20>
        coarse = 0x1f;
     e5a:	3a20      	subs	r2, #32
    }
    uint32_t fine =( *((uint32_t *)(NVMCTRL_OTP4)
                       + (NVM_DFLL_FINE_POS / 32))
                     >> (NVM_DFLL_FINE_POS % 32))
     e5c:	4b12      	ldr	r3, [pc, #72]	; (ea8 <GclkInit+0x6c>)
                   & ((1 << NVM_DFLL_FINE_SIZE) - 1);
    if (fine == 0x3ff) {
     e5e:	4813      	ldr	r0, [pc, #76]	; (eac <GclkInit+0x70>)
                       >> (NVM_DFLL_COARSE_POS % 32))
                     & ((1 << NVM_DFLL_COARSE_SIZE) - 1);
    if (coarse == 0x3f) {
        coarse = 0x1f;
    }
    uint32_t fine =( *((uint32_t *)(NVMCTRL_OTP4)
     e60:	681b      	ldr	r3, [r3, #0]
     e62:	059b      	lsls	r3, r3, #22
     e64:	0d9b      	lsrs	r3, r3, #22
                       + (NVM_DFLL_FINE_POS / 32))
                     >> (NVM_DFLL_FINE_POS % 32))
                   & ((1 << NVM_DFLL_FINE_SIZE) - 1);
    if (fine == 0x3ff) {
     e66:	4283      	cmp	r3, r0
     e68:	d100      	bne.n	e6c <GclkInit+0x30>
        fine = 0x1ff;
     e6a:	4b11      	ldr	r3, [pc, #68]	; (eb0 <GclkInit+0x74>)
    }


    // Disable ONDEMAND mode while writing configurations (errata 9905)
    SYSCTRL->DFLLCTRL.reg = dfll_ctrl_usb & ~SYSCTRL_DFLLCTRL_ONDEMAND;
     e6c:	4811      	ldr	r0, [pc, #68]	; (eb4 <GclkInit+0x78>)
     e6e:	8488      	strh	r0, [r1, #36]	; 0x24
    while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_DFLLRDY)) == 0);
     e70:	2010      	movs	r0, #16
     e72:	68cc      	ldr	r4, [r1, #12]
     e74:	4204      	tst	r4, r0
     e76:	d0fc      	beq.n	e72 <GclkInit+0x36>
    SYSCTRL->DFLLVAL.reg = SYSCTRL_DFLLVAL_COARSE(coarse) | SYSCTRL_DFLLVAL_FINE(fine);
     e78:	0292      	lsls	r2, r2, #10
     e7a:	4313      	orrs	r3, r2
     e7c:	4a07      	ldr	r2, [pc, #28]	; (e9c <GclkInit+0x60>)
     e7e:	6293      	str	r3, [r2, #40]	; 0x28


    //Wait and see if the DFLL output is good . . .
    while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_DFLLRDY)) == 0);
     e80:	2310      	movs	r3, #16
     e82:	68ca      	ldr	r2, [r1, #12]
     e84:	421a      	tst	r2, r3
     e86:	d0fc      	beq.n	e82 <GclkInit+0x46>


    SYSCTRL->DFLLCTRL.reg = dfll_ctrl_usb;
     e88:	4a0b      	ldr	r2, [pc, #44]	; (eb8 <GclkInit+0x7c>)
     e8a:	4b04      	ldr	r3, [pc, #16]	; (e9c <GclkInit+0x60>)
     e8c:	849a      	strh	r2, [r3, #36]	; 0x24


    //For generic clock generator 0, select the DFLL48 Clock as input
    GCLK->GENDIV.reg  = (GCLK_GENDIV_DIV(1)  | GCLK_GENDIV_ID(0));
     e8e:	2280      	movs	r2, #128	; 0x80
     e90:	4b0a      	ldr	r3, [pc, #40]	; (ebc <GclkInit+0x80>)
     e92:	0052      	lsls	r2, r2, #1
     e94:	609a      	str	r2, [r3, #8]
    GCLK->GENCTRL.reg = (GCLK_GENCTRL_ID(0)  | (GCLK_GENCTRL_SRC_DFLL48M) | (GCLK_GENCTRL_GENEN));
     e96:	4a0a      	ldr	r2, [pc, #40]	; (ec0 <GclkInit+0x84>)
     e98:	605a      	str	r2, [r3, #4]
}
     e9a:	bd10      	pop	{r4, pc}
     e9c:	40000800 	.word	0x40000800
     ea0:	41004000 	.word	0x41004000
     ea4:	00806024 	.word	0x00806024
     ea8:	00806028 	.word	0x00806028
     eac:	000003ff 	.word	0x000003ff
     eb0:	000001ff 	.word	0x000001ff
     eb4:	00000522 	.word	0x00000522
     eb8:	000005a2 	.word	0x000005a2
     ebc:	40000c00 	.word	0x40000c00
     ec0:	00010700 	.word	0x00010700

00000ec4 <RtcInit>:
        //wait for crystal to warm up
        while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_OSC32KRDY)) == 0);

    */

    SYSCTRL->OSC32K.reg = SYSCTRL_OSC32K_ENABLE |
     ec4:	4b27      	ldr	r3, [pc, #156]	; (f64 <RtcInit+0xa0>)
     ec6:	4a28      	ldr	r2, [pc, #160]	; (f68 <RtcInit+0xa4>)
                          SYSCTRL_OSC32K_EN32K |
                          ( 6 << SYSCTRL_OSC32K_STARTUP_Pos);


    SYSCTRL->OSC32K.bit.CALIB =
     ec8:	4828      	ldr	r0, [pc, #160]	; (f6c <RtcInit+0xa8>)
        //wait for crystal to warm up
        while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_OSC32KRDY)) == 0);

    */

    SYSCTRL->OSC32K.reg = SYSCTRL_OSC32K_ENABLE |
     eca:	619a      	str	r2, [r3, #24]
                          SYSCTRL_OSC32K_EN32K |
                          ( 6 << SYSCTRL_OSC32K_STARTUP_Pos);


    SYSCTRL->OSC32K.bit.CALIB =
        ((*(uint32_t *)FUSES_OSC32K_CAL_ADDR >>
     ecc:	4a28      	ldr	r2, [pc, #160]	; (f70 <RtcInit+0xac>)
    SYSCTRL->OSC32K.reg = SYSCTRL_OSC32K_ENABLE |
                          SYSCTRL_OSC32K_EN32K |
                          ( 6 << SYSCTRL_OSC32K_STARTUP_Pos);


    SYSCTRL->OSC32K.bit.CALIB =
     ece:	6999      	ldr	r1, [r3, #24]
     ed0:	6812      	ldr	r2, [r2, #0]
     ed2:	4001      	ands	r1, r0
     ed4:	04d2      	lsls	r2, r2, #19
     ed6:	0e52      	lsrs	r2, r2, #25
     ed8:	0412      	lsls	r2, r2, #16
     eda:	4311      	orrs	r1, r2
     edc:	6199      	str	r1, [r3, #24]
        ((*(uint32_t *)FUSES_OSC32K_CAL_ADDR >>
          FUSES_OSC32K_CAL_Pos) & 0x7Ful);

    SYSCTRL->OSC32K.reg = SYSCTRL_OSC32K_STARTUP( 0x6u ) | // cf table 15.10 of product datasheet in chapter 15.8.6
     ede:	4925      	ldr	r1, [pc, #148]	; (f74 <RtcInit+0xb0>)
     ee0:	6199      	str	r1, [r3, #24]
                          SYSCTRL_OSC32K_EN32K;
    SYSCTRL->OSC32K.bit.CALIB =
     ee2:	6999      	ldr	r1, [r3, #24]
     ee4:	4008      	ands	r0, r1
        ((*(uint32_t *)FUSES_OSC32K_CAL_ADDR >>
          FUSES_OSC32K_CAL_Pos) & 0x7Ful);



    SYSCTRL->OSC32K.bit.ENABLE = 1; // separate call, as described in chapter 15.6.3
     ee6:	2102      	movs	r1, #2
        ((*(uint32_t *)FUSES_OSC32K_CAL_ADDR >>
          FUSES_OSC32K_CAL_Pos) & 0x7Ful);

    SYSCTRL->OSC32K.reg = SYSCTRL_OSC32K_STARTUP( 0x6u ) | // cf table 15.10 of product datasheet in chapter 15.8.6
                          SYSCTRL_OSC32K_EN32K;
    SYSCTRL->OSC32K.bit.CALIB =
     ee8:	4302      	orrs	r2, r0
     eea:	619a      	str	r2, [r3, #24]
        ((*(uint32_t *)FUSES_OSC32K_CAL_ADDR >>
          FUSES_OSC32K_CAL_Pos) & 0x7Ful);



    SYSCTRL->OSC32K.bit.ENABLE = 1; // separate call, as described in chapter 15.6.3
     eec:	699a      	ldr	r2, [r3, #24]
     eee:	430a      	orrs	r2, r1
     ef0:	619a      	str	r2, [r3, #24]

    while (  (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_OSC32KRDY) == 0 ) {
     ef2:	2204      	movs	r2, #4
     ef4:	68d9      	ldr	r1, [r3, #12]
     ef6:	4211      	tst	r1, r2
     ef8:	d0fc      	beq.n	ef4 <RtcInit+0x30>





    GCLK->GENDIV.reg = GCLK_GENDIV_ID(2) | GCLK_GENDIV_DIV(1);
     efa:	2281      	movs	r2, #129	; 0x81
     efc:	4b1e      	ldr	r3, [pc, #120]	; (f78 <RtcInit+0xb4>)
     efe:	0052      	lsls	r2, r2, #1
     f00:	609a      	str	r2, [r3, #8]

    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(2) |
     f02:	4a1e      	ldr	r2, [pc, #120]	; (f7c <RtcInit+0xb8>)
     f04:	605a      	str	r2, [r3, #4]
                        GCLK_GENCTRL_SRC(GCLK_GENCTRL_SRC_OSC32K) |
                        GCLK_GENCTRL_IDC |
                        GCLK_GENCTRL_RUNSTDBY |
                        GCLK_GENCTRL_GENEN;
    while (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY);
     f06:	785a      	ldrb	r2, [r3, #1]
     f08:	b252      	sxtb	r2, r2
     f0a:	2a00      	cmp	r2, #0
     f0c:	dbfb      	blt.n	f06 <RtcInit+0x42>

// Configure RTC
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(RTC_GCLK_ID) |
     f0e:	4a1c      	ldr	r2, [pc, #112]	; (f80 <RtcInit+0xbc>)
     f10:	4b19      	ldr	r3, [pc, #100]	; (f78 <RtcInit+0xb4>)
     f12:	805a      	strh	r2, [r3, #2]
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    RTC->MODE1.CTRL.reg = RTC_MODE1_CTRL_MODE_COUNT16;
     f14:	2204      	movs	r2, #4
     f16:	4b1b      	ldr	r3, [pc, #108]	; (f84 <RtcInit+0xc0>)
     f18:	801a      	strh	r2, [r3, #0]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     f1a:	7a9a      	ldrb	r2, [r3, #10]
     f1c:	4919      	ldr	r1, [pc, #100]	; (f84 <RtcInit+0xc0>)
     f1e:	09d2      	lsrs	r2, r2, #7
     f20:	d1fb      	bne.n	f1a <RtcInit+0x56>

// Prescaler needs to be enabled separately from the mode for some reason
    RTC->MODE1.CTRL.reg |= RTC_MODE1_CTRL_PRESCALER_DIV32;
     f22:	20a0      	movs	r0, #160	; 0xa0
     f24:	880a      	ldrh	r2, [r1, #0]
     f26:	00c0      	lsls	r0, r0, #3
     f28:	4302      	orrs	r2, r0
     f2a:	800a      	strh	r2, [r1, #0]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     f2c:	7a9a      	ldrb	r2, [r3, #10]
     f2e:	09d2      	lsrs	r2, r2, #7
     f30:	d1fc      	bne.n	f2c <RtcInit+0x68>

    RTC->MODE1.PER.reg = 998;
     f32:	4915      	ldr	r1, [pc, #84]	; (f88 <RtcInit+0xc4>)
     f34:	4a13      	ldr	r2, [pc, #76]	; (f84 <RtcInit+0xc0>)
     f36:	8291      	strh	r1, [r2, #20]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     f38:	7a99      	ldrb	r1, [r3, #10]
     f3a:	4a12      	ldr	r2, [pc, #72]	; (f84 <RtcInit+0xc0>)
     f3c:	09c9      	lsrs	r1, r1, #7
     f3e:	d1fb      	bne.n	f38 <RtcInit+0x74>

    RTC->MODE1.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_ADDR(0x10);
     f40:	8851      	ldrh	r1, [r2, #2]
     f42:	4812      	ldr	r0, [pc, #72]	; (f8c <RtcInit+0xc8>)
     f44:	4301      	orrs	r1, r0
     f46:	8051      	strh	r1, [r2, #2]

    RTC->MODE1.INTENSET.reg = RTC_MODE1_INTENSET_OVF;
     f48:	2180      	movs	r1, #128	; 0x80

    RTC->MODE1.CTRL.bit.ENABLE = 1;
     f4a:	2002      	movs	r0, #2
    RTC->MODE1.PER.reg = 998;
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);

    RTC->MODE1.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_ADDR(0x10);

    RTC->MODE1.INTENSET.reg = RTC_MODE1_INTENSET_OVF;
     f4c:	71d1      	strb	r1, [r2, #7]

    RTC->MODE1.CTRL.bit.ENABLE = 1;
     f4e:	8811      	ldrh	r1, [r2, #0]
     f50:	4301      	orrs	r1, r0
     f52:	8011      	strh	r1, [r2, #0]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     f54:	7a9a      	ldrb	r2, [r3, #10]
     f56:	09d2      	lsrs	r2, r2, #7
     f58:	d1fc      	bne.n	f54 <RtcInit+0x90>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     f5a:	4b0d      	ldr	r3, [pc, #52]	; (f90 <RtcInit+0xcc>)
     f5c:	3208      	adds	r2, #8
     f5e:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(RTC_IRQn);
}
     f60:	4770      	bx	lr
     f62:	46c0      	nop			; (mov r8, r8)
     f64:	40000800 	.word	0x40000800
     f68:	00000606 	.word	0x00000606
     f6c:	ff80ffff 	.word	0xff80ffff
     f70:	00806024 	.word	0x00806024
     f74:	00000604 	.word	0x00000604
     f78:	40000c00 	.word	0x40000c00
     f7c:	00230002 	.word	0x00230002
     f80:	00004204 	.word	0x00004204
     f84:	40001400 	.word	0x40001400
     f88:	000003e6 	.word	0x000003e6
     f8c:	00004010 	.word	0x00004010
     f90:	e000e100 	.word	0xe000e100

00000f94 <gclkEnable>:


void gclkEnable(u32_t id, u32_t src, u32_t div) {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
     f94:	230f      	movs	r3, #15
     f96:	4018      	ands	r0, r3
     f98:	4b08      	ldr	r3, [pc, #32]	; (fbc <gclkEnable+0x28>)
     f9a:	0212      	lsls	r2, r2, #8
     f9c:	401a      	ands	r2, r3
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     f9e:	23f8      	movs	r3, #248	; 0xf8
     fa0:	0209      	lsls	r1, r1, #8
     fa2:	015b      	lsls	r3, r3, #5
     fa4:	4019      	ands	r1, r3
     fa6:	2380      	movs	r3, #128	; 0x80

    NVIC_EnableIRQ(RTC_IRQn);
}


void gclkEnable(u32_t id, u32_t src, u32_t div) {
     fa8:	b510      	push	{r4, lr}
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     faa:	025b      	lsls	r3, r3, #9
    NVIC_EnableIRQ(RTC_IRQn);
}


void gclkEnable(u32_t id, u32_t src, u32_t div) {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
     fac:	4c04      	ldr	r4, [pc, #16]	; (fc0 <gclkEnable+0x2c>)
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     fae:	4319      	orrs	r1, r3
    NVIC_EnableIRQ(RTC_IRQn);
}


void gclkEnable(u32_t id, u32_t src, u32_t div) {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
     fb0:	4302      	orrs	r2, r0
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     fb2:	4308      	orrs	r0, r1
    NVIC_EnableIRQ(RTC_IRQn);
}


void gclkEnable(u32_t id, u32_t src, u32_t div) {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
     fb4:	60a2      	str	r2, [r4, #8]
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     fb6:	6060      	str	r0, [r4, #4]
}
     fb8:	bd10      	pop	{r4, pc}
     fba:	46c0      	nop			; (mov r8, r8)
     fbc:	00ffff00 	.word	0x00ffff00
     fc0:	40000c00 	.word	0x40000c00

00000fc4 <delayInit>:


void delayInit(void) {
    cycles_per_ms = 48000000UL;
    cycles_per_ms /= 1000;
     fc4:	4b04      	ldr	r3, [pc, #16]	; (fd8 <delayInit+0x14>)
     fc6:	4a05      	ldr	r2, [pc, #20]	; (fdc <delayInit+0x18>)
     fc8:	601a      	str	r2, [r3, #0]
    cycles_per_us = cycles_per_ms / 1000;
     fca:	2230      	movs	r2, #48	; 0x30
     fcc:	605a      	str	r2, [r3, #4]

    SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     fce:	4b04      	ldr	r3, [pc, #16]	; (fe0 <delayInit+0x1c>)
     fd0:	3a2b      	subs	r2, #43	; 0x2b
     fd2:	601a      	str	r2, [r3, #0]
}
     fd4:	4770      	bx	lr
     fd6:	46c0      	nop			; (mov r8, r8)
     fd8:	20000004 	.word	0x20000004
     fdc:	0000bb80 	.word	0x0000bb80
     fe0:	e000e010 	.word	0xe000e010

00000fe4 <delay_us>:
/**
 * \brief Delay loop to delay at least n number of microseconds
 *
 * \param n  Number of microseconds to wait
 */
void delay_us(uint32_t n) {
     fe4:	b570      	push	{r4, r5, r6, lr}
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
        SysTick->VAL = 0;

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     fe6:	2480      	movs	r4, #128	; 0x80

static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
        SysTick->VAL = 0;
     fe8:	2100      	movs	r1, #0
    while (n--) {
        /* Devide up to blocks of 10u */
        delay_cycles(cycles_per_us);
     fea:	4b08      	ldr	r3, [pc, #32]	; (100c <delay_us+0x28>)


static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
     fec:	4a08      	ldr	r2, [pc, #32]	; (1010 <delay_us+0x2c>)
     fee:	685b      	ldr	r3, [r3, #4]
        SysTick->VAL = 0;

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     ff0:	0264      	lsls	r4, r4, #9
 * \brief Delay loop to delay at least n number of microseconds
 *
 * \param n  Number of microseconds to wait
 */
void delay_us(uint32_t n) {
    while (n--) {
     ff2:	3801      	subs	r0, #1
     ff4:	d308      	bcc.n	1008 <delay_us+0x24>



static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
     ff6:	2b00      	cmp	r3, #0
     ff8:	d0fb      	beq.n	ff2 <delay_us+0xe>
     ffa:	4e05      	ldr	r6, [pc, #20]	; (1010 <delay_us+0x2c>)
        SysTick->LOAD = n;
     ffc:	6053      	str	r3, [r2, #4]
        SysTick->VAL = 0;
     ffe:	6091      	str	r1, [r2, #8]

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    1000:	6835      	ldr	r5, [r6, #0]
    1002:	4225      	tst	r5, r4
    1004:	d0fc      	beq.n	1000 <delay_us+0x1c>
    1006:	e7f4      	b.n	ff2 <delay_us+0xe>
        /* Devide up to blocks of 10u */
        delay_cycles(cycles_per_us);
    }
}
    1008:	bd70      	pop	{r4, r5, r6, pc}
    100a:	46c0      	nop			; (mov r8, r8)
    100c:	20000004 	.word	0x20000004
    1010:	e000e010 	.word	0xe000e010

00001014 <delay_ms>:
/**
 * \brief Delay loop to delay at least n number of milliseconds
 *
 * \param n  Number of milliseconds to wait
 */
void delay_ms(uint32_t n) {
    1014:	b570      	push	{r4, r5, r6, lr}
    1016:	2480      	movs	r4, #128	; 0x80

static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
        SysTick->VAL = 0;
    1018:	2100      	movs	r1, #0
    while (n--) {
        /* Devide up to blocks of 1ms */
        delay_cycles(cycles_per_ms);
    101a:	4b08      	ldr	r3, [pc, #32]	; (103c <delay_ms+0x28>)


static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
    101c:	4a08      	ldr	r2, [pc, #32]	; (1040 <delay_ms+0x2c>)
    101e:	681b      	ldr	r3, [r3, #0]
        SysTick->VAL = 0;

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    1020:	0264      	lsls	r4, r4, #9
 * \brief Delay loop to delay at least n number of milliseconds
 *
 * \param n  Number of milliseconds to wait
 */
void delay_ms(uint32_t n) {
    while (n--) {
    1022:	3801      	subs	r0, #1
    1024:	d308      	bcc.n	1038 <delay_ms+0x24>



static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
    1026:	2b00      	cmp	r3, #0
    1028:	d0fb      	beq.n	1022 <delay_ms+0xe>
    102a:	4e05      	ldr	r6, [pc, #20]	; (1040 <delay_ms+0x2c>)
        SysTick->LOAD = n;
    102c:	6053      	str	r3, [r2, #4]
        SysTick->VAL = 0;
    102e:	6091      	str	r1, [r2, #8]

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    1030:	6835      	ldr	r5, [r6, #0]
    1032:	4225      	tst	r5, r4
    1034:	d0fc      	beq.n	1030 <delay_ms+0x1c>
    1036:	e7f4      	b.n	1022 <delay_ms+0xe>
        /* Devide up to blocks of 1ms */
        delay_cycles(cycles_per_ms);
    }
}
    1038:	bd70      	pop	{r4, r5, r6, pc}
    103a:	46c0      	nop			; (mov r8, r8)
    103c:	20000004 	.word	0x20000004
    1040:	e000e010 	.word	0xe000e010

00001044 <RTC_Handler>:


volatile uint32_t time_ms = 0;

void RTC_Handler(void) {
    time_ms += 1000;
    1044:	21fa      	movs	r1, #250	; 0xfa
    1046:	4a04      	ldr	r2, [pc, #16]	; (1058 <RTC_Handler+0x14>)
    1048:	0089      	lsls	r1, r1, #2
    104a:	6813      	ldr	r3, [r2, #0]
    104c:	185b      	adds	r3, r3, r1
    104e:	6013      	str	r3, [r2, #0]
    RTC->MODE1.INTFLAG.reg = 0xFF;
    1050:	22ff      	movs	r2, #255	; 0xff
    1052:	4b02      	ldr	r3, [pc, #8]	; (105c <RTC_Handler+0x18>)
    1054:	721a      	strb	r2, [r3, #8]
}
    1056:	4770      	bx	lr
    1058:	200004c4 	.word	0x200004c4
    105c:	40001400 	.word	0x40001400

00001060 <millis>:

uint32_t millis(void) {
    1060:	b530      	push	{r4, r5, lr}
    uint32_t ms;
    ATOMIC_SECTION_ENTER
    1062:	f3ef 8110 	mrs	r1, PRIMASK
    1066:	b672      	cpsid	i
    ms = time_ms + RTC->MODE1.COUNT.reg;
    1068:	4a08      	ldr	r2, [pc, #32]	; (108c <millis+0x2c>)
    106a:	4d09      	ldr	r5, [pc, #36]	; (1090 <millis+0x30>)
    106c:	8a10      	ldrh	r0, [r2, #16]
    106e:	682b      	ldr	r3, [r5, #0]
    if (RTC->MODE1.INTFLAG.bit.OVF)
    1070:	7a14      	ldrb	r4, [r2, #8]
}

uint32_t millis(void) {
    uint32_t ms;
    ATOMIC_SECTION_ENTER
    ms = time_ms + RTC->MODE1.COUNT.reg;
    1072:	b280      	uxth	r0, r0
    if (RTC->MODE1.INTFLAG.bit.OVF)
    1074:	09e4      	lsrs	r4, r4, #7
    1076:	d004      	beq.n	1082 <millis+0x22>
        ms = time_ms + RTC->MODE1.COUNT.reg + 1000;
    1078:	8a13      	ldrh	r3, [r2, #16]
    107a:	22fa      	movs	r2, #250	; 0xfa
    107c:	6828      	ldr	r0, [r5, #0]
    107e:	0092      	lsls	r2, r2, #2
    1080:	1880      	adds	r0, r0, r2
    1082:	18c0      	adds	r0, r0, r3
    ATOMIC_SECTION_LEAVE
    1084:	f381 8810 	msr	PRIMASK, r1
    return ms;
}
    1088:	bd30      	pop	{r4, r5, pc}
    108a:	46c0      	nop			; (mov r8, r8)
    108c:	40001400 	.word	0x40001400
    1090:	200004c4 	.word	0x200004c4

00001094 <TC4Init>:

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC4_GCLK_ID) |
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC4;
    1094:	2180      	movs	r1, #128	; 0x80
    return ms;
}

void TC4Init() {

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC4_GCLK_ID) |
    1096:	4a0d      	ldr	r2, [pc, #52]	; (10cc <TC4Init+0x38>)
    1098:	4b0d      	ldr	r3, [pc, #52]	; (10d0 <TC4Init+0x3c>)
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC4;
    109a:	0149      	lsls	r1, r1, #5
    return ms;
}

void TC4Init() {

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC4_GCLK_ID) |
    109c:	805a      	strh	r2, [r3, #2]
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC4;
    109e:	4a0d      	ldr	r2, [pc, #52]	; (10d4 <TC4Init+0x40>)
    10a0:	6a13      	ldr	r3, [r2, #32]
    10a2:	430b      	orrs	r3, r1
    10a4:	6213      	str	r3, [r2, #32]

    TC4->COUNT8.CTRLA.reg = TC_CTRLA_MODE_COUNT8 |
    10a6:	4b0c      	ldr	r3, [pc, #48]	; (10d8 <TC4Init+0x44>)
    10a8:	4a0c      	ldr	r2, [pc, #48]	; (10dc <TC4Init+0x48>)

    TC4->COUNT8.INTENSET.reg = TC_INTENSET_OVF;

    TC4->COUNT8.EVCTRL.reg = TC_EVCTRL_OVFEO;

    TC4->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
    10aa:	2102      	movs	r1, #2
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC4;

    TC4->COUNT8.CTRLA.reg = TC_CTRLA_MODE_COUNT8 |
    10ac:	801a      	strh	r2, [r3, #0]
                            TC_CTRLA_RUNSTDBY |
                            TC_CTRLA_PRESCALER_DIV2;
    TC4->COUNT8.PER.reg = 0x50;
    10ae:	2250      	movs	r2, #80	; 0x50
    10b0:	751a      	strb	r2, [r3, #20]

    TC4->COUNT8.INTENSET.reg = TC_INTENSET_OVF;
    10b2:	3a4f      	subs	r2, #79	; 0x4f
    10b4:	735a      	strb	r2, [r3, #13]

    TC4->COUNT8.EVCTRL.reg = TC_EVCTRL_OVFEO;
    10b6:	32ff      	adds	r2, #255	; 0xff
    10b8:	815a      	strh	r2, [r3, #10]

    TC4->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
    10ba:	881a      	ldrh	r2, [r3, #0]
    10bc:	430a      	orrs	r2, r1
    10be:	801a      	strh	r2, [r3, #0]
    10c0:	2280      	movs	r2, #128	; 0x80
    10c2:	4b07      	ldr	r3, [pc, #28]	; (10e0 <TC4Init+0x4c>)
    10c4:	0312      	lsls	r2, r2, #12
    10c6:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(TC4_IRQn);
}
    10c8:	4770      	bx	lr
    10ca:	46c0      	nop			; (mov r8, r8)
    10cc:	0000421c 	.word	0x0000421c
    10d0:	40000c00 	.word	0x40000c00
    10d4:	40000400 	.word	0x40000400
    10d8:	42003000 	.word	0x42003000
    10dc:	00000904 	.word	0x00000904
    10e0:	e000e100 	.word	0xe000e100

000010e4 <TC4_Handler>:

void TC4_Handler( void ) {
    TC4->COUNT8.INTFLAG.reg = 0xFF;
    10e4:	22ff      	movs	r2, #255	; 0xff
    TC4->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;

    NVIC_EnableIRQ(TC4_IRQn);
}

void TC4_Handler( void ) {
    10e6:	b510      	push	{r4, lr}
    TC4->COUNT8.INTFLAG.reg = 0xFF;
    10e8:	4b02      	ldr	r3, [pc, #8]	; (10f4 <TC4_Handler+0x10>)
    10ea:	739a      	strb	r2, [r3, #14]
    //pinToggle(TxPo);
    pullSample();
    10ec:	4b02      	ldr	r3, [pc, #8]	; (10f8 <TC4_Handler+0x14>)
    10ee:	4798      	blx	r3
}
    10f0:	bd10      	pop	{r4, pc}
    10f2:	46c0      	nop			; (mov r8, r8)
    10f4:	42003000 	.word	0x42003000
    10f8:	000023ed 	.word	0x000023ed

000010fc <TC5Init>:

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC5_GCLK_ID) |
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC5;
    10fc:	2180      	movs	r1, #128	; 0x80
    pullSample();
}

void TC5Init() {

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC5_GCLK_ID) |
    10fe:	4a0d      	ldr	r2, [pc, #52]	; (1134 <TC5Init+0x38>)
    1100:	4b0d      	ldr	r3, [pc, #52]	; (1138 <TC5Init+0x3c>)
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC5;
    1102:	0189      	lsls	r1, r1, #6
    pullSample();
}

void TC5Init() {

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC5_GCLK_ID) |
    1104:	805a      	strh	r2, [r3, #2]
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC5;
    1106:	4a0d      	ldr	r2, [pc, #52]	; (113c <TC5Init+0x40>)
    1108:	6a13      	ldr	r3, [r2, #32]
    110a:	430b      	orrs	r3, r1
    110c:	6213      	str	r3, [r2, #32]

    TC5->COUNT8.CTRLA.reg = TC_CTRLA_MODE_COUNT8 |
    110e:	4b0c      	ldr	r3, [pc, #48]	; (1140 <TC5Init+0x44>)
    1110:	4a0c      	ldr	r2, [pc, #48]	; (1144 <TC5Init+0x48>)

    TC5->COUNT8.INTENSET.reg = TC_INTENSET_OVF;

    TC5->COUNT8.EVCTRL.reg = TC_EVCTRL_OVFEO;

    TC5->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
    1112:	2102      	movs	r1, #2
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC5;

    TC5->COUNT8.CTRLA.reg = TC_CTRLA_MODE_COUNT8 |
    1114:	801a      	strh	r2, [r3, #0]
                            TC_CTRLA_PRESCALER_DIV16;

    u16_t logSpeed = 20; //Hz
    u8_t PER_Reg = (long)((32768/16) / logSpeed);

    TC5->COUNT8.PER.reg = PER_Reg;
    1116:	2266      	movs	r2, #102	; 0x66
    1118:	751a      	strb	r2, [r3, #20]

    TC5->COUNT8.INTENSET.reg = TC_INTENSET_OVF;
    111a:	3a65      	subs	r2, #101	; 0x65
    111c:	735a      	strb	r2, [r3, #13]

    TC5->COUNT8.EVCTRL.reg = TC_EVCTRL_OVFEO;
    111e:	32ff      	adds	r2, #255	; 0xff
    1120:	815a      	strh	r2, [r3, #10]

    TC5->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
    1122:	881a      	ldrh	r2, [r3, #0]
    1124:	430a      	orrs	r2, r1
    1126:	801a      	strh	r2, [r3, #0]
    1128:	2280      	movs	r2, #128	; 0x80
    112a:	4b07      	ldr	r3, [pc, #28]	; (1148 <TC5Init+0x4c>)
    112c:	0352      	lsls	r2, r2, #13
    112e:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(TC5_IRQn);
}
    1130:	4770      	bx	lr
    1132:	46c0      	nop			; (mov r8, r8)
    1134:	0000421c 	.word	0x0000421c
    1138:	40000c00 	.word	0x40000c00
    113c:	40000400 	.word	0x40000400
    1140:	42003400 	.word	0x42003400
    1144:	00000c04 	.word	0x00000c04
    1148:	e000e100 	.word	0xe000e100

0000114c <TC5_Handler>:

void TC5_Handler( void ) {
    TC5->COUNT8.INTFLAG.reg = 0xFF;
    114c:	22ff      	movs	r2, #255	; 0xff
    114e:	4b03      	ldr	r3, [pc, #12]	; (115c <TC5_Handler+0x10>)
    1150:	739a      	strb	r2, [r3, #14]
    

    writeLog = true;
    1152:	4b03      	ldr	r3, [pc, #12]	; (1160 <TC5_Handler+0x14>)
    1154:	3afe      	subs	r2, #254	; 0xfe
    1156:	701a      	strb	r2, [r3, #0]
}
    1158:	4770      	bx	lr
    115a:	46c0      	nop			; (mov r8, r8)
    115c:	42003400 	.word	0x42003400
    1160:	20000520 	.word	0x20000520

00001164 <flight>:
#include <boardDefines.h>

flightState_t flightState;


void flight() {
    1164:	b570      	push	{r4, r5, r6, lr}


    switch(flightState) {
    1166:	4c4c      	ldr	r4, [pc, #304]	; (1298 <flight+0x134>)
    1168:	7820      	ldrb	r0, [r4, #0]
    116a:	280a      	cmp	r0, #10
    116c:	d900      	bls.n	1170 <flight+0xc>
    116e:	e082      	b.n	1276 <flight+0x112>
    1170:	f002 fcf0 	bl	3b54 <__gnu_thumb1_case_uqi>
    1174:	53342306 	.word	0x53342306
    1178:	81818181 	.word	0x81818181
    117c:	8181      	.short	0x8181
    117e:	6d          	.byte	0x6d
    117f:	00          	.byte	0x00
    case flightStatrup:

        updateGround( );
    1180:	4b46      	ldr	r3, [pc, #280]	; (129c <flight+0x138>)
    1182:	4798      	blx	r3

        //logSensors( );

        if ((millis() - startupTick) > 10000) {
    1184:	4b46      	ldr	r3, [pc, #280]	; (12a0 <flight+0x13c>)
    1186:	4798      	blx	r3
    1188:	4b46      	ldr	r3, [pc, #280]	; (12a4 <flight+0x140>)
    118a:	681b      	ldr	r3, [r3, #0]
    118c:	1ac0      	subs	r0, r0, r3
    118e:	4b46      	ldr	r3, [pc, #280]	; (12a8 <flight+0x144>)
    1190:	4298      	cmp	r0, r3
    1192:	d908      	bls.n	11a6 <flight+0x42>
            findNewFlightStart( );
    1194:	4b45      	ldr	r3, [pc, #276]	; (12ac <flight+0x148>)
    1196:	4798      	blx	r3
            logFlight( );
    1198:	4b45      	ldr	r3, [pc, #276]	; (12b0 <flight+0x14c>)
    119a:	4798      	blx	r3
            startupJingle();
    119c:	4b45      	ldr	r3, [pc, #276]	; (12b4 <flight+0x150>)
    119e:	4798      	blx	r3
            flightState = flightTest;
    11a0:	230a      	movs	r3, #10
    11a2:	7023      	strb	r3, [r4, #0]
            //flightState = flightPad;
            break;
    11a4:	e067      	b.n	1276 <flight+0x112>
        }

        attemptConnection();
    11a6:	4b44      	ldr	r3, [pc, #272]	; (12b8 <flight+0x154>)
    11a8:	4798      	blx	r3

        if (unplugged()) {
    11aa:	4b44      	ldr	r3, [pc, #272]	; (12bc <flight+0x158>)
    11ac:	4798      	blx	r3
    11ae:	2800      	cmp	r0, #0
    11b0:	d061      	beq.n	1276 <flight+0x112>
            flightState = flightIdle;
    11b2:	2301      	movs	r3, #1
    11b4:	7023      	strb	r3, [r4, #0]
            unpluggedJingle();
    11b6:	4b42      	ldr	r3, [pc, #264]	; (12c0 <flight+0x15c>)
    11b8:	e05c      	b.n	1274 <flight+0x110>
        //TC5->COUNT8.CTRLA.reg = 0;

        //delay_ms(1000);
        //pinToggle(LedPin);

        if (sercom(USART3)->SPI.INTFLAG.bit.RXC == 1) {
    11ba:	4b42      	ldr	r3, [pc, #264]	; (12c4 <flight+0x160>)
    11bc:	7e1b      	ldrb	r3, [r3, #24]
    11be:	075b      	lsls	r3, r3, #29
    11c0:	d567      	bpl.n	1292 <flight+0x12e>
            u8_t possibleReset = usartDataIn(USART3);
    11c2:	2003      	movs	r0, #3
    11c4:	4b40      	ldr	r3, [pc, #256]	; (12c8 <flight+0x164>)
    11c6:	4798      	blx	r3
            if (possibleReset == 0x52) {
    11c8:	2852      	cmp	r0, #82	; 0x52
    11ca:	d154      	bne.n	1276 <flight+0x112>
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
    11cc:	f3bf 8f4f 	dsb	sy
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
    11d0:	4a3e      	ldr	r2, [pc, #248]	; (12cc <flight+0x168>)
    11d2:	4b3f      	ldr	r3, [pc, #252]	; (12d0 <flight+0x16c>)
    11d4:	60da      	str	r2, [r3, #12]
    11d6:	f3bf 8f4f 	dsb	sy
    11da:	e7fe      	b.n	11da <flight+0x76>
        *  Accel > 2g & vel > 5m/s
        *		 or
        *  baro alt > 40ft
        */

        updateGround();
    11dc:	4b2f      	ldr	r3, [pc, #188]	; (129c <flight+0x138>)
    11de:	4798      	blx	r3

        if (writeLog) {
    11e0:	4b3c      	ldr	r3, [pc, #240]	; (12d4 <flight+0x170>)
    11e2:	781a      	ldrb	r2, [r3, #0]
    11e4:	2a00      	cmp	r2, #0
    11e6:	d005      	beq.n	11f4 <flight+0x90>
            writeLog = false;
    11e8:	2200      	movs	r2, #0
    11ea:	701a      	strb	r2, [r3, #0]
}


inline static void pinToggle(Pin p) {
    PORT->Group[p.group].OUTTGL.reg = (1<<p.pin);
    11ec:	2280      	movs	r2, #128	; 0x80
    11ee:	4b3a      	ldr	r3, [pc, #232]	; (12d8 <flight+0x174>)
    11f0:	0352      	lsls	r2, r2, #13
    11f2:	61da      	str	r2, [r3, #28]
            //logSensors( );
            pinToggle(LedPin);
        }

        if (( velocity > 0.05) && (altitudeAGL() > 5)) {
    11f4:	4939      	ldr	r1, [pc, #228]	; (12dc <flight+0x178>)
    11f6:	4a3a      	ldr	r2, [pc, #232]	; (12e0 <flight+0x17c>)
    11f8:	4b3a      	ldr	r3, [pc, #232]	; (12e4 <flight+0x180>)
    11fa:	6808      	ldr	r0, [r1, #0]
    11fc:	6849      	ldr	r1, [r1, #4]
    11fe:	4d3a      	ldr	r5, [pc, #232]	; (12e8 <flight+0x184>)
    1200:	47a8      	blx	r5
    1202:	2800      	cmp	r0, #0
    1204:	d037      	beq.n	1276 <flight+0x112>
    1206:	4b39      	ldr	r3, [pc, #228]	; (12ec <flight+0x188>)
    1208:	4798      	blx	r3
    120a:	2805      	cmp	r0, #5
    120c:	dd33      	ble.n	1276 <flight+0x112>
            flightState = flightBoost;
    120e:	2303      	movs	r3, #3
            logEvent('L');
    1210:	204c      	movs	r0, #76	; 0x4c
            //logSensors( );
            pinToggle(LedPin);
        }

        if (( velocity > 0.05) && (altitudeAGL() > 5)) {
            flightState = flightBoost;
    1212:	7023      	strb	r3, [r4, #0]
            logEvent('L');
    1214:	4b36      	ldr	r3, [pc, #216]	; (12f0 <flight+0x18c>)
    1216:	4798      	blx	r3
    1218:	e02d      	b.n	1276 <flight+0x112>
        /*
        *	boost to fast
        *		while
        *	Accel > 1/4G
        */
        if (writeLog) {
    121a:	4b2e      	ldr	r3, [pc, #184]	; (12d4 <flight+0x170>)
    121c:	781a      	ldrb	r2, [r3, #0]
    121e:	2a00      	cmp	r2, #0
    1220:	d003      	beq.n	122a <flight+0xc6>
            writeLog = false;
    1222:	2200      	movs	r2, #0
    1224:	701a      	strb	r2, [r3, #0]
            logSensors( );
    1226:	4b33      	ldr	r3, [pc, #204]	; (12f4 <flight+0x190>)
    1228:	4798      	blx	r3
        }

        if (velocity < 0) {
    122a:	492c      	ldr	r1, [pc, #176]	; (12dc <flight+0x178>)
    122c:	2200      	movs	r2, #0
    122e:	6808      	ldr	r0, [r1, #0]
    1230:	6849      	ldr	r1, [r1, #4]
    1232:	2300      	movs	r3, #0
    1234:	4d30      	ldr	r5, [pc, #192]	; (12f8 <flight+0x194>)
    1236:	47a8      	blx	r5
    1238:	2800      	cmp	r0, #0
    123a:	d01c      	beq.n	1276 <flight+0x112>
            flightState = flightDrogue;
    123c:	2306      	movs	r3, #6
            logEvent('A');
    123e:	2041      	movs	r0, #65	; 0x41
            writeLog = false;
            logSensors( );
        }

        if (velocity < 0) {
            flightState = flightDrogue;
    1240:	7023      	strb	r3, [r4, #0]
            logEvent('A');
    1242:	4b2b      	ldr	r3, [pc, #172]	; (12f0 <flight+0x18c>)
    1244:	4798      	blx	r3
            beep(100);
    1246:	2064      	movs	r0, #100	; 0x64
    1248:	4b2c      	ldr	r3, [pc, #176]	; (12fc <flight+0x198>)
    124a:	4798      	blx	r3
    124c:	e013      	b.n	1276 <flight+0x112>


        break;
    case flightTest:
           //simple continuity test
           if ( (sample.voltage.senseA + sample.voltage.senseB +sample.voltage.senseC +sample.voltage.senseD) > 200) {
    124e:	4b2c      	ldr	r3, [pc, #176]	; (1300 <flight+0x19c>)
    1250:	8a5a      	ldrh	r2, [r3, #18]
    1252:	8a19      	ldrh	r1, [r3, #16]
    1254:	1889      	adds	r1, r1, r2
    1256:	8a9a      	ldrh	r2, [r3, #20]
    1258:	1889      	adds	r1, r1, r2
    125a:	8ada      	ldrh	r2, [r3, #22]
    125c:	188b      	adds	r3, r1, r2
    125e:	2bc8      	cmp	r3, #200	; 0xc8
    1260:	dd01      	ble.n	1266 <flight+0x102>
               unpluggedJingle();
    1262:	4b17      	ldr	r3, [pc, #92]	; (12c0 <flight+0x15c>)
    1264:	4798      	blx	r3
           }
        
        if (writeLog) {
    1266:	4b1b      	ldr	r3, [pc, #108]	; (12d4 <flight+0x170>)
    1268:	781a      	ldrb	r2, [r3, #0]
    126a:	2a00      	cmp	r2, #0
    126c:	d003      	beq.n	1276 <flight+0x112>
            writeLog = false;
    126e:	2200      	movs	r2, #0
    1270:	701a      	strb	r2, [r3, #0]
            logSensors( ); 
    1272:	4b20      	ldr	r3, [pc, #128]	; (12f4 <flight+0x190>)
    1274:	4798      	blx	r3
        }
	
        break;
    }

    if (flightState != flightStatrup & flightState != flightIdle & unplugged()) {
    1276:	2301      	movs	r3, #1
    1278:	7824      	ldrb	r4, [r4, #0]
    127a:	42a3      	cmp	r3, r4
    127c:	41a4      	sbcs	r4, r4
    127e:	4b0f      	ldr	r3, [pc, #60]	; (12bc <flight+0x158>)
    1280:	4264      	negs	r4, r4
    1282:	4798      	blx	r3
    1284:	2c00      	cmp	r4, #0
    1286:	d006      	beq.n	1296 <flight+0x132>
    1288:	2800      	cmp	r0, #0
    128a:	d004      	beq.n	1296 <flight+0x132>
        finishFlight();
    128c:	4b1d      	ldr	r3, [pc, #116]	; (1304 <flight+0x1a0>)
    128e:	4798      	blx	r3
    }

    1290:	e001      	b.n	1296 <flight+0x132>
        }
	
        break;
    }

    if (flightState != flightStatrup & flightState != flightIdle & unplugged()) {
    1292:	4b0a      	ldr	r3, [pc, #40]	; (12bc <flight+0x158>)
    1294:	4798      	blx	r3
        finishFlight();
    }

    1296:	bd70      	pop	{r4, r5, r6, pc}
    1298:	20000684 	.word	0x20000684
    129c:	00001309 	.word	0x00001309
    12a0:	00001061 	.word	0x00001061
    12a4:	20000524 	.word	0x20000524
    12a8:	00002710 	.word	0x00002710
    12ac:	0000232d 	.word	0x0000232d
    12b0:	00002051 	.word	0x00002051
    12b4:	00000dc1 	.word	0x00000dc1
    12b8:	00002845 	.word	0x00002845
    12bc:	00000b5d 	.word	0x00000b5d
    12c0:	00000df9 	.word	0x00000df9
    12c4:	42001400 	.word	0x42001400
    12c8:	00002835 	.word	0x00002835
    12cc:	05fa0004 	.word	0x05fa0004
    12d0:	e000ed00 	.word	0xe000ed00
    12d4:	20000520 	.word	0x20000520
    12d8:	41004400 	.word	0x41004400
    12dc:	20000690 	.word	0x20000690
    12e0:	9999999a 	.word	0x9999999a
    12e4:	3fa99999 	.word	0x3fa99999
    12e8:	00003bbd 	.word	0x00003bbd
    12ec:	00000b29 	.word	0x00000b29
    12f0:	000020ad 	.word	0x000020ad
    12f4:	00002101 	.word	0x00002101
    12f8:	00003b95 	.word	0x00003b95
    12fc:	00000d85 	.word	0x00000d85
    1300:	200007c8 	.word	0x200007c8
    1304:	00000b91 	.word	0x00000b91

00001308 <updateGround>:
#include <util.h>
#include <altimeter.h>

void updateGround(Altimeter *my_altimeter) {
    1308:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}



    offsets.gravityOffsetBuffer = offsets.gravityOffsetBuffer * 0.8 + sample.accelZ * 0.2;
    130a:	4c2b      	ldr	r4, [pc, #172]	; (13b8 <updateGround+0xb0>)
    130c:	4d2b      	ldr	r5, [pc, #172]	; (13bc <updateGround+0xb4>)
    130e:	4a2c      	ldr	r2, [pc, #176]	; (13c0 <updateGround+0xb8>)
    1310:	6920      	ldr	r0, [r4, #16]
    1312:	6961      	ldr	r1, [r4, #20]
    1314:	4b2b      	ldr	r3, [pc, #172]	; (13c4 <updateGround+0xbc>)
    1316:	47a8      	blx	r5
    1318:	4b2b      	ldr	r3, [pc, #172]	; (13c8 <updateGround+0xc0>)
    131a:	0006      	movs	r6, r0
    131c:	6a98      	ldr	r0, [r3, #40]	; 0x28
    131e:	4b2b      	ldr	r3, [pc, #172]	; (13cc <updateGround+0xc4>)
    1320:	000f      	movs	r7, r1
    1322:	4798      	blx	r3
    1324:	4a26      	ldr	r2, [pc, #152]	; (13c0 <updateGround+0xb8>)
    1326:	4b2a      	ldr	r3, [pc, #168]	; (13d0 <updateGround+0xc8>)
    1328:	47a8      	blx	r5
    132a:	0002      	movs	r2, r0
    132c:	000b      	movs	r3, r1
    132e:	0030      	movs	r0, r6
    1330:	0039      	movs	r1, r7
    1332:	4e28      	ldr	r6, [pc, #160]	; (13d4 <updateGround+0xcc>)
    1334:	47b0      	blx	r6
    offsets.groundOffsetBuffer = offsets.groundOffsetBuffer * 0.5 + altitude * 0.5;
    1336:	4e28      	ldr	r6, [pc, #160]	; (13d8 <updateGround+0xd0>)

void updateGround(Altimeter *my_altimeter) {



    offsets.gravityOffsetBuffer = offsets.gravityOffsetBuffer * 0.8 + sample.accelZ * 0.2;
    1338:	6120      	str	r0, [r4, #16]
    133a:	6161      	str	r1, [r4, #20]
    offsets.groundOffsetBuffer = offsets.groundOffsetBuffer * 0.5 + altitude * 0.5;
    133c:	69e0      	ldr	r0, [r4, #28]
    133e:	47b0      	blx	r6
    1340:	2200      	movs	r2, #0
    1342:	4b26      	ldr	r3, [pc, #152]	; (13dc <updateGround+0xd4>)
    1344:	47a8      	blx	r5
    1346:	9000      	str	r0, [sp, #0]
    1348:	9101      	str	r1, [sp, #4]
    134a:	4925      	ldr	r1, [pc, #148]	; (13e0 <updateGround+0xd8>)
    134c:	2200      	movs	r2, #0
    134e:	6808      	ldr	r0, [r1, #0]
    1350:	6849      	ldr	r1, [r1, #4]
    1352:	4b22      	ldr	r3, [pc, #136]	; (13dc <updateGround+0xd4>)
    1354:	47a8      	blx	r5
    1356:	4f1f      	ldr	r7, [pc, #124]	; (13d4 <updateGround+0xcc>)
    1358:	0002      	movs	r2, r0
    135a:	000b      	movs	r3, r1
    135c:	9800      	ldr	r0, [sp, #0]
    135e:	9901      	ldr	r1, [sp, #4]
    1360:	47b8      	blx	r7
    1362:	4f20      	ldr	r7, [pc, #128]	; (13e4 <updateGround+0xdc>)
    1364:	47b8      	blx	r7
    1366:	61e0      	str	r0, [r4, #28]
    offsets.groundTemperatureBuffer = offsets.groundTemperatureBuffer * 0.8 + sample.temperatureCelcus * 0.2;
    1368:	6a60      	ldr	r0, [r4, #36]	; 0x24
    136a:	47b0      	blx	r6
    136c:	4a14      	ldr	r2, [pc, #80]	; (13c0 <updateGround+0xb8>)
    136e:	4b15      	ldr	r3, [pc, #84]	; (13c4 <updateGround+0xbc>)
    1370:	47a8      	blx	r5
    1372:	4b15      	ldr	r3, [pc, #84]	; (13c8 <updateGround+0xc0>)
    1374:	9000      	str	r0, [sp, #0]
    1376:	9101      	str	r1, [sp, #4]
    1378:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
    137a:	47b0      	blx	r6
    137c:	4a10      	ldr	r2, [pc, #64]	; (13c0 <updateGround+0xb8>)
    137e:	4b14      	ldr	r3, [pc, #80]	; (13d0 <updateGround+0xc8>)
    1380:	47a8      	blx	r5
    1382:	4d14      	ldr	r5, [pc, #80]	; (13d4 <updateGround+0xcc>)
    1384:	000b      	movs	r3, r1
    1386:	0002      	movs	r2, r0
    1388:	9800      	ldr	r0, [sp, #0]
    138a:	9901      	ldr	r1, [sp, #4]
    138c:	47a8      	blx	r5
    138e:	47b8      	blx	r7

    if ((millis() - offsets.offsetBufferTime) > 2000) {
    1390:	4d15      	ldr	r5, [pc, #84]	; (13e8 <updateGround+0xe0>)



    offsets.gravityOffsetBuffer = offsets.gravityOffsetBuffer * 0.8 + sample.accelZ * 0.2;
    offsets.groundOffsetBuffer = offsets.groundOffsetBuffer * 0.5 + altitude * 0.5;
    offsets.groundTemperatureBuffer = offsets.groundTemperatureBuffer * 0.8 + sample.temperatureCelcus * 0.2;
    1392:	6260      	str	r0, [r4, #36]	; 0x24

    if ((millis() - offsets.offsetBufferTime) > 2000) {
    1394:	47a8      	blx	r5
    1396:	6823      	ldr	r3, [r4, #0]
    1398:	1ac0      	subs	r0, r0, r3
    139a:	23fa      	movs	r3, #250	; 0xfa
    139c:	00db      	lsls	r3, r3, #3
    139e:	4298      	cmp	r0, r3
    13a0:	d909      	bls.n	13b6 <updateGround+0xae>
        //recursive filter
        offsets.groundOffset = offsets.groundOffsetBuffer;
    13a2:	69e3      	ldr	r3, [r4, #28]
    13a4:	61a3      	str	r3, [r4, #24]
        offsets.groundTemperature = offsets.groundTemperatureBuffer;
    13a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
    13a8:	6223      	str	r3, [r4, #32]
        offsets.gravityOffset = offsets.gravityOffsetBuffer;
    13aa:	6922      	ldr	r2, [r4, #16]
    13ac:	6963      	ldr	r3, [r4, #20]
    13ae:	60a2      	str	r2, [r4, #8]
    13b0:	60e3      	str	r3, [r4, #12]
        offsets.offsetBufferTime = millis();
    13b2:	47a8      	blx	r5
    13b4:	6020      	str	r0, [r4, #0]
    }
}
    13b6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    13b8:	200004d8 	.word	0x200004d8
    13bc:	00005151 	.word	0x00005151
    13c0:	9999999a 	.word	0x9999999a
    13c4:	3fe99999 	.word	0x3fe99999
    13c8:	200007c8 	.word	0x200007c8
    13cc:	00005e8d 	.word	0x00005e8d
    13d0:	3fc99999 	.word	0x3fc99999
    13d4:	000042b1 	.word	0x000042b1
    13d8:	00005e1d 	.word	0x00005e1d
    13dc:	3fe00000 	.word	0x3fe00000
    13e0:	20000698 	.word	0x20000698
    13e4:	00003c6d 	.word	0x00003c6d
    13e8:	00001061 	.word	0x00001061

000013ec <isItPointingUp>:

void isItPointingUp() {
    13ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    u8_t i;

    double pointingUpBuffer;

    pointingUpBuffer = sample.accelZ;
    13ee:	4f25      	ldr	r7, [pc, #148]	; (1484 <isItPointingUp+0x98>)
    13f0:	4b25      	ldr	r3, [pc, #148]	; (1488 <isItPointingUp+0x9c>)
    13f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    13f4:	4798      	blx	r3
    13f6:	260a      	movs	r6, #10
    13f8:	0004      	movs	r4, r0
    13fa:	000d      	movs	r5, r1
    13fc:	9701      	str	r7, [sp, #4]

    for ( i = 0; i < 10 ; ++i ) {
        delay_ms(10);
    13fe:	200a      	movs	r0, #10
    1400:	4b22      	ldr	r3, [pc, #136]	; (148c <isItPointingUp+0xa0>)
    1402:	4798      	blx	r3
        sampleTick();
    1404:	4b22      	ldr	r3, [pc, #136]	; (1490 <isItPointingUp+0xa4>)
    1406:	4798      	blx	r3
        pointingUpBuffer = pointingUpBuffer * 0.8 + sample.accelZ * 0.2;
    1408:	4a22      	ldr	r2, [pc, #136]	; (1494 <isItPointingUp+0xa8>)
    140a:	4b23      	ldr	r3, [pc, #140]	; (1498 <isItPointingUp+0xac>)
    140c:	0020      	movs	r0, r4
    140e:	0029      	movs	r1, r5
    1410:	4c22      	ldr	r4, [pc, #136]	; (149c <isItPointingUp+0xb0>)
    1412:	47a0      	blx	r4
    1414:	0004      	movs	r4, r0
    1416:	000d      	movs	r5, r1
    1418:	9b01      	ldr	r3, [sp, #4]
    141a:	3e01      	subs	r6, #1
    141c:	6a98      	ldr	r0, [r3, #40]	; 0x28
    141e:	4b1a      	ldr	r3, [pc, #104]	; (1488 <isItPointingUp+0x9c>)
    1420:	4798      	blx	r3
    1422:	4a1c      	ldr	r2, [pc, #112]	; (1494 <isItPointingUp+0xa8>)
    1424:	4b1e      	ldr	r3, [pc, #120]	; (14a0 <isItPointingUp+0xb4>)
    1426:	4f1d      	ldr	r7, [pc, #116]	; (149c <isItPointingUp+0xb0>)
    1428:	47b8      	blx	r7
    142a:	0022      	movs	r2, r4
    142c:	002b      	movs	r3, r5
    142e:	4c1d      	ldr	r4, [pc, #116]	; (14a4 <isItPointingUp+0xb8>)
    1430:	47a0      	blx	r4
    1432:	b2f6      	uxtb	r6, r6
    1434:	0004      	movs	r4, r0
    1436:	000d      	movs	r5, r1

    double pointingUpBuffer;

    pointingUpBuffer = sample.accelZ;

    for ( i = 0; i < 10 ; ++i ) {
    1438:	2e00      	cmp	r6, #0
    143a:	d1e0      	bne.n	13fe <isItPointingUp+0x12>
        delay_ms(10);
        sampleTick();
        pointingUpBuffer = pointingUpBuffer * 0.8 + sample.accelZ * 0.2;
    }
    if ((pointingUpBuffer > 0.9) & (pointingUpBuffer <1.1)) {
    143c:	4e1a      	ldr	r6, [pc, #104]	; (14a8 <isItPointingUp+0xbc>)
    143e:	4a1b      	ldr	r2, [pc, #108]	; (14ac <isItPointingUp+0xc0>)
    1440:	4b1b      	ldr	r3, [pc, #108]	; (14b0 <isItPointingUp+0xc4>)
    1442:	47b0      	blx	r6
    1444:	0037      	movs	r7, r6
    1446:	4e1b      	ldr	r6, [pc, #108]	; (14b4 <isItPointingUp+0xc8>)
    1448:	2800      	cmp	r0, #0
    144a:	d007      	beq.n	145c <isItPointingUp+0x70>
    144c:	4a11      	ldr	r2, [pc, #68]	; (1494 <isItPointingUp+0xa8>)
    144e:	4b1a      	ldr	r3, [pc, #104]	; (14b8 <isItPointingUp+0xcc>)
    1450:	0020      	movs	r0, r4
    1452:	0029      	movs	r1, r5
    1454:	47b0      	blx	r6
        altimeter.pointingUp = true;
    1456:	2201      	movs	r2, #1
    for ( i = 0; i < 10 ; ++i ) {
        delay_ms(10);
        sampleTick();
        pointingUpBuffer = pointingUpBuffer * 0.8 + sample.accelZ * 0.2;
    }
    if ((pointingUpBuffer > 0.9) & (pointingUpBuffer <1.1)) {
    1458:	2800      	cmp	r0, #0
    145a:	d10e      	bne.n	147a <isItPointingUp+0x8e>
        altimeter.pointingUp = true;
    } else if ((pointingUpBuffer < -0.9) & (pointingUpBuffer > -1.1)) {
    145c:	4a13      	ldr	r2, [pc, #76]	; (14ac <isItPointingUp+0xc0>)
    145e:	4b17      	ldr	r3, [pc, #92]	; (14bc <isItPointingUp+0xd0>)
    1460:	0020      	movs	r0, r4
    1462:	0029      	movs	r1, r5
    1464:	47b0      	blx	r6
    1466:	2800      	cmp	r0, #0
    1468:	d00a      	beq.n	1480 <isItPointingUp+0x94>
    146a:	4a0a      	ldr	r2, [pc, #40]	; (1494 <isItPointingUp+0xa8>)
    146c:	4b14      	ldr	r3, [pc, #80]	; (14c0 <isItPointingUp+0xd4>)
    146e:	0020      	movs	r0, r4
    1470:	0029      	movs	r1, r5
    1472:	47b8      	blx	r7
    1474:	2800      	cmp	r0, #0
    1476:	d003      	beq.n	1480 <isItPointingUp+0x94>
        altimeter.pointingUp = false;
    1478:	2200      	movs	r2, #0
    147a:	4b12      	ldr	r3, [pc, #72]	; (14c4 <isItPointingUp+0xd8>)
    147c:	731a      	strb	r2, [r3, #12]

        }

    }

    147e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    1480:	e7fe      	b.n	1480 <isItPointingUp+0x94>
    1482:	46c0      	nop			; (mov r8, r8)
    1484:	200007c8 	.word	0x200007c8
    1488:	00005e8d 	.word	0x00005e8d
    148c:	00001015 	.word	0x00001015
    1490:	000023f9 	.word	0x000023f9
    1494:	9999999a 	.word	0x9999999a
    1498:	3fe99999 	.word	0x3fe99999
    149c:	00005151 	.word	0x00005151
    14a0:	3fc99999 	.word	0x3fc99999
    14a4:	000042b1 	.word	0x000042b1
    14a8:	00003bbd 	.word	0x00003bbd
    14ac:	cccccccd 	.word	0xcccccccd
    14b0:	3feccccc 	.word	0x3feccccc
    14b4:	00003b95 	.word	0x00003b95
    14b8:	3ff19999 	.word	0x3ff19999
    14bc:	bfeccccc 	.word	0xbfeccccc
    14c0:	bff19999 	.word	0xbff19999
    14c4:	20000528 	.word	0x20000528

000014c8 <computeKalmanGains>:
    dt = 0.005;

    /*
     Fill in state transition matrix and its transpose
    */
    phi[0][1]    = dt;
    14c8:	4bdc      	ldr	r3, [pc, #880]	; (183c <computeKalmanGains+0x374>)
    14ca:	48dd      	ldr	r0, [pc, #884]	; (1840 <computeKalmanGains+0x378>)
    14cc:	49dd      	ldr	r1, [pc, #884]	; (1844 <computeKalmanGains+0x37c>)

double altitude_variance = ALTITUDESIGMA*ALTITUDESIGMA;
double acceleration_variance = ACCELERATIONSIGMA*ACCELERATIONSIGMA;
double model_variance  = MODELSIGMA*MODELSIGMA;

void computeKalmanGains() {
    14ce:	b5f0      	push	{r4, r5, r6, r7, lr}
    dt = 0.005;

    /*
     Fill in state transition matrix and its transpose
    */
    phi[0][1]    = dt;
    14d0:	6098      	str	r0, [r3, #8]
    14d2:	60d9      	str	r1, [r3, #12]
    phi[1][2]    = dt;
    14d4:	6298      	str	r0, [r3, #40]	; 0x28
    14d6:	62d9      	str	r1, [r3, #44]	; 0x2c
    phi[0][2]    = dt*dt/2.0;
    14d8:	48db      	ldr	r0, [pc, #876]	; (1848 <computeKalmanGains+0x380>)
    14da:	49dc      	ldr	r1, [pc, #880]	; (184c <computeKalmanGains+0x384>)
    14dc:	2200      	movs	r2, #0
    14de:	6118      	str	r0, [r3, #16]
    14e0:	6159      	str	r1, [r3, #20]
    phit[2][0]    = dt*dt/2.0;

    for( i = 0; i <= 2; i++)
        for( j = 0; j <=1; j++) {
            lastkgain[i][j] = .001;
            kgain[i][j] = 1.0;
    14e2:	2000      	movs	r0, #0
    14e4:	49da      	ldr	r1, [pc, #872]	; (1850 <computeKalmanGains+0x388>)
    phit[2][1]    = dt;
    phit[2][0]    = dt*dt/2.0;

    for( i = 0; i <= 2; i++)
        for( j = 0; j <=1; j++) {
            lastkgain[i][j] = .001;
    14e6:	4cdb      	ldr	r4, [pc, #876]	; (1854 <computeKalmanGains+0x38c>)
    14e8:	468c      	mov	ip, r1
    14ea:	4ddb      	ldr	r5, [pc, #876]	; (1858 <computeKalmanGains+0x390>)
            kgain[i][j] = 1.0;
    14ec:	49db      	ldr	r1, [pc, #876]	; (185c <computeKalmanGains+0x394>)

double altitude_variance = ALTITUDESIGMA*ALTITUDESIGMA;
double acceleration_variance = ACCELERATIONSIGMA*ACCELERATIONSIGMA;
double model_variance  = MODELSIGMA*MODELSIGMA;

void computeKalmanGains() {
    14ee:	b0cd      	sub	sp, #308	; 0x134
    14f0:	ae40      	add	r6, sp, #256	; 0x100
    14f2:	1997      	adds	r7, r2, r6
    14f4:	4666      	mov	r6, ip
    14f6:	1996      	adds	r6, r2, r6
    14f8:	3210      	adds	r2, #16
    phit[2][1]    = dt;
    phit[2][0]    = dt*dt/2.0;

    for( i = 0; i <= 2; i++)
        for( j = 0; j <=1; j++) {
            lastkgain[i][j] = .001;
    14fa:	603c      	str	r4, [r7, #0]
    14fc:	607d      	str	r5, [r7, #4]
            kgain[i][j] = 1.0;
    14fe:	6030      	str	r0, [r6, #0]
    1500:	6071      	str	r1, [r6, #4]
    phit[2][1]    = dt;
    phit[2][0]    = dt*dt/2.0;

    for( i = 0; i <= 2; i++)
        for( j = 0; j <=1; j++) {
            lastkgain[i][j] = .001;
    1502:	60bc      	str	r4, [r7, #8]
    1504:	60fd      	str	r5, [r7, #12]
            kgain[i][j] = 1.0;
    1506:	60b0      	str	r0, [r6, #8]
    1508:	60f1      	str	r1, [r6, #12]
    phi[0][2]    = dt*dt/2.0;
    phit[1][0]    = dt;
    phit[2][1]    = dt;
    phit[2][0]    = dt*dt/2.0;

    for( i = 0; i <= 2; i++)
    150a:	2a30      	cmp	r2, #48	; 0x30
    150c:	d1f0      	bne.n	14f0 <computeKalmanGains+0x28>

    /* Compute the Kalman gain matrix. */
    while(1) {
        /* Propagate state covariance */

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
    150e:	6819      	ldr	r1, [r3, #0]
    1510:	685a      	ldr	r2, [r3, #4]
    1512:	911a      	str	r1, [sp, #104]	; 0x68
    1514:	921b      	str	r2, [sp, #108]	; 0x6c
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
    1516:	6999      	ldr	r1, [r3, #24]
    1518:	69da      	ldr	r2, [r3, #28]
    151a:	911c      	str	r1, [sp, #112]	; 0x70
    151c:	921d      	str	r2, [sp, #116]	; 0x74
    151e:	6a19      	ldr	r1, [r3, #32]
    1520:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    1522:	911e      	str	r1, [sp, #120]	; 0x78
    1524:	921f      	str	r2, [sp, #124]	; 0x7c
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
    1526:	6b19      	ldr	r1, [r3, #48]	; 0x30
    1528:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    152a:	9120      	str	r1, [sp, #128]	; 0x80
    152c:	9221      	str	r2, [sp, #132]	; 0x84
    152e:	6b99      	ldr	r1, [r3, #56]	; 0x38
    1530:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    1532:	9122      	str	r1, [sp, #136]	; 0x88
    1534:	9223      	str	r2, [sp, #140]	; 0x8c
    1536:	6c19      	ldr	r1, [r3, #64]	; 0x40
    1538:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    153a:	9124      	str	r1, [sp, #144]	; 0x90
    153c:	9225      	str	r2, [sp, #148]	; 0x94
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
        pestp[2][1] = term[2][0] * phit[0][1] + term[2][1] * phit[1][1] + term[2][2] * phit[2][1];
        pestp[2][2] = term[2][0] * phit[0][2] + term[2][1] * phit[1][2] + term[2][2] * phit[2][2];

        pestp[2][2] = pestp[2][2] + model_variance;
    153e:	6c99      	ldr	r1, [r3, #72]	; 0x48
    1540:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    1542:	913a      	str	r1, [sp, #232]	; 0xe8
    1544:	923b      	str	r2, [sp, #236]	; 0xec
        /*
          Calculate Kalman Gain
        */
        det = (pestp[0][0]+altitude_variance)*(pestp[2][2] + acceleration_variance) - pestp[2][0] * pestp[0][2];
    1546:	6d19      	ldr	r1, [r3, #80]	; 0x50
    1548:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    154a:	6ddc      	ldr	r4, [r3, #92]	; 0x5c
    154c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    154e:	933e      	str	r3, [sp, #248]	; 0xf8
    1550:	943f      	str	r4, [sp, #252]	; 0xfc
    1552:	2300      	movs	r3, #0
    1554:	4cc2      	ldr	r4, [pc, #776]	; (1860 <computeKalmanGains+0x398>)
    1556:	913c      	str	r1, [sp, #240]	; 0xf0
    1558:	923d      	str	r2, [sp, #244]	; 0xf4
    155a:	9302      	str	r3, [sp, #8]
    155c:	9403      	str	r4, [sp, #12]
    155e:	2300      	movs	r3, #0
    1560:	2400      	movs	r4, #0
    1562:	9310      	str	r3, [sp, #64]	; 0x40
    1564:	9411      	str	r4, [sp, #68]	; 0x44
    1566:	9300      	str	r3, [sp, #0]
    1568:	9401      	str	r4, [sp, #4]
    156a:	9304      	str	r3, [sp, #16]
    156c:	9405      	str	r4, [sp, #20]
    156e:	2300      	movs	r3, #0
    1570:	4cbb      	ldr	r4, [pc, #748]	; (1860 <computeKalmanGains+0x398>)
    1572:	930e      	str	r3, [sp, #56]	; 0x38
    1574:	940f      	str	r4, [sp, #60]	; 0x3c
    1576:	2300      	movs	r3, #0
    1578:	2400      	movs	r4, #0
    157a:	9308      	str	r3, [sp, #32]
    157c:	9409      	str	r4, [sp, #36]	; 0x24
    157e:	930c      	str	r3, [sp, #48]	; 0x30
    1580:	940d      	str	r4, [sp, #52]	; 0x34
    1582:	930a      	str	r3, [sp, #40]	; 0x28
    1584:	940b      	str	r4, [sp, #44]	; 0x2c
    1586:	2480      	movs	r4, #128	; 0x80
    1588:	2300      	movs	r3, #0
    158a:	05e4      	lsls	r4, r4, #23
    158c:	9306      	str	r3, [sp, #24]
    158e:	9407      	str	r4, [sp, #28]
    1590:	2300      	movs	r3, #0
    1592:	9338      	str	r3, [sp, #224]	; 0xe0

    /* Compute the Kalman gain matrix. */
    while(1) {
        /* Propagate state covariance */

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
    1594:	4db3      	ldr	r5, [pc, #716]	; (1864 <computeKalmanGains+0x39c>)
    1596:	9a06      	ldr	r2, [sp, #24]
    1598:	9b07      	ldr	r3, [sp, #28]
    159a:	981a      	ldr	r0, [sp, #104]	; 0x68
    159c:	991b      	ldr	r1, [sp, #108]	; 0x6c
    159e:	47a8      	blx	r5
    15a0:	4aa7      	ldr	r2, [pc, #668]	; (1840 <computeKalmanGains+0x378>)
    15a2:	0006      	movs	r6, r0
    15a4:	000f      	movs	r7, r1
    15a6:	9808      	ldr	r0, [sp, #32]
    15a8:	9909      	ldr	r1, [sp, #36]	; 0x24
    15aa:	4ba6      	ldr	r3, [pc, #664]	; (1844 <computeKalmanGains+0x37c>)
    15ac:	47a8      	blx	r5
    15ae:	4cae      	ldr	r4, [pc, #696]	; (1868 <computeKalmanGains+0x3a0>)
    15b0:	0002      	movs	r2, r0
    15b2:	000b      	movs	r3, r1
    15b4:	0030      	movs	r0, r6
    15b6:	0039      	movs	r1, r7
    15b8:	47a0      	blx	r4
    15ba:	4aa3      	ldr	r2, [pc, #652]	; (1848 <computeKalmanGains+0x380>)
    15bc:	0006      	movs	r6, r0
    15be:	000f      	movs	r7, r1
    15c0:	9800      	ldr	r0, [sp, #0]
    15c2:	9901      	ldr	r1, [sp, #4]
    15c4:	4ba1      	ldr	r3, [pc, #644]	; (184c <computeKalmanGains+0x384>)
    15c6:	47a8      	blx	r5
    15c8:	0002      	movs	r2, r0
    15ca:	000b      	movs	r3, r1
    15cc:	0030      	movs	r0, r6
    15ce:	0039      	movs	r1, r7
    15d0:	47a0      	blx	r4
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
    15d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    15d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c

    /* Compute the Kalman gain matrix. */
    while(1) {
        /* Propagate state covariance */

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
    15d6:	9016      	str	r0, [sp, #88]	; 0x58
    15d8:	9117      	str	r1, [sp, #92]	; 0x5c
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
    15da:	981a      	ldr	r0, [sp, #104]	; 0x68
    15dc:	991b      	ldr	r1, [sp, #108]	; 0x6c
    15de:	47a8      	blx	r5
    15e0:	4a97      	ldr	r2, [pc, #604]	; (1840 <computeKalmanGains+0x378>)
    15e2:	0006      	movs	r6, r0
    15e4:	000f      	movs	r7, r1
    15e6:	980e      	ldr	r0, [sp, #56]	; 0x38
    15e8:	990f      	ldr	r1, [sp, #60]	; 0x3c
    15ea:	4b96      	ldr	r3, [pc, #600]	; (1844 <computeKalmanGains+0x37c>)
    15ec:	47a8      	blx	r5
    15ee:	0002      	movs	r2, r0
    15f0:	000b      	movs	r3, r1
    15f2:	0030      	movs	r0, r6
    15f4:	0039      	movs	r1, r7
    15f6:	47a0      	blx	r4
    15f8:	4a93      	ldr	r2, [pc, #588]	; (1848 <computeKalmanGains+0x380>)
    15fa:	0006      	movs	r6, r0
    15fc:	000f      	movs	r7, r1
    15fe:	9810      	ldr	r0, [sp, #64]	; 0x40
    1600:	9911      	ldr	r1, [sp, #68]	; 0x44
    1602:	4b92      	ldr	r3, [pc, #584]	; (184c <computeKalmanGains+0x384>)
    1604:	47a8      	blx	r5
    1606:	0002      	movs	r2, r0
    1608:	000b      	movs	r3, r1
    160a:	0030      	movs	r0, r6
    160c:	0039      	movs	r1, r7
    160e:	47a0      	blx	r4
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
    1610:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1612:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    /* Compute the Kalman gain matrix. */
    while(1) {
        /* Propagate state covariance */

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
    1614:	9012      	str	r0, [sp, #72]	; 0x48
    1616:	9113      	str	r1, [sp, #76]	; 0x4c
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
    1618:	981a      	ldr	r0, [sp, #104]	; 0x68
    161a:	991b      	ldr	r1, [sp, #108]	; 0x6c
    161c:	47a8      	blx	r5
    161e:	4a88      	ldr	r2, [pc, #544]	; (1840 <computeKalmanGains+0x378>)
    1620:	0006      	movs	r6, r0
    1622:	000f      	movs	r7, r1
    1624:	9804      	ldr	r0, [sp, #16]
    1626:	9905      	ldr	r1, [sp, #20]
    1628:	4b86      	ldr	r3, [pc, #536]	; (1844 <computeKalmanGains+0x37c>)
    162a:	47a8      	blx	r5
    162c:	0002      	movs	r2, r0
    162e:	000b      	movs	r3, r1
    1630:	0030      	movs	r0, r6
    1632:	0039      	movs	r1, r7
    1634:	47a0      	blx	r4
    1636:	4a84      	ldr	r2, [pc, #528]	; (1848 <computeKalmanGains+0x380>)
    1638:	0006      	movs	r6, r0
    163a:	000f      	movs	r7, r1
    163c:	9802      	ldr	r0, [sp, #8]
    163e:	9903      	ldr	r1, [sp, #12]
    1640:	4b82      	ldr	r3, [pc, #520]	; (184c <computeKalmanGains+0x384>)
    1642:	47a8      	blx	r5
    1644:	0002      	movs	r2, r0
    1646:	000b      	movs	r3, r1
    1648:	0030      	movs	r0, r6
    164a:	0039      	movs	r1, r7
    164c:	47a0      	blx	r4
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
    164e:	9a06      	ldr	r2, [sp, #24]
    1650:	9b07      	ldr	r3, [sp, #28]
    while(1) {
        /* Propagate state covariance */

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
    1652:	9014      	str	r0, [sp, #80]	; 0x50
    1654:	9115      	str	r1, [sp, #84]	; 0x54
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
    1656:	981c      	ldr	r0, [sp, #112]	; 0x70
    1658:	991d      	ldr	r1, [sp, #116]	; 0x74
    165a:	47a8      	blx	r5
    165c:	9a08      	ldr	r2, [sp, #32]
    165e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1660:	0006      	movs	r6, r0
    1662:	000f      	movs	r7, r1
    1664:	981e      	ldr	r0, [sp, #120]	; 0x78
    1666:	991f      	ldr	r1, [sp, #124]	; 0x7c
    1668:	47a8      	blx	r5
    166a:	0002      	movs	r2, r0
    166c:	000b      	movs	r3, r1
    166e:	0030      	movs	r0, r6
    1670:	0039      	movs	r1, r7
    1672:	47a0      	blx	r4
    1674:	4a72      	ldr	r2, [pc, #456]	; (1840 <computeKalmanGains+0x378>)
    1676:	0006      	movs	r6, r0
    1678:	000f      	movs	r7, r1
    167a:	9800      	ldr	r0, [sp, #0]
    167c:	9901      	ldr	r1, [sp, #4]
    167e:	4b71      	ldr	r3, [pc, #452]	; (1844 <computeKalmanGains+0x37c>)
    1680:	47a8      	blx	r5
    1682:	0002      	movs	r2, r0
    1684:	000b      	movs	r3, r1
    1686:	0030      	movs	r0, r6
    1688:	0039      	movs	r1, r7
    168a:	47a0      	blx	r4
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
    168c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    168e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
        /* Propagate state covariance */

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
    1690:	9018      	str	r0, [sp, #96]	; 0x60
    1692:	9119      	str	r1, [sp, #100]	; 0x64
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
    1694:	981c      	ldr	r0, [sp, #112]	; 0x70
    1696:	991d      	ldr	r1, [sp, #116]	; 0x74
    1698:	47a8      	blx	r5
    169a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    169c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    169e:	0006      	movs	r6, r0
    16a0:	000f      	movs	r7, r1
    16a2:	981e      	ldr	r0, [sp, #120]	; 0x78
    16a4:	991f      	ldr	r1, [sp, #124]	; 0x7c
    16a6:	47a8      	blx	r5
    16a8:	0002      	movs	r2, r0
    16aa:	000b      	movs	r3, r1
    16ac:	0030      	movs	r0, r6
    16ae:	0039      	movs	r1, r7
    16b0:	47a0      	blx	r4
    16b2:	4a63      	ldr	r2, [pc, #396]	; (1840 <computeKalmanGains+0x378>)
    16b4:	0006      	movs	r6, r0
    16b6:	000f      	movs	r7, r1
    16b8:	9810      	ldr	r0, [sp, #64]	; 0x40
    16ba:	9911      	ldr	r1, [sp, #68]	; 0x44
    16bc:	4b61      	ldr	r3, [pc, #388]	; (1844 <computeKalmanGains+0x37c>)
    16be:	47a8      	blx	r5
    16c0:	0002      	movs	r2, r0
    16c2:	000b      	movs	r3, r1
    16c4:	0030      	movs	r0, r6
    16c6:	0039      	movs	r1, r7
    16c8:	47a0      	blx	r4
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
    16ca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    16cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
    16ce:	9026      	str	r0, [sp, #152]	; 0x98
    16d0:	9127      	str	r1, [sp, #156]	; 0x9c
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
    16d2:	981c      	ldr	r0, [sp, #112]	; 0x70
    16d4:	991d      	ldr	r1, [sp, #116]	; 0x74
    16d6:	47a8      	blx	r5
    16d8:	9a04      	ldr	r2, [sp, #16]
    16da:	9b05      	ldr	r3, [sp, #20]
    16dc:	0006      	movs	r6, r0
    16de:	000f      	movs	r7, r1
    16e0:	981e      	ldr	r0, [sp, #120]	; 0x78
    16e2:	991f      	ldr	r1, [sp, #124]	; 0x7c
    16e4:	47a8      	blx	r5
    16e6:	0002      	movs	r2, r0
    16e8:	000b      	movs	r3, r1
    16ea:	0030      	movs	r0, r6
    16ec:	0039      	movs	r1, r7
    16ee:	47a0      	blx	r4
    16f0:	4a53      	ldr	r2, [pc, #332]	; (1840 <computeKalmanGains+0x378>)
    16f2:	0006      	movs	r6, r0
    16f4:	000f      	movs	r7, r1
    16f6:	9802      	ldr	r0, [sp, #8]
    16f8:	9903      	ldr	r1, [sp, #12]
    16fa:	4b52      	ldr	r3, [pc, #328]	; (1844 <computeKalmanGains+0x37c>)
    16fc:	47a8      	blx	r5
    16fe:	0002      	movs	r2, r0
    1700:	000b      	movs	r3, r1
    1702:	0030      	movs	r0, r6
    1704:	0039      	movs	r1, r7
    1706:	47a0      	blx	r4
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
    1708:	9a06      	ldr	r2, [sp, #24]
    170a:	9b07      	ldr	r3, [sp, #28]
        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
    170c:	9028      	str	r0, [sp, #160]	; 0xa0
    170e:	9129      	str	r1, [sp, #164]	; 0xa4
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
    1710:	9820      	ldr	r0, [sp, #128]	; 0x80
    1712:	9921      	ldr	r1, [sp, #132]	; 0x84
    1714:	47a8      	blx	r5
    1716:	9a08      	ldr	r2, [sp, #32]
    1718:	9b09      	ldr	r3, [sp, #36]	; 0x24
    171a:	0006      	movs	r6, r0
    171c:	000f      	movs	r7, r1
    171e:	9822      	ldr	r0, [sp, #136]	; 0x88
    1720:	9923      	ldr	r1, [sp, #140]	; 0x8c
    1722:	47a8      	blx	r5
    1724:	0002      	movs	r2, r0
    1726:	000b      	movs	r3, r1
    1728:	0030      	movs	r0, r6
    172a:	0039      	movs	r1, r7
    172c:	47a0      	blx	r4
    172e:	9a00      	ldr	r2, [sp, #0]
    1730:	9b01      	ldr	r3, [sp, #4]
    1732:	0006      	movs	r6, r0
    1734:	000f      	movs	r7, r1
    1736:	9824      	ldr	r0, [sp, #144]	; 0x90
    1738:	9925      	ldr	r1, [sp, #148]	; 0x94
    173a:	47a8      	blx	r5
    173c:	0002      	movs	r2, r0
    173e:	000b      	movs	r3, r1
    1740:	0030      	movs	r0, r6
    1742:	0039      	movs	r1, r7
    1744:	47a0      	blx	r4
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
    1746:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    1748:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
    174a:	902e      	str	r0, [sp, #184]	; 0xb8
    174c:	912f      	str	r1, [sp, #188]	; 0xbc
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
    174e:	9820      	ldr	r0, [sp, #128]	; 0x80
    1750:	9921      	ldr	r1, [sp, #132]	; 0x84
    1752:	47a8      	blx	r5
    1754:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    1756:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1758:	0006      	movs	r6, r0
    175a:	000f      	movs	r7, r1
    175c:	9822      	ldr	r0, [sp, #136]	; 0x88
    175e:	9923      	ldr	r1, [sp, #140]	; 0x8c
    1760:	47a8      	blx	r5
    1762:	0002      	movs	r2, r0
    1764:	000b      	movs	r3, r1
    1766:	0030      	movs	r0, r6
    1768:	0039      	movs	r1, r7
    176a:	47a0      	blx	r4
    176c:	9a10      	ldr	r2, [sp, #64]	; 0x40
    176e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    1770:	0006      	movs	r6, r0
    1772:	000f      	movs	r7, r1
    1774:	9824      	ldr	r0, [sp, #144]	; 0x90
    1776:	9925      	ldr	r1, [sp, #148]	; 0x94
    1778:	47a8      	blx	r5
    177a:	0002      	movs	r2, r0
    177c:	000b      	movs	r3, r1
    177e:	0030      	movs	r0, r6
    1780:	0039      	movs	r1, r7
    1782:	47a0      	blx	r4
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];
    1784:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1786:	9b0d      	ldr	r3, [sp, #52]	; 0x34
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
    1788:	9006      	str	r0, [sp, #24]
    178a:	9107      	str	r1, [sp, #28]
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];
    178c:	9820      	ldr	r0, [sp, #128]	; 0x80
    178e:	9921      	ldr	r1, [sp, #132]	; 0x84
    1790:	47a8      	blx	r5
    1792:	9a04      	ldr	r2, [sp, #16]
    1794:	9b05      	ldr	r3, [sp, #20]
    1796:	0006      	movs	r6, r0
    1798:	000f      	movs	r7, r1
    179a:	9822      	ldr	r0, [sp, #136]	; 0x88
    179c:	9923      	ldr	r1, [sp, #140]	; 0x8c
    179e:	47a8      	blx	r5
    17a0:	0002      	movs	r2, r0
    17a2:	000b      	movs	r3, r1
    17a4:	0030      	movs	r0, r6
    17a6:	0039      	movs	r1, r7
    17a8:	47a0      	blx	r4
    17aa:	9a02      	ldr	r2, [sp, #8]
    17ac:	9b03      	ldr	r3, [sp, #12]
    17ae:	0006      	movs	r6, r0
    17b0:	000f      	movs	r7, r1
    17b2:	9824      	ldr	r0, [sp, #144]	; 0x90
    17b4:	9925      	ldr	r1, [sp, #148]	; 0x94
    17b6:	47a8      	blx	r5
    17b8:	0002      	movs	r2, r0
    17ba:	000b      	movs	r3, r1
    17bc:	0030      	movs	r0, r6
    17be:	0039      	movs	r1, r7
    17c0:	47a0      	blx	r4

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
    17c2:	4a1f      	ldr	r2, [pc, #124]	; (1840 <computeKalmanGains+0x378>)
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];
    17c4:	9002      	str	r0, [sp, #8]
    17c6:	9103      	str	r1, [sp, #12]

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
    17c8:	9812      	ldr	r0, [sp, #72]	; 0x48
    17ca:	9913      	ldr	r1, [sp, #76]	; 0x4c
    17cc:	4b1d      	ldr	r3, [pc, #116]	; (1844 <computeKalmanGains+0x37c>)
    17ce:	47a8      	blx	r5
    17d0:	9a16      	ldr	r2, [sp, #88]	; 0x58
    17d2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    17d4:	47a0      	blx	r4
    17d6:	4a1c      	ldr	r2, [pc, #112]	; (1848 <computeKalmanGains+0x380>)
    17d8:	0006      	movs	r6, r0
    17da:	000f      	movs	r7, r1
    17dc:	9814      	ldr	r0, [sp, #80]	; 0x50
    17de:	9915      	ldr	r1, [sp, #84]	; 0x54
    17e0:	4b1a      	ldr	r3, [pc, #104]	; (184c <computeKalmanGains+0x384>)
    17e2:	47a8      	blx	r5
    17e4:	0002      	movs	r2, r0
    17e6:	000b      	movs	r3, r1
    17e8:	0030      	movs	r0, r6
    17ea:	0039      	movs	r1, r7
    17ec:	47a0      	blx	r4
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
    17ee:	2200      	movs	r2, #0
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
    17f0:	9008      	str	r0, [sp, #32]
    17f2:	9109      	str	r1, [sp, #36]	; 0x24
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
    17f4:	9816      	ldr	r0, [sp, #88]	; 0x58
    17f6:	9917      	ldr	r1, [sp, #92]	; 0x5c
    17f8:	2300      	movs	r3, #0
    17fa:	47a8      	blx	r5
    17fc:	0006      	movs	r6, r0
    17fe:	000f      	movs	r7, r1
    1800:	0002      	movs	r2, r0
    1802:	000b      	movs	r3, r1
    1804:	9812      	ldr	r0, [sp, #72]	; 0x48
    1806:	9913      	ldr	r1, [sp, #76]	; 0x4c
    1808:	47a0      	blx	r4
    180a:	4a0d      	ldr	r2, [pc, #52]	; (1840 <computeKalmanGains+0x378>)
    180c:	9000      	str	r0, [sp, #0]
    180e:	9101      	str	r1, [sp, #4]
    1810:	9814      	ldr	r0, [sp, #80]	; 0x50
    1812:	9915      	ldr	r1, [sp, #84]	; 0x54
    1814:	4b0b      	ldr	r3, [pc, #44]	; (1844 <computeKalmanGains+0x37c>)
    1816:	47a8      	blx	r5
    1818:	0002      	movs	r2, r0
    181a:	000b      	movs	r3, r1
    181c:	9800      	ldr	r0, [sp, #0]
    181e:	9901      	ldr	r1, [sp, #4]
    1820:	47a0      	blx	r4
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
    1822:	2200      	movs	r2, #0
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
    1824:	9030      	str	r0, [sp, #192]	; 0xc0
    1826:	9131      	str	r1, [sp, #196]	; 0xc4
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
    1828:	9812      	ldr	r0, [sp, #72]	; 0x48
    182a:	9913      	ldr	r1, [sp, #76]	; 0x4c
    182c:	2300      	movs	r3, #0
    182e:	47a8      	blx	r5
    1830:	0032      	movs	r2, r6
    1832:	003b      	movs	r3, r7
    1834:	47a0      	blx	r4
    1836:	9a14      	ldr	r2, [sp, #80]	; 0x50
    1838:	9b15      	ldr	r3, [sp, #84]	; 0x54
    183a:	e017      	b.n	186c <computeKalmanGains+0x3a4>
    183c:	20000010 	.word	0x20000010
    1840:	47ae147b 	.word	0x47ae147b
    1844:	3f747ae1 	.word	0x3f747ae1
    1848:	eb1c432d 	.word	0xeb1c432d
    184c:	3eea36e2 	.word	0x3eea36e2
    1850:	20000650 	.word	0x20000650
    1854:	d2f1a9fc 	.word	0xd2f1a9fc
    1858:	3f50624d 	.word	0x3f50624d
    185c:	3ff00000 	.word	0x3ff00000
    1860:	40220000 	.word	0x40220000
    1864:	00005151 	.word	0x00005151
    1868:	000042b1 	.word	0x000042b1
    186c:	47a0      	blx	r4
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
    186e:	4ad9      	ldr	r2, [pc, #868]	; (1bd4 <computeKalmanGains+0x70c>)
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
    1870:	9112      	str	r1, [sp, #72]	; 0x48
    1872:	9004      	str	r0, [sp, #16]
    1874:	9116      	str	r1, [sp, #88]	; 0x58
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
    1876:	4bd8      	ldr	r3, [pc, #864]	; (1bd8 <computeKalmanGains+0x710>)
    1878:	9826      	ldr	r0, [sp, #152]	; 0x98
    187a:	9927      	ldr	r1, [sp, #156]	; 0x9c
    187c:	47a8      	blx	r5
    187e:	9a18      	ldr	r2, [sp, #96]	; 0x60
    1880:	9b19      	ldr	r3, [sp, #100]	; 0x64
    1882:	47a0      	blx	r4
    1884:	4ad5      	ldr	r2, [pc, #852]	; (1bdc <computeKalmanGains+0x714>)
    1886:	0006      	movs	r6, r0
    1888:	000f      	movs	r7, r1
    188a:	9828      	ldr	r0, [sp, #160]	; 0xa0
    188c:	9929      	ldr	r1, [sp, #164]	; 0xa4
    188e:	4bd4      	ldr	r3, [pc, #848]	; (1be0 <computeKalmanGains+0x718>)
    1890:	47a8      	blx	r5
    1892:	0002      	movs	r2, r0
    1894:	000b      	movs	r3, r1
    1896:	0030      	movs	r0, r6
    1898:	0039      	movs	r1, r7
    189a:	47a0      	blx	r4
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
    189c:	2200      	movs	r2, #0
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
    189e:	902a      	str	r0, [sp, #168]	; 0xa8
    18a0:	912b      	str	r1, [sp, #172]	; 0xac
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
    18a2:	9818      	ldr	r0, [sp, #96]	; 0x60
    18a4:	9919      	ldr	r1, [sp, #100]	; 0x64
    18a6:	2300      	movs	r3, #0
    18a8:	47a8      	blx	r5
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
    18aa:	2200      	movs	r2, #0

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
    18ac:	9032      	str	r0, [sp, #200]	; 0xc8
    18ae:	9133      	str	r1, [sp, #204]	; 0xcc
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
    18b0:	9826      	ldr	r0, [sp, #152]	; 0x98
    18b2:	9927      	ldr	r1, [sp, #156]	; 0x9c
    18b4:	2300      	movs	r3, #0
    18b6:	47a8      	blx	r5
    18b8:	9a32      	ldr	r2, [sp, #200]	; 0xc8
    18ba:	9b33      	ldr	r3, [sp, #204]	; 0xcc
    18bc:	47a0      	blx	r4
    18be:	9a28      	ldr	r2, [sp, #160]	; 0xa0
    18c0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
    18c2:	47a0      	blx	r4
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
    18c4:	4ac3      	ldr	r2, [pc, #780]	; (1bd4 <computeKalmanGains+0x70c>)
        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
    18c6:	902c      	str	r0, [sp, #176]	; 0xb0
    18c8:	912d      	str	r1, [sp, #180]	; 0xb4
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
    18ca:	9806      	ldr	r0, [sp, #24]
    18cc:	9907      	ldr	r1, [sp, #28]
    18ce:	4bc2      	ldr	r3, [pc, #776]	; (1bd8 <computeKalmanGains+0x710>)
    18d0:	47a8      	blx	r5
    18d2:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
    18d4:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
    18d6:	47a0      	blx	r4
    18d8:	4ac0      	ldr	r2, [pc, #768]	; (1bdc <computeKalmanGains+0x714>)
    18da:	0006      	movs	r6, r0
    18dc:	000f      	movs	r7, r1
    18de:	9802      	ldr	r0, [sp, #8]
    18e0:	9903      	ldr	r1, [sp, #12]
    18e2:	4bbf      	ldr	r3, [pc, #764]	; (1be0 <computeKalmanGains+0x718>)
    18e4:	47a8      	blx	r5
    18e6:	0002      	movs	r2, r0
    18e8:	000b      	movs	r3, r1
    18ea:	0030      	movs	r0, r6
    18ec:	0039      	movs	r1, r7
    18ee:	47a0      	blx	r4
        pestp[2][1] = term[2][0] * phit[0][1] + term[2][1] * phit[1][1] + term[2][2] * phit[2][1];
    18f0:	2200      	movs	r2, #0
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
    18f2:	9000      	str	r0, [sp, #0]
    18f4:	9101      	str	r1, [sp, #4]
        pestp[2][1] = term[2][0] * phit[0][1] + term[2][1] * phit[1][1] + term[2][2] * phit[2][1];
    18f6:	982e      	ldr	r0, [sp, #184]	; 0xb8
    18f8:	992f      	ldr	r1, [sp, #188]	; 0xbc
    18fa:	2300      	movs	r3, #0
    18fc:	47a8      	blx	r5
    18fe:	0006      	movs	r6, r0
    1900:	000f      	movs	r7, r1
    1902:	0002      	movs	r2, r0
    1904:	000b      	movs	r3, r1
    1906:	9806      	ldr	r0, [sp, #24]
    1908:	9907      	ldr	r1, [sp, #28]
    190a:	47a0      	blx	r4
    190c:	4ab1      	ldr	r2, [pc, #708]	; (1bd4 <computeKalmanGains+0x70c>)
    190e:	900a      	str	r0, [sp, #40]	; 0x28
    1910:	910b      	str	r1, [sp, #44]	; 0x2c
    1912:	9802      	ldr	r0, [sp, #8]
    1914:	9903      	ldr	r1, [sp, #12]
    1916:	4bb0      	ldr	r3, [pc, #704]	; (1bd8 <computeKalmanGains+0x710>)
    1918:	47a8      	blx	r5
    191a:	0002      	movs	r2, r0
    191c:	000b      	movs	r3, r1
    191e:	980a      	ldr	r0, [sp, #40]	; 0x28
    1920:	990b      	ldr	r1, [sp, #44]	; 0x2c
    1922:	47a0      	blx	r4
        pestp[2][2] = term[2][0] * phit[0][2] + term[2][1] * phit[1][2] + term[2][2] * phit[2][2];

        pestp[2][2] = pestp[2][2] + model_variance;
    1924:	2200      	movs	r2, #0
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
        pestp[2][1] = term[2][0] * phit[0][1] + term[2][1] * phit[1][1] + term[2][2] * phit[2][1];
    1926:	9010      	str	r0, [sp, #64]	; 0x40
    1928:	9111      	str	r1, [sp, #68]	; 0x44
        pestp[2][2] = term[2][0] * phit[0][2] + term[2][1] * phit[1][2] + term[2][2] * phit[2][2];

        pestp[2][2] = pestp[2][2] + model_variance;
    192a:	9806      	ldr	r0, [sp, #24]
    192c:	9907      	ldr	r1, [sp, #28]
    192e:	2300      	movs	r3, #0
    1930:	47a8      	blx	r5
    1932:	0032      	movs	r2, r6
    1934:	003b      	movs	r3, r7
    1936:	47a0      	blx	r4
    1938:	9a02      	ldr	r2, [sp, #8]
    193a:	9b03      	ldr	r3, [sp, #12]
    193c:	47a0      	blx	r4
    193e:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
    1940:	9b3b      	ldr	r3, [sp, #236]	; 0xec
    1942:	47a0      	blx	r4
        /*
          Calculate Kalman Gain
        */
        det = (pestp[0][0]+altitude_variance)*(pestp[2][2] + acceleration_variance) - pestp[2][0] * pestp[0][2];
    1944:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
    1946:	9b3d      	ldr	r3, [sp, #244]	; 0xf4
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
        pestp[2][1] = term[2][0] * phit[0][1] + term[2][1] * phit[1][1] + term[2][2] * phit[2][1];
        pestp[2][2] = term[2][0] * phit[0][2] + term[2][1] * phit[1][2] + term[2][2] * phit[2][2];

        pestp[2][2] = pestp[2][2] + model_variance;
    1948:	9002      	str	r0, [sp, #8]
    194a:	9103      	str	r1, [sp, #12]
        /*
          Calculate Kalman Gain
        */
        det = (pestp[0][0]+altitude_variance)*(pestp[2][2] + acceleration_variance) - pestp[2][0] * pestp[0][2];
    194c:	9808      	ldr	r0, [sp, #32]
    194e:	9909      	ldr	r1, [sp, #36]	; 0x24
    1950:	47a0      	blx	r4
    1952:	9a3e      	ldr	r2, [sp, #248]	; 0xf8
    1954:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
    1956:	900a      	str	r0, [sp, #40]	; 0x28
    1958:	910b      	str	r1, [sp, #44]	; 0x2c
    195a:	9802      	ldr	r0, [sp, #8]
    195c:	9903      	ldr	r1, [sp, #12]
    195e:	47a0      	blx	r4
    1960:	9a00      	ldr	r2, [sp, #0]
    1962:	9b01      	ldr	r3, [sp, #4]
    1964:	900c      	str	r0, [sp, #48]	; 0x30
    1966:	910d      	str	r1, [sp, #52]	; 0x34
    1968:	9804      	ldr	r0, [sp, #16]
    196a:	9916      	ldr	r1, [sp, #88]	; 0x58
    196c:	47a8      	blx	r5
    196e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1970:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1972:	900e      	str	r0, [sp, #56]	; 0x38
    1974:	910f      	str	r1, [sp, #60]	; 0x3c
    1976:	980a      	ldr	r0, [sp, #40]	; 0x28
    1978:	990b      	ldr	r1, [sp, #44]	; 0x2c
    197a:	47a8      	blx	r5
    197c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    197e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1980:	4e98      	ldr	r6, [pc, #608]	; (1be4 <computeKalmanGains+0x71c>)
    1982:	47b0      	blx	r6

        kgain[0][0] = (pestp[0][0] * (pestp[2][2] + acceleration_variance) - pestp[0][2] * pestp[2][0])/det;
    1984:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1986:	9b0d      	ldr	r3, [sp, #52]	; 0x34

        pestp[2][2] = pestp[2][2] + model_variance;
        /*
          Calculate Kalman Gain
        */
        det = (pestp[0][0]+altitude_variance)*(pestp[2][2] + acceleration_variance) - pestp[2][0] * pestp[0][2];
    1988:	9006      	str	r0, [sp, #24]
    198a:	9107      	str	r1, [sp, #28]

        kgain[0][0] = (pestp[0][0] * (pestp[2][2] + acceleration_variance) - pestp[0][2] * pestp[2][0])/det;
    198c:	9808      	ldr	r0, [sp, #32]
    198e:	9909      	ldr	r1, [sp, #36]	; 0x24
    1990:	47a8      	blx	r5
    1992:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    1994:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1996:	47b0      	blx	r6
    1998:	9a06      	ldr	r2, [sp, #24]
    199a:	9b07      	ldr	r3, [sp, #28]
    199c:	4e92      	ldr	r6, [pc, #584]	; (1be8 <computeKalmanGains+0x720>)
    199e:	47b0      	blx	r6
    19a0:	9034      	str	r0, [sp, #208]	; 0xd0
    19a2:	9135      	str	r1, [sp, #212]	; 0xd4
    19a4:	9a34      	ldr	r2, [sp, #208]	; 0xd0
    19a6:	9b35      	ldr	r3, [sp, #212]	; 0xd4
    19a8:	4990      	ldr	r1, [pc, #576]	; (1bec <computeKalmanGains+0x724>)
    19aa:	600a      	str	r2, [r1, #0]
    19ac:	604b      	str	r3, [r1, #4]
        kgain[0][1] = (pestp[0][0] * (-pestp[0][2]) + pestp[0][2] * (pestp[0][0] + altitude_variance))/det;
    19ae:	9808      	ldr	r0, [sp, #32]
    19b0:	9909      	ldr	r1, [sp, #36]	; 0x24
    19b2:	2280      	movs	r2, #128	; 0x80
    19b4:	0612      	lsls	r2, r2, #24
    19b6:	4694      	mov	ip, r2
    19b8:	9b12      	ldr	r3, [sp, #72]	; 0x48
    19ba:	9a04      	ldr	r2, [sp, #16]
    19bc:	4463      	add	r3, ip
    19be:	932e      	str	r3, [sp, #184]	; 0xb8
    19c0:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    19c2:	47a8      	blx	r5
    19c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    19c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    19c8:	0006      	movs	r6, r0
    19ca:	000f      	movs	r7, r1
    19cc:	9804      	ldr	r0, [sp, #16]
    19ce:	9916      	ldr	r1, [sp, #88]	; 0x58
    19d0:	47a8      	blx	r5
    19d2:	0002      	movs	r2, r0
    19d4:	000b      	movs	r3, r1
    19d6:	0030      	movs	r0, r6
    19d8:	0039      	movs	r1, r7
    19da:	47a0      	blx	r4
    19dc:	9a06      	ldr	r2, [sp, #24]
    19de:	9b07      	ldr	r3, [sp, #28]
    19e0:	4e81      	ldr	r6, [pc, #516]	; (1be8 <computeKalmanGains+0x720>)
    19e2:	47b0      	blx	r6
    19e4:	900e      	str	r0, [sp, #56]	; 0x38
    19e6:	910f      	str	r1, [sp, #60]	; 0x3c
    19e8:	4980      	ldr	r1, [pc, #512]	; (1bec <computeKalmanGains+0x724>)
    19ea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    19ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    19ee:	608a      	str	r2, [r1, #8]
    19f0:	60cb      	str	r3, [r1, #12]
        kgain[1][0] = (pestp[1][0] * (pestp[2][2] + acceleration_variance) - pestp[1][2] * pestp[2][0])/det;
    19f2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    19f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    19f6:	982a      	ldr	r0, [sp, #168]	; 0xa8
    19f8:	992b      	ldr	r1, [sp, #172]	; 0xac
    19fa:	47a8      	blx	r5
    19fc:	9a00      	ldr	r2, [sp, #0]
    19fe:	9b01      	ldr	r3, [sp, #4]
    1a00:	0006      	movs	r6, r0
    1a02:	000f      	movs	r7, r1
    1a04:	982c      	ldr	r0, [sp, #176]	; 0xb0
    1a06:	992d      	ldr	r1, [sp, #180]	; 0xb4
    1a08:	47a8      	blx	r5
    1a0a:	0002      	movs	r2, r0
    1a0c:	000b      	movs	r3, r1
    1a0e:	0030      	movs	r0, r6
    1a10:	0039      	movs	r1, r7
    1a12:	4e74      	ldr	r6, [pc, #464]	; (1be4 <computeKalmanGains+0x71c>)
    1a14:	47b0      	blx	r6
    1a16:	9a06      	ldr	r2, [sp, #24]
    1a18:	9b07      	ldr	r3, [sp, #28]
    1a1a:	4e73      	ldr	r6, [pc, #460]	; (1be8 <computeKalmanGains+0x720>)
    1a1c:	47b0      	blx	r6
    1a1e:	0002      	movs	r2, r0
    1a20:	000b      	movs	r3, r1
    1a22:	9139      	str	r1, [sp, #228]	; 0xe4
    1a24:	4971      	ldr	r1, [pc, #452]	; (1bec <computeKalmanGains+0x724>)
    1a26:	9018      	str	r0, [sp, #96]	; 0x60
    1a28:	610a      	str	r2, [r1, #16]
    1a2a:	614b      	str	r3, [r1, #20]
        kgain[1][1] = (pestp[1][0] * (-pestp[0][2]) + pestp[1][2] * (pestp[0][0] + altitude_variance))/det;
    1a2c:	982a      	ldr	r0, [sp, #168]	; 0xa8
    1a2e:	992b      	ldr	r1, [sp, #172]	; 0xac
    1a30:	9a04      	ldr	r2, [sp, #16]
    1a32:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    1a34:	47a8      	blx	r5
    1a36:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    1a38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1a3a:	0006      	movs	r6, r0
    1a3c:	000f      	movs	r7, r1
    1a3e:	982c      	ldr	r0, [sp, #176]	; 0xb0
    1a40:	992d      	ldr	r1, [sp, #180]	; 0xb4
    1a42:	47a8      	blx	r5
    1a44:	0002      	movs	r2, r0
    1a46:	000b      	movs	r3, r1
    1a48:	0030      	movs	r0, r6
    1a4a:	0039      	movs	r1, r7
    1a4c:	47a0      	blx	r4
    1a4e:	9a06      	ldr	r2, [sp, #24]
    1a50:	9b07      	ldr	r3, [sp, #28]
    1a52:	4e65      	ldr	r6, [pc, #404]	; (1be8 <computeKalmanGains+0x720>)
    1a54:	47b0      	blx	r6
    1a56:	9012      	str	r0, [sp, #72]	; 0x48
    1a58:	9113      	str	r1, [sp, #76]	; 0x4c
    1a5a:	9a12      	ldr	r2, [sp, #72]	; 0x48
    1a5c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    1a5e:	4963      	ldr	r1, [pc, #396]	; (1bec <computeKalmanGains+0x724>)
    1a60:	618a      	str	r2, [r1, #24]
    1a62:	61cb      	str	r3, [r1, #28]
        kgain[2][0] = (pestp[2][0] * (pestp[2][2] + acceleration_variance) - pestp[2][2] * pestp[2][0])/det;
    1a64:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1a66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1a68:	9800      	ldr	r0, [sp, #0]
    1a6a:	9901      	ldr	r1, [sp, #4]
    1a6c:	47a8      	blx	r5
    1a6e:	9a02      	ldr	r2, [sp, #8]
    1a70:	9b03      	ldr	r3, [sp, #12]
    1a72:	0006      	movs	r6, r0
    1a74:	000f      	movs	r7, r1
    1a76:	9800      	ldr	r0, [sp, #0]
    1a78:	9901      	ldr	r1, [sp, #4]
    1a7a:	47a8      	blx	r5
    1a7c:	0002      	movs	r2, r0
    1a7e:	000b      	movs	r3, r1
    1a80:	0030      	movs	r0, r6
    1a82:	0039      	movs	r1, r7
    1a84:	4e57      	ldr	r6, [pc, #348]	; (1be4 <computeKalmanGains+0x71c>)
    1a86:	47b0      	blx	r6
    1a88:	9a06      	ldr	r2, [sp, #24]
    1a8a:	9b07      	ldr	r3, [sp, #28]
    1a8c:	4e56      	ldr	r6, [pc, #344]	; (1be8 <computeKalmanGains+0x720>)
    1a8e:	47b0      	blx	r6
    1a90:	9014      	str	r0, [sp, #80]	; 0x50
    1a92:	9115      	str	r1, [sp, #84]	; 0x54
    1a94:	9a14      	ldr	r2, [sp, #80]	; 0x50
    1a96:	9b15      	ldr	r3, [sp, #84]	; 0x54
    1a98:	4954      	ldr	r1, [pc, #336]	; (1bec <computeKalmanGains+0x724>)
    1a9a:	620a      	str	r2, [r1, #32]
    1a9c:	624b      	str	r3, [r1, #36]	; 0x24
        kgain[2][1] = (pestp[2][0] * (-pestp[0][2]) + pestp[2][2] * (pestp[0][0] + altitude_variance))/det;
    1a9e:	9800      	ldr	r0, [sp, #0]
    1aa0:	9901      	ldr	r1, [sp, #4]
    1aa2:	9a04      	ldr	r2, [sp, #16]
    1aa4:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    1aa6:	47a8      	blx	r5
    1aa8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    1aaa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1aac:	0006      	movs	r6, r0
    1aae:	000f      	movs	r7, r1
    1ab0:	9802      	ldr	r0, [sp, #8]
    1ab2:	9903      	ldr	r1, [sp, #12]
    1ab4:	47a8      	blx	r5
    1ab6:	0002      	movs	r2, r0
    1ab8:	000b      	movs	r3, r1
    1aba:	0030      	movs	r0, r6
    1abc:	0039      	movs	r1, r7
    1abe:	47a0      	blx	r4
    1ac0:	9a06      	ldr	r2, [sp, #24]
    1ac2:	9b07      	ldr	r3, [sp, #28]
    1ac4:	4e48      	ldr	r6, [pc, #288]	; (1be8 <computeKalmanGains+0x720>)
    1ac6:	47b0      	blx	r6
    1ac8:	9036      	str	r0, [sp, #216]	; 0xd8
    1aca:	9137      	str	r1, [sp, #220]	; 0xdc
    1acc:	9a36      	ldr	r2, [sp, #216]	; 0xd8
    1ace:	9b37      	ldr	r3, [sp, #220]	; 0xdc
    1ad0:	4946      	ldr	r1, [pc, #280]	; (1bec <computeKalmanGains+0x724>)

        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
    1ad2:	4e44      	ldr	r6, [pc, #272]	; (1be4 <computeKalmanGains+0x71c>)
        kgain[0][0] = (pestp[0][0] * (pestp[2][2] + acceleration_variance) - pestp[0][2] * pestp[2][0])/det;
        kgain[0][1] = (pestp[0][0] * (-pestp[0][2]) + pestp[0][2] * (pestp[0][0] + altitude_variance))/det;
        kgain[1][0] = (pestp[1][0] * (pestp[2][2] + acceleration_variance) - pestp[1][2] * pestp[2][0])/det;
        kgain[1][1] = (pestp[1][0] * (-pestp[0][2]) + pestp[1][2] * (pestp[0][0] + altitude_variance))/det;
        kgain[2][0] = (pestp[2][0] * (pestp[2][2] + acceleration_variance) - pestp[2][2] * pestp[2][0])/det;
        kgain[2][1] = (pestp[2][0] * (-pestp[0][2]) + pestp[2][2] * (pestp[0][0] + altitude_variance))/det;
    1ad4:	628a      	str	r2, [r1, #40]	; 0x28
    1ad6:	62cb      	str	r3, [r1, #44]	; 0x2c

        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
    1ad8:	9a34      	ldr	r2, [sp, #208]	; 0xd0
    1ada:	9b35      	ldr	r3, [sp, #212]	; 0xd4
    1adc:	2000      	movs	r0, #0
    1ade:	4944      	ldr	r1, [pc, #272]	; (1bf0 <computeKalmanGains+0x728>)
    1ae0:	47b0      	blx	r6
    1ae2:	0002      	movs	r2, r0
    1ae4:	000b      	movs	r3, r1
    1ae6:	900c      	str	r0, [sp, #48]	; 0x30
    1ae8:	910d      	str	r1, [sp, #52]	; 0x34
    1aea:	9808      	ldr	r0, [sp, #32]
    1aec:	9909      	ldr	r1, [sp, #36]	; 0x24
    1aee:	47a8      	blx	r5
    1af0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    1af2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1af4:	0006      	movs	r6, r0
    1af6:	000f      	movs	r7, r1
    1af8:	9800      	ldr	r0, [sp, #0]
    1afa:	9901      	ldr	r1, [sp, #4]
    1afc:	47a8      	blx	r5
    1afe:	0002      	movs	r2, r0
    1b00:	000b      	movs	r3, r1
    1b02:	0030      	movs	r0, r6
    1b04:	0039      	movs	r1, r7
    1b06:	4e37      	ldr	r6, [pc, #220]	; (1be4 <computeKalmanGains+0x71c>)
    1b08:	47b0      	blx	r6
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
    1b0a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1b0c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
        kgain[1][0] = (pestp[1][0] * (pestp[2][2] + acceleration_variance) - pestp[1][2] * pestp[2][0])/det;
        kgain[1][1] = (pestp[1][0] * (-pestp[0][2]) + pestp[1][2] * (pestp[0][0] + altitude_variance))/det;
        kgain[2][0] = (pestp[2][0] * (pestp[2][2] + acceleration_variance) - pestp[2][2] * pestp[2][0])/det;
        kgain[2][1] = (pestp[2][0] * (-pestp[0][2]) + pestp[2][2] * (pestp[0][0] + altitude_variance))/det;

        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
    1b0e:	9006      	str	r0, [sp, #24]
    1b10:	9107      	str	r1, [sp, #28]
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
    1b12:	9830      	ldr	r0, [sp, #192]	; 0xc0
    1b14:	9931      	ldr	r1, [sp, #196]	; 0xc4
    1b16:	47a8      	blx	r5
    1b18:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    1b1a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1b1c:	0006      	movs	r6, r0
    1b1e:	000f      	movs	r7, r1
    1b20:	9810      	ldr	r0, [sp, #64]	; 0x40
    1b22:	9911      	ldr	r1, [sp, #68]	; 0x44
    1b24:	47a8      	blx	r5
    1b26:	0002      	movs	r2, r0
    1b28:	000b      	movs	r3, r1
    1b2a:	0030      	movs	r0, r6
    1b2c:	0039      	movs	r1, r7
    1b2e:	4e2d      	ldr	r6, [pc, #180]	; (1be4 <computeKalmanGains+0x71c>)
    1b30:	47b0      	blx	r6
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
    1b32:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1b34:	9b0d      	ldr	r3, [sp, #52]	; 0x34
        kgain[1][1] = (pestp[1][0] * (-pestp[0][2]) + pestp[1][2] * (pestp[0][0] + altitude_variance))/det;
        kgain[2][0] = (pestp[2][0] * (pestp[2][2] + acceleration_variance) - pestp[2][2] * pestp[2][0])/det;
        kgain[2][1] = (pestp[2][0] * (-pestp[0][2]) + pestp[2][2] * (pestp[0][0] + altitude_variance))/det;

        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
    1b36:	900a      	str	r0, [sp, #40]	; 0x28
    1b38:	910b      	str	r1, [sp, #44]	; 0x2c
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
    1b3a:	9804      	ldr	r0, [sp, #16]
    1b3c:	9916      	ldr	r1, [sp, #88]	; 0x58
    1b3e:	47a8      	blx	r5
    1b40:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    1b42:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1b44:	0006      	movs	r6, r0
    1b46:	000f      	movs	r7, r1
    1b48:	9802      	ldr	r0, [sp, #8]
    1b4a:	9903      	ldr	r1, [sp, #12]
    1b4c:	47a8      	blx	r5
    1b4e:	0002      	movs	r2, r0
    1b50:	000b      	movs	r3, r1
    1b52:	0030      	movs	r0, r6
    1b54:	0039      	movs	r1, r7
    1b56:	4e23      	ldr	r6, [pc, #140]	; (1be4 <computeKalmanGains+0x71c>)
    1b58:	47b0      	blx	r6
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
    1b5a:	2280      	movs	r2, #128	; 0x80
    1b5c:	0612      	lsls	r2, r2, #24
    1b5e:	4694      	mov	ip, r2
    1b60:	9b39      	ldr	r3, [sp, #228]	; 0xe4
    1b62:	9a18      	ldr	r2, [sp, #96]	; 0x60
    1b64:	4463      	add	r3, ip
    1b66:	932e      	str	r3, [sp, #184]	; 0xb8
    1b68:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
        kgain[2][0] = (pestp[2][0] * (pestp[2][2] + acceleration_variance) - pestp[2][2] * pestp[2][0])/det;
        kgain[2][1] = (pestp[2][0] * (-pestp[0][2]) + pestp[2][2] * (pestp[0][0] + altitude_variance))/det;

        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
    1b6a:	900c      	str	r0, [sp, #48]	; 0x30
    1b6c:	910d      	str	r1, [sp, #52]	; 0x34
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
    1b6e:	9808      	ldr	r0, [sp, #32]
    1b70:	9909      	ldr	r1, [sp, #36]	; 0x24
    1b72:	47a8      	blx	r5
    1b74:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
    1b76:	9b2b      	ldr	r3, [sp, #172]	; 0xac
    1b78:	47a0      	blx	r4
    1b7a:	9a12      	ldr	r2, [sp, #72]	; 0x48
    1b7c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    1b7e:	0006      	movs	r6, r0
    1b80:	000f      	movs	r7, r1
    1b82:	9800      	ldr	r0, [sp, #0]
    1b84:	9901      	ldr	r1, [sp, #4]
    1b86:	47a8      	blx	r5
    1b88:	0002      	movs	r2, r0
    1b8a:	000b      	movs	r3, r1
    1b8c:	0030      	movs	r0, r6
    1b8e:	0039      	movs	r1, r7
    1b90:	4e14      	ldr	r6, [pc, #80]	; (1be4 <computeKalmanGains+0x71c>)
    1b92:	47b0      	blx	r6
        pest[1][1] = pestp[0][1] * (-kgain[1][0]) + pestp[1][1] - kgain[1][1]*pestp[2][1];
    1b94:	9a32      	ldr	r2, [sp, #200]	; 0xc8
    1b96:	9b33      	ldr	r3, [sp, #204]	; 0xcc
        kgain[2][1] = (pestp[2][0] * (-pestp[0][2]) + pestp[2][2] * (pestp[0][0] + altitude_variance))/det;

        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
    1b98:	9008      	str	r0, [sp, #32]
    1b9a:	9109      	str	r1, [sp, #36]	; 0x24
        pest[1][1] = pestp[0][1] * (-kgain[1][0]) + pestp[1][1] - kgain[1][1]*pestp[2][1];
    1b9c:	9826      	ldr	r0, [sp, #152]	; 0x98
    1b9e:	9927      	ldr	r1, [sp, #156]	; 0x9c
    1ba0:	47a0      	blx	r4
    1ba2:	4a0c      	ldr	r2, [pc, #48]	; (1bd4 <computeKalmanGains+0x70c>)
    1ba4:	0006      	movs	r6, r0
    1ba6:	000f      	movs	r7, r1
    1ba8:	9828      	ldr	r0, [sp, #160]	; 0xa0
    1baa:	9929      	ldr	r1, [sp, #164]	; 0xa4
    1bac:	4b0a      	ldr	r3, [pc, #40]	; (1bd8 <computeKalmanGains+0x710>)
    1bae:	47a8      	blx	r5
    1bb0:	0002      	movs	r2, r0
    1bb2:	000b      	movs	r3, r1
    1bb4:	0030      	movs	r0, r6
    1bb6:	0039      	movs	r1, r7
    1bb8:	47a0      	blx	r4
    1bba:	9a18      	ldr	r2, [sp, #96]	; 0x60
    1bbc:	0006      	movs	r6, r0
    1bbe:	000f      	movs	r7, r1
    1bc0:	9830      	ldr	r0, [sp, #192]	; 0xc0
    1bc2:	9931      	ldr	r1, [sp, #196]	; 0xc4
    1bc4:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    1bc6:	47a8      	blx	r5
    1bc8:	0002      	movs	r2, r0
    1bca:	000b      	movs	r3, r1
    1bcc:	0030      	movs	r0, r6
    1bce:	0039      	movs	r1, r7
    1bd0:	47a0      	blx	r4
    1bd2:	e00f      	b.n	1bf4 <computeKalmanGains+0x72c>
    1bd4:	47ae147b 	.word	0x47ae147b
    1bd8:	3f747ae1 	.word	0x3f747ae1
    1bdc:	eb1c432d 	.word	0xeb1c432d
    1be0:	3eea36e2 	.word	0x3eea36e2
    1be4:	00005645 	.word	0x00005645
    1be8:	00004909 	.word	0x00004909
    1bec:	20000650 	.word	0x20000650
    1bf0:	3ff00000 	.word	0x3ff00000
    1bf4:	9a12      	ldr	r2, [sp, #72]	; 0x48
    1bf6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    1bf8:	0006      	movs	r6, r0
    1bfa:	000f      	movs	r7, r1
    1bfc:	9810      	ldr	r0, [sp, #64]	; 0x40
    1bfe:	9911      	ldr	r1, [sp, #68]	; 0x44
    1c00:	47a8      	blx	r5
    1c02:	0002      	movs	r2, r0
    1c04:	000b      	movs	r3, r1
    1c06:	0030      	movs	r0, r6
    1c08:	0039      	movs	r1, r7
    1c0a:	4e50      	ldr	r6, [pc, #320]	; (1d4c <computeKalmanGains+0x884>)
    1c0c:	47b0      	blx	r6
        pest[1][2] = pestp[0][2] * (-kgain[1][0]) + pestp[1][2] - kgain[1][1]*pestp[2][2];
    1c0e:	9a18      	ldr	r2, [sp, #96]	; 0x60

        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
        pest[1][1] = pestp[0][1] * (-kgain[1][0]) + pestp[1][1] - kgain[1][1]*pestp[2][1];
    1c10:	900e      	str	r0, [sp, #56]	; 0x38
    1c12:	910f      	str	r1, [sp, #60]	; 0x3c
        pest[1][2] = pestp[0][2] * (-kgain[1][0]) + pestp[1][2] - kgain[1][1]*pestp[2][2];
    1c14:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    1c16:	9804      	ldr	r0, [sp, #16]
    1c18:	9916      	ldr	r1, [sp, #88]	; 0x58
    1c1a:	47a8      	blx	r5
    1c1c:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
    1c1e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    1c20:	47a0      	blx	r4
    1c22:	9a12      	ldr	r2, [sp, #72]	; 0x48
    1c24:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    1c26:	0006      	movs	r6, r0
    1c28:	000f      	movs	r7, r1
    1c2a:	9802      	ldr	r0, [sp, #8]
    1c2c:	9903      	ldr	r1, [sp, #12]
    1c2e:	47a8      	blx	r5
    1c30:	4c46      	ldr	r4, [pc, #280]	; (1d4c <computeKalmanGains+0x884>)
    1c32:	0002      	movs	r2, r0
    1c34:	000b      	movs	r3, r1
    1c36:	0030      	movs	r0, r6
    1c38:	0039      	movs	r1, r7
    1c3a:	47a0      	blx	r4
        pest[2][0] = (1.0 - kgain[2][1]) * pestp[2][0] - kgain[2][0] * pestp[2][0];
    1c3c:	9a36      	ldr	r2, [sp, #216]	; 0xd8
    1c3e:	9b37      	ldr	r3, [sp, #220]	; 0xdc
        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
        pest[1][1] = pestp[0][1] * (-kgain[1][0]) + pestp[1][1] - kgain[1][1]*pestp[2][1];
        pest[1][2] = pestp[0][2] * (-kgain[1][0]) + pestp[1][2] - kgain[1][1]*pestp[2][2];
    1c40:	9004      	str	r0, [sp, #16]
    1c42:	9105      	str	r1, [sp, #20]
        pest[2][0] = (1.0 - kgain[2][1]) * pestp[2][0] - kgain[2][0] * pestp[2][0];
    1c44:	2000      	movs	r0, #0
    1c46:	4942      	ldr	r1, [pc, #264]	; (1d50 <computeKalmanGains+0x888>)
    1c48:	47a0      	blx	r4
    1c4a:	0002      	movs	r2, r0
    1c4c:	000b      	movs	r3, r1
    1c4e:	9012      	str	r0, [sp, #72]	; 0x48
    1c50:	9113      	str	r1, [sp, #76]	; 0x4c
    1c52:	9800      	ldr	r0, [sp, #0]
    1c54:	9901      	ldr	r1, [sp, #4]
    1c56:	47a8      	blx	r5
    1c58:	9a14      	ldr	r2, [sp, #80]	; 0x50
    1c5a:	9b15      	ldr	r3, [sp, #84]	; 0x54
    1c5c:	0006      	movs	r6, r0
    1c5e:	000f      	movs	r7, r1
    1c60:	9800      	ldr	r0, [sp, #0]
    1c62:	9901      	ldr	r1, [sp, #4]
    1c64:	47a8      	blx	r5
    1c66:	0002      	movs	r2, r0
    1c68:	000b      	movs	r3, r1
    1c6a:	0030      	movs	r0, r6
    1c6c:	0039      	movs	r1, r7
    1c6e:	47a0      	blx	r4
    1c70:	9000      	str	r0, [sp, #0]
    1c72:	9101      	str	r1, [sp, #4]
        pest[2][1] = (1.0 - kgain[2][1]) * pestp[2][1] - kgain[2][0] * pestp[2][1];
    1c74:	9a12      	ldr	r2, [sp, #72]	; 0x48
    1c76:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    1c78:	9810      	ldr	r0, [sp, #64]	; 0x40
    1c7a:	9911      	ldr	r1, [sp, #68]	; 0x44
    1c7c:	47a8      	blx	r5
    1c7e:	9a14      	ldr	r2, [sp, #80]	; 0x50
    1c80:	9b15      	ldr	r3, [sp, #84]	; 0x54
    1c82:	0006      	movs	r6, r0
    1c84:	000f      	movs	r7, r1
    1c86:	9810      	ldr	r0, [sp, #64]	; 0x40
    1c88:	9911      	ldr	r1, [sp, #68]	; 0x44
    1c8a:	47a8      	blx	r5
    1c8c:	0002      	movs	r2, r0
    1c8e:	000b      	movs	r3, r1
    1c90:	0030      	movs	r0, r6
    1c92:	0039      	movs	r1, r7
    1c94:	47a0      	blx	r4
        pest[2][2] = (1.0 - kgain[2][1]) * pestp[2][2] - kgain[2][0] * pestp[2][2];
    1c96:	9a12      	ldr	r2, [sp, #72]	; 0x48
    1c98:	9b13      	ldr	r3, [sp, #76]	; 0x4c
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
        pest[1][1] = pestp[0][1] * (-kgain[1][0]) + pestp[1][1] - kgain[1][1]*pestp[2][1];
        pest[1][2] = pestp[0][2] * (-kgain[1][0]) + pestp[1][2] - kgain[1][1]*pestp[2][2];
        pest[2][0] = (1.0 - kgain[2][1]) * pestp[2][0] - kgain[2][0] * pestp[2][0];
        pest[2][1] = (1.0 - kgain[2][1]) * pestp[2][1] - kgain[2][0] * pestp[2][1];
    1c9a:	9010      	str	r0, [sp, #64]	; 0x40
    1c9c:	9111      	str	r1, [sp, #68]	; 0x44
        pest[2][2] = (1.0 - kgain[2][1]) * pestp[2][2] - kgain[2][0] * pestp[2][2];
    1c9e:	9802      	ldr	r0, [sp, #8]
    1ca0:	9903      	ldr	r1, [sp, #12]
    1ca2:	47a8      	blx	r5
    1ca4:	9a14      	ldr	r2, [sp, #80]	; 0x50
    1ca6:	9b15      	ldr	r3, [sp, #84]	; 0x54
    1ca8:	0006      	movs	r6, r0
    1caa:	000f      	movs	r7, r1
    1cac:	9802      	ldr	r0, [sp, #8]
    1cae:	9903      	ldr	r1, [sp, #12]
    1cb0:	47a8      	blx	r5
    1cb2:	000b      	movs	r3, r1
    1cb4:	0002      	movs	r2, r0
    1cb6:	0039      	movs	r1, r7
    1cb8:	0030      	movs	r0, r6
    1cba:	47a0      	blx	r4
         * time through the mill. Because I have noticed very early convergance
         * in a few cases (< 20 iterations) I am delaying this for at least
         * 100 iterations.
         */
        notdone = 0;
        k++;
    1cbc:	2400      	movs	r4, #0
    1cbe:	9b38      	ldr	r3, [sp, #224]	; 0xe0
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
        pest[1][1] = pestp[0][1] * (-kgain[1][0]) + pestp[1][1] - kgain[1][1]*pestp[2][1];
        pest[1][2] = pestp[0][2] * (-kgain[1][0]) + pestp[1][2] - kgain[1][1]*pestp[2][2];
        pest[2][0] = (1.0 - kgain[2][1]) * pestp[2][0] - kgain[2][0] * pestp[2][0];
        pest[2][1] = (1.0 - kgain[2][1]) * pestp[2][1] - kgain[2][0] * pestp[2][1];
        pest[2][2] = (1.0 - kgain[2][1]) * pestp[2][2] - kgain[2][0] * pestp[2][2];
    1cc0:	9002      	str	r0, [sp, #8]
    1cc2:	9103      	str	r1, [sp, #12]
         * time through the mill. Because I have noticed very early convergance
         * in a few cases (< 20 iterations) I am delaying this for at least
         * 100 iterations.
         */
        notdone = 0;
        k++;
    1cc4:	3301      	adds	r3, #1
    1cc6:	9338      	str	r3, [sp, #224]	; 0xe0
        for( i = 0; i <= 2; i++)
            for( j = 0; j <= 1; j++) {
                if( (kgain[i][j] - lastkgain[i][j])/lastkgain[i][j] > 0.00001)
    1cc8:	4b22      	ldr	r3, [pc, #136]	; (1d54 <computeKalmanGains+0x88c>)
        /* Check for convergance. Criteria is less than .001% change from last
         * time through the mill. Because I have noticed very early convergance
         * in a few cases (< 20 iterations) I am delaying this for at least
         * 100 iterations.
         */
        notdone = 0;
    1cca:	9414      	str	r4, [sp, #80]	; 0x50
        k++;
        for( i = 0; i <= 2; i++)
            for( j = 0; j <= 1; j++) {
                if( (kgain[i][j] - lastkgain[i][j])/lastkgain[i][j] > 0.00001)
    1ccc:	9326      	str	r3, [sp, #152]	; 0x98
    1cce:	4b1f      	ldr	r3, [pc, #124]	; (1d4c <computeKalmanGains+0x884>)
    1cd0:	9328      	str	r3, [sp, #160]	; 0xa0
    1cd2:	ab40      	add	r3, sp, #256	; 0x100
    1cd4:	18e5      	adds	r5, r4, r3

        pestp[2][2] = pestp[2][2] + model_variance;
        /*
          Calculate Kalman Gain
        */
        det = (pestp[0][0]+altitude_variance)*(pestp[2][2] + acceleration_variance) - pestp[2][0] * pestp[0][2];
    1cd6:	2300      	movs	r3, #0
    1cd8:	9516      	str	r5, [sp, #88]	; 0x58
    1cda:	9312      	str	r3, [sp, #72]	; 0x48
         */
        notdone = 0;
        k++;
        for( i = 0; i <= 2; i++)
            for( j = 0; j <= 1; j++) {
                if( (kgain[i][j] - lastkgain[i][j])/lastkgain[i][j] > 0.00001)
    1cdc:	9b12      	ldr	r3, [sp, #72]	; 0x48
    1cde:	9a26      	ldr	r2, [sp, #152]	; 0x98
    1ce0:	18e3      	adds	r3, r4, r3
    1ce2:	189b      	adds	r3, r3, r2
    1ce4:	681a      	ldr	r2, [r3, #0]
    1ce6:	685b      	ldr	r3, [r3, #4]
    1ce8:	9218      	str	r2, [sp, #96]	; 0x60
    1cea:	9319      	str	r3, [sp, #100]	; 0x64
    1cec:	9818      	ldr	r0, [sp, #96]	; 0x60
    1cee:	9919      	ldr	r1, [sp, #100]	; 0x64
    1cf0:	9b16      	ldr	r3, [sp, #88]	; 0x58
    1cf2:	9d28      	ldr	r5, [sp, #160]	; 0xa0
    1cf4:	681e      	ldr	r6, [r3, #0]
    1cf6:	685f      	ldr	r7, [r3, #4]
    1cf8:	0032      	movs	r2, r6
    1cfa:	003b      	movs	r3, r7
    1cfc:	47a8      	blx	r5
    1cfe:	0032      	movs	r2, r6
    1d00:	003b      	movs	r3, r7
    1d02:	4d15      	ldr	r5, [pc, #84]	; (1d58 <computeKalmanGains+0x890>)
    1d04:	47a8      	blx	r5
    1d06:	4b15      	ldr	r3, [pc, #84]	; (1d5c <computeKalmanGains+0x894>)
    1d08:	4a15      	ldr	r2, [pc, #84]	; (1d60 <computeKalmanGains+0x898>)
    1d0a:	4e16      	ldr	r6, [pc, #88]	; (1d64 <computeKalmanGains+0x89c>)
    1d0c:	47b0      	blx	r6
                    notdone++;
    1d0e:	1e43      	subs	r3, r0, #1
    1d10:	4198      	sbcs	r0, r3
    1d12:	9b14      	ldr	r3, [sp, #80]	; 0x50
                lastkgain[i][j] = kgain[i][j];
    1d14:	9916      	ldr	r1, [sp, #88]	; 0x58
        notdone = 0;
        k++;
        for( i = 0; i <= 2; i++)
            for( j = 0; j <= 1; j++) {
                if( (kgain[i][j] - lastkgain[i][j])/lastkgain[i][j] > 0.00001)
                    notdone++;
    1d16:	181b      	adds	r3, r3, r0
    1d18:	9314      	str	r3, [sp, #80]	; 0x50
                lastkgain[i][j] = kgain[i][j];
    1d1a:	9a18      	ldr	r2, [sp, #96]	; 0x60
    1d1c:	9b19      	ldr	r3, [sp, #100]	; 0x64
    1d1e:	c10c      	stmia	r1!, {r2, r3}
    1d20:	9b12      	ldr	r3, [sp, #72]	; 0x48
    1d22:	9116      	str	r1, [sp, #88]	; 0x58
    1d24:	3308      	adds	r3, #8
    1d26:	9312      	str	r3, [sp, #72]	; 0x48
         * 100 iterations.
         */
        notdone = 0;
        k++;
        for( i = 0; i <= 2; i++)
            for( j = 0; j <= 1; j++) {
    1d28:	2b10      	cmp	r3, #16
    1d2a:	d1d7      	bne.n	1cdc <computeKalmanGains+0x814>
    1d2c:	3410      	adds	r4, #16
         * in a few cases (< 20 iterations) I am delaying this for at least
         * 100 iterations.
         */
        notdone = 0;
        k++;
        for( i = 0; i <= 2; i++)
    1d2e:	2c30      	cmp	r4, #48	; 0x30
    1d30:	d1cf      	bne.n	1cd2 <computeKalmanGains+0x80a>
            for( j = 0; j <= 1; j++) {
                if( (kgain[i][j] - lastkgain[i][j])/lastkgain[i][j] > 0.00001)
                    notdone++;
                lastkgain[i][j] = kgain[i][j];
            }
        if( notdone || k < 100)
    1d32:	9b14      	ldr	r3, [sp, #80]	; 0x50
    1d34:	2b00      	cmp	r3, #0
    1d36:	d001      	beq.n	1d3c <computeKalmanGains+0x874>
    1d38:	f7ff fc2c 	bl	1594 <computeKalmanGains+0xcc>
    1d3c:	9b38      	ldr	r3, [sp, #224]	; 0xe0
    1d3e:	2b63      	cmp	r3, #99	; 0x63
    1d40:	dc01      	bgt.n	1d46 <computeKalmanGains+0x87e>
    1d42:	f7ff fc27 	bl	1594 <computeKalmanGains+0xcc>
            continue;
        else
            break;
    }
}
    1d46:	b04d      	add	sp, #308	; 0x134
    1d48:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1d4a:	46c0      	nop			; (mov r8, r8)
    1d4c:	00005645 	.word	0x00005645
    1d50:	3ff00000 	.word	0x3ff00000
    1d54:	20000650 	.word	0x20000650
    1d58:	00004909 	.word	0x00004909
    1d5c:	3ee4f8b5 	.word	0x3ee4f8b5
    1d60:	88e368f1 	.word	0x88e368f1
    1d64:	00003bbd 	.word	0x00003bbd

00001d68 <computeKalmanStates>:

void computeKalmanStates() {
    1d68:	b5f0      	push	{r4, r5, r6, r7, lr}

    double alt_inovation, accel_inovation, acceleration;

    if (altimeter.pointingUp) {
    1d6a:	4b85      	ldr	r3, [pc, #532]	; (1f80 <computeKalmanStates+0x218>)
        else
            break;
    }
}

void computeKalmanStates() {
    1d6c:	b08f      	sub	sp, #60	; 0x3c

    double alt_inovation, accel_inovation, acceleration;

    if (altimeter.pointingUp) {
    1d6e:	7b1a      	ldrb	r2, [r3, #12]
    1d70:	4c84      	ldr	r4, [pc, #528]	; (1f84 <computeKalmanStates+0x21c>)
    1d72:	4b85      	ldr	r3, [pc, #532]	; (1f88 <computeKalmanStates+0x220>)
    1d74:	4e85      	ldr	r6, [pc, #532]	; (1f8c <computeKalmanStates+0x224>)
    1d76:	4d86      	ldr	r5, [pc, #536]	; (1f90 <computeKalmanStates+0x228>)
    1d78:	2a00      	cmp	r2, #0
    1d7a:	d004      	beq.n	1d86 <computeKalmanStates+0x1e>
        acceleration = (-sample.accelZ - offsets.gravityOffset) * 32.17417;
    1d7c:	2180      	movs	r1, #128	; 0x80
    1d7e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    1d80:	0609      	lsls	r1, r1, #24
    1d82:	1850      	adds	r0, r2, r1
    1d84:	e000      	b.n	1d88 <computeKalmanStates+0x20>
    } else {
        acceleration = (sample.accelZ - offsets.gravityOffset) * 32.17417;
    1d86:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    1d88:	4798      	blx	r3
    1d8a:	68b2      	ldr	r2, [r6, #8]
    1d8c:	68f3      	ldr	r3, [r6, #12]
    1d8e:	47a8      	blx	r5
    1d90:	4a80      	ldr	r2, [pc, #512]	; (1f94 <computeKalmanStates+0x22c>)
    1d92:	4b81      	ldr	r3, [pc, #516]	; (1f98 <computeKalmanStates+0x230>)
    1d94:	4d81      	ldr	r5, [pc, #516]	; (1f9c <computeKalmanStates+0x234>)
    1d96:	47a8      	blx	r5
    }

    double pressure = sample.altitudefeet;
    1d98:	6c23      	ldr	r3, [r4, #64]	; 0x40
    1d9a:	6c64      	ldr	r4, [r4, #68]	; 0x44
    1d9c:	9300      	str	r3, [sp, #0]
    1d9e:	9401      	str	r4, [sp, #4]

    if (altitude == 0) {
    1da0:	4c7f      	ldr	r4, [pc, #508]	; (1fa0 <computeKalmanStates+0x238>)
    double alt_inovation, accel_inovation, acceleration;

    if (altimeter.pointingUp) {
        acceleration = (-sample.accelZ - offsets.gravityOffset) * 32.17417;
    } else {
        acceleration = (sample.accelZ - offsets.gravityOffset) * 32.17417;
    1da2:	0006      	movs	r6, r0
    1da4:	000f      	movs	r7, r1
    }

    double pressure = sample.altitudefeet;

    if (altitude == 0) {
    1da6:	6820      	ldr	r0, [r4, #0]
    1da8:	6861      	ldr	r1, [r4, #4]
    1daa:	2200      	movs	r2, #0
    1dac:	2300      	movs	r3, #0
    1dae:	4d7d      	ldr	r5, [pc, #500]	; (1fa4 <computeKalmanStates+0x23c>)
    1db0:	47a8      	blx	r5
    1db2:	2800      	cmp	r0, #0
    1db4:	d003      	beq.n	1dbe <computeKalmanStates+0x56>
        altitude = pressure;
    1db6:	9a00      	ldr	r2, [sp, #0]
    1db8:	9b01      	ldr	r3, [sp, #4]
    1dba:	6022      	str	r2, [r4, #0]
    1dbc:	6063      	str	r3, [r4, #4]
    }

    /* Compute the innovations */
    alt_inovation = pressure - estp[0];
    1dbe:	9800      	ldr	r0, [sp, #0]
    1dc0:	9901      	ldr	r1, [sp, #4]
    1dc2:	4b79      	ldr	r3, [pc, #484]	; (1fa8 <computeKalmanStates+0x240>)
    1dc4:	4c72      	ldr	r4, [pc, #456]	; (1f90 <computeKalmanStates+0x228>)
    1dc6:	681a      	ldr	r2, [r3, #0]
    1dc8:	685b      	ldr	r3, [r3, #4]
    1dca:	47a0      	blx	r4
    accel_inovation = acceleration - estp[2];
    1dcc:	4b76      	ldr	r3, [pc, #472]	; (1fa8 <computeKalmanStates+0x240>)
    if (altitude == 0) {
        altitude = pressure;
    }

    /* Compute the innovations */
    alt_inovation = pressure - estp[0];
    1dce:	9006      	str	r0, [sp, #24]
    1dd0:	9107      	str	r1, [sp, #28]
    accel_inovation = acceleration - estp[2];
    1dd2:	691a      	ldr	r2, [r3, #16]
    1dd4:	695b      	ldr	r3, [r3, #20]
    1dd6:	0030      	movs	r0, r6
    1dd8:	0039      	movs	r1, r7
    1dda:	47a0      	blx	r4


    /* Propagate state */
    estp[0] = phi[0][0] * altitude + phi[0][1] *velocity + phi[0][2] * accel;
    1ddc:	4b70      	ldr	r3, [pc, #448]	; (1fa0 <computeKalmanStates+0x238>)
    1dde:	4d6f      	ldr	r5, [pc, #444]	; (1f9c <computeKalmanStates+0x234>)
    1de0:	685c      	ldr	r4, [r3, #4]
    1de2:	681b      	ldr	r3, [r3, #0]
    1de4:	9300      	str	r3, [sp, #0]
    1de6:	9401      	str	r4, [sp, #4]
    1de8:	4b70      	ldr	r3, [pc, #448]	; (1fac <computeKalmanStates+0x244>)
        altitude = pressure;
    }

    /* Compute the innovations */
    alt_inovation = pressure - estp[0];
    accel_inovation = acceleration - estp[2];
    1dea:	9008      	str	r0, [sp, #32]
    1dec:	9109      	str	r1, [sp, #36]	; 0x24


    /* Propagate state */
    estp[0] = phi[0][0] * altitude + phi[0][1] *velocity + phi[0][2] * accel;
    1dee:	685c      	ldr	r4, [r3, #4]
    1df0:	681b      	ldr	r3, [r3, #0]
    1df2:	9800      	ldr	r0, [sp, #0]
    1df4:	9901      	ldr	r1, [sp, #4]
    1df6:	9302      	str	r3, [sp, #8]
    1df8:	9403      	str	r4, [sp, #12]
    1dfa:	4b6d      	ldr	r3, [pc, #436]	; (1fb0 <computeKalmanStates+0x248>)
    1dfc:	685c      	ldr	r4, [r3, #4]
    1dfe:	681b      	ldr	r3, [r3, #0]
    1e00:	9304      	str	r3, [sp, #16]
    1e02:	9405      	str	r4, [sp, #20]
    1e04:	4c6b      	ldr	r4, [pc, #428]	; (1fb4 <computeKalmanStates+0x24c>)
    1e06:	6822      	ldr	r2, [r4, #0]
    1e08:	6863      	ldr	r3, [r4, #4]
    1e0a:	47a8      	blx	r5
    1e0c:	68a2      	ldr	r2, [r4, #8]
    1e0e:	68e3      	ldr	r3, [r4, #12]
    1e10:	0006      	movs	r6, r0
    1e12:	000f      	movs	r7, r1
    1e14:	9802      	ldr	r0, [sp, #8]
    1e16:	9903      	ldr	r1, [sp, #12]
    1e18:	47a8      	blx	r5
    1e1a:	0002      	movs	r2, r0
    1e1c:	000b      	movs	r3, r1
    1e1e:	0030      	movs	r0, r6
    1e20:	0039      	movs	r1, r7
    1e22:	4e65      	ldr	r6, [pc, #404]	; (1fb8 <computeKalmanStates+0x250>)
    1e24:	47b0      	blx	r6
    1e26:	6922      	ldr	r2, [r4, #16]
    1e28:	6963      	ldr	r3, [r4, #20]
    1e2a:	0006      	movs	r6, r0
    1e2c:	000f      	movs	r7, r1
    1e2e:	9804      	ldr	r0, [sp, #16]
    1e30:	9905      	ldr	r1, [sp, #20]
    1e32:	47a8      	blx	r5
    1e34:	0002      	movs	r2, r0
    1e36:	000b      	movs	r3, r1
    1e38:	0030      	movs	r0, r6
    1e3a:	0039      	movs	r1, r7
    1e3c:	4e5e      	ldr	r6, [pc, #376]	; (1fb8 <computeKalmanStates+0x250>)
    1e3e:	47b0      	blx	r6
    1e40:	900a      	str	r0, [sp, #40]	; 0x28
    1e42:	910b      	str	r1, [sp, #44]	; 0x2c
    1e44:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    1e46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1e48:	4957      	ldr	r1, [pc, #348]	; (1fa8 <computeKalmanStates+0x240>)
    1e4a:	600a      	str	r2, [r1, #0]
    1e4c:	604b      	str	r3, [r1, #4]
    estp[1] = phi[1][0] * altitude + phi[1][1] * velocity + phi[1][2] * accel;
    1e4e:	69a2      	ldr	r2, [r4, #24]
    1e50:	69e3      	ldr	r3, [r4, #28]
    1e52:	9800      	ldr	r0, [sp, #0]
    1e54:	9901      	ldr	r1, [sp, #4]
    1e56:	47a8      	blx	r5
    1e58:	6a22      	ldr	r2, [r4, #32]
    1e5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    1e5c:	0006      	movs	r6, r0
    1e5e:	000f      	movs	r7, r1
    1e60:	9802      	ldr	r0, [sp, #8]
    1e62:	9903      	ldr	r1, [sp, #12]
    1e64:	47a8      	blx	r5
    1e66:	0002      	movs	r2, r0
    1e68:	000b      	movs	r3, r1
    1e6a:	0030      	movs	r0, r6
    1e6c:	0039      	movs	r1, r7
    1e6e:	4e52      	ldr	r6, [pc, #328]	; (1fb8 <computeKalmanStates+0x250>)
    1e70:	47b0      	blx	r6
    1e72:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    1e74:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    1e76:	0006      	movs	r6, r0
    1e78:	000f      	movs	r7, r1
    1e7a:	9804      	ldr	r0, [sp, #16]
    1e7c:	9905      	ldr	r1, [sp, #20]
    1e7e:	47a8      	blx	r5
    1e80:	0002      	movs	r2, r0
    1e82:	000b      	movs	r3, r1
    1e84:	0030      	movs	r0, r6
    1e86:	0039      	movs	r1, r7
    1e88:	4e4b      	ldr	r6, [pc, #300]	; (1fb8 <computeKalmanStates+0x250>)
    1e8a:	47b0      	blx	r6
    1e8c:	900c      	str	r0, [sp, #48]	; 0x30
    1e8e:	910d      	str	r1, [sp, #52]	; 0x34
    1e90:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1e92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1e94:	4944      	ldr	r1, [pc, #272]	; (1fa8 <computeKalmanStates+0x240>)
    1e96:	608a      	str	r2, [r1, #8]
    1e98:	60cb      	str	r3, [r1, #12]
    estp[2] = phi[2][0] * altitude + phi[2][1] * velocity + phi[2][2] * accel;
    1e9a:	6b22      	ldr	r2, [r4, #48]	; 0x30
    1e9c:	6b63      	ldr	r3, [r4, #52]	; 0x34
    1e9e:	9800      	ldr	r0, [sp, #0]
    1ea0:	9901      	ldr	r1, [sp, #4]
    1ea2:	47a8      	blx	r5
    1ea4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    1ea6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    1ea8:	0006      	movs	r6, r0
    1eaa:	000f      	movs	r7, r1
    1eac:	9802      	ldr	r0, [sp, #8]
    1eae:	9903      	ldr	r1, [sp, #12]
    1eb0:	47a8      	blx	r5
    1eb2:	0002      	movs	r2, r0
    1eb4:	000b      	movs	r3, r1
    1eb6:	0030      	movs	r0, r6
    1eb8:	0039      	movs	r1, r7
    1eba:	4e3f      	ldr	r6, [pc, #252]	; (1fb8 <computeKalmanStates+0x250>)
    1ebc:	47b0      	blx	r6
    1ebe:	6c22      	ldr	r2, [r4, #64]	; 0x40
    1ec0:	6c63      	ldr	r3, [r4, #68]	; 0x44
    1ec2:	0006      	movs	r6, r0
    1ec4:	000f      	movs	r7, r1
    1ec6:	9804      	ldr	r0, [sp, #16]
    1ec8:	9905      	ldr	r1, [sp, #20]
    1eca:	47a8      	blx	r5
    1ecc:	4c3a      	ldr	r4, [pc, #232]	; (1fb8 <computeKalmanStates+0x250>)
    1ece:	0002      	movs	r2, r0
    1ed0:	000b      	movs	r3, r1
    1ed2:	0030      	movs	r0, r6
    1ed4:	0039      	movs	r1, r7
    1ed6:	47a0      	blx	r4
    1ed8:	0003      	movs	r3, r0
    1eda:	000c      	movs	r4, r1
    1edc:	4a32      	ldr	r2, [pc, #200]	; (1fa8 <computeKalmanStates+0x240>)
    1ede:	9000      	str	r0, [sp, #0]
    1ee0:	9101      	str	r1, [sp, #4]
    1ee2:	6113      	str	r3, [r2, #16]
    1ee4:	6154      	str	r4, [r2, #20]

    /*
    Update state
    */
    altitude = estp[0] + kgain[0][0] * alt_inovation + kgain[0][1] * accel_inovation;
    1ee6:	4c35      	ldr	r4, [pc, #212]	; (1fbc <computeKalmanStates+0x254>)
    1ee8:	6822      	ldr	r2, [r4, #0]
    1eea:	6863      	ldr	r3, [r4, #4]
    1eec:	9806      	ldr	r0, [sp, #24]
    1eee:	9907      	ldr	r1, [sp, #28]
    1ef0:	47a8      	blx	r5
    1ef2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    1ef4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1ef6:	4e30      	ldr	r6, [pc, #192]	; (1fb8 <computeKalmanStates+0x250>)
    1ef8:	47b0      	blx	r6
    1efa:	68a2      	ldr	r2, [r4, #8]
    1efc:	68e3      	ldr	r3, [r4, #12]
    1efe:	0006      	movs	r6, r0
    1f00:	000f      	movs	r7, r1
    1f02:	9808      	ldr	r0, [sp, #32]
    1f04:	9909      	ldr	r1, [sp, #36]	; 0x24
    1f06:	47a8      	blx	r5
    1f08:	0002      	movs	r2, r0
    1f0a:	000b      	movs	r3, r1
    1f0c:	0030      	movs	r0, r6
    1f0e:	0039      	movs	r1, r7
    1f10:	4e29      	ldr	r6, [pc, #164]	; (1fb8 <computeKalmanStates+0x250>)
    1f12:	47b0      	blx	r6
    1f14:	4b22      	ldr	r3, [pc, #136]	; (1fa0 <computeKalmanStates+0x238>)
    1f16:	6018      	str	r0, [r3, #0]
    1f18:	6059      	str	r1, [r3, #4]
    velocity = estp[1] + kgain[1][0] * alt_inovation + kgain[1][1] * accel_inovation;
    1f1a:	6922      	ldr	r2, [r4, #16]
    1f1c:	6963      	ldr	r3, [r4, #20]
    1f1e:	9806      	ldr	r0, [sp, #24]
    1f20:	9907      	ldr	r1, [sp, #28]
    1f22:	47a8      	blx	r5
    1f24:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1f26:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1f28:	47b0      	blx	r6
    1f2a:	69a2      	ldr	r2, [r4, #24]
    1f2c:	69e3      	ldr	r3, [r4, #28]
    1f2e:	0006      	movs	r6, r0
    1f30:	000f      	movs	r7, r1
    1f32:	9808      	ldr	r0, [sp, #32]
    1f34:	9909      	ldr	r1, [sp, #36]	; 0x24
    1f36:	47a8      	blx	r5
    1f38:	0002      	movs	r2, r0
    1f3a:	000b      	movs	r3, r1
    1f3c:	0030      	movs	r0, r6
    1f3e:	0039      	movs	r1, r7
    1f40:	4e1d      	ldr	r6, [pc, #116]	; (1fb8 <computeKalmanStates+0x250>)
    1f42:	47b0      	blx	r6
    1f44:	4b19      	ldr	r3, [pc, #100]	; (1fac <computeKalmanStates+0x244>)
    1f46:	6018      	str	r0, [r3, #0]
    1f48:	6059      	str	r1, [r3, #4]
    accel =    estp[2] + kgain[2][0] * alt_inovation + kgain[2][1] * accel_inovation;
    1f4a:	6a22      	ldr	r2, [r4, #32]
    1f4c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    1f4e:	9806      	ldr	r0, [sp, #24]
    1f50:	9907      	ldr	r1, [sp, #28]
    1f52:	47a8      	blx	r5
    1f54:	9a00      	ldr	r2, [sp, #0]
    1f56:	9b01      	ldr	r3, [sp, #4]
    1f58:	47b0      	blx	r6
    1f5a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    1f5c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    1f5e:	0006      	movs	r6, r0
    1f60:	000f      	movs	r7, r1
    1f62:	9808      	ldr	r0, [sp, #32]
    1f64:	9909      	ldr	r1, [sp, #36]	; 0x24
    1f66:	47a8      	blx	r5
    1f68:	4c13      	ldr	r4, [pc, #76]	; (1fb8 <computeKalmanStates+0x250>)
    1f6a:	0002      	movs	r2, r0
    1f6c:	000b      	movs	r3, r1
    1f6e:	0030      	movs	r0, r6
    1f70:	0039      	movs	r1, r7
    1f72:	47a0      	blx	r4
    1f74:	4b0e      	ldr	r3, [pc, #56]	; (1fb0 <computeKalmanStates+0x248>)
    1f76:	6018      	str	r0, [r3, #0]
    1f78:	6059      	str	r1, [r3, #4]

}
    1f7a:	b00f      	add	sp, #60	; 0x3c
    1f7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1f7e:	46c0      	nop			; (mov r8, r8)
    1f80:	20000528 	.word	0x20000528
    1f84:	200007c8 	.word	0x200007c8
    1f88:	00005e8d 	.word	0x00005e8d
    1f8c:	200004d8 	.word	0x200004d8
    1f90:	00005645 	.word	0x00005645
    1f94:	33daf8df 	.word	0x33daf8df
    1f98:	4040164b 	.word	0x4040164b
    1f9c:	00005151 	.word	0x00005151
    1fa0:	20000698 	.word	0x20000698
    1fa4:	00003b89 	.word	0x00003b89
    1fa8:	200006a0 	.word	0x200006a0
    1fac:	20000690 	.word	0x20000690
    1fb0:	20000688 	.word	0x20000688
    1fb4:	20000010 	.word	0x20000010
    1fb8:	000042b1 	.word	0x000042b1
    1fbc:	20000650 	.word	0x20000650

00001fc0 <makePage>:
u8_t pageLocation;

bool pageReady;


void makePage(u8_t bytesToWrite, u8_t* data) {
    1fc0:	b5f0      	push	{r4, r5, r6, r7, lr}


    u8_t location = pageLocation;
    1fc2:	4a1f      	ldr	r2, [pc, #124]	; (2040 <STACK_SIZE+0x40>)
    1fc4:	7815      	ldrb	r5, [r2, #0]
    u8_t bytesWritten = 0;

    if ((location + bytesToWrite) > 0xFF) {
    1fc6:	1943      	adds	r3, r0, r5
    1fc8:	2bff      	cmp	r3, #255	; 0xff
    1fca:	dc03      	bgt.n	1fd4 <makePage+0x14>
    1fcc:	2300      	movs	r3, #0
            pageLocation = dataByte + 1;
        }
        pageReady = true;

    } else {
        for (u16_t dataByte = 0; dataByte <= bytesToWrite; ++dataByte) {
    1fce:	b280      	uxth	r0, r0
            pageBuffer[(dataByte + location)] = data[dataByte];
    1fd0:	4c1c      	ldr	r4, [pc, #112]	; (2044 <STACK_SIZE+0x44>)
    1fd2:	e029      	b.n	2028 <STACK_SIZE+0x28>
    1fd4:	2300      	movs	r3, #0
    1fd6:	4e1b      	ldr	r6, [pc, #108]	; (2044 <STACK_SIZE+0x44>)

    u8_t location = pageLocation;
    u8_t bytesWritten = 0;

    if ((location + bytesToWrite) > 0xFF) {
        for (u16_t dataByte = 0; (dataByte + location) <= 0xFF; ++dataByte) {
    1fd8:	195f      	adds	r7, r3, r5
    1fda:	b2dc      	uxtb	r4, r3
    1fdc:	46b4      	mov	ip, r6
    1fde:	2fff      	cmp	r7, #255	; 0xff
    1fe0:	dc04      	bgt.n	1fec <makePage+0x2c>
            pageBuffer[(dataByte + location)] = data[dataByte];
    1fe2:	5ccc      	ldrb	r4, [r1, r3]

    u8_t location = pageLocation;
    u8_t bytesWritten = 0;

    if ((location + bytesToWrite) > 0xFF) {
        for (u16_t dataByte = 0; (dataByte + location) <= 0xFF; ++dataByte) {
    1fe4:	3301      	adds	r3, #1
            pageBuffer[(dataByte + location)] = data[dataByte];
    1fe6:	55f4      	strb	r4, [r6, r7]

    u8_t location = pageLocation;
    u8_t bytesWritten = 0;

    if ((location + bytesToWrite) > 0xFF) {
        for (u16_t dataByte = 0; (dataByte + location) <= 0xFF; ++dataByte) {
    1fe8:	b29b      	uxth	r3, r3
    1fea:	e7f5      	b.n	1fd8 <makePage+0x18>
            pageBuffer[(dataByte + location)] = data[dataByte];
            bytesWritten++;
        }
        pageLocation = 0x00;
    1fec:	2300      	movs	r3, #0
        for(u16_t i = 0; i <= 0xFF; ++i) {
            pageToWrite[i] = pageBuffer[i];
    1fee:	4f16      	ldr	r7, [pc, #88]	; (2048 <STACK_SIZE+0x48>)
    if ((location + bytesToWrite) > 0xFF) {
        for (u16_t dataByte = 0; (dataByte + location) <= 0xFF; ++dataByte) {
            pageBuffer[(dataByte + location)] = data[dataByte];
            bytesWritten++;
        }
        pageLocation = 0x00;
    1ff0:	7013      	strb	r3, [r2, #0]
        for(u16_t i = 0; i <= 0xFF; ++i) {
            pageToWrite[i] = pageBuffer[i];
    1ff2:	4665      	mov	r5, ip
    1ff4:	18ed      	adds	r5, r5, r3
    1ff6:	782e      	ldrb	r6, [r5, #0]
    1ff8:	54fe      	strb	r6, [r7, r3]
            pageBuffer[i] = 0;
    1ffa:	2600      	movs	r6, #0
    1ffc:	702e      	strb	r6, [r5, #0]
        for (u16_t dataByte = 0; (dataByte + location) <= 0xFF; ++dataByte) {
            pageBuffer[(dataByte + location)] = data[dataByte];
            bytesWritten++;
        }
        pageLocation = 0x00;
        for(u16_t i = 0; i <= 0xFF; ++i) {
    1ffe:	2580      	movs	r5, #128	; 0x80
    2000:	3301      	adds	r3, #1
    2002:	006d      	lsls	r5, r5, #1
    2004:	42ab      	cmp	r3, r5
    2006:	d1f4      	bne.n	1ff2 <makePage+0x32>
    2008:	2300      	movs	r3, #0
    200a:	1c5d      	adds	r5, r3, #1
            pageToWrite[i] = pageBuffer[i];
            pageBuffer[i] = 0;
        }
        for (u16_t dataByte = 0; bytesWritten < bytesToWrite; ++dataByte) {
    200c:	4284      	cmp	r4, r0
    200e:	d207      	bcs.n	2020 <STACK_SIZE+0x20>
            pageBuffer[dataByte] = data[bytesWritten];
    2010:	4667      	mov	r7, ip
    2012:	5d0e      	ldrb	r6, [r1, r4]
            bytesWritten++;
    2014:	3401      	adds	r4, #1
        for(u16_t i = 0; i <= 0xFF; ++i) {
            pageToWrite[i] = pageBuffer[i];
            pageBuffer[i] = 0;
        }
        for (u16_t dataByte = 0; bytesWritten < bytesToWrite; ++dataByte) {
            pageBuffer[dataByte] = data[bytesWritten];
    2016:	54fe      	strb	r6, [r7, r3]
            bytesWritten++;
    2018:	b2e4      	uxtb	r4, r4
            pageLocation = dataByte + 1;
    201a:	7015      	strb	r5, [r2, #0]
    201c:	002b      	movs	r3, r5
    201e:	e7f4      	b.n	200a <STACK_SIZE+0xa>
        }
        pageReady = true;
    2020:	2201      	movs	r2, #1
    2022:	4b0a      	ldr	r3, [pc, #40]	; (204c <STACK_SIZE+0x4c>)
    2024:	701a      	strb	r2, [r3, #0]
    2026:	e009      	b.n	203c <STACK_SIZE+0x3c>

    } else {
        for (u16_t dataByte = 0; dataByte <= bytesToWrite; ++dataByte) {
    2028:	4283      	cmp	r3, r0
    202a:	d807      	bhi.n	203c <STACK_SIZE+0x3c>
            pageBuffer[(dataByte + location)] = data[dataByte];
    202c:	5ccf      	ldrb	r7, [r1, r3]
    202e:	18e6      	adds	r6, r4, r3
    2030:	5577      	strb	r7, [r6, r5]
            bytesWritten++;
            pageLocation = location + dataByte;
    2032:	18ee      	adds	r6, r5, r3
            pageLocation = dataByte + 1;
        }
        pageReady = true;

    } else {
        for (u16_t dataByte = 0; dataByte <= bytesToWrite; ++dataByte) {
    2034:	3301      	adds	r3, #1
            pageBuffer[(dataByte + location)] = data[dataByte];
            bytesWritten++;
            pageLocation = location + dataByte;
    2036:	7016      	strb	r6, [r2, #0]
            pageLocation = dataByte + 1;
        }
        pageReady = true;

    } else {
        for (u16_t dataByte = 0; dataByte <= bytesToWrite; ++dataByte) {
    2038:	b29b      	uxth	r3, r3
    203a:	e7f5      	b.n	2028 <STACK_SIZE+0x28>
            pageBuffer[(dataByte + location)] = data[dataByte];
            bytesWritten++;
            pageLocation = location + dataByte;
        }
    }
}
    203c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    203e:	46c0      	nop			; (mov r8, r8)
    2040:	200007c4 	.word	0x200007c4
    2044:	2000053d 	.word	0x2000053d
    2048:	200006b8 	.word	0x200006b8
    204c:	200007b8 	.word	0x200007b8

00002050 <logFlight>:


void logFlight() {
    2050:	b51f      	push	{r0, r1, r2, r3, r4, lr}

    u8_t bytesToSend = 16;
    u8_t dataToSend[16];

    dataToSend[0] = FLIGHT_LOG;
    2052:	2346      	movs	r3, #70	; 0x46
    2054:	466a      	mov	r2, sp
    2056:	7013      	strb	r3, [r2, #0]
    dataToSend[1] = 0;
    2058:	2300      	movs	r3, #0

    dataToSend[2] = offsets.offsetBufferTime >> 0;
    205a:	4669      	mov	r1, sp
    dataToSend[3] = offsets.offsetBufferTime >> 8;
    205c:	4668      	mov	r0, sp

    u8_t bytesToSend = 16;
    u8_t dataToSend[16];

    dataToSend[0] = FLIGHT_LOG;
    dataToSend[1] = 0;
    205e:	7053      	strb	r3, [r2, #1]

    dataToSend[2] = offsets.offsetBufferTime >> 0;
    2060:	4a10      	ldr	r2, [pc, #64]	; (20a4 <logFlight+0x54>)
    2062:	6813      	ldr	r3, [r2, #0]
    2064:	708b      	strb	r3, [r1, #2]
    dataToSend[3] = offsets.offsetBufferTime >> 8;
    2066:	0a19      	lsrs	r1, r3, #8
    2068:	70c1      	strb	r1, [r0, #3]
    dataToSend[4] = offsets.offsetBufferTime >> 16;
    206a:	0c19      	lsrs	r1, r3, #16
    dataToSend[5] = offsets.offsetBufferTime >> 24;
    206c:	0e1b      	lsrs	r3, r3, #24
    206e:	7143      	strb	r3, [r0, #5]

    dataToSend[6] = offsets.groundOffset >> 0;
    2070:	6993      	ldr	r3, [r2, #24]
    dataToSend[0] = FLIGHT_LOG;
    dataToSend[1] = 0;

    dataToSend[2] = offsets.offsetBufferTime >> 0;
    dataToSend[3] = offsets.offsetBufferTime >> 8;
    dataToSend[4] = offsets.offsetBufferTime >> 16;
    2072:	7101      	strb	r1, [r0, #4]
    dataToSend[5] = offsets.offsetBufferTime >> 24;

    dataToSend[6] = offsets.groundOffset >> 0;
    dataToSend[7] = offsets.groundOffset >> 8;
    2074:	0a19      	lsrs	r1, r3, #8
    dataToSend[2] = offsets.offsetBufferTime >> 0;
    dataToSend[3] = offsets.offsetBufferTime >> 8;
    dataToSend[4] = offsets.offsetBufferTime >> 16;
    dataToSend[5] = offsets.offsetBufferTime >> 24;

    dataToSend[6] = offsets.groundOffset >> 0;
    2076:	7183      	strb	r3, [r0, #6]
    dataToSend[7] = offsets.groundOffset >> 8;
    2078:	71c1      	strb	r1, [r0, #7]
    dataToSend[8] = offsets.groundOffset >> 16;
    207a:	0c19      	lsrs	r1, r3, #16
    dataToSend[9] = offsets.groundOffset >> 24;
    207c:	0e1b      	lsrs	r3, r3, #24
    207e:	7243      	strb	r3, [r0, #9]

    dataToSend[10] = offsets.groundTemperature >> 0;
    2080:	6a13      	ldr	r3, [r2, #32]
    dataToSend[4] = offsets.offsetBufferTime >> 16;
    dataToSend[5] = offsets.offsetBufferTime >> 24;

    dataToSend[6] = offsets.groundOffset >> 0;
    dataToSend[7] = offsets.groundOffset >> 8;
    dataToSend[8] = offsets.groundOffset >> 16;
    2082:	7201      	strb	r1, [r0, #8]
    dataToSend[9] = offsets.groundOffset >> 24;

    dataToSend[10] = offsets.groundTemperature >> 0;
    dataToSend[11] = offsets.groundTemperature >> 8;
    2084:	0a1a      	lsrs	r2, r3, #8
    dataToSend[6] = offsets.groundOffset >> 0;
    dataToSend[7] = offsets.groundOffset >> 8;
    dataToSend[8] = offsets.groundOffset >> 16;
    dataToSend[9] = offsets.groundOffset >> 24;

    dataToSend[10] = offsets.groundTemperature >> 0;
    2086:	7283      	strb	r3, [r0, #10]
    dataToSend[11] = offsets.groundTemperature >> 8;
    2088:	72c2      	strb	r2, [r0, #11]
    dataToSend[12] = offsets.groundTemperature >> 16;
    208a:	0c1a      	lsrs	r2, r3, #16
    dataToSend[13] = offsets.groundTemperature >> 24;
    208c:	0e1b      	lsrs	r3, r3, #24
    208e:	7343      	strb	r3, [r0, #13]

    //dataToSend[14] = accel >> 0;
    dataToSend[15] = 0xfe;
    2090:	23fe      	movs	r3, #254	; 0xfe
    dataToSend[8] = offsets.groundOffset >> 16;
    dataToSend[9] = offsets.groundOffset >> 24;

    dataToSend[10] = offsets.groundTemperature >> 0;
    dataToSend[11] = offsets.groundTemperature >> 8;
    dataToSend[12] = offsets.groundTemperature >> 16;
    2092:	7302      	strb	r2, [r0, #12]
    dataToSend[13] = offsets.groundTemperature >> 24;

    //dataToSend[14] = accel >> 0;
    dataToSend[15] = 0xfe;
    2094:	73c3      	strb	r3, [r0, #15]
    dataToSend[5] = offsets.offsetBufferTime >> 24;

    dataToSend[6] = offsets.groundOffset >> 0;
    dataToSend[7] = offsets.groundOffset >> 8;
    dataToSend[8] = offsets.groundOffset >> 16;
    dataToSend[9] = offsets.groundOffset >> 24;
    2096:	4669      	mov	r1, sp
    dataToSend[13] = offsets.groundTemperature >> 24;

    //dataToSend[14] = accel >> 0;
    dataToSend[15] = 0xfe;

    makePage(bytesToSend, dataToSend);
    2098:	2010      	movs	r0, #16
    209a:	4b03      	ldr	r3, [pc, #12]	; (20a8 <logFlight+0x58>)
    209c:	4798      	blx	r3
}
    209e:	b005      	add	sp, #20
    20a0:	bd00      	pop	{pc}
    20a2:	46c0      	nop			; (mov r8, r8)
    20a4:	200004d8 	.word	0x200004d8
    20a8:	00001fc1 	.word	0x00001fc1

000020ac <logEvent>:

void logEvent(u8_t eventType) {
    20ac:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

    u8_t bytesToSend = 12;
    u8_t dataToSend[12];

    dataToSend[0] = EVENT_LOG;
    20ae:	2345      	movs	r3, #69	; 0x45
    dataToSend[1] = eventType;
    dataToSend[2] = sample.sampleTick >> 0;
    20b0:	4d10      	ldr	r5, [pc, #64]	; (20f4 <logEvent+0x48>)
void logEvent(u8_t eventType) {

    u8_t bytesToSend = 12;
    u8_t dataToSend[12];

    dataToSend[0] = EVENT_LOG;
    20b2:	ac01      	add	r4, sp, #4
    20b4:	7023      	strb	r3, [r4, #0]
    dataToSend[1] = eventType;
    dataToSend[2] = sample.sampleTick >> 0;
    20b6:	686b      	ldr	r3, [r5, #4]
    dataToSend[3] = sample.sampleTick >> 8;
    dataToSend[4] = sample.sampleTick >> 16;
    dataToSend[5] = sample.sampleTick >> 24;

    dataToSend[6] = altitudeAGL() >> 0;
    20b8:	4e0f      	ldr	r6, [pc, #60]	; (20f8 <logEvent+0x4c>)
    u8_t dataToSend[12];

    dataToSend[0] = EVENT_LOG;
    dataToSend[1] = eventType;
    dataToSend[2] = sample.sampleTick >> 0;
    dataToSend[3] = sample.sampleTick >> 8;
    20ba:	0a1a      	lsrs	r2, r3, #8
    u8_t bytesToSend = 12;
    u8_t dataToSend[12];

    dataToSend[0] = EVENT_LOG;
    dataToSend[1] = eventType;
    dataToSend[2] = sample.sampleTick >> 0;
    20bc:	70a3      	strb	r3, [r4, #2]
    dataToSend[3] = sample.sampleTick >> 8;
    20be:	70e2      	strb	r2, [r4, #3]
    dataToSend[4] = sample.sampleTick >> 16;
    20c0:	0c1a      	lsrs	r2, r3, #16
    dataToSend[5] = sample.sampleTick >> 24;
    20c2:	0e1b      	lsrs	r3, r3, #24

    dataToSend[0] = EVENT_LOG;
    dataToSend[1] = eventType;
    dataToSend[2] = sample.sampleTick >> 0;
    dataToSend[3] = sample.sampleTick >> 8;
    dataToSend[4] = sample.sampleTick >> 16;
    20c4:	7122      	strb	r2, [r4, #4]
    dataToSend[5] = sample.sampleTick >> 24;
    20c6:	7163      	strb	r3, [r4, #5]

    u8_t bytesToSend = 12;
    u8_t dataToSend[12];

    dataToSend[0] = EVENT_LOG;
    dataToSend[1] = eventType;
    20c8:	7060      	strb	r0, [r4, #1]
    dataToSend[2] = sample.sampleTick >> 0;
    dataToSend[3] = sample.sampleTick >> 8;
    dataToSend[4] = sample.sampleTick >> 16;
    dataToSend[5] = sample.sampleTick >> 24;

    dataToSend[6] = altitudeAGL() >> 0;
    20ca:	47b0      	blx	r6
    20cc:	71a0      	strb	r0, [r4, #6]
    dataToSend[7] = altitudeAGL() >> 8;
    20ce:	47b0      	blx	r6
    20d0:	1200      	asrs	r0, r0, #8
    20d2:	71e0      	strb	r0, [r4, #7]
    dataToSend[8] = altitudeAGL() >> 16;
    20d4:	47b0      	blx	r6
    20d6:	1400      	asrs	r0, r0, #16
    20d8:	7220      	strb	r0, [r4, #8]
    dataToSend[9] = altitudeAGL() >> 24;
    20da:	47b0      	blx	r6
    20dc:	1600      	asrs	r0, r0, #24
    20de:	7260      	strb	r0, [r4, #9]

    dataToSend[10] = sample.voltage.batV >> 0;
    20e0:	892b      	ldrh	r3, [r5, #8]
    dataToSend[11] = sample.voltage.batV >> 8;

    makePage(bytesToSend, dataToSend);
    20e2:	0021      	movs	r1, r4
    dataToSend[6] = altitudeAGL() >> 0;
    dataToSend[7] = altitudeAGL() >> 8;
    dataToSend[8] = altitudeAGL() >> 16;
    dataToSend[9] = altitudeAGL() >> 24;

    dataToSend[10] = sample.voltage.batV >> 0;
    20e4:	72a3      	strb	r3, [r4, #10]
    dataToSend[11] = sample.voltage.batV >> 8;
    20e6:	0a1b      	lsrs	r3, r3, #8
    20e8:	72e3      	strb	r3, [r4, #11]

    makePage(bytesToSend, dataToSend);
    20ea:	200c      	movs	r0, #12
    20ec:	4b03      	ldr	r3, [pc, #12]	; (20fc <logEvent+0x50>)
    20ee:	4798      	blx	r3

}
    20f0:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
    20f2:	46c0      	nop			; (mov r8, r8)
    20f4:	200007c8 	.word	0x200007c8
    20f8:	00000b29 	.word	0x00000b29
    20fc:	00001fc1 	.word	0x00001fc1

00002100 <logSensors>:
void logSensors() {

    u8_t bytesToSend = 24;
    u8_t dataToSend[24];

    dataToSend[0] = SENSOR_LOG;
    2100:	2353      	movs	r3, #83	; 0x53

    makePage(bytesToSend, dataToSend);

}

void logSensors() {
    2102:	b5f0      	push	{r4, r5, r6, r7, lr}
    2104:	b08b      	sub	sp, #44	; 0x2c

    u8_t bytesToSend = 24;
    u8_t dataToSend[24];

    dataToSend[0] = SENSOR_LOG;
    2106:	ac04      	add	r4, sp, #16
    2108:	7023      	strb	r3, [r4, #0]

    dataToSend[1] = sample.sampleTick >> 0;
    210a:	4b49      	ldr	r3, [pc, #292]	; (2230 <logSensors+0x130>)
    dataToSend[2] = sample.sampleTick >> 8;
    dataToSend[3] = sample.sampleTick >> 16;
    dataToSend[4] = sample.sampleTick >> 24;

    dataToSend[5] = altitudeAGL() >> 0;
    210c:	4e49      	ldr	r6, [pc, #292]	; (2234 <logSensors+0x134>)
    u8_t bytesToSend = 24;
    u8_t dataToSend[24];

    dataToSend[0] = SENSOR_LOG;

    dataToSend[1] = sample.sampleTick >> 0;
    210e:	685b      	ldr	r3, [r3, #4]
    dataToSend[2] = sample.sampleTick >> 8;
    2110:	0a1a      	lsrs	r2, r3, #8
    u8_t bytesToSend = 24;
    u8_t dataToSend[24];

    dataToSend[0] = SENSOR_LOG;

    dataToSend[1] = sample.sampleTick >> 0;
    2112:	7063      	strb	r3, [r4, #1]
    dataToSend[2] = sample.sampleTick >> 8;
    2114:	70a2      	strb	r2, [r4, #2]
    dataToSend[3] = sample.sampleTick >> 16;
    2116:	0c1a      	lsrs	r2, r3, #16
    dataToSend[4] = sample.sampleTick >> 24;
    2118:	0e1b      	lsrs	r3, r3, #24

    dataToSend[0] = SENSOR_LOG;

    dataToSend[1] = sample.sampleTick >> 0;
    dataToSend[2] = sample.sampleTick >> 8;
    dataToSend[3] = sample.sampleTick >> 16;
    211a:	70e2      	strb	r2, [r4, #3]
    dataToSend[4] = sample.sampleTick >> 24;
    211c:	7123      	strb	r3, [r4, #4]

    dataToSend[5] = altitudeAGL() >> 0;
    211e:	47b0      	blx	r6
    2120:	7160      	strb	r0, [r4, #5]
    dataToSend[6] = altitudeAGL() >> 8;
    2122:	47b0      	blx	r6
    2124:	1200      	asrs	r0, r0, #8
    2126:	71a0      	strb	r0, [r4, #6]
    dataToSend[7] = altitudeAGL() >> 16;
    2128:	47b0      	blx	r6
    212a:	1400      	asrs	r0, r0, #16
    212c:	71e0      	strb	r0, [r4, #7]
    dataToSend[8] = altitudeAGL() >> 24;
    212e:	47b0      	blx	r6

    volatile float fractionalAccel = accel - (int16_t)(accel);
    2130:	4b41      	ldr	r3, [pc, #260]	; (2238 <logSensors+0x138>)
    dataToSend[4] = sample.sampleTick >> 24;

    dataToSend[5] = altitudeAGL() >> 0;
    dataToSend[6] = altitudeAGL() >> 8;
    dataToSend[7] = altitudeAGL() >> 16;
    dataToSend[8] = altitudeAGL() >> 24;
    2132:	1600      	asrs	r0, r0, #24

    volatile float fractionalAccel = accel - (int16_t)(accel);
    2134:	681e      	ldr	r6, [r3, #0]
    2136:	685f      	ldr	r7, [r3, #4]
    dataToSend[4] = sample.sampleTick >> 24;

    dataToSend[5] = altitudeAGL() >> 0;
    dataToSend[6] = altitudeAGL() >> 8;
    dataToSend[7] = altitudeAGL() >> 16;
    dataToSend[8] = altitudeAGL() >> 24;
    2138:	7220      	strb	r0, [r4, #8]

    volatile float fractionalAccel = accel - (int16_t)(accel);
    213a:	0039      	movs	r1, r7
    213c:	4b3f      	ldr	r3, [pc, #252]	; (223c <logSensors+0x13c>)
    213e:	0030      	movs	r0, r6
    2140:	4798      	blx	r3
    2142:	b203      	sxth	r3, r0
    2144:	001d      	movs	r5, r3
    2146:	0018      	movs	r0, r3
    2148:	4b3d      	ldr	r3, [pc, #244]	; (2240 <logSensors+0x140>)
    214a:	4798      	blx	r3
    214c:	0002      	movs	r2, r0
    214e:	000b      	movs	r3, r1
    2150:	0030      	movs	r0, r6
    2152:	0039      	movs	r1, r7
    2154:	4e3b      	ldr	r6, [pc, #236]	; (2244 <logSensors+0x144>)
    2156:	47b0      	blx	r6
    2158:	4b3b      	ldr	r3, [pc, #236]	; (2248 <logSensors+0x148>)
    215a:	4798      	blx	r3
    215c:	9003      	str	r0, [sp, #12]
    volatile int16_t fractAccelPart = fractionalAccel * 1000;
    215e:	9803      	ldr	r0, [sp, #12]
    2160:	4b3a      	ldr	r3, [pc, #232]	; (224c <logSensors+0x14c>)
    2162:	493b      	ldr	r1, [pc, #236]	; (2250 <logSensors+0x150>)
    2164:	4798      	blx	r3
    2166:	4e3b      	ldr	r6, [pc, #236]	; (2254 <logSensors+0x154>)
    2168:	47b0      	blx	r6
    216a:	ab02      	add	r3, sp, #8
    216c:	b200      	sxth	r0, r0
    216e:	8058      	strh	r0, [r3, #2]

    dataToSend[9] = (int16_t)(accel) >> 0;
    dataToSend[10] = (int16_t)(accel) >> 8;
    dataToSend[11] = fractAccelPart >> 0;
    2170:	885a      	ldrh	r2, [r3, #2]
    dataToSend[6] = altitudeAGL() >> 8;
    dataToSend[7] = altitudeAGL() >> 16;
    dataToSend[8] = altitudeAGL() >> 24;

    volatile float fractionalAccel = accel - (int16_t)(accel);
    volatile int16_t fractAccelPart = fractionalAccel * 1000;
    2172:	3302      	adds	r3, #2

    dataToSend[9] = (int16_t)(accel) >> 0;
    dataToSend[10] = (int16_t)(accel) >> 8;
    dataToSend[11] = fractAccelPart >> 0;
    dataToSend[12] = fractAccelPart >> 8;
    2174:	881b      	ldrh	r3, [r3, #0]

    volatile float fractionalAccel = accel - (int16_t)(accel);
    volatile int16_t fractAccelPart = fractionalAccel * 1000;

    dataToSend[9] = (int16_t)(accel) >> 0;
    dataToSend[10] = (int16_t)(accel) >> 8;
    2176:	1228      	asrs	r0, r5, #8
    dataToSend[11] = fractAccelPart >> 0;
    dataToSend[12] = fractAccelPart >> 8;
    2178:	0a1b      	lsrs	r3, r3, #8
    217a:	7323      	strb	r3, [r4, #12]


    float fractionalVelocity = velocity - (int16_t)(velocity);
    217c:	4b36      	ldr	r3, [pc, #216]	; (2258 <logSensors+0x158>)
    dataToSend[8] = altitudeAGL() >> 24;

    volatile float fractionalAccel = accel - (int16_t)(accel);
    volatile int16_t fractAccelPart = fractionalAccel * 1000;

    dataToSend[9] = (int16_t)(accel) >> 0;
    217e:	7265      	strb	r5, [r4, #9]
    dataToSend[10] = (int16_t)(accel) >> 8;
    2180:	72a0      	strb	r0, [r4, #10]
    dataToSend[11] = fractAccelPart >> 0;
    2182:	72e2      	strb	r2, [r4, #11]
    dataToSend[12] = fractAccelPart >> 8;


    float fractionalVelocity = velocity - (int16_t)(velocity);
    2184:	681a      	ldr	r2, [r3, #0]
    2186:	685b      	ldr	r3, [r3, #4]
    2188:	9200      	str	r2, [sp, #0]
    218a:	9301      	str	r3, [sp, #4]
    218c:	0010      	movs	r0, r2
    218e:	0019      	movs	r1, r3
    2190:	4b2a      	ldr	r3, [pc, #168]	; (223c <logSensors+0x13c>)
    2192:	4798      	blx	r3
    2194:	b207      	sxth	r7, r0
    int16_t fractVelocityPart = fractionalVelocity * 1000;
    2196:	4b2a      	ldr	r3, [pc, #168]	; (2240 <logSensors+0x140>)
    2198:	0038      	movs	r0, r7
    219a:	4798      	blx	r3
    219c:	4d29      	ldr	r5, [pc, #164]	; (2244 <logSensors+0x144>)
    219e:	0002      	movs	r2, r0
    21a0:	000b      	movs	r3, r1
    21a2:	9800      	ldr	r0, [sp, #0]
    21a4:	9901      	ldr	r1, [sp, #4]
    21a6:	47a8      	blx	r5
    21a8:	4b27      	ldr	r3, [pc, #156]	; (2248 <logSensors+0x148>)
    21aa:	4798      	blx	r3
    21ac:	4b27      	ldr	r3, [pc, #156]	; (224c <logSensors+0x14c>)
    21ae:	4928      	ldr	r1, [pc, #160]	; (2250 <logSensors+0x150>)
    21b0:	4798      	blx	r3
    21b2:	47b0      	blx	r6

    dataToSend[13] = (int16_t)(velocity) >> 0;
    21b4:	7367      	strb	r7, [r4, #13]
    dataToSend[11] = fractAccelPart >> 0;
    dataToSend[12] = fractAccelPart >> 8;


    float fractionalVelocity = velocity - (int16_t)(velocity);
    int16_t fractVelocityPart = fractionalVelocity * 1000;
    21b6:	b203      	sxth	r3, r0

    dataToSend[13] = (int16_t)(velocity) >> 0;
    dataToSend[14] = (int16_t)(velocity) >> 8;
    21b8:	123f      	asrs	r7, r7, #8
    21ba:	73a7      	strb	r7, [r4, #14]
    dataToSend[15] = fractVelocityPart >> 0;
    21bc:	73e3      	strb	r3, [r4, #15]
    dataToSend[16] = fractVelocityPart >> 8;
    21be:	121b      	asrs	r3, r3, #8
    21c0:	7423      	strb	r3, [r4, #16]

//     if ( ((fractVelocityPart < 0) & ((int16_t)(velocity) > 0)) | ((fractVelocityPart > 0) & ((int16_t)(velocity) < 0)) ) {
//         beep(200);
//     }

    dataToSend[17] = (u32_t)sample.altitudefeet >> 0;
    21c2:	4b1b      	ldr	r3, [pc, #108]	; (2230 <logSensors+0x130>)
    21c4:	6c18      	ldr	r0, [r3, #64]	; 0x40
    21c6:	6c59      	ldr	r1, [r3, #68]	; 0x44
    21c8:	4b24      	ldr	r3, [pc, #144]	; (225c <logSensors+0x15c>)
    21ca:	4798      	blx	r3
    dataToSend[18] = (u32_t)sample.altitudefeet >> 8;
    21cc:	0a03      	lsrs	r3, r0, #8
    21ce:	74a3      	strb	r3, [r4, #18]
    dataToSend[19] = (u32_t)sample.altitudefeet >> 16;
    21d0:	0c03      	lsrs	r3, r0, #16
    21d2:	74e3      	strb	r3, [r4, #19]
    dataToSend[20] = (u32_t)sample.altitudefeet >> 24;

    float fractionalAccelraw = sample.accelZ - (int16_t)(sample.accelZ);
    21d4:	4b16      	ldr	r3, [pc, #88]	; (2230 <logSensors+0x130>)

//     if ( ((fractVelocityPart < 0) & ((int16_t)(velocity) > 0)) | ((fractVelocityPart > 0) & ((int16_t)(velocity) < 0)) ) {
//         beep(200);
//     }

    dataToSend[17] = (u32_t)sample.altitudefeet >> 0;
    21d6:	7460      	strb	r0, [r4, #17]
    dataToSend[18] = (u32_t)sample.altitudefeet >> 8;
    dataToSend[19] = (u32_t)sample.altitudefeet >> 16;
    dataToSend[20] = (u32_t)sample.altitudefeet >> 24;

    float fractionalAccelraw = sample.accelZ - (int16_t)(sample.accelZ);
    21d8:	6a9d      	ldr	r5, [r3, #40]	; 0x28
//     }

    dataToSend[17] = (u32_t)sample.altitudefeet >> 0;
    dataToSend[18] = (u32_t)sample.altitudefeet >> 8;
    dataToSend[19] = (u32_t)sample.altitudefeet >> 16;
    dataToSend[20] = (u32_t)sample.altitudefeet >> 24;
    21da:	0e00      	lsrs	r0, r0, #24
    21dc:	7520      	strb	r0, [r4, #20]

    float fractionalAccelraw = sample.accelZ - (int16_t)(sample.accelZ);
    21de:	1c28      	adds	r0, r5, #0
    21e0:	47b0      	blx	r6
    21e2:	b200      	sxth	r0, r0
    u8_t fractAccelRawPart = fractionalAccelraw;

    dataToSend[21] = (int16_t)(sample.accelZ) >> 0;
    dataToSend[22] = (int16_t)(sample.accelZ) >> 8;
    21e4:	1203      	asrs	r3, r0, #8
    21e6:	75a3      	strb	r3, [r4, #22]
    dataToSend[20] = (u32_t)sample.altitudefeet >> 24;

    float fractionalAccelraw = sample.accelZ - (int16_t)(sample.accelZ);
    u8_t fractAccelRawPart = fractionalAccelraw;

    dataToSend[21] = (int16_t)(sample.accelZ) >> 0;
    21e8:	7560      	strb	r0, [r4, #21]
    dataToSend[22] = (int16_t)(sample.accelZ) >> 8;
    dataToSend[23] = fractAccelRawPart;
    21ea:	4b1d      	ldr	r3, [pc, #116]	; (2260 <logSensors+0x160>)
    21ec:	4798      	blx	r3
    21ee:	4b1d      	ldr	r3, [pc, #116]	; (2264 <logSensors+0x164>)
    21f0:	1c01      	adds	r1, r0, #0
    21f2:	1c28      	adds	r0, r5, #0
    21f4:	4798      	blx	r3
    21f6:	4b1c      	ldr	r3, [pc, #112]	; (2268 <logSensors+0x168>)
    21f8:	4798      	blx	r3
    //dataToSend[21] = my_altimeter->myAnalogAccelerometer.analogRaw >> 0;
    //dataToSend[22] = my_altimeter->myAnalogAccelerometer.analogRaw >> 8;



    makePage(bytesToSend, dataToSend);
    21fa:	4b1c      	ldr	r3, [pc, #112]	; (226c <logSensors+0x16c>)
    float fractionalAccelraw = sample.accelZ - (int16_t)(sample.accelZ);
    u8_t fractAccelRawPart = fractionalAccelraw;

    dataToSend[21] = (int16_t)(sample.accelZ) >> 0;
    dataToSend[22] = (int16_t)(sample.accelZ) >> 8;
    dataToSend[23] = fractAccelRawPart;
    21fc:	75e0      	strb	r0, [r4, #23]
    //dataToSend[21] = my_altimeter->myAnalogAccelerometer.analogRaw >> 0;
    //dataToSend[22] = my_altimeter->myAnalogAccelerometer.analogRaw >> 8;



    makePage(bytesToSend, dataToSend);
    21fe:	0021      	movs	r1, r4
    2200:	2018      	movs	r0, #24
    2202:	4798      	blx	r3

    if (pageReady) {
    2204:	4b1a      	ldr	r3, [pc, #104]	; (2270 <logSensors+0x170>)
    2206:	781a      	ldrb	r2, [r3, #0]
    2208:	2a00      	cmp	r2, #0
    220a:	d00e      	beq.n	222a <logSensors+0x12a>
        pageReady = false;
    220c:	2200      	movs	r2, #0
    220e:	701a      	strb	r2, [r3, #0]
    2210:	2280      	movs	r2, #128	; 0x80
    2212:	4b18      	ldr	r3, [pc, #96]	; (2274 <logSensors+0x174>)
        pinToggle(LedPin);
        u8_t bytesWritten = AT25SEWritePage(currentAddress,pageToWrite);
    2214:	4c18      	ldr	r4, [pc, #96]	; (2278 <logSensors+0x178>)
    2216:	0352      	lsls	r2, r2, #13
    2218:	61da      	str	r2, [r3, #28]
    221a:	4918      	ldr	r1, [pc, #96]	; (227c <logSensors+0x17c>)
    221c:	4b18      	ldr	r3, [pc, #96]	; (2280 <logSensors+0x180>)
    221e:	6820      	ldr	r0, [r4, #0]
    2220:	4798      	blx	r3
        currentAddress = (currentAddress + 0x100);
    2222:	6823      	ldr	r3, [r4, #0]
    2224:	3301      	adds	r3, #1
    2226:	33ff      	adds	r3, #255	; 0xff
    2228:	6023      	str	r3, [r4, #0]
    }
}
    222a:	b00b      	add	sp, #44	; 0x2c
    222c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    222e:	46c0      	nop			; (mov r8, r8)
    2230:	200007c8 	.word	0x200007c8
    2234:	00000b29 	.word	0x00000b29
    2238:	20000688 	.word	0x20000688
    223c:	00005d2d 	.word	0x00005d2d
    2240:	00005d99 	.word	0x00005d99
    2244:	00005645 	.word	0x00005645
    2248:	00005f35 	.word	0x00005f35
    224c:	00003ca9 	.word	0x00003ca9
    2250:	447a0000 	.word	0x447a0000
    2254:	000041dd 	.word	0x000041dd
    2258:	20000690 	.word	0x20000690
    225c:	00003c6d 	.word	0x00003c6d
    2260:	00004221 	.word	0x00004221
    2264:	00003ed1 	.word	0x00003ed1
    2268:	00003c3d 	.word	0x00003c3d
    226c:	00001fc1 	.word	0x00001fc1
    2270:	200007b8 	.word	0x200007b8
    2274:	41004400 	.word	0x41004400
    2278:	200007bc 	.word	0x200007bc
    227c:	200006b8 	.word	0x200006b8
    2280:	000002cd 	.word	0x000002cd

00002284 <getFlightStartAddress>:

    u8_t addressToCheck[3];

    u16_t flightAddressLoc = FLIGHTZEROSTART + (flightToFind * 0x06);

    AT25SEreadSample(flightAddressLoc, 0x03, addressToCheck);
    2284:	2306      	movs	r3, #6
    }
}



u32_t getFlightStartAddress(u8_t flightToFind) {
    2286:	b513      	push	{r0, r1, r4, lr}

    u8_t addressToCheck[3];

    u16_t flightAddressLoc = FLIGHTZEROSTART + (flightToFind * 0x06);

    AT25SEreadSample(flightAddressLoc, 0x03, addressToCheck);
    2288:	4358      	muls	r0, r3
    228a:	ac01      	add	r4, sp, #4
    228c:	3001      	adds	r0, #1
    228e:	30ff      	adds	r0, #255	; 0xff
    2290:	0022      	movs	r2, r4
    2292:	2103      	movs	r1, #3
    2294:	4b04      	ldr	r3, [pc, #16]	; (22a8 <getFlightStartAddress+0x24>)
    2296:	4798      	blx	r3

    u32_t flightStartAddress = addressToCheck[0] << 0 | addressToCheck[1] << 8 | addressToCheck[2] << 16;
    2298:	7860      	ldrb	r0, [r4, #1]
    229a:	78a3      	ldrb	r3, [r4, #2]
    229c:	0200      	lsls	r0, r0, #8
    229e:	041b      	lsls	r3, r3, #16
    22a0:	4318      	orrs	r0, r3
    22a2:	7823      	ldrb	r3, [r4, #0]
    22a4:	4318      	orrs	r0, r3

    return flightStartAddress;
}
    22a6:	bd16      	pop	{r1, r2, r4, pc}
    22a8:	00000341 	.word	0x00000341

000022ac <FindFlightEndingAddress>:

    u8_t addressToCheck[3];

    u16_t flightAddressLoc = FLIGHTZEROEND + (findThisFlightsEnd * 0x06);

    AT25SEreadSample(flightAddressLoc, 0x03, addressToCheck);
    22ac:	2306      	movs	r3, #6
    u32_t flightStartAddress = addressToCheck[0] << 0 | addressToCheck[1] << 8 | addressToCheck[2] << 16;

    return flightStartAddress;
}

u32_t FindFlightEndingAddress(u8_t findThisFlightsEnd) {
    22ae:	b513      	push	{r0, r1, r4, lr}

    u8_t addressToCheck[3];

    u16_t flightAddressLoc = FLIGHTZEROEND + (findThisFlightsEnd * 0x06);

    AT25SEreadSample(flightAddressLoc, 0x03, addressToCheck);
    22b0:	4358      	muls	r0, r3
    22b2:	ac01      	add	r4, sp, #4
    22b4:	3004      	adds	r0, #4
    22b6:	30ff      	adds	r0, #255	; 0xff
    22b8:	0022      	movs	r2, r4
    22ba:	2103      	movs	r1, #3
    22bc:	4b04      	ldr	r3, [pc, #16]	; (22d0 <FindFlightEndingAddress+0x24>)
    22be:	4798      	blx	r3

    u32_t flightEndAddress = addressToCheck[0] << 0 | addressToCheck[1] << 8 | addressToCheck[2] << 16;
    22c0:	7860      	ldrb	r0, [r4, #1]
    22c2:	78a3      	ldrb	r3, [r4, #2]
    22c4:	0200      	lsls	r0, r0, #8
    22c6:	041b      	lsls	r3, r3, #16
    22c8:	4318      	orrs	r0, r3
    22ca:	7823      	ldrb	r3, [r4, #0]
    22cc:	4318      	orrs	r0, r3

    return flightEndAddress;
}
    22ce:	bd16      	pop	{r1, r2, r4, pc}
    22d0:	00000341 	.word	0x00000341

000022d4 <isFlightLogged>:

bool isFlightLogged(u8_t flightNumbToCheck) {
    22d4:	b510      	push	{r4, lr}

    u32_t possibleStart = getFlightStartAddress(flightNumbToCheck);
    22d6:	4b04      	ldr	r3, [pc, #16]	; (22e8 <isFlightLogged+0x14>)
    22d8:	4798      	blx	r3
    22da:	4b04      	ldr	r3, [pc, #16]	; (22ec <isFlightLogged+0x18>)
    if (possibleStart == 0xFFFFFF) {
        return false;
    } else {
        return true;
    }
}
    22dc:	18c0      	adds	r0, r0, r3
    22de:	1e43      	subs	r3, r0, #1
    22e0:	4198      	sbcs	r0, r3
    22e2:	b2c0      	uxtb	r0, r0
    22e4:	bd10      	pop	{r4, pc}
    22e6:	46c0      	nop			; (mov r8, r8)
    22e8:	00002285 	.word	0x00002285
    22ec:	ff000001 	.word	0xff000001

000022f0 <writeFlightEndAddress>:



void writeFlightEndAddress() {
    22f0:	b507      	push	{r0, r1, r2, lr}
    u32_t endingAddress = currentAddress;

    u8_t address[3] = {endingAddress >> 0, endingAddress >> 8, endingAddress >> 16};

    u16_t flightAddressLoc = FLIGHTZEROEND + (flightNumb * 0x06);
    AT25SFWriteBytes(flightAddressLoc, 3, address);
    22f2:	2006      	movs	r0, #6



void writeFlightEndAddress() {

    u32_t endingAddress = currentAddress;
    22f4:	4b09      	ldr	r3, [pc, #36]	; (231c <writeFlightEndAddress+0x2c>)

    u8_t address[3] = {endingAddress >> 0, endingAddress >> 8, endingAddress >> 16};
    22f6:	aa01      	add	r2, sp, #4



void writeFlightEndAddress() {

    u32_t endingAddress = currentAddress;
    22f8:	681b      	ldr	r3, [r3, #0]

    u8_t address[3] = {endingAddress >> 0, endingAddress >> 8, endingAddress >> 16};
    22fa:	7013      	strb	r3, [r2, #0]
    22fc:	0a19      	lsrs	r1, r3, #8
    22fe:	0c1b      	lsrs	r3, r3, #16
    2300:	7093      	strb	r3, [r2, #2]

    u16_t flightAddressLoc = FLIGHTZEROEND + (flightNumb * 0x06);
    2302:	4b07      	ldr	r3, [pc, #28]	; (2320 <writeFlightEndAddress+0x30>)

void writeFlightEndAddress() {

    u32_t endingAddress = currentAddress;

    u8_t address[3] = {endingAddress >> 0, endingAddress >> 8, endingAddress >> 16};
    2304:	7051      	strb	r1, [r2, #1]

    u16_t flightAddressLoc = FLIGHTZEROEND + (flightNumb * 0x06);
    AT25SFWriteBytes(flightAddressLoc, 3, address);
    2306:	781b      	ldrb	r3, [r3, #0]
    2308:	2103      	movs	r1, #3
    230a:	4358      	muls	r0, r3
    230c:	3004      	adds	r0, #4
    230e:	30ff      	adds	r0, #255	; 0xff
    2310:	4b04      	ldr	r3, [pc, #16]	; (2324 <writeFlightEndAddress+0x34>)
    2312:	4798      	blx	r3
    delay_ms(10);
    2314:	200a      	movs	r0, #10
    2316:	4b04      	ldr	r3, [pc, #16]	; (2328 <writeFlightEndAddress+0x38>)
    2318:	4798      	blx	r3

}
    231a:	bd07      	pop	{r0, r1, r2, pc}
    231c:	200007bc 	.word	0x200007bc
    2320:	20000521 	.word	0x20000521
    2324:	00000255 	.word	0x00000255
    2328:	00001015 	.word	0x00001015

0000232c <findNewFlightStart>:




void findNewFlightStart() {
    232c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

    for (u8_t flightNumbToCheck = 0; flightNumbToCheck < 20; ++flightNumbToCheck) {
    232e:	2400      	movs	r4, #0

        if (!isFlightLogged(flightNumbToCheck)) {
    2330:	0020      	movs	r0, r4
    2332:	4b23      	ldr	r3, [pc, #140]	; (23c0 <findNewFlightStart+0x94>)
    2334:	4798      	blx	r3
    2336:	2800      	cmp	r0, #0
    2338:	d13c      	bne.n	23b4 <findNewFlightStart+0x88>
    233a:	4f22      	ldr	r7, [pc, #136]	; (23c4 <findNewFlightStart+0x98>)
    233c:	ad01      	add	r5, sp, #4

            if (flightNumbToCheck > 0) {
    233e:	2c00      	cmp	r4, #0
    2340:	d016      	beq.n	2370 <findNewFlightStart+0x44>


                u32_t startAddress = FindFlightEndingAddress(flightNumbToCheck - 1);
    2342:	1e60      	subs	r0, r4, #1
    2344:	4b20      	ldr	r3, [pc, #128]	; (23c8 <findNewFlightStart+0x9c>)
    2346:	b2c0      	uxtb	r0, r0
    2348:	4798      	blx	r3
                delay_ms(5);
    234a:	4b20      	ldr	r3, [pc, #128]	; (23cc <findNewFlightStart+0xa0>)
        if (!isFlightLogged(flightNumbToCheck)) {

            if (flightNumbToCheck > 0) {


                u32_t startAddress = FindFlightEndingAddress(flightNumbToCheck - 1);
    234c:	0006      	movs	r6, r0
                delay_ms(5);
    234e:	2005      	movs	r0, #5
    2350:	4798      	blx	r3
                currentAddress = startAddress;

                u8_t address[3] = {startAddress >> 0, startAddress >> 8, startAddress >> 16};

                u16_t flightAddressLoc = FLIGHTZEROSTART + (flightNumbToCheck * 0x06);
                AT25SFWriteBytes(flightAddressLoc, 3, address);
    2352:	2006      	movs	r0, #6
    2354:	4360      	muls	r0, r4
                u32_t startAddress = FindFlightEndingAddress(flightNumbToCheck - 1);
                delay_ms(5);

                currentAddress = startAddress;

                u8_t address[3] = {startAddress >> 0, startAddress >> 8, startAddress >> 16};
    2356:	0a33      	lsrs	r3, r6, #8

                u16_t flightAddressLoc = FLIGHTZEROSTART + (flightNumbToCheck * 0x06);
                AT25SFWriteBytes(flightAddressLoc, 3, address);
    2358:	3001      	adds	r0, #1


                u32_t startAddress = FindFlightEndingAddress(flightNumbToCheck - 1);
                delay_ms(5);

                currentAddress = startAddress;
    235a:	603e      	str	r6, [r7, #0]

                u8_t address[3] = {startAddress >> 0, startAddress >> 8, startAddress >> 16};
    235c:	702e      	strb	r6, [r5, #0]
    235e:	706b      	strb	r3, [r5, #1]
    2360:	0c36      	lsrs	r6, r6, #16

                u16_t flightAddressLoc = FLIGHTZEROSTART + (flightNumbToCheck * 0x06);
                AT25SFWriteBytes(flightAddressLoc, 3, address);
    2362:	30ff      	adds	r0, #255	; 0xff
    2364:	002a      	movs	r2, r5
    2366:	2103      	movs	r1, #3
    2368:	4b19      	ldr	r3, [pc, #100]	; (23d0 <findNewFlightStart+0xa4>)
                u32_t startAddress = FindFlightEndingAddress(flightNumbToCheck - 1);
                delay_ms(5);

                currentAddress = startAddress;

                u8_t address[3] = {startAddress >> 0, startAddress >> 8, startAddress >> 16};
    236a:	70ae      	strb	r6, [r5, #2]

                u16_t flightAddressLoc = FLIGHTZEROSTART + (flightNumbToCheck * 0x06);
                AT25SFWriteBytes(flightAddressLoc, 3, address);
    236c:	4798      	blx	r3
    236e:	e00f      	b.n	2390 <findNewFlightStart+0x64>

                // for flight 0, starting address is always 0x00100 (beginning of second 4k block)
            } else {
                u8_t address[3] = {0x00,0x10,0x00};
    2370:	2310      	movs	r3, #16
                AT25SFWriteBytes(FLIGHTZEROSTART, 3, address);
    2372:	2080      	movs	r0, #128	; 0x80
                u16_t flightAddressLoc = FLIGHTZEROSTART + (flightNumbToCheck * 0x06);
                AT25SFWriteBytes(flightAddressLoc, 3, address);

                // for flight 0, starting address is always 0x00100 (beginning of second 4k block)
            } else {
                u8_t address[3] = {0x00,0x10,0x00};
    2374:	706b      	strb	r3, [r5, #1]
                AT25SFWriteBytes(FLIGHTZEROSTART, 3, address);
    2376:	0040      	lsls	r0, r0, #1
    2378:	4b15      	ldr	r3, [pc, #84]	; (23d0 <findNewFlightStart+0xa4>)
    237a:	002a      	movs	r2, r5
    237c:	2103      	movs	r1, #3
                u16_t flightAddressLoc = FLIGHTZEROSTART + (flightNumbToCheck * 0x06);
                AT25SFWriteBytes(flightAddressLoc, 3, address);

                // for flight 0, starting address is always 0x00100 (beginning of second 4k block)
            } else {
                u8_t address[3] = {0x00,0x10,0x00};
    237e:	702c      	strb	r4, [r5, #0]
    2380:	70ac      	strb	r4, [r5, #2]
                AT25SFWriteBytes(FLIGHTZEROSTART, 3, address);
    2382:	4798      	blx	r3
                currentAddress = 0x001000;
    2384:	2380      	movs	r3, #128	; 0x80
    2386:	015b      	lsls	r3, r3, #5
    2388:	603b      	str	r3, [r7, #0]
                beep(1500);
    238a:	4812      	ldr	r0, [pc, #72]	; (23d4 <findNewFlightStart+0xa8>)
    238c:	4b12      	ldr	r3, [pc, #72]	; (23d8 <findNewFlightStart+0xac>)
    238e:	4798      	blx	r3
            }
            flightNumb = flightNumbToCheck;
    2390:	4b12      	ldr	r3, [pc, #72]	; (23dc <findNewFlightStart+0xb0>)
    2392:	701c      	strb	r4, [r3, #0]

            while (flightNumbToCheck > 0) {
                beep(500);
    2394:	20fa      	movs	r0, #250	; 0xfa
    2396:	0040      	lsls	r0, r0, #1
                currentAddress = 0x001000;
                beep(1500);
            }
            flightNumb = flightNumbToCheck;

            while (flightNumbToCheck > 0) {
    2398:	2c00      	cmp	r4, #0
    239a:	d008      	beq.n	23ae <findNewFlightStart+0x82>
                beep(500);
    239c:	4b0e      	ldr	r3, [pc, #56]	; (23d8 <findNewFlightStart+0xac>)
    239e:	4798      	blx	r3
                delay_ms(500);
    23a0:	20fa      	movs	r0, #250	; 0xfa
    23a2:	4b0a      	ldr	r3, [pc, #40]	; (23cc <findNewFlightStart+0xa0>)
    23a4:	0040      	lsls	r0, r0, #1
                --flightNumbToCheck;
    23a6:	3c01      	subs	r4, #1
            }
            flightNumb = flightNumbToCheck;

            while (flightNumbToCheck > 0) {
                beep(500);
                delay_ms(500);
    23a8:	4798      	blx	r3
                --flightNumbToCheck;
    23aa:	b2e4      	uxtb	r4, r4
    23ac:	e7f2      	b.n	2394 <findNewFlightStart+0x68>
            }
            delay_ms(500);
    23ae:	4b07      	ldr	r3, [pc, #28]	; (23cc <findNewFlightStart+0xa0>)
    23b0:	4798      	blx	r3
            break;
    23b2:	e003      	b.n	23bc <findNewFlightStart+0x90>



void findNewFlightStart() {

    for (u8_t flightNumbToCheck = 0; flightNumbToCheck < 20; ++flightNumbToCheck) {
    23b4:	3401      	adds	r4, #1
    23b6:	b2e4      	uxtb	r4, r4
    23b8:	2c14      	cmp	r4, #20
    23ba:	d1b9      	bne.n	2330 <findNewFlightStart+0x4>
            }
            delay_ms(500);
            break;
        }
    }
}
    23bc:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    23be:	46c0      	nop			; (mov r8, r8)
    23c0:	000022d5 	.word	0x000022d5
    23c4:	200007bc 	.word	0x200007bc
    23c8:	000022ad 	.word	0x000022ad
    23cc:	00001015 	.word	0x00001015
    23d0:	00000255 	.word	0x00000255
    23d4:	000005dc 	.word	0x000005dc
    23d8:	00000d85 	.word	0x00000d85
    23dc:	20000521 	.word	0x20000521

000023e0 <takeSample>:
#include <util.h>
#include <boardDefines.h>
#include <MS5803.h>

bool takeSample() {
    return SampleBool;
    23e0:	4b01      	ldr	r3, [pc, #4]	; (23e8 <takeSample+0x8>)
    23e2:	7818      	ldrb	r0, [r3, #0]
}
    23e4:	4770      	bx	lr
    23e6:	46c0      	nop			; (mov r8, r8)
    23e8:	2000053c 	.word	0x2000053c

000023ec <pullSample>:

void pullSample() {
    SampleBool = true;
    23ec:	2201      	movs	r2, #1
    23ee:	4b01      	ldr	r3, [pc, #4]	; (23f4 <pullSample+0x8>)
    23f0:	701a      	strb	r2, [r3, #0]
}
    23f2:	4770      	bx	lr
    23f4:	2000053c 	.word	0x2000053c

000023f8 <sampleTick>:
    SampleBool = false;
}

sample_t sample;

void sampleTick() {
    23f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    SampleBool = false;
    23fa:	2500      	movs	r5, #0
    23fc:	4b9e      	ldr	r3, [pc, #632]	; (2678 <sampleTick+0x280>)
    SampleBool = false;
}

sample_t sample;

void sampleTick() {
    23fe:	b087      	sub	sp, #28
    SampleBool = false;

    // take last samples time to discover Dt before setting new time
    sample.tickDelta = millis() - sample.sampleTick;
    2400:	4e9e      	ldr	r6, [pc, #632]	; (267c <sampleTick+0x284>)
}

sample_t sample;

void sampleTick() {
    SampleBool = false;
    2402:	701d      	strb	r5, [r3, #0]

    // take last samples time to discover Dt before setting new time
    sample.tickDelta = millis() - sample.sampleTick;
    2404:	47b0      	blx	r6
    2406:	4c9e      	ldr	r4, [pc, #632]	; (2680 <sampleTick+0x288>)
    2408:	6863      	ldr	r3, [r4, #4]
    240a:	1ac0      	subs	r0, r0, r3
    240c:	8020      	strh	r0, [r4, #0]
    sample.sampleTick = millis();
    240e:	47b0      	blx	r6
    altimeter.flightTime = sample.sampleTick - offsets.StartupTick;
    2410:	4b9c      	ldr	r3, [pc, #624]	; (2684 <sampleTick+0x28c>)

    sample.voltage.batV = adc_read(senseBatPin);
    2412:	4e9d      	ldr	r6, [pc, #628]	; (2688 <sampleTick+0x290>)
    SampleBool = false;

    // take last samples time to discover Dt before setting new time
    sample.tickDelta = millis() - sample.sampleTick;
    sample.sampleTick = millis();
    altimeter.flightTime = sample.sampleTick - offsets.StartupTick;
    2414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
void sampleTick() {
    SampleBool = false;

    // take last samples time to discover Dt before setting new time
    sample.tickDelta = millis() - sample.sampleTick;
    sample.sampleTick = millis();
    2416:	6060      	str	r0, [r4, #4]
    altimeter.flightTime = sample.sampleTick - offsets.StartupTick;
    2418:	1ac0      	subs	r0, r0, r3
    241a:	4b9c      	ldr	r3, [pc, #624]	; (268c <sampleTick+0x294>)

    sample.voltage.batV = adc_read(senseBatPin);
    241c:	7831      	ldrb	r1, [r6, #0]
    SampleBool = false;

    // take last samples time to discover Dt before setting new time
    sample.tickDelta = millis() - sample.sampleTick;
    sample.sampleTick = millis();
    altimeter.flightTime = sample.sampleTick - offsets.StartupTick;
    241e:	6098      	str	r0, [r3, #8]

    sample.voltage.batV = adc_read(senseBatPin);
    2420:	7873      	ldrb	r3, [r6, #1]
    2422:	78b0      	ldrb	r0, [r6, #2]
    2424:	021b      	lsls	r3, r3, #8
    2426:	430b      	orrs	r3, r1
    2428:	0400      	lsls	r0, r0, #16
    242a:	001a      	movs	r2, r3
    242c:	0003      	movs	r3, r0
    242e:	78f0      	ldrb	r0, [r6, #3]
    2430:	4313      	orrs	r3, r2
    2432:	0600      	lsls	r0, r0, #24
    2434:	7931      	ldrb	r1, [r6, #4]
    2436:	4318      	orrs	r0, r3
    2438:	4b95      	ldr	r3, [pc, #596]	; (2690 <sampleTick+0x298>)
    243a:	4798      	blx	r3
    sample.voltage.batFloat = sample.voltage.batV * 0.0019;
    243c:	4b95      	ldr	r3, [pc, #596]	; (2694 <sampleTick+0x29c>)
    // take last samples time to discover Dt before setting new time
    sample.tickDelta = millis() - sample.sampleTick;
    sample.sampleTick = millis();
    altimeter.flightTime = sample.sampleTick - offsets.StartupTick;

    sample.voltage.batV = adc_read(senseBatPin);
    243e:	8120      	strh	r0, [r4, #8]
    sample.voltage.batFloat = sample.voltage.batV * 0.0019;
    2440:	4798      	blx	r3
    2442:	4a95      	ldr	r2, [pc, #596]	; (2698 <sampleTick+0x2a0>)
    2444:	4f95      	ldr	r7, [pc, #596]	; (269c <sampleTick+0x2a4>)
    2446:	4b96      	ldr	r3, [pc, #600]	; (26a0 <sampleTick+0x2a8>)
    2448:	47b8      	blx	r7
    244a:	4b96      	ldr	r3, [pc, #600]	; (26a4 <sampleTick+0x2ac>)
    244c:	4798      	blx	r3

    sample.voltage.senseA = adc_read(senseAPin);
    244e:	79b3      	ldrb	r3, [r6, #6]
    2450:	7971      	ldrb	r1, [r6, #5]
    sample.tickDelta = millis() - sample.sampleTick;
    sample.sampleTick = millis();
    altimeter.flightTime = sample.sampleTick - offsets.StartupTick;

    sample.voltage.batV = adc_read(senseBatPin);
    sample.voltage.batFloat = sample.voltage.batV * 0.0019;
    2452:	60e0      	str	r0, [r4, #12]

    sample.voltage.senseA = adc_read(senseAPin);
    2454:	79f0      	ldrb	r0, [r6, #7]
    2456:	021b      	lsls	r3, r3, #8
    2458:	430b      	orrs	r3, r1
    245a:	0400      	lsls	r0, r0, #16
    245c:	4303      	orrs	r3, r0
    245e:	7a30      	ldrb	r0, [r6, #8]
    2460:	7a71      	ldrb	r1, [r6, #9]
    2462:	0600      	lsls	r0, r0, #24
    2464:	4318      	orrs	r0, r3
    2466:	4b8a      	ldr	r3, [pc, #552]	; (2690 <sampleTick+0x298>)
    2468:	4798      	blx	r3
    sample.voltage.senseB = adc_read(senseBPin);
    246a:	7af3      	ldrb	r3, [r6, #11]
    246c:	7ab1      	ldrb	r1, [r6, #10]
    altimeter.flightTime = sample.sampleTick - offsets.StartupTick;

    sample.voltage.batV = adc_read(senseBatPin);
    sample.voltage.batFloat = sample.voltage.batV * 0.0019;

    sample.voltage.senseA = adc_read(senseAPin);
    246e:	8220      	strh	r0, [r4, #16]
    sample.voltage.senseB = adc_read(senseBPin);
    2470:	7b30      	ldrb	r0, [r6, #12]
    2472:	021b      	lsls	r3, r3, #8
    2474:	430b      	orrs	r3, r1
    2476:	0400      	lsls	r0, r0, #16
    2478:	4303      	orrs	r3, r0
    247a:	7b70      	ldrb	r0, [r6, #13]
    247c:	7bb1      	ldrb	r1, [r6, #14]
    247e:	0600      	lsls	r0, r0, #24
    2480:	4318      	orrs	r0, r3
    2482:	4b83      	ldr	r3, [pc, #524]	; (2690 <sampleTick+0x298>)
    2484:	4798      	blx	r3
    sample.voltage.senseC = adc_read(senseCPin);
    2486:	7c33      	ldrb	r3, [r6, #16]
    2488:	7bf1      	ldrb	r1, [r6, #15]

    sample.voltage.batV = adc_read(senseBatPin);
    sample.voltage.batFloat = sample.voltage.batV * 0.0019;

    sample.voltage.senseA = adc_read(senseAPin);
    sample.voltage.senseB = adc_read(senseBPin);
    248a:	8260      	strh	r0, [r4, #18]
    sample.voltage.senseC = adc_read(senseCPin);
    248c:	7c70      	ldrb	r0, [r6, #17]
    248e:	021b      	lsls	r3, r3, #8
    2490:	430b      	orrs	r3, r1
    2492:	0400      	lsls	r0, r0, #16
    2494:	4303      	orrs	r3, r0
    2496:	7cb0      	ldrb	r0, [r6, #18]
    2498:	7cf1      	ldrb	r1, [r6, #19]
    249a:	0600      	lsls	r0, r0, #24
    249c:	4318      	orrs	r0, r3
    249e:	4b7c      	ldr	r3, [pc, #496]	; (2690 <sampleTick+0x298>)
    24a0:	4798      	blx	r3
    sample.voltage.senseD = adc_read(senseDPin);
    24a2:	7d73      	ldrb	r3, [r6, #21]
    24a4:	7d31      	ldrb	r1, [r6, #20]
    sample.voltage.batV = adc_read(senseBatPin);
    sample.voltage.batFloat = sample.voltage.batV * 0.0019;

    sample.voltage.senseA = adc_read(senseAPin);
    sample.voltage.senseB = adc_read(senseBPin);
    sample.voltage.senseC = adc_read(senseCPin);
    24a6:	82a0      	strh	r0, [r4, #20]
    sample.voltage.senseD = adc_read(senseDPin);
    24a8:	7db0      	ldrb	r0, [r6, #22]
    24aa:	021b      	lsls	r3, r3, #8
    24ac:	430b      	orrs	r3, r1
    24ae:	0400      	lsls	r0, r0, #16
    24b0:	001a      	movs	r2, r3
    24b2:	0003      	movs	r3, r0
    24b4:	7df0      	ldrb	r0, [r6, #23]
    24b6:	4313      	orrs	r3, r2
    24b8:	0600      	lsls	r0, r0, #24
    24ba:	7e31      	ldrb	r1, [r6, #24]
    24bc:	4318      	orrs	r0, r3
    24be:	4b74      	ldr	r3, [pc, #464]	; (2690 <sampleTick+0x298>)
    24c0:	4798      	blx	r3

    sample.analogRaw = adc_read(analogAccelPin);
    24c2:	7eb3      	ldrb	r3, [r6, #26]
    24c4:	7e71      	ldrb	r1, [r6, #25]
    sample.voltage.batFloat = sample.voltage.batV * 0.0019;

    sample.voltage.senseA = adc_read(senseAPin);
    sample.voltage.senseB = adc_read(senseBPin);
    sample.voltage.senseC = adc_read(senseCPin);
    sample.voltage.senseD = adc_read(senseDPin);
    24c6:	82e0      	strh	r0, [r4, #22]

    sample.analogRaw = adc_read(analogAccelPin);
    24c8:	7ef0      	ldrb	r0, [r6, #27]
    24ca:	021b      	lsls	r3, r3, #8
    24cc:	430b      	orrs	r3, r1
    24ce:	0400      	lsls	r0, r0, #16
    24d0:	4303      	orrs	r3, r0
    24d2:	7f30      	ldrb	r0, [r6, #28]
    24d4:	7f71      	ldrb	r1, [r6, #29]
    24d6:	0600      	lsls	r0, r0, #24
    24d8:	4318      	orrs	r0, r3
    24da:	4b6d      	ldr	r3, [pc, #436]	; (2690 <sampleTick+0x298>)
    24dc:	4798      	blx	r3
    sample.analogAccel = (sample.analogRaw - 3900) * -0.0154;
    24de:	4b72      	ldr	r3, [pc, #456]	; (26a8 <sampleTick+0x2b0>)
    sample.voltage.senseA = adc_read(senseAPin);
    sample.voltage.senseB = adc_read(senseBPin);
    sample.voltage.senseC = adc_read(senseCPin);
    sample.voltage.senseD = adc_read(senseDPin);

    sample.analogRaw = adc_read(analogAccelPin);
    24e0:	8320      	strh	r0, [r4, #24]
    sample.analogAccel = (sample.analogRaw - 3900) * -0.0154;
    24e2:	18c0      	adds	r0, r0, r3
    24e4:	4b6b      	ldr	r3, [pc, #428]	; (2694 <sampleTick+0x29c>)
    24e6:	4798      	blx	r3
    24e8:	4a70      	ldr	r2, [pc, #448]	; (26ac <sampleTick+0x2b4>)
    24ea:	4e6c      	ldr	r6, [pc, #432]	; (269c <sampleTick+0x2a4>)
    24ec:	4b70      	ldr	r3, [pc, #448]	; (26b0 <sampleTick+0x2b8>)
    24ee:	47b0      	blx	r6
    24f0:	4b6c      	ldr	r3, [pc, #432]	; (26a4 <sampleTick+0x2ac>)
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    24f2:	2680      	movs	r6, #128	; 0x80
    24f4:	4798      	blx	r3
    24f6:	4b6f      	ldr	r3, [pc, #444]	; (26b4 <sampleTick+0x2bc>)
    24f8:	01f6      	lsls	r6, r6, #7
    24fa:	61e0      	str	r0, [r4, #28]

    uint8_t dummy_Tx = 0xFF;
    uint8_t dummy_rx;

    pinLow(cs_baro);
    spiDataTransfer(SPI2, 0x50);
    24fc:	2150      	movs	r1, #80	; 0x50
    24fe:	615e      	str	r6, [r3, #20]
    2500:	2002      	movs	r0, #2
    2502:	4b6d      	ldr	r3, [pc, #436]	; (26b8 <sampleTick+0x2c0>)
    2504:	4798      	blx	r3
    pinHigh(cs_baro);
    delay_us(600);
    2506:	2096      	movs	r0, #150	; 0x96
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    2508:	4b6a      	ldr	r3, [pc, #424]	; (26b4 <sampleTick+0x2bc>)
    250a:	0080      	lsls	r0, r0, #2
    250c:	619e      	str	r6, [r3, #24]
    250e:	4b6b      	ldr	r3, [pc, #428]	; (26bc <sampleTick+0x2c4>)
    2510:	4798      	blx	r3
    uint32_t tempRaw = readMS5803AdcResults();
    2512:	4b6b      	ldr	r3, [pc, #428]	; (26c0 <sampleTick+0x2c8>)
    2514:	4798      	blx	r3
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    2516:	4b67      	ldr	r3, [pc, #412]	; (26b4 <sampleTick+0x2bc>)
    2518:	9001      	str	r0, [sp, #4]

    pinLow(cs_baro);
    spiDataTransfer(SPI2, 0x40);
    251a:	2140      	movs	r1, #64	; 0x40
    251c:	615e      	str	r6, [r3, #20]
    251e:	2002      	movs	r0, #2
    2520:	4b65      	ldr	r3, [pc, #404]	; (26b8 <sampleTick+0x2c0>)
    2522:	4798      	blx	r3
    2524:	2280      	movs	r2, #128	; 0x80
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    2526:	4b63      	ldr	r3, [pc, #396]	; (26b4 <sampleTick+0x2bc>)
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    2528:	00d2      	lsls	r2, r2, #3
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    252a:	619e      	str	r6, [r3, #24]
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    252c:	3394      	adds	r3, #148	; 0x94
    252e:	601a      	str	r2, [r3, #0]

    u8_t byteOne;
    u8_t byteTwo;
// Accel data
    pinLow(cs_accel);
    spiDataTransfer(SPI0, BMI055_X_ACC_LSB | BMI055_READ_REG);
    2530:	2182      	movs	r1, #130	; 0x82
    2532:	4b61      	ldr	r3, [pc, #388]	; (26b8 <sampleTick+0x2c0>)
    2534:	0028      	movs	r0, r5
    2536:	4798      	blx	r3
    byteOne = spiDataIn(SPI0);
    2538:	4e62      	ldr	r6, [pc, #392]	; (26c4 <sampleTick+0x2cc>)
    253a:	0028      	movs	r0, r5
    253c:	47b0      	blx	r6
    253e:	0007      	movs	r7, r0
    byteTwo = spiDataIn(SPI0);
    2540:	0028      	movs	r0, r5
    2542:	47b0      	blx	r6
    sample.altitudefeet = paToFeetNOAA(sample.pressureMbar);
}

int16_t twosComp(u8_t byteOne, u8_t byteTwo) {

    u16_t comp = byteOne | (byteTwo << 8);
    2544:	0200      	lsls	r0, r0, #8
    2546:	4307      	orrs	r7, r0
    2548:	b23b      	sxth	r3, r7
    pinLow(cs_accel);
    spiDataTransfer(SPI0, BMI055_X_ACC_LSB | BMI055_READ_REG);
    byteOne = spiDataIn(SPI0);
    byteTwo = spiDataIn(SPI0);
    int16_t accelXint = twosComp(byteOne,byteTwo);
    byteOne = spiDataIn(SPI0);
    254a:	0028      	movs	r0, r5
    sample.altitudefeet = paToFeetNOAA(sample.pressureMbar);
}

int16_t twosComp(u8_t byteOne, u8_t byteTwo) {

    u16_t comp = byteOne | (byteTwo << 8);
    254c:	9303      	str	r3, [sp, #12]
    pinLow(cs_accel);
    spiDataTransfer(SPI0, BMI055_X_ACC_LSB | BMI055_READ_REG);
    byteOne = spiDataIn(SPI0);
    byteTwo = spiDataIn(SPI0);
    int16_t accelXint = twosComp(byteOne,byteTwo);
    byteOne = spiDataIn(SPI0);
    254e:	47b0      	blx	r6
    2550:	0007      	movs	r7, r0
    byteTwo = spiDataIn(SPI0);
    2552:	0028      	movs	r0, r5
    2554:	47b0      	blx	r6
    sample.altitudefeet = paToFeetNOAA(sample.pressureMbar);
}

int16_t twosComp(u8_t byteOne, u8_t byteTwo) {

    u16_t comp = byteOne | (byteTwo << 8);
    2556:	0200      	lsls	r0, r0, #8
    2558:	4307      	orrs	r7, r0
    255a:	b23b      	sxth	r3, r7
    byteTwo = spiDataIn(SPI0);
    int16_t accelXint = twosComp(byteOne,byteTwo);
    byteOne = spiDataIn(SPI0);
    byteTwo = spiDataIn(SPI0);
    int16_t accelYint = twosComp(byteOne,byteTwo);
    byteOne = spiDataIn(SPI0);
    255c:	0028      	movs	r0, r5
    sample.altitudefeet = paToFeetNOAA(sample.pressureMbar);
}

int16_t twosComp(u8_t byteOne, u8_t byteTwo) {

    u16_t comp = byteOne | (byteTwo << 8);
    255e:	9302      	str	r3, [sp, #8]
    byteTwo = spiDataIn(SPI0);
    int16_t accelXint = twosComp(byteOne,byteTwo);
    byteOne = spiDataIn(SPI0);
    byteTwo = spiDataIn(SPI0);
    int16_t accelYint = twosComp(byteOne,byteTwo);
    byteOne = spiDataIn(SPI0);
    2560:	47b0      	blx	r6
    2562:	9004      	str	r0, [sp, #16]
    byteTwo = spiDataIn(SPI0);
    2564:	0028      	movs	r0, r5
    2566:	47b0      	blx	r6
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    2568:	2280      	movs	r2, #128	; 0x80
    256a:	4b52      	ldr	r3, [pc, #328]	; (26b4 <sampleTick+0x2bc>)
    256c:	00d2      	lsls	r2, r2, #3
    256e:	3398      	adds	r3, #152	; 0x98
    2570:	9005      	str	r0, [sp, #20]
    2572:	601a      	str	r2, [r3, #0]

    accelXint =  accelXint >> 4;
    accelYint =  accelYint >> 4;
    accelZint =  accelZint >> 4;

    sample.accelX =  accelXint * BMI055_ACCEL_16G_DIV;
    2574:	9b03      	ldr	r3, [sp, #12]
    2576:	1118      	asrs	r0, r3, #4
    2578:	4b46      	ldr	r3, [pc, #280]	; (2694 <sampleTick+0x29c>)
    257a:	4798      	blx	r3
    257c:	23fe      	movs	r3, #254	; 0xfe
    257e:	2200      	movs	r2, #0
    2580:	4f46      	ldr	r7, [pc, #280]	; (269c <sampleTick+0x2a4>)
    2582:	059b      	lsls	r3, r3, #22
    2584:	47b8      	blx	r7
    2586:	4b47      	ldr	r3, [pc, #284]	; (26a4 <sampleTick+0x2ac>)
    2588:	4798      	blx	r3
    sample.accelY =  accelYint * BMI055_ACCEL_16G_DIV;
    258a:	9b02      	ldr	r3, [sp, #8]

    accelXint =  accelXint >> 4;
    accelYint =  accelYint >> 4;
    accelZint =  accelZint >> 4;

    sample.accelX =  accelXint * BMI055_ACCEL_16G_DIV;
    258c:	6220      	str	r0, [r4, #32]
    sample.accelY =  accelYint * BMI055_ACCEL_16G_DIV;
    258e:	1118      	asrs	r0, r3, #4
    2590:	4b40      	ldr	r3, [pc, #256]	; (2694 <sampleTick+0x29c>)
    2592:	4798      	blx	r3
    2594:	23fe      	movs	r3, #254	; 0xfe
    2596:	2200      	movs	r2, #0
    2598:	059b      	lsls	r3, r3, #22
    259a:	47b8      	blx	r7
    259c:	4b41      	ldr	r3, [pc, #260]	; (26a4 <sampleTick+0x2ac>)
    259e:	4798      	blx	r3
    sample.accelZ = accelZint * BMI055_ACCEL_16G_DIV;
    25a0:	9b05      	ldr	r3, [sp, #20]
    accelXint =  accelXint >> 4;
    accelYint =  accelYint >> 4;
    accelZint =  accelZint >> 4;

    sample.accelX =  accelXint * BMI055_ACCEL_16G_DIV;
    sample.accelY =  accelYint * BMI055_ACCEL_16G_DIV;
    25a2:	6260      	str	r0, [r4, #36]	; 0x24
    sample.accelZ = accelZint * BMI055_ACCEL_16G_DIV;
    25a4:	021f      	lsls	r7, r3, #8
    25a6:	9b04      	ldr	r3, [sp, #16]
    25a8:	431f      	orrs	r7, r3
    25aa:	b238      	sxth	r0, r7
    25ac:	4b39      	ldr	r3, [pc, #228]	; (2694 <sampleTick+0x29c>)
    25ae:	1100      	asrs	r0, r0, #4
    25b0:	4798      	blx	r3
    25b2:	23fe      	movs	r3, #254	; 0xfe
    25b4:	2200      	movs	r2, #0
    25b6:	4f39      	ldr	r7, [pc, #228]	; (269c <sampleTick+0x2a4>)
    25b8:	059b      	lsls	r3, r3, #22
    25ba:	47b8      	blx	r7
    25bc:	4b39      	ldr	r3, [pc, #228]	; (26a4 <sampleTick+0x2ac>)
    25be:	4798      	blx	r3
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    25c0:	2280      	movs	r2, #128	; 0x80
    25c2:	4b3c      	ldr	r3, [pc, #240]	; (26b4 <sampleTick+0x2bc>)
    25c4:	00d2      	lsls	r2, r2, #3

    // Gyro data
    pinLow(cs_gyro);
    spiDataTransfer(SPI0, BMI055_X_GYRO_LSB | BMI055_READ_REG);
    25c6:	2182      	movs	r1, #130	; 0x82
    accelYint =  accelYint >> 4;
    accelZint =  accelZint >> 4;

    sample.accelX =  accelXint * BMI055_ACCEL_16G_DIV;
    sample.accelY =  accelYint * BMI055_ACCEL_16G_DIV;
    sample.accelZ = accelZint * BMI055_ACCEL_16G_DIV;
    25c8:	62a0      	str	r0, [r4, #40]	; 0x28
    25ca:	615a      	str	r2, [r3, #20]

    // Gyro data
    pinLow(cs_gyro);
    spiDataTransfer(SPI0, BMI055_X_GYRO_LSB | BMI055_READ_REG);
    25cc:	0028      	movs	r0, r5
    25ce:	4b3a      	ldr	r3, [pc, #232]	; (26b8 <sampleTick+0x2c0>)
    25d0:	4798      	blx	r3
    byteOne = spiDataIn(SPI0);
    25d2:	0028      	movs	r0, r5
    25d4:	47b0      	blx	r6
    25d6:	0007      	movs	r7, r0
    byteTwo = spiDataIn(SPI0);
    25d8:	0028      	movs	r0, r5
    25da:	47b0      	blx	r6
    sample.altitudefeet = paToFeetNOAA(sample.pressureMbar);
}

int16_t twosComp(u8_t byteOne, u8_t byteTwo) {

    u16_t comp = byteOne | (byteTwo << 8);
    25dc:	0200      	lsls	r0, r0, #8
    25de:	4307      	orrs	r7, r0
    25e0:	b23b      	sxth	r3, r7
    pinLow(cs_gyro);
    spiDataTransfer(SPI0, BMI055_X_GYRO_LSB | BMI055_READ_REG);
    byteOne = spiDataIn(SPI0);
    byteTwo = spiDataIn(SPI0);
    int16_t gyroXint = twosComp(byteOne,byteTwo);
    byteOne = spiDataIn(SPI0);
    25e2:	0028      	movs	r0, r5
    sample.altitudefeet = paToFeetNOAA(sample.pressureMbar);
}

int16_t twosComp(u8_t byteOne, u8_t byteTwo) {

    u16_t comp = byteOne | (byteTwo << 8);
    25e4:	9303      	str	r3, [sp, #12]
    pinLow(cs_gyro);
    spiDataTransfer(SPI0, BMI055_X_GYRO_LSB | BMI055_READ_REG);
    byteOne = spiDataIn(SPI0);
    byteTwo = spiDataIn(SPI0);
    int16_t gyroXint = twosComp(byteOne,byteTwo);
    byteOne = spiDataIn(SPI0);
    25e6:	47b0      	blx	r6
    25e8:	0007      	movs	r7, r0
    byteTwo = spiDataIn(SPI0);
    25ea:	0028      	movs	r0, r5
    25ec:	47b0      	blx	r6
    sample.altitudefeet = paToFeetNOAA(sample.pressureMbar);
}

int16_t twosComp(u8_t byteOne, u8_t byteTwo) {

    u16_t comp = byteOne | (byteTwo << 8);
    25ee:	0200      	lsls	r0, r0, #8
    25f0:	4307      	orrs	r7, r0
    25f2:	b23b      	sxth	r3, r7
    byteTwo = spiDataIn(SPI0);
    int16_t gyroXint = twosComp(byteOne,byteTwo);
    byteOne = spiDataIn(SPI0);
    byteTwo = spiDataIn(SPI0);
    int16_t gyroYint = twosComp(byteOne,byteTwo);
    byteOne = spiDataIn(SPI0);
    25f4:	0028      	movs	r0, r5
    sample.altitudefeet = paToFeetNOAA(sample.pressureMbar);
}

int16_t twosComp(u8_t byteOne, u8_t byteTwo) {

    u16_t comp = byteOne | (byteTwo << 8);
    25f6:	9302      	str	r3, [sp, #8]
    byteTwo = spiDataIn(SPI0);
    int16_t gyroXint = twosComp(byteOne,byteTwo);
    byteOne = spiDataIn(SPI0);
    byteTwo = spiDataIn(SPI0);
    int16_t gyroYint = twosComp(byteOne,byteTwo);
    byteOne = spiDataIn(SPI0);
    25f8:	47b0      	blx	r6
    25fa:	0007      	movs	r7, r0
    byteTwo = spiDataIn(SPI0);
    25fc:	0028      	movs	r0, r5
    25fe:	47b0      	blx	r6
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    2600:	2280      	movs	r2, #128	; 0x80
    2602:	4b2c      	ldr	r3, [pc, #176]	; (26b4 <sampleTick+0x2bc>)
    2604:	00d2      	lsls	r2, r2, #3
    2606:	619a      	str	r2, [r3, #24]

    gyroXint = gyroXint >> 4;
    gyroYint = gyroYint >> 4;
    gyroZint = gyroZint >> 4;

    sample.gyroX =  gyroXint * BMI055_GYRO_2000DS_DIV;
    2608:	9b03      	ldr	r3, [sp, #12]
    int16_t gyroXint = twosComp(byteOne,byteTwo);
    byteOne = spiDataIn(SPI0);
    byteTwo = spiDataIn(SPI0);
    int16_t gyroYint = twosComp(byteOne,byteTwo);
    byteOne = spiDataIn(SPI0);
    byteTwo = spiDataIn(SPI0);
    260a:	0005      	movs	r5, r0

    gyroXint = gyroXint >> 4;
    gyroYint = gyroYint >> 4;
    gyroZint = gyroZint >> 4;

    sample.gyroX =  gyroXint * BMI055_GYRO_2000DS_DIV;
    260c:	1118      	asrs	r0, r3, #4
    260e:	4b21      	ldr	r3, [pc, #132]	; (2694 <sampleTick+0x29c>)
    2610:	4798      	blx	r3
    2612:	23fe      	movs	r3, #254	; 0xfe
    2614:	4e21      	ldr	r6, [pc, #132]	; (269c <sampleTick+0x2a4>)
    2616:	2200      	movs	r2, #0
    2618:	059b      	lsls	r3, r3, #22
    261a:	47b0      	blx	r6
    261c:	4b21      	ldr	r3, [pc, #132]	; (26a4 <sampleTick+0x2ac>)
    261e:	4798      	blx	r3
    sample.gyroY =  gyroYint * BMI055_GYRO_2000DS_DIV;
    2620:	9b02      	ldr	r3, [sp, #8]

    gyroXint = gyroXint >> 4;
    gyroYint = gyroYint >> 4;
    gyroZint = gyroZint >> 4;

    sample.gyroX =  gyroXint * BMI055_GYRO_2000DS_DIV;
    2622:	62e0      	str	r0, [r4, #44]	; 0x2c
    sample.gyroY =  gyroYint * BMI055_GYRO_2000DS_DIV;
    2624:	1118      	asrs	r0, r3, #4
    2626:	4b1b      	ldr	r3, [pc, #108]	; (2694 <sampleTick+0x29c>)
    2628:	4798      	blx	r3
    262a:	23fe      	movs	r3, #254	; 0xfe
    262c:	2200      	movs	r2, #0
    262e:	059b      	lsls	r3, r3, #22
    2630:	47b0      	blx	r6
    2632:	4b1c      	ldr	r3, [pc, #112]	; (26a4 <sampleTick+0x2ac>)
    2634:	4798      	blx	r3
    2636:	6320      	str	r0, [r4, #48]	; 0x30
    sample.gyroZ =  gyroZint * BMI055_GYRO_2000DS_DIV;
    2638:	0228      	lsls	r0, r5, #8
    263a:	4307      	orrs	r7, r0
    263c:	b238      	sxth	r0, r7
    263e:	4b15      	ldr	r3, [pc, #84]	; (2694 <sampleTick+0x29c>)
    2640:	1100      	asrs	r0, r0, #4
    2642:	4798      	blx	r3
    2644:	23fe      	movs	r3, #254	; 0xfe
    2646:	2200      	movs	r2, #0
    2648:	059b      	lsls	r3, r3, #22
    264a:	47b0      	blx	r6
    264c:	4b15      	ldr	r3, [pc, #84]	; (26a4 <sampleTick+0x2ac>)
    264e:	4798      	blx	r3
    2650:	6360      	str	r0, [r4, #52]	; 0x34


    delay_us(400);
    2652:	20c8      	movs	r0, #200	; 0xc8
    2654:	4b19      	ldr	r3, [pc, #100]	; (26bc <sampleTick+0x2c4>)
    2656:	0040      	lsls	r0, r0, #1
    2658:	4798      	blx	r3
    u32_t PressureRaw = readMS5803AdcResults();
    265a:	4b19      	ldr	r3, [pc, #100]	; (26c0 <sampleTick+0x2c8>)
    265c:	4798      	blx	r3
    ConvertPressureTemperature(PressureRaw, tempRaw, &sample.temperatureCelcus, &sample.pressureMbar);
    265e:	4a1a      	ldr	r2, [pc, #104]	; (26c8 <sampleTick+0x2d0>)
    2660:	9901      	ldr	r1, [sp, #4]
    2662:	4b1a      	ldr	r3, [pc, #104]	; (26cc <sampleTick+0x2d4>)
    2664:	4d1a      	ldr	r5, [pc, #104]	; (26d0 <sampleTick+0x2d8>)
    2666:	47a8      	blx	r5
    sample.altitudefeet = paToFeetNOAA(sample.pressureMbar);
    2668:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    266a:	4b1a      	ldr	r3, [pc, #104]	; (26d4 <sampleTick+0x2dc>)
    266c:	4798      	blx	r3
    266e:	6420      	str	r0, [r4, #64]	; 0x40
    2670:	6461      	str	r1, [r4, #68]	; 0x44
}
    2672:	b007      	add	sp, #28
    2674:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2676:	46c0      	nop			; (mov r8, r8)
    2678:	2000053c 	.word	0x2000053c
    267c:	00001061 	.word	0x00001061
    2680:	200007c8 	.word	0x200007c8
    2684:	200004d8 	.word	0x200004d8
    2688:	000064f8 	.word	0x000064f8
    268c:	20000528 	.word	0x20000528
    2690:	00000d1d 	.word	0x00000d1d
    2694:	00005d99 	.word	0x00005d99
    2698:	77318fc5 	.word	0x77318fc5
    269c:	00005151 	.word	0x00005151
    26a0:	3f5f212d 	.word	0x3f5f212d
    26a4:	00005f35 	.word	0x00005f35
    26a8:	fffff0c4 	.word	0xfffff0c4
    26ac:	02de00d2 	.word	0x02de00d2
    26b0:	bf8f8a09 	.word	0xbf8f8a09
    26b4:	41004400 	.word	0x41004400
    26b8:	000027e9 	.word	0x000027e9
    26bc:	00000fe5 	.word	0x00000fe5
    26c0:	0000041d 	.word	0x0000041d
    26c4:	00002801 	.word	0x00002801
    26c8:	20000804 	.word	0x20000804
    26cc:	20000800 	.word	0x20000800
    26d0:	0000045d 	.word	0x0000045d
    26d4:	000004fd 	.word	0x000004fd

000026d8 <sercomClockEnable>:
#include <util.h>

void sercomClockEnable(SercomId id, uint32_t clock_channel, u8_t divider) {
    26d8:	b570      	push	{r4, r5, r6, lr}
    26da:	0004      	movs	r4, r0
    // prevent this clock write from changing any other clocks
    PM->APBCMASK.reg |= 1 << (PM_APBCMASK_SERCOM0_Pos + id);
    26dc:	2301      	movs	r3, #1
    26de:	1ca6      	adds	r6, r4, #2
    26e0:	40b3      	lsls	r3, r6
    26e2:	480d      	ldr	r0, [pc, #52]	; (2718 <sercomClockEnable+0x40>)
#include <util.h>

void sercomClockEnable(SercomId id, uint32_t clock_channel, u8_t divider) {
    26e4:	000d      	movs	r5, r1
    // prevent this clock write from changing any other clocks
    PM->APBCMASK.reg |= 1 << (PM_APBCMASK_SERCOM0_Pos + id);
    26e6:	6a01      	ldr	r1, [r0, #32]
    26e8:	430b      	orrs	r3, r1
    26ea:	6203      	str	r3, [r0, #32]


    if (clock_channel != 0) {
    26ec:	2d00      	cmp	r5, #0
    26ee:	d003      	beq.n	26f8 <sercomClockEnable+0x20>
        // clock generators 3-8 have 8 division factor bits - DIV[7:0]
        gclkEnable(clock_channel, GCLK_SOURCE_DFLL48M, divider);
    26f0:	2107      	movs	r1, #7
    26f2:	0028      	movs	r0, r5
    26f4:	4b09      	ldr	r3, [pc, #36]	; (271c <sercomClockEnable+0x44>)
    26f6:	4798      	blx	r3
    }


    // attach clock
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
    26f8:	22f0      	movs	r2, #240	; 0xf0
    26fa:	2080      	movs	r0, #128	; 0x80
    26fc:	0229      	lsls	r1, r5, #8
    26fe:	0112      	lsls	r2, r2, #4
    2700:	4011      	ands	r1, r2
    2702:	01c0      	lsls	r0, r0, #7
    2704:	4301      	orrs	r1, r0
    2706:	0020      	movs	r0, r4
    2708:	3014      	adds	r0, #20
    270a:	223f      	movs	r2, #63	; 0x3f
    270c:	0003      	movs	r3, r0
    270e:	4013      	ands	r3, r2
    2710:	4319      	orrs	r1, r3
    2712:	4b03      	ldr	r3, [pc, #12]	; (2720 <sercomClockEnable+0x48>)
    2714:	8059      	strh	r1, [r3, #2]
                        GCLK_CLKCTRL_GEN(clock_channel) |
                        GCLK_CLKCTRL_ID(SERCOM0_GCLK_ID_CORE + id);
}
    2716:	bd70      	pop	{r4, r5, r6, pc}
    2718:	40000400 	.word	0x40000400
    271c:	00000f95 	.word	0x00000f95
    2720:	40000c00 	.word	0x40000c00

00002724 <sercomReset>:
void computeKalmanStates();



inline static Sercom* sercom(SercomId id) {
    return (Sercom*) (0x42000800U + id * 1024);
    2724:	4b04      	ldr	r3, [pc, #16]	; (2738 <sercomReset+0x14>)
    2726:	0280      	lsls	r0, r0, #10
    2728:	18c0      	adds	r0, r0, r3


void sercomReset(SercomId id) {
    sercom(id)->SPI.CTRLA.reg = SERCOM_SPI_CTRLA_SWRST;
    272a:	2301      	movs	r3, #1
    272c:	6003      	str	r3, [r0, #0]
    while(sercom(id)->SPI.CTRLA.reg & SERCOM_SPI_CTRLA_SWRST);
    272e:	6802      	ldr	r2, [r0, #0]
    2730:	421a      	tst	r2, r3
    2732:	d1fc      	bne.n	272e <sercomReset+0xa>
}
    2734:	4770      	bx	lr
    2736:	46c0      	nop			; (mov r8, r8)
    2738:	42000800 	.word	0x42000800

0000273c <sercomSpiMasterInit>:
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
}


void sercomSpiMasterInit(SercomId id, u32_t dipo, u32_t dopo, bool cpol, bool cpha, u8_t baud) {
    273c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    273e:	0004      	movs	r4, r0
    2740:	9300      	str	r3, [sp, #0]
    2742:	ab08      	add	r3, sp, #32
    2744:	781b      	ldrb	r3, [r3, #0]
    2746:	000e      	movs	r6, r1
    2748:	9301      	str	r3, [sp, #4]
    274a:	ab09      	add	r3, sp, #36	; 0x24
    274c:	781f      	ldrb	r7, [r3, #0]

    sercomReset(id);
    274e:	4b12      	ldr	r3, [pc, #72]	; (2798 <sercomSpiMasterInit+0x5c>)
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
}


void sercomSpiMasterInit(SercomId id, u32_t dipo, u32_t dopo, bool cpol, bool cpha, u8_t baud) {
    2750:	0015      	movs	r5, r2

    sercomReset(id);
    2752:	4798      	blx	r3
    2754:	4b11      	ldr	r3, [pc, #68]	; (279c <sercomSpiMasterInit+0x60>)
    2756:	02a4      	lsls	r4, r4, #10
    2758:	18e4      	adds	r4, r4, r3

    sercom(id)->SPI.CTRLB.reg
        = SERCOM_SPI_CTRLB_RXEN;
    275a:	2380      	movs	r3, #128	; 0x80
    275c:	029b      	lsls	r3, r3, #10
    275e:	6063      	str	r3, [r4, #4]
    2760:	23c0      	movs	r3, #192	; 0xc0
    sercom(id)->SPI.BAUD.reg = baud;

    sercom(id)->SPI.CTRLA.reg
        = SERCOM_SPI_CTRLA_ENABLE
          | SERCOM_SPI_CTRLA_MODE_SPI_MASTER
          | SERCOM_SPI_CTRLA_DIPO(dipo)
    2762:	21c0      	movs	r1, #192	; 0xc0
    2764:	042d      	lsls	r5, r5, #16
    2766:	029b      	lsls	r3, r3, #10
    2768:	402b      	ands	r3, r5
    276a:	250e      	movs	r5, #14
    276c:	0536      	lsls	r6, r6, #20
    276e:	0389      	lsls	r1, r1, #14
    2770:	4031      	ands	r1, r6
          | SERCOM_SPI_CTRLA_DOPO(dopo)
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
    2772:	9e00      	ldr	r6, [sp, #0]
    2774:	431d      	orrs	r5, r3
    2776:	1e73      	subs	r3, r6, #1
    2778:	419e      	sbcs	r6, r3
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
    277a:	9b01      	ldr	r3, [sp, #4]
    sercom(id)->SPI.CTRLA.reg
        = SERCOM_SPI_CTRLA_ENABLE
          | SERCOM_SPI_CTRLA_MODE_SPI_MASTER
          | SERCOM_SPI_CTRLA_DIPO(dipo)
          | SERCOM_SPI_CTRLA_DOPO(dopo)
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
    277c:	0772      	lsls	r2, r6, #29
    277e:	430d      	orrs	r5, r1
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
    2780:	432a      	orrs	r2, r5
    2782:	1e59      	subs	r1, r3, #1
    2784:	418b      	sbcs	r3, r1
    2786:	0016      	movs	r6, r2
    2788:	071b      	lsls	r3, r3, #28
    278a:	431e      	orrs	r6, r3
    sercomReset(id);

    sercom(id)->SPI.CTRLB.reg
        = SERCOM_SPI_CTRLB_RXEN;

    sercom(id)->SPI.BAUD.reg = baud;
    278c:	7327      	strb	r7, [r4, #12]

    sercom(id)->SPI.CTRLA.reg
        = SERCOM_SPI_CTRLA_ENABLE
    278e:	6026      	str	r6, [r4, #0]
        };
    }
}

static inline void SPI_sync(SercomId id) {
    while  (sercom(id)->SPI.SYNCBUSY.bit.CTRLB);
    2790:	69e3      	ldr	r3, [r4, #28]
    2792:	075b      	lsls	r3, r3, #29
    2794:	d4fc      	bmi.n	2790 <sercomSpiMasterInit+0x54>
          | SERCOM_SPI_CTRLA_DOPO(dopo)
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);

    SPI_sync(id);
}
    2796:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    2798:	00002725 	.word	0x00002725
    279c:	42000800 	.word	0x42000800

000027a0 <sercomUartInit>:




void sercomUartInit(SercomId id, u32_t rxpo, u32_t txpo, int32_t fBAUD) {
    27a0:	b570      	push	{r4, r5, r6, lr}
    27a2:	0006      	movs	r6, r0

    //float BAUD = 65536*(1-(16*(115200/(48000000/8))));


    sercomReset(id);
    27a4:	4b0c      	ldr	r3, [pc, #48]	; (27d8 <sercomUartInit+0x38>)
}




void sercomUartInit(SercomId id, u32_t rxpo, u32_t txpo, int32_t fBAUD) {
    27a6:	000d      	movs	r5, r1
    27a8:	0014      	movs	r4, r2

    //float BAUD = 65536*(1-(16*(115200/(48000000/8))));


    sercomReset(id);
    27aa:	4798      	blx	r3
void computeKalmanStates();



inline static Sercom* sercom(SercomId id) {
    return (Sercom*) (0x42000800U + id * 1024);
    27ac:	4b0b      	ldr	r3, [pc, #44]	; (27dc <sercomUartInit+0x3c>)
    27ae:	02b0      	lsls	r0, r6, #10
    27b0:	18c0      	adds	r0, r0, r3
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    27b2:	2304      	movs	r3, #4
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    27b4:	22c0      	movs	r2, #192	; 0xc0

    //float BAUD = 65536*(1-(16*(115200/(48000000/8))));


    sercomReset(id);
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    27b6:	6003      	str	r3, [r0, #0]
    sercom(id)->USART.BAUD.reg = 45403;
    27b8:	4b09      	ldr	r3, [pc, #36]	; (27e0 <sercomUartInit+0x40>)
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    27ba:	0529      	lsls	r1, r5, #20
    //float BAUD = 65536*(1-(16*(115200/(48000000/8))));


    sercomReset(id);
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    sercom(id)->USART.BAUD.reg = 45403;
    27bc:	8183      	strh	r3, [r0, #12]
    sercom(id)->USART.CTRLB.reg
        = SERCOM_USART_CTRLB_RXEN
    27be:	23c0      	movs	r3, #192	; 0xc0
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    27c0:	0392      	lsls	r2, r2, #14
    27c2:	4011      	ands	r1, r2
    27c4:	4a07      	ldr	r2, [pc, #28]	; (27e4 <sercomUartInit+0x44>)

    sercomReset(id);
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    sercom(id)->USART.BAUD.reg = 45403;
    sercom(id)->USART.CTRLB.reg
        = SERCOM_USART_CTRLB_RXEN
    27c6:	029b      	lsls	r3, r3, #10
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    27c8:	0424      	lsls	r4, r4, #16

    sercomReset(id);
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    sercom(id)->USART.BAUD.reg = 45403;
    sercom(id)->USART.CTRLB.reg
        = SERCOM_USART_CTRLB_RXEN
    27ca:	6043      	str	r3, [r0, #4]
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    27cc:	4311      	orrs	r1, r2
    27ce:	4023      	ands	r3, r4
    27d0:	430b      	orrs	r3, r1
    sercom(id)->USART.BAUD.reg = 45403;
    sercom(id)->USART.CTRLB.reg
        = SERCOM_USART_CTRLB_RXEN
          | SERCOM_USART_CTRLB_TXEN;
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
    27d2:	6003      	str	r3, [r0, #0]
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
}
    27d4:	bd70      	pop	{r4, r5, r6, pc}
    27d6:	46c0      	nop			; (mov r8, r8)
    27d8:	00002725 	.word	0x00002725
    27dc:	42000800 	.word	0x42000800
    27e0:	ffffb15b 	.word	0xffffb15b
    27e4:	40000006 	.word	0x40000006

000027e8 <spiDataTransfer>:
    27e8:	4b04      	ldr	r3, [pc, #16]	; (27fc <spiDataTransfer+0x14>)
    27ea:	0280      	lsls	r0, r0, #10
    27ec:	18c0      	adds	r0, r0, r3

u8_t spiDataTransfer(SercomId id, u8_t data) {
    sercom(id)->SPI.DATA.reg = data;
    27ee:	6281      	str	r1, [r0, #40]	; 0x28
    while(sercom(id)->SPI.INTFLAG.bit.RXC == 0);
    27f0:	7e03      	ldrb	r3, [r0, #24]
    27f2:	075b      	lsls	r3, r3, #29
    27f4:	d5fc      	bpl.n	27f0 <spiDataTransfer+0x8>
    return sercom(id)->SPI.DATA.reg;
    27f6:	6a80      	ldr	r0, [r0, #40]	; 0x28
    27f8:	b2c0      	uxtb	r0, r0
}
    27fa:	4770      	bx	lr
    27fc:	42000800 	.word	0x42000800

00002800 <spiDataIn>:
    2800:	4b05      	ldr	r3, [pc, #20]	; (2818 <spiDataIn+0x18>)
    2802:	0280      	lsls	r0, r0, #10
    2804:	18c0      	adds	r0, r0, r3
    while(sercom(id)->SPI.INTFLAG.bit.RXC == 0);
    u8_t dummy = sercom(id)->SPI.DATA.reg;
}

u8_t spiDataIn(SercomId id) {
    sercom(id)->SPI.DATA.reg = 0xFF;
    2806:	23ff      	movs	r3, #255	; 0xff
    2808:	6283      	str	r3, [r0, #40]	; 0x28
    while(sercom(id)->SPI.INTFLAG.bit.RXC == 0);
    280a:	7e03      	ldrb	r3, [r0, #24]
    280c:	075b      	lsls	r3, r3, #29
    280e:	d5fc      	bpl.n	280a <spiDataIn+0xa>
    return sercom(id)->SPI.DATA.reg;
    2810:	6a80      	ldr	r0, [r0, #40]	; 0x28
    2812:	b2c0      	uxtb	r0, r0
}
    2814:	4770      	bx	lr
    2816:	46c0      	nop			; (mov r8, r8)
    2818:	42000800 	.word	0x42000800

0000281c <usartDataOut>:
    281c:	4b04      	ldr	r3, [pc, #16]	; (2830 <usartDataOut+0x14>)
    281e:	0280      	lsls	r0, r0, #10
    2820:	18c0      	adds	r0, r0, r3

void usartDataOut(SercomId id, u8_t data) {
    sercom(id)->USART.DATA.reg = data;
    2822:	b289      	uxth	r1, r1
    2824:	8501      	strh	r1, [r0, #40]	; 0x28
    while(sercom(id)->USART.INTFLAG.bit.DRE == 0);
    2826:	7e03      	ldrb	r3, [r0, #24]
    2828:	07db      	lsls	r3, r3, #31
    282a:	d5fc      	bpl.n	2826 <usartDataOut+0xa>
}
    282c:	4770      	bx	lr
    282e:	46c0      	nop			; (mov r8, r8)
    2830:	42000800 	.word	0x42000800

00002834 <usartDataIn>:
    2834:	4b02      	ldr	r3, [pc, #8]	; (2840 <usartDataIn+0xc>)
    2836:	0280      	lsls	r0, r0, #10
    2838:	18c0      	adds	r0, r0, r3

u8_t usartDataIn(SercomId id) {
    return sercom(id)->USART.DATA.reg;
    283a:	8d00      	ldrh	r0, [r0, #40]	; 0x28
    283c:	b2c0      	uxtb	r0, r0
}
    283e:	4770      	bx	lr
    2840:	42000800 	.word	0x42000800

00002844 <attemptConnection>:
#include <util.h>
#include <boardDefines.h>


void attemptConnection() {
    2844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

    if (USARTconnectionAvaliable()) {
    2846:	4b2f      	ldr	r3, [pc, #188]	; (2904 <attemptConnection+0xc0>)
    2848:	4798      	blx	r3
    284a:	2800      	cmp	r0, #0
    284c:	d058      	beq.n	2900 <attemptConnection+0xbc>

        flightState = flightIdle;
    284e:	2201      	movs	r2, #1
    2850:	4b2d      	ldr	r3, [pc, #180]	; (2908 <attemptConnection+0xc4>)
    2852:	701a      	strb	r2, [r3, #0]

        //wait for user to tell us what they want
        while(sercom(USART3)->SPI.INTFLAG.bit.RXC == 0);
    2854:	4a2d      	ldr	r2, [pc, #180]	; (290c <attemptConnection+0xc8>)
    2856:	7e13      	ldrb	r3, [r2, #24]
    2858:	4e2c      	ldr	r6, [pc, #176]	; (290c <attemptConnection+0xc8>)
    285a:	075b      	lsls	r3, r3, #29
    285c:	d5fb      	bpl.n	2856 <attemptConnection+0x12>
        u8_t option = usartDataIn(USART3);
    285e:	2003      	movs	r0, #3
    2860:	4d2b      	ldr	r5, [pc, #172]	; (2910 <attemptConnection+0xcc>)
    2862:	47a8      	blx	r5
    2864:	1e04      	subs	r4, r0, #0

        //user wants to read flight logs
        if (option == 0x4C) {
    2866:	2c4c      	cmp	r4, #76	; 0x4c
    2868:	d13c      	bne.n	28e4 <attemptConnection+0xa0>
    286a:	2400      	movs	r4, #0

            //send list of available flight logs
            for (u8_t flightLog = 0; flightLog < 11; ++flightLog) {

                if (isFlightLogged(flightLog)) {
    286c:	0020      	movs	r0, r4
    286e:	4b29      	ldr	r3, [pc, #164]	; (2914 <attemptConnection+0xd0>)
    2870:	4798      	blx	r3
    2872:	2800      	cmp	r0, #0
    2874:	d005      	beq.n	2882 <attemptConnection+0x3e>

                    usartDataOut(USART3, flightLog + 0x30);
    2876:	0021      	movs	r1, r4
    2878:	3130      	adds	r1, #48	; 0x30
    287a:	b2c9      	uxtb	r1, r1
    287c:	2003      	movs	r0, #3
    287e:	4b26      	ldr	r3, [pc, #152]	; (2918 <attemptConnection+0xd4>)
    2880:	4798      	blx	r3

        //user wants to read flight logs
        if (option == 0x4C) {

            //send list of available flight logs
            for (u8_t flightLog = 0; flightLog < 11; ++flightLog) {
    2882:	3401      	adds	r4, #1
    2884:	b2e4      	uxtb	r4, r4
    2886:	2c0b      	cmp	r4, #11
    2888:	d1f0      	bne.n	286c <attemptConnection+0x28>

                    usartDataOut(USART3, flightLog + 0x30);
                }
            }
            //done sending flight numbers
            usartDataOut(USART3, 0x0F);
    288a:	210f      	movs	r1, #15
    288c:	2003      	movs	r0, #3
    288e:	4c22      	ldr	r4, [pc, #136]	; (2918 <attemptConnection+0xd4>)
    2890:	47a0      	blx	r4

            //wait for user to pick which flight to read
            while(sercom(USART3)->SPI.INTFLAG.bit.RXC == 0);
    2892:	7e33      	ldrb	r3, [r6, #24]
    2894:	075b      	lsls	r3, r3, #29
    2896:	d5fc      	bpl.n	2892 <attemptConnection+0x4e>
            u8_t flightToRead = usartDataIn(USART3) - 0x30;
    2898:	2003      	movs	r0, #3
    289a:	47a8      	blx	r5
    289c:	3830      	subs	r0, #48	; 0x30
    289e:	b2c5      	uxtb	r5, r0


            u32_t flightStartAddress = getFlightStartAddress(flightToRead);
    28a0:	0028      	movs	r0, r5
    28a2:	4b1e      	ldr	r3, [pc, #120]	; (291c <attemptConnection+0xd8>)
    28a4:	4798      	blx	r3
            u32_t flightEndAddress = FindFlightEndingAddress(flightToRead) - 0x100;
    28a6:	4b1e      	ldr	r3, [pc, #120]	; (2920 <attemptConnection+0xdc>)
            //wait for user to pick which flight to read
            while(sercom(USART3)->SPI.INTFLAG.bit.RXC == 0);
            u8_t flightToRead = usartDataIn(USART3) - 0x30;


            u32_t flightStartAddress = getFlightStartAddress(flightToRead);
    28a8:	0007      	movs	r7, r0
            u32_t flightEndAddress = FindFlightEndingAddress(flightToRead) - 0x100;
    28aa:	0028      	movs	r0, r5
    28ac:	4798      	blx	r3
    28ae:	1e46      	subs	r6, r0, #1
    28b0:	3eff      	subs	r6, #255	; 0xff

            //inform of page numbers
            u16_t pagesToSend = (flightEndAddress  - flightStartAddress) >> 8;
    28b2:	1bf5      	subs	r5, r6, r7
    28b4:	0a2d      	lsrs	r5, r5, #8
            usartDataOut(USART3, pagesToSend >> 0);
    28b6:	b2e9      	uxtb	r1, r5
    28b8:	2003      	movs	r0, #3
    28ba:	47a0      	blx	r4
            usartDataOut(USART3, pagesToSend >> 8);
    28bc:	b2a9      	uxth	r1, r5
    28be:	0a09      	lsrs	r1, r1, #8
    28c0:	2003      	movs	r0, #3
    28c2:	47a0      	blx	r4

            //send flight end address for % full
            usartDataOut(USART3, flightEndAddress >> 0);
    28c4:	b2f1      	uxtb	r1, r6
    28c6:	2003      	movs	r0, #3
    28c8:	47a0      	blx	r4
            usartDataOut(USART3, flightEndAddress >> 8);
    28ca:	0a31      	lsrs	r1, r6, #8
    28cc:	b2c9      	uxtb	r1, r1
    28ce:	2003      	movs	r0, #3
    28d0:	47a0      	blx	r4
            usartDataOut(USART3, flightEndAddress >> 16);
    28d2:	0c31      	lsrs	r1, r6, #16
    28d4:	b2c9      	uxtb	r1, r1
    28d6:	2003      	movs	r0, #3
    28d8:	47a0      	blx	r4

            //USART out the flights pages
            sendTheasePagesToComputer(flightStartAddress, flightEndAddress);
    28da:	0031      	movs	r1, r6
    28dc:	0038      	movs	r0, r7
    28de:	4b11      	ldr	r3, [pc, #68]	; (2924 <attemptConnection+0xe0>)
    28e0:	4798      	blx	r3
    28e2:	e00d      	b.n	2900 <attemptConnection+0xbc>

        }
        //user wants to erase chip
        if (option == 0x45) { // 'E'
    28e4:	2845      	cmp	r0, #69	; 0x45
    28e6:	d10b      	bne.n	2900 <attemptConnection+0xbc>
            AT25SFChipErase();
    28e8:	4b0f      	ldr	r3, [pc, #60]	; (2928 <attemptConnection+0xe4>)
    28ea:	4798      	blx	r3

            AT25SFHoldTillReady();
    28ec:	4b0f      	ldr	r3, [pc, #60]	; (292c <attemptConnection+0xe8>)
    28ee:	4798      	blx	r3

            usartDataOut(USART3, 'E');
    28f0:	2003      	movs	r0, #3
    28f2:	4b09      	ldr	r3, [pc, #36]	; (2918 <attemptConnection+0xd4>)
    28f4:	0021      	movs	r1, r4
    28f6:	4798      	blx	r3
            beep(400);
    28f8:	20c8      	movs	r0, #200	; 0xc8
    28fa:	4b0d      	ldr	r3, [pc, #52]	; (2930 <attemptConnection+0xec>)
    28fc:	0040      	lsls	r0, r0, #1
    28fe:	4798      	blx	r3


        }
    }

}
    2900:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2902:	46c0      	nop			; (mov r8, r8)
    2904:	00000aad 	.word	0x00000aad
    2908:	20000684 	.word	0x20000684
    290c:	42001400 	.word	0x42001400
    2910:	00002835 	.word	0x00002835
    2914:	000022d5 	.word	0x000022d5
    2918:	0000281d 	.word	0x0000281d
    291c:	00002285 	.word	0x00002285
    2920:	000022ad 	.word	0x000022ad
    2924:	00000ae1 	.word	0x00000ae1
    2928:	00000221 	.word	0x00000221
    292c:	000001e5 	.word	0x000001e5
    2930:	00000d85 	.word	0x00000d85

00002934 <pow>:
    2934:	b5f0      	push	{r4, r5, r6, r7, lr}
    2936:	465f      	mov	r7, fp
    2938:	464d      	mov	r5, r9
    293a:	4656      	mov	r6, sl
    293c:	4644      	mov	r4, r8
    293e:	b4f0      	push	{r4, r5, r6, r7}
    2940:	b091      	sub	sp, #68	; 0x44
    2942:	001f      	movs	r7, r3
    2944:	0004      	movs	r4, r0
    2946:	000d      	movs	r5, r1
    2948:	0016      	movs	r6, r2
    294a:	f000 f9af 	bl	2cac <__ieee754_pow>
    294e:	4bcf      	ldr	r3, [pc, #828]	; (2c8c <pow+0x358>)
    2950:	9002      	str	r0, [sp, #8]
    2952:	9103      	str	r1, [sp, #12]
    2954:	469b      	mov	fp, r3
    2956:	781b      	ldrb	r3, [r3, #0]
    2958:	b25b      	sxtb	r3, r3
    295a:	4699      	mov	r9, r3
    295c:	3301      	adds	r3, #1
    295e:	d04f      	beq.n	2a00 <pow+0xcc>
    2960:	0032      	movs	r2, r6
    2962:	003b      	movs	r3, r7
    2964:	0030      	movs	r0, r6
    2966:	0039      	movs	r1, r7
    2968:	f003 f9c0 	bl	5cec <__aeabi_dcmpun>
    296c:	9000      	str	r0, [sp, #0]
    296e:	2800      	cmp	r0, #0
    2970:	d146      	bne.n	2a00 <pow+0xcc>
    2972:	0022      	movs	r2, r4
    2974:	002b      	movs	r3, r5
    2976:	0020      	movs	r0, r4
    2978:	0029      	movs	r1, r5
    297a:	f003 f9b7 	bl	5cec <__aeabi_dcmpun>
    297e:	2200      	movs	r2, #0
    2980:	4682      	mov	sl, r0
    2982:	2800      	cmp	r0, #0
    2984:	d134      	bne.n	29f0 <pow+0xbc>
    2986:	2300      	movs	r3, #0
    2988:	0020      	movs	r0, r4
    298a:	0029      	movs	r1, r5
    298c:	f001 f8fc 	bl	3b88 <__aeabi_dcmpeq>
    2990:	2800      	cmp	r0, #0
    2992:	d03a      	beq.n	2a0a <pow+0xd6>
    2994:	2200      	movs	r2, #0
    2996:	2300      	movs	r3, #0
    2998:	0030      	movs	r0, r6
    299a:	0039      	movs	r1, r7
    299c:	f001 f8f4 	bl	3b88 <__aeabi_dcmpeq>
    29a0:	9005      	str	r0, [sp, #20]
    29a2:	2800      	cmp	r0, #0
    29a4:	d100      	bne.n	29a8 <pow+0x74>
    29a6:	e074      	b.n	2a92 <pow+0x15e>
    29a8:	ab06      	add	r3, sp, #24
    29aa:	4698      	mov	r8, r3
    29ac:	2301      	movs	r3, #1
    29ae:	4642      	mov	r2, r8
    29b0:	9306      	str	r3, [sp, #24]
    29b2:	4bb7      	ldr	r3, [pc, #732]	; (2c90 <pow+0x35c>)
    29b4:	6053      	str	r3, [r2, #4]
    29b6:	4643      	mov	r3, r8
    29b8:	4652      	mov	r2, sl
    29ba:	609c      	str	r4, [r3, #8]
    29bc:	60dd      	str	r5, [r3, #12]
    29be:	621a      	str	r2, [r3, #32]
    29c0:	611e      	str	r6, [r3, #16]
    29c2:	615f      	str	r7, [r3, #20]
    29c4:	4642      	mov	r2, r8
    29c6:	2300      	movs	r3, #0
    29c8:	2400      	movs	r4, #0
    29ca:	6193      	str	r3, [r2, #24]
    29cc:	61d4      	str	r4, [r2, #28]
    29ce:	464b      	mov	r3, r9
    29d0:	2b00      	cmp	r3, #0
    29d2:	d100      	bne.n	29d6 <pow+0xa2>
    29d4:	e094      	b.n	2b00 <pow+0x1cc>
    29d6:	2300      	movs	r3, #0
    29d8:	4cae      	ldr	r4, [pc, #696]	; (2c94 <pow+0x360>)
    29da:	9300      	str	r3, [sp, #0]
    29dc:	9401      	str	r4, [sp, #4]
    29de:	9800      	ldr	r0, [sp, #0]
    29e0:	9901      	ldr	r1, [sp, #4]
    29e2:	b011      	add	sp, #68	; 0x44
    29e4:	bc3c      	pop	{r2, r3, r4, r5}
    29e6:	4690      	mov	r8, r2
    29e8:	4699      	mov	r9, r3
    29ea:	46a2      	mov	sl, r4
    29ec:	46ab      	mov	fp, r5
    29ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    29f0:	2300      	movs	r3, #0
    29f2:	0030      	movs	r0, r6
    29f4:	0039      	movs	r1, r7
    29f6:	f001 f8c7 	bl	3b88 <__aeabi_dcmpeq>
    29fa:	2800      	cmp	r0, #0
    29fc:	d000      	beq.n	2a00 <pow+0xcc>
    29fe:	e0eb      	b.n	2bd8 <pow+0x2a4>
    2a00:	9b02      	ldr	r3, [sp, #8]
    2a02:	9c03      	ldr	r4, [sp, #12]
    2a04:	9300      	str	r3, [sp, #0]
    2a06:	9401      	str	r4, [sp, #4]
    2a08:	e7e9      	b.n	29de <pow+0xaa>
    2a0a:	9802      	ldr	r0, [sp, #8]
    2a0c:	9903      	ldr	r1, [sp, #12]
    2a0e:	f000 ff7d 	bl	390c <finite>
    2a12:	4681      	mov	r9, r0
    2a14:	2800      	cmp	r0, #0
    2a16:	d100      	bne.n	2a1a <pow+0xe6>
    2a18:	e086      	b.n	2b28 <pow+0x1f4>
    2a1a:	9802      	ldr	r0, [sp, #8]
    2a1c:	9903      	ldr	r1, [sp, #12]
    2a1e:	2200      	movs	r2, #0
    2a20:	2300      	movs	r3, #0
    2a22:	f001 f8b1 	bl	3b88 <__aeabi_dcmpeq>
    2a26:	2800      	cmp	r0, #0
    2a28:	d0ea      	beq.n	2a00 <pow+0xcc>
    2a2a:	0020      	movs	r0, r4
    2a2c:	0029      	movs	r1, r5
    2a2e:	f000 ff6d 	bl	390c <finite>
    2a32:	9a02      	ldr	r2, [sp, #8]
    2a34:	9b03      	ldr	r3, [sp, #12]
    2a36:	9200      	str	r2, [sp, #0]
    2a38:	9301      	str	r3, [sp, #4]
    2a3a:	2800      	cmp	r0, #0
    2a3c:	d0cf      	beq.n	29de <pow+0xaa>
    2a3e:	0030      	movs	r0, r6
    2a40:	0039      	movs	r1, r7
    2a42:	f000 ff63 	bl	390c <finite>
    2a46:	9a02      	ldr	r2, [sp, #8]
    2a48:	9b03      	ldr	r3, [sp, #12]
    2a4a:	9200      	str	r2, [sp, #0]
    2a4c:	9301      	str	r3, [sp, #4]
    2a4e:	2800      	cmp	r0, #0
    2a50:	d0c5      	beq.n	29de <pow+0xaa>
    2a52:	ab06      	add	r3, sp, #24
    2a54:	4698      	mov	r8, r3
    2a56:	2304      	movs	r3, #4
    2a58:	4642      	mov	r2, r8
    2a5a:	9306      	str	r3, [sp, #24]
    2a5c:	4b8c      	ldr	r3, [pc, #560]	; (2c90 <pow+0x35c>)
    2a5e:	6094      	str	r4, [r2, #8]
    2a60:	60d5      	str	r5, [r2, #12]
    2a62:	6053      	str	r3, [r2, #4]
    2a64:	2300      	movs	r3, #0
    2a66:	2400      	movs	r4, #0
    2a68:	6213      	str	r3, [r2, #32]
    2a6a:	2300      	movs	r3, #0
    2a6c:	6193      	str	r3, [r2, #24]
    2a6e:	61d4      	str	r4, [r2, #28]
    2a70:	465b      	mov	r3, fp
    2a72:	781b      	ldrb	r3, [r3, #0]
    2a74:	6116      	str	r6, [r2, #16]
    2a76:	6157      	str	r7, [r2, #20]
    2a78:	b25b      	sxtb	r3, r3
    2a7a:	2b02      	cmp	r3, #2
    2a7c:	d004      	beq.n	2a88 <pow+0x154>
    2a7e:	4640      	mov	r0, r8
    2a80:	f000 ff4e 	bl	3920 <matherr>
    2a84:	2800      	cmp	r0, #0
    2a86:	d140      	bne.n	2b0a <pow+0x1d6>
    2a88:	f003 fc74 	bl	6374 <__errno>
    2a8c:	2322      	movs	r3, #34	; 0x22
    2a8e:	6003      	str	r3, [r0, #0]
    2a90:	e03b      	b.n	2b0a <pow+0x1d6>
    2a92:	0030      	movs	r0, r6
    2a94:	0039      	movs	r1, r7
    2a96:	f000 ff39 	bl	390c <finite>
    2a9a:	9a02      	ldr	r2, [sp, #8]
    2a9c:	9b03      	ldr	r3, [sp, #12]
    2a9e:	9200      	str	r2, [sp, #0]
    2aa0:	9301      	str	r3, [sp, #4]
    2aa2:	2800      	cmp	r0, #0
    2aa4:	d09b      	beq.n	29de <pow+0xaa>
    2aa6:	2200      	movs	r2, #0
    2aa8:	2300      	movs	r3, #0
    2aaa:	0030      	movs	r0, r6
    2aac:	0039      	movs	r1, r7
    2aae:	f001 f871 	bl	3b94 <__aeabi_dcmplt>
    2ab2:	2800      	cmp	r0, #0
    2ab4:	d100      	bne.n	2ab8 <pow+0x184>
    2ab6:	e792      	b.n	29de <pow+0xaa>
    2ab8:	ab06      	add	r3, sp, #24
    2aba:	4698      	mov	r8, r3
    2abc:	2301      	movs	r3, #1
    2abe:	4642      	mov	r2, r8
    2ac0:	9306      	str	r3, [sp, #24]
    2ac2:	4b73      	ldr	r3, [pc, #460]	; (2c90 <pow+0x35c>)
    2ac4:	6053      	str	r3, [r2, #4]
    2ac6:	4643      	mov	r3, r8
    2ac8:	9a05      	ldr	r2, [sp, #20]
    2aca:	609c      	str	r4, [r3, #8]
    2acc:	60dd      	str	r5, [r3, #12]
    2ace:	621a      	str	r2, [r3, #32]
    2ad0:	611e      	str	r6, [r3, #16]
    2ad2:	615f      	str	r7, [r3, #20]
    2ad4:	465b      	mov	r3, fp
    2ad6:	781b      	ldrb	r3, [r3, #0]
    2ad8:	b25b      	sxtb	r3, r3
    2ada:	2b00      	cmp	r3, #0
    2adc:	d00b      	beq.n	2af6 <pow+0x1c2>
    2ade:	2000      	movs	r0, #0
    2ae0:	4642      	mov	r2, r8
    2ae2:	496d      	ldr	r1, [pc, #436]	; (2c98 <pow+0x364>)
    2ae4:	6190      	str	r0, [r2, #24]
    2ae6:	61d1      	str	r1, [r2, #28]
    2ae8:	2b02      	cmp	r3, #2
    2aea:	d109      	bne.n	2b00 <pow+0x1cc>
    2aec:	f003 fc42 	bl	6374 <__errno>
    2af0:	2321      	movs	r3, #33	; 0x21
    2af2:	6003      	str	r3, [r0, #0]
    2af4:	e009      	b.n	2b0a <pow+0x1d6>
    2af6:	4642      	mov	r2, r8
    2af8:	2300      	movs	r3, #0
    2afa:	2400      	movs	r4, #0
    2afc:	6193      	str	r3, [r2, #24]
    2afe:	61d4      	str	r4, [r2, #28]
    2b00:	4640      	mov	r0, r8
    2b02:	f000 ff0d 	bl	3920 <matherr>
    2b06:	2800      	cmp	r0, #0
    2b08:	d0f0      	beq.n	2aec <pow+0x1b8>
    2b0a:	4643      	mov	r3, r8
    2b0c:	6a1b      	ldr	r3, [r3, #32]
    2b0e:	2b00      	cmp	r3, #0
    2b10:	d004      	beq.n	2b1c <pow+0x1e8>
    2b12:	f003 fc2f 	bl	6374 <__errno>
    2b16:	4643      	mov	r3, r8
    2b18:	6a1b      	ldr	r3, [r3, #32]
    2b1a:	6003      	str	r3, [r0, #0]
    2b1c:	4643      	mov	r3, r8
    2b1e:	69dc      	ldr	r4, [r3, #28]
    2b20:	699b      	ldr	r3, [r3, #24]
    2b22:	9300      	str	r3, [sp, #0]
    2b24:	9401      	str	r4, [sp, #4]
    2b26:	e75a      	b.n	29de <pow+0xaa>
    2b28:	0020      	movs	r0, r4
    2b2a:	0029      	movs	r1, r5
    2b2c:	f000 feee 	bl	390c <finite>
    2b30:	2800      	cmp	r0, #0
    2b32:	d100      	bne.n	2b36 <pow+0x202>
    2b34:	e771      	b.n	2a1a <pow+0xe6>
    2b36:	0030      	movs	r0, r6
    2b38:	0039      	movs	r1, r7
    2b3a:	f000 fee7 	bl	390c <finite>
    2b3e:	2800      	cmp	r0, #0
    2b40:	d100      	bne.n	2b44 <pow+0x210>
    2b42:	e76a      	b.n	2a1a <pow+0xe6>
    2b44:	9802      	ldr	r0, [sp, #8]
    2b46:	9903      	ldr	r1, [sp, #12]
    2b48:	000b      	movs	r3, r1
    2b4a:	0002      	movs	r2, r0
    2b4c:	f003 f8ce 	bl	5cec <__aeabi_dcmpun>
    2b50:	ab06      	add	r3, sp, #24
    2b52:	4698      	mov	r8, r3
    2b54:	2800      	cmp	r0, #0
    2b56:	d17a      	bne.n	2c4e <pow+0x31a>
    2b58:	2303      	movs	r3, #3
    2b5a:	4642      	mov	r2, r8
    2b5c:	9306      	str	r3, [sp, #24]
    2b5e:	4b4c      	ldr	r3, [pc, #304]	; (2c90 <pow+0x35c>)
    2b60:	6210      	str	r0, [r2, #32]
    2b62:	6053      	str	r3, [r2, #4]
    2b64:	465b      	mov	r3, fp
    2b66:	781b      	ldrb	r3, [r3, #0]
    2b68:	6094      	str	r4, [r2, #8]
    2b6a:	60d5      	str	r5, [r2, #12]
    2b6c:	b25b      	sxtb	r3, r3
    2b6e:	6116      	str	r6, [r2, #16]
    2b70:	6157      	str	r7, [r2, #20]
    2b72:	4699      	mov	r9, r3
    2b74:	2b00      	cmp	r3, #0
    2b76:	d148      	bne.n	2c0a <pow+0x2d6>
    2b78:	22e0      	movs	r2, #224	; 0xe0
    2b7a:	4641      	mov	r1, r8
    2b7c:	4b47      	ldr	r3, [pc, #284]	; (2c9c <pow+0x368>)
    2b7e:	0612      	lsls	r2, r2, #24
    2b80:	618a      	str	r2, [r1, #24]
    2b82:	61cb      	str	r3, [r1, #28]
    2b84:	0020      	movs	r0, r4
    2b86:	2200      	movs	r2, #0
    2b88:	2300      	movs	r3, #0
    2b8a:	0029      	movs	r1, r5
    2b8c:	f001 f802 	bl	3b94 <__aeabi_dcmplt>
    2b90:	2800      	cmp	r0, #0
    2b92:	d100      	bne.n	2b96 <pow+0x262>
    2b94:	e773      	b.n	2a7e <pow+0x14a>
    2b96:	2200      	movs	r2, #0
    2b98:	4b41      	ldr	r3, [pc, #260]	; (2ca0 <pow+0x36c>)
    2b9a:	0030      	movs	r0, r6
    2b9c:	0039      	movs	r1, r7
    2b9e:	f002 fad7 	bl	5150 <__aeabi_dmul>
    2ba2:	0004      	movs	r4, r0
    2ba4:	000d      	movs	r5, r1
    2ba6:	f000 fec3 	bl	3930 <rint>
    2baa:	0002      	movs	r2, r0
    2bac:	000b      	movs	r3, r1
    2bae:	0020      	movs	r0, r4
    2bb0:	0029      	movs	r1, r5
    2bb2:	f000 ffe9 	bl	3b88 <__aeabi_dcmpeq>
    2bb6:	2800      	cmp	r0, #0
    2bb8:	d105      	bne.n	2bc6 <pow+0x292>
    2bba:	22e0      	movs	r2, #224	; 0xe0
    2bbc:	4b39      	ldr	r3, [pc, #228]	; (2ca4 <pow+0x370>)
    2bbe:	0612      	lsls	r2, r2, #24
    2bc0:	4641      	mov	r1, r8
    2bc2:	618a      	str	r2, [r1, #24]
    2bc4:	61cb      	str	r3, [r1, #28]
    2bc6:	465b      	mov	r3, fp
    2bc8:	781b      	ldrb	r3, [r3, #0]
    2bca:	b25b      	sxtb	r3, r3
    2bcc:	4699      	mov	r9, r3
    2bce:	464b      	mov	r3, r9
    2bd0:	2b02      	cmp	r3, #2
    2bd2:	d000      	beq.n	2bd6 <pow+0x2a2>
    2bd4:	e753      	b.n	2a7e <pow+0x14a>
    2bd6:	e757      	b.n	2a88 <pow+0x154>
    2bd8:	ab06      	add	r3, sp, #24
    2bda:	4698      	mov	r8, r3
    2bdc:	2301      	movs	r3, #1
    2bde:	4642      	mov	r2, r8
    2be0:	9306      	str	r3, [sp, #24]
    2be2:	4b2b      	ldr	r3, [pc, #172]	; (2c90 <pow+0x35c>)
    2be4:	6053      	str	r3, [r2, #4]
    2be6:	4643      	mov	r3, r8
    2be8:	609c      	str	r4, [r3, #8]
    2bea:	60dd      	str	r5, [r3, #12]
    2bec:	2400      	movs	r4, #0
    2bee:	9a00      	ldr	r2, [sp, #0]
    2bf0:	4d28      	ldr	r5, [pc, #160]	; (2c94 <pow+0x360>)
    2bf2:	621a      	str	r2, [r3, #32]
    2bf4:	611e      	str	r6, [r3, #16]
    2bf6:	615f      	str	r7, [r3, #20]
    2bf8:	619c      	str	r4, [r3, #24]
    2bfa:	61dd      	str	r5, [r3, #28]
    2bfc:	464b      	mov	r3, r9
    2bfe:	9400      	str	r4, [sp, #0]
    2c00:	9501      	str	r5, [sp, #4]
    2c02:	2b02      	cmp	r3, #2
    2c04:	d000      	beq.n	2c08 <pow+0x2d4>
    2c06:	e77b      	b.n	2b00 <pow+0x1cc>
    2c08:	e6e9      	b.n	29de <pow+0xaa>
    2c0a:	2200      	movs	r2, #0
    2c0c:	4641      	mov	r1, r8
    2c0e:	4b26      	ldr	r3, [pc, #152]	; (2ca8 <pow+0x374>)
    2c10:	0020      	movs	r0, r4
    2c12:	618a      	str	r2, [r1, #24]
    2c14:	61cb      	str	r3, [r1, #28]
    2c16:	2200      	movs	r2, #0
    2c18:	2300      	movs	r3, #0
    2c1a:	0029      	movs	r1, r5
    2c1c:	f000 ffba 	bl	3b94 <__aeabi_dcmplt>
    2c20:	2800      	cmp	r0, #0
    2c22:	d0d4      	beq.n	2bce <pow+0x29a>
    2c24:	2200      	movs	r2, #0
    2c26:	4b1e      	ldr	r3, [pc, #120]	; (2ca0 <pow+0x36c>)
    2c28:	0030      	movs	r0, r6
    2c2a:	0039      	movs	r1, r7
    2c2c:	f002 fa90 	bl	5150 <__aeabi_dmul>
    2c30:	0004      	movs	r4, r0
    2c32:	000d      	movs	r5, r1
    2c34:	f000 fe7c 	bl	3930 <rint>
    2c38:	0002      	movs	r2, r0
    2c3a:	000b      	movs	r3, r1
    2c3c:	0020      	movs	r0, r4
    2c3e:	0029      	movs	r1, r5
    2c40:	f000 ffa2 	bl	3b88 <__aeabi_dcmpeq>
    2c44:	2800      	cmp	r0, #0
    2c46:	d1be      	bne.n	2bc6 <pow+0x292>
    2c48:	2200      	movs	r2, #0
    2c4a:	4b13      	ldr	r3, [pc, #76]	; (2c98 <pow+0x364>)
    2c4c:	e7b8      	b.n	2bc0 <pow+0x28c>
    2c4e:	2301      	movs	r3, #1
    2c50:	4642      	mov	r2, r8
    2c52:	9306      	str	r3, [sp, #24]
    2c54:	4b0e      	ldr	r3, [pc, #56]	; (2c90 <pow+0x35c>)
    2c56:	6053      	str	r3, [r2, #4]
    2c58:	4643      	mov	r3, r8
    2c5a:	464a      	mov	r2, r9
    2c5c:	609c      	str	r4, [r3, #8]
    2c5e:	60dd      	str	r5, [r3, #12]
    2c60:	621a      	str	r2, [r3, #32]
    2c62:	611e      	str	r6, [r3, #16]
    2c64:	615f      	str	r7, [r3, #20]
    2c66:	2400      	movs	r4, #0
    2c68:	465b      	mov	r3, fp
    2c6a:	571c      	ldrsb	r4, [r3, r4]
    2c6c:	2c00      	cmp	r4, #0
    2c6e:	d100      	bne.n	2c72 <pow+0x33e>
    2c70:	e741      	b.n	2af6 <pow+0x1c2>
    2c72:	2300      	movs	r3, #0
    2c74:	2200      	movs	r2, #0
    2c76:	0019      	movs	r1, r3
    2c78:	0010      	movs	r0, r2
    2c7a:	f001 fe45 	bl	4908 <__aeabi_ddiv>
    2c7e:	4643      	mov	r3, r8
    2c80:	6198      	str	r0, [r3, #24]
    2c82:	61d9      	str	r1, [r3, #28]
    2c84:	2c02      	cmp	r4, #2
    2c86:	d100      	bne.n	2c8a <pow+0x356>
    2c88:	e730      	b.n	2aec <pow+0x1b8>
    2c8a:	e739      	b.n	2b00 <pow+0x1cc>
    2c8c:	20000070 	.word	0x20000070
    2c90:	00006518 	.word	0x00006518
    2c94:	3ff00000 	.word	0x3ff00000
    2c98:	fff00000 	.word	0xfff00000
    2c9c:	47efffff 	.word	0x47efffff
    2ca0:	3fe00000 	.word	0x3fe00000
    2ca4:	c7efffff 	.word	0xc7efffff
    2ca8:	7ff00000 	.word	0x7ff00000

00002cac <__ieee754_pow>:
    2cac:	b5f0      	push	{r4, r5, r6, r7, lr}
    2cae:	4656      	mov	r6, sl
    2cb0:	464d      	mov	r5, r9
    2cb2:	4644      	mov	r4, r8
    2cb4:	465f      	mov	r7, fp
    2cb6:	b4f0      	push	{r4, r5, r6, r7}
    2cb8:	001c      	movs	r4, r3
    2cba:	0013      	movs	r3, r2
    2cbc:	0067      	lsls	r7, r4, #1
    2cbe:	b091      	sub	sp, #68	; 0x44
    2cc0:	087f      	lsrs	r7, r7, #1
    2cc2:	9300      	str	r3, [sp, #0]
    2cc4:	9401      	str	r4, [sp, #4]
    2cc6:	0006      	movs	r6, r0
    2cc8:	000d      	movs	r5, r1
    2cca:	4680      	mov	r8, r0
    2ccc:	4689      	mov	r9, r1
    2cce:	46a2      	mov	sl, r4
    2cd0:	433b      	orrs	r3, r7
    2cd2:	d032      	beq.n	2d3a <__ieee754_pow+0x8e>
    2cd4:	4b6e      	ldr	r3, [pc, #440]	; (2e90 <__ieee754_pow+0x1e4>)
    2cd6:	006c      	lsls	r4, r5, #1
    2cd8:	0864      	lsrs	r4, r4, #1
    2cda:	429c      	cmp	r4, r3
    2cdc:	dc29      	bgt.n	2d32 <__ieee754_pow+0x86>
    2cde:	d026      	beq.n	2d2e <__ieee754_pow+0x82>
    2ce0:	429f      	cmp	r7, r3
    2ce2:	dc26      	bgt.n	2d32 <__ieee754_pow+0x86>
    2ce4:	4b6a      	ldr	r3, [pc, #424]	; (2e90 <__ieee754_pow+0x1e4>)
    2ce6:	429f      	cmp	r7, r3
    2ce8:	d100      	bne.n	2cec <__ieee754_pow+0x40>
    2cea:	e089      	b.n	2e00 <__ieee754_pow+0x154>
    2cec:	2300      	movs	r3, #0
    2cee:	469b      	mov	fp, r3
    2cf0:	464b      	mov	r3, r9
    2cf2:	2b00      	cmp	r3, #0
    2cf4:	da00      	bge.n	2cf8 <__ieee754_pow+0x4c>
    2cf6:	e087      	b.n	2e08 <__ieee754_pow+0x15c>
    2cf8:	2a00      	cmp	r2, #0
    2cfa:	d12f      	bne.n	2d5c <__ieee754_pow+0xb0>
    2cfc:	4b64      	ldr	r3, [pc, #400]	; (2e90 <__ieee754_pow+0x1e4>)
    2cfe:	429f      	cmp	r7, r3
    2d00:	d100      	bne.n	2d04 <__ieee754_pow+0x58>
    2d02:	e09f      	b.n	2e44 <__ieee754_pow+0x198>
    2d04:	4b63      	ldr	r3, [pc, #396]	; (2e94 <__ieee754_pow+0x1e8>)
    2d06:	429f      	cmp	r7, r3
    2d08:	d05d      	beq.n	2dc6 <__ieee754_pow+0x11a>
    2d0a:	2380      	movs	r3, #128	; 0x80
    2d0c:	05db      	lsls	r3, r3, #23
    2d0e:	459a      	cmp	sl, r3
    2d10:	d101      	bne.n	2d16 <__ieee754_pow+0x6a>
    2d12:	f000 fbc1 	bl	3498 <__ieee754_pow+0x7ec>
    2d16:	4b60      	ldr	r3, [pc, #384]	; (2e98 <__ieee754_pow+0x1ec>)
    2d18:	459a      	cmp	sl, r3
    2d1a:	d11f      	bne.n	2d5c <__ieee754_pow+0xb0>
    2d1c:	464b      	mov	r3, r9
    2d1e:	2b00      	cmp	r3, #0
    2d20:	db1c      	blt.n	2d5c <__ieee754_pow+0xb0>
    2d22:	0030      	movs	r0, r6
    2d24:	0029      	movs	r1, r5
    2d26:	f000 fcf7 	bl	3718 <__ieee754_sqrt>
    2d2a:	0006      	movs	r6, r0
    2d2c:	e007      	b.n	2d3e <__ieee754_pow+0x92>
    2d2e:	2800      	cmp	r0, #0
    2d30:	d00d      	beq.n	2d4e <__ieee754_pow+0xa2>
    2d32:	4b5a      	ldr	r3, [pc, #360]	; (2e9c <__ieee754_pow+0x1f0>)
    2d34:	18e0      	adds	r0, r4, r3
    2d36:	4330      	orrs	r0, r6
    2d38:	d10b      	bne.n	2d52 <__ieee754_pow+0xa6>
    2d3a:	2600      	movs	r6, #0
    2d3c:	4955      	ldr	r1, [pc, #340]	; (2e94 <__ieee754_pow+0x1e8>)
    2d3e:	0030      	movs	r0, r6
    2d40:	b011      	add	sp, #68	; 0x44
    2d42:	bc3c      	pop	{r2, r3, r4, r5}
    2d44:	4690      	mov	r8, r2
    2d46:	4699      	mov	r9, r3
    2d48:	46a2      	mov	sl, r4
    2d4a:	46ab      	mov	fp, r5
    2d4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2d4e:	42a7      	cmp	r7, r4
    2d50:	ddc8      	ble.n	2ce4 <__ieee754_pow+0x38>
    2d52:	4853      	ldr	r0, [pc, #332]	; (2ea0 <__ieee754_pow+0x1f4>)
    2d54:	f000 fde6 	bl	3924 <nan>
    2d58:	0006      	movs	r6, r0
    2d5a:	e7f0      	b.n	2d3e <__ieee754_pow+0x92>
    2d5c:	0030      	movs	r0, r6
    2d5e:	0029      	movs	r1, r5
    2d60:	f000 fdd0 	bl	3904 <fabs>
    2d64:	4643      	mov	r3, r8
    2d66:	2b00      	cmp	r3, #0
    2d68:	d01d      	beq.n	2da6 <__ieee754_pow+0xfa>
    2d6a:	0feb      	lsrs	r3, r5, #31
    2d6c:	3b01      	subs	r3, #1
    2d6e:	4698      	mov	r8, r3
    2d70:	465b      	mov	r3, fp
    2d72:	4642      	mov	r2, r8
    2d74:	4313      	orrs	r3, r2
    2d76:	d079      	beq.n	2e6c <__ieee754_pow+0x1c0>
    2d78:	4b4a      	ldr	r3, [pc, #296]	; (2ea4 <__ieee754_pow+0x1f8>)
    2d7a:	429f      	cmp	r7, r3
    2d7c:	dc00      	bgt.n	2d80 <__ieee754_pow+0xd4>
    2d7e:	e09f      	b.n	2ec0 <__ieee754_pow+0x214>
    2d80:	4b49      	ldr	r3, [pc, #292]	; (2ea8 <__ieee754_pow+0x1fc>)
    2d82:	429f      	cmp	r7, r3
    2d84:	dc01      	bgt.n	2d8a <__ieee754_pow+0xde>
    2d86:	f000 fbce 	bl	3526 <__ieee754_pow+0x87a>
    2d8a:	4b48      	ldr	r3, [pc, #288]	; (2eac <__ieee754_pow+0x200>)
    2d8c:	429c      	cmp	r4, r3
    2d8e:	dd79      	ble.n	2e84 <__ieee754_pow+0x1d8>
    2d90:	4653      	mov	r3, sl
    2d92:	2b00      	cmp	r3, #0
    2d94:	dd79      	ble.n	2e8a <__ieee754_pow+0x1de>
    2d96:	4a46      	ldr	r2, [pc, #280]	; (2eb0 <__ieee754_pow+0x204>)
    2d98:	4b46      	ldr	r3, [pc, #280]	; (2eb4 <__ieee754_pow+0x208>)
    2d9a:	0010      	movs	r0, r2
    2d9c:	0019      	movs	r1, r3
    2d9e:	f002 f9d7 	bl	5150 <__aeabi_dmul>
    2da2:	0006      	movs	r6, r0
    2da4:	e7cb      	b.n	2d3e <__ieee754_pow+0x92>
    2da6:	2c00      	cmp	r4, #0
    2da8:	d004      	beq.n	2db4 <__ieee754_pow+0x108>
    2daa:	4a3a      	ldr	r2, [pc, #232]	; (2e94 <__ieee754_pow+0x1e8>)
    2dac:	00ab      	lsls	r3, r5, #2
    2dae:	089b      	lsrs	r3, r3, #2
    2db0:	4293      	cmp	r3, r2
    2db2:	d1da      	bne.n	2d6a <__ieee754_pow+0xbe>
    2db4:	4653      	mov	r3, sl
    2db6:	2b00      	cmp	r3, #0
    2db8:	da00      	bge.n	2dbc <__ieee754_pow+0x110>
    2dba:	e3ad      	b.n	3518 <__ieee754_pow+0x86c>
    2dbc:	464b      	mov	r3, r9
    2dbe:	2b00      	cmp	r3, #0
    2dc0:	db0d      	blt.n	2dde <__ieee754_pow+0x132>
    2dc2:	0006      	movs	r6, r0
    2dc4:	e7bb      	b.n	2d3e <__ieee754_pow+0x92>
    2dc6:	4653      	mov	r3, sl
    2dc8:	0029      	movs	r1, r5
    2dca:	2b00      	cmp	r3, #0
    2dcc:	dab7      	bge.n	2d3e <__ieee754_pow+0x92>
    2dce:	0032      	movs	r2, r6
    2dd0:	002b      	movs	r3, r5
    2dd2:	2000      	movs	r0, #0
    2dd4:	492f      	ldr	r1, [pc, #188]	; (2e94 <__ieee754_pow+0x1e8>)
    2dd6:	f001 fd97 	bl	4908 <__aeabi_ddiv>
    2dda:	0006      	movs	r6, r0
    2ddc:	e7af      	b.n	2d3e <__ieee754_pow+0x92>
    2dde:	4b2f      	ldr	r3, [pc, #188]	; (2e9c <__ieee754_pow+0x1f0>)
    2de0:	469c      	mov	ip, r3
    2de2:	465b      	mov	r3, fp
    2de4:	4464      	add	r4, ip
    2de6:	431c      	orrs	r4, r3
    2de8:	d101      	bne.n	2dee <__ieee754_pow+0x142>
    2dea:	f000 fc2b 	bl	3644 <__ieee754_pow+0x998>
    2dee:	465b      	mov	r3, fp
    2df0:	0006      	movs	r6, r0
    2df2:	2b01      	cmp	r3, #1
    2df4:	d1a3      	bne.n	2d3e <__ieee754_pow+0x92>
    2df6:	2380      	movs	r3, #128	; 0x80
    2df8:	061b      	lsls	r3, r3, #24
    2dfa:	469c      	mov	ip, r3
    2dfc:	4461      	add	r1, ip
    2dfe:	e79e      	b.n	2d3e <__ieee754_pow+0x92>
    2e00:	2a00      	cmp	r2, #0
    2e02:	d100      	bne.n	2e06 <__ieee754_pow+0x15a>
    2e04:	e772      	b.n	2cec <__ieee754_pow+0x40>
    2e06:	e794      	b.n	2d32 <__ieee754_pow+0x86>
    2e08:	4b2b      	ldr	r3, [pc, #172]	; (2eb8 <__ieee754_pow+0x20c>)
    2e0a:	429f      	cmp	r7, r3
    2e0c:	dc2b      	bgt.n	2e66 <__ieee754_pow+0x1ba>
    2e0e:	4b27      	ldr	r3, [pc, #156]	; (2eac <__ieee754_pow+0x200>)
    2e10:	429f      	cmp	r7, r3
    2e12:	dc00      	bgt.n	2e16 <__ieee754_pow+0x16a>
    2e14:	e770      	b.n	2cf8 <__ieee754_pow+0x4c>
    2e16:	4929      	ldr	r1, [pc, #164]	; (2ebc <__ieee754_pow+0x210>)
    2e18:	153b      	asrs	r3, r7, #20
    2e1a:	468c      	mov	ip, r1
    2e1c:	4463      	add	r3, ip
    2e1e:	2b14      	cmp	r3, #20
    2e20:	dc01      	bgt.n	2e26 <__ieee754_pow+0x17a>
    2e22:	f000 fbf2 	bl	360a <__ieee754_pow+0x95e>
    2e26:	2134      	movs	r1, #52	; 0x34
    2e28:	1acb      	subs	r3, r1, r3
    2e2a:	9900      	ldr	r1, [sp, #0]
    2e2c:	40d9      	lsrs	r1, r3
    2e2e:	0008      	movs	r0, r1
    2e30:	4098      	lsls	r0, r3
    2e32:	4282      	cmp	r2, r0
    2e34:	d000      	beq.n	2e38 <__ieee754_pow+0x18c>
    2e36:	e75f      	b.n	2cf8 <__ieee754_pow+0x4c>
    2e38:	2301      	movs	r3, #1
    2e3a:	4019      	ands	r1, r3
    2e3c:	3301      	adds	r3, #1
    2e3e:	1a5b      	subs	r3, r3, r1
    2e40:	469b      	mov	fp, r3
    2e42:	e759      	b.n	2cf8 <__ieee754_pow+0x4c>
    2e44:	4b15      	ldr	r3, [pc, #84]	; (2e9c <__ieee754_pow+0x1f0>)
    2e46:	18e0      	adds	r0, r4, r3
    2e48:	4306      	orrs	r6, r0
    2e4a:	d100      	bne.n	2e4e <__ieee754_pow+0x1a2>
    2e4c:	e775      	b.n	2d3a <__ieee754_pow+0x8e>
    2e4e:	4b17      	ldr	r3, [pc, #92]	; (2eac <__ieee754_pow+0x200>)
    2e50:	429c      	cmp	r4, r3
    2e52:	dc00      	bgt.n	2e56 <__ieee754_pow+0x1aa>
    2e54:	e351      	b.n	34fa <__ieee754_pow+0x84e>
    2e56:	4653      	mov	r3, sl
    2e58:	2b00      	cmp	r3, #0
    2e5a:	db16      	blt.n	2e8a <__ieee754_pow+0x1de>
    2e5c:	9b00      	ldr	r3, [sp, #0]
    2e5e:	9c01      	ldr	r4, [sp, #4]
    2e60:	001e      	movs	r6, r3
    2e62:	0021      	movs	r1, r4
    2e64:	e76b      	b.n	2d3e <__ieee754_pow+0x92>
    2e66:	2302      	movs	r3, #2
    2e68:	469b      	mov	fp, r3
    2e6a:	e745      	b.n	2cf8 <__ieee754_pow+0x4c>
    2e6c:	0032      	movs	r2, r6
    2e6e:	002b      	movs	r3, r5
    2e70:	0030      	movs	r0, r6
    2e72:	0029      	movs	r1, r5
    2e74:	f002 fbe6 	bl	5644 <__aeabi_dsub>
    2e78:	0002      	movs	r2, r0
    2e7a:	000b      	movs	r3, r1
    2e7c:	f001 fd44 	bl	4908 <__aeabi_ddiv>
    2e80:	0006      	movs	r6, r0
    2e82:	e75c      	b.n	2d3e <__ieee754_pow+0x92>
    2e84:	4653      	mov	r3, sl
    2e86:	2b00      	cmp	r3, #0
    2e88:	db85      	blt.n	2d96 <__ieee754_pow+0xea>
    2e8a:	2600      	movs	r6, #0
    2e8c:	2100      	movs	r1, #0
    2e8e:	e756      	b.n	2d3e <__ieee754_pow+0x92>
    2e90:	7ff00000 	.word	0x7ff00000
    2e94:	3ff00000 	.word	0x3ff00000
    2e98:	3fe00000 	.word	0x3fe00000
    2e9c:	c0100000 	.word	0xc0100000
    2ea0:	0000651c 	.word	0x0000651c
    2ea4:	41e00000 	.word	0x41e00000
    2ea8:	43f00000 	.word	0x43f00000
    2eac:	3fefffff 	.word	0x3fefffff
    2eb0:	8800759c 	.word	0x8800759c
    2eb4:	7e37e43c 	.word	0x7e37e43c
    2eb8:	433fffff 	.word	0x433fffff
    2ebc:	fffffc01 	.word	0xfffffc01
    2ec0:	4be8      	ldr	r3, [pc, #928]	; (3264 <__ieee754_pow+0x5b8>)
    2ec2:	2200      	movs	r2, #0
    2ec4:	429c      	cmp	r4, r3
    2ec6:	dc06      	bgt.n	2ed6 <__ieee754_pow+0x22a>
    2ec8:	2200      	movs	r2, #0
    2eca:	4be7      	ldr	r3, [pc, #924]	; (3268 <__ieee754_pow+0x5bc>)
    2ecc:	f002 f940 	bl	5150 <__aeabi_dmul>
    2ed0:	2235      	movs	r2, #53	; 0x35
    2ed2:	000c      	movs	r4, r1
    2ed4:	4252      	negs	r2, r2
    2ed6:	4de5      	ldr	r5, [pc, #916]	; (326c <__ieee754_pow+0x5c0>)
    2ed8:	1523      	asrs	r3, r4, #20
    2eda:	46ac      	mov	ip, r5
    2edc:	4463      	add	r3, ip
    2ede:	4699      	mov	r9, r3
    2ee0:	0324      	lsls	r4, r4, #12
    2ee2:	4de3      	ldr	r5, [pc, #908]	; (3270 <__ieee754_pow+0x5c4>)
    2ee4:	4be3      	ldr	r3, [pc, #908]	; (3274 <__ieee754_pow+0x5c8>)
    2ee6:	0b24      	lsrs	r4, r4, #12
    2ee8:	4491      	add	r9, r2
    2eea:	4325      	orrs	r5, r4
    2eec:	429c      	cmp	r4, r3
    2eee:	dd09      	ble.n	2f04 <__ieee754_pow+0x258>
    2ef0:	4be1      	ldr	r3, [pc, #900]	; (3278 <__ieee754_pow+0x5cc>)
    2ef2:	429c      	cmp	r4, r3
    2ef4:	dc00      	bgt.n	2ef8 <__ieee754_pow+0x24c>
    2ef6:	e3a9      	b.n	364c <__ieee754_pow+0x9a0>
    2ef8:	2301      	movs	r3, #1
    2efa:	469c      	mov	ip, r3
    2efc:	4bdf      	ldr	r3, [pc, #892]	; (327c <__ieee754_pow+0x5d0>)
    2efe:	44e1      	add	r9, ip
    2f00:	469c      	mov	ip, r3
    2f02:	4465      	add	r5, ip
    2f04:	2300      	movs	r3, #0
    2f06:	2400      	movs	r4, #0
    2f08:	2200      	movs	r2, #0
    2f0a:	9308      	str	r3, [sp, #32]
    2f0c:	9409      	str	r4, [sp, #36]	; 0x24
    2f0e:	930c      	str	r3, [sp, #48]	; 0x30
    2f10:	940d      	str	r4, [sp, #52]	; 0x34
    2f12:	2400      	movs	r4, #0
    2f14:	4bd6      	ldr	r3, [pc, #856]	; (3270 <__ieee754_pow+0x5c4>)
    2f16:	9206      	str	r2, [sp, #24]
    2f18:	9307      	str	r3, [sp, #28]
    2f1a:	9a06      	ldr	r2, [sp, #24]
    2f1c:	9b07      	ldr	r3, [sp, #28]
    2f1e:	0029      	movs	r1, r5
    2f20:	900a      	str	r0, [sp, #40]	; 0x28
    2f22:	910b      	str	r1, [sp, #44]	; 0x2c
    2f24:	f002 fb8e 	bl	5644 <__aeabi_dsub>
    2f28:	9a06      	ldr	r2, [sp, #24]
    2f2a:	9b07      	ldr	r3, [sp, #28]
    2f2c:	0006      	movs	r6, r0
    2f2e:	000f      	movs	r7, r1
    2f30:	980a      	ldr	r0, [sp, #40]	; 0x28
    2f32:	990b      	ldr	r1, [sp, #44]	; 0x2c
    2f34:	f001 f9bc 	bl	42b0 <__aeabi_dadd>
    2f38:	0002      	movs	r2, r0
    2f3a:	000b      	movs	r3, r1
    2f3c:	2000      	movs	r0, #0
    2f3e:	49cc      	ldr	r1, [pc, #816]	; (3270 <__ieee754_pow+0x5c4>)
    2f40:	f001 fce2 	bl	4908 <__aeabi_ddiv>
    2f44:	000a      	movs	r2, r1
    2f46:	0001      	movs	r1, r0
    2f48:	0013      	movs	r3, r2
    2f4a:	910e      	str	r1, [sp, #56]	; 0x38
    2f4c:	920f      	str	r2, [sp, #60]	; 0x3c
    2f4e:	0002      	movs	r2, r0
    2f50:	0039      	movs	r1, r7
    2f52:	0030      	movs	r0, r6
    2f54:	f002 f8fc 	bl	5150 <__aeabi_dmul>
    2f58:	000a      	movs	r2, r1
    2f5a:	0001      	movs	r1, r0
    2f5c:	2080      	movs	r0, #128	; 0x80
    2f5e:	9104      	str	r1, [sp, #16]
    2f60:	9205      	str	r2, [sp, #20]
    2f62:	0013      	movs	r3, r2
    2f64:	2200      	movs	r2, #0
    2f66:	2180      	movs	r1, #128	; 0x80
    2f68:	0300      	lsls	r0, r0, #12
    2f6a:	4684      	mov	ip, r0
    2f6c:	9202      	str	r2, [sp, #8]
    2f6e:	9303      	str	r3, [sp, #12]
    2f70:	2200      	movs	r2, #0
    2f72:	0589      	lsls	r1, r1, #22
    2f74:	106d      	asrs	r5, r5, #1
    2f76:	430d      	orrs	r5, r1
    2f78:	4465      	add	r5, ip
    2f7a:	192b      	adds	r3, r5, r4
    2f7c:	9802      	ldr	r0, [sp, #8]
    2f7e:	9903      	ldr	r1, [sp, #12]
    2f80:	0014      	movs	r4, r2
    2f82:	001d      	movs	r5, r3
    2f84:	f002 f8e4 	bl	5150 <__aeabi_dmul>
    2f88:	0002      	movs	r2, r0
    2f8a:	000b      	movs	r3, r1
    2f8c:	0030      	movs	r0, r6
    2f8e:	0039      	movs	r1, r7
    2f90:	f002 fb58 	bl	5644 <__aeabi_dsub>
    2f94:	9a06      	ldr	r2, [sp, #24]
    2f96:	9b07      	ldr	r3, [sp, #28]
    2f98:	0006      	movs	r6, r0
    2f9a:	000f      	movs	r7, r1
    2f9c:	0020      	movs	r0, r4
    2f9e:	0029      	movs	r1, r5
    2fa0:	f002 fb50 	bl	5644 <__aeabi_dsub>
    2fa4:	0002      	movs	r2, r0
    2fa6:	000b      	movs	r3, r1
    2fa8:	980a      	ldr	r0, [sp, #40]	; 0x28
    2faa:	990b      	ldr	r1, [sp, #44]	; 0x2c
    2fac:	f002 fb4a 	bl	5644 <__aeabi_dsub>
    2fb0:	9a02      	ldr	r2, [sp, #8]
    2fb2:	9b03      	ldr	r3, [sp, #12]
    2fb4:	f002 f8cc 	bl	5150 <__aeabi_dmul>
    2fb8:	0002      	movs	r2, r0
    2fba:	000b      	movs	r3, r1
    2fbc:	0030      	movs	r0, r6
    2fbe:	0039      	movs	r1, r7
    2fc0:	f002 fb40 	bl	5644 <__aeabi_dsub>
    2fc4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    2fc6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    2fc8:	f002 f8c2 	bl	5150 <__aeabi_dmul>
    2fcc:	9d04      	ldr	r5, [sp, #16]
    2fce:	9e05      	ldr	r6, [sp, #20]
    2fd0:	9006      	str	r0, [sp, #24]
    2fd2:	9107      	str	r1, [sp, #28]
    2fd4:	002a      	movs	r2, r5
    2fd6:	0033      	movs	r3, r6
    2fd8:	0028      	movs	r0, r5
    2fda:	0031      	movs	r1, r6
    2fdc:	f002 f8b8 	bl	5150 <__aeabi_dmul>
    2fe0:	0006      	movs	r6, r0
    2fe2:	000f      	movs	r7, r1
    2fe4:	4aa6      	ldr	r2, [pc, #664]	; (3280 <__ieee754_pow+0x5d4>)
    2fe6:	4ba7      	ldr	r3, [pc, #668]	; (3284 <__ieee754_pow+0x5d8>)
    2fe8:	f002 f8b2 	bl	5150 <__aeabi_dmul>
    2fec:	4aa6      	ldr	r2, [pc, #664]	; (3288 <__ieee754_pow+0x5dc>)
    2fee:	4ba7      	ldr	r3, [pc, #668]	; (328c <__ieee754_pow+0x5e0>)
    2ff0:	f001 f95e 	bl	42b0 <__aeabi_dadd>
    2ff4:	0032      	movs	r2, r6
    2ff6:	003b      	movs	r3, r7
    2ff8:	f002 f8aa 	bl	5150 <__aeabi_dmul>
    2ffc:	4aa4      	ldr	r2, [pc, #656]	; (3290 <__ieee754_pow+0x5e4>)
    2ffe:	4ba5      	ldr	r3, [pc, #660]	; (3294 <__ieee754_pow+0x5e8>)
    3000:	f001 f956 	bl	42b0 <__aeabi_dadd>
    3004:	0032      	movs	r2, r6
    3006:	003b      	movs	r3, r7
    3008:	f002 f8a2 	bl	5150 <__aeabi_dmul>
    300c:	4aa2      	ldr	r2, [pc, #648]	; (3298 <__ieee754_pow+0x5ec>)
    300e:	4ba3      	ldr	r3, [pc, #652]	; (329c <__ieee754_pow+0x5f0>)
    3010:	f001 f94e 	bl	42b0 <__aeabi_dadd>
    3014:	0032      	movs	r2, r6
    3016:	003b      	movs	r3, r7
    3018:	f002 f89a 	bl	5150 <__aeabi_dmul>
    301c:	4aa0      	ldr	r2, [pc, #640]	; (32a0 <__ieee754_pow+0x5f4>)
    301e:	4ba1      	ldr	r3, [pc, #644]	; (32a4 <__ieee754_pow+0x5f8>)
    3020:	f001 f946 	bl	42b0 <__aeabi_dadd>
    3024:	0032      	movs	r2, r6
    3026:	003b      	movs	r3, r7
    3028:	f002 f892 	bl	5150 <__aeabi_dmul>
    302c:	4a9e      	ldr	r2, [pc, #632]	; (32a8 <__ieee754_pow+0x5fc>)
    302e:	4b9f      	ldr	r3, [pc, #636]	; (32ac <__ieee754_pow+0x600>)
    3030:	f001 f93e 	bl	42b0 <__aeabi_dadd>
    3034:	0032      	movs	r2, r6
    3036:	0004      	movs	r4, r0
    3038:	000d      	movs	r5, r1
    303a:	003b      	movs	r3, r7
    303c:	0030      	movs	r0, r6
    303e:	0039      	movs	r1, r7
    3040:	f002 f886 	bl	5150 <__aeabi_dmul>
    3044:	0002      	movs	r2, r0
    3046:	000b      	movs	r3, r1
    3048:	0020      	movs	r0, r4
    304a:	0029      	movs	r1, r5
    304c:	f002 f880 	bl	5150 <__aeabi_dmul>
    3050:	9e02      	ldr	r6, [sp, #8]
    3052:	9f03      	ldr	r7, [sp, #12]
    3054:	0004      	movs	r4, r0
    3056:	000d      	movs	r5, r1
    3058:	9804      	ldr	r0, [sp, #16]
    305a:	9905      	ldr	r1, [sp, #20]
    305c:	0032      	movs	r2, r6
    305e:	003b      	movs	r3, r7
    3060:	f001 f926 	bl	42b0 <__aeabi_dadd>
    3064:	9a06      	ldr	r2, [sp, #24]
    3066:	9b07      	ldr	r3, [sp, #28]
    3068:	f002 f872 	bl	5150 <__aeabi_dmul>
    306c:	0022      	movs	r2, r4
    306e:	002b      	movs	r3, r5
    3070:	f001 f91e 	bl	42b0 <__aeabi_dadd>
    3074:	0032      	movs	r2, r6
    3076:	900a      	str	r0, [sp, #40]	; 0x28
    3078:	910b      	str	r1, [sp, #44]	; 0x2c
    307a:	003b      	movs	r3, r7
    307c:	0030      	movs	r0, r6
    307e:	0039      	movs	r1, r7
    3080:	9602      	str	r6, [sp, #8]
    3082:	9703      	str	r7, [sp, #12]
    3084:	f002 f864 	bl	5150 <__aeabi_dmul>
    3088:	2200      	movs	r2, #0
    308a:	4b89      	ldr	r3, [pc, #548]	; (32b0 <__ieee754_pow+0x604>)
    308c:	0004      	movs	r4, r0
    308e:	000d      	movs	r5, r1
    3090:	f001 f90e 	bl	42b0 <__aeabi_dadd>
    3094:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    3096:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    3098:	f001 f90a 	bl	42b0 <__aeabi_dadd>
    309c:	2600      	movs	r6, #0
    309e:	000f      	movs	r7, r1
    30a0:	0032      	movs	r2, r6
    30a2:	000b      	movs	r3, r1
    30a4:	9802      	ldr	r0, [sp, #8]
    30a6:	9903      	ldr	r1, [sp, #12]
    30a8:	f002 f852 	bl	5150 <__aeabi_dmul>
    30ac:	2200      	movs	r2, #0
    30ae:	9002      	str	r0, [sp, #8]
    30b0:	9103      	str	r1, [sp, #12]
    30b2:	4b7f      	ldr	r3, [pc, #508]	; (32b0 <__ieee754_pow+0x604>)
    30b4:	0030      	movs	r0, r6
    30b6:	0039      	movs	r1, r7
    30b8:	f002 fac4 	bl	5644 <__aeabi_dsub>
    30bc:	0022      	movs	r2, r4
    30be:	002b      	movs	r3, r5
    30c0:	f002 fac0 	bl	5644 <__aeabi_dsub>
    30c4:	0002      	movs	r2, r0
    30c6:	000b      	movs	r3, r1
    30c8:	980a      	ldr	r0, [sp, #40]	; 0x28
    30ca:	990b      	ldr	r1, [sp, #44]	; 0x2c
    30cc:	f002 faba 	bl	5644 <__aeabi_dsub>
    30d0:	9a04      	ldr	r2, [sp, #16]
    30d2:	9b05      	ldr	r3, [sp, #20]
    30d4:	f002 f83c 	bl	5150 <__aeabi_dmul>
    30d8:	0032      	movs	r2, r6
    30da:	0004      	movs	r4, r0
    30dc:	000d      	movs	r5, r1
    30de:	9806      	ldr	r0, [sp, #24]
    30e0:	9907      	ldr	r1, [sp, #28]
    30e2:	003b      	movs	r3, r7
    30e4:	f002 f834 	bl	5150 <__aeabi_dmul>
    30e8:	0002      	movs	r2, r0
    30ea:	000b      	movs	r3, r1
    30ec:	0020      	movs	r0, r4
    30ee:	0029      	movs	r1, r5
    30f0:	f001 f8de 	bl	42b0 <__aeabi_dadd>
    30f4:	0004      	movs	r4, r0
    30f6:	000d      	movs	r5, r1
    30f8:	0002      	movs	r2, r0
    30fa:	000b      	movs	r3, r1
    30fc:	9802      	ldr	r0, [sp, #8]
    30fe:	9903      	ldr	r1, [sp, #12]
    3100:	f001 f8d6 	bl	42b0 <__aeabi_dadd>
    3104:	2600      	movs	r6, #0
    3106:	22e0      	movs	r2, #224	; 0xe0
    3108:	4b6a      	ldr	r3, [pc, #424]	; (32b4 <__ieee754_pow+0x608>)
    310a:	0612      	lsls	r2, r2, #24
    310c:	0030      	movs	r0, r6
    310e:	000f      	movs	r7, r1
    3110:	f002 f81e 	bl	5150 <__aeabi_dmul>
    3114:	9a02      	ldr	r2, [sp, #8]
    3116:	9b03      	ldr	r3, [sp, #12]
    3118:	9004      	str	r0, [sp, #16]
    311a:	9105      	str	r1, [sp, #20]
    311c:	0030      	movs	r0, r6
    311e:	0039      	movs	r1, r7
    3120:	f002 fa90 	bl	5644 <__aeabi_dsub>
    3124:	0002      	movs	r2, r0
    3126:	000b      	movs	r3, r1
    3128:	0020      	movs	r0, r4
    312a:	0029      	movs	r1, r5
    312c:	f002 fa8a 	bl	5644 <__aeabi_dsub>
    3130:	4a61      	ldr	r2, [pc, #388]	; (32b8 <__ieee754_pow+0x60c>)
    3132:	4b60      	ldr	r3, [pc, #384]	; (32b4 <__ieee754_pow+0x608>)
    3134:	f002 f80c 	bl	5150 <__aeabi_dmul>
    3138:	4a60      	ldr	r2, [pc, #384]	; (32bc <__ieee754_pow+0x610>)
    313a:	0004      	movs	r4, r0
    313c:	000d      	movs	r5, r1
    313e:	4b60      	ldr	r3, [pc, #384]	; (32c0 <__ieee754_pow+0x614>)
    3140:	0030      	movs	r0, r6
    3142:	0039      	movs	r1, r7
    3144:	f002 f804 	bl	5150 <__aeabi_dmul>
    3148:	0002      	movs	r2, r0
    314a:	000b      	movs	r3, r1
    314c:	0020      	movs	r0, r4
    314e:	0029      	movs	r1, r5
    3150:	f001 f8ae 	bl	42b0 <__aeabi_dadd>
    3154:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    3156:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    3158:	f001 f8aa 	bl	42b0 <__aeabi_dadd>
    315c:	0006      	movs	r6, r0
    315e:	4648      	mov	r0, r9
    3160:	000f      	movs	r7, r1
    3162:	f002 fe19 	bl	5d98 <__aeabi_i2d>
    3166:	0004      	movs	r4, r0
    3168:	000d      	movs	r5, r1
    316a:	9804      	ldr	r0, [sp, #16]
    316c:	9905      	ldr	r1, [sp, #20]
    316e:	0032      	movs	r2, r6
    3170:	003b      	movs	r3, r7
    3172:	f001 f89d 	bl	42b0 <__aeabi_dadd>
    3176:	9a08      	ldr	r2, [sp, #32]
    3178:	9b09      	ldr	r3, [sp, #36]	; 0x24
    317a:	f001 f899 	bl	42b0 <__aeabi_dadd>
    317e:	0022      	movs	r2, r4
    3180:	002b      	movs	r3, r5
    3182:	f001 f895 	bl	42b0 <__aeabi_dadd>
    3186:	2000      	movs	r0, #0
    3188:	0022      	movs	r2, r4
    318a:	002b      	movs	r3, r5
    318c:	9002      	str	r0, [sp, #8]
    318e:	9103      	str	r1, [sp, #12]
    3190:	f002 fa58 	bl	5644 <__aeabi_dsub>
    3194:	9a08      	ldr	r2, [sp, #32]
    3196:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3198:	f002 fa54 	bl	5644 <__aeabi_dsub>
    319c:	9a04      	ldr	r2, [sp, #16]
    319e:	9b05      	ldr	r3, [sp, #20]
    31a0:	f002 fa50 	bl	5644 <__aeabi_dsub>
    31a4:	0002      	movs	r2, r0
    31a6:	000b      	movs	r3, r1
    31a8:	0030      	movs	r0, r6
    31aa:	0039      	movs	r1, r7
    31ac:	f002 fa4a 	bl	5644 <__aeabi_dsub>
    31b0:	9004      	str	r0, [sp, #16]
    31b2:	9105      	str	r1, [sp, #20]
    31b4:	465b      	mov	r3, fp
    31b6:	4642      	mov	r2, r8
    31b8:	3b01      	subs	r3, #1
    31ba:	4313      	orrs	r3, r2
    31bc:	d100      	bne.n	31c0 <__ieee754_pow+0x514>
    31be:	e197      	b.n	34f0 <__ieee754_pow+0x844>
    31c0:	2300      	movs	r3, #0
    31c2:	4c2b      	ldr	r4, [pc, #172]	; (3270 <__ieee754_pow+0x5c4>)
    31c4:	9306      	str	r3, [sp, #24]
    31c6:	9407      	str	r4, [sp, #28]
    31c8:	9800      	ldr	r0, [sp, #0]
    31ca:	9901      	ldr	r1, [sp, #4]
    31cc:	2600      	movs	r6, #0
    31ce:	000b      	movs	r3, r1
    31d0:	0032      	movs	r2, r6
    31d2:	000f      	movs	r7, r1
    31d4:	f002 fa36 	bl	5644 <__aeabi_dsub>
    31d8:	9a02      	ldr	r2, [sp, #8]
    31da:	9b03      	ldr	r3, [sp, #12]
    31dc:	f001 ffb8 	bl	5150 <__aeabi_dmul>
    31e0:	9a00      	ldr	r2, [sp, #0]
    31e2:	9b01      	ldr	r3, [sp, #4]
    31e4:	0004      	movs	r4, r0
    31e6:	000d      	movs	r5, r1
    31e8:	9804      	ldr	r0, [sp, #16]
    31ea:	9905      	ldr	r1, [sp, #20]
    31ec:	f001 ffb0 	bl	5150 <__aeabi_dmul>
    31f0:	0002      	movs	r2, r0
    31f2:	000b      	movs	r3, r1
    31f4:	0020      	movs	r0, r4
    31f6:	0029      	movs	r1, r5
    31f8:	f001 f85a 	bl	42b0 <__aeabi_dadd>
    31fc:	0004      	movs	r4, r0
    31fe:	000d      	movs	r5, r1
    3200:	9802      	ldr	r0, [sp, #8]
    3202:	9903      	ldr	r1, [sp, #12]
    3204:	003b      	movs	r3, r7
    3206:	0032      	movs	r2, r6
    3208:	9404      	str	r4, [sp, #16]
    320a:	9505      	str	r5, [sp, #20]
    320c:	f001 ffa0 	bl	5150 <__aeabi_dmul>
    3210:	9000      	str	r0, [sp, #0]
    3212:	9101      	str	r1, [sp, #4]
    3214:	000b      	movs	r3, r1
    3216:	0002      	movs	r2, r0
    3218:	0029      	movs	r1, r5
    321a:	0020      	movs	r0, r4
    321c:	f001 f848 	bl	42b0 <__aeabi_dadd>
    3220:	4b28      	ldr	r3, [pc, #160]	; (32c4 <__ieee754_pow+0x618>)
    3222:	4681      	mov	r9, r0
    3224:	1e0f      	subs	r7, r1, #0
    3226:	468a      	mov	sl, r1
    3228:	429f      	cmp	r7, r3
    322a:	dc00      	bgt.n	322e <__ieee754_pow+0x582>
    322c:	e13c      	b.n	34a8 <__ieee754_pow+0x7fc>
    322e:	4b26      	ldr	r3, [pc, #152]	; (32c8 <__ieee754_pow+0x61c>)
    3230:	18cb      	adds	r3, r1, r3
    3232:	4303      	orrs	r3, r0
    3234:	d000      	beq.n	3238 <__ieee754_pow+0x58c>
    3236:	e1db      	b.n	35f0 <__ieee754_pow+0x944>
    3238:	9804      	ldr	r0, [sp, #16]
    323a:	9905      	ldr	r1, [sp, #20]
    323c:	4a23      	ldr	r2, [pc, #140]	; (32cc <__ieee754_pow+0x620>)
    323e:	4b24      	ldr	r3, [pc, #144]	; (32d0 <__ieee754_pow+0x624>)
    3240:	f001 f836 	bl	42b0 <__aeabi_dadd>
    3244:	9a00      	ldr	r2, [sp, #0]
    3246:	9b01      	ldr	r3, [sp, #4]
    3248:	0004      	movs	r4, r0
    324a:	000d      	movs	r5, r1
    324c:	4648      	mov	r0, r9
    324e:	0039      	movs	r1, r7
    3250:	f002 f9f8 	bl	5644 <__aeabi_dsub>
    3254:	0002      	movs	r2, r0
    3256:	000b      	movs	r3, r1
    3258:	0020      	movs	r0, r4
    325a:	0029      	movs	r1, r5
    325c:	f000 fcae 	bl	3bbc <__aeabi_dcmpgt>
    3260:	003e      	movs	r6, r7
    3262:	e037      	b.n	32d4 <__ieee754_pow+0x628>
    3264:	000fffff 	.word	0x000fffff
    3268:	43400000 	.word	0x43400000
    326c:	fffffc01 	.word	0xfffffc01
    3270:	3ff00000 	.word	0x3ff00000
    3274:	0003988e 	.word	0x0003988e
    3278:	000bb679 	.word	0x000bb679
    327c:	fff00000 	.word	0xfff00000
    3280:	4a454eef 	.word	0x4a454eef
    3284:	3fca7e28 	.word	0x3fca7e28
    3288:	93c9db65 	.word	0x93c9db65
    328c:	3fcd864a 	.word	0x3fcd864a
    3290:	a91d4101 	.word	0xa91d4101
    3294:	3fd17460 	.word	0x3fd17460
    3298:	518f264d 	.word	0x518f264d
    329c:	3fd55555 	.word	0x3fd55555
    32a0:	db6fabff 	.word	0xdb6fabff
    32a4:	3fdb6db6 	.word	0x3fdb6db6
    32a8:	33333303 	.word	0x33333303
    32ac:	3fe33333 	.word	0x3fe33333
    32b0:	40080000 	.word	0x40080000
    32b4:	3feec709 	.word	0x3feec709
    32b8:	dc3a03fd 	.word	0xdc3a03fd
    32bc:	145b01f5 	.word	0x145b01f5
    32c0:	be3e2fe0 	.word	0xbe3e2fe0
    32c4:	408fffff 	.word	0x408fffff
    32c8:	bf700000 	.word	0xbf700000
    32cc:	652b82fe 	.word	0x652b82fe
    32d0:	3c971547 	.word	0x3c971547
    32d4:	2800      	cmp	r0, #0
    32d6:	d000      	beq.n	32da <__ieee754_pow+0x62e>
    32d8:	e18a      	b.n	35f0 <__ieee754_pow+0x944>
    32da:	2280      	movs	r2, #128	; 0x80
    32dc:	4be7      	ldr	r3, [pc, #924]	; (367c <__ieee754_pow+0x9d0>)
    32de:	0352      	lsls	r2, r2, #13
    32e0:	469c      	mov	ip, r3
    32e2:	0013      	movs	r3, r2
    32e4:	1536      	asrs	r6, r6, #20
    32e6:	4466      	add	r6, ip
    32e8:	4133      	asrs	r3, r6
    32ea:	49e5      	ldr	r1, [pc, #916]	; (3680 <__ieee754_pow+0x9d4>)
    32ec:	19db      	adds	r3, r3, r7
    32ee:	005e      	lsls	r6, r3, #1
    32f0:	001c      	movs	r4, r3
    32f2:	031b      	lsls	r3, r3, #12
    32f4:	468c      	mov	ip, r1
    32f6:	0b1b      	lsrs	r3, r3, #12
    32f8:	4313      	orrs	r3, r2
    32fa:	2214      	movs	r2, #20
    32fc:	0d76      	lsrs	r6, r6, #21
    32fe:	4fe1      	ldr	r7, [pc, #900]	; (3684 <__ieee754_pow+0x9d8>)
    3300:	4466      	add	r6, ip
    3302:	4137      	asrs	r7, r6
    3304:	1b96      	subs	r6, r2, r6
    3306:	4133      	asrs	r3, r6
    3308:	4698      	mov	r8, r3
    330a:	4653      	mov	r3, sl
    330c:	43bc      	bics	r4, r7
    330e:	2000      	movs	r0, #0
    3310:	0021      	movs	r1, r4
    3312:	2b00      	cmp	r3, #0
    3314:	da00      	bge.n	3318 <__ieee754_pow+0x66c>
    3316:	e1a9      	b.n	366c <__ieee754_pow+0x9c0>
    3318:	0002      	movs	r2, r0
    331a:	000b      	movs	r3, r1
    331c:	9800      	ldr	r0, [sp, #0]
    331e:	9901      	ldr	r1, [sp, #4]
    3320:	f002 f990 	bl	5644 <__aeabi_dsub>
    3324:	000b      	movs	r3, r1
    3326:	9000      	str	r0, [sp, #0]
    3328:	9101      	str	r1, [sp, #4]
    332a:	0002      	movs	r2, r0
    332c:	9804      	ldr	r0, [sp, #16]
    332e:	9905      	ldr	r1, [sp, #20]
    3330:	f000 ffbe 	bl	42b0 <__aeabi_dadd>
    3334:	4643      	mov	r3, r8
    3336:	051b      	lsls	r3, r3, #20
    3338:	4699      	mov	r9, r3
    333a:	2000      	movs	r0, #0
    333c:	2200      	movs	r2, #0
    333e:	4bd2      	ldr	r3, [pc, #840]	; (3688 <__ieee754_pow+0x9dc>)
    3340:	0006      	movs	r6, r0
    3342:	000f      	movs	r7, r1
    3344:	f001 ff04 	bl	5150 <__aeabi_dmul>
    3348:	9a00      	ldr	r2, [sp, #0]
    334a:	9b01      	ldr	r3, [sp, #4]
    334c:	9002      	str	r0, [sp, #8]
    334e:	9103      	str	r1, [sp, #12]
    3350:	0030      	movs	r0, r6
    3352:	0039      	movs	r1, r7
    3354:	f002 f976 	bl	5644 <__aeabi_dsub>
    3358:	0002      	movs	r2, r0
    335a:	000b      	movs	r3, r1
    335c:	9804      	ldr	r0, [sp, #16]
    335e:	9905      	ldr	r1, [sp, #20]
    3360:	f002 f970 	bl	5644 <__aeabi_dsub>
    3364:	4ac9      	ldr	r2, [pc, #804]	; (368c <__ieee754_pow+0x9e0>)
    3366:	4bca      	ldr	r3, [pc, #808]	; (3690 <__ieee754_pow+0x9e4>)
    3368:	f001 fef2 	bl	5150 <__aeabi_dmul>
    336c:	4ac9      	ldr	r2, [pc, #804]	; (3694 <__ieee754_pow+0x9e8>)
    336e:	0004      	movs	r4, r0
    3370:	000d      	movs	r5, r1
    3372:	4bc9      	ldr	r3, [pc, #804]	; (3698 <__ieee754_pow+0x9ec>)
    3374:	0030      	movs	r0, r6
    3376:	0039      	movs	r1, r7
    3378:	f001 feea 	bl	5150 <__aeabi_dmul>
    337c:	0002      	movs	r2, r0
    337e:	000b      	movs	r3, r1
    3380:	0020      	movs	r0, r4
    3382:	0029      	movs	r1, r5
    3384:	f000 ff94 	bl	42b0 <__aeabi_dadd>
    3388:	0004      	movs	r4, r0
    338a:	000d      	movs	r5, r1
    338c:	0002      	movs	r2, r0
    338e:	000b      	movs	r3, r1
    3390:	9802      	ldr	r0, [sp, #8]
    3392:	9903      	ldr	r1, [sp, #12]
    3394:	f000 ff8c 	bl	42b0 <__aeabi_dadd>
    3398:	9a02      	ldr	r2, [sp, #8]
    339a:	9b03      	ldr	r3, [sp, #12]
    339c:	0006      	movs	r6, r0
    339e:	000f      	movs	r7, r1
    33a0:	f002 f950 	bl	5644 <__aeabi_dsub>
    33a4:	0002      	movs	r2, r0
    33a6:	000b      	movs	r3, r1
    33a8:	0020      	movs	r0, r4
    33aa:	0029      	movs	r1, r5
    33ac:	f002 f94a 	bl	5644 <__aeabi_dsub>
    33b0:	0032      	movs	r2, r6
    33b2:	9000      	str	r0, [sp, #0]
    33b4:	9101      	str	r1, [sp, #4]
    33b6:	003b      	movs	r3, r7
    33b8:	0030      	movs	r0, r6
    33ba:	0039      	movs	r1, r7
    33bc:	f001 fec8 	bl	5150 <__aeabi_dmul>
    33c0:	0004      	movs	r4, r0
    33c2:	000d      	movs	r5, r1
    33c4:	4ab5      	ldr	r2, [pc, #724]	; (369c <__ieee754_pow+0x9f0>)
    33c6:	4bb6      	ldr	r3, [pc, #728]	; (36a0 <__ieee754_pow+0x9f4>)
    33c8:	f001 fec2 	bl	5150 <__aeabi_dmul>
    33cc:	4ab5      	ldr	r2, [pc, #724]	; (36a4 <__ieee754_pow+0x9f8>)
    33ce:	4bb6      	ldr	r3, [pc, #728]	; (36a8 <__ieee754_pow+0x9fc>)
    33d0:	f002 f938 	bl	5644 <__aeabi_dsub>
    33d4:	0022      	movs	r2, r4
    33d6:	002b      	movs	r3, r5
    33d8:	f001 feba 	bl	5150 <__aeabi_dmul>
    33dc:	4ab3      	ldr	r2, [pc, #716]	; (36ac <__ieee754_pow+0xa00>)
    33de:	4bb4      	ldr	r3, [pc, #720]	; (36b0 <__ieee754_pow+0xa04>)
    33e0:	f000 ff66 	bl	42b0 <__aeabi_dadd>
    33e4:	0022      	movs	r2, r4
    33e6:	002b      	movs	r3, r5
    33e8:	f001 feb2 	bl	5150 <__aeabi_dmul>
    33ec:	4ab1      	ldr	r2, [pc, #708]	; (36b4 <__ieee754_pow+0xa08>)
    33ee:	4bb2      	ldr	r3, [pc, #712]	; (36b8 <__ieee754_pow+0xa0c>)
    33f0:	f002 f928 	bl	5644 <__aeabi_dsub>
    33f4:	0022      	movs	r2, r4
    33f6:	002b      	movs	r3, r5
    33f8:	f001 feaa 	bl	5150 <__aeabi_dmul>
    33fc:	4aaf      	ldr	r2, [pc, #700]	; (36bc <__ieee754_pow+0xa10>)
    33fe:	4bb0      	ldr	r3, [pc, #704]	; (36c0 <__ieee754_pow+0xa14>)
    3400:	f000 ff56 	bl	42b0 <__aeabi_dadd>
    3404:	0022      	movs	r2, r4
    3406:	002b      	movs	r3, r5
    3408:	f001 fea2 	bl	5150 <__aeabi_dmul>
    340c:	0002      	movs	r2, r0
    340e:	000b      	movs	r3, r1
    3410:	0030      	movs	r0, r6
    3412:	0039      	movs	r1, r7
    3414:	f002 f916 	bl	5644 <__aeabi_dsub>
    3418:	0004      	movs	r4, r0
    341a:	000d      	movs	r5, r1
    341c:	0002      	movs	r2, r0
    341e:	000b      	movs	r3, r1
    3420:	0030      	movs	r0, r6
    3422:	0039      	movs	r1, r7
    3424:	f001 fe94 	bl	5150 <__aeabi_dmul>
    3428:	2380      	movs	r3, #128	; 0x80
    342a:	9002      	str	r0, [sp, #8]
    342c:	9103      	str	r1, [sp, #12]
    342e:	2200      	movs	r2, #0
    3430:	05db      	lsls	r3, r3, #23
    3432:	0020      	movs	r0, r4
    3434:	0029      	movs	r1, r5
    3436:	f002 f905 	bl	5644 <__aeabi_dsub>
    343a:	0002      	movs	r2, r0
    343c:	000b      	movs	r3, r1
    343e:	9802      	ldr	r0, [sp, #8]
    3440:	9903      	ldr	r1, [sp, #12]
    3442:	f001 fa61 	bl	4908 <__aeabi_ddiv>
    3446:	9a00      	ldr	r2, [sp, #0]
    3448:	9b01      	ldr	r3, [sp, #4]
    344a:	0004      	movs	r4, r0
    344c:	000d      	movs	r5, r1
    344e:	0030      	movs	r0, r6
    3450:	0039      	movs	r1, r7
    3452:	f001 fe7d 	bl	5150 <__aeabi_dmul>
    3456:	9a00      	ldr	r2, [sp, #0]
    3458:	9b01      	ldr	r3, [sp, #4]
    345a:	f000 ff29 	bl	42b0 <__aeabi_dadd>
    345e:	0002      	movs	r2, r0
    3460:	000b      	movs	r3, r1
    3462:	0020      	movs	r0, r4
    3464:	0029      	movs	r1, r5
    3466:	f002 f8ed 	bl	5644 <__aeabi_dsub>
    346a:	0032      	movs	r2, r6
    346c:	003b      	movs	r3, r7
    346e:	f002 f8e9 	bl	5644 <__aeabi_dsub>
    3472:	0002      	movs	r2, r0
    3474:	000b      	movs	r3, r1
    3476:	2000      	movs	r0, #0
    3478:	4992      	ldr	r1, [pc, #584]	; (36c4 <__ieee754_pow+0xa18>)
    347a:	f002 f8e3 	bl	5644 <__aeabi_dsub>
    347e:	464b      	mov	r3, r9
    3480:	185b      	adds	r3, r3, r1
    3482:	151a      	asrs	r2, r3, #20
    3484:	2a00      	cmp	r2, #0
    3486:	dc00      	bgt.n	348a <__ieee754_pow+0x7de>
    3488:	e0f4      	b.n	3674 <__ieee754_pow+0x9c8>
    348a:	0019      	movs	r1, r3
    348c:	9a06      	ldr	r2, [sp, #24]
    348e:	9b07      	ldr	r3, [sp, #28]
    3490:	f001 fe5e 	bl	5150 <__aeabi_dmul>
    3494:	0006      	movs	r6, r0
    3496:	e452      	b.n	2d3e <__ieee754_pow+0x92>
    3498:	0032      	movs	r2, r6
    349a:	0030      	movs	r0, r6
    349c:	002b      	movs	r3, r5
    349e:	0029      	movs	r1, r5
    34a0:	f001 fe56 	bl	5150 <__aeabi_dmul>
    34a4:	0006      	movs	r6, r0
    34a6:	e44a      	b.n	2d3e <__ieee754_pow+0x92>
    34a8:	4b87      	ldr	r3, [pc, #540]	; (36c8 <__ieee754_pow+0xa1c>)
    34aa:	004e      	lsls	r6, r1, #1
    34ac:	0876      	lsrs	r6, r6, #1
    34ae:	429e      	cmp	r6, r3
    34b0:	dc00      	bgt.n	34b4 <__ieee754_pow+0x808>
    34b2:	e0bf      	b.n	3634 <__ieee754_pow+0x988>
    34b4:	4b85      	ldr	r3, [pc, #532]	; (36cc <__ieee754_pow+0xa20>)
    34b6:	18cb      	adds	r3, r1, r3
    34b8:	4303      	orrs	r3, r0
    34ba:	d10c      	bne.n	34d6 <__ieee754_pow+0x82a>
    34bc:	9a00      	ldr	r2, [sp, #0]
    34be:	9b01      	ldr	r3, [sp, #4]
    34c0:	f002 f8c0 	bl	5644 <__aeabi_dsub>
    34c4:	0002      	movs	r2, r0
    34c6:	000b      	movs	r3, r1
    34c8:	9804      	ldr	r0, [sp, #16]
    34ca:	9905      	ldr	r1, [sp, #20]
    34cc:	f000 fb6c 	bl	3ba8 <__aeabi_dcmple>
    34d0:	2800      	cmp	r0, #0
    34d2:	d100      	bne.n	34d6 <__ieee754_pow+0x82a>
    34d4:	e701      	b.n	32da <__ieee754_pow+0x62e>
    34d6:	9806      	ldr	r0, [sp, #24]
    34d8:	9907      	ldr	r1, [sp, #28]
    34da:	4a7d      	ldr	r2, [pc, #500]	; (36d0 <__ieee754_pow+0xa24>)
    34dc:	4b7d      	ldr	r3, [pc, #500]	; (36d4 <__ieee754_pow+0xa28>)
    34de:	f001 fe37 	bl	5150 <__aeabi_dmul>
    34e2:	4a7b      	ldr	r2, [pc, #492]	; (36d0 <__ieee754_pow+0xa24>)
    34e4:	4b7b      	ldr	r3, [pc, #492]	; (36d4 <__ieee754_pow+0xa28>)
    34e6:	f001 fe33 	bl	5150 <__aeabi_dmul>
    34ea:	0006      	movs	r6, r0
    34ec:	f7ff fc27 	bl	2d3e <__ieee754_pow+0x92>
    34f0:	2300      	movs	r3, #0
    34f2:	4c79      	ldr	r4, [pc, #484]	; (36d8 <__ieee754_pow+0xa2c>)
    34f4:	9306      	str	r3, [sp, #24]
    34f6:	9407      	str	r4, [sp, #28]
    34f8:	e666      	b.n	31c8 <__ieee754_pow+0x51c>
    34fa:	4653      	mov	r3, sl
    34fc:	2b00      	cmp	r3, #0
    34fe:	db00      	blt.n	3502 <__ieee754_pow+0x856>
    3500:	e4c3      	b.n	2e8a <__ieee754_pow+0x1de>
    3502:	9b00      	ldr	r3, [sp, #0]
    3504:	9c01      	ldr	r4, [sp, #4]
    3506:	2280      	movs	r2, #128	; 0x80
    3508:	0612      	lsls	r2, r2, #24
    350a:	001e      	movs	r6, r3
    350c:	4694      	mov	ip, r2
    350e:	0023      	movs	r3, r4
    3510:	4463      	add	r3, ip
    3512:	0019      	movs	r1, r3
    3514:	f7ff fc13 	bl	2d3e <__ieee754_pow+0x92>
    3518:	0002      	movs	r2, r0
    351a:	000b      	movs	r3, r1
    351c:	2000      	movs	r0, #0
    351e:	4969      	ldr	r1, [pc, #420]	; (36c4 <__ieee754_pow+0xa18>)
    3520:	f001 f9f2 	bl	4908 <__aeabi_ddiv>
    3524:	e44a      	b.n	2dbc <__ieee754_pow+0x110>
    3526:	4b6d      	ldr	r3, [pc, #436]	; (36dc <__ieee754_pow+0xa30>)
    3528:	429c      	cmp	r4, r3
    352a:	dc00      	bgt.n	352e <__ieee754_pow+0x882>
    352c:	e4aa      	b.n	2e84 <__ieee754_pow+0x1d8>
    352e:	4b65      	ldr	r3, [pc, #404]	; (36c4 <__ieee754_pow+0xa18>)
    3530:	429c      	cmp	r4, r3
    3532:	dd01      	ble.n	3538 <__ieee754_pow+0x88c>
    3534:	f7ff fc2c 	bl	2d90 <__ieee754_pow+0xe4>
    3538:	2200      	movs	r2, #0
    353a:	4b62      	ldr	r3, [pc, #392]	; (36c4 <__ieee754_pow+0xa18>)
    353c:	f002 f882 	bl	5644 <__aeabi_dsub>
    3540:	22c0      	movs	r2, #192	; 0xc0
    3542:	4b67      	ldr	r3, [pc, #412]	; (36e0 <__ieee754_pow+0xa34>)
    3544:	05d2      	lsls	r2, r2, #23
    3546:	0004      	movs	r4, r0
    3548:	000d      	movs	r5, r1
    354a:	f001 fe01 	bl	5150 <__aeabi_dmul>
    354e:	4a65      	ldr	r2, [pc, #404]	; (36e4 <__ieee754_pow+0xa38>)
    3550:	0006      	movs	r6, r0
    3552:	000f      	movs	r7, r1
    3554:	4b64      	ldr	r3, [pc, #400]	; (36e8 <__ieee754_pow+0xa3c>)
    3556:	0020      	movs	r0, r4
    3558:	0029      	movs	r1, r5
    355a:	f001 fdf9 	bl	5150 <__aeabi_dmul>
    355e:	2200      	movs	r2, #0
    3560:	9002      	str	r0, [sp, #8]
    3562:	9103      	str	r1, [sp, #12]
    3564:	4b61      	ldr	r3, [pc, #388]	; (36ec <__ieee754_pow+0xa40>)
    3566:	0020      	movs	r0, r4
    3568:	0029      	movs	r1, r5
    356a:	f001 fdf1 	bl	5150 <__aeabi_dmul>
    356e:	0002      	movs	r2, r0
    3570:	000b      	movs	r3, r1
    3572:	485f      	ldr	r0, [pc, #380]	; (36f0 <__ieee754_pow+0xa44>)
    3574:	495f      	ldr	r1, [pc, #380]	; (36f4 <__ieee754_pow+0xa48>)
    3576:	f002 f865 	bl	5644 <__aeabi_dsub>
    357a:	0022      	movs	r2, r4
    357c:	002b      	movs	r3, r5
    357e:	f001 fde7 	bl	5150 <__aeabi_dmul>
    3582:	0002      	movs	r2, r0
    3584:	000b      	movs	r3, r1
    3586:	2000      	movs	r0, #0
    3588:	495b      	ldr	r1, [pc, #364]	; (36f8 <__ieee754_pow+0xa4c>)
    358a:	f002 f85b 	bl	5644 <__aeabi_dsub>
    358e:	0022      	movs	r2, r4
    3590:	9004      	str	r0, [sp, #16]
    3592:	9105      	str	r1, [sp, #20]
    3594:	002b      	movs	r3, r5
    3596:	0020      	movs	r0, r4
    3598:	0029      	movs	r1, r5
    359a:	f001 fdd9 	bl	5150 <__aeabi_dmul>
    359e:	0002      	movs	r2, r0
    35a0:	000b      	movs	r3, r1
    35a2:	9804      	ldr	r0, [sp, #16]
    35a4:	9905      	ldr	r1, [sp, #20]
    35a6:	f001 fdd3 	bl	5150 <__aeabi_dmul>
    35aa:	4a54      	ldr	r2, [pc, #336]	; (36fc <__ieee754_pow+0xa50>)
    35ac:	4b4c      	ldr	r3, [pc, #304]	; (36e0 <__ieee754_pow+0xa34>)
    35ae:	f001 fdcf 	bl	5150 <__aeabi_dmul>
    35b2:	0002      	movs	r2, r0
    35b4:	000b      	movs	r3, r1
    35b6:	9802      	ldr	r0, [sp, #8]
    35b8:	9903      	ldr	r1, [sp, #12]
    35ba:	f002 f843 	bl	5644 <__aeabi_dsub>
    35be:	0002      	movs	r2, r0
    35c0:	000b      	movs	r3, r1
    35c2:	0004      	movs	r4, r0
    35c4:	000d      	movs	r5, r1
    35c6:	0030      	movs	r0, r6
    35c8:	0039      	movs	r1, r7
    35ca:	f000 fe71 	bl	42b0 <__aeabi_dadd>
    35ce:	2200      	movs	r2, #0
    35d0:	0010      	movs	r0, r2
    35d2:	003b      	movs	r3, r7
    35d4:	0032      	movs	r2, r6
    35d6:	9002      	str	r0, [sp, #8]
    35d8:	9103      	str	r1, [sp, #12]
    35da:	f002 f833 	bl	5644 <__aeabi_dsub>
    35de:	0002      	movs	r2, r0
    35e0:	000b      	movs	r3, r1
    35e2:	0020      	movs	r0, r4
    35e4:	0029      	movs	r1, r5
    35e6:	f002 f82d 	bl	5644 <__aeabi_dsub>
    35ea:	9004      	str	r0, [sp, #16]
    35ec:	9105      	str	r1, [sp, #20]
    35ee:	e5e1      	b.n	31b4 <__ieee754_pow+0x508>
    35f0:	4a43      	ldr	r2, [pc, #268]	; (3700 <__ieee754_pow+0xa54>)
    35f2:	4b44      	ldr	r3, [pc, #272]	; (3704 <__ieee754_pow+0xa58>)
    35f4:	9806      	ldr	r0, [sp, #24]
    35f6:	9907      	ldr	r1, [sp, #28]
    35f8:	f001 fdaa 	bl	5150 <__aeabi_dmul>
    35fc:	4a40      	ldr	r2, [pc, #256]	; (3700 <__ieee754_pow+0xa54>)
    35fe:	4b41      	ldr	r3, [pc, #260]	; (3704 <__ieee754_pow+0xa58>)
    3600:	f001 fda6 	bl	5150 <__aeabi_dmul>
    3604:	0006      	movs	r6, r0
    3606:	f7ff fb9a 	bl	2d3e <__ieee754_pow+0x92>
    360a:	2a00      	cmp	r2, #0
    360c:	d001      	beq.n	3612 <__ieee754_pow+0x966>
    360e:	f7ff fba5 	bl	2d5c <__ieee754_pow+0xb0>
    3612:	3214      	adds	r2, #20
    3614:	1ad3      	subs	r3, r2, r3
    3616:	003a      	movs	r2, r7
    3618:	411a      	asrs	r2, r3
    361a:	0011      	movs	r1, r2
    361c:	4099      	lsls	r1, r3
    361e:	428f      	cmp	r7, r1
    3620:	d001      	beq.n	3626 <__ieee754_pow+0x97a>
    3622:	f7ff fb6f 	bl	2d04 <__ieee754_pow+0x58>
    3626:	2301      	movs	r3, #1
    3628:	4013      	ands	r3, r2
    362a:	2202      	movs	r2, #2
    362c:	1ad3      	subs	r3, r2, r3
    362e:	469b      	mov	fp, r3
    3630:	f7ff fb68 	bl	2d04 <__ieee754_pow+0x58>
    3634:	4b30      	ldr	r3, [pc, #192]	; (36f8 <__ieee754_pow+0xa4c>)
    3636:	429e      	cmp	r6, r3
    3638:	dd00      	ble.n	363c <__ieee754_pow+0x990>
    363a:	e64e      	b.n	32da <__ieee754_pow+0x62e>
    363c:	2300      	movs	r3, #0
    363e:	4699      	mov	r9, r3
    3640:	4698      	mov	r8, r3
    3642:	e67a      	b.n	333a <__ieee754_pow+0x68e>
    3644:	0002      	movs	r2, r0
    3646:	000b      	movs	r3, r1
    3648:	f7ff fc14 	bl	2e74 <__ieee754_pow+0x1c8>
    364c:	2380      	movs	r3, #128	; 0x80
    364e:	4c2e      	ldr	r4, [pc, #184]	; (3708 <__ieee754_pow+0xa5c>)
    3650:	05db      	lsls	r3, r3, #23
    3652:	9308      	str	r3, [sp, #32]
    3654:	9409      	str	r4, [sp, #36]	; 0x24
    3656:	4b2d      	ldr	r3, [pc, #180]	; (370c <__ieee754_pow+0xa60>)
    3658:	4c2d      	ldr	r4, [pc, #180]	; (3710 <__ieee754_pow+0xa64>)
    365a:	2200      	movs	r2, #0
    365c:	930c      	str	r3, [sp, #48]	; 0x30
    365e:	940d      	str	r4, [sp, #52]	; 0x34
    3660:	2480      	movs	r4, #128	; 0x80
    3662:	4b2c      	ldr	r3, [pc, #176]	; (3714 <__ieee754_pow+0xa68>)
    3664:	02e4      	lsls	r4, r4, #11
    3666:	9206      	str	r2, [sp, #24]
    3668:	9307      	str	r3, [sp, #28]
    366a:	e456      	b.n	2f1a <__ieee754_pow+0x26e>
    366c:	4643      	mov	r3, r8
    366e:	425b      	negs	r3, r3
    3670:	4698      	mov	r8, r3
    3672:	e651      	b.n	3318 <__ieee754_pow+0x66c>
    3674:	4642      	mov	r2, r8
    3676:	f000 f9fd 	bl	3a74 <scalbn>
    367a:	e707      	b.n	348c <__ieee754_pow+0x7e0>
    367c:	fffffc02 	.word	0xfffffc02
    3680:	fffffc01 	.word	0xfffffc01
    3684:	000fffff 	.word	0x000fffff
    3688:	3fe62e43 	.word	0x3fe62e43
    368c:	fefa39ef 	.word	0xfefa39ef
    3690:	3fe62e42 	.word	0x3fe62e42
    3694:	0ca86c39 	.word	0x0ca86c39
    3698:	be205c61 	.word	0xbe205c61
    369c:	72bea4d0 	.word	0x72bea4d0
    36a0:	3e663769 	.word	0x3e663769
    36a4:	c5d26bf1 	.word	0xc5d26bf1
    36a8:	3ebbbd41 	.word	0x3ebbbd41
    36ac:	af25de2c 	.word	0xaf25de2c
    36b0:	3f11566a 	.word	0x3f11566a
    36b4:	16bebd93 	.word	0x16bebd93
    36b8:	3f66c16c 	.word	0x3f66c16c
    36bc:	5555553e 	.word	0x5555553e
    36c0:	3fc55555 	.word	0x3fc55555
    36c4:	3ff00000 	.word	0x3ff00000
    36c8:	4090cbff 	.word	0x4090cbff
    36cc:	3f6f3400 	.word	0x3f6f3400
    36d0:	c2f8f359 	.word	0xc2f8f359
    36d4:	01a56e1f 	.word	0x01a56e1f
    36d8:	bff00000 	.word	0xbff00000
    36dc:	3feffffe 	.word	0x3feffffe
    36e0:	3ff71547 	.word	0x3ff71547
    36e4:	f85ddf44 	.word	0xf85ddf44
    36e8:	3e54ae0b 	.word	0x3e54ae0b
    36ec:	3fd00000 	.word	0x3fd00000
    36f0:	55555555 	.word	0x55555555
    36f4:	3fd55555 	.word	0x3fd55555
    36f8:	3fe00000 	.word	0x3fe00000
    36fc:	652b82fe 	.word	0x652b82fe
    3700:	8800759c 	.word	0x8800759c
    3704:	7e37e43c 	.word	0x7e37e43c
    3708:	3fe2b803 	.word	0x3fe2b803
    370c:	43cfd006 	.word	0x43cfd006
    3710:	3e4cfdeb 	.word	0x3e4cfdeb
    3714:	3ff80000 	.word	0x3ff80000

00003718 <__ieee754_sqrt>:
    3718:	b5f0      	push	{r4, r5, r6, r7, lr}
    371a:	4656      	mov	r6, sl
    371c:	464d      	mov	r5, r9
    371e:	4644      	mov	r4, r8
    3720:	465f      	mov	r7, fp
    3722:	4b75      	ldr	r3, [pc, #468]	; (38f8 <__ieee754_sqrt+0x1e0>)
    3724:	b4f0      	push	{r4, r5, r6, r7}
    3726:	000a      	movs	r2, r1
    3728:	000d      	movs	r5, r1
    372a:	0019      	movs	r1, r3
    372c:	b083      	sub	sp, #12
    372e:	0006      	movs	r6, r0
    3730:	0004      	movs	r4, r0
    3732:	4029      	ands	r1, r5
    3734:	4299      	cmp	r1, r3
    3736:	d100      	bne.n	373a <__ieee754_sqrt+0x22>
    3738:	e0ba      	b.n	38b0 <__ieee754_sqrt+0x198>
    373a:	2d00      	cmp	r5, #0
    373c:	dc00      	bgt.n	3740 <__ieee754_sqrt+0x28>
    373e:	e094      	b.n	386a <__ieee754_sqrt+0x152>
    3740:	152d      	asrs	r5, r5, #20
    3742:	d100      	bne.n	3746 <__ieee754_sqrt+0x2e>
    3744:	e0a3      	b.n	388e <__ieee754_sqrt+0x176>
    3746:	4b6d      	ldr	r3, [pc, #436]	; (38fc <__ieee754_sqrt+0x1e4>)
    3748:	0312      	lsls	r2, r2, #12
    374a:	469c      	mov	ip, r3
    374c:	2380      	movs	r3, #128	; 0x80
    374e:	0b12      	lsrs	r2, r2, #12
    3750:	035b      	lsls	r3, r3, #13
    3752:	4465      	add	r5, ip
    3754:	431a      	orrs	r2, r3
    3756:	07eb      	lsls	r3, r5, #31
    3758:	d500      	bpl.n	375c <__ieee754_sqrt+0x44>
    375a:	e081      	b.n	3860 <__ieee754_sqrt+0x148>
    375c:	106b      	asrs	r3, r5, #1
    375e:	4698      	mov	r8, r3
    3760:	0fe3      	lsrs	r3, r4, #31
    3762:	189b      	adds	r3, r3, r2
    3764:	189b      	adds	r3, r3, r2
    3766:	2280      	movs	r2, #128	; 0x80
    3768:	2116      	movs	r1, #22
    376a:	2600      	movs	r6, #0
    376c:	2700      	movs	r7, #0
    376e:	0064      	lsls	r4, r4, #1
    3770:	0392      	lsls	r2, r2, #14
    3772:	18b8      	adds	r0, r7, r2
    3774:	4298      	cmp	r0, r3
    3776:	dc02      	bgt.n	377e <__ieee754_sqrt+0x66>
    3778:	1887      	adds	r7, r0, r2
    377a:	1a1b      	subs	r3, r3, r0
    377c:	18b6      	adds	r6, r6, r2
    377e:	0fe0      	lsrs	r0, r4, #31
    3780:	005b      	lsls	r3, r3, #1
    3782:	3901      	subs	r1, #1
    3784:	181b      	adds	r3, r3, r0
    3786:	0064      	lsls	r4, r4, #1
    3788:	0852      	lsrs	r2, r2, #1
    378a:	2900      	cmp	r1, #0
    378c:	d1f1      	bne.n	3772 <__ieee754_sqrt+0x5a>
    378e:	2200      	movs	r2, #0
    3790:	9201      	str	r2, [sp, #4]
    3792:	4694      	mov	ip, r2
    3794:	2280      	movs	r2, #128	; 0x80
    3796:	0612      	lsls	r2, r2, #24
    3798:	2020      	movs	r0, #32
    379a:	4691      	mov	r9, r2
    379c:	e009      	b.n	37b2 <__ieee754_sqrt+0x9a>
    379e:	429f      	cmp	r7, r3
    37a0:	d041      	beq.n	3826 <__ieee754_sqrt+0x10e>
    37a2:	0fe1      	lsrs	r1, r4, #31
    37a4:	18c9      	adds	r1, r1, r3
    37a6:	3801      	subs	r0, #1
    37a8:	18cb      	adds	r3, r1, r3
    37aa:	0064      	lsls	r4, r4, #1
    37ac:	0852      	lsrs	r2, r2, #1
    37ae:	2800      	cmp	r0, #0
    37b0:	d01e      	beq.n	37f0 <__ieee754_sqrt+0xd8>
    37b2:	4661      	mov	r1, ip
    37b4:	1851      	adds	r1, r2, r1
    37b6:	429f      	cmp	r7, r3
    37b8:	daf1      	bge.n	379e <__ieee754_sqrt+0x86>
    37ba:	188d      	adds	r5, r1, r2
    37bc:	46ac      	mov	ip, r5
    37be:	0fcd      	lsrs	r5, r1, #31
    37c0:	07ed      	lsls	r5, r5, #31
    37c2:	46ba      	mov	sl, r7
    37c4:	454d      	cmp	r5, r9
    37c6:	d039      	beq.n	383c <__ieee754_sqrt+0x124>
    37c8:	1bdb      	subs	r3, r3, r7
    37ca:	428c      	cmp	r4, r1
    37cc:	41bf      	sbcs	r7, r7
    37ce:	427f      	negs	r7, r7
    37d0:	1bdb      	subs	r3, r3, r7
    37d2:	1a64      	subs	r4, r4, r1
    37d4:	9901      	ldr	r1, [sp, #4]
    37d6:	3801      	subs	r0, #1
    37d8:	468b      	mov	fp, r1
    37da:	4493      	add	fp, r2
    37dc:	4659      	mov	r1, fp
    37de:	9101      	str	r1, [sp, #4]
    37e0:	0fe1      	lsrs	r1, r4, #31
    37e2:	18c9      	adds	r1, r1, r3
    37e4:	4657      	mov	r7, sl
    37e6:	18cb      	adds	r3, r1, r3
    37e8:	0064      	lsls	r4, r4, #1
    37ea:	0852      	lsrs	r2, r2, #1
    37ec:	2800      	cmp	r0, #0
    37ee:	d1e0      	bne.n	37b2 <__ieee754_sqrt+0x9a>
    37f0:	4323      	orrs	r3, r4
    37f2:	d12b      	bne.n	384c <__ieee754_sqrt+0x134>
    37f4:	9b01      	ldr	r3, [sp, #4]
    37f6:	085b      	lsrs	r3, r3, #1
    37f8:	4941      	ldr	r1, [pc, #260]	; (3900 <__ieee754_sqrt+0x1e8>)
    37fa:	1072      	asrs	r2, r6, #1
    37fc:	468c      	mov	ip, r1
    37fe:	4462      	add	r2, ip
    3800:	07f1      	lsls	r1, r6, #31
    3802:	d502      	bpl.n	380a <__ieee754_sqrt+0xf2>
    3804:	2180      	movs	r1, #128	; 0x80
    3806:	0609      	lsls	r1, r1, #24
    3808:	430b      	orrs	r3, r1
    380a:	4641      	mov	r1, r8
    380c:	0509      	lsls	r1, r1, #20
    380e:	188d      	adds	r5, r1, r2
    3810:	001e      	movs	r6, r3
    3812:	002f      	movs	r7, r5
    3814:	0030      	movs	r0, r6
    3816:	0039      	movs	r1, r7
    3818:	b003      	add	sp, #12
    381a:	bc3c      	pop	{r2, r3, r4, r5}
    381c:	4690      	mov	r8, r2
    381e:	4699      	mov	r9, r3
    3820:	46a2      	mov	sl, r4
    3822:	46ab      	mov	fp, r5
    3824:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3826:	42a1      	cmp	r1, r4
    3828:	d80e      	bhi.n	3848 <__ieee754_sqrt+0x130>
    382a:	188d      	adds	r5, r1, r2
    382c:	46ac      	mov	ip, r5
    382e:	0fcd      	lsrs	r5, r1, #31
    3830:	07ed      	lsls	r5, r5, #31
    3832:	454d      	cmp	r5, r9
    3834:	d048      	beq.n	38c8 <__ieee754_sqrt+0x1b0>
    3836:	469a      	mov	sl, r3
    3838:	2300      	movs	r3, #0
    383a:	e7ca      	b.n	37d2 <__ieee754_sqrt+0xba>
    383c:	4665      	mov	r5, ip
    383e:	2d00      	cmp	r5, #0
    3840:	dbc2      	blt.n	37c8 <__ieee754_sqrt+0xb0>
    3842:	1c7d      	adds	r5, r7, #1
    3844:	46aa      	mov	sl, r5
    3846:	e7bf      	b.n	37c8 <__ieee754_sqrt+0xb0>
    3848:	003b      	movs	r3, r7
    384a:	e7aa      	b.n	37a2 <__ieee754_sqrt+0x8a>
    384c:	9b01      	ldr	r3, [sp, #4]
    384e:	3301      	adds	r3, #1
    3850:	d03e      	beq.n	38d0 <__ieee754_sqrt+0x1b8>
    3852:	9a01      	ldr	r2, [sp, #4]
    3854:	2301      	movs	r3, #1
    3856:	4694      	mov	ip, r2
    3858:	4013      	ands	r3, r2
    385a:	4463      	add	r3, ip
    385c:	085b      	lsrs	r3, r3, #1
    385e:	e7cb      	b.n	37f8 <__ieee754_sqrt+0xe0>
    3860:	0fe3      	lsrs	r3, r4, #31
    3862:	0052      	lsls	r2, r2, #1
    3864:	189a      	adds	r2, r3, r2
    3866:	0064      	lsls	r4, r4, #1
    3868:	e778      	b.n	375c <__ieee754_sqrt+0x44>
    386a:	006b      	lsls	r3, r5, #1
    386c:	085b      	lsrs	r3, r3, #1
    386e:	4303      	orrs	r3, r0
    3870:	002f      	movs	r7, r5
    3872:	2b00      	cmp	r3, #0
    3874:	d0ce      	beq.n	3814 <__ieee754_sqrt+0xfc>
    3876:	2500      	movs	r5, #0
    3878:	2a00      	cmp	r2, #0
    387a:	d131      	bne.n	38e0 <__ieee754_sqrt+0x1c8>
    387c:	0ae2      	lsrs	r2, r4, #11
    387e:	3d15      	subs	r5, #21
    3880:	0564      	lsls	r4, r4, #21
    3882:	2a00      	cmp	r2, #0
    3884:	d0fa      	beq.n	387c <__ieee754_sqrt+0x164>
    3886:	2380      	movs	r3, #128	; 0x80
    3888:	035b      	lsls	r3, r3, #13
    388a:	421a      	tst	r2, r3
    388c:	d123      	bne.n	38d6 <__ieee754_sqrt+0x1be>
    388e:	2080      	movs	r0, #128	; 0x80
    3890:	2300      	movs	r3, #0
    3892:	0340      	lsls	r0, r0, #13
    3894:	e000      	b.n	3898 <__ieee754_sqrt+0x180>
    3896:	000b      	movs	r3, r1
    3898:	0052      	lsls	r2, r2, #1
    389a:	1c59      	adds	r1, r3, #1
    389c:	4202      	tst	r2, r0
    389e:	d0fa      	beq.n	3896 <__ieee754_sqrt+0x17e>
    38a0:	2020      	movs	r0, #32
    38a2:	1a40      	subs	r0, r0, r1
    38a4:	1aed      	subs	r5, r5, r3
    38a6:	0023      	movs	r3, r4
    38a8:	40c3      	lsrs	r3, r0
    38aa:	408c      	lsls	r4, r1
    38ac:	431a      	orrs	r2, r3
    38ae:	e74a      	b.n	3746 <__ieee754_sqrt+0x2e>
    38b0:	0002      	movs	r2, r0
    38b2:	002b      	movs	r3, r5
    38b4:	0029      	movs	r1, r5
    38b6:	f001 fc4b 	bl	5150 <__aeabi_dmul>
    38ba:	0032      	movs	r2, r6
    38bc:	002b      	movs	r3, r5
    38be:	f000 fcf7 	bl	42b0 <__aeabi_dadd>
    38c2:	0006      	movs	r6, r0
    38c4:	000f      	movs	r7, r1
    38c6:	e7a5      	b.n	3814 <__ieee754_sqrt+0xfc>
    38c8:	4665      	mov	r5, ip
    38ca:	2d00      	cmp	r5, #0
    38cc:	dab9      	bge.n	3842 <__ieee754_sqrt+0x12a>
    38ce:	e7b2      	b.n	3836 <__ieee754_sqrt+0x11e>
    38d0:	3601      	adds	r6, #1
    38d2:	2300      	movs	r3, #0
    38d4:	e790      	b.n	37f8 <__ieee754_sqrt+0xe0>
    38d6:	2301      	movs	r3, #1
    38d8:	2020      	movs	r0, #32
    38da:	425b      	negs	r3, r3
    38dc:	2100      	movs	r1, #0
    38de:	e7e1      	b.n	38a4 <__ieee754_sqrt+0x18c>
    38e0:	003b      	movs	r3, r7
    38e2:	0002      	movs	r2, r0
    38e4:	0039      	movs	r1, r7
    38e6:	f001 fead 	bl	5644 <__aeabi_dsub>
    38ea:	0002      	movs	r2, r0
    38ec:	000b      	movs	r3, r1
    38ee:	f001 f80b 	bl	4908 <__aeabi_ddiv>
    38f2:	0006      	movs	r6, r0
    38f4:	000f      	movs	r7, r1
    38f6:	e78d      	b.n	3814 <__ieee754_sqrt+0xfc>
    38f8:	7ff00000 	.word	0x7ff00000
    38fc:	fffffc01 	.word	0xfffffc01
    3900:	3fe00000 	.word	0x3fe00000

00003904 <fabs>:
    3904:	0049      	lsls	r1, r1, #1
    3906:	084b      	lsrs	r3, r1, #1
    3908:	0019      	movs	r1, r3
    390a:	4770      	bx	lr

0000390c <finite>:
    390c:	4b03      	ldr	r3, [pc, #12]	; (391c <finite+0x10>)
    390e:	0048      	lsls	r0, r1, #1
    3910:	469c      	mov	ip, r3
    3912:	0840      	lsrs	r0, r0, #1
    3914:	4460      	add	r0, ip
    3916:	0fc0      	lsrs	r0, r0, #31
    3918:	4770      	bx	lr
    391a:	46c0      	nop			; (mov r8, r8)
    391c:	80100000 	.word	0x80100000

00003920 <matherr>:
    3920:	2000      	movs	r0, #0
    3922:	4770      	bx	lr

00003924 <nan>:
    3924:	2000      	movs	r0, #0
    3926:	4901      	ldr	r1, [pc, #4]	; (392c <nan+0x8>)
    3928:	4770      	bx	lr
    392a:	46c0      	nop			; (mov r8, r8)
    392c:	7ff80000 	.word	0x7ff80000

00003930 <rint>:
    3930:	b5f0      	push	{r4, r5, r6, r7, lr}
    3932:	4647      	mov	r7, r8
    3934:	b480      	push	{r7}
    3936:	0fcb      	lsrs	r3, r1, #31
    3938:	4698      	mov	r8, r3
    393a:	4c4a      	ldr	r4, [pc, #296]	; (3a64 <rint+0x134>)
    393c:	004b      	lsls	r3, r1, #1
    393e:	0d5b      	lsrs	r3, r3, #21
    3940:	191e      	adds	r6, r3, r4
    3942:	b082      	sub	sp, #8
    3944:	0007      	movs	r7, r0
    3946:	000a      	movs	r2, r1
    3948:	2e13      	cmp	r6, #19
    394a:	dc35      	bgt.n	39b8 <rint+0x88>
    394c:	2e00      	cmp	r6, #0
    394e:	db57      	blt.n	3a00 <rint+0xd0>
    3950:	4b45      	ldr	r3, [pc, #276]	; (3a68 <rint+0x138>)
    3952:	0004      	movs	r4, r0
    3954:	4133      	asrs	r3, r6
    3956:	001f      	movs	r7, r3
    3958:	400f      	ands	r7, r1
    395a:	4307      	orrs	r7, r0
    395c:	000d      	movs	r5, r1
    395e:	2f00      	cmp	r7, #0
    3960:	d024      	beq.n	39ac <rint+0x7c>
    3962:	085b      	lsrs	r3, r3, #1
    3964:	001c      	movs	r4, r3
    3966:	400c      	ands	r4, r1
    3968:	4320      	orrs	r0, r4
    396a:	2700      	movs	r7, #0
    396c:	2800      	cmp	r0, #0
    396e:	d007      	beq.n	3980 <rint+0x50>
    3970:	2e13      	cmp	r6, #19
    3972:	d100      	bne.n	3976 <rint+0x46>
    3974:	e072      	b.n	3a5c <rint+0x12c>
    3976:	2280      	movs	r2, #128	; 0x80
    3978:	02d2      	lsls	r2, r2, #11
    397a:	4132      	asrs	r2, r6
    397c:	4399      	bics	r1, r3
    397e:	430a      	orrs	r2, r1
    3980:	4643      	mov	r3, r8
    3982:	00de      	lsls	r6, r3, #3
    3984:	4b39      	ldr	r3, [pc, #228]	; (3a6c <rint+0x13c>)
    3986:	0011      	movs	r1, r2
    3988:	199e      	adds	r6, r3, r6
    398a:	6834      	ldr	r4, [r6, #0]
    398c:	6875      	ldr	r5, [r6, #4]
    398e:	0038      	movs	r0, r7
    3990:	0022      	movs	r2, r4
    3992:	002b      	movs	r3, r5
    3994:	f000 fc8c 	bl	42b0 <__aeabi_dadd>
    3998:	9000      	str	r0, [sp, #0]
    399a:	9101      	str	r1, [sp, #4]
    399c:	9800      	ldr	r0, [sp, #0]
    399e:	9901      	ldr	r1, [sp, #4]
    39a0:	0022      	movs	r2, r4
    39a2:	002b      	movs	r3, r5
    39a4:	f001 fe4e 	bl	5644 <__aeabi_dsub>
    39a8:	0004      	movs	r4, r0
    39aa:	000d      	movs	r5, r1
    39ac:	0020      	movs	r0, r4
    39ae:	0029      	movs	r1, r5
    39b0:	b002      	add	sp, #8
    39b2:	bc04      	pop	{r2}
    39b4:	4690      	mov	r8, r2
    39b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    39b8:	2e33      	cmp	r6, #51	; 0x33
    39ba:	dd0c      	ble.n	39d6 <rint+0xa6>
    39bc:	2380      	movs	r3, #128	; 0x80
    39be:	0004      	movs	r4, r0
    39c0:	000d      	movs	r5, r1
    39c2:	00db      	lsls	r3, r3, #3
    39c4:	429e      	cmp	r6, r3
    39c6:	d1f1      	bne.n	39ac <rint+0x7c>
    39c8:	0002      	movs	r2, r0
    39ca:	000b      	movs	r3, r1
    39cc:	f000 fc70 	bl	42b0 <__aeabi_dadd>
    39d0:	0004      	movs	r4, r0
    39d2:	000d      	movs	r5, r1
    39d4:	e7ea      	b.n	39ac <rint+0x7c>
    39d6:	4c26      	ldr	r4, [pc, #152]	; (3a70 <rint+0x140>)
    39d8:	000d      	movs	r5, r1
    39da:	46a4      	mov	ip, r4
    39dc:	2401      	movs	r4, #1
    39de:	4463      	add	r3, ip
    39e0:	4264      	negs	r4, r4
    39e2:	40dc      	lsrs	r4, r3
    39e4:	46a4      	mov	ip, r4
    39e6:	4661      	mov	r1, ip
    39e8:	0004      	movs	r4, r0
    39ea:	4201      	tst	r1, r0
    39ec:	d0de      	beq.n	39ac <rint+0x7c>
    39ee:	0849      	lsrs	r1, r1, #1
    39f0:	4201      	tst	r1, r0
    39f2:	d0c5      	beq.n	3980 <rint+0x50>
    39f4:	2780      	movs	r7, #128	; 0x80
    39f6:	05ff      	lsls	r7, r7, #23
    39f8:	411f      	asrs	r7, r3
    39fa:	4388      	bics	r0, r1
    39fc:	4307      	orrs	r7, r0
    39fe:	e7bf      	b.n	3980 <rint+0x50>
    3a00:	004b      	lsls	r3, r1, #1
    3a02:	085b      	lsrs	r3, r3, #1
    3a04:	4303      	orrs	r3, r0
    3a06:	0004      	movs	r4, r0
    3a08:	000d      	movs	r5, r1
    3a0a:	2b00      	cmp	r3, #0
    3a0c:	d0ce      	beq.n	39ac <rint+0x7c>
    3a0e:	030b      	lsls	r3, r1, #12
    3a10:	0b1b      	lsrs	r3, r3, #12
    3a12:	4303      	orrs	r3, r0
    3a14:	425a      	negs	r2, r3
    3a16:	4313      	orrs	r3, r2
    3a18:	2280      	movs	r2, #128	; 0x80
    3a1a:	0b1b      	lsrs	r3, r3, #12
    3a1c:	0312      	lsls	r2, r2, #12
    3a1e:	4013      	ands	r3, r2
    3a20:	0c4a      	lsrs	r2, r1, #17
    3a22:	0452      	lsls	r2, r2, #17
    3a24:	4313      	orrs	r3, r2
    3a26:	0019      	movs	r1, r3
    3a28:	4643      	mov	r3, r8
    3a2a:	4a10      	ldr	r2, [pc, #64]	; (3a6c <rint+0x13c>)
    3a2c:	00db      	lsls	r3, r3, #3
    3a2e:	18d3      	adds	r3, r2, r3
    3a30:	681c      	ldr	r4, [r3, #0]
    3a32:	685d      	ldr	r5, [r3, #4]
    3a34:	0022      	movs	r2, r4
    3a36:	002b      	movs	r3, r5
    3a38:	f000 fc3a 	bl	42b0 <__aeabi_dadd>
    3a3c:	9000      	str	r0, [sp, #0]
    3a3e:	9101      	str	r1, [sp, #4]
    3a40:	9800      	ldr	r0, [sp, #0]
    3a42:	9901      	ldr	r1, [sp, #4]
    3a44:	0022      	movs	r2, r4
    3a46:	002b      	movs	r3, r5
    3a48:	f001 fdfc 	bl	5644 <__aeabi_dsub>
    3a4c:	4642      	mov	r2, r8
    3a4e:	004b      	lsls	r3, r1, #1
    3a50:	085b      	lsrs	r3, r3, #1
    3a52:	07d6      	lsls	r6, r2, #31
    3a54:	4333      	orrs	r3, r6
    3a56:	0004      	movs	r4, r0
    3a58:	001d      	movs	r5, r3
    3a5a:	e7a7      	b.n	39ac <rint+0x7c>
    3a5c:	2780      	movs	r7, #128	; 0x80
    3a5e:	063f      	lsls	r7, r7, #24
    3a60:	e789      	b.n	3976 <rint+0x46>
    3a62:	46c0      	nop			; (mov r8, r8)
    3a64:	fffffc01 	.word	0xfffffc01
    3a68:	000fffff 	.word	0x000fffff
    3a6c:	00006520 	.word	0x00006520
    3a70:	fffffbed 	.word	0xfffffbed

00003a74 <scalbn>:
    3a74:	004b      	lsls	r3, r1, #1
    3a76:	b570      	push	{r4, r5, r6, lr}
    3a78:	0d5b      	lsrs	r3, r3, #21
    3a7a:	0014      	movs	r4, r2
    3a7c:	000a      	movs	r2, r1
    3a7e:	2b00      	cmp	r3, #0
    3a80:	d11a      	bne.n	3ab8 <scalbn+0x44>
    3a82:	004b      	lsls	r3, r1, #1
    3a84:	085b      	lsrs	r3, r3, #1
    3a86:	4303      	orrs	r3, r0
    3a88:	d015      	beq.n	3ab6 <scalbn+0x42>
    3a8a:	2200      	movs	r2, #0
    3a8c:	4b22      	ldr	r3, [pc, #136]	; (3b18 <scalbn+0xa4>)
    3a8e:	f001 fb5f 	bl	5150 <__aeabi_dmul>
    3a92:	4b22      	ldr	r3, [pc, #136]	; (3b1c <scalbn+0xa8>)
    3a94:	000a      	movs	r2, r1
    3a96:	429c      	cmp	r4, r3
    3a98:	db22      	blt.n	3ae0 <scalbn+0x6c>
    3a9a:	004b      	lsls	r3, r1, #1
    3a9c:	0d5b      	lsrs	r3, r3, #21
    3a9e:	3b36      	subs	r3, #54	; 0x36
    3aa0:	4d1f      	ldr	r5, [pc, #124]	; (3b20 <scalbn+0xac>)
    3aa2:	18e3      	adds	r3, r4, r3
    3aa4:	42ab      	cmp	r3, r5
    3aa6:	dc20      	bgt.n	3aea <scalbn+0x76>
    3aa8:	2b00      	cmp	r3, #0
    3aaa:	dd0d      	ble.n	3ac8 <scalbn+0x54>
    3aac:	4c1d      	ldr	r4, [pc, #116]	; (3b24 <scalbn+0xb0>)
    3aae:	051b      	lsls	r3, r3, #20
    3ab0:	4022      	ands	r2, r4
    3ab2:	431a      	orrs	r2, r3
    3ab4:	0011      	movs	r1, r2
    3ab6:	bd70      	pop	{r4, r5, r6, pc}
    3ab8:	4d1b      	ldr	r5, [pc, #108]	; (3b28 <scalbn+0xb4>)
    3aba:	42ab      	cmp	r3, r5
    3abc:	d1f0      	bne.n	3aa0 <scalbn+0x2c>
    3abe:	0002      	movs	r2, r0
    3ac0:	000b      	movs	r3, r1
    3ac2:	f000 fbf5 	bl	42b0 <__aeabi_dadd>
    3ac6:	e7f6      	b.n	3ab6 <scalbn+0x42>
    3ac8:	001d      	movs	r5, r3
    3aca:	3535      	adds	r5, #53	; 0x35
    3acc:	da18      	bge.n	3b00 <scalbn+0x8c>
    3ace:	4b17      	ldr	r3, [pc, #92]	; (3b2c <scalbn+0xb8>)
    3ad0:	0002      	movs	r2, r0
    3ad2:	429c      	cmp	r4, r3
    3ad4:	dc0a      	bgt.n	3aec <scalbn+0x78>
    3ad6:	000b      	movs	r3, r1
    3ad8:	4815      	ldr	r0, [pc, #84]	; (3b30 <scalbn+0xbc>)
    3ada:	4916      	ldr	r1, [pc, #88]	; (3b34 <scalbn+0xc0>)
    3adc:	f000 f832 	bl	3b44 <copysign>
    3ae0:	4a13      	ldr	r2, [pc, #76]	; (3b30 <scalbn+0xbc>)
    3ae2:	4b14      	ldr	r3, [pc, #80]	; (3b34 <scalbn+0xc0>)
    3ae4:	f001 fb34 	bl	5150 <__aeabi_dmul>
    3ae8:	e7e5      	b.n	3ab6 <scalbn+0x42>
    3aea:	0002      	movs	r2, r0
    3aec:	000b      	movs	r3, r1
    3aee:	4812      	ldr	r0, [pc, #72]	; (3b38 <scalbn+0xc4>)
    3af0:	4912      	ldr	r1, [pc, #72]	; (3b3c <scalbn+0xc8>)
    3af2:	f000 f827 	bl	3b44 <copysign>
    3af6:	4a10      	ldr	r2, [pc, #64]	; (3b38 <scalbn+0xc4>)
    3af8:	4b10      	ldr	r3, [pc, #64]	; (3b3c <scalbn+0xc8>)
    3afa:	f001 fb29 	bl	5150 <__aeabi_dmul>
    3afe:	e7da      	b.n	3ab6 <scalbn+0x42>
    3b00:	4c08      	ldr	r4, [pc, #32]	; (3b24 <scalbn+0xb0>)
    3b02:	3336      	adds	r3, #54	; 0x36
    3b04:	4022      	ands	r2, r4
    3b06:	051b      	lsls	r3, r3, #20
    3b08:	4313      	orrs	r3, r2
    3b0a:	0019      	movs	r1, r3
    3b0c:	2200      	movs	r2, #0
    3b0e:	4b0c      	ldr	r3, [pc, #48]	; (3b40 <scalbn+0xcc>)
    3b10:	f001 fb1e 	bl	5150 <__aeabi_dmul>
    3b14:	e7cf      	b.n	3ab6 <scalbn+0x42>
    3b16:	46c0      	nop			; (mov r8, r8)
    3b18:	43500000 	.word	0x43500000
    3b1c:	ffff3cb0 	.word	0xffff3cb0
    3b20:	000007fe 	.word	0x000007fe
    3b24:	800fffff 	.word	0x800fffff
    3b28:	000007ff 	.word	0x000007ff
    3b2c:	0000c350 	.word	0x0000c350
    3b30:	c2f8f359 	.word	0xc2f8f359
    3b34:	01a56e1f 	.word	0x01a56e1f
    3b38:	8800759c 	.word	0x8800759c
    3b3c:	7e37e43c 	.word	0x7e37e43c
    3b40:	3c900000 	.word	0x3c900000

00003b44 <copysign>:
    3b44:	b530      	push	{r4, r5, lr}
    3b46:	004a      	lsls	r2, r1, #1
    3b48:	0fdb      	lsrs	r3, r3, #31
    3b4a:	07db      	lsls	r3, r3, #31
    3b4c:	0852      	lsrs	r2, r2, #1
    3b4e:	431a      	orrs	r2, r3
    3b50:	0011      	movs	r1, r2
    3b52:	bd30      	pop	{r4, r5, pc}

00003b54 <__gnu_thumb1_case_uqi>:
    3b54:	b402      	push	{r1}
    3b56:	4671      	mov	r1, lr
    3b58:	0849      	lsrs	r1, r1, #1
    3b5a:	0049      	lsls	r1, r1, #1
    3b5c:	5c09      	ldrb	r1, [r1, r0]
    3b5e:	0049      	lsls	r1, r1, #1
    3b60:	448e      	add	lr, r1
    3b62:	bc02      	pop	{r1}
    3b64:	4770      	bx	lr
    3b66:	46c0      	nop			; (mov r8, r8)

00003b68 <__aeabi_cdrcmple>:
    3b68:	4684      	mov	ip, r0
    3b6a:	1c10      	adds	r0, r2, #0
    3b6c:	4662      	mov	r2, ip
    3b6e:	468c      	mov	ip, r1
    3b70:	1c19      	adds	r1, r3, #0
    3b72:	4663      	mov	r3, ip
    3b74:	e000      	b.n	3b78 <__aeabi_cdcmpeq>
    3b76:	46c0      	nop			; (mov r8, r8)

00003b78 <__aeabi_cdcmpeq>:
    3b78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    3b7a:	f001 fa7f 	bl	507c <__ledf2>
    3b7e:	2800      	cmp	r0, #0
    3b80:	d401      	bmi.n	3b86 <__aeabi_cdcmpeq+0xe>
    3b82:	2100      	movs	r1, #0
    3b84:	42c8      	cmn	r0, r1
    3b86:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00003b88 <__aeabi_dcmpeq>:
    3b88:	b510      	push	{r4, lr}
    3b8a:	f001 f9d3 	bl	4f34 <__eqdf2>
    3b8e:	4240      	negs	r0, r0
    3b90:	3001      	adds	r0, #1
    3b92:	bd10      	pop	{r4, pc}

00003b94 <__aeabi_dcmplt>:
    3b94:	b510      	push	{r4, lr}
    3b96:	f001 fa71 	bl	507c <__ledf2>
    3b9a:	2800      	cmp	r0, #0
    3b9c:	db01      	blt.n	3ba2 <__aeabi_dcmplt+0xe>
    3b9e:	2000      	movs	r0, #0
    3ba0:	bd10      	pop	{r4, pc}
    3ba2:	2001      	movs	r0, #1
    3ba4:	bd10      	pop	{r4, pc}
    3ba6:	46c0      	nop			; (mov r8, r8)

00003ba8 <__aeabi_dcmple>:
    3ba8:	b510      	push	{r4, lr}
    3baa:	f001 fa67 	bl	507c <__ledf2>
    3bae:	2800      	cmp	r0, #0
    3bb0:	dd01      	ble.n	3bb6 <__aeabi_dcmple+0xe>
    3bb2:	2000      	movs	r0, #0
    3bb4:	bd10      	pop	{r4, pc}
    3bb6:	2001      	movs	r0, #1
    3bb8:	bd10      	pop	{r4, pc}
    3bba:	46c0      	nop			; (mov r8, r8)

00003bbc <__aeabi_dcmpgt>:
    3bbc:	b510      	push	{r4, lr}
    3bbe:	f001 f9f9 	bl	4fb4 <__gedf2>
    3bc2:	2800      	cmp	r0, #0
    3bc4:	dc01      	bgt.n	3bca <__aeabi_dcmpgt+0xe>
    3bc6:	2000      	movs	r0, #0
    3bc8:	bd10      	pop	{r4, pc}
    3bca:	2001      	movs	r0, #1
    3bcc:	bd10      	pop	{r4, pc}
    3bce:	46c0      	nop			; (mov r8, r8)

00003bd0 <__aeabi_dcmpge>:
    3bd0:	b510      	push	{r4, lr}
    3bd2:	f001 f9ef 	bl	4fb4 <__gedf2>
    3bd6:	2800      	cmp	r0, #0
    3bd8:	da01      	bge.n	3bde <__aeabi_dcmpge+0xe>
    3bda:	2000      	movs	r0, #0
    3bdc:	bd10      	pop	{r4, pc}
    3bde:	2001      	movs	r0, #1
    3be0:	bd10      	pop	{r4, pc}
    3be2:	46c0      	nop			; (mov r8, r8)

00003be4 <__aeabi_lmul>:
    3be4:	b5f0      	push	{r4, r5, r6, r7, lr}
    3be6:	464f      	mov	r7, r9
    3be8:	4646      	mov	r6, r8
    3bea:	b4c0      	push	{r6, r7}
    3bec:	0416      	lsls	r6, r2, #16
    3bee:	0c36      	lsrs	r6, r6, #16
    3bf0:	4699      	mov	r9, r3
    3bf2:	0033      	movs	r3, r6
    3bf4:	0405      	lsls	r5, r0, #16
    3bf6:	0c2c      	lsrs	r4, r5, #16
    3bf8:	0c07      	lsrs	r7, r0, #16
    3bfa:	0c15      	lsrs	r5, r2, #16
    3bfc:	4363      	muls	r3, r4
    3bfe:	437e      	muls	r6, r7
    3c00:	436f      	muls	r7, r5
    3c02:	4365      	muls	r5, r4
    3c04:	0c1c      	lsrs	r4, r3, #16
    3c06:	19ad      	adds	r5, r5, r6
    3c08:	1964      	adds	r4, r4, r5
    3c0a:	469c      	mov	ip, r3
    3c0c:	42a6      	cmp	r6, r4
    3c0e:	d903      	bls.n	3c18 <__aeabi_lmul+0x34>
    3c10:	2380      	movs	r3, #128	; 0x80
    3c12:	025b      	lsls	r3, r3, #9
    3c14:	4698      	mov	r8, r3
    3c16:	4447      	add	r7, r8
    3c18:	4663      	mov	r3, ip
    3c1a:	0c25      	lsrs	r5, r4, #16
    3c1c:	19ef      	adds	r7, r5, r7
    3c1e:	041d      	lsls	r5, r3, #16
    3c20:	464b      	mov	r3, r9
    3c22:	434a      	muls	r2, r1
    3c24:	4343      	muls	r3, r0
    3c26:	0c2d      	lsrs	r5, r5, #16
    3c28:	0424      	lsls	r4, r4, #16
    3c2a:	1964      	adds	r4, r4, r5
    3c2c:	1899      	adds	r1, r3, r2
    3c2e:	19c9      	adds	r1, r1, r7
    3c30:	0020      	movs	r0, r4
    3c32:	bc0c      	pop	{r2, r3}
    3c34:	4690      	mov	r8, r2
    3c36:	4699      	mov	r9, r3
    3c38:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3c3a:	46c0      	nop			; (mov r8, r8)

00003c3c <__aeabi_f2uiz>:
    3c3c:	219e      	movs	r1, #158	; 0x9e
    3c3e:	b510      	push	{r4, lr}
    3c40:	05c9      	lsls	r1, r1, #23
    3c42:	1c04      	adds	r4, r0, #0
    3c44:	f002 fabe 	bl	61c4 <__aeabi_fcmpge>
    3c48:	2800      	cmp	r0, #0
    3c4a:	d103      	bne.n	3c54 <__aeabi_f2uiz+0x18>
    3c4c:	1c20      	adds	r0, r4, #0
    3c4e:	f000 fac5 	bl	41dc <__aeabi_f2iz>
    3c52:	bd10      	pop	{r4, pc}
    3c54:	219e      	movs	r1, #158	; 0x9e
    3c56:	1c20      	adds	r0, r4, #0
    3c58:	05c9      	lsls	r1, r1, #23
    3c5a:	f000 f939 	bl	3ed0 <__aeabi_fsub>
    3c5e:	f000 fabd 	bl	41dc <__aeabi_f2iz>
    3c62:	2380      	movs	r3, #128	; 0x80
    3c64:	061b      	lsls	r3, r3, #24
    3c66:	469c      	mov	ip, r3
    3c68:	4460      	add	r0, ip
    3c6a:	e7f2      	b.n	3c52 <__aeabi_f2uiz+0x16>

00003c6c <__aeabi_d2uiz>:
    3c6c:	b570      	push	{r4, r5, r6, lr}
    3c6e:	2200      	movs	r2, #0
    3c70:	4b0c      	ldr	r3, [pc, #48]	; (3ca4 <__aeabi_d2uiz+0x38>)
    3c72:	0004      	movs	r4, r0
    3c74:	000d      	movs	r5, r1
    3c76:	f7ff ffab 	bl	3bd0 <__aeabi_dcmpge>
    3c7a:	2800      	cmp	r0, #0
    3c7c:	d104      	bne.n	3c88 <__aeabi_d2uiz+0x1c>
    3c7e:	0020      	movs	r0, r4
    3c80:	0029      	movs	r1, r5
    3c82:	f002 f853 	bl	5d2c <__aeabi_d2iz>
    3c86:	bd70      	pop	{r4, r5, r6, pc}
    3c88:	4b06      	ldr	r3, [pc, #24]	; (3ca4 <__aeabi_d2uiz+0x38>)
    3c8a:	2200      	movs	r2, #0
    3c8c:	0020      	movs	r0, r4
    3c8e:	0029      	movs	r1, r5
    3c90:	f001 fcd8 	bl	5644 <__aeabi_dsub>
    3c94:	f002 f84a 	bl	5d2c <__aeabi_d2iz>
    3c98:	2380      	movs	r3, #128	; 0x80
    3c9a:	061b      	lsls	r3, r3, #24
    3c9c:	469c      	mov	ip, r3
    3c9e:	4460      	add	r0, ip
    3ca0:	e7f1      	b.n	3c86 <__aeabi_d2uiz+0x1a>
    3ca2:	46c0      	nop			; (mov r8, r8)
    3ca4:	41e00000 	.word	0x41e00000

00003ca8 <__aeabi_fmul>:
    3ca8:	b5f0      	push	{r4, r5, r6, r7, lr}
    3caa:	4657      	mov	r7, sl
    3cac:	464e      	mov	r6, r9
    3cae:	4645      	mov	r5, r8
    3cb0:	0043      	lsls	r3, r0, #1
    3cb2:	b4e0      	push	{r5, r6, r7}
    3cb4:	0246      	lsls	r6, r0, #9
    3cb6:	4688      	mov	r8, r1
    3cb8:	0a76      	lsrs	r6, r6, #9
    3cba:	0e1f      	lsrs	r7, r3, #24
    3cbc:	0fc4      	lsrs	r4, r0, #31
    3cbe:	2f00      	cmp	r7, #0
    3cc0:	d047      	beq.n	3d52 <__aeabi_fmul+0xaa>
    3cc2:	2fff      	cmp	r7, #255	; 0xff
    3cc4:	d025      	beq.n	3d12 <__aeabi_fmul+0x6a>
    3cc6:	2300      	movs	r3, #0
    3cc8:	2580      	movs	r5, #128	; 0x80
    3cca:	469a      	mov	sl, r3
    3ccc:	4699      	mov	r9, r3
    3cce:	00f6      	lsls	r6, r6, #3
    3cd0:	04ed      	lsls	r5, r5, #19
    3cd2:	432e      	orrs	r6, r5
    3cd4:	3f7f      	subs	r7, #127	; 0x7f
    3cd6:	4643      	mov	r3, r8
    3cd8:	4642      	mov	r2, r8
    3cda:	025d      	lsls	r5, r3, #9
    3cdc:	0fd2      	lsrs	r2, r2, #31
    3cde:	005b      	lsls	r3, r3, #1
    3ce0:	0a6d      	lsrs	r5, r5, #9
    3ce2:	0e1b      	lsrs	r3, r3, #24
    3ce4:	4690      	mov	r8, r2
    3ce6:	d040      	beq.n	3d6a <__aeabi_fmul+0xc2>
    3ce8:	2bff      	cmp	r3, #255	; 0xff
    3cea:	d039      	beq.n	3d60 <__aeabi_fmul+0xb8>
    3cec:	2280      	movs	r2, #128	; 0x80
    3cee:	2000      	movs	r0, #0
    3cf0:	00ed      	lsls	r5, r5, #3
    3cf2:	04d2      	lsls	r2, r2, #19
    3cf4:	4315      	orrs	r5, r2
    3cf6:	3b7f      	subs	r3, #127	; 0x7f
    3cf8:	18fb      	adds	r3, r7, r3
    3cfa:	4642      	mov	r2, r8
    3cfc:	4657      	mov	r7, sl
    3cfe:	1c59      	adds	r1, r3, #1
    3d00:	4062      	eors	r2, r4
    3d02:	468c      	mov	ip, r1
    3d04:	4307      	orrs	r7, r0
    3d06:	2f0f      	cmp	r7, #15
    3d08:	d85c      	bhi.n	3dc4 <__aeabi_fmul+0x11c>
    3d0a:	496f      	ldr	r1, [pc, #444]	; (3ec8 <__aeabi_fmul+0x220>)
    3d0c:	00bf      	lsls	r7, r7, #2
    3d0e:	59c9      	ldr	r1, [r1, r7]
    3d10:	468f      	mov	pc, r1
    3d12:	2e00      	cmp	r6, #0
    3d14:	d145      	bne.n	3da2 <__aeabi_fmul+0xfa>
    3d16:	2308      	movs	r3, #8
    3d18:	469a      	mov	sl, r3
    3d1a:	3b06      	subs	r3, #6
    3d1c:	4699      	mov	r9, r3
    3d1e:	e7da      	b.n	3cd6 <__aeabi_fmul+0x2e>
    3d20:	4642      	mov	r2, r8
    3d22:	2802      	cmp	r0, #2
    3d24:	d02d      	beq.n	3d82 <__aeabi_fmul+0xda>
    3d26:	2803      	cmp	r0, #3
    3d28:	d100      	bne.n	3d2c <__aeabi_fmul+0x84>
    3d2a:	e0c3      	b.n	3eb4 <__aeabi_fmul+0x20c>
    3d2c:	2801      	cmp	r0, #1
    3d2e:	d000      	beq.n	3d32 <__aeabi_fmul+0x8a>
    3d30:	e0a2      	b.n	3e78 <__aeabi_fmul+0x1d0>
    3d32:	2500      	movs	r5, #0
    3d34:	2600      	movs	r6, #0
    3d36:	4002      	ands	r2, r0
    3d38:	b2d4      	uxtb	r4, r2
    3d3a:	0276      	lsls	r6, r6, #9
    3d3c:	05ed      	lsls	r5, r5, #23
    3d3e:	0a76      	lsrs	r6, r6, #9
    3d40:	432e      	orrs	r6, r5
    3d42:	07e4      	lsls	r4, r4, #31
    3d44:	4326      	orrs	r6, r4
    3d46:	0030      	movs	r0, r6
    3d48:	bc1c      	pop	{r2, r3, r4}
    3d4a:	4690      	mov	r8, r2
    3d4c:	4699      	mov	r9, r3
    3d4e:	46a2      	mov	sl, r4
    3d50:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3d52:	2e00      	cmp	r6, #0
    3d54:	d11a      	bne.n	3d8c <__aeabi_fmul+0xe4>
    3d56:	2304      	movs	r3, #4
    3d58:	469a      	mov	sl, r3
    3d5a:	3b03      	subs	r3, #3
    3d5c:	4699      	mov	r9, r3
    3d5e:	e7ba      	b.n	3cd6 <__aeabi_fmul+0x2e>
    3d60:	002a      	movs	r2, r5
    3d62:	1e51      	subs	r1, r2, #1
    3d64:	418a      	sbcs	r2, r1
    3d66:	1c90      	adds	r0, r2, #2
    3d68:	e7c6      	b.n	3cf8 <__aeabi_fmul+0x50>
    3d6a:	2001      	movs	r0, #1
    3d6c:	2d00      	cmp	r5, #0
    3d6e:	d0c3      	beq.n	3cf8 <__aeabi_fmul+0x50>
    3d70:	0028      	movs	r0, r5
    3d72:	f002 fa31 	bl	61d8 <__clzsi2>
    3d76:	1f43      	subs	r3, r0, #5
    3d78:	3076      	adds	r0, #118	; 0x76
    3d7a:	409d      	lsls	r5, r3
    3d7c:	4243      	negs	r3, r0
    3d7e:	2000      	movs	r0, #0
    3d80:	e7ba      	b.n	3cf8 <__aeabi_fmul+0x50>
    3d82:	2401      	movs	r4, #1
    3d84:	25ff      	movs	r5, #255	; 0xff
    3d86:	4014      	ands	r4, r2
    3d88:	2600      	movs	r6, #0
    3d8a:	e7d6      	b.n	3d3a <__aeabi_fmul+0x92>
    3d8c:	0030      	movs	r0, r6
    3d8e:	f002 fa23 	bl	61d8 <__clzsi2>
    3d92:	1f43      	subs	r3, r0, #5
    3d94:	409e      	lsls	r6, r3
    3d96:	2300      	movs	r3, #0
    3d98:	3076      	adds	r0, #118	; 0x76
    3d9a:	4247      	negs	r7, r0
    3d9c:	469a      	mov	sl, r3
    3d9e:	4699      	mov	r9, r3
    3da0:	e799      	b.n	3cd6 <__aeabi_fmul+0x2e>
    3da2:	230c      	movs	r3, #12
    3da4:	469a      	mov	sl, r3
    3da6:	3b09      	subs	r3, #9
    3da8:	4699      	mov	r9, r3
    3daa:	e794      	b.n	3cd6 <__aeabi_fmul+0x2e>
    3dac:	2680      	movs	r6, #128	; 0x80
    3dae:	2400      	movs	r4, #0
    3db0:	03f6      	lsls	r6, r6, #15
    3db2:	25ff      	movs	r5, #255	; 0xff
    3db4:	e7c1      	b.n	3d3a <__aeabi_fmul+0x92>
    3db6:	0035      	movs	r5, r6
    3db8:	4648      	mov	r0, r9
    3dba:	e7b2      	b.n	3d22 <__aeabi_fmul+0x7a>
    3dbc:	0035      	movs	r5, r6
    3dbe:	0022      	movs	r2, r4
    3dc0:	4648      	mov	r0, r9
    3dc2:	e7ae      	b.n	3d22 <__aeabi_fmul+0x7a>
    3dc4:	0429      	lsls	r1, r5, #16
    3dc6:	0c09      	lsrs	r1, r1, #16
    3dc8:	0008      	movs	r0, r1
    3dca:	0c37      	lsrs	r7, r6, #16
    3dcc:	0436      	lsls	r6, r6, #16
    3dce:	0c36      	lsrs	r6, r6, #16
    3dd0:	0c2c      	lsrs	r4, r5, #16
    3dd2:	4379      	muls	r1, r7
    3dd4:	4370      	muls	r0, r6
    3dd6:	4367      	muls	r7, r4
    3dd8:	4374      	muls	r4, r6
    3dda:	0c06      	lsrs	r6, r0, #16
    3ddc:	1864      	adds	r4, r4, r1
    3dde:	1936      	adds	r6, r6, r4
    3de0:	42b1      	cmp	r1, r6
    3de2:	d903      	bls.n	3dec <__aeabi_fmul+0x144>
    3de4:	2180      	movs	r1, #128	; 0x80
    3de6:	0249      	lsls	r1, r1, #9
    3de8:	4688      	mov	r8, r1
    3dea:	4447      	add	r7, r8
    3dec:	0400      	lsls	r0, r0, #16
    3dee:	0c00      	lsrs	r0, r0, #16
    3df0:	0431      	lsls	r1, r6, #16
    3df2:	1809      	adds	r1, r1, r0
    3df4:	018d      	lsls	r5, r1, #6
    3df6:	1e68      	subs	r0, r5, #1
    3df8:	4185      	sbcs	r5, r0
    3dfa:	0e89      	lsrs	r1, r1, #26
    3dfc:	4329      	orrs	r1, r5
    3dfe:	0c35      	lsrs	r5, r6, #16
    3e00:	19ed      	adds	r5, r5, r7
    3e02:	01ad      	lsls	r5, r5, #6
    3e04:	430d      	orrs	r5, r1
    3e06:	0129      	lsls	r1, r5, #4
    3e08:	d504      	bpl.n	3e14 <__aeabi_fmul+0x16c>
    3e0a:	2301      	movs	r3, #1
    3e0c:	0869      	lsrs	r1, r5, #1
    3e0e:	401d      	ands	r5, r3
    3e10:	4663      	mov	r3, ip
    3e12:	430d      	orrs	r5, r1
    3e14:	0019      	movs	r1, r3
    3e16:	317f      	adds	r1, #127	; 0x7f
    3e18:	2900      	cmp	r1, #0
    3e1a:	dd25      	ble.n	3e68 <__aeabi_fmul+0x1c0>
    3e1c:	0768      	lsls	r0, r5, #29
    3e1e:	d004      	beq.n	3e2a <__aeabi_fmul+0x182>
    3e20:	200f      	movs	r0, #15
    3e22:	4028      	ands	r0, r5
    3e24:	2804      	cmp	r0, #4
    3e26:	d000      	beq.n	3e2a <__aeabi_fmul+0x182>
    3e28:	3504      	adds	r5, #4
    3e2a:	0128      	lsls	r0, r5, #4
    3e2c:	d503      	bpl.n	3e36 <__aeabi_fmul+0x18e>
    3e2e:	4927      	ldr	r1, [pc, #156]	; (3ecc <__aeabi_fmul+0x224>)
    3e30:	3380      	adds	r3, #128	; 0x80
    3e32:	400d      	ands	r5, r1
    3e34:	0019      	movs	r1, r3
    3e36:	29fe      	cmp	r1, #254	; 0xfe
    3e38:	dca3      	bgt.n	3d82 <__aeabi_fmul+0xda>
    3e3a:	2401      	movs	r4, #1
    3e3c:	01ad      	lsls	r5, r5, #6
    3e3e:	0a6e      	lsrs	r6, r5, #9
    3e40:	4014      	ands	r4, r2
    3e42:	b2cd      	uxtb	r5, r1
    3e44:	e779      	b.n	3d3a <__aeabi_fmul+0x92>
    3e46:	2080      	movs	r0, #128	; 0x80
    3e48:	03c0      	lsls	r0, r0, #15
    3e4a:	4206      	tst	r6, r0
    3e4c:	d007      	beq.n	3e5e <__aeabi_fmul+0x1b6>
    3e4e:	4205      	tst	r5, r0
    3e50:	d105      	bne.n	3e5e <__aeabi_fmul+0x1b6>
    3e52:	4328      	orrs	r0, r5
    3e54:	0246      	lsls	r6, r0, #9
    3e56:	0a76      	lsrs	r6, r6, #9
    3e58:	4644      	mov	r4, r8
    3e5a:	25ff      	movs	r5, #255	; 0xff
    3e5c:	e76d      	b.n	3d3a <__aeabi_fmul+0x92>
    3e5e:	4306      	orrs	r6, r0
    3e60:	0276      	lsls	r6, r6, #9
    3e62:	0a76      	lsrs	r6, r6, #9
    3e64:	25ff      	movs	r5, #255	; 0xff
    3e66:	e768      	b.n	3d3a <__aeabi_fmul+0x92>
    3e68:	2401      	movs	r4, #1
    3e6a:	1a61      	subs	r1, r4, r1
    3e6c:	291b      	cmp	r1, #27
    3e6e:	dd05      	ble.n	3e7c <__aeabi_fmul+0x1d4>
    3e70:	4014      	ands	r4, r2
    3e72:	2500      	movs	r5, #0
    3e74:	2600      	movs	r6, #0
    3e76:	e760      	b.n	3d3a <__aeabi_fmul+0x92>
    3e78:	4663      	mov	r3, ip
    3e7a:	e7cb      	b.n	3e14 <__aeabi_fmul+0x16c>
    3e7c:	002e      	movs	r6, r5
    3e7e:	2320      	movs	r3, #32
    3e80:	40ce      	lsrs	r6, r1
    3e82:	1a59      	subs	r1, r3, r1
    3e84:	408d      	lsls	r5, r1
    3e86:	1e6b      	subs	r3, r5, #1
    3e88:	419d      	sbcs	r5, r3
    3e8a:	432e      	orrs	r6, r5
    3e8c:	0773      	lsls	r3, r6, #29
    3e8e:	d004      	beq.n	3e9a <__aeabi_fmul+0x1f2>
    3e90:	230f      	movs	r3, #15
    3e92:	4033      	ands	r3, r6
    3e94:	2b04      	cmp	r3, #4
    3e96:	d000      	beq.n	3e9a <__aeabi_fmul+0x1f2>
    3e98:	3604      	adds	r6, #4
    3e9a:	0173      	lsls	r3, r6, #5
    3e9c:	d504      	bpl.n	3ea8 <__aeabi_fmul+0x200>
    3e9e:	2401      	movs	r4, #1
    3ea0:	2501      	movs	r5, #1
    3ea2:	4014      	ands	r4, r2
    3ea4:	2600      	movs	r6, #0
    3ea6:	e748      	b.n	3d3a <__aeabi_fmul+0x92>
    3ea8:	2401      	movs	r4, #1
    3eaa:	01b6      	lsls	r6, r6, #6
    3eac:	0a76      	lsrs	r6, r6, #9
    3eae:	4014      	ands	r4, r2
    3eb0:	2500      	movs	r5, #0
    3eb2:	e742      	b.n	3d3a <__aeabi_fmul+0x92>
    3eb4:	2680      	movs	r6, #128	; 0x80
    3eb6:	2401      	movs	r4, #1
    3eb8:	03f6      	lsls	r6, r6, #15
    3eba:	432e      	orrs	r6, r5
    3ebc:	0276      	lsls	r6, r6, #9
    3ebe:	0a76      	lsrs	r6, r6, #9
    3ec0:	4014      	ands	r4, r2
    3ec2:	25ff      	movs	r5, #255	; 0xff
    3ec4:	e739      	b.n	3d3a <__aeabi_fmul+0x92>
    3ec6:	46c0      	nop			; (mov r8, r8)
    3ec8:	00006530 	.word	0x00006530
    3ecc:	f7ffffff 	.word	0xf7ffffff

00003ed0 <__aeabi_fsub>:
    3ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3ed2:	024a      	lsls	r2, r1, #9
    3ed4:	004e      	lsls	r6, r1, #1
    3ed6:	0243      	lsls	r3, r0, #9
    3ed8:	0044      	lsls	r4, r0, #1
    3eda:	0e24      	lsrs	r4, r4, #24
    3edc:	0fc5      	lsrs	r5, r0, #31
    3ede:	099b      	lsrs	r3, r3, #6
    3ee0:	0e36      	lsrs	r6, r6, #24
    3ee2:	0fc9      	lsrs	r1, r1, #31
    3ee4:	0992      	lsrs	r2, r2, #6
    3ee6:	2eff      	cmp	r6, #255	; 0xff
    3ee8:	d100      	bne.n	3eec <__aeabi_fsub+0x1c>
    3eea:	e083      	b.n	3ff4 <__aeabi_fsub+0x124>
    3eec:	2001      	movs	r0, #1
    3eee:	4041      	eors	r1, r0
    3ef0:	1ba0      	subs	r0, r4, r6
    3ef2:	42a9      	cmp	r1, r5
    3ef4:	d05c      	beq.n	3fb0 <__aeabi_fsub+0xe0>
    3ef6:	2800      	cmp	r0, #0
    3ef8:	dc00      	bgt.n	3efc <__aeabi_fsub+0x2c>
    3efa:	e095      	b.n	4028 <__aeabi_fsub+0x158>
    3efc:	2e00      	cmp	r6, #0
    3efe:	d11c      	bne.n	3f3a <__aeabi_fsub+0x6a>
    3f00:	2a00      	cmp	r2, #0
    3f02:	d000      	beq.n	3f06 <__aeabi_fsub+0x36>
    3f04:	e081      	b.n	400a <__aeabi_fsub+0x13a>
    3f06:	075a      	lsls	r2, r3, #29
    3f08:	d004      	beq.n	3f14 <__aeabi_fsub+0x44>
    3f0a:	220f      	movs	r2, #15
    3f0c:	401a      	ands	r2, r3
    3f0e:	2a04      	cmp	r2, #4
    3f10:	d000      	beq.n	3f14 <__aeabi_fsub+0x44>
    3f12:	3304      	adds	r3, #4
    3f14:	015a      	lsls	r2, r3, #5
    3f16:	d53b      	bpl.n	3f90 <__aeabi_fsub+0xc0>
    3f18:	3401      	adds	r4, #1
    3f1a:	2cff      	cmp	r4, #255	; 0xff
    3f1c:	d100      	bne.n	3f20 <__aeabi_fsub+0x50>
    3f1e:	e091      	b.n	4044 <__aeabi_fsub+0x174>
    3f20:	2001      	movs	r0, #1
    3f22:	019b      	lsls	r3, r3, #6
    3f24:	0a5b      	lsrs	r3, r3, #9
    3f26:	b2e4      	uxtb	r4, r4
    3f28:	4005      	ands	r5, r0
    3f2a:	025b      	lsls	r3, r3, #9
    3f2c:	05e4      	lsls	r4, r4, #23
    3f2e:	0a5b      	lsrs	r3, r3, #9
    3f30:	07ed      	lsls	r5, r5, #31
    3f32:	4323      	orrs	r3, r4
    3f34:	432b      	orrs	r3, r5
    3f36:	0018      	movs	r0, r3
    3f38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3f3a:	2cff      	cmp	r4, #255	; 0xff
    3f3c:	d0e3      	beq.n	3f06 <__aeabi_fsub+0x36>
    3f3e:	2180      	movs	r1, #128	; 0x80
    3f40:	04c9      	lsls	r1, r1, #19
    3f42:	430a      	orrs	r2, r1
    3f44:	281b      	cmp	r0, #27
    3f46:	dd00      	ble.n	3f4a <__aeabi_fsub+0x7a>
    3f48:	e090      	b.n	406c <__aeabi_fsub+0x19c>
    3f4a:	0016      	movs	r6, r2
    3f4c:	2120      	movs	r1, #32
    3f4e:	40c6      	lsrs	r6, r0
    3f50:	1a08      	subs	r0, r1, r0
    3f52:	4082      	lsls	r2, r0
    3f54:	1e51      	subs	r1, r2, #1
    3f56:	418a      	sbcs	r2, r1
    3f58:	4332      	orrs	r2, r6
    3f5a:	1a9b      	subs	r3, r3, r2
    3f5c:	015a      	lsls	r2, r3, #5
    3f5e:	d515      	bpl.n	3f8c <__aeabi_fsub+0xbc>
    3f60:	019b      	lsls	r3, r3, #6
    3f62:	099e      	lsrs	r6, r3, #6
    3f64:	0030      	movs	r0, r6
    3f66:	f002 f937 	bl	61d8 <__clzsi2>
    3f6a:	3805      	subs	r0, #5
    3f6c:	4086      	lsls	r6, r0
    3f6e:	4284      	cmp	r4, r0
    3f70:	dc6c      	bgt.n	404c <__aeabi_fsub+0x17c>
    3f72:	1b04      	subs	r4, r0, r4
    3f74:	0033      	movs	r3, r6
    3f76:	2020      	movs	r0, #32
    3f78:	3401      	adds	r4, #1
    3f7a:	40e3      	lsrs	r3, r4
    3f7c:	1b04      	subs	r4, r0, r4
    3f7e:	40a6      	lsls	r6, r4
    3f80:	1e72      	subs	r2, r6, #1
    3f82:	4196      	sbcs	r6, r2
    3f84:	2400      	movs	r4, #0
    3f86:	4333      	orrs	r3, r6
    3f88:	e7bd      	b.n	3f06 <__aeabi_fsub+0x36>
    3f8a:	000d      	movs	r5, r1
    3f8c:	075a      	lsls	r2, r3, #29
    3f8e:	d1bc      	bne.n	3f0a <__aeabi_fsub+0x3a>
    3f90:	08df      	lsrs	r7, r3, #3
    3f92:	2301      	movs	r3, #1
    3f94:	401d      	ands	r5, r3
    3f96:	2cff      	cmp	r4, #255	; 0xff
    3f98:	d133      	bne.n	4002 <__aeabi_fsub+0x132>
    3f9a:	2f00      	cmp	r7, #0
    3f9c:	d100      	bne.n	3fa0 <__aeabi_fsub+0xd0>
    3f9e:	e090      	b.n	40c2 <__aeabi_fsub+0x1f2>
    3fa0:	2280      	movs	r2, #128	; 0x80
    3fa2:	03d2      	lsls	r2, r2, #15
    3fa4:	0013      	movs	r3, r2
    3fa6:	433b      	orrs	r3, r7
    3fa8:	025b      	lsls	r3, r3, #9
    3faa:	0a5b      	lsrs	r3, r3, #9
    3fac:	24ff      	movs	r4, #255	; 0xff
    3fae:	e7bc      	b.n	3f2a <__aeabi_fsub+0x5a>
    3fb0:	2800      	cmp	r0, #0
    3fb2:	dd4f      	ble.n	4054 <__aeabi_fsub+0x184>
    3fb4:	2e00      	cmp	r6, #0
    3fb6:	d02e      	beq.n	4016 <__aeabi_fsub+0x146>
    3fb8:	2cff      	cmp	r4, #255	; 0xff
    3fba:	d0a4      	beq.n	3f06 <__aeabi_fsub+0x36>
    3fbc:	2580      	movs	r5, #128	; 0x80
    3fbe:	04ed      	lsls	r5, r5, #19
    3fc0:	432a      	orrs	r2, r5
    3fc2:	281b      	cmp	r0, #27
    3fc4:	dd00      	ble.n	3fc8 <__aeabi_fsub+0xf8>
    3fc6:	e097      	b.n	40f8 <__aeabi_fsub+0x228>
    3fc8:	0016      	movs	r6, r2
    3fca:	2520      	movs	r5, #32
    3fcc:	40c6      	lsrs	r6, r0
    3fce:	1a28      	subs	r0, r5, r0
    3fd0:	4082      	lsls	r2, r0
    3fd2:	1e50      	subs	r0, r2, #1
    3fd4:	4182      	sbcs	r2, r0
    3fd6:	4332      	orrs	r2, r6
    3fd8:	189b      	adds	r3, r3, r2
    3fda:	015a      	lsls	r2, r3, #5
    3fdc:	d5d5      	bpl.n	3f8a <__aeabi_fsub+0xba>
    3fde:	3401      	adds	r4, #1
    3fe0:	2cff      	cmp	r4, #255	; 0xff
    3fe2:	d06d      	beq.n	40c0 <__aeabi_fsub+0x1f0>
    3fe4:	2201      	movs	r2, #1
    3fe6:	487b      	ldr	r0, [pc, #492]	; (41d4 <__aeabi_fsub+0x304>)
    3fe8:	401a      	ands	r2, r3
    3fea:	085b      	lsrs	r3, r3, #1
    3fec:	4003      	ands	r3, r0
    3fee:	4313      	orrs	r3, r2
    3ff0:	000d      	movs	r5, r1
    3ff2:	e788      	b.n	3f06 <__aeabi_fsub+0x36>
    3ff4:	2a00      	cmp	r2, #0
    3ff6:	d000      	beq.n	3ffa <__aeabi_fsub+0x12a>
    3ff8:	e77a      	b.n	3ef0 <__aeabi_fsub+0x20>
    3ffa:	e777      	b.n	3eec <__aeabi_fsub+0x1c>
    3ffc:	1e03      	subs	r3, r0, #0
    3ffe:	d1c5      	bne.n	3f8c <__aeabi_fsub+0xbc>
    4000:	2500      	movs	r5, #0
    4002:	027b      	lsls	r3, r7, #9
    4004:	0a5b      	lsrs	r3, r3, #9
    4006:	b2e4      	uxtb	r4, r4
    4008:	e78f      	b.n	3f2a <__aeabi_fsub+0x5a>
    400a:	3801      	subs	r0, #1
    400c:	2800      	cmp	r0, #0
    400e:	d0a4      	beq.n	3f5a <__aeabi_fsub+0x8a>
    4010:	2cff      	cmp	r4, #255	; 0xff
    4012:	d197      	bne.n	3f44 <__aeabi_fsub+0x74>
    4014:	e777      	b.n	3f06 <__aeabi_fsub+0x36>
    4016:	2a00      	cmp	r2, #0
    4018:	d100      	bne.n	401c <__aeabi_fsub+0x14c>
    401a:	e774      	b.n	3f06 <__aeabi_fsub+0x36>
    401c:	3801      	subs	r0, #1
    401e:	2800      	cmp	r0, #0
    4020:	d0da      	beq.n	3fd8 <__aeabi_fsub+0x108>
    4022:	2cff      	cmp	r4, #255	; 0xff
    4024:	d1cd      	bne.n	3fc2 <__aeabi_fsub+0xf2>
    4026:	e76e      	b.n	3f06 <__aeabi_fsub+0x36>
    4028:	2800      	cmp	r0, #0
    402a:	d121      	bne.n	4070 <__aeabi_fsub+0x1a0>
    402c:	1c60      	adds	r0, r4, #1
    402e:	b2c0      	uxtb	r0, r0
    4030:	2801      	cmp	r0, #1
    4032:	dd58      	ble.n	40e6 <__aeabi_fsub+0x216>
    4034:	2780      	movs	r7, #128	; 0x80
    4036:	1a9e      	subs	r6, r3, r2
    4038:	04ff      	lsls	r7, r7, #19
    403a:	4037      	ands	r7, r6
    403c:	d02f      	beq.n	409e <__aeabi_fsub+0x1ce>
    403e:	1ad6      	subs	r6, r2, r3
    4040:	000d      	movs	r5, r1
    4042:	e78f      	b.n	3f64 <__aeabi_fsub+0x94>
    4044:	2301      	movs	r3, #1
    4046:	401d      	ands	r5, r3
    4048:	2300      	movs	r3, #0
    404a:	e76e      	b.n	3f2a <__aeabi_fsub+0x5a>
    404c:	4b62      	ldr	r3, [pc, #392]	; (41d8 <__aeabi_fsub+0x308>)
    404e:	1a24      	subs	r4, r4, r0
    4050:	4033      	ands	r3, r6
    4052:	e758      	b.n	3f06 <__aeabi_fsub+0x36>
    4054:	2800      	cmp	r0, #0
    4056:	d151      	bne.n	40fc <__aeabi_fsub+0x22c>
    4058:	1c60      	adds	r0, r4, #1
    405a:	b2c6      	uxtb	r6, r0
    405c:	2e01      	cmp	r6, #1
    405e:	dd33      	ble.n	40c8 <__aeabi_fsub+0x1f8>
    4060:	28ff      	cmp	r0, #255	; 0xff
    4062:	d02d      	beq.n	40c0 <__aeabi_fsub+0x1f0>
    4064:	189b      	adds	r3, r3, r2
    4066:	085b      	lsrs	r3, r3, #1
    4068:	0004      	movs	r4, r0
    406a:	e74c      	b.n	3f06 <__aeabi_fsub+0x36>
    406c:	2201      	movs	r2, #1
    406e:	e774      	b.n	3f5a <__aeabi_fsub+0x8a>
    4070:	2c00      	cmp	r4, #0
    4072:	d01a      	beq.n	40aa <__aeabi_fsub+0x1da>
    4074:	2eff      	cmp	r6, #255	; 0xff
    4076:	d01f      	beq.n	40b8 <__aeabi_fsub+0x1e8>
    4078:	2480      	movs	r4, #128	; 0x80
    407a:	04e4      	lsls	r4, r4, #19
    407c:	4240      	negs	r0, r0
    407e:	4323      	orrs	r3, r4
    4080:	281b      	cmp	r0, #27
    4082:	dd00      	ble.n	4086 <__aeabi_fsub+0x1b6>
    4084:	e096      	b.n	41b4 <__aeabi_fsub+0x2e4>
    4086:	001d      	movs	r5, r3
    4088:	2420      	movs	r4, #32
    408a:	40c5      	lsrs	r5, r0
    408c:	1a20      	subs	r0, r4, r0
    408e:	4083      	lsls	r3, r0
    4090:	1e58      	subs	r0, r3, #1
    4092:	4183      	sbcs	r3, r0
    4094:	432b      	orrs	r3, r5
    4096:	1ad3      	subs	r3, r2, r3
    4098:	0034      	movs	r4, r6
    409a:	000d      	movs	r5, r1
    409c:	e75e      	b.n	3f5c <__aeabi_fsub+0x8c>
    409e:	2e00      	cmp	r6, #0
    40a0:	d000      	beq.n	40a4 <__aeabi_fsub+0x1d4>
    40a2:	e75f      	b.n	3f64 <__aeabi_fsub+0x94>
    40a4:	2500      	movs	r5, #0
    40a6:	2400      	movs	r4, #0
    40a8:	e7ab      	b.n	4002 <__aeabi_fsub+0x132>
    40aa:	2b00      	cmp	r3, #0
    40ac:	d044      	beq.n	4138 <__aeabi_fsub+0x268>
    40ae:	43c0      	mvns	r0, r0
    40b0:	2800      	cmp	r0, #0
    40b2:	d0f0      	beq.n	4096 <__aeabi_fsub+0x1c6>
    40b4:	2eff      	cmp	r6, #255	; 0xff
    40b6:	d1e3      	bne.n	4080 <__aeabi_fsub+0x1b0>
    40b8:	0013      	movs	r3, r2
    40ba:	24ff      	movs	r4, #255	; 0xff
    40bc:	000d      	movs	r5, r1
    40be:	e722      	b.n	3f06 <__aeabi_fsub+0x36>
    40c0:	000d      	movs	r5, r1
    40c2:	24ff      	movs	r4, #255	; 0xff
    40c4:	2300      	movs	r3, #0
    40c6:	e730      	b.n	3f2a <__aeabi_fsub+0x5a>
    40c8:	2c00      	cmp	r4, #0
    40ca:	d15d      	bne.n	4188 <__aeabi_fsub+0x2b8>
    40cc:	2b00      	cmp	r3, #0
    40ce:	d07d      	beq.n	41cc <__aeabi_fsub+0x2fc>
    40d0:	2a00      	cmp	r2, #0
    40d2:	d100      	bne.n	40d6 <__aeabi_fsub+0x206>
    40d4:	e717      	b.n	3f06 <__aeabi_fsub+0x36>
    40d6:	189b      	adds	r3, r3, r2
    40d8:	015a      	lsls	r2, r3, #5
    40da:	d400      	bmi.n	40de <__aeabi_fsub+0x20e>
    40dc:	e756      	b.n	3f8c <__aeabi_fsub+0xbc>
    40de:	4a3e      	ldr	r2, [pc, #248]	; (41d8 <__aeabi_fsub+0x308>)
    40e0:	0004      	movs	r4, r0
    40e2:	4013      	ands	r3, r2
    40e4:	e70f      	b.n	3f06 <__aeabi_fsub+0x36>
    40e6:	2c00      	cmp	r4, #0
    40e8:	d11e      	bne.n	4128 <__aeabi_fsub+0x258>
    40ea:	2b00      	cmp	r3, #0
    40ec:	d12f      	bne.n	414e <__aeabi_fsub+0x27e>
    40ee:	2a00      	cmp	r2, #0
    40f0:	d065      	beq.n	41be <__aeabi_fsub+0x2ee>
    40f2:	0013      	movs	r3, r2
    40f4:	000d      	movs	r5, r1
    40f6:	e706      	b.n	3f06 <__aeabi_fsub+0x36>
    40f8:	2201      	movs	r2, #1
    40fa:	e76d      	b.n	3fd8 <__aeabi_fsub+0x108>
    40fc:	2c00      	cmp	r4, #0
    40fe:	d11f      	bne.n	4140 <__aeabi_fsub+0x270>
    4100:	2b00      	cmp	r3, #0
    4102:	d059      	beq.n	41b8 <__aeabi_fsub+0x2e8>
    4104:	43c0      	mvns	r0, r0
    4106:	2800      	cmp	r0, #0
    4108:	d00b      	beq.n	4122 <__aeabi_fsub+0x252>
    410a:	2eff      	cmp	r6, #255	; 0xff
    410c:	d04f      	beq.n	41ae <__aeabi_fsub+0x2de>
    410e:	281b      	cmp	r0, #27
    4110:	dc5e      	bgt.n	41d0 <__aeabi_fsub+0x300>
    4112:	001d      	movs	r5, r3
    4114:	2420      	movs	r4, #32
    4116:	40c5      	lsrs	r5, r0
    4118:	1a20      	subs	r0, r4, r0
    411a:	4083      	lsls	r3, r0
    411c:	1e58      	subs	r0, r3, #1
    411e:	4183      	sbcs	r3, r0
    4120:	432b      	orrs	r3, r5
    4122:	189b      	adds	r3, r3, r2
    4124:	0034      	movs	r4, r6
    4126:	e758      	b.n	3fda <__aeabi_fsub+0x10a>
    4128:	2b00      	cmp	r3, #0
    412a:	d11c      	bne.n	4166 <__aeabi_fsub+0x296>
    412c:	2a00      	cmp	r2, #0
    412e:	d049      	beq.n	41c4 <__aeabi_fsub+0x2f4>
    4130:	0013      	movs	r3, r2
    4132:	000d      	movs	r5, r1
    4134:	24ff      	movs	r4, #255	; 0xff
    4136:	e6e6      	b.n	3f06 <__aeabi_fsub+0x36>
    4138:	0013      	movs	r3, r2
    413a:	0034      	movs	r4, r6
    413c:	000d      	movs	r5, r1
    413e:	e6e2      	b.n	3f06 <__aeabi_fsub+0x36>
    4140:	2eff      	cmp	r6, #255	; 0xff
    4142:	d034      	beq.n	41ae <__aeabi_fsub+0x2de>
    4144:	2480      	movs	r4, #128	; 0x80
    4146:	04e4      	lsls	r4, r4, #19
    4148:	4240      	negs	r0, r0
    414a:	4323      	orrs	r3, r4
    414c:	e7df      	b.n	410e <__aeabi_fsub+0x23e>
    414e:	2a00      	cmp	r2, #0
    4150:	d100      	bne.n	4154 <__aeabi_fsub+0x284>
    4152:	e6d8      	b.n	3f06 <__aeabi_fsub+0x36>
    4154:	2780      	movs	r7, #128	; 0x80
    4156:	1a98      	subs	r0, r3, r2
    4158:	04ff      	lsls	r7, r7, #19
    415a:	4007      	ands	r7, r0
    415c:	d100      	bne.n	4160 <__aeabi_fsub+0x290>
    415e:	e74d      	b.n	3ffc <__aeabi_fsub+0x12c>
    4160:	1ad3      	subs	r3, r2, r3
    4162:	000d      	movs	r5, r1
    4164:	e6cf      	b.n	3f06 <__aeabi_fsub+0x36>
    4166:	24ff      	movs	r4, #255	; 0xff
    4168:	2a00      	cmp	r2, #0
    416a:	d100      	bne.n	416e <__aeabi_fsub+0x29e>
    416c:	e6cb      	b.n	3f06 <__aeabi_fsub+0x36>
    416e:	2080      	movs	r0, #128	; 0x80
    4170:	08db      	lsrs	r3, r3, #3
    4172:	03c0      	lsls	r0, r0, #15
    4174:	4203      	tst	r3, r0
    4176:	d004      	beq.n	4182 <__aeabi_fsub+0x2b2>
    4178:	08d2      	lsrs	r2, r2, #3
    417a:	4202      	tst	r2, r0
    417c:	d101      	bne.n	4182 <__aeabi_fsub+0x2b2>
    417e:	0013      	movs	r3, r2
    4180:	000d      	movs	r5, r1
    4182:	00db      	lsls	r3, r3, #3
    4184:	24ff      	movs	r4, #255	; 0xff
    4186:	e6be      	b.n	3f06 <__aeabi_fsub+0x36>
    4188:	2b00      	cmp	r3, #0
    418a:	d010      	beq.n	41ae <__aeabi_fsub+0x2de>
    418c:	24ff      	movs	r4, #255	; 0xff
    418e:	2a00      	cmp	r2, #0
    4190:	d100      	bne.n	4194 <__aeabi_fsub+0x2c4>
    4192:	e6b8      	b.n	3f06 <__aeabi_fsub+0x36>
    4194:	2080      	movs	r0, #128	; 0x80
    4196:	08db      	lsrs	r3, r3, #3
    4198:	03c0      	lsls	r0, r0, #15
    419a:	4203      	tst	r3, r0
    419c:	d003      	beq.n	41a6 <__aeabi_fsub+0x2d6>
    419e:	08d2      	lsrs	r2, r2, #3
    41a0:	4202      	tst	r2, r0
    41a2:	d100      	bne.n	41a6 <__aeabi_fsub+0x2d6>
    41a4:	0013      	movs	r3, r2
    41a6:	00db      	lsls	r3, r3, #3
    41a8:	000d      	movs	r5, r1
    41aa:	24ff      	movs	r4, #255	; 0xff
    41ac:	e6ab      	b.n	3f06 <__aeabi_fsub+0x36>
    41ae:	0013      	movs	r3, r2
    41b0:	24ff      	movs	r4, #255	; 0xff
    41b2:	e6a8      	b.n	3f06 <__aeabi_fsub+0x36>
    41b4:	2301      	movs	r3, #1
    41b6:	e76e      	b.n	4096 <__aeabi_fsub+0x1c6>
    41b8:	0013      	movs	r3, r2
    41ba:	0034      	movs	r4, r6
    41bc:	e6a3      	b.n	3f06 <__aeabi_fsub+0x36>
    41be:	2700      	movs	r7, #0
    41c0:	2500      	movs	r5, #0
    41c2:	e71e      	b.n	4002 <__aeabi_fsub+0x132>
    41c4:	2780      	movs	r7, #128	; 0x80
    41c6:	2500      	movs	r5, #0
    41c8:	03ff      	lsls	r7, r7, #15
    41ca:	e6e9      	b.n	3fa0 <__aeabi_fsub+0xd0>
    41cc:	0013      	movs	r3, r2
    41ce:	e69a      	b.n	3f06 <__aeabi_fsub+0x36>
    41d0:	2301      	movs	r3, #1
    41d2:	e7a6      	b.n	4122 <__aeabi_fsub+0x252>
    41d4:	7dffffff 	.word	0x7dffffff
    41d8:	fbffffff 	.word	0xfbffffff

000041dc <__aeabi_f2iz>:
    41dc:	0243      	lsls	r3, r0, #9
    41de:	0a59      	lsrs	r1, r3, #9
    41e0:	0043      	lsls	r3, r0, #1
    41e2:	0fc2      	lsrs	r2, r0, #31
    41e4:	0e1b      	lsrs	r3, r3, #24
    41e6:	2000      	movs	r0, #0
    41e8:	2b7e      	cmp	r3, #126	; 0x7e
    41ea:	dd0e      	ble.n	420a <__aeabi_f2iz+0x2e>
    41ec:	2b9d      	cmp	r3, #157	; 0x9d
    41ee:	dc0d      	bgt.n	420c <__aeabi_f2iz+0x30>
    41f0:	2080      	movs	r0, #128	; 0x80
    41f2:	0400      	lsls	r0, r0, #16
    41f4:	4301      	orrs	r1, r0
    41f6:	2b95      	cmp	r3, #149	; 0x95
    41f8:	dc0b      	bgt.n	4212 <__aeabi_f2iz+0x36>
    41fa:	2096      	movs	r0, #150	; 0x96
    41fc:	1ac3      	subs	r3, r0, r3
    41fe:	40d9      	lsrs	r1, r3
    4200:	000b      	movs	r3, r1
    4202:	4258      	negs	r0, r3
    4204:	2a00      	cmp	r2, #0
    4206:	d100      	bne.n	420a <__aeabi_f2iz+0x2e>
    4208:	0018      	movs	r0, r3
    420a:	4770      	bx	lr
    420c:	4b03      	ldr	r3, [pc, #12]	; (421c <__aeabi_f2iz+0x40>)
    420e:	18d0      	adds	r0, r2, r3
    4210:	e7fb      	b.n	420a <__aeabi_f2iz+0x2e>
    4212:	3b96      	subs	r3, #150	; 0x96
    4214:	4099      	lsls	r1, r3
    4216:	000b      	movs	r3, r1
    4218:	e7f3      	b.n	4202 <__aeabi_f2iz+0x26>
    421a:	46c0      	nop			; (mov r8, r8)
    421c:	7fffffff 	.word	0x7fffffff

00004220 <__aeabi_i2f>:
    4220:	b570      	push	{r4, r5, r6, lr}
    4222:	2800      	cmp	r0, #0
    4224:	d030      	beq.n	4288 <__aeabi_i2f+0x68>
    4226:	17c3      	asrs	r3, r0, #31
    4228:	18c5      	adds	r5, r0, r3
    422a:	405d      	eors	r5, r3
    422c:	0fc4      	lsrs	r4, r0, #31
    422e:	0028      	movs	r0, r5
    4230:	f001 ffd2 	bl	61d8 <__clzsi2>
    4234:	239e      	movs	r3, #158	; 0x9e
    4236:	1a1b      	subs	r3, r3, r0
    4238:	2b96      	cmp	r3, #150	; 0x96
    423a:	dc0d      	bgt.n	4258 <__aeabi_i2f+0x38>
    423c:	2296      	movs	r2, #150	; 0x96
    423e:	1ad2      	subs	r2, r2, r3
    4240:	4095      	lsls	r5, r2
    4242:	026a      	lsls	r2, r5, #9
    4244:	0a52      	lsrs	r2, r2, #9
    4246:	b2d8      	uxtb	r0, r3
    4248:	0252      	lsls	r2, r2, #9
    424a:	05c0      	lsls	r0, r0, #23
    424c:	0a52      	lsrs	r2, r2, #9
    424e:	07e4      	lsls	r4, r4, #31
    4250:	4302      	orrs	r2, r0
    4252:	4322      	orrs	r2, r4
    4254:	0010      	movs	r0, r2
    4256:	bd70      	pop	{r4, r5, r6, pc}
    4258:	2b99      	cmp	r3, #153	; 0x99
    425a:	dc19      	bgt.n	4290 <__aeabi_i2f+0x70>
    425c:	2299      	movs	r2, #153	; 0x99
    425e:	1ad2      	subs	r2, r2, r3
    4260:	4095      	lsls	r5, r2
    4262:	4a12      	ldr	r2, [pc, #72]	; (42ac <__aeabi_i2f+0x8c>)
    4264:	402a      	ands	r2, r5
    4266:	0769      	lsls	r1, r5, #29
    4268:	d004      	beq.n	4274 <__aeabi_i2f+0x54>
    426a:	210f      	movs	r1, #15
    426c:	400d      	ands	r5, r1
    426e:	2d04      	cmp	r5, #4
    4270:	d000      	beq.n	4274 <__aeabi_i2f+0x54>
    4272:	3204      	adds	r2, #4
    4274:	0151      	lsls	r1, r2, #5
    4276:	d503      	bpl.n	4280 <__aeabi_i2f+0x60>
    4278:	4b0c      	ldr	r3, [pc, #48]	; (42ac <__aeabi_i2f+0x8c>)
    427a:	401a      	ands	r2, r3
    427c:	239f      	movs	r3, #159	; 0x9f
    427e:	1a1b      	subs	r3, r3, r0
    4280:	0192      	lsls	r2, r2, #6
    4282:	0a52      	lsrs	r2, r2, #9
    4284:	b2d8      	uxtb	r0, r3
    4286:	e7df      	b.n	4248 <__aeabi_i2f+0x28>
    4288:	2400      	movs	r4, #0
    428a:	2000      	movs	r0, #0
    428c:	2200      	movs	r2, #0
    428e:	e7db      	b.n	4248 <__aeabi_i2f+0x28>
    4290:	2205      	movs	r2, #5
    4292:	002e      	movs	r6, r5
    4294:	1a12      	subs	r2, r2, r0
    4296:	21b9      	movs	r1, #185	; 0xb9
    4298:	40d6      	lsrs	r6, r2
    429a:	002a      	movs	r2, r5
    429c:	1ac9      	subs	r1, r1, r3
    429e:	408a      	lsls	r2, r1
    42a0:	1e55      	subs	r5, r2, #1
    42a2:	41aa      	sbcs	r2, r5
    42a4:	0035      	movs	r5, r6
    42a6:	4315      	orrs	r5, r2
    42a8:	e7db      	b.n	4262 <__aeabi_i2f+0x42>
    42aa:	46c0      	nop			; (mov r8, r8)
    42ac:	fbffffff 	.word	0xfbffffff

000042b0 <__aeabi_dadd>:
    42b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    42b2:	4656      	mov	r6, sl
    42b4:	465f      	mov	r7, fp
    42b6:	464d      	mov	r5, r9
    42b8:	4644      	mov	r4, r8
    42ba:	b4f0      	push	{r4, r5, r6, r7}
    42bc:	000f      	movs	r7, r1
    42be:	0ffd      	lsrs	r5, r7, #31
    42c0:	46aa      	mov	sl, r5
    42c2:	0309      	lsls	r1, r1, #12
    42c4:	007c      	lsls	r4, r7, #1
    42c6:	002e      	movs	r6, r5
    42c8:	005f      	lsls	r7, r3, #1
    42ca:	0f45      	lsrs	r5, r0, #29
    42cc:	0a49      	lsrs	r1, r1, #9
    42ce:	0d7f      	lsrs	r7, r7, #21
    42d0:	4329      	orrs	r1, r5
    42d2:	00c5      	lsls	r5, r0, #3
    42d4:	0318      	lsls	r0, r3, #12
    42d6:	46bc      	mov	ip, r7
    42d8:	0a40      	lsrs	r0, r0, #9
    42da:	0f57      	lsrs	r7, r2, #29
    42dc:	0d64      	lsrs	r4, r4, #21
    42de:	0fdb      	lsrs	r3, r3, #31
    42e0:	4338      	orrs	r0, r7
    42e2:	00d2      	lsls	r2, r2, #3
    42e4:	459a      	cmp	sl, r3
    42e6:	d100      	bne.n	42ea <__aeabi_dadd+0x3a>
    42e8:	e0aa      	b.n	4440 <__aeabi_dadd+0x190>
    42ea:	4666      	mov	r6, ip
    42ec:	1ba6      	subs	r6, r4, r6
    42ee:	2e00      	cmp	r6, #0
    42f0:	dc00      	bgt.n	42f4 <__aeabi_dadd+0x44>
    42f2:	e0ff      	b.n	44f4 <__aeabi_dadd+0x244>
    42f4:	4663      	mov	r3, ip
    42f6:	2b00      	cmp	r3, #0
    42f8:	d139      	bne.n	436e <__aeabi_dadd+0xbe>
    42fa:	0003      	movs	r3, r0
    42fc:	4313      	orrs	r3, r2
    42fe:	d000      	beq.n	4302 <__aeabi_dadd+0x52>
    4300:	e0d9      	b.n	44b6 <__aeabi_dadd+0x206>
    4302:	076b      	lsls	r3, r5, #29
    4304:	d009      	beq.n	431a <__aeabi_dadd+0x6a>
    4306:	230f      	movs	r3, #15
    4308:	402b      	ands	r3, r5
    430a:	2b04      	cmp	r3, #4
    430c:	d005      	beq.n	431a <__aeabi_dadd+0x6a>
    430e:	1d2b      	adds	r3, r5, #4
    4310:	42ab      	cmp	r3, r5
    4312:	41ad      	sbcs	r5, r5
    4314:	426d      	negs	r5, r5
    4316:	1949      	adds	r1, r1, r5
    4318:	001d      	movs	r5, r3
    431a:	020b      	lsls	r3, r1, #8
    431c:	d400      	bmi.n	4320 <__aeabi_dadd+0x70>
    431e:	e082      	b.n	4426 <__aeabi_dadd+0x176>
    4320:	4bca      	ldr	r3, [pc, #808]	; (464c <__aeabi_dadd+0x39c>)
    4322:	3401      	adds	r4, #1
    4324:	429c      	cmp	r4, r3
    4326:	d100      	bne.n	432a <__aeabi_dadd+0x7a>
    4328:	e0fe      	b.n	4528 <__aeabi_dadd+0x278>
    432a:	000a      	movs	r2, r1
    432c:	4656      	mov	r6, sl
    432e:	4bc8      	ldr	r3, [pc, #800]	; (4650 <__aeabi_dadd+0x3a0>)
    4330:	08ed      	lsrs	r5, r5, #3
    4332:	401a      	ands	r2, r3
    4334:	0750      	lsls	r0, r2, #29
    4336:	0564      	lsls	r4, r4, #21
    4338:	0252      	lsls	r2, r2, #9
    433a:	4305      	orrs	r5, r0
    433c:	0b12      	lsrs	r2, r2, #12
    433e:	0d64      	lsrs	r4, r4, #21
    4340:	2100      	movs	r1, #0
    4342:	0312      	lsls	r2, r2, #12
    4344:	0d0b      	lsrs	r3, r1, #20
    4346:	051b      	lsls	r3, r3, #20
    4348:	0564      	lsls	r4, r4, #21
    434a:	0b12      	lsrs	r2, r2, #12
    434c:	431a      	orrs	r2, r3
    434e:	0863      	lsrs	r3, r4, #1
    4350:	4cc0      	ldr	r4, [pc, #768]	; (4654 <__aeabi_dadd+0x3a4>)
    4352:	07f6      	lsls	r6, r6, #31
    4354:	4014      	ands	r4, r2
    4356:	431c      	orrs	r4, r3
    4358:	0064      	lsls	r4, r4, #1
    435a:	0864      	lsrs	r4, r4, #1
    435c:	4334      	orrs	r4, r6
    435e:	0028      	movs	r0, r5
    4360:	0021      	movs	r1, r4
    4362:	bc3c      	pop	{r2, r3, r4, r5}
    4364:	4690      	mov	r8, r2
    4366:	4699      	mov	r9, r3
    4368:	46a2      	mov	sl, r4
    436a:	46ab      	mov	fp, r5
    436c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    436e:	4bb7      	ldr	r3, [pc, #732]	; (464c <__aeabi_dadd+0x39c>)
    4370:	429c      	cmp	r4, r3
    4372:	d0c6      	beq.n	4302 <__aeabi_dadd+0x52>
    4374:	2380      	movs	r3, #128	; 0x80
    4376:	041b      	lsls	r3, r3, #16
    4378:	4318      	orrs	r0, r3
    437a:	2e38      	cmp	r6, #56	; 0x38
    437c:	dd00      	ble.n	4380 <__aeabi_dadd+0xd0>
    437e:	e0eb      	b.n	4558 <__aeabi_dadd+0x2a8>
    4380:	2e1f      	cmp	r6, #31
    4382:	dd00      	ble.n	4386 <__aeabi_dadd+0xd6>
    4384:	e11e      	b.n	45c4 <__aeabi_dadd+0x314>
    4386:	2320      	movs	r3, #32
    4388:	1b9b      	subs	r3, r3, r6
    438a:	469c      	mov	ip, r3
    438c:	0003      	movs	r3, r0
    438e:	4667      	mov	r7, ip
    4390:	40bb      	lsls	r3, r7
    4392:	4698      	mov	r8, r3
    4394:	0013      	movs	r3, r2
    4396:	4647      	mov	r7, r8
    4398:	40f3      	lsrs	r3, r6
    439a:	433b      	orrs	r3, r7
    439c:	4667      	mov	r7, ip
    439e:	40ba      	lsls	r2, r7
    43a0:	1e57      	subs	r7, r2, #1
    43a2:	41ba      	sbcs	r2, r7
    43a4:	4313      	orrs	r3, r2
    43a6:	0002      	movs	r2, r0
    43a8:	40f2      	lsrs	r2, r6
    43aa:	1aeb      	subs	r3, r5, r3
    43ac:	429d      	cmp	r5, r3
    43ae:	41b6      	sbcs	r6, r6
    43b0:	001d      	movs	r5, r3
    43b2:	1a8a      	subs	r2, r1, r2
    43b4:	4276      	negs	r6, r6
    43b6:	1b91      	subs	r1, r2, r6
    43b8:	020b      	lsls	r3, r1, #8
    43ba:	d531      	bpl.n	4420 <__aeabi_dadd+0x170>
    43bc:	024a      	lsls	r2, r1, #9
    43be:	0a56      	lsrs	r6, r2, #9
    43c0:	2e00      	cmp	r6, #0
    43c2:	d100      	bne.n	43c6 <__aeabi_dadd+0x116>
    43c4:	e0b4      	b.n	4530 <__aeabi_dadd+0x280>
    43c6:	0030      	movs	r0, r6
    43c8:	f001 ff06 	bl	61d8 <__clzsi2>
    43cc:	0003      	movs	r3, r0
    43ce:	3b08      	subs	r3, #8
    43d0:	2b1f      	cmp	r3, #31
    43d2:	dd00      	ble.n	43d6 <__aeabi_dadd+0x126>
    43d4:	e0b5      	b.n	4542 <__aeabi_dadd+0x292>
    43d6:	2220      	movs	r2, #32
    43d8:	0029      	movs	r1, r5
    43da:	1ad2      	subs	r2, r2, r3
    43dc:	40d1      	lsrs	r1, r2
    43de:	409e      	lsls	r6, r3
    43e0:	000a      	movs	r2, r1
    43e2:	409d      	lsls	r5, r3
    43e4:	4332      	orrs	r2, r6
    43e6:	429c      	cmp	r4, r3
    43e8:	dd00      	ble.n	43ec <__aeabi_dadd+0x13c>
    43ea:	e0b1      	b.n	4550 <__aeabi_dadd+0x2a0>
    43ec:	1b1c      	subs	r4, r3, r4
    43ee:	1c63      	adds	r3, r4, #1
    43f0:	2b1f      	cmp	r3, #31
    43f2:	dd00      	ble.n	43f6 <__aeabi_dadd+0x146>
    43f4:	e0d5      	b.n	45a2 <__aeabi_dadd+0x2f2>
    43f6:	2120      	movs	r1, #32
    43f8:	0014      	movs	r4, r2
    43fa:	0028      	movs	r0, r5
    43fc:	1ac9      	subs	r1, r1, r3
    43fe:	408c      	lsls	r4, r1
    4400:	40d8      	lsrs	r0, r3
    4402:	408d      	lsls	r5, r1
    4404:	4304      	orrs	r4, r0
    4406:	40da      	lsrs	r2, r3
    4408:	1e68      	subs	r0, r5, #1
    440a:	4185      	sbcs	r5, r0
    440c:	0011      	movs	r1, r2
    440e:	4325      	orrs	r5, r4
    4410:	2400      	movs	r4, #0
    4412:	e776      	b.n	4302 <__aeabi_dadd+0x52>
    4414:	4641      	mov	r1, r8
    4416:	4331      	orrs	r1, r6
    4418:	d100      	bne.n	441c <__aeabi_dadd+0x16c>
    441a:	e234      	b.n	4886 <__aeabi_dadd+0x5d6>
    441c:	0031      	movs	r1, r6
    441e:	4645      	mov	r5, r8
    4420:	076b      	lsls	r3, r5, #29
    4422:	d000      	beq.n	4426 <__aeabi_dadd+0x176>
    4424:	e76f      	b.n	4306 <__aeabi_dadd+0x56>
    4426:	4656      	mov	r6, sl
    4428:	0748      	lsls	r0, r1, #29
    442a:	08ed      	lsrs	r5, r5, #3
    442c:	08c9      	lsrs	r1, r1, #3
    442e:	4305      	orrs	r5, r0
    4430:	4b86      	ldr	r3, [pc, #536]	; (464c <__aeabi_dadd+0x39c>)
    4432:	429c      	cmp	r4, r3
    4434:	d035      	beq.n	44a2 <__aeabi_dadd+0x1f2>
    4436:	030a      	lsls	r2, r1, #12
    4438:	0564      	lsls	r4, r4, #21
    443a:	0b12      	lsrs	r2, r2, #12
    443c:	0d64      	lsrs	r4, r4, #21
    443e:	e77f      	b.n	4340 <__aeabi_dadd+0x90>
    4440:	4663      	mov	r3, ip
    4442:	1ae3      	subs	r3, r4, r3
    4444:	469b      	mov	fp, r3
    4446:	2b00      	cmp	r3, #0
    4448:	dc00      	bgt.n	444c <__aeabi_dadd+0x19c>
    444a:	e08b      	b.n	4564 <__aeabi_dadd+0x2b4>
    444c:	4667      	mov	r7, ip
    444e:	2f00      	cmp	r7, #0
    4450:	d03c      	beq.n	44cc <__aeabi_dadd+0x21c>
    4452:	4f7e      	ldr	r7, [pc, #504]	; (464c <__aeabi_dadd+0x39c>)
    4454:	42bc      	cmp	r4, r7
    4456:	d100      	bne.n	445a <__aeabi_dadd+0x1aa>
    4458:	e753      	b.n	4302 <__aeabi_dadd+0x52>
    445a:	2780      	movs	r7, #128	; 0x80
    445c:	043f      	lsls	r7, r7, #16
    445e:	4338      	orrs	r0, r7
    4460:	465b      	mov	r3, fp
    4462:	2b38      	cmp	r3, #56	; 0x38
    4464:	dc00      	bgt.n	4468 <__aeabi_dadd+0x1b8>
    4466:	e0f7      	b.n	4658 <__aeabi_dadd+0x3a8>
    4468:	4302      	orrs	r2, r0
    446a:	1e50      	subs	r0, r2, #1
    446c:	4182      	sbcs	r2, r0
    446e:	2000      	movs	r0, #0
    4470:	b2d2      	uxtb	r2, r2
    4472:	1953      	adds	r3, r2, r5
    4474:	1842      	adds	r2, r0, r1
    4476:	42ab      	cmp	r3, r5
    4478:	4189      	sbcs	r1, r1
    447a:	001d      	movs	r5, r3
    447c:	4249      	negs	r1, r1
    447e:	1889      	adds	r1, r1, r2
    4480:	020b      	lsls	r3, r1, #8
    4482:	d5cd      	bpl.n	4420 <__aeabi_dadd+0x170>
    4484:	4b71      	ldr	r3, [pc, #452]	; (464c <__aeabi_dadd+0x39c>)
    4486:	3401      	adds	r4, #1
    4488:	429c      	cmp	r4, r3
    448a:	d100      	bne.n	448e <__aeabi_dadd+0x1de>
    448c:	e13d      	b.n	470a <__aeabi_dadd+0x45a>
    448e:	2001      	movs	r0, #1
    4490:	4a6f      	ldr	r2, [pc, #444]	; (4650 <__aeabi_dadd+0x3a0>)
    4492:	086b      	lsrs	r3, r5, #1
    4494:	400a      	ands	r2, r1
    4496:	4028      	ands	r0, r5
    4498:	4318      	orrs	r0, r3
    449a:	07d5      	lsls	r5, r2, #31
    449c:	4305      	orrs	r5, r0
    449e:	0851      	lsrs	r1, r2, #1
    44a0:	e72f      	b.n	4302 <__aeabi_dadd+0x52>
    44a2:	002b      	movs	r3, r5
    44a4:	430b      	orrs	r3, r1
    44a6:	d100      	bne.n	44aa <__aeabi_dadd+0x1fa>
    44a8:	e1cb      	b.n	4842 <__aeabi_dadd+0x592>
    44aa:	2380      	movs	r3, #128	; 0x80
    44ac:	031b      	lsls	r3, r3, #12
    44ae:	430b      	orrs	r3, r1
    44b0:	031a      	lsls	r2, r3, #12
    44b2:	0b12      	lsrs	r2, r2, #12
    44b4:	e744      	b.n	4340 <__aeabi_dadd+0x90>
    44b6:	3e01      	subs	r6, #1
    44b8:	2e00      	cmp	r6, #0
    44ba:	d16d      	bne.n	4598 <__aeabi_dadd+0x2e8>
    44bc:	1aae      	subs	r6, r5, r2
    44be:	42b5      	cmp	r5, r6
    44c0:	419b      	sbcs	r3, r3
    44c2:	1a09      	subs	r1, r1, r0
    44c4:	425b      	negs	r3, r3
    44c6:	1ac9      	subs	r1, r1, r3
    44c8:	0035      	movs	r5, r6
    44ca:	e775      	b.n	43b8 <__aeabi_dadd+0x108>
    44cc:	0007      	movs	r7, r0
    44ce:	4317      	orrs	r7, r2
    44d0:	d100      	bne.n	44d4 <__aeabi_dadd+0x224>
    44d2:	e716      	b.n	4302 <__aeabi_dadd+0x52>
    44d4:	2301      	movs	r3, #1
    44d6:	425b      	negs	r3, r3
    44d8:	469c      	mov	ip, r3
    44da:	44e3      	add	fp, ip
    44dc:	465b      	mov	r3, fp
    44de:	2b00      	cmp	r3, #0
    44e0:	d000      	beq.n	44e4 <__aeabi_dadd+0x234>
    44e2:	e0e0      	b.n	46a6 <__aeabi_dadd+0x3f6>
    44e4:	18aa      	adds	r2, r5, r2
    44e6:	42aa      	cmp	r2, r5
    44e8:	419b      	sbcs	r3, r3
    44ea:	1809      	adds	r1, r1, r0
    44ec:	425b      	negs	r3, r3
    44ee:	1859      	adds	r1, r3, r1
    44f0:	0015      	movs	r5, r2
    44f2:	e7c5      	b.n	4480 <__aeabi_dadd+0x1d0>
    44f4:	2e00      	cmp	r6, #0
    44f6:	d175      	bne.n	45e4 <__aeabi_dadd+0x334>
    44f8:	1c66      	adds	r6, r4, #1
    44fa:	0576      	lsls	r6, r6, #21
    44fc:	0d76      	lsrs	r6, r6, #21
    44fe:	2e01      	cmp	r6, #1
    4500:	dc00      	bgt.n	4504 <__aeabi_dadd+0x254>
    4502:	e0f3      	b.n	46ec <__aeabi_dadd+0x43c>
    4504:	1aae      	subs	r6, r5, r2
    4506:	46b0      	mov	r8, r6
    4508:	4545      	cmp	r5, r8
    450a:	41bf      	sbcs	r7, r7
    450c:	1a0e      	subs	r6, r1, r0
    450e:	427f      	negs	r7, r7
    4510:	1bf6      	subs	r6, r6, r7
    4512:	0237      	lsls	r7, r6, #8
    4514:	d400      	bmi.n	4518 <__aeabi_dadd+0x268>
    4516:	e08f      	b.n	4638 <__aeabi_dadd+0x388>
    4518:	1b55      	subs	r5, r2, r5
    451a:	42aa      	cmp	r2, r5
    451c:	41b6      	sbcs	r6, r6
    451e:	1a41      	subs	r1, r0, r1
    4520:	4276      	negs	r6, r6
    4522:	1b8e      	subs	r6, r1, r6
    4524:	469a      	mov	sl, r3
    4526:	e74b      	b.n	43c0 <__aeabi_dadd+0x110>
    4528:	4656      	mov	r6, sl
    452a:	2200      	movs	r2, #0
    452c:	2500      	movs	r5, #0
    452e:	e707      	b.n	4340 <__aeabi_dadd+0x90>
    4530:	0028      	movs	r0, r5
    4532:	f001 fe51 	bl	61d8 <__clzsi2>
    4536:	3020      	adds	r0, #32
    4538:	0003      	movs	r3, r0
    453a:	3b08      	subs	r3, #8
    453c:	2b1f      	cmp	r3, #31
    453e:	dc00      	bgt.n	4542 <__aeabi_dadd+0x292>
    4540:	e749      	b.n	43d6 <__aeabi_dadd+0x126>
    4542:	002a      	movs	r2, r5
    4544:	3828      	subs	r0, #40	; 0x28
    4546:	4082      	lsls	r2, r0
    4548:	2500      	movs	r5, #0
    454a:	429c      	cmp	r4, r3
    454c:	dc00      	bgt.n	4550 <__aeabi_dadd+0x2a0>
    454e:	e74d      	b.n	43ec <__aeabi_dadd+0x13c>
    4550:	493f      	ldr	r1, [pc, #252]	; (4650 <__aeabi_dadd+0x3a0>)
    4552:	1ae4      	subs	r4, r4, r3
    4554:	4011      	ands	r1, r2
    4556:	e6d4      	b.n	4302 <__aeabi_dadd+0x52>
    4558:	4302      	orrs	r2, r0
    455a:	1e50      	subs	r0, r2, #1
    455c:	4182      	sbcs	r2, r0
    455e:	b2d3      	uxtb	r3, r2
    4560:	2200      	movs	r2, #0
    4562:	e722      	b.n	43aa <__aeabi_dadd+0xfa>
    4564:	2b00      	cmp	r3, #0
    4566:	d000      	beq.n	456a <__aeabi_dadd+0x2ba>
    4568:	e0f3      	b.n	4752 <__aeabi_dadd+0x4a2>
    456a:	1c63      	adds	r3, r4, #1
    456c:	469c      	mov	ip, r3
    456e:	055b      	lsls	r3, r3, #21
    4570:	0d5b      	lsrs	r3, r3, #21
    4572:	2b01      	cmp	r3, #1
    4574:	dc00      	bgt.n	4578 <__aeabi_dadd+0x2c8>
    4576:	e09f      	b.n	46b8 <__aeabi_dadd+0x408>
    4578:	4b34      	ldr	r3, [pc, #208]	; (464c <__aeabi_dadd+0x39c>)
    457a:	459c      	cmp	ip, r3
    457c:	d100      	bne.n	4580 <__aeabi_dadd+0x2d0>
    457e:	e0c3      	b.n	4708 <__aeabi_dadd+0x458>
    4580:	18aa      	adds	r2, r5, r2
    4582:	1809      	adds	r1, r1, r0
    4584:	42aa      	cmp	r2, r5
    4586:	4180      	sbcs	r0, r0
    4588:	4240      	negs	r0, r0
    458a:	1841      	adds	r1, r0, r1
    458c:	07cd      	lsls	r5, r1, #31
    458e:	0852      	lsrs	r2, r2, #1
    4590:	4315      	orrs	r5, r2
    4592:	0849      	lsrs	r1, r1, #1
    4594:	4664      	mov	r4, ip
    4596:	e6b4      	b.n	4302 <__aeabi_dadd+0x52>
    4598:	4b2c      	ldr	r3, [pc, #176]	; (464c <__aeabi_dadd+0x39c>)
    459a:	429c      	cmp	r4, r3
    459c:	d000      	beq.n	45a0 <__aeabi_dadd+0x2f0>
    459e:	e6ec      	b.n	437a <__aeabi_dadd+0xca>
    45a0:	e6af      	b.n	4302 <__aeabi_dadd+0x52>
    45a2:	0011      	movs	r1, r2
    45a4:	3c1f      	subs	r4, #31
    45a6:	40e1      	lsrs	r1, r4
    45a8:	000c      	movs	r4, r1
    45aa:	2b20      	cmp	r3, #32
    45ac:	d100      	bne.n	45b0 <__aeabi_dadd+0x300>
    45ae:	e07f      	b.n	46b0 <__aeabi_dadd+0x400>
    45b0:	2140      	movs	r1, #64	; 0x40
    45b2:	1acb      	subs	r3, r1, r3
    45b4:	409a      	lsls	r2, r3
    45b6:	4315      	orrs	r5, r2
    45b8:	1e6a      	subs	r2, r5, #1
    45ba:	4195      	sbcs	r5, r2
    45bc:	2100      	movs	r1, #0
    45be:	4325      	orrs	r5, r4
    45c0:	2400      	movs	r4, #0
    45c2:	e72d      	b.n	4420 <__aeabi_dadd+0x170>
    45c4:	0033      	movs	r3, r6
    45c6:	0007      	movs	r7, r0
    45c8:	3b20      	subs	r3, #32
    45ca:	40df      	lsrs	r7, r3
    45cc:	003b      	movs	r3, r7
    45ce:	2e20      	cmp	r6, #32
    45d0:	d070      	beq.n	46b4 <__aeabi_dadd+0x404>
    45d2:	2740      	movs	r7, #64	; 0x40
    45d4:	1bbe      	subs	r6, r7, r6
    45d6:	40b0      	lsls	r0, r6
    45d8:	4302      	orrs	r2, r0
    45da:	1e50      	subs	r0, r2, #1
    45dc:	4182      	sbcs	r2, r0
    45de:	4313      	orrs	r3, r2
    45e0:	2200      	movs	r2, #0
    45e2:	e6e2      	b.n	43aa <__aeabi_dadd+0xfa>
    45e4:	2c00      	cmp	r4, #0
    45e6:	d04f      	beq.n	4688 <__aeabi_dadd+0x3d8>
    45e8:	4c18      	ldr	r4, [pc, #96]	; (464c <__aeabi_dadd+0x39c>)
    45ea:	45a4      	cmp	ip, r4
    45ec:	d100      	bne.n	45f0 <__aeabi_dadd+0x340>
    45ee:	e0ab      	b.n	4748 <__aeabi_dadd+0x498>
    45f0:	2480      	movs	r4, #128	; 0x80
    45f2:	0424      	lsls	r4, r4, #16
    45f4:	4276      	negs	r6, r6
    45f6:	4321      	orrs	r1, r4
    45f8:	2e38      	cmp	r6, #56	; 0x38
    45fa:	dd00      	ble.n	45fe <__aeabi_dadd+0x34e>
    45fc:	e0df      	b.n	47be <__aeabi_dadd+0x50e>
    45fe:	2e1f      	cmp	r6, #31
    4600:	dd00      	ble.n	4604 <__aeabi_dadd+0x354>
    4602:	e143      	b.n	488c <__aeabi_dadd+0x5dc>
    4604:	2720      	movs	r7, #32
    4606:	1bbc      	subs	r4, r7, r6
    4608:	46a1      	mov	r9, r4
    460a:	000c      	movs	r4, r1
    460c:	464f      	mov	r7, r9
    460e:	40bc      	lsls	r4, r7
    4610:	46a0      	mov	r8, r4
    4612:	002c      	movs	r4, r5
    4614:	4647      	mov	r7, r8
    4616:	40f4      	lsrs	r4, r6
    4618:	433c      	orrs	r4, r7
    461a:	464f      	mov	r7, r9
    461c:	40bd      	lsls	r5, r7
    461e:	1e6f      	subs	r7, r5, #1
    4620:	41bd      	sbcs	r5, r7
    4622:	40f1      	lsrs	r1, r6
    4624:	432c      	orrs	r4, r5
    4626:	1b15      	subs	r5, r2, r4
    4628:	42aa      	cmp	r2, r5
    462a:	4192      	sbcs	r2, r2
    462c:	1a41      	subs	r1, r0, r1
    462e:	4252      	negs	r2, r2
    4630:	1a89      	subs	r1, r1, r2
    4632:	4664      	mov	r4, ip
    4634:	469a      	mov	sl, r3
    4636:	e6bf      	b.n	43b8 <__aeabi_dadd+0x108>
    4638:	4641      	mov	r1, r8
    463a:	4645      	mov	r5, r8
    463c:	4331      	orrs	r1, r6
    463e:	d000      	beq.n	4642 <__aeabi_dadd+0x392>
    4640:	e6be      	b.n	43c0 <__aeabi_dadd+0x110>
    4642:	2600      	movs	r6, #0
    4644:	2400      	movs	r4, #0
    4646:	2500      	movs	r5, #0
    4648:	e6f2      	b.n	4430 <__aeabi_dadd+0x180>
    464a:	46c0      	nop			; (mov r8, r8)
    464c:	000007ff 	.word	0x000007ff
    4650:	ff7fffff 	.word	0xff7fffff
    4654:	800fffff 	.word	0x800fffff
    4658:	2b1f      	cmp	r3, #31
    465a:	dc59      	bgt.n	4710 <__aeabi_dadd+0x460>
    465c:	2720      	movs	r7, #32
    465e:	1aff      	subs	r7, r7, r3
    4660:	46bc      	mov	ip, r7
    4662:	0007      	movs	r7, r0
    4664:	4663      	mov	r3, ip
    4666:	409f      	lsls	r7, r3
    4668:	465b      	mov	r3, fp
    466a:	46b9      	mov	r9, r7
    466c:	0017      	movs	r7, r2
    466e:	40df      	lsrs	r7, r3
    4670:	46b8      	mov	r8, r7
    4672:	464f      	mov	r7, r9
    4674:	4643      	mov	r3, r8
    4676:	431f      	orrs	r7, r3
    4678:	4663      	mov	r3, ip
    467a:	409a      	lsls	r2, r3
    467c:	1e53      	subs	r3, r2, #1
    467e:	419a      	sbcs	r2, r3
    4680:	465b      	mov	r3, fp
    4682:	433a      	orrs	r2, r7
    4684:	40d8      	lsrs	r0, r3
    4686:	e6f4      	b.n	4472 <__aeabi_dadd+0x1c2>
    4688:	000c      	movs	r4, r1
    468a:	432c      	orrs	r4, r5
    468c:	d05c      	beq.n	4748 <__aeabi_dadd+0x498>
    468e:	43f6      	mvns	r6, r6
    4690:	2e00      	cmp	r6, #0
    4692:	d155      	bne.n	4740 <__aeabi_dadd+0x490>
    4694:	1b55      	subs	r5, r2, r5
    4696:	42aa      	cmp	r2, r5
    4698:	41a4      	sbcs	r4, r4
    469a:	1a41      	subs	r1, r0, r1
    469c:	4264      	negs	r4, r4
    469e:	1b09      	subs	r1, r1, r4
    46a0:	469a      	mov	sl, r3
    46a2:	4664      	mov	r4, ip
    46a4:	e688      	b.n	43b8 <__aeabi_dadd+0x108>
    46a6:	4f96      	ldr	r7, [pc, #600]	; (4900 <__aeabi_dadd+0x650>)
    46a8:	42bc      	cmp	r4, r7
    46aa:	d000      	beq.n	46ae <__aeabi_dadd+0x3fe>
    46ac:	e6d8      	b.n	4460 <__aeabi_dadd+0x1b0>
    46ae:	e628      	b.n	4302 <__aeabi_dadd+0x52>
    46b0:	2200      	movs	r2, #0
    46b2:	e780      	b.n	45b6 <__aeabi_dadd+0x306>
    46b4:	2000      	movs	r0, #0
    46b6:	e78f      	b.n	45d8 <__aeabi_dadd+0x328>
    46b8:	000b      	movs	r3, r1
    46ba:	432b      	orrs	r3, r5
    46bc:	2c00      	cmp	r4, #0
    46be:	d000      	beq.n	46c2 <__aeabi_dadd+0x412>
    46c0:	e0c2      	b.n	4848 <__aeabi_dadd+0x598>
    46c2:	2b00      	cmp	r3, #0
    46c4:	d100      	bne.n	46c8 <__aeabi_dadd+0x418>
    46c6:	e101      	b.n	48cc <__aeabi_dadd+0x61c>
    46c8:	0003      	movs	r3, r0
    46ca:	4313      	orrs	r3, r2
    46cc:	d100      	bne.n	46d0 <__aeabi_dadd+0x420>
    46ce:	e618      	b.n	4302 <__aeabi_dadd+0x52>
    46d0:	18ab      	adds	r3, r5, r2
    46d2:	42ab      	cmp	r3, r5
    46d4:	41b6      	sbcs	r6, r6
    46d6:	1809      	adds	r1, r1, r0
    46d8:	4276      	negs	r6, r6
    46da:	1871      	adds	r1, r6, r1
    46dc:	020a      	lsls	r2, r1, #8
    46de:	d400      	bmi.n	46e2 <__aeabi_dadd+0x432>
    46e0:	e109      	b.n	48f6 <__aeabi_dadd+0x646>
    46e2:	4a88      	ldr	r2, [pc, #544]	; (4904 <__aeabi_dadd+0x654>)
    46e4:	001d      	movs	r5, r3
    46e6:	4011      	ands	r1, r2
    46e8:	4664      	mov	r4, ip
    46ea:	e60a      	b.n	4302 <__aeabi_dadd+0x52>
    46ec:	2c00      	cmp	r4, #0
    46ee:	d15b      	bne.n	47a8 <__aeabi_dadd+0x4f8>
    46f0:	000e      	movs	r6, r1
    46f2:	432e      	orrs	r6, r5
    46f4:	d000      	beq.n	46f8 <__aeabi_dadd+0x448>
    46f6:	e08a      	b.n	480e <__aeabi_dadd+0x55e>
    46f8:	0001      	movs	r1, r0
    46fa:	4311      	orrs	r1, r2
    46fc:	d100      	bne.n	4700 <__aeabi_dadd+0x450>
    46fe:	e0c2      	b.n	4886 <__aeabi_dadd+0x5d6>
    4700:	0001      	movs	r1, r0
    4702:	0015      	movs	r5, r2
    4704:	469a      	mov	sl, r3
    4706:	e5fc      	b.n	4302 <__aeabi_dadd+0x52>
    4708:	4664      	mov	r4, ip
    470a:	2100      	movs	r1, #0
    470c:	2500      	movs	r5, #0
    470e:	e68f      	b.n	4430 <__aeabi_dadd+0x180>
    4710:	2320      	movs	r3, #32
    4712:	425b      	negs	r3, r3
    4714:	469c      	mov	ip, r3
    4716:	44dc      	add	ip, fp
    4718:	4663      	mov	r3, ip
    471a:	0007      	movs	r7, r0
    471c:	40df      	lsrs	r7, r3
    471e:	465b      	mov	r3, fp
    4720:	46bc      	mov	ip, r7
    4722:	2b20      	cmp	r3, #32
    4724:	d100      	bne.n	4728 <__aeabi_dadd+0x478>
    4726:	e0ac      	b.n	4882 <__aeabi_dadd+0x5d2>
    4728:	2340      	movs	r3, #64	; 0x40
    472a:	465f      	mov	r7, fp
    472c:	1bdb      	subs	r3, r3, r7
    472e:	4098      	lsls	r0, r3
    4730:	4302      	orrs	r2, r0
    4732:	1e50      	subs	r0, r2, #1
    4734:	4182      	sbcs	r2, r0
    4736:	4663      	mov	r3, ip
    4738:	4313      	orrs	r3, r2
    473a:	001a      	movs	r2, r3
    473c:	2000      	movs	r0, #0
    473e:	e698      	b.n	4472 <__aeabi_dadd+0x1c2>
    4740:	4c6f      	ldr	r4, [pc, #444]	; (4900 <__aeabi_dadd+0x650>)
    4742:	45a4      	cmp	ip, r4
    4744:	d000      	beq.n	4748 <__aeabi_dadd+0x498>
    4746:	e757      	b.n	45f8 <__aeabi_dadd+0x348>
    4748:	0001      	movs	r1, r0
    474a:	0015      	movs	r5, r2
    474c:	4664      	mov	r4, ip
    474e:	469a      	mov	sl, r3
    4750:	e5d7      	b.n	4302 <__aeabi_dadd+0x52>
    4752:	2c00      	cmp	r4, #0
    4754:	d139      	bne.n	47ca <__aeabi_dadd+0x51a>
    4756:	000c      	movs	r4, r1
    4758:	432c      	orrs	r4, r5
    475a:	d06e      	beq.n	483a <__aeabi_dadd+0x58a>
    475c:	43db      	mvns	r3, r3
    475e:	2b00      	cmp	r3, #0
    4760:	d01a      	beq.n	4798 <__aeabi_dadd+0x4e8>
    4762:	4c67      	ldr	r4, [pc, #412]	; (4900 <__aeabi_dadd+0x650>)
    4764:	45a4      	cmp	ip, r4
    4766:	d068      	beq.n	483a <__aeabi_dadd+0x58a>
    4768:	2b38      	cmp	r3, #56	; 0x38
    476a:	dd00      	ble.n	476e <__aeabi_dadd+0x4be>
    476c:	e0a4      	b.n	48b8 <__aeabi_dadd+0x608>
    476e:	2b1f      	cmp	r3, #31
    4770:	dd00      	ble.n	4774 <__aeabi_dadd+0x4c4>
    4772:	e0ae      	b.n	48d2 <__aeabi_dadd+0x622>
    4774:	2420      	movs	r4, #32
    4776:	000f      	movs	r7, r1
    4778:	1ae4      	subs	r4, r4, r3
    477a:	40a7      	lsls	r7, r4
    477c:	46b9      	mov	r9, r7
    477e:	002f      	movs	r7, r5
    4780:	40df      	lsrs	r7, r3
    4782:	46b8      	mov	r8, r7
    4784:	46a3      	mov	fp, r4
    4786:	464f      	mov	r7, r9
    4788:	4644      	mov	r4, r8
    478a:	4327      	orrs	r7, r4
    478c:	465c      	mov	r4, fp
    478e:	40a5      	lsls	r5, r4
    4790:	1e6c      	subs	r4, r5, #1
    4792:	41a5      	sbcs	r5, r4
    4794:	40d9      	lsrs	r1, r3
    4796:	433d      	orrs	r5, r7
    4798:	18ad      	adds	r5, r5, r2
    479a:	4295      	cmp	r5, r2
    479c:	419b      	sbcs	r3, r3
    479e:	1809      	adds	r1, r1, r0
    47a0:	425b      	negs	r3, r3
    47a2:	1859      	adds	r1, r3, r1
    47a4:	4664      	mov	r4, ip
    47a6:	e66b      	b.n	4480 <__aeabi_dadd+0x1d0>
    47a8:	000c      	movs	r4, r1
    47aa:	432c      	orrs	r4, r5
    47ac:	d115      	bne.n	47da <__aeabi_dadd+0x52a>
    47ae:	0001      	movs	r1, r0
    47b0:	4311      	orrs	r1, r2
    47b2:	d07b      	beq.n	48ac <__aeabi_dadd+0x5fc>
    47b4:	0001      	movs	r1, r0
    47b6:	0015      	movs	r5, r2
    47b8:	469a      	mov	sl, r3
    47ba:	4c51      	ldr	r4, [pc, #324]	; (4900 <__aeabi_dadd+0x650>)
    47bc:	e5a1      	b.n	4302 <__aeabi_dadd+0x52>
    47be:	430d      	orrs	r5, r1
    47c0:	1e69      	subs	r1, r5, #1
    47c2:	418d      	sbcs	r5, r1
    47c4:	2100      	movs	r1, #0
    47c6:	b2ec      	uxtb	r4, r5
    47c8:	e72d      	b.n	4626 <__aeabi_dadd+0x376>
    47ca:	4c4d      	ldr	r4, [pc, #308]	; (4900 <__aeabi_dadd+0x650>)
    47cc:	45a4      	cmp	ip, r4
    47ce:	d034      	beq.n	483a <__aeabi_dadd+0x58a>
    47d0:	2480      	movs	r4, #128	; 0x80
    47d2:	0424      	lsls	r4, r4, #16
    47d4:	425b      	negs	r3, r3
    47d6:	4321      	orrs	r1, r4
    47d8:	e7c6      	b.n	4768 <__aeabi_dadd+0x4b8>
    47da:	0004      	movs	r4, r0
    47dc:	4314      	orrs	r4, r2
    47de:	d04e      	beq.n	487e <__aeabi_dadd+0x5ce>
    47e0:	08ed      	lsrs	r5, r5, #3
    47e2:	074c      	lsls	r4, r1, #29
    47e4:	432c      	orrs	r4, r5
    47e6:	2580      	movs	r5, #128	; 0x80
    47e8:	08c9      	lsrs	r1, r1, #3
    47ea:	032d      	lsls	r5, r5, #12
    47ec:	4229      	tst	r1, r5
    47ee:	d008      	beq.n	4802 <__aeabi_dadd+0x552>
    47f0:	08c6      	lsrs	r6, r0, #3
    47f2:	422e      	tst	r6, r5
    47f4:	d105      	bne.n	4802 <__aeabi_dadd+0x552>
    47f6:	08d2      	lsrs	r2, r2, #3
    47f8:	0741      	lsls	r1, r0, #29
    47fa:	4311      	orrs	r1, r2
    47fc:	000c      	movs	r4, r1
    47fe:	469a      	mov	sl, r3
    4800:	0031      	movs	r1, r6
    4802:	0f62      	lsrs	r2, r4, #29
    4804:	00c9      	lsls	r1, r1, #3
    4806:	00e5      	lsls	r5, r4, #3
    4808:	4311      	orrs	r1, r2
    480a:	4c3d      	ldr	r4, [pc, #244]	; (4900 <__aeabi_dadd+0x650>)
    480c:	e579      	b.n	4302 <__aeabi_dadd+0x52>
    480e:	0006      	movs	r6, r0
    4810:	4316      	orrs	r6, r2
    4812:	d100      	bne.n	4816 <__aeabi_dadd+0x566>
    4814:	e575      	b.n	4302 <__aeabi_dadd+0x52>
    4816:	1aae      	subs	r6, r5, r2
    4818:	46b0      	mov	r8, r6
    481a:	4545      	cmp	r5, r8
    481c:	41bf      	sbcs	r7, r7
    481e:	1a0e      	subs	r6, r1, r0
    4820:	427f      	negs	r7, r7
    4822:	1bf6      	subs	r6, r6, r7
    4824:	0237      	lsls	r7, r6, #8
    4826:	d400      	bmi.n	482a <__aeabi_dadd+0x57a>
    4828:	e5f4      	b.n	4414 <__aeabi_dadd+0x164>
    482a:	1b55      	subs	r5, r2, r5
    482c:	42aa      	cmp	r2, r5
    482e:	41b6      	sbcs	r6, r6
    4830:	1a41      	subs	r1, r0, r1
    4832:	4276      	negs	r6, r6
    4834:	1b89      	subs	r1, r1, r6
    4836:	469a      	mov	sl, r3
    4838:	e563      	b.n	4302 <__aeabi_dadd+0x52>
    483a:	0001      	movs	r1, r0
    483c:	0015      	movs	r5, r2
    483e:	4664      	mov	r4, ip
    4840:	e55f      	b.n	4302 <__aeabi_dadd+0x52>
    4842:	2200      	movs	r2, #0
    4844:	2500      	movs	r5, #0
    4846:	e57b      	b.n	4340 <__aeabi_dadd+0x90>
    4848:	2b00      	cmp	r3, #0
    484a:	d03b      	beq.n	48c4 <__aeabi_dadd+0x614>
    484c:	0003      	movs	r3, r0
    484e:	4313      	orrs	r3, r2
    4850:	d015      	beq.n	487e <__aeabi_dadd+0x5ce>
    4852:	08ed      	lsrs	r5, r5, #3
    4854:	074b      	lsls	r3, r1, #29
    4856:	432b      	orrs	r3, r5
    4858:	2580      	movs	r5, #128	; 0x80
    485a:	08c9      	lsrs	r1, r1, #3
    485c:	032d      	lsls	r5, r5, #12
    485e:	4229      	tst	r1, r5
    4860:	d007      	beq.n	4872 <__aeabi_dadd+0x5c2>
    4862:	08c4      	lsrs	r4, r0, #3
    4864:	422c      	tst	r4, r5
    4866:	d104      	bne.n	4872 <__aeabi_dadd+0x5c2>
    4868:	0741      	lsls	r1, r0, #29
    486a:	000b      	movs	r3, r1
    486c:	0021      	movs	r1, r4
    486e:	08d2      	lsrs	r2, r2, #3
    4870:	4313      	orrs	r3, r2
    4872:	00c9      	lsls	r1, r1, #3
    4874:	0f5a      	lsrs	r2, r3, #29
    4876:	4311      	orrs	r1, r2
    4878:	00dd      	lsls	r5, r3, #3
    487a:	4c21      	ldr	r4, [pc, #132]	; (4900 <__aeabi_dadd+0x650>)
    487c:	e541      	b.n	4302 <__aeabi_dadd+0x52>
    487e:	4c20      	ldr	r4, [pc, #128]	; (4900 <__aeabi_dadd+0x650>)
    4880:	e53f      	b.n	4302 <__aeabi_dadd+0x52>
    4882:	2000      	movs	r0, #0
    4884:	e754      	b.n	4730 <__aeabi_dadd+0x480>
    4886:	2600      	movs	r6, #0
    4888:	2500      	movs	r5, #0
    488a:	e5d1      	b.n	4430 <__aeabi_dadd+0x180>
    488c:	0034      	movs	r4, r6
    488e:	000f      	movs	r7, r1
    4890:	3c20      	subs	r4, #32
    4892:	40e7      	lsrs	r7, r4
    4894:	003c      	movs	r4, r7
    4896:	2e20      	cmp	r6, #32
    4898:	d02b      	beq.n	48f2 <__aeabi_dadd+0x642>
    489a:	2740      	movs	r7, #64	; 0x40
    489c:	1bbe      	subs	r6, r7, r6
    489e:	40b1      	lsls	r1, r6
    48a0:	430d      	orrs	r5, r1
    48a2:	1e69      	subs	r1, r5, #1
    48a4:	418d      	sbcs	r5, r1
    48a6:	2100      	movs	r1, #0
    48a8:	432c      	orrs	r4, r5
    48aa:	e6bc      	b.n	4626 <__aeabi_dadd+0x376>
    48ac:	2180      	movs	r1, #128	; 0x80
    48ae:	2600      	movs	r6, #0
    48b0:	0309      	lsls	r1, r1, #12
    48b2:	4c13      	ldr	r4, [pc, #76]	; (4900 <__aeabi_dadd+0x650>)
    48b4:	2500      	movs	r5, #0
    48b6:	e5bb      	b.n	4430 <__aeabi_dadd+0x180>
    48b8:	430d      	orrs	r5, r1
    48ba:	1e69      	subs	r1, r5, #1
    48bc:	418d      	sbcs	r5, r1
    48be:	2100      	movs	r1, #0
    48c0:	b2ed      	uxtb	r5, r5
    48c2:	e769      	b.n	4798 <__aeabi_dadd+0x4e8>
    48c4:	0001      	movs	r1, r0
    48c6:	0015      	movs	r5, r2
    48c8:	4c0d      	ldr	r4, [pc, #52]	; (4900 <__aeabi_dadd+0x650>)
    48ca:	e51a      	b.n	4302 <__aeabi_dadd+0x52>
    48cc:	0001      	movs	r1, r0
    48ce:	0015      	movs	r5, r2
    48d0:	e517      	b.n	4302 <__aeabi_dadd+0x52>
    48d2:	001c      	movs	r4, r3
    48d4:	000f      	movs	r7, r1
    48d6:	3c20      	subs	r4, #32
    48d8:	40e7      	lsrs	r7, r4
    48da:	003c      	movs	r4, r7
    48dc:	2b20      	cmp	r3, #32
    48de:	d00c      	beq.n	48fa <__aeabi_dadd+0x64a>
    48e0:	2740      	movs	r7, #64	; 0x40
    48e2:	1afb      	subs	r3, r7, r3
    48e4:	4099      	lsls	r1, r3
    48e6:	430d      	orrs	r5, r1
    48e8:	1e69      	subs	r1, r5, #1
    48ea:	418d      	sbcs	r5, r1
    48ec:	2100      	movs	r1, #0
    48ee:	4325      	orrs	r5, r4
    48f0:	e752      	b.n	4798 <__aeabi_dadd+0x4e8>
    48f2:	2100      	movs	r1, #0
    48f4:	e7d4      	b.n	48a0 <__aeabi_dadd+0x5f0>
    48f6:	001d      	movs	r5, r3
    48f8:	e592      	b.n	4420 <__aeabi_dadd+0x170>
    48fa:	2100      	movs	r1, #0
    48fc:	e7f3      	b.n	48e6 <__aeabi_dadd+0x636>
    48fe:	46c0      	nop			; (mov r8, r8)
    4900:	000007ff 	.word	0x000007ff
    4904:	ff7fffff 	.word	0xff7fffff

00004908 <__aeabi_ddiv>:
    4908:	b5f0      	push	{r4, r5, r6, r7, lr}
    490a:	4656      	mov	r6, sl
    490c:	464d      	mov	r5, r9
    490e:	4644      	mov	r4, r8
    4910:	465f      	mov	r7, fp
    4912:	b4f0      	push	{r4, r5, r6, r7}
    4914:	001d      	movs	r5, r3
    4916:	030e      	lsls	r6, r1, #12
    4918:	004c      	lsls	r4, r1, #1
    491a:	0fcb      	lsrs	r3, r1, #31
    491c:	b087      	sub	sp, #28
    491e:	0007      	movs	r7, r0
    4920:	4692      	mov	sl, r2
    4922:	4681      	mov	r9, r0
    4924:	0b36      	lsrs	r6, r6, #12
    4926:	0d64      	lsrs	r4, r4, #21
    4928:	4698      	mov	r8, r3
    492a:	d06a      	beq.n	4a02 <__aeabi_ddiv+0xfa>
    492c:	4b6d      	ldr	r3, [pc, #436]	; (4ae4 <__aeabi_ddiv+0x1dc>)
    492e:	429c      	cmp	r4, r3
    4930:	d035      	beq.n	499e <__aeabi_ddiv+0x96>
    4932:	2280      	movs	r2, #128	; 0x80
    4934:	0f43      	lsrs	r3, r0, #29
    4936:	0412      	lsls	r2, r2, #16
    4938:	4313      	orrs	r3, r2
    493a:	00f6      	lsls	r6, r6, #3
    493c:	431e      	orrs	r6, r3
    493e:	00c3      	lsls	r3, r0, #3
    4940:	4699      	mov	r9, r3
    4942:	4b69      	ldr	r3, [pc, #420]	; (4ae8 <__aeabi_ddiv+0x1e0>)
    4944:	2700      	movs	r7, #0
    4946:	469c      	mov	ip, r3
    4948:	2300      	movs	r3, #0
    494a:	4464      	add	r4, ip
    494c:	9302      	str	r3, [sp, #8]
    494e:	032b      	lsls	r3, r5, #12
    4950:	0068      	lsls	r0, r5, #1
    4952:	0b1b      	lsrs	r3, r3, #12
    4954:	0fed      	lsrs	r5, r5, #31
    4956:	4651      	mov	r1, sl
    4958:	469b      	mov	fp, r3
    495a:	0d40      	lsrs	r0, r0, #21
    495c:	9500      	str	r5, [sp, #0]
    495e:	d100      	bne.n	4962 <__aeabi_ddiv+0x5a>
    4960:	e078      	b.n	4a54 <__aeabi_ddiv+0x14c>
    4962:	4b60      	ldr	r3, [pc, #384]	; (4ae4 <__aeabi_ddiv+0x1dc>)
    4964:	4298      	cmp	r0, r3
    4966:	d06c      	beq.n	4a42 <__aeabi_ddiv+0x13a>
    4968:	465b      	mov	r3, fp
    496a:	00da      	lsls	r2, r3, #3
    496c:	0f4b      	lsrs	r3, r1, #29
    496e:	2180      	movs	r1, #128	; 0x80
    4970:	0409      	lsls	r1, r1, #16
    4972:	430b      	orrs	r3, r1
    4974:	4313      	orrs	r3, r2
    4976:	469b      	mov	fp, r3
    4978:	4653      	mov	r3, sl
    497a:	00d9      	lsls	r1, r3, #3
    497c:	4b5a      	ldr	r3, [pc, #360]	; (4ae8 <__aeabi_ddiv+0x1e0>)
    497e:	469c      	mov	ip, r3
    4980:	2300      	movs	r3, #0
    4982:	4460      	add	r0, ip
    4984:	4642      	mov	r2, r8
    4986:	1a20      	subs	r0, r4, r0
    4988:	406a      	eors	r2, r5
    498a:	4692      	mov	sl, r2
    498c:	9001      	str	r0, [sp, #4]
    498e:	431f      	orrs	r7, r3
    4990:	2f0f      	cmp	r7, #15
    4992:	d900      	bls.n	4996 <__aeabi_ddiv+0x8e>
    4994:	e0b0      	b.n	4af8 <__aeabi_ddiv+0x1f0>
    4996:	4855      	ldr	r0, [pc, #340]	; (4aec <__aeabi_ddiv+0x1e4>)
    4998:	00bf      	lsls	r7, r7, #2
    499a:	59c0      	ldr	r0, [r0, r7]
    499c:	4687      	mov	pc, r0
    499e:	4337      	orrs	r7, r6
    49a0:	d000      	beq.n	49a4 <__aeabi_ddiv+0x9c>
    49a2:	e088      	b.n	4ab6 <__aeabi_ddiv+0x1ae>
    49a4:	2300      	movs	r3, #0
    49a6:	4699      	mov	r9, r3
    49a8:	3302      	adds	r3, #2
    49aa:	2708      	movs	r7, #8
    49ac:	2600      	movs	r6, #0
    49ae:	9302      	str	r3, [sp, #8]
    49b0:	e7cd      	b.n	494e <__aeabi_ddiv+0x46>
    49b2:	4643      	mov	r3, r8
    49b4:	46b3      	mov	fp, r6
    49b6:	4649      	mov	r1, r9
    49b8:	9300      	str	r3, [sp, #0]
    49ba:	9b02      	ldr	r3, [sp, #8]
    49bc:	9a00      	ldr	r2, [sp, #0]
    49be:	4692      	mov	sl, r2
    49c0:	2b02      	cmp	r3, #2
    49c2:	d000      	beq.n	49c6 <__aeabi_ddiv+0xbe>
    49c4:	e1bf      	b.n	4d46 <__aeabi_ddiv+0x43e>
    49c6:	2100      	movs	r1, #0
    49c8:	4653      	mov	r3, sl
    49ca:	2201      	movs	r2, #1
    49cc:	2600      	movs	r6, #0
    49ce:	4689      	mov	r9, r1
    49d0:	401a      	ands	r2, r3
    49d2:	4b44      	ldr	r3, [pc, #272]	; (4ae4 <__aeabi_ddiv+0x1dc>)
    49d4:	2100      	movs	r1, #0
    49d6:	0336      	lsls	r6, r6, #12
    49d8:	0d0c      	lsrs	r4, r1, #20
    49da:	0524      	lsls	r4, r4, #20
    49dc:	0b36      	lsrs	r6, r6, #12
    49de:	4326      	orrs	r6, r4
    49e0:	4c43      	ldr	r4, [pc, #268]	; (4af0 <__aeabi_ddiv+0x1e8>)
    49e2:	051b      	lsls	r3, r3, #20
    49e4:	4026      	ands	r6, r4
    49e6:	431e      	orrs	r6, r3
    49e8:	0076      	lsls	r6, r6, #1
    49ea:	07d2      	lsls	r2, r2, #31
    49ec:	0876      	lsrs	r6, r6, #1
    49ee:	4316      	orrs	r6, r2
    49f0:	4648      	mov	r0, r9
    49f2:	0031      	movs	r1, r6
    49f4:	b007      	add	sp, #28
    49f6:	bc3c      	pop	{r2, r3, r4, r5}
    49f8:	4690      	mov	r8, r2
    49fa:	4699      	mov	r9, r3
    49fc:	46a2      	mov	sl, r4
    49fe:	46ab      	mov	fp, r5
    4a00:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4a02:	0033      	movs	r3, r6
    4a04:	4303      	orrs	r3, r0
    4a06:	d04f      	beq.n	4aa8 <__aeabi_ddiv+0x1a0>
    4a08:	2e00      	cmp	r6, #0
    4a0a:	d100      	bne.n	4a0e <__aeabi_ddiv+0x106>
    4a0c:	e1bc      	b.n	4d88 <__aeabi_ddiv+0x480>
    4a0e:	0030      	movs	r0, r6
    4a10:	f001 fbe2 	bl	61d8 <__clzsi2>
    4a14:	0003      	movs	r3, r0
    4a16:	3b0b      	subs	r3, #11
    4a18:	2b1c      	cmp	r3, #28
    4a1a:	dd00      	ble.n	4a1e <__aeabi_ddiv+0x116>
    4a1c:	e1ad      	b.n	4d7a <__aeabi_ddiv+0x472>
    4a1e:	221d      	movs	r2, #29
    4a20:	0001      	movs	r1, r0
    4a22:	1ad3      	subs	r3, r2, r3
    4a24:	3908      	subs	r1, #8
    4a26:	003a      	movs	r2, r7
    4a28:	408f      	lsls	r7, r1
    4a2a:	408e      	lsls	r6, r1
    4a2c:	40da      	lsrs	r2, r3
    4a2e:	46b9      	mov	r9, r7
    4a30:	4316      	orrs	r6, r2
    4a32:	4b30      	ldr	r3, [pc, #192]	; (4af4 <__aeabi_ddiv+0x1ec>)
    4a34:	2700      	movs	r7, #0
    4a36:	469c      	mov	ip, r3
    4a38:	2300      	movs	r3, #0
    4a3a:	4460      	add	r0, ip
    4a3c:	4244      	negs	r4, r0
    4a3e:	9302      	str	r3, [sp, #8]
    4a40:	e785      	b.n	494e <__aeabi_ddiv+0x46>
    4a42:	4653      	mov	r3, sl
    4a44:	465a      	mov	r2, fp
    4a46:	4313      	orrs	r3, r2
    4a48:	d12c      	bne.n	4aa4 <__aeabi_ddiv+0x19c>
    4a4a:	2300      	movs	r3, #0
    4a4c:	2100      	movs	r1, #0
    4a4e:	469b      	mov	fp, r3
    4a50:	3302      	adds	r3, #2
    4a52:	e797      	b.n	4984 <__aeabi_ddiv+0x7c>
    4a54:	430b      	orrs	r3, r1
    4a56:	d020      	beq.n	4a9a <__aeabi_ddiv+0x192>
    4a58:	465b      	mov	r3, fp
    4a5a:	2b00      	cmp	r3, #0
    4a5c:	d100      	bne.n	4a60 <__aeabi_ddiv+0x158>
    4a5e:	e19e      	b.n	4d9e <__aeabi_ddiv+0x496>
    4a60:	4658      	mov	r0, fp
    4a62:	f001 fbb9 	bl	61d8 <__clzsi2>
    4a66:	0003      	movs	r3, r0
    4a68:	3b0b      	subs	r3, #11
    4a6a:	2b1c      	cmp	r3, #28
    4a6c:	dd00      	ble.n	4a70 <__aeabi_ddiv+0x168>
    4a6e:	e18f      	b.n	4d90 <__aeabi_ddiv+0x488>
    4a70:	0002      	movs	r2, r0
    4a72:	4659      	mov	r1, fp
    4a74:	3a08      	subs	r2, #8
    4a76:	4091      	lsls	r1, r2
    4a78:	468b      	mov	fp, r1
    4a7a:	211d      	movs	r1, #29
    4a7c:	1acb      	subs	r3, r1, r3
    4a7e:	4651      	mov	r1, sl
    4a80:	40d9      	lsrs	r1, r3
    4a82:	000b      	movs	r3, r1
    4a84:	4659      	mov	r1, fp
    4a86:	430b      	orrs	r3, r1
    4a88:	4651      	mov	r1, sl
    4a8a:	469b      	mov	fp, r3
    4a8c:	4091      	lsls	r1, r2
    4a8e:	4b19      	ldr	r3, [pc, #100]	; (4af4 <__aeabi_ddiv+0x1ec>)
    4a90:	469c      	mov	ip, r3
    4a92:	4460      	add	r0, ip
    4a94:	4240      	negs	r0, r0
    4a96:	2300      	movs	r3, #0
    4a98:	e774      	b.n	4984 <__aeabi_ddiv+0x7c>
    4a9a:	2300      	movs	r3, #0
    4a9c:	2100      	movs	r1, #0
    4a9e:	469b      	mov	fp, r3
    4aa0:	3301      	adds	r3, #1
    4aa2:	e76f      	b.n	4984 <__aeabi_ddiv+0x7c>
    4aa4:	2303      	movs	r3, #3
    4aa6:	e76d      	b.n	4984 <__aeabi_ddiv+0x7c>
    4aa8:	2300      	movs	r3, #0
    4aaa:	4699      	mov	r9, r3
    4aac:	3301      	adds	r3, #1
    4aae:	2704      	movs	r7, #4
    4ab0:	2600      	movs	r6, #0
    4ab2:	9302      	str	r3, [sp, #8]
    4ab4:	e74b      	b.n	494e <__aeabi_ddiv+0x46>
    4ab6:	2303      	movs	r3, #3
    4ab8:	270c      	movs	r7, #12
    4aba:	9302      	str	r3, [sp, #8]
    4abc:	e747      	b.n	494e <__aeabi_ddiv+0x46>
    4abe:	2201      	movs	r2, #1
    4ac0:	1ad5      	subs	r5, r2, r3
    4ac2:	2d38      	cmp	r5, #56	; 0x38
    4ac4:	dc00      	bgt.n	4ac8 <__aeabi_ddiv+0x1c0>
    4ac6:	e1b0      	b.n	4e2a <__aeabi_ddiv+0x522>
    4ac8:	4653      	mov	r3, sl
    4aca:	401a      	ands	r2, r3
    4acc:	2100      	movs	r1, #0
    4ace:	2300      	movs	r3, #0
    4ad0:	2600      	movs	r6, #0
    4ad2:	4689      	mov	r9, r1
    4ad4:	e77e      	b.n	49d4 <__aeabi_ddiv+0xcc>
    4ad6:	2300      	movs	r3, #0
    4ad8:	2680      	movs	r6, #128	; 0x80
    4ada:	4699      	mov	r9, r3
    4adc:	2200      	movs	r2, #0
    4ade:	0336      	lsls	r6, r6, #12
    4ae0:	4b00      	ldr	r3, [pc, #0]	; (4ae4 <__aeabi_ddiv+0x1dc>)
    4ae2:	e777      	b.n	49d4 <__aeabi_ddiv+0xcc>
    4ae4:	000007ff 	.word	0x000007ff
    4ae8:	fffffc01 	.word	0xfffffc01
    4aec:	00006570 	.word	0x00006570
    4af0:	800fffff 	.word	0x800fffff
    4af4:	000003f3 	.word	0x000003f3
    4af8:	455e      	cmp	r6, fp
    4afa:	d900      	bls.n	4afe <__aeabi_ddiv+0x1f6>
    4afc:	e172      	b.n	4de4 <__aeabi_ddiv+0x4dc>
    4afe:	d100      	bne.n	4b02 <__aeabi_ddiv+0x1fa>
    4b00:	e16d      	b.n	4dde <__aeabi_ddiv+0x4d6>
    4b02:	9b01      	ldr	r3, [sp, #4]
    4b04:	464d      	mov	r5, r9
    4b06:	3b01      	subs	r3, #1
    4b08:	9301      	str	r3, [sp, #4]
    4b0a:	2300      	movs	r3, #0
    4b0c:	0034      	movs	r4, r6
    4b0e:	9302      	str	r3, [sp, #8]
    4b10:	465b      	mov	r3, fp
    4b12:	021e      	lsls	r6, r3, #8
    4b14:	0e0b      	lsrs	r3, r1, #24
    4b16:	431e      	orrs	r6, r3
    4b18:	020b      	lsls	r3, r1, #8
    4b1a:	9303      	str	r3, [sp, #12]
    4b1c:	0c33      	lsrs	r3, r6, #16
    4b1e:	4699      	mov	r9, r3
    4b20:	0433      	lsls	r3, r6, #16
    4b22:	0c1b      	lsrs	r3, r3, #16
    4b24:	4649      	mov	r1, r9
    4b26:	0020      	movs	r0, r4
    4b28:	9300      	str	r3, [sp, #0]
    4b2a:	f001 fa8f 	bl	604c <__aeabi_uidiv>
    4b2e:	9b00      	ldr	r3, [sp, #0]
    4b30:	0037      	movs	r7, r6
    4b32:	4343      	muls	r3, r0
    4b34:	0006      	movs	r6, r0
    4b36:	4649      	mov	r1, r9
    4b38:	0020      	movs	r0, r4
    4b3a:	4698      	mov	r8, r3
    4b3c:	f001 fb0c 	bl	6158 <__aeabi_uidivmod>
    4b40:	0c2c      	lsrs	r4, r5, #16
    4b42:	0409      	lsls	r1, r1, #16
    4b44:	430c      	orrs	r4, r1
    4b46:	45a0      	cmp	r8, r4
    4b48:	d909      	bls.n	4b5e <__aeabi_ddiv+0x256>
    4b4a:	19e4      	adds	r4, r4, r7
    4b4c:	1e73      	subs	r3, r6, #1
    4b4e:	42a7      	cmp	r7, r4
    4b50:	d900      	bls.n	4b54 <__aeabi_ddiv+0x24c>
    4b52:	e15c      	b.n	4e0e <__aeabi_ddiv+0x506>
    4b54:	45a0      	cmp	r8, r4
    4b56:	d800      	bhi.n	4b5a <__aeabi_ddiv+0x252>
    4b58:	e159      	b.n	4e0e <__aeabi_ddiv+0x506>
    4b5a:	3e02      	subs	r6, #2
    4b5c:	19e4      	adds	r4, r4, r7
    4b5e:	4643      	mov	r3, r8
    4b60:	1ae4      	subs	r4, r4, r3
    4b62:	4649      	mov	r1, r9
    4b64:	0020      	movs	r0, r4
    4b66:	f001 fa71 	bl	604c <__aeabi_uidiv>
    4b6a:	0003      	movs	r3, r0
    4b6c:	9a00      	ldr	r2, [sp, #0]
    4b6e:	4680      	mov	r8, r0
    4b70:	4353      	muls	r3, r2
    4b72:	4649      	mov	r1, r9
    4b74:	0020      	movs	r0, r4
    4b76:	469b      	mov	fp, r3
    4b78:	f001 faee 	bl	6158 <__aeabi_uidivmod>
    4b7c:	042a      	lsls	r2, r5, #16
    4b7e:	0409      	lsls	r1, r1, #16
    4b80:	0c12      	lsrs	r2, r2, #16
    4b82:	430a      	orrs	r2, r1
    4b84:	4593      	cmp	fp, r2
    4b86:	d90d      	bls.n	4ba4 <__aeabi_ddiv+0x29c>
    4b88:	4643      	mov	r3, r8
    4b8a:	19d2      	adds	r2, r2, r7
    4b8c:	3b01      	subs	r3, #1
    4b8e:	4297      	cmp	r7, r2
    4b90:	d900      	bls.n	4b94 <__aeabi_ddiv+0x28c>
    4b92:	e13a      	b.n	4e0a <__aeabi_ddiv+0x502>
    4b94:	4593      	cmp	fp, r2
    4b96:	d800      	bhi.n	4b9a <__aeabi_ddiv+0x292>
    4b98:	e137      	b.n	4e0a <__aeabi_ddiv+0x502>
    4b9a:	2302      	movs	r3, #2
    4b9c:	425b      	negs	r3, r3
    4b9e:	469c      	mov	ip, r3
    4ba0:	19d2      	adds	r2, r2, r7
    4ba2:	44e0      	add	r8, ip
    4ba4:	465b      	mov	r3, fp
    4ba6:	1ad2      	subs	r2, r2, r3
    4ba8:	4643      	mov	r3, r8
    4baa:	0436      	lsls	r6, r6, #16
    4bac:	4333      	orrs	r3, r6
    4bae:	469b      	mov	fp, r3
    4bb0:	9903      	ldr	r1, [sp, #12]
    4bb2:	0c18      	lsrs	r0, r3, #16
    4bb4:	0c0b      	lsrs	r3, r1, #16
    4bb6:	001d      	movs	r5, r3
    4bb8:	9305      	str	r3, [sp, #20]
    4bba:	0409      	lsls	r1, r1, #16
    4bbc:	465b      	mov	r3, fp
    4bbe:	0c09      	lsrs	r1, r1, #16
    4bc0:	000c      	movs	r4, r1
    4bc2:	041b      	lsls	r3, r3, #16
    4bc4:	0c1b      	lsrs	r3, r3, #16
    4bc6:	4344      	muls	r4, r0
    4bc8:	9104      	str	r1, [sp, #16]
    4bca:	4359      	muls	r1, r3
    4bcc:	436b      	muls	r3, r5
    4bce:	4368      	muls	r0, r5
    4bd0:	191b      	adds	r3, r3, r4
    4bd2:	0c0d      	lsrs	r5, r1, #16
    4bd4:	18eb      	adds	r3, r5, r3
    4bd6:	429c      	cmp	r4, r3
    4bd8:	d903      	bls.n	4be2 <__aeabi_ddiv+0x2da>
    4bda:	2480      	movs	r4, #128	; 0x80
    4bdc:	0264      	lsls	r4, r4, #9
    4bde:	46a4      	mov	ip, r4
    4be0:	4460      	add	r0, ip
    4be2:	0c1c      	lsrs	r4, r3, #16
    4be4:	0409      	lsls	r1, r1, #16
    4be6:	041b      	lsls	r3, r3, #16
    4be8:	0c09      	lsrs	r1, r1, #16
    4bea:	1820      	adds	r0, r4, r0
    4bec:	185d      	adds	r5, r3, r1
    4bee:	4282      	cmp	r2, r0
    4bf0:	d200      	bcs.n	4bf4 <__aeabi_ddiv+0x2ec>
    4bf2:	e0de      	b.n	4db2 <__aeabi_ddiv+0x4aa>
    4bf4:	d100      	bne.n	4bf8 <__aeabi_ddiv+0x2f0>
    4bf6:	e0d7      	b.n	4da8 <__aeabi_ddiv+0x4a0>
    4bf8:	1a16      	subs	r6, r2, r0
    4bfa:	9b02      	ldr	r3, [sp, #8]
    4bfc:	469c      	mov	ip, r3
    4bfe:	1b5d      	subs	r5, r3, r5
    4c00:	45ac      	cmp	ip, r5
    4c02:	419b      	sbcs	r3, r3
    4c04:	425b      	negs	r3, r3
    4c06:	1af6      	subs	r6, r6, r3
    4c08:	42b7      	cmp	r7, r6
    4c0a:	d100      	bne.n	4c0e <__aeabi_ddiv+0x306>
    4c0c:	e106      	b.n	4e1c <__aeabi_ddiv+0x514>
    4c0e:	4649      	mov	r1, r9
    4c10:	0030      	movs	r0, r6
    4c12:	f001 fa1b 	bl	604c <__aeabi_uidiv>
    4c16:	9b00      	ldr	r3, [sp, #0]
    4c18:	0004      	movs	r4, r0
    4c1a:	4343      	muls	r3, r0
    4c1c:	4649      	mov	r1, r9
    4c1e:	0030      	movs	r0, r6
    4c20:	4698      	mov	r8, r3
    4c22:	f001 fa99 	bl	6158 <__aeabi_uidivmod>
    4c26:	0c2e      	lsrs	r6, r5, #16
    4c28:	0409      	lsls	r1, r1, #16
    4c2a:	430e      	orrs	r6, r1
    4c2c:	45b0      	cmp	r8, r6
    4c2e:	d909      	bls.n	4c44 <__aeabi_ddiv+0x33c>
    4c30:	19f6      	adds	r6, r6, r7
    4c32:	1e63      	subs	r3, r4, #1
    4c34:	42b7      	cmp	r7, r6
    4c36:	d900      	bls.n	4c3a <__aeabi_ddiv+0x332>
    4c38:	e0f3      	b.n	4e22 <__aeabi_ddiv+0x51a>
    4c3a:	45b0      	cmp	r8, r6
    4c3c:	d800      	bhi.n	4c40 <__aeabi_ddiv+0x338>
    4c3e:	e0f0      	b.n	4e22 <__aeabi_ddiv+0x51a>
    4c40:	3c02      	subs	r4, #2
    4c42:	19f6      	adds	r6, r6, r7
    4c44:	4643      	mov	r3, r8
    4c46:	1af3      	subs	r3, r6, r3
    4c48:	4649      	mov	r1, r9
    4c4a:	0018      	movs	r0, r3
    4c4c:	9302      	str	r3, [sp, #8]
    4c4e:	f001 f9fd 	bl	604c <__aeabi_uidiv>
    4c52:	9b00      	ldr	r3, [sp, #0]
    4c54:	0006      	movs	r6, r0
    4c56:	4343      	muls	r3, r0
    4c58:	4649      	mov	r1, r9
    4c5a:	9802      	ldr	r0, [sp, #8]
    4c5c:	4698      	mov	r8, r3
    4c5e:	f001 fa7b 	bl	6158 <__aeabi_uidivmod>
    4c62:	042d      	lsls	r5, r5, #16
    4c64:	0409      	lsls	r1, r1, #16
    4c66:	0c2d      	lsrs	r5, r5, #16
    4c68:	430d      	orrs	r5, r1
    4c6a:	45a8      	cmp	r8, r5
    4c6c:	d909      	bls.n	4c82 <__aeabi_ddiv+0x37a>
    4c6e:	19ed      	adds	r5, r5, r7
    4c70:	1e73      	subs	r3, r6, #1
    4c72:	42af      	cmp	r7, r5
    4c74:	d900      	bls.n	4c78 <__aeabi_ddiv+0x370>
    4c76:	e0d6      	b.n	4e26 <__aeabi_ddiv+0x51e>
    4c78:	45a8      	cmp	r8, r5
    4c7a:	d800      	bhi.n	4c7e <__aeabi_ddiv+0x376>
    4c7c:	e0d3      	b.n	4e26 <__aeabi_ddiv+0x51e>
    4c7e:	3e02      	subs	r6, #2
    4c80:	19ed      	adds	r5, r5, r7
    4c82:	0424      	lsls	r4, r4, #16
    4c84:	0021      	movs	r1, r4
    4c86:	4643      	mov	r3, r8
    4c88:	4331      	orrs	r1, r6
    4c8a:	9e04      	ldr	r6, [sp, #16]
    4c8c:	9a05      	ldr	r2, [sp, #20]
    4c8e:	0030      	movs	r0, r6
    4c90:	1aed      	subs	r5, r5, r3
    4c92:	040b      	lsls	r3, r1, #16
    4c94:	0c0c      	lsrs	r4, r1, #16
    4c96:	0c1b      	lsrs	r3, r3, #16
    4c98:	4358      	muls	r0, r3
    4c9a:	4366      	muls	r6, r4
    4c9c:	4353      	muls	r3, r2
    4c9e:	4354      	muls	r4, r2
    4ca0:	199a      	adds	r2, r3, r6
    4ca2:	0c03      	lsrs	r3, r0, #16
    4ca4:	189b      	adds	r3, r3, r2
    4ca6:	429e      	cmp	r6, r3
    4ca8:	d903      	bls.n	4cb2 <__aeabi_ddiv+0x3aa>
    4caa:	2280      	movs	r2, #128	; 0x80
    4cac:	0252      	lsls	r2, r2, #9
    4cae:	4694      	mov	ip, r2
    4cb0:	4464      	add	r4, ip
    4cb2:	0c1a      	lsrs	r2, r3, #16
    4cb4:	0400      	lsls	r0, r0, #16
    4cb6:	041b      	lsls	r3, r3, #16
    4cb8:	0c00      	lsrs	r0, r0, #16
    4cba:	1914      	adds	r4, r2, r4
    4cbc:	181b      	adds	r3, r3, r0
    4cbe:	42a5      	cmp	r5, r4
    4cc0:	d350      	bcc.n	4d64 <__aeabi_ddiv+0x45c>
    4cc2:	d04d      	beq.n	4d60 <__aeabi_ddiv+0x458>
    4cc4:	2301      	movs	r3, #1
    4cc6:	4319      	orrs	r1, r3
    4cc8:	4a96      	ldr	r2, [pc, #600]	; (4f24 <__aeabi_ddiv+0x61c>)
    4cca:	9b01      	ldr	r3, [sp, #4]
    4ccc:	4694      	mov	ip, r2
    4cce:	4463      	add	r3, ip
    4cd0:	2b00      	cmp	r3, #0
    4cd2:	dc00      	bgt.n	4cd6 <__aeabi_ddiv+0x3ce>
    4cd4:	e6f3      	b.n	4abe <__aeabi_ddiv+0x1b6>
    4cd6:	074a      	lsls	r2, r1, #29
    4cd8:	d009      	beq.n	4cee <__aeabi_ddiv+0x3e6>
    4cda:	220f      	movs	r2, #15
    4cdc:	400a      	ands	r2, r1
    4cde:	2a04      	cmp	r2, #4
    4ce0:	d005      	beq.n	4cee <__aeabi_ddiv+0x3e6>
    4ce2:	1d0a      	adds	r2, r1, #4
    4ce4:	428a      	cmp	r2, r1
    4ce6:	4189      	sbcs	r1, r1
    4ce8:	4249      	negs	r1, r1
    4cea:	448b      	add	fp, r1
    4cec:	0011      	movs	r1, r2
    4cee:	465a      	mov	r2, fp
    4cf0:	01d2      	lsls	r2, r2, #7
    4cf2:	d508      	bpl.n	4d06 <__aeabi_ddiv+0x3fe>
    4cf4:	465a      	mov	r2, fp
    4cf6:	4b8c      	ldr	r3, [pc, #560]	; (4f28 <__aeabi_ddiv+0x620>)
    4cf8:	401a      	ands	r2, r3
    4cfa:	4693      	mov	fp, r2
    4cfc:	2280      	movs	r2, #128	; 0x80
    4cfe:	00d2      	lsls	r2, r2, #3
    4d00:	4694      	mov	ip, r2
    4d02:	9b01      	ldr	r3, [sp, #4]
    4d04:	4463      	add	r3, ip
    4d06:	4a89      	ldr	r2, [pc, #548]	; (4f2c <__aeabi_ddiv+0x624>)
    4d08:	4293      	cmp	r3, r2
    4d0a:	dd00      	ble.n	4d0e <__aeabi_ddiv+0x406>
    4d0c:	e65b      	b.n	49c6 <__aeabi_ddiv+0xbe>
    4d0e:	465a      	mov	r2, fp
    4d10:	08c9      	lsrs	r1, r1, #3
    4d12:	0750      	lsls	r0, r2, #29
    4d14:	4308      	orrs	r0, r1
    4d16:	0256      	lsls	r6, r2, #9
    4d18:	4651      	mov	r1, sl
    4d1a:	2201      	movs	r2, #1
    4d1c:	055b      	lsls	r3, r3, #21
    4d1e:	4681      	mov	r9, r0
    4d20:	0b36      	lsrs	r6, r6, #12
    4d22:	0d5b      	lsrs	r3, r3, #21
    4d24:	400a      	ands	r2, r1
    4d26:	e655      	b.n	49d4 <__aeabi_ddiv+0xcc>
    4d28:	2380      	movs	r3, #128	; 0x80
    4d2a:	031b      	lsls	r3, r3, #12
    4d2c:	421e      	tst	r6, r3
    4d2e:	d011      	beq.n	4d54 <__aeabi_ddiv+0x44c>
    4d30:	465a      	mov	r2, fp
    4d32:	421a      	tst	r2, r3
    4d34:	d10e      	bne.n	4d54 <__aeabi_ddiv+0x44c>
    4d36:	465e      	mov	r6, fp
    4d38:	431e      	orrs	r6, r3
    4d3a:	0336      	lsls	r6, r6, #12
    4d3c:	0b36      	lsrs	r6, r6, #12
    4d3e:	002a      	movs	r2, r5
    4d40:	4689      	mov	r9, r1
    4d42:	4b7b      	ldr	r3, [pc, #492]	; (4f30 <__aeabi_ddiv+0x628>)
    4d44:	e646      	b.n	49d4 <__aeabi_ddiv+0xcc>
    4d46:	2b03      	cmp	r3, #3
    4d48:	d100      	bne.n	4d4c <__aeabi_ddiv+0x444>
    4d4a:	e0e1      	b.n	4f10 <__aeabi_ddiv+0x608>
    4d4c:	2b01      	cmp	r3, #1
    4d4e:	d1bb      	bne.n	4cc8 <__aeabi_ddiv+0x3c0>
    4d50:	401a      	ands	r2, r3
    4d52:	e6bb      	b.n	4acc <__aeabi_ddiv+0x1c4>
    4d54:	431e      	orrs	r6, r3
    4d56:	0336      	lsls	r6, r6, #12
    4d58:	0b36      	lsrs	r6, r6, #12
    4d5a:	4642      	mov	r2, r8
    4d5c:	4b74      	ldr	r3, [pc, #464]	; (4f30 <__aeabi_ddiv+0x628>)
    4d5e:	e639      	b.n	49d4 <__aeabi_ddiv+0xcc>
    4d60:	2b00      	cmp	r3, #0
    4d62:	d0b1      	beq.n	4cc8 <__aeabi_ddiv+0x3c0>
    4d64:	197d      	adds	r5, r7, r5
    4d66:	1e4a      	subs	r2, r1, #1
    4d68:	42af      	cmp	r7, r5
    4d6a:	d952      	bls.n	4e12 <__aeabi_ddiv+0x50a>
    4d6c:	0011      	movs	r1, r2
    4d6e:	42a5      	cmp	r5, r4
    4d70:	d1a8      	bne.n	4cc4 <__aeabi_ddiv+0x3bc>
    4d72:	9a03      	ldr	r2, [sp, #12]
    4d74:	429a      	cmp	r2, r3
    4d76:	d1a5      	bne.n	4cc4 <__aeabi_ddiv+0x3bc>
    4d78:	e7a6      	b.n	4cc8 <__aeabi_ddiv+0x3c0>
    4d7a:	0003      	movs	r3, r0
    4d7c:	003e      	movs	r6, r7
    4d7e:	3b28      	subs	r3, #40	; 0x28
    4d80:	409e      	lsls	r6, r3
    4d82:	2300      	movs	r3, #0
    4d84:	4699      	mov	r9, r3
    4d86:	e654      	b.n	4a32 <__aeabi_ddiv+0x12a>
    4d88:	f001 fa26 	bl	61d8 <__clzsi2>
    4d8c:	3020      	adds	r0, #32
    4d8e:	e641      	b.n	4a14 <__aeabi_ddiv+0x10c>
    4d90:	0003      	movs	r3, r0
    4d92:	4652      	mov	r2, sl
    4d94:	3b28      	subs	r3, #40	; 0x28
    4d96:	409a      	lsls	r2, r3
    4d98:	2100      	movs	r1, #0
    4d9a:	4693      	mov	fp, r2
    4d9c:	e677      	b.n	4a8e <__aeabi_ddiv+0x186>
    4d9e:	4650      	mov	r0, sl
    4da0:	f001 fa1a 	bl	61d8 <__clzsi2>
    4da4:	3020      	adds	r0, #32
    4da6:	e65e      	b.n	4a66 <__aeabi_ddiv+0x15e>
    4da8:	9b02      	ldr	r3, [sp, #8]
    4daa:	2600      	movs	r6, #0
    4dac:	42ab      	cmp	r3, r5
    4dae:	d300      	bcc.n	4db2 <__aeabi_ddiv+0x4aa>
    4db0:	e723      	b.n	4bfa <__aeabi_ddiv+0x2f2>
    4db2:	9e03      	ldr	r6, [sp, #12]
    4db4:	9902      	ldr	r1, [sp, #8]
    4db6:	46b4      	mov	ip, r6
    4db8:	4461      	add	r1, ip
    4dba:	4688      	mov	r8, r1
    4dbc:	45b0      	cmp	r8, r6
    4dbe:	41b6      	sbcs	r6, r6
    4dc0:	465b      	mov	r3, fp
    4dc2:	4276      	negs	r6, r6
    4dc4:	19f6      	adds	r6, r6, r7
    4dc6:	18b2      	adds	r2, r6, r2
    4dc8:	3b01      	subs	r3, #1
    4dca:	9102      	str	r1, [sp, #8]
    4dcc:	4297      	cmp	r7, r2
    4dce:	d213      	bcs.n	4df8 <__aeabi_ddiv+0x4f0>
    4dd0:	4290      	cmp	r0, r2
    4dd2:	d84f      	bhi.n	4e74 <__aeabi_ddiv+0x56c>
    4dd4:	d100      	bne.n	4dd8 <__aeabi_ddiv+0x4d0>
    4dd6:	e08e      	b.n	4ef6 <__aeabi_ddiv+0x5ee>
    4dd8:	1a16      	subs	r6, r2, r0
    4dda:	469b      	mov	fp, r3
    4ddc:	e70d      	b.n	4bfa <__aeabi_ddiv+0x2f2>
    4dde:	4589      	cmp	r9, r1
    4de0:	d200      	bcs.n	4de4 <__aeabi_ddiv+0x4dc>
    4de2:	e68e      	b.n	4b02 <__aeabi_ddiv+0x1fa>
    4de4:	0874      	lsrs	r4, r6, #1
    4de6:	464b      	mov	r3, r9
    4de8:	07f6      	lsls	r6, r6, #31
    4dea:	0035      	movs	r5, r6
    4dec:	085b      	lsrs	r3, r3, #1
    4dee:	431d      	orrs	r5, r3
    4df0:	464b      	mov	r3, r9
    4df2:	07db      	lsls	r3, r3, #31
    4df4:	9302      	str	r3, [sp, #8]
    4df6:	e68b      	b.n	4b10 <__aeabi_ddiv+0x208>
    4df8:	4297      	cmp	r7, r2
    4dfa:	d1ed      	bne.n	4dd8 <__aeabi_ddiv+0x4d0>
    4dfc:	9903      	ldr	r1, [sp, #12]
    4dfe:	9c02      	ldr	r4, [sp, #8]
    4e00:	42a1      	cmp	r1, r4
    4e02:	d9e5      	bls.n	4dd0 <__aeabi_ddiv+0x4c8>
    4e04:	1a3e      	subs	r6, r7, r0
    4e06:	469b      	mov	fp, r3
    4e08:	e6f7      	b.n	4bfa <__aeabi_ddiv+0x2f2>
    4e0a:	4698      	mov	r8, r3
    4e0c:	e6ca      	b.n	4ba4 <__aeabi_ddiv+0x29c>
    4e0e:	001e      	movs	r6, r3
    4e10:	e6a5      	b.n	4b5e <__aeabi_ddiv+0x256>
    4e12:	42ac      	cmp	r4, r5
    4e14:	d83e      	bhi.n	4e94 <__aeabi_ddiv+0x58c>
    4e16:	d074      	beq.n	4f02 <__aeabi_ddiv+0x5fa>
    4e18:	0011      	movs	r1, r2
    4e1a:	e753      	b.n	4cc4 <__aeabi_ddiv+0x3bc>
    4e1c:	2101      	movs	r1, #1
    4e1e:	4249      	negs	r1, r1
    4e20:	e752      	b.n	4cc8 <__aeabi_ddiv+0x3c0>
    4e22:	001c      	movs	r4, r3
    4e24:	e70e      	b.n	4c44 <__aeabi_ddiv+0x33c>
    4e26:	001e      	movs	r6, r3
    4e28:	e72b      	b.n	4c82 <__aeabi_ddiv+0x37a>
    4e2a:	2d1f      	cmp	r5, #31
    4e2c:	dc3c      	bgt.n	4ea8 <__aeabi_ddiv+0x5a0>
    4e2e:	2320      	movs	r3, #32
    4e30:	000a      	movs	r2, r1
    4e32:	4658      	mov	r0, fp
    4e34:	1b5b      	subs	r3, r3, r5
    4e36:	4098      	lsls	r0, r3
    4e38:	40ea      	lsrs	r2, r5
    4e3a:	4099      	lsls	r1, r3
    4e3c:	4302      	orrs	r2, r0
    4e3e:	1e48      	subs	r0, r1, #1
    4e40:	4181      	sbcs	r1, r0
    4e42:	465e      	mov	r6, fp
    4e44:	4311      	orrs	r1, r2
    4e46:	40ee      	lsrs	r6, r5
    4e48:	074b      	lsls	r3, r1, #29
    4e4a:	d009      	beq.n	4e60 <__aeabi_ddiv+0x558>
    4e4c:	230f      	movs	r3, #15
    4e4e:	400b      	ands	r3, r1
    4e50:	2b04      	cmp	r3, #4
    4e52:	d005      	beq.n	4e60 <__aeabi_ddiv+0x558>
    4e54:	000b      	movs	r3, r1
    4e56:	1d19      	adds	r1, r3, #4
    4e58:	4299      	cmp	r1, r3
    4e5a:	419b      	sbcs	r3, r3
    4e5c:	425b      	negs	r3, r3
    4e5e:	18f6      	adds	r6, r6, r3
    4e60:	0233      	lsls	r3, r6, #8
    4e62:	d53c      	bpl.n	4ede <__aeabi_ddiv+0x5d6>
    4e64:	4653      	mov	r3, sl
    4e66:	2201      	movs	r2, #1
    4e68:	2100      	movs	r1, #0
    4e6a:	401a      	ands	r2, r3
    4e6c:	2600      	movs	r6, #0
    4e6e:	2301      	movs	r3, #1
    4e70:	4689      	mov	r9, r1
    4e72:	e5af      	b.n	49d4 <__aeabi_ddiv+0xcc>
    4e74:	2302      	movs	r3, #2
    4e76:	425b      	negs	r3, r3
    4e78:	469c      	mov	ip, r3
    4e7a:	9c03      	ldr	r4, [sp, #12]
    4e7c:	44e3      	add	fp, ip
    4e7e:	46a4      	mov	ip, r4
    4e80:	9b02      	ldr	r3, [sp, #8]
    4e82:	4463      	add	r3, ip
    4e84:	4698      	mov	r8, r3
    4e86:	45a0      	cmp	r8, r4
    4e88:	41b6      	sbcs	r6, r6
    4e8a:	4276      	negs	r6, r6
    4e8c:	19f6      	adds	r6, r6, r7
    4e8e:	9302      	str	r3, [sp, #8]
    4e90:	18b2      	adds	r2, r6, r2
    4e92:	e6b1      	b.n	4bf8 <__aeabi_ddiv+0x2f0>
    4e94:	9803      	ldr	r0, [sp, #12]
    4e96:	1e8a      	subs	r2, r1, #2
    4e98:	0041      	lsls	r1, r0, #1
    4e9a:	4281      	cmp	r1, r0
    4e9c:	41b6      	sbcs	r6, r6
    4e9e:	4276      	negs	r6, r6
    4ea0:	19f6      	adds	r6, r6, r7
    4ea2:	19ad      	adds	r5, r5, r6
    4ea4:	9103      	str	r1, [sp, #12]
    4ea6:	e761      	b.n	4d6c <__aeabi_ddiv+0x464>
    4ea8:	221f      	movs	r2, #31
    4eaa:	4252      	negs	r2, r2
    4eac:	1ad3      	subs	r3, r2, r3
    4eae:	465a      	mov	r2, fp
    4eb0:	40da      	lsrs	r2, r3
    4eb2:	0013      	movs	r3, r2
    4eb4:	2d20      	cmp	r5, #32
    4eb6:	d029      	beq.n	4f0c <__aeabi_ddiv+0x604>
    4eb8:	2240      	movs	r2, #64	; 0x40
    4eba:	4658      	mov	r0, fp
    4ebc:	1b55      	subs	r5, r2, r5
    4ebe:	40a8      	lsls	r0, r5
    4ec0:	4301      	orrs	r1, r0
    4ec2:	1e48      	subs	r0, r1, #1
    4ec4:	4181      	sbcs	r1, r0
    4ec6:	2007      	movs	r0, #7
    4ec8:	430b      	orrs	r3, r1
    4eca:	4018      	ands	r0, r3
    4ecc:	2600      	movs	r6, #0
    4ece:	2800      	cmp	r0, #0
    4ed0:	d009      	beq.n	4ee6 <__aeabi_ddiv+0x5de>
    4ed2:	220f      	movs	r2, #15
    4ed4:	2600      	movs	r6, #0
    4ed6:	401a      	ands	r2, r3
    4ed8:	0019      	movs	r1, r3
    4eda:	2a04      	cmp	r2, #4
    4edc:	d1bb      	bne.n	4e56 <__aeabi_ddiv+0x54e>
    4ede:	000b      	movs	r3, r1
    4ee0:	0770      	lsls	r0, r6, #29
    4ee2:	0276      	lsls	r6, r6, #9
    4ee4:	0b36      	lsrs	r6, r6, #12
    4ee6:	08db      	lsrs	r3, r3, #3
    4ee8:	4303      	orrs	r3, r0
    4eea:	4699      	mov	r9, r3
    4eec:	2201      	movs	r2, #1
    4eee:	4653      	mov	r3, sl
    4ef0:	401a      	ands	r2, r3
    4ef2:	2300      	movs	r3, #0
    4ef4:	e56e      	b.n	49d4 <__aeabi_ddiv+0xcc>
    4ef6:	9902      	ldr	r1, [sp, #8]
    4ef8:	428d      	cmp	r5, r1
    4efa:	d8bb      	bhi.n	4e74 <__aeabi_ddiv+0x56c>
    4efc:	469b      	mov	fp, r3
    4efe:	2600      	movs	r6, #0
    4f00:	e67b      	b.n	4bfa <__aeabi_ddiv+0x2f2>
    4f02:	9803      	ldr	r0, [sp, #12]
    4f04:	4298      	cmp	r0, r3
    4f06:	d3c5      	bcc.n	4e94 <__aeabi_ddiv+0x58c>
    4f08:	0011      	movs	r1, r2
    4f0a:	e732      	b.n	4d72 <__aeabi_ddiv+0x46a>
    4f0c:	2000      	movs	r0, #0
    4f0e:	e7d7      	b.n	4ec0 <__aeabi_ddiv+0x5b8>
    4f10:	2680      	movs	r6, #128	; 0x80
    4f12:	465b      	mov	r3, fp
    4f14:	0336      	lsls	r6, r6, #12
    4f16:	431e      	orrs	r6, r3
    4f18:	0336      	lsls	r6, r6, #12
    4f1a:	0b36      	lsrs	r6, r6, #12
    4f1c:	9a00      	ldr	r2, [sp, #0]
    4f1e:	4689      	mov	r9, r1
    4f20:	4b03      	ldr	r3, [pc, #12]	; (4f30 <__aeabi_ddiv+0x628>)
    4f22:	e557      	b.n	49d4 <__aeabi_ddiv+0xcc>
    4f24:	000003ff 	.word	0x000003ff
    4f28:	feffffff 	.word	0xfeffffff
    4f2c:	000007fe 	.word	0x000007fe
    4f30:	000007ff 	.word	0x000007ff

00004f34 <__eqdf2>:
    4f34:	b5f0      	push	{r4, r5, r6, r7, lr}
    4f36:	465f      	mov	r7, fp
    4f38:	4656      	mov	r6, sl
    4f3a:	464d      	mov	r5, r9
    4f3c:	4644      	mov	r4, r8
    4f3e:	b4f0      	push	{r4, r5, r6, r7}
    4f40:	031f      	lsls	r7, r3, #12
    4f42:	005c      	lsls	r4, r3, #1
    4f44:	0fdb      	lsrs	r3, r3, #31
    4f46:	469a      	mov	sl, r3
    4f48:	4b19      	ldr	r3, [pc, #100]	; (4fb0 <__eqdf2+0x7c>)
    4f4a:	030e      	lsls	r6, r1, #12
    4f4c:	004d      	lsls	r5, r1, #1
    4f4e:	0fc9      	lsrs	r1, r1, #31
    4f50:	4680      	mov	r8, r0
    4f52:	0b36      	lsrs	r6, r6, #12
    4f54:	0d6d      	lsrs	r5, r5, #21
    4f56:	468b      	mov	fp, r1
    4f58:	4691      	mov	r9, r2
    4f5a:	0b3f      	lsrs	r7, r7, #12
    4f5c:	0d64      	lsrs	r4, r4, #21
    4f5e:	429d      	cmp	r5, r3
    4f60:	d019      	beq.n	4f96 <__eqdf2+0x62>
    4f62:	4b13      	ldr	r3, [pc, #76]	; (4fb0 <__eqdf2+0x7c>)
    4f64:	429c      	cmp	r4, r3
    4f66:	d01b      	beq.n	4fa0 <__eqdf2+0x6c>
    4f68:	2301      	movs	r3, #1
    4f6a:	42a5      	cmp	r5, r4
    4f6c:	d006      	beq.n	4f7c <__eqdf2+0x48>
    4f6e:	0018      	movs	r0, r3
    4f70:	bc3c      	pop	{r2, r3, r4, r5}
    4f72:	4690      	mov	r8, r2
    4f74:	4699      	mov	r9, r3
    4f76:	46a2      	mov	sl, r4
    4f78:	46ab      	mov	fp, r5
    4f7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4f7c:	42be      	cmp	r6, r7
    4f7e:	d1f6      	bne.n	4f6e <__eqdf2+0x3a>
    4f80:	45c8      	cmp	r8, r9
    4f82:	d1f4      	bne.n	4f6e <__eqdf2+0x3a>
    4f84:	45d3      	cmp	fp, sl
    4f86:	d010      	beq.n	4faa <__eqdf2+0x76>
    4f88:	2d00      	cmp	r5, #0
    4f8a:	d1f0      	bne.n	4f6e <__eqdf2+0x3a>
    4f8c:	4330      	orrs	r0, r6
    4f8e:	0003      	movs	r3, r0
    4f90:	1e5a      	subs	r2, r3, #1
    4f92:	4193      	sbcs	r3, r2
    4f94:	e7eb      	b.n	4f6e <__eqdf2+0x3a>
    4f96:	0031      	movs	r1, r6
    4f98:	2301      	movs	r3, #1
    4f9a:	4301      	orrs	r1, r0
    4f9c:	d1e7      	bne.n	4f6e <__eqdf2+0x3a>
    4f9e:	e7e0      	b.n	4f62 <__eqdf2+0x2e>
    4fa0:	433a      	orrs	r2, r7
    4fa2:	2301      	movs	r3, #1
    4fa4:	2a00      	cmp	r2, #0
    4fa6:	d1e2      	bne.n	4f6e <__eqdf2+0x3a>
    4fa8:	e7de      	b.n	4f68 <__eqdf2+0x34>
    4faa:	2300      	movs	r3, #0
    4fac:	e7df      	b.n	4f6e <__eqdf2+0x3a>
    4fae:	46c0      	nop			; (mov r8, r8)
    4fb0:	000007ff 	.word	0x000007ff

00004fb4 <__gedf2>:
    4fb4:	b5f0      	push	{r4, r5, r6, r7, lr}
    4fb6:	465f      	mov	r7, fp
    4fb8:	4644      	mov	r4, r8
    4fba:	4656      	mov	r6, sl
    4fbc:	464d      	mov	r5, r9
    4fbe:	b4f0      	push	{r4, r5, r6, r7}
    4fc0:	031f      	lsls	r7, r3, #12
    4fc2:	0b3c      	lsrs	r4, r7, #12
    4fc4:	4f2c      	ldr	r7, [pc, #176]	; (5078 <__gedf2+0xc4>)
    4fc6:	030e      	lsls	r6, r1, #12
    4fc8:	004d      	lsls	r5, r1, #1
    4fca:	46a3      	mov	fp, r4
    4fcc:	005c      	lsls	r4, r3, #1
    4fce:	4684      	mov	ip, r0
    4fd0:	0b36      	lsrs	r6, r6, #12
    4fd2:	0d6d      	lsrs	r5, r5, #21
    4fd4:	0fc9      	lsrs	r1, r1, #31
    4fd6:	4690      	mov	r8, r2
    4fd8:	0d64      	lsrs	r4, r4, #21
    4fda:	0fdb      	lsrs	r3, r3, #31
    4fdc:	42bd      	cmp	r5, r7
    4fde:	d02b      	beq.n	5038 <__gedf2+0x84>
    4fe0:	4f25      	ldr	r7, [pc, #148]	; (5078 <__gedf2+0xc4>)
    4fe2:	42bc      	cmp	r4, r7
    4fe4:	d02e      	beq.n	5044 <__gedf2+0x90>
    4fe6:	2d00      	cmp	r5, #0
    4fe8:	d10e      	bne.n	5008 <__gedf2+0x54>
    4fea:	4330      	orrs	r0, r6
    4fec:	0007      	movs	r7, r0
    4fee:	4681      	mov	r9, r0
    4ff0:	4278      	negs	r0, r7
    4ff2:	4178      	adcs	r0, r7
    4ff4:	2c00      	cmp	r4, #0
    4ff6:	d117      	bne.n	5028 <__gedf2+0x74>
    4ff8:	465f      	mov	r7, fp
    4ffa:	433a      	orrs	r2, r7
    4ffc:	d114      	bne.n	5028 <__gedf2+0x74>
    4ffe:	464b      	mov	r3, r9
    5000:	2000      	movs	r0, #0
    5002:	2b00      	cmp	r3, #0
    5004:	d00a      	beq.n	501c <__gedf2+0x68>
    5006:	e006      	b.n	5016 <__gedf2+0x62>
    5008:	2c00      	cmp	r4, #0
    500a:	d102      	bne.n	5012 <__gedf2+0x5e>
    500c:	4658      	mov	r0, fp
    500e:	4302      	orrs	r2, r0
    5010:	d001      	beq.n	5016 <__gedf2+0x62>
    5012:	4299      	cmp	r1, r3
    5014:	d01a      	beq.n	504c <__gedf2+0x98>
    5016:	2301      	movs	r3, #1
    5018:	4248      	negs	r0, r1
    501a:	4318      	orrs	r0, r3
    501c:	bc3c      	pop	{r2, r3, r4, r5}
    501e:	4690      	mov	r8, r2
    5020:	4699      	mov	r9, r3
    5022:	46a2      	mov	sl, r4
    5024:	46ab      	mov	fp, r5
    5026:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5028:	2800      	cmp	r0, #0
    502a:	d0f2      	beq.n	5012 <__gedf2+0x5e>
    502c:	4258      	negs	r0, r3
    502e:	4158      	adcs	r0, r3
    5030:	2201      	movs	r2, #1
    5032:	4240      	negs	r0, r0
    5034:	4310      	orrs	r0, r2
    5036:	e7f1      	b.n	501c <__gedf2+0x68>
    5038:	0037      	movs	r7, r6
    503a:	4307      	orrs	r7, r0
    503c:	d0d0      	beq.n	4fe0 <__gedf2+0x2c>
    503e:	2002      	movs	r0, #2
    5040:	4240      	negs	r0, r0
    5042:	e7eb      	b.n	501c <__gedf2+0x68>
    5044:	465f      	mov	r7, fp
    5046:	4317      	orrs	r7, r2
    5048:	d0cd      	beq.n	4fe6 <__gedf2+0x32>
    504a:	e7f8      	b.n	503e <__gedf2+0x8a>
    504c:	42a5      	cmp	r5, r4
    504e:	dce2      	bgt.n	5016 <__gedf2+0x62>
    5050:	db05      	blt.n	505e <__gedf2+0xaa>
    5052:	455e      	cmp	r6, fp
    5054:	d8df      	bhi.n	5016 <__gedf2+0x62>
    5056:	d008      	beq.n	506a <__gedf2+0xb6>
    5058:	2000      	movs	r0, #0
    505a:	455e      	cmp	r6, fp
    505c:	d2de      	bcs.n	501c <__gedf2+0x68>
    505e:	4248      	negs	r0, r1
    5060:	4148      	adcs	r0, r1
    5062:	2301      	movs	r3, #1
    5064:	4240      	negs	r0, r0
    5066:	4318      	orrs	r0, r3
    5068:	e7d8      	b.n	501c <__gedf2+0x68>
    506a:	45c4      	cmp	ip, r8
    506c:	d8d3      	bhi.n	5016 <__gedf2+0x62>
    506e:	2000      	movs	r0, #0
    5070:	45c4      	cmp	ip, r8
    5072:	d3f4      	bcc.n	505e <__gedf2+0xaa>
    5074:	e7d2      	b.n	501c <__gedf2+0x68>
    5076:	46c0      	nop			; (mov r8, r8)
    5078:	000007ff 	.word	0x000007ff

0000507c <__ledf2>:
    507c:	b5f0      	push	{r4, r5, r6, r7, lr}
    507e:	465f      	mov	r7, fp
    5080:	464d      	mov	r5, r9
    5082:	4644      	mov	r4, r8
    5084:	4656      	mov	r6, sl
    5086:	b4f0      	push	{r4, r5, r6, r7}
    5088:	031c      	lsls	r4, r3, #12
    508a:	0b24      	lsrs	r4, r4, #12
    508c:	46a4      	mov	ip, r4
    508e:	4c2f      	ldr	r4, [pc, #188]	; (514c <__ledf2+0xd0>)
    5090:	030f      	lsls	r7, r1, #12
    5092:	004d      	lsls	r5, r1, #1
    5094:	005e      	lsls	r6, r3, #1
    5096:	0fc9      	lsrs	r1, r1, #31
    5098:	4680      	mov	r8, r0
    509a:	0b3f      	lsrs	r7, r7, #12
    509c:	0d6d      	lsrs	r5, r5, #21
    509e:	468b      	mov	fp, r1
    50a0:	4691      	mov	r9, r2
    50a2:	0d76      	lsrs	r6, r6, #21
    50a4:	0fdb      	lsrs	r3, r3, #31
    50a6:	42a5      	cmp	r5, r4
    50a8:	d020      	beq.n	50ec <__ledf2+0x70>
    50aa:	4c28      	ldr	r4, [pc, #160]	; (514c <__ledf2+0xd0>)
    50ac:	42a6      	cmp	r6, r4
    50ae:	d022      	beq.n	50f6 <__ledf2+0x7a>
    50b0:	2d00      	cmp	r5, #0
    50b2:	d112      	bne.n	50da <__ledf2+0x5e>
    50b4:	4338      	orrs	r0, r7
    50b6:	4244      	negs	r4, r0
    50b8:	4144      	adcs	r4, r0
    50ba:	2e00      	cmp	r6, #0
    50bc:	d020      	beq.n	5100 <__ledf2+0x84>
    50be:	2c00      	cmp	r4, #0
    50c0:	d00d      	beq.n	50de <__ledf2+0x62>
    50c2:	425c      	negs	r4, r3
    50c4:	4163      	adcs	r3, r4
    50c6:	2401      	movs	r4, #1
    50c8:	425b      	negs	r3, r3
    50ca:	431c      	orrs	r4, r3
    50cc:	0020      	movs	r0, r4
    50ce:	bc3c      	pop	{r2, r3, r4, r5}
    50d0:	4690      	mov	r8, r2
    50d2:	4699      	mov	r9, r3
    50d4:	46a2      	mov	sl, r4
    50d6:	46ab      	mov	fp, r5
    50d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    50da:	2e00      	cmp	r6, #0
    50dc:	d017      	beq.n	510e <__ledf2+0x92>
    50de:	455b      	cmp	r3, fp
    50e0:	d019      	beq.n	5116 <__ledf2+0x9a>
    50e2:	465b      	mov	r3, fp
    50e4:	425c      	negs	r4, r3
    50e6:	2301      	movs	r3, #1
    50e8:	431c      	orrs	r4, r3
    50ea:	e7ef      	b.n	50cc <__ledf2+0x50>
    50ec:	0039      	movs	r1, r7
    50ee:	2402      	movs	r4, #2
    50f0:	4301      	orrs	r1, r0
    50f2:	d1eb      	bne.n	50cc <__ledf2+0x50>
    50f4:	e7d9      	b.n	50aa <__ledf2+0x2e>
    50f6:	4661      	mov	r1, ip
    50f8:	2402      	movs	r4, #2
    50fa:	4311      	orrs	r1, r2
    50fc:	d1e6      	bne.n	50cc <__ledf2+0x50>
    50fe:	e7d7      	b.n	50b0 <__ledf2+0x34>
    5100:	4661      	mov	r1, ip
    5102:	430a      	orrs	r2, r1
    5104:	d1db      	bne.n	50be <__ledf2+0x42>
    5106:	2400      	movs	r4, #0
    5108:	2800      	cmp	r0, #0
    510a:	d0df      	beq.n	50cc <__ledf2+0x50>
    510c:	e7e9      	b.n	50e2 <__ledf2+0x66>
    510e:	4661      	mov	r1, ip
    5110:	430a      	orrs	r2, r1
    5112:	d1e4      	bne.n	50de <__ledf2+0x62>
    5114:	e7e5      	b.n	50e2 <__ledf2+0x66>
    5116:	42b5      	cmp	r5, r6
    5118:	dd03      	ble.n	5122 <__ledf2+0xa6>
    511a:	2201      	movs	r2, #1
    511c:	425c      	negs	r4, r3
    511e:	4314      	orrs	r4, r2
    5120:	e7d4      	b.n	50cc <__ledf2+0x50>
    5122:	42b5      	cmp	r5, r6
    5124:	dbcd      	blt.n	50c2 <__ledf2+0x46>
    5126:	4567      	cmp	r7, ip
    5128:	d8db      	bhi.n	50e2 <__ledf2+0x66>
    512a:	d009      	beq.n	5140 <__ledf2+0xc4>
    512c:	2400      	movs	r4, #0
    512e:	4567      	cmp	r7, ip
    5130:	d2cc      	bcs.n	50cc <__ledf2+0x50>
    5132:	4659      	mov	r1, fp
    5134:	424c      	negs	r4, r1
    5136:	4161      	adcs	r1, r4
    5138:	2401      	movs	r4, #1
    513a:	4249      	negs	r1, r1
    513c:	430c      	orrs	r4, r1
    513e:	e7c5      	b.n	50cc <__ledf2+0x50>
    5140:	45c8      	cmp	r8, r9
    5142:	d8ce      	bhi.n	50e2 <__ledf2+0x66>
    5144:	2400      	movs	r4, #0
    5146:	45c8      	cmp	r8, r9
    5148:	d3f3      	bcc.n	5132 <__ledf2+0xb6>
    514a:	e7bf      	b.n	50cc <__ledf2+0x50>
    514c:	000007ff 	.word	0x000007ff

00005150 <__aeabi_dmul>:
    5150:	b5f0      	push	{r4, r5, r6, r7, lr}
    5152:	465f      	mov	r7, fp
    5154:	4656      	mov	r6, sl
    5156:	464d      	mov	r5, r9
    5158:	4644      	mov	r4, r8
    515a:	b4f0      	push	{r4, r5, r6, r7}
    515c:	030d      	lsls	r5, r1, #12
    515e:	4699      	mov	r9, r3
    5160:	004e      	lsls	r6, r1, #1
    5162:	0b2b      	lsrs	r3, r5, #12
    5164:	b087      	sub	sp, #28
    5166:	0007      	movs	r7, r0
    5168:	4692      	mov	sl, r2
    516a:	4680      	mov	r8, r0
    516c:	469b      	mov	fp, r3
    516e:	0d76      	lsrs	r6, r6, #21
    5170:	0fcc      	lsrs	r4, r1, #31
    5172:	2e00      	cmp	r6, #0
    5174:	d069      	beq.n	524a <__aeabi_dmul+0xfa>
    5176:	4b6d      	ldr	r3, [pc, #436]	; (532c <__aeabi_dmul+0x1dc>)
    5178:	429e      	cmp	r6, r3
    517a:	d035      	beq.n	51e8 <__aeabi_dmul+0x98>
    517c:	465b      	mov	r3, fp
    517e:	2280      	movs	r2, #128	; 0x80
    5180:	00dd      	lsls	r5, r3, #3
    5182:	0412      	lsls	r2, r2, #16
    5184:	0f43      	lsrs	r3, r0, #29
    5186:	4313      	orrs	r3, r2
    5188:	432b      	orrs	r3, r5
    518a:	469b      	mov	fp, r3
    518c:	00c3      	lsls	r3, r0, #3
    518e:	4698      	mov	r8, r3
    5190:	4b67      	ldr	r3, [pc, #412]	; (5330 <__aeabi_dmul+0x1e0>)
    5192:	2700      	movs	r7, #0
    5194:	469c      	mov	ip, r3
    5196:	2300      	movs	r3, #0
    5198:	4466      	add	r6, ip
    519a:	9301      	str	r3, [sp, #4]
    519c:	464a      	mov	r2, r9
    519e:	0315      	lsls	r5, r2, #12
    51a0:	0050      	lsls	r0, r2, #1
    51a2:	0fd2      	lsrs	r2, r2, #31
    51a4:	4653      	mov	r3, sl
    51a6:	0b2d      	lsrs	r5, r5, #12
    51a8:	0d40      	lsrs	r0, r0, #21
    51aa:	4691      	mov	r9, r2
    51ac:	d100      	bne.n	51b0 <__aeabi_dmul+0x60>
    51ae:	e076      	b.n	529e <__aeabi_dmul+0x14e>
    51b0:	4a5e      	ldr	r2, [pc, #376]	; (532c <__aeabi_dmul+0x1dc>)
    51b2:	4290      	cmp	r0, r2
    51b4:	d06c      	beq.n	5290 <__aeabi_dmul+0x140>
    51b6:	2280      	movs	r2, #128	; 0x80
    51b8:	0f5b      	lsrs	r3, r3, #29
    51ba:	0412      	lsls	r2, r2, #16
    51bc:	4313      	orrs	r3, r2
    51be:	4a5c      	ldr	r2, [pc, #368]	; (5330 <__aeabi_dmul+0x1e0>)
    51c0:	00ed      	lsls	r5, r5, #3
    51c2:	4694      	mov	ip, r2
    51c4:	431d      	orrs	r5, r3
    51c6:	4653      	mov	r3, sl
    51c8:	2200      	movs	r2, #0
    51ca:	00db      	lsls	r3, r3, #3
    51cc:	4460      	add	r0, ip
    51ce:	4649      	mov	r1, r9
    51d0:	1836      	adds	r6, r6, r0
    51d2:	1c70      	adds	r0, r6, #1
    51d4:	4061      	eors	r1, r4
    51d6:	9002      	str	r0, [sp, #8]
    51d8:	4317      	orrs	r7, r2
    51da:	2f0f      	cmp	r7, #15
    51dc:	d900      	bls.n	51e0 <__aeabi_dmul+0x90>
    51de:	e0af      	b.n	5340 <__aeabi_dmul+0x1f0>
    51e0:	4854      	ldr	r0, [pc, #336]	; (5334 <__aeabi_dmul+0x1e4>)
    51e2:	00bf      	lsls	r7, r7, #2
    51e4:	59c7      	ldr	r7, [r0, r7]
    51e6:	46bf      	mov	pc, r7
    51e8:	465b      	mov	r3, fp
    51ea:	431f      	orrs	r7, r3
    51ec:	d000      	beq.n	51f0 <__aeabi_dmul+0xa0>
    51ee:	e088      	b.n	5302 <__aeabi_dmul+0x1b2>
    51f0:	2300      	movs	r3, #0
    51f2:	469b      	mov	fp, r3
    51f4:	4698      	mov	r8, r3
    51f6:	3302      	adds	r3, #2
    51f8:	2708      	movs	r7, #8
    51fa:	9301      	str	r3, [sp, #4]
    51fc:	e7ce      	b.n	519c <__aeabi_dmul+0x4c>
    51fe:	4649      	mov	r1, r9
    5200:	2a02      	cmp	r2, #2
    5202:	d06a      	beq.n	52da <__aeabi_dmul+0x18a>
    5204:	2a03      	cmp	r2, #3
    5206:	d100      	bne.n	520a <__aeabi_dmul+0xba>
    5208:	e209      	b.n	561e <__aeabi_dmul+0x4ce>
    520a:	2a01      	cmp	r2, #1
    520c:	d000      	beq.n	5210 <__aeabi_dmul+0xc0>
    520e:	e1bb      	b.n	5588 <__aeabi_dmul+0x438>
    5210:	4011      	ands	r1, r2
    5212:	2200      	movs	r2, #0
    5214:	2300      	movs	r3, #0
    5216:	2500      	movs	r5, #0
    5218:	4690      	mov	r8, r2
    521a:	b2cc      	uxtb	r4, r1
    521c:	2100      	movs	r1, #0
    521e:	032d      	lsls	r5, r5, #12
    5220:	0d0a      	lsrs	r2, r1, #20
    5222:	0512      	lsls	r2, r2, #20
    5224:	0b2d      	lsrs	r5, r5, #12
    5226:	4315      	orrs	r5, r2
    5228:	4a43      	ldr	r2, [pc, #268]	; (5338 <__aeabi_dmul+0x1e8>)
    522a:	051b      	lsls	r3, r3, #20
    522c:	4015      	ands	r5, r2
    522e:	431d      	orrs	r5, r3
    5230:	006d      	lsls	r5, r5, #1
    5232:	07e4      	lsls	r4, r4, #31
    5234:	086d      	lsrs	r5, r5, #1
    5236:	4325      	orrs	r5, r4
    5238:	4640      	mov	r0, r8
    523a:	0029      	movs	r1, r5
    523c:	b007      	add	sp, #28
    523e:	bc3c      	pop	{r2, r3, r4, r5}
    5240:	4690      	mov	r8, r2
    5242:	4699      	mov	r9, r3
    5244:	46a2      	mov	sl, r4
    5246:	46ab      	mov	fp, r5
    5248:	bdf0      	pop	{r4, r5, r6, r7, pc}
    524a:	4303      	orrs	r3, r0
    524c:	d052      	beq.n	52f4 <__aeabi_dmul+0x1a4>
    524e:	465b      	mov	r3, fp
    5250:	2b00      	cmp	r3, #0
    5252:	d100      	bne.n	5256 <__aeabi_dmul+0x106>
    5254:	e18a      	b.n	556c <__aeabi_dmul+0x41c>
    5256:	4658      	mov	r0, fp
    5258:	f000 ffbe 	bl	61d8 <__clzsi2>
    525c:	0003      	movs	r3, r0
    525e:	3b0b      	subs	r3, #11
    5260:	2b1c      	cmp	r3, #28
    5262:	dd00      	ble.n	5266 <__aeabi_dmul+0x116>
    5264:	e17b      	b.n	555e <__aeabi_dmul+0x40e>
    5266:	221d      	movs	r2, #29
    5268:	1ad3      	subs	r3, r2, r3
    526a:	003a      	movs	r2, r7
    526c:	0001      	movs	r1, r0
    526e:	465d      	mov	r5, fp
    5270:	40da      	lsrs	r2, r3
    5272:	3908      	subs	r1, #8
    5274:	408d      	lsls	r5, r1
    5276:	0013      	movs	r3, r2
    5278:	408f      	lsls	r7, r1
    527a:	432b      	orrs	r3, r5
    527c:	469b      	mov	fp, r3
    527e:	46b8      	mov	r8, r7
    5280:	4b2e      	ldr	r3, [pc, #184]	; (533c <__aeabi_dmul+0x1ec>)
    5282:	2700      	movs	r7, #0
    5284:	469c      	mov	ip, r3
    5286:	2300      	movs	r3, #0
    5288:	4460      	add	r0, ip
    528a:	4246      	negs	r6, r0
    528c:	9301      	str	r3, [sp, #4]
    528e:	e785      	b.n	519c <__aeabi_dmul+0x4c>
    5290:	4652      	mov	r2, sl
    5292:	432a      	orrs	r2, r5
    5294:	d12c      	bne.n	52f0 <__aeabi_dmul+0x1a0>
    5296:	2500      	movs	r5, #0
    5298:	2300      	movs	r3, #0
    529a:	2202      	movs	r2, #2
    529c:	e797      	b.n	51ce <__aeabi_dmul+0x7e>
    529e:	4652      	mov	r2, sl
    52a0:	432a      	orrs	r2, r5
    52a2:	d021      	beq.n	52e8 <__aeabi_dmul+0x198>
    52a4:	2d00      	cmp	r5, #0
    52a6:	d100      	bne.n	52aa <__aeabi_dmul+0x15a>
    52a8:	e154      	b.n	5554 <__aeabi_dmul+0x404>
    52aa:	0028      	movs	r0, r5
    52ac:	f000 ff94 	bl	61d8 <__clzsi2>
    52b0:	0003      	movs	r3, r0
    52b2:	3b0b      	subs	r3, #11
    52b4:	2b1c      	cmp	r3, #28
    52b6:	dd00      	ble.n	52ba <__aeabi_dmul+0x16a>
    52b8:	e146      	b.n	5548 <__aeabi_dmul+0x3f8>
    52ba:	211d      	movs	r1, #29
    52bc:	1acb      	subs	r3, r1, r3
    52be:	4651      	mov	r1, sl
    52c0:	0002      	movs	r2, r0
    52c2:	40d9      	lsrs	r1, r3
    52c4:	4653      	mov	r3, sl
    52c6:	3a08      	subs	r2, #8
    52c8:	4095      	lsls	r5, r2
    52ca:	4093      	lsls	r3, r2
    52cc:	430d      	orrs	r5, r1
    52ce:	4a1b      	ldr	r2, [pc, #108]	; (533c <__aeabi_dmul+0x1ec>)
    52d0:	4694      	mov	ip, r2
    52d2:	4460      	add	r0, ip
    52d4:	4240      	negs	r0, r0
    52d6:	2200      	movs	r2, #0
    52d8:	e779      	b.n	51ce <__aeabi_dmul+0x7e>
    52da:	2401      	movs	r4, #1
    52dc:	2200      	movs	r2, #0
    52de:	400c      	ands	r4, r1
    52e0:	4b12      	ldr	r3, [pc, #72]	; (532c <__aeabi_dmul+0x1dc>)
    52e2:	2500      	movs	r5, #0
    52e4:	4690      	mov	r8, r2
    52e6:	e799      	b.n	521c <__aeabi_dmul+0xcc>
    52e8:	2500      	movs	r5, #0
    52ea:	2300      	movs	r3, #0
    52ec:	2201      	movs	r2, #1
    52ee:	e76e      	b.n	51ce <__aeabi_dmul+0x7e>
    52f0:	2203      	movs	r2, #3
    52f2:	e76c      	b.n	51ce <__aeabi_dmul+0x7e>
    52f4:	2300      	movs	r3, #0
    52f6:	469b      	mov	fp, r3
    52f8:	4698      	mov	r8, r3
    52fa:	3301      	adds	r3, #1
    52fc:	2704      	movs	r7, #4
    52fe:	9301      	str	r3, [sp, #4]
    5300:	e74c      	b.n	519c <__aeabi_dmul+0x4c>
    5302:	2303      	movs	r3, #3
    5304:	270c      	movs	r7, #12
    5306:	9301      	str	r3, [sp, #4]
    5308:	e748      	b.n	519c <__aeabi_dmul+0x4c>
    530a:	2300      	movs	r3, #0
    530c:	2580      	movs	r5, #128	; 0x80
    530e:	4698      	mov	r8, r3
    5310:	2400      	movs	r4, #0
    5312:	032d      	lsls	r5, r5, #12
    5314:	4b05      	ldr	r3, [pc, #20]	; (532c <__aeabi_dmul+0x1dc>)
    5316:	e781      	b.n	521c <__aeabi_dmul+0xcc>
    5318:	465d      	mov	r5, fp
    531a:	4643      	mov	r3, r8
    531c:	9a01      	ldr	r2, [sp, #4]
    531e:	e76f      	b.n	5200 <__aeabi_dmul+0xb0>
    5320:	465d      	mov	r5, fp
    5322:	4643      	mov	r3, r8
    5324:	0021      	movs	r1, r4
    5326:	9a01      	ldr	r2, [sp, #4]
    5328:	e76a      	b.n	5200 <__aeabi_dmul+0xb0>
    532a:	46c0      	nop			; (mov r8, r8)
    532c:	000007ff 	.word	0x000007ff
    5330:	fffffc01 	.word	0xfffffc01
    5334:	000065b0 	.word	0x000065b0
    5338:	800fffff 	.word	0x800fffff
    533c:	000003f3 	.word	0x000003f3
    5340:	4642      	mov	r2, r8
    5342:	0c12      	lsrs	r2, r2, #16
    5344:	4691      	mov	r9, r2
    5346:	0c1a      	lsrs	r2, r3, #16
    5348:	4694      	mov	ip, r2
    534a:	4642      	mov	r2, r8
    534c:	0417      	lsls	r7, r2, #16
    534e:	464a      	mov	r2, r9
    5350:	041b      	lsls	r3, r3, #16
    5352:	0c1b      	lsrs	r3, r3, #16
    5354:	435a      	muls	r2, r3
    5356:	4660      	mov	r0, ip
    5358:	4690      	mov	r8, r2
    535a:	464a      	mov	r2, r9
    535c:	4342      	muls	r2, r0
    535e:	0010      	movs	r0, r2
    5360:	9203      	str	r2, [sp, #12]
    5362:	4662      	mov	r2, ip
    5364:	001c      	movs	r4, r3
    5366:	0c3f      	lsrs	r7, r7, #16
    5368:	437a      	muls	r2, r7
    536a:	437c      	muls	r4, r7
    536c:	4442      	add	r2, r8
    536e:	9201      	str	r2, [sp, #4]
    5370:	0c22      	lsrs	r2, r4, #16
    5372:	4692      	mov	sl, r2
    5374:	9a01      	ldr	r2, [sp, #4]
    5376:	4452      	add	r2, sl
    5378:	4590      	cmp	r8, r2
    537a:	d906      	bls.n	538a <__aeabi_dmul+0x23a>
    537c:	4682      	mov	sl, r0
    537e:	2080      	movs	r0, #128	; 0x80
    5380:	0240      	lsls	r0, r0, #9
    5382:	4680      	mov	r8, r0
    5384:	44c2      	add	sl, r8
    5386:	4650      	mov	r0, sl
    5388:	9003      	str	r0, [sp, #12]
    538a:	0c10      	lsrs	r0, r2, #16
    538c:	9004      	str	r0, [sp, #16]
    538e:	4648      	mov	r0, r9
    5390:	0424      	lsls	r4, r4, #16
    5392:	0c24      	lsrs	r4, r4, #16
    5394:	0412      	lsls	r2, r2, #16
    5396:	1912      	adds	r2, r2, r4
    5398:	9205      	str	r2, [sp, #20]
    539a:	0c2a      	lsrs	r2, r5, #16
    539c:	042d      	lsls	r5, r5, #16
    539e:	0c2d      	lsrs	r5, r5, #16
    53a0:	4368      	muls	r0, r5
    53a2:	002c      	movs	r4, r5
    53a4:	4682      	mov	sl, r0
    53a6:	4648      	mov	r0, r9
    53a8:	437c      	muls	r4, r7
    53aa:	4350      	muls	r0, r2
    53ac:	4681      	mov	r9, r0
    53ae:	0c20      	lsrs	r0, r4, #16
    53b0:	4680      	mov	r8, r0
    53b2:	4357      	muls	r7, r2
    53b4:	4457      	add	r7, sl
    53b6:	4447      	add	r7, r8
    53b8:	45ba      	cmp	sl, r7
    53ba:	d903      	bls.n	53c4 <__aeabi_dmul+0x274>
    53bc:	2080      	movs	r0, #128	; 0x80
    53be:	0240      	lsls	r0, r0, #9
    53c0:	4680      	mov	r8, r0
    53c2:	44c1      	add	r9, r8
    53c4:	0c38      	lsrs	r0, r7, #16
    53c6:	043f      	lsls	r7, r7, #16
    53c8:	46b8      	mov	r8, r7
    53ca:	4448      	add	r0, r9
    53cc:	0424      	lsls	r4, r4, #16
    53ce:	0c24      	lsrs	r4, r4, #16
    53d0:	9001      	str	r0, [sp, #4]
    53d2:	9804      	ldr	r0, [sp, #16]
    53d4:	44a0      	add	r8, r4
    53d6:	4440      	add	r0, r8
    53d8:	9004      	str	r0, [sp, #16]
    53da:	4658      	mov	r0, fp
    53dc:	0c00      	lsrs	r0, r0, #16
    53de:	4681      	mov	r9, r0
    53e0:	4658      	mov	r0, fp
    53e2:	0404      	lsls	r4, r0, #16
    53e4:	0c20      	lsrs	r0, r4, #16
    53e6:	4682      	mov	sl, r0
    53e8:	0007      	movs	r7, r0
    53ea:	4648      	mov	r0, r9
    53ec:	435f      	muls	r7, r3
    53ee:	464c      	mov	r4, r9
    53f0:	4343      	muls	r3, r0
    53f2:	4660      	mov	r0, ip
    53f4:	4360      	muls	r0, r4
    53f6:	4664      	mov	r4, ip
    53f8:	4683      	mov	fp, r0
    53fa:	4650      	mov	r0, sl
    53fc:	4344      	muls	r4, r0
    53fe:	0c38      	lsrs	r0, r7, #16
    5400:	4684      	mov	ip, r0
    5402:	18e4      	adds	r4, r4, r3
    5404:	4464      	add	r4, ip
    5406:	42a3      	cmp	r3, r4
    5408:	d903      	bls.n	5412 <__aeabi_dmul+0x2c2>
    540a:	2380      	movs	r3, #128	; 0x80
    540c:	025b      	lsls	r3, r3, #9
    540e:	469c      	mov	ip, r3
    5410:	44e3      	add	fp, ip
    5412:	4648      	mov	r0, r9
    5414:	043f      	lsls	r7, r7, #16
    5416:	0c23      	lsrs	r3, r4, #16
    5418:	0c3f      	lsrs	r7, r7, #16
    541a:	0424      	lsls	r4, r4, #16
    541c:	19e4      	adds	r4, r4, r7
    541e:	4657      	mov	r7, sl
    5420:	4368      	muls	r0, r5
    5422:	436f      	muls	r7, r5
    5424:	4684      	mov	ip, r0
    5426:	464d      	mov	r5, r9
    5428:	4650      	mov	r0, sl
    542a:	4355      	muls	r5, r2
    542c:	4342      	muls	r2, r0
    542e:	0c38      	lsrs	r0, r7, #16
    5430:	4681      	mov	r9, r0
    5432:	4462      	add	r2, ip
    5434:	444a      	add	r2, r9
    5436:	445b      	add	r3, fp
    5438:	4594      	cmp	ip, r2
    543a:	d903      	bls.n	5444 <__aeabi_dmul+0x2f4>
    543c:	2080      	movs	r0, #128	; 0x80
    543e:	0240      	lsls	r0, r0, #9
    5440:	4684      	mov	ip, r0
    5442:	4465      	add	r5, ip
    5444:	9803      	ldr	r0, [sp, #12]
    5446:	043f      	lsls	r7, r7, #16
    5448:	4683      	mov	fp, r0
    544a:	9804      	ldr	r0, [sp, #16]
    544c:	0c3f      	lsrs	r7, r7, #16
    544e:	4684      	mov	ip, r0
    5450:	44e3      	add	fp, ip
    5452:	45c3      	cmp	fp, r8
    5454:	4180      	sbcs	r0, r0
    5456:	4240      	negs	r0, r0
    5458:	4682      	mov	sl, r0
    545a:	0410      	lsls	r0, r2, #16
    545c:	4684      	mov	ip, r0
    545e:	9801      	ldr	r0, [sp, #4]
    5460:	4467      	add	r7, ip
    5462:	4684      	mov	ip, r0
    5464:	4467      	add	r7, ip
    5466:	44a3      	add	fp, r4
    5468:	46bc      	mov	ip, r7
    546a:	45a3      	cmp	fp, r4
    546c:	41a4      	sbcs	r4, r4
    546e:	4699      	mov	r9, r3
    5470:	44d4      	add	ip, sl
    5472:	4264      	negs	r4, r4
    5474:	4287      	cmp	r7, r0
    5476:	41bf      	sbcs	r7, r7
    5478:	45d4      	cmp	ip, sl
    547a:	4180      	sbcs	r0, r0
    547c:	44e1      	add	r9, ip
    547e:	46a0      	mov	r8, r4
    5480:	4599      	cmp	r9, r3
    5482:	419b      	sbcs	r3, r3
    5484:	427f      	negs	r7, r7
    5486:	4240      	negs	r0, r0
    5488:	44c8      	add	r8, r9
    548a:	4307      	orrs	r7, r0
    548c:	0c12      	lsrs	r2, r2, #16
    548e:	18ba      	adds	r2, r7, r2
    5490:	45a0      	cmp	r8, r4
    5492:	41a4      	sbcs	r4, r4
    5494:	425f      	negs	r7, r3
    5496:	003b      	movs	r3, r7
    5498:	4264      	negs	r4, r4
    549a:	4323      	orrs	r3, r4
    549c:	18d7      	adds	r7, r2, r3
    549e:	4643      	mov	r3, r8
    54a0:	197d      	adds	r5, r7, r5
    54a2:	0ddb      	lsrs	r3, r3, #23
    54a4:	026d      	lsls	r5, r5, #9
    54a6:	431d      	orrs	r5, r3
    54a8:	465b      	mov	r3, fp
    54aa:	025a      	lsls	r2, r3, #9
    54ac:	9b05      	ldr	r3, [sp, #20]
    54ae:	431a      	orrs	r2, r3
    54b0:	1e53      	subs	r3, r2, #1
    54b2:	419a      	sbcs	r2, r3
    54b4:	465b      	mov	r3, fp
    54b6:	0ddb      	lsrs	r3, r3, #23
    54b8:	431a      	orrs	r2, r3
    54ba:	4643      	mov	r3, r8
    54bc:	025b      	lsls	r3, r3, #9
    54be:	4313      	orrs	r3, r2
    54c0:	01ea      	lsls	r2, r5, #7
    54c2:	d507      	bpl.n	54d4 <__aeabi_dmul+0x384>
    54c4:	2201      	movs	r2, #1
    54c6:	085c      	lsrs	r4, r3, #1
    54c8:	4013      	ands	r3, r2
    54ca:	4323      	orrs	r3, r4
    54cc:	07ea      	lsls	r2, r5, #31
    54ce:	9e02      	ldr	r6, [sp, #8]
    54d0:	4313      	orrs	r3, r2
    54d2:	086d      	lsrs	r5, r5, #1
    54d4:	4a57      	ldr	r2, [pc, #348]	; (5634 <__aeabi_dmul+0x4e4>)
    54d6:	18b2      	adds	r2, r6, r2
    54d8:	2a00      	cmp	r2, #0
    54da:	dd4b      	ble.n	5574 <__aeabi_dmul+0x424>
    54dc:	0758      	lsls	r0, r3, #29
    54de:	d009      	beq.n	54f4 <__aeabi_dmul+0x3a4>
    54e0:	200f      	movs	r0, #15
    54e2:	4018      	ands	r0, r3
    54e4:	2804      	cmp	r0, #4
    54e6:	d005      	beq.n	54f4 <__aeabi_dmul+0x3a4>
    54e8:	1d18      	adds	r0, r3, #4
    54ea:	4298      	cmp	r0, r3
    54ec:	419b      	sbcs	r3, r3
    54ee:	425b      	negs	r3, r3
    54f0:	18ed      	adds	r5, r5, r3
    54f2:	0003      	movs	r3, r0
    54f4:	01e8      	lsls	r0, r5, #7
    54f6:	d504      	bpl.n	5502 <__aeabi_dmul+0x3b2>
    54f8:	4a4f      	ldr	r2, [pc, #316]	; (5638 <__aeabi_dmul+0x4e8>)
    54fa:	4015      	ands	r5, r2
    54fc:	2280      	movs	r2, #128	; 0x80
    54fe:	00d2      	lsls	r2, r2, #3
    5500:	18b2      	adds	r2, r6, r2
    5502:	484e      	ldr	r0, [pc, #312]	; (563c <__aeabi_dmul+0x4ec>)
    5504:	4282      	cmp	r2, r0
    5506:	dd00      	ble.n	550a <__aeabi_dmul+0x3ba>
    5508:	e6e7      	b.n	52da <__aeabi_dmul+0x18a>
    550a:	2401      	movs	r4, #1
    550c:	08db      	lsrs	r3, r3, #3
    550e:	0768      	lsls	r0, r5, #29
    5510:	4318      	orrs	r0, r3
    5512:	026d      	lsls	r5, r5, #9
    5514:	0553      	lsls	r3, r2, #21
    5516:	4680      	mov	r8, r0
    5518:	0b2d      	lsrs	r5, r5, #12
    551a:	0d5b      	lsrs	r3, r3, #21
    551c:	400c      	ands	r4, r1
    551e:	e67d      	b.n	521c <__aeabi_dmul+0xcc>
    5520:	2280      	movs	r2, #128	; 0x80
    5522:	4659      	mov	r1, fp
    5524:	0312      	lsls	r2, r2, #12
    5526:	4211      	tst	r1, r2
    5528:	d008      	beq.n	553c <__aeabi_dmul+0x3ec>
    552a:	4215      	tst	r5, r2
    552c:	d106      	bne.n	553c <__aeabi_dmul+0x3ec>
    552e:	4315      	orrs	r5, r2
    5530:	032d      	lsls	r5, r5, #12
    5532:	4698      	mov	r8, r3
    5534:	0b2d      	lsrs	r5, r5, #12
    5536:	464c      	mov	r4, r9
    5538:	4b41      	ldr	r3, [pc, #260]	; (5640 <__aeabi_dmul+0x4f0>)
    553a:	e66f      	b.n	521c <__aeabi_dmul+0xcc>
    553c:	465d      	mov	r5, fp
    553e:	4315      	orrs	r5, r2
    5540:	032d      	lsls	r5, r5, #12
    5542:	0b2d      	lsrs	r5, r5, #12
    5544:	4b3e      	ldr	r3, [pc, #248]	; (5640 <__aeabi_dmul+0x4f0>)
    5546:	e669      	b.n	521c <__aeabi_dmul+0xcc>
    5548:	0003      	movs	r3, r0
    554a:	4655      	mov	r5, sl
    554c:	3b28      	subs	r3, #40	; 0x28
    554e:	409d      	lsls	r5, r3
    5550:	2300      	movs	r3, #0
    5552:	e6bc      	b.n	52ce <__aeabi_dmul+0x17e>
    5554:	4650      	mov	r0, sl
    5556:	f000 fe3f 	bl	61d8 <__clzsi2>
    555a:	3020      	adds	r0, #32
    555c:	e6a8      	b.n	52b0 <__aeabi_dmul+0x160>
    555e:	0003      	movs	r3, r0
    5560:	3b28      	subs	r3, #40	; 0x28
    5562:	409f      	lsls	r7, r3
    5564:	2300      	movs	r3, #0
    5566:	46bb      	mov	fp, r7
    5568:	4698      	mov	r8, r3
    556a:	e689      	b.n	5280 <__aeabi_dmul+0x130>
    556c:	f000 fe34 	bl	61d8 <__clzsi2>
    5570:	3020      	adds	r0, #32
    5572:	e673      	b.n	525c <__aeabi_dmul+0x10c>
    5574:	2401      	movs	r4, #1
    5576:	1aa6      	subs	r6, r4, r2
    5578:	2e38      	cmp	r6, #56	; 0x38
    557a:	dd07      	ble.n	558c <__aeabi_dmul+0x43c>
    557c:	2200      	movs	r2, #0
    557e:	400c      	ands	r4, r1
    5580:	2300      	movs	r3, #0
    5582:	2500      	movs	r5, #0
    5584:	4690      	mov	r8, r2
    5586:	e649      	b.n	521c <__aeabi_dmul+0xcc>
    5588:	9e02      	ldr	r6, [sp, #8]
    558a:	e7a3      	b.n	54d4 <__aeabi_dmul+0x384>
    558c:	2e1f      	cmp	r6, #31
    558e:	dc20      	bgt.n	55d2 <__aeabi_dmul+0x482>
    5590:	2220      	movs	r2, #32
    5592:	002c      	movs	r4, r5
    5594:	0018      	movs	r0, r3
    5596:	1b92      	subs	r2, r2, r6
    5598:	40f0      	lsrs	r0, r6
    559a:	4094      	lsls	r4, r2
    559c:	4093      	lsls	r3, r2
    559e:	4304      	orrs	r4, r0
    55a0:	1e58      	subs	r0, r3, #1
    55a2:	4183      	sbcs	r3, r0
    55a4:	431c      	orrs	r4, r3
    55a6:	40f5      	lsrs	r5, r6
    55a8:	0763      	lsls	r3, r4, #29
    55aa:	d009      	beq.n	55c0 <__aeabi_dmul+0x470>
    55ac:	230f      	movs	r3, #15
    55ae:	4023      	ands	r3, r4
    55b0:	2b04      	cmp	r3, #4
    55b2:	d005      	beq.n	55c0 <__aeabi_dmul+0x470>
    55b4:	0023      	movs	r3, r4
    55b6:	1d1c      	adds	r4, r3, #4
    55b8:	429c      	cmp	r4, r3
    55ba:	4192      	sbcs	r2, r2
    55bc:	4252      	negs	r2, r2
    55be:	18ad      	adds	r5, r5, r2
    55c0:	022b      	lsls	r3, r5, #8
    55c2:	d51f      	bpl.n	5604 <__aeabi_dmul+0x4b4>
    55c4:	2401      	movs	r4, #1
    55c6:	2200      	movs	r2, #0
    55c8:	400c      	ands	r4, r1
    55ca:	2301      	movs	r3, #1
    55cc:	2500      	movs	r5, #0
    55ce:	4690      	mov	r8, r2
    55d0:	e624      	b.n	521c <__aeabi_dmul+0xcc>
    55d2:	201f      	movs	r0, #31
    55d4:	002c      	movs	r4, r5
    55d6:	4240      	negs	r0, r0
    55d8:	1a82      	subs	r2, r0, r2
    55da:	40d4      	lsrs	r4, r2
    55dc:	2e20      	cmp	r6, #32
    55de:	d01c      	beq.n	561a <__aeabi_dmul+0x4ca>
    55e0:	2240      	movs	r2, #64	; 0x40
    55e2:	1b96      	subs	r6, r2, r6
    55e4:	40b5      	lsls	r5, r6
    55e6:	432b      	orrs	r3, r5
    55e8:	1e58      	subs	r0, r3, #1
    55ea:	4183      	sbcs	r3, r0
    55ec:	2007      	movs	r0, #7
    55ee:	4323      	orrs	r3, r4
    55f0:	4018      	ands	r0, r3
    55f2:	2500      	movs	r5, #0
    55f4:	2800      	cmp	r0, #0
    55f6:	d009      	beq.n	560c <__aeabi_dmul+0x4bc>
    55f8:	220f      	movs	r2, #15
    55fa:	2500      	movs	r5, #0
    55fc:	401a      	ands	r2, r3
    55fe:	001c      	movs	r4, r3
    5600:	2a04      	cmp	r2, #4
    5602:	d1d8      	bne.n	55b6 <__aeabi_dmul+0x466>
    5604:	0023      	movs	r3, r4
    5606:	0768      	lsls	r0, r5, #29
    5608:	026d      	lsls	r5, r5, #9
    560a:	0b2d      	lsrs	r5, r5, #12
    560c:	2401      	movs	r4, #1
    560e:	08db      	lsrs	r3, r3, #3
    5610:	4303      	orrs	r3, r0
    5612:	4698      	mov	r8, r3
    5614:	400c      	ands	r4, r1
    5616:	2300      	movs	r3, #0
    5618:	e600      	b.n	521c <__aeabi_dmul+0xcc>
    561a:	2500      	movs	r5, #0
    561c:	e7e3      	b.n	55e6 <__aeabi_dmul+0x496>
    561e:	2280      	movs	r2, #128	; 0x80
    5620:	2401      	movs	r4, #1
    5622:	0312      	lsls	r2, r2, #12
    5624:	4315      	orrs	r5, r2
    5626:	032d      	lsls	r5, r5, #12
    5628:	4698      	mov	r8, r3
    562a:	0b2d      	lsrs	r5, r5, #12
    562c:	400c      	ands	r4, r1
    562e:	4b04      	ldr	r3, [pc, #16]	; (5640 <__aeabi_dmul+0x4f0>)
    5630:	e5f4      	b.n	521c <__aeabi_dmul+0xcc>
    5632:	46c0      	nop			; (mov r8, r8)
    5634:	000003ff 	.word	0x000003ff
    5638:	feffffff 	.word	0xfeffffff
    563c:	000007fe 	.word	0x000007fe
    5640:	000007ff 	.word	0x000007ff

00005644 <__aeabi_dsub>:
    5644:	b5f0      	push	{r4, r5, r6, r7, lr}
    5646:	4657      	mov	r7, sl
    5648:	464e      	mov	r6, r9
    564a:	4645      	mov	r5, r8
    564c:	b4e0      	push	{r5, r6, r7}
    564e:	000e      	movs	r6, r1
    5650:	0011      	movs	r1, r2
    5652:	0ff2      	lsrs	r2, r6, #31
    5654:	4692      	mov	sl, r2
    5656:	00c5      	lsls	r5, r0, #3
    5658:	0f42      	lsrs	r2, r0, #29
    565a:	0318      	lsls	r0, r3, #12
    565c:	0337      	lsls	r7, r6, #12
    565e:	0074      	lsls	r4, r6, #1
    5660:	0a40      	lsrs	r0, r0, #9
    5662:	0f4e      	lsrs	r6, r1, #29
    5664:	0a7f      	lsrs	r7, r7, #9
    5666:	4330      	orrs	r0, r6
    5668:	4ecf      	ldr	r6, [pc, #828]	; (59a8 <__aeabi_dsub+0x364>)
    566a:	4317      	orrs	r7, r2
    566c:	005a      	lsls	r2, r3, #1
    566e:	0d64      	lsrs	r4, r4, #21
    5670:	0d52      	lsrs	r2, r2, #21
    5672:	0fdb      	lsrs	r3, r3, #31
    5674:	00c9      	lsls	r1, r1, #3
    5676:	42b2      	cmp	r2, r6
    5678:	d100      	bne.n	567c <__aeabi_dsub+0x38>
    567a:	e0e5      	b.n	5848 <__aeabi_dsub+0x204>
    567c:	2601      	movs	r6, #1
    567e:	4073      	eors	r3, r6
    5680:	1aa6      	subs	r6, r4, r2
    5682:	46b4      	mov	ip, r6
    5684:	4553      	cmp	r3, sl
    5686:	d100      	bne.n	568a <__aeabi_dsub+0x46>
    5688:	e0af      	b.n	57ea <__aeabi_dsub+0x1a6>
    568a:	2e00      	cmp	r6, #0
    568c:	dc00      	bgt.n	5690 <__aeabi_dsub+0x4c>
    568e:	e10d      	b.n	58ac <__aeabi_dsub+0x268>
    5690:	2a00      	cmp	r2, #0
    5692:	d13a      	bne.n	570a <__aeabi_dsub+0xc6>
    5694:	0003      	movs	r3, r0
    5696:	430b      	orrs	r3, r1
    5698:	d000      	beq.n	569c <__aeabi_dsub+0x58>
    569a:	e0e4      	b.n	5866 <__aeabi_dsub+0x222>
    569c:	076b      	lsls	r3, r5, #29
    569e:	d009      	beq.n	56b4 <__aeabi_dsub+0x70>
    56a0:	230f      	movs	r3, #15
    56a2:	402b      	ands	r3, r5
    56a4:	2b04      	cmp	r3, #4
    56a6:	d005      	beq.n	56b4 <__aeabi_dsub+0x70>
    56a8:	1d2b      	adds	r3, r5, #4
    56aa:	42ab      	cmp	r3, r5
    56ac:	41ad      	sbcs	r5, r5
    56ae:	426d      	negs	r5, r5
    56b0:	197f      	adds	r7, r7, r5
    56b2:	001d      	movs	r5, r3
    56b4:	023b      	lsls	r3, r7, #8
    56b6:	d400      	bmi.n	56ba <__aeabi_dsub+0x76>
    56b8:	e088      	b.n	57cc <__aeabi_dsub+0x188>
    56ba:	4bbb      	ldr	r3, [pc, #748]	; (59a8 <__aeabi_dsub+0x364>)
    56bc:	3401      	adds	r4, #1
    56be:	429c      	cmp	r4, r3
    56c0:	d100      	bne.n	56c4 <__aeabi_dsub+0x80>
    56c2:	e110      	b.n	58e6 <__aeabi_dsub+0x2a2>
    56c4:	003a      	movs	r2, r7
    56c6:	4bb9      	ldr	r3, [pc, #740]	; (59ac <__aeabi_dsub+0x368>)
    56c8:	4651      	mov	r1, sl
    56ca:	401a      	ands	r2, r3
    56cc:	2301      	movs	r3, #1
    56ce:	0750      	lsls	r0, r2, #29
    56d0:	08ed      	lsrs	r5, r5, #3
    56d2:	0252      	lsls	r2, r2, #9
    56d4:	0564      	lsls	r4, r4, #21
    56d6:	4305      	orrs	r5, r0
    56d8:	0b12      	lsrs	r2, r2, #12
    56da:	0d64      	lsrs	r4, r4, #21
    56dc:	400b      	ands	r3, r1
    56de:	2100      	movs	r1, #0
    56e0:	0028      	movs	r0, r5
    56e2:	0312      	lsls	r2, r2, #12
    56e4:	0d0d      	lsrs	r5, r1, #20
    56e6:	0b12      	lsrs	r2, r2, #12
    56e8:	0564      	lsls	r4, r4, #21
    56ea:	052d      	lsls	r5, r5, #20
    56ec:	4315      	orrs	r5, r2
    56ee:	0862      	lsrs	r2, r4, #1
    56f0:	4caf      	ldr	r4, [pc, #700]	; (59b0 <__aeabi_dsub+0x36c>)
    56f2:	07db      	lsls	r3, r3, #31
    56f4:	402c      	ands	r4, r5
    56f6:	4314      	orrs	r4, r2
    56f8:	0064      	lsls	r4, r4, #1
    56fa:	0864      	lsrs	r4, r4, #1
    56fc:	431c      	orrs	r4, r3
    56fe:	0021      	movs	r1, r4
    5700:	bc1c      	pop	{r2, r3, r4}
    5702:	4690      	mov	r8, r2
    5704:	4699      	mov	r9, r3
    5706:	46a2      	mov	sl, r4
    5708:	bdf0      	pop	{r4, r5, r6, r7, pc}
    570a:	4ba7      	ldr	r3, [pc, #668]	; (59a8 <__aeabi_dsub+0x364>)
    570c:	429c      	cmp	r4, r3
    570e:	d0c5      	beq.n	569c <__aeabi_dsub+0x58>
    5710:	2380      	movs	r3, #128	; 0x80
    5712:	041b      	lsls	r3, r3, #16
    5714:	4318      	orrs	r0, r3
    5716:	4663      	mov	r3, ip
    5718:	2b38      	cmp	r3, #56	; 0x38
    571a:	dd00      	ble.n	571e <__aeabi_dsub+0xda>
    571c:	e0fd      	b.n	591a <__aeabi_dsub+0x2d6>
    571e:	2b1f      	cmp	r3, #31
    5720:	dd00      	ble.n	5724 <__aeabi_dsub+0xe0>
    5722:	e130      	b.n	5986 <__aeabi_dsub+0x342>
    5724:	4662      	mov	r2, ip
    5726:	2320      	movs	r3, #32
    5728:	1a9b      	subs	r3, r3, r2
    572a:	0002      	movs	r2, r0
    572c:	409a      	lsls	r2, r3
    572e:	4666      	mov	r6, ip
    5730:	4690      	mov	r8, r2
    5732:	000a      	movs	r2, r1
    5734:	4099      	lsls	r1, r3
    5736:	40f2      	lsrs	r2, r6
    5738:	4646      	mov	r6, r8
    573a:	1e4b      	subs	r3, r1, #1
    573c:	4199      	sbcs	r1, r3
    573e:	4332      	orrs	r2, r6
    5740:	4311      	orrs	r1, r2
    5742:	4663      	mov	r3, ip
    5744:	0002      	movs	r2, r0
    5746:	40da      	lsrs	r2, r3
    5748:	1a69      	subs	r1, r5, r1
    574a:	428d      	cmp	r5, r1
    574c:	419b      	sbcs	r3, r3
    574e:	000d      	movs	r5, r1
    5750:	1aba      	subs	r2, r7, r2
    5752:	425b      	negs	r3, r3
    5754:	1ad7      	subs	r7, r2, r3
    5756:	023b      	lsls	r3, r7, #8
    5758:	d535      	bpl.n	57c6 <__aeabi_dsub+0x182>
    575a:	027a      	lsls	r2, r7, #9
    575c:	0a53      	lsrs	r3, r2, #9
    575e:	4698      	mov	r8, r3
    5760:	4643      	mov	r3, r8
    5762:	2b00      	cmp	r3, #0
    5764:	d100      	bne.n	5768 <__aeabi_dsub+0x124>
    5766:	e0c4      	b.n	58f2 <__aeabi_dsub+0x2ae>
    5768:	4640      	mov	r0, r8
    576a:	f000 fd35 	bl	61d8 <__clzsi2>
    576e:	0003      	movs	r3, r0
    5770:	3b08      	subs	r3, #8
    5772:	2b1f      	cmp	r3, #31
    5774:	dd00      	ble.n	5778 <__aeabi_dsub+0x134>
    5776:	e0c5      	b.n	5904 <__aeabi_dsub+0x2c0>
    5778:	2220      	movs	r2, #32
    577a:	0029      	movs	r1, r5
    577c:	1ad2      	subs	r2, r2, r3
    577e:	4647      	mov	r7, r8
    5780:	40d1      	lsrs	r1, r2
    5782:	409f      	lsls	r7, r3
    5784:	000a      	movs	r2, r1
    5786:	409d      	lsls	r5, r3
    5788:	433a      	orrs	r2, r7
    578a:	429c      	cmp	r4, r3
    578c:	dd00      	ble.n	5790 <__aeabi_dsub+0x14c>
    578e:	e0c0      	b.n	5912 <__aeabi_dsub+0x2ce>
    5790:	1b1c      	subs	r4, r3, r4
    5792:	1c63      	adds	r3, r4, #1
    5794:	2b1f      	cmp	r3, #31
    5796:	dd00      	ble.n	579a <__aeabi_dsub+0x156>
    5798:	e0e4      	b.n	5964 <__aeabi_dsub+0x320>
    579a:	2120      	movs	r1, #32
    579c:	0014      	movs	r4, r2
    579e:	0028      	movs	r0, r5
    57a0:	1ac9      	subs	r1, r1, r3
    57a2:	40d8      	lsrs	r0, r3
    57a4:	408c      	lsls	r4, r1
    57a6:	408d      	lsls	r5, r1
    57a8:	4304      	orrs	r4, r0
    57aa:	40da      	lsrs	r2, r3
    57ac:	1e68      	subs	r0, r5, #1
    57ae:	4185      	sbcs	r5, r0
    57b0:	0017      	movs	r7, r2
    57b2:	4325      	orrs	r5, r4
    57b4:	2400      	movs	r4, #0
    57b6:	e771      	b.n	569c <__aeabi_dsub+0x58>
    57b8:	4642      	mov	r2, r8
    57ba:	4663      	mov	r3, ip
    57bc:	431a      	orrs	r2, r3
    57be:	d100      	bne.n	57c2 <__aeabi_dsub+0x17e>
    57c0:	e24c      	b.n	5c5c <__aeabi_dsub+0x618>
    57c2:	4667      	mov	r7, ip
    57c4:	4645      	mov	r5, r8
    57c6:	076b      	lsls	r3, r5, #29
    57c8:	d000      	beq.n	57cc <__aeabi_dsub+0x188>
    57ca:	e769      	b.n	56a0 <__aeabi_dsub+0x5c>
    57cc:	2301      	movs	r3, #1
    57ce:	4651      	mov	r1, sl
    57d0:	0778      	lsls	r0, r7, #29
    57d2:	08ed      	lsrs	r5, r5, #3
    57d4:	08fa      	lsrs	r2, r7, #3
    57d6:	400b      	ands	r3, r1
    57d8:	4305      	orrs	r5, r0
    57da:	4973      	ldr	r1, [pc, #460]	; (59a8 <__aeabi_dsub+0x364>)
    57dc:	428c      	cmp	r4, r1
    57de:	d038      	beq.n	5852 <__aeabi_dsub+0x20e>
    57e0:	0312      	lsls	r2, r2, #12
    57e2:	0564      	lsls	r4, r4, #21
    57e4:	0b12      	lsrs	r2, r2, #12
    57e6:	0d64      	lsrs	r4, r4, #21
    57e8:	e779      	b.n	56de <__aeabi_dsub+0x9a>
    57ea:	2e00      	cmp	r6, #0
    57ec:	dc00      	bgt.n	57f0 <__aeabi_dsub+0x1ac>
    57ee:	e09a      	b.n	5926 <__aeabi_dsub+0x2e2>
    57f0:	2a00      	cmp	r2, #0
    57f2:	d047      	beq.n	5884 <__aeabi_dsub+0x240>
    57f4:	4a6c      	ldr	r2, [pc, #432]	; (59a8 <__aeabi_dsub+0x364>)
    57f6:	4294      	cmp	r4, r2
    57f8:	d100      	bne.n	57fc <__aeabi_dsub+0x1b8>
    57fa:	e74f      	b.n	569c <__aeabi_dsub+0x58>
    57fc:	2280      	movs	r2, #128	; 0x80
    57fe:	0412      	lsls	r2, r2, #16
    5800:	4310      	orrs	r0, r2
    5802:	4662      	mov	r2, ip
    5804:	2a38      	cmp	r2, #56	; 0x38
    5806:	dc00      	bgt.n	580a <__aeabi_dsub+0x1c6>
    5808:	e108      	b.n	5a1c <__aeabi_dsub+0x3d8>
    580a:	4301      	orrs	r1, r0
    580c:	1e48      	subs	r0, r1, #1
    580e:	4181      	sbcs	r1, r0
    5810:	2200      	movs	r2, #0
    5812:	b2c9      	uxtb	r1, r1
    5814:	1949      	adds	r1, r1, r5
    5816:	19d2      	adds	r2, r2, r7
    5818:	42a9      	cmp	r1, r5
    581a:	41bf      	sbcs	r7, r7
    581c:	000d      	movs	r5, r1
    581e:	427f      	negs	r7, r7
    5820:	18bf      	adds	r7, r7, r2
    5822:	023a      	lsls	r2, r7, #8
    5824:	d400      	bmi.n	5828 <__aeabi_dsub+0x1e4>
    5826:	e142      	b.n	5aae <__aeabi_dsub+0x46a>
    5828:	4a5f      	ldr	r2, [pc, #380]	; (59a8 <__aeabi_dsub+0x364>)
    582a:	3401      	adds	r4, #1
    582c:	4294      	cmp	r4, r2
    582e:	d100      	bne.n	5832 <__aeabi_dsub+0x1ee>
    5830:	e14e      	b.n	5ad0 <__aeabi_dsub+0x48c>
    5832:	2001      	movs	r0, #1
    5834:	4a5d      	ldr	r2, [pc, #372]	; (59ac <__aeabi_dsub+0x368>)
    5836:	0869      	lsrs	r1, r5, #1
    5838:	403a      	ands	r2, r7
    583a:	4028      	ands	r0, r5
    583c:	4308      	orrs	r0, r1
    583e:	07d5      	lsls	r5, r2, #31
    5840:	4305      	orrs	r5, r0
    5842:	0857      	lsrs	r7, r2, #1
    5844:	469a      	mov	sl, r3
    5846:	e729      	b.n	569c <__aeabi_dsub+0x58>
    5848:	0006      	movs	r6, r0
    584a:	430e      	orrs	r6, r1
    584c:	d000      	beq.n	5850 <__aeabi_dsub+0x20c>
    584e:	e717      	b.n	5680 <__aeabi_dsub+0x3c>
    5850:	e714      	b.n	567c <__aeabi_dsub+0x38>
    5852:	0029      	movs	r1, r5
    5854:	4311      	orrs	r1, r2
    5856:	d100      	bne.n	585a <__aeabi_dsub+0x216>
    5858:	e1f9      	b.n	5c4e <__aeabi_dsub+0x60a>
    585a:	2180      	movs	r1, #128	; 0x80
    585c:	0309      	lsls	r1, r1, #12
    585e:	430a      	orrs	r2, r1
    5860:	0312      	lsls	r2, r2, #12
    5862:	0b12      	lsrs	r2, r2, #12
    5864:	e73b      	b.n	56de <__aeabi_dsub+0x9a>
    5866:	2301      	movs	r3, #1
    5868:	425b      	negs	r3, r3
    586a:	4698      	mov	r8, r3
    586c:	44c4      	add	ip, r8
    586e:	4663      	mov	r3, ip
    5870:	2b00      	cmp	r3, #0
    5872:	d172      	bne.n	595a <__aeabi_dsub+0x316>
    5874:	1a69      	subs	r1, r5, r1
    5876:	428d      	cmp	r5, r1
    5878:	419b      	sbcs	r3, r3
    587a:	1a3f      	subs	r7, r7, r0
    587c:	425b      	negs	r3, r3
    587e:	1aff      	subs	r7, r7, r3
    5880:	000d      	movs	r5, r1
    5882:	e768      	b.n	5756 <__aeabi_dsub+0x112>
    5884:	0002      	movs	r2, r0
    5886:	430a      	orrs	r2, r1
    5888:	d100      	bne.n	588c <__aeabi_dsub+0x248>
    588a:	e707      	b.n	569c <__aeabi_dsub+0x58>
    588c:	2201      	movs	r2, #1
    588e:	4252      	negs	r2, r2
    5890:	4690      	mov	r8, r2
    5892:	44c4      	add	ip, r8
    5894:	4662      	mov	r2, ip
    5896:	2a00      	cmp	r2, #0
    5898:	d000      	beq.n	589c <__aeabi_dsub+0x258>
    589a:	e0e6      	b.n	5a6a <__aeabi_dsub+0x426>
    589c:	1869      	adds	r1, r5, r1
    589e:	42a9      	cmp	r1, r5
    58a0:	41b6      	sbcs	r6, r6
    58a2:	183f      	adds	r7, r7, r0
    58a4:	4276      	negs	r6, r6
    58a6:	19f7      	adds	r7, r6, r7
    58a8:	000d      	movs	r5, r1
    58aa:	e7ba      	b.n	5822 <__aeabi_dsub+0x1de>
    58ac:	2e00      	cmp	r6, #0
    58ae:	d000      	beq.n	58b2 <__aeabi_dsub+0x26e>
    58b0:	e080      	b.n	59b4 <__aeabi_dsub+0x370>
    58b2:	1c62      	adds	r2, r4, #1
    58b4:	0552      	lsls	r2, r2, #21
    58b6:	0d52      	lsrs	r2, r2, #21
    58b8:	2a01      	cmp	r2, #1
    58ba:	dc00      	bgt.n	58be <__aeabi_dsub+0x27a>
    58bc:	e0f9      	b.n	5ab2 <__aeabi_dsub+0x46e>
    58be:	1a6a      	subs	r2, r5, r1
    58c0:	4691      	mov	r9, r2
    58c2:	454d      	cmp	r5, r9
    58c4:	41b6      	sbcs	r6, r6
    58c6:	1a3a      	subs	r2, r7, r0
    58c8:	4276      	negs	r6, r6
    58ca:	1b92      	subs	r2, r2, r6
    58cc:	4690      	mov	r8, r2
    58ce:	0212      	lsls	r2, r2, #8
    58d0:	d400      	bmi.n	58d4 <__aeabi_dsub+0x290>
    58d2:	e099      	b.n	5a08 <__aeabi_dsub+0x3c4>
    58d4:	1b4d      	subs	r5, r1, r5
    58d6:	42a9      	cmp	r1, r5
    58d8:	4189      	sbcs	r1, r1
    58da:	1bc7      	subs	r7, r0, r7
    58dc:	4249      	negs	r1, r1
    58de:	1a7a      	subs	r2, r7, r1
    58e0:	4690      	mov	r8, r2
    58e2:	469a      	mov	sl, r3
    58e4:	e73c      	b.n	5760 <__aeabi_dsub+0x11c>
    58e6:	4652      	mov	r2, sl
    58e8:	2301      	movs	r3, #1
    58ea:	2500      	movs	r5, #0
    58ec:	4013      	ands	r3, r2
    58ee:	2200      	movs	r2, #0
    58f0:	e6f5      	b.n	56de <__aeabi_dsub+0x9a>
    58f2:	0028      	movs	r0, r5
    58f4:	f000 fc70 	bl	61d8 <__clzsi2>
    58f8:	3020      	adds	r0, #32
    58fa:	0003      	movs	r3, r0
    58fc:	3b08      	subs	r3, #8
    58fe:	2b1f      	cmp	r3, #31
    5900:	dc00      	bgt.n	5904 <__aeabi_dsub+0x2c0>
    5902:	e739      	b.n	5778 <__aeabi_dsub+0x134>
    5904:	002a      	movs	r2, r5
    5906:	3828      	subs	r0, #40	; 0x28
    5908:	4082      	lsls	r2, r0
    590a:	2500      	movs	r5, #0
    590c:	429c      	cmp	r4, r3
    590e:	dc00      	bgt.n	5912 <__aeabi_dsub+0x2ce>
    5910:	e73e      	b.n	5790 <__aeabi_dsub+0x14c>
    5912:	4f26      	ldr	r7, [pc, #152]	; (59ac <__aeabi_dsub+0x368>)
    5914:	1ae4      	subs	r4, r4, r3
    5916:	4017      	ands	r7, r2
    5918:	e6c0      	b.n	569c <__aeabi_dsub+0x58>
    591a:	4301      	orrs	r1, r0
    591c:	1e48      	subs	r0, r1, #1
    591e:	4181      	sbcs	r1, r0
    5920:	2200      	movs	r2, #0
    5922:	b2c9      	uxtb	r1, r1
    5924:	e710      	b.n	5748 <__aeabi_dsub+0x104>
    5926:	2e00      	cmp	r6, #0
    5928:	d000      	beq.n	592c <__aeabi_dsub+0x2e8>
    592a:	e0f1      	b.n	5b10 <__aeabi_dsub+0x4cc>
    592c:	1c62      	adds	r2, r4, #1
    592e:	4694      	mov	ip, r2
    5930:	0552      	lsls	r2, r2, #21
    5932:	0d52      	lsrs	r2, r2, #21
    5934:	2a01      	cmp	r2, #1
    5936:	dc00      	bgt.n	593a <__aeabi_dsub+0x2f6>
    5938:	e0a0      	b.n	5a7c <__aeabi_dsub+0x438>
    593a:	4a1b      	ldr	r2, [pc, #108]	; (59a8 <__aeabi_dsub+0x364>)
    593c:	4594      	cmp	ip, r2
    593e:	d100      	bne.n	5942 <__aeabi_dsub+0x2fe>
    5940:	e0c5      	b.n	5ace <__aeabi_dsub+0x48a>
    5942:	1869      	adds	r1, r5, r1
    5944:	42a9      	cmp	r1, r5
    5946:	4192      	sbcs	r2, r2
    5948:	183f      	adds	r7, r7, r0
    594a:	4252      	negs	r2, r2
    594c:	19d2      	adds	r2, r2, r7
    594e:	0849      	lsrs	r1, r1, #1
    5950:	07d5      	lsls	r5, r2, #31
    5952:	430d      	orrs	r5, r1
    5954:	0857      	lsrs	r7, r2, #1
    5956:	4664      	mov	r4, ip
    5958:	e6a0      	b.n	569c <__aeabi_dsub+0x58>
    595a:	4b13      	ldr	r3, [pc, #76]	; (59a8 <__aeabi_dsub+0x364>)
    595c:	429c      	cmp	r4, r3
    595e:	d000      	beq.n	5962 <__aeabi_dsub+0x31e>
    5960:	e6d9      	b.n	5716 <__aeabi_dsub+0xd2>
    5962:	e69b      	b.n	569c <__aeabi_dsub+0x58>
    5964:	0011      	movs	r1, r2
    5966:	3c1f      	subs	r4, #31
    5968:	40e1      	lsrs	r1, r4
    596a:	000c      	movs	r4, r1
    596c:	2b20      	cmp	r3, #32
    596e:	d100      	bne.n	5972 <__aeabi_dsub+0x32e>
    5970:	e080      	b.n	5a74 <__aeabi_dsub+0x430>
    5972:	2140      	movs	r1, #64	; 0x40
    5974:	1acb      	subs	r3, r1, r3
    5976:	409a      	lsls	r2, r3
    5978:	4315      	orrs	r5, r2
    597a:	1e6a      	subs	r2, r5, #1
    597c:	4195      	sbcs	r5, r2
    597e:	2700      	movs	r7, #0
    5980:	4325      	orrs	r5, r4
    5982:	2400      	movs	r4, #0
    5984:	e71f      	b.n	57c6 <__aeabi_dsub+0x182>
    5986:	4663      	mov	r3, ip
    5988:	0002      	movs	r2, r0
    598a:	3b20      	subs	r3, #32
    598c:	40da      	lsrs	r2, r3
    598e:	4663      	mov	r3, ip
    5990:	2b20      	cmp	r3, #32
    5992:	d071      	beq.n	5a78 <__aeabi_dsub+0x434>
    5994:	2340      	movs	r3, #64	; 0x40
    5996:	4666      	mov	r6, ip
    5998:	1b9b      	subs	r3, r3, r6
    599a:	4098      	lsls	r0, r3
    599c:	4301      	orrs	r1, r0
    599e:	1e48      	subs	r0, r1, #1
    59a0:	4181      	sbcs	r1, r0
    59a2:	4311      	orrs	r1, r2
    59a4:	2200      	movs	r2, #0
    59a6:	e6cf      	b.n	5748 <__aeabi_dsub+0x104>
    59a8:	000007ff 	.word	0x000007ff
    59ac:	ff7fffff 	.word	0xff7fffff
    59b0:	800fffff 	.word	0x800fffff
    59b4:	2c00      	cmp	r4, #0
    59b6:	d048      	beq.n	5a4a <__aeabi_dsub+0x406>
    59b8:	4cca      	ldr	r4, [pc, #808]	; (5ce4 <__aeabi_dsub+0x6a0>)
    59ba:	42a2      	cmp	r2, r4
    59bc:	d100      	bne.n	59c0 <__aeabi_dsub+0x37c>
    59be:	e0a2      	b.n	5b06 <__aeabi_dsub+0x4c2>
    59c0:	4274      	negs	r4, r6
    59c2:	46a1      	mov	r9, r4
    59c4:	2480      	movs	r4, #128	; 0x80
    59c6:	0424      	lsls	r4, r4, #16
    59c8:	4327      	orrs	r7, r4
    59ca:	464c      	mov	r4, r9
    59cc:	2c38      	cmp	r4, #56	; 0x38
    59ce:	dd00      	ble.n	59d2 <__aeabi_dsub+0x38e>
    59d0:	e0db      	b.n	5b8a <__aeabi_dsub+0x546>
    59d2:	2c1f      	cmp	r4, #31
    59d4:	dd00      	ble.n	59d8 <__aeabi_dsub+0x394>
    59d6:	e144      	b.n	5c62 <__aeabi_dsub+0x61e>
    59d8:	464e      	mov	r6, r9
    59da:	2420      	movs	r4, #32
    59dc:	1ba4      	subs	r4, r4, r6
    59de:	003e      	movs	r6, r7
    59e0:	40a6      	lsls	r6, r4
    59e2:	46a2      	mov	sl, r4
    59e4:	46b0      	mov	r8, r6
    59e6:	464c      	mov	r4, r9
    59e8:	002e      	movs	r6, r5
    59ea:	40e6      	lsrs	r6, r4
    59ec:	46b4      	mov	ip, r6
    59ee:	4646      	mov	r6, r8
    59f0:	4664      	mov	r4, ip
    59f2:	4326      	orrs	r6, r4
    59f4:	4654      	mov	r4, sl
    59f6:	40a5      	lsls	r5, r4
    59f8:	1e6c      	subs	r4, r5, #1
    59fa:	41a5      	sbcs	r5, r4
    59fc:	0034      	movs	r4, r6
    59fe:	432c      	orrs	r4, r5
    5a00:	464d      	mov	r5, r9
    5a02:	40ef      	lsrs	r7, r5
    5a04:	1b0d      	subs	r5, r1, r4
    5a06:	e028      	b.n	5a5a <__aeabi_dsub+0x416>
    5a08:	464a      	mov	r2, r9
    5a0a:	4643      	mov	r3, r8
    5a0c:	464d      	mov	r5, r9
    5a0e:	431a      	orrs	r2, r3
    5a10:	d000      	beq.n	5a14 <__aeabi_dsub+0x3d0>
    5a12:	e6a5      	b.n	5760 <__aeabi_dsub+0x11c>
    5a14:	2300      	movs	r3, #0
    5a16:	2400      	movs	r4, #0
    5a18:	2500      	movs	r5, #0
    5a1a:	e6de      	b.n	57da <__aeabi_dsub+0x196>
    5a1c:	2a1f      	cmp	r2, #31
    5a1e:	dc5a      	bgt.n	5ad6 <__aeabi_dsub+0x492>
    5a20:	4666      	mov	r6, ip
    5a22:	2220      	movs	r2, #32
    5a24:	1b92      	subs	r2, r2, r6
    5a26:	0006      	movs	r6, r0
    5a28:	4096      	lsls	r6, r2
    5a2a:	4691      	mov	r9, r2
    5a2c:	46b0      	mov	r8, r6
    5a2e:	4662      	mov	r2, ip
    5a30:	000e      	movs	r6, r1
    5a32:	40d6      	lsrs	r6, r2
    5a34:	4642      	mov	r2, r8
    5a36:	4316      	orrs	r6, r2
    5a38:	464a      	mov	r2, r9
    5a3a:	4091      	lsls	r1, r2
    5a3c:	1e4a      	subs	r2, r1, #1
    5a3e:	4191      	sbcs	r1, r2
    5a40:	0002      	movs	r2, r0
    5a42:	4660      	mov	r0, ip
    5a44:	4331      	orrs	r1, r6
    5a46:	40c2      	lsrs	r2, r0
    5a48:	e6e4      	b.n	5814 <__aeabi_dsub+0x1d0>
    5a4a:	003c      	movs	r4, r7
    5a4c:	432c      	orrs	r4, r5
    5a4e:	d05a      	beq.n	5b06 <__aeabi_dsub+0x4c2>
    5a50:	43f4      	mvns	r4, r6
    5a52:	46a1      	mov	r9, r4
    5a54:	2c00      	cmp	r4, #0
    5a56:	d152      	bne.n	5afe <__aeabi_dsub+0x4ba>
    5a58:	1b4d      	subs	r5, r1, r5
    5a5a:	42a9      	cmp	r1, r5
    5a5c:	4189      	sbcs	r1, r1
    5a5e:	1bc7      	subs	r7, r0, r7
    5a60:	4249      	negs	r1, r1
    5a62:	1a7f      	subs	r7, r7, r1
    5a64:	0014      	movs	r4, r2
    5a66:	469a      	mov	sl, r3
    5a68:	e675      	b.n	5756 <__aeabi_dsub+0x112>
    5a6a:	4a9e      	ldr	r2, [pc, #632]	; (5ce4 <__aeabi_dsub+0x6a0>)
    5a6c:	4294      	cmp	r4, r2
    5a6e:	d000      	beq.n	5a72 <__aeabi_dsub+0x42e>
    5a70:	e6c7      	b.n	5802 <__aeabi_dsub+0x1be>
    5a72:	e613      	b.n	569c <__aeabi_dsub+0x58>
    5a74:	2200      	movs	r2, #0
    5a76:	e77f      	b.n	5978 <__aeabi_dsub+0x334>
    5a78:	2000      	movs	r0, #0
    5a7a:	e78f      	b.n	599c <__aeabi_dsub+0x358>
    5a7c:	2c00      	cmp	r4, #0
    5a7e:	d000      	beq.n	5a82 <__aeabi_dsub+0x43e>
    5a80:	e0c8      	b.n	5c14 <__aeabi_dsub+0x5d0>
    5a82:	003b      	movs	r3, r7
    5a84:	432b      	orrs	r3, r5
    5a86:	d100      	bne.n	5a8a <__aeabi_dsub+0x446>
    5a88:	e10f      	b.n	5caa <__aeabi_dsub+0x666>
    5a8a:	0003      	movs	r3, r0
    5a8c:	430b      	orrs	r3, r1
    5a8e:	d100      	bne.n	5a92 <__aeabi_dsub+0x44e>
    5a90:	e604      	b.n	569c <__aeabi_dsub+0x58>
    5a92:	1869      	adds	r1, r5, r1
    5a94:	42a9      	cmp	r1, r5
    5a96:	419b      	sbcs	r3, r3
    5a98:	183f      	adds	r7, r7, r0
    5a9a:	425b      	negs	r3, r3
    5a9c:	19df      	adds	r7, r3, r7
    5a9e:	023b      	lsls	r3, r7, #8
    5aa0:	d400      	bmi.n	5aa4 <__aeabi_dsub+0x460>
    5aa2:	e11a      	b.n	5cda <__aeabi_dsub+0x696>
    5aa4:	4b90      	ldr	r3, [pc, #576]	; (5ce8 <__aeabi_dsub+0x6a4>)
    5aa6:	000d      	movs	r5, r1
    5aa8:	401f      	ands	r7, r3
    5aaa:	4664      	mov	r4, ip
    5aac:	e5f6      	b.n	569c <__aeabi_dsub+0x58>
    5aae:	469a      	mov	sl, r3
    5ab0:	e689      	b.n	57c6 <__aeabi_dsub+0x182>
    5ab2:	003a      	movs	r2, r7
    5ab4:	432a      	orrs	r2, r5
    5ab6:	2c00      	cmp	r4, #0
    5ab8:	d15c      	bne.n	5b74 <__aeabi_dsub+0x530>
    5aba:	2a00      	cmp	r2, #0
    5abc:	d175      	bne.n	5baa <__aeabi_dsub+0x566>
    5abe:	0002      	movs	r2, r0
    5ac0:	430a      	orrs	r2, r1
    5ac2:	d100      	bne.n	5ac6 <__aeabi_dsub+0x482>
    5ac4:	e0ca      	b.n	5c5c <__aeabi_dsub+0x618>
    5ac6:	0007      	movs	r7, r0
    5ac8:	000d      	movs	r5, r1
    5aca:	469a      	mov	sl, r3
    5acc:	e5e6      	b.n	569c <__aeabi_dsub+0x58>
    5ace:	4664      	mov	r4, ip
    5ad0:	2200      	movs	r2, #0
    5ad2:	2500      	movs	r5, #0
    5ad4:	e681      	b.n	57da <__aeabi_dsub+0x196>
    5ad6:	4662      	mov	r2, ip
    5ad8:	0006      	movs	r6, r0
    5ada:	3a20      	subs	r2, #32
    5adc:	40d6      	lsrs	r6, r2
    5ade:	4662      	mov	r2, ip
    5ae0:	46b0      	mov	r8, r6
    5ae2:	2a20      	cmp	r2, #32
    5ae4:	d100      	bne.n	5ae8 <__aeabi_dsub+0x4a4>
    5ae6:	e0b7      	b.n	5c58 <__aeabi_dsub+0x614>
    5ae8:	2240      	movs	r2, #64	; 0x40
    5aea:	4666      	mov	r6, ip
    5aec:	1b92      	subs	r2, r2, r6
    5aee:	4090      	lsls	r0, r2
    5af0:	4301      	orrs	r1, r0
    5af2:	4642      	mov	r2, r8
    5af4:	1e48      	subs	r0, r1, #1
    5af6:	4181      	sbcs	r1, r0
    5af8:	4311      	orrs	r1, r2
    5afa:	2200      	movs	r2, #0
    5afc:	e68a      	b.n	5814 <__aeabi_dsub+0x1d0>
    5afe:	4c79      	ldr	r4, [pc, #484]	; (5ce4 <__aeabi_dsub+0x6a0>)
    5b00:	42a2      	cmp	r2, r4
    5b02:	d000      	beq.n	5b06 <__aeabi_dsub+0x4c2>
    5b04:	e761      	b.n	59ca <__aeabi_dsub+0x386>
    5b06:	0007      	movs	r7, r0
    5b08:	000d      	movs	r5, r1
    5b0a:	0014      	movs	r4, r2
    5b0c:	469a      	mov	sl, r3
    5b0e:	e5c5      	b.n	569c <__aeabi_dsub+0x58>
    5b10:	2c00      	cmp	r4, #0
    5b12:	d141      	bne.n	5b98 <__aeabi_dsub+0x554>
    5b14:	003c      	movs	r4, r7
    5b16:	432c      	orrs	r4, r5
    5b18:	d078      	beq.n	5c0c <__aeabi_dsub+0x5c8>
    5b1a:	43f4      	mvns	r4, r6
    5b1c:	46a1      	mov	r9, r4
    5b1e:	2c00      	cmp	r4, #0
    5b20:	d020      	beq.n	5b64 <__aeabi_dsub+0x520>
    5b22:	4c70      	ldr	r4, [pc, #448]	; (5ce4 <__aeabi_dsub+0x6a0>)
    5b24:	42a2      	cmp	r2, r4
    5b26:	d071      	beq.n	5c0c <__aeabi_dsub+0x5c8>
    5b28:	464c      	mov	r4, r9
    5b2a:	2c38      	cmp	r4, #56	; 0x38
    5b2c:	dd00      	ble.n	5b30 <__aeabi_dsub+0x4ec>
    5b2e:	e0b2      	b.n	5c96 <__aeabi_dsub+0x652>
    5b30:	2c1f      	cmp	r4, #31
    5b32:	dd00      	ble.n	5b36 <__aeabi_dsub+0x4f2>
    5b34:	e0bc      	b.n	5cb0 <__aeabi_dsub+0x66c>
    5b36:	2620      	movs	r6, #32
    5b38:	1b34      	subs	r4, r6, r4
    5b3a:	46a2      	mov	sl, r4
    5b3c:	003c      	movs	r4, r7
    5b3e:	4656      	mov	r6, sl
    5b40:	40b4      	lsls	r4, r6
    5b42:	464e      	mov	r6, r9
    5b44:	46a0      	mov	r8, r4
    5b46:	002c      	movs	r4, r5
    5b48:	40f4      	lsrs	r4, r6
    5b4a:	46a4      	mov	ip, r4
    5b4c:	4644      	mov	r4, r8
    5b4e:	4666      	mov	r6, ip
    5b50:	4334      	orrs	r4, r6
    5b52:	46a4      	mov	ip, r4
    5b54:	4654      	mov	r4, sl
    5b56:	40a5      	lsls	r5, r4
    5b58:	4664      	mov	r4, ip
    5b5a:	1e6e      	subs	r6, r5, #1
    5b5c:	41b5      	sbcs	r5, r6
    5b5e:	4325      	orrs	r5, r4
    5b60:	464c      	mov	r4, r9
    5b62:	40e7      	lsrs	r7, r4
    5b64:	186d      	adds	r5, r5, r1
    5b66:	428d      	cmp	r5, r1
    5b68:	4189      	sbcs	r1, r1
    5b6a:	183f      	adds	r7, r7, r0
    5b6c:	4249      	negs	r1, r1
    5b6e:	19cf      	adds	r7, r1, r7
    5b70:	0014      	movs	r4, r2
    5b72:	e656      	b.n	5822 <__aeabi_dsub+0x1de>
    5b74:	2a00      	cmp	r2, #0
    5b76:	d12f      	bne.n	5bd8 <__aeabi_dsub+0x594>
    5b78:	0002      	movs	r2, r0
    5b7a:	430a      	orrs	r2, r1
    5b7c:	d100      	bne.n	5b80 <__aeabi_dsub+0x53c>
    5b7e:	e084      	b.n	5c8a <__aeabi_dsub+0x646>
    5b80:	0007      	movs	r7, r0
    5b82:	000d      	movs	r5, r1
    5b84:	469a      	mov	sl, r3
    5b86:	4c57      	ldr	r4, [pc, #348]	; (5ce4 <__aeabi_dsub+0x6a0>)
    5b88:	e588      	b.n	569c <__aeabi_dsub+0x58>
    5b8a:	433d      	orrs	r5, r7
    5b8c:	1e6f      	subs	r7, r5, #1
    5b8e:	41bd      	sbcs	r5, r7
    5b90:	b2ec      	uxtb	r4, r5
    5b92:	2700      	movs	r7, #0
    5b94:	1b0d      	subs	r5, r1, r4
    5b96:	e760      	b.n	5a5a <__aeabi_dsub+0x416>
    5b98:	4c52      	ldr	r4, [pc, #328]	; (5ce4 <__aeabi_dsub+0x6a0>)
    5b9a:	42a2      	cmp	r2, r4
    5b9c:	d036      	beq.n	5c0c <__aeabi_dsub+0x5c8>
    5b9e:	4274      	negs	r4, r6
    5ba0:	2680      	movs	r6, #128	; 0x80
    5ba2:	0436      	lsls	r6, r6, #16
    5ba4:	46a1      	mov	r9, r4
    5ba6:	4337      	orrs	r7, r6
    5ba8:	e7be      	b.n	5b28 <__aeabi_dsub+0x4e4>
    5baa:	0002      	movs	r2, r0
    5bac:	430a      	orrs	r2, r1
    5bae:	d100      	bne.n	5bb2 <__aeabi_dsub+0x56e>
    5bb0:	e574      	b.n	569c <__aeabi_dsub+0x58>
    5bb2:	1a6a      	subs	r2, r5, r1
    5bb4:	4690      	mov	r8, r2
    5bb6:	4545      	cmp	r5, r8
    5bb8:	41b6      	sbcs	r6, r6
    5bba:	1a3a      	subs	r2, r7, r0
    5bbc:	4276      	negs	r6, r6
    5bbe:	1b92      	subs	r2, r2, r6
    5bc0:	4694      	mov	ip, r2
    5bc2:	0212      	lsls	r2, r2, #8
    5bc4:	d400      	bmi.n	5bc8 <__aeabi_dsub+0x584>
    5bc6:	e5f7      	b.n	57b8 <__aeabi_dsub+0x174>
    5bc8:	1b4d      	subs	r5, r1, r5
    5bca:	42a9      	cmp	r1, r5
    5bcc:	4189      	sbcs	r1, r1
    5bce:	1bc7      	subs	r7, r0, r7
    5bd0:	4249      	negs	r1, r1
    5bd2:	1a7f      	subs	r7, r7, r1
    5bd4:	469a      	mov	sl, r3
    5bd6:	e561      	b.n	569c <__aeabi_dsub+0x58>
    5bd8:	0002      	movs	r2, r0
    5bda:	430a      	orrs	r2, r1
    5bdc:	d03a      	beq.n	5c54 <__aeabi_dsub+0x610>
    5bde:	08ed      	lsrs	r5, r5, #3
    5be0:	077c      	lsls	r4, r7, #29
    5be2:	432c      	orrs	r4, r5
    5be4:	2580      	movs	r5, #128	; 0x80
    5be6:	08fa      	lsrs	r2, r7, #3
    5be8:	032d      	lsls	r5, r5, #12
    5bea:	422a      	tst	r2, r5
    5bec:	d008      	beq.n	5c00 <__aeabi_dsub+0x5bc>
    5bee:	08c7      	lsrs	r7, r0, #3
    5bf0:	422f      	tst	r7, r5
    5bf2:	d105      	bne.n	5c00 <__aeabi_dsub+0x5bc>
    5bf4:	0745      	lsls	r5, r0, #29
    5bf6:	002c      	movs	r4, r5
    5bf8:	003a      	movs	r2, r7
    5bfa:	469a      	mov	sl, r3
    5bfc:	08c9      	lsrs	r1, r1, #3
    5bfe:	430c      	orrs	r4, r1
    5c00:	0f67      	lsrs	r7, r4, #29
    5c02:	00d2      	lsls	r2, r2, #3
    5c04:	00e5      	lsls	r5, r4, #3
    5c06:	4317      	orrs	r7, r2
    5c08:	4c36      	ldr	r4, [pc, #216]	; (5ce4 <__aeabi_dsub+0x6a0>)
    5c0a:	e547      	b.n	569c <__aeabi_dsub+0x58>
    5c0c:	0007      	movs	r7, r0
    5c0e:	000d      	movs	r5, r1
    5c10:	0014      	movs	r4, r2
    5c12:	e543      	b.n	569c <__aeabi_dsub+0x58>
    5c14:	003a      	movs	r2, r7
    5c16:	432a      	orrs	r2, r5
    5c18:	d043      	beq.n	5ca2 <__aeabi_dsub+0x65e>
    5c1a:	0002      	movs	r2, r0
    5c1c:	430a      	orrs	r2, r1
    5c1e:	d019      	beq.n	5c54 <__aeabi_dsub+0x610>
    5c20:	08ed      	lsrs	r5, r5, #3
    5c22:	077c      	lsls	r4, r7, #29
    5c24:	432c      	orrs	r4, r5
    5c26:	2580      	movs	r5, #128	; 0x80
    5c28:	08fa      	lsrs	r2, r7, #3
    5c2a:	032d      	lsls	r5, r5, #12
    5c2c:	422a      	tst	r2, r5
    5c2e:	d007      	beq.n	5c40 <__aeabi_dsub+0x5fc>
    5c30:	08c6      	lsrs	r6, r0, #3
    5c32:	422e      	tst	r6, r5
    5c34:	d104      	bne.n	5c40 <__aeabi_dsub+0x5fc>
    5c36:	0747      	lsls	r7, r0, #29
    5c38:	003c      	movs	r4, r7
    5c3a:	0032      	movs	r2, r6
    5c3c:	08c9      	lsrs	r1, r1, #3
    5c3e:	430c      	orrs	r4, r1
    5c40:	00d7      	lsls	r7, r2, #3
    5c42:	0f62      	lsrs	r2, r4, #29
    5c44:	00e5      	lsls	r5, r4, #3
    5c46:	4317      	orrs	r7, r2
    5c48:	469a      	mov	sl, r3
    5c4a:	4c26      	ldr	r4, [pc, #152]	; (5ce4 <__aeabi_dsub+0x6a0>)
    5c4c:	e526      	b.n	569c <__aeabi_dsub+0x58>
    5c4e:	2200      	movs	r2, #0
    5c50:	2500      	movs	r5, #0
    5c52:	e544      	b.n	56de <__aeabi_dsub+0x9a>
    5c54:	4c23      	ldr	r4, [pc, #140]	; (5ce4 <__aeabi_dsub+0x6a0>)
    5c56:	e521      	b.n	569c <__aeabi_dsub+0x58>
    5c58:	2000      	movs	r0, #0
    5c5a:	e749      	b.n	5af0 <__aeabi_dsub+0x4ac>
    5c5c:	2300      	movs	r3, #0
    5c5e:	2500      	movs	r5, #0
    5c60:	e5bb      	b.n	57da <__aeabi_dsub+0x196>
    5c62:	464c      	mov	r4, r9
    5c64:	003e      	movs	r6, r7
    5c66:	3c20      	subs	r4, #32
    5c68:	40e6      	lsrs	r6, r4
    5c6a:	464c      	mov	r4, r9
    5c6c:	46b4      	mov	ip, r6
    5c6e:	2c20      	cmp	r4, #32
    5c70:	d031      	beq.n	5cd6 <__aeabi_dsub+0x692>
    5c72:	2440      	movs	r4, #64	; 0x40
    5c74:	464e      	mov	r6, r9
    5c76:	1ba6      	subs	r6, r4, r6
    5c78:	40b7      	lsls	r7, r6
    5c7a:	433d      	orrs	r5, r7
    5c7c:	1e6c      	subs	r4, r5, #1
    5c7e:	41a5      	sbcs	r5, r4
    5c80:	4664      	mov	r4, ip
    5c82:	432c      	orrs	r4, r5
    5c84:	2700      	movs	r7, #0
    5c86:	1b0d      	subs	r5, r1, r4
    5c88:	e6e7      	b.n	5a5a <__aeabi_dsub+0x416>
    5c8a:	2280      	movs	r2, #128	; 0x80
    5c8c:	2300      	movs	r3, #0
    5c8e:	0312      	lsls	r2, r2, #12
    5c90:	4c14      	ldr	r4, [pc, #80]	; (5ce4 <__aeabi_dsub+0x6a0>)
    5c92:	2500      	movs	r5, #0
    5c94:	e5a1      	b.n	57da <__aeabi_dsub+0x196>
    5c96:	433d      	orrs	r5, r7
    5c98:	1e6f      	subs	r7, r5, #1
    5c9a:	41bd      	sbcs	r5, r7
    5c9c:	2700      	movs	r7, #0
    5c9e:	b2ed      	uxtb	r5, r5
    5ca0:	e760      	b.n	5b64 <__aeabi_dsub+0x520>
    5ca2:	0007      	movs	r7, r0
    5ca4:	000d      	movs	r5, r1
    5ca6:	4c0f      	ldr	r4, [pc, #60]	; (5ce4 <__aeabi_dsub+0x6a0>)
    5ca8:	e4f8      	b.n	569c <__aeabi_dsub+0x58>
    5caa:	0007      	movs	r7, r0
    5cac:	000d      	movs	r5, r1
    5cae:	e4f5      	b.n	569c <__aeabi_dsub+0x58>
    5cb0:	464e      	mov	r6, r9
    5cb2:	003c      	movs	r4, r7
    5cb4:	3e20      	subs	r6, #32
    5cb6:	40f4      	lsrs	r4, r6
    5cb8:	46a0      	mov	r8, r4
    5cba:	464c      	mov	r4, r9
    5cbc:	2c20      	cmp	r4, #32
    5cbe:	d00e      	beq.n	5cde <__aeabi_dsub+0x69a>
    5cc0:	2440      	movs	r4, #64	; 0x40
    5cc2:	464e      	mov	r6, r9
    5cc4:	1ba4      	subs	r4, r4, r6
    5cc6:	40a7      	lsls	r7, r4
    5cc8:	433d      	orrs	r5, r7
    5cca:	1e6f      	subs	r7, r5, #1
    5ccc:	41bd      	sbcs	r5, r7
    5cce:	4644      	mov	r4, r8
    5cd0:	2700      	movs	r7, #0
    5cd2:	4325      	orrs	r5, r4
    5cd4:	e746      	b.n	5b64 <__aeabi_dsub+0x520>
    5cd6:	2700      	movs	r7, #0
    5cd8:	e7cf      	b.n	5c7a <__aeabi_dsub+0x636>
    5cda:	000d      	movs	r5, r1
    5cdc:	e573      	b.n	57c6 <__aeabi_dsub+0x182>
    5cde:	2700      	movs	r7, #0
    5ce0:	e7f2      	b.n	5cc8 <__aeabi_dsub+0x684>
    5ce2:	46c0      	nop			; (mov r8, r8)
    5ce4:	000007ff 	.word	0x000007ff
    5ce8:	ff7fffff 	.word	0xff7fffff

00005cec <__aeabi_dcmpun>:
    5cec:	b570      	push	{r4, r5, r6, lr}
    5cee:	4e0e      	ldr	r6, [pc, #56]	; (5d28 <__aeabi_dcmpun+0x3c>)
    5cf0:	030c      	lsls	r4, r1, #12
    5cf2:	031d      	lsls	r5, r3, #12
    5cf4:	0049      	lsls	r1, r1, #1
    5cf6:	005b      	lsls	r3, r3, #1
    5cf8:	0b24      	lsrs	r4, r4, #12
    5cfa:	0d49      	lsrs	r1, r1, #21
    5cfc:	0b2d      	lsrs	r5, r5, #12
    5cfe:	0d5b      	lsrs	r3, r3, #21
    5d00:	42b1      	cmp	r1, r6
    5d02:	d004      	beq.n	5d0e <__aeabi_dcmpun+0x22>
    5d04:	4908      	ldr	r1, [pc, #32]	; (5d28 <__aeabi_dcmpun+0x3c>)
    5d06:	2000      	movs	r0, #0
    5d08:	428b      	cmp	r3, r1
    5d0a:	d008      	beq.n	5d1e <__aeabi_dcmpun+0x32>
    5d0c:	bd70      	pop	{r4, r5, r6, pc}
    5d0e:	4304      	orrs	r4, r0
    5d10:	2001      	movs	r0, #1
    5d12:	2c00      	cmp	r4, #0
    5d14:	d1fa      	bne.n	5d0c <__aeabi_dcmpun+0x20>
    5d16:	4904      	ldr	r1, [pc, #16]	; (5d28 <__aeabi_dcmpun+0x3c>)
    5d18:	2000      	movs	r0, #0
    5d1a:	428b      	cmp	r3, r1
    5d1c:	d1f6      	bne.n	5d0c <__aeabi_dcmpun+0x20>
    5d1e:	4315      	orrs	r5, r2
    5d20:	0028      	movs	r0, r5
    5d22:	1e45      	subs	r5, r0, #1
    5d24:	41a8      	sbcs	r0, r5
    5d26:	e7f1      	b.n	5d0c <__aeabi_dcmpun+0x20>
    5d28:	000007ff 	.word	0x000007ff

00005d2c <__aeabi_d2iz>:
    5d2c:	030b      	lsls	r3, r1, #12
    5d2e:	b530      	push	{r4, r5, lr}
    5d30:	4d13      	ldr	r5, [pc, #76]	; (5d80 <__aeabi_d2iz+0x54>)
    5d32:	0b1a      	lsrs	r2, r3, #12
    5d34:	004b      	lsls	r3, r1, #1
    5d36:	0d5b      	lsrs	r3, r3, #21
    5d38:	0fc9      	lsrs	r1, r1, #31
    5d3a:	2400      	movs	r4, #0
    5d3c:	42ab      	cmp	r3, r5
    5d3e:	dd11      	ble.n	5d64 <__aeabi_d2iz+0x38>
    5d40:	4c10      	ldr	r4, [pc, #64]	; (5d84 <__aeabi_d2iz+0x58>)
    5d42:	42a3      	cmp	r3, r4
    5d44:	dc10      	bgt.n	5d68 <__aeabi_d2iz+0x3c>
    5d46:	2480      	movs	r4, #128	; 0x80
    5d48:	0364      	lsls	r4, r4, #13
    5d4a:	4322      	orrs	r2, r4
    5d4c:	4c0e      	ldr	r4, [pc, #56]	; (5d88 <__aeabi_d2iz+0x5c>)
    5d4e:	1ae4      	subs	r4, r4, r3
    5d50:	2c1f      	cmp	r4, #31
    5d52:	dd0c      	ble.n	5d6e <__aeabi_d2iz+0x42>
    5d54:	480d      	ldr	r0, [pc, #52]	; (5d8c <__aeabi_d2iz+0x60>)
    5d56:	1ac3      	subs	r3, r0, r3
    5d58:	40da      	lsrs	r2, r3
    5d5a:	0013      	movs	r3, r2
    5d5c:	425c      	negs	r4, r3
    5d5e:	2900      	cmp	r1, #0
    5d60:	d100      	bne.n	5d64 <__aeabi_d2iz+0x38>
    5d62:	001c      	movs	r4, r3
    5d64:	0020      	movs	r0, r4
    5d66:	bd30      	pop	{r4, r5, pc}
    5d68:	4b09      	ldr	r3, [pc, #36]	; (5d90 <__aeabi_d2iz+0x64>)
    5d6a:	18cc      	adds	r4, r1, r3
    5d6c:	e7fa      	b.n	5d64 <__aeabi_d2iz+0x38>
    5d6e:	40e0      	lsrs	r0, r4
    5d70:	4c08      	ldr	r4, [pc, #32]	; (5d94 <__aeabi_d2iz+0x68>)
    5d72:	46a4      	mov	ip, r4
    5d74:	4463      	add	r3, ip
    5d76:	409a      	lsls	r2, r3
    5d78:	0013      	movs	r3, r2
    5d7a:	4303      	orrs	r3, r0
    5d7c:	e7ee      	b.n	5d5c <__aeabi_d2iz+0x30>
    5d7e:	46c0      	nop			; (mov r8, r8)
    5d80:	000003fe 	.word	0x000003fe
    5d84:	0000041d 	.word	0x0000041d
    5d88:	00000433 	.word	0x00000433
    5d8c:	00000413 	.word	0x00000413
    5d90:	7fffffff 	.word	0x7fffffff
    5d94:	fffffbed 	.word	0xfffffbed

00005d98 <__aeabi_i2d>:
    5d98:	b570      	push	{r4, r5, r6, lr}
    5d9a:	2800      	cmp	r0, #0
    5d9c:	d030      	beq.n	5e00 <__aeabi_i2d+0x68>
    5d9e:	17c3      	asrs	r3, r0, #31
    5da0:	18c4      	adds	r4, r0, r3
    5da2:	405c      	eors	r4, r3
    5da4:	0fc5      	lsrs	r5, r0, #31
    5da6:	0020      	movs	r0, r4
    5da8:	f000 fa16 	bl	61d8 <__clzsi2>
    5dac:	4b17      	ldr	r3, [pc, #92]	; (5e0c <__aeabi_i2d+0x74>)
    5dae:	4a18      	ldr	r2, [pc, #96]	; (5e10 <__aeabi_i2d+0x78>)
    5db0:	1a1b      	subs	r3, r3, r0
    5db2:	1ad2      	subs	r2, r2, r3
    5db4:	2a1f      	cmp	r2, #31
    5db6:	dd18      	ble.n	5dea <__aeabi_i2d+0x52>
    5db8:	4a16      	ldr	r2, [pc, #88]	; (5e14 <__aeabi_i2d+0x7c>)
    5dba:	1ad2      	subs	r2, r2, r3
    5dbc:	4094      	lsls	r4, r2
    5dbe:	2200      	movs	r2, #0
    5dc0:	0324      	lsls	r4, r4, #12
    5dc2:	055b      	lsls	r3, r3, #21
    5dc4:	0b24      	lsrs	r4, r4, #12
    5dc6:	0d5b      	lsrs	r3, r3, #21
    5dc8:	2100      	movs	r1, #0
    5dca:	0010      	movs	r0, r2
    5dcc:	0324      	lsls	r4, r4, #12
    5dce:	0d0a      	lsrs	r2, r1, #20
    5dd0:	0512      	lsls	r2, r2, #20
    5dd2:	0b24      	lsrs	r4, r4, #12
    5dd4:	4314      	orrs	r4, r2
    5dd6:	4a10      	ldr	r2, [pc, #64]	; (5e18 <__aeabi_i2d+0x80>)
    5dd8:	051b      	lsls	r3, r3, #20
    5dda:	4014      	ands	r4, r2
    5ddc:	431c      	orrs	r4, r3
    5dde:	0064      	lsls	r4, r4, #1
    5de0:	07ed      	lsls	r5, r5, #31
    5de2:	0864      	lsrs	r4, r4, #1
    5de4:	432c      	orrs	r4, r5
    5de6:	0021      	movs	r1, r4
    5de8:	bd70      	pop	{r4, r5, r6, pc}
    5dea:	0021      	movs	r1, r4
    5dec:	4091      	lsls	r1, r2
    5dee:	000a      	movs	r2, r1
    5df0:	210b      	movs	r1, #11
    5df2:	1a08      	subs	r0, r1, r0
    5df4:	40c4      	lsrs	r4, r0
    5df6:	055b      	lsls	r3, r3, #21
    5df8:	0324      	lsls	r4, r4, #12
    5dfa:	0b24      	lsrs	r4, r4, #12
    5dfc:	0d5b      	lsrs	r3, r3, #21
    5dfe:	e7e3      	b.n	5dc8 <__aeabi_i2d+0x30>
    5e00:	2500      	movs	r5, #0
    5e02:	2300      	movs	r3, #0
    5e04:	2400      	movs	r4, #0
    5e06:	2200      	movs	r2, #0
    5e08:	e7de      	b.n	5dc8 <__aeabi_i2d+0x30>
    5e0a:	46c0      	nop			; (mov r8, r8)
    5e0c:	0000041e 	.word	0x0000041e
    5e10:	00000433 	.word	0x00000433
    5e14:	00000413 	.word	0x00000413
    5e18:	800fffff 	.word	0x800fffff

00005e1c <__aeabi_ui2d>:
    5e1c:	b570      	push	{r4, r5, r6, lr}
    5e1e:	1e05      	subs	r5, r0, #0
    5e20:	d028      	beq.n	5e74 <__aeabi_ui2d+0x58>
    5e22:	f000 f9d9 	bl	61d8 <__clzsi2>
    5e26:	4b15      	ldr	r3, [pc, #84]	; (5e7c <__aeabi_ui2d+0x60>)
    5e28:	4a15      	ldr	r2, [pc, #84]	; (5e80 <__aeabi_ui2d+0x64>)
    5e2a:	1a1b      	subs	r3, r3, r0
    5e2c:	1ad2      	subs	r2, r2, r3
    5e2e:	2a1f      	cmp	r2, #31
    5e30:	dd16      	ble.n	5e60 <__aeabi_ui2d+0x44>
    5e32:	002c      	movs	r4, r5
    5e34:	4a13      	ldr	r2, [pc, #76]	; (5e84 <__aeabi_ui2d+0x68>)
    5e36:	2500      	movs	r5, #0
    5e38:	1ad2      	subs	r2, r2, r3
    5e3a:	4094      	lsls	r4, r2
    5e3c:	055a      	lsls	r2, r3, #21
    5e3e:	0324      	lsls	r4, r4, #12
    5e40:	0b24      	lsrs	r4, r4, #12
    5e42:	0d52      	lsrs	r2, r2, #21
    5e44:	2100      	movs	r1, #0
    5e46:	0324      	lsls	r4, r4, #12
    5e48:	0d0b      	lsrs	r3, r1, #20
    5e4a:	0b24      	lsrs	r4, r4, #12
    5e4c:	051b      	lsls	r3, r3, #20
    5e4e:	4323      	orrs	r3, r4
    5e50:	4c0d      	ldr	r4, [pc, #52]	; (5e88 <__aeabi_ui2d+0x6c>)
    5e52:	0512      	lsls	r2, r2, #20
    5e54:	4023      	ands	r3, r4
    5e56:	4313      	orrs	r3, r2
    5e58:	005b      	lsls	r3, r3, #1
    5e5a:	0028      	movs	r0, r5
    5e5c:	0859      	lsrs	r1, r3, #1
    5e5e:	bd70      	pop	{r4, r5, r6, pc}
    5e60:	210b      	movs	r1, #11
    5e62:	002c      	movs	r4, r5
    5e64:	1a08      	subs	r0, r1, r0
    5e66:	40c4      	lsrs	r4, r0
    5e68:	4095      	lsls	r5, r2
    5e6a:	0324      	lsls	r4, r4, #12
    5e6c:	055a      	lsls	r2, r3, #21
    5e6e:	0b24      	lsrs	r4, r4, #12
    5e70:	0d52      	lsrs	r2, r2, #21
    5e72:	e7e7      	b.n	5e44 <__aeabi_ui2d+0x28>
    5e74:	2200      	movs	r2, #0
    5e76:	2400      	movs	r4, #0
    5e78:	e7e4      	b.n	5e44 <__aeabi_ui2d+0x28>
    5e7a:	46c0      	nop			; (mov r8, r8)
    5e7c:	0000041e 	.word	0x0000041e
    5e80:	00000433 	.word	0x00000433
    5e84:	00000413 	.word	0x00000413
    5e88:	800fffff 	.word	0x800fffff

00005e8c <__aeabi_f2d>:
    5e8c:	0042      	lsls	r2, r0, #1
    5e8e:	0e12      	lsrs	r2, r2, #24
    5e90:	1c51      	adds	r1, r2, #1
    5e92:	0243      	lsls	r3, r0, #9
    5e94:	b2c9      	uxtb	r1, r1
    5e96:	b570      	push	{r4, r5, r6, lr}
    5e98:	0a5d      	lsrs	r5, r3, #9
    5e9a:	0fc4      	lsrs	r4, r0, #31
    5e9c:	2901      	cmp	r1, #1
    5e9e:	dd15      	ble.n	5ecc <__aeabi_f2d+0x40>
    5ea0:	21e0      	movs	r1, #224	; 0xe0
    5ea2:	0089      	lsls	r1, r1, #2
    5ea4:	468c      	mov	ip, r1
    5ea6:	076d      	lsls	r5, r5, #29
    5ea8:	0b1b      	lsrs	r3, r3, #12
    5eaa:	4462      	add	r2, ip
    5eac:	2100      	movs	r1, #0
    5eae:	0028      	movs	r0, r5
    5eb0:	0d0d      	lsrs	r5, r1, #20
    5eb2:	052d      	lsls	r5, r5, #20
    5eb4:	432b      	orrs	r3, r5
    5eb6:	4d1c      	ldr	r5, [pc, #112]	; (5f28 <__aeabi_f2d+0x9c>)
    5eb8:	0552      	lsls	r2, r2, #21
    5eba:	402b      	ands	r3, r5
    5ebc:	0852      	lsrs	r2, r2, #1
    5ebe:	4313      	orrs	r3, r2
    5ec0:	005b      	lsls	r3, r3, #1
    5ec2:	07e4      	lsls	r4, r4, #31
    5ec4:	085b      	lsrs	r3, r3, #1
    5ec6:	4323      	orrs	r3, r4
    5ec8:	0019      	movs	r1, r3
    5eca:	bd70      	pop	{r4, r5, r6, pc}
    5ecc:	2a00      	cmp	r2, #0
    5ece:	d115      	bne.n	5efc <__aeabi_f2d+0x70>
    5ed0:	2d00      	cmp	r5, #0
    5ed2:	d01f      	beq.n	5f14 <__aeabi_f2d+0x88>
    5ed4:	0028      	movs	r0, r5
    5ed6:	f000 f97f 	bl	61d8 <__clzsi2>
    5eda:	280a      	cmp	r0, #10
    5edc:	dc1d      	bgt.n	5f1a <__aeabi_f2d+0x8e>
    5ede:	230b      	movs	r3, #11
    5ee0:	002a      	movs	r2, r5
    5ee2:	1a1b      	subs	r3, r3, r0
    5ee4:	40da      	lsrs	r2, r3
    5ee6:	0013      	movs	r3, r2
    5ee8:	0002      	movs	r2, r0
    5eea:	3215      	adds	r2, #21
    5eec:	4095      	lsls	r5, r2
    5eee:	4a0f      	ldr	r2, [pc, #60]	; (5f2c <__aeabi_f2d+0xa0>)
    5ef0:	031b      	lsls	r3, r3, #12
    5ef2:	1a12      	subs	r2, r2, r0
    5ef4:	0552      	lsls	r2, r2, #21
    5ef6:	0b1b      	lsrs	r3, r3, #12
    5ef8:	0d52      	lsrs	r2, r2, #21
    5efa:	e7d7      	b.n	5eac <__aeabi_f2d+0x20>
    5efc:	2d00      	cmp	r5, #0
    5efe:	d006      	beq.n	5f0e <__aeabi_f2d+0x82>
    5f00:	2280      	movs	r2, #128	; 0x80
    5f02:	0b1b      	lsrs	r3, r3, #12
    5f04:	0312      	lsls	r2, r2, #12
    5f06:	4313      	orrs	r3, r2
    5f08:	076d      	lsls	r5, r5, #29
    5f0a:	4a09      	ldr	r2, [pc, #36]	; (5f30 <__aeabi_f2d+0xa4>)
    5f0c:	e7ce      	b.n	5eac <__aeabi_f2d+0x20>
    5f0e:	4a08      	ldr	r2, [pc, #32]	; (5f30 <__aeabi_f2d+0xa4>)
    5f10:	2300      	movs	r3, #0
    5f12:	e7cb      	b.n	5eac <__aeabi_f2d+0x20>
    5f14:	2200      	movs	r2, #0
    5f16:	2300      	movs	r3, #0
    5f18:	e7c8      	b.n	5eac <__aeabi_f2d+0x20>
    5f1a:	0003      	movs	r3, r0
    5f1c:	3b0b      	subs	r3, #11
    5f1e:	409d      	lsls	r5, r3
    5f20:	002b      	movs	r3, r5
    5f22:	2500      	movs	r5, #0
    5f24:	e7e3      	b.n	5eee <__aeabi_f2d+0x62>
    5f26:	46c0      	nop			; (mov r8, r8)
    5f28:	800fffff 	.word	0x800fffff
    5f2c:	00000389 	.word	0x00000389
    5f30:	000007ff 	.word	0x000007ff

00005f34 <__aeabi_d2f>:
    5f34:	004b      	lsls	r3, r1, #1
    5f36:	b570      	push	{r4, r5, r6, lr}
    5f38:	0d5e      	lsrs	r6, r3, #21
    5f3a:	030c      	lsls	r4, r1, #12
    5f3c:	1c75      	adds	r5, r6, #1
    5f3e:	0a64      	lsrs	r4, r4, #9
    5f40:	0f42      	lsrs	r2, r0, #29
    5f42:	056d      	lsls	r5, r5, #21
    5f44:	4322      	orrs	r2, r4
    5f46:	0fc9      	lsrs	r1, r1, #31
    5f48:	00c4      	lsls	r4, r0, #3
    5f4a:	0d6d      	lsrs	r5, r5, #21
    5f4c:	2d01      	cmp	r5, #1
    5f4e:	dd2a      	ble.n	5fa6 <__aeabi_d2f+0x72>
    5f50:	4b3b      	ldr	r3, [pc, #236]	; (6040 <__aeabi_d2f+0x10c>)
    5f52:	18f3      	adds	r3, r6, r3
    5f54:	2bfe      	cmp	r3, #254	; 0xfe
    5f56:	dc1a      	bgt.n	5f8e <__aeabi_d2f+0x5a>
    5f58:	2b00      	cmp	r3, #0
    5f5a:	dd42      	ble.n	5fe2 <__aeabi_d2f+0xae>
    5f5c:	0180      	lsls	r0, r0, #6
    5f5e:	1e45      	subs	r5, r0, #1
    5f60:	41a8      	sbcs	r0, r5
    5f62:	00d2      	lsls	r2, r2, #3
    5f64:	4310      	orrs	r0, r2
    5f66:	0f62      	lsrs	r2, r4, #29
    5f68:	4302      	orrs	r2, r0
    5f6a:	0750      	lsls	r0, r2, #29
    5f6c:	d004      	beq.n	5f78 <__aeabi_d2f+0x44>
    5f6e:	200f      	movs	r0, #15
    5f70:	4010      	ands	r0, r2
    5f72:	2804      	cmp	r0, #4
    5f74:	d000      	beq.n	5f78 <__aeabi_d2f+0x44>
    5f76:	3204      	adds	r2, #4
    5f78:	2080      	movs	r0, #128	; 0x80
    5f7a:	04c0      	lsls	r0, r0, #19
    5f7c:	4010      	ands	r0, r2
    5f7e:	d021      	beq.n	5fc4 <__aeabi_d2f+0x90>
    5f80:	3301      	adds	r3, #1
    5f82:	2bff      	cmp	r3, #255	; 0xff
    5f84:	d003      	beq.n	5f8e <__aeabi_d2f+0x5a>
    5f86:	0192      	lsls	r2, r2, #6
    5f88:	0a52      	lsrs	r2, r2, #9
    5f8a:	b2db      	uxtb	r3, r3
    5f8c:	e001      	b.n	5f92 <__aeabi_d2f+0x5e>
    5f8e:	23ff      	movs	r3, #255	; 0xff
    5f90:	2200      	movs	r2, #0
    5f92:	0252      	lsls	r2, r2, #9
    5f94:	0a52      	lsrs	r2, r2, #9
    5f96:	05db      	lsls	r3, r3, #23
    5f98:	4313      	orrs	r3, r2
    5f9a:	005b      	lsls	r3, r3, #1
    5f9c:	07c9      	lsls	r1, r1, #31
    5f9e:	085b      	lsrs	r3, r3, #1
    5fa0:	430b      	orrs	r3, r1
    5fa2:	0018      	movs	r0, r3
    5fa4:	bd70      	pop	{r4, r5, r6, pc}
    5fa6:	2e00      	cmp	r6, #0
    5fa8:	d007      	beq.n	5fba <__aeabi_d2f+0x86>
    5faa:	4314      	orrs	r4, r2
    5fac:	d0ef      	beq.n	5f8e <__aeabi_d2f+0x5a>
    5fae:	2080      	movs	r0, #128	; 0x80
    5fb0:	00d2      	lsls	r2, r2, #3
    5fb2:	0480      	lsls	r0, r0, #18
    5fb4:	4302      	orrs	r2, r0
    5fb6:	23ff      	movs	r3, #255	; 0xff
    5fb8:	e7d7      	b.n	5f6a <__aeabi_d2f+0x36>
    5fba:	4322      	orrs	r2, r4
    5fbc:	2300      	movs	r3, #0
    5fbe:	2a00      	cmp	r2, #0
    5fc0:	d003      	beq.n	5fca <__aeabi_d2f+0x96>
    5fc2:	2205      	movs	r2, #5
    5fc4:	08d2      	lsrs	r2, r2, #3
    5fc6:	2bff      	cmp	r3, #255	; 0xff
    5fc8:	d003      	beq.n	5fd2 <__aeabi_d2f+0x9e>
    5fca:	0252      	lsls	r2, r2, #9
    5fcc:	0a52      	lsrs	r2, r2, #9
    5fce:	b2db      	uxtb	r3, r3
    5fd0:	e7df      	b.n	5f92 <__aeabi_d2f+0x5e>
    5fd2:	2a00      	cmp	r2, #0
    5fd4:	d032      	beq.n	603c <__aeabi_d2f+0x108>
    5fd6:	2080      	movs	r0, #128	; 0x80
    5fd8:	03c0      	lsls	r0, r0, #15
    5fda:	4302      	orrs	r2, r0
    5fdc:	0252      	lsls	r2, r2, #9
    5fde:	0a52      	lsrs	r2, r2, #9
    5fe0:	e7d7      	b.n	5f92 <__aeabi_d2f+0x5e>
    5fe2:	0018      	movs	r0, r3
    5fe4:	3017      	adds	r0, #23
    5fe6:	db14      	blt.n	6012 <__aeabi_d2f+0xde>
    5fe8:	2080      	movs	r0, #128	; 0x80
    5fea:	0400      	lsls	r0, r0, #16
    5fec:	4302      	orrs	r2, r0
    5fee:	201e      	movs	r0, #30
    5ff0:	1ac0      	subs	r0, r0, r3
    5ff2:	281f      	cmp	r0, #31
    5ff4:	dc0f      	bgt.n	6016 <__aeabi_d2f+0xe2>
    5ff6:	0025      	movs	r5, r4
    5ff8:	4b12      	ldr	r3, [pc, #72]	; (6044 <__aeabi_d2f+0x110>)
    5ffa:	18f3      	adds	r3, r6, r3
    5ffc:	409d      	lsls	r5, r3
    5ffe:	1e6e      	subs	r6, r5, #1
    6000:	41b5      	sbcs	r5, r6
    6002:	409a      	lsls	r2, r3
    6004:	002b      	movs	r3, r5
    6006:	4313      	orrs	r3, r2
    6008:	0022      	movs	r2, r4
    600a:	40c2      	lsrs	r2, r0
    600c:	431a      	orrs	r2, r3
    600e:	2300      	movs	r3, #0
    6010:	e7ab      	b.n	5f6a <__aeabi_d2f+0x36>
    6012:	2300      	movs	r3, #0
    6014:	e7d5      	b.n	5fc2 <__aeabi_d2f+0x8e>
    6016:	2502      	movs	r5, #2
    6018:	426d      	negs	r5, r5
    601a:	1aeb      	subs	r3, r5, r3
    601c:	0015      	movs	r5, r2
    601e:	40dd      	lsrs	r5, r3
    6020:	2820      	cmp	r0, #32
    6022:	d009      	beq.n	6038 <__aeabi_d2f+0x104>
    6024:	4b08      	ldr	r3, [pc, #32]	; (6048 <__aeabi_d2f+0x114>)
    6026:	18f3      	adds	r3, r6, r3
    6028:	409a      	lsls	r2, r3
    602a:	4314      	orrs	r4, r2
    602c:	1e62      	subs	r2, r4, #1
    602e:	4194      	sbcs	r4, r2
    6030:	0022      	movs	r2, r4
    6032:	2300      	movs	r3, #0
    6034:	432a      	orrs	r2, r5
    6036:	e798      	b.n	5f6a <__aeabi_d2f+0x36>
    6038:	2200      	movs	r2, #0
    603a:	e7f6      	b.n	602a <__aeabi_d2f+0xf6>
    603c:	2200      	movs	r2, #0
    603e:	e7a8      	b.n	5f92 <__aeabi_d2f+0x5e>
    6040:	fffffc80 	.word	0xfffffc80
    6044:	fffffc82 	.word	0xfffffc82
    6048:	fffffca2 	.word	0xfffffca2

0000604c <__aeabi_uidiv>:
    604c:	2200      	movs	r2, #0
    604e:	0843      	lsrs	r3, r0, #1
    6050:	428b      	cmp	r3, r1
    6052:	d374      	bcc.n	613e <__aeabi_uidiv+0xf2>
    6054:	0903      	lsrs	r3, r0, #4
    6056:	428b      	cmp	r3, r1
    6058:	d35f      	bcc.n	611a <__aeabi_uidiv+0xce>
    605a:	0a03      	lsrs	r3, r0, #8
    605c:	428b      	cmp	r3, r1
    605e:	d344      	bcc.n	60ea <__aeabi_uidiv+0x9e>
    6060:	0b03      	lsrs	r3, r0, #12
    6062:	428b      	cmp	r3, r1
    6064:	d328      	bcc.n	60b8 <__aeabi_uidiv+0x6c>
    6066:	0c03      	lsrs	r3, r0, #16
    6068:	428b      	cmp	r3, r1
    606a:	d30d      	bcc.n	6088 <__aeabi_uidiv+0x3c>
    606c:	22ff      	movs	r2, #255	; 0xff
    606e:	0209      	lsls	r1, r1, #8
    6070:	ba12      	rev	r2, r2
    6072:	0c03      	lsrs	r3, r0, #16
    6074:	428b      	cmp	r3, r1
    6076:	d302      	bcc.n	607e <__aeabi_uidiv+0x32>
    6078:	1212      	asrs	r2, r2, #8
    607a:	0209      	lsls	r1, r1, #8
    607c:	d065      	beq.n	614a <__aeabi_uidiv+0xfe>
    607e:	0b03      	lsrs	r3, r0, #12
    6080:	428b      	cmp	r3, r1
    6082:	d319      	bcc.n	60b8 <__aeabi_uidiv+0x6c>
    6084:	e000      	b.n	6088 <__aeabi_uidiv+0x3c>
    6086:	0a09      	lsrs	r1, r1, #8
    6088:	0bc3      	lsrs	r3, r0, #15
    608a:	428b      	cmp	r3, r1
    608c:	d301      	bcc.n	6092 <__aeabi_uidiv+0x46>
    608e:	03cb      	lsls	r3, r1, #15
    6090:	1ac0      	subs	r0, r0, r3
    6092:	4152      	adcs	r2, r2
    6094:	0b83      	lsrs	r3, r0, #14
    6096:	428b      	cmp	r3, r1
    6098:	d301      	bcc.n	609e <__aeabi_uidiv+0x52>
    609a:	038b      	lsls	r3, r1, #14
    609c:	1ac0      	subs	r0, r0, r3
    609e:	4152      	adcs	r2, r2
    60a0:	0b43      	lsrs	r3, r0, #13
    60a2:	428b      	cmp	r3, r1
    60a4:	d301      	bcc.n	60aa <__aeabi_uidiv+0x5e>
    60a6:	034b      	lsls	r3, r1, #13
    60a8:	1ac0      	subs	r0, r0, r3
    60aa:	4152      	adcs	r2, r2
    60ac:	0b03      	lsrs	r3, r0, #12
    60ae:	428b      	cmp	r3, r1
    60b0:	d301      	bcc.n	60b6 <__aeabi_uidiv+0x6a>
    60b2:	030b      	lsls	r3, r1, #12
    60b4:	1ac0      	subs	r0, r0, r3
    60b6:	4152      	adcs	r2, r2
    60b8:	0ac3      	lsrs	r3, r0, #11
    60ba:	428b      	cmp	r3, r1
    60bc:	d301      	bcc.n	60c2 <__aeabi_uidiv+0x76>
    60be:	02cb      	lsls	r3, r1, #11
    60c0:	1ac0      	subs	r0, r0, r3
    60c2:	4152      	adcs	r2, r2
    60c4:	0a83      	lsrs	r3, r0, #10
    60c6:	428b      	cmp	r3, r1
    60c8:	d301      	bcc.n	60ce <__aeabi_uidiv+0x82>
    60ca:	028b      	lsls	r3, r1, #10
    60cc:	1ac0      	subs	r0, r0, r3
    60ce:	4152      	adcs	r2, r2
    60d0:	0a43      	lsrs	r3, r0, #9
    60d2:	428b      	cmp	r3, r1
    60d4:	d301      	bcc.n	60da <__aeabi_uidiv+0x8e>
    60d6:	024b      	lsls	r3, r1, #9
    60d8:	1ac0      	subs	r0, r0, r3
    60da:	4152      	adcs	r2, r2
    60dc:	0a03      	lsrs	r3, r0, #8
    60de:	428b      	cmp	r3, r1
    60e0:	d301      	bcc.n	60e6 <__aeabi_uidiv+0x9a>
    60e2:	020b      	lsls	r3, r1, #8
    60e4:	1ac0      	subs	r0, r0, r3
    60e6:	4152      	adcs	r2, r2
    60e8:	d2cd      	bcs.n	6086 <__aeabi_uidiv+0x3a>
    60ea:	09c3      	lsrs	r3, r0, #7
    60ec:	428b      	cmp	r3, r1
    60ee:	d301      	bcc.n	60f4 <__aeabi_uidiv+0xa8>
    60f0:	01cb      	lsls	r3, r1, #7
    60f2:	1ac0      	subs	r0, r0, r3
    60f4:	4152      	adcs	r2, r2
    60f6:	0983      	lsrs	r3, r0, #6
    60f8:	428b      	cmp	r3, r1
    60fa:	d301      	bcc.n	6100 <__aeabi_uidiv+0xb4>
    60fc:	018b      	lsls	r3, r1, #6
    60fe:	1ac0      	subs	r0, r0, r3
    6100:	4152      	adcs	r2, r2
    6102:	0943      	lsrs	r3, r0, #5
    6104:	428b      	cmp	r3, r1
    6106:	d301      	bcc.n	610c <__aeabi_uidiv+0xc0>
    6108:	014b      	lsls	r3, r1, #5
    610a:	1ac0      	subs	r0, r0, r3
    610c:	4152      	adcs	r2, r2
    610e:	0903      	lsrs	r3, r0, #4
    6110:	428b      	cmp	r3, r1
    6112:	d301      	bcc.n	6118 <__aeabi_uidiv+0xcc>
    6114:	010b      	lsls	r3, r1, #4
    6116:	1ac0      	subs	r0, r0, r3
    6118:	4152      	adcs	r2, r2
    611a:	08c3      	lsrs	r3, r0, #3
    611c:	428b      	cmp	r3, r1
    611e:	d301      	bcc.n	6124 <__aeabi_uidiv+0xd8>
    6120:	00cb      	lsls	r3, r1, #3
    6122:	1ac0      	subs	r0, r0, r3
    6124:	4152      	adcs	r2, r2
    6126:	0883      	lsrs	r3, r0, #2
    6128:	428b      	cmp	r3, r1
    612a:	d301      	bcc.n	6130 <__aeabi_uidiv+0xe4>
    612c:	008b      	lsls	r3, r1, #2
    612e:	1ac0      	subs	r0, r0, r3
    6130:	4152      	adcs	r2, r2
    6132:	0843      	lsrs	r3, r0, #1
    6134:	428b      	cmp	r3, r1
    6136:	d301      	bcc.n	613c <__aeabi_uidiv+0xf0>
    6138:	004b      	lsls	r3, r1, #1
    613a:	1ac0      	subs	r0, r0, r3
    613c:	4152      	adcs	r2, r2
    613e:	1a41      	subs	r1, r0, r1
    6140:	d200      	bcs.n	6144 <__aeabi_uidiv+0xf8>
    6142:	4601      	mov	r1, r0
    6144:	4152      	adcs	r2, r2
    6146:	4610      	mov	r0, r2
    6148:	4770      	bx	lr
    614a:	e7ff      	b.n	614c <__aeabi_uidiv+0x100>
    614c:	b501      	push	{r0, lr}
    614e:	2000      	movs	r0, #0
    6150:	f000 f806 	bl	6160 <__aeabi_idiv0>
    6154:	bd02      	pop	{r1, pc}
    6156:	46c0      	nop			; (mov r8, r8)

00006158 <__aeabi_uidivmod>:
    6158:	2900      	cmp	r1, #0
    615a:	d0f7      	beq.n	614c <__aeabi_uidiv+0x100>
    615c:	e776      	b.n	604c <__aeabi_uidiv>
    615e:	4770      	bx	lr

00006160 <__aeabi_idiv0>:
    6160:	4770      	bx	lr
    6162:	46c0      	nop			; (mov r8, r8)

00006164 <__aeabi_cfrcmple>:
    6164:	4684      	mov	ip, r0
    6166:	1c08      	adds	r0, r1, #0
    6168:	4661      	mov	r1, ip
    616a:	e7ff      	b.n	616c <__aeabi_cfcmpeq>

0000616c <__aeabi_cfcmpeq>:
    616c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    616e:	f000 f8bd 	bl	62ec <__lesf2>
    6172:	2800      	cmp	r0, #0
    6174:	d401      	bmi.n	617a <__aeabi_cfcmpeq+0xe>
    6176:	2100      	movs	r1, #0
    6178:	42c8      	cmn	r0, r1
    617a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0000617c <__aeabi_fcmpeq>:
    617c:	b510      	push	{r4, lr}
    617e:	f000 f849 	bl	6214 <__eqsf2>
    6182:	4240      	negs	r0, r0
    6184:	3001      	adds	r0, #1
    6186:	bd10      	pop	{r4, pc}

00006188 <__aeabi_fcmplt>:
    6188:	b510      	push	{r4, lr}
    618a:	f000 f8af 	bl	62ec <__lesf2>
    618e:	2800      	cmp	r0, #0
    6190:	db01      	blt.n	6196 <__aeabi_fcmplt+0xe>
    6192:	2000      	movs	r0, #0
    6194:	bd10      	pop	{r4, pc}
    6196:	2001      	movs	r0, #1
    6198:	bd10      	pop	{r4, pc}
    619a:	46c0      	nop			; (mov r8, r8)

0000619c <__aeabi_fcmple>:
    619c:	b510      	push	{r4, lr}
    619e:	f000 f8a5 	bl	62ec <__lesf2>
    61a2:	2800      	cmp	r0, #0
    61a4:	dd01      	ble.n	61aa <__aeabi_fcmple+0xe>
    61a6:	2000      	movs	r0, #0
    61a8:	bd10      	pop	{r4, pc}
    61aa:	2001      	movs	r0, #1
    61ac:	bd10      	pop	{r4, pc}
    61ae:	46c0      	nop			; (mov r8, r8)

000061b0 <__aeabi_fcmpgt>:
    61b0:	b510      	push	{r4, lr}
    61b2:	f000 f857 	bl	6264 <__gesf2>
    61b6:	2800      	cmp	r0, #0
    61b8:	dc01      	bgt.n	61be <__aeabi_fcmpgt+0xe>
    61ba:	2000      	movs	r0, #0
    61bc:	bd10      	pop	{r4, pc}
    61be:	2001      	movs	r0, #1
    61c0:	bd10      	pop	{r4, pc}
    61c2:	46c0      	nop			; (mov r8, r8)

000061c4 <__aeabi_fcmpge>:
    61c4:	b510      	push	{r4, lr}
    61c6:	f000 f84d 	bl	6264 <__gesf2>
    61ca:	2800      	cmp	r0, #0
    61cc:	da01      	bge.n	61d2 <__aeabi_fcmpge+0xe>
    61ce:	2000      	movs	r0, #0
    61d0:	bd10      	pop	{r4, pc}
    61d2:	2001      	movs	r0, #1
    61d4:	bd10      	pop	{r4, pc}
    61d6:	46c0      	nop			; (mov r8, r8)

000061d8 <__clzsi2>:
    61d8:	211c      	movs	r1, #28
    61da:	2301      	movs	r3, #1
    61dc:	041b      	lsls	r3, r3, #16
    61de:	4298      	cmp	r0, r3
    61e0:	d301      	bcc.n	61e6 <__clzsi2+0xe>
    61e2:	0c00      	lsrs	r0, r0, #16
    61e4:	3910      	subs	r1, #16
    61e6:	0a1b      	lsrs	r3, r3, #8
    61e8:	4298      	cmp	r0, r3
    61ea:	d301      	bcc.n	61f0 <__clzsi2+0x18>
    61ec:	0a00      	lsrs	r0, r0, #8
    61ee:	3908      	subs	r1, #8
    61f0:	091b      	lsrs	r3, r3, #4
    61f2:	4298      	cmp	r0, r3
    61f4:	d301      	bcc.n	61fa <__clzsi2+0x22>
    61f6:	0900      	lsrs	r0, r0, #4
    61f8:	3904      	subs	r1, #4
    61fa:	a202      	add	r2, pc, #8	; (adr r2, 6204 <__clzsi2+0x2c>)
    61fc:	5c10      	ldrb	r0, [r2, r0]
    61fe:	1840      	adds	r0, r0, r1
    6200:	4770      	bx	lr
    6202:	46c0      	nop			; (mov r8, r8)
    6204:	02020304 	.word	0x02020304
    6208:	01010101 	.word	0x01010101
	...

00006214 <__eqsf2>:
    6214:	0243      	lsls	r3, r0, #9
    6216:	b570      	push	{r4, r5, r6, lr}
    6218:	0042      	lsls	r2, r0, #1
    621a:	004c      	lsls	r4, r1, #1
    621c:	0a5d      	lsrs	r5, r3, #9
    621e:	0fc3      	lsrs	r3, r0, #31
    6220:	0248      	lsls	r0, r1, #9
    6222:	0e12      	lsrs	r2, r2, #24
    6224:	0a46      	lsrs	r6, r0, #9
    6226:	0e24      	lsrs	r4, r4, #24
    6228:	0fc9      	lsrs	r1, r1, #31
    622a:	2aff      	cmp	r2, #255	; 0xff
    622c:	d00f      	beq.n	624e <__eqsf2+0x3a>
    622e:	2cff      	cmp	r4, #255	; 0xff
    6230:	d011      	beq.n	6256 <__eqsf2+0x42>
    6232:	2001      	movs	r0, #1
    6234:	42a2      	cmp	r2, r4
    6236:	d000      	beq.n	623a <__eqsf2+0x26>
    6238:	bd70      	pop	{r4, r5, r6, pc}
    623a:	42b5      	cmp	r5, r6
    623c:	d1fc      	bne.n	6238 <__eqsf2+0x24>
    623e:	428b      	cmp	r3, r1
    6240:	d00d      	beq.n	625e <__eqsf2+0x4a>
    6242:	2a00      	cmp	r2, #0
    6244:	d1f8      	bne.n	6238 <__eqsf2+0x24>
    6246:	0028      	movs	r0, r5
    6248:	1e43      	subs	r3, r0, #1
    624a:	4198      	sbcs	r0, r3
    624c:	e7f4      	b.n	6238 <__eqsf2+0x24>
    624e:	2001      	movs	r0, #1
    6250:	2d00      	cmp	r5, #0
    6252:	d1f1      	bne.n	6238 <__eqsf2+0x24>
    6254:	e7eb      	b.n	622e <__eqsf2+0x1a>
    6256:	2001      	movs	r0, #1
    6258:	2e00      	cmp	r6, #0
    625a:	d1ed      	bne.n	6238 <__eqsf2+0x24>
    625c:	e7e9      	b.n	6232 <__eqsf2+0x1e>
    625e:	2000      	movs	r0, #0
    6260:	e7ea      	b.n	6238 <__eqsf2+0x24>
    6262:	46c0      	nop			; (mov r8, r8)

00006264 <__gesf2>:
    6264:	0243      	lsls	r3, r0, #9
    6266:	b5f0      	push	{r4, r5, r6, r7, lr}
    6268:	0042      	lsls	r2, r0, #1
    626a:	0a5d      	lsrs	r5, r3, #9
    626c:	0fc3      	lsrs	r3, r0, #31
    626e:	0248      	lsls	r0, r1, #9
    6270:	0a44      	lsrs	r4, r0, #9
    6272:	0048      	lsls	r0, r1, #1
    6274:	0e12      	lsrs	r2, r2, #24
    6276:	0e00      	lsrs	r0, r0, #24
    6278:	0fc9      	lsrs	r1, r1, #31
    627a:	2aff      	cmp	r2, #255	; 0xff
    627c:	d01f      	beq.n	62be <__gesf2+0x5a>
    627e:	28ff      	cmp	r0, #255	; 0xff
    6280:	d022      	beq.n	62c8 <__gesf2+0x64>
    6282:	2a00      	cmp	r2, #0
    6284:	d109      	bne.n	629a <__gesf2+0x36>
    6286:	426e      	negs	r6, r5
    6288:	416e      	adcs	r6, r5
    628a:	2800      	cmp	r0, #0
    628c:	d10f      	bne.n	62ae <__gesf2+0x4a>
    628e:	2c00      	cmp	r4, #0
    6290:	d10d      	bne.n	62ae <__gesf2+0x4a>
    6292:	2000      	movs	r0, #0
    6294:	2d00      	cmp	r5, #0
    6296:	d009      	beq.n	62ac <__gesf2+0x48>
    6298:	e005      	b.n	62a6 <__gesf2+0x42>
    629a:	2800      	cmp	r0, #0
    629c:	d101      	bne.n	62a2 <__gesf2+0x3e>
    629e:	2c00      	cmp	r4, #0
    62a0:	d001      	beq.n	62a6 <__gesf2+0x42>
    62a2:	428b      	cmp	r3, r1
    62a4:	d013      	beq.n	62ce <__gesf2+0x6a>
    62a6:	4258      	negs	r0, r3
    62a8:	2301      	movs	r3, #1
    62aa:	4318      	orrs	r0, r3
    62ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    62ae:	2e00      	cmp	r6, #0
    62b0:	d0f7      	beq.n	62a2 <__gesf2+0x3e>
    62b2:	4248      	negs	r0, r1
    62b4:	4141      	adcs	r1, r0
    62b6:	2001      	movs	r0, #1
    62b8:	4249      	negs	r1, r1
    62ba:	4308      	orrs	r0, r1
    62bc:	e7f6      	b.n	62ac <__gesf2+0x48>
    62be:	2d00      	cmp	r5, #0
    62c0:	d0dd      	beq.n	627e <__gesf2+0x1a>
    62c2:	2002      	movs	r0, #2
    62c4:	4240      	negs	r0, r0
    62c6:	e7f1      	b.n	62ac <__gesf2+0x48>
    62c8:	2c00      	cmp	r4, #0
    62ca:	d0da      	beq.n	6282 <__gesf2+0x1e>
    62cc:	e7f9      	b.n	62c2 <__gesf2+0x5e>
    62ce:	4282      	cmp	r2, r0
    62d0:	dce9      	bgt.n	62a6 <__gesf2+0x42>
    62d2:	db04      	blt.n	62de <__gesf2+0x7a>
    62d4:	42a5      	cmp	r5, r4
    62d6:	d8e6      	bhi.n	62a6 <__gesf2+0x42>
    62d8:	2000      	movs	r0, #0
    62da:	42a5      	cmp	r5, r4
    62dc:	d2e6      	bcs.n	62ac <__gesf2+0x48>
    62de:	4258      	negs	r0, r3
    62e0:	4143      	adcs	r3, r0
    62e2:	2001      	movs	r0, #1
    62e4:	425b      	negs	r3, r3
    62e6:	4318      	orrs	r0, r3
    62e8:	e7e0      	b.n	62ac <__gesf2+0x48>
    62ea:	46c0      	nop			; (mov r8, r8)

000062ec <__lesf2>:
    62ec:	0243      	lsls	r3, r0, #9
    62ee:	b5f0      	push	{r4, r5, r6, r7, lr}
    62f0:	0042      	lsls	r2, r0, #1
    62f2:	004c      	lsls	r4, r1, #1
    62f4:	0a5e      	lsrs	r6, r3, #9
    62f6:	0fc3      	lsrs	r3, r0, #31
    62f8:	0248      	lsls	r0, r1, #9
    62fa:	0e12      	lsrs	r2, r2, #24
    62fc:	0a45      	lsrs	r5, r0, #9
    62fe:	0e24      	lsrs	r4, r4, #24
    6300:	0fc9      	lsrs	r1, r1, #31
    6302:	2aff      	cmp	r2, #255	; 0xff
    6304:	d017      	beq.n	6336 <__lesf2+0x4a>
    6306:	2cff      	cmp	r4, #255	; 0xff
    6308:	d019      	beq.n	633e <__lesf2+0x52>
    630a:	2a00      	cmp	r2, #0
    630c:	d10b      	bne.n	6326 <__lesf2+0x3a>
    630e:	4270      	negs	r0, r6
    6310:	4170      	adcs	r0, r6
    6312:	2c00      	cmp	r4, #0
    6314:	d017      	beq.n	6346 <__lesf2+0x5a>
    6316:	2800      	cmp	r0, #0
    6318:	d007      	beq.n	632a <__lesf2+0x3e>
    631a:	4248      	negs	r0, r1
    631c:	4141      	adcs	r1, r0
    631e:	2001      	movs	r0, #1
    6320:	4249      	negs	r1, r1
    6322:	4308      	orrs	r0, r1
    6324:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6326:	2c00      	cmp	r4, #0
    6328:	d013      	beq.n	6352 <__lesf2+0x66>
    632a:	428b      	cmp	r3, r1
    632c:	d014      	beq.n	6358 <__lesf2+0x6c>
    632e:	4258      	negs	r0, r3
    6330:	2301      	movs	r3, #1
    6332:	4318      	orrs	r0, r3
    6334:	e7f6      	b.n	6324 <__lesf2+0x38>
    6336:	2002      	movs	r0, #2
    6338:	2e00      	cmp	r6, #0
    633a:	d1f3      	bne.n	6324 <__lesf2+0x38>
    633c:	e7e3      	b.n	6306 <__lesf2+0x1a>
    633e:	2002      	movs	r0, #2
    6340:	2d00      	cmp	r5, #0
    6342:	d1ef      	bne.n	6324 <__lesf2+0x38>
    6344:	e7e1      	b.n	630a <__lesf2+0x1e>
    6346:	2d00      	cmp	r5, #0
    6348:	d1e5      	bne.n	6316 <__lesf2+0x2a>
    634a:	2000      	movs	r0, #0
    634c:	2e00      	cmp	r6, #0
    634e:	d0e9      	beq.n	6324 <__lesf2+0x38>
    6350:	e7ed      	b.n	632e <__lesf2+0x42>
    6352:	2d00      	cmp	r5, #0
    6354:	d1e9      	bne.n	632a <__lesf2+0x3e>
    6356:	e7ea      	b.n	632e <__lesf2+0x42>
    6358:	42a2      	cmp	r2, r4
    635a:	dce8      	bgt.n	632e <__lesf2+0x42>
    635c:	db04      	blt.n	6368 <__lesf2+0x7c>
    635e:	42ae      	cmp	r6, r5
    6360:	d8e5      	bhi.n	632e <__lesf2+0x42>
    6362:	2000      	movs	r0, #0
    6364:	42ae      	cmp	r6, r5
    6366:	d2dd      	bcs.n	6324 <__lesf2+0x38>
    6368:	4258      	negs	r0, r3
    636a:	4143      	adcs	r3, r0
    636c:	2001      	movs	r0, #1
    636e:	425b      	negs	r3, r3
    6370:	4318      	orrs	r0, r3
    6372:	e7d7      	b.n	6324 <__lesf2+0x38>

00006374 <__errno>:
    6374:	4b01      	ldr	r3, [pc, #4]	; (637c <__errno+0x8>)
    6376:	6818      	ldr	r0, [r3, #0]
    6378:	4770      	bx	lr
    637a:	46c0      	nop			; (mov r8, r8)
    637c:	200004a0 	.word	0x200004a0

00006380 <__libc_init_array>:
    6380:	b570      	push	{r4, r5, r6, lr}
    6382:	4e0d      	ldr	r6, [pc, #52]	; (63b8 <__libc_init_array+0x38>)
    6384:	4d0d      	ldr	r5, [pc, #52]	; (63bc <__libc_init_array+0x3c>)
    6386:	2400      	movs	r4, #0
    6388:	1bad      	subs	r5, r5, r6
    638a:	10ad      	asrs	r5, r5, #2
    638c:	d005      	beq.n	639a <__libc_init_array+0x1a>
    638e:	00a3      	lsls	r3, r4, #2
    6390:	58f3      	ldr	r3, [r6, r3]
    6392:	3401      	adds	r4, #1
    6394:	4798      	blx	r3
    6396:	42a5      	cmp	r5, r4
    6398:	d1f9      	bne.n	638e <__libc_init_array+0xe>
    639a:	f000 f92d 	bl	65f8 <_init>
    639e:	4e08      	ldr	r6, [pc, #32]	; (63c0 <__libc_init_array+0x40>)
    63a0:	4d08      	ldr	r5, [pc, #32]	; (63c4 <__libc_init_array+0x44>)
    63a2:	2400      	movs	r4, #0
    63a4:	1bad      	subs	r5, r5, r6
    63a6:	10ad      	asrs	r5, r5, #2
    63a8:	d005      	beq.n	63b6 <__libc_init_array+0x36>
    63aa:	00a3      	lsls	r3, r4, #2
    63ac:	58f3      	ldr	r3, [r6, r3]
    63ae:	3401      	adds	r4, #1
    63b0:	4798      	blx	r3
    63b2:	42a5      	cmp	r5, r4
    63b4:	d1f9      	bne.n	63aa <__libc_init_array+0x2a>
    63b6:	bd70      	pop	{r4, r5, r6, pc}
    63b8:	00006604 	.word	0x00006604
    63bc:	00006604 	.word	0x00006604
    63c0:	00006604 	.word	0x00006604
    63c4:	0000660c 	.word	0x0000660c

000063c8 <register_fini>:
    63c8:	4b03      	ldr	r3, [pc, #12]	; (63d8 <register_fini+0x10>)
    63ca:	b510      	push	{r4, lr}
    63cc:	2b00      	cmp	r3, #0
    63ce:	d002      	beq.n	63d6 <register_fini+0xe>
    63d0:	4802      	ldr	r0, [pc, #8]	; (63dc <register_fini+0x14>)
    63d2:	f000 f805 	bl	63e0 <atexit>
    63d6:	bd10      	pop	{r4, pc}
    63d8:	00000000 	.word	0x00000000
    63dc:	000063f1 	.word	0x000063f1

000063e0 <atexit>:
    63e0:	b510      	push	{r4, lr}
    63e2:	0001      	movs	r1, r0
    63e4:	2300      	movs	r3, #0
    63e6:	2200      	movs	r2, #0
    63e8:	2000      	movs	r0, #0
    63ea:	f000 f81b 	bl	6424 <__register_exitproc>
    63ee:	bd10      	pop	{r4, pc}

000063f0 <__libc_fini_array>:
    63f0:	b570      	push	{r4, r5, r6, lr}
    63f2:	4b09      	ldr	r3, [pc, #36]	; (6418 <__libc_fini_array+0x28>)
    63f4:	4c09      	ldr	r4, [pc, #36]	; (641c <__libc_fini_array+0x2c>)
    63f6:	1ae4      	subs	r4, r4, r3
    63f8:	10a4      	asrs	r4, r4, #2
    63fa:	d009      	beq.n	6410 <__libc_fini_array+0x20>
    63fc:	4a08      	ldr	r2, [pc, #32]	; (6420 <__libc_fini_array+0x30>)
    63fe:	18a5      	adds	r5, r4, r2
    6400:	00ad      	lsls	r5, r5, #2
    6402:	18ed      	adds	r5, r5, r3
    6404:	682b      	ldr	r3, [r5, #0]
    6406:	3c01      	subs	r4, #1
    6408:	4798      	blx	r3
    640a:	3d04      	subs	r5, #4
    640c:	2c00      	cmp	r4, #0
    640e:	d1f9      	bne.n	6404 <__libc_fini_array+0x14>
    6410:	f000 f8fc 	bl	660c <_fini>
    6414:	bd70      	pop	{r4, r5, r6, pc}
    6416:	46c0      	nop			; (mov r8, r8)
    6418:	00006618 	.word	0x00006618
    641c:	0000661c 	.word	0x0000661c
    6420:	3fffffff 	.word	0x3fffffff

00006424 <__register_exitproc>:
    6424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6426:	4644      	mov	r4, r8
    6428:	465f      	mov	r7, fp
    642a:	4656      	mov	r6, sl
    642c:	464d      	mov	r5, r9
    642e:	469b      	mov	fp, r3
    6430:	4b2f      	ldr	r3, [pc, #188]	; (64f0 <__register_exitproc+0xcc>)
    6432:	b4f0      	push	{r4, r5, r6, r7}
    6434:	681c      	ldr	r4, [r3, #0]
    6436:	23a4      	movs	r3, #164	; 0xa4
    6438:	005b      	lsls	r3, r3, #1
    643a:	0005      	movs	r5, r0
    643c:	58e0      	ldr	r0, [r4, r3]
    643e:	000e      	movs	r6, r1
    6440:	4690      	mov	r8, r2
    6442:	2800      	cmp	r0, #0
    6444:	d04b      	beq.n	64de <__register_exitproc+0xba>
    6446:	6843      	ldr	r3, [r0, #4]
    6448:	2b1f      	cmp	r3, #31
    644a:	dc0d      	bgt.n	6468 <__register_exitproc+0x44>
    644c:	1c5c      	adds	r4, r3, #1
    644e:	2d00      	cmp	r5, #0
    6450:	d121      	bne.n	6496 <__register_exitproc+0x72>
    6452:	3302      	adds	r3, #2
    6454:	009b      	lsls	r3, r3, #2
    6456:	6044      	str	r4, [r0, #4]
    6458:	501e      	str	r6, [r3, r0]
    645a:	2000      	movs	r0, #0
    645c:	bc3c      	pop	{r2, r3, r4, r5}
    645e:	4690      	mov	r8, r2
    6460:	4699      	mov	r9, r3
    6462:	46a2      	mov	sl, r4
    6464:	46ab      	mov	fp, r5
    6466:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6468:	4b22      	ldr	r3, [pc, #136]	; (64f4 <__register_exitproc+0xd0>)
    646a:	2b00      	cmp	r3, #0
    646c:	d03c      	beq.n	64e8 <__register_exitproc+0xc4>
    646e:	20c8      	movs	r0, #200	; 0xc8
    6470:	0040      	lsls	r0, r0, #1
    6472:	e000      	b.n	6476 <__register_exitproc+0x52>
    6474:	bf00      	nop
    6476:	2800      	cmp	r0, #0
    6478:	d036      	beq.n	64e8 <__register_exitproc+0xc4>
    647a:	22a4      	movs	r2, #164	; 0xa4
    647c:	2300      	movs	r3, #0
    647e:	0052      	lsls	r2, r2, #1
    6480:	58a1      	ldr	r1, [r4, r2]
    6482:	6043      	str	r3, [r0, #4]
    6484:	6001      	str	r1, [r0, #0]
    6486:	50a0      	str	r0, [r4, r2]
    6488:	3240      	adds	r2, #64	; 0x40
    648a:	5083      	str	r3, [r0, r2]
    648c:	3204      	adds	r2, #4
    648e:	5083      	str	r3, [r0, r2]
    6490:	2401      	movs	r4, #1
    6492:	2d00      	cmp	r5, #0
    6494:	d0dd      	beq.n	6452 <__register_exitproc+0x2e>
    6496:	009a      	lsls	r2, r3, #2
    6498:	4691      	mov	r9, r2
    649a:	4481      	add	r9, r0
    649c:	4642      	mov	r2, r8
    649e:	2188      	movs	r1, #136	; 0x88
    64a0:	464f      	mov	r7, r9
    64a2:	507a      	str	r2, [r7, r1]
    64a4:	22c4      	movs	r2, #196	; 0xc4
    64a6:	0052      	lsls	r2, r2, #1
    64a8:	4690      	mov	r8, r2
    64aa:	4480      	add	r8, r0
    64ac:	4642      	mov	r2, r8
    64ae:	3987      	subs	r1, #135	; 0x87
    64b0:	4099      	lsls	r1, r3
    64b2:	6812      	ldr	r2, [r2, #0]
    64b4:	468a      	mov	sl, r1
    64b6:	430a      	orrs	r2, r1
    64b8:	4694      	mov	ip, r2
    64ba:	4642      	mov	r2, r8
    64bc:	4661      	mov	r1, ip
    64be:	6011      	str	r1, [r2, #0]
    64c0:	2284      	movs	r2, #132	; 0x84
    64c2:	4649      	mov	r1, r9
    64c4:	465f      	mov	r7, fp
    64c6:	0052      	lsls	r2, r2, #1
    64c8:	508f      	str	r7, [r1, r2]
    64ca:	2d02      	cmp	r5, #2
    64cc:	d1c1      	bne.n	6452 <__register_exitproc+0x2e>
    64ce:	0002      	movs	r2, r0
    64d0:	4655      	mov	r5, sl
    64d2:	328d      	adds	r2, #141	; 0x8d
    64d4:	32ff      	adds	r2, #255	; 0xff
    64d6:	6811      	ldr	r1, [r2, #0]
    64d8:	430d      	orrs	r5, r1
    64da:	6015      	str	r5, [r2, #0]
    64dc:	e7b9      	b.n	6452 <__register_exitproc+0x2e>
    64de:	0020      	movs	r0, r4
    64e0:	304d      	adds	r0, #77	; 0x4d
    64e2:	30ff      	adds	r0, #255	; 0xff
    64e4:	50e0      	str	r0, [r4, r3]
    64e6:	e7ae      	b.n	6446 <__register_exitproc+0x22>
    64e8:	2001      	movs	r0, #1
    64ea:	4240      	negs	r0, r0
    64ec:	e7b6      	b.n	645c <__register_exitproc+0x38>
    64ee:	46c0      	nop			; (mov r8, r8)
    64f0:	000065f4 	.word	0x000065f4
    64f4:	00000000 	.word	0x00000000

000064f8 <senseBatPin>:
    64f8:	06000000 01000106                                .....

000064fd <senseAPin>:
    64fd:	03010001 0100010b                                .....

00006502 <senseBPin>:
    6502:	02010001 0000010a                                .....

00006507 <senseCPin>:
    6507:	03000001 00000101                                .....

0000650c <senseDPin>:
    650c:	02000001 00000000                                .....

00006511 <analogAccelPin>:
    6511:	07000000 70000007 0000776f 00000000              .......pow.....

00006520 <TWO52>:
    6520:	00000000 43300000 00000000 c3300000     ......0C......0.
    6530:	00003dc4 00003d22 00003d22 00003d20     .=.."=.."=.. =..
    6540:	00003db6 00003db6 00003dac 00003d20     .=...=...=.. =..
    6550:	00003db6 00003dac 00003db6 00003d20     .=...=...=.. =..
    6560:	00003dbc 00003dbc 00003dbc 00003e46     .=...=...=..F>..
    6570:	00004af8 000049c6 00004acc 000049bc     .J...I...J...I..
    6580:	00004acc 00004ad6 00004acc 000049bc     .J...J...J...I..
    6590:	000049c6 000049c6 00004ad6 000049bc     .I...I...J...I..
    65a0:	000049b2 000049b2 000049b2 00004d28     .I...I...I..(M..
    65b0:	00005340 00005200 00005200 000051fe     @S...R...R...Q..
    65c0:	00005318 00005318 0000530a 000051fe     .S...S...S...Q..
    65d0:	00005318 0000530a 00005318 000051fe     .S...S...S...Q..
    65e0:	00005320 00005320 00005320 00005520      S.. S.. S.. U..
    65f0:	00000043                                C...

000065f4 <_global_impure_ptr>:
    65f4:	20000078                                x.. 

000065f8 <_init>:
    65f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    65fa:	46c0      	nop			; (mov r8, r8)
    65fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
    65fe:	bc08      	pop	{r3}
    6600:	469e      	mov	lr, r3
    6602:	4770      	bx	lr

00006604 <__init_array_start>:
    6604:	000063c9 	.word	0x000063c9

00006608 <__frame_dummy_init_array_entry>:
    6608:	000000dd                                ....

0000660c <_fini>:
    660c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    660e:	46c0      	nop			; (mov r8, r8)
    6610:	bcf8      	pop	{r3, r4, r5, r6, r7}
    6612:	bc08      	pop	{r3}
    6614:	469e      	mov	lr, r3
    6616:	4770      	bx	lr

00006618 <__fini_array_start>:
    6618:	000000b5 	.word	0x000000b5
