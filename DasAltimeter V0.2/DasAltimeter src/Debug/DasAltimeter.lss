
DasAltimeter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006674  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000004a4  20000000  00006674  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000340  200004a8  00006b20  000204a8  2**3
                  ALLOC
  3 .stack        00002000  200007e8  00006e60  000204a8  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000204a4  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  000204cc  2**0
                  CONTENTS, READONLY
  6 .debug_info   0001ed50  00000000  00000000  00020525  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002642  00000000  00000000  0003f275  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000022f5  00000000  00000000  000418b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000003d8  00000000  00000000  00043bac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000e18  00000000  00000000  00043f84  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000162f3  00000000  00000000  00044d9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00009b93  00000000  00000000  0005b08f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0007252d  00000000  00000000  00064c22  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001028  00000000  00000000  000d7150  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
 *         retrieved from cpu registers.
 */
void SystemCoreClockUpdate(void)
{
	// Not implemented
	SystemCoreClock = __SYSTEM_CLOCK;
       0:	200027e8 	.word	0x200027e8
       4:	00000119 	.word	0x00000119
	return;
}
       8:	00000115 	.word	0x00000115
       c:	00000115 	.word	0x00000115
	...
      2c:	00000115 	.word	0x00000115
	...
      38:	00000115 	.word	0x00000115
      3c:	00000115 	.word	0x00000115
      40:	00000115 	.word	0x00000115
      44:	00000115 	.word	0x00000115
      48:	00000115 	.word	0x00000115
      4c:	0000105d 	.word	0x0000105d
      50:	00000115 	.word	0x00000115
      54:	00000115 	.word	0x00000115
      58:	00000115 	.word	0x00000115
      5c:	00000115 	.word	0x00000115
      60:	00000115 	.word	0x00000115
      64:	00000115 	.word	0x00000115
      68:	00000115 	.word	0x00000115
      6c:	00000115 	.word	0x00000115
      70:	00000115 	.word	0x00000115
      74:	00000115 	.word	0x00000115
      78:	00000115 	.word	0x00000115
      7c:	00000115 	.word	0x00000115
      80:	00000115 	.word	0x00000115
      84:	00000115 	.word	0x00000115
      88:	00000115 	.word	0x00000115
      8c:	000010fd 	.word	0x000010fd
      90:	00001165 	.word	0x00001165
	...
      9c:	00000115 	.word	0x00000115
      a0:	00000115 	.word	0x00000115
      a4:	00000115 	.word	0x00000115
      a8:	00000115 	.word	0x00000115
      ac:	00000115 	.word	0x00000115
      b0:	00000000 	.word	0x00000000

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200004a8 	.word	0x200004a8
      d4:	00000000 	.word	0x00000000
      d8:	00006674 	.word	0x00006674

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200004ac 	.word	0x200004ac
     108:	00006674 	.word	0x00006674
     10c:	00006674 	.word	0x00006674
     110:	00000000 	.word	0x00000000

00000114 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     114:	e7fe      	b.n	114 <Dummy_Handler>
	...

00000118 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
     118:	4821      	ldr	r0, [pc, #132]	; (1a0 <Reset_Handler+0x88>)
     11a:	4922      	ldr	r1, [pc, #136]	; (1a4 <Reset_Handler+0x8c>)
     11c:	b570      	push	{r4, r5, r6, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
     11e:	4288      	cmp	r0, r1
     120:	d002      	beq.n	128 <Reset_Handler+0x10>
     122:	2300      	movs	r3, #0
                for (; pDest < &_erelocate;) {
     124:	4c20      	ldr	r4, [pc, #128]	; (1a8 <Reset_Handler+0x90>)
     126:	e003      	b.n	130 <Reset_Handler+0x18>
     128:	4b20      	ldr	r3, [pc, #128]	; (1ac <Reset_Handler+0x94>)
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     12a:	4a21      	ldr	r2, [pc, #132]	; (1b0 <Reset_Handler+0x98>)
                *pDest++ = 0;
     12c:	2100      	movs	r1, #0
     12e:	e006      	b.n	13e <Reset_Handler+0x26>
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
     130:	18ca      	adds	r2, r1, r3
     132:	42a2      	cmp	r2, r4
     134:	d2f8      	bcs.n	128 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
     136:	58c5      	ldr	r5, [r0, r3]
     138:	3304      	adds	r3, #4
     13a:	6015      	str	r5, [r2, #0]
     13c:	e7f8      	b.n	130 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     13e:	4293      	cmp	r3, r2
     140:	d201      	bcs.n	146 <Reset_Handler+0x2e>
                *pDest++ = 0;
     142:	c302      	stmia	r3!, {r1}
     144:	e7fb      	b.n	13e <Reset_Handler+0x26>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     146:	21ff      	movs	r1, #255	; 0xff

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     148:	2402      	movs	r4, #2
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     14a:	2503      	movs	r5, #3
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     14c:	4b19      	ldr	r3, [pc, #100]	; (1b4 <Reset_Handler+0x9c>)
     14e:	4a1a      	ldr	r2, [pc, #104]	; (1b8 <Reset_Handler+0xa0>)
     150:	438b      	bics	r3, r1

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     152:	260c      	movs	r6, #12
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     154:	6093      	str	r3, [r2, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     156:	2208      	movs	r2, #8
        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     158:	4b18      	ldr	r3, [pc, #96]	; (1bc <Reset_Handler+0xa4>)
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     15a:	4919      	ldr	r1, [pc, #100]	; (1c0 <Reset_Handler+0xa8>)
        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     15c:	625c      	str	r4, [r3, #36]	; 0x24
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     15e:	78cb      	ldrb	r3, [r1, #3]
     160:	43ab      	bics	r3, r5
     162:	4323      	orrs	r3, r4
     164:	70cb      	strb	r3, [r1, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     166:	78cb      	ldrb	r3, [r1, #3]
     168:	43b3      	bics	r3, r6
     16a:	4313      	orrs	r3, r2
     16c:	70cb      	strb	r3, [r1, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
     16e:	2130      	movs	r1, #48	; 0x30
     170:	4b14      	ldr	r3, [pc, #80]	; (1c4 <Reset_Handler+0xac>)
     172:	7b98      	ldrb	r0, [r3, #14]
     174:	4388      	bics	r0, r1
     176:	3910      	subs	r1, #16
     178:	4308      	orrs	r0, r1
     17a:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     17c:	7b99      	ldrb	r1, [r3, #14]
     17e:	43b1      	bics	r1, r6
     180:	4311      	orrs	r1, r2
     182:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
     184:	2180      	movs	r1, #128	; 0x80
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
        DMAC->QOSCTRL.bit.FQOS = 2;
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     186:	7b9a      	ldrb	r2, [r3, #14]
     188:	43aa      	bics	r2, r5
     18a:	4322      	orrs	r2, r4
     18c:	739a      	strb	r2, [r3, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
     18e:	4a0e      	ldr	r2, [pc, #56]	; (1c8 <Reset_Handler+0xb0>)
     190:	6853      	ldr	r3, [r2, #4]
     192:	430b      	orrs	r3, r1
     194:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
     196:	4b0d      	ldr	r3, [pc, #52]	; (1cc <Reset_Handler+0xb4>)
     198:	4798      	blx	r3

        /* Branch to main function */
        main();
     19a:	4b0d      	ldr	r3, [pc, #52]	; (1d0 <Reset_Handler+0xb8>)
     19c:	4798      	blx	r3
     19e:	e7fe      	b.n	19e <Reset_Handler+0x86>
     1a0:	00006674 	.word	0x00006674
     1a4:	20000000 	.word	0x20000000
     1a8:	200004a4 	.word	0x200004a4
     1ac:	200004a8 	.word	0x200004a8
     1b0:	200007e8 	.word	0x200007e8
     1b4:	00000000 	.word	0x00000000
     1b8:	e000ed00 	.word	0xe000ed00
     1bc:	410070fc 	.word	0x410070fc
     1c0:	41005000 	.word	0x41005000
     1c4:	41004800 	.word	0x41004800
     1c8:	41004000 	.word	0x41004000
     1cc:	000063bd 	.word	0x000063bd
     1d0:	00000ae9 	.word	0x00000ae9

000001d4 <SystemInit>:
     1d4:	4a01      	ldr	r2, [pc, #4]	; (1dc <SystemInit+0x8>)
     1d6:	4b02      	ldr	r3, [pc, #8]	; (1e0 <SystemInit+0xc>)
     1d8:	601a      	str	r2, [r3, #0]
     1da:	4770      	bx	lr
     1dc:	000f4240 	.word	0x000f4240
     1e0:	20000000 	.word	0x20000000

000001e4 <AT25SFHoldTillReady>:
    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
    pinHigh(cs_mem);
}

void AT25SFHoldTillReady(){
     1e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     1e6:	2380      	movs	r3, #128	; 0x80
     1e8:	4c0a      	ldr	r4, [pc, #40]	; (214 <AT25SFHoldTillReady+0x30>)
     1ea:	02db      	lsls	r3, r3, #11
	pinLow(cs_mem);
	dummy_rx = spiDataTransfer(SPI1,OPCODE_READSTATUS);
     1ec:	4d0a      	ldr	r5, [pc, #40]	; (218 <AT25SFHoldTillReady+0x34>)
     1ee:	6163      	str	r3, [r4, #20]
     1f0:	2105      	movs	r1, #5
     1f2:	2001      	movs	r0, #1
     1f4:	47a8      	blx	r5
     1f6:	4b09      	ldr	r3, [pc, #36]	; (21c <AT25SFHoldTillReady+0x38>)
     1f8:	002e      	movs	r6, r5
        while (spiDataTransfer(SPI1,dummy_rx) & 0x01);
     1fa:	2701      	movs	r7, #1
     1fc:	001d      	movs	r5, r3
    pinHigh(cs_mem);
}

void AT25SFHoldTillReady(){
	pinLow(cs_mem);
	dummy_rx = spiDataTransfer(SPI1,OPCODE_READSTATUS);
     1fe:	7018      	strb	r0, [r3, #0]
        while (spiDataTransfer(SPI1,dummy_rx) & 0x01);
     200:	7829      	ldrb	r1, [r5, #0]
     202:	2001      	movs	r0, #1
     204:	47b0      	blx	r6
     206:	4238      	tst	r0, r7
     208:	d1fa      	bne.n	200 <AT25SFHoldTillReady+0x1c>
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     20a:	2380      	movs	r3, #128	; 0x80
     20c:	02db      	lsls	r3, r3, #11
     20e:	61a3      	str	r3, [r4, #24]
	pinHigh(cs_mem);
}
     210:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     212:	46c0      	nop			; (mov r8, r8)
     214:	41004400 	.word	0x41004400
     218:	00002841 	.word	0x00002841
     21c:	200004c8 	.word	0x200004c8

00000220 <AT25SFChipErase>:
void AT25SFChipErase() {
     220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     222:	2580      	movs	r5, #128	; 0x80
     224:	4c08      	ldr	r4, [pc, #32]	; (248 <AT25SFChipErase+0x28>)
     226:	02ed      	lsls	r5, r5, #11

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
     228:	4f08      	ldr	r7, [pc, #32]	; (24c <AT25SFChipErase+0x2c>)
     22a:	6165      	str	r5, [r4, #20]
     22c:	2106      	movs	r1, #6
     22e:	2001      	movs	r0, #1
     230:	47b8      	blx	r7
     232:	4e07      	ldr	r6, [pc, #28]	; (250 <AT25SFChipErase+0x30>)
    pinHigh(cs_mem);

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_CHIP_ERASE);
     234:	2160      	movs	r1, #96	; 0x60
	pinHigh(cs_mem);
}
void AT25SFChipErase() {

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
     236:	7030      	strb	r0, [r6, #0]
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     238:	61a5      	str	r5, [r4, #24]
    pinHigh(cs_mem);

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_CHIP_ERASE);
     23a:	2001      	movs	r0, #1
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     23c:	6165      	str	r5, [r4, #20]
     23e:	47b8      	blx	r7
     240:	7030      	strb	r0, [r6, #0]
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     242:	61a5      	str	r5, [r4, #24]
    pinHigh(cs_mem);
}
     244:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     246:	46c0      	nop			; (mov r8, r8)
     248:	41004400 	.word	0x41004400
     24c:	00002841 	.word	0x00002841
     250:	200004c8 	.word	0x200004c8

00000254 <AT25SFWriteBytes>:
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     254:	2380      	movs	r3, #128	; 0x80
    pinHigh(cs_mem);

    return _byte;
}

void AT25SFWriteBytes(uint32_t address, u8_t len, uint8_t *bytes) {
     256:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     258:	4e19      	ldr	r6, [pc, #100]	; (2c0 <AT25SFWriteBytes+0x6c>)
     25a:	02db      	lsls	r3, r3, #11
     25c:	9201      	str	r2, [sp, #4]
     25e:	0007      	movs	r7, r0


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
     260:	4c18      	ldr	r4, [pc, #96]	; (2c4 <AT25SFWriteBytes+0x70>)
    pinHigh(cs_mem);

    return _byte;
}

void AT25SFWriteBytes(uint32_t address, u8_t len, uint8_t *bytes) {
     262:	9100      	str	r1, [sp, #0]


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
     264:	2001      	movs	r0, #1
     266:	6173      	str	r3, [r6, #20]
     268:	2106      	movs	r1, #6
     26a:	47a0      	blx	r4
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     26c:	2380      	movs	r3, #128	; 0x80
     26e:	4d16      	ldr	r5, [pc, #88]	; (2c8 <AT25SFWriteBytes+0x74>)
     270:	02db      	lsls	r3, r3, #11
     272:	7028      	strb	r0, [r5, #0]
    pinHigh(cs_mem);

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_PROGRAM);
     274:	2102      	movs	r1, #2
     276:	61b3      	str	r3, [r6, #24]
     278:	2001      	movs	r0, #1
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     27a:	6173      	str	r3, [r6, #20]
     27c:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1,((address & 0xFF0000) >> 16));
     27e:	0c39      	lsrs	r1, r7, #16
    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
    pinHigh(cs_mem);

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_PROGRAM);
     280:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1,((address & 0xFF0000) >> 16));
     282:	b2c9      	uxtb	r1, r1
     284:	2001      	movs	r0, #1
     286:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1,((address & 0x00FF00) >>  8));
     288:	0a39      	lsrs	r1, r7, #8
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
    pinHigh(cs_mem);

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_PROGRAM);
    dummy_rx = spiDataTransfer(SPI1,((address & 0xFF0000) >> 16));
     28a:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1,((address & 0x00FF00) >>  8));
     28c:	b2c9      	uxtb	r1, r1
     28e:	2001      	movs	r0, #1
     290:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1,((address & 0x0000FF) >>  0));
     292:	b2f9      	uxtb	r1, r7
    pinHigh(cs_mem);

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_PROGRAM);
    dummy_rx = spiDataTransfer(SPI1,((address & 0xFF0000) >> 16));
    dummy_rx = spiDataTransfer(SPI1,((address & 0x00FF00) >>  8));
     294:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1,((address & 0x0000FF) >>  0));
     296:	2001      	movs	r0, #1
     298:	47a0      	blx	r4
     29a:	9b00      	ldr	r3, [sp, #0]
     29c:	9f01      	ldr	r7, [sp, #4]
     29e:	7028      	strb	r0, [r5, #0]
     2a0:	18fb      	adds	r3, r7, r3
     2a2:	9300      	str	r3, [sp, #0]

    for (u8_t pos = 0; pos < len; ++pos) {
     2a4:	9b00      	ldr	r3, [sp, #0]
     2a6:	429f      	cmp	r7, r3
     2a8:	d005      	beq.n	2b6 <AT25SFWriteBytes+0x62>
        dummy_rx = spiDataTransfer(SPI1, bytes[pos]);
     2aa:	7839      	ldrb	r1, [r7, #0]
     2ac:	2001      	movs	r0, #1
     2ae:	47a0      	blx	r4
     2b0:	3701      	adds	r7, #1
     2b2:	7028      	strb	r0, [r5, #0]
     2b4:	e7f6      	b.n	2a4 <AT25SFWriteBytes+0x50>
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     2b6:	2380      	movs	r3, #128	; 0x80
     2b8:	02db      	lsls	r3, r3, #11
     2ba:	61b3      	str	r3, [r6, #24]
    }

    pinHigh(cs_mem);

}
     2bc:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
     2be:	46c0      	nop			; (mov r8, r8)
     2c0:	41004400 	.word	0x41004400
     2c4:	00002841 	.word	0x00002841
     2c8:	200004c8 	.word	0x200004c8

000002cc <AT25SEWritePage>:
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     2cc:	2380      	movs	r3, #128	; 0x80
    delay_ms(70);

}


u8_t AT25SEWritePage(u32_t startingAddress, u8_t *data) {
     2ce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     2d0:	4e18      	ldr	r6, [pc, #96]	; (334 <AT25SEWritePage+0x68>)
     2d2:	02db      	lsls	r3, r3, #11
     2d4:	0007      	movs	r7, r0

    u8_t bytesSent = 0;


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
     2d6:	4d18      	ldr	r5, [pc, #96]	; (338 <AT25SEWritePage+0x6c>)
    delay_ms(70);

}


u8_t AT25SEWritePage(u32_t startingAddress, u8_t *data) {
     2d8:	9101      	str	r1, [sp, #4]

    u8_t bytesSent = 0;


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
     2da:	2001      	movs	r0, #1
     2dc:	6173      	str	r3, [r6, #20]
     2de:	2106      	movs	r1, #6
     2e0:	47a8      	blx	r5
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     2e2:	2380      	movs	r3, #128	; 0x80
     2e4:	4c15      	ldr	r4, [pc, #84]	; (33c <AT25SEWritePage+0x70>)
     2e6:	02db      	lsls	r3, r3, #11
     2e8:	7020      	strb	r0, [r4, #0]
    pinHigh(cs_mem);


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_PROGRAM);
     2ea:	2102      	movs	r1, #2
     2ec:	61b3      	str	r3, [r6, #24]
     2ee:	2001      	movs	r0, #1
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     2f0:	6173      	str	r3, [r6, #20]
     2f2:	47a8      	blx	r5
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     2f4:	0c39      	lsrs	r1, r7, #16
    dummy_rx = spiDataTransfer(SPI1,OPCODE_WRITEENABLE);
    pinHigh(cs_mem);


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_PROGRAM);
     2f6:	7020      	strb	r0, [r4, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     2f8:	b2c9      	uxtb	r1, r1
     2fa:	2001      	movs	r0, #1
     2fc:	47a8      	blx	r5
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     2fe:	0a39      	lsrs	r1, r7, #8
    pinHigh(cs_mem);


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_PROGRAM);
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     300:	7020      	strb	r0, [r4, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     302:	b2c9      	uxtb	r1, r1
     304:	2001      	movs	r0, #1
     306:	47a8      	blx	r5
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
     308:	b2f9      	uxtb	r1, r7


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_PROGRAM);
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     30a:	7020      	strb	r0, [r4, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
     30c:	2001      	movs	r0, #1
     30e:	47a8      	blx	r5
     310:	9f01      	ldr	r7, [sp, #4]
     312:	7020      	strb	r0, [r4, #0]
     314:	1c7b      	adds	r3, r7, #1
     316:	33ff      	adds	r3, #255	; 0xff
     318:	9301      	str	r3, [sp, #4]


    for (u16_t pos = 0; pos < 256; ++pos) {
        ++bytesSent;
        dummy_rx = spiDataTransfer(SPI1,data[pos]);
     31a:	7839      	ldrb	r1, [r7, #0]
     31c:	2001      	movs	r0, #1
     31e:	47a8      	blx	r5
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));


    for (u16_t pos = 0; pos < 256; ++pos) {
     320:	9b01      	ldr	r3, [sp, #4]
     322:	3701      	adds	r7, #1
        ++bytesSent;
        dummy_rx = spiDataTransfer(SPI1,data[pos]);
     324:	7020      	strb	r0, [r4, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));


    for (u16_t pos = 0; pos < 256; ++pos) {
     326:	429f      	cmp	r7, r3
     328:	d1f7      	bne.n	31a <AT25SEWritePage+0x4e>
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     32a:	2380      	movs	r3, #128	; 0x80
     32c:	02db      	lsls	r3, r3, #11
     32e:	61b3      	str	r3, [r6, #24]
    }
    pinHigh(cs_mem);


    return bytesSent;
}
     330:	2000      	movs	r0, #0
     332:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
     334:	41004400 	.word	0x41004400
     338:	00002841 	.word	0x00002841
     33c:	200004c8 	.word	0x200004c8

00000340 <AT25SEreadSample>:
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     340:	2380      	movs	r3, #128	; 0x80

void AT25SEreadSample(u32_t startingAddress, u8_t len, u8_t *data) {
     342:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     344:	4f17      	ldr	r7, [pc, #92]	; (3a4 <AT25SEreadSample+0x64>)
     346:	02db      	lsls	r3, r3, #11
     348:	9201      	str	r2, [sp, #4]
     34a:	0006      	movs	r6, r0

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
     34c:	4c16      	ldr	r4, [pc, #88]	; (3a8 <AT25SEreadSample+0x68>)


    return bytesSent;
}

void AT25SEreadSample(u32_t startingAddress, u8_t len, u8_t *data) {
     34e:	9100      	str	r1, [sp, #0]

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
     350:	2001      	movs	r0, #1
     352:	617b      	str	r3, [r7, #20]
     354:	210b      	movs	r1, #11
     356:	47a0      	blx	r4
     358:	4d14      	ldr	r5, [pc, #80]	; (3ac <AT25SEreadSample+0x6c>)
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     35a:	0c31      	lsrs	r1, r6, #16
}

void AT25SEreadSample(u32_t startingAddress, u8_t len, u8_t *data) {

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
     35c:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     35e:	b2c9      	uxtb	r1, r1
     360:	2001      	movs	r0, #1
     362:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     364:	0a31      	lsrs	r1, r6, #8

void AT25SEreadSample(u32_t startingAddress, u8_t len, u8_t *data) {

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     366:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     368:	b2c9      	uxtb	r1, r1
     36a:	2001      	movs	r0, #1
     36c:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
     36e:	b2f1      	uxtb	r1, r6
void AT25SEreadSample(u32_t startingAddress, u8_t len, u8_t *data) {

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     370:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
     372:	2001      	movs	r0, #1
     374:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1, 0xFF);
     376:	21ff      	movs	r1, #255	; 0xff

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
     378:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1, 0xFF);
     37a:	2001      	movs	r0, #1
     37c:	47a0      	blx	r4
     37e:	9b00      	ldr	r3, [sp, #0]
     380:	9e01      	ldr	r6, [sp, #4]
     382:	7028      	strb	r0, [r5, #0]
     384:	18f3      	adds	r3, r6, r3
     386:	9300      	str	r3, [sp, #0]


    for (u8_t pos = 0; pos < len; ++pos) {
     388:	9b00      	ldr	r3, [sp, #0]
     38a:	429e      	cmp	r6, r3
     38c:	d005      	beq.n	39a <AT25SEreadSample+0x5a>
        data[pos] = spiDataTransfer(SPI1,dummy_rx);
     38e:	7829      	ldrb	r1, [r5, #0]
     390:	2001      	movs	r0, #1
     392:	47a0      	blx	r4
     394:	7030      	strb	r0, [r6, #0]
     396:	3601      	adds	r6, #1
     398:	e7f6      	b.n	388 <AT25SEreadSample+0x48>
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     39a:	2380      	movs	r3, #128	; 0x80
     39c:	02db      	lsls	r3, r3, #11
     39e:	61bb      	str	r3, [r7, #24]
    }
    pinHigh(cs_mem);

}
     3a0:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
     3a2:	46c0      	nop			; (mov r8, r8)
     3a4:	41004400 	.word	0x41004400
     3a8:	00002841 	.word	0x00002841
     3ac:	200004c8 	.word	0x200004c8

000003b0 <AT25SEreadPage>:
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     3b0:	2380      	movs	r3, #128	; 0x80

void AT25SEreadPage(u32_t startingAddress, u8_t *data) {
     3b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     3b4:	4f16      	ldr	r7, [pc, #88]	; (410 <AT25SEreadPage+0x60>)
     3b6:	02db      	lsls	r3, r3, #11
     3b8:	0006      	movs	r6, r0


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
     3ba:	4c16      	ldr	r4, [pc, #88]	; (414 <AT25SEreadPage+0x64>)
    }
    pinHigh(cs_mem);

}

void AT25SEreadPage(u32_t startingAddress, u8_t *data) {
     3bc:	9101      	str	r1, [sp, #4]


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
     3be:	2001      	movs	r0, #1
     3c0:	617b      	str	r3, [r7, #20]
     3c2:	210b      	movs	r1, #11
     3c4:	47a0      	blx	r4
     3c6:	4d14      	ldr	r5, [pc, #80]	; (418 <AT25SEreadPage+0x68>)
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     3c8:	0c31      	lsrs	r1, r6, #16

void AT25SEreadPage(u32_t startingAddress, u8_t *data) {


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
     3ca:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     3cc:	b2c9      	uxtb	r1, r1
     3ce:	2001      	movs	r0, #1
     3d0:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     3d2:	0a31      	lsrs	r1, r6, #8
void AT25SEreadPage(u32_t startingAddress, u8_t *data) {


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
     3d4:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     3d6:	b2c9      	uxtb	r1, r1
     3d8:	2001      	movs	r0, #1
     3da:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
     3dc:	b2f1      	uxtb	r1, r6


    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
     3de:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
     3e0:	2001      	movs	r0, #1
     3e2:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1, 0xFF);
     3e4:	21ff      	movs	r1, #255	; 0xff

    pinLow(cs_mem);
    dummy_rx = spiDataTransfer(SPI1,OPCODE_FASTREAD_ARRAY);
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0xFF0000) >> 16));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
     3e6:	7028      	strb	r0, [r5, #0]
    dummy_rx = spiDataTransfer(SPI1, 0xFF);
     3e8:	2001      	movs	r0, #1
     3ea:	47a0      	blx	r4
     3ec:	9e01      	ldr	r6, [sp, #4]
     3ee:	7028      	strb	r0, [r5, #0]
     3f0:	1c73      	adds	r3, r6, #1
     3f2:	33ff      	adds	r3, #255	; 0xff
     3f4:	9301      	str	r3, [sp, #4]


    for (u16_t pos = 0; pos < 256; ++pos) {
        data[pos] = spiDataTransfer(SPI1,dummy_rx);
     3f6:	7829      	ldrb	r1, [r5, #0]
     3f8:	2001      	movs	r0, #1
     3fa:	47a0      	blx	r4
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
    dummy_rx = spiDataTransfer(SPI1, 0xFF);


    for (u16_t pos = 0; pos < 256; ++pos) {
     3fc:	9b01      	ldr	r3, [sp, #4]
        data[pos] = spiDataTransfer(SPI1,dummy_rx);
     3fe:	7030      	strb	r0, [r6, #0]
     400:	3601      	adds	r6, #1
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x00FF00) >>  8));
    dummy_rx = spiDataTransfer(SPI1,((startingAddress & 0x0000FF) >>  0));
    dummy_rx = spiDataTransfer(SPI1, 0xFF);


    for (u16_t pos = 0; pos < 256; ++pos) {
     402:	429e      	cmp	r6, r3
     404:	d1f7      	bne.n	3f6 <AT25SEreadPage+0x46>
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     406:	2380      	movs	r3, #128	; 0x80
     408:	02db      	lsls	r3, r3, #11
     40a:	61bb      	str	r3, [r7, #24]
        data[pos] = spiDataTransfer(SPI1,dummy_rx);
    }
    pinHigh(cs_mem);

}
     40c:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
     40e:	46c0      	nop			; (mov r8, r8)
     410:	41004400 	.word	0x41004400
     414:	00002841 	.word	0x00002841
     418:	200004c8 	.word	0x200004c8

0000041c <readMS5803AdcResults>:
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     41c:	2280      	movs	r2, #128	; 0x80
     41e:	4b28      	ldr	r3, [pc, #160]	; (4c0 <readMS5803AdcResults+0xa4>)
     420:	01d2      	lsls	r2, r2, #7
#include <boardDefines.h>
#include <math.h>
//#include <tgmath.h>


u32_t readMS5803AdcResults() {
     422:	b5f0      	push	{r4, r5, r6, r7, lr}
     424:	615a      	str	r2, [r3, #20]
    pinLow(cs_baro);
//    dummy_rx = spiDataTransfer(SPI2, cmdAdcRead_);
//    u8_t _byte1 = spiDataTransfer(SPI2,dummy_tx);
//    u8_t _byte2 = spiDataTransfer(SPI2,dummy_tx);
//    u8_t _byte3 = spiDataTransfer(SPI2,dummy_tx);
    byteOut(spi2SCK,spi2MOSI, cmdAdcRead_);
     426:	2300      	movs	r3, #0
     428:	4d26      	ldr	r5, [pc, #152]	; (4c4 <readMS5803AdcResults+0xa8>)
#include <boardDefines.h>
#include <math.h>
//#include <tgmath.h>


u32_t readMS5803AdcResults() {
     42a:	b087      	sub	sp, #28
    pinLow(cs_baro);
//    dummy_rx = spiDataTransfer(SPI2, cmdAdcRead_);
//    u8_t _byte1 = spiDataTransfer(SPI2,dummy_tx);
//    u8_t _byte2 = spiDataTransfer(SPI2,dummy_tx);
//    u8_t _byte3 = spiDataTransfer(SPI2,dummy_tx);
    byteOut(spi2SCK,spi2MOSI, cmdAdcRead_);
     42c:	9300      	str	r3, [sp, #0]
     42e:	786b      	ldrb	r3, [r5, #1]
     430:	7828      	ldrb	r0, [r5, #0]
     432:	78aa      	ldrb	r2, [r5, #2]
     434:	021b      	lsls	r3, r3, #8
     436:	4303      	orrs	r3, r0
     438:	0412      	lsls	r2, r2, #16
     43a:	0019      	movs	r1, r3
     43c:	0013      	movs	r3, r2
     43e:	430b      	orrs	r3, r1
     440:	79a9      	ldrb	r1, [r5, #6]
     442:	796f      	ldrb	r7, [r5, #5]
     444:	79ec      	ldrb	r4, [r5, #7]
     446:	0209      	lsls	r1, r1, #8
     448:	4339      	orrs	r1, r7
     44a:	0424      	lsls	r4, r4, #16
     44c:	0008      	movs	r0, r1
     44e:	0021      	movs	r1, r4
     450:	7a2c      	ldrb	r4, [r5, #8]
     452:	78ea      	ldrb	r2, [r5, #3]
     454:	7a6f      	ldrb	r7, [r5, #9]
     456:	4301      	orrs	r1, r0
     458:	0624      	lsls	r4, r4, #24
     45a:	430c      	orrs	r4, r1
     45c:	0612      	lsls	r2, r2, #24
     45e:	431a      	orrs	r2, r3
     460:	0020      	movs	r0, r4
     462:	792b      	ldrb	r3, [r5, #4]
     464:	0039      	movs	r1, r7
     466:	4e18      	ldr	r6, [pc, #96]	; (4c8 <readMS5803AdcResults+0xac>)
     468:	47b0      	blx	r6
    u8_t _byte1 = byteIn(spi2SCK,spi2MISO);
     46a:	7aeb      	ldrb	r3, [r5, #11]
     46c:	7aa9      	ldrb	r1, [r5, #10]
     46e:	021b      	lsls	r3, r3, #8
     470:	430b      	orrs	r3, r1
     472:	001a      	movs	r2, r3
     474:	7b2b      	ldrb	r3, [r5, #12]
     476:	4e15      	ldr	r6, [pc, #84]	; (4cc <readMS5803AdcResults+0xb0>)
     478:	041b      	lsls	r3, r3, #16
     47a:	4313      	orrs	r3, r2
     47c:	7b6a      	ldrb	r2, [r5, #13]
     47e:	7bad      	ldrb	r5, [r5, #14]
     480:	0612      	lsls	r2, r2, #24
     482:	431a      	orrs	r2, r3
     484:	0039      	movs	r1, r7
     486:	002b      	movs	r3, r5
     488:	0020      	movs	r0, r4
     48a:	9203      	str	r2, [sp, #12]
     48c:	47b0      	blx	r6
    u8_t _byte2 = byteIn(spi2SCK,spi2MISO);
     48e:	9a03      	ldr	r2, [sp, #12]
//    dummy_rx = spiDataTransfer(SPI2, cmdAdcRead_);
//    u8_t _byte1 = spiDataTransfer(SPI2,dummy_tx);
//    u8_t _byte2 = spiDataTransfer(SPI2,dummy_tx);
//    u8_t _byte3 = spiDataTransfer(SPI2,dummy_tx);
    byteOut(spi2SCK,spi2MOSI, cmdAdcRead_);
    u8_t _byte1 = byteIn(spi2SCK,spi2MISO);
     490:	9004      	str	r0, [sp, #16]
    u8_t _byte2 = byteIn(spi2SCK,spi2MISO);
     492:	002b      	movs	r3, r5
     494:	0039      	movs	r1, r7
     496:	0020      	movs	r0, r4
     498:	47b0      	blx	r6
    u8_t _byte3 = byteIn(spi2SCK,spi2MISO);
     49a:	9a03      	ldr	r2, [sp, #12]
//    u8_t _byte1 = spiDataTransfer(SPI2,dummy_tx);
//    u8_t _byte2 = spiDataTransfer(SPI2,dummy_tx);
//    u8_t _byte3 = spiDataTransfer(SPI2,dummy_tx);
    byteOut(spi2SCK,spi2MOSI, cmdAdcRead_);
    u8_t _byte1 = byteIn(spi2SCK,spi2MISO);
    u8_t _byte2 = byteIn(spi2SCK,spi2MISO);
     49c:	9005      	str	r0, [sp, #20]
    u8_t _byte3 = byteIn(spi2SCK,spi2MISO);
     49e:	002b      	movs	r3, r5
     4a0:	0020      	movs	r0, r4
     4a2:	0039      	movs	r1, r7
     4a4:	47b0      	blx	r6
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     4a6:	2280      	movs	r2, #128	; 0x80
     4a8:	4b05      	ldr	r3, [pc, #20]	; (4c0 <readMS5803AdcResults+0xa4>)
     4aa:	01d2      	lsls	r2, r2, #7
     4ac:	619a      	str	r2, [r3, #24]
    pinHigh(cs_baro);

    u32_t _receive = (_byte1 << 16) | (_byte2 << 8) | (_byte3);
    return _receive;
     4ae:	9b04      	ldr	r3, [sp, #16]
     4b0:	9a05      	ldr	r2, [sp, #20]
     4b2:	041b      	lsls	r3, r3, #16
     4b4:	0215      	lsls	r5, r2, #8
     4b6:	431d      	orrs	r5, r3
     4b8:	4328      	orrs	r0, r5
}
     4ba:	b007      	add	sp, #28
     4bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
     4be:	46c0      	nop			; (mov r8, r8)
     4c0:	41004400 	.word	0x41004400
     4c4:	00006534 	.word	0x00006534
     4c8:	00000cdd 	.word	0x00000cdd
     4cc:	00000d49 	.word	0x00000d49

000004d0 <ConvertPressureTemperature>:

void ConvertPressureTemperature(u32_t pressureRaw, u32_t tempRaw, u32_t* temperatureCelcus, int32_t* pressureMbar ) {
     4d0:	b5f0      	push	{r4, r5, r6, r7, lr}
     4d2:	b087      	sub	sp, #28
     4d4:	9304      	str	r3, [sp, #16]
    const u16_t C1 = coefficients_[0];
     4d6:	4b24      	ldr	r3, [pc, #144]	; (568 <ConvertPressureTemperature+0x98>)

    u32_t _receive = (_byte1 << 16) | (_byte2 << 8) | (_byte3);
    return _receive;
}

void ConvertPressureTemperature(u32_t pressureRaw, u32_t tempRaw, u32_t* temperatureCelcus, int32_t* pressureMbar ) {
     4d8:	0014      	movs	r4, r2
    const u16_t C1 = coefficients_[0];
     4da:	881a      	ldrh	r2, [r3, #0]

    u32_t _receive = (_byte1 << 16) | (_byte2 << 8) | (_byte3);
    return _receive;
}

void ConvertPressureTemperature(u32_t pressureRaw, u32_t tempRaw, u32_t* temperatureCelcus, int32_t* pressureMbar ) {
     4dc:	9003      	str	r0, [sp, #12]
    const u16_t C1 = coefficients_[0];
     4de:	9200      	str	r2, [sp, #0]
    const u16_t C2 = coefficients_[1];
     4e0:	885a      	ldrh	r2, [r3, #2]
    const u16_t C5 = coefficients_[4];
    const u16_t C6 = coefficients_[5];

    // calculate 1st order pressure and temperature (MS5607 1st order algorithm)
    const  int32_t dT = (tempRaw) - ((int32_t)C5 << 8);
    *temperatureCelcus  = 2000 + (((int64_t)dT * C6) >> 23) ;
     4e2:	4f22      	ldr	r7, [pc, #136]	; (56c <ConvertPressureTemperature+0x9c>)
    return _receive;
}

void ConvertPressureTemperature(u32_t pressureRaw, u32_t tempRaw, u32_t* temperatureCelcus, int32_t* pressureMbar ) {
    const u16_t C1 = coefficients_[0];
    const u16_t C2 = coefficients_[1];
     4e4:	9201      	str	r2, [sp, #4]
    const u16_t C3 = coefficients_[2];
    const u16_t C4 = coefficients_[3];
     4e6:	88da      	ldrh	r2, [r3, #6]
}

void ConvertPressureTemperature(u32_t pressureRaw, u32_t tempRaw, u32_t* temperatureCelcus, int32_t* pressureMbar ) {
    const u16_t C1 = coefficients_[0];
    const u16_t C2 = coefficients_[1];
    const u16_t C3 = coefficients_[2];
     4e8:	889d      	ldrh	r5, [r3, #4]
    const u16_t C4 = coefficients_[3];
     4ea:	9202      	str	r2, [sp, #8]
    const u16_t C5 = coefficients_[4];
    const u16_t C6 = coefficients_[5];

    // calculate 1st order pressure and temperature (MS5607 1st order algorithm)
    const  int32_t dT = (tempRaw) - ((int32_t)C5 << 8);
    *temperatureCelcus  = 2000 + (((int64_t)dT * C6) >> 23) ;
     4ec:	891e      	ldrh	r6, [r3, #8]
     4ee:	0236      	lsls	r6, r6, #8
     4f0:	1b8e      	subs	r6, r1, r6
     4f2:	17f2      	asrs	r2, r6, #31
     4f4:	9205      	str	r2, [sp, #20]
     4f6:	8958      	ldrh	r0, [r3, #10]
     4f8:	0032      	movs	r2, r6
     4fa:	17f3      	asrs	r3, r6, #31
     4fc:	2100      	movs	r1, #0
     4fe:	47b8      	blx	r7
     500:	23fa      	movs	r3, #250	; 0xfa
     502:	0249      	lsls	r1, r1, #9
     504:	0dc0      	lsrs	r0, r0, #23
     506:	4308      	orrs	r0, r1
     508:	00db      	lsls	r3, r3, #3
     50a:	18c0      	adds	r0, r0, r3
     50c:	6020      	str	r0, [r4, #0]

    const  int64_t OFF   = ((int64_t)C2 << 16) + ((C4 * (int64_t)dT) >> 7);
    const  int64_t SENS  =  ((int64_t)C1 << 15) + ((C3 * (int64_t)dT) >> 8);
    *pressureMbar = ((((pressureRaw * SENS) >> 21) - OFF) >> 15);
     50e:	0032      	movs	r2, r6
     510:	17f3      	asrs	r3, r6, #31
     512:	0028      	movs	r0, r5
     514:	2100      	movs	r1, #0
     516:	47b8      	blx	r7
     518:	060c      	lsls	r4, r1, #24
     51a:	120b      	asrs	r3, r1, #8
     51c:	2100      	movs	r1, #0
     51e:	0a02      	lsrs	r2, r0, #8
     520:	4322      	orrs	r2, r4
     522:	9c00      	ldr	r4, [sp, #0]
     524:	03e0      	lsls	r0, r4, #15
     526:	1880      	adds	r0, r0, r2
     528:	4159      	adcs	r1, r3
     52a:	9a03      	ldr	r2, [sp, #12]
     52c:	2300      	movs	r3, #0
     52e:	47b8      	blx	r7
     530:	02cb      	lsls	r3, r1, #11
     532:	0d44      	lsrs	r4, r0, #21
     534:	0032      	movs	r2, r6
     536:	431c      	orrs	r4, r3
     538:	154d      	asrs	r5, r1, #21
     53a:	9b05      	ldr	r3, [sp, #20]
     53c:	9802      	ldr	r0, [sp, #8]
     53e:	2100      	movs	r1, #0
     540:	47b8      	blx	r7
     542:	064b      	lsls	r3, r1, #25
     544:	09c6      	lsrs	r6, r0, #7
     546:	431e      	orrs	r6, r3
     548:	2300      	movs	r3, #0
     54a:	11cf      	asrs	r7, r1, #7
     54c:	9901      	ldr	r1, [sp, #4]
     54e:	040a      	lsls	r2, r1, #16
     550:	1992      	adds	r2, r2, r6
     552:	417b      	adcs	r3, r7
     554:	1aa4      	subs	r4, r4, r2
     556:	419d      	sbcs	r5, r3
     558:	046b      	lsls	r3, r5, #17
     55a:	0be4      	lsrs	r4, r4, #15
     55c:	431c      	orrs	r4, r3
     55e:	9b04      	ldr	r3, [sp, #16]
     560:	601c      	str	r4, [r3, #0]

}
     562:	b007      	add	sp, #28
     564:	bdf0      	pop	{r4, r5, r6, r7, pc}
     566:	46c0      	nop			; (mov r8, r8)
     568:	20000616 	.word	0x20000616
     56c:	00003c95 	.word	0x00003c95

00000570 <paToFeetNOAA>:

double paToFeetNOAA(int32_t pressureMbar) {
     570:	b510      	push	{r4, lr}

    double lower =(((double)(pressureMbar)/10)/1013.25);
    double exponent = 0.190284;

    double altFeet = (1-pow(lower,exponent))*145366.45;
     572:	4b0c      	ldr	r3, [pc, #48]	; (5a4 <paToFeetNOAA+0x34>)
     574:	4798      	blx	r3
     576:	4c0c      	ldr	r4, [pc, #48]	; (5a8 <paToFeetNOAA+0x38>)
     578:	2200      	movs	r2, #0
     57a:	4b0c      	ldr	r3, [pc, #48]	; (5ac <paToFeetNOAA+0x3c>)
     57c:	47a0      	blx	r4
     57e:	2200      	movs	r2, #0
     580:	4b0b      	ldr	r3, [pc, #44]	; (5b0 <paToFeetNOAA+0x40>)
     582:	47a0      	blx	r4
     584:	4a0b      	ldr	r2, [pc, #44]	; (5b4 <paToFeetNOAA+0x44>)
     586:	4b0c      	ldr	r3, [pc, #48]	; (5b8 <paToFeetNOAA+0x48>)
     588:	4c0c      	ldr	r4, [pc, #48]	; (5bc <paToFeetNOAA+0x4c>)
     58a:	47a0      	blx	r4
    return altFeet;
     58c:	4c0c      	ldr	r4, [pc, #48]	; (5c0 <paToFeetNOAA+0x50>)
double paToFeetNOAA(int32_t pressureMbar) {

    double lower =(((double)(pressureMbar)/10)/1013.25);
    double exponent = 0.190284;

    double altFeet = (1-pow(lower,exponent))*145366.45;
     58e:	0002      	movs	r2, r0
     590:	000b      	movs	r3, r1
    return altFeet;
     592:	2000      	movs	r0, #0
     594:	490b      	ldr	r1, [pc, #44]	; (5c4 <paToFeetNOAA+0x54>)
     596:	47a0      	blx	r4
     598:	4a0b      	ldr	r2, [pc, #44]	; (5c8 <paToFeetNOAA+0x58>)
     59a:	4b0c      	ldr	r3, [pc, #48]	; (5cc <paToFeetNOAA+0x5c>)
     59c:	4c0c      	ldr	r4, [pc, #48]	; (5d0 <paToFeetNOAA+0x60>)
     59e:	47a0      	blx	r4

}
     5a0:	bd10      	pop	{r4, pc}
     5a2:	46c0      	nop			; (mov r8, r8)
     5a4:	00005fa9 	.word	0x00005fa9
     5a8:	00004b19 	.word	0x00004b19
     5ac:	40240000 	.word	0x40240000
     5b0:	408faa00 	.word	0x408faa00
     5b4:	e279dd3c 	.word	0xe279dd3c
     5b8:	3fc85b39 	.word	0x3fc85b39
     5bc:	00002971 	.word	0x00002971
     5c0:	00005855 	.word	0x00005855
     5c4:	3ff00000 	.word	0x3ff00000
     5c8:	9999999a 	.word	0x9999999a
     5cc:	4101beb3 	.word	0x4101beb3
     5d0:	00005361 	.word	0x00005361

000005d4 <readMS5803Coefficients>:
    }
}

*/

void readMS5803Coefficients() {
     5d4:	b5f0      	push	{r4, r5, r6, r7, lr}
     5d6:	2700      	movs	r7, #0
     5d8:	b087      	sub	sp, #28

    u8_t dummy_tx = 0xFF;
    u8_t dummy_rx;

    for (u8_t coeff_num = 0; coeff_num < 6 ; ++coeff_num ) {
        delay_us(600);
     5da:	2096      	movs	r0, #150	; 0x96
     5dc:	4c2a      	ldr	r4, [pc, #168]	; (688 <readMS5803Coefficients+0xb4>)
     5de:	0080      	lsls	r0, r0, #2
     5e0:	47a0      	blx	r4
        u8_t _cmd = MS5803_CMD_PROM_READ + ((coeff_num+1)*2);
        delay_us(600);
     5e2:	2096      	movs	r0, #150	; 0x96
     5e4:	0080      	lsls	r0, r0, #2
     5e6:	47a0      	blx	r4
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     5e8:	2280      	movs	r2, #128	; 0x80
     5ea:	4b28      	ldr	r3, [pc, #160]	; (68c <readMS5803Coefficients+0xb8>)
     5ec:	01d2      	lsls	r2, r2, #7
     5ee:	615a      	str	r2, [r3, #20]
        pinLow(cs_baro);
//      dummy_rx = spiDataTransfer(SPI1, _cmd);
//      u8_t _byte1 = spiDataTransfer(SPI1,dummy_tx);
//      u8_t _byte2 = spiDataTransfer(SPI1,dummy_tx);
        byteOut(spi2SCK,spi2MOSI, _cmd);
     5f0:	003b      	movs	r3, r7
     5f2:	4c27      	ldr	r4, [pc, #156]	; (690 <readMS5803Coefficients+0xbc>)
     5f4:	3b5e      	subs	r3, #94	; 0x5e
     5f6:	b2db      	uxtb	r3, r3
     5f8:	9300      	str	r3, [sp, #0]
     5fa:	7863      	ldrb	r3, [r4, #1]
     5fc:	7820      	ldrb	r0, [r4, #0]
     5fe:	78a2      	ldrb	r2, [r4, #2]
     600:	021b      	lsls	r3, r3, #8
     602:	4303      	orrs	r3, r0
     604:	0412      	lsls	r2, r2, #16
     606:	0019      	movs	r1, r3
     608:	0013      	movs	r3, r2
     60a:	430b      	orrs	r3, r1
     60c:	79a1      	ldrb	r1, [r4, #6]
     60e:	7966      	ldrb	r6, [r4, #5]
     610:	0209      	lsls	r1, r1, #8
     612:	4331      	orrs	r1, r6
     614:	0008      	movs	r0, r1
     616:	79e1      	ldrb	r1, [r4, #7]
     618:	78e2      	ldrb	r2, [r4, #3]
     61a:	0409      	lsls	r1, r1, #16
     61c:	4301      	orrs	r1, r0
     61e:	7a20      	ldrb	r0, [r4, #8]
     620:	7a66      	ldrb	r6, [r4, #9]
     622:	0612      	lsls	r2, r2, #24
     624:	0600      	lsls	r0, r0, #24
     626:	4308      	orrs	r0, r1
     628:	431a      	orrs	r2, r3
     62a:	0031      	movs	r1, r6
     62c:	7923      	ldrb	r3, [r4, #4]
     62e:	4d19      	ldr	r5, [pc, #100]	; (694 <readMS5803Coefficients+0xc0>)
     630:	9003      	str	r0, [sp, #12]
     632:	47a8      	blx	r5
        u8_t _byte1 = byteIn(spi2SCK,spi2MISO);
     634:	7ae3      	ldrb	r3, [r4, #11]
     636:	0020      	movs	r0, r4
     638:	7aa1      	ldrb	r1, [r4, #10]
     63a:	7b24      	ldrb	r4, [r4, #12]
     63c:	021b      	lsls	r3, r3, #8
     63e:	430b      	orrs	r3, r1
     640:	0424      	lsls	r4, r4, #16
     642:	001a      	movs	r2, r3
     644:	0023      	movs	r3, r4
     646:	7b44      	ldrb	r4, [r0, #13]
     648:	7b85      	ldrb	r5, [r0, #14]
     64a:	4313      	orrs	r3, r2
     64c:	0624      	lsls	r4, r4, #24
     64e:	431c      	orrs	r4, r3
     650:	0022      	movs	r2, r4
     652:	002b      	movs	r3, r5
     654:	9404      	str	r4, [sp, #16]
     656:	0031      	movs	r1, r6
     658:	4c0f      	ldr	r4, [pc, #60]	; (698 <readMS5803Coefficients+0xc4>)
     65a:	9803      	ldr	r0, [sp, #12]
     65c:	47a0      	blx	r4
        u8_t _byte2 = byteIn(spi2SCK,spi2MISO);
     65e:	002b      	movs	r3, r5
        pinLow(cs_baro);
//      dummy_rx = spiDataTransfer(SPI1, _cmd);
//      u8_t _byte1 = spiDataTransfer(SPI1,dummy_tx);
//      u8_t _byte2 = spiDataTransfer(SPI1,dummy_tx);
        byteOut(spi2SCK,spi2MOSI, _cmd);
        u8_t _byte1 = byteIn(spi2SCK,spi2MISO);
     660:	9005      	str	r0, [sp, #20]
        u8_t _byte2 = byteIn(spi2SCK,spi2MISO);
     662:	9a04      	ldr	r2, [sp, #16]
     664:	9803      	ldr	r0, [sp, #12]
     666:	0031      	movs	r1, r6
     668:	4c0b      	ldr	r4, [pc, #44]	; (698 <readMS5803Coefficients+0xc4>)
     66a:	47a0      	blx	r4
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     66c:	2280      	movs	r2, #128	; 0x80
     66e:	4b07      	ldr	r3, [pc, #28]	; (68c <readMS5803Coefficients+0xb8>)
     670:	01d2      	lsls	r2, r2, #7
     672:	619a      	str	r2, [r3, #24]
        pinHigh(cs_baro);
        coefficients_[coeff_num] = (_byte1 << 8) | _byte2;
     674:	9b05      	ldr	r3, [sp, #20]
     676:	021d      	lsls	r5, r3, #8
     678:	4b08      	ldr	r3, [pc, #32]	; (69c <readMS5803Coefficients+0xc8>)
     67a:	4328      	orrs	r0, r5
     67c:	53d8      	strh	r0, [r3, r7]
     67e:	3702      	adds	r7, #2
void readMS5803Coefficients() {

    u8_t dummy_tx = 0xFF;
    u8_t dummy_rx;

    for (u8_t coeff_num = 0; coeff_num < 6 ; ++coeff_num ) {
     680:	2f0c      	cmp	r7, #12
     682:	d1aa      	bne.n	5da <readMS5803Coefficients+0x6>
        u8_t _byte2 = byteIn(spi2SCK,spi2MISO);
        pinHigh(cs_baro);
        coefficients_[coeff_num] = (_byte1 << 8) | _byte2;
    }

}
     684:	b007      	add	sp, #28
     686:	bdf0      	pop	{r4, r5, r6, r7, pc}
     688:	00000ffd 	.word	0x00000ffd
     68c:	41004400 	.word	0x41004400
     690:	00006534 	.word	0x00006534
     694:	00000cdd 	.word	0x00000cdd
     698:	00000d49 	.word	0x00000d49
     69c:	20000616 	.word	0x20000616

000006a0 <initMS5803Barometer>:

void initMS5803Barometer() {
     6a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     6a2:	2580      	movs	r5, #128	; 0x80
    u8_t dummy_tx = 0xFF;
    u8_t dummy_rx;

    pinLow(cs_baro);
//   dummy_rx = spiDataTransfer(SPI1, MS5803_CMD_RES);
    byteOut(spi2SCK,spi2MOSI, MS5803_CMD_RES);
     6a4:	231e      	movs	r3, #30
     6a6:	4914      	ldr	r1, [pc, #80]	; (6f8 <initMS5803Barometer+0x58>)
     6a8:	4c14      	ldr	r4, [pc, #80]	; (6fc <initMS5803Barometer+0x5c>)
     6aa:	01ed      	lsls	r5, r5, #7
     6ac:	6165      	str	r5, [r4, #20]
     6ae:	9300      	str	r3, [sp, #0]
     6b0:	784b      	ldrb	r3, [r1, #1]
     6b2:	780e      	ldrb	r6, [r1, #0]
     6b4:	788a      	ldrb	r2, [r1, #2]
     6b6:	021b      	lsls	r3, r3, #8
     6b8:	4333      	orrs	r3, r6
     6ba:	0412      	lsls	r2, r2, #16
     6bc:	0018      	movs	r0, r3
     6be:	0013      	movs	r3, r2
     6c0:	78ca      	ldrb	r2, [r1, #3]
     6c2:	4303      	orrs	r3, r0
     6c4:	0612      	lsls	r2, r2, #24
     6c6:	1d4f      	adds	r7, r1, #5
     6c8:	431a      	orrs	r2, r3
     6ca:	7948      	ldrb	r0, [r1, #5]
     6cc:	790b      	ldrb	r3, [r1, #4]
     6ce:	7989      	ldrb	r1, [r1, #6]
     6d0:	0209      	lsls	r1, r1, #8
     6d2:	4301      	orrs	r1, r0
     6d4:	78b8      	ldrb	r0, [r7, #2]
     6d6:	000e      	movs	r6, r1
     6d8:	0400      	lsls	r0, r0, #16
     6da:	0001      	movs	r1, r0
     6dc:	78f8      	ldrb	r0, [r7, #3]
     6de:	4331      	orrs	r1, r6
     6e0:	0600      	lsls	r0, r0, #24
     6e2:	4308      	orrs	r0, r1
     6e4:	4e06      	ldr	r6, [pc, #24]	; (700 <initMS5803Barometer+0x60>)
     6e6:	7939      	ldrb	r1, [r7, #4]
     6e8:	47b0      	blx	r6
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     6ea:	61a5      	str	r5, [r4, #24]
    pinHigh(cs_baro);
    delay_ms(200);
     6ec:	20c8      	movs	r0, #200	; 0xc8
     6ee:	4b05      	ldr	r3, [pc, #20]	; (704 <initMS5803Barometer+0x64>)
     6f0:	4798      	blx	r3
    readMS5803Coefficients();
     6f2:	4b05      	ldr	r3, [pc, #20]	; (708 <initMS5803Barometer+0x68>)
     6f4:	4798      	blx	r3
    //my_barometer->temperatureCelcus = 2000;




}
     6f6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
     6f8:	00006534 	.word	0x00006534
     6fc:	41004400 	.word	0x41004400
     700:	00000cdd 	.word	0x00000cdd
     704:	0000102d 	.word	0x0000102d
     708:	000005d5 	.word	0x000005d5

0000070c <init>:

void init() {


    /* Set 1 Flash Wait State for 48MHz, cf tables 20.9 and 35.27 in SAMD21 Datasheet */
    NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val;
     70c:	211e      	movs	r1, #30
#include <util.h>
#include <boardDefines.h>
#include "math.h"


void init() {
     70e:	b5f0      	push	{r4, r5, r6, r7, lr}


    /* Set 1 Flash Wait State for 48MHz, cf tables 20.9 and 35.27 in SAMD21 Datasheet */
    NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val;
     710:	2602      	movs	r6, #2
     712:	4ae2      	ldr	r2, [pc, #904]	; (a9c <init+0x390>)
#include <util.h>
#include <boardDefines.h>
#include "math.h"


void init() {
     714:	b085      	sub	sp, #20


    /* Set 1 Flash Wait State for 48MHz, cf tables 20.9 and 35.27 in SAMD21 Datasheet */
    NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val;
     716:	6853      	ldr	r3, [r2, #4]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     718:	2401      	movs	r4, #1
     71a:	438b      	bics	r3, r1
     71c:	4333      	orrs	r3, r6
     71e:	6053      	str	r3, [r2, #4]


    /* Turn on the digital interface clock */
    PM->APBAMASK.reg |= PM_APBAMASK_GCLK;
     720:	4adf      	ldr	r2, [pc, #892]	; (aa0 <init+0x394>)
     722:	3916      	subs	r1, #22
     724:	6993      	ldr	r3, [r2, #24]
     726:	430b      	orrs	r3, r1
     728:	6193      	str	r3, [r2, #24]


    SystemInit();
     72a:	4bde      	ldr	r3, [pc, #888]	; (aa4 <init+0x398>)
     72c:	4798      	blx	r3
    GclkInit();
     72e:	4bde      	ldr	r3, [pc, #888]	; (aa8 <init+0x39c>)
     730:	4798      	blx	r3
    RtcInit();
     732:	4bde      	ldr	r3, [pc, #888]	; (aac <init+0x3a0>)
     734:	4798      	blx	r3
    delayInit();
     736:	4bde      	ldr	r3, [pc, #888]	; (ab0 <init+0x3a4>)
     738:	4798      	blx	r3
    adcInit();
     73a:	4bde      	ldr	r3, [pc, #888]	; (ab4 <init+0x3a8>)
     73c:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     73e:	2240      	movs	r2, #64	; 0x40
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     740:	21c1      	movs	r1, #193	; 0xc1

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     742:	4bdd      	ldr	r3, [pc, #884]	; (ab8 <init+0x3ac>)
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     744:	0089      	lsls	r1, r1, #2

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     746:	601a      	str	r2, [r3, #0]
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     748:	5858      	ldr	r0, [r3, r1]
     74a:	4adc      	ldr	r2, [pc, #880]	; (abc <init+0x3b0>)
     74c:	4002      	ands	r2, r0
     74e:	505a      	str	r2, [r3, r1]
     750:	4bdb      	ldr	r3, [pc, #876]	; (ac0 <init+0x3b4>)

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     752:	200f      	movs	r0, #15
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     754:	0019      	movs	r1, r3
     756:	3154      	adds	r1, #84	; 0x54
     758:	780a      	ldrb	r2, [r1, #0]


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     75a:	001d      	movs	r5, r3
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     75c:	43a2      	bics	r2, r4
     75e:	700a      	strb	r2, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     760:	2280      	movs	r2, #128	; 0x80
     762:	0352      	lsls	r2, r2, #13
     764:	609a      	str	r2, [r3, #8]

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     766:	3921      	subs	r1, #33	; 0x21
     768:	780a      	ldrb	r2, [r1, #0]
     76a:	4684      	mov	ip, r0
     76c:	4382      	bics	r2, r0
     76e:	4322      	orrs	r2, r4
     770:	700a      	strb	r2, [r1, #0]
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     772:	7cca      	ldrb	r2, [r1, #19]


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     774:	3508      	adds	r5, #8
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     776:	4322      	orrs	r2, r4
     778:	74ca      	strb	r2, [r1, #19]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     77a:	001a      	movs	r2, r3
     77c:	32c3      	adds	r2, #195	; 0xc3
     77e:	7811      	ldrb	r1, [r2, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     780:	4667      	mov	r7, ip
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     782:	43a1      	bics	r1, r4
     784:	7011      	strb	r1, [r2, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     786:	7811      	ldrb	r1, [r2, #0]
     788:	4331      	orrs	r1, r6
     78a:	7011      	strb	r1, [r2, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     78c:	2108      	movs	r1, #8
     78e:	67e9      	str	r1, [r5, #124]	; 0x7c
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     790:	0019      	movs	r1, r3
     792:	31b1      	adds	r1, #177	; 0xb1
     794:	7808      	ldrb	r0, [r1, #0]
     796:	4038      	ands	r0, r7
     798:	193f      	adds	r7, r7, r4
     79a:	4338      	orrs	r0, r7
     79c:	7008      	strb	r0, [r1, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     79e:	7810      	ldrb	r0, [r2, #0]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     7a0:	001f      	movs	r7, r3
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     7a2:	4320      	orrs	r0, r4
     7a4:	7010      	strb	r0, [r2, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     7a6:	0018      	movs	r0, r3
     7a8:	30d7      	adds	r0, #215	; 0xd7
     7aa:	7802      	ldrb	r2, [r0, #0]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     7ac:	3794      	adds	r7, #148	; 0x94
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     7ae:	43a2      	bics	r2, r4
     7b0:	7002      	strb	r2, [r0, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     7b2:	2080      	movs	r0, #128	; 0x80
     7b4:	4ac3      	ldr	r2, [pc, #780]	; (ac4 <init+0x3b8>)
     7b6:	0400      	lsls	r0, r0, #16
     7b8:	6010      	str	r0, [r2, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     7ba:	001a      	movs	r2, r3
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     7bc:	6038      	str	r0, [r7, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     7be:	32c2      	adds	r2, #194	; 0xc2
     7c0:	7810      	ldrb	r0, [r2, #0]
     7c2:	43a0      	bics	r0, r4
     7c4:	7010      	strb	r0, [r2, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     7c6:	7810      	ldrb	r0, [r2, #0]
     7c8:	4330      	orrs	r0, r6
     7ca:	7010      	strb	r0, [r2, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     7cc:	2004      	movs	r0, #4
     7ce:	67e8      	str	r0, [r5, #124]	; 0x7c

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     7d0:	4665      	mov	r5, ip
     7d2:	7808      	ldrb	r0, [r1, #0]
     7d4:	43a8      	bics	r0, r5
     7d6:	4320      	orrs	r0, r4
     7d8:	7008      	strb	r0, [r1, #0]
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     7da:	7811      	ldrb	r1, [r2, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     7dc:	0018      	movs	r0, r3
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     7de:	4321      	orrs	r1, r4
     7e0:	7011      	strb	r1, [r2, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     7e2:	0019      	movs	r1, r3
     7e4:	31d6      	adds	r1, #214	; 0xd6
     7e6:	780a      	ldrb	r2, [r1, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     7e8:	3031      	adds	r0, #49	; 0x31
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     7ea:	43a2      	bics	r2, r4
     7ec:	700a      	strb	r2, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     7ee:	2180      	movs	r1, #128	; 0x80
     7f0:	4ab4      	ldr	r2, [pc, #720]	; (ac4 <init+0x3b8>)
     7f2:	03c9      	lsls	r1, r1, #15
     7f4:	6011      	str	r1, [r2, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     7f6:	001a      	movs	r2, r3
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     7f8:	6039      	str	r1, [r7, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     7fa:	3243      	adds	r2, #67	; 0x43
     7fc:	7811      	ldrb	r1, [r2, #0]
     7fe:	3f4b      	subs	r7, #75	; 0x4b
     800:	43a1      	bics	r1, r4
     802:	7011      	strb	r1, [r2, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     804:	7811      	ldrb	r1, [r2, #0]
     806:	4331      	orrs	r1, r6
     808:	7011      	strb	r1, [r2, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     80a:	2108      	movs	r1, #8
     80c:	6059      	str	r1, [r3, #4]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     80e:	7801      	ldrb	r1, [r0, #0]
     810:	4029      	ands	r1, r5
     812:	192d      	adds	r5, r5, r4
     814:	430d      	orrs	r5, r1
     816:	7005      	strb	r5, [r0, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     818:	7811      	ldrb	r1, [r2, #0]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     81a:	4665      	mov	r5, ip
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     81c:	4321      	orrs	r1, r4
     81e:	7011      	strb	r1, [r2, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     820:	0019      	movs	r1, r3
     822:	3159      	adds	r1, #89	; 0x59
     824:	780a      	ldrb	r2, [r1, #0]
     826:	43a2      	bics	r2, r4
     828:	700a      	strb	r2, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     82a:	2280      	movs	r2, #128	; 0x80
     82c:	0492      	lsls	r2, r2, #18
     82e:	609a      	str	r2, [r3, #8]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     830:	615a      	str	r2, [r3, #20]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     832:	001a      	movs	r2, r3
     834:	3242      	adds	r2, #66	; 0x42
     836:	7811      	ldrb	r1, [r2, #0]
     838:	43a1      	bics	r1, r4
     83a:	7011      	strb	r1, [r2, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     83c:	7811      	ldrb	r1, [r2, #0]
     83e:	4331      	orrs	r1, r6
     840:	7011      	strb	r1, [r2, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     842:	2104      	movs	r1, #4
     844:	6059      	str	r1, [r3, #4]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     846:	7801      	ldrb	r1, [r0, #0]
     848:	43a9      	bics	r1, r5
     84a:	4321      	orrs	r1, r4
     84c:	7001      	strb	r1, [r0, #0]
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     84e:	7811      	ldrb	r1, [r2, #0]
    pinIn(senseDPin);
    pinMux(senseDPin);
    pinOut(fireDPin);
    pinLow(fireDPin);

    charges.Afired = false;
     850:	2500      	movs	r5, #0
     852:	4321      	orrs	r1, r4
     854:	7011      	strb	r1, [r2, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     856:	0019      	movs	r1, r3
     858:	3158      	adds	r1, #88	; 0x58
     85a:	780a      	ldrb	r2, [r1, #0]
     85c:	3017      	adds	r0, #23
     85e:	43a2      	bics	r2, r4
     860:	700a      	strb	r2, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     862:	2280      	movs	r2, #128	; 0x80
     864:	0452      	lsls	r2, r2, #17
     866:	609a      	str	r2, [r3, #8]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     868:	615a      	str	r2, [r3, #20]
     86a:	4a97      	ldr	r2, [pc, #604]	; (ac8 <init+0x3bc>)
     86c:	7015      	strb	r5, [r2, #0]
    charges.Bfired = false;
     86e:	7055      	strb	r5, [r2, #1]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     870:	9003      	str	r0, [sp, #12]
    charges.Cfired = false;
     872:	7095      	strb	r5, [r2, #2]
    charges.Dfired = false;
     874:	70d5      	strb	r5, [r2, #3]
     876:	7802      	ldrb	r2, [r0, #0]
     878:	43a2      	bics	r2, r4
     87a:	7002      	strb	r2, [r0, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     87c:	2280      	movs	r2, #128	; 0x80
     87e:	0052      	lsls	r2, r2, #1
     880:	609a      	str	r2, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     882:	783a      	ldrb	r2, [r7, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     884:	4660      	mov	r0, ip
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     886:	43a2      	bics	r2, r4
     888:	703a      	strb	r2, [r7, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     88a:	2280      	movs	r2, #128	; 0x80
     88c:	0092      	lsls	r2, r2, #2
     88e:	609a      	str	r2, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     890:	001a      	movs	r2, r3
     892:	324b      	adds	r2, #75	; 0x4b
     894:	7811      	ldrb	r1, [r2, #0]
     896:	43a1      	bics	r1, r4
     898:	7011      	strb	r1, [r2, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     89a:	7811      	ldrb	r1, [r2, #0]
     89c:	4331      	orrs	r1, r6
     89e:	7011      	strb	r1, [r2, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     8a0:	2180      	movs	r1, #128	; 0x80
     8a2:	0109      	lsls	r1, r1, #4
     8a4:	6059      	str	r1, [r3, #4]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     8a6:	4989      	ldr	r1, [pc, #548]	; (acc <init+0x3c0>)
     8a8:	7809      	ldrb	r1, [r1, #0]
     8aa:	4001      	ands	r1, r0
     8ac:	3011      	adds	r0, #17
     8ae:	4301      	orrs	r1, r0
     8b0:	4886      	ldr	r0, [pc, #536]	; (acc <init+0x3c0>)
     8b2:	7001      	strb	r1, [r0, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     8b4:	7811      	ldrb	r1, [r2, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     8b6:	4660      	mov	r0, ip
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     8b8:	4321      	orrs	r1, r4
     8ba:	7011      	strb	r1, [r2, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     8bc:	0019      	movs	r1, r3
     8be:	3134      	adds	r1, #52	; 0x34
     8c0:	780a      	ldrb	r2, [r1, #0]
     8c2:	4002      	ands	r2, r0
     8c4:	3011      	adds	r0, #17
     8c6:	4302      	orrs	r2, r0
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     8c8:	4660      	mov	r0, ip
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     8ca:	700a      	strb	r2, [r1, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     8cc:	783a      	ldrb	r2, [r7, #0]
     8ce:	4322      	orrs	r2, r4
     8d0:	703a      	strb	r2, [r7, #0]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     8d2:	780a      	ldrb	r2, [r1, #0]
     8d4:	4382      	bics	r2, r0
     8d6:	4332      	orrs	r2, r6
     8d8:	700a      	strb	r2, [r1, #0]
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     8da:	9a03      	ldr	r2, [sp, #12]
     8dc:	9903      	ldr	r1, [sp, #12]
     8de:	7812      	ldrb	r2, [r2, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     8e0:	0018      	movs	r0, r3
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     8e2:	4322      	orrs	r2, r4
     8e4:	700a      	strb	r2, [r1, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     8e6:	0019      	movs	r1, r3
     8e8:	31ca      	adds	r1, #202	; 0xca
     8ea:	780a      	ldrb	r2, [r1, #0]
     8ec:	304a      	adds	r0, #74	; 0x4a
     8ee:	43a2      	bics	r2, r4
     8f0:	700a      	strb	r2, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     8f2:	2280      	movs	r2, #128	; 0x80
     8f4:	4973      	ldr	r1, [pc, #460]	; (ac4 <init+0x3b8>)
     8f6:	00d2      	lsls	r2, r2, #3
     8f8:	600a      	str	r2, [r1, #0]
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     8fa:	0019      	movs	r1, r3
     8fc:	3198      	adds	r1, #152	; 0x98
     8fe:	600a      	str	r2, [r1, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     900:	7801      	ldrb	r1, [r0, #0]
     902:	43a1      	bics	r1, r4
     904:	7001      	strb	r1, [r0, #0]
     906:	3006      	adds	r0, #6
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     908:	609a      	str	r2, [r3, #8]
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     90a:	619a      	str	r2, [r3, #24]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     90c:	9003      	str	r0, [sp, #12]
     90e:	7802      	ldrb	r2, [r0, #0]
     910:	43a2      	bics	r2, r4
     912:	7002      	strb	r2, [r0, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     914:	2280      	movs	r2, #128	; 0x80
     916:	0252      	lsls	r2, r2, #9
     918:	609a      	str	r2, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     91a:	7a3a      	ldrb	r2, [r7, #8]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     91c:	4660      	mov	r0, ip
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     91e:	43a2      	bics	r2, r4
     920:	723a      	strb	r2, [r7, #8]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     922:	2280      	movs	r2, #128	; 0x80
     924:	0292      	lsls	r2, r2, #10
     926:	609a      	str	r2, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     928:	001a      	movs	r2, r3
     92a:	3253      	adds	r2, #83	; 0x53
     92c:	7811      	ldrb	r1, [r2, #0]
     92e:	43a1      	bics	r1, r4
     930:	7011      	strb	r1, [r2, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     932:	7811      	ldrb	r1, [r2, #0]
     934:	4331      	orrs	r1, r6
     936:	7011      	strb	r1, [r2, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     938:	2180      	movs	r1, #128	; 0x80
     93a:	0309      	lsls	r1, r1, #12
     93c:	6059      	str	r1, [r3, #4]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     93e:	4964      	ldr	r1, [pc, #400]	; (ad0 <init+0x3c4>)
     940:	7809      	ldrb	r1, [r1, #0]
     942:	4001      	ands	r1, r0
     944:	3011      	adds	r0, #17
     946:	4301      	orrs	r1, r0
     948:	4861      	ldr	r0, [pc, #388]	; (ad0 <init+0x3c4>)
     94a:	7001      	strb	r1, [r0, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     94c:	7811      	ldrb	r1, [r2, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     94e:	4660      	mov	r0, ip
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     950:	4321      	orrs	r1, r4
     952:	7011      	strb	r1, [r2, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     954:	0019      	movs	r1, r3
     956:	3138      	adds	r1, #56	; 0x38
     958:	780a      	ldrb	r2, [r1, #0]
     95a:	4002      	ands	r2, r0
     95c:	3011      	adds	r0, #17
     95e:	4302      	orrs	r2, r0
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     960:	4660      	mov	r0, ip
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     962:	700a      	strb	r2, [r1, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     964:	7a3a      	ldrb	r2, [r7, #8]
     966:	4322      	orrs	r2, r4
     968:	723a      	strb	r2, [r7, #8]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     96a:	780a      	ldrb	r2, [r1, #0]
     96c:	4667      	mov	r7, ip
     96e:	4382      	bics	r2, r0
     970:	4332      	orrs	r2, r6
     972:	700a      	strb	r2, [r1, #0]
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     974:	9a03      	ldr	r2, [sp, #12]
     976:	9903      	ldr	r1, [sp, #12]
     978:	7812      	ldrb	r2, [r2, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     97a:	0018      	movs	r0, r3
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     97c:	4322      	orrs	r2, r4
     97e:	700a      	strb	r2, [r1, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     980:	0019      	movs	r1, r3
     982:	3152      	adds	r1, #82	; 0x52
     984:	780a      	ldrb	r2, [r1, #0]
     986:	3906      	subs	r1, #6
     988:	43a2      	bics	r2, r4
     98a:	718a      	strb	r2, [r1, #6]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     98c:	2280      	movs	r2, #128	; 0x80
     98e:	02d2      	lsls	r2, r2, #11
     990:	609a      	str	r2, [r3, #8]
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     992:	619a      	str	r2, [r3, #24]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     994:	780a      	ldrb	r2, [r1, #0]
     996:	3056      	adds	r0, #86	; 0x56
     998:	43a2      	bics	r2, r4
     99a:	700a      	strb	r2, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     99c:	2280      	movs	r2, #128	; 0x80
     99e:	0152      	lsls	r2, r2, #5
     9a0:	609a      	str	r2, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     9a2:	78ca      	ldrb	r2, [r1, #3]
     9a4:	43a2      	bics	r2, r4
     9a6:	70ca      	strb	r2, [r1, #3]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     9a8:	2280      	movs	r2, #128	; 0x80
     9aa:	0212      	lsls	r2, r2, #8
     9ac:	609a      	str	r2, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     9ae:	001a      	movs	r2, r3
     9b0:	324d      	adds	r2, #77	; 0x4d
     9b2:	7811      	ldrb	r1, [r2, #0]
     9b4:	43a1      	bics	r1, r4
     9b6:	7011      	strb	r1, [r2, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     9b8:	7811      	ldrb	r1, [r2, #0]
     9ba:	4331      	orrs	r1, r6
     9bc:	7011      	strb	r1, [r2, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     9be:	2280      	movs	r2, #128	; 0x80
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     9c0:	0019      	movs	r1, r3


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     9c2:	0192      	lsls	r2, r2, #6
     9c4:	605a      	str	r2, [r3, #4]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     9c6:	314e      	adds	r1, #78	; 0x4e
     9c8:	780a      	ldrb	r2, [r1, #0]
     9ca:	43a2      	bics	r2, r4
     9cc:	700a      	strb	r2, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     9ce:	2280      	movs	r2, #128	; 0x80
     9d0:	01d2      	lsls	r2, r2, #7
     9d2:	609a      	str	r2, [r3, #8]
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     9d4:	619a      	str	r2, [r3, #24]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     9d6:	001a      	movs	r2, r3
     9d8:	3255      	adds	r2, #85	; 0x55
     9da:	7811      	ldrb	r1, [r2, #0]
     9dc:	43a1      	bics	r1, r4
     9de:	7011      	strb	r1, [r2, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     9e0:	2180      	movs	r1, #128	; 0x80
     9e2:	0389      	lsls	r1, r1, #14
     9e4:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
}


inline static void pinCfg(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].reg = p.cfg;
     9e6:	2140      	movs	r1, #64	; 0x40
     9e8:	7011      	strb	r1, [r2, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     9ea:	7802      	ldrb	r2, [r0, #0]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     9ec:	0019      	movs	r1, r3
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     9ee:	43a2      	bics	r2, r4
     9f0:	7002      	strb	r2, [r0, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     9f2:	2280      	movs	r2, #128	; 0x80
     9f4:	03d2      	lsls	r2, r2, #15
     9f6:	609a      	str	r2, [r3, #8]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     9f8:	313b      	adds	r1, #59	; 0x3b
     9fa:	780a      	ldrb	r2, [r1, #0]
     9fc:	43ba      	bics	r2, r7
     9fe:	4332      	orrs	r2, r6
     a00:	700a      	strb	r2, [r1, #0]
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     a02:	7802      	ldrb	r2, [r0, #0]
     a04:	4322      	orrs	r2, r4
     a06:	7002      	strb	r2, [r0, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     a08:	001a      	movs	r2, r3
     a0a:	3257      	adds	r2, #87	; 0x57
     a0c:	7810      	ldrb	r0, [r2, #0]
     a0e:	43a0      	bics	r0, r4
     a10:	7010      	strb	r0, [r2, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     a12:	7810      	ldrb	r0, [r2, #0]
     a14:	4330      	orrs	r0, r6
     a16:	7010      	strb	r0, [r2, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     a18:	2080      	movs	r0, #128	; 0x80
     a1a:	0400      	lsls	r0, r0, #16
     a1c:	6058      	str	r0, [r3, #4]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     a1e:	4660      	mov	r0, ip
     a20:	780b      	ldrb	r3, [r1, #0]
     a22:	3011      	adds	r0, #17
     a24:	403b      	ands	r3, r7
     a26:	4303      	orrs	r3, r0
     a28:	700b      	strb	r3, [r1, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     a2a:	7813      	ldrb	r3, [r2, #0]
    pinMux(TxPo);
    pinIn(RxPo);
    pinMux(RxPo);


    sercomClockEnable(SPI2, 3, 4);
     a2c:	4f29      	ldr	r7, [pc, #164]	; (ad4 <init+0x3c8>)
     a2e:	4323      	orrs	r3, r4
     a30:	7013      	strb	r3, [r2, #0]
     a32:	0030      	movs	r0, r6
     a34:	2204      	movs	r2, #4
     a36:	2103      	movs	r1, #3
     a38:	47b8      	blx	r7
    sercomSpiMasterInit(SPI2, 1, 3, 0, 0, 45403);
     a3a:	235b      	movs	r3, #91	; 0x5b
     a3c:	0021      	movs	r1, r4
     a3e:	9301      	str	r3, [sp, #4]
     a40:	0030      	movs	r0, r6
     a42:	002b      	movs	r3, r5
     a44:	4e24      	ldr	r6, [pc, #144]	; (ad8 <init+0x3cc>)
     a46:	9500      	str	r5, [sp, #0]
     a48:	2203      	movs	r2, #3
     a4a:	47b0      	blx	r6


    sercomClockEnable(SPI0, 3, 4);
     a4c:	0028      	movs	r0, r5
     a4e:	2204      	movs	r2, #4
     a50:	2103      	movs	r1, #3
     a52:	47b8      	blx	r7
    sercomSpiMasterInit(SPI0, 3, 0, 0, 0, 0x00);
     a54:	002b      	movs	r3, r5
     a56:	002a      	movs	r2, r5
     a58:	0028      	movs	r0, r5
     a5a:	9501      	str	r5, [sp, #4]
     a5c:	9500      	str	r5, [sp, #0]
     a5e:	2103      	movs	r1, #3
     a60:	47b0      	blx	r6


    sercomClockEnable(SPI1, 3, 4);
     a62:	0020      	movs	r0, r4
     a64:	2204      	movs	r2, #4
     a66:	2103      	movs	r1, #3
     a68:	47b8      	blx	r7
    sercomSpiMasterInit(SPI1, 3, 0, 0, 0, 0x00);
     a6a:	002b      	movs	r3, r5
     a6c:	002a      	movs	r2, r5
     a6e:	0020      	movs	r0, r4
     a70:	9501      	str	r5, [sp, #4]
     a72:	9500      	str	r5, [sp, #0]
     a74:	2103      	movs	r1, #3
     a76:	47b0      	blx	r6


    sercomClockEnable(USART3, 4, 8);
     a78:	2208      	movs	r2, #8
     a7a:	2104      	movs	r1, #4
     a7c:	2003      	movs	r0, #3
     a7e:	47b8      	blx	r7
    sercomUartInit(USART3,1,0,19200);
     a80:	2396      	movs	r3, #150	; 0x96
     a82:	0021      	movs	r1, r4
     a84:	002a      	movs	r2, r5
     a86:	2003      	movs	r0, #3
     a88:	01db      	lsls	r3, r3, #7
     a8a:	4c14      	ldr	r4, [pc, #80]	; (adc <init+0x3d0>)
     a8c:	47a0      	blx	r4


    TC4Init();
     a8e:	4b14      	ldr	r3, [pc, #80]	; (ae0 <init+0x3d4>)
     a90:	4798      	blx	r3
    TC5Init();
     a92:	4b14      	ldr	r3, [pc, #80]	; (ae4 <init+0x3d8>)
     a94:	4798      	blx	r3
}
     a96:	b005      	add	sp, #20
     a98:	bdf0      	pop	{r4, r5, r6, r7, pc}
     a9a:	46c0      	nop			; (mov r8, r8)
     a9c:	41004000 	.word	0x41004000
     aa0:	40000400 	.word	0x40000400
     aa4:	000001d5 	.word	0x000001d5
     aa8:	00000e55 	.word	0x00000e55
     aac:	00000edd 	.word	0x00000edd
     ab0:	00000fdd 	.word	0x00000fdd
     ab4:	00000bf9 	.word	0x00000bf9
     ab8:	e000e100 	.word	0xe000e100
     abc:	ff00ffff 	.word	0xff00ffff
     ac0:	41004400 	.word	0x41004400
     ac4:	41004488 	.word	0x41004488
     ac8:	20000658 	.word	0x20000658
     acc:	41004435 	.word	0x41004435
     ad0:	41004439 	.word	0x41004439
     ad4:	00002731 	.word	0x00002731
     ad8:	00002795 	.word	0x00002795
     adc:	000027f9 	.word	0x000027f9
     ae0:	000010ad 	.word	0x000010ad
     ae4:	00001115 	.word	0x00001115

00000ae8 <main>:




int main(void) {
     ae8:	b510      	push	{r4, lr}

    init();
     aea:	4b0e      	ldr	r3, [pc, #56]	; (b24 <main+0x3c>)
     aec:	4798      	blx	r3

    initMS5803Barometer();
     aee:	4b0e      	ldr	r3, [pc, #56]	; (b28 <main+0x40>)
     af0:	4798      	blx	r3
    IMUinit();
     af2:	4b0e      	ldr	r3, [pc, #56]	; (b2c <main+0x44>)
     af4:	4798      	blx	r3

    computeKalmanGains();
     af6:	4b0e      	ldr	r3, [pc, #56]	; (b30 <main+0x48>)
     af8:	4798      	blx	r3


    sampleTick();
     afa:	4c0e      	ldr	r4, [pc, #56]	; (b34 <main+0x4c>)
     afc:	47a0      	blx	r4

    beep(400);
     afe:	20c8      	movs	r0, #200	; 0xc8
     b00:	4b0d      	ldr	r3, [pc, #52]	; (b38 <main+0x50>)
     b02:	0040      	lsls	r0, r0, #1
     b04:	4798      	blx	r3


    startupTick = millis();
     b06:	4b0d      	ldr	r3, [pc, #52]	; (b3c <main+0x54>)
     b08:	4798      	blx	r3
     b0a:	4b0d      	ldr	r3, [pc, #52]	; (b40 <main+0x58>)
     b0c:	6018      	str	r0, [r3, #0]


    while (1) {


        if (takeSample()) {
     b0e:	4b0d      	ldr	r3, [pc, #52]	; (b44 <main+0x5c>)
     b10:	4798      	blx	r3
     b12:	2800      	cmp	r0, #0
     b14:	d0fb      	beq.n	b0e <main+0x26>
            sampleTick();
     b16:	47a0      	blx	r4
            flight();
     b18:	4b0b      	ldr	r3, [pc, #44]	; (b48 <main+0x60>)
     b1a:	4798      	blx	r3
            computeKalmanStates();
     b1c:	4b0b      	ldr	r3, [pc, #44]	; (b4c <main+0x64>)
     b1e:	4798      	blx	r3
     b20:	e7f5      	b.n	b0e <main+0x26>
     b22:	46c0      	nop			; (mov r8, r8)
     b24:	0000070d 	.word	0x0000070d
     b28:	000006a1 	.word	0x000006a1
     b2c:	00000b51 	.word	0x00000b51
     b30:	000014d1 	.word	0x000014d1
     b34:	000023dd 	.word	0x000023dd
     b38:	00000d9d 	.word	0x00000d9d
     b3c:	00001079 	.word	0x00001079
     b40:	20000504 	.word	0x20000504
     b44:	000023c5 	.word	0x000023c5
     b48:	0000117d 	.word	0x0000117d
     b4c:	00001d6d 	.word	0x00001d6d

00000b50 <IMUinit>:
#include <util.h>
#include <boardDefines.h>


void IMUinit() {
     b50:	b570      	push	{r4, r5, r6, lr}
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     b52:	4c08      	ldr	r4, [pc, #32]	; (b74 <IMUinit+0x24>)
     b54:	2580      	movs	r5, #128	; 0x80
     b56:	0023      	movs	r3, r4
     b58:	00ed      	lsls	r5, r5, #3
     b5a:	3394      	adds	r3, #148	; 0x94
     b5c:	601d      	str	r5, [r3, #0]

    uint8_t dummy_Tx = 0xFF;
    uint8_t dummy_rx;

    pinLow(cs_accel);
    dummy_rx = spiDataTransfer(SPI0, BMI_ACCEL_PMU_RANGE);
     b5e:	4e06      	ldr	r6, [pc, #24]	; (b78 <IMUinit+0x28>)
     b60:	210f      	movs	r1, #15
     b62:	2000      	movs	r0, #0
     b64:	47b0      	blx	r6
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     b66:	3498      	adds	r4, #152	; 0x98
    dummy_rx = spiDataTransfer(SPI0, BMI_ACCEL_16G_RANGE);
     b68:	210c      	movs	r1, #12
     b6a:	2000      	movs	r0, #0
     b6c:	47b0      	blx	r6
     b6e:	6025      	str	r5, [r4, #0]
    pinHigh(cs_accel);

}
     b70:	bd70      	pop	{r4, r5, r6, pc}
     b72:	46c0      	nop			; (mov r8, r8)
     b74:	41004400 	.word	0x41004400
     b78:	00002841 	.word	0x00002841

00000b7c <USARTconnectionAvaliable>:

bool USARTconnectionAvaliable() {
     b7c:	b510      	push	{r4, lr}

    if (sercom(USART3)->SPI.INTFLAG.bit.RXC == 1) {
     b7e:	4b09      	ldr	r3, [pc, #36]	; (ba4 <USARTconnectionAvaliable+0x28>)
     b80:	7e1c      	ldrb	r4, [r3, #24]
     b82:	0764      	lsls	r4, r4, #29
     b84:	0fe4      	lsrs	r4, r4, #31
     b86:	2c01      	cmp	r4, #1
     b88:	d001      	beq.n	b8e <USARTconnectionAvaliable+0x12>
            return true;
        } else {
            return false;
        }
    }
    return false;
     b8a:	2000      	movs	r0, #0
     b8c:	e009      	b.n	ba2 <USARTconnectionAvaliable+0x26>
}

bool USARTconnectionAvaliable() {

    if (sercom(USART3)->SPI.INTFLAG.bit.RXC == 1) {
        u8_t connectAttempt = usartDataIn(USART3);
     b8e:	2003      	movs	r0, #3
     b90:	4b05      	ldr	r3, [pc, #20]	; (ba8 <USARTconnectionAvaliable+0x2c>)
     b92:	4798      	blx	r3
     b94:	1e01      	subs	r1, r0, #0
        if (connectAttempt == 0x48) {
     b96:	2948      	cmp	r1, #72	; 0x48
     b98:	d1f7      	bne.n	b8a <USARTconnectionAvaliable+0xe>
            usartDataOut(USART3, 'H');
     b9a:	2003      	movs	r0, #3
     b9c:	4b03      	ldr	r3, [pc, #12]	; (bac <USARTconnectionAvaliable+0x30>)
     b9e:	4798      	blx	r3
            return true;
     ba0:	0020      	movs	r0, r4
        } else {
            return false;
        }
    }
    return false;
}
     ba2:	bd10      	pop	{r4, pc}
     ba4:	42001400 	.word	0x42001400
     ba8:	00002871 	.word	0x00002871
     bac:	00002859 	.word	0x00002859

00000bb0 <sendTheasePagesToComputer>:

void sendTheasePagesToComputer(u32_t firstPage, u32_t lastPage) {
     bb0:	b5f0      	push	{r4, r5, r6, r7, lr}
    for (u16_t page = 0; page <= pagesToSend; ++page) {

        u8_t data[256];
        AT25SEreadPage(pageToReadAddress , data);

        for (u16_t dataByte = 0; dataByte < 256; ++dataByte) {
     bb2:	2780      	movs	r7, #128	; 0x80
        }
    }
    return false;
}

void sendTheasePagesToComputer(u32_t firstPage, u32_t lastPage) {
     bb4:	0005      	movs	r5, r0

    u16_t pagesToSend = (lastPage - firstPage) >> 8;

    u32_t pageToReadAddress = firstPage;

    for (u16_t page = 0; page <= pagesToSend; ++page) {
     bb6:	2400      	movs	r4, #0
    return false;
}

void sendTheasePagesToComputer(u32_t firstPage, u32_t lastPage) {

    u16_t pagesToSend = (lastPage - firstPage) >> 8;
     bb8:	1a09      	subs	r1, r1, r0
     bba:	0a09      	lsrs	r1, r1, #8
        }
    }
    return false;
}

void sendTheasePagesToComputer(u32_t firstPage, u32_t lastPage) {
     bbc:	b0c3      	sub	sp, #268	; 0x10c

    u16_t pagesToSend = (lastPage - firstPage) >> 8;
     bbe:	b28b      	uxth	r3, r1
     bc0:	9301      	str	r3, [sp, #4]
    for (u16_t page = 0; page <= pagesToSend; ++page) {

        u8_t data[256];
        AT25SEreadPage(pageToReadAddress , data);

        for (u16_t dataByte = 0; dataByte < 256; ++dataByte) {
     bc2:	007f      	lsls	r7, r7, #1
    u32_t pageToReadAddress = firstPage;

    for (u16_t page = 0; page <= pagesToSend; ++page) {

        u8_t data[256];
        AT25SEreadPage(pageToReadAddress , data);
     bc4:	a902      	add	r1, sp, #8
     bc6:	0028      	movs	r0, r5
     bc8:	4b09      	ldr	r3, [pc, #36]	; (bf0 <sendTheasePagesToComputer+0x40>)
     bca:	4798      	blx	r3
     bcc:	2600      	movs	r6, #0

        for (u16_t dataByte = 0; dataByte < 256; ++dataByte) {
            usartDataOut(USART3, data[dataByte]);
     bce:	ab02      	add	r3, sp, #8
     bd0:	5d99      	ldrb	r1, [r3, r6]
     bd2:	2003      	movs	r0, #3
     bd4:	4b07      	ldr	r3, [pc, #28]	; (bf4 <sendTheasePagesToComputer+0x44>)
     bd6:	3601      	adds	r6, #1
     bd8:	4798      	blx	r3
    for (u16_t page = 0; page <= pagesToSend; ++page) {

        u8_t data[256];
        AT25SEreadPage(pageToReadAddress , data);

        for (u16_t dataByte = 0; dataByte < 256; ++dataByte) {
     bda:	42be      	cmp	r6, r7
     bdc:	d1f7      	bne.n	bce <sendTheasePagesToComputer+0x1e>

    u16_t pagesToSend = (lastPage - firstPage) >> 8;

    u32_t pageToReadAddress = firstPage;

    for (u16_t page = 0; page <= pagesToSend; ++page) {
     bde:	3401      	adds	r4, #1
     be0:	9b01      	ldr	r3, [sp, #4]

        for (u16_t dataByte = 0; dataByte < 256; ++dataByte) {
            usartDataOut(USART3, data[dataByte]);
        }

        pageToReadAddress = pageToReadAddress + 0x100;
     be2:	3501      	adds	r5, #1

    u16_t pagesToSend = (lastPage - firstPage) >> 8;

    u32_t pageToReadAddress = firstPage;

    for (u16_t page = 0; page <= pagesToSend; ++page) {
     be4:	b2a4      	uxth	r4, r4

        for (u16_t dataByte = 0; dataByte < 256; ++dataByte) {
            usartDataOut(USART3, data[dataByte]);
        }

        pageToReadAddress = pageToReadAddress + 0x100;
     be6:	35ff      	adds	r5, #255	; 0xff

    u16_t pagesToSend = (lastPage - firstPage) >> 8;

    u32_t pageToReadAddress = firstPage;

    for (u16_t page = 0; page <= pagesToSend; ++page) {
     be8:	42a3      	cmp	r3, r4
     bea:	d2eb      	bcs.n	bc4 <sendTheasePagesToComputer+0x14>
            usartDataOut(USART3, data[dataByte]);
        }

        pageToReadAddress = pageToReadAddress + 0x100;
    }
}
     bec:	b043      	add	sp, #268	; 0x10c
     bee:	bdf0      	pop	{r4, r5, r6, r7, pc}
     bf0:	000003b1 	.word	0x000003b1
     bf4:	00002859 	.word	0x00002859

00000bf8 <adcInit>:
#include <util.h>

void adcInit() {

    // set up clock
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;
     bf8:	2180      	movs	r1, #128	; 0x80


#include <util.h>

void adcInit() {
     bfa:	b510      	push	{r4, lr}

    // set up clock
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;
     bfc:	4a10      	ldr	r2, [pc, #64]	; (c40 <adcInit+0x48>)
     bfe:	0249      	lsls	r1, r1, #9
     c00:	6a13      	ldr	r3, [r2, #32]
    // divide prescaler by 512 (93.75KHz), max adc freq is 2.1MHz
    ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |
                     ADC_CTRLB_RESSEL_12BIT;

    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
     c02:	4810      	ldr	r0, [pc, #64]	; (c44 <adcInit+0x4c>)
#include <util.h>

void adcInit() {

    // set up clock
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;
     c04:	430b      	orrs	r3, r1
     c06:	6213      	str	r3, [r2, #32]

    // divide prescaler by 512 (93.75KHz), max adc freq is 2.1MHz
    ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |
     c08:	23e0      	movs	r3, #224	; 0xe0
     c0a:	490f      	ldr	r1, [pc, #60]	; (c48 <adcInit+0x50>)
                     ADC_CTRLB_RESSEL_12BIT;

    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
     c0c:	4a0f      	ldr	r2, [pc, #60]	; (c4c <adcInit+0x54>)

    // set up clock
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;

    // divide prescaler by 512 (93.75KHz), max adc freq is 2.1MHz
    ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |
     c0e:	00db      	lsls	r3, r3, #3
     c10:	808b      	strh	r3, [r1, #4]
                     ADC_CTRLB_RESSEL_12BIT;

    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
     c12:	8050      	strh	r0, [r2, #2]
                        GCLK_CLKCTRL_GEN(0) |
                        GCLK_CLKCTRL_ID(ADC_GCLK_ID);

    ADC->CALIB.reg =
        ADC_CALIB_BIAS_CAL(
     c14:	4a0e      	ldr	r2, [pc, #56]	; (c50 <adcInit+0x58>)
    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(0) |
                        GCLK_CLKCTRL_ID(ADC_GCLK_ID);

    ADC->CALIB.reg =
     c16:	6812      	ldr	r2, [r2, #0]
     c18:	0150      	lsls	r0, r2, #5
     c1a:	4018      	ands	r0, r3
     c1c:	4b0d      	ldr	r3, [pc, #52]	; (c54 <adcInit+0x5c>)
     c1e:	0154      	lsls	r4, r2, #5
     c20:	681a      	ldr	r2, [r3, #0]
     c22:	0ed3      	lsrs	r3, r2, #27
     c24:	4323      	orrs	r3, r4
     c26:	b2da      	uxtb	r2, r3
     c28:	0003      	movs	r3, r0
     c2a:	4313      	orrs	r3, r2
     c2c:	850b      	strh	r3, [r1, #40]	; 0x28
        ) |
        ADC_CALIB_LINEARITY_CAL(
            (*(uint64_t *)ADC_FUSES_LINEARITY_0_ADDR >> ADC_FUSES_LINEARITY_0_Pos)
        );

    ADC->REFCTRL.reg = ADC_REFCTRL_REFSEL_INTVCC1;
     c2e:	2302      	movs	r3, #2
     c30:	704b      	strb	r3, [r1, #1]

    ADC->CTRLA.reg = ADC_CTRLA_ENABLE; // enable
     c32:	700b      	strb	r3, [r1, #0]
    while(ADC->STATUS.reg & ADC_STATUS_SYNCBUSY);
     c34:	7e4b      	ldrb	r3, [r1, #25]
     c36:	b25b      	sxtb	r3, r3
     c38:	2b00      	cmp	r3, #0
     c3a:	dbfb      	blt.n	c34 <adcInit+0x3c>
}
     c3c:	bd10      	pop	{r4, pc}
     c3e:	46c0      	nop			; (mov r8, r8)
     c40:	40000400 	.word	0x40000400
     c44:	0000401e 	.word	0x0000401e
     c48:	42004000 	.word	0x42004000
     c4c:	40000c00 	.word	0x40000c00
     c50:	00806024 	.word	0x00806024
     c54:	00806020 	.word	0x00806020

00000c58 <adcSample>:



u16_t adcSample() {
    ADC->SWTRIG.reg = ADC_SWTRIG_START;
     c58:	2202      	movs	r2, #2
     c5a:	4b05      	ldr	r3, [pc, #20]	; (c70 <adcSample+0x18>)
     c5c:	731a      	strb	r2, [r3, #12]
    while(!(ADC->INTFLAG.reg & ADC_INTFLAG_RESRDY)); // wait until result is ready
     c5e:	3a01      	subs	r2, #1
     c60:	7e19      	ldrb	r1, [r3, #24]
     c62:	4211      	tst	r1, r2
     c64:	d0fc      	beq.n	c60 <adcSample+0x8>
    return ADC->RESULT.reg;
     c66:	4b02      	ldr	r3, [pc, #8]	; (c70 <adcSample+0x18>)
     c68:	8b58      	ldrh	r0, [r3, #26]
     c6a:	b280      	uxth	r0, r0
}
     c6c:	4770      	bx	lr
     c6e:	46c0      	nop			; (mov r8, r8)
     c70:	42004000 	.word	0x42004000

00000c74 <adc_read>:


u16_t adc_read(Pin p) {
     c74:	b537      	push	{r0, r1, r2, r4, r5, lr}
    u16_t buad;

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
     c76:	2501      	movs	r5, #1
     c78:	0c02      	lsrs	r2, r0, #16
     c7a:	b2d4      	uxtb	r4, r2
     c7c:	9000      	str	r0, [sp, #0]
     c7e:	0e00      	lsrs	r0, r0, #24
     c80:	9101      	str	r1, [sp, #4]
     c82:	0842      	lsrs	r2, r0, #1
     c84:	01e3      	lsls	r3, r4, #7
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     c86:	4911      	ldr	r1, [pc, #68]	; (ccc <adc_read+0x58>)
     c88:	18d2      	adds	r2, r2, r3
     c8a:	1852      	adds	r2, r2, r1
    u16_t buad;

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
     c8c:	4228      	tst	r0, r5
     c8e:	d005      	beq.n	c9c <adc_read+0x28>
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     c90:	210f      	movs	r1, #15
     c92:	7814      	ldrb	r4, [r2, #0]
     c94:	4021      	ands	r1, r4
     c96:	2410      	movs	r4, #16
     c98:	4321      	orrs	r1, r4
     c9a:	e003      	b.n	ca4 <adc_read+0x30>
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     c9c:	240f      	movs	r4, #15
     c9e:	7811      	ldrb	r1, [r2, #0]
     ca0:	43a1      	bics	r1, r4
     ca2:	4329      	orrs	r1, r5
     ca4:	7011      	strb	r1, [r2, #0]
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     ca6:	2101      	movs	r1, #1
     ca8:	4a09      	ldr	r2, [pc, #36]	; (cd0 <adc_read+0x5c>)
     caa:	18c3      	adds	r3, r0, r3
     cac:	189b      	adds	r3, r3, r2
     cae:	781a      	ldrb	r2, [r3, #0]
     cb0:	430a      	orrs	r2, r1
     cb2:	701a      	strb	r2, [r3, #0]
    // switch pin mux to analog in
    pinAnalog(p);

    ADC->INPUTCTRL.reg = (ADC_INPUTCTRL_MUXPOS(p.chan) // select from proper pin
                          | ADC_INPUTCTRL_MUXNEG_GND // 0 = gnd
                          | ADC_INPUTCTRL_GAIN_1X);
     cb4:	466b      	mov	r3, sp
     cb6:	791a      	ldrb	r2, [r3, #4]
     cb8:	231f      	movs	r3, #31
     cba:	4013      	ands	r3, r2
     cbc:	22c0      	movs	r2, #192	; 0xc0
     cbe:	0152      	lsls	r2, r2, #5
     cc0:	4313      	orrs	r3, r2

u16_t adc_read(Pin p) {
    // switch pin mux to analog in
    pinAnalog(p);

    ADC->INPUTCTRL.reg = (ADC_INPUTCTRL_MUXPOS(p.chan) // select from proper pin
     cc2:	4a04      	ldr	r2, [pc, #16]	; (cd4 <adc_read+0x60>)
     cc4:	6113      	str	r3, [r2, #16]
                          | ADC_INPUTCTRL_MUXNEG_GND // 0 = gnd
                          | ADC_INPUTCTRL_GAIN_1X);

    return adcSample();
     cc6:	4b04      	ldr	r3, [pc, #16]	; (cd8 <adc_read+0x64>)
     cc8:	4798      	blx	r3
     cca:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
     ccc:	41004430 	.word	0x41004430
     cd0:	41004440 	.word	0x41004440
     cd4:	42004000 	.word	0x42004000
     cd8:	00000c59 	.word	0x00000c59

00000cdc <byteOut>:





void byteOut(Pin SCK_PIN, Pin MOSI_PIN, uint8_t byte) {
     cdc:	0c01      	lsrs	r1, r0, #16
     cde:	0c13      	lsrs	r3, r2, #16
     ce0:	b5f0      	push	{r4, r5, r6, r7, lr}
     ce2:	b2cd      	uxtb	r5, r1
     ce4:	b2d9      	uxtb	r1, r3
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     ce6:	2301      	movs	r3, #1
     ce8:	001e      	movs	r6, r3
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     cea:	0e12      	lsrs	r2, r2, #24
     cec:	4093      	lsls	r3, r2
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     cee:	0e00      	lsrs	r0, r0, #24
     cf0:	4086      	lsls	r6, r0
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     cf2:	001a      	movs	r2, r3
     cf4:	2308      	movs	r3, #8
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     cf6:	0030      	movs	r0, r6
     cf8:	4e11      	ldr	r6, [pc, #68]	; (d40 <byteOut+0x64>)
     cfa:	01c9      	lsls	r1, r1, #7
     cfc:	b087      	sub	sp, #28
     cfe:	198f      	adds	r7, r1, r6
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     d00:	4e10      	ldr	r6, [pc, #64]	; (d44 <byteOut+0x68>)
     d02:	ac0c      	add	r4, sp, #48	; 0x30
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     d04:	01ed      	lsls	r5, r5, #7
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     d06:	19ae      	adds	r6, r5, r6
     d08:	7824      	ldrb	r4, [r4, #0]
     d0a:	9601      	str	r6, [sp, #4]
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     d0c:	4e0c      	ldr	r6, [pc, #48]	; (d40 <byteOut+0x64>)
     d0e:	46b4      	mov	ip, r6
     d10:	44ac      	add	ip, r5
     d12:	4666      	mov	r6, ip
     d14:	6030      	str	r0, [r6, #0]

	for (uint8_t i = 0; i<8; ++i) {
		pinLow(SCK_PIN);
		if (byte & 0x80) {
     d16:	b266      	sxtb	r6, r4
     d18:	2e00      	cmp	r6, #0
     d1a:	da05      	bge.n	d28 <byteOut+0x4c>
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     d1c:	4e09      	ldr	r6, [pc, #36]	; (d44 <byteOut+0x68>)
     d1e:	46b4      	mov	ip, r6
     d20:	448c      	add	ip, r1
     d22:	4666      	mov	r6, ip
     d24:	6032      	str	r2, [r6, #0]
     d26:	e000      	b.n	d2a <byteOut+0x4e>
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     d28:	603a      	str	r2, [r7, #0]
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     d2a:	9e01      	ldr	r6, [sp, #4]
     d2c:	3b01      	subs	r3, #1
			pinHigh(MOSI_PIN);
			} else {
			pinLow(MOSI_PIN);
		}
		pinHigh(SCK_PIN);
		byte <<= 1;
     d2e:	0064      	lsls	r4, r4, #1
     d30:	b2db      	uxtb	r3, r3
     d32:	6030      	str	r0, [r6, #0]
     d34:	b2e4      	uxtb	r4, r4



void byteOut(Pin SCK_PIN, Pin MOSI_PIN, uint8_t byte) {

	for (uint8_t i = 0; i<8; ++i) {
     d36:	2b00      	cmp	r3, #0
     d38:	d1e8      	bne.n	d0c <byteOut+0x30>
			pinLow(MOSI_PIN);
		}
		pinHigh(SCK_PIN);
		byte <<= 1;
	}
}
     d3a:	b007      	add	sp, #28
     d3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     d3e:	46c0      	nop			; (mov r8, r8)
     d40:	41004414 	.word	0x41004414
     d44:	41004418 	.word	0x41004418

00000d48 <byteIn>:

uint8_t byteIn(Pin SCK_PIN, Pin MISO_PIN) {
     d48:	b5f0      	push	{r4, r5, r6, r7, lr}
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     d4a:	2501      	movs	r5, #1
     d4c:	b085      	sub	sp, #20
     d4e:	9103      	str	r1, [sp, #12]
     d50:	0011      	movs	r1, r2
     d52:	0c06      	lsrs	r6, r0, #16
     d54:	9301      	str	r3, [sp, #4]
     d56:	b2f3      	uxtb	r3, r6
     d58:	002e      	movs	r6, r5
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     d5a:	0e09      	lsrs	r1, r1, #24
     d5c:	0c14      	lsrs	r4, r2, #16
     d5e:	9002      	str	r0, [sp, #8]
     d60:	9200      	str	r2, [sp, #0]
     d62:	408d      	lsls	r5, r1
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     d64:	0e02      	lsrs	r2, r0, #24
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     d66:	2108      	movs	r1, #8
	uint8_t byte = 0x00;
     d68:	2000      	movs	r0, #0
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     d6a:	4096      	lsls	r6, r2
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     d6c:	b2e2      	uxtb	r2, r4
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     d6e:	4c0a      	ldr	r4, [pc, #40]	; (d98 <byteIn+0x50>)
     d70:	01db      	lsls	r3, r3, #7
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     d72:	01d2      	lsls	r2, r2, #7
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     d74:	191b      	adds	r3, r3, r4
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     d76:	1912      	adds	r2, r2, r4
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     d78:	615e      	str	r6, [r3, #20]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static bool pinRead(Pin p) {
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
     d7a:	6a14      	ldr	r4, [r2, #32]

	for (uint8_t i = 0; i<8; ++i) {
		pinLow(SCK_PIN);
		byte = (byte << 1 ) | pinRead(MISO_PIN);
     d7c:	0040      	lsls	r0, r0, #1
     d7e:	402c      	ands	r4, r5
     d80:	1e67      	subs	r7, r4, #1
     d82:	41bc      	sbcs	r4, r7
     d84:	3901      	subs	r1, #1
     d86:	4304      	orrs	r4, r0
     d88:	b2c9      	uxtb	r1, r1
     d8a:	b2e0      	uxtb	r0, r4
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     d8c:	619e      	str	r6, [r3, #24]
}

uint8_t byteIn(Pin SCK_PIN, Pin MISO_PIN) {
	uint8_t byte = 0x00;

	for (uint8_t i = 0; i<8; ++i) {
     d8e:	2900      	cmp	r1, #0
     d90:	d1f2      	bne.n	d78 <byteIn+0x30>
		pinLow(SCK_PIN);
		byte = (byte << 1 ) | pinRead(MISO_PIN);
		pinHigh(SCK_PIN);
	}
	return byte;
     d92:	b005      	add	sp, #20
     d94:	bdf0      	pop	{r4, r5, r6, r7, pc}
     d96:	46c0      	nop			; (mov r8, r8)
     d98:	41004400 	.word	0x41004400

00000d9c <beep>:
#include <util.h>
#include <boardDefines.h>


void beep(u16_t toggles) {
     d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
}


inline static void pinToggle(Pin p) {
    PORT->Group[p.group].OUTTGL.reg = (1<<p.pin);
     d9e:	2380      	movs	r3, #128	; 0x80
     da0:	2780      	movs	r7, #128	; 0x80
     da2:	0006      	movs	r6, r0

    pinToggle(LedPin);
    for (u16_t buzz = 0; buzz < toggles; ++buzz) {
     da4:	2500      	movs	r5, #0
     da6:	4c0a      	ldr	r4, [pc, #40]	; (dd0 <beep+0x34>)
     da8:	035b      	lsls	r3, r3, #13
     daa:	61e3      	str	r3, [r4, #28]
     dac:	03bf      	lsls	r7, r7, #14
     dae:	42b5      	cmp	r5, r6
     db0:	d006      	beq.n	dc0 <beep+0x24>
     db2:	61e7      	str	r7, [r4, #28]
        pinToggle(buzzerPin);
        delay_us(122);
     db4:	207a      	movs	r0, #122	; 0x7a
     db6:	4b07      	ldr	r3, [pc, #28]	; (dd4 <beep+0x38>)


void beep(u16_t toggles) {

    pinToggle(LedPin);
    for (u16_t buzz = 0; buzz < toggles; ++buzz) {
     db8:	3501      	adds	r5, #1
        pinToggle(buzzerPin);
        delay_us(122);
     dba:	4798      	blx	r3


void beep(u16_t toggles) {

    pinToggle(LedPin);
    for (u16_t buzz = 0; buzz < toggles; ++buzz) {
     dbc:	b2ad      	uxth	r5, r5
     dbe:	e7f6      	b.n	dae <beep+0x12>
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     dc0:	2380      	movs	r3, #128	; 0x80
     dc2:	039b      	lsls	r3, r3, #14
     dc4:	6163      	str	r3, [r4, #20]
}


inline static void pinToggle(Pin p) {
    PORT->Group[p.group].OUTTGL.reg = (1<<p.pin);
     dc6:	2380      	movs	r3, #128	; 0x80
     dc8:	035b      	lsls	r3, r3, #13
     dca:	61e3      	str	r3, [r4, #28]
        pinToggle(buzzerPin);
        delay_us(122);
    }
    pinLow(buzzerPin);
    pinToggle(LedPin);
}
     dcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     dce:	46c0      	nop			; (mov r8, r8)
     dd0:	41004400 	.word	0x41004400
     dd4:	00000ffd 	.word	0x00000ffd

00000dd8 <startupJingle>:

void startupJingle(){
     dd8:	b570      	push	{r4, r5, r6, lr}
    beep(300);
     dda:	2696      	movs	r6, #150	; 0x96
     ddc:	0076      	lsls	r6, r6, #1
     dde:	4d0a      	ldr	r5, [pc, #40]	; (e08 <startupJingle+0x30>)
     de0:	0030      	movs	r0, r6
     de2:	47a8      	blx	r5
    delay_ms(80);
     de4:	4c09      	ldr	r4, [pc, #36]	; (e0c <startupJingle+0x34>)
     de6:	2050      	movs	r0, #80	; 0x50
     de8:	47a0      	blx	r4
    beep(300);
     dea:	0030      	movs	r0, r6
     dec:	47a8      	blx	r5
    delay_ms(250);
     dee:	20fa      	movs	r0, #250	; 0xfa
     df0:	47a0      	blx	r4
    beep(300);
     df2:	0030      	movs	r0, r6
     df4:	47a8      	blx	r5
    delay_ms(80);
     df6:	2050      	movs	r0, #80	; 0x50
     df8:	47a0      	blx	r4
    beep(300);
     dfa:	0030      	movs	r0, r6
     dfc:	47a8      	blx	r5
    delay_ms(500);
     dfe:	20fa      	movs	r0, #250	; 0xfa
     e00:	0040      	lsls	r0, r0, #1
     e02:	47a0      	blx	r4
}
     e04:	bd70      	pop	{r4, r5, r6, pc}
     e06:	46c0      	nop			; (mov r8, r8)
     e08:	00000d9d 	.word	0x00000d9d
     e0c:	0000102d 	.word	0x0000102d

00000e10 <unpluggedJingle>:

void unpluggedJingle(){
     e10:	b570      	push	{r4, r5, r6, lr}
            delay_ms(80);
            beep(300);
     e12:	2696      	movs	r6, #150	; 0x96
    beep(300);
    delay_ms(500);
}

void unpluggedJingle(){
            delay_ms(80);
     e14:	4c0c      	ldr	r4, [pc, #48]	; (e48 <unpluggedJingle+0x38>)
            beep(300);
     e16:	0076      	lsls	r6, r6, #1
    beep(300);
    delay_ms(500);
}

void unpluggedJingle(){
            delay_ms(80);
     e18:	2050      	movs	r0, #80	; 0x50
     e1a:	47a0      	blx	r4
            beep(300);
     e1c:	4d0b      	ldr	r5, [pc, #44]	; (e4c <unpluggedJingle+0x3c>)
     e1e:	0030      	movs	r0, r6
     e20:	47a8      	blx	r5
            delay_ms(80);
     e22:	2050      	movs	r0, #80	; 0x50
     e24:	47a0      	blx	r4
            beep(300);
     e26:	0030      	movs	r0, r6
     e28:	47a8      	blx	r5
            delay_ms(80);
     e2a:	2050      	movs	r0, #80	; 0x50
     e2c:	47a0      	blx	r4
            beep(300);
     e2e:	0030      	movs	r0, r6
     e30:	47a8      	blx	r5
            delay_ms(80);
     e32:	2050      	movs	r0, #80	; 0x50
     e34:	47a0      	blx	r4
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     e36:	2280      	movs	r2, #128	; 0x80
     e38:	4b05      	ldr	r3, [pc, #20]	; (e50 <unpluggedJingle+0x40>)
     e3a:	0392      	lsls	r2, r2, #14
     e3c:	615a      	str	r2, [r3, #20]
     e3e:	2280      	movs	r2, #128	; 0x80
     e40:	0352      	lsls	r2, r2, #13
     e42:	615a      	str	r2, [r3, #20]
            pinLow(buzzerPin);
            pinLow(LedPin);

}
     e44:	bd70      	pop	{r4, r5, r6, pc}
     e46:	46c0      	nop			; (mov r8, r8)
     e48:	0000102d 	.word	0x0000102d
     e4c:	00000d9d 	.word	0x00000d9d
     e50:	41004400 	.word	0x41004400

00000e54 <GclkInit>:
static uint32_t cycles_per_us = 48000000UL / 1000000;

void GclkInit() {


    SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     e54:	23c2      	movs	r3, #194	; 0xc2
                           SYSCTRL_INTFLAG_DFLLRDY;
    NVMCTRL->CTRLB.reg |= NVMCTRL_CTRLB_RWS_HALF;
     e56:	2002      	movs	r0, #2


static uint32_t cycles_per_ms = 48000000UL / 1000;
static uint32_t cycles_per_us = 48000000UL / 1000000;

void GclkInit() {
     e58:	b510      	push	{r4, lr}


    SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     e5a:	4916      	ldr	r1, [pc, #88]	; (eb4 <GclkInit+0x60>)
                           SYSCTRL_INTFLAG_DFLLRDY;
    NVMCTRL->CTRLB.reg |= NVMCTRL_CTRLB_RWS_HALF;
     e5c:	4a16      	ldr	r2, [pc, #88]	; (eb8 <GclkInit+0x64>)
static uint32_t cycles_per_us = 48000000UL / 1000000;

void GclkInit() {


    SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     e5e:	00db      	lsls	r3, r3, #3
     e60:	608b      	str	r3, [r1, #8]
                           SYSCTRL_INTFLAG_DFLLRDY;
    NVMCTRL->CTRLB.reg |= NVMCTRL_CTRLB_RWS_HALF;
     e62:	6853      	ldr	r3, [r2, #4]
     e64:	4303      	orrs	r3, r0
     e66:	6053      	str	r3, [r2, #4]

#define NVM_DFLL_COARSE_POS    58
#define NVM_DFLL_COARSE_SIZE   6
#define NVM_DFLL_FINE_POS      64
#define NVM_DFLL_FINE_SIZE     10
    uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
     e68:	4b14      	ldr	r3, [pc, #80]	; (ebc <GclkInit+0x68>)
     e6a:	681a      	ldr	r2, [r3, #0]
     e6c:	0e92      	lsrs	r2, r2, #26
                         + (NVM_DFLL_COARSE_POS / 32))
                       >> (NVM_DFLL_COARSE_POS % 32))
                     & ((1 << NVM_DFLL_COARSE_SIZE) - 1);
    if (coarse == 0x3f) {
     e6e:	2a3f      	cmp	r2, #63	; 0x3f
     e70:	d100      	bne.n	e74 <GclkInit+0x20>
        coarse = 0x1f;
     e72:	3a20      	subs	r2, #32
    }
    uint32_t fine =( *((uint32_t *)(NVMCTRL_OTP4)
                       + (NVM_DFLL_FINE_POS / 32))
                     >> (NVM_DFLL_FINE_POS % 32))
     e74:	4b12      	ldr	r3, [pc, #72]	; (ec0 <GclkInit+0x6c>)
                   & ((1 << NVM_DFLL_FINE_SIZE) - 1);
    if (fine == 0x3ff) {
     e76:	4813      	ldr	r0, [pc, #76]	; (ec4 <GclkInit+0x70>)
                       >> (NVM_DFLL_COARSE_POS % 32))
                     & ((1 << NVM_DFLL_COARSE_SIZE) - 1);
    if (coarse == 0x3f) {
        coarse = 0x1f;
    }
    uint32_t fine =( *((uint32_t *)(NVMCTRL_OTP4)
     e78:	681b      	ldr	r3, [r3, #0]
     e7a:	059b      	lsls	r3, r3, #22
     e7c:	0d9b      	lsrs	r3, r3, #22
                       + (NVM_DFLL_FINE_POS / 32))
                     >> (NVM_DFLL_FINE_POS % 32))
                   & ((1 << NVM_DFLL_FINE_SIZE) - 1);
    if (fine == 0x3ff) {
     e7e:	4283      	cmp	r3, r0
     e80:	d100      	bne.n	e84 <GclkInit+0x30>
        fine = 0x1ff;
     e82:	4b11      	ldr	r3, [pc, #68]	; (ec8 <GclkInit+0x74>)
    }


    // Disable ONDEMAND mode while writing configurations (errata 9905)
    SYSCTRL->DFLLCTRL.reg = dfll_ctrl_usb & ~SYSCTRL_DFLLCTRL_ONDEMAND;
     e84:	4811      	ldr	r0, [pc, #68]	; (ecc <GclkInit+0x78>)
     e86:	8488      	strh	r0, [r1, #36]	; 0x24
    while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_DFLLRDY)) == 0);
     e88:	2010      	movs	r0, #16
     e8a:	68cc      	ldr	r4, [r1, #12]
     e8c:	4204      	tst	r4, r0
     e8e:	d0fc      	beq.n	e8a <GclkInit+0x36>
    SYSCTRL->DFLLVAL.reg = SYSCTRL_DFLLVAL_COARSE(coarse) | SYSCTRL_DFLLVAL_FINE(fine);
     e90:	0292      	lsls	r2, r2, #10
     e92:	4313      	orrs	r3, r2
     e94:	4a07      	ldr	r2, [pc, #28]	; (eb4 <GclkInit+0x60>)
     e96:	6293      	str	r3, [r2, #40]	; 0x28


    //Wait and see if the DFLL output is good . . .
    while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_DFLLRDY)) == 0);
     e98:	2310      	movs	r3, #16
     e9a:	68ca      	ldr	r2, [r1, #12]
     e9c:	421a      	tst	r2, r3
     e9e:	d0fc      	beq.n	e9a <GclkInit+0x46>


    SYSCTRL->DFLLCTRL.reg = dfll_ctrl_usb;
     ea0:	4a0b      	ldr	r2, [pc, #44]	; (ed0 <GclkInit+0x7c>)
     ea2:	4b04      	ldr	r3, [pc, #16]	; (eb4 <GclkInit+0x60>)
     ea4:	849a      	strh	r2, [r3, #36]	; 0x24


    //For generic clock generator 0, select the DFLL48 Clock as input
    GCLK->GENDIV.reg  = (GCLK_GENDIV_DIV(1)  | GCLK_GENDIV_ID(0));
     ea6:	2280      	movs	r2, #128	; 0x80
     ea8:	4b0a      	ldr	r3, [pc, #40]	; (ed4 <GclkInit+0x80>)
     eaa:	0052      	lsls	r2, r2, #1
     eac:	609a      	str	r2, [r3, #8]
    GCLK->GENCTRL.reg = (GCLK_GENCTRL_ID(0)  | (GCLK_GENCTRL_SRC_DFLL48M) | (GCLK_GENCTRL_GENEN));
     eae:	4a0a      	ldr	r2, [pc, #40]	; (ed8 <GclkInit+0x84>)
     eb0:	605a      	str	r2, [r3, #4]
}
     eb2:	bd10      	pop	{r4, pc}
     eb4:	40000800 	.word	0x40000800
     eb8:	41004000 	.word	0x41004000
     ebc:	00806024 	.word	0x00806024
     ec0:	00806028 	.word	0x00806028
     ec4:	000003ff 	.word	0x000003ff
     ec8:	000001ff 	.word	0x000001ff
     ecc:	00000522 	.word	0x00000522
     ed0:	000005a2 	.word	0x000005a2
     ed4:	40000c00 	.word	0x40000c00
     ed8:	00010700 	.word	0x00010700

00000edc <RtcInit>:
        //wait for crystal to warm up
        while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_OSC32KRDY)) == 0);

    */

    SYSCTRL->OSC32K.reg = SYSCTRL_OSC32K_ENABLE |
     edc:	4b27      	ldr	r3, [pc, #156]	; (f7c <RtcInit+0xa0>)
     ede:	4a28      	ldr	r2, [pc, #160]	; (f80 <RtcInit+0xa4>)
                          SYSCTRL_OSC32K_EN32K |
                          ( 6 << SYSCTRL_OSC32K_STARTUP_Pos);


    SYSCTRL->OSC32K.bit.CALIB =
     ee0:	4828      	ldr	r0, [pc, #160]	; (f84 <RtcInit+0xa8>)
        //wait for crystal to warm up
        while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_OSC32KRDY)) == 0);

    */

    SYSCTRL->OSC32K.reg = SYSCTRL_OSC32K_ENABLE |
     ee2:	619a      	str	r2, [r3, #24]
                          SYSCTRL_OSC32K_EN32K |
                          ( 6 << SYSCTRL_OSC32K_STARTUP_Pos);


    SYSCTRL->OSC32K.bit.CALIB =
        ((*(uint32_t *)FUSES_OSC32K_CAL_ADDR >>
     ee4:	4a28      	ldr	r2, [pc, #160]	; (f88 <RtcInit+0xac>)
    SYSCTRL->OSC32K.reg = SYSCTRL_OSC32K_ENABLE |
                          SYSCTRL_OSC32K_EN32K |
                          ( 6 << SYSCTRL_OSC32K_STARTUP_Pos);


    SYSCTRL->OSC32K.bit.CALIB =
     ee6:	6999      	ldr	r1, [r3, #24]
     ee8:	6812      	ldr	r2, [r2, #0]
     eea:	4001      	ands	r1, r0
     eec:	04d2      	lsls	r2, r2, #19
     eee:	0e52      	lsrs	r2, r2, #25
     ef0:	0412      	lsls	r2, r2, #16
     ef2:	4311      	orrs	r1, r2
     ef4:	6199      	str	r1, [r3, #24]
        ((*(uint32_t *)FUSES_OSC32K_CAL_ADDR >>
          FUSES_OSC32K_CAL_Pos) & 0x7Ful);

    SYSCTRL->OSC32K.reg = SYSCTRL_OSC32K_STARTUP( 0x6u ) | // cf table 15.10 of product datasheet in chapter 15.8.6
     ef6:	4925      	ldr	r1, [pc, #148]	; (f8c <RtcInit+0xb0>)
     ef8:	6199      	str	r1, [r3, #24]
                          SYSCTRL_OSC32K_EN32K;
    SYSCTRL->OSC32K.bit.CALIB =
     efa:	6999      	ldr	r1, [r3, #24]
     efc:	4008      	ands	r0, r1
        ((*(uint32_t *)FUSES_OSC32K_CAL_ADDR >>
          FUSES_OSC32K_CAL_Pos) & 0x7Ful);



    SYSCTRL->OSC32K.bit.ENABLE = 1; // separate call, as described in chapter 15.6.3
     efe:	2102      	movs	r1, #2
        ((*(uint32_t *)FUSES_OSC32K_CAL_ADDR >>
          FUSES_OSC32K_CAL_Pos) & 0x7Ful);

    SYSCTRL->OSC32K.reg = SYSCTRL_OSC32K_STARTUP( 0x6u ) | // cf table 15.10 of product datasheet in chapter 15.8.6
                          SYSCTRL_OSC32K_EN32K;
    SYSCTRL->OSC32K.bit.CALIB =
     f00:	4302      	orrs	r2, r0
     f02:	619a      	str	r2, [r3, #24]
        ((*(uint32_t *)FUSES_OSC32K_CAL_ADDR >>
          FUSES_OSC32K_CAL_Pos) & 0x7Ful);



    SYSCTRL->OSC32K.bit.ENABLE = 1; // separate call, as described in chapter 15.6.3
     f04:	699a      	ldr	r2, [r3, #24]
     f06:	430a      	orrs	r2, r1
     f08:	619a      	str	r2, [r3, #24]

    while (  (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_OSC32KRDY) == 0 ) {
     f0a:	2204      	movs	r2, #4
     f0c:	68d9      	ldr	r1, [r3, #12]
     f0e:	4211      	tst	r1, r2
     f10:	d0fc      	beq.n	f0c <RtcInit+0x30>





    GCLK->GENDIV.reg = GCLK_GENDIV_ID(2) | GCLK_GENDIV_DIV(1);
     f12:	2281      	movs	r2, #129	; 0x81
     f14:	4b1e      	ldr	r3, [pc, #120]	; (f90 <RtcInit+0xb4>)
     f16:	0052      	lsls	r2, r2, #1
     f18:	609a      	str	r2, [r3, #8]

    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(2) |
     f1a:	4a1e      	ldr	r2, [pc, #120]	; (f94 <RtcInit+0xb8>)
     f1c:	605a      	str	r2, [r3, #4]
                        GCLK_GENCTRL_SRC(GCLK_GENCTRL_SRC_XOSC32K) |
                        GCLK_GENCTRL_IDC |
                        GCLK_GENCTRL_RUNSTDBY |
                        GCLK_GENCTRL_GENEN;
    while (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY);
     f1e:	785a      	ldrb	r2, [r3, #1]
     f20:	b252      	sxtb	r2, r2
     f22:	2a00      	cmp	r2, #0
     f24:	dbfb      	blt.n	f1e <RtcInit+0x42>

// Configure RTC
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(RTC_GCLK_ID) |
     f26:	4a1c      	ldr	r2, [pc, #112]	; (f98 <RtcInit+0xbc>)
     f28:	4b19      	ldr	r3, [pc, #100]	; (f90 <RtcInit+0xb4>)
     f2a:	805a      	strh	r2, [r3, #2]
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    RTC->MODE1.CTRL.reg = RTC_MODE1_CTRL_MODE_COUNT16;
     f2c:	2204      	movs	r2, #4
     f2e:	4b1b      	ldr	r3, [pc, #108]	; (f9c <RtcInit+0xc0>)
     f30:	801a      	strh	r2, [r3, #0]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     f32:	7a9a      	ldrb	r2, [r3, #10]
     f34:	4919      	ldr	r1, [pc, #100]	; (f9c <RtcInit+0xc0>)
     f36:	09d2      	lsrs	r2, r2, #7
     f38:	d1fb      	bne.n	f32 <RtcInit+0x56>

// Prescaler needs to be enabled separately from the mode for some reason
    RTC->MODE1.CTRL.reg |= RTC_MODE1_CTRL_PRESCALER_DIV32;
     f3a:	20a0      	movs	r0, #160	; 0xa0
     f3c:	880a      	ldrh	r2, [r1, #0]
     f3e:	00c0      	lsls	r0, r0, #3
     f40:	4302      	orrs	r2, r0
     f42:	800a      	strh	r2, [r1, #0]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     f44:	7a9a      	ldrb	r2, [r3, #10]
     f46:	09d2      	lsrs	r2, r2, #7
     f48:	d1fc      	bne.n	f44 <RtcInit+0x68>

    RTC->MODE1.PER.reg = 998;
     f4a:	4915      	ldr	r1, [pc, #84]	; (fa0 <RtcInit+0xc4>)
     f4c:	4a13      	ldr	r2, [pc, #76]	; (f9c <RtcInit+0xc0>)
     f4e:	8291      	strh	r1, [r2, #20]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     f50:	7a99      	ldrb	r1, [r3, #10]
     f52:	4a12      	ldr	r2, [pc, #72]	; (f9c <RtcInit+0xc0>)
     f54:	09c9      	lsrs	r1, r1, #7
     f56:	d1fb      	bne.n	f50 <RtcInit+0x74>

    RTC->MODE1.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_ADDR(0x10);
     f58:	8851      	ldrh	r1, [r2, #2]
     f5a:	4812      	ldr	r0, [pc, #72]	; (fa4 <RtcInit+0xc8>)
     f5c:	4301      	orrs	r1, r0
     f5e:	8051      	strh	r1, [r2, #2]

    RTC->MODE1.INTENSET.reg = RTC_MODE1_INTENSET_OVF;
     f60:	2180      	movs	r1, #128	; 0x80

    RTC->MODE1.CTRL.bit.ENABLE = 1;
     f62:	2002      	movs	r0, #2
    RTC->MODE1.PER.reg = 998;
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);

    RTC->MODE1.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_ADDR(0x10);

    RTC->MODE1.INTENSET.reg = RTC_MODE1_INTENSET_OVF;
     f64:	71d1      	strb	r1, [r2, #7]

    RTC->MODE1.CTRL.bit.ENABLE = 1;
     f66:	8811      	ldrh	r1, [r2, #0]
     f68:	4301      	orrs	r1, r0
     f6a:	8011      	strh	r1, [r2, #0]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     f6c:	7a9a      	ldrb	r2, [r3, #10]
     f6e:	09d2      	lsrs	r2, r2, #7
     f70:	d1fc      	bne.n	f6c <RtcInit+0x90>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     f72:	4b0d      	ldr	r3, [pc, #52]	; (fa8 <RtcInit+0xcc>)
     f74:	3208      	adds	r2, #8
     f76:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(RTC_IRQn);
}
     f78:	4770      	bx	lr
     f7a:	46c0      	nop			; (mov r8, r8)
     f7c:	40000800 	.word	0x40000800
     f80:	00000606 	.word	0x00000606
     f84:	ff80ffff 	.word	0xff80ffff
     f88:	00806024 	.word	0x00806024
     f8c:	00000604 	.word	0x00000604
     f90:	40000c00 	.word	0x40000c00
     f94:	00230002 	.word	0x00230002
     f98:	00004204 	.word	0x00004204
     f9c:	40001400 	.word	0x40001400
     fa0:	000003e6 	.word	0x000003e6
     fa4:	00004010 	.word	0x00004010
     fa8:	e000e100 	.word	0xe000e100

00000fac <gclkEnable>:


void gclkEnable(u32_t id, u32_t src, u32_t div) {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
     fac:	230f      	movs	r3, #15
     fae:	4018      	ands	r0, r3
     fb0:	4b08      	ldr	r3, [pc, #32]	; (fd4 <gclkEnable+0x28>)
     fb2:	0212      	lsls	r2, r2, #8
     fb4:	401a      	ands	r2, r3
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     fb6:	23f8      	movs	r3, #248	; 0xf8
     fb8:	0209      	lsls	r1, r1, #8
     fba:	015b      	lsls	r3, r3, #5
     fbc:	4019      	ands	r1, r3
     fbe:	2380      	movs	r3, #128	; 0x80

    NVIC_EnableIRQ(RTC_IRQn);
}


void gclkEnable(u32_t id, u32_t src, u32_t div) {
     fc0:	b510      	push	{r4, lr}
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     fc2:	025b      	lsls	r3, r3, #9
    NVIC_EnableIRQ(RTC_IRQn);
}


void gclkEnable(u32_t id, u32_t src, u32_t div) {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
     fc4:	4c04      	ldr	r4, [pc, #16]	; (fd8 <gclkEnable+0x2c>)
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     fc6:	4319      	orrs	r1, r3
    NVIC_EnableIRQ(RTC_IRQn);
}


void gclkEnable(u32_t id, u32_t src, u32_t div) {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
     fc8:	4302      	orrs	r2, r0
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     fca:	4308      	orrs	r0, r1
    NVIC_EnableIRQ(RTC_IRQn);
}


void gclkEnable(u32_t id, u32_t src, u32_t div) {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
     fcc:	60a2      	str	r2, [r4, #8]
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     fce:	6060      	str	r0, [r4, #4]
}
     fd0:	bd10      	pop	{r4, pc}
     fd2:	46c0      	nop			; (mov r8, r8)
     fd4:	00ffff00 	.word	0x00ffff00
     fd8:	40000c00 	.word	0x40000c00

00000fdc <delayInit>:


void delayInit(void) {
    cycles_per_ms = 48000000UL;
    cycles_per_ms /= 1000;
     fdc:	4b04      	ldr	r3, [pc, #16]	; (ff0 <delayInit+0x14>)
     fde:	4a05      	ldr	r2, [pc, #20]	; (ff4 <delayInit+0x18>)
     fe0:	601a      	str	r2, [r3, #0]
    cycles_per_us = cycles_per_ms / 1000;
     fe2:	2230      	movs	r2, #48	; 0x30
     fe4:	605a      	str	r2, [r3, #4]

    SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     fe6:	4b04      	ldr	r3, [pc, #16]	; (ff8 <delayInit+0x1c>)
     fe8:	3a2b      	subs	r2, #43	; 0x2b
     fea:	601a      	str	r2, [r3, #0]
}
     fec:	4770      	bx	lr
     fee:	46c0      	nop			; (mov r8, r8)
     ff0:	20000004 	.word	0x20000004
     ff4:	0000bb80 	.word	0x0000bb80
     ff8:	e000e010 	.word	0xe000e010

00000ffc <delay_us>:
/**
 * \brief Delay loop to delay at least n number of microseconds
 *
 * \param n  Number of microseconds to wait
 */
void delay_us(uint32_t n) {
     ffc:	b570      	push	{r4, r5, r6, lr}
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
        SysTick->VAL = 0;

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     ffe:	2480      	movs	r4, #128	; 0x80

static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
        SysTick->VAL = 0;
    1000:	2100      	movs	r1, #0
    while (n--) {
        /* Devide up to blocks of 10u */
        delay_cycles(cycles_per_us);
    1002:	4b08      	ldr	r3, [pc, #32]	; (1024 <delay_us+0x28>)


static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
    1004:	4a08      	ldr	r2, [pc, #32]	; (1028 <delay_us+0x2c>)
    1006:	685b      	ldr	r3, [r3, #4]
        SysTick->VAL = 0;

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    1008:	0264      	lsls	r4, r4, #9
 * \brief Delay loop to delay at least n number of microseconds
 *
 * \param n  Number of microseconds to wait
 */
void delay_us(uint32_t n) {
    while (n--) {
    100a:	3801      	subs	r0, #1
    100c:	d308      	bcc.n	1020 <delay_us+0x24>



static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
    100e:	2b00      	cmp	r3, #0
    1010:	d0fb      	beq.n	100a <delay_us+0xe>
    1012:	4e05      	ldr	r6, [pc, #20]	; (1028 <delay_us+0x2c>)
        SysTick->LOAD = n;
    1014:	6053      	str	r3, [r2, #4]
        SysTick->VAL = 0;
    1016:	6091      	str	r1, [r2, #8]

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    1018:	6835      	ldr	r5, [r6, #0]
    101a:	4225      	tst	r5, r4
    101c:	d0fc      	beq.n	1018 <delay_us+0x1c>
    101e:	e7f4      	b.n	100a <delay_us+0xe>
        /* Devide up to blocks of 10u */
        delay_cycles(cycles_per_us);
    }
}
    1020:	bd70      	pop	{r4, r5, r6, pc}
    1022:	46c0      	nop			; (mov r8, r8)
    1024:	20000004 	.word	0x20000004
    1028:	e000e010 	.word	0xe000e010

0000102c <delay_ms>:
/**
 * \brief Delay loop to delay at least n number of milliseconds
 *
 * \param n  Number of milliseconds to wait
 */
void delay_ms(uint32_t n) {
    102c:	b570      	push	{r4, r5, r6, lr}
    102e:	2480      	movs	r4, #128	; 0x80

static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
        SysTick->VAL = 0;
    1030:	2100      	movs	r1, #0
    while (n--) {
        /* Devide up to blocks of 1ms */
        delay_cycles(cycles_per_ms);
    1032:	4b08      	ldr	r3, [pc, #32]	; (1054 <delay_ms+0x28>)


static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
    1034:	4a08      	ldr	r2, [pc, #32]	; (1058 <delay_ms+0x2c>)
    1036:	681b      	ldr	r3, [r3, #0]
        SysTick->VAL = 0;

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    1038:	0264      	lsls	r4, r4, #9
 * \brief Delay loop to delay at least n number of milliseconds
 *
 * \param n  Number of milliseconds to wait
 */
void delay_ms(uint32_t n) {
    while (n--) {
    103a:	3801      	subs	r0, #1
    103c:	d308      	bcc.n	1050 <delay_ms+0x24>



static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
    103e:	2b00      	cmp	r3, #0
    1040:	d0fb      	beq.n	103a <delay_ms+0xe>
    1042:	4e05      	ldr	r6, [pc, #20]	; (1058 <delay_ms+0x2c>)
        SysTick->LOAD = n;
    1044:	6053      	str	r3, [r2, #4]
        SysTick->VAL = 0;
    1046:	6091      	str	r1, [r2, #8]

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    1048:	6835      	ldr	r5, [r6, #0]
    104a:	4225      	tst	r5, r4
    104c:	d0fc      	beq.n	1048 <delay_ms+0x1c>
    104e:	e7f4      	b.n	103a <delay_ms+0xe>
        /* Devide up to blocks of 1ms */
        delay_cycles(cycles_per_ms);
    }
}
    1050:	bd70      	pop	{r4, r5, r6, pc}
    1052:	46c0      	nop			; (mov r8, r8)
    1054:	20000004 	.word	0x20000004
    1058:	e000e010 	.word	0xe000e010

0000105c <RTC_Handler>:


volatile uint32_t time_ms = 0;

void RTC_Handler(void) {
    time_ms += 1000;
    105c:	21fa      	movs	r1, #250	; 0xfa
    105e:	4a04      	ldr	r2, [pc, #16]	; (1070 <RTC_Handler+0x14>)
    1060:	0089      	lsls	r1, r1, #2
    1062:	6813      	ldr	r3, [r2, #0]
    1064:	185b      	adds	r3, r3, r1
    1066:	6013      	str	r3, [r2, #0]
    RTC->MODE1.INTFLAG.reg = 0xFF;
    1068:	22ff      	movs	r2, #255	; 0xff
    106a:	4b02      	ldr	r3, [pc, #8]	; (1074 <RTC_Handler+0x18>)
    106c:	721a      	strb	r2, [r3, #8]
}
    106e:	4770      	bx	lr
    1070:	200004c4 	.word	0x200004c4
    1074:	40001400 	.word	0x40001400

00001078 <millis>:

uint32_t millis(void) {
    1078:	b530      	push	{r4, r5, lr}
    uint32_t ms;
    ATOMIC_SECTION_ENTER
    107a:	f3ef 8110 	mrs	r1, PRIMASK
    107e:	b672      	cpsid	i
    ms = time_ms + RTC->MODE1.COUNT.reg;
    1080:	4a08      	ldr	r2, [pc, #32]	; (10a4 <millis+0x2c>)
    1082:	4d09      	ldr	r5, [pc, #36]	; (10a8 <millis+0x30>)
    1084:	8a10      	ldrh	r0, [r2, #16]
    1086:	682b      	ldr	r3, [r5, #0]
    if (RTC->MODE1.INTFLAG.bit.OVF)
    1088:	7a14      	ldrb	r4, [r2, #8]
}

uint32_t millis(void) {
    uint32_t ms;
    ATOMIC_SECTION_ENTER
    ms = time_ms + RTC->MODE1.COUNT.reg;
    108a:	b280      	uxth	r0, r0
    if (RTC->MODE1.INTFLAG.bit.OVF)
    108c:	09e4      	lsrs	r4, r4, #7
    108e:	d004      	beq.n	109a <millis+0x22>
        ms = time_ms + RTC->MODE1.COUNT.reg + 1000;
    1090:	8a13      	ldrh	r3, [r2, #16]
    1092:	22fa      	movs	r2, #250	; 0xfa
    1094:	6828      	ldr	r0, [r5, #0]
    1096:	0092      	lsls	r2, r2, #2
    1098:	1880      	adds	r0, r0, r2
    109a:	18c0      	adds	r0, r0, r3
    ATOMIC_SECTION_LEAVE
    109c:	f381 8810 	msr	PRIMASK, r1
    return ms;
}
    10a0:	bd30      	pop	{r4, r5, pc}
    10a2:	46c0      	nop			; (mov r8, r8)
    10a4:	40001400 	.word	0x40001400
    10a8:	200004c4 	.word	0x200004c4

000010ac <TC4Init>:

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC4_GCLK_ID) |
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC4;
    10ac:	2180      	movs	r1, #128	; 0x80
    return ms;
}

void TC4Init() {

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC4_GCLK_ID) |
    10ae:	4a0d      	ldr	r2, [pc, #52]	; (10e4 <TC4Init+0x38>)
    10b0:	4b0d      	ldr	r3, [pc, #52]	; (10e8 <TC4Init+0x3c>)
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC4;
    10b2:	0149      	lsls	r1, r1, #5
    return ms;
}

void TC4Init() {

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC4_GCLK_ID) |
    10b4:	805a      	strh	r2, [r3, #2]
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC4;
    10b6:	4a0d      	ldr	r2, [pc, #52]	; (10ec <TC4Init+0x40>)
    10b8:	6a13      	ldr	r3, [r2, #32]
    10ba:	430b      	orrs	r3, r1
    10bc:	6213      	str	r3, [r2, #32]

    TC4->COUNT8.CTRLA.reg = TC_CTRLA_MODE_COUNT8 |
    10be:	4b0c      	ldr	r3, [pc, #48]	; (10f0 <TC4Init+0x44>)
    10c0:	4a0c      	ldr	r2, [pc, #48]	; (10f4 <TC4Init+0x48>)

    TC4->COUNT8.INTENSET.reg = TC_INTENSET_OVF;

    TC4->COUNT8.EVCTRL.reg = TC_EVCTRL_OVFEO;

    TC4->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
    10c2:	2102      	movs	r1, #2
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC4;

    TC4->COUNT8.CTRLA.reg = TC_CTRLA_MODE_COUNT8 |
    10c4:	801a      	strh	r2, [r3, #0]
                            TC_CTRLA_RUNSTDBY |
                            TC_CTRLA_PRESCALER_DIV2;
    TC4->COUNT8.PER.reg = 0x41;
    10c6:	2241      	movs	r2, #65	; 0x41
    10c8:	751a      	strb	r2, [r3, #20]

    TC4->COUNT8.INTENSET.reg = TC_INTENSET_OVF;
    10ca:	3a40      	subs	r2, #64	; 0x40
    10cc:	735a      	strb	r2, [r3, #13]

    TC4->COUNT8.EVCTRL.reg = TC_EVCTRL_OVFEO;
    10ce:	32ff      	adds	r2, #255	; 0xff
    10d0:	815a      	strh	r2, [r3, #10]

    TC4->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
    10d2:	881a      	ldrh	r2, [r3, #0]
    10d4:	430a      	orrs	r2, r1
    10d6:	801a      	strh	r2, [r3, #0]
    10d8:	2280      	movs	r2, #128	; 0x80
    10da:	4b07      	ldr	r3, [pc, #28]	; (10f8 <TC4Init+0x4c>)
    10dc:	0312      	lsls	r2, r2, #12
    10de:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(TC4_IRQn);
}
    10e0:	4770      	bx	lr
    10e2:	46c0      	nop			; (mov r8, r8)
    10e4:	0000421c 	.word	0x0000421c
    10e8:	40000c00 	.word	0x40000c00
    10ec:	40000400 	.word	0x40000400
    10f0:	42003000 	.word	0x42003000
    10f4:	00000904 	.word	0x00000904
    10f8:	e000e100 	.word	0xe000e100

000010fc <TC4_Handler>:

void TC4_Handler( void ) {
    TC4->COUNT8.INTFLAG.reg = 0xFF;
    10fc:	22ff      	movs	r2, #255	; 0xff
    TC4->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;

    NVIC_EnableIRQ(TC4_IRQn);
}

void TC4_Handler( void ) {
    10fe:	b510      	push	{r4, lr}
    TC4->COUNT8.INTFLAG.reg = 0xFF;
    1100:	4b02      	ldr	r3, [pc, #8]	; (110c <TC4_Handler+0x10>)
    1102:	739a      	strb	r2, [r3, #14]
    pullSample();
    1104:	4b02      	ldr	r3, [pc, #8]	; (1110 <TC4_Handler+0x14>)
    1106:	4798      	blx	r3
}
    1108:	bd10      	pop	{r4, pc}
    110a:	46c0      	nop			; (mov r8, r8)
    110c:	42003000 	.word	0x42003000
    1110:	000023d1 	.word	0x000023d1

00001114 <TC5Init>:

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC5_GCLK_ID) |
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC5;
    1114:	2180      	movs	r1, #128	; 0x80
    pullSample();
}

void TC5Init() {

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC5_GCLK_ID) |
    1116:	4a0d      	ldr	r2, [pc, #52]	; (114c <TC5Init+0x38>)
    1118:	4b0d      	ldr	r3, [pc, #52]	; (1150 <TC5Init+0x3c>)
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC5;
    111a:	0189      	lsls	r1, r1, #6
    pullSample();
}

void TC5Init() {

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC5_GCLK_ID) |
    111c:	805a      	strh	r2, [r3, #2]
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC5;
    111e:	4a0d      	ldr	r2, [pc, #52]	; (1154 <TC5Init+0x40>)
    1120:	6a13      	ldr	r3, [r2, #32]
    1122:	430b      	orrs	r3, r1
    1124:	6213      	str	r3, [r2, #32]

    TC5->COUNT8.CTRLA.reg = TC_CTRLA_MODE_COUNT8 |
    1126:	4b0c      	ldr	r3, [pc, #48]	; (1158 <TC5Init+0x44>)
    1128:	4a0c      	ldr	r2, [pc, #48]	; (115c <TC5Init+0x48>)

    TC5->COUNT8.INTENSET.reg = TC_INTENSET_OVF;

    TC5->COUNT8.EVCTRL.reg = TC_EVCTRL_OVFEO;

    TC5->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
    112a:	2102      	movs	r1, #2
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC5;

    TC5->COUNT8.CTRLA.reg = TC_CTRLA_MODE_COUNT8 |
    112c:	801a      	strh	r2, [r3, #0]
                            TC_CTRLA_RUNSTDBY |
                            TC_CTRLA_PRESCALER_DIV64;

    TC5->COUNT8.PER.reg = 0x20;
    112e:	2220      	movs	r2, #32
    1130:	751a      	strb	r2, [r3, #20]

    TC5->COUNT8.INTENSET.reg = TC_INTENSET_OVF;
    1132:	3a1f      	subs	r2, #31
    1134:	735a      	strb	r2, [r3, #13]

    TC5->COUNT8.EVCTRL.reg = TC_EVCTRL_OVFEO;
    1136:	32ff      	adds	r2, #255	; 0xff
    1138:	815a      	strh	r2, [r3, #10]

    TC5->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
    113a:	881a      	ldrh	r2, [r3, #0]
    113c:	430a      	orrs	r2, r1
    113e:	801a      	strh	r2, [r3, #0]
    1140:	2280      	movs	r2, #128	; 0x80
    1142:	4b07      	ldr	r3, [pc, #28]	; (1160 <TC5Init+0x4c>)
    1144:	0352      	lsls	r2, r2, #13
    1146:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(TC5_IRQn);
}
    1148:	4770      	bx	lr
    114a:	46c0      	nop			; (mov r8, r8)
    114c:	0000421c 	.word	0x0000421c
    1150:	40000c00 	.word	0x40000c00
    1154:	40000400 	.word	0x40000400
    1158:	42003400 	.word	0x42003400
    115c:	00000d04 	.word	0x00000d04
    1160:	e000e100 	.word	0xe000e100

00001164 <TC5_Handler>:

void TC5_Handler( void ) {
    TC5->COUNT8.INTFLAG.reg = 0xFF;
    1164:	22ff      	movs	r2, #255	; 0xff
    1166:	4b03      	ldr	r3, [pc, #12]	; (1174 <TC5_Handler+0x10>)
    1168:	739a      	strb	r2, [r3, #14]
    writeLog = true;
    116a:	4b03      	ldr	r3, [pc, #12]	; (1178 <TC5_Handler+0x14>)
    116c:	3afe      	subs	r2, #254	; 0xfe
    116e:	701a      	strb	r2, [r3, #0]
}
    1170:	4770      	bx	lr
    1172:	46c0      	nop			; (mov r8, r8)
    1174:	42003400 	.word	0x42003400
    1178:	20000500 	.word	0x20000500

0000117c <flight>:
#include <boardDefines.h>

flightState_t flightState;


void flight() {
    117c:	b570      	push	{r4, r5, r6, lr}



    switch(flightState) {
    117e:	4c72      	ldr	r4, [pc, #456]	; (1348 <flight+0x1cc>)
    1180:	7820      	ldrb	r0, [r4, #0]
    1182:	280a      	cmp	r0, #10
    1184:	d900      	bls.n	1188 <flight+0xc>
    1186:	e0dd      	b.n	1344 <flight+0x1c8>
    1188:	f002 fd02 	bl	3b90 <__gnu_thumb1_case_uqi>
    118c:	73392606 	.word	0x73392606
    1190:	dc9fdcdc 	.word	0xdc9fdcdc
    1194:	dcdc      	.short	0xdcdc
    1196:	b3          	.byte	0xb3
    1197:	00          	.byte	0x00
    case flightStatrup:


        updateGround( );
    1198:	4b6c      	ldr	r3, [pc, #432]	; (134c <flight+0x1d0>)
    119a:	4798      	blx	r3

        //logSensors( );


        if ((millis() - startupTick) > 10000) {
    119c:	4b6c      	ldr	r3, [pc, #432]	; (1350 <flight+0x1d4>)
    119e:	4798      	blx	r3
    11a0:	4b6c      	ldr	r3, [pc, #432]	; (1354 <flight+0x1d8>)
    11a2:	681b      	ldr	r3, [r3, #0]
    11a4:	1ac0      	subs	r0, r0, r3
    11a6:	4b6c      	ldr	r3, [pc, #432]	; (1358 <flight+0x1dc>)
    11a8:	4298      	cmp	r0, r3
    11aa:	d908      	bls.n	11be <flight+0x42>
            findNewFlightStart( );
    11ac:	4b6b      	ldr	r3, [pc, #428]	; (135c <flight+0x1e0>)
    11ae:	4798      	blx	r3
            logFlight( );
    11b0:	4b6b      	ldr	r3, [pc, #428]	; (1360 <flight+0x1e4>)
    11b2:	4798      	blx	r3
            startupJingle();
    11b4:	4b6b      	ldr	r3, [pc, #428]	; (1364 <flight+0x1e8>)
    11b6:	4798      	blx	r3
            flightState = flightTest;
    11b8:	230a      	movs	r3, #10
    11ba:	7023      	strb	r3, [r4, #0]
            //flightState = flightPad;
            break;
    11bc:	e0c2      	b.n	1344 <flight+0x1c8>
        }

        attemptConnection();
    11be:	4b6a      	ldr	r3, [pc, #424]	; (1368 <flight+0x1ec>)
    11c0:	4798      	blx	r3



        if (sample.voltage.batFloat < 3.5) {
    11c2:	4b6a      	ldr	r3, [pc, #424]	; (136c <flight+0x1f0>)
    11c4:	496a      	ldr	r1, [pc, #424]	; (1370 <flight+0x1f4>)
    11c6:	68d8      	ldr	r0, [r3, #12]
    11c8:	4b6a      	ldr	r3, [pc, #424]	; (1374 <flight+0x1f8>)
    11ca:	4798      	blx	r3
    11cc:	2800      	cmp	r0, #0
    11ce:	d100      	bne.n	11d2 <flight+0x56>
    11d0:	e0b8      	b.n	1344 <flight+0x1c8>
            flightState = flightIdle;
    11d2:	2301      	movs	r3, #1
    11d4:	7023      	strb	r3, [r4, #0]
    11d6:	e049      	b.n	126c <flight+0xf0>
        //TC5->COUNT8.CTRLA.reg = 0;

        //delay_ms(1000);
        //pinToggle(LedPin);

        if (sercom(USART3)->SPI.INTFLAG.bit.RXC == 1) {
    11d8:	4b67      	ldr	r3, [pc, #412]	; (1378 <flight+0x1fc>)
    11da:	7e1b      	ldrb	r3, [r3, #24]
    11dc:	075b      	lsls	r3, r3, #29
    11de:	d400      	bmi.n	11e2 <flight+0x66>
    11e0:	e0b0      	b.n	1344 <flight+0x1c8>
            u8_t possibleReset = usartDataIn(USART3);
    11e2:	2003      	movs	r0, #3
    11e4:	4b65      	ldr	r3, [pc, #404]	; (137c <flight+0x200>)
    11e6:	4798      	blx	r3
            if (possibleReset == 0x52) {
    11e8:	2852      	cmp	r0, #82	; 0x52
    11ea:	d000      	beq.n	11ee <flight+0x72>
    11ec:	e0aa      	b.n	1344 <flight+0x1c8>
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
    11ee:	f3bf 8f4f 	dsb	sy
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
    11f2:	4a63      	ldr	r2, [pc, #396]	; (1380 <flight+0x204>)
    11f4:	4b63      	ldr	r3, [pc, #396]	; (1384 <flight+0x208>)
    11f6:	60da      	str	r2, [r3, #12]
    11f8:	f3bf 8f4f 	dsb	sy
    11fc:	e7fe      	b.n	11fc <flight+0x80>
        *  Accel > 2g & vel > 5m/s
        *		 or
        *  baro alt > 40ft
        */

        updateGround();
    11fe:	4b53      	ldr	r3, [pc, #332]	; (134c <flight+0x1d0>)
    1200:	4798      	blx	r3

        if (writeLog) {
    1202:	4b61      	ldr	r3, [pc, #388]	; (1388 <flight+0x20c>)
    1204:	781a      	ldrb	r2, [r3, #0]
    1206:	2a00      	cmp	r2, #0
    1208:	d005      	beq.n	1216 <flight+0x9a>
            writeLog = false;
    120a:	2200      	movs	r2, #0
    120c:	701a      	strb	r2, [r3, #0]
}


inline static void pinToggle(Pin p) {
    PORT->Group[p.group].OUTTGL.reg = (1<<p.pin);
    120e:	2280      	movs	r2, #128	; 0x80
    1210:	4b5e      	ldr	r3, [pc, #376]	; (138c <flight+0x210>)
    1212:	0352      	lsls	r2, r2, #13
    1214:	61da      	str	r2, [r3, #28]
            //logSensors( );
            pinToggle(LedPin);
        }

        if (( velocity > 0.05) && ((altitude - offsets.groundOffset) > 5)) {
    1216:	495e      	ldr	r1, [pc, #376]	; (1390 <flight+0x214>)
    1218:	4d5e      	ldr	r5, [pc, #376]	; (1394 <flight+0x218>)
    121a:	4a5f      	ldr	r2, [pc, #380]	; (1398 <flight+0x21c>)
    121c:	4b5f      	ldr	r3, [pc, #380]	; (139c <flight+0x220>)
    121e:	6808      	ldr	r0, [r1, #0]
    1220:	6849      	ldr	r1, [r1, #4]
    1222:	47a8      	blx	r5
    1224:	2800      	cmp	r0, #0
    1226:	d014      	beq.n	1252 <flight+0xd6>
    1228:	4b5d      	ldr	r3, [pc, #372]	; (13a0 <flight+0x224>)
    122a:	6998      	ldr	r0, [r3, #24]
    122c:	4b5d      	ldr	r3, [pc, #372]	; (13a4 <flight+0x228>)
    122e:	4798      	blx	r3
    1230:	000b      	movs	r3, r1
    1232:	495d      	ldr	r1, [pc, #372]	; (13a8 <flight+0x22c>)
    1234:	0002      	movs	r2, r0
    1236:	6808      	ldr	r0, [r1, #0]
    1238:	6849      	ldr	r1, [r1, #4]
    123a:	4e5c      	ldr	r6, [pc, #368]	; (13ac <flight+0x230>)
    123c:	47b0      	blx	r6
    123e:	2200      	movs	r2, #0
    1240:	4b5b      	ldr	r3, [pc, #364]	; (13b0 <flight+0x234>)
    1242:	47a8      	blx	r5
    1244:	2800      	cmp	r0, #0
    1246:	d004      	beq.n	1252 <flight+0xd6>
            flightState = flightBoost;
    1248:	2303      	movs	r3, #3
            logEvent('L');
    124a:	204c      	movs	r0, #76	; 0x4c
            //logSensors( );
            pinToggle(LedPin);
        }

        if (( velocity > 0.05) && ((altitude - offsets.groundOffset) > 5)) {
            flightState = flightBoost;
    124c:	7023      	strb	r3, [r4, #0]
            logEvent('L');
    124e:	4b59      	ldr	r3, [pc, #356]	; (13b4 <flight+0x238>)
    1250:	4798      	blx	r3
        }



        if (sample.voltage.batFloat < 3.5) {
    1252:	4b46      	ldr	r3, [pc, #280]	; (136c <flight+0x1f0>)
    1254:	68d8      	ldr	r0, [r3, #12]
    1256:	4946      	ldr	r1, [pc, #280]	; (1370 <flight+0x1f4>)
    1258:	4b46      	ldr	r3, [pc, #280]	; (1374 <flight+0x1f8>)
    125a:	4798      	blx	r3
    125c:	2800      	cmp	r0, #0
    125e:	d071      	beq.n	1344 <flight+0x1c8>
            flightState = flightIdle;
    1260:	2301      	movs	r3, #1
    1262:	7023      	strb	r3, [r4, #0]
            AT25SFHoldTillReady();
    1264:	4b54      	ldr	r3, [pc, #336]	; (13b8 <flight+0x23c>)
    1266:	4798      	blx	r3
            writeFlightEndAddress( );
    1268:	4b54      	ldr	r3, [pc, #336]	; (13bc <flight+0x240>)
    126a:	4798      	blx	r3
            unpluggedJingle();
    126c:	4b54      	ldr	r3, [pc, #336]	; (13c0 <flight+0x244>)
    126e:	4798      	blx	r3
    1270:	e068      	b.n	1344 <flight+0x1c8>
        *	boost to fast
        *		while
        *	Accel > 1/4G
        */

        if (writeLog) {
    1272:	4b45      	ldr	r3, [pc, #276]	; (1388 <flight+0x20c>)
    1274:	781a      	ldrb	r2, [r3, #0]
    1276:	2a00      	cmp	r2, #0
    1278:	d015      	beq.n	12a6 <flight+0x12a>
            writeLog = false;
    127a:	2500      	movs	r5, #0
    127c:	701d      	strb	r5, [r3, #0]
            logSensors( );
    127e:	4b51      	ldr	r3, [pc, #324]	; (13c4 <flight+0x248>)
    1280:	4798      	blx	r3
            if (pageReady) {
    1282:	4b51      	ldr	r3, [pc, #324]	; (13c8 <flight+0x24c>)
    1284:	781a      	ldrb	r2, [r3, #0]
    1286:	42aa      	cmp	r2, r5
    1288:	d00d      	beq.n	12a6 <flight+0x12a>
    128a:	2280      	movs	r2, #128	; 0x80
                pageReady = false;
    128c:	701d      	strb	r5, [r3, #0]
    128e:	4b3f      	ldr	r3, [pc, #252]	; (138c <flight+0x210>)
                pinToggle(LedPin);
                u8_t bytesWritten = AT25SEWritePage(currentAddress,pageToWrite);
    1290:	4d4e      	ldr	r5, [pc, #312]	; (13cc <flight+0x250>)
    1292:	0352      	lsls	r2, r2, #13
    1294:	61da      	str	r2, [r3, #28]
    1296:	494e      	ldr	r1, [pc, #312]	; (13d0 <flight+0x254>)
    1298:	4b4e      	ldr	r3, [pc, #312]	; (13d4 <flight+0x258>)
    129a:	6828      	ldr	r0, [r5, #0]
    129c:	4798      	blx	r3
                currentAddress = (currentAddress + 0x100);
    129e:	682b      	ldr	r3, [r5, #0]
    12a0:	3301      	adds	r3, #1
    12a2:	33ff      	adds	r3, #255	; 0xff
    12a4:	602b      	str	r3, [r5, #0]
            }
        }


        if (velocity < 0) {
    12a6:	493a      	ldr	r1, [pc, #232]	; (1390 <flight+0x214>)
    12a8:	2200      	movs	r2, #0
    12aa:	6808      	ldr	r0, [r1, #0]
    12ac:	6849      	ldr	r1, [r1, #4]
    12ae:	2300      	movs	r3, #0
    12b0:	4d49      	ldr	r5, [pc, #292]	; (13d8 <flight+0x25c>)
    12b2:	47a8      	blx	r5
    12b4:	2800      	cmp	r0, #0
    12b6:	d0cc      	beq.n	1252 <flight+0xd6>
            flightState = flightDrogue;
    12b8:	2306      	movs	r3, #6
            logEvent('A');
    12ba:	2041      	movs	r0, #65	; 0x41
            }
        }


        if (velocity < 0) {
            flightState = flightDrogue;
    12bc:	7023      	strb	r3, [r4, #0]
            logEvent('A');
    12be:	4b3d      	ldr	r3, [pc, #244]	; (13b4 <flight+0x238>)
    12c0:	4798      	blx	r3
            beep(100);
    12c2:	2064      	movs	r0, #100	; 0x64
    12c4:	4b45      	ldr	r3, [pc, #276]	; (13dc <flight+0x260>)
    12c6:	4798      	blx	r3
    12c8:	e7c3      	b.n	1252 <flight+0xd6>

        break;
    case flightDrogue:


        if (pageReady) {
    12ca:	4b3f      	ldr	r3, [pc, #252]	; (13c8 <flight+0x24c>)
    12cc:	781a      	ldrb	r2, [r3, #0]
    12ce:	2a00      	cmp	r2, #0
    12d0:	d0bf      	beq.n	1252 <flight+0xd6>
            pageReady = false;
    12d2:	2200      	movs	r2, #0
    12d4:	701a      	strb	r2, [r3, #0]
    12d6:	2280      	movs	r2, #128	; 0x80
    12d8:	4b2c      	ldr	r3, [pc, #176]	; (138c <flight+0x210>)
            pinToggle(LedPin);
            //AT25SFHoldTillReady();
            u8_t bytesWritten = AT25SEWritePage(currentAddress,pageToWrite);
    12da:	4d3c      	ldr	r5, [pc, #240]	; (13cc <flight+0x250>)
    12dc:	0352      	lsls	r2, r2, #13
    12de:	61da      	str	r2, [r3, #28]
    12e0:	493b      	ldr	r1, [pc, #236]	; (13d0 <flight+0x254>)
    12e2:	4b3c      	ldr	r3, [pc, #240]	; (13d4 <flight+0x258>)
    12e4:	6828      	ldr	r0, [r5, #0]
    12e6:	4798      	blx	r3
            currentAddress = (currentAddress + 0x100);
    12e8:	682b      	ldr	r3, [r5, #0]
    12ea:	3301      	adds	r3, #1
    12ec:	33ff      	adds	r3, #255	; 0xff
    12ee:	602b      	str	r3, [r5, #0]
    12f0:	e7af      	b.n	1252 <flight+0xd6>

        break;
    case flightTest:

        //simple continuity test
        if ( (sample.voltage.senseA + sample.voltage.senseB +sample.voltage.senseC +sample.voltage.senseD) > 200) {
    12f2:	4b1e      	ldr	r3, [pc, #120]	; (136c <flight+0x1f0>)
    12f4:	8a1d      	ldrh	r5, [r3, #16]
    12f6:	8a5a      	ldrh	r2, [r3, #18]
    12f8:	8a98      	ldrh	r0, [r3, #20]
    12fa:	18aa      	adds	r2, r5, r2
    12fc:	8ad9      	ldrh	r1, [r3, #22]
    12fe:	1812      	adds	r2, r2, r0
    1300:	1852      	adds	r2, r2, r1
    1302:	001d      	movs	r5, r3
    1304:	2ac8      	cmp	r2, #200	; 0xc8
    1306:	dd01      	ble.n	130c <flight+0x190>
            unpluggedJingle();
    1308:	4b2d      	ldr	r3, [pc, #180]	; (13c0 <flight+0x244>)
    130a:	4798      	blx	r3
        }



        if (writeLog) {
    130c:	4b1e      	ldr	r3, [pc, #120]	; (1388 <flight+0x20c>)
    130e:	781a      	ldrb	r2, [r3, #0]
    1310:	2a00      	cmp	r2, #0
    1312:	d015      	beq.n	1340 <flight+0x1c4>
            writeLog = false;
    1314:	2600      	movs	r6, #0
    1316:	701e      	strb	r6, [r3, #0]
            logSensors( );
    1318:	4b2a      	ldr	r3, [pc, #168]	; (13c4 <flight+0x248>)
    131a:	4798      	blx	r3
            if (pageReady) {
    131c:	4b2a      	ldr	r3, [pc, #168]	; (13c8 <flight+0x24c>)
    131e:	781a      	ldrb	r2, [r3, #0]
    1320:	42b2      	cmp	r2, r6
    1322:	d00d      	beq.n	1340 <flight+0x1c4>
    1324:	2280      	movs	r2, #128	; 0x80
                pageReady = false;
    1326:	701e      	strb	r6, [r3, #0]
    1328:	4b18      	ldr	r3, [pc, #96]	; (138c <flight+0x210>)
                pinToggle(LedPin);
                u8_t bytesWritten = AT25SEWritePage(currentAddress,pageToWrite);
    132a:	4e28      	ldr	r6, [pc, #160]	; (13cc <flight+0x250>)
    132c:	0352      	lsls	r2, r2, #13
    132e:	61da      	str	r2, [r3, #28]
    1330:	4927      	ldr	r1, [pc, #156]	; (13d0 <flight+0x254>)
    1332:	4b28      	ldr	r3, [pc, #160]	; (13d4 <flight+0x258>)
    1334:	6830      	ldr	r0, [r6, #0]
    1336:	4798      	blx	r3
                currentAddress = (currentAddress + 0x100);
    1338:	6833      	ldr	r3, [r6, #0]
    133a:	3301      	adds	r3, #1
    133c:	33ff      	adds	r3, #255	; 0xff
    133e:	6033      	str	r3, [r6, #0]
            }
        }


        if (sample.voltage.batFloat < 3.5) {
    1340:	68e8      	ldr	r0, [r5, #12]
    1342:	e788      	b.n	1256 <flight+0xda>

        break;
    }


}
    1344:	bd70      	pop	{r4, r5, r6, pc}
    1346:	46c0      	nop			; (mov r8, r8)
    1348:	2000065c 	.word	0x2000065c
    134c:	000013e1 	.word	0x000013e1
    1350:	00001079 	.word	0x00001079
    1354:	20000504 	.word	0x20000504
    1358:	00002710 	.word	0x00002710
    135c:	00002311 	.word	0x00002311
    1360:	00002035 	.word	0x00002035
    1364:	00000dd9 	.word	0x00000dd9
    1368:	00002881 	.word	0x00002881
    136c:	200007a0 	.word	0x200007a0
    1370:	40600000 	.word	0x40600000
    1374:	00003c45 	.word	0x00003c45
    1378:	42001400 	.word	0x42001400
    137c:	00002871 	.word	0x00002871
    1380:	05fa0004 	.word	0x05fa0004
    1384:	e000ed00 	.word	0xe000ed00
    1388:	20000500 	.word	0x20000500
    138c:	41004400 	.word	0x41004400
    1390:	20000668 	.word	0x20000668
    1394:	00003bf9 	.word	0x00003bf9
    1398:	9999999a 	.word	0x9999999a
    139c:	3fa99999 	.word	0x3fa99999
    13a0:	200004d0 	.word	0x200004d0
    13a4:	0000602d 	.word	0x0000602d
    13a8:	20000670 	.word	0x20000670
    13ac:	00005855 	.word	0x00005855
    13b0:	40140000 	.word	0x40140000
    13b4:	00002091 	.word	0x00002091
    13b8:	000001e5 	.word	0x000001e5
    13bc:	000022d5 	.word	0x000022d5
    13c0:	00000e11 	.word	0x00000e11
    13c4:	000020f5 	.word	0x000020f5
    13c8:	20000790 	.word	0x20000790
    13cc:	20000794 	.word	0x20000794
    13d0:	20000690 	.word	0x20000690
    13d4:	000002cd 	.word	0x000002cd
    13d8:	00003bd1 	.word	0x00003bd1
    13dc:	00000d9d 	.word	0x00000d9d

000013e0 <updateGround>:
#include <util.h>
#include <altimeter.h>

void updateGround(Altimeter *my_altimeter) {
    13e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

    offsets.gravityOffsetBuffer = offsets.gravityOffsetBuffer * 0.8 + sample.accelZ * 0.2;
    13e2:	4b2e      	ldr	r3, [pc, #184]	; (149c <updateGround+0xbc>)
    13e4:	4c2e      	ldr	r4, [pc, #184]	; (14a0 <updateGround+0xc0>)
    13e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    13e8:	4d2e      	ldr	r5, [pc, #184]	; (14a4 <updateGround+0xc4>)
    13ea:	4a2f      	ldr	r2, [pc, #188]	; (14a8 <updateGround+0xc8>)
    13ec:	6920      	ldr	r0, [r4, #16]
    13ee:	6961      	ldr	r1, [r4, #20]
    13f0:	9300      	str	r3, [sp, #0]
    13f2:	4b2e      	ldr	r3, [pc, #184]	; (14ac <updateGround+0xcc>)
    13f4:	47a8      	blx	r5
    13f6:	4b2e      	ldr	r3, [pc, #184]	; (14b0 <updateGround+0xd0>)
    13f8:	0006      	movs	r6, r0
    13fa:	9800      	ldr	r0, [sp, #0]
    13fc:	000f      	movs	r7, r1
    13fe:	4798      	blx	r3
    1400:	4a29      	ldr	r2, [pc, #164]	; (14a8 <updateGround+0xc8>)
    1402:	4b2c      	ldr	r3, [pc, #176]	; (14b4 <updateGround+0xd4>)
    1404:	47a8      	blx	r5
    1406:	0002      	movs	r2, r0
    1408:	000b      	movs	r3, r1
    140a:	0030      	movs	r0, r6
    140c:	0039      	movs	r1, r7
    140e:	4e2a      	ldr	r6, [pc, #168]	; (14b8 <updateGround+0xd8>)
    1410:	47b0      	blx	r6
    offsets.groundOffsetBuffer = offsets.groundOffsetBuffer * 0.5 + altitude * 0.5;
    1412:	4b2a      	ldr	r3, [pc, #168]	; (14bc <updateGround+0xdc>)
#include <util.h>
#include <altimeter.h>

void updateGround(Altimeter *my_altimeter) {

    offsets.gravityOffsetBuffer = offsets.gravityOffsetBuffer * 0.8 + sample.accelZ * 0.2;
    1414:	6120      	str	r0, [r4, #16]
    1416:	6161      	str	r1, [r4, #20]
    offsets.groundOffsetBuffer = offsets.groundOffsetBuffer * 0.5 + altitude * 0.5;
    1418:	69e0      	ldr	r0, [r4, #28]
    141a:	4798      	blx	r3
    141c:	2200      	movs	r2, #0
    141e:	4b28      	ldr	r3, [pc, #160]	; (14c0 <updateGround+0xe0>)
    1420:	47a8      	blx	r5
    1422:	000f      	movs	r7, r1
    1424:	4927      	ldr	r1, [pc, #156]	; (14c4 <updateGround+0xe4>)
    1426:	0006      	movs	r6, r0
    1428:	6808      	ldr	r0, [r1, #0]
    142a:	6849      	ldr	r1, [r1, #4]
    142c:	2200      	movs	r2, #0
    142e:	4b24      	ldr	r3, [pc, #144]	; (14c0 <updateGround+0xe0>)
    1430:	47a8      	blx	r5
    1432:	0002      	movs	r2, r0
    1434:	000b      	movs	r3, r1
    1436:	0030      	movs	r0, r6
    1438:	0039      	movs	r1, r7
    143a:	4e1f      	ldr	r6, [pc, #124]	; (14b8 <updateGround+0xd8>)
    143c:	47b0      	blx	r6
    143e:	4f22      	ldr	r7, [pc, #136]	; (14c8 <updateGround+0xe8>)
    1440:	47b8      	blx	r7
    offsets.groundTemperatureBuffer = offsets.groundTemperatureBuffer * 0.8 + sample.temperatureCelcus * 0.2;
    1442:	4b16      	ldr	r3, [pc, #88]	; (149c <updateGround+0xbc>)
#include <altimeter.h>

void updateGround(Altimeter *my_altimeter) {

    offsets.gravityOffsetBuffer = offsets.gravityOffsetBuffer * 0.8 + sample.accelZ * 0.2;
    offsets.groundOffsetBuffer = offsets.groundOffsetBuffer * 0.5 + altitude * 0.5;
    1444:	61e0      	str	r0, [r4, #28]
    offsets.groundTemperatureBuffer = offsets.groundTemperatureBuffer * 0.8 + sample.temperatureCelcus * 0.2;
    1446:	6bde      	ldr	r6, [r3, #60]	; 0x3c
    1448:	6a60      	ldr	r0, [r4, #36]	; 0x24
    144a:	4b1c      	ldr	r3, [pc, #112]	; (14bc <updateGround+0xdc>)
    144c:	4798      	blx	r3
    144e:	4a16      	ldr	r2, [pc, #88]	; (14a8 <updateGround+0xc8>)
    1450:	4b16      	ldr	r3, [pc, #88]	; (14ac <updateGround+0xcc>)
    1452:	47a8      	blx	r5
    1454:	4b19      	ldr	r3, [pc, #100]	; (14bc <updateGround+0xdc>)
    1456:	9000      	str	r0, [sp, #0]
    1458:	9101      	str	r1, [sp, #4]
    145a:	0030      	movs	r0, r6
    145c:	4798      	blx	r3
    145e:	4a12      	ldr	r2, [pc, #72]	; (14a8 <updateGround+0xc8>)
    1460:	4b14      	ldr	r3, [pc, #80]	; (14b4 <updateGround+0xd4>)
    1462:	47a8      	blx	r5
    1464:	000b      	movs	r3, r1
    1466:	0002      	movs	r2, r0
    1468:	9800      	ldr	r0, [sp, #0]
    146a:	9901      	ldr	r1, [sp, #4]
    146c:	4d12      	ldr	r5, [pc, #72]	; (14b8 <updateGround+0xd8>)
    146e:	47a8      	blx	r5
    1470:	47b8      	blx	r7

    if ((millis() - offsets.offsetBufferTime) > 2000) {
    1472:	4d16      	ldr	r5, [pc, #88]	; (14cc <updateGround+0xec>)

void updateGround(Altimeter *my_altimeter) {

    offsets.gravityOffsetBuffer = offsets.gravityOffsetBuffer * 0.8 + sample.accelZ * 0.2;
    offsets.groundOffsetBuffer = offsets.groundOffsetBuffer * 0.5 + altitude * 0.5;
    offsets.groundTemperatureBuffer = offsets.groundTemperatureBuffer * 0.8 + sample.temperatureCelcus * 0.2;
    1474:	6260      	str	r0, [r4, #36]	; 0x24

    if ((millis() - offsets.offsetBufferTime) > 2000) {
    1476:	47a8      	blx	r5
    1478:	6823      	ldr	r3, [r4, #0]
    147a:	1ac0      	subs	r0, r0, r3
    147c:	23fa      	movs	r3, #250	; 0xfa
    147e:	00db      	lsls	r3, r3, #3
    1480:	4298      	cmp	r0, r3
    1482:	d909      	bls.n	1498 <updateGround+0xb8>
        //recursive filter
        offsets.groundOffset = offsets.groundOffsetBuffer;
    1484:	69e3      	ldr	r3, [r4, #28]
    1486:	61a3      	str	r3, [r4, #24]
        offsets.groundTemperature = offsets.groundTemperatureBuffer;
    1488:	6a63      	ldr	r3, [r4, #36]	; 0x24
    148a:	6223      	str	r3, [r4, #32]
        offsets.gravityOffset = offsets.gravityOffsetBuffer;
    148c:	6922      	ldr	r2, [r4, #16]
    148e:	6963      	ldr	r3, [r4, #20]
    1490:	60a2      	str	r2, [r4, #8]
    1492:	60e3      	str	r3, [r4, #12]
        offsets.offsetBufferTime = millis();
    1494:	47a8      	blx	r5
    1496:	6020      	str	r0, [r4, #0]
    }
}
    1498:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    149a:	46c0      	nop			; (mov r8, r8)
    149c:	200007a0 	.word	0x200007a0
    14a0:	200004d0 	.word	0x200004d0
    14a4:	00005361 	.word	0x00005361
    14a8:	9999999a 	.word	0x9999999a
    14ac:	3fe99999 	.word	0x3fe99999
    14b0:	0000609d 	.word	0x0000609d
    14b4:	3fc99999 	.word	0x3fc99999
    14b8:	000044c1 	.word	0x000044c1
    14bc:	0000602d 	.word	0x0000602d
    14c0:	3fe00000 	.word	0x3fe00000
    14c4:	20000670 	.word	0x20000670
    14c8:	00003d1d 	.word	0x00003d1d
    14cc:	00001079 	.word	0x00001079

000014d0 <computeKalmanGains>:
    dt = 0.008;

    /*
     Fill in state transition matrix and its transpose
    */
    phi[0][1]    = dt;
    14d0:	4bdc      	ldr	r3, [pc, #880]	; (1844 <computeKalmanGains+0x374>)
    14d2:	48dd      	ldr	r0, [pc, #884]	; (1848 <computeKalmanGains+0x378>)
    14d4:	49dd      	ldr	r1, [pc, #884]	; (184c <computeKalmanGains+0x37c>)

double altitude_variance = ALTITUDESIGMA*ALTITUDESIGMA;
double acceleration_variance = ACCELERATIONSIGMA*ACCELERATIONSIGMA;
double model_variance  = MODELSIGMA*MODELSIGMA;

void computeKalmanGains() {
    14d6:	b5f0      	push	{r4, r5, r6, r7, lr}
    dt = 0.008;

    /*
     Fill in state transition matrix and its transpose
    */
    phi[0][1]    = dt;
    14d8:	6098      	str	r0, [r3, #8]
    14da:	60d9      	str	r1, [r3, #12]
    phi[1][2]    = dt;
    14dc:	6298      	str	r0, [r3, #40]	; 0x28
    14de:	62d9      	str	r1, [r3, #44]	; 0x2c
    phi[0][2]    = dt*dt/2.0;
    14e0:	48db      	ldr	r0, [pc, #876]	; (1850 <computeKalmanGains+0x380>)
    14e2:	49dc      	ldr	r1, [pc, #880]	; (1854 <computeKalmanGains+0x384>)
    14e4:	2200      	movs	r2, #0
    14e6:	6118      	str	r0, [r3, #16]
    14e8:	6159      	str	r1, [r3, #20]


    for( i = 0; i <= 2; i++)
        for( j = 0; j <=1; j++) {
            lastkgain[i][j] = .001;
            kgain[i][j] = 1.0;
    14ea:	2000      	movs	r0, #0
    14ec:	49da      	ldr	r1, [pc, #872]	; (1858 <computeKalmanGains+0x388>)



    for( i = 0; i <= 2; i++)
        for( j = 0; j <=1; j++) {
            lastkgain[i][j] = .001;
    14ee:	4cd6      	ldr	r4, [pc, #856]	; (1848 <computeKalmanGains+0x378>)
    14f0:	468c      	mov	ip, r1
    14f2:	4dda      	ldr	r5, [pc, #872]	; (185c <computeKalmanGains+0x38c>)
            kgain[i][j] = 1.0;
    14f4:	49da      	ldr	r1, [pc, #872]	; (1860 <computeKalmanGains+0x390>)

double altitude_variance = ALTITUDESIGMA*ALTITUDESIGMA;
double acceleration_variance = ACCELERATIONSIGMA*ACCELERATIONSIGMA;
double model_variance  = MODELSIGMA*MODELSIGMA;

void computeKalmanGains() {
    14f6:	b0cd      	sub	sp, #308	; 0x134
    14f8:	ae40      	add	r6, sp, #256	; 0x100
    14fa:	1997      	adds	r7, r2, r6
    14fc:	4666      	mov	r6, ip
    14fe:	1996      	adds	r6, r2, r6
    1500:	3210      	adds	r2, #16



    for( i = 0; i <= 2; i++)
        for( j = 0; j <=1; j++) {
            lastkgain[i][j] = .001;
    1502:	603c      	str	r4, [r7, #0]
    1504:	607d      	str	r5, [r7, #4]
            kgain[i][j] = 1.0;
    1506:	6030      	str	r0, [r6, #0]
    1508:	6071      	str	r1, [r6, #4]



    for( i = 0; i <= 2; i++)
        for( j = 0; j <=1; j++) {
            lastkgain[i][j] = .001;
    150a:	60bc      	str	r4, [r7, #8]
    150c:	60fd      	str	r5, [r7, #12]
            kgain[i][j] = 1.0;
    150e:	60b0      	str	r0, [r6, #8]
    1510:	60f1      	str	r1, [r6, #12]
    phit[2][1]    = dt;
    phit[2][0]    = dt*dt/2.0;



    for( i = 0; i <= 2; i++)
    1512:	2a30      	cmp	r2, #48	; 0x30
    1514:	d1f0      	bne.n	14f8 <computeKalmanGains+0x28>

    /* Compute the Kalman gain matrix. */
    while(1) {
        /* Propagate state covariance */

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
    1516:	6819      	ldr	r1, [r3, #0]
    1518:	685a      	ldr	r2, [r3, #4]
    151a:	911a      	str	r1, [sp, #104]	; 0x68
    151c:	921b      	str	r2, [sp, #108]	; 0x6c
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
    151e:	6999      	ldr	r1, [r3, #24]
    1520:	69da      	ldr	r2, [r3, #28]
    1522:	911c      	str	r1, [sp, #112]	; 0x70
    1524:	921d      	str	r2, [sp, #116]	; 0x74
    1526:	6a19      	ldr	r1, [r3, #32]
    1528:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    152a:	911e      	str	r1, [sp, #120]	; 0x78
    152c:	921f      	str	r2, [sp, #124]	; 0x7c
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
    152e:	6b19      	ldr	r1, [r3, #48]	; 0x30
    1530:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    1532:	9120      	str	r1, [sp, #128]	; 0x80
    1534:	9221      	str	r2, [sp, #132]	; 0x84
    1536:	6b99      	ldr	r1, [r3, #56]	; 0x38
    1538:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    153a:	9122      	str	r1, [sp, #136]	; 0x88
    153c:	9223      	str	r2, [sp, #140]	; 0x8c
    153e:	6c19      	ldr	r1, [r3, #64]	; 0x40
    1540:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    1542:	9124      	str	r1, [sp, #144]	; 0x90
    1544:	9225      	str	r2, [sp, #148]	; 0x94
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
        pestp[2][1] = term[2][0] * phit[0][1] + term[2][1] * phit[1][1] + term[2][2] * phit[2][1];
        pestp[2][2] = term[2][0] * phit[0][2] + term[2][1] * phit[1][2] + term[2][2] * phit[2][2];

        pestp[2][2] = pestp[2][2] + model_variance;
    1546:	6c99      	ldr	r1, [r3, #72]	; 0x48
    1548:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    154a:	913a      	str	r1, [sp, #232]	; 0xe8
    154c:	923b      	str	r2, [sp, #236]	; 0xec
        /*
          Calculate Kalman Gain
        */
        det = (pestp[0][0]+altitude_variance)*(pestp[2][2] + acceleration_variance) - pestp[2][0] * pestp[0][2];
    154e:	6d19      	ldr	r1, [r3, #80]	; 0x50
    1550:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    1552:	6ddc      	ldr	r4, [r3, #92]	; 0x5c
    1554:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    1556:	933e      	str	r3, [sp, #248]	; 0xf8
    1558:	943f      	str	r4, [sp, #252]	; 0xfc
    155a:	2300      	movs	r3, #0
    155c:	4cc1      	ldr	r4, [pc, #772]	; (1864 <computeKalmanGains+0x394>)
    155e:	913c      	str	r1, [sp, #240]	; 0xf0
    1560:	923d      	str	r2, [sp, #244]	; 0xf4
    1562:	9302      	str	r3, [sp, #8]
    1564:	9403      	str	r4, [sp, #12]
    1566:	2300      	movs	r3, #0
    1568:	2400      	movs	r4, #0
    156a:	9310      	str	r3, [sp, #64]	; 0x40
    156c:	9411      	str	r4, [sp, #68]	; 0x44
    156e:	9300      	str	r3, [sp, #0]
    1570:	9401      	str	r4, [sp, #4]
    1572:	9304      	str	r3, [sp, #16]
    1574:	9405      	str	r4, [sp, #20]
    1576:	2300      	movs	r3, #0
    1578:	4cba      	ldr	r4, [pc, #744]	; (1864 <computeKalmanGains+0x394>)
    157a:	930e      	str	r3, [sp, #56]	; 0x38
    157c:	940f      	str	r4, [sp, #60]	; 0x3c
    157e:	2300      	movs	r3, #0
    1580:	2400      	movs	r4, #0
    1582:	9308      	str	r3, [sp, #32]
    1584:	9409      	str	r4, [sp, #36]	; 0x24
    1586:	930c      	str	r3, [sp, #48]	; 0x30
    1588:	940d      	str	r4, [sp, #52]	; 0x34
    158a:	930a      	str	r3, [sp, #40]	; 0x28
    158c:	940b      	str	r4, [sp, #44]	; 0x2c
    158e:	2480      	movs	r4, #128	; 0x80
    1590:	2300      	movs	r3, #0
    1592:	05e4      	lsls	r4, r4, #23
    1594:	9306      	str	r3, [sp, #24]
    1596:	9407      	str	r4, [sp, #28]
    1598:	2300      	movs	r3, #0
    159a:	9338      	str	r3, [sp, #224]	; 0xe0

    /* Compute the Kalman gain matrix. */
    while(1) {
        /* Propagate state covariance */

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
    159c:	4db2      	ldr	r5, [pc, #712]	; (1868 <computeKalmanGains+0x398>)
    159e:	9a06      	ldr	r2, [sp, #24]
    15a0:	9b07      	ldr	r3, [sp, #28]
    15a2:	981a      	ldr	r0, [sp, #104]	; 0x68
    15a4:	991b      	ldr	r1, [sp, #108]	; 0x6c
    15a6:	47a8      	blx	r5
    15a8:	4aa7      	ldr	r2, [pc, #668]	; (1848 <computeKalmanGains+0x378>)
    15aa:	0006      	movs	r6, r0
    15ac:	000f      	movs	r7, r1
    15ae:	9808      	ldr	r0, [sp, #32]
    15b0:	9909      	ldr	r1, [sp, #36]	; 0x24
    15b2:	4ba6      	ldr	r3, [pc, #664]	; (184c <computeKalmanGains+0x37c>)
    15b4:	47a8      	blx	r5
    15b6:	4cad      	ldr	r4, [pc, #692]	; (186c <computeKalmanGains+0x39c>)
    15b8:	0002      	movs	r2, r0
    15ba:	000b      	movs	r3, r1
    15bc:	0030      	movs	r0, r6
    15be:	0039      	movs	r1, r7
    15c0:	47a0      	blx	r4
    15c2:	4aa3      	ldr	r2, [pc, #652]	; (1850 <computeKalmanGains+0x380>)
    15c4:	0006      	movs	r6, r0
    15c6:	000f      	movs	r7, r1
    15c8:	9800      	ldr	r0, [sp, #0]
    15ca:	9901      	ldr	r1, [sp, #4]
    15cc:	4ba1      	ldr	r3, [pc, #644]	; (1854 <computeKalmanGains+0x384>)
    15ce:	47a8      	blx	r5
    15d0:	0002      	movs	r2, r0
    15d2:	000b      	movs	r3, r1
    15d4:	0030      	movs	r0, r6
    15d6:	0039      	movs	r1, r7
    15d8:	47a0      	blx	r4
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
    15da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    15dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c

    /* Compute the Kalman gain matrix. */
    while(1) {
        /* Propagate state covariance */

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
    15de:	9016      	str	r0, [sp, #88]	; 0x58
    15e0:	9117      	str	r1, [sp, #92]	; 0x5c
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
    15e2:	981a      	ldr	r0, [sp, #104]	; 0x68
    15e4:	991b      	ldr	r1, [sp, #108]	; 0x6c
    15e6:	47a8      	blx	r5
    15e8:	4a97      	ldr	r2, [pc, #604]	; (1848 <computeKalmanGains+0x378>)
    15ea:	0006      	movs	r6, r0
    15ec:	000f      	movs	r7, r1
    15ee:	980e      	ldr	r0, [sp, #56]	; 0x38
    15f0:	990f      	ldr	r1, [sp, #60]	; 0x3c
    15f2:	4b96      	ldr	r3, [pc, #600]	; (184c <computeKalmanGains+0x37c>)
    15f4:	47a8      	blx	r5
    15f6:	0002      	movs	r2, r0
    15f8:	000b      	movs	r3, r1
    15fa:	0030      	movs	r0, r6
    15fc:	0039      	movs	r1, r7
    15fe:	47a0      	blx	r4
    1600:	4a93      	ldr	r2, [pc, #588]	; (1850 <computeKalmanGains+0x380>)
    1602:	0006      	movs	r6, r0
    1604:	000f      	movs	r7, r1
    1606:	9810      	ldr	r0, [sp, #64]	; 0x40
    1608:	9911      	ldr	r1, [sp, #68]	; 0x44
    160a:	4b92      	ldr	r3, [pc, #584]	; (1854 <computeKalmanGains+0x384>)
    160c:	47a8      	blx	r5
    160e:	0002      	movs	r2, r0
    1610:	000b      	movs	r3, r1
    1612:	0030      	movs	r0, r6
    1614:	0039      	movs	r1, r7
    1616:	47a0      	blx	r4
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
    1618:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    161a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    /* Compute the Kalman gain matrix. */
    while(1) {
        /* Propagate state covariance */

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
    161c:	9012      	str	r0, [sp, #72]	; 0x48
    161e:	9113      	str	r1, [sp, #76]	; 0x4c
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
    1620:	981a      	ldr	r0, [sp, #104]	; 0x68
    1622:	991b      	ldr	r1, [sp, #108]	; 0x6c
    1624:	47a8      	blx	r5
    1626:	4a88      	ldr	r2, [pc, #544]	; (1848 <computeKalmanGains+0x378>)
    1628:	0006      	movs	r6, r0
    162a:	000f      	movs	r7, r1
    162c:	9804      	ldr	r0, [sp, #16]
    162e:	9905      	ldr	r1, [sp, #20]
    1630:	4b86      	ldr	r3, [pc, #536]	; (184c <computeKalmanGains+0x37c>)
    1632:	47a8      	blx	r5
    1634:	0002      	movs	r2, r0
    1636:	000b      	movs	r3, r1
    1638:	0030      	movs	r0, r6
    163a:	0039      	movs	r1, r7
    163c:	47a0      	blx	r4
    163e:	4a84      	ldr	r2, [pc, #528]	; (1850 <computeKalmanGains+0x380>)
    1640:	0006      	movs	r6, r0
    1642:	000f      	movs	r7, r1
    1644:	9802      	ldr	r0, [sp, #8]
    1646:	9903      	ldr	r1, [sp, #12]
    1648:	4b82      	ldr	r3, [pc, #520]	; (1854 <computeKalmanGains+0x384>)
    164a:	47a8      	blx	r5
    164c:	0002      	movs	r2, r0
    164e:	000b      	movs	r3, r1
    1650:	0030      	movs	r0, r6
    1652:	0039      	movs	r1, r7
    1654:	47a0      	blx	r4
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
    1656:	9a06      	ldr	r2, [sp, #24]
    1658:	9b07      	ldr	r3, [sp, #28]
    while(1) {
        /* Propagate state covariance */

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
    165a:	9014      	str	r0, [sp, #80]	; 0x50
    165c:	9115      	str	r1, [sp, #84]	; 0x54
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
    165e:	981c      	ldr	r0, [sp, #112]	; 0x70
    1660:	991d      	ldr	r1, [sp, #116]	; 0x74
    1662:	47a8      	blx	r5
    1664:	9a08      	ldr	r2, [sp, #32]
    1666:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1668:	0006      	movs	r6, r0
    166a:	000f      	movs	r7, r1
    166c:	981e      	ldr	r0, [sp, #120]	; 0x78
    166e:	991f      	ldr	r1, [sp, #124]	; 0x7c
    1670:	47a8      	blx	r5
    1672:	0002      	movs	r2, r0
    1674:	000b      	movs	r3, r1
    1676:	0030      	movs	r0, r6
    1678:	0039      	movs	r1, r7
    167a:	47a0      	blx	r4
    167c:	4a72      	ldr	r2, [pc, #456]	; (1848 <computeKalmanGains+0x378>)
    167e:	0006      	movs	r6, r0
    1680:	000f      	movs	r7, r1
    1682:	9800      	ldr	r0, [sp, #0]
    1684:	9901      	ldr	r1, [sp, #4]
    1686:	4b71      	ldr	r3, [pc, #452]	; (184c <computeKalmanGains+0x37c>)
    1688:	47a8      	blx	r5
    168a:	0002      	movs	r2, r0
    168c:	000b      	movs	r3, r1
    168e:	0030      	movs	r0, r6
    1690:	0039      	movs	r1, r7
    1692:	47a0      	blx	r4
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
    1694:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    1696:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
        /* Propagate state covariance */

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
    1698:	9018      	str	r0, [sp, #96]	; 0x60
    169a:	9119      	str	r1, [sp, #100]	; 0x64
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
    169c:	981c      	ldr	r0, [sp, #112]	; 0x70
    169e:	991d      	ldr	r1, [sp, #116]	; 0x74
    16a0:	47a8      	blx	r5
    16a2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    16a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    16a6:	0006      	movs	r6, r0
    16a8:	000f      	movs	r7, r1
    16aa:	981e      	ldr	r0, [sp, #120]	; 0x78
    16ac:	991f      	ldr	r1, [sp, #124]	; 0x7c
    16ae:	47a8      	blx	r5
    16b0:	0002      	movs	r2, r0
    16b2:	000b      	movs	r3, r1
    16b4:	0030      	movs	r0, r6
    16b6:	0039      	movs	r1, r7
    16b8:	47a0      	blx	r4
    16ba:	4a63      	ldr	r2, [pc, #396]	; (1848 <computeKalmanGains+0x378>)
    16bc:	0006      	movs	r6, r0
    16be:	000f      	movs	r7, r1
    16c0:	9810      	ldr	r0, [sp, #64]	; 0x40
    16c2:	9911      	ldr	r1, [sp, #68]	; 0x44
    16c4:	4b61      	ldr	r3, [pc, #388]	; (184c <computeKalmanGains+0x37c>)
    16c6:	47a8      	blx	r5
    16c8:	0002      	movs	r2, r0
    16ca:	000b      	movs	r3, r1
    16cc:	0030      	movs	r0, r6
    16ce:	0039      	movs	r1, r7
    16d0:	47a0      	blx	r4
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
    16d2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    16d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
    16d6:	9026      	str	r0, [sp, #152]	; 0x98
    16d8:	9127      	str	r1, [sp, #156]	; 0x9c
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
    16da:	981c      	ldr	r0, [sp, #112]	; 0x70
    16dc:	991d      	ldr	r1, [sp, #116]	; 0x74
    16de:	47a8      	blx	r5
    16e0:	9a04      	ldr	r2, [sp, #16]
    16e2:	9b05      	ldr	r3, [sp, #20]
    16e4:	0006      	movs	r6, r0
    16e6:	000f      	movs	r7, r1
    16e8:	981e      	ldr	r0, [sp, #120]	; 0x78
    16ea:	991f      	ldr	r1, [sp, #124]	; 0x7c
    16ec:	47a8      	blx	r5
    16ee:	0002      	movs	r2, r0
    16f0:	000b      	movs	r3, r1
    16f2:	0030      	movs	r0, r6
    16f4:	0039      	movs	r1, r7
    16f6:	47a0      	blx	r4
    16f8:	4a53      	ldr	r2, [pc, #332]	; (1848 <computeKalmanGains+0x378>)
    16fa:	0006      	movs	r6, r0
    16fc:	000f      	movs	r7, r1
    16fe:	9802      	ldr	r0, [sp, #8]
    1700:	9903      	ldr	r1, [sp, #12]
    1702:	4b52      	ldr	r3, [pc, #328]	; (184c <computeKalmanGains+0x37c>)
    1704:	47a8      	blx	r5
    1706:	0002      	movs	r2, r0
    1708:	000b      	movs	r3, r1
    170a:	0030      	movs	r0, r6
    170c:	0039      	movs	r1, r7
    170e:	47a0      	blx	r4
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
    1710:	9a06      	ldr	r2, [sp, #24]
    1712:	9b07      	ldr	r3, [sp, #28]
        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
    1714:	9028      	str	r0, [sp, #160]	; 0xa0
    1716:	9129      	str	r1, [sp, #164]	; 0xa4
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
    1718:	9820      	ldr	r0, [sp, #128]	; 0x80
    171a:	9921      	ldr	r1, [sp, #132]	; 0x84
    171c:	47a8      	blx	r5
    171e:	9a08      	ldr	r2, [sp, #32]
    1720:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1722:	0006      	movs	r6, r0
    1724:	000f      	movs	r7, r1
    1726:	9822      	ldr	r0, [sp, #136]	; 0x88
    1728:	9923      	ldr	r1, [sp, #140]	; 0x8c
    172a:	47a8      	blx	r5
    172c:	0002      	movs	r2, r0
    172e:	000b      	movs	r3, r1
    1730:	0030      	movs	r0, r6
    1732:	0039      	movs	r1, r7
    1734:	47a0      	blx	r4
    1736:	9a00      	ldr	r2, [sp, #0]
    1738:	9b01      	ldr	r3, [sp, #4]
    173a:	0006      	movs	r6, r0
    173c:	000f      	movs	r7, r1
    173e:	9824      	ldr	r0, [sp, #144]	; 0x90
    1740:	9925      	ldr	r1, [sp, #148]	; 0x94
    1742:	47a8      	blx	r5
    1744:	0002      	movs	r2, r0
    1746:	000b      	movs	r3, r1
    1748:	0030      	movs	r0, r6
    174a:	0039      	movs	r1, r7
    174c:	47a0      	blx	r4
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
    174e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    1750:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
    1752:	902e      	str	r0, [sp, #184]	; 0xb8
    1754:	912f      	str	r1, [sp, #188]	; 0xbc
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
    1756:	9820      	ldr	r0, [sp, #128]	; 0x80
    1758:	9921      	ldr	r1, [sp, #132]	; 0x84
    175a:	47a8      	blx	r5
    175c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    175e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1760:	0006      	movs	r6, r0
    1762:	000f      	movs	r7, r1
    1764:	9822      	ldr	r0, [sp, #136]	; 0x88
    1766:	9923      	ldr	r1, [sp, #140]	; 0x8c
    1768:	47a8      	blx	r5
    176a:	0002      	movs	r2, r0
    176c:	000b      	movs	r3, r1
    176e:	0030      	movs	r0, r6
    1770:	0039      	movs	r1, r7
    1772:	47a0      	blx	r4
    1774:	9a10      	ldr	r2, [sp, #64]	; 0x40
    1776:	9b11      	ldr	r3, [sp, #68]	; 0x44
    1778:	0006      	movs	r6, r0
    177a:	000f      	movs	r7, r1
    177c:	9824      	ldr	r0, [sp, #144]	; 0x90
    177e:	9925      	ldr	r1, [sp, #148]	; 0x94
    1780:	47a8      	blx	r5
    1782:	0002      	movs	r2, r0
    1784:	000b      	movs	r3, r1
    1786:	0030      	movs	r0, r6
    1788:	0039      	movs	r1, r7
    178a:	47a0      	blx	r4
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];
    178c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    178e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
    1790:	9006      	str	r0, [sp, #24]
    1792:	9107      	str	r1, [sp, #28]
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];
    1794:	9820      	ldr	r0, [sp, #128]	; 0x80
    1796:	9921      	ldr	r1, [sp, #132]	; 0x84
    1798:	47a8      	blx	r5
    179a:	9a04      	ldr	r2, [sp, #16]
    179c:	9b05      	ldr	r3, [sp, #20]
    179e:	0006      	movs	r6, r0
    17a0:	000f      	movs	r7, r1
    17a2:	9822      	ldr	r0, [sp, #136]	; 0x88
    17a4:	9923      	ldr	r1, [sp, #140]	; 0x8c
    17a6:	47a8      	blx	r5
    17a8:	0002      	movs	r2, r0
    17aa:	000b      	movs	r3, r1
    17ac:	0030      	movs	r0, r6
    17ae:	0039      	movs	r1, r7
    17b0:	47a0      	blx	r4
    17b2:	9a02      	ldr	r2, [sp, #8]
    17b4:	9b03      	ldr	r3, [sp, #12]
    17b6:	0006      	movs	r6, r0
    17b8:	000f      	movs	r7, r1
    17ba:	9824      	ldr	r0, [sp, #144]	; 0x90
    17bc:	9925      	ldr	r1, [sp, #148]	; 0x94
    17be:	47a8      	blx	r5
    17c0:	0002      	movs	r2, r0
    17c2:	000b      	movs	r3, r1
    17c4:	0030      	movs	r0, r6
    17c6:	0039      	movs	r1, r7
    17c8:	47a0      	blx	r4

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
    17ca:	4a1f      	ldr	r2, [pc, #124]	; (1848 <computeKalmanGains+0x378>)
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];
    17cc:	9002      	str	r0, [sp, #8]
    17ce:	9103      	str	r1, [sp, #12]

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
    17d0:	9812      	ldr	r0, [sp, #72]	; 0x48
    17d2:	9913      	ldr	r1, [sp, #76]	; 0x4c
    17d4:	4b1d      	ldr	r3, [pc, #116]	; (184c <computeKalmanGains+0x37c>)
    17d6:	47a8      	blx	r5
    17d8:	9a16      	ldr	r2, [sp, #88]	; 0x58
    17da:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    17dc:	47a0      	blx	r4
    17de:	4a1c      	ldr	r2, [pc, #112]	; (1850 <computeKalmanGains+0x380>)
    17e0:	0006      	movs	r6, r0
    17e2:	000f      	movs	r7, r1
    17e4:	9814      	ldr	r0, [sp, #80]	; 0x50
    17e6:	9915      	ldr	r1, [sp, #84]	; 0x54
    17e8:	4b1a      	ldr	r3, [pc, #104]	; (1854 <computeKalmanGains+0x384>)
    17ea:	47a8      	blx	r5
    17ec:	0002      	movs	r2, r0
    17ee:	000b      	movs	r3, r1
    17f0:	0030      	movs	r0, r6
    17f2:	0039      	movs	r1, r7
    17f4:	47a0      	blx	r4
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
    17f6:	2200      	movs	r2, #0
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
    17f8:	9008      	str	r0, [sp, #32]
    17fa:	9109      	str	r1, [sp, #36]	; 0x24
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
    17fc:	9816      	ldr	r0, [sp, #88]	; 0x58
    17fe:	9917      	ldr	r1, [sp, #92]	; 0x5c
    1800:	2300      	movs	r3, #0
    1802:	47a8      	blx	r5
    1804:	0006      	movs	r6, r0
    1806:	000f      	movs	r7, r1
    1808:	0002      	movs	r2, r0
    180a:	000b      	movs	r3, r1
    180c:	9812      	ldr	r0, [sp, #72]	; 0x48
    180e:	9913      	ldr	r1, [sp, #76]	; 0x4c
    1810:	47a0      	blx	r4
    1812:	4a0d      	ldr	r2, [pc, #52]	; (1848 <computeKalmanGains+0x378>)
    1814:	9000      	str	r0, [sp, #0]
    1816:	9101      	str	r1, [sp, #4]
    1818:	9814      	ldr	r0, [sp, #80]	; 0x50
    181a:	9915      	ldr	r1, [sp, #84]	; 0x54
    181c:	4b0b      	ldr	r3, [pc, #44]	; (184c <computeKalmanGains+0x37c>)
    181e:	47a8      	blx	r5
    1820:	0002      	movs	r2, r0
    1822:	000b      	movs	r3, r1
    1824:	9800      	ldr	r0, [sp, #0]
    1826:	9901      	ldr	r1, [sp, #4]
    1828:	47a0      	blx	r4
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
    182a:	2200      	movs	r2, #0
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
    182c:	9030      	str	r0, [sp, #192]	; 0xc0
    182e:	9131      	str	r1, [sp, #196]	; 0xc4
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
    1830:	9812      	ldr	r0, [sp, #72]	; 0x48
    1832:	9913      	ldr	r1, [sp, #76]	; 0x4c
    1834:	2300      	movs	r3, #0
    1836:	47a8      	blx	r5
    1838:	0032      	movs	r2, r6
    183a:	003b      	movs	r3, r7
    183c:	47a0      	blx	r4
    183e:	9a14      	ldr	r2, [sp, #80]	; 0x50
    1840:	9b15      	ldr	r3, [sp, #84]	; 0x54
    1842:	e015      	b.n	1870 <computeKalmanGains+0x3a0>
    1844:	20000010 	.word	0x20000010
    1848:	d2f1a9fc 	.word	0xd2f1a9fc
    184c:	3f80624d 	.word	0x3f80624d
    1850:	a0b5ed8d 	.word	0xa0b5ed8d
    1854:	3f00c6f7 	.word	0x3f00c6f7
    1858:	20000628 	.word	0x20000628
    185c:	3f50624d 	.word	0x3f50624d
    1860:	3ff00000 	.word	0x3ff00000
    1864:	40220000 	.word	0x40220000
    1868:	00005361 	.word	0x00005361
    186c:	000044c1 	.word	0x000044c1
    1870:	47a0      	blx	r4
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
    1872:	4ad9      	ldr	r2, [pc, #868]	; (1bd8 <computeKalmanGains+0x708>)
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
    1874:	9112      	str	r1, [sp, #72]	; 0x48
    1876:	9004      	str	r0, [sp, #16]
    1878:	9116      	str	r1, [sp, #88]	; 0x58
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
    187a:	4bd8      	ldr	r3, [pc, #864]	; (1bdc <computeKalmanGains+0x70c>)
    187c:	9826      	ldr	r0, [sp, #152]	; 0x98
    187e:	9927      	ldr	r1, [sp, #156]	; 0x9c
    1880:	47a8      	blx	r5
    1882:	9a18      	ldr	r2, [sp, #96]	; 0x60
    1884:	9b19      	ldr	r3, [sp, #100]	; 0x64
    1886:	47a0      	blx	r4
    1888:	4ad5      	ldr	r2, [pc, #852]	; (1be0 <computeKalmanGains+0x710>)
    188a:	0006      	movs	r6, r0
    188c:	000f      	movs	r7, r1
    188e:	9828      	ldr	r0, [sp, #160]	; 0xa0
    1890:	9929      	ldr	r1, [sp, #164]	; 0xa4
    1892:	4bd4      	ldr	r3, [pc, #848]	; (1be4 <computeKalmanGains+0x714>)
    1894:	47a8      	blx	r5
    1896:	0002      	movs	r2, r0
    1898:	000b      	movs	r3, r1
    189a:	0030      	movs	r0, r6
    189c:	0039      	movs	r1, r7
    189e:	47a0      	blx	r4
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
    18a0:	2200      	movs	r2, #0
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
    18a2:	902a      	str	r0, [sp, #168]	; 0xa8
    18a4:	912b      	str	r1, [sp, #172]	; 0xac
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
    18a6:	9818      	ldr	r0, [sp, #96]	; 0x60
    18a8:	9919      	ldr	r1, [sp, #100]	; 0x64
    18aa:	2300      	movs	r3, #0
    18ac:	47a8      	blx	r5
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
    18ae:	2200      	movs	r2, #0

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
    18b0:	9032      	str	r0, [sp, #200]	; 0xc8
    18b2:	9133      	str	r1, [sp, #204]	; 0xcc
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
    18b4:	9826      	ldr	r0, [sp, #152]	; 0x98
    18b6:	9927      	ldr	r1, [sp, #156]	; 0x9c
    18b8:	2300      	movs	r3, #0
    18ba:	47a8      	blx	r5
    18bc:	9a32      	ldr	r2, [sp, #200]	; 0xc8
    18be:	9b33      	ldr	r3, [sp, #204]	; 0xcc
    18c0:	47a0      	blx	r4
    18c2:	9a28      	ldr	r2, [sp, #160]	; 0xa0
    18c4:	9b29      	ldr	r3, [sp, #164]	; 0xa4
    18c6:	47a0      	blx	r4
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
    18c8:	4ac3      	ldr	r2, [pc, #780]	; (1bd8 <computeKalmanGains+0x708>)
        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
    18ca:	902c      	str	r0, [sp, #176]	; 0xb0
    18cc:	912d      	str	r1, [sp, #180]	; 0xb4
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
    18ce:	9806      	ldr	r0, [sp, #24]
    18d0:	9907      	ldr	r1, [sp, #28]
    18d2:	4bc2      	ldr	r3, [pc, #776]	; (1bdc <computeKalmanGains+0x70c>)
    18d4:	47a8      	blx	r5
    18d6:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
    18d8:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
    18da:	47a0      	blx	r4
    18dc:	4ac0      	ldr	r2, [pc, #768]	; (1be0 <computeKalmanGains+0x710>)
    18de:	0006      	movs	r6, r0
    18e0:	000f      	movs	r7, r1
    18e2:	9802      	ldr	r0, [sp, #8]
    18e4:	9903      	ldr	r1, [sp, #12]
    18e6:	4bbf      	ldr	r3, [pc, #764]	; (1be4 <computeKalmanGains+0x714>)
    18e8:	47a8      	blx	r5
    18ea:	0002      	movs	r2, r0
    18ec:	000b      	movs	r3, r1
    18ee:	0030      	movs	r0, r6
    18f0:	0039      	movs	r1, r7
    18f2:	47a0      	blx	r4
        pestp[2][1] = term[2][0] * phit[0][1] + term[2][1] * phit[1][1] + term[2][2] * phit[2][1];
    18f4:	2200      	movs	r2, #0
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
    18f6:	9000      	str	r0, [sp, #0]
    18f8:	9101      	str	r1, [sp, #4]
        pestp[2][1] = term[2][0] * phit[0][1] + term[2][1] * phit[1][1] + term[2][2] * phit[2][1];
    18fa:	982e      	ldr	r0, [sp, #184]	; 0xb8
    18fc:	992f      	ldr	r1, [sp, #188]	; 0xbc
    18fe:	2300      	movs	r3, #0
    1900:	47a8      	blx	r5
    1902:	0006      	movs	r6, r0
    1904:	000f      	movs	r7, r1
    1906:	0002      	movs	r2, r0
    1908:	000b      	movs	r3, r1
    190a:	9806      	ldr	r0, [sp, #24]
    190c:	9907      	ldr	r1, [sp, #28]
    190e:	47a0      	blx	r4
    1910:	4ab1      	ldr	r2, [pc, #708]	; (1bd8 <computeKalmanGains+0x708>)
    1912:	900a      	str	r0, [sp, #40]	; 0x28
    1914:	910b      	str	r1, [sp, #44]	; 0x2c
    1916:	9802      	ldr	r0, [sp, #8]
    1918:	9903      	ldr	r1, [sp, #12]
    191a:	4bb0      	ldr	r3, [pc, #704]	; (1bdc <computeKalmanGains+0x70c>)
    191c:	47a8      	blx	r5
    191e:	0002      	movs	r2, r0
    1920:	000b      	movs	r3, r1
    1922:	980a      	ldr	r0, [sp, #40]	; 0x28
    1924:	990b      	ldr	r1, [sp, #44]	; 0x2c
    1926:	47a0      	blx	r4
        pestp[2][2] = term[2][0] * phit[0][2] + term[2][1] * phit[1][2] + term[2][2] * phit[2][2];

        pestp[2][2] = pestp[2][2] + model_variance;
    1928:	2200      	movs	r2, #0
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
        pestp[2][1] = term[2][0] * phit[0][1] + term[2][1] * phit[1][1] + term[2][2] * phit[2][1];
    192a:	9010      	str	r0, [sp, #64]	; 0x40
    192c:	9111      	str	r1, [sp, #68]	; 0x44
        pestp[2][2] = term[2][0] * phit[0][2] + term[2][1] * phit[1][2] + term[2][2] * phit[2][2];

        pestp[2][2] = pestp[2][2] + model_variance;
    192e:	9806      	ldr	r0, [sp, #24]
    1930:	9907      	ldr	r1, [sp, #28]
    1932:	2300      	movs	r3, #0
    1934:	47a8      	blx	r5
    1936:	0032      	movs	r2, r6
    1938:	003b      	movs	r3, r7
    193a:	47a0      	blx	r4
    193c:	9a02      	ldr	r2, [sp, #8]
    193e:	9b03      	ldr	r3, [sp, #12]
    1940:	47a0      	blx	r4
    1942:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
    1944:	9b3b      	ldr	r3, [sp, #236]	; 0xec
    1946:	47a0      	blx	r4
        /*
          Calculate Kalman Gain
        */
        det = (pestp[0][0]+altitude_variance)*(pestp[2][2] + acceleration_variance) - pestp[2][0] * pestp[0][2];
    1948:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
    194a:	9b3d      	ldr	r3, [sp, #244]	; 0xf4
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
        pestp[2][1] = term[2][0] * phit[0][1] + term[2][1] * phit[1][1] + term[2][2] * phit[2][1];
        pestp[2][2] = term[2][0] * phit[0][2] + term[2][1] * phit[1][2] + term[2][2] * phit[2][2];

        pestp[2][2] = pestp[2][2] + model_variance;
    194c:	9002      	str	r0, [sp, #8]
    194e:	9103      	str	r1, [sp, #12]
        /*
          Calculate Kalman Gain
        */
        det = (pestp[0][0]+altitude_variance)*(pestp[2][2] + acceleration_variance) - pestp[2][0] * pestp[0][2];
    1950:	9808      	ldr	r0, [sp, #32]
    1952:	9909      	ldr	r1, [sp, #36]	; 0x24
    1954:	47a0      	blx	r4
    1956:	9a3e      	ldr	r2, [sp, #248]	; 0xf8
    1958:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
    195a:	900a      	str	r0, [sp, #40]	; 0x28
    195c:	910b      	str	r1, [sp, #44]	; 0x2c
    195e:	9802      	ldr	r0, [sp, #8]
    1960:	9903      	ldr	r1, [sp, #12]
    1962:	47a0      	blx	r4
    1964:	9a00      	ldr	r2, [sp, #0]
    1966:	9b01      	ldr	r3, [sp, #4]
    1968:	900c      	str	r0, [sp, #48]	; 0x30
    196a:	910d      	str	r1, [sp, #52]	; 0x34
    196c:	9804      	ldr	r0, [sp, #16]
    196e:	9916      	ldr	r1, [sp, #88]	; 0x58
    1970:	47a8      	blx	r5
    1972:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1974:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1976:	900e      	str	r0, [sp, #56]	; 0x38
    1978:	910f      	str	r1, [sp, #60]	; 0x3c
    197a:	980a      	ldr	r0, [sp, #40]	; 0x28
    197c:	990b      	ldr	r1, [sp, #44]	; 0x2c
    197e:	47a8      	blx	r5
    1980:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    1982:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1984:	4e98      	ldr	r6, [pc, #608]	; (1be8 <computeKalmanGains+0x718>)
    1986:	47b0      	blx	r6


        kgain[0][0] = (pestp[0][0] * (pestp[2][2] + acceleration_variance) - pestp[0][2] * pestp[2][0])/det;
    1988:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    198a:	9b0d      	ldr	r3, [sp, #52]	; 0x34

        pestp[2][2] = pestp[2][2] + model_variance;
        /*
          Calculate Kalman Gain
        */
        det = (pestp[0][0]+altitude_variance)*(pestp[2][2] + acceleration_variance) - pestp[2][0] * pestp[0][2];
    198c:	9006      	str	r0, [sp, #24]
    198e:	9107      	str	r1, [sp, #28]


        kgain[0][0] = (pestp[0][0] * (pestp[2][2] + acceleration_variance) - pestp[0][2] * pestp[2][0])/det;
    1990:	9808      	ldr	r0, [sp, #32]
    1992:	9909      	ldr	r1, [sp, #36]	; 0x24
    1994:	47a8      	blx	r5
    1996:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    1998:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    199a:	47b0      	blx	r6
    199c:	9a06      	ldr	r2, [sp, #24]
    199e:	9b07      	ldr	r3, [sp, #28]
    19a0:	4e92      	ldr	r6, [pc, #584]	; (1bec <computeKalmanGains+0x71c>)
    19a2:	47b0      	blx	r6
    19a4:	9034      	str	r0, [sp, #208]	; 0xd0
    19a6:	9135      	str	r1, [sp, #212]	; 0xd4
    19a8:	9a34      	ldr	r2, [sp, #208]	; 0xd0
    19aa:	9b35      	ldr	r3, [sp, #212]	; 0xd4
    19ac:	4990      	ldr	r1, [pc, #576]	; (1bf0 <computeKalmanGains+0x720>)
    19ae:	600a      	str	r2, [r1, #0]
    19b0:	604b      	str	r3, [r1, #4]

        kgain[0][1] = (pestp[0][0] * (-pestp[0][2]) + pestp[0][2] * (pestp[0][0] + altitude_variance))/det;
    19b2:	9808      	ldr	r0, [sp, #32]
    19b4:	9909      	ldr	r1, [sp, #36]	; 0x24
    19b6:	2280      	movs	r2, #128	; 0x80
    19b8:	0612      	lsls	r2, r2, #24
    19ba:	4694      	mov	ip, r2
    19bc:	9b12      	ldr	r3, [sp, #72]	; 0x48
    19be:	9a04      	ldr	r2, [sp, #16]
    19c0:	4463      	add	r3, ip
    19c2:	932e      	str	r3, [sp, #184]	; 0xb8
    19c4:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    19c6:	47a8      	blx	r5
    19c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    19ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    19cc:	0006      	movs	r6, r0
    19ce:	000f      	movs	r7, r1
    19d0:	9804      	ldr	r0, [sp, #16]
    19d2:	9916      	ldr	r1, [sp, #88]	; 0x58
    19d4:	47a8      	blx	r5
    19d6:	0002      	movs	r2, r0
    19d8:	000b      	movs	r3, r1
    19da:	0030      	movs	r0, r6
    19dc:	0039      	movs	r1, r7
    19de:	47a0      	blx	r4
    19e0:	9a06      	ldr	r2, [sp, #24]
    19e2:	9b07      	ldr	r3, [sp, #28]
    19e4:	4e81      	ldr	r6, [pc, #516]	; (1bec <computeKalmanGains+0x71c>)
    19e6:	47b0      	blx	r6
    19e8:	900e      	str	r0, [sp, #56]	; 0x38
    19ea:	910f      	str	r1, [sp, #60]	; 0x3c
    19ec:	4980      	ldr	r1, [pc, #512]	; (1bf0 <computeKalmanGains+0x720>)
    19ee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    19f0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    19f2:	608a      	str	r2, [r1, #8]
    19f4:	60cb      	str	r3, [r1, #12]

        kgain[1][0] = (pestp[1][0] * (pestp[2][2] + acceleration_variance) - pestp[1][2] * pestp[2][0])/det;
    19f6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    19f8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    19fa:	982a      	ldr	r0, [sp, #168]	; 0xa8
    19fc:	992b      	ldr	r1, [sp, #172]	; 0xac
    19fe:	47a8      	blx	r5
    1a00:	9a00      	ldr	r2, [sp, #0]
    1a02:	9b01      	ldr	r3, [sp, #4]
    1a04:	0006      	movs	r6, r0
    1a06:	000f      	movs	r7, r1
    1a08:	982c      	ldr	r0, [sp, #176]	; 0xb0
    1a0a:	992d      	ldr	r1, [sp, #180]	; 0xb4
    1a0c:	47a8      	blx	r5
    1a0e:	0002      	movs	r2, r0
    1a10:	000b      	movs	r3, r1
    1a12:	0030      	movs	r0, r6
    1a14:	0039      	movs	r1, r7
    1a16:	4e74      	ldr	r6, [pc, #464]	; (1be8 <computeKalmanGains+0x718>)
    1a18:	47b0      	blx	r6
    1a1a:	9a06      	ldr	r2, [sp, #24]
    1a1c:	9b07      	ldr	r3, [sp, #28]
    1a1e:	4e73      	ldr	r6, [pc, #460]	; (1bec <computeKalmanGains+0x71c>)
    1a20:	47b0      	blx	r6
    1a22:	0002      	movs	r2, r0
    1a24:	000b      	movs	r3, r1
    1a26:	9139      	str	r1, [sp, #228]	; 0xe4
    1a28:	4971      	ldr	r1, [pc, #452]	; (1bf0 <computeKalmanGains+0x720>)
    1a2a:	9018      	str	r0, [sp, #96]	; 0x60
    1a2c:	610a      	str	r2, [r1, #16]
    1a2e:	614b      	str	r3, [r1, #20]

        kgain[1][1] = (pestp[1][0] * (-pestp[0][2]) + pestp[1][2] * (pestp[0][0] + altitude_variance))/det;
    1a30:	982a      	ldr	r0, [sp, #168]	; 0xa8
    1a32:	992b      	ldr	r1, [sp, #172]	; 0xac
    1a34:	9a04      	ldr	r2, [sp, #16]
    1a36:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    1a38:	47a8      	blx	r5
    1a3a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    1a3c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1a3e:	0006      	movs	r6, r0
    1a40:	000f      	movs	r7, r1
    1a42:	982c      	ldr	r0, [sp, #176]	; 0xb0
    1a44:	992d      	ldr	r1, [sp, #180]	; 0xb4
    1a46:	47a8      	blx	r5
    1a48:	0002      	movs	r2, r0
    1a4a:	000b      	movs	r3, r1
    1a4c:	0030      	movs	r0, r6
    1a4e:	0039      	movs	r1, r7
    1a50:	47a0      	blx	r4
    1a52:	9a06      	ldr	r2, [sp, #24]
    1a54:	9b07      	ldr	r3, [sp, #28]
    1a56:	4e65      	ldr	r6, [pc, #404]	; (1bec <computeKalmanGains+0x71c>)
    1a58:	47b0      	blx	r6
    1a5a:	9012      	str	r0, [sp, #72]	; 0x48
    1a5c:	9113      	str	r1, [sp, #76]	; 0x4c
    1a5e:	9a12      	ldr	r2, [sp, #72]	; 0x48
    1a60:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    1a62:	4963      	ldr	r1, [pc, #396]	; (1bf0 <computeKalmanGains+0x720>)
    1a64:	618a      	str	r2, [r1, #24]
    1a66:	61cb      	str	r3, [r1, #28]

        kgain[2][0] = (pestp[2][0] * (pestp[2][2] + acceleration_variance) - pestp[2][2] * pestp[2][0])/det;
    1a68:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1a6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1a6c:	9800      	ldr	r0, [sp, #0]
    1a6e:	9901      	ldr	r1, [sp, #4]
    1a70:	47a8      	blx	r5
    1a72:	9a02      	ldr	r2, [sp, #8]
    1a74:	9b03      	ldr	r3, [sp, #12]
    1a76:	0006      	movs	r6, r0
    1a78:	000f      	movs	r7, r1
    1a7a:	9800      	ldr	r0, [sp, #0]
    1a7c:	9901      	ldr	r1, [sp, #4]
    1a7e:	47a8      	blx	r5
    1a80:	0002      	movs	r2, r0
    1a82:	000b      	movs	r3, r1
    1a84:	0030      	movs	r0, r6
    1a86:	0039      	movs	r1, r7
    1a88:	4e57      	ldr	r6, [pc, #348]	; (1be8 <computeKalmanGains+0x718>)
    1a8a:	47b0      	blx	r6
    1a8c:	9a06      	ldr	r2, [sp, #24]
    1a8e:	9b07      	ldr	r3, [sp, #28]
    1a90:	4e56      	ldr	r6, [pc, #344]	; (1bec <computeKalmanGains+0x71c>)
    1a92:	47b0      	blx	r6
    1a94:	9014      	str	r0, [sp, #80]	; 0x50
    1a96:	9115      	str	r1, [sp, #84]	; 0x54
    1a98:	9a14      	ldr	r2, [sp, #80]	; 0x50
    1a9a:	9b15      	ldr	r3, [sp, #84]	; 0x54
    1a9c:	4954      	ldr	r1, [pc, #336]	; (1bf0 <computeKalmanGains+0x720>)
    1a9e:	620a      	str	r2, [r1, #32]
    1aa0:	624b      	str	r3, [r1, #36]	; 0x24

        kgain[2][1] = (pestp[2][0] * (-pestp[0][2]) + pestp[2][2] * (pestp[0][0] + altitude_variance))/det;
    1aa2:	9800      	ldr	r0, [sp, #0]
    1aa4:	9901      	ldr	r1, [sp, #4]
    1aa6:	9a04      	ldr	r2, [sp, #16]
    1aa8:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    1aaa:	47a8      	blx	r5
    1aac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    1aae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1ab0:	0006      	movs	r6, r0
    1ab2:	000f      	movs	r7, r1
    1ab4:	9802      	ldr	r0, [sp, #8]
    1ab6:	9903      	ldr	r1, [sp, #12]
    1ab8:	47a8      	blx	r5
    1aba:	0002      	movs	r2, r0
    1abc:	000b      	movs	r3, r1
    1abe:	0030      	movs	r0, r6
    1ac0:	0039      	movs	r1, r7
    1ac2:	47a0      	blx	r4
    1ac4:	9a06      	ldr	r2, [sp, #24]
    1ac6:	9b07      	ldr	r3, [sp, #28]
    1ac8:	4e48      	ldr	r6, [pc, #288]	; (1bec <computeKalmanGains+0x71c>)
    1aca:	47b0      	blx	r6
    1acc:	9036      	str	r0, [sp, #216]	; 0xd8
    1ace:	9137      	str	r1, [sp, #220]	; 0xdc
    1ad0:	9a36      	ldr	r2, [sp, #216]	; 0xd8
    1ad2:	9b37      	ldr	r3, [sp, #220]	; 0xdc
    1ad4:	4946      	ldr	r1, [pc, #280]	; (1bf0 <computeKalmanGains+0x720>)

        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
    1ad6:	4e44      	ldr	r6, [pc, #272]	; (1be8 <computeKalmanGains+0x718>)

        kgain[1][1] = (pestp[1][0] * (-pestp[0][2]) + pestp[1][2] * (pestp[0][0] + altitude_variance))/det;

        kgain[2][0] = (pestp[2][0] * (pestp[2][2] + acceleration_variance) - pestp[2][2] * pestp[2][0])/det;

        kgain[2][1] = (pestp[2][0] * (-pestp[0][2]) + pestp[2][2] * (pestp[0][0] + altitude_variance))/det;
    1ad8:	628a      	str	r2, [r1, #40]	; 0x28
    1ada:	62cb      	str	r3, [r1, #44]	; 0x2c

        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
    1adc:	9a34      	ldr	r2, [sp, #208]	; 0xd0
    1ade:	9b35      	ldr	r3, [sp, #212]	; 0xd4
    1ae0:	2000      	movs	r0, #0
    1ae2:	4944      	ldr	r1, [pc, #272]	; (1bf4 <computeKalmanGains+0x724>)
    1ae4:	47b0      	blx	r6
    1ae6:	0002      	movs	r2, r0
    1ae8:	000b      	movs	r3, r1
    1aea:	900c      	str	r0, [sp, #48]	; 0x30
    1aec:	910d      	str	r1, [sp, #52]	; 0x34
    1aee:	9808      	ldr	r0, [sp, #32]
    1af0:	9909      	ldr	r1, [sp, #36]	; 0x24
    1af2:	47a8      	blx	r5
    1af4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    1af6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1af8:	0006      	movs	r6, r0
    1afa:	000f      	movs	r7, r1
    1afc:	9800      	ldr	r0, [sp, #0]
    1afe:	9901      	ldr	r1, [sp, #4]
    1b00:	47a8      	blx	r5
    1b02:	0002      	movs	r2, r0
    1b04:	000b      	movs	r3, r1
    1b06:	0030      	movs	r0, r6
    1b08:	0039      	movs	r1, r7
    1b0a:	4e37      	ldr	r6, [pc, #220]	; (1be8 <computeKalmanGains+0x718>)
    1b0c:	47b0      	blx	r6
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
    1b0e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1b10:	9b0d      	ldr	r3, [sp, #52]	; 0x34

        kgain[2][0] = (pestp[2][0] * (pestp[2][2] + acceleration_variance) - pestp[2][2] * pestp[2][0])/det;

        kgain[2][1] = (pestp[2][0] * (-pestp[0][2]) + pestp[2][2] * (pestp[0][0] + altitude_variance))/det;

        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
    1b12:	9006      	str	r0, [sp, #24]
    1b14:	9107      	str	r1, [sp, #28]
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
    1b16:	9830      	ldr	r0, [sp, #192]	; 0xc0
    1b18:	9931      	ldr	r1, [sp, #196]	; 0xc4
    1b1a:	47a8      	blx	r5
    1b1c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    1b1e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1b20:	0006      	movs	r6, r0
    1b22:	000f      	movs	r7, r1
    1b24:	9810      	ldr	r0, [sp, #64]	; 0x40
    1b26:	9911      	ldr	r1, [sp, #68]	; 0x44
    1b28:	47a8      	blx	r5
    1b2a:	0002      	movs	r2, r0
    1b2c:	000b      	movs	r3, r1
    1b2e:	0030      	movs	r0, r6
    1b30:	0039      	movs	r1, r7
    1b32:	4e2d      	ldr	r6, [pc, #180]	; (1be8 <computeKalmanGains+0x718>)
    1b34:	47b0      	blx	r6
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
    1b36:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1b38:	9b0d      	ldr	r3, [sp, #52]	; 0x34
        kgain[2][0] = (pestp[2][0] * (pestp[2][2] + acceleration_variance) - pestp[2][2] * pestp[2][0])/det;

        kgain[2][1] = (pestp[2][0] * (-pestp[0][2]) + pestp[2][2] * (pestp[0][0] + altitude_variance))/det;

        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
    1b3a:	900a      	str	r0, [sp, #40]	; 0x28
    1b3c:	910b      	str	r1, [sp, #44]	; 0x2c
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
    1b3e:	9804      	ldr	r0, [sp, #16]
    1b40:	9916      	ldr	r1, [sp, #88]	; 0x58
    1b42:	47a8      	blx	r5
    1b44:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    1b46:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1b48:	0006      	movs	r6, r0
    1b4a:	000f      	movs	r7, r1
    1b4c:	9802      	ldr	r0, [sp, #8]
    1b4e:	9903      	ldr	r1, [sp, #12]
    1b50:	47a8      	blx	r5
    1b52:	0002      	movs	r2, r0
    1b54:	000b      	movs	r3, r1
    1b56:	0030      	movs	r0, r6
    1b58:	0039      	movs	r1, r7
    1b5a:	4e23      	ldr	r6, [pc, #140]	; (1be8 <computeKalmanGains+0x718>)
    1b5c:	47b0      	blx	r6
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
    1b5e:	2280      	movs	r2, #128	; 0x80
    1b60:	0612      	lsls	r2, r2, #24
    1b62:	4694      	mov	ip, r2
    1b64:	9b39      	ldr	r3, [sp, #228]	; 0xe4
    1b66:	9a18      	ldr	r2, [sp, #96]	; 0x60
    1b68:	4463      	add	r3, ip
    1b6a:	932e      	str	r3, [sp, #184]	; 0xb8
    1b6c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8

        kgain[2][1] = (pestp[2][0] * (-pestp[0][2]) + pestp[2][2] * (pestp[0][0] + altitude_variance))/det;

        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
    1b6e:	900c      	str	r0, [sp, #48]	; 0x30
    1b70:	910d      	str	r1, [sp, #52]	; 0x34
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
    1b72:	9808      	ldr	r0, [sp, #32]
    1b74:	9909      	ldr	r1, [sp, #36]	; 0x24
    1b76:	47a8      	blx	r5
    1b78:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
    1b7a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
    1b7c:	47a0      	blx	r4
    1b7e:	9a12      	ldr	r2, [sp, #72]	; 0x48
    1b80:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    1b82:	0006      	movs	r6, r0
    1b84:	000f      	movs	r7, r1
    1b86:	9800      	ldr	r0, [sp, #0]
    1b88:	9901      	ldr	r1, [sp, #4]
    1b8a:	47a8      	blx	r5
    1b8c:	0002      	movs	r2, r0
    1b8e:	000b      	movs	r3, r1
    1b90:	0030      	movs	r0, r6
    1b92:	0039      	movs	r1, r7
    1b94:	4e14      	ldr	r6, [pc, #80]	; (1be8 <computeKalmanGains+0x718>)
    1b96:	47b0      	blx	r6
        pest[1][1] = pestp[0][1] * (-kgain[1][0]) + pestp[1][1] - kgain[1][1]*pestp[2][1];
    1b98:	9a32      	ldr	r2, [sp, #200]	; 0xc8
    1b9a:	9b33      	ldr	r3, [sp, #204]	; 0xcc
        kgain[2][1] = (pestp[2][0] * (-pestp[0][2]) + pestp[2][2] * (pestp[0][0] + altitude_variance))/det;

        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
    1b9c:	9008      	str	r0, [sp, #32]
    1b9e:	9109      	str	r1, [sp, #36]	; 0x24
        pest[1][1] = pestp[0][1] * (-kgain[1][0]) + pestp[1][1] - kgain[1][1]*pestp[2][1];
    1ba0:	9826      	ldr	r0, [sp, #152]	; 0x98
    1ba2:	9927      	ldr	r1, [sp, #156]	; 0x9c
    1ba4:	47a0      	blx	r4
    1ba6:	4a0c      	ldr	r2, [pc, #48]	; (1bd8 <computeKalmanGains+0x708>)
    1ba8:	0006      	movs	r6, r0
    1baa:	000f      	movs	r7, r1
    1bac:	9828      	ldr	r0, [sp, #160]	; 0xa0
    1bae:	9929      	ldr	r1, [sp, #164]	; 0xa4
    1bb0:	4b0a      	ldr	r3, [pc, #40]	; (1bdc <computeKalmanGains+0x70c>)
    1bb2:	47a8      	blx	r5
    1bb4:	0002      	movs	r2, r0
    1bb6:	000b      	movs	r3, r1
    1bb8:	0030      	movs	r0, r6
    1bba:	0039      	movs	r1, r7
    1bbc:	47a0      	blx	r4
    1bbe:	9a18      	ldr	r2, [sp, #96]	; 0x60
    1bc0:	0006      	movs	r6, r0
    1bc2:	000f      	movs	r7, r1
    1bc4:	9830      	ldr	r0, [sp, #192]	; 0xc0
    1bc6:	9931      	ldr	r1, [sp, #196]	; 0xc4
    1bc8:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    1bca:	47a8      	blx	r5
    1bcc:	0002      	movs	r2, r0
    1bce:	000b      	movs	r3, r1
    1bd0:	0030      	movs	r0, r6
    1bd2:	0039      	movs	r1, r7
    1bd4:	47a0      	blx	r4
    1bd6:	e00f      	b.n	1bf8 <computeKalmanGains+0x728>
    1bd8:	d2f1a9fc 	.word	0xd2f1a9fc
    1bdc:	3f80624d 	.word	0x3f80624d
    1be0:	a0b5ed8d 	.word	0xa0b5ed8d
    1be4:	3f00c6f7 	.word	0x3f00c6f7
    1be8:	00005855 	.word	0x00005855
    1bec:	00004b19 	.word	0x00004b19
    1bf0:	20000628 	.word	0x20000628
    1bf4:	3ff00000 	.word	0x3ff00000
    1bf8:	9a12      	ldr	r2, [sp, #72]	; 0x48
    1bfa:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    1bfc:	0006      	movs	r6, r0
    1bfe:	000f      	movs	r7, r1
    1c00:	9810      	ldr	r0, [sp, #64]	; 0x40
    1c02:	9911      	ldr	r1, [sp, #68]	; 0x44
    1c04:	47a8      	blx	r5
    1c06:	0002      	movs	r2, r0
    1c08:	000b      	movs	r3, r1
    1c0a:	0030      	movs	r0, r6
    1c0c:	0039      	movs	r1, r7
    1c0e:	4e50      	ldr	r6, [pc, #320]	; (1d50 <computeKalmanGains+0x880>)
    1c10:	47b0      	blx	r6
        pest[1][2] = pestp[0][2] * (-kgain[1][0]) + pestp[1][2] - kgain[1][1]*pestp[2][2];
    1c12:	9a18      	ldr	r2, [sp, #96]	; 0x60

        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
        pest[1][1] = pestp[0][1] * (-kgain[1][0]) + pestp[1][1] - kgain[1][1]*pestp[2][1];
    1c14:	900e      	str	r0, [sp, #56]	; 0x38
    1c16:	910f      	str	r1, [sp, #60]	; 0x3c
        pest[1][2] = pestp[0][2] * (-kgain[1][0]) + pestp[1][2] - kgain[1][1]*pestp[2][2];
    1c18:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    1c1a:	9804      	ldr	r0, [sp, #16]
    1c1c:	9916      	ldr	r1, [sp, #88]	; 0x58
    1c1e:	47a8      	blx	r5
    1c20:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
    1c22:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    1c24:	47a0      	blx	r4
    1c26:	9a12      	ldr	r2, [sp, #72]	; 0x48
    1c28:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    1c2a:	0006      	movs	r6, r0
    1c2c:	000f      	movs	r7, r1
    1c2e:	9802      	ldr	r0, [sp, #8]
    1c30:	9903      	ldr	r1, [sp, #12]
    1c32:	47a8      	blx	r5
    1c34:	4c46      	ldr	r4, [pc, #280]	; (1d50 <computeKalmanGains+0x880>)
    1c36:	0002      	movs	r2, r0
    1c38:	000b      	movs	r3, r1
    1c3a:	0030      	movs	r0, r6
    1c3c:	0039      	movs	r1, r7
    1c3e:	47a0      	blx	r4
        pest[2][0] = (1.0 - kgain[2][1]) * pestp[2][0] - kgain[2][0] * pestp[2][0];
    1c40:	9a36      	ldr	r2, [sp, #216]	; 0xd8
    1c42:	9b37      	ldr	r3, [sp, #220]	; 0xdc
        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
        pest[1][1] = pestp[0][1] * (-kgain[1][0]) + pestp[1][1] - kgain[1][1]*pestp[2][1];
        pest[1][2] = pestp[0][2] * (-kgain[1][0]) + pestp[1][2] - kgain[1][1]*pestp[2][2];
    1c44:	9004      	str	r0, [sp, #16]
    1c46:	9105      	str	r1, [sp, #20]
        pest[2][0] = (1.0 - kgain[2][1]) * pestp[2][0] - kgain[2][0] * pestp[2][0];
    1c48:	2000      	movs	r0, #0
    1c4a:	4942      	ldr	r1, [pc, #264]	; (1d54 <computeKalmanGains+0x884>)
    1c4c:	47a0      	blx	r4
    1c4e:	0002      	movs	r2, r0
    1c50:	000b      	movs	r3, r1
    1c52:	9012      	str	r0, [sp, #72]	; 0x48
    1c54:	9113      	str	r1, [sp, #76]	; 0x4c
    1c56:	9800      	ldr	r0, [sp, #0]
    1c58:	9901      	ldr	r1, [sp, #4]
    1c5a:	47a8      	blx	r5
    1c5c:	9a14      	ldr	r2, [sp, #80]	; 0x50
    1c5e:	9b15      	ldr	r3, [sp, #84]	; 0x54
    1c60:	0006      	movs	r6, r0
    1c62:	000f      	movs	r7, r1
    1c64:	9800      	ldr	r0, [sp, #0]
    1c66:	9901      	ldr	r1, [sp, #4]
    1c68:	47a8      	blx	r5
    1c6a:	0002      	movs	r2, r0
    1c6c:	000b      	movs	r3, r1
    1c6e:	0030      	movs	r0, r6
    1c70:	0039      	movs	r1, r7
    1c72:	47a0      	blx	r4
    1c74:	9000      	str	r0, [sp, #0]
    1c76:	9101      	str	r1, [sp, #4]
        pest[2][1] = (1.0 - kgain[2][1]) * pestp[2][1] - kgain[2][0] * pestp[2][1];
    1c78:	9a12      	ldr	r2, [sp, #72]	; 0x48
    1c7a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    1c7c:	9810      	ldr	r0, [sp, #64]	; 0x40
    1c7e:	9911      	ldr	r1, [sp, #68]	; 0x44
    1c80:	47a8      	blx	r5
    1c82:	9a14      	ldr	r2, [sp, #80]	; 0x50
    1c84:	9b15      	ldr	r3, [sp, #84]	; 0x54
    1c86:	0006      	movs	r6, r0
    1c88:	000f      	movs	r7, r1
    1c8a:	9810      	ldr	r0, [sp, #64]	; 0x40
    1c8c:	9911      	ldr	r1, [sp, #68]	; 0x44
    1c8e:	47a8      	blx	r5
    1c90:	0002      	movs	r2, r0
    1c92:	000b      	movs	r3, r1
    1c94:	0030      	movs	r0, r6
    1c96:	0039      	movs	r1, r7
    1c98:	47a0      	blx	r4
        pest[2][2] = (1.0 - kgain[2][1]) * pestp[2][2] - kgain[2][0] * pestp[2][2];
    1c9a:	9a12      	ldr	r2, [sp, #72]	; 0x48
    1c9c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
        pest[1][1] = pestp[0][1] * (-kgain[1][0]) + pestp[1][1] - kgain[1][1]*pestp[2][1];
        pest[1][2] = pestp[0][2] * (-kgain[1][0]) + pestp[1][2] - kgain[1][1]*pestp[2][2];
        pest[2][0] = (1.0 - kgain[2][1]) * pestp[2][0] - kgain[2][0] * pestp[2][0];
        pest[2][1] = (1.0 - kgain[2][1]) * pestp[2][1] - kgain[2][0] * pestp[2][1];
    1c9e:	9010      	str	r0, [sp, #64]	; 0x40
    1ca0:	9111      	str	r1, [sp, #68]	; 0x44
        pest[2][2] = (1.0 - kgain[2][1]) * pestp[2][2] - kgain[2][0] * pestp[2][2];
    1ca2:	9802      	ldr	r0, [sp, #8]
    1ca4:	9903      	ldr	r1, [sp, #12]
    1ca6:	47a8      	blx	r5
    1ca8:	9a14      	ldr	r2, [sp, #80]	; 0x50
    1caa:	9b15      	ldr	r3, [sp, #84]	; 0x54
    1cac:	0006      	movs	r6, r0
    1cae:	000f      	movs	r7, r1
    1cb0:	9802      	ldr	r0, [sp, #8]
    1cb2:	9903      	ldr	r1, [sp, #12]
    1cb4:	47a8      	blx	r5
    1cb6:	000b      	movs	r3, r1
    1cb8:	0002      	movs	r2, r0
    1cba:	0039      	movs	r1, r7
    1cbc:	0030      	movs	r0, r6
    1cbe:	47a0      	blx	r4
         * time through the mill. Because I have noticed very early convergance
         * in a few cases (< 20 iterations) I am delaying this for at least
         * 100 iterations.
         */
        notdone = 0;
        k++;
    1cc0:	2400      	movs	r4, #0
    1cc2:	9b38      	ldr	r3, [sp, #224]	; 0xe0
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
        pest[1][1] = pestp[0][1] * (-kgain[1][0]) + pestp[1][1] - kgain[1][1]*pestp[2][1];
        pest[1][2] = pestp[0][2] * (-kgain[1][0]) + pestp[1][2] - kgain[1][1]*pestp[2][2];
        pest[2][0] = (1.0 - kgain[2][1]) * pestp[2][0] - kgain[2][0] * pestp[2][0];
        pest[2][1] = (1.0 - kgain[2][1]) * pestp[2][1] - kgain[2][0] * pestp[2][1];
        pest[2][2] = (1.0 - kgain[2][1]) * pestp[2][2] - kgain[2][0] * pestp[2][2];
    1cc4:	9002      	str	r0, [sp, #8]
    1cc6:	9103      	str	r1, [sp, #12]
         * time through the mill. Because I have noticed very early convergance
         * in a few cases (< 20 iterations) I am delaying this for at least
         * 100 iterations.
         */
        notdone = 0;
        k++;
    1cc8:	3301      	adds	r3, #1
    1cca:	9338      	str	r3, [sp, #224]	; 0xe0
        for( i = 0; i <= 2; i++)
            for( j = 0; j <= 1; j++) {
                if( (kgain[i][j] - lastkgain[i][j])/lastkgain[i][j] > 0.00001)
    1ccc:	4b22      	ldr	r3, [pc, #136]	; (1d58 <computeKalmanGains+0x888>)
        /* Check for convergance. Criteria is less than .001% change from last
         * time through the mill. Because I have noticed very early convergance
         * in a few cases (< 20 iterations) I am delaying this for at least
         * 100 iterations.
         */
        notdone = 0;
    1cce:	9414      	str	r4, [sp, #80]	; 0x50
        k++;
        for( i = 0; i <= 2; i++)
            for( j = 0; j <= 1; j++) {
                if( (kgain[i][j] - lastkgain[i][j])/lastkgain[i][j] > 0.00001)
    1cd0:	9326      	str	r3, [sp, #152]	; 0x98
    1cd2:	4b1f      	ldr	r3, [pc, #124]	; (1d50 <computeKalmanGains+0x880>)
    1cd4:	9328      	str	r3, [sp, #160]	; 0xa0
    1cd6:	ab40      	add	r3, sp, #256	; 0x100
    1cd8:	18e5      	adds	r5, r4, r3

        pestp[2][2] = pestp[2][2] + model_variance;
        /*
          Calculate Kalman Gain
        */
        det = (pestp[0][0]+altitude_variance)*(pestp[2][2] + acceleration_variance) - pestp[2][0] * pestp[0][2];
    1cda:	2300      	movs	r3, #0
    1cdc:	9516      	str	r5, [sp, #88]	; 0x58
    1cde:	9312      	str	r3, [sp, #72]	; 0x48
         */
        notdone = 0;
        k++;
        for( i = 0; i <= 2; i++)
            for( j = 0; j <= 1; j++) {
                if( (kgain[i][j] - lastkgain[i][j])/lastkgain[i][j] > 0.00001)
    1ce0:	9b12      	ldr	r3, [sp, #72]	; 0x48
    1ce2:	9a26      	ldr	r2, [sp, #152]	; 0x98
    1ce4:	18e3      	adds	r3, r4, r3
    1ce6:	189b      	adds	r3, r3, r2
    1ce8:	681a      	ldr	r2, [r3, #0]
    1cea:	685b      	ldr	r3, [r3, #4]
    1cec:	9218      	str	r2, [sp, #96]	; 0x60
    1cee:	9319      	str	r3, [sp, #100]	; 0x64
    1cf0:	9818      	ldr	r0, [sp, #96]	; 0x60
    1cf2:	9919      	ldr	r1, [sp, #100]	; 0x64
    1cf4:	9b16      	ldr	r3, [sp, #88]	; 0x58
    1cf6:	9d28      	ldr	r5, [sp, #160]	; 0xa0
    1cf8:	681e      	ldr	r6, [r3, #0]
    1cfa:	685f      	ldr	r7, [r3, #4]
    1cfc:	0032      	movs	r2, r6
    1cfe:	003b      	movs	r3, r7
    1d00:	47a8      	blx	r5
    1d02:	0032      	movs	r2, r6
    1d04:	003b      	movs	r3, r7
    1d06:	4d15      	ldr	r5, [pc, #84]	; (1d5c <computeKalmanGains+0x88c>)
    1d08:	47a8      	blx	r5
    1d0a:	4b15      	ldr	r3, [pc, #84]	; (1d60 <computeKalmanGains+0x890>)
    1d0c:	4a15      	ldr	r2, [pc, #84]	; (1d64 <computeKalmanGains+0x894>)
    1d0e:	4e16      	ldr	r6, [pc, #88]	; (1d68 <computeKalmanGains+0x898>)
    1d10:	47b0      	blx	r6
                    notdone++;
    1d12:	1e43      	subs	r3, r0, #1
    1d14:	4198      	sbcs	r0, r3
    1d16:	9b14      	ldr	r3, [sp, #80]	; 0x50
                lastkgain[i][j] = kgain[i][j];
    1d18:	9916      	ldr	r1, [sp, #88]	; 0x58
        notdone = 0;
        k++;
        for( i = 0; i <= 2; i++)
            for( j = 0; j <= 1; j++) {
                if( (kgain[i][j] - lastkgain[i][j])/lastkgain[i][j] > 0.00001)
                    notdone++;
    1d1a:	181b      	adds	r3, r3, r0
    1d1c:	9314      	str	r3, [sp, #80]	; 0x50
                lastkgain[i][j] = kgain[i][j];
    1d1e:	9a18      	ldr	r2, [sp, #96]	; 0x60
    1d20:	9b19      	ldr	r3, [sp, #100]	; 0x64
    1d22:	c10c      	stmia	r1!, {r2, r3}
    1d24:	9b12      	ldr	r3, [sp, #72]	; 0x48
    1d26:	9116      	str	r1, [sp, #88]	; 0x58
    1d28:	3308      	adds	r3, #8
    1d2a:	9312      	str	r3, [sp, #72]	; 0x48
         * 100 iterations.
         */
        notdone = 0;
        k++;
        for( i = 0; i <= 2; i++)
            for( j = 0; j <= 1; j++) {
    1d2c:	2b10      	cmp	r3, #16
    1d2e:	d1d7      	bne.n	1ce0 <computeKalmanGains+0x810>
    1d30:	3410      	adds	r4, #16
         * in a few cases (< 20 iterations) I am delaying this for at least
         * 100 iterations.
         */
        notdone = 0;
        k++;
        for( i = 0; i <= 2; i++)
    1d32:	2c30      	cmp	r4, #48	; 0x30
    1d34:	d1cf      	bne.n	1cd6 <computeKalmanGains+0x806>
            for( j = 0; j <= 1; j++) {
                if( (kgain[i][j] - lastkgain[i][j])/lastkgain[i][j] > 0.00001)
                    notdone++;
                lastkgain[i][j] = kgain[i][j];
            }
        if( notdone || k < 100)
    1d36:	9b14      	ldr	r3, [sp, #80]	; 0x50
    1d38:	2b00      	cmp	r3, #0
    1d3a:	d001      	beq.n	1d40 <computeKalmanGains+0x870>
    1d3c:	f7ff fc2e 	bl	159c <computeKalmanGains+0xcc>
    1d40:	9b38      	ldr	r3, [sp, #224]	; 0xe0
    1d42:	2b63      	cmp	r3, #99	; 0x63
    1d44:	dc01      	bgt.n	1d4a <computeKalmanGains+0x87a>
    1d46:	f7ff fc29 	bl	159c <computeKalmanGains+0xcc>
            continue;
        else
            break;
    }
}
    1d4a:	b04d      	add	sp, #308	; 0x134
    1d4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1d4e:	46c0      	nop			; (mov r8, r8)
    1d50:	00005855 	.word	0x00005855
    1d54:	3ff00000 	.word	0x3ff00000
    1d58:	20000628 	.word	0x20000628
    1d5c:	00004b19 	.word	0x00004b19
    1d60:	3ee4f8b5 	.word	0x3ee4f8b5
    1d64:	88e368f1 	.word	0x88e368f1
    1d68:	00003bf9 	.word	0x00003bf9

00001d6c <computeKalmanStates>:

void computeKalmanStates() {
    1d6c:	b5f0      	push	{r4, r5, r6, r7, lr}

    double alt_inovation, accel_inovation;


    double acceleration = (sample.accelZ - offsets.gravityOffset) * 32.17417;
    1d6e:	4d7e      	ldr	r5, [pc, #504]	; (1f68 <computeKalmanStates+0x1fc>)
        else
            break;
    }
}

void computeKalmanStates() {
    1d70:	b08f      	sub	sp, #60	; 0x3c

    double alt_inovation, accel_inovation;


    double acceleration = (sample.accelZ - offsets.gravityOffset) * 32.17417;
    1d72:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    1d74:	4b7d      	ldr	r3, [pc, #500]	; (1f6c <computeKalmanStates+0x200>)
    1d76:	4798      	blx	r3
    1d78:	4b7d      	ldr	r3, [pc, #500]	; (1f70 <computeKalmanStates+0x204>)
    1d7a:	4c7e      	ldr	r4, [pc, #504]	; (1f74 <computeKalmanStates+0x208>)
    1d7c:	689a      	ldr	r2, [r3, #8]
    1d7e:	68db      	ldr	r3, [r3, #12]
    1d80:	47a0      	blx	r4
    1d82:	4a7d      	ldr	r2, [pc, #500]	; (1f78 <computeKalmanStates+0x20c>)
    1d84:	4b7d      	ldr	r3, [pc, #500]	; (1f7c <computeKalmanStates+0x210>)
    1d86:	4e7e      	ldr	r6, [pc, #504]	; (1f80 <computeKalmanStates+0x214>)
    1d88:	47b0      	blx	r6
    double pressure = sample.altitudefeet;
    1d8a:	6c2e      	ldr	r6, [r5, #64]	; 0x40
    1d8c:	6c6f      	ldr	r7, [r5, #68]	; 0x44

    if (altitude == 0) {
    1d8e:	4d7d      	ldr	r5, [pc, #500]	; (1f84 <computeKalmanStates+0x218>)
void computeKalmanStates() {

    double alt_inovation, accel_inovation;


    double acceleration = (sample.accelZ - offsets.gravityOffset) * 32.17417;
    1d90:	9000      	str	r0, [sp, #0]
    1d92:	9101      	str	r1, [sp, #4]
    double pressure = sample.altitudefeet;

    if (altitude == 0) {
    1d94:	6828      	ldr	r0, [r5, #0]
    1d96:	6869      	ldr	r1, [r5, #4]
    1d98:	4c7b      	ldr	r4, [pc, #492]	; (1f88 <computeKalmanStates+0x21c>)
    1d9a:	2200      	movs	r2, #0
    1d9c:	2300      	movs	r3, #0
    1d9e:	47a0      	blx	r4
    1da0:	4c74      	ldr	r4, [pc, #464]	; (1f74 <computeKalmanStates+0x208>)
    1da2:	2800      	cmp	r0, #0
    1da4:	d001      	beq.n	1daa <computeKalmanStates+0x3e>
        altitude = pressure;
    1da6:	602e      	str	r6, [r5, #0]
    1da8:	606f      	str	r7, [r5, #4]
    }

    /* Compute the innovations */
    alt_inovation = pressure - estp[0];
    1daa:	4b78      	ldr	r3, [pc, #480]	; (1f8c <computeKalmanStates+0x220>)
    1dac:	0030      	movs	r0, r6
    1dae:	681a      	ldr	r2, [r3, #0]
    1db0:	685b      	ldr	r3, [r3, #4]
    1db2:	0039      	movs	r1, r7
    1db4:	47a0      	blx	r4
    accel_inovation = acceleration - estp[2];
    1db6:	4b75      	ldr	r3, [pc, #468]	; (1f8c <computeKalmanStates+0x220>)
    if (altitude == 0) {
        altitude = pressure;
    }

    /* Compute the innovations */
    alt_inovation = pressure - estp[0];
    1db8:	9006      	str	r0, [sp, #24]
    1dba:	9107      	str	r1, [sp, #28]
    accel_inovation = acceleration - estp[2];
    1dbc:	691a      	ldr	r2, [r3, #16]
    1dbe:	695b      	ldr	r3, [r3, #20]
    1dc0:	9800      	ldr	r0, [sp, #0]
    1dc2:	9901      	ldr	r1, [sp, #4]
    1dc4:	47a0      	blx	r4


    /* Propagate state */
    estp[0] = phi[0][0] * altitude + phi[0][1] *velocity + phi[0][2] * accel;
    1dc6:	4b6f      	ldr	r3, [pc, #444]	; (1f84 <computeKalmanStates+0x218>)
    1dc8:	4d6d      	ldr	r5, [pc, #436]	; (1f80 <computeKalmanStates+0x214>)
    1dca:	685c      	ldr	r4, [r3, #4]
    1dcc:	681b      	ldr	r3, [r3, #0]
    1dce:	9300      	str	r3, [sp, #0]
    1dd0:	9401      	str	r4, [sp, #4]
    1dd2:	4b6f      	ldr	r3, [pc, #444]	; (1f90 <computeKalmanStates+0x224>)
        altitude = pressure;
    }

    /* Compute the innovations */
    alt_inovation = pressure - estp[0];
    accel_inovation = acceleration - estp[2];
    1dd4:	9008      	str	r0, [sp, #32]
    1dd6:	9109      	str	r1, [sp, #36]	; 0x24


    /* Propagate state */
    estp[0] = phi[0][0] * altitude + phi[0][1] *velocity + phi[0][2] * accel;
    1dd8:	685c      	ldr	r4, [r3, #4]
    1dda:	681b      	ldr	r3, [r3, #0]
    1ddc:	9800      	ldr	r0, [sp, #0]
    1dde:	9901      	ldr	r1, [sp, #4]
    1de0:	9302      	str	r3, [sp, #8]
    1de2:	9403      	str	r4, [sp, #12]
    1de4:	4b6b      	ldr	r3, [pc, #428]	; (1f94 <computeKalmanStates+0x228>)
    1de6:	685c      	ldr	r4, [r3, #4]
    1de8:	681b      	ldr	r3, [r3, #0]
    1dea:	9304      	str	r3, [sp, #16]
    1dec:	9405      	str	r4, [sp, #20]
    1dee:	4c6a      	ldr	r4, [pc, #424]	; (1f98 <computeKalmanStates+0x22c>)
    1df0:	6822      	ldr	r2, [r4, #0]
    1df2:	6863      	ldr	r3, [r4, #4]
    1df4:	47a8      	blx	r5
    1df6:	68a2      	ldr	r2, [r4, #8]
    1df8:	68e3      	ldr	r3, [r4, #12]
    1dfa:	0006      	movs	r6, r0
    1dfc:	000f      	movs	r7, r1
    1dfe:	9802      	ldr	r0, [sp, #8]
    1e00:	9903      	ldr	r1, [sp, #12]
    1e02:	47a8      	blx	r5
    1e04:	0002      	movs	r2, r0
    1e06:	000b      	movs	r3, r1
    1e08:	0030      	movs	r0, r6
    1e0a:	0039      	movs	r1, r7
    1e0c:	4e63      	ldr	r6, [pc, #396]	; (1f9c <computeKalmanStates+0x230>)
    1e0e:	47b0      	blx	r6
    1e10:	6922      	ldr	r2, [r4, #16]
    1e12:	6963      	ldr	r3, [r4, #20]
    1e14:	0006      	movs	r6, r0
    1e16:	000f      	movs	r7, r1
    1e18:	9804      	ldr	r0, [sp, #16]
    1e1a:	9905      	ldr	r1, [sp, #20]
    1e1c:	47a8      	blx	r5
    1e1e:	0002      	movs	r2, r0
    1e20:	000b      	movs	r3, r1
    1e22:	0030      	movs	r0, r6
    1e24:	0039      	movs	r1, r7
    1e26:	4e5d      	ldr	r6, [pc, #372]	; (1f9c <computeKalmanStates+0x230>)
    1e28:	47b0      	blx	r6
    1e2a:	900a      	str	r0, [sp, #40]	; 0x28
    1e2c:	910b      	str	r1, [sp, #44]	; 0x2c
    1e2e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    1e30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1e32:	4956      	ldr	r1, [pc, #344]	; (1f8c <computeKalmanStates+0x220>)
    1e34:	600a      	str	r2, [r1, #0]
    1e36:	604b      	str	r3, [r1, #4]
    estp[1] = phi[1][0] * altitude + phi[1][1] * velocity + phi[1][2] * accel;
    1e38:	69a2      	ldr	r2, [r4, #24]
    1e3a:	69e3      	ldr	r3, [r4, #28]
    1e3c:	9800      	ldr	r0, [sp, #0]
    1e3e:	9901      	ldr	r1, [sp, #4]
    1e40:	47a8      	blx	r5
    1e42:	6a22      	ldr	r2, [r4, #32]
    1e44:	6a63      	ldr	r3, [r4, #36]	; 0x24
    1e46:	0006      	movs	r6, r0
    1e48:	000f      	movs	r7, r1
    1e4a:	9802      	ldr	r0, [sp, #8]
    1e4c:	9903      	ldr	r1, [sp, #12]
    1e4e:	47a8      	blx	r5
    1e50:	0002      	movs	r2, r0
    1e52:	000b      	movs	r3, r1
    1e54:	0030      	movs	r0, r6
    1e56:	0039      	movs	r1, r7
    1e58:	4e50      	ldr	r6, [pc, #320]	; (1f9c <computeKalmanStates+0x230>)
    1e5a:	47b0      	blx	r6
    1e5c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    1e5e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    1e60:	0006      	movs	r6, r0
    1e62:	000f      	movs	r7, r1
    1e64:	9804      	ldr	r0, [sp, #16]
    1e66:	9905      	ldr	r1, [sp, #20]
    1e68:	47a8      	blx	r5
    1e6a:	0002      	movs	r2, r0
    1e6c:	000b      	movs	r3, r1
    1e6e:	0030      	movs	r0, r6
    1e70:	0039      	movs	r1, r7
    1e72:	4e4a      	ldr	r6, [pc, #296]	; (1f9c <computeKalmanStates+0x230>)
    1e74:	47b0      	blx	r6
    1e76:	900c      	str	r0, [sp, #48]	; 0x30
    1e78:	910d      	str	r1, [sp, #52]	; 0x34
    1e7a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1e7c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1e7e:	4943      	ldr	r1, [pc, #268]	; (1f8c <computeKalmanStates+0x220>)
    1e80:	608a      	str	r2, [r1, #8]
    1e82:	60cb      	str	r3, [r1, #12]
    estp[2] = phi[2][0] * altitude + phi[2][1] * velocity + phi[2][2] * accel;
    1e84:	6b22      	ldr	r2, [r4, #48]	; 0x30
    1e86:	6b63      	ldr	r3, [r4, #52]	; 0x34
    1e88:	9800      	ldr	r0, [sp, #0]
    1e8a:	9901      	ldr	r1, [sp, #4]
    1e8c:	47a8      	blx	r5
    1e8e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    1e90:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    1e92:	0006      	movs	r6, r0
    1e94:	000f      	movs	r7, r1
    1e96:	9802      	ldr	r0, [sp, #8]
    1e98:	9903      	ldr	r1, [sp, #12]
    1e9a:	47a8      	blx	r5
    1e9c:	0002      	movs	r2, r0
    1e9e:	000b      	movs	r3, r1
    1ea0:	0030      	movs	r0, r6
    1ea2:	0039      	movs	r1, r7
    1ea4:	4e3d      	ldr	r6, [pc, #244]	; (1f9c <computeKalmanStates+0x230>)
    1ea6:	47b0      	blx	r6
    1ea8:	6c22      	ldr	r2, [r4, #64]	; 0x40
    1eaa:	6c63      	ldr	r3, [r4, #68]	; 0x44
    1eac:	0006      	movs	r6, r0
    1eae:	000f      	movs	r7, r1
    1eb0:	9804      	ldr	r0, [sp, #16]
    1eb2:	9905      	ldr	r1, [sp, #20]
    1eb4:	47a8      	blx	r5
    1eb6:	4c39      	ldr	r4, [pc, #228]	; (1f9c <computeKalmanStates+0x230>)
    1eb8:	0002      	movs	r2, r0
    1eba:	000b      	movs	r3, r1
    1ebc:	0030      	movs	r0, r6
    1ebe:	0039      	movs	r1, r7
    1ec0:	47a0      	blx	r4
    1ec2:	0003      	movs	r3, r0
    1ec4:	000c      	movs	r4, r1
    1ec6:	4a31      	ldr	r2, [pc, #196]	; (1f8c <computeKalmanStates+0x220>)
    1ec8:	9000      	str	r0, [sp, #0]
    1eca:	9101      	str	r1, [sp, #4]
    1ecc:	6113      	str	r3, [r2, #16]
    1ece:	6154      	str	r4, [r2, #20]

    /*
    Update state
    */
    altitude = estp[0] + kgain[0][0] * alt_inovation + kgain[0][1] * accel_inovation;
    1ed0:	4c33      	ldr	r4, [pc, #204]	; (1fa0 <computeKalmanStates+0x234>)
    1ed2:	6822      	ldr	r2, [r4, #0]
    1ed4:	6863      	ldr	r3, [r4, #4]
    1ed6:	9806      	ldr	r0, [sp, #24]
    1ed8:	9907      	ldr	r1, [sp, #28]
    1eda:	47a8      	blx	r5
    1edc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    1ede:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1ee0:	4e2e      	ldr	r6, [pc, #184]	; (1f9c <computeKalmanStates+0x230>)
    1ee2:	47b0      	blx	r6
    1ee4:	68a2      	ldr	r2, [r4, #8]
    1ee6:	68e3      	ldr	r3, [r4, #12]
    1ee8:	0006      	movs	r6, r0
    1eea:	000f      	movs	r7, r1
    1eec:	9808      	ldr	r0, [sp, #32]
    1eee:	9909      	ldr	r1, [sp, #36]	; 0x24
    1ef0:	47a8      	blx	r5
    1ef2:	0002      	movs	r2, r0
    1ef4:	000b      	movs	r3, r1
    1ef6:	0030      	movs	r0, r6
    1ef8:	0039      	movs	r1, r7
    1efa:	4e28      	ldr	r6, [pc, #160]	; (1f9c <computeKalmanStates+0x230>)
    1efc:	47b0      	blx	r6
    1efe:	4b21      	ldr	r3, [pc, #132]	; (1f84 <computeKalmanStates+0x218>)
    1f00:	6018      	str	r0, [r3, #0]
    1f02:	6059      	str	r1, [r3, #4]
    velocity = estp[1] + kgain[1][0] * alt_inovation + kgain[1][1] * accel_inovation;
    1f04:	6922      	ldr	r2, [r4, #16]
    1f06:	6963      	ldr	r3, [r4, #20]
    1f08:	9806      	ldr	r0, [sp, #24]
    1f0a:	9907      	ldr	r1, [sp, #28]
    1f0c:	47a8      	blx	r5
    1f0e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1f10:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1f12:	47b0      	blx	r6
    1f14:	69a2      	ldr	r2, [r4, #24]
    1f16:	69e3      	ldr	r3, [r4, #28]
    1f18:	0006      	movs	r6, r0
    1f1a:	000f      	movs	r7, r1
    1f1c:	9808      	ldr	r0, [sp, #32]
    1f1e:	9909      	ldr	r1, [sp, #36]	; 0x24
    1f20:	47a8      	blx	r5
    1f22:	0002      	movs	r2, r0
    1f24:	000b      	movs	r3, r1
    1f26:	0030      	movs	r0, r6
    1f28:	0039      	movs	r1, r7
    1f2a:	4e1c      	ldr	r6, [pc, #112]	; (1f9c <computeKalmanStates+0x230>)
    1f2c:	47b0      	blx	r6
    1f2e:	4b18      	ldr	r3, [pc, #96]	; (1f90 <computeKalmanStates+0x224>)
    1f30:	6018      	str	r0, [r3, #0]
    1f32:	6059      	str	r1, [r3, #4]
    accel =    estp[2] + kgain[2][0] * alt_inovation + kgain[2][1] * accel_inovation;
    1f34:	6a22      	ldr	r2, [r4, #32]
    1f36:	6a63      	ldr	r3, [r4, #36]	; 0x24
    1f38:	9806      	ldr	r0, [sp, #24]
    1f3a:	9907      	ldr	r1, [sp, #28]
    1f3c:	47a8      	blx	r5
    1f3e:	9a00      	ldr	r2, [sp, #0]
    1f40:	9b01      	ldr	r3, [sp, #4]
    1f42:	47b0      	blx	r6
    1f44:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    1f46:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    1f48:	0006      	movs	r6, r0
    1f4a:	000f      	movs	r7, r1
    1f4c:	9808      	ldr	r0, [sp, #32]
    1f4e:	9909      	ldr	r1, [sp, #36]	; 0x24
    1f50:	47a8      	blx	r5
    1f52:	4c12      	ldr	r4, [pc, #72]	; (1f9c <computeKalmanStates+0x230>)
    1f54:	0002      	movs	r2, r0
    1f56:	000b      	movs	r3, r1
    1f58:	0030      	movs	r0, r6
    1f5a:	0039      	movs	r1, r7
    1f5c:	47a0      	blx	r4
    1f5e:	4b0d      	ldr	r3, [pc, #52]	; (1f94 <computeKalmanStates+0x228>)
    1f60:	6018      	str	r0, [r3, #0]
    1f62:	6059      	str	r1, [r3, #4]

}
    1f64:	b00f      	add	sp, #60	; 0x3c
    1f66:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1f68:	200007a0 	.word	0x200007a0
    1f6c:	0000609d 	.word	0x0000609d
    1f70:	200004d0 	.word	0x200004d0
    1f74:	00005855 	.word	0x00005855
    1f78:	33daf8df 	.word	0x33daf8df
    1f7c:	4040164b 	.word	0x4040164b
    1f80:	00005361 	.word	0x00005361
    1f84:	20000670 	.word	0x20000670
    1f88:	00003bc5 	.word	0x00003bc5
    1f8c:	20000678 	.word	0x20000678
    1f90:	20000668 	.word	0x20000668
    1f94:	20000660 	.word	0x20000660
    1f98:	20000010 	.word	0x20000010
    1f9c:	000044c1 	.word	0x000044c1
    1fa0:	20000628 	.word	0x20000628

00001fa4 <makePage>:
u8_t pageLocation;

bool pageReady;


void makePage(u8_t bytesToWrite, u8_t* data) {
    1fa4:	b5f0      	push	{r4, r5, r6, r7, lr}


    u8_t location = pageLocation;
    1fa6:	4a1f      	ldr	r2, [pc, #124]	; (2024 <STACK_SIZE+0x24>)
    1fa8:	7815      	ldrb	r5, [r2, #0]
    u8_t bytesWritten = 0;

    if ((location + bytesToWrite) > 0xFF) {
    1faa:	1943      	adds	r3, r0, r5
    1fac:	2bff      	cmp	r3, #255	; 0xff
    1fae:	dc03      	bgt.n	1fb8 <makePage+0x14>
    1fb0:	2300      	movs	r3, #0
            pageLocation = dataByte + 1;
        }
        pageReady = true;

    } else {
        for (u16_t dataByte = 0; dataByte <= bytesToWrite; ++dataByte) {
    1fb2:	b280      	uxth	r0, r0
            pageBuffer[(dataByte + location)] = data[dataByte];
    1fb4:	4c1c      	ldr	r4, [pc, #112]	; (2028 <STACK_SIZE+0x28>)
    1fb6:	e029      	b.n	200c <STACK_SIZE+0xc>
    1fb8:	2300      	movs	r3, #0
    1fba:	4e1b      	ldr	r6, [pc, #108]	; (2028 <STACK_SIZE+0x28>)

    u8_t location = pageLocation;
    u8_t bytesWritten = 0;

    if ((location + bytesToWrite) > 0xFF) {
        for (u16_t dataByte = 0; (dataByte + location) <= 0xFF; ++dataByte) {
    1fbc:	195f      	adds	r7, r3, r5
    1fbe:	b2dc      	uxtb	r4, r3
    1fc0:	46b4      	mov	ip, r6
    1fc2:	2fff      	cmp	r7, #255	; 0xff
    1fc4:	dc04      	bgt.n	1fd0 <makePage+0x2c>
            pageBuffer[(dataByte + location)] = data[dataByte];
    1fc6:	5ccc      	ldrb	r4, [r1, r3]

    u8_t location = pageLocation;
    u8_t bytesWritten = 0;

    if ((location + bytesToWrite) > 0xFF) {
        for (u16_t dataByte = 0; (dataByte + location) <= 0xFF; ++dataByte) {
    1fc8:	3301      	adds	r3, #1
            pageBuffer[(dataByte + location)] = data[dataByte];
    1fca:	55f4      	strb	r4, [r6, r7]

    u8_t location = pageLocation;
    u8_t bytesWritten = 0;

    if ((location + bytesToWrite) > 0xFF) {
        for (u16_t dataByte = 0; (dataByte + location) <= 0xFF; ++dataByte) {
    1fcc:	b29b      	uxth	r3, r3
    1fce:	e7f5      	b.n	1fbc <makePage+0x18>
            pageBuffer[(dataByte + location)] = data[dataByte];
            bytesWritten++;
        }
        pageLocation = 0x00;
    1fd0:	2300      	movs	r3, #0
        for(u16_t i = 0; i <= 0xFF; ++i) {
            pageToWrite[i] = pageBuffer[i];
    1fd2:	4f16      	ldr	r7, [pc, #88]	; (202c <STACK_SIZE+0x2c>)
    if ((location + bytesToWrite) > 0xFF) {
        for (u16_t dataByte = 0; (dataByte + location) <= 0xFF; ++dataByte) {
            pageBuffer[(dataByte + location)] = data[dataByte];
            bytesWritten++;
        }
        pageLocation = 0x00;
    1fd4:	7013      	strb	r3, [r2, #0]
        for(u16_t i = 0; i <= 0xFF; ++i) {
            pageToWrite[i] = pageBuffer[i];
    1fd6:	4665      	mov	r5, ip
    1fd8:	18ed      	adds	r5, r5, r3
    1fda:	782e      	ldrb	r6, [r5, #0]
    1fdc:	54fe      	strb	r6, [r7, r3]
            pageBuffer[i] = 0;
    1fde:	2600      	movs	r6, #0
    1fe0:	702e      	strb	r6, [r5, #0]
        for (u16_t dataByte = 0; (dataByte + location) <= 0xFF; ++dataByte) {
            pageBuffer[(dataByte + location)] = data[dataByte];
            bytesWritten++;
        }
        pageLocation = 0x00;
        for(u16_t i = 0; i <= 0xFF; ++i) {
    1fe2:	2580      	movs	r5, #128	; 0x80
    1fe4:	3301      	adds	r3, #1
    1fe6:	006d      	lsls	r5, r5, #1
    1fe8:	42ab      	cmp	r3, r5
    1fea:	d1f4      	bne.n	1fd6 <makePage+0x32>
    1fec:	2300      	movs	r3, #0
    1fee:	1c5d      	adds	r5, r3, #1
            pageToWrite[i] = pageBuffer[i];
            pageBuffer[i] = 0;
        }
        for (u16_t dataByte = 0; bytesWritten < bytesToWrite; ++dataByte) {
    1ff0:	4284      	cmp	r4, r0
    1ff2:	d207      	bcs.n	2004 <STACK_SIZE+0x4>
            pageBuffer[dataByte] = data[bytesWritten];
    1ff4:	4667      	mov	r7, ip
    1ff6:	5d0e      	ldrb	r6, [r1, r4]
            bytesWritten++;
    1ff8:	3401      	adds	r4, #1
        for(u16_t i = 0; i <= 0xFF; ++i) {
            pageToWrite[i] = pageBuffer[i];
            pageBuffer[i] = 0;
        }
        for (u16_t dataByte = 0; bytesWritten < bytesToWrite; ++dataByte) {
            pageBuffer[dataByte] = data[bytesWritten];
    1ffa:	54fe      	strb	r6, [r7, r3]
            bytesWritten++;
    1ffc:	b2e4      	uxtb	r4, r4
            pageLocation = dataByte + 1;
    1ffe:	7015      	strb	r5, [r2, #0]
    2000:	002b      	movs	r3, r5
    2002:	e7f4      	b.n	1fee <makePage+0x4a>
        }
        pageReady = true;
    2004:	2201      	movs	r2, #1
    2006:	4b0a      	ldr	r3, [pc, #40]	; (2030 <STACK_SIZE+0x30>)
    2008:	701a      	strb	r2, [r3, #0]
    200a:	e009      	b.n	2020 <STACK_SIZE+0x20>

    } else {
        for (u16_t dataByte = 0; dataByte <= bytesToWrite; ++dataByte) {
    200c:	4283      	cmp	r3, r0
    200e:	d807      	bhi.n	2020 <STACK_SIZE+0x20>
            pageBuffer[(dataByte + location)] = data[dataByte];
    2010:	5ccf      	ldrb	r7, [r1, r3]
    2012:	18e6      	adds	r6, r4, r3
    2014:	5577      	strb	r7, [r6, r5]
            bytesWritten++;
            pageLocation = location + dataByte;
    2016:	18ee      	adds	r6, r5, r3
            pageLocation = dataByte + 1;
        }
        pageReady = true;

    } else {
        for (u16_t dataByte = 0; dataByte <= bytesToWrite; ++dataByte) {
    2018:	3301      	adds	r3, #1
            pageBuffer[(dataByte + location)] = data[dataByte];
            bytesWritten++;
            pageLocation = location + dataByte;
    201a:	7016      	strb	r6, [r2, #0]
            pageLocation = dataByte + 1;
        }
        pageReady = true;

    } else {
        for (u16_t dataByte = 0; dataByte <= bytesToWrite; ++dataByte) {
    201c:	b29b      	uxth	r3, r3
    201e:	e7f5      	b.n	200c <STACK_SIZE+0xc>
            pageBuffer[(dataByte + location)] = data[dataByte];
            bytesWritten++;
            pageLocation = location + dataByte;
        }
    }
}
    2020:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2022:	46c0      	nop			; (mov r8, r8)
    2024:	2000079c 	.word	0x2000079c
    2028:	20000515 	.word	0x20000515
    202c:	20000690 	.word	0x20000690
    2030:	20000790 	.word	0x20000790

00002034 <logFlight>:


void logFlight() {
    2034:	b51f      	push	{r0, r1, r2, r3, r4, lr}

    u8_t bytesToSend = 16;
    u8_t dataToSend[16];

    dataToSend[0] = FLIGHT_LOG;
    2036:	2346      	movs	r3, #70	; 0x46
    2038:	466a      	mov	r2, sp
    203a:	7013      	strb	r3, [r2, #0]
    dataToSend[1] = 0;
    203c:	2300      	movs	r3, #0

    dataToSend[2] = offsets.offsetBufferTime >> 0;
    203e:	4669      	mov	r1, sp
    dataToSend[3] = offsets.offsetBufferTime >> 8;
    2040:	4668      	mov	r0, sp

    u8_t bytesToSend = 16;
    u8_t dataToSend[16];

    dataToSend[0] = FLIGHT_LOG;
    dataToSend[1] = 0;
    2042:	7053      	strb	r3, [r2, #1]

    dataToSend[2] = offsets.offsetBufferTime >> 0;
    2044:	4a10      	ldr	r2, [pc, #64]	; (2088 <logFlight+0x54>)
    2046:	6813      	ldr	r3, [r2, #0]
    2048:	708b      	strb	r3, [r1, #2]
    dataToSend[3] = offsets.offsetBufferTime >> 8;
    204a:	0a19      	lsrs	r1, r3, #8
    204c:	70c1      	strb	r1, [r0, #3]
    dataToSend[4] = offsets.offsetBufferTime >> 16;
    204e:	0c19      	lsrs	r1, r3, #16
    dataToSend[5] = offsets.offsetBufferTime >> 24;
    2050:	0e1b      	lsrs	r3, r3, #24
    2052:	7143      	strb	r3, [r0, #5]

    dataToSend[6] = offsets.groundOffset >> 0;
    2054:	6993      	ldr	r3, [r2, #24]
    dataToSend[0] = FLIGHT_LOG;
    dataToSend[1] = 0;

    dataToSend[2] = offsets.offsetBufferTime >> 0;
    dataToSend[3] = offsets.offsetBufferTime >> 8;
    dataToSend[4] = offsets.offsetBufferTime >> 16;
    2056:	7101      	strb	r1, [r0, #4]
    dataToSend[5] = offsets.offsetBufferTime >> 24;

    dataToSend[6] = offsets.groundOffset >> 0;
    dataToSend[7] = offsets.groundOffset >> 8;
    2058:	0a19      	lsrs	r1, r3, #8
    dataToSend[2] = offsets.offsetBufferTime >> 0;
    dataToSend[3] = offsets.offsetBufferTime >> 8;
    dataToSend[4] = offsets.offsetBufferTime >> 16;
    dataToSend[5] = offsets.offsetBufferTime >> 24;

    dataToSend[6] = offsets.groundOffset >> 0;
    205a:	7183      	strb	r3, [r0, #6]
    dataToSend[7] = offsets.groundOffset >> 8;
    205c:	71c1      	strb	r1, [r0, #7]
    dataToSend[8] = offsets.groundOffset >> 16;
    205e:	0c19      	lsrs	r1, r3, #16
    dataToSend[9] = offsets.groundOffset >> 24;
    2060:	0e1b      	lsrs	r3, r3, #24
    2062:	7243      	strb	r3, [r0, #9]

    dataToSend[10] = offsets.groundTemperature >> 0;
    2064:	6a13      	ldr	r3, [r2, #32]
    dataToSend[4] = offsets.offsetBufferTime >> 16;
    dataToSend[5] = offsets.offsetBufferTime >> 24;

    dataToSend[6] = offsets.groundOffset >> 0;
    dataToSend[7] = offsets.groundOffset >> 8;
    dataToSend[8] = offsets.groundOffset >> 16;
    2066:	7201      	strb	r1, [r0, #8]
    dataToSend[9] = offsets.groundOffset >> 24;

    dataToSend[10] = offsets.groundTemperature >> 0;
    dataToSend[11] = offsets.groundTemperature >> 8;
    2068:	0a1a      	lsrs	r2, r3, #8
    dataToSend[6] = offsets.groundOffset >> 0;
    dataToSend[7] = offsets.groundOffset >> 8;
    dataToSend[8] = offsets.groundOffset >> 16;
    dataToSend[9] = offsets.groundOffset >> 24;

    dataToSend[10] = offsets.groundTemperature >> 0;
    206a:	7283      	strb	r3, [r0, #10]
    dataToSend[11] = offsets.groundTemperature >> 8;
    206c:	72c2      	strb	r2, [r0, #11]
    dataToSend[12] = offsets.groundTemperature >> 16;
    206e:	0c1a      	lsrs	r2, r3, #16
    dataToSend[13] = offsets.groundTemperature >> 24;
    2070:	0e1b      	lsrs	r3, r3, #24
    2072:	7343      	strb	r3, [r0, #13]

    //dataToSend[14] = accel >> 0;
    dataToSend[15] = 0xfe;
    2074:	23fe      	movs	r3, #254	; 0xfe
    dataToSend[8] = offsets.groundOffset >> 16;
    dataToSend[9] = offsets.groundOffset >> 24;

    dataToSend[10] = offsets.groundTemperature >> 0;
    dataToSend[11] = offsets.groundTemperature >> 8;
    dataToSend[12] = offsets.groundTemperature >> 16;
    2076:	7302      	strb	r2, [r0, #12]
    dataToSend[13] = offsets.groundTemperature >> 24;

    //dataToSend[14] = accel >> 0;
    dataToSend[15] = 0xfe;
    2078:	73c3      	strb	r3, [r0, #15]
    dataToSend[5] = offsets.offsetBufferTime >> 24;

    dataToSend[6] = offsets.groundOffset >> 0;
    dataToSend[7] = offsets.groundOffset >> 8;
    dataToSend[8] = offsets.groundOffset >> 16;
    dataToSend[9] = offsets.groundOffset >> 24;
    207a:	4669      	mov	r1, sp
    dataToSend[13] = offsets.groundTemperature >> 24;

    //dataToSend[14] = accel >> 0;
    dataToSend[15] = 0xfe;

    makePage(bytesToSend, dataToSend);
    207c:	2010      	movs	r0, #16
    207e:	4b03      	ldr	r3, [pc, #12]	; (208c <logFlight+0x58>)
    2080:	4798      	blx	r3
}
    2082:	b005      	add	sp, #20
    2084:	bd00      	pop	{pc}
    2086:	46c0      	nop			; (mov r8, r8)
    2088:	200004d0 	.word	0x200004d0
    208c:	00001fa5 	.word	0x00001fa5

00002090 <logEvent>:
void logEvent(u8_t eventType) {

    u8_t bytesToSend = 12;
    u8_t dataToSend[12];

    dataToSend[0] = EVENT_LOG;
    2090:	2345      	movs	r3, #69	; 0x45
    dataToSend[15] = 0xfe;

    makePage(bytesToSend, dataToSend);
}

void logEvent(u8_t eventType) {
    2092:	b530      	push	{r4, r5, lr}
    u8_t bytesToSend = 12;
    u8_t dataToSend[12];

    dataToSend[0] = EVENT_LOG;
    dataToSend[1] = eventType;
    dataToSend[2] = sample.sampleTick >> 0;
    2094:	4d13      	ldr	r5, [pc, #76]	; (20e4 <logEvent+0x54>)
    dataToSend[15] = 0xfe;

    makePage(bytesToSend, dataToSend);
}

void logEvent(u8_t eventType) {
    2096:	b085      	sub	sp, #20

    u8_t bytesToSend = 12;
    u8_t dataToSend[12];

    dataToSend[0] = EVENT_LOG;
    2098:	ac01      	add	r4, sp, #4
    209a:	7023      	strb	r3, [r4, #0]
    dataToSend[1] = eventType;
    dataToSend[2] = sample.sampleTick >> 0;
    209c:	686b      	ldr	r3, [r5, #4]

    u8_t bytesToSend = 12;
    u8_t dataToSend[12];

    dataToSend[0] = EVENT_LOG;
    dataToSend[1] = eventType;
    209e:	7060      	strb	r0, [r4, #1]
    dataToSend[2] = sample.sampleTick >> 0;
    20a0:	70a3      	strb	r3, [r4, #2]
    dataToSend[3] = sample.sampleTick >> 8;
    20a2:	686b      	ldr	r3, [r5, #4]
    20a4:	0a1b      	lsrs	r3, r3, #8
    20a6:	70e3      	strb	r3, [r4, #3]
    dataToSend[4] = sample.sampleTick >> 16;
    20a8:	686b      	ldr	r3, [r5, #4]
    20aa:	0c1b      	lsrs	r3, r3, #16
    20ac:	7123      	strb	r3, [r4, #4]
    dataToSend[5] = sample.sampleTick >> 24;
    20ae:	686b      	ldr	r3, [r5, #4]
    20b0:	0e1b      	lsrs	r3, r3, #24
    20b2:	7163      	strb	r3, [r4, #5]

    dataToSend[6] = (int)altitude >> 0;
    20b4:	4b0c      	ldr	r3, [pc, #48]	; (20e8 <logEvent+0x58>)
    20b6:	6818      	ldr	r0, [r3, #0]
    20b8:	6859      	ldr	r1, [r3, #4]
    20ba:	4b0c      	ldr	r3, [pc, #48]	; (20ec <logEvent+0x5c>)
    20bc:	4798      	blx	r3
    dataToSend[7] = (int)altitude >> 8;
    20be:	1203      	asrs	r3, r0, #8
    dataToSend[2] = sample.sampleTick >> 0;
    dataToSend[3] = sample.sampleTick >> 8;
    dataToSend[4] = sample.sampleTick >> 16;
    dataToSend[5] = sample.sampleTick >> 24;

    dataToSend[6] = (int)altitude >> 0;
    20c0:	71a0      	strb	r0, [r4, #6]
    dataToSend[7] = (int)altitude >> 8;
    20c2:	71e3      	strb	r3, [r4, #7]
    dataToSend[8] = (int)altitude >> 16;
    20c4:	1403      	asrs	r3, r0, #16
    dataToSend[9] = (int)altitude >> 24;
    20c6:	1600      	asrs	r0, r0, #24
    20c8:	7260      	strb	r0, [r4, #9]
    dataToSend[4] = sample.sampleTick >> 16;
    dataToSend[5] = sample.sampleTick >> 24;

    dataToSend[6] = (int)altitude >> 0;
    dataToSend[7] = (int)altitude >> 8;
    dataToSend[8] = (int)altitude >> 16;
    20ca:	7223      	strb	r3, [r4, #8]
    dataToSend[9] = (int)altitude >> 24;

    dataToSend[10] = sample.voltage.batV >> 0;
    20cc:	892b      	ldrh	r3, [r5, #8]
    dataToSend[11] = sample.voltage.batV >> 8;

    makePage(bytesToSend, dataToSend);
    20ce:	0021      	movs	r1, r4
    dataToSend[6] = (int)altitude >> 0;
    dataToSend[7] = (int)altitude >> 8;
    dataToSend[8] = (int)altitude >> 16;
    dataToSend[9] = (int)altitude >> 24;

    dataToSend[10] = sample.voltage.batV >> 0;
    20d0:	72a3      	strb	r3, [r4, #10]
    dataToSend[11] = sample.voltage.batV >> 8;
    20d2:	892b      	ldrh	r3, [r5, #8]

    makePage(bytesToSend, dataToSend);
    20d4:	200c      	movs	r0, #12
    dataToSend[7] = (int)altitude >> 8;
    dataToSend[8] = (int)altitude >> 16;
    dataToSend[9] = (int)altitude >> 24;

    dataToSend[10] = sample.voltage.batV >> 0;
    dataToSend[11] = sample.voltage.batV >> 8;
    20d6:	0a1b      	lsrs	r3, r3, #8
    20d8:	72e3      	strb	r3, [r4, #11]

    makePage(bytesToSend, dataToSend);
    20da:	4b05      	ldr	r3, [pc, #20]	; (20f0 <logEvent+0x60>)
    20dc:	4798      	blx	r3

}
    20de:	b005      	add	sp, #20
    20e0:	bd30      	pop	{r4, r5, pc}
    20e2:	46c0      	nop			; (mov r8, r8)
    20e4:	200007a0 	.word	0x200007a0
    20e8:	20000670 	.word	0x20000670
    20ec:	00005f3d 	.word	0x00005f3d
    20f0:	00001fa5 	.word	0x00001fa5

000020f4 <logSensors>:
void logSensors() {

    u8_t bytesToSend = 24;
    u8_t dataToSend[24];

    dataToSend[0] = SENSOR_LOG;
    20f4:	2353      	movs	r3, #83	; 0x53

    makePage(bytesToSend, dataToSend);

}

void logSensors() {
    20f6:	b5f0      	push	{r4, r5, r6, r7, lr}
    u8_t bytesToSend = 24;
    u8_t dataToSend[24];

    dataToSend[0] = SENSOR_LOG;
	
    dataToSend[1] = sample.sampleTick >> 0;
    20f8:	4c4b      	ldr	r4, [pc, #300]	; (2228 <logSensors+0x134>)

    makePage(bytesToSend, dataToSend);

}

void logSensors() {
    20fa:	b089      	sub	sp, #36	; 0x24

    u8_t bytesToSend = 24;
    u8_t dataToSend[24];

    dataToSend[0] = SENSOR_LOG;
    20fc:	aa02      	add	r2, sp, #8
    20fe:	7013      	strb	r3, [r2, #0]
	
    dataToSend[1] = sample.sampleTick >> 0;
    2100:	6863      	ldr	r3, [r4, #4]
    2102:	7053      	strb	r3, [r2, #1]
    dataToSend[2] = sample.sampleTick >> 8;
    2104:	6863      	ldr	r3, [r4, #4]
    2106:	0a1b      	lsrs	r3, r3, #8
    2108:	7093      	strb	r3, [r2, #2]
    dataToSend[3] = sample.sampleTick >> 16;
    210a:	6863      	ldr	r3, [r4, #4]
    210c:	0c1b      	lsrs	r3, r3, #16
    210e:	70d3      	strb	r3, [r2, #3]
    dataToSend[4] = sample.sampleTick >> 24;
    2110:	6863      	ldr	r3, [r4, #4]
    2112:	0e1b      	lsrs	r3, r3, #24
    2114:	7113      	strb	r3, [r2, #4]

    dataToSend[5] = (int)altitude >> 0;
    2116:	4b45      	ldr	r3, [pc, #276]	; (222c <logSensors+0x138>)
    2118:	6818      	ldr	r0, [r3, #0]
    211a:	6859      	ldr	r1, [r3, #4]
    211c:	4b44      	ldr	r3, [pc, #272]	; (2230 <logSensors+0x13c>)
    211e:	4798      	blx	r3
    2120:	ab02      	add	r3, sp, #8
    dataToSend[6] = (int)altitude >> 8;
    2122:	aa02      	add	r2, sp, #8
    dataToSend[1] = sample.sampleTick >> 0;
    dataToSend[2] = sample.sampleTick >> 8;
    dataToSend[3] = sample.sampleTick >> 16;
    dataToSend[4] = sample.sampleTick >> 24;

    dataToSend[5] = (int)altitude >> 0;
    2124:	7158      	strb	r0, [r3, #5]
    dataToSend[6] = (int)altitude >> 8;
    2126:	1203      	asrs	r3, r0, #8
    2128:	7193      	strb	r3, [r2, #6]
    dataToSend[7] = (int)altitude >> 16;
    212a:	1403      	asrs	r3, r0, #16
    212c:	71d3      	strb	r3, [r2, #7]
    dataToSend[8] = (int)altitude >> 24;

    float fractionalAccel = accel - (int16_t)(accel);
    212e:	4b41      	ldr	r3, [pc, #260]	; (2234 <logSensors+0x140>)
    dataToSend[4] = sample.sampleTick >> 24;

    dataToSend[5] = (int)altitude >> 0;
    dataToSend[6] = (int)altitude >> 8;
    dataToSend[7] = (int)altitude >> 16;
    dataToSend[8] = (int)altitude >> 24;
    2130:	1600      	asrs	r0, r0, #24

    float fractionalAccel = accel - (int16_t)(accel);
    2132:	681e      	ldr	r6, [r3, #0]
    2134:	685f      	ldr	r7, [r3, #4]
    dataToSend[4] = sample.sampleTick >> 24;

    dataToSend[5] = (int)altitude >> 0;
    dataToSend[6] = (int)altitude >> 8;
    dataToSend[7] = (int)altitude >> 16;
    dataToSend[8] = (int)altitude >> 24;
    2136:	7210      	strb	r0, [r2, #8]

    float fractionalAccel = accel - (int16_t)(accel);
    2138:	0039      	movs	r1, r7
    213a:	4b3d      	ldr	r3, [pc, #244]	; (2230 <logSensors+0x13c>)
    213c:	0030      	movs	r0, r6
    213e:	4798      	blx	r3
    2140:	b205      	sxth	r5, r0
    u16_t fractAccelPart = fractionalAccel * 1000;
    2142:	4b3d      	ldr	r3, [pc, #244]	; (2238 <logSensors+0x144>)
    2144:	0028      	movs	r0, r5
    2146:	4798      	blx	r3
    2148:	0002      	movs	r2, r0
    214a:	000b      	movs	r3, r1
    214c:	0030      	movs	r0, r6
    214e:	0039      	movs	r1, r7
    2150:	4e3a      	ldr	r6, [pc, #232]	; (223c <logSensors+0x148>)
    2152:	47b0      	blx	r6
    2154:	4b3a      	ldr	r3, [pc, #232]	; (2240 <logSensors+0x14c>)
    2156:	4798      	blx	r3
    2158:	4b3a      	ldr	r3, [pc, #232]	; (2244 <logSensors+0x150>)
    215a:	493b      	ldr	r1, [pc, #236]	; (2248 <logSensors+0x154>)
    215c:	4798      	blx	r3
    215e:	4f3b      	ldr	r7, [pc, #236]	; (224c <logSensors+0x158>)
    2160:	47b8      	blx	r7

    dataToSend[9] = (int16_t)(accel) >> 0;
    2162:	aa02      	add	r2, sp, #8
    dataToSend[6] = (int)altitude >> 8;
    dataToSend[7] = (int)altitude >> 16;
    dataToSend[8] = (int)altitude >> 24;

    float fractionalAccel = accel - (int16_t)(accel);
    u16_t fractAccelPart = fractionalAccel * 1000;
    2164:	b283      	uxth	r3, r0

    dataToSend[9] = (int16_t)(accel) >> 0;
    dataToSend[10] = (int16_t)(accel) >> 8;
    dataToSend[11] = fractAccelPart >> 0;
    2166:	72d3      	strb	r3, [r2, #11]
    dataToSend[12] = fractAccelPart >> 8;
    2168:	0a1b      	lsrs	r3, r3, #8
    216a:	7313      	strb	r3, [r2, #12]


    float fractionalVelocity = velocity - (int16_t)(velocity);
    216c:	4b38      	ldr	r3, [pc, #224]	; (2250 <logSensors+0x15c>)
    dataToSend[8] = (int)altitude >> 24;

    float fractionalAccel = accel - (int16_t)(accel);
    u16_t fractAccelPart = fractionalAccel * 1000;

    dataToSend[9] = (int16_t)(accel) >> 0;
    216e:	7255      	strb	r5, [r2, #9]
    dataToSend[10] = (int16_t)(accel) >> 8;
    2170:	122d      	asrs	r5, r5, #8
    2172:	7295      	strb	r5, [r2, #10]
    dataToSend[11] = fractAccelPart >> 0;
    dataToSend[12] = fractAccelPart >> 8;


    float fractionalVelocity = velocity - (int16_t)(velocity);
    2174:	681a      	ldr	r2, [r3, #0]
    2176:	685b      	ldr	r3, [r3, #4]
    2178:	9200      	str	r2, [sp, #0]
    217a:	9301      	str	r3, [sp, #4]
    217c:	0010      	movs	r0, r2
    217e:	0019      	movs	r1, r3
    2180:	4b2b      	ldr	r3, [pc, #172]	; (2230 <logSensors+0x13c>)
    2182:	4798      	blx	r3
    2184:	b205      	sxth	r5, r0
    u16_t fractVelocityPart = fractionalVelocity * 1000;
    2186:	4b2c      	ldr	r3, [pc, #176]	; (2238 <logSensors+0x144>)
    2188:	0028      	movs	r0, r5
    218a:	4798      	blx	r3
    218c:	0002      	movs	r2, r0
    218e:	000b      	movs	r3, r1
    2190:	9800      	ldr	r0, [sp, #0]
    2192:	9901      	ldr	r1, [sp, #4]
    2194:	47b0      	blx	r6
    2196:	4b2a      	ldr	r3, [pc, #168]	; (2240 <logSensors+0x14c>)
    2198:	4798      	blx	r3
    219a:	4b2a      	ldr	r3, [pc, #168]	; (2244 <logSensors+0x150>)
    219c:	492a      	ldr	r1, [pc, #168]	; (2248 <logSensors+0x154>)
    219e:	4798      	blx	r3
    21a0:	47b8      	blx	r7

    dataToSend[13] = (int16_t)(velocity) >> 0;
    21a2:	aa02      	add	r2, sp, #8
    dataToSend[11] = fractAccelPart >> 0;
    dataToSend[12] = fractAccelPart >> 8;


    float fractionalVelocity = velocity - (int16_t)(velocity);
    u16_t fractVelocityPart = fractionalVelocity * 1000;
    21a4:	b283      	uxth	r3, r0

    dataToSend[13] = (int16_t)(velocity) >> 0;
    21a6:	7355      	strb	r5, [r2, #13]
    dataToSend[14] = (int16_t)(velocity) >> 8;
    dataToSend[15] = fractVelocityPart >> 0;
    21a8:	73d3      	strb	r3, [r2, #15]

    float fractionalVelocity = velocity - (int16_t)(velocity);
    u16_t fractVelocityPart = fractionalVelocity * 1000;

    dataToSend[13] = (int16_t)(velocity) >> 0;
    dataToSend[14] = (int16_t)(velocity) >> 8;
    21aa:	122d      	asrs	r5, r5, #8
    dataToSend[15] = fractVelocityPart >> 0;
    dataToSend[16] = fractVelocityPart >> 8;
    21ac:	0a1b      	lsrs	r3, r3, #8

    float fractionalVelocity = velocity - (int16_t)(velocity);
    u16_t fractVelocityPart = fractionalVelocity * 1000;

    dataToSend[13] = (int16_t)(velocity) >> 0;
    dataToSend[14] = (int16_t)(velocity) >> 8;
    21ae:	7395      	strb	r5, [r2, #14]
    dataToSend[15] = fractVelocityPart >> 0;
    dataToSend[16] = fractVelocityPart >> 8;
    21b0:	7413      	strb	r3, [r2, #16]

    dataToSend[17] = (u32_t)sample.altitudefeet >> 0;
    21b2:	6c20      	ldr	r0, [r4, #64]	; 0x40
    21b4:	6c61      	ldr	r1, [r4, #68]	; 0x44
    21b6:	4d27      	ldr	r5, [pc, #156]	; (2254 <logSensors+0x160>)
    21b8:	47a8      	blx	r5
    21ba:	ab02      	add	r3, sp, #8
    21bc:	7458      	strb	r0, [r3, #17]
    dataToSend[18] = (u32_t)sample.altitudefeet >> 8;
    21be:	6c20      	ldr	r0, [r4, #64]	; 0x40
    21c0:	6c61      	ldr	r1, [r4, #68]	; 0x44
    21c2:	47a8      	blx	r5
    21c4:	ab02      	add	r3, sp, #8
    21c6:	0a00      	lsrs	r0, r0, #8
    21c8:	7498      	strb	r0, [r3, #18]
    dataToSend[19] = (u32_t)sample.altitudefeet >> 16;
    21ca:	6c20      	ldr	r0, [r4, #64]	; 0x40
    21cc:	6c61      	ldr	r1, [r4, #68]	; 0x44
    21ce:	47a8      	blx	r5
    21d0:	ab02      	add	r3, sp, #8
    21d2:	0c00      	lsrs	r0, r0, #16
    21d4:	74d8      	strb	r0, [r3, #19]
    dataToSend[20] = (u32_t)sample.altitudefeet >> 24;
    21d6:	6c20      	ldr	r0, [r4, #64]	; 0x40
    21d8:	6c61      	ldr	r1, [r4, #68]	; 0x44
    21da:	47a8      	blx	r5
    21dc:	ab02      	add	r3, sp, #8
    21de:	0e00      	lsrs	r0, r0, #24

    float fractionalAccelraw = sample.accelZ - (int16_t)(sample.accelZ);
    21e0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    dataToSend[16] = fractVelocityPart >> 8;

    dataToSend[17] = (u32_t)sample.altitudefeet >> 0;
    dataToSend[18] = (u32_t)sample.altitudefeet >> 8;
    dataToSend[19] = (u32_t)sample.altitudefeet >> 16;
    dataToSend[20] = (u32_t)sample.altitudefeet >> 24;
    21e2:	7518      	strb	r0, [r3, #20]

    float fractionalAccelraw = sample.accelZ - (int16_t)(sample.accelZ);
    21e4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    u8_t fractAccelRawPart = fractionalAccelraw * 256;

    dataToSend[21] = (int16_t)(sample.accelZ) >> 0;
    21e6:	4d1c      	ldr	r5, [pc, #112]	; (2258 <logSensors+0x164>)
    21e8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    dataToSend[17] = (u32_t)sample.altitudefeet >> 0;
    dataToSend[18] = (u32_t)sample.altitudefeet >> 8;
    dataToSend[19] = (u32_t)sample.altitudefeet >> 16;
    dataToSend[20] = (u32_t)sample.altitudefeet >> 24;

    float fractionalAccelraw = sample.accelZ - (int16_t)(sample.accelZ);
    21ea:	9300      	str	r3, [sp, #0]
    u8_t fractAccelRawPart = fractionalAccelraw * 256;

    dataToSend[21] = (int16_t)(sample.accelZ) >> 0;
    21ec:	47a8      	blx	r5
    21ee:	ab02      	add	r3, sp, #8
    21f0:	7558      	strb	r0, [r3, #21]
    dataToSend[22] = (int16_t)(sample.accelZ) >> 8;
    21f2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    21f4:	47a8      	blx	r5
    21f6:	ab02      	add	r3, sp, #8
    21f8:	0a00      	lsrs	r0, r0, #8
    21fa:	7598      	strb	r0, [r3, #22]
    dataToSend[23] = fractAccelRawPart >> 0;
    21fc:	9800      	ldr	r0, [sp, #0]
    21fe:	47a8      	blx	r5
    2200:	4b16      	ldr	r3, [pc, #88]	; (225c <logSensors+0x168>)
    2202:	b200      	sxth	r0, r0
    2204:	4798      	blx	r3
    2206:	4b16      	ldr	r3, [pc, #88]	; (2260 <logSensors+0x16c>)
    2208:	1c01      	adds	r1, r0, #0
    220a:	1c30      	adds	r0, r6, #0
    220c:	4798      	blx	r3
    220e:	2187      	movs	r1, #135	; 0x87
    2210:	4b0c      	ldr	r3, [pc, #48]	; (2244 <logSensors+0x150>)
    2212:	05c9      	lsls	r1, r1, #23
    2214:	4798      	blx	r3
    2216:	47b8      	blx	r7
    2218:	ab02      	add	r3, sp, #8
    221a:	75d8      	strb	r0, [r3, #23]
	 dataToSend[22] = 0xfd;
	 dataToSend[23] = 0xfe;
	 
	 */

    makePage(bytesToSend, dataToSend);
    221c:	0019      	movs	r1, r3
    221e:	2018      	movs	r0, #24
    2220:	4b10      	ldr	r3, [pc, #64]	; (2264 <logSensors+0x170>)
    2222:	4798      	blx	r3
}
    2224:	b009      	add	sp, #36	; 0x24
    2226:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2228:	200007a0 	.word	0x200007a0
    222c:	20000670 	.word	0x20000670
    2230:	00005f3d 	.word	0x00005f3d
    2234:	20000660 	.word	0x20000660
    2238:	00005fa9 	.word	0x00005fa9
    223c:	00005855 	.word	0x00005855
    2240:	00006145 	.word	0x00006145
    2244:	00003eb9 	.word	0x00003eb9
    2248:	447a0000 	.word	0x447a0000
    224c:	00003ced 	.word	0x00003ced
    2250:	20000668 	.word	0x20000668
    2254:	00003d1d 	.word	0x00003d1d
    2258:	000043ed 	.word	0x000043ed
    225c:	00004431 	.word	0x00004431
    2260:	000040e1 	.word	0x000040e1
    2264:	00001fa5 	.word	0x00001fa5

00002268 <getFlightStartAddress>:

    u8_t addressToCheck[3];

    u16_t flightAddressLoc = FLIGHTZEROSTART + (flightToFind * 0x06);

    AT25SEreadSample(flightAddressLoc, 0x03, addressToCheck);
    2268:	2306      	movs	r3, #6
    makePage(bytesToSend, dataToSend);
}



u32_t getFlightStartAddress(u8_t flightToFind) {
    226a:	b513      	push	{r0, r1, r4, lr}

    u8_t addressToCheck[3];

    u16_t flightAddressLoc = FLIGHTZEROSTART + (flightToFind * 0x06);

    AT25SEreadSample(flightAddressLoc, 0x03, addressToCheck);
    226c:	4358      	muls	r0, r3
    226e:	ac01      	add	r4, sp, #4
    2270:	3001      	adds	r0, #1
    2272:	30ff      	adds	r0, #255	; 0xff
    2274:	0022      	movs	r2, r4
    2276:	2103      	movs	r1, #3
    2278:	4b04      	ldr	r3, [pc, #16]	; (228c <getFlightStartAddress+0x24>)
    227a:	4798      	blx	r3

    u32_t flightStartAddress = addressToCheck[0] << 0 | addressToCheck[1] << 8 | addressToCheck[2] << 16;
    227c:	7860      	ldrb	r0, [r4, #1]
    227e:	78a3      	ldrb	r3, [r4, #2]
    2280:	0200      	lsls	r0, r0, #8
    2282:	041b      	lsls	r3, r3, #16
    2284:	4318      	orrs	r0, r3
    2286:	7823      	ldrb	r3, [r4, #0]
    2288:	4318      	orrs	r0, r3

    return flightStartAddress;
}
    228a:	bd16      	pop	{r1, r2, r4, pc}
    228c:	00000341 	.word	0x00000341

00002290 <FindFlightEndingAddress>:

    u8_t addressToCheck[3];

    u16_t flightAddressLoc = FLIGHTZEROEND + (findThisFlightsEnd * 0x06);

    AT25SEreadSample(flightAddressLoc, 0x03, addressToCheck);
    2290:	2306      	movs	r3, #6
    u32_t flightStartAddress = addressToCheck[0] << 0 | addressToCheck[1] << 8 | addressToCheck[2] << 16;

    return flightStartAddress;
}

u32_t FindFlightEndingAddress(u8_t findThisFlightsEnd) {
    2292:	b513      	push	{r0, r1, r4, lr}

    u8_t addressToCheck[3];

    u16_t flightAddressLoc = FLIGHTZEROEND + (findThisFlightsEnd * 0x06);

    AT25SEreadSample(flightAddressLoc, 0x03, addressToCheck);
    2294:	4358      	muls	r0, r3
    2296:	ac01      	add	r4, sp, #4
    2298:	3004      	adds	r0, #4
    229a:	30ff      	adds	r0, #255	; 0xff
    229c:	0022      	movs	r2, r4
    229e:	2103      	movs	r1, #3
    22a0:	4b04      	ldr	r3, [pc, #16]	; (22b4 <FindFlightEndingAddress+0x24>)
    22a2:	4798      	blx	r3

    u32_t flightEndAddress = addressToCheck[0] << 0 | addressToCheck[1] << 8 | addressToCheck[2] << 16;
    22a4:	7860      	ldrb	r0, [r4, #1]
    22a6:	78a3      	ldrb	r3, [r4, #2]
    22a8:	0200      	lsls	r0, r0, #8
    22aa:	041b      	lsls	r3, r3, #16
    22ac:	4318      	orrs	r0, r3
    22ae:	7823      	ldrb	r3, [r4, #0]
    22b0:	4318      	orrs	r0, r3

    return flightEndAddress;
}
    22b2:	bd16      	pop	{r1, r2, r4, pc}
    22b4:	00000341 	.word	0x00000341

000022b8 <isFlightLogged>:

bool isFlightLogged(u8_t flightNumbToCheck) {
    22b8:	b510      	push	{r4, lr}

    u32_t possibleStart = getFlightStartAddress(flightNumbToCheck);
    22ba:	4b04      	ldr	r3, [pc, #16]	; (22cc <isFlightLogged+0x14>)
    22bc:	4798      	blx	r3
    22be:	4b04      	ldr	r3, [pc, #16]	; (22d0 <isFlightLogged+0x18>)
    if (possibleStart == 0xFFFFFF) {
        return false;
    } else {
        return true;
    }
}
    22c0:	18c0      	adds	r0, r0, r3
    22c2:	1e43      	subs	r3, r0, #1
    22c4:	4198      	sbcs	r0, r3
    22c6:	b2c0      	uxtb	r0, r0
    22c8:	bd10      	pop	{r4, pc}
    22ca:	46c0      	nop			; (mov r8, r8)
    22cc:	00002269 	.word	0x00002269
    22d0:	ff000001 	.word	0xff000001

000022d4 <writeFlightEndAddress>:



void writeFlightEndAddress() {
    22d4:	b507      	push	{r0, r1, r2, lr}
    u32_t endingAddress = currentAddress;

    u8_t address[3] = {endingAddress >> 0, endingAddress >> 8, endingAddress >> 16};

    u16_t flightAddressLoc = FLIGHTZEROEND + (flightNumb * 0x06);
    AT25SFWriteBytes(flightAddressLoc, 3, address);
    22d6:	2006      	movs	r0, #6



void writeFlightEndAddress() {

    u32_t endingAddress = currentAddress;
    22d8:	4b09      	ldr	r3, [pc, #36]	; (2300 <writeFlightEndAddress+0x2c>)

    u8_t address[3] = {endingAddress >> 0, endingAddress >> 8, endingAddress >> 16};
    22da:	aa01      	add	r2, sp, #4



void writeFlightEndAddress() {

    u32_t endingAddress = currentAddress;
    22dc:	681b      	ldr	r3, [r3, #0]

    u8_t address[3] = {endingAddress >> 0, endingAddress >> 8, endingAddress >> 16};
    22de:	7013      	strb	r3, [r2, #0]
    22e0:	0a19      	lsrs	r1, r3, #8
    22e2:	0c1b      	lsrs	r3, r3, #16
    22e4:	7093      	strb	r3, [r2, #2]

    u16_t flightAddressLoc = FLIGHTZEROEND + (flightNumb * 0x06);
    22e6:	4b07      	ldr	r3, [pc, #28]	; (2304 <writeFlightEndAddress+0x30>)

void writeFlightEndAddress() {

    u32_t endingAddress = currentAddress;

    u8_t address[3] = {endingAddress >> 0, endingAddress >> 8, endingAddress >> 16};
    22e8:	7051      	strb	r1, [r2, #1]

    u16_t flightAddressLoc = FLIGHTZEROEND + (flightNumb * 0x06);
    AT25SFWriteBytes(flightAddressLoc, 3, address);
    22ea:	781b      	ldrb	r3, [r3, #0]
    22ec:	2103      	movs	r1, #3
    22ee:	4358      	muls	r0, r3
    22f0:	3004      	adds	r0, #4
    22f2:	30ff      	adds	r0, #255	; 0xff
    22f4:	4b04      	ldr	r3, [pc, #16]	; (2308 <writeFlightEndAddress+0x34>)
    22f6:	4798      	blx	r3
    delay_ms(10);
    22f8:	200a      	movs	r0, #10
    22fa:	4b04      	ldr	r3, [pc, #16]	; (230c <writeFlightEndAddress+0x38>)
    22fc:	4798      	blx	r3

}
    22fe:	bd07      	pop	{r0, r1, r2, pc}
    2300:	20000794 	.word	0x20000794
    2304:	20000501 	.word	0x20000501
    2308:	00000255 	.word	0x00000255
    230c:	0000102d 	.word	0x0000102d

00002310 <findNewFlightStart>:




void findNewFlightStart() {
    2310:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

    for (u8_t flightNumbToCheck = 0; flightNumbToCheck < 20; ++flightNumbToCheck) {
    2312:	2400      	movs	r4, #0

        if (!isFlightLogged(flightNumbToCheck)) {
    2314:	0020      	movs	r0, r4
    2316:	4b23      	ldr	r3, [pc, #140]	; (23a4 <findNewFlightStart+0x94>)
    2318:	4798      	blx	r3
    231a:	2800      	cmp	r0, #0
    231c:	d13c      	bne.n	2398 <findNewFlightStart+0x88>
    231e:	4f22      	ldr	r7, [pc, #136]	; (23a8 <findNewFlightStart+0x98>)
    2320:	ad01      	add	r5, sp, #4

            if (flightNumbToCheck > 0) {
    2322:	2c00      	cmp	r4, #0
    2324:	d016      	beq.n	2354 <findNewFlightStart+0x44>


                u32_t startAddress = FindFlightEndingAddress(flightNumbToCheck - 1);
    2326:	1e60      	subs	r0, r4, #1
    2328:	4b20      	ldr	r3, [pc, #128]	; (23ac <findNewFlightStart+0x9c>)
    232a:	b2c0      	uxtb	r0, r0
    232c:	4798      	blx	r3
                delay_ms(5);
    232e:	4b20      	ldr	r3, [pc, #128]	; (23b0 <findNewFlightStart+0xa0>)
        if (!isFlightLogged(flightNumbToCheck)) {

            if (flightNumbToCheck > 0) {


                u32_t startAddress = FindFlightEndingAddress(flightNumbToCheck - 1);
    2330:	0006      	movs	r6, r0
                delay_ms(5);
    2332:	2005      	movs	r0, #5
    2334:	4798      	blx	r3
                currentAddress = startAddress;

                u8_t address[3] = {startAddress >> 0, startAddress >> 8, startAddress >> 16};

                u16_t flightAddressLoc = FLIGHTZEROSTART + (flightNumbToCheck * 0x06);
                AT25SFWriteBytes(flightAddressLoc, 3, address);
    2336:	2006      	movs	r0, #6
    2338:	4360      	muls	r0, r4
                u32_t startAddress = FindFlightEndingAddress(flightNumbToCheck - 1);
                delay_ms(5);

                currentAddress = startAddress;

                u8_t address[3] = {startAddress >> 0, startAddress >> 8, startAddress >> 16};
    233a:	0a33      	lsrs	r3, r6, #8

                u16_t flightAddressLoc = FLIGHTZEROSTART + (flightNumbToCheck * 0x06);
                AT25SFWriteBytes(flightAddressLoc, 3, address);
    233c:	3001      	adds	r0, #1


                u32_t startAddress = FindFlightEndingAddress(flightNumbToCheck - 1);
                delay_ms(5);

                currentAddress = startAddress;
    233e:	603e      	str	r6, [r7, #0]

                u8_t address[3] = {startAddress >> 0, startAddress >> 8, startAddress >> 16};
    2340:	702e      	strb	r6, [r5, #0]
    2342:	706b      	strb	r3, [r5, #1]
    2344:	0c36      	lsrs	r6, r6, #16

                u16_t flightAddressLoc = FLIGHTZEROSTART + (flightNumbToCheck * 0x06);
                AT25SFWriteBytes(flightAddressLoc, 3, address);
    2346:	30ff      	adds	r0, #255	; 0xff
    2348:	002a      	movs	r2, r5
    234a:	2103      	movs	r1, #3
    234c:	4b19      	ldr	r3, [pc, #100]	; (23b4 <findNewFlightStart+0xa4>)
                u32_t startAddress = FindFlightEndingAddress(flightNumbToCheck - 1);
                delay_ms(5);

                currentAddress = startAddress;

                u8_t address[3] = {startAddress >> 0, startAddress >> 8, startAddress >> 16};
    234e:	70ae      	strb	r6, [r5, #2]

                u16_t flightAddressLoc = FLIGHTZEROSTART + (flightNumbToCheck * 0x06);
                AT25SFWriteBytes(flightAddressLoc, 3, address);
    2350:	4798      	blx	r3
    2352:	e00f      	b.n	2374 <findNewFlightStart+0x64>

                // for flight 0, starting address is always 0x00100 (beginning of second 4k block)
            } else {
                u8_t address[3] = {0x00,0x10,0x00};
    2354:	2310      	movs	r3, #16
                AT25SFWriteBytes(FLIGHTZEROSTART, 3, address);
    2356:	2080      	movs	r0, #128	; 0x80
                u16_t flightAddressLoc = FLIGHTZEROSTART + (flightNumbToCheck * 0x06);
                AT25SFWriteBytes(flightAddressLoc, 3, address);

                // for flight 0, starting address is always 0x00100 (beginning of second 4k block)
            } else {
                u8_t address[3] = {0x00,0x10,0x00};
    2358:	706b      	strb	r3, [r5, #1]
                AT25SFWriteBytes(FLIGHTZEROSTART, 3, address);
    235a:	0040      	lsls	r0, r0, #1
    235c:	4b15      	ldr	r3, [pc, #84]	; (23b4 <findNewFlightStart+0xa4>)
    235e:	002a      	movs	r2, r5
    2360:	2103      	movs	r1, #3
                u16_t flightAddressLoc = FLIGHTZEROSTART + (flightNumbToCheck * 0x06);
                AT25SFWriteBytes(flightAddressLoc, 3, address);

                // for flight 0, starting address is always 0x00100 (beginning of second 4k block)
            } else {
                u8_t address[3] = {0x00,0x10,0x00};
    2362:	702c      	strb	r4, [r5, #0]
    2364:	70ac      	strb	r4, [r5, #2]
                AT25SFWriteBytes(FLIGHTZEROSTART, 3, address);
    2366:	4798      	blx	r3
                currentAddress = 0x001000;
    2368:	2380      	movs	r3, #128	; 0x80
    236a:	015b      	lsls	r3, r3, #5
    236c:	603b      	str	r3, [r7, #0]
                beep(1500);
    236e:	4812      	ldr	r0, [pc, #72]	; (23b8 <findNewFlightStart+0xa8>)
    2370:	4b12      	ldr	r3, [pc, #72]	; (23bc <findNewFlightStart+0xac>)
    2372:	4798      	blx	r3
            }
            flightNumb = flightNumbToCheck;
    2374:	4b12      	ldr	r3, [pc, #72]	; (23c0 <findNewFlightStart+0xb0>)
    2376:	701c      	strb	r4, [r3, #0]

            while (flightNumbToCheck > 0) {
                beep(500);
    2378:	20fa      	movs	r0, #250	; 0xfa
    237a:	0040      	lsls	r0, r0, #1
                currentAddress = 0x001000;
                beep(1500);
            }
            flightNumb = flightNumbToCheck;

            while (flightNumbToCheck > 0) {
    237c:	2c00      	cmp	r4, #0
    237e:	d008      	beq.n	2392 <findNewFlightStart+0x82>
                beep(500);
    2380:	4b0e      	ldr	r3, [pc, #56]	; (23bc <findNewFlightStart+0xac>)
    2382:	4798      	blx	r3
                delay_ms(500);
    2384:	20fa      	movs	r0, #250	; 0xfa
    2386:	4b0a      	ldr	r3, [pc, #40]	; (23b0 <findNewFlightStart+0xa0>)
    2388:	0040      	lsls	r0, r0, #1
                --flightNumbToCheck;
    238a:	3c01      	subs	r4, #1
            }
            flightNumb = flightNumbToCheck;

            while (flightNumbToCheck > 0) {
                beep(500);
                delay_ms(500);
    238c:	4798      	blx	r3
                --flightNumbToCheck;
    238e:	b2e4      	uxtb	r4, r4
    2390:	e7f2      	b.n	2378 <findNewFlightStart+0x68>
            }
            delay_ms(500);
    2392:	4b07      	ldr	r3, [pc, #28]	; (23b0 <findNewFlightStart+0xa0>)
    2394:	4798      	blx	r3
            break;
    2396:	e003      	b.n	23a0 <findNewFlightStart+0x90>



void findNewFlightStart() {

    for (u8_t flightNumbToCheck = 0; flightNumbToCheck < 20; ++flightNumbToCheck) {
    2398:	3401      	adds	r4, #1
    239a:	b2e4      	uxtb	r4, r4
    239c:	2c14      	cmp	r4, #20
    239e:	d1b9      	bne.n	2314 <findNewFlightStart+0x4>
            }
            delay_ms(500);
            break;
        }
    }
}
    23a0:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    23a2:	46c0      	nop			; (mov r8, r8)
    23a4:	000022b9 	.word	0x000022b9
    23a8:	20000794 	.word	0x20000794
    23ac:	00002291 	.word	0x00002291
    23b0:	0000102d 	.word	0x0000102d
    23b4:	00000255 	.word	0x00000255
    23b8:	000005dc 	.word	0x000005dc
    23bc:	00000d9d 	.word	0x00000d9d
    23c0:	20000501 	.word	0x20000501

000023c4 <takeSample>:
#include <util.h>
#include <boardDefines.h>
#include <MS5803.h>

bool takeSample() {
    return SampleBool;
    23c4:	4b01      	ldr	r3, [pc, #4]	; (23cc <takeSample+0x8>)
    23c6:	7818      	ldrb	r0, [r3, #0]
}
    23c8:	4770      	bx	lr
    23ca:	46c0      	nop			; (mov r8, r8)
    23cc:	20000514 	.word	0x20000514

000023d0 <pullSample>:

void pullSample() {
    SampleBool = true;
    23d0:	2201      	movs	r2, #1
    23d2:	4b01      	ldr	r3, [pc, #4]	; (23d8 <pullSample+0x8>)
    23d4:	701a      	strb	r2, [r3, #0]
}
    23d6:	4770      	bx	lr
    23d8:	20000514 	.word	0x20000514

000023dc <sampleTick>:
}

volatile sample_t sample;

void sampleTick() {
    SampleBool = false;
    23dc:	2200      	movs	r2, #0
    SampleBool = false;
}

volatile sample_t sample;

void sampleTick() {
    23de:	b5f0      	push	{r4, r5, r6, r7, lr}
    SampleBool = false;
    23e0:	4bb8      	ldr	r3, [pc, #736]	; (26c4 <sampleTick+0x2e8>)
    SampleBool = false;
}

volatile sample_t sample;

void sampleTick() {
    23e2:	b087      	sub	sp, #28
    SampleBool = false;

    // take last samples time to discover Dt before setting new time
    sample.tickDelta = millis() - sample.sampleTick;
    23e4:	4db8      	ldr	r5, [pc, #736]	; (26c8 <sampleTick+0x2ec>)
}

volatile sample_t sample;

void sampleTick() {
    SampleBool = false;
    23e6:	701a      	strb	r2, [r3, #0]

    // take last samples time to discover Dt before setting new time
    sample.tickDelta = millis() - sample.sampleTick;
    23e8:	47a8      	blx	r5
    23ea:	4cb8      	ldr	r4, [pc, #736]	; (26cc <sampleTick+0x2f0>)
    23ec:	6863      	ldr	r3, [r4, #4]
    23ee:	1ac0      	subs	r0, r0, r3
    23f0:	b280      	uxth	r0, r0
    23f2:	8020      	strh	r0, [r4, #0]
    sample.sampleTick = millis();
    23f4:	47a8      	blx	r5
    altimeter.flightTime = sample.sampleTick - offsets.StartupTick;
    23f6:	4ab6      	ldr	r2, [pc, #728]	; (26d0 <sampleTick+0x2f4>)
void sampleTick() {
    SampleBool = false;

    // take last samples time to discover Dt before setting new time
    sample.tickDelta = millis() - sample.sampleTick;
    sample.sampleTick = millis();
    23f8:	6060      	str	r0, [r4, #4]
    altimeter.flightTime = sample.sampleTick - offsets.StartupTick;
    23fa:	6863      	ldr	r3, [r4, #4]
    23fc:	6a92      	ldr	r2, [r2, #40]	; 0x28

    sample.voltage.batV = adc_read(senseBatPin);
    23fe:	4db5      	ldr	r5, [pc, #724]	; (26d4 <sampleTick+0x2f8>)
    SampleBool = false;

    // take last samples time to discover Dt before setting new time
    sample.tickDelta = millis() - sample.sampleTick;
    sample.sampleTick = millis();
    altimeter.flightTime = sample.sampleTick - offsets.StartupTick;
    2400:	1a9b      	subs	r3, r3, r2
    2402:	4ab5      	ldr	r2, [pc, #724]	; (26d8 <sampleTick+0x2fc>)

    sample.voltage.batV = adc_read(senseBatPin);
    2404:	7829      	ldrb	r1, [r5, #0]
    SampleBool = false;

    // take last samples time to discover Dt before setting new time
    sample.tickDelta = millis() - sample.sampleTick;
    sample.sampleTick = millis();
    altimeter.flightTime = sample.sampleTick - offsets.StartupTick;
    2406:	6093      	str	r3, [r2, #8]

    sample.voltage.batV = adc_read(senseBatPin);
    2408:	786b      	ldrb	r3, [r5, #1]
    240a:	78a8      	ldrb	r0, [r5, #2]
    240c:	021b      	lsls	r3, r3, #8
    240e:	430b      	orrs	r3, r1
    2410:	0400      	lsls	r0, r0, #16
    2412:	001a      	movs	r2, r3
    2414:	0003      	movs	r3, r0
    2416:	78e8      	ldrb	r0, [r5, #3]
    2418:	4313      	orrs	r3, r2
    241a:	0600      	lsls	r0, r0, #24
    241c:	4eaf      	ldr	r6, [pc, #700]	; (26dc <sampleTick+0x300>)
    241e:	7929      	ldrb	r1, [r5, #4]
    2420:	4318      	orrs	r0, r3
    2422:	47b0      	blx	r6
    2424:	8120      	strh	r0, [r4, #8]
    sample.voltage.batFloat = sample.voltage.batV * 0.0019;
    2426:	8920      	ldrh	r0, [r4, #8]
    2428:	4bad      	ldr	r3, [pc, #692]	; (26e0 <sampleTick+0x304>)
    242a:	b280      	uxth	r0, r0
    242c:	4798      	blx	r3
    242e:	4aad      	ldr	r2, [pc, #692]	; (26e4 <sampleTick+0x308>)
    2430:	4fad      	ldr	r7, [pc, #692]	; (26e8 <sampleTick+0x30c>)
    2432:	4bae      	ldr	r3, [pc, #696]	; (26ec <sampleTick+0x310>)
    2434:	47b8      	blx	r7
    2436:	4bae      	ldr	r3, [pc, #696]	; (26f0 <sampleTick+0x314>)
    2438:	4798      	blx	r3

    sample.voltage.senseA = adc_read(senseAPin);
    243a:	79ab      	ldrb	r3, [r5, #6]
    243c:	7969      	ldrb	r1, [r5, #5]
    sample.tickDelta = millis() - sample.sampleTick;
    sample.sampleTick = millis();
    altimeter.flightTime = sample.sampleTick - offsets.StartupTick;

    sample.voltage.batV = adc_read(senseBatPin);
    sample.voltage.batFloat = sample.voltage.batV * 0.0019;
    243e:	60e0      	str	r0, [r4, #12]

    sample.voltage.senseA = adc_read(senseAPin);
    2440:	79e8      	ldrb	r0, [r5, #7]
    2442:	021b      	lsls	r3, r3, #8
    2444:	430b      	orrs	r3, r1
    2446:	0400      	lsls	r0, r0, #16
    2448:	001a      	movs	r2, r3
    244a:	0003      	movs	r3, r0
    244c:	7a28      	ldrb	r0, [r5, #8]
    244e:	4313      	orrs	r3, r2
    2450:	0600      	lsls	r0, r0, #24
    2452:	7a69      	ldrb	r1, [r5, #9]
    2454:	4318      	orrs	r0, r3
    2456:	47b0      	blx	r6
    sample.voltage.senseB = adc_read(senseBPin);
    2458:	7aeb      	ldrb	r3, [r5, #11]
    245a:	7aa9      	ldrb	r1, [r5, #10]
    altimeter.flightTime = sample.sampleTick - offsets.StartupTick;

    sample.voltage.batV = adc_read(senseBatPin);
    sample.voltage.batFloat = sample.voltage.batV * 0.0019;

    sample.voltage.senseA = adc_read(senseAPin);
    245c:	8220      	strh	r0, [r4, #16]
    sample.voltage.senseB = adc_read(senseBPin);
    245e:	7b28      	ldrb	r0, [r5, #12]
    2460:	021b      	lsls	r3, r3, #8
    2462:	430b      	orrs	r3, r1
    2464:	0400      	lsls	r0, r0, #16
    2466:	001a      	movs	r2, r3
    2468:	0003      	movs	r3, r0
    246a:	7b68      	ldrb	r0, [r5, #13]
    246c:	4313      	orrs	r3, r2
    246e:	0600      	lsls	r0, r0, #24
    2470:	7ba9      	ldrb	r1, [r5, #14]
    2472:	4318      	orrs	r0, r3
    2474:	47b0      	blx	r6
    sample.voltage.senseC = adc_read(senseCPin);
    2476:	7c2b      	ldrb	r3, [r5, #16]
    2478:	7be9      	ldrb	r1, [r5, #15]

    sample.voltage.batV = adc_read(senseBatPin);
    sample.voltage.batFloat = sample.voltage.batV * 0.0019;

    sample.voltage.senseA = adc_read(senseAPin);
    sample.voltage.senseB = adc_read(senseBPin);
    247a:	8260      	strh	r0, [r4, #18]
    sample.voltage.senseC = adc_read(senseCPin);
    247c:	7c68      	ldrb	r0, [r5, #17]
    247e:	021b      	lsls	r3, r3, #8
    2480:	430b      	orrs	r3, r1
    2482:	0400      	lsls	r0, r0, #16
    2484:	001a      	movs	r2, r3
    2486:	0003      	movs	r3, r0
    2488:	7ca8      	ldrb	r0, [r5, #18]
    248a:	4313      	orrs	r3, r2
    248c:	0600      	lsls	r0, r0, #24
    248e:	7ce9      	ldrb	r1, [r5, #19]
    2490:	4318      	orrs	r0, r3
    2492:	47b0      	blx	r6
    sample.voltage.senseD = adc_read(senseDPin);
    2494:	7d6b      	ldrb	r3, [r5, #21]
    2496:	7d29      	ldrb	r1, [r5, #20]
    sample.voltage.batV = adc_read(senseBatPin);
    sample.voltage.batFloat = sample.voltage.batV * 0.0019;

    sample.voltage.senseA = adc_read(senseAPin);
    sample.voltage.senseB = adc_read(senseBPin);
    sample.voltage.senseC = adc_read(senseCPin);
    2498:	82a0      	strh	r0, [r4, #20]
    sample.voltage.senseD = adc_read(senseDPin);
    249a:	7da8      	ldrb	r0, [r5, #22]
    249c:	021b      	lsls	r3, r3, #8
    249e:	430b      	orrs	r3, r1
    24a0:	0400      	lsls	r0, r0, #16
    24a2:	001a      	movs	r2, r3
    24a4:	0003      	movs	r3, r0
    24a6:	7de8      	ldrb	r0, [r5, #23]
    24a8:	4313      	orrs	r3, r2
    24aa:	0600      	lsls	r0, r0, #24
    24ac:	7e29      	ldrb	r1, [r5, #24]
    24ae:	4318      	orrs	r0, r3
    24b0:	47b0      	blx	r6

    sample.analogRaw = adc_read(analogAccelPin);
    24b2:	7eab      	ldrb	r3, [r5, #26]
    24b4:	7e69      	ldrb	r1, [r5, #25]
    sample.voltage.batFloat = sample.voltage.batV * 0.0019;

    sample.voltage.senseA = adc_read(senseAPin);
    sample.voltage.senseB = adc_read(senseBPin);
    sample.voltage.senseC = adc_read(senseCPin);
    sample.voltage.senseD = adc_read(senseDPin);
    24b6:	82e0      	strh	r0, [r4, #22]

    sample.analogRaw = adc_read(analogAccelPin);
    24b8:	7ee8      	ldrb	r0, [r5, #27]
    24ba:	021b      	lsls	r3, r3, #8
    24bc:	430b      	orrs	r3, r1
    24be:	0400      	lsls	r0, r0, #16
    24c0:	001a      	movs	r2, r3
    24c2:	0003      	movs	r3, r0
    24c4:	7f28      	ldrb	r0, [r5, #28]
    24c6:	4313      	orrs	r3, r2
    24c8:	0600      	lsls	r0, r0, #24
    24ca:	7f69      	ldrb	r1, [r5, #29]
    24cc:	4318      	orrs	r0, r3
    24ce:	47b0      	blx	r6
    24d0:	8320      	strh	r0, [r4, #24]
    sample.analogAccel = (sample.analogRaw - 3900) * -0.0154;
    24d2:	8b20      	ldrh	r0, [r4, #24]
    24d4:	4b87      	ldr	r3, [pc, #540]	; (26f4 <sampleTick+0x318>)
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    24d6:	2780      	movs	r7, #128	; 0x80
    24d8:	18c0      	adds	r0, r0, r3
    24da:	4b81      	ldr	r3, [pc, #516]	; (26e0 <sampleTick+0x304>)
    24dc:	4798      	blx	r3
    24de:	4a86      	ldr	r2, [pc, #536]	; (26f8 <sampleTick+0x31c>)
    24e0:	4e81      	ldr	r6, [pc, #516]	; (26e8 <sampleTick+0x30c>)
    24e2:	4b86      	ldr	r3, [pc, #536]	; (26fc <sampleTick+0x320>)
    24e4:	47b0      	blx	r6
    24e6:	4b82      	ldr	r3, [pc, #520]	; (26f0 <sampleTick+0x314>)
    24e8:	4798      	blx	r3
    uint8_t dummy_Tx = 0xFF;
    uint8_t dummy_rx;

    pinLow(cs_baro);
    //dummy_rx = spiDataTransfer(SPI2, 0x50);
    byteOut(spi2SCK,spi2MOSI, 0x50);
    24ea:	2250      	movs	r2, #80	; 0x50
    24ec:	4b84      	ldr	r3, [pc, #528]	; (2700 <sampleTick+0x324>)
    24ee:	01ff      	lsls	r7, r7, #7
    sample.voltage.senseB = adc_read(senseBPin);
    sample.voltage.senseC = adc_read(senseCPin);
    sample.voltage.senseD = adc_read(senseDPin);

    sample.analogRaw = adc_read(analogAccelPin);
    sample.analogAccel = (sample.analogRaw - 3900) * -0.0154;
    24f0:	61e0      	str	r0, [r4, #28]
    uint8_t dummy_Tx = 0xFF;
    uint8_t dummy_rx;

    pinLow(cs_baro);
    //dummy_rx = spiDataTransfer(SPI2, 0x50);
    byteOut(spi2SCK,spi2MOSI, 0x50);
    24f2:	002e      	movs	r6, r5
    24f4:	615f      	str	r7, [r3, #20]
    24f6:	9200      	str	r2, [sp, #0]
    24f8:	7fea      	ldrb	r2, [r5, #31]
    24fa:	7fa8      	ldrb	r0, [r5, #30]
    24fc:	0212      	lsls	r2, r2, #8
    24fe:	4302      	orrs	r2, r0
    2500:	0011      	movs	r1, r2
    2502:	002b      	movs	r3, r5
    2504:	361e      	adds	r6, #30
    2506:	78b2      	ldrb	r2, [r6, #2]
    2508:	3323      	adds	r3, #35	; 0x23
    250a:	0412      	lsls	r2, r2, #16
    250c:	430a      	orrs	r2, r1
    250e:	78f1      	ldrb	r1, [r6, #3]
    2510:	7818      	ldrb	r0, [r3, #0]
    2512:	0609      	lsls	r1, r1, #24
    2514:	4311      	orrs	r1, r2
    2516:	7932      	ldrb	r2, [r6, #4]
    2518:	789d      	ldrb	r5, [r3, #2]
    251a:	9203      	str	r2, [sp, #12]
    251c:	785a      	ldrb	r2, [r3, #1]
    251e:	042d      	lsls	r5, r5, #16
    2520:	0212      	lsls	r2, r2, #8
    2522:	4302      	orrs	r2, r0
    2524:	9102      	str	r1, [sp, #8]
    2526:	0011      	movs	r1, r2
    2528:	002a      	movs	r2, r5
    252a:	78dd      	ldrb	r5, [r3, #3]
    252c:	791b      	ldrb	r3, [r3, #4]
    252e:	430a      	orrs	r2, r1
    2530:	062d      	lsls	r5, r5, #24
    2532:	4315      	orrs	r5, r2
    2534:	9304      	str	r3, [sp, #16]
    2536:	9a02      	ldr	r2, [sp, #8]
    2538:	9904      	ldr	r1, [sp, #16]
    253a:	9b03      	ldr	r3, [sp, #12]
    253c:	0028      	movs	r0, r5
    253e:	4e71      	ldr	r6, [pc, #452]	; (2704 <sampleTick+0x328>)
    2540:	47b0      	blx	r6
    pinHigh(cs_baro);
    delay_us(600);
    2542:	2096      	movs	r0, #150	; 0x96
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    2544:	4b6e      	ldr	r3, [pc, #440]	; (2700 <sampleTick+0x324>)
    2546:	0080      	lsls	r0, r0, #2
    2548:	619f      	str	r7, [r3, #24]
    254a:	4b6f      	ldr	r3, [pc, #444]	; (2708 <sampleTick+0x32c>)
    254c:	4798      	blx	r3
    uint32_t tempRaw = readMS5803AdcResults();
    254e:	4b6f      	ldr	r3, [pc, #444]	; (270c <sampleTick+0x330>)
    2550:	4798      	blx	r3
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    2552:	4b6b      	ldr	r3, [pc, #428]	; (2700 <sampleTick+0x324>)
    2554:	9005      	str	r0, [sp, #20]
    2556:	615f      	str	r7, [r3, #20]

    pinLow(cs_baro);
    //dummy_rx = spiDataTransfer(SPI2, 0x46);
    byteOut(spi2SCK,spi2MOSI, 0x46);
    2558:	2346      	movs	r3, #70	; 0x46
    255a:	9a02      	ldr	r2, [sp, #8]
    255c:	9300      	str	r3, [sp, #0]
    255e:	0028      	movs	r0, r5
    2560:	9b03      	ldr	r3, [sp, #12]
    2562:	9904      	ldr	r1, [sp, #16]
    2564:	47b0      	blx	r6
    2566:	2280      	movs	r2, #128	; 0x80
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    2568:	4b65      	ldr	r3, [pc, #404]	; (2700 <sampleTick+0x324>)
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    256a:	00d2      	lsls	r2, r2, #3
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    256c:	619f      	str	r7, [r3, #24]
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    256e:	4b68      	ldr	r3, [pc, #416]	; (2710 <sampleTick+0x334>)



// Accel data
    pinLow(cs_accel);
    dummy_rx = spiDataTransfer(SPI0, BMI055_X_ACC_LSB | BMI055_READ_REG);
    2570:	4f68      	ldr	r7, [pc, #416]	; (2714 <sampleTick+0x338>)
    2572:	601a      	str	r2, [r3, #0]
    2574:	2182      	movs	r1, #130	; 0x82
    2576:	2000      	movs	r0, #0
    2578:	47b8      	blx	r7

    u16_t accelXRaw = spiDataTransfer(SPI0,dummy_Tx);
    257a:	21ff      	movs	r1, #255	; 0xff
    257c:	2000      	movs	r0, #0
    257e:	47b8      	blx	r7
    accelXRaw = accelXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    2580:	21ff      	movs	r1, #255	; 0xff

// Accel data
    pinLow(cs_accel);
    dummy_rx = spiDataTransfer(SPI0, BMI055_X_ACC_LSB | BMI055_READ_REG);

    u16_t accelXRaw = spiDataTransfer(SPI0,dummy_Tx);
    2582:	0005      	movs	r5, r0
    accelXRaw = accelXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    2584:	2000      	movs	r0, #0
    2586:	47b8      	blx	r7
    2588:	0200      	lsls	r0, r0, #8
    258a:	4305      	orrs	r5, r0
    258c:	b22b      	sxth	r3, r5
    u16_t accelYRaw = spiDataTransfer(SPI0,dummy_Tx);
    258e:	21ff      	movs	r1, #255	; 0xff
    2590:	2000      	movs	r0, #0
// Accel data
    pinLow(cs_accel);
    dummy_rx = spiDataTransfer(SPI0, BMI055_X_ACC_LSB | BMI055_READ_REG);

    u16_t accelXRaw = spiDataTransfer(SPI0,dummy_Tx);
    accelXRaw = accelXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    2592:	9302      	str	r3, [sp, #8]
    u16_t accelYRaw = spiDataTransfer(SPI0,dummy_Tx);
    2594:	47b8      	blx	r7
    accelYRaw = accelYRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    2596:	21ff      	movs	r1, #255	; 0xff
    pinLow(cs_accel);
    dummy_rx = spiDataTransfer(SPI0, BMI055_X_ACC_LSB | BMI055_READ_REG);

    u16_t accelXRaw = spiDataTransfer(SPI0,dummy_Tx);
    accelXRaw = accelXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    u16_t accelYRaw = spiDataTransfer(SPI0,dummy_Tx);
    2598:	0005      	movs	r5, r0
    accelYRaw = accelYRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    259a:	2000      	movs	r0, #0
    259c:	47b8      	blx	r7
    u16_t accelZRaw = spiDataTransfer(SPI0,dummy_Tx);
    259e:	21ff      	movs	r1, #255	; 0xff
    dummy_rx = spiDataTransfer(SPI0, BMI055_X_ACC_LSB | BMI055_READ_REG);

    u16_t accelXRaw = spiDataTransfer(SPI0,dummy_Tx);
    accelXRaw = accelXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    u16_t accelYRaw = spiDataTransfer(SPI0,dummy_Tx);
    accelYRaw = accelYRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    25a0:	0206      	lsls	r6, r0, #8
    u16_t accelZRaw = spiDataTransfer(SPI0,dummy_Tx);
    25a2:	2000      	movs	r0, #0
    25a4:	47b8      	blx	r7
    dummy_rx = spiDataTransfer(SPI0, BMI055_X_ACC_LSB | BMI055_READ_REG);

    u16_t accelXRaw = spiDataTransfer(SPI0,dummy_Tx);
    accelXRaw = accelXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    u16_t accelYRaw = spiDataTransfer(SPI0,dummy_Tx);
    accelYRaw = accelYRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    25a6:	4335      	orrs	r5, r6
    25a8:	b22e      	sxth	r6, r5
    u16_t accelZRaw = spiDataTransfer(SPI0,dummy_Tx);
    accelZRaw = accelZRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    25aa:	21ff      	movs	r1, #255	; 0xff

    u16_t accelXRaw = spiDataTransfer(SPI0,dummy_Tx);
    accelXRaw = accelXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    u16_t accelYRaw = spiDataTransfer(SPI0,dummy_Tx);
    accelYRaw = accelYRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    u16_t accelZRaw = spiDataTransfer(SPI0,dummy_Tx);
    25ac:	0005      	movs	r5, r0
    accelZRaw = accelZRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    25ae:	2000      	movs	r0, #0
    25b0:	47b8      	blx	r7
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    25b2:	2280      	movs	r2, #128	; 0x80
    25b4:	4b58      	ldr	r3, [pc, #352]	; (2718 <sampleTick+0x33c>)
    25b6:	00d2      	lsls	r2, r2, #3
    25b8:	601a      	str	r2, [r3, #0]
    25ba:	0200      	lsls	r0, r0, #8

    if (negativeX) {
        accelXint = accelXint | ~((1 << 16) - 1);
        accelXint =  accelXint >> 4;
    } else {
        accelXint =  accelXint >> 4;
    25bc:	9b02      	ldr	r3, [sp, #8]
    u16_t accelXRaw = spiDataTransfer(SPI0,dummy_Tx);
    accelXRaw = accelXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    u16_t accelYRaw = spiDataTransfer(SPI0,dummy_Tx);
    accelYRaw = accelYRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    u16_t accelZRaw = spiDataTransfer(SPI0,dummy_Tx);
    accelZRaw = accelZRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    25be:	4305      	orrs	r5, r0
    25c0:	b22d      	sxth	r5, r5

    if (negativeX) {
        accelXint = accelXint | ~((1 << 16) - 1);
        accelXint =  accelXint >> 4;
    } else {
        accelXint =  accelXint >> 4;
    25c2:	1118      	asrs	r0, r3, #4
    }
    if (negativeZ) {
        accelZint =  accelZint | ~((1 << 16) - 1);
        accelZint =  accelZint >> 4;
    } else {
        accelZint =  accelZint >> 4;
    25c4:	112b      	asrs	r3, r5, #4
    25c6:	9302      	str	r3, [sp, #8]
    }

    sample.accelX =  accelXint * BMI055_ACCEL_16G_DIV;
    25c8:	4b45      	ldr	r3, [pc, #276]	; (26e0 <sampleTick+0x304>)
    25ca:	4798      	blx	r3
    25cc:	23fe      	movs	r3, #254	; 0xfe
    25ce:	4d46      	ldr	r5, [pc, #280]	; (26e8 <sampleTick+0x30c>)
    25d0:	2200      	movs	r2, #0
    25d2:	059b      	lsls	r3, r3, #22
    25d4:	47a8      	blx	r5
    25d6:	4b46      	ldr	r3, [pc, #280]	; (26f0 <sampleTick+0x314>)
    25d8:	4798      	blx	r3
    }
    if (negativeY) {
        accelYint =  accelYint | ~((1 << 16) - 1);
        accelYint =  accelYint >> 4;
    } else {
        accelYint =  accelYint >> 4;
    25da:	1136      	asrs	r6, r6, #4
        accelZint =  accelZint >> 4;
    } else {
        accelZint =  accelZint >> 4;
    }

    sample.accelX =  accelXint * BMI055_ACCEL_16G_DIV;
    25dc:	6220      	str	r0, [r4, #32]
    sample.accelY =  accelYint * BMI055_ACCEL_16G_DIV;
    25de:	4b40      	ldr	r3, [pc, #256]	; (26e0 <sampleTick+0x304>)
    25e0:	0030      	movs	r0, r6
    25e2:	4798      	blx	r3
    25e4:	23fe      	movs	r3, #254	; 0xfe
    25e6:	2200      	movs	r2, #0
    25e8:	059b      	lsls	r3, r3, #22
    25ea:	47a8      	blx	r5
    25ec:	4b40      	ldr	r3, [pc, #256]	; (26f0 <sampleTick+0x314>)
    25ee:	4798      	blx	r3
    sample.accelZ = -accelZint * BMI055_ACCEL_16G_DIV;
    25f0:	9b02      	ldr	r3, [sp, #8]
    } else {
        accelZint =  accelZint >> 4;
    }

    sample.accelX =  accelXint * BMI055_ACCEL_16G_DIV;
    sample.accelY =  accelYint * BMI055_ACCEL_16G_DIV;
    25f2:	6260      	str	r0, [r4, #36]	; 0x24
    sample.accelZ = -accelZint * BMI055_ACCEL_16G_DIV;
    25f4:	4258      	negs	r0, r3
    25f6:	4b3a      	ldr	r3, [pc, #232]	; (26e0 <sampleTick+0x304>)
    25f8:	4798      	blx	r3
    25fa:	23fe      	movs	r3, #254	; 0xfe
    25fc:	2200      	movs	r2, #0
    25fe:	059b      	lsls	r3, r3, #22
    2600:	47a8      	blx	r5
    2602:	4b3b      	ldr	r3, [pc, #236]	; (26f0 <sampleTick+0x314>)
    2604:	4798      	blx	r3
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    2606:	2280      	movs	r2, #128	; 0x80
    2608:	4b3d      	ldr	r3, [pc, #244]	; (2700 <sampleTick+0x324>)
    260a:	00d2      	lsls	r2, r2, #3
    260c:	62a0      	str	r0, [r4, #40]	; 0x28


    // Gyro data
    pinLow(cs_gyro);
    dummy_rx = spiDataTransfer(SPI0, BMI055_X_GYRO_LSB | BMI055_READ_REG);
    260e:	2182      	movs	r1, #130	; 0x82
    2610:	615a      	str	r2, [r3, #20]
    2612:	2000      	movs	r0, #0
    2614:	47b8      	blx	r7
    u16_t gyroXRaw = spiDataTransfer(SPI0,dummy_Tx);
    2616:	21ff      	movs	r1, #255	; 0xff
    2618:	2000      	movs	r0, #0
    261a:	47b8      	blx	r7
    gyroXRaw =  gyroXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    261c:	21ff      	movs	r1, #255	; 0xff


    // Gyro data
    pinLow(cs_gyro);
    dummy_rx = spiDataTransfer(SPI0, BMI055_X_GYRO_LSB | BMI055_READ_REG);
    u16_t gyroXRaw = spiDataTransfer(SPI0,dummy_Tx);
    261e:	0005      	movs	r5, r0
    gyroXRaw =  gyroXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    2620:	2000      	movs	r0, #0
    2622:	47b8      	blx	r7
    2624:	0200      	lsls	r0, r0, #8
    2626:	4305      	orrs	r5, r0
    2628:	b22b      	sxth	r3, r5
    u16_t gyroYRaw = spiDataTransfer(SPI0,dummy_Tx);
    262a:	21ff      	movs	r1, #255	; 0xff
    262c:	2000      	movs	r0, #0

    // Gyro data
    pinLow(cs_gyro);
    dummy_rx = spiDataTransfer(SPI0, BMI055_X_GYRO_LSB | BMI055_READ_REG);
    u16_t gyroXRaw = spiDataTransfer(SPI0,dummy_Tx);
    gyroXRaw =  gyroXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    262e:	9302      	str	r3, [sp, #8]
    u16_t gyroYRaw = spiDataTransfer(SPI0,dummy_Tx);
    2630:	47b8      	blx	r7
    gyroYRaw =  gyroYRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    2632:	21ff      	movs	r1, #255	; 0xff
    // Gyro data
    pinLow(cs_gyro);
    dummy_rx = spiDataTransfer(SPI0, BMI055_X_GYRO_LSB | BMI055_READ_REG);
    u16_t gyroXRaw = spiDataTransfer(SPI0,dummy_Tx);
    gyroXRaw =  gyroXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    u16_t gyroYRaw = spiDataTransfer(SPI0,dummy_Tx);
    2634:	0005      	movs	r5, r0
    gyroYRaw =  gyroYRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    2636:	2000      	movs	r0, #0
    2638:	47b8      	blx	r7
    u16_t gyroZRaw = spiDataTransfer(SPI0,dummy_Tx);
    263a:	21ff      	movs	r1, #255	; 0xff
    pinLow(cs_gyro);
    dummy_rx = spiDataTransfer(SPI0, BMI055_X_GYRO_LSB | BMI055_READ_REG);
    u16_t gyroXRaw = spiDataTransfer(SPI0,dummy_Tx);
    gyroXRaw =  gyroXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    u16_t gyroYRaw = spiDataTransfer(SPI0,dummy_Tx);
    gyroYRaw =  gyroYRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    263c:	0206      	lsls	r6, r0, #8
    u16_t gyroZRaw = spiDataTransfer(SPI0,dummy_Tx);
    263e:	2000      	movs	r0, #0
    2640:	47b8      	blx	r7
    pinLow(cs_gyro);
    dummy_rx = spiDataTransfer(SPI0, BMI055_X_GYRO_LSB | BMI055_READ_REG);
    u16_t gyroXRaw = spiDataTransfer(SPI0,dummy_Tx);
    gyroXRaw =  gyroXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    u16_t gyroYRaw = spiDataTransfer(SPI0,dummy_Tx);
    gyroYRaw =  gyroYRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    2642:	4335      	orrs	r5, r6
    2644:	b22e      	sxth	r6, r5
    u16_t gyroZRaw = spiDataTransfer(SPI0,dummy_Tx);
    gyroZRaw =  gyroZRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    2646:	21ff      	movs	r1, #255	; 0xff
    dummy_rx = spiDataTransfer(SPI0, BMI055_X_GYRO_LSB | BMI055_READ_REG);
    u16_t gyroXRaw = spiDataTransfer(SPI0,dummy_Tx);
    gyroXRaw =  gyroXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    u16_t gyroYRaw = spiDataTransfer(SPI0,dummy_Tx);
    gyroYRaw =  gyroYRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    u16_t gyroZRaw = spiDataTransfer(SPI0,dummy_Tx);
    2648:	0005      	movs	r5, r0
    gyroZRaw =  gyroZRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    264a:	2000      	movs	r0, #0
    264c:	47b8      	blx	r7
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    264e:	2280      	movs	r2, #128	; 0x80
    2650:	4b2b      	ldr	r3, [pc, #172]	; (2700 <sampleTick+0x324>)
    2652:	00d2      	lsls	r2, r2, #3
    2654:	619a      	str	r2, [r3, #24]

    if (negativeXgyro) {
        gyroXint =  gyroXint | ~((1 << 16) - 1);
        gyroXint =  gyroXint >> 4;
    } else {
        gyroXint =  gyroXint >> 4;
    2656:	9b02      	ldr	r3, [sp, #8]
    u16_t gyroXRaw = spiDataTransfer(SPI0,dummy_Tx);
    gyroXRaw =  gyroXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    u16_t gyroYRaw = spiDataTransfer(SPI0,dummy_Tx);
    gyroYRaw =  gyroYRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    u16_t gyroZRaw = spiDataTransfer(SPI0,dummy_Tx);
    gyroZRaw =  gyroZRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    2658:	0207      	lsls	r7, r0, #8

    if (negativeXgyro) {
        gyroXint =  gyroXint | ~((1 << 16) - 1);
        gyroXint =  gyroXint >> 4;
    } else {
        gyroXint =  gyroXint >> 4;
    265a:	1118      	asrs	r0, r3, #4
        gyroZint =  gyroZint >> 4;
    } else {
        gyroZint =  gyroZint >> 4;
    }

    sample.gyroX =  gyroXint * BMI055_GYRO_2000DS_DIV;
    265c:	4b20      	ldr	r3, [pc, #128]	; (26e0 <sampleTick+0x304>)
    265e:	4798      	blx	r3
    2660:	23fe      	movs	r3, #254	; 0xfe
    u16_t gyroXRaw = spiDataTransfer(SPI0,dummy_Tx);
    gyroXRaw =  gyroXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    u16_t gyroYRaw = spiDataTransfer(SPI0,dummy_Tx);
    gyroYRaw =  gyroYRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    u16_t gyroZRaw = spiDataTransfer(SPI0,dummy_Tx);
    gyroZRaw =  gyroZRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    2662:	433d      	orrs	r5, r7
        gyroZint =  gyroZint >> 4;
    } else {
        gyroZint =  gyroZint >> 4;
    }

    sample.gyroX =  gyroXint * BMI055_GYRO_2000DS_DIV;
    2664:	2200      	movs	r2, #0
    u16_t gyroXRaw = spiDataTransfer(SPI0,dummy_Tx);
    gyroXRaw =  gyroXRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    u16_t gyroYRaw = spiDataTransfer(SPI0,dummy_Tx);
    gyroYRaw =  gyroYRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    u16_t gyroZRaw = spiDataTransfer(SPI0,dummy_Tx);
    gyroZRaw =  gyroZRaw |  (spiDataTransfer(SPI0,dummy_Tx) << 8);
    2666:	b22f      	sxth	r7, r5
        gyroZint =  gyroZint >> 4;
    } else {
        gyroZint =  gyroZint >> 4;
    }

    sample.gyroX =  gyroXint * BMI055_GYRO_2000DS_DIV;
    2668:	059b      	lsls	r3, r3, #22
    266a:	4d1f      	ldr	r5, [pc, #124]	; (26e8 <sampleTick+0x30c>)
    266c:	47a8      	blx	r5
    266e:	4b20      	ldr	r3, [pc, #128]	; (26f0 <sampleTick+0x314>)
    2670:	4798      	blx	r3

    if (negativeYgyro) {
        gyroYint =  gyroYint | ~((1 << 16) - 1);
        gyroYint =  gyroYint >> 4;
    } else {
        gyroYint =  gyroYint >> 4;
    2672:	1136      	asrs	r6, r6, #4
        gyroZint =  gyroZint >> 4;
    } else {
        gyroZint =  gyroZint >> 4;
    }

    sample.gyroX =  gyroXint * BMI055_GYRO_2000DS_DIV;
    2674:	62e0      	str	r0, [r4, #44]	; 0x2c
    sample.gyroY =  gyroYint * BMI055_GYRO_2000DS_DIV;
    2676:	4b1a      	ldr	r3, [pc, #104]	; (26e0 <sampleTick+0x304>)
    2678:	0030      	movs	r0, r6
    267a:	4798      	blx	r3
    267c:	23fe      	movs	r3, #254	; 0xfe
    267e:	2200      	movs	r2, #0
    2680:	059b      	lsls	r3, r3, #22
    2682:	47a8      	blx	r5
    2684:	4b1a      	ldr	r3, [pc, #104]	; (26f0 <sampleTick+0x314>)
    2686:	4798      	blx	r3

    if (negativeZgyro) {
        gyroZint =  gyroZint | ~((1 << 16) - 1);
        gyroZint =  gyroZint >> 4;
    } else {
        gyroZint =  gyroZint >> 4;
    2688:	113f      	asrs	r7, r7, #4
    }

    sample.gyroX =  gyroXint * BMI055_GYRO_2000DS_DIV;
    sample.gyroY =  gyroYint * BMI055_GYRO_2000DS_DIV;
    268a:	6320      	str	r0, [r4, #48]	; 0x30
    sample.gyroZ =  gyroZint * BMI055_GYRO_2000DS_DIV;
    268c:	4b14      	ldr	r3, [pc, #80]	; (26e0 <sampleTick+0x304>)
    268e:	0038      	movs	r0, r7
    2690:	4798      	blx	r3
    2692:	23fe      	movs	r3, #254	; 0xfe
    2694:	2200      	movs	r2, #0
    2696:	059b      	lsls	r3, r3, #22
    2698:	47a8      	blx	r5
    269a:	4b15      	ldr	r3, [pc, #84]	; (26f0 <sampleTick+0x314>)
    269c:	4798      	blx	r3

    //delay_us(800);
    delay_ms(5);
    269e:	4b1f      	ldr	r3, [pc, #124]	; (271c <sampleTick+0x340>)
        gyroZint =  gyroZint >> 4;
    }

    sample.gyroX =  gyroXint * BMI055_GYRO_2000DS_DIV;
    sample.gyroY =  gyroYint * BMI055_GYRO_2000DS_DIV;
    sample.gyroZ =  gyroZint * BMI055_GYRO_2000DS_DIV;
    26a0:	6360      	str	r0, [r4, #52]	; 0x34

    //delay_us(800);
    delay_ms(5);
    26a2:	2005      	movs	r0, #5
    26a4:	4798      	blx	r3
    u32_t PressureRaw = readMS5803AdcResults();
    26a6:	4b19      	ldr	r3, [pc, #100]	; (270c <sampleTick+0x330>)
    26a8:	4798      	blx	r3
    ConvertPressureTemperature(PressureRaw, tempRaw, &sample.temperatureCelcus, &sample.pressureMbar);
    26aa:	4a1d      	ldr	r2, [pc, #116]	; (2720 <sampleTick+0x344>)
    26ac:	9905      	ldr	r1, [sp, #20]
    26ae:	4b1d      	ldr	r3, [pc, #116]	; (2724 <sampleTick+0x348>)
    26b0:	4d1d      	ldr	r5, [pc, #116]	; (2728 <sampleTick+0x34c>)
    26b2:	47a8      	blx	r5
    sample.altitudefeet = paToFeetNOAA(sample.pressureMbar);
    26b4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    26b6:	4b1d      	ldr	r3, [pc, #116]	; (272c <sampleTick+0x350>)
    26b8:	4798      	blx	r3
    26ba:	6420      	str	r0, [r4, #64]	; 0x40
    26bc:	6461      	str	r1, [r4, #68]	; 0x44


}
    26be:	b007      	add	sp, #28
    26c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    26c2:	46c0      	nop			; (mov r8, r8)
    26c4:	20000514 	.word	0x20000514
    26c8:	00001079 	.word	0x00001079
    26cc:	200007a0 	.word	0x200007a0
    26d0:	200004d0 	.word	0x200004d0
    26d4:	00006543 	.word	0x00006543
    26d8:	20000508 	.word	0x20000508
    26dc:	00000c75 	.word	0x00000c75
    26e0:	00005fa9 	.word	0x00005fa9
    26e4:	77318fc5 	.word	0x77318fc5
    26e8:	00005361 	.word	0x00005361
    26ec:	3f5f212d 	.word	0x3f5f212d
    26f0:	00006145 	.word	0x00006145
    26f4:	fffff0c4 	.word	0xfffff0c4
    26f8:	02de00d2 	.word	0x02de00d2
    26fc:	bf8f8a09 	.word	0xbf8f8a09
    2700:	41004400 	.word	0x41004400
    2704:	00000cdd 	.word	0x00000cdd
    2708:	00000ffd 	.word	0x00000ffd
    270c:	0000041d 	.word	0x0000041d
    2710:	41004494 	.word	0x41004494
    2714:	00002841 	.word	0x00002841
    2718:	41004498 	.word	0x41004498
    271c:	0000102d 	.word	0x0000102d
    2720:	200007dc 	.word	0x200007dc
    2724:	200007d8 	.word	0x200007d8
    2728:	000004d1 	.word	0x000004d1
    272c:	00000571 	.word	0x00000571

00002730 <sercomClockEnable>:
#include <util.h>

void sercomClockEnable(SercomId id, uint32_t clock_channel, u8_t divider) {
    2730:	b570      	push	{r4, r5, r6, lr}
    2732:	0004      	movs	r4, r0
    // prevent this clock write from changing any other clocks
    PM->APBCMASK.reg |= 1 << (PM_APBCMASK_SERCOM0_Pos + id);
    2734:	2301      	movs	r3, #1
    2736:	1ca6      	adds	r6, r4, #2
    2738:	40b3      	lsls	r3, r6
    273a:	480d      	ldr	r0, [pc, #52]	; (2770 <sercomClockEnable+0x40>)
#include <util.h>

void sercomClockEnable(SercomId id, uint32_t clock_channel, u8_t divider) {
    273c:	000d      	movs	r5, r1
    // prevent this clock write from changing any other clocks
    PM->APBCMASK.reg |= 1 << (PM_APBCMASK_SERCOM0_Pos + id);
    273e:	6a01      	ldr	r1, [r0, #32]
    2740:	430b      	orrs	r3, r1
    2742:	6203      	str	r3, [r0, #32]


    if (clock_channel != 0) {
    2744:	2d00      	cmp	r5, #0
    2746:	d003      	beq.n	2750 <sercomClockEnable+0x20>
        // clock generators 3-8 have 8 division factor bits - DIV[7:0]
        gclkEnable(clock_channel, GCLK_SOURCE_DFLL48M, divider);
    2748:	2107      	movs	r1, #7
    274a:	0028      	movs	r0, r5
    274c:	4b09      	ldr	r3, [pc, #36]	; (2774 <sercomClockEnable+0x44>)
    274e:	4798      	blx	r3
    }


    // attach clock
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
    2750:	22f0      	movs	r2, #240	; 0xf0
    2752:	2080      	movs	r0, #128	; 0x80
    2754:	0229      	lsls	r1, r5, #8
    2756:	0112      	lsls	r2, r2, #4
    2758:	4011      	ands	r1, r2
    275a:	01c0      	lsls	r0, r0, #7
    275c:	4301      	orrs	r1, r0
    275e:	0020      	movs	r0, r4
    2760:	3014      	adds	r0, #20
    2762:	223f      	movs	r2, #63	; 0x3f
    2764:	0003      	movs	r3, r0
    2766:	4013      	ands	r3, r2
    2768:	4319      	orrs	r1, r3
    276a:	4b03      	ldr	r3, [pc, #12]	; (2778 <sercomClockEnable+0x48>)
    276c:	8059      	strh	r1, [r3, #2]
                        GCLK_CLKCTRL_GEN(clock_channel) |
                        GCLK_CLKCTRL_ID(SERCOM0_GCLK_ID_CORE + id);
}
    276e:	bd70      	pop	{r4, r5, r6, pc}
    2770:	40000400 	.word	0x40000400
    2774:	00000fad 	.word	0x00000fad
    2778:	40000c00 	.word	0x40000c00

0000277c <sercomReset>:
void computeKalmanStates();



inline static Sercom* sercom(SercomId id) {
    return (Sercom*) (0x42000800U + id * 1024);
    277c:	4b04      	ldr	r3, [pc, #16]	; (2790 <sercomReset+0x14>)
    277e:	0280      	lsls	r0, r0, #10
    2780:	18c0      	adds	r0, r0, r3


void sercomReset(SercomId id) {
    sercom(id)->SPI.CTRLA.reg = SERCOM_SPI_CTRLA_SWRST;
    2782:	2301      	movs	r3, #1
    2784:	6003      	str	r3, [r0, #0]
    while(sercom(id)->SPI.CTRLA.reg & SERCOM_SPI_CTRLA_SWRST);
    2786:	6802      	ldr	r2, [r0, #0]
    2788:	421a      	tst	r2, r3
    278a:	d1fc      	bne.n	2786 <sercomReset+0xa>
}
    278c:	4770      	bx	lr
    278e:	46c0      	nop			; (mov r8, r8)
    2790:	42000800 	.word	0x42000800

00002794 <sercomSpiMasterInit>:
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
}


void sercomSpiMasterInit(SercomId id, u32_t dipo, u32_t dopo, bool cpol, bool cpha, u8_t baud) {
    2794:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2796:	0004      	movs	r4, r0
    2798:	9300      	str	r3, [sp, #0]
    279a:	ab08      	add	r3, sp, #32
    279c:	781b      	ldrb	r3, [r3, #0]
    279e:	000e      	movs	r6, r1
    27a0:	9301      	str	r3, [sp, #4]
    27a2:	ab09      	add	r3, sp, #36	; 0x24
    27a4:	781f      	ldrb	r7, [r3, #0]

    sercomReset(id);
    27a6:	4b12      	ldr	r3, [pc, #72]	; (27f0 <sercomSpiMasterInit+0x5c>)
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
}


void sercomSpiMasterInit(SercomId id, u32_t dipo, u32_t dopo, bool cpol, bool cpha, u8_t baud) {
    27a8:	0015      	movs	r5, r2

    sercomReset(id);
    27aa:	4798      	blx	r3
    27ac:	4b11      	ldr	r3, [pc, #68]	; (27f4 <sercomSpiMasterInit+0x60>)
    27ae:	02a4      	lsls	r4, r4, #10
    27b0:	18e4      	adds	r4, r4, r3

    sercom(id)->SPI.CTRLB.reg
        = SERCOM_SPI_CTRLB_RXEN;
    27b2:	2380      	movs	r3, #128	; 0x80
    27b4:	029b      	lsls	r3, r3, #10
    27b6:	6063      	str	r3, [r4, #4]
    27b8:	23c0      	movs	r3, #192	; 0xc0
    sercom(id)->SPI.BAUD.reg = baud;

    sercom(id)->SPI.CTRLA.reg
        = SERCOM_SPI_CTRLA_ENABLE
          | SERCOM_SPI_CTRLA_MODE_SPI_MASTER
          | SERCOM_SPI_CTRLA_DIPO(dipo)
    27ba:	21c0      	movs	r1, #192	; 0xc0
    27bc:	042d      	lsls	r5, r5, #16
    27be:	029b      	lsls	r3, r3, #10
    27c0:	402b      	ands	r3, r5
    27c2:	250e      	movs	r5, #14
    27c4:	0536      	lsls	r6, r6, #20
    27c6:	0389      	lsls	r1, r1, #14
    27c8:	4031      	ands	r1, r6
          | SERCOM_SPI_CTRLA_DOPO(dopo)
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
    27ca:	9e00      	ldr	r6, [sp, #0]
    27cc:	431d      	orrs	r5, r3
    27ce:	1e73      	subs	r3, r6, #1
    27d0:	419e      	sbcs	r6, r3
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
    27d2:	9b01      	ldr	r3, [sp, #4]
    sercom(id)->SPI.CTRLA.reg
        = SERCOM_SPI_CTRLA_ENABLE
          | SERCOM_SPI_CTRLA_MODE_SPI_MASTER
          | SERCOM_SPI_CTRLA_DIPO(dipo)
          | SERCOM_SPI_CTRLA_DOPO(dopo)
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
    27d4:	0772      	lsls	r2, r6, #29
    27d6:	430d      	orrs	r5, r1
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
    27d8:	432a      	orrs	r2, r5
    27da:	1e59      	subs	r1, r3, #1
    27dc:	418b      	sbcs	r3, r1
    27de:	0016      	movs	r6, r2
    27e0:	071b      	lsls	r3, r3, #28
    27e2:	431e      	orrs	r6, r3
    sercomReset(id);

    sercom(id)->SPI.CTRLB.reg
        = SERCOM_SPI_CTRLB_RXEN;

    sercom(id)->SPI.BAUD.reg = baud;
    27e4:	7327      	strb	r7, [r4, #12]

    sercom(id)->SPI.CTRLA.reg
        = SERCOM_SPI_CTRLA_ENABLE
    27e6:	6026      	str	r6, [r4, #0]
        };
    }
}

static inline void SPI_sync(SercomId id) {
    while  (sercom(id)->SPI.SYNCBUSY.bit.CTRLB);
    27e8:	69e3      	ldr	r3, [r4, #28]
    27ea:	075b      	lsls	r3, r3, #29
    27ec:	d4fc      	bmi.n	27e8 <sercomSpiMasterInit+0x54>
          | SERCOM_SPI_CTRLA_DOPO(dopo)
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);

    SPI_sync(id);
}
    27ee:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    27f0:	0000277d 	.word	0x0000277d
    27f4:	42000800 	.word	0x42000800

000027f8 <sercomUartInit>:




void sercomUartInit(SercomId id, u32_t rxpo, u32_t txpo, int32_t fBAUD) {
    27f8:	b570      	push	{r4, r5, r6, lr}
    27fa:	0006      	movs	r6, r0

    //float BAUD = 65536*(1-(16*(115200/(48000000/8))));


    sercomReset(id);
    27fc:	4b0c      	ldr	r3, [pc, #48]	; (2830 <sercomUartInit+0x38>)
}




void sercomUartInit(SercomId id, u32_t rxpo, u32_t txpo, int32_t fBAUD) {
    27fe:	000d      	movs	r5, r1
    2800:	0014      	movs	r4, r2

    //float BAUD = 65536*(1-(16*(115200/(48000000/8))));


    sercomReset(id);
    2802:	4798      	blx	r3
void computeKalmanStates();



inline static Sercom* sercom(SercomId id) {
    return (Sercom*) (0x42000800U + id * 1024);
    2804:	4b0b      	ldr	r3, [pc, #44]	; (2834 <sercomUartInit+0x3c>)
    2806:	02b0      	lsls	r0, r6, #10
    2808:	18c0      	adds	r0, r0, r3
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    280a:	2304      	movs	r3, #4
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    280c:	22c0      	movs	r2, #192	; 0xc0

    //float BAUD = 65536*(1-(16*(115200/(48000000/8))));


    sercomReset(id);
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    280e:	6003      	str	r3, [r0, #0]
    sercom(id)->USART.BAUD.reg = 45403;
    2810:	4b09      	ldr	r3, [pc, #36]	; (2838 <sercomUartInit+0x40>)
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    2812:	0529      	lsls	r1, r5, #20
    //float BAUD = 65536*(1-(16*(115200/(48000000/8))));


    sercomReset(id);
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    sercom(id)->USART.BAUD.reg = 45403;
    2814:	8183      	strh	r3, [r0, #12]
    sercom(id)->USART.CTRLB.reg
        = SERCOM_USART_CTRLB_RXEN
    2816:	23c0      	movs	r3, #192	; 0xc0
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    2818:	0392      	lsls	r2, r2, #14
    281a:	4011      	ands	r1, r2
    281c:	4a07      	ldr	r2, [pc, #28]	; (283c <sercomUartInit+0x44>)

    sercomReset(id);
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    sercom(id)->USART.BAUD.reg = 45403;
    sercom(id)->USART.CTRLB.reg
        = SERCOM_USART_CTRLB_RXEN
    281e:	029b      	lsls	r3, r3, #10
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    2820:	0424      	lsls	r4, r4, #16

    sercomReset(id);
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    sercom(id)->USART.BAUD.reg = 45403;
    sercom(id)->USART.CTRLB.reg
        = SERCOM_USART_CTRLB_RXEN
    2822:	6043      	str	r3, [r0, #4]
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    2824:	4311      	orrs	r1, r2
    2826:	4023      	ands	r3, r4
    2828:	430b      	orrs	r3, r1
    sercom(id)->USART.BAUD.reg = 45403;
    sercom(id)->USART.CTRLB.reg
        = SERCOM_USART_CTRLB_RXEN
          | SERCOM_USART_CTRLB_TXEN;
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
    282a:	6003      	str	r3, [r0, #0]
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
}
    282c:	bd70      	pop	{r4, r5, r6, pc}
    282e:	46c0      	nop			; (mov r8, r8)
    2830:	0000277d 	.word	0x0000277d
    2834:	42000800 	.word	0x42000800
    2838:	ffffb15b 	.word	0xffffb15b
    283c:	40000006 	.word	0x40000006

00002840 <spiDataTransfer>:
    2840:	4b04      	ldr	r3, [pc, #16]	; (2854 <spiDataTransfer+0x14>)
    2842:	0280      	lsls	r0, r0, #10
    2844:	18c0      	adds	r0, r0, r3

u8_t spiDataTransfer(SercomId id, u8_t data) {
    sercom(id)->SPI.DATA.reg = data;
    2846:	6281      	str	r1, [r0, #40]	; 0x28
    while(sercom(id)->SPI.INTFLAG.bit.RXC == 0);
    2848:	7e03      	ldrb	r3, [r0, #24]
    284a:	075b      	lsls	r3, r3, #29
    284c:	d5fc      	bpl.n	2848 <spiDataTransfer+0x8>
    return sercom(id)->SPI.DATA.reg;
    284e:	6a80      	ldr	r0, [r0, #40]	; 0x28
    2850:	b2c0      	uxtb	r0, r0
}
    2852:	4770      	bx	lr
    2854:	42000800 	.word	0x42000800

00002858 <usartDataOut>:
    2858:	4b04      	ldr	r3, [pc, #16]	; (286c <usartDataOut+0x14>)
    285a:	0280      	lsls	r0, r0, #10
    285c:	18c0      	adds	r0, r0, r3
    while(sercom(id)->SPI.INTFLAG.bit.DRE == 0);
    return sercom(id)->SPI.DATA.reg;
}

void usartDataOut(SercomId id, u8_t data) {
    sercom(id)->USART.DATA.reg = data;
    285e:	b289      	uxth	r1, r1
    2860:	8501      	strh	r1, [r0, #40]	; 0x28
    while(sercom(id)->USART.INTFLAG.bit.DRE == 0);
    2862:	7e03      	ldrb	r3, [r0, #24]
    2864:	07db      	lsls	r3, r3, #31
    2866:	d5fc      	bpl.n	2862 <usartDataOut+0xa>
}
    2868:	4770      	bx	lr
    286a:	46c0      	nop			; (mov r8, r8)
    286c:	42000800 	.word	0x42000800

00002870 <usartDataIn>:
    2870:	4b02      	ldr	r3, [pc, #8]	; (287c <usartDataIn+0xc>)
    2872:	0280      	lsls	r0, r0, #10
    2874:	18c0      	adds	r0, r0, r3

u8_t usartDataIn(SercomId id) {
    return sercom(id)->USART.DATA.reg;
    2876:	8d00      	ldrh	r0, [r0, #40]	; 0x28
    2878:	b2c0      	uxtb	r0, r0
}
    287a:	4770      	bx	lr
    287c:	42000800 	.word	0x42000800

00002880 <attemptConnection>:
#include <util.h>
#include <boardDefines.h>


void attemptConnection() {
    2880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

    if (USARTconnectionAvaliable()) {
    2882:	4b2f      	ldr	r3, [pc, #188]	; (2940 <attemptConnection+0xc0>)
    2884:	4798      	blx	r3
    2886:	2800      	cmp	r0, #0
    2888:	d058      	beq.n	293c <attemptConnection+0xbc>

        flightState = flightIdle;
    288a:	2201      	movs	r2, #1
    288c:	4b2d      	ldr	r3, [pc, #180]	; (2944 <attemptConnection+0xc4>)
    288e:	701a      	strb	r2, [r3, #0]

        //wait for user to tell us what they want
        while(sercom(USART3)->SPI.INTFLAG.bit.RXC == 0);
    2890:	4a2d      	ldr	r2, [pc, #180]	; (2948 <attemptConnection+0xc8>)
    2892:	7e13      	ldrb	r3, [r2, #24]
    2894:	4e2c      	ldr	r6, [pc, #176]	; (2948 <attemptConnection+0xc8>)
    2896:	075b      	lsls	r3, r3, #29
    2898:	d5fb      	bpl.n	2892 <attemptConnection+0x12>
        u8_t option = usartDataIn(USART3);
    289a:	2003      	movs	r0, #3
    289c:	4d2b      	ldr	r5, [pc, #172]	; (294c <attemptConnection+0xcc>)
    289e:	47a8      	blx	r5
    28a0:	1e04      	subs	r4, r0, #0

        //user wants to read flight logs
        if (option == 0x4C) {
    28a2:	2c4c      	cmp	r4, #76	; 0x4c
    28a4:	d13c      	bne.n	2920 <attemptConnection+0xa0>
    28a6:	2400      	movs	r4, #0

            //send list of available flight logs
            for (u8_t flightLog = 0; flightLog < 11; ++flightLog) {

                if (isFlightLogged(flightLog)) {
    28a8:	0020      	movs	r0, r4
    28aa:	4b29      	ldr	r3, [pc, #164]	; (2950 <attemptConnection+0xd0>)
    28ac:	4798      	blx	r3
    28ae:	2800      	cmp	r0, #0
    28b0:	d005      	beq.n	28be <attemptConnection+0x3e>

                    usartDataOut(USART3, flightLog + 0x30);
    28b2:	0021      	movs	r1, r4
    28b4:	3130      	adds	r1, #48	; 0x30
    28b6:	b2c9      	uxtb	r1, r1
    28b8:	2003      	movs	r0, #3
    28ba:	4b26      	ldr	r3, [pc, #152]	; (2954 <attemptConnection+0xd4>)
    28bc:	4798      	blx	r3

        //user wants to read flight logs
        if (option == 0x4C) {

            //send list of available flight logs
            for (u8_t flightLog = 0; flightLog < 11; ++flightLog) {
    28be:	3401      	adds	r4, #1
    28c0:	b2e4      	uxtb	r4, r4
    28c2:	2c0b      	cmp	r4, #11
    28c4:	d1f0      	bne.n	28a8 <attemptConnection+0x28>

                    usartDataOut(USART3, flightLog + 0x30);
                }
            }
            //done sending flight numbers
            usartDataOut(USART3, 0x0F);
    28c6:	210f      	movs	r1, #15
    28c8:	2003      	movs	r0, #3
    28ca:	4c22      	ldr	r4, [pc, #136]	; (2954 <attemptConnection+0xd4>)
    28cc:	47a0      	blx	r4

            //wait for user to pick which flight to read
            while(sercom(USART3)->SPI.INTFLAG.bit.RXC == 0);
    28ce:	7e33      	ldrb	r3, [r6, #24]
    28d0:	075b      	lsls	r3, r3, #29
    28d2:	d5fc      	bpl.n	28ce <attemptConnection+0x4e>
            u8_t flightToRead = usartDataIn(USART3) - 0x30;
    28d4:	2003      	movs	r0, #3
    28d6:	47a8      	blx	r5
    28d8:	3830      	subs	r0, #48	; 0x30
    28da:	b2c5      	uxtb	r5, r0


            u32_t flightStartAddress = getFlightStartAddress(flightToRead);
    28dc:	0028      	movs	r0, r5
    28de:	4b1e      	ldr	r3, [pc, #120]	; (2958 <attemptConnection+0xd8>)
    28e0:	4798      	blx	r3
            u32_t flightEndAddress = FindFlightEndingAddress(flightToRead) - 0x100;
    28e2:	4b1e      	ldr	r3, [pc, #120]	; (295c <attemptConnection+0xdc>)
            //wait for user to pick which flight to read
            while(sercom(USART3)->SPI.INTFLAG.bit.RXC == 0);
            u8_t flightToRead = usartDataIn(USART3) - 0x30;


            u32_t flightStartAddress = getFlightStartAddress(flightToRead);
    28e4:	0007      	movs	r7, r0
            u32_t flightEndAddress = FindFlightEndingAddress(flightToRead) - 0x100;
    28e6:	0028      	movs	r0, r5
    28e8:	4798      	blx	r3
    28ea:	1e46      	subs	r6, r0, #1
    28ec:	3eff      	subs	r6, #255	; 0xff

            //inform of page numbers
            u16_t pagesToSend = (flightEndAddress  - flightStartAddress) >> 8;
    28ee:	1bf5      	subs	r5, r6, r7
    28f0:	0a2d      	lsrs	r5, r5, #8
            usartDataOut(USART3, pagesToSend >> 0);
    28f2:	b2e9      	uxtb	r1, r5
    28f4:	2003      	movs	r0, #3
    28f6:	47a0      	blx	r4
            usartDataOut(USART3, pagesToSend >> 8);
    28f8:	b2a9      	uxth	r1, r5
    28fa:	0a09      	lsrs	r1, r1, #8
    28fc:	2003      	movs	r0, #3
    28fe:	47a0      	blx	r4

            //send flight end address for % full
            usartDataOut(USART3, flightEndAddress >> 0);
    2900:	b2f1      	uxtb	r1, r6
    2902:	2003      	movs	r0, #3
    2904:	47a0      	blx	r4
            usartDataOut(USART3, flightEndAddress >> 8);
    2906:	0a31      	lsrs	r1, r6, #8
    2908:	b2c9      	uxtb	r1, r1
    290a:	2003      	movs	r0, #3
    290c:	47a0      	blx	r4
            usartDataOut(USART3, flightEndAddress >> 16);
    290e:	0c31      	lsrs	r1, r6, #16
    2910:	b2c9      	uxtb	r1, r1
    2912:	2003      	movs	r0, #3
    2914:	47a0      	blx	r4

            //USART out the flights pages
            sendTheasePagesToComputer(flightStartAddress, flightEndAddress);
    2916:	0031      	movs	r1, r6
    2918:	0038      	movs	r0, r7
    291a:	4b11      	ldr	r3, [pc, #68]	; (2960 <attemptConnection+0xe0>)
    291c:	4798      	blx	r3
    291e:	e00d      	b.n	293c <attemptConnection+0xbc>

        }
        //user wants to erase chip
        if (option == 0x45) { // 'E'
    2920:	2845      	cmp	r0, #69	; 0x45
    2922:	d10b      	bne.n	293c <attemptConnection+0xbc>
            AT25SFChipErase();
    2924:	4b0f      	ldr	r3, [pc, #60]	; (2964 <attemptConnection+0xe4>)
    2926:	4798      	blx	r3

            AT25SFHoldTillReady();
    2928:	4b0f      	ldr	r3, [pc, #60]	; (2968 <attemptConnection+0xe8>)
    292a:	4798      	blx	r3

            usartDataOut(USART3, 'E');
    292c:	2003      	movs	r0, #3
    292e:	4b09      	ldr	r3, [pc, #36]	; (2954 <attemptConnection+0xd4>)
    2930:	0021      	movs	r1, r4
    2932:	4798      	blx	r3
            beep(400);
    2934:	20c8      	movs	r0, #200	; 0xc8
    2936:	4b0d      	ldr	r3, [pc, #52]	; (296c <attemptConnection+0xec>)
    2938:	0040      	lsls	r0, r0, #1
    293a:	4798      	blx	r3


        }
    }

}
    293c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    293e:	46c0      	nop			; (mov r8, r8)
    2940:	00000b7d 	.word	0x00000b7d
    2944:	2000065c 	.word	0x2000065c
    2948:	42001400 	.word	0x42001400
    294c:	00002871 	.word	0x00002871
    2950:	000022b9 	.word	0x000022b9
    2954:	00002859 	.word	0x00002859
    2958:	00002269 	.word	0x00002269
    295c:	00002291 	.word	0x00002291
    2960:	00000bb1 	.word	0x00000bb1
    2964:	00000221 	.word	0x00000221
    2968:	000001e5 	.word	0x000001e5
    296c:	00000d9d 	.word	0x00000d9d

00002970 <pow>:
    2970:	b5f0      	push	{r4, r5, r6, r7, lr}
    2972:	465f      	mov	r7, fp
    2974:	464d      	mov	r5, r9
    2976:	4656      	mov	r6, sl
    2978:	4644      	mov	r4, r8
    297a:	b4f0      	push	{r4, r5, r6, r7}
    297c:	b091      	sub	sp, #68	; 0x44
    297e:	001f      	movs	r7, r3
    2980:	0004      	movs	r4, r0
    2982:	000d      	movs	r5, r1
    2984:	0016      	movs	r6, r2
    2986:	f000 f9af 	bl	2ce8 <__ieee754_pow>
    298a:	4bcf      	ldr	r3, [pc, #828]	; (2cc8 <pow+0x358>)
    298c:	9002      	str	r0, [sp, #8]
    298e:	9103      	str	r1, [sp, #12]
    2990:	469b      	mov	fp, r3
    2992:	781b      	ldrb	r3, [r3, #0]
    2994:	b25b      	sxtb	r3, r3
    2996:	4699      	mov	r9, r3
    2998:	3301      	adds	r3, #1
    299a:	d04f      	beq.n	2a3c <pow+0xcc>
    299c:	0032      	movs	r2, r6
    299e:	003b      	movs	r3, r7
    29a0:	0030      	movs	r0, r6
    29a2:	0039      	movs	r1, r7
    29a4:	f003 faaa 	bl	5efc <__aeabi_dcmpun>
    29a8:	9000      	str	r0, [sp, #0]
    29aa:	2800      	cmp	r0, #0
    29ac:	d146      	bne.n	2a3c <pow+0xcc>
    29ae:	0022      	movs	r2, r4
    29b0:	002b      	movs	r3, r5
    29b2:	0020      	movs	r0, r4
    29b4:	0029      	movs	r1, r5
    29b6:	f003 faa1 	bl	5efc <__aeabi_dcmpun>
    29ba:	2200      	movs	r2, #0
    29bc:	4682      	mov	sl, r0
    29be:	2800      	cmp	r0, #0
    29c0:	d134      	bne.n	2a2c <pow+0xbc>
    29c2:	2300      	movs	r3, #0
    29c4:	0020      	movs	r0, r4
    29c6:	0029      	movs	r1, r5
    29c8:	f001 f8fc 	bl	3bc4 <__aeabi_dcmpeq>
    29cc:	2800      	cmp	r0, #0
    29ce:	d03a      	beq.n	2a46 <pow+0xd6>
    29d0:	2200      	movs	r2, #0
    29d2:	2300      	movs	r3, #0
    29d4:	0030      	movs	r0, r6
    29d6:	0039      	movs	r1, r7
    29d8:	f001 f8f4 	bl	3bc4 <__aeabi_dcmpeq>
    29dc:	9005      	str	r0, [sp, #20]
    29de:	2800      	cmp	r0, #0
    29e0:	d100      	bne.n	29e4 <pow+0x74>
    29e2:	e074      	b.n	2ace <pow+0x15e>
    29e4:	ab06      	add	r3, sp, #24
    29e6:	4698      	mov	r8, r3
    29e8:	2301      	movs	r3, #1
    29ea:	4642      	mov	r2, r8
    29ec:	9306      	str	r3, [sp, #24]
    29ee:	4bb7      	ldr	r3, [pc, #732]	; (2ccc <pow+0x35c>)
    29f0:	6053      	str	r3, [r2, #4]
    29f2:	4643      	mov	r3, r8
    29f4:	4652      	mov	r2, sl
    29f6:	609c      	str	r4, [r3, #8]
    29f8:	60dd      	str	r5, [r3, #12]
    29fa:	621a      	str	r2, [r3, #32]
    29fc:	611e      	str	r6, [r3, #16]
    29fe:	615f      	str	r7, [r3, #20]
    2a00:	4642      	mov	r2, r8
    2a02:	2300      	movs	r3, #0
    2a04:	2400      	movs	r4, #0
    2a06:	6193      	str	r3, [r2, #24]
    2a08:	61d4      	str	r4, [r2, #28]
    2a0a:	464b      	mov	r3, r9
    2a0c:	2b00      	cmp	r3, #0
    2a0e:	d100      	bne.n	2a12 <pow+0xa2>
    2a10:	e094      	b.n	2b3c <pow+0x1cc>
    2a12:	2300      	movs	r3, #0
    2a14:	4cae      	ldr	r4, [pc, #696]	; (2cd0 <pow+0x360>)
    2a16:	9300      	str	r3, [sp, #0]
    2a18:	9401      	str	r4, [sp, #4]
    2a1a:	9800      	ldr	r0, [sp, #0]
    2a1c:	9901      	ldr	r1, [sp, #4]
    2a1e:	b011      	add	sp, #68	; 0x44
    2a20:	bc3c      	pop	{r2, r3, r4, r5}
    2a22:	4690      	mov	r8, r2
    2a24:	4699      	mov	r9, r3
    2a26:	46a2      	mov	sl, r4
    2a28:	46ab      	mov	fp, r5
    2a2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2a2c:	2300      	movs	r3, #0
    2a2e:	0030      	movs	r0, r6
    2a30:	0039      	movs	r1, r7
    2a32:	f001 f8c7 	bl	3bc4 <__aeabi_dcmpeq>
    2a36:	2800      	cmp	r0, #0
    2a38:	d000      	beq.n	2a3c <pow+0xcc>
    2a3a:	e0eb      	b.n	2c14 <pow+0x2a4>
    2a3c:	9b02      	ldr	r3, [sp, #8]
    2a3e:	9c03      	ldr	r4, [sp, #12]
    2a40:	9300      	str	r3, [sp, #0]
    2a42:	9401      	str	r4, [sp, #4]
    2a44:	e7e9      	b.n	2a1a <pow+0xaa>
    2a46:	9802      	ldr	r0, [sp, #8]
    2a48:	9903      	ldr	r1, [sp, #12]
    2a4a:	f000 ff7d 	bl	3948 <finite>
    2a4e:	4681      	mov	r9, r0
    2a50:	2800      	cmp	r0, #0
    2a52:	d100      	bne.n	2a56 <pow+0xe6>
    2a54:	e086      	b.n	2b64 <pow+0x1f4>
    2a56:	9802      	ldr	r0, [sp, #8]
    2a58:	9903      	ldr	r1, [sp, #12]
    2a5a:	2200      	movs	r2, #0
    2a5c:	2300      	movs	r3, #0
    2a5e:	f001 f8b1 	bl	3bc4 <__aeabi_dcmpeq>
    2a62:	2800      	cmp	r0, #0
    2a64:	d0ea      	beq.n	2a3c <pow+0xcc>
    2a66:	0020      	movs	r0, r4
    2a68:	0029      	movs	r1, r5
    2a6a:	f000 ff6d 	bl	3948 <finite>
    2a6e:	9a02      	ldr	r2, [sp, #8]
    2a70:	9b03      	ldr	r3, [sp, #12]
    2a72:	9200      	str	r2, [sp, #0]
    2a74:	9301      	str	r3, [sp, #4]
    2a76:	2800      	cmp	r0, #0
    2a78:	d0cf      	beq.n	2a1a <pow+0xaa>
    2a7a:	0030      	movs	r0, r6
    2a7c:	0039      	movs	r1, r7
    2a7e:	f000 ff63 	bl	3948 <finite>
    2a82:	9a02      	ldr	r2, [sp, #8]
    2a84:	9b03      	ldr	r3, [sp, #12]
    2a86:	9200      	str	r2, [sp, #0]
    2a88:	9301      	str	r3, [sp, #4]
    2a8a:	2800      	cmp	r0, #0
    2a8c:	d0c5      	beq.n	2a1a <pow+0xaa>
    2a8e:	ab06      	add	r3, sp, #24
    2a90:	4698      	mov	r8, r3
    2a92:	2304      	movs	r3, #4
    2a94:	4642      	mov	r2, r8
    2a96:	9306      	str	r3, [sp, #24]
    2a98:	4b8c      	ldr	r3, [pc, #560]	; (2ccc <pow+0x35c>)
    2a9a:	6094      	str	r4, [r2, #8]
    2a9c:	60d5      	str	r5, [r2, #12]
    2a9e:	6053      	str	r3, [r2, #4]
    2aa0:	2300      	movs	r3, #0
    2aa2:	2400      	movs	r4, #0
    2aa4:	6213      	str	r3, [r2, #32]
    2aa6:	2300      	movs	r3, #0
    2aa8:	6193      	str	r3, [r2, #24]
    2aaa:	61d4      	str	r4, [r2, #28]
    2aac:	465b      	mov	r3, fp
    2aae:	781b      	ldrb	r3, [r3, #0]
    2ab0:	6116      	str	r6, [r2, #16]
    2ab2:	6157      	str	r7, [r2, #20]
    2ab4:	b25b      	sxtb	r3, r3
    2ab6:	2b02      	cmp	r3, #2
    2ab8:	d004      	beq.n	2ac4 <pow+0x154>
    2aba:	4640      	mov	r0, r8
    2abc:	f000 ff4e 	bl	395c <matherr>
    2ac0:	2800      	cmp	r0, #0
    2ac2:	d140      	bne.n	2b46 <pow+0x1d6>
    2ac4:	f003 fc74 	bl	63b0 <__errno>
    2ac8:	2322      	movs	r3, #34	; 0x22
    2aca:	6003      	str	r3, [r0, #0]
    2acc:	e03b      	b.n	2b46 <pow+0x1d6>
    2ace:	0030      	movs	r0, r6
    2ad0:	0039      	movs	r1, r7
    2ad2:	f000 ff39 	bl	3948 <finite>
    2ad6:	9a02      	ldr	r2, [sp, #8]
    2ad8:	9b03      	ldr	r3, [sp, #12]
    2ada:	9200      	str	r2, [sp, #0]
    2adc:	9301      	str	r3, [sp, #4]
    2ade:	2800      	cmp	r0, #0
    2ae0:	d09b      	beq.n	2a1a <pow+0xaa>
    2ae2:	2200      	movs	r2, #0
    2ae4:	2300      	movs	r3, #0
    2ae6:	0030      	movs	r0, r6
    2ae8:	0039      	movs	r1, r7
    2aea:	f001 f871 	bl	3bd0 <__aeabi_dcmplt>
    2aee:	2800      	cmp	r0, #0
    2af0:	d100      	bne.n	2af4 <pow+0x184>
    2af2:	e792      	b.n	2a1a <pow+0xaa>
    2af4:	ab06      	add	r3, sp, #24
    2af6:	4698      	mov	r8, r3
    2af8:	2301      	movs	r3, #1
    2afa:	4642      	mov	r2, r8
    2afc:	9306      	str	r3, [sp, #24]
    2afe:	4b73      	ldr	r3, [pc, #460]	; (2ccc <pow+0x35c>)
    2b00:	6053      	str	r3, [r2, #4]
    2b02:	4643      	mov	r3, r8
    2b04:	9a05      	ldr	r2, [sp, #20]
    2b06:	609c      	str	r4, [r3, #8]
    2b08:	60dd      	str	r5, [r3, #12]
    2b0a:	621a      	str	r2, [r3, #32]
    2b0c:	611e      	str	r6, [r3, #16]
    2b0e:	615f      	str	r7, [r3, #20]
    2b10:	465b      	mov	r3, fp
    2b12:	781b      	ldrb	r3, [r3, #0]
    2b14:	b25b      	sxtb	r3, r3
    2b16:	2b00      	cmp	r3, #0
    2b18:	d00b      	beq.n	2b32 <pow+0x1c2>
    2b1a:	2000      	movs	r0, #0
    2b1c:	4642      	mov	r2, r8
    2b1e:	496d      	ldr	r1, [pc, #436]	; (2cd4 <pow+0x364>)
    2b20:	6190      	str	r0, [r2, #24]
    2b22:	61d1      	str	r1, [r2, #28]
    2b24:	2b02      	cmp	r3, #2
    2b26:	d109      	bne.n	2b3c <pow+0x1cc>
    2b28:	f003 fc42 	bl	63b0 <__errno>
    2b2c:	2321      	movs	r3, #33	; 0x21
    2b2e:	6003      	str	r3, [r0, #0]
    2b30:	e009      	b.n	2b46 <pow+0x1d6>
    2b32:	4642      	mov	r2, r8
    2b34:	2300      	movs	r3, #0
    2b36:	2400      	movs	r4, #0
    2b38:	6193      	str	r3, [r2, #24]
    2b3a:	61d4      	str	r4, [r2, #28]
    2b3c:	4640      	mov	r0, r8
    2b3e:	f000 ff0d 	bl	395c <matherr>
    2b42:	2800      	cmp	r0, #0
    2b44:	d0f0      	beq.n	2b28 <pow+0x1b8>
    2b46:	4643      	mov	r3, r8
    2b48:	6a1b      	ldr	r3, [r3, #32]
    2b4a:	2b00      	cmp	r3, #0
    2b4c:	d004      	beq.n	2b58 <pow+0x1e8>
    2b4e:	f003 fc2f 	bl	63b0 <__errno>
    2b52:	4643      	mov	r3, r8
    2b54:	6a1b      	ldr	r3, [r3, #32]
    2b56:	6003      	str	r3, [r0, #0]
    2b58:	4643      	mov	r3, r8
    2b5a:	69dc      	ldr	r4, [r3, #28]
    2b5c:	699b      	ldr	r3, [r3, #24]
    2b5e:	9300      	str	r3, [sp, #0]
    2b60:	9401      	str	r4, [sp, #4]
    2b62:	e75a      	b.n	2a1a <pow+0xaa>
    2b64:	0020      	movs	r0, r4
    2b66:	0029      	movs	r1, r5
    2b68:	f000 feee 	bl	3948 <finite>
    2b6c:	2800      	cmp	r0, #0
    2b6e:	d100      	bne.n	2b72 <pow+0x202>
    2b70:	e771      	b.n	2a56 <pow+0xe6>
    2b72:	0030      	movs	r0, r6
    2b74:	0039      	movs	r1, r7
    2b76:	f000 fee7 	bl	3948 <finite>
    2b7a:	2800      	cmp	r0, #0
    2b7c:	d100      	bne.n	2b80 <pow+0x210>
    2b7e:	e76a      	b.n	2a56 <pow+0xe6>
    2b80:	9802      	ldr	r0, [sp, #8]
    2b82:	9903      	ldr	r1, [sp, #12]
    2b84:	000b      	movs	r3, r1
    2b86:	0002      	movs	r2, r0
    2b88:	f003 f9b8 	bl	5efc <__aeabi_dcmpun>
    2b8c:	ab06      	add	r3, sp, #24
    2b8e:	4698      	mov	r8, r3
    2b90:	2800      	cmp	r0, #0
    2b92:	d17a      	bne.n	2c8a <pow+0x31a>
    2b94:	2303      	movs	r3, #3
    2b96:	4642      	mov	r2, r8
    2b98:	9306      	str	r3, [sp, #24]
    2b9a:	4b4c      	ldr	r3, [pc, #304]	; (2ccc <pow+0x35c>)
    2b9c:	6210      	str	r0, [r2, #32]
    2b9e:	6053      	str	r3, [r2, #4]
    2ba0:	465b      	mov	r3, fp
    2ba2:	781b      	ldrb	r3, [r3, #0]
    2ba4:	6094      	str	r4, [r2, #8]
    2ba6:	60d5      	str	r5, [r2, #12]
    2ba8:	b25b      	sxtb	r3, r3
    2baa:	6116      	str	r6, [r2, #16]
    2bac:	6157      	str	r7, [r2, #20]
    2bae:	4699      	mov	r9, r3
    2bb0:	2b00      	cmp	r3, #0
    2bb2:	d148      	bne.n	2c46 <pow+0x2d6>
    2bb4:	22e0      	movs	r2, #224	; 0xe0
    2bb6:	4641      	mov	r1, r8
    2bb8:	4b47      	ldr	r3, [pc, #284]	; (2cd8 <pow+0x368>)
    2bba:	0612      	lsls	r2, r2, #24
    2bbc:	618a      	str	r2, [r1, #24]
    2bbe:	61cb      	str	r3, [r1, #28]
    2bc0:	0020      	movs	r0, r4
    2bc2:	2200      	movs	r2, #0
    2bc4:	2300      	movs	r3, #0
    2bc6:	0029      	movs	r1, r5
    2bc8:	f001 f802 	bl	3bd0 <__aeabi_dcmplt>
    2bcc:	2800      	cmp	r0, #0
    2bce:	d100      	bne.n	2bd2 <pow+0x262>
    2bd0:	e773      	b.n	2aba <pow+0x14a>
    2bd2:	2200      	movs	r2, #0
    2bd4:	4b41      	ldr	r3, [pc, #260]	; (2cdc <pow+0x36c>)
    2bd6:	0030      	movs	r0, r6
    2bd8:	0039      	movs	r1, r7
    2bda:	f002 fbc1 	bl	5360 <__aeabi_dmul>
    2bde:	0004      	movs	r4, r0
    2be0:	000d      	movs	r5, r1
    2be2:	f000 fec3 	bl	396c <rint>
    2be6:	0002      	movs	r2, r0
    2be8:	000b      	movs	r3, r1
    2bea:	0020      	movs	r0, r4
    2bec:	0029      	movs	r1, r5
    2bee:	f000 ffe9 	bl	3bc4 <__aeabi_dcmpeq>
    2bf2:	2800      	cmp	r0, #0
    2bf4:	d105      	bne.n	2c02 <pow+0x292>
    2bf6:	22e0      	movs	r2, #224	; 0xe0
    2bf8:	4b39      	ldr	r3, [pc, #228]	; (2ce0 <pow+0x370>)
    2bfa:	0612      	lsls	r2, r2, #24
    2bfc:	4641      	mov	r1, r8
    2bfe:	618a      	str	r2, [r1, #24]
    2c00:	61cb      	str	r3, [r1, #28]
    2c02:	465b      	mov	r3, fp
    2c04:	781b      	ldrb	r3, [r3, #0]
    2c06:	b25b      	sxtb	r3, r3
    2c08:	4699      	mov	r9, r3
    2c0a:	464b      	mov	r3, r9
    2c0c:	2b02      	cmp	r3, #2
    2c0e:	d000      	beq.n	2c12 <pow+0x2a2>
    2c10:	e753      	b.n	2aba <pow+0x14a>
    2c12:	e757      	b.n	2ac4 <pow+0x154>
    2c14:	ab06      	add	r3, sp, #24
    2c16:	4698      	mov	r8, r3
    2c18:	2301      	movs	r3, #1
    2c1a:	4642      	mov	r2, r8
    2c1c:	9306      	str	r3, [sp, #24]
    2c1e:	4b2b      	ldr	r3, [pc, #172]	; (2ccc <pow+0x35c>)
    2c20:	6053      	str	r3, [r2, #4]
    2c22:	4643      	mov	r3, r8
    2c24:	609c      	str	r4, [r3, #8]
    2c26:	60dd      	str	r5, [r3, #12]
    2c28:	2400      	movs	r4, #0
    2c2a:	9a00      	ldr	r2, [sp, #0]
    2c2c:	4d28      	ldr	r5, [pc, #160]	; (2cd0 <pow+0x360>)
    2c2e:	621a      	str	r2, [r3, #32]
    2c30:	611e      	str	r6, [r3, #16]
    2c32:	615f      	str	r7, [r3, #20]
    2c34:	619c      	str	r4, [r3, #24]
    2c36:	61dd      	str	r5, [r3, #28]
    2c38:	464b      	mov	r3, r9
    2c3a:	9400      	str	r4, [sp, #0]
    2c3c:	9501      	str	r5, [sp, #4]
    2c3e:	2b02      	cmp	r3, #2
    2c40:	d000      	beq.n	2c44 <pow+0x2d4>
    2c42:	e77b      	b.n	2b3c <pow+0x1cc>
    2c44:	e6e9      	b.n	2a1a <pow+0xaa>
    2c46:	2200      	movs	r2, #0
    2c48:	4641      	mov	r1, r8
    2c4a:	4b26      	ldr	r3, [pc, #152]	; (2ce4 <pow+0x374>)
    2c4c:	0020      	movs	r0, r4
    2c4e:	618a      	str	r2, [r1, #24]
    2c50:	61cb      	str	r3, [r1, #28]
    2c52:	2200      	movs	r2, #0
    2c54:	2300      	movs	r3, #0
    2c56:	0029      	movs	r1, r5
    2c58:	f000 ffba 	bl	3bd0 <__aeabi_dcmplt>
    2c5c:	2800      	cmp	r0, #0
    2c5e:	d0d4      	beq.n	2c0a <pow+0x29a>
    2c60:	2200      	movs	r2, #0
    2c62:	4b1e      	ldr	r3, [pc, #120]	; (2cdc <pow+0x36c>)
    2c64:	0030      	movs	r0, r6
    2c66:	0039      	movs	r1, r7
    2c68:	f002 fb7a 	bl	5360 <__aeabi_dmul>
    2c6c:	0004      	movs	r4, r0
    2c6e:	000d      	movs	r5, r1
    2c70:	f000 fe7c 	bl	396c <rint>
    2c74:	0002      	movs	r2, r0
    2c76:	000b      	movs	r3, r1
    2c78:	0020      	movs	r0, r4
    2c7a:	0029      	movs	r1, r5
    2c7c:	f000 ffa2 	bl	3bc4 <__aeabi_dcmpeq>
    2c80:	2800      	cmp	r0, #0
    2c82:	d1be      	bne.n	2c02 <pow+0x292>
    2c84:	2200      	movs	r2, #0
    2c86:	4b13      	ldr	r3, [pc, #76]	; (2cd4 <pow+0x364>)
    2c88:	e7b8      	b.n	2bfc <pow+0x28c>
    2c8a:	2301      	movs	r3, #1
    2c8c:	4642      	mov	r2, r8
    2c8e:	9306      	str	r3, [sp, #24]
    2c90:	4b0e      	ldr	r3, [pc, #56]	; (2ccc <pow+0x35c>)
    2c92:	6053      	str	r3, [r2, #4]
    2c94:	4643      	mov	r3, r8
    2c96:	464a      	mov	r2, r9
    2c98:	609c      	str	r4, [r3, #8]
    2c9a:	60dd      	str	r5, [r3, #12]
    2c9c:	621a      	str	r2, [r3, #32]
    2c9e:	611e      	str	r6, [r3, #16]
    2ca0:	615f      	str	r7, [r3, #20]
    2ca2:	2400      	movs	r4, #0
    2ca4:	465b      	mov	r3, fp
    2ca6:	571c      	ldrsb	r4, [r3, r4]
    2ca8:	2c00      	cmp	r4, #0
    2caa:	d100      	bne.n	2cae <pow+0x33e>
    2cac:	e741      	b.n	2b32 <pow+0x1c2>
    2cae:	2300      	movs	r3, #0
    2cb0:	2200      	movs	r2, #0
    2cb2:	0019      	movs	r1, r3
    2cb4:	0010      	movs	r0, r2
    2cb6:	f001 ff2f 	bl	4b18 <__aeabi_ddiv>
    2cba:	4643      	mov	r3, r8
    2cbc:	6198      	str	r0, [r3, #24]
    2cbe:	61d9      	str	r1, [r3, #28]
    2cc0:	2c02      	cmp	r4, #2
    2cc2:	d100      	bne.n	2cc6 <pow+0x356>
    2cc4:	e730      	b.n	2b28 <pow+0x1b8>
    2cc6:	e739      	b.n	2b3c <pow+0x1cc>
    2cc8:	20000070 	.word	0x20000070
    2ccc:	0000656c 	.word	0x0000656c
    2cd0:	3ff00000 	.word	0x3ff00000
    2cd4:	fff00000 	.word	0xfff00000
    2cd8:	47efffff 	.word	0x47efffff
    2cdc:	3fe00000 	.word	0x3fe00000
    2ce0:	c7efffff 	.word	0xc7efffff
    2ce4:	7ff00000 	.word	0x7ff00000

00002ce8 <__ieee754_pow>:
    2ce8:	b5f0      	push	{r4, r5, r6, r7, lr}
    2cea:	4656      	mov	r6, sl
    2cec:	464d      	mov	r5, r9
    2cee:	4644      	mov	r4, r8
    2cf0:	465f      	mov	r7, fp
    2cf2:	b4f0      	push	{r4, r5, r6, r7}
    2cf4:	001c      	movs	r4, r3
    2cf6:	0013      	movs	r3, r2
    2cf8:	0067      	lsls	r7, r4, #1
    2cfa:	b091      	sub	sp, #68	; 0x44
    2cfc:	087f      	lsrs	r7, r7, #1
    2cfe:	9300      	str	r3, [sp, #0]
    2d00:	9401      	str	r4, [sp, #4]
    2d02:	0006      	movs	r6, r0
    2d04:	000d      	movs	r5, r1
    2d06:	4680      	mov	r8, r0
    2d08:	4689      	mov	r9, r1
    2d0a:	46a2      	mov	sl, r4
    2d0c:	433b      	orrs	r3, r7
    2d0e:	d032      	beq.n	2d76 <__ieee754_pow+0x8e>
    2d10:	4b6e      	ldr	r3, [pc, #440]	; (2ecc <__ieee754_pow+0x1e4>)
    2d12:	006c      	lsls	r4, r5, #1
    2d14:	0864      	lsrs	r4, r4, #1
    2d16:	429c      	cmp	r4, r3
    2d18:	dc29      	bgt.n	2d6e <__ieee754_pow+0x86>
    2d1a:	d026      	beq.n	2d6a <__ieee754_pow+0x82>
    2d1c:	429f      	cmp	r7, r3
    2d1e:	dc26      	bgt.n	2d6e <__ieee754_pow+0x86>
    2d20:	4b6a      	ldr	r3, [pc, #424]	; (2ecc <__ieee754_pow+0x1e4>)
    2d22:	429f      	cmp	r7, r3
    2d24:	d100      	bne.n	2d28 <__ieee754_pow+0x40>
    2d26:	e089      	b.n	2e3c <__ieee754_pow+0x154>
    2d28:	2300      	movs	r3, #0
    2d2a:	469b      	mov	fp, r3
    2d2c:	464b      	mov	r3, r9
    2d2e:	2b00      	cmp	r3, #0
    2d30:	da00      	bge.n	2d34 <__ieee754_pow+0x4c>
    2d32:	e087      	b.n	2e44 <__ieee754_pow+0x15c>
    2d34:	2a00      	cmp	r2, #0
    2d36:	d12f      	bne.n	2d98 <__ieee754_pow+0xb0>
    2d38:	4b64      	ldr	r3, [pc, #400]	; (2ecc <__ieee754_pow+0x1e4>)
    2d3a:	429f      	cmp	r7, r3
    2d3c:	d100      	bne.n	2d40 <__ieee754_pow+0x58>
    2d3e:	e09f      	b.n	2e80 <__ieee754_pow+0x198>
    2d40:	4b63      	ldr	r3, [pc, #396]	; (2ed0 <__ieee754_pow+0x1e8>)
    2d42:	429f      	cmp	r7, r3
    2d44:	d05d      	beq.n	2e02 <__ieee754_pow+0x11a>
    2d46:	2380      	movs	r3, #128	; 0x80
    2d48:	05db      	lsls	r3, r3, #23
    2d4a:	459a      	cmp	sl, r3
    2d4c:	d101      	bne.n	2d52 <__ieee754_pow+0x6a>
    2d4e:	f000 fbc1 	bl	34d4 <__ieee754_pow+0x7ec>
    2d52:	4b60      	ldr	r3, [pc, #384]	; (2ed4 <__ieee754_pow+0x1ec>)
    2d54:	459a      	cmp	sl, r3
    2d56:	d11f      	bne.n	2d98 <__ieee754_pow+0xb0>
    2d58:	464b      	mov	r3, r9
    2d5a:	2b00      	cmp	r3, #0
    2d5c:	db1c      	blt.n	2d98 <__ieee754_pow+0xb0>
    2d5e:	0030      	movs	r0, r6
    2d60:	0029      	movs	r1, r5
    2d62:	f000 fcf7 	bl	3754 <__ieee754_sqrt>
    2d66:	0006      	movs	r6, r0
    2d68:	e007      	b.n	2d7a <__ieee754_pow+0x92>
    2d6a:	2800      	cmp	r0, #0
    2d6c:	d00d      	beq.n	2d8a <__ieee754_pow+0xa2>
    2d6e:	4b5a      	ldr	r3, [pc, #360]	; (2ed8 <__ieee754_pow+0x1f0>)
    2d70:	18e0      	adds	r0, r4, r3
    2d72:	4330      	orrs	r0, r6
    2d74:	d10b      	bne.n	2d8e <__ieee754_pow+0xa6>
    2d76:	2600      	movs	r6, #0
    2d78:	4955      	ldr	r1, [pc, #340]	; (2ed0 <__ieee754_pow+0x1e8>)
    2d7a:	0030      	movs	r0, r6
    2d7c:	b011      	add	sp, #68	; 0x44
    2d7e:	bc3c      	pop	{r2, r3, r4, r5}
    2d80:	4690      	mov	r8, r2
    2d82:	4699      	mov	r9, r3
    2d84:	46a2      	mov	sl, r4
    2d86:	46ab      	mov	fp, r5
    2d88:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2d8a:	42a7      	cmp	r7, r4
    2d8c:	ddc8      	ble.n	2d20 <__ieee754_pow+0x38>
    2d8e:	4853      	ldr	r0, [pc, #332]	; (2edc <__ieee754_pow+0x1f4>)
    2d90:	f000 fde6 	bl	3960 <nan>
    2d94:	0006      	movs	r6, r0
    2d96:	e7f0      	b.n	2d7a <__ieee754_pow+0x92>
    2d98:	0030      	movs	r0, r6
    2d9a:	0029      	movs	r1, r5
    2d9c:	f000 fdd0 	bl	3940 <fabs>
    2da0:	4643      	mov	r3, r8
    2da2:	2b00      	cmp	r3, #0
    2da4:	d01d      	beq.n	2de2 <__ieee754_pow+0xfa>
    2da6:	0feb      	lsrs	r3, r5, #31
    2da8:	3b01      	subs	r3, #1
    2daa:	4698      	mov	r8, r3
    2dac:	465b      	mov	r3, fp
    2dae:	4642      	mov	r2, r8
    2db0:	4313      	orrs	r3, r2
    2db2:	d079      	beq.n	2ea8 <__ieee754_pow+0x1c0>
    2db4:	4b4a      	ldr	r3, [pc, #296]	; (2ee0 <__ieee754_pow+0x1f8>)
    2db6:	429f      	cmp	r7, r3
    2db8:	dc00      	bgt.n	2dbc <__ieee754_pow+0xd4>
    2dba:	e09f      	b.n	2efc <__ieee754_pow+0x214>
    2dbc:	4b49      	ldr	r3, [pc, #292]	; (2ee4 <__ieee754_pow+0x1fc>)
    2dbe:	429f      	cmp	r7, r3
    2dc0:	dc01      	bgt.n	2dc6 <__ieee754_pow+0xde>
    2dc2:	f000 fbce 	bl	3562 <__ieee754_pow+0x87a>
    2dc6:	4b48      	ldr	r3, [pc, #288]	; (2ee8 <__ieee754_pow+0x200>)
    2dc8:	429c      	cmp	r4, r3
    2dca:	dd79      	ble.n	2ec0 <__ieee754_pow+0x1d8>
    2dcc:	4653      	mov	r3, sl
    2dce:	2b00      	cmp	r3, #0
    2dd0:	dd79      	ble.n	2ec6 <__ieee754_pow+0x1de>
    2dd2:	4a46      	ldr	r2, [pc, #280]	; (2eec <__ieee754_pow+0x204>)
    2dd4:	4b46      	ldr	r3, [pc, #280]	; (2ef0 <__ieee754_pow+0x208>)
    2dd6:	0010      	movs	r0, r2
    2dd8:	0019      	movs	r1, r3
    2dda:	f002 fac1 	bl	5360 <__aeabi_dmul>
    2dde:	0006      	movs	r6, r0
    2de0:	e7cb      	b.n	2d7a <__ieee754_pow+0x92>
    2de2:	2c00      	cmp	r4, #0
    2de4:	d004      	beq.n	2df0 <__ieee754_pow+0x108>
    2de6:	4a3a      	ldr	r2, [pc, #232]	; (2ed0 <__ieee754_pow+0x1e8>)
    2de8:	00ab      	lsls	r3, r5, #2
    2dea:	089b      	lsrs	r3, r3, #2
    2dec:	4293      	cmp	r3, r2
    2dee:	d1da      	bne.n	2da6 <__ieee754_pow+0xbe>
    2df0:	4653      	mov	r3, sl
    2df2:	2b00      	cmp	r3, #0
    2df4:	da00      	bge.n	2df8 <__ieee754_pow+0x110>
    2df6:	e3ad      	b.n	3554 <__ieee754_pow+0x86c>
    2df8:	464b      	mov	r3, r9
    2dfa:	2b00      	cmp	r3, #0
    2dfc:	db0d      	blt.n	2e1a <__ieee754_pow+0x132>
    2dfe:	0006      	movs	r6, r0
    2e00:	e7bb      	b.n	2d7a <__ieee754_pow+0x92>
    2e02:	4653      	mov	r3, sl
    2e04:	0029      	movs	r1, r5
    2e06:	2b00      	cmp	r3, #0
    2e08:	dab7      	bge.n	2d7a <__ieee754_pow+0x92>
    2e0a:	0032      	movs	r2, r6
    2e0c:	002b      	movs	r3, r5
    2e0e:	2000      	movs	r0, #0
    2e10:	492f      	ldr	r1, [pc, #188]	; (2ed0 <__ieee754_pow+0x1e8>)
    2e12:	f001 fe81 	bl	4b18 <__aeabi_ddiv>
    2e16:	0006      	movs	r6, r0
    2e18:	e7af      	b.n	2d7a <__ieee754_pow+0x92>
    2e1a:	4b2f      	ldr	r3, [pc, #188]	; (2ed8 <__ieee754_pow+0x1f0>)
    2e1c:	469c      	mov	ip, r3
    2e1e:	465b      	mov	r3, fp
    2e20:	4464      	add	r4, ip
    2e22:	431c      	orrs	r4, r3
    2e24:	d101      	bne.n	2e2a <__ieee754_pow+0x142>
    2e26:	f000 fc2b 	bl	3680 <__ieee754_pow+0x998>
    2e2a:	465b      	mov	r3, fp
    2e2c:	0006      	movs	r6, r0
    2e2e:	2b01      	cmp	r3, #1
    2e30:	d1a3      	bne.n	2d7a <__ieee754_pow+0x92>
    2e32:	2380      	movs	r3, #128	; 0x80
    2e34:	061b      	lsls	r3, r3, #24
    2e36:	469c      	mov	ip, r3
    2e38:	4461      	add	r1, ip
    2e3a:	e79e      	b.n	2d7a <__ieee754_pow+0x92>
    2e3c:	2a00      	cmp	r2, #0
    2e3e:	d100      	bne.n	2e42 <__ieee754_pow+0x15a>
    2e40:	e772      	b.n	2d28 <__ieee754_pow+0x40>
    2e42:	e794      	b.n	2d6e <__ieee754_pow+0x86>
    2e44:	4b2b      	ldr	r3, [pc, #172]	; (2ef4 <__ieee754_pow+0x20c>)
    2e46:	429f      	cmp	r7, r3
    2e48:	dc2b      	bgt.n	2ea2 <__ieee754_pow+0x1ba>
    2e4a:	4b27      	ldr	r3, [pc, #156]	; (2ee8 <__ieee754_pow+0x200>)
    2e4c:	429f      	cmp	r7, r3
    2e4e:	dc00      	bgt.n	2e52 <__ieee754_pow+0x16a>
    2e50:	e770      	b.n	2d34 <__ieee754_pow+0x4c>
    2e52:	4929      	ldr	r1, [pc, #164]	; (2ef8 <__ieee754_pow+0x210>)
    2e54:	153b      	asrs	r3, r7, #20
    2e56:	468c      	mov	ip, r1
    2e58:	4463      	add	r3, ip
    2e5a:	2b14      	cmp	r3, #20
    2e5c:	dc01      	bgt.n	2e62 <__ieee754_pow+0x17a>
    2e5e:	f000 fbf2 	bl	3646 <__ieee754_pow+0x95e>
    2e62:	2134      	movs	r1, #52	; 0x34
    2e64:	1acb      	subs	r3, r1, r3
    2e66:	9900      	ldr	r1, [sp, #0]
    2e68:	40d9      	lsrs	r1, r3
    2e6a:	0008      	movs	r0, r1
    2e6c:	4098      	lsls	r0, r3
    2e6e:	4282      	cmp	r2, r0
    2e70:	d000      	beq.n	2e74 <__ieee754_pow+0x18c>
    2e72:	e75f      	b.n	2d34 <__ieee754_pow+0x4c>
    2e74:	2301      	movs	r3, #1
    2e76:	4019      	ands	r1, r3
    2e78:	3301      	adds	r3, #1
    2e7a:	1a5b      	subs	r3, r3, r1
    2e7c:	469b      	mov	fp, r3
    2e7e:	e759      	b.n	2d34 <__ieee754_pow+0x4c>
    2e80:	4b15      	ldr	r3, [pc, #84]	; (2ed8 <__ieee754_pow+0x1f0>)
    2e82:	18e0      	adds	r0, r4, r3
    2e84:	4306      	orrs	r6, r0
    2e86:	d100      	bne.n	2e8a <__ieee754_pow+0x1a2>
    2e88:	e775      	b.n	2d76 <__ieee754_pow+0x8e>
    2e8a:	4b17      	ldr	r3, [pc, #92]	; (2ee8 <__ieee754_pow+0x200>)
    2e8c:	429c      	cmp	r4, r3
    2e8e:	dc00      	bgt.n	2e92 <__ieee754_pow+0x1aa>
    2e90:	e351      	b.n	3536 <__ieee754_pow+0x84e>
    2e92:	4653      	mov	r3, sl
    2e94:	2b00      	cmp	r3, #0
    2e96:	db16      	blt.n	2ec6 <__ieee754_pow+0x1de>
    2e98:	9b00      	ldr	r3, [sp, #0]
    2e9a:	9c01      	ldr	r4, [sp, #4]
    2e9c:	001e      	movs	r6, r3
    2e9e:	0021      	movs	r1, r4
    2ea0:	e76b      	b.n	2d7a <__ieee754_pow+0x92>
    2ea2:	2302      	movs	r3, #2
    2ea4:	469b      	mov	fp, r3
    2ea6:	e745      	b.n	2d34 <__ieee754_pow+0x4c>
    2ea8:	0032      	movs	r2, r6
    2eaa:	002b      	movs	r3, r5
    2eac:	0030      	movs	r0, r6
    2eae:	0029      	movs	r1, r5
    2eb0:	f002 fcd0 	bl	5854 <__aeabi_dsub>
    2eb4:	0002      	movs	r2, r0
    2eb6:	000b      	movs	r3, r1
    2eb8:	f001 fe2e 	bl	4b18 <__aeabi_ddiv>
    2ebc:	0006      	movs	r6, r0
    2ebe:	e75c      	b.n	2d7a <__ieee754_pow+0x92>
    2ec0:	4653      	mov	r3, sl
    2ec2:	2b00      	cmp	r3, #0
    2ec4:	db85      	blt.n	2dd2 <__ieee754_pow+0xea>
    2ec6:	2600      	movs	r6, #0
    2ec8:	2100      	movs	r1, #0
    2eca:	e756      	b.n	2d7a <__ieee754_pow+0x92>
    2ecc:	7ff00000 	.word	0x7ff00000
    2ed0:	3ff00000 	.word	0x3ff00000
    2ed4:	3fe00000 	.word	0x3fe00000
    2ed8:	c0100000 	.word	0xc0100000
    2edc:	00006570 	.word	0x00006570
    2ee0:	41e00000 	.word	0x41e00000
    2ee4:	43f00000 	.word	0x43f00000
    2ee8:	3fefffff 	.word	0x3fefffff
    2eec:	8800759c 	.word	0x8800759c
    2ef0:	7e37e43c 	.word	0x7e37e43c
    2ef4:	433fffff 	.word	0x433fffff
    2ef8:	fffffc01 	.word	0xfffffc01
    2efc:	4be8      	ldr	r3, [pc, #928]	; (32a0 <__ieee754_pow+0x5b8>)
    2efe:	2200      	movs	r2, #0
    2f00:	429c      	cmp	r4, r3
    2f02:	dc06      	bgt.n	2f12 <__ieee754_pow+0x22a>
    2f04:	2200      	movs	r2, #0
    2f06:	4be7      	ldr	r3, [pc, #924]	; (32a4 <__ieee754_pow+0x5bc>)
    2f08:	f002 fa2a 	bl	5360 <__aeabi_dmul>
    2f0c:	2235      	movs	r2, #53	; 0x35
    2f0e:	000c      	movs	r4, r1
    2f10:	4252      	negs	r2, r2
    2f12:	4de5      	ldr	r5, [pc, #916]	; (32a8 <__ieee754_pow+0x5c0>)
    2f14:	1523      	asrs	r3, r4, #20
    2f16:	46ac      	mov	ip, r5
    2f18:	4463      	add	r3, ip
    2f1a:	4699      	mov	r9, r3
    2f1c:	0324      	lsls	r4, r4, #12
    2f1e:	4de3      	ldr	r5, [pc, #908]	; (32ac <__ieee754_pow+0x5c4>)
    2f20:	4be3      	ldr	r3, [pc, #908]	; (32b0 <__ieee754_pow+0x5c8>)
    2f22:	0b24      	lsrs	r4, r4, #12
    2f24:	4491      	add	r9, r2
    2f26:	4325      	orrs	r5, r4
    2f28:	429c      	cmp	r4, r3
    2f2a:	dd09      	ble.n	2f40 <__ieee754_pow+0x258>
    2f2c:	4be1      	ldr	r3, [pc, #900]	; (32b4 <__ieee754_pow+0x5cc>)
    2f2e:	429c      	cmp	r4, r3
    2f30:	dc00      	bgt.n	2f34 <__ieee754_pow+0x24c>
    2f32:	e3a9      	b.n	3688 <__ieee754_pow+0x9a0>
    2f34:	2301      	movs	r3, #1
    2f36:	469c      	mov	ip, r3
    2f38:	4bdf      	ldr	r3, [pc, #892]	; (32b8 <__ieee754_pow+0x5d0>)
    2f3a:	44e1      	add	r9, ip
    2f3c:	469c      	mov	ip, r3
    2f3e:	4465      	add	r5, ip
    2f40:	2300      	movs	r3, #0
    2f42:	2400      	movs	r4, #0
    2f44:	2200      	movs	r2, #0
    2f46:	9308      	str	r3, [sp, #32]
    2f48:	9409      	str	r4, [sp, #36]	; 0x24
    2f4a:	930c      	str	r3, [sp, #48]	; 0x30
    2f4c:	940d      	str	r4, [sp, #52]	; 0x34
    2f4e:	2400      	movs	r4, #0
    2f50:	4bd6      	ldr	r3, [pc, #856]	; (32ac <__ieee754_pow+0x5c4>)
    2f52:	9206      	str	r2, [sp, #24]
    2f54:	9307      	str	r3, [sp, #28]
    2f56:	9a06      	ldr	r2, [sp, #24]
    2f58:	9b07      	ldr	r3, [sp, #28]
    2f5a:	0029      	movs	r1, r5
    2f5c:	900a      	str	r0, [sp, #40]	; 0x28
    2f5e:	910b      	str	r1, [sp, #44]	; 0x2c
    2f60:	f002 fc78 	bl	5854 <__aeabi_dsub>
    2f64:	9a06      	ldr	r2, [sp, #24]
    2f66:	9b07      	ldr	r3, [sp, #28]
    2f68:	0006      	movs	r6, r0
    2f6a:	000f      	movs	r7, r1
    2f6c:	980a      	ldr	r0, [sp, #40]	; 0x28
    2f6e:	990b      	ldr	r1, [sp, #44]	; 0x2c
    2f70:	f001 faa6 	bl	44c0 <__aeabi_dadd>
    2f74:	0002      	movs	r2, r0
    2f76:	000b      	movs	r3, r1
    2f78:	2000      	movs	r0, #0
    2f7a:	49cc      	ldr	r1, [pc, #816]	; (32ac <__ieee754_pow+0x5c4>)
    2f7c:	f001 fdcc 	bl	4b18 <__aeabi_ddiv>
    2f80:	000a      	movs	r2, r1
    2f82:	0001      	movs	r1, r0
    2f84:	0013      	movs	r3, r2
    2f86:	910e      	str	r1, [sp, #56]	; 0x38
    2f88:	920f      	str	r2, [sp, #60]	; 0x3c
    2f8a:	0002      	movs	r2, r0
    2f8c:	0039      	movs	r1, r7
    2f8e:	0030      	movs	r0, r6
    2f90:	f002 f9e6 	bl	5360 <__aeabi_dmul>
    2f94:	000a      	movs	r2, r1
    2f96:	0001      	movs	r1, r0
    2f98:	2080      	movs	r0, #128	; 0x80
    2f9a:	9104      	str	r1, [sp, #16]
    2f9c:	9205      	str	r2, [sp, #20]
    2f9e:	0013      	movs	r3, r2
    2fa0:	2200      	movs	r2, #0
    2fa2:	2180      	movs	r1, #128	; 0x80
    2fa4:	0300      	lsls	r0, r0, #12
    2fa6:	4684      	mov	ip, r0
    2fa8:	9202      	str	r2, [sp, #8]
    2faa:	9303      	str	r3, [sp, #12]
    2fac:	2200      	movs	r2, #0
    2fae:	0589      	lsls	r1, r1, #22
    2fb0:	106d      	asrs	r5, r5, #1
    2fb2:	430d      	orrs	r5, r1
    2fb4:	4465      	add	r5, ip
    2fb6:	192b      	adds	r3, r5, r4
    2fb8:	9802      	ldr	r0, [sp, #8]
    2fba:	9903      	ldr	r1, [sp, #12]
    2fbc:	0014      	movs	r4, r2
    2fbe:	001d      	movs	r5, r3
    2fc0:	f002 f9ce 	bl	5360 <__aeabi_dmul>
    2fc4:	0002      	movs	r2, r0
    2fc6:	000b      	movs	r3, r1
    2fc8:	0030      	movs	r0, r6
    2fca:	0039      	movs	r1, r7
    2fcc:	f002 fc42 	bl	5854 <__aeabi_dsub>
    2fd0:	9a06      	ldr	r2, [sp, #24]
    2fd2:	9b07      	ldr	r3, [sp, #28]
    2fd4:	0006      	movs	r6, r0
    2fd6:	000f      	movs	r7, r1
    2fd8:	0020      	movs	r0, r4
    2fda:	0029      	movs	r1, r5
    2fdc:	f002 fc3a 	bl	5854 <__aeabi_dsub>
    2fe0:	0002      	movs	r2, r0
    2fe2:	000b      	movs	r3, r1
    2fe4:	980a      	ldr	r0, [sp, #40]	; 0x28
    2fe6:	990b      	ldr	r1, [sp, #44]	; 0x2c
    2fe8:	f002 fc34 	bl	5854 <__aeabi_dsub>
    2fec:	9a02      	ldr	r2, [sp, #8]
    2fee:	9b03      	ldr	r3, [sp, #12]
    2ff0:	f002 f9b6 	bl	5360 <__aeabi_dmul>
    2ff4:	0002      	movs	r2, r0
    2ff6:	000b      	movs	r3, r1
    2ff8:	0030      	movs	r0, r6
    2ffa:	0039      	movs	r1, r7
    2ffc:	f002 fc2a 	bl	5854 <__aeabi_dsub>
    3000:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    3002:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    3004:	f002 f9ac 	bl	5360 <__aeabi_dmul>
    3008:	9d04      	ldr	r5, [sp, #16]
    300a:	9e05      	ldr	r6, [sp, #20]
    300c:	9006      	str	r0, [sp, #24]
    300e:	9107      	str	r1, [sp, #28]
    3010:	002a      	movs	r2, r5
    3012:	0033      	movs	r3, r6
    3014:	0028      	movs	r0, r5
    3016:	0031      	movs	r1, r6
    3018:	f002 f9a2 	bl	5360 <__aeabi_dmul>
    301c:	0006      	movs	r6, r0
    301e:	000f      	movs	r7, r1
    3020:	4aa6      	ldr	r2, [pc, #664]	; (32bc <__ieee754_pow+0x5d4>)
    3022:	4ba7      	ldr	r3, [pc, #668]	; (32c0 <__ieee754_pow+0x5d8>)
    3024:	f002 f99c 	bl	5360 <__aeabi_dmul>
    3028:	4aa6      	ldr	r2, [pc, #664]	; (32c4 <__ieee754_pow+0x5dc>)
    302a:	4ba7      	ldr	r3, [pc, #668]	; (32c8 <__ieee754_pow+0x5e0>)
    302c:	f001 fa48 	bl	44c0 <__aeabi_dadd>
    3030:	0032      	movs	r2, r6
    3032:	003b      	movs	r3, r7
    3034:	f002 f994 	bl	5360 <__aeabi_dmul>
    3038:	4aa4      	ldr	r2, [pc, #656]	; (32cc <__ieee754_pow+0x5e4>)
    303a:	4ba5      	ldr	r3, [pc, #660]	; (32d0 <__ieee754_pow+0x5e8>)
    303c:	f001 fa40 	bl	44c0 <__aeabi_dadd>
    3040:	0032      	movs	r2, r6
    3042:	003b      	movs	r3, r7
    3044:	f002 f98c 	bl	5360 <__aeabi_dmul>
    3048:	4aa2      	ldr	r2, [pc, #648]	; (32d4 <__ieee754_pow+0x5ec>)
    304a:	4ba3      	ldr	r3, [pc, #652]	; (32d8 <__ieee754_pow+0x5f0>)
    304c:	f001 fa38 	bl	44c0 <__aeabi_dadd>
    3050:	0032      	movs	r2, r6
    3052:	003b      	movs	r3, r7
    3054:	f002 f984 	bl	5360 <__aeabi_dmul>
    3058:	4aa0      	ldr	r2, [pc, #640]	; (32dc <__ieee754_pow+0x5f4>)
    305a:	4ba1      	ldr	r3, [pc, #644]	; (32e0 <__ieee754_pow+0x5f8>)
    305c:	f001 fa30 	bl	44c0 <__aeabi_dadd>
    3060:	0032      	movs	r2, r6
    3062:	003b      	movs	r3, r7
    3064:	f002 f97c 	bl	5360 <__aeabi_dmul>
    3068:	4a9e      	ldr	r2, [pc, #632]	; (32e4 <__ieee754_pow+0x5fc>)
    306a:	4b9f      	ldr	r3, [pc, #636]	; (32e8 <__ieee754_pow+0x600>)
    306c:	f001 fa28 	bl	44c0 <__aeabi_dadd>
    3070:	0032      	movs	r2, r6
    3072:	0004      	movs	r4, r0
    3074:	000d      	movs	r5, r1
    3076:	003b      	movs	r3, r7
    3078:	0030      	movs	r0, r6
    307a:	0039      	movs	r1, r7
    307c:	f002 f970 	bl	5360 <__aeabi_dmul>
    3080:	0002      	movs	r2, r0
    3082:	000b      	movs	r3, r1
    3084:	0020      	movs	r0, r4
    3086:	0029      	movs	r1, r5
    3088:	f002 f96a 	bl	5360 <__aeabi_dmul>
    308c:	9e02      	ldr	r6, [sp, #8]
    308e:	9f03      	ldr	r7, [sp, #12]
    3090:	0004      	movs	r4, r0
    3092:	000d      	movs	r5, r1
    3094:	9804      	ldr	r0, [sp, #16]
    3096:	9905      	ldr	r1, [sp, #20]
    3098:	0032      	movs	r2, r6
    309a:	003b      	movs	r3, r7
    309c:	f001 fa10 	bl	44c0 <__aeabi_dadd>
    30a0:	9a06      	ldr	r2, [sp, #24]
    30a2:	9b07      	ldr	r3, [sp, #28]
    30a4:	f002 f95c 	bl	5360 <__aeabi_dmul>
    30a8:	0022      	movs	r2, r4
    30aa:	002b      	movs	r3, r5
    30ac:	f001 fa08 	bl	44c0 <__aeabi_dadd>
    30b0:	0032      	movs	r2, r6
    30b2:	900a      	str	r0, [sp, #40]	; 0x28
    30b4:	910b      	str	r1, [sp, #44]	; 0x2c
    30b6:	003b      	movs	r3, r7
    30b8:	0030      	movs	r0, r6
    30ba:	0039      	movs	r1, r7
    30bc:	9602      	str	r6, [sp, #8]
    30be:	9703      	str	r7, [sp, #12]
    30c0:	f002 f94e 	bl	5360 <__aeabi_dmul>
    30c4:	2200      	movs	r2, #0
    30c6:	4b89      	ldr	r3, [pc, #548]	; (32ec <__ieee754_pow+0x604>)
    30c8:	0004      	movs	r4, r0
    30ca:	000d      	movs	r5, r1
    30cc:	f001 f9f8 	bl	44c0 <__aeabi_dadd>
    30d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    30d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    30d4:	f001 f9f4 	bl	44c0 <__aeabi_dadd>
    30d8:	2600      	movs	r6, #0
    30da:	000f      	movs	r7, r1
    30dc:	0032      	movs	r2, r6
    30de:	000b      	movs	r3, r1
    30e0:	9802      	ldr	r0, [sp, #8]
    30e2:	9903      	ldr	r1, [sp, #12]
    30e4:	f002 f93c 	bl	5360 <__aeabi_dmul>
    30e8:	2200      	movs	r2, #0
    30ea:	9002      	str	r0, [sp, #8]
    30ec:	9103      	str	r1, [sp, #12]
    30ee:	4b7f      	ldr	r3, [pc, #508]	; (32ec <__ieee754_pow+0x604>)
    30f0:	0030      	movs	r0, r6
    30f2:	0039      	movs	r1, r7
    30f4:	f002 fbae 	bl	5854 <__aeabi_dsub>
    30f8:	0022      	movs	r2, r4
    30fa:	002b      	movs	r3, r5
    30fc:	f002 fbaa 	bl	5854 <__aeabi_dsub>
    3100:	0002      	movs	r2, r0
    3102:	000b      	movs	r3, r1
    3104:	980a      	ldr	r0, [sp, #40]	; 0x28
    3106:	990b      	ldr	r1, [sp, #44]	; 0x2c
    3108:	f002 fba4 	bl	5854 <__aeabi_dsub>
    310c:	9a04      	ldr	r2, [sp, #16]
    310e:	9b05      	ldr	r3, [sp, #20]
    3110:	f002 f926 	bl	5360 <__aeabi_dmul>
    3114:	0032      	movs	r2, r6
    3116:	0004      	movs	r4, r0
    3118:	000d      	movs	r5, r1
    311a:	9806      	ldr	r0, [sp, #24]
    311c:	9907      	ldr	r1, [sp, #28]
    311e:	003b      	movs	r3, r7
    3120:	f002 f91e 	bl	5360 <__aeabi_dmul>
    3124:	0002      	movs	r2, r0
    3126:	000b      	movs	r3, r1
    3128:	0020      	movs	r0, r4
    312a:	0029      	movs	r1, r5
    312c:	f001 f9c8 	bl	44c0 <__aeabi_dadd>
    3130:	0004      	movs	r4, r0
    3132:	000d      	movs	r5, r1
    3134:	0002      	movs	r2, r0
    3136:	000b      	movs	r3, r1
    3138:	9802      	ldr	r0, [sp, #8]
    313a:	9903      	ldr	r1, [sp, #12]
    313c:	f001 f9c0 	bl	44c0 <__aeabi_dadd>
    3140:	2600      	movs	r6, #0
    3142:	22e0      	movs	r2, #224	; 0xe0
    3144:	4b6a      	ldr	r3, [pc, #424]	; (32f0 <__ieee754_pow+0x608>)
    3146:	0612      	lsls	r2, r2, #24
    3148:	0030      	movs	r0, r6
    314a:	000f      	movs	r7, r1
    314c:	f002 f908 	bl	5360 <__aeabi_dmul>
    3150:	9a02      	ldr	r2, [sp, #8]
    3152:	9b03      	ldr	r3, [sp, #12]
    3154:	9004      	str	r0, [sp, #16]
    3156:	9105      	str	r1, [sp, #20]
    3158:	0030      	movs	r0, r6
    315a:	0039      	movs	r1, r7
    315c:	f002 fb7a 	bl	5854 <__aeabi_dsub>
    3160:	0002      	movs	r2, r0
    3162:	000b      	movs	r3, r1
    3164:	0020      	movs	r0, r4
    3166:	0029      	movs	r1, r5
    3168:	f002 fb74 	bl	5854 <__aeabi_dsub>
    316c:	4a61      	ldr	r2, [pc, #388]	; (32f4 <__ieee754_pow+0x60c>)
    316e:	4b60      	ldr	r3, [pc, #384]	; (32f0 <__ieee754_pow+0x608>)
    3170:	f002 f8f6 	bl	5360 <__aeabi_dmul>
    3174:	4a60      	ldr	r2, [pc, #384]	; (32f8 <__ieee754_pow+0x610>)
    3176:	0004      	movs	r4, r0
    3178:	000d      	movs	r5, r1
    317a:	4b60      	ldr	r3, [pc, #384]	; (32fc <__ieee754_pow+0x614>)
    317c:	0030      	movs	r0, r6
    317e:	0039      	movs	r1, r7
    3180:	f002 f8ee 	bl	5360 <__aeabi_dmul>
    3184:	0002      	movs	r2, r0
    3186:	000b      	movs	r3, r1
    3188:	0020      	movs	r0, r4
    318a:	0029      	movs	r1, r5
    318c:	f001 f998 	bl	44c0 <__aeabi_dadd>
    3190:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    3192:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    3194:	f001 f994 	bl	44c0 <__aeabi_dadd>
    3198:	0006      	movs	r6, r0
    319a:	4648      	mov	r0, r9
    319c:	000f      	movs	r7, r1
    319e:	f002 ff03 	bl	5fa8 <__aeabi_i2d>
    31a2:	0004      	movs	r4, r0
    31a4:	000d      	movs	r5, r1
    31a6:	9804      	ldr	r0, [sp, #16]
    31a8:	9905      	ldr	r1, [sp, #20]
    31aa:	0032      	movs	r2, r6
    31ac:	003b      	movs	r3, r7
    31ae:	f001 f987 	bl	44c0 <__aeabi_dadd>
    31b2:	9a08      	ldr	r2, [sp, #32]
    31b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    31b6:	f001 f983 	bl	44c0 <__aeabi_dadd>
    31ba:	0022      	movs	r2, r4
    31bc:	002b      	movs	r3, r5
    31be:	f001 f97f 	bl	44c0 <__aeabi_dadd>
    31c2:	2000      	movs	r0, #0
    31c4:	0022      	movs	r2, r4
    31c6:	002b      	movs	r3, r5
    31c8:	9002      	str	r0, [sp, #8]
    31ca:	9103      	str	r1, [sp, #12]
    31cc:	f002 fb42 	bl	5854 <__aeabi_dsub>
    31d0:	9a08      	ldr	r2, [sp, #32]
    31d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    31d4:	f002 fb3e 	bl	5854 <__aeabi_dsub>
    31d8:	9a04      	ldr	r2, [sp, #16]
    31da:	9b05      	ldr	r3, [sp, #20]
    31dc:	f002 fb3a 	bl	5854 <__aeabi_dsub>
    31e0:	0002      	movs	r2, r0
    31e2:	000b      	movs	r3, r1
    31e4:	0030      	movs	r0, r6
    31e6:	0039      	movs	r1, r7
    31e8:	f002 fb34 	bl	5854 <__aeabi_dsub>
    31ec:	9004      	str	r0, [sp, #16]
    31ee:	9105      	str	r1, [sp, #20]
    31f0:	465b      	mov	r3, fp
    31f2:	4642      	mov	r2, r8
    31f4:	3b01      	subs	r3, #1
    31f6:	4313      	orrs	r3, r2
    31f8:	d100      	bne.n	31fc <__ieee754_pow+0x514>
    31fa:	e197      	b.n	352c <__ieee754_pow+0x844>
    31fc:	2300      	movs	r3, #0
    31fe:	4c2b      	ldr	r4, [pc, #172]	; (32ac <__ieee754_pow+0x5c4>)
    3200:	9306      	str	r3, [sp, #24]
    3202:	9407      	str	r4, [sp, #28]
    3204:	9800      	ldr	r0, [sp, #0]
    3206:	9901      	ldr	r1, [sp, #4]
    3208:	2600      	movs	r6, #0
    320a:	000b      	movs	r3, r1
    320c:	0032      	movs	r2, r6
    320e:	000f      	movs	r7, r1
    3210:	f002 fb20 	bl	5854 <__aeabi_dsub>
    3214:	9a02      	ldr	r2, [sp, #8]
    3216:	9b03      	ldr	r3, [sp, #12]
    3218:	f002 f8a2 	bl	5360 <__aeabi_dmul>
    321c:	9a00      	ldr	r2, [sp, #0]
    321e:	9b01      	ldr	r3, [sp, #4]
    3220:	0004      	movs	r4, r0
    3222:	000d      	movs	r5, r1
    3224:	9804      	ldr	r0, [sp, #16]
    3226:	9905      	ldr	r1, [sp, #20]
    3228:	f002 f89a 	bl	5360 <__aeabi_dmul>
    322c:	0002      	movs	r2, r0
    322e:	000b      	movs	r3, r1
    3230:	0020      	movs	r0, r4
    3232:	0029      	movs	r1, r5
    3234:	f001 f944 	bl	44c0 <__aeabi_dadd>
    3238:	0004      	movs	r4, r0
    323a:	000d      	movs	r5, r1
    323c:	9802      	ldr	r0, [sp, #8]
    323e:	9903      	ldr	r1, [sp, #12]
    3240:	003b      	movs	r3, r7
    3242:	0032      	movs	r2, r6
    3244:	9404      	str	r4, [sp, #16]
    3246:	9505      	str	r5, [sp, #20]
    3248:	f002 f88a 	bl	5360 <__aeabi_dmul>
    324c:	9000      	str	r0, [sp, #0]
    324e:	9101      	str	r1, [sp, #4]
    3250:	000b      	movs	r3, r1
    3252:	0002      	movs	r2, r0
    3254:	0029      	movs	r1, r5
    3256:	0020      	movs	r0, r4
    3258:	f001 f932 	bl	44c0 <__aeabi_dadd>
    325c:	4b28      	ldr	r3, [pc, #160]	; (3300 <__ieee754_pow+0x618>)
    325e:	4681      	mov	r9, r0
    3260:	1e0f      	subs	r7, r1, #0
    3262:	468a      	mov	sl, r1
    3264:	429f      	cmp	r7, r3
    3266:	dc00      	bgt.n	326a <__ieee754_pow+0x582>
    3268:	e13c      	b.n	34e4 <__ieee754_pow+0x7fc>
    326a:	4b26      	ldr	r3, [pc, #152]	; (3304 <__ieee754_pow+0x61c>)
    326c:	18cb      	adds	r3, r1, r3
    326e:	4303      	orrs	r3, r0
    3270:	d000      	beq.n	3274 <__ieee754_pow+0x58c>
    3272:	e1db      	b.n	362c <__ieee754_pow+0x944>
    3274:	9804      	ldr	r0, [sp, #16]
    3276:	9905      	ldr	r1, [sp, #20]
    3278:	4a23      	ldr	r2, [pc, #140]	; (3308 <__ieee754_pow+0x620>)
    327a:	4b24      	ldr	r3, [pc, #144]	; (330c <__ieee754_pow+0x624>)
    327c:	f001 f920 	bl	44c0 <__aeabi_dadd>
    3280:	9a00      	ldr	r2, [sp, #0]
    3282:	9b01      	ldr	r3, [sp, #4]
    3284:	0004      	movs	r4, r0
    3286:	000d      	movs	r5, r1
    3288:	4648      	mov	r0, r9
    328a:	0039      	movs	r1, r7
    328c:	f002 fae2 	bl	5854 <__aeabi_dsub>
    3290:	0002      	movs	r2, r0
    3292:	000b      	movs	r3, r1
    3294:	0020      	movs	r0, r4
    3296:	0029      	movs	r1, r5
    3298:	f000 fcae 	bl	3bf8 <__aeabi_dcmpgt>
    329c:	003e      	movs	r6, r7
    329e:	e037      	b.n	3310 <__ieee754_pow+0x628>
    32a0:	000fffff 	.word	0x000fffff
    32a4:	43400000 	.word	0x43400000
    32a8:	fffffc01 	.word	0xfffffc01
    32ac:	3ff00000 	.word	0x3ff00000
    32b0:	0003988e 	.word	0x0003988e
    32b4:	000bb679 	.word	0x000bb679
    32b8:	fff00000 	.word	0xfff00000
    32bc:	4a454eef 	.word	0x4a454eef
    32c0:	3fca7e28 	.word	0x3fca7e28
    32c4:	93c9db65 	.word	0x93c9db65
    32c8:	3fcd864a 	.word	0x3fcd864a
    32cc:	a91d4101 	.word	0xa91d4101
    32d0:	3fd17460 	.word	0x3fd17460
    32d4:	518f264d 	.word	0x518f264d
    32d8:	3fd55555 	.word	0x3fd55555
    32dc:	db6fabff 	.word	0xdb6fabff
    32e0:	3fdb6db6 	.word	0x3fdb6db6
    32e4:	33333303 	.word	0x33333303
    32e8:	3fe33333 	.word	0x3fe33333
    32ec:	40080000 	.word	0x40080000
    32f0:	3feec709 	.word	0x3feec709
    32f4:	dc3a03fd 	.word	0xdc3a03fd
    32f8:	145b01f5 	.word	0x145b01f5
    32fc:	be3e2fe0 	.word	0xbe3e2fe0
    3300:	408fffff 	.word	0x408fffff
    3304:	bf700000 	.word	0xbf700000
    3308:	652b82fe 	.word	0x652b82fe
    330c:	3c971547 	.word	0x3c971547
    3310:	2800      	cmp	r0, #0
    3312:	d000      	beq.n	3316 <__ieee754_pow+0x62e>
    3314:	e18a      	b.n	362c <__ieee754_pow+0x944>
    3316:	2280      	movs	r2, #128	; 0x80
    3318:	4be7      	ldr	r3, [pc, #924]	; (36b8 <__ieee754_pow+0x9d0>)
    331a:	0352      	lsls	r2, r2, #13
    331c:	469c      	mov	ip, r3
    331e:	0013      	movs	r3, r2
    3320:	1536      	asrs	r6, r6, #20
    3322:	4466      	add	r6, ip
    3324:	4133      	asrs	r3, r6
    3326:	49e5      	ldr	r1, [pc, #916]	; (36bc <__ieee754_pow+0x9d4>)
    3328:	19db      	adds	r3, r3, r7
    332a:	005e      	lsls	r6, r3, #1
    332c:	001c      	movs	r4, r3
    332e:	031b      	lsls	r3, r3, #12
    3330:	468c      	mov	ip, r1
    3332:	0b1b      	lsrs	r3, r3, #12
    3334:	4313      	orrs	r3, r2
    3336:	2214      	movs	r2, #20
    3338:	0d76      	lsrs	r6, r6, #21
    333a:	4fe1      	ldr	r7, [pc, #900]	; (36c0 <__ieee754_pow+0x9d8>)
    333c:	4466      	add	r6, ip
    333e:	4137      	asrs	r7, r6
    3340:	1b96      	subs	r6, r2, r6
    3342:	4133      	asrs	r3, r6
    3344:	4698      	mov	r8, r3
    3346:	4653      	mov	r3, sl
    3348:	43bc      	bics	r4, r7
    334a:	2000      	movs	r0, #0
    334c:	0021      	movs	r1, r4
    334e:	2b00      	cmp	r3, #0
    3350:	da00      	bge.n	3354 <__ieee754_pow+0x66c>
    3352:	e1a9      	b.n	36a8 <__ieee754_pow+0x9c0>
    3354:	0002      	movs	r2, r0
    3356:	000b      	movs	r3, r1
    3358:	9800      	ldr	r0, [sp, #0]
    335a:	9901      	ldr	r1, [sp, #4]
    335c:	f002 fa7a 	bl	5854 <__aeabi_dsub>
    3360:	000b      	movs	r3, r1
    3362:	9000      	str	r0, [sp, #0]
    3364:	9101      	str	r1, [sp, #4]
    3366:	0002      	movs	r2, r0
    3368:	9804      	ldr	r0, [sp, #16]
    336a:	9905      	ldr	r1, [sp, #20]
    336c:	f001 f8a8 	bl	44c0 <__aeabi_dadd>
    3370:	4643      	mov	r3, r8
    3372:	051b      	lsls	r3, r3, #20
    3374:	4699      	mov	r9, r3
    3376:	2000      	movs	r0, #0
    3378:	2200      	movs	r2, #0
    337a:	4bd2      	ldr	r3, [pc, #840]	; (36c4 <__ieee754_pow+0x9dc>)
    337c:	0006      	movs	r6, r0
    337e:	000f      	movs	r7, r1
    3380:	f001 ffee 	bl	5360 <__aeabi_dmul>
    3384:	9a00      	ldr	r2, [sp, #0]
    3386:	9b01      	ldr	r3, [sp, #4]
    3388:	9002      	str	r0, [sp, #8]
    338a:	9103      	str	r1, [sp, #12]
    338c:	0030      	movs	r0, r6
    338e:	0039      	movs	r1, r7
    3390:	f002 fa60 	bl	5854 <__aeabi_dsub>
    3394:	0002      	movs	r2, r0
    3396:	000b      	movs	r3, r1
    3398:	9804      	ldr	r0, [sp, #16]
    339a:	9905      	ldr	r1, [sp, #20]
    339c:	f002 fa5a 	bl	5854 <__aeabi_dsub>
    33a0:	4ac9      	ldr	r2, [pc, #804]	; (36c8 <__ieee754_pow+0x9e0>)
    33a2:	4bca      	ldr	r3, [pc, #808]	; (36cc <__ieee754_pow+0x9e4>)
    33a4:	f001 ffdc 	bl	5360 <__aeabi_dmul>
    33a8:	4ac9      	ldr	r2, [pc, #804]	; (36d0 <__ieee754_pow+0x9e8>)
    33aa:	0004      	movs	r4, r0
    33ac:	000d      	movs	r5, r1
    33ae:	4bc9      	ldr	r3, [pc, #804]	; (36d4 <__ieee754_pow+0x9ec>)
    33b0:	0030      	movs	r0, r6
    33b2:	0039      	movs	r1, r7
    33b4:	f001 ffd4 	bl	5360 <__aeabi_dmul>
    33b8:	0002      	movs	r2, r0
    33ba:	000b      	movs	r3, r1
    33bc:	0020      	movs	r0, r4
    33be:	0029      	movs	r1, r5
    33c0:	f001 f87e 	bl	44c0 <__aeabi_dadd>
    33c4:	0004      	movs	r4, r0
    33c6:	000d      	movs	r5, r1
    33c8:	0002      	movs	r2, r0
    33ca:	000b      	movs	r3, r1
    33cc:	9802      	ldr	r0, [sp, #8]
    33ce:	9903      	ldr	r1, [sp, #12]
    33d0:	f001 f876 	bl	44c0 <__aeabi_dadd>
    33d4:	9a02      	ldr	r2, [sp, #8]
    33d6:	9b03      	ldr	r3, [sp, #12]
    33d8:	0006      	movs	r6, r0
    33da:	000f      	movs	r7, r1
    33dc:	f002 fa3a 	bl	5854 <__aeabi_dsub>
    33e0:	0002      	movs	r2, r0
    33e2:	000b      	movs	r3, r1
    33e4:	0020      	movs	r0, r4
    33e6:	0029      	movs	r1, r5
    33e8:	f002 fa34 	bl	5854 <__aeabi_dsub>
    33ec:	0032      	movs	r2, r6
    33ee:	9000      	str	r0, [sp, #0]
    33f0:	9101      	str	r1, [sp, #4]
    33f2:	003b      	movs	r3, r7
    33f4:	0030      	movs	r0, r6
    33f6:	0039      	movs	r1, r7
    33f8:	f001 ffb2 	bl	5360 <__aeabi_dmul>
    33fc:	0004      	movs	r4, r0
    33fe:	000d      	movs	r5, r1
    3400:	4ab5      	ldr	r2, [pc, #724]	; (36d8 <__ieee754_pow+0x9f0>)
    3402:	4bb6      	ldr	r3, [pc, #728]	; (36dc <__ieee754_pow+0x9f4>)
    3404:	f001 ffac 	bl	5360 <__aeabi_dmul>
    3408:	4ab5      	ldr	r2, [pc, #724]	; (36e0 <__ieee754_pow+0x9f8>)
    340a:	4bb6      	ldr	r3, [pc, #728]	; (36e4 <__ieee754_pow+0x9fc>)
    340c:	f002 fa22 	bl	5854 <__aeabi_dsub>
    3410:	0022      	movs	r2, r4
    3412:	002b      	movs	r3, r5
    3414:	f001 ffa4 	bl	5360 <__aeabi_dmul>
    3418:	4ab3      	ldr	r2, [pc, #716]	; (36e8 <__ieee754_pow+0xa00>)
    341a:	4bb4      	ldr	r3, [pc, #720]	; (36ec <__ieee754_pow+0xa04>)
    341c:	f001 f850 	bl	44c0 <__aeabi_dadd>
    3420:	0022      	movs	r2, r4
    3422:	002b      	movs	r3, r5
    3424:	f001 ff9c 	bl	5360 <__aeabi_dmul>
    3428:	4ab1      	ldr	r2, [pc, #708]	; (36f0 <__ieee754_pow+0xa08>)
    342a:	4bb2      	ldr	r3, [pc, #712]	; (36f4 <__ieee754_pow+0xa0c>)
    342c:	f002 fa12 	bl	5854 <__aeabi_dsub>
    3430:	0022      	movs	r2, r4
    3432:	002b      	movs	r3, r5
    3434:	f001 ff94 	bl	5360 <__aeabi_dmul>
    3438:	4aaf      	ldr	r2, [pc, #700]	; (36f8 <__ieee754_pow+0xa10>)
    343a:	4bb0      	ldr	r3, [pc, #704]	; (36fc <__ieee754_pow+0xa14>)
    343c:	f001 f840 	bl	44c0 <__aeabi_dadd>
    3440:	0022      	movs	r2, r4
    3442:	002b      	movs	r3, r5
    3444:	f001 ff8c 	bl	5360 <__aeabi_dmul>
    3448:	0002      	movs	r2, r0
    344a:	000b      	movs	r3, r1
    344c:	0030      	movs	r0, r6
    344e:	0039      	movs	r1, r7
    3450:	f002 fa00 	bl	5854 <__aeabi_dsub>
    3454:	0004      	movs	r4, r0
    3456:	000d      	movs	r5, r1
    3458:	0002      	movs	r2, r0
    345a:	000b      	movs	r3, r1
    345c:	0030      	movs	r0, r6
    345e:	0039      	movs	r1, r7
    3460:	f001 ff7e 	bl	5360 <__aeabi_dmul>
    3464:	2380      	movs	r3, #128	; 0x80
    3466:	9002      	str	r0, [sp, #8]
    3468:	9103      	str	r1, [sp, #12]
    346a:	2200      	movs	r2, #0
    346c:	05db      	lsls	r3, r3, #23
    346e:	0020      	movs	r0, r4
    3470:	0029      	movs	r1, r5
    3472:	f002 f9ef 	bl	5854 <__aeabi_dsub>
    3476:	0002      	movs	r2, r0
    3478:	000b      	movs	r3, r1
    347a:	9802      	ldr	r0, [sp, #8]
    347c:	9903      	ldr	r1, [sp, #12]
    347e:	f001 fb4b 	bl	4b18 <__aeabi_ddiv>
    3482:	9a00      	ldr	r2, [sp, #0]
    3484:	9b01      	ldr	r3, [sp, #4]
    3486:	0004      	movs	r4, r0
    3488:	000d      	movs	r5, r1
    348a:	0030      	movs	r0, r6
    348c:	0039      	movs	r1, r7
    348e:	f001 ff67 	bl	5360 <__aeabi_dmul>
    3492:	9a00      	ldr	r2, [sp, #0]
    3494:	9b01      	ldr	r3, [sp, #4]
    3496:	f001 f813 	bl	44c0 <__aeabi_dadd>
    349a:	0002      	movs	r2, r0
    349c:	000b      	movs	r3, r1
    349e:	0020      	movs	r0, r4
    34a0:	0029      	movs	r1, r5
    34a2:	f002 f9d7 	bl	5854 <__aeabi_dsub>
    34a6:	0032      	movs	r2, r6
    34a8:	003b      	movs	r3, r7
    34aa:	f002 f9d3 	bl	5854 <__aeabi_dsub>
    34ae:	0002      	movs	r2, r0
    34b0:	000b      	movs	r3, r1
    34b2:	2000      	movs	r0, #0
    34b4:	4992      	ldr	r1, [pc, #584]	; (3700 <__ieee754_pow+0xa18>)
    34b6:	f002 f9cd 	bl	5854 <__aeabi_dsub>
    34ba:	464b      	mov	r3, r9
    34bc:	185b      	adds	r3, r3, r1
    34be:	151a      	asrs	r2, r3, #20
    34c0:	2a00      	cmp	r2, #0
    34c2:	dc00      	bgt.n	34c6 <__ieee754_pow+0x7de>
    34c4:	e0f4      	b.n	36b0 <__ieee754_pow+0x9c8>
    34c6:	0019      	movs	r1, r3
    34c8:	9a06      	ldr	r2, [sp, #24]
    34ca:	9b07      	ldr	r3, [sp, #28]
    34cc:	f001 ff48 	bl	5360 <__aeabi_dmul>
    34d0:	0006      	movs	r6, r0
    34d2:	e452      	b.n	2d7a <__ieee754_pow+0x92>
    34d4:	0032      	movs	r2, r6
    34d6:	0030      	movs	r0, r6
    34d8:	002b      	movs	r3, r5
    34da:	0029      	movs	r1, r5
    34dc:	f001 ff40 	bl	5360 <__aeabi_dmul>
    34e0:	0006      	movs	r6, r0
    34e2:	e44a      	b.n	2d7a <__ieee754_pow+0x92>
    34e4:	4b87      	ldr	r3, [pc, #540]	; (3704 <__ieee754_pow+0xa1c>)
    34e6:	004e      	lsls	r6, r1, #1
    34e8:	0876      	lsrs	r6, r6, #1
    34ea:	429e      	cmp	r6, r3
    34ec:	dc00      	bgt.n	34f0 <__ieee754_pow+0x808>
    34ee:	e0bf      	b.n	3670 <__ieee754_pow+0x988>
    34f0:	4b85      	ldr	r3, [pc, #532]	; (3708 <__ieee754_pow+0xa20>)
    34f2:	18cb      	adds	r3, r1, r3
    34f4:	4303      	orrs	r3, r0
    34f6:	d10c      	bne.n	3512 <__ieee754_pow+0x82a>
    34f8:	9a00      	ldr	r2, [sp, #0]
    34fa:	9b01      	ldr	r3, [sp, #4]
    34fc:	f002 f9aa 	bl	5854 <__aeabi_dsub>
    3500:	0002      	movs	r2, r0
    3502:	000b      	movs	r3, r1
    3504:	9804      	ldr	r0, [sp, #16]
    3506:	9905      	ldr	r1, [sp, #20]
    3508:	f000 fb6c 	bl	3be4 <__aeabi_dcmple>
    350c:	2800      	cmp	r0, #0
    350e:	d100      	bne.n	3512 <__ieee754_pow+0x82a>
    3510:	e701      	b.n	3316 <__ieee754_pow+0x62e>
    3512:	9806      	ldr	r0, [sp, #24]
    3514:	9907      	ldr	r1, [sp, #28]
    3516:	4a7d      	ldr	r2, [pc, #500]	; (370c <__ieee754_pow+0xa24>)
    3518:	4b7d      	ldr	r3, [pc, #500]	; (3710 <__ieee754_pow+0xa28>)
    351a:	f001 ff21 	bl	5360 <__aeabi_dmul>
    351e:	4a7b      	ldr	r2, [pc, #492]	; (370c <__ieee754_pow+0xa24>)
    3520:	4b7b      	ldr	r3, [pc, #492]	; (3710 <__ieee754_pow+0xa28>)
    3522:	f001 ff1d 	bl	5360 <__aeabi_dmul>
    3526:	0006      	movs	r6, r0
    3528:	f7ff fc27 	bl	2d7a <__ieee754_pow+0x92>
    352c:	2300      	movs	r3, #0
    352e:	4c79      	ldr	r4, [pc, #484]	; (3714 <__ieee754_pow+0xa2c>)
    3530:	9306      	str	r3, [sp, #24]
    3532:	9407      	str	r4, [sp, #28]
    3534:	e666      	b.n	3204 <__ieee754_pow+0x51c>
    3536:	4653      	mov	r3, sl
    3538:	2b00      	cmp	r3, #0
    353a:	db00      	blt.n	353e <__ieee754_pow+0x856>
    353c:	e4c3      	b.n	2ec6 <__ieee754_pow+0x1de>
    353e:	9b00      	ldr	r3, [sp, #0]
    3540:	9c01      	ldr	r4, [sp, #4]
    3542:	2280      	movs	r2, #128	; 0x80
    3544:	0612      	lsls	r2, r2, #24
    3546:	001e      	movs	r6, r3
    3548:	4694      	mov	ip, r2
    354a:	0023      	movs	r3, r4
    354c:	4463      	add	r3, ip
    354e:	0019      	movs	r1, r3
    3550:	f7ff fc13 	bl	2d7a <__ieee754_pow+0x92>
    3554:	0002      	movs	r2, r0
    3556:	000b      	movs	r3, r1
    3558:	2000      	movs	r0, #0
    355a:	4969      	ldr	r1, [pc, #420]	; (3700 <__ieee754_pow+0xa18>)
    355c:	f001 fadc 	bl	4b18 <__aeabi_ddiv>
    3560:	e44a      	b.n	2df8 <__ieee754_pow+0x110>
    3562:	4b6d      	ldr	r3, [pc, #436]	; (3718 <__ieee754_pow+0xa30>)
    3564:	429c      	cmp	r4, r3
    3566:	dc00      	bgt.n	356a <__ieee754_pow+0x882>
    3568:	e4aa      	b.n	2ec0 <__ieee754_pow+0x1d8>
    356a:	4b65      	ldr	r3, [pc, #404]	; (3700 <__ieee754_pow+0xa18>)
    356c:	429c      	cmp	r4, r3
    356e:	dd01      	ble.n	3574 <__ieee754_pow+0x88c>
    3570:	f7ff fc2c 	bl	2dcc <__ieee754_pow+0xe4>
    3574:	2200      	movs	r2, #0
    3576:	4b62      	ldr	r3, [pc, #392]	; (3700 <__ieee754_pow+0xa18>)
    3578:	f002 f96c 	bl	5854 <__aeabi_dsub>
    357c:	22c0      	movs	r2, #192	; 0xc0
    357e:	4b67      	ldr	r3, [pc, #412]	; (371c <__ieee754_pow+0xa34>)
    3580:	05d2      	lsls	r2, r2, #23
    3582:	0004      	movs	r4, r0
    3584:	000d      	movs	r5, r1
    3586:	f001 feeb 	bl	5360 <__aeabi_dmul>
    358a:	4a65      	ldr	r2, [pc, #404]	; (3720 <__ieee754_pow+0xa38>)
    358c:	0006      	movs	r6, r0
    358e:	000f      	movs	r7, r1
    3590:	4b64      	ldr	r3, [pc, #400]	; (3724 <__ieee754_pow+0xa3c>)
    3592:	0020      	movs	r0, r4
    3594:	0029      	movs	r1, r5
    3596:	f001 fee3 	bl	5360 <__aeabi_dmul>
    359a:	2200      	movs	r2, #0
    359c:	9002      	str	r0, [sp, #8]
    359e:	9103      	str	r1, [sp, #12]
    35a0:	4b61      	ldr	r3, [pc, #388]	; (3728 <__ieee754_pow+0xa40>)
    35a2:	0020      	movs	r0, r4
    35a4:	0029      	movs	r1, r5
    35a6:	f001 fedb 	bl	5360 <__aeabi_dmul>
    35aa:	0002      	movs	r2, r0
    35ac:	000b      	movs	r3, r1
    35ae:	485f      	ldr	r0, [pc, #380]	; (372c <__ieee754_pow+0xa44>)
    35b0:	495f      	ldr	r1, [pc, #380]	; (3730 <__ieee754_pow+0xa48>)
    35b2:	f002 f94f 	bl	5854 <__aeabi_dsub>
    35b6:	0022      	movs	r2, r4
    35b8:	002b      	movs	r3, r5
    35ba:	f001 fed1 	bl	5360 <__aeabi_dmul>
    35be:	0002      	movs	r2, r0
    35c0:	000b      	movs	r3, r1
    35c2:	2000      	movs	r0, #0
    35c4:	495b      	ldr	r1, [pc, #364]	; (3734 <__ieee754_pow+0xa4c>)
    35c6:	f002 f945 	bl	5854 <__aeabi_dsub>
    35ca:	0022      	movs	r2, r4
    35cc:	9004      	str	r0, [sp, #16]
    35ce:	9105      	str	r1, [sp, #20]
    35d0:	002b      	movs	r3, r5
    35d2:	0020      	movs	r0, r4
    35d4:	0029      	movs	r1, r5
    35d6:	f001 fec3 	bl	5360 <__aeabi_dmul>
    35da:	0002      	movs	r2, r0
    35dc:	000b      	movs	r3, r1
    35de:	9804      	ldr	r0, [sp, #16]
    35e0:	9905      	ldr	r1, [sp, #20]
    35e2:	f001 febd 	bl	5360 <__aeabi_dmul>
    35e6:	4a54      	ldr	r2, [pc, #336]	; (3738 <__ieee754_pow+0xa50>)
    35e8:	4b4c      	ldr	r3, [pc, #304]	; (371c <__ieee754_pow+0xa34>)
    35ea:	f001 feb9 	bl	5360 <__aeabi_dmul>
    35ee:	0002      	movs	r2, r0
    35f0:	000b      	movs	r3, r1
    35f2:	9802      	ldr	r0, [sp, #8]
    35f4:	9903      	ldr	r1, [sp, #12]
    35f6:	f002 f92d 	bl	5854 <__aeabi_dsub>
    35fa:	0002      	movs	r2, r0
    35fc:	000b      	movs	r3, r1
    35fe:	0004      	movs	r4, r0
    3600:	000d      	movs	r5, r1
    3602:	0030      	movs	r0, r6
    3604:	0039      	movs	r1, r7
    3606:	f000 ff5b 	bl	44c0 <__aeabi_dadd>
    360a:	2200      	movs	r2, #0
    360c:	0010      	movs	r0, r2
    360e:	003b      	movs	r3, r7
    3610:	0032      	movs	r2, r6
    3612:	9002      	str	r0, [sp, #8]
    3614:	9103      	str	r1, [sp, #12]
    3616:	f002 f91d 	bl	5854 <__aeabi_dsub>
    361a:	0002      	movs	r2, r0
    361c:	000b      	movs	r3, r1
    361e:	0020      	movs	r0, r4
    3620:	0029      	movs	r1, r5
    3622:	f002 f917 	bl	5854 <__aeabi_dsub>
    3626:	9004      	str	r0, [sp, #16]
    3628:	9105      	str	r1, [sp, #20]
    362a:	e5e1      	b.n	31f0 <__ieee754_pow+0x508>
    362c:	4a43      	ldr	r2, [pc, #268]	; (373c <__ieee754_pow+0xa54>)
    362e:	4b44      	ldr	r3, [pc, #272]	; (3740 <__ieee754_pow+0xa58>)
    3630:	9806      	ldr	r0, [sp, #24]
    3632:	9907      	ldr	r1, [sp, #28]
    3634:	f001 fe94 	bl	5360 <__aeabi_dmul>
    3638:	4a40      	ldr	r2, [pc, #256]	; (373c <__ieee754_pow+0xa54>)
    363a:	4b41      	ldr	r3, [pc, #260]	; (3740 <__ieee754_pow+0xa58>)
    363c:	f001 fe90 	bl	5360 <__aeabi_dmul>
    3640:	0006      	movs	r6, r0
    3642:	f7ff fb9a 	bl	2d7a <__ieee754_pow+0x92>
    3646:	2a00      	cmp	r2, #0
    3648:	d001      	beq.n	364e <__ieee754_pow+0x966>
    364a:	f7ff fba5 	bl	2d98 <__ieee754_pow+0xb0>
    364e:	3214      	adds	r2, #20
    3650:	1ad3      	subs	r3, r2, r3
    3652:	003a      	movs	r2, r7
    3654:	411a      	asrs	r2, r3
    3656:	0011      	movs	r1, r2
    3658:	4099      	lsls	r1, r3
    365a:	428f      	cmp	r7, r1
    365c:	d001      	beq.n	3662 <__ieee754_pow+0x97a>
    365e:	f7ff fb6f 	bl	2d40 <__ieee754_pow+0x58>
    3662:	2301      	movs	r3, #1
    3664:	4013      	ands	r3, r2
    3666:	2202      	movs	r2, #2
    3668:	1ad3      	subs	r3, r2, r3
    366a:	469b      	mov	fp, r3
    366c:	f7ff fb68 	bl	2d40 <__ieee754_pow+0x58>
    3670:	4b30      	ldr	r3, [pc, #192]	; (3734 <__ieee754_pow+0xa4c>)
    3672:	429e      	cmp	r6, r3
    3674:	dd00      	ble.n	3678 <__ieee754_pow+0x990>
    3676:	e64e      	b.n	3316 <__ieee754_pow+0x62e>
    3678:	2300      	movs	r3, #0
    367a:	4699      	mov	r9, r3
    367c:	4698      	mov	r8, r3
    367e:	e67a      	b.n	3376 <__ieee754_pow+0x68e>
    3680:	0002      	movs	r2, r0
    3682:	000b      	movs	r3, r1
    3684:	f7ff fc14 	bl	2eb0 <__ieee754_pow+0x1c8>
    3688:	2380      	movs	r3, #128	; 0x80
    368a:	4c2e      	ldr	r4, [pc, #184]	; (3744 <__ieee754_pow+0xa5c>)
    368c:	05db      	lsls	r3, r3, #23
    368e:	9308      	str	r3, [sp, #32]
    3690:	9409      	str	r4, [sp, #36]	; 0x24
    3692:	4b2d      	ldr	r3, [pc, #180]	; (3748 <__ieee754_pow+0xa60>)
    3694:	4c2d      	ldr	r4, [pc, #180]	; (374c <__ieee754_pow+0xa64>)
    3696:	2200      	movs	r2, #0
    3698:	930c      	str	r3, [sp, #48]	; 0x30
    369a:	940d      	str	r4, [sp, #52]	; 0x34
    369c:	2480      	movs	r4, #128	; 0x80
    369e:	4b2c      	ldr	r3, [pc, #176]	; (3750 <__ieee754_pow+0xa68>)
    36a0:	02e4      	lsls	r4, r4, #11
    36a2:	9206      	str	r2, [sp, #24]
    36a4:	9307      	str	r3, [sp, #28]
    36a6:	e456      	b.n	2f56 <__ieee754_pow+0x26e>
    36a8:	4643      	mov	r3, r8
    36aa:	425b      	negs	r3, r3
    36ac:	4698      	mov	r8, r3
    36ae:	e651      	b.n	3354 <__ieee754_pow+0x66c>
    36b0:	4642      	mov	r2, r8
    36b2:	f000 f9fd 	bl	3ab0 <scalbn>
    36b6:	e707      	b.n	34c8 <__ieee754_pow+0x7e0>
    36b8:	fffffc02 	.word	0xfffffc02
    36bc:	fffffc01 	.word	0xfffffc01
    36c0:	000fffff 	.word	0x000fffff
    36c4:	3fe62e43 	.word	0x3fe62e43
    36c8:	fefa39ef 	.word	0xfefa39ef
    36cc:	3fe62e42 	.word	0x3fe62e42
    36d0:	0ca86c39 	.word	0x0ca86c39
    36d4:	be205c61 	.word	0xbe205c61
    36d8:	72bea4d0 	.word	0x72bea4d0
    36dc:	3e663769 	.word	0x3e663769
    36e0:	c5d26bf1 	.word	0xc5d26bf1
    36e4:	3ebbbd41 	.word	0x3ebbbd41
    36e8:	af25de2c 	.word	0xaf25de2c
    36ec:	3f11566a 	.word	0x3f11566a
    36f0:	16bebd93 	.word	0x16bebd93
    36f4:	3f66c16c 	.word	0x3f66c16c
    36f8:	5555553e 	.word	0x5555553e
    36fc:	3fc55555 	.word	0x3fc55555
    3700:	3ff00000 	.word	0x3ff00000
    3704:	4090cbff 	.word	0x4090cbff
    3708:	3f6f3400 	.word	0x3f6f3400
    370c:	c2f8f359 	.word	0xc2f8f359
    3710:	01a56e1f 	.word	0x01a56e1f
    3714:	bff00000 	.word	0xbff00000
    3718:	3feffffe 	.word	0x3feffffe
    371c:	3ff71547 	.word	0x3ff71547
    3720:	f85ddf44 	.word	0xf85ddf44
    3724:	3e54ae0b 	.word	0x3e54ae0b
    3728:	3fd00000 	.word	0x3fd00000
    372c:	55555555 	.word	0x55555555
    3730:	3fd55555 	.word	0x3fd55555
    3734:	3fe00000 	.word	0x3fe00000
    3738:	652b82fe 	.word	0x652b82fe
    373c:	8800759c 	.word	0x8800759c
    3740:	7e37e43c 	.word	0x7e37e43c
    3744:	3fe2b803 	.word	0x3fe2b803
    3748:	43cfd006 	.word	0x43cfd006
    374c:	3e4cfdeb 	.word	0x3e4cfdeb
    3750:	3ff80000 	.word	0x3ff80000

00003754 <__ieee754_sqrt>:
    3754:	b5f0      	push	{r4, r5, r6, r7, lr}
    3756:	4656      	mov	r6, sl
    3758:	464d      	mov	r5, r9
    375a:	4644      	mov	r4, r8
    375c:	465f      	mov	r7, fp
    375e:	4b75      	ldr	r3, [pc, #468]	; (3934 <__ieee754_sqrt+0x1e0>)
    3760:	b4f0      	push	{r4, r5, r6, r7}
    3762:	000a      	movs	r2, r1
    3764:	000d      	movs	r5, r1
    3766:	0019      	movs	r1, r3
    3768:	b083      	sub	sp, #12
    376a:	0006      	movs	r6, r0
    376c:	0004      	movs	r4, r0
    376e:	4029      	ands	r1, r5
    3770:	4299      	cmp	r1, r3
    3772:	d100      	bne.n	3776 <__ieee754_sqrt+0x22>
    3774:	e0ba      	b.n	38ec <__ieee754_sqrt+0x198>
    3776:	2d00      	cmp	r5, #0
    3778:	dc00      	bgt.n	377c <__ieee754_sqrt+0x28>
    377a:	e094      	b.n	38a6 <__ieee754_sqrt+0x152>
    377c:	152d      	asrs	r5, r5, #20
    377e:	d100      	bne.n	3782 <__ieee754_sqrt+0x2e>
    3780:	e0a3      	b.n	38ca <__ieee754_sqrt+0x176>
    3782:	4b6d      	ldr	r3, [pc, #436]	; (3938 <__ieee754_sqrt+0x1e4>)
    3784:	0312      	lsls	r2, r2, #12
    3786:	469c      	mov	ip, r3
    3788:	2380      	movs	r3, #128	; 0x80
    378a:	0b12      	lsrs	r2, r2, #12
    378c:	035b      	lsls	r3, r3, #13
    378e:	4465      	add	r5, ip
    3790:	431a      	orrs	r2, r3
    3792:	07eb      	lsls	r3, r5, #31
    3794:	d500      	bpl.n	3798 <__ieee754_sqrt+0x44>
    3796:	e081      	b.n	389c <__ieee754_sqrt+0x148>
    3798:	106b      	asrs	r3, r5, #1
    379a:	4698      	mov	r8, r3
    379c:	0fe3      	lsrs	r3, r4, #31
    379e:	189b      	adds	r3, r3, r2
    37a0:	189b      	adds	r3, r3, r2
    37a2:	2280      	movs	r2, #128	; 0x80
    37a4:	2116      	movs	r1, #22
    37a6:	2600      	movs	r6, #0
    37a8:	2700      	movs	r7, #0
    37aa:	0064      	lsls	r4, r4, #1
    37ac:	0392      	lsls	r2, r2, #14
    37ae:	18b8      	adds	r0, r7, r2
    37b0:	4298      	cmp	r0, r3
    37b2:	dc02      	bgt.n	37ba <__ieee754_sqrt+0x66>
    37b4:	1887      	adds	r7, r0, r2
    37b6:	1a1b      	subs	r3, r3, r0
    37b8:	18b6      	adds	r6, r6, r2
    37ba:	0fe0      	lsrs	r0, r4, #31
    37bc:	005b      	lsls	r3, r3, #1
    37be:	3901      	subs	r1, #1
    37c0:	181b      	adds	r3, r3, r0
    37c2:	0064      	lsls	r4, r4, #1
    37c4:	0852      	lsrs	r2, r2, #1
    37c6:	2900      	cmp	r1, #0
    37c8:	d1f1      	bne.n	37ae <__ieee754_sqrt+0x5a>
    37ca:	2200      	movs	r2, #0
    37cc:	9201      	str	r2, [sp, #4]
    37ce:	4694      	mov	ip, r2
    37d0:	2280      	movs	r2, #128	; 0x80
    37d2:	0612      	lsls	r2, r2, #24
    37d4:	2020      	movs	r0, #32
    37d6:	4691      	mov	r9, r2
    37d8:	e009      	b.n	37ee <__ieee754_sqrt+0x9a>
    37da:	429f      	cmp	r7, r3
    37dc:	d041      	beq.n	3862 <__ieee754_sqrt+0x10e>
    37de:	0fe1      	lsrs	r1, r4, #31
    37e0:	18c9      	adds	r1, r1, r3
    37e2:	3801      	subs	r0, #1
    37e4:	18cb      	adds	r3, r1, r3
    37e6:	0064      	lsls	r4, r4, #1
    37e8:	0852      	lsrs	r2, r2, #1
    37ea:	2800      	cmp	r0, #0
    37ec:	d01e      	beq.n	382c <__ieee754_sqrt+0xd8>
    37ee:	4661      	mov	r1, ip
    37f0:	1851      	adds	r1, r2, r1
    37f2:	429f      	cmp	r7, r3
    37f4:	daf1      	bge.n	37da <__ieee754_sqrt+0x86>
    37f6:	188d      	adds	r5, r1, r2
    37f8:	46ac      	mov	ip, r5
    37fa:	0fcd      	lsrs	r5, r1, #31
    37fc:	07ed      	lsls	r5, r5, #31
    37fe:	46ba      	mov	sl, r7
    3800:	454d      	cmp	r5, r9
    3802:	d039      	beq.n	3878 <__ieee754_sqrt+0x124>
    3804:	1bdb      	subs	r3, r3, r7
    3806:	428c      	cmp	r4, r1
    3808:	41bf      	sbcs	r7, r7
    380a:	427f      	negs	r7, r7
    380c:	1bdb      	subs	r3, r3, r7
    380e:	1a64      	subs	r4, r4, r1
    3810:	9901      	ldr	r1, [sp, #4]
    3812:	3801      	subs	r0, #1
    3814:	468b      	mov	fp, r1
    3816:	4493      	add	fp, r2
    3818:	4659      	mov	r1, fp
    381a:	9101      	str	r1, [sp, #4]
    381c:	0fe1      	lsrs	r1, r4, #31
    381e:	18c9      	adds	r1, r1, r3
    3820:	4657      	mov	r7, sl
    3822:	18cb      	adds	r3, r1, r3
    3824:	0064      	lsls	r4, r4, #1
    3826:	0852      	lsrs	r2, r2, #1
    3828:	2800      	cmp	r0, #0
    382a:	d1e0      	bne.n	37ee <__ieee754_sqrt+0x9a>
    382c:	4323      	orrs	r3, r4
    382e:	d12b      	bne.n	3888 <__ieee754_sqrt+0x134>
    3830:	9b01      	ldr	r3, [sp, #4]
    3832:	085b      	lsrs	r3, r3, #1
    3834:	4941      	ldr	r1, [pc, #260]	; (393c <__ieee754_sqrt+0x1e8>)
    3836:	1072      	asrs	r2, r6, #1
    3838:	468c      	mov	ip, r1
    383a:	4462      	add	r2, ip
    383c:	07f1      	lsls	r1, r6, #31
    383e:	d502      	bpl.n	3846 <__ieee754_sqrt+0xf2>
    3840:	2180      	movs	r1, #128	; 0x80
    3842:	0609      	lsls	r1, r1, #24
    3844:	430b      	orrs	r3, r1
    3846:	4641      	mov	r1, r8
    3848:	0509      	lsls	r1, r1, #20
    384a:	188d      	adds	r5, r1, r2
    384c:	001e      	movs	r6, r3
    384e:	002f      	movs	r7, r5
    3850:	0030      	movs	r0, r6
    3852:	0039      	movs	r1, r7
    3854:	b003      	add	sp, #12
    3856:	bc3c      	pop	{r2, r3, r4, r5}
    3858:	4690      	mov	r8, r2
    385a:	4699      	mov	r9, r3
    385c:	46a2      	mov	sl, r4
    385e:	46ab      	mov	fp, r5
    3860:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3862:	42a1      	cmp	r1, r4
    3864:	d80e      	bhi.n	3884 <__ieee754_sqrt+0x130>
    3866:	188d      	adds	r5, r1, r2
    3868:	46ac      	mov	ip, r5
    386a:	0fcd      	lsrs	r5, r1, #31
    386c:	07ed      	lsls	r5, r5, #31
    386e:	454d      	cmp	r5, r9
    3870:	d048      	beq.n	3904 <__ieee754_sqrt+0x1b0>
    3872:	469a      	mov	sl, r3
    3874:	2300      	movs	r3, #0
    3876:	e7ca      	b.n	380e <__ieee754_sqrt+0xba>
    3878:	4665      	mov	r5, ip
    387a:	2d00      	cmp	r5, #0
    387c:	dbc2      	blt.n	3804 <__ieee754_sqrt+0xb0>
    387e:	1c7d      	adds	r5, r7, #1
    3880:	46aa      	mov	sl, r5
    3882:	e7bf      	b.n	3804 <__ieee754_sqrt+0xb0>
    3884:	003b      	movs	r3, r7
    3886:	e7aa      	b.n	37de <__ieee754_sqrt+0x8a>
    3888:	9b01      	ldr	r3, [sp, #4]
    388a:	3301      	adds	r3, #1
    388c:	d03e      	beq.n	390c <__ieee754_sqrt+0x1b8>
    388e:	9a01      	ldr	r2, [sp, #4]
    3890:	2301      	movs	r3, #1
    3892:	4694      	mov	ip, r2
    3894:	4013      	ands	r3, r2
    3896:	4463      	add	r3, ip
    3898:	085b      	lsrs	r3, r3, #1
    389a:	e7cb      	b.n	3834 <__ieee754_sqrt+0xe0>
    389c:	0fe3      	lsrs	r3, r4, #31
    389e:	0052      	lsls	r2, r2, #1
    38a0:	189a      	adds	r2, r3, r2
    38a2:	0064      	lsls	r4, r4, #1
    38a4:	e778      	b.n	3798 <__ieee754_sqrt+0x44>
    38a6:	006b      	lsls	r3, r5, #1
    38a8:	085b      	lsrs	r3, r3, #1
    38aa:	4303      	orrs	r3, r0
    38ac:	002f      	movs	r7, r5
    38ae:	2b00      	cmp	r3, #0
    38b0:	d0ce      	beq.n	3850 <__ieee754_sqrt+0xfc>
    38b2:	2500      	movs	r5, #0
    38b4:	2a00      	cmp	r2, #0
    38b6:	d131      	bne.n	391c <__ieee754_sqrt+0x1c8>
    38b8:	0ae2      	lsrs	r2, r4, #11
    38ba:	3d15      	subs	r5, #21
    38bc:	0564      	lsls	r4, r4, #21
    38be:	2a00      	cmp	r2, #0
    38c0:	d0fa      	beq.n	38b8 <__ieee754_sqrt+0x164>
    38c2:	2380      	movs	r3, #128	; 0x80
    38c4:	035b      	lsls	r3, r3, #13
    38c6:	421a      	tst	r2, r3
    38c8:	d123      	bne.n	3912 <__ieee754_sqrt+0x1be>
    38ca:	2080      	movs	r0, #128	; 0x80
    38cc:	2300      	movs	r3, #0
    38ce:	0340      	lsls	r0, r0, #13
    38d0:	e000      	b.n	38d4 <__ieee754_sqrt+0x180>
    38d2:	000b      	movs	r3, r1
    38d4:	0052      	lsls	r2, r2, #1
    38d6:	1c59      	adds	r1, r3, #1
    38d8:	4202      	tst	r2, r0
    38da:	d0fa      	beq.n	38d2 <__ieee754_sqrt+0x17e>
    38dc:	2020      	movs	r0, #32
    38de:	1a40      	subs	r0, r0, r1
    38e0:	1aed      	subs	r5, r5, r3
    38e2:	0023      	movs	r3, r4
    38e4:	40c3      	lsrs	r3, r0
    38e6:	408c      	lsls	r4, r1
    38e8:	431a      	orrs	r2, r3
    38ea:	e74a      	b.n	3782 <__ieee754_sqrt+0x2e>
    38ec:	0002      	movs	r2, r0
    38ee:	002b      	movs	r3, r5
    38f0:	0029      	movs	r1, r5
    38f2:	f001 fd35 	bl	5360 <__aeabi_dmul>
    38f6:	0032      	movs	r2, r6
    38f8:	002b      	movs	r3, r5
    38fa:	f000 fde1 	bl	44c0 <__aeabi_dadd>
    38fe:	0006      	movs	r6, r0
    3900:	000f      	movs	r7, r1
    3902:	e7a5      	b.n	3850 <__ieee754_sqrt+0xfc>
    3904:	4665      	mov	r5, ip
    3906:	2d00      	cmp	r5, #0
    3908:	dab9      	bge.n	387e <__ieee754_sqrt+0x12a>
    390a:	e7b2      	b.n	3872 <__ieee754_sqrt+0x11e>
    390c:	3601      	adds	r6, #1
    390e:	2300      	movs	r3, #0
    3910:	e790      	b.n	3834 <__ieee754_sqrt+0xe0>
    3912:	2301      	movs	r3, #1
    3914:	2020      	movs	r0, #32
    3916:	425b      	negs	r3, r3
    3918:	2100      	movs	r1, #0
    391a:	e7e1      	b.n	38e0 <__ieee754_sqrt+0x18c>
    391c:	003b      	movs	r3, r7
    391e:	0002      	movs	r2, r0
    3920:	0039      	movs	r1, r7
    3922:	f001 ff97 	bl	5854 <__aeabi_dsub>
    3926:	0002      	movs	r2, r0
    3928:	000b      	movs	r3, r1
    392a:	f001 f8f5 	bl	4b18 <__aeabi_ddiv>
    392e:	0006      	movs	r6, r0
    3930:	000f      	movs	r7, r1
    3932:	e78d      	b.n	3850 <__ieee754_sqrt+0xfc>
    3934:	7ff00000 	.word	0x7ff00000
    3938:	fffffc01 	.word	0xfffffc01
    393c:	3fe00000 	.word	0x3fe00000

00003940 <fabs>:
    3940:	0049      	lsls	r1, r1, #1
    3942:	084b      	lsrs	r3, r1, #1
    3944:	0019      	movs	r1, r3
    3946:	4770      	bx	lr

00003948 <finite>:
    3948:	4b03      	ldr	r3, [pc, #12]	; (3958 <finite+0x10>)
    394a:	0048      	lsls	r0, r1, #1
    394c:	469c      	mov	ip, r3
    394e:	0840      	lsrs	r0, r0, #1
    3950:	4460      	add	r0, ip
    3952:	0fc0      	lsrs	r0, r0, #31
    3954:	4770      	bx	lr
    3956:	46c0      	nop			; (mov r8, r8)
    3958:	80100000 	.word	0x80100000

0000395c <matherr>:
    395c:	2000      	movs	r0, #0
    395e:	4770      	bx	lr

00003960 <nan>:
    3960:	2000      	movs	r0, #0
    3962:	4901      	ldr	r1, [pc, #4]	; (3968 <nan+0x8>)
    3964:	4770      	bx	lr
    3966:	46c0      	nop			; (mov r8, r8)
    3968:	7ff80000 	.word	0x7ff80000

0000396c <rint>:
    396c:	b5f0      	push	{r4, r5, r6, r7, lr}
    396e:	4647      	mov	r7, r8
    3970:	b480      	push	{r7}
    3972:	0fcb      	lsrs	r3, r1, #31
    3974:	4698      	mov	r8, r3
    3976:	4c4a      	ldr	r4, [pc, #296]	; (3aa0 <rint+0x134>)
    3978:	004b      	lsls	r3, r1, #1
    397a:	0d5b      	lsrs	r3, r3, #21
    397c:	191e      	adds	r6, r3, r4
    397e:	b082      	sub	sp, #8
    3980:	0007      	movs	r7, r0
    3982:	000a      	movs	r2, r1
    3984:	2e13      	cmp	r6, #19
    3986:	dc35      	bgt.n	39f4 <rint+0x88>
    3988:	2e00      	cmp	r6, #0
    398a:	db57      	blt.n	3a3c <rint+0xd0>
    398c:	4b45      	ldr	r3, [pc, #276]	; (3aa4 <rint+0x138>)
    398e:	0004      	movs	r4, r0
    3990:	4133      	asrs	r3, r6
    3992:	001f      	movs	r7, r3
    3994:	400f      	ands	r7, r1
    3996:	4307      	orrs	r7, r0
    3998:	000d      	movs	r5, r1
    399a:	2f00      	cmp	r7, #0
    399c:	d024      	beq.n	39e8 <rint+0x7c>
    399e:	085b      	lsrs	r3, r3, #1
    39a0:	001c      	movs	r4, r3
    39a2:	400c      	ands	r4, r1
    39a4:	4320      	orrs	r0, r4
    39a6:	2700      	movs	r7, #0
    39a8:	2800      	cmp	r0, #0
    39aa:	d007      	beq.n	39bc <rint+0x50>
    39ac:	2e13      	cmp	r6, #19
    39ae:	d100      	bne.n	39b2 <rint+0x46>
    39b0:	e072      	b.n	3a98 <rint+0x12c>
    39b2:	2280      	movs	r2, #128	; 0x80
    39b4:	02d2      	lsls	r2, r2, #11
    39b6:	4132      	asrs	r2, r6
    39b8:	4399      	bics	r1, r3
    39ba:	430a      	orrs	r2, r1
    39bc:	4643      	mov	r3, r8
    39be:	00de      	lsls	r6, r3, #3
    39c0:	4b39      	ldr	r3, [pc, #228]	; (3aa8 <rint+0x13c>)
    39c2:	0011      	movs	r1, r2
    39c4:	199e      	adds	r6, r3, r6
    39c6:	6834      	ldr	r4, [r6, #0]
    39c8:	6875      	ldr	r5, [r6, #4]
    39ca:	0038      	movs	r0, r7
    39cc:	0022      	movs	r2, r4
    39ce:	002b      	movs	r3, r5
    39d0:	f000 fd76 	bl	44c0 <__aeabi_dadd>
    39d4:	9000      	str	r0, [sp, #0]
    39d6:	9101      	str	r1, [sp, #4]
    39d8:	9800      	ldr	r0, [sp, #0]
    39da:	9901      	ldr	r1, [sp, #4]
    39dc:	0022      	movs	r2, r4
    39de:	002b      	movs	r3, r5
    39e0:	f001 ff38 	bl	5854 <__aeabi_dsub>
    39e4:	0004      	movs	r4, r0
    39e6:	000d      	movs	r5, r1
    39e8:	0020      	movs	r0, r4
    39ea:	0029      	movs	r1, r5
    39ec:	b002      	add	sp, #8
    39ee:	bc04      	pop	{r2}
    39f0:	4690      	mov	r8, r2
    39f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    39f4:	2e33      	cmp	r6, #51	; 0x33
    39f6:	dd0c      	ble.n	3a12 <rint+0xa6>
    39f8:	2380      	movs	r3, #128	; 0x80
    39fa:	0004      	movs	r4, r0
    39fc:	000d      	movs	r5, r1
    39fe:	00db      	lsls	r3, r3, #3
    3a00:	429e      	cmp	r6, r3
    3a02:	d1f1      	bne.n	39e8 <rint+0x7c>
    3a04:	0002      	movs	r2, r0
    3a06:	000b      	movs	r3, r1
    3a08:	f000 fd5a 	bl	44c0 <__aeabi_dadd>
    3a0c:	0004      	movs	r4, r0
    3a0e:	000d      	movs	r5, r1
    3a10:	e7ea      	b.n	39e8 <rint+0x7c>
    3a12:	4c26      	ldr	r4, [pc, #152]	; (3aac <rint+0x140>)
    3a14:	000d      	movs	r5, r1
    3a16:	46a4      	mov	ip, r4
    3a18:	2401      	movs	r4, #1
    3a1a:	4463      	add	r3, ip
    3a1c:	4264      	negs	r4, r4
    3a1e:	40dc      	lsrs	r4, r3
    3a20:	46a4      	mov	ip, r4
    3a22:	4661      	mov	r1, ip
    3a24:	0004      	movs	r4, r0
    3a26:	4201      	tst	r1, r0
    3a28:	d0de      	beq.n	39e8 <rint+0x7c>
    3a2a:	0849      	lsrs	r1, r1, #1
    3a2c:	4201      	tst	r1, r0
    3a2e:	d0c5      	beq.n	39bc <rint+0x50>
    3a30:	2780      	movs	r7, #128	; 0x80
    3a32:	05ff      	lsls	r7, r7, #23
    3a34:	411f      	asrs	r7, r3
    3a36:	4388      	bics	r0, r1
    3a38:	4307      	orrs	r7, r0
    3a3a:	e7bf      	b.n	39bc <rint+0x50>
    3a3c:	004b      	lsls	r3, r1, #1
    3a3e:	085b      	lsrs	r3, r3, #1
    3a40:	4303      	orrs	r3, r0
    3a42:	0004      	movs	r4, r0
    3a44:	000d      	movs	r5, r1
    3a46:	2b00      	cmp	r3, #0
    3a48:	d0ce      	beq.n	39e8 <rint+0x7c>
    3a4a:	030b      	lsls	r3, r1, #12
    3a4c:	0b1b      	lsrs	r3, r3, #12
    3a4e:	4303      	orrs	r3, r0
    3a50:	425a      	negs	r2, r3
    3a52:	4313      	orrs	r3, r2
    3a54:	2280      	movs	r2, #128	; 0x80
    3a56:	0b1b      	lsrs	r3, r3, #12
    3a58:	0312      	lsls	r2, r2, #12
    3a5a:	4013      	ands	r3, r2
    3a5c:	0c4a      	lsrs	r2, r1, #17
    3a5e:	0452      	lsls	r2, r2, #17
    3a60:	4313      	orrs	r3, r2
    3a62:	0019      	movs	r1, r3
    3a64:	4643      	mov	r3, r8
    3a66:	4a10      	ldr	r2, [pc, #64]	; (3aa8 <rint+0x13c>)
    3a68:	00db      	lsls	r3, r3, #3
    3a6a:	18d3      	adds	r3, r2, r3
    3a6c:	681c      	ldr	r4, [r3, #0]
    3a6e:	685d      	ldr	r5, [r3, #4]
    3a70:	0022      	movs	r2, r4
    3a72:	002b      	movs	r3, r5
    3a74:	f000 fd24 	bl	44c0 <__aeabi_dadd>
    3a78:	9000      	str	r0, [sp, #0]
    3a7a:	9101      	str	r1, [sp, #4]
    3a7c:	9800      	ldr	r0, [sp, #0]
    3a7e:	9901      	ldr	r1, [sp, #4]
    3a80:	0022      	movs	r2, r4
    3a82:	002b      	movs	r3, r5
    3a84:	f001 fee6 	bl	5854 <__aeabi_dsub>
    3a88:	4642      	mov	r2, r8
    3a8a:	004b      	lsls	r3, r1, #1
    3a8c:	085b      	lsrs	r3, r3, #1
    3a8e:	07d6      	lsls	r6, r2, #31
    3a90:	4333      	orrs	r3, r6
    3a92:	0004      	movs	r4, r0
    3a94:	001d      	movs	r5, r3
    3a96:	e7a7      	b.n	39e8 <rint+0x7c>
    3a98:	2780      	movs	r7, #128	; 0x80
    3a9a:	063f      	lsls	r7, r7, #24
    3a9c:	e789      	b.n	39b2 <rint+0x46>
    3a9e:	46c0      	nop			; (mov r8, r8)
    3aa0:	fffffc01 	.word	0xfffffc01
    3aa4:	000fffff 	.word	0x000fffff
    3aa8:	00006578 	.word	0x00006578
    3aac:	fffffbed 	.word	0xfffffbed

00003ab0 <scalbn>:
    3ab0:	004b      	lsls	r3, r1, #1
    3ab2:	b570      	push	{r4, r5, r6, lr}
    3ab4:	0d5b      	lsrs	r3, r3, #21
    3ab6:	0014      	movs	r4, r2
    3ab8:	000a      	movs	r2, r1
    3aba:	2b00      	cmp	r3, #0
    3abc:	d11a      	bne.n	3af4 <scalbn+0x44>
    3abe:	004b      	lsls	r3, r1, #1
    3ac0:	085b      	lsrs	r3, r3, #1
    3ac2:	4303      	orrs	r3, r0
    3ac4:	d015      	beq.n	3af2 <scalbn+0x42>
    3ac6:	2200      	movs	r2, #0
    3ac8:	4b22      	ldr	r3, [pc, #136]	; (3b54 <scalbn+0xa4>)
    3aca:	f001 fc49 	bl	5360 <__aeabi_dmul>
    3ace:	4b22      	ldr	r3, [pc, #136]	; (3b58 <scalbn+0xa8>)
    3ad0:	000a      	movs	r2, r1
    3ad2:	429c      	cmp	r4, r3
    3ad4:	db22      	blt.n	3b1c <scalbn+0x6c>
    3ad6:	004b      	lsls	r3, r1, #1
    3ad8:	0d5b      	lsrs	r3, r3, #21
    3ada:	3b36      	subs	r3, #54	; 0x36
    3adc:	4d1f      	ldr	r5, [pc, #124]	; (3b5c <scalbn+0xac>)
    3ade:	18e3      	adds	r3, r4, r3
    3ae0:	42ab      	cmp	r3, r5
    3ae2:	dc20      	bgt.n	3b26 <scalbn+0x76>
    3ae4:	2b00      	cmp	r3, #0
    3ae6:	dd0d      	ble.n	3b04 <scalbn+0x54>
    3ae8:	4c1d      	ldr	r4, [pc, #116]	; (3b60 <scalbn+0xb0>)
    3aea:	051b      	lsls	r3, r3, #20
    3aec:	4022      	ands	r2, r4
    3aee:	431a      	orrs	r2, r3
    3af0:	0011      	movs	r1, r2
    3af2:	bd70      	pop	{r4, r5, r6, pc}
    3af4:	4d1b      	ldr	r5, [pc, #108]	; (3b64 <scalbn+0xb4>)
    3af6:	42ab      	cmp	r3, r5
    3af8:	d1f0      	bne.n	3adc <scalbn+0x2c>
    3afa:	0002      	movs	r2, r0
    3afc:	000b      	movs	r3, r1
    3afe:	f000 fcdf 	bl	44c0 <__aeabi_dadd>
    3b02:	e7f6      	b.n	3af2 <scalbn+0x42>
    3b04:	001d      	movs	r5, r3
    3b06:	3535      	adds	r5, #53	; 0x35
    3b08:	da18      	bge.n	3b3c <scalbn+0x8c>
    3b0a:	4b17      	ldr	r3, [pc, #92]	; (3b68 <scalbn+0xb8>)
    3b0c:	0002      	movs	r2, r0
    3b0e:	429c      	cmp	r4, r3
    3b10:	dc0a      	bgt.n	3b28 <scalbn+0x78>
    3b12:	000b      	movs	r3, r1
    3b14:	4815      	ldr	r0, [pc, #84]	; (3b6c <scalbn+0xbc>)
    3b16:	4916      	ldr	r1, [pc, #88]	; (3b70 <scalbn+0xc0>)
    3b18:	f000 f832 	bl	3b80 <copysign>
    3b1c:	4a13      	ldr	r2, [pc, #76]	; (3b6c <scalbn+0xbc>)
    3b1e:	4b14      	ldr	r3, [pc, #80]	; (3b70 <scalbn+0xc0>)
    3b20:	f001 fc1e 	bl	5360 <__aeabi_dmul>
    3b24:	e7e5      	b.n	3af2 <scalbn+0x42>
    3b26:	0002      	movs	r2, r0
    3b28:	000b      	movs	r3, r1
    3b2a:	4812      	ldr	r0, [pc, #72]	; (3b74 <scalbn+0xc4>)
    3b2c:	4912      	ldr	r1, [pc, #72]	; (3b78 <scalbn+0xc8>)
    3b2e:	f000 f827 	bl	3b80 <copysign>
    3b32:	4a10      	ldr	r2, [pc, #64]	; (3b74 <scalbn+0xc4>)
    3b34:	4b10      	ldr	r3, [pc, #64]	; (3b78 <scalbn+0xc8>)
    3b36:	f001 fc13 	bl	5360 <__aeabi_dmul>
    3b3a:	e7da      	b.n	3af2 <scalbn+0x42>
    3b3c:	4c08      	ldr	r4, [pc, #32]	; (3b60 <scalbn+0xb0>)
    3b3e:	3336      	adds	r3, #54	; 0x36
    3b40:	4022      	ands	r2, r4
    3b42:	051b      	lsls	r3, r3, #20
    3b44:	4313      	orrs	r3, r2
    3b46:	0019      	movs	r1, r3
    3b48:	2200      	movs	r2, #0
    3b4a:	4b0c      	ldr	r3, [pc, #48]	; (3b7c <scalbn+0xcc>)
    3b4c:	f001 fc08 	bl	5360 <__aeabi_dmul>
    3b50:	e7cf      	b.n	3af2 <scalbn+0x42>
    3b52:	46c0      	nop			; (mov r8, r8)
    3b54:	43500000 	.word	0x43500000
    3b58:	ffff3cb0 	.word	0xffff3cb0
    3b5c:	000007fe 	.word	0x000007fe
    3b60:	800fffff 	.word	0x800fffff
    3b64:	000007ff 	.word	0x000007ff
    3b68:	0000c350 	.word	0x0000c350
    3b6c:	c2f8f359 	.word	0xc2f8f359
    3b70:	01a56e1f 	.word	0x01a56e1f
    3b74:	8800759c 	.word	0x8800759c
    3b78:	7e37e43c 	.word	0x7e37e43c
    3b7c:	3c900000 	.word	0x3c900000

00003b80 <copysign>:
    3b80:	b530      	push	{r4, r5, lr}
    3b82:	004a      	lsls	r2, r1, #1
    3b84:	0fdb      	lsrs	r3, r3, #31
    3b86:	07db      	lsls	r3, r3, #31
    3b88:	0852      	lsrs	r2, r2, #1
    3b8a:	431a      	orrs	r2, r3
    3b8c:	0011      	movs	r1, r2
    3b8e:	bd30      	pop	{r4, r5, pc}

00003b90 <__gnu_thumb1_case_uqi>:
    3b90:	b402      	push	{r1}
    3b92:	4671      	mov	r1, lr
    3b94:	0849      	lsrs	r1, r1, #1
    3b96:	0049      	lsls	r1, r1, #1
    3b98:	5c09      	ldrb	r1, [r1, r0]
    3b9a:	0049      	lsls	r1, r1, #1
    3b9c:	448e      	add	lr, r1
    3b9e:	bc02      	pop	{r1}
    3ba0:	4770      	bx	lr
    3ba2:	46c0      	nop			; (mov r8, r8)

00003ba4 <__aeabi_cdrcmple>:
    3ba4:	4684      	mov	ip, r0
    3ba6:	1c10      	adds	r0, r2, #0
    3ba8:	4662      	mov	r2, ip
    3baa:	468c      	mov	ip, r1
    3bac:	1c19      	adds	r1, r3, #0
    3bae:	4663      	mov	r3, ip
    3bb0:	e000      	b.n	3bb4 <__aeabi_cdcmpeq>
    3bb2:	46c0      	nop			; (mov r8, r8)

00003bb4 <__aeabi_cdcmpeq>:
    3bb4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    3bb6:	f001 fb69 	bl	528c <__ledf2>
    3bba:	2800      	cmp	r0, #0
    3bbc:	d401      	bmi.n	3bc2 <__aeabi_cdcmpeq+0xe>
    3bbe:	2100      	movs	r1, #0
    3bc0:	42c8      	cmn	r0, r1
    3bc2:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00003bc4 <__aeabi_dcmpeq>:
    3bc4:	b510      	push	{r4, lr}
    3bc6:	f001 fabd 	bl	5144 <__eqdf2>
    3bca:	4240      	negs	r0, r0
    3bcc:	3001      	adds	r0, #1
    3bce:	bd10      	pop	{r4, pc}

00003bd0 <__aeabi_dcmplt>:
    3bd0:	b510      	push	{r4, lr}
    3bd2:	f001 fb5b 	bl	528c <__ledf2>
    3bd6:	2800      	cmp	r0, #0
    3bd8:	db01      	blt.n	3bde <__aeabi_dcmplt+0xe>
    3bda:	2000      	movs	r0, #0
    3bdc:	bd10      	pop	{r4, pc}
    3bde:	2001      	movs	r0, #1
    3be0:	bd10      	pop	{r4, pc}
    3be2:	46c0      	nop			; (mov r8, r8)

00003be4 <__aeabi_dcmple>:
    3be4:	b510      	push	{r4, lr}
    3be6:	f001 fb51 	bl	528c <__ledf2>
    3bea:	2800      	cmp	r0, #0
    3bec:	dd01      	ble.n	3bf2 <__aeabi_dcmple+0xe>
    3bee:	2000      	movs	r0, #0
    3bf0:	bd10      	pop	{r4, pc}
    3bf2:	2001      	movs	r0, #1
    3bf4:	bd10      	pop	{r4, pc}
    3bf6:	46c0      	nop			; (mov r8, r8)

00003bf8 <__aeabi_dcmpgt>:
    3bf8:	b510      	push	{r4, lr}
    3bfa:	f001 fae3 	bl	51c4 <__gedf2>
    3bfe:	2800      	cmp	r0, #0
    3c00:	dc01      	bgt.n	3c06 <__aeabi_dcmpgt+0xe>
    3c02:	2000      	movs	r0, #0
    3c04:	bd10      	pop	{r4, pc}
    3c06:	2001      	movs	r0, #1
    3c08:	bd10      	pop	{r4, pc}
    3c0a:	46c0      	nop			; (mov r8, r8)

00003c0c <__aeabi_dcmpge>:
    3c0c:	b510      	push	{r4, lr}
    3c0e:	f001 fad9 	bl	51c4 <__gedf2>
    3c12:	2800      	cmp	r0, #0
    3c14:	da01      	bge.n	3c1a <__aeabi_dcmpge+0xe>
    3c16:	2000      	movs	r0, #0
    3c18:	bd10      	pop	{r4, pc}
    3c1a:	2001      	movs	r0, #1
    3c1c:	bd10      	pop	{r4, pc}
    3c1e:	46c0      	nop			; (mov r8, r8)

00003c20 <__aeabi_cfrcmple>:
    3c20:	4684      	mov	ip, r0
    3c22:	1c08      	adds	r0, r1, #0
    3c24:	4661      	mov	r1, ip
    3c26:	e7ff      	b.n	3c28 <__aeabi_cfcmpeq>

00003c28 <__aeabi_cfcmpeq>:
    3c28:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    3c2a:	f000 f901 	bl	3e30 <__lesf2>
    3c2e:	2800      	cmp	r0, #0
    3c30:	d401      	bmi.n	3c36 <__aeabi_cfcmpeq+0xe>
    3c32:	2100      	movs	r1, #0
    3c34:	42c8      	cmn	r0, r1
    3c36:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00003c38 <__aeabi_fcmpeq>:
    3c38:	b510      	push	{r4, lr}
    3c3a:	f000 f88d 	bl	3d58 <__eqsf2>
    3c3e:	4240      	negs	r0, r0
    3c40:	3001      	adds	r0, #1
    3c42:	bd10      	pop	{r4, pc}

00003c44 <__aeabi_fcmplt>:
    3c44:	b510      	push	{r4, lr}
    3c46:	f000 f8f3 	bl	3e30 <__lesf2>
    3c4a:	2800      	cmp	r0, #0
    3c4c:	db01      	blt.n	3c52 <__aeabi_fcmplt+0xe>
    3c4e:	2000      	movs	r0, #0
    3c50:	bd10      	pop	{r4, pc}
    3c52:	2001      	movs	r0, #1
    3c54:	bd10      	pop	{r4, pc}
    3c56:	46c0      	nop			; (mov r8, r8)

00003c58 <__aeabi_fcmple>:
    3c58:	b510      	push	{r4, lr}
    3c5a:	f000 f8e9 	bl	3e30 <__lesf2>
    3c5e:	2800      	cmp	r0, #0
    3c60:	dd01      	ble.n	3c66 <__aeabi_fcmple+0xe>
    3c62:	2000      	movs	r0, #0
    3c64:	bd10      	pop	{r4, pc}
    3c66:	2001      	movs	r0, #1
    3c68:	bd10      	pop	{r4, pc}
    3c6a:	46c0      	nop			; (mov r8, r8)

00003c6c <__aeabi_fcmpgt>:
    3c6c:	b510      	push	{r4, lr}
    3c6e:	f000 f89b 	bl	3da8 <__gesf2>
    3c72:	2800      	cmp	r0, #0
    3c74:	dc01      	bgt.n	3c7a <__aeabi_fcmpgt+0xe>
    3c76:	2000      	movs	r0, #0
    3c78:	bd10      	pop	{r4, pc}
    3c7a:	2001      	movs	r0, #1
    3c7c:	bd10      	pop	{r4, pc}
    3c7e:	46c0      	nop			; (mov r8, r8)

00003c80 <__aeabi_fcmpge>:
    3c80:	b510      	push	{r4, lr}
    3c82:	f000 f891 	bl	3da8 <__gesf2>
    3c86:	2800      	cmp	r0, #0
    3c88:	da01      	bge.n	3c8e <__aeabi_fcmpge+0xe>
    3c8a:	2000      	movs	r0, #0
    3c8c:	bd10      	pop	{r4, pc}
    3c8e:	2001      	movs	r0, #1
    3c90:	bd10      	pop	{r4, pc}
    3c92:	46c0      	nop			; (mov r8, r8)

00003c94 <__aeabi_lmul>:
    3c94:	b5f0      	push	{r4, r5, r6, r7, lr}
    3c96:	464f      	mov	r7, r9
    3c98:	4646      	mov	r6, r8
    3c9a:	b4c0      	push	{r6, r7}
    3c9c:	0416      	lsls	r6, r2, #16
    3c9e:	0c36      	lsrs	r6, r6, #16
    3ca0:	4699      	mov	r9, r3
    3ca2:	0033      	movs	r3, r6
    3ca4:	0405      	lsls	r5, r0, #16
    3ca6:	0c2c      	lsrs	r4, r5, #16
    3ca8:	0c07      	lsrs	r7, r0, #16
    3caa:	0c15      	lsrs	r5, r2, #16
    3cac:	4363      	muls	r3, r4
    3cae:	437e      	muls	r6, r7
    3cb0:	436f      	muls	r7, r5
    3cb2:	4365      	muls	r5, r4
    3cb4:	0c1c      	lsrs	r4, r3, #16
    3cb6:	19ad      	adds	r5, r5, r6
    3cb8:	1964      	adds	r4, r4, r5
    3cba:	469c      	mov	ip, r3
    3cbc:	42a6      	cmp	r6, r4
    3cbe:	d903      	bls.n	3cc8 <__aeabi_lmul+0x34>
    3cc0:	2380      	movs	r3, #128	; 0x80
    3cc2:	025b      	lsls	r3, r3, #9
    3cc4:	4698      	mov	r8, r3
    3cc6:	4447      	add	r7, r8
    3cc8:	4663      	mov	r3, ip
    3cca:	0c25      	lsrs	r5, r4, #16
    3ccc:	19ef      	adds	r7, r5, r7
    3cce:	041d      	lsls	r5, r3, #16
    3cd0:	464b      	mov	r3, r9
    3cd2:	434a      	muls	r2, r1
    3cd4:	4343      	muls	r3, r0
    3cd6:	0c2d      	lsrs	r5, r5, #16
    3cd8:	0424      	lsls	r4, r4, #16
    3cda:	1964      	adds	r4, r4, r5
    3cdc:	1899      	adds	r1, r3, r2
    3cde:	19c9      	adds	r1, r1, r7
    3ce0:	0020      	movs	r0, r4
    3ce2:	bc0c      	pop	{r2, r3}
    3ce4:	4690      	mov	r8, r2
    3ce6:	4699      	mov	r9, r3
    3ce8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3cea:	46c0      	nop			; (mov r8, r8)

00003cec <__aeabi_f2uiz>:
    3cec:	219e      	movs	r1, #158	; 0x9e
    3cee:	b510      	push	{r4, lr}
    3cf0:	05c9      	lsls	r1, r1, #23
    3cf2:	1c04      	adds	r4, r0, #0
    3cf4:	f7ff ffc4 	bl	3c80 <__aeabi_fcmpge>
    3cf8:	2800      	cmp	r0, #0
    3cfa:	d103      	bne.n	3d04 <__aeabi_f2uiz+0x18>
    3cfc:	1c20      	adds	r0, r4, #0
    3cfe:	f000 fb75 	bl	43ec <__aeabi_f2iz>
    3d02:	bd10      	pop	{r4, pc}
    3d04:	219e      	movs	r1, #158	; 0x9e
    3d06:	1c20      	adds	r0, r4, #0
    3d08:	05c9      	lsls	r1, r1, #23
    3d0a:	f000 f9e9 	bl	40e0 <__aeabi_fsub>
    3d0e:	f000 fb6d 	bl	43ec <__aeabi_f2iz>
    3d12:	2380      	movs	r3, #128	; 0x80
    3d14:	061b      	lsls	r3, r3, #24
    3d16:	469c      	mov	ip, r3
    3d18:	4460      	add	r0, ip
    3d1a:	e7f2      	b.n	3d02 <__aeabi_f2uiz+0x16>

00003d1c <__aeabi_d2uiz>:
    3d1c:	b570      	push	{r4, r5, r6, lr}
    3d1e:	2200      	movs	r2, #0
    3d20:	4b0c      	ldr	r3, [pc, #48]	; (3d54 <__aeabi_d2uiz+0x38>)
    3d22:	0004      	movs	r4, r0
    3d24:	000d      	movs	r5, r1
    3d26:	f7ff ff71 	bl	3c0c <__aeabi_dcmpge>
    3d2a:	2800      	cmp	r0, #0
    3d2c:	d104      	bne.n	3d38 <__aeabi_d2uiz+0x1c>
    3d2e:	0020      	movs	r0, r4
    3d30:	0029      	movs	r1, r5
    3d32:	f002 f903 	bl	5f3c <__aeabi_d2iz>
    3d36:	bd70      	pop	{r4, r5, r6, pc}
    3d38:	4b06      	ldr	r3, [pc, #24]	; (3d54 <__aeabi_d2uiz+0x38>)
    3d3a:	2200      	movs	r2, #0
    3d3c:	0020      	movs	r0, r4
    3d3e:	0029      	movs	r1, r5
    3d40:	f001 fd88 	bl	5854 <__aeabi_dsub>
    3d44:	f002 f8fa 	bl	5f3c <__aeabi_d2iz>
    3d48:	2380      	movs	r3, #128	; 0x80
    3d4a:	061b      	lsls	r3, r3, #24
    3d4c:	469c      	mov	ip, r3
    3d4e:	4460      	add	r0, ip
    3d50:	e7f1      	b.n	3d36 <__aeabi_d2uiz+0x1a>
    3d52:	46c0      	nop			; (mov r8, r8)
    3d54:	41e00000 	.word	0x41e00000

00003d58 <__eqsf2>:
    3d58:	0243      	lsls	r3, r0, #9
    3d5a:	b570      	push	{r4, r5, r6, lr}
    3d5c:	0042      	lsls	r2, r0, #1
    3d5e:	004c      	lsls	r4, r1, #1
    3d60:	0a5d      	lsrs	r5, r3, #9
    3d62:	0fc3      	lsrs	r3, r0, #31
    3d64:	0248      	lsls	r0, r1, #9
    3d66:	0e12      	lsrs	r2, r2, #24
    3d68:	0a46      	lsrs	r6, r0, #9
    3d6a:	0e24      	lsrs	r4, r4, #24
    3d6c:	0fc9      	lsrs	r1, r1, #31
    3d6e:	2aff      	cmp	r2, #255	; 0xff
    3d70:	d00f      	beq.n	3d92 <__eqsf2+0x3a>
    3d72:	2cff      	cmp	r4, #255	; 0xff
    3d74:	d011      	beq.n	3d9a <__eqsf2+0x42>
    3d76:	2001      	movs	r0, #1
    3d78:	42a2      	cmp	r2, r4
    3d7a:	d000      	beq.n	3d7e <__eqsf2+0x26>
    3d7c:	bd70      	pop	{r4, r5, r6, pc}
    3d7e:	42b5      	cmp	r5, r6
    3d80:	d1fc      	bne.n	3d7c <__eqsf2+0x24>
    3d82:	428b      	cmp	r3, r1
    3d84:	d00d      	beq.n	3da2 <__eqsf2+0x4a>
    3d86:	2a00      	cmp	r2, #0
    3d88:	d1f8      	bne.n	3d7c <__eqsf2+0x24>
    3d8a:	0028      	movs	r0, r5
    3d8c:	1e43      	subs	r3, r0, #1
    3d8e:	4198      	sbcs	r0, r3
    3d90:	e7f4      	b.n	3d7c <__eqsf2+0x24>
    3d92:	2001      	movs	r0, #1
    3d94:	2d00      	cmp	r5, #0
    3d96:	d1f1      	bne.n	3d7c <__eqsf2+0x24>
    3d98:	e7eb      	b.n	3d72 <__eqsf2+0x1a>
    3d9a:	2001      	movs	r0, #1
    3d9c:	2e00      	cmp	r6, #0
    3d9e:	d1ed      	bne.n	3d7c <__eqsf2+0x24>
    3da0:	e7e9      	b.n	3d76 <__eqsf2+0x1e>
    3da2:	2000      	movs	r0, #0
    3da4:	e7ea      	b.n	3d7c <__eqsf2+0x24>
    3da6:	46c0      	nop			; (mov r8, r8)

00003da8 <__gesf2>:
    3da8:	0243      	lsls	r3, r0, #9
    3daa:	b5f0      	push	{r4, r5, r6, r7, lr}
    3dac:	0042      	lsls	r2, r0, #1
    3dae:	0a5d      	lsrs	r5, r3, #9
    3db0:	0fc3      	lsrs	r3, r0, #31
    3db2:	0248      	lsls	r0, r1, #9
    3db4:	0a44      	lsrs	r4, r0, #9
    3db6:	0048      	lsls	r0, r1, #1
    3db8:	0e12      	lsrs	r2, r2, #24
    3dba:	0e00      	lsrs	r0, r0, #24
    3dbc:	0fc9      	lsrs	r1, r1, #31
    3dbe:	2aff      	cmp	r2, #255	; 0xff
    3dc0:	d01f      	beq.n	3e02 <__gesf2+0x5a>
    3dc2:	28ff      	cmp	r0, #255	; 0xff
    3dc4:	d022      	beq.n	3e0c <__gesf2+0x64>
    3dc6:	2a00      	cmp	r2, #0
    3dc8:	d109      	bne.n	3dde <__gesf2+0x36>
    3dca:	426e      	negs	r6, r5
    3dcc:	416e      	adcs	r6, r5
    3dce:	2800      	cmp	r0, #0
    3dd0:	d10f      	bne.n	3df2 <__gesf2+0x4a>
    3dd2:	2c00      	cmp	r4, #0
    3dd4:	d10d      	bne.n	3df2 <__gesf2+0x4a>
    3dd6:	2000      	movs	r0, #0
    3dd8:	2d00      	cmp	r5, #0
    3dda:	d009      	beq.n	3df0 <__gesf2+0x48>
    3ddc:	e005      	b.n	3dea <__gesf2+0x42>
    3dde:	2800      	cmp	r0, #0
    3de0:	d101      	bne.n	3de6 <__gesf2+0x3e>
    3de2:	2c00      	cmp	r4, #0
    3de4:	d001      	beq.n	3dea <__gesf2+0x42>
    3de6:	428b      	cmp	r3, r1
    3de8:	d013      	beq.n	3e12 <__gesf2+0x6a>
    3dea:	4258      	negs	r0, r3
    3dec:	2301      	movs	r3, #1
    3dee:	4318      	orrs	r0, r3
    3df0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3df2:	2e00      	cmp	r6, #0
    3df4:	d0f7      	beq.n	3de6 <__gesf2+0x3e>
    3df6:	4248      	negs	r0, r1
    3df8:	4141      	adcs	r1, r0
    3dfa:	2001      	movs	r0, #1
    3dfc:	4249      	negs	r1, r1
    3dfe:	4308      	orrs	r0, r1
    3e00:	e7f6      	b.n	3df0 <__gesf2+0x48>
    3e02:	2d00      	cmp	r5, #0
    3e04:	d0dd      	beq.n	3dc2 <__gesf2+0x1a>
    3e06:	2002      	movs	r0, #2
    3e08:	4240      	negs	r0, r0
    3e0a:	e7f1      	b.n	3df0 <__gesf2+0x48>
    3e0c:	2c00      	cmp	r4, #0
    3e0e:	d0da      	beq.n	3dc6 <__gesf2+0x1e>
    3e10:	e7f9      	b.n	3e06 <__gesf2+0x5e>
    3e12:	4282      	cmp	r2, r0
    3e14:	dce9      	bgt.n	3dea <__gesf2+0x42>
    3e16:	db04      	blt.n	3e22 <__gesf2+0x7a>
    3e18:	42a5      	cmp	r5, r4
    3e1a:	d8e6      	bhi.n	3dea <__gesf2+0x42>
    3e1c:	2000      	movs	r0, #0
    3e1e:	42a5      	cmp	r5, r4
    3e20:	d2e6      	bcs.n	3df0 <__gesf2+0x48>
    3e22:	4258      	negs	r0, r3
    3e24:	4143      	adcs	r3, r0
    3e26:	2001      	movs	r0, #1
    3e28:	425b      	negs	r3, r3
    3e2a:	4318      	orrs	r0, r3
    3e2c:	e7e0      	b.n	3df0 <__gesf2+0x48>
    3e2e:	46c0      	nop			; (mov r8, r8)

00003e30 <__lesf2>:
    3e30:	0243      	lsls	r3, r0, #9
    3e32:	b5f0      	push	{r4, r5, r6, r7, lr}
    3e34:	0042      	lsls	r2, r0, #1
    3e36:	004c      	lsls	r4, r1, #1
    3e38:	0a5e      	lsrs	r6, r3, #9
    3e3a:	0fc3      	lsrs	r3, r0, #31
    3e3c:	0248      	lsls	r0, r1, #9
    3e3e:	0e12      	lsrs	r2, r2, #24
    3e40:	0a45      	lsrs	r5, r0, #9
    3e42:	0e24      	lsrs	r4, r4, #24
    3e44:	0fc9      	lsrs	r1, r1, #31
    3e46:	2aff      	cmp	r2, #255	; 0xff
    3e48:	d017      	beq.n	3e7a <__lesf2+0x4a>
    3e4a:	2cff      	cmp	r4, #255	; 0xff
    3e4c:	d019      	beq.n	3e82 <__lesf2+0x52>
    3e4e:	2a00      	cmp	r2, #0
    3e50:	d10b      	bne.n	3e6a <__lesf2+0x3a>
    3e52:	4270      	negs	r0, r6
    3e54:	4170      	adcs	r0, r6
    3e56:	2c00      	cmp	r4, #0
    3e58:	d017      	beq.n	3e8a <__lesf2+0x5a>
    3e5a:	2800      	cmp	r0, #0
    3e5c:	d007      	beq.n	3e6e <__lesf2+0x3e>
    3e5e:	4248      	negs	r0, r1
    3e60:	4141      	adcs	r1, r0
    3e62:	2001      	movs	r0, #1
    3e64:	4249      	negs	r1, r1
    3e66:	4308      	orrs	r0, r1
    3e68:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3e6a:	2c00      	cmp	r4, #0
    3e6c:	d013      	beq.n	3e96 <__lesf2+0x66>
    3e6e:	428b      	cmp	r3, r1
    3e70:	d014      	beq.n	3e9c <__lesf2+0x6c>
    3e72:	4258      	negs	r0, r3
    3e74:	2301      	movs	r3, #1
    3e76:	4318      	orrs	r0, r3
    3e78:	e7f6      	b.n	3e68 <__lesf2+0x38>
    3e7a:	2002      	movs	r0, #2
    3e7c:	2e00      	cmp	r6, #0
    3e7e:	d1f3      	bne.n	3e68 <__lesf2+0x38>
    3e80:	e7e3      	b.n	3e4a <__lesf2+0x1a>
    3e82:	2002      	movs	r0, #2
    3e84:	2d00      	cmp	r5, #0
    3e86:	d1ef      	bne.n	3e68 <__lesf2+0x38>
    3e88:	e7e1      	b.n	3e4e <__lesf2+0x1e>
    3e8a:	2d00      	cmp	r5, #0
    3e8c:	d1e5      	bne.n	3e5a <__lesf2+0x2a>
    3e8e:	2000      	movs	r0, #0
    3e90:	2e00      	cmp	r6, #0
    3e92:	d0e9      	beq.n	3e68 <__lesf2+0x38>
    3e94:	e7ed      	b.n	3e72 <__lesf2+0x42>
    3e96:	2d00      	cmp	r5, #0
    3e98:	d1e9      	bne.n	3e6e <__lesf2+0x3e>
    3e9a:	e7ea      	b.n	3e72 <__lesf2+0x42>
    3e9c:	42a2      	cmp	r2, r4
    3e9e:	dce8      	bgt.n	3e72 <__lesf2+0x42>
    3ea0:	db04      	blt.n	3eac <__lesf2+0x7c>
    3ea2:	42ae      	cmp	r6, r5
    3ea4:	d8e5      	bhi.n	3e72 <__lesf2+0x42>
    3ea6:	2000      	movs	r0, #0
    3ea8:	42ae      	cmp	r6, r5
    3eaa:	d2dd      	bcs.n	3e68 <__lesf2+0x38>
    3eac:	4258      	negs	r0, r3
    3eae:	4143      	adcs	r3, r0
    3eb0:	2001      	movs	r0, #1
    3eb2:	425b      	negs	r3, r3
    3eb4:	4318      	orrs	r0, r3
    3eb6:	e7d7      	b.n	3e68 <__lesf2+0x38>

00003eb8 <__aeabi_fmul>:
    3eb8:	b5f0      	push	{r4, r5, r6, r7, lr}
    3eba:	4657      	mov	r7, sl
    3ebc:	464e      	mov	r6, r9
    3ebe:	4645      	mov	r5, r8
    3ec0:	0043      	lsls	r3, r0, #1
    3ec2:	b4e0      	push	{r5, r6, r7}
    3ec4:	0246      	lsls	r6, r0, #9
    3ec6:	4688      	mov	r8, r1
    3ec8:	0a76      	lsrs	r6, r6, #9
    3eca:	0e1f      	lsrs	r7, r3, #24
    3ecc:	0fc4      	lsrs	r4, r0, #31
    3ece:	2f00      	cmp	r7, #0
    3ed0:	d047      	beq.n	3f62 <__aeabi_fmul+0xaa>
    3ed2:	2fff      	cmp	r7, #255	; 0xff
    3ed4:	d025      	beq.n	3f22 <__aeabi_fmul+0x6a>
    3ed6:	2300      	movs	r3, #0
    3ed8:	2580      	movs	r5, #128	; 0x80
    3eda:	469a      	mov	sl, r3
    3edc:	4699      	mov	r9, r3
    3ede:	00f6      	lsls	r6, r6, #3
    3ee0:	04ed      	lsls	r5, r5, #19
    3ee2:	432e      	orrs	r6, r5
    3ee4:	3f7f      	subs	r7, #127	; 0x7f
    3ee6:	4643      	mov	r3, r8
    3ee8:	4642      	mov	r2, r8
    3eea:	025d      	lsls	r5, r3, #9
    3eec:	0fd2      	lsrs	r2, r2, #31
    3eee:	005b      	lsls	r3, r3, #1
    3ef0:	0a6d      	lsrs	r5, r5, #9
    3ef2:	0e1b      	lsrs	r3, r3, #24
    3ef4:	4690      	mov	r8, r2
    3ef6:	d040      	beq.n	3f7a <__aeabi_fmul+0xc2>
    3ef8:	2bff      	cmp	r3, #255	; 0xff
    3efa:	d039      	beq.n	3f70 <__aeabi_fmul+0xb8>
    3efc:	2280      	movs	r2, #128	; 0x80
    3efe:	2000      	movs	r0, #0
    3f00:	00ed      	lsls	r5, r5, #3
    3f02:	04d2      	lsls	r2, r2, #19
    3f04:	4315      	orrs	r5, r2
    3f06:	3b7f      	subs	r3, #127	; 0x7f
    3f08:	18fb      	adds	r3, r7, r3
    3f0a:	4642      	mov	r2, r8
    3f0c:	4657      	mov	r7, sl
    3f0e:	1c59      	adds	r1, r3, #1
    3f10:	4062      	eors	r2, r4
    3f12:	468c      	mov	ip, r1
    3f14:	4307      	orrs	r7, r0
    3f16:	2f0f      	cmp	r7, #15
    3f18:	d85c      	bhi.n	3fd4 <__aeabi_fmul+0x11c>
    3f1a:	496f      	ldr	r1, [pc, #444]	; (40d8 <__aeabi_fmul+0x220>)
    3f1c:	00bf      	lsls	r7, r7, #2
    3f1e:	59c9      	ldr	r1, [r1, r7]
    3f20:	468f      	mov	pc, r1
    3f22:	2e00      	cmp	r6, #0
    3f24:	d145      	bne.n	3fb2 <__aeabi_fmul+0xfa>
    3f26:	2308      	movs	r3, #8
    3f28:	469a      	mov	sl, r3
    3f2a:	3b06      	subs	r3, #6
    3f2c:	4699      	mov	r9, r3
    3f2e:	e7da      	b.n	3ee6 <__aeabi_fmul+0x2e>
    3f30:	4642      	mov	r2, r8
    3f32:	2802      	cmp	r0, #2
    3f34:	d02d      	beq.n	3f92 <__aeabi_fmul+0xda>
    3f36:	2803      	cmp	r0, #3
    3f38:	d100      	bne.n	3f3c <__aeabi_fmul+0x84>
    3f3a:	e0c3      	b.n	40c4 <__aeabi_fmul+0x20c>
    3f3c:	2801      	cmp	r0, #1
    3f3e:	d000      	beq.n	3f42 <__aeabi_fmul+0x8a>
    3f40:	e0a2      	b.n	4088 <__aeabi_fmul+0x1d0>
    3f42:	2500      	movs	r5, #0
    3f44:	2600      	movs	r6, #0
    3f46:	4002      	ands	r2, r0
    3f48:	b2d4      	uxtb	r4, r2
    3f4a:	0276      	lsls	r6, r6, #9
    3f4c:	05ed      	lsls	r5, r5, #23
    3f4e:	0a76      	lsrs	r6, r6, #9
    3f50:	432e      	orrs	r6, r5
    3f52:	07e4      	lsls	r4, r4, #31
    3f54:	4326      	orrs	r6, r4
    3f56:	0030      	movs	r0, r6
    3f58:	bc1c      	pop	{r2, r3, r4}
    3f5a:	4690      	mov	r8, r2
    3f5c:	4699      	mov	r9, r3
    3f5e:	46a2      	mov	sl, r4
    3f60:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3f62:	2e00      	cmp	r6, #0
    3f64:	d11a      	bne.n	3f9c <__aeabi_fmul+0xe4>
    3f66:	2304      	movs	r3, #4
    3f68:	469a      	mov	sl, r3
    3f6a:	3b03      	subs	r3, #3
    3f6c:	4699      	mov	r9, r3
    3f6e:	e7ba      	b.n	3ee6 <__aeabi_fmul+0x2e>
    3f70:	002a      	movs	r2, r5
    3f72:	1e51      	subs	r1, r2, #1
    3f74:	418a      	sbcs	r2, r1
    3f76:	1c90      	adds	r0, r2, #2
    3f78:	e7c6      	b.n	3f08 <__aeabi_fmul+0x50>
    3f7a:	2001      	movs	r0, #1
    3f7c:	2d00      	cmp	r5, #0
    3f7e:	d0c3      	beq.n	3f08 <__aeabi_fmul+0x50>
    3f80:	0028      	movs	r0, r5
    3f82:	f002 f9f7 	bl	6374 <__clzsi2>
    3f86:	1f43      	subs	r3, r0, #5
    3f88:	3076      	adds	r0, #118	; 0x76
    3f8a:	409d      	lsls	r5, r3
    3f8c:	4243      	negs	r3, r0
    3f8e:	2000      	movs	r0, #0
    3f90:	e7ba      	b.n	3f08 <__aeabi_fmul+0x50>
    3f92:	2401      	movs	r4, #1
    3f94:	25ff      	movs	r5, #255	; 0xff
    3f96:	4014      	ands	r4, r2
    3f98:	2600      	movs	r6, #0
    3f9a:	e7d6      	b.n	3f4a <__aeabi_fmul+0x92>
    3f9c:	0030      	movs	r0, r6
    3f9e:	f002 f9e9 	bl	6374 <__clzsi2>
    3fa2:	1f43      	subs	r3, r0, #5
    3fa4:	409e      	lsls	r6, r3
    3fa6:	2300      	movs	r3, #0
    3fa8:	3076      	adds	r0, #118	; 0x76
    3faa:	4247      	negs	r7, r0
    3fac:	469a      	mov	sl, r3
    3fae:	4699      	mov	r9, r3
    3fb0:	e799      	b.n	3ee6 <__aeabi_fmul+0x2e>
    3fb2:	230c      	movs	r3, #12
    3fb4:	469a      	mov	sl, r3
    3fb6:	3b09      	subs	r3, #9
    3fb8:	4699      	mov	r9, r3
    3fba:	e794      	b.n	3ee6 <__aeabi_fmul+0x2e>
    3fbc:	2680      	movs	r6, #128	; 0x80
    3fbe:	2400      	movs	r4, #0
    3fc0:	03f6      	lsls	r6, r6, #15
    3fc2:	25ff      	movs	r5, #255	; 0xff
    3fc4:	e7c1      	b.n	3f4a <__aeabi_fmul+0x92>
    3fc6:	0035      	movs	r5, r6
    3fc8:	4648      	mov	r0, r9
    3fca:	e7b2      	b.n	3f32 <__aeabi_fmul+0x7a>
    3fcc:	0035      	movs	r5, r6
    3fce:	0022      	movs	r2, r4
    3fd0:	4648      	mov	r0, r9
    3fd2:	e7ae      	b.n	3f32 <__aeabi_fmul+0x7a>
    3fd4:	0429      	lsls	r1, r5, #16
    3fd6:	0c09      	lsrs	r1, r1, #16
    3fd8:	0008      	movs	r0, r1
    3fda:	0c37      	lsrs	r7, r6, #16
    3fdc:	0436      	lsls	r6, r6, #16
    3fde:	0c36      	lsrs	r6, r6, #16
    3fe0:	0c2c      	lsrs	r4, r5, #16
    3fe2:	4379      	muls	r1, r7
    3fe4:	4370      	muls	r0, r6
    3fe6:	4367      	muls	r7, r4
    3fe8:	4374      	muls	r4, r6
    3fea:	0c06      	lsrs	r6, r0, #16
    3fec:	1864      	adds	r4, r4, r1
    3fee:	1936      	adds	r6, r6, r4
    3ff0:	42b1      	cmp	r1, r6
    3ff2:	d903      	bls.n	3ffc <__aeabi_fmul+0x144>
    3ff4:	2180      	movs	r1, #128	; 0x80
    3ff6:	0249      	lsls	r1, r1, #9
    3ff8:	4688      	mov	r8, r1
    3ffa:	4447      	add	r7, r8
    3ffc:	0400      	lsls	r0, r0, #16
    3ffe:	0c00      	lsrs	r0, r0, #16
    4000:	0431      	lsls	r1, r6, #16
    4002:	1809      	adds	r1, r1, r0
    4004:	018d      	lsls	r5, r1, #6
    4006:	1e68      	subs	r0, r5, #1
    4008:	4185      	sbcs	r5, r0
    400a:	0e89      	lsrs	r1, r1, #26
    400c:	4329      	orrs	r1, r5
    400e:	0c35      	lsrs	r5, r6, #16
    4010:	19ed      	adds	r5, r5, r7
    4012:	01ad      	lsls	r5, r5, #6
    4014:	430d      	orrs	r5, r1
    4016:	0129      	lsls	r1, r5, #4
    4018:	d504      	bpl.n	4024 <__aeabi_fmul+0x16c>
    401a:	2301      	movs	r3, #1
    401c:	0869      	lsrs	r1, r5, #1
    401e:	401d      	ands	r5, r3
    4020:	4663      	mov	r3, ip
    4022:	430d      	orrs	r5, r1
    4024:	0019      	movs	r1, r3
    4026:	317f      	adds	r1, #127	; 0x7f
    4028:	2900      	cmp	r1, #0
    402a:	dd25      	ble.n	4078 <__aeabi_fmul+0x1c0>
    402c:	0768      	lsls	r0, r5, #29
    402e:	d004      	beq.n	403a <__aeabi_fmul+0x182>
    4030:	200f      	movs	r0, #15
    4032:	4028      	ands	r0, r5
    4034:	2804      	cmp	r0, #4
    4036:	d000      	beq.n	403a <__aeabi_fmul+0x182>
    4038:	3504      	adds	r5, #4
    403a:	0128      	lsls	r0, r5, #4
    403c:	d503      	bpl.n	4046 <__aeabi_fmul+0x18e>
    403e:	4927      	ldr	r1, [pc, #156]	; (40dc <__aeabi_fmul+0x224>)
    4040:	3380      	adds	r3, #128	; 0x80
    4042:	400d      	ands	r5, r1
    4044:	0019      	movs	r1, r3
    4046:	29fe      	cmp	r1, #254	; 0xfe
    4048:	dca3      	bgt.n	3f92 <__aeabi_fmul+0xda>
    404a:	2401      	movs	r4, #1
    404c:	01ad      	lsls	r5, r5, #6
    404e:	0a6e      	lsrs	r6, r5, #9
    4050:	4014      	ands	r4, r2
    4052:	b2cd      	uxtb	r5, r1
    4054:	e779      	b.n	3f4a <__aeabi_fmul+0x92>
    4056:	2080      	movs	r0, #128	; 0x80
    4058:	03c0      	lsls	r0, r0, #15
    405a:	4206      	tst	r6, r0
    405c:	d007      	beq.n	406e <__aeabi_fmul+0x1b6>
    405e:	4205      	tst	r5, r0
    4060:	d105      	bne.n	406e <__aeabi_fmul+0x1b6>
    4062:	4328      	orrs	r0, r5
    4064:	0246      	lsls	r6, r0, #9
    4066:	0a76      	lsrs	r6, r6, #9
    4068:	4644      	mov	r4, r8
    406a:	25ff      	movs	r5, #255	; 0xff
    406c:	e76d      	b.n	3f4a <__aeabi_fmul+0x92>
    406e:	4306      	orrs	r6, r0
    4070:	0276      	lsls	r6, r6, #9
    4072:	0a76      	lsrs	r6, r6, #9
    4074:	25ff      	movs	r5, #255	; 0xff
    4076:	e768      	b.n	3f4a <__aeabi_fmul+0x92>
    4078:	2401      	movs	r4, #1
    407a:	1a61      	subs	r1, r4, r1
    407c:	291b      	cmp	r1, #27
    407e:	dd05      	ble.n	408c <__aeabi_fmul+0x1d4>
    4080:	4014      	ands	r4, r2
    4082:	2500      	movs	r5, #0
    4084:	2600      	movs	r6, #0
    4086:	e760      	b.n	3f4a <__aeabi_fmul+0x92>
    4088:	4663      	mov	r3, ip
    408a:	e7cb      	b.n	4024 <__aeabi_fmul+0x16c>
    408c:	002e      	movs	r6, r5
    408e:	2320      	movs	r3, #32
    4090:	40ce      	lsrs	r6, r1
    4092:	1a59      	subs	r1, r3, r1
    4094:	408d      	lsls	r5, r1
    4096:	1e6b      	subs	r3, r5, #1
    4098:	419d      	sbcs	r5, r3
    409a:	432e      	orrs	r6, r5
    409c:	0773      	lsls	r3, r6, #29
    409e:	d004      	beq.n	40aa <__aeabi_fmul+0x1f2>
    40a0:	230f      	movs	r3, #15
    40a2:	4033      	ands	r3, r6
    40a4:	2b04      	cmp	r3, #4
    40a6:	d000      	beq.n	40aa <__aeabi_fmul+0x1f2>
    40a8:	3604      	adds	r6, #4
    40aa:	0173      	lsls	r3, r6, #5
    40ac:	d504      	bpl.n	40b8 <__aeabi_fmul+0x200>
    40ae:	2401      	movs	r4, #1
    40b0:	2501      	movs	r5, #1
    40b2:	4014      	ands	r4, r2
    40b4:	2600      	movs	r6, #0
    40b6:	e748      	b.n	3f4a <__aeabi_fmul+0x92>
    40b8:	2401      	movs	r4, #1
    40ba:	01b6      	lsls	r6, r6, #6
    40bc:	0a76      	lsrs	r6, r6, #9
    40be:	4014      	ands	r4, r2
    40c0:	2500      	movs	r5, #0
    40c2:	e742      	b.n	3f4a <__aeabi_fmul+0x92>
    40c4:	2680      	movs	r6, #128	; 0x80
    40c6:	2401      	movs	r4, #1
    40c8:	03f6      	lsls	r6, r6, #15
    40ca:	432e      	orrs	r6, r5
    40cc:	0276      	lsls	r6, r6, #9
    40ce:	0a76      	lsrs	r6, r6, #9
    40d0:	4014      	ands	r4, r2
    40d2:	25ff      	movs	r5, #255	; 0xff
    40d4:	e739      	b.n	3f4a <__aeabi_fmul+0x92>
    40d6:	46c0      	nop			; (mov r8, r8)
    40d8:	00006588 	.word	0x00006588
    40dc:	f7ffffff 	.word	0xf7ffffff

000040e0 <__aeabi_fsub>:
    40e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    40e2:	024a      	lsls	r2, r1, #9
    40e4:	004e      	lsls	r6, r1, #1
    40e6:	0243      	lsls	r3, r0, #9
    40e8:	0044      	lsls	r4, r0, #1
    40ea:	0e24      	lsrs	r4, r4, #24
    40ec:	0fc5      	lsrs	r5, r0, #31
    40ee:	099b      	lsrs	r3, r3, #6
    40f0:	0e36      	lsrs	r6, r6, #24
    40f2:	0fc9      	lsrs	r1, r1, #31
    40f4:	0992      	lsrs	r2, r2, #6
    40f6:	2eff      	cmp	r6, #255	; 0xff
    40f8:	d100      	bne.n	40fc <__aeabi_fsub+0x1c>
    40fa:	e083      	b.n	4204 <__aeabi_fsub+0x124>
    40fc:	2001      	movs	r0, #1
    40fe:	4041      	eors	r1, r0
    4100:	1ba0      	subs	r0, r4, r6
    4102:	42a9      	cmp	r1, r5
    4104:	d05c      	beq.n	41c0 <__aeabi_fsub+0xe0>
    4106:	2800      	cmp	r0, #0
    4108:	dc00      	bgt.n	410c <__aeabi_fsub+0x2c>
    410a:	e095      	b.n	4238 <__aeabi_fsub+0x158>
    410c:	2e00      	cmp	r6, #0
    410e:	d11c      	bne.n	414a <__aeabi_fsub+0x6a>
    4110:	2a00      	cmp	r2, #0
    4112:	d000      	beq.n	4116 <__aeabi_fsub+0x36>
    4114:	e081      	b.n	421a <__aeabi_fsub+0x13a>
    4116:	075a      	lsls	r2, r3, #29
    4118:	d004      	beq.n	4124 <__aeabi_fsub+0x44>
    411a:	220f      	movs	r2, #15
    411c:	401a      	ands	r2, r3
    411e:	2a04      	cmp	r2, #4
    4120:	d000      	beq.n	4124 <__aeabi_fsub+0x44>
    4122:	3304      	adds	r3, #4
    4124:	015a      	lsls	r2, r3, #5
    4126:	d53b      	bpl.n	41a0 <__aeabi_fsub+0xc0>
    4128:	3401      	adds	r4, #1
    412a:	2cff      	cmp	r4, #255	; 0xff
    412c:	d100      	bne.n	4130 <__aeabi_fsub+0x50>
    412e:	e091      	b.n	4254 <__aeabi_fsub+0x174>
    4130:	2001      	movs	r0, #1
    4132:	019b      	lsls	r3, r3, #6
    4134:	0a5b      	lsrs	r3, r3, #9
    4136:	b2e4      	uxtb	r4, r4
    4138:	4005      	ands	r5, r0
    413a:	025b      	lsls	r3, r3, #9
    413c:	05e4      	lsls	r4, r4, #23
    413e:	0a5b      	lsrs	r3, r3, #9
    4140:	07ed      	lsls	r5, r5, #31
    4142:	4323      	orrs	r3, r4
    4144:	432b      	orrs	r3, r5
    4146:	0018      	movs	r0, r3
    4148:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    414a:	2cff      	cmp	r4, #255	; 0xff
    414c:	d0e3      	beq.n	4116 <__aeabi_fsub+0x36>
    414e:	2180      	movs	r1, #128	; 0x80
    4150:	04c9      	lsls	r1, r1, #19
    4152:	430a      	orrs	r2, r1
    4154:	281b      	cmp	r0, #27
    4156:	dd00      	ble.n	415a <__aeabi_fsub+0x7a>
    4158:	e090      	b.n	427c <__aeabi_fsub+0x19c>
    415a:	0016      	movs	r6, r2
    415c:	2120      	movs	r1, #32
    415e:	40c6      	lsrs	r6, r0
    4160:	1a08      	subs	r0, r1, r0
    4162:	4082      	lsls	r2, r0
    4164:	1e51      	subs	r1, r2, #1
    4166:	418a      	sbcs	r2, r1
    4168:	4332      	orrs	r2, r6
    416a:	1a9b      	subs	r3, r3, r2
    416c:	015a      	lsls	r2, r3, #5
    416e:	d515      	bpl.n	419c <__aeabi_fsub+0xbc>
    4170:	019b      	lsls	r3, r3, #6
    4172:	099e      	lsrs	r6, r3, #6
    4174:	0030      	movs	r0, r6
    4176:	f002 f8fd 	bl	6374 <__clzsi2>
    417a:	3805      	subs	r0, #5
    417c:	4086      	lsls	r6, r0
    417e:	4284      	cmp	r4, r0
    4180:	dc6c      	bgt.n	425c <__aeabi_fsub+0x17c>
    4182:	1b04      	subs	r4, r0, r4
    4184:	0033      	movs	r3, r6
    4186:	2020      	movs	r0, #32
    4188:	3401      	adds	r4, #1
    418a:	40e3      	lsrs	r3, r4
    418c:	1b04      	subs	r4, r0, r4
    418e:	40a6      	lsls	r6, r4
    4190:	1e72      	subs	r2, r6, #1
    4192:	4196      	sbcs	r6, r2
    4194:	2400      	movs	r4, #0
    4196:	4333      	orrs	r3, r6
    4198:	e7bd      	b.n	4116 <__aeabi_fsub+0x36>
    419a:	000d      	movs	r5, r1
    419c:	075a      	lsls	r2, r3, #29
    419e:	d1bc      	bne.n	411a <__aeabi_fsub+0x3a>
    41a0:	08df      	lsrs	r7, r3, #3
    41a2:	2301      	movs	r3, #1
    41a4:	401d      	ands	r5, r3
    41a6:	2cff      	cmp	r4, #255	; 0xff
    41a8:	d133      	bne.n	4212 <__aeabi_fsub+0x132>
    41aa:	2f00      	cmp	r7, #0
    41ac:	d100      	bne.n	41b0 <__aeabi_fsub+0xd0>
    41ae:	e090      	b.n	42d2 <__aeabi_fsub+0x1f2>
    41b0:	2280      	movs	r2, #128	; 0x80
    41b2:	03d2      	lsls	r2, r2, #15
    41b4:	0013      	movs	r3, r2
    41b6:	433b      	orrs	r3, r7
    41b8:	025b      	lsls	r3, r3, #9
    41ba:	0a5b      	lsrs	r3, r3, #9
    41bc:	24ff      	movs	r4, #255	; 0xff
    41be:	e7bc      	b.n	413a <__aeabi_fsub+0x5a>
    41c0:	2800      	cmp	r0, #0
    41c2:	dd4f      	ble.n	4264 <__aeabi_fsub+0x184>
    41c4:	2e00      	cmp	r6, #0
    41c6:	d02e      	beq.n	4226 <__aeabi_fsub+0x146>
    41c8:	2cff      	cmp	r4, #255	; 0xff
    41ca:	d0a4      	beq.n	4116 <__aeabi_fsub+0x36>
    41cc:	2580      	movs	r5, #128	; 0x80
    41ce:	04ed      	lsls	r5, r5, #19
    41d0:	432a      	orrs	r2, r5
    41d2:	281b      	cmp	r0, #27
    41d4:	dd00      	ble.n	41d8 <__aeabi_fsub+0xf8>
    41d6:	e097      	b.n	4308 <__aeabi_fsub+0x228>
    41d8:	0016      	movs	r6, r2
    41da:	2520      	movs	r5, #32
    41dc:	40c6      	lsrs	r6, r0
    41de:	1a28      	subs	r0, r5, r0
    41e0:	4082      	lsls	r2, r0
    41e2:	1e50      	subs	r0, r2, #1
    41e4:	4182      	sbcs	r2, r0
    41e6:	4332      	orrs	r2, r6
    41e8:	189b      	adds	r3, r3, r2
    41ea:	015a      	lsls	r2, r3, #5
    41ec:	d5d5      	bpl.n	419a <__aeabi_fsub+0xba>
    41ee:	3401      	adds	r4, #1
    41f0:	2cff      	cmp	r4, #255	; 0xff
    41f2:	d06d      	beq.n	42d0 <__aeabi_fsub+0x1f0>
    41f4:	2201      	movs	r2, #1
    41f6:	487b      	ldr	r0, [pc, #492]	; (43e4 <__aeabi_fsub+0x304>)
    41f8:	401a      	ands	r2, r3
    41fa:	085b      	lsrs	r3, r3, #1
    41fc:	4003      	ands	r3, r0
    41fe:	4313      	orrs	r3, r2
    4200:	000d      	movs	r5, r1
    4202:	e788      	b.n	4116 <__aeabi_fsub+0x36>
    4204:	2a00      	cmp	r2, #0
    4206:	d000      	beq.n	420a <__aeabi_fsub+0x12a>
    4208:	e77a      	b.n	4100 <__aeabi_fsub+0x20>
    420a:	e777      	b.n	40fc <__aeabi_fsub+0x1c>
    420c:	1e03      	subs	r3, r0, #0
    420e:	d1c5      	bne.n	419c <__aeabi_fsub+0xbc>
    4210:	2500      	movs	r5, #0
    4212:	027b      	lsls	r3, r7, #9
    4214:	0a5b      	lsrs	r3, r3, #9
    4216:	b2e4      	uxtb	r4, r4
    4218:	e78f      	b.n	413a <__aeabi_fsub+0x5a>
    421a:	3801      	subs	r0, #1
    421c:	2800      	cmp	r0, #0
    421e:	d0a4      	beq.n	416a <__aeabi_fsub+0x8a>
    4220:	2cff      	cmp	r4, #255	; 0xff
    4222:	d197      	bne.n	4154 <__aeabi_fsub+0x74>
    4224:	e777      	b.n	4116 <__aeabi_fsub+0x36>
    4226:	2a00      	cmp	r2, #0
    4228:	d100      	bne.n	422c <__aeabi_fsub+0x14c>
    422a:	e774      	b.n	4116 <__aeabi_fsub+0x36>
    422c:	3801      	subs	r0, #1
    422e:	2800      	cmp	r0, #0
    4230:	d0da      	beq.n	41e8 <__aeabi_fsub+0x108>
    4232:	2cff      	cmp	r4, #255	; 0xff
    4234:	d1cd      	bne.n	41d2 <__aeabi_fsub+0xf2>
    4236:	e76e      	b.n	4116 <__aeabi_fsub+0x36>
    4238:	2800      	cmp	r0, #0
    423a:	d121      	bne.n	4280 <__aeabi_fsub+0x1a0>
    423c:	1c60      	adds	r0, r4, #1
    423e:	b2c0      	uxtb	r0, r0
    4240:	2801      	cmp	r0, #1
    4242:	dd58      	ble.n	42f6 <__aeabi_fsub+0x216>
    4244:	2780      	movs	r7, #128	; 0x80
    4246:	1a9e      	subs	r6, r3, r2
    4248:	04ff      	lsls	r7, r7, #19
    424a:	4037      	ands	r7, r6
    424c:	d02f      	beq.n	42ae <__aeabi_fsub+0x1ce>
    424e:	1ad6      	subs	r6, r2, r3
    4250:	000d      	movs	r5, r1
    4252:	e78f      	b.n	4174 <__aeabi_fsub+0x94>
    4254:	2301      	movs	r3, #1
    4256:	401d      	ands	r5, r3
    4258:	2300      	movs	r3, #0
    425a:	e76e      	b.n	413a <__aeabi_fsub+0x5a>
    425c:	4b62      	ldr	r3, [pc, #392]	; (43e8 <__aeabi_fsub+0x308>)
    425e:	1a24      	subs	r4, r4, r0
    4260:	4033      	ands	r3, r6
    4262:	e758      	b.n	4116 <__aeabi_fsub+0x36>
    4264:	2800      	cmp	r0, #0
    4266:	d151      	bne.n	430c <__aeabi_fsub+0x22c>
    4268:	1c60      	adds	r0, r4, #1
    426a:	b2c6      	uxtb	r6, r0
    426c:	2e01      	cmp	r6, #1
    426e:	dd33      	ble.n	42d8 <__aeabi_fsub+0x1f8>
    4270:	28ff      	cmp	r0, #255	; 0xff
    4272:	d02d      	beq.n	42d0 <__aeabi_fsub+0x1f0>
    4274:	189b      	adds	r3, r3, r2
    4276:	085b      	lsrs	r3, r3, #1
    4278:	0004      	movs	r4, r0
    427a:	e74c      	b.n	4116 <__aeabi_fsub+0x36>
    427c:	2201      	movs	r2, #1
    427e:	e774      	b.n	416a <__aeabi_fsub+0x8a>
    4280:	2c00      	cmp	r4, #0
    4282:	d01a      	beq.n	42ba <__aeabi_fsub+0x1da>
    4284:	2eff      	cmp	r6, #255	; 0xff
    4286:	d01f      	beq.n	42c8 <__aeabi_fsub+0x1e8>
    4288:	2480      	movs	r4, #128	; 0x80
    428a:	04e4      	lsls	r4, r4, #19
    428c:	4240      	negs	r0, r0
    428e:	4323      	orrs	r3, r4
    4290:	281b      	cmp	r0, #27
    4292:	dd00      	ble.n	4296 <__aeabi_fsub+0x1b6>
    4294:	e096      	b.n	43c4 <__aeabi_fsub+0x2e4>
    4296:	001d      	movs	r5, r3
    4298:	2420      	movs	r4, #32
    429a:	40c5      	lsrs	r5, r0
    429c:	1a20      	subs	r0, r4, r0
    429e:	4083      	lsls	r3, r0
    42a0:	1e58      	subs	r0, r3, #1
    42a2:	4183      	sbcs	r3, r0
    42a4:	432b      	orrs	r3, r5
    42a6:	1ad3      	subs	r3, r2, r3
    42a8:	0034      	movs	r4, r6
    42aa:	000d      	movs	r5, r1
    42ac:	e75e      	b.n	416c <__aeabi_fsub+0x8c>
    42ae:	2e00      	cmp	r6, #0
    42b0:	d000      	beq.n	42b4 <__aeabi_fsub+0x1d4>
    42b2:	e75f      	b.n	4174 <__aeabi_fsub+0x94>
    42b4:	2500      	movs	r5, #0
    42b6:	2400      	movs	r4, #0
    42b8:	e7ab      	b.n	4212 <__aeabi_fsub+0x132>
    42ba:	2b00      	cmp	r3, #0
    42bc:	d044      	beq.n	4348 <__aeabi_fsub+0x268>
    42be:	43c0      	mvns	r0, r0
    42c0:	2800      	cmp	r0, #0
    42c2:	d0f0      	beq.n	42a6 <__aeabi_fsub+0x1c6>
    42c4:	2eff      	cmp	r6, #255	; 0xff
    42c6:	d1e3      	bne.n	4290 <__aeabi_fsub+0x1b0>
    42c8:	0013      	movs	r3, r2
    42ca:	24ff      	movs	r4, #255	; 0xff
    42cc:	000d      	movs	r5, r1
    42ce:	e722      	b.n	4116 <__aeabi_fsub+0x36>
    42d0:	000d      	movs	r5, r1
    42d2:	24ff      	movs	r4, #255	; 0xff
    42d4:	2300      	movs	r3, #0
    42d6:	e730      	b.n	413a <__aeabi_fsub+0x5a>
    42d8:	2c00      	cmp	r4, #0
    42da:	d15d      	bne.n	4398 <__aeabi_fsub+0x2b8>
    42dc:	2b00      	cmp	r3, #0
    42de:	d07d      	beq.n	43dc <__aeabi_fsub+0x2fc>
    42e0:	2a00      	cmp	r2, #0
    42e2:	d100      	bne.n	42e6 <__aeabi_fsub+0x206>
    42e4:	e717      	b.n	4116 <__aeabi_fsub+0x36>
    42e6:	189b      	adds	r3, r3, r2
    42e8:	015a      	lsls	r2, r3, #5
    42ea:	d400      	bmi.n	42ee <__aeabi_fsub+0x20e>
    42ec:	e756      	b.n	419c <__aeabi_fsub+0xbc>
    42ee:	4a3e      	ldr	r2, [pc, #248]	; (43e8 <__aeabi_fsub+0x308>)
    42f0:	0004      	movs	r4, r0
    42f2:	4013      	ands	r3, r2
    42f4:	e70f      	b.n	4116 <__aeabi_fsub+0x36>
    42f6:	2c00      	cmp	r4, #0
    42f8:	d11e      	bne.n	4338 <__aeabi_fsub+0x258>
    42fa:	2b00      	cmp	r3, #0
    42fc:	d12f      	bne.n	435e <__aeabi_fsub+0x27e>
    42fe:	2a00      	cmp	r2, #0
    4300:	d065      	beq.n	43ce <__aeabi_fsub+0x2ee>
    4302:	0013      	movs	r3, r2
    4304:	000d      	movs	r5, r1
    4306:	e706      	b.n	4116 <__aeabi_fsub+0x36>
    4308:	2201      	movs	r2, #1
    430a:	e76d      	b.n	41e8 <__aeabi_fsub+0x108>
    430c:	2c00      	cmp	r4, #0
    430e:	d11f      	bne.n	4350 <__aeabi_fsub+0x270>
    4310:	2b00      	cmp	r3, #0
    4312:	d059      	beq.n	43c8 <__aeabi_fsub+0x2e8>
    4314:	43c0      	mvns	r0, r0
    4316:	2800      	cmp	r0, #0
    4318:	d00b      	beq.n	4332 <__aeabi_fsub+0x252>
    431a:	2eff      	cmp	r6, #255	; 0xff
    431c:	d04f      	beq.n	43be <__aeabi_fsub+0x2de>
    431e:	281b      	cmp	r0, #27
    4320:	dc5e      	bgt.n	43e0 <__aeabi_fsub+0x300>
    4322:	001d      	movs	r5, r3
    4324:	2420      	movs	r4, #32
    4326:	40c5      	lsrs	r5, r0
    4328:	1a20      	subs	r0, r4, r0
    432a:	4083      	lsls	r3, r0
    432c:	1e58      	subs	r0, r3, #1
    432e:	4183      	sbcs	r3, r0
    4330:	432b      	orrs	r3, r5
    4332:	189b      	adds	r3, r3, r2
    4334:	0034      	movs	r4, r6
    4336:	e758      	b.n	41ea <__aeabi_fsub+0x10a>
    4338:	2b00      	cmp	r3, #0
    433a:	d11c      	bne.n	4376 <__aeabi_fsub+0x296>
    433c:	2a00      	cmp	r2, #0
    433e:	d049      	beq.n	43d4 <__aeabi_fsub+0x2f4>
    4340:	0013      	movs	r3, r2
    4342:	000d      	movs	r5, r1
    4344:	24ff      	movs	r4, #255	; 0xff
    4346:	e6e6      	b.n	4116 <__aeabi_fsub+0x36>
    4348:	0013      	movs	r3, r2
    434a:	0034      	movs	r4, r6
    434c:	000d      	movs	r5, r1
    434e:	e6e2      	b.n	4116 <__aeabi_fsub+0x36>
    4350:	2eff      	cmp	r6, #255	; 0xff
    4352:	d034      	beq.n	43be <__aeabi_fsub+0x2de>
    4354:	2480      	movs	r4, #128	; 0x80
    4356:	04e4      	lsls	r4, r4, #19
    4358:	4240      	negs	r0, r0
    435a:	4323      	orrs	r3, r4
    435c:	e7df      	b.n	431e <__aeabi_fsub+0x23e>
    435e:	2a00      	cmp	r2, #0
    4360:	d100      	bne.n	4364 <__aeabi_fsub+0x284>
    4362:	e6d8      	b.n	4116 <__aeabi_fsub+0x36>
    4364:	2780      	movs	r7, #128	; 0x80
    4366:	1a98      	subs	r0, r3, r2
    4368:	04ff      	lsls	r7, r7, #19
    436a:	4007      	ands	r7, r0
    436c:	d100      	bne.n	4370 <__aeabi_fsub+0x290>
    436e:	e74d      	b.n	420c <__aeabi_fsub+0x12c>
    4370:	1ad3      	subs	r3, r2, r3
    4372:	000d      	movs	r5, r1
    4374:	e6cf      	b.n	4116 <__aeabi_fsub+0x36>
    4376:	24ff      	movs	r4, #255	; 0xff
    4378:	2a00      	cmp	r2, #0
    437a:	d100      	bne.n	437e <__aeabi_fsub+0x29e>
    437c:	e6cb      	b.n	4116 <__aeabi_fsub+0x36>
    437e:	2080      	movs	r0, #128	; 0x80
    4380:	08db      	lsrs	r3, r3, #3
    4382:	03c0      	lsls	r0, r0, #15
    4384:	4203      	tst	r3, r0
    4386:	d004      	beq.n	4392 <__aeabi_fsub+0x2b2>
    4388:	08d2      	lsrs	r2, r2, #3
    438a:	4202      	tst	r2, r0
    438c:	d101      	bne.n	4392 <__aeabi_fsub+0x2b2>
    438e:	0013      	movs	r3, r2
    4390:	000d      	movs	r5, r1
    4392:	00db      	lsls	r3, r3, #3
    4394:	24ff      	movs	r4, #255	; 0xff
    4396:	e6be      	b.n	4116 <__aeabi_fsub+0x36>
    4398:	2b00      	cmp	r3, #0
    439a:	d010      	beq.n	43be <__aeabi_fsub+0x2de>
    439c:	24ff      	movs	r4, #255	; 0xff
    439e:	2a00      	cmp	r2, #0
    43a0:	d100      	bne.n	43a4 <__aeabi_fsub+0x2c4>
    43a2:	e6b8      	b.n	4116 <__aeabi_fsub+0x36>
    43a4:	2080      	movs	r0, #128	; 0x80
    43a6:	08db      	lsrs	r3, r3, #3
    43a8:	03c0      	lsls	r0, r0, #15
    43aa:	4203      	tst	r3, r0
    43ac:	d003      	beq.n	43b6 <__aeabi_fsub+0x2d6>
    43ae:	08d2      	lsrs	r2, r2, #3
    43b0:	4202      	tst	r2, r0
    43b2:	d100      	bne.n	43b6 <__aeabi_fsub+0x2d6>
    43b4:	0013      	movs	r3, r2
    43b6:	00db      	lsls	r3, r3, #3
    43b8:	000d      	movs	r5, r1
    43ba:	24ff      	movs	r4, #255	; 0xff
    43bc:	e6ab      	b.n	4116 <__aeabi_fsub+0x36>
    43be:	0013      	movs	r3, r2
    43c0:	24ff      	movs	r4, #255	; 0xff
    43c2:	e6a8      	b.n	4116 <__aeabi_fsub+0x36>
    43c4:	2301      	movs	r3, #1
    43c6:	e76e      	b.n	42a6 <__aeabi_fsub+0x1c6>
    43c8:	0013      	movs	r3, r2
    43ca:	0034      	movs	r4, r6
    43cc:	e6a3      	b.n	4116 <__aeabi_fsub+0x36>
    43ce:	2700      	movs	r7, #0
    43d0:	2500      	movs	r5, #0
    43d2:	e71e      	b.n	4212 <__aeabi_fsub+0x132>
    43d4:	2780      	movs	r7, #128	; 0x80
    43d6:	2500      	movs	r5, #0
    43d8:	03ff      	lsls	r7, r7, #15
    43da:	e6e9      	b.n	41b0 <__aeabi_fsub+0xd0>
    43dc:	0013      	movs	r3, r2
    43de:	e69a      	b.n	4116 <__aeabi_fsub+0x36>
    43e0:	2301      	movs	r3, #1
    43e2:	e7a6      	b.n	4332 <__aeabi_fsub+0x252>
    43e4:	7dffffff 	.word	0x7dffffff
    43e8:	fbffffff 	.word	0xfbffffff

000043ec <__aeabi_f2iz>:
    43ec:	0243      	lsls	r3, r0, #9
    43ee:	0a59      	lsrs	r1, r3, #9
    43f0:	0043      	lsls	r3, r0, #1
    43f2:	0fc2      	lsrs	r2, r0, #31
    43f4:	0e1b      	lsrs	r3, r3, #24
    43f6:	2000      	movs	r0, #0
    43f8:	2b7e      	cmp	r3, #126	; 0x7e
    43fa:	dd0e      	ble.n	441a <__aeabi_f2iz+0x2e>
    43fc:	2b9d      	cmp	r3, #157	; 0x9d
    43fe:	dc0d      	bgt.n	441c <__aeabi_f2iz+0x30>
    4400:	2080      	movs	r0, #128	; 0x80
    4402:	0400      	lsls	r0, r0, #16
    4404:	4301      	orrs	r1, r0
    4406:	2b95      	cmp	r3, #149	; 0x95
    4408:	dc0b      	bgt.n	4422 <__aeabi_f2iz+0x36>
    440a:	2096      	movs	r0, #150	; 0x96
    440c:	1ac3      	subs	r3, r0, r3
    440e:	40d9      	lsrs	r1, r3
    4410:	000b      	movs	r3, r1
    4412:	4258      	negs	r0, r3
    4414:	2a00      	cmp	r2, #0
    4416:	d100      	bne.n	441a <__aeabi_f2iz+0x2e>
    4418:	0018      	movs	r0, r3
    441a:	4770      	bx	lr
    441c:	4b03      	ldr	r3, [pc, #12]	; (442c <__aeabi_f2iz+0x40>)
    441e:	18d0      	adds	r0, r2, r3
    4420:	e7fb      	b.n	441a <__aeabi_f2iz+0x2e>
    4422:	3b96      	subs	r3, #150	; 0x96
    4424:	4099      	lsls	r1, r3
    4426:	000b      	movs	r3, r1
    4428:	e7f3      	b.n	4412 <__aeabi_f2iz+0x26>
    442a:	46c0      	nop			; (mov r8, r8)
    442c:	7fffffff 	.word	0x7fffffff

00004430 <__aeabi_i2f>:
    4430:	b570      	push	{r4, r5, r6, lr}
    4432:	2800      	cmp	r0, #0
    4434:	d030      	beq.n	4498 <__aeabi_i2f+0x68>
    4436:	17c3      	asrs	r3, r0, #31
    4438:	18c5      	adds	r5, r0, r3
    443a:	405d      	eors	r5, r3
    443c:	0fc4      	lsrs	r4, r0, #31
    443e:	0028      	movs	r0, r5
    4440:	f001 ff98 	bl	6374 <__clzsi2>
    4444:	239e      	movs	r3, #158	; 0x9e
    4446:	1a1b      	subs	r3, r3, r0
    4448:	2b96      	cmp	r3, #150	; 0x96
    444a:	dc0d      	bgt.n	4468 <__aeabi_i2f+0x38>
    444c:	2296      	movs	r2, #150	; 0x96
    444e:	1ad2      	subs	r2, r2, r3
    4450:	4095      	lsls	r5, r2
    4452:	026a      	lsls	r2, r5, #9
    4454:	0a52      	lsrs	r2, r2, #9
    4456:	b2d8      	uxtb	r0, r3
    4458:	0252      	lsls	r2, r2, #9
    445a:	05c0      	lsls	r0, r0, #23
    445c:	0a52      	lsrs	r2, r2, #9
    445e:	07e4      	lsls	r4, r4, #31
    4460:	4302      	orrs	r2, r0
    4462:	4322      	orrs	r2, r4
    4464:	0010      	movs	r0, r2
    4466:	bd70      	pop	{r4, r5, r6, pc}
    4468:	2b99      	cmp	r3, #153	; 0x99
    446a:	dc19      	bgt.n	44a0 <__aeabi_i2f+0x70>
    446c:	2299      	movs	r2, #153	; 0x99
    446e:	1ad2      	subs	r2, r2, r3
    4470:	4095      	lsls	r5, r2
    4472:	4a12      	ldr	r2, [pc, #72]	; (44bc <__aeabi_i2f+0x8c>)
    4474:	402a      	ands	r2, r5
    4476:	0769      	lsls	r1, r5, #29
    4478:	d004      	beq.n	4484 <__aeabi_i2f+0x54>
    447a:	210f      	movs	r1, #15
    447c:	400d      	ands	r5, r1
    447e:	2d04      	cmp	r5, #4
    4480:	d000      	beq.n	4484 <__aeabi_i2f+0x54>
    4482:	3204      	adds	r2, #4
    4484:	0151      	lsls	r1, r2, #5
    4486:	d503      	bpl.n	4490 <__aeabi_i2f+0x60>
    4488:	4b0c      	ldr	r3, [pc, #48]	; (44bc <__aeabi_i2f+0x8c>)
    448a:	401a      	ands	r2, r3
    448c:	239f      	movs	r3, #159	; 0x9f
    448e:	1a1b      	subs	r3, r3, r0
    4490:	0192      	lsls	r2, r2, #6
    4492:	0a52      	lsrs	r2, r2, #9
    4494:	b2d8      	uxtb	r0, r3
    4496:	e7df      	b.n	4458 <__aeabi_i2f+0x28>
    4498:	2400      	movs	r4, #0
    449a:	2000      	movs	r0, #0
    449c:	2200      	movs	r2, #0
    449e:	e7db      	b.n	4458 <__aeabi_i2f+0x28>
    44a0:	2205      	movs	r2, #5
    44a2:	002e      	movs	r6, r5
    44a4:	1a12      	subs	r2, r2, r0
    44a6:	21b9      	movs	r1, #185	; 0xb9
    44a8:	40d6      	lsrs	r6, r2
    44aa:	002a      	movs	r2, r5
    44ac:	1ac9      	subs	r1, r1, r3
    44ae:	408a      	lsls	r2, r1
    44b0:	1e55      	subs	r5, r2, #1
    44b2:	41aa      	sbcs	r2, r5
    44b4:	0035      	movs	r5, r6
    44b6:	4315      	orrs	r5, r2
    44b8:	e7db      	b.n	4472 <__aeabi_i2f+0x42>
    44ba:	46c0      	nop			; (mov r8, r8)
    44bc:	fbffffff 	.word	0xfbffffff

000044c0 <__aeabi_dadd>:
    44c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    44c2:	4656      	mov	r6, sl
    44c4:	465f      	mov	r7, fp
    44c6:	464d      	mov	r5, r9
    44c8:	4644      	mov	r4, r8
    44ca:	b4f0      	push	{r4, r5, r6, r7}
    44cc:	000f      	movs	r7, r1
    44ce:	0ffd      	lsrs	r5, r7, #31
    44d0:	46aa      	mov	sl, r5
    44d2:	0309      	lsls	r1, r1, #12
    44d4:	007c      	lsls	r4, r7, #1
    44d6:	002e      	movs	r6, r5
    44d8:	005f      	lsls	r7, r3, #1
    44da:	0f45      	lsrs	r5, r0, #29
    44dc:	0a49      	lsrs	r1, r1, #9
    44de:	0d7f      	lsrs	r7, r7, #21
    44e0:	4329      	orrs	r1, r5
    44e2:	00c5      	lsls	r5, r0, #3
    44e4:	0318      	lsls	r0, r3, #12
    44e6:	46bc      	mov	ip, r7
    44e8:	0a40      	lsrs	r0, r0, #9
    44ea:	0f57      	lsrs	r7, r2, #29
    44ec:	0d64      	lsrs	r4, r4, #21
    44ee:	0fdb      	lsrs	r3, r3, #31
    44f0:	4338      	orrs	r0, r7
    44f2:	00d2      	lsls	r2, r2, #3
    44f4:	459a      	cmp	sl, r3
    44f6:	d100      	bne.n	44fa <__aeabi_dadd+0x3a>
    44f8:	e0aa      	b.n	4650 <__aeabi_dadd+0x190>
    44fa:	4666      	mov	r6, ip
    44fc:	1ba6      	subs	r6, r4, r6
    44fe:	2e00      	cmp	r6, #0
    4500:	dc00      	bgt.n	4504 <__aeabi_dadd+0x44>
    4502:	e0ff      	b.n	4704 <__aeabi_dadd+0x244>
    4504:	4663      	mov	r3, ip
    4506:	2b00      	cmp	r3, #0
    4508:	d139      	bne.n	457e <__aeabi_dadd+0xbe>
    450a:	0003      	movs	r3, r0
    450c:	4313      	orrs	r3, r2
    450e:	d000      	beq.n	4512 <__aeabi_dadd+0x52>
    4510:	e0d9      	b.n	46c6 <__aeabi_dadd+0x206>
    4512:	076b      	lsls	r3, r5, #29
    4514:	d009      	beq.n	452a <__aeabi_dadd+0x6a>
    4516:	230f      	movs	r3, #15
    4518:	402b      	ands	r3, r5
    451a:	2b04      	cmp	r3, #4
    451c:	d005      	beq.n	452a <__aeabi_dadd+0x6a>
    451e:	1d2b      	adds	r3, r5, #4
    4520:	42ab      	cmp	r3, r5
    4522:	41ad      	sbcs	r5, r5
    4524:	426d      	negs	r5, r5
    4526:	1949      	adds	r1, r1, r5
    4528:	001d      	movs	r5, r3
    452a:	020b      	lsls	r3, r1, #8
    452c:	d400      	bmi.n	4530 <__aeabi_dadd+0x70>
    452e:	e082      	b.n	4636 <__aeabi_dadd+0x176>
    4530:	4bca      	ldr	r3, [pc, #808]	; (485c <__aeabi_dadd+0x39c>)
    4532:	3401      	adds	r4, #1
    4534:	429c      	cmp	r4, r3
    4536:	d100      	bne.n	453a <__aeabi_dadd+0x7a>
    4538:	e0fe      	b.n	4738 <__aeabi_dadd+0x278>
    453a:	000a      	movs	r2, r1
    453c:	4656      	mov	r6, sl
    453e:	4bc8      	ldr	r3, [pc, #800]	; (4860 <__aeabi_dadd+0x3a0>)
    4540:	08ed      	lsrs	r5, r5, #3
    4542:	401a      	ands	r2, r3
    4544:	0750      	lsls	r0, r2, #29
    4546:	0564      	lsls	r4, r4, #21
    4548:	0252      	lsls	r2, r2, #9
    454a:	4305      	orrs	r5, r0
    454c:	0b12      	lsrs	r2, r2, #12
    454e:	0d64      	lsrs	r4, r4, #21
    4550:	2100      	movs	r1, #0
    4552:	0312      	lsls	r2, r2, #12
    4554:	0d0b      	lsrs	r3, r1, #20
    4556:	051b      	lsls	r3, r3, #20
    4558:	0564      	lsls	r4, r4, #21
    455a:	0b12      	lsrs	r2, r2, #12
    455c:	431a      	orrs	r2, r3
    455e:	0863      	lsrs	r3, r4, #1
    4560:	4cc0      	ldr	r4, [pc, #768]	; (4864 <__aeabi_dadd+0x3a4>)
    4562:	07f6      	lsls	r6, r6, #31
    4564:	4014      	ands	r4, r2
    4566:	431c      	orrs	r4, r3
    4568:	0064      	lsls	r4, r4, #1
    456a:	0864      	lsrs	r4, r4, #1
    456c:	4334      	orrs	r4, r6
    456e:	0028      	movs	r0, r5
    4570:	0021      	movs	r1, r4
    4572:	bc3c      	pop	{r2, r3, r4, r5}
    4574:	4690      	mov	r8, r2
    4576:	4699      	mov	r9, r3
    4578:	46a2      	mov	sl, r4
    457a:	46ab      	mov	fp, r5
    457c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    457e:	4bb7      	ldr	r3, [pc, #732]	; (485c <__aeabi_dadd+0x39c>)
    4580:	429c      	cmp	r4, r3
    4582:	d0c6      	beq.n	4512 <__aeabi_dadd+0x52>
    4584:	2380      	movs	r3, #128	; 0x80
    4586:	041b      	lsls	r3, r3, #16
    4588:	4318      	orrs	r0, r3
    458a:	2e38      	cmp	r6, #56	; 0x38
    458c:	dd00      	ble.n	4590 <__aeabi_dadd+0xd0>
    458e:	e0eb      	b.n	4768 <__aeabi_dadd+0x2a8>
    4590:	2e1f      	cmp	r6, #31
    4592:	dd00      	ble.n	4596 <__aeabi_dadd+0xd6>
    4594:	e11e      	b.n	47d4 <__aeabi_dadd+0x314>
    4596:	2320      	movs	r3, #32
    4598:	1b9b      	subs	r3, r3, r6
    459a:	469c      	mov	ip, r3
    459c:	0003      	movs	r3, r0
    459e:	4667      	mov	r7, ip
    45a0:	40bb      	lsls	r3, r7
    45a2:	4698      	mov	r8, r3
    45a4:	0013      	movs	r3, r2
    45a6:	4647      	mov	r7, r8
    45a8:	40f3      	lsrs	r3, r6
    45aa:	433b      	orrs	r3, r7
    45ac:	4667      	mov	r7, ip
    45ae:	40ba      	lsls	r2, r7
    45b0:	1e57      	subs	r7, r2, #1
    45b2:	41ba      	sbcs	r2, r7
    45b4:	4313      	orrs	r3, r2
    45b6:	0002      	movs	r2, r0
    45b8:	40f2      	lsrs	r2, r6
    45ba:	1aeb      	subs	r3, r5, r3
    45bc:	429d      	cmp	r5, r3
    45be:	41b6      	sbcs	r6, r6
    45c0:	001d      	movs	r5, r3
    45c2:	1a8a      	subs	r2, r1, r2
    45c4:	4276      	negs	r6, r6
    45c6:	1b91      	subs	r1, r2, r6
    45c8:	020b      	lsls	r3, r1, #8
    45ca:	d531      	bpl.n	4630 <__aeabi_dadd+0x170>
    45cc:	024a      	lsls	r2, r1, #9
    45ce:	0a56      	lsrs	r6, r2, #9
    45d0:	2e00      	cmp	r6, #0
    45d2:	d100      	bne.n	45d6 <__aeabi_dadd+0x116>
    45d4:	e0b4      	b.n	4740 <__aeabi_dadd+0x280>
    45d6:	0030      	movs	r0, r6
    45d8:	f001 fecc 	bl	6374 <__clzsi2>
    45dc:	0003      	movs	r3, r0
    45de:	3b08      	subs	r3, #8
    45e0:	2b1f      	cmp	r3, #31
    45e2:	dd00      	ble.n	45e6 <__aeabi_dadd+0x126>
    45e4:	e0b5      	b.n	4752 <__aeabi_dadd+0x292>
    45e6:	2220      	movs	r2, #32
    45e8:	0029      	movs	r1, r5
    45ea:	1ad2      	subs	r2, r2, r3
    45ec:	40d1      	lsrs	r1, r2
    45ee:	409e      	lsls	r6, r3
    45f0:	000a      	movs	r2, r1
    45f2:	409d      	lsls	r5, r3
    45f4:	4332      	orrs	r2, r6
    45f6:	429c      	cmp	r4, r3
    45f8:	dd00      	ble.n	45fc <__aeabi_dadd+0x13c>
    45fa:	e0b1      	b.n	4760 <__aeabi_dadd+0x2a0>
    45fc:	1b1c      	subs	r4, r3, r4
    45fe:	1c63      	adds	r3, r4, #1
    4600:	2b1f      	cmp	r3, #31
    4602:	dd00      	ble.n	4606 <__aeabi_dadd+0x146>
    4604:	e0d5      	b.n	47b2 <__aeabi_dadd+0x2f2>
    4606:	2120      	movs	r1, #32
    4608:	0014      	movs	r4, r2
    460a:	0028      	movs	r0, r5
    460c:	1ac9      	subs	r1, r1, r3
    460e:	408c      	lsls	r4, r1
    4610:	40d8      	lsrs	r0, r3
    4612:	408d      	lsls	r5, r1
    4614:	4304      	orrs	r4, r0
    4616:	40da      	lsrs	r2, r3
    4618:	1e68      	subs	r0, r5, #1
    461a:	4185      	sbcs	r5, r0
    461c:	0011      	movs	r1, r2
    461e:	4325      	orrs	r5, r4
    4620:	2400      	movs	r4, #0
    4622:	e776      	b.n	4512 <__aeabi_dadd+0x52>
    4624:	4641      	mov	r1, r8
    4626:	4331      	orrs	r1, r6
    4628:	d100      	bne.n	462c <__aeabi_dadd+0x16c>
    462a:	e234      	b.n	4a96 <__aeabi_dadd+0x5d6>
    462c:	0031      	movs	r1, r6
    462e:	4645      	mov	r5, r8
    4630:	076b      	lsls	r3, r5, #29
    4632:	d000      	beq.n	4636 <__aeabi_dadd+0x176>
    4634:	e76f      	b.n	4516 <__aeabi_dadd+0x56>
    4636:	4656      	mov	r6, sl
    4638:	0748      	lsls	r0, r1, #29
    463a:	08ed      	lsrs	r5, r5, #3
    463c:	08c9      	lsrs	r1, r1, #3
    463e:	4305      	orrs	r5, r0
    4640:	4b86      	ldr	r3, [pc, #536]	; (485c <__aeabi_dadd+0x39c>)
    4642:	429c      	cmp	r4, r3
    4644:	d035      	beq.n	46b2 <__aeabi_dadd+0x1f2>
    4646:	030a      	lsls	r2, r1, #12
    4648:	0564      	lsls	r4, r4, #21
    464a:	0b12      	lsrs	r2, r2, #12
    464c:	0d64      	lsrs	r4, r4, #21
    464e:	e77f      	b.n	4550 <__aeabi_dadd+0x90>
    4650:	4663      	mov	r3, ip
    4652:	1ae3      	subs	r3, r4, r3
    4654:	469b      	mov	fp, r3
    4656:	2b00      	cmp	r3, #0
    4658:	dc00      	bgt.n	465c <__aeabi_dadd+0x19c>
    465a:	e08b      	b.n	4774 <__aeabi_dadd+0x2b4>
    465c:	4667      	mov	r7, ip
    465e:	2f00      	cmp	r7, #0
    4660:	d03c      	beq.n	46dc <__aeabi_dadd+0x21c>
    4662:	4f7e      	ldr	r7, [pc, #504]	; (485c <__aeabi_dadd+0x39c>)
    4664:	42bc      	cmp	r4, r7
    4666:	d100      	bne.n	466a <__aeabi_dadd+0x1aa>
    4668:	e753      	b.n	4512 <__aeabi_dadd+0x52>
    466a:	2780      	movs	r7, #128	; 0x80
    466c:	043f      	lsls	r7, r7, #16
    466e:	4338      	orrs	r0, r7
    4670:	465b      	mov	r3, fp
    4672:	2b38      	cmp	r3, #56	; 0x38
    4674:	dc00      	bgt.n	4678 <__aeabi_dadd+0x1b8>
    4676:	e0f7      	b.n	4868 <__aeabi_dadd+0x3a8>
    4678:	4302      	orrs	r2, r0
    467a:	1e50      	subs	r0, r2, #1
    467c:	4182      	sbcs	r2, r0
    467e:	2000      	movs	r0, #0
    4680:	b2d2      	uxtb	r2, r2
    4682:	1953      	adds	r3, r2, r5
    4684:	1842      	adds	r2, r0, r1
    4686:	42ab      	cmp	r3, r5
    4688:	4189      	sbcs	r1, r1
    468a:	001d      	movs	r5, r3
    468c:	4249      	negs	r1, r1
    468e:	1889      	adds	r1, r1, r2
    4690:	020b      	lsls	r3, r1, #8
    4692:	d5cd      	bpl.n	4630 <__aeabi_dadd+0x170>
    4694:	4b71      	ldr	r3, [pc, #452]	; (485c <__aeabi_dadd+0x39c>)
    4696:	3401      	adds	r4, #1
    4698:	429c      	cmp	r4, r3
    469a:	d100      	bne.n	469e <__aeabi_dadd+0x1de>
    469c:	e13d      	b.n	491a <__aeabi_dadd+0x45a>
    469e:	2001      	movs	r0, #1
    46a0:	4a6f      	ldr	r2, [pc, #444]	; (4860 <__aeabi_dadd+0x3a0>)
    46a2:	086b      	lsrs	r3, r5, #1
    46a4:	400a      	ands	r2, r1
    46a6:	4028      	ands	r0, r5
    46a8:	4318      	orrs	r0, r3
    46aa:	07d5      	lsls	r5, r2, #31
    46ac:	4305      	orrs	r5, r0
    46ae:	0851      	lsrs	r1, r2, #1
    46b0:	e72f      	b.n	4512 <__aeabi_dadd+0x52>
    46b2:	002b      	movs	r3, r5
    46b4:	430b      	orrs	r3, r1
    46b6:	d100      	bne.n	46ba <__aeabi_dadd+0x1fa>
    46b8:	e1cb      	b.n	4a52 <__aeabi_dadd+0x592>
    46ba:	2380      	movs	r3, #128	; 0x80
    46bc:	031b      	lsls	r3, r3, #12
    46be:	430b      	orrs	r3, r1
    46c0:	031a      	lsls	r2, r3, #12
    46c2:	0b12      	lsrs	r2, r2, #12
    46c4:	e744      	b.n	4550 <__aeabi_dadd+0x90>
    46c6:	3e01      	subs	r6, #1
    46c8:	2e00      	cmp	r6, #0
    46ca:	d16d      	bne.n	47a8 <__aeabi_dadd+0x2e8>
    46cc:	1aae      	subs	r6, r5, r2
    46ce:	42b5      	cmp	r5, r6
    46d0:	419b      	sbcs	r3, r3
    46d2:	1a09      	subs	r1, r1, r0
    46d4:	425b      	negs	r3, r3
    46d6:	1ac9      	subs	r1, r1, r3
    46d8:	0035      	movs	r5, r6
    46da:	e775      	b.n	45c8 <__aeabi_dadd+0x108>
    46dc:	0007      	movs	r7, r0
    46de:	4317      	orrs	r7, r2
    46e0:	d100      	bne.n	46e4 <__aeabi_dadd+0x224>
    46e2:	e716      	b.n	4512 <__aeabi_dadd+0x52>
    46e4:	2301      	movs	r3, #1
    46e6:	425b      	negs	r3, r3
    46e8:	469c      	mov	ip, r3
    46ea:	44e3      	add	fp, ip
    46ec:	465b      	mov	r3, fp
    46ee:	2b00      	cmp	r3, #0
    46f0:	d000      	beq.n	46f4 <__aeabi_dadd+0x234>
    46f2:	e0e0      	b.n	48b6 <__aeabi_dadd+0x3f6>
    46f4:	18aa      	adds	r2, r5, r2
    46f6:	42aa      	cmp	r2, r5
    46f8:	419b      	sbcs	r3, r3
    46fa:	1809      	adds	r1, r1, r0
    46fc:	425b      	negs	r3, r3
    46fe:	1859      	adds	r1, r3, r1
    4700:	0015      	movs	r5, r2
    4702:	e7c5      	b.n	4690 <__aeabi_dadd+0x1d0>
    4704:	2e00      	cmp	r6, #0
    4706:	d175      	bne.n	47f4 <__aeabi_dadd+0x334>
    4708:	1c66      	adds	r6, r4, #1
    470a:	0576      	lsls	r6, r6, #21
    470c:	0d76      	lsrs	r6, r6, #21
    470e:	2e01      	cmp	r6, #1
    4710:	dc00      	bgt.n	4714 <__aeabi_dadd+0x254>
    4712:	e0f3      	b.n	48fc <__aeabi_dadd+0x43c>
    4714:	1aae      	subs	r6, r5, r2
    4716:	46b0      	mov	r8, r6
    4718:	4545      	cmp	r5, r8
    471a:	41bf      	sbcs	r7, r7
    471c:	1a0e      	subs	r6, r1, r0
    471e:	427f      	negs	r7, r7
    4720:	1bf6      	subs	r6, r6, r7
    4722:	0237      	lsls	r7, r6, #8
    4724:	d400      	bmi.n	4728 <__aeabi_dadd+0x268>
    4726:	e08f      	b.n	4848 <__aeabi_dadd+0x388>
    4728:	1b55      	subs	r5, r2, r5
    472a:	42aa      	cmp	r2, r5
    472c:	41b6      	sbcs	r6, r6
    472e:	1a41      	subs	r1, r0, r1
    4730:	4276      	negs	r6, r6
    4732:	1b8e      	subs	r6, r1, r6
    4734:	469a      	mov	sl, r3
    4736:	e74b      	b.n	45d0 <__aeabi_dadd+0x110>
    4738:	4656      	mov	r6, sl
    473a:	2200      	movs	r2, #0
    473c:	2500      	movs	r5, #0
    473e:	e707      	b.n	4550 <__aeabi_dadd+0x90>
    4740:	0028      	movs	r0, r5
    4742:	f001 fe17 	bl	6374 <__clzsi2>
    4746:	3020      	adds	r0, #32
    4748:	0003      	movs	r3, r0
    474a:	3b08      	subs	r3, #8
    474c:	2b1f      	cmp	r3, #31
    474e:	dc00      	bgt.n	4752 <__aeabi_dadd+0x292>
    4750:	e749      	b.n	45e6 <__aeabi_dadd+0x126>
    4752:	002a      	movs	r2, r5
    4754:	3828      	subs	r0, #40	; 0x28
    4756:	4082      	lsls	r2, r0
    4758:	2500      	movs	r5, #0
    475a:	429c      	cmp	r4, r3
    475c:	dc00      	bgt.n	4760 <__aeabi_dadd+0x2a0>
    475e:	e74d      	b.n	45fc <__aeabi_dadd+0x13c>
    4760:	493f      	ldr	r1, [pc, #252]	; (4860 <__aeabi_dadd+0x3a0>)
    4762:	1ae4      	subs	r4, r4, r3
    4764:	4011      	ands	r1, r2
    4766:	e6d4      	b.n	4512 <__aeabi_dadd+0x52>
    4768:	4302      	orrs	r2, r0
    476a:	1e50      	subs	r0, r2, #1
    476c:	4182      	sbcs	r2, r0
    476e:	b2d3      	uxtb	r3, r2
    4770:	2200      	movs	r2, #0
    4772:	e722      	b.n	45ba <__aeabi_dadd+0xfa>
    4774:	2b00      	cmp	r3, #0
    4776:	d000      	beq.n	477a <__aeabi_dadd+0x2ba>
    4778:	e0f3      	b.n	4962 <__aeabi_dadd+0x4a2>
    477a:	1c63      	adds	r3, r4, #1
    477c:	469c      	mov	ip, r3
    477e:	055b      	lsls	r3, r3, #21
    4780:	0d5b      	lsrs	r3, r3, #21
    4782:	2b01      	cmp	r3, #1
    4784:	dc00      	bgt.n	4788 <__aeabi_dadd+0x2c8>
    4786:	e09f      	b.n	48c8 <__aeabi_dadd+0x408>
    4788:	4b34      	ldr	r3, [pc, #208]	; (485c <__aeabi_dadd+0x39c>)
    478a:	459c      	cmp	ip, r3
    478c:	d100      	bne.n	4790 <__aeabi_dadd+0x2d0>
    478e:	e0c3      	b.n	4918 <__aeabi_dadd+0x458>
    4790:	18aa      	adds	r2, r5, r2
    4792:	1809      	adds	r1, r1, r0
    4794:	42aa      	cmp	r2, r5
    4796:	4180      	sbcs	r0, r0
    4798:	4240      	negs	r0, r0
    479a:	1841      	adds	r1, r0, r1
    479c:	07cd      	lsls	r5, r1, #31
    479e:	0852      	lsrs	r2, r2, #1
    47a0:	4315      	orrs	r5, r2
    47a2:	0849      	lsrs	r1, r1, #1
    47a4:	4664      	mov	r4, ip
    47a6:	e6b4      	b.n	4512 <__aeabi_dadd+0x52>
    47a8:	4b2c      	ldr	r3, [pc, #176]	; (485c <__aeabi_dadd+0x39c>)
    47aa:	429c      	cmp	r4, r3
    47ac:	d000      	beq.n	47b0 <__aeabi_dadd+0x2f0>
    47ae:	e6ec      	b.n	458a <__aeabi_dadd+0xca>
    47b0:	e6af      	b.n	4512 <__aeabi_dadd+0x52>
    47b2:	0011      	movs	r1, r2
    47b4:	3c1f      	subs	r4, #31
    47b6:	40e1      	lsrs	r1, r4
    47b8:	000c      	movs	r4, r1
    47ba:	2b20      	cmp	r3, #32
    47bc:	d100      	bne.n	47c0 <__aeabi_dadd+0x300>
    47be:	e07f      	b.n	48c0 <__aeabi_dadd+0x400>
    47c0:	2140      	movs	r1, #64	; 0x40
    47c2:	1acb      	subs	r3, r1, r3
    47c4:	409a      	lsls	r2, r3
    47c6:	4315      	orrs	r5, r2
    47c8:	1e6a      	subs	r2, r5, #1
    47ca:	4195      	sbcs	r5, r2
    47cc:	2100      	movs	r1, #0
    47ce:	4325      	orrs	r5, r4
    47d0:	2400      	movs	r4, #0
    47d2:	e72d      	b.n	4630 <__aeabi_dadd+0x170>
    47d4:	0033      	movs	r3, r6
    47d6:	0007      	movs	r7, r0
    47d8:	3b20      	subs	r3, #32
    47da:	40df      	lsrs	r7, r3
    47dc:	003b      	movs	r3, r7
    47de:	2e20      	cmp	r6, #32
    47e0:	d070      	beq.n	48c4 <__aeabi_dadd+0x404>
    47e2:	2740      	movs	r7, #64	; 0x40
    47e4:	1bbe      	subs	r6, r7, r6
    47e6:	40b0      	lsls	r0, r6
    47e8:	4302      	orrs	r2, r0
    47ea:	1e50      	subs	r0, r2, #1
    47ec:	4182      	sbcs	r2, r0
    47ee:	4313      	orrs	r3, r2
    47f0:	2200      	movs	r2, #0
    47f2:	e6e2      	b.n	45ba <__aeabi_dadd+0xfa>
    47f4:	2c00      	cmp	r4, #0
    47f6:	d04f      	beq.n	4898 <__aeabi_dadd+0x3d8>
    47f8:	4c18      	ldr	r4, [pc, #96]	; (485c <__aeabi_dadd+0x39c>)
    47fa:	45a4      	cmp	ip, r4
    47fc:	d100      	bne.n	4800 <__aeabi_dadd+0x340>
    47fe:	e0ab      	b.n	4958 <__aeabi_dadd+0x498>
    4800:	2480      	movs	r4, #128	; 0x80
    4802:	0424      	lsls	r4, r4, #16
    4804:	4276      	negs	r6, r6
    4806:	4321      	orrs	r1, r4
    4808:	2e38      	cmp	r6, #56	; 0x38
    480a:	dd00      	ble.n	480e <__aeabi_dadd+0x34e>
    480c:	e0df      	b.n	49ce <__aeabi_dadd+0x50e>
    480e:	2e1f      	cmp	r6, #31
    4810:	dd00      	ble.n	4814 <__aeabi_dadd+0x354>
    4812:	e143      	b.n	4a9c <__aeabi_dadd+0x5dc>
    4814:	2720      	movs	r7, #32
    4816:	1bbc      	subs	r4, r7, r6
    4818:	46a1      	mov	r9, r4
    481a:	000c      	movs	r4, r1
    481c:	464f      	mov	r7, r9
    481e:	40bc      	lsls	r4, r7
    4820:	46a0      	mov	r8, r4
    4822:	002c      	movs	r4, r5
    4824:	4647      	mov	r7, r8
    4826:	40f4      	lsrs	r4, r6
    4828:	433c      	orrs	r4, r7
    482a:	464f      	mov	r7, r9
    482c:	40bd      	lsls	r5, r7
    482e:	1e6f      	subs	r7, r5, #1
    4830:	41bd      	sbcs	r5, r7
    4832:	40f1      	lsrs	r1, r6
    4834:	432c      	orrs	r4, r5
    4836:	1b15      	subs	r5, r2, r4
    4838:	42aa      	cmp	r2, r5
    483a:	4192      	sbcs	r2, r2
    483c:	1a41      	subs	r1, r0, r1
    483e:	4252      	negs	r2, r2
    4840:	1a89      	subs	r1, r1, r2
    4842:	4664      	mov	r4, ip
    4844:	469a      	mov	sl, r3
    4846:	e6bf      	b.n	45c8 <__aeabi_dadd+0x108>
    4848:	4641      	mov	r1, r8
    484a:	4645      	mov	r5, r8
    484c:	4331      	orrs	r1, r6
    484e:	d000      	beq.n	4852 <__aeabi_dadd+0x392>
    4850:	e6be      	b.n	45d0 <__aeabi_dadd+0x110>
    4852:	2600      	movs	r6, #0
    4854:	2400      	movs	r4, #0
    4856:	2500      	movs	r5, #0
    4858:	e6f2      	b.n	4640 <__aeabi_dadd+0x180>
    485a:	46c0      	nop			; (mov r8, r8)
    485c:	000007ff 	.word	0x000007ff
    4860:	ff7fffff 	.word	0xff7fffff
    4864:	800fffff 	.word	0x800fffff
    4868:	2b1f      	cmp	r3, #31
    486a:	dc59      	bgt.n	4920 <__aeabi_dadd+0x460>
    486c:	2720      	movs	r7, #32
    486e:	1aff      	subs	r7, r7, r3
    4870:	46bc      	mov	ip, r7
    4872:	0007      	movs	r7, r0
    4874:	4663      	mov	r3, ip
    4876:	409f      	lsls	r7, r3
    4878:	465b      	mov	r3, fp
    487a:	46b9      	mov	r9, r7
    487c:	0017      	movs	r7, r2
    487e:	40df      	lsrs	r7, r3
    4880:	46b8      	mov	r8, r7
    4882:	464f      	mov	r7, r9
    4884:	4643      	mov	r3, r8
    4886:	431f      	orrs	r7, r3
    4888:	4663      	mov	r3, ip
    488a:	409a      	lsls	r2, r3
    488c:	1e53      	subs	r3, r2, #1
    488e:	419a      	sbcs	r2, r3
    4890:	465b      	mov	r3, fp
    4892:	433a      	orrs	r2, r7
    4894:	40d8      	lsrs	r0, r3
    4896:	e6f4      	b.n	4682 <__aeabi_dadd+0x1c2>
    4898:	000c      	movs	r4, r1
    489a:	432c      	orrs	r4, r5
    489c:	d05c      	beq.n	4958 <__aeabi_dadd+0x498>
    489e:	43f6      	mvns	r6, r6
    48a0:	2e00      	cmp	r6, #0
    48a2:	d155      	bne.n	4950 <__aeabi_dadd+0x490>
    48a4:	1b55      	subs	r5, r2, r5
    48a6:	42aa      	cmp	r2, r5
    48a8:	41a4      	sbcs	r4, r4
    48aa:	1a41      	subs	r1, r0, r1
    48ac:	4264      	negs	r4, r4
    48ae:	1b09      	subs	r1, r1, r4
    48b0:	469a      	mov	sl, r3
    48b2:	4664      	mov	r4, ip
    48b4:	e688      	b.n	45c8 <__aeabi_dadd+0x108>
    48b6:	4f96      	ldr	r7, [pc, #600]	; (4b10 <__aeabi_dadd+0x650>)
    48b8:	42bc      	cmp	r4, r7
    48ba:	d000      	beq.n	48be <__aeabi_dadd+0x3fe>
    48bc:	e6d8      	b.n	4670 <__aeabi_dadd+0x1b0>
    48be:	e628      	b.n	4512 <__aeabi_dadd+0x52>
    48c0:	2200      	movs	r2, #0
    48c2:	e780      	b.n	47c6 <__aeabi_dadd+0x306>
    48c4:	2000      	movs	r0, #0
    48c6:	e78f      	b.n	47e8 <__aeabi_dadd+0x328>
    48c8:	000b      	movs	r3, r1
    48ca:	432b      	orrs	r3, r5
    48cc:	2c00      	cmp	r4, #0
    48ce:	d000      	beq.n	48d2 <__aeabi_dadd+0x412>
    48d0:	e0c2      	b.n	4a58 <__aeabi_dadd+0x598>
    48d2:	2b00      	cmp	r3, #0
    48d4:	d100      	bne.n	48d8 <__aeabi_dadd+0x418>
    48d6:	e101      	b.n	4adc <__aeabi_dadd+0x61c>
    48d8:	0003      	movs	r3, r0
    48da:	4313      	orrs	r3, r2
    48dc:	d100      	bne.n	48e0 <__aeabi_dadd+0x420>
    48de:	e618      	b.n	4512 <__aeabi_dadd+0x52>
    48e0:	18ab      	adds	r3, r5, r2
    48e2:	42ab      	cmp	r3, r5
    48e4:	41b6      	sbcs	r6, r6
    48e6:	1809      	adds	r1, r1, r0
    48e8:	4276      	negs	r6, r6
    48ea:	1871      	adds	r1, r6, r1
    48ec:	020a      	lsls	r2, r1, #8
    48ee:	d400      	bmi.n	48f2 <__aeabi_dadd+0x432>
    48f0:	e109      	b.n	4b06 <__aeabi_dadd+0x646>
    48f2:	4a88      	ldr	r2, [pc, #544]	; (4b14 <__aeabi_dadd+0x654>)
    48f4:	001d      	movs	r5, r3
    48f6:	4011      	ands	r1, r2
    48f8:	4664      	mov	r4, ip
    48fa:	e60a      	b.n	4512 <__aeabi_dadd+0x52>
    48fc:	2c00      	cmp	r4, #0
    48fe:	d15b      	bne.n	49b8 <__aeabi_dadd+0x4f8>
    4900:	000e      	movs	r6, r1
    4902:	432e      	orrs	r6, r5
    4904:	d000      	beq.n	4908 <__aeabi_dadd+0x448>
    4906:	e08a      	b.n	4a1e <__aeabi_dadd+0x55e>
    4908:	0001      	movs	r1, r0
    490a:	4311      	orrs	r1, r2
    490c:	d100      	bne.n	4910 <__aeabi_dadd+0x450>
    490e:	e0c2      	b.n	4a96 <__aeabi_dadd+0x5d6>
    4910:	0001      	movs	r1, r0
    4912:	0015      	movs	r5, r2
    4914:	469a      	mov	sl, r3
    4916:	e5fc      	b.n	4512 <__aeabi_dadd+0x52>
    4918:	4664      	mov	r4, ip
    491a:	2100      	movs	r1, #0
    491c:	2500      	movs	r5, #0
    491e:	e68f      	b.n	4640 <__aeabi_dadd+0x180>
    4920:	2320      	movs	r3, #32
    4922:	425b      	negs	r3, r3
    4924:	469c      	mov	ip, r3
    4926:	44dc      	add	ip, fp
    4928:	4663      	mov	r3, ip
    492a:	0007      	movs	r7, r0
    492c:	40df      	lsrs	r7, r3
    492e:	465b      	mov	r3, fp
    4930:	46bc      	mov	ip, r7
    4932:	2b20      	cmp	r3, #32
    4934:	d100      	bne.n	4938 <__aeabi_dadd+0x478>
    4936:	e0ac      	b.n	4a92 <__aeabi_dadd+0x5d2>
    4938:	2340      	movs	r3, #64	; 0x40
    493a:	465f      	mov	r7, fp
    493c:	1bdb      	subs	r3, r3, r7
    493e:	4098      	lsls	r0, r3
    4940:	4302      	orrs	r2, r0
    4942:	1e50      	subs	r0, r2, #1
    4944:	4182      	sbcs	r2, r0
    4946:	4663      	mov	r3, ip
    4948:	4313      	orrs	r3, r2
    494a:	001a      	movs	r2, r3
    494c:	2000      	movs	r0, #0
    494e:	e698      	b.n	4682 <__aeabi_dadd+0x1c2>
    4950:	4c6f      	ldr	r4, [pc, #444]	; (4b10 <__aeabi_dadd+0x650>)
    4952:	45a4      	cmp	ip, r4
    4954:	d000      	beq.n	4958 <__aeabi_dadd+0x498>
    4956:	e757      	b.n	4808 <__aeabi_dadd+0x348>
    4958:	0001      	movs	r1, r0
    495a:	0015      	movs	r5, r2
    495c:	4664      	mov	r4, ip
    495e:	469a      	mov	sl, r3
    4960:	e5d7      	b.n	4512 <__aeabi_dadd+0x52>
    4962:	2c00      	cmp	r4, #0
    4964:	d139      	bne.n	49da <__aeabi_dadd+0x51a>
    4966:	000c      	movs	r4, r1
    4968:	432c      	orrs	r4, r5
    496a:	d06e      	beq.n	4a4a <__aeabi_dadd+0x58a>
    496c:	43db      	mvns	r3, r3
    496e:	2b00      	cmp	r3, #0
    4970:	d01a      	beq.n	49a8 <__aeabi_dadd+0x4e8>
    4972:	4c67      	ldr	r4, [pc, #412]	; (4b10 <__aeabi_dadd+0x650>)
    4974:	45a4      	cmp	ip, r4
    4976:	d068      	beq.n	4a4a <__aeabi_dadd+0x58a>
    4978:	2b38      	cmp	r3, #56	; 0x38
    497a:	dd00      	ble.n	497e <__aeabi_dadd+0x4be>
    497c:	e0a4      	b.n	4ac8 <__aeabi_dadd+0x608>
    497e:	2b1f      	cmp	r3, #31
    4980:	dd00      	ble.n	4984 <__aeabi_dadd+0x4c4>
    4982:	e0ae      	b.n	4ae2 <__aeabi_dadd+0x622>
    4984:	2420      	movs	r4, #32
    4986:	000f      	movs	r7, r1
    4988:	1ae4      	subs	r4, r4, r3
    498a:	40a7      	lsls	r7, r4
    498c:	46b9      	mov	r9, r7
    498e:	002f      	movs	r7, r5
    4990:	40df      	lsrs	r7, r3
    4992:	46b8      	mov	r8, r7
    4994:	46a3      	mov	fp, r4
    4996:	464f      	mov	r7, r9
    4998:	4644      	mov	r4, r8
    499a:	4327      	orrs	r7, r4
    499c:	465c      	mov	r4, fp
    499e:	40a5      	lsls	r5, r4
    49a0:	1e6c      	subs	r4, r5, #1
    49a2:	41a5      	sbcs	r5, r4
    49a4:	40d9      	lsrs	r1, r3
    49a6:	433d      	orrs	r5, r7
    49a8:	18ad      	adds	r5, r5, r2
    49aa:	4295      	cmp	r5, r2
    49ac:	419b      	sbcs	r3, r3
    49ae:	1809      	adds	r1, r1, r0
    49b0:	425b      	negs	r3, r3
    49b2:	1859      	adds	r1, r3, r1
    49b4:	4664      	mov	r4, ip
    49b6:	e66b      	b.n	4690 <__aeabi_dadd+0x1d0>
    49b8:	000c      	movs	r4, r1
    49ba:	432c      	orrs	r4, r5
    49bc:	d115      	bne.n	49ea <__aeabi_dadd+0x52a>
    49be:	0001      	movs	r1, r0
    49c0:	4311      	orrs	r1, r2
    49c2:	d07b      	beq.n	4abc <__aeabi_dadd+0x5fc>
    49c4:	0001      	movs	r1, r0
    49c6:	0015      	movs	r5, r2
    49c8:	469a      	mov	sl, r3
    49ca:	4c51      	ldr	r4, [pc, #324]	; (4b10 <__aeabi_dadd+0x650>)
    49cc:	e5a1      	b.n	4512 <__aeabi_dadd+0x52>
    49ce:	430d      	orrs	r5, r1
    49d0:	1e69      	subs	r1, r5, #1
    49d2:	418d      	sbcs	r5, r1
    49d4:	2100      	movs	r1, #0
    49d6:	b2ec      	uxtb	r4, r5
    49d8:	e72d      	b.n	4836 <__aeabi_dadd+0x376>
    49da:	4c4d      	ldr	r4, [pc, #308]	; (4b10 <__aeabi_dadd+0x650>)
    49dc:	45a4      	cmp	ip, r4
    49de:	d034      	beq.n	4a4a <__aeabi_dadd+0x58a>
    49e0:	2480      	movs	r4, #128	; 0x80
    49e2:	0424      	lsls	r4, r4, #16
    49e4:	425b      	negs	r3, r3
    49e6:	4321      	orrs	r1, r4
    49e8:	e7c6      	b.n	4978 <__aeabi_dadd+0x4b8>
    49ea:	0004      	movs	r4, r0
    49ec:	4314      	orrs	r4, r2
    49ee:	d04e      	beq.n	4a8e <__aeabi_dadd+0x5ce>
    49f0:	08ed      	lsrs	r5, r5, #3
    49f2:	074c      	lsls	r4, r1, #29
    49f4:	432c      	orrs	r4, r5
    49f6:	2580      	movs	r5, #128	; 0x80
    49f8:	08c9      	lsrs	r1, r1, #3
    49fa:	032d      	lsls	r5, r5, #12
    49fc:	4229      	tst	r1, r5
    49fe:	d008      	beq.n	4a12 <__aeabi_dadd+0x552>
    4a00:	08c6      	lsrs	r6, r0, #3
    4a02:	422e      	tst	r6, r5
    4a04:	d105      	bne.n	4a12 <__aeabi_dadd+0x552>
    4a06:	08d2      	lsrs	r2, r2, #3
    4a08:	0741      	lsls	r1, r0, #29
    4a0a:	4311      	orrs	r1, r2
    4a0c:	000c      	movs	r4, r1
    4a0e:	469a      	mov	sl, r3
    4a10:	0031      	movs	r1, r6
    4a12:	0f62      	lsrs	r2, r4, #29
    4a14:	00c9      	lsls	r1, r1, #3
    4a16:	00e5      	lsls	r5, r4, #3
    4a18:	4311      	orrs	r1, r2
    4a1a:	4c3d      	ldr	r4, [pc, #244]	; (4b10 <__aeabi_dadd+0x650>)
    4a1c:	e579      	b.n	4512 <__aeabi_dadd+0x52>
    4a1e:	0006      	movs	r6, r0
    4a20:	4316      	orrs	r6, r2
    4a22:	d100      	bne.n	4a26 <__aeabi_dadd+0x566>
    4a24:	e575      	b.n	4512 <__aeabi_dadd+0x52>
    4a26:	1aae      	subs	r6, r5, r2
    4a28:	46b0      	mov	r8, r6
    4a2a:	4545      	cmp	r5, r8
    4a2c:	41bf      	sbcs	r7, r7
    4a2e:	1a0e      	subs	r6, r1, r0
    4a30:	427f      	negs	r7, r7
    4a32:	1bf6      	subs	r6, r6, r7
    4a34:	0237      	lsls	r7, r6, #8
    4a36:	d400      	bmi.n	4a3a <__aeabi_dadd+0x57a>
    4a38:	e5f4      	b.n	4624 <__aeabi_dadd+0x164>
    4a3a:	1b55      	subs	r5, r2, r5
    4a3c:	42aa      	cmp	r2, r5
    4a3e:	41b6      	sbcs	r6, r6
    4a40:	1a41      	subs	r1, r0, r1
    4a42:	4276      	negs	r6, r6
    4a44:	1b89      	subs	r1, r1, r6
    4a46:	469a      	mov	sl, r3
    4a48:	e563      	b.n	4512 <__aeabi_dadd+0x52>
    4a4a:	0001      	movs	r1, r0
    4a4c:	0015      	movs	r5, r2
    4a4e:	4664      	mov	r4, ip
    4a50:	e55f      	b.n	4512 <__aeabi_dadd+0x52>
    4a52:	2200      	movs	r2, #0
    4a54:	2500      	movs	r5, #0
    4a56:	e57b      	b.n	4550 <__aeabi_dadd+0x90>
    4a58:	2b00      	cmp	r3, #0
    4a5a:	d03b      	beq.n	4ad4 <__aeabi_dadd+0x614>
    4a5c:	0003      	movs	r3, r0
    4a5e:	4313      	orrs	r3, r2
    4a60:	d015      	beq.n	4a8e <__aeabi_dadd+0x5ce>
    4a62:	08ed      	lsrs	r5, r5, #3
    4a64:	074b      	lsls	r3, r1, #29
    4a66:	432b      	orrs	r3, r5
    4a68:	2580      	movs	r5, #128	; 0x80
    4a6a:	08c9      	lsrs	r1, r1, #3
    4a6c:	032d      	lsls	r5, r5, #12
    4a6e:	4229      	tst	r1, r5
    4a70:	d007      	beq.n	4a82 <__aeabi_dadd+0x5c2>
    4a72:	08c4      	lsrs	r4, r0, #3
    4a74:	422c      	tst	r4, r5
    4a76:	d104      	bne.n	4a82 <__aeabi_dadd+0x5c2>
    4a78:	0741      	lsls	r1, r0, #29
    4a7a:	000b      	movs	r3, r1
    4a7c:	0021      	movs	r1, r4
    4a7e:	08d2      	lsrs	r2, r2, #3
    4a80:	4313      	orrs	r3, r2
    4a82:	00c9      	lsls	r1, r1, #3
    4a84:	0f5a      	lsrs	r2, r3, #29
    4a86:	4311      	orrs	r1, r2
    4a88:	00dd      	lsls	r5, r3, #3
    4a8a:	4c21      	ldr	r4, [pc, #132]	; (4b10 <__aeabi_dadd+0x650>)
    4a8c:	e541      	b.n	4512 <__aeabi_dadd+0x52>
    4a8e:	4c20      	ldr	r4, [pc, #128]	; (4b10 <__aeabi_dadd+0x650>)
    4a90:	e53f      	b.n	4512 <__aeabi_dadd+0x52>
    4a92:	2000      	movs	r0, #0
    4a94:	e754      	b.n	4940 <__aeabi_dadd+0x480>
    4a96:	2600      	movs	r6, #0
    4a98:	2500      	movs	r5, #0
    4a9a:	e5d1      	b.n	4640 <__aeabi_dadd+0x180>
    4a9c:	0034      	movs	r4, r6
    4a9e:	000f      	movs	r7, r1
    4aa0:	3c20      	subs	r4, #32
    4aa2:	40e7      	lsrs	r7, r4
    4aa4:	003c      	movs	r4, r7
    4aa6:	2e20      	cmp	r6, #32
    4aa8:	d02b      	beq.n	4b02 <__aeabi_dadd+0x642>
    4aaa:	2740      	movs	r7, #64	; 0x40
    4aac:	1bbe      	subs	r6, r7, r6
    4aae:	40b1      	lsls	r1, r6
    4ab0:	430d      	orrs	r5, r1
    4ab2:	1e69      	subs	r1, r5, #1
    4ab4:	418d      	sbcs	r5, r1
    4ab6:	2100      	movs	r1, #0
    4ab8:	432c      	orrs	r4, r5
    4aba:	e6bc      	b.n	4836 <__aeabi_dadd+0x376>
    4abc:	2180      	movs	r1, #128	; 0x80
    4abe:	2600      	movs	r6, #0
    4ac0:	0309      	lsls	r1, r1, #12
    4ac2:	4c13      	ldr	r4, [pc, #76]	; (4b10 <__aeabi_dadd+0x650>)
    4ac4:	2500      	movs	r5, #0
    4ac6:	e5bb      	b.n	4640 <__aeabi_dadd+0x180>
    4ac8:	430d      	orrs	r5, r1
    4aca:	1e69      	subs	r1, r5, #1
    4acc:	418d      	sbcs	r5, r1
    4ace:	2100      	movs	r1, #0
    4ad0:	b2ed      	uxtb	r5, r5
    4ad2:	e769      	b.n	49a8 <__aeabi_dadd+0x4e8>
    4ad4:	0001      	movs	r1, r0
    4ad6:	0015      	movs	r5, r2
    4ad8:	4c0d      	ldr	r4, [pc, #52]	; (4b10 <__aeabi_dadd+0x650>)
    4ada:	e51a      	b.n	4512 <__aeabi_dadd+0x52>
    4adc:	0001      	movs	r1, r0
    4ade:	0015      	movs	r5, r2
    4ae0:	e517      	b.n	4512 <__aeabi_dadd+0x52>
    4ae2:	001c      	movs	r4, r3
    4ae4:	000f      	movs	r7, r1
    4ae6:	3c20      	subs	r4, #32
    4ae8:	40e7      	lsrs	r7, r4
    4aea:	003c      	movs	r4, r7
    4aec:	2b20      	cmp	r3, #32
    4aee:	d00c      	beq.n	4b0a <__aeabi_dadd+0x64a>
    4af0:	2740      	movs	r7, #64	; 0x40
    4af2:	1afb      	subs	r3, r7, r3
    4af4:	4099      	lsls	r1, r3
    4af6:	430d      	orrs	r5, r1
    4af8:	1e69      	subs	r1, r5, #1
    4afa:	418d      	sbcs	r5, r1
    4afc:	2100      	movs	r1, #0
    4afe:	4325      	orrs	r5, r4
    4b00:	e752      	b.n	49a8 <__aeabi_dadd+0x4e8>
    4b02:	2100      	movs	r1, #0
    4b04:	e7d4      	b.n	4ab0 <__aeabi_dadd+0x5f0>
    4b06:	001d      	movs	r5, r3
    4b08:	e592      	b.n	4630 <__aeabi_dadd+0x170>
    4b0a:	2100      	movs	r1, #0
    4b0c:	e7f3      	b.n	4af6 <__aeabi_dadd+0x636>
    4b0e:	46c0      	nop			; (mov r8, r8)
    4b10:	000007ff 	.word	0x000007ff
    4b14:	ff7fffff 	.word	0xff7fffff

00004b18 <__aeabi_ddiv>:
    4b18:	b5f0      	push	{r4, r5, r6, r7, lr}
    4b1a:	4656      	mov	r6, sl
    4b1c:	464d      	mov	r5, r9
    4b1e:	4644      	mov	r4, r8
    4b20:	465f      	mov	r7, fp
    4b22:	b4f0      	push	{r4, r5, r6, r7}
    4b24:	001d      	movs	r5, r3
    4b26:	030e      	lsls	r6, r1, #12
    4b28:	004c      	lsls	r4, r1, #1
    4b2a:	0fcb      	lsrs	r3, r1, #31
    4b2c:	b087      	sub	sp, #28
    4b2e:	0007      	movs	r7, r0
    4b30:	4692      	mov	sl, r2
    4b32:	4681      	mov	r9, r0
    4b34:	0b36      	lsrs	r6, r6, #12
    4b36:	0d64      	lsrs	r4, r4, #21
    4b38:	4698      	mov	r8, r3
    4b3a:	d06a      	beq.n	4c12 <__aeabi_ddiv+0xfa>
    4b3c:	4b6d      	ldr	r3, [pc, #436]	; (4cf4 <__aeabi_ddiv+0x1dc>)
    4b3e:	429c      	cmp	r4, r3
    4b40:	d035      	beq.n	4bae <__aeabi_ddiv+0x96>
    4b42:	2280      	movs	r2, #128	; 0x80
    4b44:	0f43      	lsrs	r3, r0, #29
    4b46:	0412      	lsls	r2, r2, #16
    4b48:	4313      	orrs	r3, r2
    4b4a:	00f6      	lsls	r6, r6, #3
    4b4c:	431e      	orrs	r6, r3
    4b4e:	00c3      	lsls	r3, r0, #3
    4b50:	4699      	mov	r9, r3
    4b52:	4b69      	ldr	r3, [pc, #420]	; (4cf8 <__aeabi_ddiv+0x1e0>)
    4b54:	2700      	movs	r7, #0
    4b56:	469c      	mov	ip, r3
    4b58:	2300      	movs	r3, #0
    4b5a:	4464      	add	r4, ip
    4b5c:	9302      	str	r3, [sp, #8]
    4b5e:	032b      	lsls	r3, r5, #12
    4b60:	0068      	lsls	r0, r5, #1
    4b62:	0b1b      	lsrs	r3, r3, #12
    4b64:	0fed      	lsrs	r5, r5, #31
    4b66:	4651      	mov	r1, sl
    4b68:	469b      	mov	fp, r3
    4b6a:	0d40      	lsrs	r0, r0, #21
    4b6c:	9500      	str	r5, [sp, #0]
    4b6e:	d100      	bne.n	4b72 <__aeabi_ddiv+0x5a>
    4b70:	e078      	b.n	4c64 <__aeabi_ddiv+0x14c>
    4b72:	4b60      	ldr	r3, [pc, #384]	; (4cf4 <__aeabi_ddiv+0x1dc>)
    4b74:	4298      	cmp	r0, r3
    4b76:	d06c      	beq.n	4c52 <__aeabi_ddiv+0x13a>
    4b78:	465b      	mov	r3, fp
    4b7a:	00da      	lsls	r2, r3, #3
    4b7c:	0f4b      	lsrs	r3, r1, #29
    4b7e:	2180      	movs	r1, #128	; 0x80
    4b80:	0409      	lsls	r1, r1, #16
    4b82:	430b      	orrs	r3, r1
    4b84:	4313      	orrs	r3, r2
    4b86:	469b      	mov	fp, r3
    4b88:	4653      	mov	r3, sl
    4b8a:	00d9      	lsls	r1, r3, #3
    4b8c:	4b5a      	ldr	r3, [pc, #360]	; (4cf8 <__aeabi_ddiv+0x1e0>)
    4b8e:	469c      	mov	ip, r3
    4b90:	2300      	movs	r3, #0
    4b92:	4460      	add	r0, ip
    4b94:	4642      	mov	r2, r8
    4b96:	1a20      	subs	r0, r4, r0
    4b98:	406a      	eors	r2, r5
    4b9a:	4692      	mov	sl, r2
    4b9c:	9001      	str	r0, [sp, #4]
    4b9e:	431f      	orrs	r7, r3
    4ba0:	2f0f      	cmp	r7, #15
    4ba2:	d900      	bls.n	4ba6 <__aeabi_ddiv+0x8e>
    4ba4:	e0b0      	b.n	4d08 <__aeabi_ddiv+0x1f0>
    4ba6:	4855      	ldr	r0, [pc, #340]	; (4cfc <__aeabi_ddiv+0x1e4>)
    4ba8:	00bf      	lsls	r7, r7, #2
    4baa:	59c0      	ldr	r0, [r0, r7]
    4bac:	4687      	mov	pc, r0
    4bae:	4337      	orrs	r7, r6
    4bb0:	d000      	beq.n	4bb4 <__aeabi_ddiv+0x9c>
    4bb2:	e088      	b.n	4cc6 <__aeabi_ddiv+0x1ae>
    4bb4:	2300      	movs	r3, #0
    4bb6:	4699      	mov	r9, r3
    4bb8:	3302      	adds	r3, #2
    4bba:	2708      	movs	r7, #8
    4bbc:	2600      	movs	r6, #0
    4bbe:	9302      	str	r3, [sp, #8]
    4bc0:	e7cd      	b.n	4b5e <__aeabi_ddiv+0x46>
    4bc2:	4643      	mov	r3, r8
    4bc4:	46b3      	mov	fp, r6
    4bc6:	4649      	mov	r1, r9
    4bc8:	9300      	str	r3, [sp, #0]
    4bca:	9b02      	ldr	r3, [sp, #8]
    4bcc:	9a00      	ldr	r2, [sp, #0]
    4bce:	4692      	mov	sl, r2
    4bd0:	2b02      	cmp	r3, #2
    4bd2:	d000      	beq.n	4bd6 <__aeabi_ddiv+0xbe>
    4bd4:	e1bf      	b.n	4f56 <__aeabi_ddiv+0x43e>
    4bd6:	2100      	movs	r1, #0
    4bd8:	4653      	mov	r3, sl
    4bda:	2201      	movs	r2, #1
    4bdc:	2600      	movs	r6, #0
    4bde:	4689      	mov	r9, r1
    4be0:	401a      	ands	r2, r3
    4be2:	4b44      	ldr	r3, [pc, #272]	; (4cf4 <__aeabi_ddiv+0x1dc>)
    4be4:	2100      	movs	r1, #0
    4be6:	0336      	lsls	r6, r6, #12
    4be8:	0d0c      	lsrs	r4, r1, #20
    4bea:	0524      	lsls	r4, r4, #20
    4bec:	0b36      	lsrs	r6, r6, #12
    4bee:	4326      	orrs	r6, r4
    4bf0:	4c43      	ldr	r4, [pc, #268]	; (4d00 <__aeabi_ddiv+0x1e8>)
    4bf2:	051b      	lsls	r3, r3, #20
    4bf4:	4026      	ands	r6, r4
    4bf6:	431e      	orrs	r6, r3
    4bf8:	0076      	lsls	r6, r6, #1
    4bfa:	07d2      	lsls	r2, r2, #31
    4bfc:	0876      	lsrs	r6, r6, #1
    4bfe:	4316      	orrs	r6, r2
    4c00:	4648      	mov	r0, r9
    4c02:	0031      	movs	r1, r6
    4c04:	b007      	add	sp, #28
    4c06:	bc3c      	pop	{r2, r3, r4, r5}
    4c08:	4690      	mov	r8, r2
    4c0a:	4699      	mov	r9, r3
    4c0c:	46a2      	mov	sl, r4
    4c0e:	46ab      	mov	fp, r5
    4c10:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4c12:	0033      	movs	r3, r6
    4c14:	4303      	orrs	r3, r0
    4c16:	d04f      	beq.n	4cb8 <__aeabi_ddiv+0x1a0>
    4c18:	2e00      	cmp	r6, #0
    4c1a:	d100      	bne.n	4c1e <__aeabi_ddiv+0x106>
    4c1c:	e1bc      	b.n	4f98 <__aeabi_ddiv+0x480>
    4c1e:	0030      	movs	r0, r6
    4c20:	f001 fba8 	bl	6374 <__clzsi2>
    4c24:	0003      	movs	r3, r0
    4c26:	3b0b      	subs	r3, #11
    4c28:	2b1c      	cmp	r3, #28
    4c2a:	dd00      	ble.n	4c2e <__aeabi_ddiv+0x116>
    4c2c:	e1ad      	b.n	4f8a <__aeabi_ddiv+0x472>
    4c2e:	221d      	movs	r2, #29
    4c30:	0001      	movs	r1, r0
    4c32:	1ad3      	subs	r3, r2, r3
    4c34:	3908      	subs	r1, #8
    4c36:	003a      	movs	r2, r7
    4c38:	408f      	lsls	r7, r1
    4c3a:	408e      	lsls	r6, r1
    4c3c:	40da      	lsrs	r2, r3
    4c3e:	46b9      	mov	r9, r7
    4c40:	4316      	orrs	r6, r2
    4c42:	4b30      	ldr	r3, [pc, #192]	; (4d04 <__aeabi_ddiv+0x1ec>)
    4c44:	2700      	movs	r7, #0
    4c46:	469c      	mov	ip, r3
    4c48:	2300      	movs	r3, #0
    4c4a:	4460      	add	r0, ip
    4c4c:	4244      	negs	r4, r0
    4c4e:	9302      	str	r3, [sp, #8]
    4c50:	e785      	b.n	4b5e <__aeabi_ddiv+0x46>
    4c52:	4653      	mov	r3, sl
    4c54:	465a      	mov	r2, fp
    4c56:	4313      	orrs	r3, r2
    4c58:	d12c      	bne.n	4cb4 <__aeabi_ddiv+0x19c>
    4c5a:	2300      	movs	r3, #0
    4c5c:	2100      	movs	r1, #0
    4c5e:	469b      	mov	fp, r3
    4c60:	3302      	adds	r3, #2
    4c62:	e797      	b.n	4b94 <__aeabi_ddiv+0x7c>
    4c64:	430b      	orrs	r3, r1
    4c66:	d020      	beq.n	4caa <__aeabi_ddiv+0x192>
    4c68:	465b      	mov	r3, fp
    4c6a:	2b00      	cmp	r3, #0
    4c6c:	d100      	bne.n	4c70 <__aeabi_ddiv+0x158>
    4c6e:	e19e      	b.n	4fae <__aeabi_ddiv+0x496>
    4c70:	4658      	mov	r0, fp
    4c72:	f001 fb7f 	bl	6374 <__clzsi2>
    4c76:	0003      	movs	r3, r0
    4c78:	3b0b      	subs	r3, #11
    4c7a:	2b1c      	cmp	r3, #28
    4c7c:	dd00      	ble.n	4c80 <__aeabi_ddiv+0x168>
    4c7e:	e18f      	b.n	4fa0 <__aeabi_ddiv+0x488>
    4c80:	0002      	movs	r2, r0
    4c82:	4659      	mov	r1, fp
    4c84:	3a08      	subs	r2, #8
    4c86:	4091      	lsls	r1, r2
    4c88:	468b      	mov	fp, r1
    4c8a:	211d      	movs	r1, #29
    4c8c:	1acb      	subs	r3, r1, r3
    4c8e:	4651      	mov	r1, sl
    4c90:	40d9      	lsrs	r1, r3
    4c92:	000b      	movs	r3, r1
    4c94:	4659      	mov	r1, fp
    4c96:	430b      	orrs	r3, r1
    4c98:	4651      	mov	r1, sl
    4c9a:	469b      	mov	fp, r3
    4c9c:	4091      	lsls	r1, r2
    4c9e:	4b19      	ldr	r3, [pc, #100]	; (4d04 <__aeabi_ddiv+0x1ec>)
    4ca0:	469c      	mov	ip, r3
    4ca2:	4460      	add	r0, ip
    4ca4:	4240      	negs	r0, r0
    4ca6:	2300      	movs	r3, #0
    4ca8:	e774      	b.n	4b94 <__aeabi_ddiv+0x7c>
    4caa:	2300      	movs	r3, #0
    4cac:	2100      	movs	r1, #0
    4cae:	469b      	mov	fp, r3
    4cb0:	3301      	adds	r3, #1
    4cb2:	e76f      	b.n	4b94 <__aeabi_ddiv+0x7c>
    4cb4:	2303      	movs	r3, #3
    4cb6:	e76d      	b.n	4b94 <__aeabi_ddiv+0x7c>
    4cb8:	2300      	movs	r3, #0
    4cba:	4699      	mov	r9, r3
    4cbc:	3301      	adds	r3, #1
    4cbe:	2704      	movs	r7, #4
    4cc0:	2600      	movs	r6, #0
    4cc2:	9302      	str	r3, [sp, #8]
    4cc4:	e74b      	b.n	4b5e <__aeabi_ddiv+0x46>
    4cc6:	2303      	movs	r3, #3
    4cc8:	270c      	movs	r7, #12
    4cca:	9302      	str	r3, [sp, #8]
    4ccc:	e747      	b.n	4b5e <__aeabi_ddiv+0x46>
    4cce:	2201      	movs	r2, #1
    4cd0:	1ad5      	subs	r5, r2, r3
    4cd2:	2d38      	cmp	r5, #56	; 0x38
    4cd4:	dc00      	bgt.n	4cd8 <__aeabi_ddiv+0x1c0>
    4cd6:	e1b0      	b.n	503a <__aeabi_ddiv+0x522>
    4cd8:	4653      	mov	r3, sl
    4cda:	401a      	ands	r2, r3
    4cdc:	2100      	movs	r1, #0
    4cde:	2300      	movs	r3, #0
    4ce0:	2600      	movs	r6, #0
    4ce2:	4689      	mov	r9, r1
    4ce4:	e77e      	b.n	4be4 <__aeabi_ddiv+0xcc>
    4ce6:	2300      	movs	r3, #0
    4ce8:	2680      	movs	r6, #128	; 0x80
    4cea:	4699      	mov	r9, r3
    4cec:	2200      	movs	r2, #0
    4cee:	0336      	lsls	r6, r6, #12
    4cf0:	4b00      	ldr	r3, [pc, #0]	; (4cf4 <__aeabi_ddiv+0x1dc>)
    4cf2:	e777      	b.n	4be4 <__aeabi_ddiv+0xcc>
    4cf4:	000007ff 	.word	0x000007ff
    4cf8:	fffffc01 	.word	0xfffffc01
    4cfc:	000065c8 	.word	0x000065c8
    4d00:	800fffff 	.word	0x800fffff
    4d04:	000003f3 	.word	0x000003f3
    4d08:	455e      	cmp	r6, fp
    4d0a:	d900      	bls.n	4d0e <__aeabi_ddiv+0x1f6>
    4d0c:	e172      	b.n	4ff4 <__aeabi_ddiv+0x4dc>
    4d0e:	d100      	bne.n	4d12 <__aeabi_ddiv+0x1fa>
    4d10:	e16d      	b.n	4fee <__aeabi_ddiv+0x4d6>
    4d12:	9b01      	ldr	r3, [sp, #4]
    4d14:	464d      	mov	r5, r9
    4d16:	3b01      	subs	r3, #1
    4d18:	9301      	str	r3, [sp, #4]
    4d1a:	2300      	movs	r3, #0
    4d1c:	0034      	movs	r4, r6
    4d1e:	9302      	str	r3, [sp, #8]
    4d20:	465b      	mov	r3, fp
    4d22:	021e      	lsls	r6, r3, #8
    4d24:	0e0b      	lsrs	r3, r1, #24
    4d26:	431e      	orrs	r6, r3
    4d28:	020b      	lsls	r3, r1, #8
    4d2a:	9303      	str	r3, [sp, #12]
    4d2c:	0c33      	lsrs	r3, r6, #16
    4d2e:	4699      	mov	r9, r3
    4d30:	0433      	lsls	r3, r6, #16
    4d32:	0c1b      	lsrs	r3, r3, #16
    4d34:	4649      	mov	r1, r9
    4d36:	0020      	movs	r0, r4
    4d38:	9300      	str	r3, [sp, #0]
    4d3a:	f001 fa8f 	bl	625c <__aeabi_uidiv>
    4d3e:	9b00      	ldr	r3, [sp, #0]
    4d40:	0037      	movs	r7, r6
    4d42:	4343      	muls	r3, r0
    4d44:	0006      	movs	r6, r0
    4d46:	4649      	mov	r1, r9
    4d48:	0020      	movs	r0, r4
    4d4a:	4698      	mov	r8, r3
    4d4c:	f001 fb0c 	bl	6368 <__aeabi_uidivmod>
    4d50:	0c2c      	lsrs	r4, r5, #16
    4d52:	0409      	lsls	r1, r1, #16
    4d54:	430c      	orrs	r4, r1
    4d56:	45a0      	cmp	r8, r4
    4d58:	d909      	bls.n	4d6e <__aeabi_ddiv+0x256>
    4d5a:	19e4      	adds	r4, r4, r7
    4d5c:	1e73      	subs	r3, r6, #1
    4d5e:	42a7      	cmp	r7, r4
    4d60:	d900      	bls.n	4d64 <__aeabi_ddiv+0x24c>
    4d62:	e15c      	b.n	501e <__aeabi_ddiv+0x506>
    4d64:	45a0      	cmp	r8, r4
    4d66:	d800      	bhi.n	4d6a <__aeabi_ddiv+0x252>
    4d68:	e159      	b.n	501e <__aeabi_ddiv+0x506>
    4d6a:	3e02      	subs	r6, #2
    4d6c:	19e4      	adds	r4, r4, r7
    4d6e:	4643      	mov	r3, r8
    4d70:	1ae4      	subs	r4, r4, r3
    4d72:	4649      	mov	r1, r9
    4d74:	0020      	movs	r0, r4
    4d76:	f001 fa71 	bl	625c <__aeabi_uidiv>
    4d7a:	0003      	movs	r3, r0
    4d7c:	9a00      	ldr	r2, [sp, #0]
    4d7e:	4680      	mov	r8, r0
    4d80:	4353      	muls	r3, r2
    4d82:	4649      	mov	r1, r9
    4d84:	0020      	movs	r0, r4
    4d86:	469b      	mov	fp, r3
    4d88:	f001 faee 	bl	6368 <__aeabi_uidivmod>
    4d8c:	042a      	lsls	r2, r5, #16
    4d8e:	0409      	lsls	r1, r1, #16
    4d90:	0c12      	lsrs	r2, r2, #16
    4d92:	430a      	orrs	r2, r1
    4d94:	4593      	cmp	fp, r2
    4d96:	d90d      	bls.n	4db4 <__aeabi_ddiv+0x29c>
    4d98:	4643      	mov	r3, r8
    4d9a:	19d2      	adds	r2, r2, r7
    4d9c:	3b01      	subs	r3, #1
    4d9e:	4297      	cmp	r7, r2
    4da0:	d900      	bls.n	4da4 <__aeabi_ddiv+0x28c>
    4da2:	e13a      	b.n	501a <__aeabi_ddiv+0x502>
    4da4:	4593      	cmp	fp, r2
    4da6:	d800      	bhi.n	4daa <__aeabi_ddiv+0x292>
    4da8:	e137      	b.n	501a <__aeabi_ddiv+0x502>
    4daa:	2302      	movs	r3, #2
    4dac:	425b      	negs	r3, r3
    4dae:	469c      	mov	ip, r3
    4db0:	19d2      	adds	r2, r2, r7
    4db2:	44e0      	add	r8, ip
    4db4:	465b      	mov	r3, fp
    4db6:	1ad2      	subs	r2, r2, r3
    4db8:	4643      	mov	r3, r8
    4dba:	0436      	lsls	r6, r6, #16
    4dbc:	4333      	orrs	r3, r6
    4dbe:	469b      	mov	fp, r3
    4dc0:	9903      	ldr	r1, [sp, #12]
    4dc2:	0c18      	lsrs	r0, r3, #16
    4dc4:	0c0b      	lsrs	r3, r1, #16
    4dc6:	001d      	movs	r5, r3
    4dc8:	9305      	str	r3, [sp, #20]
    4dca:	0409      	lsls	r1, r1, #16
    4dcc:	465b      	mov	r3, fp
    4dce:	0c09      	lsrs	r1, r1, #16
    4dd0:	000c      	movs	r4, r1
    4dd2:	041b      	lsls	r3, r3, #16
    4dd4:	0c1b      	lsrs	r3, r3, #16
    4dd6:	4344      	muls	r4, r0
    4dd8:	9104      	str	r1, [sp, #16]
    4dda:	4359      	muls	r1, r3
    4ddc:	436b      	muls	r3, r5
    4dde:	4368      	muls	r0, r5
    4de0:	191b      	adds	r3, r3, r4
    4de2:	0c0d      	lsrs	r5, r1, #16
    4de4:	18eb      	adds	r3, r5, r3
    4de6:	429c      	cmp	r4, r3
    4de8:	d903      	bls.n	4df2 <__aeabi_ddiv+0x2da>
    4dea:	2480      	movs	r4, #128	; 0x80
    4dec:	0264      	lsls	r4, r4, #9
    4dee:	46a4      	mov	ip, r4
    4df0:	4460      	add	r0, ip
    4df2:	0c1c      	lsrs	r4, r3, #16
    4df4:	0409      	lsls	r1, r1, #16
    4df6:	041b      	lsls	r3, r3, #16
    4df8:	0c09      	lsrs	r1, r1, #16
    4dfa:	1820      	adds	r0, r4, r0
    4dfc:	185d      	adds	r5, r3, r1
    4dfe:	4282      	cmp	r2, r0
    4e00:	d200      	bcs.n	4e04 <__aeabi_ddiv+0x2ec>
    4e02:	e0de      	b.n	4fc2 <__aeabi_ddiv+0x4aa>
    4e04:	d100      	bne.n	4e08 <__aeabi_ddiv+0x2f0>
    4e06:	e0d7      	b.n	4fb8 <__aeabi_ddiv+0x4a0>
    4e08:	1a16      	subs	r6, r2, r0
    4e0a:	9b02      	ldr	r3, [sp, #8]
    4e0c:	469c      	mov	ip, r3
    4e0e:	1b5d      	subs	r5, r3, r5
    4e10:	45ac      	cmp	ip, r5
    4e12:	419b      	sbcs	r3, r3
    4e14:	425b      	negs	r3, r3
    4e16:	1af6      	subs	r6, r6, r3
    4e18:	42b7      	cmp	r7, r6
    4e1a:	d100      	bne.n	4e1e <__aeabi_ddiv+0x306>
    4e1c:	e106      	b.n	502c <__aeabi_ddiv+0x514>
    4e1e:	4649      	mov	r1, r9
    4e20:	0030      	movs	r0, r6
    4e22:	f001 fa1b 	bl	625c <__aeabi_uidiv>
    4e26:	9b00      	ldr	r3, [sp, #0]
    4e28:	0004      	movs	r4, r0
    4e2a:	4343      	muls	r3, r0
    4e2c:	4649      	mov	r1, r9
    4e2e:	0030      	movs	r0, r6
    4e30:	4698      	mov	r8, r3
    4e32:	f001 fa99 	bl	6368 <__aeabi_uidivmod>
    4e36:	0c2e      	lsrs	r6, r5, #16
    4e38:	0409      	lsls	r1, r1, #16
    4e3a:	430e      	orrs	r6, r1
    4e3c:	45b0      	cmp	r8, r6
    4e3e:	d909      	bls.n	4e54 <__aeabi_ddiv+0x33c>
    4e40:	19f6      	adds	r6, r6, r7
    4e42:	1e63      	subs	r3, r4, #1
    4e44:	42b7      	cmp	r7, r6
    4e46:	d900      	bls.n	4e4a <__aeabi_ddiv+0x332>
    4e48:	e0f3      	b.n	5032 <__aeabi_ddiv+0x51a>
    4e4a:	45b0      	cmp	r8, r6
    4e4c:	d800      	bhi.n	4e50 <__aeabi_ddiv+0x338>
    4e4e:	e0f0      	b.n	5032 <__aeabi_ddiv+0x51a>
    4e50:	3c02      	subs	r4, #2
    4e52:	19f6      	adds	r6, r6, r7
    4e54:	4643      	mov	r3, r8
    4e56:	1af3      	subs	r3, r6, r3
    4e58:	4649      	mov	r1, r9
    4e5a:	0018      	movs	r0, r3
    4e5c:	9302      	str	r3, [sp, #8]
    4e5e:	f001 f9fd 	bl	625c <__aeabi_uidiv>
    4e62:	9b00      	ldr	r3, [sp, #0]
    4e64:	0006      	movs	r6, r0
    4e66:	4343      	muls	r3, r0
    4e68:	4649      	mov	r1, r9
    4e6a:	9802      	ldr	r0, [sp, #8]
    4e6c:	4698      	mov	r8, r3
    4e6e:	f001 fa7b 	bl	6368 <__aeabi_uidivmod>
    4e72:	042d      	lsls	r5, r5, #16
    4e74:	0409      	lsls	r1, r1, #16
    4e76:	0c2d      	lsrs	r5, r5, #16
    4e78:	430d      	orrs	r5, r1
    4e7a:	45a8      	cmp	r8, r5
    4e7c:	d909      	bls.n	4e92 <__aeabi_ddiv+0x37a>
    4e7e:	19ed      	adds	r5, r5, r7
    4e80:	1e73      	subs	r3, r6, #1
    4e82:	42af      	cmp	r7, r5
    4e84:	d900      	bls.n	4e88 <__aeabi_ddiv+0x370>
    4e86:	e0d6      	b.n	5036 <__aeabi_ddiv+0x51e>
    4e88:	45a8      	cmp	r8, r5
    4e8a:	d800      	bhi.n	4e8e <__aeabi_ddiv+0x376>
    4e8c:	e0d3      	b.n	5036 <__aeabi_ddiv+0x51e>
    4e8e:	3e02      	subs	r6, #2
    4e90:	19ed      	adds	r5, r5, r7
    4e92:	0424      	lsls	r4, r4, #16
    4e94:	0021      	movs	r1, r4
    4e96:	4643      	mov	r3, r8
    4e98:	4331      	orrs	r1, r6
    4e9a:	9e04      	ldr	r6, [sp, #16]
    4e9c:	9a05      	ldr	r2, [sp, #20]
    4e9e:	0030      	movs	r0, r6
    4ea0:	1aed      	subs	r5, r5, r3
    4ea2:	040b      	lsls	r3, r1, #16
    4ea4:	0c0c      	lsrs	r4, r1, #16
    4ea6:	0c1b      	lsrs	r3, r3, #16
    4ea8:	4358      	muls	r0, r3
    4eaa:	4366      	muls	r6, r4
    4eac:	4353      	muls	r3, r2
    4eae:	4354      	muls	r4, r2
    4eb0:	199a      	adds	r2, r3, r6
    4eb2:	0c03      	lsrs	r3, r0, #16
    4eb4:	189b      	adds	r3, r3, r2
    4eb6:	429e      	cmp	r6, r3
    4eb8:	d903      	bls.n	4ec2 <__aeabi_ddiv+0x3aa>
    4eba:	2280      	movs	r2, #128	; 0x80
    4ebc:	0252      	lsls	r2, r2, #9
    4ebe:	4694      	mov	ip, r2
    4ec0:	4464      	add	r4, ip
    4ec2:	0c1a      	lsrs	r2, r3, #16
    4ec4:	0400      	lsls	r0, r0, #16
    4ec6:	041b      	lsls	r3, r3, #16
    4ec8:	0c00      	lsrs	r0, r0, #16
    4eca:	1914      	adds	r4, r2, r4
    4ecc:	181b      	adds	r3, r3, r0
    4ece:	42a5      	cmp	r5, r4
    4ed0:	d350      	bcc.n	4f74 <__aeabi_ddiv+0x45c>
    4ed2:	d04d      	beq.n	4f70 <__aeabi_ddiv+0x458>
    4ed4:	2301      	movs	r3, #1
    4ed6:	4319      	orrs	r1, r3
    4ed8:	4a96      	ldr	r2, [pc, #600]	; (5134 <__aeabi_ddiv+0x61c>)
    4eda:	9b01      	ldr	r3, [sp, #4]
    4edc:	4694      	mov	ip, r2
    4ede:	4463      	add	r3, ip
    4ee0:	2b00      	cmp	r3, #0
    4ee2:	dc00      	bgt.n	4ee6 <__aeabi_ddiv+0x3ce>
    4ee4:	e6f3      	b.n	4cce <__aeabi_ddiv+0x1b6>
    4ee6:	074a      	lsls	r2, r1, #29
    4ee8:	d009      	beq.n	4efe <__aeabi_ddiv+0x3e6>
    4eea:	220f      	movs	r2, #15
    4eec:	400a      	ands	r2, r1
    4eee:	2a04      	cmp	r2, #4
    4ef0:	d005      	beq.n	4efe <__aeabi_ddiv+0x3e6>
    4ef2:	1d0a      	adds	r2, r1, #4
    4ef4:	428a      	cmp	r2, r1
    4ef6:	4189      	sbcs	r1, r1
    4ef8:	4249      	negs	r1, r1
    4efa:	448b      	add	fp, r1
    4efc:	0011      	movs	r1, r2
    4efe:	465a      	mov	r2, fp
    4f00:	01d2      	lsls	r2, r2, #7
    4f02:	d508      	bpl.n	4f16 <__aeabi_ddiv+0x3fe>
    4f04:	465a      	mov	r2, fp
    4f06:	4b8c      	ldr	r3, [pc, #560]	; (5138 <__aeabi_ddiv+0x620>)
    4f08:	401a      	ands	r2, r3
    4f0a:	4693      	mov	fp, r2
    4f0c:	2280      	movs	r2, #128	; 0x80
    4f0e:	00d2      	lsls	r2, r2, #3
    4f10:	4694      	mov	ip, r2
    4f12:	9b01      	ldr	r3, [sp, #4]
    4f14:	4463      	add	r3, ip
    4f16:	4a89      	ldr	r2, [pc, #548]	; (513c <__aeabi_ddiv+0x624>)
    4f18:	4293      	cmp	r3, r2
    4f1a:	dd00      	ble.n	4f1e <__aeabi_ddiv+0x406>
    4f1c:	e65b      	b.n	4bd6 <__aeabi_ddiv+0xbe>
    4f1e:	465a      	mov	r2, fp
    4f20:	08c9      	lsrs	r1, r1, #3
    4f22:	0750      	lsls	r0, r2, #29
    4f24:	4308      	orrs	r0, r1
    4f26:	0256      	lsls	r6, r2, #9
    4f28:	4651      	mov	r1, sl
    4f2a:	2201      	movs	r2, #1
    4f2c:	055b      	lsls	r3, r3, #21
    4f2e:	4681      	mov	r9, r0
    4f30:	0b36      	lsrs	r6, r6, #12
    4f32:	0d5b      	lsrs	r3, r3, #21
    4f34:	400a      	ands	r2, r1
    4f36:	e655      	b.n	4be4 <__aeabi_ddiv+0xcc>
    4f38:	2380      	movs	r3, #128	; 0x80
    4f3a:	031b      	lsls	r3, r3, #12
    4f3c:	421e      	tst	r6, r3
    4f3e:	d011      	beq.n	4f64 <__aeabi_ddiv+0x44c>
    4f40:	465a      	mov	r2, fp
    4f42:	421a      	tst	r2, r3
    4f44:	d10e      	bne.n	4f64 <__aeabi_ddiv+0x44c>
    4f46:	465e      	mov	r6, fp
    4f48:	431e      	orrs	r6, r3
    4f4a:	0336      	lsls	r6, r6, #12
    4f4c:	0b36      	lsrs	r6, r6, #12
    4f4e:	002a      	movs	r2, r5
    4f50:	4689      	mov	r9, r1
    4f52:	4b7b      	ldr	r3, [pc, #492]	; (5140 <__aeabi_ddiv+0x628>)
    4f54:	e646      	b.n	4be4 <__aeabi_ddiv+0xcc>
    4f56:	2b03      	cmp	r3, #3
    4f58:	d100      	bne.n	4f5c <__aeabi_ddiv+0x444>
    4f5a:	e0e1      	b.n	5120 <__aeabi_ddiv+0x608>
    4f5c:	2b01      	cmp	r3, #1
    4f5e:	d1bb      	bne.n	4ed8 <__aeabi_ddiv+0x3c0>
    4f60:	401a      	ands	r2, r3
    4f62:	e6bb      	b.n	4cdc <__aeabi_ddiv+0x1c4>
    4f64:	431e      	orrs	r6, r3
    4f66:	0336      	lsls	r6, r6, #12
    4f68:	0b36      	lsrs	r6, r6, #12
    4f6a:	4642      	mov	r2, r8
    4f6c:	4b74      	ldr	r3, [pc, #464]	; (5140 <__aeabi_ddiv+0x628>)
    4f6e:	e639      	b.n	4be4 <__aeabi_ddiv+0xcc>
    4f70:	2b00      	cmp	r3, #0
    4f72:	d0b1      	beq.n	4ed8 <__aeabi_ddiv+0x3c0>
    4f74:	197d      	adds	r5, r7, r5
    4f76:	1e4a      	subs	r2, r1, #1
    4f78:	42af      	cmp	r7, r5
    4f7a:	d952      	bls.n	5022 <__aeabi_ddiv+0x50a>
    4f7c:	0011      	movs	r1, r2
    4f7e:	42a5      	cmp	r5, r4
    4f80:	d1a8      	bne.n	4ed4 <__aeabi_ddiv+0x3bc>
    4f82:	9a03      	ldr	r2, [sp, #12]
    4f84:	429a      	cmp	r2, r3
    4f86:	d1a5      	bne.n	4ed4 <__aeabi_ddiv+0x3bc>
    4f88:	e7a6      	b.n	4ed8 <__aeabi_ddiv+0x3c0>
    4f8a:	0003      	movs	r3, r0
    4f8c:	003e      	movs	r6, r7
    4f8e:	3b28      	subs	r3, #40	; 0x28
    4f90:	409e      	lsls	r6, r3
    4f92:	2300      	movs	r3, #0
    4f94:	4699      	mov	r9, r3
    4f96:	e654      	b.n	4c42 <__aeabi_ddiv+0x12a>
    4f98:	f001 f9ec 	bl	6374 <__clzsi2>
    4f9c:	3020      	adds	r0, #32
    4f9e:	e641      	b.n	4c24 <__aeabi_ddiv+0x10c>
    4fa0:	0003      	movs	r3, r0
    4fa2:	4652      	mov	r2, sl
    4fa4:	3b28      	subs	r3, #40	; 0x28
    4fa6:	409a      	lsls	r2, r3
    4fa8:	2100      	movs	r1, #0
    4faa:	4693      	mov	fp, r2
    4fac:	e677      	b.n	4c9e <__aeabi_ddiv+0x186>
    4fae:	4650      	mov	r0, sl
    4fb0:	f001 f9e0 	bl	6374 <__clzsi2>
    4fb4:	3020      	adds	r0, #32
    4fb6:	e65e      	b.n	4c76 <__aeabi_ddiv+0x15e>
    4fb8:	9b02      	ldr	r3, [sp, #8]
    4fba:	2600      	movs	r6, #0
    4fbc:	42ab      	cmp	r3, r5
    4fbe:	d300      	bcc.n	4fc2 <__aeabi_ddiv+0x4aa>
    4fc0:	e723      	b.n	4e0a <__aeabi_ddiv+0x2f2>
    4fc2:	9e03      	ldr	r6, [sp, #12]
    4fc4:	9902      	ldr	r1, [sp, #8]
    4fc6:	46b4      	mov	ip, r6
    4fc8:	4461      	add	r1, ip
    4fca:	4688      	mov	r8, r1
    4fcc:	45b0      	cmp	r8, r6
    4fce:	41b6      	sbcs	r6, r6
    4fd0:	465b      	mov	r3, fp
    4fd2:	4276      	negs	r6, r6
    4fd4:	19f6      	adds	r6, r6, r7
    4fd6:	18b2      	adds	r2, r6, r2
    4fd8:	3b01      	subs	r3, #1
    4fda:	9102      	str	r1, [sp, #8]
    4fdc:	4297      	cmp	r7, r2
    4fde:	d213      	bcs.n	5008 <__aeabi_ddiv+0x4f0>
    4fe0:	4290      	cmp	r0, r2
    4fe2:	d84f      	bhi.n	5084 <__aeabi_ddiv+0x56c>
    4fe4:	d100      	bne.n	4fe8 <__aeabi_ddiv+0x4d0>
    4fe6:	e08e      	b.n	5106 <__aeabi_ddiv+0x5ee>
    4fe8:	1a16      	subs	r6, r2, r0
    4fea:	469b      	mov	fp, r3
    4fec:	e70d      	b.n	4e0a <__aeabi_ddiv+0x2f2>
    4fee:	4589      	cmp	r9, r1
    4ff0:	d200      	bcs.n	4ff4 <__aeabi_ddiv+0x4dc>
    4ff2:	e68e      	b.n	4d12 <__aeabi_ddiv+0x1fa>
    4ff4:	0874      	lsrs	r4, r6, #1
    4ff6:	464b      	mov	r3, r9
    4ff8:	07f6      	lsls	r6, r6, #31
    4ffa:	0035      	movs	r5, r6
    4ffc:	085b      	lsrs	r3, r3, #1
    4ffe:	431d      	orrs	r5, r3
    5000:	464b      	mov	r3, r9
    5002:	07db      	lsls	r3, r3, #31
    5004:	9302      	str	r3, [sp, #8]
    5006:	e68b      	b.n	4d20 <__aeabi_ddiv+0x208>
    5008:	4297      	cmp	r7, r2
    500a:	d1ed      	bne.n	4fe8 <__aeabi_ddiv+0x4d0>
    500c:	9903      	ldr	r1, [sp, #12]
    500e:	9c02      	ldr	r4, [sp, #8]
    5010:	42a1      	cmp	r1, r4
    5012:	d9e5      	bls.n	4fe0 <__aeabi_ddiv+0x4c8>
    5014:	1a3e      	subs	r6, r7, r0
    5016:	469b      	mov	fp, r3
    5018:	e6f7      	b.n	4e0a <__aeabi_ddiv+0x2f2>
    501a:	4698      	mov	r8, r3
    501c:	e6ca      	b.n	4db4 <__aeabi_ddiv+0x29c>
    501e:	001e      	movs	r6, r3
    5020:	e6a5      	b.n	4d6e <__aeabi_ddiv+0x256>
    5022:	42ac      	cmp	r4, r5
    5024:	d83e      	bhi.n	50a4 <__aeabi_ddiv+0x58c>
    5026:	d074      	beq.n	5112 <__aeabi_ddiv+0x5fa>
    5028:	0011      	movs	r1, r2
    502a:	e753      	b.n	4ed4 <__aeabi_ddiv+0x3bc>
    502c:	2101      	movs	r1, #1
    502e:	4249      	negs	r1, r1
    5030:	e752      	b.n	4ed8 <__aeabi_ddiv+0x3c0>
    5032:	001c      	movs	r4, r3
    5034:	e70e      	b.n	4e54 <__aeabi_ddiv+0x33c>
    5036:	001e      	movs	r6, r3
    5038:	e72b      	b.n	4e92 <__aeabi_ddiv+0x37a>
    503a:	2d1f      	cmp	r5, #31
    503c:	dc3c      	bgt.n	50b8 <__aeabi_ddiv+0x5a0>
    503e:	2320      	movs	r3, #32
    5040:	000a      	movs	r2, r1
    5042:	4658      	mov	r0, fp
    5044:	1b5b      	subs	r3, r3, r5
    5046:	4098      	lsls	r0, r3
    5048:	40ea      	lsrs	r2, r5
    504a:	4099      	lsls	r1, r3
    504c:	4302      	orrs	r2, r0
    504e:	1e48      	subs	r0, r1, #1
    5050:	4181      	sbcs	r1, r0
    5052:	465e      	mov	r6, fp
    5054:	4311      	orrs	r1, r2
    5056:	40ee      	lsrs	r6, r5
    5058:	074b      	lsls	r3, r1, #29
    505a:	d009      	beq.n	5070 <__aeabi_ddiv+0x558>
    505c:	230f      	movs	r3, #15
    505e:	400b      	ands	r3, r1
    5060:	2b04      	cmp	r3, #4
    5062:	d005      	beq.n	5070 <__aeabi_ddiv+0x558>
    5064:	000b      	movs	r3, r1
    5066:	1d19      	adds	r1, r3, #4
    5068:	4299      	cmp	r1, r3
    506a:	419b      	sbcs	r3, r3
    506c:	425b      	negs	r3, r3
    506e:	18f6      	adds	r6, r6, r3
    5070:	0233      	lsls	r3, r6, #8
    5072:	d53c      	bpl.n	50ee <__aeabi_ddiv+0x5d6>
    5074:	4653      	mov	r3, sl
    5076:	2201      	movs	r2, #1
    5078:	2100      	movs	r1, #0
    507a:	401a      	ands	r2, r3
    507c:	2600      	movs	r6, #0
    507e:	2301      	movs	r3, #1
    5080:	4689      	mov	r9, r1
    5082:	e5af      	b.n	4be4 <__aeabi_ddiv+0xcc>
    5084:	2302      	movs	r3, #2
    5086:	425b      	negs	r3, r3
    5088:	469c      	mov	ip, r3
    508a:	9c03      	ldr	r4, [sp, #12]
    508c:	44e3      	add	fp, ip
    508e:	46a4      	mov	ip, r4
    5090:	9b02      	ldr	r3, [sp, #8]
    5092:	4463      	add	r3, ip
    5094:	4698      	mov	r8, r3
    5096:	45a0      	cmp	r8, r4
    5098:	41b6      	sbcs	r6, r6
    509a:	4276      	negs	r6, r6
    509c:	19f6      	adds	r6, r6, r7
    509e:	9302      	str	r3, [sp, #8]
    50a0:	18b2      	adds	r2, r6, r2
    50a2:	e6b1      	b.n	4e08 <__aeabi_ddiv+0x2f0>
    50a4:	9803      	ldr	r0, [sp, #12]
    50a6:	1e8a      	subs	r2, r1, #2
    50a8:	0041      	lsls	r1, r0, #1
    50aa:	4281      	cmp	r1, r0
    50ac:	41b6      	sbcs	r6, r6
    50ae:	4276      	negs	r6, r6
    50b0:	19f6      	adds	r6, r6, r7
    50b2:	19ad      	adds	r5, r5, r6
    50b4:	9103      	str	r1, [sp, #12]
    50b6:	e761      	b.n	4f7c <__aeabi_ddiv+0x464>
    50b8:	221f      	movs	r2, #31
    50ba:	4252      	negs	r2, r2
    50bc:	1ad3      	subs	r3, r2, r3
    50be:	465a      	mov	r2, fp
    50c0:	40da      	lsrs	r2, r3
    50c2:	0013      	movs	r3, r2
    50c4:	2d20      	cmp	r5, #32
    50c6:	d029      	beq.n	511c <__aeabi_ddiv+0x604>
    50c8:	2240      	movs	r2, #64	; 0x40
    50ca:	4658      	mov	r0, fp
    50cc:	1b55      	subs	r5, r2, r5
    50ce:	40a8      	lsls	r0, r5
    50d0:	4301      	orrs	r1, r0
    50d2:	1e48      	subs	r0, r1, #1
    50d4:	4181      	sbcs	r1, r0
    50d6:	2007      	movs	r0, #7
    50d8:	430b      	orrs	r3, r1
    50da:	4018      	ands	r0, r3
    50dc:	2600      	movs	r6, #0
    50de:	2800      	cmp	r0, #0
    50e0:	d009      	beq.n	50f6 <__aeabi_ddiv+0x5de>
    50e2:	220f      	movs	r2, #15
    50e4:	2600      	movs	r6, #0
    50e6:	401a      	ands	r2, r3
    50e8:	0019      	movs	r1, r3
    50ea:	2a04      	cmp	r2, #4
    50ec:	d1bb      	bne.n	5066 <__aeabi_ddiv+0x54e>
    50ee:	000b      	movs	r3, r1
    50f0:	0770      	lsls	r0, r6, #29
    50f2:	0276      	lsls	r6, r6, #9
    50f4:	0b36      	lsrs	r6, r6, #12
    50f6:	08db      	lsrs	r3, r3, #3
    50f8:	4303      	orrs	r3, r0
    50fa:	4699      	mov	r9, r3
    50fc:	2201      	movs	r2, #1
    50fe:	4653      	mov	r3, sl
    5100:	401a      	ands	r2, r3
    5102:	2300      	movs	r3, #0
    5104:	e56e      	b.n	4be4 <__aeabi_ddiv+0xcc>
    5106:	9902      	ldr	r1, [sp, #8]
    5108:	428d      	cmp	r5, r1
    510a:	d8bb      	bhi.n	5084 <__aeabi_ddiv+0x56c>
    510c:	469b      	mov	fp, r3
    510e:	2600      	movs	r6, #0
    5110:	e67b      	b.n	4e0a <__aeabi_ddiv+0x2f2>
    5112:	9803      	ldr	r0, [sp, #12]
    5114:	4298      	cmp	r0, r3
    5116:	d3c5      	bcc.n	50a4 <__aeabi_ddiv+0x58c>
    5118:	0011      	movs	r1, r2
    511a:	e732      	b.n	4f82 <__aeabi_ddiv+0x46a>
    511c:	2000      	movs	r0, #0
    511e:	e7d7      	b.n	50d0 <__aeabi_ddiv+0x5b8>
    5120:	2680      	movs	r6, #128	; 0x80
    5122:	465b      	mov	r3, fp
    5124:	0336      	lsls	r6, r6, #12
    5126:	431e      	orrs	r6, r3
    5128:	0336      	lsls	r6, r6, #12
    512a:	0b36      	lsrs	r6, r6, #12
    512c:	9a00      	ldr	r2, [sp, #0]
    512e:	4689      	mov	r9, r1
    5130:	4b03      	ldr	r3, [pc, #12]	; (5140 <__aeabi_ddiv+0x628>)
    5132:	e557      	b.n	4be4 <__aeabi_ddiv+0xcc>
    5134:	000003ff 	.word	0x000003ff
    5138:	feffffff 	.word	0xfeffffff
    513c:	000007fe 	.word	0x000007fe
    5140:	000007ff 	.word	0x000007ff

00005144 <__eqdf2>:
    5144:	b5f0      	push	{r4, r5, r6, r7, lr}
    5146:	465f      	mov	r7, fp
    5148:	4656      	mov	r6, sl
    514a:	464d      	mov	r5, r9
    514c:	4644      	mov	r4, r8
    514e:	b4f0      	push	{r4, r5, r6, r7}
    5150:	031f      	lsls	r7, r3, #12
    5152:	005c      	lsls	r4, r3, #1
    5154:	0fdb      	lsrs	r3, r3, #31
    5156:	469a      	mov	sl, r3
    5158:	4b19      	ldr	r3, [pc, #100]	; (51c0 <__eqdf2+0x7c>)
    515a:	030e      	lsls	r6, r1, #12
    515c:	004d      	lsls	r5, r1, #1
    515e:	0fc9      	lsrs	r1, r1, #31
    5160:	4680      	mov	r8, r0
    5162:	0b36      	lsrs	r6, r6, #12
    5164:	0d6d      	lsrs	r5, r5, #21
    5166:	468b      	mov	fp, r1
    5168:	4691      	mov	r9, r2
    516a:	0b3f      	lsrs	r7, r7, #12
    516c:	0d64      	lsrs	r4, r4, #21
    516e:	429d      	cmp	r5, r3
    5170:	d019      	beq.n	51a6 <__eqdf2+0x62>
    5172:	4b13      	ldr	r3, [pc, #76]	; (51c0 <__eqdf2+0x7c>)
    5174:	429c      	cmp	r4, r3
    5176:	d01b      	beq.n	51b0 <__eqdf2+0x6c>
    5178:	2301      	movs	r3, #1
    517a:	42a5      	cmp	r5, r4
    517c:	d006      	beq.n	518c <__eqdf2+0x48>
    517e:	0018      	movs	r0, r3
    5180:	bc3c      	pop	{r2, r3, r4, r5}
    5182:	4690      	mov	r8, r2
    5184:	4699      	mov	r9, r3
    5186:	46a2      	mov	sl, r4
    5188:	46ab      	mov	fp, r5
    518a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    518c:	42be      	cmp	r6, r7
    518e:	d1f6      	bne.n	517e <__eqdf2+0x3a>
    5190:	45c8      	cmp	r8, r9
    5192:	d1f4      	bne.n	517e <__eqdf2+0x3a>
    5194:	45d3      	cmp	fp, sl
    5196:	d010      	beq.n	51ba <__eqdf2+0x76>
    5198:	2d00      	cmp	r5, #0
    519a:	d1f0      	bne.n	517e <__eqdf2+0x3a>
    519c:	4330      	orrs	r0, r6
    519e:	0003      	movs	r3, r0
    51a0:	1e5a      	subs	r2, r3, #1
    51a2:	4193      	sbcs	r3, r2
    51a4:	e7eb      	b.n	517e <__eqdf2+0x3a>
    51a6:	0031      	movs	r1, r6
    51a8:	2301      	movs	r3, #1
    51aa:	4301      	orrs	r1, r0
    51ac:	d1e7      	bne.n	517e <__eqdf2+0x3a>
    51ae:	e7e0      	b.n	5172 <__eqdf2+0x2e>
    51b0:	433a      	orrs	r2, r7
    51b2:	2301      	movs	r3, #1
    51b4:	2a00      	cmp	r2, #0
    51b6:	d1e2      	bne.n	517e <__eqdf2+0x3a>
    51b8:	e7de      	b.n	5178 <__eqdf2+0x34>
    51ba:	2300      	movs	r3, #0
    51bc:	e7df      	b.n	517e <__eqdf2+0x3a>
    51be:	46c0      	nop			; (mov r8, r8)
    51c0:	000007ff 	.word	0x000007ff

000051c4 <__gedf2>:
    51c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    51c6:	465f      	mov	r7, fp
    51c8:	4644      	mov	r4, r8
    51ca:	4656      	mov	r6, sl
    51cc:	464d      	mov	r5, r9
    51ce:	b4f0      	push	{r4, r5, r6, r7}
    51d0:	031f      	lsls	r7, r3, #12
    51d2:	0b3c      	lsrs	r4, r7, #12
    51d4:	4f2c      	ldr	r7, [pc, #176]	; (5288 <__gedf2+0xc4>)
    51d6:	030e      	lsls	r6, r1, #12
    51d8:	004d      	lsls	r5, r1, #1
    51da:	46a3      	mov	fp, r4
    51dc:	005c      	lsls	r4, r3, #1
    51de:	4684      	mov	ip, r0
    51e0:	0b36      	lsrs	r6, r6, #12
    51e2:	0d6d      	lsrs	r5, r5, #21
    51e4:	0fc9      	lsrs	r1, r1, #31
    51e6:	4690      	mov	r8, r2
    51e8:	0d64      	lsrs	r4, r4, #21
    51ea:	0fdb      	lsrs	r3, r3, #31
    51ec:	42bd      	cmp	r5, r7
    51ee:	d02b      	beq.n	5248 <__gedf2+0x84>
    51f0:	4f25      	ldr	r7, [pc, #148]	; (5288 <__gedf2+0xc4>)
    51f2:	42bc      	cmp	r4, r7
    51f4:	d02e      	beq.n	5254 <__gedf2+0x90>
    51f6:	2d00      	cmp	r5, #0
    51f8:	d10e      	bne.n	5218 <__gedf2+0x54>
    51fa:	4330      	orrs	r0, r6
    51fc:	0007      	movs	r7, r0
    51fe:	4681      	mov	r9, r0
    5200:	4278      	negs	r0, r7
    5202:	4178      	adcs	r0, r7
    5204:	2c00      	cmp	r4, #0
    5206:	d117      	bne.n	5238 <__gedf2+0x74>
    5208:	465f      	mov	r7, fp
    520a:	433a      	orrs	r2, r7
    520c:	d114      	bne.n	5238 <__gedf2+0x74>
    520e:	464b      	mov	r3, r9
    5210:	2000      	movs	r0, #0
    5212:	2b00      	cmp	r3, #0
    5214:	d00a      	beq.n	522c <__gedf2+0x68>
    5216:	e006      	b.n	5226 <__gedf2+0x62>
    5218:	2c00      	cmp	r4, #0
    521a:	d102      	bne.n	5222 <__gedf2+0x5e>
    521c:	4658      	mov	r0, fp
    521e:	4302      	orrs	r2, r0
    5220:	d001      	beq.n	5226 <__gedf2+0x62>
    5222:	4299      	cmp	r1, r3
    5224:	d01a      	beq.n	525c <__gedf2+0x98>
    5226:	2301      	movs	r3, #1
    5228:	4248      	negs	r0, r1
    522a:	4318      	orrs	r0, r3
    522c:	bc3c      	pop	{r2, r3, r4, r5}
    522e:	4690      	mov	r8, r2
    5230:	4699      	mov	r9, r3
    5232:	46a2      	mov	sl, r4
    5234:	46ab      	mov	fp, r5
    5236:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5238:	2800      	cmp	r0, #0
    523a:	d0f2      	beq.n	5222 <__gedf2+0x5e>
    523c:	4258      	negs	r0, r3
    523e:	4158      	adcs	r0, r3
    5240:	2201      	movs	r2, #1
    5242:	4240      	negs	r0, r0
    5244:	4310      	orrs	r0, r2
    5246:	e7f1      	b.n	522c <__gedf2+0x68>
    5248:	0037      	movs	r7, r6
    524a:	4307      	orrs	r7, r0
    524c:	d0d0      	beq.n	51f0 <__gedf2+0x2c>
    524e:	2002      	movs	r0, #2
    5250:	4240      	negs	r0, r0
    5252:	e7eb      	b.n	522c <__gedf2+0x68>
    5254:	465f      	mov	r7, fp
    5256:	4317      	orrs	r7, r2
    5258:	d0cd      	beq.n	51f6 <__gedf2+0x32>
    525a:	e7f8      	b.n	524e <__gedf2+0x8a>
    525c:	42a5      	cmp	r5, r4
    525e:	dce2      	bgt.n	5226 <__gedf2+0x62>
    5260:	db05      	blt.n	526e <__gedf2+0xaa>
    5262:	455e      	cmp	r6, fp
    5264:	d8df      	bhi.n	5226 <__gedf2+0x62>
    5266:	d008      	beq.n	527a <__gedf2+0xb6>
    5268:	2000      	movs	r0, #0
    526a:	455e      	cmp	r6, fp
    526c:	d2de      	bcs.n	522c <__gedf2+0x68>
    526e:	4248      	negs	r0, r1
    5270:	4148      	adcs	r0, r1
    5272:	2301      	movs	r3, #1
    5274:	4240      	negs	r0, r0
    5276:	4318      	orrs	r0, r3
    5278:	e7d8      	b.n	522c <__gedf2+0x68>
    527a:	45c4      	cmp	ip, r8
    527c:	d8d3      	bhi.n	5226 <__gedf2+0x62>
    527e:	2000      	movs	r0, #0
    5280:	45c4      	cmp	ip, r8
    5282:	d3f4      	bcc.n	526e <__gedf2+0xaa>
    5284:	e7d2      	b.n	522c <__gedf2+0x68>
    5286:	46c0      	nop			; (mov r8, r8)
    5288:	000007ff 	.word	0x000007ff

0000528c <__ledf2>:
    528c:	b5f0      	push	{r4, r5, r6, r7, lr}
    528e:	465f      	mov	r7, fp
    5290:	464d      	mov	r5, r9
    5292:	4644      	mov	r4, r8
    5294:	4656      	mov	r6, sl
    5296:	b4f0      	push	{r4, r5, r6, r7}
    5298:	031c      	lsls	r4, r3, #12
    529a:	0b24      	lsrs	r4, r4, #12
    529c:	46a4      	mov	ip, r4
    529e:	4c2f      	ldr	r4, [pc, #188]	; (535c <__ledf2+0xd0>)
    52a0:	030f      	lsls	r7, r1, #12
    52a2:	004d      	lsls	r5, r1, #1
    52a4:	005e      	lsls	r6, r3, #1
    52a6:	0fc9      	lsrs	r1, r1, #31
    52a8:	4680      	mov	r8, r0
    52aa:	0b3f      	lsrs	r7, r7, #12
    52ac:	0d6d      	lsrs	r5, r5, #21
    52ae:	468b      	mov	fp, r1
    52b0:	4691      	mov	r9, r2
    52b2:	0d76      	lsrs	r6, r6, #21
    52b4:	0fdb      	lsrs	r3, r3, #31
    52b6:	42a5      	cmp	r5, r4
    52b8:	d020      	beq.n	52fc <__ledf2+0x70>
    52ba:	4c28      	ldr	r4, [pc, #160]	; (535c <__ledf2+0xd0>)
    52bc:	42a6      	cmp	r6, r4
    52be:	d022      	beq.n	5306 <__ledf2+0x7a>
    52c0:	2d00      	cmp	r5, #0
    52c2:	d112      	bne.n	52ea <__ledf2+0x5e>
    52c4:	4338      	orrs	r0, r7
    52c6:	4244      	negs	r4, r0
    52c8:	4144      	adcs	r4, r0
    52ca:	2e00      	cmp	r6, #0
    52cc:	d020      	beq.n	5310 <__ledf2+0x84>
    52ce:	2c00      	cmp	r4, #0
    52d0:	d00d      	beq.n	52ee <__ledf2+0x62>
    52d2:	425c      	negs	r4, r3
    52d4:	4163      	adcs	r3, r4
    52d6:	2401      	movs	r4, #1
    52d8:	425b      	negs	r3, r3
    52da:	431c      	orrs	r4, r3
    52dc:	0020      	movs	r0, r4
    52de:	bc3c      	pop	{r2, r3, r4, r5}
    52e0:	4690      	mov	r8, r2
    52e2:	4699      	mov	r9, r3
    52e4:	46a2      	mov	sl, r4
    52e6:	46ab      	mov	fp, r5
    52e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    52ea:	2e00      	cmp	r6, #0
    52ec:	d017      	beq.n	531e <__ledf2+0x92>
    52ee:	455b      	cmp	r3, fp
    52f0:	d019      	beq.n	5326 <__ledf2+0x9a>
    52f2:	465b      	mov	r3, fp
    52f4:	425c      	negs	r4, r3
    52f6:	2301      	movs	r3, #1
    52f8:	431c      	orrs	r4, r3
    52fa:	e7ef      	b.n	52dc <__ledf2+0x50>
    52fc:	0039      	movs	r1, r7
    52fe:	2402      	movs	r4, #2
    5300:	4301      	orrs	r1, r0
    5302:	d1eb      	bne.n	52dc <__ledf2+0x50>
    5304:	e7d9      	b.n	52ba <__ledf2+0x2e>
    5306:	4661      	mov	r1, ip
    5308:	2402      	movs	r4, #2
    530a:	4311      	orrs	r1, r2
    530c:	d1e6      	bne.n	52dc <__ledf2+0x50>
    530e:	e7d7      	b.n	52c0 <__ledf2+0x34>
    5310:	4661      	mov	r1, ip
    5312:	430a      	orrs	r2, r1
    5314:	d1db      	bne.n	52ce <__ledf2+0x42>
    5316:	2400      	movs	r4, #0
    5318:	2800      	cmp	r0, #0
    531a:	d0df      	beq.n	52dc <__ledf2+0x50>
    531c:	e7e9      	b.n	52f2 <__ledf2+0x66>
    531e:	4661      	mov	r1, ip
    5320:	430a      	orrs	r2, r1
    5322:	d1e4      	bne.n	52ee <__ledf2+0x62>
    5324:	e7e5      	b.n	52f2 <__ledf2+0x66>
    5326:	42b5      	cmp	r5, r6
    5328:	dd03      	ble.n	5332 <__ledf2+0xa6>
    532a:	2201      	movs	r2, #1
    532c:	425c      	negs	r4, r3
    532e:	4314      	orrs	r4, r2
    5330:	e7d4      	b.n	52dc <__ledf2+0x50>
    5332:	42b5      	cmp	r5, r6
    5334:	dbcd      	blt.n	52d2 <__ledf2+0x46>
    5336:	4567      	cmp	r7, ip
    5338:	d8db      	bhi.n	52f2 <__ledf2+0x66>
    533a:	d009      	beq.n	5350 <__ledf2+0xc4>
    533c:	2400      	movs	r4, #0
    533e:	4567      	cmp	r7, ip
    5340:	d2cc      	bcs.n	52dc <__ledf2+0x50>
    5342:	4659      	mov	r1, fp
    5344:	424c      	negs	r4, r1
    5346:	4161      	adcs	r1, r4
    5348:	2401      	movs	r4, #1
    534a:	4249      	negs	r1, r1
    534c:	430c      	orrs	r4, r1
    534e:	e7c5      	b.n	52dc <__ledf2+0x50>
    5350:	45c8      	cmp	r8, r9
    5352:	d8ce      	bhi.n	52f2 <__ledf2+0x66>
    5354:	2400      	movs	r4, #0
    5356:	45c8      	cmp	r8, r9
    5358:	d3f3      	bcc.n	5342 <__ledf2+0xb6>
    535a:	e7bf      	b.n	52dc <__ledf2+0x50>
    535c:	000007ff 	.word	0x000007ff

00005360 <__aeabi_dmul>:
    5360:	b5f0      	push	{r4, r5, r6, r7, lr}
    5362:	465f      	mov	r7, fp
    5364:	4656      	mov	r6, sl
    5366:	464d      	mov	r5, r9
    5368:	4644      	mov	r4, r8
    536a:	b4f0      	push	{r4, r5, r6, r7}
    536c:	030d      	lsls	r5, r1, #12
    536e:	4699      	mov	r9, r3
    5370:	004e      	lsls	r6, r1, #1
    5372:	0b2b      	lsrs	r3, r5, #12
    5374:	b087      	sub	sp, #28
    5376:	0007      	movs	r7, r0
    5378:	4692      	mov	sl, r2
    537a:	4680      	mov	r8, r0
    537c:	469b      	mov	fp, r3
    537e:	0d76      	lsrs	r6, r6, #21
    5380:	0fcc      	lsrs	r4, r1, #31
    5382:	2e00      	cmp	r6, #0
    5384:	d069      	beq.n	545a <__aeabi_dmul+0xfa>
    5386:	4b6d      	ldr	r3, [pc, #436]	; (553c <__aeabi_dmul+0x1dc>)
    5388:	429e      	cmp	r6, r3
    538a:	d035      	beq.n	53f8 <__aeabi_dmul+0x98>
    538c:	465b      	mov	r3, fp
    538e:	2280      	movs	r2, #128	; 0x80
    5390:	00dd      	lsls	r5, r3, #3
    5392:	0412      	lsls	r2, r2, #16
    5394:	0f43      	lsrs	r3, r0, #29
    5396:	4313      	orrs	r3, r2
    5398:	432b      	orrs	r3, r5
    539a:	469b      	mov	fp, r3
    539c:	00c3      	lsls	r3, r0, #3
    539e:	4698      	mov	r8, r3
    53a0:	4b67      	ldr	r3, [pc, #412]	; (5540 <__aeabi_dmul+0x1e0>)
    53a2:	2700      	movs	r7, #0
    53a4:	469c      	mov	ip, r3
    53a6:	2300      	movs	r3, #0
    53a8:	4466      	add	r6, ip
    53aa:	9301      	str	r3, [sp, #4]
    53ac:	464a      	mov	r2, r9
    53ae:	0315      	lsls	r5, r2, #12
    53b0:	0050      	lsls	r0, r2, #1
    53b2:	0fd2      	lsrs	r2, r2, #31
    53b4:	4653      	mov	r3, sl
    53b6:	0b2d      	lsrs	r5, r5, #12
    53b8:	0d40      	lsrs	r0, r0, #21
    53ba:	4691      	mov	r9, r2
    53bc:	d100      	bne.n	53c0 <__aeabi_dmul+0x60>
    53be:	e076      	b.n	54ae <__aeabi_dmul+0x14e>
    53c0:	4a5e      	ldr	r2, [pc, #376]	; (553c <__aeabi_dmul+0x1dc>)
    53c2:	4290      	cmp	r0, r2
    53c4:	d06c      	beq.n	54a0 <__aeabi_dmul+0x140>
    53c6:	2280      	movs	r2, #128	; 0x80
    53c8:	0f5b      	lsrs	r3, r3, #29
    53ca:	0412      	lsls	r2, r2, #16
    53cc:	4313      	orrs	r3, r2
    53ce:	4a5c      	ldr	r2, [pc, #368]	; (5540 <__aeabi_dmul+0x1e0>)
    53d0:	00ed      	lsls	r5, r5, #3
    53d2:	4694      	mov	ip, r2
    53d4:	431d      	orrs	r5, r3
    53d6:	4653      	mov	r3, sl
    53d8:	2200      	movs	r2, #0
    53da:	00db      	lsls	r3, r3, #3
    53dc:	4460      	add	r0, ip
    53de:	4649      	mov	r1, r9
    53e0:	1836      	adds	r6, r6, r0
    53e2:	1c70      	adds	r0, r6, #1
    53e4:	4061      	eors	r1, r4
    53e6:	9002      	str	r0, [sp, #8]
    53e8:	4317      	orrs	r7, r2
    53ea:	2f0f      	cmp	r7, #15
    53ec:	d900      	bls.n	53f0 <__aeabi_dmul+0x90>
    53ee:	e0af      	b.n	5550 <__aeabi_dmul+0x1f0>
    53f0:	4854      	ldr	r0, [pc, #336]	; (5544 <__aeabi_dmul+0x1e4>)
    53f2:	00bf      	lsls	r7, r7, #2
    53f4:	59c7      	ldr	r7, [r0, r7]
    53f6:	46bf      	mov	pc, r7
    53f8:	465b      	mov	r3, fp
    53fa:	431f      	orrs	r7, r3
    53fc:	d000      	beq.n	5400 <__aeabi_dmul+0xa0>
    53fe:	e088      	b.n	5512 <__aeabi_dmul+0x1b2>
    5400:	2300      	movs	r3, #0
    5402:	469b      	mov	fp, r3
    5404:	4698      	mov	r8, r3
    5406:	3302      	adds	r3, #2
    5408:	2708      	movs	r7, #8
    540a:	9301      	str	r3, [sp, #4]
    540c:	e7ce      	b.n	53ac <__aeabi_dmul+0x4c>
    540e:	4649      	mov	r1, r9
    5410:	2a02      	cmp	r2, #2
    5412:	d06a      	beq.n	54ea <__aeabi_dmul+0x18a>
    5414:	2a03      	cmp	r2, #3
    5416:	d100      	bne.n	541a <__aeabi_dmul+0xba>
    5418:	e209      	b.n	582e <__aeabi_dmul+0x4ce>
    541a:	2a01      	cmp	r2, #1
    541c:	d000      	beq.n	5420 <__aeabi_dmul+0xc0>
    541e:	e1bb      	b.n	5798 <__aeabi_dmul+0x438>
    5420:	4011      	ands	r1, r2
    5422:	2200      	movs	r2, #0
    5424:	2300      	movs	r3, #0
    5426:	2500      	movs	r5, #0
    5428:	4690      	mov	r8, r2
    542a:	b2cc      	uxtb	r4, r1
    542c:	2100      	movs	r1, #0
    542e:	032d      	lsls	r5, r5, #12
    5430:	0d0a      	lsrs	r2, r1, #20
    5432:	0512      	lsls	r2, r2, #20
    5434:	0b2d      	lsrs	r5, r5, #12
    5436:	4315      	orrs	r5, r2
    5438:	4a43      	ldr	r2, [pc, #268]	; (5548 <__aeabi_dmul+0x1e8>)
    543a:	051b      	lsls	r3, r3, #20
    543c:	4015      	ands	r5, r2
    543e:	431d      	orrs	r5, r3
    5440:	006d      	lsls	r5, r5, #1
    5442:	07e4      	lsls	r4, r4, #31
    5444:	086d      	lsrs	r5, r5, #1
    5446:	4325      	orrs	r5, r4
    5448:	4640      	mov	r0, r8
    544a:	0029      	movs	r1, r5
    544c:	b007      	add	sp, #28
    544e:	bc3c      	pop	{r2, r3, r4, r5}
    5450:	4690      	mov	r8, r2
    5452:	4699      	mov	r9, r3
    5454:	46a2      	mov	sl, r4
    5456:	46ab      	mov	fp, r5
    5458:	bdf0      	pop	{r4, r5, r6, r7, pc}
    545a:	4303      	orrs	r3, r0
    545c:	d052      	beq.n	5504 <__aeabi_dmul+0x1a4>
    545e:	465b      	mov	r3, fp
    5460:	2b00      	cmp	r3, #0
    5462:	d100      	bne.n	5466 <__aeabi_dmul+0x106>
    5464:	e18a      	b.n	577c <__aeabi_dmul+0x41c>
    5466:	4658      	mov	r0, fp
    5468:	f000 ff84 	bl	6374 <__clzsi2>
    546c:	0003      	movs	r3, r0
    546e:	3b0b      	subs	r3, #11
    5470:	2b1c      	cmp	r3, #28
    5472:	dd00      	ble.n	5476 <__aeabi_dmul+0x116>
    5474:	e17b      	b.n	576e <__aeabi_dmul+0x40e>
    5476:	221d      	movs	r2, #29
    5478:	1ad3      	subs	r3, r2, r3
    547a:	003a      	movs	r2, r7
    547c:	0001      	movs	r1, r0
    547e:	465d      	mov	r5, fp
    5480:	40da      	lsrs	r2, r3
    5482:	3908      	subs	r1, #8
    5484:	408d      	lsls	r5, r1
    5486:	0013      	movs	r3, r2
    5488:	408f      	lsls	r7, r1
    548a:	432b      	orrs	r3, r5
    548c:	469b      	mov	fp, r3
    548e:	46b8      	mov	r8, r7
    5490:	4b2e      	ldr	r3, [pc, #184]	; (554c <__aeabi_dmul+0x1ec>)
    5492:	2700      	movs	r7, #0
    5494:	469c      	mov	ip, r3
    5496:	2300      	movs	r3, #0
    5498:	4460      	add	r0, ip
    549a:	4246      	negs	r6, r0
    549c:	9301      	str	r3, [sp, #4]
    549e:	e785      	b.n	53ac <__aeabi_dmul+0x4c>
    54a0:	4652      	mov	r2, sl
    54a2:	432a      	orrs	r2, r5
    54a4:	d12c      	bne.n	5500 <__aeabi_dmul+0x1a0>
    54a6:	2500      	movs	r5, #0
    54a8:	2300      	movs	r3, #0
    54aa:	2202      	movs	r2, #2
    54ac:	e797      	b.n	53de <__aeabi_dmul+0x7e>
    54ae:	4652      	mov	r2, sl
    54b0:	432a      	orrs	r2, r5
    54b2:	d021      	beq.n	54f8 <__aeabi_dmul+0x198>
    54b4:	2d00      	cmp	r5, #0
    54b6:	d100      	bne.n	54ba <__aeabi_dmul+0x15a>
    54b8:	e154      	b.n	5764 <__aeabi_dmul+0x404>
    54ba:	0028      	movs	r0, r5
    54bc:	f000 ff5a 	bl	6374 <__clzsi2>
    54c0:	0003      	movs	r3, r0
    54c2:	3b0b      	subs	r3, #11
    54c4:	2b1c      	cmp	r3, #28
    54c6:	dd00      	ble.n	54ca <__aeabi_dmul+0x16a>
    54c8:	e146      	b.n	5758 <__aeabi_dmul+0x3f8>
    54ca:	211d      	movs	r1, #29
    54cc:	1acb      	subs	r3, r1, r3
    54ce:	4651      	mov	r1, sl
    54d0:	0002      	movs	r2, r0
    54d2:	40d9      	lsrs	r1, r3
    54d4:	4653      	mov	r3, sl
    54d6:	3a08      	subs	r2, #8
    54d8:	4095      	lsls	r5, r2
    54da:	4093      	lsls	r3, r2
    54dc:	430d      	orrs	r5, r1
    54de:	4a1b      	ldr	r2, [pc, #108]	; (554c <__aeabi_dmul+0x1ec>)
    54e0:	4694      	mov	ip, r2
    54e2:	4460      	add	r0, ip
    54e4:	4240      	negs	r0, r0
    54e6:	2200      	movs	r2, #0
    54e8:	e779      	b.n	53de <__aeabi_dmul+0x7e>
    54ea:	2401      	movs	r4, #1
    54ec:	2200      	movs	r2, #0
    54ee:	400c      	ands	r4, r1
    54f0:	4b12      	ldr	r3, [pc, #72]	; (553c <__aeabi_dmul+0x1dc>)
    54f2:	2500      	movs	r5, #0
    54f4:	4690      	mov	r8, r2
    54f6:	e799      	b.n	542c <__aeabi_dmul+0xcc>
    54f8:	2500      	movs	r5, #0
    54fa:	2300      	movs	r3, #0
    54fc:	2201      	movs	r2, #1
    54fe:	e76e      	b.n	53de <__aeabi_dmul+0x7e>
    5500:	2203      	movs	r2, #3
    5502:	e76c      	b.n	53de <__aeabi_dmul+0x7e>
    5504:	2300      	movs	r3, #0
    5506:	469b      	mov	fp, r3
    5508:	4698      	mov	r8, r3
    550a:	3301      	adds	r3, #1
    550c:	2704      	movs	r7, #4
    550e:	9301      	str	r3, [sp, #4]
    5510:	e74c      	b.n	53ac <__aeabi_dmul+0x4c>
    5512:	2303      	movs	r3, #3
    5514:	270c      	movs	r7, #12
    5516:	9301      	str	r3, [sp, #4]
    5518:	e748      	b.n	53ac <__aeabi_dmul+0x4c>
    551a:	2300      	movs	r3, #0
    551c:	2580      	movs	r5, #128	; 0x80
    551e:	4698      	mov	r8, r3
    5520:	2400      	movs	r4, #0
    5522:	032d      	lsls	r5, r5, #12
    5524:	4b05      	ldr	r3, [pc, #20]	; (553c <__aeabi_dmul+0x1dc>)
    5526:	e781      	b.n	542c <__aeabi_dmul+0xcc>
    5528:	465d      	mov	r5, fp
    552a:	4643      	mov	r3, r8
    552c:	9a01      	ldr	r2, [sp, #4]
    552e:	e76f      	b.n	5410 <__aeabi_dmul+0xb0>
    5530:	465d      	mov	r5, fp
    5532:	4643      	mov	r3, r8
    5534:	0021      	movs	r1, r4
    5536:	9a01      	ldr	r2, [sp, #4]
    5538:	e76a      	b.n	5410 <__aeabi_dmul+0xb0>
    553a:	46c0      	nop			; (mov r8, r8)
    553c:	000007ff 	.word	0x000007ff
    5540:	fffffc01 	.word	0xfffffc01
    5544:	00006608 	.word	0x00006608
    5548:	800fffff 	.word	0x800fffff
    554c:	000003f3 	.word	0x000003f3
    5550:	4642      	mov	r2, r8
    5552:	0c12      	lsrs	r2, r2, #16
    5554:	4691      	mov	r9, r2
    5556:	0c1a      	lsrs	r2, r3, #16
    5558:	4694      	mov	ip, r2
    555a:	4642      	mov	r2, r8
    555c:	0417      	lsls	r7, r2, #16
    555e:	464a      	mov	r2, r9
    5560:	041b      	lsls	r3, r3, #16
    5562:	0c1b      	lsrs	r3, r3, #16
    5564:	435a      	muls	r2, r3
    5566:	4660      	mov	r0, ip
    5568:	4690      	mov	r8, r2
    556a:	464a      	mov	r2, r9
    556c:	4342      	muls	r2, r0
    556e:	0010      	movs	r0, r2
    5570:	9203      	str	r2, [sp, #12]
    5572:	4662      	mov	r2, ip
    5574:	001c      	movs	r4, r3
    5576:	0c3f      	lsrs	r7, r7, #16
    5578:	437a      	muls	r2, r7
    557a:	437c      	muls	r4, r7
    557c:	4442      	add	r2, r8
    557e:	9201      	str	r2, [sp, #4]
    5580:	0c22      	lsrs	r2, r4, #16
    5582:	4692      	mov	sl, r2
    5584:	9a01      	ldr	r2, [sp, #4]
    5586:	4452      	add	r2, sl
    5588:	4590      	cmp	r8, r2
    558a:	d906      	bls.n	559a <__aeabi_dmul+0x23a>
    558c:	4682      	mov	sl, r0
    558e:	2080      	movs	r0, #128	; 0x80
    5590:	0240      	lsls	r0, r0, #9
    5592:	4680      	mov	r8, r0
    5594:	44c2      	add	sl, r8
    5596:	4650      	mov	r0, sl
    5598:	9003      	str	r0, [sp, #12]
    559a:	0c10      	lsrs	r0, r2, #16
    559c:	9004      	str	r0, [sp, #16]
    559e:	4648      	mov	r0, r9
    55a0:	0424      	lsls	r4, r4, #16
    55a2:	0c24      	lsrs	r4, r4, #16
    55a4:	0412      	lsls	r2, r2, #16
    55a6:	1912      	adds	r2, r2, r4
    55a8:	9205      	str	r2, [sp, #20]
    55aa:	0c2a      	lsrs	r2, r5, #16
    55ac:	042d      	lsls	r5, r5, #16
    55ae:	0c2d      	lsrs	r5, r5, #16
    55b0:	4368      	muls	r0, r5
    55b2:	002c      	movs	r4, r5
    55b4:	4682      	mov	sl, r0
    55b6:	4648      	mov	r0, r9
    55b8:	437c      	muls	r4, r7
    55ba:	4350      	muls	r0, r2
    55bc:	4681      	mov	r9, r0
    55be:	0c20      	lsrs	r0, r4, #16
    55c0:	4680      	mov	r8, r0
    55c2:	4357      	muls	r7, r2
    55c4:	4457      	add	r7, sl
    55c6:	4447      	add	r7, r8
    55c8:	45ba      	cmp	sl, r7
    55ca:	d903      	bls.n	55d4 <__aeabi_dmul+0x274>
    55cc:	2080      	movs	r0, #128	; 0x80
    55ce:	0240      	lsls	r0, r0, #9
    55d0:	4680      	mov	r8, r0
    55d2:	44c1      	add	r9, r8
    55d4:	0c38      	lsrs	r0, r7, #16
    55d6:	043f      	lsls	r7, r7, #16
    55d8:	46b8      	mov	r8, r7
    55da:	4448      	add	r0, r9
    55dc:	0424      	lsls	r4, r4, #16
    55de:	0c24      	lsrs	r4, r4, #16
    55e0:	9001      	str	r0, [sp, #4]
    55e2:	9804      	ldr	r0, [sp, #16]
    55e4:	44a0      	add	r8, r4
    55e6:	4440      	add	r0, r8
    55e8:	9004      	str	r0, [sp, #16]
    55ea:	4658      	mov	r0, fp
    55ec:	0c00      	lsrs	r0, r0, #16
    55ee:	4681      	mov	r9, r0
    55f0:	4658      	mov	r0, fp
    55f2:	0404      	lsls	r4, r0, #16
    55f4:	0c20      	lsrs	r0, r4, #16
    55f6:	4682      	mov	sl, r0
    55f8:	0007      	movs	r7, r0
    55fa:	4648      	mov	r0, r9
    55fc:	435f      	muls	r7, r3
    55fe:	464c      	mov	r4, r9
    5600:	4343      	muls	r3, r0
    5602:	4660      	mov	r0, ip
    5604:	4360      	muls	r0, r4
    5606:	4664      	mov	r4, ip
    5608:	4683      	mov	fp, r0
    560a:	4650      	mov	r0, sl
    560c:	4344      	muls	r4, r0
    560e:	0c38      	lsrs	r0, r7, #16
    5610:	4684      	mov	ip, r0
    5612:	18e4      	adds	r4, r4, r3
    5614:	4464      	add	r4, ip
    5616:	42a3      	cmp	r3, r4
    5618:	d903      	bls.n	5622 <__aeabi_dmul+0x2c2>
    561a:	2380      	movs	r3, #128	; 0x80
    561c:	025b      	lsls	r3, r3, #9
    561e:	469c      	mov	ip, r3
    5620:	44e3      	add	fp, ip
    5622:	4648      	mov	r0, r9
    5624:	043f      	lsls	r7, r7, #16
    5626:	0c23      	lsrs	r3, r4, #16
    5628:	0c3f      	lsrs	r7, r7, #16
    562a:	0424      	lsls	r4, r4, #16
    562c:	19e4      	adds	r4, r4, r7
    562e:	4657      	mov	r7, sl
    5630:	4368      	muls	r0, r5
    5632:	436f      	muls	r7, r5
    5634:	4684      	mov	ip, r0
    5636:	464d      	mov	r5, r9
    5638:	4650      	mov	r0, sl
    563a:	4355      	muls	r5, r2
    563c:	4342      	muls	r2, r0
    563e:	0c38      	lsrs	r0, r7, #16
    5640:	4681      	mov	r9, r0
    5642:	4462      	add	r2, ip
    5644:	444a      	add	r2, r9
    5646:	445b      	add	r3, fp
    5648:	4594      	cmp	ip, r2
    564a:	d903      	bls.n	5654 <__aeabi_dmul+0x2f4>
    564c:	2080      	movs	r0, #128	; 0x80
    564e:	0240      	lsls	r0, r0, #9
    5650:	4684      	mov	ip, r0
    5652:	4465      	add	r5, ip
    5654:	9803      	ldr	r0, [sp, #12]
    5656:	043f      	lsls	r7, r7, #16
    5658:	4683      	mov	fp, r0
    565a:	9804      	ldr	r0, [sp, #16]
    565c:	0c3f      	lsrs	r7, r7, #16
    565e:	4684      	mov	ip, r0
    5660:	44e3      	add	fp, ip
    5662:	45c3      	cmp	fp, r8
    5664:	4180      	sbcs	r0, r0
    5666:	4240      	negs	r0, r0
    5668:	4682      	mov	sl, r0
    566a:	0410      	lsls	r0, r2, #16
    566c:	4684      	mov	ip, r0
    566e:	9801      	ldr	r0, [sp, #4]
    5670:	4467      	add	r7, ip
    5672:	4684      	mov	ip, r0
    5674:	4467      	add	r7, ip
    5676:	44a3      	add	fp, r4
    5678:	46bc      	mov	ip, r7
    567a:	45a3      	cmp	fp, r4
    567c:	41a4      	sbcs	r4, r4
    567e:	4699      	mov	r9, r3
    5680:	44d4      	add	ip, sl
    5682:	4264      	negs	r4, r4
    5684:	4287      	cmp	r7, r0
    5686:	41bf      	sbcs	r7, r7
    5688:	45d4      	cmp	ip, sl
    568a:	4180      	sbcs	r0, r0
    568c:	44e1      	add	r9, ip
    568e:	46a0      	mov	r8, r4
    5690:	4599      	cmp	r9, r3
    5692:	419b      	sbcs	r3, r3
    5694:	427f      	negs	r7, r7
    5696:	4240      	negs	r0, r0
    5698:	44c8      	add	r8, r9
    569a:	4307      	orrs	r7, r0
    569c:	0c12      	lsrs	r2, r2, #16
    569e:	18ba      	adds	r2, r7, r2
    56a0:	45a0      	cmp	r8, r4
    56a2:	41a4      	sbcs	r4, r4
    56a4:	425f      	negs	r7, r3
    56a6:	003b      	movs	r3, r7
    56a8:	4264      	negs	r4, r4
    56aa:	4323      	orrs	r3, r4
    56ac:	18d7      	adds	r7, r2, r3
    56ae:	4643      	mov	r3, r8
    56b0:	197d      	adds	r5, r7, r5
    56b2:	0ddb      	lsrs	r3, r3, #23
    56b4:	026d      	lsls	r5, r5, #9
    56b6:	431d      	orrs	r5, r3
    56b8:	465b      	mov	r3, fp
    56ba:	025a      	lsls	r2, r3, #9
    56bc:	9b05      	ldr	r3, [sp, #20]
    56be:	431a      	orrs	r2, r3
    56c0:	1e53      	subs	r3, r2, #1
    56c2:	419a      	sbcs	r2, r3
    56c4:	465b      	mov	r3, fp
    56c6:	0ddb      	lsrs	r3, r3, #23
    56c8:	431a      	orrs	r2, r3
    56ca:	4643      	mov	r3, r8
    56cc:	025b      	lsls	r3, r3, #9
    56ce:	4313      	orrs	r3, r2
    56d0:	01ea      	lsls	r2, r5, #7
    56d2:	d507      	bpl.n	56e4 <__aeabi_dmul+0x384>
    56d4:	2201      	movs	r2, #1
    56d6:	085c      	lsrs	r4, r3, #1
    56d8:	4013      	ands	r3, r2
    56da:	4323      	orrs	r3, r4
    56dc:	07ea      	lsls	r2, r5, #31
    56de:	9e02      	ldr	r6, [sp, #8]
    56e0:	4313      	orrs	r3, r2
    56e2:	086d      	lsrs	r5, r5, #1
    56e4:	4a57      	ldr	r2, [pc, #348]	; (5844 <__aeabi_dmul+0x4e4>)
    56e6:	18b2      	adds	r2, r6, r2
    56e8:	2a00      	cmp	r2, #0
    56ea:	dd4b      	ble.n	5784 <__aeabi_dmul+0x424>
    56ec:	0758      	lsls	r0, r3, #29
    56ee:	d009      	beq.n	5704 <__aeabi_dmul+0x3a4>
    56f0:	200f      	movs	r0, #15
    56f2:	4018      	ands	r0, r3
    56f4:	2804      	cmp	r0, #4
    56f6:	d005      	beq.n	5704 <__aeabi_dmul+0x3a4>
    56f8:	1d18      	adds	r0, r3, #4
    56fa:	4298      	cmp	r0, r3
    56fc:	419b      	sbcs	r3, r3
    56fe:	425b      	negs	r3, r3
    5700:	18ed      	adds	r5, r5, r3
    5702:	0003      	movs	r3, r0
    5704:	01e8      	lsls	r0, r5, #7
    5706:	d504      	bpl.n	5712 <__aeabi_dmul+0x3b2>
    5708:	4a4f      	ldr	r2, [pc, #316]	; (5848 <__aeabi_dmul+0x4e8>)
    570a:	4015      	ands	r5, r2
    570c:	2280      	movs	r2, #128	; 0x80
    570e:	00d2      	lsls	r2, r2, #3
    5710:	18b2      	adds	r2, r6, r2
    5712:	484e      	ldr	r0, [pc, #312]	; (584c <__aeabi_dmul+0x4ec>)
    5714:	4282      	cmp	r2, r0
    5716:	dd00      	ble.n	571a <__aeabi_dmul+0x3ba>
    5718:	e6e7      	b.n	54ea <__aeabi_dmul+0x18a>
    571a:	2401      	movs	r4, #1
    571c:	08db      	lsrs	r3, r3, #3
    571e:	0768      	lsls	r0, r5, #29
    5720:	4318      	orrs	r0, r3
    5722:	026d      	lsls	r5, r5, #9
    5724:	0553      	lsls	r3, r2, #21
    5726:	4680      	mov	r8, r0
    5728:	0b2d      	lsrs	r5, r5, #12
    572a:	0d5b      	lsrs	r3, r3, #21
    572c:	400c      	ands	r4, r1
    572e:	e67d      	b.n	542c <__aeabi_dmul+0xcc>
    5730:	2280      	movs	r2, #128	; 0x80
    5732:	4659      	mov	r1, fp
    5734:	0312      	lsls	r2, r2, #12
    5736:	4211      	tst	r1, r2
    5738:	d008      	beq.n	574c <__aeabi_dmul+0x3ec>
    573a:	4215      	tst	r5, r2
    573c:	d106      	bne.n	574c <__aeabi_dmul+0x3ec>
    573e:	4315      	orrs	r5, r2
    5740:	032d      	lsls	r5, r5, #12
    5742:	4698      	mov	r8, r3
    5744:	0b2d      	lsrs	r5, r5, #12
    5746:	464c      	mov	r4, r9
    5748:	4b41      	ldr	r3, [pc, #260]	; (5850 <__aeabi_dmul+0x4f0>)
    574a:	e66f      	b.n	542c <__aeabi_dmul+0xcc>
    574c:	465d      	mov	r5, fp
    574e:	4315      	orrs	r5, r2
    5750:	032d      	lsls	r5, r5, #12
    5752:	0b2d      	lsrs	r5, r5, #12
    5754:	4b3e      	ldr	r3, [pc, #248]	; (5850 <__aeabi_dmul+0x4f0>)
    5756:	e669      	b.n	542c <__aeabi_dmul+0xcc>
    5758:	0003      	movs	r3, r0
    575a:	4655      	mov	r5, sl
    575c:	3b28      	subs	r3, #40	; 0x28
    575e:	409d      	lsls	r5, r3
    5760:	2300      	movs	r3, #0
    5762:	e6bc      	b.n	54de <__aeabi_dmul+0x17e>
    5764:	4650      	mov	r0, sl
    5766:	f000 fe05 	bl	6374 <__clzsi2>
    576a:	3020      	adds	r0, #32
    576c:	e6a8      	b.n	54c0 <__aeabi_dmul+0x160>
    576e:	0003      	movs	r3, r0
    5770:	3b28      	subs	r3, #40	; 0x28
    5772:	409f      	lsls	r7, r3
    5774:	2300      	movs	r3, #0
    5776:	46bb      	mov	fp, r7
    5778:	4698      	mov	r8, r3
    577a:	e689      	b.n	5490 <__aeabi_dmul+0x130>
    577c:	f000 fdfa 	bl	6374 <__clzsi2>
    5780:	3020      	adds	r0, #32
    5782:	e673      	b.n	546c <__aeabi_dmul+0x10c>
    5784:	2401      	movs	r4, #1
    5786:	1aa6      	subs	r6, r4, r2
    5788:	2e38      	cmp	r6, #56	; 0x38
    578a:	dd07      	ble.n	579c <__aeabi_dmul+0x43c>
    578c:	2200      	movs	r2, #0
    578e:	400c      	ands	r4, r1
    5790:	2300      	movs	r3, #0
    5792:	2500      	movs	r5, #0
    5794:	4690      	mov	r8, r2
    5796:	e649      	b.n	542c <__aeabi_dmul+0xcc>
    5798:	9e02      	ldr	r6, [sp, #8]
    579a:	e7a3      	b.n	56e4 <__aeabi_dmul+0x384>
    579c:	2e1f      	cmp	r6, #31
    579e:	dc20      	bgt.n	57e2 <__aeabi_dmul+0x482>
    57a0:	2220      	movs	r2, #32
    57a2:	002c      	movs	r4, r5
    57a4:	0018      	movs	r0, r3
    57a6:	1b92      	subs	r2, r2, r6
    57a8:	40f0      	lsrs	r0, r6
    57aa:	4094      	lsls	r4, r2
    57ac:	4093      	lsls	r3, r2
    57ae:	4304      	orrs	r4, r0
    57b0:	1e58      	subs	r0, r3, #1
    57b2:	4183      	sbcs	r3, r0
    57b4:	431c      	orrs	r4, r3
    57b6:	40f5      	lsrs	r5, r6
    57b8:	0763      	lsls	r3, r4, #29
    57ba:	d009      	beq.n	57d0 <__aeabi_dmul+0x470>
    57bc:	230f      	movs	r3, #15
    57be:	4023      	ands	r3, r4
    57c0:	2b04      	cmp	r3, #4
    57c2:	d005      	beq.n	57d0 <__aeabi_dmul+0x470>
    57c4:	0023      	movs	r3, r4
    57c6:	1d1c      	adds	r4, r3, #4
    57c8:	429c      	cmp	r4, r3
    57ca:	4192      	sbcs	r2, r2
    57cc:	4252      	negs	r2, r2
    57ce:	18ad      	adds	r5, r5, r2
    57d0:	022b      	lsls	r3, r5, #8
    57d2:	d51f      	bpl.n	5814 <__aeabi_dmul+0x4b4>
    57d4:	2401      	movs	r4, #1
    57d6:	2200      	movs	r2, #0
    57d8:	400c      	ands	r4, r1
    57da:	2301      	movs	r3, #1
    57dc:	2500      	movs	r5, #0
    57de:	4690      	mov	r8, r2
    57e0:	e624      	b.n	542c <__aeabi_dmul+0xcc>
    57e2:	201f      	movs	r0, #31
    57e4:	002c      	movs	r4, r5
    57e6:	4240      	negs	r0, r0
    57e8:	1a82      	subs	r2, r0, r2
    57ea:	40d4      	lsrs	r4, r2
    57ec:	2e20      	cmp	r6, #32
    57ee:	d01c      	beq.n	582a <__aeabi_dmul+0x4ca>
    57f0:	2240      	movs	r2, #64	; 0x40
    57f2:	1b96      	subs	r6, r2, r6
    57f4:	40b5      	lsls	r5, r6
    57f6:	432b      	orrs	r3, r5
    57f8:	1e58      	subs	r0, r3, #1
    57fa:	4183      	sbcs	r3, r0
    57fc:	2007      	movs	r0, #7
    57fe:	4323      	orrs	r3, r4
    5800:	4018      	ands	r0, r3
    5802:	2500      	movs	r5, #0
    5804:	2800      	cmp	r0, #0
    5806:	d009      	beq.n	581c <__aeabi_dmul+0x4bc>
    5808:	220f      	movs	r2, #15
    580a:	2500      	movs	r5, #0
    580c:	401a      	ands	r2, r3
    580e:	001c      	movs	r4, r3
    5810:	2a04      	cmp	r2, #4
    5812:	d1d8      	bne.n	57c6 <__aeabi_dmul+0x466>
    5814:	0023      	movs	r3, r4
    5816:	0768      	lsls	r0, r5, #29
    5818:	026d      	lsls	r5, r5, #9
    581a:	0b2d      	lsrs	r5, r5, #12
    581c:	2401      	movs	r4, #1
    581e:	08db      	lsrs	r3, r3, #3
    5820:	4303      	orrs	r3, r0
    5822:	4698      	mov	r8, r3
    5824:	400c      	ands	r4, r1
    5826:	2300      	movs	r3, #0
    5828:	e600      	b.n	542c <__aeabi_dmul+0xcc>
    582a:	2500      	movs	r5, #0
    582c:	e7e3      	b.n	57f6 <__aeabi_dmul+0x496>
    582e:	2280      	movs	r2, #128	; 0x80
    5830:	2401      	movs	r4, #1
    5832:	0312      	lsls	r2, r2, #12
    5834:	4315      	orrs	r5, r2
    5836:	032d      	lsls	r5, r5, #12
    5838:	4698      	mov	r8, r3
    583a:	0b2d      	lsrs	r5, r5, #12
    583c:	400c      	ands	r4, r1
    583e:	4b04      	ldr	r3, [pc, #16]	; (5850 <__aeabi_dmul+0x4f0>)
    5840:	e5f4      	b.n	542c <__aeabi_dmul+0xcc>
    5842:	46c0      	nop			; (mov r8, r8)
    5844:	000003ff 	.word	0x000003ff
    5848:	feffffff 	.word	0xfeffffff
    584c:	000007fe 	.word	0x000007fe
    5850:	000007ff 	.word	0x000007ff

00005854 <__aeabi_dsub>:
    5854:	b5f0      	push	{r4, r5, r6, r7, lr}
    5856:	4657      	mov	r7, sl
    5858:	464e      	mov	r6, r9
    585a:	4645      	mov	r5, r8
    585c:	b4e0      	push	{r5, r6, r7}
    585e:	000e      	movs	r6, r1
    5860:	0011      	movs	r1, r2
    5862:	0ff2      	lsrs	r2, r6, #31
    5864:	4692      	mov	sl, r2
    5866:	00c5      	lsls	r5, r0, #3
    5868:	0f42      	lsrs	r2, r0, #29
    586a:	0318      	lsls	r0, r3, #12
    586c:	0337      	lsls	r7, r6, #12
    586e:	0074      	lsls	r4, r6, #1
    5870:	0a40      	lsrs	r0, r0, #9
    5872:	0f4e      	lsrs	r6, r1, #29
    5874:	0a7f      	lsrs	r7, r7, #9
    5876:	4330      	orrs	r0, r6
    5878:	4ecf      	ldr	r6, [pc, #828]	; (5bb8 <__aeabi_dsub+0x364>)
    587a:	4317      	orrs	r7, r2
    587c:	005a      	lsls	r2, r3, #1
    587e:	0d64      	lsrs	r4, r4, #21
    5880:	0d52      	lsrs	r2, r2, #21
    5882:	0fdb      	lsrs	r3, r3, #31
    5884:	00c9      	lsls	r1, r1, #3
    5886:	42b2      	cmp	r2, r6
    5888:	d100      	bne.n	588c <__aeabi_dsub+0x38>
    588a:	e0e5      	b.n	5a58 <__aeabi_dsub+0x204>
    588c:	2601      	movs	r6, #1
    588e:	4073      	eors	r3, r6
    5890:	1aa6      	subs	r6, r4, r2
    5892:	46b4      	mov	ip, r6
    5894:	4553      	cmp	r3, sl
    5896:	d100      	bne.n	589a <__aeabi_dsub+0x46>
    5898:	e0af      	b.n	59fa <__aeabi_dsub+0x1a6>
    589a:	2e00      	cmp	r6, #0
    589c:	dc00      	bgt.n	58a0 <__aeabi_dsub+0x4c>
    589e:	e10d      	b.n	5abc <__aeabi_dsub+0x268>
    58a0:	2a00      	cmp	r2, #0
    58a2:	d13a      	bne.n	591a <__aeabi_dsub+0xc6>
    58a4:	0003      	movs	r3, r0
    58a6:	430b      	orrs	r3, r1
    58a8:	d000      	beq.n	58ac <__aeabi_dsub+0x58>
    58aa:	e0e4      	b.n	5a76 <__aeabi_dsub+0x222>
    58ac:	076b      	lsls	r3, r5, #29
    58ae:	d009      	beq.n	58c4 <__aeabi_dsub+0x70>
    58b0:	230f      	movs	r3, #15
    58b2:	402b      	ands	r3, r5
    58b4:	2b04      	cmp	r3, #4
    58b6:	d005      	beq.n	58c4 <__aeabi_dsub+0x70>
    58b8:	1d2b      	adds	r3, r5, #4
    58ba:	42ab      	cmp	r3, r5
    58bc:	41ad      	sbcs	r5, r5
    58be:	426d      	negs	r5, r5
    58c0:	197f      	adds	r7, r7, r5
    58c2:	001d      	movs	r5, r3
    58c4:	023b      	lsls	r3, r7, #8
    58c6:	d400      	bmi.n	58ca <__aeabi_dsub+0x76>
    58c8:	e088      	b.n	59dc <__aeabi_dsub+0x188>
    58ca:	4bbb      	ldr	r3, [pc, #748]	; (5bb8 <__aeabi_dsub+0x364>)
    58cc:	3401      	adds	r4, #1
    58ce:	429c      	cmp	r4, r3
    58d0:	d100      	bne.n	58d4 <__aeabi_dsub+0x80>
    58d2:	e110      	b.n	5af6 <__aeabi_dsub+0x2a2>
    58d4:	003a      	movs	r2, r7
    58d6:	4bb9      	ldr	r3, [pc, #740]	; (5bbc <__aeabi_dsub+0x368>)
    58d8:	4651      	mov	r1, sl
    58da:	401a      	ands	r2, r3
    58dc:	2301      	movs	r3, #1
    58de:	0750      	lsls	r0, r2, #29
    58e0:	08ed      	lsrs	r5, r5, #3
    58e2:	0252      	lsls	r2, r2, #9
    58e4:	0564      	lsls	r4, r4, #21
    58e6:	4305      	orrs	r5, r0
    58e8:	0b12      	lsrs	r2, r2, #12
    58ea:	0d64      	lsrs	r4, r4, #21
    58ec:	400b      	ands	r3, r1
    58ee:	2100      	movs	r1, #0
    58f0:	0028      	movs	r0, r5
    58f2:	0312      	lsls	r2, r2, #12
    58f4:	0d0d      	lsrs	r5, r1, #20
    58f6:	0b12      	lsrs	r2, r2, #12
    58f8:	0564      	lsls	r4, r4, #21
    58fa:	052d      	lsls	r5, r5, #20
    58fc:	4315      	orrs	r5, r2
    58fe:	0862      	lsrs	r2, r4, #1
    5900:	4caf      	ldr	r4, [pc, #700]	; (5bc0 <__aeabi_dsub+0x36c>)
    5902:	07db      	lsls	r3, r3, #31
    5904:	402c      	ands	r4, r5
    5906:	4314      	orrs	r4, r2
    5908:	0064      	lsls	r4, r4, #1
    590a:	0864      	lsrs	r4, r4, #1
    590c:	431c      	orrs	r4, r3
    590e:	0021      	movs	r1, r4
    5910:	bc1c      	pop	{r2, r3, r4}
    5912:	4690      	mov	r8, r2
    5914:	4699      	mov	r9, r3
    5916:	46a2      	mov	sl, r4
    5918:	bdf0      	pop	{r4, r5, r6, r7, pc}
    591a:	4ba7      	ldr	r3, [pc, #668]	; (5bb8 <__aeabi_dsub+0x364>)
    591c:	429c      	cmp	r4, r3
    591e:	d0c5      	beq.n	58ac <__aeabi_dsub+0x58>
    5920:	2380      	movs	r3, #128	; 0x80
    5922:	041b      	lsls	r3, r3, #16
    5924:	4318      	orrs	r0, r3
    5926:	4663      	mov	r3, ip
    5928:	2b38      	cmp	r3, #56	; 0x38
    592a:	dd00      	ble.n	592e <__aeabi_dsub+0xda>
    592c:	e0fd      	b.n	5b2a <__aeabi_dsub+0x2d6>
    592e:	2b1f      	cmp	r3, #31
    5930:	dd00      	ble.n	5934 <__aeabi_dsub+0xe0>
    5932:	e130      	b.n	5b96 <__aeabi_dsub+0x342>
    5934:	4662      	mov	r2, ip
    5936:	2320      	movs	r3, #32
    5938:	1a9b      	subs	r3, r3, r2
    593a:	0002      	movs	r2, r0
    593c:	409a      	lsls	r2, r3
    593e:	4666      	mov	r6, ip
    5940:	4690      	mov	r8, r2
    5942:	000a      	movs	r2, r1
    5944:	4099      	lsls	r1, r3
    5946:	40f2      	lsrs	r2, r6
    5948:	4646      	mov	r6, r8
    594a:	1e4b      	subs	r3, r1, #1
    594c:	4199      	sbcs	r1, r3
    594e:	4332      	orrs	r2, r6
    5950:	4311      	orrs	r1, r2
    5952:	4663      	mov	r3, ip
    5954:	0002      	movs	r2, r0
    5956:	40da      	lsrs	r2, r3
    5958:	1a69      	subs	r1, r5, r1
    595a:	428d      	cmp	r5, r1
    595c:	419b      	sbcs	r3, r3
    595e:	000d      	movs	r5, r1
    5960:	1aba      	subs	r2, r7, r2
    5962:	425b      	negs	r3, r3
    5964:	1ad7      	subs	r7, r2, r3
    5966:	023b      	lsls	r3, r7, #8
    5968:	d535      	bpl.n	59d6 <__aeabi_dsub+0x182>
    596a:	027a      	lsls	r2, r7, #9
    596c:	0a53      	lsrs	r3, r2, #9
    596e:	4698      	mov	r8, r3
    5970:	4643      	mov	r3, r8
    5972:	2b00      	cmp	r3, #0
    5974:	d100      	bne.n	5978 <__aeabi_dsub+0x124>
    5976:	e0c4      	b.n	5b02 <__aeabi_dsub+0x2ae>
    5978:	4640      	mov	r0, r8
    597a:	f000 fcfb 	bl	6374 <__clzsi2>
    597e:	0003      	movs	r3, r0
    5980:	3b08      	subs	r3, #8
    5982:	2b1f      	cmp	r3, #31
    5984:	dd00      	ble.n	5988 <__aeabi_dsub+0x134>
    5986:	e0c5      	b.n	5b14 <__aeabi_dsub+0x2c0>
    5988:	2220      	movs	r2, #32
    598a:	0029      	movs	r1, r5
    598c:	1ad2      	subs	r2, r2, r3
    598e:	4647      	mov	r7, r8
    5990:	40d1      	lsrs	r1, r2
    5992:	409f      	lsls	r7, r3
    5994:	000a      	movs	r2, r1
    5996:	409d      	lsls	r5, r3
    5998:	433a      	orrs	r2, r7
    599a:	429c      	cmp	r4, r3
    599c:	dd00      	ble.n	59a0 <__aeabi_dsub+0x14c>
    599e:	e0c0      	b.n	5b22 <__aeabi_dsub+0x2ce>
    59a0:	1b1c      	subs	r4, r3, r4
    59a2:	1c63      	adds	r3, r4, #1
    59a4:	2b1f      	cmp	r3, #31
    59a6:	dd00      	ble.n	59aa <__aeabi_dsub+0x156>
    59a8:	e0e4      	b.n	5b74 <__aeabi_dsub+0x320>
    59aa:	2120      	movs	r1, #32
    59ac:	0014      	movs	r4, r2
    59ae:	0028      	movs	r0, r5
    59b0:	1ac9      	subs	r1, r1, r3
    59b2:	40d8      	lsrs	r0, r3
    59b4:	408c      	lsls	r4, r1
    59b6:	408d      	lsls	r5, r1
    59b8:	4304      	orrs	r4, r0
    59ba:	40da      	lsrs	r2, r3
    59bc:	1e68      	subs	r0, r5, #1
    59be:	4185      	sbcs	r5, r0
    59c0:	0017      	movs	r7, r2
    59c2:	4325      	orrs	r5, r4
    59c4:	2400      	movs	r4, #0
    59c6:	e771      	b.n	58ac <__aeabi_dsub+0x58>
    59c8:	4642      	mov	r2, r8
    59ca:	4663      	mov	r3, ip
    59cc:	431a      	orrs	r2, r3
    59ce:	d100      	bne.n	59d2 <__aeabi_dsub+0x17e>
    59d0:	e24c      	b.n	5e6c <__aeabi_dsub+0x618>
    59d2:	4667      	mov	r7, ip
    59d4:	4645      	mov	r5, r8
    59d6:	076b      	lsls	r3, r5, #29
    59d8:	d000      	beq.n	59dc <__aeabi_dsub+0x188>
    59da:	e769      	b.n	58b0 <__aeabi_dsub+0x5c>
    59dc:	2301      	movs	r3, #1
    59de:	4651      	mov	r1, sl
    59e0:	0778      	lsls	r0, r7, #29
    59e2:	08ed      	lsrs	r5, r5, #3
    59e4:	08fa      	lsrs	r2, r7, #3
    59e6:	400b      	ands	r3, r1
    59e8:	4305      	orrs	r5, r0
    59ea:	4973      	ldr	r1, [pc, #460]	; (5bb8 <__aeabi_dsub+0x364>)
    59ec:	428c      	cmp	r4, r1
    59ee:	d038      	beq.n	5a62 <__aeabi_dsub+0x20e>
    59f0:	0312      	lsls	r2, r2, #12
    59f2:	0564      	lsls	r4, r4, #21
    59f4:	0b12      	lsrs	r2, r2, #12
    59f6:	0d64      	lsrs	r4, r4, #21
    59f8:	e779      	b.n	58ee <__aeabi_dsub+0x9a>
    59fa:	2e00      	cmp	r6, #0
    59fc:	dc00      	bgt.n	5a00 <__aeabi_dsub+0x1ac>
    59fe:	e09a      	b.n	5b36 <__aeabi_dsub+0x2e2>
    5a00:	2a00      	cmp	r2, #0
    5a02:	d047      	beq.n	5a94 <__aeabi_dsub+0x240>
    5a04:	4a6c      	ldr	r2, [pc, #432]	; (5bb8 <__aeabi_dsub+0x364>)
    5a06:	4294      	cmp	r4, r2
    5a08:	d100      	bne.n	5a0c <__aeabi_dsub+0x1b8>
    5a0a:	e74f      	b.n	58ac <__aeabi_dsub+0x58>
    5a0c:	2280      	movs	r2, #128	; 0x80
    5a0e:	0412      	lsls	r2, r2, #16
    5a10:	4310      	orrs	r0, r2
    5a12:	4662      	mov	r2, ip
    5a14:	2a38      	cmp	r2, #56	; 0x38
    5a16:	dc00      	bgt.n	5a1a <__aeabi_dsub+0x1c6>
    5a18:	e108      	b.n	5c2c <__aeabi_dsub+0x3d8>
    5a1a:	4301      	orrs	r1, r0
    5a1c:	1e48      	subs	r0, r1, #1
    5a1e:	4181      	sbcs	r1, r0
    5a20:	2200      	movs	r2, #0
    5a22:	b2c9      	uxtb	r1, r1
    5a24:	1949      	adds	r1, r1, r5
    5a26:	19d2      	adds	r2, r2, r7
    5a28:	42a9      	cmp	r1, r5
    5a2a:	41bf      	sbcs	r7, r7
    5a2c:	000d      	movs	r5, r1
    5a2e:	427f      	negs	r7, r7
    5a30:	18bf      	adds	r7, r7, r2
    5a32:	023a      	lsls	r2, r7, #8
    5a34:	d400      	bmi.n	5a38 <__aeabi_dsub+0x1e4>
    5a36:	e142      	b.n	5cbe <__aeabi_dsub+0x46a>
    5a38:	4a5f      	ldr	r2, [pc, #380]	; (5bb8 <__aeabi_dsub+0x364>)
    5a3a:	3401      	adds	r4, #1
    5a3c:	4294      	cmp	r4, r2
    5a3e:	d100      	bne.n	5a42 <__aeabi_dsub+0x1ee>
    5a40:	e14e      	b.n	5ce0 <__aeabi_dsub+0x48c>
    5a42:	2001      	movs	r0, #1
    5a44:	4a5d      	ldr	r2, [pc, #372]	; (5bbc <__aeabi_dsub+0x368>)
    5a46:	0869      	lsrs	r1, r5, #1
    5a48:	403a      	ands	r2, r7
    5a4a:	4028      	ands	r0, r5
    5a4c:	4308      	orrs	r0, r1
    5a4e:	07d5      	lsls	r5, r2, #31
    5a50:	4305      	orrs	r5, r0
    5a52:	0857      	lsrs	r7, r2, #1
    5a54:	469a      	mov	sl, r3
    5a56:	e729      	b.n	58ac <__aeabi_dsub+0x58>
    5a58:	0006      	movs	r6, r0
    5a5a:	430e      	orrs	r6, r1
    5a5c:	d000      	beq.n	5a60 <__aeabi_dsub+0x20c>
    5a5e:	e717      	b.n	5890 <__aeabi_dsub+0x3c>
    5a60:	e714      	b.n	588c <__aeabi_dsub+0x38>
    5a62:	0029      	movs	r1, r5
    5a64:	4311      	orrs	r1, r2
    5a66:	d100      	bne.n	5a6a <__aeabi_dsub+0x216>
    5a68:	e1f9      	b.n	5e5e <__aeabi_dsub+0x60a>
    5a6a:	2180      	movs	r1, #128	; 0x80
    5a6c:	0309      	lsls	r1, r1, #12
    5a6e:	430a      	orrs	r2, r1
    5a70:	0312      	lsls	r2, r2, #12
    5a72:	0b12      	lsrs	r2, r2, #12
    5a74:	e73b      	b.n	58ee <__aeabi_dsub+0x9a>
    5a76:	2301      	movs	r3, #1
    5a78:	425b      	negs	r3, r3
    5a7a:	4698      	mov	r8, r3
    5a7c:	44c4      	add	ip, r8
    5a7e:	4663      	mov	r3, ip
    5a80:	2b00      	cmp	r3, #0
    5a82:	d172      	bne.n	5b6a <__aeabi_dsub+0x316>
    5a84:	1a69      	subs	r1, r5, r1
    5a86:	428d      	cmp	r5, r1
    5a88:	419b      	sbcs	r3, r3
    5a8a:	1a3f      	subs	r7, r7, r0
    5a8c:	425b      	negs	r3, r3
    5a8e:	1aff      	subs	r7, r7, r3
    5a90:	000d      	movs	r5, r1
    5a92:	e768      	b.n	5966 <__aeabi_dsub+0x112>
    5a94:	0002      	movs	r2, r0
    5a96:	430a      	orrs	r2, r1
    5a98:	d100      	bne.n	5a9c <__aeabi_dsub+0x248>
    5a9a:	e707      	b.n	58ac <__aeabi_dsub+0x58>
    5a9c:	2201      	movs	r2, #1
    5a9e:	4252      	negs	r2, r2
    5aa0:	4690      	mov	r8, r2
    5aa2:	44c4      	add	ip, r8
    5aa4:	4662      	mov	r2, ip
    5aa6:	2a00      	cmp	r2, #0
    5aa8:	d000      	beq.n	5aac <__aeabi_dsub+0x258>
    5aaa:	e0e6      	b.n	5c7a <__aeabi_dsub+0x426>
    5aac:	1869      	adds	r1, r5, r1
    5aae:	42a9      	cmp	r1, r5
    5ab0:	41b6      	sbcs	r6, r6
    5ab2:	183f      	adds	r7, r7, r0
    5ab4:	4276      	negs	r6, r6
    5ab6:	19f7      	adds	r7, r6, r7
    5ab8:	000d      	movs	r5, r1
    5aba:	e7ba      	b.n	5a32 <__aeabi_dsub+0x1de>
    5abc:	2e00      	cmp	r6, #0
    5abe:	d000      	beq.n	5ac2 <__aeabi_dsub+0x26e>
    5ac0:	e080      	b.n	5bc4 <__aeabi_dsub+0x370>
    5ac2:	1c62      	adds	r2, r4, #1
    5ac4:	0552      	lsls	r2, r2, #21
    5ac6:	0d52      	lsrs	r2, r2, #21
    5ac8:	2a01      	cmp	r2, #1
    5aca:	dc00      	bgt.n	5ace <__aeabi_dsub+0x27a>
    5acc:	e0f9      	b.n	5cc2 <__aeabi_dsub+0x46e>
    5ace:	1a6a      	subs	r2, r5, r1
    5ad0:	4691      	mov	r9, r2
    5ad2:	454d      	cmp	r5, r9
    5ad4:	41b6      	sbcs	r6, r6
    5ad6:	1a3a      	subs	r2, r7, r0
    5ad8:	4276      	negs	r6, r6
    5ada:	1b92      	subs	r2, r2, r6
    5adc:	4690      	mov	r8, r2
    5ade:	0212      	lsls	r2, r2, #8
    5ae0:	d400      	bmi.n	5ae4 <__aeabi_dsub+0x290>
    5ae2:	e099      	b.n	5c18 <__aeabi_dsub+0x3c4>
    5ae4:	1b4d      	subs	r5, r1, r5
    5ae6:	42a9      	cmp	r1, r5
    5ae8:	4189      	sbcs	r1, r1
    5aea:	1bc7      	subs	r7, r0, r7
    5aec:	4249      	negs	r1, r1
    5aee:	1a7a      	subs	r2, r7, r1
    5af0:	4690      	mov	r8, r2
    5af2:	469a      	mov	sl, r3
    5af4:	e73c      	b.n	5970 <__aeabi_dsub+0x11c>
    5af6:	4652      	mov	r2, sl
    5af8:	2301      	movs	r3, #1
    5afa:	2500      	movs	r5, #0
    5afc:	4013      	ands	r3, r2
    5afe:	2200      	movs	r2, #0
    5b00:	e6f5      	b.n	58ee <__aeabi_dsub+0x9a>
    5b02:	0028      	movs	r0, r5
    5b04:	f000 fc36 	bl	6374 <__clzsi2>
    5b08:	3020      	adds	r0, #32
    5b0a:	0003      	movs	r3, r0
    5b0c:	3b08      	subs	r3, #8
    5b0e:	2b1f      	cmp	r3, #31
    5b10:	dc00      	bgt.n	5b14 <__aeabi_dsub+0x2c0>
    5b12:	e739      	b.n	5988 <__aeabi_dsub+0x134>
    5b14:	002a      	movs	r2, r5
    5b16:	3828      	subs	r0, #40	; 0x28
    5b18:	4082      	lsls	r2, r0
    5b1a:	2500      	movs	r5, #0
    5b1c:	429c      	cmp	r4, r3
    5b1e:	dc00      	bgt.n	5b22 <__aeabi_dsub+0x2ce>
    5b20:	e73e      	b.n	59a0 <__aeabi_dsub+0x14c>
    5b22:	4f26      	ldr	r7, [pc, #152]	; (5bbc <__aeabi_dsub+0x368>)
    5b24:	1ae4      	subs	r4, r4, r3
    5b26:	4017      	ands	r7, r2
    5b28:	e6c0      	b.n	58ac <__aeabi_dsub+0x58>
    5b2a:	4301      	orrs	r1, r0
    5b2c:	1e48      	subs	r0, r1, #1
    5b2e:	4181      	sbcs	r1, r0
    5b30:	2200      	movs	r2, #0
    5b32:	b2c9      	uxtb	r1, r1
    5b34:	e710      	b.n	5958 <__aeabi_dsub+0x104>
    5b36:	2e00      	cmp	r6, #0
    5b38:	d000      	beq.n	5b3c <__aeabi_dsub+0x2e8>
    5b3a:	e0f1      	b.n	5d20 <__aeabi_dsub+0x4cc>
    5b3c:	1c62      	adds	r2, r4, #1
    5b3e:	4694      	mov	ip, r2
    5b40:	0552      	lsls	r2, r2, #21
    5b42:	0d52      	lsrs	r2, r2, #21
    5b44:	2a01      	cmp	r2, #1
    5b46:	dc00      	bgt.n	5b4a <__aeabi_dsub+0x2f6>
    5b48:	e0a0      	b.n	5c8c <__aeabi_dsub+0x438>
    5b4a:	4a1b      	ldr	r2, [pc, #108]	; (5bb8 <__aeabi_dsub+0x364>)
    5b4c:	4594      	cmp	ip, r2
    5b4e:	d100      	bne.n	5b52 <__aeabi_dsub+0x2fe>
    5b50:	e0c5      	b.n	5cde <__aeabi_dsub+0x48a>
    5b52:	1869      	adds	r1, r5, r1
    5b54:	42a9      	cmp	r1, r5
    5b56:	4192      	sbcs	r2, r2
    5b58:	183f      	adds	r7, r7, r0
    5b5a:	4252      	negs	r2, r2
    5b5c:	19d2      	adds	r2, r2, r7
    5b5e:	0849      	lsrs	r1, r1, #1
    5b60:	07d5      	lsls	r5, r2, #31
    5b62:	430d      	orrs	r5, r1
    5b64:	0857      	lsrs	r7, r2, #1
    5b66:	4664      	mov	r4, ip
    5b68:	e6a0      	b.n	58ac <__aeabi_dsub+0x58>
    5b6a:	4b13      	ldr	r3, [pc, #76]	; (5bb8 <__aeabi_dsub+0x364>)
    5b6c:	429c      	cmp	r4, r3
    5b6e:	d000      	beq.n	5b72 <__aeabi_dsub+0x31e>
    5b70:	e6d9      	b.n	5926 <__aeabi_dsub+0xd2>
    5b72:	e69b      	b.n	58ac <__aeabi_dsub+0x58>
    5b74:	0011      	movs	r1, r2
    5b76:	3c1f      	subs	r4, #31
    5b78:	40e1      	lsrs	r1, r4
    5b7a:	000c      	movs	r4, r1
    5b7c:	2b20      	cmp	r3, #32
    5b7e:	d100      	bne.n	5b82 <__aeabi_dsub+0x32e>
    5b80:	e080      	b.n	5c84 <__aeabi_dsub+0x430>
    5b82:	2140      	movs	r1, #64	; 0x40
    5b84:	1acb      	subs	r3, r1, r3
    5b86:	409a      	lsls	r2, r3
    5b88:	4315      	orrs	r5, r2
    5b8a:	1e6a      	subs	r2, r5, #1
    5b8c:	4195      	sbcs	r5, r2
    5b8e:	2700      	movs	r7, #0
    5b90:	4325      	orrs	r5, r4
    5b92:	2400      	movs	r4, #0
    5b94:	e71f      	b.n	59d6 <__aeabi_dsub+0x182>
    5b96:	4663      	mov	r3, ip
    5b98:	0002      	movs	r2, r0
    5b9a:	3b20      	subs	r3, #32
    5b9c:	40da      	lsrs	r2, r3
    5b9e:	4663      	mov	r3, ip
    5ba0:	2b20      	cmp	r3, #32
    5ba2:	d071      	beq.n	5c88 <__aeabi_dsub+0x434>
    5ba4:	2340      	movs	r3, #64	; 0x40
    5ba6:	4666      	mov	r6, ip
    5ba8:	1b9b      	subs	r3, r3, r6
    5baa:	4098      	lsls	r0, r3
    5bac:	4301      	orrs	r1, r0
    5bae:	1e48      	subs	r0, r1, #1
    5bb0:	4181      	sbcs	r1, r0
    5bb2:	4311      	orrs	r1, r2
    5bb4:	2200      	movs	r2, #0
    5bb6:	e6cf      	b.n	5958 <__aeabi_dsub+0x104>
    5bb8:	000007ff 	.word	0x000007ff
    5bbc:	ff7fffff 	.word	0xff7fffff
    5bc0:	800fffff 	.word	0x800fffff
    5bc4:	2c00      	cmp	r4, #0
    5bc6:	d048      	beq.n	5c5a <__aeabi_dsub+0x406>
    5bc8:	4cca      	ldr	r4, [pc, #808]	; (5ef4 <__aeabi_dsub+0x6a0>)
    5bca:	42a2      	cmp	r2, r4
    5bcc:	d100      	bne.n	5bd0 <__aeabi_dsub+0x37c>
    5bce:	e0a2      	b.n	5d16 <__aeabi_dsub+0x4c2>
    5bd0:	4274      	negs	r4, r6
    5bd2:	46a1      	mov	r9, r4
    5bd4:	2480      	movs	r4, #128	; 0x80
    5bd6:	0424      	lsls	r4, r4, #16
    5bd8:	4327      	orrs	r7, r4
    5bda:	464c      	mov	r4, r9
    5bdc:	2c38      	cmp	r4, #56	; 0x38
    5bde:	dd00      	ble.n	5be2 <__aeabi_dsub+0x38e>
    5be0:	e0db      	b.n	5d9a <__aeabi_dsub+0x546>
    5be2:	2c1f      	cmp	r4, #31
    5be4:	dd00      	ble.n	5be8 <__aeabi_dsub+0x394>
    5be6:	e144      	b.n	5e72 <__aeabi_dsub+0x61e>
    5be8:	464e      	mov	r6, r9
    5bea:	2420      	movs	r4, #32
    5bec:	1ba4      	subs	r4, r4, r6
    5bee:	003e      	movs	r6, r7
    5bf0:	40a6      	lsls	r6, r4
    5bf2:	46a2      	mov	sl, r4
    5bf4:	46b0      	mov	r8, r6
    5bf6:	464c      	mov	r4, r9
    5bf8:	002e      	movs	r6, r5
    5bfa:	40e6      	lsrs	r6, r4
    5bfc:	46b4      	mov	ip, r6
    5bfe:	4646      	mov	r6, r8
    5c00:	4664      	mov	r4, ip
    5c02:	4326      	orrs	r6, r4
    5c04:	4654      	mov	r4, sl
    5c06:	40a5      	lsls	r5, r4
    5c08:	1e6c      	subs	r4, r5, #1
    5c0a:	41a5      	sbcs	r5, r4
    5c0c:	0034      	movs	r4, r6
    5c0e:	432c      	orrs	r4, r5
    5c10:	464d      	mov	r5, r9
    5c12:	40ef      	lsrs	r7, r5
    5c14:	1b0d      	subs	r5, r1, r4
    5c16:	e028      	b.n	5c6a <__aeabi_dsub+0x416>
    5c18:	464a      	mov	r2, r9
    5c1a:	4643      	mov	r3, r8
    5c1c:	464d      	mov	r5, r9
    5c1e:	431a      	orrs	r2, r3
    5c20:	d000      	beq.n	5c24 <__aeabi_dsub+0x3d0>
    5c22:	e6a5      	b.n	5970 <__aeabi_dsub+0x11c>
    5c24:	2300      	movs	r3, #0
    5c26:	2400      	movs	r4, #0
    5c28:	2500      	movs	r5, #0
    5c2a:	e6de      	b.n	59ea <__aeabi_dsub+0x196>
    5c2c:	2a1f      	cmp	r2, #31
    5c2e:	dc5a      	bgt.n	5ce6 <__aeabi_dsub+0x492>
    5c30:	4666      	mov	r6, ip
    5c32:	2220      	movs	r2, #32
    5c34:	1b92      	subs	r2, r2, r6
    5c36:	0006      	movs	r6, r0
    5c38:	4096      	lsls	r6, r2
    5c3a:	4691      	mov	r9, r2
    5c3c:	46b0      	mov	r8, r6
    5c3e:	4662      	mov	r2, ip
    5c40:	000e      	movs	r6, r1
    5c42:	40d6      	lsrs	r6, r2
    5c44:	4642      	mov	r2, r8
    5c46:	4316      	orrs	r6, r2
    5c48:	464a      	mov	r2, r9
    5c4a:	4091      	lsls	r1, r2
    5c4c:	1e4a      	subs	r2, r1, #1
    5c4e:	4191      	sbcs	r1, r2
    5c50:	0002      	movs	r2, r0
    5c52:	4660      	mov	r0, ip
    5c54:	4331      	orrs	r1, r6
    5c56:	40c2      	lsrs	r2, r0
    5c58:	e6e4      	b.n	5a24 <__aeabi_dsub+0x1d0>
    5c5a:	003c      	movs	r4, r7
    5c5c:	432c      	orrs	r4, r5
    5c5e:	d05a      	beq.n	5d16 <__aeabi_dsub+0x4c2>
    5c60:	43f4      	mvns	r4, r6
    5c62:	46a1      	mov	r9, r4
    5c64:	2c00      	cmp	r4, #0
    5c66:	d152      	bne.n	5d0e <__aeabi_dsub+0x4ba>
    5c68:	1b4d      	subs	r5, r1, r5
    5c6a:	42a9      	cmp	r1, r5
    5c6c:	4189      	sbcs	r1, r1
    5c6e:	1bc7      	subs	r7, r0, r7
    5c70:	4249      	negs	r1, r1
    5c72:	1a7f      	subs	r7, r7, r1
    5c74:	0014      	movs	r4, r2
    5c76:	469a      	mov	sl, r3
    5c78:	e675      	b.n	5966 <__aeabi_dsub+0x112>
    5c7a:	4a9e      	ldr	r2, [pc, #632]	; (5ef4 <__aeabi_dsub+0x6a0>)
    5c7c:	4294      	cmp	r4, r2
    5c7e:	d000      	beq.n	5c82 <__aeabi_dsub+0x42e>
    5c80:	e6c7      	b.n	5a12 <__aeabi_dsub+0x1be>
    5c82:	e613      	b.n	58ac <__aeabi_dsub+0x58>
    5c84:	2200      	movs	r2, #0
    5c86:	e77f      	b.n	5b88 <__aeabi_dsub+0x334>
    5c88:	2000      	movs	r0, #0
    5c8a:	e78f      	b.n	5bac <__aeabi_dsub+0x358>
    5c8c:	2c00      	cmp	r4, #0
    5c8e:	d000      	beq.n	5c92 <__aeabi_dsub+0x43e>
    5c90:	e0c8      	b.n	5e24 <__aeabi_dsub+0x5d0>
    5c92:	003b      	movs	r3, r7
    5c94:	432b      	orrs	r3, r5
    5c96:	d100      	bne.n	5c9a <__aeabi_dsub+0x446>
    5c98:	e10f      	b.n	5eba <__aeabi_dsub+0x666>
    5c9a:	0003      	movs	r3, r0
    5c9c:	430b      	orrs	r3, r1
    5c9e:	d100      	bne.n	5ca2 <__aeabi_dsub+0x44e>
    5ca0:	e604      	b.n	58ac <__aeabi_dsub+0x58>
    5ca2:	1869      	adds	r1, r5, r1
    5ca4:	42a9      	cmp	r1, r5
    5ca6:	419b      	sbcs	r3, r3
    5ca8:	183f      	adds	r7, r7, r0
    5caa:	425b      	negs	r3, r3
    5cac:	19df      	adds	r7, r3, r7
    5cae:	023b      	lsls	r3, r7, #8
    5cb0:	d400      	bmi.n	5cb4 <__aeabi_dsub+0x460>
    5cb2:	e11a      	b.n	5eea <__aeabi_dsub+0x696>
    5cb4:	4b90      	ldr	r3, [pc, #576]	; (5ef8 <__aeabi_dsub+0x6a4>)
    5cb6:	000d      	movs	r5, r1
    5cb8:	401f      	ands	r7, r3
    5cba:	4664      	mov	r4, ip
    5cbc:	e5f6      	b.n	58ac <__aeabi_dsub+0x58>
    5cbe:	469a      	mov	sl, r3
    5cc0:	e689      	b.n	59d6 <__aeabi_dsub+0x182>
    5cc2:	003a      	movs	r2, r7
    5cc4:	432a      	orrs	r2, r5
    5cc6:	2c00      	cmp	r4, #0
    5cc8:	d15c      	bne.n	5d84 <__aeabi_dsub+0x530>
    5cca:	2a00      	cmp	r2, #0
    5ccc:	d175      	bne.n	5dba <__aeabi_dsub+0x566>
    5cce:	0002      	movs	r2, r0
    5cd0:	430a      	orrs	r2, r1
    5cd2:	d100      	bne.n	5cd6 <__aeabi_dsub+0x482>
    5cd4:	e0ca      	b.n	5e6c <__aeabi_dsub+0x618>
    5cd6:	0007      	movs	r7, r0
    5cd8:	000d      	movs	r5, r1
    5cda:	469a      	mov	sl, r3
    5cdc:	e5e6      	b.n	58ac <__aeabi_dsub+0x58>
    5cde:	4664      	mov	r4, ip
    5ce0:	2200      	movs	r2, #0
    5ce2:	2500      	movs	r5, #0
    5ce4:	e681      	b.n	59ea <__aeabi_dsub+0x196>
    5ce6:	4662      	mov	r2, ip
    5ce8:	0006      	movs	r6, r0
    5cea:	3a20      	subs	r2, #32
    5cec:	40d6      	lsrs	r6, r2
    5cee:	4662      	mov	r2, ip
    5cf0:	46b0      	mov	r8, r6
    5cf2:	2a20      	cmp	r2, #32
    5cf4:	d100      	bne.n	5cf8 <__aeabi_dsub+0x4a4>
    5cf6:	e0b7      	b.n	5e68 <__aeabi_dsub+0x614>
    5cf8:	2240      	movs	r2, #64	; 0x40
    5cfa:	4666      	mov	r6, ip
    5cfc:	1b92      	subs	r2, r2, r6
    5cfe:	4090      	lsls	r0, r2
    5d00:	4301      	orrs	r1, r0
    5d02:	4642      	mov	r2, r8
    5d04:	1e48      	subs	r0, r1, #1
    5d06:	4181      	sbcs	r1, r0
    5d08:	4311      	orrs	r1, r2
    5d0a:	2200      	movs	r2, #0
    5d0c:	e68a      	b.n	5a24 <__aeabi_dsub+0x1d0>
    5d0e:	4c79      	ldr	r4, [pc, #484]	; (5ef4 <__aeabi_dsub+0x6a0>)
    5d10:	42a2      	cmp	r2, r4
    5d12:	d000      	beq.n	5d16 <__aeabi_dsub+0x4c2>
    5d14:	e761      	b.n	5bda <__aeabi_dsub+0x386>
    5d16:	0007      	movs	r7, r0
    5d18:	000d      	movs	r5, r1
    5d1a:	0014      	movs	r4, r2
    5d1c:	469a      	mov	sl, r3
    5d1e:	e5c5      	b.n	58ac <__aeabi_dsub+0x58>
    5d20:	2c00      	cmp	r4, #0
    5d22:	d141      	bne.n	5da8 <__aeabi_dsub+0x554>
    5d24:	003c      	movs	r4, r7
    5d26:	432c      	orrs	r4, r5
    5d28:	d078      	beq.n	5e1c <__aeabi_dsub+0x5c8>
    5d2a:	43f4      	mvns	r4, r6
    5d2c:	46a1      	mov	r9, r4
    5d2e:	2c00      	cmp	r4, #0
    5d30:	d020      	beq.n	5d74 <__aeabi_dsub+0x520>
    5d32:	4c70      	ldr	r4, [pc, #448]	; (5ef4 <__aeabi_dsub+0x6a0>)
    5d34:	42a2      	cmp	r2, r4
    5d36:	d071      	beq.n	5e1c <__aeabi_dsub+0x5c8>
    5d38:	464c      	mov	r4, r9
    5d3a:	2c38      	cmp	r4, #56	; 0x38
    5d3c:	dd00      	ble.n	5d40 <__aeabi_dsub+0x4ec>
    5d3e:	e0b2      	b.n	5ea6 <__aeabi_dsub+0x652>
    5d40:	2c1f      	cmp	r4, #31
    5d42:	dd00      	ble.n	5d46 <__aeabi_dsub+0x4f2>
    5d44:	e0bc      	b.n	5ec0 <__aeabi_dsub+0x66c>
    5d46:	2620      	movs	r6, #32
    5d48:	1b34      	subs	r4, r6, r4
    5d4a:	46a2      	mov	sl, r4
    5d4c:	003c      	movs	r4, r7
    5d4e:	4656      	mov	r6, sl
    5d50:	40b4      	lsls	r4, r6
    5d52:	464e      	mov	r6, r9
    5d54:	46a0      	mov	r8, r4
    5d56:	002c      	movs	r4, r5
    5d58:	40f4      	lsrs	r4, r6
    5d5a:	46a4      	mov	ip, r4
    5d5c:	4644      	mov	r4, r8
    5d5e:	4666      	mov	r6, ip
    5d60:	4334      	orrs	r4, r6
    5d62:	46a4      	mov	ip, r4
    5d64:	4654      	mov	r4, sl
    5d66:	40a5      	lsls	r5, r4
    5d68:	4664      	mov	r4, ip
    5d6a:	1e6e      	subs	r6, r5, #1
    5d6c:	41b5      	sbcs	r5, r6
    5d6e:	4325      	orrs	r5, r4
    5d70:	464c      	mov	r4, r9
    5d72:	40e7      	lsrs	r7, r4
    5d74:	186d      	adds	r5, r5, r1
    5d76:	428d      	cmp	r5, r1
    5d78:	4189      	sbcs	r1, r1
    5d7a:	183f      	adds	r7, r7, r0
    5d7c:	4249      	negs	r1, r1
    5d7e:	19cf      	adds	r7, r1, r7
    5d80:	0014      	movs	r4, r2
    5d82:	e656      	b.n	5a32 <__aeabi_dsub+0x1de>
    5d84:	2a00      	cmp	r2, #0
    5d86:	d12f      	bne.n	5de8 <__aeabi_dsub+0x594>
    5d88:	0002      	movs	r2, r0
    5d8a:	430a      	orrs	r2, r1
    5d8c:	d100      	bne.n	5d90 <__aeabi_dsub+0x53c>
    5d8e:	e084      	b.n	5e9a <__aeabi_dsub+0x646>
    5d90:	0007      	movs	r7, r0
    5d92:	000d      	movs	r5, r1
    5d94:	469a      	mov	sl, r3
    5d96:	4c57      	ldr	r4, [pc, #348]	; (5ef4 <__aeabi_dsub+0x6a0>)
    5d98:	e588      	b.n	58ac <__aeabi_dsub+0x58>
    5d9a:	433d      	orrs	r5, r7
    5d9c:	1e6f      	subs	r7, r5, #1
    5d9e:	41bd      	sbcs	r5, r7
    5da0:	b2ec      	uxtb	r4, r5
    5da2:	2700      	movs	r7, #0
    5da4:	1b0d      	subs	r5, r1, r4
    5da6:	e760      	b.n	5c6a <__aeabi_dsub+0x416>
    5da8:	4c52      	ldr	r4, [pc, #328]	; (5ef4 <__aeabi_dsub+0x6a0>)
    5daa:	42a2      	cmp	r2, r4
    5dac:	d036      	beq.n	5e1c <__aeabi_dsub+0x5c8>
    5dae:	4274      	negs	r4, r6
    5db0:	2680      	movs	r6, #128	; 0x80
    5db2:	0436      	lsls	r6, r6, #16
    5db4:	46a1      	mov	r9, r4
    5db6:	4337      	orrs	r7, r6
    5db8:	e7be      	b.n	5d38 <__aeabi_dsub+0x4e4>
    5dba:	0002      	movs	r2, r0
    5dbc:	430a      	orrs	r2, r1
    5dbe:	d100      	bne.n	5dc2 <__aeabi_dsub+0x56e>
    5dc0:	e574      	b.n	58ac <__aeabi_dsub+0x58>
    5dc2:	1a6a      	subs	r2, r5, r1
    5dc4:	4690      	mov	r8, r2
    5dc6:	4545      	cmp	r5, r8
    5dc8:	41b6      	sbcs	r6, r6
    5dca:	1a3a      	subs	r2, r7, r0
    5dcc:	4276      	negs	r6, r6
    5dce:	1b92      	subs	r2, r2, r6
    5dd0:	4694      	mov	ip, r2
    5dd2:	0212      	lsls	r2, r2, #8
    5dd4:	d400      	bmi.n	5dd8 <__aeabi_dsub+0x584>
    5dd6:	e5f7      	b.n	59c8 <__aeabi_dsub+0x174>
    5dd8:	1b4d      	subs	r5, r1, r5
    5dda:	42a9      	cmp	r1, r5
    5ddc:	4189      	sbcs	r1, r1
    5dde:	1bc7      	subs	r7, r0, r7
    5de0:	4249      	negs	r1, r1
    5de2:	1a7f      	subs	r7, r7, r1
    5de4:	469a      	mov	sl, r3
    5de6:	e561      	b.n	58ac <__aeabi_dsub+0x58>
    5de8:	0002      	movs	r2, r0
    5dea:	430a      	orrs	r2, r1
    5dec:	d03a      	beq.n	5e64 <__aeabi_dsub+0x610>
    5dee:	08ed      	lsrs	r5, r5, #3
    5df0:	077c      	lsls	r4, r7, #29
    5df2:	432c      	orrs	r4, r5
    5df4:	2580      	movs	r5, #128	; 0x80
    5df6:	08fa      	lsrs	r2, r7, #3
    5df8:	032d      	lsls	r5, r5, #12
    5dfa:	422a      	tst	r2, r5
    5dfc:	d008      	beq.n	5e10 <__aeabi_dsub+0x5bc>
    5dfe:	08c7      	lsrs	r7, r0, #3
    5e00:	422f      	tst	r7, r5
    5e02:	d105      	bne.n	5e10 <__aeabi_dsub+0x5bc>
    5e04:	0745      	lsls	r5, r0, #29
    5e06:	002c      	movs	r4, r5
    5e08:	003a      	movs	r2, r7
    5e0a:	469a      	mov	sl, r3
    5e0c:	08c9      	lsrs	r1, r1, #3
    5e0e:	430c      	orrs	r4, r1
    5e10:	0f67      	lsrs	r7, r4, #29
    5e12:	00d2      	lsls	r2, r2, #3
    5e14:	00e5      	lsls	r5, r4, #3
    5e16:	4317      	orrs	r7, r2
    5e18:	4c36      	ldr	r4, [pc, #216]	; (5ef4 <__aeabi_dsub+0x6a0>)
    5e1a:	e547      	b.n	58ac <__aeabi_dsub+0x58>
    5e1c:	0007      	movs	r7, r0
    5e1e:	000d      	movs	r5, r1
    5e20:	0014      	movs	r4, r2
    5e22:	e543      	b.n	58ac <__aeabi_dsub+0x58>
    5e24:	003a      	movs	r2, r7
    5e26:	432a      	orrs	r2, r5
    5e28:	d043      	beq.n	5eb2 <__aeabi_dsub+0x65e>
    5e2a:	0002      	movs	r2, r0
    5e2c:	430a      	orrs	r2, r1
    5e2e:	d019      	beq.n	5e64 <__aeabi_dsub+0x610>
    5e30:	08ed      	lsrs	r5, r5, #3
    5e32:	077c      	lsls	r4, r7, #29
    5e34:	432c      	orrs	r4, r5
    5e36:	2580      	movs	r5, #128	; 0x80
    5e38:	08fa      	lsrs	r2, r7, #3
    5e3a:	032d      	lsls	r5, r5, #12
    5e3c:	422a      	tst	r2, r5
    5e3e:	d007      	beq.n	5e50 <__aeabi_dsub+0x5fc>
    5e40:	08c6      	lsrs	r6, r0, #3
    5e42:	422e      	tst	r6, r5
    5e44:	d104      	bne.n	5e50 <__aeabi_dsub+0x5fc>
    5e46:	0747      	lsls	r7, r0, #29
    5e48:	003c      	movs	r4, r7
    5e4a:	0032      	movs	r2, r6
    5e4c:	08c9      	lsrs	r1, r1, #3
    5e4e:	430c      	orrs	r4, r1
    5e50:	00d7      	lsls	r7, r2, #3
    5e52:	0f62      	lsrs	r2, r4, #29
    5e54:	00e5      	lsls	r5, r4, #3
    5e56:	4317      	orrs	r7, r2
    5e58:	469a      	mov	sl, r3
    5e5a:	4c26      	ldr	r4, [pc, #152]	; (5ef4 <__aeabi_dsub+0x6a0>)
    5e5c:	e526      	b.n	58ac <__aeabi_dsub+0x58>
    5e5e:	2200      	movs	r2, #0
    5e60:	2500      	movs	r5, #0
    5e62:	e544      	b.n	58ee <__aeabi_dsub+0x9a>
    5e64:	4c23      	ldr	r4, [pc, #140]	; (5ef4 <__aeabi_dsub+0x6a0>)
    5e66:	e521      	b.n	58ac <__aeabi_dsub+0x58>
    5e68:	2000      	movs	r0, #0
    5e6a:	e749      	b.n	5d00 <__aeabi_dsub+0x4ac>
    5e6c:	2300      	movs	r3, #0
    5e6e:	2500      	movs	r5, #0
    5e70:	e5bb      	b.n	59ea <__aeabi_dsub+0x196>
    5e72:	464c      	mov	r4, r9
    5e74:	003e      	movs	r6, r7
    5e76:	3c20      	subs	r4, #32
    5e78:	40e6      	lsrs	r6, r4
    5e7a:	464c      	mov	r4, r9
    5e7c:	46b4      	mov	ip, r6
    5e7e:	2c20      	cmp	r4, #32
    5e80:	d031      	beq.n	5ee6 <__aeabi_dsub+0x692>
    5e82:	2440      	movs	r4, #64	; 0x40
    5e84:	464e      	mov	r6, r9
    5e86:	1ba6      	subs	r6, r4, r6
    5e88:	40b7      	lsls	r7, r6
    5e8a:	433d      	orrs	r5, r7
    5e8c:	1e6c      	subs	r4, r5, #1
    5e8e:	41a5      	sbcs	r5, r4
    5e90:	4664      	mov	r4, ip
    5e92:	432c      	orrs	r4, r5
    5e94:	2700      	movs	r7, #0
    5e96:	1b0d      	subs	r5, r1, r4
    5e98:	e6e7      	b.n	5c6a <__aeabi_dsub+0x416>
    5e9a:	2280      	movs	r2, #128	; 0x80
    5e9c:	2300      	movs	r3, #0
    5e9e:	0312      	lsls	r2, r2, #12
    5ea0:	4c14      	ldr	r4, [pc, #80]	; (5ef4 <__aeabi_dsub+0x6a0>)
    5ea2:	2500      	movs	r5, #0
    5ea4:	e5a1      	b.n	59ea <__aeabi_dsub+0x196>
    5ea6:	433d      	orrs	r5, r7
    5ea8:	1e6f      	subs	r7, r5, #1
    5eaa:	41bd      	sbcs	r5, r7
    5eac:	2700      	movs	r7, #0
    5eae:	b2ed      	uxtb	r5, r5
    5eb0:	e760      	b.n	5d74 <__aeabi_dsub+0x520>
    5eb2:	0007      	movs	r7, r0
    5eb4:	000d      	movs	r5, r1
    5eb6:	4c0f      	ldr	r4, [pc, #60]	; (5ef4 <__aeabi_dsub+0x6a0>)
    5eb8:	e4f8      	b.n	58ac <__aeabi_dsub+0x58>
    5eba:	0007      	movs	r7, r0
    5ebc:	000d      	movs	r5, r1
    5ebe:	e4f5      	b.n	58ac <__aeabi_dsub+0x58>
    5ec0:	464e      	mov	r6, r9
    5ec2:	003c      	movs	r4, r7
    5ec4:	3e20      	subs	r6, #32
    5ec6:	40f4      	lsrs	r4, r6
    5ec8:	46a0      	mov	r8, r4
    5eca:	464c      	mov	r4, r9
    5ecc:	2c20      	cmp	r4, #32
    5ece:	d00e      	beq.n	5eee <__aeabi_dsub+0x69a>
    5ed0:	2440      	movs	r4, #64	; 0x40
    5ed2:	464e      	mov	r6, r9
    5ed4:	1ba4      	subs	r4, r4, r6
    5ed6:	40a7      	lsls	r7, r4
    5ed8:	433d      	orrs	r5, r7
    5eda:	1e6f      	subs	r7, r5, #1
    5edc:	41bd      	sbcs	r5, r7
    5ede:	4644      	mov	r4, r8
    5ee0:	2700      	movs	r7, #0
    5ee2:	4325      	orrs	r5, r4
    5ee4:	e746      	b.n	5d74 <__aeabi_dsub+0x520>
    5ee6:	2700      	movs	r7, #0
    5ee8:	e7cf      	b.n	5e8a <__aeabi_dsub+0x636>
    5eea:	000d      	movs	r5, r1
    5eec:	e573      	b.n	59d6 <__aeabi_dsub+0x182>
    5eee:	2700      	movs	r7, #0
    5ef0:	e7f2      	b.n	5ed8 <__aeabi_dsub+0x684>
    5ef2:	46c0      	nop			; (mov r8, r8)
    5ef4:	000007ff 	.word	0x000007ff
    5ef8:	ff7fffff 	.word	0xff7fffff

00005efc <__aeabi_dcmpun>:
    5efc:	b570      	push	{r4, r5, r6, lr}
    5efe:	4e0e      	ldr	r6, [pc, #56]	; (5f38 <__aeabi_dcmpun+0x3c>)
    5f00:	030c      	lsls	r4, r1, #12
    5f02:	031d      	lsls	r5, r3, #12
    5f04:	0049      	lsls	r1, r1, #1
    5f06:	005b      	lsls	r3, r3, #1
    5f08:	0b24      	lsrs	r4, r4, #12
    5f0a:	0d49      	lsrs	r1, r1, #21
    5f0c:	0b2d      	lsrs	r5, r5, #12
    5f0e:	0d5b      	lsrs	r3, r3, #21
    5f10:	42b1      	cmp	r1, r6
    5f12:	d004      	beq.n	5f1e <__aeabi_dcmpun+0x22>
    5f14:	4908      	ldr	r1, [pc, #32]	; (5f38 <__aeabi_dcmpun+0x3c>)
    5f16:	2000      	movs	r0, #0
    5f18:	428b      	cmp	r3, r1
    5f1a:	d008      	beq.n	5f2e <__aeabi_dcmpun+0x32>
    5f1c:	bd70      	pop	{r4, r5, r6, pc}
    5f1e:	4304      	orrs	r4, r0
    5f20:	2001      	movs	r0, #1
    5f22:	2c00      	cmp	r4, #0
    5f24:	d1fa      	bne.n	5f1c <__aeabi_dcmpun+0x20>
    5f26:	4904      	ldr	r1, [pc, #16]	; (5f38 <__aeabi_dcmpun+0x3c>)
    5f28:	2000      	movs	r0, #0
    5f2a:	428b      	cmp	r3, r1
    5f2c:	d1f6      	bne.n	5f1c <__aeabi_dcmpun+0x20>
    5f2e:	4315      	orrs	r5, r2
    5f30:	0028      	movs	r0, r5
    5f32:	1e45      	subs	r5, r0, #1
    5f34:	41a8      	sbcs	r0, r5
    5f36:	e7f1      	b.n	5f1c <__aeabi_dcmpun+0x20>
    5f38:	000007ff 	.word	0x000007ff

00005f3c <__aeabi_d2iz>:
    5f3c:	030b      	lsls	r3, r1, #12
    5f3e:	b530      	push	{r4, r5, lr}
    5f40:	4d13      	ldr	r5, [pc, #76]	; (5f90 <__aeabi_d2iz+0x54>)
    5f42:	0b1a      	lsrs	r2, r3, #12
    5f44:	004b      	lsls	r3, r1, #1
    5f46:	0d5b      	lsrs	r3, r3, #21
    5f48:	0fc9      	lsrs	r1, r1, #31
    5f4a:	2400      	movs	r4, #0
    5f4c:	42ab      	cmp	r3, r5
    5f4e:	dd11      	ble.n	5f74 <__aeabi_d2iz+0x38>
    5f50:	4c10      	ldr	r4, [pc, #64]	; (5f94 <__aeabi_d2iz+0x58>)
    5f52:	42a3      	cmp	r3, r4
    5f54:	dc10      	bgt.n	5f78 <__aeabi_d2iz+0x3c>
    5f56:	2480      	movs	r4, #128	; 0x80
    5f58:	0364      	lsls	r4, r4, #13
    5f5a:	4322      	orrs	r2, r4
    5f5c:	4c0e      	ldr	r4, [pc, #56]	; (5f98 <__aeabi_d2iz+0x5c>)
    5f5e:	1ae4      	subs	r4, r4, r3
    5f60:	2c1f      	cmp	r4, #31
    5f62:	dd0c      	ble.n	5f7e <__aeabi_d2iz+0x42>
    5f64:	480d      	ldr	r0, [pc, #52]	; (5f9c <__aeabi_d2iz+0x60>)
    5f66:	1ac3      	subs	r3, r0, r3
    5f68:	40da      	lsrs	r2, r3
    5f6a:	0013      	movs	r3, r2
    5f6c:	425c      	negs	r4, r3
    5f6e:	2900      	cmp	r1, #0
    5f70:	d100      	bne.n	5f74 <__aeabi_d2iz+0x38>
    5f72:	001c      	movs	r4, r3
    5f74:	0020      	movs	r0, r4
    5f76:	bd30      	pop	{r4, r5, pc}
    5f78:	4b09      	ldr	r3, [pc, #36]	; (5fa0 <__aeabi_d2iz+0x64>)
    5f7a:	18cc      	adds	r4, r1, r3
    5f7c:	e7fa      	b.n	5f74 <__aeabi_d2iz+0x38>
    5f7e:	40e0      	lsrs	r0, r4
    5f80:	4c08      	ldr	r4, [pc, #32]	; (5fa4 <__aeabi_d2iz+0x68>)
    5f82:	46a4      	mov	ip, r4
    5f84:	4463      	add	r3, ip
    5f86:	409a      	lsls	r2, r3
    5f88:	0013      	movs	r3, r2
    5f8a:	4303      	orrs	r3, r0
    5f8c:	e7ee      	b.n	5f6c <__aeabi_d2iz+0x30>
    5f8e:	46c0      	nop			; (mov r8, r8)
    5f90:	000003fe 	.word	0x000003fe
    5f94:	0000041d 	.word	0x0000041d
    5f98:	00000433 	.word	0x00000433
    5f9c:	00000413 	.word	0x00000413
    5fa0:	7fffffff 	.word	0x7fffffff
    5fa4:	fffffbed 	.word	0xfffffbed

00005fa8 <__aeabi_i2d>:
    5fa8:	b570      	push	{r4, r5, r6, lr}
    5faa:	2800      	cmp	r0, #0
    5fac:	d030      	beq.n	6010 <__aeabi_i2d+0x68>
    5fae:	17c3      	asrs	r3, r0, #31
    5fb0:	18c4      	adds	r4, r0, r3
    5fb2:	405c      	eors	r4, r3
    5fb4:	0fc5      	lsrs	r5, r0, #31
    5fb6:	0020      	movs	r0, r4
    5fb8:	f000 f9dc 	bl	6374 <__clzsi2>
    5fbc:	4b17      	ldr	r3, [pc, #92]	; (601c <__aeabi_i2d+0x74>)
    5fbe:	4a18      	ldr	r2, [pc, #96]	; (6020 <__aeabi_i2d+0x78>)
    5fc0:	1a1b      	subs	r3, r3, r0
    5fc2:	1ad2      	subs	r2, r2, r3
    5fc4:	2a1f      	cmp	r2, #31
    5fc6:	dd18      	ble.n	5ffa <__aeabi_i2d+0x52>
    5fc8:	4a16      	ldr	r2, [pc, #88]	; (6024 <__aeabi_i2d+0x7c>)
    5fca:	1ad2      	subs	r2, r2, r3
    5fcc:	4094      	lsls	r4, r2
    5fce:	2200      	movs	r2, #0
    5fd0:	0324      	lsls	r4, r4, #12
    5fd2:	055b      	lsls	r3, r3, #21
    5fd4:	0b24      	lsrs	r4, r4, #12
    5fd6:	0d5b      	lsrs	r3, r3, #21
    5fd8:	2100      	movs	r1, #0
    5fda:	0010      	movs	r0, r2
    5fdc:	0324      	lsls	r4, r4, #12
    5fde:	0d0a      	lsrs	r2, r1, #20
    5fe0:	0512      	lsls	r2, r2, #20
    5fe2:	0b24      	lsrs	r4, r4, #12
    5fe4:	4314      	orrs	r4, r2
    5fe6:	4a10      	ldr	r2, [pc, #64]	; (6028 <__aeabi_i2d+0x80>)
    5fe8:	051b      	lsls	r3, r3, #20
    5fea:	4014      	ands	r4, r2
    5fec:	431c      	orrs	r4, r3
    5fee:	0064      	lsls	r4, r4, #1
    5ff0:	07ed      	lsls	r5, r5, #31
    5ff2:	0864      	lsrs	r4, r4, #1
    5ff4:	432c      	orrs	r4, r5
    5ff6:	0021      	movs	r1, r4
    5ff8:	bd70      	pop	{r4, r5, r6, pc}
    5ffa:	0021      	movs	r1, r4
    5ffc:	4091      	lsls	r1, r2
    5ffe:	000a      	movs	r2, r1
    6000:	210b      	movs	r1, #11
    6002:	1a08      	subs	r0, r1, r0
    6004:	40c4      	lsrs	r4, r0
    6006:	055b      	lsls	r3, r3, #21
    6008:	0324      	lsls	r4, r4, #12
    600a:	0b24      	lsrs	r4, r4, #12
    600c:	0d5b      	lsrs	r3, r3, #21
    600e:	e7e3      	b.n	5fd8 <__aeabi_i2d+0x30>
    6010:	2500      	movs	r5, #0
    6012:	2300      	movs	r3, #0
    6014:	2400      	movs	r4, #0
    6016:	2200      	movs	r2, #0
    6018:	e7de      	b.n	5fd8 <__aeabi_i2d+0x30>
    601a:	46c0      	nop			; (mov r8, r8)
    601c:	0000041e 	.word	0x0000041e
    6020:	00000433 	.word	0x00000433
    6024:	00000413 	.word	0x00000413
    6028:	800fffff 	.word	0x800fffff

0000602c <__aeabi_ui2d>:
    602c:	b570      	push	{r4, r5, r6, lr}
    602e:	1e05      	subs	r5, r0, #0
    6030:	d028      	beq.n	6084 <__aeabi_ui2d+0x58>
    6032:	f000 f99f 	bl	6374 <__clzsi2>
    6036:	4b15      	ldr	r3, [pc, #84]	; (608c <__aeabi_ui2d+0x60>)
    6038:	4a15      	ldr	r2, [pc, #84]	; (6090 <__aeabi_ui2d+0x64>)
    603a:	1a1b      	subs	r3, r3, r0
    603c:	1ad2      	subs	r2, r2, r3
    603e:	2a1f      	cmp	r2, #31
    6040:	dd16      	ble.n	6070 <__aeabi_ui2d+0x44>
    6042:	002c      	movs	r4, r5
    6044:	4a13      	ldr	r2, [pc, #76]	; (6094 <__aeabi_ui2d+0x68>)
    6046:	2500      	movs	r5, #0
    6048:	1ad2      	subs	r2, r2, r3
    604a:	4094      	lsls	r4, r2
    604c:	055a      	lsls	r2, r3, #21
    604e:	0324      	lsls	r4, r4, #12
    6050:	0b24      	lsrs	r4, r4, #12
    6052:	0d52      	lsrs	r2, r2, #21
    6054:	2100      	movs	r1, #0
    6056:	0324      	lsls	r4, r4, #12
    6058:	0d0b      	lsrs	r3, r1, #20
    605a:	0b24      	lsrs	r4, r4, #12
    605c:	051b      	lsls	r3, r3, #20
    605e:	4323      	orrs	r3, r4
    6060:	4c0d      	ldr	r4, [pc, #52]	; (6098 <__aeabi_ui2d+0x6c>)
    6062:	0512      	lsls	r2, r2, #20
    6064:	4023      	ands	r3, r4
    6066:	4313      	orrs	r3, r2
    6068:	005b      	lsls	r3, r3, #1
    606a:	0028      	movs	r0, r5
    606c:	0859      	lsrs	r1, r3, #1
    606e:	bd70      	pop	{r4, r5, r6, pc}
    6070:	210b      	movs	r1, #11
    6072:	002c      	movs	r4, r5
    6074:	1a08      	subs	r0, r1, r0
    6076:	40c4      	lsrs	r4, r0
    6078:	4095      	lsls	r5, r2
    607a:	0324      	lsls	r4, r4, #12
    607c:	055a      	lsls	r2, r3, #21
    607e:	0b24      	lsrs	r4, r4, #12
    6080:	0d52      	lsrs	r2, r2, #21
    6082:	e7e7      	b.n	6054 <__aeabi_ui2d+0x28>
    6084:	2200      	movs	r2, #0
    6086:	2400      	movs	r4, #0
    6088:	e7e4      	b.n	6054 <__aeabi_ui2d+0x28>
    608a:	46c0      	nop			; (mov r8, r8)
    608c:	0000041e 	.word	0x0000041e
    6090:	00000433 	.word	0x00000433
    6094:	00000413 	.word	0x00000413
    6098:	800fffff 	.word	0x800fffff

0000609c <__aeabi_f2d>:
    609c:	0042      	lsls	r2, r0, #1
    609e:	0e12      	lsrs	r2, r2, #24
    60a0:	1c51      	adds	r1, r2, #1
    60a2:	0243      	lsls	r3, r0, #9
    60a4:	b2c9      	uxtb	r1, r1
    60a6:	b570      	push	{r4, r5, r6, lr}
    60a8:	0a5d      	lsrs	r5, r3, #9
    60aa:	0fc4      	lsrs	r4, r0, #31
    60ac:	2901      	cmp	r1, #1
    60ae:	dd15      	ble.n	60dc <__aeabi_f2d+0x40>
    60b0:	21e0      	movs	r1, #224	; 0xe0
    60b2:	0089      	lsls	r1, r1, #2
    60b4:	468c      	mov	ip, r1
    60b6:	076d      	lsls	r5, r5, #29
    60b8:	0b1b      	lsrs	r3, r3, #12
    60ba:	4462      	add	r2, ip
    60bc:	2100      	movs	r1, #0
    60be:	0028      	movs	r0, r5
    60c0:	0d0d      	lsrs	r5, r1, #20
    60c2:	052d      	lsls	r5, r5, #20
    60c4:	432b      	orrs	r3, r5
    60c6:	4d1c      	ldr	r5, [pc, #112]	; (6138 <__aeabi_f2d+0x9c>)
    60c8:	0552      	lsls	r2, r2, #21
    60ca:	402b      	ands	r3, r5
    60cc:	0852      	lsrs	r2, r2, #1
    60ce:	4313      	orrs	r3, r2
    60d0:	005b      	lsls	r3, r3, #1
    60d2:	07e4      	lsls	r4, r4, #31
    60d4:	085b      	lsrs	r3, r3, #1
    60d6:	4323      	orrs	r3, r4
    60d8:	0019      	movs	r1, r3
    60da:	bd70      	pop	{r4, r5, r6, pc}
    60dc:	2a00      	cmp	r2, #0
    60de:	d115      	bne.n	610c <__aeabi_f2d+0x70>
    60e0:	2d00      	cmp	r5, #0
    60e2:	d01f      	beq.n	6124 <__aeabi_f2d+0x88>
    60e4:	0028      	movs	r0, r5
    60e6:	f000 f945 	bl	6374 <__clzsi2>
    60ea:	280a      	cmp	r0, #10
    60ec:	dc1d      	bgt.n	612a <__aeabi_f2d+0x8e>
    60ee:	230b      	movs	r3, #11
    60f0:	002a      	movs	r2, r5
    60f2:	1a1b      	subs	r3, r3, r0
    60f4:	40da      	lsrs	r2, r3
    60f6:	0013      	movs	r3, r2
    60f8:	0002      	movs	r2, r0
    60fa:	3215      	adds	r2, #21
    60fc:	4095      	lsls	r5, r2
    60fe:	4a0f      	ldr	r2, [pc, #60]	; (613c <__aeabi_f2d+0xa0>)
    6100:	031b      	lsls	r3, r3, #12
    6102:	1a12      	subs	r2, r2, r0
    6104:	0552      	lsls	r2, r2, #21
    6106:	0b1b      	lsrs	r3, r3, #12
    6108:	0d52      	lsrs	r2, r2, #21
    610a:	e7d7      	b.n	60bc <__aeabi_f2d+0x20>
    610c:	2d00      	cmp	r5, #0
    610e:	d006      	beq.n	611e <__aeabi_f2d+0x82>
    6110:	2280      	movs	r2, #128	; 0x80
    6112:	0b1b      	lsrs	r3, r3, #12
    6114:	0312      	lsls	r2, r2, #12
    6116:	4313      	orrs	r3, r2
    6118:	076d      	lsls	r5, r5, #29
    611a:	4a09      	ldr	r2, [pc, #36]	; (6140 <__aeabi_f2d+0xa4>)
    611c:	e7ce      	b.n	60bc <__aeabi_f2d+0x20>
    611e:	4a08      	ldr	r2, [pc, #32]	; (6140 <__aeabi_f2d+0xa4>)
    6120:	2300      	movs	r3, #0
    6122:	e7cb      	b.n	60bc <__aeabi_f2d+0x20>
    6124:	2200      	movs	r2, #0
    6126:	2300      	movs	r3, #0
    6128:	e7c8      	b.n	60bc <__aeabi_f2d+0x20>
    612a:	0003      	movs	r3, r0
    612c:	3b0b      	subs	r3, #11
    612e:	409d      	lsls	r5, r3
    6130:	002b      	movs	r3, r5
    6132:	2500      	movs	r5, #0
    6134:	e7e3      	b.n	60fe <__aeabi_f2d+0x62>
    6136:	46c0      	nop			; (mov r8, r8)
    6138:	800fffff 	.word	0x800fffff
    613c:	00000389 	.word	0x00000389
    6140:	000007ff 	.word	0x000007ff

00006144 <__aeabi_d2f>:
    6144:	004b      	lsls	r3, r1, #1
    6146:	b570      	push	{r4, r5, r6, lr}
    6148:	0d5e      	lsrs	r6, r3, #21
    614a:	030c      	lsls	r4, r1, #12
    614c:	1c75      	adds	r5, r6, #1
    614e:	0a64      	lsrs	r4, r4, #9
    6150:	0f42      	lsrs	r2, r0, #29
    6152:	056d      	lsls	r5, r5, #21
    6154:	4322      	orrs	r2, r4
    6156:	0fc9      	lsrs	r1, r1, #31
    6158:	00c4      	lsls	r4, r0, #3
    615a:	0d6d      	lsrs	r5, r5, #21
    615c:	2d01      	cmp	r5, #1
    615e:	dd2a      	ble.n	61b6 <__aeabi_d2f+0x72>
    6160:	4b3b      	ldr	r3, [pc, #236]	; (6250 <__aeabi_d2f+0x10c>)
    6162:	18f3      	adds	r3, r6, r3
    6164:	2bfe      	cmp	r3, #254	; 0xfe
    6166:	dc1a      	bgt.n	619e <__aeabi_d2f+0x5a>
    6168:	2b00      	cmp	r3, #0
    616a:	dd42      	ble.n	61f2 <__aeabi_d2f+0xae>
    616c:	0180      	lsls	r0, r0, #6
    616e:	1e45      	subs	r5, r0, #1
    6170:	41a8      	sbcs	r0, r5
    6172:	00d2      	lsls	r2, r2, #3
    6174:	4310      	orrs	r0, r2
    6176:	0f62      	lsrs	r2, r4, #29
    6178:	4302      	orrs	r2, r0
    617a:	0750      	lsls	r0, r2, #29
    617c:	d004      	beq.n	6188 <__aeabi_d2f+0x44>
    617e:	200f      	movs	r0, #15
    6180:	4010      	ands	r0, r2
    6182:	2804      	cmp	r0, #4
    6184:	d000      	beq.n	6188 <__aeabi_d2f+0x44>
    6186:	3204      	adds	r2, #4
    6188:	2080      	movs	r0, #128	; 0x80
    618a:	04c0      	lsls	r0, r0, #19
    618c:	4010      	ands	r0, r2
    618e:	d021      	beq.n	61d4 <__aeabi_d2f+0x90>
    6190:	3301      	adds	r3, #1
    6192:	2bff      	cmp	r3, #255	; 0xff
    6194:	d003      	beq.n	619e <__aeabi_d2f+0x5a>
    6196:	0192      	lsls	r2, r2, #6
    6198:	0a52      	lsrs	r2, r2, #9
    619a:	b2db      	uxtb	r3, r3
    619c:	e001      	b.n	61a2 <__aeabi_d2f+0x5e>
    619e:	23ff      	movs	r3, #255	; 0xff
    61a0:	2200      	movs	r2, #0
    61a2:	0252      	lsls	r2, r2, #9
    61a4:	0a52      	lsrs	r2, r2, #9
    61a6:	05db      	lsls	r3, r3, #23
    61a8:	4313      	orrs	r3, r2
    61aa:	005b      	lsls	r3, r3, #1
    61ac:	07c9      	lsls	r1, r1, #31
    61ae:	085b      	lsrs	r3, r3, #1
    61b0:	430b      	orrs	r3, r1
    61b2:	0018      	movs	r0, r3
    61b4:	bd70      	pop	{r4, r5, r6, pc}
    61b6:	2e00      	cmp	r6, #0
    61b8:	d007      	beq.n	61ca <__aeabi_d2f+0x86>
    61ba:	4314      	orrs	r4, r2
    61bc:	d0ef      	beq.n	619e <__aeabi_d2f+0x5a>
    61be:	2080      	movs	r0, #128	; 0x80
    61c0:	00d2      	lsls	r2, r2, #3
    61c2:	0480      	lsls	r0, r0, #18
    61c4:	4302      	orrs	r2, r0
    61c6:	23ff      	movs	r3, #255	; 0xff
    61c8:	e7d7      	b.n	617a <__aeabi_d2f+0x36>
    61ca:	4322      	orrs	r2, r4
    61cc:	2300      	movs	r3, #0
    61ce:	2a00      	cmp	r2, #0
    61d0:	d003      	beq.n	61da <__aeabi_d2f+0x96>
    61d2:	2205      	movs	r2, #5
    61d4:	08d2      	lsrs	r2, r2, #3
    61d6:	2bff      	cmp	r3, #255	; 0xff
    61d8:	d003      	beq.n	61e2 <__aeabi_d2f+0x9e>
    61da:	0252      	lsls	r2, r2, #9
    61dc:	0a52      	lsrs	r2, r2, #9
    61de:	b2db      	uxtb	r3, r3
    61e0:	e7df      	b.n	61a2 <__aeabi_d2f+0x5e>
    61e2:	2a00      	cmp	r2, #0
    61e4:	d032      	beq.n	624c <__aeabi_d2f+0x108>
    61e6:	2080      	movs	r0, #128	; 0x80
    61e8:	03c0      	lsls	r0, r0, #15
    61ea:	4302      	orrs	r2, r0
    61ec:	0252      	lsls	r2, r2, #9
    61ee:	0a52      	lsrs	r2, r2, #9
    61f0:	e7d7      	b.n	61a2 <__aeabi_d2f+0x5e>
    61f2:	0018      	movs	r0, r3
    61f4:	3017      	adds	r0, #23
    61f6:	db14      	blt.n	6222 <__aeabi_d2f+0xde>
    61f8:	2080      	movs	r0, #128	; 0x80
    61fa:	0400      	lsls	r0, r0, #16
    61fc:	4302      	orrs	r2, r0
    61fe:	201e      	movs	r0, #30
    6200:	1ac0      	subs	r0, r0, r3
    6202:	281f      	cmp	r0, #31
    6204:	dc0f      	bgt.n	6226 <__aeabi_d2f+0xe2>
    6206:	0025      	movs	r5, r4
    6208:	4b12      	ldr	r3, [pc, #72]	; (6254 <__aeabi_d2f+0x110>)
    620a:	18f3      	adds	r3, r6, r3
    620c:	409d      	lsls	r5, r3
    620e:	1e6e      	subs	r6, r5, #1
    6210:	41b5      	sbcs	r5, r6
    6212:	409a      	lsls	r2, r3
    6214:	002b      	movs	r3, r5
    6216:	4313      	orrs	r3, r2
    6218:	0022      	movs	r2, r4
    621a:	40c2      	lsrs	r2, r0
    621c:	431a      	orrs	r2, r3
    621e:	2300      	movs	r3, #0
    6220:	e7ab      	b.n	617a <__aeabi_d2f+0x36>
    6222:	2300      	movs	r3, #0
    6224:	e7d5      	b.n	61d2 <__aeabi_d2f+0x8e>
    6226:	2502      	movs	r5, #2
    6228:	426d      	negs	r5, r5
    622a:	1aeb      	subs	r3, r5, r3
    622c:	0015      	movs	r5, r2
    622e:	40dd      	lsrs	r5, r3
    6230:	2820      	cmp	r0, #32
    6232:	d009      	beq.n	6248 <__aeabi_d2f+0x104>
    6234:	4b08      	ldr	r3, [pc, #32]	; (6258 <__aeabi_d2f+0x114>)
    6236:	18f3      	adds	r3, r6, r3
    6238:	409a      	lsls	r2, r3
    623a:	4314      	orrs	r4, r2
    623c:	1e62      	subs	r2, r4, #1
    623e:	4194      	sbcs	r4, r2
    6240:	0022      	movs	r2, r4
    6242:	2300      	movs	r3, #0
    6244:	432a      	orrs	r2, r5
    6246:	e798      	b.n	617a <__aeabi_d2f+0x36>
    6248:	2200      	movs	r2, #0
    624a:	e7f6      	b.n	623a <__aeabi_d2f+0xf6>
    624c:	2200      	movs	r2, #0
    624e:	e7a8      	b.n	61a2 <__aeabi_d2f+0x5e>
    6250:	fffffc80 	.word	0xfffffc80
    6254:	fffffc82 	.word	0xfffffc82
    6258:	fffffca2 	.word	0xfffffca2

0000625c <__aeabi_uidiv>:
    625c:	2200      	movs	r2, #0
    625e:	0843      	lsrs	r3, r0, #1
    6260:	428b      	cmp	r3, r1
    6262:	d374      	bcc.n	634e <__aeabi_uidiv+0xf2>
    6264:	0903      	lsrs	r3, r0, #4
    6266:	428b      	cmp	r3, r1
    6268:	d35f      	bcc.n	632a <__aeabi_uidiv+0xce>
    626a:	0a03      	lsrs	r3, r0, #8
    626c:	428b      	cmp	r3, r1
    626e:	d344      	bcc.n	62fa <__aeabi_uidiv+0x9e>
    6270:	0b03      	lsrs	r3, r0, #12
    6272:	428b      	cmp	r3, r1
    6274:	d328      	bcc.n	62c8 <__aeabi_uidiv+0x6c>
    6276:	0c03      	lsrs	r3, r0, #16
    6278:	428b      	cmp	r3, r1
    627a:	d30d      	bcc.n	6298 <__aeabi_uidiv+0x3c>
    627c:	22ff      	movs	r2, #255	; 0xff
    627e:	0209      	lsls	r1, r1, #8
    6280:	ba12      	rev	r2, r2
    6282:	0c03      	lsrs	r3, r0, #16
    6284:	428b      	cmp	r3, r1
    6286:	d302      	bcc.n	628e <__aeabi_uidiv+0x32>
    6288:	1212      	asrs	r2, r2, #8
    628a:	0209      	lsls	r1, r1, #8
    628c:	d065      	beq.n	635a <__aeabi_uidiv+0xfe>
    628e:	0b03      	lsrs	r3, r0, #12
    6290:	428b      	cmp	r3, r1
    6292:	d319      	bcc.n	62c8 <__aeabi_uidiv+0x6c>
    6294:	e000      	b.n	6298 <__aeabi_uidiv+0x3c>
    6296:	0a09      	lsrs	r1, r1, #8
    6298:	0bc3      	lsrs	r3, r0, #15
    629a:	428b      	cmp	r3, r1
    629c:	d301      	bcc.n	62a2 <__aeabi_uidiv+0x46>
    629e:	03cb      	lsls	r3, r1, #15
    62a0:	1ac0      	subs	r0, r0, r3
    62a2:	4152      	adcs	r2, r2
    62a4:	0b83      	lsrs	r3, r0, #14
    62a6:	428b      	cmp	r3, r1
    62a8:	d301      	bcc.n	62ae <__aeabi_uidiv+0x52>
    62aa:	038b      	lsls	r3, r1, #14
    62ac:	1ac0      	subs	r0, r0, r3
    62ae:	4152      	adcs	r2, r2
    62b0:	0b43      	lsrs	r3, r0, #13
    62b2:	428b      	cmp	r3, r1
    62b4:	d301      	bcc.n	62ba <__aeabi_uidiv+0x5e>
    62b6:	034b      	lsls	r3, r1, #13
    62b8:	1ac0      	subs	r0, r0, r3
    62ba:	4152      	adcs	r2, r2
    62bc:	0b03      	lsrs	r3, r0, #12
    62be:	428b      	cmp	r3, r1
    62c0:	d301      	bcc.n	62c6 <__aeabi_uidiv+0x6a>
    62c2:	030b      	lsls	r3, r1, #12
    62c4:	1ac0      	subs	r0, r0, r3
    62c6:	4152      	adcs	r2, r2
    62c8:	0ac3      	lsrs	r3, r0, #11
    62ca:	428b      	cmp	r3, r1
    62cc:	d301      	bcc.n	62d2 <__aeabi_uidiv+0x76>
    62ce:	02cb      	lsls	r3, r1, #11
    62d0:	1ac0      	subs	r0, r0, r3
    62d2:	4152      	adcs	r2, r2
    62d4:	0a83      	lsrs	r3, r0, #10
    62d6:	428b      	cmp	r3, r1
    62d8:	d301      	bcc.n	62de <__aeabi_uidiv+0x82>
    62da:	028b      	lsls	r3, r1, #10
    62dc:	1ac0      	subs	r0, r0, r3
    62de:	4152      	adcs	r2, r2
    62e0:	0a43      	lsrs	r3, r0, #9
    62e2:	428b      	cmp	r3, r1
    62e4:	d301      	bcc.n	62ea <__aeabi_uidiv+0x8e>
    62e6:	024b      	lsls	r3, r1, #9
    62e8:	1ac0      	subs	r0, r0, r3
    62ea:	4152      	adcs	r2, r2
    62ec:	0a03      	lsrs	r3, r0, #8
    62ee:	428b      	cmp	r3, r1
    62f0:	d301      	bcc.n	62f6 <__aeabi_uidiv+0x9a>
    62f2:	020b      	lsls	r3, r1, #8
    62f4:	1ac0      	subs	r0, r0, r3
    62f6:	4152      	adcs	r2, r2
    62f8:	d2cd      	bcs.n	6296 <__aeabi_uidiv+0x3a>
    62fa:	09c3      	lsrs	r3, r0, #7
    62fc:	428b      	cmp	r3, r1
    62fe:	d301      	bcc.n	6304 <__aeabi_uidiv+0xa8>
    6300:	01cb      	lsls	r3, r1, #7
    6302:	1ac0      	subs	r0, r0, r3
    6304:	4152      	adcs	r2, r2
    6306:	0983      	lsrs	r3, r0, #6
    6308:	428b      	cmp	r3, r1
    630a:	d301      	bcc.n	6310 <__aeabi_uidiv+0xb4>
    630c:	018b      	lsls	r3, r1, #6
    630e:	1ac0      	subs	r0, r0, r3
    6310:	4152      	adcs	r2, r2
    6312:	0943      	lsrs	r3, r0, #5
    6314:	428b      	cmp	r3, r1
    6316:	d301      	bcc.n	631c <__aeabi_uidiv+0xc0>
    6318:	014b      	lsls	r3, r1, #5
    631a:	1ac0      	subs	r0, r0, r3
    631c:	4152      	adcs	r2, r2
    631e:	0903      	lsrs	r3, r0, #4
    6320:	428b      	cmp	r3, r1
    6322:	d301      	bcc.n	6328 <__aeabi_uidiv+0xcc>
    6324:	010b      	lsls	r3, r1, #4
    6326:	1ac0      	subs	r0, r0, r3
    6328:	4152      	adcs	r2, r2
    632a:	08c3      	lsrs	r3, r0, #3
    632c:	428b      	cmp	r3, r1
    632e:	d301      	bcc.n	6334 <__aeabi_uidiv+0xd8>
    6330:	00cb      	lsls	r3, r1, #3
    6332:	1ac0      	subs	r0, r0, r3
    6334:	4152      	adcs	r2, r2
    6336:	0883      	lsrs	r3, r0, #2
    6338:	428b      	cmp	r3, r1
    633a:	d301      	bcc.n	6340 <__aeabi_uidiv+0xe4>
    633c:	008b      	lsls	r3, r1, #2
    633e:	1ac0      	subs	r0, r0, r3
    6340:	4152      	adcs	r2, r2
    6342:	0843      	lsrs	r3, r0, #1
    6344:	428b      	cmp	r3, r1
    6346:	d301      	bcc.n	634c <__aeabi_uidiv+0xf0>
    6348:	004b      	lsls	r3, r1, #1
    634a:	1ac0      	subs	r0, r0, r3
    634c:	4152      	adcs	r2, r2
    634e:	1a41      	subs	r1, r0, r1
    6350:	d200      	bcs.n	6354 <__aeabi_uidiv+0xf8>
    6352:	4601      	mov	r1, r0
    6354:	4152      	adcs	r2, r2
    6356:	4610      	mov	r0, r2
    6358:	4770      	bx	lr
    635a:	e7ff      	b.n	635c <__aeabi_uidiv+0x100>
    635c:	b501      	push	{r0, lr}
    635e:	2000      	movs	r0, #0
    6360:	f000 f806 	bl	6370 <__aeabi_idiv0>
    6364:	bd02      	pop	{r1, pc}
    6366:	46c0      	nop			; (mov r8, r8)

00006368 <__aeabi_uidivmod>:
    6368:	2900      	cmp	r1, #0
    636a:	d0f7      	beq.n	635c <__aeabi_uidiv+0x100>
    636c:	e776      	b.n	625c <__aeabi_uidiv>
    636e:	4770      	bx	lr

00006370 <__aeabi_idiv0>:
    6370:	4770      	bx	lr
    6372:	46c0      	nop			; (mov r8, r8)

00006374 <__clzsi2>:
    6374:	211c      	movs	r1, #28
    6376:	2301      	movs	r3, #1
    6378:	041b      	lsls	r3, r3, #16
    637a:	4298      	cmp	r0, r3
    637c:	d301      	bcc.n	6382 <__clzsi2+0xe>
    637e:	0c00      	lsrs	r0, r0, #16
    6380:	3910      	subs	r1, #16
    6382:	0a1b      	lsrs	r3, r3, #8
    6384:	4298      	cmp	r0, r3
    6386:	d301      	bcc.n	638c <__clzsi2+0x18>
    6388:	0a00      	lsrs	r0, r0, #8
    638a:	3908      	subs	r1, #8
    638c:	091b      	lsrs	r3, r3, #4
    638e:	4298      	cmp	r0, r3
    6390:	d301      	bcc.n	6396 <__clzsi2+0x22>
    6392:	0900      	lsrs	r0, r0, #4
    6394:	3904      	subs	r1, #4
    6396:	a202      	add	r2, pc, #8	; (adr r2, 63a0 <__clzsi2+0x2c>)
    6398:	5c10      	ldrb	r0, [r2, r0]
    639a:	1840      	adds	r0, r0, r1
    639c:	4770      	bx	lr
    639e:	46c0      	nop			; (mov r8, r8)
    63a0:	02020304 	.word	0x02020304
    63a4:	01010101 	.word	0x01010101
	...

000063b0 <__errno>:
    63b0:	4b01      	ldr	r3, [pc, #4]	; (63b8 <__errno+0x8>)
    63b2:	6818      	ldr	r0, [r3, #0]
    63b4:	4770      	bx	lr
    63b6:	46c0      	nop			; (mov r8, r8)
    63b8:	200004a0 	.word	0x200004a0

000063bc <__libc_init_array>:
    63bc:	b570      	push	{r4, r5, r6, lr}
    63be:	4e0d      	ldr	r6, [pc, #52]	; (63f4 <__libc_init_array+0x38>)
    63c0:	4d0d      	ldr	r5, [pc, #52]	; (63f8 <__libc_init_array+0x3c>)
    63c2:	2400      	movs	r4, #0
    63c4:	1bad      	subs	r5, r5, r6
    63c6:	10ad      	asrs	r5, r5, #2
    63c8:	d005      	beq.n	63d6 <__libc_init_array+0x1a>
    63ca:	00a3      	lsls	r3, r4, #2
    63cc:	58f3      	ldr	r3, [r6, r3]
    63ce:	3401      	adds	r4, #1
    63d0:	4798      	blx	r3
    63d2:	42a5      	cmp	r5, r4
    63d4:	d1f9      	bne.n	63ca <__libc_init_array+0xe>
    63d6:	f000 f93b 	bl	6650 <_init>
    63da:	4e08      	ldr	r6, [pc, #32]	; (63fc <__libc_init_array+0x40>)
    63dc:	4d08      	ldr	r5, [pc, #32]	; (6400 <__libc_init_array+0x44>)
    63de:	2400      	movs	r4, #0
    63e0:	1bad      	subs	r5, r5, r6
    63e2:	10ad      	asrs	r5, r5, #2
    63e4:	d005      	beq.n	63f2 <__libc_init_array+0x36>
    63e6:	00a3      	lsls	r3, r4, #2
    63e8:	58f3      	ldr	r3, [r6, r3]
    63ea:	3401      	adds	r4, #1
    63ec:	4798      	blx	r3
    63ee:	42a5      	cmp	r5, r4
    63f0:	d1f9      	bne.n	63e6 <__libc_init_array+0x2a>
    63f2:	bd70      	pop	{r4, r5, r6, pc}
    63f4:	0000665c 	.word	0x0000665c
    63f8:	0000665c 	.word	0x0000665c
    63fc:	0000665c 	.word	0x0000665c
    6400:	00006664 	.word	0x00006664

00006404 <register_fini>:
    6404:	4b03      	ldr	r3, [pc, #12]	; (6414 <register_fini+0x10>)
    6406:	b510      	push	{r4, lr}
    6408:	2b00      	cmp	r3, #0
    640a:	d002      	beq.n	6412 <register_fini+0xe>
    640c:	4802      	ldr	r0, [pc, #8]	; (6418 <register_fini+0x14>)
    640e:	f000 f805 	bl	641c <atexit>
    6412:	bd10      	pop	{r4, pc}
    6414:	00000000 	.word	0x00000000
    6418:	0000642d 	.word	0x0000642d

0000641c <atexit>:
    641c:	b510      	push	{r4, lr}
    641e:	0001      	movs	r1, r0
    6420:	2300      	movs	r3, #0
    6422:	2200      	movs	r2, #0
    6424:	2000      	movs	r0, #0
    6426:	f000 f81b 	bl	6460 <__register_exitproc>
    642a:	bd10      	pop	{r4, pc}

0000642c <__libc_fini_array>:
    642c:	b570      	push	{r4, r5, r6, lr}
    642e:	4b09      	ldr	r3, [pc, #36]	; (6454 <__libc_fini_array+0x28>)
    6430:	4c09      	ldr	r4, [pc, #36]	; (6458 <__libc_fini_array+0x2c>)
    6432:	1ae4      	subs	r4, r4, r3
    6434:	10a4      	asrs	r4, r4, #2
    6436:	d009      	beq.n	644c <__libc_fini_array+0x20>
    6438:	4a08      	ldr	r2, [pc, #32]	; (645c <__libc_fini_array+0x30>)
    643a:	18a5      	adds	r5, r4, r2
    643c:	00ad      	lsls	r5, r5, #2
    643e:	18ed      	adds	r5, r5, r3
    6440:	682b      	ldr	r3, [r5, #0]
    6442:	3c01      	subs	r4, #1
    6444:	4798      	blx	r3
    6446:	3d04      	subs	r5, #4
    6448:	2c00      	cmp	r4, #0
    644a:	d1f9      	bne.n	6440 <__libc_fini_array+0x14>
    644c:	f000 f90a 	bl	6664 <_fini>
    6450:	bd70      	pop	{r4, r5, r6, pc}
    6452:	46c0      	nop			; (mov r8, r8)
    6454:	00006670 	.word	0x00006670
    6458:	00006674 	.word	0x00006674
    645c:	3fffffff 	.word	0x3fffffff

00006460 <__register_exitproc>:
    6460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6462:	4644      	mov	r4, r8
    6464:	465f      	mov	r7, fp
    6466:	4656      	mov	r6, sl
    6468:	464d      	mov	r5, r9
    646a:	469b      	mov	fp, r3
    646c:	4b2f      	ldr	r3, [pc, #188]	; (652c <__register_exitproc+0xcc>)
    646e:	b4f0      	push	{r4, r5, r6, r7}
    6470:	681c      	ldr	r4, [r3, #0]
    6472:	23a4      	movs	r3, #164	; 0xa4
    6474:	005b      	lsls	r3, r3, #1
    6476:	0005      	movs	r5, r0
    6478:	58e0      	ldr	r0, [r4, r3]
    647a:	000e      	movs	r6, r1
    647c:	4690      	mov	r8, r2
    647e:	2800      	cmp	r0, #0
    6480:	d04b      	beq.n	651a <__register_exitproc+0xba>
    6482:	6843      	ldr	r3, [r0, #4]
    6484:	2b1f      	cmp	r3, #31
    6486:	dc0d      	bgt.n	64a4 <__register_exitproc+0x44>
    6488:	1c5c      	adds	r4, r3, #1
    648a:	2d00      	cmp	r5, #0
    648c:	d121      	bne.n	64d2 <__register_exitproc+0x72>
    648e:	3302      	adds	r3, #2
    6490:	009b      	lsls	r3, r3, #2
    6492:	6044      	str	r4, [r0, #4]
    6494:	501e      	str	r6, [r3, r0]
    6496:	2000      	movs	r0, #0
    6498:	bc3c      	pop	{r2, r3, r4, r5}
    649a:	4690      	mov	r8, r2
    649c:	4699      	mov	r9, r3
    649e:	46a2      	mov	sl, r4
    64a0:	46ab      	mov	fp, r5
    64a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    64a4:	4b22      	ldr	r3, [pc, #136]	; (6530 <__register_exitproc+0xd0>)
    64a6:	2b00      	cmp	r3, #0
    64a8:	d03c      	beq.n	6524 <__register_exitproc+0xc4>
    64aa:	20c8      	movs	r0, #200	; 0xc8
    64ac:	0040      	lsls	r0, r0, #1
    64ae:	e000      	b.n	64b2 <__register_exitproc+0x52>
    64b0:	bf00      	nop
    64b2:	2800      	cmp	r0, #0
    64b4:	d036      	beq.n	6524 <__register_exitproc+0xc4>
    64b6:	22a4      	movs	r2, #164	; 0xa4
    64b8:	2300      	movs	r3, #0
    64ba:	0052      	lsls	r2, r2, #1
    64bc:	58a1      	ldr	r1, [r4, r2]
    64be:	6043      	str	r3, [r0, #4]
    64c0:	6001      	str	r1, [r0, #0]
    64c2:	50a0      	str	r0, [r4, r2]
    64c4:	3240      	adds	r2, #64	; 0x40
    64c6:	5083      	str	r3, [r0, r2]
    64c8:	3204      	adds	r2, #4
    64ca:	5083      	str	r3, [r0, r2]
    64cc:	2401      	movs	r4, #1
    64ce:	2d00      	cmp	r5, #0
    64d0:	d0dd      	beq.n	648e <__register_exitproc+0x2e>
    64d2:	009a      	lsls	r2, r3, #2
    64d4:	4691      	mov	r9, r2
    64d6:	4481      	add	r9, r0
    64d8:	4642      	mov	r2, r8
    64da:	2188      	movs	r1, #136	; 0x88
    64dc:	464f      	mov	r7, r9
    64de:	507a      	str	r2, [r7, r1]
    64e0:	22c4      	movs	r2, #196	; 0xc4
    64e2:	0052      	lsls	r2, r2, #1
    64e4:	4690      	mov	r8, r2
    64e6:	4480      	add	r8, r0
    64e8:	4642      	mov	r2, r8
    64ea:	3987      	subs	r1, #135	; 0x87
    64ec:	4099      	lsls	r1, r3
    64ee:	6812      	ldr	r2, [r2, #0]
    64f0:	468a      	mov	sl, r1
    64f2:	430a      	orrs	r2, r1
    64f4:	4694      	mov	ip, r2
    64f6:	4642      	mov	r2, r8
    64f8:	4661      	mov	r1, ip
    64fa:	6011      	str	r1, [r2, #0]
    64fc:	2284      	movs	r2, #132	; 0x84
    64fe:	4649      	mov	r1, r9
    6500:	465f      	mov	r7, fp
    6502:	0052      	lsls	r2, r2, #1
    6504:	508f      	str	r7, [r1, r2]
    6506:	2d02      	cmp	r5, #2
    6508:	d1c1      	bne.n	648e <__register_exitproc+0x2e>
    650a:	0002      	movs	r2, r0
    650c:	4655      	mov	r5, sl
    650e:	328d      	adds	r2, #141	; 0x8d
    6510:	32ff      	adds	r2, #255	; 0xff
    6512:	6811      	ldr	r1, [r2, #0]
    6514:	430d      	orrs	r5, r1
    6516:	6015      	str	r5, [r2, #0]
    6518:	e7b9      	b.n	648e <__register_exitproc+0x2e>
    651a:	0020      	movs	r0, r4
    651c:	304d      	adds	r0, #77	; 0x4d
    651e:	30ff      	adds	r0, #255	; 0xff
    6520:	50e0      	str	r0, [r4, r3]
    6522:	e7ae      	b.n	6482 <__register_exitproc+0x22>
    6524:	2001      	movs	r0, #1
    6526:	4240      	negs	r0, r0
    6528:	e7b6      	b.n	6498 <__register_exitproc+0x38>
    652a:	46c0      	nop			; (mov r8, r8)
    652c:	0000664c 	.word	0x0000664c
    6530:	00000000 	.word	0x00000000

00006534 <spi2MOSI>:
    6534:	0c000002 00000200                                .....

00006539 <spi2SCK>:
    6539:	0f000002 00000200                                .....

0000653e <spi2MISO>:
    653e:	0d000002 00000000                                .....

00006543 <senseBatPin>:
    6543:	06000000 01000106                                .....

00006548 <senseAPin>:
    6548:	03010001 0100010b                                .....

0000654d <senseBPin>:
    654d:	02010001 0000010a                                .....

00006552 <senseCPin>:
    6552:	03000001 00000101                                .....

00006557 <senseDPin>:
    6557:	02000001 00000000                                .....

0000655c <analogAccelPin>:
    655c:	07000000 00000207                                .....

00006561 <spi2MOSI>:
    6561:	0c000002 00000200                                .....

00006566 <spi2SCK>:
    6566:	0f000002 6f700000 00000077 00000000     ......pow.......
	...

00006578 <TWO52>:
    6578:	00000000 43300000 00000000 c3300000     ......0C......0.
    6588:	00003fd4 00003f32 00003f32 00003f30     .?..2?..2?..0?..
    6598:	00003fc6 00003fc6 00003fbc 00003f30     .?...?...?..0?..
    65a8:	00003fc6 00003fbc 00003fc6 00003f30     .?...?...?..0?..
    65b8:	00003fcc 00003fcc 00003fcc 00004056     .?...?...?..V@..
    65c8:	00004d08 00004bd6 00004cdc 00004bcc     .M...K...L...K..
    65d8:	00004cdc 00004ce6 00004cdc 00004bcc     .L...L...L...K..
    65e8:	00004bd6 00004bd6 00004ce6 00004bcc     .K...K...L...K..
    65f8:	00004bc2 00004bc2 00004bc2 00004f38     .K...K...K..8O..
    6608:	00005550 00005410 00005410 0000540e     PU...T...T...T..
    6618:	00005528 00005528 0000551a 0000540e     (U..(U...U...T..
    6628:	00005528 0000551a 00005528 0000540e     (U...U..(U...T..
    6638:	00005530 00005530 00005530 00005730     0U..0U..0U..0W..
    6648:	00000043                                C...

0000664c <_global_impure_ptr>:
    664c:	20000078                                x.. 

00006650 <_init>:
    6650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6652:	46c0      	nop			; (mov r8, r8)
    6654:	bcf8      	pop	{r3, r4, r5, r6, r7}
    6656:	bc08      	pop	{r3}
    6658:	469e      	mov	lr, r3
    665a:	4770      	bx	lr

0000665c <__init_array_start>:
    665c:	00006405 	.word	0x00006405

00006660 <__frame_dummy_init_array_entry>:
    6660:	000000dd                                ....

00006664 <_fini>:
    6664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6666:	46c0      	nop			; (mov r8, r8)
    6668:	bcf8      	pop	{r3, r4, r5, r6, r7}
    666a:	bc08      	pop	{r3}
    666c:	469e      	mov	lr, r3
    666e:	4770      	bx	lr

00006670 <__fini_array_start>:
    6670:	000000b5 	.word	0x000000b5
