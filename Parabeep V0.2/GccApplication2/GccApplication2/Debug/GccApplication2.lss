
GccApplication2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004e8  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000042c  20000000  000004e8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bkupram      00000000  47000000  47000000  0002042c  2**0
                  CONTENTS
  3 .qspi         00000000  04000000  04000000  0002042c  2**0
                  CONTENTS
  4 .bss          00000040  2000042c  00000914  0002042c  2**2
                  ALLOC
  5 .stack        0000c004  2000046c  00000954  0002042c  2**0
                  ALLOC
  6 .ARM.attributes 0000002a  00000000  00000000  0002042c  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  00020456  2**0
                  CONTENTS, READONLY
  8 .debug_info   00000e2d  00000000  00000000  000204af  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000001e1  00000000  00000000  000212dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000097  00000000  00000000  000214bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000048  00000000  00000000  00021554  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  0002159c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0001e824  00000000  00000000  000215c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000105b  00000000  00000000  0003fde8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000c6cda  00000000  00000000  00040e43  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00000218  00000000  00000000  00107b20  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
   0:	70 c4 00 20 d5 02 00 00 d1 02 00 00 d1 02 00 00     p.. ............
  10:	d1 02 00 00 d1 02 00 00 d1 02 00 00 00 00 00 00     ................
	...
  2c:	d1 02 00 00 d1 02 00 00 00 00 00 00 d1 02 00 00     ................
  3c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
  4c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
  5c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
  6c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
  7c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
  8c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
  9c:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
  ac:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
  bc:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
  cc:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
  dc:	d1 02 00 00 d1 02 00 00 d1 02 00 00 00 00 00 00     ................
	...
  f4:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
 104:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
 114:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
 124:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
 134:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
 144:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
 154:	d1 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
 180:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
 190:	00 00 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
 1a0:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
 1b0:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
 1c0:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
 1d0:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
 1e0:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
 1f0:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
 200:	d1 02 00 00 00 00 00 00 00 00 00 00 d1 02 00 00     ................
 210:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
 220:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
 230:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
 240:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
 250:	d1 02 00 00 d1 02 00 00 d1 02 00 00 d1 02 00 00     ................
 260:	00 00 00 00                                         ....

00000264 <__do_global_dtors_aux>:
 264:	b510      	push	{r4, lr}
 266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
 268:	7823      	ldrb	r3, [r4, #0]
 26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
 26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
 26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
 270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
 272:	f3af 8000 	nop.w
 276:	2301      	movs	r3, #1
 278:	7023      	strb	r3, [r4, #0]
 27a:	bd10      	pop	{r4, pc}
 27c:	2000042c 	.word	0x2000042c
 280:	00000000 	.word	0x00000000
 284:	000004e8 	.word	0x000004e8

00000288 <frame_dummy>:
 288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
 28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
 28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
 28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
 290:	b510      	push	{r4, lr}
 292:	f3af 8000 	nop.w
 296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
 298:	6803      	ldr	r3, [r0, #0]
 29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
 29c:	bd10      	pop	{r4, pc}
 29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
 2a0:	6803      	ldr	r3, [r0, #0]
 2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
 2a4:	4770      	bx	lr
 2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
 2a8:	2b00      	cmp	r3, #0
 2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
 2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 2b0:	4718      	bx	r3
 2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
 2b4:	2b00      	cmp	r3, #0
 2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
 2b8:	4718      	bx	r3
 2ba:	bf00      	nop
 2bc:	00000000 	.word	0x00000000
 2c0:	000004e8 	.word	0x000004e8
 2c4:	20000430 	.word	0x20000430
 2c8:	000004e8 	.word	0x000004e8
 2cc:	00000000 	.word	0x00000000

000002d0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
 2d0:	e7fe      	b.n	2d0 <Dummy_Handler>
	...

000002d4 <Reset_Handler>:
{
 2d4:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
 2d6:	4b10      	ldr	r3, [pc, #64]	; (318 <Reset_Handler+0x44>)
 2d8:	4a10      	ldr	r2, [pc, #64]	; (31c <Reset_Handler+0x48>)
 2da:	429a      	cmp	r2, r3
 2dc:	d009      	beq.n	2f2 <Reset_Handler+0x1e>
 2de:	4b0e      	ldr	r3, [pc, #56]	; (318 <Reset_Handler+0x44>)
 2e0:	4a0e      	ldr	r2, [pc, #56]	; (31c <Reset_Handler+0x48>)
 2e2:	e003      	b.n	2ec <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
 2e4:	6811      	ldr	r1, [r2, #0]
 2e6:	6019      	str	r1, [r3, #0]
 2e8:	3304      	adds	r3, #4
 2ea:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
 2ec:	490c      	ldr	r1, [pc, #48]	; (320 <Reset_Handler+0x4c>)
 2ee:	428b      	cmp	r3, r1
 2f0:	d3f8      	bcc.n	2e4 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
 2f2:	4b0c      	ldr	r3, [pc, #48]	; (324 <Reset_Handler+0x50>)
 2f4:	e002      	b.n	2fc <Reset_Handler+0x28>
                *pDest++ = 0;
 2f6:	2200      	movs	r2, #0
 2f8:	601a      	str	r2, [r3, #0]
 2fa:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
 2fc:	4a0a      	ldr	r2, [pc, #40]	; (328 <Reset_Handler+0x54>)
 2fe:	4293      	cmp	r3, r2
 300:	d3f9      	bcc.n	2f6 <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
 302:	4a0a      	ldr	r2, [pc, #40]	; (32c <Reset_Handler+0x58>)
 304:	4b0a      	ldr	r3, [pc, #40]	; (330 <Reset_Handler+0x5c>)
 306:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 30a:	6093      	str	r3, [r2, #8]
        __libc_init_array();
 30c:	4b09      	ldr	r3, [pc, #36]	; (334 <Reset_Handler+0x60>)
 30e:	4798      	blx	r3
        main();
 310:	4b09      	ldr	r3, [pc, #36]	; (338 <Reset_Handler+0x64>)
 312:	4798      	blx	r3
 314:	e7fe      	b.n	314 <Reset_Handler+0x40>
 316:	bf00      	nop
 318:	20000000 	.word	0x20000000
 31c:	000004e8 	.word	0x000004e8
 320:	2000042c 	.word	0x2000042c
 324:	2000042c 	.word	0x2000042c
 328:	2000046c 	.word	0x2000046c
 32c:	e000ed00 	.word	0xe000ed00
 330:	00000000 	.word	0x00000000
 334:	00000351 	.word	0x00000351
 338:	0000033d 	.word	0x0000033d

0000033c <main>:

int main(void)
{
    /* Replace with your application code */
	
	long count = 0;
 33c:	2100      	movs	r1, #0
 33e:	460b      	mov	r3, r1
    while (1) 
    {
		count =  count + 1;
 340:	3301      	adds	r3, #1
		
		
		if (count > 10000000)
		{
			count = 1;
 342:	2101      	movs	r1, #1
		if (count > 10000000)
 344:	4a01      	ldr	r2, [pc, #4]	; (34c <main+0x10>)
 346:	4293      	cmp	r3, r2
 348:	ddfa      	ble.n	340 <main+0x4>
 34a:	e7f8      	b.n	33e <main+0x2>
 34c:	00989680 	.word	0x00989680

00000350 <__libc_init_array>:
 350:	b570      	push	{r4, r5, r6, lr}
 352:	4e0f      	ldr	r6, [pc, #60]	; (390 <__libc_init_array+0x40>)
 354:	4d0f      	ldr	r5, [pc, #60]	; (394 <__libc_init_array+0x44>)
 356:	1b76      	subs	r6, r6, r5
 358:	10b6      	asrs	r6, r6, #2
 35a:	bf18      	it	ne
 35c:	2400      	movne	r4, #0
 35e:	d005      	beq.n	36c <__libc_init_array+0x1c>
 360:	3401      	adds	r4, #1
 362:	f855 3b04 	ldr.w	r3, [r5], #4
 366:	4798      	blx	r3
 368:	42a6      	cmp	r6, r4
 36a:	d1f9      	bne.n	360 <__libc_init_array+0x10>
 36c:	4e0a      	ldr	r6, [pc, #40]	; (398 <__libc_init_array+0x48>)
 36e:	4d0b      	ldr	r5, [pc, #44]	; (39c <__libc_init_array+0x4c>)
 370:	1b76      	subs	r6, r6, r5
 372:	f000 f8a7 	bl	4c4 <_init>
 376:	10b6      	asrs	r6, r6, #2
 378:	bf18      	it	ne
 37a:	2400      	movne	r4, #0
 37c:	d006      	beq.n	38c <__libc_init_array+0x3c>
 37e:	3401      	adds	r4, #1
 380:	f855 3b04 	ldr.w	r3, [r5], #4
 384:	4798      	blx	r3
 386:	42a6      	cmp	r6, r4
 388:	d1f9      	bne.n	37e <__libc_init_array+0x2e>
 38a:	bd70      	pop	{r4, r5, r6, pc}
 38c:	bd70      	pop	{r4, r5, r6, pc}
 38e:	bf00      	nop
 390:	000004d0 	.word	0x000004d0
 394:	000004d0 	.word	0x000004d0
 398:	000004d8 	.word	0x000004d8
 39c:	000004d0 	.word	0x000004d0

000003a0 <register_fini>:
 3a0:	4b02      	ldr	r3, [pc, #8]	; (3ac <register_fini+0xc>)
 3a2:	b113      	cbz	r3, 3aa <register_fini+0xa>
 3a4:	4802      	ldr	r0, [pc, #8]	; (3b0 <register_fini+0x10>)
 3a6:	f000 b805 	b.w	3b4 <atexit>
 3aa:	4770      	bx	lr
 3ac:	00000000 	.word	0x00000000
 3b0:	000003c1 	.word	0x000003c1

000003b4 <atexit>:
 3b4:	2300      	movs	r3, #0
 3b6:	4601      	mov	r1, r0
 3b8:	461a      	mov	r2, r3
 3ba:	4618      	mov	r0, r3
 3bc:	f000 b81e 	b.w	3fc <__register_exitproc>

000003c0 <__libc_fini_array>:
 3c0:	b538      	push	{r3, r4, r5, lr}
 3c2:	4c0a      	ldr	r4, [pc, #40]	; (3ec <__libc_fini_array+0x2c>)
 3c4:	4d0a      	ldr	r5, [pc, #40]	; (3f0 <__libc_fini_array+0x30>)
 3c6:	1b64      	subs	r4, r4, r5
 3c8:	10a4      	asrs	r4, r4, #2
 3ca:	d00a      	beq.n	3e2 <__libc_fini_array+0x22>
 3cc:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
 3d0:	3b01      	subs	r3, #1
 3d2:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 3d6:	3c01      	subs	r4, #1
 3d8:	f855 3904 	ldr.w	r3, [r5], #-4
 3dc:	4798      	blx	r3
 3de:	2c00      	cmp	r4, #0
 3e0:	d1f9      	bne.n	3d6 <__libc_fini_array+0x16>
 3e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 3e6:	f000 b877 	b.w	4d8 <_fini>
 3ea:	bf00      	nop
 3ec:	000004e8 	.word	0x000004e8
 3f0:	000004e4 	.word	0x000004e4

000003f4 <__retarget_lock_acquire_recursive>:
 3f4:	4770      	bx	lr
 3f6:	bf00      	nop

000003f8 <__retarget_lock_release_recursive>:
 3f8:	4770      	bx	lr
 3fa:	bf00      	nop

000003fc <__register_exitproc>:
 3fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 400:	4d2c      	ldr	r5, [pc, #176]	; (4b4 <__register_exitproc+0xb8>)
 402:	4606      	mov	r6, r0
 404:	6828      	ldr	r0, [r5, #0]
 406:	4698      	mov	r8, r3
 408:	460f      	mov	r7, r1
 40a:	4691      	mov	r9, r2
 40c:	f7ff fff2 	bl	3f4 <__retarget_lock_acquire_recursive>
 410:	4b29      	ldr	r3, [pc, #164]	; (4b8 <__register_exitproc+0xbc>)
 412:	681c      	ldr	r4, [r3, #0]
 414:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
 418:	2b00      	cmp	r3, #0
 41a:	d03e      	beq.n	49a <__register_exitproc+0x9e>
 41c:	685a      	ldr	r2, [r3, #4]
 41e:	2a1f      	cmp	r2, #31
 420:	dc1c      	bgt.n	45c <__register_exitproc+0x60>
 422:	f102 0e01 	add.w	lr, r2, #1
 426:	b176      	cbz	r6, 446 <__register_exitproc+0x4a>
 428:	eb03 0182 	add.w	r1, r3, r2, lsl #2
 42c:	2401      	movs	r4, #1
 42e:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
 432:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
 436:	4094      	lsls	r4, r2
 438:	4320      	orrs	r0, r4
 43a:	2e02      	cmp	r6, #2
 43c:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
 440:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
 444:	d023      	beq.n	48e <__register_exitproc+0x92>
 446:	3202      	adds	r2, #2
 448:	f8c3 e004 	str.w	lr, [r3, #4]
 44c:	6828      	ldr	r0, [r5, #0]
 44e:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
 452:	f7ff ffd1 	bl	3f8 <__retarget_lock_release_recursive>
 456:	2000      	movs	r0, #0
 458:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 45c:	4b17      	ldr	r3, [pc, #92]	; (4bc <__register_exitproc+0xc0>)
 45e:	b30b      	cbz	r3, 4a4 <__register_exitproc+0xa8>
 460:	f44f 70c8 	mov.w	r0, #400	; 0x190
 464:	f3af 8000 	nop.w
 468:	4603      	mov	r3, r0
 46a:	b1d8      	cbz	r0, 4a4 <__register_exitproc+0xa8>
 46c:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
 470:	6002      	str	r2, [r0, #0]
 472:	2100      	movs	r1, #0
 474:	6041      	str	r1, [r0, #4]
 476:	460a      	mov	r2, r1
 478:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
 47c:	f04f 0e01 	mov.w	lr, #1
 480:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
 484:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
 488:	2e00      	cmp	r6, #0
 48a:	d0dc      	beq.n	446 <__register_exitproc+0x4a>
 48c:	e7cc      	b.n	428 <__register_exitproc+0x2c>
 48e:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
 492:	430c      	orrs	r4, r1
 494:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
 498:	e7d5      	b.n	446 <__register_exitproc+0x4a>
 49a:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
 49e:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
 4a2:	e7bb      	b.n	41c <__register_exitproc+0x20>
 4a4:	6828      	ldr	r0, [r5, #0]
 4a6:	f7ff ffa7 	bl	3f8 <__retarget_lock_release_recursive>
 4aa:	f04f 30ff 	mov.w	r0, #4294967295
 4ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 4b2:	bf00      	nop
 4b4:	20000428 	.word	0x20000428
 4b8:	000004c0 	.word	0x000004c0
 4bc:	00000000 	.word	0x00000000

000004c0 <_global_impure_ptr>:
 4c0:	20000000                                ... 

000004c4 <_init>:
 4c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 4c6:	bf00      	nop
 4c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 4ca:	bc08      	pop	{r3}
 4cc:	469e      	mov	lr, r3
 4ce:	4770      	bx	lr

000004d0 <__init_array_start>:
 4d0:	000003a1 	.word	0x000003a1

000004d4 <__frame_dummy_init_array_entry>:
 4d4:	00000289                                ....

000004d8 <_fini>:
 4d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 4da:	bf00      	nop
 4dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 4de:	bc08      	pop	{r3}
 4e0:	469e      	mov	lr, r3
 4e2:	4770      	bx	lr

000004e4 <__fini_array_start>:
 4e4:	00000265 	.word	0x00000265
