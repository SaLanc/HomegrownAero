
My Projecttest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000518  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000000  20000000  20000000  00010518  2**0
                  CONTENTS
  2 .bkupram      00000000  47000000  47000000  00010518  2**0
                  CONTENTS
  3 .qspi         00000000  04000000  04000000  00010518  2**0
                  CONTENTS
  4 .bss          0000002c  20000000  20000000  00020000  2**2
                  ALLOC
  5 .stack        0000c004  2000002c  2000002c  00020000  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  00010518  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  00010546  2**0
                  CONTENTS, READONLY
  8 .debug_info   000052a0  00000000  00000000  0001059f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00000fbe  00000000  00000000  0001583f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000059b  00000000  00000000  000167fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000168  00000000  00000000  00016d98  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  00016f00  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000258d6  00000000  00000000  00016fe0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000744f  00000000  00000000  0003c8b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000e3bb3  00000000  00000000  00043d05  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000001f0  00000000  00000000  001278b8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
   0:	30 c0 00 20 e1 02 00 00 dd 02 00 00 dd 02 00 00     0.. ............
  10:	dd 02 00 00 dd 02 00 00 dd 02 00 00 00 00 00 00     ................
	...
  2c:	dd 02 00 00 dd 02 00 00 00 00 00 00 dd 02 00 00     ................
  3c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
  4c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
  5c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
  6c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
  7c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
  8c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
  9c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
  ac:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
  bc:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
  cc:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
  dc:	dd 02 00 00 dd 02 00 00 dd 02 00 00 00 00 00 00     ................
	...
  f4:	51 04 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     Q...............
 104:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
 114:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
 124:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
 134:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
 144:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
 154:	dd 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
 180:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
 190:	00 00 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
 1a0:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
 1b0:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
 1c0:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
 1d0:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
 1e0:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
 1f0:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
 200:	dd 02 00 00 00 00 00 00 00 00 00 00 dd 02 00 00     ................
 210:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
 220:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
 230:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
 240:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
 250:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
 260:	00 00 00 00                                         ....

00000264 <__do_global_dtors_aux>:
 264:	b510      	push	{r4, lr}
 266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
 268:	7823      	ldrb	r3, [r4, #0]
 26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
 26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
 26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
 270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
 272:	f3af 8000 	nop.w
 276:	2301      	movs	r3, #1
 278:	7023      	strb	r3, [r4, #0]
 27a:	bd10      	pop	{r4, pc}
 27c:	20000000 	.word	0x20000000
 280:	00000000 	.word	0x00000000
 284:	00000518 	.word	0x00000518

00000288 <frame_dummy>:
 288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
 28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
 28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
 28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
 290:	b510      	push	{r4, lr}
 292:	f3af 8000 	nop.w
 296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
 298:	6803      	ldr	r3, [r0, #0]
 29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
 29c:	bd10      	pop	{r4, pc}
 29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
 2a0:	6803      	ldr	r3, [r0, #0]
 2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
 2a4:	4770      	bx	lr
 2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
 2a8:	2b00      	cmp	r3, #0
 2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
 2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 2b0:	4718      	bx	r3
 2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
 2b4:	2b00      	cmp	r3, #0
 2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
 2b8:	4718      	bx	r3
 2ba:	bf00      	nop
 2bc:	00000000 	.word	0x00000000
 2c0:	00000518 	.word	0x00000518
 2c4:	20000004 	.word	0x20000004
 2c8:	00000518 	.word	0x00000518
 2cc:	00000000 	.word	0x00000000

000002d0 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
 2d0:	b508      	push	{r3, lr}
	system_init();
 2d2:	4b01      	ldr	r3, [pc, #4]	; (2d8 <atmel_start_init+0x8>)
 2d4:	4798      	blx	r3
 2d6:	bd08      	pop	{r3, pc}
 2d8:	0000035d 	.word	0x0000035d

000002dc <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
 2dc:	e7fe      	b.n	2dc <Dummy_Handler>
	...

000002e0 <Reset_Handler>:
{
 2e0:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
 2e2:	4b15      	ldr	r3, [pc, #84]	; (338 <Reset_Handler+0x58>)
 2e4:	4a15      	ldr	r2, [pc, #84]	; (33c <Reset_Handler+0x5c>)
 2e6:	429a      	cmp	r2, r3
 2e8:	d009      	beq.n	2fe <Reset_Handler+0x1e>
 2ea:	4b13      	ldr	r3, [pc, #76]	; (338 <Reset_Handler+0x58>)
 2ec:	4a13      	ldr	r2, [pc, #76]	; (33c <Reset_Handler+0x5c>)
 2ee:	e003      	b.n	2f8 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
 2f0:	6811      	ldr	r1, [r2, #0]
 2f2:	6019      	str	r1, [r3, #0]
 2f4:	3304      	adds	r3, #4
 2f6:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
 2f8:	4911      	ldr	r1, [pc, #68]	; (340 <Reset_Handler+0x60>)
 2fa:	428b      	cmp	r3, r1
 2fc:	d3f8      	bcc.n	2f0 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
 2fe:	4b11      	ldr	r3, [pc, #68]	; (344 <Reset_Handler+0x64>)
 300:	e002      	b.n	308 <Reset_Handler+0x28>
                *pDest++ = 0;
 302:	2200      	movs	r2, #0
 304:	601a      	str	r2, [r3, #0]
 306:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
 308:	4a0f      	ldr	r2, [pc, #60]	; (348 <Reset_Handler+0x68>)
 30a:	4293      	cmp	r3, r2
 30c:	d3f9      	bcc.n	302 <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
 30e:	4b0f      	ldr	r3, [pc, #60]	; (34c <Reset_Handler+0x6c>)
 310:	4a0f      	ldr	r2, [pc, #60]	; (350 <Reset_Handler+0x70>)
 312:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 316:	609a      	str	r2, [r3, #8]
        SCB->CPACR |=  (0xFu << 20);
 318:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 31c:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 320:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 324:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 328:	f3bf 8f6f 	isb	sy
        __libc_init_array();
 32c:	4b09      	ldr	r3, [pc, #36]	; (354 <Reset_Handler+0x74>)
 32e:	4798      	blx	r3
        main();
 330:	4b09      	ldr	r3, [pc, #36]	; (358 <Reset_Handler+0x78>)
 332:	4798      	blx	r3
 334:	e7fe      	b.n	334 <Reset_Handler+0x54>
 336:	bf00      	nop
 338:	20000000 	.word	0x20000000
 33c:	00000518 	.word	0x00000518
 340:	20000000 	.word	0x20000000
 344:	20000000 	.word	0x20000000
 348:	2000002c 	.word	0x2000002c
 34c:	e000ed00 	.word	0xe000ed00
 350:	00000000 	.word	0x00000000
 354:	000004b1 	.word	0x000004b1
 358:	00000495 	.word	0x00000495

0000035c <system_init>:
#include <peripheral_clk_config.h>
#include <utils.h>
#include <hal_init.h>

void system_init(void)
{
 35c:	b508      	push	{r3, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
 35e:	4b01      	ldr	r3, [pc, #4]	; (364 <system_init+0x8>)
 360:	4798      	blx	r3
 362:	bd08      	pop	{r3, pc}
 364:	00000369 	.word	0x00000369

00000368 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
 368:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
 36a:	4a09      	ldr	r2, [pc, #36]	; (390 <_init_chip+0x28>)
 36c:	8813      	ldrh	r3, [r2, #0]
 36e:	b29b      	uxth	r3, r3
 370:	8013      	strh	r3, [r2, #0]
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
 372:	4b08      	ldr	r3, [pc, #32]	; (394 <_init_chip+0x2c>)
 374:	4798      	blx	r3
	_oscctrl_init_sources();
 376:	4b08      	ldr	r3, [pc, #32]	; (398 <_init_chip+0x30>)
 378:	4798      	blx	r3
	_mclk_init();
 37a:	4b08      	ldr	r3, [pc, #32]	; (39c <_init_chip+0x34>)
 37c:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
 37e:	2002      	movs	r0, #2
 380:	4c07      	ldr	r4, [pc, #28]	; (3a0 <_init_chip+0x38>)
 382:	47a0      	blx	r4
#endif
	_oscctrl_init_referenced_generators();
 384:	4b07      	ldr	r3, [pc, #28]	; (3a4 <_init_chip+0x3c>)
 386:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
 388:	f640 70fd 	movw	r0, #4093	; 0xffd
 38c:	47a0      	blx	r4
 38e:	bd10      	pop	{r4, pc}
 390:	41004000 	.word	0x41004000
 394:	000003f5 	.word	0x000003f5
 398:	00000409 	.word	0x00000409
 39c:	000003e9 	.word	0x000003e9
 3a0:	000003a9 	.word	0x000003a9
 3a4:	0000040d 	.word	0x0000040d

000003a8 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
 3a8:	f010 0f01 	tst.w	r0, #1
 3ac:	d008      	beq.n	3c0 <_gclk_init_generators_by_fref+0x18>
}

static inline void hri_gclk_write_GENCTRL_reg(const void *const hw, uint8_t index, hri_gclk_genctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->GENCTRL[index].reg = data;
 3ae:	4a0b      	ldr	r2, [pc, #44]	; (3dc <_gclk_init_generators_by_fref+0x34>)
 3b0:	4b0b      	ldr	r3, [pc, #44]	; (3e0 <_gclk_init_generators_by_fref+0x38>)
 3b2:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
 3b4:	4b0a      	ldr	r3, [pc, #40]	; (3e0 <_gclk_init_generators_by_fref+0x38>)
 3b6:	685a      	ldr	r2, [r3, #4]
 3b8:	f643 73fd 	movw	r3, #16381	; 0x3ffd
 3bc:	421a      	tst	r2, r3
 3be:	d1f9      	bne.n	3b4 <_gclk_init_generators_by_fref+0xc>
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SOURCE);
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
 3c0:	f010 0f02 	tst.w	r0, #2
 3c4:	d008      	beq.n	3d8 <_gclk_init_generators_by_fref+0x30>
	((Gclk *)hw)->GENCTRL[index].reg = data;
 3c6:	4a07      	ldr	r2, [pc, #28]	; (3e4 <_gclk_init_generators_by_fref+0x3c>)
 3c8:	4b05      	ldr	r3, [pc, #20]	; (3e0 <_gclk_init_generators_by_fref+0x38>)
 3ca:	625a      	str	r2, [r3, #36]	; 0x24
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
 3cc:	4b04      	ldr	r3, [pc, #16]	; (3e0 <_gclk_init_generators_by_fref+0x38>)
 3ce:	685a      	ldr	r2, [r3, #4]
 3d0:	f643 73fd 	movw	r3, #16381	; 0x3ffd
 3d4:	421a      	tst	r2, r3
 3d6:	d1f9      	bne.n	3cc <_gclk_init_generators_by_fref+0x24>
 3d8:	4770      	bx	lr
 3da:	bf00      	nop
 3dc:	00010107 	.word	0x00010107
 3e0:	40001c00 	.word	0x40001c00
 3e4:	00010104 	.word	0x00010104

000003e8 <_mclk_init>:
}

static inline void hri_mclk_write_CPUDIV_reg(const void *const hw, hri_mclk_cpudiv_reg_t data)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->CPUDIV.reg = data;
 3e8:	2201      	movs	r2, #1
 3ea:	4b01      	ldr	r3, [pc, #4]	; (3f0 <_mclk_init+0x8>)
 3ec:	715a      	strb	r2, [r3, #5]
 3ee:	4770      	bx	lr
 3f0:	40000800 	.word	0x40000800

000003f4 <_osc32kctrl_init_sources>:
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
 3f4:	4b03      	ldr	r3, [pc, #12]	; (404 <_osc32kctrl_init_sources+0x10>)
 3f6:	69da      	ldr	r2, [r3, #28]
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
 3f8:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
 3fc:	61da      	str	r2, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
 3fe:	2201      	movs	r2, #1
 400:	741a      	strb	r2, [r3, #16]
 402:	4770      	bx	lr
 404:	40001400 	.word	0x40001400

00000408 <_oscctrl_init_sources>:

/**
 * \brief Initialize clock sources
 */
void _oscctrl_init_sources(void)
{
 408:	4770      	bx	lr
	...

0000040c <_oscctrl_init_referenced_generators>:

static inline void hri_oscctrl_write_DPLLRATIO_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllratio_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLRATIO.reg = data;
 40c:	4a0e      	ldr	r2, [pc, #56]	; (448 <_oscctrl_init_referenced_generators+0x3c>)
 40e:	4b0f      	ldr	r3, [pc, #60]	; (44c <_oscctrl_init_referenced_generators+0x40>)
 410:	635a      	str	r2, [r3, #52]	; 0x34
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
 412:	4b0e      	ldr	r3, [pc, #56]	; (44c <_oscctrl_init_referenced_generators+0x40>)
 414:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 416:	f013 0f06 	tst.w	r3, #6
 41a:	d1fa      	bne.n	412 <_oscctrl_init_referenced_generators+0x6>

static inline void hri_oscctrl_write_DPLLCTRLB_reg(const void *const hw, uint8_t submodule_index,
                                                   hri_oscctrl_dpllctrlb_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLB.reg = data;
 41c:	4b0b      	ldr	r3, [pc, #44]	; (44c <_oscctrl_init_referenced_generators+0x40>)
 41e:	2220      	movs	r2, #32
 420:	639a      	str	r2, [r3, #56]	; 0x38
	((Oscctrl *)hw)->Dpll[submodule_index].DPLLCTRLA.reg = data;
 422:	2202      	movs	r2, #2
 424:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	while (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSYNCBUSY.reg & reg) {
 428:	4b08      	ldr	r3, [pc, #32]	; (44c <_oscctrl_init_referenced_generators+0x40>)
 42a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 42c:	f013 0f02 	tst.w	r3, #2
 430:	d1fa      	bne.n	428 <_oscctrl_init_referenced_generators+0x1c>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_LOCK)
 432:	4b06      	ldr	r3, [pc, #24]	; (44c <_oscctrl_init_referenced_generators+0x40>)
 434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
#endif
#endif

#if CONF_FDPLL0_CONFIG == 1
#if CONF_FDPLL0_ENABLE == 1
	while (!(hri_oscctrl_get_DPLLSTATUS_LOCK_bit(hw, 0) || hri_oscctrl_get_DPLLSTATUS_CLKRDY_bit(hw, 0)))
 436:	f013 0f01 	tst.w	r3, #1
 43a:	d104      	bne.n	446 <_oscctrl_init_referenced_generators+0x3a>
	return (((Oscctrl *)hw)->Dpll[submodule_index].DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY)
 43c:	4b03      	ldr	r3, [pc, #12]	; (44c <_oscctrl_init_referenced_generators+0x40>)
 43e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 440:	f013 0f02 	tst.w	r3, #2
 444:	d0f5      	beq.n	432 <_oscctrl_init_referenced_generators+0x26>
 446:	4770      	bx	lr
 448:	000d0988 	.word	0x000d0988
 44c:	40001000 	.word	0x40001000

00000450 <RAMECC_Handler>:

/**
 * \internal RAMECC interrupt handler
 */
void RAMECC_Handler(void)
{
 450:	b500      	push	{lr}
 452:	b083      	sub	sp, #12
	return tmp;
}

static inline hri_ramecc_intflag_reg_t hri_ramecc_read_INTFLAG_reg(const void *const hw)
{
	return ((Ramecc *)hw)->INTFLAG.reg;
 454:	4b0d      	ldr	r3, [pc, #52]	; (48c <RAMECC_Handler+0x3c>)
 456:	789b      	ldrb	r3, [r3, #2]
 458:	b2db      	uxtb	r3, r3
	struct _ramecc_device *dev      = (struct _ramecc_device *)&device;
	volatile uint32_t      int_mask = hri_ramecc_read_INTFLAG_reg(RAMECC);
 45a:	9301      	str	r3, [sp, #4]

	if (int_mask & RAMECC_INTFLAG_DUALE && dev->ramecc_cb.dual_bit_err) {
 45c:	9b01      	ldr	r3, [sp, #4]
 45e:	f013 0f02 	tst.w	r3, #2
 462:	d006      	beq.n	472 <RAMECC_Handler+0x22>
 464:	4b0a      	ldr	r3, [pc, #40]	; (490 <RAMECC_Handler+0x40>)
 466:	681b      	ldr	r3, [r3, #0]
 468:	b11b      	cbz	r3, 472 <RAMECC_Handler+0x22>
	return tmp;
}

static inline hri_ramecc_erraddr_reg_t hri_ramecc_read_ERRADDR_reg(const void *const hw)
{
	return ((Ramecc *)hw)->ERRADDR.reg;
 46a:	4a08      	ldr	r2, [pc, #32]	; (48c <RAMECC_Handler+0x3c>)
 46c:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.dual_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
 46e:	4798      	blx	r3
 470:	e009      	b.n	486 <RAMECC_Handler+0x36>
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
 472:	9b01      	ldr	r3, [sp, #4]
 474:	f013 0f01 	tst.w	r3, #1
 478:	d005      	beq.n	486 <RAMECC_Handler+0x36>
 47a:	4b05      	ldr	r3, [pc, #20]	; (490 <RAMECC_Handler+0x40>)
 47c:	685b      	ldr	r3, [r3, #4]
 47e:	b113      	cbz	r3, 486 <RAMECC_Handler+0x36>
 480:	4a02      	ldr	r2, [pc, #8]	; (48c <RAMECC_Handler+0x3c>)
 482:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
 484:	4798      	blx	r3
	} else {
		return;
	}
}
 486:	b003      	add	sp, #12
 488:	f85d fb04 	ldr.w	pc, [sp], #4
 48c:	41020000 	.word	0x41020000
 490:	2000001c 	.word	0x2000001c

00000494 <main>:
#include <atmel_start.h>

int main(void)
{
 494:	b508      	push	{r3, lr}
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
 496:	4b04      	ldr	r3, [pc, #16]	; (4a8 <main+0x14>)
 498:	4798      	blx	r3
{
 49a:	2300      	movs	r3, #0
	/* Replace with your application code */
	
	long count = 0;
	
	while (1) {
		count = count + 1;
 49c:	3301      	adds	r3, #1
		
		if (count > 10000000)
 49e:	4a03      	ldr	r2, [pc, #12]	; (4ac <main+0x18>)
 4a0:	4293      	cmp	r3, r2
 4a2:	ddfb      	ble.n	49c <main+0x8>
 4a4:	e7f9      	b.n	49a <main+0x6>
 4a6:	bf00      	nop
 4a8:	000002d1 	.word	0x000002d1
 4ac:	00989680 	.word	0x00989680

000004b0 <__libc_init_array>:
 4b0:	b570      	push	{r4, r5, r6, lr}
 4b2:	4e0d      	ldr	r6, [pc, #52]	; (4e8 <__libc_init_array+0x38>)
 4b4:	4c0d      	ldr	r4, [pc, #52]	; (4ec <__libc_init_array+0x3c>)
 4b6:	1ba4      	subs	r4, r4, r6
 4b8:	10a4      	asrs	r4, r4, #2
 4ba:	2500      	movs	r5, #0
 4bc:	42a5      	cmp	r5, r4
 4be:	d109      	bne.n	4d4 <__libc_init_array+0x24>
 4c0:	4e0b      	ldr	r6, [pc, #44]	; (4f0 <__libc_init_array+0x40>)
 4c2:	4c0c      	ldr	r4, [pc, #48]	; (4f4 <__libc_init_array+0x44>)
 4c4:	f000 f818 	bl	4f8 <_init>
 4c8:	1ba4      	subs	r4, r4, r6
 4ca:	10a4      	asrs	r4, r4, #2
 4cc:	2500      	movs	r5, #0
 4ce:	42a5      	cmp	r5, r4
 4d0:	d105      	bne.n	4de <__libc_init_array+0x2e>
 4d2:	bd70      	pop	{r4, r5, r6, pc}
 4d4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 4d8:	4798      	blx	r3
 4da:	3501      	adds	r5, #1
 4dc:	e7ee      	b.n	4bc <__libc_init_array+0xc>
 4de:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 4e2:	4798      	blx	r3
 4e4:	3501      	adds	r5, #1
 4e6:	e7f2      	b.n	4ce <__libc_init_array+0x1e>
 4e8:	00000504 	.word	0x00000504
 4ec:	00000504 	.word	0x00000504
 4f0:	00000504 	.word	0x00000504
 4f4:	00000508 	.word	0x00000508

000004f8 <_init>:
 4f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 4fa:	bf00      	nop
 4fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 4fe:	bc08      	pop	{r3}
 500:	469e      	mov	lr, r3
 502:	4770      	bx	lr

00000504 <__init_array_start>:
 504:	00000289 	.word	0x00000289

00000508 <_fini>:
 508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 50a:	bf00      	nop
 50c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 50e:	bc08      	pop	{r3}
 510:	469e      	mov	lr, r3
 512:	4770      	bx	lr

00000514 <__fini_array_start>:
 514:	00000265 	.word	0x00000265
