
My Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000039c  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000000  20000000  20000000  0001039c  2**0
                  CONTENTS
  2 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
  3 .heap         00000204  2000001c  2000001c  00020000  2**0
                  ALLOC
  4 .stack        00000400  20000220  20000220  00020000  2**0
                  ALLOC
  5 .ARM.attributes 0000002c  00000000  00000000  0001039c  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  000103c8  2**0
                  CONTENTS, READONLY
  7 .debug_info   00003e4e  00000000  00000000  00010421  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000def  00000000  00000000  0001426f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000447  00000000  00000000  0001505e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000168  00000000  00000000  000154a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c8  00000000  00000000  0001560d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00016d13  00000000  00000000  000156d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000608f  00000000  00000000  0002c3e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000823de  00000000  00000000  00032477  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000001e4  00000000  00000000  000b4858  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
   0:	20 06 00 20 71 01 00 00 6f 01 00 00 6f 01 00 00      .. q...o...o...
	...
  2c:	6f 01 00 00 00 00 00 00 00 00 00 00 6f 01 00 00     o...........o...
  3c:	6f 01 00 00 6f 01 00 00 6f 01 00 00 6f 01 00 00     o...o...o...o...
  4c:	6f 01 00 00 6f 01 00 00 6f 01 00 00 6f 01 00 00     o...o...o...o...
  5c:	6f 01 00 00 6f 01 00 00 6f 01 00 00 6f 01 00 00     o...o...o...o...
  6c:	6f 01 00 00 6f 01 00 00 6f 01 00 00 6f 01 00 00     o...o...o...o...
  7c:	6f 01 00 00 6f 01 00 00 6f 01 00 00 6f 01 00 00     o...o...o...o...
  8c:	6f 01 00 00 6f 01 00 00 6f 01 00 00 6f 01 00 00     o...o...o...o...
  9c:	6f 01 00 00 6f 01 00 00 6f 01 00 00 6f 01 00 00     o...o...o...o...
  ac:	6f 01 00 00 6f 01 00 00 6f 01 00 00 6f 01 00 00     o...o...o...o...
  bc:	6f 01 00 00 6f 01 00 00 6f 01 00 00 6f 01 00 00     o...o...o...o...
  cc:	6f 01 00 00 6f 01 00 00 6f 01 00 00 6f 01 00 00     o...o...o...o...
  dc:	6f 01 00 00 6f 01 00 00 6f 01 00 00 6f 01 00 00     o...o...o...o...
  ec:	6f 01 00 00 6f 01 00 00                             o...o...

000000f4 <__do_global_dtors_aux>:
  f4:	b510      	push	{r4, lr}
  f6:	f240 0400 	movw	r4, #0
  fa:	f2c2 0400 	movt	r4, #8192	; 0x2000
  fe:	7823      	ldrb	r3, [r4, #0]
 100:	b963      	cbnz	r3, 11c <__do_global_dtors_aux+0x28>
 102:	f240 0300 	movw	r3, #0
 106:	f2c0 0300 	movt	r3, #0
 10a:	b12b      	cbz	r3, 118 <__do_global_dtors_aux+0x24>
 10c:	f240 309c 	movw	r0, #924	; 0x39c
 110:	f2c0 0000 	movt	r0, #0
 114:	e000      	b.n	118 <__do_global_dtors_aux+0x24>
 116:	bf00      	nop
 118:	2301      	movs	r3, #1
 11a:	7023      	strb	r3, [r4, #0]
 11c:	bd10      	pop	{r4, pc}
 11e:	46c0      	nop			; (mov r8, r8)

00000120 <frame_dummy>:
 120:	f240 0300 	movw	r3, #0
 124:	f2c0 0300 	movt	r3, #0
 128:	b510      	push	{r4, lr}
 12a:	b14b      	cbz	r3, 140 <frame_dummy+0x20>
 12c:	f240 0104 	movw	r1, #4
 130:	f240 309c 	movw	r0, #924	; 0x39c
 134:	f2c2 0100 	movt	r1, #8192	; 0x2000
 138:	f2c0 0000 	movt	r0, #0
 13c:	e000      	b.n	140 <frame_dummy+0x20>
 13e:	bf00      	nop
 140:	f240 309c 	movw	r0, #924	; 0x39c
 144:	f2c0 0000 	movt	r0, #0
 148:	6803      	ldr	r3, [r0, #0]
 14a:	b903      	cbnz	r3, 14e <frame_dummy+0x2e>
 14c:	bd10      	pop	{r4, pc}
 14e:	f240 0300 	movw	r3, #0
 152:	f2c0 0300 	movt	r3, #0
 156:	2b00      	cmp	r3, #0
 158:	d0f8      	beq.n	14c <frame_dummy+0x2c>
 15a:	4798      	blx	r3
 15c:	e7f6      	b.n	14c <frame_dummy+0x2c>
 15e:	46c0      	nop			; (mov r8, r8)

00000160 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
 160:	b510      	push	{r4, lr}
	system_init();
 162:	f240 13f5 	movw	r3, #501	; 0x1f5
 166:	f2c0 0300 	movt	r3, #0
 16a:	4798      	blx	r3
}
 16c:	bd10      	pop	{r4, pc}

0000016e <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
 16e:	e7fe      	b.n	16e <Dummy_Handler>

00000170 <Reset_Handler>:
{
 170:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
 172:	f240 329c 	movw	r2, #924	; 0x39c
 176:	f2c0 0200 	movt	r2, #0
 17a:	f240 0300 	movw	r3, #0
 17e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 182:	429a      	cmp	r2, r3
 184:	d012      	beq.n	1ac <Reset_Handler+0x3c>
 186:	f240 0300 	movw	r3, #0
 18a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 18e:	f240 329c 	movw	r2, #924	; 0x39c
 192:	f2c0 0200 	movt	r2, #0
 196:	e003      	b.n	1a0 <Reset_Handler+0x30>
                        *pDest++ = *pSrc++;
 198:	6811      	ldr	r1, [r2, #0]
 19a:	6019      	str	r1, [r3, #0]
 19c:	3304      	adds	r3, #4
 19e:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
 1a0:	f240 0100 	movw	r1, #0
 1a4:	f2c2 0100 	movt	r1, #8192	; 0x2000
 1a8:	428b      	cmp	r3, r1
 1aa:	d3f5      	bcc.n	198 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
 1ac:	f240 0300 	movw	r3, #0
 1b0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 1b4:	e002      	b.n	1bc <Reset_Handler+0x4c>
                *pDest++ = 0;
 1b6:	2200      	movs	r2, #0
 1b8:	601a      	str	r2, [r3, #0]
 1ba:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
 1bc:	f240 021c 	movw	r2, #28
 1c0:	f2c2 0200 	movt	r2, #8192	; 0x2000
 1c4:	4293      	cmp	r3, r2
 1c6:	d3f6      	bcc.n	1b6 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
 1c8:	f240 0300 	movw	r3, #0
 1cc:	f2c0 0300 	movt	r3, #0
 1d0:	227f      	movs	r2, #127	; 0x7f
 1d2:	4393      	bics	r3, r2
 1d4:	f64e 5200 	movw	r2, #60672	; 0xed00
 1d8:	f2ce 0200 	movt	r2, #57344	; 0xe000
 1dc:	6093      	str	r3, [r2, #8]
        __libc_init_array();
 1de:	f240 332d 	movw	r3, #813	; 0x32d
 1e2:	f2c0 0300 	movt	r3, #0
 1e6:	4798      	blx	r3
        main();
 1e8:	f240 3311 	movw	r3, #785	; 0x311
 1ec:	f2c0 0300 	movt	r3, #0
 1f0:	4798      	blx	r3
 1f2:	e7fe      	b.n	1f2 <Reset_Handler+0x82>

000001f4 <system_init>:
#include <peripheral_clk_config.h>
#include <utils.h>
#include <hal_init.h>

void system_init(void)
{
 1f4:	b510      	push	{r4, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
 1f6:	f240 2303 	movw	r3, #515	; 0x203
 1fa:	f2c0 0300 	movt	r3, #0
 1fe:	4798      	blx	r3
	init_mcu();
}
 200:	bd10      	pop	{r4, pc}

00000202 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
 202:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
 204:	f244 0300 	movw	r3, #16384	; 0x4000
 208:	f2c4 1300 	movt	r3, #16640	; 0x4100
 20c:	685a      	ldr	r2, [r3, #4]
 20e:	605a      	str	r2, [r3, #4]
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_set_performance_level(CONF_PERFORMANCE_LEVEL);
 210:	2000      	movs	r0, #0
 212:	f240 23d7 	movw	r3, #727	; 0x2d7
 216:	f2c0 0300 	movt	r3, #0
 21a:	4798      	blx	r3

	_osc32kctrl_init_sources();
 21c:	f240 2389 	movw	r3, #649	; 0x289
 220:	f2c0 0300 	movt	r3, #0
 224:	4798      	blx	r3
	_oscctrl_init_sources();
 226:	f240 23a5 	movw	r3, #677	; 0x2a5
 22a:	f2c0 0300 	movt	r3, #0
 22e:	4798      	blx	r3
	_mclk_init();
 230:	f240 237b 	movw	r3, #635	; 0x27b
 234:	f2c0 0300 	movt	r3, #0
 238:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_oscctrl_init_referenced_generators();
 23a:	f240 23d5 	movw	r3, #725	; 0x2d5
 23e:	f2c0 0300 	movt	r3, #0
 242:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
 244:	201f      	movs	r0, #31
 246:	f240 2353 	movw	r3, #595	; 0x253
 24a:	f2c0 0300 	movt	r3, #0
 24e:	4798      	blx	r3
#endif

#if (CONF_PORT_EVCTRL_PORT_0 | CONF_PORT_EVCTRL_PORT_1 | CONF_PORT_EVCTRL_PORT_2 | CONF_PORT_EVCTRL_PORT_3)
	_port_event_init();
#endif
}
 250:	bd10      	pop	{r4, pc}

00000252 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
 252:	07c3      	lsls	r3, r0, #31
 254:	d510      	bpl.n	278 <_gclk_init_generators_by_fref+0x26>
}

static inline void hri_gclk_write_GENCTRL_reg(const void *const hw, uint8_t index, hri_gclk_genctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->GENCTRL[index].reg = data;
 256:	f641 4300 	movw	r3, #7168	; 0x1c00
 25a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 25e:	f240 1205 	movw	r2, #261	; 0x105
 262:	f2c0 0201 	movt	r2, #1
 266:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
 268:	f641 4300 	movw	r3, #7168	; 0x1c00
 26c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 270:	685b      	ldr	r3, [r3, #4]
 272:	227d      	movs	r2, #125	; 0x7d
 274:	421a      	tst	r2, r3
 276:	d1f7      	bne.n	268 <_gclk_init_generators_by_fref+0x16>
		        | (CONF_GCLK_GEN_4_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_4_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_4_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_4_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_4_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_4_SOURCE);
	}
#endif
}
 278:	4770      	bx	lr

0000027a <_mclk_init>:
}

static inline void hri_mclk_write_CPUDIV_reg(const void *const hw, hri_mclk_cpudiv_reg_t data)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->CPUDIV.reg = data;
 27a:	f640 0300 	movw	r3, #2048	; 0x800
 27e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 282:	2201      	movs	r2, #1
 284:	711a      	strb	r2, [r3, #4]
 */
void _mclk_init(void)
{
	void *hw = (void *)MCLK;
	hri_mclk_write_CPUDIV_reg(hw, MCLK_CPUDIV_CPUDIV(CONF_MCLK_CPUDIV));
}
 286:	4770      	bx	lr

00000288 <_osc32kctrl_init_sources>:
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
 288:	f241 4300 	movw	r3, #5120	; 0x1400
 28c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 290:	69da      	ldr	r2, [r3, #28]
	tmp = (tmp & OSC32KCTRL_OSCULP32K_CALIB_Msk) >> OSC32KCTRL_OSCULP32K_CALIB_Pos;
 292:	0a12      	lsrs	r2, r2, #8
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSC32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSC32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
 294:	0212      	lsls	r2, r2, #8
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
 296:	f641 7100 	movw	r1, #7936	; 0x1f00
 29a:	400a      	ands	r2, r1
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
 29c:	61da      	str	r2, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
 29e:	2200      	movs	r2, #0
 2a0:	741a      	strb	r2, [r3, #16]
#endif
#endif

	hri_osc32kctrl_write_RTCCTRL_reg(hw, OSC32KCTRL_RTCCTRL_RTCSEL(CONF_RTCCTRL));
	(void)calib;
}
 2a2:	4770      	bx	lr

000002a4 <_oscctrl_init_sources>:
}

static inline void hri_oscctrl_write_OSC16MCTRL_reg(const void *const hw, hri_oscctrl_osc16mctrl_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->OSC16MCTRL.reg = data;
 2a4:	f241 0300 	movw	r3, #4096	; 0x1000
 2a8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 2ac:	2206      	movs	r2, #6
 2ae:	761a      	strb	r2, [r3, #24]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_OSC16MRDY_Msk) >> OSCCTRL_STATUS_OSC16MRDY_Pos;
 2b0:	f241 0300 	movw	r3, #4096	; 0x1000
 2b4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 2b8:	691b      	ldr	r3, [r3, #16]
#endif
#endif

#if CONF_OSC16M_CONFIG == 1
#if CONF_OSC16M_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_OSC16MRDY_bit(hw))
 2ba:	06db      	lsls	r3, r3, #27
 2bc:	d5f8      	bpl.n	2b0 <_oscctrl_init_sources+0xc>
	((Oscctrl *)hw)->OSC16MCTRL.reg |= OSCCTRL_OSC16MCTRL_ONDEMAND_Msk;
 2be:	f241 0200 	movw	r2, #4096	; 0x1000
 2c2:	f2c4 0200 	movt	r2, #16384	; 0x4000
 2c6:	7e13      	ldrb	r3, [r2, #24]
 2c8:	2180      	movs	r1, #128	; 0x80
 2ca:	4249      	negs	r1, r1
 2cc:	430b      	orrs	r3, r1
 2ce:	b2db      	uxtb	r3, r3
 2d0:	7613      	strb	r3, [r2, #24]
#if CONF_OSC16M_ONDEMAND == 1
	hri_oscctrl_set_OSC16MCTRL_ONDEMAND_bit(hw);
#endif
#endif
	(void)hw;
}
 2d2:	4770      	bx	lr

000002d4 <_oscctrl_init_referenced_generators>:
#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_read_SYNCBUSY_reg(GCLK))
		;
#endif
	(void)hw, (void)tmp;
}
 2d4:	4770      	bx	lr

000002d6 <_set_performance_level>:
}

static inline hri_pm_plcfg_reg_t hri_pm_get_PLCFG_PLSEL_bf(const void *const hw, hri_pm_plcfg_reg_t mask)
{
	uint8_t tmp;
	tmp = ((Pm *)hw)->PLCFG.reg;
 2d6:	f240 4300 	movw	r3, #1024	; 0x400
 2da:	f2c4 0300 	movt	r3, #16384	; 0x4000
 2de:	789b      	ldrb	r3, [r3, #2]
	tmp = (tmp & PM_PLCFG_PLSEL(mask)) >> PM_PLCFG_PLSEL_Pos;
 2e0:	2203      	movs	r2, #3
 2e2:	4013      	ands	r3, r2
/**
 * \brief Set performance level
 */
void _set_performance_level(const uint8_t level)
{
	if (hri_pm_get_PLCFG_PLSEL_bf(PM, PM_PLCFG_PLSEL_Msk) != level) {
 2e4:	4298      	cmp	r0, r3
 2e6:	d012      	beq.n	30e <_set_performance_level+0x38>
	((Pm *)hw)->INTFLAG.reg = mask;
 2e8:	f240 4300 	movw	r3, #1024	; 0x400
 2ec:	f2c4 0300 	movt	r3, #16384	; 0x4000
 2f0:	32fc      	adds	r2, #252	; 0xfc
 2f2:	719a      	strb	r2, [r3, #6]

static inline void hri_pm_write_PLCFG_PLSEL_bf(const void *const hw, hri_pm_plcfg_reg_t data)
{
	uint8_t tmp;
	PM_CRITICAL_SECTION_ENTER();
	tmp = ((Pm *)hw)->PLCFG.reg;
 2f4:	789a      	ldrb	r2, [r3, #2]
	tmp &= ~PM_PLCFG_PLSEL_Msk;
 2f6:	2103      	movs	r1, #3
 2f8:	438a      	bics	r2, r1
	tmp |= PM_PLCFG_PLSEL(data);
 2fa:	4008      	ands	r0, r1
 2fc:	4310      	orrs	r0, r2
	((Pm *)hw)->PLCFG.reg = tmp;
 2fe:	7098      	strb	r0, [r3, #2]
	return ((Pm *)hw)->INTFLAG.reg;
 300:	f240 4300 	movw	r3, #1024	; 0x400
 304:	f2c4 0300 	movt	r3, #16384	; 0x4000
 308:	799b      	ldrb	r3, [r3, #6]
		hri_pm_clear_INTFLAG_reg(PM, 0xFF);
		hri_pm_write_PLCFG_PLSEL_bf(PM, level);
		while (!hri_pm_read_INTFLAG_reg(PM))
 30a:	2b00      	cmp	r3, #0
 30c:	d0f8      	beq.n	300 <_set_performance_level+0x2a>
			;
	}
}
 30e:	4770      	bx	lr

00000310 <main>:
#include <atmel_start.h>

int main(void)
{
 310:	b500      	push	{lr}
 312:	b083      	sub	sp, #12
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
 314:	f240 1361 	movw	r3, #353	; 0x161
 318:	f2c0 0300 	movt	r3, #0
 31c:	4798      	blx	r3

	/* Replace with your application code */
	volatile long count = 0;
 31e:	2300      	movs	r3, #0
 320:	9301      	str	r3, [sp, #4]
	while (1) {
		count = count + 1;
 322:	9b01      	ldr	r3, [sp, #4]
 324:	3301      	adds	r3, #1
 326:	9301      	str	r3, [sp, #4]
 328:	e7fb      	b.n	322 <main+0x12>
	...

0000032c <__libc_init_array>:
 32c:	b570      	push	{r4, r5, r6, lr}
 32e:	2500      	movs	r5, #0
 330:	4b0e      	ldr	r3, [pc, #56]	; (36c <__libc_init_array+0x40>)
 332:	4c0f      	ldr	r4, [pc, #60]	; (370 <__libc_init_array+0x44>)
 334:	1ae4      	subs	r4, r4, r3
 336:	10a4      	asrs	r4, r4, #2
 338:	42a5      	cmp	r5, r4
 33a:	d109      	bne.n	350 <__libc_init_array+0x24>
 33c:	2500      	movs	r5, #0
 33e:	f000 f81d 	bl	37c <_init>
 342:	4c0c      	ldr	r4, [pc, #48]	; (374 <__libc_init_array+0x48>)
 344:	4b0c      	ldr	r3, [pc, #48]	; (378 <__libc_init_array+0x4c>)
 346:	1ae4      	subs	r4, r4, r3
 348:	10a4      	asrs	r4, r4, #2
 34a:	42a5      	cmp	r5, r4
 34c:	d107      	bne.n	35e <__libc_init_array+0x32>
 34e:	bd70      	pop	{r4, r5, r6, pc}
 350:	4a06      	ldr	r2, [pc, #24]	; (36c <__libc_init_array+0x40>)
 352:	00ab      	lsls	r3, r5, #2
 354:	189b      	adds	r3, r3, r2
 356:	681b      	ldr	r3, [r3, #0]
 358:	4798      	blx	r3
 35a:	3501      	adds	r5, #1
 35c:	e7ec      	b.n	338 <__libc_init_array+0xc>
 35e:	4a06      	ldr	r2, [pc, #24]	; (378 <__libc_init_array+0x4c>)
 360:	00ab      	lsls	r3, r5, #2
 362:	189b      	adds	r3, r3, r2
 364:	681b      	ldr	r3, [r3, #0]
 366:	4798      	blx	r3
 368:	3501      	adds	r5, #1
 36a:	e7ee      	b.n	34a <__libc_init_array+0x1e>
 36c:	00000388 	.word	0x00000388
 370:	00000388 	.word	0x00000388
 374:	0000038c 	.word	0x0000038c
 378:	00000388 	.word	0x00000388

0000037c <_init>:
 37c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 37e:	46c0      	nop			; (mov r8, r8)
 380:	bcf8      	pop	{r3, r4, r5, r6, r7}
 382:	bc08      	pop	{r3}
 384:	469e      	mov	lr, r3
 386:	4770      	bx	lr

00000388 <__init_array_start>:
 388:	00000121 	.word	0x00000121

0000038c <_fini>:
 38c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 38e:	46c0      	nop			; (mov r8, r8)
 390:	bcf8      	pop	{r3, r4, r5, r6, r7}
 392:	bc08      	pop	{r3}
 394:	469e      	mov	lr, r3
 396:	4770      	bx	lr

00000398 <__fini_array_start>:
 398:	000000f5 	.word	0x000000f5
