
DasAltimeter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001ee8  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000438  20000000  00001ee8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000001a0  20000440  00002330  00020440  2**4
                  ALLOC
  3 .stack        00002000  200005e0  000024d0  00020440  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020438  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020460  2**0
                  CONTENTS, READONLY
  6 .debug_info   00011032  00000000  00000000  000204b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001321  00000000  00000000  000314eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000131b  00000000  00000000  0003280c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000220  00000000  00000000  00033b27  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000001c0  00000000  00000000  00033d47  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001386c  00000000  00000000  00033f07  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00004b6d  00000000  00000000  00047773  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00071885  00000000  00000000  0004c2e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000007b4  00000000  00000000  000bdb68  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	200025e0 	.word	0x200025e0
       4:	00000119 	.word	0x00000119
       8:	00000115 	.word	0x00000115
       c:	00000115 	.word	0x00000115
	...
      2c:	00000115 	.word	0x00000115
	...
      38:	00000115 	.word	0x00000115
      3c:	00000115 	.word	0x00000115
      40:	00000115 	.word	0x00000115
      44:	00000115 	.word	0x00000115
      48:	00000115 	.word	0x00000115
      4c:	00000115 	.word	0x00000115
      50:	00000115 	.word	0x00000115
      54:	00000115 	.word	0x00000115
      58:	00000115 	.word	0x00000115
      5c:	00000115 	.word	0x00000115
      60:	00000115 	.word	0x00000115
      64:	00000115 	.word	0x00000115
      68:	00000115 	.word	0x00000115
      6c:	00000115 	.word	0x00000115
      70:	00000115 	.word	0x00000115
      74:	00000115 	.word	0x00000115
      78:	00000115 	.word	0x00000115
      7c:	00000115 	.word	0x00000115
      80:	00000115 	.word	0x00000115
      84:	00000115 	.word	0x00000115
      88:	00000115 	.word	0x00000115
      8c:	00000115 	.word	0x00000115
      90:	00000115 	.word	0x00000115
	...
      9c:	00000115 	.word	0x00000115
      a0:	00000115 	.word	0x00000115
      a4:	00000115 	.word	0x00000115
      a8:	00000115 	.word	0x00000115
      ac:	00000115 	.word	0x00000115
      b0:	00000000 	.word	0x00000000

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000440 	.word	0x20000440
      d4:	00000000 	.word	0x00000000
      d8:	00001ee8 	.word	0x00001ee8

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000444 	.word	0x20000444
     108:	00001ee8 	.word	0x00001ee8
     10c:	00001ee8 	.word	0x00001ee8
     110:	00000000 	.word	0x00000000

00000114 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     114:	e7fe      	b.n	114 <Dummy_Handler>
     116:	46c0      	nop			; (mov r8, r8)

00000118 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
     118:	b570      	push	{r4, r5, r6, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
     11a:	4b2e      	ldr	r3, [pc, #184]	; (1d4 <Reset_Handler+0xbc>)
     11c:	4a2e      	ldr	r2, [pc, #184]	; (1d8 <Reset_Handler+0xc0>)
     11e:	429a      	cmp	r2, r3
     120:	d003      	beq.n	12a <Reset_Handler+0x12>
                for (; pDest < &_erelocate;) {
     122:	4b2e      	ldr	r3, [pc, #184]	; (1dc <Reset_Handler+0xc4>)
     124:	4a2b      	ldr	r2, [pc, #172]	; (1d4 <Reset_Handler+0xbc>)
     126:	429a      	cmp	r2, r3
     128:	d304      	bcc.n	134 <Reset_Handler+0x1c>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     12a:	4b2d      	ldr	r3, [pc, #180]	; (1e0 <Reset_Handler+0xc8>)
     12c:	4a2d      	ldr	r2, [pc, #180]	; (1e4 <Reset_Handler+0xcc>)
     12e:	429a      	cmp	r2, r3
     130:	d310      	bcc.n	154 <Reset_Handler+0x3c>
     132:	e01e      	b.n	172 <Reset_Handler+0x5a>
     134:	4a2c      	ldr	r2, [pc, #176]	; (1e8 <Reset_Handler+0xd0>)
     136:	4b29      	ldr	r3, [pc, #164]	; (1dc <Reset_Handler+0xc4>)
     138:	3303      	adds	r3, #3
     13a:	1a9b      	subs	r3, r3, r2
     13c:	089b      	lsrs	r3, r3, #2
     13e:	3301      	adds	r3, #1
     140:	009b      	lsls	r3, r3, #2
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
     142:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
     144:	4823      	ldr	r0, [pc, #140]	; (1d4 <Reset_Handler+0xbc>)
     146:	4924      	ldr	r1, [pc, #144]	; (1d8 <Reset_Handler+0xc0>)
     148:	588c      	ldr	r4, [r1, r2]
     14a:	5084      	str	r4, [r0, r2]
     14c:	3204      	adds	r2, #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
     14e:	429a      	cmp	r2, r3
     150:	d1fa      	bne.n	148 <Reset_Handler+0x30>
     152:	e7ea      	b.n	12a <Reset_Handler+0x12>
     154:	4a25      	ldr	r2, [pc, #148]	; (1ec <Reset_Handler+0xd4>)
     156:	4b22      	ldr	r3, [pc, #136]	; (1e0 <Reset_Handler+0xc8>)
     158:	3303      	adds	r3, #3
     15a:	1a9b      	subs	r3, r3, r2
     15c:	089b      	lsrs	r3, r3, #2
     15e:	3301      	adds	r3, #1
     160:	009b      	lsls	r3, r3, #2
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     162:	2200      	movs	r2, #0
                *pDest++ = 0;
     164:	481f      	ldr	r0, [pc, #124]	; (1e4 <Reset_Handler+0xcc>)
     166:	2100      	movs	r1, #0
     168:	1814      	adds	r4, r2, r0
     16a:	6021      	str	r1, [r4, #0]
     16c:	3204      	adds	r2, #4
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     16e:	429a      	cmp	r2, r3
     170:	d1fa      	bne.n	168 <Reset_Handler+0x50>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     172:	4a1f      	ldr	r2, [pc, #124]	; (1f0 <Reset_Handler+0xd8>)
     174:	21ff      	movs	r1, #255	; 0xff
     176:	4b1f      	ldr	r3, [pc, #124]	; (1f4 <Reset_Handler+0xdc>)
     178:	438b      	bics	r3, r1
     17a:	6093      	str	r3, [r2, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     17c:	39fd      	subs	r1, #253	; 0xfd
     17e:	2390      	movs	r3, #144	; 0x90
     180:	005b      	lsls	r3, r3, #1
     182:	4a1d      	ldr	r2, [pc, #116]	; (1f8 <Reset_Handler+0xe0>)
     184:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     186:	481d      	ldr	r0, [pc, #116]	; (1fc <Reset_Handler+0xe4>)
     188:	78c3      	ldrb	r3, [r0, #3]
     18a:	2403      	movs	r4, #3
     18c:	43a3      	bics	r3, r4
     18e:	2202      	movs	r2, #2
     190:	4313      	orrs	r3, r2
     192:	70c3      	strb	r3, [r0, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     194:	78c3      	ldrb	r3, [r0, #3]
     196:	260c      	movs	r6, #12
     198:	43b3      	bics	r3, r6
     19a:	2108      	movs	r1, #8
     19c:	430b      	orrs	r3, r1
     19e:	70c3      	strb	r3, [r0, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
     1a0:	4b17      	ldr	r3, [pc, #92]	; (200 <Reset_Handler+0xe8>)
     1a2:	7b98      	ldrb	r0, [r3, #14]
     1a4:	2530      	movs	r5, #48	; 0x30
     1a6:	43a8      	bics	r0, r5
     1a8:	0005      	movs	r5, r0
     1aa:	2020      	movs	r0, #32
     1ac:	4328      	orrs	r0, r5
     1ae:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     1b0:	7b98      	ldrb	r0, [r3, #14]
     1b2:	43b0      	bics	r0, r6
     1b4:	4301      	orrs	r1, r0
     1b6:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     1b8:	7b99      	ldrb	r1, [r3, #14]
     1ba:	43a1      	bics	r1, r4
     1bc:	430a      	orrs	r2, r1
     1be:	739a      	strb	r2, [r3, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
     1c0:	4a10      	ldr	r2, [pc, #64]	; (204 <Reset_Handler+0xec>)
     1c2:	6851      	ldr	r1, [r2, #4]
     1c4:	2380      	movs	r3, #128	; 0x80
     1c6:	430b      	orrs	r3, r1
     1c8:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
     1ca:	4b0f      	ldr	r3, [pc, #60]	; (208 <Reset_Handler+0xf0>)
     1cc:	4798      	blx	r3

        /* Branch to main function */
        main();
     1ce:	4b0f      	ldr	r3, [pc, #60]	; (20c <Reset_Handler+0xf4>)
     1d0:	4798      	blx	r3
     1d2:	e7fe      	b.n	1d2 <Reset_Handler+0xba>
     1d4:	20000000 	.word	0x20000000
     1d8:	00001ee8 	.word	0x00001ee8
     1dc:	20000438 	.word	0x20000438
     1e0:	200005e0 	.word	0x200005e0
     1e4:	20000440 	.word	0x20000440
     1e8:	20000004 	.word	0x20000004
     1ec:	20000444 	.word	0x20000444
     1f0:	e000ed00 	.word	0xe000ed00
     1f4:	00000000 	.word	0x00000000
     1f8:	41007000 	.word	0x41007000
     1fc:	41005000 	.word	0x41005000
     200:	41004800 	.word	0x41004800
     204:	41004000 	.word	0x41004000
     208:	00001aad 	.word	0x00001aad
     20c:	000003b5 	.word	0x000003b5

00000210 <SystemInit>:
 *         Initialize the System and update the SystemCoreClock variable.
 */
void SystemInit(void)
{
	// Keep the default device state after reset
	SystemCoreClock = __SYSTEM_CLOCK;
     210:	4a01      	ldr	r2, [pc, #4]	; (218 <SystemInit+0x8>)
     212:	4b02      	ldr	r3, [pc, #8]	; (21c <SystemInit+0xc>)
     214:	601a      	str	r2, [r3, #0]
	return;
}
     216:	4770      	bx	lr
     218:	000f4240 	.word	0x000f4240
     21c:	20000000 	.word	0x20000000

00000220 <init>:
#include <boardDefines.h>




void init() {
     220:	b5f0      	push	{r4, r5, r6, r7, lr}
     222:	465f      	mov	r7, fp
     224:	4656      	mov	r6, sl
     226:	464d      	mov	r5, r9
     228:	4644      	mov	r4, r8
     22a:	b4f0      	push	{r4, r5, r6, r7}
     22c:	b083      	sub	sp, #12
    SystemInit();
     22e:	4b57      	ldr	r3, [pc, #348]	; (38c <init+0x16c>)
     230:	4798      	blx	r3
    GclkInit();
     232:	4b57      	ldr	r3, [pc, #348]	; (390 <init+0x170>)
     234:	4798      	blx	r3
    delayInit();
     236:	4b57      	ldr	r3, [pc, #348]	; (394 <init+0x174>)
     238:	4798      	blx	r3
    adcInit();
     23a:	4b57      	ldr	r3, [pc, #348]	; (398 <init+0x178>)
     23c:	4798      	blx	r3
    dmaInit();
     23e:	4b57      	ldr	r3, [pc, #348]	; (39c <init+0x17c>)
     240:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     242:	4b57      	ldr	r3, [pc, #348]	; (3a0 <init+0x180>)
     244:	2240      	movs	r2, #64	; 0x40
     246:	601a      	str	r2, [r3, #0]
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     248:	21c1      	movs	r1, #193	; 0xc1
     24a:	0089      	lsls	r1, r1, #2
     24c:	5858      	ldr	r0, [r3, r1]
     24e:	4a55      	ldr	r2, [pc, #340]	; (3a4 <init+0x184>)
     250:	4002      	ands	r2, r0
     252:	505a      	str	r2, [r3, r1]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     254:	4b54      	ldr	r3, [pc, #336]	; (3a8 <init+0x188>)
     256:	205c      	movs	r0, #92	; 0x5c
     258:	5c19      	ldrb	r1, [r3, r0]
     25a:	2201      	movs	r2, #1
     25c:	4391      	bics	r1, r2
     25e:	5419      	strb	r1, [r3, r0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     260:	2180      	movs	r1, #128	; 0x80
     262:	0549      	lsls	r1, r1, #21
     264:	6099      	str	r1, [r3, #8]

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     266:	2432      	movs	r4, #50	; 0x32
     268:	5d19      	ldrb	r1, [r3, r4]
     26a:	384d      	subs	r0, #77	; 0x4d
     26c:	4683      	mov	fp, r0
     26e:	260f      	movs	r6, #15
     270:	4031      	ands	r1, r6
     272:	2010      	movs	r0, #16
     274:	4301      	orrs	r1, r0
     276:	5519      	strb	r1, [r3, r4]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     278:	3413      	adds	r4, #19
     27a:	5d18      	ldrb	r0, [r3, r4]
     27c:	2101      	movs	r1, #1
     27e:	4308      	orrs	r0, r1
     280:	5518      	strb	r0, [r3, r4]

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     282:	3c11      	subs	r4, #17
     284:	5d18      	ldrb	r0, [r3, r4]
     286:	465d      	mov	r5, fp
     288:	43a8      	bics	r0, r5
     28a:	4308      	orrs	r0, r1
     28c:	5518      	strb	r0, [r3, r4]
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     28e:	3414      	adds	r4, #20
     290:	5d18      	ldrb	r0, [r3, r4]
     292:	4308      	orrs	r0, r1
     294:	5518      	strb	r0, [r3, r4]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     296:	3410      	adds	r4, #16
     298:	5d18      	ldrb	r0, [r3, r4]
     29a:	4390      	bics	r0, r2
     29c:	5518      	strb	r0, [r3, r4]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     29e:	2080      	movs	r0, #128	; 0x80
     2a0:	0440      	lsls	r0, r0, #17
     2a2:	6098      	str	r0, [r3, #8]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     2a4:	6158      	str	r0, [r3, #20]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     2a6:	353d      	adds	r5, #61	; 0x3d
     2a8:	5d58      	ldrb	r0, [r3, r5]
     2aa:	4390      	bics	r0, r2
     2ac:	5558      	strb	r0, [r3, r5]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     2ae:	2080      	movs	r0, #128	; 0x80
     2b0:	0140      	lsls	r0, r0, #5
     2b2:	6098      	str	r0, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     2b4:	204d      	movs	r0, #77	; 0x4d
     2b6:	4680      	mov	r8, r0
     2b8:	5c18      	ldrb	r0, [r3, r0]
     2ba:	4390      	bics	r0, r2
     2bc:	4644      	mov	r4, r8
     2be:	5518      	strb	r0, [r3, r4]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     2c0:	2080      	movs	r0, #128	; 0x80
     2c2:	0180      	lsls	r0, r0, #6
     2c4:	6098      	str	r0, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     2c6:	204f      	movs	r0, #79	; 0x4f
     2c8:	5c1c      	ldrb	r4, [r3, r0]
     2ca:	4394      	bics	r4, r2
     2cc:	541c      	strb	r4, [r3, r0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     2ce:	5c1c      	ldrb	r4, [r3, r0]
     2d0:	2702      	movs	r7, #2
     2d2:	46bc      	mov	ip, r7
     2d4:	4667      	mov	r7, ip
     2d6:	433c      	orrs	r4, r7
     2d8:	541c      	strb	r4, [r3, r0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     2da:	2480      	movs	r4, #128	; 0x80
     2dc:	0224      	lsls	r4, r4, #8
     2de:	605c      	str	r4, [r3, #4]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     2e0:	2437      	movs	r4, #55	; 0x37
     2e2:	46a1      	mov	r9, r4
     2e4:	5d1c      	ldrb	r4, [r3, r4]
     2e6:	4034      	ands	r4, r6
     2e8:	2720      	movs	r7, #32
     2ea:	46ba      	mov	sl, r7
     2ec:	4657      	mov	r7, sl
     2ee:	433c      	orrs	r4, r7
     2f0:	464f      	mov	r7, r9
     2f2:	55dc      	strb	r4, [r3, r7]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     2f4:	5c1c      	ldrb	r4, [r3, r0]
     2f6:	430c      	orrs	r4, r1
     2f8:	541c      	strb	r4, [r3, r0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     2fa:	3819      	subs	r0, #25
     2fc:	5c1c      	ldrb	r4, [r3, r0]
     2fe:	4026      	ands	r6, r4
     300:	4654      	mov	r4, sl
     302:	4326      	orrs	r6, r4
     304:	541e      	strb	r6, [r3, r0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     306:	4644      	mov	r4, r8
     308:	5d1c      	ldrb	r4, [r3, r4]
     30a:	430c      	orrs	r4, r1
     30c:	4646      	mov	r6, r8
     30e:	559c      	strb	r4, [r3, r6]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     310:	5c1c      	ldrb	r4, [r3, r0]
     312:	465e      	mov	r6, fp
     314:	43b4      	bics	r4, r6
     316:	4666      	mov	r6, ip
     318:	4334      	orrs	r4, r6
     31a:	541c      	strb	r4, [r3, r0]
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     31c:	5d58      	ldrb	r0, [r3, r5]
     31e:	4301      	orrs	r1, r0
     320:	5559      	strb	r1, [r3, r5]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     322:	2154      	movs	r1, #84	; 0x54
     324:	5c58      	ldrb	r0, [r3, r1]
     326:	4390      	bics	r0, r2
     328:	5458      	strb	r0, [r3, r1]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     32a:	2080      	movs	r0, #128	; 0x80
     32c:	0340      	lsls	r0, r0, #13
     32e:	6098      	str	r0, [r3, #8]
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     330:	6198      	str	r0, [r3, #24]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     332:	5c58      	ldrb	r0, [r3, r1]
     334:	4390      	bics	r0, r2
     336:	5458      	strb	r0, [r3, r1]
     338:	3906      	subs	r1, #6
     33a:	5c58      	ldrb	r0, [r3, r1]
     33c:	4390      	bics	r0, r2
     33e:	5458      	strb	r0, [r3, r1]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     340:	2080      	movs	r0, #128	; 0x80
     342:	01c0      	lsls	r0, r0, #7
     344:	6098      	str	r0, [r3, #8]
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     346:	6198      	str	r0, [r3, #24]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     348:	5c58      	ldrb	r0, [r3, r1]
     34a:	4390      	bics	r0, r2
     34c:	5458      	strb	r0, [r3, r1]
     34e:	3108      	adds	r1, #8
     350:	5c58      	ldrb	r0, [r3, r1]
     352:	4390      	bics	r0, r2
     354:	5458      	strb	r0, [r3, r1]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     356:	2280      	movs	r2, #128	; 0x80
     358:	03d2      	lsls	r2, r2, #15
     35a:	609a      	str	r2, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
}


inline static void pinCfg(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].reg |= p.cfg;
     35c:	5c58      	ldrb	r0, [r3, r1]
     35e:	2240      	movs	r2, #64	; 0x40
     360:	4302      	orrs	r2, r0
     362:	545a      	strb	r2, [r3, r1]
    pinGpio(cs_baro);

    pinOut(buzzerPin);
    pinCfg(buzzerPin);

    sercomClockEnable(SPI1, 3, 4);
     364:	2204      	movs	r2, #4
     366:	3953      	subs	r1, #83	; 0x53
     368:	2002      	movs	r0, #2
     36a:	4b10      	ldr	r3, [pc, #64]	; (3ac <init+0x18c>)
     36c:	4798      	blx	r3
    sercomSpiMasterInit(SPI1, 3, 0, 0, 0, 0x00);
     36e:	2300      	movs	r3, #0
     370:	9301      	str	r3, [sp, #4]
     372:	9300      	str	r3, [sp, #0]
     374:	2200      	movs	r2, #0
     376:	2103      	movs	r1, #3
     378:	2002      	movs	r0, #2
     37a:	4c0d      	ldr	r4, [pc, #52]	; (3b0 <init+0x190>)
     37c:	47a0      	blx	r4

}
     37e:	b003      	add	sp, #12
     380:	bc3c      	pop	{r2, r3, r4, r5}
     382:	4690      	mov	r8, r2
     384:	4699      	mov	r9, r3
     386:	46a2      	mov	sl, r4
     388:	46ab      	mov	fp, r5
     38a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     38c:	00000211 	.word	0x00000211
     390:	000005a5 	.word	0x000005a5
     394:	00000675 	.word	0x00000675
     398:	000004a5 	.word	0x000004a5
     39c:	000006ed 	.word	0x000006ed
     3a0:	e000e100 	.word	0xe000e100
     3a4:	ff00ffff 	.word	0xff00ffff
     3a8:	41004400 	.word	0x41004400
     3ac:	00000bb9 	.word	0x00000bb9
     3b0:	00000c21 	.word	0x00000c21

000003b4 <main>:


int main(void) {
     3b4:	b5f0      	push	{r4, r5, r6, r7, lr}
     3b6:	b0a5      	sub	sp, #148	; 0x94

    init();
     3b8:	4b2a      	ldr	r3, [pc, #168]	; (464 <main+0xb0>)
     3ba:	4798      	blx	r3

    Altimeter my_altimeter;

    initMS5803Barometer(&my_altimeter.myBarometer);
     3bc:	a809      	add	r0, sp, #36	; 0x24
     3be:	4b2a      	ldr	r3, [pc, #168]	; (468 <main+0xb4>)
     3c0:	4798      	blx	r3


    volatile long counter = 0;
     3c2:	2300      	movs	r3, #0
     3c4:	9308      	str	r3, [sp, #32]

volatile u16_t ignighterA;

    while (1) {

    ignighterA = adc_read(senseAPin);
     3c6:	4f29      	ldr	r7, [pc, #164]	; (46c <main+0xb8>)
     3c8:	683b      	ldr	r3, [r7, #0]
     3ca:	9301      	str	r3, [sp, #4]
     3cc:	687b      	ldr	r3, [r7, #4]
     3ce:	9300      	str	r3, [sp, #0]
     3d0:	4d27      	ldr	r5, [pc, #156]	; (470 <main+0xbc>)


           delay_ms(50);
     3d2:	4e28      	ldr	r6, [pc, #160]	; (474 <main+0xc0>)

volatile u16_t ignighterA;

    while (1) {

    ignighterA = adc_read(senseAPin);
     3d4:	9801      	ldr	r0, [sp, #4]
     3d6:	9900      	ldr	r1, [sp, #0]
     3d8:	47a8      	blx	r5
     3da:	ab02      	add	r3, sp, #8
     3dc:	80d8      	strh	r0, [r3, #6]


           delay_ms(50);
     3de:	2032      	movs	r0, #50	; 0x32
     3e0:	47b0      	blx	r6

        counter++;
     3e2:	9b08      	ldr	r3, [sp, #32]
     3e4:	3301      	adds	r3, #1
     3e6:	9308      	str	r3, [sp, #32]
//       pinToggle(LedPin);


           sampleTick(&my_altimeter);
     3e8:	a809      	add	r0, sp, #36	; 0x24
     3ea:	4b23      	ldr	r3, [pc, #140]	; (478 <main+0xc4>)
     3ec:	4798      	blx	r3
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
}


inline static void pinToggle(Pin p) {
    PORT->Group[p.group].OUTTGL.reg = (1<<p.pin);
     3ee:	2280      	movs	r2, #128	; 0x80
     3f0:	03d2      	lsls	r2, r2, #15
     3f2:	4b22      	ldr	r3, [pc, #136]	; (47c <main+0xc8>)
     3f4:	61da      	str	r2, [r3, #28]

        pinToggle(buzzerPin);
        delay_ms(1);
     3f6:	2001      	movs	r0, #1
     3f8:	47b0      	blx	r6

        uint8_t dummy_Tx = 0xFF;
        uint8_t dummy_rx;

        analogSample = adc_read(analogAccelPin);
     3fa:	68b8      	ldr	r0, [r7, #8]
     3fc:	68f9      	ldr	r1, [r7, #12]
     3fe:	47a8      	blx	r5
     400:	230e      	movs	r3, #14
     402:	aa02      	add	r2, sp, #8
     404:	4694      	mov	ip, r2
     406:	4463      	add	r3, ip
     408:	8018      	strh	r0, [r3, #0]
        accelX = (analogSample - 3920) * 0.0227;
     40a:	8818      	ldrh	r0, [r3, #0]
     40c:	4b1c      	ldr	r3, [pc, #112]	; (480 <main+0xcc>)
     40e:	469c      	mov	ip, r3
     410:	4460      	add	r0, ip
     412:	4b1c      	ldr	r3, [pc, #112]	; (484 <main+0xd0>)
     414:	4798      	blx	r3
     416:	4a1c      	ldr	r2, [pc, #112]	; (488 <main+0xd4>)
     418:	4b1c      	ldr	r3, [pc, #112]	; (48c <main+0xd8>)
     41a:	4c1d      	ldr	r4, [pc, #116]	; (490 <main+0xdc>)
     41c:	47a0      	blx	r4
     41e:	4b1d      	ldr	r3, [pc, #116]	; (494 <main+0xe0>)
     420:	4798      	blx	r3
     422:	9004      	str	r0, [sp, #16]

        averageAccel = averageAccel + accelX;
     424:	9807      	ldr	r0, [sp, #28]
     426:	9904      	ldr	r1, [sp, #16]
     428:	4c1b      	ldr	r4, [pc, #108]	; (498 <main+0xe4>)
     42a:	47a0      	blx	r4
     42c:	9007      	str	r0, [sp, #28]
        averageAlt = averageAlt + my_altimeter.myBarometer.heightFeet;
     42e:	9806      	ldr	r0, [sp, #24]
     430:	9912      	ldr	r1, [sp, #72]	; 0x48
     432:	47a0      	blx	r4
     434:	9006      	str	r0, [sp, #24]

        if (counter == 100) {
     436:	9b08      	ldr	r3, [sp, #32]
     438:	2b64      	cmp	r3, #100	; 0x64
     43a:	d1cb      	bne.n	3d4 <main+0x20>
     43c:	2280      	movs	r2, #128	; 0x80
     43e:	0552      	lsls	r2, r2, #21
     440:	4b0e      	ldr	r3, [pc, #56]	; (47c <main+0xc8>)
     442:	61da      	str	r2, [r3, #28]
            pinToggle(LedPin);

            averageAlt = averageAlt / 100;
     444:	9806      	ldr	r0, [sp, #24]
     446:	4c15      	ldr	r4, [pc, #84]	; (49c <main+0xe8>)
     448:	4915      	ldr	r1, [pc, #84]	; (4a0 <main+0xec>)
     44a:	47a0      	blx	r4
     44c:	9006      	str	r0, [sp, #24]
            averageAccel = averageAccel / 100;
     44e:	9807      	ldr	r0, [sp, #28]
     450:	4913      	ldr	r1, [pc, #76]	; (4a0 <main+0xec>)
     452:	47a0      	blx	r4
     454:	9007      	str	r0, [sp, #28]

            counter = -1;
     456:	2301      	movs	r3, #1
     458:	425b      	negs	r3, r3
     45a:	9308      	str	r3, [sp, #32]

            averageAccel = 0;
     45c:	2300      	movs	r3, #0
     45e:	9307      	str	r3, [sp, #28]
            averageAlt = 0;
     460:	9306      	str	r3, [sp, #24]
     462:	e7b3      	b.n	3cc <main+0x18>
     464:	00000221 	.word	0x00000221
     468:	00000959 	.word	0x00000959
     46c:	00001cb0 	.word	0x00001cb0
     470:	00000525 	.word	0x00000525
     474:	000006c1 	.word	0x000006c1
     478:	000009b5 	.word	0x000009b5
     47c:	41004400 	.word	0x41004400
     480:	fffff0b0 	.word	0xfffff0b0
     484:	0000182d 	.word	0x0000182d
     488:	367a0f91 	.word	0x367a0f91
     48c:	3f973eab 	.word	0x3f973eab
     490:	00001339 	.word	0x00001339
     494:	00001959 	.word	0x00001959
     498:	00000d0d 	.word	0x00000d0d
     49c:	00000ff9 	.word	0x00000ff9
     4a0:	42c80000 	.word	0x42c80000

000004a4 <adcInit>:


#include <util.h>

void adcInit() {
     4a4:	b510      	push	{r4, lr}

    // set up clock
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;
     4a6:	4a12      	ldr	r2, [pc, #72]	; (4f0 <adcInit+0x4c>)
     4a8:	6a13      	ldr	r3, [r2, #32]
     4aa:	2180      	movs	r1, #128	; 0x80
     4ac:	0249      	lsls	r1, r1, #9
     4ae:	430b      	orrs	r3, r1
     4b0:	6213      	str	r3, [r2, #32]

    // divide prescaler by 512 (93.75KHz), max adc freq is 2.1MHz
    ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |
     4b2:	4910      	ldr	r1, [pc, #64]	; (4f4 <adcInit+0x50>)
     4b4:	22e0      	movs	r2, #224	; 0xe0
     4b6:	00d2      	lsls	r2, r2, #3
     4b8:	808a      	strh	r2, [r1, #4]
                     ADC_CTRLB_RESSEL_12BIT;

    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
     4ba:	480f      	ldr	r0, [pc, #60]	; (4f8 <adcInit+0x54>)
     4bc:	4b0f      	ldr	r3, [pc, #60]	; (4fc <adcInit+0x58>)
     4be:	8058      	strh	r0, [r3, #2]
                        GCLK_CLKCTRL_GEN(0) |
                        GCLK_CLKCTRL_ID(ADC_GCLK_ID);

    ADC->CALIB.reg =
        ADC_CALIB_BIAS_CAL(
     4c0:	4b0f      	ldr	r3, [pc, #60]	; (500 <adcInit+0x5c>)
    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(0) |
                        GCLK_CLKCTRL_ID(ADC_GCLK_ID);

    ADC->CALIB.reg =
     4c2:	681b      	ldr	r3, [r3, #0]
     4c4:	015b      	lsls	r3, r3, #5
     4c6:	4013      	ands	r3, r2
     4c8:	0018      	movs	r0, r3
        ADC_CALIB_BIAS_CAL(
            (*(uint32_t *)ADC_FUSES_BIASCAL_ADDR >> ADC_FUSES_BIASCAL_Pos)
        ) |
        ADC_CALIB_LINEARITY_CAL(
     4ca:	4b0e      	ldr	r3, [pc, #56]	; (504 <adcInit+0x60>)
    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(0) |
                        GCLK_CLKCTRL_ID(ADC_GCLK_ID);

    ADC->CALIB.reg =
     4cc:	685a      	ldr	r2, [r3, #4]
     4ce:	0154      	lsls	r4, r2, #5
     4d0:	681a      	ldr	r2, [r3, #0]
     4d2:	0ed3      	lsrs	r3, r2, #27
     4d4:	4323      	orrs	r3, r4
     4d6:	22ff      	movs	r2, #255	; 0xff
     4d8:	4013      	ands	r3, r2
     4da:	4303      	orrs	r3, r0
     4dc:	850b      	strh	r3, [r1, #40]	; 0x28
        ) |
        ADC_CALIB_LINEARITY_CAL(
            (*(uint64_t *)ADC_FUSES_LINEARITY_0_ADDR >> ADC_FUSES_LINEARITY_0_Pos)
        );

    ADC->REFCTRL.reg = ADC_REFCTRL_REFSEL_INTVCC1;
     4de:	2302      	movs	r3, #2
     4e0:	704b      	strb	r3, [r1, #1]

    ADC->CTRLA.reg = ADC_CTRLA_ENABLE; // enable
     4e2:	700b      	strb	r3, [r1, #0]
    while(ADC->STATUS.reg & ADC_STATUS_SYNCBUSY);
     4e4:	000a      	movs	r2, r1
     4e6:	7e53      	ldrb	r3, [r2, #25]
     4e8:	b25b      	sxtb	r3, r3
     4ea:	2b00      	cmp	r3, #0
     4ec:	dbfb      	blt.n	4e6 <adcInit+0x42>
}
     4ee:	bd10      	pop	{r4, pc}
     4f0:	40000400 	.word	0x40000400
     4f4:	42004000 	.word	0x42004000
     4f8:	0000401e 	.word	0x0000401e
     4fc:	40000c00 	.word	0x40000c00
     500:	00806024 	.word	0x00806024
     504:	00806020 	.word	0x00806020

00000508 <adcSample>:



u16_t adcSample() {
    ADC->SWTRIG.reg = ADC_SWTRIG_START;
     508:	2202      	movs	r2, #2
     50a:	4b05      	ldr	r3, [pc, #20]	; (520 <adcSample+0x18>)
     50c:	731a      	strb	r2, [r3, #12]
    while(!(ADC->INTFLAG.reg & ADC_INTFLAG_RESRDY)); // wait until result is ready
     50e:	0019      	movs	r1, r3
     510:	3a01      	subs	r2, #1
     512:	7e0b      	ldrb	r3, [r1, #24]
     514:	4213      	tst	r3, r2
     516:	d0fc      	beq.n	512 <adcSample+0xa>
    return ADC->RESULT.reg;
     518:	4b01      	ldr	r3, [pc, #4]	; (520 <adcSample+0x18>)
     51a:	8b58      	ldrh	r0, [r3, #26]
     51c:	b280      	uxth	r0, r0
}
     51e:	4770      	bx	lr
     520:	42004000 	.word	0x42004000

00000524 <adc_read>:


u16_t adc_read(Pin p) {
     524:	b530      	push	{r4, r5, lr}
     526:	b083      	sub	sp, #12
     528:	0c03      	lsrs	r3, r0, #16
     52a:	0002      	movs	r2, r0
     52c:	9000      	str	r0, [sp, #0]
     52e:	9101      	str	r1, [sp, #4]
     530:	b2c9      	uxtb	r1, r1
     532:	b2db      	uxtb	r3, r3
     534:	0e10      	lsrs	r0, r2, #24
    u16_t buad;

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
     536:	07c2      	lsls	r2, r0, #31
     538:	d50c      	bpl.n	554 <adc_read+0x30>
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     53a:	0842      	lsrs	r2, r0, #1
     53c:	01dc      	lsls	r4, r3, #7
     53e:	1912      	adds	r2, r2, r4
     540:	4c14      	ldr	r4, [pc, #80]	; (594 <adc_read+0x70>)
     542:	46a4      	mov	ip, r4
     544:	4462      	add	r2, ip
     546:	7814      	ldrb	r4, [r2, #0]
     548:	250f      	movs	r5, #15
     54a:	402c      	ands	r4, r5
     54c:	2510      	movs	r5, #16
     54e:	432c      	orrs	r4, r5
     550:	7014      	strb	r4, [r2, #0]
     552:	e00b      	b.n	56c <adc_read+0x48>
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     554:	0842      	lsrs	r2, r0, #1
     556:	01dc      	lsls	r4, r3, #7
     558:	1912      	adds	r2, r2, r4
     55a:	4c0e      	ldr	r4, [pc, #56]	; (594 <adc_read+0x70>)
     55c:	46a4      	mov	ip, r4
     55e:	4462      	add	r2, ip
     560:	7814      	ldrb	r4, [r2, #0]
     562:	250f      	movs	r5, #15
     564:	43ac      	bics	r4, r5
     566:	2501      	movs	r5, #1
     568:	432c      	orrs	r4, r5
     56a:	7014      	strb	r4, [r2, #0]
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     56c:	01db      	lsls	r3, r3, #7
     56e:	18c0      	adds	r0, r0, r3
     570:	4b09      	ldr	r3, [pc, #36]	; (598 <adc_read+0x74>)
     572:	469c      	mov	ip, r3
     574:	4460      	add	r0, ip
     576:	7802      	ldrb	r2, [r0, #0]
     578:	2301      	movs	r3, #1
     57a:	4313      	orrs	r3, r2
     57c:	7003      	strb	r3, [r0, #0]
    // switch pin mux to analog in
    pinAnalog(p);

    ADC->INPUTCTRL.reg = (ADC_INPUTCTRL_MUXPOS(p.chan) // select from proper pin
                          | ADC_INPUTCTRL_MUXNEG_GND // 0 = gnd
                          | ADC_INPUTCTRL_GAIN_1X);
     57e:	231f      	movs	r3, #31
     580:	4019      	ands	r1, r3
     582:	23c0      	movs	r3, #192	; 0xc0
     584:	015b      	lsls	r3, r3, #5
     586:	4319      	orrs	r1, r3

u16_t adc_read(Pin p) {
    // switch pin mux to analog in
    pinAnalog(p);

    ADC->INPUTCTRL.reg = (ADC_INPUTCTRL_MUXPOS(p.chan) // select from proper pin
     588:	4b04      	ldr	r3, [pc, #16]	; (59c <adc_read+0x78>)
     58a:	6119      	str	r1, [r3, #16]
                          | ADC_INPUTCTRL_MUXNEG_GND // 0 = gnd
                          | ADC_INPUTCTRL_GAIN_1X);

    return adcSample();
     58c:	4b04      	ldr	r3, [pc, #16]	; (5a0 <adc_read+0x7c>)
     58e:	4798      	blx	r3
     590:	b003      	add	sp, #12
     592:	bd30      	pop	{r4, r5, pc}
     594:	41004430 	.word	0x41004430
     598:	41004440 	.word	0x41004440
     59c:	42004000 	.word	0x42004000
     5a0:	00000509 	.word	0x00000509

000005a4 <GclkInit>:


static uint32_t cycles_per_ms = 48000000UL / 1000;
static uint32_t cycles_per_us = 48000000UL / 1000000;

void GclkInit() {
     5a4:	b510      	push	{r4, lr}


    SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     5a6:	4a1c      	ldr	r2, [pc, #112]	; (618 <GclkInit+0x74>)
     5a8:	23c2      	movs	r3, #194	; 0xc2
     5aa:	00db      	lsls	r3, r3, #3
     5ac:	6093      	str	r3, [r2, #8]
                           SYSCTRL_INTFLAG_DFLLRDY;
    NVMCTRL->CTRLB.reg |= NVMCTRL_CTRLB_RWS_HALF;
     5ae:	491b      	ldr	r1, [pc, #108]	; (61c <GclkInit+0x78>)
     5b0:	6848      	ldr	r0, [r1, #4]
     5b2:	2302      	movs	r3, #2
     5b4:	4303      	orrs	r3, r0
     5b6:	604b      	str	r3, [r1, #4]


// start and enable external 32k crystal
    SYSCTRL->XOSC32K.reg = SYSCTRL_XOSC32K_ENABLE |
     5b8:	4b19      	ldr	r3, [pc, #100]	; (620 <GclkInit+0x7c>)
     5ba:	8293      	strh	r3, [r2, #20]
                           SYSCTRL_XOSC32K_XTALEN |
                           SYSCTRL_XOSC32K_EN32K |
                           ( 6 << SYSCTRL_XOSC32K_STARTUP_Pos);

    //wait for crystal to warm up
    while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_XOSC32KRDY)) == 0);
     5bc:	0011      	movs	r1, r2
     5be:	2202      	movs	r2, #2
     5c0:	68cb      	ldr	r3, [r1, #12]
     5c2:	421a      	tst	r2, r3
     5c4:	d0fc      	beq.n	5c0 <GclkInit+0x1c>

#define NVM_DFLL_COARSE_POS    58
#define NVM_DFLL_COARSE_SIZE   6
#define NVM_DFLL_FINE_POS      64
#define NVM_DFLL_FINE_SIZE     10
    uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
     5c6:	4b17      	ldr	r3, [pc, #92]	; (624 <GclkInit+0x80>)
     5c8:	681c      	ldr	r4, [r3, #0]
     5ca:	0ea4      	lsrs	r4, r4, #26
                         + (NVM_DFLL_COARSE_POS / 32))
                       >> (NVM_DFLL_COARSE_POS % 32))
                     & ((1 << NVM_DFLL_COARSE_SIZE) - 1);
    if (coarse == 0x3f) {
     5cc:	2c3f      	cmp	r4, #63	; 0x3f
     5ce:	d100      	bne.n	5d2 <GclkInit+0x2e>
        coarse = 0x1f;
     5d0:	3c20      	subs	r4, #32
    }
    uint32_t fine =( *((uint32_t *)(NVMCTRL_OTP4)
                       + (NVM_DFLL_FINE_POS / 32))
                     >> (NVM_DFLL_FINE_POS % 32))
     5d2:	4b15      	ldr	r3, [pc, #84]	; (628 <GclkInit+0x84>)
                       >> (NVM_DFLL_COARSE_POS % 32))
                     & ((1 << NVM_DFLL_COARSE_SIZE) - 1);
    if (coarse == 0x3f) {
        coarse = 0x1f;
    }
    uint32_t fine =( *((uint32_t *)(NVMCTRL_OTP4)
     5d4:	6818      	ldr	r0, [r3, #0]
     5d6:	0580      	lsls	r0, r0, #22
     5d8:	0d80      	lsrs	r0, r0, #22
                       + (NVM_DFLL_FINE_POS / 32))
                     >> (NVM_DFLL_FINE_POS % 32))
                   & ((1 << NVM_DFLL_FINE_SIZE) - 1);
    if (fine == 0x3ff) {
     5da:	4b14      	ldr	r3, [pc, #80]	; (62c <GclkInit+0x88>)
     5dc:	4298      	cmp	r0, r3
     5de:	d100      	bne.n	5e2 <GclkInit+0x3e>
        fine = 0x1ff;
     5e0:	4813      	ldr	r0, [pc, #76]	; (630 <GclkInit+0x8c>)
    }


    // Disable ONDEMAND mode while writing configurations (errata 9905)
    SYSCTRL->DFLLCTRL.reg = dfll_ctrl_usb & ~SYSCTRL_DFLLCTRL_ONDEMAND;
     5e2:	4a14      	ldr	r2, [pc, #80]	; (634 <GclkInit+0x90>)
     5e4:	4b0c      	ldr	r3, [pc, #48]	; (618 <GclkInit+0x74>)
     5e6:	849a      	strh	r2, [r3, #36]	; 0x24
    while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_DFLLRDY)) == 0);
     5e8:	0019      	movs	r1, r3
     5ea:	2210      	movs	r2, #16
     5ec:	68cb      	ldr	r3, [r1, #12]
     5ee:	421a      	tst	r2, r3
     5f0:	d0fc      	beq.n	5ec <GclkInit+0x48>
    SYSCTRL->DFLLVAL.reg = SYSCTRL_DFLLVAL_COARSE(coarse) | SYSCTRL_DFLLVAL_FINE(fine);
     5f2:	02a4      	lsls	r4, r4, #10
     5f4:	4320      	orrs	r0, r4
     5f6:	4b08      	ldr	r3, [pc, #32]	; (618 <GclkInit+0x74>)
     5f8:	6298      	str	r0, [r3, #40]	; 0x28


    //Wait and see if the DFLL output is good . . .
    while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_DFLLRDY)) == 0);
     5fa:	0019      	movs	r1, r3
     5fc:	2210      	movs	r2, #16
     5fe:	68cb      	ldr	r3, [r1, #12]
     600:	421a      	tst	r2, r3
     602:	d0fc      	beq.n	5fe <GclkInit+0x5a>


    SYSCTRL->DFLLCTRL.reg = dfll_ctrl_usb;
     604:	4a0c      	ldr	r2, [pc, #48]	; (638 <GclkInit+0x94>)
     606:	4b04      	ldr	r3, [pc, #16]	; (618 <GclkInit+0x74>)
     608:	849a      	strh	r2, [r3, #36]	; 0x24


    //For generic clock generator 0, select the DFLL48 Clock as input
    GCLK->GENDIV.reg  = (GCLK_GENDIV_DIV(1)  | GCLK_GENDIV_ID(0));
     60a:	4b0c      	ldr	r3, [pc, #48]	; (63c <GclkInit+0x98>)
     60c:	2280      	movs	r2, #128	; 0x80
     60e:	0052      	lsls	r2, r2, #1
     610:	609a      	str	r2, [r3, #8]
    GCLK->GENCTRL.reg = (GCLK_GENCTRL_ID(0)  | (GCLK_GENCTRL_SRC_DFLL48M) | (GCLK_GENCTRL_GENEN));
     612:	4a0b      	ldr	r2, [pc, #44]	; (640 <GclkInit+0x9c>)
     614:	605a      	str	r2, [r3, #4]
}
     616:	bd10      	pop	{r4, pc}
     618:	40000800 	.word	0x40000800
     61c:	41004000 	.word	0x41004000
     620:	0000060e 	.word	0x0000060e
     624:	00806024 	.word	0x00806024
     628:	00806028 	.word	0x00806028
     62c:	000003ff 	.word	0x000003ff
     630:	000001ff 	.word	0x000001ff
     634:	00000522 	.word	0x00000522
     638:	000005a2 	.word	0x000005a2
     63c:	40000c00 	.word	0x40000c00
     640:	00010700 	.word	0x00010700

00000644 <gclkEnable>:

void gclkEnable(u32_t id, u32_t src, u32_t div) {
     644:	b510      	push	{r4, lr}
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
     646:	230f      	movs	r3, #15
     648:	4018      	ands	r0, r3
     64a:	0212      	lsls	r2, r2, #8
     64c:	4b07      	ldr	r3, [pc, #28]	; (66c <gclkEnable+0x28>)
     64e:	401a      	ands	r2, r3
     650:	4302      	orrs	r2, r0
     652:	4c07      	ldr	r4, [pc, #28]	; (670 <gclkEnable+0x2c>)
     654:	60a2      	str	r2, [r4, #8]
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     656:	0209      	lsls	r1, r1, #8
     658:	23f8      	movs	r3, #248	; 0xf8
     65a:	015b      	lsls	r3, r3, #5
     65c:	4019      	ands	r1, r3
     65e:	2380      	movs	r3, #128	; 0x80
     660:	025b      	lsls	r3, r3, #9
     662:	4319      	orrs	r1, r3
     664:	4308      	orrs	r0, r1
     666:	6060      	str	r0, [r4, #4]
}
     668:	bd10      	pop	{r4, pc}
     66a:	46c0      	nop			; (mov r8, r8)
     66c:	00ffff00 	.word	0x00ffff00
     670:	40000c00 	.word	0x40000c00

00000674 <delayInit>:


void delayInit(void) {
    cycles_per_ms = 48000000UL;
    cycles_per_ms /= 1000;
     674:	4b04      	ldr	r3, [pc, #16]	; (688 <delayInit+0x14>)
     676:	4a05      	ldr	r2, [pc, #20]	; (68c <delayInit+0x18>)
     678:	601a      	str	r2, [r3, #0]
    cycles_per_us = cycles_per_ms / 1000;
     67a:	2230      	movs	r2, #48	; 0x30
     67c:	605a      	str	r2, [r3, #4]

    SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     67e:	3a2b      	subs	r2, #43	; 0x2b
     680:	4b03      	ldr	r3, [pc, #12]	; (690 <delayInit+0x1c>)
     682:	601a      	str	r2, [r3, #0]
}
     684:	4770      	bx	lr
     686:	46c0      	nop			; (mov r8, r8)
     688:	20000004 	.word	0x20000004
     68c:	0000bb80 	.word	0x0000bb80
     690:	e000e010 	.word	0xe000e010

00000694 <delay_us>:
/**
 * \brief Delay loop to delay at least n number of microseconds
 *
 * \param n  Number of microseconds to wait
 */
void delay_us(uint32_t n) {
     694:	b530      	push	{r4, r5, lr}
    while (n--) {
        /* Devide up to blocks of 10u */
        delay_cycles(cycles_per_us);
     696:	4b08      	ldr	r3, [pc, #32]	; (6b8 <delay_us+0x24>)
     698:	685c      	ldr	r4, [r3, #4]


static inline void delay_cycles(
const uint32_t n) {
	if (n > 0) {
		SysTick->LOAD = n;
     69a:	4a08      	ldr	r2, [pc, #32]	; (6bc <delay_us+0x28>)
		SysTick->VAL = 0;
     69c:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     69e:	2180      	movs	r1, #128	; 0x80
     6a0:	0249      	lsls	r1, r1, #9
 * \brief Delay loop to delay at least n number of microseconds
 *
 * \param n  Number of microseconds to wait
 */
void delay_us(uint32_t n) {
    while (n--) {
     6a2:	e006      	b.n	6b2 <delay_us+0x1e>



static inline void delay_cycles(
const uint32_t n) {
	if (n > 0) {
     6a4:	2c00      	cmp	r4, #0
     6a6:	d004      	beq.n	6b2 <delay_us+0x1e>
		SysTick->LOAD = n;
     6a8:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     6aa:	6095      	str	r5, [r2, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     6ac:	6813      	ldr	r3, [r2, #0]
     6ae:	420b      	tst	r3, r1
     6b0:	d0fc      	beq.n	6ac <delay_us+0x18>
     6b2:	3801      	subs	r0, #1
     6b4:	d2f6      	bcs.n	6a4 <delay_us+0x10>
        /* Devide up to blocks of 10u */
        delay_cycles(cycles_per_us);
    }
}
     6b6:	bd30      	pop	{r4, r5, pc}
     6b8:	20000004 	.word	0x20000004
     6bc:	e000e010 	.word	0xe000e010

000006c0 <delay_ms>:
/**
 * \brief Delay loop to delay at least n number of milliseconds
 *
 * \param n  Number of milliseconds to wait
 */
void delay_ms(uint32_t n) {
     6c0:	b530      	push	{r4, r5, lr}
    while (n--) {
        /* Devide up to blocks of 1ms */
        delay_cycles(cycles_per_ms);
     6c2:	4b08      	ldr	r3, [pc, #32]	; (6e4 <delay_ms+0x24>)
     6c4:	681c      	ldr	r4, [r3, #0]


static inline void delay_cycles(
const uint32_t n) {
	if (n > 0) {
		SysTick->LOAD = n;
     6c6:	4a08      	ldr	r2, [pc, #32]	; (6e8 <delay_ms+0x28>)
		SysTick->VAL = 0;
     6c8:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     6ca:	2180      	movs	r1, #128	; 0x80
     6cc:	0249      	lsls	r1, r1, #9
 * \brief Delay loop to delay at least n number of milliseconds
 *
 * \param n  Number of milliseconds to wait
 */
void delay_ms(uint32_t n) {
    while (n--) {
     6ce:	e006      	b.n	6de <delay_ms+0x1e>



static inline void delay_cycles(
const uint32_t n) {
	if (n > 0) {
     6d0:	2c00      	cmp	r4, #0
     6d2:	d004      	beq.n	6de <delay_ms+0x1e>
		SysTick->LOAD = n;
     6d4:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     6d6:	6095      	str	r5, [r2, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     6d8:	6813      	ldr	r3, [r2, #0]
     6da:	420b      	tst	r3, r1
     6dc:	d0fc      	beq.n	6d8 <delay_ms+0x18>
     6de:	3801      	subs	r0, #1
     6e0:	d2f6      	bcs.n	6d0 <delay_ms+0x10>
        /* Devide up to blocks of 1ms */
        delay_cycles(cycles_per_ms);
    }
     6e2:	bd30      	pop	{r4, r5, pc}
     6e4:	20000004 	.word	0x20000004
     6e8:	e000e010 	.word	0xe000e010

000006ec <dmaInit>:
#include <util.h>

DMA_DESC_ALIGN DmacDescriptor dma_descriptors[12];
DMA_DESC_ALIGN DmacDescriptor dma_descriptors_wb[12];

void dmaInit() {
     6ec:	b570      	push	{r4, r5, r6, lr}
	memset(&dma_descriptors, 0, sizeof(dma_descriptors));
     6ee:	4d11      	ldr	r5, [pc, #68]	; (734 <dmaInit+0x48>)
     6f0:	22c0      	movs	r2, #192	; 0xc0
     6f2:	2100      	movs	r1, #0
     6f4:	0028      	movs	r0, r5
     6f6:	4e10      	ldr	r6, [pc, #64]	; (738 <dmaInit+0x4c>)
     6f8:	47b0      	blx	r6
	memset(&dma_descriptors_wb, 0, sizeof(dma_descriptors_wb));
     6fa:	4c10      	ldr	r4, [pc, #64]	; (73c <dmaInit+0x50>)
     6fc:	22c0      	movs	r2, #192	; 0xc0
     6fe:	2100      	movs	r1, #0
     700:	0020      	movs	r0, r4
     702:	47b0      	blx	r6

	PM->AHBMASK.reg |= PM_AHBMASK_DMAC;
     704:	4b0e      	ldr	r3, [pc, #56]	; (740 <dmaInit+0x54>)
     706:	6959      	ldr	r1, [r3, #20]
     708:	2220      	movs	r2, #32
     70a:	430a      	orrs	r2, r1
     70c:	615a      	str	r2, [r3, #20]
	PM->APBBMASK.reg |= PM_APBBMASK_DMAC;
     70e:	69d9      	ldr	r1, [r3, #28]
     710:	2210      	movs	r2, #16
     712:	430a      	orrs	r2, r1
     714:	61da      	str	r2, [r3, #28]

	DMAC->CTRL.bit.DMAENABLE = 0;
     716:	4b0b      	ldr	r3, [pc, #44]	; (744 <dmaInit+0x58>)
     718:	881a      	ldrh	r2, [r3, #0]
     71a:	2102      	movs	r1, #2
     71c:	438a      	bics	r2, r1
     71e:	801a      	strh	r2, [r3, #0]
	DMAC->CTRL.bit.SWRST = 1;
     720:	8819      	ldrh	r1, [r3, #0]
     722:	2201      	movs	r2, #1
     724:	430a      	orrs	r2, r1
     726:	801a      	strh	r2, [r3, #0]

	DMAC->BASEADDR.reg = (unsigned) &dma_descriptors;
     728:	635d      	str	r5, [r3, #52]	; 0x34
	DMAC->WRBADDR.reg = (unsigned) &dma_descriptors_wb;
     72a:	639c      	str	r4, [r3, #56]	; 0x38

	DMAC->CTRL.reg = DMAC_CTRL_DMAENABLE | DMAC_CTRL_LVLEN(0xf);
     72c:	4a06      	ldr	r2, [pc, #24]	; (748 <dmaInit+0x5c>)
     72e:	801a      	strh	r2, [r3, #0]
}
     730:	bd70      	pop	{r4, r5, r6, pc}
     732:	46c0      	nop			; (mov r8, r8)
     734:	20000520 	.word	0x20000520
     738:	00001af5 	.word	0x00001af5
     73c:	20000460 	.word	0x20000460
     740:	40000400 	.word	0x40000400
     744:	41004800 	.word	0x41004800
     748:	00000f02 	.word	0x00000f02

0000074c <readMS5803AdcResults>:
#include <MS5803.h>
#include <boardDefines.h>
#include <math.h>


u32_t readMS5803AdcResults() {
     74c:	b5f0      	push	{r4, r5, r6, r7, lr}
     74e:	4647      	mov	r7, r8
     750:	b480      	push	{r7}
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     752:	4f0e      	ldr	r7, [pc, #56]	; (78c <readMS5803AdcResults+0x40>)
     754:	2480      	movs	r4, #128	; 0x80
     756:	01e4      	lsls	r4, r4, #7
     758:	617c      	str	r4, [r7, #20]

    u8_t dummy_tx = 0xFF;
    u8_t dummy_rx;

    pinLow(cs_baro);
    dummy_rx = spiDataTransfer(SPI1, cmdAdcRead_);
     75a:	2100      	movs	r1, #0
     75c:	2002      	movs	r0, #2
     75e:	4d0c      	ldr	r5, [pc, #48]	; (790 <readMS5803AdcResults+0x44>)
     760:	47a8      	blx	r5
    u8_t _byte1 = spiDataTransfer(SPI1,dummy_tx);
     762:	21ff      	movs	r1, #255	; 0xff
     764:	2002      	movs	r0, #2
     766:	47a8      	blx	r5
     768:	0006      	movs	r6, r0
    u8_t _byte2 = spiDataTransfer(SPI1,dummy_tx);
     76a:	21ff      	movs	r1, #255	; 0xff
     76c:	2002      	movs	r0, #2
     76e:	47a8      	blx	r5
     770:	4680      	mov	r8, r0
    u8_t _byte3 = spiDataTransfer(SPI1,dummy_tx);
     772:	21ff      	movs	r1, #255	; 0xff
     774:	2002      	movs	r0, #2
     776:	47a8      	blx	r5
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     778:	61bc      	str	r4, [r7, #24]
    pinHigh(cs_baro);

    u32_t _receive = (_byte1 << 16) | (_byte2 << 8) | (_byte3);
    return _receive;
     77a:	0436      	lsls	r6, r6, #16
     77c:	4643      	mov	r3, r8
     77e:	021c      	lsls	r4, r3, #8
     780:	4334      	orrs	r4, r6
     782:	4320      	orrs	r0, r4
}
     784:	bc04      	pop	{r2}
     786:	4690      	mov	r8, r2
     788:	bdf0      	pop	{r4, r5, r6, r7, pc}
     78a:	46c0      	nop			; (mov r8, r8)
     78c:	41004400 	.word	0x41004400
     790:	00000c99 	.word	0x00000c99

00000794 <ConvertPressureTemperature>:

void ConvertPressureTemperature(Barometer *my_barometer) {
     794:	b5f0      	push	{r4, r5, r6, r7, lr}
     796:	464f      	mov	r7, r9
     798:	4646      	mov	r6, r8
     79a:	b4c0      	push	{r6, r7}
     79c:	b08b      	sub	sp, #44	; 0x2c
     79e:	0007      	movs	r7, r0
    volatile const u16_t C1 = my_barometer->coefficients_[0];
     7a0:	8803      	ldrh	r3, [r0, #0]
     7a2:	251e      	movs	r5, #30
     7a4:	aa02      	add	r2, sp, #8
     7a6:	4694      	mov	ip, r2
     7a8:	4465      	add	r5, ip
     7aa:	802b      	strh	r3, [r5, #0]
    volatile const u16_t C2 = my_barometer->coefficients_[1];
     7ac:	8843      	ldrh	r3, [r0, #2]
     7ae:	8393      	strh	r3, [r2, #28]
    volatile const u16_t C3 = my_barometer->coefficients_[2];
     7b0:	8883      	ldrh	r3, [r0, #4]
     7b2:	8353      	strh	r3, [r2, #26]
    volatile const u16_t C4 = my_barometer->coefficients_[3];
     7b4:	88c3      	ldrh	r3, [r0, #6]
     7b6:	ae08      	add	r6, sp, #32
     7b8:	8033      	strh	r3, [r6, #0]
    volatile const u16_t C5 = my_barometer->coefficients_[4];
     7ba:	8903      	ldrh	r3, [r0, #8]
     7bc:	2216      	movs	r2, #22
     7be:	4462      	add	r2, ip
     7c0:	8013      	strh	r3, [r2, #0]
    volatile const u16_t C6 = my_barometer->coefficients_[5];
     7c2:	8941      	ldrh	r1, [r0, #10]
     7c4:	ab07      	add	r3, sp, #28
     7c6:	8019      	strh	r1, [r3, #0]

    // calculate 1st order pressure and temperature (MS5607 1st order algorithm)
    const  int32_t dT = (my_barometer->rawTempatureData) - ((int32_t)C5 << 8);
     7c8:	8814      	ldrh	r4, [r2, #0]
    my_barometer->temperatureCelcus  = 2000 + (((int64_t)dT * C6) >> 32) ;
     7ca:	0224      	lsls	r4, r4, #8
     7cc:	6902      	ldr	r2, [r0, #16]
     7ce:	1b14      	subs	r4, r2, r4
     7d0:	17e2      	asrs	r2, r4, #31
     7d2:	0011      	movs	r1, r2
     7d4:	8818      	ldrh	r0, [r3, #0]
     7d6:	b280      	uxth	r0, r0
     7d8:	4b2b      	ldr	r3, [pc, #172]	; (888 <ConvertPressureTemperature+0xf4>)
     7da:	4699      	mov	r9, r3
     7dc:	0022      	movs	r2, r4
     7de:	9101      	str	r1, [sp, #4]
     7e0:	000b      	movs	r3, r1
     7e2:	2100      	movs	r1, #0
     7e4:	47c8      	blx	r9
     7e6:	23fa      	movs	r3, #250	; 0xfa
     7e8:	00db      	lsls	r3, r3, #3
     7ea:	469c      	mov	ip, r3
     7ec:	4461      	add	r1, ip
     7ee:	6179      	str	r1, [r7, #20]

    volatile const  int64_t OFF   = ((int64_t)C2 << 16) + (((C4 * (int64_t)dT)) >> 7);
     7f0:	ab02      	add	r3, sp, #8
     7f2:	8b9b      	ldrh	r3, [r3, #28]
     7f4:	b29b      	uxth	r3, r3
     7f6:	4698      	mov	r8, r3
     7f8:	8830      	ldrh	r0, [r6, #0]
     7fa:	b280      	uxth	r0, r0
     7fc:	0022      	movs	r2, r4
     7fe:	9b01      	ldr	r3, [sp, #4]
     800:	2100      	movs	r1, #0
     802:	47c8      	blx	r9
     804:	064e      	lsls	r6, r1, #25
     806:	09c2      	lsrs	r2, r0, #7
     808:	4332      	orrs	r2, r6
     80a:	11cb      	asrs	r3, r1, #7
     80c:	2100      	movs	r1, #0
     80e:	4646      	mov	r6, r8
     810:	0430      	lsls	r0, r6, #16
     812:	1812      	adds	r2, r2, r0
     814:	414b      	adcs	r3, r1
     816:	9204      	str	r2, [sp, #16]
     818:	9305      	str	r3, [sp, #20]
    volatile const  int64_t SENS  =  ((int64_t)C1 << 15) + (((C3 * (int64_t)dT)) >> 8);
     81a:	882d      	ldrh	r5, [r5, #0]
     81c:	b2ad      	uxth	r5, r5
     81e:	aa02      	add	r2, sp, #8
     820:	8b50      	ldrh	r0, [r2, #26]
     822:	b280      	uxth	r0, r0
     824:	0022      	movs	r2, r4
     826:	9b01      	ldr	r3, [sp, #4]
     828:	2100      	movs	r1, #0
     82a:	47c8      	blx	r9
     82c:	060c      	lsls	r4, r1, #24
     82e:	0a02      	lsrs	r2, r0, #8
     830:	4322      	orrs	r2, r4
     832:	120b      	asrs	r3, r1, #8
     834:	2100      	movs	r1, #0
     836:	03e8      	lsls	r0, r5, #15
     838:	1812      	adds	r2, r2, r0
     83a:	414b      	adcs	r3, r1
     83c:	9202      	str	r2, [sp, #8]
     83e:	9303      	str	r3, [sp, #12]
    my_barometer->pressureMbar = (((my_barometer->rawPressureData * SENS) / 2097152) - OFF) / 32768;
     840:	9a02      	ldr	r2, [sp, #8]
     842:	9b03      	ldr	r3, [sp, #12]
     844:	9c04      	ldr	r4, [sp, #16]
     846:	9d05      	ldr	r5, [sp, #20]
     848:	68f8      	ldr	r0, [r7, #12]
     84a:	2100      	movs	r1, #0
     84c:	47c8      	blx	r9
     84e:	17ce      	asrs	r6, r1, #31
     850:	02f6      	lsls	r6, r6, #11
     852:	0af2      	lsrs	r2, r6, #11
     854:	2300      	movs	r3, #0
     856:	1880      	adds	r0, r0, r2
     858:	4159      	adcs	r1, r3
     85a:	02ce      	lsls	r6, r1, #11
     85c:	0d42      	lsrs	r2, r0, #21
     85e:	4332      	orrs	r2, r6
     860:	154b      	asrs	r3, r1, #21
     862:	1b12      	subs	r2, r2, r4
     864:	41ab      	sbcs	r3, r5
     866:	17dc      	asrs	r4, r3, #31
     868:	0464      	lsls	r4, r4, #17
     86a:	0c60      	lsrs	r0, r4, #17
     86c:	2100      	movs	r1, #0
     86e:	1812      	adds	r2, r2, r0
     870:	414b      	adcs	r3, r1
     872:	0011      	movs	r1, r2
     874:	045b      	lsls	r3, r3, #17
     876:	0bca      	lsrs	r2, r1, #15
     878:	431a      	orrs	r2, r3
     87a:	61fa      	str	r2, [r7, #28]
}
     87c:	b00b      	add	sp, #44	; 0x2c
     87e:	bc0c      	pop	{r2, r3}
     880:	4690      	mov	r8, r2
     882:	4699      	mov	r9, r3
     884:	bdf0      	pop	{r4, r5, r6, r7, pc}
     886:	46c0      	nop			; (mov r8, r8)
     888:	00000cb5 	.word	0x00000cb5

0000088c <pascalToCent>:
    double altFeet = (1-pow((my_barometer->pressurePa/1013.25),(0.190284)))*145366.45;
    my_barometer->heightFeet = (float)altFeet;

}

void pascalToCent(Barometer *my_barometer) {
     88c:	b570      	push	{r4, r5, r6, lr}
     88e:	0004      	movs	r4, r0
        748275, 767202, 786555, 806356, 826627,
        847395, 868688, 890537, 912974, 936037,
        959766, 984206
    };

    my_barometer->pressurePa = my_barometer->pressureMbar *1;
     890:	69c2      	ldr	r2, [r0, #28]
     892:	6182      	str	r2, [r0, #24]

    if (my_barometer->pressurePa > PA_INIT)
     894:	4b0f      	ldr	r3, [pc, #60]	; (8d4 <pascalToCent+0x48>)
     896:	429a      	cmp	r2, r3
     898:	d902      	bls.n	8a0 <pascalToCent+0x14>
        my_barometer->heightCm = lookupTable[0];
     89a:	4b0f      	ldr	r3, [pc, #60]	; (8d8 <pascalToCent+0x4c>)
     89c:	6203      	str	r3, [r0, #32]
     89e:	e018      	b.n	8d2 <pascalToCent+0x46>
    else {
        const int32_t inx = (PA_INIT - my_barometer->pressurePa) >> 10;
     8a0:	4b0c      	ldr	r3, [pc, #48]	; (8d4 <pascalToCent+0x48>)
     8a2:	1a9b      	subs	r3, r3, r2
     8a4:	0a9b      	lsrs	r3, r3, #10
        if (inx >= PZLUT_ENTRIES - 1)
     8a6:	2b4b      	cmp	r3, #75	; 0x4b
     8a8:	dd02      	ble.n	8b0 <pascalToCent+0x24>
            my_barometer->heightCm = lookupTable[PZLUT_ENTRIES - 1];
     8aa:	4b0c      	ldr	r3, [pc, #48]	; (8dc <pascalToCent+0x50>)
     8ac:	6203      	str	r3, [r0, #32]
     8ae:	e010      	b.n	8d2 <pascalToCent+0x46>
        else {
            const int32_t pa1 = PA_INIT - (inx << 10);
            const int32_t z1 = lookupTable[inx];
     8b0:	4d0b      	ldr	r5, [pc, #44]	; (8e0 <pascalToCent+0x54>)
     8b2:	0099      	lsls	r1, r3, #2
     8b4:	5948      	ldr	r0, [r1, r5]
            const int32_t z2 = lookupTable[inx + 1];
            my_barometer->heightCm = (z1 + (((pa1 - my_barometer->pressurePa) * (z2 - z1)) >> 10));
     8b6:	029e      	lsls	r6, r3, #10
     8b8:	4906      	ldr	r1, [pc, #24]	; (8d4 <pascalToCent+0x48>)
     8ba:	1b89      	subs	r1, r1, r6
     8bc:	1a8a      	subs	r2, r1, r2
        if (inx >= PZLUT_ENTRIES - 1)
            my_barometer->heightCm = lookupTable[PZLUT_ENTRIES - 1];
        else {
            const int32_t pa1 = PA_INIT - (inx << 10);
            const int32_t z1 = lookupTable[inx];
            const int32_t z2 = lookupTable[inx + 1];
     8be:	3301      	adds	r3, #1
     8c0:	009b      	lsls	r3, r3, #2
            my_barometer->heightCm = (z1 + (((pa1 - my_barometer->pressurePa) * (z2 - z1)) >> 10));
     8c2:	595b      	ldr	r3, [r3, r5]
     8c4:	1a1b      	subs	r3, r3, r0
     8c6:	435a      	muls	r2, r3
     8c8:	0a92      	lsrs	r2, r2, #10
     8ca:	1810      	adds	r0, r2, r0
     8cc:	4b05      	ldr	r3, [pc, #20]	; (8e4 <pascalToCent+0x58>)
     8ce:	4798      	blx	r3
     8d0:	6220      	str	r0, [r4, #32]
        }
    }
}
     8d2:	bd70      	pop	{r4, r5, r6, pc}
     8d4:	000199cc 	.word	0x000199cc
     8d8:	c6e5c000 	.word	0xc6e5c000
     8dc:	497048e0 	.word	0x497048e0
     8e0:	00001cc0 	.word	0x00001cc0
     8e4:	000012bd 	.word	0x000012bd

000008e8 <readMS5803Coefficients>:

void readMS5803Coefficients(Barometer *my_barometer) {
     8e8:	b5f0      	push	{r4, r5, r6, r7, lr}
     8ea:	465f      	mov	r7, fp
     8ec:	464e      	mov	r6, r9
     8ee:	4645      	mov	r5, r8
     8f0:	b4e0      	push	{r5, r6, r7}
     8f2:	4680      	mov	r8, r0
     8f4:	24a2      	movs	r4, #162	; 0xa2

    u8_t dummy_tx = 0xFF;
    u8_t dummy_rx;

    for (u8_t coeff_num = 0; coeff_num < 6 ; ++coeff_num ) {
        delay_us(600);
     8f6:	4e15      	ldr	r6, [pc, #84]	; (94c <readMS5803Coefficients+0x64>)
        u8_t _cmd = MS5803_CMD_PROM_READ + ((coeff_num+1)*2);
        delay_us(600);
        pinLow(cs_baro);
        dummy_rx = spiDataTransfer(SPI1, _cmd);
     8f8:	4f15      	ldr	r7, [pc, #84]	; (950 <readMS5803Coefficients+0x68>)

    u8_t dummy_tx = 0xFF;
    u8_t dummy_rx;

    for (u8_t coeff_num = 0; coeff_num < 6 ; ++coeff_num ) {
        delay_us(600);
     8fa:	2096      	movs	r0, #150	; 0x96
     8fc:	0080      	lsls	r0, r0, #2
     8fe:	47b0      	blx	r6
        u8_t _cmd = MS5803_CMD_PROM_READ + ((coeff_num+1)*2);
        delay_us(600);
     900:	2096      	movs	r0, #150	; 0x96
     902:	0080      	lsls	r0, r0, #2
     904:	47b0      	blx	r6
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     906:	4d13      	ldr	r5, [pc, #76]	; (954 <readMS5803Coefficients+0x6c>)
     908:	2380      	movs	r3, #128	; 0x80
     90a:	01db      	lsls	r3, r3, #7
     90c:	469b      	mov	fp, r3
     90e:	616b      	str	r3, [r5, #20]
        pinLow(cs_baro);
        dummy_rx = spiDataTransfer(SPI1, _cmd);
     910:	0021      	movs	r1, r4
     912:	2002      	movs	r0, #2
     914:	47b8      	blx	r7
        u8_t _byte1 = spiDataTransfer(SPI1,dummy_tx);
     916:	21ff      	movs	r1, #255	; 0xff
     918:	2002      	movs	r0, #2
     91a:	47b8      	blx	r7
     91c:	4681      	mov	r9, r0
        u8_t _byte2 = spiDataTransfer(SPI1,dummy_tx);
     91e:	21ff      	movs	r1, #255	; 0xff
     920:	2002      	movs	r0, #2
     922:	47b8      	blx	r7
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     924:	465b      	mov	r3, fp
     926:	61ab      	str	r3, [r5, #24]
        pinHigh(cs_baro);
        my_barometer->coefficients_[coeff_num] = (_byte1 << 8) | _byte2;
     928:	464b      	mov	r3, r9
     92a:	021d      	lsls	r5, r3, #8
     92c:	4328      	orrs	r0, r5
     92e:	4643      	mov	r3, r8
     930:	8018      	strh	r0, [r3, #0]
     932:	3402      	adds	r4, #2
     934:	b2e4      	uxtb	r4, r4
     936:	2302      	movs	r3, #2
     938:	469c      	mov	ip, r3
     93a:	44e0      	add	r8, ip
void readMS5803Coefficients(Barometer *my_barometer) {

    u8_t dummy_tx = 0xFF;
    u8_t dummy_rx;

    for (u8_t coeff_num = 0; coeff_num < 6 ; ++coeff_num ) {
     93c:	2cae      	cmp	r4, #174	; 0xae
     93e:	d1dc      	bne.n	8fa <readMS5803Coefficients+0x12>
        u8_t _byte2 = spiDataTransfer(SPI1,dummy_tx);
        pinHigh(cs_baro);
        my_barometer->coefficients_[coeff_num] = (_byte1 << 8) | _byte2;
    }

}
     940:	bc1c      	pop	{r2, r3, r4}
     942:	4690      	mov	r8, r2
     944:	4699      	mov	r9, r3
     946:	46a3      	mov	fp, r4
     948:	bdf0      	pop	{r4, r5, r6, r7, pc}
     94a:	46c0      	nop			; (mov r8, r8)
     94c:	00000695 	.word	0x00000695
     950:	00000c99 	.word	0x00000c99
     954:	41004400 	.word	0x41004400

00000958 <initMS5803Barometer>:

void initMS5803Barometer(Barometer *my_barometer) {
     958:	b570      	push	{r4, r5, r6, lr}
     95a:	0004      	movs	r4, r0
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     95c:	4d0d      	ldr	r5, [pc, #52]	; (994 <initMS5803Barometer+0x3c>)
     95e:	2680      	movs	r6, #128	; 0x80
     960:	01f6      	lsls	r6, r6, #7
     962:	616e      	str	r6, [r5, #20]

    u8_t dummy_tx = 0xFF;
    u8_t dummy_rx;

    pinLow(cs_baro);
    dummy_rx = spiDataTransfer(SPI1, MS5803_CMD_RES);
     964:	211e      	movs	r1, #30
     966:	2002      	movs	r0, #2
     968:	4b0b      	ldr	r3, [pc, #44]	; (998 <initMS5803Barometer+0x40>)
     96a:	4798      	blx	r3
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     96c:	61ae      	str	r6, [r5, #24]
    pinHigh(cs_baro);
    delay_ms(200);
     96e:	20c8      	movs	r0, #200	; 0xc8
     970:	4b0a      	ldr	r3, [pc, #40]	; (99c <initMS5803Barometer+0x44>)
     972:	4798      	blx	r3
    readMS5803Coefficients(my_barometer);
     974:	0020      	movs	r0, r4
     976:	4b0a      	ldr	r3, [pc, #40]	; (9a0 <initMS5803Barometer+0x48>)
     978:	4798      	blx	r3

    my_barometer->heightCm = 4000;
     97a:	4b0a      	ldr	r3, [pc, #40]	; (9a4 <initMS5803Barometer+0x4c>)
     97c:	6223      	str	r3, [r4, #32]
    my_barometer->pressurePa = 10000;
     97e:	4b0a      	ldr	r3, [pc, #40]	; (9a8 <initMS5803Barometer+0x50>)
     980:	61a3      	str	r3, [r4, #24]
    my_barometer->rawPressureData = 4311550;
     982:	4b0a      	ldr	r3, [pc, #40]	; (9ac <initMS5803Barometer+0x54>)
     984:	60e3      	str	r3, [r4, #12]
    my_barometer->rawTempatureData = 8387300;
     986:	4b0a      	ldr	r3, [pc, #40]	; (9b0 <initMS5803Barometer+0x58>)
     988:	6123      	str	r3, [r4, #16]
    my_barometer->temperatureCelcus = 2000;
     98a:	23fa      	movs	r3, #250	; 0xfa
     98c:	00db      	lsls	r3, r3, #3
     98e:	6163      	str	r3, [r4, #20]




}
     990:	bd70      	pop	{r4, r5, r6, pc}
     992:	46c0      	nop			; (mov r8, r8)
     994:	41004400 	.word	0x41004400
     998:	00000c99 	.word	0x00000c99
     99c:	000006c1 	.word	0x000006c1
     9a0:	000008e9 	.word	0x000008e9
     9a4:	457a0000 	.word	0x457a0000
     9a8:	00002710 	.word	0x00002710
     9ac:	0041c9fe 	.word	0x0041c9fe
     9b0:	007ffae4 	.word	0x007ffae4

000009b4 <sampleTick>:
#include <boardDefines.h>
#include <MS5803.h>



void sampleTick(Altimeter *my_altimeter) {
     9b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     9b6:	465f      	mov	r7, fp
     9b8:	4656      	mov	r6, sl
     9ba:	464d      	mov	r5, r9
     9bc:	4644      	mov	r4, r8
     9be:	b4f0      	push	{r4, r5, r6, r7}
     9c0:	0004      	movs	r4, r0

    my_altimeter->batV = (0.001906 * adc_read(senseBatPin));
     9c2:	4b69      	ldr	r3, [pc, #420]	; (b68 <sampleTick+0x1b4>)
     9c4:	6818      	ldr	r0, [r3, #0]
     9c6:	6859      	ldr	r1, [r3, #4]
     9c8:	4b68      	ldr	r3, [pc, #416]	; (b6c <sampleTick+0x1b8>)
     9ca:	4798      	blx	r3
     9cc:	4b68      	ldr	r3, [pc, #416]	; (b70 <sampleTick+0x1bc>)
     9ce:	4798      	blx	r3
     9d0:	4b68      	ldr	r3, [pc, #416]	; (b74 <sampleTick+0x1c0>)
     9d2:	4699      	mov	r9, r3
     9d4:	4a68      	ldr	r2, [pc, #416]	; (b78 <sampleTick+0x1c4>)
     9d6:	4b69      	ldr	r3, [pc, #420]	; (b7c <sampleTick+0x1c8>)
     9d8:	47c8      	blx	r9
     9da:	4b69      	ldr	r3, [pc, #420]	; (b80 <sampleTick+0x1cc>)
     9dc:	4698      	mov	r8, r3
     9de:	4798      	blx	r3
     9e0:	66a0      	str	r0, [r4, #104]	; 0x68
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     9e2:	4d68      	ldr	r5, [pc, #416]	; (b84 <sampleTick+0x1d0>)
     9e4:	2780      	movs	r7, #128	; 0x80
     9e6:	01ff      	lsls	r7, r7, #7
     9e8:	616f      	str	r7, [r5, #20]
    uint8_t dummy_Tx = 0xFF;
    uint8_t dummy_rx;


    pinLow(cs_baro);
    dummy_rx = spiDataTransfer(SPI1, 0x50);
     9ea:	2150      	movs	r1, #80	; 0x50
     9ec:	2002      	movs	r0, #2
     9ee:	4e66      	ldr	r6, [pc, #408]	; (b88 <sampleTick+0x1d4>)
     9f0:	47b0      	blx	r6
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     9f2:	61af      	str	r7, [r5, #24]
    pinHigh(cs_baro);
    delay_ms(2);
     9f4:	2002      	movs	r0, #2
     9f6:	4b65      	ldr	r3, [pc, #404]	; (b8c <sampleTick+0x1d8>)
     9f8:	469b      	mov	fp, r3
     9fa:	4798      	blx	r3
    my_altimeter->myBarometer.rawTempatureData = readMS5803AdcResults();
     9fc:	4b64      	ldr	r3, [pc, #400]	; (b90 <sampleTick+0x1dc>)
     9fe:	469a      	mov	sl, r3
     a00:	4798      	blx	r3
     a02:	6120      	str	r0, [r4, #16]
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     a04:	616f      	str	r7, [r5, #20]

    pinLow(cs_baro);
    dummy_rx = spiDataTransfer(SPI1, 0x42);
     a06:	2142      	movs	r1, #66	; 0x42
     a08:	2002      	movs	r0, #2
     a0a:	47b0      	blx	r6
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     a0c:	61af      	str	r7, [r5, #24]
    pinHigh(cs_baro);
    delay_ms(2);
     a0e:	2002      	movs	r0, #2
     a10:	47d8      	blx	fp
    my_altimeter->myBarometer.rawPressureData = readMS5803AdcResults();
     a12:	47d0      	blx	sl
     a14:	60e0      	str	r0, [r4, #12]


    ConvertPressureTemperature(&my_altimeter->myBarometer);
     a16:	0020      	movs	r0, r4
     a18:	4b5e      	ldr	r3, [pc, #376]	; (b94 <sampleTick+0x1e0>)
     a1a:	4798      	blx	r3
    pascalToCent(&my_altimeter->myBarometer);
     a1c:	0020      	movs	r0, r4
     a1e:	4b5e      	ldr	r3, [pc, #376]	; (b98 <sampleTick+0x1e4>)
     a20:	4798      	blx	r3
    my_altimeter->myBarometer.heightFeet = 0.03281 * my_altimeter->myBarometer.heightCm;
     a22:	6a20      	ldr	r0, [r4, #32]
     a24:	4b5d      	ldr	r3, [pc, #372]	; (b9c <sampleTick+0x1e8>)
     a26:	4798      	blx	r3
     a28:	4a5d      	ldr	r2, [pc, #372]	; (ba0 <sampleTick+0x1ec>)
     a2a:	4b5e      	ldr	r3, [pc, #376]	; (ba4 <sampleTick+0x1f0>)
     a2c:	47c8      	blx	r9
     a2e:	47c0      	blx	r8
     a30:	6260      	str	r0, [r4, #36]	; 0x24
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     a32:	2780      	movs	r7, #128	; 0x80
     a34:	037f      	lsls	r7, r7, #13
     a36:	616f      	str	r7, [r5, #20]


 

    pinLow(cs_imu);
    dummy_rx = spiDataTransfer(SPI1, ACCEL_XOUT_H);
     a38:	21ba      	movs	r1, #186	; 0xba
     a3a:	2002      	movs	r0, #2
     a3c:	47b0      	blx	r6
    my_altimeter->myIMU.accelXHigh  = spiDataTransfer(SPI1,dummy_Tx);
     a3e:	21ff      	movs	r1, #255	; 0xff
     a40:	2002      	movs	r0, #2
     a42:	47b0      	blx	r6
     a44:	234c      	movs	r3, #76	; 0x4c
     a46:	54e0      	strb	r0, [r4, r3]
    my_altimeter->myIMU.accelXLow  = spiDataTransfer(SPI1,dummy_Tx);
     a48:	21ff      	movs	r1, #255	; 0xff
     a4a:	2002      	movs	r0, #2
     a4c:	47b0      	blx	r6
     a4e:	234d      	movs	r3, #77	; 0x4d
     a50:	54e0      	strb	r0, [r4, r3]
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     a52:	61af      	str	r7, [r5, #24]
    pinHigh(cs_imu);

    //check if last bit in second byte is 1 therefor negative number
    int16_t negativex = (my_altimeter->myIMU.accelXLow & (1 <<7)) != 0;
     a54:	5ce3      	ldrb	r3, [r4, r3]
    if (negativex) {
     a56:	b25a      	sxtb	r2, r3
     a58:	2a00      	cmp	r2, #0
     a5a:	da09      	bge.n	a70 <sampleTick+0xbc>
        // if negative then preform 2's complement to int conversion
        my_altimeter->myIMU.accelX = ((my_altimeter->myIMU.accelXLow | ~((1 << 8) - 1)) << 8 ) | my_altimeter->myIMU.accelXHigh;
     a5c:	224c      	movs	r2, #76	; 0x4c
     a5e:	5ca2      	ldrb	r2, [r4, r2]
     a60:	4851      	ldr	r0, [pc, #324]	; (ba8 <sampleTick+0x1f4>)
     a62:	4310      	orrs	r0, r2
     a64:	021b      	lsls	r3, r3, #8
     a66:	4318      	orrs	r0, r3
     a68:	4b50      	ldr	r3, [pc, #320]	; (bac <sampleTick+0x1f8>)
     a6a:	4798      	blx	r3
     a6c:	62a0      	str	r0, [r4, #40]	; 0x28
     a6e:	e006      	b.n	a7e <sampleTick+0xca>
    } else {
        my_altimeter->myIMU.accelX = (my_altimeter->myIMU.accelXLow << 8) + my_altimeter->myIMU.accelXHigh;
     a70:	021b      	lsls	r3, r3, #8
     a72:	224c      	movs	r2, #76	; 0x4c
     a74:	5ca0      	ldrb	r0, [r4, r2]
     a76:	1818      	adds	r0, r3, r0
     a78:	4b4c      	ldr	r3, [pc, #304]	; (bac <sampleTick+0x1f8>)
     a7a:	4798      	blx	r3
     a7c:	62a0      	str	r0, [r4, #40]	; 0x28
    }
    my_altimeter->myIMU.accelX = my_altimeter->myIMU.accelX *0.00006103;
     a7e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
     a80:	4b46      	ldr	r3, [pc, #280]	; (b9c <sampleTick+0x1e8>)
     a82:	4798      	blx	r3
     a84:	4a4a      	ldr	r2, [pc, #296]	; (bb0 <sampleTick+0x1fc>)
     a86:	4b4b      	ldr	r3, [pc, #300]	; (bb4 <sampleTick+0x200>)
     a88:	4d3a      	ldr	r5, [pc, #232]	; (b74 <sampleTick+0x1c0>)
     a8a:	47a8      	blx	r5
     a8c:	4b3c      	ldr	r3, [pc, #240]	; (b80 <sampleTick+0x1cc>)
     a8e:	4798      	blx	r3
     a90:	62a0      	str	r0, [r4, #40]	; 0x28
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     a92:	4e3c      	ldr	r6, [pc, #240]	; (b84 <sampleTick+0x1d0>)
     a94:	2780      	movs	r7, #128	; 0x80
     a96:	037f      	lsls	r7, r7, #13
     a98:	6177      	str	r7, [r6, #20]



    pinLow(cs_imu);
    dummy_rx = spiDataTransfer(SPI1, ACCEL_YOUT_H);
     a9a:	21bc      	movs	r1, #188	; 0xbc
     a9c:	2002      	movs	r0, #2
     a9e:	4d3a      	ldr	r5, [pc, #232]	; (b88 <sampleTick+0x1d4>)
     aa0:	47a8      	blx	r5
    my_altimeter->myIMU.accelYHigh = spiDataTransfer(SPI1,dummy_Tx);
     aa2:	21ff      	movs	r1, #255	; 0xff
     aa4:	2002      	movs	r0, #2
     aa6:	47a8      	blx	r5
     aa8:	234e      	movs	r3, #78	; 0x4e
     aaa:	54e0      	strb	r0, [r4, r3]
    my_altimeter->myIMU.accelYLow = spiDataTransfer(SPI1,dummy_Tx);
     aac:	21ff      	movs	r1, #255	; 0xff
     aae:	2002      	movs	r0, #2
     ab0:	47a8      	blx	r5
     ab2:	234f      	movs	r3, #79	; 0x4f
     ab4:	54e0      	strb	r0, [r4, r3]
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     ab6:	61b7      	str	r7, [r6, #24]
    pinHigh(cs_imu);

    //check if last bit in second byte is 1 therefor negative number
    int16_t negativey = (my_altimeter->myIMU.accelYLow & (1 <<7)) != 0;
     ab8:	5ce3      	ldrb	r3, [r4, r3]
    if (negativey) {
     aba:	b25a      	sxtb	r2, r3
     abc:	2a00      	cmp	r2, #0
     abe:	da09      	bge.n	ad4 <sampleTick+0x120>
        // if negative then preform 2's complement to int conversion
        my_altimeter->myIMU.accelY = ((my_altimeter->myIMU.accelYLow | ~((1 << 8) - 1)) << 8 ) | my_altimeter->myIMU.accelYHigh;
     ac0:	224e      	movs	r2, #78	; 0x4e
     ac2:	5ca2      	ldrb	r2, [r4, r2]
     ac4:	4838      	ldr	r0, [pc, #224]	; (ba8 <sampleTick+0x1f4>)
     ac6:	4310      	orrs	r0, r2
     ac8:	021b      	lsls	r3, r3, #8
     aca:	4318      	orrs	r0, r3
     acc:	4b37      	ldr	r3, [pc, #220]	; (bac <sampleTick+0x1f8>)
     ace:	4798      	blx	r3
     ad0:	62e0      	str	r0, [r4, #44]	; 0x2c
     ad2:	e006      	b.n	ae2 <sampleTick+0x12e>
    } else {
        my_altimeter->myIMU.accelY = (my_altimeter->myIMU.accelYLow << 8) + my_altimeter->myIMU.accelYHigh;
     ad4:	021b      	lsls	r3, r3, #8
     ad6:	224e      	movs	r2, #78	; 0x4e
     ad8:	5ca0      	ldrb	r0, [r4, r2]
     ada:	1818      	adds	r0, r3, r0
     adc:	4b33      	ldr	r3, [pc, #204]	; (bac <sampleTick+0x1f8>)
     ade:	4798      	blx	r3
     ae0:	62e0      	str	r0, [r4, #44]	; 0x2c
    }
    my_altimeter->myIMU.accelY = my_altimeter->myIMU.accelY *0.00006103;
     ae2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
     ae4:	4b2d      	ldr	r3, [pc, #180]	; (b9c <sampleTick+0x1e8>)
     ae6:	4798      	blx	r3
     ae8:	4a31      	ldr	r2, [pc, #196]	; (bb0 <sampleTick+0x1fc>)
     aea:	4b32      	ldr	r3, [pc, #200]	; (bb4 <sampleTick+0x200>)
     aec:	4d21      	ldr	r5, [pc, #132]	; (b74 <sampleTick+0x1c0>)
     aee:	47a8      	blx	r5
     af0:	4b23      	ldr	r3, [pc, #140]	; (b80 <sampleTick+0x1cc>)
     af2:	4798      	blx	r3
     af4:	62e0      	str	r0, [r4, #44]	; 0x2c
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     af6:	4e23      	ldr	r6, [pc, #140]	; (b84 <sampleTick+0x1d0>)
     af8:	2780      	movs	r7, #128	; 0x80
     afa:	037f      	lsls	r7, r7, #13
     afc:	6177      	str	r7, [r6, #20]


    pinLow(cs_imu);
    dummy_rx = spiDataTransfer(SPI1, ACCEL_ZOUT_H);
     afe:	21be      	movs	r1, #190	; 0xbe
     b00:	2002      	movs	r0, #2
     b02:	4d21      	ldr	r5, [pc, #132]	; (b88 <sampleTick+0x1d4>)
     b04:	47a8      	blx	r5
    my_altimeter->myIMU.accelZHigh = spiDataTransfer(SPI1,dummy_Tx);
     b06:	21ff      	movs	r1, #255	; 0xff
     b08:	2002      	movs	r0, #2
     b0a:	47a8      	blx	r5
     b0c:	2350      	movs	r3, #80	; 0x50
     b0e:	54e0      	strb	r0, [r4, r3]
    my_altimeter->myIMU.accelZLow = spiDataTransfer(SPI1,dummy_Tx);
     b10:	21ff      	movs	r1, #255	; 0xff
     b12:	2002      	movs	r0, #2
     b14:	47a8      	blx	r5
     b16:	2351      	movs	r3, #81	; 0x51
     b18:	54e0      	strb	r0, [r4, r3]
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     b1a:	61b7      	str	r7, [r6, #24]
    pinHigh(cs_imu);

    //check if last bit in second byte is 1 therefor negative number
    int16_t negativez = (my_altimeter->myIMU.accelZLow & (1 <<7)) != 0;
     b1c:	5ce0      	ldrb	r0, [r4, r3]
    if (negativez) {
     b1e:	b243      	sxtb	r3, r0
     b20:	2b00      	cmp	r3, #0
     b22:	da09      	bge.n	b38 <sampleTick+0x184>
        // if negative then preform 2's complement to int conversion
        my_altimeter->myIMU.accelZ = ((my_altimeter->myIMU.accelZLow | ~((1 << 8) - 1)) << 8 ) | my_altimeter->myIMU.accelZHigh;
     b24:	2350      	movs	r3, #80	; 0x50
     b26:	5ce3      	ldrb	r3, [r4, r3]
     b28:	4a1f      	ldr	r2, [pc, #124]	; (ba8 <sampleTick+0x1f4>)
     b2a:	4313      	orrs	r3, r2
     b2c:	0200      	lsls	r0, r0, #8
     b2e:	4318      	orrs	r0, r3
     b30:	4b1e      	ldr	r3, [pc, #120]	; (bac <sampleTick+0x1f8>)
     b32:	4798      	blx	r3
     b34:	6320      	str	r0, [r4, #48]	; 0x30
     b36:	e006      	b.n	b46 <sampleTick+0x192>
    } else {
        my_altimeter->myIMU.accelZ = (my_altimeter->myIMU.accelZLow << 8) + my_altimeter->myIMU.accelZHigh;
     b38:	0200      	lsls	r0, r0, #8
     b3a:	2350      	movs	r3, #80	; 0x50
     b3c:	5ce3      	ldrb	r3, [r4, r3]
     b3e:	18c0      	adds	r0, r0, r3
     b40:	4b1a      	ldr	r3, [pc, #104]	; (bac <sampleTick+0x1f8>)
     b42:	4798      	blx	r3
     b44:	6320      	str	r0, [r4, #48]	; 0x30
    }
    my_altimeter->myIMU.accelZ = my_altimeter->myIMU.accelZ *0.00006103;
     b46:	6b20      	ldr	r0, [r4, #48]	; 0x30
     b48:	4b14      	ldr	r3, [pc, #80]	; (b9c <sampleTick+0x1e8>)
     b4a:	4798      	blx	r3
     b4c:	4a18      	ldr	r2, [pc, #96]	; (bb0 <sampleTick+0x1fc>)
     b4e:	4b19      	ldr	r3, [pc, #100]	; (bb4 <sampleTick+0x200>)
     b50:	4d08      	ldr	r5, [pc, #32]	; (b74 <sampleTick+0x1c0>)
     b52:	47a8      	blx	r5
     b54:	4b0a      	ldr	r3, [pc, #40]	; (b80 <sampleTick+0x1cc>)
     b56:	4798      	blx	r3
     b58:	6320      	str	r0, [r4, #48]	; 0x30





}
     b5a:	bc3c      	pop	{r2, r3, r4, r5}
     b5c:	4690      	mov	r8, r2
     b5e:	4699      	mov	r9, r3
     b60:	46a2      	mov	sl, r4
     b62:	46ab      	mov	fp, r5
     b64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     b66:	46c0      	nop			; (mov r8, r8)
     b68:	00001df4 	.word	0x00001df4
     b6c:	00000525 	.word	0x00000525
     b70:	0000182d 	.word	0x0000182d
     b74:	00001339 	.word	0x00001339
     b78:	eaa2a0a9 	.word	0xeaa2a0a9
     b7c:	3f5f3a57 	.word	0x3f5f3a57
     b80:	00001959 	.word	0x00001959
     b84:	41004400 	.word	0x41004400
     b88:	00000c99 	.word	0x00000c99
     b8c:	000006c1 	.word	0x000006c1
     b90:	0000074d 	.word	0x0000074d
     b94:	00000795 	.word	0x00000795
     b98:	0000088d 	.word	0x0000088d
     b9c:	000018b1 	.word	0x000018b1
     ba0:	e9f6a93f 	.word	0xe9f6a93f
     ba4:	3fa0cc78 	.word	0x3fa0cc78
     ba8:	ffff0000 	.word	0xffff0000
     bac:	0000122d 	.word	0x0000122d
     bb0:	d52535ef 	.word	0xd52535ef
     bb4:	3f0fff4e 	.word	0x3f0fff4e

00000bb8 <sercomClockEnable>:
#include <util.h>

void sercomClockEnable(SercomId id, uint32_t clock_channel, u8_t divider) {
     bb8:	b570      	push	{r4, r5, r6, lr}
     bba:	0004      	movs	r4, r0
     bbc:	000d      	movs	r5, r1
    // prevent this clock write from changing any other clocks
    PM->APBCMASK.reg |= 1 << (PM_APBCMASK_SERCOM0_Pos + id);
     bbe:	480e      	ldr	r0, [pc, #56]	; (bf8 <sercomClockEnable+0x40>)
     bc0:	6a01      	ldr	r1, [r0, #32]
     bc2:	1ca6      	adds	r6, r4, #2
     bc4:	2301      	movs	r3, #1
     bc6:	40b3      	lsls	r3, r6
     bc8:	430b      	orrs	r3, r1
     bca:	6203      	str	r3, [r0, #32]


    if (clock_channel != 0) {
     bcc:	2d00      	cmp	r5, #0
     bce:	d003      	beq.n	bd8 <sercomClockEnable+0x20>
        // clock generators 3-8 have 8 division factor bits - DIV[7:0]
        gclkEnable(clock_channel, GCLK_SOURCE_DFLL48M, divider);
     bd0:	2107      	movs	r1, #7
     bd2:	0028      	movs	r0, r5
     bd4:	4b09      	ldr	r3, [pc, #36]	; (bfc <sercomClockEnable+0x44>)
     bd6:	4798      	blx	r3
    }


    // attach clock
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
     bd8:	0229      	lsls	r1, r5, #8
     bda:	23f0      	movs	r3, #240	; 0xf0
     bdc:	011b      	lsls	r3, r3, #4
     bde:	4019      	ands	r1, r3
     be0:	2380      	movs	r3, #128	; 0x80
     be2:	01db      	lsls	r3, r3, #7
     be4:	4319      	orrs	r1, r3
     be6:	0023      	movs	r3, r4
     be8:	3314      	adds	r3, #20
     bea:	243f      	movs	r4, #63	; 0x3f
     bec:	401c      	ands	r4, r3
     bee:	430c      	orrs	r4, r1
     bf0:	4b03      	ldr	r3, [pc, #12]	; (c00 <sercomClockEnable+0x48>)
     bf2:	805c      	strh	r4, [r3, #2]
                        GCLK_CLKCTRL_GEN(clock_channel) |
                        GCLK_CLKCTRL_ID(SERCOM0_GCLK_ID_CORE + id);
}
     bf4:	bd70      	pop	{r4, r5, r6, pc}
     bf6:	46c0      	nop			; (mov r8, r8)
     bf8:	40000400 	.word	0x40000400
     bfc:	00000645 	.word	0x00000645
     c00:	40000c00 	.word	0x40000c00

00000c04 <sercomReset>:
//sample.c
void sampleTick(Altimeter *my_altimeter);

//dma.c
inline static Sercom* sercom(SercomId id) {
	return (Sercom*) (0x42000800U + id * 1024);
     c04:	0280      	lsls	r0, r0, #10
     c06:	4b05      	ldr	r3, [pc, #20]	; (c1c <sercomReset+0x18>)
     c08:	469c      	mov	ip, r3
     c0a:	4460      	add	r0, ip


void sercomReset(SercomId id) {
    sercom(id)->SPI.CTRLA.reg = SERCOM_SPI_CTRLA_SWRST;
     c0c:	2301      	movs	r3, #1
     c0e:	6003      	str	r3, [r0, #0]
    while(sercom(id)->SPI.CTRLA.reg & SERCOM_SPI_CTRLA_SWRST);
     c10:	2201      	movs	r2, #1
     c12:	6803      	ldr	r3, [r0, #0]
     c14:	421a      	tst	r2, r3
     c16:	d1fc      	bne.n	c12 <sercomReset+0xe>
}
     c18:	4770      	bx	lr
     c1a:	46c0      	nop			; (mov r8, r8)
     c1c:	42000800 	.word	0x42000800

00000c20 <sercomSpiMasterInit>:
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
}


void sercomSpiMasterInit(SercomId id, u32_t dipo, u32_t dopo, bool cpol, bool cpha, u8_t baud) {
     c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     c22:	464f      	mov	r7, r9
     c24:	4646      	mov	r6, r8
     c26:	b4c0      	push	{r6, r7}
     c28:	0006      	movs	r6, r0
     c2a:	4688      	mov	r8, r1
     c2c:	0017      	movs	r7, r2
     c2e:	001d      	movs	r5, r3
     c30:	ab08      	add	r3, sp, #32
     c32:	781c      	ldrb	r4, [r3, #0]
     c34:	ab09      	add	r3, sp, #36	; 0x24
     c36:	781b      	ldrb	r3, [r3, #0]
     c38:	4699      	mov	r9, r3
		
    sercomReset(id);
     c3a:	4b15      	ldr	r3, [pc, #84]	; (c90 <sercomSpiMasterInit+0x70>)
     c3c:	4798      	blx	r3
     c3e:	02b0      	lsls	r0, r6, #10
     c40:	4b14      	ldr	r3, [pc, #80]	; (c94 <sercomSpiMasterInit+0x74>)
     c42:	469c      	mov	ip, r3
     c44:	4460      	add	r0, ip
	
    sercom(id)->SPI.CTRLB.reg
        = SERCOM_SPI_CTRLB_RXEN;
     c46:	2380      	movs	r3, #128	; 0x80
     c48:	029b      	lsls	r3, r3, #10
     c4a:	6043      	str	r3, [r0, #4]

    sercom(id)->SPI.BAUD.reg = baud;
     c4c:	464b      	mov	r3, r9
     c4e:	7303      	strb	r3, [r0, #12]

    sercom(id)->SPI.CTRLA.reg
        = SERCOM_SPI_CTRLA_ENABLE
          | SERCOM_SPI_CTRLA_MODE_SPI_MASTER
          | SERCOM_SPI_CTRLA_DIPO(dipo)
     c50:	4643      	mov	r3, r8
     c52:	0519      	lsls	r1, r3, #20
     c54:	23c0      	movs	r3, #192	; 0xc0
     c56:	039b      	lsls	r3, r3, #14
     c58:	4019      	ands	r1, r3
     c5a:	000e      	movs	r6, r1
     c5c:	0439      	lsls	r1, r7, #16
     c5e:	23c0      	movs	r3, #192	; 0xc0
     c60:	029b      	lsls	r3, r3, #10
     c62:	4019      	ands	r1, r3
     c64:	230e      	movs	r3, #14
     c66:	000a      	movs	r2, r1
     c68:	431a      	orrs	r2, r3
          | SERCOM_SPI_CTRLA_DOPO(dopo)
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
     c6a:	1e6b      	subs	r3, r5, #1
     c6c:	419d      	sbcs	r5, r3
     c6e:	076d      	lsls	r5, r5, #29
     c70:	0031      	movs	r1, r6
     c72:	4311      	orrs	r1, r2
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
     c74:	1e63      	subs	r3, r4, #1
     c76:	419c      	sbcs	r4, r3
     c78:	0722      	lsls	r2, r4, #28
     c7a:	002c      	movs	r4, r5
     c7c:	430c      	orrs	r4, r1
     c7e:	4314      	orrs	r4, r2
        = SERCOM_SPI_CTRLB_RXEN;

    sercom(id)->SPI.BAUD.reg = baud;

    sercom(id)->SPI.CTRLA.reg
        = SERCOM_SPI_CTRLA_ENABLE
     c80:	6004      	str	r4, [r0, #0]
		};
	}
}

static inline void SPI_sync(SercomId id) {
	while  (sercom(id)->SPI.SYNCBUSY.bit.CTRLB);
     c82:	69c3      	ldr	r3, [r0, #28]
     c84:	075b      	lsls	r3, r3, #29
     c86:	d4fc      	bmi.n	c82 <sercomSpiMasterInit+0x62>
          | SERCOM_SPI_CTRLA_DOPO(dopo)
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);

    SPI_sync(id);
}
     c88:	bc0c      	pop	{r2, r3}
     c8a:	4690      	mov	r8, r2
     c8c:	4699      	mov	r9, r3
     c8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     c90:	00000c05 	.word	0x00000c05
     c94:	42000800 	.word	0x42000800

00000c98 <spiDataTransfer>:
//sample.c
void sampleTick(Altimeter *my_altimeter);

//dma.c
inline static Sercom* sercom(SercomId id) {
	return (Sercom*) (0x42000800U + id * 1024);
     c98:	0280      	lsls	r0, r0, #10
     c9a:	4b05      	ldr	r3, [pc, #20]	; (cb0 <spiDataTransfer+0x18>)
     c9c:	469c      	mov	ip, r3
     c9e:	4460      	add	r0, ip
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
}

u8_t spiDataTransfer(SercomId id, u8_t data) {
    sercom(id)->SPI.DATA.reg = data;
     ca0:	6281      	str	r1, [r0, #40]	; 0x28
    while(sercom(id)->SPI.INTFLAG.bit.RXC == 0);
     ca2:	7e03      	ldrb	r3, [r0, #24]
     ca4:	075b      	lsls	r3, r3, #29
     ca6:	d5fc      	bpl.n	ca2 <spiDataTransfer+0xa>
    return sercom(id)->SPI.DATA.reg;
     ca8:	6a80      	ldr	r0, [r0, #40]	; 0x28
     caa:	b2c0      	uxtb	r0, r0
}
     cac:	4770      	bx	lr
     cae:	46c0      	nop			; (mov r8, r8)
     cb0:	42000800 	.word	0x42000800

00000cb4 <__aeabi_lmul>:
     cb4:	b5f0      	push	{r4, r5, r6, r7, lr}
     cb6:	464f      	mov	r7, r9
     cb8:	4646      	mov	r6, r8
     cba:	b4c0      	push	{r6, r7}
     cbc:	0416      	lsls	r6, r2, #16
     cbe:	0c36      	lsrs	r6, r6, #16
     cc0:	4699      	mov	r9, r3
     cc2:	0033      	movs	r3, r6
     cc4:	0405      	lsls	r5, r0, #16
     cc6:	0c2c      	lsrs	r4, r5, #16
     cc8:	0c07      	lsrs	r7, r0, #16
     cca:	0c15      	lsrs	r5, r2, #16
     ccc:	4363      	muls	r3, r4
     cce:	437e      	muls	r6, r7
     cd0:	436f      	muls	r7, r5
     cd2:	4365      	muls	r5, r4
     cd4:	0c1c      	lsrs	r4, r3, #16
     cd6:	19ad      	adds	r5, r5, r6
     cd8:	1964      	adds	r4, r4, r5
     cda:	469c      	mov	ip, r3
     cdc:	42a6      	cmp	r6, r4
     cde:	d903      	bls.n	ce8 <__aeabi_lmul+0x34>
     ce0:	2380      	movs	r3, #128	; 0x80
     ce2:	025b      	lsls	r3, r3, #9
     ce4:	4698      	mov	r8, r3
     ce6:	4447      	add	r7, r8
     ce8:	4663      	mov	r3, ip
     cea:	0c25      	lsrs	r5, r4, #16
     cec:	19ef      	adds	r7, r5, r7
     cee:	041d      	lsls	r5, r3, #16
     cf0:	464b      	mov	r3, r9
     cf2:	434a      	muls	r2, r1
     cf4:	4343      	muls	r3, r0
     cf6:	0c2d      	lsrs	r5, r5, #16
     cf8:	0424      	lsls	r4, r4, #16
     cfa:	1964      	adds	r4, r4, r5
     cfc:	1899      	adds	r1, r3, r2
     cfe:	19c9      	adds	r1, r1, r7
     d00:	0020      	movs	r0, r4
     d02:	bc0c      	pop	{r2, r3}
     d04:	4690      	mov	r8, r2
     d06:	4699      	mov	r9, r3
     d08:	bdf0      	pop	{r4, r5, r6, r7, pc}
     d0a:	46c0      	nop			; (mov r8, r8)

00000d0c <__aeabi_fadd>:
     d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     d0e:	024a      	lsls	r2, r1, #9
     d10:	0243      	lsls	r3, r0, #9
     d12:	0044      	lsls	r4, r0, #1
     d14:	004e      	lsls	r6, r1, #1
     d16:	0fc5      	lsrs	r5, r0, #31
     d18:	0e24      	lsrs	r4, r4, #24
     d1a:	0028      	movs	r0, r5
     d1c:	099b      	lsrs	r3, r3, #6
     d1e:	0e36      	lsrs	r6, r6, #24
     d20:	0fc9      	lsrs	r1, r1, #31
     d22:	0992      	lsrs	r2, r2, #6
     d24:	428d      	cmp	r5, r1
     d26:	d059      	beq.n	ddc <__aeabi_fadd+0xd0>
     d28:	1ba0      	subs	r0, r4, r6
     d2a:	2800      	cmp	r0, #0
     d2c:	dc00      	bgt.n	d30 <__aeabi_fadd+0x24>
     d2e:	e08d      	b.n	e4c <__aeabi_fadd+0x140>
     d30:	2e00      	cmp	r6, #0
     d32:	d11a      	bne.n	d6a <__aeabi_fadd+0x5e>
     d34:	2a00      	cmp	r2, #0
     d36:	d000      	beq.n	d3a <__aeabi_fadd+0x2e>
     d38:	e079      	b.n	e2e <__aeabi_fadd+0x122>
     d3a:	075a      	lsls	r2, r3, #29
     d3c:	d004      	beq.n	d48 <__aeabi_fadd+0x3c>
     d3e:	220f      	movs	r2, #15
     d40:	401a      	ands	r2, r3
     d42:	2a04      	cmp	r2, #4
     d44:	d000      	beq.n	d48 <__aeabi_fadd+0x3c>
     d46:	3304      	adds	r3, #4
     d48:	015a      	lsls	r2, r3, #5
     d4a:	d538      	bpl.n	dbe <__aeabi_fadd+0xb2>
     d4c:	3401      	adds	r4, #1
     d4e:	2cff      	cmp	r4, #255	; 0xff
     d50:	d100      	bne.n	d54 <__aeabi_fadd+0x48>
     d52:	e089      	b.n	e68 <__aeabi_fadd+0x15c>
     d54:	0028      	movs	r0, r5
     d56:	019b      	lsls	r3, r3, #6
     d58:	0a5b      	lsrs	r3, r3, #9
     d5a:	b2e4      	uxtb	r4, r4
     d5c:	025b      	lsls	r3, r3, #9
     d5e:	05e4      	lsls	r4, r4, #23
     d60:	0a5b      	lsrs	r3, r3, #9
     d62:	4323      	orrs	r3, r4
     d64:	07c0      	lsls	r0, r0, #31
     d66:	4318      	orrs	r0, r3
     d68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     d6a:	2cff      	cmp	r4, #255	; 0xff
     d6c:	d0e5      	beq.n	d3a <__aeabi_fadd+0x2e>
     d6e:	2180      	movs	r1, #128	; 0x80
     d70:	04c9      	lsls	r1, r1, #19
     d72:	430a      	orrs	r2, r1
     d74:	281b      	cmp	r0, #27
     d76:	dd00      	ble.n	d7a <__aeabi_fadd+0x6e>
     d78:	e089      	b.n	e8e <__aeabi_fadd+0x182>
     d7a:	0016      	movs	r6, r2
     d7c:	2120      	movs	r1, #32
     d7e:	40c6      	lsrs	r6, r0
     d80:	1a08      	subs	r0, r1, r0
     d82:	4082      	lsls	r2, r0
     d84:	1e51      	subs	r1, r2, #1
     d86:	418a      	sbcs	r2, r1
     d88:	4332      	orrs	r2, r6
     d8a:	1a9b      	subs	r3, r3, r2
     d8c:	015a      	lsls	r2, r3, #5
     d8e:	d514      	bpl.n	dba <__aeabi_fadd+0xae>
     d90:	019b      	lsls	r3, r3, #6
     d92:	099e      	lsrs	r6, r3, #6
     d94:	0030      	movs	r0, r6
     d96:	f000 fe6b 	bl	1a70 <__clzsi2>
     d9a:	3805      	subs	r0, #5
     d9c:	4086      	lsls	r6, r0
     d9e:	4284      	cmp	r4, r0
     da0:	dc65      	bgt.n	e6e <__aeabi_fadd+0x162>
     da2:	1b04      	subs	r4, r0, r4
     da4:	0033      	movs	r3, r6
     da6:	2020      	movs	r0, #32
     da8:	3401      	adds	r4, #1
     daa:	40e3      	lsrs	r3, r4
     dac:	1b04      	subs	r4, r0, r4
     dae:	40a6      	lsls	r6, r4
     db0:	1e72      	subs	r2, r6, #1
     db2:	4196      	sbcs	r6, r2
     db4:	2400      	movs	r4, #0
     db6:	4333      	orrs	r3, r6
     db8:	e7bf      	b.n	d3a <__aeabi_fadd+0x2e>
     dba:	075a      	lsls	r2, r3, #29
     dbc:	d1bf      	bne.n	d3e <__aeabi_fadd+0x32>
     dbe:	08df      	lsrs	r7, r3, #3
     dc0:	0028      	movs	r0, r5
     dc2:	2cff      	cmp	r4, #255	; 0xff
     dc4:	d12f      	bne.n	e26 <__aeabi_fadd+0x11a>
     dc6:	2f00      	cmp	r7, #0
     dc8:	d100      	bne.n	dcc <__aeabi_fadd+0xc0>
     dca:	e087      	b.n	edc <__aeabi_fadd+0x1d0>
     dcc:	2280      	movs	r2, #128	; 0x80
     dce:	03d2      	lsls	r2, r2, #15
     dd0:	0013      	movs	r3, r2
     dd2:	433b      	orrs	r3, r7
     dd4:	025b      	lsls	r3, r3, #9
     dd6:	0a5b      	lsrs	r3, r3, #9
     dd8:	24ff      	movs	r4, #255	; 0xff
     dda:	e7bf      	b.n	d5c <__aeabi_fadd+0x50>
     ddc:	1ba1      	subs	r1, r4, r6
     dde:	2900      	cmp	r1, #0
     de0:	dd49      	ble.n	e76 <__aeabi_fadd+0x16a>
     de2:	2e00      	cmp	r6, #0
     de4:	d029      	beq.n	e3a <__aeabi_fadd+0x12e>
     de6:	2cff      	cmp	r4, #255	; 0xff
     de8:	d0a7      	beq.n	d3a <__aeabi_fadd+0x2e>
     dea:	2680      	movs	r6, #128	; 0x80
     dec:	04f6      	lsls	r6, r6, #19
     dee:	4332      	orrs	r2, r6
     df0:	291b      	cmp	r1, #27
     df2:	dd00      	ble.n	df6 <__aeabi_fadd+0xea>
     df4:	e08d      	b.n	f12 <__aeabi_fadd+0x206>
     df6:	0017      	movs	r7, r2
     df8:	2620      	movs	r6, #32
     dfa:	40cf      	lsrs	r7, r1
     dfc:	1a71      	subs	r1, r6, r1
     dfe:	408a      	lsls	r2, r1
     e00:	1e51      	subs	r1, r2, #1
     e02:	418a      	sbcs	r2, r1
     e04:	433a      	orrs	r2, r7
     e06:	189b      	adds	r3, r3, r2
     e08:	015a      	lsls	r2, r3, #5
     e0a:	d5d6      	bpl.n	dba <__aeabi_fadd+0xae>
     e0c:	3401      	adds	r4, #1
     e0e:	2cff      	cmp	r4, #255	; 0xff
     e10:	d064      	beq.n	edc <__aeabi_fadd+0x1d0>
     e12:	2201      	movs	r2, #1
     e14:	4976      	ldr	r1, [pc, #472]	; (ff0 <__aeabi_fadd+0x2e4>)
     e16:	401a      	ands	r2, r3
     e18:	085b      	lsrs	r3, r3, #1
     e1a:	400b      	ands	r3, r1
     e1c:	4313      	orrs	r3, r2
     e1e:	e78c      	b.n	d3a <__aeabi_fadd+0x2e>
     e20:	1e03      	subs	r3, r0, #0
     e22:	d1ca      	bne.n	dba <__aeabi_fadd+0xae>
     e24:	2000      	movs	r0, #0
     e26:	027b      	lsls	r3, r7, #9
     e28:	0a5b      	lsrs	r3, r3, #9
     e2a:	b2e4      	uxtb	r4, r4
     e2c:	e796      	b.n	d5c <__aeabi_fadd+0x50>
     e2e:	3801      	subs	r0, #1
     e30:	2800      	cmp	r0, #0
     e32:	d0aa      	beq.n	d8a <__aeabi_fadd+0x7e>
     e34:	2cff      	cmp	r4, #255	; 0xff
     e36:	d19d      	bne.n	d74 <__aeabi_fadd+0x68>
     e38:	e77f      	b.n	d3a <__aeabi_fadd+0x2e>
     e3a:	2a00      	cmp	r2, #0
     e3c:	d100      	bne.n	e40 <__aeabi_fadd+0x134>
     e3e:	e77c      	b.n	d3a <__aeabi_fadd+0x2e>
     e40:	3901      	subs	r1, #1
     e42:	2900      	cmp	r1, #0
     e44:	d0df      	beq.n	e06 <__aeabi_fadd+0xfa>
     e46:	2cff      	cmp	r4, #255	; 0xff
     e48:	d1d2      	bne.n	df0 <__aeabi_fadd+0xe4>
     e4a:	e776      	b.n	d3a <__aeabi_fadd+0x2e>
     e4c:	2800      	cmp	r0, #0
     e4e:	d120      	bne.n	e92 <__aeabi_fadd+0x186>
     e50:	1c60      	adds	r0, r4, #1
     e52:	b2c0      	uxtb	r0, r0
     e54:	2801      	cmp	r0, #1
     e56:	dd53      	ble.n	f00 <__aeabi_fadd+0x1f4>
     e58:	2780      	movs	r7, #128	; 0x80
     e5a:	1a9e      	subs	r6, r3, r2
     e5c:	04ff      	lsls	r7, r7, #19
     e5e:	4037      	ands	r7, r6
     e60:	d02f      	beq.n	ec2 <__aeabi_fadd+0x1b6>
     e62:	1ad6      	subs	r6, r2, r3
     e64:	000d      	movs	r5, r1
     e66:	e795      	b.n	d94 <__aeabi_fadd+0x88>
     e68:	0028      	movs	r0, r5
     e6a:	2300      	movs	r3, #0
     e6c:	e776      	b.n	d5c <__aeabi_fadd+0x50>
     e6e:	4b61      	ldr	r3, [pc, #388]	; (ff4 <__aeabi_fadd+0x2e8>)
     e70:	1a24      	subs	r4, r4, r0
     e72:	4033      	ands	r3, r6
     e74:	e761      	b.n	d3a <__aeabi_fadd+0x2e>
     e76:	2900      	cmp	r1, #0
     e78:	d14d      	bne.n	f16 <__aeabi_fadd+0x20a>
     e7a:	1c61      	adds	r1, r4, #1
     e7c:	b2ce      	uxtb	r6, r1
     e7e:	2e01      	cmp	r6, #1
     e80:	dd2f      	ble.n	ee2 <__aeabi_fadd+0x1d6>
     e82:	29ff      	cmp	r1, #255	; 0xff
     e84:	d02a      	beq.n	edc <__aeabi_fadd+0x1d0>
     e86:	189b      	adds	r3, r3, r2
     e88:	085b      	lsrs	r3, r3, #1
     e8a:	000c      	movs	r4, r1
     e8c:	e755      	b.n	d3a <__aeabi_fadd+0x2e>
     e8e:	2201      	movs	r2, #1
     e90:	e77b      	b.n	d8a <__aeabi_fadd+0x7e>
     e92:	2c00      	cmp	r4, #0
     e94:	d11b      	bne.n	ece <__aeabi_fadd+0x1c2>
     e96:	2b00      	cmp	r3, #0
     e98:	d05b      	beq.n	f52 <__aeabi_fadd+0x246>
     e9a:	43c0      	mvns	r0, r0
     e9c:	2800      	cmp	r0, #0
     e9e:	d00c      	beq.n	eba <__aeabi_fadd+0x1ae>
     ea0:	2eff      	cmp	r6, #255	; 0xff
     ea2:	d07e      	beq.n	fa2 <__aeabi_fadd+0x296>
     ea4:	281b      	cmp	r0, #27
     ea6:	dd00      	ble.n	eaa <__aeabi_fadd+0x19e>
     ea8:	e092      	b.n	fd0 <__aeabi_fadd+0x2c4>
     eaa:	001d      	movs	r5, r3
     eac:	2420      	movs	r4, #32
     eae:	40c5      	lsrs	r5, r0
     eb0:	1a20      	subs	r0, r4, r0
     eb2:	4083      	lsls	r3, r0
     eb4:	1e58      	subs	r0, r3, #1
     eb6:	4183      	sbcs	r3, r0
     eb8:	432b      	orrs	r3, r5
     eba:	1ad3      	subs	r3, r2, r3
     ebc:	0034      	movs	r4, r6
     ebe:	000d      	movs	r5, r1
     ec0:	e764      	b.n	d8c <__aeabi_fadd+0x80>
     ec2:	2e00      	cmp	r6, #0
     ec4:	d000      	beq.n	ec8 <__aeabi_fadd+0x1bc>
     ec6:	e765      	b.n	d94 <__aeabi_fadd+0x88>
     ec8:	2000      	movs	r0, #0
     eca:	2400      	movs	r4, #0
     ecc:	e7ab      	b.n	e26 <__aeabi_fadd+0x11a>
     ece:	2eff      	cmp	r6, #255	; 0xff
     ed0:	d067      	beq.n	fa2 <__aeabi_fadd+0x296>
     ed2:	2480      	movs	r4, #128	; 0x80
     ed4:	04e4      	lsls	r4, r4, #19
     ed6:	4240      	negs	r0, r0
     ed8:	4323      	orrs	r3, r4
     eda:	e7e3      	b.n	ea4 <__aeabi_fadd+0x198>
     edc:	24ff      	movs	r4, #255	; 0xff
     ede:	2300      	movs	r3, #0
     ee0:	e73c      	b.n	d5c <__aeabi_fadd+0x50>
     ee2:	2c00      	cmp	r4, #0
     ee4:	d161      	bne.n	faa <__aeabi_fadd+0x29e>
     ee6:	2b00      	cmp	r3, #0
     ee8:	d07e      	beq.n	fe8 <__aeabi_fadd+0x2dc>
     eea:	2a00      	cmp	r2, #0
     eec:	d100      	bne.n	ef0 <__aeabi_fadd+0x1e4>
     eee:	e724      	b.n	d3a <__aeabi_fadd+0x2e>
     ef0:	189b      	adds	r3, r3, r2
     ef2:	015a      	lsls	r2, r3, #5
     ef4:	d400      	bmi.n	ef8 <__aeabi_fadd+0x1ec>
     ef6:	e760      	b.n	dba <__aeabi_fadd+0xae>
     ef8:	4a3e      	ldr	r2, [pc, #248]	; (ff4 <__aeabi_fadd+0x2e8>)
     efa:	000c      	movs	r4, r1
     efc:	4013      	ands	r3, r2
     efe:	e71c      	b.n	d3a <__aeabi_fadd+0x2e>
     f00:	2c00      	cmp	r4, #0
     f02:	d11e      	bne.n	f42 <__aeabi_fadd+0x236>
     f04:	2b00      	cmp	r3, #0
     f06:	d12f      	bne.n	f68 <__aeabi_fadd+0x25c>
     f08:	2a00      	cmp	r2, #0
     f0a:	d066      	beq.n	fda <__aeabi_fadd+0x2ce>
     f0c:	0013      	movs	r3, r2
     f0e:	000d      	movs	r5, r1
     f10:	e713      	b.n	d3a <__aeabi_fadd+0x2e>
     f12:	2201      	movs	r2, #1
     f14:	e777      	b.n	e06 <__aeabi_fadd+0xfa>
     f16:	2c00      	cmp	r4, #0
     f18:	d11f      	bne.n	f5a <__aeabi_fadd+0x24e>
     f1a:	2b00      	cmp	r3, #0
     f1c:	d05a      	beq.n	fd4 <__aeabi_fadd+0x2c8>
     f1e:	43c9      	mvns	r1, r1
     f20:	2900      	cmp	r1, #0
     f22:	d00b      	beq.n	f3c <__aeabi_fadd+0x230>
     f24:	2eff      	cmp	r6, #255	; 0xff
     f26:	d050      	beq.n	fca <__aeabi_fadd+0x2be>
     f28:	291b      	cmp	r1, #27
     f2a:	dc5f      	bgt.n	fec <__aeabi_fadd+0x2e0>
     f2c:	001f      	movs	r7, r3
     f2e:	2420      	movs	r4, #32
     f30:	40cf      	lsrs	r7, r1
     f32:	1a61      	subs	r1, r4, r1
     f34:	408b      	lsls	r3, r1
     f36:	1e59      	subs	r1, r3, #1
     f38:	418b      	sbcs	r3, r1
     f3a:	433b      	orrs	r3, r7
     f3c:	189b      	adds	r3, r3, r2
     f3e:	0034      	movs	r4, r6
     f40:	e762      	b.n	e08 <__aeabi_fadd+0xfc>
     f42:	2b00      	cmp	r3, #0
     f44:	d11c      	bne.n	f80 <__aeabi_fadd+0x274>
     f46:	2a00      	cmp	r2, #0
     f48:	d04a      	beq.n	fe0 <__aeabi_fadd+0x2d4>
     f4a:	0013      	movs	r3, r2
     f4c:	000d      	movs	r5, r1
     f4e:	24ff      	movs	r4, #255	; 0xff
     f50:	e6f3      	b.n	d3a <__aeabi_fadd+0x2e>
     f52:	0013      	movs	r3, r2
     f54:	0034      	movs	r4, r6
     f56:	000d      	movs	r5, r1
     f58:	e6ef      	b.n	d3a <__aeabi_fadd+0x2e>
     f5a:	2eff      	cmp	r6, #255	; 0xff
     f5c:	d035      	beq.n	fca <__aeabi_fadd+0x2be>
     f5e:	2480      	movs	r4, #128	; 0x80
     f60:	04e4      	lsls	r4, r4, #19
     f62:	4249      	negs	r1, r1
     f64:	4323      	orrs	r3, r4
     f66:	e7df      	b.n	f28 <__aeabi_fadd+0x21c>
     f68:	2a00      	cmp	r2, #0
     f6a:	d100      	bne.n	f6e <__aeabi_fadd+0x262>
     f6c:	e6e5      	b.n	d3a <__aeabi_fadd+0x2e>
     f6e:	2780      	movs	r7, #128	; 0x80
     f70:	1a98      	subs	r0, r3, r2
     f72:	04ff      	lsls	r7, r7, #19
     f74:	4007      	ands	r7, r0
     f76:	d100      	bne.n	f7a <__aeabi_fadd+0x26e>
     f78:	e752      	b.n	e20 <__aeabi_fadd+0x114>
     f7a:	1ad3      	subs	r3, r2, r3
     f7c:	000d      	movs	r5, r1
     f7e:	e6dc      	b.n	d3a <__aeabi_fadd+0x2e>
     f80:	24ff      	movs	r4, #255	; 0xff
     f82:	2a00      	cmp	r2, #0
     f84:	d100      	bne.n	f88 <__aeabi_fadd+0x27c>
     f86:	e6d8      	b.n	d3a <__aeabi_fadd+0x2e>
     f88:	2080      	movs	r0, #128	; 0x80
     f8a:	08db      	lsrs	r3, r3, #3
     f8c:	03c0      	lsls	r0, r0, #15
     f8e:	4203      	tst	r3, r0
     f90:	d004      	beq.n	f9c <__aeabi_fadd+0x290>
     f92:	08d2      	lsrs	r2, r2, #3
     f94:	4202      	tst	r2, r0
     f96:	d101      	bne.n	f9c <__aeabi_fadd+0x290>
     f98:	0013      	movs	r3, r2
     f9a:	000d      	movs	r5, r1
     f9c:	00db      	lsls	r3, r3, #3
     f9e:	24ff      	movs	r4, #255	; 0xff
     fa0:	e6cb      	b.n	d3a <__aeabi_fadd+0x2e>
     fa2:	0013      	movs	r3, r2
     fa4:	24ff      	movs	r4, #255	; 0xff
     fa6:	000d      	movs	r5, r1
     fa8:	e6c7      	b.n	d3a <__aeabi_fadd+0x2e>
     faa:	2b00      	cmp	r3, #0
     fac:	d00d      	beq.n	fca <__aeabi_fadd+0x2be>
     fae:	24ff      	movs	r4, #255	; 0xff
     fb0:	2a00      	cmp	r2, #0
     fb2:	d100      	bne.n	fb6 <__aeabi_fadd+0x2aa>
     fb4:	e6c1      	b.n	d3a <__aeabi_fadd+0x2e>
     fb6:	2180      	movs	r1, #128	; 0x80
     fb8:	08db      	lsrs	r3, r3, #3
     fba:	03c9      	lsls	r1, r1, #15
     fbc:	420b      	tst	r3, r1
     fbe:	d0ed      	beq.n	f9c <__aeabi_fadd+0x290>
     fc0:	08d2      	lsrs	r2, r2, #3
     fc2:	420a      	tst	r2, r1
     fc4:	d1ea      	bne.n	f9c <__aeabi_fadd+0x290>
     fc6:	0013      	movs	r3, r2
     fc8:	e7e8      	b.n	f9c <__aeabi_fadd+0x290>
     fca:	0013      	movs	r3, r2
     fcc:	24ff      	movs	r4, #255	; 0xff
     fce:	e6b4      	b.n	d3a <__aeabi_fadd+0x2e>
     fd0:	2301      	movs	r3, #1
     fd2:	e772      	b.n	eba <__aeabi_fadd+0x1ae>
     fd4:	0013      	movs	r3, r2
     fd6:	0034      	movs	r4, r6
     fd8:	e6af      	b.n	d3a <__aeabi_fadd+0x2e>
     fda:	2700      	movs	r7, #0
     fdc:	2000      	movs	r0, #0
     fde:	e722      	b.n	e26 <__aeabi_fadd+0x11a>
     fe0:	2780      	movs	r7, #128	; 0x80
     fe2:	2000      	movs	r0, #0
     fe4:	03ff      	lsls	r7, r7, #15
     fe6:	e6f1      	b.n	dcc <__aeabi_fadd+0xc0>
     fe8:	0013      	movs	r3, r2
     fea:	e6a6      	b.n	d3a <__aeabi_fadd+0x2e>
     fec:	2301      	movs	r3, #1
     fee:	e7a5      	b.n	f3c <__aeabi_fadd+0x230>
     ff0:	7dffffff 	.word	0x7dffffff
     ff4:	fbffffff 	.word	0xfbffffff

00000ff8 <__aeabi_fdiv>:
     ff8:	b5f0      	push	{r4, r5, r6, r7, lr}
     ffa:	4656      	mov	r6, sl
     ffc:	4644      	mov	r4, r8
     ffe:	465f      	mov	r7, fp
    1000:	464d      	mov	r5, r9
    1002:	b4f0      	push	{r4, r5, r6, r7}
    1004:	0244      	lsls	r4, r0, #9
    1006:	0046      	lsls	r6, r0, #1
    1008:	0fc7      	lsrs	r7, r0, #31
    100a:	b083      	sub	sp, #12
    100c:	4688      	mov	r8, r1
    100e:	0a65      	lsrs	r5, r4, #9
    1010:	0e36      	lsrs	r6, r6, #24
    1012:	46ba      	mov	sl, r7
    1014:	d03d      	beq.n	1092 <__aeabi_fdiv+0x9a>
    1016:	2eff      	cmp	r6, #255	; 0xff
    1018:	d022      	beq.n	1060 <__aeabi_fdiv+0x68>
    101a:	2300      	movs	r3, #0
    101c:	00ec      	lsls	r4, r5, #3
    101e:	2580      	movs	r5, #128	; 0x80
    1020:	4699      	mov	r9, r3
    1022:	469b      	mov	fp, r3
    1024:	04ed      	lsls	r5, r5, #19
    1026:	4325      	orrs	r5, r4
    1028:	3e7f      	subs	r6, #127	; 0x7f
    102a:	4643      	mov	r3, r8
    102c:	025c      	lsls	r4, r3, #9
    102e:	0058      	lsls	r0, r3, #1
    1030:	0fdb      	lsrs	r3, r3, #31
    1032:	0a64      	lsrs	r4, r4, #9
    1034:	0e00      	lsrs	r0, r0, #24
    1036:	4698      	mov	r8, r3
    1038:	d036      	beq.n	10a8 <__aeabi_fdiv+0xb0>
    103a:	28ff      	cmp	r0, #255	; 0xff
    103c:	d030      	beq.n	10a0 <__aeabi_fdiv+0xa8>
    103e:	2380      	movs	r3, #128	; 0x80
    1040:	2100      	movs	r1, #0
    1042:	00e4      	lsls	r4, r4, #3
    1044:	04db      	lsls	r3, r3, #19
    1046:	431c      	orrs	r4, r3
    1048:	387f      	subs	r0, #127	; 0x7f
    104a:	1a30      	subs	r0, r6, r0
    104c:	9001      	str	r0, [sp, #4]
    104e:	4648      	mov	r0, r9
    1050:	4642      	mov	r2, r8
    1052:	4308      	orrs	r0, r1
    1054:	4e72      	ldr	r6, [pc, #456]	; (1220 <__aeabi_fdiv+0x228>)
    1056:	0080      	lsls	r0, r0, #2
    1058:	5830      	ldr	r0, [r6, r0]
    105a:	407a      	eors	r2, r7
    105c:	0013      	movs	r3, r2
    105e:	4687      	mov	pc, r0
    1060:	2d00      	cmp	r5, #0
    1062:	d144      	bne.n	10ee <__aeabi_fdiv+0xf6>
    1064:	2308      	movs	r3, #8
    1066:	4699      	mov	r9, r3
    1068:	3b06      	subs	r3, #6
    106a:	469b      	mov	fp, r3
    106c:	e7dd      	b.n	102a <__aeabi_fdiv+0x32>
    106e:	2201      	movs	r2, #1
    1070:	20ff      	movs	r0, #255	; 0xff
    1072:	2400      	movs	r4, #0
    1074:	401a      	ands	r2, r3
    1076:	0264      	lsls	r4, r4, #9
    1078:	05c3      	lsls	r3, r0, #23
    107a:	0a64      	lsrs	r4, r4, #9
    107c:	07d2      	lsls	r2, r2, #31
    107e:	431c      	orrs	r4, r3
    1080:	4314      	orrs	r4, r2
    1082:	0020      	movs	r0, r4
    1084:	b003      	add	sp, #12
    1086:	bc3c      	pop	{r2, r3, r4, r5}
    1088:	4690      	mov	r8, r2
    108a:	4699      	mov	r9, r3
    108c:	46a2      	mov	sl, r4
    108e:	46ab      	mov	fp, r5
    1090:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1092:	2d00      	cmp	r5, #0
    1094:	d120      	bne.n	10d8 <__aeabi_fdiv+0xe0>
    1096:	2304      	movs	r3, #4
    1098:	4699      	mov	r9, r3
    109a:	3b03      	subs	r3, #3
    109c:	469b      	mov	fp, r3
    109e:	e7c4      	b.n	102a <__aeabi_fdiv+0x32>
    10a0:	2c00      	cmp	r4, #0
    10a2:	d117      	bne.n	10d4 <__aeabi_fdiv+0xdc>
    10a4:	2102      	movs	r1, #2
    10a6:	e002      	b.n	10ae <__aeabi_fdiv+0xb6>
    10a8:	2c00      	cmp	r4, #0
    10aa:	d10a      	bne.n	10c2 <__aeabi_fdiv+0xca>
    10ac:	2101      	movs	r1, #1
    10ae:	1a32      	subs	r2, r6, r0
    10b0:	9201      	str	r2, [sp, #4]
    10b2:	464a      	mov	r2, r9
    10b4:	4643      	mov	r3, r8
    10b6:	430a      	orrs	r2, r1
    10b8:	485a      	ldr	r0, [pc, #360]	; (1224 <__aeabi_fdiv+0x22c>)
    10ba:	0092      	lsls	r2, r2, #2
    10bc:	5882      	ldr	r2, [r0, r2]
    10be:	407b      	eors	r3, r7
    10c0:	4697      	mov	pc, r2
    10c2:	0020      	movs	r0, r4
    10c4:	f000 fcd4 	bl	1a70 <__clzsi2>
    10c8:	1f43      	subs	r3, r0, #5
    10ca:	3076      	adds	r0, #118	; 0x76
    10cc:	409c      	lsls	r4, r3
    10ce:	4240      	negs	r0, r0
    10d0:	2100      	movs	r1, #0
    10d2:	e7ba      	b.n	104a <__aeabi_fdiv+0x52>
    10d4:	2103      	movs	r1, #3
    10d6:	e7b8      	b.n	104a <__aeabi_fdiv+0x52>
    10d8:	0028      	movs	r0, r5
    10da:	f000 fcc9 	bl	1a70 <__clzsi2>
    10de:	1f43      	subs	r3, r0, #5
    10e0:	409d      	lsls	r5, r3
    10e2:	2300      	movs	r3, #0
    10e4:	3076      	adds	r0, #118	; 0x76
    10e6:	4246      	negs	r6, r0
    10e8:	4699      	mov	r9, r3
    10ea:	469b      	mov	fp, r3
    10ec:	e79d      	b.n	102a <__aeabi_fdiv+0x32>
    10ee:	230c      	movs	r3, #12
    10f0:	4699      	mov	r9, r3
    10f2:	3b09      	subs	r3, #9
    10f4:	469b      	mov	fp, r3
    10f6:	e798      	b.n	102a <__aeabi_fdiv+0x32>
    10f8:	2480      	movs	r4, #128	; 0x80
    10fa:	2200      	movs	r2, #0
    10fc:	03e4      	lsls	r4, r4, #15
    10fe:	20ff      	movs	r0, #255	; 0xff
    1100:	e7b9      	b.n	1076 <__aeabi_fdiv+0x7e>
    1102:	2400      	movs	r4, #0
    1104:	46c2      	mov	sl, r8
    1106:	468b      	mov	fp, r1
    1108:	465a      	mov	r2, fp
    110a:	4653      	mov	r3, sl
    110c:	2a02      	cmp	r2, #2
    110e:	d0ae      	beq.n	106e <__aeabi_fdiv+0x76>
    1110:	2a03      	cmp	r2, #3
    1112:	d07d      	beq.n	1210 <__aeabi_fdiv+0x218>
    1114:	2a01      	cmp	r2, #1
    1116:	d131      	bne.n	117c <__aeabi_fdiv+0x184>
    1118:	2201      	movs	r2, #1
    111a:	2000      	movs	r0, #0
    111c:	401a      	ands	r2, r3
    111e:	2400      	movs	r4, #0
    1120:	e7a9      	b.n	1076 <__aeabi_fdiv+0x7e>
    1122:	2201      	movs	r2, #1
    1124:	1a10      	subs	r0, r2, r0
    1126:	281b      	cmp	r0, #27
    1128:	dd56      	ble.n	11d8 <__aeabi_fdiv+0x1e0>
    112a:	401a      	ands	r2, r3
    112c:	2000      	movs	r0, #0
    112e:	2400      	movs	r4, #0
    1130:	e7a1      	b.n	1076 <__aeabi_fdiv+0x7e>
    1132:	2380      	movs	r3, #128	; 0x80
    1134:	03db      	lsls	r3, r3, #15
    1136:	421d      	tst	r5, r3
    1138:	d14b      	bne.n	11d2 <__aeabi_fdiv+0x1da>
    113a:	2380      	movs	r3, #128	; 0x80
    113c:	03db      	lsls	r3, r3, #15
    113e:	432b      	orrs	r3, r5
    1140:	025c      	lsls	r4, r3, #9
    1142:	0a64      	lsrs	r4, r4, #9
    1144:	003a      	movs	r2, r7
    1146:	20ff      	movs	r0, #255	; 0xff
    1148:	e795      	b.n	1076 <__aeabi_fdiv+0x7e>
    114a:	016d      	lsls	r5, r5, #5
    114c:	0160      	lsls	r0, r4, #5
    114e:	4285      	cmp	r5, r0
    1150:	d230      	bcs.n	11b4 <__aeabi_fdiv+0x1bc>
    1152:	9a01      	ldr	r2, [sp, #4]
    1154:	2400      	movs	r4, #0
    1156:	3a01      	subs	r2, #1
    1158:	9201      	str	r2, [sp, #4]
    115a:	221b      	movs	r2, #27
    115c:	2701      	movs	r7, #1
    115e:	0029      	movs	r1, r5
    1160:	0064      	lsls	r4, r4, #1
    1162:	006d      	lsls	r5, r5, #1
    1164:	2900      	cmp	r1, #0
    1166:	db01      	blt.n	116c <__aeabi_fdiv+0x174>
    1168:	42a8      	cmp	r0, r5
    116a:	d801      	bhi.n	1170 <__aeabi_fdiv+0x178>
    116c:	1a2d      	subs	r5, r5, r0
    116e:	433c      	orrs	r4, r7
    1170:	3a01      	subs	r2, #1
    1172:	2a00      	cmp	r2, #0
    1174:	d1f3      	bne.n	115e <__aeabi_fdiv+0x166>
    1176:	1e6a      	subs	r2, r5, #1
    1178:	4195      	sbcs	r5, r2
    117a:	432c      	orrs	r4, r5
    117c:	9801      	ldr	r0, [sp, #4]
    117e:	307f      	adds	r0, #127	; 0x7f
    1180:	2800      	cmp	r0, #0
    1182:	ddce      	ble.n	1122 <__aeabi_fdiv+0x12a>
    1184:	0762      	lsls	r2, r4, #29
    1186:	d004      	beq.n	1192 <__aeabi_fdiv+0x19a>
    1188:	220f      	movs	r2, #15
    118a:	4022      	ands	r2, r4
    118c:	2a04      	cmp	r2, #4
    118e:	d000      	beq.n	1192 <__aeabi_fdiv+0x19a>
    1190:	3404      	adds	r4, #4
    1192:	0122      	lsls	r2, r4, #4
    1194:	d503      	bpl.n	119e <__aeabi_fdiv+0x1a6>
    1196:	4a24      	ldr	r2, [pc, #144]	; (1228 <__aeabi_fdiv+0x230>)
    1198:	9801      	ldr	r0, [sp, #4]
    119a:	4014      	ands	r4, r2
    119c:	3080      	adds	r0, #128	; 0x80
    119e:	28fe      	cmp	r0, #254	; 0xfe
    11a0:	dd00      	ble.n	11a4 <__aeabi_fdiv+0x1ac>
    11a2:	e764      	b.n	106e <__aeabi_fdiv+0x76>
    11a4:	2201      	movs	r2, #1
    11a6:	01a4      	lsls	r4, r4, #6
    11a8:	0a64      	lsrs	r4, r4, #9
    11aa:	b2c0      	uxtb	r0, r0
    11ac:	401a      	ands	r2, r3
    11ae:	e762      	b.n	1076 <__aeabi_fdiv+0x7e>
    11b0:	002c      	movs	r4, r5
    11b2:	e7a9      	b.n	1108 <__aeabi_fdiv+0x110>
    11b4:	1a2d      	subs	r5, r5, r0
    11b6:	221a      	movs	r2, #26
    11b8:	2401      	movs	r4, #1
    11ba:	e7cf      	b.n	115c <__aeabi_fdiv+0x164>
    11bc:	026b      	lsls	r3, r5, #9
    11be:	d5bc      	bpl.n	113a <__aeabi_fdiv+0x142>
    11c0:	2400      	movs	r4, #0
    11c2:	2380      	movs	r3, #128	; 0x80
    11c4:	03db      	lsls	r3, r3, #15
    11c6:	431c      	orrs	r4, r3
    11c8:	0264      	lsls	r4, r4, #9
    11ca:	0a64      	lsrs	r4, r4, #9
    11cc:	4642      	mov	r2, r8
    11ce:	20ff      	movs	r0, #255	; 0xff
    11d0:	e751      	b.n	1076 <__aeabi_fdiv+0x7e>
    11d2:	421c      	tst	r4, r3
    11d4:	d1b3      	bne.n	113e <__aeabi_fdiv+0x146>
    11d6:	e7f4      	b.n	11c2 <__aeabi_fdiv+0x1ca>
    11d8:	0021      	movs	r1, r4
    11da:	2220      	movs	r2, #32
    11dc:	40c1      	lsrs	r1, r0
    11de:	1a10      	subs	r0, r2, r0
    11e0:	4084      	lsls	r4, r0
    11e2:	1e62      	subs	r2, r4, #1
    11e4:	4194      	sbcs	r4, r2
    11e6:	430c      	orrs	r4, r1
    11e8:	0762      	lsls	r2, r4, #29
    11ea:	d004      	beq.n	11f6 <__aeabi_fdiv+0x1fe>
    11ec:	220f      	movs	r2, #15
    11ee:	4022      	ands	r2, r4
    11f0:	2a04      	cmp	r2, #4
    11f2:	d000      	beq.n	11f6 <__aeabi_fdiv+0x1fe>
    11f4:	3404      	adds	r4, #4
    11f6:	0162      	lsls	r2, r4, #5
    11f8:	d504      	bpl.n	1204 <__aeabi_fdiv+0x20c>
    11fa:	2201      	movs	r2, #1
    11fc:	2001      	movs	r0, #1
    11fe:	401a      	ands	r2, r3
    1200:	2400      	movs	r4, #0
    1202:	e738      	b.n	1076 <__aeabi_fdiv+0x7e>
    1204:	2201      	movs	r2, #1
    1206:	01a4      	lsls	r4, r4, #6
    1208:	0a64      	lsrs	r4, r4, #9
    120a:	401a      	ands	r2, r3
    120c:	2000      	movs	r0, #0
    120e:	e732      	b.n	1076 <__aeabi_fdiv+0x7e>
    1210:	2380      	movs	r3, #128	; 0x80
    1212:	03db      	lsls	r3, r3, #15
    1214:	431c      	orrs	r4, r3
    1216:	0264      	lsls	r4, r4, #9
    1218:	0a64      	lsrs	r4, r4, #9
    121a:	4652      	mov	r2, sl
    121c:	20ff      	movs	r0, #255	; 0xff
    121e:	e72a      	b.n	1076 <__aeabi_fdiv+0x7e>
    1220:	00001dfc 	.word	0x00001dfc
    1224:	00001e3c 	.word	0x00001e3c
    1228:	f7ffffff 	.word	0xf7ffffff

0000122c <__aeabi_i2f>:
    122c:	b570      	push	{r4, r5, r6, lr}
    122e:	2800      	cmp	r0, #0
    1230:	d030      	beq.n	1294 <__aeabi_i2f+0x68>
    1232:	17c3      	asrs	r3, r0, #31
    1234:	18c5      	adds	r5, r0, r3
    1236:	405d      	eors	r5, r3
    1238:	0fc4      	lsrs	r4, r0, #31
    123a:	0028      	movs	r0, r5
    123c:	f000 fc18 	bl	1a70 <__clzsi2>
    1240:	239e      	movs	r3, #158	; 0x9e
    1242:	1a1b      	subs	r3, r3, r0
    1244:	2b96      	cmp	r3, #150	; 0x96
    1246:	dc0d      	bgt.n	1264 <__aeabi_i2f+0x38>
    1248:	2296      	movs	r2, #150	; 0x96
    124a:	1ad2      	subs	r2, r2, r3
    124c:	4095      	lsls	r5, r2
    124e:	026a      	lsls	r2, r5, #9
    1250:	0a52      	lsrs	r2, r2, #9
    1252:	b2d8      	uxtb	r0, r3
    1254:	0252      	lsls	r2, r2, #9
    1256:	05c0      	lsls	r0, r0, #23
    1258:	0a52      	lsrs	r2, r2, #9
    125a:	07e4      	lsls	r4, r4, #31
    125c:	4302      	orrs	r2, r0
    125e:	4322      	orrs	r2, r4
    1260:	0010      	movs	r0, r2
    1262:	bd70      	pop	{r4, r5, r6, pc}
    1264:	2b99      	cmp	r3, #153	; 0x99
    1266:	dc19      	bgt.n	129c <__aeabi_i2f+0x70>
    1268:	2299      	movs	r2, #153	; 0x99
    126a:	1ad2      	subs	r2, r2, r3
    126c:	4095      	lsls	r5, r2
    126e:	4a12      	ldr	r2, [pc, #72]	; (12b8 <__aeabi_i2f+0x8c>)
    1270:	402a      	ands	r2, r5
    1272:	0769      	lsls	r1, r5, #29
    1274:	d004      	beq.n	1280 <__aeabi_i2f+0x54>
    1276:	210f      	movs	r1, #15
    1278:	400d      	ands	r5, r1
    127a:	2d04      	cmp	r5, #4
    127c:	d000      	beq.n	1280 <__aeabi_i2f+0x54>
    127e:	3204      	adds	r2, #4
    1280:	0151      	lsls	r1, r2, #5
    1282:	d503      	bpl.n	128c <__aeabi_i2f+0x60>
    1284:	4b0c      	ldr	r3, [pc, #48]	; (12b8 <__aeabi_i2f+0x8c>)
    1286:	401a      	ands	r2, r3
    1288:	239f      	movs	r3, #159	; 0x9f
    128a:	1a1b      	subs	r3, r3, r0
    128c:	0192      	lsls	r2, r2, #6
    128e:	0a52      	lsrs	r2, r2, #9
    1290:	b2d8      	uxtb	r0, r3
    1292:	e7df      	b.n	1254 <__aeabi_i2f+0x28>
    1294:	2400      	movs	r4, #0
    1296:	2000      	movs	r0, #0
    1298:	2200      	movs	r2, #0
    129a:	e7db      	b.n	1254 <__aeabi_i2f+0x28>
    129c:	2205      	movs	r2, #5
    129e:	002e      	movs	r6, r5
    12a0:	1a12      	subs	r2, r2, r0
    12a2:	21b9      	movs	r1, #185	; 0xb9
    12a4:	40d6      	lsrs	r6, r2
    12a6:	002a      	movs	r2, r5
    12a8:	1ac9      	subs	r1, r1, r3
    12aa:	408a      	lsls	r2, r1
    12ac:	1e55      	subs	r5, r2, #1
    12ae:	41aa      	sbcs	r2, r5
    12b0:	0035      	movs	r5, r6
    12b2:	4315      	orrs	r5, r2
    12b4:	e7db      	b.n	126e <__aeabi_i2f+0x42>
    12b6:	46c0      	nop			; (mov r8, r8)
    12b8:	fbffffff 	.word	0xfbffffff

000012bc <__aeabi_ui2f>:
    12bc:	b570      	push	{r4, r5, r6, lr}
    12be:	1e04      	subs	r4, r0, #0
    12c0:	d028      	beq.n	1314 <__aeabi_ui2f+0x58>
    12c2:	f000 fbd5 	bl	1a70 <__clzsi2>
    12c6:	239e      	movs	r3, #158	; 0x9e
    12c8:	1a1b      	subs	r3, r3, r0
    12ca:	2b96      	cmp	r3, #150	; 0x96
    12cc:	dc0a      	bgt.n	12e4 <__aeabi_ui2f+0x28>
    12ce:	2296      	movs	r2, #150	; 0x96
    12d0:	1ad2      	subs	r2, r2, r3
    12d2:	4094      	lsls	r4, r2
    12d4:	0262      	lsls	r2, r4, #9
    12d6:	0a52      	lsrs	r2, r2, #9
    12d8:	b2d8      	uxtb	r0, r3
    12da:	0252      	lsls	r2, r2, #9
    12dc:	0a52      	lsrs	r2, r2, #9
    12de:	05c0      	lsls	r0, r0, #23
    12e0:	4310      	orrs	r0, r2
    12e2:	bd70      	pop	{r4, r5, r6, pc}
    12e4:	2b99      	cmp	r3, #153	; 0x99
    12e6:	dc18      	bgt.n	131a <__aeabi_ui2f+0x5e>
    12e8:	2299      	movs	r2, #153	; 0x99
    12ea:	1ad2      	subs	r2, r2, r3
    12ec:	4094      	lsls	r4, r2
    12ee:	4a11      	ldr	r2, [pc, #68]	; (1334 <__aeabi_ui2f+0x78>)
    12f0:	4022      	ands	r2, r4
    12f2:	0761      	lsls	r1, r4, #29
    12f4:	d004      	beq.n	1300 <__aeabi_ui2f+0x44>
    12f6:	210f      	movs	r1, #15
    12f8:	400c      	ands	r4, r1
    12fa:	2c04      	cmp	r4, #4
    12fc:	d000      	beq.n	1300 <__aeabi_ui2f+0x44>
    12fe:	3204      	adds	r2, #4
    1300:	0151      	lsls	r1, r2, #5
    1302:	d503      	bpl.n	130c <__aeabi_ui2f+0x50>
    1304:	4b0b      	ldr	r3, [pc, #44]	; (1334 <__aeabi_ui2f+0x78>)
    1306:	401a      	ands	r2, r3
    1308:	239f      	movs	r3, #159	; 0x9f
    130a:	1a1b      	subs	r3, r3, r0
    130c:	0192      	lsls	r2, r2, #6
    130e:	0a52      	lsrs	r2, r2, #9
    1310:	b2d8      	uxtb	r0, r3
    1312:	e7e2      	b.n	12da <__aeabi_ui2f+0x1e>
    1314:	2000      	movs	r0, #0
    1316:	2200      	movs	r2, #0
    1318:	e7df      	b.n	12da <__aeabi_ui2f+0x1e>
    131a:	2205      	movs	r2, #5
    131c:	0025      	movs	r5, r4
    131e:	1a12      	subs	r2, r2, r0
    1320:	21b9      	movs	r1, #185	; 0xb9
    1322:	40d5      	lsrs	r5, r2
    1324:	0022      	movs	r2, r4
    1326:	1ac9      	subs	r1, r1, r3
    1328:	408a      	lsls	r2, r1
    132a:	1e54      	subs	r4, r2, #1
    132c:	41a2      	sbcs	r2, r4
    132e:	002c      	movs	r4, r5
    1330:	4314      	orrs	r4, r2
    1332:	e7dc      	b.n	12ee <__aeabi_ui2f+0x32>
    1334:	fbffffff 	.word	0xfbffffff

00001338 <__aeabi_dmul>:
    1338:	b5f0      	push	{r4, r5, r6, r7, lr}
    133a:	465f      	mov	r7, fp
    133c:	4656      	mov	r6, sl
    133e:	464d      	mov	r5, r9
    1340:	4644      	mov	r4, r8
    1342:	b4f0      	push	{r4, r5, r6, r7}
    1344:	030d      	lsls	r5, r1, #12
    1346:	4699      	mov	r9, r3
    1348:	004e      	lsls	r6, r1, #1
    134a:	0b2b      	lsrs	r3, r5, #12
    134c:	b087      	sub	sp, #28
    134e:	0007      	movs	r7, r0
    1350:	4692      	mov	sl, r2
    1352:	4680      	mov	r8, r0
    1354:	469b      	mov	fp, r3
    1356:	0d76      	lsrs	r6, r6, #21
    1358:	0fcc      	lsrs	r4, r1, #31
    135a:	2e00      	cmp	r6, #0
    135c:	d069      	beq.n	1432 <__aeabi_dmul+0xfa>
    135e:	4b6d      	ldr	r3, [pc, #436]	; (1514 <__aeabi_dmul+0x1dc>)
    1360:	429e      	cmp	r6, r3
    1362:	d035      	beq.n	13d0 <__aeabi_dmul+0x98>
    1364:	465b      	mov	r3, fp
    1366:	2280      	movs	r2, #128	; 0x80
    1368:	00dd      	lsls	r5, r3, #3
    136a:	0412      	lsls	r2, r2, #16
    136c:	0f43      	lsrs	r3, r0, #29
    136e:	4313      	orrs	r3, r2
    1370:	432b      	orrs	r3, r5
    1372:	469b      	mov	fp, r3
    1374:	00c3      	lsls	r3, r0, #3
    1376:	4698      	mov	r8, r3
    1378:	4b67      	ldr	r3, [pc, #412]	; (1518 <__aeabi_dmul+0x1e0>)
    137a:	2700      	movs	r7, #0
    137c:	469c      	mov	ip, r3
    137e:	2300      	movs	r3, #0
    1380:	4466      	add	r6, ip
    1382:	9301      	str	r3, [sp, #4]
    1384:	464a      	mov	r2, r9
    1386:	0315      	lsls	r5, r2, #12
    1388:	0050      	lsls	r0, r2, #1
    138a:	0fd2      	lsrs	r2, r2, #31
    138c:	4653      	mov	r3, sl
    138e:	0b2d      	lsrs	r5, r5, #12
    1390:	0d40      	lsrs	r0, r0, #21
    1392:	4691      	mov	r9, r2
    1394:	d100      	bne.n	1398 <__aeabi_dmul+0x60>
    1396:	e076      	b.n	1486 <__aeabi_dmul+0x14e>
    1398:	4a5e      	ldr	r2, [pc, #376]	; (1514 <__aeabi_dmul+0x1dc>)
    139a:	4290      	cmp	r0, r2
    139c:	d06c      	beq.n	1478 <__aeabi_dmul+0x140>
    139e:	2280      	movs	r2, #128	; 0x80
    13a0:	0f5b      	lsrs	r3, r3, #29
    13a2:	0412      	lsls	r2, r2, #16
    13a4:	4313      	orrs	r3, r2
    13a6:	4a5c      	ldr	r2, [pc, #368]	; (1518 <__aeabi_dmul+0x1e0>)
    13a8:	00ed      	lsls	r5, r5, #3
    13aa:	4694      	mov	ip, r2
    13ac:	431d      	orrs	r5, r3
    13ae:	4653      	mov	r3, sl
    13b0:	2200      	movs	r2, #0
    13b2:	00db      	lsls	r3, r3, #3
    13b4:	4460      	add	r0, ip
    13b6:	4649      	mov	r1, r9
    13b8:	1836      	adds	r6, r6, r0
    13ba:	1c70      	adds	r0, r6, #1
    13bc:	4061      	eors	r1, r4
    13be:	9002      	str	r0, [sp, #8]
    13c0:	4317      	orrs	r7, r2
    13c2:	2f0f      	cmp	r7, #15
    13c4:	d900      	bls.n	13c8 <__aeabi_dmul+0x90>
    13c6:	e0af      	b.n	1528 <__aeabi_dmul+0x1f0>
    13c8:	4854      	ldr	r0, [pc, #336]	; (151c <__aeabi_dmul+0x1e4>)
    13ca:	00bf      	lsls	r7, r7, #2
    13cc:	59c7      	ldr	r7, [r0, r7]
    13ce:	46bf      	mov	pc, r7
    13d0:	465b      	mov	r3, fp
    13d2:	431f      	orrs	r7, r3
    13d4:	d000      	beq.n	13d8 <__aeabi_dmul+0xa0>
    13d6:	e088      	b.n	14ea <__aeabi_dmul+0x1b2>
    13d8:	2300      	movs	r3, #0
    13da:	469b      	mov	fp, r3
    13dc:	4698      	mov	r8, r3
    13de:	3302      	adds	r3, #2
    13e0:	2708      	movs	r7, #8
    13e2:	9301      	str	r3, [sp, #4]
    13e4:	e7ce      	b.n	1384 <__aeabi_dmul+0x4c>
    13e6:	4649      	mov	r1, r9
    13e8:	2a02      	cmp	r2, #2
    13ea:	d06a      	beq.n	14c2 <__aeabi_dmul+0x18a>
    13ec:	2a03      	cmp	r2, #3
    13ee:	d100      	bne.n	13f2 <__aeabi_dmul+0xba>
    13f0:	e209      	b.n	1806 <__aeabi_dmul+0x4ce>
    13f2:	2a01      	cmp	r2, #1
    13f4:	d000      	beq.n	13f8 <__aeabi_dmul+0xc0>
    13f6:	e1bb      	b.n	1770 <__aeabi_dmul+0x438>
    13f8:	4011      	ands	r1, r2
    13fa:	2200      	movs	r2, #0
    13fc:	2300      	movs	r3, #0
    13fe:	2500      	movs	r5, #0
    1400:	4690      	mov	r8, r2
    1402:	b2cc      	uxtb	r4, r1
    1404:	2100      	movs	r1, #0
    1406:	032d      	lsls	r5, r5, #12
    1408:	0d0a      	lsrs	r2, r1, #20
    140a:	0512      	lsls	r2, r2, #20
    140c:	0b2d      	lsrs	r5, r5, #12
    140e:	4315      	orrs	r5, r2
    1410:	4a43      	ldr	r2, [pc, #268]	; (1520 <__aeabi_dmul+0x1e8>)
    1412:	051b      	lsls	r3, r3, #20
    1414:	4015      	ands	r5, r2
    1416:	431d      	orrs	r5, r3
    1418:	006d      	lsls	r5, r5, #1
    141a:	07e4      	lsls	r4, r4, #31
    141c:	086d      	lsrs	r5, r5, #1
    141e:	4325      	orrs	r5, r4
    1420:	4640      	mov	r0, r8
    1422:	0029      	movs	r1, r5
    1424:	b007      	add	sp, #28
    1426:	bc3c      	pop	{r2, r3, r4, r5}
    1428:	4690      	mov	r8, r2
    142a:	4699      	mov	r9, r3
    142c:	46a2      	mov	sl, r4
    142e:	46ab      	mov	fp, r5
    1430:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1432:	4303      	orrs	r3, r0
    1434:	d052      	beq.n	14dc <__aeabi_dmul+0x1a4>
    1436:	465b      	mov	r3, fp
    1438:	2b00      	cmp	r3, #0
    143a:	d100      	bne.n	143e <__aeabi_dmul+0x106>
    143c:	e18a      	b.n	1754 <__aeabi_dmul+0x41c>
    143e:	4658      	mov	r0, fp
    1440:	f000 fb16 	bl	1a70 <__clzsi2>
    1444:	0003      	movs	r3, r0
    1446:	3b0b      	subs	r3, #11
    1448:	2b1c      	cmp	r3, #28
    144a:	dd00      	ble.n	144e <__aeabi_dmul+0x116>
    144c:	e17b      	b.n	1746 <__aeabi_dmul+0x40e>
    144e:	221d      	movs	r2, #29
    1450:	1ad3      	subs	r3, r2, r3
    1452:	003a      	movs	r2, r7
    1454:	0001      	movs	r1, r0
    1456:	465d      	mov	r5, fp
    1458:	40da      	lsrs	r2, r3
    145a:	3908      	subs	r1, #8
    145c:	408d      	lsls	r5, r1
    145e:	0013      	movs	r3, r2
    1460:	408f      	lsls	r7, r1
    1462:	432b      	orrs	r3, r5
    1464:	469b      	mov	fp, r3
    1466:	46b8      	mov	r8, r7
    1468:	4b2e      	ldr	r3, [pc, #184]	; (1524 <__aeabi_dmul+0x1ec>)
    146a:	2700      	movs	r7, #0
    146c:	469c      	mov	ip, r3
    146e:	2300      	movs	r3, #0
    1470:	4460      	add	r0, ip
    1472:	4246      	negs	r6, r0
    1474:	9301      	str	r3, [sp, #4]
    1476:	e785      	b.n	1384 <__aeabi_dmul+0x4c>
    1478:	4652      	mov	r2, sl
    147a:	432a      	orrs	r2, r5
    147c:	d12c      	bne.n	14d8 <__aeabi_dmul+0x1a0>
    147e:	2500      	movs	r5, #0
    1480:	2300      	movs	r3, #0
    1482:	2202      	movs	r2, #2
    1484:	e797      	b.n	13b6 <__aeabi_dmul+0x7e>
    1486:	4652      	mov	r2, sl
    1488:	432a      	orrs	r2, r5
    148a:	d021      	beq.n	14d0 <__aeabi_dmul+0x198>
    148c:	2d00      	cmp	r5, #0
    148e:	d100      	bne.n	1492 <__aeabi_dmul+0x15a>
    1490:	e154      	b.n	173c <__aeabi_dmul+0x404>
    1492:	0028      	movs	r0, r5
    1494:	f000 faec 	bl	1a70 <__clzsi2>
    1498:	0003      	movs	r3, r0
    149a:	3b0b      	subs	r3, #11
    149c:	2b1c      	cmp	r3, #28
    149e:	dd00      	ble.n	14a2 <__aeabi_dmul+0x16a>
    14a0:	e146      	b.n	1730 <__aeabi_dmul+0x3f8>
    14a2:	211d      	movs	r1, #29
    14a4:	1acb      	subs	r3, r1, r3
    14a6:	4651      	mov	r1, sl
    14a8:	0002      	movs	r2, r0
    14aa:	40d9      	lsrs	r1, r3
    14ac:	4653      	mov	r3, sl
    14ae:	3a08      	subs	r2, #8
    14b0:	4095      	lsls	r5, r2
    14b2:	4093      	lsls	r3, r2
    14b4:	430d      	orrs	r5, r1
    14b6:	4a1b      	ldr	r2, [pc, #108]	; (1524 <__aeabi_dmul+0x1ec>)
    14b8:	4694      	mov	ip, r2
    14ba:	4460      	add	r0, ip
    14bc:	4240      	negs	r0, r0
    14be:	2200      	movs	r2, #0
    14c0:	e779      	b.n	13b6 <__aeabi_dmul+0x7e>
    14c2:	2401      	movs	r4, #1
    14c4:	2200      	movs	r2, #0
    14c6:	400c      	ands	r4, r1
    14c8:	4b12      	ldr	r3, [pc, #72]	; (1514 <__aeabi_dmul+0x1dc>)
    14ca:	2500      	movs	r5, #0
    14cc:	4690      	mov	r8, r2
    14ce:	e799      	b.n	1404 <__aeabi_dmul+0xcc>
    14d0:	2500      	movs	r5, #0
    14d2:	2300      	movs	r3, #0
    14d4:	2201      	movs	r2, #1
    14d6:	e76e      	b.n	13b6 <__aeabi_dmul+0x7e>
    14d8:	2203      	movs	r2, #3
    14da:	e76c      	b.n	13b6 <__aeabi_dmul+0x7e>
    14dc:	2300      	movs	r3, #0
    14de:	469b      	mov	fp, r3
    14e0:	4698      	mov	r8, r3
    14e2:	3301      	adds	r3, #1
    14e4:	2704      	movs	r7, #4
    14e6:	9301      	str	r3, [sp, #4]
    14e8:	e74c      	b.n	1384 <__aeabi_dmul+0x4c>
    14ea:	2303      	movs	r3, #3
    14ec:	270c      	movs	r7, #12
    14ee:	9301      	str	r3, [sp, #4]
    14f0:	e748      	b.n	1384 <__aeabi_dmul+0x4c>
    14f2:	2300      	movs	r3, #0
    14f4:	2580      	movs	r5, #128	; 0x80
    14f6:	4698      	mov	r8, r3
    14f8:	2400      	movs	r4, #0
    14fa:	032d      	lsls	r5, r5, #12
    14fc:	4b05      	ldr	r3, [pc, #20]	; (1514 <__aeabi_dmul+0x1dc>)
    14fe:	e781      	b.n	1404 <__aeabi_dmul+0xcc>
    1500:	465d      	mov	r5, fp
    1502:	4643      	mov	r3, r8
    1504:	9a01      	ldr	r2, [sp, #4]
    1506:	e76f      	b.n	13e8 <__aeabi_dmul+0xb0>
    1508:	465d      	mov	r5, fp
    150a:	4643      	mov	r3, r8
    150c:	0021      	movs	r1, r4
    150e:	9a01      	ldr	r2, [sp, #4]
    1510:	e76a      	b.n	13e8 <__aeabi_dmul+0xb0>
    1512:	46c0      	nop			; (mov r8, r8)
    1514:	000007ff 	.word	0x000007ff
    1518:	fffffc01 	.word	0xfffffc01
    151c:	00001e7c 	.word	0x00001e7c
    1520:	800fffff 	.word	0x800fffff
    1524:	000003f3 	.word	0x000003f3
    1528:	4642      	mov	r2, r8
    152a:	0c12      	lsrs	r2, r2, #16
    152c:	4691      	mov	r9, r2
    152e:	0c1a      	lsrs	r2, r3, #16
    1530:	4694      	mov	ip, r2
    1532:	4642      	mov	r2, r8
    1534:	0417      	lsls	r7, r2, #16
    1536:	464a      	mov	r2, r9
    1538:	041b      	lsls	r3, r3, #16
    153a:	0c1b      	lsrs	r3, r3, #16
    153c:	435a      	muls	r2, r3
    153e:	4660      	mov	r0, ip
    1540:	4690      	mov	r8, r2
    1542:	464a      	mov	r2, r9
    1544:	4342      	muls	r2, r0
    1546:	0010      	movs	r0, r2
    1548:	9203      	str	r2, [sp, #12]
    154a:	4662      	mov	r2, ip
    154c:	001c      	movs	r4, r3
    154e:	0c3f      	lsrs	r7, r7, #16
    1550:	437a      	muls	r2, r7
    1552:	437c      	muls	r4, r7
    1554:	4442      	add	r2, r8
    1556:	9201      	str	r2, [sp, #4]
    1558:	0c22      	lsrs	r2, r4, #16
    155a:	4692      	mov	sl, r2
    155c:	9a01      	ldr	r2, [sp, #4]
    155e:	4452      	add	r2, sl
    1560:	4590      	cmp	r8, r2
    1562:	d906      	bls.n	1572 <__aeabi_dmul+0x23a>
    1564:	4682      	mov	sl, r0
    1566:	2080      	movs	r0, #128	; 0x80
    1568:	0240      	lsls	r0, r0, #9
    156a:	4680      	mov	r8, r0
    156c:	44c2      	add	sl, r8
    156e:	4650      	mov	r0, sl
    1570:	9003      	str	r0, [sp, #12]
    1572:	0c10      	lsrs	r0, r2, #16
    1574:	9004      	str	r0, [sp, #16]
    1576:	4648      	mov	r0, r9
    1578:	0424      	lsls	r4, r4, #16
    157a:	0c24      	lsrs	r4, r4, #16
    157c:	0412      	lsls	r2, r2, #16
    157e:	1912      	adds	r2, r2, r4
    1580:	9205      	str	r2, [sp, #20]
    1582:	0c2a      	lsrs	r2, r5, #16
    1584:	042d      	lsls	r5, r5, #16
    1586:	0c2d      	lsrs	r5, r5, #16
    1588:	4368      	muls	r0, r5
    158a:	002c      	movs	r4, r5
    158c:	4682      	mov	sl, r0
    158e:	4648      	mov	r0, r9
    1590:	437c      	muls	r4, r7
    1592:	4350      	muls	r0, r2
    1594:	4681      	mov	r9, r0
    1596:	0c20      	lsrs	r0, r4, #16
    1598:	4680      	mov	r8, r0
    159a:	4357      	muls	r7, r2
    159c:	4457      	add	r7, sl
    159e:	4447      	add	r7, r8
    15a0:	45ba      	cmp	sl, r7
    15a2:	d903      	bls.n	15ac <__aeabi_dmul+0x274>
    15a4:	2080      	movs	r0, #128	; 0x80
    15a6:	0240      	lsls	r0, r0, #9
    15a8:	4680      	mov	r8, r0
    15aa:	44c1      	add	r9, r8
    15ac:	0c38      	lsrs	r0, r7, #16
    15ae:	043f      	lsls	r7, r7, #16
    15b0:	46b8      	mov	r8, r7
    15b2:	4448      	add	r0, r9
    15b4:	0424      	lsls	r4, r4, #16
    15b6:	0c24      	lsrs	r4, r4, #16
    15b8:	9001      	str	r0, [sp, #4]
    15ba:	9804      	ldr	r0, [sp, #16]
    15bc:	44a0      	add	r8, r4
    15be:	4440      	add	r0, r8
    15c0:	9004      	str	r0, [sp, #16]
    15c2:	4658      	mov	r0, fp
    15c4:	0c00      	lsrs	r0, r0, #16
    15c6:	4681      	mov	r9, r0
    15c8:	4658      	mov	r0, fp
    15ca:	0404      	lsls	r4, r0, #16
    15cc:	0c20      	lsrs	r0, r4, #16
    15ce:	4682      	mov	sl, r0
    15d0:	0007      	movs	r7, r0
    15d2:	4648      	mov	r0, r9
    15d4:	435f      	muls	r7, r3
    15d6:	464c      	mov	r4, r9
    15d8:	4343      	muls	r3, r0
    15da:	4660      	mov	r0, ip
    15dc:	4360      	muls	r0, r4
    15de:	4664      	mov	r4, ip
    15e0:	4683      	mov	fp, r0
    15e2:	4650      	mov	r0, sl
    15e4:	4344      	muls	r4, r0
    15e6:	0c38      	lsrs	r0, r7, #16
    15e8:	4684      	mov	ip, r0
    15ea:	18e4      	adds	r4, r4, r3
    15ec:	4464      	add	r4, ip
    15ee:	42a3      	cmp	r3, r4
    15f0:	d903      	bls.n	15fa <__aeabi_dmul+0x2c2>
    15f2:	2380      	movs	r3, #128	; 0x80
    15f4:	025b      	lsls	r3, r3, #9
    15f6:	469c      	mov	ip, r3
    15f8:	44e3      	add	fp, ip
    15fa:	4648      	mov	r0, r9
    15fc:	043f      	lsls	r7, r7, #16
    15fe:	0c23      	lsrs	r3, r4, #16
    1600:	0c3f      	lsrs	r7, r7, #16
    1602:	0424      	lsls	r4, r4, #16
    1604:	19e4      	adds	r4, r4, r7
    1606:	4657      	mov	r7, sl
    1608:	4368      	muls	r0, r5
    160a:	436f      	muls	r7, r5
    160c:	4684      	mov	ip, r0
    160e:	464d      	mov	r5, r9
    1610:	4650      	mov	r0, sl
    1612:	4355      	muls	r5, r2
    1614:	4342      	muls	r2, r0
    1616:	0c38      	lsrs	r0, r7, #16
    1618:	4681      	mov	r9, r0
    161a:	4462      	add	r2, ip
    161c:	444a      	add	r2, r9
    161e:	445b      	add	r3, fp
    1620:	4594      	cmp	ip, r2
    1622:	d903      	bls.n	162c <__aeabi_dmul+0x2f4>
    1624:	2080      	movs	r0, #128	; 0x80
    1626:	0240      	lsls	r0, r0, #9
    1628:	4684      	mov	ip, r0
    162a:	4465      	add	r5, ip
    162c:	9803      	ldr	r0, [sp, #12]
    162e:	043f      	lsls	r7, r7, #16
    1630:	4683      	mov	fp, r0
    1632:	9804      	ldr	r0, [sp, #16]
    1634:	0c3f      	lsrs	r7, r7, #16
    1636:	4684      	mov	ip, r0
    1638:	44e3      	add	fp, ip
    163a:	45c3      	cmp	fp, r8
    163c:	4180      	sbcs	r0, r0
    163e:	4240      	negs	r0, r0
    1640:	4682      	mov	sl, r0
    1642:	0410      	lsls	r0, r2, #16
    1644:	4684      	mov	ip, r0
    1646:	9801      	ldr	r0, [sp, #4]
    1648:	4467      	add	r7, ip
    164a:	4684      	mov	ip, r0
    164c:	4467      	add	r7, ip
    164e:	44a3      	add	fp, r4
    1650:	46bc      	mov	ip, r7
    1652:	45a3      	cmp	fp, r4
    1654:	41a4      	sbcs	r4, r4
    1656:	4699      	mov	r9, r3
    1658:	44d4      	add	ip, sl
    165a:	4264      	negs	r4, r4
    165c:	4287      	cmp	r7, r0
    165e:	41bf      	sbcs	r7, r7
    1660:	45d4      	cmp	ip, sl
    1662:	4180      	sbcs	r0, r0
    1664:	44e1      	add	r9, ip
    1666:	46a0      	mov	r8, r4
    1668:	4599      	cmp	r9, r3
    166a:	419b      	sbcs	r3, r3
    166c:	427f      	negs	r7, r7
    166e:	4240      	negs	r0, r0
    1670:	44c8      	add	r8, r9
    1672:	4307      	orrs	r7, r0
    1674:	0c12      	lsrs	r2, r2, #16
    1676:	18ba      	adds	r2, r7, r2
    1678:	45a0      	cmp	r8, r4
    167a:	41a4      	sbcs	r4, r4
    167c:	425f      	negs	r7, r3
    167e:	003b      	movs	r3, r7
    1680:	4264      	negs	r4, r4
    1682:	4323      	orrs	r3, r4
    1684:	18d7      	adds	r7, r2, r3
    1686:	4643      	mov	r3, r8
    1688:	197d      	adds	r5, r7, r5
    168a:	0ddb      	lsrs	r3, r3, #23
    168c:	026d      	lsls	r5, r5, #9
    168e:	431d      	orrs	r5, r3
    1690:	465b      	mov	r3, fp
    1692:	025a      	lsls	r2, r3, #9
    1694:	9b05      	ldr	r3, [sp, #20]
    1696:	431a      	orrs	r2, r3
    1698:	1e53      	subs	r3, r2, #1
    169a:	419a      	sbcs	r2, r3
    169c:	465b      	mov	r3, fp
    169e:	0ddb      	lsrs	r3, r3, #23
    16a0:	431a      	orrs	r2, r3
    16a2:	4643      	mov	r3, r8
    16a4:	025b      	lsls	r3, r3, #9
    16a6:	4313      	orrs	r3, r2
    16a8:	01ea      	lsls	r2, r5, #7
    16aa:	d507      	bpl.n	16bc <__aeabi_dmul+0x384>
    16ac:	2201      	movs	r2, #1
    16ae:	085c      	lsrs	r4, r3, #1
    16b0:	4013      	ands	r3, r2
    16b2:	4323      	orrs	r3, r4
    16b4:	07ea      	lsls	r2, r5, #31
    16b6:	9e02      	ldr	r6, [sp, #8]
    16b8:	4313      	orrs	r3, r2
    16ba:	086d      	lsrs	r5, r5, #1
    16bc:	4a57      	ldr	r2, [pc, #348]	; (181c <__aeabi_dmul+0x4e4>)
    16be:	18b2      	adds	r2, r6, r2
    16c0:	2a00      	cmp	r2, #0
    16c2:	dd4b      	ble.n	175c <__aeabi_dmul+0x424>
    16c4:	0758      	lsls	r0, r3, #29
    16c6:	d009      	beq.n	16dc <__aeabi_dmul+0x3a4>
    16c8:	200f      	movs	r0, #15
    16ca:	4018      	ands	r0, r3
    16cc:	2804      	cmp	r0, #4
    16ce:	d005      	beq.n	16dc <__aeabi_dmul+0x3a4>
    16d0:	1d18      	adds	r0, r3, #4
    16d2:	4298      	cmp	r0, r3
    16d4:	419b      	sbcs	r3, r3
    16d6:	425b      	negs	r3, r3
    16d8:	18ed      	adds	r5, r5, r3
    16da:	0003      	movs	r3, r0
    16dc:	01e8      	lsls	r0, r5, #7
    16de:	d504      	bpl.n	16ea <__aeabi_dmul+0x3b2>
    16e0:	4a4f      	ldr	r2, [pc, #316]	; (1820 <__aeabi_dmul+0x4e8>)
    16e2:	4015      	ands	r5, r2
    16e4:	2280      	movs	r2, #128	; 0x80
    16e6:	00d2      	lsls	r2, r2, #3
    16e8:	18b2      	adds	r2, r6, r2
    16ea:	484e      	ldr	r0, [pc, #312]	; (1824 <__aeabi_dmul+0x4ec>)
    16ec:	4282      	cmp	r2, r0
    16ee:	dd00      	ble.n	16f2 <__aeabi_dmul+0x3ba>
    16f0:	e6e7      	b.n	14c2 <__aeabi_dmul+0x18a>
    16f2:	2401      	movs	r4, #1
    16f4:	08db      	lsrs	r3, r3, #3
    16f6:	0768      	lsls	r0, r5, #29
    16f8:	4318      	orrs	r0, r3
    16fa:	026d      	lsls	r5, r5, #9
    16fc:	0553      	lsls	r3, r2, #21
    16fe:	4680      	mov	r8, r0
    1700:	0b2d      	lsrs	r5, r5, #12
    1702:	0d5b      	lsrs	r3, r3, #21
    1704:	400c      	ands	r4, r1
    1706:	e67d      	b.n	1404 <__aeabi_dmul+0xcc>
    1708:	2280      	movs	r2, #128	; 0x80
    170a:	4659      	mov	r1, fp
    170c:	0312      	lsls	r2, r2, #12
    170e:	4211      	tst	r1, r2
    1710:	d008      	beq.n	1724 <__aeabi_dmul+0x3ec>
    1712:	4215      	tst	r5, r2
    1714:	d106      	bne.n	1724 <__aeabi_dmul+0x3ec>
    1716:	4315      	orrs	r5, r2
    1718:	032d      	lsls	r5, r5, #12
    171a:	4698      	mov	r8, r3
    171c:	0b2d      	lsrs	r5, r5, #12
    171e:	464c      	mov	r4, r9
    1720:	4b41      	ldr	r3, [pc, #260]	; (1828 <__aeabi_dmul+0x4f0>)
    1722:	e66f      	b.n	1404 <__aeabi_dmul+0xcc>
    1724:	465d      	mov	r5, fp
    1726:	4315      	orrs	r5, r2
    1728:	032d      	lsls	r5, r5, #12
    172a:	0b2d      	lsrs	r5, r5, #12
    172c:	4b3e      	ldr	r3, [pc, #248]	; (1828 <__aeabi_dmul+0x4f0>)
    172e:	e669      	b.n	1404 <__aeabi_dmul+0xcc>
    1730:	0003      	movs	r3, r0
    1732:	4655      	mov	r5, sl
    1734:	3b28      	subs	r3, #40	; 0x28
    1736:	409d      	lsls	r5, r3
    1738:	2300      	movs	r3, #0
    173a:	e6bc      	b.n	14b6 <__aeabi_dmul+0x17e>
    173c:	4650      	mov	r0, sl
    173e:	f000 f997 	bl	1a70 <__clzsi2>
    1742:	3020      	adds	r0, #32
    1744:	e6a8      	b.n	1498 <__aeabi_dmul+0x160>
    1746:	0003      	movs	r3, r0
    1748:	3b28      	subs	r3, #40	; 0x28
    174a:	409f      	lsls	r7, r3
    174c:	2300      	movs	r3, #0
    174e:	46bb      	mov	fp, r7
    1750:	4698      	mov	r8, r3
    1752:	e689      	b.n	1468 <__aeabi_dmul+0x130>
    1754:	f000 f98c 	bl	1a70 <__clzsi2>
    1758:	3020      	adds	r0, #32
    175a:	e673      	b.n	1444 <__aeabi_dmul+0x10c>
    175c:	2401      	movs	r4, #1
    175e:	1aa6      	subs	r6, r4, r2
    1760:	2e38      	cmp	r6, #56	; 0x38
    1762:	dd07      	ble.n	1774 <__aeabi_dmul+0x43c>
    1764:	2200      	movs	r2, #0
    1766:	400c      	ands	r4, r1
    1768:	2300      	movs	r3, #0
    176a:	2500      	movs	r5, #0
    176c:	4690      	mov	r8, r2
    176e:	e649      	b.n	1404 <__aeabi_dmul+0xcc>
    1770:	9e02      	ldr	r6, [sp, #8]
    1772:	e7a3      	b.n	16bc <__aeabi_dmul+0x384>
    1774:	2e1f      	cmp	r6, #31
    1776:	dc20      	bgt.n	17ba <__aeabi_dmul+0x482>
    1778:	2220      	movs	r2, #32
    177a:	002c      	movs	r4, r5
    177c:	0018      	movs	r0, r3
    177e:	1b92      	subs	r2, r2, r6
    1780:	40f0      	lsrs	r0, r6
    1782:	4094      	lsls	r4, r2
    1784:	4093      	lsls	r3, r2
    1786:	4304      	orrs	r4, r0
    1788:	1e58      	subs	r0, r3, #1
    178a:	4183      	sbcs	r3, r0
    178c:	431c      	orrs	r4, r3
    178e:	40f5      	lsrs	r5, r6
    1790:	0763      	lsls	r3, r4, #29
    1792:	d009      	beq.n	17a8 <__aeabi_dmul+0x470>
    1794:	230f      	movs	r3, #15
    1796:	4023      	ands	r3, r4
    1798:	2b04      	cmp	r3, #4
    179a:	d005      	beq.n	17a8 <__aeabi_dmul+0x470>
    179c:	0023      	movs	r3, r4
    179e:	1d1c      	adds	r4, r3, #4
    17a0:	429c      	cmp	r4, r3
    17a2:	4192      	sbcs	r2, r2
    17a4:	4252      	negs	r2, r2
    17a6:	18ad      	adds	r5, r5, r2
    17a8:	022b      	lsls	r3, r5, #8
    17aa:	d51f      	bpl.n	17ec <__aeabi_dmul+0x4b4>
    17ac:	2401      	movs	r4, #1
    17ae:	2200      	movs	r2, #0
    17b0:	400c      	ands	r4, r1
    17b2:	2301      	movs	r3, #1
    17b4:	2500      	movs	r5, #0
    17b6:	4690      	mov	r8, r2
    17b8:	e624      	b.n	1404 <__aeabi_dmul+0xcc>
    17ba:	201f      	movs	r0, #31
    17bc:	002c      	movs	r4, r5
    17be:	4240      	negs	r0, r0
    17c0:	1a82      	subs	r2, r0, r2
    17c2:	40d4      	lsrs	r4, r2
    17c4:	2e20      	cmp	r6, #32
    17c6:	d01c      	beq.n	1802 <__aeabi_dmul+0x4ca>
    17c8:	2240      	movs	r2, #64	; 0x40
    17ca:	1b96      	subs	r6, r2, r6
    17cc:	40b5      	lsls	r5, r6
    17ce:	432b      	orrs	r3, r5
    17d0:	1e58      	subs	r0, r3, #1
    17d2:	4183      	sbcs	r3, r0
    17d4:	2007      	movs	r0, #7
    17d6:	4323      	orrs	r3, r4
    17d8:	4018      	ands	r0, r3
    17da:	2500      	movs	r5, #0
    17dc:	2800      	cmp	r0, #0
    17de:	d009      	beq.n	17f4 <__aeabi_dmul+0x4bc>
    17e0:	220f      	movs	r2, #15
    17e2:	2500      	movs	r5, #0
    17e4:	401a      	ands	r2, r3
    17e6:	001c      	movs	r4, r3
    17e8:	2a04      	cmp	r2, #4
    17ea:	d1d8      	bne.n	179e <__aeabi_dmul+0x466>
    17ec:	0023      	movs	r3, r4
    17ee:	0768      	lsls	r0, r5, #29
    17f0:	026d      	lsls	r5, r5, #9
    17f2:	0b2d      	lsrs	r5, r5, #12
    17f4:	2401      	movs	r4, #1
    17f6:	08db      	lsrs	r3, r3, #3
    17f8:	4303      	orrs	r3, r0
    17fa:	4698      	mov	r8, r3
    17fc:	400c      	ands	r4, r1
    17fe:	2300      	movs	r3, #0
    1800:	e600      	b.n	1404 <__aeabi_dmul+0xcc>
    1802:	2500      	movs	r5, #0
    1804:	e7e3      	b.n	17ce <__aeabi_dmul+0x496>
    1806:	2280      	movs	r2, #128	; 0x80
    1808:	2401      	movs	r4, #1
    180a:	0312      	lsls	r2, r2, #12
    180c:	4315      	orrs	r5, r2
    180e:	032d      	lsls	r5, r5, #12
    1810:	4698      	mov	r8, r3
    1812:	0b2d      	lsrs	r5, r5, #12
    1814:	400c      	ands	r4, r1
    1816:	4b04      	ldr	r3, [pc, #16]	; (1828 <__aeabi_dmul+0x4f0>)
    1818:	e5f4      	b.n	1404 <__aeabi_dmul+0xcc>
    181a:	46c0      	nop			; (mov r8, r8)
    181c:	000003ff 	.word	0x000003ff
    1820:	feffffff 	.word	0xfeffffff
    1824:	000007fe 	.word	0x000007fe
    1828:	000007ff 	.word	0x000007ff

0000182c <__aeabi_i2d>:
    182c:	b570      	push	{r4, r5, r6, lr}
    182e:	2800      	cmp	r0, #0
    1830:	d030      	beq.n	1894 <__aeabi_i2d+0x68>
    1832:	17c3      	asrs	r3, r0, #31
    1834:	18c4      	adds	r4, r0, r3
    1836:	405c      	eors	r4, r3
    1838:	0fc5      	lsrs	r5, r0, #31
    183a:	0020      	movs	r0, r4
    183c:	f000 f918 	bl	1a70 <__clzsi2>
    1840:	4b17      	ldr	r3, [pc, #92]	; (18a0 <__aeabi_i2d+0x74>)
    1842:	4a18      	ldr	r2, [pc, #96]	; (18a4 <__aeabi_i2d+0x78>)
    1844:	1a1b      	subs	r3, r3, r0
    1846:	1ad2      	subs	r2, r2, r3
    1848:	2a1f      	cmp	r2, #31
    184a:	dd18      	ble.n	187e <__aeabi_i2d+0x52>
    184c:	4a16      	ldr	r2, [pc, #88]	; (18a8 <__aeabi_i2d+0x7c>)
    184e:	1ad2      	subs	r2, r2, r3
    1850:	4094      	lsls	r4, r2
    1852:	2200      	movs	r2, #0
    1854:	0324      	lsls	r4, r4, #12
    1856:	055b      	lsls	r3, r3, #21
    1858:	0b24      	lsrs	r4, r4, #12
    185a:	0d5b      	lsrs	r3, r3, #21
    185c:	2100      	movs	r1, #0
    185e:	0010      	movs	r0, r2
    1860:	0324      	lsls	r4, r4, #12
    1862:	0d0a      	lsrs	r2, r1, #20
    1864:	0512      	lsls	r2, r2, #20
    1866:	0b24      	lsrs	r4, r4, #12
    1868:	4314      	orrs	r4, r2
    186a:	4a10      	ldr	r2, [pc, #64]	; (18ac <__aeabi_i2d+0x80>)
    186c:	051b      	lsls	r3, r3, #20
    186e:	4014      	ands	r4, r2
    1870:	431c      	orrs	r4, r3
    1872:	0064      	lsls	r4, r4, #1
    1874:	07ed      	lsls	r5, r5, #31
    1876:	0864      	lsrs	r4, r4, #1
    1878:	432c      	orrs	r4, r5
    187a:	0021      	movs	r1, r4
    187c:	bd70      	pop	{r4, r5, r6, pc}
    187e:	0021      	movs	r1, r4
    1880:	4091      	lsls	r1, r2
    1882:	000a      	movs	r2, r1
    1884:	210b      	movs	r1, #11
    1886:	1a08      	subs	r0, r1, r0
    1888:	40c4      	lsrs	r4, r0
    188a:	055b      	lsls	r3, r3, #21
    188c:	0324      	lsls	r4, r4, #12
    188e:	0b24      	lsrs	r4, r4, #12
    1890:	0d5b      	lsrs	r3, r3, #21
    1892:	e7e3      	b.n	185c <__aeabi_i2d+0x30>
    1894:	2500      	movs	r5, #0
    1896:	2300      	movs	r3, #0
    1898:	2400      	movs	r4, #0
    189a:	2200      	movs	r2, #0
    189c:	e7de      	b.n	185c <__aeabi_i2d+0x30>
    189e:	46c0      	nop			; (mov r8, r8)
    18a0:	0000041e 	.word	0x0000041e
    18a4:	00000433 	.word	0x00000433
    18a8:	00000413 	.word	0x00000413
    18ac:	800fffff 	.word	0x800fffff

000018b0 <__aeabi_f2d>:
    18b0:	0042      	lsls	r2, r0, #1
    18b2:	0e12      	lsrs	r2, r2, #24
    18b4:	1c51      	adds	r1, r2, #1
    18b6:	0243      	lsls	r3, r0, #9
    18b8:	b2c9      	uxtb	r1, r1
    18ba:	b570      	push	{r4, r5, r6, lr}
    18bc:	0a5d      	lsrs	r5, r3, #9
    18be:	0fc4      	lsrs	r4, r0, #31
    18c0:	2901      	cmp	r1, #1
    18c2:	dd15      	ble.n	18f0 <__aeabi_f2d+0x40>
    18c4:	21e0      	movs	r1, #224	; 0xe0
    18c6:	0089      	lsls	r1, r1, #2
    18c8:	468c      	mov	ip, r1
    18ca:	076d      	lsls	r5, r5, #29
    18cc:	0b1b      	lsrs	r3, r3, #12
    18ce:	4462      	add	r2, ip
    18d0:	2100      	movs	r1, #0
    18d2:	0028      	movs	r0, r5
    18d4:	0d0d      	lsrs	r5, r1, #20
    18d6:	052d      	lsls	r5, r5, #20
    18d8:	432b      	orrs	r3, r5
    18da:	4d1c      	ldr	r5, [pc, #112]	; (194c <__aeabi_f2d+0x9c>)
    18dc:	0552      	lsls	r2, r2, #21
    18de:	402b      	ands	r3, r5
    18e0:	0852      	lsrs	r2, r2, #1
    18e2:	4313      	orrs	r3, r2
    18e4:	005b      	lsls	r3, r3, #1
    18e6:	07e4      	lsls	r4, r4, #31
    18e8:	085b      	lsrs	r3, r3, #1
    18ea:	4323      	orrs	r3, r4
    18ec:	0019      	movs	r1, r3
    18ee:	bd70      	pop	{r4, r5, r6, pc}
    18f0:	2a00      	cmp	r2, #0
    18f2:	d115      	bne.n	1920 <__aeabi_f2d+0x70>
    18f4:	2d00      	cmp	r5, #0
    18f6:	d01f      	beq.n	1938 <__aeabi_f2d+0x88>
    18f8:	0028      	movs	r0, r5
    18fa:	f000 f8b9 	bl	1a70 <__clzsi2>
    18fe:	280a      	cmp	r0, #10
    1900:	dc1d      	bgt.n	193e <__aeabi_f2d+0x8e>
    1902:	230b      	movs	r3, #11
    1904:	002a      	movs	r2, r5
    1906:	1a1b      	subs	r3, r3, r0
    1908:	40da      	lsrs	r2, r3
    190a:	0013      	movs	r3, r2
    190c:	0002      	movs	r2, r0
    190e:	3215      	adds	r2, #21
    1910:	4095      	lsls	r5, r2
    1912:	4a0f      	ldr	r2, [pc, #60]	; (1950 <__aeabi_f2d+0xa0>)
    1914:	031b      	lsls	r3, r3, #12
    1916:	1a12      	subs	r2, r2, r0
    1918:	0552      	lsls	r2, r2, #21
    191a:	0b1b      	lsrs	r3, r3, #12
    191c:	0d52      	lsrs	r2, r2, #21
    191e:	e7d7      	b.n	18d0 <__aeabi_f2d+0x20>
    1920:	2d00      	cmp	r5, #0
    1922:	d006      	beq.n	1932 <__aeabi_f2d+0x82>
    1924:	2280      	movs	r2, #128	; 0x80
    1926:	0b1b      	lsrs	r3, r3, #12
    1928:	0312      	lsls	r2, r2, #12
    192a:	4313      	orrs	r3, r2
    192c:	076d      	lsls	r5, r5, #29
    192e:	4a09      	ldr	r2, [pc, #36]	; (1954 <__aeabi_f2d+0xa4>)
    1930:	e7ce      	b.n	18d0 <__aeabi_f2d+0x20>
    1932:	4a08      	ldr	r2, [pc, #32]	; (1954 <__aeabi_f2d+0xa4>)
    1934:	2300      	movs	r3, #0
    1936:	e7cb      	b.n	18d0 <__aeabi_f2d+0x20>
    1938:	2200      	movs	r2, #0
    193a:	2300      	movs	r3, #0
    193c:	e7c8      	b.n	18d0 <__aeabi_f2d+0x20>
    193e:	0003      	movs	r3, r0
    1940:	3b0b      	subs	r3, #11
    1942:	409d      	lsls	r5, r3
    1944:	002b      	movs	r3, r5
    1946:	2500      	movs	r5, #0
    1948:	e7e3      	b.n	1912 <__aeabi_f2d+0x62>
    194a:	46c0      	nop			; (mov r8, r8)
    194c:	800fffff 	.word	0x800fffff
    1950:	00000389 	.word	0x00000389
    1954:	000007ff 	.word	0x000007ff

00001958 <__aeabi_d2f>:
    1958:	004b      	lsls	r3, r1, #1
    195a:	b570      	push	{r4, r5, r6, lr}
    195c:	0d5e      	lsrs	r6, r3, #21
    195e:	030c      	lsls	r4, r1, #12
    1960:	1c75      	adds	r5, r6, #1
    1962:	0a64      	lsrs	r4, r4, #9
    1964:	0f42      	lsrs	r2, r0, #29
    1966:	056d      	lsls	r5, r5, #21
    1968:	4322      	orrs	r2, r4
    196a:	0fc9      	lsrs	r1, r1, #31
    196c:	00c4      	lsls	r4, r0, #3
    196e:	0d6d      	lsrs	r5, r5, #21
    1970:	2d01      	cmp	r5, #1
    1972:	dd2a      	ble.n	19ca <__aeabi_d2f+0x72>
    1974:	4b3b      	ldr	r3, [pc, #236]	; (1a64 <__aeabi_d2f+0x10c>)
    1976:	18f3      	adds	r3, r6, r3
    1978:	2bfe      	cmp	r3, #254	; 0xfe
    197a:	dc1a      	bgt.n	19b2 <__aeabi_d2f+0x5a>
    197c:	2b00      	cmp	r3, #0
    197e:	dd42      	ble.n	1a06 <__aeabi_d2f+0xae>
    1980:	0180      	lsls	r0, r0, #6
    1982:	1e45      	subs	r5, r0, #1
    1984:	41a8      	sbcs	r0, r5
    1986:	00d2      	lsls	r2, r2, #3
    1988:	4310      	orrs	r0, r2
    198a:	0f62      	lsrs	r2, r4, #29
    198c:	4302      	orrs	r2, r0
    198e:	0750      	lsls	r0, r2, #29
    1990:	d004      	beq.n	199c <__aeabi_d2f+0x44>
    1992:	200f      	movs	r0, #15
    1994:	4010      	ands	r0, r2
    1996:	2804      	cmp	r0, #4
    1998:	d000      	beq.n	199c <__aeabi_d2f+0x44>
    199a:	3204      	adds	r2, #4
    199c:	2080      	movs	r0, #128	; 0x80
    199e:	04c0      	lsls	r0, r0, #19
    19a0:	4010      	ands	r0, r2
    19a2:	d021      	beq.n	19e8 <__aeabi_d2f+0x90>
    19a4:	3301      	adds	r3, #1
    19a6:	2bff      	cmp	r3, #255	; 0xff
    19a8:	d003      	beq.n	19b2 <__aeabi_d2f+0x5a>
    19aa:	0192      	lsls	r2, r2, #6
    19ac:	0a52      	lsrs	r2, r2, #9
    19ae:	b2db      	uxtb	r3, r3
    19b0:	e001      	b.n	19b6 <__aeabi_d2f+0x5e>
    19b2:	23ff      	movs	r3, #255	; 0xff
    19b4:	2200      	movs	r2, #0
    19b6:	0252      	lsls	r2, r2, #9
    19b8:	0a52      	lsrs	r2, r2, #9
    19ba:	05db      	lsls	r3, r3, #23
    19bc:	4313      	orrs	r3, r2
    19be:	005b      	lsls	r3, r3, #1
    19c0:	07c9      	lsls	r1, r1, #31
    19c2:	085b      	lsrs	r3, r3, #1
    19c4:	430b      	orrs	r3, r1
    19c6:	0018      	movs	r0, r3
    19c8:	bd70      	pop	{r4, r5, r6, pc}
    19ca:	2e00      	cmp	r6, #0
    19cc:	d007      	beq.n	19de <__aeabi_d2f+0x86>
    19ce:	4314      	orrs	r4, r2
    19d0:	d0ef      	beq.n	19b2 <__aeabi_d2f+0x5a>
    19d2:	2080      	movs	r0, #128	; 0x80
    19d4:	00d2      	lsls	r2, r2, #3
    19d6:	0480      	lsls	r0, r0, #18
    19d8:	4302      	orrs	r2, r0
    19da:	23ff      	movs	r3, #255	; 0xff
    19dc:	e7d7      	b.n	198e <__aeabi_d2f+0x36>
    19de:	4322      	orrs	r2, r4
    19e0:	2300      	movs	r3, #0
    19e2:	2a00      	cmp	r2, #0
    19e4:	d003      	beq.n	19ee <__aeabi_d2f+0x96>
    19e6:	2205      	movs	r2, #5
    19e8:	08d2      	lsrs	r2, r2, #3
    19ea:	2bff      	cmp	r3, #255	; 0xff
    19ec:	d003      	beq.n	19f6 <__aeabi_d2f+0x9e>
    19ee:	0252      	lsls	r2, r2, #9
    19f0:	0a52      	lsrs	r2, r2, #9
    19f2:	b2db      	uxtb	r3, r3
    19f4:	e7df      	b.n	19b6 <__aeabi_d2f+0x5e>
    19f6:	2a00      	cmp	r2, #0
    19f8:	d032      	beq.n	1a60 <__aeabi_d2f+0x108>
    19fa:	2080      	movs	r0, #128	; 0x80
    19fc:	03c0      	lsls	r0, r0, #15
    19fe:	4302      	orrs	r2, r0
    1a00:	0252      	lsls	r2, r2, #9
    1a02:	0a52      	lsrs	r2, r2, #9
    1a04:	e7d7      	b.n	19b6 <__aeabi_d2f+0x5e>
    1a06:	0018      	movs	r0, r3
    1a08:	3017      	adds	r0, #23
    1a0a:	db14      	blt.n	1a36 <__aeabi_d2f+0xde>
    1a0c:	2080      	movs	r0, #128	; 0x80
    1a0e:	0400      	lsls	r0, r0, #16
    1a10:	4302      	orrs	r2, r0
    1a12:	201e      	movs	r0, #30
    1a14:	1ac0      	subs	r0, r0, r3
    1a16:	281f      	cmp	r0, #31
    1a18:	dc0f      	bgt.n	1a3a <__aeabi_d2f+0xe2>
    1a1a:	0025      	movs	r5, r4
    1a1c:	4b12      	ldr	r3, [pc, #72]	; (1a68 <__aeabi_d2f+0x110>)
    1a1e:	18f3      	adds	r3, r6, r3
    1a20:	409d      	lsls	r5, r3
    1a22:	1e6e      	subs	r6, r5, #1
    1a24:	41b5      	sbcs	r5, r6
    1a26:	409a      	lsls	r2, r3
    1a28:	002b      	movs	r3, r5
    1a2a:	4313      	orrs	r3, r2
    1a2c:	0022      	movs	r2, r4
    1a2e:	40c2      	lsrs	r2, r0
    1a30:	431a      	orrs	r2, r3
    1a32:	2300      	movs	r3, #0
    1a34:	e7ab      	b.n	198e <__aeabi_d2f+0x36>
    1a36:	2300      	movs	r3, #0
    1a38:	e7d5      	b.n	19e6 <__aeabi_d2f+0x8e>
    1a3a:	2502      	movs	r5, #2
    1a3c:	426d      	negs	r5, r5
    1a3e:	1aeb      	subs	r3, r5, r3
    1a40:	0015      	movs	r5, r2
    1a42:	40dd      	lsrs	r5, r3
    1a44:	2820      	cmp	r0, #32
    1a46:	d009      	beq.n	1a5c <__aeabi_d2f+0x104>
    1a48:	4b08      	ldr	r3, [pc, #32]	; (1a6c <__aeabi_d2f+0x114>)
    1a4a:	18f3      	adds	r3, r6, r3
    1a4c:	409a      	lsls	r2, r3
    1a4e:	4314      	orrs	r4, r2
    1a50:	1e62      	subs	r2, r4, #1
    1a52:	4194      	sbcs	r4, r2
    1a54:	0022      	movs	r2, r4
    1a56:	2300      	movs	r3, #0
    1a58:	432a      	orrs	r2, r5
    1a5a:	e798      	b.n	198e <__aeabi_d2f+0x36>
    1a5c:	2200      	movs	r2, #0
    1a5e:	e7f6      	b.n	1a4e <__aeabi_d2f+0xf6>
    1a60:	2200      	movs	r2, #0
    1a62:	e7a8      	b.n	19b6 <__aeabi_d2f+0x5e>
    1a64:	fffffc80 	.word	0xfffffc80
    1a68:	fffffc82 	.word	0xfffffc82
    1a6c:	fffffca2 	.word	0xfffffca2

00001a70 <__clzsi2>:
    1a70:	211c      	movs	r1, #28
    1a72:	2301      	movs	r3, #1
    1a74:	041b      	lsls	r3, r3, #16
    1a76:	4298      	cmp	r0, r3
    1a78:	d301      	bcc.n	1a7e <__clzsi2+0xe>
    1a7a:	0c00      	lsrs	r0, r0, #16
    1a7c:	3910      	subs	r1, #16
    1a7e:	0a1b      	lsrs	r3, r3, #8
    1a80:	4298      	cmp	r0, r3
    1a82:	d301      	bcc.n	1a88 <__clzsi2+0x18>
    1a84:	0a00      	lsrs	r0, r0, #8
    1a86:	3908      	subs	r1, #8
    1a88:	091b      	lsrs	r3, r3, #4
    1a8a:	4298      	cmp	r0, r3
    1a8c:	d301      	bcc.n	1a92 <__clzsi2+0x22>
    1a8e:	0900      	lsrs	r0, r0, #4
    1a90:	3904      	subs	r1, #4
    1a92:	a202      	add	r2, pc, #8	; (adr r2, 1a9c <__clzsi2+0x2c>)
    1a94:	5c10      	ldrb	r0, [r2, r0]
    1a96:	1840      	adds	r0, r0, r1
    1a98:	4770      	bx	lr
    1a9a:	46c0      	nop			; (mov r8, r8)
    1a9c:	02020304 	.word	0x02020304
    1aa0:	01010101 	.word	0x01010101
	...

00001aac <__libc_init_array>:
    1aac:	b570      	push	{r4, r5, r6, lr}
    1aae:	4e0d      	ldr	r6, [pc, #52]	; (1ae4 <__libc_init_array+0x38>)
    1ab0:	4d0d      	ldr	r5, [pc, #52]	; (1ae8 <__libc_init_array+0x3c>)
    1ab2:	2400      	movs	r4, #0
    1ab4:	1bad      	subs	r5, r5, r6
    1ab6:	10ad      	asrs	r5, r5, #2
    1ab8:	d005      	beq.n	1ac6 <__libc_init_array+0x1a>
    1aba:	00a3      	lsls	r3, r4, #2
    1abc:	58f3      	ldr	r3, [r6, r3]
    1abe:	3401      	adds	r4, #1
    1ac0:	4798      	blx	r3
    1ac2:	42a5      	cmp	r5, r4
    1ac4:	d1f9      	bne.n	1aba <__libc_init_array+0xe>
    1ac6:	f000 f9fd 	bl	1ec4 <_init>
    1aca:	4e08      	ldr	r6, [pc, #32]	; (1aec <__libc_init_array+0x40>)
    1acc:	4d08      	ldr	r5, [pc, #32]	; (1af0 <__libc_init_array+0x44>)
    1ace:	2400      	movs	r4, #0
    1ad0:	1bad      	subs	r5, r5, r6
    1ad2:	10ad      	asrs	r5, r5, #2
    1ad4:	d005      	beq.n	1ae2 <__libc_init_array+0x36>
    1ad6:	00a3      	lsls	r3, r4, #2
    1ad8:	58f3      	ldr	r3, [r6, r3]
    1ada:	3401      	adds	r4, #1
    1adc:	4798      	blx	r3
    1ade:	42a5      	cmp	r5, r4
    1ae0:	d1f9      	bne.n	1ad6 <__libc_init_array+0x2a>
    1ae2:	bd70      	pop	{r4, r5, r6, pc}
    1ae4:	00001ed0 	.word	0x00001ed0
    1ae8:	00001ed0 	.word	0x00001ed0
    1aec:	00001ed0 	.word	0x00001ed0
    1af0:	00001ed8 	.word	0x00001ed8

00001af4 <memset>:
    1af4:	b570      	push	{r4, r5, r6, lr}
    1af6:	0783      	lsls	r3, r0, #30
    1af8:	d03f      	beq.n	1b7a <memset+0x86>
    1afa:	1e54      	subs	r4, r2, #1
    1afc:	2a00      	cmp	r2, #0
    1afe:	d03b      	beq.n	1b78 <memset+0x84>
    1b00:	b2ce      	uxtb	r6, r1
    1b02:	0003      	movs	r3, r0
    1b04:	2503      	movs	r5, #3
    1b06:	e003      	b.n	1b10 <memset+0x1c>
    1b08:	1e62      	subs	r2, r4, #1
    1b0a:	2c00      	cmp	r4, #0
    1b0c:	d034      	beq.n	1b78 <memset+0x84>
    1b0e:	0014      	movs	r4, r2
    1b10:	3301      	adds	r3, #1
    1b12:	1e5a      	subs	r2, r3, #1
    1b14:	7016      	strb	r6, [r2, #0]
    1b16:	422b      	tst	r3, r5
    1b18:	d1f6      	bne.n	1b08 <memset+0x14>
    1b1a:	2c03      	cmp	r4, #3
    1b1c:	d924      	bls.n	1b68 <memset+0x74>
    1b1e:	25ff      	movs	r5, #255	; 0xff
    1b20:	400d      	ands	r5, r1
    1b22:	022a      	lsls	r2, r5, #8
    1b24:	4315      	orrs	r5, r2
    1b26:	042a      	lsls	r2, r5, #16
    1b28:	4315      	orrs	r5, r2
    1b2a:	2c0f      	cmp	r4, #15
    1b2c:	d911      	bls.n	1b52 <memset+0x5e>
    1b2e:	0026      	movs	r6, r4
    1b30:	3e10      	subs	r6, #16
    1b32:	0936      	lsrs	r6, r6, #4
    1b34:	3601      	adds	r6, #1
    1b36:	0136      	lsls	r6, r6, #4
    1b38:	001a      	movs	r2, r3
    1b3a:	199b      	adds	r3, r3, r6
    1b3c:	6015      	str	r5, [r2, #0]
    1b3e:	6055      	str	r5, [r2, #4]
    1b40:	6095      	str	r5, [r2, #8]
    1b42:	60d5      	str	r5, [r2, #12]
    1b44:	3210      	adds	r2, #16
    1b46:	4293      	cmp	r3, r2
    1b48:	d1f8      	bne.n	1b3c <memset+0x48>
    1b4a:	220f      	movs	r2, #15
    1b4c:	4014      	ands	r4, r2
    1b4e:	2c03      	cmp	r4, #3
    1b50:	d90a      	bls.n	1b68 <memset+0x74>
    1b52:	1f26      	subs	r6, r4, #4
    1b54:	08b6      	lsrs	r6, r6, #2
    1b56:	3601      	adds	r6, #1
    1b58:	00b6      	lsls	r6, r6, #2
    1b5a:	001a      	movs	r2, r3
    1b5c:	199b      	adds	r3, r3, r6
    1b5e:	c220      	stmia	r2!, {r5}
    1b60:	4293      	cmp	r3, r2
    1b62:	d1fc      	bne.n	1b5e <memset+0x6a>
    1b64:	2203      	movs	r2, #3
    1b66:	4014      	ands	r4, r2
    1b68:	2c00      	cmp	r4, #0
    1b6a:	d005      	beq.n	1b78 <memset+0x84>
    1b6c:	b2c9      	uxtb	r1, r1
    1b6e:	191c      	adds	r4, r3, r4
    1b70:	7019      	strb	r1, [r3, #0]
    1b72:	3301      	adds	r3, #1
    1b74:	429c      	cmp	r4, r3
    1b76:	d1fb      	bne.n	1b70 <memset+0x7c>
    1b78:	bd70      	pop	{r4, r5, r6, pc}
    1b7a:	0014      	movs	r4, r2
    1b7c:	0003      	movs	r3, r0
    1b7e:	e7cc      	b.n	1b1a <memset+0x26>

00001b80 <register_fini>:
    1b80:	4b03      	ldr	r3, [pc, #12]	; (1b90 <register_fini+0x10>)
    1b82:	b510      	push	{r4, lr}
    1b84:	2b00      	cmp	r3, #0
    1b86:	d002      	beq.n	1b8e <register_fini+0xe>
    1b88:	4802      	ldr	r0, [pc, #8]	; (1b94 <register_fini+0x14>)
    1b8a:	f000 f805 	bl	1b98 <atexit>
    1b8e:	bd10      	pop	{r4, pc}
    1b90:	00000000 	.word	0x00000000
    1b94:	00001ba9 	.word	0x00001ba9

00001b98 <atexit>:
    1b98:	b510      	push	{r4, lr}
    1b9a:	0001      	movs	r1, r0
    1b9c:	2300      	movs	r3, #0
    1b9e:	2200      	movs	r2, #0
    1ba0:	2000      	movs	r0, #0
    1ba2:	f000 f81b 	bl	1bdc <__register_exitproc>
    1ba6:	bd10      	pop	{r4, pc}

00001ba8 <__libc_fini_array>:
    1ba8:	b570      	push	{r4, r5, r6, lr}
    1baa:	4b09      	ldr	r3, [pc, #36]	; (1bd0 <__libc_fini_array+0x28>)
    1bac:	4c09      	ldr	r4, [pc, #36]	; (1bd4 <__libc_fini_array+0x2c>)
    1bae:	1ae4      	subs	r4, r4, r3
    1bb0:	10a4      	asrs	r4, r4, #2
    1bb2:	d009      	beq.n	1bc8 <__libc_fini_array+0x20>
    1bb4:	4a08      	ldr	r2, [pc, #32]	; (1bd8 <__libc_fini_array+0x30>)
    1bb6:	18a5      	adds	r5, r4, r2
    1bb8:	00ad      	lsls	r5, r5, #2
    1bba:	18ed      	adds	r5, r5, r3
    1bbc:	682b      	ldr	r3, [r5, #0]
    1bbe:	3c01      	subs	r4, #1
    1bc0:	4798      	blx	r3
    1bc2:	3d04      	subs	r5, #4
    1bc4:	2c00      	cmp	r4, #0
    1bc6:	d1f9      	bne.n	1bbc <__libc_fini_array+0x14>
    1bc8:	f000 f986 	bl	1ed8 <_fini>
    1bcc:	bd70      	pop	{r4, r5, r6, pc}
    1bce:	46c0      	nop			; (mov r8, r8)
    1bd0:	00001ee4 	.word	0x00001ee4
    1bd4:	00001ee8 	.word	0x00001ee8
    1bd8:	3fffffff 	.word	0x3fffffff

00001bdc <__register_exitproc>:
    1bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1bde:	4644      	mov	r4, r8
    1be0:	465f      	mov	r7, fp
    1be2:	4656      	mov	r6, sl
    1be4:	464d      	mov	r5, r9
    1be6:	469b      	mov	fp, r3
    1be8:	4b2f      	ldr	r3, [pc, #188]	; (1ca8 <__register_exitproc+0xcc>)
    1bea:	b4f0      	push	{r4, r5, r6, r7}
    1bec:	681c      	ldr	r4, [r3, #0]
    1bee:	23a4      	movs	r3, #164	; 0xa4
    1bf0:	005b      	lsls	r3, r3, #1
    1bf2:	0005      	movs	r5, r0
    1bf4:	58e0      	ldr	r0, [r4, r3]
    1bf6:	000e      	movs	r6, r1
    1bf8:	4690      	mov	r8, r2
    1bfa:	2800      	cmp	r0, #0
    1bfc:	d04b      	beq.n	1c96 <__register_exitproc+0xba>
    1bfe:	6843      	ldr	r3, [r0, #4]
    1c00:	2b1f      	cmp	r3, #31
    1c02:	dc0d      	bgt.n	1c20 <__register_exitproc+0x44>
    1c04:	1c5c      	adds	r4, r3, #1
    1c06:	2d00      	cmp	r5, #0
    1c08:	d121      	bne.n	1c4e <__register_exitproc+0x72>
    1c0a:	3302      	adds	r3, #2
    1c0c:	009b      	lsls	r3, r3, #2
    1c0e:	6044      	str	r4, [r0, #4]
    1c10:	501e      	str	r6, [r3, r0]
    1c12:	2000      	movs	r0, #0
    1c14:	bc3c      	pop	{r2, r3, r4, r5}
    1c16:	4690      	mov	r8, r2
    1c18:	4699      	mov	r9, r3
    1c1a:	46a2      	mov	sl, r4
    1c1c:	46ab      	mov	fp, r5
    1c1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1c20:	4b22      	ldr	r3, [pc, #136]	; (1cac <__register_exitproc+0xd0>)
    1c22:	2b00      	cmp	r3, #0
    1c24:	d03c      	beq.n	1ca0 <__register_exitproc+0xc4>
    1c26:	20c8      	movs	r0, #200	; 0xc8
    1c28:	0040      	lsls	r0, r0, #1
    1c2a:	e000      	b.n	1c2e <__register_exitproc+0x52>
    1c2c:	bf00      	nop
    1c2e:	2800      	cmp	r0, #0
    1c30:	d036      	beq.n	1ca0 <__register_exitproc+0xc4>
    1c32:	22a4      	movs	r2, #164	; 0xa4
    1c34:	2300      	movs	r3, #0
    1c36:	0052      	lsls	r2, r2, #1
    1c38:	58a1      	ldr	r1, [r4, r2]
    1c3a:	6043      	str	r3, [r0, #4]
    1c3c:	6001      	str	r1, [r0, #0]
    1c3e:	50a0      	str	r0, [r4, r2]
    1c40:	3240      	adds	r2, #64	; 0x40
    1c42:	5083      	str	r3, [r0, r2]
    1c44:	3204      	adds	r2, #4
    1c46:	5083      	str	r3, [r0, r2]
    1c48:	2401      	movs	r4, #1
    1c4a:	2d00      	cmp	r5, #0
    1c4c:	d0dd      	beq.n	1c0a <__register_exitproc+0x2e>
    1c4e:	009a      	lsls	r2, r3, #2
    1c50:	4691      	mov	r9, r2
    1c52:	4481      	add	r9, r0
    1c54:	4642      	mov	r2, r8
    1c56:	2188      	movs	r1, #136	; 0x88
    1c58:	464f      	mov	r7, r9
    1c5a:	507a      	str	r2, [r7, r1]
    1c5c:	22c4      	movs	r2, #196	; 0xc4
    1c5e:	0052      	lsls	r2, r2, #1
    1c60:	4690      	mov	r8, r2
    1c62:	4480      	add	r8, r0
    1c64:	4642      	mov	r2, r8
    1c66:	3987      	subs	r1, #135	; 0x87
    1c68:	4099      	lsls	r1, r3
    1c6a:	6812      	ldr	r2, [r2, #0]
    1c6c:	468a      	mov	sl, r1
    1c6e:	430a      	orrs	r2, r1
    1c70:	4694      	mov	ip, r2
    1c72:	4642      	mov	r2, r8
    1c74:	4661      	mov	r1, ip
    1c76:	6011      	str	r1, [r2, #0]
    1c78:	2284      	movs	r2, #132	; 0x84
    1c7a:	4649      	mov	r1, r9
    1c7c:	465f      	mov	r7, fp
    1c7e:	0052      	lsls	r2, r2, #1
    1c80:	508f      	str	r7, [r1, r2]
    1c82:	2d02      	cmp	r5, #2
    1c84:	d1c1      	bne.n	1c0a <__register_exitproc+0x2e>
    1c86:	0002      	movs	r2, r0
    1c88:	4655      	mov	r5, sl
    1c8a:	328d      	adds	r2, #141	; 0x8d
    1c8c:	32ff      	adds	r2, #255	; 0xff
    1c8e:	6811      	ldr	r1, [r2, #0]
    1c90:	430d      	orrs	r5, r1
    1c92:	6015      	str	r5, [r2, #0]
    1c94:	e7b9      	b.n	1c0a <__register_exitproc+0x2e>
    1c96:	0020      	movs	r0, r4
    1c98:	304d      	adds	r0, #77	; 0x4d
    1c9a:	30ff      	adds	r0, #255	; 0xff
    1c9c:	50e0      	str	r0, [r4, r3]
    1c9e:	e7ae      	b.n	1bfe <__register_exitproc+0x22>
    1ca0:	2001      	movs	r0, #1
    1ca2:	4240      	negs	r0, r0
    1ca4:	e7b6      	b.n	1c14 <__register_exitproc+0x38>
    1ca6:	46c0      	nop			; (mov r8, r8)
    1ca8:	00001ec0 	.word	0x00001ec0
    1cac:	00000000 	.word	0x00000000

00001cb0 <senseAPin>:
    1cb0:	08000000 00000008                       ........

00001cb8 <analogAccelPin>:
    1cb8:	07000000 00000007                       ........

00001cc0 <lookupTable.12298>:
    1cc0:	ffff8d20 ffffada1 ffffce64 ffffef6c      .......d...l...
    1cd0:	000010b7 0000324a 00005425 00007649     ....J2..%T..Iv..
    1ce0:	000098b7 0000bb72 0000de79 000101d0     ....r...y.......
    1cf0:	00012576 0001496f 00016dbc 0001925e     v%..oI...m..^...
    1d00:	0001b758 0001dcaa 00020258 00022862     X.......X...b(..
    1d10:	00024ecc 00027596 00029cc4 0002c457     .N...u......W...
    1d20:	0002ec52 000314b7 00033d89 000366ca     R........=...f..
    1d30:	0003907d 0003baa4 0003e544 0004105e     }.......D...^...
    1d40:	00043bf6 0004680e 000494ac 0004c1d1     .;...h..........
    1d50:	0004ef81 00051dc1 00054c95 00057c00     .........L...|..
    1d60:	0005ac07 0005dcae 00060dfb 00063ff2     .............?..
    1d70:	00067298 0006a5f4 0006da09 00070ee0     .r..............
    1d80:	0007447d 00077ae8 0007b228 0007ea44     }D...z..(...D...
    1d90:	00082344 00085d30 00089810 0008d3ef     D#..0]..........
    1da0:	000910d6 00094ecf 00098de5 0009ce23     .....N......#...
    1db0:	000a0f98 000a524f 000a9657 000adbbf     ....OR..W.......
    1dc0:	000b2298 000b6af3 000bb4e2 000c007b     ."...j......{...
    1dd0:	000c4dd4 000c9d03 000cee23 000d4150     .M......#...PA..
    1de0:	000d96a9 000dee4e 000e4865 000ea516     ....N...eH......
    1df0:	000f048e                                ....

00001df4 <senseBatPin>:
    1df4:	05000000 00000005 0000114a 0000106e     ........J...n...
    1e04:	0000112c 00001104 0000112c 000010f8     ,.......,.......
    1e14:	0000112c 00001104 0000106e 0000106e     ,.......n...n...
    1e24:	000010f8 00001104 000011b0 000011b0     ................
    1e34:	000011b0 00001132 0000106e 0000106e     ....2...n...n...
    1e44:	00001118 00001102 00001118 000010f8     ................
    1e54:	00001118 00001102 0000106e 0000106e     ........n...n...
    1e64:	000010f8 00001102 000011b0 000011b0     ................
    1e74:	000011b0 000011bc 00001528 000013e8     ........(.......
    1e84:	000013e8 000013e6 00001500 00001500     ................
    1e94:	000014f2 000013e6 00001500 000014f2     ................
    1ea4:	00001500 000013e6 00001508 00001508     ................
    1eb4:	00001508 00001708 00000043              ........C...

00001ec0 <_global_impure_ptr>:
    1ec0:	20000010                                ... 

00001ec4 <_init>:
    1ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1ec6:	46c0      	nop			; (mov r8, r8)
    1ec8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    1eca:	bc08      	pop	{r3}
    1ecc:	469e      	mov	lr, r3
    1ece:	4770      	bx	lr

00001ed0 <__init_array_start>:
    1ed0:	00001b81 	.word	0x00001b81

00001ed4 <__frame_dummy_init_array_entry>:
    1ed4:	000000dd                                ....

00001ed8 <_fini>:
    1ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1eda:	46c0      	nop			; (mov r8, r8)
    1edc:	bcf8      	pop	{r3, r4, r5, r6, r7}
    1ede:	bc08      	pop	{r3}
    1ee0:	469e      	mov	lr, r3
    1ee2:	4770      	bx	lr

00001ee4 <__fini_array_start>:
    1ee4:	000000b5 	.word	0x000000b5
