
DasAltimeter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a98  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000438  20000000  00000a98  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000001a0  20000440  00000ee0  00020440  2**4
                  ALLOC
  3 .stack        00002000  200005e0  00001080  00020440  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020438  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020460  2**0
                  CONTENTS, READONLY
  6 .debug_info   0000eeda  00000000  00000000  000204b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000db3  00000000  00000000  0002f393  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000cd9  00000000  00000000  00030146  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000001b0  00000000  00000000  00030e1f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000188  00000000  00000000  00030fcf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00012c1d  00000000  00000000  00031157  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000038d5  00000000  00000000  00043d74  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00070a73  00000000  00000000  00047649  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000004c8  00000000  00000000  000b80bc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
   0:	200025e0 	.word	0x200025e0
   4:	00000119 	.word	0x00000119
   8:	00000115 	.word	0x00000115
   c:	00000115 	.word	0x00000115
	...
  2c:	00000115 	.word	0x00000115
	...
  38:	00000115 	.word	0x00000115
  3c:	00000115 	.word	0x00000115
  40:	00000115 	.word	0x00000115
  44:	00000115 	.word	0x00000115
  48:	00000115 	.word	0x00000115
  4c:	00000115 	.word	0x00000115
  50:	00000115 	.word	0x00000115
  54:	00000115 	.word	0x00000115
  58:	00000115 	.word	0x00000115
  5c:	00000115 	.word	0x00000115
  60:	00000115 	.word	0x00000115
  64:	00000115 	.word	0x00000115
  68:	00000115 	.word	0x00000115
  6c:	00000115 	.word	0x00000115
  70:	00000115 	.word	0x00000115
  74:	00000115 	.word	0x00000115
  78:	00000115 	.word	0x00000115
  7c:	00000115 	.word	0x00000115
  80:	00000115 	.word	0x00000115
  84:	00000115 	.word	0x00000115
  88:	00000115 	.word	0x00000115
  8c:	00000115 	.word	0x00000115
  90:	00000115 	.word	0x00000115
	...
  9c:	00000115 	.word	0x00000115
  a0:	00000115 	.word	0x00000115
  a4:	00000115 	.word	0x00000115
  a8:	00000115 	.word	0x00000115
  ac:	00000115 	.word	0x00000115
  b0:	00000000 	.word	0x00000000

000000b4 <__do_global_dtors_aux>:
  b4:	b510      	push	{r4, lr}
  b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
  b8:	7823      	ldrb	r3, [r4, #0]
  ba:	2b00      	cmp	r3, #0
  bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
  be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
  c0:	2b00      	cmp	r3, #0
  c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
  c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
  c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
  c8:	bf00      	nop
  ca:	2301      	movs	r3, #1
  cc:	7023      	strb	r3, [r4, #0]
  ce:	bd10      	pop	{r4, pc}
  d0:	20000440 	.word	0x20000440
  d4:	00000000 	.word	0x00000000
  d8:	00000a98 	.word	0x00000a98

000000dc <frame_dummy>:
  dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
  de:	b510      	push	{r4, lr}
  e0:	2b00      	cmp	r3, #0
  e2:	d003      	beq.n	ec <frame_dummy+0x10>
  e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
  e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
  e8:	e000      	b.n	ec <frame_dummy+0x10>
  ea:	bf00      	nop
  ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
  ee:	6803      	ldr	r3, [r0, #0]
  f0:	2b00      	cmp	r3, #0
  f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
  f4:	bd10      	pop	{r4, pc}
  f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
  f8:	2b00      	cmp	r3, #0
  fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
  fc:	4798      	blx	r3
  fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
 100:	00000000 	.word	0x00000000
 104:	20000444 	.word	0x20000444
 108:	00000a98 	.word	0x00000a98
 10c:	00000a98 	.word	0x00000a98
 110:	00000000 	.word	0x00000000

00000114 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
 114:	e7fe      	b.n	114 <Dummy_Handler>
 116:	46c0      	nop			; (mov r8, r8)

00000118 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
 118:	b570      	push	{r4, r5, r6, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
 11a:	4b2e      	ldr	r3, [pc, #184]	; (1d4 <Reset_Handler+0xbc>)
 11c:	4a2e      	ldr	r2, [pc, #184]	; (1d8 <Reset_Handler+0xc0>)
 11e:	429a      	cmp	r2, r3
 120:	d003      	beq.n	12a <Reset_Handler+0x12>
                for (; pDest < &_erelocate;) {
 122:	4b2e      	ldr	r3, [pc, #184]	; (1dc <Reset_Handler+0xc4>)
 124:	4a2b      	ldr	r2, [pc, #172]	; (1d4 <Reset_Handler+0xbc>)
 126:	429a      	cmp	r2, r3
 128:	d304      	bcc.n	134 <Reset_Handler+0x1c>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
 12a:	4b2d      	ldr	r3, [pc, #180]	; (1e0 <Reset_Handler+0xc8>)
 12c:	4a2d      	ldr	r2, [pc, #180]	; (1e4 <Reset_Handler+0xcc>)
 12e:	429a      	cmp	r2, r3
 130:	d310      	bcc.n	154 <Reset_Handler+0x3c>
 132:	e01e      	b.n	172 <Reset_Handler+0x5a>
 134:	4a2c      	ldr	r2, [pc, #176]	; (1e8 <Reset_Handler+0xd0>)
 136:	4b29      	ldr	r3, [pc, #164]	; (1dc <Reset_Handler+0xc4>)
 138:	3303      	adds	r3, #3
 13a:	1a9b      	subs	r3, r3, r2
 13c:	089b      	lsrs	r3, r3, #2
 13e:	3301      	adds	r3, #1
 140:	009b      	lsls	r3, r3, #2
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
 142:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
 144:	4823      	ldr	r0, [pc, #140]	; (1d4 <Reset_Handler+0xbc>)
 146:	4924      	ldr	r1, [pc, #144]	; (1d8 <Reset_Handler+0xc0>)
 148:	588c      	ldr	r4, [r1, r2]
 14a:	5084      	str	r4, [r0, r2]
 14c:	3204      	adds	r2, #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
 14e:	429a      	cmp	r2, r3
 150:	d1fa      	bne.n	148 <Reset_Handler+0x30>
 152:	e7ea      	b.n	12a <Reset_Handler+0x12>
 154:	4a25      	ldr	r2, [pc, #148]	; (1ec <Reset_Handler+0xd4>)
 156:	4b22      	ldr	r3, [pc, #136]	; (1e0 <Reset_Handler+0xc8>)
 158:	3303      	adds	r3, #3
 15a:	1a9b      	subs	r3, r3, r2
 15c:	089b      	lsrs	r3, r3, #2
 15e:	3301      	adds	r3, #1
 160:	009b      	lsls	r3, r3, #2
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
 162:	2200      	movs	r2, #0
                *pDest++ = 0;
 164:	481f      	ldr	r0, [pc, #124]	; (1e4 <Reset_Handler+0xcc>)
 166:	2100      	movs	r1, #0
 168:	1814      	adds	r4, r2, r0
 16a:	6021      	str	r1, [r4, #0]
 16c:	3204      	adds	r2, #4
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
 16e:	429a      	cmp	r2, r3
 170:	d1fa      	bne.n	168 <Reset_Handler+0x50>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
 172:	4a1f      	ldr	r2, [pc, #124]	; (1f0 <Reset_Handler+0xd8>)
 174:	21ff      	movs	r1, #255	; 0xff
 176:	4b1f      	ldr	r3, [pc, #124]	; (1f4 <Reset_Handler+0xdc>)
 178:	438b      	bics	r3, r1
 17a:	6093      	str	r3, [r2, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
 17c:	39fd      	subs	r1, #253	; 0xfd
 17e:	2390      	movs	r3, #144	; 0x90
 180:	005b      	lsls	r3, r3, #1
 182:	4a1d      	ldr	r2, [pc, #116]	; (1f8 <Reset_Handler+0xe0>)
 184:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
 186:	481d      	ldr	r0, [pc, #116]	; (1fc <Reset_Handler+0xe4>)
 188:	78c3      	ldrb	r3, [r0, #3]
 18a:	2403      	movs	r4, #3
 18c:	43a3      	bics	r3, r4
 18e:	2202      	movs	r2, #2
 190:	4313      	orrs	r3, r2
 192:	70c3      	strb	r3, [r0, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
 194:	78c3      	ldrb	r3, [r0, #3]
 196:	260c      	movs	r6, #12
 198:	43b3      	bics	r3, r6
 19a:	2108      	movs	r1, #8
 19c:	430b      	orrs	r3, r1
 19e:	70c3      	strb	r3, [r0, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
 1a0:	4b17      	ldr	r3, [pc, #92]	; (200 <Reset_Handler+0xe8>)
 1a2:	7b98      	ldrb	r0, [r3, #14]
 1a4:	2530      	movs	r5, #48	; 0x30
 1a6:	43a8      	bics	r0, r5
 1a8:	0005      	movs	r5, r0
 1aa:	2020      	movs	r0, #32
 1ac:	4328      	orrs	r0, r5
 1ae:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
 1b0:	7b98      	ldrb	r0, [r3, #14]
 1b2:	43b0      	bics	r0, r6
 1b4:	4301      	orrs	r1, r0
 1b6:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
 1b8:	7b99      	ldrb	r1, [r3, #14]
 1ba:	43a1      	bics	r1, r4
 1bc:	430a      	orrs	r2, r1
 1be:	739a      	strb	r2, [r3, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
 1c0:	4a10      	ldr	r2, [pc, #64]	; (204 <Reset_Handler+0xec>)
 1c2:	6851      	ldr	r1, [r2, #4]
 1c4:	2380      	movs	r3, #128	; 0x80
 1c6:	430b      	orrs	r3, r1
 1c8:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
 1ca:	4b0f      	ldr	r3, [pc, #60]	; (208 <Reset_Handler+0xf0>)
 1cc:	4798      	blx	r3

        /* Branch to main function */
        main();
 1ce:	4b0f      	ldr	r3, [pc, #60]	; (20c <Reset_Handler+0xf4>)
 1d0:	4798      	blx	r3
 1d2:	e7fe      	b.n	1d2 <Reset_Handler+0xba>
 1d4:	20000000 	.word	0x20000000
 1d8:	00000a98 	.word	0x00000a98
 1dc:	20000438 	.word	0x20000438
 1e0:	200005e0 	.word	0x200005e0
 1e4:	20000440 	.word	0x20000440
 1e8:	20000004 	.word	0x20000004
 1ec:	20000444 	.word	0x20000444
 1f0:	e000ed00 	.word	0xe000ed00
 1f4:	00000000 	.word	0x00000000
 1f8:	41007000 	.word	0x41007000
 1fc:	41005000 	.word	0x41005000
 200:	41004800 	.word	0x41004800
 204:	41004000 	.word	0x41004000
 208:	00000865 	.word	0x00000865
 20c:	000002dd 	.word	0x000002dd

00000210 <SystemInit>:
 *         Initialize the System and update the SystemCoreClock variable.
 */
void SystemInit(void)
{
	// Keep the default device state after reset
	SystemCoreClock = __SYSTEM_CLOCK;
 210:	4a01      	ldr	r2, [pc, #4]	; (218 <SystemInit+0x8>)
 212:	4b02      	ldr	r3, [pc, #8]	; (21c <SystemInit+0xc>)
 214:	601a      	str	r2, [r3, #0]
	return;
}
 216:	4770      	bx	lr
 218:	000f4240 	.word	0x000f4240
 21c:	20000000 	.word	0x20000000

00000220 <init>:
#include <flight.h>
#include <boardDefines.h>



void init() {
 220:	b510      	push	{r4, lr}
    SystemInit();
 222:	4b26      	ldr	r3, [pc, #152]	; (2bc <init+0x9c>)
 224:	4798      	blx	r3
    GclkInit();
 226:	4b26      	ldr	r3, [pc, #152]	; (2c0 <init+0xa0>)
 228:	4798      	blx	r3
    delayInit();
 22a:	4b26      	ldr	r3, [pc, #152]	; (2c4 <init+0xa4>)
 22c:	4798      	blx	r3
    adcInit();
 22e:	4b26      	ldr	r3, [pc, #152]	; (2c8 <init+0xa8>)
 230:	4798      	blx	r3
    dmaInit();
 232:	4b26      	ldr	r3, [pc, #152]	; (2cc <init+0xac>)
 234:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
 236:	4a26      	ldr	r2, [pc, #152]	; (2d0 <init+0xb0>)
 238:	2340      	movs	r3, #64	; 0x40
 23a:	6013      	str	r3, [r2, #0]
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 23c:	21c1      	movs	r1, #193	; 0xc1
 23e:	0089      	lsls	r1, r1, #2
 240:	5850      	ldr	r0, [r2, r1]
 242:	4b24      	ldr	r3, [pc, #144]	; (2d4 <init+0xb4>)
 244:	4003      	ands	r3, r0
 246:	20c0      	movs	r0, #192	; 0xc0
 248:	0400      	lsls	r0, r0, #16
 24a:	4303      	orrs	r3, r0
 24c:	5053      	str	r3, [r2, r1]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
 24e:	4b22      	ldr	r3, [pc, #136]	; (2d8 <init+0xb8>)
 250:	205b      	movs	r0, #91	; 0x5b
 252:	5c19      	ldrb	r1, [r3, r0]
 254:	2201      	movs	r2, #1
 256:	4391      	bics	r1, r2
 258:	5419      	strb	r1, [r3, r0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
 25a:	2180      	movs	r1, #128	; 0x80
 25c:	0509      	lsls	r1, r1, #20
 25e:	6099      	str	r1, [r3, #8]

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
 260:	2433      	movs	r4, #51	; 0x33
 262:	5d19      	ldrb	r1, [r3, r4]
 264:	384c      	subs	r0, #76	; 0x4c
 266:	4381      	bics	r1, r0
 268:	2001      	movs	r0, #1
 26a:	4301      	orrs	r1, r0
 26c:	5519      	strb	r1, [r3, r4]
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
 26e:	2146      	movs	r1, #70	; 0x46
 270:	5c5c      	ldrb	r4, [r3, r1]
 272:	4320      	orrs	r0, r4
 274:	5458      	strb	r0, [r3, r1]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
 276:	2053      	movs	r0, #83	; 0x53
 278:	5c19      	ldrb	r1, [r3, r0]
 27a:	4391      	bics	r1, r2
 27c:	5419      	strb	r1, [r3, r0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
 27e:	2180      	movs	r1, #128	; 0x80
 280:	0309      	lsls	r1, r1, #12
 282:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
 284:	3802      	subs	r0, #2
 286:	5c19      	ldrb	r1, [r3, r0]
 288:	4391      	bics	r1, r2
 28a:	5419      	strb	r1, [r3, r0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
 28c:	2180      	movs	r1, #128	; 0x80
 28e:	0289      	lsls	r1, r1, #10
 290:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
 292:	2150      	movs	r1, #80	; 0x50
 294:	5c58      	ldrb	r0, [r3, r1]
 296:	4390      	bics	r0, r2
 298:	5458      	strb	r0, [r3, r1]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
 29a:	5c5c      	ldrb	r4, [r3, r1]
 29c:	2002      	movs	r0, #2
 29e:	4320      	orrs	r0, r4
 2a0:	5458      	strb	r0, [r3, r1]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
 2a2:	2180      	movs	r1, #128	; 0x80
 2a4:	0249      	lsls	r1, r1, #9
 2a6:	6059      	str	r1, [r3, #4]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
 2a8:	2054      	movs	r0, #84	; 0x54
 2aa:	5c19      	ldrb	r1, [r3, r0]
 2ac:	4391      	bics	r1, r2
 2ae:	5419      	strb	r1, [r3, r0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
 2b0:	2280      	movs	r2, #128	; 0x80
 2b2:	0352      	lsls	r2, r2, #13
 2b4:	609a      	str	r2, [r3, #8]




inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
 2b6:	619a      	str	r2, [r3, #24]
    pinOut(cs_mem);
    pinHigh(cs_mem);



}
 2b8:	bd10      	pop	{r4, pc}
 2ba:	46c0      	nop			; (mov r8, r8)
 2bc:	00000211 	.word	0x00000211
 2c0:	00000479 	.word	0x00000479
 2c4:	00000549 	.word	0x00000549
 2c8:	00000415 	.word	0x00000415
 2cc:	00000595 	.word	0x00000595
 2d0:	e000e100 	.word	0xe000e100
 2d4:	ff00ffff 	.word	0xff00ffff
 2d8:	41004400 	.word	0x41004400

000002dc <main>:


int main(void) {
 2dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 2de:	4647      	mov	r7, r8
 2e0:	b480      	push	{r7}
 2e2:	b086      	sub	sp, #24
    /* Initialize the SAM system */
    init();
 2e4:	4b41      	ldr	r3, [pc, #260]	; (3ec <main+0x110>)
 2e6:	4798      	blx	r3



    sercomClockEnable(1, 3, 12);
 2e8:	220c      	movs	r2, #12
 2ea:	2103      	movs	r1, #3
 2ec:	2001      	movs	r0, #1
 2ee:	4b40      	ldr	r3, [pc, #256]	; (3f0 <main+0x114>)
 2f0:	4798      	blx	r3
    sercomSpiMasterInit(1, 0, 2, 0, 0, 0x01);
 2f2:	2301      	movs	r3, #1
 2f4:	9301      	str	r3, [sp, #4]
 2f6:	2500      	movs	r5, #0
 2f8:	9500      	str	r5, [sp, #0]
 2fa:	2300      	movs	r3, #0
 2fc:	2202      	movs	r2, #2
 2fe:	2100      	movs	r1, #0
 300:	2001      	movs	r0, #1
 302:	4c3c      	ldr	r4, [pc, #240]	; (3f4 <main+0x118>)
 304:	47a0      	blx	r4

    dmaSercomConfigureTx(DMA_SERCOM1_TX, 1);
 306:	2101      	movs	r1, #1
 308:	2001      	movs	r0, #1
 30a:	4b3b      	ldr	r3, [pc, #236]	; (3f8 <main+0x11c>)
 30c:	4798      	blx	r3
    dmaSercomConfigureRx(DMA_SERCOM1_RX, 1);
 30e:	2101      	movs	r1, #1
 310:	2002      	movs	r0, #2
 312:	4b3a      	ldr	r3, [pc, #232]	; (3fc <main+0x120>)
 314:	4798      	blx	r3
    dmaEnableInterrupt(DMA_SERCOM1_RX);
 316:	2002      	movs	r0, #2
 318:	4b39      	ldr	r3, [pc, #228]	; (400 <main+0x124>)
 31a:	4798      	blx	r3

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
 31c:	4c39      	ldr	r4, [pc, #228]	; (404 <main+0x128>)
 31e:	2038      	movs	r0, #56	; 0x38
 320:	5c23      	ldrb	r3, [r4, r0]
 322:	220f      	movs	r2, #15
 324:	4393      	bics	r3, r2
 326:	001a      	movs	r2, r3
 328:	2302      	movs	r3, #2
 32a:	4313      	orrs	r3, r2
 32c:	5423      	strb	r3, [r4, r0]
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
 32e:	2150      	movs	r1, #80	; 0x50
 330:	5c62      	ldrb	r2, [r4, r1]
 332:	2301      	movs	r3, #1
 334:	431a      	orrs	r2, r3
 336:	5462      	strb	r2, [r4, r1]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
 338:	5c22      	ldrb	r2, [r4, r0]
 33a:	260f      	movs	r6, #15
 33c:	4032      	ands	r2, r6
 33e:	2120      	movs	r1, #32
 340:	430a      	orrs	r2, r1
 342:	5422      	strb	r2, [r4, r0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
 344:	2251      	movs	r2, #81	; 0x51
 346:	5ca0      	ldrb	r0, [r4, r2]
 348:	4318      	orrs	r0, r3
 34a:	54a0      	strb	r0, [r4, r2]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
 34c:	2039      	movs	r0, #57	; 0x39
 34e:	5c22      	ldrb	r2, [r4, r0]
 350:	4032      	ands	r2, r6
 352:	4311      	orrs	r1, r2
 354:	5421      	strb	r1, [r4, r0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
 356:	2253      	movs	r2, #83	; 0x53
 358:	5ca1      	ldrb	r1, [r4, r2]
 35a:	430b      	orrs	r3, r1
 35c:	54a3      	strb	r3, [r4, r2]
    pinMux(spi1MISO);
    pinMux(spi1SCK);
    pinMux(spi1MOSI);


    volatile float batV = 0;
 35e:	2300      	movs	r3, #0
 360:	9305      	str	r3, [sp, #20]
    uint8_t rData2;
    uint8_t rData3;



    uint8_t sData = 0x9F;
 362:	ab04      	add	r3, sp, #16
 364:	4698      	mov	r8, r3
 366:	239f      	movs	r3, #159	; 0x9f
 368:	4642      	mov	r2, r8
 36a:	7013      	strb	r3, [r2, #0]


    volatile long counter = 0;
 36c:	9503      	str	r5, [sp, #12]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
 36e:	2780      	movs	r7, #128	; 0x80
 370:	037f      	lsls	r7, r7, #13
 372:	6167      	str	r7, [r4, #20]
    pinLow(cs_mem);

    u32_t txoffset = 0;
    u32_t sizeTX = 8;

    dmaSercomStartRx(DMA_SERCOM1_RX,1,NULL,sizeTX);
 374:	3b97      	subs	r3, #151	; 0x97
 376:	2200      	movs	r2, #0
 378:	2101      	movs	r1, #1
 37a:	3837      	subs	r0, #55	; 0x37
 37c:	4e22      	ldr	r6, [pc, #136]	; (408 <main+0x12c>)
 37e:	47b0      	blx	r6
    dmaSercomStartTx(DMA_SERCOM1_TX,1,&sData,sizeTX);
 380:	2308      	movs	r3, #8
 382:	4642      	mov	r2, r8
 384:	2101      	movs	r1, #1
 386:	2001      	movs	r0, #1
 388:	4d20      	ldr	r5, [pc, #128]	; (40c <main+0x130>)
 38a:	47a8      	blx	r5


    int32_t rxOffset = 0;
    u32_t sizeRX = 8;

    dmaSercomStartRx(DMA_SERCOM1_RX,1,&rData,sizeRX);
 38c:	2308      	movs	r3, #8
 38e:	2213      	movs	r2, #19
 390:	446a      	add	r2, sp
 392:	2101      	movs	r1, #1
 394:	2002      	movs	r0, #2
 396:	47b0      	blx	r6
    dmaSercomStartTx(DMA_SERCOM1_TX,1,NULL,sizeRX);
 398:	2308      	movs	r3, #8
 39a:	2200      	movs	r2, #0
 39c:	2101      	movs	r1, #1
 39e:	2001      	movs	r0, #1
 3a0:	47a8      	blx	r5

    dmaSercomStartRx(DMA_SERCOM1_RX,1,&rData2,sizeRX);
 3a2:	2308      	movs	r3, #8
 3a4:	2212      	movs	r2, #18
 3a6:	446a      	add	r2, sp
 3a8:	2101      	movs	r1, #1
 3aa:	2002      	movs	r0, #2
 3ac:	47b0      	blx	r6
    dmaSercomStartTx(DMA_SERCOM1_TX,1,NULL,sizeRX);
 3ae:	2308      	movs	r3, #8
 3b0:	2200      	movs	r2, #0
 3b2:	2101      	movs	r1, #1
 3b4:	2001      	movs	r0, #1
 3b6:	47a8      	blx	r5

    dmaSercomStartRx(DMA_SERCOM1_RX,1,&rData3,sizeRX);
 3b8:	2308      	movs	r3, #8
 3ba:	2211      	movs	r2, #17
 3bc:	446a      	add	r2, sp
 3be:	2101      	movs	r1, #1
 3c0:	2002      	movs	r0, #2
 3c2:	47b0      	blx	r6
    dmaSercomStartTx(DMA_SERCOM1_TX,1,NULL,sizeRX);
 3c4:	2308      	movs	r3, #8
 3c6:	2200      	movs	r2, #0
 3c8:	2101      	movs	r1, #1
 3ca:	2001      	movs	r0, #1
 3cc:	47a8      	blx	r5




inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
 3ce:	61a7      	str	r7, [r4, #24]
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
}


inline static void pinToggle(Pin p) {
    PORT->Group[p.group].OUTTGL.reg = (1<<p.pin);
 3d0:	0027      	movs	r7, r4
 3d2:	2680      	movs	r6, #128	; 0x80
 3d4:	0536      	lsls	r6, r6, #20

    while (1) {
        counter++;
        pinToggle(LedPin);
        //	batV = (0.0020676 * adc_read(senseBat));
        delay_ms(1000);
 3d6:	25fa      	movs	r5, #250	; 0xfa
 3d8:	00ad      	lsls	r5, r5, #2
 3da:	4c0d      	ldr	r4, [pc, #52]	; (410 <main+0x134>)
    pinHigh(cs_mem);



    while (1) {
        counter++;
 3dc:	9b03      	ldr	r3, [sp, #12]
 3de:	3301      	adds	r3, #1
 3e0:	9303      	str	r3, [sp, #12]
 3e2:	61fe      	str	r6, [r7, #28]
        pinToggle(LedPin);
        //	batV = (0.0020676 * adc_read(senseBat));
        delay_ms(1000);
 3e4:	0028      	movs	r0, r5
 3e6:	47a0      	blx	r4
 3e8:	e7f8      	b.n	3dc <main+0x100>
 3ea:	46c0      	nop			; (mov r8, r8)
 3ec:	00000221 	.word	0x00000221
 3f0:	00000771 	.word	0x00000771
 3f4:	000007d9 	.word	0x000007d9
 3f8:	000006a5 	.word	0x000006a5
 3fc:	000006c9 	.word	0x000006c9
 400:	00000625 	.word	0x00000625
 404:	41004400 	.word	0x41004400
 408:	00000731 	.word	0x00000731
 40c:	000006f1 	.word	0x000006f1
 410:	00000569 	.word	0x00000569

00000414 <adcInit>:


#include <util.h>

void adcInit() {
 414:	b510      	push	{r4, lr}

    // set up clock
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;
 416:	4a12      	ldr	r2, [pc, #72]	; (460 <adcInit+0x4c>)
 418:	6a13      	ldr	r3, [r2, #32]
 41a:	2180      	movs	r1, #128	; 0x80
 41c:	0249      	lsls	r1, r1, #9
 41e:	430b      	orrs	r3, r1
 420:	6213      	str	r3, [r2, #32]

    // divide prescaler by 512 (93.75KHz), max adc freq is 2.1MHz
    ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |
 422:	4910      	ldr	r1, [pc, #64]	; (464 <adcInit+0x50>)
 424:	22e0      	movs	r2, #224	; 0xe0
 426:	00d2      	lsls	r2, r2, #3
 428:	808a      	strh	r2, [r1, #4]
                     ADC_CTRLB_RESSEL_12BIT;

    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
 42a:	480f      	ldr	r0, [pc, #60]	; (468 <adcInit+0x54>)
 42c:	4b0f      	ldr	r3, [pc, #60]	; (46c <adcInit+0x58>)
 42e:	8058      	strh	r0, [r3, #2]
                        GCLK_CLKCTRL_GEN(0) |
                        GCLK_CLKCTRL_ID(ADC_GCLK_ID);

    ADC->CALIB.reg =
        ADC_CALIB_BIAS_CAL(
 430:	4b0f      	ldr	r3, [pc, #60]	; (470 <adcInit+0x5c>)
    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(0) |
                        GCLK_CLKCTRL_ID(ADC_GCLK_ID);

    ADC->CALIB.reg =
 432:	681b      	ldr	r3, [r3, #0]
 434:	015b      	lsls	r3, r3, #5
 436:	4013      	ands	r3, r2
 438:	0018      	movs	r0, r3
        ADC_CALIB_BIAS_CAL(
            (*(uint32_t *)ADC_FUSES_BIASCAL_ADDR >> ADC_FUSES_BIASCAL_Pos)
        ) |
        ADC_CALIB_LINEARITY_CAL(
 43a:	4b0e      	ldr	r3, [pc, #56]	; (474 <adcInit+0x60>)
    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(0) |
                        GCLK_CLKCTRL_ID(ADC_GCLK_ID);

    ADC->CALIB.reg =
 43c:	685a      	ldr	r2, [r3, #4]
 43e:	0154      	lsls	r4, r2, #5
 440:	681a      	ldr	r2, [r3, #0]
 442:	0ed3      	lsrs	r3, r2, #27
 444:	4323      	orrs	r3, r4
 446:	22ff      	movs	r2, #255	; 0xff
 448:	4013      	ands	r3, r2
 44a:	4303      	orrs	r3, r0
 44c:	850b      	strh	r3, [r1, #40]	; 0x28
        ) |
        ADC_CALIB_LINEARITY_CAL(
            (*(uint64_t *)ADC_FUSES_LINEARITY_0_ADDR >> ADC_FUSES_LINEARITY_0_Pos)
        );

    ADC->REFCTRL.reg = ADC_REFCTRL_REFSEL_INTVCC1;
 44e:	2302      	movs	r3, #2
 450:	704b      	strb	r3, [r1, #1]

    ADC->CTRLA.reg = ADC_CTRLA_ENABLE; // enable
 452:	700b      	strb	r3, [r1, #0]
    while(ADC->STATUS.reg & ADC_STATUS_SYNCBUSY);
 454:	000a      	movs	r2, r1
 456:	7e53      	ldrb	r3, [r2, #25]
 458:	b25b      	sxtb	r3, r3
 45a:	2b00      	cmp	r3, #0
 45c:	dbfb      	blt.n	456 <adcInit+0x42>
}
 45e:	bd10      	pop	{r4, pc}
 460:	40000400 	.word	0x40000400
 464:	42004000 	.word	0x42004000
 468:	0000401e 	.word	0x0000401e
 46c:	40000c00 	.word	0x40000c00
 470:	00806024 	.word	0x00806024
 474:	00806020 	.word	0x00806020

00000478 <GclkInit>:


static uint32_t cycles_per_ms = 48000000UL / 1000;
static uint32_t cycles_per_us = 48000000UL / 1000000;

void GclkInit() {
 478:	b510      	push	{r4, lr}


    SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
 47a:	4a1c      	ldr	r2, [pc, #112]	; (4ec <GclkInit+0x74>)
 47c:	23c2      	movs	r3, #194	; 0xc2
 47e:	00db      	lsls	r3, r3, #3
 480:	6093      	str	r3, [r2, #8]
                           SYSCTRL_INTFLAG_DFLLRDY;
    NVMCTRL->CTRLB.reg |= NVMCTRL_CTRLB_RWS_HALF;
 482:	491b      	ldr	r1, [pc, #108]	; (4f0 <GclkInit+0x78>)
 484:	6848      	ldr	r0, [r1, #4]
 486:	2302      	movs	r3, #2
 488:	4303      	orrs	r3, r0
 48a:	604b      	str	r3, [r1, #4]


// start and enable external 32k crystal
    SYSCTRL->XOSC32K.reg = SYSCTRL_XOSC32K_ENABLE |
 48c:	4b19      	ldr	r3, [pc, #100]	; (4f4 <GclkInit+0x7c>)
 48e:	8293      	strh	r3, [r2, #20]
                           SYSCTRL_XOSC32K_XTALEN |
                           SYSCTRL_XOSC32K_EN32K |
                           ( 6 << SYSCTRL_XOSC32K_STARTUP_Pos);

    //wait for crystal to warm up
    while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_XOSC32KRDY)) == 0);
 490:	0011      	movs	r1, r2
 492:	2202      	movs	r2, #2
 494:	68cb      	ldr	r3, [r1, #12]
 496:	421a      	tst	r2, r3
 498:	d0fc      	beq.n	494 <GclkInit+0x1c>

#define NVM_DFLL_COARSE_POS    58
#define NVM_DFLL_COARSE_SIZE   6
#define NVM_DFLL_FINE_POS      64
#define NVM_DFLL_FINE_SIZE     10
    uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
 49a:	4b17      	ldr	r3, [pc, #92]	; (4f8 <GclkInit+0x80>)
 49c:	681c      	ldr	r4, [r3, #0]
 49e:	0ea4      	lsrs	r4, r4, #26
                         + (NVM_DFLL_COARSE_POS / 32))
                       >> (NVM_DFLL_COARSE_POS % 32))
                     & ((1 << NVM_DFLL_COARSE_SIZE) - 1);
    if (coarse == 0x3f) {
 4a0:	2c3f      	cmp	r4, #63	; 0x3f
 4a2:	d100      	bne.n	4a6 <GclkInit+0x2e>
        coarse = 0x1f;
 4a4:	3c20      	subs	r4, #32
    }
    uint32_t fine =( *((uint32_t *)(NVMCTRL_OTP4)
                       + (NVM_DFLL_FINE_POS / 32))
                     >> (NVM_DFLL_FINE_POS % 32))
 4a6:	4b15      	ldr	r3, [pc, #84]	; (4fc <GclkInit+0x84>)
                       >> (NVM_DFLL_COARSE_POS % 32))
                     & ((1 << NVM_DFLL_COARSE_SIZE) - 1);
    if (coarse == 0x3f) {
        coarse = 0x1f;
    }
    uint32_t fine =( *((uint32_t *)(NVMCTRL_OTP4)
 4a8:	6818      	ldr	r0, [r3, #0]
 4aa:	0580      	lsls	r0, r0, #22
 4ac:	0d80      	lsrs	r0, r0, #22
                       + (NVM_DFLL_FINE_POS / 32))
                     >> (NVM_DFLL_FINE_POS % 32))
                   & ((1 << NVM_DFLL_FINE_SIZE) - 1);
    if (fine == 0x3ff) {
 4ae:	4b14      	ldr	r3, [pc, #80]	; (500 <GclkInit+0x88>)
 4b0:	4298      	cmp	r0, r3
 4b2:	d100      	bne.n	4b6 <GclkInit+0x3e>
        fine = 0x1ff;
 4b4:	4813      	ldr	r0, [pc, #76]	; (504 <GclkInit+0x8c>)
    }


    // Disable ONDEMAND mode while writing configurations (errata 9905)
    SYSCTRL->DFLLCTRL.reg = dfll_ctrl_usb & ~SYSCTRL_DFLLCTRL_ONDEMAND;
 4b6:	4a14      	ldr	r2, [pc, #80]	; (508 <GclkInit+0x90>)
 4b8:	4b0c      	ldr	r3, [pc, #48]	; (4ec <GclkInit+0x74>)
 4ba:	849a      	strh	r2, [r3, #36]	; 0x24
    while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_DFLLRDY)) == 0);
 4bc:	0019      	movs	r1, r3
 4be:	2210      	movs	r2, #16
 4c0:	68cb      	ldr	r3, [r1, #12]
 4c2:	421a      	tst	r2, r3
 4c4:	d0fc      	beq.n	4c0 <GclkInit+0x48>
    SYSCTRL->DFLLVAL.reg = SYSCTRL_DFLLVAL_COARSE(coarse) | SYSCTRL_DFLLVAL_FINE(fine);
 4c6:	02a4      	lsls	r4, r4, #10
 4c8:	4320      	orrs	r0, r4
 4ca:	4b08      	ldr	r3, [pc, #32]	; (4ec <GclkInit+0x74>)
 4cc:	6298      	str	r0, [r3, #40]	; 0x28


    //Wait and see if the DFLL output is good . . .
    while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_DFLLRDY)) == 0);
 4ce:	0019      	movs	r1, r3
 4d0:	2210      	movs	r2, #16
 4d2:	68cb      	ldr	r3, [r1, #12]
 4d4:	421a      	tst	r2, r3
 4d6:	d0fc      	beq.n	4d2 <GclkInit+0x5a>


    SYSCTRL->DFLLCTRL.reg = dfll_ctrl_usb;
 4d8:	4a0c      	ldr	r2, [pc, #48]	; (50c <GclkInit+0x94>)
 4da:	4b04      	ldr	r3, [pc, #16]	; (4ec <GclkInit+0x74>)
 4dc:	849a      	strh	r2, [r3, #36]	; 0x24


    //For generic clock generator 0, select the DFLL48 Clock as input
    GCLK->GENDIV.reg  = (GCLK_GENDIV_DIV(1)  | GCLK_GENDIV_ID(0));
 4de:	4b0c      	ldr	r3, [pc, #48]	; (510 <GclkInit+0x98>)
 4e0:	2280      	movs	r2, #128	; 0x80
 4e2:	0052      	lsls	r2, r2, #1
 4e4:	609a      	str	r2, [r3, #8]
    GCLK->GENCTRL.reg = (GCLK_GENCTRL_ID(0)  | (GCLK_GENCTRL_SRC_DFLL48M) | (GCLK_GENCTRL_GENEN));
 4e6:	4a0b      	ldr	r2, [pc, #44]	; (514 <GclkInit+0x9c>)
 4e8:	605a      	str	r2, [r3, #4]
}
 4ea:	bd10      	pop	{r4, pc}
 4ec:	40000800 	.word	0x40000800
 4f0:	41004000 	.word	0x41004000
 4f4:	0000060e 	.word	0x0000060e
 4f8:	00806024 	.word	0x00806024
 4fc:	00806028 	.word	0x00806028
 500:	000003ff 	.word	0x000003ff
 504:	000001ff 	.word	0x000001ff
 508:	00000522 	.word	0x00000522
 50c:	000005a2 	.word	0x000005a2
 510:	40000c00 	.word	0x40000c00
 514:	00010700 	.word	0x00010700

00000518 <gclkEnable>:

void gclkEnable(u32_t id, u32_t src, u32_t div) {
 518:	b510      	push	{r4, lr}
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
 51a:	230f      	movs	r3, #15
 51c:	4018      	ands	r0, r3
 51e:	0212      	lsls	r2, r2, #8
 520:	4b07      	ldr	r3, [pc, #28]	; (540 <gclkEnable+0x28>)
 522:	401a      	ands	r2, r3
 524:	4302      	orrs	r2, r0
 526:	4c07      	ldr	r4, [pc, #28]	; (544 <gclkEnable+0x2c>)
 528:	60a2      	str	r2, [r4, #8]
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
 52a:	0209      	lsls	r1, r1, #8
 52c:	23f8      	movs	r3, #248	; 0xf8
 52e:	015b      	lsls	r3, r3, #5
 530:	4019      	ands	r1, r3
 532:	2380      	movs	r3, #128	; 0x80
 534:	025b      	lsls	r3, r3, #9
 536:	4319      	orrs	r1, r3
 538:	4308      	orrs	r0, r1
 53a:	6060      	str	r0, [r4, #4]
}
 53c:	bd10      	pop	{r4, pc}
 53e:	46c0      	nop			; (mov r8, r8)
 540:	00ffff00 	.word	0x00ffff00
 544:	40000c00 	.word	0x40000c00

00000548 <delayInit>:


void delayInit(void) {
    cycles_per_ms = 48000000UL;
    cycles_per_ms /= 1000;
 548:	4b04      	ldr	r3, [pc, #16]	; (55c <delayInit+0x14>)
 54a:	4a05      	ldr	r2, [pc, #20]	; (560 <delayInit+0x18>)
 54c:	601a      	str	r2, [r3, #0]
    cycles_per_us = cycles_per_ms / 1000;
 54e:	2230      	movs	r2, #48	; 0x30
 550:	605a      	str	r2, [r3, #4]

    SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
 552:	3a2b      	subs	r2, #43	; 0x2b
 554:	4b03      	ldr	r3, [pc, #12]	; (564 <delayInit+0x1c>)
 556:	601a      	str	r2, [r3, #0]
}
 558:	4770      	bx	lr
 55a:	46c0      	nop			; (mov r8, r8)
 55c:	20000004 	.word	0x20000004
 560:	0000bb80 	.word	0x0000bb80
 564:	e000e010 	.word	0xe000e010

00000568 <delay_ms>:
/**
 * \brief Delay loop to delay at least n number of milliseconds
 *
 * \param n  Number of milliseconds to wait
 */
void delay_ms(uint32_t n) {
 568:	b530      	push	{r4, r5, lr}
    while (n--) {
        /* Devide up to blocks of 1ms */
        delay_cycles(cycles_per_ms);
 56a:	4b08      	ldr	r3, [pc, #32]	; (58c <delay_ms+0x24>)
 56c:	681c      	ldr	r4, [r3, #0]


static inline void delay_cycles(
const uint32_t n) {
	if (n > 0) {
		SysTick->LOAD = n;
 56e:	4a08      	ldr	r2, [pc, #32]	; (590 <delay_ms+0x28>)
		SysTick->VAL = 0;
 570:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
 572:	2180      	movs	r1, #128	; 0x80
 574:	0249      	lsls	r1, r1, #9
 * \brief Delay loop to delay at least n number of milliseconds
 *
 * \param n  Number of milliseconds to wait
 */
void delay_ms(uint32_t n) {
    while (n--) {
 576:	e006      	b.n	586 <delay_ms+0x1e>



static inline void delay_cycles(
const uint32_t n) {
	if (n > 0) {
 578:	2c00      	cmp	r4, #0
 57a:	d004      	beq.n	586 <delay_ms+0x1e>
		SysTick->LOAD = n;
 57c:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
 57e:	6095      	str	r5, [r2, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
 580:	6813      	ldr	r3, [r2, #0]
 582:	420b      	tst	r3, r1
 584:	d0fc      	beq.n	580 <delay_ms+0x18>
 586:	3801      	subs	r0, #1
 588:	d2f6      	bcs.n	578 <delay_ms+0x10>
        /* Devide up to blocks of 1ms */
        delay_cycles(cycles_per_ms);
    }
 58a:	bd30      	pop	{r4, r5, pc}
 58c:	20000004 	.word	0x20000004
 590:	e000e010 	.word	0xe000e010

00000594 <dmaInit>:
#include <util.h>

DMA_DESC_ALIGN DmacDescriptor dma_descriptors[12];
DMA_DESC_ALIGN DmacDescriptor dma_descriptors_wb[12];

void dmaInit() {
 594:	b570      	push	{r4, r5, r6, lr}
	memset(&dma_descriptors, 0, sizeof(dma_descriptors));
 596:	4d11      	ldr	r5, [pc, #68]	; (5dc <dmaInit+0x48>)
 598:	22c0      	movs	r2, #192	; 0xc0
 59a:	2100      	movs	r1, #0
 59c:	0028      	movs	r0, r5
 59e:	4e10      	ldr	r6, [pc, #64]	; (5e0 <dmaInit+0x4c>)
 5a0:	47b0      	blx	r6
	memset(&dma_descriptors_wb, 0, sizeof(dma_descriptors_wb));
 5a2:	4c10      	ldr	r4, [pc, #64]	; (5e4 <dmaInit+0x50>)
 5a4:	22c0      	movs	r2, #192	; 0xc0
 5a6:	2100      	movs	r1, #0
 5a8:	0020      	movs	r0, r4
 5aa:	47b0      	blx	r6

	PM->AHBMASK.reg |= PM_AHBMASK_DMAC;
 5ac:	4b0e      	ldr	r3, [pc, #56]	; (5e8 <dmaInit+0x54>)
 5ae:	6959      	ldr	r1, [r3, #20]
 5b0:	2220      	movs	r2, #32
 5b2:	430a      	orrs	r2, r1
 5b4:	615a      	str	r2, [r3, #20]
	PM->APBBMASK.reg |= PM_APBBMASK_DMAC;
 5b6:	69d9      	ldr	r1, [r3, #28]
 5b8:	2210      	movs	r2, #16
 5ba:	430a      	orrs	r2, r1
 5bc:	61da      	str	r2, [r3, #28]

	DMAC->CTRL.bit.DMAENABLE = 0;
 5be:	4b0b      	ldr	r3, [pc, #44]	; (5ec <dmaInit+0x58>)
 5c0:	881a      	ldrh	r2, [r3, #0]
 5c2:	2102      	movs	r1, #2
 5c4:	438a      	bics	r2, r1
 5c6:	801a      	strh	r2, [r3, #0]
	DMAC->CTRL.bit.SWRST = 1;
 5c8:	8819      	ldrh	r1, [r3, #0]
 5ca:	2201      	movs	r2, #1
 5cc:	430a      	orrs	r2, r1
 5ce:	801a      	strh	r2, [r3, #0]

	DMAC->BASEADDR.reg = (unsigned) &dma_descriptors;
 5d0:	635d      	str	r5, [r3, #52]	; 0x34
	DMAC->WRBADDR.reg = (unsigned) &dma_descriptors_wb;
 5d2:	639c      	str	r4, [r3, #56]	; 0x38

	DMAC->CTRL.reg = DMAC_CTRL_DMAENABLE | DMAC_CTRL_LVLEN(0xf);
 5d4:	4a06      	ldr	r2, [pc, #24]	; (5f0 <dmaInit+0x5c>)
 5d6:	801a      	strh	r2, [r3, #0]
}
 5d8:	bd70      	pop	{r4, r5, r6, pc}
 5da:	46c0      	nop			; (mov r8, r8)
 5dc:	20000520 	.word	0x20000520
 5e0:	000008ad 	.word	0x000008ad
 5e4:	20000460 	.word	0x20000460
 5e8:	40000400 	.word	0x40000400
 5ec:	41004800 	.word	0x41004800
 5f0:	00000f02 	.word	0x00000f02

000005f4 <dmaAbort>:
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 5f4:	b672      	cpsid	i

void dmaAbort(DmaChan chan) {
	__disable_irq();
	DMAC->CHID.reg = chan;
 5f6:	4b04      	ldr	r3, [pc, #16]	; (608 <dmaAbort+0x14>)
 5f8:	223f      	movs	r2, #63	; 0x3f
 5fa:	5498      	strb	r0, [r3, r2]
	DMAC->CHCTRLA.reg = 0;
 5fc:	2100      	movs	r1, #0
 5fe:	3201      	adds	r2, #1
 600:	5499      	strb	r1, [r3, r2]
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 602:	b662      	cpsie	i
	__enable_irq();
}
 604:	4770      	bx	lr
 606:	46c0      	nop			; (mov r8, r8)
 608:	41004800 	.word	0x41004800

0000060c <dmaStart>:
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 60c:	b672      	cpsid	i

void dmaStart(DmaChan chan) {
	__disable_irq();
	DMAC->CHID.reg = chan;
 60e:	4b04      	ldr	r3, [pc, #16]	; (620 <dmaStart+0x14>)
 610:	223f      	movs	r2, #63	; 0x3f
 612:	5498      	strb	r0, [r3, r2]
	DMAC->CHCTRLA.reg = DMAC_CHCTRLA_ENABLE;
 614:	2102      	movs	r1, #2
 616:	3201      	adds	r2, #1
 618:	5499      	strb	r1, [r3, r2]
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 61a:	b662      	cpsie	i
	__enable_irq();
}
 61c:	4770      	bx	lr
 61e:	46c0      	nop			; (mov r8, r8)
 620:	41004800 	.word	0x41004800

00000624 <dmaEnableInterrupt>:
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 624:	b672      	cpsid	i

void dmaEnableInterrupt(DmaChan chan) {
	__disable_irq();
	DMAC->CHID.reg = chan;
 626:	4b04      	ldr	r3, [pc, #16]	; (638 <dmaEnableInterrupt+0x14>)
 628:	223f      	movs	r2, #63	; 0x3f
 62a:	5498      	strb	r0, [r3, r2]
	DMAC->CHINTENSET.reg = DMAC_CHINTENSET_TCMPL | DMAC_CHINTENSET_TERR;
 62c:	2103      	movs	r1, #3
 62e:	320e      	adds	r2, #14
 630:	5499      	strb	r1, [r3, r2]
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 632:	b662      	cpsie	i
	__enable_irq();
}
 634:	4770      	bx	lr
 636:	46c0      	nop			; (mov r8, r8)
 638:	41004800 	.word	0x41004800

0000063c <dmaFillSercomTx>:
u32_t dmaRemaining(DmaChan chan) {
	return dma_descriptors_wb[chan].BTCNT.reg;
}

const u8_t dummy_tx = 0x99;
void dmaFillSercomTx(DmacDescriptor* desc, SercomId id, u8_t *src, unsigned size) {
 63c:	b510      	push	{r4, lr}
	// doesn't matter if this is SPI.DATA or USART.DATA. both are in the same address
	desc->DSTADDR.reg = (unsigned) &sercom(id)->SPI.DATA;
 63e:	0289      	lsls	r1, r1, #10
 640:	4c08      	ldr	r4, [pc, #32]	; (664 <dmaFillSercomTx+0x28>)
 642:	46a4      	mov	ip, r4
 644:	4461      	add	r1, ip
 646:	6081      	str	r1, [r0, #8]
	desc->BTCNT.reg = size;
 648:	b299      	uxth	r1, r3
 64a:	8041      	strh	r1, [r0, #2]
	if (src != NULL) {
 64c:	2a00      	cmp	r2, #0
 64e:	d004      	beq.n	65a <dmaFillSercomTx+0x1e>
		desc->SRCADDR.reg = (unsigned) src + size;
 650:	18d3      	adds	r3, r2, r3
 652:	6043      	str	r3, [r0, #4]
		desc->BTCTRL.reg = DMAC_BTCTRL_VALID | DMAC_BTCTRL_SRCINC;
 654:	4b04      	ldr	r3, [pc, #16]	; (668 <dmaFillSercomTx+0x2c>)
 656:	8003      	strh	r3, [r0, #0]
 658:	e003      	b.n	662 <dmaFillSercomTx+0x26>
		} else {
		desc->SRCADDR.reg = (unsigned) &dummy_tx;
 65a:	4b04      	ldr	r3, [pc, #16]	; (66c <dmaFillSercomTx+0x30>)
 65c:	6043      	str	r3, [r0, #4]
		desc->BTCTRL.reg = DMAC_BTCTRL_VALID;
 65e:	2301      	movs	r3, #1
 660:	8003      	strh	r3, [r0, #0]
	}
}
 662:	bd10      	pop	{r4, pc}
 664:	42000828 	.word	0x42000828
 668:	00000401 	.word	0x00000401
 66c:	00000a68 	.word	0x00000a68

00000670 <dmaFillSercomRx>:


u8_t dummy_rx = 0;
void dmaFillSercomRx(DmacDescriptor* desc, SercomId id, u8_t *dst, unsigned size) {
 670:	b510      	push	{r4, lr}
	// doesn't matter if this is SPI.DATA or USART.DATA. both are in the same address
	desc->SRCADDR.reg = (unsigned) &sercom(id)->SPI.DATA;
 672:	0289      	lsls	r1, r1, #10
 674:	4c08      	ldr	r4, [pc, #32]	; (698 <dmaFillSercomRx+0x28>)
 676:	46a4      	mov	ip, r4
 678:	4461      	add	r1, ip
 67a:	6041      	str	r1, [r0, #4]
	desc->BTCNT.reg = size;
 67c:	b299      	uxth	r1, r3
 67e:	8041      	strh	r1, [r0, #2]
	if (dst != NULL) {
 680:	2a00      	cmp	r2, #0
 682:	d004      	beq.n	68e <dmaFillSercomRx+0x1e>
		desc->DSTADDR.reg = (unsigned) dst + size;
 684:	18d3      	adds	r3, r2, r3
 686:	6083      	str	r3, [r0, #8]
		desc->BTCTRL.reg = DMAC_BTCTRL_VALID | DMAC_BTCTRL_DSTINC | DMAC_BTCTRL_EVOSEL_BEAT;
 688:	4b04      	ldr	r3, [pc, #16]	; (69c <dmaFillSercomRx+0x2c>)
 68a:	8003      	strh	r3, [r0, #0]
 68c:	e003      	b.n	696 <dmaFillSercomRx+0x26>
		} else {
		desc->DSTADDR.reg = (unsigned) &dummy_rx;
 68e:	4b04      	ldr	r3, [pc, #16]	; (6a0 <dmaFillSercomRx+0x30>)
 690:	6083      	str	r3, [r0, #8]
		desc->BTCTRL.reg = DMAC_BTCTRL_VALID;
 692:	2301      	movs	r3, #1
 694:	8003      	strh	r3, [r0, #0]
	}
}
 696:	bd10      	pop	{r4, pc}
 698:	42000828 	.word	0x42000828
 69c:	00000807 	.word	0x00000807
 6a0:	2000045c 	.word	0x2000045c

000006a4 <dmaSercomConfigureTx>:

void dmaSercomConfigureTx(DmaChan chan, SercomId id) {
	DMAC->CHID.reg = chan;
 6a4:	4a07      	ldr	r2, [pc, #28]	; (6c4 <dmaSercomConfigureTx+0x20>)
 6a6:	233f      	movs	r3, #63	; 0x3f
 6a8:	54d0      	strb	r0, [r2, r3]
	DMAC->CHCTRLA.reg = DMAC_CHCTRLA_SWRST;
 6aa:	2001      	movs	r0, #1
 6ac:	3301      	adds	r3, #1
 6ae:	54d0      	strb	r0, [r2, r3]
	DMAC->CHCTRLB.reg = DMAC_CHCTRLB_TRIGACT_BEAT | DMAC_CHCTRLB_TRIGSRC(id*2 + 2);
 6b0:	3101      	adds	r1, #1
 6b2:	0249      	lsls	r1, r1, #9
 6b4:	23fc      	movs	r3, #252	; 0xfc
 6b6:	019b      	lsls	r3, r3, #6
 6b8:	4019      	ands	r1, r3
 6ba:	2380      	movs	r3, #128	; 0x80
 6bc:	041b      	lsls	r3, r3, #16
 6be:	4319      	orrs	r1, r3
 6c0:	6451      	str	r1, [r2, #68]	; 0x44
}
 6c2:	4770      	bx	lr
 6c4:	41004800 	.word	0x41004800

000006c8 <dmaSercomConfigureRx>:

void dmaSercomConfigureRx(DmaChan chan, SercomId id) {
	DMAC->CHID.reg = chan;
 6c8:	4a08      	ldr	r2, [pc, #32]	; (6ec <dmaSercomConfigureRx+0x24>)
 6ca:	233f      	movs	r3, #63	; 0x3f
 6cc:	54d0      	strb	r0, [r2, r3]
	DMAC->CHCTRLA.reg = DMAC_CHCTRLA_SWRST;
 6ce:	2001      	movs	r0, #1
 6d0:	3301      	adds	r3, #1
 6d2:	54d0      	strb	r0, [r2, r3]
	DMAC->CHCTRLB.reg = DMAC_CHCTRLB_TRIGACT_BEAT | DMAC_CHCTRLB_TRIGSRC(id*2 + 1);
 6d4:	0249      	lsls	r1, r1, #9
 6d6:	3101      	adds	r1, #1
 6d8:	31ff      	adds	r1, #255	; 0xff
 6da:	23fc      	movs	r3, #252	; 0xfc
 6dc:	019b      	lsls	r3, r3, #6
 6de:	4019      	ands	r1, r3
 6e0:	2380      	movs	r3, #128	; 0x80
 6e2:	041b      	lsls	r3, r3, #16
 6e4:	4319      	orrs	r1, r3
 6e6:	6451      	str	r1, [r2, #68]	; 0x44
}
 6e8:	4770      	bx	lr
 6ea:	46c0      	nop			; (mov r8, r8)
 6ec:	41004800 	.word	0x41004800

000006f0 <dmaSercomStartTx>:
	dmaAbort(chan);
	memcpy(&dma_descriptors[chan], &chain[0], sizeof(DmacDescriptor));
	dmaStart(chan);
}

void dmaSercomStartTx(DmaChan chan, SercomId id, u8_t* src, unsigned size) {
 6f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 6f2:	b083      	sub	sp, #12
 6f4:	0004      	movs	r4, r0
 6f6:	000d      	movs	r5, r1
 6f8:	9201      	str	r2, [sp, #4]
 6fa:	001f      	movs	r7, r3
	dmaAbort(chan);
 6fc:	4b08      	ldr	r3, [pc, #32]	; (720 <dmaSercomStartTx+0x30>)
 6fe:	4798      	blx	r3
	dmaFillSercomTx(&dma_descriptors[chan], id, src, size);
 700:	0122      	lsls	r2, r4, #4
 702:	4b08      	ldr	r3, [pc, #32]	; (724 <dmaSercomStartTx+0x34>)
 704:	18d6      	adds	r6, r2, r3
 706:	003b      	movs	r3, r7
 708:	9a01      	ldr	r2, [sp, #4]
 70a:	0029      	movs	r1, r5
 70c:	0030      	movs	r0, r6
 70e:	4d06      	ldr	r5, [pc, #24]	; (728 <dmaSercomStartTx+0x38>)
 710:	47a8      	blx	r5
	dma_descriptors[chan].DESCADDR.reg = 0;
 712:	2300      	movs	r3, #0
 714:	60f3      	str	r3, [r6, #12]
	dmaStart(chan);
 716:	0020      	movs	r0, r4
 718:	4b04      	ldr	r3, [pc, #16]	; (72c <dmaSercomStartTx+0x3c>)
 71a:	4798      	blx	r3
}
 71c:	b003      	add	sp, #12
 71e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 720:	000005f5 	.word	0x000005f5
 724:	20000520 	.word	0x20000520
 728:	0000063d 	.word	0x0000063d
 72c:	0000060d 	.word	0x0000060d

00000730 <dmaSercomStartRx>:

void dmaSercomStartRx(DmaChan chan, SercomId id, u8_t* dst, unsigned size) {
 730:	b5f0      	push	{r4, r5, r6, r7, lr}
 732:	b083      	sub	sp, #12
 734:	0004      	movs	r4, r0
 736:	000d      	movs	r5, r1
 738:	9201      	str	r2, [sp, #4]
 73a:	001f      	movs	r7, r3
	dmaAbort(chan);
 73c:	4b08      	ldr	r3, [pc, #32]	; (760 <dmaSercomStartRx+0x30>)
 73e:	4798      	blx	r3
	dmaFillSercomRx(&dma_descriptors[chan], id, dst, size);
 740:	0122      	lsls	r2, r4, #4
 742:	4b08      	ldr	r3, [pc, #32]	; (764 <dmaSercomStartRx+0x34>)
 744:	18d6      	adds	r6, r2, r3
 746:	003b      	movs	r3, r7
 748:	9a01      	ldr	r2, [sp, #4]
 74a:	0029      	movs	r1, r5
 74c:	0030      	movs	r0, r6
 74e:	4d06      	ldr	r5, [pc, #24]	; (768 <dmaSercomStartRx+0x38>)
 750:	47a8      	blx	r5
	dma_descriptors[chan].DESCADDR.reg = 0;
 752:	2300      	movs	r3, #0
 754:	60f3      	str	r3, [r6, #12]
	dmaStart(chan);
 756:	0020      	movs	r0, r4
 758:	4b04      	ldr	r3, [pc, #16]	; (76c <dmaSercomStartRx+0x3c>)
 75a:	4798      	blx	r3
 75c:	b003      	add	sp, #12
 75e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 760:	000005f5 	.word	0x000005f5
 764:	20000520 	.word	0x20000520
 768:	00000671 	.word	0x00000671
 76c:	0000060d 	.word	0x0000060d

00000770 <sercomClockEnable>:
#include <util.h>

void sercomClockEnable(SercomId id, uint32_t clock_channel, u8_t divider) {
 770:	b570      	push	{r4, r5, r6, lr}
 772:	0004      	movs	r4, r0
 774:	000d      	movs	r5, r1
    // prevent this clock write from changing any other clocks
    PM->APBCMASK.reg |= 1 << (PM_APBCMASK_SERCOM0_Pos + id);
 776:	480e      	ldr	r0, [pc, #56]	; (7b0 <sercomClockEnable+0x40>)
 778:	6a01      	ldr	r1, [r0, #32]
 77a:	1ca6      	adds	r6, r4, #2
 77c:	2301      	movs	r3, #1
 77e:	40b3      	lsls	r3, r6
 780:	430b      	orrs	r3, r1
 782:	6203      	str	r3, [r0, #32]


    if (clock_channel != 0) {
 784:	2d00      	cmp	r5, #0
 786:	d003      	beq.n	790 <sercomClockEnable+0x20>
        // clock generators 3-8 have 8 division factor bits - DIV[7:0]
        gclkEnable(clock_channel, GCLK_SOURCE_DFLL48M, divider);
 788:	2107      	movs	r1, #7
 78a:	0028      	movs	r0, r5
 78c:	4b09      	ldr	r3, [pc, #36]	; (7b4 <sercomClockEnable+0x44>)
 78e:	4798      	blx	r3
    }


    // attach clock
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
 790:	0229      	lsls	r1, r5, #8
 792:	23f0      	movs	r3, #240	; 0xf0
 794:	011b      	lsls	r3, r3, #4
 796:	4019      	ands	r1, r3
 798:	2380      	movs	r3, #128	; 0x80
 79a:	01db      	lsls	r3, r3, #7
 79c:	4319      	orrs	r1, r3
 79e:	0023      	movs	r3, r4
 7a0:	3314      	adds	r3, #20
 7a2:	243f      	movs	r4, #63	; 0x3f
 7a4:	401c      	ands	r4, r3
 7a6:	430c      	orrs	r4, r1
 7a8:	4b03      	ldr	r3, [pc, #12]	; (7b8 <sercomClockEnable+0x48>)
 7aa:	805c      	strh	r4, [r3, #2]
                        GCLK_CLKCTRL_GEN(clock_channel) |
                        GCLK_CLKCTRL_ID(SERCOM0_GCLK_ID_CORE + id);
}
 7ac:	bd70      	pop	{r4, r5, r6, pc}
 7ae:	46c0      	nop			; (mov r8, r8)
 7b0:	40000400 	.word	0x40000400
 7b4:	00000519 	.word	0x00000519
 7b8:	40000c00 	.word	0x40000c00

000007bc <sercomReset>:
// my includes
#include <port.h>

//dma.c
inline static Sercom* sercom(SercomId id) {
	return (Sercom*) (0x42000800U + id * 1024);
 7bc:	0280      	lsls	r0, r0, #10
 7be:	4b05      	ldr	r3, [pc, #20]	; (7d4 <sercomReset+0x18>)
 7c0:	469c      	mov	ip, r3
 7c2:	4460      	add	r0, ip


void sercomReset(SercomId id) {
    sercom(id)->SPI.CTRLA.reg = SERCOM_SPI_CTRLA_SWRST;
 7c4:	2301      	movs	r3, #1
 7c6:	6003      	str	r3, [r0, #0]
    while(sercom(id)->SPI.CTRLA.reg & SERCOM_SPI_CTRLA_SWRST);
 7c8:	2201      	movs	r2, #1
 7ca:	6803      	ldr	r3, [r0, #0]
 7cc:	421a      	tst	r2, r3
 7ce:	d1fc      	bne.n	7ca <sercomReset+0xe>
}
 7d0:	4770      	bx	lr
 7d2:	46c0      	nop			; (mov r8, r8)
 7d4:	42000800 	.word	0x42000800

000007d8 <sercomSpiMasterInit>:
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
}


void sercomSpiMasterInit(SercomId id, u32_t dipo, u32_t dopo, bool cpol, bool cpha, u8_t baud) {
 7d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 7da:	464f      	mov	r7, r9
 7dc:	4646      	mov	r6, r8
 7de:	b4c0      	push	{r6, r7}
 7e0:	0006      	movs	r6, r0
 7e2:	4688      	mov	r8, r1
 7e4:	0017      	movs	r7, r2
 7e6:	001d      	movs	r5, r3
 7e8:	ab08      	add	r3, sp, #32
 7ea:	781c      	ldrb	r4, [r3, #0]
 7ec:	ab09      	add	r3, sp, #36	; 0x24
 7ee:	781b      	ldrb	r3, [r3, #0]
 7f0:	4699      	mov	r9, r3
	
	//sercom(id)->SPI.CTRLA.reg = SERCOM_SPI_CTRLA_ENABLE
	
    sercomReset(id);
 7f2:	4b19      	ldr	r3, [pc, #100]	; (858 <sercomSpiMasterInit+0x80>)
 7f4:	4798      	blx	r3
 7f6:	02b0      	lsls	r0, r6, #10
 7f8:	4b18      	ldr	r3, [pc, #96]	; (85c <sercomSpiMasterInit+0x84>)
 7fa:	469c      	mov	ip, r3
 7fc:	4460      	add	r0, ip
	
    sercom(id)->SPI.CTRLA.reg = SERCOM_SPI_CTRLA_MODE_SPI_MASTER;
 7fe:	230c      	movs	r3, #12
 800:	6003      	str	r3, [r0, #0]


    sercom(id)->SPI.CTRLB.reg
        = SERCOM_SPI_CTRLB_RXEN
 802:	4b17      	ldr	r3, [pc, #92]	; (860 <sercomSpiMasterInit+0x88>)
 804:	6043      	str	r3, [r0, #4]
		};
	}
}

static inline void SPI_sync(SercomId id) {
	while  (sercom(id)->SPI.SYNCBUSY.bit.CTRLB);
 806:	69c3      	ldr	r3, [r0, #28]
 808:	075b      	lsls	r3, r3, #29
 80a:	d4fc      	bmi.n	806 <sercomSpiMasterInit+0x2e>
          | SERCOM_SPI_CTRLB_SSDE;

    SPI_sync(id);

    sercom(id)->SPI.BAUD.reg = baud;
 80c:	464b      	mov	r3, r9
 80e:	7303      	strb	r3, [r0, #12]
 810:	69c3      	ldr	r3, [r0, #28]
 812:	075b      	lsls	r3, r3, #29
 814:	d4fc      	bmi.n	810 <sercomSpiMasterInit+0x38>


    sercom(id)->SPI.CTRLA.reg
        = SERCOM_SPI_CTRLA_ENABLE
          | SERCOM_SPI_CTRLA_MODE_SPI_MASTER
          | SERCOM_SPI_CTRLA_DIPO(dipo)
 816:	4643      	mov	r3, r8
 818:	0519      	lsls	r1, r3, #20
 81a:	23c0      	movs	r3, #192	; 0xc0
 81c:	039b      	lsls	r3, r3, #14
 81e:	4019      	ands	r1, r3
 820:	000e      	movs	r6, r1
 822:	0439      	lsls	r1, r7, #16
 824:	23c0      	movs	r3, #192	; 0xc0
 826:	029b      	lsls	r3, r3, #10
 828:	4019      	ands	r1, r3
 82a:	230e      	movs	r3, #14
 82c:	000a      	movs	r2, r1
 82e:	431a      	orrs	r2, r3
          | SERCOM_SPI_CTRLA_DOPO(dopo)
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
 830:	1e6b      	subs	r3, r5, #1
 832:	419d      	sbcs	r5, r3
 834:	076d      	lsls	r5, r5, #29
 836:	0031      	movs	r1, r6
 838:	4311      	orrs	r1, r2
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
 83a:	1e63      	subs	r3, r4, #1
 83c:	419c      	sbcs	r4, r3
 83e:	0722      	lsls	r2, r4, #28
 840:	002c      	movs	r4, r5
 842:	430c      	orrs	r4, r1
 844:	4314      	orrs	r4, r2

    SPI_sync(id);


    sercom(id)->SPI.CTRLA.reg
        = SERCOM_SPI_CTRLA_ENABLE
 846:	6004      	str	r4, [r0, #0]
 848:	69c3      	ldr	r3, [r0, #28]
 84a:	075b      	lsls	r3, r3, #29
 84c:	d4fc      	bmi.n	848 <sercomSpiMasterInit+0x70>

    SPI_sync(id);



}
 84e:	bc0c      	pop	{r2, r3}
 850:	4690      	mov	r8, r2
 852:	4699      	mov	r9, r3
 854:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 856:	46c0      	nop			; (mov r8, r8)
 858:	000007bd 	.word	0x000007bd
 85c:	42000800 	.word	0x42000800
 860:	00020200 	.word	0x00020200

00000864 <__libc_init_array>:
 864:	b570      	push	{r4, r5, r6, lr}
 866:	4e0d      	ldr	r6, [pc, #52]	; (89c <__libc_init_array+0x38>)
 868:	4d0d      	ldr	r5, [pc, #52]	; (8a0 <__libc_init_array+0x3c>)
 86a:	2400      	movs	r4, #0
 86c:	1bad      	subs	r5, r5, r6
 86e:	10ad      	asrs	r5, r5, #2
 870:	d005      	beq.n	87e <__libc_init_array+0x1a>
 872:	00a3      	lsls	r3, r4, #2
 874:	58f3      	ldr	r3, [r6, r3]
 876:	3401      	adds	r4, #1
 878:	4798      	blx	r3
 87a:	42a5      	cmp	r5, r4
 87c:	d1f9      	bne.n	872 <__libc_init_array+0xe>
 87e:	f000 f8f9 	bl	a74 <_init>
 882:	4e08      	ldr	r6, [pc, #32]	; (8a4 <__libc_init_array+0x40>)
 884:	4d08      	ldr	r5, [pc, #32]	; (8a8 <__libc_init_array+0x44>)
 886:	2400      	movs	r4, #0
 888:	1bad      	subs	r5, r5, r6
 88a:	10ad      	asrs	r5, r5, #2
 88c:	d005      	beq.n	89a <__libc_init_array+0x36>
 88e:	00a3      	lsls	r3, r4, #2
 890:	58f3      	ldr	r3, [r6, r3]
 892:	3401      	adds	r4, #1
 894:	4798      	blx	r3
 896:	42a5      	cmp	r5, r4
 898:	d1f9      	bne.n	88e <__libc_init_array+0x2a>
 89a:	bd70      	pop	{r4, r5, r6, pc}
 89c:	00000a80 	.word	0x00000a80
 8a0:	00000a80 	.word	0x00000a80
 8a4:	00000a80 	.word	0x00000a80
 8a8:	00000a88 	.word	0x00000a88

000008ac <memset>:
 8ac:	b570      	push	{r4, r5, r6, lr}
 8ae:	0783      	lsls	r3, r0, #30
 8b0:	d03f      	beq.n	932 <memset+0x86>
 8b2:	1e54      	subs	r4, r2, #1
 8b4:	2a00      	cmp	r2, #0
 8b6:	d03b      	beq.n	930 <memset+0x84>
 8b8:	b2ce      	uxtb	r6, r1
 8ba:	0003      	movs	r3, r0
 8bc:	2503      	movs	r5, #3
 8be:	e003      	b.n	8c8 <memset+0x1c>
 8c0:	1e62      	subs	r2, r4, #1
 8c2:	2c00      	cmp	r4, #0
 8c4:	d034      	beq.n	930 <memset+0x84>
 8c6:	0014      	movs	r4, r2
 8c8:	3301      	adds	r3, #1
 8ca:	1e5a      	subs	r2, r3, #1
 8cc:	7016      	strb	r6, [r2, #0]
 8ce:	422b      	tst	r3, r5
 8d0:	d1f6      	bne.n	8c0 <memset+0x14>
 8d2:	2c03      	cmp	r4, #3
 8d4:	d924      	bls.n	920 <memset+0x74>
 8d6:	25ff      	movs	r5, #255	; 0xff
 8d8:	400d      	ands	r5, r1
 8da:	022a      	lsls	r2, r5, #8
 8dc:	4315      	orrs	r5, r2
 8de:	042a      	lsls	r2, r5, #16
 8e0:	4315      	orrs	r5, r2
 8e2:	2c0f      	cmp	r4, #15
 8e4:	d911      	bls.n	90a <memset+0x5e>
 8e6:	0026      	movs	r6, r4
 8e8:	3e10      	subs	r6, #16
 8ea:	0936      	lsrs	r6, r6, #4
 8ec:	3601      	adds	r6, #1
 8ee:	0136      	lsls	r6, r6, #4
 8f0:	001a      	movs	r2, r3
 8f2:	199b      	adds	r3, r3, r6
 8f4:	6015      	str	r5, [r2, #0]
 8f6:	6055      	str	r5, [r2, #4]
 8f8:	6095      	str	r5, [r2, #8]
 8fa:	60d5      	str	r5, [r2, #12]
 8fc:	3210      	adds	r2, #16
 8fe:	4293      	cmp	r3, r2
 900:	d1f8      	bne.n	8f4 <memset+0x48>
 902:	220f      	movs	r2, #15
 904:	4014      	ands	r4, r2
 906:	2c03      	cmp	r4, #3
 908:	d90a      	bls.n	920 <memset+0x74>
 90a:	1f26      	subs	r6, r4, #4
 90c:	08b6      	lsrs	r6, r6, #2
 90e:	3601      	adds	r6, #1
 910:	00b6      	lsls	r6, r6, #2
 912:	001a      	movs	r2, r3
 914:	199b      	adds	r3, r3, r6
 916:	c220      	stmia	r2!, {r5}
 918:	4293      	cmp	r3, r2
 91a:	d1fc      	bne.n	916 <memset+0x6a>
 91c:	2203      	movs	r2, #3
 91e:	4014      	ands	r4, r2
 920:	2c00      	cmp	r4, #0
 922:	d005      	beq.n	930 <memset+0x84>
 924:	b2c9      	uxtb	r1, r1
 926:	191c      	adds	r4, r3, r4
 928:	7019      	strb	r1, [r3, #0]
 92a:	3301      	adds	r3, #1
 92c:	429c      	cmp	r4, r3
 92e:	d1fb      	bne.n	928 <memset+0x7c>
 930:	bd70      	pop	{r4, r5, r6, pc}
 932:	0014      	movs	r4, r2
 934:	0003      	movs	r3, r0
 936:	e7cc      	b.n	8d2 <memset+0x26>

00000938 <register_fini>:
 938:	4b03      	ldr	r3, [pc, #12]	; (948 <register_fini+0x10>)
 93a:	b510      	push	{r4, lr}
 93c:	2b00      	cmp	r3, #0
 93e:	d002      	beq.n	946 <register_fini+0xe>
 940:	4802      	ldr	r0, [pc, #8]	; (94c <register_fini+0x14>)
 942:	f000 f805 	bl	950 <atexit>
 946:	bd10      	pop	{r4, pc}
 948:	00000000 	.word	0x00000000
 94c:	00000961 	.word	0x00000961

00000950 <atexit>:
 950:	b510      	push	{r4, lr}
 952:	0001      	movs	r1, r0
 954:	2300      	movs	r3, #0
 956:	2200      	movs	r2, #0
 958:	2000      	movs	r0, #0
 95a:	f000 f81b 	bl	994 <__register_exitproc>
 95e:	bd10      	pop	{r4, pc}

00000960 <__libc_fini_array>:
 960:	b570      	push	{r4, r5, r6, lr}
 962:	4b09      	ldr	r3, [pc, #36]	; (988 <__libc_fini_array+0x28>)
 964:	4c09      	ldr	r4, [pc, #36]	; (98c <__libc_fini_array+0x2c>)
 966:	1ae4      	subs	r4, r4, r3
 968:	10a4      	asrs	r4, r4, #2
 96a:	d009      	beq.n	980 <__libc_fini_array+0x20>
 96c:	4a08      	ldr	r2, [pc, #32]	; (990 <__libc_fini_array+0x30>)
 96e:	18a5      	adds	r5, r4, r2
 970:	00ad      	lsls	r5, r5, #2
 972:	18ed      	adds	r5, r5, r3
 974:	682b      	ldr	r3, [r5, #0]
 976:	3c01      	subs	r4, #1
 978:	4798      	blx	r3
 97a:	3d04      	subs	r5, #4
 97c:	2c00      	cmp	r4, #0
 97e:	d1f9      	bne.n	974 <__libc_fini_array+0x14>
 980:	f000 f882 	bl	a88 <_fini>
 984:	bd70      	pop	{r4, r5, r6, pc}
 986:	46c0      	nop			; (mov r8, r8)
 988:	00000a94 	.word	0x00000a94
 98c:	00000a98 	.word	0x00000a98
 990:	3fffffff 	.word	0x3fffffff

00000994 <__register_exitproc>:
 994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 996:	4644      	mov	r4, r8
 998:	465f      	mov	r7, fp
 99a:	4656      	mov	r6, sl
 99c:	464d      	mov	r5, r9
 99e:	469b      	mov	fp, r3
 9a0:	4b2f      	ldr	r3, [pc, #188]	; (a60 <__register_exitproc+0xcc>)
 9a2:	b4f0      	push	{r4, r5, r6, r7}
 9a4:	681c      	ldr	r4, [r3, #0]
 9a6:	23a4      	movs	r3, #164	; 0xa4
 9a8:	005b      	lsls	r3, r3, #1
 9aa:	0005      	movs	r5, r0
 9ac:	58e0      	ldr	r0, [r4, r3]
 9ae:	000e      	movs	r6, r1
 9b0:	4690      	mov	r8, r2
 9b2:	2800      	cmp	r0, #0
 9b4:	d04b      	beq.n	a4e <__register_exitproc+0xba>
 9b6:	6843      	ldr	r3, [r0, #4]
 9b8:	2b1f      	cmp	r3, #31
 9ba:	dc0d      	bgt.n	9d8 <__register_exitproc+0x44>
 9bc:	1c5c      	adds	r4, r3, #1
 9be:	2d00      	cmp	r5, #0
 9c0:	d121      	bne.n	a06 <__register_exitproc+0x72>
 9c2:	3302      	adds	r3, #2
 9c4:	009b      	lsls	r3, r3, #2
 9c6:	6044      	str	r4, [r0, #4]
 9c8:	501e      	str	r6, [r3, r0]
 9ca:	2000      	movs	r0, #0
 9cc:	bc3c      	pop	{r2, r3, r4, r5}
 9ce:	4690      	mov	r8, r2
 9d0:	4699      	mov	r9, r3
 9d2:	46a2      	mov	sl, r4
 9d4:	46ab      	mov	fp, r5
 9d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 9d8:	4b22      	ldr	r3, [pc, #136]	; (a64 <__register_exitproc+0xd0>)
 9da:	2b00      	cmp	r3, #0
 9dc:	d03c      	beq.n	a58 <__register_exitproc+0xc4>
 9de:	20c8      	movs	r0, #200	; 0xc8
 9e0:	0040      	lsls	r0, r0, #1
 9e2:	e000      	b.n	9e6 <__register_exitproc+0x52>
 9e4:	bf00      	nop
 9e6:	2800      	cmp	r0, #0
 9e8:	d036      	beq.n	a58 <__register_exitproc+0xc4>
 9ea:	22a4      	movs	r2, #164	; 0xa4
 9ec:	2300      	movs	r3, #0
 9ee:	0052      	lsls	r2, r2, #1
 9f0:	58a1      	ldr	r1, [r4, r2]
 9f2:	6043      	str	r3, [r0, #4]
 9f4:	6001      	str	r1, [r0, #0]
 9f6:	50a0      	str	r0, [r4, r2]
 9f8:	3240      	adds	r2, #64	; 0x40
 9fa:	5083      	str	r3, [r0, r2]
 9fc:	3204      	adds	r2, #4
 9fe:	5083      	str	r3, [r0, r2]
 a00:	2401      	movs	r4, #1
 a02:	2d00      	cmp	r5, #0
 a04:	d0dd      	beq.n	9c2 <__register_exitproc+0x2e>
 a06:	009a      	lsls	r2, r3, #2
 a08:	4691      	mov	r9, r2
 a0a:	4481      	add	r9, r0
 a0c:	4642      	mov	r2, r8
 a0e:	2188      	movs	r1, #136	; 0x88
 a10:	464f      	mov	r7, r9
 a12:	507a      	str	r2, [r7, r1]
 a14:	22c4      	movs	r2, #196	; 0xc4
 a16:	0052      	lsls	r2, r2, #1
 a18:	4690      	mov	r8, r2
 a1a:	4480      	add	r8, r0
 a1c:	4642      	mov	r2, r8
 a1e:	3987      	subs	r1, #135	; 0x87
 a20:	4099      	lsls	r1, r3
 a22:	6812      	ldr	r2, [r2, #0]
 a24:	468a      	mov	sl, r1
 a26:	430a      	orrs	r2, r1
 a28:	4694      	mov	ip, r2
 a2a:	4642      	mov	r2, r8
 a2c:	4661      	mov	r1, ip
 a2e:	6011      	str	r1, [r2, #0]
 a30:	2284      	movs	r2, #132	; 0x84
 a32:	4649      	mov	r1, r9
 a34:	465f      	mov	r7, fp
 a36:	0052      	lsls	r2, r2, #1
 a38:	508f      	str	r7, [r1, r2]
 a3a:	2d02      	cmp	r5, #2
 a3c:	d1c1      	bne.n	9c2 <__register_exitproc+0x2e>
 a3e:	0002      	movs	r2, r0
 a40:	4655      	mov	r5, sl
 a42:	328d      	adds	r2, #141	; 0x8d
 a44:	32ff      	adds	r2, #255	; 0xff
 a46:	6811      	ldr	r1, [r2, #0]
 a48:	430d      	orrs	r5, r1
 a4a:	6015      	str	r5, [r2, #0]
 a4c:	e7b9      	b.n	9c2 <__register_exitproc+0x2e>
 a4e:	0020      	movs	r0, r4
 a50:	304d      	adds	r0, #77	; 0x4d
 a52:	30ff      	adds	r0, #255	; 0xff
 a54:	50e0      	str	r0, [r4, r3]
 a56:	e7ae      	b.n	9b6 <__register_exitproc+0x22>
 a58:	2001      	movs	r0, #1
 a5a:	4240      	negs	r0, r0
 a5c:	e7b6      	b.n	9cc <__register_exitproc+0x38>
 a5e:	46c0      	nop			; (mov r8, r8)
 a60:	00000a70 	.word	0x00000a70
 a64:	00000000 	.word	0x00000000

00000a68 <dummy_tx>:
 a68:	00000099 00000043                       ....C...

00000a70 <_global_impure_ptr>:
 a70:	20000010                                ... 

00000a74 <_init>:
 a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 a76:	46c0      	nop			; (mov r8, r8)
 a78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 a7a:	bc08      	pop	{r3}
 a7c:	469e      	mov	lr, r3
 a7e:	4770      	bx	lr

00000a80 <__init_array_start>:
 a80:	00000939 	.word	0x00000939

00000a84 <__frame_dummy_init_array_entry>:
 a84:	000000dd                                ....

00000a88 <_fini>:
 a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 a8a:	46c0      	nop			; (mov r8, r8)
 a8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 a8e:	bc08      	pop	{r3}
 a90:	469e      	mov	lr, r3
 a92:	4770      	bx	lr

00000a94 <__fini_array_start>:
 a94:	000000b5 	.word	0x000000b5
