
DasAltimeter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000084c  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000438  20000000  0000084c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000001a0  20000440  00000c90  00020440  2**4
                  ALLOC
  3 .stack        00002000  200005e0  00000e30  00020440  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020438  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020460  2**0
                  CONTENTS, READONLY
  6 .debug_info   00010753  00000000  00000000  000204b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000da7  00000000  00000000  00030c0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000c2b  00000000  00000000  000319b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000001b0  00000000  00000000  000325de  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000188  00000000  00000000  0003278e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00012bfa  00000000  00000000  00032916  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000038ae  00000000  00000000  00045510  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0007082d  00000000  00000000  00048dbe  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000004b8  00000000  00000000  000b95ec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
   0:	200025e0 	.word	0x200025e0
   4:	00000119 	.word	0x00000119
   8:	00000115 	.word	0x00000115
   c:	00000115 	.word	0x00000115
	...
  2c:	00000115 	.word	0x00000115
	...
  38:	00000115 	.word	0x00000115
  3c:	00000115 	.word	0x00000115
  40:	00000115 	.word	0x00000115
  44:	00000115 	.word	0x00000115
  48:	00000115 	.word	0x00000115
  4c:	00000115 	.word	0x00000115
  50:	00000115 	.word	0x00000115
  54:	00000115 	.word	0x00000115
  58:	00000115 	.word	0x00000115
  5c:	00000115 	.word	0x00000115
  60:	00000115 	.word	0x00000115
  64:	00000115 	.word	0x00000115
  68:	00000115 	.word	0x00000115
  6c:	00000115 	.word	0x00000115
  70:	00000115 	.word	0x00000115
  74:	00000115 	.word	0x00000115
  78:	00000115 	.word	0x00000115
  7c:	00000115 	.word	0x00000115
  80:	00000115 	.word	0x00000115
  84:	00000115 	.word	0x00000115
  88:	00000115 	.word	0x00000115
  8c:	00000115 	.word	0x00000115
  90:	00000115 	.word	0x00000115
	...
  9c:	00000115 	.word	0x00000115
  a0:	00000115 	.word	0x00000115
  a4:	00000115 	.word	0x00000115
  a8:	00000115 	.word	0x00000115
  ac:	00000115 	.word	0x00000115
  b0:	00000000 	.word	0x00000000

000000b4 <__do_global_dtors_aux>:
  b4:	b510      	push	{r4, lr}
  b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
  b8:	7823      	ldrb	r3, [r4, #0]
  ba:	2b00      	cmp	r3, #0
  bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
  be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
  c0:	2b00      	cmp	r3, #0
  c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
  c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
  c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
  c8:	bf00      	nop
  ca:	2301      	movs	r3, #1
  cc:	7023      	strb	r3, [r4, #0]
  ce:	bd10      	pop	{r4, pc}
  d0:	20000440 	.word	0x20000440
  d4:	00000000 	.word	0x00000000
  d8:	0000084c 	.word	0x0000084c

000000dc <frame_dummy>:
  dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
  de:	b510      	push	{r4, lr}
  e0:	2b00      	cmp	r3, #0
  e2:	d003      	beq.n	ec <frame_dummy+0x10>
  e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
  e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
  e8:	e000      	b.n	ec <frame_dummy+0x10>
  ea:	bf00      	nop
  ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
  ee:	6803      	ldr	r3, [r0, #0]
  f0:	2b00      	cmp	r3, #0
  f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
  f4:	bd10      	pop	{r4, pc}
  f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
  f8:	2b00      	cmp	r3, #0
  fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
  fc:	4798      	blx	r3
  fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
 100:	00000000 	.word	0x00000000
 104:	20000444 	.word	0x20000444
 108:	0000084c 	.word	0x0000084c
 10c:	0000084c 	.word	0x0000084c
 110:	00000000 	.word	0x00000000

00000114 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
 114:	e7fe      	b.n	114 <Dummy_Handler>
 116:	46c0      	nop			; (mov r8, r8)

00000118 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
 118:	b570      	push	{r4, r5, r6, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
 11a:	4b2e      	ldr	r3, [pc, #184]	; (1d4 <Reset_Handler+0xbc>)
 11c:	4a2e      	ldr	r2, [pc, #184]	; (1d8 <Reset_Handler+0xc0>)
 11e:	429a      	cmp	r2, r3
 120:	d003      	beq.n	12a <Reset_Handler+0x12>
                for (; pDest < &_erelocate;) {
 122:	4b2e      	ldr	r3, [pc, #184]	; (1dc <Reset_Handler+0xc4>)
 124:	4a2b      	ldr	r2, [pc, #172]	; (1d4 <Reset_Handler+0xbc>)
 126:	429a      	cmp	r2, r3
 128:	d304      	bcc.n	134 <Reset_Handler+0x1c>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
 12a:	4b2d      	ldr	r3, [pc, #180]	; (1e0 <Reset_Handler+0xc8>)
 12c:	4a2d      	ldr	r2, [pc, #180]	; (1e4 <Reset_Handler+0xcc>)
 12e:	429a      	cmp	r2, r3
 130:	d310      	bcc.n	154 <Reset_Handler+0x3c>
 132:	e01e      	b.n	172 <Reset_Handler+0x5a>
 134:	4a2c      	ldr	r2, [pc, #176]	; (1e8 <Reset_Handler+0xd0>)
 136:	4b29      	ldr	r3, [pc, #164]	; (1dc <Reset_Handler+0xc4>)
 138:	3303      	adds	r3, #3
 13a:	1a9b      	subs	r3, r3, r2
 13c:	089b      	lsrs	r3, r3, #2
 13e:	3301      	adds	r3, #1
 140:	009b      	lsls	r3, r3, #2
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
 142:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
 144:	4823      	ldr	r0, [pc, #140]	; (1d4 <Reset_Handler+0xbc>)
 146:	4924      	ldr	r1, [pc, #144]	; (1d8 <Reset_Handler+0xc0>)
 148:	588c      	ldr	r4, [r1, r2]
 14a:	5084      	str	r4, [r0, r2]
 14c:	3204      	adds	r2, #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
 14e:	429a      	cmp	r2, r3
 150:	d1fa      	bne.n	148 <Reset_Handler+0x30>
 152:	e7ea      	b.n	12a <Reset_Handler+0x12>
 154:	4a25      	ldr	r2, [pc, #148]	; (1ec <Reset_Handler+0xd4>)
 156:	4b22      	ldr	r3, [pc, #136]	; (1e0 <Reset_Handler+0xc8>)
 158:	3303      	adds	r3, #3
 15a:	1a9b      	subs	r3, r3, r2
 15c:	089b      	lsrs	r3, r3, #2
 15e:	3301      	adds	r3, #1
 160:	009b      	lsls	r3, r3, #2
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
 162:	2200      	movs	r2, #0
                *pDest++ = 0;
 164:	481f      	ldr	r0, [pc, #124]	; (1e4 <Reset_Handler+0xcc>)
 166:	2100      	movs	r1, #0
 168:	1814      	adds	r4, r2, r0
 16a:	6021      	str	r1, [r4, #0]
 16c:	3204      	adds	r2, #4
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
 16e:	429a      	cmp	r2, r3
 170:	d1fa      	bne.n	168 <Reset_Handler+0x50>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
 172:	4a1f      	ldr	r2, [pc, #124]	; (1f0 <Reset_Handler+0xd8>)
 174:	21ff      	movs	r1, #255	; 0xff
 176:	4b1f      	ldr	r3, [pc, #124]	; (1f4 <Reset_Handler+0xdc>)
 178:	438b      	bics	r3, r1
 17a:	6093      	str	r3, [r2, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
 17c:	39fd      	subs	r1, #253	; 0xfd
 17e:	2390      	movs	r3, #144	; 0x90
 180:	005b      	lsls	r3, r3, #1
 182:	4a1d      	ldr	r2, [pc, #116]	; (1f8 <Reset_Handler+0xe0>)
 184:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
 186:	481d      	ldr	r0, [pc, #116]	; (1fc <Reset_Handler+0xe4>)
 188:	78c3      	ldrb	r3, [r0, #3]
 18a:	2403      	movs	r4, #3
 18c:	43a3      	bics	r3, r4
 18e:	2202      	movs	r2, #2
 190:	4313      	orrs	r3, r2
 192:	70c3      	strb	r3, [r0, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
 194:	78c3      	ldrb	r3, [r0, #3]
 196:	260c      	movs	r6, #12
 198:	43b3      	bics	r3, r6
 19a:	2108      	movs	r1, #8
 19c:	430b      	orrs	r3, r1
 19e:	70c3      	strb	r3, [r0, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
 1a0:	4b17      	ldr	r3, [pc, #92]	; (200 <Reset_Handler+0xe8>)
 1a2:	7b98      	ldrb	r0, [r3, #14]
 1a4:	2530      	movs	r5, #48	; 0x30
 1a6:	43a8      	bics	r0, r5
 1a8:	0005      	movs	r5, r0
 1aa:	2020      	movs	r0, #32
 1ac:	4328      	orrs	r0, r5
 1ae:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
 1b0:	7b98      	ldrb	r0, [r3, #14]
 1b2:	43b0      	bics	r0, r6
 1b4:	4301      	orrs	r1, r0
 1b6:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
 1b8:	7b99      	ldrb	r1, [r3, #14]
 1ba:	43a1      	bics	r1, r4
 1bc:	430a      	orrs	r2, r1
 1be:	739a      	strb	r2, [r3, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
 1c0:	4a10      	ldr	r2, [pc, #64]	; (204 <Reset_Handler+0xec>)
 1c2:	6851      	ldr	r1, [r2, #4]
 1c4:	2380      	movs	r3, #128	; 0x80
 1c6:	430b      	orrs	r3, r1
 1c8:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
 1ca:	4b0f      	ldr	r3, [pc, #60]	; (208 <Reset_Handler+0xf0>)
 1cc:	4798      	blx	r3

        /* Branch to main function */
        main();
 1ce:	4b0f      	ldr	r3, [pc, #60]	; (20c <Reset_Handler+0xf4>)
 1d0:	4798      	blx	r3
 1d2:	e7fe      	b.n	1d2 <Reset_Handler+0xba>
 1d4:	20000000 	.word	0x20000000
 1d8:	0000084c 	.word	0x0000084c
 1dc:	20000438 	.word	0x20000438
 1e0:	200005e0 	.word	0x200005e0
 1e4:	20000440 	.word	0x20000440
 1e8:	20000004 	.word	0x20000004
 1ec:	20000444 	.word	0x20000444
 1f0:	e000ed00 	.word	0xe000ed00
 1f4:	00000000 	.word	0x00000000
 1f8:	41007000 	.word	0x41007000
 1fc:	41005000 	.word	0x41005000
 200:	41004800 	.word	0x41004800
 204:	41004000 	.word	0x41004000
 208:	0000061d 	.word	0x0000061d
 20c:	00000241 	.word	0x00000241

00000210 <SystemInit>:
 *         Initialize the System and update the SystemCoreClock variable.
 */
void SystemInit(void)
{
	// Keep the default device state after reset
	SystemCoreClock = __SYSTEM_CLOCK;
 210:	4a01      	ldr	r2, [pc, #4]	; (218 <SystemInit+0x8>)
 212:	4b02      	ldr	r3, [pc, #8]	; (21c <SystemInit+0xc>)
 214:	601a      	str	r2, [r3, #0]
	return;
}
 216:	4770      	bx	lr
 218:	000f4240 	.word	0x000f4240
 21c:	20000000 	.word	0x20000000

00000220 <spiSend>:

#include "sam.h"
#include <util.h>

uint8_t spiSend(uint8_t data) {
	while(SERCOM1->SPI.INTFLAG.bit.DRE == 0);
 220:	4a06      	ldr	r2, [pc, #24]	; (23c <spiSend+0x1c>)
 222:	7e13      	ldrb	r3, [r2, #24]
 224:	07db      	lsls	r3, r3, #31
 226:	d5fc      	bpl.n	222 <spiSend+0x2>
	SERCOM1->SPI.DATA.reg = data;
 228:	4b04      	ldr	r3, [pc, #16]	; (23c <spiSend+0x1c>)
 22a:	6298      	str	r0, [r3, #40]	; 0x28
	while(SERCOM1->SPI.INTFLAG.bit.RXC == 0);
 22c:	001a      	movs	r2, r3
 22e:	7e13      	ldrb	r3, [r2, #24]
 230:	075b      	lsls	r3, r3, #29
 232:	d5fc      	bpl.n	22e <spiSend+0xe>
	return SERCOM1->SPI.DATA.reg;
 234:	4b01      	ldr	r3, [pc, #4]	; (23c <spiSend+0x1c>)
 236:	6a98      	ldr	r0, [r3, #40]	; 0x28
 238:	b2c0      	uxtb	r0, r0
}
 23a:	4770      	bx	lr
 23c:	42000c00 	.word	0x42000c00

00000240 <main>:


int main(void) {
 240:	b5f0      	push	{r4, r5, r6, r7, lr}
 242:	b087      	sub	sp, #28
    /* Initialize the SAM system */
    SystemInit();
 244:	4b36      	ldr	r3, [pc, #216]	; (320 <main+0xe0>)
 246:	4798      	blx	r3
    GclkInit();
 248:	4b36      	ldr	r3, [pc, #216]	; (324 <main+0xe4>)
 24a:	4798      	blx	r3
    delayInit();
 24c:	4b36      	ldr	r3, [pc, #216]	; (328 <main+0xe8>)
 24e:	4798      	blx	r3
    adcInit();
 250:	4b36      	ldr	r3, [pc, #216]	; (32c <main+0xec>)
 252:	4798      	blx	r3
    dmaInit();
 254:	4b36      	ldr	r3, [pc, #216]	; (330 <main+0xf0>)
 256:	4798      	blx	r3
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
 258:	4b36      	ldr	r3, [pc, #216]	; (334 <main+0xf4>)
 25a:	205b      	movs	r0, #91	; 0x5b
 25c:	5c19      	ldrb	r1, [r3, r0]
 25e:	2201      	movs	r2, #1
 260:	4391      	bics	r1, r2
 262:	5419      	strb	r1, [r3, r0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
 264:	2180      	movs	r1, #128	; 0x80
 266:	0509      	lsls	r1, r1, #20
 268:	6099      	str	r1, [r3, #8]

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
 26a:	2433      	movs	r4, #51	; 0x33
 26c:	5d19      	ldrb	r1, [r3, r4]
 26e:	384c      	subs	r0, #76	; 0x4c
 270:	4381      	bics	r1, r0
 272:	2001      	movs	r0, #1
 274:	4301      	orrs	r1, r0
 276:	5519      	strb	r1, [r3, r4]
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
 278:	2146      	movs	r1, #70	; 0x46
 27a:	5c5c      	ldrb	r4, [r3, r1]
 27c:	4320      	orrs	r0, r4
 27e:	5458      	strb	r0, [r3, r1]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
 280:	2053      	movs	r0, #83	; 0x53
 282:	5c19      	ldrb	r1, [r3, r0]
 284:	4391      	bics	r1, r2
 286:	5419      	strb	r1, [r3, r0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
 288:	2180      	movs	r1, #128	; 0x80
 28a:	0309      	lsls	r1, r1, #12
 28c:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
 28e:	3802      	subs	r0, #2
 290:	5c19      	ldrb	r1, [r3, r0]
 292:	4391      	bics	r1, r2
 294:	5419      	strb	r1, [r3, r0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
 296:	2180      	movs	r1, #128	; 0x80
 298:	0289      	lsls	r1, r1, #10
 29a:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
 29c:	2150      	movs	r1, #80	; 0x50
 29e:	5c58      	ldrb	r0, [r3, r1]
 2a0:	4390      	bics	r0, r2
 2a2:	5458      	strb	r0, [r3, r1]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
 2a4:	5c5c      	ldrb	r4, [r3, r1]
 2a6:	2002      	movs	r0, #2
 2a8:	4320      	orrs	r0, r4
 2aa:	5458      	strb	r0, [r3, r1]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
 2ac:	2180      	movs	r1, #128	; 0x80
 2ae:	0249      	lsls	r1, r1, #9
 2b0:	6059      	str	r1, [r3, #4]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
 2b2:	2054      	movs	r0, #84	; 0x54
 2b4:	5c19      	ldrb	r1, [r3, r0]
 2b6:	4391      	bics	r1, r2
 2b8:	5419      	strb	r1, [r3, r0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
 2ba:	2280      	movs	r2, #128	; 0x80
 2bc:	0352      	lsls	r2, r2, #13
 2be:	609a      	str	r2, [r3, #8]
    pinOut(spi1MOSI);
    pinOut(spi1SCK);
    pinIn(spi1MISO);
    pinOut(cs_mem);

    sercomClockEnable(1, 4, 16);
 2c0:	2210      	movs	r2, #16
 2c2:	2104      	movs	r1, #4
 2c4:	3853      	subs	r0, #83	; 0x53
 2c6:	4b1c      	ldr	r3, [pc, #112]	; (338 <main+0xf8>)
 2c8:	4798      	blx	r3
    sercomSpiMasterInit(1, 0, 2, 0, 0, 9800);
 2ca:	2348      	movs	r3, #72	; 0x48
 2cc:	9301      	str	r3, [sp, #4]
 2ce:	2400      	movs	r4, #0
 2d0:	9400      	str	r4, [sp, #0]
 2d2:	2300      	movs	r3, #0
 2d4:	2202      	movs	r2, #2
 2d6:	2100      	movs	r1, #0
 2d8:	2001      	movs	r0, #1
 2da:	4d18      	ldr	r5, [pc, #96]	; (33c <main+0xfc>)
 2dc:	47a8      	blx	r5



    volatile float batV = 0;
 2de:	2300      	movs	r3, #0
 2e0:	9305      	str	r3, [sp, #20]


    /* Replace with your application code */
	volatile uint8_t rData;
	volatile uint8_t sData = 0x9F;
 2e2:	229f      	movs	r2, #159	; 0x9f
 2e4:	2312      	movs	r3, #18
 2e6:	446b      	add	r3, sp
 2e8:	701a      	strb	r2, [r3, #0]
	
	
    volatile long counter = 0;
 2ea:	9403      	str	r4, [sp, #12]
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
}


inline static void pinToggle(Pin p) {
    PORT->Group[p.group].OUTTGL.reg = (1<<p.pin);
 2ec:	4c11      	ldr	r4, [pc, #68]	; (334 <main+0xf4>)
 2ee:	2780      	movs	r7, #128	; 0x80
 2f0:	053f      	lsls	r7, r7, #20
    while (1) {
        counter++;
        pinToggle(LedPin);
        //	batV = (0.0020676 * adc_read(senseBat));
        delay_ms(1000);
 2f2:	4e13      	ldr	r6, [pc, #76]	; (340 <main+0x100>)
	volatile uint8_t sData = 0x9F;
	
	
    volatile long counter = 0;
    while (1) {
        counter++;
 2f4:	9b03      	ldr	r3, [sp, #12]
 2f6:	3301      	adds	r3, #1
 2f8:	9303      	str	r3, [sp, #12]
 2fa:	61e7      	str	r7, [r4, #28]
        pinToggle(LedPin);
        //	batV = (0.0020676 * adc_read(senseBat));
        delay_ms(1000);
 2fc:	20fa      	movs	r0, #250	; 0xfa
 2fe:	0080      	lsls	r0, r0, #2
 300:	47b0      	blx	r6
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
 302:	2580      	movs	r5, #128	; 0x80
 304:	036d      	lsls	r5, r5, #13
 306:	6165      	str	r5, [r4, #20]
		pinLow(cs_mem);
		rData = spiSend(sData);
 308:	2312      	movs	r3, #18
 30a:	446b      	add	r3, sp
 30c:	7818      	ldrb	r0, [r3, #0]
 30e:	b2c0      	uxtb	r0, r0
 310:	4b0c      	ldr	r3, [pc, #48]	; (344 <main+0x104>)
 312:	4798      	blx	r3
 314:	2313      	movs	r3, #19
 316:	446b      	add	r3, sp
 318:	7018      	strb	r0, [r3, #0]




inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
 31a:	61a5      	str	r5, [r4, #24]
 31c:	e7ea      	b.n	2f4 <main+0xb4>
 31e:	46c0      	nop			; (mov r8, r8)
 320:	00000211 	.word	0x00000211
 324:	000003ad 	.word	0x000003ad
 328:	0000047d 	.word	0x0000047d
 32c:	00000349 	.word	0x00000349
 330:	000004c9 	.word	0x000004c9
 334:	41004400 	.word	0x41004400
 338:	00000529 	.word	0x00000529
 33c:	00000591 	.word	0x00000591
 340:	0000049d 	.word	0x0000049d
 344:	00000221 	.word	0x00000221

00000348 <adcInit>:


#include <util.h>

void adcInit() {
 348:	b510      	push	{r4, lr}

    // set up clock
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;
 34a:	4a12      	ldr	r2, [pc, #72]	; (394 <adcInit+0x4c>)
 34c:	6a13      	ldr	r3, [r2, #32]
 34e:	2180      	movs	r1, #128	; 0x80
 350:	0249      	lsls	r1, r1, #9
 352:	430b      	orrs	r3, r1
 354:	6213      	str	r3, [r2, #32]

    // divide prescaler by 512 (93.75KHz), max adc freq is 2.1MHz
    ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |
 356:	4910      	ldr	r1, [pc, #64]	; (398 <adcInit+0x50>)
 358:	22e0      	movs	r2, #224	; 0xe0
 35a:	00d2      	lsls	r2, r2, #3
 35c:	808a      	strh	r2, [r1, #4]
                     ADC_CTRLB_RESSEL_12BIT;

    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
 35e:	480f      	ldr	r0, [pc, #60]	; (39c <adcInit+0x54>)
 360:	4b0f      	ldr	r3, [pc, #60]	; (3a0 <adcInit+0x58>)
 362:	8058      	strh	r0, [r3, #2]
                        GCLK_CLKCTRL_GEN(0) |
                        GCLK_CLKCTRL_ID(ADC_GCLK_ID);

    ADC->CALIB.reg =
        ADC_CALIB_BIAS_CAL(
 364:	4b0f      	ldr	r3, [pc, #60]	; (3a4 <adcInit+0x5c>)
    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(0) |
                        GCLK_CLKCTRL_ID(ADC_GCLK_ID);

    ADC->CALIB.reg =
 366:	681b      	ldr	r3, [r3, #0]
 368:	015b      	lsls	r3, r3, #5
 36a:	4013      	ands	r3, r2
 36c:	0018      	movs	r0, r3
        ADC_CALIB_BIAS_CAL(
            (*(uint32_t *)ADC_FUSES_BIASCAL_ADDR >> ADC_FUSES_BIASCAL_Pos)
        ) |
        ADC_CALIB_LINEARITY_CAL(
 36e:	4b0e      	ldr	r3, [pc, #56]	; (3a8 <adcInit+0x60>)
    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(0) |
                        GCLK_CLKCTRL_ID(ADC_GCLK_ID);

    ADC->CALIB.reg =
 370:	685a      	ldr	r2, [r3, #4]
 372:	0154      	lsls	r4, r2, #5
 374:	681a      	ldr	r2, [r3, #0]
 376:	0ed3      	lsrs	r3, r2, #27
 378:	4323      	orrs	r3, r4
 37a:	22ff      	movs	r2, #255	; 0xff
 37c:	4013      	ands	r3, r2
 37e:	4303      	orrs	r3, r0
 380:	850b      	strh	r3, [r1, #40]	; 0x28
        ) |
        ADC_CALIB_LINEARITY_CAL(
            (*(uint64_t *)ADC_FUSES_LINEARITY_0_ADDR >> ADC_FUSES_LINEARITY_0_Pos)
        );

    ADC->REFCTRL.reg = ADC_REFCTRL_REFSEL_INTVCC1;
 382:	2302      	movs	r3, #2
 384:	704b      	strb	r3, [r1, #1]

    ADC->CTRLA.reg = ADC_CTRLA_ENABLE; // enable
 386:	700b      	strb	r3, [r1, #0]
    while(ADC->STATUS.reg & ADC_STATUS_SYNCBUSY);
 388:	000a      	movs	r2, r1
 38a:	7e53      	ldrb	r3, [r2, #25]
 38c:	b25b      	sxtb	r3, r3
 38e:	2b00      	cmp	r3, #0
 390:	dbfb      	blt.n	38a <adcInit+0x42>
}
 392:	bd10      	pop	{r4, pc}
 394:	40000400 	.word	0x40000400
 398:	42004000 	.word	0x42004000
 39c:	0000401e 	.word	0x0000401e
 3a0:	40000c00 	.word	0x40000c00
 3a4:	00806024 	.word	0x00806024
 3a8:	00806020 	.word	0x00806020

000003ac <GclkInit>:


static uint32_t cycles_per_ms = 48000000UL / 1000;
static uint32_t cycles_per_us = 48000000UL / 1000000;

void GclkInit() {
 3ac:	b510      	push	{r4, lr}


    SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
 3ae:	4a1c      	ldr	r2, [pc, #112]	; (420 <GclkInit+0x74>)
 3b0:	23c2      	movs	r3, #194	; 0xc2
 3b2:	00db      	lsls	r3, r3, #3
 3b4:	6093      	str	r3, [r2, #8]
                           SYSCTRL_INTFLAG_DFLLRDY;
    NVMCTRL->CTRLB.reg |= NVMCTRL_CTRLB_RWS_HALF;
 3b6:	491b      	ldr	r1, [pc, #108]	; (424 <GclkInit+0x78>)
 3b8:	6848      	ldr	r0, [r1, #4]
 3ba:	2302      	movs	r3, #2
 3bc:	4303      	orrs	r3, r0
 3be:	604b      	str	r3, [r1, #4]


// start and enable external 32k crystal
    SYSCTRL->XOSC32K.reg = SYSCTRL_XOSC32K_ENABLE |
 3c0:	4b19      	ldr	r3, [pc, #100]	; (428 <GclkInit+0x7c>)
 3c2:	8293      	strh	r3, [r2, #20]
                           SYSCTRL_XOSC32K_XTALEN |
                           SYSCTRL_XOSC32K_EN32K |
                           ( 6 << SYSCTRL_XOSC32K_STARTUP_Pos);

    //wait for crystal to warm up
    while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_XOSC32KRDY)) == 0);
 3c4:	0011      	movs	r1, r2
 3c6:	2202      	movs	r2, #2
 3c8:	68cb      	ldr	r3, [r1, #12]
 3ca:	421a      	tst	r2, r3
 3cc:	d0fc      	beq.n	3c8 <GclkInit+0x1c>

#define NVM_DFLL_COARSE_POS    58
#define NVM_DFLL_COARSE_SIZE   6
#define NVM_DFLL_FINE_POS      64
#define NVM_DFLL_FINE_SIZE     10
    uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
 3ce:	4b17      	ldr	r3, [pc, #92]	; (42c <GclkInit+0x80>)
 3d0:	681c      	ldr	r4, [r3, #0]
 3d2:	0ea4      	lsrs	r4, r4, #26
                         + (NVM_DFLL_COARSE_POS / 32))
                       >> (NVM_DFLL_COARSE_POS % 32))
                     & ((1 << NVM_DFLL_COARSE_SIZE) - 1);
    if (coarse == 0x3f) {
 3d4:	2c3f      	cmp	r4, #63	; 0x3f
 3d6:	d100      	bne.n	3da <GclkInit+0x2e>
        coarse = 0x1f;
 3d8:	3c20      	subs	r4, #32
    }
    uint32_t fine =( *((uint32_t *)(NVMCTRL_OTP4)
                       + (NVM_DFLL_FINE_POS / 32))
                     >> (NVM_DFLL_FINE_POS % 32))
 3da:	4b15      	ldr	r3, [pc, #84]	; (430 <GclkInit+0x84>)
                       >> (NVM_DFLL_COARSE_POS % 32))
                     & ((1 << NVM_DFLL_COARSE_SIZE) - 1);
    if (coarse == 0x3f) {
        coarse = 0x1f;
    }
    uint32_t fine =( *((uint32_t *)(NVMCTRL_OTP4)
 3dc:	6818      	ldr	r0, [r3, #0]
 3de:	0580      	lsls	r0, r0, #22
 3e0:	0d80      	lsrs	r0, r0, #22
                       + (NVM_DFLL_FINE_POS / 32))
                     >> (NVM_DFLL_FINE_POS % 32))
                   & ((1 << NVM_DFLL_FINE_SIZE) - 1);
    if (fine == 0x3ff) {
 3e2:	4b14      	ldr	r3, [pc, #80]	; (434 <GclkInit+0x88>)
 3e4:	4298      	cmp	r0, r3
 3e6:	d100      	bne.n	3ea <GclkInit+0x3e>
        fine = 0x1ff;
 3e8:	4813      	ldr	r0, [pc, #76]	; (438 <GclkInit+0x8c>)
    }


    // Disable ONDEMAND mode while writing configurations (errata 9905)
    SYSCTRL->DFLLCTRL.reg = dfll_ctrl_usb & ~SYSCTRL_DFLLCTRL_ONDEMAND;
 3ea:	4a14      	ldr	r2, [pc, #80]	; (43c <GclkInit+0x90>)
 3ec:	4b0c      	ldr	r3, [pc, #48]	; (420 <GclkInit+0x74>)
 3ee:	849a      	strh	r2, [r3, #36]	; 0x24
    while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_DFLLRDY)) == 0);
 3f0:	0019      	movs	r1, r3
 3f2:	2210      	movs	r2, #16
 3f4:	68cb      	ldr	r3, [r1, #12]
 3f6:	421a      	tst	r2, r3
 3f8:	d0fc      	beq.n	3f4 <GclkInit+0x48>
    SYSCTRL->DFLLVAL.reg = SYSCTRL_DFLLVAL_COARSE(coarse) | SYSCTRL_DFLLVAL_FINE(fine);
 3fa:	02a4      	lsls	r4, r4, #10
 3fc:	4320      	orrs	r0, r4
 3fe:	4b08      	ldr	r3, [pc, #32]	; (420 <GclkInit+0x74>)
 400:	6298      	str	r0, [r3, #40]	; 0x28


    //Wait and see if the DFLL output is good . . .
    while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_DFLLRDY)) == 0);
 402:	0019      	movs	r1, r3
 404:	2210      	movs	r2, #16
 406:	68cb      	ldr	r3, [r1, #12]
 408:	421a      	tst	r2, r3
 40a:	d0fc      	beq.n	406 <GclkInit+0x5a>


    SYSCTRL->DFLLCTRL.reg = dfll_ctrl_usb;
 40c:	4a0c      	ldr	r2, [pc, #48]	; (440 <GclkInit+0x94>)
 40e:	4b04      	ldr	r3, [pc, #16]	; (420 <GclkInit+0x74>)
 410:	849a      	strh	r2, [r3, #36]	; 0x24


    //For generic clock generator 0, select the DFLL48 Clock as input
    GCLK->GENDIV.reg  = (GCLK_GENDIV_DIV(1)  | GCLK_GENDIV_ID(0));
 412:	4b0c      	ldr	r3, [pc, #48]	; (444 <GclkInit+0x98>)
 414:	2280      	movs	r2, #128	; 0x80
 416:	0052      	lsls	r2, r2, #1
 418:	609a      	str	r2, [r3, #8]
    GCLK->GENCTRL.reg = (GCLK_GENCTRL_ID(0)  | (GCLK_GENCTRL_SRC_DFLL48M) | (GCLK_GENCTRL_GENEN));
 41a:	4a0b      	ldr	r2, [pc, #44]	; (448 <GclkInit+0x9c>)
 41c:	605a      	str	r2, [r3, #4]
}
 41e:	bd10      	pop	{r4, pc}
 420:	40000800 	.word	0x40000800
 424:	41004000 	.word	0x41004000
 428:	0000060e 	.word	0x0000060e
 42c:	00806024 	.word	0x00806024
 430:	00806028 	.word	0x00806028
 434:	000003ff 	.word	0x000003ff
 438:	000001ff 	.word	0x000001ff
 43c:	00000522 	.word	0x00000522
 440:	000005a2 	.word	0x000005a2
 444:	40000c00 	.word	0x40000c00
 448:	00010700 	.word	0x00010700

0000044c <gclkEnable>:

void gclkEnable(u32_t id, u32_t src, u32_t div) {
 44c:	b510      	push	{r4, lr}
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
 44e:	230f      	movs	r3, #15
 450:	4018      	ands	r0, r3
 452:	0212      	lsls	r2, r2, #8
 454:	4b07      	ldr	r3, [pc, #28]	; (474 <gclkEnable+0x28>)
 456:	401a      	ands	r2, r3
 458:	4302      	orrs	r2, r0
 45a:	4c07      	ldr	r4, [pc, #28]	; (478 <gclkEnable+0x2c>)
 45c:	60a2      	str	r2, [r4, #8]
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
 45e:	0209      	lsls	r1, r1, #8
 460:	23f8      	movs	r3, #248	; 0xf8
 462:	015b      	lsls	r3, r3, #5
 464:	4019      	ands	r1, r3
 466:	2380      	movs	r3, #128	; 0x80
 468:	025b      	lsls	r3, r3, #9
 46a:	4319      	orrs	r1, r3
 46c:	4308      	orrs	r0, r1
 46e:	6060      	str	r0, [r4, #4]
}
 470:	bd10      	pop	{r4, pc}
 472:	46c0      	nop			; (mov r8, r8)
 474:	00ffff00 	.word	0x00ffff00
 478:	40000c00 	.word	0x40000c00

0000047c <delayInit>:


void delayInit(void) {
    cycles_per_ms = 48000000UL;
    cycles_per_ms /= 1000;
 47c:	4b04      	ldr	r3, [pc, #16]	; (490 <delayInit+0x14>)
 47e:	4a05      	ldr	r2, [pc, #20]	; (494 <delayInit+0x18>)
 480:	601a      	str	r2, [r3, #0]
    cycles_per_us = cycles_per_ms / 1000;
 482:	2230      	movs	r2, #48	; 0x30
 484:	605a      	str	r2, [r3, #4]

    SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
 486:	3a2b      	subs	r2, #43	; 0x2b
 488:	4b03      	ldr	r3, [pc, #12]	; (498 <delayInit+0x1c>)
 48a:	601a      	str	r2, [r3, #0]
}
 48c:	4770      	bx	lr
 48e:	46c0      	nop			; (mov r8, r8)
 490:	20000004 	.word	0x20000004
 494:	0000bb80 	.word	0x0000bb80
 498:	e000e010 	.word	0xe000e010

0000049c <delay_ms>:
/**
 * \brief Delay loop to delay at least n number of milliseconds
 *
 * \param n  Number of milliseconds to wait
 */
void delay_ms(uint32_t n) {
 49c:	b530      	push	{r4, r5, lr}
    while (n--) {
        /* Devide up to blocks of 1ms */
        delay_cycles(cycles_per_ms);
 49e:	4b08      	ldr	r3, [pc, #32]	; (4c0 <delay_ms+0x24>)
 4a0:	681c      	ldr	r4, [r3, #0]


static inline void delay_cycles(
const uint32_t n) {
	if (n > 0) {
		SysTick->LOAD = n;
 4a2:	4a08      	ldr	r2, [pc, #32]	; (4c4 <delay_ms+0x28>)
		SysTick->VAL = 0;
 4a4:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
 4a6:	2180      	movs	r1, #128	; 0x80
 4a8:	0249      	lsls	r1, r1, #9
 * \brief Delay loop to delay at least n number of milliseconds
 *
 * \param n  Number of milliseconds to wait
 */
void delay_ms(uint32_t n) {
    while (n--) {
 4aa:	e006      	b.n	4ba <delay_ms+0x1e>



static inline void delay_cycles(
const uint32_t n) {
	if (n > 0) {
 4ac:	2c00      	cmp	r4, #0
 4ae:	d004      	beq.n	4ba <delay_ms+0x1e>
		SysTick->LOAD = n;
 4b0:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
 4b2:	6095      	str	r5, [r2, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
 4b4:	6813      	ldr	r3, [r2, #0]
 4b6:	420b      	tst	r3, r1
 4b8:	d0fc      	beq.n	4b4 <delay_ms+0x18>
 4ba:	3801      	subs	r0, #1
 4bc:	d2f6      	bcs.n	4ac <delay_ms+0x10>
        /* Devide up to blocks of 1ms */
        delay_cycles(cycles_per_ms);
    }
 4be:	bd30      	pop	{r4, r5, pc}
 4c0:	20000004 	.word	0x20000004
 4c4:	e000e010 	.word	0xe000e010

000004c8 <dmaInit>:
#include <util.h>

DMA_DESC_ALIGN DmacDescriptor dma_descriptors[12];
DMA_DESC_ALIGN DmacDescriptor dma_descriptors_wb[12];

void dmaInit() {
 4c8:	b570      	push	{r4, r5, r6, lr}
	memset(&dma_descriptors, 0, sizeof(dma_descriptors));
 4ca:	4d11      	ldr	r5, [pc, #68]	; (510 <dmaInit+0x48>)
 4cc:	22c0      	movs	r2, #192	; 0xc0
 4ce:	2100      	movs	r1, #0
 4d0:	0028      	movs	r0, r5
 4d2:	4e10      	ldr	r6, [pc, #64]	; (514 <dmaInit+0x4c>)
 4d4:	47b0      	blx	r6
	memset(&dma_descriptors_wb, 0, sizeof(dma_descriptors_wb));
 4d6:	4c10      	ldr	r4, [pc, #64]	; (518 <dmaInit+0x50>)
 4d8:	22c0      	movs	r2, #192	; 0xc0
 4da:	2100      	movs	r1, #0
 4dc:	0020      	movs	r0, r4
 4de:	47b0      	blx	r6

	PM->AHBMASK.reg |= PM_AHBMASK_DMAC;
 4e0:	4b0e      	ldr	r3, [pc, #56]	; (51c <dmaInit+0x54>)
 4e2:	6959      	ldr	r1, [r3, #20]
 4e4:	2220      	movs	r2, #32
 4e6:	430a      	orrs	r2, r1
 4e8:	615a      	str	r2, [r3, #20]
	PM->APBBMASK.reg |= PM_APBBMASK_DMAC;
 4ea:	69d9      	ldr	r1, [r3, #28]
 4ec:	2210      	movs	r2, #16
 4ee:	430a      	orrs	r2, r1
 4f0:	61da      	str	r2, [r3, #28]

	DMAC->CTRL.bit.DMAENABLE = 0;
 4f2:	4b0b      	ldr	r3, [pc, #44]	; (520 <dmaInit+0x58>)
 4f4:	881a      	ldrh	r2, [r3, #0]
 4f6:	2102      	movs	r1, #2
 4f8:	438a      	bics	r2, r1
 4fa:	801a      	strh	r2, [r3, #0]
	DMAC->CTRL.bit.SWRST = 1;
 4fc:	8819      	ldrh	r1, [r3, #0]
 4fe:	2201      	movs	r2, #1
 500:	430a      	orrs	r2, r1
 502:	801a      	strh	r2, [r3, #0]

	DMAC->BASEADDR.reg = (unsigned) &dma_descriptors;
 504:	635d      	str	r5, [r3, #52]	; 0x34
	DMAC->WRBADDR.reg = (unsigned) &dma_descriptors_wb;
 506:	639c      	str	r4, [r3, #56]	; 0x38

	DMAC->CTRL.reg = DMAC_CTRL_DMAENABLE | DMAC_CTRL_LVLEN(0xf);
 508:	4a06      	ldr	r2, [pc, #24]	; (524 <dmaInit+0x5c>)
 50a:	801a      	strh	r2, [r3, #0]
}
 50c:	bd70      	pop	{r4, r5, r6, pc}
 50e:	46c0      	nop			; (mov r8, r8)
 510:	20000520 	.word	0x20000520
 514:	00000665 	.word	0x00000665
 518:	20000460 	.word	0x20000460
 51c:	40000400 	.word	0x40000400
 520:	41004800 	.word	0x41004800
 524:	00000f02 	.word	0x00000f02

00000528 <sercomClockEnable>:
#include <util.h>

void sercomClockEnable(SercomId id, uint32_t clock_channel, u8_t divider) {
 528:	b570      	push	{r4, r5, r6, lr}
 52a:	0004      	movs	r4, r0
 52c:	000d      	movs	r5, r1
    // prevent this clock write from changing any other clocks
    PM->APBCMASK.reg |= 1 << (PM_APBCMASK_SERCOM0_Pos + id);
 52e:	480e      	ldr	r0, [pc, #56]	; (568 <sercomClockEnable+0x40>)
 530:	6a01      	ldr	r1, [r0, #32]
 532:	1ca6      	adds	r6, r4, #2
 534:	2301      	movs	r3, #1
 536:	40b3      	lsls	r3, r6
 538:	430b      	orrs	r3, r1
 53a:	6203      	str	r3, [r0, #32]


    if (clock_channel != 0) {
 53c:	2d00      	cmp	r5, #0
 53e:	d003      	beq.n	548 <sercomClockEnable+0x20>
        // clock generators 3-8 have 8 division factor bits - DIV[7:0]
        gclkEnable(clock_channel, GCLK_SOURCE_DFLL48M, divider);
 540:	2107      	movs	r1, #7
 542:	0028      	movs	r0, r5
 544:	4b09      	ldr	r3, [pc, #36]	; (56c <sercomClockEnable+0x44>)
 546:	4798      	blx	r3
    }


    // attach clock
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
 548:	0229      	lsls	r1, r5, #8
 54a:	23f0      	movs	r3, #240	; 0xf0
 54c:	011b      	lsls	r3, r3, #4
 54e:	4019      	ands	r1, r3
 550:	2380      	movs	r3, #128	; 0x80
 552:	01db      	lsls	r3, r3, #7
 554:	4319      	orrs	r1, r3
 556:	0023      	movs	r3, r4
 558:	3314      	adds	r3, #20
 55a:	243f      	movs	r4, #63	; 0x3f
 55c:	401c      	ands	r4, r3
 55e:	430c      	orrs	r4, r1
 560:	4b03      	ldr	r3, [pc, #12]	; (570 <sercomClockEnable+0x48>)
 562:	805c      	strh	r4, [r3, #2]
                        GCLK_CLKCTRL_GEN(clock_channel) |
                        GCLK_CLKCTRL_ID(SERCOM0_GCLK_ID_CORE + id);
}
 564:	bd70      	pop	{r4, r5, r6, pc}
 566:	46c0      	nop			; (mov r8, r8)
 568:	40000400 	.word	0x40000400
 56c:	0000044d 	.word	0x0000044d
 570:	40000c00 	.word	0x40000c00

00000574 <sercomReset>:
// my includes
#include <port.h>

//dma.c
inline static Sercom* sercom(SercomId id) {
	return (Sercom*) (0x42000800U + id * 1024);
 574:	0280      	lsls	r0, r0, #10
 576:	4b05      	ldr	r3, [pc, #20]	; (58c <sercomReset+0x18>)
 578:	469c      	mov	ip, r3
 57a:	4460      	add	r0, ip


void sercomReset(SercomId id) {
    sercom(id)->SPI.CTRLA.reg = SERCOM_SPI_CTRLA_SWRST;
 57c:	2301      	movs	r3, #1
 57e:	6003      	str	r3, [r0, #0]
    while(sercom(id)->SPI.CTRLA.reg & SERCOM_SPI_CTRLA_SWRST);
 580:	2201      	movs	r2, #1
 582:	6803      	ldr	r3, [r0, #0]
 584:	421a      	tst	r2, r3
 586:	d1fc      	bne.n	582 <sercomReset+0xe>
}
 588:	4770      	bx	lr
 58a:	46c0      	nop			; (mov r8, r8)
 58c:	42000800 	.word	0x42000800

00000590 <sercomSpiMasterInit>:
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
}


void sercomSpiMasterInit(SercomId id, u32_t dipo, u32_t dopo, bool cpol, bool cpha, u8_t baud) {
 590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 592:	464f      	mov	r7, r9
 594:	4646      	mov	r6, r8
 596:	b4c0      	push	{r6, r7}
 598:	0006      	movs	r6, r0
 59a:	4688      	mov	r8, r1
 59c:	0017      	movs	r7, r2
 59e:	001d      	movs	r5, r3
 5a0:	ab08      	add	r3, sp, #32
 5a2:	781c      	ldrb	r4, [r3, #0]
 5a4:	ab09      	add	r3, sp, #36	; 0x24
 5a6:	781b      	ldrb	r3, [r3, #0]
 5a8:	4699      	mov	r9, r3
    sercomReset(id);
 5aa:	4b19      	ldr	r3, [pc, #100]	; (610 <sercomSpiMasterInit+0x80>)
 5ac:	4798      	blx	r3
 5ae:	02b0      	lsls	r0, r6, #10
 5b0:	4b18      	ldr	r3, [pc, #96]	; (614 <sercomSpiMasterInit+0x84>)
 5b2:	469c      	mov	ip, r3
 5b4:	4460      	add	r0, ip
    sercom(id)->SPI.CTRLA.reg = SERCOM_SPI_CTRLA_MODE_SPI_MASTER;
 5b6:	230c      	movs	r3, #12
 5b8:	6003      	str	r3, [r0, #0]


    sercom(id)->SPI.CTRLB.reg
        = SERCOM_SPI_CTRLB_RXEN
 5ba:	4b17      	ldr	r3, [pc, #92]	; (618 <sercomSpiMasterInit+0x88>)
 5bc:	6043      	str	r3, [r0, #4]
		};
	}
}

static inline void SPI_sync(SercomId id) {
	while  (sercom(id)->SPI.SYNCBUSY.bit.CTRLB);
 5be:	69c3      	ldr	r3, [r0, #28]
 5c0:	075b      	lsls	r3, r3, #29
 5c2:	d4fc      	bmi.n	5be <sercomSpiMasterInit+0x2e>
          | SERCOM_SPI_CTRLB_SSDE;

    SPI_sync(id);

    sercom(id)->SPI.BAUD.reg = baud;
 5c4:	464b      	mov	r3, r9
 5c6:	7303      	strb	r3, [r0, #12]
 5c8:	69c3      	ldr	r3, [r0, #28]
 5ca:	075b      	lsls	r3, r3, #29
 5cc:	d4fc      	bmi.n	5c8 <sercomSpiMasterInit+0x38>


    sercom(id)->SPI.CTRLA.reg
        = SERCOM_SPI_CTRLA_ENABLE
          | SERCOM_SPI_CTRLA_MODE_SPI_MASTER
          | SERCOM_SPI_CTRLA_DIPO(dipo)
 5ce:	4643      	mov	r3, r8
 5d0:	0519      	lsls	r1, r3, #20
 5d2:	23c0      	movs	r3, #192	; 0xc0
 5d4:	039b      	lsls	r3, r3, #14
 5d6:	4019      	ands	r1, r3
 5d8:	000e      	movs	r6, r1
 5da:	0439      	lsls	r1, r7, #16
 5dc:	23c0      	movs	r3, #192	; 0xc0
 5de:	029b      	lsls	r3, r3, #10
 5e0:	4019      	ands	r1, r3
 5e2:	230e      	movs	r3, #14
 5e4:	000a      	movs	r2, r1
 5e6:	431a      	orrs	r2, r3
          | SERCOM_SPI_CTRLA_DOPO(dopo)
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
 5e8:	1e6b      	subs	r3, r5, #1
 5ea:	419d      	sbcs	r5, r3
 5ec:	076d      	lsls	r5, r5, #29
 5ee:	0031      	movs	r1, r6
 5f0:	4311      	orrs	r1, r2
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
 5f2:	1e63      	subs	r3, r4, #1
 5f4:	419c      	sbcs	r4, r3
 5f6:	0722      	lsls	r2, r4, #28
 5f8:	002c      	movs	r4, r5
 5fa:	430c      	orrs	r4, r1
 5fc:	4314      	orrs	r4, r2

    SPI_sync(id);


    sercom(id)->SPI.CTRLA.reg
        = SERCOM_SPI_CTRLA_ENABLE
 5fe:	6004      	str	r4, [r0, #0]
 600:	69c3      	ldr	r3, [r0, #28]
 602:	075b      	lsls	r3, r3, #29
 604:	d4fc      	bmi.n	600 <sercomSpiMasterInit+0x70>

    SPI_sync(id);



}
 606:	bc0c      	pop	{r2, r3}
 608:	4690      	mov	r8, r2
 60a:	4699      	mov	r9, r3
 60c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 60e:	46c0      	nop			; (mov r8, r8)
 610:	00000575 	.word	0x00000575
 614:	42000800 	.word	0x42000800
 618:	00020200 	.word	0x00020200

0000061c <__libc_init_array>:
 61c:	b570      	push	{r4, r5, r6, lr}
 61e:	4e0d      	ldr	r6, [pc, #52]	; (654 <__libc_init_array+0x38>)
 620:	4d0d      	ldr	r5, [pc, #52]	; (658 <__libc_init_array+0x3c>)
 622:	2400      	movs	r4, #0
 624:	1bad      	subs	r5, r5, r6
 626:	10ad      	asrs	r5, r5, #2
 628:	d005      	beq.n	636 <__libc_init_array+0x1a>
 62a:	00a3      	lsls	r3, r4, #2
 62c:	58f3      	ldr	r3, [r6, r3]
 62e:	3401      	adds	r4, #1
 630:	4798      	blx	r3
 632:	42a5      	cmp	r5, r4
 634:	d1f9      	bne.n	62a <__libc_init_array+0xe>
 636:	f000 f8f7 	bl	828 <_init>
 63a:	4e08      	ldr	r6, [pc, #32]	; (65c <__libc_init_array+0x40>)
 63c:	4d08      	ldr	r5, [pc, #32]	; (660 <__libc_init_array+0x44>)
 63e:	2400      	movs	r4, #0
 640:	1bad      	subs	r5, r5, r6
 642:	10ad      	asrs	r5, r5, #2
 644:	d005      	beq.n	652 <__libc_init_array+0x36>
 646:	00a3      	lsls	r3, r4, #2
 648:	58f3      	ldr	r3, [r6, r3]
 64a:	3401      	adds	r4, #1
 64c:	4798      	blx	r3
 64e:	42a5      	cmp	r5, r4
 650:	d1f9      	bne.n	646 <__libc_init_array+0x2a>
 652:	bd70      	pop	{r4, r5, r6, pc}
 654:	00000834 	.word	0x00000834
 658:	00000834 	.word	0x00000834
 65c:	00000834 	.word	0x00000834
 660:	0000083c 	.word	0x0000083c

00000664 <memset>:
 664:	b570      	push	{r4, r5, r6, lr}
 666:	0783      	lsls	r3, r0, #30
 668:	d03f      	beq.n	6ea <memset+0x86>
 66a:	1e54      	subs	r4, r2, #1
 66c:	2a00      	cmp	r2, #0
 66e:	d03b      	beq.n	6e8 <memset+0x84>
 670:	b2ce      	uxtb	r6, r1
 672:	0003      	movs	r3, r0
 674:	2503      	movs	r5, #3
 676:	e003      	b.n	680 <memset+0x1c>
 678:	1e62      	subs	r2, r4, #1
 67a:	2c00      	cmp	r4, #0
 67c:	d034      	beq.n	6e8 <memset+0x84>
 67e:	0014      	movs	r4, r2
 680:	3301      	adds	r3, #1
 682:	1e5a      	subs	r2, r3, #1
 684:	7016      	strb	r6, [r2, #0]
 686:	422b      	tst	r3, r5
 688:	d1f6      	bne.n	678 <memset+0x14>
 68a:	2c03      	cmp	r4, #3
 68c:	d924      	bls.n	6d8 <memset+0x74>
 68e:	25ff      	movs	r5, #255	; 0xff
 690:	400d      	ands	r5, r1
 692:	022a      	lsls	r2, r5, #8
 694:	4315      	orrs	r5, r2
 696:	042a      	lsls	r2, r5, #16
 698:	4315      	orrs	r5, r2
 69a:	2c0f      	cmp	r4, #15
 69c:	d911      	bls.n	6c2 <memset+0x5e>
 69e:	0026      	movs	r6, r4
 6a0:	3e10      	subs	r6, #16
 6a2:	0936      	lsrs	r6, r6, #4
 6a4:	3601      	adds	r6, #1
 6a6:	0136      	lsls	r6, r6, #4
 6a8:	001a      	movs	r2, r3
 6aa:	199b      	adds	r3, r3, r6
 6ac:	6015      	str	r5, [r2, #0]
 6ae:	6055      	str	r5, [r2, #4]
 6b0:	6095      	str	r5, [r2, #8]
 6b2:	60d5      	str	r5, [r2, #12]
 6b4:	3210      	adds	r2, #16
 6b6:	4293      	cmp	r3, r2
 6b8:	d1f8      	bne.n	6ac <memset+0x48>
 6ba:	220f      	movs	r2, #15
 6bc:	4014      	ands	r4, r2
 6be:	2c03      	cmp	r4, #3
 6c0:	d90a      	bls.n	6d8 <memset+0x74>
 6c2:	1f26      	subs	r6, r4, #4
 6c4:	08b6      	lsrs	r6, r6, #2
 6c6:	3601      	adds	r6, #1
 6c8:	00b6      	lsls	r6, r6, #2
 6ca:	001a      	movs	r2, r3
 6cc:	199b      	adds	r3, r3, r6
 6ce:	c220      	stmia	r2!, {r5}
 6d0:	4293      	cmp	r3, r2
 6d2:	d1fc      	bne.n	6ce <memset+0x6a>
 6d4:	2203      	movs	r2, #3
 6d6:	4014      	ands	r4, r2
 6d8:	2c00      	cmp	r4, #0
 6da:	d005      	beq.n	6e8 <memset+0x84>
 6dc:	b2c9      	uxtb	r1, r1
 6de:	191c      	adds	r4, r3, r4
 6e0:	7019      	strb	r1, [r3, #0]
 6e2:	3301      	adds	r3, #1
 6e4:	429c      	cmp	r4, r3
 6e6:	d1fb      	bne.n	6e0 <memset+0x7c>
 6e8:	bd70      	pop	{r4, r5, r6, pc}
 6ea:	0014      	movs	r4, r2
 6ec:	0003      	movs	r3, r0
 6ee:	e7cc      	b.n	68a <memset+0x26>

000006f0 <register_fini>:
 6f0:	4b03      	ldr	r3, [pc, #12]	; (700 <register_fini+0x10>)
 6f2:	b510      	push	{r4, lr}
 6f4:	2b00      	cmp	r3, #0
 6f6:	d002      	beq.n	6fe <register_fini+0xe>
 6f8:	4802      	ldr	r0, [pc, #8]	; (704 <register_fini+0x14>)
 6fa:	f000 f805 	bl	708 <atexit>
 6fe:	bd10      	pop	{r4, pc}
 700:	00000000 	.word	0x00000000
 704:	00000719 	.word	0x00000719

00000708 <atexit>:
 708:	b510      	push	{r4, lr}
 70a:	0001      	movs	r1, r0
 70c:	2300      	movs	r3, #0
 70e:	2200      	movs	r2, #0
 710:	2000      	movs	r0, #0
 712:	f000 f81b 	bl	74c <__register_exitproc>
 716:	bd10      	pop	{r4, pc}

00000718 <__libc_fini_array>:
 718:	b570      	push	{r4, r5, r6, lr}
 71a:	4b09      	ldr	r3, [pc, #36]	; (740 <__libc_fini_array+0x28>)
 71c:	4c09      	ldr	r4, [pc, #36]	; (744 <__libc_fini_array+0x2c>)
 71e:	1ae4      	subs	r4, r4, r3
 720:	10a4      	asrs	r4, r4, #2
 722:	d009      	beq.n	738 <__libc_fini_array+0x20>
 724:	4a08      	ldr	r2, [pc, #32]	; (748 <__libc_fini_array+0x30>)
 726:	18a5      	adds	r5, r4, r2
 728:	00ad      	lsls	r5, r5, #2
 72a:	18ed      	adds	r5, r5, r3
 72c:	682b      	ldr	r3, [r5, #0]
 72e:	3c01      	subs	r4, #1
 730:	4798      	blx	r3
 732:	3d04      	subs	r5, #4
 734:	2c00      	cmp	r4, #0
 736:	d1f9      	bne.n	72c <__libc_fini_array+0x14>
 738:	f000 f880 	bl	83c <_fini>
 73c:	bd70      	pop	{r4, r5, r6, pc}
 73e:	46c0      	nop			; (mov r8, r8)
 740:	00000848 	.word	0x00000848
 744:	0000084c 	.word	0x0000084c
 748:	3fffffff 	.word	0x3fffffff

0000074c <__register_exitproc>:
 74c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 74e:	4644      	mov	r4, r8
 750:	465f      	mov	r7, fp
 752:	4656      	mov	r6, sl
 754:	464d      	mov	r5, r9
 756:	469b      	mov	fp, r3
 758:	4b2f      	ldr	r3, [pc, #188]	; (818 <__register_exitproc+0xcc>)
 75a:	b4f0      	push	{r4, r5, r6, r7}
 75c:	681c      	ldr	r4, [r3, #0]
 75e:	23a4      	movs	r3, #164	; 0xa4
 760:	005b      	lsls	r3, r3, #1
 762:	0005      	movs	r5, r0
 764:	58e0      	ldr	r0, [r4, r3]
 766:	000e      	movs	r6, r1
 768:	4690      	mov	r8, r2
 76a:	2800      	cmp	r0, #0
 76c:	d04b      	beq.n	806 <__register_exitproc+0xba>
 76e:	6843      	ldr	r3, [r0, #4]
 770:	2b1f      	cmp	r3, #31
 772:	dc0d      	bgt.n	790 <__register_exitproc+0x44>
 774:	1c5c      	adds	r4, r3, #1
 776:	2d00      	cmp	r5, #0
 778:	d121      	bne.n	7be <__register_exitproc+0x72>
 77a:	3302      	adds	r3, #2
 77c:	009b      	lsls	r3, r3, #2
 77e:	6044      	str	r4, [r0, #4]
 780:	501e      	str	r6, [r3, r0]
 782:	2000      	movs	r0, #0
 784:	bc3c      	pop	{r2, r3, r4, r5}
 786:	4690      	mov	r8, r2
 788:	4699      	mov	r9, r3
 78a:	46a2      	mov	sl, r4
 78c:	46ab      	mov	fp, r5
 78e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 790:	4b22      	ldr	r3, [pc, #136]	; (81c <__register_exitproc+0xd0>)
 792:	2b00      	cmp	r3, #0
 794:	d03c      	beq.n	810 <__register_exitproc+0xc4>
 796:	20c8      	movs	r0, #200	; 0xc8
 798:	0040      	lsls	r0, r0, #1
 79a:	e000      	b.n	79e <__register_exitproc+0x52>
 79c:	bf00      	nop
 79e:	2800      	cmp	r0, #0
 7a0:	d036      	beq.n	810 <__register_exitproc+0xc4>
 7a2:	22a4      	movs	r2, #164	; 0xa4
 7a4:	2300      	movs	r3, #0
 7a6:	0052      	lsls	r2, r2, #1
 7a8:	58a1      	ldr	r1, [r4, r2]
 7aa:	6043      	str	r3, [r0, #4]
 7ac:	6001      	str	r1, [r0, #0]
 7ae:	50a0      	str	r0, [r4, r2]
 7b0:	3240      	adds	r2, #64	; 0x40
 7b2:	5083      	str	r3, [r0, r2]
 7b4:	3204      	adds	r2, #4
 7b6:	5083      	str	r3, [r0, r2]
 7b8:	2401      	movs	r4, #1
 7ba:	2d00      	cmp	r5, #0
 7bc:	d0dd      	beq.n	77a <__register_exitproc+0x2e>
 7be:	009a      	lsls	r2, r3, #2
 7c0:	4691      	mov	r9, r2
 7c2:	4481      	add	r9, r0
 7c4:	4642      	mov	r2, r8
 7c6:	2188      	movs	r1, #136	; 0x88
 7c8:	464f      	mov	r7, r9
 7ca:	507a      	str	r2, [r7, r1]
 7cc:	22c4      	movs	r2, #196	; 0xc4
 7ce:	0052      	lsls	r2, r2, #1
 7d0:	4690      	mov	r8, r2
 7d2:	4480      	add	r8, r0
 7d4:	4642      	mov	r2, r8
 7d6:	3987      	subs	r1, #135	; 0x87
 7d8:	4099      	lsls	r1, r3
 7da:	6812      	ldr	r2, [r2, #0]
 7dc:	468a      	mov	sl, r1
 7de:	430a      	orrs	r2, r1
 7e0:	4694      	mov	ip, r2
 7e2:	4642      	mov	r2, r8
 7e4:	4661      	mov	r1, ip
 7e6:	6011      	str	r1, [r2, #0]
 7e8:	2284      	movs	r2, #132	; 0x84
 7ea:	4649      	mov	r1, r9
 7ec:	465f      	mov	r7, fp
 7ee:	0052      	lsls	r2, r2, #1
 7f0:	508f      	str	r7, [r1, r2]
 7f2:	2d02      	cmp	r5, #2
 7f4:	d1c1      	bne.n	77a <__register_exitproc+0x2e>
 7f6:	0002      	movs	r2, r0
 7f8:	4655      	mov	r5, sl
 7fa:	328d      	adds	r2, #141	; 0x8d
 7fc:	32ff      	adds	r2, #255	; 0xff
 7fe:	6811      	ldr	r1, [r2, #0]
 800:	430d      	orrs	r5, r1
 802:	6015      	str	r5, [r2, #0]
 804:	e7b9      	b.n	77a <__register_exitproc+0x2e>
 806:	0020      	movs	r0, r4
 808:	304d      	adds	r0, #77	; 0x4d
 80a:	30ff      	adds	r0, #255	; 0xff
 80c:	50e0      	str	r0, [r4, r3]
 80e:	e7ae      	b.n	76e <__register_exitproc+0x22>
 810:	2001      	movs	r0, #1
 812:	4240      	negs	r0, r0
 814:	e7b6      	b.n	784 <__register_exitproc+0x38>
 816:	46c0      	nop			; (mov r8, r8)
 818:	00000824 	.word	0x00000824
 81c:	00000000 	.word	0x00000000
 820:	00000043 	.word	0x00000043

00000824 <_global_impure_ptr>:
 824:	20000010                                ... 

00000828 <_init>:
 828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 82a:	46c0      	nop			; (mov r8, r8)
 82c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 82e:	bc08      	pop	{r3}
 830:	469e      	mov	lr, r3
 832:	4770      	bx	lr

00000834 <__init_array_start>:
 834:	000006f1 	.word	0x000006f1

00000838 <__frame_dummy_init_array_entry>:
 838:	000000dd                                ....

0000083c <_fini>:
 83c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 83e:	46c0      	nop			; (mov r8, r8)
 840:	bcf8      	pop	{r3, r4, r5, r6, r7}
 842:	bc08      	pop	{r3}
 844:	469e      	mov	lr, r3
 846:	4770      	bx	lr

00000848 <__fini_array_start>:
 848:	000000b5 	.word	0x000000b5
