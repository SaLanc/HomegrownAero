
DasAltimeter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000017dc  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000438  20000000  000017dc  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000001a4  20000440  00001c20  00020440  2**4
                  ALLOC
  3 .stack        00002004  200005e4  00001dc4  00020440  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020438  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020460  2**0
                  CONTENTS, READONLY
  6 .debug_info   00010c89  00000000  00000000  000204b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000013d9  00000000  00000000  00031142  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00001165  00000000  00000000  0003251b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000240  00000000  00000000  00033680  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000001d0  00000000  00000000  000338c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00013cf8  00000000  00000000  00033a90  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000532f  00000000  00000000  00047788  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0007187f  00000000  00000000  0004cab7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  0000076c  00000000  00000000  000be338  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	200025e8 	.word	0x200025e8
       4:	00000119 	.word	0x00000119
       8:	00000115 	.word	0x00000115
       c:	00000115 	.word	0x00000115
	...
      2c:	00000115 	.word	0x00000115
	...
      38:	00000115 	.word	0x00000115
      3c:	00000115 	.word	0x00000115
      40:	00000115 	.word	0x00000115
      44:	00000115 	.word	0x00000115
      48:	00000115 	.word	0x00000115
      4c:	00000115 	.word	0x00000115
      50:	00000115 	.word	0x00000115
      54:	00000115 	.word	0x00000115
      58:	00000115 	.word	0x00000115
      5c:	00000115 	.word	0x00000115
      60:	00000115 	.word	0x00000115
      64:	00000115 	.word	0x00000115
      68:	00000115 	.word	0x00000115
      6c:	00000115 	.word	0x00000115
      70:	00000115 	.word	0x00000115
      74:	00000115 	.word	0x00000115
      78:	00000115 	.word	0x00000115
      7c:	00000115 	.word	0x00000115
      80:	00000115 	.word	0x00000115
      84:	00000115 	.word	0x00000115
      88:	00000115 	.word	0x00000115
      8c:	00000115 	.word	0x00000115
      90:	00000115 	.word	0x00000115
	...
      9c:	00000115 	.word	0x00000115
      a0:	00000115 	.word	0x00000115
      a4:	00000115 	.word	0x00000115
      a8:	00000115 	.word	0x00000115
      ac:	00000115 	.word	0x00000115
      b0:	00000000 	.word	0x00000000

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000440 	.word	0x20000440
      d4:	00000000 	.word	0x00000000
      d8:	000017dc 	.word	0x000017dc

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000444 	.word	0x20000444
     108:	000017dc 	.word	0x000017dc
     10c:	000017dc 	.word	0x000017dc
     110:	00000000 	.word	0x00000000

00000114 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     114:	e7fe      	b.n	114 <Dummy_Handler>
     116:	46c0      	nop			; (mov r8, r8)

00000118 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
     118:	b570      	push	{r4, r5, r6, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
     11a:	4b2e      	ldr	r3, [pc, #184]	; (1d4 <Reset_Handler+0xbc>)
     11c:	4a2e      	ldr	r2, [pc, #184]	; (1d8 <Reset_Handler+0xc0>)
     11e:	429a      	cmp	r2, r3
     120:	d003      	beq.n	12a <Reset_Handler+0x12>
                for (; pDest < &_erelocate;) {
     122:	4b2e      	ldr	r3, [pc, #184]	; (1dc <Reset_Handler+0xc4>)
     124:	4a2b      	ldr	r2, [pc, #172]	; (1d4 <Reset_Handler+0xbc>)
     126:	429a      	cmp	r2, r3
     128:	d304      	bcc.n	134 <Reset_Handler+0x1c>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     12a:	4b2d      	ldr	r3, [pc, #180]	; (1e0 <Reset_Handler+0xc8>)
     12c:	4a2d      	ldr	r2, [pc, #180]	; (1e4 <Reset_Handler+0xcc>)
     12e:	429a      	cmp	r2, r3
     130:	d310      	bcc.n	154 <Reset_Handler+0x3c>
     132:	e01e      	b.n	172 <Reset_Handler+0x5a>
     134:	4a2c      	ldr	r2, [pc, #176]	; (1e8 <Reset_Handler+0xd0>)
     136:	4b29      	ldr	r3, [pc, #164]	; (1dc <Reset_Handler+0xc4>)
     138:	3303      	adds	r3, #3
     13a:	1a9b      	subs	r3, r3, r2
     13c:	089b      	lsrs	r3, r3, #2
     13e:	3301      	adds	r3, #1
     140:	009b      	lsls	r3, r3, #2
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
     142:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
     144:	4823      	ldr	r0, [pc, #140]	; (1d4 <Reset_Handler+0xbc>)
     146:	4924      	ldr	r1, [pc, #144]	; (1d8 <Reset_Handler+0xc0>)
     148:	588c      	ldr	r4, [r1, r2]
     14a:	5084      	str	r4, [r0, r2]
     14c:	3204      	adds	r2, #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
     14e:	429a      	cmp	r2, r3
     150:	d1fa      	bne.n	148 <Reset_Handler+0x30>
     152:	e7ea      	b.n	12a <Reset_Handler+0x12>
     154:	4a25      	ldr	r2, [pc, #148]	; (1ec <Reset_Handler+0xd4>)
     156:	4b22      	ldr	r3, [pc, #136]	; (1e0 <Reset_Handler+0xc8>)
     158:	3303      	adds	r3, #3
     15a:	1a9b      	subs	r3, r3, r2
     15c:	089b      	lsrs	r3, r3, #2
     15e:	3301      	adds	r3, #1
     160:	009b      	lsls	r3, r3, #2
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     162:	2200      	movs	r2, #0
                *pDest++ = 0;
     164:	481f      	ldr	r0, [pc, #124]	; (1e4 <Reset_Handler+0xcc>)
     166:	2100      	movs	r1, #0
     168:	1814      	adds	r4, r2, r0
     16a:	6021      	str	r1, [r4, #0]
     16c:	3204      	adds	r2, #4
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     16e:	429a      	cmp	r2, r3
     170:	d1fa      	bne.n	168 <Reset_Handler+0x50>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     172:	4a1f      	ldr	r2, [pc, #124]	; (1f0 <Reset_Handler+0xd8>)
     174:	21ff      	movs	r1, #255	; 0xff
     176:	4b1f      	ldr	r3, [pc, #124]	; (1f4 <Reset_Handler+0xdc>)
     178:	438b      	bics	r3, r1
     17a:	6093      	str	r3, [r2, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     17c:	39fd      	subs	r1, #253	; 0xfd
     17e:	2390      	movs	r3, #144	; 0x90
     180:	005b      	lsls	r3, r3, #1
     182:	4a1d      	ldr	r2, [pc, #116]	; (1f8 <Reset_Handler+0xe0>)
     184:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     186:	481d      	ldr	r0, [pc, #116]	; (1fc <Reset_Handler+0xe4>)
     188:	78c3      	ldrb	r3, [r0, #3]
     18a:	2403      	movs	r4, #3
     18c:	43a3      	bics	r3, r4
     18e:	2202      	movs	r2, #2
     190:	4313      	orrs	r3, r2
     192:	70c3      	strb	r3, [r0, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     194:	78c3      	ldrb	r3, [r0, #3]
     196:	260c      	movs	r6, #12
     198:	43b3      	bics	r3, r6
     19a:	2108      	movs	r1, #8
     19c:	430b      	orrs	r3, r1
     19e:	70c3      	strb	r3, [r0, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
     1a0:	4b17      	ldr	r3, [pc, #92]	; (200 <Reset_Handler+0xe8>)
     1a2:	7b98      	ldrb	r0, [r3, #14]
     1a4:	2530      	movs	r5, #48	; 0x30
     1a6:	43a8      	bics	r0, r5
     1a8:	0005      	movs	r5, r0
     1aa:	2020      	movs	r0, #32
     1ac:	4328      	orrs	r0, r5
     1ae:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     1b0:	7b98      	ldrb	r0, [r3, #14]
     1b2:	43b0      	bics	r0, r6
     1b4:	4301      	orrs	r1, r0
     1b6:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     1b8:	7b99      	ldrb	r1, [r3, #14]
     1ba:	43a1      	bics	r1, r4
     1bc:	430a      	orrs	r2, r1
     1be:	739a      	strb	r2, [r3, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
     1c0:	4a10      	ldr	r2, [pc, #64]	; (204 <Reset_Handler+0xec>)
     1c2:	6851      	ldr	r1, [r2, #4]
     1c4:	2380      	movs	r3, #128	; 0x80
     1c6:	430b      	orrs	r3, r1
     1c8:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
     1ca:	4b0f      	ldr	r3, [pc, #60]	; (208 <Reset_Handler+0xf0>)
     1cc:	4798      	blx	r3

        /* Branch to main function */
        main();
     1ce:	4b0f      	ldr	r3, [pc, #60]	; (20c <Reset_Handler+0xf4>)
     1d0:	4798      	blx	r3
     1d2:	e7fe      	b.n	1d2 <Reset_Handler+0xba>
     1d4:	20000000 	.word	0x20000000
     1d8:	000017dc 	.word	0x000017dc
     1dc:	20000438 	.word	0x20000438
     1e0:	200005e4 	.word	0x200005e4
     1e4:	20000440 	.word	0x20000440
     1e8:	20000004 	.word	0x20000004
     1ec:	20000444 	.word	0x20000444
     1f0:	e000ed00 	.word	0xe000ed00
     1f4:	00000000 	.word	0x00000000
     1f8:	41007000 	.word	0x41007000
     1fc:	41005000 	.word	0x41005000
     200:	41004800 	.word	0x41004800
     204:	41004000 	.word	0x41004000
     208:	00001431 	.word	0x00001431
     20c:	00000379 	.word	0x00000379

00000210 <SystemInit>:
 *         Initialize the System and update the SystemCoreClock variable.
 */
void SystemInit(void)
{
	// Keep the default device state after reset
	SystemCoreClock = __SYSTEM_CLOCK;
     210:	4a01      	ldr	r2, [pc, #4]	; (218 <SystemInit+0x8>)
     212:	4b02      	ldr	r3, [pc, #8]	; (21c <SystemInit+0xc>)
     214:	601a      	str	r2, [r3, #0]
	return;
}
     216:	4770      	bx	lr
     218:	000f4240 	.word	0x000f4240
     21c:	20000000 	.word	0x20000000

00000220 <init>:
#include <boardDefines.h>




void init() {
     220:	b5f0      	push	{r4, r5, r6, r7, lr}
     222:	465f      	mov	r7, fp
     224:	4656      	mov	r6, sl
     226:	464d      	mov	r5, r9
     228:	4644      	mov	r4, r8
     22a:	b4f0      	push	{r4, r5, r6, r7}
     22c:	b083      	sub	sp, #12
    SystemInit();
     22e:	4b48      	ldr	r3, [pc, #288]	; (350 <init+0x130>)
     230:	4798      	blx	r3
    GclkInit();
     232:	4b48      	ldr	r3, [pc, #288]	; (354 <init+0x134>)
     234:	4798      	blx	r3
    delayInit();
     236:	4b48      	ldr	r3, [pc, #288]	; (358 <init+0x138>)
     238:	4798      	blx	r3
    adcInit();
     23a:	4b48      	ldr	r3, [pc, #288]	; (35c <init+0x13c>)
     23c:	4798      	blx	r3
    dmaInit();
     23e:	4b48      	ldr	r3, [pc, #288]	; (360 <init+0x140>)
     240:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     242:	4b48      	ldr	r3, [pc, #288]	; (364 <init+0x144>)
     244:	2240      	movs	r2, #64	; 0x40
     246:	601a      	str	r2, [r3, #0]
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     248:	21c1      	movs	r1, #193	; 0xc1
     24a:	0089      	lsls	r1, r1, #2
     24c:	5858      	ldr	r0, [r3, r1]
     24e:	4a46      	ldr	r2, [pc, #280]	; (368 <init+0x148>)
     250:	4002      	ands	r2, r0
     252:	505a      	str	r2, [r3, r1]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     254:	4b45      	ldr	r3, [pc, #276]	; (36c <init+0x14c>)
     256:	205b      	movs	r0, #91	; 0x5b
     258:	5c19      	ldrb	r1, [r3, r0]
     25a:	2201      	movs	r2, #1
     25c:	4391      	bics	r1, r2
     25e:	5419      	strb	r1, [r3, r0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     260:	2180      	movs	r1, #128	; 0x80
     262:	0509      	lsls	r1, r1, #20
     264:	6099      	str	r1, [r3, #8]

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     266:	2433      	movs	r4, #51	; 0x33
     268:	5d18      	ldrb	r0, [r3, r4]
     26a:	270f      	movs	r7, #15
     26c:	43b8      	bics	r0, r7
     26e:	2101      	movs	r1, #1
     270:	4308      	orrs	r0, r1
     272:	5518      	strb	r0, [r3, r4]
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     274:	3413      	adds	r4, #19
     276:	5d18      	ldrb	r0, [r3, r4]
     278:	4308      	orrs	r0, r1
     27a:	5518      	strb	r0, [r3, r4]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     27c:	254c      	movs	r5, #76	; 0x4c
     27e:	5d58      	ldrb	r0, [r3, r5]
     280:	4390      	bics	r0, r2
     282:	5558      	strb	r0, [r3, r5]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     284:	2080      	movs	r0, #128	; 0x80
     286:	0140      	lsls	r0, r0, #5
     288:	6098      	str	r0, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     28a:	204d      	movs	r0, #77	; 0x4d
     28c:	4684      	mov	ip, r0
     28e:	5c18      	ldrb	r0, [r3, r0]
     290:	4390      	bics	r0, r2
     292:	4664      	mov	r4, ip
     294:	5518      	strb	r0, [r3, r4]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     296:	2080      	movs	r0, #128	; 0x80
     298:	0180      	lsls	r0, r0, #6
     29a:	6098      	str	r0, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     29c:	204f      	movs	r0, #79	; 0x4f
     29e:	5c1c      	ldrb	r4, [r3, r0]
     2a0:	4394      	bics	r4, r2
     2a2:	541c      	strb	r4, [r3, r0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     2a4:	5c1c      	ldrb	r4, [r3, r0]
     2a6:	2602      	movs	r6, #2
     2a8:	46b3      	mov	fp, r6
     2aa:	465e      	mov	r6, fp
     2ac:	4334      	orrs	r4, r6
     2ae:	541c      	strb	r4, [r3, r0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     2b0:	2480      	movs	r4, #128	; 0x80
     2b2:	0224      	lsls	r4, r4, #8
     2b4:	605c      	str	r4, [r3, #4]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     2b6:	2437      	movs	r4, #55	; 0x37
     2b8:	46a1      	mov	r9, r4
     2ba:	5d1c      	ldrb	r4, [r3, r4]
     2bc:	260f      	movs	r6, #15
     2be:	46b0      	mov	r8, r6
     2c0:	4034      	ands	r4, r6
     2c2:	2620      	movs	r6, #32
     2c4:	46b2      	mov	sl, r6
     2c6:	4656      	mov	r6, sl
     2c8:	4334      	orrs	r4, r6
     2ca:	464e      	mov	r6, r9
     2cc:	559c      	strb	r4, [r3, r6]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     2ce:	5c1c      	ldrb	r4, [r3, r0]
     2d0:	430c      	orrs	r4, r1
     2d2:	541c      	strb	r4, [r3, r0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     2d4:	3819      	subs	r0, #25
     2d6:	5c1c      	ldrb	r4, [r3, r0]
     2d8:	4646      	mov	r6, r8
     2da:	4034      	ands	r4, r6
     2dc:	4656      	mov	r6, sl
     2de:	4334      	orrs	r4, r6
     2e0:	541c      	strb	r4, [r3, r0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     2e2:	4664      	mov	r4, ip
     2e4:	5d1c      	ldrb	r4, [r3, r4]
     2e6:	430c      	orrs	r4, r1
     2e8:	4666      	mov	r6, ip
     2ea:	559c      	strb	r4, [r3, r6]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     2ec:	5c1c      	ldrb	r4, [r3, r0]
     2ee:	43bc      	bics	r4, r7
     2f0:	465e      	mov	r6, fp
     2f2:	4326      	orrs	r6, r4
     2f4:	541e      	strb	r6, [r3, r0]
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     2f6:	5d58      	ldrb	r0, [r3, r5]
     2f8:	4301      	orrs	r1, r0
     2fa:	5559      	strb	r1, [r3, r5]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     2fc:	2154      	movs	r1, #84	; 0x54
     2fe:	5c58      	ldrb	r0, [r3, r1]
     300:	4390      	bics	r0, r2
     302:	5458      	strb	r0, [r3, r1]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     304:	2080      	movs	r0, #128	; 0x80
     306:	0340      	lsls	r0, r0, #13
     308:	6098      	str	r0, [r3, #8]




inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     30a:	6198      	str	r0, [r3, #24]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     30c:	5c58      	ldrb	r0, [r3, r1]
     30e:	4390      	bics	r0, r2
     310:	5458      	strb	r0, [r3, r1]
     312:	3906      	subs	r1, #6
     314:	5c58      	ldrb	r0, [r3, r1]
     316:	4390      	bics	r0, r2
     318:	5458      	strb	r0, [r3, r1]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     31a:	2080      	movs	r0, #128	; 0x80
     31c:	01c0      	lsls	r0, r0, #7
     31e:	6098      	str	r0, [r3, #8]




inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     320:	6198      	str	r0, [r3, #24]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     322:	5c58      	ldrb	r0, [r3, r1]
     324:	4390      	bics	r0, r2
     326:	5458      	strb	r0, [r3, r1]
    pinOut(cs_baro);
    pinHigh(cs_baro);
    pinGpio(cs_baro);


    sercomClockEnable(SPI1, 3, 4);
     328:	2204      	movs	r2, #4
     32a:	394b      	subs	r1, #75	; 0x4b
     32c:	2002      	movs	r0, #2
     32e:	4b10      	ldr	r3, [pc, #64]	; (370 <init+0x150>)
     330:	4798      	blx	r3
    sercomSpiMasterInit(SPI1, 3, 0, 0, 0, 0x00);
     332:	2300      	movs	r3, #0
     334:	9301      	str	r3, [sp, #4]
     336:	9300      	str	r3, [sp, #0]
     338:	2200      	movs	r2, #0
     33a:	2103      	movs	r1, #3
     33c:	2002      	movs	r0, #2
     33e:	4c0d      	ldr	r4, [pc, #52]	; (374 <init+0x154>)
     340:	47a0      	blx	r4

}
     342:	b003      	add	sp, #12
     344:	bc3c      	pop	{r2, r3, r4, r5}
     346:	4690      	mov	r8, r2
     348:	4699      	mov	r9, r3
     34a:	46a2      	mov	sl, r4
     34c:	46ab      	mov	fp, r5
     34e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     350:	00000211 	.word	0x00000211
     354:	00000591 	.word	0x00000591
     358:	00000661 	.word	0x00000661
     35c:	00000491 	.word	0x00000491
     360:	000006d9 	.word	0x000006d9
     364:	e000e100 	.word	0xe000e100
     368:	ff00ffff 	.word	0xff00ffff
     36c:	41004400 	.word	0x41004400
     370:	00000a5d 	.word	0x00000a5d
     374:	00000ac5 	.word	0x00000ac5

00000378 <main>:


int main(void) {
     378:	b5f0      	push	{r4, r5, r6, r7, lr}
     37a:	b09f      	sub	sp, #124	; 0x7c

    init();
     37c:	4b33      	ldr	r3, [pc, #204]	; (44c <main+0xd4>)
     37e:	4798      	blx	r3

    Altimeter my_altimeter;

    initMS5803Barometer(&my_altimeter.myBarometer);
     380:	a806      	add	r0, sp, #24
     382:	4b33      	ldr	r3, [pc, #204]	; (450 <main+0xd8>)
     384:	4798      	blx	r3

    volatile float batV = 0;
     386:	2300      	movs	r3, #0
     388:	9305      	str	r3, [sp, #20]

    volatile uint8_t rData;
    volatile uint8_t rData2;
    volatile uint8_t rData3;
    volatile uint8_t rData4;
    volatile long counter = 0;
     38a:	2300      	movs	r3, #0
     38c:	9303      	str	r3, [sp, #12]

    while (1) {

        counter++;
        pinToggle(LedPin);
        batV = (0.0020676 * adc_read(senseBat));
     38e:	4b31      	ldr	r3, [pc, #196]	; (454 <main+0xdc>)
     390:	681a      	ldr	r2, [r3, #0]
     392:	9200      	str	r2, [sp, #0]
     394:	685b      	ldr	r3, [r3, #4]
     396:	9301      	str	r3, [sp, #4]
     398:	4c2f      	ldr	r4, [pc, #188]	; (458 <main+0xe0>)

    volatile float accelX;

    while (1) {

        counter++;
     39a:	9b03      	ldr	r3, [sp, #12]
     39c:	3301      	adds	r3, #1
     39e:	9303      	str	r3, [sp, #12]
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
}


inline static void pinToggle(Pin p) {
    PORT->Group[p.group].OUTTGL.reg = (1<<p.pin);
     3a0:	4f2e      	ldr	r7, [pc, #184]	; (45c <main+0xe4>)
     3a2:	2380      	movs	r3, #128	; 0x80
     3a4:	051b      	lsls	r3, r3, #20
     3a6:	61fb      	str	r3, [r7, #28]
        pinToggle(LedPin);
        batV = (0.0020676 * adc_read(senseBat));
     3a8:	9800      	ldr	r0, [sp, #0]
     3aa:	9901      	ldr	r1, [sp, #4]
     3ac:	47a0      	blx	r4
     3ae:	4b2c      	ldr	r3, [pc, #176]	; (460 <main+0xe8>)
     3b0:	4798      	blx	r3
     3b2:	4a2c      	ldr	r2, [pc, #176]	; (464 <main+0xec>)
     3b4:	4b2c      	ldr	r3, [pc, #176]	; (468 <main+0xf0>)
     3b6:	4d2d      	ldr	r5, [pc, #180]	; (46c <main+0xf4>)
     3b8:	47a8      	blx	r5
     3ba:	4b2d      	ldr	r3, [pc, #180]	; (470 <main+0xf8>)
     3bc:	4798      	blx	r3
     3be:	9005      	str	r0, [sp, #20]

        sampleTick(&my_altimeter);
     3c0:	a806      	add	r0, sp, #24
     3c2:	4b2c      	ldr	r3, [pc, #176]	; (474 <main+0xfc>)
     3c4:	4798      	blx	r3
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     3c6:	2580      	movs	r5, #128	; 0x80
     3c8:	036d      	lsls	r5, r5, #13
     3ca:	617d      	str	r5, [r7, #20]

        uint8_t dummy_Tx = 0xFF;
        uint8_t dummy_rx;

        pinLow(cs_imu);
        dummy_rx = spiDataTransfer(SPI1,ACCEL_CONFIG | 0xBE);
     3cc:	21be      	movs	r1, #190	; 0xbe
     3ce:	2002      	movs	r0, #2
     3d0:	4e29      	ldr	r6, [pc, #164]	; (478 <main+0x100>)
     3d2:	47b0      	blx	r6
        rData = spiDataTransfer(SPI1,dummy_Tx);
     3d4:	21ff      	movs	r1, #255	; 0xff
     3d6:	2002      	movs	r0, #2
     3d8:	47b0      	blx	r6
     3da:	230b      	movs	r3, #11
     3dc:	aa02      	add	r2, sp, #8
     3de:	4694      	mov	ip, r2
     3e0:	4463      	add	r3, ip
     3e2:	7018      	strb	r0, [r3, #0]
        rData2 = spiDataTransfer(SPI1,dummy_Tx);
     3e4:	21ff      	movs	r1, #255	; 0xff
     3e6:	2002      	movs	r0, #2
     3e8:	47b0      	blx	r6
     3ea:	230a      	movs	r3, #10
     3ec:	aa02      	add	r2, sp, #8
     3ee:	4694      	mov	ip, r2
     3f0:	4463      	add	r3, ip
     3f2:	7018      	strb	r0, [r3, #0]




inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     3f4:	61bd      	str	r5, [r7, #24]
        pinHigh(cs_imu);

        //check if last bit in second byte is 1 therefor negative number
        int16_t negative = (rData2 & (1 <<7)) != 0;
     3f6:	781b      	ldrb	r3, [r3, #0]
        if (negative) {
     3f8:	b25b      	sxtb	r3, r3
     3fa:	2b00      	cmp	r3, #0
     3fc:	da0d      	bge.n	41a <main+0xa2>
            // if negative then preform 2's complement to int conversion
            accelX = ((rData2 | ~((1 << 8) - 1)) << 8 ) | rData;
     3fe:	230a      	movs	r3, #10
     400:	4463      	add	r3, ip
     402:	781a      	ldrb	r2, [r3, #0]
     404:	230b      	movs	r3, #11
     406:	4463      	add	r3, ip
     408:	7818      	ldrb	r0, [r3, #0]
     40a:	0212      	lsls	r2, r2, #8
     40c:	4b1b      	ldr	r3, [pc, #108]	; (47c <main+0x104>)
     40e:	4318      	orrs	r0, r3
     410:	4310      	orrs	r0, r2
     412:	4b1b      	ldr	r3, [pc, #108]	; (480 <main+0x108>)
     414:	4798      	blx	r3
     416:	9002      	str	r0, [sp, #8]
     418:	e00c      	b.n	434 <main+0xbc>
        } else {
            accelX = (rData2 << 8) + rData;
     41a:	230a      	movs	r3, #10
     41c:	aa02      	add	r2, sp, #8
     41e:	4694      	mov	ip, r2
     420:	4463      	add	r3, ip
     422:	7818      	ldrb	r0, [r3, #0]
     424:	230b      	movs	r3, #11
     426:	4463      	add	r3, ip
     428:	781b      	ldrb	r3, [r3, #0]
     42a:	0200      	lsls	r0, r0, #8
     42c:	1818      	adds	r0, r3, r0
     42e:	4b14      	ldr	r3, [pc, #80]	; (480 <main+0x108>)
     430:	4798      	blx	r3
     432:	9002      	str	r0, [sp, #8]
        }
        accelX = accelX *0.00006103;
     434:	9802      	ldr	r0, [sp, #8]
     436:	4b13      	ldr	r3, [pc, #76]	; (484 <main+0x10c>)
     438:	4798      	blx	r3
     43a:	4a13      	ldr	r2, [pc, #76]	; (488 <main+0x110>)
     43c:	4b13      	ldr	r3, [pc, #76]	; (48c <main+0x114>)
     43e:	4f0b      	ldr	r7, [pc, #44]	; (46c <main+0xf4>)
     440:	47b8      	blx	r7
     442:	4b0b      	ldr	r3, [pc, #44]	; (470 <main+0xf8>)
     444:	4798      	blx	r3
     446:	9002      	str	r0, [sp, #8]

    }
     448:	e7a7      	b.n	39a <main+0x22>
     44a:	46c0      	nop			; (mov r8, r8)
     44c:	00000221 	.word	0x00000221
     450:	00000965 	.word	0x00000965
     454:	00001634 	.word	0x00001634
     458:	00000511 	.word	0x00000511
     45c:	41004400 	.word	0x41004400
     460:	000011b1 	.word	0x000011b1
     464:	4c32de7a 	.word	0x4c32de7a
     468:	3f60f012 	.word	0x3f60f012
     46c:	00000cbd 	.word	0x00000cbd
     470:	000012dd 	.word	0x000012dd
     474:	000009c1 	.word	0x000009c1
     478:	00000b3d 	.word	0x00000b3d
     47c:	ffff0000 	.word	0xffff0000
     480:	00000bb1 	.word	0x00000bb1
     484:	00001235 	.word	0x00001235
     488:	d52535ef 	.word	0xd52535ef
     48c:	3f0fff4e 	.word	0x3f0fff4e

00000490 <adcInit>:


#include <util.h>

void adcInit() {
     490:	b510      	push	{r4, lr}

    // set up clock
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;
     492:	4a12      	ldr	r2, [pc, #72]	; (4dc <adcInit+0x4c>)
     494:	6a13      	ldr	r3, [r2, #32]
     496:	2180      	movs	r1, #128	; 0x80
     498:	0249      	lsls	r1, r1, #9
     49a:	430b      	orrs	r3, r1
     49c:	6213      	str	r3, [r2, #32]

    // divide prescaler by 512 (93.75KHz), max adc freq is 2.1MHz
    ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |
     49e:	4910      	ldr	r1, [pc, #64]	; (4e0 <adcInit+0x50>)
     4a0:	22e0      	movs	r2, #224	; 0xe0
     4a2:	00d2      	lsls	r2, r2, #3
     4a4:	808a      	strh	r2, [r1, #4]
                     ADC_CTRLB_RESSEL_12BIT;

    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
     4a6:	480f      	ldr	r0, [pc, #60]	; (4e4 <adcInit+0x54>)
     4a8:	4b0f      	ldr	r3, [pc, #60]	; (4e8 <adcInit+0x58>)
     4aa:	8058      	strh	r0, [r3, #2]
                        GCLK_CLKCTRL_GEN(0) |
                        GCLK_CLKCTRL_ID(ADC_GCLK_ID);

    ADC->CALIB.reg =
        ADC_CALIB_BIAS_CAL(
     4ac:	4b0f      	ldr	r3, [pc, #60]	; (4ec <adcInit+0x5c>)
    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(0) |
                        GCLK_CLKCTRL_ID(ADC_GCLK_ID);

    ADC->CALIB.reg =
     4ae:	681b      	ldr	r3, [r3, #0]
     4b0:	015b      	lsls	r3, r3, #5
     4b2:	4013      	ands	r3, r2
     4b4:	0018      	movs	r0, r3
        ADC_CALIB_BIAS_CAL(
            (*(uint32_t *)ADC_FUSES_BIASCAL_ADDR >> ADC_FUSES_BIASCAL_Pos)
        ) |
        ADC_CALIB_LINEARITY_CAL(
     4b6:	4b0e      	ldr	r3, [pc, #56]	; (4f0 <adcInit+0x60>)
    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(0) |
                        GCLK_CLKCTRL_ID(ADC_GCLK_ID);

    ADC->CALIB.reg =
     4b8:	685a      	ldr	r2, [r3, #4]
     4ba:	0154      	lsls	r4, r2, #5
     4bc:	681a      	ldr	r2, [r3, #0]
     4be:	0ed3      	lsrs	r3, r2, #27
     4c0:	4323      	orrs	r3, r4
     4c2:	22ff      	movs	r2, #255	; 0xff
     4c4:	4013      	ands	r3, r2
     4c6:	4303      	orrs	r3, r0
     4c8:	850b      	strh	r3, [r1, #40]	; 0x28
        ) |
        ADC_CALIB_LINEARITY_CAL(
            (*(uint64_t *)ADC_FUSES_LINEARITY_0_ADDR >> ADC_FUSES_LINEARITY_0_Pos)
        );

    ADC->REFCTRL.reg = ADC_REFCTRL_REFSEL_INTVCC1;
     4ca:	2302      	movs	r3, #2
     4cc:	704b      	strb	r3, [r1, #1]

    ADC->CTRLA.reg = ADC_CTRLA_ENABLE; // enable
     4ce:	700b      	strb	r3, [r1, #0]
    while(ADC->STATUS.reg & ADC_STATUS_SYNCBUSY);
     4d0:	000a      	movs	r2, r1
     4d2:	7e53      	ldrb	r3, [r2, #25]
     4d4:	b25b      	sxtb	r3, r3
     4d6:	2b00      	cmp	r3, #0
     4d8:	dbfb      	blt.n	4d2 <adcInit+0x42>
}
     4da:	bd10      	pop	{r4, pc}
     4dc:	40000400 	.word	0x40000400
     4e0:	42004000 	.word	0x42004000
     4e4:	0000401e 	.word	0x0000401e
     4e8:	40000c00 	.word	0x40000c00
     4ec:	00806024 	.word	0x00806024
     4f0:	00806020 	.word	0x00806020

000004f4 <adcSample>:



u16_t adcSample() {
    ADC->SWTRIG.reg = ADC_SWTRIG_START;
     4f4:	2202      	movs	r2, #2
     4f6:	4b05      	ldr	r3, [pc, #20]	; (50c <adcSample+0x18>)
     4f8:	731a      	strb	r2, [r3, #12]
    while(!(ADC->INTFLAG.reg & ADC_INTFLAG_RESRDY)); // wait until result is ready
     4fa:	0019      	movs	r1, r3
     4fc:	3a01      	subs	r2, #1
     4fe:	7e0b      	ldrb	r3, [r1, #24]
     500:	4213      	tst	r3, r2
     502:	d0fc      	beq.n	4fe <adcSample+0xa>
    return ADC->RESULT.reg;
     504:	4b01      	ldr	r3, [pc, #4]	; (50c <adcSample+0x18>)
     506:	8b58      	ldrh	r0, [r3, #26]
     508:	b280      	uxth	r0, r0
}
     50a:	4770      	bx	lr
     50c:	42004000 	.word	0x42004000

00000510 <adc_read>:


u16_t adc_read(Pin p) {
     510:	b530      	push	{r4, r5, lr}
     512:	b083      	sub	sp, #12
     514:	0c03      	lsrs	r3, r0, #16
     516:	0002      	movs	r2, r0
     518:	9000      	str	r0, [sp, #0]
     51a:	9101      	str	r1, [sp, #4]
     51c:	b2c9      	uxtb	r1, r1
     51e:	b2db      	uxtb	r3, r3
     520:	0e10      	lsrs	r0, r2, #24
    u16_t buad;

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
     522:	07c2      	lsls	r2, r0, #31
     524:	d50c      	bpl.n	540 <adc_read+0x30>
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     526:	0842      	lsrs	r2, r0, #1
     528:	01dc      	lsls	r4, r3, #7
     52a:	1912      	adds	r2, r2, r4
     52c:	4c14      	ldr	r4, [pc, #80]	; (580 <adc_read+0x70>)
     52e:	46a4      	mov	ip, r4
     530:	4462      	add	r2, ip
     532:	7814      	ldrb	r4, [r2, #0]
     534:	250f      	movs	r5, #15
     536:	402c      	ands	r4, r5
     538:	2510      	movs	r5, #16
     53a:	432c      	orrs	r4, r5
     53c:	7014      	strb	r4, [r2, #0]
     53e:	e00b      	b.n	558 <adc_read+0x48>
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     540:	0842      	lsrs	r2, r0, #1
     542:	01dc      	lsls	r4, r3, #7
     544:	1912      	adds	r2, r2, r4
     546:	4c0e      	ldr	r4, [pc, #56]	; (580 <adc_read+0x70>)
     548:	46a4      	mov	ip, r4
     54a:	4462      	add	r2, ip
     54c:	7814      	ldrb	r4, [r2, #0]
     54e:	250f      	movs	r5, #15
     550:	43ac      	bics	r4, r5
     552:	2501      	movs	r5, #1
     554:	432c      	orrs	r4, r5
     556:	7014      	strb	r4, [r2, #0]
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     558:	01db      	lsls	r3, r3, #7
     55a:	18c0      	adds	r0, r0, r3
     55c:	4b09      	ldr	r3, [pc, #36]	; (584 <adc_read+0x74>)
     55e:	469c      	mov	ip, r3
     560:	4460      	add	r0, ip
     562:	7802      	ldrb	r2, [r0, #0]
     564:	2301      	movs	r3, #1
     566:	4313      	orrs	r3, r2
     568:	7003      	strb	r3, [r0, #0]
    // switch pin mux to analog in
    pinAnalog(p);

    ADC->INPUTCTRL.reg = (ADC_INPUTCTRL_MUXPOS(p.chan) // select from proper pin
                          | ADC_INPUTCTRL_MUXNEG_GND // 0 = gnd
                          | ADC_INPUTCTRL_GAIN_1X);
     56a:	231f      	movs	r3, #31
     56c:	4019      	ands	r1, r3
     56e:	23c0      	movs	r3, #192	; 0xc0
     570:	015b      	lsls	r3, r3, #5
     572:	4319      	orrs	r1, r3

u16_t adc_read(Pin p) {
    // switch pin mux to analog in
    pinAnalog(p);

    ADC->INPUTCTRL.reg = (ADC_INPUTCTRL_MUXPOS(p.chan) // select from proper pin
     574:	4b04      	ldr	r3, [pc, #16]	; (588 <adc_read+0x78>)
     576:	6119      	str	r1, [r3, #16]
                          | ADC_INPUTCTRL_MUXNEG_GND // 0 = gnd
                          | ADC_INPUTCTRL_GAIN_1X);

    return adcSample();
     578:	4b04      	ldr	r3, [pc, #16]	; (58c <adc_read+0x7c>)
     57a:	4798      	blx	r3
     57c:	b003      	add	sp, #12
     57e:	bd30      	pop	{r4, r5, pc}
     580:	41004430 	.word	0x41004430
     584:	41004440 	.word	0x41004440
     588:	42004000 	.word	0x42004000
     58c:	000004f5 	.word	0x000004f5

00000590 <GclkInit>:


static uint32_t cycles_per_ms = 48000000UL / 1000;
static uint32_t cycles_per_us = 48000000UL / 1000000;

void GclkInit() {
     590:	b510      	push	{r4, lr}


    SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     592:	4a1c      	ldr	r2, [pc, #112]	; (604 <GclkInit+0x74>)
     594:	23c2      	movs	r3, #194	; 0xc2
     596:	00db      	lsls	r3, r3, #3
     598:	6093      	str	r3, [r2, #8]
                           SYSCTRL_INTFLAG_DFLLRDY;
    NVMCTRL->CTRLB.reg |= NVMCTRL_CTRLB_RWS_HALF;
     59a:	491b      	ldr	r1, [pc, #108]	; (608 <GclkInit+0x78>)
     59c:	6848      	ldr	r0, [r1, #4]
     59e:	2302      	movs	r3, #2
     5a0:	4303      	orrs	r3, r0
     5a2:	604b      	str	r3, [r1, #4]


// start and enable external 32k crystal
    SYSCTRL->XOSC32K.reg = SYSCTRL_XOSC32K_ENABLE |
     5a4:	4b19      	ldr	r3, [pc, #100]	; (60c <GclkInit+0x7c>)
     5a6:	8293      	strh	r3, [r2, #20]
                           SYSCTRL_XOSC32K_XTALEN |
                           SYSCTRL_XOSC32K_EN32K |
                           ( 6 << SYSCTRL_XOSC32K_STARTUP_Pos);

    //wait for crystal to warm up
    while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_XOSC32KRDY)) == 0);
     5a8:	0011      	movs	r1, r2
     5aa:	2202      	movs	r2, #2
     5ac:	68cb      	ldr	r3, [r1, #12]
     5ae:	421a      	tst	r2, r3
     5b0:	d0fc      	beq.n	5ac <GclkInit+0x1c>

#define NVM_DFLL_COARSE_POS    58
#define NVM_DFLL_COARSE_SIZE   6
#define NVM_DFLL_FINE_POS      64
#define NVM_DFLL_FINE_SIZE     10
    uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
     5b2:	4b17      	ldr	r3, [pc, #92]	; (610 <GclkInit+0x80>)
     5b4:	681c      	ldr	r4, [r3, #0]
     5b6:	0ea4      	lsrs	r4, r4, #26
                         + (NVM_DFLL_COARSE_POS / 32))
                       >> (NVM_DFLL_COARSE_POS % 32))
                     & ((1 << NVM_DFLL_COARSE_SIZE) - 1);
    if (coarse == 0x3f) {
     5b8:	2c3f      	cmp	r4, #63	; 0x3f
     5ba:	d100      	bne.n	5be <GclkInit+0x2e>
        coarse = 0x1f;
     5bc:	3c20      	subs	r4, #32
    }
    uint32_t fine =( *((uint32_t *)(NVMCTRL_OTP4)
                       + (NVM_DFLL_FINE_POS / 32))
                     >> (NVM_DFLL_FINE_POS % 32))
     5be:	4b15      	ldr	r3, [pc, #84]	; (614 <GclkInit+0x84>)
                       >> (NVM_DFLL_COARSE_POS % 32))
                     & ((1 << NVM_DFLL_COARSE_SIZE) - 1);
    if (coarse == 0x3f) {
        coarse = 0x1f;
    }
    uint32_t fine =( *((uint32_t *)(NVMCTRL_OTP4)
     5c0:	6818      	ldr	r0, [r3, #0]
     5c2:	0580      	lsls	r0, r0, #22
     5c4:	0d80      	lsrs	r0, r0, #22
                       + (NVM_DFLL_FINE_POS / 32))
                     >> (NVM_DFLL_FINE_POS % 32))
                   & ((1 << NVM_DFLL_FINE_SIZE) - 1);
    if (fine == 0x3ff) {
     5c6:	4b14      	ldr	r3, [pc, #80]	; (618 <GclkInit+0x88>)
     5c8:	4298      	cmp	r0, r3
     5ca:	d100      	bne.n	5ce <GclkInit+0x3e>
        fine = 0x1ff;
     5cc:	4813      	ldr	r0, [pc, #76]	; (61c <GclkInit+0x8c>)
    }


    // Disable ONDEMAND mode while writing configurations (errata 9905)
    SYSCTRL->DFLLCTRL.reg = dfll_ctrl_usb & ~SYSCTRL_DFLLCTRL_ONDEMAND;
     5ce:	4a14      	ldr	r2, [pc, #80]	; (620 <GclkInit+0x90>)
     5d0:	4b0c      	ldr	r3, [pc, #48]	; (604 <GclkInit+0x74>)
     5d2:	849a      	strh	r2, [r3, #36]	; 0x24
    while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_DFLLRDY)) == 0);
     5d4:	0019      	movs	r1, r3
     5d6:	2210      	movs	r2, #16
     5d8:	68cb      	ldr	r3, [r1, #12]
     5da:	421a      	tst	r2, r3
     5dc:	d0fc      	beq.n	5d8 <GclkInit+0x48>
    SYSCTRL->DFLLVAL.reg = SYSCTRL_DFLLVAL_COARSE(coarse) | SYSCTRL_DFLLVAL_FINE(fine);
     5de:	02a4      	lsls	r4, r4, #10
     5e0:	4320      	orrs	r0, r4
     5e2:	4b08      	ldr	r3, [pc, #32]	; (604 <GclkInit+0x74>)
     5e4:	6298      	str	r0, [r3, #40]	; 0x28


    //Wait and see if the DFLL output is good . . .
    while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_DFLLRDY)) == 0);
     5e6:	0019      	movs	r1, r3
     5e8:	2210      	movs	r2, #16
     5ea:	68cb      	ldr	r3, [r1, #12]
     5ec:	421a      	tst	r2, r3
     5ee:	d0fc      	beq.n	5ea <GclkInit+0x5a>


    SYSCTRL->DFLLCTRL.reg = dfll_ctrl_usb;
     5f0:	4a0c      	ldr	r2, [pc, #48]	; (624 <GclkInit+0x94>)
     5f2:	4b04      	ldr	r3, [pc, #16]	; (604 <GclkInit+0x74>)
     5f4:	849a      	strh	r2, [r3, #36]	; 0x24


    //For generic clock generator 0, select the DFLL48 Clock as input
    GCLK->GENDIV.reg  = (GCLK_GENDIV_DIV(1)  | GCLK_GENDIV_ID(0));
     5f6:	4b0c      	ldr	r3, [pc, #48]	; (628 <GclkInit+0x98>)
     5f8:	2280      	movs	r2, #128	; 0x80
     5fa:	0052      	lsls	r2, r2, #1
     5fc:	609a      	str	r2, [r3, #8]
    GCLK->GENCTRL.reg = (GCLK_GENCTRL_ID(0)  | (GCLK_GENCTRL_SRC_DFLL48M) | (GCLK_GENCTRL_GENEN));
     5fe:	4a0b      	ldr	r2, [pc, #44]	; (62c <GclkInit+0x9c>)
     600:	605a      	str	r2, [r3, #4]
}
     602:	bd10      	pop	{r4, pc}
     604:	40000800 	.word	0x40000800
     608:	41004000 	.word	0x41004000
     60c:	0000060e 	.word	0x0000060e
     610:	00806024 	.word	0x00806024
     614:	00806028 	.word	0x00806028
     618:	000003ff 	.word	0x000003ff
     61c:	000001ff 	.word	0x000001ff
     620:	00000522 	.word	0x00000522
     624:	000005a2 	.word	0x000005a2
     628:	40000c00 	.word	0x40000c00
     62c:	00010700 	.word	0x00010700

00000630 <gclkEnable>:

void gclkEnable(u32_t id, u32_t src, u32_t div) {
     630:	b510      	push	{r4, lr}
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
     632:	230f      	movs	r3, #15
     634:	4018      	ands	r0, r3
     636:	0212      	lsls	r2, r2, #8
     638:	4b07      	ldr	r3, [pc, #28]	; (658 <gclkEnable+0x28>)
     63a:	401a      	ands	r2, r3
     63c:	4302      	orrs	r2, r0
     63e:	4c07      	ldr	r4, [pc, #28]	; (65c <gclkEnable+0x2c>)
     640:	60a2      	str	r2, [r4, #8]
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     642:	0209      	lsls	r1, r1, #8
     644:	23f8      	movs	r3, #248	; 0xf8
     646:	015b      	lsls	r3, r3, #5
     648:	4019      	ands	r1, r3
     64a:	2380      	movs	r3, #128	; 0x80
     64c:	025b      	lsls	r3, r3, #9
     64e:	4319      	orrs	r1, r3
     650:	4308      	orrs	r0, r1
     652:	6060      	str	r0, [r4, #4]
}
     654:	bd10      	pop	{r4, pc}
     656:	46c0      	nop			; (mov r8, r8)
     658:	00ffff00 	.word	0x00ffff00
     65c:	40000c00 	.word	0x40000c00

00000660 <delayInit>:


void delayInit(void) {
    cycles_per_ms = 48000000UL;
    cycles_per_ms /= 1000;
     660:	4b04      	ldr	r3, [pc, #16]	; (674 <delayInit+0x14>)
     662:	4a05      	ldr	r2, [pc, #20]	; (678 <delayInit+0x18>)
     664:	601a      	str	r2, [r3, #0]
    cycles_per_us = cycles_per_ms / 1000;
     666:	2230      	movs	r2, #48	; 0x30
     668:	605a      	str	r2, [r3, #4]

    SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     66a:	3a2b      	subs	r2, #43	; 0x2b
     66c:	4b03      	ldr	r3, [pc, #12]	; (67c <delayInit+0x1c>)
     66e:	601a      	str	r2, [r3, #0]
}
     670:	4770      	bx	lr
     672:	46c0      	nop			; (mov r8, r8)
     674:	20000004 	.word	0x20000004
     678:	0000bb80 	.word	0x0000bb80
     67c:	e000e010 	.word	0xe000e010

00000680 <delay_us>:
/**
 * \brief Delay loop to delay at least n number of microseconds
 *
 * \param n  Number of microseconds to wait
 */
void delay_us(uint32_t n) {
     680:	b530      	push	{r4, r5, lr}
    while (n--) {
        /* Devide up to blocks of 10u */
        delay_cycles(cycles_per_us);
     682:	4b08      	ldr	r3, [pc, #32]	; (6a4 <delay_us+0x24>)
     684:	685c      	ldr	r4, [r3, #4]


static inline void delay_cycles(
const uint32_t n) {
	if (n > 0) {
		SysTick->LOAD = n;
     686:	4a08      	ldr	r2, [pc, #32]	; (6a8 <delay_us+0x28>)
		SysTick->VAL = 0;
     688:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     68a:	2180      	movs	r1, #128	; 0x80
     68c:	0249      	lsls	r1, r1, #9
 * \brief Delay loop to delay at least n number of microseconds
 *
 * \param n  Number of microseconds to wait
 */
void delay_us(uint32_t n) {
    while (n--) {
     68e:	e006      	b.n	69e <delay_us+0x1e>



static inline void delay_cycles(
const uint32_t n) {
	if (n > 0) {
     690:	2c00      	cmp	r4, #0
     692:	d004      	beq.n	69e <delay_us+0x1e>
		SysTick->LOAD = n;
     694:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     696:	6095      	str	r5, [r2, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     698:	6813      	ldr	r3, [r2, #0]
     69a:	420b      	tst	r3, r1
     69c:	d0fc      	beq.n	698 <delay_us+0x18>
     69e:	3801      	subs	r0, #1
     6a0:	d2f6      	bcs.n	690 <delay_us+0x10>
        /* Devide up to blocks of 10u */
        delay_cycles(cycles_per_us);
    }
}
     6a2:	bd30      	pop	{r4, r5, pc}
     6a4:	20000004 	.word	0x20000004
     6a8:	e000e010 	.word	0xe000e010

000006ac <delay_ms>:
/**
 * \brief Delay loop to delay at least n number of milliseconds
 *
 * \param n  Number of milliseconds to wait
 */
void delay_ms(uint32_t n) {
     6ac:	b530      	push	{r4, r5, lr}
    while (n--) {
        /* Devide up to blocks of 1ms */
        delay_cycles(cycles_per_ms);
     6ae:	4b08      	ldr	r3, [pc, #32]	; (6d0 <delay_ms+0x24>)
     6b0:	681c      	ldr	r4, [r3, #0]


static inline void delay_cycles(
const uint32_t n) {
	if (n > 0) {
		SysTick->LOAD = n;
     6b2:	4a08      	ldr	r2, [pc, #32]	; (6d4 <delay_ms+0x28>)
		SysTick->VAL = 0;
     6b4:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     6b6:	2180      	movs	r1, #128	; 0x80
     6b8:	0249      	lsls	r1, r1, #9
 * \brief Delay loop to delay at least n number of milliseconds
 *
 * \param n  Number of milliseconds to wait
 */
void delay_ms(uint32_t n) {
    while (n--) {
     6ba:	e006      	b.n	6ca <delay_ms+0x1e>



static inline void delay_cycles(
const uint32_t n) {
	if (n > 0) {
     6bc:	2c00      	cmp	r4, #0
     6be:	d004      	beq.n	6ca <delay_ms+0x1e>
		SysTick->LOAD = n;
     6c0:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     6c2:	6095      	str	r5, [r2, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     6c4:	6813      	ldr	r3, [r2, #0]
     6c6:	420b      	tst	r3, r1
     6c8:	d0fc      	beq.n	6c4 <delay_ms+0x18>
     6ca:	3801      	subs	r0, #1
     6cc:	d2f6      	bcs.n	6bc <delay_ms+0x10>
        /* Devide up to blocks of 1ms */
        delay_cycles(cycles_per_ms);
    }
     6ce:	bd30      	pop	{r4, r5, pc}
     6d0:	20000004 	.word	0x20000004
     6d4:	e000e010 	.word	0xe000e010

000006d8 <dmaInit>:
#include <util.h>

DMA_DESC_ALIGN DmacDescriptor dma_descriptors[12];
DMA_DESC_ALIGN DmacDescriptor dma_descriptors_wb[12];

void dmaInit() {
     6d8:	b570      	push	{r4, r5, r6, lr}
	memset(&dma_descriptors, 0, sizeof(dma_descriptors));
     6da:	4d11      	ldr	r5, [pc, #68]	; (720 <dmaInit+0x48>)
     6dc:	22c0      	movs	r2, #192	; 0xc0
     6de:	2100      	movs	r1, #0
     6e0:	0028      	movs	r0, r5
     6e2:	4e10      	ldr	r6, [pc, #64]	; (724 <dmaInit+0x4c>)
     6e4:	47b0      	blx	r6
	memset(&dma_descriptors_wb, 0, sizeof(dma_descriptors_wb));
     6e6:	4c10      	ldr	r4, [pc, #64]	; (728 <dmaInit+0x50>)
     6e8:	22c0      	movs	r2, #192	; 0xc0
     6ea:	2100      	movs	r1, #0
     6ec:	0020      	movs	r0, r4
     6ee:	47b0      	blx	r6

	PM->AHBMASK.reg |= PM_AHBMASK_DMAC;
     6f0:	4b0e      	ldr	r3, [pc, #56]	; (72c <dmaInit+0x54>)
     6f2:	6959      	ldr	r1, [r3, #20]
     6f4:	2220      	movs	r2, #32
     6f6:	430a      	orrs	r2, r1
     6f8:	615a      	str	r2, [r3, #20]
	PM->APBBMASK.reg |= PM_APBBMASK_DMAC;
     6fa:	69d9      	ldr	r1, [r3, #28]
     6fc:	2210      	movs	r2, #16
     6fe:	430a      	orrs	r2, r1
     700:	61da      	str	r2, [r3, #28]

	DMAC->CTRL.bit.DMAENABLE = 0;
     702:	4b0b      	ldr	r3, [pc, #44]	; (730 <dmaInit+0x58>)
     704:	881a      	ldrh	r2, [r3, #0]
     706:	2102      	movs	r1, #2
     708:	438a      	bics	r2, r1
     70a:	801a      	strh	r2, [r3, #0]
	DMAC->CTRL.bit.SWRST = 1;
     70c:	8819      	ldrh	r1, [r3, #0]
     70e:	2201      	movs	r2, #1
     710:	430a      	orrs	r2, r1
     712:	801a      	strh	r2, [r3, #0]

	DMAC->BASEADDR.reg = (unsigned) &dma_descriptors;
     714:	635d      	str	r5, [r3, #52]	; 0x34
	DMAC->WRBADDR.reg = (unsigned) &dma_descriptors_wb;
     716:	639c      	str	r4, [r3, #56]	; 0x38

	DMAC->CTRL.reg = DMAC_CTRL_DMAENABLE | DMAC_CTRL_LVLEN(0xf);
     718:	4a06      	ldr	r2, [pc, #24]	; (734 <dmaInit+0x5c>)
     71a:	801a      	strh	r2, [r3, #0]
}
     71c:	bd70      	pop	{r4, r5, r6, pc}
     71e:	46c0      	nop			; (mov r8, r8)
     720:	20000520 	.word	0x20000520
     724:	00001479 	.word	0x00001479
     728:	20000460 	.word	0x20000460
     72c:	40000400 	.word	0x40000400
     730:	41004800 	.word	0x41004800
     734:	00000f02 	.word	0x00000f02

00000738 <flight>:
#include <util.h>

enum flight_state my_flight_state; // current flight state.


void flight() {
     738:	b510      	push	{r4, lr}

    delay_ms(1);
     73a:	2001      	movs	r0, #1
     73c:	4b02      	ldr	r3, [pc, #8]	; (748 <flight+0x10>)
     73e:	4798      	blx	r3

    my_flight_state = flightStatrup;
     740:	2200      	movs	r2, #0
     742:	4b02      	ldr	r3, [pc, #8]	; (74c <flight+0x14>)
     744:	701a      	strb	r2, [r3, #0]

        break;
    }


     746:	bd10      	pop	{r4, pc}
     748:	000006ad 	.word	0x000006ad
     74c:	200005e0 	.word	0x200005e0

00000750 <readMS5803AdcResults>:
#include <MS5803.h>
#include <boardDefines.h>
#include <math.h>


u32_t readMS5803AdcResults() {
     750:	b5f0      	push	{r4, r5, r6, r7, lr}
     752:	4647      	mov	r7, r8
     754:	b480      	push	{r7}
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     756:	4f0e      	ldr	r7, [pc, #56]	; (790 <readMS5803AdcResults+0x40>)
     758:	2480      	movs	r4, #128	; 0x80
     75a:	01e4      	lsls	r4, r4, #7
     75c:	617c      	str	r4, [r7, #20]

    u8_t dummy_tx = 0xFF;
    u8_t dummy_rx;

    pinLow(cs_baro);
    dummy_rx = spiDataTransfer(SPI1, cmdAdcRead_);
     75e:	2100      	movs	r1, #0
     760:	2002      	movs	r0, #2
     762:	4d0c      	ldr	r5, [pc, #48]	; (794 <readMS5803AdcResults+0x44>)
     764:	47a8      	blx	r5
    u8_t _byte1 = spiDataTransfer(SPI1,dummy_tx);
     766:	21ff      	movs	r1, #255	; 0xff
     768:	2002      	movs	r0, #2
     76a:	47a8      	blx	r5
     76c:	0006      	movs	r6, r0
    u8_t _byte2 = spiDataTransfer(SPI1,dummy_tx);
     76e:	21ff      	movs	r1, #255	; 0xff
     770:	2002      	movs	r0, #2
     772:	47a8      	blx	r5
     774:	4680      	mov	r8, r0
    u8_t _byte3 = spiDataTransfer(SPI1,dummy_tx);
     776:	21ff      	movs	r1, #255	; 0xff
     778:	2002      	movs	r0, #2
     77a:	47a8      	blx	r5




inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     77c:	61bc      	str	r4, [r7, #24]
    pinHigh(cs_baro);

    u32_t _receive = (_byte1 << 16) | (_byte2 << 8) | (_byte3);
    return _receive;
     77e:	0436      	lsls	r6, r6, #16
     780:	4643      	mov	r3, r8
     782:	021c      	lsls	r4, r3, #8
     784:	4334      	orrs	r4, r6
     786:	4320      	orrs	r0, r4
}
     788:	bc04      	pop	{r2}
     78a:	4690      	mov	r8, r2
     78c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     78e:	46c0      	nop			; (mov r8, r8)
     790:	41004400 	.word	0x41004400
     794:	00000b3d 	.word	0x00000b3d

00000798 <ConvertPressureTemperature>:

void ConvertPressureTemperature(Barometer *my_barometer) {
     798:	b5f0      	push	{r4, r5, r6, r7, lr}
     79a:	464f      	mov	r7, r9
     79c:	4646      	mov	r6, r8
     79e:	b4c0      	push	{r6, r7}
     7a0:	b08b      	sub	sp, #44	; 0x2c
     7a2:	0007      	movs	r7, r0
    volatile const u16_t C1 = my_barometer->coefficients_[0];
     7a4:	8803      	ldrh	r3, [r0, #0]
     7a6:	251e      	movs	r5, #30
     7a8:	aa02      	add	r2, sp, #8
     7aa:	4694      	mov	ip, r2
     7ac:	4465      	add	r5, ip
     7ae:	802b      	strh	r3, [r5, #0]
    volatile const u16_t C2 = my_barometer->coefficients_[1];
     7b0:	8843      	ldrh	r3, [r0, #2]
     7b2:	8393      	strh	r3, [r2, #28]
    volatile const u16_t C3 = my_barometer->coefficients_[2];
     7b4:	8883      	ldrh	r3, [r0, #4]
     7b6:	8353      	strh	r3, [r2, #26]
    volatile const u16_t C4 = my_barometer->coefficients_[3];
     7b8:	88c3      	ldrh	r3, [r0, #6]
     7ba:	ae08      	add	r6, sp, #32
     7bc:	8033      	strh	r3, [r6, #0]
    volatile const u16_t C5 = my_barometer->coefficients_[4];
     7be:	8903      	ldrh	r3, [r0, #8]
     7c0:	2216      	movs	r2, #22
     7c2:	4462      	add	r2, ip
     7c4:	8013      	strh	r3, [r2, #0]
    volatile const u16_t C6 = my_barometer->coefficients_[5];
     7c6:	8941      	ldrh	r1, [r0, #10]
     7c8:	ab07      	add	r3, sp, #28
     7ca:	8019      	strh	r1, [r3, #0]

    // calculate 1st order pressure and temperature (MS5607 1st order algorithm)
    const  int32_t dT = (my_barometer->rawTempatureData) - ((int32_t)C5 << 8);
     7cc:	8814      	ldrh	r4, [r2, #0]
    my_barometer->temperatureCelcus  = 2000 + (((int64_t)dT * C6) >> 32) ;
     7ce:	0224      	lsls	r4, r4, #8
     7d0:	6902      	ldr	r2, [r0, #16]
     7d2:	1b14      	subs	r4, r2, r4
     7d4:	17e2      	asrs	r2, r4, #31
     7d6:	0011      	movs	r1, r2
     7d8:	8818      	ldrh	r0, [r3, #0]
     7da:	b280      	uxth	r0, r0
     7dc:	4b2b      	ldr	r3, [pc, #172]	; (88c <ConvertPressureTemperature+0xf4>)
     7de:	4699      	mov	r9, r3
     7e0:	0022      	movs	r2, r4
     7e2:	9101      	str	r1, [sp, #4]
     7e4:	000b      	movs	r3, r1
     7e6:	2100      	movs	r1, #0
     7e8:	47c8      	blx	r9
     7ea:	23fa      	movs	r3, #250	; 0xfa
     7ec:	00db      	lsls	r3, r3, #3
     7ee:	469c      	mov	ip, r3
     7f0:	4461      	add	r1, ip
     7f2:	6179      	str	r1, [r7, #20]

    volatile const  int64_t OFF   = ((int64_t)C2 << 16) + (((C4 * (int64_t)dT)) >> 7);
     7f4:	ab02      	add	r3, sp, #8
     7f6:	8b9b      	ldrh	r3, [r3, #28]
     7f8:	b29b      	uxth	r3, r3
     7fa:	4698      	mov	r8, r3
     7fc:	8830      	ldrh	r0, [r6, #0]
     7fe:	b280      	uxth	r0, r0
     800:	0022      	movs	r2, r4
     802:	9b01      	ldr	r3, [sp, #4]
     804:	2100      	movs	r1, #0
     806:	47c8      	blx	r9
     808:	064e      	lsls	r6, r1, #25
     80a:	09c2      	lsrs	r2, r0, #7
     80c:	4332      	orrs	r2, r6
     80e:	11cb      	asrs	r3, r1, #7
     810:	2100      	movs	r1, #0
     812:	4646      	mov	r6, r8
     814:	0430      	lsls	r0, r6, #16
     816:	1812      	adds	r2, r2, r0
     818:	414b      	adcs	r3, r1
     81a:	9204      	str	r2, [sp, #16]
     81c:	9305      	str	r3, [sp, #20]
    volatile const  int64_t SENS  =  ((int64_t)C1 << 15) + (((C3 * (int64_t)dT)) >> 8);
     81e:	882d      	ldrh	r5, [r5, #0]
     820:	b2ad      	uxth	r5, r5
     822:	aa02      	add	r2, sp, #8
     824:	8b50      	ldrh	r0, [r2, #26]
     826:	b280      	uxth	r0, r0
     828:	0022      	movs	r2, r4
     82a:	9b01      	ldr	r3, [sp, #4]
     82c:	2100      	movs	r1, #0
     82e:	47c8      	blx	r9
     830:	060c      	lsls	r4, r1, #24
     832:	0a02      	lsrs	r2, r0, #8
     834:	4322      	orrs	r2, r4
     836:	120b      	asrs	r3, r1, #8
     838:	2100      	movs	r1, #0
     83a:	03e8      	lsls	r0, r5, #15
     83c:	1812      	adds	r2, r2, r0
     83e:	414b      	adcs	r3, r1
     840:	9202      	str	r2, [sp, #8]
     842:	9303      	str	r3, [sp, #12]
    my_barometer->pressureMbar = (((my_barometer->rawPressureData * SENS) / 2097152) - OFF) / 32768;
     844:	9a02      	ldr	r2, [sp, #8]
     846:	9b03      	ldr	r3, [sp, #12]
     848:	9c04      	ldr	r4, [sp, #16]
     84a:	9d05      	ldr	r5, [sp, #20]
     84c:	68f8      	ldr	r0, [r7, #12]
     84e:	2100      	movs	r1, #0
     850:	47c8      	blx	r9
     852:	17ce      	asrs	r6, r1, #31
     854:	02f6      	lsls	r6, r6, #11
     856:	0af2      	lsrs	r2, r6, #11
     858:	2300      	movs	r3, #0
     85a:	1880      	adds	r0, r0, r2
     85c:	4159      	adcs	r1, r3
     85e:	02ce      	lsls	r6, r1, #11
     860:	0d42      	lsrs	r2, r0, #21
     862:	4332      	orrs	r2, r6
     864:	154b      	asrs	r3, r1, #21
     866:	1b12      	subs	r2, r2, r4
     868:	41ab      	sbcs	r3, r5
     86a:	17dc      	asrs	r4, r3, #31
     86c:	0464      	lsls	r4, r4, #17
     86e:	0c60      	lsrs	r0, r4, #17
     870:	2100      	movs	r1, #0
     872:	1812      	adds	r2, r2, r0
     874:	414b      	adcs	r3, r1
     876:	0011      	movs	r1, r2
     878:	045b      	lsls	r3, r3, #17
     87a:	0bca      	lsrs	r2, r1, #15
     87c:	431a      	orrs	r2, r3
     87e:	61fa      	str	r2, [r7, #28]
}
     880:	b00b      	add	sp, #44	; 0x2c
     882:	bc0c      	pop	{r2, r3}
     884:	4690      	mov	r8, r2
     886:	4699      	mov	r9, r3
     888:	bdf0      	pop	{r4, r5, r6, r7, pc}
     88a:	46c0      	nop			; (mov r8, r8)
     88c:	00000b59 	.word	0x00000b59

00000890 <pascalToCent>:
    double altFeet = (1-pow((my_barometer->pressurePa/1013.25),(0.190284)))*145366.45;
    my_barometer->heightFeet = (float)altFeet;

}

void pascalToCent(Barometer *my_barometer) {
     890:	b570      	push	{r4, r5, r6, lr}
     892:	0004      	movs	r4, r0
        748275, 767202, 786555, 806356, 826627,
        847395, 868688, 890537, 912974, 936037,
        959766, 984206
    };

    my_barometer->pressurePa = my_barometer->pressureMbar *10;
     894:	69c2      	ldr	r2, [r0, #28]
     896:	0093      	lsls	r3, r2, #2
     898:	189b      	adds	r3, r3, r2
     89a:	005b      	lsls	r3, r3, #1
     89c:	6183      	str	r3, [r0, #24]

    if (my_barometer->pressurePa > PA_INIT)
     89e:	4a10      	ldr	r2, [pc, #64]	; (8e0 <pascalToCent+0x50>)
     8a0:	4293      	cmp	r3, r2
     8a2:	d902      	bls.n	8aa <pascalToCent+0x1a>
        my_barometer->heightCm = lookupTable[0];
     8a4:	4b0f      	ldr	r3, [pc, #60]	; (8e4 <pascalToCent+0x54>)
     8a6:	6203      	str	r3, [r0, #32]
     8a8:	e018      	b.n	8dc <pascalToCent+0x4c>
    else {
        const int32_t inx = (PA_INIT - my_barometer->pressurePa) >> 10;
     8aa:	4a0d      	ldr	r2, [pc, #52]	; (8e0 <pascalToCent+0x50>)
     8ac:	1ad2      	subs	r2, r2, r3
     8ae:	0a92      	lsrs	r2, r2, #10
        if (inx >= PZLUT_ENTRIES - 1)
     8b0:	2a4b      	cmp	r2, #75	; 0x4b
     8b2:	dd02      	ble.n	8ba <pascalToCent+0x2a>
            my_barometer->heightCm = lookupTable[PZLUT_ENTRIES - 1];
     8b4:	4b0c      	ldr	r3, [pc, #48]	; (8e8 <pascalToCent+0x58>)
     8b6:	6203      	str	r3, [r0, #32]
     8b8:	e010      	b.n	8dc <pascalToCent+0x4c>
        else {
            const int32_t pa1 = PA_INIT - (inx << 10);
            const int32_t z1 = lookupTable[inx];
     8ba:	4d0c      	ldr	r5, [pc, #48]	; (8ec <pascalToCent+0x5c>)
     8bc:	0091      	lsls	r1, r2, #2
     8be:	5948      	ldr	r0, [r1, r5]
            const int32_t z2 = lookupTable[inx + 1];
            my_barometer->heightCm = (z1 + (((pa1 - my_barometer->pressurePa) * (z2 - z1)) >> 10));
     8c0:	0296      	lsls	r6, r2, #10
     8c2:	4907      	ldr	r1, [pc, #28]	; (8e0 <pascalToCent+0x50>)
     8c4:	1b89      	subs	r1, r1, r6
     8c6:	1acb      	subs	r3, r1, r3
        if (inx >= PZLUT_ENTRIES - 1)
            my_barometer->heightCm = lookupTable[PZLUT_ENTRIES - 1];
        else {
            const int32_t pa1 = PA_INIT - (inx << 10);
            const int32_t z1 = lookupTable[inx];
            const int32_t z2 = lookupTable[inx + 1];
     8c8:	3201      	adds	r2, #1
     8ca:	0092      	lsls	r2, r2, #2
            my_barometer->heightCm = (z1 + (((pa1 - my_barometer->pressurePa) * (z2 - z1)) >> 10));
     8cc:	5952      	ldr	r2, [r2, r5]
     8ce:	1a12      	subs	r2, r2, r0
     8d0:	4353      	muls	r3, r2
     8d2:	0a9b      	lsrs	r3, r3, #10
     8d4:	1818      	adds	r0, r3, r0
     8d6:	4b06      	ldr	r3, [pc, #24]	; (8f0 <pascalToCent+0x60>)
     8d8:	4798      	blx	r3
     8da:	6220      	str	r0, [r4, #32]
        }
    }
}
     8dc:	bd70      	pop	{r4, r5, r6, pc}
     8de:	46c0      	nop			; (mov r8, r8)
     8e0:	000199cc 	.word	0x000199cc
     8e4:	c6e5c000 	.word	0xc6e5c000
     8e8:	497048e0 	.word	0x497048e0
     8ec:	0000163c 	.word	0x0000163c
     8f0:	00000c41 	.word	0x00000c41

000008f4 <readMS5803Coefficients>:

void readMS5803Coefficients(Barometer *my_barometer) {
     8f4:	b5f0      	push	{r4, r5, r6, r7, lr}
     8f6:	465f      	mov	r7, fp
     8f8:	464e      	mov	r6, r9
     8fa:	4645      	mov	r5, r8
     8fc:	b4e0      	push	{r5, r6, r7}
     8fe:	4680      	mov	r8, r0
     900:	24a2      	movs	r4, #162	; 0xa2

    u8_t dummy_tx = 0xFF;
    u8_t dummy_rx;

    for (u8_t coeff_num = 0; coeff_num < 6 ; ++coeff_num ) {
        delay_us(600);
     902:	4e15      	ldr	r6, [pc, #84]	; (958 <readMS5803Coefficients+0x64>)
        u8_t _cmd = MS5803_CMD_PROM_READ + ((coeff_num+1)*2);
        delay_us(600);
        pinLow(cs_baro);
        dummy_rx = spiDataTransfer(SPI1, _cmd);
     904:	4f15      	ldr	r7, [pc, #84]	; (95c <readMS5803Coefficients+0x68>)

    u8_t dummy_tx = 0xFF;
    u8_t dummy_rx;

    for (u8_t coeff_num = 0; coeff_num < 6 ; ++coeff_num ) {
        delay_us(600);
     906:	2096      	movs	r0, #150	; 0x96
     908:	0080      	lsls	r0, r0, #2
     90a:	47b0      	blx	r6
        u8_t _cmd = MS5803_CMD_PROM_READ + ((coeff_num+1)*2);
        delay_us(600);
     90c:	2096      	movs	r0, #150	; 0x96
     90e:	0080      	lsls	r0, r0, #2
     910:	47b0      	blx	r6
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     912:	4d13      	ldr	r5, [pc, #76]	; (960 <readMS5803Coefficients+0x6c>)
     914:	2380      	movs	r3, #128	; 0x80
     916:	01db      	lsls	r3, r3, #7
     918:	469b      	mov	fp, r3
     91a:	616b      	str	r3, [r5, #20]
        pinLow(cs_baro);
        dummy_rx = spiDataTransfer(SPI1, _cmd);
     91c:	0021      	movs	r1, r4
     91e:	2002      	movs	r0, #2
     920:	47b8      	blx	r7
        u8_t _byte1 = spiDataTransfer(SPI1,dummy_tx);
     922:	21ff      	movs	r1, #255	; 0xff
     924:	2002      	movs	r0, #2
     926:	47b8      	blx	r7
     928:	4681      	mov	r9, r0
        u8_t _byte2 = spiDataTransfer(SPI1,dummy_tx);
     92a:	21ff      	movs	r1, #255	; 0xff
     92c:	2002      	movs	r0, #2
     92e:	47b8      	blx	r7




inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     930:	465b      	mov	r3, fp
     932:	61ab      	str	r3, [r5, #24]
        pinHigh(cs_baro);
        my_barometer->coefficients_[coeff_num] = (_byte1 << 8) | _byte2;
     934:	464b      	mov	r3, r9
     936:	021d      	lsls	r5, r3, #8
     938:	4328      	orrs	r0, r5
     93a:	4643      	mov	r3, r8
     93c:	8018      	strh	r0, [r3, #0]
     93e:	3402      	adds	r4, #2
     940:	b2e4      	uxtb	r4, r4
     942:	2302      	movs	r3, #2
     944:	469c      	mov	ip, r3
     946:	44e0      	add	r8, ip
void readMS5803Coefficients(Barometer *my_barometer) {

    u8_t dummy_tx = 0xFF;
    u8_t dummy_rx;

    for (u8_t coeff_num = 0; coeff_num < 6 ; ++coeff_num ) {
     948:	2cae      	cmp	r4, #174	; 0xae
     94a:	d1dc      	bne.n	906 <readMS5803Coefficients+0x12>
        u8_t _byte2 = spiDataTransfer(SPI1,dummy_tx);
        pinHigh(cs_baro);
        my_barometer->coefficients_[coeff_num] = (_byte1 << 8) | _byte2;
    }

}
     94c:	bc1c      	pop	{r2, r3, r4}
     94e:	4690      	mov	r8, r2
     950:	4699      	mov	r9, r3
     952:	46a3      	mov	fp, r4
     954:	bdf0      	pop	{r4, r5, r6, r7, pc}
     956:	46c0      	nop			; (mov r8, r8)
     958:	00000681 	.word	0x00000681
     95c:	00000b3d 	.word	0x00000b3d
     960:	41004400 	.word	0x41004400

00000964 <initMS5803Barometer>:

void initMS5803Barometer(Barometer *my_barometer) {
     964:	b570      	push	{r4, r5, r6, lr}
     966:	0004      	movs	r4, r0
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     968:	4d0d      	ldr	r5, [pc, #52]	; (9a0 <initMS5803Barometer+0x3c>)
     96a:	2680      	movs	r6, #128	; 0x80
     96c:	01f6      	lsls	r6, r6, #7
     96e:	616e      	str	r6, [r5, #20]

    u8_t dummy_tx = 0xFF;
    u8_t dummy_rx;

    pinLow(cs_baro);
    dummy_rx = spiDataTransfer(SPI1, MS5803_CMD_RES);
     970:	211e      	movs	r1, #30
     972:	2002      	movs	r0, #2
     974:	4b0b      	ldr	r3, [pc, #44]	; (9a4 <initMS5803Barometer+0x40>)
     976:	4798      	blx	r3




inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     978:	61ae      	str	r6, [r5, #24]
    pinHigh(cs_baro);
    delay_ms(200);
     97a:	20c8      	movs	r0, #200	; 0xc8
     97c:	4b0a      	ldr	r3, [pc, #40]	; (9a8 <initMS5803Barometer+0x44>)
     97e:	4798      	blx	r3
    readMS5803Coefficients(my_barometer);
     980:	0020      	movs	r0, r4
     982:	4b0a      	ldr	r3, [pc, #40]	; (9ac <initMS5803Barometer+0x48>)
     984:	4798      	blx	r3

    my_barometer->heightCm = 4000;
     986:	4b0a      	ldr	r3, [pc, #40]	; (9b0 <initMS5803Barometer+0x4c>)
     988:	6223      	str	r3, [r4, #32]
    my_barometer->pressurePa = 10000;
     98a:	4b0a      	ldr	r3, [pc, #40]	; (9b4 <initMS5803Barometer+0x50>)
     98c:	61a3      	str	r3, [r4, #24]
    my_barometer->rawPressureData = 4311550;
     98e:	4b0a      	ldr	r3, [pc, #40]	; (9b8 <initMS5803Barometer+0x54>)
     990:	60e3      	str	r3, [r4, #12]
    my_barometer->rawTempatureData = 8387300;
     992:	4b0a      	ldr	r3, [pc, #40]	; (9bc <initMS5803Barometer+0x58>)
     994:	6123      	str	r3, [r4, #16]
    my_barometer->temperatureCelcus = 2000;
     996:	23fa      	movs	r3, #250	; 0xfa
     998:	00db      	lsls	r3, r3, #3
     99a:	6163      	str	r3, [r4, #20]




}
     99c:	bd70      	pop	{r4, r5, r6, pc}
     99e:	46c0      	nop			; (mov r8, r8)
     9a0:	41004400 	.word	0x41004400
     9a4:	00000b3d 	.word	0x00000b3d
     9a8:	000006ad 	.word	0x000006ad
     9ac:	000008f5 	.word	0x000008f5
     9b0:	457a0000 	.word	0x457a0000
     9b4:	00002710 	.word	0x00002710
     9b8:	0041c9fe 	.word	0x0041c9fe
     9bc:	007ffae4 	.word	0x007ffae4

000009c0 <sampleTick>:
#include <boardDefines.h>
#include <MS5803.h>



void sampleTick(Altimeter *my_altimeter) {
     9c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     9c2:	464f      	mov	r7, r9
     9c4:	4646      	mov	r6, r8
     9c6:	b4c0      	push	{r6, r7}
     9c8:	0004      	movs	r4, r0
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     9ca:	4d18      	ldr	r5, [pc, #96]	; (a2c <sampleTick+0x6c>)
     9cc:	2680      	movs	r6, #128	; 0x80
     9ce:	01f6      	lsls	r6, r6, #7
     9d0:	616e      	str	r6, [r5, #20]
    uint8_t dummy_Tx = 0xFF;
    uint8_t dummy_rx;

    pinLow(cs_baro);
    dummy_rx = spiDataTransfer(SPI1, 0x50);
     9d2:	2150      	movs	r1, #80	; 0x50
     9d4:	2002      	movs	r0, #2
     9d6:	4b16      	ldr	r3, [pc, #88]	; (a30 <sampleTick+0x70>)
     9d8:	4699      	mov	r9, r3
     9da:	4798      	blx	r3




inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     9dc:	61ae      	str	r6, [r5, #24]
    pinHigh(cs_baro);
    delay_ms(2);
     9de:	2002      	movs	r0, #2
     9e0:	4b14      	ldr	r3, [pc, #80]	; (a34 <sampleTick+0x74>)
     9e2:	4698      	mov	r8, r3
     9e4:	4798      	blx	r3
    my_altimeter->myBarometer.rawTempatureData = readMS5803AdcResults();
     9e6:	4f14      	ldr	r7, [pc, #80]	; (a38 <sampleTick+0x78>)
     9e8:	47b8      	blx	r7
     9ea:	6120      	str	r0, [r4, #16]
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     9ec:	616e      	str	r6, [r5, #20]

    pinLow(cs_baro);
    dummy_rx = spiDataTransfer(SPI1, 0x42);
     9ee:	2142      	movs	r1, #66	; 0x42
     9f0:	2002      	movs	r0, #2
     9f2:	47c8      	blx	r9




inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     9f4:	61ae      	str	r6, [r5, #24]
    pinHigh(cs_baro);
    delay_ms(2);
     9f6:	2002      	movs	r0, #2
     9f8:	47c0      	blx	r8
    my_altimeter->myBarometer.rawPressureData = readMS5803AdcResults();
     9fa:	47b8      	blx	r7
     9fc:	60e0      	str	r0, [r4, #12]
    flight();
     9fe:	4b0f      	ldr	r3, [pc, #60]	; (a3c <sampleTick+0x7c>)
     a00:	4798      	blx	r3

    ConvertPressureTemperature(&my_altimeter->myBarometer);
     a02:	0020      	movs	r0, r4
     a04:	4b0e      	ldr	r3, [pc, #56]	; (a40 <sampleTick+0x80>)
     a06:	4798      	blx	r3
    pascalToCent(&my_altimeter->myBarometer);
     a08:	0020      	movs	r0, r4
     a0a:	4b0e      	ldr	r3, [pc, #56]	; (a44 <sampleTick+0x84>)
     a0c:	4798      	blx	r3
    my_altimeter->myBarometer.heightFeet = 0.03281 * my_altimeter->myBarometer.heightCm;
     a0e:	6a20      	ldr	r0, [r4, #32]
     a10:	4b0d      	ldr	r3, [pc, #52]	; (a48 <sampleTick+0x88>)
     a12:	4798      	blx	r3
     a14:	4a0d      	ldr	r2, [pc, #52]	; (a4c <sampleTick+0x8c>)
     a16:	4b0e      	ldr	r3, [pc, #56]	; (a50 <sampleTick+0x90>)
     a18:	4d0e      	ldr	r5, [pc, #56]	; (a54 <sampleTick+0x94>)
     a1a:	47a8      	blx	r5
     a1c:	4b0e      	ldr	r3, [pc, #56]	; (a58 <sampleTick+0x98>)
     a1e:	4798      	blx	r3
     a20:	6260      	str	r0, [r4, #36]	; 0x24



     a22:	bc0c      	pop	{r2, r3}
     a24:	4690      	mov	r8, r2
     a26:	4699      	mov	r9, r3
     a28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     a2a:	46c0      	nop			; (mov r8, r8)
     a2c:	41004400 	.word	0x41004400
     a30:	00000b3d 	.word	0x00000b3d
     a34:	000006ad 	.word	0x000006ad
     a38:	00000751 	.word	0x00000751
     a3c:	00000739 	.word	0x00000739
     a40:	00000799 	.word	0x00000799
     a44:	00000891 	.word	0x00000891
     a48:	00001235 	.word	0x00001235
     a4c:	e9f6a93f 	.word	0xe9f6a93f
     a50:	3fa0cc78 	.word	0x3fa0cc78
     a54:	00000cbd 	.word	0x00000cbd
     a58:	000012dd 	.word	0x000012dd

00000a5c <sercomClockEnable>:
#include <util.h>

void sercomClockEnable(SercomId id, uint32_t clock_channel, u8_t divider) {
     a5c:	b570      	push	{r4, r5, r6, lr}
     a5e:	0004      	movs	r4, r0
     a60:	000d      	movs	r5, r1
    // prevent this clock write from changing any other clocks
    PM->APBCMASK.reg |= 1 << (PM_APBCMASK_SERCOM0_Pos + id);
     a62:	480e      	ldr	r0, [pc, #56]	; (a9c <sercomClockEnable+0x40>)
     a64:	6a01      	ldr	r1, [r0, #32]
     a66:	1ca6      	adds	r6, r4, #2
     a68:	2301      	movs	r3, #1
     a6a:	40b3      	lsls	r3, r6
     a6c:	430b      	orrs	r3, r1
     a6e:	6203      	str	r3, [r0, #32]


    if (clock_channel != 0) {
     a70:	2d00      	cmp	r5, #0
     a72:	d003      	beq.n	a7c <sercomClockEnable+0x20>
        // clock generators 3-8 have 8 division factor bits - DIV[7:0]
        gclkEnable(clock_channel, GCLK_SOURCE_DFLL48M, divider);
     a74:	2107      	movs	r1, #7
     a76:	0028      	movs	r0, r5
     a78:	4b09      	ldr	r3, [pc, #36]	; (aa0 <sercomClockEnable+0x44>)
     a7a:	4798      	blx	r3
    }


    // attach clock
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
     a7c:	0229      	lsls	r1, r5, #8
     a7e:	23f0      	movs	r3, #240	; 0xf0
     a80:	011b      	lsls	r3, r3, #4
     a82:	4019      	ands	r1, r3
     a84:	2380      	movs	r3, #128	; 0x80
     a86:	01db      	lsls	r3, r3, #7
     a88:	4319      	orrs	r1, r3
     a8a:	0023      	movs	r3, r4
     a8c:	3314      	adds	r3, #20
     a8e:	243f      	movs	r4, #63	; 0x3f
     a90:	401c      	ands	r4, r3
     a92:	430c      	orrs	r4, r1
     a94:	4b03      	ldr	r3, [pc, #12]	; (aa4 <sercomClockEnable+0x48>)
     a96:	805c      	strh	r4, [r3, #2]
                        GCLK_CLKCTRL_GEN(clock_channel) |
                        GCLK_CLKCTRL_ID(SERCOM0_GCLK_ID_CORE + id);
}
     a98:	bd70      	pop	{r4, r5, r6, pc}
     a9a:	46c0      	nop			; (mov r8, r8)
     a9c:	40000400 	.word	0x40000400
     aa0:	00000631 	.word	0x00000631
     aa4:	40000c00 	.word	0x40000c00

00000aa8 <sercomReset>:
//sample.c
void sampleTick(Altimeter *my_altimeter);

//dma.c
inline static Sercom* sercom(SercomId id) {
	return (Sercom*) (0x42000800U + id * 1024);
     aa8:	0280      	lsls	r0, r0, #10
     aaa:	4b05      	ldr	r3, [pc, #20]	; (ac0 <sercomReset+0x18>)
     aac:	469c      	mov	ip, r3
     aae:	4460      	add	r0, ip


void sercomReset(SercomId id) {
    sercom(id)->SPI.CTRLA.reg = SERCOM_SPI_CTRLA_SWRST;
     ab0:	2301      	movs	r3, #1
     ab2:	6003      	str	r3, [r0, #0]
    while(sercom(id)->SPI.CTRLA.reg & SERCOM_SPI_CTRLA_SWRST);
     ab4:	2201      	movs	r2, #1
     ab6:	6803      	ldr	r3, [r0, #0]
     ab8:	421a      	tst	r2, r3
     aba:	d1fc      	bne.n	ab6 <sercomReset+0xe>
}
     abc:	4770      	bx	lr
     abe:	46c0      	nop			; (mov r8, r8)
     ac0:	42000800 	.word	0x42000800

00000ac4 <sercomSpiMasterInit>:
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
}


void sercomSpiMasterInit(SercomId id, u32_t dipo, u32_t dopo, bool cpol, bool cpha, u8_t baud) {
     ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     ac6:	464f      	mov	r7, r9
     ac8:	4646      	mov	r6, r8
     aca:	b4c0      	push	{r6, r7}
     acc:	0006      	movs	r6, r0
     ace:	4688      	mov	r8, r1
     ad0:	0017      	movs	r7, r2
     ad2:	001d      	movs	r5, r3
     ad4:	ab08      	add	r3, sp, #32
     ad6:	781c      	ldrb	r4, [r3, #0]
     ad8:	ab09      	add	r3, sp, #36	; 0x24
     ada:	781b      	ldrb	r3, [r3, #0]
     adc:	4699      	mov	r9, r3
		
    sercomReset(id);
     ade:	4b15      	ldr	r3, [pc, #84]	; (b34 <sercomSpiMasterInit+0x70>)
     ae0:	4798      	blx	r3
     ae2:	02b0      	lsls	r0, r6, #10
     ae4:	4b14      	ldr	r3, [pc, #80]	; (b38 <sercomSpiMasterInit+0x74>)
     ae6:	469c      	mov	ip, r3
     ae8:	4460      	add	r0, ip
	
    sercom(id)->SPI.CTRLB.reg
        = SERCOM_SPI_CTRLB_RXEN;
     aea:	2380      	movs	r3, #128	; 0x80
     aec:	029b      	lsls	r3, r3, #10
     aee:	6043      	str	r3, [r0, #4]

    sercom(id)->SPI.BAUD.reg = baud;
     af0:	464b      	mov	r3, r9
     af2:	7303      	strb	r3, [r0, #12]

    sercom(id)->SPI.CTRLA.reg
        = SERCOM_SPI_CTRLA_ENABLE
          | SERCOM_SPI_CTRLA_MODE_SPI_MASTER
          | SERCOM_SPI_CTRLA_DIPO(dipo)
     af4:	4643      	mov	r3, r8
     af6:	0519      	lsls	r1, r3, #20
     af8:	23c0      	movs	r3, #192	; 0xc0
     afa:	039b      	lsls	r3, r3, #14
     afc:	4019      	ands	r1, r3
     afe:	000e      	movs	r6, r1
     b00:	0439      	lsls	r1, r7, #16
     b02:	23c0      	movs	r3, #192	; 0xc0
     b04:	029b      	lsls	r3, r3, #10
     b06:	4019      	ands	r1, r3
     b08:	230e      	movs	r3, #14
     b0a:	000a      	movs	r2, r1
     b0c:	431a      	orrs	r2, r3
          | SERCOM_SPI_CTRLA_DOPO(dopo)
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
     b0e:	1e6b      	subs	r3, r5, #1
     b10:	419d      	sbcs	r5, r3
     b12:	076d      	lsls	r5, r5, #29
     b14:	0031      	movs	r1, r6
     b16:	4311      	orrs	r1, r2
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
     b18:	1e63      	subs	r3, r4, #1
     b1a:	419c      	sbcs	r4, r3
     b1c:	0722      	lsls	r2, r4, #28
     b1e:	002c      	movs	r4, r5
     b20:	430c      	orrs	r4, r1
     b22:	4314      	orrs	r4, r2
        = SERCOM_SPI_CTRLB_RXEN;

    sercom(id)->SPI.BAUD.reg = baud;

    sercom(id)->SPI.CTRLA.reg
        = SERCOM_SPI_CTRLA_ENABLE
     b24:	6004      	str	r4, [r0, #0]
		};
	}
}

static inline void SPI_sync(SercomId id) {
	while  (sercom(id)->SPI.SYNCBUSY.bit.CTRLB);
     b26:	69c3      	ldr	r3, [r0, #28]
     b28:	075b      	lsls	r3, r3, #29
     b2a:	d4fc      	bmi.n	b26 <sercomSpiMasterInit+0x62>
          | SERCOM_SPI_CTRLA_DOPO(dopo)
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);

    SPI_sync(id);
}
     b2c:	bc0c      	pop	{r2, r3}
     b2e:	4690      	mov	r8, r2
     b30:	4699      	mov	r9, r3
     b32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     b34:	00000aa9 	.word	0x00000aa9
     b38:	42000800 	.word	0x42000800

00000b3c <spiDataTransfer>:
//sample.c
void sampleTick(Altimeter *my_altimeter);

//dma.c
inline static Sercom* sercom(SercomId id) {
	return (Sercom*) (0x42000800U + id * 1024);
     b3c:	0280      	lsls	r0, r0, #10
     b3e:	4b05      	ldr	r3, [pc, #20]	; (b54 <spiDataTransfer+0x18>)
     b40:	469c      	mov	ip, r3
     b42:	4460      	add	r0, ip
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
}

u8_t spiDataTransfer(SercomId id, u8_t data) {
    sercom(id)->SPI.DATA.reg = data;
     b44:	6281      	str	r1, [r0, #40]	; 0x28
    while(sercom(id)->SPI.INTFLAG.bit.RXC == 0);
     b46:	7e03      	ldrb	r3, [r0, #24]
     b48:	075b      	lsls	r3, r3, #29
     b4a:	d5fc      	bpl.n	b46 <spiDataTransfer+0xa>
    return sercom(id)->SPI.DATA.reg;
     b4c:	6a80      	ldr	r0, [r0, #40]	; 0x28
     b4e:	b2c0      	uxtb	r0, r0
}
     b50:	4770      	bx	lr
     b52:	46c0      	nop			; (mov r8, r8)
     b54:	42000800 	.word	0x42000800

00000b58 <__aeabi_lmul>:
     b58:	b5f0      	push	{r4, r5, r6, r7, lr}
     b5a:	464f      	mov	r7, r9
     b5c:	4646      	mov	r6, r8
     b5e:	b4c0      	push	{r6, r7}
     b60:	0416      	lsls	r6, r2, #16
     b62:	0c36      	lsrs	r6, r6, #16
     b64:	4699      	mov	r9, r3
     b66:	0033      	movs	r3, r6
     b68:	0405      	lsls	r5, r0, #16
     b6a:	0c2c      	lsrs	r4, r5, #16
     b6c:	0c07      	lsrs	r7, r0, #16
     b6e:	0c15      	lsrs	r5, r2, #16
     b70:	4363      	muls	r3, r4
     b72:	437e      	muls	r6, r7
     b74:	436f      	muls	r7, r5
     b76:	4365      	muls	r5, r4
     b78:	0c1c      	lsrs	r4, r3, #16
     b7a:	19ad      	adds	r5, r5, r6
     b7c:	1964      	adds	r4, r4, r5
     b7e:	469c      	mov	ip, r3
     b80:	42a6      	cmp	r6, r4
     b82:	d903      	bls.n	b8c <__aeabi_lmul+0x34>
     b84:	2380      	movs	r3, #128	; 0x80
     b86:	025b      	lsls	r3, r3, #9
     b88:	4698      	mov	r8, r3
     b8a:	4447      	add	r7, r8
     b8c:	4663      	mov	r3, ip
     b8e:	0c25      	lsrs	r5, r4, #16
     b90:	19ef      	adds	r7, r5, r7
     b92:	041d      	lsls	r5, r3, #16
     b94:	464b      	mov	r3, r9
     b96:	434a      	muls	r2, r1
     b98:	4343      	muls	r3, r0
     b9a:	0c2d      	lsrs	r5, r5, #16
     b9c:	0424      	lsls	r4, r4, #16
     b9e:	1964      	adds	r4, r4, r5
     ba0:	1899      	adds	r1, r3, r2
     ba2:	19c9      	adds	r1, r1, r7
     ba4:	0020      	movs	r0, r4
     ba6:	bc0c      	pop	{r2, r3}
     ba8:	4690      	mov	r8, r2
     baa:	4699      	mov	r9, r3
     bac:	bdf0      	pop	{r4, r5, r6, r7, pc}
     bae:	46c0      	nop			; (mov r8, r8)

00000bb0 <__aeabi_i2f>:
     bb0:	b570      	push	{r4, r5, r6, lr}
     bb2:	2800      	cmp	r0, #0
     bb4:	d030      	beq.n	c18 <__aeabi_i2f+0x68>
     bb6:	17c3      	asrs	r3, r0, #31
     bb8:	18c5      	adds	r5, r0, r3
     bba:	405d      	eors	r5, r3
     bbc:	0fc4      	lsrs	r4, r0, #31
     bbe:	0028      	movs	r0, r5
     bc0:	f000 fc18 	bl	13f4 <__clzsi2>
     bc4:	239e      	movs	r3, #158	; 0x9e
     bc6:	1a1b      	subs	r3, r3, r0
     bc8:	2b96      	cmp	r3, #150	; 0x96
     bca:	dc0d      	bgt.n	be8 <__aeabi_i2f+0x38>
     bcc:	2296      	movs	r2, #150	; 0x96
     bce:	1ad2      	subs	r2, r2, r3
     bd0:	4095      	lsls	r5, r2
     bd2:	026a      	lsls	r2, r5, #9
     bd4:	0a52      	lsrs	r2, r2, #9
     bd6:	b2d8      	uxtb	r0, r3
     bd8:	0252      	lsls	r2, r2, #9
     bda:	05c0      	lsls	r0, r0, #23
     bdc:	0a52      	lsrs	r2, r2, #9
     bde:	07e4      	lsls	r4, r4, #31
     be0:	4302      	orrs	r2, r0
     be2:	4322      	orrs	r2, r4
     be4:	0010      	movs	r0, r2
     be6:	bd70      	pop	{r4, r5, r6, pc}
     be8:	2b99      	cmp	r3, #153	; 0x99
     bea:	dc19      	bgt.n	c20 <__aeabi_i2f+0x70>
     bec:	2299      	movs	r2, #153	; 0x99
     bee:	1ad2      	subs	r2, r2, r3
     bf0:	4095      	lsls	r5, r2
     bf2:	4a12      	ldr	r2, [pc, #72]	; (c3c <__aeabi_i2f+0x8c>)
     bf4:	402a      	ands	r2, r5
     bf6:	0769      	lsls	r1, r5, #29
     bf8:	d004      	beq.n	c04 <__aeabi_i2f+0x54>
     bfa:	210f      	movs	r1, #15
     bfc:	400d      	ands	r5, r1
     bfe:	2d04      	cmp	r5, #4
     c00:	d000      	beq.n	c04 <__aeabi_i2f+0x54>
     c02:	3204      	adds	r2, #4
     c04:	0151      	lsls	r1, r2, #5
     c06:	d503      	bpl.n	c10 <__aeabi_i2f+0x60>
     c08:	4b0c      	ldr	r3, [pc, #48]	; (c3c <__aeabi_i2f+0x8c>)
     c0a:	401a      	ands	r2, r3
     c0c:	239f      	movs	r3, #159	; 0x9f
     c0e:	1a1b      	subs	r3, r3, r0
     c10:	0192      	lsls	r2, r2, #6
     c12:	0a52      	lsrs	r2, r2, #9
     c14:	b2d8      	uxtb	r0, r3
     c16:	e7df      	b.n	bd8 <__aeabi_i2f+0x28>
     c18:	2400      	movs	r4, #0
     c1a:	2000      	movs	r0, #0
     c1c:	2200      	movs	r2, #0
     c1e:	e7db      	b.n	bd8 <__aeabi_i2f+0x28>
     c20:	2205      	movs	r2, #5
     c22:	002e      	movs	r6, r5
     c24:	1a12      	subs	r2, r2, r0
     c26:	21b9      	movs	r1, #185	; 0xb9
     c28:	40d6      	lsrs	r6, r2
     c2a:	002a      	movs	r2, r5
     c2c:	1ac9      	subs	r1, r1, r3
     c2e:	408a      	lsls	r2, r1
     c30:	1e55      	subs	r5, r2, #1
     c32:	41aa      	sbcs	r2, r5
     c34:	0035      	movs	r5, r6
     c36:	4315      	orrs	r5, r2
     c38:	e7db      	b.n	bf2 <__aeabi_i2f+0x42>
     c3a:	46c0      	nop			; (mov r8, r8)
     c3c:	fbffffff 	.word	0xfbffffff

00000c40 <__aeabi_ui2f>:
     c40:	b570      	push	{r4, r5, r6, lr}
     c42:	1e04      	subs	r4, r0, #0
     c44:	d028      	beq.n	c98 <__aeabi_ui2f+0x58>
     c46:	f000 fbd5 	bl	13f4 <__clzsi2>
     c4a:	239e      	movs	r3, #158	; 0x9e
     c4c:	1a1b      	subs	r3, r3, r0
     c4e:	2b96      	cmp	r3, #150	; 0x96
     c50:	dc0a      	bgt.n	c68 <__aeabi_ui2f+0x28>
     c52:	2296      	movs	r2, #150	; 0x96
     c54:	1ad2      	subs	r2, r2, r3
     c56:	4094      	lsls	r4, r2
     c58:	0262      	lsls	r2, r4, #9
     c5a:	0a52      	lsrs	r2, r2, #9
     c5c:	b2d8      	uxtb	r0, r3
     c5e:	0252      	lsls	r2, r2, #9
     c60:	0a52      	lsrs	r2, r2, #9
     c62:	05c0      	lsls	r0, r0, #23
     c64:	4310      	orrs	r0, r2
     c66:	bd70      	pop	{r4, r5, r6, pc}
     c68:	2b99      	cmp	r3, #153	; 0x99
     c6a:	dc18      	bgt.n	c9e <__aeabi_ui2f+0x5e>
     c6c:	2299      	movs	r2, #153	; 0x99
     c6e:	1ad2      	subs	r2, r2, r3
     c70:	4094      	lsls	r4, r2
     c72:	4a11      	ldr	r2, [pc, #68]	; (cb8 <__aeabi_ui2f+0x78>)
     c74:	4022      	ands	r2, r4
     c76:	0761      	lsls	r1, r4, #29
     c78:	d004      	beq.n	c84 <__aeabi_ui2f+0x44>
     c7a:	210f      	movs	r1, #15
     c7c:	400c      	ands	r4, r1
     c7e:	2c04      	cmp	r4, #4
     c80:	d000      	beq.n	c84 <__aeabi_ui2f+0x44>
     c82:	3204      	adds	r2, #4
     c84:	0151      	lsls	r1, r2, #5
     c86:	d503      	bpl.n	c90 <__aeabi_ui2f+0x50>
     c88:	4b0b      	ldr	r3, [pc, #44]	; (cb8 <__aeabi_ui2f+0x78>)
     c8a:	401a      	ands	r2, r3
     c8c:	239f      	movs	r3, #159	; 0x9f
     c8e:	1a1b      	subs	r3, r3, r0
     c90:	0192      	lsls	r2, r2, #6
     c92:	0a52      	lsrs	r2, r2, #9
     c94:	b2d8      	uxtb	r0, r3
     c96:	e7e2      	b.n	c5e <__aeabi_ui2f+0x1e>
     c98:	2000      	movs	r0, #0
     c9a:	2200      	movs	r2, #0
     c9c:	e7df      	b.n	c5e <__aeabi_ui2f+0x1e>
     c9e:	2205      	movs	r2, #5
     ca0:	0025      	movs	r5, r4
     ca2:	1a12      	subs	r2, r2, r0
     ca4:	21b9      	movs	r1, #185	; 0xb9
     ca6:	40d5      	lsrs	r5, r2
     ca8:	0022      	movs	r2, r4
     caa:	1ac9      	subs	r1, r1, r3
     cac:	408a      	lsls	r2, r1
     cae:	1e54      	subs	r4, r2, #1
     cb0:	41a2      	sbcs	r2, r4
     cb2:	002c      	movs	r4, r5
     cb4:	4314      	orrs	r4, r2
     cb6:	e7dc      	b.n	c72 <__aeabi_ui2f+0x32>
     cb8:	fbffffff 	.word	0xfbffffff

00000cbc <__aeabi_dmul>:
     cbc:	b5f0      	push	{r4, r5, r6, r7, lr}
     cbe:	465f      	mov	r7, fp
     cc0:	4656      	mov	r6, sl
     cc2:	464d      	mov	r5, r9
     cc4:	4644      	mov	r4, r8
     cc6:	b4f0      	push	{r4, r5, r6, r7}
     cc8:	030d      	lsls	r5, r1, #12
     cca:	4699      	mov	r9, r3
     ccc:	004e      	lsls	r6, r1, #1
     cce:	0b2b      	lsrs	r3, r5, #12
     cd0:	b087      	sub	sp, #28
     cd2:	0007      	movs	r7, r0
     cd4:	4692      	mov	sl, r2
     cd6:	4680      	mov	r8, r0
     cd8:	469b      	mov	fp, r3
     cda:	0d76      	lsrs	r6, r6, #21
     cdc:	0fcc      	lsrs	r4, r1, #31
     cde:	2e00      	cmp	r6, #0
     ce0:	d069      	beq.n	db6 <__aeabi_dmul+0xfa>
     ce2:	4b6d      	ldr	r3, [pc, #436]	; (e98 <__aeabi_dmul+0x1dc>)
     ce4:	429e      	cmp	r6, r3
     ce6:	d035      	beq.n	d54 <__aeabi_dmul+0x98>
     ce8:	465b      	mov	r3, fp
     cea:	2280      	movs	r2, #128	; 0x80
     cec:	00dd      	lsls	r5, r3, #3
     cee:	0412      	lsls	r2, r2, #16
     cf0:	0f43      	lsrs	r3, r0, #29
     cf2:	4313      	orrs	r3, r2
     cf4:	432b      	orrs	r3, r5
     cf6:	469b      	mov	fp, r3
     cf8:	00c3      	lsls	r3, r0, #3
     cfa:	4698      	mov	r8, r3
     cfc:	4b67      	ldr	r3, [pc, #412]	; (e9c <__aeabi_dmul+0x1e0>)
     cfe:	2700      	movs	r7, #0
     d00:	469c      	mov	ip, r3
     d02:	2300      	movs	r3, #0
     d04:	4466      	add	r6, ip
     d06:	9301      	str	r3, [sp, #4]
     d08:	464a      	mov	r2, r9
     d0a:	0315      	lsls	r5, r2, #12
     d0c:	0050      	lsls	r0, r2, #1
     d0e:	0fd2      	lsrs	r2, r2, #31
     d10:	4653      	mov	r3, sl
     d12:	0b2d      	lsrs	r5, r5, #12
     d14:	0d40      	lsrs	r0, r0, #21
     d16:	4691      	mov	r9, r2
     d18:	d100      	bne.n	d1c <__aeabi_dmul+0x60>
     d1a:	e076      	b.n	e0a <__aeabi_dmul+0x14e>
     d1c:	4a5e      	ldr	r2, [pc, #376]	; (e98 <__aeabi_dmul+0x1dc>)
     d1e:	4290      	cmp	r0, r2
     d20:	d06c      	beq.n	dfc <__aeabi_dmul+0x140>
     d22:	2280      	movs	r2, #128	; 0x80
     d24:	0f5b      	lsrs	r3, r3, #29
     d26:	0412      	lsls	r2, r2, #16
     d28:	4313      	orrs	r3, r2
     d2a:	4a5c      	ldr	r2, [pc, #368]	; (e9c <__aeabi_dmul+0x1e0>)
     d2c:	00ed      	lsls	r5, r5, #3
     d2e:	4694      	mov	ip, r2
     d30:	431d      	orrs	r5, r3
     d32:	4653      	mov	r3, sl
     d34:	2200      	movs	r2, #0
     d36:	00db      	lsls	r3, r3, #3
     d38:	4460      	add	r0, ip
     d3a:	4649      	mov	r1, r9
     d3c:	1836      	adds	r6, r6, r0
     d3e:	1c70      	adds	r0, r6, #1
     d40:	4061      	eors	r1, r4
     d42:	9002      	str	r0, [sp, #8]
     d44:	4317      	orrs	r7, r2
     d46:	2f0f      	cmp	r7, #15
     d48:	d900      	bls.n	d4c <__aeabi_dmul+0x90>
     d4a:	e0af      	b.n	eac <__aeabi_dmul+0x1f0>
     d4c:	4854      	ldr	r0, [pc, #336]	; (ea0 <__aeabi_dmul+0x1e4>)
     d4e:	00bf      	lsls	r7, r7, #2
     d50:	59c7      	ldr	r7, [r0, r7]
     d52:	46bf      	mov	pc, r7
     d54:	465b      	mov	r3, fp
     d56:	431f      	orrs	r7, r3
     d58:	d000      	beq.n	d5c <__aeabi_dmul+0xa0>
     d5a:	e088      	b.n	e6e <__aeabi_dmul+0x1b2>
     d5c:	2300      	movs	r3, #0
     d5e:	469b      	mov	fp, r3
     d60:	4698      	mov	r8, r3
     d62:	3302      	adds	r3, #2
     d64:	2708      	movs	r7, #8
     d66:	9301      	str	r3, [sp, #4]
     d68:	e7ce      	b.n	d08 <__aeabi_dmul+0x4c>
     d6a:	4649      	mov	r1, r9
     d6c:	2a02      	cmp	r2, #2
     d6e:	d06a      	beq.n	e46 <__aeabi_dmul+0x18a>
     d70:	2a03      	cmp	r2, #3
     d72:	d100      	bne.n	d76 <__aeabi_dmul+0xba>
     d74:	e209      	b.n	118a <__aeabi_dmul+0x4ce>
     d76:	2a01      	cmp	r2, #1
     d78:	d000      	beq.n	d7c <__aeabi_dmul+0xc0>
     d7a:	e1bb      	b.n	10f4 <__aeabi_dmul+0x438>
     d7c:	4011      	ands	r1, r2
     d7e:	2200      	movs	r2, #0
     d80:	2300      	movs	r3, #0
     d82:	2500      	movs	r5, #0
     d84:	4690      	mov	r8, r2
     d86:	b2cc      	uxtb	r4, r1
     d88:	2100      	movs	r1, #0
     d8a:	032d      	lsls	r5, r5, #12
     d8c:	0d0a      	lsrs	r2, r1, #20
     d8e:	0512      	lsls	r2, r2, #20
     d90:	0b2d      	lsrs	r5, r5, #12
     d92:	4315      	orrs	r5, r2
     d94:	4a43      	ldr	r2, [pc, #268]	; (ea4 <__aeabi_dmul+0x1e8>)
     d96:	051b      	lsls	r3, r3, #20
     d98:	4015      	ands	r5, r2
     d9a:	431d      	orrs	r5, r3
     d9c:	006d      	lsls	r5, r5, #1
     d9e:	07e4      	lsls	r4, r4, #31
     da0:	086d      	lsrs	r5, r5, #1
     da2:	4325      	orrs	r5, r4
     da4:	4640      	mov	r0, r8
     da6:	0029      	movs	r1, r5
     da8:	b007      	add	sp, #28
     daa:	bc3c      	pop	{r2, r3, r4, r5}
     dac:	4690      	mov	r8, r2
     dae:	4699      	mov	r9, r3
     db0:	46a2      	mov	sl, r4
     db2:	46ab      	mov	fp, r5
     db4:	bdf0      	pop	{r4, r5, r6, r7, pc}
     db6:	4303      	orrs	r3, r0
     db8:	d052      	beq.n	e60 <__aeabi_dmul+0x1a4>
     dba:	465b      	mov	r3, fp
     dbc:	2b00      	cmp	r3, #0
     dbe:	d100      	bne.n	dc2 <__aeabi_dmul+0x106>
     dc0:	e18a      	b.n	10d8 <__aeabi_dmul+0x41c>
     dc2:	4658      	mov	r0, fp
     dc4:	f000 fb16 	bl	13f4 <__clzsi2>
     dc8:	0003      	movs	r3, r0
     dca:	3b0b      	subs	r3, #11
     dcc:	2b1c      	cmp	r3, #28
     dce:	dd00      	ble.n	dd2 <__aeabi_dmul+0x116>
     dd0:	e17b      	b.n	10ca <__aeabi_dmul+0x40e>
     dd2:	221d      	movs	r2, #29
     dd4:	1ad3      	subs	r3, r2, r3
     dd6:	003a      	movs	r2, r7
     dd8:	0001      	movs	r1, r0
     dda:	465d      	mov	r5, fp
     ddc:	40da      	lsrs	r2, r3
     dde:	3908      	subs	r1, #8
     de0:	408d      	lsls	r5, r1
     de2:	0013      	movs	r3, r2
     de4:	408f      	lsls	r7, r1
     de6:	432b      	orrs	r3, r5
     de8:	469b      	mov	fp, r3
     dea:	46b8      	mov	r8, r7
     dec:	4b2e      	ldr	r3, [pc, #184]	; (ea8 <__aeabi_dmul+0x1ec>)
     dee:	2700      	movs	r7, #0
     df0:	469c      	mov	ip, r3
     df2:	2300      	movs	r3, #0
     df4:	4460      	add	r0, ip
     df6:	4246      	negs	r6, r0
     df8:	9301      	str	r3, [sp, #4]
     dfa:	e785      	b.n	d08 <__aeabi_dmul+0x4c>
     dfc:	4652      	mov	r2, sl
     dfe:	432a      	orrs	r2, r5
     e00:	d12c      	bne.n	e5c <__aeabi_dmul+0x1a0>
     e02:	2500      	movs	r5, #0
     e04:	2300      	movs	r3, #0
     e06:	2202      	movs	r2, #2
     e08:	e797      	b.n	d3a <__aeabi_dmul+0x7e>
     e0a:	4652      	mov	r2, sl
     e0c:	432a      	orrs	r2, r5
     e0e:	d021      	beq.n	e54 <__aeabi_dmul+0x198>
     e10:	2d00      	cmp	r5, #0
     e12:	d100      	bne.n	e16 <__aeabi_dmul+0x15a>
     e14:	e154      	b.n	10c0 <__aeabi_dmul+0x404>
     e16:	0028      	movs	r0, r5
     e18:	f000 faec 	bl	13f4 <__clzsi2>
     e1c:	0003      	movs	r3, r0
     e1e:	3b0b      	subs	r3, #11
     e20:	2b1c      	cmp	r3, #28
     e22:	dd00      	ble.n	e26 <__aeabi_dmul+0x16a>
     e24:	e146      	b.n	10b4 <__aeabi_dmul+0x3f8>
     e26:	211d      	movs	r1, #29
     e28:	1acb      	subs	r3, r1, r3
     e2a:	4651      	mov	r1, sl
     e2c:	0002      	movs	r2, r0
     e2e:	40d9      	lsrs	r1, r3
     e30:	4653      	mov	r3, sl
     e32:	3a08      	subs	r2, #8
     e34:	4095      	lsls	r5, r2
     e36:	4093      	lsls	r3, r2
     e38:	430d      	orrs	r5, r1
     e3a:	4a1b      	ldr	r2, [pc, #108]	; (ea8 <__aeabi_dmul+0x1ec>)
     e3c:	4694      	mov	ip, r2
     e3e:	4460      	add	r0, ip
     e40:	4240      	negs	r0, r0
     e42:	2200      	movs	r2, #0
     e44:	e779      	b.n	d3a <__aeabi_dmul+0x7e>
     e46:	2401      	movs	r4, #1
     e48:	2200      	movs	r2, #0
     e4a:	400c      	ands	r4, r1
     e4c:	4b12      	ldr	r3, [pc, #72]	; (e98 <__aeabi_dmul+0x1dc>)
     e4e:	2500      	movs	r5, #0
     e50:	4690      	mov	r8, r2
     e52:	e799      	b.n	d88 <__aeabi_dmul+0xcc>
     e54:	2500      	movs	r5, #0
     e56:	2300      	movs	r3, #0
     e58:	2201      	movs	r2, #1
     e5a:	e76e      	b.n	d3a <__aeabi_dmul+0x7e>
     e5c:	2203      	movs	r2, #3
     e5e:	e76c      	b.n	d3a <__aeabi_dmul+0x7e>
     e60:	2300      	movs	r3, #0
     e62:	469b      	mov	fp, r3
     e64:	4698      	mov	r8, r3
     e66:	3301      	adds	r3, #1
     e68:	2704      	movs	r7, #4
     e6a:	9301      	str	r3, [sp, #4]
     e6c:	e74c      	b.n	d08 <__aeabi_dmul+0x4c>
     e6e:	2303      	movs	r3, #3
     e70:	270c      	movs	r7, #12
     e72:	9301      	str	r3, [sp, #4]
     e74:	e748      	b.n	d08 <__aeabi_dmul+0x4c>
     e76:	2300      	movs	r3, #0
     e78:	2580      	movs	r5, #128	; 0x80
     e7a:	4698      	mov	r8, r3
     e7c:	2400      	movs	r4, #0
     e7e:	032d      	lsls	r5, r5, #12
     e80:	4b05      	ldr	r3, [pc, #20]	; (e98 <__aeabi_dmul+0x1dc>)
     e82:	e781      	b.n	d88 <__aeabi_dmul+0xcc>
     e84:	465d      	mov	r5, fp
     e86:	4643      	mov	r3, r8
     e88:	9a01      	ldr	r2, [sp, #4]
     e8a:	e76f      	b.n	d6c <__aeabi_dmul+0xb0>
     e8c:	465d      	mov	r5, fp
     e8e:	4643      	mov	r3, r8
     e90:	0021      	movs	r1, r4
     e92:	9a01      	ldr	r2, [sp, #4]
     e94:	e76a      	b.n	d6c <__aeabi_dmul+0xb0>
     e96:	46c0      	nop			; (mov r8, r8)
     e98:	000007ff 	.word	0x000007ff
     e9c:	fffffc01 	.word	0xfffffc01
     ea0:	00001770 	.word	0x00001770
     ea4:	800fffff 	.word	0x800fffff
     ea8:	000003f3 	.word	0x000003f3
     eac:	4642      	mov	r2, r8
     eae:	0c12      	lsrs	r2, r2, #16
     eb0:	4691      	mov	r9, r2
     eb2:	0c1a      	lsrs	r2, r3, #16
     eb4:	4694      	mov	ip, r2
     eb6:	4642      	mov	r2, r8
     eb8:	0417      	lsls	r7, r2, #16
     eba:	464a      	mov	r2, r9
     ebc:	041b      	lsls	r3, r3, #16
     ebe:	0c1b      	lsrs	r3, r3, #16
     ec0:	435a      	muls	r2, r3
     ec2:	4660      	mov	r0, ip
     ec4:	4690      	mov	r8, r2
     ec6:	464a      	mov	r2, r9
     ec8:	4342      	muls	r2, r0
     eca:	0010      	movs	r0, r2
     ecc:	9203      	str	r2, [sp, #12]
     ece:	4662      	mov	r2, ip
     ed0:	001c      	movs	r4, r3
     ed2:	0c3f      	lsrs	r7, r7, #16
     ed4:	437a      	muls	r2, r7
     ed6:	437c      	muls	r4, r7
     ed8:	4442      	add	r2, r8
     eda:	9201      	str	r2, [sp, #4]
     edc:	0c22      	lsrs	r2, r4, #16
     ede:	4692      	mov	sl, r2
     ee0:	9a01      	ldr	r2, [sp, #4]
     ee2:	4452      	add	r2, sl
     ee4:	4590      	cmp	r8, r2
     ee6:	d906      	bls.n	ef6 <__aeabi_dmul+0x23a>
     ee8:	4682      	mov	sl, r0
     eea:	2080      	movs	r0, #128	; 0x80
     eec:	0240      	lsls	r0, r0, #9
     eee:	4680      	mov	r8, r0
     ef0:	44c2      	add	sl, r8
     ef2:	4650      	mov	r0, sl
     ef4:	9003      	str	r0, [sp, #12]
     ef6:	0c10      	lsrs	r0, r2, #16
     ef8:	9004      	str	r0, [sp, #16]
     efa:	4648      	mov	r0, r9
     efc:	0424      	lsls	r4, r4, #16
     efe:	0c24      	lsrs	r4, r4, #16
     f00:	0412      	lsls	r2, r2, #16
     f02:	1912      	adds	r2, r2, r4
     f04:	9205      	str	r2, [sp, #20]
     f06:	0c2a      	lsrs	r2, r5, #16
     f08:	042d      	lsls	r5, r5, #16
     f0a:	0c2d      	lsrs	r5, r5, #16
     f0c:	4368      	muls	r0, r5
     f0e:	002c      	movs	r4, r5
     f10:	4682      	mov	sl, r0
     f12:	4648      	mov	r0, r9
     f14:	437c      	muls	r4, r7
     f16:	4350      	muls	r0, r2
     f18:	4681      	mov	r9, r0
     f1a:	0c20      	lsrs	r0, r4, #16
     f1c:	4680      	mov	r8, r0
     f1e:	4357      	muls	r7, r2
     f20:	4457      	add	r7, sl
     f22:	4447      	add	r7, r8
     f24:	45ba      	cmp	sl, r7
     f26:	d903      	bls.n	f30 <__aeabi_dmul+0x274>
     f28:	2080      	movs	r0, #128	; 0x80
     f2a:	0240      	lsls	r0, r0, #9
     f2c:	4680      	mov	r8, r0
     f2e:	44c1      	add	r9, r8
     f30:	0c38      	lsrs	r0, r7, #16
     f32:	043f      	lsls	r7, r7, #16
     f34:	46b8      	mov	r8, r7
     f36:	4448      	add	r0, r9
     f38:	0424      	lsls	r4, r4, #16
     f3a:	0c24      	lsrs	r4, r4, #16
     f3c:	9001      	str	r0, [sp, #4]
     f3e:	9804      	ldr	r0, [sp, #16]
     f40:	44a0      	add	r8, r4
     f42:	4440      	add	r0, r8
     f44:	9004      	str	r0, [sp, #16]
     f46:	4658      	mov	r0, fp
     f48:	0c00      	lsrs	r0, r0, #16
     f4a:	4681      	mov	r9, r0
     f4c:	4658      	mov	r0, fp
     f4e:	0404      	lsls	r4, r0, #16
     f50:	0c20      	lsrs	r0, r4, #16
     f52:	4682      	mov	sl, r0
     f54:	0007      	movs	r7, r0
     f56:	4648      	mov	r0, r9
     f58:	435f      	muls	r7, r3
     f5a:	464c      	mov	r4, r9
     f5c:	4343      	muls	r3, r0
     f5e:	4660      	mov	r0, ip
     f60:	4360      	muls	r0, r4
     f62:	4664      	mov	r4, ip
     f64:	4683      	mov	fp, r0
     f66:	4650      	mov	r0, sl
     f68:	4344      	muls	r4, r0
     f6a:	0c38      	lsrs	r0, r7, #16
     f6c:	4684      	mov	ip, r0
     f6e:	18e4      	adds	r4, r4, r3
     f70:	4464      	add	r4, ip
     f72:	42a3      	cmp	r3, r4
     f74:	d903      	bls.n	f7e <__aeabi_dmul+0x2c2>
     f76:	2380      	movs	r3, #128	; 0x80
     f78:	025b      	lsls	r3, r3, #9
     f7a:	469c      	mov	ip, r3
     f7c:	44e3      	add	fp, ip
     f7e:	4648      	mov	r0, r9
     f80:	043f      	lsls	r7, r7, #16
     f82:	0c23      	lsrs	r3, r4, #16
     f84:	0c3f      	lsrs	r7, r7, #16
     f86:	0424      	lsls	r4, r4, #16
     f88:	19e4      	adds	r4, r4, r7
     f8a:	4657      	mov	r7, sl
     f8c:	4368      	muls	r0, r5
     f8e:	436f      	muls	r7, r5
     f90:	4684      	mov	ip, r0
     f92:	464d      	mov	r5, r9
     f94:	4650      	mov	r0, sl
     f96:	4355      	muls	r5, r2
     f98:	4342      	muls	r2, r0
     f9a:	0c38      	lsrs	r0, r7, #16
     f9c:	4681      	mov	r9, r0
     f9e:	4462      	add	r2, ip
     fa0:	444a      	add	r2, r9
     fa2:	445b      	add	r3, fp
     fa4:	4594      	cmp	ip, r2
     fa6:	d903      	bls.n	fb0 <__aeabi_dmul+0x2f4>
     fa8:	2080      	movs	r0, #128	; 0x80
     faa:	0240      	lsls	r0, r0, #9
     fac:	4684      	mov	ip, r0
     fae:	4465      	add	r5, ip
     fb0:	9803      	ldr	r0, [sp, #12]
     fb2:	043f      	lsls	r7, r7, #16
     fb4:	4683      	mov	fp, r0
     fb6:	9804      	ldr	r0, [sp, #16]
     fb8:	0c3f      	lsrs	r7, r7, #16
     fba:	4684      	mov	ip, r0
     fbc:	44e3      	add	fp, ip
     fbe:	45c3      	cmp	fp, r8
     fc0:	4180      	sbcs	r0, r0
     fc2:	4240      	negs	r0, r0
     fc4:	4682      	mov	sl, r0
     fc6:	0410      	lsls	r0, r2, #16
     fc8:	4684      	mov	ip, r0
     fca:	9801      	ldr	r0, [sp, #4]
     fcc:	4467      	add	r7, ip
     fce:	4684      	mov	ip, r0
     fd0:	4467      	add	r7, ip
     fd2:	44a3      	add	fp, r4
     fd4:	46bc      	mov	ip, r7
     fd6:	45a3      	cmp	fp, r4
     fd8:	41a4      	sbcs	r4, r4
     fda:	4699      	mov	r9, r3
     fdc:	44d4      	add	ip, sl
     fde:	4264      	negs	r4, r4
     fe0:	4287      	cmp	r7, r0
     fe2:	41bf      	sbcs	r7, r7
     fe4:	45d4      	cmp	ip, sl
     fe6:	4180      	sbcs	r0, r0
     fe8:	44e1      	add	r9, ip
     fea:	46a0      	mov	r8, r4
     fec:	4599      	cmp	r9, r3
     fee:	419b      	sbcs	r3, r3
     ff0:	427f      	negs	r7, r7
     ff2:	4240      	negs	r0, r0
     ff4:	44c8      	add	r8, r9
     ff6:	4307      	orrs	r7, r0
     ff8:	0c12      	lsrs	r2, r2, #16
     ffa:	18ba      	adds	r2, r7, r2
     ffc:	45a0      	cmp	r8, r4
     ffe:	41a4      	sbcs	r4, r4
    1000:	425f      	negs	r7, r3
    1002:	003b      	movs	r3, r7
    1004:	4264      	negs	r4, r4
    1006:	4323      	orrs	r3, r4
    1008:	18d7      	adds	r7, r2, r3
    100a:	4643      	mov	r3, r8
    100c:	197d      	adds	r5, r7, r5
    100e:	0ddb      	lsrs	r3, r3, #23
    1010:	026d      	lsls	r5, r5, #9
    1012:	431d      	orrs	r5, r3
    1014:	465b      	mov	r3, fp
    1016:	025a      	lsls	r2, r3, #9
    1018:	9b05      	ldr	r3, [sp, #20]
    101a:	431a      	orrs	r2, r3
    101c:	1e53      	subs	r3, r2, #1
    101e:	419a      	sbcs	r2, r3
    1020:	465b      	mov	r3, fp
    1022:	0ddb      	lsrs	r3, r3, #23
    1024:	431a      	orrs	r2, r3
    1026:	4643      	mov	r3, r8
    1028:	025b      	lsls	r3, r3, #9
    102a:	4313      	orrs	r3, r2
    102c:	01ea      	lsls	r2, r5, #7
    102e:	d507      	bpl.n	1040 <__aeabi_dmul+0x384>
    1030:	2201      	movs	r2, #1
    1032:	085c      	lsrs	r4, r3, #1
    1034:	4013      	ands	r3, r2
    1036:	4323      	orrs	r3, r4
    1038:	07ea      	lsls	r2, r5, #31
    103a:	9e02      	ldr	r6, [sp, #8]
    103c:	4313      	orrs	r3, r2
    103e:	086d      	lsrs	r5, r5, #1
    1040:	4a57      	ldr	r2, [pc, #348]	; (11a0 <__aeabi_dmul+0x4e4>)
    1042:	18b2      	adds	r2, r6, r2
    1044:	2a00      	cmp	r2, #0
    1046:	dd4b      	ble.n	10e0 <__aeabi_dmul+0x424>
    1048:	0758      	lsls	r0, r3, #29
    104a:	d009      	beq.n	1060 <__aeabi_dmul+0x3a4>
    104c:	200f      	movs	r0, #15
    104e:	4018      	ands	r0, r3
    1050:	2804      	cmp	r0, #4
    1052:	d005      	beq.n	1060 <__aeabi_dmul+0x3a4>
    1054:	1d18      	adds	r0, r3, #4
    1056:	4298      	cmp	r0, r3
    1058:	419b      	sbcs	r3, r3
    105a:	425b      	negs	r3, r3
    105c:	18ed      	adds	r5, r5, r3
    105e:	0003      	movs	r3, r0
    1060:	01e8      	lsls	r0, r5, #7
    1062:	d504      	bpl.n	106e <__aeabi_dmul+0x3b2>
    1064:	4a4f      	ldr	r2, [pc, #316]	; (11a4 <__aeabi_dmul+0x4e8>)
    1066:	4015      	ands	r5, r2
    1068:	2280      	movs	r2, #128	; 0x80
    106a:	00d2      	lsls	r2, r2, #3
    106c:	18b2      	adds	r2, r6, r2
    106e:	484e      	ldr	r0, [pc, #312]	; (11a8 <__aeabi_dmul+0x4ec>)
    1070:	4282      	cmp	r2, r0
    1072:	dd00      	ble.n	1076 <__aeabi_dmul+0x3ba>
    1074:	e6e7      	b.n	e46 <__aeabi_dmul+0x18a>
    1076:	2401      	movs	r4, #1
    1078:	08db      	lsrs	r3, r3, #3
    107a:	0768      	lsls	r0, r5, #29
    107c:	4318      	orrs	r0, r3
    107e:	026d      	lsls	r5, r5, #9
    1080:	0553      	lsls	r3, r2, #21
    1082:	4680      	mov	r8, r0
    1084:	0b2d      	lsrs	r5, r5, #12
    1086:	0d5b      	lsrs	r3, r3, #21
    1088:	400c      	ands	r4, r1
    108a:	e67d      	b.n	d88 <__aeabi_dmul+0xcc>
    108c:	2280      	movs	r2, #128	; 0x80
    108e:	4659      	mov	r1, fp
    1090:	0312      	lsls	r2, r2, #12
    1092:	4211      	tst	r1, r2
    1094:	d008      	beq.n	10a8 <__aeabi_dmul+0x3ec>
    1096:	4215      	tst	r5, r2
    1098:	d106      	bne.n	10a8 <__aeabi_dmul+0x3ec>
    109a:	4315      	orrs	r5, r2
    109c:	032d      	lsls	r5, r5, #12
    109e:	4698      	mov	r8, r3
    10a0:	0b2d      	lsrs	r5, r5, #12
    10a2:	464c      	mov	r4, r9
    10a4:	4b41      	ldr	r3, [pc, #260]	; (11ac <__aeabi_dmul+0x4f0>)
    10a6:	e66f      	b.n	d88 <__aeabi_dmul+0xcc>
    10a8:	465d      	mov	r5, fp
    10aa:	4315      	orrs	r5, r2
    10ac:	032d      	lsls	r5, r5, #12
    10ae:	0b2d      	lsrs	r5, r5, #12
    10b0:	4b3e      	ldr	r3, [pc, #248]	; (11ac <__aeabi_dmul+0x4f0>)
    10b2:	e669      	b.n	d88 <__aeabi_dmul+0xcc>
    10b4:	0003      	movs	r3, r0
    10b6:	4655      	mov	r5, sl
    10b8:	3b28      	subs	r3, #40	; 0x28
    10ba:	409d      	lsls	r5, r3
    10bc:	2300      	movs	r3, #0
    10be:	e6bc      	b.n	e3a <__aeabi_dmul+0x17e>
    10c0:	4650      	mov	r0, sl
    10c2:	f000 f997 	bl	13f4 <__clzsi2>
    10c6:	3020      	adds	r0, #32
    10c8:	e6a8      	b.n	e1c <__aeabi_dmul+0x160>
    10ca:	0003      	movs	r3, r0
    10cc:	3b28      	subs	r3, #40	; 0x28
    10ce:	409f      	lsls	r7, r3
    10d0:	2300      	movs	r3, #0
    10d2:	46bb      	mov	fp, r7
    10d4:	4698      	mov	r8, r3
    10d6:	e689      	b.n	dec <__aeabi_dmul+0x130>
    10d8:	f000 f98c 	bl	13f4 <__clzsi2>
    10dc:	3020      	adds	r0, #32
    10de:	e673      	b.n	dc8 <__aeabi_dmul+0x10c>
    10e0:	2401      	movs	r4, #1
    10e2:	1aa6      	subs	r6, r4, r2
    10e4:	2e38      	cmp	r6, #56	; 0x38
    10e6:	dd07      	ble.n	10f8 <__aeabi_dmul+0x43c>
    10e8:	2200      	movs	r2, #0
    10ea:	400c      	ands	r4, r1
    10ec:	2300      	movs	r3, #0
    10ee:	2500      	movs	r5, #0
    10f0:	4690      	mov	r8, r2
    10f2:	e649      	b.n	d88 <__aeabi_dmul+0xcc>
    10f4:	9e02      	ldr	r6, [sp, #8]
    10f6:	e7a3      	b.n	1040 <__aeabi_dmul+0x384>
    10f8:	2e1f      	cmp	r6, #31
    10fa:	dc20      	bgt.n	113e <__aeabi_dmul+0x482>
    10fc:	2220      	movs	r2, #32
    10fe:	002c      	movs	r4, r5
    1100:	0018      	movs	r0, r3
    1102:	1b92      	subs	r2, r2, r6
    1104:	40f0      	lsrs	r0, r6
    1106:	4094      	lsls	r4, r2
    1108:	4093      	lsls	r3, r2
    110a:	4304      	orrs	r4, r0
    110c:	1e58      	subs	r0, r3, #1
    110e:	4183      	sbcs	r3, r0
    1110:	431c      	orrs	r4, r3
    1112:	40f5      	lsrs	r5, r6
    1114:	0763      	lsls	r3, r4, #29
    1116:	d009      	beq.n	112c <__aeabi_dmul+0x470>
    1118:	230f      	movs	r3, #15
    111a:	4023      	ands	r3, r4
    111c:	2b04      	cmp	r3, #4
    111e:	d005      	beq.n	112c <__aeabi_dmul+0x470>
    1120:	0023      	movs	r3, r4
    1122:	1d1c      	adds	r4, r3, #4
    1124:	429c      	cmp	r4, r3
    1126:	4192      	sbcs	r2, r2
    1128:	4252      	negs	r2, r2
    112a:	18ad      	adds	r5, r5, r2
    112c:	022b      	lsls	r3, r5, #8
    112e:	d51f      	bpl.n	1170 <__aeabi_dmul+0x4b4>
    1130:	2401      	movs	r4, #1
    1132:	2200      	movs	r2, #0
    1134:	400c      	ands	r4, r1
    1136:	2301      	movs	r3, #1
    1138:	2500      	movs	r5, #0
    113a:	4690      	mov	r8, r2
    113c:	e624      	b.n	d88 <__aeabi_dmul+0xcc>
    113e:	201f      	movs	r0, #31
    1140:	002c      	movs	r4, r5
    1142:	4240      	negs	r0, r0
    1144:	1a82      	subs	r2, r0, r2
    1146:	40d4      	lsrs	r4, r2
    1148:	2e20      	cmp	r6, #32
    114a:	d01c      	beq.n	1186 <__aeabi_dmul+0x4ca>
    114c:	2240      	movs	r2, #64	; 0x40
    114e:	1b96      	subs	r6, r2, r6
    1150:	40b5      	lsls	r5, r6
    1152:	432b      	orrs	r3, r5
    1154:	1e58      	subs	r0, r3, #1
    1156:	4183      	sbcs	r3, r0
    1158:	2007      	movs	r0, #7
    115a:	4323      	orrs	r3, r4
    115c:	4018      	ands	r0, r3
    115e:	2500      	movs	r5, #0
    1160:	2800      	cmp	r0, #0
    1162:	d009      	beq.n	1178 <__aeabi_dmul+0x4bc>
    1164:	220f      	movs	r2, #15
    1166:	2500      	movs	r5, #0
    1168:	401a      	ands	r2, r3
    116a:	001c      	movs	r4, r3
    116c:	2a04      	cmp	r2, #4
    116e:	d1d8      	bne.n	1122 <__aeabi_dmul+0x466>
    1170:	0023      	movs	r3, r4
    1172:	0768      	lsls	r0, r5, #29
    1174:	026d      	lsls	r5, r5, #9
    1176:	0b2d      	lsrs	r5, r5, #12
    1178:	2401      	movs	r4, #1
    117a:	08db      	lsrs	r3, r3, #3
    117c:	4303      	orrs	r3, r0
    117e:	4698      	mov	r8, r3
    1180:	400c      	ands	r4, r1
    1182:	2300      	movs	r3, #0
    1184:	e600      	b.n	d88 <__aeabi_dmul+0xcc>
    1186:	2500      	movs	r5, #0
    1188:	e7e3      	b.n	1152 <__aeabi_dmul+0x496>
    118a:	2280      	movs	r2, #128	; 0x80
    118c:	2401      	movs	r4, #1
    118e:	0312      	lsls	r2, r2, #12
    1190:	4315      	orrs	r5, r2
    1192:	032d      	lsls	r5, r5, #12
    1194:	4698      	mov	r8, r3
    1196:	0b2d      	lsrs	r5, r5, #12
    1198:	400c      	ands	r4, r1
    119a:	4b04      	ldr	r3, [pc, #16]	; (11ac <__aeabi_dmul+0x4f0>)
    119c:	e5f4      	b.n	d88 <__aeabi_dmul+0xcc>
    119e:	46c0      	nop			; (mov r8, r8)
    11a0:	000003ff 	.word	0x000003ff
    11a4:	feffffff 	.word	0xfeffffff
    11a8:	000007fe 	.word	0x000007fe
    11ac:	000007ff 	.word	0x000007ff

000011b0 <__aeabi_i2d>:
    11b0:	b570      	push	{r4, r5, r6, lr}
    11b2:	2800      	cmp	r0, #0
    11b4:	d030      	beq.n	1218 <__aeabi_i2d+0x68>
    11b6:	17c3      	asrs	r3, r0, #31
    11b8:	18c4      	adds	r4, r0, r3
    11ba:	405c      	eors	r4, r3
    11bc:	0fc5      	lsrs	r5, r0, #31
    11be:	0020      	movs	r0, r4
    11c0:	f000 f918 	bl	13f4 <__clzsi2>
    11c4:	4b17      	ldr	r3, [pc, #92]	; (1224 <__aeabi_i2d+0x74>)
    11c6:	4a18      	ldr	r2, [pc, #96]	; (1228 <__aeabi_i2d+0x78>)
    11c8:	1a1b      	subs	r3, r3, r0
    11ca:	1ad2      	subs	r2, r2, r3
    11cc:	2a1f      	cmp	r2, #31
    11ce:	dd18      	ble.n	1202 <__aeabi_i2d+0x52>
    11d0:	4a16      	ldr	r2, [pc, #88]	; (122c <__aeabi_i2d+0x7c>)
    11d2:	1ad2      	subs	r2, r2, r3
    11d4:	4094      	lsls	r4, r2
    11d6:	2200      	movs	r2, #0
    11d8:	0324      	lsls	r4, r4, #12
    11da:	055b      	lsls	r3, r3, #21
    11dc:	0b24      	lsrs	r4, r4, #12
    11de:	0d5b      	lsrs	r3, r3, #21
    11e0:	2100      	movs	r1, #0
    11e2:	0010      	movs	r0, r2
    11e4:	0324      	lsls	r4, r4, #12
    11e6:	0d0a      	lsrs	r2, r1, #20
    11e8:	0512      	lsls	r2, r2, #20
    11ea:	0b24      	lsrs	r4, r4, #12
    11ec:	4314      	orrs	r4, r2
    11ee:	4a10      	ldr	r2, [pc, #64]	; (1230 <__aeabi_i2d+0x80>)
    11f0:	051b      	lsls	r3, r3, #20
    11f2:	4014      	ands	r4, r2
    11f4:	431c      	orrs	r4, r3
    11f6:	0064      	lsls	r4, r4, #1
    11f8:	07ed      	lsls	r5, r5, #31
    11fa:	0864      	lsrs	r4, r4, #1
    11fc:	432c      	orrs	r4, r5
    11fe:	0021      	movs	r1, r4
    1200:	bd70      	pop	{r4, r5, r6, pc}
    1202:	0021      	movs	r1, r4
    1204:	4091      	lsls	r1, r2
    1206:	000a      	movs	r2, r1
    1208:	210b      	movs	r1, #11
    120a:	1a08      	subs	r0, r1, r0
    120c:	40c4      	lsrs	r4, r0
    120e:	055b      	lsls	r3, r3, #21
    1210:	0324      	lsls	r4, r4, #12
    1212:	0b24      	lsrs	r4, r4, #12
    1214:	0d5b      	lsrs	r3, r3, #21
    1216:	e7e3      	b.n	11e0 <__aeabi_i2d+0x30>
    1218:	2500      	movs	r5, #0
    121a:	2300      	movs	r3, #0
    121c:	2400      	movs	r4, #0
    121e:	2200      	movs	r2, #0
    1220:	e7de      	b.n	11e0 <__aeabi_i2d+0x30>
    1222:	46c0      	nop			; (mov r8, r8)
    1224:	0000041e 	.word	0x0000041e
    1228:	00000433 	.word	0x00000433
    122c:	00000413 	.word	0x00000413
    1230:	800fffff 	.word	0x800fffff

00001234 <__aeabi_f2d>:
    1234:	0042      	lsls	r2, r0, #1
    1236:	0e12      	lsrs	r2, r2, #24
    1238:	1c51      	adds	r1, r2, #1
    123a:	0243      	lsls	r3, r0, #9
    123c:	b2c9      	uxtb	r1, r1
    123e:	b570      	push	{r4, r5, r6, lr}
    1240:	0a5d      	lsrs	r5, r3, #9
    1242:	0fc4      	lsrs	r4, r0, #31
    1244:	2901      	cmp	r1, #1
    1246:	dd15      	ble.n	1274 <__aeabi_f2d+0x40>
    1248:	21e0      	movs	r1, #224	; 0xe0
    124a:	0089      	lsls	r1, r1, #2
    124c:	468c      	mov	ip, r1
    124e:	076d      	lsls	r5, r5, #29
    1250:	0b1b      	lsrs	r3, r3, #12
    1252:	4462      	add	r2, ip
    1254:	2100      	movs	r1, #0
    1256:	0028      	movs	r0, r5
    1258:	0d0d      	lsrs	r5, r1, #20
    125a:	052d      	lsls	r5, r5, #20
    125c:	432b      	orrs	r3, r5
    125e:	4d1c      	ldr	r5, [pc, #112]	; (12d0 <__aeabi_f2d+0x9c>)
    1260:	0552      	lsls	r2, r2, #21
    1262:	402b      	ands	r3, r5
    1264:	0852      	lsrs	r2, r2, #1
    1266:	4313      	orrs	r3, r2
    1268:	005b      	lsls	r3, r3, #1
    126a:	07e4      	lsls	r4, r4, #31
    126c:	085b      	lsrs	r3, r3, #1
    126e:	4323      	orrs	r3, r4
    1270:	0019      	movs	r1, r3
    1272:	bd70      	pop	{r4, r5, r6, pc}
    1274:	2a00      	cmp	r2, #0
    1276:	d115      	bne.n	12a4 <__aeabi_f2d+0x70>
    1278:	2d00      	cmp	r5, #0
    127a:	d01f      	beq.n	12bc <__aeabi_f2d+0x88>
    127c:	0028      	movs	r0, r5
    127e:	f000 f8b9 	bl	13f4 <__clzsi2>
    1282:	280a      	cmp	r0, #10
    1284:	dc1d      	bgt.n	12c2 <__aeabi_f2d+0x8e>
    1286:	230b      	movs	r3, #11
    1288:	002a      	movs	r2, r5
    128a:	1a1b      	subs	r3, r3, r0
    128c:	40da      	lsrs	r2, r3
    128e:	0013      	movs	r3, r2
    1290:	0002      	movs	r2, r0
    1292:	3215      	adds	r2, #21
    1294:	4095      	lsls	r5, r2
    1296:	4a0f      	ldr	r2, [pc, #60]	; (12d4 <__aeabi_f2d+0xa0>)
    1298:	031b      	lsls	r3, r3, #12
    129a:	1a12      	subs	r2, r2, r0
    129c:	0552      	lsls	r2, r2, #21
    129e:	0b1b      	lsrs	r3, r3, #12
    12a0:	0d52      	lsrs	r2, r2, #21
    12a2:	e7d7      	b.n	1254 <__aeabi_f2d+0x20>
    12a4:	2d00      	cmp	r5, #0
    12a6:	d006      	beq.n	12b6 <__aeabi_f2d+0x82>
    12a8:	2280      	movs	r2, #128	; 0x80
    12aa:	0b1b      	lsrs	r3, r3, #12
    12ac:	0312      	lsls	r2, r2, #12
    12ae:	4313      	orrs	r3, r2
    12b0:	076d      	lsls	r5, r5, #29
    12b2:	4a09      	ldr	r2, [pc, #36]	; (12d8 <__aeabi_f2d+0xa4>)
    12b4:	e7ce      	b.n	1254 <__aeabi_f2d+0x20>
    12b6:	4a08      	ldr	r2, [pc, #32]	; (12d8 <__aeabi_f2d+0xa4>)
    12b8:	2300      	movs	r3, #0
    12ba:	e7cb      	b.n	1254 <__aeabi_f2d+0x20>
    12bc:	2200      	movs	r2, #0
    12be:	2300      	movs	r3, #0
    12c0:	e7c8      	b.n	1254 <__aeabi_f2d+0x20>
    12c2:	0003      	movs	r3, r0
    12c4:	3b0b      	subs	r3, #11
    12c6:	409d      	lsls	r5, r3
    12c8:	002b      	movs	r3, r5
    12ca:	2500      	movs	r5, #0
    12cc:	e7e3      	b.n	1296 <__aeabi_f2d+0x62>
    12ce:	46c0      	nop			; (mov r8, r8)
    12d0:	800fffff 	.word	0x800fffff
    12d4:	00000389 	.word	0x00000389
    12d8:	000007ff 	.word	0x000007ff

000012dc <__aeabi_d2f>:
    12dc:	004b      	lsls	r3, r1, #1
    12de:	b570      	push	{r4, r5, r6, lr}
    12e0:	0d5e      	lsrs	r6, r3, #21
    12e2:	030c      	lsls	r4, r1, #12
    12e4:	1c75      	adds	r5, r6, #1
    12e6:	0a64      	lsrs	r4, r4, #9
    12e8:	0f42      	lsrs	r2, r0, #29
    12ea:	056d      	lsls	r5, r5, #21
    12ec:	4322      	orrs	r2, r4
    12ee:	0fc9      	lsrs	r1, r1, #31
    12f0:	00c4      	lsls	r4, r0, #3
    12f2:	0d6d      	lsrs	r5, r5, #21
    12f4:	2d01      	cmp	r5, #1
    12f6:	dd2a      	ble.n	134e <__aeabi_d2f+0x72>
    12f8:	4b3b      	ldr	r3, [pc, #236]	; (13e8 <__aeabi_d2f+0x10c>)
    12fa:	18f3      	adds	r3, r6, r3
    12fc:	2bfe      	cmp	r3, #254	; 0xfe
    12fe:	dc1a      	bgt.n	1336 <__aeabi_d2f+0x5a>
    1300:	2b00      	cmp	r3, #0
    1302:	dd42      	ble.n	138a <__aeabi_d2f+0xae>
    1304:	0180      	lsls	r0, r0, #6
    1306:	1e45      	subs	r5, r0, #1
    1308:	41a8      	sbcs	r0, r5
    130a:	00d2      	lsls	r2, r2, #3
    130c:	4310      	orrs	r0, r2
    130e:	0f62      	lsrs	r2, r4, #29
    1310:	4302      	orrs	r2, r0
    1312:	0750      	lsls	r0, r2, #29
    1314:	d004      	beq.n	1320 <__aeabi_d2f+0x44>
    1316:	200f      	movs	r0, #15
    1318:	4010      	ands	r0, r2
    131a:	2804      	cmp	r0, #4
    131c:	d000      	beq.n	1320 <__aeabi_d2f+0x44>
    131e:	3204      	adds	r2, #4
    1320:	2080      	movs	r0, #128	; 0x80
    1322:	04c0      	lsls	r0, r0, #19
    1324:	4010      	ands	r0, r2
    1326:	d021      	beq.n	136c <__aeabi_d2f+0x90>
    1328:	3301      	adds	r3, #1
    132a:	2bff      	cmp	r3, #255	; 0xff
    132c:	d003      	beq.n	1336 <__aeabi_d2f+0x5a>
    132e:	0192      	lsls	r2, r2, #6
    1330:	0a52      	lsrs	r2, r2, #9
    1332:	b2db      	uxtb	r3, r3
    1334:	e001      	b.n	133a <__aeabi_d2f+0x5e>
    1336:	23ff      	movs	r3, #255	; 0xff
    1338:	2200      	movs	r2, #0
    133a:	0252      	lsls	r2, r2, #9
    133c:	0a52      	lsrs	r2, r2, #9
    133e:	05db      	lsls	r3, r3, #23
    1340:	4313      	orrs	r3, r2
    1342:	005b      	lsls	r3, r3, #1
    1344:	07c9      	lsls	r1, r1, #31
    1346:	085b      	lsrs	r3, r3, #1
    1348:	430b      	orrs	r3, r1
    134a:	0018      	movs	r0, r3
    134c:	bd70      	pop	{r4, r5, r6, pc}
    134e:	2e00      	cmp	r6, #0
    1350:	d007      	beq.n	1362 <__aeabi_d2f+0x86>
    1352:	4314      	orrs	r4, r2
    1354:	d0ef      	beq.n	1336 <__aeabi_d2f+0x5a>
    1356:	2080      	movs	r0, #128	; 0x80
    1358:	00d2      	lsls	r2, r2, #3
    135a:	0480      	lsls	r0, r0, #18
    135c:	4302      	orrs	r2, r0
    135e:	23ff      	movs	r3, #255	; 0xff
    1360:	e7d7      	b.n	1312 <__aeabi_d2f+0x36>
    1362:	4322      	orrs	r2, r4
    1364:	2300      	movs	r3, #0
    1366:	2a00      	cmp	r2, #0
    1368:	d003      	beq.n	1372 <__aeabi_d2f+0x96>
    136a:	2205      	movs	r2, #5
    136c:	08d2      	lsrs	r2, r2, #3
    136e:	2bff      	cmp	r3, #255	; 0xff
    1370:	d003      	beq.n	137a <__aeabi_d2f+0x9e>
    1372:	0252      	lsls	r2, r2, #9
    1374:	0a52      	lsrs	r2, r2, #9
    1376:	b2db      	uxtb	r3, r3
    1378:	e7df      	b.n	133a <__aeabi_d2f+0x5e>
    137a:	2a00      	cmp	r2, #0
    137c:	d032      	beq.n	13e4 <__aeabi_d2f+0x108>
    137e:	2080      	movs	r0, #128	; 0x80
    1380:	03c0      	lsls	r0, r0, #15
    1382:	4302      	orrs	r2, r0
    1384:	0252      	lsls	r2, r2, #9
    1386:	0a52      	lsrs	r2, r2, #9
    1388:	e7d7      	b.n	133a <__aeabi_d2f+0x5e>
    138a:	0018      	movs	r0, r3
    138c:	3017      	adds	r0, #23
    138e:	db14      	blt.n	13ba <__aeabi_d2f+0xde>
    1390:	2080      	movs	r0, #128	; 0x80
    1392:	0400      	lsls	r0, r0, #16
    1394:	4302      	orrs	r2, r0
    1396:	201e      	movs	r0, #30
    1398:	1ac0      	subs	r0, r0, r3
    139a:	281f      	cmp	r0, #31
    139c:	dc0f      	bgt.n	13be <__aeabi_d2f+0xe2>
    139e:	0025      	movs	r5, r4
    13a0:	4b12      	ldr	r3, [pc, #72]	; (13ec <__aeabi_d2f+0x110>)
    13a2:	18f3      	adds	r3, r6, r3
    13a4:	409d      	lsls	r5, r3
    13a6:	1e6e      	subs	r6, r5, #1
    13a8:	41b5      	sbcs	r5, r6
    13aa:	409a      	lsls	r2, r3
    13ac:	002b      	movs	r3, r5
    13ae:	4313      	orrs	r3, r2
    13b0:	0022      	movs	r2, r4
    13b2:	40c2      	lsrs	r2, r0
    13b4:	431a      	orrs	r2, r3
    13b6:	2300      	movs	r3, #0
    13b8:	e7ab      	b.n	1312 <__aeabi_d2f+0x36>
    13ba:	2300      	movs	r3, #0
    13bc:	e7d5      	b.n	136a <__aeabi_d2f+0x8e>
    13be:	2502      	movs	r5, #2
    13c0:	426d      	negs	r5, r5
    13c2:	1aeb      	subs	r3, r5, r3
    13c4:	0015      	movs	r5, r2
    13c6:	40dd      	lsrs	r5, r3
    13c8:	2820      	cmp	r0, #32
    13ca:	d009      	beq.n	13e0 <__aeabi_d2f+0x104>
    13cc:	4b08      	ldr	r3, [pc, #32]	; (13f0 <__aeabi_d2f+0x114>)
    13ce:	18f3      	adds	r3, r6, r3
    13d0:	409a      	lsls	r2, r3
    13d2:	4314      	orrs	r4, r2
    13d4:	1e62      	subs	r2, r4, #1
    13d6:	4194      	sbcs	r4, r2
    13d8:	0022      	movs	r2, r4
    13da:	2300      	movs	r3, #0
    13dc:	432a      	orrs	r2, r5
    13de:	e798      	b.n	1312 <__aeabi_d2f+0x36>
    13e0:	2200      	movs	r2, #0
    13e2:	e7f6      	b.n	13d2 <__aeabi_d2f+0xf6>
    13e4:	2200      	movs	r2, #0
    13e6:	e7a8      	b.n	133a <__aeabi_d2f+0x5e>
    13e8:	fffffc80 	.word	0xfffffc80
    13ec:	fffffc82 	.word	0xfffffc82
    13f0:	fffffca2 	.word	0xfffffca2

000013f4 <__clzsi2>:
    13f4:	211c      	movs	r1, #28
    13f6:	2301      	movs	r3, #1
    13f8:	041b      	lsls	r3, r3, #16
    13fa:	4298      	cmp	r0, r3
    13fc:	d301      	bcc.n	1402 <__clzsi2+0xe>
    13fe:	0c00      	lsrs	r0, r0, #16
    1400:	3910      	subs	r1, #16
    1402:	0a1b      	lsrs	r3, r3, #8
    1404:	4298      	cmp	r0, r3
    1406:	d301      	bcc.n	140c <__clzsi2+0x18>
    1408:	0a00      	lsrs	r0, r0, #8
    140a:	3908      	subs	r1, #8
    140c:	091b      	lsrs	r3, r3, #4
    140e:	4298      	cmp	r0, r3
    1410:	d301      	bcc.n	1416 <__clzsi2+0x22>
    1412:	0900      	lsrs	r0, r0, #4
    1414:	3904      	subs	r1, #4
    1416:	a202      	add	r2, pc, #8	; (adr r2, 1420 <__clzsi2+0x2c>)
    1418:	5c10      	ldrb	r0, [r2, r0]
    141a:	1840      	adds	r0, r0, r1
    141c:	4770      	bx	lr
    141e:	46c0      	nop			; (mov r8, r8)
    1420:	02020304 	.word	0x02020304
    1424:	01010101 	.word	0x01010101
	...

00001430 <__libc_init_array>:
    1430:	b570      	push	{r4, r5, r6, lr}
    1432:	4e0d      	ldr	r6, [pc, #52]	; (1468 <__libc_init_array+0x38>)
    1434:	4d0d      	ldr	r5, [pc, #52]	; (146c <__libc_init_array+0x3c>)
    1436:	2400      	movs	r4, #0
    1438:	1bad      	subs	r5, r5, r6
    143a:	10ad      	asrs	r5, r5, #2
    143c:	d005      	beq.n	144a <__libc_init_array+0x1a>
    143e:	00a3      	lsls	r3, r4, #2
    1440:	58f3      	ldr	r3, [r6, r3]
    1442:	3401      	adds	r4, #1
    1444:	4798      	blx	r3
    1446:	42a5      	cmp	r5, r4
    1448:	d1f9      	bne.n	143e <__libc_init_array+0xe>
    144a:	f000 f9b5 	bl	17b8 <_init>
    144e:	4e08      	ldr	r6, [pc, #32]	; (1470 <__libc_init_array+0x40>)
    1450:	4d08      	ldr	r5, [pc, #32]	; (1474 <__libc_init_array+0x44>)
    1452:	2400      	movs	r4, #0
    1454:	1bad      	subs	r5, r5, r6
    1456:	10ad      	asrs	r5, r5, #2
    1458:	d005      	beq.n	1466 <__libc_init_array+0x36>
    145a:	00a3      	lsls	r3, r4, #2
    145c:	58f3      	ldr	r3, [r6, r3]
    145e:	3401      	adds	r4, #1
    1460:	4798      	blx	r3
    1462:	42a5      	cmp	r5, r4
    1464:	d1f9      	bne.n	145a <__libc_init_array+0x2a>
    1466:	bd70      	pop	{r4, r5, r6, pc}
    1468:	000017c4 	.word	0x000017c4
    146c:	000017c4 	.word	0x000017c4
    1470:	000017c4 	.word	0x000017c4
    1474:	000017cc 	.word	0x000017cc

00001478 <memset>:
    1478:	b570      	push	{r4, r5, r6, lr}
    147a:	0783      	lsls	r3, r0, #30
    147c:	d03f      	beq.n	14fe <memset+0x86>
    147e:	1e54      	subs	r4, r2, #1
    1480:	2a00      	cmp	r2, #0
    1482:	d03b      	beq.n	14fc <memset+0x84>
    1484:	b2ce      	uxtb	r6, r1
    1486:	0003      	movs	r3, r0
    1488:	2503      	movs	r5, #3
    148a:	e003      	b.n	1494 <memset+0x1c>
    148c:	1e62      	subs	r2, r4, #1
    148e:	2c00      	cmp	r4, #0
    1490:	d034      	beq.n	14fc <memset+0x84>
    1492:	0014      	movs	r4, r2
    1494:	3301      	adds	r3, #1
    1496:	1e5a      	subs	r2, r3, #1
    1498:	7016      	strb	r6, [r2, #0]
    149a:	422b      	tst	r3, r5
    149c:	d1f6      	bne.n	148c <memset+0x14>
    149e:	2c03      	cmp	r4, #3
    14a0:	d924      	bls.n	14ec <memset+0x74>
    14a2:	25ff      	movs	r5, #255	; 0xff
    14a4:	400d      	ands	r5, r1
    14a6:	022a      	lsls	r2, r5, #8
    14a8:	4315      	orrs	r5, r2
    14aa:	042a      	lsls	r2, r5, #16
    14ac:	4315      	orrs	r5, r2
    14ae:	2c0f      	cmp	r4, #15
    14b0:	d911      	bls.n	14d6 <memset+0x5e>
    14b2:	0026      	movs	r6, r4
    14b4:	3e10      	subs	r6, #16
    14b6:	0936      	lsrs	r6, r6, #4
    14b8:	3601      	adds	r6, #1
    14ba:	0136      	lsls	r6, r6, #4
    14bc:	001a      	movs	r2, r3
    14be:	199b      	adds	r3, r3, r6
    14c0:	6015      	str	r5, [r2, #0]
    14c2:	6055      	str	r5, [r2, #4]
    14c4:	6095      	str	r5, [r2, #8]
    14c6:	60d5      	str	r5, [r2, #12]
    14c8:	3210      	adds	r2, #16
    14ca:	4293      	cmp	r3, r2
    14cc:	d1f8      	bne.n	14c0 <memset+0x48>
    14ce:	220f      	movs	r2, #15
    14d0:	4014      	ands	r4, r2
    14d2:	2c03      	cmp	r4, #3
    14d4:	d90a      	bls.n	14ec <memset+0x74>
    14d6:	1f26      	subs	r6, r4, #4
    14d8:	08b6      	lsrs	r6, r6, #2
    14da:	3601      	adds	r6, #1
    14dc:	00b6      	lsls	r6, r6, #2
    14de:	001a      	movs	r2, r3
    14e0:	199b      	adds	r3, r3, r6
    14e2:	c220      	stmia	r2!, {r5}
    14e4:	4293      	cmp	r3, r2
    14e6:	d1fc      	bne.n	14e2 <memset+0x6a>
    14e8:	2203      	movs	r2, #3
    14ea:	4014      	ands	r4, r2
    14ec:	2c00      	cmp	r4, #0
    14ee:	d005      	beq.n	14fc <memset+0x84>
    14f0:	b2c9      	uxtb	r1, r1
    14f2:	191c      	adds	r4, r3, r4
    14f4:	7019      	strb	r1, [r3, #0]
    14f6:	3301      	adds	r3, #1
    14f8:	429c      	cmp	r4, r3
    14fa:	d1fb      	bne.n	14f4 <memset+0x7c>
    14fc:	bd70      	pop	{r4, r5, r6, pc}
    14fe:	0014      	movs	r4, r2
    1500:	0003      	movs	r3, r0
    1502:	e7cc      	b.n	149e <memset+0x26>

00001504 <register_fini>:
    1504:	4b03      	ldr	r3, [pc, #12]	; (1514 <register_fini+0x10>)
    1506:	b510      	push	{r4, lr}
    1508:	2b00      	cmp	r3, #0
    150a:	d002      	beq.n	1512 <register_fini+0xe>
    150c:	4802      	ldr	r0, [pc, #8]	; (1518 <register_fini+0x14>)
    150e:	f000 f805 	bl	151c <atexit>
    1512:	bd10      	pop	{r4, pc}
    1514:	00000000 	.word	0x00000000
    1518:	0000152d 	.word	0x0000152d

0000151c <atexit>:
    151c:	b510      	push	{r4, lr}
    151e:	0001      	movs	r1, r0
    1520:	2300      	movs	r3, #0
    1522:	2200      	movs	r2, #0
    1524:	2000      	movs	r0, #0
    1526:	f000 f81b 	bl	1560 <__register_exitproc>
    152a:	bd10      	pop	{r4, pc}

0000152c <__libc_fini_array>:
    152c:	b570      	push	{r4, r5, r6, lr}
    152e:	4b09      	ldr	r3, [pc, #36]	; (1554 <__libc_fini_array+0x28>)
    1530:	4c09      	ldr	r4, [pc, #36]	; (1558 <__libc_fini_array+0x2c>)
    1532:	1ae4      	subs	r4, r4, r3
    1534:	10a4      	asrs	r4, r4, #2
    1536:	d009      	beq.n	154c <__libc_fini_array+0x20>
    1538:	4a08      	ldr	r2, [pc, #32]	; (155c <__libc_fini_array+0x30>)
    153a:	18a5      	adds	r5, r4, r2
    153c:	00ad      	lsls	r5, r5, #2
    153e:	18ed      	adds	r5, r5, r3
    1540:	682b      	ldr	r3, [r5, #0]
    1542:	3c01      	subs	r4, #1
    1544:	4798      	blx	r3
    1546:	3d04      	subs	r5, #4
    1548:	2c00      	cmp	r4, #0
    154a:	d1f9      	bne.n	1540 <__libc_fini_array+0x14>
    154c:	f000 f93e 	bl	17cc <_fini>
    1550:	bd70      	pop	{r4, r5, r6, pc}
    1552:	46c0      	nop			; (mov r8, r8)
    1554:	000017d8 	.word	0x000017d8
    1558:	000017dc 	.word	0x000017dc
    155c:	3fffffff 	.word	0x3fffffff

00001560 <__register_exitproc>:
    1560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1562:	4644      	mov	r4, r8
    1564:	465f      	mov	r7, fp
    1566:	4656      	mov	r6, sl
    1568:	464d      	mov	r5, r9
    156a:	469b      	mov	fp, r3
    156c:	4b2f      	ldr	r3, [pc, #188]	; (162c <__register_exitproc+0xcc>)
    156e:	b4f0      	push	{r4, r5, r6, r7}
    1570:	681c      	ldr	r4, [r3, #0]
    1572:	23a4      	movs	r3, #164	; 0xa4
    1574:	005b      	lsls	r3, r3, #1
    1576:	0005      	movs	r5, r0
    1578:	58e0      	ldr	r0, [r4, r3]
    157a:	000e      	movs	r6, r1
    157c:	4690      	mov	r8, r2
    157e:	2800      	cmp	r0, #0
    1580:	d04b      	beq.n	161a <__register_exitproc+0xba>
    1582:	6843      	ldr	r3, [r0, #4]
    1584:	2b1f      	cmp	r3, #31
    1586:	dc0d      	bgt.n	15a4 <__register_exitproc+0x44>
    1588:	1c5c      	adds	r4, r3, #1
    158a:	2d00      	cmp	r5, #0
    158c:	d121      	bne.n	15d2 <__register_exitproc+0x72>
    158e:	3302      	adds	r3, #2
    1590:	009b      	lsls	r3, r3, #2
    1592:	6044      	str	r4, [r0, #4]
    1594:	501e      	str	r6, [r3, r0]
    1596:	2000      	movs	r0, #0
    1598:	bc3c      	pop	{r2, r3, r4, r5}
    159a:	4690      	mov	r8, r2
    159c:	4699      	mov	r9, r3
    159e:	46a2      	mov	sl, r4
    15a0:	46ab      	mov	fp, r5
    15a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    15a4:	4b22      	ldr	r3, [pc, #136]	; (1630 <__register_exitproc+0xd0>)
    15a6:	2b00      	cmp	r3, #0
    15a8:	d03c      	beq.n	1624 <__register_exitproc+0xc4>
    15aa:	20c8      	movs	r0, #200	; 0xc8
    15ac:	0040      	lsls	r0, r0, #1
    15ae:	e000      	b.n	15b2 <__register_exitproc+0x52>
    15b0:	bf00      	nop
    15b2:	2800      	cmp	r0, #0
    15b4:	d036      	beq.n	1624 <__register_exitproc+0xc4>
    15b6:	22a4      	movs	r2, #164	; 0xa4
    15b8:	2300      	movs	r3, #0
    15ba:	0052      	lsls	r2, r2, #1
    15bc:	58a1      	ldr	r1, [r4, r2]
    15be:	6043      	str	r3, [r0, #4]
    15c0:	6001      	str	r1, [r0, #0]
    15c2:	50a0      	str	r0, [r4, r2]
    15c4:	3240      	adds	r2, #64	; 0x40
    15c6:	5083      	str	r3, [r0, r2]
    15c8:	3204      	adds	r2, #4
    15ca:	5083      	str	r3, [r0, r2]
    15cc:	2401      	movs	r4, #1
    15ce:	2d00      	cmp	r5, #0
    15d0:	d0dd      	beq.n	158e <__register_exitproc+0x2e>
    15d2:	009a      	lsls	r2, r3, #2
    15d4:	4691      	mov	r9, r2
    15d6:	4481      	add	r9, r0
    15d8:	4642      	mov	r2, r8
    15da:	2188      	movs	r1, #136	; 0x88
    15dc:	464f      	mov	r7, r9
    15de:	507a      	str	r2, [r7, r1]
    15e0:	22c4      	movs	r2, #196	; 0xc4
    15e2:	0052      	lsls	r2, r2, #1
    15e4:	4690      	mov	r8, r2
    15e6:	4480      	add	r8, r0
    15e8:	4642      	mov	r2, r8
    15ea:	3987      	subs	r1, #135	; 0x87
    15ec:	4099      	lsls	r1, r3
    15ee:	6812      	ldr	r2, [r2, #0]
    15f0:	468a      	mov	sl, r1
    15f2:	430a      	orrs	r2, r1
    15f4:	4694      	mov	ip, r2
    15f6:	4642      	mov	r2, r8
    15f8:	4661      	mov	r1, ip
    15fa:	6011      	str	r1, [r2, #0]
    15fc:	2284      	movs	r2, #132	; 0x84
    15fe:	4649      	mov	r1, r9
    1600:	465f      	mov	r7, fp
    1602:	0052      	lsls	r2, r2, #1
    1604:	508f      	str	r7, [r1, r2]
    1606:	2d02      	cmp	r5, #2
    1608:	d1c1      	bne.n	158e <__register_exitproc+0x2e>
    160a:	0002      	movs	r2, r0
    160c:	4655      	mov	r5, sl
    160e:	328d      	adds	r2, #141	; 0x8d
    1610:	32ff      	adds	r2, #255	; 0xff
    1612:	6811      	ldr	r1, [r2, #0]
    1614:	430d      	orrs	r5, r1
    1616:	6015      	str	r5, [r2, #0]
    1618:	e7b9      	b.n	158e <__register_exitproc+0x2e>
    161a:	0020      	movs	r0, r4
    161c:	304d      	adds	r0, #77	; 0x4d
    161e:	30ff      	adds	r0, #255	; 0xff
    1620:	50e0      	str	r0, [r4, r3]
    1622:	e7ae      	b.n	1582 <__register_exitproc+0x22>
    1624:	2001      	movs	r0, #1
    1626:	4240      	negs	r0, r0
    1628:	e7b6      	b.n	1598 <__register_exitproc+0x38>
    162a:	46c0      	nop			; (mov r8, r8)
    162c:	000017b4 	.word	0x000017b4
    1630:	00000000 	.word	0x00000000

00001634 <senseBat>:
    1634:	06000000 00000006                       ........

0000163c <lookupTable.12285>:
    163c:	ffff8d20 ffffada1 ffffce64 ffffef6c      .......d...l...
    164c:	000010b7 0000324a 00005425 00007649     ....J2..%T..Iv..
    165c:	000098b7 0000bb72 0000de79 000101d0     ....r...y.......
    166c:	00012576 0001496f 00016dbc 0001925e     v%..oI...m..^...
    167c:	0001b758 0001dcaa 00020258 00022862     X.......X...b(..
    168c:	00024ecc 00027596 00029cc4 0002c457     .N...u......W...
    169c:	0002ec52 000314b7 00033d89 000366ca     R........=...f..
    16ac:	0003907d 0003baa4 0003e544 0004105e     }.......D...^...
    16bc:	00043bf6 0004680e 000494ac 0004c1d1     .;...h..........
    16cc:	0004ef81 00051dc1 00054c95 00057c00     .........L...|..
    16dc:	0005ac07 0005dcae 00060dfb 00063ff2     .............?..
    16ec:	00067298 0006a5f4 0006da09 00070ee0     .r..............
    16fc:	0007447d 00077ae8 0007b228 0007ea44     }D...z..(...D...
    170c:	00082344 00085d30 00089810 0008d3ef     D#..0]..........
    171c:	000910d6 00094ecf 00098de5 0009ce23     .....N......#...
    172c:	000a0f98 000a524f 000a9657 000adbbf     ....OR..W.......
    173c:	000b2298 000b6af3 000bb4e2 000c007b     ."...j......{...
    174c:	000c4dd4 000c9d03 000cee23 000d4150     .M......#...PA..
    175c:	000d96a9 000dee4e 000e4865 000ea516     ....N...eH......
    176c:	000f048e 00000eac 00000d6c 00000d6c     ........l...l...
    177c:	00000d6a 00000e84 00000e84 00000e76     j...........v...
    178c:	00000d6a 00000e84 00000e76 00000e84     j.......v.......
    179c:	00000d6a 00000e8c 00000e8c 00000e8c     j...............
    17ac:	0000108c 00000043                       ....C...

000017b4 <_global_impure_ptr>:
    17b4:	20000010                                ... 

000017b8 <_init>:
    17b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    17ba:	46c0      	nop			; (mov r8, r8)
    17bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
    17be:	bc08      	pop	{r3}
    17c0:	469e      	mov	lr, r3
    17c2:	4770      	bx	lr

000017c4 <__init_array_start>:
    17c4:	00001505 	.word	0x00001505

000017c8 <__frame_dummy_init_array_entry>:
    17c8:	000000dd                                ....

000017cc <_fini>:
    17cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    17ce:	46c0      	nop			; (mov r8, r8)
    17d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    17d2:	bc08      	pop	{r3}
    17d4:	469e      	mov	lr, r3
    17d6:	4770      	bx	lr

000017d8 <__fini_array_start>:
    17d8:	000000b5 	.word	0x000000b5
