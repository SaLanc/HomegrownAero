
DasAltimeter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002090  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000438  20000000  00002090  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000001a0  20000440  000024d0  00020438  2**4
                  ALLOC
  3 .stack        00002000  200005e0  00002670  00020438  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020438  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020460  2**0
                  CONTENTS, READONLY
  6 .debug_info   000166ca  00000000  00000000  000204b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001971  00000000  00000000  00036b83  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00001560  00000000  00000000  000384f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000238  00000000  00000000  00039a54  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000208  00000000  00000000  00039c8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00013b97  00000000  00000000  00039e94  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00004db4  00000000  00000000  0004da2b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000725e7  00000000  00000000  000527df  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000007e8  00000000  00000000  000c4dc8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	e0 25 00 20 19 01 00 00 15 01 00 00 15 01 00 00     .%. ............
	...
      2c:	15 01 00 00 00 00 00 00 00 00 00 00 15 01 00 00     ................
      3c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      4c:	e5 06 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      5c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      6c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      7c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      8c:	15 01 00 00 15 01 00 00 00 00 00 00 00 00 00 00     ................
      9c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      ac:	15 01 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000440 	.word	0x20000440
      d4:	00000000 	.word	0x00000000
      d8:	00002090 	.word	0x00002090

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000444 	.word	0x20000444
     108:	00002090 	.word	0x00002090
     10c:	00002090 	.word	0x00002090
     110:	00000000 	.word	0x00000000

00000114 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     114:	e7fe      	b.n	114 <Dummy_Handler>
	...

00000118 <Reset_Handler>:
{
     118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
     11a:	4a2a      	ldr	r2, [pc, #168]	; (1c4 <Reset_Handler+0xac>)
     11c:	4b2a      	ldr	r3, [pc, #168]	; (1c8 <Reset_Handler+0xb0>)
     11e:	429a      	cmp	r2, r3
     120:	d011      	beq.n	146 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
     122:	001a      	movs	r2, r3
     124:	4b29      	ldr	r3, [pc, #164]	; (1cc <Reset_Handler+0xb4>)
     126:	429a      	cmp	r2, r3
     128:	d20d      	bcs.n	146 <Reset_Handler+0x2e>
     12a:	4a29      	ldr	r2, [pc, #164]	; (1d0 <Reset_Handler+0xb8>)
     12c:	3303      	adds	r3, #3
     12e:	1a9b      	subs	r3, r3, r2
     130:	089b      	lsrs	r3, r3, #2
     132:	3301      	adds	r3, #1
     134:	009b      	lsls	r3, r3, #2
     136:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
     138:	4823      	ldr	r0, [pc, #140]	; (1c8 <Reset_Handler+0xb0>)
     13a:	4922      	ldr	r1, [pc, #136]	; (1c4 <Reset_Handler+0xac>)
     13c:	588c      	ldr	r4, [r1, r2]
     13e:	5084      	str	r4, [r0, r2]
     140:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     142:	429a      	cmp	r2, r3
     144:	d1fa      	bne.n	13c <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
     146:	4a23      	ldr	r2, [pc, #140]	; (1d4 <Reset_Handler+0xbc>)
     148:	4b23      	ldr	r3, [pc, #140]	; (1d8 <Reset_Handler+0xc0>)
     14a:	429a      	cmp	r2, r3
     14c:	d20a      	bcs.n	164 <Reset_Handler+0x4c>
     14e:	43d3      	mvns	r3, r2
     150:	4921      	ldr	r1, [pc, #132]	; (1d8 <Reset_Handler+0xc0>)
     152:	185b      	adds	r3, r3, r1
     154:	2103      	movs	r1, #3
     156:	438b      	bics	r3, r1
     158:	3304      	adds	r3, #4
     15a:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
     15c:	2100      	movs	r1, #0
     15e:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
     160:	4293      	cmp	r3, r2
     162:	d1fc      	bne.n	15e <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     164:	4a1d      	ldr	r2, [pc, #116]	; (1dc <Reset_Handler+0xc4>)
     166:	21ff      	movs	r1, #255	; 0xff
     168:	4b1d      	ldr	r3, [pc, #116]	; (1e0 <Reset_Handler+0xc8>)
     16a:	438b      	bics	r3, r1
     16c:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     16e:	39fd      	subs	r1, #253	; 0xfd
     170:	2390      	movs	r3, #144	; 0x90
     172:	005b      	lsls	r3, r3, #1
     174:	4a1b      	ldr	r2, [pc, #108]	; (1e4 <Reset_Handler+0xcc>)
     176:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     178:	4a1b      	ldr	r2, [pc, #108]	; (1e8 <Reset_Handler+0xd0>)
     17a:	78d3      	ldrb	r3, [r2, #3]
     17c:	2503      	movs	r5, #3
     17e:	43ab      	bics	r3, r5
     180:	2402      	movs	r4, #2
     182:	4323      	orrs	r3, r4
     184:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     186:	78d3      	ldrb	r3, [r2, #3]
     188:	270c      	movs	r7, #12
     18a:	43bb      	bics	r3, r7
     18c:	2608      	movs	r6, #8
     18e:	4333      	orrs	r3, r6
     190:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
     192:	4b16      	ldr	r3, [pc, #88]	; (1ec <Reset_Handler+0xd4>)
     194:	7b98      	ldrb	r0, [r3, #14]
     196:	2230      	movs	r2, #48	; 0x30
     198:	4390      	bics	r0, r2
     19a:	2220      	movs	r2, #32
     19c:	4310      	orrs	r0, r2
     19e:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     1a0:	7b99      	ldrb	r1, [r3, #14]
     1a2:	43b9      	bics	r1, r7
     1a4:	4331      	orrs	r1, r6
     1a6:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     1a8:	7b9a      	ldrb	r2, [r3, #14]
     1aa:	43aa      	bics	r2, r5
     1ac:	4322      	orrs	r2, r4
     1ae:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
     1b0:	4a0f      	ldr	r2, [pc, #60]	; (1f0 <Reset_Handler+0xd8>)
     1b2:	6853      	ldr	r3, [r2, #4]
     1b4:	2180      	movs	r1, #128	; 0x80
     1b6:	430b      	orrs	r3, r1
     1b8:	6053      	str	r3, [r2, #4]
        __libc_init_array();
     1ba:	4b0e      	ldr	r3, [pc, #56]	; (1f4 <Reset_Handler+0xdc>)
     1bc:	4798      	blx	r3
        main();
     1be:	4b0e      	ldr	r3, [pc, #56]	; (1f8 <Reset_Handler+0xe0>)
     1c0:	4798      	blx	r3
     1c2:	e7fe      	b.n	1c2 <Reset_Handler+0xaa>
     1c4:	00002090 	.word	0x00002090
     1c8:	20000000 	.word	0x20000000
     1cc:	20000438 	.word	0x20000438
     1d0:	20000004 	.word	0x20000004
     1d4:	20000440 	.word	0x20000440
     1d8:	200005e0 	.word	0x200005e0
     1dc:	e000ed00 	.word	0xe000ed00
     1e0:	00000000 	.word	0x00000000
     1e4:	41007000 	.word	0x41007000
     1e8:	41005000 	.word	0x41005000
     1ec:	41004800 	.word	0x41004800
     1f0:	41004000 	.word	0x41004000
     1f4:	00001c51 	.word	0x00001c51
     1f8:	000003a9 	.word	0x000003a9

000001fc <SystemInit>:
 *         Initialize the System and update the SystemCoreClock variable.
 */
void SystemInit(void)
{
	// Keep the default device state after reset
	SystemCoreClock = __SYSTEM_CLOCK;
     1fc:	4a01      	ldr	r2, [pc, #4]	; (204 <SystemInit+0x8>)
     1fe:	4b02      	ldr	r3, [pc, #8]	; (208 <SystemInit+0xc>)
     200:	601a      	str	r2, [r3, #0]
	return;
}
     202:	4770      	bx	lr
     204:	000f4240 	.word	0x000f4240
     208:	20000000 	.word	0x20000000

0000020c <init>:
#include <boardDefines.h>




void init() {
     20c:	b5f0      	push	{r4, r5, r6, r7, lr}
     20e:	46de      	mov	lr, fp
     210:	4657      	mov	r7, sl
     212:	464e      	mov	r6, r9
     214:	4645      	mov	r5, r8
     216:	b5e0      	push	{r5, r6, r7, lr}
     218:	b083      	sub	sp, #12
    SystemInit();
     21a:	4b58      	ldr	r3, [pc, #352]	; (37c <init+0x170>)
     21c:	4798      	blx	r3
    GclkInit();
     21e:	4b58      	ldr	r3, [pc, #352]	; (380 <init+0x174>)
     220:	4798      	blx	r3
    delayInit();
     222:	4b58      	ldr	r3, [pc, #352]	; (384 <init+0x178>)
     224:	4798      	blx	r3
    adcInit();
     226:	4b58      	ldr	r3, [pc, #352]	; (388 <init+0x17c>)
     228:	4798      	blx	r3
    dmaInit();
     22a:	4b58      	ldr	r3, [pc, #352]	; (38c <init+0x180>)
     22c:	4798      	blx	r3
    RtcInit();
     22e:	4b58      	ldr	r3, [pc, #352]	; (390 <init+0x184>)
     230:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     232:	4b58      	ldr	r3, [pc, #352]	; (394 <init+0x188>)
     234:	2240      	movs	r2, #64	; 0x40
     236:	601a      	str	r2, [r3, #0]
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     238:	21c1      	movs	r1, #193	; 0xc1
     23a:	0089      	lsls	r1, r1, #2
     23c:	585a      	ldr	r2, [r3, r1]
     23e:	4856      	ldr	r0, [pc, #344]	; (398 <init+0x18c>)
     240:	4002      	ands	r2, r0
     242:	505a      	str	r2, [r3, r1]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     244:	4b55      	ldr	r3, [pc, #340]	; (39c <init+0x190>)
     246:	205c      	movs	r0, #92	; 0x5c
     248:	5c19      	ldrb	r1, [r3, r0]
     24a:	2201      	movs	r2, #1
     24c:	4391      	bics	r1, r2
     24e:	5419      	strb	r1, [r3, r0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     250:	2180      	movs	r1, #128	; 0x80
     252:	0549      	lsls	r1, r1, #21
     254:	6099      	str	r1, [r3, #8]
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     256:	2432      	movs	r4, #50	; 0x32
     258:	5d18      	ldrb	r0, [r3, r4]
     25a:	210f      	movs	r1, #15
     25c:	468c      	mov	ip, r1
     25e:	4008      	ands	r0, r1
     260:	2510      	movs	r5, #16
     262:	4328      	orrs	r0, r5
     264:	5518      	strb	r0, [r3, r4]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     266:	2545      	movs	r5, #69	; 0x45
     268:	5d5c      	ldrb	r4, [r3, r5]
     26a:	2001      	movs	r0, #1
     26c:	4304      	orrs	r4, r0
     26e:	555c      	strb	r4, [r3, r5]
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     270:	3d11      	subs	r5, #17
     272:	5d5c      	ldrb	r4, [r3, r5]
     274:	000e      	movs	r6, r1
     276:	438c      	bics	r4, r1
     278:	4304      	orrs	r4, r0
     27a:	555c      	strb	r4, [r3, r5]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     27c:	3514      	adds	r5, #20
     27e:	5d5c      	ldrb	r4, [r3, r5]
     280:	4304      	orrs	r4, r0
     282:	555c      	strb	r4, [r3, r5]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     284:	3510      	adds	r5, #16
     286:	5d5c      	ldrb	r4, [r3, r5]
     288:	4394      	bics	r4, r2
     28a:	555c      	strb	r4, [r3, r5]
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     28c:	2480      	movs	r4, #128	; 0x80
     28e:	0464      	lsls	r4, r4, #17
     290:	609c      	str	r4, [r3, #8]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     292:	615c      	str	r4, [r3, #20]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     294:	363d      	adds	r6, #61	; 0x3d
     296:	5d9c      	ldrb	r4, [r3, r6]
     298:	4394      	bics	r4, r2
     29a:	559c      	strb	r4, [r3, r6]
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     29c:	2480      	movs	r4, #128	; 0x80
     29e:	0164      	lsls	r4, r4, #5
     2a0:	609c      	str	r4, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     2a2:	244d      	movs	r4, #77	; 0x4d
     2a4:	46a0      	mov	r8, r4
     2a6:	5d1c      	ldrb	r4, [r3, r4]
     2a8:	4394      	bics	r4, r2
     2aa:	4645      	mov	r5, r8
     2ac:	555c      	strb	r4, [r3, r5]
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     2ae:	2480      	movs	r4, #128	; 0x80
     2b0:	01a4      	lsls	r4, r4, #6
     2b2:	609c      	str	r4, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     2b4:	244f      	movs	r4, #79	; 0x4f
     2b6:	5d1d      	ldrb	r5, [r3, r4]
     2b8:	4395      	bics	r5, r2
     2ba:	551d      	strb	r5, [r3, r4]
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     2bc:	5d1d      	ldrb	r5, [r3, r4]
     2be:	2702      	movs	r7, #2
     2c0:	46bb      	mov	fp, r7
     2c2:	465f      	mov	r7, fp
     2c4:	433d      	orrs	r5, r7
     2c6:	551d      	strb	r5, [r3, r4]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     2c8:	2580      	movs	r5, #128	; 0x80
     2ca:	022d      	lsls	r5, r5, #8
     2cc:	605d      	str	r5, [r3, #4]
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     2ce:	2537      	movs	r5, #55	; 0x37
     2d0:	46aa      	mov	sl, r5
     2d2:	5d5d      	ldrb	r5, [r3, r5]
     2d4:	400d      	ands	r5, r1
     2d6:	2720      	movs	r7, #32
     2d8:	46b9      	mov	r9, r7
     2da:	464f      	mov	r7, r9
     2dc:	433d      	orrs	r5, r7
     2de:	4657      	mov	r7, sl
     2e0:	55dd      	strb	r5, [r3, r7]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     2e2:	5d1d      	ldrb	r5, [r3, r4]
     2e4:	4305      	orrs	r5, r0
     2e6:	551d      	strb	r5, [r3, r4]
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     2e8:	3c19      	subs	r4, #25
     2ea:	5d1d      	ldrb	r5, [r3, r4]
     2ec:	4029      	ands	r1, r5
     2ee:	464d      	mov	r5, r9
     2f0:	4329      	orrs	r1, r5
     2f2:	5519      	strb	r1, [r3, r4]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     2f4:	4641      	mov	r1, r8
     2f6:	5c59      	ldrb	r1, [r3, r1]
     2f8:	4301      	orrs	r1, r0
     2fa:	4645      	mov	r5, r8
     2fc:	5559      	strb	r1, [r3, r5]
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     2fe:	5d19      	ldrb	r1, [r3, r4]
     300:	4665      	mov	r5, ip
     302:	43a9      	bics	r1, r5
     304:	465d      	mov	r5, fp
     306:	4329      	orrs	r1, r5
     308:	5519      	strb	r1, [r3, r4]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     30a:	5d99      	ldrb	r1, [r3, r6]
     30c:	4308      	orrs	r0, r1
     30e:	5598      	strb	r0, [r3, r6]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     310:	2154      	movs	r1, #84	; 0x54
     312:	5c58      	ldrb	r0, [r3, r1]
     314:	4390      	bics	r0, r2
     316:	5458      	strb	r0, [r3, r1]
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     318:	2080      	movs	r0, #128	; 0x80
     31a:	0340      	lsls	r0, r0, #13
     31c:	6098      	str	r0, [r3, #8]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     31e:	6198      	str	r0, [r3, #24]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     320:	5c58      	ldrb	r0, [r3, r1]
     322:	4390      	bics	r0, r2
     324:	5458      	strb	r0, [r3, r1]
     326:	3906      	subs	r1, #6
     328:	5c58      	ldrb	r0, [r3, r1]
     32a:	4390      	bics	r0, r2
     32c:	5458      	strb	r0, [r3, r1]
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     32e:	2080      	movs	r0, #128	; 0x80
     330:	01c0      	lsls	r0, r0, #7
     332:	6098      	str	r0, [r3, #8]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     334:	6198      	str	r0, [r3, #24]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     336:	5c58      	ldrb	r0, [r3, r1]
     338:	4390      	bics	r0, r2
     33a:	5458      	strb	r0, [r3, r1]
     33c:	3108      	adds	r1, #8
     33e:	5c58      	ldrb	r0, [r3, r1]
     340:	4390      	bics	r0, r2
     342:	5458      	strb	r0, [r3, r1]
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     344:	2280      	movs	r2, #128	; 0x80
     346:	03d2      	lsls	r2, r2, #15
     348:	609a      	str	r2, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].reg |= p.cfg;
     34a:	5c5a      	ldrb	r2, [r3, r1]
     34c:	2040      	movs	r0, #64	; 0x40
     34e:	4302      	orrs	r2, r0
     350:	545a      	strb	r2, [r3, r1]
    pinGpio(cs_baro);

    pinOut(buzzerPin);
    pinCfg(buzzerPin);

    sercomClockEnable(SPI1, 3, 4);
     352:	2204      	movs	r2, #4
     354:	3953      	subs	r1, #83	; 0x53
     356:	383e      	subs	r0, #62	; 0x3e
     358:	4b11      	ldr	r3, [pc, #68]	; (3a0 <init+0x194>)
     35a:	4798      	blx	r3
    sercomSpiMasterInit(SPI1, 3, 0, 0, 0, 0x00);
     35c:	2300      	movs	r3, #0
     35e:	9301      	str	r3, [sp, #4]
     360:	9300      	str	r3, [sp, #0]
     362:	2200      	movs	r2, #0
     364:	2103      	movs	r1, #3
     366:	2002      	movs	r0, #2
     368:	4c0e      	ldr	r4, [pc, #56]	; (3a4 <init+0x198>)
     36a:	47a0      	blx	r4

}
     36c:	b003      	add	sp, #12
     36e:	bc3c      	pop	{r2, r3, r4, r5}
     370:	4690      	mov	r8, r2
     372:	4699      	mov	r9, r3
     374:	46a2      	mov	sl, r4
     376:	46ab      	mov	fp, r5
     378:	bdf0      	pop	{r4, r5, r6, r7, pc}
     37a:	46c0      	nop			; (mov r8, r8)
     37c:	000001fd 	.word	0x000001fd
     380:	000005a5 	.word	0x000005a5
     384:	00000771 	.word	0x00000771
     388:	000004a9 	.word	0x000004a9
     38c:	000007e9 	.word	0x000007e9
     390:	00000649 	.word	0x00000649
     394:	e000e100 	.word	0xe000e100
     398:	ff00ffff 	.word	0xff00ffff
     39c:	41004400 	.word	0x41004400
     3a0:	00000cb1 	.word	0x00000cb1
     3a4:	00000d19 	.word	0x00000d19

000003a8 <main>:


int main(void) {
     3a8:	b5f0      	push	{r4, r5, r6, r7, lr}
     3aa:	b0a7      	sub	sp, #156	; 0x9c

    init();
     3ac:	4b2d      	ldr	r3, [pc, #180]	; (464 <main+0xbc>)
     3ae:	4798      	blx	r3

    Altimeter my_altimeter;

    initMS5803Barometer(&my_altimeter.myBarometer);
     3b0:	a80b      	add	r0, sp, #44	; 0x2c
     3b2:	4b2d      	ldr	r3, [pc, #180]	; (468 <main+0xc0>)
     3b4:	4798      	blx	r3


    volatile long counter = 0;
     3b6:	2300      	movs	r3, #0
     3b8:	930a      	str	r3, [sp, #40]	; 0x28

    volatile u16_t ignighterA;

    while (1) {

        ignighterA = adc_read(senseAPin);
     3ba:	4f2c      	ldr	r7, [pc, #176]	; (46c <main+0xc4>)
     3bc:	683b      	ldr	r3, [r7, #0]
     3be:	9301      	str	r3, [sp, #4]
     3c0:	e04a      	b.n	458 <main+0xb0>
            pinToggle(LedPin);
            lastTime = millis();
        }


        if (counter == 100) {
     3c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
     3c4:	2b64      	cmp	r3, #100	; 0x64
     3c6:	d038      	beq.n	43a <main+0x92>
        ignighterA = adc_read(senseAPin);
     3c8:	9801      	ldr	r0, [sp, #4]
     3ca:	9900      	ldr	r1, [sp, #0]
     3cc:	47b0      	blx	r6
     3ce:	ab02      	add	r3, sp, #8
     3d0:	80d8      	strh	r0, [r3, #6]
        counter++;
     3d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
     3d4:	3301      	adds	r3, #1
     3d6:	930a      	str	r3, [sp, #40]	; 0x28
        sampleTick(&my_altimeter);
     3d8:	a80b      	add	r0, sp, #44	; 0x2c
     3da:	47a8      	blx	r5
        analogSample = adc_read(analogAccelPin);
     3dc:	68b8      	ldr	r0, [r7, #8]
     3de:	68f9      	ldr	r1, [r7, #12]
     3e0:	47b0      	blx	r6
     3e2:	2316      	movs	r3, #22
     3e4:	aa02      	add	r2, sp, #8
     3e6:	4694      	mov	ip, r2
     3e8:	4463      	add	r3, ip
     3ea:	8018      	strh	r0, [r3, #0]
        accelX = (analogSample - 3920) * 0.0227;
     3ec:	8818      	ldrh	r0, [r3, #0]
     3ee:	4b20      	ldr	r3, [pc, #128]	; (470 <main+0xc8>)
     3f0:	469c      	mov	ip, r3
     3f2:	4460      	add	r0, ip
     3f4:	4b1f      	ldr	r3, [pc, #124]	; (474 <main+0xcc>)
     3f6:	4798      	blx	r3
     3f8:	4a1f      	ldr	r2, [pc, #124]	; (478 <main+0xd0>)
     3fa:	4b20      	ldr	r3, [pc, #128]	; (47c <main+0xd4>)
     3fc:	4c20      	ldr	r4, [pc, #128]	; (480 <main+0xd8>)
     3fe:	47a0      	blx	r4
     400:	4b20      	ldr	r3, [pc, #128]	; (484 <main+0xdc>)
     402:	4798      	blx	r3
     404:	9006      	str	r0, [sp, #24]
        averageAccel = averageAccel + accelX;
     406:	9809      	ldr	r0, [sp, #36]	; 0x24
     408:	9906      	ldr	r1, [sp, #24]
     40a:	4c1f      	ldr	r4, [pc, #124]	; (488 <main+0xe0>)
     40c:	47a0      	blx	r4
     40e:	9009      	str	r0, [sp, #36]	; 0x24
        averageAlt = averageAlt + my_altimeter.myBarometer.heightFeet;
     410:	9808      	ldr	r0, [sp, #32]
     412:	9914      	ldr	r1, [sp, #80]	; 0x50
     414:	47a0      	blx	r4
     416:	9008      	str	r0, [sp, #32]
        time = millis();
     418:	4b1c      	ldr	r3, [pc, #112]	; (48c <main+0xe4>)
     41a:	4798      	blx	r3
     41c:	9005      	str	r0, [sp, #20]
        if ((time - lastTime)  > 100000) {
     41e:	9b05      	ldr	r3, [sp, #20]
     420:	9a04      	ldr	r2, [sp, #16]
     422:	1a9b      	subs	r3, r3, r2
     424:	4a1a      	ldr	r2, [pc, #104]	; (490 <main+0xe8>)
     426:	4293      	cmp	r3, r2
     428:	d9cb      	bls.n	3c2 <main+0x1a>
}


inline static void pinToggle(Pin p) {
    PORT->Group[p.group].OUTTGL.reg = (1<<p.pin);
     42a:	2280      	movs	r2, #128	; 0x80
     42c:	0552      	lsls	r2, r2, #21
     42e:	4b19      	ldr	r3, [pc, #100]	; (494 <main+0xec>)
     430:	61da      	str	r2, [r3, #28]
            lastTime = millis();
     432:	4b16      	ldr	r3, [pc, #88]	; (48c <main+0xe4>)
     434:	4798      	blx	r3
     436:	9004      	str	r0, [sp, #16]
     438:	e7c3      	b.n	3c2 <main+0x1a>
         //   pinToggle(LedPin);

            averageAlt = averageAlt / 100;
     43a:	9808      	ldr	r0, [sp, #32]
     43c:	4c16      	ldr	r4, [pc, #88]	; (498 <main+0xf0>)
     43e:	4917      	ldr	r1, [pc, #92]	; (49c <main+0xf4>)
     440:	47a0      	blx	r4
     442:	9008      	str	r0, [sp, #32]
            averageAccel = averageAccel / 100;
     444:	9809      	ldr	r0, [sp, #36]	; 0x24
     446:	4915      	ldr	r1, [pc, #84]	; (49c <main+0xf4>)
     448:	47a0      	blx	r4
     44a:	9009      	str	r0, [sp, #36]	; 0x24

            counter = -1;
     44c:	2301      	movs	r3, #1
     44e:	425b      	negs	r3, r3
     450:	930a      	str	r3, [sp, #40]	; 0x28

            averageAccel = 0;
     452:	2300      	movs	r3, #0
     454:	9309      	str	r3, [sp, #36]	; 0x24
            averageAlt = 0;
     456:	9308      	str	r3, [sp, #32]
        ignighterA = adc_read(senseAPin);
     458:	687b      	ldr	r3, [r7, #4]
     45a:	9300      	str	r3, [sp, #0]
     45c:	4e10      	ldr	r6, [pc, #64]	; (4a0 <main+0xf8>)
        sampleTick(&my_altimeter);
     45e:	4d11      	ldr	r5, [pc, #68]	; (4a4 <main+0xfc>)
     460:	e7b2      	b.n	3c8 <main+0x20>
     462:	46c0      	nop			; (mov r8, r8)
     464:	0000020d 	.word	0x0000020d
     468:	00000a51 	.word	0x00000a51
     46c:	00001e5c 	.word	0x00001e5c
     470:	fffff0b0 	.word	0xfffff0b0
     474:	000019d9 	.word	0x000019d9
     478:	367a0f91 	.word	0x367a0f91
     47c:	3f973eab 	.word	0x3f973eab
     480:	000014d9 	.word	0x000014d9
     484:	00001b01 	.word	0x00001b01
     488:	00000df9 	.word	0x00000df9
     48c:	00000705 	.word	0x00000705
     490:	000186a0 	.word	0x000186a0
     494:	41004400 	.word	0x41004400
     498:	0000111d 	.word	0x0000111d
     49c:	42c80000 	.word	0x42c80000
     4a0:	00000525 	.word	0x00000525
     4a4:	00000aad 	.word	0x00000aad

000004a8 <adcInit>:
#include <util.h>

void adcInit() {

    // set up clock
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;
     4a8:	4a11      	ldr	r2, [pc, #68]	; (4f0 <adcInit+0x48>)
     4aa:	6a11      	ldr	r1, [r2, #32]
     4ac:	2380      	movs	r3, #128	; 0x80
     4ae:	025b      	lsls	r3, r3, #9
     4b0:	430b      	orrs	r3, r1
     4b2:	6213      	str	r3, [r2, #32]

    // divide prescaler by 512 (93.75KHz), max adc freq is 2.1MHz
    ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |
     4b4:	490f      	ldr	r1, [pc, #60]	; (4f4 <adcInit+0x4c>)
     4b6:	22e0      	movs	r2, #224	; 0xe0
     4b8:	00d2      	lsls	r2, r2, #3
     4ba:	808a      	strh	r2, [r1, #4]
                     ADC_CTRLB_RESSEL_12BIT;

    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
     4bc:	480e      	ldr	r0, [pc, #56]	; (4f8 <adcInit+0x50>)
     4be:	4b0f      	ldr	r3, [pc, #60]	; (4fc <adcInit+0x54>)
     4c0:	8058      	strh	r0, [r3, #2]
                        GCLK_CLKCTRL_GEN(0) |
                        GCLK_CLKCTRL_ID(ADC_GCLK_ID);

    ADC->CALIB.reg =
        ADC_CALIB_BIAS_CAL(
     4c2:	4b0f      	ldr	r3, [pc, #60]	; (500 <adcInit+0x58>)
     4c4:	681b      	ldr	r3, [r3, #0]
     4c6:	015b      	lsls	r3, r3, #5
     4c8:	4013      	ands	r3, r2
            (*(uint32_t *)ADC_FUSES_BIASCAL_ADDR >> ADC_FUSES_BIASCAL_Pos)
        ) |
        ADC_CALIB_LINEARITY_CAL(
     4ca:	4a0e      	ldr	r2, [pc, #56]	; (504 <adcInit+0x5c>)
     4cc:	6850      	ldr	r0, [r2, #4]
     4ce:	0140      	lsls	r0, r0, #5
     4d0:	6812      	ldr	r2, [r2, #0]
     4d2:	0ed2      	lsrs	r2, r2, #27
     4d4:	4302      	orrs	r2, r0
     4d6:	20ff      	movs	r0, #255	; 0xff
     4d8:	4002      	ands	r2, r0
        ) |
     4da:	4313      	orrs	r3, r2
    ADC->CALIB.reg =
     4dc:	850b      	strh	r3, [r1, #40]	; 0x28
            (*(uint64_t *)ADC_FUSES_LINEARITY_0_ADDR >> ADC_FUSES_LINEARITY_0_Pos)
        );

    ADC->REFCTRL.reg = ADC_REFCTRL_REFSEL_INTVCC1;
     4de:	2302      	movs	r3, #2
     4e0:	704b      	strb	r3, [r1, #1]

    ADC->CTRLA.reg = ADC_CTRLA_ENABLE; // enable
     4e2:	700b      	strb	r3, [r1, #0]
    while(ADC->STATUS.reg & ADC_STATUS_SYNCBUSY);
     4e4:	000a      	movs	r2, r1
     4e6:	7e53      	ldrb	r3, [r2, #25]
     4e8:	b25b      	sxtb	r3, r3
     4ea:	2b00      	cmp	r3, #0
     4ec:	dbfb      	blt.n	4e6 <adcInit+0x3e>
}
     4ee:	4770      	bx	lr
     4f0:	40000400 	.word	0x40000400
     4f4:	42004000 	.word	0x42004000
     4f8:	0000401e 	.word	0x0000401e
     4fc:	40000c00 	.word	0x40000c00
     500:	00806024 	.word	0x00806024
     504:	00806020 	.word	0x00806020

00000508 <adcSample>:



u16_t adcSample() {
    ADC->SWTRIG.reg = ADC_SWTRIG_START;
     508:	2202      	movs	r2, #2
     50a:	4b05      	ldr	r3, [pc, #20]	; (520 <adcSample+0x18>)
     50c:	731a      	strb	r2, [r3, #12]
    while(!(ADC->INTFLAG.reg & ADC_INTFLAG_RESRDY)); // wait until result is ready
     50e:	0019      	movs	r1, r3
     510:	3a01      	subs	r2, #1
     512:	7e0b      	ldrb	r3, [r1, #24]
     514:	4213      	tst	r3, r2
     516:	d0fc      	beq.n	512 <adcSample+0xa>
    return ADC->RESULT.reg;
     518:	4b01      	ldr	r3, [pc, #4]	; (520 <adcSample+0x18>)
     51a:	8b58      	ldrh	r0, [r3, #26]
     51c:	b280      	uxth	r0, r0
}
     51e:	4770      	bx	lr
     520:	42004000 	.word	0x42004000

00000524 <adc_read>:


u16_t adc_read(Pin p) {
     524:	b530      	push	{r4, r5, lr}
     526:	b083      	sub	sp, #12
     528:	0c03      	lsrs	r3, r0, #16
     52a:	9000      	str	r0, [sp, #0]
     52c:	9101      	str	r1, [sp, #4]
     52e:	b2cd      	uxtb	r5, r1
     530:	b2db      	uxtb	r3, r3
     532:	0e00      	lsrs	r0, r0, #24
    if (p.pin & 1) {
     534:	07c2      	lsls	r2, r0, #31
     536:	d41f      	bmi.n	578 <adc_read+0x54>
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     538:	0844      	lsrs	r4, r0, #1
     53a:	01d9      	lsls	r1, r3, #7
     53c:	1862      	adds	r2, r4, r1
     53e:	4915      	ldr	r1, [pc, #84]	; (594 <adc_read+0x70>)
     540:	468c      	mov	ip, r1
     542:	4462      	add	r2, ip
     544:	7811      	ldrb	r1, [r2, #0]
     546:	240f      	movs	r4, #15
     548:	43a1      	bics	r1, r4
     54a:	2401      	movs	r4, #1
     54c:	4321      	orrs	r1, r4
     54e:	7011      	strb	r1, [r2, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     550:	01db      	lsls	r3, r3, #7
     552:	18c0      	adds	r0, r0, r3
     554:	4b10      	ldr	r3, [pc, #64]	; (598 <adc_read+0x74>)
     556:	469c      	mov	ip, r3
     558:	4460      	add	r0, ip
     55a:	7803      	ldrb	r3, [r0, #0]
     55c:	2201      	movs	r2, #1
     55e:	4313      	orrs	r3, r2
     560:	7003      	strb	r3, [r0, #0]
    // switch pin mux to analog in
    pinAnalog(p);

    ADC->INPUTCTRL.reg = (ADC_INPUTCTRL_MUXPOS(p.chan) // select from proper pin
     562:	211f      	movs	r1, #31
     564:	400d      	ands	r5, r1
                          | ADC_INPUTCTRL_MUXNEG_GND // 0 = gnd
                          | ADC_INPUTCTRL_GAIN_1X);
     566:	21c0      	movs	r1, #192	; 0xc0
     568:	0149      	lsls	r1, r1, #5
     56a:	4329      	orrs	r1, r5
    ADC->INPUTCTRL.reg = (ADC_INPUTCTRL_MUXPOS(p.chan) // select from proper pin
     56c:	4b0b      	ldr	r3, [pc, #44]	; (59c <adc_read+0x78>)
     56e:	6119      	str	r1, [r3, #16]

    return adcSample();
     570:	4b0b      	ldr	r3, [pc, #44]	; (5a0 <adc_read+0x7c>)
     572:	4798      	blx	r3
     574:	b003      	add	sp, #12
     576:	bd30      	pop	{r4, r5, pc}
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     578:	0841      	lsrs	r1, r0, #1
     57a:	01dc      	lsls	r4, r3, #7
     57c:	190a      	adds	r2, r1, r4
     57e:	4905      	ldr	r1, [pc, #20]	; (594 <adc_read+0x70>)
     580:	468c      	mov	ip, r1
     582:	4462      	add	r2, ip
     584:	7814      	ldrb	r4, [r2, #0]
     586:	210f      	movs	r1, #15
     588:	4021      	ands	r1, r4
     58a:	2410      	movs	r4, #16
     58c:	4321      	orrs	r1, r4
     58e:	7011      	strb	r1, [r2, #0]
     590:	e7de      	b.n	550 <adc_read+0x2c>
     592:	46c0      	nop			; (mov r8, r8)
     594:	41004430 	.word	0x41004430
     598:	41004440 	.word	0x41004440
     59c:	42004000 	.word	0x42004000
     5a0:	00000509 	.word	0x00000509

000005a4 <GclkInit>:


static uint32_t cycles_per_ms = 48000000UL / 1000;
static uint32_t cycles_per_us = 48000000UL / 1000000;

void GclkInit() {
     5a4:	b510      	push	{r4, lr}


    SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     5a6:	4a1d      	ldr	r2, [pc, #116]	; (61c <GclkInit+0x78>)
     5a8:	23c2      	movs	r3, #194	; 0xc2
     5aa:	00db      	lsls	r3, r3, #3
     5ac:	6093      	str	r3, [r2, #8]
                           SYSCTRL_INTFLAG_DFLLRDY;
    NVMCTRL->CTRLB.reg |= NVMCTRL_CTRLB_RWS_HALF;
     5ae:	491c      	ldr	r1, [pc, #112]	; (620 <GclkInit+0x7c>)
     5b0:	684b      	ldr	r3, [r1, #4]
     5b2:	2002      	movs	r0, #2
     5b4:	4303      	orrs	r3, r0
     5b6:	604b      	str	r3, [r1, #4]


// start and enable external 32k crystal
    SYSCTRL->XOSC32K.reg = SYSCTRL_XOSC32K_ENABLE |
     5b8:	4b1a      	ldr	r3, [pc, #104]	; (624 <GclkInit+0x80>)
     5ba:	8293      	strh	r3, [r2, #20]
                           SYSCTRL_XOSC32K_XTALEN |
                           SYSCTRL_XOSC32K_EN32K |
                           ( 6 << SYSCTRL_XOSC32K_STARTUP_Pos);

    //wait for crystal to warm up
    while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_XOSC32KRDY)) == 0);
     5bc:	0011      	movs	r1, r2
     5be:	2202      	movs	r2, #2
     5c0:	68cb      	ldr	r3, [r1, #12]
     5c2:	421a      	tst	r2, r3
     5c4:	d0fc      	beq.n	5c0 <GclkInit+0x1c>

#define NVM_DFLL_COARSE_POS    58
#define NVM_DFLL_COARSE_SIZE   6
#define NVM_DFLL_FINE_POS      64
#define NVM_DFLL_FINE_SIZE     10
    uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
     5c6:	4b18      	ldr	r3, [pc, #96]	; (628 <GclkInit+0x84>)
     5c8:	6818      	ldr	r0, [r3, #0]
     5ca:	0e80      	lsrs	r0, r0, #26
                         + (NVM_DFLL_COARSE_POS / 32))
                       >> (NVM_DFLL_COARSE_POS % 32))
                     & ((1 << NVM_DFLL_COARSE_SIZE) - 1);
    if (coarse == 0x3f) {
     5cc:	283f      	cmp	r0, #63	; 0x3f
     5ce:	d021      	beq.n	614 <GclkInit+0x70>
        coarse = 0x1f;
    }
    uint32_t fine =( *((uint32_t *)(NVMCTRL_OTP4)
                       + (NVM_DFLL_FINE_POS / 32))
                     >> (NVM_DFLL_FINE_POS % 32))
     5d0:	4b16      	ldr	r3, [pc, #88]	; (62c <GclkInit+0x88>)
    uint32_t fine =( *((uint32_t *)(NVMCTRL_OTP4)
     5d2:	681c      	ldr	r4, [r3, #0]
     5d4:	05a4      	lsls	r4, r4, #22
     5d6:	0da4      	lsrs	r4, r4, #22
                   & ((1 << NVM_DFLL_FINE_SIZE) - 1);
    if (fine == 0x3ff) {
     5d8:	4b15      	ldr	r3, [pc, #84]	; (630 <GclkInit+0x8c>)
     5da:	429c      	cmp	r4, r3
     5dc:	d01c      	beq.n	618 <GclkInit+0x74>
        fine = 0x1ff;
    }


    // Disable ONDEMAND mode while writing configurations (errata 9905)
    SYSCTRL->DFLLCTRL.reg = dfll_ctrl_usb & ~SYSCTRL_DFLLCTRL_ONDEMAND;
     5de:	4a15      	ldr	r2, [pc, #84]	; (634 <GclkInit+0x90>)
     5e0:	4b0e      	ldr	r3, [pc, #56]	; (61c <GclkInit+0x78>)
     5e2:	849a      	strh	r2, [r3, #36]	; 0x24
    while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_DFLLRDY)) == 0);
     5e4:	0019      	movs	r1, r3
     5e6:	2210      	movs	r2, #16
     5e8:	68cb      	ldr	r3, [r1, #12]
     5ea:	421a      	tst	r2, r3
     5ec:	d0fc      	beq.n	5e8 <GclkInit+0x44>
    SYSCTRL->DFLLVAL.reg = SYSCTRL_DFLLVAL_COARSE(coarse) | SYSCTRL_DFLLVAL_FINE(fine);
     5ee:	0280      	lsls	r0, r0, #10
     5f0:	4320      	orrs	r0, r4
     5f2:	4b0a      	ldr	r3, [pc, #40]	; (61c <GclkInit+0x78>)
     5f4:	6298      	str	r0, [r3, #40]	; 0x28


    //Wait and see if the DFLL output is good . . .
    while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_DFLLRDY)) == 0);
     5f6:	0019      	movs	r1, r3
     5f8:	2210      	movs	r2, #16
     5fa:	68cb      	ldr	r3, [r1, #12]
     5fc:	421a      	tst	r2, r3
     5fe:	d0fc      	beq.n	5fa <GclkInit+0x56>


    SYSCTRL->DFLLCTRL.reg = dfll_ctrl_usb;
     600:	4a0d      	ldr	r2, [pc, #52]	; (638 <GclkInit+0x94>)
     602:	4b06      	ldr	r3, [pc, #24]	; (61c <GclkInit+0x78>)
     604:	849a      	strh	r2, [r3, #36]	; 0x24


    //For generic clock generator 0, select the DFLL48 Clock as input
    GCLK->GENDIV.reg  = (GCLK_GENDIV_DIV(1)  | GCLK_GENDIV_ID(0));
     606:	4b0d      	ldr	r3, [pc, #52]	; (63c <GclkInit+0x98>)
     608:	2280      	movs	r2, #128	; 0x80
     60a:	0052      	lsls	r2, r2, #1
     60c:	609a      	str	r2, [r3, #8]
    GCLK->GENCTRL.reg = (GCLK_GENCTRL_ID(0)  | (GCLK_GENCTRL_SRC_DFLL48M) | (GCLK_GENCTRL_GENEN));
     60e:	4a0c      	ldr	r2, [pc, #48]	; (640 <GclkInit+0x9c>)
     610:	605a      	str	r2, [r3, #4]
}
     612:	bd10      	pop	{r4, pc}
        coarse = 0x1f;
     614:	3820      	subs	r0, #32
     616:	e7db      	b.n	5d0 <GclkInit+0x2c>
        fine = 0x1ff;
     618:	4c0a      	ldr	r4, [pc, #40]	; (644 <GclkInit+0xa0>)
     61a:	e7e0      	b.n	5de <GclkInit+0x3a>
     61c:	40000800 	.word	0x40000800
     620:	41004000 	.word	0x41004000
     624:	0000060e 	.word	0x0000060e
     628:	00806024 	.word	0x00806024
     62c:	00806028 	.word	0x00806028
     630:	000003ff 	.word	0x000003ff
     634:	00000522 	.word	0x00000522
     638:	000005a2 	.word	0x000005a2
     63c:	40000c00 	.word	0x40000c00
     640:	00010700 	.word	0x00010700
     644:	000001ff 	.word	0x000001ff

00000648 <RtcInit>:

void RtcInit() {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(2) | GCLK_GENDIV_DIV(8);
     648:	4b1e      	ldr	r3, [pc, #120]	; (6c4 <RtcInit+0x7c>)
     64a:	4a1f      	ldr	r2, [pc, #124]	; (6c8 <RtcInit+0x80>)
     64c:	609a      	str	r2, [r3, #8]

    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(2) |
     64e:	4a1f      	ldr	r2, [pc, #124]	; (6cc <RtcInit+0x84>)
     650:	605a      	str	r2, [r3, #4]
                        GCLK_GENCTRL_SRC(GCLK_SOURCE_XOSC32K) |
                        GCLK_GENCTRL_IDC |
                        GCLK_GENCTRL_RUNSTDBY |
                        GCLK_GENCTRL_GENEN;
    while (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY);
     652:	001a      	movs	r2, r3
     654:	7853      	ldrb	r3, [r2, #1]
     656:	b25b      	sxtb	r3, r3
     658:	2b00      	cmp	r3, #0
     65a:	dbfb      	blt.n	654 <RtcInit+0xc>

    // Configure RTC
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(RTC_GCLK_ID) |
     65c:	4a1c      	ldr	r2, [pc, #112]	; (6d0 <RtcInit+0x88>)
     65e:	4b19      	ldr	r3, [pc, #100]	; (6c4 <RtcInit+0x7c>)
     660:	805a      	strh	r2, [r3, #2]
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    RTC->MODE1.CTRL.reg = RTC_MODE1_CTRL_MODE_COUNT16;
     662:	2204      	movs	r2, #4
     664:	4b1b      	ldr	r3, [pc, #108]	; (6d4 <RtcInit+0x8c>)
     666:	801a      	strh	r2, [r3, #0]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     668:	001a      	movs	r2, r3
     66a:	7a93      	ldrb	r3, [r2, #10]
     66c:	09db      	lsrs	r3, r3, #7
     66e:	d1fc      	bne.n	66a <RtcInit+0x22>

    // Prescaler needs to be enabled separately from the mode for some reason
    RTC->MODE1.CTRL.reg |= RTC_MODE1_CTRL_PRESCALER_DIV1;
     670:	4a18      	ldr	r2, [pc, #96]	; (6d4 <RtcInit+0x8c>)
     672:	8813      	ldrh	r3, [r2, #0]
     674:	b29b      	uxth	r3, r3
     676:	8013      	strh	r3, [r2, #0]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     678:	7a93      	ldrb	r3, [r2, #10]
     67a:	09db      	lsrs	r3, r3, #7
     67c:	d1fc      	bne.n	678 <RtcInit+0x30>

    RTC->MODE1.PER.reg = 998;
     67e:	4a16      	ldr	r2, [pc, #88]	; (6d8 <RtcInit+0x90>)
     680:	4b14      	ldr	r3, [pc, #80]	; (6d4 <RtcInit+0x8c>)
     682:	829a      	strh	r2, [r3, #20]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     684:	001a      	movs	r2, r3
     686:	7a93      	ldrb	r3, [r2, #10]
     688:	09db      	lsrs	r3, r3, #7
     68a:	d1fc      	bne.n	686 <RtcInit+0x3e>

    RTC->MODE1.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_ADDR(0x10);
     68c:	4b11      	ldr	r3, [pc, #68]	; (6d4 <RtcInit+0x8c>)
     68e:	885a      	ldrh	r2, [r3, #2]
     690:	4912      	ldr	r1, [pc, #72]	; (6dc <RtcInit+0x94>)
     692:	430a      	orrs	r2, r1
     694:	805a      	strh	r2, [r3, #2]

    RTC->MODE1.INTENSET.reg = RTC_MODE1_INTENSET_OVF;
     696:	2280      	movs	r2, #128	; 0x80
     698:	71da      	strb	r2, [r3, #7]

    RTC->MODE1.CTRL.bit.ENABLE = 1;
     69a:	881a      	ldrh	r2, [r3, #0]
     69c:	2102      	movs	r1, #2
     69e:	430a      	orrs	r2, r1
     6a0:	801a      	strh	r2, [r3, #0]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     6a2:	001a      	movs	r2, r3
     6a4:	7a93      	ldrb	r3, [r2, #10]
     6a6:	09db      	lsrs	r3, r3, #7
     6a8:	d1fc      	bne.n	6a4 <RtcInit+0x5c>
     6aa:	4a0d      	ldr	r2, [pc, #52]	; (6e0 <RtcInit+0x98>)
     6ac:	20c0      	movs	r0, #192	; 0xc0
     6ae:	0080      	lsls	r0, r0, #2
     6b0:	5813      	ldr	r3, [r2, r0]
     6b2:	021b      	lsls	r3, r3, #8
     6b4:	0a1b      	lsrs	r3, r3, #8
     6b6:	21c0      	movs	r1, #192	; 0xc0
     6b8:	0609      	lsls	r1, r1, #24
     6ba:	430b      	orrs	r3, r1
     6bc:	5013      	str	r3, [r2, r0]
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     6be:	2308      	movs	r3, #8
     6c0:	6013      	str	r3, [r2, #0]

    NVIC_SetPriority (RTC_IRQn, (1<<__NVIC_PRIO_BITS) - 1);
    NVIC_EnableIRQ(RTC_IRQn);
}
     6c2:	4770      	bx	lr
     6c4:	40000c00 	.word	0x40000c00
     6c8:	00000802 	.word	0x00000802
     6cc:	00230502 	.word	0x00230502
     6d0:	00004204 	.word	0x00004204
     6d4:	40001400 	.word	0x40001400
     6d8:	000003e6 	.word	0x000003e6
     6dc:	00004010 	.word	0x00004010
     6e0:	e000e100 	.word	0xe000e100

000006e4 <RTC_Handler>:

volatile uint32_t time_ms = 0;

void RTC_Handler(void) {
    time_ms += 1000;
     6e4:	4a05      	ldr	r2, [pc, #20]	; (6fc <RTC_Handler+0x18>)
     6e6:	6813      	ldr	r3, [r2, #0]
     6e8:	21fa      	movs	r1, #250	; 0xfa
     6ea:	0089      	lsls	r1, r1, #2
     6ec:	468c      	mov	ip, r1
     6ee:	4463      	add	r3, ip
     6f0:	6013      	str	r3, [r2, #0]

    RTC->MODE1.INTFLAG.reg = 0xFF;
     6f2:	22ff      	movs	r2, #255	; 0xff
     6f4:	4b02      	ldr	r3, [pc, #8]	; (700 <RTC_Handler+0x1c>)
     6f6:	721a      	strb	r2, [r3, #8]
}
     6f8:	4770      	bx	lr
     6fa:	46c0      	nop			; (mov r8, r8)
     6fc:	2000045c 	.word	0x2000045c
     700:	40001400 	.word	0x40001400

00000704 <millis>:

uint32_t millis(void) {
    uint32_t ms;
    ATOMIC_SECTION_ENTER
     704:	f3ef 8210 	mrs	r2, PRIMASK
     708:	b672      	cpsid	i
    ms = time_ms + RTC->MODE1.COUNT.reg;
     70a:	4b0b      	ldr	r3, [pc, #44]	; (738 <millis+0x34>)
     70c:	8a18      	ldrh	r0, [r3, #16]
     70e:	b280      	uxth	r0, r0
     710:	490a      	ldr	r1, [pc, #40]	; (73c <millis+0x38>)
     712:	6809      	ldr	r1, [r1, #0]
    if (RTC->MODE1.INTFLAG.bit.OVF)
     714:	7a1b      	ldrb	r3, [r3, #8]
     716:	09db      	lsrs	r3, r3, #7
    ms = time_ms + RTC->MODE1.COUNT.reg;
     718:	1840      	adds	r0, r0, r1
    if (RTC->MODE1.INTFLAG.bit.OVF)
     71a:	2b00      	cmp	r3, #0
     71c:	d008      	beq.n	730 <millis+0x2c>
        ms = time_ms + RTC->MODE1.COUNT.reg + 1000;
     71e:	4b06      	ldr	r3, [pc, #24]	; (738 <millis+0x34>)
     720:	8a18      	ldrh	r0, [r3, #16]
     722:	4b06      	ldr	r3, [pc, #24]	; (73c <millis+0x38>)
     724:	681b      	ldr	r3, [r3, #0]
     726:	21fa      	movs	r1, #250	; 0xfa
     728:	0089      	lsls	r1, r1, #2
     72a:	468c      	mov	ip, r1
     72c:	4463      	add	r3, ip
     72e:	18c0      	adds	r0, r0, r3
    ATOMIC_SECTION_LEAVE
     730:	f382 8810 	msr	PRIMASK, r2
    return ms;
}
     734:	4770      	bx	lr
     736:	46c0      	nop			; (mov r8, r8)
     738:	40001400 	.word	0x40001400
     73c:	2000045c 	.word	0x2000045c

00000740 <gclkEnable>:

void gclkEnable(u32_t id, u32_t src, u32_t div) {
     740:	b510      	push	{r4, lr}
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
     742:	230f      	movs	r3, #15
     744:	4003      	ands	r3, r0
     746:	0212      	lsls	r2, r2, #8
     748:	4807      	ldr	r0, [pc, #28]	; (768 <gclkEnable+0x28>)
     74a:	4002      	ands	r2, r0
     74c:	431a      	orrs	r2, r3
     74e:	4c07      	ldr	r4, [pc, #28]	; (76c <gclkEnable+0x2c>)
     750:	60a2      	str	r2, [r4, #8]
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     752:	0209      	lsls	r1, r1, #8
     754:	20f8      	movs	r0, #248	; 0xf8
     756:	0140      	lsls	r0, r0, #5
     758:	4001      	ands	r1, r0
     75a:	2080      	movs	r0, #128	; 0x80
     75c:	0240      	lsls	r0, r0, #9
     75e:	4308      	orrs	r0, r1
     760:	4318      	orrs	r0, r3
     762:	6060      	str	r0, [r4, #4]
}
     764:	bd10      	pop	{r4, pc}
     766:	46c0      	nop			; (mov r8, r8)
     768:	00ffff00 	.word	0x00ffff00
     76c:	40000c00 	.word	0x40000c00

00000770 <delayInit>:


void delayInit(void) {
    cycles_per_ms = 48000000UL;
    cycles_per_ms /= 1000;
     770:	4b04      	ldr	r3, [pc, #16]	; (784 <delayInit+0x14>)
     772:	4a05      	ldr	r2, [pc, #20]	; (788 <delayInit+0x18>)
     774:	601a      	str	r2, [r3, #0]
    cycles_per_us = cycles_per_ms / 1000;
     776:	2230      	movs	r2, #48	; 0x30
     778:	605a      	str	r2, [r3, #4]

    SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     77a:	3a2b      	subs	r2, #43	; 0x2b
     77c:	4b03      	ldr	r3, [pc, #12]	; (78c <delayInit+0x1c>)
     77e:	601a      	str	r2, [r3, #0]
}
     780:	4770      	bx	lr
     782:	46c0      	nop			; (mov r8, r8)
     784:	20000004 	.word	0x20000004
     788:	0000bb80 	.word	0x0000bb80
     78c:	e000e010 	.word	0xe000e010

00000790 <delay_us>:
/**
 * \brief Delay loop to delay at least n number of microseconds
 *
 * \param n  Number of microseconds to wait
 */
void delay_us(uint32_t n) {
     790:	b530      	push	{r4, r5, lr}
    while (n--) {
        /* Devide up to blocks of 10u */
        delay_cycles(cycles_per_us);
     792:	4b08      	ldr	r3, [pc, #32]	; (7b4 <delay_us+0x24>)
     794:	685c      	ldr	r4, [r3, #4]


static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
     796:	4a08      	ldr	r2, [pc, #32]	; (7b8 <delay_us+0x28>)
        SysTick->VAL = 0;
     798:	2500      	movs	r5, #0

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     79a:	2180      	movs	r1, #128	; 0x80
     79c:	0249      	lsls	r1, r1, #9
    while (n--) {
     79e:	3801      	subs	r0, #1
     7a0:	d307      	bcc.n	7b2 <delay_us+0x22>
    if (n > 0) {
     7a2:	2c00      	cmp	r4, #0
     7a4:	d0fb      	beq.n	79e <delay_us+0xe>
        SysTick->LOAD = n;
     7a6:	6054      	str	r4, [r2, #4]
        SysTick->VAL = 0;
     7a8:	6095      	str	r5, [r2, #8]
        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     7aa:	6813      	ldr	r3, [r2, #0]
     7ac:	420b      	tst	r3, r1
     7ae:	d0fc      	beq.n	7aa <delay_us+0x1a>
     7b0:	e7f5      	b.n	79e <delay_us+0xe>
    }
}
     7b2:	bd30      	pop	{r4, r5, pc}
     7b4:	20000004 	.word	0x20000004
     7b8:	e000e010 	.word	0xe000e010

000007bc <delay_ms>:
/**
 * \brief Delay loop to delay at least n number of milliseconds
 *
 * \param n  Number of milliseconds to wait
 */
void delay_ms(uint32_t n) {
     7bc:	b530      	push	{r4, r5, lr}
    while (n--) {
        /* Devide up to blocks of 1ms */
        delay_cycles(cycles_per_ms);
     7be:	4b08      	ldr	r3, [pc, #32]	; (7e0 <delay_ms+0x24>)
     7c0:	681c      	ldr	r4, [r3, #0]
        SysTick->LOAD = n;
     7c2:	4a08      	ldr	r2, [pc, #32]	; (7e4 <delay_ms+0x28>)
        SysTick->VAL = 0;
     7c4:	2500      	movs	r5, #0
        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     7c6:	2180      	movs	r1, #128	; 0x80
     7c8:	0249      	lsls	r1, r1, #9
    while (n--) {
     7ca:	3801      	subs	r0, #1
     7cc:	d307      	bcc.n	7de <delay_ms+0x22>
    if (n > 0) {
     7ce:	2c00      	cmp	r4, #0
     7d0:	d0fb      	beq.n	7ca <delay_ms+0xe>
        SysTick->LOAD = n;
     7d2:	6054      	str	r4, [r2, #4]
        SysTick->VAL = 0;
     7d4:	6095      	str	r5, [r2, #8]
        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     7d6:	6813      	ldr	r3, [r2, #0]
     7d8:	420b      	tst	r3, r1
     7da:	d0fc      	beq.n	7d6 <delay_ms+0x1a>
     7dc:	e7f5      	b.n	7ca <delay_ms+0xe>
    }
     7de:	bd30      	pop	{r4, r5, pc}
     7e0:	20000004 	.word	0x20000004
     7e4:	e000e010 	.word	0xe000e010

000007e8 <dmaInit>:
#include <util.h>

DMA_DESC_ALIGN DmacDescriptor dma_descriptors[12];
DMA_DESC_ALIGN DmacDescriptor dma_descriptors_wb[12];

void dmaInit() {
     7e8:	b570      	push	{r4, r5, r6, lr}
	memset(&dma_descriptors, 0, sizeof(dma_descriptors));
     7ea:	4d11      	ldr	r5, [pc, #68]	; (830 <dmaInit+0x48>)
     7ec:	22c0      	movs	r2, #192	; 0xc0
     7ee:	2100      	movs	r1, #0
     7f0:	0028      	movs	r0, r5
     7f2:	4e10      	ldr	r6, [pc, #64]	; (834 <dmaInit+0x4c>)
     7f4:	47b0      	blx	r6
	memset(&dma_descriptors_wb, 0, sizeof(dma_descriptors_wb));
     7f6:	4c10      	ldr	r4, [pc, #64]	; (838 <dmaInit+0x50>)
     7f8:	22c0      	movs	r2, #192	; 0xc0
     7fa:	2100      	movs	r1, #0
     7fc:	0020      	movs	r0, r4
     7fe:	47b0      	blx	r6

	PM->AHBMASK.reg |= PM_AHBMASK_DMAC;
     800:	4b0e      	ldr	r3, [pc, #56]	; (83c <dmaInit+0x54>)
     802:	695a      	ldr	r2, [r3, #20]
     804:	2120      	movs	r1, #32
     806:	430a      	orrs	r2, r1
     808:	615a      	str	r2, [r3, #20]
	PM->APBBMASK.reg |= PM_APBBMASK_DMAC;
     80a:	69da      	ldr	r2, [r3, #28]
     80c:	3910      	subs	r1, #16
     80e:	430a      	orrs	r2, r1
     810:	61da      	str	r2, [r3, #28]

	DMAC->CTRL.bit.DMAENABLE = 0;
     812:	4b0b      	ldr	r3, [pc, #44]	; (840 <dmaInit+0x58>)
     814:	881a      	ldrh	r2, [r3, #0]
     816:	390e      	subs	r1, #14
     818:	438a      	bics	r2, r1
     81a:	801a      	strh	r2, [r3, #0]
	DMAC->CTRL.bit.SWRST = 1;
     81c:	881a      	ldrh	r2, [r3, #0]
     81e:	2101      	movs	r1, #1
     820:	430a      	orrs	r2, r1
     822:	801a      	strh	r2, [r3, #0]

	DMAC->BASEADDR.reg = (unsigned) &dma_descriptors;
     824:	635d      	str	r5, [r3, #52]	; 0x34
	DMAC->WRBADDR.reg = (unsigned) &dma_descriptors_wb;
     826:	639c      	str	r4, [r3, #56]	; 0x38

	DMAC->CTRL.reg = DMAC_CTRL_DMAENABLE | DMAC_CTRL_LVLEN(0xf);
     828:	4a06      	ldr	r2, [pc, #24]	; (844 <dmaInit+0x5c>)
     82a:	801a      	strh	r2, [r3, #0]
}
     82c:	bd70      	pop	{r4, r5, r6, pc}
     82e:	46c0      	nop			; (mov r8, r8)
     830:	20000520 	.word	0x20000520
     834:	00001c99 	.word	0x00001c99
     838:	20000460 	.word	0x20000460
     83c:	40000400 	.word	0x40000400
     840:	41004800 	.word	0x41004800
     844:	00000f02 	.word	0x00000f02

00000848 <readMS5803AdcResults>:
#include <MS5803.h>
#include <boardDefines.h>
#include <math.h>


u32_t readMS5803AdcResults() {
     848:	b5f0      	push	{r4, r5, r6, r7, lr}
     84a:	46c6      	mov	lr, r8
     84c:	b500      	push	{lr}
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     84e:	4f0e      	ldr	r7, [pc, #56]	; (888 <readMS5803AdcResults+0x40>)
     850:	2480      	movs	r4, #128	; 0x80
     852:	01e4      	lsls	r4, r4, #7
     854:	617c      	str	r4, [r7, #20]

    u8_t dummy_tx = 0xFF;
    u8_t dummy_rx;

    pinLow(cs_baro);
    dummy_rx = spiDataTransfer(SPI1, cmdAdcRead_);
     856:	2100      	movs	r1, #0
     858:	2002      	movs	r0, #2
     85a:	4d0c      	ldr	r5, [pc, #48]	; (88c <readMS5803AdcResults+0x44>)
     85c:	47a8      	blx	r5
    u8_t _byte1 = spiDataTransfer(SPI1,dummy_tx);
     85e:	21ff      	movs	r1, #255	; 0xff
     860:	2002      	movs	r0, #2
     862:	47a8      	blx	r5
     864:	4680      	mov	r8, r0
    u8_t _byte2 = spiDataTransfer(SPI1,dummy_tx);
     866:	21ff      	movs	r1, #255	; 0xff
     868:	2002      	movs	r0, #2
     86a:	47a8      	blx	r5
     86c:	0006      	movs	r6, r0
    u8_t _byte3 = spiDataTransfer(SPI1,dummy_tx);
     86e:	21ff      	movs	r1, #255	; 0xff
     870:	2002      	movs	r0, #2
     872:	47a8      	blx	r5
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     874:	61bc      	str	r4, [r7, #24]
    pinHigh(cs_baro);

    u32_t _receive = (_byte1 << 16) | (_byte2 << 8) | (_byte3);
     876:	4643      	mov	r3, r8
     878:	041c      	lsls	r4, r3, #16
     87a:	0236      	lsls	r6, r6, #8
     87c:	4334      	orrs	r4, r6
     87e:	4320      	orrs	r0, r4
    return _receive;
}
     880:	bc04      	pop	{r2}
     882:	4690      	mov	r8, r2
     884:	bdf0      	pop	{r4, r5, r6, r7, pc}
     886:	46c0      	nop			; (mov r8, r8)
     888:	41004400 	.word	0x41004400
     88c:	00000d89 	.word	0x00000d89

00000890 <ConvertPressureTemperature>:

void ConvertPressureTemperature(Barometer *my_barometer) {
     890:	b5f0      	push	{r4, r5, r6, r7, lr}
     892:	46ce      	mov	lr, r9
     894:	4647      	mov	r7, r8
     896:	b580      	push	{r7, lr}
     898:	b08b      	sub	sp, #44	; 0x2c
     89a:	0007      	movs	r7, r0
    volatile const u16_t C1 = my_barometer->coefficients_[0];
     89c:	8803      	ldrh	r3, [r0, #0]
     89e:	251e      	movs	r5, #30
     8a0:	aa02      	add	r2, sp, #8
     8a2:	4694      	mov	ip, r2
     8a4:	4465      	add	r5, ip
     8a6:	802b      	strh	r3, [r5, #0]
    volatile const u16_t C2 = my_barometer->coefficients_[1];
     8a8:	8843      	ldrh	r3, [r0, #2]
     8aa:	8393      	strh	r3, [r2, #28]
    volatile const u16_t C3 = my_barometer->coefficients_[2];
     8ac:	8883      	ldrh	r3, [r0, #4]
     8ae:	8353      	strh	r3, [r2, #26]
    volatile const u16_t C4 = my_barometer->coefficients_[3];
     8b0:	88c3      	ldrh	r3, [r0, #6]
     8b2:	ae08      	add	r6, sp, #32
     8b4:	8033      	strh	r3, [r6, #0]
    volatile const u16_t C5 = my_barometer->coefficients_[4];
     8b6:	8903      	ldrh	r3, [r0, #8]
     8b8:	2216      	movs	r2, #22
     8ba:	4462      	add	r2, ip
     8bc:	8013      	strh	r3, [r2, #0]
    volatile const u16_t C6 = my_barometer->coefficients_[5];
     8be:	8941      	ldrh	r1, [r0, #10]
     8c0:	ab07      	add	r3, sp, #28
     8c2:	8019      	strh	r1, [r3, #0]

    // calculate 1st order pressure and temperature (MS5607 1st order algorithm)
    const  int32_t dT = (my_barometer->rawTempatureData) - ((int32_t)C5 << 8);
     8c4:	8814      	ldrh	r4, [r2, #0]
     8c6:	0224      	lsls	r4, r4, #8
     8c8:	6902      	ldr	r2, [r0, #16]
     8ca:	1b14      	subs	r4, r2, r4
    my_barometer->temperatureCelcus  = 2000 + (((int64_t)dT * C6) >> 32) ;
     8cc:	17e2      	asrs	r2, r4, #31
     8ce:	0011      	movs	r1, r2
     8d0:	8818      	ldrh	r0, [r3, #0]
     8d2:	b280      	uxth	r0, r0
     8d4:	4b2a      	ldr	r3, [pc, #168]	; (980 <ConvertPressureTemperature+0xf0>)
     8d6:	4699      	mov	r9, r3
     8d8:	0022      	movs	r2, r4
     8da:	9101      	str	r1, [sp, #4]
     8dc:	000b      	movs	r3, r1
     8de:	2100      	movs	r1, #0
     8e0:	47c8      	blx	r9
     8e2:	23fa      	movs	r3, #250	; 0xfa
     8e4:	00db      	lsls	r3, r3, #3
     8e6:	469c      	mov	ip, r3
     8e8:	4461      	add	r1, ip
     8ea:	6179      	str	r1, [r7, #20]

    volatile const  int64_t OFF   = ((int64_t)C2 << 16) + (((C4 * (int64_t)dT)) >> 7);
     8ec:	ab02      	add	r3, sp, #8
     8ee:	8b9b      	ldrh	r3, [r3, #28]
     8f0:	b29b      	uxth	r3, r3
     8f2:	4698      	mov	r8, r3
     8f4:	8830      	ldrh	r0, [r6, #0]
     8f6:	b280      	uxth	r0, r0
     8f8:	0022      	movs	r2, r4
     8fa:	9b01      	ldr	r3, [sp, #4]
     8fc:	2100      	movs	r1, #0
     8fe:	47c8      	blx	r9
     900:	064e      	lsls	r6, r1, #25
     902:	09c2      	lsrs	r2, r0, #7
     904:	4332      	orrs	r2, r6
     906:	11cb      	asrs	r3, r1, #7
     908:	2100      	movs	r1, #0
     90a:	4646      	mov	r6, r8
     90c:	0430      	lsls	r0, r6, #16
     90e:	1812      	adds	r2, r2, r0
     910:	414b      	adcs	r3, r1
     912:	9204      	str	r2, [sp, #16]
     914:	9305      	str	r3, [sp, #20]
    volatile const  int64_t SENS  =  ((int64_t)C1 << 15) + (((C3 * (int64_t)dT)) >> 8);
     916:	882d      	ldrh	r5, [r5, #0]
     918:	b2ad      	uxth	r5, r5
     91a:	aa02      	add	r2, sp, #8
     91c:	8b50      	ldrh	r0, [r2, #26]
     91e:	b280      	uxth	r0, r0
     920:	0022      	movs	r2, r4
     922:	9b01      	ldr	r3, [sp, #4]
     924:	2100      	movs	r1, #0
     926:	47c8      	blx	r9
     928:	060c      	lsls	r4, r1, #24
     92a:	0a02      	lsrs	r2, r0, #8
     92c:	4322      	orrs	r2, r4
     92e:	120b      	asrs	r3, r1, #8
     930:	2100      	movs	r1, #0
     932:	03e8      	lsls	r0, r5, #15
     934:	1812      	adds	r2, r2, r0
     936:	414b      	adcs	r3, r1
     938:	9202      	str	r2, [sp, #8]
     93a:	9303      	str	r3, [sp, #12]
    my_barometer->pressureMbar = (((my_barometer->rawPressureData * SENS) / 2097152) - OFF) / 32768;
     93c:	9a02      	ldr	r2, [sp, #8]
     93e:	9b03      	ldr	r3, [sp, #12]
     940:	9c04      	ldr	r4, [sp, #16]
     942:	9d05      	ldr	r5, [sp, #20]
     944:	68f8      	ldr	r0, [r7, #12]
     946:	2100      	movs	r1, #0
     948:	47c8      	blx	r9
     94a:	17ce      	asrs	r6, r1, #31
     94c:	02f6      	lsls	r6, r6, #11
     94e:	0af2      	lsrs	r2, r6, #11
     950:	2300      	movs	r3, #0
     952:	1880      	adds	r0, r0, r2
     954:	4159      	adcs	r1, r3
     956:	02ce      	lsls	r6, r1, #11
     958:	0d42      	lsrs	r2, r0, #21
     95a:	4332      	orrs	r2, r6
     95c:	154b      	asrs	r3, r1, #21
     95e:	1b12      	subs	r2, r2, r4
     960:	41ab      	sbcs	r3, r5
     962:	17dc      	asrs	r4, r3, #31
     964:	0464      	lsls	r4, r4, #17
     966:	0c60      	lsrs	r0, r4, #17
     968:	2100      	movs	r1, #0
     96a:	1880      	adds	r0, r0, r2
     96c:	4159      	adcs	r1, r3
     96e:	044b      	lsls	r3, r1, #17
     970:	0bc0      	lsrs	r0, r0, #15
     972:	4318      	orrs	r0, r3
     974:	61f8      	str	r0, [r7, #28]
}
     976:	b00b      	add	sp, #44	; 0x2c
     978:	bc0c      	pop	{r2, r3}
     97a:	4690      	mov	r8, r2
     97c:	4699      	mov	r9, r3
     97e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     980:	00000da5 	.word	0x00000da5

00000984 <pascalToCent>:
    double altFeet = (1-pow((my_barometer->pressurePa/1013.25),(0.190284)))*145366.45;
    my_barometer->heightFeet = (float)altFeet;

}

void pascalToCent(Barometer *my_barometer) {
     984:	b570      	push	{r4, r5, r6, lr}
     986:	0004      	movs	r4, r0
        748275, 767202, 786555, 806356, 826627,
        847395, 868688, 890537, 912974, 936037,
        959766, 984206
    };

    my_barometer->pressurePa = my_barometer->pressureMbar *1;
     988:	69c2      	ldr	r2, [r0, #28]
     98a:	6182      	str	r2, [r0, #24]

    if (my_barometer->pressurePa > PA_INIT)
     98c:	4b0f      	ldr	r3, [pc, #60]	; (9cc <pascalToCent+0x48>)
     98e:	429a      	cmp	r2, r3
     990:	d816      	bhi.n	9c0 <pascalToCent+0x3c>
        my_barometer->heightCm = lookupTable[0];
    else {
        const int32_t inx = (PA_INIT - my_barometer->pressurePa) >> 10;
     992:	4b0e      	ldr	r3, [pc, #56]	; (9cc <pascalToCent+0x48>)
     994:	1a9b      	subs	r3, r3, r2
     996:	0a9b      	lsrs	r3, r3, #10
        if (inx >= PZLUT_ENTRIES - 1)
     998:	2b4b      	cmp	r3, #75	; 0x4b
     99a:	dc14      	bgt.n	9c6 <pascalToCent+0x42>
            my_barometer->heightCm = lookupTable[PZLUT_ENTRIES - 1];
        else {
            const int32_t pa1 = PA_INIT - (inx << 10);
            const int32_t z1 = lookupTable[inx];
     99c:	4e0c      	ldr	r6, [pc, #48]	; (9d0 <pascalToCent+0x4c>)
     99e:	0099      	lsls	r1, r3, #2
     9a0:	598d      	ldr	r5, [r1, r6]
            const int32_t pa1 = PA_INIT - (inx << 10);
     9a2:	0298      	lsls	r0, r3, #10
     9a4:	4909      	ldr	r1, [pc, #36]	; (9cc <pascalToCent+0x48>)
     9a6:	1a09      	subs	r1, r1, r0
            const int32_t z2 = lookupTable[inx + 1];
            my_barometer->heightCm = (z1 + (((pa1 - my_barometer->pressurePa) * (z2 - z1)) >> 10));
     9a8:	1a8a      	subs	r2, r1, r2
            const int32_t z2 = lookupTable[inx + 1];
     9aa:	3301      	adds	r3, #1
     9ac:	009b      	lsls	r3, r3, #2
            my_barometer->heightCm = (z1 + (((pa1 - my_barometer->pressurePa) * (z2 - z1)) >> 10));
     9ae:	5998      	ldr	r0, [r3, r6]
     9b0:	1b40      	subs	r0, r0, r5
     9b2:	4350      	muls	r0, r2
     9b4:	0a80      	lsrs	r0, r0, #10
     9b6:	1940      	adds	r0, r0, r5
     9b8:	4b06      	ldr	r3, [pc, #24]	; (9d4 <pascalToCent+0x50>)
     9ba:	4798      	blx	r3
     9bc:	6220      	str	r0, [r4, #32]
        }
    }
}
     9be:	e001      	b.n	9c4 <pascalToCent+0x40>
        my_barometer->heightCm = lookupTable[0];
     9c0:	4b05      	ldr	r3, [pc, #20]	; (9d8 <pascalToCent+0x54>)
     9c2:	6203      	str	r3, [r0, #32]
}
     9c4:	bd70      	pop	{r4, r5, r6, pc}
            my_barometer->heightCm = lookupTable[PZLUT_ENTRIES - 1];
     9c6:	4b05      	ldr	r3, [pc, #20]	; (9dc <pascalToCent+0x58>)
     9c8:	6203      	str	r3, [r0, #32]
     9ca:	e7fb      	b.n	9c4 <pascalToCent+0x40>
     9cc:	000199cc 	.word	0x000199cc
     9d0:	00001e6c 	.word	0x00001e6c
     9d4:	0000144d 	.word	0x0000144d
     9d8:	c6e5c000 	.word	0xc6e5c000
     9dc:	497048e0 	.word	0x497048e0

000009e0 <readMS5803Coefficients>:

void readMS5803Coefficients(Barometer *my_barometer) {
     9e0:	b5f0      	push	{r4, r5, r6, r7, lr}
     9e2:	46de      	mov	lr, fp
     9e4:	464f      	mov	r7, r9
     9e6:	4646      	mov	r6, r8
     9e8:	b5c0      	push	{r6, r7, lr}
     9ea:	4680      	mov	r8, r0
     9ec:	24a2      	movs	r4, #162	; 0xa2

    u8_t dummy_tx = 0xFF;
    u8_t dummy_rx;

    for (u8_t coeff_num = 0; coeff_num < 6 ; ++coeff_num ) {
        delay_us(600);
     9ee:	4e15      	ldr	r6, [pc, #84]	; (a44 <readMS5803Coefficients+0x64>)
        u8_t _cmd = MS5803_CMD_PROM_READ + ((coeff_num+1)*2);
        delay_us(600);
        pinLow(cs_baro);
        dummy_rx = spiDataTransfer(SPI1, _cmd);
     9f0:	4f15      	ldr	r7, [pc, #84]	; (a48 <readMS5803Coefficients+0x68>)
        delay_us(600);
     9f2:	2096      	movs	r0, #150	; 0x96
     9f4:	0080      	lsls	r0, r0, #2
     9f6:	47b0      	blx	r6
        delay_us(600);
     9f8:	2096      	movs	r0, #150	; 0x96
     9fa:	0080      	lsls	r0, r0, #2
     9fc:	47b0      	blx	r6
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     9fe:	4d13      	ldr	r5, [pc, #76]	; (a4c <readMS5803Coefficients+0x6c>)
     a00:	2380      	movs	r3, #128	; 0x80
     a02:	01db      	lsls	r3, r3, #7
     a04:	469b      	mov	fp, r3
     a06:	616b      	str	r3, [r5, #20]
        dummy_rx = spiDataTransfer(SPI1, _cmd);
     a08:	0021      	movs	r1, r4
     a0a:	2002      	movs	r0, #2
     a0c:	47b8      	blx	r7
        u8_t _byte1 = spiDataTransfer(SPI1,dummy_tx);
     a0e:	21ff      	movs	r1, #255	; 0xff
     a10:	2002      	movs	r0, #2
     a12:	47b8      	blx	r7
     a14:	4681      	mov	r9, r0
        u8_t _byte2 = spiDataTransfer(SPI1,dummy_tx);
     a16:	21ff      	movs	r1, #255	; 0xff
     a18:	2002      	movs	r0, #2
     a1a:	47b8      	blx	r7
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     a1c:	465b      	mov	r3, fp
     a1e:	61ab      	str	r3, [r5, #24]
        pinHigh(cs_baro);
        my_barometer->coefficients_[coeff_num] = (_byte1 << 8) | _byte2;
     a20:	464b      	mov	r3, r9
     a22:	021d      	lsls	r5, r3, #8
     a24:	4328      	orrs	r0, r5
     a26:	4643      	mov	r3, r8
     a28:	8018      	strh	r0, [r3, #0]
     a2a:	3402      	adds	r4, #2
     a2c:	b2e4      	uxtb	r4, r4
     a2e:	2302      	movs	r3, #2
     a30:	469c      	mov	ip, r3
     a32:	44e0      	add	r8, ip
    for (u8_t coeff_num = 0; coeff_num < 6 ; ++coeff_num ) {
     a34:	2cae      	cmp	r4, #174	; 0xae
     a36:	d1dc      	bne.n	9f2 <readMS5803Coefficients+0x12>
    }

}
     a38:	bc1c      	pop	{r2, r3, r4}
     a3a:	4690      	mov	r8, r2
     a3c:	4699      	mov	r9, r3
     a3e:	46a3      	mov	fp, r4
     a40:	bdf0      	pop	{r4, r5, r6, r7, pc}
     a42:	46c0      	nop			; (mov r8, r8)
     a44:	00000791 	.word	0x00000791
     a48:	00000d89 	.word	0x00000d89
     a4c:	41004400 	.word	0x41004400

00000a50 <initMS5803Barometer>:

void initMS5803Barometer(Barometer *my_barometer) {
     a50:	b570      	push	{r4, r5, r6, lr}
     a52:	0004      	movs	r4, r0
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     a54:	4d0d      	ldr	r5, [pc, #52]	; (a8c <initMS5803Barometer+0x3c>)
     a56:	2680      	movs	r6, #128	; 0x80
     a58:	01f6      	lsls	r6, r6, #7
     a5a:	616e      	str	r6, [r5, #20]

    u8_t dummy_tx = 0xFF;
    u8_t dummy_rx;

    pinLow(cs_baro);
    dummy_rx = spiDataTransfer(SPI1, MS5803_CMD_RES);
     a5c:	211e      	movs	r1, #30
     a5e:	2002      	movs	r0, #2
     a60:	4b0b      	ldr	r3, [pc, #44]	; (a90 <initMS5803Barometer+0x40>)
     a62:	4798      	blx	r3
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     a64:	61ae      	str	r6, [r5, #24]
    pinHigh(cs_baro);
    delay_ms(200);
     a66:	20c8      	movs	r0, #200	; 0xc8
     a68:	4b0a      	ldr	r3, [pc, #40]	; (a94 <initMS5803Barometer+0x44>)
     a6a:	4798      	blx	r3
    readMS5803Coefficients(my_barometer);
     a6c:	0020      	movs	r0, r4
     a6e:	4b0a      	ldr	r3, [pc, #40]	; (a98 <initMS5803Barometer+0x48>)
     a70:	4798      	blx	r3

    my_barometer->heightCm = 4000;
     a72:	4b0a      	ldr	r3, [pc, #40]	; (a9c <initMS5803Barometer+0x4c>)
     a74:	6223      	str	r3, [r4, #32]
    my_barometer->pressurePa = 10000;
     a76:	4b0a      	ldr	r3, [pc, #40]	; (aa0 <initMS5803Barometer+0x50>)
     a78:	61a3      	str	r3, [r4, #24]
    my_barometer->rawPressureData = 4311550;
     a7a:	4b0a      	ldr	r3, [pc, #40]	; (aa4 <initMS5803Barometer+0x54>)
     a7c:	60e3      	str	r3, [r4, #12]
    my_barometer->rawTempatureData = 8387300;
     a7e:	4b0a      	ldr	r3, [pc, #40]	; (aa8 <initMS5803Barometer+0x58>)
     a80:	6123      	str	r3, [r4, #16]
    my_barometer->temperatureCelcus = 2000;
     a82:	23fa      	movs	r3, #250	; 0xfa
     a84:	00db      	lsls	r3, r3, #3
     a86:	6163      	str	r3, [r4, #20]




}
     a88:	bd70      	pop	{r4, r5, r6, pc}
     a8a:	46c0      	nop			; (mov r8, r8)
     a8c:	41004400 	.word	0x41004400
     a90:	00000d89 	.word	0x00000d89
     a94:	000007bd 	.word	0x000007bd
     a98:	000009e1 	.word	0x000009e1
     a9c:	457a0000 	.word	0x457a0000
     aa0:	00002710 	.word	0x00002710
     aa4:	0041c9fe 	.word	0x0041c9fe
     aa8:	007ffae4 	.word	0x007ffae4

00000aac <sampleTick>:
#include <boardDefines.h>
#include <MS5803.h>



void sampleTick(Altimeter *my_altimeter) {
     aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     aae:	46de      	mov	lr, fp
     ab0:	4657      	mov	r7, sl
     ab2:	464e      	mov	r6, r9
     ab4:	4645      	mov	r5, r8
     ab6:	b5e0      	push	{r5, r6, r7, lr}
     ab8:	0004      	movs	r4, r0

    my_altimeter->batV = (0.001906 * adc_read(senseBatPin));
     aba:	4b69      	ldr	r3, [pc, #420]	; (c60 <sampleTick+0x1b4>)
     abc:	6818      	ldr	r0, [r3, #0]
     abe:	6859      	ldr	r1, [r3, #4]
     ac0:	4b68      	ldr	r3, [pc, #416]	; (c64 <sampleTick+0x1b8>)
     ac2:	4798      	blx	r3
     ac4:	4b68      	ldr	r3, [pc, #416]	; (c68 <sampleTick+0x1bc>)
     ac6:	4798      	blx	r3
     ac8:	4b68      	ldr	r3, [pc, #416]	; (c6c <sampleTick+0x1c0>)
     aca:	4699      	mov	r9, r3
     acc:	4a68      	ldr	r2, [pc, #416]	; (c70 <sampleTick+0x1c4>)
     ace:	4b69      	ldr	r3, [pc, #420]	; (c74 <sampleTick+0x1c8>)
     ad0:	47c8      	blx	r9
     ad2:	4b69      	ldr	r3, [pc, #420]	; (c78 <sampleTick+0x1cc>)
     ad4:	4698      	mov	r8, r3
     ad6:	4798      	blx	r3
     ad8:	66a0      	str	r0, [r4, #104]	; 0x68
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     ada:	4d68      	ldr	r5, [pc, #416]	; (c7c <sampleTick+0x1d0>)
     adc:	2780      	movs	r7, #128	; 0x80
     ade:	01ff      	lsls	r7, r7, #7
     ae0:	616f      	str	r7, [r5, #20]
    uint8_t dummy_Tx = 0xFF;
    uint8_t dummy_rx;


    pinLow(cs_baro);
    dummy_rx = spiDataTransfer(SPI1, 0x50);
     ae2:	2150      	movs	r1, #80	; 0x50
     ae4:	2002      	movs	r0, #2
     ae6:	4e66      	ldr	r6, [pc, #408]	; (c80 <sampleTick+0x1d4>)
     ae8:	47b0      	blx	r6
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     aea:	61af      	str	r7, [r5, #24]
    pinHigh(cs_baro);
    delay_ms(2);
     aec:	2002      	movs	r0, #2
     aee:	4b65      	ldr	r3, [pc, #404]	; (c84 <sampleTick+0x1d8>)
     af0:	469b      	mov	fp, r3
     af2:	4798      	blx	r3
    my_altimeter->myBarometer.rawTempatureData = readMS5803AdcResults();
     af4:	4b64      	ldr	r3, [pc, #400]	; (c88 <sampleTick+0x1dc>)
     af6:	469a      	mov	sl, r3
     af8:	4798      	blx	r3
     afa:	6120      	str	r0, [r4, #16]
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     afc:	616f      	str	r7, [r5, #20]

    pinLow(cs_baro);
    dummy_rx = spiDataTransfer(SPI1, 0x42);
     afe:	2142      	movs	r1, #66	; 0x42
     b00:	2002      	movs	r0, #2
     b02:	47b0      	blx	r6
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     b04:	61af      	str	r7, [r5, #24]
    pinHigh(cs_baro);
    delay_ms(2);
     b06:	2002      	movs	r0, #2
     b08:	47d8      	blx	fp
    my_altimeter->myBarometer.rawPressureData = readMS5803AdcResults();
     b0a:	47d0      	blx	sl
     b0c:	60e0      	str	r0, [r4, #12]


    ConvertPressureTemperature(&my_altimeter->myBarometer);
     b0e:	0020      	movs	r0, r4
     b10:	4b5e      	ldr	r3, [pc, #376]	; (c8c <sampleTick+0x1e0>)
     b12:	4798      	blx	r3
    pascalToCent(&my_altimeter->myBarometer);
     b14:	0020      	movs	r0, r4
     b16:	4b5e      	ldr	r3, [pc, #376]	; (c90 <sampleTick+0x1e4>)
     b18:	4798      	blx	r3
    my_altimeter->myBarometer.heightFeet = 0.03281 * my_altimeter->myBarometer.heightCm;
     b1a:	6a20      	ldr	r0, [r4, #32]
     b1c:	4b5d      	ldr	r3, [pc, #372]	; (c94 <sampleTick+0x1e8>)
     b1e:	4798      	blx	r3
     b20:	4a5d      	ldr	r2, [pc, #372]	; (c98 <sampleTick+0x1ec>)
     b22:	4b5e      	ldr	r3, [pc, #376]	; (c9c <sampleTick+0x1f0>)
     b24:	47c8      	blx	r9
     b26:	47c0      	blx	r8
     b28:	6260      	str	r0, [r4, #36]	; 0x24
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     b2a:	2780      	movs	r7, #128	; 0x80
     b2c:	037f      	lsls	r7, r7, #13
     b2e:	616f      	str	r7, [r5, #20]


 

    pinLow(cs_imu);
    dummy_rx = spiDataTransfer(SPI1, ACCEL_XOUT_H);
     b30:	21ba      	movs	r1, #186	; 0xba
     b32:	2002      	movs	r0, #2
     b34:	47b0      	blx	r6
    my_altimeter->myIMU.accelXHigh  = spiDataTransfer(SPI1,dummy_Tx);
     b36:	21ff      	movs	r1, #255	; 0xff
     b38:	2002      	movs	r0, #2
     b3a:	47b0      	blx	r6
     b3c:	234c      	movs	r3, #76	; 0x4c
     b3e:	54e0      	strb	r0, [r4, r3]
    my_altimeter->myIMU.accelXLow  = spiDataTransfer(SPI1,dummy_Tx);
     b40:	21ff      	movs	r1, #255	; 0xff
     b42:	2002      	movs	r0, #2
     b44:	47b0      	blx	r6
     b46:	234d      	movs	r3, #77	; 0x4d
     b48:	54e0      	strb	r0, [r4, r3]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     b4a:	61af      	str	r7, [r5, #24]
    pinHigh(cs_imu);

    //check if last bit in second byte is 1 therefor negative number
    int16_t negativex = (my_altimeter->myIMU.accelXLow & (1 <<7)) != 0;
     b4c:	5ce0      	ldrb	r0, [r4, r3]
    if (negativex) {
     b4e:	b243      	sxtb	r3, r0
     b50:	2b00      	cmp	r3, #0
     b52:	db66      	blt.n	c22 <sampleTick+0x176>
        // if negative then preform 2's complement to int conversion
        my_altimeter->myIMU.accelX = ((my_altimeter->myIMU.accelXLow | ~((1 << 8) - 1)) << 8 ) | my_altimeter->myIMU.accelXHigh;
    } else {
        my_altimeter->myIMU.accelX = (my_altimeter->myIMU.accelXLow << 8) + my_altimeter->myIMU.accelXHigh;
     b54:	0200      	lsls	r0, r0, #8
     b56:	234c      	movs	r3, #76	; 0x4c
     b58:	5ce3      	ldrb	r3, [r4, r3]
     b5a:	18c0      	adds	r0, r0, r3
     b5c:	4b50      	ldr	r3, [pc, #320]	; (ca0 <sampleTick+0x1f4>)
     b5e:	4798      	blx	r3
     b60:	62a0      	str	r0, [r4, #40]	; 0x28
    }
    my_altimeter->myIMU.accelX = my_altimeter->myIMU.accelX *0.00006103;
     b62:	6aa0      	ldr	r0, [r4, #40]	; 0x28
     b64:	4b4b      	ldr	r3, [pc, #300]	; (c94 <sampleTick+0x1e8>)
     b66:	4798      	blx	r3
     b68:	4a4e      	ldr	r2, [pc, #312]	; (ca4 <sampleTick+0x1f8>)
     b6a:	4b4f      	ldr	r3, [pc, #316]	; (ca8 <sampleTick+0x1fc>)
     b6c:	4d3f      	ldr	r5, [pc, #252]	; (c6c <sampleTick+0x1c0>)
     b6e:	47a8      	blx	r5
     b70:	4b41      	ldr	r3, [pc, #260]	; (c78 <sampleTick+0x1cc>)
     b72:	4798      	blx	r3
     b74:	62a0      	str	r0, [r4, #40]	; 0x28
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     b76:	4e41      	ldr	r6, [pc, #260]	; (c7c <sampleTick+0x1d0>)
     b78:	2780      	movs	r7, #128	; 0x80
     b7a:	037f      	lsls	r7, r7, #13
     b7c:	6177      	str	r7, [r6, #20]



    pinLow(cs_imu);
    dummy_rx = spiDataTransfer(SPI1, ACCEL_YOUT_H);
     b7e:	21bc      	movs	r1, #188	; 0xbc
     b80:	2002      	movs	r0, #2
     b82:	4d3f      	ldr	r5, [pc, #252]	; (c80 <sampleTick+0x1d4>)
     b84:	47a8      	blx	r5
    my_altimeter->myIMU.accelYHigh = spiDataTransfer(SPI1,dummy_Tx);
     b86:	21ff      	movs	r1, #255	; 0xff
     b88:	2002      	movs	r0, #2
     b8a:	47a8      	blx	r5
     b8c:	234e      	movs	r3, #78	; 0x4e
     b8e:	54e0      	strb	r0, [r4, r3]
    my_altimeter->myIMU.accelYLow = spiDataTransfer(SPI1,dummy_Tx);
     b90:	21ff      	movs	r1, #255	; 0xff
     b92:	2002      	movs	r0, #2
     b94:	47a8      	blx	r5
     b96:	234f      	movs	r3, #79	; 0x4f
     b98:	54e0      	strb	r0, [r4, r3]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     b9a:	61b7      	str	r7, [r6, #24]
    pinHigh(cs_imu);

    //check if last bit in second byte is 1 therefor negative number
    int16_t negativey = (my_altimeter->myIMU.accelYLow & (1 <<7)) != 0;
     b9c:	5ce0      	ldrb	r0, [r4, r3]
    if (negativey) {
     b9e:	b243      	sxtb	r3, r0
     ba0:	2b00      	cmp	r3, #0
     ba2:	db48      	blt.n	c36 <sampleTick+0x18a>
        // if negative then preform 2's complement to int conversion
        my_altimeter->myIMU.accelY = ((my_altimeter->myIMU.accelYLow | ~((1 << 8) - 1)) << 8 ) | my_altimeter->myIMU.accelYHigh;
    } else {
        my_altimeter->myIMU.accelY = (my_altimeter->myIMU.accelYLow << 8) + my_altimeter->myIMU.accelYHigh;
     ba4:	0200      	lsls	r0, r0, #8
     ba6:	234e      	movs	r3, #78	; 0x4e
     ba8:	5ce3      	ldrb	r3, [r4, r3]
     baa:	18c0      	adds	r0, r0, r3
     bac:	4b3c      	ldr	r3, [pc, #240]	; (ca0 <sampleTick+0x1f4>)
     bae:	4798      	blx	r3
     bb0:	62e0      	str	r0, [r4, #44]	; 0x2c
    }
    my_altimeter->myIMU.accelY = my_altimeter->myIMU.accelY *0.00006103;
     bb2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
     bb4:	4b37      	ldr	r3, [pc, #220]	; (c94 <sampleTick+0x1e8>)
     bb6:	4798      	blx	r3
     bb8:	4a3a      	ldr	r2, [pc, #232]	; (ca4 <sampleTick+0x1f8>)
     bba:	4b3b      	ldr	r3, [pc, #236]	; (ca8 <sampleTick+0x1fc>)
     bbc:	4d2b      	ldr	r5, [pc, #172]	; (c6c <sampleTick+0x1c0>)
     bbe:	47a8      	blx	r5
     bc0:	4b2d      	ldr	r3, [pc, #180]	; (c78 <sampleTick+0x1cc>)
     bc2:	4798      	blx	r3
     bc4:	62e0      	str	r0, [r4, #44]	; 0x2c
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     bc6:	4e2d      	ldr	r6, [pc, #180]	; (c7c <sampleTick+0x1d0>)
     bc8:	2780      	movs	r7, #128	; 0x80
     bca:	037f      	lsls	r7, r7, #13
     bcc:	6177      	str	r7, [r6, #20]


    pinLow(cs_imu);
    dummy_rx = spiDataTransfer(SPI1, ACCEL_ZOUT_H);
     bce:	21be      	movs	r1, #190	; 0xbe
     bd0:	2002      	movs	r0, #2
     bd2:	4d2b      	ldr	r5, [pc, #172]	; (c80 <sampleTick+0x1d4>)
     bd4:	47a8      	blx	r5
    my_altimeter->myIMU.accelZHigh = spiDataTransfer(SPI1,dummy_Tx);
     bd6:	21ff      	movs	r1, #255	; 0xff
     bd8:	2002      	movs	r0, #2
     bda:	47a8      	blx	r5
     bdc:	2350      	movs	r3, #80	; 0x50
     bde:	54e0      	strb	r0, [r4, r3]
    my_altimeter->myIMU.accelZLow = spiDataTransfer(SPI1,dummy_Tx);
     be0:	21ff      	movs	r1, #255	; 0xff
     be2:	2002      	movs	r0, #2
     be4:	47a8      	blx	r5
     be6:	2351      	movs	r3, #81	; 0x51
     be8:	54e0      	strb	r0, [r4, r3]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     bea:	61b7      	str	r7, [r6, #24]
    pinHigh(cs_imu);

    //check if last bit in second byte is 1 therefor negative number
    int16_t negativez = (my_altimeter->myIMU.accelZLow & (1 <<7)) != 0;
     bec:	5ce0      	ldrb	r0, [r4, r3]
    if (negativez) {
     bee:	b243      	sxtb	r3, r0
     bf0:	2b00      	cmp	r3, #0
     bf2:	db2a      	blt.n	c4a <sampleTick+0x19e>
        // if negative then preform 2's complement to int conversion
        my_altimeter->myIMU.accelZ = ((my_altimeter->myIMU.accelZLow | ~((1 << 8) - 1)) << 8 ) | my_altimeter->myIMU.accelZHigh;
    } else {
        my_altimeter->myIMU.accelZ = (my_altimeter->myIMU.accelZLow << 8) + my_altimeter->myIMU.accelZHigh;
     bf4:	0200      	lsls	r0, r0, #8
     bf6:	2350      	movs	r3, #80	; 0x50
     bf8:	5ce3      	ldrb	r3, [r4, r3]
     bfa:	18c0      	adds	r0, r0, r3
     bfc:	4b28      	ldr	r3, [pc, #160]	; (ca0 <sampleTick+0x1f4>)
     bfe:	4798      	blx	r3
     c00:	6320      	str	r0, [r4, #48]	; 0x30
    }
    my_altimeter->myIMU.accelZ = my_altimeter->myIMU.accelZ *0.00006103;
     c02:	6b20      	ldr	r0, [r4, #48]	; 0x30
     c04:	4b23      	ldr	r3, [pc, #140]	; (c94 <sampleTick+0x1e8>)
     c06:	4798      	blx	r3
     c08:	4a26      	ldr	r2, [pc, #152]	; (ca4 <sampleTick+0x1f8>)
     c0a:	4b27      	ldr	r3, [pc, #156]	; (ca8 <sampleTick+0x1fc>)
     c0c:	4d17      	ldr	r5, [pc, #92]	; (c6c <sampleTick+0x1c0>)
     c0e:	47a8      	blx	r5
     c10:	4b19      	ldr	r3, [pc, #100]	; (c78 <sampleTick+0x1cc>)
     c12:	4798      	blx	r3
     c14:	6320      	str	r0, [r4, #48]	; 0x30





}
     c16:	bc3c      	pop	{r2, r3, r4, r5}
     c18:	4690      	mov	r8, r2
     c1a:	4699      	mov	r9, r3
     c1c:	46a2      	mov	sl, r4
     c1e:	46ab      	mov	fp, r5
     c20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        my_altimeter->myIMU.accelX = ((my_altimeter->myIMU.accelXLow | ~((1 << 8) - 1)) << 8 ) | my_altimeter->myIMU.accelXHigh;
     c22:	234c      	movs	r3, #76	; 0x4c
     c24:	5ce2      	ldrb	r2, [r4, r3]
     c26:	4b21      	ldr	r3, [pc, #132]	; (cac <sampleTick+0x200>)
     c28:	4313      	orrs	r3, r2
     c2a:	0200      	lsls	r0, r0, #8
     c2c:	4318      	orrs	r0, r3
     c2e:	4b1c      	ldr	r3, [pc, #112]	; (ca0 <sampleTick+0x1f4>)
     c30:	4798      	blx	r3
     c32:	62a0      	str	r0, [r4, #40]	; 0x28
     c34:	e795      	b.n	b62 <sampleTick+0xb6>
        my_altimeter->myIMU.accelY = ((my_altimeter->myIMU.accelYLow | ~((1 << 8) - 1)) << 8 ) | my_altimeter->myIMU.accelYHigh;
     c36:	234e      	movs	r3, #78	; 0x4e
     c38:	5ce2      	ldrb	r2, [r4, r3]
     c3a:	4b1c      	ldr	r3, [pc, #112]	; (cac <sampleTick+0x200>)
     c3c:	4313      	orrs	r3, r2
     c3e:	0200      	lsls	r0, r0, #8
     c40:	4318      	orrs	r0, r3
     c42:	4b17      	ldr	r3, [pc, #92]	; (ca0 <sampleTick+0x1f4>)
     c44:	4798      	blx	r3
     c46:	62e0      	str	r0, [r4, #44]	; 0x2c
     c48:	e7b3      	b.n	bb2 <sampleTick+0x106>
        my_altimeter->myIMU.accelZ = ((my_altimeter->myIMU.accelZLow | ~((1 << 8) - 1)) << 8 ) | my_altimeter->myIMU.accelZHigh;
     c4a:	2350      	movs	r3, #80	; 0x50
     c4c:	5ce2      	ldrb	r2, [r4, r3]
     c4e:	4b17      	ldr	r3, [pc, #92]	; (cac <sampleTick+0x200>)
     c50:	4313      	orrs	r3, r2
     c52:	0200      	lsls	r0, r0, #8
     c54:	4318      	orrs	r0, r3
     c56:	4b12      	ldr	r3, [pc, #72]	; (ca0 <sampleTick+0x1f4>)
     c58:	4798      	blx	r3
     c5a:	6320      	str	r0, [r4, #48]	; 0x30
     c5c:	e7d1      	b.n	c02 <sampleTick+0x156>
     c5e:	46c0      	nop			; (mov r8, r8)
     c60:	00001fa0 	.word	0x00001fa0
     c64:	00000525 	.word	0x00000525
     c68:	000019d9 	.word	0x000019d9
     c6c:	000014d9 	.word	0x000014d9
     c70:	eaa2a0a9 	.word	0xeaa2a0a9
     c74:	3f5f3a57 	.word	0x3f5f3a57
     c78:	00001b01 	.word	0x00001b01
     c7c:	41004400 	.word	0x41004400
     c80:	00000d89 	.word	0x00000d89
     c84:	000007bd 	.word	0x000007bd
     c88:	00000849 	.word	0x00000849
     c8c:	00000891 	.word	0x00000891
     c90:	00000985 	.word	0x00000985
     c94:	00001a5d 	.word	0x00001a5d
     c98:	e9f6a93f 	.word	0xe9f6a93f
     c9c:	3fa0cc78 	.word	0x3fa0cc78
     ca0:	000013ad 	.word	0x000013ad
     ca4:	d52535ef 	.word	0xd52535ef
     ca8:	3f0fff4e 	.word	0x3f0fff4e
     cac:	ffff0000 	.word	0xffff0000

00000cb0 <sercomClockEnable>:
#include <util.h>

void sercomClockEnable(SercomId id, uint32_t clock_channel, u8_t divider) {
     cb0:	b570      	push	{r4, r5, r6, lr}
     cb2:	0005      	movs	r5, r0
     cb4:	000c      	movs	r4, r1
    // prevent this clock write from changing any other clocks
    PM->APBCMASK.reg |= 1 << (PM_APBCMASK_SERCOM0_Pos + id);
     cb6:	490e      	ldr	r1, [pc, #56]	; (cf0 <sercomClockEnable+0x40>)
     cb8:	6a08      	ldr	r0, [r1, #32]
     cba:	1cae      	adds	r6, r5, #2
     cbc:	2301      	movs	r3, #1
     cbe:	40b3      	lsls	r3, r6
     cc0:	4303      	orrs	r3, r0
     cc2:	620b      	str	r3, [r1, #32]


    if (clock_channel != 0) {
     cc4:	2c00      	cmp	r4, #0
     cc6:	d10d      	bne.n	ce4 <sercomClockEnable+0x34>
    }


    // attach clock
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(clock_channel) |
     cc8:	0224      	lsls	r4, r4, #8
     cca:	23f0      	movs	r3, #240	; 0xf0
     ccc:	011b      	lsls	r3, r3, #4
     cce:	401c      	ands	r4, r3
     cd0:	2380      	movs	r3, #128	; 0x80
     cd2:	01db      	lsls	r3, r3, #7
     cd4:	431c      	orrs	r4, r3
                        GCLK_CLKCTRL_ID(SERCOM0_GCLK_ID_CORE + id);
     cd6:	3514      	adds	r5, #20
     cd8:	233f      	movs	r3, #63	; 0x3f
     cda:	401d      	ands	r5, r3
                        GCLK_CLKCTRL_GEN(clock_channel) |
     cdc:	432c      	orrs	r4, r5
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
     cde:	4b05      	ldr	r3, [pc, #20]	; (cf4 <sercomClockEnable+0x44>)
     ce0:	805c      	strh	r4, [r3, #2]
}
     ce2:	bd70      	pop	{r4, r5, r6, pc}
        gclkEnable(clock_channel, GCLK_SOURCE_DFLL48M, divider);
     ce4:	2107      	movs	r1, #7
     ce6:	0020      	movs	r0, r4
     ce8:	4b03      	ldr	r3, [pc, #12]	; (cf8 <sercomClockEnable+0x48>)
     cea:	4798      	blx	r3
     cec:	e7ec      	b.n	cc8 <sercomClockEnable+0x18>
     cee:	46c0      	nop			; (mov r8, r8)
     cf0:	40000400 	.word	0x40000400
     cf4:	40000c00 	.word	0x40000c00
     cf8:	00000741 	.word	0x00000741

00000cfc <sercomReset>:
    return (Sercom*) (0x42000800U + id * 1024);
     cfc:	0280      	lsls	r0, r0, #10
     cfe:	4b05      	ldr	r3, [pc, #20]	; (d14 <sercomReset+0x18>)
     d00:	469c      	mov	ip, r3
     d02:	4460      	add	r0, ip


void sercomReset(SercomId id) {
    sercom(id)->SPI.CTRLA.reg = SERCOM_SPI_CTRLA_SWRST;
     d04:	2301      	movs	r3, #1
     d06:	6003      	str	r3, [r0, #0]
    while(sercom(id)->SPI.CTRLA.reg & SERCOM_SPI_CTRLA_SWRST);
     d08:	2201      	movs	r2, #1
     d0a:	6803      	ldr	r3, [r0, #0]
     d0c:	421a      	tst	r2, r3
     d0e:	d1fc      	bne.n	d0a <sercomReset+0xe>
}
     d10:	4770      	bx	lr
     d12:	46c0      	nop			; (mov r8, r8)
     d14:	42000800 	.word	0x42000800

00000d18 <sercomSpiMasterInit>:
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
}


void sercomSpiMasterInit(SercomId id, u32_t dipo, u32_t dopo, bool cpol, bool cpha, u8_t baud) {
     d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     d1a:	46ce      	mov	lr, r9
     d1c:	4647      	mov	r7, r8
     d1e:	b580      	push	{r7, lr}
     d20:	0004      	movs	r4, r0
     d22:	000e      	movs	r6, r1
     d24:	4690      	mov	r8, r2
     d26:	001d      	movs	r5, r3
     d28:	ab08      	add	r3, sp, #32
     d2a:	781f      	ldrb	r7, [r3, #0]
     d2c:	ab09      	add	r3, sp, #36	; 0x24
     d2e:	781b      	ldrb	r3, [r3, #0]
     d30:	4699      	mov	r9, r3
		
    sercomReset(id);
     d32:	4b13      	ldr	r3, [pc, #76]	; (d80 <sercomSpiMasterInit+0x68>)
     d34:	4798      	blx	r3
     d36:	02a0      	lsls	r0, r4, #10
     d38:	4b12      	ldr	r3, [pc, #72]	; (d84 <sercomSpiMasterInit+0x6c>)
     d3a:	469c      	mov	ip, r3
     d3c:	4460      	add	r0, ip
	
    sercom(id)->SPI.CTRLB.reg
        = SERCOM_SPI_CTRLB_RXEN;
     d3e:	2380      	movs	r3, #128	; 0x80
     d40:	029b      	lsls	r3, r3, #10
     d42:	6043      	str	r3, [r0, #4]

    sercom(id)->SPI.BAUD.reg = baud;
     d44:	464b      	mov	r3, r9
     d46:	7303      	strb	r3, [r0, #12]

    sercom(id)->SPI.CTRLA.reg
        = SERCOM_SPI_CTRLA_ENABLE
          | SERCOM_SPI_CTRLA_MODE_SPI_MASTER
          | SERCOM_SPI_CTRLA_DIPO(dipo)
     d48:	0536      	lsls	r6, r6, #20
     d4a:	23c0      	movs	r3, #192	; 0xc0
     d4c:	039b      	lsls	r3, r3, #14
     d4e:	401e      	ands	r6, r3
          | SERCOM_SPI_CTRLA_DOPO(dopo)
     d50:	4643      	mov	r3, r8
     d52:	041b      	lsls	r3, r3, #16
     d54:	22c0      	movs	r2, #192	; 0xc0
     d56:	0292      	lsls	r2, r2, #10
     d58:	4013      	ands	r3, r2
     d5a:	220e      	movs	r2, #14
     d5c:	4313      	orrs	r3, r2
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
     d5e:	1e6a      	subs	r2, r5, #1
     d60:	4195      	sbcs	r5, r2
     d62:	076d      	lsls	r5, r5, #29
     d64:	431e      	orrs	r6, r3
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
     d66:	1e7b      	subs	r3, r7, #1
     d68:	419f      	sbcs	r7, r3
     d6a:	073f      	lsls	r7, r7, #28
     d6c:	4335      	orrs	r5, r6
     d6e:	433d      	orrs	r5, r7
        = SERCOM_SPI_CTRLA_ENABLE
     d70:	6005      	str	r5, [r0, #0]
        };
    }
}

static inline void SPI_sync(SercomId id) {
    while  (sercom(id)->SPI.SYNCBUSY.bit.CTRLB);
     d72:	69c3      	ldr	r3, [r0, #28]
     d74:	075b      	lsls	r3, r3, #29
     d76:	d4fc      	bmi.n	d72 <sercomSpiMasterInit+0x5a>

    SPI_sync(id);
}
     d78:	bc0c      	pop	{r2, r3}
     d7a:	4690      	mov	r8, r2
     d7c:	4699      	mov	r9, r3
     d7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     d80:	00000cfd 	.word	0x00000cfd
     d84:	42000800 	.word	0x42000800

00000d88 <spiDataTransfer>:
    return (Sercom*) (0x42000800U + id * 1024);
     d88:	0280      	lsls	r0, r0, #10
     d8a:	4b05      	ldr	r3, [pc, #20]	; (da0 <spiDataTransfer+0x18>)
     d8c:	469c      	mov	ip, r3
     d8e:	4460      	add	r0, ip
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
}

u8_t spiDataTransfer(SercomId id, u8_t data) {
    sercom(id)->SPI.DATA.reg = data;
     d90:	6281      	str	r1, [r0, #40]	; 0x28
    while(sercom(id)->SPI.INTFLAG.bit.RXC == 0);
     d92:	7e03      	ldrb	r3, [r0, #24]
     d94:	075b      	lsls	r3, r3, #29
     d96:	d5fc      	bpl.n	d92 <spiDataTransfer+0xa>
    return sercom(id)->SPI.DATA.reg;
     d98:	6a80      	ldr	r0, [r0, #40]	; 0x28
     d9a:	b2c0      	uxtb	r0, r0
}
     d9c:	4770      	bx	lr
     d9e:	46c0      	nop			; (mov r8, r8)
     da0:	42000800 	.word	0x42000800

00000da4 <__aeabi_lmul>:
     da4:	b5f0      	push	{r4, r5, r6, r7, lr}
     da6:	46ce      	mov	lr, r9
     da8:	4647      	mov	r7, r8
     daa:	0415      	lsls	r5, r2, #16
     dac:	0c2d      	lsrs	r5, r5, #16
     dae:	002e      	movs	r6, r5
     db0:	b580      	push	{r7, lr}
     db2:	0407      	lsls	r7, r0, #16
     db4:	0c14      	lsrs	r4, r2, #16
     db6:	0c3f      	lsrs	r7, r7, #16
     db8:	4699      	mov	r9, r3
     dba:	0c03      	lsrs	r3, r0, #16
     dbc:	437e      	muls	r6, r7
     dbe:	435d      	muls	r5, r3
     dc0:	4367      	muls	r7, r4
     dc2:	4363      	muls	r3, r4
     dc4:	197f      	adds	r7, r7, r5
     dc6:	0c34      	lsrs	r4, r6, #16
     dc8:	19e4      	adds	r4, r4, r7
     dca:	469c      	mov	ip, r3
     dcc:	42a5      	cmp	r5, r4
     dce:	d903      	bls.n	dd8 <__aeabi_lmul+0x34>
     dd0:	2380      	movs	r3, #128	; 0x80
     dd2:	025b      	lsls	r3, r3, #9
     dd4:	4698      	mov	r8, r3
     dd6:	44c4      	add	ip, r8
     dd8:	464b      	mov	r3, r9
     dda:	4351      	muls	r1, r2
     ddc:	4343      	muls	r3, r0
     dde:	0436      	lsls	r6, r6, #16
     de0:	0c36      	lsrs	r6, r6, #16
     de2:	0c25      	lsrs	r5, r4, #16
     de4:	0424      	lsls	r4, r4, #16
     de6:	4465      	add	r5, ip
     de8:	19a4      	adds	r4, r4, r6
     dea:	1859      	adds	r1, r3, r1
     dec:	1949      	adds	r1, r1, r5
     dee:	0020      	movs	r0, r4
     df0:	bc0c      	pop	{r2, r3}
     df2:	4690      	mov	r8, r2
     df4:	4699      	mov	r9, r3
     df6:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000df8 <__aeabi_fadd>:
     df8:	b5f0      	push	{r4, r5, r6, r7, lr}
     dfa:	46c6      	mov	lr, r8
     dfc:	024e      	lsls	r6, r1, #9
     dfe:	0247      	lsls	r7, r0, #9
     e00:	0a76      	lsrs	r6, r6, #9
     e02:	0a7b      	lsrs	r3, r7, #9
     e04:	0044      	lsls	r4, r0, #1
     e06:	0fc5      	lsrs	r5, r0, #31
     e08:	00f7      	lsls	r7, r6, #3
     e0a:	0048      	lsls	r0, r1, #1
     e0c:	4698      	mov	r8, r3
     e0e:	b500      	push	{lr}
     e10:	0e24      	lsrs	r4, r4, #24
     e12:	002a      	movs	r2, r5
     e14:	00db      	lsls	r3, r3, #3
     e16:	0e00      	lsrs	r0, r0, #24
     e18:	0fc9      	lsrs	r1, r1, #31
     e1a:	46bc      	mov	ip, r7
     e1c:	428d      	cmp	r5, r1
     e1e:	d067      	beq.n	ef0 <__aeabi_fadd+0xf8>
     e20:	1a22      	subs	r2, r4, r0
     e22:	2a00      	cmp	r2, #0
     e24:	dc00      	bgt.n	e28 <__aeabi_fadd+0x30>
     e26:	e0a5      	b.n	f74 <__aeabi_fadd+0x17c>
     e28:	2800      	cmp	r0, #0
     e2a:	d13a      	bne.n	ea2 <__aeabi_fadd+0xaa>
     e2c:	2f00      	cmp	r7, #0
     e2e:	d100      	bne.n	e32 <__aeabi_fadd+0x3a>
     e30:	e093      	b.n	f5a <__aeabi_fadd+0x162>
     e32:	1e51      	subs	r1, r2, #1
     e34:	2900      	cmp	r1, #0
     e36:	d000      	beq.n	e3a <__aeabi_fadd+0x42>
     e38:	e0bc      	b.n	fb4 <__aeabi_fadd+0x1bc>
     e3a:	2401      	movs	r4, #1
     e3c:	1bdb      	subs	r3, r3, r7
     e3e:	015a      	lsls	r2, r3, #5
     e40:	d546      	bpl.n	ed0 <__aeabi_fadd+0xd8>
     e42:	019b      	lsls	r3, r3, #6
     e44:	099e      	lsrs	r6, r3, #6
     e46:	0030      	movs	r0, r6
     e48:	f000 fee4 	bl	1c14 <__clzsi2>
     e4c:	3805      	subs	r0, #5
     e4e:	4086      	lsls	r6, r0
     e50:	4284      	cmp	r4, r0
     e52:	dd00      	ble.n	e56 <__aeabi_fadd+0x5e>
     e54:	e09d      	b.n	f92 <__aeabi_fadd+0x19a>
     e56:	1b04      	subs	r4, r0, r4
     e58:	0032      	movs	r2, r6
     e5a:	2020      	movs	r0, #32
     e5c:	3401      	adds	r4, #1
     e5e:	40e2      	lsrs	r2, r4
     e60:	1b04      	subs	r4, r0, r4
     e62:	40a6      	lsls	r6, r4
     e64:	0033      	movs	r3, r6
     e66:	1e5e      	subs	r6, r3, #1
     e68:	41b3      	sbcs	r3, r6
     e6a:	2400      	movs	r4, #0
     e6c:	4313      	orrs	r3, r2
     e6e:	075a      	lsls	r2, r3, #29
     e70:	d004      	beq.n	e7c <__aeabi_fadd+0x84>
     e72:	220f      	movs	r2, #15
     e74:	401a      	ands	r2, r3
     e76:	2a04      	cmp	r2, #4
     e78:	d000      	beq.n	e7c <__aeabi_fadd+0x84>
     e7a:	3304      	adds	r3, #4
     e7c:	015a      	lsls	r2, r3, #5
     e7e:	d529      	bpl.n	ed4 <__aeabi_fadd+0xdc>
     e80:	3401      	adds	r4, #1
     e82:	2cff      	cmp	r4, #255	; 0xff
     e84:	d100      	bne.n	e88 <__aeabi_fadd+0x90>
     e86:	e081      	b.n	f8c <__aeabi_fadd+0x194>
     e88:	002a      	movs	r2, r5
     e8a:	019b      	lsls	r3, r3, #6
     e8c:	0a5b      	lsrs	r3, r3, #9
     e8e:	b2e4      	uxtb	r4, r4
     e90:	025b      	lsls	r3, r3, #9
     e92:	05e4      	lsls	r4, r4, #23
     e94:	0a58      	lsrs	r0, r3, #9
     e96:	07d2      	lsls	r2, r2, #31
     e98:	4320      	orrs	r0, r4
     e9a:	4310      	orrs	r0, r2
     e9c:	bc04      	pop	{r2}
     e9e:	4690      	mov	r8, r2
     ea0:	bdf0      	pop	{r4, r5, r6, r7, pc}
     ea2:	2cff      	cmp	r4, #255	; 0xff
     ea4:	d0e3      	beq.n	e6e <__aeabi_fadd+0x76>
     ea6:	2180      	movs	r1, #128	; 0x80
     ea8:	0038      	movs	r0, r7
     eaa:	04c9      	lsls	r1, r1, #19
     eac:	4308      	orrs	r0, r1
     eae:	4684      	mov	ip, r0
     eb0:	2a1b      	cmp	r2, #27
     eb2:	dd00      	ble.n	eb6 <__aeabi_fadd+0xbe>
     eb4:	e082      	b.n	fbc <__aeabi_fadd+0x1c4>
     eb6:	2020      	movs	r0, #32
     eb8:	4661      	mov	r1, ip
     eba:	40d1      	lsrs	r1, r2
     ebc:	1a82      	subs	r2, r0, r2
     ebe:	4660      	mov	r0, ip
     ec0:	4090      	lsls	r0, r2
     ec2:	0002      	movs	r2, r0
     ec4:	1e50      	subs	r0, r2, #1
     ec6:	4182      	sbcs	r2, r0
     ec8:	430a      	orrs	r2, r1
     eca:	1a9b      	subs	r3, r3, r2
     ecc:	015a      	lsls	r2, r3, #5
     ece:	d4b8      	bmi.n	e42 <__aeabi_fadd+0x4a>
     ed0:	075a      	lsls	r2, r3, #29
     ed2:	d1ce      	bne.n	e72 <__aeabi_fadd+0x7a>
     ed4:	08de      	lsrs	r6, r3, #3
     ed6:	002a      	movs	r2, r5
     ed8:	2cff      	cmp	r4, #255	; 0xff
     eda:	d13a      	bne.n	f52 <__aeabi_fadd+0x15a>
     edc:	2e00      	cmp	r6, #0
     ede:	d100      	bne.n	ee2 <__aeabi_fadd+0xea>
     ee0:	e0ae      	b.n	1040 <__aeabi_fadd+0x248>
     ee2:	2380      	movs	r3, #128	; 0x80
     ee4:	03db      	lsls	r3, r3, #15
     ee6:	4333      	orrs	r3, r6
     ee8:	025b      	lsls	r3, r3, #9
     eea:	0a5b      	lsrs	r3, r3, #9
     eec:	24ff      	movs	r4, #255	; 0xff
     eee:	e7cf      	b.n	e90 <__aeabi_fadd+0x98>
     ef0:	1a21      	subs	r1, r4, r0
     ef2:	2900      	cmp	r1, #0
     ef4:	dd52      	ble.n	f9c <__aeabi_fadd+0x1a4>
     ef6:	2800      	cmp	r0, #0
     ef8:	d031      	beq.n	f5e <__aeabi_fadd+0x166>
     efa:	2cff      	cmp	r4, #255	; 0xff
     efc:	d0b7      	beq.n	e6e <__aeabi_fadd+0x76>
     efe:	2080      	movs	r0, #128	; 0x80
     f00:	003e      	movs	r6, r7
     f02:	04c0      	lsls	r0, r0, #19
     f04:	4306      	orrs	r6, r0
     f06:	46b4      	mov	ip, r6
     f08:	291b      	cmp	r1, #27
     f0a:	dd00      	ble.n	f0e <__aeabi_fadd+0x116>
     f0c:	e0aa      	b.n	1064 <__aeabi_fadd+0x26c>
     f0e:	2620      	movs	r6, #32
     f10:	4660      	mov	r0, ip
     f12:	40c8      	lsrs	r0, r1
     f14:	1a71      	subs	r1, r6, r1
     f16:	4666      	mov	r6, ip
     f18:	408e      	lsls	r6, r1
     f1a:	0031      	movs	r1, r6
     f1c:	1e4e      	subs	r6, r1, #1
     f1e:	41b1      	sbcs	r1, r6
     f20:	4301      	orrs	r1, r0
     f22:	185b      	adds	r3, r3, r1
     f24:	0159      	lsls	r1, r3, #5
     f26:	d5d3      	bpl.n	ed0 <__aeabi_fadd+0xd8>
     f28:	3401      	adds	r4, #1
     f2a:	2cff      	cmp	r4, #255	; 0xff
     f2c:	d100      	bne.n	f30 <__aeabi_fadd+0x138>
     f2e:	e087      	b.n	1040 <__aeabi_fadd+0x248>
     f30:	2201      	movs	r2, #1
     f32:	4978      	ldr	r1, [pc, #480]	; (1114 <__aeabi_fadd+0x31c>)
     f34:	401a      	ands	r2, r3
     f36:	085b      	lsrs	r3, r3, #1
     f38:	400b      	ands	r3, r1
     f3a:	4313      	orrs	r3, r2
     f3c:	e797      	b.n	e6e <__aeabi_fadd+0x76>
     f3e:	2c00      	cmp	r4, #0
     f40:	d000      	beq.n	f44 <__aeabi_fadd+0x14c>
     f42:	e0a7      	b.n	1094 <__aeabi_fadd+0x29c>
     f44:	2b00      	cmp	r3, #0
     f46:	d000      	beq.n	f4a <__aeabi_fadd+0x152>
     f48:	e0b6      	b.n	10b8 <__aeabi_fadd+0x2c0>
     f4a:	1e3b      	subs	r3, r7, #0
     f4c:	d162      	bne.n	1014 <__aeabi_fadd+0x21c>
     f4e:	2600      	movs	r6, #0
     f50:	2200      	movs	r2, #0
     f52:	0273      	lsls	r3, r6, #9
     f54:	0a5b      	lsrs	r3, r3, #9
     f56:	b2e4      	uxtb	r4, r4
     f58:	e79a      	b.n	e90 <__aeabi_fadd+0x98>
     f5a:	0014      	movs	r4, r2
     f5c:	e787      	b.n	e6e <__aeabi_fadd+0x76>
     f5e:	2f00      	cmp	r7, #0
     f60:	d04d      	beq.n	ffe <__aeabi_fadd+0x206>
     f62:	1e48      	subs	r0, r1, #1
     f64:	2800      	cmp	r0, #0
     f66:	d157      	bne.n	1018 <__aeabi_fadd+0x220>
     f68:	4463      	add	r3, ip
     f6a:	2401      	movs	r4, #1
     f6c:	015a      	lsls	r2, r3, #5
     f6e:	d5af      	bpl.n	ed0 <__aeabi_fadd+0xd8>
     f70:	2402      	movs	r4, #2
     f72:	e7dd      	b.n	f30 <__aeabi_fadd+0x138>
     f74:	2a00      	cmp	r2, #0
     f76:	d124      	bne.n	fc2 <__aeabi_fadd+0x1ca>
     f78:	1c62      	adds	r2, r4, #1
     f7a:	b2d2      	uxtb	r2, r2
     f7c:	2a01      	cmp	r2, #1
     f7e:	ddde      	ble.n	f3e <__aeabi_fadd+0x146>
     f80:	1bde      	subs	r6, r3, r7
     f82:	0172      	lsls	r2, r6, #5
     f84:	d535      	bpl.n	ff2 <__aeabi_fadd+0x1fa>
     f86:	1afe      	subs	r6, r7, r3
     f88:	000d      	movs	r5, r1
     f8a:	e75c      	b.n	e46 <__aeabi_fadd+0x4e>
     f8c:	002a      	movs	r2, r5
     f8e:	2300      	movs	r3, #0
     f90:	e77e      	b.n	e90 <__aeabi_fadd+0x98>
     f92:	0033      	movs	r3, r6
     f94:	4a60      	ldr	r2, [pc, #384]	; (1118 <__aeabi_fadd+0x320>)
     f96:	1a24      	subs	r4, r4, r0
     f98:	4013      	ands	r3, r2
     f9a:	e768      	b.n	e6e <__aeabi_fadd+0x76>
     f9c:	2900      	cmp	r1, #0
     f9e:	d163      	bne.n	1068 <__aeabi_fadd+0x270>
     fa0:	1c61      	adds	r1, r4, #1
     fa2:	b2c8      	uxtb	r0, r1
     fa4:	2801      	cmp	r0, #1
     fa6:	dd4e      	ble.n	1046 <__aeabi_fadd+0x24e>
     fa8:	29ff      	cmp	r1, #255	; 0xff
     faa:	d049      	beq.n	1040 <__aeabi_fadd+0x248>
     fac:	4463      	add	r3, ip
     fae:	085b      	lsrs	r3, r3, #1
     fb0:	000c      	movs	r4, r1
     fb2:	e75c      	b.n	e6e <__aeabi_fadd+0x76>
     fb4:	2aff      	cmp	r2, #255	; 0xff
     fb6:	d041      	beq.n	103c <__aeabi_fadd+0x244>
     fb8:	000a      	movs	r2, r1
     fba:	e779      	b.n	eb0 <__aeabi_fadd+0xb8>
     fbc:	2201      	movs	r2, #1
     fbe:	1a9b      	subs	r3, r3, r2
     fc0:	e784      	b.n	ecc <__aeabi_fadd+0xd4>
     fc2:	2c00      	cmp	r4, #0
     fc4:	d01d      	beq.n	1002 <__aeabi_fadd+0x20a>
     fc6:	28ff      	cmp	r0, #255	; 0xff
     fc8:	d022      	beq.n	1010 <__aeabi_fadd+0x218>
     fca:	2480      	movs	r4, #128	; 0x80
     fcc:	04e4      	lsls	r4, r4, #19
     fce:	4252      	negs	r2, r2
     fd0:	4323      	orrs	r3, r4
     fd2:	2a1b      	cmp	r2, #27
     fd4:	dd00      	ble.n	fd8 <__aeabi_fadd+0x1e0>
     fd6:	e08a      	b.n	10ee <__aeabi_fadd+0x2f6>
     fd8:	001c      	movs	r4, r3
     fda:	2520      	movs	r5, #32
     fdc:	40d4      	lsrs	r4, r2
     fde:	1aaa      	subs	r2, r5, r2
     fe0:	4093      	lsls	r3, r2
     fe2:	1e5a      	subs	r2, r3, #1
     fe4:	4193      	sbcs	r3, r2
     fe6:	4323      	orrs	r3, r4
     fe8:	4662      	mov	r2, ip
     fea:	0004      	movs	r4, r0
     fec:	1ad3      	subs	r3, r2, r3
     fee:	000d      	movs	r5, r1
     ff0:	e725      	b.n	e3e <__aeabi_fadd+0x46>
     ff2:	2e00      	cmp	r6, #0
     ff4:	d000      	beq.n	ff8 <__aeabi_fadd+0x200>
     ff6:	e726      	b.n	e46 <__aeabi_fadd+0x4e>
     ff8:	2200      	movs	r2, #0
     ffa:	2400      	movs	r4, #0
     ffc:	e7a9      	b.n	f52 <__aeabi_fadd+0x15a>
     ffe:	000c      	movs	r4, r1
    1000:	e735      	b.n	e6e <__aeabi_fadd+0x76>
    1002:	2b00      	cmp	r3, #0
    1004:	d04d      	beq.n	10a2 <__aeabi_fadd+0x2aa>
    1006:	43d2      	mvns	r2, r2
    1008:	2a00      	cmp	r2, #0
    100a:	d0ed      	beq.n	fe8 <__aeabi_fadd+0x1f0>
    100c:	28ff      	cmp	r0, #255	; 0xff
    100e:	d1e0      	bne.n	fd2 <__aeabi_fadd+0x1da>
    1010:	4663      	mov	r3, ip
    1012:	24ff      	movs	r4, #255	; 0xff
    1014:	000d      	movs	r5, r1
    1016:	e72a      	b.n	e6e <__aeabi_fadd+0x76>
    1018:	29ff      	cmp	r1, #255	; 0xff
    101a:	d00f      	beq.n	103c <__aeabi_fadd+0x244>
    101c:	0001      	movs	r1, r0
    101e:	e773      	b.n	f08 <__aeabi_fadd+0x110>
    1020:	2b00      	cmp	r3, #0
    1022:	d061      	beq.n	10e8 <__aeabi_fadd+0x2f0>
    1024:	24ff      	movs	r4, #255	; 0xff
    1026:	2f00      	cmp	r7, #0
    1028:	d100      	bne.n	102c <__aeabi_fadd+0x234>
    102a:	e720      	b.n	e6e <__aeabi_fadd+0x76>
    102c:	2280      	movs	r2, #128	; 0x80
    102e:	4641      	mov	r1, r8
    1030:	03d2      	lsls	r2, r2, #15
    1032:	4211      	tst	r1, r2
    1034:	d002      	beq.n	103c <__aeabi_fadd+0x244>
    1036:	4216      	tst	r6, r2
    1038:	d100      	bne.n	103c <__aeabi_fadd+0x244>
    103a:	003b      	movs	r3, r7
    103c:	24ff      	movs	r4, #255	; 0xff
    103e:	e716      	b.n	e6e <__aeabi_fadd+0x76>
    1040:	24ff      	movs	r4, #255	; 0xff
    1042:	2300      	movs	r3, #0
    1044:	e724      	b.n	e90 <__aeabi_fadd+0x98>
    1046:	2c00      	cmp	r4, #0
    1048:	d1ea      	bne.n	1020 <__aeabi_fadd+0x228>
    104a:	2b00      	cmp	r3, #0
    104c:	d058      	beq.n	1100 <__aeabi_fadd+0x308>
    104e:	2f00      	cmp	r7, #0
    1050:	d100      	bne.n	1054 <__aeabi_fadd+0x25c>
    1052:	e70c      	b.n	e6e <__aeabi_fadd+0x76>
    1054:	4463      	add	r3, ip
    1056:	015a      	lsls	r2, r3, #5
    1058:	d400      	bmi.n	105c <__aeabi_fadd+0x264>
    105a:	e739      	b.n	ed0 <__aeabi_fadd+0xd8>
    105c:	4a2e      	ldr	r2, [pc, #184]	; (1118 <__aeabi_fadd+0x320>)
    105e:	000c      	movs	r4, r1
    1060:	4013      	ands	r3, r2
    1062:	e704      	b.n	e6e <__aeabi_fadd+0x76>
    1064:	2101      	movs	r1, #1
    1066:	e75c      	b.n	f22 <__aeabi_fadd+0x12a>
    1068:	2c00      	cmp	r4, #0
    106a:	d11e      	bne.n	10aa <__aeabi_fadd+0x2b2>
    106c:	2b00      	cmp	r3, #0
    106e:	d040      	beq.n	10f2 <__aeabi_fadd+0x2fa>
    1070:	43c9      	mvns	r1, r1
    1072:	2900      	cmp	r1, #0
    1074:	d00b      	beq.n	108e <__aeabi_fadd+0x296>
    1076:	28ff      	cmp	r0, #255	; 0xff
    1078:	d036      	beq.n	10e8 <__aeabi_fadd+0x2f0>
    107a:	291b      	cmp	r1, #27
    107c:	dc47      	bgt.n	110e <__aeabi_fadd+0x316>
    107e:	001c      	movs	r4, r3
    1080:	2620      	movs	r6, #32
    1082:	40cc      	lsrs	r4, r1
    1084:	1a71      	subs	r1, r6, r1
    1086:	408b      	lsls	r3, r1
    1088:	1e59      	subs	r1, r3, #1
    108a:	418b      	sbcs	r3, r1
    108c:	4323      	orrs	r3, r4
    108e:	4463      	add	r3, ip
    1090:	0004      	movs	r4, r0
    1092:	e747      	b.n	f24 <__aeabi_fadd+0x12c>
    1094:	2b00      	cmp	r3, #0
    1096:	d118      	bne.n	10ca <__aeabi_fadd+0x2d2>
    1098:	1e3b      	subs	r3, r7, #0
    109a:	d02d      	beq.n	10f8 <__aeabi_fadd+0x300>
    109c:	000d      	movs	r5, r1
    109e:	24ff      	movs	r4, #255	; 0xff
    10a0:	e6e5      	b.n	e6e <__aeabi_fadd+0x76>
    10a2:	003b      	movs	r3, r7
    10a4:	0004      	movs	r4, r0
    10a6:	000d      	movs	r5, r1
    10a8:	e6e1      	b.n	e6e <__aeabi_fadd+0x76>
    10aa:	28ff      	cmp	r0, #255	; 0xff
    10ac:	d01c      	beq.n	10e8 <__aeabi_fadd+0x2f0>
    10ae:	2480      	movs	r4, #128	; 0x80
    10b0:	04e4      	lsls	r4, r4, #19
    10b2:	4249      	negs	r1, r1
    10b4:	4323      	orrs	r3, r4
    10b6:	e7e0      	b.n	107a <__aeabi_fadd+0x282>
    10b8:	2f00      	cmp	r7, #0
    10ba:	d100      	bne.n	10be <__aeabi_fadd+0x2c6>
    10bc:	e6d7      	b.n	e6e <__aeabi_fadd+0x76>
    10be:	1bde      	subs	r6, r3, r7
    10c0:	0172      	lsls	r2, r6, #5
    10c2:	d51f      	bpl.n	1104 <__aeabi_fadd+0x30c>
    10c4:	1afb      	subs	r3, r7, r3
    10c6:	000d      	movs	r5, r1
    10c8:	e6d1      	b.n	e6e <__aeabi_fadd+0x76>
    10ca:	24ff      	movs	r4, #255	; 0xff
    10cc:	2f00      	cmp	r7, #0
    10ce:	d100      	bne.n	10d2 <__aeabi_fadd+0x2da>
    10d0:	e6cd      	b.n	e6e <__aeabi_fadd+0x76>
    10d2:	2280      	movs	r2, #128	; 0x80
    10d4:	4640      	mov	r0, r8
    10d6:	03d2      	lsls	r2, r2, #15
    10d8:	4210      	tst	r0, r2
    10da:	d0af      	beq.n	103c <__aeabi_fadd+0x244>
    10dc:	4216      	tst	r6, r2
    10de:	d1ad      	bne.n	103c <__aeabi_fadd+0x244>
    10e0:	003b      	movs	r3, r7
    10e2:	000d      	movs	r5, r1
    10e4:	24ff      	movs	r4, #255	; 0xff
    10e6:	e6c2      	b.n	e6e <__aeabi_fadd+0x76>
    10e8:	4663      	mov	r3, ip
    10ea:	24ff      	movs	r4, #255	; 0xff
    10ec:	e6bf      	b.n	e6e <__aeabi_fadd+0x76>
    10ee:	2301      	movs	r3, #1
    10f0:	e77a      	b.n	fe8 <__aeabi_fadd+0x1f0>
    10f2:	003b      	movs	r3, r7
    10f4:	0004      	movs	r4, r0
    10f6:	e6ba      	b.n	e6e <__aeabi_fadd+0x76>
    10f8:	2680      	movs	r6, #128	; 0x80
    10fa:	2200      	movs	r2, #0
    10fc:	03f6      	lsls	r6, r6, #15
    10fe:	e6f0      	b.n	ee2 <__aeabi_fadd+0xea>
    1100:	003b      	movs	r3, r7
    1102:	e6b4      	b.n	e6e <__aeabi_fadd+0x76>
    1104:	1e33      	subs	r3, r6, #0
    1106:	d000      	beq.n	110a <__aeabi_fadd+0x312>
    1108:	e6e2      	b.n	ed0 <__aeabi_fadd+0xd8>
    110a:	2200      	movs	r2, #0
    110c:	e721      	b.n	f52 <__aeabi_fadd+0x15a>
    110e:	2301      	movs	r3, #1
    1110:	e7bd      	b.n	108e <__aeabi_fadd+0x296>
    1112:	46c0      	nop			; (mov r8, r8)
    1114:	7dffffff 	.word	0x7dffffff
    1118:	fbffffff 	.word	0xfbffffff

0000111c <__aeabi_fdiv>:
    111c:	b5f0      	push	{r4, r5, r6, r7, lr}
    111e:	4657      	mov	r7, sl
    1120:	464e      	mov	r6, r9
    1122:	46de      	mov	lr, fp
    1124:	4645      	mov	r5, r8
    1126:	b5e0      	push	{r5, r6, r7, lr}
    1128:	0244      	lsls	r4, r0, #9
    112a:	0043      	lsls	r3, r0, #1
    112c:	0fc6      	lsrs	r6, r0, #31
    112e:	b083      	sub	sp, #12
    1130:	1c0f      	adds	r7, r1, #0
    1132:	0a64      	lsrs	r4, r4, #9
    1134:	0e1b      	lsrs	r3, r3, #24
    1136:	46b2      	mov	sl, r6
    1138:	d053      	beq.n	11e2 <__aeabi_fdiv+0xc6>
    113a:	2bff      	cmp	r3, #255	; 0xff
    113c:	d027      	beq.n	118e <__aeabi_fdiv+0x72>
    113e:	2280      	movs	r2, #128	; 0x80
    1140:	00e4      	lsls	r4, r4, #3
    1142:	04d2      	lsls	r2, r2, #19
    1144:	4314      	orrs	r4, r2
    1146:	227f      	movs	r2, #127	; 0x7f
    1148:	4252      	negs	r2, r2
    114a:	4690      	mov	r8, r2
    114c:	4498      	add	r8, r3
    114e:	2300      	movs	r3, #0
    1150:	4699      	mov	r9, r3
    1152:	469b      	mov	fp, r3
    1154:	027d      	lsls	r5, r7, #9
    1156:	0078      	lsls	r0, r7, #1
    1158:	0ffb      	lsrs	r3, r7, #31
    115a:	0a6d      	lsrs	r5, r5, #9
    115c:	0e00      	lsrs	r0, r0, #24
    115e:	9300      	str	r3, [sp, #0]
    1160:	d024      	beq.n	11ac <__aeabi_fdiv+0x90>
    1162:	28ff      	cmp	r0, #255	; 0xff
    1164:	d046      	beq.n	11f4 <__aeabi_fdiv+0xd8>
    1166:	2380      	movs	r3, #128	; 0x80
    1168:	2100      	movs	r1, #0
    116a:	00ed      	lsls	r5, r5, #3
    116c:	04db      	lsls	r3, r3, #19
    116e:	431d      	orrs	r5, r3
    1170:	387f      	subs	r0, #127	; 0x7f
    1172:	4647      	mov	r7, r8
    1174:	1a38      	subs	r0, r7, r0
    1176:	464f      	mov	r7, r9
    1178:	430f      	orrs	r7, r1
    117a:	00bf      	lsls	r7, r7, #2
    117c:	46b9      	mov	r9, r7
    117e:	0033      	movs	r3, r6
    1180:	9a00      	ldr	r2, [sp, #0]
    1182:	4f87      	ldr	r7, [pc, #540]	; (13a0 <__aeabi_fdiv+0x284>)
    1184:	4053      	eors	r3, r2
    1186:	464a      	mov	r2, r9
    1188:	58ba      	ldr	r2, [r7, r2]
    118a:	9301      	str	r3, [sp, #4]
    118c:	4697      	mov	pc, r2
    118e:	2c00      	cmp	r4, #0
    1190:	d14e      	bne.n	1230 <__aeabi_fdiv+0x114>
    1192:	2308      	movs	r3, #8
    1194:	4699      	mov	r9, r3
    1196:	33f7      	adds	r3, #247	; 0xf7
    1198:	4698      	mov	r8, r3
    119a:	3bfd      	subs	r3, #253	; 0xfd
    119c:	469b      	mov	fp, r3
    119e:	027d      	lsls	r5, r7, #9
    11a0:	0078      	lsls	r0, r7, #1
    11a2:	0ffb      	lsrs	r3, r7, #31
    11a4:	0a6d      	lsrs	r5, r5, #9
    11a6:	0e00      	lsrs	r0, r0, #24
    11a8:	9300      	str	r3, [sp, #0]
    11aa:	d1da      	bne.n	1162 <__aeabi_fdiv+0x46>
    11ac:	2d00      	cmp	r5, #0
    11ae:	d126      	bne.n	11fe <__aeabi_fdiv+0xe2>
    11b0:	2000      	movs	r0, #0
    11b2:	2101      	movs	r1, #1
    11b4:	0033      	movs	r3, r6
    11b6:	9a00      	ldr	r2, [sp, #0]
    11b8:	4f7a      	ldr	r7, [pc, #488]	; (13a4 <__aeabi_fdiv+0x288>)
    11ba:	4053      	eors	r3, r2
    11bc:	4642      	mov	r2, r8
    11be:	1a10      	subs	r0, r2, r0
    11c0:	464a      	mov	r2, r9
    11c2:	430a      	orrs	r2, r1
    11c4:	0092      	lsls	r2, r2, #2
    11c6:	58ba      	ldr	r2, [r7, r2]
    11c8:	001d      	movs	r5, r3
    11ca:	4697      	mov	pc, r2
    11cc:	9b00      	ldr	r3, [sp, #0]
    11ce:	002c      	movs	r4, r5
    11d0:	469a      	mov	sl, r3
    11d2:	468b      	mov	fp, r1
    11d4:	465b      	mov	r3, fp
    11d6:	2b02      	cmp	r3, #2
    11d8:	d131      	bne.n	123e <__aeabi_fdiv+0x122>
    11da:	4653      	mov	r3, sl
    11dc:	21ff      	movs	r1, #255	; 0xff
    11de:	2400      	movs	r4, #0
    11e0:	e038      	b.n	1254 <__aeabi_fdiv+0x138>
    11e2:	2c00      	cmp	r4, #0
    11e4:	d117      	bne.n	1216 <__aeabi_fdiv+0xfa>
    11e6:	2304      	movs	r3, #4
    11e8:	4699      	mov	r9, r3
    11ea:	2300      	movs	r3, #0
    11ec:	4698      	mov	r8, r3
    11ee:	3301      	adds	r3, #1
    11f0:	469b      	mov	fp, r3
    11f2:	e7af      	b.n	1154 <__aeabi_fdiv+0x38>
    11f4:	20ff      	movs	r0, #255	; 0xff
    11f6:	2d00      	cmp	r5, #0
    11f8:	d10b      	bne.n	1212 <__aeabi_fdiv+0xf6>
    11fa:	2102      	movs	r1, #2
    11fc:	e7da      	b.n	11b4 <__aeabi_fdiv+0x98>
    11fe:	0028      	movs	r0, r5
    1200:	f000 fd08 	bl	1c14 <__clzsi2>
    1204:	1f43      	subs	r3, r0, #5
    1206:	409d      	lsls	r5, r3
    1208:	2376      	movs	r3, #118	; 0x76
    120a:	425b      	negs	r3, r3
    120c:	1a18      	subs	r0, r3, r0
    120e:	2100      	movs	r1, #0
    1210:	e7af      	b.n	1172 <__aeabi_fdiv+0x56>
    1212:	2103      	movs	r1, #3
    1214:	e7ad      	b.n	1172 <__aeabi_fdiv+0x56>
    1216:	0020      	movs	r0, r4
    1218:	f000 fcfc 	bl	1c14 <__clzsi2>
    121c:	1f43      	subs	r3, r0, #5
    121e:	409c      	lsls	r4, r3
    1220:	2376      	movs	r3, #118	; 0x76
    1222:	425b      	negs	r3, r3
    1224:	1a1b      	subs	r3, r3, r0
    1226:	4698      	mov	r8, r3
    1228:	2300      	movs	r3, #0
    122a:	4699      	mov	r9, r3
    122c:	469b      	mov	fp, r3
    122e:	e791      	b.n	1154 <__aeabi_fdiv+0x38>
    1230:	230c      	movs	r3, #12
    1232:	4699      	mov	r9, r3
    1234:	33f3      	adds	r3, #243	; 0xf3
    1236:	4698      	mov	r8, r3
    1238:	3bfc      	subs	r3, #252	; 0xfc
    123a:	469b      	mov	fp, r3
    123c:	e78a      	b.n	1154 <__aeabi_fdiv+0x38>
    123e:	2b03      	cmp	r3, #3
    1240:	d100      	bne.n	1244 <__aeabi_fdiv+0x128>
    1242:	e0a5      	b.n	1390 <__aeabi_fdiv+0x274>
    1244:	4655      	mov	r5, sl
    1246:	2b01      	cmp	r3, #1
    1248:	d000      	beq.n	124c <__aeabi_fdiv+0x130>
    124a:	e081      	b.n	1350 <__aeabi_fdiv+0x234>
    124c:	2301      	movs	r3, #1
    124e:	2100      	movs	r1, #0
    1250:	2400      	movs	r4, #0
    1252:	402b      	ands	r3, r5
    1254:	0264      	lsls	r4, r4, #9
    1256:	05c9      	lsls	r1, r1, #23
    1258:	0a60      	lsrs	r0, r4, #9
    125a:	07db      	lsls	r3, r3, #31
    125c:	4308      	orrs	r0, r1
    125e:	4318      	orrs	r0, r3
    1260:	b003      	add	sp, #12
    1262:	bc3c      	pop	{r2, r3, r4, r5}
    1264:	4690      	mov	r8, r2
    1266:	4699      	mov	r9, r3
    1268:	46a2      	mov	sl, r4
    126a:	46ab      	mov	fp, r5
    126c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    126e:	2480      	movs	r4, #128	; 0x80
    1270:	2300      	movs	r3, #0
    1272:	03e4      	lsls	r4, r4, #15
    1274:	21ff      	movs	r1, #255	; 0xff
    1276:	e7ed      	b.n	1254 <__aeabi_fdiv+0x138>
    1278:	21ff      	movs	r1, #255	; 0xff
    127a:	2400      	movs	r4, #0
    127c:	e7ea      	b.n	1254 <__aeabi_fdiv+0x138>
    127e:	2301      	movs	r3, #1
    1280:	1a59      	subs	r1, r3, r1
    1282:	291b      	cmp	r1, #27
    1284:	dd66      	ble.n	1354 <__aeabi_fdiv+0x238>
    1286:	9a01      	ldr	r2, [sp, #4]
    1288:	4013      	ands	r3, r2
    128a:	2100      	movs	r1, #0
    128c:	2400      	movs	r4, #0
    128e:	e7e1      	b.n	1254 <__aeabi_fdiv+0x138>
    1290:	2380      	movs	r3, #128	; 0x80
    1292:	03db      	lsls	r3, r3, #15
    1294:	421c      	tst	r4, r3
    1296:	d038      	beq.n	130a <__aeabi_fdiv+0x1ee>
    1298:	421d      	tst	r5, r3
    129a:	d051      	beq.n	1340 <__aeabi_fdiv+0x224>
    129c:	431c      	orrs	r4, r3
    129e:	0264      	lsls	r4, r4, #9
    12a0:	0a64      	lsrs	r4, r4, #9
    12a2:	0033      	movs	r3, r6
    12a4:	21ff      	movs	r1, #255	; 0xff
    12a6:	e7d5      	b.n	1254 <__aeabi_fdiv+0x138>
    12a8:	0163      	lsls	r3, r4, #5
    12aa:	016c      	lsls	r4, r5, #5
    12ac:	42a3      	cmp	r3, r4
    12ae:	d23b      	bcs.n	1328 <__aeabi_fdiv+0x20c>
    12b0:	261b      	movs	r6, #27
    12b2:	2100      	movs	r1, #0
    12b4:	3801      	subs	r0, #1
    12b6:	2501      	movs	r5, #1
    12b8:	001f      	movs	r7, r3
    12ba:	0049      	lsls	r1, r1, #1
    12bc:	005b      	lsls	r3, r3, #1
    12be:	2f00      	cmp	r7, #0
    12c0:	db01      	blt.n	12c6 <__aeabi_fdiv+0x1aa>
    12c2:	429c      	cmp	r4, r3
    12c4:	d801      	bhi.n	12ca <__aeabi_fdiv+0x1ae>
    12c6:	1b1b      	subs	r3, r3, r4
    12c8:	4329      	orrs	r1, r5
    12ca:	3e01      	subs	r6, #1
    12cc:	2e00      	cmp	r6, #0
    12ce:	d1f3      	bne.n	12b8 <__aeabi_fdiv+0x19c>
    12d0:	001c      	movs	r4, r3
    12d2:	1e63      	subs	r3, r4, #1
    12d4:	419c      	sbcs	r4, r3
    12d6:	430c      	orrs	r4, r1
    12d8:	0001      	movs	r1, r0
    12da:	317f      	adds	r1, #127	; 0x7f
    12dc:	2900      	cmp	r1, #0
    12de:	ddce      	ble.n	127e <__aeabi_fdiv+0x162>
    12e0:	0763      	lsls	r3, r4, #29
    12e2:	d004      	beq.n	12ee <__aeabi_fdiv+0x1d2>
    12e4:	230f      	movs	r3, #15
    12e6:	4023      	ands	r3, r4
    12e8:	2b04      	cmp	r3, #4
    12ea:	d000      	beq.n	12ee <__aeabi_fdiv+0x1d2>
    12ec:	3404      	adds	r4, #4
    12ee:	0123      	lsls	r3, r4, #4
    12f0:	d503      	bpl.n	12fa <__aeabi_fdiv+0x1de>
    12f2:	0001      	movs	r1, r0
    12f4:	4b2c      	ldr	r3, [pc, #176]	; (13a8 <__aeabi_fdiv+0x28c>)
    12f6:	3180      	adds	r1, #128	; 0x80
    12f8:	401c      	ands	r4, r3
    12fa:	29fe      	cmp	r1, #254	; 0xfe
    12fc:	dd0d      	ble.n	131a <__aeabi_fdiv+0x1fe>
    12fe:	2301      	movs	r3, #1
    1300:	9a01      	ldr	r2, [sp, #4]
    1302:	21ff      	movs	r1, #255	; 0xff
    1304:	4013      	ands	r3, r2
    1306:	2400      	movs	r4, #0
    1308:	e7a4      	b.n	1254 <__aeabi_fdiv+0x138>
    130a:	2380      	movs	r3, #128	; 0x80
    130c:	03db      	lsls	r3, r3, #15
    130e:	431c      	orrs	r4, r3
    1310:	0264      	lsls	r4, r4, #9
    1312:	0a64      	lsrs	r4, r4, #9
    1314:	0033      	movs	r3, r6
    1316:	21ff      	movs	r1, #255	; 0xff
    1318:	e79c      	b.n	1254 <__aeabi_fdiv+0x138>
    131a:	2301      	movs	r3, #1
    131c:	9a01      	ldr	r2, [sp, #4]
    131e:	01a4      	lsls	r4, r4, #6
    1320:	0a64      	lsrs	r4, r4, #9
    1322:	b2c9      	uxtb	r1, r1
    1324:	4013      	ands	r3, r2
    1326:	e795      	b.n	1254 <__aeabi_fdiv+0x138>
    1328:	1b1b      	subs	r3, r3, r4
    132a:	261a      	movs	r6, #26
    132c:	2101      	movs	r1, #1
    132e:	e7c2      	b.n	12b6 <__aeabi_fdiv+0x19a>
    1330:	9b00      	ldr	r3, [sp, #0]
    1332:	468b      	mov	fp, r1
    1334:	469a      	mov	sl, r3
    1336:	2400      	movs	r4, #0
    1338:	e74c      	b.n	11d4 <__aeabi_fdiv+0xb8>
    133a:	0263      	lsls	r3, r4, #9
    133c:	d5e5      	bpl.n	130a <__aeabi_fdiv+0x1ee>
    133e:	2500      	movs	r5, #0
    1340:	2480      	movs	r4, #128	; 0x80
    1342:	03e4      	lsls	r4, r4, #15
    1344:	432c      	orrs	r4, r5
    1346:	0264      	lsls	r4, r4, #9
    1348:	0a64      	lsrs	r4, r4, #9
    134a:	9b00      	ldr	r3, [sp, #0]
    134c:	21ff      	movs	r1, #255	; 0xff
    134e:	e781      	b.n	1254 <__aeabi_fdiv+0x138>
    1350:	9501      	str	r5, [sp, #4]
    1352:	e7c1      	b.n	12d8 <__aeabi_fdiv+0x1bc>
    1354:	0023      	movs	r3, r4
    1356:	2020      	movs	r0, #32
    1358:	40cb      	lsrs	r3, r1
    135a:	1a41      	subs	r1, r0, r1
    135c:	408c      	lsls	r4, r1
    135e:	1e61      	subs	r1, r4, #1
    1360:	418c      	sbcs	r4, r1
    1362:	431c      	orrs	r4, r3
    1364:	0763      	lsls	r3, r4, #29
    1366:	d004      	beq.n	1372 <__aeabi_fdiv+0x256>
    1368:	230f      	movs	r3, #15
    136a:	4023      	ands	r3, r4
    136c:	2b04      	cmp	r3, #4
    136e:	d000      	beq.n	1372 <__aeabi_fdiv+0x256>
    1370:	3404      	adds	r4, #4
    1372:	0163      	lsls	r3, r4, #5
    1374:	d505      	bpl.n	1382 <__aeabi_fdiv+0x266>
    1376:	2301      	movs	r3, #1
    1378:	9a01      	ldr	r2, [sp, #4]
    137a:	2101      	movs	r1, #1
    137c:	4013      	ands	r3, r2
    137e:	2400      	movs	r4, #0
    1380:	e768      	b.n	1254 <__aeabi_fdiv+0x138>
    1382:	2301      	movs	r3, #1
    1384:	9a01      	ldr	r2, [sp, #4]
    1386:	01a4      	lsls	r4, r4, #6
    1388:	0a64      	lsrs	r4, r4, #9
    138a:	4013      	ands	r3, r2
    138c:	2100      	movs	r1, #0
    138e:	e761      	b.n	1254 <__aeabi_fdiv+0x138>
    1390:	2380      	movs	r3, #128	; 0x80
    1392:	03db      	lsls	r3, r3, #15
    1394:	431c      	orrs	r4, r3
    1396:	0264      	lsls	r4, r4, #9
    1398:	0a64      	lsrs	r4, r4, #9
    139a:	4653      	mov	r3, sl
    139c:	21ff      	movs	r1, #255	; 0xff
    139e:	e759      	b.n	1254 <__aeabi_fdiv+0x138>
    13a0:	00001fa8 	.word	0x00001fa8
    13a4:	00001fe8 	.word	0x00001fe8
    13a8:	f7ffffff 	.word	0xf7ffffff

000013ac <__aeabi_i2f>:
    13ac:	b570      	push	{r4, r5, r6, lr}
    13ae:	2800      	cmp	r0, #0
    13b0:	d030      	beq.n	1414 <__aeabi_i2f+0x68>
    13b2:	17c3      	asrs	r3, r0, #31
    13b4:	18c4      	adds	r4, r0, r3
    13b6:	405c      	eors	r4, r3
    13b8:	0fc5      	lsrs	r5, r0, #31
    13ba:	0020      	movs	r0, r4
    13bc:	f000 fc2a 	bl	1c14 <__clzsi2>
    13c0:	239e      	movs	r3, #158	; 0x9e
    13c2:	1a1b      	subs	r3, r3, r0
    13c4:	2b96      	cmp	r3, #150	; 0x96
    13c6:	dc0d      	bgt.n	13e4 <__aeabi_i2f+0x38>
    13c8:	2296      	movs	r2, #150	; 0x96
    13ca:	1ad2      	subs	r2, r2, r3
    13cc:	4094      	lsls	r4, r2
    13ce:	002a      	movs	r2, r5
    13d0:	0264      	lsls	r4, r4, #9
    13d2:	0a64      	lsrs	r4, r4, #9
    13d4:	b2db      	uxtb	r3, r3
    13d6:	0264      	lsls	r4, r4, #9
    13d8:	05db      	lsls	r3, r3, #23
    13da:	0a60      	lsrs	r0, r4, #9
    13dc:	07d2      	lsls	r2, r2, #31
    13de:	4318      	orrs	r0, r3
    13e0:	4310      	orrs	r0, r2
    13e2:	bd70      	pop	{r4, r5, r6, pc}
    13e4:	2b99      	cmp	r3, #153	; 0x99
    13e6:	dc19      	bgt.n	141c <__aeabi_i2f+0x70>
    13e8:	2299      	movs	r2, #153	; 0x99
    13ea:	1ad2      	subs	r2, r2, r3
    13ec:	2a00      	cmp	r2, #0
    13ee:	dd29      	ble.n	1444 <__aeabi_i2f+0x98>
    13f0:	4094      	lsls	r4, r2
    13f2:	0022      	movs	r2, r4
    13f4:	4c14      	ldr	r4, [pc, #80]	; (1448 <__aeabi_i2f+0x9c>)
    13f6:	4014      	ands	r4, r2
    13f8:	0751      	lsls	r1, r2, #29
    13fa:	d004      	beq.n	1406 <__aeabi_i2f+0x5a>
    13fc:	210f      	movs	r1, #15
    13fe:	400a      	ands	r2, r1
    1400:	2a04      	cmp	r2, #4
    1402:	d000      	beq.n	1406 <__aeabi_i2f+0x5a>
    1404:	3404      	adds	r4, #4
    1406:	0162      	lsls	r2, r4, #5
    1408:	d413      	bmi.n	1432 <__aeabi_i2f+0x86>
    140a:	01a4      	lsls	r4, r4, #6
    140c:	0a64      	lsrs	r4, r4, #9
    140e:	b2db      	uxtb	r3, r3
    1410:	002a      	movs	r2, r5
    1412:	e7e0      	b.n	13d6 <__aeabi_i2f+0x2a>
    1414:	2200      	movs	r2, #0
    1416:	2300      	movs	r3, #0
    1418:	2400      	movs	r4, #0
    141a:	e7dc      	b.n	13d6 <__aeabi_i2f+0x2a>
    141c:	2205      	movs	r2, #5
    141e:	0021      	movs	r1, r4
    1420:	1a12      	subs	r2, r2, r0
    1422:	40d1      	lsrs	r1, r2
    1424:	22b9      	movs	r2, #185	; 0xb9
    1426:	1ad2      	subs	r2, r2, r3
    1428:	4094      	lsls	r4, r2
    142a:	1e62      	subs	r2, r4, #1
    142c:	4194      	sbcs	r4, r2
    142e:	430c      	orrs	r4, r1
    1430:	e7da      	b.n	13e8 <__aeabi_i2f+0x3c>
    1432:	4b05      	ldr	r3, [pc, #20]	; (1448 <__aeabi_i2f+0x9c>)
    1434:	002a      	movs	r2, r5
    1436:	401c      	ands	r4, r3
    1438:	239f      	movs	r3, #159	; 0x9f
    143a:	01a4      	lsls	r4, r4, #6
    143c:	1a1b      	subs	r3, r3, r0
    143e:	0a64      	lsrs	r4, r4, #9
    1440:	b2db      	uxtb	r3, r3
    1442:	e7c8      	b.n	13d6 <__aeabi_i2f+0x2a>
    1444:	0022      	movs	r2, r4
    1446:	e7d5      	b.n	13f4 <__aeabi_i2f+0x48>
    1448:	fbffffff 	.word	0xfbffffff

0000144c <__aeabi_ui2f>:
    144c:	b510      	push	{r4, lr}
    144e:	1e04      	subs	r4, r0, #0
    1450:	d027      	beq.n	14a2 <__aeabi_ui2f+0x56>
    1452:	f000 fbdf 	bl	1c14 <__clzsi2>
    1456:	239e      	movs	r3, #158	; 0x9e
    1458:	1a1b      	subs	r3, r3, r0
    145a:	2b96      	cmp	r3, #150	; 0x96
    145c:	dc0a      	bgt.n	1474 <__aeabi_ui2f+0x28>
    145e:	2296      	movs	r2, #150	; 0x96
    1460:	1ad2      	subs	r2, r2, r3
    1462:	4094      	lsls	r4, r2
    1464:	0264      	lsls	r4, r4, #9
    1466:	0a64      	lsrs	r4, r4, #9
    1468:	b2db      	uxtb	r3, r3
    146a:	0264      	lsls	r4, r4, #9
    146c:	05db      	lsls	r3, r3, #23
    146e:	0a60      	lsrs	r0, r4, #9
    1470:	4318      	orrs	r0, r3
    1472:	bd10      	pop	{r4, pc}
    1474:	2b99      	cmp	r3, #153	; 0x99
    1476:	dc17      	bgt.n	14a8 <__aeabi_ui2f+0x5c>
    1478:	2299      	movs	r2, #153	; 0x99
    147a:	1ad2      	subs	r2, r2, r3
    147c:	2a00      	cmp	r2, #0
    147e:	dd27      	ble.n	14d0 <__aeabi_ui2f+0x84>
    1480:	4094      	lsls	r4, r2
    1482:	0022      	movs	r2, r4
    1484:	4c13      	ldr	r4, [pc, #76]	; (14d4 <__aeabi_ui2f+0x88>)
    1486:	4014      	ands	r4, r2
    1488:	0751      	lsls	r1, r2, #29
    148a:	d004      	beq.n	1496 <__aeabi_ui2f+0x4a>
    148c:	210f      	movs	r1, #15
    148e:	400a      	ands	r2, r1
    1490:	2a04      	cmp	r2, #4
    1492:	d000      	beq.n	1496 <__aeabi_ui2f+0x4a>
    1494:	3404      	adds	r4, #4
    1496:	0162      	lsls	r2, r4, #5
    1498:	d412      	bmi.n	14c0 <__aeabi_ui2f+0x74>
    149a:	01a4      	lsls	r4, r4, #6
    149c:	0a64      	lsrs	r4, r4, #9
    149e:	b2db      	uxtb	r3, r3
    14a0:	e7e3      	b.n	146a <__aeabi_ui2f+0x1e>
    14a2:	2300      	movs	r3, #0
    14a4:	2400      	movs	r4, #0
    14a6:	e7e0      	b.n	146a <__aeabi_ui2f+0x1e>
    14a8:	22b9      	movs	r2, #185	; 0xb9
    14aa:	0021      	movs	r1, r4
    14ac:	1ad2      	subs	r2, r2, r3
    14ae:	4091      	lsls	r1, r2
    14b0:	000a      	movs	r2, r1
    14b2:	1e51      	subs	r1, r2, #1
    14b4:	418a      	sbcs	r2, r1
    14b6:	2105      	movs	r1, #5
    14b8:	1a09      	subs	r1, r1, r0
    14ba:	40cc      	lsrs	r4, r1
    14bc:	4314      	orrs	r4, r2
    14be:	e7db      	b.n	1478 <__aeabi_ui2f+0x2c>
    14c0:	4b04      	ldr	r3, [pc, #16]	; (14d4 <__aeabi_ui2f+0x88>)
    14c2:	401c      	ands	r4, r3
    14c4:	239f      	movs	r3, #159	; 0x9f
    14c6:	01a4      	lsls	r4, r4, #6
    14c8:	1a1b      	subs	r3, r3, r0
    14ca:	0a64      	lsrs	r4, r4, #9
    14cc:	b2db      	uxtb	r3, r3
    14ce:	e7cc      	b.n	146a <__aeabi_ui2f+0x1e>
    14d0:	0022      	movs	r2, r4
    14d2:	e7d7      	b.n	1484 <__aeabi_ui2f+0x38>
    14d4:	fbffffff 	.word	0xfbffffff

000014d8 <__aeabi_dmul>:
    14d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    14da:	4657      	mov	r7, sl
    14dc:	4645      	mov	r5, r8
    14de:	46de      	mov	lr, fp
    14e0:	464e      	mov	r6, r9
    14e2:	b5e0      	push	{r5, r6, r7, lr}
    14e4:	030c      	lsls	r4, r1, #12
    14e6:	4698      	mov	r8, r3
    14e8:	004e      	lsls	r6, r1, #1
    14ea:	0b23      	lsrs	r3, r4, #12
    14ec:	b087      	sub	sp, #28
    14ee:	0007      	movs	r7, r0
    14f0:	4692      	mov	sl, r2
    14f2:	469b      	mov	fp, r3
    14f4:	0d76      	lsrs	r6, r6, #21
    14f6:	0fcd      	lsrs	r5, r1, #31
    14f8:	2e00      	cmp	r6, #0
    14fa:	d06b      	beq.n	15d4 <__aeabi_dmul+0xfc>
    14fc:	4b6d      	ldr	r3, [pc, #436]	; (16b4 <__aeabi_dmul+0x1dc>)
    14fe:	429e      	cmp	r6, r3
    1500:	d035      	beq.n	156e <__aeabi_dmul+0x96>
    1502:	2480      	movs	r4, #128	; 0x80
    1504:	465b      	mov	r3, fp
    1506:	0f42      	lsrs	r2, r0, #29
    1508:	0424      	lsls	r4, r4, #16
    150a:	00db      	lsls	r3, r3, #3
    150c:	4314      	orrs	r4, r2
    150e:	431c      	orrs	r4, r3
    1510:	00c3      	lsls	r3, r0, #3
    1512:	4699      	mov	r9, r3
    1514:	4b68      	ldr	r3, [pc, #416]	; (16b8 <__aeabi_dmul+0x1e0>)
    1516:	46a3      	mov	fp, r4
    1518:	469c      	mov	ip, r3
    151a:	2300      	movs	r3, #0
    151c:	2700      	movs	r7, #0
    151e:	4466      	add	r6, ip
    1520:	9302      	str	r3, [sp, #8]
    1522:	4643      	mov	r3, r8
    1524:	031c      	lsls	r4, r3, #12
    1526:	005a      	lsls	r2, r3, #1
    1528:	0fdb      	lsrs	r3, r3, #31
    152a:	4650      	mov	r0, sl
    152c:	0b24      	lsrs	r4, r4, #12
    152e:	0d52      	lsrs	r2, r2, #21
    1530:	4698      	mov	r8, r3
    1532:	d100      	bne.n	1536 <__aeabi_dmul+0x5e>
    1534:	e076      	b.n	1624 <__aeabi_dmul+0x14c>
    1536:	4b5f      	ldr	r3, [pc, #380]	; (16b4 <__aeabi_dmul+0x1dc>)
    1538:	429a      	cmp	r2, r3
    153a:	d06d      	beq.n	1618 <__aeabi_dmul+0x140>
    153c:	2380      	movs	r3, #128	; 0x80
    153e:	0f41      	lsrs	r1, r0, #29
    1540:	041b      	lsls	r3, r3, #16
    1542:	430b      	orrs	r3, r1
    1544:	495c      	ldr	r1, [pc, #368]	; (16b8 <__aeabi_dmul+0x1e0>)
    1546:	00e4      	lsls	r4, r4, #3
    1548:	468c      	mov	ip, r1
    154a:	431c      	orrs	r4, r3
    154c:	00c3      	lsls	r3, r0, #3
    154e:	2000      	movs	r0, #0
    1550:	4462      	add	r2, ip
    1552:	4641      	mov	r1, r8
    1554:	18b6      	adds	r6, r6, r2
    1556:	4069      	eors	r1, r5
    1558:	1c72      	adds	r2, r6, #1
    155a:	9101      	str	r1, [sp, #4]
    155c:	4694      	mov	ip, r2
    155e:	4307      	orrs	r7, r0
    1560:	2f0f      	cmp	r7, #15
    1562:	d900      	bls.n	1566 <__aeabi_dmul+0x8e>
    1564:	e0b0      	b.n	16c8 <__aeabi_dmul+0x1f0>
    1566:	4a55      	ldr	r2, [pc, #340]	; (16bc <__aeabi_dmul+0x1e4>)
    1568:	00bf      	lsls	r7, r7, #2
    156a:	59d2      	ldr	r2, [r2, r7]
    156c:	4697      	mov	pc, r2
    156e:	465b      	mov	r3, fp
    1570:	4303      	orrs	r3, r0
    1572:	4699      	mov	r9, r3
    1574:	d000      	beq.n	1578 <__aeabi_dmul+0xa0>
    1576:	e087      	b.n	1688 <__aeabi_dmul+0x1b0>
    1578:	2300      	movs	r3, #0
    157a:	469b      	mov	fp, r3
    157c:	3302      	adds	r3, #2
    157e:	2708      	movs	r7, #8
    1580:	9302      	str	r3, [sp, #8]
    1582:	e7ce      	b.n	1522 <__aeabi_dmul+0x4a>
    1584:	4642      	mov	r2, r8
    1586:	9201      	str	r2, [sp, #4]
    1588:	2802      	cmp	r0, #2
    158a:	d067      	beq.n	165c <__aeabi_dmul+0x184>
    158c:	2803      	cmp	r0, #3
    158e:	d100      	bne.n	1592 <__aeabi_dmul+0xba>
    1590:	e20e      	b.n	19b0 <__aeabi_dmul+0x4d8>
    1592:	2801      	cmp	r0, #1
    1594:	d000      	beq.n	1598 <__aeabi_dmul+0xc0>
    1596:	e162      	b.n	185e <__aeabi_dmul+0x386>
    1598:	2300      	movs	r3, #0
    159a:	2400      	movs	r4, #0
    159c:	2200      	movs	r2, #0
    159e:	4699      	mov	r9, r3
    15a0:	9901      	ldr	r1, [sp, #4]
    15a2:	4001      	ands	r1, r0
    15a4:	b2cd      	uxtb	r5, r1
    15a6:	2100      	movs	r1, #0
    15a8:	0312      	lsls	r2, r2, #12
    15aa:	0d0b      	lsrs	r3, r1, #20
    15ac:	0b12      	lsrs	r2, r2, #12
    15ae:	051b      	lsls	r3, r3, #20
    15b0:	4313      	orrs	r3, r2
    15b2:	4a43      	ldr	r2, [pc, #268]	; (16c0 <__aeabi_dmul+0x1e8>)
    15b4:	0524      	lsls	r4, r4, #20
    15b6:	4013      	ands	r3, r2
    15b8:	431c      	orrs	r4, r3
    15ba:	0064      	lsls	r4, r4, #1
    15bc:	07ed      	lsls	r5, r5, #31
    15be:	0864      	lsrs	r4, r4, #1
    15c0:	432c      	orrs	r4, r5
    15c2:	4648      	mov	r0, r9
    15c4:	0021      	movs	r1, r4
    15c6:	b007      	add	sp, #28
    15c8:	bc3c      	pop	{r2, r3, r4, r5}
    15ca:	4690      	mov	r8, r2
    15cc:	4699      	mov	r9, r3
    15ce:	46a2      	mov	sl, r4
    15d0:	46ab      	mov	fp, r5
    15d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    15d4:	4303      	orrs	r3, r0
    15d6:	4699      	mov	r9, r3
    15d8:	d04f      	beq.n	167a <__aeabi_dmul+0x1a2>
    15da:	465b      	mov	r3, fp
    15dc:	2b00      	cmp	r3, #0
    15de:	d100      	bne.n	15e2 <__aeabi_dmul+0x10a>
    15e0:	e189      	b.n	18f6 <__aeabi_dmul+0x41e>
    15e2:	4658      	mov	r0, fp
    15e4:	f000 fb16 	bl	1c14 <__clzsi2>
    15e8:	0003      	movs	r3, r0
    15ea:	3b0b      	subs	r3, #11
    15ec:	2b1c      	cmp	r3, #28
    15ee:	dd00      	ble.n	15f2 <__aeabi_dmul+0x11a>
    15f0:	e17a      	b.n	18e8 <__aeabi_dmul+0x410>
    15f2:	221d      	movs	r2, #29
    15f4:	1ad3      	subs	r3, r2, r3
    15f6:	003a      	movs	r2, r7
    15f8:	0001      	movs	r1, r0
    15fa:	465c      	mov	r4, fp
    15fc:	40da      	lsrs	r2, r3
    15fe:	3908      	subs	r1, #8
    1600:	408c      	lsls	r4, r1
    1602:	0013      	movs	r3, r2
    1604:	408f      	lsls	r7, r1
    1606:	4323      	orrs	r3, r4
    1608:	469b      	mov	fp, r3
    160a:	46b9      	mov	r9, r7
    160c:	2300      	movs	r3, #0
    160e:	4e2d      	ldr	r6, [pc, #180]	; (16c4 <__aeabi_dmul+0x1ec>)
    1610:	2700      	movs	r7, #0
    1612:	1a36      	subs	r6, r6, r0
    1614:	9302      	str	r3, [sp, #8]
    1616:	e784      	b.n	1522 <__aeabi_dmul+0x4a>
    1618:	4653      	mov	r3, sl
    161a:	4323      	orrs	r3, r4
    161c:	d12a      	bne.n	1674 <__aeabi_dmul+0x19c>
    161e:	2400      	movs	r4, #0
    1620:	2002      	movs	r0, #2
    1622:	e796      	b.n	1552 <__aeabi_dmul+0x7a>
    1624:	4653      	mov	r3, sl
    1626:	4323      	orrs	r3, r4
    1628:	d020      	beq.n	166c <__aeabi_dmul+0x194>
    162a:	2c00      	cmp	r4, #0
    162c:	d100      	bne.n	1630 <__aeabi_dmul+0x158>
    162e:	e157      	b.n	18e0 <__aeabi_dmul+0x408>
    1630:	0020      	movs	r0, r4
    1632:	f000 faef 	bl	1c14 <__clzsi2>
    1636:	0003      	movs	r3, r0
    1638:	3b0b      	subs	r3, #11
    163a:	2b1c      	cmp	r3, #28
    163c:	dd00      	ble.n	1640 <__aeabi_dmul+0x168>
    163e:	e149      	b.n	18d4 <__aeabi_dmul+0x3fc>
    1640:	211d      	movs	r1, #29
    1642:	1acb      	subs	r3, r1, r3
    1644:	4651      	mov	r1, sl
    1646:	0002      	movs	r2, r0
    1648:	40d9      	lsrs	r1, r3
    164a:	4653      	mov	r3, sl
    164c:	3a08      	subs	r2, #8
    164e:	4094      	lsls	r4, r2
    1650:	4093      	lsls	r3, r2
    1652:	430c      	orrs	r4, r1
    1654:	4a1b      	ldr	r2, [pc, #108]	; (16c4 <__aeabi_dmul+0x1ec>)
    1656:	1a12      	subs	r2, r2, r0
    1658:	2000      	movs	r0, #0
    165a:	e77a      	b.n	1552 <__aeabi_dmul+0x7a>
    165c:	2501      	movs	r5, #1
    165e:	9b01      	ldr	r3, [sp, #4]
    1660:	4c14      	ldr	r4, [pc, #80]	; (16b4 <__aeabi_dmul+0x1dc>)
    1662:	401d      	ands	r5, r3
    1664:	2300      	movs	r3, #0
    1666:	2200      	movs	r2, #0
    1668:	4699      	mov	r9, r3
    166a:	e79c      	b.n	15a6 <__aeabi_dmul+0xce>
    166c:	2400      	movs	r4, #0
    166e:	2200      	movs	r2, #0
    1670:	2001      	movs	r0, #1
    1672:	e76e      	b.n	1552 <__aeabi_dmul+0x7a>
    1674:	4653      	mov	r3, sl
    1676:	2003      	movs	r0, #3
    1678:	e76b      	b.n	1552 <__aeabi_dmul+0x7a>
    167a:	2300      	movs	r3, #0
    167c:	469b      	mov	fp, r3
    167e:	3301      	adds	r3, #1
    1680:	2704      	movs	r7, #4
    1682:	2600      	movs	r6, #0
    1684:	9302      	str	r3, [sp, #8]
    1686:	e74c      	b.n	1522 <__aeabi_dmul+0x4a>
    1688:	2303      	movs	r3, #3
    168a:	4681      	mov	r9, r0
    168c:	270c      	movs	r7, #12
    168e:	9302      	str	r3, [sp, #8]
    1690:	e747      	b.n	1522 <__aeabi_dmul+0x4a>
    1692:	2280      	movs	r2, #128	; 0x80
    1694:	2300      	movs	r3, #0
    1696:	2500      	movs	r5, #0
    1698:	0312      	lsls	r2, r2, #12
    169a:	4699      	mov	r9, r3
    169c:	4c05      	ldr	r4, [pc, #20]	; (16b4 <__aeabi_dmul+0x1dc>)
    169e:	e782      	b.n	15a6 <__aeabi_dmul+0xce>
    16a0:	465c      	mov	r4, fp
    16a2:	464b      	mov	r3, r9
    16a4:	9802      	ldr	r0, [sp, #8]
    16a6:	e76f      	b.n	1588 <__aeabi_dmul+0xb0>
    16a8:	465c      	mov	r4, fp
    16aa:	464b      	mov	r3, r9
    16ac:	9501      	str	r5, [sp, #4]
    16ae:	9802      	ldr	r0, [sp, #8]
    16b0:	e76a      	b.n	1588 <__aeabi_dmul+0xb0>
    16b2:	46c0      	nop			; (mov r8, r8)
    16b4:	000007ff 	.word	0x000007ff
    16b8:	fffffc01 	.word	0xfffffc01
    16bc:	00002028 	.word	0x00002028
    16c0:	800fffff 	.word	0x800fffff
    16c4:	fffffc0d 	.word	0xfffffc0d
    16c8:	464a      	mov	r2, r9
    16ca:	4649      	mov	r1, r9
    16cc:	0c17      	lsrs	r7, r2, #16
    16ce:	0c1a      	lsrs	r2, r3, #16
    16d0:	041b      	lsls	r3, r3, #16
    16d2:	0c1b      	lsrs	r3, r3, #16
    16d4:	0408      	lsls	r0, r1, #16
    16d6:	0019      	movs	r1, r3
    16d8:	0c00      	lsrs	r0, r0, #16
    16da:	4341      	muls	r1, r0
    16dc:	0015      	movs	r5, r2
    16de:	4688      	mov	r8, r1
    16e0:	0019      	movs	r1, r3
    16e2:	437d      	muls	r5, r7
    16e4:	4379      	muls	r1, r7
    16e6:	9503      	str	r5, [sp, #12]
    16e8:	4689      	mov	r9, r1
    16ea:	0029      	movs	r1, r5
    16ec:	0015      	movs	r5, r2
    16ee:	4345      	muls	r5, r0
    16f0:	444d      	add	r5, r9
    16f2:	9502      	str	r5, [sp, #8]
    16f4:	4645      	mov	r5, r8
    16f6:	0c2d      	lsrs	r5, r5, #16
    16f8:	46aa      	mov	sl, r5
    16fa:	9d02      	ldr	r5, [sp, #8]
    16fc:	4455      	add	r5, sl
    16fe:	45a9      	cmp	r9, r5
    1700:	d906      	bls.n	1710 <__aeabi_dmul+0x238>
    1702:	468a      	mov	sl, r1
    1704:	2180      	movs	r1, #128	; 0x80
    1706:	0249      	lsls	r1, r1, #9
    1708:	4689      	mov	r9, r1
    170a:	44ca      	add	sl, r9
    170c:	4651      	mov	r1, sl
    170e:	9103      	str	r1, [sp, #12]
    1710:	0c29      	lsrs	r1, r5, #16
    1712:	9104      	str	r1, [sp, #16]
    1714:	4641      	mov	r1, r8
    1716:	0409      	lsls	r1, r1, #16
    1718:	042d      	lsls	r5, r5, #16
    171a:	0c09      	lsrs	r1, r1, #16
    171c:	4688      	mov	r8, r1
    171e:	0029      	movs	r1, r5
    1720:	0c25      	lsrs	r5, r4, #16
    1722:	0424      	lsls	r4, r4, #16
    1724:	4441      	add	r1, r8
    1726:	0c24      	lsrs	r4, r4, #16
    1728:	9105      	str	r1, [sp, #20]
    172a:	0021      	movs	r1, r4
    172c:	4341      	muls	r1, r0
    172e:	4688      	mov	r8, r1
    1730:	0021      	movs	r1, r4
    1732:	4379      	muls	r1, r7
    1734:	468a      	mov	sl, r1
    1736:	4368      	muls	r0, r5
    1738:	4641      	mov	r1, r8
    173a:	4450      	add	r0, sl
    173c:	4681      	mov	r9, r0
    173e:	0c08      	lsrs	r0, r1, #16
    1740:	4448      	add	r0, r9
    1742:	436f      	muls	r7, r5
    1744:	4582      	cmp	sl, r0
    1746:	d903      	bls.n	1750 <__aeabi_dmul+0x278>
    1748:	2180      	movs	r1, #128	; 0x80
    174a:	0249      	lsls	r1, r1, #9
    174c:	4689      	mov	r9, r1
    174e:	444f      	add	r7, r9
    1750:	0c01      	lsrs	r1, r0, #16
    1752:	4689      	mov	r9, r1
    1754:	0039      	movs	r1, r7
    1756:	4449      	add	r1, r9
    1758:	9102      	str	r1, [sp, #8]
    175a:	4641      	mov	r1, r8
    175c:	040f      	lsls	r7, r1, #16
    175e:	9904      	ldr	r1, [sp, #16]
    1760:	0c3f      	lsrs	r7, r7, #16
    1762:	4688      	mov	r8, r1
    1764:	0400      	lsls	r0, r0, #16
    1766:	19c0      	adds	r0, r0, r7
    1768:	4480      	add	r8, r0
    176a:	4641      	mov	r1, r8
    176c:	9104      	str	r1, [sp, #16]
    176e:	4659      	mov	r1, fp
    1770:	0c0f      	lsrs	r7, r1, #16
    1772:	0409      	lsls	r1, r1, #16
    1774:	0c09      	lsrs	r1, r1, #16
    1776:	4688      	mov	r8, r1
    1778:	4359      	muls	r1, r3
    177a:	468a      	mov	sl, r1
    177c:	0039      	movs	r1, r7
    177e:	4351      	muls	r1, r2
    1780:	4689      	mov	r9, r1
    1782:	4641      	mov	r1, r8
    1784:	434a      	muls	r2, r1
    1786:	4651      	mov	r1, sl
    1788:	0c09      	lsrs	r1, r1, #16
    178a:	468b      	mov	fp, r1
    178c:	437b      	muls	r3, r7
    178e:	18d2      	adds	r2, r2, r3
    1790:	445a      	add	r2, fp
    1792:	4293      	cmp	r3, r2
    1794:	d903      	bls.n	179e <__aeabi_dmul+0x2c6>
    1796:	2380      	movs	r3, #128	; 0x80
    1798:	025b      	lsls	r3, r3, #9
    179a:	469b      	mov	fp, r3
    179c:	44d9      	add	r9, fp
    179e:	4651      	mov	r1, sl
    17a0:	0409      	lsls	r1, r1, #16
    17a2:	0c09      	lsrs	r1, r1, #16
    17a4:	468a      	mov	sl, r1
    17a6:	4641      	mov	r1, r8
    17a8:	4361      	muls	r1, r4
    17aa:	437c      	muls	r4, r7
    17ac:	0c13      	lsrs	r3, r2, #16
    17ae:	0412      	lsls	r2, r2, #16
    17b0:	444b      	add	r3, r9
    17b2:	4452      	add	r2, sl
    17b4:	46a1      	mov	r9, r4
    17b6:	468a      	mov	sl, r1
    17b8:	003c      	movs	r4, r7
    17ba:	4641      	mov	r1, r8
    17bc:	436c      	muls	r4, r5
    17be:	434d      	muls	r5, r1
    17c0:	4651      	mov	r1, sl
    17c2:	444d      	add	r5, r9
    17c4:	0c0f      	lsrs	r7, r1, #16
    17c6:	197d      	adds	r5, r7, r5
    17c8:	45a9      	cmp	r9, r5
    17ca:	d903      	bls.n	17d4 <__aeabi_dmul+0x2fc>
    17cc:	2180      	movs	r1, #128	; 0x80
    17ce:	0249      	lsls	r1, r1, #9
    17d0:	4688      	mov	r8, r1
    17d2:	4444      	add	r4, r8
    17d4:	9f04      	ldr	r7, [sp, #16]
    17d6:	9903      	ldr	r1, [sp, #12]
    17d8:	46b8      	mov	r8, r7
    17da:	4441      	add	r1, r8
    17dc:	468b      	mov	fp, r1
    17de:	4583      	cmp	fp, r0
    17e0:	4180      	sbcs	r0, r0
    17e2:	4241      	negs	r1, r0
    17e4:	4688      	mov	r8, r1
    17e6:	4651      	mov	r1, sl
    17e8:	0408      	lsls	r0, r1, #16
    17ea:	042f      	lsls	r7, r5, #16
    17ec:	0c00      	lsrs	r0, r0, #16
    17ee:	183f      	adds	r7, r7, r0
    17f0:	4658      	mov	r0, fp
    17f2:	9902      	ldr	r1, [sp, #8]
    17f4:	1810      	adds	r0, r2, r0
    17f6:	4689      	mov	r9, r1
    17f8:	4290      	cmp	r0, r2
    17fa:	4192      	sbcs	r2, r2
    17fc:	444f      	add	r7, r9
    17fe:	46ba      	mov	sl, r7
    1800:	4252      	negs	r2, r2
    1802:	4699      	mov	r9, r3
    1804:	4693      	mov	fp, r2
    1806:	44c2      	add	sl, r8
    1808:	44d1      	add	r9, sl
    180a:	44cb      	add	fp, r9
    180c:	428f      	cmp	r7, r1
    180e:	41bf      	sbcs	r7, r7
    1810:	45c2      	cmp	sl, r8
    1812:	4189      	sbcs	r1, r1
    1814:	4599      	cmp	r9, r3
    1816:	419b      	sbcs	r3, r3
    1818:	4593      	cmp	fp, r2
    181a:	4192      	sbcs	r2, r2
    181c:	427f      	negs	r7, r7
    181e:	4249      	negs	r1, r1
    1820:	0c2d      	lsrs	r5, r5, #16
    1822:	4252      	negs	r2, r2
    1824:	430f      	orrs	r7, r1
    1826:	425b      	negs	r3, r3
    1828:	4313      	orrs	r3, r2
    182a:	197f      	adds	r7, r7, r5
    182c:	18ff      	adds	r7, r7, r3
    182e:	465b      	mov	r3, fp
    1830:	193c      	adds	r4, r7, r4
    1832:	0ddb      	lsrs	r3, r3, #23
    1834:	9a05      	ldr	r2, [sp, #20]
    1836:	0264      	lsls	r4, r4, #9
    1838:	431c      	orrs	r4, r3
    183a:	0243      	lsls	r3, r0, #9
    183c:	4313      	orrs	r3, r2
    183e:	1e5d      	subs	r5, r3, #1
    1840:	41ab      	sbcs	r3, r5
    1842:	465a      	mov	r2, fp
    1844:	0dc0      	lsrs	r0, r0, #23
    1846:	4303      	orrs	r3, r0
    1848:	0252      	lsls	r2, r2, #9
    184a:	4313      	orrs	r3, r2
    184c:	01e2      	lsls	r2, r4, #7
    184e:	d556      	bpl.n	18fe <__aeabi_dmul+0x426>
    1850:	2001      	movs	r0, #1
    1852:	085a      	lsrs	r2, r3, #1
    1854:	4003      	ands	r3, r0
    1856:	4313      	orrs	r3, r2
    1858:	07e2      	lsls	r2, r4, #31
    185a:	4313      	orrs	r3, r2
    185c:	0864      	lsrs	r4, r4, #1
    185e:	485a      	ldr	r0, [pc, #360]	; (19c8 <__aeabi_dmul+0x4f0>)
    1860:	4460      	add	r0, ip
    1862:	2800      	cmp	r0, #0
    1864:	dd4d      	ble.n	1902 <__aeabi_dmul+0x42a>
    1866:	075a      	lsls	r2, r3, #29
    1868:	d009      	beq.n	187e <__aeabi_dmul+0x3a6>
    186a:	220f      	movs	r2, #15
    186c:	401a      	ands	r2, r3
    186e:	2a04      	cmp	r2, #4
    1870:	d005      	beq.n	187e <__aeabi_dmul+0x3a6>
    1872:	1d1a      	adds	r2, r3, #4
    1874:	429a      	cmp	r2, r3
    1876:	419b      	sbcs	r3, r3
    1878:	425b      	negs	r3, r3
    187a:	18e4      	adds	r4, r4, r3
    187c:	0013      	movs	r3, r2
    187e:	01e2      	lsls	r2, r4, #7
    1880:	d504      	bpl.n	188c <__aeabi_dmul+0x3b4>
    1882:	2080      	movs	r0, #128	; 0x80
    1884:	4a51      	ldr	r2, [pc, #324]	; (19cc <__aeabi_dmul+0x4f4>)
    1886:	00c0      	lsls	r0, r0, #3
    1888:	4014      	ands	r4, r2
    188a:	4460      	add	r0, ip
    188c:	4a50      	ldr	r2, [pc, #320]	; (19d0 <__aeabi_dmul+0x4f8>)
    188e:	4290      	cmp	r0, r2
    1890:	dd00      	ble.n	1894 <__aeabi_dmul+0x3bc>
    1892:	e6e3      	b.n	165c <__aeabi_dmul+0x184>
    1894:	2501      	movs	r5, #1
    1896:	08db      	lsrs	r3, r3, #3
    1898:	0762      	lsls	r2, r4, #29
    189a:	431a      	orrs	r2, r3
    189c:	0264      	lsls	r4, r4, #9
    189e:	9b01      	ldr	r3, [sp, #4]
    18a0:	4691      	mov	r9, r2
    18a2:	0b22      	lsrs	r2, r4, #12
    18a4:	0544      	lsls	r4, r0, #21
    18a6:	0d64      	lsrs	r4, r4, #21
    18a8:	401d      	ands	r5, r3
    18aa:	e67c      	b.n	15a6 <__aeabi_dmul+0xce>
    18ac:	2280      	movs	r2, #128	; 0x80
    18ae:	4659      	mov	r1, fp
    18b0:	0312      	lsls	r2, r2, #12
    18b2:	4211      	tst	r1, r2
    18b4:	d008      	beq.n	18c8 <__aeabi_dmul+0x3f0>
    18b6:	4214      	tst	r4, r2
    18b8:	d106      	bne.n	18c8 <__aeabi_dmul+0x3f0>
    18ba:	4322      	orrs	r2, r4
    18bc:	0312      	lsls	r2, r2, #12
    18be:	0b12      	lsrs	r2, r2, #12
    18c0:	4645      	mov	r5, r8
    18c2:	4699      	mov	r9, r3
    18c4:	4c43      	ldr	r4, [pc, #268]	; (19d4 <__aeabi_dmul+0x4fc>)
    18c6:	e66e      	b.n	15a6 <__aeabi_dmul+0xce>
    18c8:	465b      	mov	r3, fp
    18ca:	431a      	orrs	r2, r3
    18cc:	0312      	lsls	r2, r2, #12
    18ce:	0b12      	lsrs	r2, r2, #12
    18d0:	4c40      	ldr	r4, [pc, #256]	; (19d4 <__aeabi_dmul+0x4fc>)
    18d2:	e668      	b.n	15a6 <__aeabi_dmul+0xce>
    18d4:	0003      	movs	r3, r0
    18d6:	4654      	mov	r4, sl
    18d8:	3b28      	subs	r3, #40	; 0x28
    18da:	409c      	lsls	r4, r3
    18dc:	2300      	movs	r3, #0
    18de:	e6b9      	b.n	1654 <__aeabi_dmul+0x17c>
    18e0:	f000 f998 	bl	1c14 <__clzsi2>
    18e4:	3020      	adds	r0, #32
    18e6:	e6a6      	b.n	1636 <__aeabi_dmul+0x15e>
    18e8:	0003      	movs	r3, r0
    18ea:	3b28      	subs	r3, #40	; 0x28
    18ec:	409f      	lsls	r7, r3
    18ee:	2300      	movs	r3, #0
    18f0:	46bb      	mov	fp, r7
    18f2:	4699      	mov	r9, r3
    18f4:	e68a      	b.n	160c <__aeabi_dmul+0x134>
    18f6:	f000 f98d 	bl	1c14 <__clzsi2>
    18fa:	3020      	adds	r0, #32
    18fc:	e674      	b.n	15e8 <__aeabi_dmul+0x110>
    18fe:	46b4      	mov	ip, r6
    1900:	e7ad      	b.n	185e <__aeabi_dmul+0x386>
    1902:	2501      	movs	r5, #1
    1904:	1a2a      	subs	r2, r5, r0
    1906:	2a38      	cmp	r2, #56	; 0x38
    1908:	dd06      	ble.n	1918 <__aeabi_dmul+0x440>
    190a:	9b01      	ldr	r3, [sp, #4]
    190c:	2400      	movs	r4, #0
    190e:	401d      	ands	r5, r3
    1910:	2300      	movs	r3, #0
    1912:	2200      	movs	r2, #0
    1914:	4699      	mov	r9, r3
    1916:	e646      	b.n	15a6 <__aeabi_dmul+0xce>
    1918:	2a1f      	cmp	r2, #31
    191a:	dc21      	bgt.n	1960 <__aeabi_dmul+0x488>
    191c:	2520      	movs	r5, #32
    191e:	0020      	movs	r0, r4
    1920:	1aad      	subs	r5, r5, r2
    1922:	001e      	movs	r6, r3
    1924:	40ab      	lsls	r3, r5
    1926:	40a8      	lsls	r0, r5
    1928:	40d6      	lsrs	r6, r2
    192a:	1e5d      	subs	r5, r3, #1
    192c:	41ab      	sbcs	r3, r5
    192e:	4330      	orrs	r0, r6
    1930:	4318      	orrs	r0, r3
    1932:	40d4      	lsrs	r4, r2
    1934:	0743      	lsls	r3, r0, #29
    1936:	d009      	beq.n	194c <__aeabi_dmul+0x474>
    1938:	230f      	movs	r3, #15
    193a:	4003      	ands	r3, r0
    193c:	2b04      	cmp	r3, #4
    193e:	d005      	beq.n	194c <__aeabi_dmul+0x474>
    1940:	0003      	movs	r3, r0
    1942:	1d18      	adds	r0, r3, #4
    1944:	4298      	cmp	r0, r3
    1946:	419b      	sbcs	r3, r3
    1948:	425b      	negs	r3, r3
    194a:	18e4      	adds	r4, r4, r3
    194c:	0223      	lsls	r3, r4, #8
    194e:	d521      	bpl.n	1994 <__aeabi_dmul+0x4bc>
    1950:	2501      	movs	r5, #1
    1952:	9b01      	ldr	r3, [sp, #4]
    1954:	2401      	movs	r4, #1
    1956:	401d      	ands	r5, r3
    1958:	2300      	movs	r3, #0
    195a:	2200      	movs	r2, #0
    195c:	4699      	mov	r9, r3
    195e:	e622      	b.n	15a6 <__aeabi_dmul+0xce>
    1960:	251f      	movs	r5, #31
    1962:	0021      	movs	r1, r4
    1964:	426d      	negs	r5, r5
    1966:	1a28      	subs	r0, r5, r0
    1968:	40c1      	lsrs	r1, r0
    196a:	0008      	movs	r0, r1
    196c:	2a20      	cmp	r2, #32
    196e:	d01d      	beq.n	19ac <__aeabi_dmul+0x4d4>
    1970:	355f      	adds	r5, #95	; 0x5f
    1972:	1aaa      	subs	r2, r5, r2
    1974:	4094      	lsls	r4, r2
    1976:	4323      	orrs	r3, r4
    1978:	1e5c      	subs	r4, r3, #1
    197a:	41a3      	sbcs	r3, r4
    197c:	2507      	movs	r5, #7
    197e:	4303      	orrs	r3, r0
    1980:	401d      	ands	r5, r3
    1982:	2200      	movs	r2, #0
    1984:	2d00      	cmp	r5, #0
    1986:	d009      	beq.n	199c <__aeabi_dmul+0x4c4>
    1988:	220f      	movs	r2, #15
    198a:	2400      	movs	r4, #0
    198c:	401a      	ands	r2, r3
    198e:	0018      	movs	r0, r3
    1990:	2a04      	cmp	r2, #4
    1992:	d1d6      	bne.n	1942 <__aeabi_dmul+0x46a>
    1994:	0003      	movs	r3, r0
    1996:	0765      	lsls	r5, r4, #29
    1998:	0264      	lsls	r4, r4, #9
    199a:	0b22      	lsrs	r2, r4, #12
    199c:	08db      	lsrs	r3, r3, #3
    199e:	432b      	orrs	r3, r5
    19a0:	2501      	movs	r5, #1
    19a2:	4699      	mov	r9, r3
    19a4:	9b01      	ldr	r3, [sp, #4]
    19a6:	2400      	movs	r4, #0
    19a8:	401d      	ands	r5, r3
    19aa:	e5fc      	b.n	15a6 <__aeabi_dmul+0xce>
    19ac:	2400      	movs	r4, #0
    19ae:	e7e2      	b.n	1976 <__aeabi_dmul+0x49e>
    19b0:	2280      	movs	r2, #128	; 0x80
    19b2:	2501      	movs	r5, #1
    19b4:	0312      	lsls	r2, r2, #12
    19b6:	4322      	orrs	r2, r4
    19b8:	9901      	ldr	r1, [sp, #4]
    19ba:	0312      	lsls	r2, r2, #12
    19bc:	0b12      	lsrs	r2, r2, #12
    19be:	400d      	ands	r5, r1
    19c0:	4699      	mov	r9, r3
    19c2:	4c04      	ldr	r4, [pc, #16]	; (19d4 <__aeabi_dmul+0x4fc>)
    19c4:	e5ef      	b.n	15a6 <__aeabi_dmul+0xce>
    19c6:	46c0      	nop			; (mov r8, r8)
    19c8:	000003ff 	.word	0x000003ff
    19cc:	feffffff 	.word	0xfeffffff
    19d0:	000007fe 	.word	0x000007fe
    19d4:	000007ff 	.word	0x000007ff

000019d8 <__aeabi_i2d>:
    19d8:	b570      	push	{r4, r5, r6, lr}
    19da:	2800      	cmp	r0, #0
    19dc:	d030      	beq.n	1a40 <__aeabi_i2d+0x68>
    19de:	17c3      	asrs	r3, r0, #31
    19e0:	18c4      	adds	r4, r0, r3
    19e2:	405c      	eors	r4, r3
    19e4:	0fc5      	lsrs	r5, r0, #31
    19e6:	0020      	movs	r0, r4
    19e8:	f000 f914 	bl	1c14 <__clzsi2>
    19ec:	4b17      	ldr	r3, [pc, #92]	; (1a4c <__aeabi_i2d+0x74>)
    19ee:	4a18      	ldr	r2, [pc, #96]	; (1a50 <__aeabi_i2d+0x78>)
    19f0:	1a1b      	subs	r3, r3, r0
    19f2:	1ad2      	subs	r2, r2, r3
    19f4:	2a1f      	cmp	r2, #31
    19f6:	dd18      	ble.n	1a2a <__aeabi_i2d+0x52>
    19f8:	4a16      	ldr	r2, [pc, #88]	; (1a54 <__aeabi_i2d+0x7c>)
    19fa:	1ad2      	subs	r2, r2, r3
    19fc:	4094      	lsls	r4, r2
    19fe:	2200      	movs	r2, #0
    1a00:	0324      	lsls	r4, r4, #12
    1a02:	055b      	lsls	r3, r3, #21
    1a04:	0b24      	lsrs	r4, r4, #12
    1a06:	0d5b      	lsrs	r3, r3, #21
    1a08:	2100      	movs	r1, #0
    1a0a:	0010      	movs	r0, r2
    1a0c:	0324      	lsls	r4, r4, #12
    1a0e:	0d0a      	lsrs	r2, r1, #20
    1a10:	0b24      	lsrs	r4, r4, #12
    1a12:	0512      	lsls	r2, r2, #20
    1a14:	4322      	orrs	r2, r4
    1a16:	4c10      	ldr	r4, [pc, #64]	; (1a58 <__aeabi_i2d+0x80>)
    1a18:	051b      	lsls	r3, r3, #20
    1a1a:	4022      	ands	r2, r4
    1a1c:	4313      	orrs	r3, r2
    1a1e:	005b      	lsls	r3, r3, #1
    1a20:	07ed      	lsls	r5, r5, #31
    1a22:	085b      	lsrs	r3, r3, #1
    1a24:	432b      	orrs	r3, r5
    1a26:	0019      	movs	r1, r3
    1a28:	bd70      	pop	{r4, r5, r6, pc}
    1a2a:	0021      	movs	r1, r4
    1a2c:	4091      	lsls	r1, r2
    1a2e:	000a      	movs	r2, r1
    1a30:	210b      	movs	r1, #11
    1a32:	1a08      	subs	r0, r1, r0
    1a34:	40c4      	lsrs	r4, r0
    1a36:	055b      	lsls	r3, r3, #21
    1a38:	0324      	lsls	r4, r4, #12
    1a3a:	0b24      	lsrs	r4, r4, #12
    1a3c:	0d5b      	lsrs	r3, r3, #21
    1a3e:	e7e3      	b.n	1a08 <__aeabi_i2d+0x30>
    1a40:	2500      	movs	r5, #0
    1a42:	2300      	movs	r3, #0
    1a44:	2400      	movs	r4, #0
    1a46:	2200      	movs	r2, #0
    1a48:	e7de      	b.n	1a08 <__aeabi_i2d+0x30>
    1a4a:	46c0      	nop			; (mov r8, r8)
    1a4c:	0000041e 	.word	0x0000041e
    1a50:	00000433 	.word	0x00000433
    1a54:	00000413 	.word	0x00000413
    1a58:	800fffff 	.word	0x800fffff

00001a5c <__aeabi_f2d>:
    1a5c:	0041      	lsls	r1, r0, #1
    1a5e:	0e09      	lsrs	r1, r1, #24
    1a60:	1c4b      	adds	r3, r1, #1
    1a62:	b570      	push	{r4, r5, r6, lr}
    1a64:	b2db      	uxtb	r3, r3
    1a66:	0246      	lsls	r6, r0, #9
    1a68:	0a75      	lsrs	r5, r6, #9
    1a6a:	0fc4      	lsrs	r4, r0, #31
    1a6c:	2b01      	cmp	r3, #1
    1a6e:	dd14      	ble.n	1a9a <__aeabi_f2d+0x3e>
    1a70:	23e0      	movs	r3, #224	; 0xe0
    1a72:	009b      	lsls	r3, r3, #2
    1a74:	076d      	lsls	r5, r5, #29
    1a76:	0b36      	lsrs	r6, r6, #12
    1a78:	18cb      	adds	r3, r1, r3
    1a7a:	2100      	movs	r1, #0
    1a7c:	0d0a      	lsrs	r2, r1, #20
    1a7e:	0028      	movs	r0, r5
    1a80:	0512      	lsls	r2, r2, #20
    1a82:	4d1c      	ldr	r5, [pc, #112]	; (1af4 <__aeabi_f2d+0x98>)
    1a84:	4332      	orrs	r2, r6
    1a86:	055b      	lsls	r3, r3, #21
    1a88:	402a      	ands	r2, r5
    1a8a:	085b      	lsrs	r3, r3, #1
    1a8c:	4313      	orrs	r3, r2
    1a8e:	005b      	lsls	r3, r3, #1
    1a90:	07e4      	lsls	r4, r4, #31
    1a92:	085b      	lsrs	r3, r3, #1
    1a94:	4323      	orrs	r3, r4
    1a96:	0019      	movs	r1, r3
    1a98:	bd70      	pop	{r4, r5, r6, pc}
    1a9a:	2900      	cmp	r1, #0
    1a9c:	d114      	bne.n	1ac8 <__aeabi_f2d+0x6c>
    1a9e:	2d00      	cmp	r5, #0
    1aa0:	d01e      	beq.n	1ae0 <__aeabi_f2d+0x84>
    1aa2:	0028      	movs	r0, r5
    1aa4:	f000 f8b6 	bl	1c14 <__clzsi2>
    1aa8:	280a      	cmp	r0, #10
    1aaa:	dc1c      	bgt.n	1ae6 <__aeabi_f2d+0x8a>
    1aac:	230b      	movs	r3, #11
    1aae:	002a      	movs	r2, r5
    1ab0:	1a1b      	subs	r3, r3, r0
    1ab2:	40da      	lsrs	r2, r3
    1ab4:	0003      	movs	r3, r0
    1ab6:	3315      	adds	r3, #21
    1ab8:	409d      	lsls	r5, r3
    1aba:	4b0f      	ldr	r3, [pc, #60]	; (1af8 <__aeabi_f2d+0x9c>)
    1abc:	0312      	lsls	r2, r2, #12
    1abe:	1a1b      	subs	r3, r3, r0
    1ac0:	055b      	lsls	r3, r3, #21
    1ac2:	0b16      	lsrs	r6, r2, #12
    1ac4:	0d5b      	lsrs	r3, r3, #21
    1ac6:	e7d8      	b.n	1a7a <__aeabi_f2d+0x1e>
    1ac8:	2d00      	cmp	r5, #0
    1aca:	d006      	beq.n	1ada <__aeabi_f2d+0x7e>
    1acc:	0b32      	lsrs	r2, r6, #12
    1ace:	2680      	movs	r6, #128	; 0x80
    1ad0:	0336      	lsls	r6, r6, #12
    1ad2:	076d      	lsls	r5, r5, #29
    1ad4:	4316      	orrs	r6, r2
    1ad6:	4b09      	ldr	r3, [pc, #36]	; (1afc <__aeabi_f2d+0xa0>)
    1ad8:	e7cf      	b.n	1a7a <__aeabi_f2d+0x1e>
    1ada:	4b08      	ldr	r3, [pc, #32]	; (1afc <__aeabi_f2d+0xa0>)
    1adc:	2600      	movs	r6, #0
    1ade:	e7cc      	b.n	1a7a <__aeabi_f2d+0x1e>
    1ae0:	2300      	movs	r3, #0
    1ae2:	2600      	movs	r6, #0
    1ae4:	e7c9      	b.n	1a7a <__aeabi_f2d+0x1e>
    1ae6:	0003      	movs	r3, r0
    1ae8:	002a      	movs	r2, r5
    1aea:	3b0b      	subs	r3, #11
    1aec:	409a      	lsls	r2, r3
    1aee:	2500      	movs	r5, #0
    1af0:	e7e3      	b.n	1aba <__aeabi_f2d+0x5e>
    1af2:	46c0      	nop			; (mov r8, r8)
    1af4:	800fffff 	.word	0x800fffff
    1af8:	00000389 	.word	0x00000389
    1afc:	000007ff 	.word	0x000007ff

00001b00 <__aeabi_d2f>:
    1b00:	b5f0      	push	{r4, r5, r6, r7, lr}
    1b02:	004c      	lsls	r4, r1, #1
    1b04:	0d64      	lsrs	r4, r4, #21
    1b06:	030b      	lsls	r3, r1, #12
    1b08:	1c62      	adds	r2, r4, #1
    1b0a:	0f45      	lsrs	r5, r0, #29
    1b0c:	0a5b      	lsrs	r3, r3, #9
    1b0e:	0552      	lsls	r2, r2, #21
    1b10:	432b      	orrs	r3, r5
    1b12:	0fc9      	lsrs	r1, r1, #31
    1b14:	00c5      	lsls	r5, r0, #3
    1b16:	0d52      	lsrs	r2, r2, #21
    1b18:	2a01      	cmp	r2, #1
    1b1a:	dd28      	ble.n	1b6e <__aeabi_d2f+0x6e>
    1b1c:	4a3a      	ldr	r2, [pc, #232]	; (1c08 <__aeabi_d2f+0x108>)
    1b1e:	18a6      	adds	r6, r4, r2
    1b20:	2efe      	cmp	r6, #254	; 0xfe
    1b22:	dc1b      	bgt.n	1b5c <__aeabi_d2f+0x5c>
    1b24:	2e00      	cmp	r6, #0
    1b26:	dd3e      	ble.n	1ba6 <__aeabi_d2f+0xa6>
    1b28:	0180      	lsls	r0, r0, #6
    1b2a:	0002      	movs	r2, r0
    1b2c:	1e50      	subs	r0, r2, #1
    1b2e:	4182      	sbcs	r2, r0
    1b30:	0f6d      	lsrs	r5, r5, #29
    1b32:	432a      	orrs	r2, r5
    1b34:	00db      	lsls	r3, r3, #3
    1b36:	4313      	orrs	r3, r2
    1b38:	075a      	lsls	r2, r3, #29
    1b3a:	d004      	beq.n	1b46 <__aeabi_d2f+0x46>
    1b3c:	220f      	movs	r2, #15
    1b3e:	401a      	ands	r2, r3
    1b40:	2a04      	cmp	r2, #4
    1b42:	d000      	beq.n	1b46 <__aeabi_d2f+0x46>
    1b44:	3304      	adds	r3, #4
    1b46:	2280      	movs	r2, #128	; 0x80
    1b48:	04d2      	lsls	r2, r2, #19
    1b4a:	401a      	ands	r2, r3
    1b4c:	d05a      	beq.n	1c04 <__aeabi_d2f+0x104>
    1b4e:	3601      	adds	r6, #1
    1b50:	2eff      	cmp	r6, #255	; 0xff
    1b52:	d003      	beq.n	1b5c <__aeabi_d2f+0x5c>
    1b54:	019b      	lsls	r3, r3, #6
    1b56:	0a5b      	lsrs	r3, r3, #9
    1b58:	b2f4      	uxtb	r4, r6
    1b5a:	e001      	b.n	1b60 <__aeabi_d2f+0x60>
    1b5c:	24ff      	movs	r4, #255	; 0xff
    1b5e:	2300      	movs	r3, #0
    1b60:	0258      	lsls	r0, r3, #9
    1b62:	05e4      	lsls	r4, r4, #23
    1b64:	0a40      	lsrs	r0, r0, #9
    1b66:	07c9      	lsls	r1, r1, #31
    1b68:	4320      	orrs	r0, r4
    1b6a:	4308      	orrs	r0, r1
    1b6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1b6e:	2c00      	cmp	r4, #0
    1b70:	d007      	beq.n	1b82 <__aeabi_d2f+0x82>
    1b72:	431d      	orrs	r5, r3
    1b74:	d0f2      	beq.n	1b5c <__aeabi_d2f+0x5c>
    1b76:	2080      	movs	r0, #128	; 0x80
    1b78:	00db      	lsls	r3, r3, #3
    1b7a:	0480      	lsls	r0, r0, #18
    1b7c:	4303      	orrs	r3, r0
    1b7e:	26ff      	movs	r6, #255	; 0xff
    1b80:	e7da      	b.n	1b38 <__aeabi_d2f+0x38>
    1b82:	432b      	orrs	r3, r5
    1b84:	d003      	beq.n	1b8e <__aeabi_d2f+0x8e>
    1b86:	2305      	movs	r3, #5
    1b88:	08db      	lsrs	r3, r3, #3
    1b8a:	2cff      	cmp	r4, #255	; 0xff
    1b8c:	d003      	beq.n	1b96 <__aeabi_d2f+0x96>
    1b8e:	025b      	lsls	r3, r3, #9
    1b90:	0a5b      	lsrs	r3, r3, #9
    1b92:	b2e4      	uxtb	r4, r4
    1b94:	e7e4      	b.n	1b60 <__aeabi_d2f+0x60>
    1b96:	2b00      	cmp	r3, #0
    1b98:	d032      	beq.n	1c00 <__aeabi_d2f+0x100>
    1b9a:	2080      	movs	r0, #128	; 0x80
    1b9c:	03c0      	lsls	r0, r0, #15
    1b9e:	4303      	orrs	r3, r0
    1ba0:	025b      	lsls	r3, r3, #9
    1ba2:	0a5b      	lsrs	r3, r3, #9
    1ba4:	e7dc      	b.n	1b60 <__aeabi_d2f+0x60>
    1ba6:	0032      	movs	r2, r6
    1ba8:	3217      	adds	r2, #23
    1baa:	db14      	blt.n	1bd6 <__aeabi_d2f+0xd6>
    1bac:	2280      	movs	r2, #128	; 0x80
    1bae:	271e      	movs	r7, #30
    1bb0:	0412      	lsls	r2, r2, #16
    1bb2:	4313      	orrs	r3, r2
    1bb4:	1bbf      	subs	r7, r7, r6
    1bb6:	2f1f      	cmp	r7, #31
    1bb8:	dc0f      	bgt.n	1bda <__aeabi_d2f+0xda>
    1bba:	4a14      	ldr	r2, [pc, #80]	; (1c0c <__aeabi_d2f+0x10c>)
    1bbc:	4694      	mov	ip, r2
    1bbe:	4464      	add	r4, ip
    1bc0:	002a      	movs	r2, r5
    1bc2:	40a5      	lsls	r5, r4
    1bc4:	002e      	movs	r6, r5
    1bc6:	40a3      	lsls	r3, r4
    1bc8:	1e75      	subs	r5, r6, #1
    1bca:	41ae      	sbcs	r6, r5
    1bcc:	40fa      	lsrs	r2, r7
    1bce:	4333      	orrs	r3, r6
    1bd0:	4313      	orrs	r3, r2
    1bd2:	2600      	movs	r6, #0
    1bd4:	e7b0      	b.n	1b38 <__aeabi_d2f+0x38>
    1bd6:	2400      	movs	r4, #0
    1bd8:	e7d5      	b.n	1b86 <__aeabi_d2f+0x86>
    1bda:	2202      	movs	r2, #2
    1bdc:	4252      	negs	r2, r2
    1bde:	1b96      	subs	r6, r2, r6
    1be0:	001a      	movs	r2, r3
    1be2:	40f2      	lsrs	r2, r6
    1be4:	2f20      	cmp	r7, #32
    1be6:	d009      	beq.n	1bfc <__aeabi_d2f+0xfc>
    1be8:	4809      	ldr	r0, [pc, #36]	; (1c10 <__aeabi_d2f+0x110>)
    1bea:	4684      	mov	ip, r0
    1bec:	4464      	add	r4, ip
    1bee:	40a3      	lsls	r3, r4
    1bf0:	432b      	orrs	r3, r5
    1bf2:	1e5d      	subs	r5, r3, #1
    1bf4:	41ab      	sbcs	r3, r5
    1bf6:	2600      	movs	r6, #0
    1bf8:	4313      	orrs	r3, r2
    1bfa:	e79d      	b.n	1b38 <__aeabi_d2f+0x38>
    1bfc:	2300      	movs	r3, #0
    1bfe:	e7f7      	b.n	1bf0 <__aeabi_d2f+0xf0>
    1c00:	2300      	movs	r3, #0
    1c02:	e7ad      	b.n	1b60 <__aeabi_d2f+0x60>
    1c04:	0034      	movs	r4, r6
    1c06:	e7bf      	b.n	1b88 <__aeabi_d2f+0x88>
    1c08:	fffffc80 	.word	0xfffffc80
    1c0c:	fffffc82 	.word	0xfffffc82
    1c10:	fffffca2 	.word	0xfffffca2

00001c14 <__clzsi2>:
    1c14:	211c      	movs	r1, #28
    1c16:	2301      	movs	r3, #1
    1c18:	041b      	lsls	r3, r3, #16
    1c1a:	4298      	cmp	r0, r3
    1c1c:	d301      	bcc.n	1c22 <__clzsi2+0xe>
    1c1e:	0c00      	lsrs	r0, r0, #16
    1c20:	3910      	subs	r1, #16
    1c22:	0a1b      	lsrs	r3, r3, #8
    1c24:	4298      	cmp	r0, r3
    1c26:	d301      	bcc.n	1c2c <__clzsi2+0x18>
    1c28:	0a00      	lsrs	r0, r0, #8
    1c2a:	3908      	subs	r1, #8
    1c2c:	091b      	lsrs	r3, r3, #4
    1c2e:	4298      	cmp	r0, r3
    1c30:	d301      	bcc.n	1c36 <__clzsi2+0x22>
    1c32:	0900      	lsrs	r0, r0, #4
    1c34:	3904      	subs	r1, #4
    1c36:	a202      	add	r2, pc, #8	; (adr r2, 1c40 <__clzsi2+0x2c>)
    1c38:	5c10      	ldrb	r0, [r2, r0]
    1c3a:	1840      	adds	r0, r0, r1
    1c3c:	4770      	bx	lr
    1c3e:	46c0      	nop			; (mov r8, r8)
    1c40:	02020304 	.word	0x02020304
    1c44:	01010101 	.word	0x01010101
	...

00001c50 <__libc_init_array>:
    1c50:	b570      	push	{r4, r5, r6, lr}
    1c52:	4e0d      	ldr	r6, [pc, #52]	; (1c88 <__libc_init_array+0x38>)
    1c54:	4d0d      	ldr	r5, [pc, #52]	; (1c8c <__libc_init_array+0x3c>)
    1c56:	2400      	movs	r4, #0
    1c58:	1bad      	subs	r5, r5, r6
    1c5a:	10ad      	asrs	r5, r5, #2
    1c5c:	d005      	beq.n	1c6a <__libc_init_array+0x1a>
    1c5e:	00a3      	lsls	r3, r4, #2
    1c60:	58f3      	ldr	r3, [r6, r3]
    1c62:	3401      	adds	r4, #1
    1c64:	4798      	blx	r3
    1c66:	42a5      	cmp	r5, r4
    1c68:	d1f9      	bne.n	1c5e <__libc_init_array+0xe>
    1c6a:	f000 f9ff 	bl	206c <_init>
    1c6e:	4e08      	ldr	r6, [pc, #32]	; (1c90 <__libc_init_array+0x40>)
    1c70:	4d08      	ldr	r5, [pc, #32]	; (1c94 <__libc_init_array+0x44>)
    1c72:	2400      	movs	r4, #0
    1c74:	1bad      	subs	r5, r5, r6
    1c76:	10ad      	asrs	r5, r5, #2
    1c78:	d005      	beq.n	1c86 <__libc_init_array+0x36>
    1c7a:	00a3      	lsls	r3, r4, #2
    1c7c:	58f3      	ldr	r3, [r6, r3]
    1c7e:	3401      	adds	r4, #1
    1c80:	4798      	blx	r3
    1c82:	42a5      	cmp	r5, r4
    1c84:	d1f9      	bne.n	1c7a <__libc_init_array+0x2a>
    1c86:	bd70      	pop	{r4, r5, r6, pc}
    1c88:	00002078 	.word	0x00002078
    1c8c:	00002078 	.word	0x00002078
    1c90:	00002078 	.word	0x00002078
    1c94:	00002080 	.word	0x00002080

00001c98 <memset>:
    1c98:	b5f0      	push	{r4, r5, r6, r7, lr}
    1c9a:	0783      	lsls	r3, r0, #30
    1c9c:	d043      	beq.n	1d26 <memset+0x8e>
    1c9e:	1e54      	subs	r4, r2, #1
    1ca0:	2a00      	cmp	r2, #0
    1ca2:	d03f      	beq.n	1d24 <memset+0x8c>
    1ca4:	b2ce      	uxtb	r6, r1
    1ca6:	0002      	movs	r2, r0
    1ca8:	2503      	movs	r5, #3
    1caa:	e002      	b.n	1cb2 <memset+0x1a>
    1cac:	001a      	movs	r2, r3
    1cae:	3c01      	subs	r4, #1
    1cb0:	d338      	bcc.n	1d24 <memset+0x8c>
    1cb2:	1c53      	adds	r3, r2, #1
    1cb4:	7016      	strb	r6, [r2, #0]
    1cb6:	422b      	tst	r3, r5
    1cb8:	d1f8      	bne.n	1cac <memset+0x14>
    1cba:	2c03      	cmp	r4, #3
    1cbc:	d92a      	bls.n	1d14 <memset+0x7c>
    1cbe:	22ff      	movs	r2, #255	; 0xff
    1cc0:	400a      	ands	r2, r1
    1cc2:	0215      	lsls	r5, r2, #8
    1cc4:	4315      	orrs	r5, r2
    1cc6:	042a      	lsls	r2, r5, #16
    1cc8:	4315      	orrs	r5, r2
    1cca:	2c0f      	cmp	r4, #15
    1ccc:	d914      	bls.n	1cf8 <memset+0x60>
    1cce:	0027      	movs	r7, r4
    1cd0:	001a      	movs	r2, r3
    1cd2:	3f10      	subs	r7, #16
    1cd4:	093e      	lsrs	r6, r7, #4
    1cd6:	3601      	adds	r6, #1
    1cd8:	0136      	lsls	r6, r6, #4
    1cda:	199e      	adds	r6, r3, r6
    1cdc:	6015      	str	r5, [r2, #0]
    1cde:	6055      	str	r5, [r2, #4]
    1ce0:	6095      	str	r5, [r2, #8]
    1ce2:	60d5      	str	r5, [r2, #12]
    1ce4:	3210      	adds	r2, #16
    1ce6:	4296      	cmp	r6, r2
    1ce8:	d1f8      	bne.n	1cdc <memset+0x44>
    1cea:	220f      	movs	r2, #15
    1cec:	4397      	bics	r7, r2
    1cee:	3710      	adds	r7, #16
    1cf0:	19db      	adds	r3, r3, r7
    1cf2:	4014      	ands	r4, r2
    1cf4:	2c03      	cmp	r4, #3
    1cf6:	d90d      	bls.n	1d14 <memset+0x7c>
    1cf8:	001a      	movs	r2, r3
    1cfa:	1f27      	subs	r7, r4, #4
    1cfc:	08be      	lsrs	r6, r7, #2
    1cfe:	3601      	adds	r6, #1
    1d00:	00b6      	lsls	r6, r6, #2
    1d02:	199e      	adds	r6, r3, r6
    1d04:	c220      	stmia	r2!, {r5}
    1d06:	42b2      	cmp	r2, r6
    1d08:	d1fc      	bne.n	1d04 <memset+0x6c>
    1d0a:	2203      	movs	r2, #3
    1d0c:	4397      	bics	r7, r2
    1d0e:	3704      	adds	r7, #4
    1d10:	19db      	adds	r3, r3, r7
    1d12:	4014      	ands	r4, r2
    1d14:	2c00      	cmp	r4, #0
    1d16:	d005      	beq.n	1d24 <memset+0x8c>
    1d18:	b2c9      	uxtb	r1, r1
    1d1a:	191c      	adds	r4, r3, r4
    1d1c:	7019      	strb	r1, [r3, #0]
    1d1e:	3301      	adds	r3, #1
    1d20:	429c      	cmp	r4, r3
    1d22:	d1fb      	bne.n	1d1c <memset+0x84>
    1d24:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1d26:	0014      	movs	r4, r2
    1d28:	0003      	movs	r3, r0
    1d2a:	e7c6      	b.n	1cba <memset+0x22>

00001d2c <register_fini>:
    1d2c:	4b03      	ldr	r3, [pc, #12]	; (1d3c <register_fini+0x10>)
    1d2e:	b510      	push	{r4, lr}
    1d30:	2b00      	cmp	r3, #0
    1d32:	d002      	beq.n	1d3a <register_fini+0xe>
    1d34:	4802      	ldr	r0, [pc, #8]	; (1d40 <register_fini+0x14>)
    1d36:	f000 f805 	bl	1d44 <atexit>
    1d3a:	bd10      	pop	{r4, pc}
    1d3c:	00000000 	.word	0x00000000
    1d40:	00001d55 	.word	0x00001d55

00001d44 <atexit>:
    1d44:	b510      	push	{r4, lr}
    1d46:	0001      	movs	r1, r0
    1d48:	2300      	movs	r3, #0
    1d4a:	2200      	movs	r2, #0
    1d4c:	2000      	movs	r0, #0
    1d4e:	f000 f81b 	bl	1d88 <__register_exitproc>
    1d52:	bd10      	pop	{r4, pc}

00001d54 <__libc_fini_array>:
    1d54:	b570      	push	{r4, r5, r6, lr}
    1d56:	4b09      	ldr	r3, [pc, #36]	; (1d7c <__libc_fini_array+0x28>)
    1d58:	4c09      	ldr	r4, [pc, #36]	; (1d80 <__libc_fini_array+0x2c>)
    1d5a:	1ae4      	subs	r4, r4, r3
    1d5c:	10a4      	asrs	r4, r4, #2
    1d5e:	d009      	beq.n	1d74 <__libc_fini_array+0x20>
    1d60:	4a08      	ldr	r2, [pc, #32]	; (1d84 <__libc_fini_array+0x30>)
    1d62:	18a5      	adds	r5, r4, r2
    1d64:	00ad      	lsls	r5, r5, #2
    1d66:	18ed      	adds	r5, r5, r3
    1d68:	682b      	ldr	r3, [r5, #0]
    1d6a:	3c01      	subs	r4, #1
    1d6c:	4798      	blx	r3
    1d6e:	3d04      	subs	r5, #4
    1d70:	2c00      	cmp	r4, #0
    1d72:	d1f9      	bne.n	1d68 <__libc_fini_array+0x14>
    1d74:	f000 f984 	bl	2080 <_fini>
    1d78:	bd70      	pop	{r4, r5, r6, pc}
    1d7a:	46c0      	nop			; (mov r8, r8)
    1d7c:	0000208c 	.word	0x0000208c
    1d80:	00002090 	.word	0x00002090
    1d84:	3fffffff 	.word	0x3fffffff

00001d88 <__register_exitproc>:
    1d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1d8a:	46de      	mov	lr, fp
    1d8c:	469b      	mov	fp, r3
    1d8e:	4b31      	ldr	r3, [pc, #196]	; (1e54 <__register_exitproc+0xcc>)
    1d90:	4645      	mov	r5, r8
    1d92:	681c      	ldr	r4, [r3, #0]
    1d94:	23a4      	movs	r3, #164	; 0xa4
    1d96:	464e      	mov	r6, r9
    1d98:	4657      	mov	r7, sl
    1d9a:	005b      	lsls	r3, r3, #1
    1d9c:	b5e0      	push	{r5, r6, r7, lr}
    1d9e:	0005      	movs	r5, r0
    1da0:	58e0      	ldr	r0, [r4, r3]
    1da2:	000e      	movs	r6, r1
    1da4:	4690      	mov	r8, r2
    1da6:	2800      	cmp	r0, #0
    1da8:	d04b      	beq.n	1e42 <__register_exitproc+0xba>
    1daa:	6843      	ldr	r3, [r0, #4]
    1dac:	2b1f      	cmp	r3, #31
    1dae:	dc0d      	bgt.n	1dcc <__register_exitproc+0x44>
    1db0:	1c5c      	adds	r4, r3, #1
    1db2:	2d00      	cmp	r5, #0
    1db4:	d121      	bne.n	1dfa <__register_exitproc+0x72>
    1db6:	3302      	adds	r3, #2
    1db8:	009b      	lsls	r3, r3, #2
    1dba:	6044      	str	r4, [r0, #4]
    1dbc:	501e      	str	r6, [r3, r0]
    1dbe:	2000      	movs	r0, #0
    1dc0:	bc3c      	pop	{r2, r3, r4, r5}
    1dc2:	4690      	mov	r8, r2
    1dc4:	4699      	mov	r9, r3
    1dc6:	46a2      	mov	sl, r4
    1dc8:	46ab      	mov	fp, r5
    1dca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1dcc:	4b22      	ldr	r3, [pc, #136]	; (1e58 <__register_exitproc+0xd0>)
    1dce:	2b00      	cmp	r3, #0
    1dd0:	d03c      	beq.n	1e4c <__register_exitproc+0xc4>
    1dd2:	20c8      	movs	r0, #200	; 0xc8
    1dd4:	0040      	lsls	r0, r0, #1
    1dd6:	e000      	b.n	1dda <__register_exitproc+0x52>
    1dd8:	bf00      	nop
    1dda:	2800      	cmp	r0, #0
    1ddc:	d036      	beq.n	1e4c <__register_exitproc+0xc4>
    1dde:	22a4      	movs	r2, #164	; 0xa4
    1de0:	2300      	movs	r3, #0
    1de2:	0052      	lsls	r2, r2, #1
    1de4:	58a1      	ldr	r1, [r4, r2]
    1de6:	6043      	str	r3, [r0, #4]
    1de8:	6001      	str	r1, [r0, #0]
    1dea:	50a0      	str	r0, [r4, r2]
    1dec:	3240      	adds	r2, #64	; 0x40
    1dee:	5083      	str	r3, [r0, r2]
    1df0:	3204      	adds	r2, #4
    1df2:	5083      	str	r3, [r0, r2]
    1df4:	2401      	movs	r4, #1
    1df6:	2d00      	cmp	r5, #0
    1df8:	d0dd      	beq.n	1db6 <__register_exitproc+0x2e>
    1dfa:	009a      	lsls	r2, r3, #2
    1dfc:	4691      	mov	r9, r2
    1dfe:	4481      	add	r9, r0
    1e00:	4642      	mov	r2, r8
    1e02:	2188      	movs	r1, #136	; 0x88
    1e04:	464f      	mov	r7, r9
    1e06:	507a      	str	r2, [r7, r1]
    1e08:	22c4      	movs	r2, #196	; 0xc4
    1e0a:	0052      	lsls	r2, r2, #1
    1e0c:	4690      	mov	r8, r2
    1e0e:	4480      	add	r8, r0
    1e10:	4642      	mov	r2, r8
    1e12:	3987      	subs	r1, #135	; 0x87
    1e14:	4099      	lsls	r1, r3
    1e16:	6812      	ldr	r2, [r2, #0]
    1e18:	468a      	mov	sl, r1
    1e1a:	430a      	orrs	r2, r1
    1e1c:	4694      	mov	ip, r2
    1e1e:	4642      	mov	r2, r8
    1e20:	4661      	mov	r1, ip
    1e22:	6011      	str	r1, [r2, #0]
    1e24:	2284      	movs	r2, #132	; 0x84
    1e26:	4649      	mov	r1, r9
    1e28:	465f      	mov	r7, fp
    1e2a:	0052      	lsls	r2, r2, #1
    1e2c:	508f      	str	r7, [r1, r2]
    1e2e:	2d02      	cmp	r5, #2
    1e30:	d1c1      	bne.n	1db6 <__register_exitproc+0x2e>
    1e32:	0002      	movs	r2, r0
    1e34:	4655      	mov	r5, sl
    1e36:	328d      	adds	r2, #141	; 0x8d
    1e38:	32ff      	adds	r2, #255	; 0xff
    1e3a:	6811      	ldr	r1, [r2, #0]
    1e3c:	430d      	orrs	r5, r1
    1e3e:	6015      	str	r5, [r2, #0]
    1e40:	e7b9      	b.n	1db6 <__register_exitproc+0x2e>
    1e42:	0020      	movs	r0, r4
    1e44:	304d      	adds	r0, #77	; 0x4d
    1e46:	30ff      	adds	r0, #255	; 0xff
    1e48:	50e0      	str	r0, [r4, r3]
    1e4a:	e7ae      	b.n	1daa <__register_exitproc+0x22>
    1e4c:	2001      	movs	r0, #1
    1e4e:	4240      	negs	r0, r0
    1e50:	e7b6      	b.n	1dc0 <__register_exitproc+0x38>
    1e52:	46c0      	nop			; (mov r8, r8)
    1e54:	00002068 	.word	0x00002068
    1e58:	00000000 	.word	0x00000000

00001e5c <senseAPin>:
    1e5c:	08000000 00000008                       ........

00001e64 <analogAccelPin>:
    1e64:	07000000 00000007                       ........

00001e6c <lookupTable.12306>:
    1e6c:	ffff8d20 ffffada1 ffffce64 ffffef6c      .......d...l...
    1e7c:	000010b7 0000324a 00005425 00007649     ....J2..%T..Iv..
    1e8c:	000098b7 0000bb72 0000de79 000101d0     ....r...y.......
    1e9c:	00012576 0001496f 00016dbc 0001925e     v%..oI...m..^...
    1eac:	0001b758 0001dcaa 00020258 00022862     X.......X...b(..
    1ebc:	00024ecc 00027596 00029cc4 0002c457     .N...u......W...
    1ecc:	0002ec52 000314b7 00033d89 000366ca     R........=...f..
    1edc:	0003907d 0003baa4 0003e544 0004105e     }.......D...^...
    1eec:	00043bf6 0004680e 000494ac 0004c1d1     .;...h..........
    1efc:	0004ef81 00051dc1 00054c95 00057c00     .........L...|..
    1f0c:	0005ac07 0005dcae 00060dfb 00063ff2     .............?..
    1f1c:	00067298 0006a5f4 0006da09 00070ee0     .r..............
    1f2c:	0007447d 00077ae8 0007b228 0007ea44     }D...z..(...D...
    1f3c:	00082344 00085d30 00089810 0008d3ef     D#..0]..........
    1f4c:	000910d6 00094ecf 00098de5 0009ce23     .....N......#...
    1f5c:	000a0f98 000a524f 000a9657 000adbbf     ....OR..W.......
    1f6c:	000b2298 000b6af3 000bb4e2 000c007b     ."...j......{...
    1f7c:	000c4dd4 000c9d03 000cee23 000d4150     .M......#...PA..
    1f8c:	000d96a9 000dee4e 000e4865 000ea516     ....N...eH......
    1f9c:	000f048e                                ....

00001fa0 <senseBatPin>:
    1fa0:	05000000 00000005 000012a8 00001278     ............x...
    1fb0:	0000128a 000011cc 0000128a 0000126e     ............n...
    1fc0:	0000128a 000011cc 00001278 00001278     ........x...x...
    1fd0:	0000126e 000011cc 000011d4 000011d4     n...............
    1fe0:	000011d4 00001290 00001278 00001278     ........x...x...
    1ff0:	0000124c 00001330 0000124c 0000126e     L...0...L...n...
    2000:	0000124c 00001330 00001278 00001278     L...0...x...x...
    2010:	0000126e 00001330 000011d4 000011d4     n...0...........
    2020:	000011d4 0000133a 000016c8 00001588     ....:...........
    2030:	00001588 00001584 000016a0 000016a0     ................
    2040:	00001692 00001584 000016a0 00001692     ................
    2050:	000016a0 00001584 000016a8 000016a8     ................
    2060:	000016a8 000018ac                       ........

00002068 <_global_impure_ptr>:
    2068:	20000010                                ... 

0000206c <_init>:
    206c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    206e:	46c0      	nop			; (mov r8, r8)
    2070:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2072:	bc08      	pop	{r3}
    2074:	469e      	mov	lr, r3
    2076:	4770      	bx	lr

00002078 <__init_array_start>:
    2078:	00001d2d 	.word	0x00001d2d

0000207c <__frame_dummy_init_array_entry>:
    207c:	000000dd                                ....

00002080 <_fini>:
    2080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2082:	46c0      	nop			; (mov r8, r8)
    2084:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2086:	bc08      	pop	{r3}
    2088:	469e      	mov	lr, r3
    208a:	4770      	bx	lr

0000208c <__fini_array_start>:
    208c:	000000b5 	.word	0x000000b5
