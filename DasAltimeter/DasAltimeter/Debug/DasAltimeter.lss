
DasAltimeter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001f2c  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000438  20000000  00001f2c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000001a4  20000440  00002370  00020440  2**4
                  ALLOC
  3 .stack        00002004  200005e4  00002514  00020440  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020438  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020460  2**0
                  CONTENTS, READONLY
  6 .debug_info   0001580a  00000000  00000000  000204b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001a8f  00000000  00000000  00035cc3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00001461  00000000  00000000  00037752  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000240  00000000  00000000  00038bb3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000200  00000000  00000000  00038df3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00014058  00000000  00000000  00038ff3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00005576  00000000  00000000  0004d04b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00072245  00000000  00000000  000525c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000007e0  00000000  00000000  000c4808  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	e8 25 00 20 19 01 00 00 15 01 00 00 15 01 00 00     .%. ............
	...
      2c:	15 01 00 00 00 00 00 00 00 00 00 00 15 01 00 00     ................
      3c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      4c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      5c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      6c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      7c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      8c:	15 01 00 00 15 01 00 00 00 00 00 00 00 00 00 00     ................
      9c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      ac:	15 01 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000440 	.word	0x20000440
      d4:	00000000 	.word	0x00000000
      d8:	00001f2c 	.word	0x00001f2c

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000444 	.word	0x20000444
     108:	00001f2c 	.word	0x00001f2c
     10c:	00001f2c 	.word	0x00001f2c
     110:	00000000 	.word	0x00000000

00000114 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     114:	e7fe      	b.n	114 <Dummy_Handler>
	...

00000118 <Reset_Handler>:
{
     118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
     11a:	4a2a      	ldr	r2, [pc, #168]	; (1c4 <Reset_Handler+0xac>)
     11c:	4b2a      	ldr	r3, [pc, #168]	; (1c8 <Reset_Handler+0xb0>)
     11e:	429a      	cmp	r2, r3
     120:	d011      	beq.n	146 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
     122:	001a      	movs	r2, r3
     124:	4b29      	ldr	r3, [pc, #164]	; (1cc <Reset_Handler+0xb4>)
     126:	429a      	cmp	r2, r3
     128:	d20d      	bcs.n	146 <Reset_Handler+0x2e>
     12a:	4a29      	ldr	r2, [pc, #164]	; (1d0 <Reset_Handler+0xb8>)
     12c:	3303      	adds	r3, #3
     12e:	1a9b      	subs	r3, r3, r2
     130:	089b      	lsrs	r3, r3, #2
     132:	3301      	adds	r3, #1
     134:	009b      	lsls	r3, r3, #2
     136:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
     138:	4823      	ldr	r0, [pc, #140]	; (1c8 <Reset_Handler+0xb0>)
     13a:	4922      	ldr	r1, [pc, #136]	; (1c4 <Reset_Handler+0xac>)
     13c:	588c      	ldr	r4, [r1, r2]
     13e:	5084      	str	r4, [r0, r2]
     140:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     142:	429a      	cmp	r2, r3
     144:	d1fa      	bne.n	13c <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
     146:	4a23      	ldr	r2, [pc, #140]	; (1d4 <Reset_Handler+0xbc>)
     148:	4b23      	ldr	r3, [pc, #140]	; (1d8 <Reset_Handler+0xc0>)
     14a:	429a      	cmp	r2, r3
     14c:	d20a      	bcs.n	164 <Reset_Handler+0x4c>
     14e:	43d3      	mvns	r3, r2
     150:	4921      	ldr	r1, [pc, #132]	; (1d8 <Reset_Handler+0xc0>)
     152:	185b      	adds	r3, r3, r1
     154:	2103      	movs	r1, #3
     156:	438b      	bics	r3, r1
     158:	3304      	adds	r3, #4
     15a:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
     15c:	2100      	movs	r1, #0
     15e:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
     160:	4293      	cmp	r3, r2
     162:	d1fc      	bne.n	15e <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     164:	4a1d      	ldr	r2, [pc, #116]	; (1dc <Reset_Handler+0xc4>)
     166:	21ff      	movs	r1, #255	; 0xff
     168:	4b1d      	ldr	r3, [pc, #116]	; (1e0 <Reset_Handler+0xc8>)
     16a:	438b      	bics	r3, r1
     16c:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     16e:	39fd      	subs	r1, #253	; 0xfd
     170:	2390      	movs	r3, #144	; 0x90
     172:	005b      	lsls	r3, r3, #1
     174:	4a1b      	ldr	r2, [pc, #108]	; (1e4 <Reset_Handler+0xcc>)
     176:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     178:	4a1b      	ldr	r2, [pc, #108]	; (1e8 <Reset_Handler+0xd0>)
     17a:	78d3      	ldrb	r3, [r2, #3]
     17c:	2503      	movs	r5, #3
     17e:	43ab      	bics	r3, r5
     180:	2402      	movs	r4, #2
     182:	4323      	orrs	r3, r4
     184:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     186:	78d3      	ldrb	r3, [r2, #3]
     188:	270c      	movs	r7, #12
     18a:	43bb      	bics	r3, r7
     18c:	2608      	movs	r6, #8
     18e:	4333      	orrs	r3, r6
     190:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
     192:	4b16      	ldr	r3, [pc, #88]	; (1ec <Reset_Handler+0xd4>)
     194:	7b98      	ldrb	r0, [r3, #14]
     196:	2230      	movs	r2, #48	; 0x30
     198:	4390      	bics	r0, r2
     19a:	2220      	movs	r2, #32
     19c:	4310      	orrs	r0, r2
     19e:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     1a0:	7b99      	ldrb	r1, [r3, #14]
     1a2:	43b9      	bics	r1, r7
     1a4:	4331      	orrs	r1, r6
     1a6:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     1a8:	7b9a      	ldrb	r2, [r3, #14]
     1aa:	43aa      	bics	r2, r5
     1ac:	4322      	orrs	r2, r4
     1ae:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
     1b0:	4a0f      	ldr	r2, [pc, #60]	; (1f0 <Reset_Handler+0xd8>)
     1b2:	6853      	ldr	r3, [r2, #4]
     1b4:	2180      	movs	r1, #128	; 0x80
     1b6:	430b      	orrs	r3, r1
     1b8:	6053      	str	r3, [r2, #4]
        __libc_init_array();
     1ba:	4b0e      	ldr	r3, [pc, #56]	; (1f4 <Reset_Handler+0xdc>)
     1bc:	4798      	blx	r3
        main();
     1be:	4b0e      	ldr	r3, [pc, #56]	; (1f8 <Reset_Handler+0xe0>)
     1c0:	4798      	blx	r3
     1c2:	e7fe      	b.n	1c2 <Reset_Handler+0xaa>
     1c4:	00001f2c 	.word	0x00001f2c
     1c8:	20000000 	.word	0x20000000
     1cc:	20000438 	.word	0x20000438
     1d0:	20000004 	.word	0x20000004
     1d4:	20000440 	.word	0x20000440
     1d8:	200005e4 	.word	0x200005e4
     1dc:	e000ed00 	.word	0xe000ed00
     1e0:	00000000 	.word	0x00000000
     1e4:	41007000 	.word	0x41007000
     1e8:	41005000 	.word	0x41005000
     1ec:	41004800 	.word	0x41004800
     1f0:	41004000 	.word	0x41004000
     1f4:	00001af5 	.word	0x00001af5
     1f8:	00000361 	.word	0x00000361

000001fc <SystemInit>:
 *         Initialize the System and update the SystemCoreClock variable.
 */
void SystemInit(void)
{
	// Keep the default device state after reset
	SystemCoreClock = __SYSTEM_CLOCK;
     1fc:	4a01      	ldr	r2, [pc, #4]	; (204 <SystemInit+0x8>)
     1fe:	4b02      	ldr	r3, [pc, #8]	; (208 <SystemInit+0xc>)
     200:	601a      	str	r2, [r3, #0]
	return;
}
     202:	4770      	bx	lr
     204:	000f4240 	.word	0x000f4240
     208:	20000000 	.word	0x20000000

0000020c <init>:
#include <boardDefines.h>




void init() {
     20c:	b5f0      	push	{r4, r5, r6, r7, lr}
     20e:	46d6      	mov	lr, sl
     210:	464f      	mov	r7, r9
     212:	4646      	mov	r6, r8
     214:	b5c0      	push	{r6, r7, lr}
     216:	b082      	sub	sp, #8
    SystemInit();
     218:	4b47      	ldr	r3, [pc, #284]	; (338 <init+0x12c>)
     21a:	4798      	blx	r3
    GclkInit();
     21c:	4b47      	ldr	r3, [pc, #284]	; (33c <init+0x130>)
     21e:	4798      	blx	r3
    delayInit();
     220:	4b47      	ldr	r3, [pc, #284]	; (340 <init+0x134>)
     222:	4798      	blx	r3
    adcInit();
     224:	4b47      	ldr	r3, [pc, #284]	; (344 <init+0x138>)
     226:	4798      	blx	r3
    dmaInit();
     228:	4b47      	ldr	r3, [pc, #284]	; (348 <init+0x13c>)
     22a:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     22c:	4b47      	ldr	r3, [pc, #284]	; (34c <init+0x140>)
     22e:	2240      	movs	r2, #64	; 0x40
     230:	601a      	str	r2, [r3, #0]
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     232:	21c1      	movs	r1, #193	; 0xc1
     234:	0089      	lsls	r1, r1, #2
     236:	585a      	ldr	r2, [r3, r1]
     238:	4845      	ldr	r0, [pc, #276]	; (350 <init+0x144>)
     23a:	4002      	ands	r2, r0
     23c:	505a      	str	r2, [r3, r1]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     23e:	4b45      	ldr	r3, [pc, #276]	; (354 <init+0x148>)
     240:	215c      	movs	r1, #92	; 0x5c
     242:	5c5a      	ldrb	r2, [r3, r1]
     244:	2401      	movs	r4, #1
     246:	43a2      	bics	r2, r4
     248:	545a      	strb	r2, [r3, r1]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     24a:	2280      	movs	r2, #128	; 0x80
     24c:	0552      	lsls	r2, r2, #21
     24e:	609a      	str	r2, [r3, #8]
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     250:	2032      	movs	r0, #50	; 0x32
     252:	5c19      	ldrb	r1, [r3, r0]
     254:	220f      	movs	r2, #15
     256:	4011      	ands	r1, r2
     258:	2510      	movs	r5, #16
     25a:	4329      	orrs	r1, r5
     25c:	5419      	strb	r1, [r3, r0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     25e:	3013      	adds	r0, #19
     260:	5c19      	ldrb	r1, [r3, r0]
     262:	2601      	movs	r6, #1
     264:	4331      	orrs	r1, r6
     266:	5419      	strb	r1, [r3, r0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     268:	254c      	movs	r5, #76	; 0x4c
     26a:	5d59      	ldrb	r1, [r3, r5]
     26c:	43a1      	bics	r1, r4
     26e:	5559      	strb	r1, [r3, r5]
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     270:	2180      	movs	r1, #128	; 0x80
     272:	0149      	lsls	r1, r1, #5
     274:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     276:	214d      	movs	r1, #77	; 0x4d
     278:	468c      	mov	ip, r1
     27a:	5c59      	ldrb	r1, [r3, r1]
     27c:	43a1      	bics	r1, r4
     27e:	4660      	mov	r0, ip
     280:	5419      	strb	r1, [r3, r0]
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     282:	2180      	movs	r1, #128	; 0x80
     284:	0189      	lsls	r1, r1, #6
     286:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     288:	214f      	movs	r1, #79	; 0x4f
     28a:	5c58      	ldrb	r0, [r3, r1]
     28c:	43a0      	bics	r0, r4
     28e:	5458      	strb	r0, [r3, r1]
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     290:	5c58      	ldrb	r0, [r3, r1]
     292:	2702      	movs	r7, #2
     294:	46ba      	mov	sl, r7
     296:	4657      	mov	r7, sl
     298:	4338      	orrs	r0, r7
     29a:	5458      	strb	r0, [r3, r1]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     29c:	2080      	movs	r0, #128	; 0x80
     29e:	0200      	lsls	r0, r0, #8
     2a0:	6058      	str	r0, [r3, #4]
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     2a2:	2037      	movs	r0, #55	; 0x37
     2a4:	4681      	mov	r9, r0
     2a6:	5c18      	ldrb	r0, [r3, r0]
     2a8:	4010      	ands	r0, r2
     2aa:	2720      	movs	r7, #32
     2ac:	46b8      	mov	r8, r7
     2ae:	4647      	mov	r7, r8
     2b0:	4338      	orrs	r0, r7
     2b2:	464f      	mov	r7, r9
     2b4:	55d8      	strb	r0, [r3, r7]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     2b6:	5c58      	ldrb	r0, [r3, r1]
     2b8:	4330      	orrs	r0, r6
     2ba:	5458      	strb	r0, [r3, r1]
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     2bc:	3919      	subs	r1, #25
     2be:	5c58      	ldrb	r0, [r3, r1]
     2c0:	4002      	ands	r2, r0
     2c2:	4640      	mov	r0, r8
     2c4:	4302      	orrs	r2, r0
     2c6:	545a      	strb	r2, [r3, r1]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     2c8:	4662      	mov	r2, ip
     2ca:	5c9a      	ldrb	r2, [r3, r2]
     2cc:	4332      	orrs	r2, r6
     2ce:	4660      	mov	r0, ip
     2d0:	541a      	strb	r2, [r3, r0]
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     2d2:	5c5a      	ldrb	r2, [r3, r1]
     2d4:	383e      	subs	r0, #62	; 0x3e
     2d6:	4382      	bics	r2, r0
     2d8:	4650      	mov	r0, sl
     2da:	4302      	orrs	r2, r0
     2dc:	545a      	strb	r2, [r3, r1]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     2de:	5d5a      	ldrb	r2, [r3, r5]
     2e0:	4316      	orrs	r6, r2
     2e2:	555e      	strb	r6, [r3, r5]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     2e4:	2254      	movs	r2, #84	; 0x54
     2e6:	5c99      	ldrb	r1, [r3, r2]
     2e8:	43a1      	bics	r1, r4
     2ea:	5499      	strb	r1, [r3, r2]
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     2ec:	2180      	movs	r1, #128	; 0x80
     2ee:	0349      	lsls	r1, r1, #13
     2f0:	6099      	str	r1, [r3, #8]




inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     2f2:	6199      	str	r1, [r3, #24]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     2f4:	5c99      	ldrb	r1, [r3, r2]
     2f6:	43a1      	bics	r1, r4
     2f8:	5499      	strb	r1, [r3, r2]
     2fa:	3a06      	subs	r2, #6
     2fc:	5c99      	ldrb	r1, [r3, r2]
     2fe:	43a1      	bics	r1, r4
     300:	5499      	strb	r1, [r3, r2]
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     302:	2180      	movs	r1, #128	; 0x80
     304:	01c9      	lsls	r1, r1, #7
     306:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     308:	6199      	str	r1, [r3, #24]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     30a:	5c99      	ldrb	r1, [r3, r2]
     30c:	43a1      	bics	r1, r4
     30e:	5499      	strb	r1, [r3, r2]
    pinOut(cs_baro);
    pinHigh(cs_baro);
    pinGpio(cs_baro);


    sercomClockEnable(SPI1, 3, 4);
     310:	3a4a      	subs	r2, #74	; 0x4a
     312:	2103      	movs	r1, #3
     314:	2002      	movs	r0, #2
     316:	4b10      	ldr	r3, [pc, #64]	; (358 <init+0x14c>)
     318:	4798      	blx	r3
    sercomSpiMasterInit(SPI1, 3, 0, 0, 0, 0x01);
     31a:	9401      	str	r4, [sp, #4]
     31c:	2300      	movs	r3, #0
     31e:	9300      	str	r3, [sp, #0]
     320:	2200      	movs	r2, #0
     322:	2103      	movs	r1, #3
     324:	2002      	movs	r0, #2
     326:	4c0d      	ldr	r4, [pc, #52]	; (35c <init+0x150>)
     328:	47a0      	blx	r4

}
     32a:	b002      	add	sp, #8
     32c:	bc1c      	pop	{r2, r3, r4}
     32e:	4690      	mov	r8, r2
     330:	4699      	mov	r9, r3
     332:	46a2      	mov	sl, r4
     334:	bdf0      	pop	{r4, r5, r6, r7, pc}
     336:	46c0      	nop			; (mov r8, r8)
     338:	000001fd 	.word	0x000001fd
     33c:	00000521 	.word	0x00000521
     340:	000005f5 	.word	0x000005f5
     344:	00000425 	.word	0x00000425
     348:	0000066d 	.word	0x0000066d
     34c:	e000e100 	.word	0xe000e100
     350:	ff00ffff 	.word	0xff00ffff
     354:	41004400 	.word	0x41004400
     358:	00000b55 	.word	0x00000b55
     35c:	00000bbd 	.word	0x00000bbd

00000360 <main>:


int main(void) {
     360:	b5f0      	push	{r4, r5, r6, r7, lr}
     362:	b0a1      	sub	sp, #132	; 0x84

    init();
     364:	4b20      	ldr	r3, [pc, #128]	; (3e8 <main+0x88>)
     366:	4798      	blx	r3

    Altimeter my_altimeter;

    initMS5803Barometer(&my_altimeter.myBarometer);
     368:	a805      	add	r0, sp, #20
     36a:	4b20      	ldr	r3, [pc, #128]	; (3ec <main+0x8c>)
     36c:	4798      	blx	r3

    volatile uint8_t rData;
    volatile uint8_t rData2;
    volatile uint8_t rData3;
    volatile uint8_t rData4;
    volatile long counter = 0;
     36e:	2300      	movs	r3, #0
     370:	9304      	str	r3, [sp, #16]
		
        counter++;
 //       pinToggle(LedPin);


        sampleTick(&my_altimeter);
     372:	4e1f      	ldr	r6, [pc, #124]	; (3f0 <main+0x90>)

        uint8_t dummy_Tx = 0xFF;
        uint8_t dummy_rx;

analogSample = adc_read(analogAccelPin);
     374:	4f1f      	ldr	r7, [pc, #124]	; (3f4 <main+0x94>)
averageAlt = averageAlt + my_altimeter.myBarometer.heightFeet;

        if (counter == 100) {
			pinToggle(LedPin);
			
			averageAlt = averageAlt / 100;
     376:	4d20      	ldr	r5, [pc, #128]	; (3f8 <main+0x98>)
        counter++;
     378:	9b04      	ldr	r3, [sp, #16]
     37a:	3301      	adds	r3, #1
     37c:	9304      	str	r3, [sp, #16]
        sampleTick(&my_altimeter);
     37e:	a805      	add	r0, sp, #20
     380:	47b0      	blx	r6
analogSample = adc_read(analogAccelPin);
     382:	6838      	ldr	r0, [r7, #0]
     384:	6879      	ldr	r1, [r7, #4]
     386:	4b1d      	ldr	r3, [pc, #116]	; (3fc <main+0x9c>)
     388:	4798      	blx	r3
     38a:	466b      	mov	r3, sp
     38c:	80d8      	strh	r0, [r3, #6]
accelX = (analogSample - 3920) * 0.0227;
     38e:	88d8      	ldrh	r0, [r3, #6]
     390:	4b1b      	ldr	r3, [pc, #108]	; (400 <main+0xa0>)
     392:	469c      	mov	ip, r3
     394:	4460      	add	r0, ip
     396:	4b1b      	ldr	r3, [pc, #108]	; (404 <main+0xa4>)
     398:	4798      	blx	r3
     39a:	4a1b      	ldr	r2, [pc, #108]	; (408 <main+0xa8>)
     39c:	4b1b      	ldr	r3, [pc, #108]	; (40c <main+0xac>)
     39e:	4c1c      	ldr	r4, [pc, #112]	; (410 <main+0xb0>)
     3a0:	47a0      	blx	r4
     3a2:	4b1c      	ldr	r3, [pc, #112]	; (414 <main+0xb4>)
     3a4:	4798      	blx	r3
     3a6:	9000      	str	r0, [sp, #0]
averageAccel = averageAccel + accelX;
     3a8:	9803      	ldr	r0, [sp, #12]
     3aa:	9900      	ldr	r1, [sp, #0]
     3ac:	4c1a      	ldr	r4, [pc, #104]	; (418 <main+0xb8>)
     3ae:	47a0      	blx	r4
     3b0:	9003      	str	r0, [sp, #12]
averageAlt = averageAlt + my_altimeter.myBarometer.heightFeet;
     3b2:	9802      	ldr	r0, [sp, #8]
     3b4:	990e      	ldr	r1, [sp, #56]	; 0x38
     3b6:	47a0      	blx	r4
     3b8:	9002      	str	r0, [sp, #8]
        if (counter == 100) {
     3ba:	9b04      	ldr	r3, [sp, #16]
     3bc:	2b64      	cmp	r3, #100	; 0x64
     3be:	d1db      	bne.n	378 <main+0x18>
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
}


inline static void pinToggle(Pin p) {
    PORT->Group[p.group].OUTTGL.reg = (1<<p.pin);
     3c0:	2280      	movs	r2, #128	; 0x80
     3c2:	0552      	lsls	r2, r2, #21
     3c4:	4b15      	ldr	r3, [pc, #84]	; (41c <main+0xbc>)
     3c6:	61da      	str	r2, [r3, #28]
			averageAlt = averageAlt / 100;
     3c8:	9802      	ldr	r0, [sp, #8]
     3ca:	4c15      	ldr	r4, [pc, #84]	; (420 <main+0xc0>)
     3cc:	1c29      	adds	r1, r5, #0
     3ce:	47a0      	blx	r4
     3d0:	9002      	str	r0, [sp, #8]
			averageAccel = averageAccel / 100;
     3d2:	9803      	ldr	r0, [sp, #12]
     3d4:	1c29      	adds	r1, r5, #0
     3d6:	47a0      	blx	r4
     3d8:	9003      	str	r0, [sp, #12]
			
            counter = -1;
     3da:	2301      	movs	r3, #1
     3dc:	425b      	negs	r3, r3
     3de:	9304      	str	r3, [sp, #16]
			
			averageAccel = 0;
     3e0:	2300      	movs	r3, #0
     3e2:	9303      	str	r3, [sp, #12]
			averageAlt = 0;
     3e4:	9302      	str	r3, [sp, #8]
     3e6:	e7c7      	b.n	378 <main+0x18>
     3e8:	0000020d 	.word	0x0000020d
     3ec:	000008ed 	.word	0x000008ed
     3f0:	00000949 	.word	0x00000949
     3f4:	00001d00 	.word	0x00001d00
     3f8:	42c80000 	.word	0x42c80000
     3fc:	000004a1 	.word	0x000004a1
     400:	fffff0b0 	.word	0xfffff0b0
     404:	0000187d 	.word	0x0000187d
     408:	367a0f91 	.word	0x367a0f91
     40c:	3f973eab 	.word	0x3f973eab
     410:	0000137d 	.word	0x0000137d
     414:	000019a5 	.word	0x000019a5
     418:	00000c9d 	.word	0x00000c9d
     41c:	41004400 	.word	0x41004400
     420:	00000fc1 	.word	0x00000fc1

00000424 <adcInit>:
#include <util.h>

void adcInit() {

    // set up clock
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;
     424:	4a11      	ldr	r2, [pc, #68]	; (46c <adcInit+0x48>)
     426:	6a11      	ldr	r1, [r2, #32]
     428:	2380      	movs	r3, #128	; 0x80
     42a:	025b      	lsls	r3, r3, #9
     42c:	430b      	orrs	r3, r1
     42e:	6213      	str	r3, [r2, #32]

    // divide prescaler by 512 (93.75KHz), max adc freq is 2.1MHz
    ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |
     430:	490f      	ldr	r1, [pc, #60]	; (470 <adcInit+0x4c>)
     432:	22e0      	movs	r2, #224	; 0xe0
     434:	00d2      	lsls	r2, r2, #3
     436:	808a      	strh	r2, [r1, #4]
                     ADC_CTRLB_RESSEL_12BIT;

    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
     438:	480e      	ldr	r0, [pc, #56]	; (474 <adcInit+0x50>)
     43a:	4b0f      	ldr	r3, [pc, #60]	; (478 <adcInit+0x54>)
     43c:	8058      	strh	r0, [r3, #2]
                        GCLK_CLKCTRL_GEN(0) |
                        GCLK_CLKCTRL_ID(ADC_GCLK_ID);

    ADC->CALIB.reg =
        ADC_CALIB_BIAS_CAL(
     43e:	4b0f      	ldr	r3, [pc, #60]	; (47c <adcInit+0x58>)
     440:	681b      	ldr	r3, [r3, #0]
     442:	015b      	lsls	r3, r3, #5
     444:	4013      	ands	r3, r2
            (*(uint32_t *)ADC_FUSES_BIASCAL_ADDR >> ADC_FUSES_BIASCAL_Pos)
        ) |
        ADC_CALIB_LINEARITY_CAL(
     446:	4a0e      	ldr	r2, [pc, #56]	; (480 <adcInit+0x5c>)
     448:	6850      	ldr	r0, [r2, #4]
     44a:	0140      	lsls	r0, r0, #5
     44c:	6812      	ldr	r2, [r2, #0]
     44e:	0ed2      	lsrs	r2, r2, #27
     450:	4302      	orrs	r2, r0
     452:	20ff      	movs	r0, #255	; 0xff
     454:	4002      	ands	r2, r0
        ) |
     456:	4313      	orrs	r3, r2
    ADC->CALIB.reg =
     458:	850b      	strh	r3, [r1, #40]	; 0x28
            (*(uint64_t *)ADC_FUSES_LINEARITY_0_ADDR >> ADC_FUSES_LINEARITY_0_Pos)
        );

    ADC->REFCTRL.reg = ADC_REFCTRL_REFSEL_INTVCC1;
     45a:	2302      	movs	r3, #2
     45c:	704b      	strb	r3, [r1, #1]

    ADC->CTRLA.reg = ADC_CTRLA_ENABLE; // enable
     45e:	700b      	strb	r3, [r1, #0]
    while(ADC->STATUS.reg & ADC_STATUS_SYNCBUSY);
     460:	000a      	movs	r2, r1
     462:	7e53      	ldrb	r3, [r2, #25]
     464:	b25b      	sxtb	r3, r3
     466:	2b00      	cmp	r3, #0
     468:	dbfb      	blt.n	462 <adcInit+0x3e>
}
     46a:	4770      	bx	lr
     46c:	40000400 	.word	0x40000400
     470:	42004000 	.word	0x42004000
     474:	0000401e 	.word	0x0000401e
     478:	40000c00 	.word	0x40000c00
     47c:	00806024 	.word	0x00806024
     480:	00806020 	.word	0x00806020

00000484 <adcSample>:



u16_t adcSample() {
    ADC->SWTRIG.reg = ADC_SWTRIG_START;
     484:	2202      	movs	r2, #2
     486:	4b05      	ldr	r3, [pc, #20]	; (49c <adcSample+0x18>)
     488:	731a      	strb	r2, [r3, #12]
    while(!(ADC->INTFLAG.reg & ADC_INTFLAG_RESRDY)); // wait until result is ready
     48a:	0019      	movs	r1, r3
     48c:	3a01      	subs	r2, #1
     48e:	7e0b      	ldrb	r3, [r1, #24]
     490:	4213      	tst	r3, r2
     492:	d0fc      	beq.n	48e <adcSample+0xa>
    return ADC->RESULT.reg;
     494:	4b01      	ldr	r3, [pc, #4]	; (49c <adcSample+0x18>)
     496:	8b58      	ldrh	r0, [r3, #26]
     498:	b280      	uxth	r0, r0
}
     49a:	4770      	bx	lr
     49c:	42004000 	.word	0x42004000

000004a0 <adc_read>:


u16_t adc_read(Pin p) {
     4a0:	b530      	push	{r4, r5, lr}
     4a2:	b083      	sub	sp, #12
     4a4:	0c03      	lsrs	r3, r0, #16
     4a6:	9000      	str	r0, [sp, #0]
     4a8:	9101      	str	r1, [sp, #4]
     4aa:	b2cd      	uxtb	r5, r1
     4ac:	b2db      	uxtb	r3, r3
     4ae:	0e00      	lsrs	r0, r0, #24
    if (p.pin & 1) {
     4b0:	07c2      	lsls	r2, r0, #31
     4b2:	d41f      	bmi.n	4f4 <adc_read+0x54>
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     4b4:	0844      	lsrs	r4, r0, #1
     4b6:	01d9      	lsls	r1, r3, #7
     4b8:	1862      	adds	r2, r4, r1
     4ba:	4915      	ldr	r1, [pc, #84]	; (510 <adc_read+0x70>)
     4bc:	468c      	mov	ip, r1
     4be:	4462      	add	r2, ip
     4c0:	7811      	ldrb	r1, [r2, #0]
     4c2:	240f      	movs	r4, #15
     4c4:	43a1      	bics	r1, r4
     4c6:	2401      	movs	r4, #1
     4c8:	4321      	orrs	r1, r4
     4ca:	7011      	strb	r1, [r2, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     4cc:	01db      	lsls	r3, r3, #7
     4ce:	18c0      	adds	r0, r0, r3
     4d0:	4b10      	ldr	r3, [pc, #64]	; (514 <adc_read+0x74>)
     4d2:	469c      	mov	ip, r3
     4d4:	4460      	add	r0, ip
     4d6:	7803      	ldrb	r3, [r0, #0]
     4d8:	2201      	movs	r2, #1
     4da:	4313      	orrs	r3, r2
     4dc:	7003      	strb	r3, [r0, #0]
    // switch pin mux to analog in
    pinAnalog(p);

    ADC->INPUTCTRL.reg = (ADC_INPUTCTRL_MUXPOS(p.chan) // select from proper pin
     4de:	211f      	movs	r1, #31
     4e0:	400d      	ands	r5, r1
                          | ADC_INPUTCTRL_MUXNEG_GND // 0 = gnd
                          | ADC_INPUTCTRL_GAIN_1X);
     4e2:	21c0      	movs	r1, #192	; 0xc0
     4e4:	0149      	lsls	r1, r1, #5
     4e6:	4329      	orrs	r1, r5
    ADC->INPUTCTRL.reg = (ADC_INPUTCTRL_MUXPOS(p.chan) // select from proper pin
     4e8:	4b0b      	ldr	r3, [pc, #44]	; (518 <adc_read+0x78>)
     4ea:	6119      	str	r1, [r3, #16]

    return adcSample();
     4ec:	4b0b      	ldr	r3, [pc, #44]	; (51c <adc_read+0x7c>)
     4ee:	4798      	blx	r3
     4f0:	b003      	add	sp, #12
     4f2:	bd30      	pop	{r4, r5, pc}
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     4f4:	0841      	lsrs	r1, r0, #1
     4f6:	01dc      	lsls	r4, r3, #7
     4f8:	190a      	adds	r2, r1, r4
     4fa:	4905      	ldr	r1, [pc, #20]	; (510 <adc_read+0x70>)
     4fc:	468c      	mov	ip, r1
     4fe:	4462      	add	r2, ip
     500:	7814      	ldrb	r4, [r2, #0]
     502:	210f      	movs	r1, #15
     504:	4021      	ands	r1, r4
     506:	2410      	movs	r4, #16
     508:	4321      	orrs	r1, r4
     50a:	7011      	strb	r1, [r2, #0]
     50c:	e7de      	b.n	4cc <adc_read+0x2c>
     50e:	46c0      	nop			; (mov r8, r8)
     510:	41004430 	.word	0x41004430
     514:	41004440 	.word	0x41004440
     518:	42004000 	.word	0x42004000
     51c:	00000485 	.word	0x00000485

00000520 <GclkInit>:


static uint32_t cycles_per_ms = 48000000UL / 1000;
static uint32_t cycles_per_us = 48000000UL / 1000000;

void GclkInit() {
     520:	b510      	push	{r4, lr}


    SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     522:	4a1d      	ldr	r2, [pc, #116]	; (598 <GclkInit+0x78>)
     524:	23c2      	movs	r3, #194	; 0xc2
     526:	00db      	lsls	r3, r3, #3
     528:	6093      	str	r3, [r2, #8]
                           SYSCTRL_INTFLAG_DFLLRDY;
    NVMCTRL->CTRLB.reg |= NVMCTRL_CTRLB_RWS_HALF;
     52a:	491c      	ldr	r1, [pc, #112]	; (59c <GclkInit+0x7c>)
     52c:	684b      	ldr	r3, [r1, #4]
     52e:	2002      	movs	r0, #2
     530:	4303      	orrs	r3, r0
     532:	604b      	str	r3, [r1, #4]


// start and enable external 32k crystal
    SYSCTRL->XOSC32K.reg = SYSCTRL_XOSC32K_ENABLE |
     534:	4b1a      	ldr	r3, [pc, #104]	; (5a0 <GclkInit+0x80>)
     536:	8293      	strh	r3, [r2, #20]
                           SYSCTRL_XOSC32K_XTALEN |
                           SYSCTRL_XOSC32K_EN32K |
                           ( 6 << SYSCTRL_XOSC32K_STARTUP_Pos);

    //wait for crystal to warm up
    while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_XOSC32KRDY)) == 0);
     538:	0011      	movs	r1, r2
     53a:	2202      	movs	r2, #2
     53c:	68cb      	ldr	r3, [r1, #12]
     53e:	421a      	tst	r2, r3
     540:	d0fc      	beq.n	53c <GclkInit+0x1c>

#define NVM_DFLL_COARSE_POS    58
#define NVM_DFLL_COARSE_SIZE   6
#define NVM_DFLL_FINE_POS      64
#define NVM_DFLL_FINE_SIZE     10
    uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
     542:	4b18      	ldr	r3, [pc, #96]	; (5a4 <GclkInit+0x84>)
     544:	6818      	ldr	r0, [r3, #0]
     546:	0e80      	lsrs	r0, r0, #26
                         + (NVM_DFLL_COARSE_POS / 32))
                       >> (NVM_DFLL_COARSE_POS % 32))
                     & ((1 << NVM_DFLL_COARSE_SIZE) - 1);
    if (coarse == 0x3f) {
     548:	283f      	cmp	r0, #63	; 0x3f
     54a:	d021      	beq.n	590 <GclkInit+0x70>
        coarse = 0x1f;
    }
    uint32_t fine =( *((uint32_t *)(NVMCTRL_OTP4)
                       + (NVM_DFLL_FINE_POS / 32))
                     >> (NVM_DFLL_FINE_POS % 32))
     54c:	4b16      	ldr	r3, [pc, #88]	; (5a8 <GclkInit+0x88>)
    uint32_t fine =( *((uint32_t *)(NVMCTRL_OTP4)
     54e:	681c      	ldr	r4, [r3, #0]
     550:	05a4      	lsls	r4, r4, #22
     552:	0da4      	lsrs	r4, r4, #22
                   & ((1 << NVM_DFLL_FINE_SIZE) - 1);
    if (fine == 0x3ff) {
     554:	4b15      	ldr	r3, [pc, #84]	; (5ac <GclkInit+0x8c>)
     556:	429c      	cmp	r4, r3
     558:	d01c      	beq.n	594 <GclkInit+0x74>
        fine = 0x1ff;
    }


    // Disable ONDEMAND mode while writing configurations (errata 9905)
    SYSCTRL->DFLLCTRL.reg = dfll_ctrl_usb & ~SYSCTRL_DFLLCTRL_ONDEMAND;
     55a:	4a15      	ldr	r2, [pc, #84]	; (5b0 <GclkInit+0x90>)
     55c:	4b0e      	ldr	r3, [pc, #56]	; (598 <GclkInit+0x78>)
     55e:	849a      	strh	r2, [r3, #36]	; 0x24
    while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_DFLLRDY)) == 0);
     560:	0019      	movs	r1, r3
     562:	2210      	movs	r2, #16
     564:	68cb      	ldr	r3, [r1, #12]
     566:	421a      	tst	r2, r3
     568:	d0fc      	beq.n	564 <GclkInit+0x44>
    SYSCTRL->DFLLVAL.reg = SYSCTRL_DFLLVAL_COARSE(coarse) | SYSCTRL_DFLLVAL_FINE(fine);
     56a:	0280      	lsls	r0, r0, #10
     56c:	4320      	orrs	r0, r4
     56e:	4b0a      	ldr	r3, [pc, #40]	; (598 <GclkInit+0x78>)
     570:	6298      	str	r0, [r3, #40]	; 0x28


    //Wait and see if the DFLL output is good . . .
    while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_DFLLRDY)) == 0);
     572:	0019      	movs	r1, r3
     574:	2210      	movs	r2, #16
     576:	68cb      	ldr	r3, [r1, #12]
     578:	421a      	tst	r2, r3
     57a:	d0fc      	beq.n	576 <GclkInit+0x56>


    SYSCTRL->DFLLCTRL.reg = dfll_ctrl_usb;
     57c:	4a0d      	ldr	r2, [pc, #52]	; (5b4 <GclkInit+0x94>)
     57e:	4b06      	ldr	r3, [pc, #24]	; (598 <GclkInit+0x78>)
     580:	849a      	strh	r2, [r3, #36]	; 0x24


    //For generic clock generator 0, select the DFLL48 Clock as input
    GCLK->GENDIV.reg  = (GCLK_GENDIV_DIV(1)  | GCLK_GENDIV_ID(0));
     582:	4b0d      	ldr	r3, [pc, #52]	; (5b8 <GclkInit+0x98>)
     584:	2280      	movs	r2, #128	; 0x80
     586:	0052      	lsls	r2, r2, #1
     588:	609a      	str	r2, [r3, #8]
    GCLK->GENCTRL.reg = (GCLK_GENCTRL_ID(0)  | (GCLK_GENCTRL_SRC_DFLL48M) | (GCLK_GENCTRL_GENEN));
     58a:	4a0c      	ldr	r2, [pc, #48]	; (5bc <GclkInit+0x9c>)
     58c:	605a      	str	r2, [r3, #4]
}
     58e:	bd10      	pop	{r4, pc}
        coarse = 0x1f;
     590:	3820      	subs	r0, #32
     592:	e7db      	b.n	54c <GclkInit+0x2c>
        fine = 0x1ff;
     594:	4c0a      	ldr	r4, [pc, #40]	; (5c0 <GclkInit+0xa0>)
     596:	e7e0      	b.n	55a <GclkInit+0x3a>
     598:	40000800 	.word	0x40000800
     59c:	41004000 	.word	0x41004000
     5a0:	0000060e 	.word	0x0000060e
     5a4:	00806024 	.word	0x00806024
     5a8:	00806028 	.word	0x00806028
     5ac:	000003ff 	.word	0x000003ff
     5b0:	00000522 	.word	0x00000522
     5b4:	000005a2 	.word	0x000005a2
     5b8:	40000c00 	.word	0x40000c00
     5bc:	00010700 	.word	0x00010700
     5c0:	000001ff 	.word	0x000001ff

000005c4 <gclkEnable>:

void gclkEnable(u32_t id, u32_t src, u32_t div) {
     5c4:	b510      	push	{r4, lr}
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
     5c6:	230f      	movs	r3, #15
     5c8:	4003      	ands	r3, r0
     5ca:	0212      	lsls	r2, r2, #8
     5cc:	4807      	ldr	r0, [pc, #28]	; (5ec <gclkEnable+0x28>)
     5ce:	4002      	ands	r2, r0
     5d0:	431a      	orrs	r2, r3
     5d2:	4c07      	ldr	r4, [pc, #28]	; (5f0 <gclkEnable+0x2c>)
     5d4:	60a2      	str	r2, [r4, #8]
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     5d6:	0209      	lsls	r1, r1, #8
     5d8:	20f8      	movs	r0, #248	; 0xf8
     5da:	0140      	lsls	r0, r0, #5
     5dc:	4001      	ands	r1, r0
     5de:	2080      	movs	r0, #128	; 0x80
     5e0:	0240      	lsls	r0, r0, #9
     5e2:	4308      	orrs	r0, r1
     5e4:	4318      	orrs	r0, r3
     5e6:	6060      	str	r0, [r4, #4]
}
     5e8:	bd10      	pop	{r4, pc}
     5ea:	46c0      	nop			; (mov r8, r8)
     5ec:	00ffff00 	.word	0x00ffff00
     5f0:	40000c00 	.word	0x40000c00

000005f4 <delayInit>:


void delayInit(void) {
    cycles_per_ms = 48000000UL;
    cycles_per_ms /= 1000;
     5f4:	4b04      	ldr	r3, [pc, #16]	; (608 <delayInit+0x14>)
     5f6:	4a05      	ldr	r2, [pc, #20]	; (60c <delayInit+0x18>)
     5f8:	601a      	str	r2, [r3, #0]
    cycles_per_us = cycles_per_ms / 1000;
     5fa:	2230      	movs	r2, #48	; 0x30
     5fc:	605a      	str	r2, [r3, #4]

    SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     5fe:	3a2b      	subs	r2, #43	; 0x2b
     600:	4b03      	ldr	r3, [pc, #12]	; (610 <delayInit+0x1c>)
     602:	601a      	str	r2, [r3, #0]
}
     604:	4770      	bx	lr
     606:	46c0      	nop			; (mov r8, r8)
     608:	20000004 	.word	0x20000004
     60c:	0000bb80 	.word	0x0000bb80
     610:	e000e010 	.word	0xe000e010

00000614 <delay_us>:
/**
 * \brief Delay loop to delay at least n number of microseconds
 *
 * \param n  Number of microseconds to wait
 */
void delay_us(uint32_t n) {
     614:	b530      	push	{r4, r5, lr}
    while (n--) {
        /* Devide up to blocks of 10u */
        delay_cycles(cycles_per_us);
     616:	4b08      	ldr	r3, [pc, #32]	; (638 <delay_us+0x24>)
     618:	685c      	ldr	r4, [r3, #4]


static inline void delay_cycles(
const uint32_t n) {
	if (n > 0) {
		SysTick->LOAD = n;
     61a:	4a08      	ldr	r2, [pc, #32]	; (63c <delay_us+0x28>)
		SysTick->VAL = 0;
     61c:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     61e:	2180      	movs	r1, #128	; 0x80
     620:	0249      	lsls	r1, r1, #9
    while (n--) {
     622:	3801      	subs	r0, #1
     624:	d307      	bcc.n	636 <delay_us+0x22>
	if (n > 0) {
     626:	2c00      	cmp	r4, #0
     628:	d0fb      	beq.n	622 <delay_us+0xe>
		SysTick->LOAD = n;
     62a:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     62c:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     62e:	6813      	ldr	r3, [r2, #0]
     630:	420b      	tst	r3, r1
     632:	d0fc      	beq.n	62e <delay_us+0x1a>
     634:	e7f5      	b.n	622 <delay_us+0xe>
    }
}
     636:	bd30      	pop	{r4, r5, pc}
     638:	20000004 	.word	0x20000004
     63c:	e000e010 	.word	0xe000e010

00000640 <delay_ms>:
/**
 * \brief Delay loop to delay at least n number of milliseconds
 *
 * \param n  Number of milliseconds to wait
 */
void delay_ms(uint32_t n) {
     640:	b530      	push	{r4, r5, lr}
    while (n--) {
        /* Devide up to blocks of 1ms */
        delay_cycles(cycles_per_ms);
     642:	4b08      	ldr	r3, [pc, #32]	; (664 <delay_ms+0x24>)
     644:	681c      	ldr	r4, [r3, #0]
		SysTick->LOAD = n;
     646:	4a08      	ldr	r2, [pc, #32]	; (668 <delay_ms+0x28>)
		SysTick->VAL = 0;
     648:	2500      	movs	r5, #0
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     64a:	2180      	movs	r1, #128	; 0x80
     64c:	0249      	lsls	r1, r1, #9
    while (n--) {
     64e:	3801      	subs	r0, #1
     650:	d307      	bcc.n	662 <delay_ms+0x22>
	if (n > 0) {
     652:	2c00      	cmp	r4, #0
     654:	d0fb      	beq.n	64e <delay_ms+0xe>
		SysTick->LOAD = n;
     656:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     658:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     65a:	6813      	ldr	r3, [r2, #0]
     65c:	420b      	tst	r3, r1
     65e:	d0fc      	beq.n	65a <delay_ms+0x1a>
     660:	e7f5      	b.n	64e <delay_ms+0xe>
    }
     662:	bd30      	pop	{r4, r5, pc}
     664:	20000004 	.word	0x20000004
     668:	e000e010 	.word	0xe000e010

0000066c <dmaInit>:
#include <util.h>

DMA_DESC_ALIGN DmacDescriptor dma_descriptors[12];
DMA_DESC_ALIGN DmacDescriptor dma_descriptors_wb[12];

void dmaInit() {
     66c:	b570      	push	{r4, r5, r6, lr}
	memset(&dma_descriptors, 0, sizeof(dma_descriptors));
     66e:	4d11      	ldr	r5, [pc, #68]	; (6b4 <dmaInit+0x48>)
     670:	22c0      	movs	r2, #192	; 0xc0
     672:	2100      	movs	r1, #0
     674:	0028      	movs	r0, r5
     676:	4e10      	ldr	r6, [pc, #64]	; (6b8 <dmaInit+0x4c>)
     678:	47b0      	blx	r6
	memset(&dma_descriptors_wb, 0, sizeof(dma_descriptors_wb));
     67a:	4c10      	ldr	r4, [pc, #64]	; (6bc <dmaInit+0x50>)
     67c:	22c0      	movs	r2, #192	; 0xc0
     67e:	2100      	movs	r1, #0
     680:	0020      	movs	r0, r4
     682:	47b0      	blx	r6

	PM->AHBMASK.reg |= PM_AHBMASK_DMAC;
     684:	4b0e      	ldr	r3, [pc, #56]	; (6c0 <dmaInit+0x54>)
     686:	695a      	ldr	r2, [r3, #20]
     688:	2120      	movs	r1, #32
     68a:	430a      	orrs	r2, r1
     68c:	615a      	str	r2, [r3, #20]
	PM->APBBMASK.reg |= PM_APBBMASK_DMAC;
     68e:	69da      	ldr	r2, [r3, #28]
     690:	3910      	subs	r1, #16
     692:	430a      	orrs	r2, r1
     694:	61da      	str	r2, [r3, #28]

	DMAC->CTRL.bit.DMAENABLE = 0;
     696:	4b0b      	ldr	r3, [pc, #44]	; (6c4 <dmaInit+0x58>)
     698:	881a      	ldrh	r2, [r3, #0]
     69a:	390e      	subs	r1, #14
     69c:	438a      	bics	r2, r1
     69e:	801a      	strh	r2, [r3, #0]
	DMAC->CTRL.bit.SWRST = 1;
     6a0:	881a      	ldrh	r2, [r3, #0]
     6a2:	2101      	movs	r1, #1
     6a4:	430a      	orrs	r2, r1
     6a6:	801a      	strh	r2, [r3, #0]

	DMAC->BASEADDR.reg = (unsigned) &dma_descriptors;
     6a8:	635d      	str	r5, [r3, #52]	; 0x34
	DMAC->WRBADDR.reg = (unsigned) &dma_descriptors_wb;
     6aa:	639c      	str	r4, [r3, #56]	; 0x38

	DMAC->CTRL.reg = DMAC_CTRL_DMAENABLE | DMAC_CTRL_LVLEN(0xf);
     6ac:	4a06      	ldr	r2, [pc, #24]	; (6c8 <dmaInit+0x5c>)
     6ae:	801a      	strh	r2, [r3, #0]
}
     6b0:	bd70      	pop	{r4, r5, r6, pc}
     6b2:	46c0      	nop			; (mov r8, r8)
     6b4:	20000520 	.word	0x20000520
     6b8:	00001b3d 	.word	0x00001b3d
     6bc:	20000460 	.word	0x20000460
     6c0:	40000400 	.word	0x40000400
     6c4:	41004800 	.word	0x41004800
     6c8:	00000f02 	.word	0x00000f02

000006cc <flight>:
#include <util.h>

enum flight_state my_flight_state; // current flight state.


void flight() {
     6cc:	b510      	push	{r4, lr}

    delay_ms(1);
     6ce:	2001      	movs	r0, #1
     6d0:	4b02      	ldr	r3, [pc, #8]	; (6dc <flight+0x10>)
     6d2:	4798      	blx	r3

    my_flight_state = flightStatrup;
     6d4:	2200      	movs	r2, #0
     6d6:	4b02      	ldr	r3, [pc, #8]	; (6e0 <flight+0x14>)
     6d8:	701a      	strb	r2, [r3, #0]

        break;
    }


     6da:	bd10      	pop	{r4, pc}
     6dc:	00000641 	.word	0x00000641
     6e0:	200005e0 	.word	0x200005e0

000006e4 <readMS5803AdcResults>:
#include <MS5803.h>
#include <boardDefines.h>
#include <math.h>


u32_t readMS5803AdcResults() {
     6e4:	b5f0      	push	{r4, r5, r6, r7, lr}
     6e6:	46c6      	mov	lr, r8
     6e8:	b500      	push	{lr}
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     6ea:	4f0e      	ldr	r7, [pc, #56]	; (724 <readMS5803AdcResults+0x40>)
     6ec:	2480      	movs	r4, #128	; 0x80
     6ee:	01e4      	lsls	r4, r4, #7
     6f0:	617c      	str	r4, [r7, #20]

    u8_t dummy_tx = 0xFF;
    u8_t dummy_rx;

    pinLow(cs_baro);
    dummy_rx = spiDataTransfer(SPI1, cmdAdcRead_);
     6f2:	2100      	movs	r1, #0
     6f4:	2002      	movs	r0, #2
     6f6:	4d0c      	ldr	r5, [pc, #48]	; (728 <readMS5803AdcResults+0x44>)
     6f8:	47a8      	blx	r5
    u8_t _byte1 = spiDataTransfer(SPI1,dummy_tx);
     6fa:	21ff      	movs	r1, #255	; 0xff
     6fc:	2002      	movs	r0, #2
     6fe:	47a8      	blx	r5
     700:	4680      	mov	r8, r0
    u8_t _byte2 = spiDataTransfer(SPI1,dummy_tx);
     702:	21ff      	movs	r1, #255	; 0xff
     704:	2002      	movs	r0, #2
     706:	47a8      	blx	r5
     708:	0006      	movs	r6, r0
    u8_t _byte3 = spiDataTransfer(SPI1,dummy_tx);
     70a:	21ff      	movs	r1, #255	; 0xff
     70c:	2002      	movs	r0, #2
     70e:	47a8      	blx	r5
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     710:	61bc      	str	r4, [r7, #24]
    pinHigh(cs_baro);

    u32_t _receive = (_byte1 << 16) | (_byte2 << 8) | (_byte3);
     712:	4643      	mov	r3, r8
     714:	041c      	lsls	r4, r3, #16
     716:	0236      	lsls	r6, r6, #8
     718:	4334      	orrs	r4, r6
     71a:	4320      	orrs	r0, r4
    return _receive;
}
     71c:	bc04      	pop	{r2}
     71e:	4690      	mov	r8, r2
     720:	bdf0      	pop	{r4, r5, r6, r7, pc}
     722:	46c0      	nop			; (mov r8, r8)
     724:	41004400 	.word	0x41004400
     728:	00000c2d 	.word	0x00000c2d

0000072c <ConvertPressureTemperature>:

void ConvertPressureTemperature(Barometer *my_barometer) {
     72c:	b5f0      	push	{r4, r5, r6, r7, lr}
     72e:	46ce      	mov	lr, r9
     730:	4647      	mov	r7, r8
     732:	b580      	push	{r7, lr}
     734:	b08b      	sub	sp, #44	; 0x2c
     736:	0007      	movs	r7, r0
    volatile const u16_t C1 = my_barometer->coefficients_[0];
     738:	8803      	ldrh	r3, [r0, #0]
     73a:	251e      	movs	r5, #30
     73c:	aa02      	add	r2, sp, #8
     73e:	4694      	mov	ip, r2
     740:	4465      	add	r5, ip
     742:	802b      	strh	r3, [r5, #0]
    volatile const u16_t C2 = my_barometer->coefficients_[1];
     744:	8843      	ldrh	r3, [r0, #2]
     746:	8393      	strh	r3, [r2, #28]
    volatile const u16_t C3 = my_barometer->coefficients_[2];
     748:	8883      	ldrh	r3, [r0, #4]
     74a:	8353      	strh	r3, [r2, #26]
    volatile const u16_t C4 = my_barometer->coefficients_[3];
     74c:	88c3      	ldrh	r3, [r0, #6]
     74e:	ae08      	add	r6, sp, #32
     750:	8033      	strh	r3, [r6, #0]
    volatile const u16_t C5 = my_barometer->coefficients_[4];
     752:	8903      	ldrh	r3, [r0, #8]
     754:	2216      	movs	r2, #22
     756:	4462      	add	r2, ip
     758:	8013      	strh	r3, [r2, #0]
    volatile const u16_t C6 = my_barometer->coefficients_[5];
     75a:	8941      	ldrh	r1, [r0, #10]
     75c:	ab07      	add	r3, sp, #28
     75e:	8019      	strh	r1, [r3, #0]

    // calculate 1st order pressure and temperature (MS5607 1st order algorithm)
    const  int32_t dT = (my_barometer->rawTempatureData) - ((int32_t)C5 << 8);
     760:	8814      	ldrh	r4, [r2, #0]
     762:	0224      	lsls	r4, r4, #8
     764:	6902      	ldr	r2, [r0, #16]
     766:	1b14      	subs	r4, r2, r4
    my_barometer->temperatureCelcus  = 2000 + (((int64_t)dT * C6) >> 32) ;
     768:	17e2      	asrs	r2, r4, #31
     76a:	0011      	movs	r1, r2
     76c:	8818      	ldrh	r0, [r3, #0]
     76e:	b280      	uxth	r0, r0
     770:	4b2a      	ldr	r3, [pc, #168]	; (81c <ConvertPressureTemperature+0xf0>)
     772:	4699      	mov	r9, r3
     774:	0022      	movs	r2, r4
     776:	9101      	str	r1, [sp, #4]
     778:	000b      	movs	r3, r1
     77a:	2100      	movs	r1, #0
     77c:	47c8      	blx	r9
     77e:	23fa      	movs	r3, #250	; 0xfa
     780:	00db      	lsls	r3, r3, #3
     782:	469c      	mov	ip, r3
     784:	4461      	add	r1, ip
     786:	6179      	str	r1, [r7, #20]

    volatile const  int64_t OFF   = ((int64_t)C2 << 16) + (((C4 * (int64_t)dT)) >> 7);
     788:	ab02      	add	r3, sp, #8
     78a:	8b9b      	ldrh	r3, [r3, #28]
     78c:	b29b      	uxth	r3, r3
     78e:	4698      	mov	r8, r3
     790:	8830      	ldrh	r0, [r6, #0]
     792:	b280      	uxth	r0, r0
     794:	0022      	movs	r2, r4
     796:	9b01      	ldr	r3, [sp, #4]
     798:	2100      	movs	r1, #0
     79a:	47c8      	blx	r9
     79c:	064e      	lsls	r6, r1, #25
     79e:	09c2      	lsrs	r2, r0, #7
     7a0:	4332      	orrs	r2, r6
     7a2:	11cb      	asrs	r3, r1, #7
     7a4:	2100      	movs	r1, #0
     7a6:	4646      	mov	r6, r8
     7a8:	0430      	lsls	r0, r6, #16
     7aa:	1812      	adds	r2, r2, r0
     7ac:	414b      	adcs	r3, r1
     7ae:	9204      	str	r2, [sp, #16]
     7b0:	9305      	str	r3, [sp, #20]
    volatile const  int64_t SENS  =  ((int64_t)C1 << 15) + (((C3 * (int64_t)dT)) >> 8);
     7b2:	882d      	ldrh	r5, [r5, #0]
     7b4:	b2ad      	uxth	r5, r5
     7b6:	aa02      	add	r2, sp, #8
     7b8:	8b50      	ldrh	r0, [r2, #26]
     7ba:	b280      	uxth	r0, r0
     7bc:	0022      	movs	r2, r4
     7be:	9b01      	ldr	r3, [sp, #4]
     7c0:	2100      	movs	r1, #0
     7c2:	47c8      	blx	r9
     7c4:	060c      	lsls	r4, r1, #24
     7c6:	0a02      	lsrs	r2, r0, #8
     7c8:	4322      	orrs	r2, r4
     7ca:	120b      	asrs	r3, r1, #8
     7cc:	2100      	movs	r1, #0
     7ce:	03e8      	lsls	r0, r5, #15
     7d0:	1812      	adds	r2, r2, r0
     7d2:	414b      	adcs	r3, r1
     7d4:	9202      	str	r2, [sp, #8]
     7d6:	9303      	str	r3, [sp, #12]
    my_barometer->pressureMbar = (((my_barometer->rawPressureData * SENS) / 2097152) - OFF) / 32768;
     7d8:	9a02      	ldr	r2, [sp, #8]
     7da:	9b03      	ldr	r3, [sp, #12]
     7dc:	9c04      	ldr	r4, [sp, #16]
     7de:	9d05      	ldr	r5, [sp, #20]
     7e0:	68f8      	ldr	r0, [r7, #12]
     7e2:	2100      	movs	r1, #0
     7e4:	47c8      	blx	r9
     7e6:	17ce      	asrs	r6, r1, #31
     7e8:	02f6      	lsls	r6, r6, #11
     7ea:	0af2      	lsrs	r2, r6, #11
     7ec:	2300      	movs	r3, #0
     7ee:	1880      	adds	r0, r0, r2
     7f0:	4159      	adcs	r1, r3
     7f2:	02ce      	lsls	r6, r1, #11
     7f4:	0d42      	lsrs	r2, r0, #21
     7f6:	4332      	orrs	r2, r6
     7f8:	154b      	asrs	r3, r1, #21
     7fa:	1b12      	subs	r2, r2, r4
     7fc:	41ab      	sbcs	r3, r5
     7fe:	17dc      	asrs	r4, r3, #31
     800:	0464      	lsls	r4, r4, #17
     802:	0c60      	lsrs	r0, r4, #17
     804:	2100      	movs	r1, #0
     806:	1880      	adds	r0, r0, r2
     808:	4159      	adcs	r1, r3
     80a:	044b      	lsls	r3, r1, #17
     80c:	0bc0      	lsrs	r0, r0, #15
     80e:	4318      	orrs	r0, r3
     810:	61f8      	str	r0, [r7, #28]
}
     812:	b00b      	add	sp, #44	; 0x2c
     814:	bc0c      	pop	{r2, r3}
     816:	4690      	mov	r8, r2
     818:	4699      	mov	r9, r3
     81a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     81c:	00000c49 	.word	0x00000c49

00000820 <pascalToCent>:
    double altFeet = (1-pow((my_barometer->pressurePa/1013.25),(0.190284)))*145366.45;
    my_barometer->heightFeet = (float)altFeet;

}

void pascalToCent(Barometer *my_barometer) {
     820:	b570      	push	{r4, r5, r6, lr}
     822:	0004      	movs	r4, r0
        748275, 767202, 786555, 806356, 826627,
        847395, 868688, 890537, 912974, 936037,
        959766, 984206
    };

    my_barometer->pressurePa = my_barometer->pressureMbar *1;
     824:	69c2      	ldr	r2, [r0, #28]
     826:	6182      	str	r2, [r0, #24]

    if (my_barometer->pressurePa > PA_INIT)
     828:	4b0f      	ldr	r3, [pc, #60]	; (868 <pascalToCent+0x48>)
     82a:	429a      	cmp	r2, r3
     82c:	d816      	bhi.n	85c <pascalToCent+0x3c>
        my_barometer->heightCm = lookupTable[0];
    else {
        const int32_t inx = (PA_INIT - my_barometer->pressurePa) >> 10;
     82e:	4b0e      	ldr	r3, [pc, #56]	; (868 <pascalToCent+0x48>)
     830:	1a9b      	subs	r3, r3, r2
     832:	0a9b      	lsrs	r3, r3, #10
        if (inx >= PZLUT_ENTRIES - 1)
     834:	2b4b      	cmp	r3, #75	; 0x4b
     836:	dc14      	bgt.n	862 <pascalToCent+0x42>
            my_barometer->heightCm = lookupTable[PZLUT_ENTRIES - 1];
        else {
            const int32_t pa1 = PA_INIT - (inx << 10);
            const int32_t z1 = lookupTable[inx];
     838:	4e0c      	ldr	r6, [pc, #48]	; (86c <pascalToCent+0x4c>)
     83a:	0099      	lsls	r1, r3, #2
     83c:	598d      	ldr	r5, [r1, r6]
            const int32_t pa1 = PA_INIT - (inx << 10);
     83e:	0298      	lsls	r0, r3, #10
     840:	4909      	ldr	r1, [pc, #36]	; (868 <pascalToCent+0x48>)
     842:	1a09      	subs	r1, r1, r0
            const int32_t z2 = lookupTable[inx + 1];
            my_barometer->heightCm = (z1 + (((pa1 - my_barometer->pressurePa) * (z2 - z1)) >> 10));
     844:	1a8a      	subs	r2, r1, r2
            const int32_t z2 = lookupTable[inx + 1];
     846:	3301      	adds	r3, #1
     848:	009b      	lsls	r3, r3, #2
            my_barometer->heightCm = (z1 + (((pa1 - my_barometer->pressurePa) * (z2 - z1)) >> 10));
     84a:	5998      	ldr	r0, [r3, r6]
     84c:	1b40      	subs	r0, r0, r5
     84e:	4350      	muls	r0, r2
     850:	0a80      	lsrs	r0, r0, #10
     852:	1940      	adds	r0, r0, r5
     854:	4b06      	ldr	r3, [pc, #24]	; (870 <pascalToCent+0x50>)
     856:	4798      	blx	r3
     858:	6220      	str	r0, [r4, #32]
        }
    }
}
     85a:	e001      	b.n	860 <pascalToCent+0x40>
        my_barometer->heightCm = lookupTable[0];
     85c:	4b05      	ldr	r3, [pc, #20]	; (874 <pascalToCent+0x54>)
     85e:	6203      	str	r3, [r0, #32]
}
     860:	bd70      	pop	{r4, r5, r6, pc}
            my_barometer->heightCm = lookupTable[PZLUT_ENTRIES - 1];
     862:	4b05      	ldr	r3, [pc, #20]	; (878 <pascalToCent+0x58>)
     864:	6203      	str	r3, [r0, #32]
     866:	e7fb      	b.n	860 <pascalToCent+0x40>
     868:	000199cc 	.word	0x000199cc
     86c:	00001d08 	.word	0x00001d08
     870:	000012f1 	.word	0x000012f1
     874:	c6e5c000 	.word	0xc6e5c000
     878:	497048e0 	.word	0x497048e0

0000087c <readMS5803Coefficients>:

void readMS5803Coefficients(Barometer *my_barometer) {
     87c:	b5f0      	push	{r4, r5, r6, r7, lr}
     87e:	46de      	mov	lr, fp
     880:	464f      	mov	r7, r9
     882:	4646      	mov	r6, r8
     884:	b5c0      	push	{r6, r7, lr}
     886:	4680      	mov	r8, r0
     888:	24a2      	movs	r4, #162	; 0xa2

    u8_t dummy_tx = 0xFF;
    u8_t dummy_rx;

    for (u8_t coeff_num = 0; coeff_num < 6 ; ++coeff_num ) {
        delay_us(600);
     88a:	4e15      	ldr	r6, [pc, #84]	; (8e0 <readMS5803Coefficients+0x64>)
        u8_t _cmd = MS5803_CMD_PROM_READ + ((coeff_num+1)*2);
        delay_us(600);
        pinLow(cs_baro);
        dummy_rx = spiDataTransfer(SPI1, _cmd);
     88c:	4f15      	ldr	r7, [pc, #84]	; (8e4 <readMS5803Coefficients+0x68>)
        delay_us(600);
     88e:	2096      	movs	r0, #150	; 0x96
     890:	0080      	lsls	r0, r0, #2
     892:	47b0      	blx	r6
        delay_us(600);
     894:	2096      	movs	r0, #150	; 0x96
     896:	0080      	lsls	r0, r0, #2
     898:	47b0      	blx	r6
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     89a:	4d13      	ldr	r5, [pc, #76]	; (8e8 <readMS5803Coefficients+0x6c>)
     89c:	2380      	movs	r3, #128	; 0x80
     89e:	01db      	lsls	r3, r3, #7
     8a0:	469b      	mov	fp, r3
     8a2:	616b      	str	r3, [r5, #20]
        dummy_rx = spiDataTransfer(SPI1, _cmd);
     8a4:	0021      	movs	r1, r4
     8a6:	2002      	movs	r0, #2
     8a8:	47b8      	blx	r7
        u8_t _byte1 = spiDataTransfer(SPI1,dummy_tx);
     8aa:	21ff      	movs	r1, #255	; 0xff
     8ac:	2002      	movs	r0, #2
     8ae:	47b8      	blx	r7
     8b0:	4681      	mov	r9, r0
        u8_t _byte2 = spiDataTransfer(SPI1,dummy_tx);
     8b2:	21ff      	movs	r1, #255	; 0xff
     8b4:	2002      	movs	r0, #2
     8b6:	47b8      	blx	r7
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     8b8:	465b      	mov	r3, fp
     8ba:	61ab      	str	r3, [r5, #24]
        pinHigh(cs_baro);
        my_barometer->coefficients_[coeff_num] = (_byte1 << 8) | _byte2;
     8bc:	464b      	mov	r3, r9
     8be:	021d      	lsls	r5, r3, #8
     8c0:	4328      	orrs	r0, r5
     8c2:	4643      	mov	r3, r8
     8c4:	8018      	strh	r0, [r3, #0]
     8c6:	3402      	adds	r4, #2
     8c8:	b2e4      	uxtb	r4, r4
     8ca:	2302      	movs	r3, #2
     8cc:	469c      	mov	ip, r3
     8ce:	44e0      	add	r8, ip
    for (u8_t coeff_num = 0; coeff_num < 6 ; ++coeff_num ) {
     8d0:	2cae      	cmp	r4, #174	; 0xae
     8d2:	d1dc      	bne.n	88e <readMS5803Coefficients+0x12>
    }

}
     8d4:	bc1c      	pop	{r2, r3, r4}
     8d6:	4690      	mov	r8, r2
     8d8:	4699      	mov	r9, r3
     8da:	46a3      	mov	fp, r4
     8dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
     8de:	46c0      	nop			; (mov r8, r8)
     8e0:	00000615 	.word	0x00000615
     8e4:	00000c2d 	.word	0x00000c2d
     8e8:	41004400 	.word	0x41004400

000008ec <initMS5803Barometer>:

void initMS5803Barometer(Barometer *my_barometer) {
     8ec:	b570      	push	{r4, r5, r6, lr}
     8ee:	0004      	movs	r4, r0
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     8f0:	4d0d      	ldr	r5, [pc, #52]	; (928 <initMS5803Barometer+0x3c>)
     8f2:	2680      	movs	r6, #128	; 0x80
     8f4:	01f6      	lsls	r6, r6, #7
     8f6:	616e      	str	r6, [r5, #20]

    u8_t dummy_tx = 0xFF;
    u8_t dummy_rx;

    pinLow(cs_baro);
    dummy_rx = spiDataTransfer(SPI1, MS5803_CMD_RES);
     8f8:	211e      	movs	r1, #30
     8fa:	2002      	movs	r0, #2
     8fc:	4b0b      	ldr	r3, [pc, #44]	; (92c <initMS5803Barometer+0x40>)
     8fe:	4798      	blx	r3
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     900:	61ae      	str	r6, [r5, #24]
    pinHigh(cs_baro);
    delay_ms(200);
     902:	20c8      	movs	r0, #200	; 0xc8
     904:	4b0a      	ldr	r3, [pc, #40]	; (930 <initMS5803Barometer+0x44>)
     906:	4798      	blx	r3
    readMS5803Coefficients(my_barometer);
     908:	0020      	movs	r0, r4
     90a:	4b0a      	ldr	r3, [pc, #40]	; (934 <initMS5803Barometer+0x48>)
     90c:	4798      	blx	r3

    my_barometer->heightCm = 4000;
     90e:	4b0a      	ldr	r3, [pc, #40]	; (938 <initMS5803Barometer+0x4c>)
     910:	6223      	str	r3, [r4, #32]
    my_barometer->pressurePa = 10000;
     912:	4b0a      	ldr	r3, [pc, #40]	; (93c <initMS5803Barometer+0x50>)
     914:	61a3      	str	r3, [r4, #24]
    my_barometer->rawPressureData = 4311550;
     916:	4b0a      	ldr	r3, [pc, #40]	; (940 <initMS5803Barometer+0x54>)
     918:	60e3      	str	r3, [r4, #12]
    my_barometer->rawTempatureData = 8387300;
     91a:	4b0a      	ldr	r3, [pc, #40]	; (944 <initMS5803Barometer+0x58>)
     91c:	6123      	str	r3, [r4, #16]
    my_barometer->temperatureCelcus = 2000;
     91e:	23fa      	movs	r3, #250	; 0xfa
     920:	00db      	lsls	r3, r3, #3
     922:	6163      	str	r3, [r4, #20]




}
     924:	bd70      	pop	{r4, r5, r6, pc}
     926:	46c0      	nop			; (mov r8, r8)
     928:	41004400 	.word	0x41004400
     92c:	00000c2d 	.word	0x00000c2d
     930:	00000641 	.word	0x00000641
     934:	0000087d 	.word	0x0000087d
     938:	457a0000 	.word	0x457a0000
     93c:	00002710 	.word	0x00002710
     940:	0041c9fe 	.word	0x0041c9fe
     944:	007ffae4 	.word	0x007ffae4

00000948 <sampleTick>:
#include <boardDefines.h>
#include <MS5803.h>



void sampleTick(Altimeter *my_altimeter) {
     948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     94a:	46de      	mov	lr, fp
     94c:	4657      	mov	r7, sl
     94e:	464e      	mov	r6, r9
     950:	4645      	mov	r5, r8
     952:	b5e0      	push	{r5, r6, r7, lr}
     954:	0004      	movs	r4, r0

    my_altimeter->batV = (0.001906 * adc_read(senseBat));
     956:	4b6a      	ldr	r3, [pc, #424]	; (b00 <sampleTick+0x1b8>)
     958:	6818      	ldr	r0, [r3, #0]
     95a:	6859      	ldr	r1, [r3, #4]
     95c:	4b69      	ldr	r3, [pc, #420]	; (b04 <sampleTick+0x1bc>)
     95e:	4798      	blx	r3
     960:	4b69      	ldr	r3, [pc, #420]	; (b08 <sampleTick+0x1c0>)
     962:	4798      	blx	r3
     964:	4b69      	ldr	r3, [pc, #420]	; (b0c <sampleTick+0x1c4>)
     966:	4699      	mov	r9, r3
     968:	4a69      	ldr	r2, [pc, #420]	; (b10 <sampleTick+0x1c8>)
     96a:	4b6a      	ldr	r3, [pc, #424]	; (b14 <sampleTick+0x1cc>)
     96c:	47c8      	blx	r9
     96e:	4b6a      	ldr	r3, [pc, #424]	; (b18 <sampleTick+0x1d0>)
     970:	4698      	mov	r8, r3
     972:	4798      	blx	r3
     974:	66a0      	str	r0, [r4, #104]	; 0x68
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     976:	4d69      	ldr	r5, [pc, #420]	; (b1c <sampleTick+0x1d4>)
     978:	2780      	movs	r7, #128	; 0x80
     97a:	01ff      	lsls	r7, r7, #7
     97c:	616f      	str	r7, [r5, #20]

    uint8_t dummy_Tx = 0xFF;
    uint8_t dummy_rx;

    pinLow(cs_baro);
    dummy_rx = spiDataTransfer(SPI1, 0x50);
     97e:	2150      	movs	r1, #80	; 0x50
     980:	2002      	movs	r0, #2
     982:	4e67      	ldr	r6, [pc, #412]	; (b20 <sampleTick+0x1d8>)
     984:	47b0      	blx	r6
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     986:	61af      	str	r7, [r5, #24]
    pinHigh(cs_baro);
    delay_ms(2);
     988:	2002      	movs	r0, #2
     98a:	4b66      	ldr	r3, [pc, #408]	; (b24 <sampleTick+0x1dc>)
     98c:	469b      	mov	fp, r3
     98e:	4798      	blx	r3
    my_altimeter->myBarometer.rawTempatureData = readMS5803AdcResults();
     990:	4b65      	ldr	r3, [pc, #404]	; (b28 <sampleTick+0x1e0>)
     992:	469a      	mov	sl, r3
     994:	4798      	blx	r3
     996:	6120      	str	r0, [r4, #16]
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     998:	616f      	str	r7, [r5, #20]

    pinLow(cs_baro);
    dummy_rx = spiDataTransfer(SPI1, 0x42);
     99a:	2142      	movs	r1, #66	; 0x42
     99c:	2002      	movs	r0, #2
     99e:	47b0      	blx	r6
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     9a0:	61af      	str	r7, [r5, #24]
    pinHigh(cs_baro);
    delay_ms(2);
     9a2:	2002      	movs	r0, #2
     9a4:	47d8      	blx	fp
    my_altimeter->myBarometer.rawPressureData = readMS5803AdcResults();
     9a6:	47d0      	blx	sl
     9a8:	60e0      	str	r0, [r4, #12]
    flight();
     9aa:	4b60      	ldr	r3, [pc, #384]	; (b2c <sampleTick+0x1e4>)
     9ac:	4798      	blx	r3

    ConvertPressureTemperature(&my_altimeter->myBarometer);
     9ae:	0020      	movs	r0, r4
     9b0:	4b5f      	ldr	r3, [pc, #380]	; (b30 <sampleTick+0x1e8>)
     9b2:	4798      	blx	r3
    pascalToCent(&my_altimeter->myBarometer);
     9b4:	0020      	movs	r0, r4
     9b6:	4b5f      	ldr	r3, [pc, #380]	; (b34 <sampleTick+0x1ec>)
     9b8:	4798      	blx	r3
    my_altimeter->myBarometer.heightFeet = 0.03281 * my_altimeter->myBarometer.heightCm;
     9ba:	6a20      	ldr	r0, [r4, #32]
     9bc:	4b5e      	ldr	r3, [pc, #376]	; (b38 <sampleTick+0x1f0>)
     9be:	4798      	blx	r3
     9c0:	4a5e      	ldr	r2, [pc, #376]	; (b3c <sampleTick+0x1f4>)
     9c2:	4b5f      	ldr	r3, [pc, #380]	; (b40 <sampleTick+0x1f8>)
     9c4:	47c8      	blx	r9
     9c6:	47c0      	blx	r8
     9c8:	6260      	str	r0, [r4, #36]	; 0x24
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     9ca:	2780      	movs	r7, #128	; 0x80
     9cc:	037f      	lsls	r7, r7, #13
     9ce:	616f      	str	r7, [r5, #20]

    uint8_t rData;
    uint8_t rData2;

    pinLow(cs_imu);
    dummy_rx = spiDataTransfer(SPI1, ACCEL_XOUT_H);
     9d0:	21ba      	movs	r1, #186	; 0xba
     9d2:	2002      	movs	r0, #2
     9d4:	47b0      	blx	r6
    my_altimeter->myIMU.accelXHigh  = spiDataTransfer(SPI1,dummy_Tx);
     9d6:	21ff      	movs	r1, #255	; 0xff
     9d8:	2002      	movs	r0, #2
     9da:	47b0      	blx	r6
     9dc:	234c      	movs	r3, #76	; 0x4c
     9de:	54e0      	strb	r0, [r4, r3]
    my_altimeter->myIMU.accelXLow  = spiDataTransfer(SPI1,dummy_Tx);
     9e0:	21ff      	movs	r1, #255	; 0xff
     9e2:	2002      	movs	r0, #2
     9e4:	47b0      	blx	r6
     9e6:	234d      	movs	r3, #77	; 0x4d
     9e8:	54e0      	strb	r0, [r4, r3]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     9ea:	61af      	str	r7, [r5, #24]
    pinHigh(cs_imu);

    //check if last bit in second byte is 1 therefor negative number
    int16_t negativex = (my_altimeter->myIMU.accelXLow & (1 <<7)) != 0;
     9ec:	5ce0      	ldrb	r0, [r4, r3]
    if (negativex) {
     9ee:	b243      	sxtb	r3, r0
     9f0:	2b00      	cmp	r3, #0
     9f2:	db66      	blt.n	ac2 <sampleTick+0x17a>
        // if negative then preform 2's complement to int conversion
        my_altimeter->myIMU.accelX = ((my_altimeter->myIMU.accelXLow | ~((1 << 8) - 1)) << 8 ) | my_altimeter->myIMU.accelXHigh;
    } else {
        my_altimeter->myIMU.accelX = (my_altimeter->myIMU.accelXLow << 8) + my_altimeter->myIMU.accelXHigh;
     9f4:	0200      	lsls	r0, r0, #8
     9f6:	234c      	movs	r3, #76	; 0x4c
     9f8:	5ce3      	ldrb	r3, [r4, r3]
     9fa:	18c0      	adds	r0, r0, r3
     9fc:	4b51      	ldr	r3, [pc, #324]	; (b44 <sampleTick+0x1fc>)
     9fe:	4798      	blx	r3
     a00:	62a0      	str	r0, [r4, #40]	; 0x28
    }
    my_altimeter->myIMU.accelX = my_altimeter->myIMU.accelX *0.00006103;
     a02:	6aa0      	ldr	r0, [r4, #40]	; 0x28
     a04:	4b4c      	ldr	r3, [pc, #304]	; (b38 <sampleTick+0x1f0>)
     a06:	4798      	blx	r3
     a08:	4a4f      	ldr	r2, [pc, #316]	; (b48 <sampleTick+0x200>)
     a0a:	4b50      	ldr	r3, [pc, #320]	; (b4c <sampleTick+0x204>)
     a0c:	4d3f      	ldr	r5, [pc, #252]	; (b0c <sampleTick+0x1c4>)
     a0e:	47a8      	blx	r5
     a10:	4b41      	ldr	r3, [pc, #260]	; (b18 <sampleTick+0x1d0>)
     a12:	4798      	blx	r3
     a14:	62a0      	str	r0, [r4, #40]	; 0x28
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     a16:	4e41      	ldr	r6, [pc, #260]	; (b1c <sampleTick+0x1d4>)
     a18:	2780      	movs	r7, #128	; 0x80
     a1a:	037f      	lsls	r7, r7, #13
     a1c:	6177      	str	r7, [r6, #20]



    pinLow(cs_imu);
    dummy_rx = spiDataTransfer(SPI1, ACCEL_YOUT_H);
     a1e:	21bc      	movs	r1, #188	; 0xbc
     a20:	2002      	movs	r0, #2
     a22:	4d3f      	ldr	r5, [pc, #252]	; (b20 <sampleTick+0x1d8>)
     a24:	47a8      	blx	r5
    my_altimeter->myIMU.accelYHigh = spiDataTransfer(SPI1,dummy_Tx);
     a26:	21ff      	movs	r1, #255	; 0xff
     a28:	2002      	movs	r0, #2
     a2a:	47a8      	blx	r5
     a2c:	234e      	movs	r3, #78	; 0x4e
     a2e:	54e0      	strb	r0, [r4, r3]
    my_altimeter->myIMU.accelYLow = spiDataTransfer(SPI1,dummy_Tx);
     a30:	21ff      	movs	r1, #255	; 0xff
     a32:	2002      	movs	r0, #2
     a34:	47a8      	blx	r5
     a36:	234f      	movs	r3, #79	; 0x4f
     a38:	54e0      	strb	r0, [r4, r3]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     a3a:	61b7      	str	r7, [r6, #24]
    pinHigh(cs_imu);

    //check if last bit in second byte is 1 therefor negative number
    int16_t negativey = (my_altimeter->myIMU.accelYLow & (1 <<7)) != 0;
     a3c:	5ce0      	ldrb	r0, [r4, r3]
    if (negativey) {
     a3e:	b243      	sxtb	r3, r0
     a40:	2b00      	cmp	r3, #0
     a42:	db48      	blt.n	ad6 <sampleTick+0x18e>
        // if negative then preform 2's complement to int conversion
        my_altimeter->myIMU.accelY = ((my_altimeter->myIMU.accelYLow | ~((1 << 8) - 1)) << 8 ) | my_altimeter->myIMU.accelYHigh;
    } else {
        my_altimeter->myIMU.accelY = (my_altimeter->myIMU.accelYLow << 8) + my_altimeter->myIMU.accelYHigh;
     a44:	0200      	lsls	r0, r0, #8
     a46:	234e      	movs	r3, #78	; 0x4e
     a48:	5ce3      	ldrb	r3, [r4, r3]
     a4a:	18c0      	adds	r0, r0, r3
     a4c:	4b3d      	ldr	r3, [pc, #244]	; (b44 <sampleTick+0x1fc>)
     a4e:	4798      	blx	r3
     a50:	62e0      	str	r0, [r4, #44]	; 0x2c
    }
    my_altimeter->myIMU.accelY = my_altimeter->myIMU.accelY *0.00006103;
     a52:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
     a54:	4b38      	ldr	r3, [pc, #224]	; (b38 <sampleTick+0x1f0>)
     a56:	4798      	blx	r3
     a58:	4a3b      	ldr	r2, [pc, #236]	; (b48 <sampleTick+0x200>)
     a5a:	4b3c      	ldr	r3, [pc, #240]	; (b4c <sampleTick+0x204>)
     a5c:	4d2b      	ldr	r5, [pc, #172]	; (b0c <sampleTick+0x1c4>)
     a5e:	47a8      	blx	r5
     a60:	4b2d      	ldr	r3, [pc, #180]	; (b18 <sampleTick+0x1d0>)
     a62:	4798      	blx	r3
     a64:	62e0      	str	r0, [r4, #44]	; 0x2c
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     a66:	4e2d      	ldr	r6, [pc, #180]	; (b1c <sampleTick+0x1d4>)
     a68:	2780      	movs	r7, #128	; 0x80
     a6a:	037f      	lsls	r7, r7, #13
     a6c:	6177      	str	r7, [r6, #20]


    pinLow(cs_imu);
    dummy_rx = spiDataTransfer(SPI1, ACCEL_ZOUT_H);
     a6e:	21be      	movs	r1, #190	; 0xbe
     a70:	2002      	movs	r0, #2
     a72:	4d2b      	ldr	r5, [pc, #172]	; (b20 <sampleTick+0x1d8>)
     a74:	47a8      	blx	r5
    my_altimeter->myIMU.accelZHigh = spiDataTransfer(SPI1,dummy_Tx);
     a76:	21ff      	movs	r1, #255	; 0xff
     a78:	2002      	movs	r0, #2
     a7a:	47a8      	blx	r5
     a7c:	2350      	movs	r3, #80	; 0x50
     a7e:	54e0      	strb	r0, [r4, r3]
    my_altimeter->myIMU.accelZLow = spiDataTransfer(SPI1,dummy_Tx);
     a80:	21ff      	movs	r1, #255	; 0xff
     a82:	2002      	movs	r0, #2
     a84:	47a8      	blx	r5
     a86:	2351      	movs	r3, #81	; 0x51
     a88:	54e0      	strb	r0, [r4, r3]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     a8a:	61b7      	str	r7, [r6, #24]
    pinHigh(cs_imu);

    //check if last bit in second byte is 1 therefor negative number
    int16_t negativez = (my_altimeter->myIMU.accelZLow & (1 <<7)) != 0;
     a8c:	5ce0      	ldrb	r0, [r4, r3]
    if (negativez) {
     a8e:	b243      	sxtb	r3, r0
     a90:	2b00      	cmp	r3, #0
     a92:	db2a      	blt.n	aea <sampleTick+0x1a2>
        // if negative then preform 2's complement to int conversion
        my_altimeter->myIMU.accelZ = ((my_altimeter->myIMU.accelZLow | ~((1 << 8) - 1)) << 8 ) | my_altimeter->myIMU.accelZHigh;
    } else {
        my_altimeter->myIMU.accelZ = (my_altimeter->myIMU.accelZLow << 8) + my_altimeter->myIMU.accelZHigh;
     a94:	0200      	lsls	r0, r0, #8
     a96:	2350      	movs	r3, #80	; 0x50
     a98:	5ce3      	ldrb	r3, [r4, r3]
     a9a:	18c0      	adds	r0, r0, r3
     a9c:	4b29      	ldr	r3, [pc, #164]	; (b44 <sampleTick+0x1fc>)
     a9e:	4798      	blx	r3
     aa0:	6320      	str	r0, [r4, #48]	; 0x30
    }
    my_altimeter->myIMU.accelZ = my_altimeter->myIMU.accelZ *0.00006103;
     aa2:	6b20      	ldr	r0, [r4, #48]	; 0x30
     aa4:	4b24      	ldr	r3, [pc, #144]	; (b38 <sampleTick+0x1f0>)
     aa6:	4798      	blx	r3
     aa8:	4a27      	ldr	r2, [pc, #156]	; (b48 <sampleTick+0x200>)
     aaa:	4b28      	ldr	r3, [pc, #160]	; (b4c <sampleTick+0x204>)
     aac:	4d17      	ldr	r5, [pc, #92]	; (b0c <sampleTick+0x1c4>)
     aae:	47a8      	blx	r5
     ab0:	4b19      	ldr	r3, [pc, #100]	; (b18 <sampleTick+0x1d0>)
     ab2:	4798      	blx	r3
     ab4:	6320      	str	r0, [r4, #48]	; 0x30





}
     ab6:	bc3c      	pop	{r2, r3, r4, r5}
     ab8:	4690      	mov	r8, r2
     aba:	4699      	mov	r9, r3
     abc:	46a2      	mov	sl, r4
     abe:	46ab      	mov	fp, r5
     ac0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        my_altimeter->myIMU.accelX = ((my_altimeter->myIMU.accelXLow | ~((1 << 8) - 1)) << 8 ) | my_altimeter->myIMU.accelXHigh;
     ac2:	234c      	movs	r3, #76	; 0x4c
     ac4:	5ce2      	ldrb	r2, [r4, r3]
     ac6:	4b22      	ldr	r3, [pc, #136]	; (b50 <sampleTick+0x208>)
     ac8:	4313      	orrs	r3, r2
     aca:	0200      	lsls	r0, r0, #8
     acc:	4318      	orrs	r0, r3
     ace:	4b1d      	ldr	r3, [pc, #116]	; (b44 <sampleTick+0x1fc>)
     ad0:	4798      	blx	r3
     ad2:	62a0      	str	r0, [r4, #40]	; 0x28
     ad4:	e795      	b.n	a02 <sampleTick+0xba>
        my_altimeter->myIMU.accelY = ((my_altimeter->myIMU.accelYLow | ~((1 << 8) - 1)) << 8 ) | my_altimeter->myIMU.accelYHigh;
     ad6:	234e      	movs	r3, #78	; 0x4e
     ad8:	5ce2      	ldrb	r2, [r4, r3]
     ada:	4b1d      	ldr	r3, [pc, #116]	; (b50 <sampleTick+0x208>)
     adc:	4313      	orrs	r3, r2
     ade:	0200      	lsls	r0, r0, #8
     ae0:	4318      	orrs	r0, r3
     ae2:	4b18      	ldr	r3, [pc, #96]	; (b44 <sampleTick+0x1fc>)
     ae4:	4798      	blx	r3
     ae6:	62e0      	str	r0, [r4, #44]	; 0x2c
     ae8:	e7b3      	b.n	a52 <sampleTick+0x10a>
        my_altimeter->myIMU.accelZ = ((my_altimeter->myIMU.accelZLow | ~((1 << 8) - 1)) << 8 ) | my_altimeter->myIMU.accelZHigh;
     aea:	2350      	movs	r3, #80	; 0x50
     aec:	5ce2      	ldrb	r2, [r4, r3]
     aee:	4b18      	ldr	r3, [pc, #96]	; (b50 <sampleTick+0x208>)
     af0:	4313      	orrs	r3, r2
     af2:	0200      	lsls	r0, r0, #8
     af4:	4318      	orrs	r0, r3
     af6:	4b13      	ldr	r3, [pc, #76]	; (b44 <sampleTick+0x1fc>)
     af8:	4798      	blx	r3
     afa:	6320      	str	r0, [r4, #48]	; 0x30
     afc:	e7d1      	b.n	aa2 <sampleTick+0x15a>
     afe:	46c0      	nop			; (mov r8, r8)
     b00:	00001e3c 	.word	0x00001e3c
     b04:	000004a1 	.word	0x000004a1
     b08:	0000187d 	.word	0x0000187d
     b0c:	0000137d 	.word	0x0000137d
     b10:	eaa2a0a9 	.word	0xeaa2a0a9
     b14:	3f5f3a57 	.word	0x3f5f3a57
     b18:	000019a5 	.word	0x000019a5
     b1c:	41004400 	.word	0x41004400
     b20:	00000c2d 	.word	0x00000c2d
     b24:	00000641 	.word	0x00000641
     b28:	000006e5 	.word	0x000006e5
     b2c:	000006cd 	.word	0x000006cd
     b30:	0000072d 	.word	0x0000072d
     b34:	00000821 	.word	0x00000821
     b38:	00001901 	.word	0x00001901
     b3c:	e9f6a93f 	.word	0xe9f6a93f
     b40:	3fa0cc78 	.word	0x3fa0cc78
     b44:	00001251 	.word	0x00001251
     b48:	d52535ef 	.word	0xd52535ef
     b4c:	3f0fff4e 	.word	0x3f0fff4e
     b50:	ffff0000 	.word	0xffff0000

00000b54 <sercomClockEnable>:
#include <util.h>

void sercomClockEnable(SercomId id, uint32_t clock_channel, u8_t divider) {
     b54:	b570      	push	{r4, r5, r6, lr}
     b56:	0005      	movs	r5, r0
     b58:	000c      	movs	r4, r1
    // prevent this clock write from changing any other clocks
    PM->APBCMASK.reg |= 1 << (PM_APBCMASK_SERCOM0_Pos + id);
     b5a:	490e      	ldr	r1, [pc, #56]	; (b94 <sercomClockEnable+0x40>)
     b5c:	6a08      	ldr	r0, [r1, #32]
     b5e:	1cae      	adds	r6, r5, #2
     b60:	2301      	movs	r3, #1
     b62:	40b3      	lsls	r3, r6
     b64:	4303      	orrs	r3, r0
     b66:	620b      	str	r3, [r1, #32]


    if (clock_channel != 0) {
     b68:	2c00      	cmp	r4, #0
     b6a:	d10d      	bne.n	b88 <sercomClockEnable+0x34>
    }


    // attach clock
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(clock_channel) |
     b6c:	0224      	lsls	r4, r4, #8
     b6e:	23f0      	movs	r3, #240	; 0xf0
     b70:	011b      	lsls	r3, r3, #4
     b72:	401c      	ands	r4, r3
     b74:	2380      	movs	r3, #128	; 0x80
     b76:	01db      	lsls	r3, r3, #7
     b78:	431c      	orrs	r4, r3
                        GCLK_CLKCTRL_ID(SERCOM0_GCLK_ID_CORE + id);
     b7a:	3514      	adds	r5, #20
     b7c:	233f      	movs	r3, #63	; 0x3f
     b7e:	401d      	ands	r5, r3
                        GCLK_CLKCTRL_GEN(clock_channel) |
     b80:	432c      	orrs	r4, r5
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
     b82:	4b05      	ldr	r3, [pc, #20]	; (b98 <sercomClockEnable+0x44>)
     b84:	805c      	strh	r4, [r3, #2]
}
     b86:	bd70      	pop	{r4, r5, r6, pc}
        gclkEnable(clock_channel, GCLK_SOURCE_DFLL48M, divider);
     b88:	2107      	movs	r1, #7
     b8a:	0020      	movs	r0, r4
     b8c:	4b03      	ldr	r3, [pc, #12]	; (b9c <sercomClockEnable+0x48>)
     b8e:	4798      	blx	r3
     b90:	e7ec      	b.n	b6c <sercomClockEnable+0x18>
     b92:	46c0      	nop			; (mov r8, r8)
     b94:	40000400 	.word	0x40000400
     b98:	40000c00 	.word	0x40000c00
     b9c:	000005c5 	.word	0x000005c5

00000ba0 <sercomReset>:
	return (Sercom*) (0x42000800U + id * 1024);
     ba0:	0280      	lsls	r0, r0, #10
     ba2:	4b05      	ldr	r3, [pc, #20]	; (bb8 <sercomReset+0x18>)
     ba4:	469c      	mov	ip, r3
     ba6:	4460      	add	r0, ip


void sercomReset(SercomId id) {
    sercom(id)->SPI.CTRLA.reg = SERCOM_SPI_CTRLA_SWRST;
     ba8:	2301      	movs	r3, #1
     baa:	6003      	str	r3, [r0, #0]
    while(sercom(id)->SPI.CTRLA.reg & SERCOM_SPI_CTRLA_SWRST);
     bac:	2201      	movs	r2, #1
     bae:	6803      	ldr	r3, [r0, #0]
     bb0:	421a      	tst	r2, r3
     bb2:	d1fc      	bne.n	bae <sercomReset+0xe>
}
     bb4:	4770      	bx	lr
     bb6:	46c0      	nop			; (mov r8, r8)
     bb8:	42000800 	.word	0x42000800

00000bbc <sercomSpiMasterInit>:
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
}


void sercomSpiMasterInit(SercomId id, u32_t dipo, u32_t dopo, bool cpol, bool cpha, u8_t baud) {
     bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     bbe:	46ce      	mov	lr, r9
     bc0:	4647      	mov	r7, r8
     bc2:	b580      	push	{r7, lr}
     bc4:	0004      	movs	r4, r0
     bc6:	000e      	movs	r6, r1
     bc8:	4690      	mov	r8, r2
     bca:	001d      	movs	r5, r3
     bcc:	ab08      	add	r3, sp, #32
     bce:	781f      	ldrb	r7, [r3, #0]
     bd0:	ab09      	add	r3, sp, #36	; 0x24
     bd2:	781b      	ldrb	r3, [r3, #0]
     bd4:	4699      	mov	r9, r3
		
    sercomReset(id);
     bd6:	4b13      	ldr	r3, [pc, #76]	; (c24 <sercomSpiMasterInit+0x68>)
     bd8:	4798      	blx	r3
     bda:	02a0      	lsls	r0, r4, #10
     bdc:	4b12      	ldr	r3, [pc, #72]	; (c28 <sercomSpiMasterInit+0x6c>)
     bde:	469c      	mov	ip, r3
     be0:	4460      	add	r0, ip
	
    sercom(id)->SPI.CTRLB.reg
        = SERCOM_SPI_CTRLB_RXEN;
     be2:	2380      	movs	r3, #128	; 0x80
     be4:	029b      	lsls	r3, r3, #10
     be6:	6043      	str	r3, [r0, #4]

    sercom(id)->SPI.BAUD.reg = baud;
     be8:	464b      	mov	r3, r9
     bea:	7303      	strb	r3, [r0, #12]

    sercom(id)->SPI.CTRLA.reg
        = SERCOM_SPI_CTRLA_ENABLE
          | SERCOM_SPI_CTRLA_MODE_SPI_MASTER
          | SERCOM_SPI_CTRLA_DIPO(dipo)
     bec:	0536      	lsls	r6, r6, #20
     bee:	23c0      	movs	r3, #192	; 0xc0
     bf0:	039b      	lsls	r3, r3, #14
     bf2:	401e      	ands	r6, r3
          | SERCOM_SPI_CTRLA_DOPO(dopo)
     bf4:	4643      	mov	r3, r8
     bf6:	041b      	lsls	r3, r3, #16
     bf8:	22c0      	movs	r2, #192	; 0xc0
     bfa:	0292      	lsls	r2, r2, #10
     bfc:	4013      	ands	r3, r2
     bfe:	220e      	movs	r2, #14
     c00:	4313      	orrs	r3, r2
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
     c02:	1e6a      	subs	r2, r5, #1
     c04:	4195      	sbcs	r5, r2
     c06:	076d      	lsls	r5, r5, #29
     c08:	431e      	orrs	r6, r3
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
     c0a:	1e7b      	subs	r3, r7, #1
     c0c:	419f      	sbcs	r7, r3
     c0e:	073f      	lsls	r7, r7, #28
     c10:	4335      	orrs	r5, r6
     c12:	433d      	orrs	r5, r7
        = SERCOM_SPI_CTRLA_ENABLE
     c14:	6005      	str	r5, [r0, #0]
		};
	}
}

static inline void SPI_sync(SercomId id) {
	while  (sercom(id)->SPI.SYNCBUSY.bit.CTRLB);
     c16:	69c3      	ldr	r3, [r0, #28]
     c18:	075b      	lsls	r3, r3, #29
     c1a:	d4fc      	bmi.n	c16 <sercomSpiMasterInit+0x5a>

    SPI_sync(id);
}
     c1c:	bc0c      	pop	{r2, r3}
     c1e:	4690      	mov	r8, r2
     c20:	4699      	mov	r9, r3
     c22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     c24:	00000ba1 	.word	0x00000ba1
     c28:	42000800 	.word	0x42000800

00000c2c <spiDataTransfer>:
	return (Sercom*) (0x42000800U + id * 1024);
     c2c:	0280      	lsls	r0, r0, #10
     c2e:	4b05      	ldr	r3, [pc, #20]	; (c44 <spiDataTransfer+0x18>)
     c30:	469c      	mov	ip, r3
     c32:	4460      	add	r0, ip
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
}

u8_t spiDataTransfer(SercomId id, u8_t data) {
    sercom(id)->SPI.DATA.reg = data;
     c34:	6281      	str	r1, [r0, #40]	; 0x28
    while(sercom(id)->SPI.INTFLAG.bit.RXC == 0);
     c36:	7e03      	ldrb	r3, [r0, #24]
     c38:	075b      	lsls	r3, r3, #29
     c3a:	d5fc      	bpl.n	c36 <spiDataTransfer+0xa>
    return sercom(id)->SPI.DATA.reg;
     c3c:	6a80      	ldr	r0, [r0, #40]	; 0x28
     c3e:	b2c0      	uxtb	r0, r0
}
     c40:	4770      	bx	lr
     c42:	46c0      	nop			; (mov r8, r8)
     c44:	42000800 	.word	0x42000800

00000c48 <__aeabi_lmul>:
     c48:	b5f0      	push	{r4, r5, r6, r7, lr}
     c4a:	46ce      	mov	lr, r9
     c4c:	4647      	mov	r7, r8
     c4e:	0415      	lsls	r5, r2, #16
     c50:	0c2d      	lsrs	r5, r5, #16
     c52:	002e      	movs	r6, r5
     c54:	b580      	push	{r7, lr}
     c56:	0407      	lsls	r7, r0, #16
     c58:	0c14      	lsrs	r4, r2, #16
     c5a:	0c3f      	lsrs	r7, r7, #16
     c5c:	4699      	mov	r9, r3
     c5e:	0c03      	lsrs	r3, r0, #16
     c60:	437e      	muls	r6, r7
     c62:	435d      	muls	r5, r3
     c64:	4367      	muls	r7, r4
     c66:	4363      	muls	r3, r4
     c68:	197f      	adds	r7, r7, r5
     c6a:	0c34      	lsrs	r4, r6, #16
     c6c:	19e4      	adds	r4, r4, r7
     c6e:	469c      	mov	ip, r3
     c70:	42a5      	cmp	r5, r4
     c72:	d903      	bls.n	c7c <__aeabi_lmul+0x34>
     c74:	2380      	movs	r3, #128	; 0x80
     c76:	025b      	lsls	r3, r3, #9
     c78:	4698      	mov	r8, r3
     c7a:	44c4      	add	ip, r8
     c7c:	464b      	mov	r3, r9
     c7e:	4351      	muls	r1, r2
     c80:	4343      	muls	r3, r0
     c82:	0436      	lsls	r6, r6, #16
     c84:	0c36      	lsrs	r6, r6, #16
     c86:	0c25      	lsrs	r5, r4, #16
     c88:	0424      	lsls	r4, r4, #16
     c8a:	4465      	add	r5, ip
     c8c:	19a4      	adds	r4, r4, r6
     c8e:	1859      	adds	r1, r3, r1
     c90:	1949      	adds	r1, r1, r5
     c92:	0020      	movs	r0, r4
     c94:	bc0c      	pop	{r2, r3}
     c96:	4690      	mov	r8, r2
     c98:	4699      	mov	r9, r3
     c9a:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000c9c <__aeabi_fadd>:
     c9c:	b5f0      	push	{r4, r5, r6, r7, lr}
     c9e:	46c6      	mov	lr, r8
     ca0:	024e      	lsls	r6, r1, #9
     ca2:	0247      	lsls	r7, r0, #9
     ca4:	0a76      	lsrs	r6, r6, #9
     ca6:	0a7b      	lsrs	r3, r7, #9
     ca8:	0044      	lsls	r4, r0, #1
     caa:	0fc5      	lsrs	r5, r0, #31
     cac:	00f7      	lsls	r7, r6, #3
     cae:	0048      	lsls	r0, r1, #1
     cb0:	4698      	mov	r8, r3
     cb2:	b500      	push	{lr}
     cb4:	0e24      	lsrs	r4, r4, #24
     cb6:	002a      	movs	r2, r5
     cb8:	00db      	lsls	r3, r3, #3
     cba:	0e00      	lsrs	r0, r0, #24
     cbc:	0fc9      	lsrs	r1, r1, #31
     cbe:	46bc      	mov	ip, r7
     cc0:	428d      	cmp	r5, r1
     cc2:	d067      	beq.n	d94 <__aeabi_fadd+0xf8>
     cc4:	1a22      	subs	r2, r4, r0
     cc6:	2a00      	cmp	r2, #0
     cc8:	dc00      	bgt.n	ccc <__aeabi_fadd+0x30>
     cca:	e0a5      	b.n	e18 <__aeabi_fadd+0x17c>
     ccc:	2800      	cmp	r0, #0
     cce:	d13a      	bne.n	d46 <__aeabi_fadd+0xaa>
     cd0:	2f00      	cmp	r7, #0
     cd2:	d100      	bne.n	cd6 <__aeabi_fadd+0x3a>
     cd4:	e093      	b.n	dfe <__aeabi_fadd+0x162>
     cd6:	1e51      	subs	r1, r2, #1
     cd8:	2900      	cmp	r1, #0
     cda:	d000      	beq.n	cde <__aeabi_fadd+0x42>
     cdc:	e0bc      	b.n	e58 <__aeabi_fadd+0x1bc>
     cde:	2401      	movs	r4, #1
     ce0:	1bdb      	subs	r3, r3, r7
     ce2:	015a      	lsls	r2, r3, #5
     ce4:	d546      	bpl.n	d74 <__aeabi_fadd+0xd8>
     ce6:	019b      	lsls	r3, r3, #6
     ce8:	099e      	lsrs	r6, r3, #6
     cea:	0030      	movs	r0, r6
     cec:	f000 fee4 	bl	1ab8 <__clzsi2>
     cf0:	3805      	subs	r0, #5
     cf2:	4086      	lsls	r6, r0
     cf4:	4284      	cmp	r4, r0
     cf6:	dd00      	ble.n	cfa <__aeabi_fadd+0x5e>
     cf8:	e09d      	b.n	e36 <__aeabi_fadd+0x19a>
     cfa:	1b04      	subs	r4, r0, r4
     cfc:	0032      	movs	r2, r6
     cfe:	2020      	movs	r0, #32
     d00:	3401      	adds	r4, #1
     d02:	40e2      	lsrs	r2, r4
     d04:	1b04      	subs	r4, r0, r4
     d06:	40a6      	lsls	r6, r4
     d08:	0033      	movs	r3, r6
     d0a:	1e5e      	subs	r6, r3, #1
     d0c:	41b3      	sbcs	r3, r6
     d0e:	2400      	movs	r4, #0
     d10:	4313      	orrs	r3, r2
     d12:	075a      	lsls	r2, r3, #29
     d14:	d004      	beq.n	d20 <__aeabi_fadd+0x84>
     d16:	220f      	movs	r2, #15
     d18:	401a      	ands	r2, r3
     d1a:	2a04      	cmp	r2, #4
     d1c:	d000      	beq.n	d20 <__aeabi_fadd+0x84>
     d1e:	3304      	adds	r3, #4
     d20:	015a      	lsls	r2, r3, #5
     d22:	d529      	bpl.n	d78 <__aeabi_fadd+0xdc>
     d24:	3401      	adds	r4, #1
     d26:	2cff      	cmp	r4, #255	; 0xff
     d28:	d100      	bne.n	d2c <__aeabi_fadd+0x90>
     d2a:	e081      	b.n	e30 <__aeabi_fadd+0x194>
     d2c:	002a      	movs	r2, r5
     d2e:	019b      	lsls	r3, r3, #6
     d30:	0a5b      	lsrs	r3, r3, #9
     d32:	b2e4      	uxtb	r4, r4
     d34:	025b      	lsls	r3, r3, #9
     d36:	05e4      	lsls	r4, r4, #23
     d38:	0a58      	lsrs	r0, r3, #9
     d3a:	07d2      	lsls	r2, r2, #31
     d3c:	4320      	orrs	r0, r4
     d3e:	4310      	orrs	r0, r2
     d40:	bc04      	pop	{r2}
     d42:	4690      	mov	r8, r2
     d44:	bdf0      	pop	{r4, r5, r6, r7, pc}
     d46:	2cff      	cmp	r4, #255	; 0xff
     d48:	d0e3      	beq.n	d12 <__aeabi_fadd+0x76>
     d4a:	2180      	movs	r1, #128	; 0x80
     d4c:	0038      	movs	r0, r7
     d4e:	04c9      	lsls	r1, r1, #19
     d50:	4308      	orrs	r0, r1
     d52:	4684      	mov	ip, r0
     d54:	2a1b      	cmp	r2, #27
     d56:	dd00      	ble.n	d5a <__aeabi_fadd+0xbe>
     d58:	e082      	b.n	e60 <__aeabi_fadd+0x1c4>
     d5a:	2020      	movs	r0, #32
     d5c:	4661      	mov	r1, ip
     d5e:	40d1      	lsrs	r1, r2
     d60:	1a82      	subs	r2, r0, r2
     d62:	4660      	mov	r0, ip
     d64:	4090      	lsls	r0, r2
     d66:	0002      	movs	r2, r0
     d68:	1e50      	subs	r0, r2, #1
     d6a:	4182      	sbcs	r2, r0
     d6c:	430a      	orrs	r2, r1
     d6e:	1a9b      	subs	r3, r3, r2
     d70:	015a      	lsls	r2, r3, #5
     d72:	d4b8      	bmi.n	ce6 <__aeabi_fadd+0x4a>
     d74:	075a      	lsls	r2, r3, #29
     d76:	d1ce      	bne.n	d16 <__aeabi_fadd+0x7a>
     d78:	08de      	lsrs	r6, r3, #3
     d7a:	002a      	movs	r2, r5
     d7c:	2cff      	cmp	r4, #255	; 0xff
     d7e:	d13a      	bne.n	df6 <__aeabi_fadd+0x15a>
     d80:	2e00      	cmp	r6, #0
     d82:	d100      	bne.n	d86 <__aeabi_fadd+0xea>
     d84:	e0ae      	b.n	ee4 <__aeabi_fadd+0x248>
     d86:	2380      	movs	r3, #128	; 0x80
     d88:	03db      	lsls	r3, r3, #15
     d8a:	4333      	orrs	r3, r6
     d8c:	025b      	lsls	r3, r3, #9
     d8e:	0a5b      	lsrs	r3, r3, #9
     d90:	24ff      	movs	r4, #255	; 0xff
     d92:	e7cf      	b.n	d34 <__aeabi_fadd+0x98>
     d94:	1a21      	subs	r1, r4, r0
     d96:	2900      	cmp	r1, #0
     d98:	dd52      	ble.n	e40 <__aeabi_fadd+0x1a4>
     d9a:	2800      	cmp	r0, #0
     d9c:	d031      	beq.n	e02 <__aeabi_fadd+0x166>
     d9e:	2cff      	cmp	r4, #255	; 0xff
     da0:	d0b7      	beq.n	d12 <__aeabi_fadd+0x76>
     da2:	2080      	movs	r0, #128	; 0x80
     da4:	003e      	movs	r6, r7
     da6:	04c0      	lsls	r0, r0, #19
     da8:	4306      	orrs	r6, r0
     daa:	46b4      	mov	ip, r6
     dac:	291b      	cmp	r1, #27
     dae:	dd00      	ble.n	db2 <__aeabi_fadd+0x116>
     db0:	e0aa      	b.n	f08 <__aeabi_fadd+0x26c>
     db2:	2620      	movs	r6, #32
     db4:	4660      	mov	r0, ip
     db6:	40c8      	lsrs	r0, r1
     db8:	1a71      	subs	r1, r6, r1
     dba:	4666      	mov	r6, ip
     dbc:	408e      	lsls	r6, r1
     dbe:	0031      	movs	r1, r6
     dc0:	1e4e      	subs	r6, r1, #1
     dc2:	41b1      	sbcs	r1, r6
     dc4:	4301      	orrs	r1, r0
     dc6:	185b      	adds	r3, r3, r1
     dc8:	0159      	lsls	r1, r3, #5
     dca:	d5d3      	bpl.n	d74 <__aeabi_fadd+0xd8>
     dcc:	3401      	adds	r4, #1
     dce:	2cff      	cmp	r4, #255	; 0xff
     dd0:	d100      	bne.n	dd4 <__aeabi_fadd+0x138>
     dd2:	e087      	b.n	ee4 <__aeabi_fadd+0x248>
     dd4:	2201      	movs	r2, #1
     dd6:	4978      	ldr	r1, [pc, #480]	; (fb8 <__aeabi_fadd+0x31c>)
     dd8:	401a      	ands	r2, r3
     dda:	085b      	lsrs	r3, r3, #1
     ddc:	400b      	ands	r3, r1
     dde:	4313      	orrs	r3, r2
     de0:	e797      	b.n	d12 <__aeabi_fadd+0x76>
     de2:	2c00      	cmp	r4, #0
     de4:	d000      	beq.n	de8 <__aeabi_fadd+0x14c>
     de6:	e0a7      	b.n	f38 <__aeabi_fadd+0x29c>
     de8:	2b00      	cmp	r3, #0
     dea:	d000      	beq.n	dee <__aeabi_fadd+0x152>
     dec:	e0b6      	b.n	f5c <__aeabi_fadd+0x2c0>
     dee:	1e3b      	subs	r3, r7, #0
     df0:	d162      	bne.n	eb8 <__aeabi_fadd+0x21c>
     df2:	2600      	movs	r6, #0
     df4:	2200      	movs	r2, #0
     df6:	0273      	lsls	r3, r6, #9
     df8:	0a5b      	lsrs	r3, r3, #9
     dfa:	b2e4      	uxtb	r4, r4
     dfc:	e79a      	b.n	d34 <__aeabi_fadd+0x98>
     dfe:	0014      	movs	r4, r2
     e00:	e787      	b.n	d12 <__aeabi_fadd+0x76>
     e02:	2f00      	cmp	r7, #0
     e04:	d04d      	beq.n	ea2 <__aeabi_fadd+0x206>
     e06:	1e48      	subs	r0, r1, #1
     e08:	2800      	cmp	r0, #0
     e0a:	d157      	bne.n	ebc <__aeabi_fadd+0x220>
     e0c:	4463      	add	r3, ip
     e0e:	2401      	movs	r4, #1
     e10:	015a      	lsls	r2, r3, #5
     e12:	d5af      	bpl.n	d74 <__aeabi_fadd+0xd8>
     e14:	2402      	movs	r4, #2
     e16:	e7dd      	b.n	dd4 <__aeabi_fadd+0x138>
     e18:	2a00      	cmp	r2, #0
     e1a:	d124      	bne.n	e66 <__aeabi_fadd+0x1ca>
     e1c:	1c62      	adds	r2, r4, #1
     e1e:	b2d2      	uxtb	r2, r2
     e20:	2a01      	cmp	r2, #1
     e22:	ddde      	ble.n	de2 <__aeabi_fadd+0x146>
     e24:	1bde      	subs	r6, r3, r7
     e26:	0172      	lsls	r2, r6, #5
     e28:	d535      	bpl.n	e96 <__aeabi_fadd+0x1fa>
     e2a:	1afe      	subs	r6, r7, r3
     e2c:	000d      	movs	r5, r1
     e2e:	e75c      	b.n	cea <__aeabi_fadd+0x4e>
     e30:	002a      	movs	r2, r5
     e32:	2300      	movs	r3, #0
     e34:	e77e      	b.n	d34 <__aeabi_fadd+0x98>
     e36:	0033      	movs	r3, r6
     e38:	4a60      	ldr	r2, [pc, #384]	; (fbc <__aeabi_fadd+0x320>)
     e3a:	1a24      	subs	r4, r4, r0
     e3c:	4013      	ands	r3, r2
     e3e:	e768      	b.n	d12 <__aeabi_fadd+0x76>
     e40:	2900      	cmp	r1, #0
     e42:	d163      	bne.n	f0c <__aeabi_fadd+0x270>
     e44:	1c61      	adds	r1, r4, #1
     e46:	b2c8      	uxtb	r0, r1
     e48:	2801      	cmp	r0, #1
     e4a:	dd4e      	ble.n	eea <__aeabi_fadd+0x24e>
     e4c:	29ff      	cmp	r1, #255	; 0xff
     e4e:	d049      	beq.n	ee4 <__aeabi_fadd+0x248>
     e50:	4463      	add	r3, ip
     e52:	085b      	lsrs	r3, r3, #1
     e54:	000c      	movs	r4, r1
     e56:	e75c      	b.n	d12 <__aeabi_fadd+0x76>
     e58:	2aff      	cmp	r2, #255	; 0xff
     e5a:	d041      	beq.n	ee0 <__aeabi_fadd+0x244>
     e5c:	000a      	movs	r2, r1
     e5e:	e779      	b.n	d54 <__aeabi_fadd+0xb8>
     e60:	2201      	movs	r2, #1
     e62:	1a9b      	subs	r3, r3, r2
     e64:	e784      	b.n	d70 <__aeabi_fadd+0xd4>
     e66:	2c00      	cmp	r4, #0
     e68:	d01d      	beq.n	ea6 <__aeabi_fadd+0x20a>
     e6a:	28ff      	cmp	r0, #255	; 0xff
     e6c:	d022      	beq.n	eb4 <__aeabi_fadd+0x218>
     e6e:	2480      	movs	r4, #128	; 0x80
     e70:	04e4      	lsls	r4, r4, #19
     e72:	4252      	negs	r2, r2
     e74:	4323      	orrs	r3, r4
     e76:	2a1b      	cmp	r2, #27
     e78:	dd00      	ble.n	e7c <__aeabi_fadd+0x1e0>
     e7a:	e08a      	b.n	f92 <__aeabi_fadd+0x2f6>
     e7c:	001c      	movs	r4, r3
     e7e:	2520      	movs	r5, #32
     e80:	40d4      	lsrs	r4, r2
     e82:	1aaa      	subs	r2, r5, r2
     e84:	4093      	lsls	r3, r2
     e86:	1e5a      	subs	r2, r3, #1
     e88:	4193      	sbcs	r3, r2
     e8a:	4323      	orrs	r3, r4
     e8c:	4662      	mov	r2, ip
     e8e:	0004      	movs	r4, r0
     e90:	1ad3      	subs	r3, r2, r3
     e92:	000d      	movs	r5, r1
     e94:	e725      	b.n	ce2 <__aeabi_fadd+0x46>
     e96:	2e00      	cmp	r6, #0
     e98:	d000      	beq.n	e9c <__aeabi_fadd+0x200>
     e9a:	e726      	b.n	cea <__aeabi_fadd+0x4e>
     e9c:	2200      	movs	r2, #0
     e9e:	2400      	movs	r4, #0
     ea0:	e7a9      	b.n	df6 <__aeabi_fadd+0x15a>
     ea2:	000c      	movs	r4, r1
     ea4:	e735      	b.n	d12 <__aeabi_fadd+0x76>
     ea6:	2b00      	cmp	r3, #0
     ea8:	d04d      	beq.n	f46 <__aeabi_fadd+0x2aa>
     eaa:	43d2      	mvns	r2, r2
     eac:	2a00      	cmp	r2, #0
     eae:	d0ed      	beq.n	e8c <__aeabi_fadd+0x1f0>
     eb0:	28ff      	cmp	r0, #255	; 0xff
     eb2:	d1e0      	bne.n	e76 <__aeabi_fadd+0x1da>
     eb4:	4663      	mov	r3, ip
     eb6:	24ff      	movs	r4, #255	; 0xff
     eb8:	000d      	movs	r5, r1
     eba:	e72a      	b.n	d12 <__aeabi_fadd+0x76>
     ebc:	29ff      	cmp	r1, #255	; 0xff
     ebe:	d00f      	beq.n	ee0 <__aeabi_fadd+0x244>
     ec0:	0001      	movs	r1, r0
     ec2:	e773      	b.n	dac <__aeabi_fadd+0x110>
     ec4:	2b00      	cmp	r3, #0
     ec6:	d061      	beq.n	f8c <__aeabi_fadd+0x2f0>
     ec8:	24ff      	movs	r4, #255	; 0xff
     eca:	2f00      	cmp	r7, #0
     ecc:	d100      	bne.n	ed0 <__aeabi_fadd+0x234>
     ece:	e720      	b.n	d12 <__aeabi_fadd+0x76>
     ed0:	2280      	movs	r2, #128	; 0x80
     ed2:	4641      	mov	r1, r8
     ed4:	03d2      	lsls	r2, r2, #15
     ed6:	4211      	tst	r1, r2
     ed8:	d002      	beq.n	ee0 <__aeabi_fadd+0x244>
     eda:	4216      	tst	r6, r2
     edc:	d100      	bne.n	ee0 <__aeabi_fadd+0x244>
     ede:	003b      	movs	r3, r7
     ee0:	24ff      	movs	r4, #255	; 0xff
     ee2:	e716      	b.n	d12 <__aeabi_fadd+0x76>
     ee4:	24ff      	movs	r4, #255	; 0xff
     ee6:	2300      	movs	r3, #0
     ee8:	e724      	b.n	d34 <__aeabi_fadd+0x98>
     eea:	2c00      	cmp	r4, #0
     eec:	d1ea      	bne.n	ec4 <__aeabi_fadd+0x228>
     eee:	2b00      	cmp	r3, #0
     ef0:	d058      	beq.n	fa4 <__aeabi_fadd+0x308>
     ef2:	2f00      	cmp	r7, #0
     ef4:	d100      	bne.n	ef8 <__aeabi_fadd+0x25c>
     ef6:	e70c      	b.n	d12 <__aeabi_fadd+0x76>
     ef8:	4463      	add	r3, ip
     efa:	015a      	lsls	r2, r3, #5
     efc:	d400      	bmi.n	f00 <__aeabi_fadd+0x264>
     efe:	e739      	b.n	d74 <__aeabi_fadd+0xd8>
     f00:	4a2e      	ldr	r2, [pc, #184]	; (fbc <__aeabi_fadd+0x320>)
     f02:	000c      	movs	r4, r1
     f04:	4013      	ands	r3, r2
     f06:	e704      	b.n	d12 <__aeabi_fadd+0x76>
     f08:	2101      	movs	r1, #1
     f0a:	e75c      	b.n	dc6 <__aeabi_fadd+0x12a>
     f0c:	2c00      	cmp	r4, #0
     f0e:	d11e      	bne.n	f4e <__aeabi_fadd+0x2b2>
     f10:	2b00      	cmp	r3, #0
     f12:	d040      	beq.n	f96 <__aeabi_fadd+0x2fa>
     f14:	43c9      	mvns	r1, r1
     f16:	2900      	cmp	r1, #0
     f18:	d00b      	beq.n	f32 <__aeabi_fadd+0x296>
     f1a:	28ff      	cmp	r0, #255	; 0xff
     f1c:	d036      	beq.n	f8c <__aeabi_fadd+0x2f0>
     f1e:	291b      	cmp	r1, #27
     f20:	dc47      	bgt.n	fb2 <__aeabi_fadd+0x316>
     f22:	001c      	movs	r4, r3
     f24:	2620      	movs	r6, #32
     f26:	40cc      	lsrs	r4, r1
     f28:	1a71      	subs	r1, r6, r1
     f2a:	408b      	lsls	r3, r1
     f2c:	1e59      	subs	r1, r3, #1
     f2e:	418b      	sbcs	r3, r1
     f30:	4323      	orrs	r3, r4
     f32:	4463      	add	r3, ip
     f34:	0004      	movs	r4, r0
     f36:	e747      	b.n	dc8 <__aeabi_fadd+0x12c>
     f38:	2b00      	cmp	r3, #0
     f3a:	d118      	bne.n	f6e <__aeabi_fadd+0x2d2>
     f3c:	1e3b      	subs	r3, r7, #0
     f3e:	d02d      	beq.n	f9c <__aeabi_fadd+0x300>
     f40:	000d      	movs	r5, r1
     f42:	24ff      	movs	r4, #255	; 0xff
     f44:	e6e5      	b.n	d12 <__aeabi_fadd+0x76>
     f46:	003b      	movs	r3, r7
     f48:	0004      	movs	r4, r0
     f4a:	000d      	movs	r5, r1
     f4c:	e6e1      	b.n	d12 <__aeabi_fadd+0x76>
     f4e:	28ff      	cmp	r0, #255	; 0xff
     f50:	d01c      	beq.n	f8c <__aeabi_fadd+0x2f0>
     f52:	2480      	movs	r4, #128	; 0x80
     f54:	04e4      	lsls	r4, r4, #19
     f56:	4249      	negs	r1, r1
     f58:	4323      	orrs	r3, r4
     f5a:	e7e0      	b.n	f1e <__aeabi_fadd+0x282>
     f5c:	2f00      	cmp	r7, #0
     f5e:	d100      	bne.n	f62 <__aeabi_fadd+0x2c6>
     f60:	e6d7      	b.n	d12 <__aeabi_fadd+0x76>
     f62:	1bde      	subs	r6, r3, r7
     f64:	0172      	lsls	r2, r6, #5
     f66:	d51f      	bpl.n	fa8 <__aeabi_fadd+0x30c>
     f68:	1afb      	subs	r3, r7, r3
     f6a:	000d      	movs	r5, r1
     f6c:	e6d1      	b.n	d12 <__aeabi_fadd+0x76>
     f6e:	24ff      	movs	r4, #255	; 0xff
     f70:	2f00      	cmp	r7, #0
     f72:	d100      	bne.n	f76 <__aeabi_fadd+0x2da>
     f74:	e6cd      	b.n	d12 <__aeabi_fadd+0x76>
     f76:	2280      	movs	r2, #128	; 0x80
     f78:	4640      	mov	r0, r8
     f7a:	03d2      	lsls	r2, r2, #15
     f7c:	4210      	tst	r0, r2
     f7e:	d0af      	beq.n	ee0 <__aeabi_fadd+0x244>
     f80:	4216      	tst	r6, r2
     f82:	d1ad      	bne.n	ee0 <__aeabi_fadd+0x244>
     f84:	003b      	movs	r3, r7
     f86:	000d      	movs	r5, r1
     f88:	24ff      	movs	r4, #255	; 0xff
     f8a:	e6c2      	b.n	d12 <__aeabi_fadd+0x76>
     f8c:	4663      	mov	r3, ip
     f8e:	24ff      	movs	r4, #255	; 0xff
     f90:	e6bf      	b.n	d12 <__aeabi_fadd+0x76>
     f92:	2301      	movs	r3, #1
     f94:	e77a      	b.n	e8c <__aeabi_fadd+0x1f0>
     f96:	003b      	movs	r3, r7
     f98:	0004      	movs	r4, r0
     f9a:	e6ba      	b.n	d12 <__aeabi_fadd+0x76>
     f9c:	2680      	movs	r6, #128	; 0x80
     f9e:	2200      	movs	r2, #0
     fa0:	03f6      	lsls	r6, r6, #15
     fa2:	e6f0      	b.n	d86 <__aeabi_fadd+0xea>
     fa4:	003b      	movs	r3, r7
     fa6:	e6b4      	b.n	d12 <__aeabi_fadd+0x76>
     fa8:	1e33      	subs	r3, r6, #0
     faa:	d000      	beq.n	fae <__aeabi_fadd+0x312>
     fac:	e6e2      	b.n	d74 <__aeabi_fadd+0xd8>
     fae:	2200      	movs	r2, #0
     fb0:	e721      	b.n	df6 <__aeabi_fadd+0x15a>
     fb2:	2301      	movs	r3, #1
     fb4:	e7bd      	b.n	f32 <__aeabi_fadd+0x296>
     fb6:	46c0      	nop			; (mov r8, r8)
     fb8:	7dffffff 	.word	0x7dffffff
     fbc:	fbffffff 	.word	0xfbffffff

00000fc0 <__aeabi_fdiv>:
     fc0:	b5f0      	push	{r4, r5, r6, r7, lr}
     fc2:	4657      	mov	r7, sl
     fc4:	464e      	mov	r6, r9
     fc6:	46de      	mov	lr, fp
     fc8:	4645      	mov	r5, r8
     fca:	b5e0      	push	{r5, r6, r7, lr}
     fcc:	0244      	lsls	r4, r0, #9
     fce:	0043      	lsls	r3, r0, #1
     fd0:	0fc6      	lsrs	r6, r0, #31
     fd2:	b083      	sub	sp, #12
     fd4:	1c0f      	adds	r7, r1, #0
     fd6:	0a64      	lsrs	r4, r4, #9
     fd8:	0e1b      	lsrs	r3, r3, #24
     fda:	46b2      	mov	sl, r6
     fdc:	d053      	beq.n	1086 <__aeabi_fdiv+0xc6>
     fde:	2bff      	cmp	r3, #255	; 0xff
     fe0:	d027      	beq.n	1032 <__aeabi_fdiv+0x72>
     fe2:	2280      	movs	r2, #128	; 0x80
     fe4:	00e4      	lsls	r4, r4, #3
     fe6:	04d2      	lsls	r2, r2, #19
     fe8:	4314      	orrs	r4, r2
     fea:	227f      	movs	r2, #127	; 0x7f
     fec:	4252      	negs	r2, r2
     fee:	4690      	mov	r8, r2
     ff0:	4498      	add	r8, r3
     ff2:	2300      	movs	r3, #0
     ff4:	4699      	mov	r9, r3
     ff6:	469b      	mov	fp, r3
     ff8:	027d      	lsls	r5, r7, #9
     ffa:	0078      	lsls	r0, r7, #1
     ffc:	0ffb      	lsrs	r3, r7, #31
     ffe:	0a6d      	lsrs	r5, r5, #9
    1000:	0e00      	lsrs	r0, r0, #24
    1002:	9300      	str	r3, [sp, #0]
    1004:	d024      	beq.n	1050 <__aeabi_fdiv+0x90>
    1006:	28ff      	cmp	r0, #255	; 0xff
    1008:	d046      	beq.n	1098 <__aeabi_fdiv+0xd8>
    100a:	2380      	movs	r3, #128	; 0x80
    100c:	2100      	movs	r1, #0
    100e:	00ed      	lsls	r5, r5, #3
    1010:	04db      	lsls	r3, r3, #19
    1012:	431d      	orrs	r5, r3
    1014:	387f      	subs	r0, #127	; 0x7f
    1016:	4647      	mov	r7, r8
    1018:	1a38      	subs	r0, r7, r0
    101a:	464f      	mov	r7, r9
    101c:	430f      	orrs	r7, r1
    101e:	00bf      	lsls	r7, r7, #2
    1020:	46b9      	mov	r9, r7
    1022:	0033      	movs	r3, r6
    1024:	9a00      	ldr	r2, [sp, #0]
    1026:	4f87      	ldr	r7, [pc, #540]	; (1244 <__aeabi_fdiv+0x284>)
    1028:	4053      	eors	r3, r2
    102a:	464a      	mov	r2, r9
    102c:	58ba      	ldr	r2, [r7, r2]
    102e:	9301      	str	r3, [sp, #4]
    1030:	4697      	mov	pc, r2
    1032:	2c00      	cmp	r4, #0
    1034:	d14e      	bne.n	10d4 <__aeabi_fdiv+0x114>
    1036:	2308      	movs	r3, #8
    1038:	4699      	mov	r9, r3
    103a:	33f7      	adds	r3, #247	; 0xf7
    103c:	4698      	mov	r8, r3
    103e:	3bfd      	subs	r3, #253	; 0xfd
    1040:	469b      	mov	fp, r3
    1042:	027d      	lsls	r5, r7, #9
    1044:	0078      	lsls	r0, r7, #1
    1046:	0ffb      	lsrs	r3, r7, #31
    1048:	0a6d      	lsrs	r5, r5, #9
    104a:	0e00      	lsrs	r0, r0, #24
    104c:	9300      	str	r3, [sp, #0]
    104e:	d1da      	bne.n	1006 <__aeabi_fdiv+0x46>
    1050:	2d00      	cmp	r5, #0
    1052:	d126      	bne.n	10a2 <__aeabi_fdiv+0xe2>
    1054:	2000      	movs	r0, #0
    1056:	2101      	movs	r1, #1
    1058:	0033      	movs	r3, r6
    105a:	9a00      	ldr	r2, [sp, #0]
    105c:	4f7a      	ldr	r7, [pc, #488]	; (1248 <__aeabi_fdiv+0x288>)
    105e:	4053      	eors	r3, r2
    1060:	4642      	mov	r2, r8
    1062:	1a10      	subs	r0, r2, r0
    1064:	464a      	mov	r2, r9
    1066:	430a      	orrs	r2, r1
    1068:	0092      	lsls	r2, r2, #2
    106a:	58ba      	ldr	r2, [r7, r2]
    106c:	001d      	movs	r5, r3
    106e:	4697      	mov	pc, r2
    1070:	9b00      	ldr	r3, [sp, #0]
    1072:	002c      	movs	r4, r5
    1074:	469a      	mov	sl, r3
    1076:	468b      	mov	fp, r1
    1078:	465b      	mov	r3, fp
    107a:	2b02      	cmp	r3, #2
    107c:	d131      	bne.n	10e2 <__aeabi_fdiv+0x122>
    107e:	4653      	mov	r3, sl
    1080:	21ff      	movs	r1, #255	; 0xff
    1082:	2400      	movs	r4, #0
    1084:	e038      	b.n	10f8 <__aeabi_fdiv+0x138>
    1086:	2c00      	cmp	r4, #0
    1088:	d117      	bne.n	10ba <__aeabi_fdiv+0xfa>
    108a:	2304      	movs	r3, #4
    108c:	4699      	mov	r9, r3
    108e:	2300      	movs	r3, #0
    1090:	4698      	mov	r8, r3
    1092:	3301      	adds	r3, #1
    1094:	469b      	mov	fp, r3
    1096:	e7af      	b.n	ff8 <__aeabi_fdiv+0x38>
    1098:	20ff      	movs	r0, #255	; 0xff
    109a:	2d00      	cmp	r5, #0
    109c:	d10b      	bne.n	10b6 <__aeabi_fdiv+0xf6>
    109e:	2102      	movs	r1, #2
    10a0:	e7da      	b.n	1058 <__aeabi_fdiv+0x98>
    10a2:	0028      	movs	r0, r5
    10a4:	f000 fd08 	bl	1ab8 <__clzsi2>
    10a8:	1f43      	subs	r3, r0, #5
    10aa:	409d      	lsls	r5, r3
    10ac:	2376      	movs	r3, #118	; 0x76
    10ae:	425b      	negs	r3, r3
    10b0:	1a18      	subs	r0, r3, r0
    10b2:	2100      	movs	r1, #0
    10b4:	e7af      	b.n	1016 <__aeabi_fdiv+0x56>
    10b6:	2103      	movs	r1, #3
    10b8:	e7ad      	b.n	1016 <__aeabi_fdiv+0x56>
    10ba:	0020      	movs	r0, r4
    10bc:	f000 fcfc 	bl	1ab8 <__clzsi2>
    10c0:	1f43      	subs	r3, r0, #5
    10c2:	409c      	lsls	r4, r3
    10c4:	2376      	movs	r3, #118	; 0x76
    10c6:	425b      	negs	r3, r3
    10c8:	1a1b      	subs	r3, r3, r0
    10ca:	4698      	mov	r8, r3
    10cc:	2300      	movs	r3, #0
    10ce:	4699      	mov	r9, r3
    10d0:	469b      	mov	fp, r3
    10d2:	e791      	b.n	ff8 <__aeabi_fdiv+0x38>
    10d4:	230c      	movs	r3, #12
    10d6:	4699      	mov	r9, r3
    10d8:	33f3      	adds	r3, #243	; 0xf3
    10da:	4698      	mov	r8, r3
    10dc:	3bfc      	subs	r3, #252	; 0xfc
    10de:	469b      	mov	fp, r3
    10e0:	e78a      	b.n	ff8 <__aeabi_fdiv+0x38>
    10e2:	2b03      	cmp	r3, #3
    10e4:	d100      	bne.n	10e8 <__aeabi_fdiv+0x128>
    10e6:	e0a5      	b.n	1234 <__aeabi_fdiv+0x274>
    10e8:	4655      	mov	r5, sl
    10ea:	2b01      	cmp	r3, #1
    10ec:	d000      	beq.n	10f0 <__aeabi_fdiv+0x130>
    10ee:	e081      	b.n	11f4 <__aeabi_fdiv+0x234>
    10f0:	2301      	movs	r3, #1
    10f2:	2100      	movs	r1, #0
    10f4:	2400      	movs	r4, #0
    10f6:	402b      	ands	r3, r5
    10f8:	0264      	lsls	r4, r4, #9
    10fa:	05c9      	lsls	r1, r1, #23
    10fc:	0a60      	lsrs	r0, r4, #9
    10fe:	07db      	lsls	r3, r3, #31
    1100:	4308      	orrs	r0, r1
    1102:	4318      	orrs	r0, r3
    1104:	b003      	add	sp, #12
    1106:	bc3c      	pop	{r2, r3, r4, r5}
    1108:	4690      	mov	r8, r2
    110a:	4699      	mov	r9, r3
    110c:	46a2      	mov	sl, r4
    110e:	46ab      	mov	fp, r5
    1110:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1112:	2480      	movs	r4, #128	; 0x80
    1114:	2300      	movs	r3, #0
    1116:	03e4      	lsls	r4, r4, #15
    1118:	21ff      	movs	r1, #255	; 0xff
    111a:	e7ed      	b.n	10f8 <__aeabi_fdiv+0x138>
    111c:	21ff      	movs	r1, #255	; 0xff
    111e:	2400      	movs	r4, #0
    1120:	e7ea      	b.n	10f8 <__aeabi_fdiv+0x138>
    1122:	2301      	movs	r3, #1
    1124:	1a59      	subs	r1, r3, r1
    1126:	291b      	cmp	r1, #27
    1128:	dd66      	ble.n	11f8 <__aeabi_fdiv+0x238>
    112a:	9a01      	ldr	r2, [sp, #4]
    112c:	4013      	ands	r3, r2
    112e:	2100      	movs	r1, #0
    1130:	2400      	movs	r4, #0
    1132:	e7e1      	b.n	10f8 <__aeabi_fdiv+0x138>
    1134:	2380      	movs	r3, #128	; 0x80
    1136:	03db      	lsls	r3, r3, #15
    1138:	421c      	tst	r4, r3
    113a:	d038      	beq.n	11ae <__aeabi_fdiv+0x1ee>
    113c:	421d      	tst	r5, r3
    113e:	d051      	beq.n	11e4 <__aeabi_fdiv+0x224>
    1140:	431c      	orrs	r4, r3
    1142:	0264      	lsls	r4, r4, #9
    1144:	0a64      	lsrs	r4, r4, #9
    1146:	0033      	movs	r3, r6
    1148:	21ff      	movs	r1, #255	; 0xff
    114a:	e7d5      	b.n	10f8 <__aeabi_fdiv+0x138>
    114c:	0163      	lsls	r3, r4, #5
    114e:	016c      	lsls	r4, r5, #5
    1150:	42a3      	cmp	r3, r4
    1152:	d23b      	bcs.n	11cc <__aeabi_fdiv+0x20c>
    1154:	261b      	movs	r6, #27
    1156:	2100      	movs	r1, #0
    1158:	3801      	subs	r0, #1
    115a:	2501      	movs	r5, #1
    115c:	001f      	movs	r7, r3
    115e:	0049      	lsls	r1, r1, #1
    1160:	005b      	lsls	r3, r3, #1
    1162:	2f00      	cmp	r7, #0
    1164:	db01      	blt.n	116a <__aeabi_fdiv+0x1aa>
    1166:	429c      	cmp	r4, r3
    1168:	d801      	bhi.n	116e <__aeabi_fdiv+0x1ae>
    116a:	1b1b      	subs	r3, r3, r4
    116c:	4329      	orrs	r1, r5
    116e:	3e01      	subs	r6, #1
    1170:	2e00      	cmp	r6, #0
    1172:	d1f3      	bne.n	115c <__aeabi_fdiv+0x19c>
    1174:	001c      	movs	r4, r3
    1176:	1e63      	subs	r3, r4, #1
    1178:	419c      	sbcs	r4, r3
    117a:	430c      	orrs	r4, r1
    117c:	0001      	movs	r1, r0
    117e:	317f      	adds	r1, #127	; 0x7f
    1180:	2900      	cmp	r1, #0
    1182:	ddce      	ble.n	1122 <__aeabi_fdiv+0x162>
    1184:	0763      	lsls	r3, r4, #29
    1186:	d004      	beq.n	1192 <__aeabi_fdiv+0x1d2>
    1188:	230f      	movs	r3, #15
    118a:	4023      	ands	r3, r4
    118c:	2b04      	cmp	r3, #4
    118e:	d000      	beq.n	1192 <__aeabi_fdiv+0x1d2>
    1190:	3404      	adds	r4, #4
    1192:	0123      	lsls	r3, r4, #4
    1194:	d503      	bpl.n	119e <__aeabi_fdiv+0x1de>
    1196:	0001      	movs	r1, r0
    1198:	4b2c      	ldr	r3, [pc, #176]	; (124c <__aeabi_fdiv+0x28c>)
    119a:	3180      	adds	r1, #128	; 0x80
    119c:	401c      	ands	r4, r3
    119e:	29fe      	cmp	r1, #254	; 0xfe
    11a0:	dd0d      	ble.n	11be <__aeabi_fdiv+0x1fe>
    11a2:	2301      	movs	r3, #1
    11a4:	9a01      	ldr	r2, [sp, #4]
    11a6:	21ff      	movs	r1, #255	; 0xff
    11a8:	4013      	ands	r3, r2
    11aa:	2400      	movs	r4, #0
    11ac:	e7a4      	b.n	10f8 <__aeabi_fdiv+0x138>
    11ae:	2380      	movs	r3, #128	; 0x80
    11b0:	03db      	lsls	r3, r3, #15
    11b2:	431c      	orrs	r4, r3
    11b4:	0264      	lsls	r4, r4, #9
    11b6:	0a64      	lsrs	r4, r4, #9
    11b8:	0033      	movs	r3, r6
    11ba:	21ff      	movs	r1, #255	; 0xff
    11bc:	e79c      	b.n	10f8 <__aeabi_fdiv+0x138>
    11be:	2301      	movs	r3, #1
    11c0:	9a01      	ldr	r2, [sp, #4]
    11c2:	01a4      	lsls	r4, r4, #6
    11c4:	0a64      	lsrs	r4, r4, #9
    11c6:	b2c9      	uxtb	r1, r1
    11c8:	4013      	ands	r3, r2
    11ca:	e795      	b.n	10f8 <__aeabi_fdiv+0x138>
    11cc:	1b1b      	subs	r3, r3, r4
    11ce:	261a      	movs	r6, #26
    11d0:	2101      	movs	r1, #1
    11d2:	e7c2      	b.n	115a <__aeabi_fdiv+0x19a>
    11d4:	9b00      	ldr	r3, [sp, #0]
    11d6:	468b      	mov	fp, r1
    11d8:	469a      	mov	sl, r3
    11da:	2400      	movs	r4, #0
    11dc:	e74c      	b.n	1078 <__aeabi_fdiv+0xb8>
    11de:	0263      	lsls	r3, r4, #9
    11e0:	d5e5      	bpl.n	11ae <__aeabi_fdiv+0x1ee>
    11e2:	2500      	movs	r5, #0
    11e4:	2480      	movs	r4, #128	; 0x80
    11e6:	03e4      	lsls	r4, r4, #15
    11e8:	432c      	orrs	r4, r5
    11ea:	0264      	lsls	r4, r4, #9
    11ec:	0a64      	lsrs	r4, r4, #9
    11ee:	9b00      	ldr	r3, [sp, #0]
    11f0:	21ff      	movs	r1, #255	; 0xff
    11f2:	e781      	b.n	10f8 <__aeabi_fdiv+0x138>
    11f4:	9501      	str	r5, [sp, #4]
    11f6:	e7c1      	b.n	117c <__aeabi_fdiv+0x1bc>
    11f8:	0023      	movs	r3, r4
    11fa:	2020      	movs	r0, #32
    11fc:	40cb      	lsrs	r3, r1
    11fe:	1a41      	subs	r1, r0, r1
    1200:	408c      	lsls	r4, r1
    1202:	1e61      	subs	r1, r4, #1
    1204:	418c      	sbcs	r4, r1
    1206:	431c      	orrs	r4, r3
    1208:	0763      	lsls	r3, r4, #29
    120a:	d004      	beq.n	1216 <__aeabi_fdiv+0x256>
    120c:	230f      	movs	r3, #15
    120e:	4023      	ands	r3, r4
    1210:	2b04      	cmp	r3, #4
    1212:	d000      	beq.n	1216 <__aeabi_fdiv+0x256>
    1214:	3404      	adds	r4, #4
    1216:	0163      	lsls	r3, r4, #5
    1218:	d505      	bpl.n	1226 <__aeabi_fdiv+0x266>
    121a:	2301      	movs	r3, #1
    121c:	9a01      	ldr	r2, [sp, #4]
    121e:	2101      	movs	r1, #1
    1220:	4013      	ands	r3, r2
    1222:	2400      	movs	r4, #0
    1224:	e768      	b.n	10f8 <__aeabi_fdiv+0x138>
    1226:	2301      	movs	r3, #1
    1228:	9a01      	ldr	r2, [sp, #4]
    122a:	01a4      	lsls	r4, r4, #6
    122c:	0a64      	lsrs	r4, r4, #9
    122e:	4013      	ands	r3, r2
    1230:	2100      	movs	r1, #0
    1232:	e761      	b.n	10f8 <__aeabi_fdiv+0x138>
    1234:	2380      	movs	r3, #128	; 0x80
    1236:	03db      	lsls	r3, r3, #15
    1238:	431c      	orrs	r4, r3
    123a:	0264      	lsls	r4, r4, #9
    123c:	0a64      	lsrs	r4, r4, #9
    123e:	4653      	mov	r3, sl
    1240:	21ff      	movs	r1, #255	; 0xff
    1242:	e759      	b.n	10f8 <__aeabi_fdiv+0x138>
    1244:	00001e44 	.word	0x00001e44
    1248:	00001e84 	.word	0x00001e84
    124c:	f7ffffff 	.word	0xf7ffffff

00001250 <__aeabi_i2f>:
    1250:	b570      	push	{r4, r5, r6, lr}
    1252:	2800      	cmp	r0, #0
    1254:	d030      	beq.n	12b8 <__aeabi_i2f+0x68>
    1256:	17c3      	asrs	r3, r0, #31
    1258:	18c4      	adds	r4, r0, r3
    125a:	405c      	eors	r4, r3
    125c:	0fc5      	lsrs	r5, r0, #31
    125e:	0020      	movs	r0, r4
    1260:	f000 fc2a 	bl	1ab8 <__clzsi2>
    1264:	239e      	movs	r3, #158	; 0x9e
    1266:	1a1b      	subs	r3, r3, r0
    1268:	2b96      	cmp	r3, #150	; 0x96
    126a:	dc0d      	bgt.n	1288 <__aeabi_i2f+0x38>
    126c:	2296      	movs	r2, #150	; 0x96
    126e:	1ad2      	subs	r2, r2, r3
    1270:	4094      	lsls	r4, r2
    1272:	002a      	movs	r2, r5
    1274:	0264      	lsls	r4, r4, #9
    1276:	0a64      	lsrs	r4, r4, #9
    1278:	b2db      	uxtb	r3, r3
    127a:	0264      	lsls	r4, r4, #9
    127c:	05db      	lsls	r3, r3, #23
    127e:	0a60      	lsrs	r0, r4, #9
    1280:	07d2      	lsls	r2, r2, #31
    1282:	4318      	orrs	r0, r3
    1284:	4310      	orrs	r0, r2
    1286:	bd70      	pop	{r4, r5, r6, pc}
    1288:	2b99      	cmp	r3, #153	; 0x99
    128a:	dc19      	bgt.n	12c0 <__aeabi_i2f+0x70>
    128c:	2299      	movs	r2, #153	; 0x99
    128e:	1ad2      	subs	r2, r2, r3
    1290:	2a00      	cmp	r2, #0
    1292:	dd29      	ble.n	12e8 <__aeabi_i2f+0x98>
    1294:	4094      	lsls	r4, r2
    1296:	0022      	movs	r2, r4
    1298:	4c14      	ldr	r4, [pc, #80]	; (12ec <__aeabi_i2f+0x9c>)
    129a:	4014      	ands	r4, r2
    129c:	0751      	lsls	r1, r2, #29
    129e:	d004      	beq.n	12aa <__aeabi_i2f+0x5a>
    12a0:	210f      	movs	r1, #15
    12a2:	400a      	ands	r2, r1
    12a4:	2a04      	cmp	r2, #4
    12a6:	d000      	beq.n	12aa <__aeabi_i2f+0x5a>
    12a8:	3404      	adds	r4, #4
    12aa:	0162      	lsls	r2, r4, #5
    12ac:	d413      	bmi.n	12d6 <__aeabi_i2f+0x86>
    12ae:	01a4      	lsls	r4, r4, #6
    12b0:	0a64      	lsrs	r4, r4, #9
    12b2:	b2db      	uxtb	r3, r3
    12b4:	002a      	movs	r2, r5
    12b6:	e7e0      	b.n	127a <__aeabi_i2f+0x2a>
    12b8:	2200      	movs	r2, #0
    12ba:	2300      	movs	r3, #0
    12bc:	2400      	movs	r4, #0
    12be:	e7dc      	b.n	127a <__aeabi_i2f+0x2a>
    12c0:	2205      	movs	r2, #5
    12c2:	0021      	movs	r1, r4
    12c4:	1a12      	subs	r2, r2, r0
    12c6:	40d1      	lsrs	r1, r2
    12c8:	22b9      	movs	r2, #185	; 0xb9
    12ca:	1ad2      	subs	r2, r2, r3
    12cc:	4094      	lsls	r4, r2
    12ce:	1e62      	subs	r2, r4, #1
    12d0:	4194      	sbcs	r4, r2
    12d2:	430c      	orrs	r4, r1
    12d4:	e7da      	b.n	128c <__aeabi_i2f+0x3c>
    12d6:	4b05      	ldr	r3, [pc, #20]	; (12ec <__aeabi_i2f+0x9c>)
    12d8:	002a      	movs	r2, r5
    12da:	401c      	ands	r4, r3
    12dc:	239f      	movs	r3, #159	; 0x9f
    12de:	01a4      	lsls	r4, r4, #6
    12e0:	1a1b      	subs	r3, r3, r0
    12e2:	0a64      	lsrs	r4, r4, #9
    12e4:	b2db      	uxtb	r3, r3
    12e6:	e7c8      	b.n	127a <__aeabi_i2f+0x2a>
    12e8:	0022      	movs	r2, r4
    12ea:	e7d5      	b.n	1298 <__aeabi_i2f+0x48>
    12ec:	fbffffff 	.word	0xfbffffff

000012f0 <__aeabi_ui2f>:
    12f0:	b510      	push	{r4, lr}
    12f2:	1e04      	subs	r4, r0, #0
    12f4:	d027      	beq.n	1346 <__aeabi_ui2f+0x56>
    12f6:	f000 fbdf 	bl	1ab8 <__clzsi2>
    12fa:	239e      	movs	r3, #158	; 0x9e
    12fc:	1a1b      	subs	r3, r3, r0
    12fe:	2b96      	cmp	r3, #150	; 0x96
    1300:	dc0a      	bgt.n	1318 <__aeabi_ui2f+0x28>
    1302:	2296      	movs	r2, #150	; 0x96
    1304:	1ad2      	subs	r2, r2, r3
    1306:	4094      	lsls	r4, r2
    1308:	0264      	lsls	r4, r4, #9
    130a:	0a64      	lsrs	r4, r4, #9
    130c:	b2db      	uxtb	r3, r3
    130e:	0264      	lsls	r4, r4, #9
    1310:	05db      	lsls	r3, r3, #23
    1312:	0a60      	lsrs	r0, r4, #9
    1314:	4318      	orrs	r0, r3
    1316:	bd10      	pop	{r4, pc}
    1318:	2b99      	cmp	r3, #153	; 0x99
    131a:	dc17      	bgt.n	134c <__aeabi_ui2f+0x5c>
    131c:	2299      	movs	r2, #153	; 0x99
    131e:	1ad2      	subs	r2, r2, r3
    1320:	2a00      	cmp	r2, #0
    1322:	dd27      	ble.n	1374 <__aeabi_ui2f+0x84>
    1324:	4094      	lsls	r4, r2
    1326:	0022      	movs	r2, r4
    1328:	4c13      	ldr	r4, [pc, #76]	; (1378 <__aeabi_ui2f+0x88>)
    132a:	4014      	ands	r4, r2
    132c:	0751      	lsls	r1, r2, #29
    132e:	d004      	beq.n	133a <__aeabi_ui2f+0x4a>
    1330:	210f      	movs	r1, #15
    1332:	400a      	ands	r2, r1
    1334:	2a04      	cmp	r2, #4
    1336:	d000      	beq.n	133a <__aeabi_ui2f+0x4a>
    1338:	3404      	adds	r4, #4
    133a:	0162      	lsls	r2, r4, #5
    133c:	d412      	bmi.n	1364 <__aeabi_ui2f+0x74>
    133e:	01a4      	lsls	r4, r4, #6
    1340:	0a64      	lsrs	r4, r4, #9
    1342:	b2db      	uxtb	r3, r3
    1344:	e7e3      	b.n	130e <__aeabi_ui2f+0x1e>
    1346:	2300      	movs	r3, #0
    1348:	2400      	movs	r4, #0
    134a:	e7e0      	b.n	130e <__aeabi_ui2f+0x1e>
    134c:	22b9      	movs	r2, #185	; 0xb9
    134e:	0021      	movs	r1, r4
    1350:	1ad2      	subs	r2, r2, r3
    1352:	4091      	lsls	r1, r2
    1354:	000a      	movs	r2, r1
    1356:	1e51      	subs	r1, r2, #1
    1358:	418a      	sbcs	r2, r1
    135a:	2105      	movs	r1, #5
    135c:	1a09      	subs	r1, r1, r0
    135e:	40cc      	lsrs	r4, r1
    1360:	4314      	orrs	r4, r2
    1362:	e7db      	b.n	131c <__aeabi_ui2f+0x2c>
    1364:	4b04      	ldr	r3, [pc, #16]	; (1378 <__aeabi_ui2f+0x88>)
    1366:	401c      	ands	r4, r3
    1368:	239f      	movs	r3, #159	; 0x9f
    136a:	01a4      	lsls	r4, r4, #6
    136c:	1a1b      	subs	r3, r3, r0
    136e:	0a64      	lsrs	r4, r4, #9
    1370:	b2db      	uxtb	r3, r3
    1372:	e7cc      	b.n	130e <__aeabi_ui2f+0x1e>
    1374:	0022      	movs	r2, r4
    1376:	e7d7      	b.n	1328 <__aeabi_ui2f+0x38>
    1378:	fbffffff 	.word	0xfbffffff

0000137c <__aeabi_dmul>:
    137c:	b5f0      	push	{r4, r5, r6, r7, lr}
    137e:	4657      	mov	r7, sl
    1380:	4645      	mov	r5, r8
    1382:	46de      	mov	lr, fp
    1384:	464e      	mov	r6, r9
    1386:	b5e0      	push	{r5, r6, r7, lr}
    1388:	030c      	lsls	r4, r1, #12
    138a:	4698      	mov	r8, r3
    138c:	004e      	lsls	r6, r1, #1
    138e:	0b23      	lsrs	r3, r4, #12
    1390:	b087      	sub	sp, #28
    1392:	0007      	movs	r7, r0
    1394:	4692      	mov	sl, r2
    1396:	469b      	mov	fp, r3
    1398:	0d76      	lsrs	r6, r6, #21
    139a:	0fcd      	lsrs	r5, r1, #31
    139c:	2e00      	cmp	r6, #0
    139e:	d06b      	beq.n	1478 <__aeabi_dmul+0xfc>
    13a0:	4b6d      	ldr	r3, [pc, #436]	; (1558 <__aeabi_dmul+0x1dc>)
    13a2:	429e      	cmp	r6, r3
    13a4:	d035      	beq.n	1412 <__aeabi_dmul+0x96>
    13a6:	2480      	movs	r4, #128	; 0x80
    13a8:	465b      	mov	r3, fp
    13aa:	0f42      	lsrs	r2, r0, #29
    13ac:	0424      	lsls	r4, r4, #16
    13ae:	00db      	lsls	r3, r3, #3
    13b0:	4314      	orrs	r4, r2
    13b2:	431c      	orrs	r4, r3
    13b4:	00c3      	lsls	r3, r0, #3
    13b6:	4699      	mov	r9, r3
    13b8:	4b68      	ldr	r3, [pc, #416]	; (155c <__aeabi_dmul+0x1e0>)
    13ba:	46a3      	mov	fp, r4
    13bc:	469c      	mov	ip, r3
    13be:	2300      	movs	r3, #0
    13c0:	2700      	movs	r7, #0
    13c2:	4466      	add	r6, ip
    13c4:	9302      	str	r3, [sp, #8]
    13c6:	4643      	mov	r3, r8
    13c8:	031c      	lsls	r4, r3, #12
    13ca:	005a      	lsls	r2, r3, #1
    13cc:	0fdb      	lsrs	r3, r3, #31
    13ce:	4650      	mov	r0, sl
    13d0:	0b24      	lsrs	r4, r4, #12
    13d2:	0d52      	lsrs	r2, r2, #21
    13d4:	4698      	mov	r8, r3
    13d6:	d100      	bne.n	13da <__aeabi_dmul+0x5e>
    13d8:	e076      	b.n	14c8 <__aeabi_dmul+0x14c>
    13da:	4b5f      	ldr	r3, [pc, #380]	; (1558 <__aeabi_dmul+0x1dc>)
    13dc:	429a      	cmp	r2, r3
    13de:	d06d      	beq.n	14bc <__aeabi_dmul+0x140>
    13e0:	2380      	movs	r3, #128	; 0x80
    13e2:	0f41      	lsrs	r1, r0, #29
    13e4:	041b      	lsls	r3, r3, #16
    13e6:	430b      	orrs	r3, r1
    13e8:	495c      	ldr	r1, [pc, #368]	; (155c <__aeabi_dmul+0x1e0>)
    13ea:	00e4      	lsls	r4, r4, #3
    13ec:	468c      	mov	ip, r1
    13ee:	431c      	orrs	r4, r3
    13f0:	00c3      	lsls	r3, r0, #3
    13f2:	2000      	movs	r0, #0
    13f4:	4462      	add	r2, ip
    13f6:	4641      	mov	r1, r8
    13f8:	18b6      	adds	r6, r6, r2
    13fa:	4069      	eors	r1, r5
    13fc:	1c72      	adds	r2, r6, #1
    13fe:	9101      	str	r1, [sp, #4]
    1400:	4694      	mov	ip, r2
    1402:	4307      	orrs	r7, r0
    1404:	2f0f      	cmp	r7, #15
    1406:	d900      	bls.n	140a <__aeabi_dmul+0x8e>
    1408:	e0b0      	b.n	156c <__aeabi_dmul+0x1f0>
    140a:	4a55      	ldr	r2, [pc, #340]	; (1560 <__aeabi_dmul+0x1e4>)
    140c:	00bf      	lsls	r7, r7, #2
    140e:	59d2      	ldr	r2, [r2, r7]
    1410:	4697      	mov	pc, r2
    1412:	465b      	mov	r3, fp
    1414:	4303      	orrs	r3, r0
    1416:	4699      	mov	r9, r3
    1418:	d000      	beq.n	141c <__aeabi_dmul+0xa0>
    141a:	e087      	b.n	152c <__aeabi_dmul+0x1b0>
    141c:	2300      	movs	r3, #0
    141e:	469b      	mov	fp, r3
    1420:	3302      	adds	r3, #2
    1422:	2708      	movs	r7, #8
    1424:	9302      	str	r3, [sp, #8]
    1426:	e7ce      	b.n	13c6 <__aeabi_dmul+0x4a>
    1428:	4642      	mov	r2, r8
    142a:	9201      	str	r2, [sp, #4]
    142c:	2802      	cmp	r0, #2
    142e:	d067      	beq.n	1500 <__aeabi_dmul+0x184>
    1430:	2803      	cmp	r0, #3
    1432:	d100      	bne.n	1436 <__aeabi_dmul+0xba>
    1434:	e20e      	b.n	1854 <__aeabi_dmul+0x4d8>
    1436:	2801      	cmp	r0, #1
    1438:	d000      	beq.n	143c <__aeabi_dmul+0xc0>
    143a:	e162      	b.n	1702 <__aeabi_dmul+0x386>
    143c:	2300      	movs	r3, #0
    143e:	2400      	movs	r4, #0
    1440:	2200      	movs	r2, #0
    1442:	4699      	mov	r9, r3
    1444:	9901      	ldr	r1, [sp, #4]
    1446:	4001      	ands	r1, r0
    1448:	b2cd      	uxtb	r5, r1
    144a:	2100      	movs	r1, #0
    144c:	0312      	lsls	r2, r2, #12
    144e:	0d0b      	lsrs	r3, r1, #20
    1450:	0b12      	lsrs	r2, r2, #12
    1452:	051b      	lsls	r3, r3, #20
    1454:	4313      	orrs	r3, r2
    1456:	4a43      	ldr	r2, [pc, #268]	; (1564 <__aeabi_dmul+0x1e8>)
    1458:	0524      	lsls	r4, r4, #20
    145a:	4013      	ands	r3, r2
    145c:	431c      	orrs	r4, r3
    145e:	0064      	lsls	r4, r4, #1
    1460:	07ed      	lsls	r5, r5, #31
    1462:	0864      	lsrs	r4, r4, #1
    1464:	432c      	orrs	r4, r5
    1466:	4648      	mov	r0, r9
    1468:	0021      	movs	r1, r4
    146a:	b007      	add	sp, #28
    146c:	bc3c      	pop	{r2, r3, r4, r5}
    146e:	4690      	mov	r8, r2
    1470:	4699      	mov	r9, r3
    1472:	46a2      	mov	sl, r4
    1474:	46ab      	mov	fp, r5
    1476:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1478:	4303      	orrs	r3, r0
    147a:	4699      	mov	r9, r3
    147c:	d04f      	beq.n	151e <__aeabi_dmul+0x1a2>
    147e:	465b      	mov	r3, fp
    1480:	2b00      	cmp	r3, #0
    1482:	d100      	bne.n	1486 <__aeabi_dmul+0x10a>
    1484:	e189      	b.n	179a <__aeabi_dmul+0x41e>
    1486:	4658      	mov	r0, fp
    1488:	f000 fb16 	bl	1ab8 <__clzsi2>
    148c:	0003      	movs	r3, r0
    148e:	3b0b      	subs	r3, #11
    1490:	2b1c      	cmp	r3, #28
    1492:	dd00      	ble.n	1496 <__aeabi_dmul+0x11a>
    1494:	e17a      	b.n	178c <__aeabi_dmul+0x410>
    1496:	221d      	movs	r2, #29
    1498:	1ad3      	subs	r3, r2, r3
    149a:	003a      	movs	r2, r7
    149c:	0001      	movs	r1, r0
    149e:	465c      	mov	r4, fp
    14a0:	40da      	lsrs	r2, r3
    14a2:	3908      	subs	r1, #8
    14a4:	408c      	lsls	r4, r1
    14a6:	0013      	movs	r3, r2
    14a8:	408f      	lsls	r7, r1
    14aa:	4323      	orrs	r3, r4
    14ac:	469b      	mov	fp, r3
    14ae:	46b9      	mov	r9, r7
    14b0:	2300      	movs	r3, #0
    14b2:	4e2d      	ldr	r6, [pc, #180]	; (1568 <__aeabi_dmul+0x1ec>)
    14b4:	2700      	movs	r7, #0
    14b6:	1a36      	subs	r6, r6, r0
    14b8:	9302      	str	r3, [sp, #8]
    14ba:	e784      	b.n	13c6 <__aeabi_dmul+0x4a>
    14bc:	4653      	mov	r3, sl
    14be:	4323      	orrs	r3, r4
    14c0:	d12a      	bne.n	1518 <__aeabi_dmul+0x19c>
    14c2:	2400      	movs	r4, #0
    14c4:	2002      	movs	r0, #2
    14c6:	e796      	b.n	13f6 <__aeabi_dmul+0x7a>
    14c8:	4653      	mov	r3, sl
    14ca:	4323      	orrs	r3, r4
    14cc:	d020      	beq.n	1510 <__aeabi_dmul+0x194>
    14ce:	2c00      	cmp	r4, #0
    14d0:	d100      	bne.n	14d4 <__aeabi_dmul+0x158>
    14d2:	e157      	b.n	1784 <__aeabi_dmul+0x408>
    14d4:	0020      	movs	r0, r4
    14d6:	f000 faef 	bl	1ab8 <__clzsi2>
    14da:	0003      	movs	r3, r0
    14dc:	3b0b      	subs	r3, #11
    14de:	2b1c      	cmp	r3, #28
    14e0:	dd00      	ble.n	14e4 <__aeabi_dmul+0x168>
    14e2:	e149      	b.n	1778 <__aeabi_dmul+0x3fc>
    14e4:	211d      	movs	r1, #29
    14e6:	1acb      	subs	r3, r1, r3
    14e8:	4651      	mov	r1, sl
    14ea:	0002      	movs	r2, r0
    14ec:	40d9      	lsrs	r1, r3
    14ee:	4653      	mov	r3, sl
    14f0:	3a08      	subs	r2, #8
    14f2:	4094      	lsls	r4, r2
    14f4:	4093      	lsls	r3, r2
    14f6:	430c      	orrs	r4, r1
    14f8:	4a1b      	ldr	r2, [pc, #108]	; (1568 <__aeabi_dmul+0x1ec>)
    14fa:	1a12      	subs	r2, r2, r0
    14fc:	2000      	movs	r0, #0
    14fe:	e77a      	b.n	13f6 <__aeabi_dmul+0x7a>
    1500:	2501      	movs	r5, #1
    1502:	9b01      	ldr	r3, [sp, #4]
    1504:	4c14      	ldr	r4, [pc, #80]	; (1558 <__aeabi_dmul+0x1dc>)
    1506:	401d      	ands	r5, r3
    1508:	2300      	movs	r3, #0
    150a:	2200      	movs	r2, #0
    150c:	4699      	mov	r9, r3
    150e:	e79c      	b.n	144a <__aeabi_dmul+0xce>
    1510:	2400      	movs	r4, #0
    1512:	2200      	movs	r2, #0
    1514:	2001      	movs	r0, #1
    1516:	e76e      	b.n	13f6 <__aeabi_dmul+0x7a>
    1518:	4653      	mov	r3, sl
    151a:	2003      	movs	r0, #3
    151c:	e76b      	b.n	13f6 <__aeabi_dmul+0x7a>
    151e:	2300      	movs	r3, #0
    1520:	469b      	mov	fp, r3
    1522:	3301      	adds	r3, #1
    1524:	2704      	movs	r7, #4
    1526:	2600      	movs	r6, #0
    1528:	9302      	str	r3, [sp, #8]
    152a:	e74c      	b.n	13c6 <__aeabi_dmul+0x4a>
    152c:	2303      	movs	r3, #3
    152e:	4681      	mov	r9, r0
    1530:	270c      	movs	r7, #12
    1532:	9302      	str	r3, [sp, #8]
    1534:	e747      	b.n	13c6 <__aeabi_dmul+0x4a>
    1536:	2280      	movs	r2, #128	; 0x80
    1538:	2300      	movs	r3, #0
    153a:	2500      	movs	r5, #0
    153c:	0312      	lsls	r2, r2, #12
    153e:	4699      	mov	r9, r3
    1540:	4c05      	ldr	r4, [pc, #20]	; (1558 <__aeabi_dmul+0x1dc>)
    1542:	e782      	b.n	144a <__aeabi_dmul+0xce>
    1544:	465c      	mov	r4, fp
    1546:	464b      	mov	r3, r9
    1548:	9802      	ldr	r0, [sp, #8]
    154a:	e76f      	b.n	142c <__aeabi_dmul+0xb0>
    154c:	465c      	mov	r4, fp
    154e:	464b      	mov	r3, r9
    1550:	9501      	str	r5, [sp, #4]
    1552:	9802      	ldr	r0, [sp, #8]
    1554:	e76a      	b.n	142c <__aeabi_dmul+0xb0>
    1556:	46c0      	nop			; (mov r8, r8)
    1558:	000007ff 	.word	0x000007ff
    155c:	fffffc01 	.word	0xfffffc01
    1560:	00001ec4 	.word	0x00001ec4
    1564:	800fffff 	.word	0x800fffff
    1568:	fffffc0d 	.word	0xfffffc0d
    156c:	464a      	mov	r2, r9
    156e:	4649      	mov	r1, r9
    1570:	0c17      	lsrs	r7, r2, #16
    1572:	0c1a      	lsrs	r2, r3, #16
    1574:	041b      	lsls	r3, r3, #16
    1576:	0c1b      	lsrs	r3, r3, #16
    1578:	0408      	lsls	r0, r1, #16
    157a:	0019      	movs	r1, r3
    157c:	0c00      	lsrs	r0, r0, #16
    157e:	4341      	muls	r1, r0
    1580:	0015      	movs	r5, r2
    1582:	4688      	mov	r8, r1
    1584:	0019      	movs	r1, r3
    1586:	437d      	muls	r5, r7
    1588:	4379      	muls	r1, r7
    158a:	9503      	str	r5, [sp, #12]
    158c:	4689      	mov	r9, r1
    158e:	0029      	movs	r1, r5
    1590:	0015      	movs	r5, r2
    1592:	4345      	muls	r5, r0
    1594:	444d      	add	r5, r9
    1596:	9502      	str	r5, [sp, #8]
    1598:	4645      	mov	r5, r8
    159a:	0c2d      	lsrs	r5, r5, #16
    159c:	46aa      	mov	sl, r5
    159e:	9d02      	ldr	r5, [sp, #8]
    15a0:	4455      	add	r5, sl
    15a2:	45a9      	cmp	r9, r5
    15a4:	d906      	bls.n	15b4 <__aeabi_dmul+0x238>
    15a6:	468a      	mov	sl, r1
    15a8:	2180      	movs	r1, #128	; 0x80
    15aa:	0249      	lsls	r1, r1, #9
    15ac:	4689      	mov	r9, r1
    15ae:	44ca      	add	sl, r9
    15b0:	4651      	mov	r1, sl
    15b2:	9103      	str	r1, [sp, #12]
    15b4:	0c29      	lsrs	r1, r5, #16
    15b6:	9104      	str	r1, [sp, #16]
    15b8:	4641      	mov	r1, r8
    15ba:	0409      	lsls	r1, r1, #16
    15bc:	042d      	lsls	r5, r5, #16
    15be:	0c09      	lsrs	r1, r1, #16
    15c0:	4688      	mov	r8, r1
    15c2:	0029      	movs	r1, r5
    15c4:	0c25      	lsrs	r5, r4, #16
    15c6:	0424      	lsls	r4, r4, #16
    15c8:	4441      	add	r1, r8
    15ca:	0c24      	lsrs	r4, r4, #16
    15cc:	9105      	str	r1, [sp, #20]
    15ce:	0021      	movs	r1, r4
    15d0:	4341      	muls	r1, r0
    15d2:	4688      	mov	r8, r1
    15d4:	0021      	movs	r1, r4
    15d6:	4379      	muls	r1, r7
    15d8:	468a      	mov	sl, r1
    15da:	4368      	muls	r0, r5
    15dc:	4641      	mov	r1, r8
    15de:	4450      	add	r0, sl
    15e0:	4681      	mov	r9, r0
    15e2:	0c08      	lsrs	r0, r1, #16
    15e4:	4448      	add	r0, r9
    15e6:	436f      	muls	r7, r5
    15e8:	4582      	cmp	sl, r0
    15ea:	d903      	bls.n	15f4 <__aeabi_dmul+0x278>
    15ec:	2180      	movs	r1, #128	; 0x80
    15ee:	0249      	lsls	r1, r1, #9
    15f0:	4689      	mov	r9, r1
    15f2:	444f      	add	r7, r9
    15f4:	0c01      	lsrs	r1, r0, #16
    15f6:	4689      	mov	r9, r1
    15f8:	0039      	movs	r1, r7
    15fa:	4449      	add	r1, r9
    15fc:	9102      	str	r1, [sp, #8]
    15fe:	4641      	mov	r1, r8
    1600:	040f      	lsls	r7, r1, #16
    1602:	9904      	ldr	r1, [sp, #16]
    1604:	0c3f      	lsrs	r7, r7, #16
    1606:	4688      	mov	r8, r1
    1608:	0400      	lsls	r0, r0, #16
    160a:	19c0      	adds	r0, r0, r7
    160c:	4480      	add	r8, r0
    160e:	4641      	mov	r1, r8
    1610:	9104      	str	r1, [sp, #16]
    1612:	4659      	mov	r1, fp
    1614:	0c0f      	lsrs	r7, r1, #16
    1616:	0409      	lsls	r1, r1, #16
    1618:	0c09      	lsrs	r1, r1, #16
    161a:	4688      	mov	r8, r1
    161c:	4359      	muls	r1, r3
    161e:	468a      	mov	sl, r1
    1620:	0039      	movs	r1, r7
    1622:	4351      	muls	r1, r2
    1624:	4689      	mov	r9, r1
    1626:	4641      	mov	r1, r8
    1628:	434a      	muls	r2, r1
    162a:	4651      	mov	r1, sl
    162c:	0c09      	lsrs	r1, r1, #16
    162e:	468b      	mov	fp, r1
    1630:	437b      	muls	r3, r7
    1632:	18d2      	adds	r2, r2, r3
    1634:	445a      	add	r2, fp
    1636:	4293      	cmp	r3, r2
    1638:	d903      	bls.n	1642 <__aeabi_dmul+0x2c6>
    163a:	2380      	movs	r3, #128	; 0x80
    163c:	025b      	lsls	r3, r3, #9
    163e:	469b      	mov	fp, r3
    1640:	44d9      	add	r9, fp
    1642:	4651      	mov	r1, sl
    1644:	0409      	lsls	r1, r1, #16
    1646:	0c09      	lsrs	r1, r1, #16
    1648:	468a      	mov	sl, r1
    164a:	4641      	mov	r1, r8
    164c:	4361      	muls	r1, r4
    164e:	437c      	muls	r4, r7
    1650:	0c13      	lsrs	r3, r2, #16
    1652:	0412      	lsls	r2, r2, #16
    1654:	444b      	add	r3, r9
    1656:	4452      	add	r2, sl
    1658:	46a1      	mov	r9, r4
    165a:	468a      	mov	sl, r1
    165c:	003c      	movs	r4, r7
    165e:	4641      	mov	r1, r8
    1660:	436c      	muls	r4, r5
    1662:	434d      	muls	r5, r1
    1664:	4651      	mov	r1, sl
    1666:	444d      	add	r5, r9
    1668:	0c0f      	lsrs	r7, r1, #16
    166a:	197d      	adds	r5, r7, r5
    166c:	45a9      	cmp	r9, r5
    166e:	d903      	bls.n	1678 <__aeabi_dmul+0x2fc>
    1670:	2180      	movs	r1, #128	; 0x80
    1672:	0249      	lsls	r1, r1, #9
    1674:	4688      	mov	r8, r1
    1676:	4444      	add	r4, r8
    1678:	9f04      	ldr	r7, [sp, #16]
    167a:	9903      	ldr	r1, [sp, #12]
    167c:	46b8      	mov	r8, r7
    167e:	4441      	add	r1, r8
    1680:	468b      	mov	fp, r1
    1682:	4583      	cmp	fp, r0
    1684:	4180      	sbcs	r0, r0
    1686:	4241      	negs	r1, r0
    1688:	4688      	mov	r8, r1
    168a:	4651      	mov	r1, sl
    168c:	0408      	lsls	r0, r1, #16
    168e:	042f      	lsls	r7, r5, #16
    1690:	0c00      	lsrs	r0, r0, #16
    1692:	183f      	adds	r7, r7, r0
    1694:	4658      	mov	r0, fp
    1696:	9902      	ldr	r1, [sp, #8]
    1698:	1810      	adds	r0, r2, r0
    169a:	4689      	mov	r9, r1
    169c:	4290      	cmp	r0, r2
    169e:	4192      	sbcs	r2, r2
    16a0:	444f      	add	r7, r9
    16a2:	46ba      	mov	sl, r7
    16a4:	4252      	negs	r2, r2
    16a6:	4699      	mov	r9, r3
    16a8:	4693      	mov	fp, r2
    16aa:	44c2      	add	sl, r8
    16ac:	44d1      	add	r9, sl
    16ae:	44cb      	add	fp, r9
    16b0:	428f      	cmp	r7, r1
    16b2:	41bf      	sbcs	r7, r7
    16b4:	45c2      	cmp	sl, r8
    16b6:	4189      	sbcs	r1, r1
    16b8:	4599      	cmp	r9, r3
    16ba:	419b      	sbcs	r3, r3
    16bc:	4593      	cmp	fp, r2
    16be:	4192      	sbcs	r2, r2
    16c0:	427f      	negs	r7, r7
    16c2:	4249      	negs	r1, r1
    16c4:	0c2d      	lsrs	r5, r5, #16
    16c6:	4252      	negs	r2, r2
    16c8:	430f      	orrs	r7, r1
    16ca:	425b      	negs	r3, r3
    16cc:	4313      	orrs	r3, r2
    16ce:	197f      	adds	r7, r7, r5
    16d0:	18ff      	adds	r7, r7, r3
    16d2:	465b      	mov	r3, fp
    16d4:	193c      	adds	r4, r7, r4
    16d6:	0ddb      	lsrs	r3, r3, #23
    16d8:	9a05      	ldr	r2, [sp, #20]
    16da:	0264      	lsls	r4, r4, #9
    16dc:	431c      	orrs	r4, r3
    16de:	0243      	lsls	r3, r0, #9
    16e0:	4313      	orrs	r3, r2
    16e2:	1e5d      	subs	r5, r3, #1
    16e4:	41ab      	sbcs	r3, r5
    16e6:	465a      	mov	r2, fp
    16e8:	0dc0      	lsrs	r0, r0, #23
    16ea:	4303      	orrs	r3, r0
    16ec:	0252      	lsls	r2, r2, #9
    16ee:	4313      	orrs	r3, r2
    16f0:	01e2      	lsls	r2, r4, #7
    16f2:	d556      	bpl.n	17a2 <__aeabi_dmul+0x426>
    16f4:	2001      	movs	r0, #1
    16f6:	085a      	lsrs	r2, r3, #1
    16f8:	4003      	ands	r3, r0
    16fa:	4313      	orrs	r3, r2
    16fc:	07e2      	lsls	r2, r4, #31
    16fe:	4313      	orrs	r3, r2
    1700:	0864      	lsrs	r4, r4, #1
    1702:	485a      	ldr	r0, [pc, #360]	; (186c <__aeabi_dmul+0x4f0>)
    1704:	4460      	add	r0, ip
    1706:	2800      	cmp	r0, #0
    1708:	dd4d      	ble.n	17a6 <__aeabi_dmul+0x42a>
    170a:	075a      	lsls	r2, r3, #29
    170c:	d009      	beq.n	1722 <__aeabi_dmul+0x3a6>
    170e:	220f      	movs	r2, #15
    1710:	401a      	ands	r2, r3
    1712:	2a04      	cmp	r2, #4
    1714:	d005      	beq.n	1722 <__aeabi_dmul+0x3a6>
    1716:	1d1a      	adds	r2, r3, #4
    1718:	429a      	cmp	r2, r3
    171a:	419b      	sbcs	r3, r3
    171c:	425b      	negs	r3, r3
    171e:	18e4      	adds	r4, r4, r3
    1720:	0013      	movs	r3, r2
    1722:	01e2      	lsls	r2, r4, #7
    1724:	d504      	bpl.n	1730 <__aeabi_dmul+0x3b4>
    1726:	2080      	movs	r0, #128	; 0x80
    1728:	4a51      	ldr	r2, [pc, #324]	; (1870 <__aeabi_dmul+0x4f4>)
    172a:	00c0      	lsls	r0, r0, #3
    172c:	4014      	ands	r4, r2
    172e:	4460      	add	r0, ip
    1730:	4a50      	ldr	r2, [pc, #320]	; (1874 <__aeabi_dmul+0x4f8>)
    1732:	4290      	cmp	r0, r2
    1734:	dd00      	ble.n	1738 <__aeabi_dmul+0x3bc>
    1736:	e6e3      	b.n	1500 <__aeabi_dmul+0x184>
    1738:	2501      	movs	r5, #1
    173a:	08db      	lsrs	r3, r3, #3
    173c:	0762      	lsls	r2, r4, #29
    173e:	431a      	orrs	r2, r3
    1740:	0264      	lsls	r4, r4, #9
    1742:	9b01      	ldr	r3, [sp, #4]
    1744:	4691      	mov	r9, r2
    1746:	0b22      	lsrs	r2, r4, #12
    1748:	0544      	lsls	r4, r0, #21
    174a:	0d64      	lsrs	r4, r4, #21
    174c:	401d      	ands	r5, r3
    174e:	e67c      	b.n	144a <__aeabi_dmul+0xce>
    1750:	2280      	movs	r2, #128	; 0x80
    1752:	4659      	mov	r1, fp
    1754:	0312      	lsls	r2, r2, #12
    1756:	4211      	tst	r1, r2
    1758:	d008      	beq.n	176c <__aeabi_dmul+0x3f0>
    175a:	4214      	tst	r4, r2
    175c:	d106      	bne.n	176c <__aeabi_dmul+0x3f0>
    175e:	4322      	orrs	r2, r4
    1760:	0312      	lsls	r2, r2, #12
    1762:	0b12      	lsrs	r2, r2, #12
    1764:	4645      	mov	r5, r8
    1766:	4699      	mov	r9, r3
    1768:	4c43      	ldr	r4, [pc, #268]	; (1878 <__aeabi_dmul+0x4fc>)
    176a:	e66e      	b.n	144a <__aeabi_dmul+0xce>
    176c:	465b      	mov	r3, fp
    176e:	431a      	orrs	r2, r3
    1770:	0312      	lsls	r2, r2, #12
    1772:	0b12      	lsrs	r2, r2, #12
    1774:	4c40      	ldr	r4, [pc, #256]	; (1878 <__aeabi_dmul+0x4fc>)
    1776:	e668      	b.n	144a <__aeabi_dmul+0xce>
    1778:	0003      	movs	r3, r0
    177a:	4654      	mov	r4, sl
    177c:	3b28      	subs	r3, #40	; 0x28
    177e:	409c      	lsls	r4, r3
    1780:	2300      	movs	r3, #0
    1782:	e6b9      	b.n	14f8 <__aeabi_dmul+0x17c>
    1784:	f000 f998 	bl	1ab8 <__clzsi2>
    1788:	3020      	adds	r0, #32
    178a:	e6a6      	b.n	14da <__aeabi_dmul+0x15e>
    178c:	0003      	movs	r3, r0
    178e:	3b28      	subs	r3, #40	; 0x28
    1790:	409f      	lsls	r7, r3
    1792:	2300      	movs	r3, #0
    1794:	46bb      	mov	fp, r7
    1796:	4699      	mov	r9, r3
    1798:	e68a      	b.n	14b0 <__aeabi_dmul+0x134>
    179a:	f000 f98d 	bl	1ab8 <__clzsi2>
    179e:	3020      	adds	r0, #32
    17a0:	e674      	b.n	148c <__aeabi_dmul+0x110>
    17a2:	46b4      	mov	ip, r6
    17a4:	e7ad      	b.n	1702 <__aeabi_dmul+0x386>
    17a6:	2501      	movs	r5, #1
    17a8:	1a2a      	subs	r2, r5, r0
    17aa:	2a38      	cmp	r2, #56	; 0x38
    17ac:	dd06      	ble.n	17bc <__aeabi_dmul+0x440>
    17ae:	9b01      	ldr	r3, [sp, #4]
    17b0:	2400      	movs	r4, #0
    17b2:	401d      	ands	r5, r3
    17b4:	2300      	movs	r3, #0
    17b6:	2200      	movs	r2, #0
    17b8:	4699      	mov	r9, r3
    17ba:	e646      	b.n	144a <__aeabi_dmul+0xce>
    17bc:	2a1f      	cmp	r2, #31
    17be:	dc21      	bgt.n	1804 <__aeabi_dmul+0x488>
    17c0:	2520      	movs	r5, #32
    17c2:	0020      	movs	r0, r4
    17c4:	1aad      	subs	r5, r5, r2
    17c6:	001e      	movs	r6, r3
    17c8:	40ab      	lsls	r3, r5
    17ca:	40a8      	lsls	r0, r5
    17cc:	40d6      	lsrs	r6, r2
    17ce:	1e5d      	subs	r5, r3, #1
    17d0:	41ab      	sbcs	r3, r5
    17d2:	4330      	orrs	r0, r6
    17d4:	4318      	orrs	r0, r3
    17d6:	40d4      	lsrs	r4, r2
    17d8:	0743      	lsls	r3, r0, #29
    17da:	d009      	beq.n	17f0 <__aeabi_dmul+0x474>
    17dc:	230f      	movs	r3, #15
    17de:	4003      	ands	r3, r0
    17e0:	2b04      	cmp	r3, #4
    17e2:	d005      	beq.n	17f0 <__aeabi_dmul+0x474>
    17e4:	0003      	movs	r3, r0
    17e6:	1d18      	adds	r0, r3, #4
    17e8:	4298      	cmp	r0, r3
    17ea:	419b      	sbcs	r3, r3
    17ec:	425b      	negs	r3, r3
    17ee:	18e4      	adds	r4, r4, r3
    17f0:	0223      	lsls	r3, r4, #8
    17f2:	d521      	bpl.n	1838 <__aeabi_dmul+0x4bc>
    17f4:	2501      	movs	r5, #1
    17f6:	9b01      	ldr	r3, [sp, #4]
    17f8:	2401      	movs	r4, #1
    17fa:	401d      	ands	r5, r3
    17fc:	2300      	movs	r3, #0
    17fe:	2200      	movs	r2, #0
    1800:	4699      	mov	r9, r3
    1802:	e622      	b.n	144a <__aeabi_dmul+0xce>
    1804:	251f      	movs	r5, #31
    1806:	0021      	movs	r1, r4
    1808:	426d      	negs	r5, r5
    180a:	1a28      	subs	r0, r5, r0
    180c:	40c1      	lsrs	r1, r0
    180e:	0008      	movs	r0, r1
    1810:	2a20      	cmp	r2, #32
    1812:	d01d      	beq.n	1850 <__aeabi_dmul+0x4d4>
    1814:	355f      	adds	r5, #95	; 0x5f
    1816:	1aaa      	subs	r2, r5, r2
    1818:	4094      	lsls	r4, r2
    181a:	4323      	orrs	r3, r4
    181c:	1e5c      	subs	r4, r3, #1
    181e:	41a3      	sbcs	r3, r4
    1820:	2507      	movs	r5, #7
    1822:	4303      	orrs	r3, r0
    1824:	401d      	ands	r5, r3
    1826:	2200      	movs	r2, #0
    1828:	2d00      	cmp	r5, #0
    182a:	d009      	beq.n	1840 <__aeabi_dmul+0x4c4>
    182c:	220f      	movs	r2, #15
    182e:	2400      	movs	r4, #0
    1830:	401a      	ands	r2, r3
    1832:	0018      	movs	r0, r3
    1834:	2a04      	cmp	r2, #4
    1836:	d1d6      	bne.n	17e6 <__aeabi_dmul+0x46a>
    1838:	0003      	movs	r3, r0
    183a:	0765      	lsls	r5, r4, #29
    183c:	0264      	lsls	r4, r4, #9
    183e:	0b22      	lsrs	r2, r4, #12
    1840:	08db      	lsrs	r3, r3, #3
    1842:	432b      	orrs	r3, r5
    1844:	2501      	movs	r5, #1
    1846:	4699      	mov	r9, r3
    1848:	9b01      	ldr	r3, [sp, #4]
    184a:	2400      	movs	r4, #0
    184c:	401d      	ands	r5, r3
    184e:	e5fc      	b.n	144a <__aeabi_dmul+0xce>
    1850:	2400      	movs	r4, #0
    1852:	e7e2      	b.n	181a <__aeabi_dmul+0x49e>
    1854:	2280      	movs	r2, #128	; 0x80
    1856:	2501      	movs	r5, #1
    1858:	0312      	lsls	r2, r2, #12
    185a:	4322      	orrs	r2, r4
    185c:	9901      	ldr	r1, [sp, #4]
    185e:	0312      	lsls	r2, r2, #12
    1860:	0b12      	lsrs	r2, r2, #12
    1862:	400d      	ands	r5, r1
    1864:	4699      	mov	r9, r3
    1866:	4c04      	ldr	r4, [pc, #16]	; (1878 <__aeabi_dmul+0x4fc>)
    1868:	e5ef      	b.n	144a <__aeabi_dmul+0xce>
    186a:	46c0      	nop			; (mov r8, r8)
    186c:	000003ff 	.word	0x000003ff
    1870:	feffffff 	.word	0xfeffffff
    1874:	000007fe 	.word	0x000007fe
    1878:	000007ff 	.word	0x000007ff

0000187c <__aeabi_i2d>:
    187c:	b570      	push	{r4, r5, r6, lr}
    187e:	2800      	cmp	r0, #0
    1880:	d030      	beq.n	18e4 <__aeabi_i2d+0x68>
    1882:	17c3      	asrs	r3, r0, #31
    1884:	18c4      	adds	r4, r0, r3
    1886:	405c      	eors	r4, r3
    1888:	0fc5      	lsrs	r5, r0, #31
    188a:	0020      	movs	r0, r4
    188c:	f000 f914 	bl	1ab8 <__clzsi2>
    1890:	4b17      	ldr	r3, [pc, #92]	; (18f0 <__aeabi_i2d+0x74>)
    1892:	4a18      	ldr	r2, [pc, #96]	; (18f4 <__aeabi_i2d+0x78>)
    1894:	1a1b      	subs	r3, r3, r0
    1896:	1ad2      	subs	r2, r2, r3
    1898:	2a1f      	cmp	r2, #31
    189a:	dd18      	ble.n	18ce <__aeabi_i2d+0x52>
    189c:	4a16      	ldr	r2, [pc, #88]	; (18f8 <__aeabi_i2d+0x7c>)
    189e:	1ad2      	subs	r2, r2, r3
    18a0:	4094      	lsls	r4, r2
    18a2:	2200      	movs	r2, #0
    18a4:	0324      	lsls	r4, r4, #12
    18a6:	055b      	lsls	r3, r3, #21
    18a8:	0b24      	lsrs	r4, r4, #12
    18aa:	0d5b      	lsrs	r3, r3, #21
    18ac:	2100      	movs	r1, #0
    18ae:	0010      	movs	r0, r2
    18b0:	0324      	lsls	r4, r4, #12
    18b2:	0d0a      	lsrs	r2, r1, #20
    18b4:	0b24      	lsrs	r4, r4, #12
    18b6:	0512      	lsls	r2, r2, #20
    18b8:	4322      	orrs	r2, r4
    18ba:	4c10      	ldr	r4, [pc, #64]	; (18fc <__aeabi_i2d+0x80>)
    18bc:	051b      	lsls	r3, r3, #20
    18be:	4022      	ands	r2, r4
    18c0:	4313      	orrs	r3, r2
    18c2:	005b      	lsls	r3, r3, #1
    18c4:	07ed      	lsls	r5, r5, #31
    18c6:	085b      	lsrs	r3, r3, #1
    18c8:	432b      	orrs	r3, r5
    18ca:	0019      	movs	r1, r3
    18cc:	bd70      	pop	{r4, r5, r6, pc}
    18ce:	0021      	movs	r1, r4
    18d0:	4091      	lsls	r1, r2
    18d2:	000a      	movs	r2, r1
    18d4:	210b      	movs	r1, #11
    18d6:	1a08      	subs	r0, r1, r0
    18d8:	40c4      	lsrs	r4, r0
    18da:	055b      	lsls	r3, r3, #21
    18dc:	0324      	lsls	r4, r4, #12
    18de:	0b24      	lsrs	r4, r4, #12
    18e0:	0d5b      	lsrs	r3, r3, #21
    18e2:	e7e3      	b.n	18ac <__aeabi_i2d+0x30>
    18e4:	2500      	movs	r5, #0
    18e6:	2300      	movs	r3, #0
    18e8:	2400      	movs	r4, #0
    18ea:	2200      	movs	r2, #0
    18ec:	e7de      	b.n	18ac <__aeabi_i2d+0x30>
    18ee:	46c0      	nop			; (mov r8, r8)
    18f0:	0000041e 	.word	0x0000041e
    18f4:	00000433 	.word	0x00000433
    18f8:	00000413 	.word	0x00000413
    18fc:	800fffff 	.word	0x800fffff

00001900 <__aeabi_f2d>:
    1900:	0041      	lsls	r1, r0, #1
    1902:	0e09      	lsrs	r1, r1, #24
    1904:	1c4b      	adds	r3, r1, #1
    1906:	b570      	push	{r4, r5, r6, lr}
    1908:	b2db      	uxtb	r3, r3
    190a:	0246      	lsls	r6, r0, #9
    190c:	0a75      	lsrs	r5, r6, #9
    190e:	0fc4      	lsrs	r4, r0, #31
    1910:	2b01      	cmp	r3, #1
    1912:	dd14      	ble.n	193e <__aeabi_f2d+0x3e>
    1914:	23e0      	movs	r3, #224	; 0xe0
    1916:	009b      	lsls	r3, r3, #2
    1918:	076d      	lsls	r5, r5, #29
    191a:	0b36      	lsrs	r6, r6, #12
    191c:	18cb      	adds	r3, r1, r3
    191e:	2100      	movs	r1, #0
    1920:	0d0a      	lsrs	r2, r1, #20
    1922:	0028      	movs	r0, r5
    1924:	0512      	lsls	r2, r2, #20
    1926:	4d1c      	ldr	r5, [pc, #112]	; (1998 <__aeabi_f2d+0x98>)
    1928:	4332      	orrs	r2, r6
    192a:	055b      	lsls	r3, r3, #21
    192c:	402a      	ands	r2, r5
    192e:	085b      	lsrs	r3, r3, #1
    1930:	4313      	orrs	r3, r2
    1932:	005b      	lsls	r3, r3, #1
    1934:	07e4      	lsls	r4, r4, #31
    1936:	085b      	lsrs	r3, r3, #1
    1938:	4323      	orrs	r3, r4
    193a:	0019      	movs	r1, r3
    193c:	bd70      	pop	{r4, r5, r6, pc}
    193e:	2900      	cmp	r1, #0
    1940:	d114      	bne.n	196c <__aeabi_f2d+0x6c>
    1942:	2d00      	cmp	r5, #0
    1944:	d01e      	beq.n	1984 <__aeabi_f2d+0x84>
    1946:	0028      	movs	r0, r5
    1948:	f000 f8b6 	bl	1ab8 <__clzsi2>
    194c:	280a      	cmp	r0, #10
    194e:	dc1c      	bgt.n	198a <__aeabi_f2d+0x8a>
    1950:	230b      	movs	r3, #11
    1952:	002a      	movs	r2, r5
    1954:	1a1b      	subs	r3, r3, r0
    1956:	40da      	lsrs	r2, r3
    1958:	0003      	movs	r3, r0
    195a:	3315      	adds	r3, #21
    195c:	409d      	lsls	r5, r3
    195e:	4b0f      	ldr	r3, [pc, #60]	; (199c <__aeabi_f2d+0x9c>)
    1960:	0312      	lsls	r2, r2, #12
    1962:	1a1b      	subs	r3, r3, r0
    1964:	055b      	lsls	r3, r3, #21
    1966:	0b16      	lsrs	r6, r2, #12
    1968:	0d5b      	lsrs	r3, r3, #21
    196a:	e7d8      	b.n	191e <__aeabi_f2d+0x1e>
    196c:	2d00      	cmp	r5, #0
    196e:	d006      	beq.n	197e <__aeabi_f2d+0x7e>
    1970:	0b32      	lsrs	r2, r6, #12
    1972:	2680      	movs	r6, #128	; 0x80
    1974:	0336      	lsls	r6, r6, #12
    1976:	076d      	lsls	r5, r5, #29
    1978:	4316      	orrs	r6, r2
    197a:	4b09      	ldr	r3, [pc, #36]	; (19a0 <__aeabi_f2d+0xa0>)
    197c:	e7cf      	b.n	191e <__aeabi_f2d+0x1e>
    197e:	4b08      	ldr	r3, [pc, #32]	; (19a0 <__aeabi_f2d+0xa0>)
    1980:	2600      	movs	r6, #0
    1982:	e7cc      	b.n	191e <__aeabi_f2d+0x1e>
    1984:	2300      	movs	r3, #0
    1986:	2600      	movs	r6, #0
    1988:	e7c9      	b.n	191e <__aeabi_f2d+0x1e>
    198a:	0003      	movs	r3, r0
    198c:	002a      	movs	r2, r5
    198e:	3b0b      	subs	r3, #11
    1990:	409a      	lsls	r2, r3
    1992:	2500      	movs	r5, #0
    1994:	e7e3      	b.n	195e <__aeabi_f2d+0x5e>
    1996:	46c0      	nop			; (mov r8, r8)
    1998:	800fffff 	.word	0x800fffff
    199c:	00000389 	.word	0x00000389
    19a0:	000007ff 	.word	0x000007ff

000019a4 <__aeabi_d2f>:
    19a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    19a6:	004c      	lsls	r4, r1, #1
    19a8:	0d64      	lsrs	r4, r4, #21
    19aa:	030b      	lsls	r3, r1, #12
    19ac:	1c62      	adds	r2, r4, #1
    19ae:	0f45      	lsrs	r5, r0, #29
    19b0:	0a5b      	lsrs	r3, r3, #9
    19b2:	0552      	lsls	r2, r2, #21
    19b4:	432b      	orrs	r3, r5
    19b6:	0fc9      	lsrs	r1, r1, #31
    19b8:	00c5      	lsls	r5, r0, #3
    19ba:	0d52      	lsrs	r2, r2, #21
    19bc:	2a01      	cmp	r2, #1
    19be:	dd28      	ble.n	1a12 <__aeabi_d2f+0x6e>
    19c0:	4a3a      	ldr	r2, [pc, #232]	; (1aac <__aeabi_d2f+0x108>)
    19c2:	18a6      	adds	r6, r4, r2
    19c4:	2efe      	cmp	r6, #254	; 0xfe
    19c6:	dc1b      	bgt.n	1a00 <__aeabi_d2f+0x5c>
    19c8:	2e00      	cmp	r6, #0
    19ca:	dd3e      	ble.n	1a4a <__aeabi_d2f+0xa6>
    19cc:	0180      	lsls	r0, r0, #6
    19ce:	0002      	movs	r2, r0
    19d0:	1e50      	subs	r0, r2, #1
    19d2:	4182      	sbcs	r2, r0
    19d4:	0f6d      	lsrs	r5, r5, #29
    19d6:	432a      	orrs	r2, r5
    19d8:	00db      	lsls	r3, r3, #3
    19da:	4313      	orrs	r3, r2
    19dc:	075a      	lsls	r2, r3, #29
    19de:	d004      	beq.n	19ea <__aeabi_d2f+0x46>
    19e0:	220f      	movs	r2, #15
    19e2:	401a      	ands	r2, r3
    19e4:	2a04      	cmp	r2, #4
    19e6:	d000      	beq.n	19ea <__aeabi_d2f+0x46>
    19e8:	3304      	adds	r3, #4
    19ea:	2280      	movs	r2, #128	; 0x80
    19ec:	04d2      	lsls	r2, r2, #19
    19ee:	401a      	ands	r2, r3
    19f0:	d05a      	beq.n	1aa8 <__aeabi_d2f+0x104>
    19f2:	3601      	adds	r6, #1
    19f4:	2eff      	cmp	r6, #255	; 0xff
    19f6:	d003      	beq.n	1a00 <__aeabi_d2f+0x5c>
    19f8:	019b      	lsls	r3, r3, #6
    19fa:	0a5b      	lsrs	r3, r3, #9
    19fc:	b2f4      	uxtb	r4, r6
    19fe:	e001      	b.n	1a04 <__aeabi_d2f+0x60>
    1a00:	24ff      	movs	r4, #255	; 0xff
    1a02:	2300      	movs	r3, #0
    1a04:	0258      	lsls	r0, r3, #9
    1a06:	05e4      	lsls	r4, r4, #23
    1a08:	0a40      	lsrs	r0, r0, #9
    1a0a:	07c9      	lsls	r1, r1, #31
    1a0c:	4320      	orrs	r0, r4
    1a0e:	4308      	orrs	r0, r1
    1a10:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1a12:	2c00      	cmp	r4, #0
    1a14:	d007      	beq.n	1a26 <__aeabi_d2f+0x82>
    1a16:	431d      	orrs	r5, r3
    1a18:	d0f2      	beq.n	1a00 <__aeabi_d2f+0x5c>
    1a1a:	2080      	movs	r0, #128	; 0x80
    1a1c:	00db      	lsls	r3, r3, #3
    1a1e:	0480      	lsls	r0, r0, #18
    1a20:	4303      	orrs	r3, r0
    1a22:	26ff      	movs	r6, #255	; 0xff
    1a24:	e7da      	b.n	19dc <__aeabi_d2f+0x38>
    1a26:	432b      	orrs	r3, r5
    1a28:	d003      	beq.n	1a32 <__aeabi_d2f+0x8e>
    1a2a:	2305      	movs	r3, #5
    1a2c:	08db      	lsrs	r3, r3, #3
    1a2e:	2cff      	cmp	r4, #255	; 0xff
    1a30:	d003      	beq.n	1a3a <__aeabi_d2f+0x96>
    1a32:	025b      	lsls	r3, r3, #9
    1a34:	0a5b      	lsrs	r3, r3, #9
    1a36:	b2e4      	uxtb	r4, r4
    1a38:	e7e4      	b.n	1a04 <__aeabi_d2f+0x60>
    1a3a:	2b00      	cmp	r3, #0
    1a3c:	d032      	beq.n	1aa4 <__aeabi_d2f+0x100>
    1a3e:	2080      	movs	r0, #128	; 0x80
    1a40:	03c0      	lsls	r0, r0, #15
    1a42:	4303      	orrs	r3, r0
    1a44:	025b      	lsls	r3, r3, #9
    1a46:	0a5b      	lsrs	r3, r3, #9
    1a48:	e7dc      	b.n	1a04 <__aeabi_d2f+0x60>
    1a4a:	0032      	movs	r2, r6
    1a4c:	3217      	adds	r2, #23
    1a4e:	db14      	blt.n	1a7a <__aeabi_d2f+0xd6>
    1a50:	2280      	movs	r2, #128	; 0x80
    1a52:	271e      	movs	r7, #30
    1a54:	0412      	lsls	r2, r2, #16
    1a56:	4313      	orrs	r3, r2
    1a58:	1bbf      	subs	r7, r7, r6
    1a5a:	2f1f      	cmp	r7, #31
    1a5c:	dc0f      	bgt.n	1a7e <__aeabi_d2f+0xda>
    1a5e:	4a14      	ldr	r2, [pc, #80]	; (1ab0 <__aeabi_d2f+0x10c>)
    1a60:	4694      	mov	ip, r2
    1a62:	4464      	add	r4, ip
    1a64:	002a      	movs	r2, r5
    1a66:	40a5      	lsls	r5, r4
    1a68:	002e      	movs	r6, r5
    1a6a:	40a3      	lsls	r3, r4
    1a6c:	1e75      	subs	r5, r6, #1
    1a6e:	41ae      	sbcs	r6, r5
    1a70:	40fa      	lsrs	r2, r7
    1a72:	4333      	orrs	r3, r6
    1a74:	4313      	orrs	r3, r2
    1a76:	2600      	movs	r6, #0
    1a78:	e7b0      	b.n	19dc <__aeabi_d2f+0x38>
    1a7a:	2400      	movs	r4, #0
    1a7c:	e7d5      	b.n	1a2a <__aeabi_d2f+0x86>
    1a7e:	2202      	movs	r2, #2
    1a80:	4252      	negs	r2, r2
    1a82:	1b96      	subs	r6, r2, r6
    1a84:	001a      	movs	r2, r3
    1a86:	40f2      	lsrs	r2, r6
    1a88:	2f20      	cmp	r7, #32
    1a8a:	d009      	beq.n	1aa0 <__aeabi_d2f+0xfc>
    1a8c:	4809      	ldr	r0, [pc, #36]	; (1ab4 <__aeabi_d2f+0x110>)
    1a8e:	4684      	mov	ip, r0
    1a90:	4464      	add	r4, ip
    1a92:	40a3      	lsls	r3, r4
    1a94:	432b      	orrs	r3, r5
    1a96:	1e5d      	subs	r5, r3, #1
    1a98:	41ab      	sbcs	r3, r5
    1a9a:	2600      	movs	r6, #0
    1a9c:	4313      	orrs	r3, r2
    1a9e:	e79d      	b.n	19dc <__aeabi_d2f+0x38>
    1aa0:	2300      	movs	r3, #0
    1aa2:	e7f7      	b.n	1a94 <__aeabi_d2f+0xf0>
    1aa4:	2300      	movs	r3, #0
    1aa6:	e7ad      	b.n	1a04 <__aeabi_d2f+0x60>
    1aa8:	0034      	movs	r4, r6
    1aaa:	e7bf      	b.n	1a2c <__aeabi_d2f+0x88>
    1aac:	fffffc80 	.word	0xfffffc80
    1ab0:	fffffc82 	.word	0xfffffc82
    1ab4:	fffffca2 	.word	0xfffffca2

00001ab8 <__clzsi2>:
    1ab8:	211c      	movs	r1, #28
    1aba:	2301      	movs	r3, #1
    1abc:	041b      	lsls	r3, r3, #16
    1abe:	4298      	cmp	r0, r3
    1ac0:	d301      	bcc.n	1ac6 <__clzsi2+0xe>
    1ac2:	0c00      	lsrs	r0, r0, #16
    1ac4:	3910      	subs	r1, #16
    1ac6:	0a1b      	lsrs	r3, r3, #8
    1ac8:	4298      	cmp	r0, r3
    1aca:	d301      	bcc.n	1ad0 <__clzsi2+0x18>
    1acc:	0a00      	lsrs	r0, r0, #8
    1ace:	3908      	subs	r1, #8
    1ad0:	091b      	lsrs	r3, r3, #4
    1ad2:	4298      	cmp	r0, r3
    1ad4:	d301      	bcc.n	1ada <__clzsi2+0x22>
    1ad6:	0900      	lsrs	r0, r0, #4
    1ad8:	3904      	subs	r1, #4
    1ada:	a202      	add	r2, pc, #8	; (adr r2, 1ae4 <__clzsi2+0x2c>)
    1adc:	5c10      	ldrb	r0, [r2, r0]
    1ade:	1840      	adds	r0, r0, r1
    1ae0:	4770      	bx	lr
    1ae2:	46c0      	nop			; (mov r8, r8)
    1ae4:	02020304 	.word	0x02020304
    1ae8:	01010101 	.word	0x01010101
	...

00001af4 <__libc_init_array>:
    1af4:	b570      	push	{r4, r5, r6, lr}
    1af6:	4e0d      	ldr	r6, [pc, #52]	; (1b2c <__libc_init_array+0x38>)
    1af8:	4d0d      	ldr	r5, [pc, #52]	; (1b30 <__libc_init_array+0x3c>)
    1afa:	2400      	movs	r4, #0
    1afc:	1bad      	subs	r5, r5, r6
    1afe:	10ad      	asrs	r5, r5, #2
    1b00:	d005      	beq.n	1b0e <__libc_init_array+0x1a>
    1b02:	00a3      	lsls	r3, r4, #2
    1b04:	58f3      	ldr	r3, [r6, r3]
    1b06:	3401      	adds	r4, #1
    1b08:	4798      	blx	r3
    1b0a:	42a5      	cmp	r5, r4
    1b0c:	d1f9      	bne.n	1b02 <__libc_init_array+0xe>
    1b0e:	f000 f9fb 	bl	1f08 <_init>
    1b12:	4e08      	ldr	r6, [pc, #32]	; (1b34 <__libc_init_array+0x40>)
    1b14:	4d08      	ldr	r5, [pc, #32]	; (1b38 <__libc_init_array+0x44>)
    1b16:	2400      	movs	r4, #0
    1b18:	1bad      	subs	r5, r5, r6
    1b1a:	10ad      	asrs	r5, r5, #2
    1b1c:	d005      	beq.n	1b2a <__libc_init_array+0x36>
    1b1e:	00a3      	lsls	r3, r4, #2
    1b20:	58f3      	ldr	r3, [r6, r3]
    1b22:	3401      	adds	r4, #1
    1b24:	4798      	blx	r3
    1b26:	42a5      	cmp	r5, r4
    1b28:	d1f9      	bne.n	1b1e <__libc_init_array+0x2a>
    1b2a:	bd70      	pop	{r4, r5, r6, pc}
    1b2c:	00001f14 	.word	0x00001f14
    1b30:	00001f14 	.word	0x00001f14
    1b34:	00001f14 	.word	0x00001f14
    1b38:	00001f1c 	.word	0x00001f1c

00001b3c <memset>:
    1b3c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1b3e:	0783      	lsls	r3, r0, #30
    1b40:	d043      	beq.n	1bca <memset+0x8e>
    1b42:	1e54      	subs	r4, r2, #1
    1b44:	2a00      	cmp	r2, #0
    1b46:	d03f      	beq.n	1bc8 <memset+0x8c>
    1b48:	b2ce      	uxtb	r6, r1
    1b4a:	0002      	movs	r2, r0
    1b4c:	2503      	movs	r5, #3
    1b4e:	e002      	b.n	1b56 <memset+0x1a>
    1b50:	001a      	movs	r2, r3
    1b52:	3c01      	subs	r4, #1
    1b54:	d338      	bcc.n	1bc8 <memset+0x8c>
    1b56:	1c53      	adds	r3, r2, #1
    1b58:	7016      	strb	r6, [r2, #0]
    1b5a:	422b      	tst	r3, r5
    1b5c:	d1f8      	bne.n	1b50 <memset+0x14>
    1b5e:	2c03      	cmp	r4, #3
    1b60:	d92a      	bls.n	1bb8 <memset+0x7c>
    1b62:	22ff      	movs	r2, #255	; 0xff
    1b64:	400a      	ands	r2, r1
    1b66:	0215      	lsls	r5, r2, #8
    1b68:	4315      	orrs	r5, r2
    1b6a:	042a      	lsls	r2, r5, #16
    1b6c:	4315      	orrs	r5, r2
    1b6e:	2c0f      	cmp	r4, #15
    1b70:	d914      	bls.n	1b9c <memset+0x60>
    1b72:	0027      	movs	r7, r4
    1b74:	001a      	movs	r2, r3
    1b76:	3f10      	subs	r7, #16
    1b78:	093e      	lsrs	r6, r7, #4
    1b7a:	3601      	adds	r6, #1
    1b7c:	0136      	lsls	r6, r6, #4
    1b7e:	199e      	adds	r6, r3, r6
    1b80:	6015      	str	r5, [r2, #0]
    1b82:	6055      	str	r5, [r2, #4]
    1b84:	6095      	str	r5, [r2, #8]
    1b86:	60d5      	str	r5, [r2, #12]
    1b88:	3210      	adds	r2, #16
    1b8a:	4296      	cmp	r6, r2
    1b8c:	d1f8      	bne.n	1b80 <memset+0x44>
    1b8e:	220f      	movs	r2, #15
    1b90:	4397      	bics	r7, r2
    1b92:	3710      	adds	r7, #16
    1b94:	19db      	adds	r3, r3, r7
    1b96:	4014      	ands	r4, r2
    1b98:	2c03      	cmp	r4, #3
    1b9a:	d90d      	bls.n	1bb8 <memset+0x7c>
    1b9c:	001a      	movs	r2, r3
    1b9e:	1f27      	subs	r7, r4, #4
    1ba0:	08be      	lsrs	r6, r7, #2
    1ba2:	3601      	adds	r6, #1
    1ba4:	00b6      	lsls	r6, r6, #2
    1ba6:	199e      	adds	r6, r3, r6
    1ba8:	c220      	stmia	r2!, {r5}
    1baa:	42b2      	cmp	r2, r6
    1bac:	d1fc      	bne.n	1ba8 <memset+0x6c>
    1bae:	2203      	movs	r2, #3
    1bb0:	4397      	bics	r7, r2
    1bb2:	3704      	adds	r7, #4
    1bb4:	19db      	adds	r3, r3, r7
    1bb6:	4014      	ands	r4, r2
    1bb8:	2c00      	cmp	r4, #0
    1bba:	d005      	beq.n	1bc8 <memset+0x8c>
    1bbc:	b2c9      	uxtb	r1, r1
    1bbe:	191c      	adds	r4, r3, r4
    1bc0:	7019      	strb	r1, [r3, #0]
    1bc2:	3301      	adds	r3, #1
    1bc4:	429c      	cmp	r4, r3
    1bc6:	d1fb      	bne.n	1bc0 <memset+0x84>
    1bc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1bca:	0014      	movs	r4, r2
    1bcc:	0003      	movs	r3, r0
    1bce:	e7c6      	b.n	1b5e <memset+0x22>

00001bd0 <register_fini>:
    1bd0:	4b03      	ldr	r3, [pc, #12]	; (1be0 <register_fini+0x10>)
    1bd2:	b510      	push	{r4, lr}
    1bd4:	2b00      	cmp	r3, #0
    1bd6:	d002      	beq.n	1bde <register_fini+0xe>
    1bd8:	4802      	ldr	r0, [pc, #8]	; (1be4 <register_fini+0x14>)
    1bda:	f000 f805 	bl	1be8 <atexit>
    1bde:	bd10      	pop	{r4, pc}
    1be0:	00000000 	.word	0x00000000
    1be4:	00001bf9 	.word	0x00001bf9

00001be8 <atexit>:
    1be8:	b510      	push	{r4, lr}
    1bea:	0001      	movs	r1, r0
    1bec:	2300      	movs	r3, #0
    1bee:	2200      	movs	r2, #0
    1bf0:	2000      	movs	r0, #0
    1bf2:	f000 f81b 	bl	1c2c <__register_exitproc>
    1bf6:	bd10      	pop	{r4, pc}

00001bf8 <__libc_fini_array>:
    1bf8:	b570      	push	{r4, r5, r6, lr}
    1bfa:	4b09      	ldr	r3, [pc, #36]	; (1c20 <__libc_fini_array+0x28>)
    1bfc:	4c09      	ldr	r4, [pc, #36]	; (1c24 <__libc_fini_array+0x2c>)
    1bfe:	1ae4      	subs	r4, r4, r3
    1c00:	10a4      	asrs	r4, r4, #2
    1c02:	d009      	beq.n	1c18 <__libc_fini_array+0x20>
    1c04:	4a08      	ldr	r2, [pc, #32]	; (1c28 <__libc_fini_array+0x30>)
    1c06:	18a5      	adds	r5, r4, r2
    1c08:	00ad      	lsls	r5, r5, #2
    1c0a:	18ed      	adds	r5, r5, r3
    1c0c:	682b      	ldr	r3, [r5, #0]
    1c0e:	3c01      	subs	r4, #1
    1c10:	4798      	blx	r3
    1c12:	3d04      	subs	r5, #4
    1c14:	2c00      	cmp	r4, #0
    1c16:	d1f9      	bne.n	1c0c <__libc_fini_array+0x14>
    1c18:	f000 f980 	bl	1f1c <_fini>
    1c1c:	bd70      	pop	{r4, r5, r6, pc}
    1c1e:	46c0      	nop			; (mov r8, r8)
    1c20:	00001f28 	.word	0x00001f28
    1c24:	00001f2c 	.word	0x00001f2c
    1c28:	3fffffff 	.word	0x3fffffff

00001c2c <__register_exitproc>:
    1c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1c2e:	46de      	mov	lr, fp
    1c30:	469b      	mov	fp, r3
    1c32:	4b31      	ldr	r3, [pc, #196]	; (1cf8 <__register_exitproc+0xcc>)
    1c34:	4645      	mov	r5, r8
    1c36:	681c      	ldr	r4, [r3, #0]
    1c38:	23a4      	movs	r3, #164	; 0xa4
    1c3a:	464e      	mov	r6, r9
    1c3c:	4657      	mov	r7, sl
    1c3e:	005b      	lsls	r3, r3, #1
    1c40:	b5e0      	push	{r5, r6, r7, lr}
    1c42:	0005      	movs	r5, r0
    1c44:	58e0      	ldr	r0, [r4, r3]
    1c46:	000e      	movs	r6, r1
    1c48:	4690      	mov	r8, r2
    1c4a:	2800      	cmp	r0, #0
    1c4c:	d04b      	beq.n	1ce6 <__register_exitproc+0xba>
    1c4e:	6843      	ldr	r3, [r0, #4]
    1c50:	2b1f      	cmp	r3, #31
    1c52:	dc0d      	bgt.n	1c70 <__register_exitproc+0x44>
    1c54:	1c5c      	adds	r4, r3, #1
    1c56:	2d00      	cmp	r5, #0
    1c58:	d121      	bne.n	1c9e <__register_exitproc+0x72>
    1c5a:	3302      	adds	r3, #2
    1c5c:	009b      	lsls	r3, r3, #2
    1c5e:	6044      	str	r4, [r0, #4]
    1c60:	501e      	str	r6, [r3, r0]
    1c62:	2000      	movs	r0, #0
    1c64:	bc3c      	pop	{r2, r3, r4, r5}
    1c66:	4690      	mov	r8, r2
    1c68:	4699      	mov	r9, r3
    1c6a:	46a2      	mov	sl, r4
    1c6c:	46ab      	mov	fp, r5
    1c6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1c70:	4b22      	ldr	r3, [pc, #136]	; (1cfc <__register_exitproc+0xd0>)
    1c72:	2b00      	cmp	r3, #0
    1c74:	d03c      	beq.n	1cf0 <__register_exitproc+0xc4>
    1c76:	20c8      	movs	r0, #200	; 0xc8
    1c78:	0040      	lsls	r0, r0, #1
    1c7a:	e000      	b.n	1c7e <__register_exitproc+0x52>
    1c7c:	bf00      	nop
    1c7e:	2800      	cmp	r0, #0
    1c80:	d036      	beq.n	1cf0 <__register_exitproc+0xc4>
    1c82:	22a4      	movs	r2, #164	; 0xa4
    1c84:	2300      	movs	r3, #0
    1c86:	0052      	lsls	r2, r2, #1
    1c88:	58a1      	ldr	r1, [r4, r2]
    1c8a:	6043      	str	r3, [r0, #4]
    1c8c:	6001      	str	r1, [r0, #0]
    1c8e:	50a0      	str	r0, [r4, r2]
    1c90:	3240      	adds	r2, #64	; 0x40
    1c92:	5083      	str	r3, [r0, r2]
    1c94:	3204      	adds	r2, #4
    1c96:	5083      	str	r3, [r0, r2]
    1c98:	2401      	movs	r4, #1
    1c9a:	2d00      	cmp	r5, #0
    1c9c:	d0dd      	beq.n	1c5a <__register_exitproc+0x2e>
    1c9e:	009a      	lsls	r2, r3, #2
    1ca0:	4691      	mov	r9, r2
    1ca2:	4481      	add	r9, r0
    1ca4:	4642      	mov	r2, r8
    1ca6:	2188      	movs	r1, #136	; 0x88
    1ca8:	464f      	mov	r7, r9
    1caa:	507a      	str	r2, [r7, r1]
    1cac:	22c4      	movs	r2, #196	; 0xc4
    1cae:	0052      	lsls	r2, r2, #1
    1cb0:	4690      	mov	r8, r2
    1cb2:	4480      	add	r8, r0
    1cb4:	4642      	mov	r2, r8
    1cb6:	3987      	subs	r1, #135	; 0x87
    1cb8:	4099      	lsls	r1, r3
    1cba:	6812      	ldr	r2, [r2, #0]
    1cbc:	468a      	mov	sl, r1
    1cbe:	430a      	orrs	r2, r1
    1cc0:	4694      	mov	ip, r2
    1cc2:	4642      	mov	r2, r8
    1cc4:	4661      	mov	r1, ip
    1cc6:	6011      	str	r1, [r2, #0]
    1cc8:	2284      	movs	r2, #132	; 0x84
    1cca:	4649      	mov	r1, r9
    1ccc:	465f      	mov	r7, fp
    1cce:	0052      	lsls	r2, r2, #1
    1cd0:	508f      	str	r7, [r1, r2]
    1cd2:	2d02      	cmp	r5, #2
    1cd4:	d1c1      	bne.n	1c5a <__register_exitproc+0x2e>
    1cd6:	0002      	movs	r2, r0
    1cd8:	4655      	mov	r5, sl
    1cda:	328d      	adds	r2, #141	; 0x8d
    1cdc:	32ff      	adds	r2, #255	; 0xff
    1cde:	6811      	ldr	r1, [r2, #0]
    1ce0:	430d      	orrs	r5, r1
    1ce2:	6015      	str	r5, [r2, #0]
    1ce4:	e7b9      	b.n	1c5a <__register_exitproc+0x2e>
    1ce6:	0020      	movs	r0, r4
    1ce8:	304d      	adds	r0, #77	; 0x4d
    1cea:	30ff      	adds	r0, #255	; 0xff
    1cec:	50e0      	str	r0, [r4, r3]
    1cee:	e7ae      	b.n	1c4e <__register_exitproc+0x22>
    1cf0:	2001      	movs	r0, #1
    1cf2:	4240      	negs	r0, r0
    1cf4:	e7b6      	b.n	1c64 <__register_exitproc+0x38>
    1cf6:	46c0      	nop			; (mov r8, r8)
    1cf8:	00001f04 	.word	0x00001f04
    1cfc:	00000000 	.word	0x00000000

00001d00 <analogAccelPin>:
    1d00:	07000000 00000007                       ........

00001d08 <lookupTable.12295>:
    1d08:	ffff8d20 ffffada1 ffffce64 ffffef6c      .......d...l...
    1d18:	000010b7 0000324a 00005425 00007649     ....J2..%T..Iv..
    1d28:	000098b7 0000bb72 0000de79 000101d0     ....r...y.......
    1d38:	00012576 0001496f 00016dbc 0001925e     v%..oI...m..^...
    1d48:	0001b758 0001dcaa 00020258 00022862     X.......X...b(..
    1d58:	00024ecc 00027596 00029cc4 0002c457     .N...u......W...
    1d68:	0002ec52 000314b7 00033d89 000366ca     R........=...f..
    1d78:	0003907d 0003baa4 0003e544 0004105e     }.......D...^...
    1d88:	00043bf6 0004680e 000494ac 0004c1d1     .;...h..........
    1d98:	0004ef81 00051dc1 00054c95 00057c00     .........L...|..
    1da8:	0005ac07 0005dcae 00060dfb 00063ff2     .............?..
    1db8:	00067298 0006a5f4 0006da09 00070ee0     .r..............
    1dc8:	0007447d 00077ae8 0007b228 0007ea44     }D...z..(...D...
    1dd8:	00082344 00085d30 00089810 0008d3ef     D#..0]..........
    1de8:	000910d6 00094ecf 00098de5 0009ce23     .....N......#...
    1df8:	000a0f98 000a524f 000a9657 000adbbf     ....OR..W.......
    1e08:	000b2298 000b6af3 000bb4e2 000c007b     ."...j......{...
    1e18:	000c4dd4 000c9d03 000cee23 000d4150     .M......#...PA..
    1e28:	000d96a9 000dee4e 000e4865 000ea516     ....N...eH......
    1e38:	000f048e                                ....

00001e3c <senseBat>:
    1e3c:	05000000 00000005 0000114c 0000111c     ........L.......
    1e4c:	0000112e 00001070 0000112e 00001112     ....p...........
    1e5c:	0000112e 00001070 0000111c 0000111c     ....p...........
    1e6c:	00001112 00001070 00001078 00001078     ....p...x...x...
    1e7c:	00001078 00001134 0000111c 0000111c     x...4...........
    1e8c:	000010f0 000011d4 000010f0 00001112     ................
    1e9c:	000010f0 000011d4 0000111c 0000111c     ................
    1eac:	00001112 000011d4 00001078 00001078     ........x...x...
    1ebc:	00001078 000011de 0000156c 0000142c     x.......l...,...
    1ecc:	0000142c 00001428 00001544 00001544     ,...(...D...D...
    1edc:	00001536 00001428 00001544 00001536     6...(...D...6...
    1eec:	00001544 00001428 0000154c 0000154c     D...(...L...L...
    1efc:	0000154c 00001750                       L...P...

00001f04 <_global_impure_ptr>:
    1f04:	20000010                                ... 

00001f08 <_init>:
    1f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1f0a:	46c0      	nop			; (mov r8, r8)
    1f0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    1f0e:	bc08      	pop	{r3}
    1f10:	469e      	mov	lr, r3
    1f12:	4770      	bx	lr

00001f14 <__init_array_start>:
    1f14:	00001bd1 	.word	0x00001bd1

00001f18 <__frame_dummy_init_array_entry>:
    1f18:	000000dd                                ....

00001f1c <_fini>:
    1f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1f1e:	46c0      	nop			; (mov r8, r8)
    1f20:	bcf8      	pop	{r3, r4, r5, r6, r7}
    1f22:	bc08      	pop	{r3}
    1f24:	469e      	mov	lr, r3
    1f26:	4770      	bx	lr

00001f28 <__fini_array_start>:
    1f28:	000000b5 	.word	0x000000b5
