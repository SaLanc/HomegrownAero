
DasAltimeter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000187c  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000438  20000000  0000187c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000001a4  20000440  00001cc0  00020440  2**4
                  ALLOC
  3 .stack        00002004  200005e4  00001e64  00020440  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020438  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020460  2**0
                  CONTENTS, READONLY
  6 .debug_info   00010e7b  00000000  00000000  000204b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000013eb  00000000  00000000  00031334  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000128b  00000000  00000000  0003271f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000240  00000000  00000000  000339aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000001e8  00000000  00000000  00033bea  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00013cf8  00000000  00000000  00033dd2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00005379  00000000  00000000  00047aca  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000718ae  00000000  00000000  0004ce43  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  0000076c  00000000  00000000  000be6f4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	200025e8 	.word	0x200025e8
       4:	00000119 	.word	0x00000119
       8:	00000115 	.word	0x00000115
       c:	00000115 	.word	0x00000115
	...
      2c:	00000115 	.word	0x00000115
	...
      38:	00000115 	.word	0x00000115
      3c:	00000115 	.word	0x00000115
      40:	00000115 	.word	0x00000115
      44:	00000115 	.word	0x00000115
      48:	00000115 	.word	0x00000115
      4c:	00000115 	.word	0x00000115
      50:	00000115 	.word	0x00000115
      54:	00000115 	.word	0x00000115
      58:	00000115 	.word	0x00000115
      5c:	00000115 	.word	0x00000115
      60:	00000115 	.word	0x00000115
      64:	00000115 	.word	0x00000115
      68:	00000115 	.word	0x00000115
      6c:	00000115 	.word	0x00000115
      70:	00000115 	.word	0x00000115
      74:	00000115 	.word	0x00000115
      78:	00000115 	.word	0x00000115
      7c:	00000115 	.word	0x00000115
      80:	00000115 	.word	0x00000115
      84:	00000115 	.word	0x00000115
      88:	00000115 	.word	0x00000115
      8c:	00000115 	.word	0x00000115
      90:	00000115 	.word	0x00000115
	...
      9c:	00000115 	.word	0x00000115
      a0:	00000115 	.word	0x00000115
      a4:	00000115 	.word	0x00000115
      a8:	00000115 	.word	0x00000115
      ac:	00000115 	.word	0x00000115
      b0:	00000000 	.word	0x00000000

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000440 	.word	0x20000440
      d4:	00000000 	.word	0x00000000
      d8:	0000187c 	.word	0x0000187c

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000444 	.word	0x20000444
     108:	0000187c 	.word	0x0000187c
     10c:	0000187c 	.word	0x0000187c
     110:	00000000 	.word	0x00000000

00000114 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     114:	e7fe      	b.n	114 <Dummy_Handler>
     116:	46c0      	nop			; (mov r8, r8)

00000118 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
     118:	b570      	push	{r4, r5, r6, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
     11a:	4b2e      	ldr	r3, [pc, #184]	; (1d4 <Reset_Handler+0xbc>)
     11c:	4a2e      	ldr	r2, [pc, #184]	; (1d8 <Reset_Handler+0xc0>)
     11e:	429a      	cmp	r2, r3
     120:	d003      	beq.n	12a <Reset_Handler+0x12>
                for (; pDest < &_erelocate;) {
     122:	4b2e      	ldr	r3, [pc, #184]	; (1dc <Reset_Handler+0xc4>)
     124:	4a2b      	ldr	r2, [pc, #172]	; (1d4 <Reset_Handler+0xbc>)
     126:	429a      	cmp	r2, r3
     128:	d304      	bcc.n	134 <Reset_Handler+0x1c>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     12a:	4b2d      	ldr	r3, [pc, #180]	; (1e0 <Reset_Handler+0xc8>)
     12c:	4a2d      	ldr	r2, [pc, #180]	; (1e4 <Reset_Handler+0xcc>)
     12e:	429a      	cmp	r2, r3
     130:	d310      	bcc.n	154 <Reset_Handler+0x3c>
     132:	e01e      	b.n	172 <Reset_Handler+0x5a>
     134:	4a2c      	ldr	r2, [pc, #176]	; (1e8 <Reset_Handler+0xd0>)
     136:	4b29      	ldr	r3, [pc, #164]	; (1dc <Reset_Handler+0xc4>)
     138:	3303      	adds	r3, #3
     13a:	1a9b      	subs	r3, r3, r2
     13c:	089b      	lsrs	r3, r3, #2
     13e:	3301      	adds	r3, #1
     140:	009b      	lsls	r3, r3, #2
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
     142:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
     144:	4823      	ldr	r0, [pc, #140]	; (1d4 <Reset_Handler+0xbc>)
     146:	4924      	ldr	r1, [pc, #144]	; (1d8 <Reset_Handler+0xc0>)
     148:	588c      	ldr	r4, [r1, r2]
     14a:	5084      	str	r4, [r0, r2]
     14c:	3204      	adds	r2, #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
     14e:	429a      	cmp	r2, r3
     150:	d1fa      	bne.n	148 <Reset_Handler+0x30>
     152:	e7ea      	b.n	12a <Reset_Handler+0x12>
     154:	4a25      	ldr	r2, [pc, #148]	; (1ec <Reset_Handler+0xd4>)
     156:	4b22      	ldr	r3, [pc, #136]	; (1e0 <Reset_Handler+0xc8>)
     158:	3303      	adds	r3, #3
     15a:	1a9b      	subs	r3, r3, r2
     15c:	089b      	lsrs	r3, r3, #2
     15e:	3301      	adds	r3, #1
     160:	009b      	lsls	r3, r3, #2
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     162:	2200      	movs	r2, #0
                *pDest++ = 0;
     164:	481f      	ldr	r0, [pc, #124]	; (1e4 <Reset_Handler+0xcc>)
     166:	2100      	movs	r1, #0
     168:	1814      	adds	r4, r2, r0
     16a:	6021      	str	r1, [r4, #0]
     16c:	3204      	adds	r2, #4
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     16e:	429a      	cmp	r2, r3
     170:	d1fa      	bne.n	168 <Reset_Handler+0x50>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     172:	4a1f      	ldr	r2, [pc, #124]	; (1f0 <Reset_Handler+0xd8>)
     174:	21ff      	movs	r1, #255	; 0xff
     176:	4b1f      	ldr	r3, [pc, #124]	; (1f4 <Reset_Handler+0xdc>)
     178:	438b      	bics	r3, r1
     17a:	6093      	str	r3, [r2, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     17c:	39fd      	subs	r1, #253	; 0xfd
     17e:	2390      	movs	r3, #144	; 0x90
     180:	005b      	lsls	r3, r3, #1
     182:	4a1d      	ldr	r2, [pc, #116]	; (1f8 <Reset_Handler+0xe0>)
     184:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     186:	481d      	ldr	r0, [pc, #116]	; (1fc <Reset_Handler+0xe4>)
     188:	78c3      	ldrb	r3, [r0, #3]
     18a:	2403      	movs	r4, #3
     18c:	43a3      	bics	r3, r4
     18e:	2202      	movs	r2, #2
     190:	4313      	orrs	r3, r2
     192:	70c3      	strb	r3, [r0, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     194:	78c3      	ldrb	r3, [r0, #3]
     196:	260c      	movs	r6, #12
     198:	43b3      	bics	r3, r6
     19a:	2108      	movs	r1, #8
     19c:	430b      	orrs	r3, r1
     19e:	70c3      	strb	r3, [r0, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
     1a0:	4b17      	ldr	r3, [pc, #92]	; (200 <Reset_Handler+0xe8>)
     1a2:	7b98      	ldrb	r0, [r3, #14]
     1a4:	2530      	movs	r5, #48	; 0x30
     1a6:	43a8      	bics	r0, r5
     1a8:	0005      	movs	r5, r0
     1aa:	2020      	movs	r0, #32
     1ac:	4328      	orrs	r0, r5
     1ae:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     1b0:	7b98      	ldrb	r0, [r3, #14]
     1b2:	43b0      	bics	r0, r6
     1b4:	4301      	orrs	r1, r0
     1b6:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     1b8:	7b99      	ldrb	r1, [r3, #14]
     1ba:	43a1      	bics	r1, r4
     1bc:	430a      	orrs	r2, r1
     1be:	739a      	strb	r2, [r3, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
     1c0:	4a10      	ldr	r2, [pc, #64]	; (204 <Reset_Handler+0xec>)
     1c2:	6851      	ldr	r1, [r2, #4]
     1c4:	2380      	movs	r3, #128	; 0x80
     1c6:	430b      	orrs	r3, r1
     1c8:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
     1ca:	4b0f      	ldr	r3, [pc, #60]	; (208 <Reset_Handler+0xf0>)
     1cc:	4798      	blx	r3

        /* Branch to main function */
        main();
     1ce:	4b0f      	ldr	r3, [pc, #60]	; (20c <Reset_Handler+0xf4>)
     1d0:	4798      	blx	r3
     1d2:	e7fe      	b.n	1d2 <Reset_Handler+0xba>
     1d4:	20000000 	.word	0x20000000
     1d8:	0000187c 	.word	0x0000187c
     1dc:	20000438 	.word	0x20000438
     1e0:	200005e4 	.word	0x200005e4
     1e4:	20000440 	.word	0x20000440
     1e8:	20000004 	.word	0x20000004
     1ec:	20000444 	.word	0x20000444
     1f0:	e000ed00 	.word	0xe000ed00
     1f4:	00000000 	.word	0x00000000
     1f8:	41007000 	.word	0x41007000
     1fc:	41005000 	.word	0x41005000
     200:	41004800 	.word	0x41004800
     204:	41004000 	.word	0x41004000
     208:	000014d1 	.word	0x000014d1
     20c:	00000371 	.word	0x00000371

00000210 <SystemInit>:
 *         Initialize the System and update the SystemCoreClock variable.
 */
void SystemInit(void)
{
	// Keep the default device state after reset
	SystemCoreClock = __SYSTEM_CLOCK;
     210:	4a01      	ldr	r2, [pc, #4]	; (218 <SystemInit+0x8>)
     212:	4b02      	ldr	r3, [pc, #8]	; (21c <SystemInit+0xc>)
     214:	601a      	str	r2, [r3, #0]
	return;
}
     216:	4770      	bx	lr
     218:	000f4240 	.word	0x000f4240
     21c:	20000000 	.word	0x20000000

00000220 <init>:
#include <boardDefines.h>




void init() {
     220:	b5f0      	push	{r4, r5, r6, r7, lr}
     222:	4657      	mov	r7, sl
     224:	464e      	mov	r6, r9
     226:	4645      	mov	r5, r8
     228:	b4e0      	push	{r5, r6, r7}
     22a:	b082      	sub	sp, #8
    SystemInit();
     22c:	4b46      	ldr	r3, [pc, #280]	; (348 <init+0x128>)
     22e:	4798      	blx	r3
    GclkInit();
     230:	4b46      	ldr	r3, [pc, #280]	; (34c <init+0x12c>)
     232:	4798      	blx	r3
    delayInit();
     234:	4b46      	ldr	r3, [pc, #280]	; (350 <init+0x130>)
     236:	4798      	blx	r3
    adcInit();
     238:	4b46      	ldr	r3, [pc, #280]	; (354 <init+0x134>)
     23a:	4798      	blx	r3
    dmaInit();
     23c:	4b46      	ldr	r3, [pc, #280]	; (358 <init+0x138>)
     23e:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     240:	4b46      	ldr	r3, [pc, #280]	; (35c <init+0x13c>)
     242:	2240      	movs	r2, #64	; 0x40
     244:	601a      	str	r2, [r3, #0]
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     246:	21c1      	movs	r1, #193	; 0xc1
     248:	0089      	lsls	r1, r1, #2
     24a:	5858      	ldr	r0, [r3, r1]
     24c:	4a44      	ldr	r2, [pc, #272]	; (360 <init+0x140>)
     24e:	4002      	ands	r2, r0
     250:	505a      	str	r2, [r3, r1]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     252:	4b44      	ldr	r3, [pc, #272]	; (364 <init+0x144>)
     254:	215c      	movs	r1, #92	; 0x5c
     256:	5c5a      	ldrb	r2, [r3, r1]
     258:	2401      	movs	r4, #1
     25a:	43a2      	bics	r2, r4
     25c:	545a      	strb	r2, [r3, r1]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     25e:	2280      	movs	r2, #128	; 0x80
     260:	0552      	lsls	r2, r2, #21
     262:	609a      	str	r2, [r3, #8]

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     264:	2032      	movs	r0, #50	; 0x32
     266:	5c1a      	ldrb	r2, [r3, r0]
     268:	394d      	subs	r1, #77	; 0x4d
     26a:	4688      	mov	r8, r1
     26c:	400a      	ands	r2, r1
     26e:	2110      	movs	r1, #16
     270:	430a      	orrs	r2, r1
     272:	541a      	strb	r2, [r3, r0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     274:	3013      	adds	r0, #19
     276:	5c19      	ldrb	r1, [r3, r0]
     278:	2201      	movs	r2, #1
     27a:	4311      	orrs	r1, r2
     27c:	5419      	strb	r1, [r3, r0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     27e:	254c      	movs	r5, #76	; 0x4c
     280:	5d59      	ldrb	r1, [r3, r5]
     282:	43a1      	bics	r1, r4
     284:	5559      	strb	r1, [r3, r5]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     286:	2180      	movs	r1, #128	; 0x80
     288:	0149      	lsls	r1, r1, #5
     28a:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     28c:	274d      	movs	r7, #77	; 0x4d
     28e:	5dd9      	ldrb	r1, [r3, r7]
     290:	43a1      	bics	r1, r4
     292:	55d9      	strb	r1, [r3, r7]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     294:	2180      	movs	r1, #128	; 0x80
     296:	0189      	lsls	r1, r1, #6
     298:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     29a:	214f      	movs	r1, #79	; 0x4f
     29c:	5c58      	ldrb	r0, [r3, r1]
     29e:	43a0      	bics	r0, r4
     2a0:	5458      	strb	r0, [r3, r1]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     2a2:	5c58      	ldrb	r0, [r3, r1]
     2a4:	2602      	movs	r6, #2
     2a6:	46b2      	mov	sl, r6
     2a8:	4656      	mov	r6, sl
     2aa:	4330      	orrs	r0, r6
     2ac:	5458      	strb	r0, [r3, r1]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     2ae:	2080      	movs	r0, #128	; 0x80
     2b0:	0200      	lsls	r0, r0, #8
     2b2:	6058      	str	r0, [r3, #4]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     2b4:	2037      	movs	r0, #55	; 0x37
     2b6:	4681      	mov	r9, r0
     2b8:	5c18      	ldrb	r0, [r3, r0]
     2ba:	4646      	mov	r6, r8
     2bc:	4030      	ands	r0, r6
     2be:	2620      	movs	r6, #32
     2c0:	46b4      	mov	ip, r6
     2c2:	4666      	mov	r6, ip
     2c4:	4330      	orrs	r0, r6
     2c6:	464e      	mov	r6, r9
     2c8:	5598      	strb	r0, [r3, r6]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     2ca:	5c58      	ldrb	r0, [r3, r1]
     2cc:	4310      	orrs	r0, r2
     2ce:	5458      	strb	r0, [r3, r1]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     2d0:	3919      	subs	r1, #25
     2d2:	5c58      	ldrb	r0, [r3, r1]
     2d4:	4646      	mov	r6, r8
     2d6:	4030      	ands	r0, r6
     2d8:	4666      	mov	r6, ip
     2da:	4330      	orrs	r0, r6
     2dc:	5458      	strb	r0, [r3, r1]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     2de:	5dd8      	ldrb	r0, [r3, r7]
     2e0:	4310      	orrs	r0, r2
     2e2:	55d8      	strb	r0, [r3, r7]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     2e4:	5c58      	ldrb	r0, [r3, r1]
     2e6:	3f3e      	subs	r7, #62	; 0x3e
     2e8:	43b8      	bics	r0, r7
     2ea:	4656      	mov	r6, sl
     2ec:	4306      	orrs	r6, r0
     2ee:	545e      	strb	r6, [r3, r1]
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     2f0:	5d59      	ldrb	r1, [r3, r5]
     2f2:	430a      	orrs	r2, r1
     2f4:	555a      	strb	r2, [r3, r5]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     2f6:	2254      	movs	r2, #84	; 0x54
     2f8:	5c99      	ldrb	r1, [r3, r2]
     2fa:	43a1      	bics	r1, r4
     2fc:	5499      	strb	r1, [r3, r2]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     2fe:	2180      	movs	r1, #128	; 0x80
     300:	0349      	lsls	r1, r1, #13
     302:	6099      	str	r1, [r3, #8]




inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     304:	6199      	str	r1, [r3, #24]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     306:	5c99      	ldrb	r1, [r3, r2]
     308:	43a1      	bics	r1, r4
     30a:	5499      	strb	r1, [r3, r2]
     30c:	3a06      	subs	r2, #6
     30e:	5c99      	ldrb	r1, [r3, r2]
     310:	43a1      	bics	r1, r4
     312:	5499      	strb	r1, [r3, r2]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     314:	2180      	movs	r1, #128	; 0x80
     316:	01c9      	lsls	r1, r1, #7
     318:	6099      	str	r1, [r3, #8]




inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     31a:	6199      	str	r1, [r3, #24]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     31c:	5c99      	ldrb	r1, [r3, r2]
     31e:	43a1      	bics	r1, r4
     320:	5499      	strb	r1, [r3, r2]
    pinOut(cs_baro);
    pinHigh(cs_baro);
    pinGpio(cs_baro);


    sercomClockEnable(SPI1, 3, 4);
     322:	3a4a      	subs	r2, #74	; 0x4a
     324:	2103      	movs	r1, #3
     326:	2002      	movs	r0, #2
     328:	4b0f      	ldr	r3, [pc, #60]	; (368 <init+0x148>)
     32a:	4798      	blx	r3
    sercomSpiMasterInit(SPI1, 3, 0, 0, 0, 0x01);
     32c:	9401      	str	r4, [sp, #4]
     32e:	2300      	movs	r3, #0
     330:	9300      	str	r3, [sp, #0]
     332:	2200      	movs	r2, #0
     334:	2103      	movs	r1, #3
     336:	2002      	movs	r0, #2
     338:	4c0c      	ldr	r4, [pc, #48]	; (36c <init+0x14c>)
     33a:	47a0      	blx	r4

}
     33c:	b002      	add	sp, #8
     33e:	bc1c      	pop	{r2, r3, r4}
     340:	4690      	mov	r8, r2
     342:	4699      	mov	r9, r3
     344:	46a2      	mov	sl, r4
     346:	bdf0      	pop	{r4, r5, r6, r7, pc}
     348:	00000211 	.word	0x00000211
     34c:	000004c1 	.word	0x000004c1
     350:	00000591 	.word	0x00000591
     354:	000003c1 	.word	0x000003c1
     358:	00000609 	.word	0x00000609
     35c:	e000e100 	.word	0xe000e100
     360:	ff00ffff 	.word	0xff00ffff
     364:	41004400 	.word	0x41004400
     368:	00000afd 	.word	0x00000afd
     36c:	00000b65 	.word	0x00000b65

00000370 <main>:


int main(void) {
     370:	b570      	push	{r4, r5, r6, lr}
     372:	b09a      	sub	sp, #104	; 0x68

    init();
     374:	4b0d      	ldr	r3, [pc, #52]	; (3ac <main+0x3c>)
     376:	4798      	blx	r3

    Altimeter my_altimeter;

    initMS5803Barometer(&my_altimeter.myBarometer);
     378:	a801      	add	r0, sp, #4
     37a:	4b0d      	ldr	r3, [pc, #52]	; (3b0 <main+0x40>)
     37c:	4798      	blx	r3

    volatile uint8_t rData;
    volatile uint8_t rData2;
    volatile uint8_t rData3;
    volatile uint8_t rData4;
    volatile long counter = 0;
     37e:	2300      	movs	r3, #0
     380:	9300      	str	r3, [sp, #0]

    volatile float accelX;

    while (1) {
		
        delay_ms(50);
     382:	4e0c      	ldr	r6, [pc, #48]	; (3b4 <main+0x44>)
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
}


inline static void pinToggle(Pin p) {
    PORT->Group[p.group].OUTTGL.reg = (1<<p.pin);
     384:	4d0c      	ldr	r5, [pc, #48]	; (3b8 <main+0x48>)
		
        counter++;
        pinToggle(LedPin);


        sampleTick(&my_altimeter);
     386:	4c0d      	ldr	r4, [pc, #52]	; (3bc <main+0x4c>)

    volatile float accelX;

    while (1) {
		
        delay_ms(50);
     388:	2032      	movs	r0, #50	; 0x32
     38a:	47b0      	blx	r6
		
        counter++;
     38c:	9b00      	ldr	r3, [sp, #0]
     38e:	3301      	adds	r3, #1
     390:	9300      	str	r3, [sp, #0]
     392:	2380      	movs	r3, #128	; 0x80
     394:	055b      	lsls	r3, r3, #21
     396:	61eb      	str	r3, [r5, #28]
        pinToggle(LedPin);


        sampleTick(&my_altimeter);
     398:	a801      	add	r0, sp, #4
     39a:	47a0      	blx	r4

        uint8_t dummy_Tx = 0xFF;
        uint8_t dummy_rx;

        if (counter == 1000) {
     39c:	9a00      	ldr	r2, [sp, #0]
     39e:	23fa      	movs	r3, #250	; 0xfa
     3a0:	009b      	lsls	r3, r3, #2
     3a2:	429a      	cmp	r2, r3
     3a4:	d1f0      	bne.n	388 <main+0x18>
            counter = 0;
     3a6:	2300      	movs	r3, #0
     3a8:	9300      	str	r3, [sp, #0]
     3aa:	e7ed      	b.n	388 <main+0x18>
     3ac:	00000221 	.word	0x00000221
     3b0:	00000895 	.word	0x00000895
     3b4:	000005dd 	.word	0x000005dd
     3b8:	41004400 	.word	0x41004400
     3bc:	000008f1 	.word	0x000008f1

000003c0 <adcInit>:


#include <util.h>

void adcInit() {
     3c0:	b510      	push	{r4, lr}

    // set up clock
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;
     3c2:	4a12      	ldr	r2, [pc, #72]	; (40c <adcInit+0x4c>)
     3c4:	6a13      	ldr	r3, [r2, #32]
     3c6:	2180      	movs	r1, #128	; 0x80
     3c8:	0249      	lsls	r1, r1, #9
     3ca:	430b      	orrs	r3, r1
     3cc:	6213      	str	r3, [r2, #32]

    // divide prescaler by 512 (93.75KHz), max adc freq is 2.1MHz
    ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |
     3ce:	4910      	ldr	r1, [pc, #64]	; (410 <adcInit+0x50>)
     3d0:	22e0      	movs	r2, #224	; 0xe0
     3d2:	00d2      	lsls	r2, r2, #3
     3d4:	808a      	strh	r2, [r1, #4]
                     ADC_CTRLB_RESSEL_12BIT;

    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
     3d6:	480f      	ldr	r0, [pc, #60]	; (414 <adcInit+0x54>)
     3d8:	4b0f      	ldr	r3, [pc, #60]	; (418 <adcInit+0x58>)
     3da:	8058      	strh	r0, [r3, #2]
                        GCLK_CLKCTRL_GEN(0) |
                        GCLK_CLKCTRL_ID(ADC_GCLK_ID);

    ADC->CALIB.reg =
        ADC_CALIB_BIAS_CAL(
     3dc:	4b0f      	ldr	r3, [pc, #60]	; (41c <adcInit+0x5c>)
    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(0) |
                        GCLK_CLKCTRL_ID(ADC_GCLK_ID);

    ADC->CALIB.reg =
     3de:	681b      	ldr	r3, [r3, #0]
     3e0:	015b      	lsls	r3, r3, #5
     3e2:	4013      	ands	r3, r2
     3e4:	0018      	movs	r0, r3
        ADC_CALIB_BIAS_CAL(
            (*(uint32_t *)ADC_FUSES_BIASCAL_ADDR >> ADC_FUSES_BIASCAL_Pos)
        ) |
        ADC_CALIB_LINEARITY_CAL(
     3e6:	4b0e      	ldr	r3, [pc, #56]	; (420 <adcInit+0x60>)
    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(0) |
                        GCLK_CLKCTRL_ID(ADC_GCLK_ID);

    ADC->CALIB.reg =
     3e8:	685a      	ldr	r2, [r3, #4]
     3ea:	0154      	lsls	r4, r2, #5
     3ec:	681a      	ldr	r2, [r3, #0]
     3ee:	0ed3      	lsrs	r3, r2, #27
     3f0:	4323      	orrs	r3, r4
     3f2:	22ff      	movs	r2, #255	; 0xff
     3f4:	4013      	ands	r3, r2
     3f6:	4303      	orrs	r3, r0
     3f8:	850b      	strh	r3, [r1, #40]	; 0x28
        ) |
        ADC_CALIB_LINEARITY_CAL(
            (*(uint64_t *)ADC_FUSES_LINEARITY_0_ADDR >> ADC_FUSES_LINEARITY_0_Pos)
        );

    ADC->REFCTRL.reg = ADC_REFCTRL_REFSEL_INTVCC1;
     3fa:	2302      	movs	r3, #2
     3fc:	704b      	strb	r3, [r1, #1]

    ADC->CTRLA.reg = ADC_CTRLA_ENABLE; // enable
     3fe:	700b      	strb	r3, [r1, #0]
    while(ADC->STATUS.reg & ADC_STATUS_SYNCBUSY);
     400:	000a      	movs	r2, r1
     402:	7e53      	ldrb	r3, [r2, #25]
     404:	b25b      	sxtb	r3, r3
     406:	2b00      	cmp	r3, #0
     408:	dbfb      	blt.n	402 <adcInit+0x42>
}
     40a:	bd10      	pop	{r4, pc}
     40c:	40000400 	.word	0x40000400
     410:	42004000 	.word	0x42004000
     414:	0000401e 	.word	0x0000401e
     418:	40000c00 	.word	0x40000c00
     41c:	00806024 	.word	0x00806024
     420:	00806020 	.word	0x00806020

00000424 <adcSample>:



u16_t adcSample() {
    ADC->SWTRIG.reg = ADC_SWTRIG_START;
     424:	2202      	movs	r2, #2
     426:	4b05      	ldr	r3, [pc, #20]	; (43c <adcSample+0x18>)
     428:	731a      	strb	r2, [r3, #12]
    while(!(ADC->INTFLAG.reg & ADC_INTFLAG_RESRDY)); // wait until result is ready
     42a:	0019      	movs	r1, r3
     42c:	3a01      	subs	r2, #1
     42e:	7e0b      	ldrb	r3, [r1, #24]
     430:	4213      	tst	r3, r2
     432:	d0fc      	beq.n	42e <adcSample+0xa>
    return ADC->RESULT.reg;
     434:	4b01      	ldr	r3, [pc, #4]	; (43c <adcSample+0x18>)
     436:	8b58      	ldrh	r0, [r3, #26]
     438:	b280      	uxth	r0, r0
}
     43a:	4770      	bx	lr
     43c:	42004000 	.word	0x42004000

00000440 <adc_read>:


u16_t adc_read(Pin p) {
     440:	b530      	push	{r4, r5, lr}
     442:	b083      	sub	sp, #12
     444:	0c03      	lsrs	r3, r0, #16
     446:	0002      	movs	r2, r0
     448:	9000      	str	r0, [sp, #0]
     44a:	9101      	str	r1, [sp, #4]
     44c:	b2c9      	uxtb	r1, r1
     44e:	b2db      	uxtb	r3, r3
     450:	0e10      	lsrs	r0, r2, #24
    u16_t buad;

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
     452:	07c2      	lsls	r2, r0, #31
     454:	d50c      	bpl.n	470 <adc_read+0x30>
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     456:	0842      	lsrs	r2, r0, #1
     458:	01dc      	lsls	r4, r3, #7
     45a:	1912      	adds	r2, r2, r4
     45c:	4c14      	ldr	r4, [pc, #80]	; (4b0 <adc_read+0x70>)
     45e:	46a4      	mov	ip, r4
     460:	4462      	add	r2, ip
     462:	7814      	ldrb	r4, [r2, #0]
     464:	250f      	movs	r5, #15
     466:	402c      	ands	r4, r5
     468:	2510      	movs	r5, #16
     46a:	432c      	orrs	r4, r5
     46c:	7014      	strb	r4, [r2, #0]
     46e:	e00b      	b.n	488 <adc_read+0x48>
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     470:	0842      	lsrs	r2, r0, #1
     472:	01dc      	lsls	r4, r3, #7
     474:	1912      	adds	r2, r2, r4
     476:	4c0e      	ldr	r4, [pc, #56]	; (4b0 <adc_read+0x70>)
     478:	46a4      	mov	ip, r4
     47a:	4462      	add	r2, ip
     47c:	7814      	ldrb	r4, [r2, #0]
     47e:	250f      	movs	r5, #15
     480:	43ac      	bics	r4, r5
     482:	2501      	movs	r5, #1
     484:	432c      	orrs	r4, r5
     486:	7014      	strb	r4, [r2, #0]
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     488:	01db      	lsls	r3, r3, #7
     48a:	18c0      	adds	r0, r0, r3
     48c:	4b09      	ldr	r3, [pc, #36]	; (4b4 <adc_read+0x74>)
     48e:	469c      	mov	ip, r3
     490:	4460      	add	r0, ip
     492:	7802      	ldrb	r2, [r0, #0]
     494:	2301      	movs	r3, #1
     496:	4313      	orrs	r3, r2
     498:	7003      	strb	r3, [r0, #0]
    // switch pin mux to analog in
    pinAnalog(p);

    ADC->INPUTCTRL.reg = (ADC_INPUTCTRL_MUXPOS(p.chan) // select from proper pin
                          | ADC_INPUTCTRL_MUXNEG_GND // 0 = gnd
                          | ADC_INPUTCTRL_GAIN_1X);
     49a:	231f      	movs	r3, #31
     49c:	4019      	ands	r1, r3
     49e:	23c0      	movs	r3, #192	; 0xc0
     4a0:	015b      	lsls	r3, r3, #5
     4a2:	4319      	orrs	r1, r3

u16_t adc_read(Pin p) {
    // switch pin mux to analog in
    pinAnalog(p);

    ADC->INPUTCTRL.reg = (ADC_INPUTCTRL_MUXPOS(p.chan) // select from proper pin
     4a4:	4b04      	ldr	r3, [pc, #16]	; (4b8 <adc_read+0x78>)
     4a6:	6119      	str	r1, [r3, #16]
                          | ADC_INPUTCTRL_MUXNEG_GND // 0 = gnd
                          | ADC_INPUTCTRL_GAIN_1X);

    return adcSample();
     4a8:	4b04      	ldr	r3, [pc, #16]	; (4bc <adc_read+0x7c>)
     4aa:	4798      	blx	r3
     4ac:	b003      	add	sp, #12
     4ae:	bd30      	pop	{r4, r5, pc}
     4b0:	41004430 	.word	0x41004430
     4b4:	41004440 	.word	0x41004440
     4b8:	42004000 	.word	0x42004000
     4bc:	00000425 	.word	0x00000425

000004c0 <GclkInit>:


static uint32_t cycles_per_ms = 48000000UL / 1000;
static uint32_t cycles_per_us = 48000000UL / 1000000;

void GclkInit() {
     4c0:	b510      	push	{r4, lr}


    SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     4c2:	4a1c      	ldr	r2, [pc, #112]	; (534 <GclkInit+0x74>)
     4c4:	23c2      	movs	r3, #194	; 0xc2
     4c6:	00db      	lsls	r3, r3, #3
     4c8:	6093      	str	r3, [r2, #8]
                           SYSCTRL_INTFLAG_DFLLRDY;
    NVMCTRL->CTRLB.reg |= NVMCTRL_CTRLB_RWS_HALF;
     4ca:	491b      	ldr	r1, [pc, #108]	; (538 <GclkInit+0x78>)
     4cc:	6848      	ldr	r0, [r1, #4]
     4ce:	2302      	movs	r3, #2
     4d0:	4303      	orrs	r3, r0
     4d2:	604b      	str	r3, [r1, #4]


// start and enable external 32k crystal
    SYSCTRL->XOSC32K.reg = SYSCTRL_XOSC32K_ENABLE |
     4d4:	4b19      	ldr	r3, [pc, #100]	; (53c <GclkInit+0x7c>)
     4d6:	8293      	strh	r3, [r2, #20]
                           SYSCTRL_XOSC32K_XTALEN |
                           SYSCTRL_XOSC32K_EN32K |
                           ( 6 << SYSCTRL_XOSC32K_STARTUP_Pos);

    //wait for crystal to warm up
    while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_XOSC32KRDY)) == 0);
     4d8:	0011      	movs	r1, r2
     4da:	2202      	movs	r2, #2
     4dc:	68cb      	ldr	r3, [r1, #12]
     4de:	421a      	tst	r2, r3
     4e0:	d0fc      	beq.n	4dc <GclkInit+0x1c>

#define NVM_DFLL_COARSE_POS    58
#define NVM_DFLL_COARSE_SIZE   6
#define NVM_DFLL_FINE_POS      64
#define NVM_DFLL_FINE_SIZE     10
    uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
     4e2:	4b17      	ldr	r3, [pc, #92]	; (540 <GclkInit+0x80>)
     4e4:	681c      	ldr	r4, [r3, #0]
     4e6:	0ea4      	lsrs	r4, r4, #26
                         + (NVM_DFLL_COARSE_POS / 32))
                       >> (NVM_DFLL_COARSE_POS % 32))
                     & ((1 << NVM_DFLL_COARSE_SIZE) - 1);
    if (coarse == 0x3f) {
     4e8:	2c3f      	cmp	r4, #63	; 0x3f
     4ea:	d100      	bne.n	4ee <GclkInit+0x2e>
        coarse = 0x1f;
     4ec:	3c20      	subs	r4, #32
    }
    uint32_t fine =( *((uint32_t *)(NVMCTRL_OTP4)
                       + (NVM_DFLL_FINE_POS / 32))
                     >> (NVM_DFLL_FINE_POS % 32))
     4ee:	4b15      	ldr	r3, [pc, #84]	; (544 <GclkInit+0x84>)
                       >> (NVM_DFLL_COARSE_POS % 32))
                     & ((1 << NVM_DFLL_COARSE_SIZE) - 1);
    if (coarse == 0x3f) {
        coarse = 0x1f;
    }
    uint32_t fine =( *((uint32_t *)(NVMCTRL_OTP4)
     4f0:	6818      	ldr	r0, [r3, #0]
     4f2:	0580      	lsls	r0, r0, #22
     4f4:	0d80      	lsrs	r0, r0, #22
                       + (NVM_DFLL_FINE_POS / 32))
                     >> (NVM_DFLL_FINE_POS % 32))
                   & ((1 << NVM_DFLL_FINE_SIZE) - 1);
    if (fine == 0x3ff) {
     4f6:	4b14      	ldr	r3, [pc, #80]	; (548 <GclkInit+0x88>)
     4f8:	4298      	cmp	r0, r3
     4fa:	d100      	bne.n	4fe <GclkInit+0x3e>
        fine = 0x1ff;
     4fc:	4813      	ldr	r0, [pc, #76]	; (54c <GclkInit+0x8c>)
    }


    // Disable ONDEMAND mode while writing configurations (errata 9905)
    SYSCTRL->DFLLCTRL.reg = dfll_ctrl_usb & ~SYSCTRL_DFLLCTRL_ONDEMAND;
     4fe:	4a14      	ldr	r2, [pc, #80]	; (550 <GclkInit+0x90>)
     500:	4b0c      	ldr	r3, [pc, #48]	; (534 <GclkInit+0x74>)
     502:	849a      	strh	r2, [r3, #36]	; 0x24
    while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_DFLLRDY)) == 0);
     504:	0019      	movs	r1, r3
     506:	2210      	movs	r2, #16
     508:	68cb      	ldr	r3, [r1, #12]
     50a:	421a      	tst	r2, r3
     50c:	d0fc      	beq.n	508 <GclkInit+0x48>
    SYSCTRL->DFLLVAL.reg = SYSCTRL_DFLLVAL_COARSE(coarse) | SYSCTRL_DFLLVAL_FINE(fine);
     50e:	02a4      	lsls	r4, r4, #10
     510:	4320      	orrs	r0, r4
     512:	4b08      	ldr	r3, [pc, #32]	; (534 <GclkInit+0x74>)
     514:	6298      	str	r0, [r3, #40]	; 0x28


    //Wait and see if the DFLL output is good . . .
    while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_DFLLRDY)) == 0);
     516:	0019      	movs	r1, r3
     518:	2210      	movs	r2, #16
     51a:	68cb      	ldr	r3, [r1, #12]
     51c:	421a      	tst	r2, r3
     51e:	d0fc      	beq.n	51a <GclkInit+0x5a>


    SYSCTRL->DFLLCTRL.reg = dfll_ctrl_usb;
     520:	4a0c      	ldr	r2, [pc, #48]	; (554 <GclkInit+0x94>)
     522:	4b04      	ldr	r3, [pc, #16]	; (534 <GclkInit+0x74>)
     524:	849a      	strh	r2, [r3, #36]	; 0x24


    //For generic clock generator 0, select the DFLL48 Clock as input
    GCLK->GENDIV.reg  = (GCLK_GENDIV_DIV(1)  | GCLK_GENDIV_ID(0));
     526:	4b0c      	ldr	r3, [pc, #48]	; (558 <GclkInit+0x98>)
     528:	2280      	movs	r2, #128	; 0x80
     52a:	0052      	lsls	r2, r2, #1
     52c:	609a      	str	r2, [r3, #8]
    GCLK->GENCTRL.reg = (GCLK_GENCTRL_ID(0)  | (GCLK_GENCTRL_SRC_DFLL48M) | (GCLK_GENCTRL_GENEN));
     52e:	4a0b      	ldr	r2, [pc, #44]	; (55c <GclkInit+0x9c>)
     530:	605a      	str	r2, [r3, #4]
}
     532:	bd10      	pop	{r4, pc}
     534:	40000800 	.word	0x40000800
     538:	41004000 	.word	0x41004000
     53c:	0000060e 	.word	0x0000060e
     540:	00806024 	.word	0x00806024
     544:	00806028 	.word	0x00806028
     548:	000003ff 	.word	0x000003ff
     54c:	000001ff 	.word	0x000001ff
     550:	00000522 	.word	0x00000522
     554:	000005a2 	.word	0x000005a2
     558:	40000c00 	.word	0x40000c00
     55c:	00010700 	.word	0x00010700

00000560 <gclkEnable>:

void gclkEnable(u32_t id, u32_t src, u32_t div) {
     560:	b510      	push	{r4, lr}
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
     562:	230f      	movs	r3, #15
     564:	4018      	ands	r0, r3
     566:	0212      	lsls	r2, r2, #8
     568:	4b07      	ldr	r3, [pc, #28]	; (588 <gclkEnable+0x28>)
     56a:	401a      	ands	r2, r3
     56c:	4302      	orrs	r2, r0
     56e:	4c07      	ldr	r4, [pc, #28]	; (58c <gclkEnable+0x2c>)
     570:	60a2      	str	r2, [r4, #8]
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     572:	0209      	lsls	r1, r1, #8
     574:	23f8      	movs	r3, #248	; 0xf8
     576:	015b      	lsls	r3, r3, #5
     578:	4019      	ands	r1, r3
     57a:	2380      	movs	r3, #128	; 0x80
     57c:	025b      	lsls	r3, r3, #9
     57e:	4319      	orrs	r1, r3
     580:	4308      	orrs	r0, r1
     582:	6060      	str	r0, [r4, #4]
}
     584:	bd10      	pop	{r4, pc}
     586:	46c0      	nop			; (mov r8, r8)
     588:	00ffff00 	.word	0x00ffff00
     58c:	40000c00 	.word	0x40000c00

00000590 <delayInit>:


void delayInit(void) {
    cycles_per_ms = 48000000UL;
    cycles_per_ms /= 1000;
     590:	4b04      	ldr	r3, [pc, #16]	; (5a4 <delayInit+0x14>)
     592:	4a05      	ldr	r2, [pc, #20]	; (5a8 <delayInit+0x18>)
     594:	601a      	str	r2, [r3, #0]
    cycles_per_us = cycles_per_ms / 1000;
     596:	2230      	movs	r2, #48	; 0x30
     598:	605a      	str	r2, [r3, #4]

    SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     59a:	3a2b      	subs	r2, #43	; 0x2b
     59c:	4b03      	ldr	r3, [pc, #12]	; (5ac <delayInit+0x1c>)
     59e:	601a      	str	r2, [r3, #0]
}
     5a0:	4770      	bx	lr
     5a2:	46c0      	nop			; (mov r8, r8)
     5a4:	20000004 	.word	0x20000004
     5a8:	0000bb80 	.word	0x0000bb80
     5ac:	e000e010 	.word	0xe000e010

000005b0 <delay_us>:
/**
 * \brief Delay loop to delay at least n number of microseconds
 *
 * \param n  Number of microseconds to wait
 */
void delay_us(uint32_t n) {
     5b0:	b530      	push	{r4, r5, lr}
    while (n--) {
        /* Devide up to blocks of 10u */
        delay_cycles(cycles_per_us);
     5b2:	4b08      	ldr	r3, [pc, #32]	; (5d4 <delay_us+0x24>)
     5b4:	685c      	ldr	r4, [r3, #4]


static inline void delay_cycles(
const uint32_t n) {
	if (n > 0) {
		SysTick->LOAD = n;
     5b6:	4a08      	ldr	r2, [pc, #32]	; (5d8 <delay_us+0x28>)
		SysTick->VAL = 0;
     5b8:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     5ba:	2180      	movs	r1, #128	; 0x80
     5bc:	0249      	lsls	r1, r1, #9
 * \brief Delay loop to delay at least n number of microseconds
 *
 * \param n  Number of microseconds to wait
 */
void delay_us(uint32_t n) {
    while (n--) {
     5be:	e006      	b.n	5ce <delay_us+0x1e>



static inline void delay_cycles(
const uint32_t n) {
	if (n > 0) {
     5c0:	2c00      	cmp	r4, #0
     5c2:	d004      	beq.n	5ce <delay_us+0x1e>
		SysTick->LOAD = n;
     5c4:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     5c6:	6095      	str	r5, [r2, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     5c8:	6813      	ldr	r3, [r2, #0]
     5ca:	420b      	tst	r3, r1
     5cc:	d0fc      	beq.n	5c8 <delay_us+0x18>
     5ce:	3801      	subs	r0, #1
     5d0:	d2f6      	bcs.n	5c0 <delay_us+0x10>
        /* Devide up to blocks of 10u */
        delay_cycles(cycles_per_us);
    }
}
     5d2:	bd30      	pop	{r4, r5, pc}
     5d4:	20000004 	.word	0x20000004
     5d8:	e000e010 	.word	0xe000e010

000005dc <delay_ms>:
/**
 * \brief Delay loop to delay at least n number of milliseconds
 *
 * \param n  Number of milliseconds to wait
 */
void delay_ms(uint32_t n) {
     5dc:	b530      	push	{r4, r5, lr}
    while (n--) {
        /* Devide up to blocks of 1ms */
        delay_cycles(cycles_per_ms);
     5de:	4b08      	ldr	r3, [pc, #32]	; (600 <delay_ms+0x24>)
     5e0:	681c      	ldr	r4, [r3, #0]


static inline void delay_cycles(
const uint32_t n) {
	if (n > 0) {
		SysTick->LOAD = n;
     5e2:	4a08      	ldr	r2, [pc, #32]	; (604 <delay_ms+0x28>)
		SysTick->VAL = 0;
     5e4:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     5e6:	2180      	movs	r1, #128	; 0x80
     5e8:	0249      	lsls	r1, r1, #9
 * \brief Delay loop to delay at least n number of milliseconds
 *
 * \param n  Number of milliseconds to wait
 */
void delay_ms(uint32_t n) {
    while (n--) {
     5ea:	e006      	b.n	5fa <delay_ms+0x1e>



static inline void delay_cycles(
const uint32_t n) {
	if (n > 0) {
     5ec:	2c00      	cmp	r4, #0
     5ee:	d004      	beq.n	5fa <delay_ms+0x1e>
		SysTick->LOAD = n;
     5f0:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     5f2:	6095      	str	r5, [r2, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     5f4:	6813      	ldr	r3, [r2, #0]
     5f6:	420b      	tst	r3, r1
     5f8:	d0fc      	beq.n	5f4 <delay_ms+0x18>
     5fa:	3801      	subs	r0, #1
     5fc:	d2f6      	bcs.n	5ec <delay_ms+0x10>
        /* Devide up to blocks of 1ms */
        delay_cycles(cycles_per_ms);
    }
     5fe:	bd30      	pop	{r4, r5, pc}
     600:	20000004 	.word	0x20000004
     604:	e000e010 	.word	0xe000e010

00000608 <dmaInit>:
#include <util.h>

DMA_DESC_ALIGN DmacDescriptor dma_descriptors[12];
DMA_DESC_ALIGN DmacDescriptor dma_descriptors_wb[12];

void dmaInit() {
     608:	b570      	push	{r4, r5, r6, lr}
	memset(&dma_descriptors, 0, sizeof(dma_descriptors));
     60a:	4d11      	ldr	r5, [pc, #68]	; (650 <dmaInit+0x48>)
     60c:	22c0      	movs	r2, #192	; 0xc0
     60e:	2100      	movs	r1, #0
     610:	0028      	movs	r0, r5
     612:	4e10      	ldr	r6, [pc, #64]	; (654 <dmaInit+0x4c>)
     614:	47b0      	blx	r6
	memset(&dma_descriptors_wb, 0, sizeof(dma_descriptors_wb));
     616:	4c10      	ldr	r4, [pc, #64]	; (658 <dmaInit+0x50>)
     618:	22c0      	movs	r2, #192	; 0xc0
     61a:	2100      	movs	r1, #0
     61c:	0020      	movs	r0, r4
     61e:	47b0      	blx	r6

	PM->AHBMASK.reg |= PM_AHBMASK_DMAC;
     620:	4b0e      	ldr	r3, [pc, #56]	; (65c <dmaInit+0x54>)
     622:	6959      	ldr	r1, [r3, #20]
     624:	2220      	movs	r2, #32
     626:	430a      	orrs	r2, r1
     628:	615a      	str	r2, [r3, #20]
	PM->APBBMASK.reg |= PM_APBBMASK_DMAC;
     62a:	69d9      	ldr	r1, [r3, #28]
     62c:	2210      	movs	r2, #16
     62e:	430a      	orrs	r2, r1
     630:	61da      	str	r2, [r3, #28]

	DMAC->CTRL.bit.DMAENABLE = 0;
     632:	4b0b      	ldr	r3, [pc, #44]	; (660 <dmaInit+0x58>)
     634:	881a      	ldrh	r2, [r3, #0]
     636:	2102      	movs	r1, #2
     638:	438a      	bics	r2, r1
     63a:	801a      	strh	r2, [r3, #0]
	DMAC->CTRL.bit.SWRST = 1;
     63c:	8819      	ldrh	r1, [r3, #0]
     63e:	2201      	movs	r2, #1
     640:	430a      	orrs	r2, r1
     642:	801a      	strh	r2, [r3, #0]

	DMAC->BASEADDR.reg = (unsigned) &dma_descriptors;
     644:	635d      	str	r5, [r3, #52]	; 0x34
	DMAC->WRBADDR.reg = (unsigned) &dma_descriptors_wb;
     646:	639c      	str	r4, [r3, #56]	; 0x38

	DMAC->CTRL.reg = DMAC_CTRL_DMAENABLE | DMAC_CTRL_LVLEN(0xf);
     648:	4a06      	ldr	r2, [pc, #24]	; (664 <dmaInit+0x5c>)
     64a:	801a      	strh	r2, [r3, #0]
}
     64c:	bd70      	pop	{r4, r5, r6, pc}
     64e:	46c0      	nop			; (mov r8, r8)
     650:	20000520 	.word	0x20000520
     654:	00001519 	.word	0x00001519
     658:	20000460 	.word	0x20000460
     65c:	40000400 	.word	0x40000400
     660:	41004800 	.word	0x41004800
     664:	00000f02 	.word	0x00000f02

00000668 <flight>:
#include <util.h>

enum flight_state my_flight_state; // current flight state.


void flight() {
     668:	b510      	push	{r4, lr}

    delay_ms(1);
     66a:	2001      	movs	r0, #1
     66c:	4b02      	ldr	r3, [pc, #8]	; (678 <flight+0x10>)
     66e:	4798      	blx	r3

    my_flight_state = flightStatrup;
     670:	2200      	movs	r2, #0
     672:	4b02      	ldr	r3, [pc, #8]	; (67c <flight+0x14>)
     674:	701a      	strb	r2, [r3, #0]

        break;
    }


     676:	bd10      	pop	{r4, pc}
     678:	000005dd 	.word	0x000005dd
     67c:	200005e0 	.word	0x200005e0

00000680 <readMS5803AdcResults>:
#include <MS5803.h>
#include <boardDefines.h>
#include <math.h>


u32_t readMS5803AdcResults() {
     680:	b5f0      	push	{r4, r5, r6, r7, lr}
     682:	4647      	mov	r7, r8
     684:	b480      	push	{r7}
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     686:	4f0e      	ldr	r7, [pc, #56]	; (6c0 <readMS5803AdcResults+0x40>)
     688:	2480      	movs	r4, #128	; 0x80
     68a:	01e4      	lsls	r4, r4, #7
     68c:	617c      	str	r4, [r7, #20]

    u8_t dummy_tx = 0xFF;
    u8_t dummy_rx;

    pinLow(cs_baro);
    dummy_rx = spiDataTransfer(SPI1, cmdAdcRead_);
     68e:	2100      	movs	r1, #0
     690:	2002      	movs	r0, #2
     692:	4d0c      	ldr	r5, [pc, #48]	; (6c4 <readMS5803AdcResults+0x44>)
     694:	47a8      	blx	r5
    u8_t _byte1 = spiDataTransfer(SPI1,dummy_tx);
     696:	21ff      	movs	r1, #255	; 0xff
     698:	2002      	movs	r0, #2
     69a:	47a8      	blx	r5
     69c:	0006      	movs	r6, r0
    u8_t _byte2 = spiDataTransfer(SPI1,dummy_tx);
     69e:	21ff      	movs	r1, #255	; 0xff
     6a0:	2002      	movs	r0, #2
     6a2:	47a8      	blx	r5
     6a4:	4680      	mov	r8, r0
    u8_t _byte3 = spiDataTransfer(SPI1,dummy_tx);
     6a6:	21ff      	movs	r1, #255	; 0xff
     6a8:	2002      	movs	r0, #2
     6aa:	47a8      	blx	r5




inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     6ac:	61bc      	str	r4, [r7, #24]
    pinHigh(cs_baro);

    u32_t _receive = (_byte1 << 16) | (_byte2 << 8) | (_byte3);
    return _receive;
     6ae:	0436      	lsls	r6, r6, #16
     6b0:	4643      	mov	r3, r8
     6b2:	021c      	lsls	r4, r3, #8
     6b4:	4334      	orrs	r4, r6
     6b6:	4320      	orrs	r0, r4
}
     6b8:	bc04      	pop	{r2}
     6ba:	4690      	mov	r8, r2
     6bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
     6be:	46c0      	nop			; (mov r8, r8)
     6c0:	41004400 	.word	0x41004400
     6c4:	00000bdd 	.word	0x00000bdd

000006c8 <ConvertPressureTemperature>:

void ConvertPressureTemperature(Barometer *my_barometer) {
     6c8:	b5f0      	push	{r4, r5, r6, r7, lr}
     6ca:	464f      	mov	r7, r9
     6cc:	4646      	mov	r6, r8
     6ce:	b4c0      	push	{r6, r7}
     6d0:	b08b      	sub	sp, #44	; 0x2c
     6d2:	0007      	movs	r7, r0
    volatile const u16_t C1 = my_barometer->coefficients_[0];
     6d4:	8803      	ldrh	r3, [r0, #0]
     6d6:	251e      	movs	r5, #30
     6d8:	aa02      	add	r2, sp, #8
     6da:	4694      	mov	ip, r2
     6dc:	4465      	add	r5, ip
     6de:	802b      	strh	r3, [r5, #0]
    volatile const u16_t C2 = my_barometer->coefficients_[1];
     6e0:	8843      	ldrh	r3, [r0, #2]
     6e2:	8393      	strh	r3, [r2, #28]
    volatile const u16_t C3 = my_barometer->coefficients_[2];
     6e4:	8883      	ldrh	r3, [r0, #4]
     6e6:	8353      	strh	r3, [r2, #26]
    volatile const u16_t C4 = my_barometer->coefficients_[3];
     6e8:	88c3      	ldrh	r3, [r0, #6]
     6ea:	ae08      	add	r6, sp, #32
     6ec:	8033      	strh	r3, [r6, #0]
    volatile const u16_t C5 = my_barometer->coefficients_[4];
     6ee:	8903      	ldrh	r3, [r0, #8]
     6f0:	2216      	movs	r2, #22
     6f2:	4462      	add	r2, ip
     6f4:	8013      	strh	r3, [r2, #0]
    volatile const u16_t C6 = my_barometer->coefficients_[5];
     6f6:	8941      	ldrh	r1, [r0, #10]
     6f8:	ab07      	add	r3, sp, #28
     6fa:	8019      	strh	r1, [r3, #0]

    // calculate 1st order pressure and temperature (MS5607 1st order algorithm)
    const  int32_t dT = (my_barometer->rawTempatureData) - ((int32_t)C5 << 8);
     6fc:	8814      	ldrh	r4, [r2, #0]
    my_barometer->temperatureCelcus  = 2000 + (((int64_t)dT * C6) >> 32) ;
     6fe:	0224      	lsls	r4, r4, #8
     700:	6902      	ldr	r2, [r0, #16]
     702:	1b14      	subs	r4, r2, r4
     704:	17e2      	asrs	r2, r4, #31
     706:	0011      	movs	r1, r2
     708:	8818      	ldrh	r0, [r3, #0]
     70a:	b280      	uxth	r0, r0
     70c:	4b2b      	ldr	r3, [pc, #172]	; (7bc <ConvertPressureTemperature+0xf4>)
     70e:	4699      	mov	r9, r3
     710:	0022      	movs	r2, r4
     712:	9101      	str	r1, [sp, #4]
     714:	000b      	movs	r3, r1
     716:	2100      	movs	r1, #0
     718:	47c8      	blx	r9
     71a:	23fa      	movs	r3, #250	; 0xfa
     71c:	00db      	lsls	r3, r3, #3
     71e:	469c      	mov	ip, r3
     720:	4461      	add	r1, ip
     722:	6179      	str	r1, [r7, #20]

    volatile const  int64_t OFF   = ((int64_t)C2 << 16) + (((C4 * (int64_t)dT)) >> 7);
     724:	ab02      	add	r3, sp, #8
     726:	8b9b      	ldrh	r3, [r3, #28]
     728:	b29b      	uxth	r3, r3
     72a:	4698      	mov	r8, r3
     72c:	8830      	ldrh	r0, [r6, #0]
     72e:	b280      	uxth	r0, r0
     730:	0022      	movs	r2, r4
     732:	9b01      	ldr	r3, [sp, #4]
     734:	2100      	movs	r1, #0
     736:	47c8      	blx	r9
     738:	064e      	lsls	r6, r1, #25
     73a:	09c2      	lsrs	r2, r0, #7
     73c:	4332      	orrs	r2, r6
     73e:	11cb      	asrs	r3, r1, #7
     740:	2100      	movs	r1, #0
     742:	4646      	mov	r6, r8
     744:	0430      	lsls	r0, r6, #16
     746:	1812      	adds	r2, r2, r0
     748:	414b      	adcs	r3, r1
     74a:	9204      	str	r2, [sp, #16]
     74c:	9305      	str	r3, [sp, #20]
    volatile const  int64_t SENS  =  ((int64_t)C1 << 15) + (((C3 * (int64_t)dT)) >> 8);
     74e:	882d      	ldrh	r5, [r5, #0]
     750:	b2ad      	uxth	r5, r5
     752:	aa02      	add	r2, sp, #8
     754:	8b50      	ldrh	r0, [r2, #26]
     756:	b280      	uxth	r0, r0
     758:	0022      	movs	r2, r4
     75a:	9b01      	ldr	r3, [sp, #4]
     75c:	2100      	movs	r1, #0
     75e:	47c8      	blx	r9
     760:	060c      	lsls	r4, r1, #24
     762:	0a02      	lsrs	r2, r0, #8
     764:	4322      	orrs	r2, r4
     766:	120b      	asrs	r3, r1, #8
     768:	2100      	movs	r1, #0
     76a:	03e8      	lsls	r0, r5, #15
     76c:	1812      	adds	r2, r2, r0
     76e:	414b      	adcs	r3, r1
     770:	9202      	str	r2, [sp, #8]
     772:	9303      	str	r3, [sp, #12]
    my_barometer->pressureMbar = (((my_barometer->rawPressureData * SENS) / 2097152) - OFF) / 32768;
     774:	9a02      	ldr	r2, [sp, #8]
     776:	9b03      	ldr	r3, [sp, #12]
     778:	9c04      	ldr	r4, [sp, #16]
     77a:	9d05      	ldr	r5, [sp, #20]
     77c:	68f8      	ldr	r0, [r7, #12]
     77e:	2100      	movs	r1, #0
     780:	47c8      	blx	r9
     782:	17ce      	asrs	r6, r1, #31
     784:	02f6      	lsls	r6, r6, #11
     786:	0af2      	lsrs	r2, r6, #11
     788:	2300      	movs	r3, #0
     78a:	1880      	adds	r0, r0, r2
     78c:	4159      	adcs	r1, r3
     78e:	02ce      	lsls	r6, r1, #11
     790:	0d42      	lsrs	r2, r0, #21
     792:	4332      	orrs	r2, r6
     794:	154b      	asrs	r3, r1, #21
     796:	1b12      	subs	r2, r2, r4
     798:	41ab      	sbcs	r3, r5
     79a:	17dc      	asrs	r4, r3, #31
     79c:	0464      	lsls	r4, r4, #17
     79e:	0c60      	lsrs	r0, r4, #17
     7a0:	2100      	movs	r1, #0
     7a2:	1812      	adds	r2, r2, r0
     7a4:	414b      	adcs	r3, r1
     7a6:	0011      	movs	r1, r2
     7a8:	045b      	lsls	r3, r3, #17
     7aa:	0bca      	lsrs	r2, r1, #15
     7ac:	431a      	orrs	r2, r3
     7ae:	61fa      	str	r2, [r7, #28]
}
     7b0:	b00b      	add	sp, #44	; 0x2c
     7b2:	bc0c      	pop	{r2, r3}
     7b4:	4690      	mov	r8, r2
     7b6:	4699      	mov	r9, r3
     7b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
     7ba:	46c0      	nop			; (mov r8, r8)
     7bc:	00000bf9 	.word	0x00000bf9

000007c0 <pascalToCent>:
    double altFeet = (1-pow((my_barometer->pressurePa/1013.25),(0.190284)))*145366.45;
    my_barometer->heightFeet = (float)altFeet;

}

void pascalToCent(Barometer *my_barometer) {
     7c0:	b570      	push	{r4, r5, r6, lr}
     7c2:	0004      	movs	r4, r0
        748275, 767202, 786555, 806356, 826627,
        847395, 868688, 890537, 912974, 936037,
        959766, 984206
    };

    my_barometer->pressurePa = my_barometer->pressureMbar *10;
     7c4:	69c2      	ldr	r2, [r0, #28]
     7c6:	0093      	lsls	r3, r2, #2
     7c8:	189b      	adds	r3, r3, r2
     7ca:	005b      	lsls	r3, r3, #1
     7cc:	6183      	str	r3, [r0, #24]

    if (my_barometer->pressurePa > PA_INIT)
     7ce:	4a10      	ldr	r2, [pc, #64]	; (810 <pascalToCent+0x50>)
     7d0:	4293      	cmp	r3, r2
     7d2:	d902      	bls.n	7da <pascalToCent+0x1a>
        my_barometer->heightCm = lookupTable[0];
     7d4:	4b0f      	ldr	r3, [pc, #60]	; (814 <pascalToCent+0x54>)
     7d6:	6203      	str	r3, [r0, #32]
     7d8:	e018      	b.n	80c <pascalToCent+0x4c>
    else {
        const int32_t inx = (PA_INIT - my_barometer->pressurePa) >> 10;
     7da:	4a0d      	ldr	r2, [pc, #52]	; (810 <pascalToCent+0x50>)
     7dc:	1ad2      	subs	r2, r2, r3
     7de:	0a92      	lsrs	r2, r2, #10
        if (inx >= PZLUT_ENTRIES - 1)
     7e0:	2a4b      	cmp	r2, #75	; 0x4b
     7e2:	dd02      	ble.n	7ea <pascalToCent+0x2a>
            my_barometer->heightCm = lookupTable[PZLUT_ENTRIES - 1];
     7e4:	4b0c      	ldr	r3, [pc, #48]	; (818 <pascalToCent+0x58>)
     7e6:	6203      	str	r3, [r0, #32]
     7e8:	e010      	b.n	80c <pascalToCent+0x4c>
        else {
            const int32_t pa1 = PA_INIT - (inx << 10);
            const int32_t z1 = lookupTable[inx];
     7ea:	4d0c      	ldr	r5, [pc, #48]	; (81c <pascalToCent+0x5c>)
     7ec:	0091      	lsls	r1, r2, #2
     7ee:	5948      	ldr	r0, [r1, r5]
            const int32_t z2 = lookupTable[inx + 1];
            my_barometer->heightCm = (z1 + (((pa1 - my_barometer->pressurePa) * (z2 - z1)) >> 10));
     7f0:	0296      	lsls	r6, r2, #10
     7f2:	4907      	ldr	r1, [pc, #28]	; (810 <pascalToCent+0x50>)
     7f4:	1b89      	subs	r1, r1, r6
     7f6:	1acb      	subs	r3, r1, r3
        if (inx >= PZLUT_ENTRIES - 1)
            my_barometer->heightCm = lookupTable[PZLUT_ENTRIES - 1];
        else {
            const int32_t pa1 = PA_INIT - (inx << 10);
            const int32_t z1 = lookupTable[inx];
            const int32_t z2 = lookupTable[inx + 1];
     7f8:	3201      	adds	r2, #1
     7fa:	0092      	lsls	r2, r2, #2
            my_barometer->heightCm = (z1 + (((pa1 - my_barometer->pressurePa) * (z2 - z1)) >> 10));
     7fc:	5952      	ldr	r2, [r2, r5]
     7fe:	1a12      	subs	r2, r2, r0
     800:	4353      	muls	r3, r2
     802:	0a9b      	lsrs	r3, r3, #10
     804:	1818      	adds	r0, r3, r0
     806:	4b06      	ldr	r3, [pc, #24]	; (820 <pascalToCent+0x60>)
     808:	4798      	blx	r3
     80a:	6220      	str	r0, [r4, #32]
        }
    }
}
     80c:	bd70      	pop	{r4, r5, r6, pc}
     80e:	46c0      	nop			; (mov r8, r8)
     810:	000199cc 	.word	0x000199cc
     814:	c6e5c000 	.word	0xc6e5c000
     818:	497048e0 	.word	0x497048e0
     81c:	000016d4 	.word	0x000016d4
     820:	00000ce1 	.word	0x00000ce1

00000824 <readMS5803Coefficients>:

void readMS5803Coefficients(Barometer *my_barometer) {
     824:	b5f0      	push	{r4, r5, r6, r7, lr}
     826:	465f      	mov	r7, fp
     828:	464e      	mov	r6, r9
     82a:	4645      	mov	r5, r8
     82c:	b4e0      	push	{r5, r6, r7}
     82e:	4680      	mov	r8, r0
     830:	24a2      	movs	r4, #162	; 0xa2

    u8_t dummy_tx = 0xFF;
    u8_t dummy_rx;

    for (u8_t coeff_num = 0; coeff_num < 6 ; ++coeff_num ) {
        delay_us(600);
     832:	4e15      	ldr	r6, [pc, #84]	; (888 <readMS5803Coefficients+0x64>)
        u8_t _cmd = MS5803_CMD_PROM_READ + ((coeff_num+1)*2);
        delay_us(600);
        pinLow(cs_baro);
        dummy_rx = spiDataTransfer(SPI1, _cmd);
     834:	4f15      	ldr	r7, [pc, #84]	; (88c <readMS5803Coefficients+0x68>)

    u8_t dummy_tx = 0xFF;
    u8_t dummy_rx;

    for (u8_t coeff_num = 0; coeff_num < 6 ; ++coeff_num ) {
        delay_us(600);
     836:	2096      	movs	r0, #150	; 0x96
     838:	0080      	lsls	r0, r0, #2
     83a:	47b0      	blx	r6
        u8_t _cmd = MS5803_CMD_PROM_READ + ((coeff_num+1)*2);
        delay_us(600);
     83c:	2096      	movs	r0, #150	; 0x96
     83e:	0080      	lsls	r0, r0, #2
     840:	47b0      	blx	r6
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     842:	4d13      	ldr	r5, [pc, #76]	; (890 <readMS5803Coefficients+0x6c>)
     844:	2380      	movs	r3, #128	; 0x80
     846:	01db      	lsls	r3, r3, #7
     848:	469b      	mov	fp, r3
     84a:	616b      	str	r3, [r5, #20]
        pinLow(cs_baro);
        dummy_rx = spiDataTransfer(SPI1, _cmd);
     84c:	0021      	movs	r1, r4
     84e:	2002      	movs	r0, #2
     850:	47b8      	blx	r7
        u8_t _byte1 = spiDataTransfer(SPI1,dummy_tx);
     852:	21ff      	movs	r1, #255	; 0xff
     854:	2002      	movs	r0, #2
     856:	47b8      	blx	r7
     858:	4681      	mov	r9, r0
        u8_t _byte2 = spiDataTransfer(SPI1,dummy_tx);
     85a:	21ff      	movs	r1, #255	; 0xff
     85c:	2002      	movs	r0, #2
     85e:	47b8      	blx	r7




inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     860:	465b      	mov	r3, fp
     862:	61ab      	str	r3, [r5, #24]
        pinHigh(cs_baro);
        my_barometer->coefficients_[coeff_num] = (_byte1 << 8) | _byte2;
     864:	464b      	mov	r3, r9
     866:	021d      	lsls	r5, r3, #8
     868:	4328      	orrs	r0, r5
     86a:	4643      	mov	r3, r8
     86c:	8018      	strh	r0, [r3, #0]
     86e:	3402      	adds	r4, #2
     870:	b2e4      	uxtb	r4, r4
     872:	2302      	movs	r3, #2
     874:	469c      	mov	ip, r3
     876:	44e0      	add	r8, ip
void readMS5803Coefficients(Barometer *my_barometer) {

    u8_t dummy_tx = 0xFF;
    u8_t dummy_rx;

    for (u8_t coeff_num = 0; coeff_num < 6 ; ++coeff_num ) {
     878:	2cae      	cmp	r4, #174	; 0xae
     87a:	d1dc      	bne.n	836 <readMS5803Coefficients+0x12>
        u8_t _byte2 = spiDataTransfer(SPI1,dummy_tx);
        pinHigh(cs_baro);
        my_barometer->coefficients_[coeff_num] = (_byte1 << 8) | _byte2;
    }

}
     87c:	bc1c      	pop	{r2, r3, r4}
     87e:	4690      	mov	r8, r2
     880:	4699      	mov	r9, r3
     882:	46a3      	mov	fp, r4
     884:	bdf0      	pop	{r4, r5, r6, r7, pc}
     886:	46c0      	nop			; (mov r8, r8)
     888:	000005b1 	.word	0x000005b1
     88c:	00000bdd 	.word	0x00000bdd
     890:	41004400 	.word	0x41004400

00000894 <initMS5803Barometer>:

void initMS5803Barometer(Barometer *my_barometer) {
     894:	b570      	push	{r4, r5, r6, lr}
     896:	0004      	movs	r4, r0
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     898:	4d0d      	ldr	r5, [pc, #52]	; (8d0 <initMS5803Barometer+0x3c>)
     89a:	2680      	movs	r6, #128	; 0x80
     89c:	01f6      	lsls	r6, r6, #7
     89e:	616e      	str	r6, [r5, #20]

    u8_t dummy_tx = 0xFF;
    u8_t dummy_rx;

    pinLow(cs_baro);
    dummy_rx = spiDataTransfer(SPI1, MS5803_CMD_RES);
     8a0:	211e      	movs	r1, #30
     8a2:	2002      	movs	r0, #2
     8a4:	4b0b      	ldr	r3, [pc, #44]	; (8d4 <initMS5803Barometer+0x40>)
     8a6:	4798      	blx	r3




inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     8a8:	61ae      	str	r6, [r5, #24]
    pinHigh(cs_baro);
    delay_ms(200);
     8aa:	20c8      	movs	r0, #200	; 0xc8
     8ac:	4b0a      	ldr	r3, [pc, #40]	; (8d8 <initMS5803Barometer+0x44>)
     8ae:	4798      	blx	r3
    readMS5803Coefficients(my_barometer);
     8b0:	0020      	movs	r0, r4
     8b2:	4b0a      	ldr	r3, [pc, #40]	; (8dc <initMS5803Barometer+0x48>)
     8b4:	4798      	blx	r3

    my_barometer->heightCm = 4000;
     8b6:	4b0a      	ldr	r3, [pc, #40]	; (8e0 <initMS5803Barometer+0x4c>)
     8b8:	6223      	str	r3, [r4, #32]
    my_barometer->pressurePa = 10000;
     8ba:	4b0a      	ldr	r3, [pc, #40]	; (8e4 <initMS5803Barometer+0x50>)
     8bc:	61a3      	str	r3, [r4, #24]
    my_barometer->rawPressureData = 4311550;
     8be:	4b0a      	ldr	r3, [pc, #40]	; (8e8 <initMS5803Barometer+0x54>)
     8c0:	60e3      	str	r3, [r4, #12]
    my_barometer->rawTempatureData = 8387300;
     8c2:	4b0a      	ldr	r3, [pc, #40]	; (8ec <initMS5803Barometer+0x58>)
     8c4:	6123      	str	r3, [r4, #16]
    my_barometer->temperatureCelcus = 2000;
     8c6:	23fa      	movs	r3, #250	; 0xfa
     8c8:	00db      	lsls	r3, r3, #3
     8ca:	6163      	str	r3, [r4, #20]




}
     8cc:	bd70      	pop	{r4, r5, r6, pc}
     8ce:	46c0      	nop			; (mov r8, r8)
     8d0:	41004400 	.word	0x41004400
     8d4:	00000bdd 	.word	0x00000bdd
     8d8:	000005dd 	.word	0x000005dd
     8dc:	00000825 	.word	0x00000825
     8e0:	457a0000 	.word	0x457a0000
     8e4:	00002710 	.word	0x00002710
     8e8:	0041c9fe 	.word	0x0041c9fe
     8ec:	007ffae4 	.word	0x007ffae4

000008f0 <sampleTick>:
#include <boardDefines.h>
#include <MS5803.h>



void sampleTick(Altimeter *my_altimeter) {
     8f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     8f2:	465f      	mov	r7, fp
     8f4:	4656      	mov	r6, sl
     8f6:	464d      	mov	r5, r9
     8f8:	4644      	mov	r4, r8
     8fa:	b4f0      	push	{r4, r5, r6, r7}
     8fc:	0004      	movs	r4, r0

    my_altimeter->batV = (0.001906 * adc_read(senseBat));
     8fe:	4b6a      	ldr	r3, [pc, #424]	; (aa8 <sampleTick+0x1b8>)
     900:	6818      	ldr	r0, [r3, #0]
     902:	6859      	ldr	r1, [r3, #4]
     904:	4b69      	ldr	r3, [pc, #420]	; (aac <sampleTick+0x1bc>)
     906:	4798      	blx	r3
     908:	4b69      	ldr	r3, [pc, #420]	; (ab0 <sampleTick+0x1c0>)
     90a:	4798      	blx	r3
     90c:	4b69      	ldr	r3, [pc, #420]	; (ab4 <sampleTick+0x1c4>)
     90e:	4699      	mov	r9, r3
     910:	4a69      	ldr	r2, [pc, #420]	; (ab8 <sampleTick+0x1c8>)
     912:	4b6a      	ldr	r3, [pc, #424]	; (abc <sampleTick+0x1cc>)
     914:	47c8      	blx	r9
     916:	4b6a      	ldr	r3, [pc, #424]	; (ac0 <sampleTick+0x1d0>)
     918:	4698      	mov	r8, r3
     91a:	4798      	blx	r3
     91c:	6620      	str	r0, [r4, #96]	; 0x60
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     91e:	4d69      	ldr	r5, [pc, #420]	; (ac4 <sampleTick+0x1d4>)
     920:	2780      	movs	r7, #128	; 0x80
     922:	01ff      	lsls	r7, r7, #7
     924:	616f      	str	r7, [r5, #20]

    uint8_t dummy_Tx = 0xFF;
    uint8_t dummy_rx;

    pinLow(cs_baro);
    dummy_rx = spiDataTransfer(SPI1, 0x50);
     926:	2150      	movs	r1, #80	; 0x50
     928:	2002      	movs	r0, #2
     92a:	4e67      	ldr	r6, [pc, #412]	; (ac8 <sampleTick+0x1d8>)
     92c:	47b0      	blx	r6




inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     92e:	61af      	str	r7, [r5, #24]
    pinHigh(cs_baro);
    delay_ms(2);
     930:	2002      	movs	r0, #2
     932:	4b66      	ldr	r3, [pc, #408]	; (acc <sampleTick+0x1dc>)
     934:	469b      	mov	fp, r3
     936:	4798      	blx	r3
    my_altimeter->myBarometer.rawTempatureData = readMS5803AdcResults();
     938:	4b65      	ldr	r3, [pc, #404]	; (ad0 <sampleTick+0x1e0>)
     93a:	469a      	mov	sl, r3
     93c:	4798      	blx	r3
     93e:	6120      	str	r0, [r4, #16]
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     940:	616f      	str	r7, [r5, #20]

    pinLow(cs_baro);
    dummy_rx = spiDataTransfer(SPI1, 0x42);
     942:	2142      	movs	r1, #66	; 0x42
     944:	2002      	movs	r0, #2
     946:	47b0      	blx	r6




inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     948:	61af      	str	r7, [r5, #24]
    pinHigh(cs_baro);
    delay_ms(2);
     94a:	2002      	movs	r0, #2
     94c:	47d8      	blx	fp
    my_altimeter->myBarometer.rawPressureData = readMS5803AdcResults();
     94e:	47d0      	blx	sl
     950:	60e0      	str	r0, [r4, #12]
    flight();
     952:	4b60      	ldr	r3, [pc, #384]	; (ad4 <sampleTick+0x1e4>)
     954:	4798      	blx	r3

    ConvertPressureTemperature(&my_altimeter->myBarometer);
     956:	0020      	movs	r0, r4
     958:	4b5f      	ldr	r3, [pc, #380]	; (ad8 <sampleTick+0x1e8>)
     95a:	4798      	blx	r3
    pascalToCent(&my_altimeter->myBarometer);
     95c:	0020      	movs	r0, r4
     95e:	4b5f      	ldr	r3, [pc, #380]	; (adc <sampleTick+0x1ec>)
     960:	4798      	blx	r3
    my_altimeter->myBarometer.heightFeet = 0.03281 * my_altimeter->myBarometer.heightCm;
     962:	6a20      	ldr	r0, [r4, #32]
     964:	4b5e      	ldr	r3, [pc, #376]	; (ae0 <sampleTick+0x1f0>)
     966:	4798      	blx	r3
     968:	4a5e      	ldr	r2, [pc, #376]	; (ae4 <sampleTick+0x1f4>)
     96a:	4b5f      	ldr	r3, [pc, #380]	; (ae8 <sampleTick+0x1f8>)
     96c:	47c8      	blx	r9
     96e:	47c0      	blx	r8
     970:	6260      	str	r0, [r4, #36]	; 0x24
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     972:	2780      	movs	r7, #128	; 0x80
     974:	037f      	lsls	r7, r7, #13
     976:	616f      	str	r7, [r5, #20]

    uint8_t rData;
    uint8_t rData2;

    pinLow(cs_imu);
    dummy_rx = spiDataTransfer(SPI1, ACCEL_XOUT_H);
     978:	21ba      	movs	r1, #186	; 0xba
     97a:	2002      	movs	r0, #2
     97c:	47b0      	blx	r6
    my_altimeter->myIMU.accelXHigh  = spiDataTransfer(SPI1,dummy_Tx);
     97e:	21ff      	movs	r1, #255	; 0xff
     980:	2002      	movs	r0, #2
     982:	47b0      	blx	r6
     984:	234c      	movs	r3, #76	; 0x4c
     986:	54e0      	strb	r0, [r4, r3]
    my_altimeter->myIMU.accelXLow  = spiDataTransfer(SPI1,dummy_Tx);
     988:	21ff      	movs	r1, #255	; 0xff
     98a:	2002      	movs	r0, #2
     98c:	47b0      	blx	r6
     98e:	234d      	movs	r3, #77	; 0x4d
     990:	54e0      	strb	r0, [r4, r3]




inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     992:	61af      	str	r7, [r5, #24]
    pinHigh(cs_imu);

    //check if last bit in second byte is 1 therefor negative number
    int16_t negativex = (my_altimeter->myIMU.accelXLow & (1 <<7)) != 0;
     994:	5ce3      	ldrb	r3, [r4, r3]
    if (negativex) {
     996:	b25a      	sxtb	r2, r3
     998:	2a00      	cmp	r2, #0
     99a:	da09      	bge.n	9b0 <sampleTick+0xc0>
        // if negative then preform 2's complement to int conversion
        my_altimeter->myIMU.accelX = ((my_altimeter->myIMU.accelXLow | ~((1 << 8) - 1)) << 8 ) | my_altimeter->myIMU.accelXHigh;
     99c:	224c      	movs	r2, #76	; 0x4c
     99e:	5ca2      	ldrb	r2, [r4, r2]
     9a0:	4852      	ldr	r0, [pc, #328]	; (aec <sampleTick+0x1fc>)
     9a2:	4310      	orrs	r0, r2
     9a4:	021b      	lsls	r3, r3, #8
     9a6:	4318      	orrs	r0, r3
     9a8:	4b51      	ldr	r3, [pc, #324]	; (af0 <sampleTick+0x200>)
     9aa:	4798      	blx	r3
     9ac:	62a0      	str	r0, [r4, #40]	; 0x28
     9ae:	e006      	b.n	9be <sampleTick+0xce>
    } else {
        my_altimeter->myIMU.accelX = (my_altimeter->myIMU.accelXLow << 8) + my_altimeter->myIMU.accelXHigh;
     9b0:	021b      	lsls	r3, r3, #8
     9b2:	224c      	movs	r2, #76	; 0x4c
     9b4:	5ca0      	ldrb	r0, [r4, r2]
     9b6:	1818      	adds	r0, r3, r0
     9b8:	4b4d      	ldr	r3, [pc, #308]	; (af0 <sampleTick+0x200>)
     9ba:	4798      	blx	r3
     9bc:	62a0      	str	r0, [r4, #40]	; 0x28
    }
    my_altimeter->myIMU.accelX = my_altimeter->myIMU.accelX *0.00006103;
     9be:	6aa0      	ldr	r0, [r4, #40]	; 0x28
     9c0:	4b47      	ldr	r3, [pc, #284]	; (ae0 <sampleTick+0x1f0>)
     9c2:	4798      	blx	r3
     9c4:	4a4b      	ldr	r2, [pc, #300]	; (af4 <sampleTick+0x204>)
     9c6:	4b4c      	ldr	r3, [pc, #304]	; (af8 <sampleTick+0x208>)
     9c8:	4d3a      	ldr	r5, [pc, #232]	; (ab4 <sampleTick+0x1c4>)
     9ca:	47a8      	blx	r5
     9cc:	4b3c      	ldr	r3, [pc, #240]	; (ac0 <sampleTick+0x1d0>)
     9ce:	4798      	blx	r3
     9d0:	62a0      	str	r0, [r4, #40]	; 0x28
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     9d2:	4e3c      	ldr	r6, [pc, #240]	; (ac4 <sampleTick+0x1d4>)
     9d4:	2780      	movs	r7, #128	; 0x80
     9d6:	037f      	lsls	r7, r7, #13
     9d8:	6177      	str	r7, [r6, #20]



    pinLow(cs_imu);
    dummy_rx = spiDataTransfer(SPI1, ACCEL_YOUT_H);
     9da:	21bc      	movs	r1, #188	; 0xbc
     9dc:	2002      	movs	r0, #2
     9de:	4d3a      	ldr	r5, [pc, #232]	; (ac8 <sampleTick+0x1d8>)
     9e0:	47a8      	blx	r5
    my_altimeter->myIMU.accelYHigh = spiDataTransfer(SPI1,dummy_Tx);
     9e2:	21ff      	movs	r1, #255	; 0xff
     9e4:	2002      	movs	r0, #2
     9e6:	47a8      	blx	r5
     9e8:	234e      	movs	r3, #78	; 0x4e
     9ea:	54e0      	strb	r0, [r4, r3]
    my_altimeter->myIMU.accelYLow = spiDataTransfer(SPI1,dummy_Tx);
     9ec:	21ff      	movs	r1, #255	; 0xff
     9ee:	2002      	movs	r0, #2
     9f0:	47a8      	blx	r5
     9f2:	234f      	movs	r3, #79	; 0x4f
     9f4:	54e0      	strb	r0, [r4, r3]




inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     9f6:	61b7      	str	r7, [r6, #24]
    pinHigh(cs_imu);

    //check if last bit in second byte is 1 therefor negative number
    int16_t negativey = (my_altimeter->myIMU.accelYLow & (1 <<7)) != 0;
     9f8:	5ce3      	ldrb	r3, [r4, r3]
    if (negativey) {
     9fa:	b25a      	sxtb	r2, r3
     9fc:	2a00      	cmp	r2, #0
     9fe:	da09      	bge.n	a14 <sampleTick+0x124>
        // if negative then preform 2's complement to int conversion
        my_altimeter->myIMU.accelY = ((my_altimeter->myIMU.accelYLow | ~((1 << 8) - 1)) << 8 ) | my_altimeter->myIMU.accelYHigh;
     a00:	224e      	movs	r2, #78	; 0x4e
     a02:	5ca2      	ldrb	r2, [r4, r2]
     a04:	4839      	ldr	r0, [pc, #228]	; (aec <sampleTick+0x1fc>)
     a06:	4310      	orrs	r0, r2
     a08:	021b      	lsls	r3, r3, #8
     a0a:	4318      	orrs	r0, r3
     a0c:	4b38      	ldr	r3, [pc, #224]	; (af0 <sampleTick+0x200>)
     a0e:	4798      	blx	r3
     a10:	62e0      	str	r0, [r4, #44]	; 0x2c
     a12:	e006      	b.n	a22 <sampleTick+0x132>
    } else {
        my_altimeter->myIMU.accelY = (my_altimeter->myIMU.accelYLow << 8) + my_altimeter->myIMU.accelYHigh;
     a14:	021b      	lsls	r3, r3, #8
     a16:	224e      	movs	r2, #78	; 0x4e
     a18:	5ca0      	ldrb	r0, [r4, r2]
     a1a:	1818      	adds	r0, r3, r0
     a1c:	4b34      	ldr	r3, [pc, #208]	; (af0 <sampleTick+0x200>)
     a1e:	4798      	blx	r3
     a20:	62e0      	str	r0, [r4, #44]	; 0x2c
    }
    my_altimeter->myIMU.accelY = my_altimeter->myIMU.accelY *0.00006103;
     a22:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
     a24:	4b2e      	ldr	r3, [pc, #184]	; (ae0 <sampleTick+0x1f0>)
     a26:	4798      	blx	r3
     a28:	4a32      	ldr	r2, [pc, #200]	; (af4 <sampleTick+0x204>)
     a2a:	4b33      	ldr	r3, [pc, #204]	; (af8 <sampleTick+0x208>)
     a2c:	4d21      	ldr	r5, [pc, #132]	; (ab4 <sampleTick+0x1c4>)
     a2e:	47a8      	blx	r5
     a30:	4b23      	ldr	r3, [pc, #140]	; (ac0 <sampleTick+0x1d0>)
     a32:	4798      	blx	r3
     a34:	62e0      	str	r0, [r4, #44]	; 0x2c
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     a36:	4e23      	ldr	r6, [pc, #140]	; (ac4 <sampleTick+0x1d4>)
     a38:	2780      	movs	r7, #128	; 0x80
     a3a:	037f      	lsls	r7, r7, #13
     a3c:	6177      	str	r7, [r6, #20]


    pinLow(cs_imu);
    dummy_rx = spiDataTransfer(SPI1, ACCEL_ZOUT_H);
     a3e:	21be      	movs	r1, #190	; 0xbe
     a40:	2002      	movs	r0, #2
     a42:	4d21      	ldr	r5, [pc, #132]	; (ac8 <sampleTick+0x1d8>)
     a44:	47a8      	blx	r5
    my_altimeter->myIMU.accelZHigh = spiDataTransfer(SPI1,dummy_Tx);
     a46:	21ff      	movs	r1, #255	; 0xff
     a48:	2002      	movs	r0, #2
     a4a:	47a8      	blx	r5
     a4c:	2350      	movs	r3, #80	; 0x50
     a4e:	54e0      	strb	r0, [r4, r3]
    my_altimeter->myIMU.accelZLow = spiDataTransfer(SPI1,dummy_Tx);
     a50:	21ff      	movs	r1, #255	; 0xff
     a52:	2002      	movs	r0, #2
     a54:	47a8      	blx	r5
     a56:	2351      	movs	r3, #81	; 0x51
     a58:	54e0      	strb	r0, [r4, r3]




inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     a5a:	61b7      	str	r7, [r6, #24]
    pinHigh(cs_imu);

    //check if last bit in second byte is 1 therefor negative number
    int16_t negativez = (my_altimeter->myIMU.accelZLow & (1 <<7)) != 0;
     a5c:	5ce0      	ldrb	r0, [r4, r3]
    if (negativez) {
     a5e:	b243      	sxtb	r3, r0
     a60:	2b00      	cmp	r3, #0
     a62:	da09      	bge.n	a78 <sampleTick+0x188>
        // if negative then preform 2's complement to int conversion
        my_altimeter->myIMU.accelZ = ((my_altimeter->myIMU.accelZLow | ~((1 << 8) - 1)) << 8 ) | my_altimeter->myIMU.accelZHigh;
     a64:	2350      	movs	r3, #80	; 0x50
     a66:	5ce3      	ldrb	r3, [r4, r3]
     a68:	4a20      	ldr	r2, [pc, #128]	; (aec <sampleTick+0x1fc>)
     a6a:	4313      	orrs	r3, r2
     a6c:	0200      	lsls	r0, r0, #8
     a6e:	4318      	orrs	r0, r3
     a70:	4b1f      	ldr	r3, [pc, #124]	; (af0 <sampleTick+0x200>)
     a72:	4798      	blx	r3
     a74:	6320      	str	r0, [r4, #48]	; 0x30
     a76:	e006      	b.n	a86 <sampleTick+0x196>
    } else {
        my_altimeter->myIMU.accelZ = (my_altimeter->myIMU.accelZLow << 8) + my_altimeter->myIMU.accelZHigh;
     a78:	0200      	lsls	r0, r0, #8
     a7a:	2350      	movs	r3, #80	; 0x50
     a7c:	5ce3      	ldrb	r3, [r4, r3]
     a7e:	18c0      	adds	r0, r0, r3
     a80:	4b1b      	ldr	r3, [pc, #108]	; (af0 <sampleTick+0x200>)
     a82:	4798      	blx	r3
     a84:	6320      	str	r0, [r4, #48]	; 0x30
    }
    my_altimeter->myIMU.accelZ = my_altimeter->myIMU.accelZ *0.00006103;
     a86:	6b20      	ldr	r0, [r4, #48]	; 0x30
     a88:	4b15      	ldr	r3, [pc, #84]	; (ae0 <sampleTick+0x1f0>)
     a8a:	4798      	blx	r3
     a8c:	4a19      	ldr	r2, [pc, #100]	; (af4 <sampleTick+0x204>)
     a8e:	4b1a      	ldr	r3, [pc, #104]	; (af8 <sampleTick+0x208>)
     a90:	4d08      	ldr	r5, [pc, #32]	; (ab4 <sampleTick+0x1c4>)
     a92:	47a8      	blx	r5
     a94:	4b0a      	ldr	r3, [pc, #40]	; (ac0 <sampleTick+0x1d0>)
     a96:	4798      	blx	r3
     a98:	6320      	str	r0, [r4, #48]	; 0x30





}
     a9a:	bc3c      	pop	{r2, r3, r4, r5}
     a9c:	4690      	mov	r8, r2
     a9e:	4699      	mov	r9, r3
     aa0:	46a2      	mov	sl, r4
     aa2:	46ab      	mov	fp, r5
     aa4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     aa6:	46c0      	nop			; (mov r8, r8)
     aa8:	00001808 	.word	0x00001808
     aac:	00000441 	.word	0x00000441
     ab0:	00001251 	.word	0x00001251
     ab4:	00000d5d 	.word	0x00000d5d
     ab8:	eaa2a0a9 	.word	0xeaa2a0a9
     abc:	3f5f3a57 	.word	0x3f5f3a57
     ac0:	0000137d 	.word	0x0000137d
     ac4:	41004400 	.word	0x41004400
     ac8:	00000bdd 	.word	0x00000bdd
     acc:	000005dd 	.word	0x000005dd
     ad0:	00000681 	.word	0x00000681
     ad4:	00000669 	.word	0x00000669
     ad8:	000006c9 	.word	0x000006c9
     adc:	000007c1 	.word	0x000007c1
     ae0:	000012d5 	.word	0x000012d5
     ae4:	e9f6a93f 	.word	0xe9f6a93f
     ae8:	3fa0cc78 	.word	0x3fa0cc78
     aec:	ffff0000 	.word	0xffff0000
     af0:	00000c51 	.word	0x00000c51
     af4:	d52535ef 	.word	0xd52535ef
     af8:	3f0fff4e 	.word	0x3f0fff4e

00000afc <sercomClockEnable>:
#include <util.h>

void sercomClockEnable(SercomId id, uint32_t clock_channel, u8_t divider) {
     afc:	b570      	push	{r4, r5, r6, lr}
     afe:	0004      	movs	r4, r0
     b00:	000d      	movs	r5, r1
    // prevent this clock write from changing any other clocks
    PM->APBCMASK.reg |= 1 << (PM_APBCMASK_SERCOM0_Pos + id);
     b02:	480e      	ldr	r0, [pc, #56]	; (b3c <sercomClockEnable+0x40>)
     b04:	6a01      	ldr	r1, [r0, #32]
     b06:	1ca6      	adds	r6, r4, #2
     b08:	2301      	movs	r3, #1
     b0a:	40b3      	lsls	r3, r6
     b0c:	430b      	orrs	r3, r1
     b0e:	6203      	str	r3, [r0, #32]


    if (clock_channel != 0) {
     b10:	2d00      	cmp	r5, #0
     b12:	d003      	beq.n	b1c <sercomClockEnable+0x20>
        // clock generators 3-8 have 8 division factor bits - DIV[7:0]
        gclkEnable(clock_channel, GCLK_SOURCE_DFLL48M, divider);
     b14:	2107      	movs	r1, #7
     b16:	0028      	movs	r0, r5
     b18:	4b09      	ldr	r3, [pc, #36]	; (b40 <sercomClockEnable+0x44>)
     b1a:	4798      	blx	r3
    }


    // attach clock
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
     b1c:	0229      	lsls	r1, r5, #8
     b1e:	23f0      	movs	r3, #240	; 0xf0
     b20:	011b      	lsls	r3, r3, #4
     b22:	4019      	ands	r1, r3
     b24:	2380      	movs	r3, #128	; 0x80
     b26:	01db      	lsls	r3, r3, #7
     b28:	4319      	orrs	r1, r3
     b2a:	0023      	movs	r3, r4
     b2c:	3314      	adds	r3, #20
     b2e:	243f      	movs	r4, #63	; 0x3f
     b30:	401c      	ands	r4, r3
     b32:	430c      	orrs	r4, r1
     b34:	4b03      	ldr	r3, [pc, #12]	; (b44 <sercomClockEnable+0x48>)
     b36:	805c      	strh	r4, [r3, #2]
                        GCLK_CLKCTRL_GEN(clock_channel) |
                        GCLK_CLKCTRL_ID(SERCOM0_GCLK_ID_CORE + id);
}
     b38:	bd70      	pop	{r4, r5, r6, pc}
     b3a:	46c0      	nop			; (mov r8, r8)
     b3c:	40000400 	.word	0x40000400
     b40:	00000561 	.word	0x00000561
     b44:	40000c00 	.word	0x40000c00

00000b48 <sercomReset>:
//sample.c
void sampleTick(Altimeter *my_altimeter);

//dma.c
inline static Sercom* sercom(SercomId id) {
	return (Sercom*) (0x42000800U + id * 1024);
     b48:	0280      	lsls	r0, r0, #10
     b4a:	4b05      	ldr	r3, [pc, #20]	; (b60 <sercomReset+0x18>)
     b4c:	469c      	mov	ip, r3
     b4e:	4460      	add	r0, ip


void sercomReset(SercomId id) {
    sercom(id)->SPI.CTRLA.reg = SERCOM_SPI_CTRLA_SWRST;
     b50:	2301      	movs	r3, #1
     b52:	6003      	str	r3, [r0, #0]
    while(sercom(id)->SPI.CTRLA.reg & SERCOM_SPI_CTRLA_SWRST);
     b54:	2201      	movs	r2, #1
     b56:	6803      	ldr	r3, [r0, #0]
     b58:	421a      	tst	r2, r3
     b5a:	d1fc      	bne.n	b56 <sercomReset+0xe>
}
     b5c:	4770      	bx	lr
     b5e:	46c0      	nop			; (mov r8, r8)
     b60:	42000800 	.word	0x42000800

00000b64 <sercomSpiMasterInit>:
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
}


void sercomSpiMasterInit(SercomId id, u32_t dipo, u32_t dopo, bool cpol, bool cpha, u8_t baud) {
     b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     b66:	464f      	mov	r7, r9
     b68:	4646      	mov	r6, r8
     b6a:	b4c0      	push	{r6, r7}
     b6c:	0006      	movs	r6, r0
     b6e:	4688      	mov	r8, r1
     b70:	0017      	movs	r7, r2
     b72:	001d      	movs	r5, r3
     b74:	ab08      	add	r3, sp, #32
     b76:	781c      	ldrb	r4, [r3, #0]
     b78:	ab09      	add	r3, sp, #36	; 0x24
     b7a:	781b      	ldrb	r3, [r3, #0]
     b7c:	4699      	mov	r9, r3
		
    sercomReset(id);
     b7e:	4b15      	ldr	r3, [pc, #84]	; (bd4 <sercomSpiMasterInit+0x70>)
     b80:	4798      	blx	r3
     b82:	02b0      	lsls	r0, r6, #10
     b84:	4b14      	ldr	r3, [pc, #80]	; (bd8 <sercomSpiMasterInit+0x74>)
     b86:	469c      	mov	ip, r3
     b88:	4460      	add	r0, ip
	
    sercom(id)->SPI.CTRLB.reg
        = SERCOM_SPI_CTRLB_RXEN;
     b8a:	2380      	movs	r3, #128	; 0x80
     b8c:	029b      	lsls	r3, r3, #10
     b8e:	6043      	str	r3, [r0, #4]

    sercom(id)->SPI.BAUD.reg = baud;
     b90:	464b      	mov	r3, r9
     b92:	7303      	strb	r3, [r0, #12]

    sercom(id)->SPI.CTRLA.reg
        = SERCOM_SPI_CTRLA_ENABLE
          | SERCOM_SPI_CTRLA_MODE_SPI_MASTER
          | SERCOM_SPI_CTRLA_DIPO(dipo)
     b94:	4643      	mov	r3, r8
     b96:	0519      	lsls	r1, r3, #20
     b98:	23c0      	movs	r3, #192	; 0xc0
     b9a:	039b      	lsls	r3, r3, #14
     b9c:	4019      	ands	r1, r3
     b9e:	000e      	movs	r6, r1
     ba0:	0439      	lsls	r1, r7, #16
     ba2:	23c0      	movs	r3, #192	; 0xc0
     ba4:	029b      	lsls	r3, r3, #10
     ba6:	4019      	ands	r1, r3
     ba8:	230e      	movs	r3, #14
     baa:	000a      	movs	r2, r1
     bac:	431a      	orrs	r2, r3
          | SERCOM_SPI_CTRLA_DOPO(dopo)
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
     bae:	1e6b      	subs	r3, r5, #1
     bb0:	419d      	sbcs	r5, r3
     bb2:	076d      	lsls	r5, r5, #29
     bb4:	0031      	movs	r1, r6
     bb6:	4311      	orrs	r1, r2
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
     bb8:	1e63      	subs	r3, r4, #1
     bba:	419c      	sbcs	r4, r3
     bbc:	0722      	lsls	r2, r4, #28
     bbe:	002c      	movs	r4, r5
     bc0:	430c      	orrs	r4, r1
     bc2:	4314      	orrs	r4, r2
        = SERCOM_SPI_CTRLB_RXEN;

    sercom(id)->SPI.BAUD.reg = baud;

    sercom(id)->SPI.CTRLA.reg
        = SERCOM_SPI_CTRLA_ENABLE
     bc4:	6004      	str	r4, [r0, #0]
		};
	}
}

static inline void SPI_sync(SercomId id) {
	while  (sercom(id)->SPI.SYNCBUSY.bit.CTRLB);
     bc6:	69c3      	ldr	r3, [r0, #28]
     bc8:	075b      	lsls	r3, r3, #29
     bca:	d4fc      	bmi.n	bc6 <sercomSpiMasterInit+0x62>
          | SERCOM_SPI_CTRLA_DOPO(dopo)
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);

    SPI_sync(id);
}
     bcc:	bc0c      	pop	{r2, r3}
     bce:	4690      	mov	r8, r2
     bd0:	4699      	mov	r9, r3
     bd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     bd4:	00000b49 	.word	0x00000b49
     bd8:	42000800 	.word	0x42000800

00000bdc <spiDataTransfer>:
//sample.c
void sampleTick(Altimeter *my_altimeter);

//dma.c
inline static Sercom* sercom(SercomId id) {
	return (Sercom*) (0x42000800U + id * 1024);
     bdc:	0280      	lsls	r0, r0, #10
     bde:	4b05      	ldr	r3, [pc, #20]	; (bf4 <spiDataTransfer+0x18>)
     be0:	469c      	mov	ip, r3
     be2:	4460      	add	r0, ip
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
}

u8_t spiDataTransfer(SercomId id, u8_t data) {
    sercom(id)->SPI.DATA.reg = data;
     be4:	6281      	str	r1, [r0, #40]	; 0x28
    while(sercom(id)->SPI.INTFLAG.bit.RXC == 0);
     be6:	7e03      	ldrb	r3, [r0, #24]
     be8:	075b      	lsls	r3, r3, #29
     bea:	d5fc      	bpl.n	be6 <spiDataTransfer+0xa>
    return sercom(id)->SPI.DATA.reg;
     bec:	6a80      	ldr	r0, [r0, #40]	; 0x28
     bee:	b2c0      	uxtb	r0, r0
}
     bf0:	4770      	bx	lr
     bf2:	46c0      	nop			; (mov r8, r8)
     bf4:	42000800 	.word	0x42000800

00000bf8 <__aeabi_lmul>:
     bf8:	b5f0      	push	{r4, r5, r6, r7, lr}
     bfa:	464f      	mov	r7, r9
     bfc:	4646      	mov	r6, r8
     bfe:	b4c0      	push	{r6, r7}
     c00:	0416      	lsls	r6, r2, #16
     c02:	0c36      	lsrs	r6, r6, #16
     c04:	4699      	mov	r9, r3
     c06:	0033      	movs	r3, r6
     c08:	0405      	lsls	r5, r0, #16
     c0a:	0c2c      	lsrs	r4, r5, #16
     c0c:	0c07      	lsrs	r7, r0, #16
     c0e:	0c15      	lsrs	r5, r2, #16
     c10:	4363      	muls	r3, r4
     c12:	437e      	muls	r6, r7
     c14:	436f      	muls	r7, r5
     c16:	4365      	muls	r5, r4
     c18:	0c1c      	lsrs	r4, r3, #16
     c1a:	19ad      	adds	r5, r5, r6
     c1c:	1964      	adds	r4, r4, r5
     c1e:	469c      	mov	ip, r3
     c20:	42a6      	cmp	r6, r4
     c22:	d903      	bls.n	c2c <__aeabi_lmul+0x34>
     c24:	2380      	movs	r3, #128	; 0x80
     c26:	025b      	lsls	r3, r3, #9
     c28:	4698      	mov	r8, r3
     c2a:	4447      	add	r7, r8
     c2c:	4663      	mov	r3, ip
     c2e:	0c25      	lsrs	r5, r4, #16
     c30:	19ef      	adds	r7, r5, r7
     c32:	041d      	lsls	r5, r3, #16
     c34:	464b      	mov	r3, r9
     c36:	434a      	muls	r2, r1
     c38:	4343      	muls	r3, r0
     c3a:	0c2d      	lsrs	r5, r5, #16
     c3c:	0424      	lsls	r4, r4, #16
     c3e:	1964      	adds	r4, r4, r5
     c40:	1899      	adds	r1, r3, r2
     c42:	19c9      	adds	r1, r1, r7
     c44:	0020      	movs	r0, r4
     c46:	bc0c      	pop	{r2, r3}
     c48:	4690      	mov	r8, r2
     c4a:	4699      	mov	r9, r3
     c4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     c4e:	46c0      	nop			; (mov r8, r8)

00000c50 <__aeabi_i2f>:
     c50:	b570      	push	{r4, r5, r6, lr}
     c52:	2800      	cmp	r0, #0
     c54:	d030      	beq.n	cb8 <__aeabi_i2f+0x68>
     c56:	17c3      	asrs	r3, r0, #31
     c58:	18c5      	adds	r5, r0, r3
     c5a:	405d      	eors	r5, r3
     c5c:	0fc4      	lsrs	r4, r0, #31
     c5e:	0028      	movs	r0, r5
     c60:	f000 fc18 	bl	1494 <__clzsi2>
     c64:	239e      	movs	r3, #158	; 0x9e
     c66:	1a1b      	subs	r3, r3, r0
     c68:	2b96      	cmp	r3, #150	; 0x96
     c6a:	dc0d      	bgt.n	c88 <__aeabi_i2f+0x38>
     c6c:	2296      	movs	r2, #150	; 0x96
     c6e:	1ad2      	subs	r2, r2, r3
     c70:	4095      	lsls	r5, r2
     c72:	026a      	lsls	r2, r5, #9
     c74:	0a52      	lsrs	r2, r2, #9
     c76:	b2d8      	uxtb	r0, r3
     c78:	0252      	lsls	r2, r2, #9
     c7a:	05c0      	lsls	r0, r0, #23
     c7c:	0a52      	lsrs	r2, r2, #9
     c7e:	07e4      	lsls	r4, r4, #31
     c80:	4302      	orrs	r2, r0
     c82:	4322      	orrs	r2, r4
     c84:	0010      	movs	r0, r2
     c86:	bd70      	pop	{r4, r5, r6, pc}
     c88:	2b99      	cmp	r3, #153	; 0x99
     c8a:	dc19      	bgt.n	cc0 <__aeabi_i2f+0x70>
     c8c:	2299      	movs	r2, #153	; 0x99
     c8e:	1ad2      	subs	r2, r2, r3
     c90:	4095      	lsls	r5, r2
     c92:	4a12      	ldr	r2, [pc, #72]	; (cdc <__aeabi_i2f+0x8c>)
     c94:	402a      	ands	r2, r5
     c96:	0769      	lsls	r1, r5, #29
     c98:	d004      	beq.n	ca4 <__aeabi_i2f+0x54>
     c9a:	210f      	movs	r1, #15
     c9c:	400d      	ands	r5, r1
     c9e:	2d04      	cmp	r5, #4
     ca0:	d000      	beq.n	ca4 <__aeabi_i2f+0x54>
     ca2:	3204      	adds	r2, #4
     ca4:	0151      	lsls	r1, r2, #5
     ca6:	d503      	bpl.n	cb0 <__aeabi_i2f+0x60>
     ca8:	4b0c      	ldr	r3, [pc, #48]	; (cdc <__aeabi_i2f+0x8c>)
     caa:	401a      	ands	r2, r3
     cac:	239f      	movs	r3, #159	; 0x9f
     cae:	1a1b      	subs	r3, r3, r0
     cb0:	0192      	lsls	r2, r2, #6
     cb2:	0a52      	lsrs	r2, r2, #9
     cb4:	b2d8      	uxtb	r0, r3
     cb6:	e7df      	b.n	c78 <__aeabi_i2f+0x28>
     cb8:	2400      	movs	r4, #0
     cba:	2000      	movs	r0, #0
     cbc:	2200      	movs	r2, #0
     cbe:	e7db      	b.n	c78 <__aeabi_i2f+0x28>
     cc0:	2205      	movs	r2, #5
     cc2:	002e      	movs	r6, r5
     cc4:	1a12      	subs	r2, r2, r0
     cc6:	21b9      	movs	r1, #185	; 0xb9
     cc8:	40d6      	lsrs	r6, r2
     cca:	002a      	movs	r2, r5
     ccc:	1ac9      	subs	r1, r1, r3
     cce:	408a      	lsls	r2, r1
     cd0:	1e55      	subs	r5, r2, #1
     cd2:	41aa      	sbcs	r2, r5
     cd4:	0035      	movs	r5, r6
     cd6:	4315      	orrs	r5, r2
     cd8:	e7db      	b.n	c92 <__aeabi_i2f+0x42>
     cda:	46c0      	nop			; (mov r8, r8)
     cdc:	fbffffff 	.word	0xfbffffff

00000ce0 <__aeabi_ui2f>:
     ce0:	b570      	push	{r4, r5, r6, lr}
     ce2:	1e04      	subs	r4, r0, #0
     ce4:	d028      	beq.n	d38 <__aeabi_ui2f+0x58>
     ce6:	f000 fbd5 	bl	1494 <__clzsi2>
     cea:	239e      	movs	r3, #158	; 0x9e
     cec:	1a1b      	subs	r3, r3, r0
     cee:	2b96      	cmp	r3, #150	; 0x96
     cf0:	dc0a      	bgt.n	d08 <__aeabi_ui2f+0x28>
     cf2:	2296      	movs	r2, #150	; 0x96
     cf4:	1ad2      	subs	r2, r2, r3
     cf6:	4094      	lsls	r4, r2
     cf8:	0262      	lsls	r2, r4, #9
     cfa:	0a52      	lsrs	r2, r2, #9
     cfc:	b2d8      	uxtb	r0, r3
     cfe:	0252      	lsls	r2, r2, #9
     d00:	0a52      	lsrs	r2, r2, #9
     d02:	05c0      	lsls	r0, r0, #23
     d04:	4310      	orrs	r0, r2
     d06:	bd70      	pop	{r4, r5, r6, pc}
     d08:	2b99      	cmp	r3, #153	; 0x99
     d0a:	dc18      	bgt.n	d3e <__aeabi_ui2f+0x5e>
     d0c:	2299      	movs	r2, #153	; 0x99
     d0e:	1ad2      	subs	r2, r2, r3
     d10:	4094      	lsls	r4, r2
     d12:	4a11      	ldr	r2, [pc, #68]	; (d58 <__aeabi_ui2f+0x78>)
     d14:	4022      	ands	r2, r4
     d16:	0761      	lsls	r1, r4, #29
     d18:	d004      	beq.n	d24 <__aeabi_ui2f+0x44>
     d1a:	210f      	movs	r1, #15
     d1c:	400c      	ands	r4, r1
     d1e:	2c04      	cmp	r4, #4
     d20:	d000      	beq.n	d24 <__aeabi_ui2f+0x44>
     d22:	3204      	adds	r2, #4
     d24:	0151      	lsls	r1, r2, #5
     d26:	d503      	bpl.n	d30 <__aeabi_ui2f+0x50>
     d28:	4b0b      	ldr	r3, [pc, #44]	; (d58 <__aeabi_ui2f+0x78>)
     d2a:	401a      	ands	r2, r3
     d2c:	239f      	movs	r3, #159	; 0x9f
     d2e:	1a1b      	subs	r3, r3, r0
     d30:	0192      	lsls	r2, r2, #6
     d32:	0a52      	lsrs	r2, r2, #9
     d34:	b2d8      	uxtb	r0, r3
     d36:	e7e2      	b.n	cfe <__aeabi_ui2f+0x1e>
     d38:	2000      	movs	r0, #0
     d3a:	2200      	movs	r2, #0
     d3c:	e7df      	b.n	cfe <__aeabi_ui2f+0x1e>
     d3e:	2205      	movs	r2, #5
     d40:	0025      	movs	r5, r4
     d42:	1a12      	subs	r2, r2, r0
     d44:	21b9      	movs	r1, #185	; 0xb9
     d46:	40d5      	lsrs	r5, r2
     d48:	0022      	movs	r2, r4
     d4a:	1ac9      	subs	r1, r1, r3
     d4c:	408a      	lsls	r2, r1
     d4e:	1e54      	subs	r4, r2, #1
     d50:	41a2      	sbcs	r2, r4
     d52:	002c      	movs	r4, r5
     d54:	4314      	orrs	r4, r2
     d56:	e7dc      	b.n	d12 <__aeabi_ui2f+0x32>
     d58:	fbffffff 	.word	0xfbffffff

00000d5c <__aeabi_dmul>:
     d5c:	b5f0      	push	{r4, r5, r6, r7, lr}
     d5e:	465f      	mov	r7, fp
     d60:	4656      	mov	r6, sl
     d62:	464d      	mov	r5, r9
     d64:	4644      	mov	r4, r8
     d66:	b4f0      	push	{r4, r5, r6, r7}
     d68:	030d      	lsls	r5, r1, #12
     d6a:	4699      	mov	r9, r3
     d6c:	004e      	lsls	r6, r1, #1
     d6e:	0b2b      	lsrs	r3, r5, #12
     d70:	b087      	sub	sp, #28
     d72:	0007      	movs	r7, r0
     d74:	4692      	mov	sl, r2
     d76:	4680      	mov	r8, r0
     d78:	469b      	mov	fp, r3
     d7a:	0d76      	lsrs	r6, r6, #21
     d7c:	0fcc      	lsrs	r4, r1, #31
     d7e:	2e00      	cmp	r6, #0
     d80:	d069      	beq.n	e56 <__aeabi_dmul+0xfa>
     d82:	4b6d      	ldr	r3, [pc, #436]	; (f38 <__aeabi_dmul+0x1dc>)
     d84:	429e      	cmp	r6, r3
     d86:	d035      	beq.n	df4 <__aeabi_dmul+0x98>
     d88:	465b      	mov	r3, fp
     d8a:	2280      	movs	r2, #128	; 0x80
     d8c:	00dd      	lsls	r5, r3, #3
     d8e:	0412      	lsls	r2, r2, #16
     d90:	0f43      	lsrs	r3, r0, #29
     d92:	4313      	orrs	r3, r2
     d94:	432b      	orrs	r3, r5
     d96:	469b      	mov	fp, r3
     d98:	00c3      	lsls	r3, r0, #3
     d9a:	4698      	mov	r8, r3
     d9c:	4b67      	ldr	r3, [pc, #412]	; (f3c <__aeabi_dmul+0x1e0>)
     d9e:	2700      	movs	r7, #0
     da0:	469c      	mov	ip, r3
     da2:	2300      	movs	r3, #0
     da4:	4466      	add	r6, ip
     da6:	9301      	str	r3, [sp, #4]
     da8:	464a      	mov	r2, r9
     daa:	0315      	lsls	r5, r2, #12
     dac:	0050      	lsls	r0, r2, #1
     dae:	0fd2      	lsrs	r2, r2, #31
     db0:	4653      	mov	r3, sl
     db2:	0b2d      	lsrs	r5, r5, #12
     db4:	0d40      	lsrs	r0, r0, #21
     db6:	4691      	mov	r9, r2
     db8:	d100      	bne.n	dbc <__aeabi_dmul+0x60>
     dba:	e076      	b.n	eaa <__aeabi_dmul+0x14e>
     dbc:	4a5e      	ldr	r2, [pc, #376]	; (f38 <__aeabi_dmul+0x1dc>)
     dbe:	4290      	cmp	r0, r2
     dc0:	d06c      	beq.n	e9c <__aeabi_dmul+0x140>
     dc2:	2280      	movs	r2, #128	; 0x80
     dc4:	0f5b      	lsrs	r3, r3, #29
     dc6:	0412      	lsls	r2, r2, #16
     dc8:	4313      	orrs	r3, r2
     dca:	4a5c      	ldr	r2, [pc, #368]	; (f3c <__aeabi_dmul+0x1e0>)
     dcc:	00ed      	lsls	r5, r5, #3
     dce:	4694      	mov	ip, r2
     dd0:	431d      	orrs	r5, r3
     dd2:	4653      	mov	r3, sl
     dd4:	2200      	movs	r2, #0
     dd6:	00db      	lsls	r3, r3, #3
     dd8:	4460      	add	r0, ip
     dda:	4649      	mov	r1, r9
     ddc:	1836      	adds	r6, r6, r0
     dde:	1c70      	adds	r0, r6, #1
     de0:	4061      	eors	r1, r4
     de2:	9002      	str	r0, [sp, #8]
     de4:	4317      	orrs	r7, r2
     de6:	2f0f      	cmp	r7, #15
     de8:	d900      	bls.n	dec <__aeabi_dmul+0x90>
     dea:	e0af      	b.n	f4c <__aeabi_dmul+0x1f0>
     dec:	4854      	ldr	r0, [pc, #336]	; (f40 <__aeabi_dmul+0x1e4>)
     dee:	00bf      	lsls	r7, r7, #2
     df0:	59c7      	ldr	r7, [r0, r7]
     df2:	46bf      	mov	pc, r7
     df4:	465b      	mov	r3, fp
     df6:	431f      	orrs	r7, r3
     df8:	d000      	beq.n	dfc <__aeabi_dmul+0xa0>
     dfa:	e088      	b.n	f0e <__aeabi_dmul+0x1b2>
     dfc:	2300      	movs	r3, #0
     dfe:	469b      	mov	fp, r3
     e00:	4698      	mov	r8, r3
     e02:	3302      	adds	r3, #2
     e04:	2708      	movs	r7, #8
     e06:	9301      	str	r3, [sp, #4]
     e08:	e7ce      	b.n	da8 <__aeabi_dmul+0x4c>
     e0a:	4649      	mov	r1, r9
     e0c:	2a02      	cmp	r2, #2
     e0e:	d06a      	beq.n	ee6 <__aeabi_dmul+0x18a>
     e10:	2a03      	cmp	r2, #3
     e12:	d100      	bne.n	e16 <__aeabi_dmul+0xba>
     e14:	e209      	b.n	122a <__aeabi_dmul+0x4ce>
     e16:	2a01      	cmp	r2, #1
     e18:	d000      	beq.n	e1c <__aeabi_dmul+0xc0>
     e1a:	e1bb      	b.n	1194 <__aeabi_dmul+0x438>
     e1c:	4011      	ands	r1, r2
     e1e:	2200      	movs	r2, #0
     e20:	2300      	movs	r3, #0
     e22:	2500      	movs	r5, #0
     e24:	4690      	mov	r8, r2
     e26:	b2cc      	uxtb	r4, r1
     e28:	2100      	movs	r1, #0
     e2a:	032d      	lsls	r5, r5, #12
     e2c:	0d0a      	lsrs	r2, r1, #20
     e2e:	0512      	lsls	r2, r2, #20
     e30:	0b2d      	lsrs	r5, r5, #12
     e32:	4315      	orrs	r5, r2
     e34:	4a43      	ldr	r2, [pc, #268]	; (f44 <__aeabi_dmul+0x1e8>)
     e36:	051b      	lsls	r3, r3, #20
     e38:	4015      	ands	r5, r2
     e3a:	431d      	orrs	r5, r3
     e3c:	006d      	lsls	r5, r5, #1
     e3e:	07e4      	lsls	r4, r4, #31
     e40:	086d      	lsrs	r5, r5, #1
     e42:	4325      	orrs	r5, r4
     e44:	4640      	mov	r0, r8
     e46:	0029      	movs	r1, r5
     e48:	b007      	add	sp, #28
     e4a:	bc3c      	pop	{r2, r3, r4, r5}
     e4c:	4690      	mov	r8, r2
     e4e:	4699      	mov	r9, r3
     e50:	46a2      	mov	sl, r4
     e52:	46ab      	mov	fp, r5
     e54:	bdf0      	pop	{r4, r5, r6, r7, pc}
     e56:	4303      	orrs	r3, r0
     e58:	d052      	beq.n	f00 <__aeabi_dmul+0x1a4>
     e5a:	465b      	mov	r3, fp
     e5c:	2b00      	cmp	r3, #0
     e5e:	d100      	bne.n	e62 <__aeabi_dmul+0x106>
     e60:	e18a      	b.n	1178 <__aeabi_dmul+0x41c>
     e62:	4658      	mov	r0, fp
     e64:	f000 fb16 	bl	1494 <__clzsi2>
     e68:	0003      	movs	r3, r0
     e6a:	3b0b      	subs	r3, #11
     e6c:	2b1c      	cmp	r3, #28
     e6e:	dd00      	ble.n	e72 <__aeabi_dmul+0x116>
     e70:	e17b      	b.n	116a <__aeabi_dmul+0x40e>
     e72:	221d      	movs	r2, #29
     e74:	1ad3      	subs	r3, r2, r3
     e76:	003a      	movs	r2, r7
     e78:	0001      	movs	r1, r0
     e7a:	465d      	mov	r5, fp
     e7c:	40da      	lsrs	r2, r3
     e7e:	3908      	subs	r1, #8
     e80:	408d      	lsls	r5, r1
     e82:	0013      	movs	r3, r2
     e84:	408f      	lsls	r7, r1
     e86:	432b      	orrs	r3, r5
     e88:	469b      	mov	fp, r3
     e8a:	46b8      	mov	r8, r7
     e8c:	4b2e      	ldr	r3, [pc, #184]	; (f48 <__aeabi_dmul+0x1ec>)
     e8e:	2700      	movs	r7, #0
     e90:	469c      	mov	ip, r3
     e92:	2300      	movs	r3, #0
     e94:	4460      	add	r0, ip
     e96:	4246      	negs	r6, r0
     e98:	9301      	str	r3, [sp, #4]
     e9a:	e785      	b.n	da8 <__aeabi_dmul+0x4c>
     e9c:	4652      	mov	r2, sl
     e9e:	432a      	orrs	r2, r5
     ea0:	d12c      	bne.n	efc <__aeabi_dmul+0x1a0>
     ea2:	2500      	movs	r5, #0
     ea4:	2300      	movs	r3, #0
     ea6:	2202      	movs	r2, #2
     ea8:	e797      	b.n	dda <__aeabi_dmul+0x7e>
     eaa:	4652      	mov	r2, sl
     eac:	432a      	orrs	r2, r5
     eae:	d021      	beq.n	ef4 <__aeabi_dmul+0x198>
     eb0:	2d00      	cmp	r5, #0
     eb2:	d100      	bne.n	eb6 <__aeabi_dmul+0x15a>
     eb4:	e154      	b.n	1160 <__aeabi_dmul+0x404>
     eb6:	0028      	movs	r0, r5
     eb8:	f000 faec 	bl	1494 <__clzsi2>
     ebc:	0003      	movs	r3, r0
     ebe:	3b0b      	subs	r3, #11
     ec0:	2b1c      	cmp	r3, #28
     ec2:	dd00      	ble.n	ec6 <__aeabi_dmul+0x16a>
     ec4:	e146      	b.n	1154 <__aeabi_dmul+0x3f8>
     ec6:	211d      	movs	r1, #29
     ec8:	1acb      	subs	r3, r1, r3
     eca:	4651      	mov	r1, sl
     ecc:	0002      	movs	r2, r0
     ece:	40d9      	lsrs	r1, r3
     ed0:	4653      	mov	r3, sl
     ed2:	3a08      	subs	r2, #8
     ed4:	4095      	lsls	r5, r2
     ed6:	4093      	lsls	r3, r2
     ed8:	430d      	orrs	r5, r1
     eda:	4a1b      	ldr	r2, [pc, #108]	; (f48 <__aeabi_dmul+0x1ec>)
     edc:	4694      	mov	ip, r2
     ede:	4460      	add	r0, ip
     ee0:	4240      	negs	r0, r0
     ee2:	2200      	movs	r2, #0
     ee4:	e779      	b.n	dda <__aeabi_dmul+0x7e>
     ee6:	2401      	movs	r4, #1
     ee8:	2200      	movs	r2, #0
     eea:	400c      	ands	r4, r1
     eec:	4b12      	ldr	r3, [pc, #72]	; (f38 <__aeabi_dmul+0x1dc>)
     eee:	2500      	movs	r5, #0
     ef0:	4690      	mov	r8, r2
     ef2:	e799      	b.n	e28 <__aeabi_dmul+0xcc>
     ef4:	2500      	movs	r5, #0
     ef6:	2300      	movs	r3, #0
     ef8:	2201      	movs	r2, #1
     efa:	e76e      	b.n	dda <__aeabi_dmul+0x7e>
     efc:	2203      	movs	r2, #3
     efe:	e76c      	b.n	dda <__aeabi_dmul+0x7e>
     f00:	2300      	movs	r3, #0
     f02:	469b      	mov	fp, r3
     f04:	4698      	mov	r8, r3
     f06:	3301      	adds	r3, #1
     f08:	2704      	movs	r7, #4
     f0a:	9301      	str	r3, [sp, #4]
     f0c:	e74c      	b.n	da8 <__aeabi_dmul+0x4c>
     f0e:	2303      	movs	r3, #3
     f10:	270c      	movs	r7, #12
     f12:	9301      	str	r3, [sp, #4]
     f14:	e748      	b.n	da8 <__aeabi_dmul+0x4c>
     f16:	2300      	movs	r3, #0
     f18:	2580      	movs	r5, #128	; 0x80
     f1a:	4698      	mov	r8, r3
     f1c:	2400      	movs	r4, #0
     f1e:	032d      	lsls	r5, r5, #12
     f20:	4b05      	ldr	r3, [pc, #20]	; (f38 <__aeabi_dmul+0x1dc>)
     f22:	e781      	b.n	e28 <__aeabi_dmul+0xcc>
     f24:	465d      	mov	r5, fp
     f26:	4643      	mov	r3, r8
     f28:	9a01      	ldr	r2, [sp, #4]
     f2a:	e76f      	b.n	e0c <__aeabi_dmul+0xb0>
     f2c:	465d      	mov	r5, fp
     f2e:	4643      	mov	r3, r8
     f30:	0021      	movs	r1, r4
     f32:	9a01      	ldr	r2, [sp, #4]
     f34:	e76a      	b.n	e0c <__aeabi_dmul+0xb0>
     f36:	46c0      	nop			; (mov r8, r8)
     f38:	000007ff 	.word	0x000007ff
     f3c:	fffffc01 	.word	0xfffffc01
     f40:	00001810 	.word	0x00001810
     f44:	800fffff 	.word	0x800fffff
     f48:	000003f3 	.word	0x000003f3
     f4c:	4642      	mov	r2, r8
     f4e:	0c12      	lsrs	r2, r2, #16
     f50:	4691      	mov	r9, r2
     f52:	0c1a      	lsrs	r2, r3, #16
     f54:	4694      	mov	ip, r2
     f56:	4642      	mov	r2, r8
     f58:	0417      	lsls	r7, r2, #16
     f5a:	464a      	mov	r2, r9
     f5c:	041b      	lsls	r3, r3, #16
     f5e:	0c1b      	lsrs	r3, r3, #16
     f60:	435a      	muls	r2, r3
     f62:	4660      	mov	r0, ip
     f64:	4690      	mov	r8, r2
     f66:	464a      	mov	r2, r9
     f68:	4342      	muls	r2, r0
     f6a:	0010      	movs	r0, r2
     f6c:	9203      	str	r2, [sp, #12]
     f6e:	4662      	mov	r2, ip
     f70:	001c      	movs	r4, r3
     f72:	0c3f      	lsrs	r7, r7, #16
     f74:	437a      	muls	r2, r7
     f76:	437c      	muls	r4, r7
     f78:	4442      	add	r2, r8
     f7a:	9201      	str	r2, [sp, #4]
     f7c:	0c22      	lsrs	r2, r4, #16
     f7e:	4692      	mov	sl, r2
     f80:	9a01      	ldr	r2, [sp, #4]
     f82:	4452      	add	r2, sl
     f84:	4590      	cmp	r8, r2
     f86:	d906      	bls.n	f96 <__aeabi_dmul+0x23a>
     f88:	4682      	mov	sl, r0
     f8a:	2080      	movs	r0, #128	; 0x80
     f8c:	0240      	lsls	r0, r0, #9
     f8e:	4680      	mov	r8, r0
     f90:	44c2      	add	sl, r8
     f92:	4650      	mov	r0, sl
     f94:	9003      	str	r0, [sp, #12]
     f96:	0c10      	lsrs	r0, r2, #16
     f98:	9004      	str	r0, [sp, #16]
     f9a:	4648      	mov	r0, r9
     f9c:	0424      	lsls	r4, r4, #16
     f9e:	0c24      	lsrs	r4, r4, #16
     fa0:	0412      	lsls	r2, r2, #16
     fa2:	1912      	adds	r2, r2, r4
     fa4:	9205      	str	r2, [sp, #20]
     fa6:	0c2a      	lsrs	r2, r5, #16
     fa8:	042d      	lsls	r5, r5, #16
     faa:	0c2d      	lsrs	r5, r5, #16
     fac:	4368      	muls	r0, r5
     fae:	002c      	movs	r4, r5
     fb0:	4682      	mov	sl, r0
     fb2:	4648      	mov	r0, r9
     fb4:	437c      	muls	r4, r7
     fb6:	4350      	muls	r0, r2
     fb8:	4681      	mov	r9, r0
     fba:	0c20      	lsrs	r0, r4, #16
     fbc:	4680      	mov	r8, r0
     fbe:	4357      	muls	r7, r2
     fc0:	4457      	add	r7, sl
     fc2:	4447      	add	r7, r8
     fc4:	45ba      	cmp	sl, r7
     fc6:	d903      	bls.n	fd0 <__aeabi_dmul+0x274>
     fc8:	2080      	movs	r0, #128	; 0x80
     fca:	0240      	lsls	r0, r0, #9
     fcc:	4680      	mov	r8, r0
     fce:	44c1      	add	r9, r8
     fd0:	0c38      	lsrs	r0, r7, #16
     fd2:	043f      	lsls	r7, r7, #16
     fd4:	46b8      	mov	r8, r7
     fd6:	4448      	add	r0, r9
     fd8:	0424      	lsls	r4, r4, #16
     fda:	0c24      	lsrs	r4, r4, #16
     fdc:	9001      	str	r0, [sp, #4]
     fde:	9804      	ldr	r0, [sp, #16]
     fe0:	44a0      	add	r8, r4
     fe2:	4440      	add	r0, r8
     fe4:	9004      	str	r0, [sp, #16]
     fe6:	4658      	mov	r0, fp
     fe8:	0c00      	lsrs	r0, r0, #16
     fea:	4681      	mov	r9, r0
     fec:	4658      	mov	r0, fp
     fee:	0404      	lsls	r4, r0, #16
     ff0:	0c20      	lsrs	r0, r4, #16
     ff2:	4682      	mov	sl, r0
     ff4:	0007      	movs	r7, r0
     ff6:	4648      	mov	r0, r9
     ff8:	435f      	muls	r7, r3
     ffa:	464c      	mov	r4, r9
     ffc:	4343      	muls	r3, r0
     ffe:	4660      	mov	r0, ip
    1000:	4360      	muls	r0, r4
    1002:	4664      	mov	r4, ip
    1004:	4683      	mov	fp, r0
    1006:	4650      	mov	r0, sl
    1008:	4344      	muls	r4, r0
    100a:	0c38      	lsrs	r0, r7, #16
    100c:	4684      	mov	ip, r0
    100e:	18e4      	adds	r4, r4, r3
    1010:	4464      	add	r4, ip
    1012:	42a3      	cmp	r3, r4
    1014:	d903      	bls.n	101e <__aeabi_dmul+0x2c2>
    1016:	2380      	movs	r3, #128	; 0x80
    1018:	025b      	lsls	r3, r3, #9
    101a:	469c      	mov	ip, r3
    101c:	44e3      	add	fp, ip
    101e:	4648      	mov	r0, r9
    1020:	043f      	lsls	r7, r7, #16
    1022:	0c23      	lsrs	r3, r4, #16
    1024:	0c3f      	lsrs	r7, r7, #16
    1026:	0424      	lsls	r4, r4, #16
    1028:	19e4      	adds	r4, r4, r7
    102a:	4657      	mov	r7, sl
    102c:	4368      	muls	r0, r5
    102e:	436f      	muls	r7, r5
    1030:	4684      	mov	ip, r0
    1032:	464d      	mov	r5, r9
    1034:	4650      	mov	r0, sl
    1036:	4355      	muls	r5, r2
    1038:	4342      	muls	r2, r0
    103a:	0c38      	lsrs	r0, r7, #16
    103c:	4681      	mov	r9, r0
    103e:	4462      	add	r2, ip
    1040:	444a      	add	r2, r9
    1042:	445b      	add	r3, fp
    1044:	4594      	cmp	ip, r2
    1046:	d903      	bls.n	1050 <__aeabi_dmul+0x2f4>
    1048:	2080      	movs	r0, #128	; 0x80
    104a:	0240      	lsls	r0, r0, #9
    104c:	4684      	mov	ip, r0
    104e:	4465      	add	r5, ip
    1050:	9803      	ldr	r0, [sp, #12]
    1052:	043f      	lsls	r7, r7, #16
    1054:	4683      	mov	fp, r0
    1056:	9804      	ldr	r0, [sp, #16]
    1058:	0c3f      	lsrs	r7, r7, #16
    105a:	4684      	mov	ip, r0
    105c:	44e3      	add	fp, ip
    105e:	45c3      	cmp	fp, r8
    1060:	4180      	sbcs	r0, r0
    1062:	4240      	negs	r0, r0
    1064:	4682      	mov	sl, r0
    1066:	0410      	lsls	r0, r2, #16
    1068:	4684      	mov	ip, r0
    106a:	9801      	ldr	r0, [sp, #4]
    106c:	4467      	add	r7, ip
    106e:	4684      	mov	ip, r0
    1070:	4467      	add	r7, ip
    1072:	44a3      	add	fp, r4
    1074:	46bc      	mov	ip, r7
    1076:	45a3      	cmp	fp, r4
    1078:	41a4      	sbcs	r4, r4
    107a:	4699      	mov	r9, r3
    107c:	44d4      	add	ip, sl
    107e:	4264      	negs	r4, r4
    1080:	4287      	cmp	r7, r0
    1082:	41bf      	sbcs	r7, r7
    1084:	45d4      	cmp	ip, sl
    1086:	4180      	sbcs	r0, r0
    1088:	44e1      	add	r9, ip
    108a:	46a0      	mov	r8, r4
    108c:	4599      	cmp	r9, r3
    108e:	419b      	sbcs	r3, r3
    1090:	427f      	negs	r7, r7
    1092:	4240      	negs	r0, r0
    1094:	44c8      	add	r8, r9
    1096:	4307      	orrs	r7, r0
    1098:	0c12      	lsrs	r2, r2, #16
    109a:	18ba      	adds	r2, r7, r2
    109c:	45a0      	cmp	r8, r4
    109e:	41a4      	sbcs	r4, r4
    10a0:	425f      	negs	r7, r3
    10a2:	003b      	movs	r3, r7
    10a4:	4264      	negs	r4, r4
    10a6:	4323      	orrs	r3, r4
    10a8:	18d7      	adds	r7, r2, r3
    10aa:	4643      	mov	r3, r8
    10ac:	197d      	adds	r5, r7, r5
    10ae:	0ddb      	lsrs	r3, r3, #23
    10b0:	026d      	lsls	r5, r5, #9
    10b2:	431d      	orrs	r5, r3
    10b4:	465b      	mov	r3, fp
    10b6:	025a      	lsls	r2, r3, #9
    10b8:	9b05      	ldr	r3, [sp, #20]
    10ba:	431a      	orrs	r2, r3
    10bc:	1e53      	subs	r3, r2, #1
    10be:	419a      	sbcs	r2, r3
    10c0:	465b      	mov	r3, fp
    10c2:	0ddb      	lsrs	r3, r3, #23
    10c4:	431a      	orrs	r2, r3
    10c6:	4643      	mov	r3, r8
    10c8:	025b      	lsls	r3, r3, #9
    10ca:	4313      	orrs	r3, r2
    10cc:	01ea      	lsls	r2, r5, #7
    10ce:	d507      	bpl.n	10e0 <__aeabi_dmul+0x384>
    10d0:	2201      	movs	r2, #1
    10d2:	085c      	lsrs	r4, r3, #1
    10d4:	4013      	ands	r3, r2
    10d6:	4323      	orrs	r3, r4
    10d8:	07ea      	lsls	r2, r5, #31
    10da:	9e02      	ldr	r6, [sp, #8]
    10dc:	4313      	orrs	r3, r2
    10de:	086d      	lsrs	r5, r5, #1
    10e0:	4a57      	ldr	r2, [pc, #348]	; (1240 <__aeabi_dmul+0x4e4>)
    10e2:	18b2      	adds	r2, r6, r2
    10e4:	2a00      	cmp	r2, #0
    10e6:	dd4b      	ble.n	1180 <__aeabi_dmul+0x424>
    10e8:	0758      	lsls	r0, r3, #29
    10ea:	d009      	beq.n	1100 <__aeabi_dmul+0x3a4>
    10ec:	200f      	movs	r0, #15
    10ee:	4018      	ands	r0, r3
    10f0:	2804      	cmp	r0, #4
    10f2:	d005      	beq.n	1100 <__aeabi_dmul+0x3a4>
    10f4:	1d18      	adds	r0, r3, #4
    10f6:	4298      	cmp	r0, r3
    10f8:	419b      	sbcs	r3, r3
    10fa:	425b      	negs	r3, r3
    10fc:	18ed      	adds	r5, r5, r3
    10fe:	0003      	movs	r3, r0
    1100:	01e8      	lsls	r0, r5, #7
    1102:	d504      	bpl.n	110e <__aeabi_dmul+0x3b2>
    1104:	4a4f      	ldr	r2, [pc, #316]	; (1244 <__aeabi_dmul+0x4e8>)
    1106:	4015      	ands	r5, r2
    1108:	2280      	movs	r2, #128	; 0x80
    110a:	00d2      	lsls	r2, r2, #3
    110c:	18b2      	adds	r2, r6, r2
    110e:	484e      	ldr	r0, [pc, #312]	; (1248 <__aeabi_dmul+0x4ec>)
    1110:	4282      	cmp	r2, r0
    1112:	dd00      	ble.n	1116 <__aeabi_dmul+0x3ba>
    1114:	e6e7      	b.n	ee6 <__aeabi_dmul+0x18a>
    1116:	2401      	movs	r4, #1
    1118:	08db      	lsrs	r3, r3, #3
    111a:	0768      	lsls	r0, r5, #29
    111c:	4318      	orrs	r0, r3
    111e:	026d      	lsls	r5, r5, #9
    1120:	0553      	lsls	r3, r2, #21
    1122:	4680      	mov	r8, r0
    1124:	0b2d      	lsrs	r5, r5, #12
    1126:	0d5b      	lsrs	r3, r3, #21
    1128:	400c      	ands	r4, r1
    112a:	e67d      	b.n	e28 <__aeabi_dmul+0xcc>
    112c:	2280      	movs	r2, #128	; 0x80
    112e:	4659      	mov	r1, fp
    1130:	0312      	lsls	r2, r2, #12
    1132:	4211      	tst	r1, r2
    1134:	d008      	beq.n	1148 <__aeabi_dmul+0x3ec>
    1136:	4215      	tst	r5, r2
    1138:	d106      	bne.n	1148 <__aeabi_dmul+0x3ec>
    113a:	4315      	orrs	r5, r2
    113c:	032d      	lsls	r5, r5, #12
    113e:	4698      	mov	r8, r3
    1140:	0b2d      	lsrs	r5, r5, #12
    1142:	464c      	mov	r4, r9
    1144:	4b41      	ldr	r3, [pc, #260]	; (124c <__aeabi_dmul+0x4f0>)
    1146:	e66f      	b.n	e28 <__aeabi_dmul+0xcc>
    1148:	465d      	mov	r5, fp
    114a:	4315      	orrs	r5, r2
    114c:	032d      	lsls	r5, r5, #12
    114e:	0b2d      	lsrs	r5, r5, #12
    1150:	4b3e      	ldr	r3, [pc, #248]	; (124c <__aeabi_dmul+0x4f0>)
    1152:	e669      	b.n	e28 <__aeabi_dmul+0xcc>
    1154:	0003      	movs	r3, r0
    1156:	4655      	mov	r5, sl
    1158:	3b28      	subs	r3, #40	; 0x28
    115a:	409d      	lsls	r5, r3
    115c:	2300      	movs	r3, #0
    115e:	e6bc      	b.n	eda <__aeabi_dmul+0x17e>
    1160:	4650      	mov	r0, sl
    1162:	f000 f997 	bl	1494 <__clzsi2>
    1166:	3020      	adds	r0, #32
    1168:	e6a8      	b.n	ebc <__aeabi_dmul+0x160>
    116a:	0003      	movs	r3, r0
    116c:	3b28      	subs	r3, #40	; 0x28
    116e:	409f      	lsls	r7, r3
    1170:	2300      	movs	r3, #0
    1172:	46bb      	mov	fp, r7
    1174:	4698      	mov	r8, r3
    1176:	e689      	b.n	e8c <__aeabi_dmul+0x130>
    1178:	f000 f98c 	bl	1494 <__clzsi2>
    117c:	3020      	adds	r0, #32
    117e:	e673      	b.n	e68 <__aeabi_dmul+0x10c>
    1180:	2401      	movs	r4, #1
    1182:	1aa6      	subs	r6, r4, r2
    1184:	2e38      	cmp	r6, #56	; 0x38
    1186:	dd07      	ble.n	1198 <__aeabi_dmul+0x43c>
    1188:	2200      	movs	r2, #0
    118a:	400c      	ands	r4, r1
    118c:	2300      	movs	r3, #0
    118e:	2500      	movs	r5, #0
    1190:	4690      	mov	r8, r2
    1192:	e649      	b.n	e28 <__aeabi_dmul+0xcc>
    1194:	9e02      	ldr	r6, [sp, #8]
    1196:	e7a3      	b.n	10e0 <__aeabi_dmul+0x384>
    1198:	2e1f      	cmp	r6, #31
    119a:	dc20      	bgt.n	11de <__aeabi_dmul+0x482>
    119c:	2220      	movs	r2, #32
    119e:	002c      	movs	r4, r5
    11a0:	0018      	movs	r0, r3
    11a2:	1b92      	subs	r2, r2, r6
    11a4:	40f0      	lsrs	r0, r6
    11a6:	4094      	lsls	r4, r2
    11a8:	4093      	lsls	r3, r2
    11aa:	4304      	orrs	r4, r0
    11ac:	1e58      	subs	r0, r3, #1
    11ae:	4183      	sbcs	r3, r0
    11b0:	431c      	orrs	r4, r3
    11b2:	40f5      	lsrs	r5, r6
    11b4:	0763      	lsls	r3, r4, #29
    11b6:	d009      	beq.n	11cc <__aeabi_dmul+0x470>
    11b8:	230f      	movs	r3, #15
    11ba:	4023      	ands	r3, r4
    11bc:	2b04      	cmp	r3, #4
    11be:	d005      	beq.n	11cc <__aeabi_dmul+0x470>
    11c0:	0023      	movs	r3, r4
    11c2:	1d1c      	adds	r4, r3, #4
    11c4:	429c      	cmp	r4, r3
    11c6:	4192      	sbcs	r2, r2
    11c8:	4252      	negs	r2, r2
    11ca:	18ad      	adds	r5, r5, r2
    11cc:	022b      	lsls	r3, r5, #8
    11ce:	d51f      	bpl.n	1210 <__aeabi_dmul+0x4b4>
    11d0:	2401      	movs	r4, #1
    11d2:	2200      	movs	r2, #0
    11d4:	400c      	ands	r4, r1
    11d6:	2301      	movs	r3, #1
    11d8:	2500      	movs	r5, #0
    11da:	4690      	mov	r8, r2
    11dc:	e624      	b.n	e28 <__aeabi_dmul+0xcc>
    11de:	201f      	movs	r0, #31
    11e0:	002c      	movs	r4, r5
    11e2:	4240      	negs	r0, r0
    11e4:	1a82      	subs	r2, r0, r2
    11e6:	40d4      	lsrs	r4, r2
    11e8:	2e20      	cmp	r6, #32
    11ea:	d01c      	beq.n	1226 <__aeabi_dmul+0x4ca>
    11ec:	2240      	movs	r2, #64	; 0x40
    11ee:	1b96      	subs	r6, r2, r6
    11f0:	40b5      	lsls	r5, r6
    11f2:	432b      	orrs	r3, r5
    11f4:	1e58      	subs	r0, r3, #1
    11f6:	4183      	sbcs	r3, r0
    11f8:	2007      	movs	r0, #7
    11fa:	4323      	orrs	r3, r4
    11fc:	4018      	ands	r0, r3
    11fe:	2500      	movs	r5, #0
    1200:	2800      	cmp	r0, #0
    1202:	d009      	beq.n	1218 <__aeabi_dmul+0x4bc>
    1204:	220f      	movs	r2, #15
    1206:	2500      	movs	r5, #0
    1208:	401a      	ands	r2, r3
    120a:	001c      	movs	r4, r3
    120c:	2a04      	cmp	r2, #4
    120e:	d1d8      	bne.n	11c2 <__aeabi_dmul+0x466>
    1210:	0023      	movs	r3, r4
    1212:	0768      	lsls	r0, r5, #29
    1214:	026d      	lsls	r5, r5, #9
    1216:	0b2d      	lsrs	r5, r5, #12
    1218:	2401      	movs	r4, #1
    121a:	08db      	lsrs	r3, r3, #3
    121c:	4303      	orrs	r3, r0
    121e:	4698      	mov	r8, r3
    1220:	400c      	ands	r4, r1
    1222:	2300      	movs	r3, #0
    1224:	e600      	b.n	e28 <__aeabi_dmul+0xcc>
    1226:	2500      	movs	r5, #0
    1228:	e7e3      	b.n	11f2 <__aeabi_dmul+0x496>
    122a:	2280      	movs	r2, #128	; 0x80
    122c:	2401      	movs	r4, #1
    122e:	0312      	lsls	r2, r2, #12
    1230:	4315      	orrs	r5, r2
    1232:	032d      	lsls	r5, r5, #12
    1234:	4698      	mov	r8, r3
    1236:	0b2d      	lsrs	r5, r5, #12
    1238:	400c      	ands	r4, r1
    123a:	4b04      	ldr	r3, [pc, #16]	; (124c <__aeabi_dmul+0x4f0>)
    123c:	e5f4      	b.n	e28 <__aeabi_dmul+0xcc>
    123e:	46c0      	nop			; (mov r8, r8)
    1240:	000003ff 	.word	0x000003ff
    1244:	feffffff 	.word	0xfeffffff
    1248:	000007fe 	.word	0x000007fe
    124c:	000007ff 	.word	0x000007ff

00001250 <__aeabi_i2d>:
    1250:	b570      	push	{r4, r5, r6, lr}
    1252:	2800      	cmp	r0, #0
    1254:	d030      	beq.n	12b8 <__aeabi_i2d+0x68>
    1256:	17c3      	asrs	r3, r0, #31
    1258:	18c4      	adds	r4, r0, r3
    125a:	405c      	eors	r4, r3
    125c:	0fc5      	lsrs	r5, r0, #31
    125e:	0020      	movs	r0, r4
    1260:	f000 f918 	bl	1494 <__clzsi2>
    1264:	4b17      	ldr	r3, [pc, #92]	; (12c4 <__aeabi_i2d+0x74>)
    1266:	4a18      	ldr	r2, [pc, #96]	; (12c8 <__aeabi_i2d+0x78>)
    1268:	1a1b      	subs	r3, r3, r0
    126a:	1ad2      	subs	r2, r2, r3
    126c:	2a1f      	cmp	r2, #31
    126e:	dd18      	ble.n	12a2 <__aeabi_i2d+0x52>
    1270:	4a16      	ldr	r2, [pc, #88]	; (12cc <__aeabi_i2d+0x7c>)
    1272:	1ad2      	subs	r2, r2, r3
    1274:	4094      	lsls	r4, r2
    1276:	2200      	movs	r2, #0
    1278:	0324      	lsls	r4, r4, #12
    127a:	055b      	lsls	r3, r3, #21
    127c:	0b24      	lsrs	r4, r4, #12
    127e:	0d5b      	lsrs	r3, r3, #21
    1280:	2100      	movs	r1, #0
    1282:	0010      	movs	r0, r2
    1284:	0324      	lsls	r4, r4, #12
    1286:	0d0a      	lsrs	r2, r1, #20
    1288:	0512      	lsls	r2, r2, #20
    128a:	0b24      	lsrs	r4, r4, #12
    128c:	4314      	orrs	r4, r2
    128e:	4a10      	ldr	r2, [pc, #64]	; (12d0 <__aeabi_i2d+0x80>)
    1290:	051b      	lsls	r3, r3, #20
    1292:	4014      	ands	r4, r2
    1294:	431c      	orrs	r4, r3
    1296:	0064      	lsls	r4, r4, #1
    1298:	07ed      	lsls	r5, r5, #31
    129a:	0864      	lsrs	r4, r4, #1
    129c:	432c      	orrs	r4, r5
    129e:	0021      	movs	r1, r4
    12a0:	bd70      	pop	{r4, r5, r6, pc}
    12a2:	0021      	movs	r1, r4
    12a4:	4091      	lsls	r1, r2
    12a6:	000a      	movs	r2, r1
    12a8:	210b      	movs	r1, #11
    12aa:	1a08      	subs	r0, r1, r0
    12ac:	40c4      	lsrs	r4, r0
    12ae:	055b      	lsls	r3, r3, #21
    12b0:	0324      	lsls	r4, r4, #12
    12b2:	0b24      	lsrs	r4, r4, #12
    12b4:	0d5b      	lsrs	r3, r3, #21
    12b6:	e7e3      	b.n	1280 <__aeabi_i2d+0x30>
    12b8:	2500      	movs	r5, #0
    12ba:	2300      	movs	r3, #0
    12bc:	2400      	movs	r4, #0
    12be:	2200      	movs	r2, #0
    12c0:	e7de      	b.n	1280 <__aeabi_i2d+0x30>
    12c2:	46c0      	nop			; (mov r8, r8)
    12c4:	0000041e 	.word	0x0000041e
    12c8:	00000433 	.word	0x00000433
    12cc:	00000413 	.word	0x00000413
    12d0:	800fffff 	.word	0x800fffff

000012d4 <__aeabi_f2d>:
    12d4:	0042      	lsls	r2, r0, #1
    12d6:	0e12      	lsrs	r2, r2, #24
    12d8:	1c51      	adds	r1, r2, #1
    12da:	0243      	lsls	r3, r0, #9
    12dc:	b2c9      	uxtb	r1, r1
    12de:	b570      	push	{r4, r5, r6, lr}
    12e0:	0a5d      	lsrs	r5, r3, #9
    12e2:	0fc4      	lsrs	r4, r0, #31
    12e4:	2901      	cmp	r1, #1
    12e6:	dd15      	ble.n	1314 <__aeabi_f2d+0x40>
    12e8:	21e0      	movs	r1, #224	; 0xe0
    12ea:	0089      	lsls	r1, r1, #2
    12ec:	468c      	mov	ip, r1
    12ee:	076d      	lsls	r5, r5, #29
    12f0:	0b1b      	lsrs	r3, r3, #12
    12f2:	4462      	add	r2, ip
    12f4:	2100      	movs	r1, #0
    12f6:	0028      	movs	r0, r5
    12f8:	0d0d      	lsrs	r5, r1, #20
    12fa:	052d      	lsls	r5, r5, #20
    12fc:	432b      	orrs	r3, r5
    12fe:	4d1c      	ldr	r5, [pc, #112]	; (1370 <__aeabi_f2d+0x9c>)
    1300:	0552      	lsls	r2, r2, #21
    1302:	402b      	ands	r3, r5
    1304:	0852      	lsrs	r2, r2, #1
    1306:	4313      	orrs	r3, r2
    1308:	005b      	lsls	r3, r3, #1
    130a:	07e4      	lsls	r4, r4, #31
    130c:	085b      	lsrs	r3, r3, #1
    130e:	4323      	orrs	r3, r4
    1310:	0019      	movs	r1, r3
    1312:	bd70      	pop	{r4, r5, r6, pc}
    1314:	2a00      	cmp	r2, #0
    1316:	d115      	bne.n	1344 <__aeabi_f2d+0x70>
    1318:	2d00      	cmp	r5, #0
    131a:	d01f      	beq.n	135c <__aeabi_f2d+0x88>
    131c:	0028      	movs	r0, r5
    131e:	f000 f8b9 	bl	1494 <__clzsi2>
    1322:	280a      	cmp	r0, #10
    1324:	dc1d      	bgt.n	1362 <__aeabi_f2d+0x8e>
    1326:	230b      	movs	r3, #11
    1328:	002a      	movs	r2, r5
    132a:	1a1b      	subs	r3, r3, r0
    132c:	40da      	lsrs	r2, r3
    132e:	0013      	movs	r3, r2
    1330:	0002      	movs	r2, r0
    1332:	3215      	adds	r2, #21
    1334:	4095      	lsls	r5, r2
    1336:	4a0f      	ldr	r2, [pc, #60]	; (1374 <__aeabi_f2d+0xa0>)
    1338:	031b      	lsls	r3, r3, #12
    133a:	1a12      	subs	r2, r2, r0
    133c:	0552      	lsls	r2, r2, #21
    133e:	0b1b      	lsrs	r3, r3, #12
    1340:	0d52      	lsrs	r2, r2, #21
    1342:	e7d7      	b.n	12f4 <__aeabi_f2d+0x20>
    1344:	2d00      	cmp	r5, #0
    1346:	d006      	beq.n	1356 <__aeabi_f2d+0x82>
    1348:	2280      	movs	r2, #128	; 0x80
    134a:	0b1b      	lsrs	r3, r3, #12
    134c:	0312      	lsls	r2, r2, #12
    134e:	4313      	orrs	r3, r2
    1350:	076d      	lsls	r5, r5, #29
    1352:	4a09      	ldr	r2, [pc, #36]	; (1378 <__aeabi_f2d+0xa4>)
    1354:	e7ce      	b.n	12f4 <__aeabi_f2d+0x20>
    1356:	4a08      	ldr	r2, [pc, #32]	; (1378 <__aeabi_f2d+0xa4>)
    1358:	2300      	movs	r3, #0
    135a:	e7cb      	b.n	12f4 <__aeabi_f2d+0x20>
    135c:	2200      	movs	r2, #0
    135e:	2300      	movs	r3, #0
    1360:	e7c8      	b.n	12f4 <__aeabi_f2d+0x20>
    1362:	0003      	movs	r3, r0
    1364:	3b0b      	subs	r3, #11
    1366:	409d      	lsls	r5, r3
    1368:	002b      	movs	r3, r5
    136a:	2500      	movs	r5, #0
    136c:	e7e3      	b.n	1336 <__aeabi_f2d+0x62>
    136e:	46c0      	nop			; (mov r8, r8)
    1370:	800fffff 	.word	0x800fffff
    1374:	00000389 	.word	0x00000389
    1378:	000007ff 	.word	0x000007ff

0000137c <__aeabi_d2f>:
    137c:	004b      	lsls	r3, r1, #1
    137e:	b570      	push	{r4, r5, r6, lr}
    1380:	0d5e      	lsrs	r6, r3, #21
    1382:	030c      	lsls	r4, r1, #12
    1384:	1c75      	adds	r5, r6, #1
    1386:	0a64      	lsrs	r4, r4, #9
    1388:	0f42      	lsrs	r2, r0, #29
    138a:	056d      	lsls	r5, r5, #21
    138c:	4322      	orrs	r2, r4
    138e:	0fc9      	lsrs	r1, r1, #31
    1390:	00c4      	lsls	r4, r0, #3
    1392:	0d6d      	lsrs	r5, r5, #21
    1394:	2d01      	cmp	r5, #1
    1396:	dd2a      	ble.n	13ee <__aeabi_d2f+0x72>
    1398:	4b3b      	ldr	r3, [pc, #236]	; (1488 <__aeabi_d2f+0x10c>)
    139a:	18f3      	adds	r3, r6, r3
    139c:	2bfe      	cmp	r3, #254	; 0xfe
    139e:	dc1a      	bgt.n	13d6 <__aeabi_d2f+0x5a>
    13a0:	2b00      	cmp	r3, #0
    13a2:	dd42      	ble.n	142a <__aeabi_d2f+0xae>
    13a4:	0180      	lsls	r0, r0, #6
    13a6:	1e45      	subs	r5, r0, #1
    13a8:	41a8      	sbcs	r0, r5
    13aa:	00d2      	lsls	r2, r2, #3
    13ac:	4310      	orrs	r0, r2
    13ae:	0f62      	lsrs	r2, r4, #29
    13b0:	4302      	orrs	r2, r0
    13b2:	0750      	lsls	r0, r2, #29
    13b4:	d004      	beq.n	13c0 <__aeabi_d2f+0x44>
    13b6:	200f      	movs	r0, #15
    13b8:	4010      	ands	r0, r2
    13ba:	2804      	cmp	r0, #4
    13bc:	d000      	beq.n	13c0 <__aeabi_d2f+0x44>
    13be:	3204      	adds	r2, #4
    13c0:	2080      	movs	r0, #128	; 0x80
    13c2:	04c0      	lsls	r0, r0, #19
    13c4:	4010      	ands	r0, r2
    13c6:	d021      	beq.n	140c <__aeabi_d2f+0x90>
    13c8:	3301      	adds	r3, #1
    13ca:	2bff      	cmp	r3, #255	; 0xff
    13cc:	d003      	beq.n	13d6 <__aeabi_d2f+0x5a>
    13ce:	0192      	lsls	r2, r2, #6
    13d0:	0a52      	lsrs	r2, r2, #9
    13d2:	b2db      	uxtb	r3, r3
    13d4:	e001      	b.n	13da <__aeabi_d2f+0x5e>
    13d6:	23ff      	movs	r3, #255	; 0xff
    13d8:	2200      	movs	r2, #0
    13da:	0252      	lsls	r2, r2, #9
    13dc:	0a52      	lsrs	r2, r2, #9
    13de:	05db      	lsls	r3, r3, #23
    13e0:	4313      	orrs	r3, r2
    13e2:	005b      	lsls	r3, r3, #1
    13e4:	07c9      	lsls	r1, r1, #31
    13e6:	085b      	lsrs	r3, r3, #1
    13e8:	430b      	orrs	r3, r1
    13ea:	0018      	movs	r0, r3
    13ec:	bd70      	pop	{r4, r5, r6, pc}
    13ee:	2e00      	cmp	r6, #0
    13f0:	d007      	beq.n	1402 <__aeabi_d2f+0x86>
    13f2:	4314      	orrs	r4, r2
    13f4:	d0ef      	beq.n	13d6 <__aeabi_d2f+0x5a>
    13f6:	2080      	movs	r0, #128	; 0x80
    13f8:	00d2      	lsls	r2, r2, #3
    13fa:	0480      	lsls	r0, r0, #18
    13fc:	4302      	orrs	r2, r0
    13fe:	23ff      	movs	r3, #255	; 0xff
    1400:	e7d7      	b.n	13b2 <__aeabi_d2f+0x36>
    1402:	4322      	orrs	r2, r4
    1404:	2300      	movs	r3, #0
    1406:	2a00      	cmp	r2, #0
    1408:	d003      	beq.n	1412 <__aeabi_d2f+0x96>
    140a:	2205      	movs	r2, #5
    140c:	08d2      	lsrs	r2, r2, #3
    140e:	2bff      	cmp	r3, #255	; 0xff
    1410:	d003      	beq.n	141a <__aeabi_d2f+0x9e>
    1412:	0252      	lsls	r2, r2, #9
    1414:	0a52      	lsrs	r2, r2, #9
    1416:	b2db      	uxtb	r3, r3
    1418:	e7df      	b.n	13da <__aeabi_d2f+0x5e>
    141a:	2a00      	cmp	r2, #0
    141c:	d032      	beq.n	1484 <__aeabi_d2f+0x108>
    141e:	2080      	movs	r0, #128	; 0x80
    1420:	03c0      	lsls	r0, r0, #15
    1422:	4302      	orrs	r2, r0
    1424:	0252      	lsls	r2, r2, #9
    1426:	0a52      	lsrs	r2, r2, #9
    1428:	e7d7      	b.n	13da <__aeabi_d2f+0x5e>
    142a:	0018      	movs	r0, r3
    142c:	3017      	adds	r0, #23
    142e:	db14      	blt.n	145a <__aeabi_d2f+0xde>
    1430:	2080      	movs	r0, #128	; 0x80
    1432:	0400      	lsls	r0, r0, #16
    1434:	4302      	orrs	r2, r0
    1436:	201e      	movs	r0, #30
    1438:	1ac0      	subs	r0, r0, r3
    143a:	281f      	cmp	r0, #31
    143c:	dc0f      	bgt.n	145e <__aeabi_d2f+0xe2>
    143e:	0025      	movs	r5, r4
    1440:	4b12      	ldr	r3, [pc, #72]	; (148c <__aeabi_d2f+0x110>)
    1442:	18f3      	adds	r3, r6, r3
    1444:	409d      	lsls	r5, r3
    1446:	1e6e      	subs	r6, r5, #1
    1448:	41b5      	sbcs	r5, r6
    144a:	409a      	lsls	r2, r3
    144c:	002b      	movs	r3, r5
    144e:	4313      	orrs	r3, r2
    1450:	0022      	movs	r2, r4
    1452:	40c2      	lsrs	r2, r0
    1454:	431a      	orrs	r2, r3
    1456:	2300      	movs	r3, #0
    1458:	e7ab      	b.n	13b2 <__aeabi_d2f+0x36>
    145a:	2300      	movs	r3, #0
    145c:	e7d5      	b.n	140a <__aeabi_d2f+0x8e>
    145e:	2502      	movs	r5, #2
    1460:	426d      	negs	r5, r5
    1462:	1aeb      	subs	r3, r5, r3
    1464:	0015      	movs	r5, r2
    1466:	40dd      	lsrs	r5, r3
    1468:	2820      	cmp	r0, #32
    146a:	d009      	beq.n	1480 <__aeabi_d2f+0x104>
    146c:	4b08      	ldr	r3, [pc, #32]	; (1490 <__aeabi_d2f+0x114>)
    146e:	18f3      	adds	r3, r6, r3
    1470:	409a      	lsls	r2, r3
    1472:	4314      	orrs	r4, r2
    1474:	1e62      	subs	r2, r4, #1
    1476:	4194      	sbcs	r4, r2
    1478:	0022      	movs	r2, r4
    147a:	2300      	movs	r3, #0
    147c:	432a      	orrs	r2, r5
    147e:	e798      	b.n	13b2 <__aeabi_d2f+0x36>
    1480:	2200      	movs	r2, #0
    1482:	e7f6      	b.n	1472 <__aeabi_d2f+0xf6>
    1484:	2200      	movs	r2, #0
    1486:	e7a8      	b.n	13da <__aeabi_d2f+0x5e>
    1488:	fffffc80 	.word	0xfffffc80
    148c:	fffffc82 	.word	0xfffffc82
    1490:	fffffca2 	.word	0xfffffca2

00001494 <__clzsi2>:
    1494:	211c      	movs	r1, #28
    1496:	2301      	movs	r3, #1
    1498:	041b      	lsls	r3, r3, #16
    149a:	4298      	cmp	r0, r3
    149c:	d301      	bcc.n	14a2 <__clzsi2+0xe>
    149e:	0c00      	lsrs	r0, r0, #16
    14a0:	3910      	subs	r1, #16
    14a2:	0a1b      	lsrs	r3, r3, #8
    14a4:	4298      	cmp	r0, r3
    14a6:	d301      	bcc.n	14ac <__clzsi2+0x18>
    14a8:	0a00      	lsrs	r0, r0, #8
    14aa:	3908      	subs	r1, #8
    14ac:	091b      	lsrs	r3, r3, #4
    14ae:	4298      	cmp	r0, r3
    14b0:	d301      	bcc.n	14b6 <__clzsi2+0x22>
    14b2:	0900      	lsrs	r0, r0, #4
    14b4:	3904      	subs	r1, #4
    14b6:	a202      	add	r2, pc, #8	; (adr r2, 14c0 <__clzsi2+0x2c>)
    14b8:	5c10      	ldrb	r0, [r2, r0]
    14ba:	1840      	adds	r0, r0, r1
    14bc:	4770      	bx	lr
    14be:	46c0      	nop			; (mov r8, r8)
    14c0:	02020304 	.word	0x02020304
    14c4:	01010101 	.word	0x01010101
	...

000014d0 <__libc_init_array>:
    14d0:	b570      	push	{r4, r5, r6, lr}
    14d2:	4e0d      	ldr	r6, [pc, #52]	; (1508 <__libc_init_array+0x38>)
    14d4:	4d0d      	ldr	r5, [pc, #52]	; (150c <__libc_init_array+0x3c>)
    14d6:	2400      	movs	r4, #0
    14d8:	1bad      	subs	r5, r5, r6
    14da:	10ad      	asrs	r5, r5, #2
    14dc:	d005      	beq.n	14ea <__libc_init_array+0x1a>
    14de:	00a3      	lsls	r3, r4, #2
    14e0:	58f3      	ldr	r3, [r6, r3]
    14e2:	3401      	adds	r4, #1
    14e4:	4798      	blx	r3
    14e6:	42a5      	cmp	r5, r4
    14e8:	d1f9      	bne.n	14de <__libc_init_array+0xe>
    14ea:	f000 f9b5 	bl	1858 <_init>
    14ee:	4e08      	ldr	r6, [pc, #32]	; (1510 <__libc_init_array+0x40>)
    14f0:	4d08      	ldr	r5, [pc, #32]	; (1514 <__libc_init_array+0x44>)
    14f2:	2400      	movs	r4, #0
    14f4:	1bad      	subs	r5, r5, r6
    14f6:	10ad      	asrs	r5, r5, #2
    14f8:	d005      	beq.n	1506 <__libc_init_array+0x36>
    14fa:	00a3      	lsls	r3, r4, #2
    14fc:	58f3      	ldr	r3, [r6, r3]
    14fe:	3401      	adds	r4, #1
    1500:	4798      	blx	r3
    1502:	42a5      	cmp	r5, r4
    1504:	d1f9      	bne.n	14fa <__libc_init_array+0x2a>
    1506:	bd70      	pop	{r4, r5, r6, pc}
    1508:	00001864 	.word	0x00001864
    150c:	00001864 	.word	0x00001864
    1510:	00001864 	.word	0x00001864
    1514:	0000186c 	.word	0x0000186c

00001518 <memset>:
    1518:	b570      	push	{r4, r5, r6, lr}
    151a:	0783      	lsls	r3, r0, #30
    151c:	d03f      	beq.n	159e <memset+0x86>
    151e:	1e54      	subs	r4, r2, #1
    1520:	2a00      	cmp	r2, #0
    1522:	d03b      	beq.n	159c <memset+0x84>
    1524:	b2ce      	uxtb	r6, r1
    1526:	0003      	movs	r3, r0
    1528:	2503      	movs	r5, #3
    152a:	e003      	b.n	1534 <memset+0x1c>
    152c:	1e62      	subs	r2, r4, #1
    152e:	2c00      	cmp	r4, #0
    1530:	d034      	beq.n	159c <memset+0x84>
    1532:	0014      	movs	r4, r2
    1534:	3301      	adds	r3, #1
    1536:	1e5a      	subs	r2, r3, #1
    1538:	7016      	strb	r6, [r2, #0]
    153a:	422b      	tst	r3, r5
    153c:	d1f6      	bne.n	152c <memset+0x14>
    153e:	2c03      	cmp	r4, #3
    1540:	d924      	bls.n	158c <memset+0x74>
    1542:	25ff      	movs	r5, #255	; 0xff
    1544:	400d      	ands	r5, r1
    1546:	022a      	lsls	r2, r5, #8
    1548:	4315      	orrs	r5, r2
    154a:	042a      	lsls	r2, r5, #16
    154c:	4315      	orrs	r5, r2
    154e:	2c0f      	cmp	r4, #15
    1550:	d911      	bls.n	1576 <memset+0x5e>
    1552:	0026      	movs	r6, r4
    1554:	3e10      	subs	r6, #16
    1556:	0936      	lsrs	r6, r6, #4
    1558:	3601      	adds	r6, #1
    155a:	0136      	lsls	r6, r6, #4
    155c:	001a      	movs	r2, r3
    155e:	199b      	adds	r3, r3, r6
    1560:	6015      	str	r5, [r2, #0]
    1562:	6055      	str	r5, [r2, #4]
    1564:	6095      	str	r5, [r2, #8]
    1566:	60d5      	str	r5, [r2, #12]
    1568:	3210      	adds	r2, #16
    156a:	4293      	cmp	r3, r2
    156c:	d1f8      	bne.n	1560 <memset+0x48>
    156e:	220f      	movs	r2, #15
    1570:	4014      	ands	r4, r2
    1572:	2c03      	cmp	r4, #3
    1574:	d90a      	bls.n	158c <memset+0x74>
    1576:	1f26      	subs	r6, r4, #4
    1578:	08b6      	lsrs	r6, r6, #2
    157a:	3601      	adds	r6, #1
    157c:	00b6      	lsls	r6, r6, #2
    157e:	001a      	movs	r2, r3
    1580:	199b      	adds	r3, r3, r6
    1582:	c220      	stmia	r2!, {r5}
    1584:	4293      	cmp	r3, r2
    1586:	d1fc      	bne.n	1582 <memset+0x6a>
    1588:	2203      	movs	r2, #3
    158a:	4014      	ands	r4, r2
    158c:	2c00      	cmp	r4, #0
    158e:	d005      	beq.n	159c <memset+0x84>
    1590:	b2c9      	uxtb	r1, r1
    1592:	191c      	adds	r4, r3, r4
    1594:	7019      	strb	r1, [r3, #0]
    1596:	3301      	adds	r3, #1
    1598:	429c      	cmp	r4, r3
    159a:	d1fb      	bne.n	1594 <memset+0x7c>
    159c:	bd70      	pop	{r4, r5, r6, pc}
    159e:	0014      	movs	r4, r2
    15a0:	0003      	movs	r3, r0
    15a2:	e7cc      	b.n	153e <memset+0x26>

000015a4 <register_fini>:
    15a4:	4b03      	ldr	r3, [pc, #12]	; (15b4 <register_fini+0x10>)
    15a6:	b510      	push	{r4, lr}
    15a8:	2b00      	cmp	r3, #0
    15aa:	d002      	beq.n	15b2 <register_fini+0xe>
    15ac:	4802      	ldr	r0, [pc, #8]	; (15b8 <register_fini+0x14>)
    15ae:	f000 f805 	bl	15bc <atexit>
    15b2:	bd10      	pop	{r4, pc}
    15b4:	00000000 	.word	0x00000000
    15b8:	000015cd 	.word	0x000015cd

000015bc <atexit>:
    15bc:	b510      	push	{r4, lr}
    15be:	0001      	movs	r1, r0
    15c0:	2300      	movs	r3, #0
    15c2:	2200      	movs	r2, #0
    15c4:	2000      	movs	r0, #0
    15c6:	f000 f81b 	bl	1600 <__register_exitproc>
    15ca:	bd10      	pop	{r4, pc}

000015cc <__libc_fini_array>:
    15cc:	b570      	push	{r4, r5, r6, lr}
    15ce:	4b09      	ldr	r3, [pc, #36]	; (15f4 <__libc_fini_array+0x28>)
    15d0:	4c09      	ldr	r4, [pc, #36]	; (15f8 <__libc_fini_array+0x2c>)
    15d2:	1ae4      	subs	r4, r4, r3
    15d4:	10a4      	asrs	r4, r4, #2
    15d6:	d009      	beq.n	15ec <__libc_fini_array+0x20>
    15d8:	4a08      	ldr	r2, [pc, #32]	; (15fc <__libc_fini_array+0x30>)
    15da:	18a5      	adds	r5, r4, r2
    15dc:	00ad      	lsls	r5, r5, #2
    15de:	18ed      	adds	r5, r5, r3
    15e0:	682b      	ldr	r3, [r5, #0]
    15e2:	3c01      	subs	r4, #1
    15e4:	4798      	blx	r3
    15e6:	3d04      	subs	r5, #4
    15e8:	2c00      	cmp	r4, #0
    15ea:	d1f9      	bne.n	15e0 <__libc_fini_array+0x14>
    15ec:	f000 f93e 	bl	186c <_fini>
    15f0:	bd70      	pop	{r4, r5, r6, pc}
    15f2:	46c0      	nop			; (mov r8, r8)
    15f4:	00001878 	.word	0x00001878
    15f8:	0000187c 	.word	0x0000187c
    15fc:	3fffffff 	.word	0x3fffffff

00001600 <__register_exitproc>:
    1600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1602:	4644      	mov	r4, r8
    1604:	465f      	mov	r7, fp
    1606:	4656      	mov	r6, sl
    1608:	464d      	mov	r5, r9
    160a:	469b      	mov	fp, r3
    160c:	4b2f      	ldr	r3, [pc, #188]	; (16cc <__register_exitproc+0xcc>)
    160e:	b4f0      	push	{r4, r5, r6, r7}
    1610:	681c      	ldr	r4, [r3, #0]
    1612:	23a4      	movs	r3, #164	; 0xa4
    1614:	005b      	lsls	r3, r3, #1
    1616:	0005      	movs	r5, r0
    1618:	58e0      	ldr	r0, [r4, r3]
    161a:	000e      	movs	r6, r1
    161c:	4690      	mov	r8, r2
    161e:	2800      	cmp	r0, #0
    1620:	d04b      	beq.n	16ba <__register_exitproc+0xba>
    1622:	6843      	ldr	r3, [r0, #4]
    1624:	2b1f      	cmp	r3, #31
    1626:	dc0d      	bgt.n	1644 <__register_exitproc+0x44>
    1628:	1c5c      	adds	r4, r3, #1
    162a:	2d00      	cmp	r5, #0
    162c:	d121      	bne.n	1672 <__register_exitproc+0x72>
    162e:	3302      	adds	r3, #2
    1630:	009b      	lsls	r3, r3, #2
    1632:	6044      	str	r4, [r0, #4]
    1634:	501e      	str	r6, [r3, r0]
    1636:	2000      	movs	r0, #0
    1638:	bc3c      	pop	{r2, r3, r4, r5}
    163a:	4690      	mov	r8, r2
    163c:	4699      	mov	r9, r3
    163e:	46a2      	mov	sl, r4
    1640:	46ab      	mov	fp, r5
    1642:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1644:	4b22      	ldr	r3, [pc, #136]	; (16d0 <__register_exitproc+0xd0>)
    1646:	2b00      	cmp	r3, #0
    1648:	d03c      	beq.n	16c4 <__register_exitproc+0xc4>
    164a:	20c8      	movs	r0, #200	; 0xc8
    164c:	0040      	lsls	r0, r0, #1
    164e:	e000      	b.n	1652 <__register_exitproc+0x52>
    1650:	bf00      	nop
    1652:	2800      	cmp	r0, #0
    1654:	d036      	beq.n	16c4 <__register_exitproc+0xc4>
    1656:	22a4      	movs	r2, #164	; 0xa4
    1658:	2300      	movs	r3, #0
    165a:	0052      	lsls	r2, r2, #1
    165c:	58a1      	ldr	r1, [r4, r2]
    165e:	6043      	str	r3, [r0, #4]
    1660:	6001      	str	r1, [r0, #0]
    1662:	50a0      	str	r0, [r4, r2]
    1664:	3240      	adds	r2, #64	; 0x40
    1666:	5083      	str	r3, [r0, r2]
    1668:	3204      	adds	r2, #4
    166a:	5083      	str	r3, [r0, r2]
    166c:	2401      	movs	r4, #1
    166e:	2d00      	cmp	r5, #0
    1670:	d0dd      	beq.n	162e <__register_exitproc+0x2e>
    1672:	009a      	lsls	r2, r3, #2
    1674:	4691      	mov	r9, r2
    1676:	4481      	add	r9, r0
    1678:	4642      	mov	r2, r8
    167a:	2188      	movs	r1, #136	; 0x88
    167c:	464f      	mov	r7, r9
    167e:	507a      	str	r2, [r7, r1]
    1680:	22c4      	movs	r2, #196	; 0xc4
    1682:	0052      	lsls	r2, r2, #1
    1684:	4690      	mov	r8, r2
    1686:	4480      	add	r8, r0
    1688:	4642      	mov	r2, r8
    168a:	3987      	subs	r1, #135	; 0x87
    168c:	4099      	lsls	r1, r3
    168e:	6812      	ldr	r2, [r2, #0]
    1690:	468a      	mov	sl, r1
    1692:	430a      	orrs	r2, r1
    1694:	4694      	mov	ip, r2
    1696:	4642      	mov	r2, r8
    1698:	4661      	mov	r1, ip
    169a:	6011      	str	r1, [r2, #0]
    169c:	2284      	movs	r2, #132	; 0x84
    169e:	4649      	mov	r1, r9
    16a0:	465f      	mov	r7, fp
    16a2:	0052      	lsls	r2, r2, #1
    16a4:	508f      	str	r7, [r1, r2]
    16a6:	2d02      	cmp	r5, #2
    16a8:	d1c1      	bne.n	162e <__register_exitproc+0x2e>
    16aa:	0002      	movs	r2, r0
    16ac:	4655      	mov	r5, sl
    16ae:	328d      	adds	r2, #141	; 0x8d
    16b0:	32ff      	adds	r2, #255	; 0xff
    16b2:	6811      	ldr	r1, [r2, #0]
    16b4:	430d      	orrs	r5, r1
    16b6:	6015      	str	r5, [r2, #0]
    16b8:	e7b9      	b.n	162e <__register_exitproc+0x2e>
    16ba:	0020      	movs	r0, r4
    16bc:	304d      	adds	r0, #77	; 0x4d
    16be:	30ff      	adds	r0, #255	; 0xff
    16c0:	50e0      	str	r0, [r4, r3]
    16c2:	e7ae      	b.n	1622 <__register_exitproc+0x22>
    16c4:	2001      	movs	r0, #1
    16c6:	4240      	negs	r0, r0
    16c8:	e7b6      	b.n	1638 <__register_exitproc+0x38>
    16ca:	46c0      	nop			; (mov r8, r8)
    16cc:	00001854 	.word	0x00001854
    16d0:	00000000 	.word	0x00000000

000016d4 <lookupTable.12289>:
    16d4:	ffff8d20 ffffada1 ffffce64 ffffef6c      .......d...l...
    16e4:	000010b7 0000324a 00005425 00007649     ....J2..%T..Iv..
    16f4:	000098b7 0000bb72 0000de79 000101d0     ....r...y.......
    1704:	00012576 0001496f 00016dbc 0001925e     v%..oI...m..^...
    1714:	0001b758 0001dcaa 00020258 00022862     X.......X...b(..
    1724:	00024ecc 00027596 00029cc4 0002c457     .N...u......W...
    1734:	0002ec52 000314b7 00033d89 000366ca     R........=...f..
    1744:	0003907d 0003baa4 0003e544 0004105e     }.......D...^...
    1754:	00043bf6 0004680e 000494ac 0004c1d1     .;...h..........
    1764:	0004ef81 00051dc1 00054c95 00057c00     .........L...|..
    1774:	0005ac07 0005dcae 00060dfb 00063ff2     .............?..
    1784:	00067298 0006a5f4 0006da09 00070ee0     .r..............
    1794:	0007447d 00077ae8 0007b228 0007ea44     }D...z..(...D...
    17a4:	00082344 00085d30 00089810 0008d3ef     D#..0]..........
    17b4:	000910d6 00094ecf 00098de5 0009ce23     .....N......#...
    17c4:	000a0f98 000a524f 000a9657 000adbbf     ....OR..W.......
    17d4:	000b2298 000b6af3 000bb4e2 000c007b     ."...j......{...
    17e4:	000c4dd4 000c9d03 000cee23 000d4150     .M......#...PA..
    17f4:	000d96a9 000dee4e 000e4865 000ea516     ....N...eH......
    1804:	000f048e                                ....

00001808 <senseBat>:
    1808:	05000000 00000005 00000f4c 00000e0c     ........L.......
    1818:	00000e0c 00000e0a 00000f24 00000f24     ........$...$...
    1828:	00000f16 00000e0a 00000f24 00000f16     ........$.......
    1838:	00000f24 00000e0a 00000f2c 00000f2c     $.......,...,...
    1848:	00000f2c 0000112c 00000043              ,...,...C...

00001854 <_global_impure_ptr>:
    1854:	20000010                                ... 

00001858 <_init>:
    1858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    185a:	46c0      	nop			; (mov r8, r8)
    185c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    185e:	bc08      	pop	{r3}
    1860:	469e      	mov	lr, r3
    1862:	4770      	bx	lr

00001864 <__init_array_start>:
    1864:	000015a5 	.word	0x000015a5

00001868 <__frame_dummy_init_array_entry>:
    1868:	000000dd                                ....

0000186c <_fini>:
    186c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    186e:	46c0      	nop			; (mov r8, r8)
    1870:	bcf8      	pop	{r3, r4, r5, r6, r7}
    1872:	bc08      	pop	{r3}
    1874:	469e      	mov	lr, r3
    1876:	4770      	bx	lr

00001878 <__fini_array_start>:
    1878:	000000b5 	.word	0x000000b5
