
DasAltimeter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006564  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000000d8  20000000  00006564  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000004c8  200000d8  00006640  000200d8  2**3
                  ALLOC
  3 .stack        00002000  200005a0  00006b08  000200d8  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY
  6 .debug_info   0002717f  00000000  00000000  00020159  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002cdf  00000000  00000000  000472d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000027d1  00000000  00000000  00049fb7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000004e0  00000000  00000000  0004c788  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000db0  00000000  00000000  0004cc68  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00016921  00000000  00000000  0004da18  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000a8a9  00000000  00000000  00064339  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00072bd7  00000000  00000000  0006ebe2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001124  00000000  00000000  000e17bc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
 *         retrieved from cpu registers.
 */
void SystemCoreClockUpdate(void)
{
	// Not implemented
	SystemCoreClock = __SYSTEM_CLOCK;
       0:	200025a0 	.word	0x200025a0
       4:	00000119 	.word	0x00000119
	return;
}
       8:	00000115 	.word	0x00000115
       c:	00000a5d 	.word	0x00000a5d
	...
      2c:	00000115 	.word	0x00000115
	...
      38:	00000115 	.word	0x00000115
      3c:	000010dd 	.word	0x000010dd
      40:	00000115 	.word	0x00000115
      44:	00000115 	.word	0x00000115
      48:	00000115 	.word	0x00000115
      4c:	00001111 	.word	0x00001111
      50:	00000115 	.word	0x00000115
      54:	00000115 	.word	0x00000115
      58:	00000115 	.word	0x00000115
      5c:	00000115 	.word	0x00000115
      60:	00000115 	.word	0x00000115
      64:	00000115 	.word	0x00000115
      68:	00000115 	.word	0x00000115
      6c:	00000115 	.word	0x00000115
      70:	00000115 	.word	0x00000115
      74:	00000115 	.word	0x00000115
      78:	00000115 	.word	0x00000115
      7c:	00000115 	.word	0x00000115
      80:	00000115 	.word	0x00000115
      84:	00000115 	.word	0x00000115
      88:	00000115 	.word	0x00000115
      8c:	000011b1 	.word	0x000011b1
      90:	00001219 	.word	0x00001219
	...
      9c:	00000115 	.word	0x00000115
      a0:	00000115 	.word	0x00000115
      a4:	00000115 	.word	0x00000115
      a8:	00000115 	.word	0x00000115
      ac:	00000115 	.word	0x00000115
      b0:	00000000 	.word	0x00000000

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200000d8 	.word	0x200000d8
      d4:	00000000 	.word	0x00000000
      d8:	00006564 	.word	0x00006564

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200000dc 	.word	0x200000dc
     108:	00006564 	.word	0x00006564
     10c:	00006564 	.word	0x00006564
     110:	00000000 	.word	0x00000000

00000114 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     114:	e7fe      	b.n	114 <Dummy_Handler>
	...

00000118 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
     118:	4821      	ldr	r0, [pc, #132]	; (1a0 <Reset_Handler+0x88>)
     11a:	4922      	ldr	r1, [pc, #136]	; (1a4 <Reset_Handler+0x8c>)
     11c:	b570      	push	{r4, r5, r6, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
     11e:	4288      	cmp	r0, r1
     120:	d002      	beq.n	128 <Reset_Handler+0x10>
     122:	2300      	movs	r3, #0
                for (; pDest < &_erelocate;) {
     124:	4c20      	ldr	r4, [pc, #128]	; (1a8 <Reset_Handler+0x90>)
     126:	e003      	b.n	130 <Reset_Handler+0x18>
     128:	4b20      	ldr	r3, [pc, #128]	; (1ac <Reset_Handler+0x94>)
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     12a:	4a21      	ldr	r2, [pc, #132]	; (1b0 <Reset_Handler+0x98>)
                *pDest++ = 0;
     12c:	2100      	movs	r1, #0
     12e:	e006      	b.n	13e <Reset_Handler+0x26>
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
     130:	18ca      	adds	r2, r1, r3
     132:	42a2      	cmp	r2, r4
     134:	d2f8      	bcs.n	128 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
     136:	58c5      	ldr	r5, [r0, r3]
     138:	3304      	adds	r3, #4
     13a:	6015      	str	r5, [r2, #0]
     13c:	e7f8      	b.n	130 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
     13e:	4293      	cmp	r3, r2
     140:	d201      	bcs.n	146 <Reset_Handler+0x2e>
                *pDest++ = 0;
     142:	c302      	stmia	r3!, {r1}
     144:	e7fb      	b.n	13e <Reset_Handler+0x26>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     146:	21ff      	movs	r1, #255	; 0xff

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     148:	2402      	movs	r4, #2
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     14a:	2503      	movs	r5, #3
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     14c:	4b19      	ldr	r3, [pc, #100]	; (1b4 <Reset_Handler+0x9c>)
     14e:	4a1a      	ldr	r2, [pc, #104]	; (1b8 <Reset_Handler+0xa0>)
     150:	438b      	bics	r3, r1

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     152:	260c      	movs	r6, #12
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     154:	6093      	str	r3, [r2, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     156:	2208      	movs	r2, #8
        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     158:	4b18      	ldr	r3, [pc, #96]	; (1bc <Reset_Handler+0xa4>)
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     15a:	4919      	ldr	r1, [pc, #100]	; (1c0 <Reset_Handler+0xa8>)
        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     15c:	625c      	str	r4, [r3, #36]	; 0x24
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     15e:	78cb      	ldrb	r3, [r1, #3]
     160:	43ab      	bics	r3, r5
     162:	4323      	orrs	r3, r4
     164:	70cb      	strb	r3, [r1, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     166:	78cb      	ldrb	r3, [r1, #3]
     168:	43b3      	bics	r3, r6
     16a:	4313      	orrs	r3, r2
     16c:	70cb      	strb	r3, [r1, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
     16e:	2130      	movs	r1, #48	; 0x30
     170:	4b14      	ldr	r3, [pc, #80]	; (1c4 <Reset_Handler+0xac>)
     172:	7b98      	ldrb	r0, [r3, #14]
     174:	4388      	bics	r0, r1
     176:	3910      	subs	r1, #16
     178:	4308      	orrs	r0, r1
     17a:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     17c:	7b99      	ldrb	r1, [r3, #14]
     17e:	43b1      	bics	r1, r6
     180:	4311      	orrs	r1, r2
     182:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
     184:	2180      	movs	r1, #128	; 0x80
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
        DMAC->QOSCTRL.bit.FQOS = 2;
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     186:	7b9a      	ldrb	r2, [r3, #14]
     188:	43aa      	bics	r2, r5
     18a:	4322      	orrs	r2, r4
     18c:	739a      	strb	r2, [r3, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
     18e:	4a0e      	ldr	r2, [pc, #56]	; (1c8 <Reset_Handler+0xb0>)
     190:	6853      	ldr	r3, [r2, #4]
     192:	430b      	orrs	r3, r1
     194:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
     196:	4b0d      	ldr	r3, [pc, #52]	; (1cc <Reset_Handler+0xb4>)
     198:	4798      	blx	r3

        /* Branch to main function */
        main();
     19a:	4b0d      	ldr	r3, [pc, #52]	; (1d0 <Reset_Handler+0xb8>)
     19c:	4798      	blx	r3
     19e:	e7fe      	b.n	19e <Reset_Handler+0x86>
     1a0:	00006564 	.word	0x00006564
     1a4:	20000000 	.word	0x20000000
     1a8:	200000d8 	.word	0x200000d8
     1ac:	200000d8 	.word	0x200000d8
     1b0:	200005a0 	.word	0x200005a0
     1b4:	00000000 	.word	0x00000000
     1b8:	e000ed00 	.word	0xe000ed00
     1bc:	410070fc 	.word	0x410070fc
     1c0:	41005000 	.word	0x41005000
     1c4:	41004800 	.word	0x41004800
     1c8:	41004000 	.word	0x41004000
     1cc:	000063fd 	.word	0x000063fd
     1d0:	000009d5 	.word	0x000009d5

000001d4 <SystemInit>:
     1d4:	4a01      	ldr	r2, [pc, #4]	; (1dc <SystemInit+0x8>)
     1d6:	4b02      	ldr	r3, [pc, #8]	; (1e0 <SystemInit+0xc>)
     1d8:	601a      	str	r2, [r3, #0]
     1da:	4770      	bx	lr
     1dc:	000f4240 	.word	0x000f4240
     1e0:	20000000 	.word	0x20000000

000001e4 <AT25SFHoldTillReady>:
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     1e4:	2380      	movs	r3, #128	; 0x80
    pinLow(cs_mem);
    spiDataOut(MEM_SPI,OPCODE_WRITEENABLE);
    pinHigh(cs_mem);
}

void AT25SFHoldTillReady() {
     1e6:	b570      	push	{r4, r5, r6, lr}
     1e8:	4c08      	ldr	r4, [pc, #32]	; (20c <AT25SFHoldTillReady+0x28>)
     1ea:	02db      	lsls	r3, r3, #11
     1ec:	6163      	str	r3, [r4, #20]
    pinLow(cs_mem);
    spiDataOut(MEM_SPI,OPCODE_READSTATUS);
     1ee:	2105      	movs	r1, #5
     1f0:	2001      	movs	r0, #1
     1f2:	4b07      	ldr	r3, [pc, #28]	; (210 <AT25SFHoldTillReady+0x2c>)
     1f4:	4798      	blx	r3
    while (spiDataIn(MEM_SPI) & 0x01);
     1f6:	2501      	movs	r5, #1
     1f8:	2001      	movs	r0, #1
     1fa:	4b06      	ldr	r3, [pc, #24]	; (214 <AT25SFHoldTillReady+0x30>)
     1fc:	4798      	blx	r3
     1fe:	4228      	tst	r0, r5
     200:	d1fa      	bne.n	1f8 <AT25SFHoldTillReady+0x14>
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     202:	2380      	movs	r3, #128	; 0x80
     204:	02db      	lsls	r3, r3, #11
     206:	61a3      	str	r3, [r4, #24]
    pinHigh(cs_mem);
}
     208:	bd70      	pop	{r4, r5, r6, pc}
     20a:	46c0      	nop			; (mov r8, r8)
     20c:	41004400 	.word	0x41004400
     210:	00002c25 	.word	0x00002c25
     214:	00002c3d 	.word	0x00002c3d

00000218 <AT25SFChipErase>:
void AT25SFChipErase() {
     218:	b570      	push	{r4, r5, r6, lr}
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     21a:	2580      	movs	r5, #128	; 0x80
     21c:	4c06      	ldr	r4, [pc, #24]	; (238 <AT25SFChipErase+0x20>)
     21e:	02ed      	lsls	r5, r5, #11

    pinLow(cs_mem);
    spiDataOut(MEM_SPI,OPCODE_WRITEENABLE);
     220:	4e06      	ldr	r6, [pc, #24]	; (23c <AT25SFChipErase+0x24>)
     222:	6165      	str	r5, [r4, #20]
     224:	2106      	movs	r1, #6
     226:	2001      	movs	r0, #1
     228:	47b0      	blx	r6
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     22a:	61a5      	str	r5, [r4, #24]
    pinHigh(cs_mem);

    pinLow(cs_mem);
    spiDataOut(MEM_SPI,OPCODE_CHIP_ERASE);
     22c:	2160      	movs	r1, #96	; 0x60
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     22e:	6165      	str	r5, [r4, #20]
     230:	2001      	movs	r0, #1
     232:	47b0      	blx	r6
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     234:	61a5      	str	r5, [r4, #24]
    pinHigh(cs_mem);
}
     236:	bd70      	pop	{r4, r5, r6, pc}
     238:	41004400 	.word	0x41004400
     23c:	00002c25 	.word	0x00002c25

00000240 <AT25SFWriteBytes>:
    pinHigh(cs_mem);

    return _byte;
}

void AT25SFWriteBytes(uint32_t address, u8_t len, uint8_t *bytes) {
     240:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     242:	2780      	movs	r7, #128	; 0x80
     244:	0006      	movs	r6, r0
     246:	4d14      	ldr	r5, [pc, #80]	; (298 <AT25SFWriteBytes+0x58>)

    AT25SFHoldTillReady();
     248:	4b14      	ldr	r3, [pc, #80]	; (29c <AT25SFWriteBytes+0x5c>)
     24a:	02ff      	lsls	r7, r7, #11
    pinHigh(cs_mem);

    return _byte;
}

void AT25SFWriteBytes(uint32_t address, u8_t len, uint8_t *bytes) {
     24c:	9201      	str	r2, [sp, #4]
     24e:	9100      	str	r1, [sp, #0]

    AT25SFHoldTillReady();
     250:	4798      	blx	r3

    pinLow(cs_mem);
    spiDataOut(MEM_SPI,OPCODE_WRITEENABLE);
     252:	4c13      	ldr	r4, [pc, #76]	; (2a0 <AT25SFWriteBytes+0x60>)
     254:	616f      	str	r7, [r5, #20]
     256:	2106      	movs	r1, #6
     258:	2001      	movs	r0, #1
     25a:	47a0      	blx	r4
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     25c:	61af      	str	r7, [r5, #24]
    pinHigh(cs_mem);

    pinLow(cs_mem);
    spiDataOut(MEM_SPI,OPCODE_PROGRAM);
     25e:	2102      	movs	r1, #2
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     260:	616f      	str	r7, [r5, #20]
     262:	2001      	movs	r0, #1
     264:	47a0      	blx	r4
    spiDataOut(MEM_SPI,((address & 0xFF0000) >> 16));
     266:	0c31      	lsrs	r1, r6, #16
     268:	b2c9      	uxtb	r1, r1
     26a:	2001      	movs	r0, #1
     26c:	47a0      	blx	r4
    spiDataOut(MEM_SPI,((address & 0x00FF00) >>  8));
     26e:	0a31      	lsrs	r1, r6, #8
     270:	b2c9      	uxtb	r1, r1
     272:	2001      	movs	r0, #1
     274:	47a0      	blx	r4
    spiDataOut(MEM_SPI,((address & 0x0000FF) >>  0));
     276:	b2f1      	uxtb	r1, r6
     278:	2001      	movs	r0, #1
     27a:	47a0      	blx	r4
     27c:	9e01      	ldr	r6, [sp, #4]
     27e:	9b00      	ldr	r3, [sp, #0]
     280:	18f7      	adds	r7, r6, r3

    for (u8_t pos = 0; pos < len; ++pos) {
     282:	42be      	cmp	r6, r7
     284:	d004      	beq.n	290 <AT25SFWriteBytes+0x50>
        spiDataOut(MEM_SPI, bytes[pos]);
     286:	7831      	ldrb	r1, [r6, #0]
     288:	2001      	movs	r0, #1
     28a:	47a0      	blx	r4
     28c:	3601      	adds	r6, #1
     28e:	e7f8      	b.n	282 <AT25SFWriteBytes+0x42>
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     290:	2380      	movs	r3, #128	; 0x80
     292:	02db      	lsls	r3, r3, #11
     294:	61ab      	str	r3, [r5, #24]
    }

    pinHigh(cs_mem);

}
     296:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
     298:	41004400 	.word	0x41004400
     29c:	000001e5 	.word	0x000001e5
     2a0:	00002c25 	.word	0x00002c25

000002a4 <AT25SEWritePage>:
    delay_ms(70);

}


u8_t AT25SEWritePage(u32_t startingAddress, u8_t *data) {
     2a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     2a6:	2780      	movs	r7, #128	; 0x80
     2a8:	0006      	movs	r6, r0
     2aa:	4d13      	ldr	r5, [pc, #76]	; (2f8 <AT25SEWritePage+0x54>)
     2ac:	02ff      	lsls	r7, r7, #11

    u8_t bytesSent = 0;

    pinLow(cs_mem);
    spiDataOut(MEM_SPI,OPCODE_WRITEENABLE);
     2ae:	4c13      	ldr	r4, [pc, #76]	; (2fc <AT25SEWritePage+0x58>)
    delay_ms(70);

}


u8_t AT25SEWritePage(u32_t startingAddress, u8_t *data) {
     2b0:	9101      	str	r1, [sp, #4]

    u8_t bytesSent = 0;

    pinLow(cs_mem);
    spiDataOut(MEM_SPI,OPCODE_WRITEENABLE);
     2b2:	2001      	movs	r0, #1
     2b4:	616f      	str	r7, [r5, #20]
     2b6:	2106      	movs	r1, #6
     2b8:	47a0      	blx	r4
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     2ba:	61af      	str	r7, [r5, #24]
    pinHigh(cs_mem);

    pinLow(cs_mem);
    spiDataOut(MEM_SPI,OPCODE_PROGRAM);
     2bc:	2102      	movs	r1, #2
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     2be:	616f      	str	r7, [r5, #20]
     2c0:	2001      	movs	r0, #1
     2c2:	47a0      	blx	r4
    spiDataOut(MEM_SPI,((startingAddress & 0xFF0000) >> 16));
     2c4:	0c31      	lsrs	r1, r6, #16
     2c6:	b2c9      	uxtb	r1, r1
     2c8:	2001      	movs	r0, #1
     2ca:	47a0      	blx	r4
    spiDataOut(MEM_SPI,((startingAddress & 0x00FF00) >>  8));
     2cc:	0a31      	lsrs	r1, r6, #8
     2ce:	b2c9      	uxtb	r1, r1
     2d0:	2001      	movs	r0, #1
     2d2:	47a0      	blx	r4
    spiDataOut(MEM_SPI,((startingAddress & 0x0000FF) >>  0));
     2d4:	b2f1      	uxtb	r1, r6
     2d6:	2001      	movs	r0, #1
     2d8:	47a0      	blx	r4
     2da:	9e01      	ldr	r6, [sp, #4]
     2dc:	1c77      	adds	r7, r6, #1
     2de:	37ff      	adds	r7, #255	; 0xff


    for (u16_t pos = 0; pos < 256; ++pos) {
        ++bytesSent;
        spiDataOut(SPI1,data[pos]);
     2e0:	7831      	ldrb	r1, [r6, #0]
     2e2:	2001      	movs	r0, #1
     2e4:	3601      	adds	r6, #1
     2e6:	47a0      	blx	r4
    spiDataOut(MEM_SPI,((startingAddress & 0xFF0000) >> 16));
    spiDataOut(MEM_SPI,((startingAddress & 0x00FF00) >>  8));
    spiDataOut(MEM_SPI,((startingAddress & 0x0000FF) >>  0));


    for (u16_t pos = 0; pos < 256; ++pos) {
     2e8:	42be      	cmp	r6, r7
     2ea:	d1f9      	bne.n	2e0 <AT25SEWritePage+0x3c>
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     2ec:	2380      	movs	r3, #128	; 0x80
     2ee:	02db      	lsls	r3, r3, #11
     2f0:	61ab      	str	r3, [r5, #24]
    }
    pinHigh(cs_mem);


    return bytesSent;
}
     2f2:	2000      	movs	r0, #0
     2f4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
     2f6:	46c0      	nop			; (mov r8, r8)
     2f8:	41004400 	.word	0x41004400
     2fc:	00002c25 	.word	0x00002c25

00000300 <AT25SEreadSample>:
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     300:	2380      	movs	r3, #128	; 0x80

void AT25SEreadSample(u32_t startingAddress, u8_t len, u8_t *data) {
     302:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     304:	0005      	movs	r5, r0
     306:	000f      	movs	r7, r1
     308:	4e11      	ldr	r6, [pc, #68]	; (350 <AT25SEreadSample+0x50>)
     30a:	02db      	lsls	r3, r3, #11
     30c:	9201      	str	r2, [sp, #4]

    pinLow(cs_mem);
    spiDataOut(MEM_SPI,OPCODE_FASTREAD_ARRAY);
     30e:	4c11      	ldr	r4, [pc, #68]	; (354 <AT25SEreadSample+0x54>)
     310:	6173      	str	r3, [r6, #20]
     312:	210b      	movs	r1, #11
     314:	2001      	movs	r0, #1
     316:	47a0      	blx	r4
    spiDataOut(MEM_SPI,((startingAddress & 0xFF0000) >> 16));
     318:	0c29      	lsrs	r1, r5, #16
     31a:	b2c9      	uxtb	r1, r1
     31c:	2001      	movs	r0, #1
     31e:	47a0      	blx	r4
    spiDataOut(MEM_SPI,((startingAddress & 0x00FF00) >>  8));
     320:	0a29      	lsrs	r1, r5, #8
     322:	b2c9      	uxtb	r1, r1
     324:	2001      	movs	r0, #1
     326:	47a0      	blx	r4
    spiDataOut(MEM_SPI,((startingAddress & 0x0000FF) >>  0));
     328:	b2e9      	uxtb	r1, r5
     32a:	2001      	movs	r0, #1
     32c:	47a0      	blx	r4
    spiDataOut(MEM_SPI, 0xFF);
     32e:	21ff      	movs	r1, #255	; 0xff
     330:	2001      	movs	r0, #1
     332:	47a0      	blx	r4
     334:	9c01      	ldr	r4, [sp, #4]
     336:	19e7      	adds	r7, r4, r7


    for (u8_t pos = 0; pos < len; ++pos) {
     338:	42bc      	cmp	r4, r7
     33a:	d005      	beq.n	348 <AT25SEreadSample+0x48>
        data[pos] = spiDataIn(MEM_SPI);
     33c:	2001      	movs	r0, #1
     33e:	4b06      	ldr	r3, [pc, #24]	; (358 <AT25SEreadSample+0x58>)
     340:	4798      	blx	r3
     342:	7020      	strb	r0, [r4, #0]
     344:	3401      	adds	r4, #1
     346:	e7f7      	b.n	338 <AT25SEreadSample+0x38>
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     348:	2380      	movs	r3, #128	; 0x80
     34a:	02db      	lsls	r3, r3, #11
     34c:	61b3      	str	r3, [r6, #24]
    }
    pinHigh(cs_mem);

}
     34e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
     350:	41004400 	.word	0x41004400
     354:	00002c25 	.word	0x00002c25
     358:	00002c3d 	.word	0x00002c3d

0000035c <AT25SEreadPage>:

void AT25SEreadPage(u32_t startingAddress, u8_t *data) {
     35c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     35e:	2380      	movs	r3, #128	; 0x80
     360:	0007      	movs	r7, r0
     362:	000c      	movs	r4, r1
     364:	4e10      	ldr	r6, [pc, #64]	; (3a8 <AT25SEreadPage+0x4c>)
     366:	02db      	lsls	r3, r3, #11

    pinLow(cs_mem);
    spiDataOut(MEM_SPI,OPCODE_FASTREAD_ARRAY);
     368:	4d10      	ldr	r5, [pc, #64]	; (3ac <AT25SEreadPage+0x50>)
     36a:	6173      	str	r3, [r6, #20]
     36c:	210b      	movs	r1, #11
     36e:	2001      	movs	r0, #1
     370:	47a8      	blx	r5
    spiDataOut(MEM_SPI,((startingAddress & 0xFF0000) >> 16));
     372:	0c39      	lsrs	r1, r7, #16
     374:	b2c9      	uxtb	r1, r1
     376:	2001      	movs	r0, #1
     378:	47a8      	blx	r5
    spiDataOut(MEM_SPI,((startingAddress & 0x00FF00) >>  8));
     37a:	0a39      	lsrs	r1, r7, #8
     37c:	b2c9      	uxtb	r1, r1
     37e:	2001      	movs	r0, #1
     380:	47a8      	blx	r5
    spiDataOut(MEM_SPI,((startingAddress & 0x0000FF) >>  0));
     382:	b2f9      	uxtb	r1, r7
     384:	2001      	movs	r0, #1
     386:	47a8      	blx	r5
    spiDataOut(MEM_SPI, 0xFF);
     388:	21ff      	movs	r1, #255	; 0xff
     38a:	2001      	movs	r0, #1
     38c:	47a8      	blx	r5
     38e:	1c65      	adds	r5, r4, #1
     390:	35ff      	adds	r5, #255	; 0xff

    for (u16_t pos = 0; pos < 256; ++pos) {
        data[pos] = spiDataIn(MEM_SPI);
     392:	2001      	movs	r0, #1
     394:	4b06      	ldr	r3, [pc, #24]	; (3b0 <AT25SEreadPage+0x54>)
     396:	4798      	blx	r3
     398:	7020      	strb	r0, [r4, #0]
     39a:	3401      	adds	r4, #1
    spiDataOut(MEM_SPI,((startingAddress & 0xFF0000) >> 16));
    spiDataOut(MEM_SPI,((startingAddress & 0x00FF00) >>  8));
    spiDataOut(MEM_SPI,((startingAddress & 0x0000FF) >>  0));
    spiDataOut(MEM_SPI, 0xFF);

    for (u16_t pos = 0; pos < 256; ++pos) {
     39c:	42ac      	cmp	r4, r5
     39e:	d1f8      	bne.n	392 <AT25SEreadPage+0x36>
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     3a0:	2380      	movs	r3, #128	; 0x80
     3a2:	02db      	lsls	r3, r3, #11
     3a4:	61b3      	str	r3, [r6, #24]
        data[pos] = spiDataIn(MEM_SPI);
    }
    pinHigh(cs_mem);

}
     3a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     3a8:	41004400 	.word	0x41004400
     3ac:	00002c25 	.word	0x00002c25
     3b0:	00002c3d 	.word	0x00002c3d

000003b4 <readMS5803AdcResults>:
#include <MS5803.h>
#include <boardDefines.h>
#include <math.h>

u32_t readMS5803AdcResults() {
     3b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     3b6:	2780      	movs	r7, #128	; 0x80
     3b8:	4e0b      	ldr	r6, [pc, #44]	; (3e8 <readMS5803AdcResults+0x34>)
     3ba:	01ff      	lsls	r7, r7, #7

    pinLow(cs_baro);
    spiDataOut(BARO_SPI, cmdAdcRead_);
     3bc:	2100      	movs	r1, #0
     3be:	4b0b      	ldr	r3, [pc, #44]	; (3ec <readMS5803AdcResults+0x38>)
     3c0:	6177      	str	r7, [r6, #20]
     3c2:	2002      	movs	r0, #2
     3c4:	4798      	blx	r3
    u8_t _byte1 = spiDataIn(SPI2);
     3c6:	4d0a      	ldr	r5, [pc, #40]	; (3f0 <readMS5803AdcResults+0x3c>)
     3c8:	2002      	movs	r0, #2
     3ca:	47a8      	blx	r5
     3cc:	0004      	movs	r4, r0
    u8_t _byte2 = spiDataIn(SPI2);
     3ce:	2002      	movs	r0, #2
     3d0:	47a8      	blx	r5
     3d2:	9001      	str	r0, [sp, #4]
    u8_t _byte3 = spiDataIn(SPI2);
     3d4:	2002      	movs	r0, #2
     3d6:	47a8      	blx	r5
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     3d8:	61b7      	str	r7, [r6, #24]
    pinHigh(cs_baro);

    u32_t _receive = (_byte1 << 16) | (_byte2 << 8) | (_byte3);
    return _receive;
     3da:	9b01      	ldr	r3, [sp, #4]
     3dc:	0424      	lsls	r4, r4, #16
     3de:	021b      	lsls	r3, r3, #8
     3e0:	431c      	orrs	r4, r3
     3e2:	4320      	orrs	r0, r4
}
     3e4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
     3e6:	46c0      	nop			; (mov r8, r8)
     3e8:	41004400 	.word	0x41004400
     3ec:	00002c25 	.word	0x00002c25
     3f0:	00002c3d 	.word	0x00002c3d

000003f4 <ConvertPressureTemperature>:

void ConvertPressureTemperature(u32_t pressureRaw, u32_t tempRaw, u32_t* temperatureCelcus, int32_t* pressureMbar ) {
     3f4:	b5f0      	push	{r4, r5, r6, r7, lr}
     3f6:	b087      	sub	sp, #28
     3f8:	9304      	str	r3, [sp, #16]
    const u16_t C1 = coefficients_[1];
     3fa:	4b24      	ldr	r3, [pc, #144]	; (48c <ConvertPressureTemperature+0x98>)

    u32_t _receive = (_byte1 << 16) | (_byte2 << 8) | (_byte3);
    return _receive;
}

void ConvertPressureTemperature(u32_t pressureRaw, u32_t tempRaw, u32_t* temperatureCelcus, int32_t* pressureMbar ) {
     3fc:	9003      	str	r0, [sp, #12]
     3fe:	0014      	movs	r4, r2
    const u16_t C1 = coefficients_[1];
     400:	885a      	ldrh	r2, [r3, #2]
    const u16_t C5 = coefficients_[5];
    const u16_t C6 = coefficients_[6];

    // calculate 1st order pressure and temperature (MS5607 1st order algorithm)
    const  int32_t dT = (tempRaw) - ((int32_t)C5 << 8);
    *temperatureCelcus  = 2000 + (((int64_t)dT * C6) >> 23) ;
     402:	4f23      	ldr	r7, [pc, #140]	; (490 <ConvertPressureTemperature+0x9c>)
    u32_t _receive = (_byte1 << 16) | (_byte2 << 8) | (_byte3);
    return _receive;
}

void ConvertPressureTemperature(u32_t pressureRaw, u32_t tempRaw, u32_t* temperatureCelcus, int32_t* pressureMbar ) {
    const u16_t C1 = coefficients_[1];
     404:	9201      	str	r2, [sp, #4]
    const u16_t C2 = coefficients_[2];
     406:	889a      	ldrh	r2, [r3, #4]
     408:	9200      	str	r2, [sp, #0]
    const u16_t C3 = coefficients_[3];
    const u16_t C4 = coefficients_[4];
     40a:	891a      	ldrh	r2, [r3, #8]
}

void ConvertPressureTemperature(u32_t pressureRaw, u32_t tempRaw, u32_t* temperatureCelcus, int32_t* pressureMbar ) {
    const u16_t C1 = coefficients_[1];
    const u16_t C2 = coefficients_[2];
    const u16_t C3 = coefficients_[3];
     40c:	88dd      	ldrh	r5, [r3, #6]
    const u16_t C4 = coefficients_[4];
     40e:	9202      	str	r2, [sp, #8]
    const u16_t C5 = coefficients_[5];
    const u16_t C6 = coefficients_[6];

    // calculate 1st order pressure and temperature (MS5607 1st order algorithm)
    const  int32_t dT = (tempRaw) - ((int32_t)C5 << 8);
    *temperatureCelcus  = 2000 + (((int64_t)dT * C6) >> 23) ;
     410:	895e      	ldrh	r6, [r3, #10]
     412:	0236      	lsls	r6, r6, #8
     414:	1b8e      	subs	r6, r1, r6
     416:	17f2      	asrs	r2, r6, #31
     418:	9205      	str	r2, [sp, #20]
     41a:	8998      	ldrh	r0, [r3, #12]
     41c:	0032      	movs	r2, r6
     41e:	17f3      	asrs	r3, r6, #31
     420:	2100      	movs	r1, #0
     422:	47b8      	blx	r7
     424:	23fa      	movs	r3, #250	; 0xfa
     426:	0249      	lsls	r1, r1, #9
     428:	0dc0      	lsrs	r0, r0, #23
     42a:	4308      	orrs	r0, r1
     42c:	00db      	lsls	r3, r3, #3
     42e:	18c0      	adds	r0, r0, r3
     430:	6020      	str	r0, [r4, #0]

    const  int64_t OFF   = ((int64_t)C2 << 17) + ((C4 * (int64_t)dT) >> 6);
    const  int64_t SENS  =  ((int64_t)C1 << 16) + ((C3 * (int64_t)dT) >> 7);
    *pressureMbar = ((((pressureRaw * SENS) >> 21) - OFF) >> 15);
     432:	0032      	movs	r2, r6
     434:	17f3      	asrs	r3, r6, #31
     436:	0028      	movs	r0, r5
     438:	2100      	movs	r1, #0
     43a:	47b8      	blx	r7
     43c:	064c      	lsls	r4, r1, #25
     43e:	11cb      	asrs	r3, r1, #7
     440:	2100      	movs	r1, #0
     442:	09c2      	lsrs	r2, r0, #7
     444:	4322      	orrs	r2, r4
     446:	9c01      	ldr	r4, [sp, #4]
     448:	0420      	lsls	r0, r4, #16
     44a:	1880      	adds	r0, r0, r2
     44c:	4159      	adcs	r1, r3
     44e:	9a03      	ldr	r2, [sp, #12]
     450:	2300      	movs	r3, #0
     452:	47b8      	blx	r7
     454:	02cb      	lsls	r3, r1, #11
     456:	0d44      	lsrs	r4, r0, #21
     458:	0032      	movs	r2, r6
     45a:	431c      	orrs	r4, r3
     45c:	154d      	asrs	r5, r1, #21
     45e:	9b05      	ldr	r3, [sp, #20]
     460:	9802      	ldr	r0, [sp, #8]
     462:	2100      	movs	r1, #0
     464:	47b8      	blx	r7
     466:	068b      	lsls	r3, r1, #26
     468:	118f      	asrs	r7, r1, #6
     46a:	9900      	ldr	r1, [sp, #0]
     46c:	0986      	lsrs	r6, r0, #6
     46e:	431e      	orrs	r6, r3
     470:	044a      	lsls	r2, r1, #17
     472:	0bcb      	lsrs	r3, r1, #15
     474:	1992      	adds	r2, r2, r6
     476:	417b      	adcs	r3, r7
     478:	1aa4      	subs	r4, r4, r2
     47a:	419d      	sbcs	r5, r3
     47c:	046b      	lsls	r3, r5, #17
     47e:	0be4      	lsrs	r4, r4, #15
     480:	431c      	orrs	r4, r3
     482:	9b04      	ldr	r3, [sp, #16]
     484:	601c      	str	r4, [r3, #0]

}
     486:	b007      	add	sp, #28
     488:	bdf0      	pop	{r4, r5, r6, r7, pc}
     48a:	46c0      	nop			; (mov r8, r8)
     48c:	2000026e 	.word	0x2000026e
     490:	00004319 	.word	0x00004319

00000494 <paToFeetNOAA>:

double paToFeetNOAA(int32_t pressureMbar) {
     494:	b510      	push	{r4, lr}

    double lower =(((double)(pressureMbar)/100)/1013.25);
    double exponent = 0.190284;

    double altFeet = (1-pow(lower,exponent))*145366.45;
     496:	4b0c      	ldr	r3, [pc, #48]	; (4c8 <paToFeetNOAA+0x34>)
     498:	4798      	blx	r3
     49a:	4c0c      	ldr	r4, [pc, #48]	; (4cc <paToFeetNOAA+0x38>)
     49c:	2200      	movs	r2, #0
     49e:	4b0c      	ldr	r3, [pc, #48]	; (4d0 <paToFeetNOAA+0x3c>)
     4a0:	47a0      	blx	r4
     4a2:	2200      	movs	r2, #0
     4a4:	4b0b      	ldr	r3, [pc, #44]	; (4d4 <paToFeetNOAA+0x40>)
     4a6:	47a0      	blx	r4
     4a8:	4a0b      	ldr	r2, [pc, #44]	; (4d8 <paToFeetNOAA+0x44>)
     4aa:	4b0c      	ldr	r3, [pc, #48]	; (4dc <paToFeetNOAA+0x48>)
     4ac:	4c0c      	ldr	r4, [pc, #48]	; (4e0 <paToFeetNOAA+0x4c>)
     4ae:	47a0      	blx	r4
    return altFeet;
     4b0:	4c0c      	ldr	r4, [pc, #48]	; (4e4 <paToFeetNOAA+0x50>)
double paToFeetNOAA(int32_t pressureMbar) {

    double lower =(((double)(pressureMbar)/100)/1013.25);
    double exponent = 0.190284;

    double altFeet = (1-pow(lower,exponent))*145366.45;
     4b2:	0002      	movs	r2, r0
     4b4:	000b      	movs	r3, r1
    return altFeet;
     4b6:	2000      	movs	r0, #0
     4b8:	490b      	ldr	r1, [pc, #44]	; (4e8 <paToFeetNOAA+0x54>)
     4ba:	47a0      	blx	r4
     4bc:	4a0b      	ldr	r2, [pc, #44]	; (4ec <paToFeetNOAA+0x58>)
     4be:	4b0c      	ldr	r3, [pc, #48]	; (4f0 <paToFeetNOAA+0x5c>)
     4c0:	4c0c      	ldr	r4, [pc, #48]	; (4f4 <paToFeetNOAA+0x60>)
     4c2:	47a0      	blx	r4

}
     4c4:	bd10      	pop	{r4, pc}
     4c6:	46c0      	nop			; (mov r8, r8)
     4c8:	00006101 	.word	0x00006101
     4cc:	00004c71 	.word	0x00004c71
     4d0:	40590000 	.word	0x40590000
     4d4:	408faa00 	.word	0x408faa00
     4d8:	e279dd3c 	.word	0xe279dd3c
     4dc:	3fc85b39 	.word	0x3fc85b39
     4e0:	00002f51 	.word	0x00002f51
     4e4:	000059ad 	.word	0x000059ad
     4e8:	3ff00000 	.word	0x3ff00000
     4ec:	9999999a 	.word	0x9999999a
     4f0:	4101beb3 	.word	0x4101beb3
     4f4:	000054b9 	.word	0x000054b9

000004f8 <readMS5803Coefficients>:



void readMS5803Coefficients() {
     4f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     4fa:	24a2      	movs	r4, #162	; 0xa2
     4fc:	4d11      	ldr	r5, [pc, #68]	; (544 <readMS5803Coefficients+0x4c>)

    for (u8_t coeff_num = 1; coeff_num < 7 ; ++coeff_num ) {
        delay_us(600);
     4fe:	2096      	movs	r0, #150	; 0x96
     500:	4e11      	ldr	r6, [pc, #68]	; (548 <readMS5803Coefficients+0x50>)
     502:	0080      	lsls	r0, r0, #2
     504:	47b0      	blx	r6
        u8_t _cmd = MS5803_CMD_PROM_READ + ((coeff_num)*2);
        delay_us(600);
     506:	2096      	movs	r0, #150	; 0x96
     508:	0080      	lsls	r0, r0, #2
     50a:	47b0      	blx	r6
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     50c:	2380      	movs	r3, #128	; 0x80
     50e:	4e0f      	ldr	r6, [pc, #60]	; (54c <readMS5803Coefficients+0x54>)
     510:	01db      	lsls	r3, r3, #7
        pinLow(cs_baro);
        spiDataOut(SPI2, _cmd);
     512:	0021      	movs	r1, r4
     514:	6173      	str	r3, [r6, #20]
     516:	2002      	movs	r0, #2
     518:	4b0d      	ldr	r3, [pc, #52]	; (550 <readMS5803Coefficients+0x58>)
     51a:	4798      	blx	r3
        u8_t _byte1 = spiDataIn(SPI2);
     51c:	4f0d      	ldr	r7, [pc, #52]	; (554 <readMS5803Coefficients+0x5c>)
     51e:	2002      	movs	r0, #2
     520:	47b8      	blx	r7
     522:	9001      	str	r0, [sp, #4]
        u8_t _byte2 = spiDataIn(SPI2);
     524:	2002      	movs	r0, #2
     526:	47b8      	blx	r7
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     528:	2380      	movs	r3, #128	; 0x80
     52a:	01db      	lsls	r3, r3, #7
     52c:	61b3      	str	r3, [r6, #24]
        pinHigh(cs_baro);
        coefficients_[coeff_num] = (_byte1 << 8) | _byte2;
     52e:	9b01      	ldr	r3, [sp, #4]
     530:	3402      	adds	r4, #2
     532:	021b      	lsls	r3, r3, #8
     534:	4318      	orrs	r0, r3
     536:	b2e4      	uxtb	r4, r4
     538:	8028      	strh	r0, [r5, #0]
     53a:	3502      	adds	r5, #2



void readMS5803Coefficients() {

    for (u8_t coeff_num = 1; coeff_num < 7 ; ++coeff_num ) {
     53c:	2cae      	cmp	r4, #174	; 0xae
     53e:	d1de      	bne.n	4fe <readMS5803Coefficients+0x6>
        u8_t _byte2 = spiDataIn(SPI2);
        pinHigh(cs_baro);
        coefficients_[coeff_num] = (_byte1 << 8) | _byte2;
    }

}
     540:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
     542:	46c0      	nop			; (mov r8, r8)
     544:	20000270 	.word	0x20000270
     548:	000010ad 	.word	0x000010ad
     54c:	41004400 	.word	0x41004400
     550:	00002c25 	.word	0x00002c25
     554:	00002c3d 	.word	0x00002c3d

00000558 <initMS5803Barometer>:

void initMS5803Barometer() {
     558:	b570      	push	{r4, r5, r6, lr}
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     55a:	2580      	movs	r5, #128	; 0x80
     55c:	4c06      	ldr	r4, [pc, #24]	; (578 <initMS5803Barometer+0x20>)
     55e:	01ed      	lsls	r5, r5, #7


    pinLow(cs_baro);
    spiDataOut(BARO_SPI, MS5803_CMD_RES);
     560:	211e      	movs	r1, #30
     562:	6165      	str	r5, [r4, #20]
     564:	2002      	movs	r0, #2
     566:	4b05      	ldr	r3, [pc, #20]	; (57c <initMS5803Barometer+0x24>)
     568:	4798      	blx	r3
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     56a:	61a5      	str	r5, [r4, #24]

    pinHigh(cs_baro);
    delay_ms(200);
     56c:	20c8      	movs	r0, #200	; 0xc8
     56e:	4b04      	ldr	r3, [pc, #16]	; (580 <initMS5803Barometer+0x28>)
     570:	4798      	blx	r3
    readMS5803Coefficients();
     572:	4b04      	ldr	r3, [pc, #16]	; (584 <initMS5803Barometer+0x2c>)
     574:	4798      	blx	r3

}
     576:	bd70      	pop	{r4, r5, r6, pc}
     578:	41004400 	.word	0x41004400
     57c:	00002c25 	.word	0x00002c25
     580:	000010e1 	.word	0x000010e1
     584:	000004f9 	.word	0x000004f9

00000588 <MS5803_CRC4>:
                n_rem = (n_rem << 1);
            }
        }
    }
    n_rem = (0x000F & (n_rem >> 12));
    coefficients_[7] = crc_read;
     588:	4b02      	ldr	r3, [pc, #8]	; (594 <MS5803_CRC4+0xc>)
    return (n_rem & 0x00);
}
     58a:	2000      	movs	r0, #0
                n_rem = (n_rem << 1);
            }
        }
    }
    n_rem = (0x000F & (n_rem >> 12));
    coefficients_[7] = crc_read;
     58c:	7b9a      	ldrb	r2, [r3, #14]
     58e:	81da      	strh	r2, [r3, #14]
    return (n_rem & 0x00);
}
     590:	4770      	bx	lr
     592:	46c0      	nop			; (mov r8, r8)
     594:	2000026e 	.word	0x2000026e

00000598 <init>:


void init() {

    /* Set 1 Flash Wait State for 48MHz, cf tables 20.9 and 35.27 in SAMD21 Datasheet */
    NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val;
     598:	211e      	movs	r1, #30
#include <util.h>
#include <boardDefines.h>
#include "math.h"


void init() {
     59a:	b5f0      	push	{r4, r5, r6, r7, lr}

    /* Set 1 Flash Wait State for 48MHz, cf tables 20.9 and 35.27 in SAMD21 Datasheet */
    NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val;
     59c:	4afc      	ldr	r2, [pc, #1008]	; (990 <init+0x3f8>)
#include <util.h>
#include <boardDefines.h>
#include "math.h"


void init() {
     59e:	b085      	sub	sp, #20

    /* Set 1 Flash Wait State for 48MHz, cf tables 20.9 and 35.27 in SAMD21 Datasheet */
    NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val;
     5a0:	6853      	ldr	r3, [r2, #4]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     5a2:	2401      	movs	r4, #1
     5a4:	438b      	bics	r3, r1
     5a6:	391c      	subs	r1, #28
     5a8:	430b      	orrs	r3, r1
     5aa:	6053      	str	r3, [r2, #4]

    /* Turn on the digital interface clock */
    PM->APBAMASK.reg |= PM_APBAMASK_GCLK;
     5ac:	4af9      	ldr	r2, [pc, #996]	; (994 <init+0x3fc>)
     5ae:	3106      	adds	r1, #6
     5b0:	6993      	ldr	r3, [r2, #24]

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     5b2:	260f      	movs	r6, #15
     5b4:	430b      	orrs	r3, r1
     5b6:	6193      	str	r3, [r2, #24]

    SystemInit();
     5b8:	4bf7      	ldr	r3, [pc, #988]	; (998 <init+0x400>)
     5ba:	4798      	blx	r3
    GclkInit(0);
     5bc:	2000      	movs	r0, #0
     5be:	4bf7      	ldr	r3, [pc, #988]	; (99c <init+0x404>)
     5c0:	4798      	blx	r3
    RtcInit();
     5c2:	4bf7      	ldr	r3, [pc, #988]	; (9a0 <init+0x408>)
     5c4:	4798      	blx	r3
    delayInit();
     5c6:	4bf7      	ldr	r3, [pc, #988]	; (9a4 <init+0x40c>)
     5c8:	4798      	blx	r3
    adcInit();
     5ca:	4bf7      	ldr	r3, [pc, #988]	; (9a8 <init+0x410>)
     5cc:	4798      	blx	r3
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     5ce:	4bf7      	ldr	r3, [pc, #988]	; (9ac <init+0x414>)
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     5d0:	2002      	movs	r0, #2
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     5d2:	0019      	movs	r1, r3
     5d4:	3154      	adds	r1, #84	; 0x54
     5d6:	780a      	ldrb	r2, [r1, #0]

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     5d8:	001d      	movs	r5, r3
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     5da:	43a2      	bics	r2, r4
     5dc:	700a      	strb	r2, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     5de:	2280      	movs	r2, #128	; 0x80
     5e0:	0352      	lsls	r2, r2, #13
     5e2:	609a      	str	r2, [r3, #8]

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     5e4:	3533      	adds	r5, #51	; 0x33
     5e6:	782a      	ldrb	r2, [r5, #0]
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     5e8:	390e      	subs	r1, #14

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     5ea:	43b2      	bics	r2, r6
     5ec:	4322      	orrs	r2, r4
     5ee:	702a      	strb	r2, [r5, #0]
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     5f0:	780a      	ldrb	r2, [r1, #0]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     5f2:	001f      	movs	r7, r3
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     5f4:	4322      	orrs	r2, r4
     5f6:	700a      	strb	r2, [r1, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     5f8:	001a      	movs	r2, r3
     5fa:	3247      	adds	r2, #71	; 0x47
     5fc:	7811      	ldrb	r1, [r2, #0]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     5fe:	3794      	adds	r7, #148	; 0x94
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     600:	43a1      	bics	r1, r4
     602:	7011      	strb	r1, [r2, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     604:	7811      	ldrb	r1, [r2, #0]
     606:	4301      	orrs	r1, r0
     608:	7011      	strb	r1, [r2, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     60a:	2180      	movs	r1, #128	; 0x80
     60c:	6059      	str	r1, [r3, #4]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     60e:	7829      	ldrb	r1, [r5, #0]
     610:	300e      	adds	r0, #14
     612:	4031      	ands	r1, r6
     614:	4301      	orrs	r1, r0
     616:	7029      	strb	r1, [r5, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     618:	2502      	movs	r5, #2
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     61a:	7811      	ldrb	r1, [r2, #0]
     61c:	4321      	orrs	r1, r4
     61e:	7011      	strb	r1, [r2, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     620:	327c      	adds	r2, #124	; 0x7c
     622:	7811      	ldrb	r1, [r2, #0]
     624:	43a1      	bics	r1, r4
     626:	7011      	strb	r1, [r2, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     628:	7811      	ldrb	r1, [r2, #0]
     62a:	4329      	orrs	r1, r5
     62c:	7011      	strb	r1, [r2, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     62e:	2108      	movs	r1, #8
     630:	468c      	mov	ip, r1
     632:	449c      	add	ip, r3
     634:	4661      	mov	r1, ip
     636:	3506      	adds	r5, #6
     638:	67cd      	str	r5, [r1, #124]	; 0x7c
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     63a:	31a9      	adds	r1, #169	; 0xa9
     63c:	780d      	ldrb	r5, [r1, #0]
     63e:	4035      	ands	r5, r6
     640:	4305      	orrs	r5, r0
     642:	700d      	strb	r5, [r1, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     644:	7815      	ldrb	r5, [r2, #0]
     646:	4325      	orrs	r5, r4
     648:	7015      	strb	r5, [r2, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     64a:	001d      	movs	r5, r3
     64c:	35d7      	adds	r5, #215	; 0xd7
     64e:	782a      	ldrb	r2, [r5, #0]
     650:	43a2      	bics	r2, r4
     652:	702a      	strb	r2, [r5, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     654:	2580      	movs	r5, #128	; 0x80
     656:	4ad6      	ldr	r2, [pc, #856]	; (9b0 <init+0x418>)
     658:	042d      	lsls	r5, r5, #16
     65a:	6015      	str	r5, [r2, #0]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     65c:	002a      	movs	r2, r5
     65e:	9703      	str	r7, [sp, #12]
     660:	603a      	str	r2, [r7, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     662:	001a      	movs	r2, r3
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     664:	2702      	movs	r7, #2
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     666:	32c2      	adds	r2, #194	; 0xc2
     668:	7815      	ldrb	r5, [r2, #0]
     66a:	43a5      	bics	r5, r4
     66c:	7015      	strb	r5, [r2, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     66e:	7815      	ldrb	r5, [r2, #0]
     670:	433d      	orrs	r5, r7
     672:	7015      	strb	r5, [r2, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     674:	4665      	mov	r5, ip
     676:	19ff      	adds	r7, r7, r7
     678:	67ef      	str	r7, [r5, #124]	; 0x7c

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     67a:	780d      	ldrb	r5, [r1, #0]
     67c:	43b5      	bics	r5, r6
     67e:	4325      	orrs	r5, r4
     680:	700d      	strb	r5, [r1, #0]
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     682:	7811      	ldrb	r1, [r2, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     684:	2502      	movs	r5, #2
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     686:	4321      	orrs	r1, r4
     688:	7011      	strb	r1, [r2, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     68a:	0019      	movs	r1, r3
     68c:	31d6      	adds	r1, #214	; 0xd6
     68e:	780a      	ldrb	r2, [r1, #0]
     690:	43a2      	bics	r2, r4
     692:	700a      	strb	r2, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     694:	2180      	movs	r1, #128	; 0x80
     696:	4ac6      	ldr	r2, [pc, #792]	; (9b0 <init+0x418>)
     698:	03c9      	lsls	r1, r1, #15
     69a:	6011      	str	r1, [r2, #0]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     69c:	000a      	movs	r2, r1
     69e:	9903      	ldr	r1, [sp, #12]
     6a0:	600a      	str	r2, [r1, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     6a2:	001a      	movs	r2, r3
     6a4:	3243      	adds	r2, #67	; 0x43
     6a6:	7811      	ldrb	r1, [r2, #0]
     6a8:	43a1      	bics	r1, r4
     6aa:	7011      	strb	r1, [r2, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     6ac:	7811      	ldrb	r1, [r2, #0]
     6ae:	4329      	orrs	r1, r5
     6b0:	7011      	strb	r1, [r2, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     6b2:	001d      	movs	r5, r3


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     6b4:	2108      	movs	r1, #8
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     6b6:	3531      	adds	r5, #49	; 0x31


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     6b8:	6059      	str	r1, [r3, #4]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     6ba:	7829      	ldrb	r1, [r5, #0]
     6bc:	4031      	ands	r1, r6
     6be:	4308      	orrs	r0, r1
     6c0:	7028      	strb	r0, [r5, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     6c2:	7811      	ldrb	r1, [r2, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     6c4:	2002      	movs	r0, #2
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     6c6:	4321      	orrs	r1, r4
     6c8:	7011      	strb	r1, [r2, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     6ca:	0019      	movs	r1, r3
     6cc:	3159      	adds	r1, #89	; 0x59
     6ce:	780a      	ldrb	r2, [r1, #0]
     6d0:	43a2      	bics	r2, r4
     6d2:	700a      	strb	r2, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     6d4:	2280      	movs	r2, #128	; 0x80
     6d6:	0492      	lsls	r2, r2, #18
     6d8:	609a      	str	r2, [r3, #8]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     6da:	615a      	str	r2, [r3, #20]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     6dc:	001a      	movs	r2, r3
     6de:	3242      	adds	r2, #66	; 0x42
     6e0:	7811      	ldrb	r1, [r2, #0]
     6e2:	43a1      	bics	r1, r4
     6e4:	7011      	strb	r1, [r2, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     6e6:	7811      	ldrb	r1, [r2, #0]
     6e8:	4301      	orrs	r1, r0
     6ea:	7011      	strb	r1, [r2, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     6ec:	605f      	str	r7, [r3, #4]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     6ee:	7829      	ldrb	r1, [r5, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     6f0:	0018      	movs	r0, r3

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     6f2:	43b1      	bics	r1, r6
     6f4:	4321      	orrs	r1, r4
     6f6:	7029      	strb	r1, [r5, #0]
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     6f8:	7811      	ldrb	r1, [r2, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     6fa:	3048      	adds	r0, #72	; 0x48
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     6fc:	4321      	orrs	r1, r4
     6fe:	7011      	strb	r1, [r2, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     700:	0019      	movs	r1, r3
     702:	3158      	adds	r1, #88	; 0x58
     704:	780a      	ldrb	r2, [r1, #0]
     706:	001f      	movs	r7, r3
     708:	43a2      	bics	r2, r4
     70a:	700a      	strb	r2, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     70c:	2280      	movs	r2, #128	; 0x80
    pinIn(senseDPin);
    pinMux(senseDPin);
    pinOut(fireDPin);
    pinLow(fireDPin);

    charges.igniterAHot = false;
     70e:	2100      	movs	r1, #0
     710:	0452      	lsls	r2, r2, #17
     712:	609a      	str	r2, [r3, #8]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     714:	615a      	str	r2, [r3, #20]
     716:	4aa7      	ldr	r2, [pc, #668]	; (9b4 <init+0x41c>)
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     718:	3749      	adds	r7, #73	; 0x49
     71a:	7011      	strb	r1, [r2, #0]
    charges.igniterBHot = false;
     71c:	2100      	movs	r1, #0
     71e:	7211      	strb	r1, [r2, #8]
    charges.igniterCHot = false;
     720:	2100      	movs	r1, #0
     722:	7411      	strb	r1, [r2, #16]
    charges.igniterDHot = false;
     724:	2100      	movs	r1, #0
     726:	7611      	strb	r1, [r2, #24]
     728:	7802      	ldrb	r2, [r0, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     72a:	2502      	movs	r5, #2
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     72c:	43a2      	bics	r2, r4
     72e:	7002      	strb	r2, [r0, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     730:	2280      	movs	r2, #128	; 0x80
     732:	0052      	lsls	r2, r2, #1
     734:	609a      	str	r2, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     736:	783a      	ldrb	r2, [r7, #0]
     738:	43a2      	bics	r2, r4
     73a:	703a      	strb	r2, [r7, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     73c:	2280      	movs	r2, #128	; 0x80
     73e:	0092      	lsls	r2, r2, #2
     740:	609a      	str	r2, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     742:	001a      	movs	r2, r3
     744:	324b      	adds	r2, #75	; 0x4b
     746:	7811      	ldrb	r1, [r2, #0]
     748:	43a1      	bics	r1, r4
     74a:	7011      	strb	r1, [r2, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     74c:	7811      	ldrb	r1, [r2, #0]
     74e:	4329      	orrs	r1, r5
     750:	7011      	strb	r1, [r2, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     752:	2180      	movs	r1, #128	; 0x80
     754:	0109      	lsls	r1, r1, #4
     756:	6059      	str	r1, [r3, #4]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     758:	2135      	movs	r1, #53	; 0x35
     75a:	468c      	mov	ip, r1
     75c:	449c      	add	ip, r3
     75e:	4661      	mov	r1, ip
     760:	7809      	ldrb	r1, [r1, #0]
     762:	351e      	adds	r5, #30
     764:	4031      	ands	r1, r6
     766:	4329      	orrs	r1, r5
     768:	4665      	mov	r5, ip
     76a:	7029      	strb	r1, [r5, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     76c:	7811      	ldrb	r1, [r2, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     76e:	2520      	movs	r5, #32
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     770:	4321      	orrs	r1, r4
     772:	7011      	strb	r1, [r2, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     774:	0019      	movs	r1, r3
     776:	3134      	adds	r1, #52	; 0x34
     778:	780a      	ldrb	r2, [r1, #0]
     77a:	4032      	ands	r2, r6
     77c:	432a      	orrs	r2, r5
     77e:	700a      	strb	r2, [r1, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     780:	783a      	ldrb	r2, [r7, #0]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     782:	3d1e      	subs	r5, #30
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     784:	4322      	orrs	r2, r4
     786:	703a      	strb	r2, [r7, #0]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     788:	780a      	ldrb	r2, [r1, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     78a:	3706      	adds	r7, #6

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     78c:	43b2      	bics	r2, r6
     78e:	432a      	orrs	r2, r5
     790:	700a      	strb	r2, [r1, #0]
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     792:	7802      	ldrb	r2, [r0, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     794:	3196      	adds	r1, #150	; 0x96
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     796:	4322      	orrs	r2, r4
     798:	7002      	strb	r2, [r0, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     79a:	780a      	ldrb	r2, [r1, #0]
     79c:	43a2      	bics	r2, r4
     79e:	700a      	strb	r2, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     7a0:	2280      	movs	r2, #128	; 0x80
     7a2:	4983      	ldr	r1, [pc, #524]	; (9b0 <init+0x418>)
     7a4:	00d2      	lsls	r2, r2, #3
     7a6:	600a      	str	r2, [r1, #0]
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     7a8:	0019      	movs	r1, r3
     7aa:	3198      	adds	r1, #152	; 0x98
     7ac:	600a      	str	r2, [r1, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     7ae:	7881      	ldrb	r1, [r0, #2]
     7b0:	43a1      	bics	r1, r4
     7b2:	7081      	strb	r1, [r0, #2]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     7b4:	609a      	str	r2, [r3, #8]
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     7b6:	619a      	str	r2, [r3, #24]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     7b8:	7a02      	ldrb	r2, [r0, #8]
     7ba:	43a2      	bics	r2, r4
     7bc:	7202      	strb	r2, [r0, #8]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     7be:	2280      	movs	r2, #128	; 0x80
     7c0:	0252      	lsls	r2, r2, #9
     7c2:	609a      	str	r2, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     7c4:	78ba      	ldrb	r2, [r7, #2]
     7c6:	43a2      	bics	r2, r4
     7c8:	70ba      	strb	r2, [r7, #2]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     7ca:	2280      	movs	r2, #128	; 0x80
     7cc:	0292      	lsls	r2, r2, #10
     7ce:	609a      	str	r2, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     7d0:	001a      	movs	r2, r3
     7d2:	3253      	adds	r2, #83	; 0x53
     7d4:	7811      	ldrb	r1, [r2, #0]
     7d6:	43a1      	bics	r1, r4
     7d8:	7011      	strb	r1, [r2, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     7da:	7811      	ldrb	r1, [r2, #0]
     7dc:	4329      	orrs	r1, r5
     7de:	7011      	strb	r1, [r2, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     7e0:	2180      	movs	r1, #128	; 0x80
     7e2:	0309      	lsls	r1, r1, #12
     7e4:	6059      	str	r1, [r3, #4]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     7e6:	2139      	movs	r1, #57	; 0x39
     7e8:	468c      	mov	ip, r1
     7ea:	449c      	add	ip, r3
     7ec:	4661      	mov	r1, ip
     7ee:	7809      	ldrb	r1, [r1, #0]
     7f0:	351e      	adds	r5, #30
     7f2:	4031      	ands	r1, r6
     7f4:	4329      	orrs	r1, r5
     7f6:	4665      	mov	r5, ip
     7f8:	7029      	strb	r1, [r5, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     7fa:	7811      	ldrb	r1, [r2, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     7fc:	2520      	movs	r5, #32
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     7fe:	4321      	orrs	r1, r4
     800:	7011      	strb	r1, [r2, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     802:	0019      	movs	r1, r3
     804:	3138      	adds	r1, #56	; 0x38
     806:	780a      	ldrb	r2, [r1, #0]
     808:	4032      	ands	r2, r6
     80a:	432a      	orrs	r2, r5
     80c:	700a      	strb	r2, [r1, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     80e:	78ba      	ldrb	r2, [r7, #2]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     810:	3d1e      	subs	r5, #30
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     812:	4322      	orrs	r2, r4
     814:	70ba      	strb	r2, [r7, #2]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     816:	780a      	ldrb	r2, [r1, #0]
     818:	43b2      	bics	r2, r6
     81a:	432a      	orrs	r2, r5
     81c:	700a      	strb	r2, [r1, #0]
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     81e:	7a02      	ldrb	r2, [r0, #8]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     820:	3114      	adds	r1, #20
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     822:	4322      	orrs	r2, r4
     824:	7202      	strb	r2, [r0, #8]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     826:	798a      	ldrb	r2, [r1, #6]
     828:	43a2      	bics	r2, r4
     82a:	718a      	strb	r2, [r1, #6]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     82c:	2280      	movs	r2, #128	; 0x80
     82e:	02d2      	lsls	r2, r2, #11
     830:	609a      	str	r2, [r3, #8]
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     832:	619a      	str	r2, [r3, #24]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     834:	9103      	str	r1, [sp, #12]
     836:	780a      	ldrb	r2, [r1, #0]
     838:	43a2      	bics	r2, r4
     83a:	700a      	strb	r2, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     83c:	2280      	movs	r2, #128	; 0x80
     83e:	0152      	lsls	r2, r2, #5
     840:	609a      	str	r2, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     842:	783a      	ldrb	r2, [r7, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     844:	2120      	movs	r1, #32
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     846:	43a2      	bics	r2, r4
     848:	703a      	strb	r2, [r7, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     84a:	2280      	movs	r2, #128	; 0x80
     84c:	0212      	lsls	r2, r2, #8
     84e:	609a      	str	r2, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     850:	001a      	movs	r2, r3
     852:	324d      	adds	r2, #77	; 0x4d
     854:	7810      	ldrb	r0, [r2, #0]
     856:	43a0      	bics	r0, r4
     858:	7010      	strb	r0, [r2, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     85a:	7810      	ldrb	r0, [r2, #0]
     85c:	4328      	orrs	r0, r5
     85e:	7010      	strb	r0, [r2, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     860:	2080      	movs	r0, #128	; 0x80
     862:	0180      	lsls	r0, r0, #6
     864:	6058      	str	r0, [r3, #4]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     866:	0018      	movs	r0, r3
     868:	3036      	adds	r0, #54	; 0x36
     86a:	7805      	ldrb	r5, [r0, #0]
     86c:	4035      	ands	r5, r6
     86e:	430d      	orrs	r5, r1
     870:	7005      	strb	r5, [r0, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     872:	7811      	ldrb	r1, [r2, #0]
     874:	000d      	movs	r5, r1
     876:	4325      	orrs	r5, r4
     878:	7015      	strb	r5, [r2, #0]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     87a:	2237      	movs	r2, #55	; 0x37
     87c:	4694      	mov	ip, r2
     87e:	449c      	add	ip, r3
     880:	4662      	mov	r2, ip
     882:	2120      	movs	r1, #32
     884:	7812      	ldrb	r2, [r2, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     886:	2502      	movs	r5, #2
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     888:	4032      	ands	r2, r6
     88a:	430a      	orrs	r2, r1
     88c:	4661      	mov	r1, ip
     88e:	700a      	strb	r2, [r1, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     890:	2102      	movs	r1, #2
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     892:	783a      	ldrb	r2, [r7, #0]
     894:	4322      	orrs	r2, r4
     896:	703a      	strb	r2, [r7, #0]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     898:	7802      	ldrb	r2, [r0, #0]
     89a:	43b2      	bics	r2, r6
     89c:	430a      	orrs	r2, r1
     89e:	7002      	strb	r2, [r0, #0]
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     8a0:	9a03      	ldr	r2, [sp, #12]
     8a2:	9903      	ldr	r1, [sp, #12]
     8a4:	7812      	ldrb	r2, [r2, #0]
}


inline static void pinOutStrong(Pin p) {
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
     8a6:	2040      	movs	r0, #64	; 0x40
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     8a8:	4322      	orrs	r2, r4
     8aa:	700a      	strb	r2, [r1, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     8ac:	0019      	movs	r1, r3
     8ae:	314e      	adds	r1, #78	; 0x4e
     8b0:	780a      	ldrb	r2, [r1, #0]
     8b2:	43a2      	bics	r2, r4
     8b4:	700a      	strb	r2, [r1, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     8b6:	2280      	movs	r2, #128	; 0x80
     8b8:	01d2      	lsls	r2, r2, #7
     8ba:	609a      	str	r2, [r3, #8]
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     8bc:	619a      	str	r2, [r3, #24]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     8be:	001a      	movs	r2, r3
     8c0:	3255      	adds	r2, #85	; 0x55
     8c2:	7811      	ldrb	r1, [r2, #0]
     8c4:	43a1      	bics	r1, r4
     8c6:	7011      	strb	r1, [r2, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     8c8:	2180      	movs	r1, #128	; 0x80
     8ca:	0389      	lsls	r1, r1, #14
     8cc:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     8ce:	7811      	ldrb	r1, [r2, #0]
     8d0:	43a1      	bics	r1, r4
     8d2:	7011      	strb	r1, [r2, #0]
}


inline static void pinOutStrong(Pin p) {
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
     8d4:	7811      	ldrb	r1, [r2, #0]
     8d6:	4301      	orrs	r1, r0
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     8d8:	0018      	movs	r0, r3
}


inline static void pinOutStrong(Pin p) {
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
     8da:	7011      	strb	r1, [r2, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     8dc:	3056      	adds	r0, #86	; 0x56
     8de:	7802      	ldrb	r2, [r0, #0]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     8e0:	0019      	movs	r1, r3
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     8e2:	43a2      	bics	r2, r4
     8e4:	7002      	strb	r2, [r0, #0]
}


inline static void pinOut(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     8e6:	2280      	movs	r2, #128	; 0x80
     8e8:	03d2      	lsls	r2, r2, #15
     8ea:	609a      	str	r2, [r3, #8]

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     8ec:	313b      	adds	r1, #59	; 0x3b
     8ee:	780a      	ldrb	r2, [r1, #0]
     8f0:	43b2      	bics	r2, r6
     8f2:	432a      	orrs	r2, r5
     8f4:	700a      	strb	r2, [r1, #0]
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     8f6:	7802      	ldrb	r2, [r0, #0]
     8f8:	4322      	orrs	r2, r4
     8fa:	7002      	strb	r2, [r0, #0]
}


inline static void pinGpio(Pin p) {
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     8fc:	001a      	movs	r2, r3
     8fe:	3257      	adds	r2, #87	; 0x57
     900:	7810      	ldrb	r0, [r2, #0]
     902:	43a0      	bics	r0, r4
     904:	7010      	strb	r0, [r2, #0]
}


inline static void pinIn(Pin p) {
    pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     906:	7810      	ldrb	r0, [r2, #0]
     908:	4328      	orrs	r0, r5
     90a:	7010      	strb	r0, [r2, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     90c:	2080      	movs	r0, #128	; 0x80
     90e:	0400      	lsls	r0, r0, #16
     910:	6058      	str	r0, [r3, #4]
    return (PORT->Group[p.group].IN.reg & (1<<p.pin)) != 0;
}

inline static void pinMux(Pin p) {
    if (p.pin & 1) {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     912:	2020      	movs	r0, #32
     914:	780b      	ldrb	r3, [r1, #0]
     916:	4033      	ands	r3, r6
     918:	4303      	orrs	r3, r0
     91a:	700b      	strb	r3, [r1, #0]
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
    }
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     91c:	7813      	ldrb	r3, [r2, #0]
    pinOut(TxPo);
    pinMux(TxPo);
    pinIn(RxPo);
    pinMux(RxPo);
	
	delay_ms(200);
     91e:	30a8      	adds	r0, #168	; 0xa8
     920:	4323      	orrs	r3, r4
     922:	7013      	strb	r3, [r2, #0]
     924:	4b24      	ldr	r3, [pc, #144]	; (9b8 <init+0x420>)
     926:	4798      	blx	r3

    sercomClockEnable(SPI2, 3, 4);
     928:	4f24      	ldr	r7, [pc, #144]	; (9bc <init+0x424>)
     92a:	0028      	movs	r0, r5
     92c:	2204      	movs	r2, #4
     92e:	2103      	movs	r1, #3
     930:	47b8      	blx	r7
    sercomSpiMasterInit(SPI2, 1, 3, 0, 0, 0x00);
     932:	2300      	movs	r3, #0
     934:	4e22      	ldr	r6, [pc, #136]	; (9c0 <init+0x428>)
     936:	9301      	str	r3, [sp, #4]
     938:	9300      	str	r3, [sp, #0]
     93a:	0021      	movs	r1, r4
     93c:	0028      	movs	r0, r5
     93e:	2203      	movs	r2, #3
     940:	47b0      	blx	r6

    sercomClockEnable(SPI0, 3, 4);
     942:	2204      	movs	r2, #4
     944:	2103      	movs	r1, #3
     946:	2000      	movs	r0, #0
     948:	47b8      	blx	r7
    sercomSpiMasterInit(SPI0, 3, 0, 0, 0, 0x00);
     94a:	2300      	movs	r3, #0
     94c:	2103      	movs	r1, #3
     94e:	9301      	str	r3, [sp, #4]
     950:	9300      	str	r3, [sp, #0]
     952:	001a      	movs	r2, r3
     954:	0018      	movs	r0, r3
     956:	47b0      	blx	r6

    sercomClockEnable(SPI1, 3, 4);
     958:	0020      	movs	r0, r4
     95a:	2204      	movs	r2, #4
     95c:	2103      	movs	r1, #3
     95e:	47b8      	blx	r7
    sercomSpiMasterInit(SPI1, 3, 0, 0, 0, 0x00);
     960:	2300      	movs	r3, #0
     962:	0020      	movs	r0, r4
     964:	9301      	str	r3, [sp, #4]
     966:	9300      	str	r3, [sp, #0]
     968:	001a      	movs	r2, r3
     96a:	2103      	movs	r1, #3
     96c:	47b0      	blx	r6

    sercomClockEnable(USART3, 4, 8);
     96e:	2208      	movs	r2, #8
     970:	2104      	movs	r1, #4
     972:	2003      	movs	r0, #3
     974:	47b8      	blx	r7
    sercomUartInit(USART3,1,0,19200);
     976:	2396      	movs	r3, #150	; 0x96
     978:	0021      	movs	r1, r4
     97a:	2200      	movs	r2, #0
     97c:	2003      	movs	r0, #3
     97e:	01db      	lsls	r3, r3, #7
     980:	4c10      	ldr	r4, [pc, #64]	; (9c4 <init+0x42c>)
     982:	47a0      	blx	r4

    TC4Init();
     984:	4b10      	ldr	r3, [pc, #64]	; (9c8 <init+0x430>)
     986:	4798      	blx	r3
    TC5Init();
     988:	4b10      	ldr	r3, [pc, #64]	; (9cc <init+0x434>)
     98a:	4798      	blx	r3
}
     98c:	b005      	add	sp, #20
     98e:	e01f      	b.n	9d0 <init+0x438>
     990:	41004000 	.word	0x41004000
     994:	40000400 	.word	0x40000400
     998:	000001d5 	.word	0x000001d5
     99c:	0000100d 	.word	0x0000100d
     9a0:	00000f0d 	.word	0x00000f0d
     9a4:	00001081 	.word	0x00001081
     9a8:	00000d2d 	.word	0x00000d2d
     9ac:	41004400 	.word	0x41004400
     9b0:	41004488 	.word	0x41004488
     9b4:	200002b4 	.word	0x200002b4
     9b8:	000010e1 	.word	0x000010e1
     9bc:	00002afd 	.word	0x00002afd
     9c0:	00002b61 	.word	0x00002b61
     9c4:	00002bc5 	.word	0x00002bc5
     9c8:	00001161 	.word	0x00001161
     9cc:	000011c9 	.word	0x000011c9
     9d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
     9d2:	46c0      	nop			; (mov r8, r8)

000009d4 <main>:


int main(void) {
     9d4:	b510      	push	{r4, lr}

    init();
     9d6:	4b12      	ldr	r3, [pc, #72]	; (a20 <main+0x4c>)
     9d8:	4798      	blx	r3

    initMS5803Barometer();
     9da:	4b12      	ldr	r3, [pc, #72]	; (a24 <main+0x50>)
     9dc:	4798      	blx	r3
    IMUinit();
     9de:	4b12      	ldr	r3, [pc, #72]	; (a28 <main+0x54>)
     9e0:	4798      	blx	r3

    computeKalmanGains();
     9e2:	4b12      	ldr	r3, [pc, #72]	; (a2c <main+0x58>)
     9e4:	4798      	blx	r3

    sampleTick();
     9e6:	4c12      	ldr	r4, [pc, #72]	; (a30 <main+0x5c>)
     9e8:	47a0      	blx	r4

    POST();
     9ea:	4b12      	ldr	r3, [pc, #72]	; (a34 <main+0x60>)
     9ec:	4798      	blx	r3

    isItPointingUp();
     9ee:	4b12      	ldr	r3, [pc, #72]	; (a38 <main+0x64>)
     9f0:	4798      	blx	r3

    getSettings();
     9f2:	4b12      	ldr	r3, [pc, #72]	; (a3c <main+0x68>)
     9f4:	4798      	blx	r3

    //beepNumber(12345);


    beep(800);
     9f6:	20c8      	movs	r0, #200	; 0xc8
     9f8:	4b11      	ldr	r3, [pc, #68]	; (a40 <main+0x6c>)
     9fa:	0080      	lsls	r0, r0, #2
     9fc:	4798      	blx	r3

    startupTick = millis();
     9fe:	4b11      	ldr	r3, [pc, #68]	; (a44 <main+0x70>)
     a00:	4798      	blx	r3
     a02:	4b11      	ldr	r3, [pc, #68]	; (a48 <main+0x74>)
     a04:	6018      	str	r0, [r3, #0]

    while (1) {
        if (takeSample()) {
     a06:	4b11      	ldr	r3, [pc, #68]	; (a4c <main+0x78>)
     a08:	4798      	blx	r3
     a0a:	2800      	cmp	r0, #0
     a0c:	d0fb      	beq.n	a06 <main+0x32>
            sampleTick();
     a0e:	47a0      	blx	r4
            flight();
     a10:	4b0f      	ldr	r3, [pc, #60]	; (a50 <main+0x7c>)
     a12:	4798      	blx	r3
            igniterTick();
     a14:	4b0f      	ldr	r3, [pc, #60]	; (a54 <main+0x80>)
     a16:	4798      	blx	r3
            computeKalmanStates();
     a18:	4b0f      	ldr	r3, [pc, #60]	; (a58 <main+0x84>)
     a1a:	4798      	blx	r3
     a1c:	e7f3      	b.n	a06 <main+0x32>
     a1e:	46c0      	nop			; (mov r8, r8)
     a20:	00000599 	.word	0x00000599
     a24:	00000559 	.word	0x00000559
     a28:	00000a75 	.word	0x00000a75
     a2c:	000017a1 	.word	0x000017a1
     a30:	000027c1 	.word	0x000027c1
     a34:	00000c35 	.word	0x00000c35
     a38:	00001539 	.word	0x00001539
     a3c:	00002d6d 	.word	0x00002d6d
     a40:	00000e11 	.word	0x00000e11
     a44:	0000112d 	.word	0x0000112d
     a48:	2000015c 	.word	0x2000015c
     a4c:	000027a9 	.word	0x000027a9
     a50:	00001231 	.word	0x00001231
     a54:	00001615 	.word	0x00001615
     a58:	0000220d 	.word	0x0000220d

00000a5c <HardFault_Handler>:
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
     a5c:	f3bf 8f4f 	dsb	sy
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
     a60:	4a02      	ldr	r2, [pc, #8]	; (a6c <HardFault_Handler+0x10>)
     a62:	4b03      	ldr	r3, [pc, #12]	; (a70 <HardFault_Handler+0x14>)
     a64:	60da      	str	r2, [r3, #12]
     a66:	f3bf 8f4f 	dsb	sy
     a6a:	e7fe      	b.n	a6a <HardFault_Handler+0xe>
     a6c:	05fa0004 	.word	0x05fa0004
     a70:	e000ed00 	.word	0xe000ed00

00000a74 <IMUinit>:
extern uint32_t _ezero;
extern uint32_t _sstack;
extern uint32_t _estack;


void IMUinit() {
     a74:	b570      	push	{r4, r5, r6, lr}
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     a76:	4c08      	ldr	r4, [pc, #32]	; (a98 <IMUinit+0x24>)
     a78:	2580      	movs	r5, #128	; 0x80
     a7a:	0023      	movs	r3, r4
     a7c:	00ed      	lsls	r5, r5, #3
     a7e:	3394      	adds	r3, #148	; 0x94
     a80:	601d      	str	r5, [r3, #0]

    pinLow(cs_accel);
    spiDataOut(SPI0, BMI_ACCEL_PMU_RANGE);
     a82:	4e06      	ldr	r6, [pc, #24]	; (a9c <IMUinit+0x28>)
     a84:	210f      	movs	r1, #15
     a86:	2000      	movs	r0, #0
     a88:	47b0      	blx	r6
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     a8a:	3498      	adds	r4, #152	; 0x98
    spiDataOut(SPI0, BMI_ACCEL_16G_RANGE);
     a8c:	210c      	movs	r1, #12
     a8e:	2000      	movs	r0, #0
     a90:	47b0      	blx	r6
     a92:	6025      	str	r5, [r4, #0]
    pinHigh(cs_accel);

}
     a94:	bd70      	pop	{r4, r5, r6, pc}
     a96:	46c0      	nop			; (mov r8, r8)
     a98:	41004400 	.word	0x41004400
     a9c:	00002c25 	.word	0x00002c25

00000aa0 <USARTconnectionAvaliable>:

bool USARTconnectionAvaliable() {
     aa0:	b510      	push	{r4, lr}

    if (sercom(USART3)->SPI.INTFLAG.bit.RXC == 1) {
     aa2:	4b09      	ldr	r3, [pc, #36]	; (ac8 <USARTconnectionAvaliable+0x28>)
     aa4:	7e1c      	ldrb	r4, [r3, #24]
     aa6:	0764      	lsls	r4, r4, #29
     aa8:	0fe4      	lsrs	r4, r4, #31
     aaa:	2c01      	cmp	r4, #1
     aac:	d001      	beq.n	ab2 <USARTconnectionAvaliable+0x12>
            return true;
        } else {
            return false;
        }
    }
    return false;
     aae:	2000      	movs	r0, #0
     ab0:	e009      	b.n	ac6 <USARTconnectionAvaliable+0x26>
}

bool USARTconnectionAvaliable() {

    if (sercom(USART3)->SPI.INTFLAG.bit.RXC == 1) {
        u8_t connectAttempt = usartDataIn(USART3);
     ab2:	2003      	movs	r0, #3
     ab4:	4b05      	ldr	r3, [pc, #20]	; (acc <USARTconnectionAvaliable+0x2c>)
     ab6:	4798      	blx	r3
     ab8:	1e01      	subs	r1, r0, #0
        if (connectAttempt == 0x48) {
     aba:	2948      	cmp	r1, #72	; 0x48
     abc:	d1f7      	bne.n	aae <USARTconnectionAvaliable+0xe>
            usartDataOut(USART3, 'H');
     abe:	2003      	movs	r0, #3
     ac0:	4b03      	ldr	r3, [pc, #12]	; (ad0 <USARTconnectionAvaliable+0x30>)
     ac2:	4798      	blx	r3
            return true;
     ac4:	0020      	movs	r0, r4
        } else {
            return false;
        }
    }
    return false;
}
     ac6:	bd10      	pop	{r4, pc}
     ac8:	42001400 	.word	0x42001400
     acc:	00002c71 	.word	0x00002c71
     ad0:	00002c59 	.word	0x00002c59

00000ad4 <sendTheasePagesToComputer>:

void sendTheasePagesToComputer(u32_t firstPage, u32_t lastPage) {
     ad4:	b5f0      	push	{r4, r5, r6, r7, lr}
    for (u16_t page = 0; page <= pagesToSend; ++page) {

        u8_t data[256];
        AT25SEreadPage(pageToReadAddress , data);

        for (u16_t dataByte = 0; dataByte < 256; ++dataByte) {
     ad6:	2780      	movs	r7, #128	; 0x80
        }
    }
    return false;
}

void sendTheasePagesToComputer(u32_t firstPage, u32_t lastPage) {
     ad8:	0005      	movs	r5, r0

    u16_t pagesToSend = (lastPage - firstPage) >> 8;

    u32_t pageToReadAddress = firstPage;

    for (u16_t page = 0; page <= pagesToSend; ++page) {
     ada:	2400      	movs	r4, #0
    return false;
}

void sendTheasePagesToComputer(u32_t firstPage, u32_t lastPage) {

    u16_t pagesToSend = (lastPage - firstPage) >> 8;
     adc:	1a09      	subs	r1, r1, r0
     ade:	0a09      	lsrs	r1, r1, #8
        }
    }
    return false;
}

void sendTheasePagesToComputer(u32_t firstPage, u32_t lastPage) {
     ae0:	b0c3      	sub	sp, #268	; 0x10c

    u16_t pagesToSend = (lastPage - firstPage) >> 8;
     ae2:	b28b      	uxth	r3, r1
     ae4:	9301      	str	r3, [sp, #4]
    for (u16_t page = 0; page <= pagesToSend; ++page) {

        u8_t data[256];
        AT25SEreadPage(pageToReadAddress , data);

        for (u16_t dataByte = 0; dataByte < 256; ++dataByte) {
     ae6:	007f      	lsls	r7, r7, #1
    u32_t pageToReadAddress = firstPage;

    for (u16_t page = 0; page <= pagesToSend; ++page) {

        u8_t data[256];
        AT25SEreadPage(pageToReadAddress , data);
     ae8:	a902      	add	r1, sp, #8
     aea:	0028      	movs	r0, r5
     aec:	4b09      	ldr	r3, [pc, #36]	; (b14 <sendTheasePagesToComputer+0x40>)
     aee:	4798      	blx	r3
     af0:	2600      	movs	r6, #0

        for (u16_t dataByte = 0; dataByte < 256; ++dataByte) {
            usartDataOut(USART3, data[dataByte]);
     af2:	ab02      	add	r3, sp, #8
     af4:	5d99      	ldrb	r1, [r3, r6]
     af6:	2003      	movs	r0, #3
     af8:	4b07      	ldr	r3, [pc, #28]	; (b18 <sendTheasePagesToComputer+0x44>)
     afa:	3601      	adds	r6, #1
     afc:	4798      	blx	r3
    for (u16_t page = 0; page <= pagesToSend; ++page) {

        u8_t data[256];
        AT25SEreadPage(pageToReadAddress , data);

        for (u16_t dataByte = 0; dataByte < 256; ++dataByte) {
     afe:	42be      	cmp	r6, r7
     b00:	d1f7      	bne.n	af2 <sendTheasePagesToComputer+0x1e>

    u16_t pagesToSend = (lastPage - firstPage) >> 8;

    u32_t pageToReadAddress = firstPage;

    for (u16_t page = 0; page <= pagesToSend; ++page) {
     b02:	3401      	adds	r4, #1
     b04:	9b01      	ldr	r3, [sp, #4]

        for (u16_t dataByte = 0; dataByte < 256; ++dataByte) {
            usartDataOut(USART3, data[dataByte]);
        }

        pageToReadAddress = pageToReadAddress + 0x100;
     b06:	3501      	adds	r5, #1

    u16_t pagesToSend = (lastPage - firstPage) >> 8;

    u32_t pageToReadAddress = firstPage;

    for (u16_t page = 0; page <= pagesToSend; ++page) {
     b08:	b2a4      	uxth	r4, r4

        for (u16_t dataByte = 0; dataByte < 256; ++dataByte) {
            usartDataOut(USART3, data[dataByte]);
        }

        pageToReadAddress = pageToReadAddress + 0x100;
     b0a:	35ff      	adds	r5, #255	; 0xff

    u16_t pagesToSend = (lastPage - firstPage) >> 8;

    u32_t pageToReadAddress = firstPage;

    for (u16_t page = 0; page <= pagesToSend; ++page) {
     b0c:	42a3      	cmp	r3, r4
     b0e:	d2eb      	bcs.n	ae8 <sendTheasePagesToComputer+0x14>
            usartDataOut(USART3, data[dataByte]);
        }

        pageToReadAddress = pageToReadAddress + 0x100;
    }
}
     b10:	b043      	add	sp, #268	; 0x10c
     b12:	bdf0      	pop	{r4, r5, r6, r7, pc}
     b14:	0000035d 	.word	0x0000035d
     b18:	00002c59 	.word	0x00002c59

00000b1c <altitudeAGL>:

int32_t altitudeAGL() {
    return altitude - offsets.groundOffset;
     b1c:	4b07      	ldr	r3, [pc, #28]	; (b3c <altitudeAGL+0x20>)

        pageToReadAddress = pageToReadAddress + 0x100;
    }
}

int32_t altitudeAGL() {
     b1e:	b510      	push	{r4, lr}
    return altitude - offsets.groundOffset;
     b20:	6998      	ldr	r0, [r3, #24]
     b22:	4b07      	ldr	r3, [pc, #28]	; (b40 <altitudeAGL+0x24>)
     b24:	4798      	blx	r3
     b26:	000b      	movs	r3, r1
     b28:	4906      	ldr	r1, [pc, #24]	; (b44 <altitudeAGL+0x28>)
     b2a:	0002      	movs	r2, r0
     b2c:	6808      	ldr	r0, [r1, #0]
     b2e:	6849      	ldr	r1, [r1, #4]
     b30:	4c05      	ldr	r4, [pc, #20]	; (b48 <altitudeAGL+0x2c>)
     b32:	47a0      	blx	r4
     b34:	4b05      	ldr	r3, [pc, #20]	; (b4c <altitudeAGL+0x30>)
     b36:	4798      	blx	r3
}
     b38:	bd10      	pop	{r4, pc}
     b3a:	46c0      	nop			; (mov r8, r8)
     b3c:	20000108 	.word	0x20000108
     b40:	00006185 	.word	0x00006185
     b44:	200002e8 	.word	0x200002e8
     b48:	000059ad 	.word	0x000059ad
     b4c:	00006095 	.word	0x00006095

00000b50 <unplugged>:


bool unplugged() {
    if (sample.voltage.batFloat < 3.3) {
     b50:	4b07      	ldr	r3, [pc, #28]	; (b70 <unplugged+0x20>)
int32_t altitudeAGL() {
    return altitude - offsets.groundOffset;
}


bool unplugged() {
     b52:	b570      	push	{r4, r5, r6, lr}
     b54:	68d8      	ldr	r0, [r3, #12]
     b56:	4b07      	ldr	r3, [pc, #28]	; (b74 <unplugged+0x24>)
     b58:	4798      	blx	r3
     b5a:	4a07      	ldr	r2, [pc, #28]	; (b78 <unplugged+0x28>)
     b5c:	4b07      	ldr	r3, [pc, #28]	; (b7c <unplugged+0x2c>)
     b5e:	4d08      	ldr	r5, [pc, #32]	; (b80 <unplugged+0x30>)
     b60:	2401      	movs	r4, #1
     b62:	47a8      	blx	r5
     b64:	2800      	cmp	r0, #0
     b66:	d100      	bne.n	b6a <unplugged+0x1a>
     b68:	1c04      	adds	r4, r0, #0
     b6a:	b2e0      	uxtb	r0, r4
    if (sample.voltage.batFloat < 3.3) {
        return true;
    } else {
        return false;
    }
}
     b6c:	bd70      	pop	{r4, r5, r6, pc}
     b6e:	46c0      	nop			; (mov r8, r8)
     b70:	20000540 	.word	0x20000540
     b74:	000061f5 	.word	0x000061f5
     b78:	66666666 	.word	0x66666666
     b7c:	400a6666 	.word	0x400a6666
     b80:	000042c9 	.word	0x000042c9

00000b84 <shutDown>:

void shutDown() {
     b84:	b510      	push	{r4, lr}


    delay_ms(100);
     b86:	2064      	movs	r0, #100	; 0x64
     b88:	4b14      	ldr	r3, [pc, #80]	; (bdc <shutDown+0x58>)
     b8a:	4798      	blx	r3
    TC4->COUNT8.CTRLA.reg = 0;
     b8c:	2300      	movs	r3, #0

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     b8e:	2180      	movs	r1, #128	; 0x80
     b90:	4a13      	ldr	r2, [pc, #76]	; (be0 <shutDown+0x5c>)
     b92:	0309      	lsls	r1, r1, #12
     b94:	8013      	strh	r3, [r2, #0]
    TC5->COUNT8.CTRLA.reg = 0;
     b96:	4a13      	ldr	r2, [pc, #76]	; (be4 <shutDown+0x60>)
     b98:	2480      	movs	r4, #128	; 0x80
     b9a:	8013      	strh	r3, [r2, #0]
     b9c:	4a12      	ldr	r2, [pc, #72]	; (be8 <shutDown+0x64>)
    NVIC_DisableIRQ(TC4_IRQn);
    NVIC_DisableIRQ(TC5_IRQn);
    NVIC_DisableIRQ(RTC_IRQn);
    RTC->MODE1.CTRL.bit.ENABLE = 0;
     b9e:	2002      	movs	r0, #2
     ba0:	67d1      	str	r1, [r2, #124]	; 0x7c
     ba2:	2108      	movs	r1, #8
     ba4:	0364      	lsls	r4, r4, #13
     ba6:	67d4      	str	r4, [r2, #124]	; 0x7c
     ba8:	67d1      	str	r1, [r2, #124]	; 0x7c
     baa:	4a10      	ldr	r2, [pc, #64]	; (bec <shutDown+0x68>)
     bac:	8811      	ldrh	r1, [r2, #0]
     bae:	4381      	bics	r1, r0
     bb0:	8011      	strh	r1, [r2, #0]
    SysTick->CTRL = 0;
     bb2:	4a0f      	ldr	r2, [pc, #60]	; (bf0 <shutDown+0x6c>)
     bb4:	6013      	str	r3, [r2, #0]
	PM->APBAMASK.reg = 0;
     bb6:	4a0f      	ldr	r2, [pc, #60]	; (bf4 <shutDown+0x70>)
     bb8:	6193      	str	r3, [r2, #24]

	//turn off sercom clocks
	//GCLK->CLKCTRL.reg

     GCLK->GENDIV.reg  = (GCLK_GENDIV_DIV(1)  | GCLK_GENDIV_ID(0));
     bba:	2280      	movs	r2, #128	; 0x80
     bbc:	4b0e      	ldr	r3, [pc, #56]	; (bf8 <shutDown+0x74>)
     bbe:	0052      	lsls	r2, r2, #1
     bc0:	609a      	str	r2, [r3, #8]
     GCLK->GENCTRL.reg = (GCLK_GENCTRL_ID(0)  | (GCLK_GENCTRL_SRC_OSC8M) | (GCLK_GENCTRL_GENEN));
     bc2:	2283      	movs	r2, #131	; 0x83
     bc4:	0252      	lsls	r2, r2, #9
     bc6:	605a      	str	r2, [r3, #4]
     bc8:	4b0c      	ldr	r3, [pc, #48]	; (bfc <shutDown+0x78>)
//     NVMCTRL->CTRLB.bit.MANW = 1;
// 
//     /* Initialize the C library */
//     __libc_init_array();

SYSCTRL->BOD33.reg = SYSCTRL_BOD33_PSEL_DIV8 | SYSCTRL_BOD33_ACTION_RESET | SYSCTRL_BOD33_LEVEL(60);
     bca:	4a0d      	ldr	r2, [pc, #52]	; (c00 <shutDown+0x7c>)
     bcc:	619c      	str	r4, [r3, #24]
     bce:	4b0d      	ldr	r3, [pc, #52]	; (c04 <shutDown+0x80>)
     bd0:	635a      	str	r2, [r3, #52]	; 0x34

SYSCTRL->BOD33.reg |= SYSCTRL_BOD33_ENABLE;
     bd2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
     bd4:	4302      	orrs	r2, r0
     bd6:	635a      	str	r2, [r3, #52]	; 0x34
     bd8:	e7fe      	b.n	bd8 <shutDown+0x54>
     bda:	46c0      	nop			; (mov r8, r8)
     bdc:	000010e1 	.word	0x000010e1
     be0:	42003000 	.word	0x42003000
     be4:	42003400 	.word	0x42003400
     be8:	e000e104 	.word	0xe000e104
     bec:	40001400 	.word	0x40001400
     bf0:	e000e010 	.word	0xe000e010
     bf4:	40000400 	.word	0x40000400
     bf8:	40000c00 	.word	0x40000c00
     bfc:	41004400 	.word	0x41004400
     c00:	003c2008 	.word	0x003c2008
     c04:	40000800 	.word	0x40000800

00000c08 <finishFlight>:
    }
}

void finishFlight() {

    flightState = flightIdle;
     c08:	2201      	movs	r2, #1
     c0a:	4b05      	ldr	r3, [pc, #20]	; (c20 <finishFlight+0x18>)
    while(1) {

    }
}

void finishFlight() {
     c0c:	b510      	push	{r4, lr}

    flightState = flightIdle;
     c0e:	701a      	strb	r2, [r3, #0]
    AT25SFHoldTillReady();
     c10:	4b04      	ldr	r3, [pc, #16]	; (c24 <finishFlight+0x1c>)
     c12:	4798      	blx	r3
    writeFlightEndAddress( );
     c14:	4b04      	ldr	r3, [pc, #16]	; (c28 <finishFlight+0x20>)
     c16:	4798      	blx	r3
    unpluggedJingle();
     c18:	4b04      	ldr	r3, [pc, #16]	; (c2c <finishFlight+0x24>)
     c1a:	4798      	blx	r3
    shutDown();
     c1c:	4b04      	ldr	r3, [pc, #16]	; (c30 <finishFlight+0x28>)
     c1e:	4798      	blx	r3
     c20:	2000016c 	.word	0x2000016c
     c24:	000001e5 	.word	0x000001e5
     c28:	00002665 	.word	0x00002665
     c2c:	00000e85 	.word	0x00000e85
     c30:	00000b85 	.word	0x00000b85

00000c34 <POST>:

}


void POST() {
     c34:	b5f0      	push	{r4, r5, r6, r7, lr}

    bool postFailed = false;
    u8_t failType = 0;

    //Baro post first
    u8_t crc = MS5803_CRC4();
     c36:	4b32      	ldr	r3, [pc, #200]	; (d00 <POST+0xcc>)
    shutDown();

}


void POST() {
     c38:	b085      	sub	sp, #20

    bool postFailed = false;
    u8_t failType = 0;

    //Baro post first
    u8_t crc = MS5803_CRC4();
     c3a:	4798      	blx	r3
    if (crc != coefficients_[7]) {
     c3c:	4b31      	ldr	r3, [pc, #196]	; (d04 <POST+0xd0>)
     c3e:	b280      	uxth	r0, r0
     c40:	89db      	ldrh	r3, [r3, #14]
        postFailed = true;
        failType = 1;
     c42:	2401      	movs	r4, #1
    bool postFailed = false;
    u8_t failType = 0;

    //Baro post first
    u8_t crc = MS5803_CRC4();
    if (crc != coefficients_[7]) {
     c44:	4283      	cmp	r3, r0
     c46:	d100      	bne.n	c4a <POST+0x16>

void POST() {
    uint8_t dummy_Tx = 0xFF;

    bool postFailed = false;
    u8_t failType = 0;
     c48:	2400      	movs	r4, #0
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     c4a:	2780      	movs	r7, #128	; 0x80
     c4c:	4d2e      	ldr	r5, [pc, #184]	; (d08 <POST+0xd4>)
     c4e:	02ff      	lsls	r7, r7, #11
        failType = 1;
    }

    //Memory Post
    pinLow(cs_mem);
    spiDataOut(SPI1,0x9f); // read id and mfg code
     c50:	219f      	movs	r1, #159	; 0x9f
     c52:	4b2e      	ldr	r3, [pc, #184]	; (d0c <POST+0xd8>)


void POST() {
    uint8_t dummy_Tx = 0xFF;

    bool postFailed = false;
     c54:	9401      	str	r4, [sp, #4]
        failType = 1;
    }

    //Memory Post
    pinLow(cs_mem);
    spiDataOut(SPI1,0x9f); // read id and mfg code
     c56:	2001      	movs	r0, #1
     c58:	616f      	str	r7, [r5, #20]
     c5a:	4798      	blx	r3
    u8_t mfgID = spiDataIn(SPI1);
     c5c:	4e2c      	ldr	r6, [pc, #176]	; (d10 <POST+0xdc>)
     c5e:	2001      	movs	r0, #1
     c60:	47b0      	blx	r6
     c62:	9002      	str	r0, [sp, #8]
    u8_t deviceID1 = spiDataIn(SPI1);
     c64:	2001      	movs	r0, #1
     c66:	47b0      	blx	r6
     c68:	9003      	str	r0, [sp, #12]
    u8_t deviceID2 = spiDataIn(SPI1);
     c6a:	2001      	movs	r0, #1
     c6c:	47b0      	blx	r6
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     c6e:	61af      	str	r7, [r5, #24]
    pinHigh(cs_mem);

    if ( (mfgID != 0x1f) & (deviceID1 != 0x86) & (deviceID2 != 0x01)) {
     c70:	9b02      	ldr	r3, [sp, #8]
     c72:	3b1f      	subs	r3, #31
     c74:	1e5a      	subs	r2, r3, #1
     c76:	4193      	sbcs	r3, r2
     c78:	0019      	movs	r1, r3
     c7a:	9b03      	ldr	r3, [sp, #12]
     c7c:	3b86      	subs	r3, #134	; 0x86
     c7e:	1e5a      	subs	r2, r3, #1
     c80:	4193      	sbcs	r3, r2
     c82:	4a22      	ldr	r2, [pc, #136]	; (d0c <POST+0xd8>)
     c84:	9202      	str	r2, [sp, #8]
     c86:	420b      	tst	r3, r1
     c88:	d004      	beq.n	c94 <POST+0x60>
     c8a:	2801      	cmp	r0, #1
     c8c:	d002      	beq.n	c94 <POST+0x60>
        postFailed = true;
     c8e:	2301      	movs	r3, #1
        failType = 2;
     c90:	2402      	movs	r4, #2
    u8_t deviceID1 = spiDataIn(SPI1);
    u8_t deviceID2 = spiDataIn(SPI1);
    pinHigh(cs_mem);

    if ( (mfgID != 0x1f) & (deviceID1 != 0x86) & (deviceID2 != 0x01)) {
        postFailed = true;
     c92:	9301      	str	r3, [sp, #4]
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     c94:	2780      	movs	r7, #128	; 0x80
     c96:	4b1f      	ldr	r3, [pc, #124]	; (d14 <POST+0xe0>)
     c98:	00ff      	lsls	r7, r7, #3
     c9a:	601f      	str	r7, [r3, #0]
        failType = 2;
    }

    //Accelerometer Post
    pinLow(cs_accel);
    spiDataOut(SPI0, BMI055_BGW_CHIPID | BMI055_READ_REG);
     c9c:	9b02      	ldr	r3, [sp, #8]
     c9e:	2180      	movs	r1, #128	; 0x80
     ca0:	2000      	movs	r0, #0
     ca2:	4798      	blx	r3
    u8_t accelID = spiDataTransfer(SPI0,dummy_Tx);
     ca4:	21ff      	movs	r1, #255	; 0xff
     ca6:	2000      	movs	r0, #0
     ca8:	4e1b      	ldr	r6, [pc, #108]	; (d18 <POST+0xe4>)
     caa:	47b0      	blx	r6
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     cac:	4b1b      	ldr	r3, [pc, #108]	; (d1c <POST+0xe8>)
     cae:	601f      	str	r7, [r3, #0]
    pinHigh(cs_accel);

    if (accelID != 0xFA) {
     cb0:	28fa      	cmp	r0, #250	; 0xfa
     cb2:	d002      	beq.n	cba <POST+0x86>
        postFailed = true;
     cb4:	2301      	movs	r3, #1
        failType = 3;
     cb6:	2403      	movs	r4, #3
    spiDataOut(SPI0, BMI055_BGW_CHIPID | BMI055_READ_REG);
    u8_t accelID = spiDataTransfer(SPI0,dummy_Tx);
    pinHigh(cs_accel);

    if (accelID != 0xFA) {
        postFailed = true;
     cb8:	9301      	str	r3, [sp, #4]
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     cba:	616f      	str	r7, [r5, #20]
        failType = 3;
    }

    //Gyro Post
    pinLow(cs_gyro);
    spiDataOut(SPI0, BMI055_BGW_CHIPID | BMI055_READ_REG);
     cbc:	2180      	movs	r1, #128	; 0x80
     cbe:	2000      	movs	r0, #0
     cc0:	9b02      	ldr	r3, [sp, #8]
     cc2:	4798      	blx	r3
    u8_t gyroID = spiDataTransfer(SPI0,dummy_Tx);
     cc4:	21ff      	movs	r1, #255	; 0xff
     cc6:	2000      	movs	r0, #0
     cc8:	47b0      	blx	r6
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     cca:	61af      	str	r7, [r5, #24]
    pinHigh(cs_gyro);

    if (gyroID != 0x0F) {
     ccc:	280f      	cmp	r0, #15
     cce:	d103      	bne.n	cd8 <POST+0xa4>
    }

    //Analog Accelerometer Post


    if (postFailed) {
     cd0:	9b01      	ldr	r3, [sp, #4]
     cd2:	2b00      	cmp	r3, #0
     cd4:	d101      	bne.n	cda <POST+0xa6>
     cd6:	e011      	b.n	cfc <POST+0xc8>
    u8_t gyroID = spiDataTransfer(SPI0,dummy_Tx);
    pinHigh(cs_gyro);

    if (gyroID != 0x0F) {
        postFailed = true;
        failType = 4;
     cd8:	2404      	movs	r4, #4

    if (postFailed) {
        while (1) {
            u8_t beepCount;

            for (beepCount = failType; beepCount > 0; beepCount--) {
     cda:	0025      	movs	r5, r4
     cdc:	4e10      	ldr	r6, [pc, #64]	; (d20 <POST+0xec>)
     cde:	2d00      	cmp	r5, #0
     ce0:	d009      	beq.n	cf6 <POST+0xc2>
                beep(300);
     ce2:	2096      	movs	r0, #150	; 0x96
     ce4:	4b0f      	ldr	r3, [pc, #60]	; (d24 <POST+0xf0>)
     ce6:	0040      	lsls	r0, r0, #1
     ce8:	4798      	blx	r3
                delay_ms(300);
     cea:	2096      	movs	r0, #150	; 0x96

    if (postFailed) {
        while (1) {
            u8_t beepCount;

            for (beepCount = failType; beepCount > 0; beepCount--) {
     cec:	3d01      	subs	r5, #1
                beep(300);
                delay_ms(300);
     cee:	0040      	lsls	r0, r0, #1
     cf0:	47b0      	blx	r6

    if (postFailed) {
        while (1) {
            u8_t beepCount;

            for (beepCount = failType; beepCount > 0; beepCount--) {
     cf2:	b2ed      	uxtb	r5, r5
     cf4:	e7f2      	b.n	cdc <POST+0xa8>
                beep(300);
                delay_ms(300);
            }
            delay_ms(1500);
     cf6:	480c      	ldr	r0, [pc, #48]	; (d28 <POST+0xf4>)
     cf8:	47b0      	blx	r6
        }
     cfa:	e7ee      	b.n	cda <POST+0xa6>
    }
}
     cfc:	b005      	add	sp, #20
     cfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
     d00:	00000589 	.word	0x00000589
     d04:	2000026e 	.word	0x2000026e
     d08:	41004400 	.word	0x41004400
     d0c:	00002c25 	.word	0x00002c25
     d10:	00002c3d 	.word	0x00002c3d
     d14:	41004494 	.word	0x41004494
     d18:	00002c0d 	.word	0x00002c0d
     d1c:	41004498 	.word	0x41004498
     d20:	000010e1 	.word	0x000010e1
     d24:	00000e11 	.word	0x00000e11
     d28:	000005dc 	.word	0x000005dc

00000d2c <adcInit>:
#include <util.h>

void adcInit() {

    // set up clock
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;
     d2c:	2180      	movs	r1, #128	; 0x80


#include <util.h>

void adcInit() {
     d2e:	b510      	push	{r4, lr}

    // set up clock
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;
     d30:	4a10      	ldr	r2, [pc, #64]	; (d74 <adcInit+0x48>)
     d32:	0249      	lsls	r1, r1, #9
     d34:	6a13      	ldr	r3, [r2, #32]
    // divide prescaler by 512 (93.75KHz), max adc freq is 2.1MHz
    ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |
                     ADC_CTRLB_RESSEL_12BIT;

    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
     d36:	4810      	ldr	r0, [pc, #64]	; (d78 <adcInit+0x4c>)
#include <util.h>

void adcInit() {

    // set up clock
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;
     d38:	430b      	orrs	r3, r1
     d3a:	6213      	str	r3, [r2, #32]

    // divide prescaler by 512 (93.75KHz), max adc freq is 2.1MHz
    ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |
     d3c:	23e0      	movs	r3, #224	; 0xe0
     d3e:	490f      	ldr	r1, [pc, #60]	; (d7c <adcInit+0x50>)
                     ADC_CTRLB_RESSEL_12BIT;

    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
     d40:	4a0f      	ldr	r2, [pc, #60]	; (d80 <adcInit+0x54>)

    // set up clock
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;

    // divide prescaler by 512 (93.75KHz), max adc freq is 2.1MHz
    ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |
     d42:	00db      	lsls	r3, r3, #3
     d44:	808b      	strh	r3, [r1, #4]
                     ADC_CTRLB_RESSEL_12BIT;

    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
     d46:	8050      	strh	r0, [r2, #2]
                        GCLK_CLKCTRL_GEN(0) |
                        GCLK_CLKCTRL_ID(ADC_GCLK_ID);

    ADC->CALIB.reg =
        ADC_CALIB_BIAS_CAL(
     d48:	4a0e      	ldr	r2, [pc, #56]	; (d84 <adcInit+0x58>)
    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(0) |
                        GCLK_CLKCTRL_ID(ADC_GCLK_ID);

    ADC->CALIB.reg =
     d4a:	6812      	ldr	r2, [r2, #0]
     d4c:	0150      	lsls	r0, r2, #5
     d4e:	4018      	ands	r0, r3
     d50:	4b0d      	ldr	r3, [pc, #52]	; (d88 <adcInit+0x5c>)
     d52:	0154      	lsls	r4, r2, #5
     d54:	681a      	ldr	r2, [r3, #0]
     d56:	0ed3      	lsrs	r3, r2, #27
     d58:	4323      	orrs	r3, r4
     d5a:	b2da      	uxtb	r2, r3
     d5c:	0003      	movs	r3, r0
     d5e:	4313      	orrs	r3, r2
     d60:	850b      	strh	r3, [r1, #40]	; 0x28
        ) |
        ADC_CALIB_LINEARITY_CAL(
            (*(uint64_t *)ADC_FUSES_LINEARITY_0_ADDR >> ADC_FUSES_LINEARITY_0_Pos)
        );

    ADC->REFCTRL.reg = ADC_REFCTRL_REFSEL_INTVCC0;
     d62:	2301      	movs	r3, #1
     d64:	704b      	strb	r3, [r1, #1]

    ADC->CTRLA.reg = ADC_CTRLA_ENABLE; // enable
     d66:	18db      	adds	r3, r3, r3
     d68:	700b      	strb	r3, [r1, #0]
    while(ADC->STATUS.reg & ADC_STATUS_SYNCBUSY);
     d6a:	7e4b      	ldrb	r3, [r1, #25]
     d6c:	b25b      	sxtb	r3, r3
     d6e:	2b00      	cmp	r3, #0
     d70:	dbfb      	blt.n	d6a <adcInit+0x3e>
}
     d72:	bd10      	pop	{r4, pc}
     d74:	40000400 	.word	0x40000400
     d78:	0000401e 	.word	0x0000401e
     d7c:	42004000 	.word	0x42004000
     d80:	40000c00 	.word	0x40000c00
     d84:	00806024 	.word	0x00806024
     d88:	00806020 	.word	0x00806020

00000d8c <adcSample>:



u16_t adcSample() {
    ADC->SWTRIG.reg = ADC_SWTRIG_START;
     d8c:	2202      	movs	r2, #2
     d8e:	4b05      	ldr	r3, [pc, #20]	; (da4 <adcSample+0x18>)
     d90:	731a      	strb	r2, [r3, #12]
    while(!(ADC->INTFLAG.reg & ADC_INTFLAG_RESRDY)); // wait until result is ready
     d92:	3a01      	subs	r2, #1
     d94:	7e19      	ldrb	r1, [r3, #24]
     d96:	4211      	tst	r1, r2
     d98:	d0fc      	beq.n	d94 <adcSample+0x8>
    return ADC->RESULT.reg;
     d9a:	4b02      	ldr	r3, [pc, #8]	; (da4 <adcSample+0x18>)
     d9c:	8b58      	ldrh	r0, [r3, #26]
     d9e:	b280      	uxth	r0, r0
}
     da0:	4770      	bx	lr
     da2:	46c0      	nop			; (mov r8, r8)
     da4:	42004000 	.word	0x42004000

00000da8 <adc_read>:


u16_t adc_read(Pin p) {
     da8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    u16_t buad;

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
     daa:	2501      	movs	r5, #1
     dac:	0c02      	lsrs	r2, r0, #16
     dae:	b2d4      	uxtb	r4, r2
     db0:	9000      	str	r0, [sp, #0]
     db2:	0e00      	lsrs	r0, r0, #24
     db4:	9101      	str	r1, [sp, #4]
     db6:	0842      	lsrs	r2, r0, #1
     db8:	01e3      	lsls	r3, r4, #7
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     dba:	4911      	ldr	r1, [pc, #68]	; (e00 <adc_read+0x58>)
     dbc:	18d2      	adds	r2, r2, r3
     dbe:	1852      	adds	r2, r2, r1
    u16_t buad;

} _sercomPort;

inline static void pinAnalog(Pin p) {
    if (p.pin & 1) {
     dc0:	4228      	tst	r0, r5
     dc2:	d005      	beq.n	dd0 <adc_read+0x28>
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     dc4:	210f      	movs	r1, #15
     dc6:	7814      	ldrb	r4, [r2, #0]
     dc8:	4021      	ands	r1, r4
     dca:	2410      	movs	r4, #16
     dcc:	4321      	orrs	r1, r4
     dce:	e003      	b.n	dd8 <adc_read+0x30>
    } else {
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     dd0:	240f      	movs	r4, #15
     dd2:	7811      	ldrb	r1, [r2, #0]
     dd4:	43a1      	bics	r1, r4
     dd6:	4329      	orrs	r1, r5
     dd8:	7011      	strb	r1, [r2, #0]
    }

    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     dda:	2101      	movs	r1, #1
     ddc:	4a09      	ldr	r2, [pc, #36]	; (e04 <adc_read+0x5c>)
     dde:	18c3      	adds	r3, r0, r3
     de0:	189b      	adds	r3, r3, r2
     de2:	781a      	ldrb	r2, [r3, #0]
     de4:	430a      	orrs	r2, r1
     de6:	701a      	strb	r2, [r3, #0]
    // switch pin mux to analog in
    pinAnalog(p);

    ADC->INPUTCTRL.reg = (ADC_INPUTCTRL_MUXPOS(p.chan) // select from proper pin
                          | ADC_INPUTCTRL_MUXNEG_GND // 0 = gnd
                          | ADC_INPUTCTRL_GAIN_1X);
     de8:	466b      	mov	r3, sp
     dea:	791a      	ldrb	r2, [r3, #4]
     dec:	231f      	movs	r3, #31
     dee:	4013      	ands	r3, r2
     df0:	22c0      	movs	r2, #192	; 0xc0
     df2:	0152      	lsls	r2, r2, #5
     df4:	4313      	orrs	r3, r2

u16_t adc_read(Pin p) {
    // switch pin mux to analog in
    pinAnalog(p);

    ADC->INPUTCTRL.reg = (ADC_INPUTCTRL_MUXPOS(p.chan) // select from proper pin
     df6:	4a04      	ldr	r2, [pc, #16]	; (e08 <adc_read+0x60>)
     df8:	6113      	str	r3, [r2, #16]
                          | ADC_INPUTCTRL_MUXNEG_GND // 0 = gnd
                          | ADC_INPUTCTRL_GAIN_1X);

    return adcSample();
     dfa:	4b04      	ldr	r3, [pc, #16]	; (e0c <adc_read+0x64>)
     dfc:	4798      	blx	r3
     dfe:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
     e00:	41004430 	.word	0x41004430
     e04:	41004440 	.word	0x41004440
     e08:	42004000 	.word	0x42004000
     e0c:	00000d8d 	.word	0x00000d8d

00000e10 <beep>:
#include <util.h>
#include <boardDefines.h>
#include <math.h>


void beep(u16_t toggles) {
     e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
}


inline static void pinToggle(Pin p) {
    PORT->Group[p.group].OUTTGL.reg = (1<<p.pin);
     e12:	2380      	movs	r3, #128	; 0x80
     e14:	2780      	movs	r7, #128	; 0x80
     e16:	0006      	movs	r6, r0

    pinToggle(LedPin);
    for (u16_t buzz = 0; buzz < toggles; ++buzz) {
     e18:	2500      	movs	r5, #0
     e1a:	4c0a      	ldr	r4, [pc, #40]	; (e44 <beep+0x34>)
     e1c:	035b      	lsls	r3, r3, #13
     e1e:	61e3      	str	r3, [r4, #28]
     e20:	03bf      	lsls	r7, r7, #14
     e22:	42b5      	cmp	r5, r6
     e24:	d006      	beq.n	e34 <beep+0x24>
     e26:	61e7      	str	r7, [r4, #28]
        pinToggle(buzzerPin);
        delay_us(122);
     e28:	207a      	movs	r0, #122	; 0x7a
     e2a:	4b07      	ldr	r3, [pc, #28]	; (e48 <beep+0x38>)


void beep(u16_t toggles) {

    pinToggle(LedPin);
    for (u16_t buzz = 0; buzz < toggles; ++buzz) {
     e2c:	3501      	adds	r5, #1
        pinToggle(buzzerPin);
        delay_us(122);
     e2e:	4798      	blx	r3


void beep(u16_t toggles) {

    pinToggle(LedPin);
    for (u16_t buzz = 0; buzz < toggles; ++buzz) {
     e30:	b2ad      	uxth	r5, r5
     e32:	e7f6      	b.n	e22 <beep+0x12>
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     e34:	2380      	movs	r3, #128	; 0x80
     e36:	039b      	lsls	r3, r3, #14
     e38:	6163      	str	r3, [r4, #20]
}


inline static void pinToggle(Pin p) {
    PORT->Group[p.group].OUTTGL.reg = (1<<p.pin);
     e3a:	2380      	movs	r3, #128	; 0x80
     e3c:	035b      	lsls	r3, r3, #13
     e3e:	61e3      	str	r3, [r4, #28]
        pinToggle(buzzerPin);
        delay_us(122);
    }
    pinLow(buzzerPin);
    pinToggle(LedPin);
}
     e40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     e42:	46c0      	nop			; (mov r8, r8)
     e44:	41004400 	.word	0x41004400
     e48:	000010ad 	.word	0x000010ad

00000e4c <startupJingle>:
    }
    beepDigit(number);

}

void startupJingle() {
     e4c:	b570      	push	{r4, r5, r6, lr}
    beep(300);
     e4e:	2696      	movs	r6, #150	; 0x96
     e50:	0076      	lsls	r6, r6, #1
     e52:	4d0a      	ldr	r5, [pc, #40]	; (e7c <startupJingle+0x30>)
     e54:	0030      	movs	r0, r6
     e56:	47a8      	blx	r5
    delay_ms(80);
     e58:	4c09      	ldr	r4, [pc, #36]	; (e80 <startupJingle+0x34>)
     e5a:	2050      	movs	r0, #80	; 0x50
     e5c:	47a0      	blx	r4
    beep(300);
     e5e:	0030      	movs	r0, r6
     e60:	47a8      	blx	r5
    delay_ms(250);
     e62:	20fa      	movs	r0, #250	; 0xfa
     e64:	47a0      	blx	r4
    beep(300);
     e66:	0030      	movs	r0, r6
     e68:	47a8      	blx	r5
    delay_ms(80);
     e6a:	2050      	movs	r0, #80	; 0x50
     e6c:	47a0      	blx	r4
    beep(300);
     e6e:	0030      	movs	r0, r6
     e70:	47a8      	blx	r5
    delay_ms(500);
     e72:	20fa      	movs	r0, #250	; 0xfa
     e74:	0040      	lsls	r0, r0, #1
     e76:	47a0      	blx	r4
}
     e78:	bd70      	pop	{r4, r5, r6, pc}
     e7a:	46c0      	nop			; (mov r8, r8)
     e7c:	00000e11 	.word	0x00000e11
     e80:	000010e1 	.word	0x000010e1

00000e84 <unpluggedJingle>:

void unpluggedJingle() {
     e84:	b570      	push	{r4, r5, r6, lr}
    delay_ms(80);
    beep(300);
     e86:	2696      	movs	r6, #150	; 0x96
    beep(300);
    delay_ms(500);
}

void unpluggedJingle() {
    delay_ms(80);
     e88:	4c0c      	ldr	r4, [pc, #48]	; (ebc <unpluggedJingle+0x38>)
    beep(300);
     e8a:	0076      	lsls	r6, r6, #1
    beep(300);
    delay_ms(500);
}

void unpluggedJingle() {
    delay_ms(80);
     e8c:	2050      	movs	r0, #80	; 0x50
     e8e:	47a0      	blx	r4
    beep(300);
     e90:	4d0b      	ldr	r5, [pc, #44]	; (ec0 <unpluggedJingle+0x3c>)
     e92:	0030      	movs	r0, r6
     e94:	47a8      	blx	r5
    delay_ms(80);
     e96:	2050      	movs	r0, #80	; 0x50
     e98:	47a0      	blx	r4
    beep(300);
     e9a:	0030      	movs	r0, r6
     e9c:	47a8      	blx	r5
    delay_ms(80);
     e9e:	2050      	movs	r0, #80	; 0x50
     ea0:	47a0      	blx	r4
    beep(300);
     ea2:	0030      	movs	r0, r6
     ea4:	47a8      	blx	r5
    delay_ms(80);
     ea6:	2050      	movs	r0, #80	; 0x50
     ea8:	47a0      	blx	r4
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     eaa:	2280      	movs	r2, #128	; 0x80
     eac:	4b05      	ldr	r3, [pc, #20]	; (ec4 <unpluggedJingle+0x40>)
     eae:	0392      	lsls	r2, r2, #14
     eb0:	615a      	str	r2, [r3, #20]
     eb2:	2280      	movs	r2, #128	; 0x80
     eb4:	0352      	lsls	r2, r2, #13
     eb6:	615a      	str	r2, [r3, #20]
    pinLow(buzzerPin);
    pinLow(LedPin);

}
     eb8:	bd70      	pop	{r4, r5, r6, pc}
     eba:	46c0      	nop			; (mov r8, r8)
     ebc:	000010e1 	.word	0x000010e1
     ec0:	00000e11 	.word	0x00000e11
     ec4:	41004400 	.word	0x41004400

00000ec8 <dfll_nvm_val>:
#define NVM_DFLL_COARSE_SIZE   6
#define NVM_DFLL_FINE_POS      64
#define NVM_DFLL_FINE_SIZE     10

uint32_t dfll_nvm_val() {
    uint32_t coarse = ( *((uint32_t *)(NVMCTRL_OTP4)
     ec8:	4b08      	ldr	r3, [pc, #32]	; (eec <dfll_nvm_val+0x24>)
     eca:	6818      	ldr	r0, [r3, #0]
     ecc:	0e80      	lsrs	r0, r0, #26
                          + (NVM_DFLL_COARSE_POS / 32))
                        >> (NVM_DFLL_COARSE_POS % 32))
                      & ((1 << NVM_DFLL_COARSE_SIZE) - 1);
    if (coarse == 0x3f) {
     ece:	283f      	cmp	r0, #63	; 0x3f
     ed0:	d100      	bne.n	ed4 <dfll_nvm_val+0xc>
        coarse = 0x1f;
     ed2:	3820      	subs	r0, #32
    }
    uint32_t fine = ( *((uint32_t *)(NVMCTRL_OTP4)
                        + (NVM_DFLL_FINE_POS / 32))
                      >> (NVM_DFLL_FINE_POS % 32))
     ed4:	4b06      	ldr	r3, [pc, #24]	; (ef0 <dfll_nvm_val+0x28>)
                    & ((1 << NVM_DFLL_FINE_SIZE) - 1);
    if (fine == 0x3ff) {
     ed6:	4a07      	ldr	r2, [pc, #28]	; (ef4 <dfll_nvm_val+0x2c>)
                        >> (NVM_DFLL_COARSE_POS % 32))
                      & ((1 << NVM_DFLL_COARSE_SIZE) - 1);
    if (coarse == 0x3f) {
        coarse = 0x1f;
    }
    uint32_t fine = ( *((uint32_t *)(NVMCTRL_OTP4)
     ed8:	681b      	ldr	r3, [r3, #0]
     eda:	059b      	lsls	r3, r3, #22
     edc:	0d9b      	lsrs	r3, r3, #22
                        + (NVM_DFLL_FINE_POS / 32))
                      >> (NVM_DFLL_FINE_POS % 32))
                    & ((1 << NVM_DFLL_FINE_SIZE) - 1);
    if (fine == 0x3ff) {
     ede:	4293      	cmp	r3, r2
     ee0:	d100      	bne.n	ee4 <dfll_nvm_val+0x1c>
        fine = 0x1ff;
     ee2:	4b05      	ldr	r3, [pc, #20]	; (ef8 <dfll_nvm_val+0x30>)
    }

    return SYSCTRL_DFLLVAL_COARSE(coarse) | SYSCTRL_DFLLVAL_FINE(fine);
     ee4:	0280      	lsls	r0, r0, #10
     ee6:	4318      	orrs	r0, r3
}
     ee8:	4770      	bx	lr
     eea:	46c0      	nop			; (mov r8, r8)
     eec:	00806024 	.word	0x00806024
     ef0:	00806028 	.word	0x00806028
     ef4:	000003ff 	.word	0x000003ff
     ef8:	000001ff 	.word	0x000001ff

00000efc <dfll_wait_for_sync>:

void dfll_wait_for_sync() {
    while (!SYSCTRL->PCLKSR.bit.DFLLRDY);
     efc:	4a02      	ldr	r2, [pc, #8]	; (f08 <dfll_wait_for_sync+0xc>)
     efe:	68d3      	ldr	r3, [r2, #12]
     f00:	06db      	lsls	r3, r3, #27
     f02:	d5fc      	bpl.n	efe <dfll_wait_for_sync+0x2>
}
     f04:	4770      	bx	lr
     f06:	46c0      	nop			; (mov r8, r8)
     f08:	40000800 	.word	0x40000800

00000f0c <RtcInit>:
        //wait for crystal to warm up
        while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_OSC32KRDY)) == 0);

    */

    SYSCTRL->OSC32K.reg = SYSCTRL_OSC32K_ENABLE |
     f0c:	4b27      	ldr	r3, [pc, #156]	; (fac <RtcInit+0xa0>)
     f0e:	4a28      	ldr	r2, [pc, #160]	; (fb0 <RtcInit+0xa4>)
                          SYSCTRL_OSC32K_EN32K |
                          ( 6 << SYSCTRL_OSC32K_STARTUP_Pos);


    SYSCTRL->OSC32K.bit.CALIB =
     f10:	4828      	ldr	r0, [pc, #160]	; (fb4 <RtcInit+0xa8>)
        //wait for crystal to warm up
        while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_OSC32KRDY)) == 0);

    */

    SYSCTRL->OSC32K.reg = SYSCTRL_OSC32K_ENABLE |
     f12:	619a      	str	r2, [r3, #24]
                          SYSCTRL_OSC32K_EN32K |
                          ( 6 << SYSCTRL_OSC32K_STARTUP_Pos);


    SYSCTRL->OSC32K.bit.CALIB =
        ((*(uint32_t *)FUSES_OSC32K_CAL_ADDR >>
     f14:	4a28      	ldr	r2, [pc, #160]	; (fb8 <RtcInit+0xac>)
    SYSCTRL->OSC32K.reg = SYSCTRL_OSC32K_ENABLE |
                          SYSCTRL_OSC32K_EN32K |
                          ( 6 << SYSCTRL_OSC32K_STARTUP_Pos);


    SYSCTRL->OSC32K.bit.CALIB =
     f16:	6999      	ldr	r1, [r3, #24]
     f18:	6812      	ldr	r2, [r2, #0]
     f1a:	4001      	ands	r1, r0
     f1c:	04d2      	lsls	r2, r2, #19
     f1e:	0e52      	lsrs	r2, r2, #25
     f20:	0412      	lsls	r2, r2, #16
     f22:	4311      	orrs	r1, r2
     f24:	6199      	str	r1, [r3, #24]
        ((*(uint32_t *)FUSES_OSC32K_CAL_ADDR >>
          FUSES_OSC32K_CAL_Pos) & 0x7Ful);

    SYSCTRL->OSC32K.reg = SYSCTRL_OSC32K_STARTUP( 0x6u ) | // cf table 15.10 of product datasheet in chapter 15.8.6
     f26:	4925      	ldr	r1, [pc, #148]	; (fbc <RtcInit+0xb0>)
     f28:	6199      	str	r1, [r3, #24]
                          SYSCTRL_OSC32K_EN32K;
    SYSCTRL->OSC32K.bit.CALIB =
     f2a:	6999      	ldr	r1, [r3, #24]
     f2c:	4008      	ands	r0, r1
        ((*(uint32_t *)FUSES_OSC32K_CAL_ADDR >>
          FUSES_OSC32K_CAL_Pos) & 0x7Ful);



    SYSCTRL->OSC32K.bit.ENABLE = 1; // separate call, as described in chapter 15.6.3
     f2e:	2102      	movs	r1, #2
        ((*(uint32_t *)FUSES_OSC32K_CAL_ADDR >>
          FUSES_OSC32K_CAL_Pos) & 0x7Ful);

    SYSCTRL->OSC32K.reg = SYSCTRL_OSC32K_STARTUP( 0x6u ) | // cf table 15.10 of product datasheet in chapter 15.8.6
                          SYSCTRL_OSC32K_EN32K;
    SYSCTRL->OSC32K.bit.CALIB =
     f30:	4302      	orrs	r2, r0
     f32:	619a      	str	r2, [r3, #24]
        ((*(uint32_t *)FUSES_OSC32K_CAL_ADDR >>
          FUSES_OSC32K_CAL_Pos) & 0x7Ful);



    SYSCTRL->OSC32K.bit.ENABLE = 1; // separate call, as described in chapter 15.6.3
     f34:	699a      	ldr	r2, [r3, #24]
     f36:	430a      	orrs	r2, r1
     f38:	619a      	str	r2, [r3, #24]

    while (  (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_OSC32KRDY) == 0 ) {
     f3a:	2204      	movs	r2, #4
     f3c:	68d9      	ldr	r1, [r3, #12]
     f3e:	4211      	tst	r1, r2
     f40:	d0fc      	beq.n	f3c <RtcInit+0x30>





    GCLK->GENDIV.reg = GCLK_GENDIV_ID(2) | GCLK_GENDIV_DIV(1);
     f42:	2281      	movs	r2, #129	; 0x81
     f44:	4b1e      	ldr	r3, [pc, #120]	; (fc0 <RtcInit+0xb4>)
     f46:	0052      	lsls	r2, r2, #1
     f48:	609a      	str	r2, [r3, #8]

    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(2) |
     f4a:	4a1e      	ldr	r2, [pc, #120]	; (fc4 <RtcInit+0xb8>)
     f4c:	605a      	str	r2, [r3, #4]
                        GCLK_GENCTRL_SRC(GCLK_GENCTRL_SRC_OSC32K) |
                        GCLK_GENCTRL_IDC |
                        GCLK_GENCTRL_RUNSTDBY |
                        GCLK_GENCTRL_GENEN;
    while (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY);
     f4e:	785a      	ldrb	r2, [r3, #1]
     f50:	b252      	sxtb	r2, r2
     f52:	2a00      	cmp	r2, #0
     f54:	dbfb      	blt.n	f4e <RtcInit+0x42>

// Configure RTC
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(RTC_GCLK_ID) |
     f56:	4a1c      	ldr	r2, [pc, #112]	; (fc8 <RtcInit+0xbc>)
     f58:	4b19      	ldr	r3, [pc, #100]	; (fc0 <RtcInit+0xb4>)
     f5a:	805a      	strh	r2, [r3, #2]
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    RTC->MODE1.CTRL.reg = RTC_MODE1_CTRL_MODE_COUNT16;
     f5c:	2204      	movs	r2, #4
     f5e:	4b1b      	ldr	r3, [pc, #108]	; (fcc <RtcInit+0xc0>)
     f60:	801a      	strh	r2, [r3, #0]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     f62:	7a9a      	ldrb	r2, [r3, #10]
     f64:	4919      	ldr	r1, [pc, #100]	; (fcc <RtcInit+0xc0>)
     f66:	09d2      	lsrs	r2, r2, #7
     f68:	d1fb      	bne.n	f62 <RtcInit+0x56>

// Prescaler needs to be enabled separately from the mode for some reason
    RTC->MODE1.CTRL.reg |= RTC_MODE1_CTRL_PRESCALER_DIV32;
     f6a:	20a0      	movs	r0, #160	; 0xa0
     f6c:	880a      	ldrh	r2, [r1, #0]
     f6e:	00c0      	lsls	r0, r0, #3
     f70:	4302      	orrs	r2, r0
     f72:	800a      	strh	r2, [r1, #0]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     f74:	7a9a      	ldrb	r2, [r3, #10]
     f76:	09d2      	lsrs	r2, r2, #7
     f78:	d1fc      	bne.n	f74 <RtcInit+0x68>

    RTC->MODE1.PER.reg = 998;
     f7a:	4915      	ldr	r1, [pc, #84]	; (fd0 <RtcInit+0xc4>)
     f7c:	4a13      	ldr	r2, [pc, #76]	; (fcc <RtcInit+0xc0>)
     f7e:	8291      	strh	r1, [r2, #20]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     f80:	7a99      	ldrb	r1, [r3, #10]
     f82:	4a12      	ldr	r2, [pc, #72]	; (fcc <RtcInit+0xc0>)
     f84:	09c9      	lsrs	r1, r1, #7
     f86:	d1fb      	bne.n	f80 <RtcInit+0x74>

    RTC->MODE1.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_ADDR(0x10);
     f88:	8851      	ldrh	r1, [r2, #2]
     f8a:	4812      	ldr	r0, [pc, #72]	; (fd4 <RtcInit+0xc8>)
     f8c:	4301      	orrs	r1, r0
     f8e:	8051      	strh	r1, [r2, #2]

    RTC->MODE1.INTENSET.reg = RTC_MODE1_INTENSET_OVF;
     f90:	2180      	movs	r1, #128	; 0x80

    RTC->MODE1.CTRL.bit.ENABLE = 1;
     f92:	2002      	movs	r0, #2
    RTC->MODE1.PER.reg = 998;
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);

    RTC->MODE1.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_ADDR(0x10);

    RTC->MODE1.INTENSET.reg = RTC_MODE1_INTENSET_OVF;
     f94:	71d1      	strb	r1, [r2, #7]

    RTC->MODE1.CTRL.bit.ENABLE = 1;
     f96:	8811      	ldrh	r1, [r2, #0]
     f98:	4301      	orrs	r1, r0
     f9a:	8011      	strh	r1, [r2, #0]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     f9c:	7a9a      	ldrb	r2, [r3, #10]
     f9e:	09d2      	lsrs	r2, r2, #7
     fa0:	d1fc      	bne.n	f9c <RtcInit+0x90>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     fa2:	4b0d      	ldr	r3, [pc, #52]	; (fd8 <RtcInit+0xcc>)
     fa4:	3208      	adds	r2, #8
     fa6:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(RTC_IRQn);
}
     fa8:	4770      	bx	lr
     faa:	46c0      	nop			; (mov r8, r8)
     fac:	40000800 	.word	0x40000800
     fb0:	00000606 	.word	0x00000606
     fb4:	ff80ffff 	.word	0xff80ffff
     fb8:	00806024 	.word	0x00806024
     fbc:	00000604 	.word	0x00000604
     fc0:	40000c00 	.word	0x40000c00
     fc4:	00230002 	.word	0x00230002
     fc8:	00004204 	.word	0x00004204
     fcc:	40001400 	.word	0x40001400
     fd0:	000003e6 	.word	0x000003e6
     fd4:	00004010 	.word	0x00004010
     fd8:	e000e100 	.word	0xe000e100

00000fdc <gclkEnable>:


void gclkEnable(u32_t id, u32_t src, u32_t div) {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
     fdc:	230f      	movs	r3, #15
     fde:	4018      	ands	r0, r3
     fe0:	4b08      	ldr	r3, [pc, #32]	; (1004 <gclkEnable+0x28>)
     fe2:	0212      	lsls	r2, r2, #8
     fe4:	401a      	ands	r2, r3
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     fe6:	23f8      	movs	r3, #248	; 0xf8
     fe8:	0209      	lsls	r1, r1, #8
     fea:	015b      	lsls	r3, r3, #5
     fec:	4019      	ands	r1, r3
     fee:	2380      	movs	r3, #128	; 0x80

    NVIC_EnableIRQ(RTC_IRQn);
}


void gclkEnable(u32_t id, u32_t src, u32_t div) {
     ff0:	b510      	push	{r4, lr}
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     ff2:	025b      	lsls	r3, r3, #9
    NVIC_EnableIRQ(RTC_IRQn);
}


void gclkEnable(u32_t id, u32_t src, u32_t div) {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
     ff4:	4c04      	ldr	r4, [pc, #16]	; (1008 <gclkEnable+0x2c>)
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     ff6:	4319      	orrs	r1, r3
    NVIC_EnableIRQ(RTC_IRQn);
}


void gclkEnable(u32_t id, u32_t src, u32_t div) {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
     ff8:	4302      	orrs	r2, r0
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     ffa:	4308      	orrs	r0, r1
    NVIC_EnableIRQ(RTC_IRQn);
}


void gclkEnable(u32_t id, u32_t src, u32_t div) {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
     ffc:	60a2      	str	r2, [r4, #8]
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     ffe:	6060      	str	r0, [r4, #4]
}
    1000:	bd10      	pop	{r4, pc}
    1002:	46c0      	nop			; (mov r8, r8)
    1004:	00ffff00 	.word	0x00ffff00
    1008:	40000c00 	.word	0x40000c00

0000100c <GclkInit>:
}

void GclkInit(u8_t clk_system) {


    SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    100c:	23c2      	movs	r3, #194	; 0xc2
                           SYSCTRL_INTFLAG_DFLLRDY;
    NVMCTRL->CTRLB.bit.RWS = 2;
    100e:	211e      	movs	r1, #30
void gclk_enable(uint32_t id, uint32_t src, uint32_t div) {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
}

void GclkInit(u8_t clk_system) {
    1010:	b570      	push	{r4, r5, r6, lr}


    SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    1012:	4c12      	ldr	r4, [pc, #72]	; (105c <GclkInit+0x50>)
                           SYSCTRL_INTFLAG_DFLLRDY;
    NVMCTRL->CTRLB.bit.RWS = 2;
    1014:	4a12      	ldr	r2, [pc, #72]	; (1060 <GclkInit+0x54>)
}

void GclkInit(u8_t clk_system) {


    SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    1016:	00db      	lsls	r3, r3, #3
    1018:	60a3      	str	r3, [r4, #8]
                           SYSCTRL_INTFLAG_DFLLRDY;
    NVMCTRL->CTRLB.bit.RWS = 2;
    101a:	6853      	ldr	r3, [r2, #4]
void gclk_enable(uint32_t id, uint32_t src, uint32_t div) {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
}

void GclkInit(u8_t clk_system) {
    101c:	0005      	movs	r5, r0


    SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
                           SYSCTRL_INTFLAG_DFLLRDY;
    NVMCTRL->CTRLB.bit.RWS = 2;
    101e:	438b      	bics	r3, r1
    1020:	391a      	subs	r1, #26
    1022:	430b      	orrs	r3, r1
    1024:	6053      	str	r3, [r2, #4]

    // Initialize GCLK
    PM->APBAMASK.reg |= PM_APBAMASK_GCLK;
    1026:	4a0f      	ldr	r2, [pc, #60]	; (1064 <GclkInit+0x58>)
    1028:	3104      	adds	r1, #4
    102a:	6993      	ldr	r3, [r2, #24]
    102c:	430b      	orrs	r3, r1
    102e:	6193      	str	r3, [r2, #24]
    GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    1030:	2301      	movs	r3, #1
    1032:	4a0d      	ldr	r2, [pc, #52]	; (1068 <GclkInit+0x5c>)
    1034:	7013      	strb	r3, [r2, #0]
    while (GCLK->CTRL.reg & GCLK_CTRL_SWRST);
    1036:	7811      	ldrb	r1, [r2, #0]
    1038:	4219      	tst	r1, r3
    103a:	d1fc      	bne.n	1036 <GclkInit+0x2a>

    // Disable ONDEMAND mode while writing configurations (errata 9905)
    SYSCTRL->DFLLCTRL.reg = dfll_ctrl & ~SYSCTRL_DFLLCTRL_ONDEMAND;
    103c:	4b0b      	ldr	r3, [pc, #44]	; (106c <GclkInit+0x60>)
    dfll_wait_for_sync();
    103e:	4e0c      	ldr	r6, [pc, #48]	; (1070 <GclkInit+0x64>)
    PM->APBAMASK.reg |= PM_APBAMASK_GCLK;
    GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    while (GCLK->CTRL.reg & GCLK_CTRL_SWRST);

    // Disable ONDEMAND mode while writing configurations (errata 9905)
    SYSCTRL->DFLLCTRL.reg = dfll_ctrl & ~SYSCTRL_DFLLCTRL_ONDEMAND;
    1040:	84a3      	strh	r3, [r4, #36]	; 0x24
    dfll_wait_for_sync();
    1042:	47b0      	blx	r6
    SYSCTRL->DFLLVAL.reg = dfll_nvm_val();
    1044:	4b0b      	ldr	r3, [pc, #44]	; (1074 <GclkInit+0x68>)
    1046:	4798      	blx	r3
    1048:	62a0      	str	r0, [r4, #40]	; 0x28
    dfll_wait_for_sync();
    104a:	47b0      	blx	r6
    SYSCTRL->DFLLCTRL.reg = dfll_ctrl;
    104c:	4b0a      	ldr	r3, [pc, #40]	; (1078 <GclkInit+0x6c>)


    //For generic clock generator 0, select the DFLL48 Clock as input
    gclk_enable(clk_system, GCLK_SOURCE_DFLL48M, 1);
    104e:	0028      	movs	r0, r5
    // Disable ONDEMAND mode while writing configurations (errata 9905)
    SYSCTRL->DFLLCTRL.reg = dfll_ctrl & ~SYSCTRL_DFLLCTRL_ONDEMAND;
    dfll_wait_for_sync();
    SYSCTRL->DFLLVAL.reg = dfll_nvm_val();
    dfll_wait_for_sync();
    SYSCTRL->DFLLCTRL.reg = dfll_ctrl;
    1050:	84a3      	strh	r3, [r4, #36]	; 0x24


    //For generic clock generator 0, select the DFLL48 Clock as input
    gclk_enable(clk_system, GCLK_SOURCE_DFLL48M, 1);
    1052:	2201      	movs	r2, #1
    1054:	2107      	movs	r1, #7
    1056:	4b09      	ldr	r3, [pc, #36]	; (107c <GclkInit+0x70>)
    1058:	4798      	blx	r3
}
    105a:	bd70      	pop	{r4, r5, r6, pc}
    105c:	40000800 	.word	0x40000800
    1060:	41004000 	.word	0x41004000
    1064:	40000400 	.word	0x40000400
    1068:	40000c00 	.word	0x40000c00
    106c:	00000502 	.word	0x00000502
    1070:	00000efd 	.word	0x00000efd
    1074:	00000ec9 	.word	0x00000ec9
    1078:	00000582 	.word	0x00000582
    107c:	00000fdd 	.word	0x00000fdd

00001080 <delayInit>:


void delayInit(void) {
    cycles_per_ms = 48000000UL;
    cycles_per_ms /= 1000;
    cycles_per_us = cycles_per_ms / 1000;
    1080:	2230      	movs	r2, #48	; 0x30
}


void delayInit(void) {
    cycles_per_ms = 48000000UL;
    cycles_per_ms /= 1000;
    1082:	4b06      	ldr	r3, [pc, #24]	; (109c <delayInit+0x1c>)
    cycles_per_us = cycles_per_ms / 1000;
    1084:	4906      	ldr	r1, [pc, #24]	; (10a0 <delayInit+0x20>)
    1086:	c306      	stmia	r3!, {r1, r2}
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
    1088:	4a06      	ldr	r2, [pc, #24]	; (10a4 <delayInit+0x24>)
    108a:	6a13      	ldr	r3, [r2, #32]
    108c:	021b      	lsls	r3, r3, #8
    108e:	0a1b      	lsrs	r3, r3, #8
    1090:	6213      	str	r3, [r2, #32]

    NVIC_SetPriority(SysTick_IRQn, 0x0);

    SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    1092:	2205      	movs	r2, #5
    1094:	4b04      	ldr	r3, [pc, #16]	; (10a8 <delayInit+0x28>)
    1096:	601a      	str	r2, [r3, #0]
}
    1098:	4770      	bx	lr
    109a:	46c0      	nop			; (mov r8, r8)
    109c:	20000004 	.word	0x20000004
    10a0:	0000bb80 	.word	0x0000bb80
    10a4:	e000ed00 	.word	0xe000ed00
    10a8:	e000e010 	.word	0xe000e010

000010ac <delay_us>:
/**
 * \brief Delay loop to delay at least n number of microseconds
 *
 * \param n  Number of microseconds to wait
 */
void delay_us(uint32_t n) {
    10ac:	b570      	push	{r4, r5, r6, lr}
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
        SysTick->VAL = 0;

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    10ae:	2480      	movs	r4, #128	; 0x80

static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
        SysTick->VAL = 0;
    10b0:	2100      	movs	r1, #0
    while (n--) {
        /* Devide up to blocks of 10u */
        delay_cycles(cycles_per_us);
    10b2:	4b08      	ldr	r3, [pc, #32]	; (10d4 <delay_us+0x28>)


static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
    10b4:	4a08      	ldr	r2, [pc, #32]	; (10d8 <delay_us+0x2c>)
    10b6:	685b      	ldr	r3, [r3, #4]
        SysTick->VAL = 0;

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    10b8:	0264      	lsls	r4, r4, #9
 * \brief Delay loop to delay at least n number of microseconds
 *
 * \param n  Number of microseconds to wait
 */
void delay_us(uint32_t n) {
    while (n--) {
    10ba:	3801      	subs	r0, #1
    10bc:	d308      	bcc.n	10d0 <delay_us+0x24>



static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
    10be:	2b00      	cmp	r3, #0
    10c0:	d0fb      	beq.n	10ba <delay_us+0xe>
    10c2:	4e05      	ldr	r6, [pc, #20]	; (10d8 <delay_us+0x2c>)
        SysTick->LOAD = n;
    10c4:	6053      	str	r3, [r2, #4]
        SysTick->VAL = 0;
    10c6:	6091      	str	r1, [r2, #8]

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    10c8:	6835      	ldr	r5, [r6, #0]
    10ca:	4225      	tst	r5, r4
    10cc:	d0fc      	beq.n	10c8 <delay_us+0x1c>
    10ce:	e7f4      	b.n	10ba <delay_us+0xe>
        /* Devide up to blocks of 10u */
        delay_cycles(cycles_per_us);
    }
}
    10d0:	bd70      	pop	{r4, r5, r6, pc}
    10d2:	46c0      	nop			; (mov r8, r8)
    10d4:	20000004 	.word	0x20000004
    10d8:	e000e010 	.word	0xe000e010

000010dc <SysTick_Handler>:


void SysTick_Handler(void) {
    //g_msTicks++;
}
    10dc:	4770      	bx	lr
	...

000010e0 <delay_ms>:
/**
 * \brief Delay loop to delay at least n number of milliseconds
 *
 * \param n  Number of milliseconds to wait
 */
void delay_ms(uint32_t n) {
    10e0:	b570      	push	{r4, r5, r6, lr}
    10e2:	2480      	movs	r4, #128	; 0x80

static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
        SysTick->VAL = 0;
    10e4:	2100      	movs	r1, #0
    while (n--) {
        /* Devide up to blocks of 1ms */
        delay_cycles(cycles_per_ms);
    10e6:	4b08      	ldr	r3, [pc, #32]	; (1108 <delay_ms+0x28>)


static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
    10e8:	4a08      	ldr	r2, [pc, #32]	; (110c <delay_ms+0x2c>)
    10ea:	681b      	ldr	r3, [r3, #0]
        SysTick->VAL = 0;

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    10ec:	0264      	lsls	r4, r4, #9
 * \brief Delay loop to delay at least n number of milliseconds
 *
 * \param n  Number of milliseconds to wait
 */
void delay_ms(uint32_t n) {
    while (n--) {
    10ee:	3801      	subs	r0, #1
    10f0:	d308      	bcc.n	1104 <delay_ms+0x24>



static inline void delay_cycles(
    const uint32_t n) {
    if (n > 0) {
    10f2:	2b00      	cmp	r3, #0
    10f4:	d0fb      	beq.n	10ee <delay_ms+0xe>
    10f6:	4e05      	ldr	r6, [pc, #20]	; (110c <delay_ms+0x2c>)
        SysTick->LOAD = n;
    10f8:	6053      	str	r3, [r2, #4]
        SysTick->VAL = 0;
    10fa:	6091      	str	r1, [r2, #8]

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    10fc:	6835      	ldr	r5, [r6, #0]
    10fe:	4225      	tst	r5, r4
    1100:	d0fc      	beq.n	10fc <delay_ms+0x1c>
    1102:	e7f4      	b.n	10ee <delay_ms+0xe>
        /* Devide up to blocks of 1ms */
        delay_cycles(cycles_per_ms);
    }
}
    1104:	bd70      	pop	{r4, r5, r6, pc}
    1106:	46c0      	nop			; (mov r8, r8)
    1108:	20000004 	.word	0x20000004
    110c:	e000e010 	.word	0xe000e010

00001110 <RTC_Handler>:


volatile uint32_t time_ms = 0;

void RTC_Handler(void) {
    time_ms += 1000;
    1110:	21fa      	movs	r1, #250	; 0xfa
    1112:	4a04      	ldr	r2, [pc, #16]	; (1124 <RTC_Handler+0x14>)
    1114:	0089      	lsls	r1, r1, #2
    1116:	6813      	ldr	r3, [r2, #0]
    1118:	185b      	adds	r3, r3, r1
    111a:	6013      	str	r3, [r2, #0]
    RTC->MODE1.INTFLAG.reg = 0xFF;
    111c:	22ff      	movs	r2, #255	; 0xff
    111e:	4b02      	ldr	r3, [pc, #8]	; (1128 <RTC_Handler+0x18>)
    1120:	721a      	strb	r2, [r3, #8]
}
    1122:	4770      	bx	lr
    1124:	200000f4 	.word	0x200000f4
    1128:	40001400 	.word	0x40001400

0000112c <millis>:

uint32_t millis(void) {
    112c:	b530      	push	{r4, r5, lr}
    uint32_t ms;
    ATOMIC_SECTION_ENTER
    112e:	f3ef 8110 	mrs	r1, PRIMASK
    1132:	b672      	cpsid	i
    ms = time_ms + RTC->MODE1.COUNT.reg;
    1134:	4a08      	ldr	r2, [pc, #32]	; (1158 <millis+0x2c>)
    1136:	4d09      	ldr	r5, [pc, #36]	; (115c <millis+0x30>)
    1138:	8a10      	ldrh	r0, [r2, #16]
    113a:	682b      	ldr	r3, [r5, #0]
    if (RTC->MODE1.INTFLAG.bit.OVF)
    113c:	7a14      	ldrb	r4, [r2, #8]
}

uint32_t millis(void) {
    uint32_t ms;
    ATOMIC_SECTION_ENTER
    ms = time_ms + RTC->MODE1.COUNT.reg;
    113e:	b280      	uxth	r0, r0
    if (RTC->MODE1.INTFLAG.bit.OVF)
    1140:	09e4      	lsrs	r4, r4, #7
    1142:	d004      	beq.n	114e <millis+0x22>
        ms = time_ms + RTC->MODE1.COUNT.reg + 1000;
    1144:	8a13      	ldrh	r3, [r2, #16]
    1146:	22fa      	movs	r2, #250	; 0xfa
    1148:	6828      	ldr	r0, [r5, #0]
    114a:	0092      	lsls	r2, r2, #2
    114c:	1880      	adds	r0, r0, r2
    114e:	18c0      	adds	r0, r0, r3
    ATOMIC_SECTION_LEAVE
    1150:	f381 8810 	msr	PRIMASK, r1
    return ms;
}
    1154:	bd30      	pop	{r4, r5, pc}
    1156:	46c0      	nop			; (mov r8, r8)
    1158:	40001400 	.word	0x40001400
    115c:	200000f4 	.word	0x200000f4

00001160 <TC4Init>:

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC4_GCLK_ID) |
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC4;
    1160:	2180      	movs	r1, #128	; 0x80
    return ms;
}

void TC4Init() {

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC4_GCLK_ID) |
    1162:	4a0d      	ldr	r2, [pc, #52]	; (1198 <TC4Init+0x38>)
    1164:	4b0d      	ldr	r3, [pc, #52]	; (119c <TC4Init+0x3c>)
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC4;
    1166:	0149      	lsls	r1, r1, #5
    return ms;
}

void TC4Init() {

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC4_GCLK_ID) |
    1168:	805a      	strh	r2, [r3, #2]
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC4;
    116a:	4a0d      	ldr	r2, [pc, #52]	; (11a0 <TC4Init+0x40>)
    116c:	6a13      	ldr	r3, [r2, #32]
    116e:	430b      	orrs	r3, r1
    1170:	6213      	str	r3, [r2, #32]

    TC4->COUNT8.CTRLA.reg = TC_CTRLA_MODE_COUNT8 |
    1172:	4b0c      	ldr	r3, [pc, #48]	; (11a4 <TC4Init+0x44>)
    1174:	4a0c      	ldr	r2, [pc, #48]	; (11a8 <TC4Init+0x48>)

    TC4->COUNT8.INTENSET.reg = TC_INTENSET_OVF;

    TC4->COUNT8.EVCTRL.reg = TC_EVCTRL_OVFEO;

    TC4->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
    1176:	2102      	movs	r1, #2
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC4;

    TC4->COUNT8.CTRLA.reg = TC_CTRLA_MODE_COUNT8 |
    1178:	801a      	strh	r2, [r3, #0]
                            TC_CTRLA_RUNSTDBY |
                            TC_CTRLA_PRESCALER_DIV2;
    TC4->COUNT8.PER.reg = 0x50;
    117a:	2250      	movs	r2, #80	; 0x50
    117c:	751a      	strb	r2, [r3, #20]

    TC4->COUNT8.INTENSET.reg = TC_INTENSET_OVF;
    117e:	3a4f      	subs	r2, #79	; 0x4f
    1180:	735a      	strb	r2, [r3, #13]

    TC4->COUNT8.EVCTRL.reg = TC_EVCTRL_OVFEO;
    1182:	32ff      	adds	r2, #255	; 0xff
    1184:	815a      	strh	r2, [r3, #10]

    TC4->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
    1186:	881a      	ldrh	r2, [r3, #0]
    1188:	430a      	orrs	r2, r1
    118a:	801a      	strh	r2, [r3, #0]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
    118c:	2280      	movs	r2, #128	; 0x80
    118e:	4b07      	ldr	r3, [pc, #28]	; (11ac <TC4Init+0x4c>)
    1190:	0312      	lsls	r2, r2, #12
    1192:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(TC4_IRQn);
}
    1194:	4770      	bx	lr
    1196:	46c0      	nop			; (mov r8, r8)
    1198:	0000421c 	.word	0x0000421c
    119c:	40000c00 	.word	0x40000c00
    11a0:	40000400 	.word	0x40000400
    11a4:	42003000 	.word	0x42003000
    11a8:	00000904 	.word	0x00000904
    11ac:	e000e100 	.word	0xe000e100

000011b0 <TC4_Handler>:

void TC4_Handler( void ) {
    TC4->COUNT8.INTFLAG.reg = 0xFF;
    11b0:	22ff      	movs	r2, #255	; 0xff
    TC4->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;

    NVIC_EnableIRQ(TC4_IRQn);
}

void TC4_Handler( void ) {
    11b2:	b510      	push	{r4, lr}
    TC4->COUNT8.INTFLAG.reg = 0xFF;
    11b4:	4b02      	ldr	r3, [pc, #8]	; (11c0 <TC4_Handler+0x10>)
    11b6:	739a      	strb	r2, [r3, #14]
    //pinToggle(TxPo);
    pullSample();
    11b8:	4b02      	ldr	r3, [pc, #8]	; (11c4 <TC4_Handler+0x14>)
    11ba:	4798      	blx	r3
}
    11bc:	bd10      	pop	{r4, pc}
    11be:	46c0      	nop			; (mov r8, r8)
    11c0:	42003000 	.word	0x42003000
    11c4:	000027b5 	.word	0x000027b5

000011c8 <TC5Init>:

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC5_GCLK_ID) |
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC5;
    11c8:	2180      	movs	r1, #128	; 0x80
    pullSample();
}

void TC5Init() {

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC5_GCLK_ID) |
    11ca:	4a0d      	ldr	r2, [pc, #52]	; (1200 <TC5Init+0x38>)
    11cc:	4b0d      	ldr	r3, [pc, #52]	; (1204 <TC5Init+0x3c>)
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC5;
    11ce:	0189      	lsls	r1, r1, #6
    pullSample();
}

void TC5Init() {

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC5_GCLK_ID) |
    11d0:	805a      	strh	r2, [r3, #2]
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC5;
    11d2:	4a0d      	ldr	r2, [pc, #52]	; (1208 <TC5Init+0x40>)
    11d4:	6a13      	ldr	r3, [r2, #32]
    11d6:	430b      	orrs	r3, r1
    11d8:	6213      	str	r3, [r2, #32]

    TC5->COUNT8.CTRLA.reg = TC_CTRLA_MODE_COUNT8 |
    11da:	4b0c      	ldr	r3, [pc, #48]	; (120c <TC5Init+0x44>)
    11dc:	4a0c      	ldr	r2, [pc, #48]	; (1210 <TC5Init+0x48>)

    TC5->COUNT8.INTENSET.reg = TC_INTENSET_OVF;

    TC5->COUNT8.EVCTRL.reg = TC_EVCTRL_OVFEO;

    TC5->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
    11de:	2102      	movs	r1, #2
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC5;

    TC5->COUNT8.CTRLA.reg = TC_CTRLA_MODE_COUNT8 |
    11e0:	801a      	strh	r2, [r3, #0]
                            TC_CTRLA_PRESCALER_DIV16;

    u16_t logSpeed = 20; //Hz
    u8_t PER_Reg = (long)((32768/16) / logSpeed);

    TC5->COUNT8.PER.reg = PER_Reg;
    11e2:	2266      	movs	r2, #102	; 0x66
    11e4:	751a      	strb	r2, [r3, #20]

    TC5->COUNT8.INTENSET.reg = TC_INTENSET_OVF;
    11e6:	3a65      	subs	r2, #101	; 0x65
    11e8:	735a      	strb	r2, [r3, #13]

    TC5->COUNT8.EVCTRL.reg = TC_EVCTRL_OVFEO;
    11ea:	32ff      	adds	r2, #255	; 0xff
    11ec:	815a      	strh	r2, [r3, #10]

    TC5->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
    11ee:	881a      	ldrh	r2, [r3, #0]
    11f0:	430a      	orrs	r2, r1
    11f2:	801a      	strh	r2, [r3, #0]
    11f4:	2280      	movs	r2, #128	; 0x80
    11f6:	4b07      	ldr	r3, [pc, #28]	; (1214 <TC5Init+0x4c>)
    11f8:	0352      	lsls	r2, r2, #13
    11fa:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(TC5_IRQn);
}
    11fc:	4770      	bx	lr
    11fe:	46c0      	nop			; (mov r8, r8)
    1200:	0000421c 	.word	0x0000421c
    1204:	40000c00 	.word	0x40000c00
    1208:	40000400 	.word	0x40000400
    120c:	42003400 	.word	0x42003400
    1210:	00000c04 	.word	0x00000c04
    1214:	e000e100 	.word	0xe000e100

00001218 <TC5_Handler>:

void TC5_Handler( void ) {
    TC5->COUNT8.INTFLAG.reg = 0xFF;
    1218:	22ff      	movs	r2, #255	; 0xff
    121a:	4b03      	ldr	r3, [pc, #12]	; (1228 <TC5_Handler+0x10>)
    121c:	739a      	strb	r2, [r3, #14]
    writeLog = true;
    121e:	4b03      	ldr	r3, [pc, #12]	; (122c <TC5_Handler+0x14>)
    1220:	3afe      	subs	r2, #254	; 0xfe
    1222:	701a      	strb	r2, [r3, #0]
}
    1224:	4770      	bx	lr
    1226:	46c0      	nop			; (mov r8, r8)
    1228:	42003400 	.word	0x42003400
    122c:	2000015a 	.word	0x2000015a

00001230 <flight>:
#include <util.h>
#include <boardDefines.h>

void flight() {
    1230:	b570      	push	{r4, r5, r6, lr}

    switch(flightState) {
    1232:	4c65      	ldr	r4, [pc, #404]	; (13c8 <flight+0x198>)
    1234:	7820      	ldrb	r0, [r4, #0]
    1236:	280a      	cmp	r0, #10
    1238:	d900      	bls.n	123c <flight+0xc>
    123a:	e0b7      	b.n	13ac <flight+0x17c>
    123c:	f002 ff98 	bl	4170 <__gnu_thumb1_case_uqi>
    1240:	724f2f06 	.word	0x724f2f06
    1244:	9378b6b6 	.word	0x9378b6b6
    1248:	b6a7      	.short	0xb6a7
    124a:	72          	.byte	0x72
    124b:	00          	.byte	0x00
    case flightStatrup:

        updateGround( );
    124c:	4b5f      	ldr	r3, [pc, #380]	; (13cc <flight+0x19c>)
    124e:	4798      	blx	r3

        if ((millis() - startupTick) > 10000) {
    1250:	4e5f      	ldr	r6, [pc, #380]	; (13d0 <flight+0x1a0>)
    1252:	47b0      	blx	r6
    1254:	4d5f      	ldr	r5, [pc, #380]	; (13d4 <flight+0x1a4>)
    1256:	682b      	ldr	r3, [r5, #0]
    1258:	1ac0      	subs	r0, r0, r3
    125a:	4b5f      	ldr	r3, [pc, #380]	; (13d8 <flight+0x1a8>)
    125c:	4298      	cmp	r0, r3
    125e:	d90d      	bls.n	127c <flight+0x4c>
            findNewFlightStart();
    1260:	4b5e      	ldr	r3, [pc, #376]	; (13dc <flight+0x1ac>)
    1262:	4798      	blx	r3
            startupJingle();
    1264:	4b5e      	ldr	r3, [pc, #376]	; (13e0 <flight+0x1b0>)
    1266:	4798      	blx	r3
            startupTick = millis();
    1268:	47b0      	blx	r6
            flightState = flightTest;
    126a:	230a      	movs	r3, #10
    126c:	7023      	strb	r3, [r4, #0]
            //flightState = flightPad;
            if (flightState == flightTest) {
                writeFlightStartAddress();
    126e:	4b5d      	ldr	r3, [pc, #372]	; (13e4 <flight+0x1b4>)
        updateGround( );

        if ((millis() - startupTick) > 10000) {
            findNewFlightStart();
            startupJingle();
            startupTick = millis();
    1270:	6028      	str	r0, [r5, #0]
            flightState = flightTest;
            //flightState = flightPad;
            if (flightState == flightTest) {
                writeFlightStartAddress();
    1272:	4798      	blx	r3
                logFlight( );
    1274:	4b5c      	ldr	r3, [pc, #368]	; (13e8 <flight+0x1b8>)
    1276:	4798      	blx	r3
                logEvent('L');
    1278:	204c      	movs	r0, #76	; 0x4c
    127a:	e071      	b.n	1360 <flight+0x130>
            }

            break;
        }

        attemptConnection();
    127c:	4b5b      	ldr	r3, [pc, #364]	; (13ec <flight+0x1bc>)
    127e:	4798      	blx	r3

        if (unplugged()) {
    1280:	4b5b      	ldr	r3, [pc, #364]	; (13f0 <flight+0x1c0>)
    1282:	4798      	blx	r3
    1284:	2800      	cmp	r0, #0
    1286:	d100      	bne.n	128a <flight+0x5a>
    1288:	e090      	b.n	13ac <flight+0x17c>
            flightState = flightIdle;
    128a:	2301      	movs	r3, #1
    128c:	7023      	strb	r3, [r4, #0]
            unpluggedJingle();
    128e:	4b59      	ldr	r3, [pc, #356]	; (13f4 <flight+0x1c4>)
    1290:	4798      	blx	r3
            delay_ms(1000);
    1292:	20fa      	movs	r0, #250	; 0xfa
    1294:	4b58      	ldr	r3, [pc, #352]	; (13f8 <flight+0x1c8>)
    1296:	0080      	lsls	r0, r0, #2
    1298:	4798      	blx	r3
            shutDown();
    129a:	4b58      	ldr	r3, [pc, #352]	; (13fc <flight+0x1cc>)
    129c:	e075      	b.n	138a <flight+0x15a>
        break;
    case flightIdle:
        //TC4->COUNT8.CTRLA.reg = 0;
        //TC5->COUNT8.CTRLA.reg = 0;

        if (millis() - offsets.groundBeep > 2000) {
    129e:	4e4c      	ldr	r6, [pc, #304]	; (13d0 <flight+0x1a0>)
    12a0:	47b0      	blx	r6
    12a2:	4d57      	ldr	r5, [pc, #348]	; (1400 <flight+0x1d0>)
    12a4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    12a6:	1ac0      	subs	r0, r0, r3
    12a8:	23fa      	movs	r3, #250	; 0xfa
    12aa:	00db      	lsls	r3, r3, #3
    12ac:	4298      	cmp	r0, r3
    12ae:	d905      	bls.n	12bc <flight+0x8c>
            offsets.groundBeep = millis();
    12b0:	47b0      	blx	r6
    12b2:	6328      	str	r0, [r5, #48]	; 0x30
            beep(400);
    12b4:	20c8      	movs	r0, #200	; 0xc8
    12b6:	4b53      	ldr	r3, [pc, #332]	; (1404 <flight+0x1d4>)
    12b8:	0040      	lsls	r0, r0, #1
    12ba:	4798      	blx	r3
        }

        if (sercom(USART3)->SPI.INTFLAG.bit.RXC == 1) {
    12bc:	4b52      	ldr	r3, [pc, #328]	; (1408 <flight+0x1d8>)
    12be:	7e1b      	ldrb	r3, [r3, #24]
    12c0:	075b      	lsls	r3, r3, #29
    12c2:	d573      	bpl.n	13ac <flight+0x17c>
            u8_t possibleReset = usartDataIn(USART3);
    12c4:	2003      	movs	r0, #3
    12c6:	4b51      	ldr	r3, [pc, #324]	; (140c <flight+0x1dc>)
    12c8:	4798      	blx	r3
            if (possibleReset == 0x52) {
    12ca:	2852      	cmp	r0, #82	; 0x52
    12cc:	d16e      	bne.n	13ac <flight+0x17c>
    12ce:	f3bf 8f4f 	dsb	sy
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
    12d2:	4a4f      	ldr	r2, [pc, #316]	; (1410 <flight+0x1e0>)
    12d4:	4b4f      	ldr	r3, [pc, #316]	; (1414 <flight+0x1e4>)
    12d6:	60da      	str	r2, [r3, #12]
    12d8:	f3bf 8f4f 	dsb	sy
    12dc:	e7fe      	b.n	12dc <flight+0xac>
        *  Accel > 2g & vel > 15ft/s
        *		 or
        *  baro alt > 100ft
        */

        updateGround();
    12de:	4b3b      	ldr	r3, [pc, #236]	; (13cc <flight+0x19c>)
    12e0:	4798      	blx	r3

        if (writeLog) {
    12e2:	4b4d      	ldr	r3, [pc, #308]	; (1418 <flight+0x1e8>)
    12e4:	781b      	ldrb	r3, [r3, #0]
    12e6:	2b00      	cmp	r3, #0
    12e8:	d005      	beq.n	12f6 <flight+0xc6>
            logSensors( );
    12ea:	4b4c      	ldr	r3, [pc, #304]	; (141c <flight+0x1ec>)
    12ec:	4798      	blx	r3
}


inline static void pinToggle(Pin p) {
    PORT->Group[p.group].OUTTGL.reg = (1<<p.pin);
    12ee:	2280      	movs	r2, #128	; 0x80
    12f0:	4b4b      	ldr	r3, [pc, #300]	; (1420 <flight+0x1f0>)
    12f2:	0352      	lsls	r2, r2, #13
    12f4:	61da      	str	r2, [r3, #28]
            pinToggle(LedPin);
        }


        //if ((( velocity > 15) && (accel > 2)) | (altitudeAGL() > 100)) {
        if ((accel > 2)) {
    12f6:	2380      	movs	r3, #128	; 0x80
    12f8:	494a      	ldr	r1, [pc, #296]	; (1424 <flight+0x1f4>)
    12fa:	2200      	movs	r2, #0
    12fc:	6808      	ldr	r0, [r1, #0]
    12fe:	6849      	ldr	r1, [r1, #4]
    1300:	05db      	lsls	r3, r3, #23
    1302:	4d49      	ldr	r5, [pc, #292]	; (1428 <flight+0x1f8>)
    1304:	47a8      	blx	r5
    1306:	2800      	cmp	r0, #0
    1308:	d050      	beq.n	13ac <flight+0x17c>
            flightState = flightBoost;
    130a:	2303      	movs	r3, #3
    130c:	7023      	strb	r3, [r4, #0]
            writeFlightStartAddress();
    130e:	4b35      	ldr	r3, [pc, #212]	; (13e4 <flight+0x1b4>)
    1310:	4798      	blx	r3
            logFlight( );
    1312:	4b35      	ldr	r3, [pc, #212]	; (13e8 <flight+0x1b8>)
    1314:	4798      	blx	r3
            writeGroundLog();
    1316:	4b45      	ldr	r3, [pc, #276]	; (142c <flight+0x1fc>)
    1318:	4798      	blx	r3
            logEvent('L');
    131a:	204c      	movs	r0, #76	; 0x4c
    131c:	4b44      	ldr	r3, [pc, #272]	; (1430 <flight+0x200>)
    131e:	4798      	blx	r3
            beep(100);
    1320:	2064      	movs	r0, #100	; 0x64
    1322:	e041      	b.n	13a8 <flight+0x178>
        /*
        *	boost to fast
        *		while
        *	Accel > 1/4G
        */
        if (writeLog) {
    1324:	4b3c      	ldr	r3, [pc, #240]	; (1418 <flight+0x1e8>)
    1326:	781b      	ldrb	r3, [r3, #0]
    1328:	2b00      	cmp	r3, #0
    132a:	d03f      	beq.n	13ac <flight+0x17c>
            logSensors( );
    132c:	4b3b      	ldr	r3, [pc, #236]	; (141c <flight+0x1ec>)
    132e:	e02c      	b.n	138a <flight+0x15a>


        break;
    case flightDrogue:

        if (writeLog) {
    1330:	4b39      	ldr	r3, [pc, #228]	; (1418 <flight+0x1e8>)
    1332:	781b      	ldrb	r3, [r3, #0]
    1334:	2b00      	cmp	r3, #0
    1336:	d001      	beq.n	133c <flight+0x10c>
            logSensors( );
    1338:	4b38      	ldr	r3, [pc, #224]	; (141c <flight+0x1ec>)
    133a:	4798      	blx	r3
        }


        if (sample.pressureAltitude < deploymentSettings.MAIN_DEPLOY) {
    133c:	4b3d      	ldr	r3, [pc, #244]	; (1434 <flight+0x204>)
    133e:	8b18      	ldrh	r0, [r3, #24]
    1340:	4b3d      	ldr	r3, [pc, #244]	; (1438 <flight+0x208>)
    1342:	4798      	blx	r3
    1344:	000b      	movs	r3, r1
    1346:	493d      	ldr	r1, [pc, #244]	; (143c <flight+0x20c>)
    1348:	0002      	movs	r2, r0
    134a:	6d88      	ldr	r0, [r1, #88]	; 0x58
    134c:	6dc9      	ldr	r1, [r1, #92]	; 0x5c
    134e:	4d3c      	ldr	r5, [pc, #240]	; (1440 <flight+0x210>)
    1350:	47a8      	blx	r5
    1352:	2800      	cmp	r0, #0
    1354:	d02a      	beq.n	13ac <flight+0x17c>
            flightState = flightMain;
    1356:	2307      	movs	r3, #7
    1358:	7023      	strb	r3, [r4, #0]
            igniteMain();
    135a:	4b3a      	ldr	r3, [pc, #232]	; (1444 <flight+0x214>)
    135c:	4798      	blx	r3
            logEvent('M');
    135e:	204d      	movs	r0, #77	; 0x4d
    1360:	4b33      	ldr	r3, [pc, #204]	; (1430 <flight+0x200>)
    1362:	4798      	blx	r3
    1364:	e022      	b.n	13ac <flight+0x17c>
        }

        break;
    case flightMain:

        if (writeLog) {
    1366:	4b2c      	ldr	r3, [pc, #176]	; (1418 <flight+0x1e8>)
    1368:	781b      	ldrb	r3, [r3, #0]
    136a:	2b00      	cmp	r3, #0
    136c:	d001      	beq.n	1372 <flight+0x142>
            logSensors( );
    136e:	4b2b      	ldr	r3, [pc, #172]	; (141c <flight+0x1ec>)
    1370:	4798      	blx	r3
        }

        if (velocity < 5) {
    1372:	4935      	ldr	r1, [pc, #212]	; (1448 <flight+0x218>)
    1374:	2200      	movs	r2, #0
    1376:	6808      	ldr	r0, [r1, #0]
    1378:	6849      	ldr	r1, [r1, #4]
    137a:	4b34      	ldr	r3, [pc, #208]	; (144c <flight+0x21c>)
    137c:	4d30      	ldr	r5, [pc, #192]	; (1440 <flight+0x210>)
    137e:	47a8      	blx	r5
    1380:	2800      	cmp	r0, #0
    1382:	d013      	beq.n	13ac <flight+0x17c>
            flightState = flightLanded;
    1384:	2308      	movs	r3, #8
    1386:	7023      	strb	r3, [r4, #0]
            finishFlight();
    1388:	4b31      	ldr	r3, [pc, #196]	; (1450 <flight+0x220>)
    138a:	4798      	blx	r3
    138c:	e00e      	b.n	13ac <flight+0x17c>
        }

        break;
    case flightLanded:

        if (millis() - offsets.groundBeep > 2000) {
    138e:	4e10      	ldr	r6, [pc, #64]	; (13d0 <flight+0x1a0>)
    1390:	47b0      	blx	r6
    1392:	4d1b      	ldr	r5, [pc, #108]	; (1400 <flight+0x1d0>)
    1394:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    1396:	1ac0      	subs	r0, r0, r3
    1398:	23fa      	movs	r3, #250	; 0xfa
    139a:	00db      	lsls	r3, r3, #3
    139c:	4298      	cmp	r0, r3
    139e:	d905      	bls.n	13ac <flight+0x17c>
            offsets.groundBeep = millis();
    13a0:	47b0      	blx	r6
    13a2:	6328      	str	r0, [r5, #48]	; 0x30
            beep(400);
    13a4:	20c8      	movs	r0, #200	; 0xc8
    13a6:	0040      	lsls	r0, r0, #1
    13a8:	4b16      	ldr	r3, [pc, #88]	; (1404 <flight+0x1d4>)
    13aa:	4798      	blx	r3
        break;
    }



    if ((flightState != flightStatrup) & (flightState != flightIdle) & (flightState != flightPad) & unplugged()) {
    13ac:	2302      	movs	r3, #2
    13ae:	7824      	ldrb	r4, [r4, #0]
    13b0:	42a3      	cmp	r3, r4
    13b2:	41a4      	sbcs	r4, r4
    13b4:	4b0e      	ldr	r3, [pc, #56]	; (13f0 <flight+0x1c0>)
    13b6:	4264      	negs	r4, r4
    13b8:	4798      	blx	r3
    13ba:	2800      	cmp	r0, #0
    13bc:	d003      	beq.n	13c6 <flight+0x196>
    13be:	2c00      	cmp	r4, #0
    13c0:	d001      	beq.n	13c6 <flight+0x196>
        finishFlight();
    13c2:	4b23      	ldr	r3, [pc, #140]	; (1450 <flight+0x220>)
    13c4:	4798      	blx	r3
    }

    13c6:	bd70      	pop	{r4, r5, r6, pc}
    13c8:	2000016c 	.word	0x2000016c
    13cc:	00001455 	.word	0x00001455
    13d0:	0000112d 	.word	0x0000112d
    13d4:	2000015c 	.word	0x2000015c
    13d8:	00002710 	.word	0x00002710
    13dc:	000026fd 	.word	0x000026fd
    13e0:	00000e4d 	.word	0x00000e4d
    13e4:	00002649 	.word	0x00002649
    13e8:	00002371 	.word	0x00002371
    13ec:	00002ed5 	.word	0x00002ed5
    13f0:	00000b51 	.word	0x00000b51
    13f4:	00000e85 	.word	0x00000e85
    13f8:	000010e1 	.word	0x000010e1
    13fc:	00000b85 	.word	0x00000b85
    1400:	20000108 	.word	0x20000108
    1404:	00000e11 	.word	0x00000e11
    1408:	42001400 	.word	0x42001400
    140c:	00002c71 	.word	0x00002c71
    1410:	05fa0004 	.word	0x05fa0004
    1414:	e000ed00 	.word	0xe000ed00
    1418:	2000015a 	.word	0x2000015a
    141c:	00002421 	.word	0x00002421
    1420:	41004400 	.word	0x41004400
    1424:	200002d8 	.word	0x200002d8
    1428:	000042f1 	.word	0x000042f1
    142c:	000026a1 	.word	0x000026a1
    1430:	000023cd 	.word	0x000023cd
    1434:	20000140 	.word	0x20000140
    1438:	00006101 	.word	0x00006101
    143c:	20000540 	.word	0x20000540
    1440:	000042c9 	.word	0x000042c9
    1444:	00001745 	.word	0x00001745
    1448:	200002e0 	.word	0x200002e0
    144c:	40140000 	.word	0x40140000
    1450:	00000c09 	.word	0x00000c09

00001454 <updateGround>:
#include <util.h>
#include <altimeter.h>

void updateGround(Altimeter *my_altimeter) {
    1454:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}



    offsets.gravityOffsetBuffer = offsets.gravityOffsetBuffer * 0.8 + sample.accelX * 0.2;
    1456:	4c2b      	ldr	r4, [pc, #172]	; (1504 <updateGround+0xb0>)
    1458:	4d2b      	ldr	r5, [pc, #172]	; (1508 <updateGround+0xb4>)
    145a:	4a2c      	ldr	r2, [pc, #176]	; (150c <updateGround+0xb8>)
    145c:	6920      	ldr	r0, [r4, #16]
    145e:	6961      	ldr	r1, [r4, #20]
    1460:	4b2b      	ldr	r3, [pc, #172]	; (1510 <updateGround+0xbc>)
    1462:	47a8      	blx	r5
    1464:	4b2b      	ldr	r3, [pc, #172]	; (1514 <updateGround+0xc0>)
    1466:	0006      	movs	r6, r0
    1468:	6a58      	ldr	r0, [r3, #36]	; 0x24
    146a:	4b2b      	ldr	r3, [pc, #172]	; (1518 <updateGround+0xc4>)
    146c:	000f      	movs	r7, r1
    146e:	4798      	blx	r3
    1470:	4a26      	ldr	r2, [pc, #152]	; (150c <updateGround+0xb8>)
    1472:	4b2a      	ldr	r3, [pc, #168]	; (151c <updateGround+0xc8>)
    1474:	47a8      	blx	r5
    1476:	0002      	movs	r2, r0
    1478:	000b      	movs	r3, r1
    147a:	0030      	movs	r0, r6
    147c:	0039      	movs	r1, r7
    147e:	4e28      	ldr	r6, [pc, #160]	; (1520 <updateGround+0xcc>)
    1480:	47b0      	blx	r6
    offsets.groundOffsetBuffer = offsets.groundOffsetBuffer * 0.5 + altitude * 0.5;
    1482:	4e28      	ldr	r6, [pc, #160]	; (1524 <updateGround+0xd0>)

void updateGround(Altimeter *my_altimeter) {



    offsets.gravityOffsetBuffer = offsets.gravityOffsetBuffer * 0.8 + sample.accelX * 0.2;
    1484:	6120      	str	r0, [r4, #16]
    1486:	6161      	str	r1, [r4, #20]
    offsets.groundOffsetBuffer = offsets.groundOffsetBuffer * 0.5 + altitude * 0.5;
    1488:	69e0      	ldr	r0, [r4, #28]
    148a:	47b0      	blx	r6
    148c:	2200      	movs	r2, #0
    148e:	4b26      	ldr	r3, [pc, #152]	; (1528 <updateGround+0xd4>)
    1490:	47a8      	blx	r5
    1492:	9000      	str	r0, [sp, #0]
    1494:	9101      	str	r1, [sp, #4]
    1496:	4925      	ldr	r1, [pc, #148]	; (152c <updateGround+0xd8>)
    1498:	2200      	movs	r2, #0
    149a:	6808      	ldr	r0, [r1, #0]
    149c:	6849      	ldr	r1, [r1, #4]
    149e:	4b22      	ldr	r3, [pc, #136]	; (1528 <updateGround+0xd4>)
    14a0:	47a8      	blx	r5
    14a2:	4f1f      	ldr	r7, [pc, #124]	; (1520 <updateGround+0xcc>)
    14a4:	0002      	movs	r2, r0
    14a6:	000b      	movs	r3, r1
    14a8:	9800      	ldr	r0, [sp, #0]
    14aa:	9901      	ldr	r1, [sp, #4]
    14ac:	47b8      	blx	r7
    14ae:	4f20      	ldr	r7, [pc, #128]	; (1530 <updateGround+0xdc>)
    14b0:	47b8      	blx	r7
    14b2:	61e0      	str	r0, [r4, #28]
    offsets.groundTemperatureBuffer = offsets.groundTemperatureBuffer * 0.8 + sample.temperatureCelcus * 0.2;
    14b4:	6a60      	ldr	r0, [r4, #36]	; 0x24
    14b6:	47b0      	blx	r6
    14b8:	4a14      	ldr	r2, [pc, #80]	; (150c <updateGround+0xb8>)
    14ba:	4b15      	ldr	r3, [pc, #84]	; (1510 <updateGround+0xbc>)
    14bc:	47a8      	blx	r5
    14be:	4b15      	ldr	r3, [pc, #84]	; (1514 <updateGround+0xc0>)
    14c0:	9000      	str	r0, [sp, #0]
    14c2:	9101      	str	r1, [sp, #4]
    14c4:	6d58      	ldr	r0, [r3, #84]	; 0x54
    14c6:	47b0      	blx	r6
    14c8:	4a10      	ldr	r2, [pc, #64]	; (150c <updateGround+0xb8>)
    14ca:	4b14      	ldr	r3, [pc, #80]	; (151c <updateGround+0xc8>)
    14cc:	47a8      	blx	r5
    14ce:	4d14      	ldr	r5, [pc, #80]	; (1520 <updateGround+0xcc>)
    14d0:	000b      	movs	r3, r1
    14d2:	0002      	movs	r2, r0
    14d4:	9800      	ldr	r0, [sp, #0]
    14d6:	9901      	ldr	r1, [sp, #4]
    14d8:	47a8      	blx	r5
    14da:	47b8      	blx	r7

    if ((millis() - offsets.offsetBufferTime) > 2000) {
    14dc:	4d15      	ldr	r5, [pc, #84]	; (1534 <updateGround+0xe0>)



    offsets.gravityOffsetBuffer = offsets.gravityOffsetBuffer * 0.8 + sample.accelX * 0.2;
    offsets.groundOffsetBuffer = offsets.groundOffsetBuffer * 0.5 + altitude * 0.5;
    offsets.groundTemperatureBuffer = offsets.groundTemperatureBuffer * 0.8 + sample.temperatureCelcus * 0.2;
    14de:	6260      	str	r0, [r4, #36]	; 0x24

    if ((millis() - offsets.offsetBufferTime) > 2000) {
    14e0:	47a8      	blx	r5
    14e2:	6823      	ldr	r3, [r4, #0]
    14e4:	1ac0      	subs	r0, r0, r3
    14e6:	23fa      	movs	r3, #250	; 0xfa
    14e8:	00db      	lsls	r3, r3, #3
    14ea:	4298      	cmp	r0, r3
    14ec:	d909      	bls.n	1502 <updateGround+0xae>
        //recursive filter
        offsets.groundOffset = offsets.groundOffsetBuffer;
    14ee:	69e3      	ldr	r3, [r4, #28]
    14f0:	61a3      	str	r3, [r4, #24]
        offsets.groundTemperature = offsets.groundTemperatureBuffer;
    14f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
    14f4:	6223      	str	r3, [r4, #32]
        offsets.gravityOffset = offsets.gravityOffsetBuffer;
    14f6:	6922      	ldr	r2, [r4, #16]
    14f8:	6963      	ldr	r3, [r4, #20]
    14fa:	60a2      	str	r2, [r4, #8]
    14fc:	60e3      	str	r3, [r4, #12]
        offsets.offsetBufferTime = millis();
    14fe:	47a8      	blx	r5
    1500:	6020      	str	r0, [r4, #0]
    }
}
    1502:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    1504:	20000108 	.word	0x20000108
    1508:	000054b9 	.word	0x000054b9
    150c:	9999999a 	.word	0x9999999a
    1510:	3fe99999 	.word	0x3fe99999
    1514:	20000540 	.word	0x20000540
    1518:	000061f5 	.word	0x000061f5
    151c:	3fc99999 	.word	0x3fc99999
    1520:	00004619 	.word	0x00004619
    1524:	00006185 	.word	0x00006185
    1528:	3fe00000 	.word	0x3fe00000
    152c:	200002e8 	.word	0x200002e8
    1530:	00004371 	.word	0x00004371
    1534:	0000112d 	.word	0x0000112d

00001538 <isItPointingUp>:

void isItPointingUp() {
    1538:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    u8_t i;

    double pointingUpBuffer;

    pointingUpBuffer = sample.accelX;
    153a:	4f25      	ldr	r7, [pc, #148]	; (15d0 <isItPointingUp+0x98>)
    153c:	4b25      	ldr	r3, [pc, #148]	; (15d4 <isItPointingUp+0x9c>)
    153e:	6a78      	ldr	r0, [r7, #36]	; 0x24
    1540:	4798      	blx	r3
    1542:	260a      	movs	r6, #10
    1544:	0004      	movs	r4, r0
    1546:	000d      	movs	r5, r1
    1548:	9701      	str	r7, [sp, #4]

    for ( i = 0; i < 10 ; ++i ) {
        delay_ms(10);
    154a:	200a      	movs	r0, #10
    154c:	4b22      	ldr	r3, [pc, #136]	; (15d8 <isItPointingUp+0xa0>)
    154e:	4798      	blx	r3
        sampleTick();
    1550:	4b22      	ldr	r3, [pc, #136]	; (15dc <isItPointingUp+0xa4>)
    1552:	4798      	blx	r3
        pointingUpBuffer = pointingUpBuffer * 0.8 + sample.accelX * 0.2;
    1554:	4a22      	ldr	r2, [pc, #136]	; (15e0 <isItPointingUp+0xa8>)
    1556:	4b23      	ldr	r3, [pc, #140]	; (15e4 <isItPointingUp+0xac>)
    1558:	0020      	movs	r0, r4
    155a:	0029      	movs	r1, r5
    155c:	4c22      	ldr	r4, [pc, #136]	; (15e8 <isItPointingUp+0xb0>)
    155e:	47a0      	blx	r4
    1560:	0004      	movs	r4, r0
    1562:	000d      	movs	r5, r1
    1564:	9b01      	ldr	r3, [sp, #4]
    1566:	3e01      	subs	r6, #1
    1568:	6a58      	ldr	r0, [r3, #36]	; 0x24
    156a:	4b1a      	ldr	r3, [pc, #104]	; (15d4 <isItPointingUp+0x9c>)
    156c:	4798      	blx	r3
    156e:	4a1c      	ldr	r2, [pc, #112]	; (15e0 <isItPointingUp+0xa8>)
    1570:	4b1e      	ldr	r3, [pc, #120]	; (15ec <isItPointingUp+0xb4>)
    1572:	4f1d      	ldr	r7, [pc, #116]	; (15e8 <isItPointingUp+0xb0>)
    1574:	47b8      	blx	r7
    1576:	0022      	movs	r2, r4
    1578:	002b      	movs	r3, r5
    157a:	4c1d      	ldr	r4, [pc, #116]	; (15f0 <isItPointingUp+0xb8>)
    157c:	47a0      	blx	r4
    157e:	b2f6      	uxtb	r6, r6
    1580:	0004      	movs	r4, r0
    1582:	000d      	movs	r5, r1

    double pointingUpBuffer;

    pointingUpBuffer = sample.accelX;

    for ( i = 0; i < 10 ; ++i ) {
    1584:	2e00      	cmp	r6, #0
    1586:	d1e0      	bne.n	154a <isItPointingUp+0x12>
        delay_ms(10);
        sampleTick();
        pointingUpBuffer = pointingUpBuffer * 0.8 + sample.accelX * 0.2;
    }
    if ((pointingUpBuffer > 0.9) & (pointingUpBuffer <1.1)) {
    1588:	4e1a      	ldr	r6, [pc, #104]	; (15f4 <isItPointingUp+0xbc>)
    158a:	4a1b      	ldr	r2, [pc, #108]	; (15f8 <isItPointingUp+0xc0>)
    158c:	4b1b      	ldr	r3, [pc, #108]	; (15fc <isItPointingUp+0xc4>)
    158e:	47b0      	blx	r6
    1590:	0037      	movs	r7, r6
    1592:	4e1b      	ldr	r6, [pc, #108]	; (1600 <isItPointingUp+0xc8>)
    1594:	2800      	cmp	r0, #0
    1596:	d007      	beq.n	15a8 <isItPointingUp+0x70>
    1598:	4a11      	ldr	r2, [pc, #68]	; (15e0 <isItPointingUp+0xa8>)
    159a:	4b1a      	ldr	r3, [pc, #104]	; (1604 <isItPointingUp+0xcc>)
    159c:	0020      	movs	r0, r4
    159e:	0029      	movs	r1, r5
    15a0:	47b0      	blx	r6
        altimeter.pointingUp = true;
    15a2:	2201      	movs	r2, #1
    for ( i = 0; i < 10 ; ++i ) {
        delay_ms(10);
        sampleTick();
        pointingUpBuffer = pointingUpBuffer * 0.8 + sample.accelX * 0.2;
    }
    if ((pointingUpBuffer > 0.9) & (pointingUpBuffer <1.1)) {
    15a4:	2800      	cmp	r0, #0
    15a6:	d10e      	bne.n	15c6 <isItPointingUp+0x8e>
        altimeter.pointingUp = true;
    } else if ((pointingUpBuffer < -0.9) & (pointingUpBuffer > -1.1)) {
    15a8:	4a13      	ldr	r2, [pc, #76]	; (15f8 <isItPointingUp+0xc0>)
    15aa:	4b17      	ldr	r3, [pc, #92]	; (1608 <isItPointingUp+0xd0>)
    15ac:	0020      	movs	r0, r4
    15ae:	0029      	movs	r1, r5
    15b0:	47b0      	blx	r6
    15b2:	2800      	cmp	r0, #0
    15b4:	d00a      	beq.n	15cc <isItPointingUp+0x94>
    15b6:	4a0a      	ldr	r2, [pc, #40]	; (15e0 <isItPointingUp+0xa8>)
    15b8:	4b14      	ldr	r3, [pc, #80]	; (160c <isItPointingUp+0xd4>)
    15ba:	0020      	movs	r0, r4
    15bc:	0029      	movs	r1, r5
    15be:	47b8      	blx	r7
    15c0:	2800      	cmp	r0, #0
    15c2:	d003      	beq.n	15cc <isItPointingUp+0x94>
        altimeter.pointingUp = false;
    15c4:	2200      	movs	r2, #0
    15c6:	4b12      	ldr	r3, [pc, #72]	; (1610 <isItPointingUp+0xd8>)
    15c8:	715a      	strb	r2, [r3, #5]

        }

    }

    15ca:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    15cc:	e7fe      	b.n	15cc <isItPointingUp+0x94>
    15ce:	46c0      	nop			; (mov r8, r8)
    15d0:	20000540 	.word	0x20000540
    15d4:	000061f5 	.word	0x000061f5
    15d8:	000010e1 	.word	0x000010e1
    15dc:	000027c1 	.word	0x000027c1
    15e0:	9999999a 	.word	0x9999999a
    15e4:	3fe99999 	.word	0x3fe99999
    15e8:	000054b9 	.word	0x000054b9
    15ec:	3fc99999 	.word	0x3fc99999
    15f0:	00004619 	.word	0x00004619
    15f4:	000042f1 	.word	0x000042f1
    15f8:	cccccccd 	.word	0xcccccccd
    15fc:	3feccccc 	.word	0x3feccccc
    1600:	000042c9 	.word	0x000042c9
    1604:	3ff19999 	.word	0x3ff19999
    1608:	bfeccccc 	.word	0xbfeccccc
    160c:	bff19999 	.word	0xbff19999
    1610:	20000160 	.word	0x20000160

00001614 <igniterTick>:
#include <util.h>
#include <boardDefines.h>


void igniterTick() {
    1614:	b510      	push	{r4, lr}

    if (charges.igniterAHot) {
    1616:	4c23      	ldr	r4, [pc, #140]	; (16a4 <igniterTick+0x90>)
    1618:	7823      	ldrb	r3, [r4, #0]
    161a:	2b00      	cmp	r3, #0
    161c:	d00d      	beq.n	163a <igniterTick+0x26>
        if ((millis() - charges.igniterATick) > 2000) {
    161e:	4b22      	ldr	r3, [pc, #136]	; (16a8 <igniterTick+0x94>)
    1620:	4798      	blx	r3
    1622:	6863      	ldr	r3, [r4, #4]
    1624:	1ac0      	subs	r0, r0, r3
    1626:	23fa      	movs	r3, #250	; 0xfa
    1628:	00db      	lsls	r3, r3, #3
    162a:	4298      	cmp	r0, r3
    162c:	d905      	bls.n	163a <igniterTick+0x26>
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    162e:	2280      	movs	r2, #128	; 0x80
    1630:	4b1e      	ldr	r3, [pc, #120]	; (16ac <igniterTick+0x98>)
    1632:	0412      	lsls	r2, r2, #16
    1634:	601a      	str	r2, [r3, #0]
            pinLow(fireAPin);
            charges.igniterAHot = false;
    1636:	2300      	movs	r3, #0
    1638:	7023      	strb	r3, [r4, #0]
        }
    }

    if (charges.igniterBHot) {
    163a:	7a23      	ldrb	r3, [r4, #8]
    163c:	2b00      	cmp	r3, #0
    163e:	d00d      	beq.n	165c <igniterTick+0x48>
        if ((millis() - charges.igniterBTick) > 2000) {
    1640:	4b19      	ldr	r3, [pc, #100]	; (16a8 <igniterTick+0x94>)
    1642:	4798      	blx	r3
    1644:	68e3      	ldr	r3, [r4, #12]
    1646:	1ac0      	subs	r0, r0, r3
    1648:	23fa      	movs	r3, #250	; 0xfa
    164a:	00db      	lsls	r3, r3, #3
    164c:	4298      	cmp	r0, r3
    164e:	d905      	bls.n	165c <igniterTick+0x48>
    1650:	2280      	movs	r2, #128	; 0x80
    1652:	4b16      	ldr	r3, [pc, #88]	; (16ac <igniterTick+0x98>)
    1654:	03d2      	lsls	r2, r2, #15
    1656:	601a      	str	r2, [r3, #0]
            pinLow(fireBPin);
            charges.igniterBHot = false;
    1658:	2300      	movs	r3, #0
    165a:	7223      	strb	r3, [r4, #8]
        }
    }

    if (charges.igniterCHot) {
    165c:	7c23      	ldrb	r3, [r4, #16]
    165e:	2b00      	cmp	r3, #0
    1660:	d00d      	beq.n	167e <igniterTick+0x6a>
        if ((millis() - charges.igniterCTick) > 2000) {
    1662:	4b11      	ldr	r3, [pc, #68]	; (16a8 <igniterTick+0x94>)
    1664:	4798      	blx	r3
    1666:	6963      	ldr	r3, [r4, #20]
    1668:	1ac0      	subs	r0, r0, r3
    166a:	23fa      	movs	r3, #250	; 0xfa
    166c:	00db      	lsls	r3, r3, #3
    166e:	4298      	cmp	r0, r3
    1670:	d905      	bls.n	167e <igniterTick+0x6a>
    1672:	2280      	movs	r2, #128	; 0x80
    1674:	4b0e      	ldr	r3, [pc, #56]	; (16b0 <igniterTick+0x9c>)
    1676:	0492      	lsls	r2, r2, #18
    1678:	615a      	str	r2, [r3, #20]
            pinLow(fireCPin);
            charges.igniterCHot = false;
    167a:	2300      	movs	r3, #0
    167c:	7423      	strb	r3, [r4, #16]
        }
    }

    if (charges.igniterDHot) {
    167e:	7e23      	ldrb	r3, [r4, #24]
    1680:	2b00      	cmp	r3, #0
    1682:	d00d      	beq.n	16a0 <igniterTick+0x8c>
        if ((millis() - charges.igniterDTick) > 2000) {
    1684:	4b08      	ldr	r3, [pc, #32]	; (16a8 <igniterTick+0x94>)
    1686:	4798      	blx	r3
    1688:	69e3      	ldr	r3, [r4, #28]
    168a:	1ac0      	subs	r0, r0, r3
    168c:	23fa      	movs	r3, #250	; 0xfa
    168e:	00db      	lsls	r3, r3, #3
    1690:	4298      	cmp	r0, r3
    1692:	d905      	bls.n	16a0 <igniterTick+0x8c>
    1694:	2280      	movs	r2, #128	; 0x80
    1696:	4b06      	ldr	r3, [pc, #24]	; (16b0 <igniterTick+0x9c>)
    1698:	0452      	lsls	r2, r2, #17
    169a:	615a      	str	r2, [r3, #20]
            pinLow(fireDPin);
            charges.igniterDHot = false;
    169c:	2300      	movs	r3, #0
    169e:	7623      	strb	r3, [r4, #24]
        }
    }
}
    16a0:	bd10      	pop	{r4, pc}
    16a2:	46c0      	nop			; (mov r8, r8)
    16a4:	200002b4 	.word	0x200002b4
    16a8:	0000112d 	.word	0x0000112d
    16ac:	41004494 	.word	0x41004494
    16b0:	41004400 	.word	0x41004400

000016b4 <lightIgniterA>:
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    16b4:	2280      	movs	r2, #128	; 0x80
    16b6:	4b05      	ldr	r3, [pc, #20]	; (16cc <lightIgniterA+0x18>)
    16b8:	0412      	lsls	r2, r2, #16
    if (deploymentSettings.channelDSettings.ENABLED & (deploymentSettings.channelDSettings.TYPE == DROGUE_t)) {
        lightIgniterD();
    }
}

void lightIgniterA() {
    16ba:	b510      	push	{r4, lr}
    16bc:	601a      	str	r2, [r3, #0]
    pinHigh(fireAPin);
    charges.igniterAHot = true;
    16be:	2301      	movs	r3, #1
    16c0:	4c03      	ldr	r4, [pc, #12]	; (16d0 <lightIgniterA+0x1c>)
    16c2:	7023      	strb	r3, [r4, #0]
    charges.igniterATick = millis();
    16c4:	4b03      	ldr	r3, [pc, #12]	; (16d4 <lightIgniterA+0x20>)
    16c6:	4798      	blx	r3
    16c8:	6060      	str	r0, [r4, #4]
}
    16ca:	bd10      	pop	{r4, pc}
    16cc:	41004498 	.word	0x41004498
    16d0:	200002b4 	.word	0x200002b4
    16d4:	0000112d 	.word	0x0000112d

000016d8 <lightIgniterB>:
    16d8:	2280      	movs	r2, #128	; 0x80
    16da:	4b05      	ldr	r3, [pc, #20]	; (16f0 <lightIgniterB+0x18>)
    16dc:	03d2      	lsls	r2, r2, #15

void lightIgniterB() {
    16de:	b510      	push	{r4, lr}
    16e0:	601a      	str	r2, [r3, #0]
    pinHigh(fireBPin);
    charges.igniterBHot = true;
    16e2:	2301      	movs	r3, #1
    16e4:	4c03      	ldr	r4, [pc, #12]	; (16f4 <lightIgniterB+0x1c>)
    16e6:	7223      	strb	r3, [r4, #8]
    charges.igniterBTick = millis();
    16e8:	4b03      	ldr	r3, [pc, #12]	; (16f8 <lightIgniterB+0x20>)
    16ea:	4798      	blx	r3
    16ec:	60e0      	str	r0, [r4, #12]
}
    16ee:	bd10      	pop	{r4, pc}
    16f0:	41004498 	.word	0x41004498
    16f4:	200002b4 	.word	0x200002b4
    16f8:	0000112d 	.word	0x0000112d

000016fc <lightIgniterC>:
    16fc:	2280      	movs	r2, #128	; 0x80
    16fe:	4b05      	ldr	r3, [pc, #20]	; (1714 <lightIgniterC+0x18>)
    1700:	0492      	lsls	r2, r2, #18

void lightIgniterC() {
    1702:	b510      	push	{r4, lr}
    1704:	619a      	str	r2, [r3, #24]
    pinHigh(fireCPin);
    charges.igniterCHot = true;
    1706:	2301      	movs	r3, #1
    1708:	4c03      	ldr	r4, [pc, #12]	; (1718 <lightIgniterC+0x1c>)
    170a:	7423      	strb	r3, [r4, #16]
    charges.igniterCTick = millis();
    170c:	4b03      	ldr	r3, [pc, #12]	; (171c <lightIgniterC+0x20>)
    170e:	4798      	blx	r3
    1710:	6160      	str	r0, [r4, #20]
}
    1712:	bd10      	pop	{r4, pc}
    1714:	41004400 	.word	0x41004400
    1718:	200002b4 	.word	0x200002b4
    171c:	0000112d 	.word	0x0000112d

00001720 <lightIgniterD>:
    1720:	2280      	movs	r2, #128	; 0x80
    1722:	4b05      	ldr	r3, [pc, #20]	; (1738 <lightIgniterD+0x18>)
    1724:	0452      	lsls	r2, r2, #17

void lightIgniterD() {
    1726:	b510      	push	{r4, lr}
    1728:	619a      	str	r2, [r3, #24]
    pinHigh(fireDPin);
    charges.igniterDHot = true;
    172a:	2301      	movs	r3, #1
    172c:	4c03      	ldr	r4, [pc, #12]	; (173c <lightIgniterD+0x1c>)
    172e:	7623      	strb	r3, [r4, #24]
    charges.igniterDTick = millis();
    1730:	4b03      	ldr	r3, [pc, #12]	; (1740 <lightIgniterD+0x20>)
    1732:	4798      	blx	r3
    1734:	61e0      	str	r0, [r4, #28]
    1736:	bd10      	pop	{r4, pc}
    1738:	41004400 	.word	0x41004400
    173c:	200002b4 	.word	0x200002b4
    1740:	0000112d 	.word	0x0000112d

00001744 <igniteMain>:
            charges.igniterDHot = false;
        }
    }
}

void igniteMain() {
    1744:	b510      	push	{r4, lr}

    if (deploymentSettings.channelASettings.ENABLED & (deploymentSettings.channelASettings.TYPE == MAIN_t)) {
    1746:	4c11      	ldr	r4, [pc, #68]	; (178c <igniteMain+0x48>)
    1748:	7863      	ldrb	r3, [r4, #1]
    174a:	2b00      	cmp	r3, #0
    174c:	d104      	bne.n	1758 <igniteMain+0x14>
    174e:	7823      	ldrb	r3, [r4, #0]
    1750:	2b00      	cmp	r3, #0
    1752:	d001      	beq.n	1758 <igniteMain+0x14>
        lightIgniterA();
    1754:	4b0e      	ldr	r3, [pc, #56]	; (1790 <igniteMain+0x4c>)
    1756:	4798      	blx	r3
    }
    if(deploymentSettings.channelBSettings.ENABLED & (deploymentSettings.channelBSettings.TYPE == MAIN_t)) {
    1758:	79e3      	ldrb	r3, [r4, #7]
    175a:	2b00      	cmp	r3, #0
    175c:	d104      	bne.n	1768 <igniteMain+0x24>
    175e:	79a3      	ldrb	r3, [r4, #6]
    1760:	2b00      	cmp	r3, #0
    1762:	d001      	beq.n	1768 <igniteMain+0x24>
        lightIgniterB();
    1764:	4b0b      	ldr	r3, [pc, #44]	; (1794 <igniteMain+0x50>)
    1766:	4798      	blx	r3
    }
    if (deploymentSettings.channelCSettings.ENABLED & (deploymentSettings.channelCSettings.TYPE == MAIN_t)) {
    1768:	7b63      	ldrb	r3, [r4, #13]
    176a:	2b00      	cmp	r3, #0
    176c:	d104      	bne.n	1778 <igniteMain+0x34>
    176e:	7b23      	ldrb	r3, [r4, #12]
    1770:	2b00      	cmp	r3, #0
    1772:	d001      	beq.n	1778 <igniteMain+0x34>
        lightIgniterC();
    1774:	4b08      	ldr	r3, [pc, #32]	; (1798 <igniteMain+0x54>)
    1776:	4798      	blx	r3
    }
    if (deploymentSettings.channelDSettings.ENABLED & (deploymentSettings.channelDSettings.TYPE == MAIN_t)) {
    1778:	7ce3      	ldrb	r3, [r4, #19]
    177a:	2b00      	cmp	r3, #0
    177c:	d104      	bne.n	1788 <igniteMain+0x44>
    177e:	7ca3      	ldrb	r3, [r4, #18]
    1780:	2b00      	cmp	r3, #0
    1782:	d001      	beq.n	1788 <igniteMain+0x44>
        lightIgniterD();
    1784:	4b05      	ldr	r3, [pc, #20]	; (179c <igniteMain+0x58>)
    1786:	4798      	blx	r3
    }
}
    1788:	bd10      	pop	{r4, pc}
    178a:	46c0      	nop			; (mov r8, r8)
    178c:	20000140 	.word	0x20000140
    1790:	000016b5 	.word	0x000016b5
    1794:	000016d9 	.word	0x000016d9
    1798:	000016fd 	.word	0x000016fd
    179c:	00001721 	.word	0x00001721

000017a0 <computeKalmanGains>:
    dt = 0.005;

    /*
     Fill in state transition matrix and its transpose
    */
    phi[0][1]    = dt;
    17a0:	4bdc      	ldr	r3, [pc, #880]	; (1b14 <computeKalmanGains+0x374>)
    17a2:	48dd      	ldr	r0, [pc, #884]	; (1b18 <computeKalmanGains+0x378>)
    17a4:	49dd      	ldr	r1, [pc, #884]	; (1b1c <computeKalmanGains+0x37c>)

double altitude_variance = ALTITUDESIGMA*ALTITUDESIGMA;
double acceleration_variance = ACCELERATIONSIGMA*ACCELERATIONSIGMA;
double model_variance  = MODELSIGMA*MODELSIGMA;

void computeKalmanGains() {
    17a6:	b5f0      	push	{r4, r5, r6, r7, lr}
    dt = 0.005;

    /*
     Fill in state transition matrix and its transpose
    */
    phi[0][1]    = dt;
    17a8:	6098      	str	r0, [r3, #8]
    17aa:	60d9      	str	r1, [r3, #12]
    phi[1][2]    = dt;
    17ac:	6298      	str	r0, [r3, #40]	; 0x28
    17ae:	62d9      	str	r1, [r3, #44]	; 0x2c
    phi[0][2]    = dt*dt/2.0;
    17b0:	48db      	ldr	r0, [pc, #876]	; (1b20 <computeKalmanGains+0x380>)
    17b2:	49dc      	ldr	r1, [pc, #880]	; (1b24 <computeKalmanGains+0x384>)
    17b4:	2200      	movs	r2, #0
    17b6:	6118      	str	r0, [r3, #16]
    17b8:	6159      	str	r1, [r3, #20]
    phit[2][0]    = dt*dt/2.0;

    for( i = 0; i <= 2; i++)
        for( j = 0; j <=1; j++) {
            lastkgain[i][j] = .001;
            kgain[i][j] = 1.0;
    17ba:	2000      	movs	r0, #0
    17bc:	49da      	ldr	r1, [pc, #872]	; (1b28 <computeKalmanGains+0x388>)
    phit[2][1]    = dt;
    phit[2][0]    = dt*dt/2.0;

    for( i = 0; i <= 2; i++)
        for( j = 0; j <=1; j++) {
            lastkgain[i][j] = .001;
    17be:	4cdb      	ldr	r4, [pc, #876]	; (1b2c <computeKalmanGains+0x38c>)
    17c0:	468c      	mov	ip, r1
    17c2:	4ddb      	ldr	r5, [pc, #876]	; (1b30 <computeKalmanGains+0x390>)
            kgain[i][j] = 1.0;
    17c4:	49db      	ldr	r1, [pc, #876]	; (1b34 <computeKalmanGains+0x394>)

double altitude_variance = ALTITUDESIGMA*ALTITUDESIGMA;
double acceleration_variance = ACCELERATIONSIGMA*ACCELERATIONSIGMA;
double model_variance  = MODELSIGMA*MODELSIGMA;

void computeKalmanGains() {
    17c6:	b0cd      	sub	sp, #308	; 0x134
    17c8:	ae40      	add	r6, sp, #256	; 0x100
    17ca:	1997      	adds	r7, r2, r6
    17cc:	4666      	mov	r6, ip
    17ce:	1996      	adds	r6, r2, r6
    17d0:	3210      	adds	r2, #16
    phit[2][1]    = dt;
    phit[2][0]    = dt*dt/2.0;

    for( i = 0; i <= 2; i++)
        for( j = 0; j <=1; j++) {
            lastkgain[i][j] = .001;
    17d2:	603c      	str	r4, [r7, #0]
    17d4:	607d      	str	r5, [r7, #4]
            kgain[i][j] = 1.0;
    17d6:	6030      	str	r0, [r6, #0]
    17d8:	6071      	str	r1, [r6, #4]
    phit[2][1]    = dt;
    phit[2][0]    = dt*dt/2.0;

    for( i = 0; i <= 2; i++)
        for( j = 0; j <=1; j++) {
            lastkgain[i][j] = .001;
    17da:	60bc      	str	r4, [r7, #8]
    17dc:	60fd      	str	r5, [r7, #12]
            kgain[i][j] = 1.0;
    17de:	60b0      	str	r0, [r6, #8]
    17e0:	60f1      	str	r1, [r6, #12]
    phi[0][2]    = dt*dt/2.0;
    phit[1][0]    = dt;
    phit[2][1]    = dt;
    phit[2][0]    = dt*dt/2.0;

    for( i = 0; i <= 2; i++)
    17e2:	2a30      	cmp	r2, #48	; 0x30
    17e4:	d1f0      	bne.n	17c8 <computeKalmanGains+0x28>

    /* Compute the Kalman gain matrix. */
    while(1) {
        /* Propagate state covariance */

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
    17e6:	6819      	ldr	r1, [r3, #0]
    17e8:	685a      	ldr	r2, [r3, #4]
    17ea:	911a      	str	r1, [sp, #104]	; 0x68
    17ec:	921b      	str	r2, [sp, #108]	; 0x6c
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
    17ee:	6999      	ldr	r1, [r3, #24]
    17f0:	69da      	ldr	r2, [r3, #28]
    17f2:	911c      	str	r1, [sp, #112]	; 0x70
    17f4:	921d      	str	r2, [sp, #116]	; 0x74
    17f6:	6a19      	ldr	r1, [r3, #32]
    17f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    17fa:	911e      	str	r1, [sp, #120]	; 0x78
    17fc:	921f      	str	r2, [sp, #124]	; 0x7c
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
    17fe:	6b19      	ldr	r1, [r3, #48]	; 0x30
    1800:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    1802:	9120      	str	r1, [sp, #128]	; 0x80
    1804:	9221      	str	r2, [sp, #132]	; 0x84
    1806:	6b99      	ldr	r1, [r3, #56]	; 0x38
    1808:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    180a:	9122      	str	r1, [sp, #136]	; 0x88
    180c:	9223      	str	r2, [sp, #140]	; 0x8c
    180e:	6c19      	ldr	r1, [r3, #64]	; 0x40
    1810:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    1812:	9124      	str	r1, [sp, #144]	; 0x90
    1814:	9225      	str	r2, [sp, #148]	; 0x94
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
        pestp[2][1] = term[2][0] * phit[0][1] + term[2][1] * phit[1][1] + term[2][2] * phit[2][1];
        pestp[2][2] = term[2][0] * phit[0][2] + term[2][1] * phit[1][2] + term[2][2] * phit[2][2];

        pestp[2][2] = pestp[2][2] + model_variance;
    1816:	6c99      	ldr	r1, [r3, #72]	; 0x48
    1818:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    181a:	913a      	str	r1, [sp, #232]	; 0xe8
    181c:	923b      	str	r2, [sp, #236]	; 0xec
        /*
          Calculate Kalman Gain
        */
        det = (pestp[0][0]+altitude_variance)*(pestp[2][2] + acceleration_variance) - pestp[2][0] * pestp[0][2];
    181e:	6d19      	ldr	r1, [r3, #80]	; 0x50
    1820:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    1822:	6ddc      	ldr	r4, [r3, #92]	; 0x5c
    1824:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    1826:	933e      	str	r3, [sp, #248]	; 0xf8
    1828:	943f      	str	r4, [sp, #252]	; 0xfc
    182a:	2300      	movs	r3, #0
    182c:	4cc2      	ldr	r4, [pc, #776]	; (1b38 <computeKalmanGains+0x398>)
    182e:	913c      	str	r1, [sp, #240]	; 0xf0
    1830:	923d      	str	r2, [sp, #244]	; 0xf4
    1832:	9302      	str	r3, [sp, #8]
    1834:	9403      	str	r4, [sp, #12]
    1836:	2300      	movs	r3, #0
    1838:	2400      	movs	r4, #0
    183a:	9310      	str	r3, [sp, #64]	; 0x40
    183c:	9411      	str	r4, [sp, #68]	; 0x44
    183e:	9300      	str	r3, [sp, #0]
    1840:	9401      	str	r4, [sp, #4]
    1842:	9304      	str	r3, [sp, #16]
    1844:	9405      	str	r4, [sp, #20]
    1846:	2300      	movs	r3, #0
    1848:	4cbb      	ldr	r4, [pc, #748]	; (1b38 <computeKalmanGains+0x398>)
    184a:	930e      	str	r3, [sp, #56]	; 0x38
    184c:	940f      	str	r4, [sp, #60]	; 0x3c
    184e:	2300      	movs	r3, #0
    1850:	2400      	movs	r4, #0
    1852:	9308      	str	r3, [sp, #32]
    1854:	9409      	str	r4, [sp, #36]	; 0x24
    1856:	930c      	str	r3, [sp, #48]	; 0x30
    1858:	940d      	str	r4, [sp, #52]	; 0x34
    185a:	930a      	str	r3, [sp, #40]	; 0x28
    185c:	940b      	str	r4, [sp, #44]	; 0x2c
    185e:	2480      	movs	r4, #128	; 0x80
    1860:	2300      	movs	r3, #0
    1862:	05e4      	lsls	r4, r4, #23
    1864:	9306      	str	r3, [sp, #24]
    1866:	9407      	str	r4, [sp, #28]
    1868:	2300      	movs	r3, #0
    186a:	9338      	str	r3, [sp, #224]	; 0xe0

    /* Compute the Kalman gain matrix. */
    while(1) {
        /* Propagate state covariance */

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
    186c:	4db3      	ldr	r5, [pc, #716]	; (1b3c <computeKalmanGains+0x39c>)
    186e:	9a06      	ldr	r2, [sp, #24]
    1870:	9b07      	ldr	r3, [sp, #28]
    1872:	981a      	ldr	r0, [sp, #104]	; 0x68
    1874:	991b      	ldr	r1, [sp, #108]	; 0x6c
    1876:	47a8      	blx	r5
    1878:	4aa7      	ldr	r2, [pc, #668]	; (1b18 <computeKalmanGains+0x378>)
    187a:	0006      	movs	r6, r0
    187c:	000f      	movs	r7, r1
    187e:	9808      	ldr	r0, [sp, #32]
    1880:	9909      	ldr	r1, [sp, #36]	; 0x24
    1882:	4ba6      	ldr	r3, [pc, #664]	; (1b1c <computeKalmanGains+0x37c>)
    1884:	47a8      	blx	r5
    1886:	4cae      	ldr	r4, [pc, #696]	; (1b40 <computeKalmanGains+0x3a0>)
    1888:	0002      	movs	r2, r0
    188a:	000b      	movs	r3, r1
    188c:	0030      	movs	r0, r6
    188e:	0039      	movs	r1, r7
    1890:	47a0      	blx	r4
    1892:	4aa3      	ldr	r2, [pc, #652]	; (1b20 <computeKalmanGains+0x380>)
    1894:	0006      	movs	r6, r0
    1896:	000f      	movs	r7, r1
    1898:	9800      	ldr	r0, [sp, #0]
    189a:	9901      	ldr	r1, [sp, #4]
    189c:	4ba1      	ldr	r3, [pc, #644]	; (1b24 <computeKalmanGains+0x384>)
    189e:	47a8      	blx	r5
    18a0:	0002      	movs	r2, r0
    18a2:	000b      	movs	r3, r1
    18a4:	0030      	movs	r0, r6
    18a6:	0039      	movs	r1, r7
    18a8:	47a0      	blx	r4
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
    18aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    18ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c

    /* Compute the Kalman gain matrix. */
    while(1) {
        /* Propagate state covariance */

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
    18ae:	9016      	str	r0, [sp, #88]	; 0x58
    18b0:	9117      	str	r1, [sp, #92]	; 0x5c
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
    18b2:	981a      	ldr	r0, [sp, #104]	; 0x68
    18b4:	991b      	ldr	r1, [sp, #108]	; 0x6c
    18b6:	47a8      	blx	r5
    18b8:	4a97      	ldr	r2, [pc, #604]	; (1b18 <computeKalmanGains+0x378>)
    18ba:	0006      	movs	r6, r0
    18bc:	000f      	movs	r7, r1
    18be:	980e      	ldr	r0, [sp, #56]	; 0x38
    18c0:	990f      	ldr	r1, [sp, #60]	; 0x3c
    18c2:	4b96      	ldr	r3, [pc, #600]	; (1b1c <computeKalmanGains+0x37c>)
    18c4:	47a8      	blx	r5
    18c6:	0002      	movs	r2, r0
    18c8:	000b      	movs	r3, r1
    18ca:	0030      	movs	r0, r6
    18cc:	0039      	movs	r1, r7
    18ce:	47a0      	blx	r4
    18d0:	4a93      	ldr	r2, [pc, #588]	; (1b20 <computeKalmanGains+0x380>)
    18d2:	0006      	movs	r6, r0
    18d4:	000f      	movs	r7, r1
    18d6:	9810      	ldr	r0, [sp, #64]	; 0x40
    18d8:	9911      	ldr	r1, [sp, #68]	; 0x44
    18da:	4b92      	ldr	r3, [pc, #584]	; (1b24 <computeKalmanGains+0x384>)
    18dc:	47a8      	blx	r5
    18de:	0002      	movs	r2, r0
    18e0:	000b      	movs	r3, r1
    18e2:	0030      	movs	r0, r6
    18e4:	0039      	movs	r1, r7
    18e6:	47a0      	blx	r4
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
    18e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    18ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    /* Compute the Kalman gain matrix. */
    while(1) {
        /* Propagate state covariance */

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
    18ec:	9012      	str	r0, [sp, #72]	; 0x48
    18ee:	9113      	str	r1, [sp, #76]	; 0x4c
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
    18f0:	981a      	ldr	r0, [sp, #104]	; 0x68
    18f2:	991b      	ldr	r1, [sp, #108]	; 0x6c
    18f4:	47a8      	blx	r5
    18f6:	4a88      	ldr	r2, [pc, #544]	; (1b18 <computeKalmanGains+0x378>)
    18f8:	0006      	movs	r6, r0
    18fa:	000f      	movs	r7, r1
    18fc:	9804      	ldr	r0, [sp, #16]
    18fe:	9905      	ldr	r1, [sp, #20]
    1900:	4b86      	ldr	r3, [pc, #536]	; (1b1c <computeKalmanGains+0x37c>)
    1902:	47a8      	blx	r5
    1904:	0002      	movs	r2, r0
    1906:	000b      	movs	r3, r1
    1908:	0030      	movs	r0, r6
    190a:	0039      	movs	r1, r7
    190c:	47a0      	blx	r4
    190e:	4a84      	ldr	r2, [pc, #528]	; (1b20 <computeKalmanGains+0x380>)
    1910:	0006      	movs	r6, r0
    1912:	000f      	movs	r7, r1
    1914:	9802      	ldr	r0, [sp, #8]
    1916:	9903      	ldr	r1, [sp, #12]
    1918:	4b82      	ldr	r3, [pc, #520]	; (1b24 <computeKalmanGains+0x384>)
    191a:	47a8      	blx	r5
    191c:	0002      	movs	r2, r0
    191e:	000b      	movs	r3, r1
    1920:	0030      	movs	r0, r6
    1922:	0039      	movs	r1, r7
    1924:	47a0      	blx	r4
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
    1926:	9a06      	ldr	r2, [sp, #24]
    1928:	9b07      	ldr	r3, [sp, #28]
    while(1) {
        /* Propagate state covariance */

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
    192a:	9014      	str	r0, [sp, #80]	; 0x50
    192c:	9115      	str	r1, [sp, #84]	; 0x54
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
    192e:	981c      	ldr	r0, [sp, #112]	; 0x70
    1930:	991d      	ldr	r1, [sp, #116]	; 0x74
    1932:	47a8      	blx	r5
    1934:	9a08      	ldr	r2, [sp, #32]
    1936:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1938:	0006      	movs	r6, r0
    193a:	000f      	movs	r7, r1
    193c:	981e      	ldr	r0, [sp, #120]	; 0x78
    193e:	991f      	ldr	r1, [sp, #124]	; 0x7c
    1940:	47a8      	blx	r5
    1942:	0002      	movs	r2, r0
    1944:	000b      	movs	r3, r1
    1946:	0030      	movs	r0, r6
    1948:	0039      	movs	r1, r7
    194a:	47a0      	blx	r4
    194c:	4a72      	ldr	r2, [pc, #456]	; (1b18 <computeKalmanGains+0x378>)
    194e:	0006      	movs	r6, r0
    1950:	000f      	movs	r7, r1
    1952:	9800      	ldr	r0, [sp, #0]
    1954:	9901      	ldr	r1, [sp, #4]
    1956:	4b71      	ldr	r3, [pc, #452]	; (1b1c <computeKalmanGains+0x37c>)
    1958:	47a8      	blx	r5
    195a:	0002      	movs	r2, r0
    195c:	000b      	movs	r3, r1
    195e:	0030      	movs	r0, r6
    1960:	0039      	movs	r1, r7
    1962:	47a0      	blx	r4
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
    1964:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    1966:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
        /* Propagate state covariance */

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
    1968:	9018      	str	r0, [sp, #96]	; 0x60
    196a:	9119      	str	r1, [sp, #100]	; 0x64
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
    196c:	981c      	ldr	r0, [sp, #112]	; 0x70
    196e:	991d      	ldr	r1, [sp, #116]	; 0x74
    1970:	47a8      	blx	r5
    1972:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    1974:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1976:	0006      	movs	r6, r0
    1978:	000f      	movs	r7, r1
    197a:	981e      	ldr	r0, [sp, #120]	; 0x78
    197c:	991f      	ldr	r1, [sp, #124]	; 0x7c
    197e:	47a8      	blx	r5
    1980:	0002      	movs	r2, r0
    1982:	000b      	movs	r3, r1
    1984:	0030      	movs	r0, r6
    1986:	0039      	movs	r1, r7
    1988:	47a0      	blx	r4
    198a:	4a63      	ldr	r2, [pc, #396]	; (1b18 <computeKalmanGains+0x378>)
    198c:	0006      	movs	r6, r0
    198e:	000f      	movs	r7, r1
    1990:	9810      	ldr	r0, [sp, #64]	; 0x40
    1992:	9911      	ldr	r1, [sp, #68]	; 0x44
    1994:	4b61      	ldr	r3, [pc, #388]	; (1b1c <computeKalmanGains+0x37c>)
    1996:	47a8      	blx	r5
    1998:	0002      	movs	r2, r0
    199a:	000b      	movs	r3, r1
    199c:	0030      	movs	r0, r6
    199e:	0039      	movs	r1, r7
    19a0:	47a0      	blx	r4
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
    19a2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    19a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
    19a6:	9026      	str	r0, [sp, #152]	; 0x98
    19a8:	9127      	str	r1, [sp, #156]	; 0x9c
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
    19aa:	981c      	ldr	r0, [sp, #112]	; 0x70
    19ac:	991d      	ldr	r1, [sp, #116]	; 0x74
    19ae:	47a8      	blx	r5
    19b0:	9a04      	ldr	r2, [sp, #16]
    19b2:	9b05      	ldr	r3, [sp, #20]
    19b4:	0006      	movs	r6, r0
    19b6:	000f      	movs	r7, r1
    19b8:	981e      	ldr	r0, [sp, #120]	; 0x78
    19ba:	991f      	ldr	r1, [sp, #124]	; 0x7c
    19bc:	47a8      	blx	r5
    19be:	0002      	movs	r2, r0
    19c0:	000b      	movs	r3, r1
    19c2:	0030      	movs	r0, r6
    19c4:	0039      	movs	r1, r7
    19c6:	47a0      	blx	r4
    19c8:	4a53      	ldr	r2, [pc, #332]	; (1b18 <computeKalmanGains+0x378>)
    19ca:	0006      	movs	r6, r0
    19cc:	000f      	movs	r7, r1
    19ce:	9802      	ldr	r0, [sp, #8]
    19d0:	9903      	ldr	r1, [sp, #12]
    19d2:	4b52      	ldr	r3, [pc, #328]	; (1b1c <computeKalmanGains+0x37c>)
    19d4:	47a8      	blx	r5
    19d6:	0002      	movs	r2, r0
    19d8:	000b      	movs	r3, r1
    19da:	0030      	movs	r0, r6
    19dc:	0039      	movs	r1, r7
    19de:	47a0      	blx	r4
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
    19e0:	9a06      	ldr	r2, [sp, #24]
    19e2:	9b07      	ldr	r3, [sp, #28]
        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
    19e4:	9028      	str	r0, [sp, #160]	; 0xa0
    19e6:	9129      	str	r1, [sp, #164]	; 0xa4
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
    19e8:	9820      	ldr	r0, [sp, #128]	; 0x80
    19ea:	9921      	ldr	r1, [sp, #132]	; 0x84
    19ec:	47a8      	blx	r5
    19ee:	9a08      	ldr	r2, [sp, #32]
    19f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    19f2:	0006      	movs	r6, r0
    19f4:	000f      	movs	r7, r1
    19f6:	9822      	ldr	r0, [sp, #136]	; 0x88
    19f8:	9923      	ldr	r1, [sp, #140]	; 0x8c
    19fa:	47a8      	blx	r5
    19fc:	0002      	movs	r2, r0
    19fe:	000b      	movs	r3, r1
    1a00:	0030      	movs	r0, r6
    1a02:	0039      	movs	r1, r7
    1a04:	47a0      	blx	r4
    1a06:	9a00      	ldr	r2, [sp, #0]
    1a08:	9b01      	ldr	r3, [sp, #4]
    1a0a:	0006      	movs	r6, r0
    1a0c:	000f      	movs	r7, r1
    1a0e:	9824      	ldr	r0, [sp, #144]	; 0x90
    1a10:	9925      	ldr	r1, [sp, #148]	; 0x94
    1a12:	47a8      	blx	r5
    1a14:	0002      	movs	r2, r0
    1a16:	000b      	movs	r3, r1
    1a18:	0030      	movs	r0, r6
    1a1a:	0039      	movs	r1, r7
    1a1c:	47a0      	blx	r4
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
    1a1e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    1a20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
    1a22:	902e      	str	r0, [sp, #184]	; 0xb8
    1a24:	912f      	str	r1, [sp, #188]	; 0xbc
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
    1a26:	9820      	ldr	r0, [sp, #128]	; 0x80
    1a28:	9921      	ldr	r1, [sp, #132]	; 0x84
    1a2a:	47a8      	blx	r5
    1a2c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    1a2e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1a30:	0006      	movs	r6, r0
    1a32:	000f      	movs	r7, r1
    1a34:	9822      	ldr	r0, [sp, #136]	; 0x88
    1a36:	9923      	ldr	r1, [sp, #140]	; 0x8c
    1a38:	47a8      	blx	r5
    1a3a:	0002      	movs	r2, r0
    1a3c:	000b      	movs	r3, r1
    1a3e:	0030      	movs	r0, r6
    1a40:	0039      	movs	r1, r7
    1a42:	47a0      	blx	r4
    1a44:	9a10      	ldr	r2, [sp, #64]	; 0x40
    1a46:	9b11      	ldr	r3, [sp, #68]	; 0x44
    1a48:	0006      	movs	r6, r0
    1a4a:	000f      	movs	r7, r1
    1a4c:	9824      	ldr	r0, [sp, #144]	; 0x90
    1a4e:	9925      	ldr	r1, [sp, #148]	; 0x94
    1a50:	47a8      	blx	r5
    1a52:	0002      	movs	r2, r0
    1a54:	000b      	movs	r3, r1
    1a56:	0030      	movs	r0, r6
    1a58:	0039      	movs	r1, r7
    1a5a:	47a0      	blx	r4
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];
    1a5c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1a5e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
    1a60:	9006      	str	r0, [sp, #24]
    1a62:	9107      	str	r1, [sp, #28]
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];
    1a64:	9820      	ldr	r0, [sp, #128]	; 0x80
    1a66:	9921      	ldr	r1, [sp, #132]	; 0x84
    1a68:	47a8      	blx	r5
    1a6a:	9a04      	ldr	r2, [sp, #16]
    1a6c:	9b05      	ldr	r3, [sp, #20]
    1a6e:	0006      	movs	r6, r0
    1a70:	000f      	movs	r7, r1
    1a72:	9822      	ldr	r0, [sp, #136]	; 0x88
    1a74:	9923      	ldr	r1, [sp, #140]	; 0x8c
    1a76:	47a8      	blx	r5
    1a78:	0002      	movs	r2, r0
    1a7a:	000b      	movs	r3, r1
    1a7c:	0030      	movs	r0, r6
    1a7e:	0039      	movs	r1, r7
    1a80:	47a0      	blx	r4
    1a82:	9a02      	ldr	r2, [sp, #8]
    1a84:	9b03      	ldr	r3, [sp, #12]
    1a86:	0006      	movs	r6, r0
    1a88:	000f      	movs	r7, r1
    1a8a:	9824      	ldr	r0, [sp, #144]	; 0x90
    1a8c:	9925      	ldr	r1, [sp, #148]	; 0x94
    1a8e:	47a8      	blx	r5
    1a90:	0002      	movs	r2, r0
    1a92:	000b      	movs	r3, r1
    1a94:	0030      	movs	r0, r6
    1a96:	0039      	movs	r1, r7
    1a98:	47a0      	blx	r4

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
    1a9a:	4a1f      	ldr	r2, [pc, #124]	; (1b18 <computeKalmanGains+0x378>)
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];
    1a9c:	9002      	str	r0, [sp, #8]
    1a9e:	9103      	str	r1, [sp, #12]

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
    1aa0:	9812      	ldr	r0, [sp, #72]	; 0x48
    1aa2:	9913      	ldr	r1, [sp, #76]	; 0x4c
    1aa4:	4b1d      	ldr	r3, [pc, #116]	; (1b1c <computeKalmanGains+0x37c>)
    1aa6:	47a8      	blx	r5
    1aa8:	9a16      	ldr	r2, [sp, #88]	; 0x58
    1aaa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    1aac:	47a0      	blx	r4
    1aae:	4a1c      	ldr	r2, [pc, #112]	; (1b20 <computeKalmanGains+0x380>)
    1ab0:	0006      	movs	r6, r0
    1ab2:	000f      	movs	r7, r1
    1ab4:	9814      	ldr	r0, [sp, #80]	; 0x50
    1ab6:	9915      	ldr	r1, [sp, #84]	; 0x54
    1ab8:	4b1a      	ldr	r3, [pc, #104]	; (1b24 <computeKalmanGains+0x384>)
    1aba:	47a8      	blx	r5
    1abc:	0002      	movs	r2, r0
    1abe:	000b      	movs	r3, r1
    1ac0:	0030      	movs	r0, r6
    1ac2:	0039      	movs	r1, r7
    1ac4:	47a0      	blx	r4
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
    1ac6:	2200      	movs	r2, #0
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
    1ac8:	9008      	str	r0, [sp, #32]
    1aca:	9109      	str	r1, [sp, #36]	; 0x24
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
    1acc:	9816      	ldr	r0, [sp, #88]	; 0x58
    1ace:	9917      	ldr	r1, [sp, #92]	; 0x5c
    1ad0:	2300      	movs	r3, #0
    1ad2:	47a8      	blx	r5
    1ad4:	0006      	movs	r6, r0
    1ad6:	000f      	movs	r7, r1
    1ad8:	0002      	movs	r2, r0
    1ada:	000b      	movs	r3, r1
    1adc:	9812      	ldr	r0, [sp, #72]	; 0x48
    1ade:	9913      	ldr	r1, [sp, #76]	; 0x4c
    1ae0:	47a0      	blx	r4
    1ae2:	4a0d      	ldr	r2, [pc, #52]	; (1b18 <computeKalmanGains+0x378>)
    1ae4:	9000      	str	r0, [sp, #0]
    1ae6:	9101      	str	r1, [sp, #4]
    1ae8:	9814      	ldr	r0, [sp, #80]	; 0x50
    1aea:	9915      	ldr	r1, [sp, #84]	; 0x54
    1aec:	4b0b      	ldr	r3, [pc, #44]	; (1b1c <computeKalmanGains+0x37c>)
    1aee:	47a8      	blx	r5
    1af0:	0002      	movs	r2, r0
    1af2:	000b      	movs	r3, r1
    1af4:	9800      	ldr	r0, [sp, #0]
    1af6:	9901      	ldr	r1, [sp, #4]
    1af8:	47a0      	blx	r4
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
    1afa:	2200      	movs	r2, #0
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
    1afc:	9030      	str	r0, [sp, #192]	; 0xc0
    1afe:	9131      	str	r1, [sp, #196]	; 0xc4
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
    1b00:	9812      	ldr	r0, [sp, #72]	; 0x48
    1b02:	9913      	ldr	r1, [sp, #76]	; 0x4c
    1b04:	2300      	movs	r3, #0
    1b06:	47a8      	blx	r5
    1b08:	0032      	movs	r2, r6
    1b0a:	003b      	movs	r3, r7
    1b0c:	47a0      	blx	r4
    1b0e:	9a14      	ldr	r2, [sp, #80]	; 0x50
    1b10:	9b15      	ldr	r3, [sp, #84]	; 0x54
    1b12:	e017      	b.n	1b44 <computeKalmanGains+0x3a4>
    1b14:	20000010 	.word	0x20000010
    1b18:	47ae147b 	.word	0x47ae147b
    1b1c:	3f747ae1 	.word	0x3f747ae1
    1b20:	eb1c432d 	.word	0xeb1c432d
    1b24:	3eea36e2 	.word	0x3eea36e2
    1b28:	20000280 	.word	0x20000280
    1b2c:	d2f1a9fc 	.word	0xd2f1a9fc
    1b30:	3f50624d 	.word	0x3f50624d
    1b34:	3ff00000 	.word	0x3ff00000
    1b38:	40220000 	.word	0x40220000
    1b3c:	000054b9 	.word	0x000054b9
    1b40:	00004619 	.word	0x00004619
    1b44:	47a0      	blx	r4
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
    1b46:	4ad9      	ldr	r2, [pc, #868]	; (1eac <computeKalmanGains+0x70c>)
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
    1b48:	9112      	str	r1, [sp, #72]	; 0x48
    1b4a:	9004      	str	r0, [sp, #16]
    1b4c:	9116      	str	r1, [sp, #88]	; 0x58
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
    1b4e:	4bd8      	ldr	r3, [pc, #864]	; (1eb0 <computeKalmanGains+0x710>)
    1b50:	9826      	ldr	r0, [sp, #152]	; 0x98
    1b52:	9927      	ldr	r1, [sp, #156]	; 0x9c
    1b54:	47a8      	blx	r5
    1b56:	9a18      	ldr	r2, [sp, #96]	; 0x60
    1b58:	9b19      	ldr	r3, [sp, #100]	; 0x64
    1b5a:	47a0      	blx	r4
    1b5c:	4ad5      	ldr	r2, [pc, #852]	; (1eb4 <computeKalmanGains+0x714>)
    1b5e:	0006      	movs	r6, r0
    1b60:	000f      	movs	r7, r1
    1b62:	9828      	ldr	r0, [sp, #160]	; 0xa0
    1b64:	9929      	ldr	r1, [sp, #164]	; 0xa4
    1b66:	4bd4      	ldr	r3, [pc, #848]	; (1eb8 <computeKalmanGains+0x718>)
    1b68:	47a8      	blx	r5
    1b6a:	0002      	movs	r2, r0
    1b6c:	000b      	movs	r3, r1
    1b6e:	0030      	movs	r0, r6
    1b70:	0039      	movs	r1, r7
    1b72:	47a0      	blx	r4
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
    1b74:	2200      	movs	r2, #0
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
    1b76:	902a      	str	r0, [sp, #168]	; 0xa8
    1b78:	912b      	str	r1, [sp, #172]	; 0xac
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
    1b7a:	9818      	ldr	r0, [sp, #96]	; 0x60
    1b7c:	9919      	ldr	r1, [sp, #100]	; 0x64
    1b7e:	2300      	movs	r3, #0
    1b80:	47a8      	blx	r5
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
    1b82:	2200      	movs	r2, #0

        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
    1b84:	9032      	str	r0, [sp, #200]	; 0xc8
    1b86:	9133      	str	r1, [sp, #204]	; 0xcc
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
    1b88:	9826      	ldr	r0, [sp, #152]	; 0x98
    1b8a:	9927      	ldr	r1, [sp, #156]	; 0x9c
    1b8c:	2300      	movs	r3, #0
    1b8e:	47a8      	blx	r5
    1b90:	9a32      	ldr	r2, [sp, #200]	; 0xc8
    1b92:	9b33      	ldr	r3, [sp, #204]	; 0xcc
    1b94:	47a0      	blx	r4
    1b96:	9a28      	ldr	r2, [sp, #160]	; 0xa0
    1b98:	9b29      	ldr	r3, [sp, #164]	; 0xa4
    1b9a:	47a0      	blx	r4
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
    1b9c:	4ac3      	ldr	r2, [pc, #780]	; (1eac <computeKalmanGains+0x70c>)
        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
    1b9e:	902c      	str	r0, [sp, #176]	; 0xb0
    1ba0:	912d      	str	r1, [sp, #180]	; 0xb4
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
    1ba2:	9806      	ldr	r0, [sp, #24]
    1ba4:	9907      	ldr	r1, [sp, #28]
    1ba6:	4bc2      	ldr	r3, [pc, #776]	; (1eb0 <computeKalmanGains+0x710>)
    1ba8:	47a8      	blx	r5
    1baa:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
    1bac:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
    1bae:	47a0      	blx	r4
    1bb0:	4ac0      	ldr	r2, [pc, #768]	; (1eb4 <computeKalmanGains+0x714>)
    1bb2:	0006      	movs	r6, r0
    1bb4:	000f      	movs	r7, r1
    1bb6:	9802      	ldr	r0, [sp, #8]
    1bb8:	9903      	ldr	r1, [sp, #12]
    1bba:	4bbf      	ldr	r3, [pc, #764]	; (1eb8 <computeKalmanGains+0x718>)
    1bbc:	47a8      	blx	r5
    1bbe:	0002      	movs	r2, r0
    1bc0:	000b      	movs	r3, r1
    1bc2:	0030      	movs	r0, r6
    1bc4:	0039      	movs	r1, r7
    1bc6:	47a0      	blx	r4
        pestp[2][1] = term[2][0] * phit[0][1] + term[2][1] * phit[1][1] + term[2][2] * phit[2][1];
    1bc8:	2200      	movs	r2, #0
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
    1bca:	9000      	str	r0, [sp, #0]
    1bcc:	9101      	str	r1, [sp, #4]
        pestp[2][1] = term[2][0] * phit[0][1] + term[2][1] * phit[1][1] + term[2][2] * phit[2][1];
    1bce:	982e      	ldr	r0, [sp, #184]	; 0xb8
    1bd0:	992f      	ldr	r1, [sp, #188]	; 0xbc
    1bd2:	2300      	movs	r3, #0
    1bd4:	47a8      	blx	r5
    1bd6:	0006      	movs	r6, r0
    1bd8:	000f      	movs	r7, r1
    1bda:	0002      	movs	r2, r0
    1bdc:	000b      	movs	r3, r1
    1bde:	9806      	ldr	r0, [sp, #24]
    1be0:	9907      	ldr	r1, [sp, #28]
    1be2:	47a0      	blx	r4
    1be4:	4ab1      	ldr	r2, [pc, #708]	; (1eac <computeKalmanGains+0x70c>)
    1be6:	900a      	str	r0, [sp, #40]	; 0x28
    1be8:	910b      	str	r1, [sp, #44]	; 0x2c
    1bea:	9802      	ldr	r0, [sp, #8]
    1bec:	9903      	ldr	r1, [sp, #12]
    1bee:	4bb0      	ldr	r3, [pc, #704]	; (1eb0 <computeKalmanGains+0x710>)
    1bf0:	47a8      	blx	r5
    1bf2:	0002      	movs	r2, r0
    1bf4:	000b      	movs	r3, r1
    1bf6:	980a      	ldr	r0, [sp, #40]	; 0x28
    1bf8:	990b      	ldr	r1, [sp, #44]	; 0x2c
    1bfa:	47a0      	blx	r4
        pestp[2][2] = term[2][0] * phit[0][2] + term[2][1] * phit[1][2] + term[2][2] * phit[2][2];

        pestp[2][2] = pestp[2][2] + model_variance;
    1bfc:	2200      	movs	r2, #0
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
        pestp[2][1] = term[2][0] * phit[0][1] + term[2][1] * phit[1][1] + term[2][2] * phit[2][1];
    1bfe:	9010      	str	r0, [sp, #64]	; 0x40
    1c00:	9111      	str	r1, [sp, #68]	; 0x44
        pestp[2][2] = term[2][0] * phit[0][2] + term[2][1] * phit[1][2] + term[2][2] * phit[2][2];

        pestp[2][2] = pestp[2][2] + model_variance;
    1c02:	9806      	ldr	r0, [sp, #24]
    1c04:	9907      	ldr	r1, [sp, #28]
    1c06:	2300      	movs	r3, #0
    1c08:	47a8      	blx	r5
    1c0a:	0032      	movs	r2, r6
    1c0c:	003b      	movs	r3, r7
    1c0e:	47a0      	blx	r4
    1c10:	9a02      	ldr	r2, [sp, #8]
    1c12:	9b03      	ldr	r3, [sp, #12]
    1c14:	47a0      	blx	r4
    1c16:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
    1c18:	9b3b      	ldr	r3, [sp, #236]	; 0xec
    1c1a:	47a0      	blx	r4
        /*
          Calculate Kalman Gain
        */
        det = (pestp[0][0]+altitude_variance)*(pestp[2][2] + acceleration_variance) - pestp[2][0] * pestp[0][2];
    1c1c:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
    1c1e:	9b3d      	ldr	r3, [sp, #244]	; 0xf4
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
        pestp[2][1] = term[2][0] * phit[0][1] + term[2][1] * phit[1][1] + term[2][2] * phit[2][1];
        pestp[2][2] = term[2][0] * phit[0][2] + term[2][1] * phit[1][2] + term[2][2] * phit[2][2];

        pestp[2][2] = pestp[2][2] + model_variance;
    1c20:	9002      	str	r0, [sp, #8]
    1c22:	9103      	str	r1, [sp, #12]
        /*
          Calculate Kalman Gain
        */
        det = (pestp[0][0]+altitude_variance)*(pestp[2][2] + acceleration_variance) - pestp[2][0] * pestp[0][2];
    1c24:	9808      	ldr	r0, [sp, #32]
    1c26:	9909      	ldr	r1, [sp, #36]	; 0x24
    1c28:	47a0      	blx	r4
    1c2a:	9a3e      	ldr	r2, [sp, #248]	; 0xf8
    1c2c:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
    1c2e:	900a      	str	r0, [sp, #40]	; 0x28
    1c30:	910b      	str	r1, [sp, #44]	; 0x2c
    1c32:	9802      	ldr	r0, [sp, #8]
    1c34:	9903      	ldr	r1, [sp, #12]
    1c36:	47a0      	blx	r4
    1c38:	9a00      	ldr	r2, [sp, #0]
    1c3a:	9b01      	ldr	r3, [sp, #4]
    1c3c:	900c      	str	r0, [sp, #48]	; 0x30
    1c3e:	910d      	str	r1, [sp, #52]	; 0x34
    1c40:	9804      	ldr	r0, [sp, #16]
    1c42:	9916      	ldr	r1, [sp, #88]	; 0x58
    1c44:	47a8      	blx	r5
    1c46:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1c48:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1c4a:	900e      	str	r0, [sp, #56]	; 0x38
    1c4c:	910f      	str	r1, [sp, #60]	; 0x3c
    1c4e:	980a      	ldr	r0, [sp, #40]	; 0x28
    1c50:	990b      	ldr	r1, [sp, #44]	; 0x2c
    1c52:	47a8      	blx	r5
    1c54:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    1c56:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1c58:	4e98      	ldr	r6, [pc, #608]	; (1ebc <computeKalmanGains+0x71c>)
    1c5a:	47b0      	blx	r6

        kgain[0][0] = (pestp[0][0] * (pestp[2][2] + acceleration_variance) - pestp[0][2] * pestp[2][0])/det;
    1c5c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1c5e:	9b0d      	ldr	r3, [sp, #52]	; 0x34

        pestp[2][2] = pestp[2][2] + model_variance;
        /*
          Calculate Kalman Gain
        */
        det = (pestp[0][0]+altitude_variance)*(pestp[2][2] + acceleration_variance) - pestp[2][0] * pestp[0][2];
    1c60:	9006      	str	r0, [sp, #24]
    1c62:	9107      	str	r1, [sp, #28]

        kgain[0][0] = (pestp[0][0] * (pestp[2][2] + acceleration_variance) - pestp[0][2] * pestp[2][0])/det;
    1c64:	9808      	ldr	r0, [sp, #32]
    1c66:	9909      	ldr	r1, [sp, #36]	; 0x24
    1c68:	47a8      	blx	r5
    1c6a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    1c6c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1c6e:	47b0      	blx	r6
    1c70:	9a06      	ldr	r2, [sp, #24]
    1c72:	9b07      	ldr	r3, [sp, #28]
    1c74:	4e92      	ldr	r6, [pc, #584]	; (1ec0 <computeKalmanGains+0x720>)
    1c76:	47b0      	blx	r6
    1c78:	9034      	str	r0, [sp, #208]	; 0xd0
    1c7a:	9135      	str	r1, [sp, #212]	; 0xd4
    1c7c:	9a34      	ldr	r2, [sp, #208]	; 0xd0
    1c7e:	9b35      	ldr	r3, [sp, #212]	; 0xd4
    1c80:	4990      	ldr	r1, [pc, #576]	; (1ec4 <computeKalmanGains+0x724>)
    1c82:	600a      	str	r2, [r1, #0]
    1c84:	604b      	str	r3, [r1, #4]
        kgain[0][1] = (pestp[0][0] * (-pestp[0][2]) + pestp[0][2] * (pestp[0][0] + altitude_variance))/det;
    1c86:	9808      	ldr	r0, [sp, #32]
    1c88:	9909      	ldr	r1, [sp, #36]	; 0x24
    1c8a:	2280      	movs	r2, #128	; 0x80
    1c8c:	0612      	lsls	r2, r2, #24
    1c8e:	4694      	mov	ip, r2
    1c90:	9b12      	ldr	r3, [sp, #72]	; 0x48
    1c92:	9a04      	ldr	r2, [sp, #16]
    1c94:	4463      	add	r3, ip
    1c96:	932e      	str	r3, [sp, #184]	; 0xb8
    1c98:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    1c9a:	47a8      	blx	r5
    1c9c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    1c9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1ca0:	0006      	movs	r6, r0
    1ca2:	000f      	movs	r7, r1
    1ca4:	9804      	ldr	r0, [sp, #16]
    1ca6:	9916      	ldr	r1, [sp, #88]	; 0x58
    1ca8:	47a8      	blx	r5
    1caa:	0002      	movs	r2, r0
    1cac:	000b      	movs	r3, r1
    1cae:	0030      	movs	r0, r6
    1cb0:	0039      	movs	r1, r7
    1cb2:	47a0      	blx	r4
    1cb4:	9a06      	ldr	r2, [sp, #24]
    1cb6:	9b07      	ldr	r3, [sp, #28]
    1cb8:	4e81      	ldr	r6, [pc, #516]	; (1ec0 <computeKalmanGains+0x720>)
    1cba:	47b0      	blx	r6
    1cbc:	900e      	str	r0, [sp, #56]	; 0x38
    1cbe:	910f      	str	r1, [sp, #60]	; 0x3c
    1cc0:	4980      	ldr	r1, [pc, #512]	; (1ec4 <computeKalmanGains+0x724>)
    1cc2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    1cc4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1cc6:	608a      	str	r2, [r1, #8]
    1cc8:	60cb      	str	r3, [r1, #12]
        kgain[1][0] = (pestp[1][0] * (pestp[2][2] + acceleration_variance) - pestp[1][2] * pestp[2][0])/det;
    1cca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1ccc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1cce:	982a      	ldr	r0, [sp, #168]	; 0xa8
    1cd0:	992b      	ldr	r1, [sp, #172]	; 0xac
    1cd2:	47a8      	blx	r5
    1cd4:	9a00      	ldr	r2, [sp, #0]
    1cd6:	9b01      	ldr	r3, [sp, #4]
    1cd8:	0006      	movs	r6, r0
    1cda:	000f      	movs	r7, r1
    1cdc:	982c      	ldr	r0, [sp, #176]	; 0xb0
    1cde:	992d      	ldr	r1, [sp, #180]	; 0xb4
    1ce0:	47a8      	blx	r5
    1ce2:	0002      	movs	r2, r0
    1ce4:	000b      	movs	r3, r1
    1ce6:	0030      	movs	r0, r6
    1ce8:	0039      	movs	r1, r7
    1cea:	4e74      	ldr	r6, [pc, #464]	; (1ebc <computeKalmanGains+0x71c>)
    1cec:	47b0      	blx	r6
    1cee:	9a06      	ldr	r2, [sp, #24]
    1cf0:	9b07      	ldr	r3, [sp, #28]
    1cf2:	4e73      	ldr	r6, [pc, #460]	; (1ec0 <computeKalmanGains+0x720>)
    1cf4:	47b0      	blx	r6
    1cf6:	0002      	movs	r2, r0
    1cf8:	000b      	movs	r3, r1
    1cfa:	9139      	str	r1, [sp, #228]	; 0xe4
    1cfc:	4971      	ldr	r1, [pc, #452]	; (1ec4 <computeKalmanGains+0x724>)
    1cfe:	9018      	str	r0, [sp, #96]	; 0x60
    1d00:	610a      	str	r2, [r1, #16]
    1d02:	614b      	str	r3, [r1, #20]
        kgain[1][1] = (pestp[1][0] * (-pestp[0][2]) + pestp[1][2] * (pestp[0][0] + altitude_variance))/det;
    1d04:	982a      	ldr	r0, [sp, #168]	; 0xa8
    1d06:	992b      	ldr	r1, [sp, #172]	; 0xac
    1d08:	9a04      	ldr	r2, [sp, #16]
    1d0a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    1d0c:	47a8      	blx	r5
    1d0e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    1d10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1d12:	0006      	movs	r6, r0
    1d14:	000f      	movs	r7, r1
    1d16:	982c      	ldr	r0, [sp, #176]	; 0xb0
    1d18:	992d      	ldr	r1, [sp, #180]	; 0xb4
    1d1a:	47a8      	blx	r5
    1d1c:	0002      	movs	r2, r0
    1d1e:	000b      	movs	r3, r1
    1d20:	0030      	movs	r0, r6
    1d22:	0039      	movs	r1, r7
    1d24:	47a0      	blx	r4
    1d26:	9a06      	ldr	r2, [sp, #24]
    1d28:	9b07      	ldr	r3, [sp, #28]
    1d2a:	4e65      	ldr	r6, [pc, #404]	; (1ec0 <computeKalmanGains+0x720>)
    1d2c:	47b0      	blx	r6
    1d2e:	9012      	str	r0, [sp, #72]	; 0x48
    1d30:	9113      	str	r1, [sp, #76]	; 0x4c
    1d32:	9a12      	ldr	r2, [sp, #72]	; 0x48
    1d34:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    1d36:	4963      	ldr	r1, [pc, #396]	; (1ec4 <computeKalmanGains+0x724>)
    1d38:	618a      	str	r2, [r1, #24]
    1d3a:	61cb      	str	r3, [r1, #28]
        kgain[2][0] = (pestp[2][0] * (pestp[2][2] + acceleration_variance) - pestp[2][2] * pestp[2][0])/det;
    1d3c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1d3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1d40:	9800      	ldr	r0, [sp, #0]
    1d42:	9901      	ldr	r1, [sp, #4]
    1d44:	47a8      	blx	r5
    1d46:	9a02      	ldr	r2, [sp, #8]
    1d48:	9b03      	ldr	r3, [sp, #12]
    1d4a:	0006      	movs	r6, r0
    1d4c:	000f      	movs	r7, r1
    1d4e:	9800      	ldr	r0, [sp, #0]
    1d50:	9901      	ldr	r1, [sp, #4]
    1d52:	47a8      	blx	r5
    1d54:	0002      	movs	r2, r0
    1d56:	000b      	movs	r3, r1
    1d58:	0030      	movs	r0, r6
    1d5a:	0039      	movs	r1, r7
    1d5c:	4e57      	ldr	r6, [pc, #348]	; (1ebc <computeKalmanGains+0x71c>)
    1d5e:	47b0      	blx	r6
    1d60:	9a06      	ldr	r2, [sp, #24]
    1d62:	9b07      	ldr	r3, [sp, #28]
    1d64:	4e56      	ldr	r6, [pc, #344]	; (1ec0 <computeKalmanGains+0x720>)
    1d66:	47b0      	blx	r6
    1d68:	9014      	str	r0, [sp, #80]	; 0x50
    1d6a:	9115      	str	r1, [sp, #84]	; 0x54
    1d6c:	9a14      	ldr	r2, [sp, #80]	; 0x50
    1d6e:	9b15      	ldr	r3, [sp, #84]	; 0x54
    1d70:	4954      	ldr	r1, [pc, #336]	; (1ec4 <computeKalmanGains+0x724>)
    1d72:	620a      	str	r2, [r1, #32]
    1d74:	624b      	str	r3, [r1, #36]	; 0x24
        kgain[2][1] = (pestp[2][0] * (-pestp[0][2]) + pestp[2][2] * (pestp[0][0] + altitude_variance))/det;
    1d76:	9800      	ldr	r0, [sp, #0]
    1d78:	9901      	ldr	r1, [sp, #4]
    1d7a:	9a04      	ldr	r2, [sp, #16]
    1d7c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    1d7e:	47a8      	blx	r5
    1d80:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    1d82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1d84:	0006      	movs	r6, r0
    1d86:	000f      	movs	r7, r1
    1d88:	9802      	ldr	r0, [sp, #8]
    1d8a:	9903      	ldr	r1, [sp, #12]
    1d8c:	47a8      	blx	r5
    1d8e:	0002      	movs	r2, r0
    1d90:	000b      	movs	r3, r1
    1d92:	0030      	movs	r0, r6
    1d94:	0039      	movs	r1, r7
    1d96:	47a0      	blx	r4
    1d98:	9a06      	ldr	r2, [sp, #24]
    1d9a:	9b07      	ldr	r3, [sp, #28]
    1d9c:	4e48      	ldr	r6, [pc, #288]	; (1ec0 <computeKalmanGains+0x720>)
    1d9e:	47b0      	blx	r6
    1da0:	9036      	str	r0, [sp, #216]	; 0xd8
    1da2:	9137      	str	r1, [sp, #220]	; 0xdc
    1da4:	9a36      	ldr	r2, [sp, #216]	; 0xd8
    1da6:	9b37      	ldr	r3, [sp, #220]	; 0xdc
    1da8:	4946      	ldr	r1, [pc, #280]	; (1ec4 <computeKalmanGains+0x724>)

        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
    1daa:	4e44      	ldr	r6, [pc, #272]	; (1ebc <computeKalmanGains+0x71c>)
        kgain[0][0] = (pestp[0][0] * (pestp[2][2] + acceleration_variance) - pestp[0][2] * pestp[2][0])/det;
        kgain[0][1] = (pestp[0][0] * (-pestp[0][2]) + pestp[0][2] * (pestp[0][0] + altitude_variance))/det;
        kgain[1][0] = (pestp[1][0] * (pestp[2][2] + acceleration_variance) - pestp[1][2] * pestp[2][0])/det;
        kgain[1][1] = (pestp[1][0] * (-pestp[0][2]) + pestp[1][2] * (pestp[0][0] + altitude_variance))/det;
        kgain[2][0] = (pestp[2][0] * (pestp[2][2] + acceleration_variance) - pestp[2][2] * pestp[2][0])/det;
        kgain[2][1] = (pestp[2][0] * (-pestp[0][2]) + pestp[2][2] * (pestp[0][0] + altitude_variance))/det;
    1dac:	628a      	str	r2, [r1, #40]	; 0x28
    1dae:	62cb      	str	r3, [r1, #44]	; 0x2c

        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
    1db0:	9a34      	ldr	r2, [sp, #208]	; 0xd0
    1db2:	9b35      	ldr	r3, [sp, #212]	; 0xd4
    1db4:	2000      	movs	r0, #0
    1db6:	4944      	ldr	r1, [pc, #272]	; (1ec8 <computeKalmanGains+0x728>)
    1db8:	47b0      	blx	r6
    1dba:	0002      	movs	r2, r0
    1dbc:	000b      	movs	r3, r1
    1dbe:	900c      	str	r0, [sp, #48]	; 0x30
    1dc0:	910d      	str	r1, [sp, #52]	; 0x34
    1dc2:	9808      	ldr	r0, [sp, #32]
    1dc4:	9909      	ldr	r1, [sp, #36]	; 0x24
    1dc6:	47a8      	blx	r5
    1dc8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    1dca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1dcc:	0006      	movs	r6, r0
    1dce:	000f      	movs	r7, r1
    1dd0:	9800      	ldr	r0, [sp, #0]
    1dd2:	9901      	ldr	r1, [sp, #4]
    1dd4:	47a8      	blx	r5
    1dd6:	0002      	movs	r2, r0
    1dd8:	000b      	movs	r3, r1
    1dda:	0030      	movs	r0, r6
    1ddc:	0039      	movs	r1, r7
    1dde:	4e37      	ldr	r6, [pc, #220]	; (1ebc <computeKalmanGains+0x71c>)
    1de0:	47b0      	blx	r6
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
    1de2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1de4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
        kgain[1][0] = (pestp[1][0] * (pestp[2][2] + acceleration_variance) - pestp[1][2] * pestp[2][0])/det;
        kgain[1][1] = (pestp[1][0] * (-pestp[0][2]) + pestp[1][2] * (pestp[0][0] + altitude_variance))/det;
        kgain[2][0] = (pestp[2][0] * (pestp[2][2] + acceleration_variance) - pestp[2][2] * pestp[2][0])/det;
        kgain[2][1] = (pestp[2][0] * (-pestp[0][2]) + pestp[2][2] * (pestp[0][0] + altitude_variance))/det;

        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
    1de6:	9006      	str	r0, [sp, #24]
    1de8:	9107      	str	r1, [sp, #28]
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
    1dea:	9830      	ldr	r0, [sp, #192]	; 0xc0
    1dec:	9931      	ldr	r1, [sp, #196]	; 0xc4
    1dee:	47a8      	blx	r5
    1df0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    1df2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1df4:	0006      	movs	r6, r0
    1df6:	000f      	movs	r7, r1
    1df8:	9810      	ldr	r0, [sp, #64]	; 0x40
    1dfa:	9911      	ldr	r1, [sp, #68]	; 0x44
    1dfc:	47a8      	blx	r5
    1dfe:	0002      	movs	r2, r0
    1e00:	000b      	movs	r3, r1
    1e02:	0030      	movs	r0, r6
    1e04:	0039      	movs	r1, r7
    1e06:	4e2d      	ldr	r6, [pc, #180]	; (1ebc <computeKalmanGains+0x71c>)
    1e08:	47b0      	blx	r6
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
    1e0a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1e0c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
        kgain[1][1] = (pestp[1][0] * (-pestp[0][2]) + pestp[1][2] * (pestp[0][0] + altitude_variance))/det;
        kgain[2][0] = (pestp[2][0] * (pestp[2][2] + acceleration_variance) - pestp[2][2] * pestp[2][0])/det;
        kgain[2][1] = (pestp[2][0] * (-pestp[0][2]) + pestp[2][2] * (pestp[0][0] + altitude_variance))/det;

        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
    1e0e:	900a      	str	r0, [sp, #40]	; 0x28
    1e10:	910b      	str	r1, [sp, #44]	; 0x2c
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
    1e12:	9804      	ldr	r0, [sp, #16]
    1e14:	9916      	ldr	r1, [sp, #88]	; 0x58
    1e16:	47a8      	blx	r5
    1e18:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    1e1a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1e1c:	0006      	movs	r6, r0
    1e1e:	000f      	movs	r7, r1
    1e20:	9802      	ldr	r0, [sp, #8]
    1e22:	9903      	ldr	r1, [sp, #12]
    1e24:	47a8      	blx	r5
    1e26:	0002      	movs	r2, r0
    1e28:	000b      	movs	r3, r1
    1e2a:	0030      	movs	r0, r6
    1e2c:	0039      	movs	r1, r7
    1e2e:	4e23      	ldr	r6, [pc, #140]	; (1ebc <computeKalmanGains+0x71c>)
    1e30:	47b0      	blx	r6
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
    1e32:	2280      	movs	r2, #128	; 0x80
    1e34:	0612      	lsls	r2, r2, #24
    1e36:	4694      	mov	ip, r2
    1e38:	9b39      	ldr	r3, [sp, #228]	; 0xe4
    1e3a:	9a18      	ldr	r2, [sp, #96]	; 0x60
    1e3c:	4463      	add	r3, ip
    1e3e:	932e      	str	r3, [sp, #184]	; 0xb8
    1e40:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
        kgain[2][0] = (pestp[2][0] * (pestp[2][2] + acceleration_variance) - pestp[2][2] * pestp[2][0])/det;
        kgain[2][1] = (pestp[2][0] * (-pestp[0][2]) + pestp[2][2] * (pestp[0][0] + altitude_variance))/det;

        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
    1e42:	900c      	str	r0, [sp, #48]	; 0x30
    1e44:	910d      	str	r1, [sp, #52]	; 0x34
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
    1e46:	9808      	ldr	r0, [sp, #32]
    1e48:	9909      	ldr	r1, [sp, #36]	; 0x24
    1e4a:	47a8      	blx	r5
    1e4c:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
    1e4e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
    1e50:	47a0      	blx	r4
    1e52:	9a12      	ldr	r2, [sp, #72]	; 0x48
    1e54:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    1e56:	0006      	movs	r6, r0
    1e58:	000f      	movs	r7, r1
    1e5a:	9800      	ldr	r0, [sp, #0]
    1e5c:	9901      	ldr	r1, [sp, #4]
    1e5e:	47a8      	blx	r5
    1e60:	0002      	movs	r2, r0
    1e62:	000b      	movs	r3, r1
    1e64:	0030      	movs	r0, r6
    1e66:	0039      	movs	r1, r7
    1e68:	4e14      	ldr	r6, [pc, #80]	; (1ebc <computeKalmanGains+0x71c>)
    1e6a:	47b0      	blx	r6
        pest[1][1] = pestp[0][1] * (-kgain[1][0]) + pestp[1][1] - kgain[1][1]*pestp[2][1];
    1e6c:	9a32      	ldr	r2, [sp, #200]	; 0xc8
    1e6e:	9b33      	ldr	r3, [sp, #204]	; 0xcc
        kgain[2][1] = (pestp[2][0] * (-pestp[0][2]) + pestp[2][2] * (pestp[0][0] + altitude_variance))/det;

        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
    1e70:	9008      	str	r0, [sp, #32]
    1e72:	9109      	str	r1, [sp, #36]	; 0x24
        pest[1][1] = pestp[0][1] * (-kgain[1][0]) + pestp[1][1] - kgain[1][1]*pestp[2][1];
    1e74:	9826      	ldr	r0, [sp, #152]	; 0x98
    1e76:	9927      	ldr	r1, [sp, #156]	; 0x9c
    1e78:	47a0      	blx	r4
    1e7a:	4a0c      	ldr	r2, [pc, #48]	; (1eac <computeKalmanGains+0x70c>)
    1e7c:	0006      	movs	r6, r0
    1e7e:	000f      	movs	r7, r1
    1e80:	9828      	ldr	r0, [sp, #160]	; 0xa0
    1e82:	9929      	ldr	r1, [sp, #164]	; 0xa4
    1e84:	4b0a      	ldr	r3, [pc, #40]	; (1eb0 <computeKalmanGains+0x710>)
    1e86:	47a8      	blx	r5
    1e88:	0002      	movs	r2, r0
    1e8a:	000b      	movs	r3, r1
    1e8c:	0030      	movs	r0, r6
    1e8e:	0039      	movs	r1, r7
    1e90:	47a0      	blx	r4
    1e92:	9a18      	ldr	r2, [sp, #96]	; 0x60
    1e94:	0006      	movs	r6, r0
    1e96:	000f      	movs	r7, r1
    1e98:	9830      	ldr	r0, [sp, #192]	; 0xc0
    1e9a:	9931      	ldr	r1, [sp, #196]	; 0xc4
    1e9c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    1e9e:	47a8      	blx	r5
    1ea0:	0002      	movs	r2, r0
    1ea2:	000b      	movs	r3, r1
    1ea4:	0030      	movs	r0, r6
    1ea6:	0039      	movs	r1, r7
    1ea8:	47a0      	blx	r4
    1eaa:	e00f      	b.n	1ecc <computeKalmanGains+0x72c>
    1eac:	47ae147b 	.word	0x47ae147b
    1eb0:	3f747ae1 	.word	0x3f747ae1
    1eb4:	eb1c432d 	.word	0xeb1c432d
    1eb8:	3eea36e2 	.word	0x3eea36e2
    1ebc:	000059ad 	.word	0x000059ad
    1ec0:	00004c71 	.word	0x00004c71
    1ec4:	20000280 	.word	0x20000280
    1ec8:	3ff00000 	.word	0x3ff00000
    1ecc:	9a12      	ldr	r2, [sp, #72]	; 0x48
    1ece:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    1ed0:	0006      	movs	r6, r0
    1ed2:	000f      	movs	r7, r1
    1ed4:	9810      	ldr	r0, [sp, #64]	; 0x40
    1ed6:	9911      	ldr	r1, [sp, #68]	; 0x44
    1ed8:	47a8      	blx	r5
    1eda:	0002      	movs	r2, r0
    1edc:	000b      	movs	r3, r1
    1ede:	0030      	movs	r0, r6
    1ee0:	0039      	movs	r1, r7
    1ee2:	4e50      	ldr	r6, [pc, #320]	; (2024 <STACK_SIZE+0x24>)
    1ee4:	47b0      	blx	r6
        pest[1][2] = pestp[0][2] * (-kgain[1][0]) + pestp[1][2] - kgain[1][1]*pestp[2][2];
    1ee6:	9a18      	ldr	r2, [sp, #96]	; 0x60

        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
        pest[1][1] = pestp[0][1] * (-kgain[1][0]) + pestp[1][1] - kgain[1][1]*pestp[2][1];
    1ee8:	900e      	str	r0, [sp, #56]	; 0x38
    1eea:	910f      	str	r1, [sp, #60]	; 0x3c
        pest[1][2] = pestp[0][2] * (-kgain[1][0]) + pestp[1][2] - kgain[1][1]*pestp[2][2];
    1eec:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    1eee:	9804      	ldr	r0, [sp, #16]
    1ef0:	9916      	ldr	r1, [sp, #88]	; 0x58
    1ef2:	47a8      	blx	r5
    1ef4:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
    1ef6:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    1ef8:	47a0      	blx	r4
    1efa:	9a12      	ldr	r2, [sp, #72]	; 0x48
    1efc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    1efe:	0006      	movs	r6, r0
    1f00:	000f      	movs	r7, r1
    1f02:	9802      	ldr	r0, [sp, #8]
    1f04:	9903      	ldr	r1, [sp, #12]
    1f06:	47a8      	blx	r5
    1f08:	4c46      	ldr	r4, [pc, #280]	; (2024 <STACK_SIZE+0x24>)
    1f0a:	0002      	movs	r2, r0
    1f0c:	000b      	movs	r3, r1
    1f0e:	0030      	movs	r0, r6
    1f10:	0039      	movs	r1, r7
    1f12:	47a0      	blx	r4
        pest[2][0] = (1.0 - kgain[2][1]) * pestp[2][0] - kgain[2][0] * pestp[2][0];
    1f14:	9a36      	ldr	r2, [sp, #216]	; 0xd8
    1f16:	9b37      	ldr	r3, [sp, #220]	; 0xdc
        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
        pest[1][1] = pestp[0][1] * (-kgain[1][0]) + pestp[1][1] - kgain[1][1]*pestp[2][1];
        pest[1][2] = pestp[0][2] * (-kgain[1][0]) + pestp[1][2] - kgain[1][1]*pestp[2][2];
    1f18:	9004      	str	r0, [sp, #16]
    1f1a:	9105      	str	r1, [sp, #20]
        pest[2][0] = (1.0 - kgain[2][1]) * pestp[2][0] - kgain[2][0] * pestp[2][0];
    1f1c:	2000      	movs	r0, #0
    1f1e:	4942      	ldr	r1, [pc, #264]	; (2028 <STACK_SIZE+0x28>)
    1f20:	47a0      	blx	r4
    1f22:	0002      	movs	r2, r0
    1f24:	000b      	movs	r3, r1
    1f26:	9012      	str	r0, [sp, #72]	; 0x48
    1f28:	9113      	str	r1, [sp, #76]	; 0x4c
    1f2a:	9800      	ldr	r0, [sp, #0]
    1f2c:	9901      	ldr	r1, [sp, #4]
    1f2e:	47a8      	blx	r5
    1f30:	9a14      	ldr	r2, [sp, #80]	; 0x50
    1f32:	9b15      	ldr	r3, [sp, #84]	; 0x54
    1f34:	0006      	movs	r6, r0
    1f36:	000f      	movs	r7, r1
    1f38:	9800      	ldr	r0, [sp, #0]
    1f3a:	9901      	ldr	r1, [sp, #4]
    1f3c:	47a8      	blx	r5
    1f3e:	0002      	movs	r2, r0
    1f40:	000b      	movs	r3, r1
    1f42:	0030      	movs	r0, r6
    1f44:	0039      	movs	r1, r7
    1f46:	47a0      	blx	r4
    1f48:	9000      	str	r0, [sp, #0]
    1f4a:	9101      	str	r1, [sp, #4]
        pest[2][1] = (1.0 - kgain[2][1]) * pestp[2][1] - kgain[2][0] * pestp[2][1];
    1f4c:	9a12      	ldr	r2, [sp, #72]	; 0x48
    1f4e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    1f50:	9810      	ldr	r0, [sp, #64]	; 0x40
    1f52:	9911      	ldr	r1, [sp, #68]	; 0x44
    1f54:	47a8      	blx	r5
    1f56:	9a14      	ldr	r2, [sp, #80]	; 0x50
    1f58:	9b15      	ldr	r3, [sp, #84]	; 0x54
    1f5a:	0006      	movs	r6, r0
    1f5c:	000f      	movs	r7, r1
    1f5e:	9810      	ldr	r0, [sp, #64]	; 0x40
    1f60:	9911      	ldr	r1, [sp, #68]	; 0x44
    1f62:	47a8      	blx	r5
    1f64:	0002      	movs	r2, r0
    1f66:	000b      	movs	r3, r1
    1f68:	0030      	movs	r0, r6
    1f6a:	0039      	movs	r1, r7
    1f6c:	47a0      	blx	r4
        pest[2][2] = (1.0 - kgain[2][1]) * pestp[2][2] - kgain[2][0] * pestp[2][2];
    1f6e:	9a12      	ldr	r2, [sp, #72]	; 0x48
    1f70:	9b13      	ldr	r3, [sp, #76]	; 0x4c
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
        pest[1][1] = pestp[0][1] * (-kgain[1][0]) + pestp[1][1] - kgain[1][1]*pestp[2][1];
        pest[1][2] = pestp[0][2] * (-kgain[1][0]) + pestp[1][2] - kgain[1][1]*pestp[2][2];
        pest[2][0] = (1.0 - kgain[2][1]) * pestp[2][0] - kgain[2][0] * pestp[2][0];
        pest[2][1] = (1.0 - kgain[2][1]) * pestp[2][1] - kgain[2][0] * pestp[2][1];
    1f72:	9010      	str	r0, [sp, #64]	; 0x40
    1f74:	9111      	str	r1, [sp, #68]	; 0x44
        pest[2][2] = (1.0 - kgain[2][1]) * pestp[2][2] - kgain[2][0] * pestp[2][2];
    1f76:	9802      	ldr	r0, [sp, #8]
    1f78:	9903      	ldr	r1, [sp, #12]
    1f7a:	47a8      	blx	r5
    1f7c:	9a14      	ldr	r2, [sp, #80]	; 0x50
    1f7e:	9b15      	ldr	r3, [sp, #84]	; 0x54
    1f80:	0006      	movs	r6, r0
    1f82:	000f      	movs	r7, r1
    1f84:	9802      	ldr	r0, [sp, #8]
    1f86:	9903      	ldr	r1, [sp, #12]
    1f88:	47a8      	blx	r5
    1f8a:	000b      	movs	r3, r1
    1f8c:	0002      	movs	r2, r0
    1f8e:	0039      	movs	r1, r7
    1f90:	0030      	movs	r0, r6
    1f92:	47a0      	blx	r4
         * time through the mill. Because I have noticed very early convergance
         * in a few cases (< 20 iterations) I am delaying this for at least
         * 100 iterations.
         */
        notdone = 0;
        k++;
    1f94:	2400      	movs	r4, #0
    1f96:	9b38      	ldr	r3, [sp, #224]	; 0xe0
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
        pest[1][1] = pestp[0][1] * (-kgain[1][0]) + pestp[1][1] - kgain[1][1]*pestp[2][1];
        pest[1][2] = pestp[0][2] * (-kgain[1][0]) + pestp[1][2] - kgain[1][1]*pestp[2][2];
        pest[2][0] = (1.0 - kgain[2][1]) * pestp[2][0] - kgain[2][0] * pestp[2][0];
        pest[2][1] = (1.0 - kgain[2][1]) * pestp[2][1] - kgain[2][0] * pestp[2][1];
        pest[2][2] = (1.0 - kgain[2][1]) * pestp[2][2] - kgain[2][0] * pestp[2][2];
    1f98:	9002      	str	r0, [sp, #8]
    1f9a:	9103      	str	r1, [sp, #12]
         * time through the mill. Because I have noticed very early convergance
         * in a few cases (< 20 iterations) I am delaying this for at least
         * 100 iterations.
         */
        notdone = 0;
        k++;
    1f9c:	3301      	adds	r3, #1
    1f9e:	9338      	str	r3, [sp, #224]	; 0xe0
        for( i = 0; i <= 2; i++)
            for( j = 0; j <= 1; j++) {
                if( (kgain[i][j] - lastkgain[i][j])/lastkgain[i][j] > 0.00001)
    1fa0:	4b22      	ldr	r3, [pc, #136]	; (202c <STACK_SIZE+0x2c>)
        /* Check for convergance. Criteria is less than .001% change from last
         * time through the mill. Because I have noticed very early convergance
         * in a few cases (< 20 iterations) I am delaying this for at least
         * 100 iterations.
         */
        notdone = 0;
    1fa2:	9414      	str	r4, [sp, #80]	; 0x50
        k++;
        for( i = 0; i <= 2; i++)
            for( j = 0; j <= 1; j++) {
                if( (kgain[i][j] - lastkgain[i][j])/lastkgain[i][j] > 0.00001)
    1fa4:	9326      	str	r3, [sp, #152]	; 0x98
    1fa6:	4b1f      	ldr	r3, [pc, #124]	; (2024 <STACK_SIZE+0x24>)
    1fa8:	9328      	str	r3, [sp, #160]	; 0xa0
    1faa:	ab40      	add	r3, sp, #256	; 0x100
    1fac:	18e5      	adds	r5, r4, r3

        pestp[2][2] = pestp[2][2] + model_variance;
        /*
          Calculate Kalman Gain
        */
        det = (pestp[0][0]+altitude_variance)*(pestp[2][2] + acceleration_variance) - pestp[2][0] * pestp[0][2];
    1fae:	2300      	movs	r3, #0
    1fb0:	9516      	str	r5, [sp, #88]	; 0x58
    1fb2:	9312      	str	r3, [sp, #72]	; 0x48
         */
        notdone = 0;
        k++;
        for( i = 0; i <= 2; i++)
            for( j = 0; j <= 1; j++) {
                if( (kgain[i][j] - lastkgain[i][j])/lastkgain[i][j] > 0.00001)
    1fb4:	9b12      	ldr	r3, [sp, #72]	; 0x48
    1fb6:	9a26      	ldr	r2, [sp, #152]	; 0x98
    1fb8:	18e3      	adds	r3, r4, r3
    1fba:	189b      	adds	r3, r3, r2
    1fbc:	681a      	ldr	r2, [r3, #0]
    1fbe:	685b      	ldr	r3, [r3, #4]
    1fc0:	9218      	str	r2, [sp, #96]	; 0x60
    1fc2:	9319      	str	r3, [sp, #100]	; 0x64
    1fc4:	9818      	ldr	r0, [sp, #96]	; 0x60
    1fc6:	9919      	ldr	r1, [sp, #100]	; 0x64
    1fc8:	9b16      	ldr	r3, [sp, #88]	; 0x58
    1fca:	9d28      	ldr	r5, [sp, #160]	; 0xa0
    1fcc:	681e      	ldr	r6, [r3, #0]
    1fce:	685f      	ldr	r7, [r3, #4]
    1fd0:	0032      	movs	r2, r6
    1fd2:	003b      	movs	r3, r7
    1fd4:	47a8      	blx	r5
    1fd6:	0032      	movs	r2, r6
    1fd8:	003b      	movs	r3, r7
    1fda:	4d15      	ldr	r5, [pc, #84]	; (2030 <STACK_SIZE+0x30>)
    1fdc:	47a8      	blx	r5
    1fde:	4b15      	ldr	r3, [pc, #84]	; (2034 <STACK_SIZE+0x34>)
    1fe0:	4a15      	ldr	r2, [pc, #84]	; (2038 <STACK_SIZE+0x38>)
    1fe2:	4e16      	ldr	r6, [pc, #88]	; (203c <STACK_SIZE+0x3c>)
    1fe4:	47b0      	blx	r6
                    notdone++;
    1fe6:	1e43      	subs	r3, r0, #1
    1fe8:	4198      	sbcs	r0, r3
    1fea:	9b14      	ldr	r3, [sp, #80]	; 0x50
                lastkgain[i][j] = kgain[i][j];
    1fec:	9916      	ldr	r1, [sp, #88]	; 0x58
        notdone = 0;
        k++;
        for( i = 0; i <= 2; i++)
            for( j = 0; j <= 1; j++) {
                if( (kgain[i][j] - lastkgain[i][j])/lastkgain[i][j] > 0.00001)
                    notdone++;
    1fee:	181b      	adds	r3, r3, r0
    1ff0:	9314      	str	r3, [sp, #80]	; 0x50
                lastkgain[i][j] = kgain[i][j];
    1ff2:	9a18      	ldr	r2, [sp, #96]	; 0x60
    1ff4:	9b19      	ldr	r3, [sp, #100]	; 0x64
    1ff6:	c10c      	stmia	r1!, {r2, r3}
    1ff8:	9b12      	ldr	r3, [sp, #72]	; 0x48
    1ffa:	9116      	str	r1, [sp, #88]	; 0x58
    1ffc:	3308      	adds	r3, #8
    1ffe:	9312      	str	r3, [sp, #72]	; 0x48
         * 100 iterations.
         */
        notdone = 0;
        k++;
        for( i = 0; i <= 2; i++)
            for( j = 0; j <= 1; j++) {
    2000:	2b10      	cmp	r3, #16
    2002:	d1d7      	bne.n	1fb4 <computeKalmanGains+0x814>
    2004:	3410      	adds	r4, #16
         * in a few cases (< 20 iterations) I am delaying this for at least
         * 100 iterations.
         */
        notdone = 0;
        k++;
        for( i = 0; i <= 2; i++)
    2006:	2c30      	cmp	r4, #48	; 0x30
    2008:	d1cf      	bne.n	1faa <computeKalmanGains+0x80a>
            for( j = 0; j <= 1; j++) {
                if( (kgain[i][j] - lastkgain[i][j])/lastkgain[i][j] > 0.00001)
                    notdone++;
                lastkgain[i][j] = kgain[i][j];
            }
        if( notdone || k < 100)
    200a:	9b14      	ldr	r3, [sp, #80]	; 0x50
    200c:	2b00      	cmp	r3, #0
    200e:	d001      	beq.n	2014 <STACK_SIZE+0x14>
    2010:	f7ff fc2c 	bl	186c <computeKalmanGains+0xcc>
    2014:	9b38      	ldr	r3, [sp, #224]	; 0xe0
    2016:	2b63      	cmp	r3, #99	; 0x63
    2018:	dc01      	bgt.n	201e <STACK_SIZE+0x1e>
    201a:	f7ff fc27 	bl	186c <computeKalmanGains+0xcc>
            continue;
        else
            break;
    }
}
    201e:	b04d      	add	sp, #308	; 0x134
    2020:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2022:	46c0      	nop			; (mov r8, r8)
    2024:	000059ad 	.word	0x000059ad
    2028:	3ff00000 	.word	0x3ff00000
    202c:	20000280 	.word	0x20000280
    2030:	00004c71 	.word	0x00004c71
    2034:	3ee4f8b5 	.word	0x3ee4f8b5
    2038:	88e368f1 	.word	0x88e368f1
    203c:	000042f1 	.word	0x000042f1

00002040 <KalmanBothUpdate>:
    velocity = estp[1] + kgain[1][0] * alt_inovation;
    accel =    estp[2] + kgain[2][0] * alt_inovation;

}

void KalmanBothUpdate( double alt_inovation, double accel_inovation) {
    2040:	b5f0      	push	{r4, r5, r6, r7, lr}
    2042:	b08f      	sub	sp, #60	; 0x3c
    2044:	9208      	str	r2, [sp, #32]
    2046:	9309      	str	r3, [sp, #36]	; 0x24

    /* Propagate state */
    estp[0] = phi[0][0] * altitude + phi[0][1] * velocity + phi[0][2] * accel;
    2048:	4b68      	ldr	r3, [pc, #416]	; (21ec <KalmanBothUpdate+0x1ac>)
    204a:	4d69      	ldr	r5, [pc, #420]	; (21f0 <KalmanBothUpdate+0x1b0>)
    204c:	685c      	ldr	r4, [r3, #4]
    204e:	681b      	ldr	r3, [r3, #0]
    2050:	9300      	str	r3, [sp, #0]
    2052:	9401      	str	r4, [sp, #4]
    2054:	4b67      	ldr	r3, [pc, #412]	; (21f4 <KalmanBothUpdate+0x1b4>)
    velocity = estp[1] + kgain[1][0] * alt_inovation;
    accel =    estp[2] + kgain[2][0] * alt_inovation;

}

void KalmanBothUpdate( double alt_inovation, double accel_inovation) {
    2056:	9006      	str	r0, [sp, #24]
    2058:	9107      	str	r1, [sp, #28]

    /* Propagate state */
    estp[0] = phi[0][0] * altitude + phi[0][1] * velocity + phi[0][2] * accel;
    205a:	685c      	ldr	r4, [r3, #4]
    205c:	681b      	ldr	r3, [r3, #0]
    205e:	9800      	ldr	r0, [sp, #0]
    2060:	9901      	ldr	r1, [sp, #4]
    2062:	9302      	str	r3, [sp, #8]
    2064:	9403      	str	r4, [sp, #12]
    2066:	4b64      	ldr	r3, [pc, #400]	; (21f8 <KalmanBothUpdate+0x1b8>)
    2068:	685c      	ldr	r4, [r3, #4]
    206a:	681b      	ldr	r3, [r3, #0]
    206c:	9304      	str	r3, [sp, #16]
    206e:	9405      	str	r4, [sp, #20]
    2070:	4c62      	ldr	r4, [pc, #392]	; (21fc <KalmanBothUpdate+0x1bc>)
    2072:	6822      	ldr	r2, [r4, #0]
    2074:	6863      	ldr	r3, [r4, #4]
    2076:	47a8      	blx	r5
    2078:	68a2      	ldr	r2, [r4, #8]
    207a:	68e3      	ldr	r3, [r4, #12]
    207c:	0006      	movs	r6, r0
    207e:	000f      	movs	r7, r1
    2080:	9802      	ldr	r0, [sp, #8]
    2082:	9903      	ldr	r1, [sp, #12]
    2084:	47a8      	blx	r5
    2086:	0002      	movs	r2, r0
    2088:	000b      	movs	r3, r1
    208a:	0030      	movs	r0, r6
    208c:	0039      	movs	r1, r7
    208e:	4e5c      	ldr	r6, [pc, #368]	; (2200 <KalmanBothUpdate+0x1c0>)
    2090:	47b0      	blx	r6
    2092:	6922      	ldr	r2, [r4, #16]
    2094:	6963      	ldr	r3, [r4, #20]
    2096:	0006      	movs	r6, r0
    2098:	000f      	movs	r7, r1
    209a:	9804      	ldr	r0, [sp, #16]
    209c:	9905      	ldr	r1, [sp, #20]
    209e:	47a8      	blx	r5
    20a0:	0002      	movs	r2, r0
    20a2:	000b      	movs	r3, r1
    20a4:	0030      	movs	r0, r6
    20a6:	0039      	movs	r1, r7
    20a8:	4e55      	ldr	r6, [pc, #340]	; (2200 <KalmanBothUpdate+0x1c0>)
    20aa:	47b0      	blx	r6
    20ac:	900a      	str	r0, [sp, #40]	; 0x28
    20ae:	910b      	str	r1, [sp, #44]	; 0x2c
    20b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    20b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    20b4:	4953      	ldr	r1, [pc, #332]	; (2204 <KalmanBothUpdate+0x1c4>)
    20b6:	600a      	str	r2, [r1, #0]
    20b8:	604b      	str	r3, [r1, #4]
    estp[1] = phi[1][0] * altitude + phi[1][1] * velocity + phi[1][2] * accel;
    20ba:	69a2      	ldr	r2, [r4, #24]
    20bc:	69e3      	ldr	r3, [r4, #28]
    20be:	9800      	ldr	r0, [sp, #0]
    20c0:	9901      	ldr	r1, [sp, #4]
    20c2:	47a8      	blx	r5
    20c4:	6a22      	ldr	r2, [r4, #32]
    20c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
    20c8:	0006      	movs	r6, r0
    20ca:	000f      	movs	r7, r1
    20cc:	9802      	ldr	r0, [sp, #8]
    20ce:	9903      	ldr	r1, [sp, #12]
    20d0:	47a8      	blx	r5
    20d2:	0002      	movs	r2, r0
    20d4:	000b      	movs	r3, r1
    20d6:	0030      	movs	r0, r6
    20d8:	0039      	movs	r1, r7
    20da:	4e49      	ldr	r6, [pc, #292]	; (2200 <KalmanBothUpdate+0x1c0>)
    20dc:	47b0      	blx	r6
    20de:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    20e0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    20e2:	0006      	movs	r6, r0
    20e4:	000f      	movs	r7, r1
    20e6:	9804      	ldr	r0, [sp, #16]
    20e8:	9905      	ldr	r1, [sp, #20]
    20ea:	47a8      	blx	r5
    20ec:	0002      	movs	r2, r0
    20ee:	000b      	movs	r3, r1
    20f0:	0030      	movs	r0, r6
    20f2:	0039      	movs	r1, r7
    20f4:	4e42      	ldr	r6, [pc, #264]	; (2200 <KalmanBothUpdate+0x1c0>)
    20f6:	47b0      	blx	r6
    20f8:	900c      	str	r0, [sp, #48]	; 0x30
    20fa:	910d      	str	r1, [sp, #52]	; 0x34
    20fc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    20fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    2100:	4940      	ldr	r1, [pc, #256]	; (2204 <KalmanBothUpdate+0x1c4>)
    2102:	608a      	str	r2, [r1, #8]
    2104:	60cb      	str	r3, [r1, #12]
    estp[2] = phi[2][0] * altitude + phi[2][1] * velocity + phi[2][2] * accel;
    2106:	6b22      	ldr	r2, [r4, #48]	; 0x30
    2108:	6b63      	ldr	r3, [r4, #52]	; 0x34
    210a:	9800      	ldr	r0, [sp, #0]
    210c:	9901      	ldr	r1, [sp, #4]
    210e:	47a8      	blx	r5
    2110:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    2112:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    2114:	0006      	movs	r6, r0
    2116:	000f      	movs	r7, r1
    2118:	9802      	ldr	r0, [sp, #8]
    211a:	9903      	ldr	r1, [sp, #12]
    211c:	47a8      	blx	r5
    211e:	0002      	movs	r2, r0
    2120:	000b      	movs	r3, r1
    2122:	0030      	movs	r0, r6
    2124:	0039      	movs	r1, r7
    2126:	4e36      	ldr	r6, [pc, #216]	; (2200 <KalmanBothUpdate+0x1c0>)
    2128:	47b0      	blx	r6
    212a:	6c22      	ldr	r2, [r4, #64]	; 0x40
    212c:	6c63      	ldr	r3, [r4, #68]	; 0x44
    212e:	0006      	movs	r6, r0
    2130:	000f      	movs	r7, r1
    2132:	9804      	ldr	r0, [sp, #16]
    2134:	9905      	ldr	r1, [sp, #20]
    2136:	47a8      	blx	r5
    2138:	4c31      	ldr	r4, [pc, #196]	; (2200 <KalmanBothUpdate+0x1c0>)
    213a:	0002      	movs	r2, r0
    213c:	000b      	movs	r3, r1
    213e:	0030      	movs	r0, r6
    2140:	0039      	movs	r1, r7
    2142:	47a0      	blx	r4
    2144:	0003      	movs	r3, r0
    2146:	000c      	movs	r4, r1
    2148:	4a2e      	ldr	r2, [pc, #184]	; (2204 <KalmanBothUpdate+0x1c4>)
    214a:	9000      	str	r0, [sp, #0]
    214c:	9101      	str	r1, [sp, #4]

    /* Update state */
    altitude = estp[0] + kgain[0][0] * alt_inovation + kgain[0][1] * accel_inovation;
    214e:	9806      	ldr	r0, [sp, #24]
    2150:	9907      	ldr	r1, [sp, #28]
void KalmanBothUpdate( double alt_inovation, double accel_inovation) {

    /* Propagate state */
    estp[0] = phi[0][0] * altitude + phi[0][1] * velocity + phi[0][2] * accel;
    estp[1] = phi[1][0] * altitude + phi[1][1] * velocity + phi[1][2] * accel;
    estp[2] = phi[2][0] * altitude + phi[2][1] * velocity + phi[2][2] * accel;
    2152:	6113      	str	r3, [r2, #16]
    2154:	6154      	str	r4, [r2, #20]

    /* Update state */
    altitude = estp[0] + kgain[0][0] * alt_inovation + kgain[0][1] * accel_inovation;
    2156:	4c2c      	ldr	r4, [pc, #176]	; (2208 <KalmanBothUpdate+0x1c8>)
    2158:	6822      	ldr	r2, [r4, #0]
    215a:	6863      	ldr	r3, [r4, #4]
    215c:	47a8      	blx	r5
    215e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    2160:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    2162:	4e27      	ldr	r6, [pc, #156]	; (2200 <KalmanBothUpdate+0x1c0>)
    2164:	47b0      	blx	r6
    2166:	68a2      	ldr	r2, [r4, #8]
    2168:	68e3      	ldr	r3, [r4, #12]
    216a:	0006      	movs	r6, r0
    216c:	000f      	movs	r7, r1
    216e:	9808      	ldr	r0, [sp, #32]
    2170:	9909      	ldr	r1, [sp, #36]	; 0x24
    2172:	47a8      	blx	r5
    2174:	0002      	movs	r2, r0
    2176:	000b      	movs	r3, r1
    2178:	0030      	movs	r0, r6
    217a:	0039      	movs	r1, r7
    217c:	4e20      	ldr	r6, [pc, #128]	; (2200 <KalmanBothUpdate+0x1c0>)
    217e:	47b0      	blx	r6
    2180:	4b1a      	ldr	r3, [pc, #104]	; (21ec <KalmanBothUpdate+0x1ac>)
    2182:	6018      	str	r0, [r3, #0]
    2184:	6059      	str	r1, [r3, #4]
    velocity = estp[1] + kgain[1][0] * alt_inovation + kgain[1][1] * accel_inovation;
    2186:	6922      	ldr	r2, [r4, #16]
    2188:	6963      	ldr	r3, [r4, #20]
    218a:	9806      	ldr	r0, [sp, #24]
    218c:	9907      	ldr	r1, [sp, #28]
    218e:	47a8      	blx	r5
    2190:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    2192:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    2194:	47b0      	blx	r6
    2196:	69a2      	ldr	r2, [r4, #24]
    2198:	69e3      	ldr	r3, [r4, #28]
    219a:	0006      	movs	r6, r0
    219c:	000f      	movs	r7, r1
    219e:	9808      	ldr	r0, [sp, #32]
    21a0:	9909      	ldr	r1, [sp, #36]	; 0x24
    21a2:	47a8      	blx	r5
    21a4:	0002      	movs	r2, r0
    21a6:	000b      	movs	r3, r1
    21a8:	0030      	movs	r0, r6
    21aa:	0039      	movs	r1, r7
    21ac:	4e14      	ldr	r6, [pc, #80]	; (2200 <KalmanBothUpdate+0x1c0>)
    21ae:	47b0      	blx	r6
    21b0:	4b10      	ldr	r3, [pc, #64]	; (21f4 <KalmanBothUpdate+0x1b4>)
    21b2:	6018      	str	r0, [r3, #0]
    21b4:	6059      	str	r1, [r3, #4]
    accel =    estp[2] + kgain[2][0] * alt_inovation + kgain[2][1] * accel_inovation;
    21b6:	6a22      	ldr	r2, [r4, #32]
    21b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
    21ba:	9806      	ldr	r0, [sp, #24]
    21bc:	9907      	ldr	r1, [sp, #28]
    21be:	47a8      	blx	r5
    21c0:	9a00      	ldr	r2, [sp, #0]
    21c2:	9b01      	ldr	r3, [sp, #4]
    21c4:	47b0      	blx	r6
    21c6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    21c8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    21ca:	0006      	movs	r6, r0
    21cc:	000f      	movs	r7, r1
    21ce:	9808      	ldr	r0, [sp, #32]
    21d0:	9909      	ldr	r1, [sp, #36]	; 0x24
    21d2:	47a8      	blx	r5
    21d4:	4c0a      	ldr	r4, [pc, #40]	; (2200 <KalmanBothUpdate+0x1c0>)
    21d6:	0002      	movs	r2, r0
    21d8:	000b      	movs	r3, r1
    21da:	0030      	movs	r0, r6
    21dc:	0039      	movs	r1, r7
    21de:	47a0      	blx	r4
    21e0:	4b05      	ldr	r3, [pc, #20]	; (21f8 <KalmanBothUpdate+0x1b8>)
    21e2:	6018      	str	r0, [r3, #0]
    21e4:	6059      	str	r1, [r3, #4]
}
    21e6:	b00f      	add	sp, #60	; 0x3c
    21e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    21ea:	46c0      	nop			; (mov r8, r8)
    21ec:	200002e8 	.word	0x200002e8
    21f0:	000054b9 	.word	0x000054b9
    21f4:	200002e0 	.word	0x200002e0
    21f8:	200002d8 	.word	0x200002d8
    21fc:	20000010 	.word	0x20000010
    2200:	00004619 	.word	0x00004619
    2204:	200002f0 	.word	0x200002f0
    2208:	20000280 	.word	0x20000280

0000220c <computeKalmanStates>:

void computeKalmanStates() {
    220c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

    double alt_inovation, accel_inovation, acceleration, pressure;

    acceleration = (sample.accelX - offsets.gravityOffset) * 32.17417;
    220e:	4d19      	ldr	r5, [pc, #100]	; (2274 <computeKalmanStates+0x68>)
    2210:	4b19      	ldr	r3, [pc, #100]	; (2278 <computeKalmanStates+0x6c>)
    2212:	6a68      	ldr	r0, [r5, #36]	; 0x24
    2214:	4798      	blx	r3
    2216:	4b19      	ldr	r3, [pc, #100]	; (227c <computeKalmanStates+0x70>)
    2218:	4c19      	ldr	r4, [pc, #100]	; (2280 <computeKalmanStates+0x74>)
    221a:	689a      	ldr	r2, [r3, #8]
    221c:	68db      	ldr	r3, [r3, #12]
    221e:	47a0      	blx	r4
    2220:	4a18      	ldr	r2, [pc, #96]	; (2284 <computeKalmanStates+0x78>)
    2222:	4b19      	ldr	r3, [pc, #100]	; (2288 <computeKalmanStates+0x7c>)
    2224:	4e19      	ldr	r6, [pc, #100]	; (228c <computeKalmanStates+0x80>)
    2226:	47b0      	blx	r6

    pressure = sample.pressureAltitude;
    2228:	6daa      	ldr	r2, [r5, #88]	; 0x58
    222a:	6deb      	ldr	r3, [r5, #92]	; 0x5c

    if (altitude == 0) {
    222c:	4d18      	ldr	r5, [pc, #96]	; (2290 <computeKalmanStates+0x84>)

    double alt_inovation, accel_inovation, acceleration, pressure;

    acceleration = (sample.accelX - offsets.gravityOffset) * 32.17417;

    pressure = sample.pressureAltitude;
    222e:	9200      	str	r2, [sp, #0]
    2230:	9301      	str	r3, [sp, #4]

    if (altitude == 0) {
    2232:	4c18      	ldr	r4, [pc, #96]	; (2294 <computeKalmanStates+0x88>)

void computeKalmanStates() {

    double alt_inovation, accel_inovation, acceleration, pressure;

    acceleration = (sample.accelX - offsets.gravityOffset) * 32.17417;
    2234:	0006      	movs	r6, r0
    2236:	000f      	movs	r7, r1

    pressure = sample.pressureAltitude;

    if (altitude == 0) {
    2238:	6828      	ldr	r0, [r5, #0]
    223a:	6869      	ldr	r1, [r5, #4]
    223c:	2200      	movs	r2, #0
    223e:	2300      	movs	r3, #0
    2240:	47a0      	blx	r4
    2242:	4c0f      	ldr	r4, [pc, #60]	; (2280 <computeKalmanStates+0x74>)
    2244:	2800      	cmp	r0, #0
    2246:	d003      	beq.n	2250 <computeKalmanStates+0x44>
        altitude = pressure;
    2248:	9a00      	ldr	r2, [sp, #0]
    224a:	9b01      	ldr	r3, [sp, #4]
    224c:	602a      	str	r2, [r5, #0]
    224e:	606b      	str	r3, [r5, #4]
    }

    /* Compute the innovations */
    alt_inovation = pressure - estp[0];
    accel_inovation = acceleration - estp[2];
    2250:	4d11      	ldr	r5, [pc, #68]	; (2298 <computeKalmanStates+0x8c>)


 //   if (flightState < flightDrogue) {
        KalmanBothUpdate(alt_inovation,accel_inovation);
    2252:	0030      	movs	r0, r6
    2254:	692a      	ldr	r2, [r5, #16]
    2256:	696b      	ldr	r3, [r5, #20]
    2258:	0039      	movs	r1, r7
    225a:	47a0      	blx	r4
    225c:	682a      	ldr	r2, [r5, #0]
    225e:	686b      	ldr	r3, [r5, #4]
    2260:	0006      	movs	r6, r0
    2262:	000f      	movs	r7, r1
    2264:	9800      	ldr	r0, [sp, #0]
    2266:	9901      	ldr	r1, [sp, #4]
    2268:	47a0      	blx	r4
    226a:	0032      	movs	r2, r6
    226c:	003b      	movs	r3, r7
    226e:	4c0b      	ldr	r4, [pc, #44]	; (229c <computeKalmanStates+0x90>)
    2270:	47a0      	blx	r4
   // } else {
      //  KalmanBaroUpdate(alt_inovation);
  //  }
}
    2272:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    2274:	20000540 	.word	0x20000540
    2278:	000061f5 	.word	0x000061f5
    227c:	20000108 	.word	0x20000108
    2280:	000059ad 	.word	0x000059ad
    2284:	33daf8df 	.word	0x33daf8df
    2288:	4040164b 	.word	0x4040164b
    228c:	000054b9 	.word	0x000054b9
    2290:	200002e8 	.word	0x200002e8
    2294:	000042bd 	.word	0x000042bd
    2298:	200002f0 	.word	0x200002f0
    229c:	00002041 	.word	0x00002041

000022a0 <makePage>:
u16_t flightAddressLocationInIndex;

u8_t flightStartAddress[3];


void makePage(u8_t bytesToWrite, u8_t* data) {
    22a0:	b5f0      	push	{r4, r5, r6, r7, lr}


    u8_t location = pageLocation;
    22a2:	4a1f      	ldr	r2, [pc, #124]	; (2320 <makePage+0x80>)
    22a4:	7815      	ldrb	r5, [r2, #0]
    u8_t bytesWritten = 0;

    if ((location + bytesToWrite) > 0xFF) {
    22a6:	1943      	adds	r3, r0, r5
    22a8:	2bff      	cmp	r3, #255	; 0xff
    22aa:	dc03      	bgt.n	22b4 <makePage+0x14>
    22ac:	2300      	movs	r3, #0
            pageLocation = dataByte + 1;
        }
        pageReady = true;

    } else {
        for (u16_t dataByte = 0; dataByte <= bytesToWrite; ++dataByte) {
    22ae:	b280      	uxth	r0, r0
            pageBuffer[(dataByte + location)] = data[dataByte];
    22b0:	4c1c      	ldr	r4, [pc, #112]	; (2324 <makePage+0x84>)
    22b2:	e029      	b.n	2308 <makePage+0x68>
    22b4:	2300      	movs	r3, #0
    22b6:	4e1b      	ldr	r6, [pc, #108]	; (2324 <makePage+0x84>)

    u8_t location = pageLocation;
    u8_t bytesWritten = 0;

    if ((location + bytesToWrite) > 0xFF) {
        for (u16_t dataByte = 0; (dataByte + location) <= 0xFF; ++dataByte) {
    22b8:	195f      	adds	r7, r3, r5
    22ba:	b2dc      	uxtb	r4, r3
    22bc:	46b4      	mov	ip, r6
    22be:	2fff      	cmp	r7, #255	; 0xff
    22c0:	dc04      	bgt.n	22cc <makePage+0x2c>
            pageBuffer[(dataByte + location)] = data[dataByte];
    22c2:	5ccc      	ldrb	r4, [r1, r3]

    u8_t location = pageLocation;
    u8_t bytesWritten = 0;

    if ((location + bytesToWrite) > 0xFF) {
        for (u16_t dataByte = 0; (dataByte + location) <= 0xFF; ++dataByte) {
    22c4:	3301      	adds	r3, #1
            pageBuffer[(dataByte + location)] = data[dataByte];
    22c6:	55f4      	strb	r4, [r6, r7]

    u8_t location = pageLocation;
    u8_t bytesWritten = 0;

    if ((location + bytesToWrite) > 0xFF) {
        for (u16_t dataByte = 0; (dataByte + location) <= 0xFF; ++dataByte) {
    22c8:	b29b      	uxth	r3, r3
    22ca:	e7f5      	b.n	22b8 <makePage+0x18>
            pageBuffer[(dataByte + location)] = data[dataByte];
            bytesWritten++;
        }
        pageLocation = 0x00;
    22cc:	2300      	movs	r3, #0
        for(u16_t i = 0; i <= 0xFF; ++i) {
            pageToWrite[i] = pageBuffer[i];
    22ce:	4f16      	ldr	r7, [pc, #88]	; (2328 <makePage+0x88>)
    if ((location + bytesToWrite) > 0xFF) {
        for (u16_t dataByte = 0; (dataByte + location) <= 0xFF; ++dataByte) {
            pageBuffer[(dataByte + location)] = data[dataByte];
            bytesWritten++;
        }
        pageLocation = 0x00;
    22d0:	7013      	strb	r3, [r2, #0]
        for(u16_t i = 0; i <= 0xFF; ++i) {
            pageToWrite[i] = pageBuffer[i];
    22d2:	4665      	mov	r5, ip
    22d4:	18ed      	adds	r5, r5, r3
    22d6:	782e      	ldrb	r6, [r5, #0]
    22d8:	54fe      	strb	r6, [r7, r3]
            pageBuffer[i] = 0;
    22da:	2600      	movs	r6, #0
    22dc:	702e      	strb	r6, [r5, #0]
        for (u16_t dataByte = 0; (dataByte + location) <= 0xFF; ++dataByte) {
            pageBuffer[(dataByte + location)] = data[dataByte];
            bytesWritten++;
        }
        pageLocation = 0x00;
        for(u16_t i = 0; i <= 0xFF; ++i) {
    22de:	2580      	movs	r5, #128	; 0x80
    22e0:	3301      	adds	r3, #1
    22e2:	006d      	lsls	r5, r5, #1
    22e4:	42ab      	cmp	r3, r5
    22e6:	d1f4      	bne.n	22d2 <makePage+0x32>
    22e8:	2300      	movs	r3, #0
    22ea:	1c5d      	adds	r5, r3, #1
            pageToWrite[i] = pageBuffer[i];
            pageBuffer[i] = 0;
        }
        for (u16_t dataByte = 0; bytesWritten < bytesToWrite; ++dataByte) {
    22ec:	4284      	cmp	r4, r0
    22ee:	d207      	bcs.n	2300 <makePage+0x60>
            pageBuffer[dataByte] = data[bytesWritten];
    22f0:	4667      	mov	r7, ip
    22f2:	5d0e      	ldrb	r6, [r1, r4]
            bytesWritten++;
    22f4:	3401      	adds	r4, #1
        for(u16_t i = 0; i <= 0xFF; ++i) {
            pageToWrite[i] = pageBuffer[i];
            pageBuffer[i] = 0;
        }
        for (u16_t dataByte = 0; bytesWritten < bytesToWrite; ++dataByte) {
            pageBuffer[dataByte] = data[bytesWritten];
    22f6:	54fe      	strb	r6, [r7, r3]
            bytesWritten++;
    22f8:	b2e4      	uxtb	r4, r4
            pageLocation = dataByte + 1;
    22fa:	7015      	strb	r5, [r2, #0]
    22fc:	002b      	movs	r3, r5
    22fe:	e7f4      	b.n	22ea <makePage+0x4a>
        }
        pageReady = true;
    2300:	2201      	movs	r2, #1
    2302:	4b0a      	ldr	r3, [pc, #40]	; (232c <makePage+0x8c>)
    2304:	701a      	strb	r2, [r3, #0]
    2306:	e009      	b.n	231c <makePage+0x7c>

    } else {
        for (u16_t dataByte = 0; dataByte <= bytesToWrite; ++dataByte) {
    2308:	4283      	cmp	r3, r0
    230a:	d807      	bhi.n	231c <makePage+0x7c>
            pageBuffer[(dataByte + location)] = data[dataByte];
    230c:	5ccf      	ldrb	r7, [r1, r3]
    230e:	18e6      	adds	r6, r4, r3
    2310:	5577      	strb	r7, [r6, r5]
            bytesWritten++;
            pageLocation = location + dataByte;
    2312:	18ee      	adds	r6, r5, r3
            pageLocation = dataByte + 1;
        }
        pageReady = true;

    } else {
        for (u16_t dataByte = 0; dataByte <= bytesToWrite; ++dataByte) {
    2314:	3301      	adds	r3, #1
            pageBuffer[(dataByte + location)] = data[dataByte];
            bytesWritten++;
            pageLocation = location + dataByte;
    2316:	7016      	strb	r6, [r2, #0]
            pageLocation = dataByte + 1;
        }
        pageReady = true;

    } else {
        for (u16_t dataByte = 0; dataByte <= bytesToWrite; ++dataByte) {
    2318:	b29b      	uxth	r3, r3
    231a:	e7f5      	b.n	2308 <makePage+0x68>
            pageBuffer[(dataByte + location)] = data[dataByte];
            bytesWritten++;
            pageLocation = location + dataByte;
        }
    }
}
    231c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    231e:	46c0      	nop			; (mov r8, r8)
    2320:	2000053c 	.word	0x2000053c
    2324:	2000016e 	.word	0x2000016e
    2328:	2000030a 	.word	0x2000030a
    232c:	2000040a 	.word	0x2000040a

00002330 <writePadBuffer>:

void writePadBuffer(u8_t bytesToWrite, u8_t* data) {
    2330:	b5f0      	push	{r4, r5, r6, r7, lr}
    u8_t i, j;

    for (i = 1; i < 10; i++) {
    2332:	2706      	movs	r7, #6
    2334:	2300      	movs	r3, #0
    2336:	4c0d      	ldr	r4, [pc, #52]	; (236c <writePadBuffer+0x3c>)
    2338:	37ff      	adds	r7, #255	; 0xff
    233a:	18c5      	adds	r5, r0, r3
    233c:	191a      	adds	r2, r3, r4
    233e:	192d      	adds	r5, r5, r4
        for (j = 0; j < bytesToWrite; j++) {
    2340:	42aa      	cmp	r2, r5
    2342:	d003      	beq.n	234c <writePadBuffer+0x1c>
            padSensorBuffer[i-1][j] = padSensorBuffer[i][j];
    2344:	7f56      	ldrb	r6, [r2, #29]
    2346:	7016      	strb	r6, [r2, #0]
    2348:	3201      	adds	r2, #1
    234a:	e7f9      	b.n	2340 <writePadBuffer+0x10>
    234c:	331d      	adds	r3, #29
}

void writePadBuffer(u8_t bytesToWrite, u8_t* data) {
    u8_t i, j;

    for (i = 1; i < 10; i++) {
    234e:	42bb      	cmp	r3, r7
    2350:	d1f3      	bne.n	233a <writePadBuffer+0xa>
    2352:	2300      	movs	r3, #0
        for (j = 0; j < bytesToWrite; j++) {
            padSensorBuffer[i-1][j] = padSensorBuffer[i][j];
        }
    }

    for (i = 0; i < bytesToWrite ; i++) {
    2354:	b2da      	uxtb	r2, r3
    2356:	4290      	cmp	r0, r2
    2358:	d906      	bls.n	2368 <writePadBuffer+0x38>
        padSensorBuffer[9][i] = data[i];
    235a:	5ccc      	ldrb	r4, [r1, r3]
    235c:	1d9a      	adds	r2, r3, #6
    235e:	4d03      	ldr	r5, [pc, #12]	; (236c <writePadBuffer+0x3c>)
    2360:	32ff      	adds	r2, #255	; 0xff
    2362:	54ac      	strb	r4, [r5, r2]
    2364:	3301      	adds	r3, #1
    2366:	e7f5      	b.n	2354 <writePadBuffer+0x24>
    }
}
    2368:	bdf0      	pop	{r4, r5, r6, r7, pc}
    236a:	46c0      	nop			; (mov r8, r8)
    236c:	20000414 	.word	0x20000414

00002370 <logFlight>:


void logFlight() {
    2370:	b51f      	push	{r0, r1, r2, r3, r4, lr}

    u8_t bytesToSend = 16;
    u8_t dataToSend[16];

    dataToSend[0] = FLIGHT_LOG;
    2372:	2346      	movs	r3, #70	; 0x46
    2374:	466a      	mov	r2, sp
    2376:	7013      	strb	r3, [r2, #0]
    dataToSend[1] = 0;
    2378:	2300      	movs	r3, #0

    dataToSend[2] = offsets.offsetBufferTime >> 0;
    237a:	4669      	mov	r1, sp
    dataToSend[3] = offsets.offsetBufferTime >> 8;
    237c:	4668      	mov	r0, sp

    u8_t bytesToSend = 16;
    u8_t dataToSend[16];

    dataToSend[0] = FLIGHT_LOG;
    dataToSend[1] = 0;
    237e:	7053      	strb	r3, [r2, #1]

    dataToSend[2] = offsets.offsetBufferTime >> 0;
    2380:	4a10      	ldr	r2, [pc, #64]	; (23c4 <logFlight+0x54>)
    2382:	6813      	ldr	r3, [r2, #0]
    2384:	708b      	strb	r3, [r1, #2]
    dataToSend[3] = offsets.offsetBufferTime >> 8;
    2386:	0a19      	lsrs	r1, r3, #8
    2388:	70c1      	strb	r1, [r0, #3]
    dataToSend[4] = offsets.offsetBufferTime >> 16;
    238a:	0c19      	lsrs	r1, r3, #16
    dataToSend[5] = offsets.offsetBufferTime >> 24;
    238c:	0e1b      	lsrs	r3, r3, #24
    238e:	7143      	strb	r3, [r0, #5]

    dataToSend[6] = offsets.groundOffset >> 0;
    2390:	6993      	ldr	r3, [r2, #24]
    dataToSend[0] = FLIGHT_LOG;
    dataToSend[1] = 0;

    dataToSend[2] = offsets.offsetBufferTime >> 0;
    dataToSend[3] = offsets.offsetBufferTime >> 8;
    dataToSend[4] = offsets.offsetBufferTime >> 16;
    2392:	7101      	strb	r1, [r0, #4]
    dataToSend[5] = offsets.offsetBufferTime >> 24;

    dataToSend[6] = offsets.groundOffset >> 0;
    dataToSend[7] = offsets.groundOffset >> 8;
    2394:	0a19      	lsrs	r1, r3, #8
    dataToSend[2] = offsets.offsetBufferTime >> 0;
    dataToSend[3] = offsets.offsetBufferTime >> 8;
    dataToSend[4] = offsets.offsetBufferTime >> 16;
    dataToSend[5] = offsets.offsetBufferTime >> 24;

    dataToSend[6] = offsets.groundOffset >> 0;
    2396:	7183      	strb	r3, [r0, #6]
    dataToSend[7] = offsets.groundOffset >> 8;
    2398:	71c1      	strb	r1, [r0, #7]
    dataToSend[8] = offsets.groundOffset >> 16;
    239a:	0c19      	lsrs	r1, r3, #16
    dataToSend[9] = offsets.groundOffset >> 24;
    239c:	0e1b      	lsrs	r3, r3, #24
    239e:	7243      	strb	r3, [r0, #9]

    dataToSend[10] = offsets.groundTemperature >> 0;
    23a0:	6a13      	ldr	r3, [r2, #32]
    dataToSend[4] = offsets.offsetBufferTime >> 16;
    dataToSend[5] = offsets.offsetBufferTime >> 24;

    dataToSend[6] = offsets.groundOffset >> 0;
    dataToSend[7] = offsets.groundOffset >> 8;
    dataToSend[8] = offsets.groundOffset >> 16;
    23a2:	7201      	strb	r1, [r0, #8]
    dataToSend[9] = offsets.groundOffset >> 24;

    dataToSend[10] = offsets.groundTemperature >> 0;
    dataToSend[11] = offsets.groundTemperature >> 8;
    23a4:	0a1a      	lsrs	r2, r3, #8
    dataToSend[6] = offsets.groundOffset >> 0;
    dataToSend[7] = offsets.groundOffset >> 8;
    dataToSend[8] = offsets.groundOffset >> 16;
    dataToSend[9] = offsets.groundOffset >> 24;

    dataToSend[10] = offsets.groundTemperature >> 0;
    23a6:	7283      	strb	r3, [r0, #10]
    dataToSend[11] = offsets.groundTemperature >> 8;
    23a8:	72c2      	strb	r2, [r0, #11]
    dataToSend[12] = offsets.groundTemperature >> 16;
    23aa:	0c1a      	lsrs	r2, r3, #16
    dataToSend[13] = offsets.groundTemperature >> 24;
    23ac:	0e1b      	lsrs	r3, r3, #24
    23ae:	7343      	strb	r3, [r0, #13]

    //dataToSend[14] = accel >> 0;
    dataToSend[15] = 0xfe;
    23b0:	23fe      	movs	r3, #254	; 0xfe
    dataToSend[8] = offsets.groundOffset >> 16;
    dataToSend[9] = offsets.groundOffset >> 24;

    dataToSend[10] = offsets.groundTemperature >> 0;
    dataToSend[11] = offsets.groundTemperature >> 8;
    dataToSend[12] = offsets.groundTemperature >> 16;
    23b2:	7302      	strb	r2, [r0, #12]
    dataToSend[13] = offsets.groundTemperature >> 24;

    //dataToSend[14] = accel >> 0;
    dataToSend[15] = 0xfe;
    23b4:	73c3      	strb	r3, [r0, #15]
    dataToSend[5] = offsets.offsetBufferTime >> 24;

    dataToSend[6] = offsets.groundOffset >> 0;
    dataToSend[7] = offsets.groundOffset >> 8;
    dataToSend[8] = offsets.groundOffset >> 16;
    dataToSend[9] = offsets.groundOffset >> 24;
    23b6:	4669      	mov	r1, sp
    dataToSend[13] = offsets.groundTemperature >> 24;

    //dataToSend[14] = accel >> 0;
    dataToSend[15] = 0xfe;

    makePage(bytesToSend, dataToSend);
    23b8:	2010      	movs	r0, #16
    23ba:	4b03      	ldr	r3, [pc, #12]	; (23c8 <logFlight+0x58>)
    23bc:	4798      	blx	r3
}
    23be:	b005      	add	sp, #20
    23c0:	bd00      	pop	{pc}
    23c2:	46c0      	nop			; (mov r8, r8)
    23c4:	20000108 	.word	0x20000108
    23c8:	000022a1 	.word	0x000022a1

000023cc <logEvent>:

void logEvent(u8_t eventType) {
    23cc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

    u8_t bytesToSend = 12;
    u8_t dataToSend[12];

    dataToSend[0] = EVENT_LOG;
    23ce:	2345      	movs	r3, #69	; 0x45
    dataToSend[1] = eventType;
    dataToSend[2] = sample.sampleTick >> 0;
    23d0:	4d10      	ldr	r5, [pc, #64]	; (2414 <logEvent+0x48>)
void logEvent(u8_t eventType) {

    u8_t bytesToSend = 12;
    u8_t dataToSend[12];

    dataToSend[0] = EVENT_LOG;
    23d2:	ac01      	add	r4, sp, #4
    23d4:	7023      	strb	r3, [r4, #0]
    dataToSend[1] = eventType;
    dataToSend[2] = sample.sampleTick >> 0;
    23d6:	686b      	ldr	r3, [r5, #4]
    dataToSend[3] = sample.sampleTick >> 8;
    dataToSend[4] = sample.sampleTick >> 16;
    dataToSend[5] = sample.sampleTick >> 24;

    dataToSend[6] = altitudeAGL() >> 0;
    23d8:	4e0f      	ldr	r6, [pc, #60]	; (2418 <logEvent+0x4c>)
    u8_t dataToSend[12];

    dataToSend[0] = EVENT_LOG;
    dataToSend[1] = eventType;
    dataToSend[2] = sample.sampleTick >> 0;
    dataToSend[3] = sample.sampleTick >> 8;
    23da:	0a1a      	lsrs	r2, r3, #8
    u8_t bytesToSend = 12;
    u8_t dataToSend[12];

    dataToSend[0] = EVENT_LOG;
    dataToSend[1] = eventType;
    dataToSend[2] = sample.sampleTick >> 0;
    23dc:	70a3      	strb	r3, [r4, #2]
    dataToSend[3] = sample.sampleTick >> 8;
    23de:	70e2      	strb	r2, [r4, #3]
    dataToSend[4] = sample.sampleTick >> 16;
    23e0:	0c1a      	lsrs	r2, r3, #16
    dataToSend[5] = sample.sampleTick >> 24;
    23e2:	0e1b      	lsrs	r3, r3, #24

    dataToSend[0] = EVENT_LOG;
    dataToSend[1] = eventType;
    dataToSend[2] = sample.sampleTick >> 0;
    dataToSend[3] = sample.sampleTick >> 8;
    dataToSend[4] = sample.sampleTick >> 16;
    23e4:	7122      	strb	r2, [r4, #4]
    dataToSend[5] = sample.sampleTick >> 24;
    23e6:	7163      	strb	r3, [r4, #5]

    u8_t bytesToSend = 12;
    u8_t dataToSend[12];

    dataToSend[0] = EVENT_LOG;
    dataToSend[1] = eventType;
    23e8:	7060      	strb	r0, [r4, #1]
    dataToSend[2] = sample.sampleTick >> 0;
    dataToSend[3] = sample.sampleTick >> 8;
    dataToSend[4] = sample.sampleTick >> 16;
    dataToSend[5] = sample.sampleTick >> 24;

    dataToSend[6] = altitudeAGL() >> 0;
    23ea:	47b0      	blx	r6
    23ec:	71a0      	strb	r0, [r4, #6]
    dataToSend[7] = altitudeAGL() >> 8;
    23ee:	47b0      	blx	r6
    23f0:	1200      	asrs	r0, r0, #8
    23f2:	71e0      	strb	r0, [r4, #7]
    dataToSend[8] = altitudeAGL() >> 16;
    23f4:	47b0      	blx	r6
    23f6:	1400      	asrs	r0, r0, #16
    23f8:	7220      	strb	r0, [r4, #8]
    dataToSend[9] = altitudeAGL() >> 24;
    23fa:	47b0      	blx	r6
    23fc:	1600      	asrs	r0, r0, #24
    23fe:	7260      	strb	r0, [r4, #9]

    dataToSend[10] = sample.voltage.batV >> 0;
    2400:	892b      	ldrh	r3, [r5, #8]
    dataToSend[11] = sample.voltage.batV >> 8;

    makePage(bytesToSend, dataToSend);
    2402:	0021      	movs	r1, r4
    dataToSend[6] = altitudeAGL() >> 0;
    dataToSend[7] = altitudeAGL() >> 8;
    dataToSend[8] = altitudeAGL() >> 16;
    dataToSend[9] = altitudeAGL() >> 24;

    dataToSend[10] = sample.voltage.batV >> 0;
    2404:	72a3      	strb	r3, [r4, #10]
    dataToSend[11] = sample.voltage.batV >> 8;
    2406:	0a1b      	lsrs	r3, r3, #8
    2408:	72e3      	strb	r3, [r4, #11]

    makePage(bytesToSend, dataToSend);
    240a:	200c      	movs	r0, #12
    240c:	4b03      	ldr	r3, [pc, #12]	; (241c <logEvent+0x50>)
    240e:	4798      	blx	r3

}
    2410:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
    2412:	46c0      	nop			; (mov r8, r8)
    2414:	20000540 	.word	0x20000540
    2418:	00000b1d 	.word	0x00000b1d
    241c:	000022a1 	.word	0x000022a1

00002420 <logSensors>:

void logSensors() {

    writeLog = false;
    2420:	2200      	movs	r2, #0

    makePage(bytesToSend, dataToSend);

}

void logSensors() {
    2422:	b5f0      	push	{r4, r5, r6, r7, lr}

    writeLog = false;
    2424:	4b59      	ldr	r3, [pc, #356]	; (258c <logSensors+0x16c>)

    makePage(bytesToSend, dataToSend);

}

void logSensors() {
    2426:	b08d      	sub	sp, #52	; 0x34

    writeLog = false;
    2428:	701a      	strb	r2, [r3, #0]

    u8_t bytesToSend = SENSOR_LOG_LENGTH;
    u8_t dataToSend[SENSOR_LOG_LENGTH];

    float fractionalAccel = accel - (int16_t)(accel);
    242a:	4b59      	ldr	r3, [pc, #356]	; (2590 <logSensors+0x170>)
    242c:	681e      	ldr	r6, [r3, #0]
    242e:	685f      	ldr	r7, [r3, #4]
    int16_t fractAccelPart = fractionalAccel * 1000;
    2430:	4b58      	ldr	r3, [pc, #352]	; (2594 <logSensors+0x174>)
    2432:	0039      	movs	r1, r7
    2434:	0030      	movs	r0, r6
    2436:	4798      	blx	r3
    2438:	4c57      	ldr	r4, [pc, #348]	; (2598 <logSensors+0x178>)
    243a:	b200      	sxth	r0, r0
    243c:	47a0      	blx	r4
    243e:	4d57      	ldr	r5, [pc, #348]	; (259c <logSensors+0x17c>)
    2440:	0002      	movs	r2, r0
    2442:	000b      	movs	r3, r1
    2444:	0030      	movs	r0, r6
    2446:	0039      	movs	r1, r7
    2448:	47a8      	blx	r5
    244a:	4e55      	ldr	r6, [pc, #340]	; (25a0 <logSensors+0x180>)
    244c:	47b0      	blx	r6
    244e:	4955      	ldr	r1, [pc, #340]	; (25a4 <logSensors+0x184>)
    2450:	4b55      	ldr	r3, [pc, #340]	; (25a8 <logSensors+0x188>)
    2452:	4798      	blx	r3
    2454:	4b55      	ldr	r3, [pc, #340]	; (25ac <logSensors+0x18c>)
    2456:	4798      	blx	r3

    float fractionalVelocity = velocity - (int16_t)(velocity);
    2458:	4f55      	ldr	r7, [pc, #340]	; (25b0 <logSensors+0x190>)

    u8_t bytesToSend = SENSOR_LOG_LENGTH;
    u8_t dataToSend[SENSOR_LOG_LENGTH];

    float fractionalAccel = accel - (int16_t)(accel);
    int16_t fractAccelPart = fractionalAccel * 1000;
    245a:	b203      	sxth	r3, r0
    245c:	9301      	str	r3, [sp, #4]

    float fractionalVelocity = velocity - (int16_t)(velocity);
    245e:	683a      	ldr	r2, [r7, #0]
    2460:	687b      	ldr	r3, [r7, #4]
    2462:	9202      	str	r2, [sp, #8]
    2464:	9303      	str	r3, [sp, #12]
    int16_t fractVelocityPart = fractionalVelocity * 1000;
    2466:	0010      	movs	r0, r2
    2468:	0019      	movs	r1, r3
    246a:	4b4a      	ldr	r3, [pc, #296]	; (2594 <logSensors+0x174>)
    246c:	4798      	blx	r3
    246e:	b200      	sxth	r0, r0
    2470:	47a0      	blx	r4
    2472:	0002      	movs	r2, r0
    2474:	000b      	movs	r3, r1
    2476:	9802      	ldr	r0, [sp, #8]
    2478:	9903      	ldr	r1, [sp, #12]
    247a:	47a8      	blx	r5
    247c:	47b0      	blx	r6
    247e:	4949      	ldr	r1, [pc, #292]	; (25a4 <logSensors+0x184>)
    2480:	4b49      	ldr	r3, [pc, #292]	; (25a8 <logSensors+0x188>)
    2482:	4798      	blx	r3
    2484:	4b49      	ldr	r3, [pc, #292]	; (25ac <logSensors+0x18c>)
    2486:	4798      	blx	r3

    dataToSend[0] = SENSOR_LOG;
    2488:	2353      	movs	r3, #83	; 0x53

    dataToSend[1] = sample.sampleTick >> 0;
    248a:	4c4a      	ldr	r4, [pc, #296]	; (25b4 <logSensors+0x194>)
    int16_t fractAccelPart = fractionalAccel * 1000;

    float fractionalVelocity = velocity - (int16_t)(velocity);
    int16_t fractVelocityPart = fractionalVelocity * 1000;

    dataToSend[0] = SENSOR_LOG;
    248c:	aa04      	add	r2, sp, #16
    248e:	7013      	strb	r3, [r2, #0]

    dataToSend[1] = sample.sampleTick >> 0;
    2490:	6863      	ldr	r3, [r4, #4]
    dataToSend[2] = sample.sampleTick >> 8;
    2492:	a904      	add	r1, sp, #16
    float fractionalVelocity = velocity - (int16_t)(velocity);
    int16_t fractVelocityPart = fractionalVelocity * 1000;

    dataToSend[0] = SENSOR_LOG;

    dataToSend[1] = sample.sampleTick >> 0;
    2494:	7053      	strb	r3, [r2, #1]
    dataToSend[2] = sample.sampleTick >> 8;
    2496:	0a1a      	lsrs	r2, r3, #8
    2498:	708a      	strb	r2, [r1, #2]
    dataToSend[3] = sample.sampleTick >> 16;
    249a:	0c1a      	lsrs	r2, r3, #16
    249c:	70ca      	strb	r2, [r1, #3]
    dataToSend[4] = sample.sampleTick >> 24;
    249e:	0e1b      	lsrs	r3, r3, #24

    dataToSend[5] = altitudeAGL() >> 0;
    24a0:	4e45      	ldr	r6, [pc, #276]	; (25b8 <logSensors+0x198>)
    dataToSend[0] = SENSOR_LOG;

    dataToSend[1] = sample.sampleTick >> 0;
    dataToSend[2] = sample.sampleTick >> 8;
    dataToSend[3] = sample.sampleTick >> 16;
    dataToSend[4] = sample.sampleTick >> 24;
    24a2:	710b      	strb	r3, [r1, #4]

    float fractionalAccel = accel - (int16_t)(accel);
    int16_t fractAccelPart = fractionalAccel * 1000;

    float fractionalVelocity = velocity - (int16_t)(velocity);
    int16_t fractVelocityPart = fractionalVelocity * 1000;
    24a4:	b205      	sxth	r5, r0
    dataToSend[1] = sample.sampleTick >> 0;
    dataToSend[2] = sample.sampleTick >> 8;
    dataToSend[3] = sample.sampleTick >> 16;
    dataToSend[4] = sample.sampleTick >> 24;

    dataToSend[5] = altitudeAGL() >> 0;
    24a6:	47b0      	blx	r6
    24a8:	ab04      	add	r3, sp, #16
    24aa:	7158      	strb	r0, [r3, #5]
    dataToSend[6] = altitudeAGL() >> 8;
    24ac:	47b0      	blx	r6
    24ae:	ab04      	add	r3, sp, #16
    24b0:	1200      	asrs	r0, r0, #8
    24b2:	7198      	strb	r0, [r3, #6]
    dataToSend[7] = altitudeAGL() >> 16;
    24b4:	47b0      	blx	r6
    24b6:	ab04      	add	r3, sp, #16
    24b8:	1400      	asrs	r0, r0, #16
    24ba:	71d8      	strb	r0, [r3, #7]
    dataToSend[8] = altitudeAGL() >> 24;
    24bc:	47b0      	blx	r6
    24be:	ab04      	add	r3, sp, #16
    24c0:	1600      	asrs	r0, r0, #24
    24c2:	7218      	strb	r0, [r3, #8]



    dataToSend[9] = (int16_t)(accel) >> 0;
    24c4:	4b32      	ldr	r3, [pc, #200]	; (2590 <logSensors+0x170>)
    24c6:	6818      	ldr	r0, [r3, #0]
    24c8:	6859      	ldr	r1, [r3, #4]
    24ca:	4b32      	ldr	r3, [pc, #200]	; (2594 <logSensors+0x174>)
    24cc:	4798      	blx	r3
    dataToSend[10] = (int16_t)(accel) >> 8;
    dataToSend[11] = fractAccelPart >> 0;
    24ce:	466a      	mov	r2, sp
    dataToSend[7] = altitudeAGL() >> 16;
    dataToSend[8] = altitudeAGL() >> 24;



    dataToSend[9] = (int16_t)(accel) >> 0;
    24d0:	ab04      	add	r3, sp, #16
    dataToSend[10] = (int16_t)(accel) >> 8;
    dataToSend[11] = fractAccelPart >> 0;
    24d2:	7912      	ldrb	r2, [r2, #4]
    dataToSend[7] = altitudeAGL() >> 16;
    dataToSend[8] = altitudeAGL() >> 24;



    dataToSend[9] = (int16_t)(accel) >> 0;
    24d4:	b200      	sxth	r0, r0
    24d6:	7258      	strb	r0, [r3, #9]
    dataToSend[10] = (int16_t)(accel) >> 8;
    24d8:	1200      	asrs	r0, r0, #8
    dataToSend[11] = fractAccelPart >> 0;
    24da:	72da      	strb	r2, [r3, #11]
    dataToSend[8] = altitudeAGL() >> 24;



    dataToSend[9] = (int16_t)(accel) >> 0;
    dataToSend[10] = (int16_t)(accel) >> 8;
    24dc:	7298      	strb	r0, [r3, #10]
    dataToSend[11] = fractAccelPart >> 0;
    dataToSend[12] = fractAccelPart >> 8;
    24de:	9b01      	ldr	r3, [sp, #4]
    24e0:	1218      	asrs	r0, r3, #8
    24e2:	ab04      	add	r3, sp, #16
    24e4:	7318      	strb	r0, [r3, #12]


    dataToSend[13] = (int16_t)(velocity) >> 0;
    24e6:	4b2b      	ldr	r3, [pc, #172]	; (2594 <logSensors+0x174>)
    24e8:	6838      	ldr	r0, [r7, #0]
    24ea:	6879      	ldr	r1, [r7, #4]
    24ec:	4798      	blx	r3
    24ee:	ab04      	add	r3, sp, #16
    24f0:	b200      	sxth	r0, r0
    24f2:	7358      	strb	r0, [r3, #13]
    dataToSend[14] = (int16_t)(velocity) >> 8;
    dataToSend[15] = fractVelocityPart >> 0;
    24f4:	73dd      	strb	r5, [r3, #15]
    dataToSend[11] = fractAccelPart >> 0;
    dataToSend[12] = fractAccelPart >> 8;


    dataToSend[13] = (int16_t)(velocity) >> 0;
    dataToSend[14] = (int16_t)(velocity) >> 8;
    24f6:	1200      	asrs	r0, r0, #8
    dataToSend[15] = fractVelocityPart >> 0;
    dataToSend[16] = fractVelocityPart >> 8;
    24f8:	122d      	asrs	r5, r5, #8
    dataToSend[11] = fractAccelPart >> 0;
    dataToSend[12] = fractAccelPart >> 8;


    dataToSend[13] = (int16_t)(velocity) >> 0;
    dataToSend[14] = (int16_t)(velocity) >> 8;
    24fa:	7398      	strb	r0, [r3, #14]
    dataToSend[15] = fractVelocityPart >> 0;
    dataToSend[16] = fractVelocityPart >> 8;
    24fc:	741d      	strb	r5, [r3, #16]

    dataToSend[17] = sample.accelYint >> 0;
    24fe:	2228      	movs	r2, #40	; 0x28
    2500:	5ea3      	ldrsh	r3, [r4, r2]
    2502:	aa04      	add	r2, sp, #16
    2504:	7453      	strb	r3, [r2, #17]
    dataToSend[18] = sample.accelYint >> 8;
    2506:	121b      	asrs	r3, r3, #8
    2508:	7493      	strb	r3, [r2, #18]

    dataToSend[19] = sample.accelZint >> 0;
    250a:	2230      	movs	r2, #48	; 0x30
    250c:	5ea3      	ldrsh	r3, [r4, r2]
    250e:	aa04      	add	r2, sp, #16
    2510:	74d3      	strb	r3, [r2, #19]
    dataToSend[20] = sample.accelZint >> 8;
    2512:	121b      	asrs	r3, r3, #8
    2514:	7513      	strb	r3, [r2, #20]

    dataToSend[21] = sample.gyroXint >> 0;
    2516:	2238      	movs	r2, #56	; 0x38
    2518:	5ea3      	ldrsh	r3, [r4, r2]
    251a:	aa04      	add	r2, sp, #16
    251c:	7553      	strb	r3, [r2, #21]
    dataToSend[22] = sample.gyroXint >> 8;
    251e:	121b      	asrs	r3, r3, #8
    2520:	7593      	strb	r3, [r2, #22]

    dataToSend[23] = sample.gyroYint >> 0;
    2522:	1ca3      	adds	r3, r4, #2
    2524:	223e      	movs	r2, #62	; 0x3e
    2526:	5e9b      	ldrsh	r3, [r3, r2]
    2528:	aa04      	add	r2, sp, #16
    252a:	75d3      	strb	r3, [r2, #23]
    dataToSend[24] = sample.gyroYint >> 8;
    252c:	121b      	asrs	r3, r3, #8
    252e:	7613      	strb	r3, [r2, #24]

    dataToSend[25] = sample.gyroZint >> 0;
    2530:	0023      	movs	r3, r4
    2532:	3348      	adds	r3, #72	; 0x48
    2534:	2200      	movs	r2, #0
    2536:	5e9b      	ldrsh	r3, [r3, r2]
    2538:	aa04      	add	r2, sp, #16
    253a:	7653      	strb	r3, [r2, #25]
    dataToSend[26] = sample.gyroZint >> 8;
    253c:	121b      	asrs	r3, r3, #8
    253e:	7693      	strb	r3, [r2, #26]

    dataToSend[27] = sample.analogRaw >> 0;
    2540:	8b23      	ldrh	r3, [r4, #24]
    2542:	76d3      	strb	r3, [r2, #27]
    dataToSend[28] = sample.analogRaw >> 8;
    2544:	0a1b      	lsrs	r3, r3, #8
    2546:	7713      	strb	r3, [r2, #28]


    if (flightState == flightPad) {
    2548:	4b1c      	ldr	r3, [pc, #112]	; (25bc <logSensors+0x19c>)
    254a:	781b      	ldrb	r3, [r3, #0]
    254c:	2b02      	cmp	r3, #2
    254e:	d104      	bne.n	255a <logSensors+0x13a>
        writePadBuffer(bytesToSend, dataToSend);
    2550:	0011      	movs	r1, r2
    2552:	201d      	movs	r0, #29
    2554:	4b1a      	ldr	r3, [pc, #104]	; (25c0 <logSensors+0x1a0>)
    2556:	4798      	blx	r3
    2558:	e016      	b.n	2588 <logSensors+0x168>

    } else {

        makePage(bytesToSend, dataToSend);
    255a:	4b1a      	ldr	r3, [pc, #104]	; (25c4 <logSensors+0x1a4>)
    255c:	a904      	add	r1, sp, #16
    255e:	201d      	movs	r0, #29
    2560:	4798      	blx	r3

        if (pageReady) {
    2562:	4b19      	ldr	r3, [pc, #100]	; (25c8 <logSensors+0x1a8>)
    2564:	781a      	ldrb	r2, [r3, #0]
    2566:	2a00      	cmp	r2, #0
    2568:	d00e      	beq.n	2588 <logSensors+0x168>
            pageReady = false;
    256a:	2200      	movs	r2, #0
    256c:	701a      	strb	r2, [r3, #0]
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
}


inline static void pinToggle(Pin p) {
    PORT->Group[p.group].OUTTGL.reg = (1<<p.pin);
    256e:	2280      	movs	r2, #128	; 0x80
    2570:	4b16      	ldr	r3, [pc, #88]	; (25cc <logSensors+0x1ac>)
            pinToggle(LedPin);
            u8_t bytesWritten = AT25SEWritePage(currentAddress,pageToWrite);
    2572:	4c17      	ldr	r4, [pc, #92]	; (25d0 <logSensors+0x1b0>)
    2574:	0352      	lsls	r2, r2, #13
    2576:	61da      	str	r2, [r3, #28]
    2578:	4916      	ldr	r1, [pc, #88]	; (25d4 <logSensors+0x1b4>)
    257a:	4b17      	ldr	r3, [pc, #92]	; (25d8 <logSensors+0x1b8>)
    257c:	6820      	ldr	r0, [r4, #0]
    257e:	4798      	blx	r3
            currentAddress = (currentAddress + 0x100);
    2580:	6823      	ldr	r3, [r4, #0]
    2582:	3301      	adds	r3, #1
    2584:	33ff      	adds	r3, #255	; 0xff
    2586:	6023      	str	r3, [r4, #0]
        }
    }
}
    2588:	b00d      	add	sp, #52	; 0x34
    258a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    258c:	2000015a 	.word	0x2000015a
    2590:	200002d8 	.word	0x200002d8
    2594:	00006095 	.word	0x00006095
    2598:	00006101 	.word	0x00006101
    259c:	000059ad 	.word	0x000059ad
    25a0:	0000629d 	.word	0x0000629d
    25a4:	447a0000 	.word	0x447a0000
    25a8:	000043ad 	.word	0x000043ad
    25ac:	000045d5 	.word	0x000045d5
    25b0:	200002e0 	.word	0x200002e0
    25b4:	20000540 	.word	0x20000540
    25b8:	00000b1d 	.word	0x00000b1d
    25bc:	2000016c 	.word	0x2000016c
    25c0:	00002331 	.word	0x00002331
    25c4:	000022a1 	.word	0x000022a1
    25c8:	2000040a 	.word	0x2000040a
    25cc:	41004400 	.word	0x41004400
    25d0:	20000410 	.word	0x20000410
    25d4:	2000030a 	.word	0x2000030a
    25d8:	000002a5 	.word	0x000002a5

000025dc <getFlightStartAddress>:

    u8_t addressToCheck[3];

    u16_t flightAddressLoc = FLIGHTZEROSTART + (flightToFind * 0x06);

    AT25SEreadSample(flightAddressLoc, 0x03, addressToCheck);
    25dc:	2306      	movs	r3, #6
    }
}



u32_t getFlightStartAddress(u8_t flightToFind) {
    25de:	b513      	push	{r0, r1, r4, lr}

    u8_t addressToCheck[3];

    u16_t flightAddressLoc = FLIGHTZEROSTART + (flightToFind * 0x06);

    AT25SEreadSample(flightAddressLoc, 0x03, addressToCheck);
    25e0:	4358      	muls	r0, r3
    25e2:	ac01      	add	r4, sp, #4
    25e4:	3001      	adds	r0, #1
    25e6:	30ff      	adds	r0, #255	; 0xff
    25e8:	0022      	movs	r2, r4
    25ea:	2103      	movs	r1, #3
    25ec:	4b04      	ldr	r3, [pc, #16]	; (2600 <getFlightStartAddress+0x24>)
    25ee:	4798      	blx	r3

    u32_t flightStartAddress = addressToCheck[0] << 0 | addressToCheck[1] << 8 | addressToCheck[2] << 16;
    25f0:	7860      	ldrb	r0, [r4, #1]
    25f2:	78a3      	ldrb	r3, [r4, #2]
    25f4:	0200      	lsls	r0, r0, #8
    25f6:	041b      	lsls	r3, r3, #16
    25f8:	4318      	orrs	r0, r3
    25fa:	7823      	ldrb	r3, [r4, #0]
    25fc:	4318      	orrs	r0, r3

    return flightStartAddress;
}
    25fe:	bd16      	pop	{r1, r2, r4, pc}
    2600:	00000301 	.word	0x00000301

00002604 <FindFlightEndingAddress>:

    u8_t addressToCheck[3];

    u16_t flightAddressLoc = FLIGHTZEROEND + (findThisFlightsEnd * 0x06);

    AT25SEreadSample(flightAddressLoc, 0x03, addressToCheck);
    2604:	2306      	movs	r3, #6
    u32_t flightStartAddress = addressToCheck[0] << 0 | addressToCheck[1] << 8 | addressToCheck[2] << 16;

    return flightStartAddress;
}

u32_t FindFlightEndingAddress(u8_t findThisFlightsEnd) {
    2606:	b513      	push	{r0, r1, r4, lr}

    u8_t addressToCheck[3];

    u16_t flightAddressLoc = FLIGHTZEROEND + (findThisFlightsEnd * 0x06);

    AT25SEreadSample(flightAddressLoc, 0x03, addressToCheck);
    2608:	4358      	muls	r0, r3
    260a:	ac01      	add	r4, sp, #4
    260c:	3004      	adds	r0, #4
    260e:	30ff      	adds	r0, #255	; 0xff
    2610:	0022      	movs	r2, r4
    2612:	2103      	movs	r1, #3
    2614:	4b04      	ldr	r3, [pc, #16]	; (2628 <FindFlightEndingAddress+0x24>)
    2616:	4798      	blx	r3

    u32_t flightEndAddress = addressToCheck[0] << 0 | addressToCheck[1] << 8 | addressToCheck[2] << 16;
    2618:	7860      	ldrb	r0, [r4, #1]
    261a:	78a3      	ldrb	r3, [r4, #2]
    261c:	0200      	lsls	r0, r0, #8
    261e:	041b      	lsls	r3, r3, #16
    2620:	4318      	orrs	r0, r3
    2622:	7823      	ldrb	r3, [r4, #0]
    2624:	4318      	orrs	r0, r3

    return flightEndAddress;
}
    2626:	bd16      	pop	{r1, r2, r4, pc}
    2628:	00000301 	.word	0x00000301

0000262c <isFlightLogged>:

bool isFlightLogged(u8_t flightNumbToCheck) {
    262c:	b510      	push	{r4, lr}

    u32_t possibleStart = getFlightStartAddress(flightNumbToCheck);
    262e:	4b04      	ldr	r3, [pc, #16]	; (2640 <isFlightLogged+0x14>)
    2630:	4798      	blx	r3
    2632:	4b04      	ldr	r3, [pc, #16]	; (2644 <isFlightLogged+0x18>)
    if (possibleStart == 0xFFFFFF) {
        return false;
    } else {
        return true;
    }
}
    2634:	18c0      	adds	r0, r0, r3
    2636:	1e43      	subs	r3, r0, #1
    2638:	4198      	sbcs	r0, r3
    263a:	b2c0      	uxtb	r0, r0
    263c:	bd10      	pop	{r4, pc}
    263e:	46c0      	nop			; (mov r8, r8)
    2640:	000025dd 	.word	0x000025dd
    2644:	ff000001 	.word	0xff000001

00002648 <writeFlightStartAddress>:

void writeFlightStartAddress() {
    2648:	b510      	push	{r4, lr}
    AT25SFWriteBytes(flightAddressLocationInIndex,3,flightStartAddress);
    264a:	4b03      	ldr	r3, [pc, #12]	; (2658 <writeFlightStartAddress+0x10>)
    264c:	4a03      	ldr	r2, [pc, #12]	; (265c <writeFlightStartAddress+0x14>)
    264e:	8818      	ldrh	r0, [r3, #0]
    2650:	2103      	movs	r1, #3
    2652:	4b03      	ldr	r3, [pc, #12]	; (2660 <writeFlightStartAddress+0x18>)
    2654:	4798      	blx	r3
}
    2656:	bd10      	pop	{r4, pc}
    2658:	20000308 	.word	0x20000308
    265c:	2000040b 	.word	0x2000040b
    2660:	00000241 	.word	0x00000241

00002664 <writeFlightEndAddress>:


void writeFlightEndAddress() {
    2664:	b507      	push	{r0, r1, r2, lr}
    u32_t endingAddress = currentAddress;

    u8_t address[3] = {endingAddress >> 0, endingAddress >> 8, endingAddress >> 16};

    u16_t flightAddressLoc = FLIGHTZEROEND + (flightNumb * 0x06);
    AT25SFWriteBytes(flightAddressLoc, 3, address);
    2666:	2006      	movs	r0, #6
}


void writeFlightEndAddress() {

    u32_t endingAddress = currentAddress;
    2668:	4b09      	ldr	r3, [pc, #36]	; (2690 <writeFlightEndAddress+0x2c>)

    u8_t address[3] = {endingAddress >> 0, endingAddress >> 8, endingAddress >> 16};
    266a:	aa01      	add	r2, sp, #4
}


void writeFlightEndAddress() {

    u32_t endingAddress = currentAddress;
    266c:	681b      	ldr	r3, [r3, #0]

    u8_t address[3] = {endingAddress >> 0, endingAddress >> 8, endingAddress >> 16};
    266e:	7013      	strb	r3, [r2, #0]
    2670:	0a19      	lsrs	r1, r3, #8
    2672:	0c1b      	lsrs	r3, r3, #16
    2674:	7093      	strb	r3, [r2, #2]

    u16_t flightAddressLoc = FLIGHTZEROEND + (flightNumb * 0x06);
    2676:	4b07      	ldr	r3, [pc, #28]	; (2694 <writeFlightEndAddress+0x30>)

void writeFlightEndAddress() {

    u32_t endingAddress = currentAddress;

    u8_t address[3] = {endingAddress >> 0, endingAddress >> 8, endingAddress >> 16};
    2678:	7051      	strb	r1, [r2, #1]

    u16_t flightAddressLoc = FLIGHTZEROEND + (flightNumb * 0x06);
    AT25SFWriteBytes(flightAddressLoc, 3, address);
    267a:	781b      	ldrb	r3, [r3, #0]
    267c:	2103      	movs	r1, #3
    267e:	4358      	muls	r0, r3
    2680:	3004      	adds	r0, #4
    2682:	30ff      	adds	r0, #255	; 0xff
    2684:	4b04      	ldr	r3, [pc, #16]	; (2698 <writeFlightEndAddress+0x34>)
    2686:	4798      	blx	r3
    delay_ms(10);
    2688:	200a      	movs	r0, #10
    268a:	4b04      	ldr	r3, [pc, #16]	; (269c <writeFlightEndAddress+0x38>)
    268c:	4798      	blx	r3
}
    268e:	bd07      	pop	{r0, r1, r2, pc}
    2690:	20000410 	.word	0x20000410
    2694:	2000015b 	.word	0x2000015b
    2698:	00000241 	.word	0x00000241
    269c:	000010e1 	.word	0x000010e1

000026a0 <writeGroundLog>:

void writeGroundLog() {
    26a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    26a2:	2780      	movs	r7, #128	; 0x80
    u8_t i;

    for (i = 0; i < 10; i++) {
    26a4:	2691      	movs	r6, #145	; 0x91
    u16_t flightAddressLoc = FLIGHTZEROEND + (flightNumb * 0x06);
    AT25SFWriteBytes(flightAddressLoc, 3, address);
    delay_ms(10);
}

void writeGroundLog() {
    26a6:	2400      	movs	r4, #0
    26a8:	037f      	lsls	r7, r7, #13
    u8_t i;

    for (i = 0; i < 10; i++) {
    26aa:	0076      	lsls	r6, r6, #1
        makePage(SENSOR_LOG_LENGTH, &padSensorBuffer[i][0]);
    26ac:	490c      	ldr	r1, [pc, #48]	; (26e0 <writeGroundLog+0x40>)
    26ae:	4b0d      	ldr	r3, [pc, #52]	; (26e4 <writeGroundLog+0x44>)
    26b0:	1861      	adds	r1, r4, r1
    26b2:	201d      	movs	r0, #29
    26b4:	4798      	blx	r3

        if (pageReady) {
    26b6:	4b0c      	ldr	r3, [pc, #48]	; (26e8 <writeGroundLog+0x48>)
    26b8:	781a      	ldrb	r2, [r3, #0]
    26ba:	2a00      	cmp	r2, #0
    26bc:	d00c      	beq.n	26d8 <writeGroundLog+0x38>
            pageReady = false;
    26be:	2200      	movs	r2, #0
    26c0:	701a      	strb	r2, [r3, #0]
    26c2:	4b0a      	ldr	r3, [pc, #40]	; (26ec <writeGroundLog+0x4c>)
            pinToggle(LedPin);
            u8_t bytesWritten = AT25SEWritePage(currentAddress,pageToWrite);
    26c4:	4d0a      	ldr	r5, [pc, #40]	; (26f0 <writeGroundLog+0x50>)
    26c6:	61df      	str	r7, [r3, #28]
    26c8:	490a      	ldr	r1, [pc, #40]	; (26f4 <writeGroundLog+0x54>)
    26ca:	4b0b      	ldr	r3, [pc, #44]	; (26f8 <writeGroundLog+0x58>)
    26cc:	6828      	ldr	r0, [r5, #0]
    26ce:	4798      	blx	r3
            currentAddress = (currentAddress + 0x100);
    26d0:	682b      	ldr	r3, [r5, #0]
    26d2:	3301      	adds	r3, #1
    26d4:	33ff      	adds	r3, #255	; 0xff
    26d6:	602b      	str	r3, [r5, #0]
    26d8:	341d      	adds	r4, #29
}

void writeGroundLog() {
    u8_t i;

    for (i = 0; i < 10; i++) {
    26da:	42b4      	cmp	r4, r6
    26dc:	d1e6      	bne.n	26ac <writeGroundLog+0xc>
            currentAddress = (currentAddress + 0x100);
        }

    }

}
    26de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    26e0:	20000414 	.word	0x20000414
    26e4:	000022a1 	.word	0x000022a1
    26e8:	2000040a 	.word	0x2000040a
    26ec:	41004400 	.word	0x41004400
    26f0:	20000410 	.word	0x20000410
    26f4:	2000030a 	.word	0x2000030a
    26f8:	000002a5 	.word	0x000002a5

000026fc <findNewFlightStart>:


void findNewFlightStart() {
    26fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

    for (u8_t flightNumbToCheck = 0; flightNumbToCheck < 20; ++flightNumbToCheck) {
    26fe:	2400      	movs	r4, #0

        if (!isFlightLogged(flightNumbToCheck)) {
    2700:	0020      	movs	r0, r4
    2702:	4b21      	ldr	r3, [pc, #132]	; (2788 <findNewFlightStart+0x8c>)
    2704:	4798      	blx	r3
    2706:	2800      	cmp	r0, #0
    2708:	d138      	bne.n	277c <findNewFlightStart+0x80>
    270a:	4f20      	ldr	r7, [pc, #128]	; (278c <findNewFlightStart+0x90>)
    270c:	4d20      	ldr	r5, [pc, #128]	; (2790 <findNewFlightStart+0x94>)

            if (flightNumbToCheck > 0) {
    270e:	2c00      	cmp	r4, #0
    2710:	d014      	beq.n	273c <findNewFlightStart+0x40>

                u32_t startAddress = FindFlightEndingAddress(flightNumbToCheck - 1);
    2712:	1e60      	subs	r0, r4, #1
    2714:	4b1f      	ldr	r3, [pc, #124]	; (2794 <findNewFlightStart+0x98>)
    2716:	b2c0      	uxtb	r0, r0
    2718:	4798      	blx	r3
    271a:	0006      	movs	r6, r0
                delay_ms(5);
    271c:	4b1e      	ldr	r3, [pc, #120]	; (2798 <findNewFlightStart+0x9c>)
    271e:	2005      	movs	r0, #5
    2720:	4798      	blx	r3

                currentAddress = startAddress;

                flightStartAddress[0] = startAddress >> 0;
                flightStartAddress[1] = startAddress >> 8;
    2722:	0a33      	lsrs	r3, r6, #8
    2724:	706b      	strb	r3, [r5, #1]
                flightStartAddress[2] = startAddress >> 16;

                flightAddressLocationInIndex = FLIGHTZEROSTART + (flightNumbToCheck * 0x06);
    2726:	2306      	movs	r3, #6
    2728:	4363      	muls	r3, r4
    272a:	4a1c      	ldr	r2, [pc, #112]	; (279c <findNewFlightStart+0xa0>)
    272c:	3301      	adds	r3, #1
            if (flightNumbToCheck > 0) {

                u32_t startAddress = FindFlightEndingAddress(flightNumbToCheck - 1);
                delay_ms(5);

                currentAddress = startAddress;
    272e:	603e      	str	r6, [r7, #0]

                flightStartAddress[0] = startAddress >> 0;
    2730:	702e      	strb	r6, [r5, #0]
                flightStartAddress[1] = startAddress >> 8;
                flightStartAddress[2] = startAddress >> 16;

                flightAddressLocationInIndex = FLIGHTZEROSTART + (flightNumbToCheck * 0x06);
    2732:	33ff      	adds	r3, #255	; 0xff

                currentAddress = startAddress;

                flightStartAddress[0] = startAddress >> 0;
                flightStartAddress[1] = startAddress >> 8;
                flightStartAddress[2] = startAddress >> 16;
    2734:	0c36      	lsrs	r6, r6, #16
    2736:	70ae      	strb	r6, [r5, #2]

                flightAddressLocationInIndex = FLIGHTZEROSTART + (flightNumbToCheck * 0x06);
    2738:	8013      	strh	r3, [r2, #0]
    273a:	e00d      	b.n	2758 <findNewFlightStart+0x5c>

                // for flight 0, starting address is always 0x00100 (beginning of second 4k block)
            } else {
                flightStartAddress[0] = 0x00;
                flightStartAddress[1] = 0x10;
    273c:	2310      	movs	r3, #16
                flightStartAddress[2] = 0x00;

                flightAddressLocationInIndex = FLIGHTZEROSTART;
    273e:	4a17      	ldr	r2, [pc, #92]	; (279c <findNewFlightStart+0xa0>)
                flightAddressLocationInIndex = FLIGHTZEROSTART + (flightNumbToCheck * 0x06);

                // for flight 0, starting address is always 0x00100 (beginning of second 4k block)
            } else {
                flightStartAddress[0] = 0x00;
                flightStartAddress[1] = 0x10;
    2740:	706b      	strb	r3, [r5, #1]
                flightStartAddress[2] = 0x00;

                flightAddressLocationInIndex = FLIGHTZEROSTART;
    2742:	33f0      	adds	r3, #240	; 0xf0
    2744:	8013      	strh	r3, [r2, #0]

                currentAddress = 0x001000;
    2746:	2380      	movs	r3, #128	; 0x80
                beep(1000);
    2748:	20fa      	movs	r0, #250	; 0xfa
                flightStartAddress[1] = 0x10;
                flightStartAddress[2] = 0x00;

                flightAddressLocationInIndex = FLIGHTZEROSTART;

                currentAddress = 0x001000;
    274a:	015b      	lsls	r3, r3, #5
    274c:	603b      	str	r3, [r7, #0]
                beep(1000);
    274e:	0080      	lsls	r0, r0, #2
    2750:	4b13      	ldr	r3, [pc, #76]	; (27a0 <findNewFlightStart+0xa4>)

                flightAddressLocationInIndex = FLIGHTZEROSTART + (flightNumbToCheck * 0x06);

                // for flight 0, starting address is always 0x00100 (beginning of second 4k block)
            } else {
                flightStartAddress[0] = 0x00;
    2752:	702c      	strb	r4, [r5, #0]
                flightStartAddress[1] = 0x10;
                flightStartAddress[2] = 0x00;
    2754:	70ac      	strb	r4, [r5, #2]

                flightAddressLocationInIndex = FLIGHTZEROSTART;

                currentAddress = 0x001000;
                beep(1000);
    2756:	4798      	blx	r3
            }
            flightNumb = flightNumbToCheck;
    2758:	4b12      	ldr	r3, [pc, #72]	; (27a4 <findNewFlightStart+0xa8>)
    275a:	701c      	strb	r4, [r3, #0]

            while (flightNumbToCheck > 0) {
                beep(500);
    275c:	20fa      	movs	r0, #250	; 0xfa
    275e:	0040      	lsls	r0, r0, #1
                currentAddress = 0x001000;
                beep(1000);
            }
            flightNumb = flightNumbToCheck;

            while (flightNumbToCheck > 0) {
    2760:	2c00      	cmp	r4, #0
    2762:	d008      	beq.n	2776 <findNewFlightStart+0x7a>
                beep(500);
    2764:	4b0e      	ldr	r3, [pc, #56]	; (27a0 <findNewFlightStart+0xa4>)
    2766:	4798      	blx	r3
                delay_ms(500);
    2768:	20fa      	movs	r0, #250	; 0xfa
    276a:	4b0b      	ldr	r3, [pc, #44]	; (2798 <findNewFlightStart+0x9c>)
    276c:	0040      	lsls	r0, r0, #1
                --flightNumbToCheck;
    276e:	3c01      	subs	r4, #1
            }
            flightNumb = flightNumbToCheck;

            while (flightNumbToCheck > 0) {
                beep(500);
                delay_ms(500);
    2770:	4798      	blx	r3
                --flightNumbToCheck;
    2772:	b2e4      	uxtb	r4, r4
    2774:	e7f2      	b.n	275c <findNewFlightStart+0x60>
            }
            delay_ms(500);
    2776:	4b08      	ldr	r3, [pc, #32]	; (2798 <findNewFlightStart+0x9c>)
    2778:	4798      	blx	r3
            break;
    277a:	e003      	b.n	2784 <findNewFlightStart+0x88>
}


void findNewFlightStart() {

    for (u8_t flightNumbToCheck = 0; flightNumbToCheck < 20; ++flightNumbToCheck) {
    277c:	3401      	adds	r4, #1
    277e:	b2e4      	uxtb	r4, r4
    2780:	2c14      	cmp	r4, #20
    2782:	d1bd      	bne.n	2700 <findNewFlightStart+0x4>
            }
            delay_ms(500);
            break;
        }
    }
}
    2784:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2786:	46c0      	nop			; (mov r8, r8)
    2788:	0000262d 	.word	0x0000262d
    278c:	20000410 	.word	0x20000410
    2790:	2000040b 	.word	0x2000040b
    2794:	00002605 	.word	0x00002605
    2798:	000010e1 	.word	0x000010e1
    279c:	20000308 	.word	0x20000308
    27a0:	00000e11 	.word	0x00000e11
    27a4:	2000015b 	.word	0x2000015b

000027a8 <takeSample>:
#include <util.h>
#include <boardDefines.h>
#include <MS5803.h>

bool takeSample() {
    return SampleBool;
    27a8:	4b01      	ldr	r3, [pc, #4]	; (27b0 <takeSample+0x8>)
    27aa:	7818      	ldrb	r0, [r3, #0]
}
    27ac:	4770      	bx	lr
    27ae:	46c0      	nop			; (mov r8, r8)
    27b0:	2000016d 	.word	0x2000016d

000027b4 <pullSample>:

void pullSample() {
    SampleBool = true;
    27b4:	2201      	movs	r2, #1
    27b6:	4b01      	ldr	r3, [pc, #4]	; (27bc <pullSample+0x8>)
    27b8:	701a      	strb	r2, [r3, #0]
}
    27ba:	4770      	bx	lr
    27bc:	2000016d 	.word	0x2000016d

000027c0 <sampleTick>:
    SampleBool = false;
}

sample_t sample;

void sampleTick() {
    27c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    SampleBool = false;
    27c2:	2600      	movs	r6, #0
    27c4:	4bb1      	ldr	r3, [pc, #708]	; (2a8c <sampleTick+0x2cc>)

    // take last samples time to discover Dt before setting new time
    u32_t lastTick = sample.sampleTick;
    27c6:	4cb2      	ldr	r4, [pc, #712]	; (2a90 <sampleTick+0x2d0>)
    SampleBool = false;
}

sample_t sample;

void sampleTick() {
    27c8:	b085      	sub	sp, #20
    SampleBool = false;
    27ca:	701e      	strb	r6, [r3, #0]

    // take last samples time to discover Dt before setting new time
    u32_t lastTick = sample.sampleTick;
    sample.sampleTick = millis() - startupTick;
    27cc:	4bb1      	ldr	r3, [pc, #708]	; (2a94 <sampleTick+0x2d4>)

void sampleTick() {
    SampleBool = false;

    // take last samples time to discover Dt before setting new time
    u32_t lastTick = sample.sampleTick;
    27ce:	6865      	ldr	r5, [r4, #4]
    sample.sampleTick = millis() - startupTick;
    27d0:	4798      	blx	r3
    27d2:	4bb1      	ldr	r3, [pc, #708]	; (2a98 <sampleTick+0x2d8>)
    27d4:	681b      	ldr	r3, [r3, #0]
    27d6:	1ac0      	subs	r0, r0, r3
    27d8:	6060      	str	r0, [r4, #4]
    sample.tickDelta = sample.sampleTick - lastTick;
    27da:	1b40      	subs	r0, r0, r5

    // altimeter.flightTime = sample.sampleTick - offsets.StartupTick;



    sample.voltage.batV = adc_read(senseBatPin);
    27dc:	4daf      	ldr	r5, [pc, #700]	; (2a9c <sampleTick+0x2dc>)
    SampleBool = false;

    // take last samples time to discover Dt before setting new time
    u32_t lastTick = sample.sampleTick;
    sample.sampleTick = millis() - startupTick;
    sample.tickDelta = sample.sampleTick - lastTick;
    27de:	8020      	strh	r0, [r4, #0]

    // altimeter.flightTime = sample.sampleTick - offsets.StartupTick;



    sample.voltage.batV = adc_read(senseBatPin);
    27e0:	786b      	ldrb	r3, [r5, #1]
    27e2:	7829      	ldrb	r1, [r5, #0]
    27e4:	78a8      	ldrb	r0, [r5, #2]
    27e6:	021b      	lsls	r3, r3, #8
    27e8:	430b      	orrs	r3, r1
    27ea:	0400      	lsls	r0, r0, #16
    27ec:	001a      	movs	r2, r3
    27ee:	0003      	movs	r3, r0
    27f0:	78e8      	ldrb	r0, [r5, #3]
    27f2:	4313      	orrs	r3, r2
    27f4:	0600      	lsls	r0, r0, #24
    27f6:	7929      	ldrb	r1, [r5, #4]
    27f8:	4318      	orrs	r0, r3
    27fa:	4ba9      	ldr	r3, [pc, #676]	; (2aa0 <sampleTick+0x2e0>)
    27fc:	4798      	blx	r3

    sample.voltage.batFloat = sample.voltage.batV * 0.00259;
    27fe:	4ba9      	ldr	r3, [pc, #676]	; (2aa4 <sampleTick+0x2e4>)

    // altimeter.flightTime = sample.sampleTick - offsets.StartupTick;



    sample.voltage.batV = adc_read(senseBatPin);
    2800:	8120      	strh	r0, [r4, #8]

    sample.voltage.batFloat = sample.voltage.batV * 0.00259;
    2802:	4798      	blx	r3
    2804:	4aa8      	ldr	r2, [pc, #672]	; (2aa8 <sampleTick+0x2e8>)
    2806:	4fa9      	ldr	r7, [pc, #676]	; (2aac <sampleTick+0x2ec>)
    2808:	4ba9      	ldr	r3, [pc, #676]	; (2ab0 <sampleTick+0x2f0>)
    280a:	47b8      	blx	r7
    280c:	4ba9      	ldr	r3, [pc, #676]	; (2ab4 <sampleTick+0x2f4>)
    280e:	4798      	blx	r3

    sample.voltage.senseA = adc_read(senseAPin);
    2810:	79ab      	ldrb	r3, [r5, #6]
    2812:	7969      	ldrb	r1, [r5, #5]



    sample.voltage.batV = adc_read(senseBatPin);

    sample.voltage.batFloat = sample.voltage.batV * 0.00259;
    2814:	60e0      	str	r0, [r4, #12]

    sample.voltage.senseA = adc_read(senseAPin);
    2816:	79e8      	ldrb	r0, [r5, #7]
    2818:	021b      	lsls	r3, r3, #8
    281a:	430b      	orrs	r3, r1
    281c:	0400      	lsls	r0, r0, #16
    281e:	001a      	movs	r2, r3
    2820:	0003      	movs	r3, r0
    2822:	7a28      	ldrb	r0, [r5, #8]
    2824:	4313      	orrs	r3, r2
    2826:	0600      	lsls	r0, r0, #24
    2828:	7a69      	ldrb	r1, [r5, #9]
    282a:	4318      	orrs	r0, r3
    282c:	4b9c      	ldr	r3, [pc, #624]	; (2aa0 <sampleTick+0x2e0>)
    282e:	4798      	blx	r3
    sample.voltage.senseB = adc_read(senseBPin);
    2830:	7aeb      	ldrb	r3, [r5, #11]
    2832:	7aa9      	ldrb	r1, [r5, #10]

    sample.voltage.batV = adc_read(senseBatPin);

    sample.voltage.batFloat = sample.voltage.batV * 0.00259;

    sample.voltage.senseA = adc_read(senseAPin);
    2834:	8220      	strh	r0, [r4, #16]
    sample.voltage.senseB = adc_read(senseBPin);
    2836:	7b28      	ldrb	r0, [r5, #12]
    2838:	021b      	lsls	r3, r3, #8
    283a:	430b      	orrs	r3, r1
    283c:	0400      	lsls	r0, r0, #16
    283e:	001a      	movs	r2, r3
    2840:	0003      	movs	r3, r0
    2842:	7b68      	ldrb	r0, [r5, #13]
    2844:	4313      	orrs	r3, r2
    2846:	0600      	lsls	r0, r0, #24
    2848:	7ba9      	ldrb	r1, [r5, #14]
    284a:	4318      	orrs	r0, r3
    284c:	4b94      	ldr	r3, [pc, #592]	; (2aa0 <sampleTick+0x2e0>)
    284e:	4798      	blx	r3
    sample.voltage.senseC = adc_read(senseCPin);
    2850:	7c2b      	ldrb	r3, [r5, #16]
    2852:	7be9      	ldrb	r1, [r5, #15]
    sample.voltage.batV = adc_read(senseBatPin);

    sample.voltage.batFloat = sample.voltage.batV * 0.00259;

    sample.voltage.senseA = adc_read(senseAPin);
    sample.voltage.senseB = adc_read(senseBPin);
    2854:	8260      	strh	r0, [r4, #18]
    sample.voltage.senseC = adc_read(senseCPin);
    2856:	7c68      	ldrb	r0, [r5, #17]
    2858:	021b      	lsls	r3, r3, #8
    285a:	430b      	orrs	r3, r1
    285c:	0400      	lsls	r0, r0, #16
    285e:	001a      	movs	r2, r3
    2860:	0003      	movs	r3, r0
    2862:	7ca8      	ldrb	r0, [r5, #18]
    2864:	4313      	orrs	r3, r2
    2866:	0600      	lsls	r0, r0, #24
    2868:	7ce9      	ldrb	r1, [r5, #19]
    286a:	4318      	orrs	r0, r3
    286c:	4b8c      	ldr	r3, [pc, #560]	; (2aa0 <sampleTick+0x2e0>)
    286e:	4798      	blx	r3
    sample.voltage.senseD = adc_read(senseDPin);
    2870:	7d6b      	ldrb	r3, [r5, #21]
    2872:	7d29      	ldrb	r1, [r5, #20]

    sample.voltage.batFloat = sample.voltage.batV * 0.00259;

    sample.voltage.senseA = adc_read(senseAPin);
    sample.voltage.senseB = adc_read(senseBPin);
    sample.voltage.senseC = adc_read(senseCPin);
    2874:	82a0      	strh	r0, [r4, #20]
    sample.voltage.senseD = adc_read(senseDPin);
    2876:	7da8      	ldrb	r0, [r5, #22]
    2878:	021b      	lsls	r3, r3, #8
    287a:	430b      	orrs	r3, r1
    287c:	0400      	lsls	r0, r0, #16
    287e:	001a      	movs	r2, r3
    2880:	0003      	movs	r3, r0
    2882:	7de8      	ldrb	r0, [r5, #23]
    2884:	4313      	orrs	r3, r2
    2886:	0600      	lsls	r0, r0, #24
    2888:	7e29      	ldrb	r1, [r5, #24]
    288a:	4318      	orrs	r0, r3
    288c:	4b84      	ldr	r3, [pc, #528]	; (2aa0 <sampleTick+0x2e0>)
    288e:	4798      	blx	r3


    ADC->CTRLB.reg |= ADC_CTRLB_RESSEL_16BIT;
    2890:	2210      	movs	r2, #16
    2892:	4f89      	ldr	r7, [pc, #548]	; (2ab8 <sampleTick+0x2f8>)
    sample.voltage.batFloat = sample.voltage.batV * 0.00259;

    sample.voltage.senseA = adc_read(senseAPin);
    sample.voltage.senseB = adc_read(senseBPin);
    sample.voltage.senseC = adc_read(senseCPin);
    sample.voltage.senseD = adc_read(senseDPin);
    2894:	82e0      	strh	r0, [r4, #22]


    ADC->CTRLB.reg |= ADC_CTRLB_RESSEL_16BIT;
    2896:	88bb      	ldrh	r3, [r7, #4]
    ADC->AVGCTRL.reg = ADC_AVGCTRL_SAMPLENUM_16;

    sample.analogRaw = adc_read(analogAccelPin);
    2898:	7e69      	ldrb	r1, [r5, #25]
    sample.voltage.senseB = adc_read(senseBPin);
    sample.voltage.senseC = adc_read(senseCPin);
    sample.voltage.senseD = adc_read(senseDPin);


    ADC->CTRLB.reg |= ADC_CTRLB_RESSEL_16BIT;
    289a:	4313      	orrs	r3, r2
    289c:	80bb      	strh	r3, [r7, #4]
    ADC->AVGCTRL.reg = ADC_AVGCTRL_SAMPLENUM_16;
    289e:	2304      	movs	r3, #4
    28a0:	70bb      	strb	r3, [r7, #2]

    sample.analogRaw = adc_read(analogAccelPin);
    28a2:	7eab      	ldrb	r3, [r5, #26]
    28a4:	7ee8      	ldrb	r0, [r5, #27]
    28a6:	021b      	lsls	r3, r3, #8
    28a8:	430b      	orrs	r3, r1
    28aa:	0400      	lsls	r0, r0, #16
    28ac:	4303      	orrs	r3, r0
    28ae:	7f28      	ldrb	r0, [r5, #28]
    28b0:	7f69      	ldrb	r1, [r5, #29]
    28b2:	0600      	lsls	r0, r0, #24
    28b4:	4318      	orrs	r0, r3
    28b6:	4b7a      	ldr	r3, [pc, #488]	; (2aa0 <sampleTick+0x2e0>)
    28b8:	4798      	blx	r3
    sample.analogAccel = (sample.analogRaw - 48695) * 0.00487;
    28ba:	4b80      	ldr	r3, [pc, #512]	; (2abc <sampleTick+0x2fc>)


    ADC->CTRLB.reg |= ADC_CTRLB_RESSEL_16BIT;
    ADC->AVGCTRL.reg = ADC_AVGCTRL_SAMPLENUM_16;

    sample.analogRaw = adc_read(analogAccelPin);
    28bc:	8320      	strh	r0, [r4, #24]
    sample.analogAccel = (sample.analogRaw - 48695) * 0.00487;
    28be:	18c0      	adds	r0, r0, r3
    28c0:	4b78      	ldr	r3, [pc, #480]	; (2aa4 <sampleTick+0x2e4>)
    28c2:	4798      	blx	r3
    28c4:	4a7e      	ldr	r2, [pc, #504]	; (2ac0 <sampleTick+0x300>)
    28c6:	4d79      	ldr	r5, [pc, #484]	; (2aac <sampleTick+0x2ec>)
    28c8:	4b7e      	ldr	r3, [pc, #504]	; (2ac4 <sampleTick+0x304>)
    28ca:	47a8      	blx	r5
    28cc:	4b79      	ldr	r3, [pc, #484]	; (2ab4 <sampleTick+0x2f4>)
    28ce:	4798      	blx	r3
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    28d0:	2580      	movs	r5, #128	; 0x80
    28d2:	61e0      	str	r0, [r4, #28]

    ADC->AVGCTRL.reg = ADC_AVGCTRL_SAMPLENUM_1;
    28d4:	70be      	strb	r6, [r7, #2]
    ADC->CTRLB.reg |= ADC_CTRLB_RESSEL_12BIT;
    28d6:	88bb      	ldrh	r3, [r7, #4]
    28d8:	01ed      	lsls	r5, r5, #7
    28da:	b29b      	uxth	r3, r3
    28dc:	80bb      	strh	r3, [r7, #4]
    28de:	4b7a      	ldr	r3, [pc, #488]	; (2ac8 <sampleTick+0x308>)

    pinLow(cs_baro);
    spiDataOut(BARO_SPI, 0x50);
    28e0:	2150      	movs	r1, #80	; 0x50
    28e2:	4f7a      	ldr	r7, [pc, #488]	; (2acc <sampleTick+0x30c>)
    28e4:	615d      	str	r5, [r3, #20]
    28e6:	2002      	movs	r0, #2
    28e8:	47b8      	blx	r7
    pinHigh(cs_baro);
    delay_us(600);
    28ea:	2096      	movs	r0, #150	; 0x96
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    28ec:	4b76      	ldr	r3, [pc, #472]	; (2ac8 <sampleTick+0x308>)
    28ee:	0080      	lsls	r0, r0, #2
    28f0:	619d      	str	r5, [r3, #24]
    28f2:	4b77      	ldr	r3, [pc, #476]	; (2ad0 <sampleTick+0x310>)
    28f4:	4798      	blx	r3
    uint32_t tempRaw = readMS5803AdcResults();
    28f6:	4b77      	ldr	r3, [pc, #476]	; (2ad4 <sampleTick+0x314>)
    28f8:	4798      	blx	r3
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    28fa:	4b73      	ldr	r3, [pc, #460]	; (2ac8 <sampleTick+0x308>)
    28fc:	9003      	str	r0, [sp, #12]

    pinLow(cs_baro);
    spiDataOut(BARO_SPI, 0x40);
    28fe:	2140      	movs	r1, #64	; 0x40
    2900:	615d      	str	r5, [r3, #20]
    2902:	2002      	movs	r0, #2
    2904:	47b8      	blx	r7
    2906:	2280      	movs	r2, #128	; 0x80
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    2908:	4b6f      	ldr	r3, [pc, #444]	; (2ac8 <sampleTick+0x308>)
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    290a:	00d2      	lsls	r2, r2, #3
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    290c:	619d      	str	r5, [r3, #24]
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    290e:	4b72      	ldr	r3, [pc, #456]	; (2ad8 <sampleTick+0x318>)

    u8_t byteOne;
    u8_t byteTwo;
// Accel data
    pinLow(cs_accel);
    spiDataOut(ACCEL_SPI, BMI055_X_ACC_LSB | BMI055_READ_REG);
    2910:	2182      	movs	r1, #130	; 0x82
    2912:	601a      	str	r2, [r3, #0]
    2914:	0030      	movs	r0, r6
    2916:	47b8      	blx	r7
    byteOne = spiDataIn(ACCEL_SPI);
    2918:	4d70      	ldr	r5, [pc, #448]	; (2adc <sampleTick+0x31c>)
    291a:	0030      	movs	r0, r6
    291c:	47a8      	blx	r5
    291e:	0007      	movs	r7, r0
    byteTwo = spiDataIn(ACCEL_SPI);
    2920:	0030      	movs	r0, r6
    2922:	47a8      	blx	r5
    sample.accelXint = twosComp(byteOne,byteTwo);
    2924:	0200      	lsls	r0, r0, #8
    2926:	4307      	orrs	r7, r0
    byteOne = spiDataIn(ACCEL_SPI);
    2928:	0030      	movs	r0, r6
// Accel data
    pinLow(cs_accel);
    spiDataOut(ACCEL_SPI, BMI055_X_ACC_LSB | BMI055_READ_REG);
    byteOne = spiDataIn(ACCEL_SPI);
    byteTwo = spiDataIn(ACCEL_SPI);
    sample.accelXint = twosComp(byteOne,byteTwo);
    292a:	8427      	strh	r7, [r4, #32]
    byteOne = spiDataIn(ACCEL_SPI);
    292c:	47a8      	blx	r5
    292e:	0007      	movs	r7, r0
    byteTwo = spiDataIn(ACCEL_SPI);
    2930:	0030      	movs	r0, r6
    2932:	47a8      	blx	r5
    sample.accelYint = twosComp(byteOne,byteTwo);
    2934:	0200      	lsls	r0, r0, #8
    2936:	4307      	orrs	r7, r0
    byteOne = spiDataIn(ACCEL_SPI);
    2938:	0030      	movs	r0, r6
    byteOne = spiDataIn(ACCEL_SPI);
    byteTwo = spiDataIn(ACCEL_SPI);
    sample.accelXint = twosComp(byteOne,byteTwo);
    byteOne = spiDataIn(ACCEL_SPI);
    byteTwo = spiDataIn(ACCEL_SPI);
    sample.accelYint = twosComp(byteOne,byteTwo);
    293a:	8527      	strh	r7, [r4, #40]	; 0x28
    byteOne = spiDataIn(ACCEL_SPI);
    293c:	47a8      	blx	r5
    293e:	0007      	movs	r7, r0
    byteTwo = spiDataIn(ACCEL_SPI);
    2940:	0030      	movs	r0, r6
    2942:	47a8      	blx	r5
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    2944:	2280      	movs	r2, #128	; 0x80
    2946:	4b66      	ldr	r3, [pc, #408]	; (2ae0 <sampleTick+0x320>)
    2948:	00d2      	lsls	r2, r2, #3
    294a:	601a      	str	r2, [r3, #0]
    sample.accelZint = twosComp(byteOne,byteTwo);
    pinHigh(cs_accel);

    sample.accelXint =  sample.accelXint >> 4;
    sample.accelYint =  sample.accelYint >> 4;
    sample.accelZint =  sample.accelZint >> 4;
    294c:	0205      	lsls	r5, r0, #8
    byteOne = spiDataIn(ACCEL_SPI);
    byteTwo = spiDataIn(ACCEL_SPI);
    sample.accelZint = twosComp(byteOne,byteTwo);
    pinHigh(cs_accel);

    sample.accelXint =  sample.accelXint >> 4;
    294e:	2220      	movs	r2, #32
    2950:	5ea3      	ldrsh	r3, [r4, r2]
    sample.accelYint =  sample.accelYint >> 4;
    2952:	2228      	movs	r2, #40	; 0x28
    2954:	5ea6      	ldrsh	r6, [r4, r2]
    sample.accelZint =  sample.accelZint >> 4;
    2956:	432f      	orrs	r7, r5
    2958:	b23d      	sxth	r5, r7
    byteOne = spiDataIn(ACCEL_SPI);
    byteTwo = spiDataIn(ACCEL_SPI);
    sample.accelZint = twosComp(byteOne,byteTwo);
    pinHigh(cs_accel);

    sample.accelXint =  sample.accelXint >> 4;
    295a:	111b      	asrs	r3, r3, #4
    sample.accelYint =  sample.accelYint >> 4;
    295c:	1136      	asrs	r6, r6, #4
    sample.accelZint =  sample.accelZint >> 4;
    295e:	112d      	asrs	r5, r5, #4
    byteOne = spiDataIn(ACCEL_SPI);
    byteTwo = spiDataIn(ACCEL_SPI);
    sample.accelZint = twosComp(byteOne,byteTwo);
    pinHigh(cs_accel);

    sample.accelXint =  sample.accelXint >> 4;
    2960:	8423      	strh	r3, [r4, #32]
    sample.accelYint =  sample.accelYint >> 4;
    2962:	8526      	strh	r6, [r4, #40]	; 0x28
    sample.accelZint =  sample.accelZint >> 4;

    sample.accelX = sample.accelXint * BMI055_ACCEL_16G_DIV;
    2964:	0018      	movs	r0, r3
    sample.accelZint = twosComp(byteOne,byteTwo);
    pinHigh(cs_accel);

    sample.accelXint =  sample.accelXint >> 4;
    sample.accelYint =  sample.accelYint >> 4;
    sample.accelZint =  sample.accelZint >> 4;
    2966:	8625      	strh	r5, [r4, #48]	; 0x30

    sample.accelX = sample.accelXint * BMI055_ACCEL_16G_DIV;
    2968:	4b4e      	ldr	r3, [pc, #312]	; (2aa4 <sampleTick+0x2e4>)
    296a:	4798      	blx	r3
    296c:	23fe      	movs	r3, #254	; 0xfe
    296e:	2200      	movs	r2, #0
    2970:	059b      	lsls	r3, r3, #22
    2972:	4f4e      	ldr	r7, [pc, #312]	; (2aac <sampleTick+0x2ec>)
    2974:	47b8      	blx	r7
    2976:	4b4f      	ldr	r3, [pc, #316]	; (2ab4 <sampleTick+0x2f4>)
    2978:	4798      	blx	r3
    sample.accelY = sample.accelYint * BMI055_ACCEL_16G_DIV;
    297a:	4b4a      	ldr	r3, [pc, #296]	; (2aa4 <sampleTick+0x2e4>)

    sample.accelXint =  sample.accelXint >> 4;
    sample.accelYint =  sample.accelYint >> 4;
    sample.accelZint =  sample.accelZint >> 4;

    sample.accelX = sample.accelXint * BMI055_ACCEL_16G_DIV;
    297c:	6260      	str	r0, [r4, #36]	; 0x24
    sample.accelY = sample.accelYint * BMI055_ACCEL_16G_DIV;
    297e:	0030      	movs	r0, r6
    2980:	4798      	blx	r3
    2982:	23fe      	movs	r3, #254	; 0xfe
    2984:	2200      	movs	r2, #0
    2986:	059b      	lsls	r3, r3, #22
    2988:	47b8      	blx	r7
    298a:	4b4a      	ldr	r3, [pc, #296]	; (2ab4 <sampleTick+0x2f4>)
    298c:	4798      	blx	r3
	
    if (altimeter.pointingUp) {
    298e:	4b55      	ldr	r3, [pc, #340]	; (2ae4 <sampleTick+0x324>)
    sample.accelXint =  sample.accelXint >> 4;
    sample.accelYint =  sample.accelYint >> 4;
    sample.accelZint =  sample.accelZint >> 4;

    sample.accelX = sample.accelXint * BMI055_ACCEL_16G_DIV;
    sample.accelY = sample.accelYint * BMI055_ACCEL_16G_DIV;
    2990:	62e0      	str	r0, [r4, #44]	; 0x2c
	
    if (altimeter.pointingUp) {
    2992:	795b      	ldrb	r3, [r3, #5]
    2994:	4e4c      	ldr	r6, [pc, #304]	; (2ac8 <sampleTick+0x308>)
    2996:	2b00      	cmp	r3, #0
    2998:	d007      	beq.n	29aa <sampleTick+0x1ea>
        sample.accelZ = -sample.accelZint * BMI055_ACCEL_16G_DIV;
    299a:	4268      	negs	r0, r5
    299c:	4b41      	ldr	r3, [pc, #260]	; (2aa4 <sampleTick+0x2e4>)
    299e:	4798      	blx	r3
    29a0:	23fe      	movs	r3, #254	; 0xfe
    29a2:	2200      	movs	r2, #0
    29a4:	059b      	lsls	r3, r3, #22
    29a6:	003d      	movs	r5, r7
    29a8:	e006      	b.n	29b8 <sampleTick+0x1f8>
    } else {
        sample.accelZ = sample.accelZint * BMI055_ACCEL_16G_DIV;
    29aa:	0028      	movs	r0, r5
    29ac:	4b3d      	ldr	r3, [pc, #244]	; (2aa4 <sampleTick+0x2e4>)
    29ae:	4798      	blx	r3
    29b0:	23fe      	movs	r3, #254	; 0xfe
    29b2:	2200      	movs	r2, #0
    29b4:	4d3d      	ldr	r5, [pc, #244]	; (2aac <sampleTick+0x2ec>)
    29b6:	059b      	lsls	r3, r3, #22
    29b8:	47a8      	blx	r5
    29ba:	4b3e      	ldr	r3, [pc, #248]	; (2ab4 <sampleTick+0x2f4>)
    29bc:	4798      	blx	r3
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    29be:	2380      	movs	r3, #128	; 0x80
    29c0:	00db      	lsls	r3, r3, #3
    }

    // Gyro data
    pinLow(cs_gyro);
    spiDataOut(GYRO_SPI, BMI055_X_GYRO_LSB | BMI055_READ_REG);
    29c2:	2182      	movs	r1, #130	; 0x82
    sample.accelY = sample.accelYint * BMI055_ACCEL_16G_DIV;
	
    if (altimeter.pointingUp) {
        sample.accelZ = -sample.accelZint * BMI055_ACCEL_16G_DIV;
    } else {
        sample.accelZ = sample.accelZint * BMI055_ACCEL_16G_DIV;
    29c4:	6360      	str	r0, [r4, #52]	; 0x34
    29c6:	6173      	str	r3, [r6, #20]
    }

    // Gyro data
    pinLow(cs_gyro);
    spiDataOut(GYRO_SPI, BMI055_X_GYRO_LSB | BMI055_READ_REG);
    29c8:	2000      	movs	r0, #0
    29ca:	4b40      	ldr	r3, [pc, #256]	; (2acc <sampleTick+0x30c>)
    29cc:	4798      	blx	r3
    byteOne = spiDataIn(GYRO_SPI);
    29ce:	4d43      	ldr	r5, [pc, #268]	; (2adc <sampleTick+0x31c>)
    29d0:	2000      	movs	r0, #0
    29d2:	47a8      	blx	r5
    29d4:	0004      	movs	r4, r0
    byteTwo = spiDataIn(GYRO_SPI);
    29d6:	2000      	movs	r0, #0
    29d8:	47a8      	blx	r5
    sample.gyroXint = twosComp(byteOne,byteTwo);
    29da:	4f2d      	ldr	r7, [pc, #180]	; (2a90 <sampleTick+0x2d0>)
    29dc:	0200      	lsls	r0, r0, #8
    29de:	4304      	orrs	r4, r0
    byteOne = spiDataIn(GYRO_SPI);
    29e0:	2000      	movs	r0, #0
    // Gyro data
    pinLow(cs_gyro);
    spiDataOut(GYRO_SPI, BMI055_X_GYRO_LSB | BMI055_READ_REG);
    byteOne = spiDataIn(GYRO_SPI);
    byteTwo = spiDataIn(GYRO_SPI);
    sample.gyroXint = twosComp(byteOne,byteTwo);
    29e2:	873c      	strh	r4, [r7, #56]	; 0x38
    byteOne = spiDataIn(GYRO_SPI);
    29e4:	47a8      	blx	r5
    29e6:	0004      	movs	r4, r0
    byteTwo = spiDataIn(GYRO_SPI);
    29e8:	2000      	movs	r0, #0
    29ea:	47a8      	blx	r5
    sample.gyroYint = twosComp(byteOne,byteTwo);
    29ec:	4b3e      	ldr	r3, [pc, #248]	; (2ae8 <sampleTick+0x328>)
    29ee:	0200      	lsls	r0, r0, #8
    29f0:	4304      	orrs	r4, r0
    byteOne = spiDataIn(GYRO_SPI);
    29f2:	2000      	movs	r0, #0
    byteOne = spiDataIn(GYRO_SPI);
    byteTwo = spiDataIn(GYRO_SPI);
    sample.gyroXint = twosComp(byteOne,byteTwo);
    byteOne = spiDataIn(GYRO_SPI);
    byteTwo = spiDataIn(GYRO_SPI);
    sample.gyroYint = twosComp(byteOne,byteTwo);
    29f4:	87dc      	strh	r4, [r3, #62]	; 0x3e
    byteOne = spiDataIn(GYRO_SPI);
    29f6:	47a8      	blx	r5
    29f8:	0004      	movs	r4, r0
    byteTwo = spiDataIn(GYRO_SPI);
    29fa:	2000      	movs	r0, #0
    29fc:	47a8      	blx	r5
	pinGpio(p);
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
}

inline static void pinHigh(Pin p) {
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    29fe:	2380      	movs	r3, #128	; 0x80
    sample.gyroZint = twosComp(byteOne,byteTwo);
    pinHigh(cs_gyro);

    sample.gyroXint = sample.gyroXint >> 4;
    sample.gyroYint = sample.gyroYint >> 4;
    2a00:	4669      	mov	r1, sp
    2a02:	00db      	lsls	r3, r3, #3
    2a04:	61b3      	str	r3, [r6, #24]
    byteOne = spiDataIn(GYRO_SPI);
    byteTwo = spiDataIn(GYRO_SPI);
    sample.gyroZint = twosComp(byteOne,byteTwo);
    pinHigh(cs_gyro);

    sample.gyroXint = sample.gyroXint >> 4;
    2a06:	2238      	movs	r2, #56	; 0x38
    2a08:	5ebb      	ldrsh	r3, [r7, r2]
    sample.gyroYint = sample.gyroYint >> 4;
    2a0a:	4a37      	ldr	r2, [pc, #220]	; (2ae8 <sampleTick+0x328>)
    byteOne = spiDataIn(GYRO_SPI);
    byteTwo = spiDataIn(GYRO_SPI);
    sample.gyroZint = twosComp(byteOne,byteTwo);
    pinHigh(cs_gyro);

    sample.gyroXint = sample.gyroXint >> 4;
    2a0c:	111b      	asrs	r3, r3, #4
    2a0e:	873b      	strh	r3, [r7, #56]	; 0x38
    sample.gyroYint = sample.gyroYint >> 4;
    2a10:	253e      	movs	r5, #62	; 0x3e
    2a12:	5f55      	ldrsh	r5, [r2, r5]
    sample.gyroZint = sample.gyroZint >> 4;
    2a14:	0200      	lsls	r0, r0, #8
    byteTwo = spiDataIn(GYRO_SPI);
    sample.gyroZint = twosComp(byteOne,byteTwo);
    pinHigh(cs_gyro);

    sample.gyroXint = sample.gyroXint >> 4;
    sample.gyroYint = sample.gyroYint >> 4;
    2a16:	112a      	asrs	r2, r5, #4
    2a18:	9201      	str	r2, [sp, #4]
    2a1a:	8889      	ldrh	r1, [r1, #4]
    2a1c:	4a32      	ldr	r2, [pc, #200]	; (2ae8 <sampleTick+0x328>)
    sample.gyroZint = sample.gyroZint >> 4;
    2a1e:	4304      	orrs	r4, r0
    2a20:	b224      	sxth	r4, r4
    byteTwo = spiDataIn(GYRO_SPI);
    sample.gyroZint = twosComp(byteOne,byteTwo);
    pinHigh(cs_gyro);

    sample.gyroXint = sample.gyroXint >> 4;
    sample.gyroYint = sample.gyroYint >> 4;
    2a22:	87d1      	strh	r1, [r2, #62]	; 0x3e
    sample.gyroZint = sample.gyroZint >> 4;
    2a24:	1122      	asrs	r2, r4, #4
    2a26:	4669      	mov	r1, sp
    2a28:	9202      	str	r2, [sp, #8]
    2a2a:	003a      	movs	r2, r7
    2a2c:	8909      	ldrh	r1, [r1, #8]
    2a2e:	3248      	adds	r2, #72	; 0x48

    sample.gyroX =  sample.gyroXint * BMI055_GYRO_2000DS_DIV;
    2a30:	4d1c      	ldr	r5, [pc, #112]	; (2aa4 <sampleTick+0x2e4>)
    sample.gyroZint = twosComp(byteOne,byteTwo);
    pinHigh(cs_gyro);

    sample.gyroXint = sample.gyroXint >> 4;
    sample.gyroYint = sample.gyroYint >> 4;
    sample.gyroZint = sample.gyroZint >> 4;
    2a32:	8011      	strh	r1, [r2, #0]

    sample.gyroX =  sample.gyroXint * BMI055_GYRO_2000DS_DIV;
    2a34:	0018      	movs	r0, r3
    2a36:	47a8      	blx	r5
    2a38:	23fe      	movs	r3, #254	; 0xfe
    2a3a:	4c1c      	ldr	r4, [pc, #112]	; (2aac <sampleTick+0x2ec>)
    2a3c:	2200      	movs	r2, #0
    2a3e:	059b      	lsls	r3, r3, #22
    2a40:	47a0      	blx	r4
    2a42:	4e1c      	ldr	r6, [pc, #112]	; (2ab4 <sampleTick+0x2f4>)
    2a44:	47b0      	blx	r6
    2a46:	63f8      	str	r0, [r7, #60]	; 0x3c
    sample.gyroY =  sample.gyroYint * BMI055_GYRO_2000DS_DIV;
    2a48:	9801      	ldr	r0, [sp, #4]
    2a4a:	47a8      	blx	r5
    2a4c:	23fe      	movs	r3, #254	; 0xfe
    2a4e:	2200      	movs	r2, #0
    2a50:	059b      	lsls	r3, r3, #22
    2a52:	47a0      	blx	r4
    2a54:	47b0      	blx	r6
    2a56:	6478      	str	r0, [r7, #68]	; 0x44
    sample.gyroZ =  sample.gyroZint * BMI055_GYRO_2000DS_DIV;
    2a58:	9802      	ldr	r0, [sp, #8]
    2a5a:	47a8      	blx	r5
    2a5c:	23fe      	movs	r3, #254	; 0xfe
    2a5e:	2200      	movs	r2, #0
    2a60:	059b      	lsls	r3, r3, #22
    2a62:	47a0      	blx	r4
    2a64:	47b0      	blx	r6
    2a66:	64f8      	str	r0, [r7, #76]	; 0x4c


    delay_us(400);
    2a68:	20c8      	movs	r0, #200	; 0xc8
    2a6a:	4b19      	ldr	r3, [pc, #100]	; (2ad0 <sampleTick+0x310>)
    2a6c:	0040      	lsls	r0, r0, #1
    2a6e:	4798      	blx	r3
    u32_t PressureRaw = readMS5803AdcResults();
    2a70:	4b18      	ldr	r3, [pc, #96]	; (2ad4 <sampleTick+0x314>)
    2a72:	4798      	blx	r3
    ConvertPressureTemperature(PressureRaw, tempRaw, &sample.temperatureCelcus, &sample.pressureMbar);
    2a74:	4a1d      	ldr	r2, [pc, #116]	; (2aec <sampleTick+0x32c>)
    2a76:	9903      	ldr	r1, [sp, #12]
    2a78:	4b1d      	ldr	r3, [pc, #116]	; (2af0 <sampleTick+0x330>)
    2a7a:	4c1e      	ldr	r4, [pc, #120]	; (2af4 <sampleTick+0x334>)
    2a7c:	47a0      	blx	r4
    sample.pressureAltitude = paToFeetNOAA(sample.pressureMbar);
    2a7e:	6d38      	ldr	r0, [r7, #80]	; 0x50
    2a80:	4b1d      	ldr	r3, [pc, #116]	; (2af8 <sampleTick+0x338>)
    2a82:	4798      	blx	r3
    2a84:	65b8      	str	r0, [r7, #88]	; 0x58
    2a86:	65f9      	str	r1, [r7, #92]	; 0x5c
}
    2a88:	b005      	add	sp, #20
    2a8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2a8c:	2000016d 	.word	0x2000016d
    2a90:	20000540 	.word	0x20000540
    2a94:	0000112d 	.word	0x0000112d
    2a98:	2000015c 	.word	0x2000015c
    2a9c:	00006448 	.word	0x00006448
    2aa0:	00000da9 	.word	0x00000da9
    2aa4:	00006101 	.word	0x00006101
    2aa8:	a97e132b 	.word	0xa97e132b
    2aac:	000054b9 	.word	0x000054b9
    2ab0:	3f65379f 	.word	0x3f65379f
    2ab4:	0000629d 	.word	0x0000629d
    2ab8:	42004000 	.word	0x42004000
    2abc:	ffff41c9 	.word	0xffff41c9
    2ac0:	abb44e51 	.word	0xabb44e51
    2ac4:	3f73f290 	.word	0x3f73f290
    2ac8:	41004400 	.word	0x41004400
    2acc:	00002c25 	.word	0x00002c25
    2ad0:	000010ad 	.word	0x000010ad
    2ad4:	000003b5 	.word	0x000003b5
    2ad8:	41004494 	.word	0x41004494
    2adc:	00002c3d 	.word	0x00002c3d
    2ae0:	41004498 	.word	0x41004498
    2ae4:	20000160 	.word	0x20000160
    2ae8:	20000542 	.word	0x20000542
    2aec:	20000594 	.word	0x20000594
    2af0:	20000590 	.word	0x20000590
    2af4:	000003f5 	.word	0x000003f5
    2af8:	00000495 	.word	0x00000495

00002afc <sercomClockEnable>:
#include <util.h>

void sercomClockEnable(SercomId id, uint32_t clock_channel, u8_t divider) {
    2afc:	b570      	push	{r4, r5, r6, lr}
    2afe:	0004      	movs	r4, r0
    // prevent this clock write from changing any other clocks
    PM->APBCMASK.reg |= 1 << (PM_APBCMASK_SERCOM0_Pos + id);
    2b00:	2301      	movs	r3, #1
    2b02:	1ca6      	adds	r6, r4, #2
    2b04:	40b3      	lsls	r3, r6
    2b06:	480d      	ldr	r0, [pc, #52]	; (2b3c <sercomClockEnable+0x40>)
#include <util.h>

void sercomClockEnable(SercomId id, uint32_t clock_channel, u8_t divider) {
    2b08:	000d      	movs	r5, r1
    // prevent this clock write from changing any other clocks
    PM->APBCMASK.reg |= 1 << (PM_APBCMASK_SERCOM0_Pos + id);
    2b0a:	6a01      	ldr	r1, [r0, #32]
    2b0c:	430b      	orrs	r3, r1
    2b0e:	6203      	str	r3, [r0, #32]


    if (clock_channel != 0) {
    2b10:	2d00      	cmp	r5, #0
    2b12:	d003      	beq.n	2b1c <sercomClockEnable+0x20>
        // clock generators 3-8 have 8 division factor bits - DIV[7:0]
        gclkEnable(clock_channel, GCLK_SOURCE_DFLL48M, divider);
    2b14:	2107      	movs	r1, #7
    2b16:	0028      	movs	r0, r5
    2b18:	4b09      	ldr	r3, [pc, #36]	; (2b40 <sercomClockEnable+0x44>)
    2b1a:	4798      	blx	r3
    }


    // attach clock
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
    2b1c:	22f0      	movs	r2, #240	; 0xf0
    2b1e:	2080      	movs	r0, #128	; 0x80
    2b20:	0229      	lsls	r1, r5, #8
    2b22:	0112      	lsls	r2, r2, #4
    2b24:	4011      	ands	r1, r2
    2b26:	01c0      	lsls	r0, r0, #7
    2b28:	4301      	orrs	r1, r0
    2b2a:	0020      	movs	r0, r4
    2b2c:	3014      	adds	r0, #20
    2b2e:	223f      	movs	r2, #63	; 0x3f
    2b30:	0003      	movs	r3, r0
    2b32:	4013      	ands	r3, r2
    2b34:	4319      	orrs	r1, r3
    2b36:	4b03      	ldr	r3, [pc, #12]	; (2b44 <sercomClockEnable+0x48>)
    2b38:	8059      	strh	r1, [r3, #2]
                        GCLK_CLKCTRL_GEN(clock_channel) |
                        GCLK_CLKCTRL_ID(SERCOM0_GCLK_ID_CORE + id);
}
    2b3a:	bd70      	pop	{r4, r5, r6, pc}
    2b3c:	40000400 	.word	0x40000400
    2b40:	00000fdd 	.word	0x00000fdd
    2b44:	40000c00 	.word	0x40000c00

00002b48 <sercomReset>:
void computeKalmanStates();



inline static Sercom* sercom(SercomId id) {
    return (Sercom*) (0x42000800U + id * 1024);
    2b48:	4b04      	ldr	r3, [pc, #16]	; (2b5c <sercomReset+0x14>)
    2b4a:	0280      	lsls	r0, r0, #10
    2b4c:	18c0      	adds	r0, r0, r3
//                         GCLK_CLKCTRL_ID(SERCOM0_GCLK_ID_CORE + id);
}


void sercomReset(SercomId id) {
    sercom(id)->SPI.CTRLA.reg = SERCOM_SPI_CTRLA_SWRST;
    2b4e:	2301      	movs	r3, #1
    2b50:	6003      	str	r3, [r0, #0]
    while(sercom(id)->SPI.CTRLA.reg & SERCOM_SPI_CTRLA_SWRST);
    2b52:	6802      	ldr	r2, [r0, #0]
    2b54:	421a      	tst	r2, r3
    2b56:	d1fc      	bne.n	2b52 <sercomReset+0xa>
}
    2b58:	4770      	bx	lr
    2b5a:	46c0      	nop			; (mov r8, r8)
    2b5c:	42000800 	.word	0x42000800

00002b60 <sercomSpiMasterInit>:
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
}


void sercomSpiMasterInit(SercomId id, u32_t dipo, u32_t dopo, bool cpol, bool cpha, u8_t baud) {
    2b60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2b62:	0004      	movs	r4, r0
    2b64:	9300      	str	r3, [sp, #0]
    2b66:	ab08      	add	r3, sp, #32
    2b68:	781b      	ldrb	r3, [r3, #0]
    2b6a:	000e      	movs	r6, r1
    2b6c:	9301      	str	r3, [sp, #4]
    2b6e:	ab09      	add	r3, sp, #36	; 0x24
    2b70:	781f      	ldrb	r7, [r3, #0]

    sercomReset(id);
    2b72:	4b12      	ldr	r3, [pc, #72]	; (2bbc <sercomSpiMasterInit+0x5c>)
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
}


void sercomSpiMasterInit(SercomId id, u32_t dipo, u32_t dopo, bool cpol, bool cpha, u8_t baud) {
    2b74:	0015      	movs	r5, r2

    sercomReset(id);
    2b76:	4798      	blx	r3
    2b78:	4b11      	ldr	r3, [pc, #68]	; (2bc0 <sercomSpiMasterInit+0x60>)
    2b7a:	02a4      	lsls	r4, r4, #10
    2b7c:	18e4      	adds	r4, r4, r3

    sercom(id)->SPI.CTRLB.reg
        = SERCOM_SPI_CTRLB_RXEN;
    2b7e:	2380      	movs	r3, #128	; 0x80
    2b80:	029b      	lsls	r3, r3, #10
    2b82:	6063      	str	r3, [r4, #4]
    2b84:	23c0      	movs	r3, #192	; 0xc0
    sercom(id)->SPI.BAUD.reg = baud;

    sercom(id)->SPI.CTRLA.reg
        = SERCOM_SPI_CTRLA_ENABLE
          | SERCOM_SPI_CTRLA_MODE_SPI_MASTER
          | SERCOM_SPI_CTRLA_DIPO(dipo)
    2b86:	21c0      	movs	r1, #192	; 0xc0
    2b88:	042d      	lsls	r5, r5, #16
    2b8a:	029b      	lsls	r3, r3, #10
    2b8c:	402b      	ands	r3, r5
    2b8e:	250e      	movs	r5, #14
    2b90:	0536      	lsls	r6, r6, #20
    2b92:	0389      	lsls	r1, r1, #14
    2b94:	4031      	ands	r1, r6
          | SERCOM_SPI_CTRLA_DOPO(dopo)
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
    2b96:	9e00      	ldr	r6, [sp, #0]
    2b98:	431d      	orrs	r5, r3
    2b9a:	1e73      	subs	r3, r6, #1
    2b9c:	419e      	sbcs	r6, r3
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
    2b9e:	9b01      	ldr	r3, [sp, #4]
    sercom(id)->SPI.CTRLA.reg
        = SERCOM_SPI_CTRLA_ENABLE
          | SERCOM_SPI_CTRLA_MODE_SPI_MASTER
          | SERCOM_SPI_CTRLA_DIPO(dipo)
          | SERCOM_SPI_CTRLA_DOPO(dopo)
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
    2ba0:	0772      	lsls	r2, r6, #29
    2ba2:	430d      	orrs	r5, r1
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
    2ba4:	432a      	orrs	r2, r5
    2ba6:	1e59      	subs	r1, r3, #1
    2ba8:	418b      	sbcs	r3, r1
    2baa:	0016      	movs	r6, r2
    2bac:	071b      	lsls	r3, r3, #28
    2bae:	431e      	orrs	r6, r3
    sercomReset(id);

    sercom(id)->SPI.CTRLB.reg
        = SERCOM_SPI_CTRLB_RXEN;

    sercom(id)->SPI.BAUD.reg = baud;
    2bb0:	7327      	strb	r7, [r4, #12]

    sercom(id)->SPI.CTRLA.reg
        = SERCOM_SPI_CTRLA_ENABLE
    2bb2:	6026      	str	r6, [r4, #0]
        };
    }
}

static inline void SPI_sync(SercomId id) {
    while  (sercom(id)->SPI.SYNCBUSY.bit.CTRLB);
    2bb4:	69e3      	ldr	r3, [r4, #28]
    2bb6:	075b      	lsls	r3, r3, #29
    2bb8:	d4fc      	bmi.n	2bb4 <sercomSpiMasterInit+0x54>
          | SERCOM_SPI_CTRLA_DOPO(dopo)
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);

    SPI_sync(id);
}
    2bba:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    2bbc:	00002b49 	.word	0x00002b49
    2bc0:	42000800 	.word	0x42000800

00002bc4 <sercomUartInit>:




void sercomUartInit(SercomId id, u32_t rxpo, u32_t txpo, int32_t fBAUD) {
    2bc4:	b570      	push	{r4, r5, r6, lr}
    2bc6:	0006      	movs	r6, r0

    //float BAUD = 65536*(1-(16*(115200/(48000000/8))));


    sercomReset(id);
    2bc8:	4b0c      	ldr	r3, [pc, #48]	; (2bfc <sercomUartInit+0x38>)
}




void sercomUartInit(SercomId id, u32_t rxpo, u32_t txpo, int32_t fBAUD) {
    2bca:	000d      	movs	r5, r1
    2bcc:	0014      	movs	r4, r2

    //float BAUD = 65536*(1-(16*(115200/(48000000/8))));


    sercomReset(id);
    2bce:	4798      	blx	r3
void computeKalmanStates();



inline static Sercom* sercom(SercomId id) {
    return (Sercom*) (0x42000800U + id * 1024);
    2bd0:	4b0b      	ldr	r3, [pc, #44]	; (2c00 <sercomUartInit+0x3c>)
    2bd2:	02b0      	lsls	r0, r6, #10
    2bd4:	18c0      	adds	r0, r0, r3
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    2bd6:	2304      	movs	r3, #4
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    2bd8:	22c0      	movs	r2, #192	; 0xc0

    //float BAUD = 65536*(1-(16*(115200/(48000000/8))));


    sercomReset(id);
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    2bda:	6003      	str	r3, [r0, #0]
    sercom(id)->USART.BAUD.reg = 45403;
    2bdc:	4b09      	ldr	r3, [pc, #36]	; (2c04 <sercomUartInit+0x40>)
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    2bde:	0529      	lsls	r1, r5, #20
    //float BAUD = 65536*(1-(16*(115200/(48000000/8))));


    sercomReset(id);
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    sercom(id)->USART.BAUD.reg = 45403;
    2be0:	8183      	strh	r3, [r0, #12]
    sercom(id)->USART.CTRLB.reg
        = SERCOM_USART_CTRLB_RXEN
    2be2:	23c0      	movs	r3, #192	; 0xc0
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    2be4:	0392      	lsls	r2, r2, #14
    2be6:	4011      	ands	r1, r2
    2be8:	4a07      	ldr	r2, [pc, #28]	; (2c08 <sercomUartInit+0x44>)

    sercomReset(id);
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    sercom(id)->USART.BAUD.reg = 45403;
    sercom(id)->USART.CTRLB.reg
        = SERCOM_USART_CTRLB_RXEN
    2bea:	029b      	lsls	r3, r3, #10
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    2bec:	0424      	lsls	r4, r4, #16

    sercomReset(id);
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    sercom(id)->USART.BAUD.reg = 45403;
    sercom(id)->USART.CTRLB.reg
        = SERCOM_USART_CTRLB_RXEN
    2bee:	6043      	str	r3, [r0, #4]
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    2bf0:	4311      	orrs	r1, r2
    2bf2:	4023      	ands	r3, r4
    2bf4:	430b      	orrs	r3, r1
    sercom(id)->USART.BAUD.reg = 45403;
    sercom(id)->USART.CTRLB.reg
        = SERCOM_USART_CTRLB_RXEN
          | SERCOM_USART_CTRLB_TXEN;
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
    2bf6:	6003      	str	r3, [r0, #0]
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
}
    2bf8:	bd70      	pop	{r4, r5, r6, pc}
    2bfa:	46c0      	nop			; (mov r8, r8)
    2bfc:	00002b49 	.word	0x00002b49
    2c00:	42000800 	.word	0x42000800
    2c04:	ffffb15b 	.word	0xffffb15b
    2c08:	40000006 	.word	0x40000006

00002c0c <spiDataTransfer>:
    2c0c:	4b04      	ldr	r3, [pc, #16]	; (2c20 <spiDataTransfer+0x14>)
    2c0e:	0280      	lsls	r0, r0, #10
    2c10:	18c0      	adds	r0, r0, r3

u8_t spiDataTransfer(SercomId id, u8_t data) {
    sercom(id)->SPI.DATA.reg = data;
    2c12:	6281      	str	r1, [r0, #40]	; 0x28
    while(sercom(id)->SPI.INTFLAG.bit.RXC == 0);
    2c14:	7e03      	ldrb	r3, [r0, #24]
    2c16:	075b      	lsls	r3, r3, #29
    2c18:	d5fc      	bpl.n	2c14 <spiDataTransfer+0x8>
    return sercom(id)->SPI.DATA.reg;
    2c1a:	6a80      	ldr	r0, [r0, #40]	; 0x28
    2c1c:	b2c0      	uxtb	r0, r0
}
    2c1e:	4770      	bx	lr
    2c20:	42000800 	.word	0x42000800

00002c24 <spiDataOut>:
    2c24:	4b04      	ldr	r3, [pc, #16]	; (2c38 <spiDataOut+0x14>)
    2c26:	0280      	lsls	r0, r0, #10
    2c28:	18c0      	adds	r0, r0, r3

void spiDataOut(SercomId id, u8_t data) {
    sercom(id)->SPI.DATA.reg = data;
    2c2a:	6281      	str	r1, [r0, #40]	; 0x28
    while(sercom(id)->SPI.INTFLAG.bit.RXC == 0);
    2c2c:	7e03      	ldrb	r3, [r0, #24]
    2c2e:	075b      	lsls	r3, r3, #29
    2c30:	d5fc      	bpl.n	2c2c <spiDataOut+0x8>
    u8_t dummy = sercom(id)->SPI.DATA.reg;
    2c32:	6a83      	ldr	r3, [r0, #40]	; 0x28
}
    2c34:	4770      	bx	lr
    2c36:	46c0      	nop			; (mov r8, r8)
    2c38:	42000800 	.word	0x42000800

00002c3c <spiDataIn>:
    2c3c:	4b05      	ldr	r3, [pc, #20]	; (2c54 <spiDataIn+0x18>)
    2c3e:	0280      	lsls	r0, r0, #10
    2c40:	18c0      	adds	r0, r0, r3

u8_t spiDataIn(SercomId id) {
    sercom(id)->SPI.DATA.reg = 0xFF;
    2c42:	23ff      	movs	r3, #255	; 0xff
    2c44:	6283      	str	r3, [r0, #40]	; 0x28
    while(sercom(id)->SPI.INTFLAG.bit.RXC == 0);
    2c46:	7e03      	ldrb	r3, [r0, #24]
    2c48:	075b      	lsls	r3, r3, #29
    2c4a:	d5fc      	bpl.n	2c46 <spiDataIn+0xa>
    return sercom(id)->SPI.DATA.reg;
    2c4c:	6a80      	ldr	r0, [r0, #40]	; 0x28
    2c4e:	b2c0      	uxtb	r0, r0
}
    2c50:	4770      	bx	lr
    2c52:	46c0      	nop			; (mov r8, r8)
    2c54:	42000800 	.word	0x42000800

00002c58 <usartDataOut>:
    2c58:	4b04      	ldr	r3, [pc, #16]	; (2c6c <usartDataOut+0x14>)
    2c5a:	0280      	lsls	r0, r0, #10
    2c5c:	18c0      	adds	r0, r0, r3

void usartDataOut(SercomId id, u8_t data) {
    sercom(id)->USART.DATA.reg = data;
    2c5e:	b289      	uxth	r1, r1
    2c60:	8501      	strh	r1, [r0, #40]	; 0x28
    while(sercom(id)->USART.INTFLAG.bit.DRE == 0);
    2c62:	7e03      	ldrb	r3, [r0, #24]
    2c64:	07db      	lsls	r3, r3, #31
    2c66:	d5fc      	bpl.n	2c62 <usartDataOut+0xa>
}
    2c68:	4770      	bx	lr
    2c6a:	46c0      	nop			; (mov r8, r8)
    2c6c:	42000800 	.word	0x42000800

00002c70 <usartDataIn>:
    2c70:	4b02      	ldr	r3, [pc, #8]	; (2c7c <usartDataIn+0xc>)
    2c72:	0280      	lsls	r0, r0, #10
    2c74:	18c0      	adds	r0, r0, r3

u8_t usartDataIn(SercomId id) {
    return sercom(id)->USART.DATA.reg;
    2c76:	8d00      	ldrh	r0, [r0, #40]	; 0x28
    2c78:	b2c0      	uxtb	r0, r0
}
    2c7a:	4770      	bx	lr
    2c7c:	42000800 	.word	0x42000800

00002c80 <findMainAltitude>:
#include <boardDefines.h>


void findMainAltitude() {

    if (deploymentSettings.channelASettings.ENABLED & (deploymentSettings.channelASettings.TYPE == MAIN_t)) {
    2c80:	4a11      	ldr	r2, [pc, #68]	; (2cc8 <findMainAltitude+0x48>)
    2c82:	7851      	ldrb	r1, [r2, #1]
    2c84:	0013      	movs	r3, r2
    2c86:	2900      	cmp	r1, #0
    2c88:	d105      	bne.n	2c96 <findMainAltitude+0x16>
    2c8a:	7811      	ldrb	r1, [r2, #0]
    2c8c:	2900      	cmp	r1, #0
    2c8e:	d002      	beq.n	2c96 <findMainAltitude+0x16>
        deploymentSettings.MAIN_DEPLOY = deploymentSettings.channelASettings.MAIN_DEPLOY;
    2c90:	8853      	ldrh	r3, [r2, #2]
    2c92:	8313      	strh	r3, [r2, #24]
        return;
    2c94:	e017      	b.n	2cc6 <findMainAltitude+0x46>
    }
    if (deploymentSettings.channelBSettings.ENABLED & (deploymentSettings.channelBSettings.TYPE == MAIN_t)) {
    2c96:	79da      	ldrb	r2, [r3, #7]
    2c98:	2a00      	cmp	r2, #0
    2c9a:	d104      	bne.n	2ca6 <findMainAltitude+0x26>
    2c9c:	799a      	ldrb	r2, [r3, #6]
    2c9e:	2a00      	cmp	r2, #0
    2ca0:	d001      	beq.n	2ca6 <findMainAltitude+0x26>
        deploymentSettings.MAIN_DEPLOY = deploymentSettings.channelBSettings.MAIN_DEPLOY;
    2ca2:	891a      	ldrh	r2, [r3, #8]
    2ca4:	e00e      	b.n	2cc4 <findMainAltitude+0x44>
        return;
    }
    if (deploymentSettings.channelCSettings.ENABLED & (deploymentSettings.channelCSettings.TYPE == MAIN_t)) {
    2ca6:	7b5a      	ldrb	r2, [r3, #13]
    2ca8:	2a00      	cmp	r2, #0
    2caa:	d104      	bne.n	2cb6 <findMainAltitude+0x36>
    2cac:	7b1a      	ldrb	r2, [r3, #12]
    2cae:	2a00      	cmp	r2, #0
    2cb0:	d001      	beq.n	2cb6 <findMainAltitude+0x36>
        deploymentSettings.MAIN_DEPLOY = deploymentSettings.channelCSettings.MAIN_DEPLOY;
    2cb2:	89da      	ldrh	r2, [r3, #14]
    2cb4:	e006      	b.n	2cc4 <findMainAltitude+0x44>
        return;
    }
    if (deploymentSettings.channelDSettings.ENABLED & (deploymentSettings.channelDSettings.TYPE == MAIN_t)) {
    2cb6:	7cda      	ldrb	r2, [r3, #19]
    2cb8:	2a00      	cmp	r2, #0
    2cba:	d104      	bne.n	2cc6 <findMainAltitude+0x46>
    2cbc:	7c9a      	ldrb	r2, [r3, #18]
    2cbe:	2a00      	cmp	r2, #0
    2cc0:	d001      	beq.n	2cc6 <findMainAltitude+0x46>
        deploymentSettings.MAIN_DEPLOY = deploymentSettings.channelDSettings.MAIN_DEPLOY;
    2cc2:	8a9a      	ldrh	r2, [r3, #20]
    2cc4:	831a      	strh	r2, [r3, #24]
        return;
    }


}
    2cc6:	4770      	bx	lr
    2cc8:	20000140 	.word	0x20000140

00002ccc <applyDefaultSettings>:
    deploymentSettings.channelASettings.MAIN_DEPLOY = 0;
    deploymentSettings.channelASettings.APPOGE_DELAY = 0;

    deploymentSettings.channelBSettings.ENABLED = true;
    deploymentSettings.channelBSettings.TYPE = MAIN_t;
    deploymentSettings.channelBSettings.MAIN_DEPLOY = 300;
    2ccc:	2096      	movs	r0, #150	; 0x96

void applyDefaultSettings() {

    deploymentSettings.channelASettings.ENABLED = true;
    deploymentSettings.channelASettings.TYPE = DROGUE_t;
    deploymentSettings.channelASettings.MAIN_DEPLOY = 0;
    2cce:	2200      	movs	r2, #0

}

void applyDefaultSettings() {

    deploymentSettings.channelASettings.ENABLED = true;
    2cd0:	2101      	movs	r1, #1
    2cd2:	4b09      	ldr	r3, [pc, #36]	; (2cf8 <applyDefaultSettings+0x2c>)
    deploymentSettings.channelASettings.MAIN_DEPLOY = 0;
    deploymentSettings.channelASettings.APPOGE_DELAY = 0;

    deploymentSettings.channelBSettings.ENABLED = true;
    deploymentSettings.channelBSettings.TYPE = MAIN_t;
    deploymentSettings.channelBSettings.MAIN_DEPLOY = 300;
    2cd4:	0040      	lsls	r0, r0, #1

}

void applyDefaultSettings() {

    deploymentSettings.channelASettings.ENABLED = true;
    2cd6:	7019      	strb	r1, [r3, #0]
    deploymentSettings.channelASettings.TYPE = DROGUE_t;
    2cd8:	7059      	strb	r1, [r3, #1]
    deploymentSettings.channelASettings.MAIN_DEPLOY = 0;
    2cda:	805a      	strh	r2, [r3, #2]
    deploymentSettings.channelASettings.APPOGE_DELAY = 0;
    2cdc:	711a      	strb	r2, [r3, #4]

    deploymentSettings.channelBSettings.ENABLED = true;
    2cde:	7199      	strb	r1, [r3, #6]
    deploymentSettings.channelBSettings.TYPE = MAIN_t;
    2ce0:	71da      	strb	r2, [r3, #7]
    deploymentSettings.channelBSettings.MAIN_DEPLOY = 300;
    2ce2:	8118      	strh	r0, [r3, #8]
    deploymentSettings.channelBSettings.APPOGE_DELAY = 0;
    2ce4:	729a      	strb	r2, [r3, #10]

    deploymentSettings.channelCSettings.ENABLED = false;
    2ce6:	731a      	strb	r2, [r3, #12]
    deploymentSettings.channelCSettings.TYPE = DROGUE_t;
    2ce8:	7359      	strb	r1, [r3, #13]
    deploymentSettings.channelCSettings.MAIN_DEPLOY = 0;
    2cea:	81da      	strh	r2, [r3, #14]
    deploymentSettings.channelCSettings.APPOGE_DELAY = 0;
    2cec:	741a      	strb	r2, [r3, #16]

    deploymentSettings.channelDSettings.ENABLED = false;
    2cee:	749a      	strb	r2, [r3, #18]
    deploymentSettings.channelDSettings.TYPE = MAIN_t;
    2cf0:	74da      	strb	r2, [r3, #19]
    deploymentSettings.channelDSettings.MAIN_DEPLOY = 300;
    2cf2:	8298      	strh	r0, [r3, #20]
    deploymentSettings.channelDSettings.APPOGE_DELAY = 0;
    2cf4:	759a      	strb	r2, [r3, #22]
}
    2cf6:	4770      	bx	lr
    2cf8:	20000140 	.word	0x20000140

00002cfc <putSettings>:

void putSettings() {
    2cfc:	b500      	push	{lr}
    2cfe:	b0c1      	sub	sp, #260	; 0x104

    u8_t settings[256];

    settings[0] = deploymentSettings.channelASettings.ENABLED;
    2d00:	4669      	mov	r1, sp
    settings[1] = deploymentSettings.channelASettings.TYPE;
    settings[2] = deploymentSettings.channelASettings.MAIN_DEPLOY >> 8;
    2d02:	4668      	mov	r0, sp

void putSettings() {

    u8_t settings[256];

    settings[0] = deploymentSettings.channelASettings.ENABLED;
    2d04:	4b17      	ldr	r3, [pc, #92]	; (2d64 <putSettings+0x68>)
    2d06:	781a      	ldrb	r2, [r3, #0]
    2d08:	700a      	strb	r2, [r1, #0]
    settings[1] = deploymentSettings.channelASettings.TYPE;
    2d0a:	785a      	ldrb	r2, [r3, #1]
    2d0c:	704a      	strb	r2, [r1, #1]
    settings[2] = deploymentSettings.channelASettings.MAIN_DEPLOY >> 8;
    2d0e:	885a      	ldrh	r2, [r3, #2]
    2d10:	0a11      	lsrs	r1, r2, #8
    2d12:	7081      	strb	r1, [r0, #2]
    settings[3] = deploymentSettings.channelASettings.MAIN_DEPLOY >> 0;
    2d14:	70c2      	strb	r2, [r0, #3]
    settings[4] = deploymentSettings.channelASettings.APPOGE_DELAY;
    2d16:	791a      	ldrb	r2, [r3, #4]
    2d18:	7102      	strb	r2, [r0, #4]

    settings[5] = deploymentSettings.channelBSettings.ENABLED;
    2d1a:	799a      	ldrb	r2, [r3, #6]
    2d1c:	7142      	strb	r2, [r0, #5]
    settings[6] = deploymentSettings.channelBSettings.TYPE;
    2d1e:	79da      	ldrb	r2, [r3, #7]
    2d20:	7182      	strb	r2, [r0, #6]
    settings[7] = deploymentSettings.channelBSettings.MAIN_DEPLOY >> 8;
    2d22:	891a      	ldrh	r2, [r3, #8]
    2d24:	0a11      	lsrs	r1, r2, #8
    2d26:	71c1      	strb	r1, [r0, #7]
    settings[8] = deploymentSettings.channelBSettings.MAIN_DEPLOY >> 0;
    2d28:	7202      	strb	r2, [r0, #8]
    settings[9] = deploymentSettings.channelBSettings.APPOGE_DELAY;
    2d2a:	7a9a      	ldrb	r2, [r3, #10]
    2d2c:	7242      	strb	r2, [r0, #9]

    settings[10] = deploymentSettings.channelCSettings.ENABLED;
    2d2e:	7b1a      	ldrb	r2, [r3, #12]
    2d30:	7282      	strb	r2, [r0, #10]
    settings[11] = deploymentSettings.channelCSettings.TYPE;
    2d32:	7b5a      	ldrb	r2, [r3, #13]
    2d34:	72c2      	strb	r2, [r0, #11]
    settings[12] = deploymentSettings.channelCSettings.MAIN_DEPLOY >> 8;
    2d36:	89da      	ldrh	r2, [r3, #14]
    2d38:	0a11      	lsrs	r1, r2, #8
    2d3a:	7301      	strb	r1, [r0, #12]
    settings[13] = deploymentSettings.channelCSettings.MAIN_DEPLOY >> 0;
    2d3c:	7342      	strb	r2, [r0, #13]
    settings[14] = deploymentSettings.channelCSettings.APPOGE_DELAY;
    2d3e:	7c1a      	ldrb	r2, [r3, #16]
    2d40:	7382      	strb	r2, [r0, #14]

    settings[15] = deploymentSettings.channelDSettings.ENABLED;
    2d42:	7c9a      	ldrb	r2, [r3, #18]
    2d44:	73c2      	strb	r2, [r0, #15]
    settings[16] = deploymentSettings.channelDSettings.TYPE;
    2d46:	7cda      	ldrb	r2, [r3, #19]
    2d48:	7402      	strb	r2, [r0, #16]
    settings[17] = deploymentSettings.channelDSettings.MAIN_DEPLOY >> 8;
    2d4a:	8a9a      	ldrh	r2, [r3, #20]
    2d4c:	0a11      	lsrs	r1, r2, #8
    2d4e:	7441      	strb	r1, [r0, #17]
    settings[18] = deploymentSettings.channelDSettings.MAIN_DEPLOY >> 0;
    2d50:	7482      	strb	r2, [r0, #18]
    settings[19] = deploymentSettings.channelDSettings.APPOGE_DELAY;
    2d52:	7d9b      	ldrb	r3, [r3, #22]
    settings[14] = deploymentSettings.channelCSettings.APPOGE_DELAY;

    settings[15] = deploymentSettings.channelDSettings.ENABLED;
    settings[16] = deploymentSettings.channelDSettings.TYPE;
    settings[17] = deploymentSettings.channelDSettings.MAIN_DEPLOY >> 8;
    settings[18] = deploymentSettings.channelDSettings.MAIN_DEPLOY >> 0;
    2d54:	4669      	mov	r1, sp
    settings[19] = deploymentSettings.channelDSettings.APPOGE_DELAY;
    2d56:	74c3      	strb	r3, [r0, #19]

    settings[20] = 0x00;
    2d58:	2000      	movs	r0, #0

    AT25SEWritePage(0x00,settings);
    2d5a:	4b03      	ldr	r3, [pc, #12]	; (2d68 <putSettings+0x6c>)
    settings[16] = deploymentSettings.channelDSettings.TYPE;
    settings[17] = deploymentSettings.channelDSettings.MAIN_DEPLOY >> 8;
    settings[18] = deploymentSettings.channelDSettings.MAIN_DEPLOY >> 0;
    settings[19] = deploymentSettings.channelDSettings.APPOGE_DELAY;

    settings[20] = 0x00;
    2d5c:	7508      	strb	r0, [r1, #20]

    AT25SEWritePage(0x00,settings);
    2d5e:	4798      	blx	r3
}
    2d60:	b041      	add	sp, #260	; 0x104
    2d62:	bd00      	pop	{pc}
    2d64:	20000140 	.word	0x20000140
    2d68:	000002a5 	.word	0x000002a5

00002d6c <getSettings>:




void getSettings() {
    2d6c:	b500      	push	{lr}
    2d6e:	b0c1      	sub	sp, #260	; 0x104

    u8_t settings[256];

    AT25SEreadPage(0x00 , settings);
    2d70:	4669      	mov	r1, sp
    2d72:	4b2c      	ldr	r3, [pc, #176]	; (2e24 <getSettings+0xb8>)
    2d74:	2000      	movs	r0, #0
    2d76:	4798      	blx	r3

    deploymentSettings.channelASettings.ENABLED = settings[0];
    2d78:	466a      	mov	r2, sp
    2d7a:	7812      	ldrb	r2, [r2, #0]
    2d7c:	4b2a      	ldr	r3, [pc, #168]	; (2e28 <getSettings+0xbc>)
    2d7e:	1e51      	subs	r1, r2, #1
    2d80:	418a      	sbcs	r2, r1
    2d82:	701a      	strb	r2, [r3, #0]
    deploymentSettings.channelASettings.TYPE = settings[1];
    2d84:	466a      	mov	r2, sp
    2d86:	7852      	ldrb	r2, [r2, #1]
    deploymentSettings.channelASettings.MAIN_DEPLOY = settings[2] << 8 | (settings[3]);
    2d88:	4669      	mov	r1, sp
    u8_t settings[256];

    AT25SEreadPage(0x00 , settings);

    deploymentSettings.channelASettings.ENABLED = settings[0];
    deploymentSettings.channelASettings.TYPE = settings[1];
    2d8a:	705a      	strb	r2, [r3, #1]
    deploymentSettings.channelASettings.MAIN_DEPLOY = settings[2] << 8 | (settings[3]);
    2d8c:	466a      	mov	r2, sp
    2d8e:	7892      	ldrb	r2, [r2, #2]
    2d90:	78c9      	ldrb	r1, [r1, #3]
    2d92:	0212      	lsls	r2, r2, #8
    2d94:	430a      	orrs	r2, r1
    2d96:	805a      	strh	r2, [r3, #2]
    deploymentSettings.channelASettings.APPOGE_DELAY = settings[4];
    2d98:	466a      	mov	r2, sp
    2d9a:	7912      	ldrb	r2, [r2, #4]
    2d9c:	711a      	strb	r2, [r3, #4]

    deploymentSettings.channelBSettings.ENABLED = settings[5];
    2d9e:	466a      	mov	r2, sp
    2da0:	7952      	ldrb	r2, [r2, #5]
    2da2:	1e51      	subs	r1, r2, #1
    2da4:	418a      	sbcs	r2, r1
    2da6:	719a      	strb	r2, [r3, #6]
    deploymentSettings.channelBSettings.TYPE = settings[6];
    2da8:	466a      	mov	r2, sp
    2daa:	7992      	ldrb	r2, [r2, #6]
    deploymentSettings.channelBSettings.MAIN_DEPLOY = settings[7] << 8 | (settings[8]);
    2dac:	4669      	mov	r1, sp
    deploymentSettings.channelASettings.TYPE = settings[1];
    deploymentSettings.channelASettings.MAIN_DEPLOY = settings[2] << 8 | (settings[3]);
    deploymentSettings.channelASettings.APPOGE_DELAY = settings[4];

    deploymentSettings.channelBSettings.ENABLED = settings[5];
    deploymentSettings.channelBSettings.TYPE = settings[6];
    2dae:	71da      	strb	r2, [r3, #7]
    deploymentSettings.channelBSettings.MAIN_DEPLOY = settings[7] << 8 | (settings[8]);
    2db0:	466a      	mov	r2, sp
    2db2:	79d2      	ldrb	r2, [r2, #7]
    2db4:	7a09      	ldrb	r1, [r1, #8]
    2db6:	0212      	lsls	r2, r2, #8
    2db8:	430a      	orrs	r2, r1
    2dba:	811a      	strh	r2, [r3, #8]
    deploymentSettings.channelBSettings.APPOGE_DELAY = settings[9];
    2dbc:	466a      	mov	r2, sp
    2dbe:	7a52      	ldrb	r2, [r2, #9]
    2dc0:	729a      	strb	r2, [r3, #10]

    deploymentSettings.channelCSettings.ENABLED = settings[10];
    2dc2:	466a      	mov	r2, sp
    2dc4:	7a92      	ldrb	r2, [r2, #10]
    2dc6:	1e51      	subs	r1, r2, #1
    2dc8:	418a      	sbcs	r2, r1
    2dca:	731a      	strb	r2, [r3, #12]
    deploymentSettings.channelCSettings.TYPE = settings[11];
    2dcc:	466a      	mov	r2, sp
    2dce:	7ad2      	ldrb	r2, [r2, #11]
    deploymentSettings.channelCSettings.MAIN_DEPLOY = settings[12] << 8 | (settings[13]);
    2dd0:	4669      	mov	r1, sp
    deploymentSettings.channelBSettings.TYPE = settings[6];
    deploymentSettings.channelBSettings.MAIN_DEPLOY = settings[7] << 8 | (settings[8]);
    deploymentSettings.channelBSettings.APPOGE_DELAY = settings[9];

    deploymentSettings.channelCSettings.ENABLED = settings[10];
    deploymentSettings.channelCSettings.TYPE = settings[11];
    2dd2:	735a      	strb	r2, [r3, #13]
    deploymentSettings.channelCSettings.MAIN_DEPLOY = settings[12] << 8 | (settings[13]);
    2dd4:	466a      	mov	r2, sp
    2dd6:	7b12      	ldrb	r2, [r2, #12]
    2dd8:	7b49      	ldrb	r1, [r1, #13]
    2dda:	0212      	lsls	r2, r2, #8
    2ddc:	430a      	orrs	r2, r1
    2dde:	81da      	strh	r2, [r3, #14]
    deploymentSettings.channelCSettings.APPOGE_DELAY = settings[14];
    2de0:	466a      	mov	r2, sp
    2de2:	7b92      	ldrb	r2, [r2, #14]
    2de4:	741a      	strb	r2, [r3, #16]

    deploymentSettings.channelDSettings.ENABLED = settings[15];
    2de6:	466a      	mov	r2, sp
    2de8:	7bd2      	ldrb	r2, [r2, #15]
    2dea:	1e51      	subs	r1, r2, #1
    2dec:	418a      	sbcs	r2, r1
    2dee:	749a      	strb	r2, [r3, #18]
    deploymentSettings.channelDSettings.TYPE = settings[16];
    2df0:	466a      	mov	r2, sp
    2df2:	7c12      	ldrb	r2, [r2, #16]
    deploymentSettings.channelDSettings.MAIN_DEPLOY = settings[17] << 8 | (settings[18]);
    2df4:	4669      	mov	r1, sp
    deploymentSettings.channelCSettings.TYPE = settings[11];
    deploymentSettings.channelCSettings.MAIN_DEPLOY = settings[12] << 8 | (settings[13]);
    deploymentSettings.channelCSettings.APPOGE_DELAY = settings[14];

    deploymentSettings.channelDSettings.ENABLED = settings[15];
    deploymentSettings.channelDSettings.TYPE = settings[16];
    2df6:	74da      	strb	r2, [r3, #19]
    deploymentSettings.channelDSettings.MAIN_DEPLOY = settings[17] << 8 | (settings[18]);
    2df8:	466a      	mov	r2, sp
    2dfa:	7c52      	ldrb	r2, [r2, #17]
    2dfc:	7c89      	ldrb	r1, [r1, #18]
    2dfe:	0212      	lsls	r2, r2, #8
    2e00:	430a      	orrs	r2, r1
    2e02:	829a      	strh	r2, [r3, #20]
    deploymentSettings.channelDSettings.APPOGE_DELAY = settings[19];
    2e04:	466a      	mov	r2, sp
    2e06:	7cd2      	ldrb	r2, [r2, #19]
    2e08:	759a      	strb	r2, [r3, #22]


    if (settings[20] == 0xFF) {
    2e0a:	466b      	mov	r3, sp
    2e0c:	7d1b      	ldrb	r3, [r3, #20]
    2e0e:	2bff      	cmp	r3, #255	; 0xff
    2e10:	d103      	bne.n	2e1a <getSettings+0xae>
        applyDefaultSettings();
    2e12:	4b06      	ldr	r3, [pc, #24]	; (2e2c <getSettings+0xc0>)
    2e14:	4798      	blx	r3
        putSettings();
    2e16:	4b06      	ldr	r3, [pc, #24]	; (2e30 <getSettings+0xc4>)
    2e18:	4798      	blx	r3
    }

    findMainAltitude();
    2e1a:	4b06      	ldr	r3, [pc, #24]	; (2e34 <getSettings+0xc8>)
    2e1c:	4798      	blx	r3

}
    2e1e:	b041      	add	sp, #260	; 0x104
    2e20:	bd00      	pop	{pc}
    2e22:	46c0      	nop			; (mov r8, r8)
    2e24:	0000035d 	.word	0x0000035d
    2e28:	20000140 	.word	0x20000140
    2e2c:	00002ccd 	.word	0x00002ccd
    2e30:	00002cfd 	.word	0x00002cfd
    2e34:	00002c81 	.word	0x00002c81

00002e38 <sendFlightLogs>:
#include <util.h>
#include <boardDefines.h>

void sendFlightLogs() {
    2e38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

    //send list of available flight logs
    for (u8_t flightLog = 0; flightLog < 20; ++flightLog) {
    2e3a:	2400      	movs	r4, #0

        if (isFlightLogged(flightLog)) {
    2e3c:	0020      	movs	r0, r4
    2e3e:	4b1e      	ldr	r3, [pc, #120]	; (2eb8 <sendFlightLogs+0x80>)
    2e40:	4798      	blx	r3
    2e42:	2800      	cmp	r0, #0
    2e44:	d003      	beq.n	2e4e <sendFlightLogs+0x16>

            usartDataOut(USART3, flightLog);
    2e46:	0021      	movs	r1, r4
    2e48:	2003      	movs	r0, #3
    2e4a:	4b1c      	ldr	r3, [pc, #112]	; (2ebc <sendFlightLogs+0x84>)
    2e4c:	4798      	blx	r3
#include <boardDefines.h>

void sendFlightLogs() {

    //send list of available flight logs
    for (u8_t flightLog = 0; flightLog < 20; ++flightLog) {
    2e4e:	3401      	adds	r4, #1
    2e50:	b2e4      	uxtb	r4, r4
    2e52:	2c14      	cmp	r4, #20
    2e54:	d1f2      	bne.n	2e3c <sendFlightLogs+0x4>

            usartDataOut(USART3, flightLog);
        }
    }
    //done sending flight numbers
    usartDataOut(USART3, 0xFF);
    2e56:	21ff      	movs	r1, #255	; 0xff
    2e58:	2003      	movs	r0, #3
    2e5a:	4c18      	ldr	r4, [pc, #96]	; (2ebc <sendFlightLogs+0x84>)
    2e5c:	47a0      	blx	r4

    //wait for user to pick which flight to read
    while(sercom(USART3)->SPI.INTFLAG.bit.RXC == 0);
    2e5e:	4a18      	ldr	r2, [pc, #96]	; (2ec0 <sendFlightLogs+0x88>)
    2e60:	7e13      	ldrb	r3, [r2, #24]
    2e62:	075b      	lsls	r3, r3, #29
    2e64:	d5fc      	bpl.n	2e60 <sendFlightLogs+0x28>
    volatile u8_t flightToRead = usartDataIn(USART3);
    2e66:	4b17      	ldr	r3, [pc, #92]	; (2ec4 <sendFlightLogs+0x8c>)
    2e68:	2003      	movs	r0, #3
    2e6a:	4798      	blx	r3
    2e6c:	466b      	mov	r3, sp
    2e6e:	71d8      	strb	r0, [r3, #7]


    u32_t flightStartAddress = getFlightStartAddress(flightToRead);
    2e70:	79d8      	ldrb	r0, [r3, #7]
    //done sending flight numbers
    usartDataOut(USART3, 0xFF);

    //wait for user to pick which flight to read
    while(sercom(USART3)->SPI.INTFLAG.bit.RXC == 0);
    volatile u8_t flightToRead = usartDataIn(USART3);
    2e72:	1ddd      	adds	r5, r3, #7


    u32_t flightStartAddress = getFlightStartAddress(flightToRead);
    2e74:	b2c0      	uxtb	r0, r0
    2e76:	4b14      	ldr	r3, [pc, #80]	; (2ec8 <sendFlightLogs+0x90>)
    2e78:	4798      	blx	r3
    2e7a:	0007      	movs	r7, r0
    u32_t flightEndAddress = FindFlightEndingAddress(flightToRead);
    2e7c:	7828      	ldrb	r0, [r5, #0]
    2e7e:	4b13      	ldr	r3, [pc, #76]	; (2ecc <sendFlightLogs+0x94>)
    2e80:	b2c0      	uxtb	r0, r0
    2e82:	4798      	blx	r3
    2e84:	0006      	movs	r6, r0

    //inform of page numbers
    u16_t pagesToSend = (flightEndAddress  - flightStartAddress) >> 8;
    2e86:	1bc5      	subs	r5, r0, r7
    2e88:	0a2d      	lsrs	r5, r5, #8
    usartDataOut(USART3, pagesToSend >> 0);
    2e8a:	b2e9      	uxtb	r1, r5
    2e8c:	2003      	movs	r0, #3
    2e8e:	47a0      	blx	r4
    usartDataOut(USART3, pagesToSend >> 8);
    2e90:	b2a9      	uxth	r1, r5
    2e92:	0a09      	lsrs	r1, r1, #8
    2e94:	2003      	movs	r0, #3
    2e96:	47a0      	blx	r4

    //send flight end address for % full
    usartDataOut(USART3, flightEndAddress >> 0);
    2e98:	b2f1      	uxtb	r1, r6
    2e9a:	2003      	movs	r0, #3
    2e9c:	47a0      	blx	r4
    usartDataOut(USART3, flightEndAddress >> 8);
    2e9e:	0a31      	lsrs	r1, r6, #8
    2ea0:	b2c9      	uxtb	r1, r1
    2ea2:	2003      	movs	r0, #3
    2ea4:	47a0      	blx	r4
    usartDataOut(USART3, flightEndAddress >> 16);
    2ea6:	0c31      	lsrs	r1, r6, #16
    2ea8:	b2c9      	uxtb	r1, r1
    2eaa:	2003      	movs	r0, #3
    2eac:	47a0      	blx	r4

    //USART out the flights pages
    sendTheasePagesToComputer(flightStartAddress, flightEndAddress);
    2eae:	0031      	movs	r1, r6
    2eb0:	0038      	movs	r0, r7
    2eb2:	4b07      	ldr	r3, [pc, #28]	; (2ed0 <sendFlightLogs+0x98>)
    2eb4:	4798      	blx	r3

}
    2eb6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    2eb8:	0000262d 	.word	0x0000262d
    2ebc:	00002c59 	.word	0x00002c59
    2ec0:	42001400 	.word	0x42001400
    2ec4:	00002c71 	.word	0x00002c71
    2ec8:	000025dd 	.word	0x000025dd
    2ecc:	00002605 	.word	0x00002605
    2ed0:	00000ad5 	.word	0x00000ad5

00002ed4 <attemptConnection>:

void attemptConnection() {
    2ed4:	b570      	push	{r4, r5, r6, lr}

    if (USARTconnectionAvaliable()) {
    2ed6:	4b14      	ldr	r3, [pc, #80]	; (2f28 <attemptConnection+0x54>)
    2ed8:	4798      	blx	r3
    2eda:	2800      	cmp	r0, #0
    2edc:	d022      	beq.n	2f24 <attemptConnection+0x50>

        flightState = flightIdle;
    2ede:	2201      	movs	r2, #1
    2ee0:	4b12      	ldr	r3, [pc, #72]	; (2f2c <attemptConnection+0x58>)
    2ee2:	701a      	strb	r2, [r3, #0]

        //wait for user to tell us what they want
        while(sercom(USART3)->SPI.INTFLAG.bit.RXC == 0);
    2ee4:	4a12      	ldr	r2, [pc, #72]	; (2f30 <attemptConnection+0x5c>)
    2ee6:	7e13      	ldrb	r3, [r2, #24]
    2ee8:	075b      	lsls	r3, r3, #29
    2eea:	d5fc      	bpl.n	2ee6 <attemptConnection+0x12>
        u8_t option = usartDataIn(USART3);
    2eec:	2003      	movs	r0, #3
    2eee:	4b11      	ldr	r3, [pc, #68]	; (2f34 <attemptConnection+0x60>)
    2ef0:	4798      	blx	r3
    2ef2:	1e04      	subs	r4, r0, #0

        //user wants to read flight logs
        if (option == 0x4C) {
    2ef4:	2c4c      	cmp	r4, #76	; 0x4c
    2ef6:	d102      	bne.n	2efe <attemptConnection+0x2a>

            sendFlightLogs();
    2ef8:	4b0f      	ldr	r3, [pc, #60]	; (2f38 <attemptConnection+0x64>)
    2efa:	4798      	blx	r3
    2efc:	e012      	b.n	2f24 <attemptConnection+0x50>
        }
        //user wants to erase chip
        if (option == 0x45) { // 'E'
    2efe:	2845      	cmp	r0, #69	; 0x45
    2f00:	d110      	bne.n	2f24 <attemptConnection+0x50>

            //getSettings();

            AT25SFChipErase();
    2f02:	4e0e      	ldr	r6, [pc, #56]	; (2f3c <attemptConnection+0x68>)
    2f04:	47b0      	blx	r6
            AT25SFHoldTillReady();
    2f06:	4d0e      	ldr	r5, [pc, #56]	; (2f40 <attemptConnection+0x6c>)
    2f08:	47a8      	blx	r5
            delay_ms(100);
    2f0a:	2064      	movs	r0, #100	; 0x64
    2f0c:	4b0d      	ldr	r3, [pc, #52]	; (2f44 <attemptConnection+0x70>)
    2f0e:	4798      	blx	r3
            AT25SFChipErase();
    2f10:	47b0      	blx	r6

            AT25SFHoldTillReady();
    2f12:	47a8      	blx	r5

            //getSettings();

            usartDataOut(USART3, 'E');
    2f14:	2003      	movs	r0, #3
    2f16:	4b0c      	ldr	r3, [pc, #48]	; (2f48 <attemptConnection+0x74>)
    2f18:	0021      	movs	r1, r4
    2f1a:	4798      	blx	r3
            beep(400);
    2f1c:	20c8      	movs	r0, #200	; 0xc8
    2f1e:	4b0b      	ldr	r3, [pc, #44]	; (2f4c <attemptConnection+0x78>)
    2f20:	0040      	lsls	r0, r0, #1
    2f22:	4798      	blx	r3


        }
    }

}
    2f24:	bd70      	pop	{r4, r5, r6, pc}
    2f26:	46c0      	nop			; (mov r8, r8)
    2f28:	00000aa1 	.word	0x00000aa1
    2f2c:	2000016c 	.word	0x2000016c
    2f30:	42001400 	.word	0x42001400
    2f34:	00002c71 	.word	0x00002c71
    2f38:	00002e39 	.word	0x00002e39
    2f3c:	00000219 	.word	0x00000219
    2f40:	000001e5 	.word	0x000001e5
    2f44:	000010e1 	.word	0x000010e1
    2f48:	00002c59 	.word	0x00002c59
    2f4c:	00000e11 	.word	0x00000e11

00002f50 <pow>:
    2f50:	b5f0      	push	{r4, r5, r6, r7, lr}
    2f52:	465f      	mov	r7, fp
    2f54:	464d      	mov	r5, r9
    2f56:	4656      	mov	r6, sl
    2f58:	4644      	mov	r4, r8
    2f5a:	b4f0      	push	{r4, r5, r6, r7}
    2f5c:	b091      	sub	sp, #68	; 0x44
    2f5e:	001f      	movs	r7, r3
    2f60:	0004      	movs	r4, r0
    2f62:	000d      	movs	r5, r1
    2f64:	0016      	movs	r6, r2
    2f66:	f000 f9af 	bl	32c8 <__ieee754_pow>
    2f6a:	4bcf      	ldr	r3, [pc, #828]	; (32a8 <pow+0x358>)
    2f6c:	9002      	str	r0, [sp, #8]
    2f6e:	9103      	str	r1, [sp, #12]
    2f70:	469b      	mov	fp, r3
    2f72:	781b      	ldrb	r3, [r3, #0]
    2f74:	b25b      	sxtb	r3, r3
    2f76:	4699      	mov	r9, r3
    2f78:	3301      	adds	r3, #1
    2f7a:	d04f      	beq.n	301c <pow+0xcc>
    2f7c:	0032      	movs	r2, r6
    2f7e:	003b      	movs	r3, r7
    2f80:	0030      	movs	r0, r6
    2f82:	0039      	movs	r1, r7
    2f84:	f003 f866 	bl	6054 <__aeabi_dcmpun>
    2f88:	9000      	str	r0, [sp, #0]
    2f8a:	2800      	cmp	r0, #0
    2f8c:	d146      	bne.n	301c <pow+0xcc>
    2f8e:	0022      	movs	r2, r4
    2f90:	002b      	movs	r3, r5
    2f92:	0020      	movs	r0, r4
    2f94:	0029      	movs	r1, r5
    2f96:	f003 f85d 	bl	6054 <__aeabi_dcmpun>
    2f9a:	2200      	movs	r2, #0
    2f9c:	4682      	mov	sl, r0
    2f9e:	2800      	cmp	r0, #0
    2fa0:	d134      	bne.n	300c <pow+0xbc>
    2fa2:	2300      	movs	r3, #0
    2fa4:	0020      	movs	r0, r4
    2fa6:	0029      	movs	r1, r5
    2fa8:	f001 f988 	bl	42bc <__aeabi_dcmpeq>
    2fac:	2800      	cmp	r0, #0
    2fae:	d03a      	beq.n	3026 <pow+0xd6>
    2fb0:	2200      	movs	r2, #0
    2fb2:	2300      	movs	r3, #0
    2fb4:	0030      	movs	r0, r6
    2fb6:	0039      	movs	r1, r7
    2fb8:	f001 f980 	bl	42bc <__aeabi_dcmpeq>
    2fbc:	9005      	str	r0, [sp, #20]
    2fbe:	2800      	cmp	r0, #0
    2fc0:	d100      	bne.n	2fc4 <pow+0x74>
    2fc2:	e074      	b.n	30ae <pow+0x15e>
    2fc4:	ab06      	add	r3, sp, #24
    2fc6:	4698      	mov	r8, r3
    2fc8:	2301      	movs	r3, #1
    2fca:	4642      	mov	r2, r8
    2fcc:	9306      	str	r3, [sp, #24]
    2fce:	4bb7      	ldr	r3, [pc, #732]	; (32ac <pow+0x35c>)
    2fd0:	6053      	str	r3, [r2, #4]
    2fd2:	4643      	mov	r3, r8
    2fd4:	4652      	mov	r2, sl
    2fd6:	609c      	str	r4, [r3, #8]
    2fd8:	60dd      	str	r5, [r3, #12]
    2fda:	621a      	str	r2, [r3, #32]
    2fdc:	611e      	str	r6, [r3, #16]
    2fde:	615f      	str	r7, [r3, #20]
    2fe0:	4642      	mov	r2, r8
    2fe2:	2300      	movs	r3, #0
    2fe4:	2400      	movs	r4, #0
    2fe6:	6193      	str	r3, [r2, #24]
    2fe8:	61d4      	str	r4, [r2, #28]
    2fea:	464b      	mov	r3, r9
    2fec:	2b00      	cmp	r3, #0
    2fee:	d100      	bne.n	2ff2 <pow+0xa2>
    2ff0:	e094      	b.n	311c <pow+0x1cc>
    2ff2:	2300      	movs	r3, #0
    2ff4:	4cae      	ldr	r4, [pc, #696]	; (32b0 <pow+0x360>)
    2ff6:	9300      	str	r3, [sp, #0]
    2ff8:	9401      	str	r4, [sp, #4]
    2ffa:	9800      	ldr	r0, [sp, #0]
    2ffc:	9901      	ldr	r1, [sp, #4]
    2ffe:	b011      	add	sp, #68	; 0x44
    3000:	bc3c      	pop	{r2, r3, r4, r5}
    3002:	4690      	mov	r8, r2
    3004:	4699      	mov	r9, r3
    3006:	46a2      	mov	sl, r4
    3008:	46ab      	mov	fp, r5
    300a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    300c:	2300      	movs	r3, #0
    300e:	0030      	movs	r0, r6
    3010:	0039      	movs	r1, r7
    3012:	f001 f953 	bl	42bc <__aeabi_dcmpeq>
    3016:	2800      	cmp	r0, #0
    3018:	d000      	beq.n	301c <pow+0xcc>
    301a:	e0eb      	b.n	31f4 <pow+0x2a4>
    301c:	9b02      	ldr	r3, [sp, #8]
    301e:	9c03      	ldr	r4, [sp, #12]
    3020:	9300      	str	r3, [sp, #0]
    3022:	9401      	str	r4, [sp, #4]
    3024:	e7e9      	b.n	2ffa <pow+0xaa>
    3026:	9802      	ldr	r0, [sp, #8]
    3028:	9903      	ldr	r1, [sp, #12]
    302a:	f000 ff7d 	bl	3f28 <finite>
    302e:	4681      	mov	r9, r0
    3030:	2800      	cmp	r0, #0
    3032:	d100      	bne.n	3036 <pow+0xe6>
    3034:	e086      	b.n	3144 <pow+0x1f4>
    3036:	9802      	ldr	r0, [sp, #8]
    3038:	9903      	ldr	r1, [sp, #12]
    303a:	2200      	movs	r2, #0
    303c:	2300      	movs	r3, #0
    303e:	f001 f93d 	bl	42bc <__aeabi_dcmpeq>
    3042:	2800      	cmp	r0, #0
    3044:	d0ea      	beq.n	301c <pow+0xcc>
    3046:	0020      	movs	r0, r4
    3048:	0029      	movs	r1, r5
    304a:	f000 ff6d 	bl	3f28 <finite>
    304e:	9a02      	ldr	r2, [sp, #8]
    3050:	9b03      	ldr	r3, [sp, #12]
    3052:	9200      	str	r2, [sp, #0]
    3054:	9301      	str	r3, [sp, #4]
    3056:	2800      	cmp	r0, #0
    3058:	d0cf      	beq.n	2ffa <pow+0xaa>
    305a:	0030      	movs	r0, r6
    305c:	0039      	movs	r1, r7
    305e:	f000 ff63 	bl	3f28 <finite>
    3062:	9a02      	ldr	r2, [sp, #8]
    3064:	9b03      	ldr	r3, [sp, #12]
    3066:	9200      	str	r2, [sp, #0]
    3068:	9301      	str	r3, [sp, #4]
    306a:	2800      	cmp	r0, #0
    306c:	d0c5      	beq.n	2ffa <pow+0xaa>
    306e:	ab06      	add	r3, sp, #24
    3070:	4698      	mov	r8, r3
    3072:	2304      	movs	r3, #4
    3074:	4642      	mov	r2, r8
    3076:	9306      	str	r3, [sp, #24]
    3078:	4b8c      	ldr	r3, [pc, #560]	; (32ac <pow+0x35c>)
    307a:	6094      	str	r4, [r2, #8]
    307c:	60d5      	str	r5, [r2, #12]
    307e:	6053      	str	r3, [r2, #4]
    3080:	2300      	movs	r3, #0
    3082:	2400      	movs	r4, #0
    3084:	6213      	str	r3, [r2, #32]
    3086:	2300      	movs	r3, #0
    3088:	6193      	str	r3, [r2, #24]
    308a:	61d4      	str	r4, [r2, #28]
    308c:	465b      	mov	r3, fp
    308e:	781b      	ldrb	r3, [r3, #0]
    3090:	6116      	str	r6, [r2, #16]
    3092:	6157      	str	r7, [r2, #20]
    3094:	b25b      	sxtb	r3, r3
    3096:	2b02      	cmp	r3, #2
    3098:	d004      	beq.n	30a4 <pow+0x154>
    309a:	4640      	mov	r0, r8
    309c:	f000 ff4e 	bl	3f3c <matherr>
    30a0:	2800      	cmp	r0, #0
    30a2:	d140      	bne.n	3126 <pow+0x1d6>
    30a4:	f003 f9a4 	bl	63f0 <__errno>
    30a8:	2322      	movs	r3, #34	; 0x22
    30aa:	6003      	str	r3, [r0, #0]
    30ac:	e03b      	b.n	3126 <pow+0x1d6>
    30ae:	0030      	movs	r0, r6
    30b0:	0039      	movs	r1, r7
    30b2:	f000 ff39 	bl	3f28 <finite>
    30b6:	9a02      	ldr	r2, [sp, #8]
    30b8:	9b03      	ldr	r3, [sp, #12]
    30ba:	9200      	str	r2, [sp, #0]
    30bc:	9301      	str	r3, [sp, #4]
    30be:	2800      	cmp	r0, #0
    30c0:	d09b      	beq.n	2ffa <pow+0xaa>
    30c2:	2200      	movs	r2, #0
    30c4:	2300      	movs	r3, #0
    30c6:	0030      	movs	r0, r6
    30c8:	0039      	movs	r1, r7
    30ca:	f001 f8fd 	bl	42c8 <__aeabi_dcmplt>
    30ce:	2800      	cmp	r0, #0
    30d0:	d100      	bne.n	30d4 <pow+0x184>
    30d2:	e792      	b.n	2ffa <pow+0xaa>
    30d4:	ab06      	add	r3, sp, #24
    30d6:	4698      	mov	r8, r3
    30d8:	2301      	movs	r3, #1
    30da:	4642      	mov	r2, r8
    30dc:	9306      	str	r3, [sp, #24]
    30de:	4b73      	ldr	r3, [pc, #460]	; (32ac <pow+0x35c>)
    30e0:	6053      	str	r3, [r2, #4]
    30e2:	4643      	mov	r3, r8
    30e4:	9a05      	ldr	r2, [sp, #20]
    30e6:	609c      	str	r4, [r3, #8]
    30e8:	60dd      	str	r5, [r3, #12]
    30ea:	621a      	str	r2, [r3, #32]
    30ec:	611e      	str	r6, [r3, #16]
    30ee:	615f      	str	r7, [r3, #20]
    30f0:	465b      	mov	r3, fp
    30f2:	781b      	ldrb	r3, [r3, #0]
    30f4:	b25b      	sxtb	r3, r3
    30f6:	2b00      	cmp	r3, #0
    30f8:	d00b      	beq.n	3112 <pow+0x1c2>
    30fa:	2000      	movs	r0, #0
    30fc:	4642      	mov	r2, r8
    30fe:	496d      	ldr	r1, [pc, #436]	; (32b4 <pow+0x364>)
    3100:	6190      	str	r0, [r2, #24]
    3102:	61d1      	str	r1, [r2, #28]
    3104:	2b02      	cmp	r3, #2
    3106:	d109      	bne.n	311c <pow+0x1cc>
    3108:	f003 f972 	bl	63f0 <__errno>
    310c:	2321      	movs	r3, #33	; 0x21
    310e:	6003      	str	r3, [r0, #0]
    3110:	e009      	b.n	3126 <pow+0x1d6>
    3112:	4642      	mov	r2, r8
    3114:	2300      	movs	r3, #0
    3116:	2400      	movs	r4, #0
    3118:	6193      	str	r3, [r2, #24]
    311a:	61d4      	str	r4, [r2, #28]
    311c:	4640      	mov	r0, r8
    311e:	f000 ff0d 	bl	3f3c <matherr>
    3122:	2800      	cmp	r0, #0
    3124:	d0f0      	beq.n	3108 <pow+0x1b8>
    3126:	4643      	mov	r3, r8
    3128:	6a1b      	ldr	r3, [r3, #32]
    312a:	2b00      	cmp	r3, #0
    312c:	d004      	beq.n	3138 <pow+0x1e8>
    312e:	f003 f95f 	bl	63f0 <__errno>
    3132:	4643      	mov	r3, r8
    3134:	6a1b      	ldr	r3, [r3, #32]
    3136:	6003      	str	r3, [r0, #0]
    3138:	4643      	mov	r3, r8
    313a:	69dc      	ldr	r4, [r3, #28]
    313c:	699b      	ldr	r3, [r3, #24]
    313e:	9300      	str	r3, [sp, #0]
    3140:	9401      	str	r4, [sp, #4]
    3142:	e75a      	b.n	2ffa <pow+0xaa>
    3144:	0020      	movs	r0, r4
    3146:	0029      	movs	r1, r5
    3148:	f000 feee 	bl	3f28 <finite>
    314c:	2800      	cmp	r0, #0
    314e:	d100      	bne.n	3152 <pow+0x202>
    3150:	e771      	b.n	3036 <pow+0xe6>
    3152:	0030      	movs	r0, r6
    3154:	0039      	movs	r1, r7
    3156:	f000 fee7 	bl	3f28 <finite>
    315a:	2800      	cmp	r0, #0
    315c:	d100      	bne.n	3160 <pow+0x210>
    315e:	e76a      	b.n	3036 <pow+0xe6>
    3160:	9802      	ldr	r0, [sp, #8]
    3162:	9903      	ldr	r1, [sp, #12]
    3164:	000b      	movs	r3, r1
    3166:	0002      	movs	r2, r0
    3168:	f002 ff74 	bl	6054 <__aeabi_dcmpun>
    316c:	ab06      	add	r3, sp, #24
    316e:	4698      	mov	r8, r3
    3170:	2800      	cmp	r0, #0
    3172:	d17a      	bne.n	326a <pow+0x31a>
    3174:	2303      	movs	r3, #3
    3176:	4642      	mov	r2, r8
    3178:	9306      	str	r3, [sp, #24]
    317a:	4b4c      	ldr	r3, [pc, #304]	; (32ac <pow+0x35c>)
    317c:	6210      	str	r0, [r2, #32]
    317e:	6053      	str	r3, [r2, #4]
    3180:	465b      	mov	r3, fp
    3182:	781b      	ldrb	r3, [r3, #0]
    3184:	6094      	str	r4, [r2, #8]
    3186:	60d5      	str	r5, [r2, #12]
    3188:	b25b      	sxtb	r3, r3
    318a:	6116      	str	r6, [r2, #16]
    318c:	6157      	str	r7, [r2, #20]
    318e:	4699      	mov	r9, r3
    3190:	2b00      	cmp	r3, #0
    3192:	d148      	bne.n	3226 <pow+0x2d6>
    3194:	22e0      	movs	r2, #224	; 0xe0
    3196:	4641      	mov	r1, r8
    3198:	4b47      	ldr	r3, [pc, #284]	; (32b8 <pow+0x368>)
    319a:	0612      	lsls	r2, r2, #24
    319c:	618a      	str	r2, [r1, #24]
    319e:	61cb      	str	r3, [r1, #28]
    31a0:	0020      	movs	r0, r4
    31a2:	2200      	movs	r2, #0
    31a4:	2300      	movs	r3, #0
    31a6:	0029      	movs	r1, r5
    31a8:	f001 f88e 	bl	42c8 <__aeabi_dcmplt>
    31ac:	2800      	cmp	r0, #0
    31ae:	d100      	bne.n	31b2 <pow+0x262>
    31b0:	e773      	b.n	309a <pow+0x14a>
    31b2:	2200      	movs	r2, #0
    31b4:	4b41      	ldr	r3, [pc, #260]	; (32bc <pow+0x36c>)
    31b6:	0030      	movs	r0, r6
    31b8:	0039      	movs	r1, r7
    31ba:	f002 f97d 	bl	54b8 <__aeabi_dmul>
    31be:	0004      	movs	r4, r0
    31c0:	000d      	movs	r5, r1
    31c2:	f000 fec3 	bl	3f4c <rint>
    31c6:	0002      	movs	r2, r0
    31c8:	000b      	movs	r3, r1
    31ca:	0020      	movs	r0, r4
    31cc:	0029      	movs	r1, r5
    31ce:	f001 f875 	bl	42bc <__aeabi_dcmpeq>
    31d2:	2800      	cmp	r0, #0
    31d4:	d105      	bne.n	31e2 <pow+0x292>
    31d6:	22e0      	movs	r2, #224	; 0xe0
    31d8:	4b39      	ldr	r3, [pc, #228]	; (32c0 <pow+0x370>)
    31da:	0612      	lsls	r2, r2, #24
    31dc:	4641      	mov	r1, r8
    31de:	618a      	str	r2, [r1, #24]
    31e0:	61cb      	str	r3, [r1, #28]
    31e2:	465b      	mov	r3, fp
    31e4:	781b      	ldrb	r3, [r3, #0]
    31e6:	b25b      	sxtb	r3, r3
    31e8:	4699      	mov	r9, r3
    31ea:	464b      	mov	r3, r9
    31ec:	2b02      	cmp	r3, #2
    31ee:	d000      	beq.n	31f2 <pow+0x2a2>
    31f0:	e753      	b.n	309a <pow+0x14a>
    31f2:	e757      	b.n	30a4 <pow+0x154>
    31f4:	ab06      	add	r3, sp, #24
    31f6:	4698      	mov	r8, r3
    31f8:	2301      	movs	r3, #1
    31fa:	4642      	mov	r2, r8
    31fc:	9306      	str	r3, [sp, #24]
    31fe:	4b2b      	ldr	r3, [pc, #172]	; (32ac <pow+0x35c>)
    3200:	6053      	str	r3, [r2, #4]
    3202:	4643      	mov	r3, r8
    3204:	609c      	str	r4, [r3, #8]
    3206:	60dd      	str	r5, [r3, #12]
    3208:	2400      	movs	r4, #0
    320a:	9a00      	ldr	r2, [sp, #0]
    320c:	4d28      	ldr	r5, [pc, #160]	; (32b0 <pow+0x360>)
    320e:	621a      	str	r2, [r3, #32]
    3210:	611e      	str	r6, [r3, #16]
    3212:	615f      	str	r7, [r3, #20]
    3214:	619c      	str	r4, [r3, #24]
    3216:	61dd      	str	r5, [r3, #28]
    3218:	464b      	mov	r3, r9
    321a:	9400      	str	r4, [sp, #0]
    321c:	9501      	str	r5, [sp, #4]
    321e:	2b02      	cmp	r3, #2
    3220:	d000      	beq.n	3224 <pow+0x2d4>
    3222:	e77b      	b.n	311c <pow+0x1cc>
    3224:	e6e9      	b.n	2ffa <pow+0xaa>
    3226:	2200      	movs	r2, #0
    3228:	4641      	mov	r1, r8
    322a:	4b26      	ldr	r3, [pc, #152]	; (32c4 <pow+0x374>)
    322c:	0020      	movs	r0, r4
    322e:	618a      	str	r2, [r1, #24]
    3230:	61cb      	str	r3, [r1, #28]
    3232:	2200      	movs	r2, #0
    3234:	2300      	movs	r3, #0
    3236:	0029      	movs	r1, r5
    3238:	f001 f846 	bl	42c8 <__aeabi_dcmplt>
    323c:	2800      	cmp	r0, #0
    323e:	d0d4      	beq.n	31ea <pow+0x29a>
    3240:	2200      	movs	r2, #0
    3242:	4b1e      	ldr	r3, [pc, #120]	; (32bc <pow+0x36c>)
    3244:	0030      	movs	r0, r6
    3246:	0039      	movs	r1, r7
    3248:	f002 f936 	bl	54b8 <__aeabi_dmul>
    324c:	0004      	movs	r4, r0
    324e:	000d      	movs	r5, r1
    3250:	f000 fe7c 	bl	3f4c <rint>
    3254:	0002      	movs	r2, r0
    3256:	000b      	movs	r3, r1
    3258:	0020      	movs	r0, r4
    325a:	0029      	movs	r1, r5
    325c:	f001 f82e 	bl	42bc <__aeabi_dcmpeq>
    3260:	2800      	cmp	r0, #0
    3262:	d1be      	bne.n	31e2 <pow+0x292>
    3264:	2200      	movs	r2, #0
    3266:	4b13      	ldr	r3, [pc, #76]	; (32b4 <pow+0x364>)
    3268:	e7b8      	b.n	31dc <pow+0x28c>
    326a:	2301      	movs	r3, #1
    326c:	4642      	mov	r2, r8
    326e:	9306      	str	r3, [sp, #24]
    3270:	4b0e      	ldr	r3, [pc, #56]	; (32ac <pow+0x35c>)
    3272:	6053      	str	r3, [r2, #4]
    3274:	4643      	mov	r3, r8
    3276:	464a      	mov	r2, r9
    3278:	609c      	str	r4, [r3, #8]
    327a:	60dd      	str	r5, [r3, #12]
    327c:	621a      	str	r2, [r3, #32]
    327e:	611e      	str	r6, [r3, #16]
    3280:	615f      	str	r7, [r3, #20]
    3282:	2400      	movs	r4, #0
    3284:	465b      	mov	r3, fp
    3286:	571c      	ldrsb	r4, [r3, r4]
    3288:	2c00      	cmp	r4, #0
    328a:	d100      	bne.n	328e <pow+0x33e>
    328c:	e741      	b.n	3112 <pow+0x1c2>
    328e:	2300      	movs	r3, #0
    3290:	2200      	movs	r2, #0
    3292:	0019      	movs	r1, r3
    3294:	0010      	movs	r0, r2
    3296:	f001 fceb 	bl	4c70 <__aeabi_ddiv>
    329a:	4643      	mov	r3, r8
    329c:	6198      	str	r0, [r3, #24]
    329e:	61d9      	str	r1, [r3, #28]
    32a0:	2c02      	cmp	r4, #2
    32a2:	d100      	bne.n	32a6 <pow+0x356>
    32a4:	e730      	b.n	3108 <pow+0x1b8>
    32a6:	e739      	b.n	311c <pow+0x1cc>
    32a8:	20000070 	.word	0x20000070
    32ac:	00006468 	.word	0x00006468
    32b0:	3ff00000 	.word	0x3ff00000
    32b4:	fff00000 	.word	0xfff00000
    32b8:	47efffff 	.word	0x47efffff
    32bc:	3fe00000 	.word	0x3fe00000
    32c0:	c7efffff 	.word	0xc7efffff
    32c4:	7ff00000 	.word	0x7ff00000

000032c8 <__ieee754_pow>:
    32c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    32ca:	4656      	mov	r6, sl
    32cc:	464d      	mov	r5, r9
    32ce:	4644      	mov	r4, r8
    32d0:	465f      	mov	r7, fp
    32d2:	b4f0      	push	{r4, r5, r6, r7}
    32d4:	001c      	movs	r4, r3
    32d6:	0013      	movs	r3, r2
    32d8:	0067      	lsls	r7, r4, #1
    32da:	b091      	sub	sp, #68	; 0x44
    32dc:	087f      	lsrs	r7, r7, #1
    32de:	9300      	str	r3, [sp, #0]
    32e0:	9401      	str	r4, [sp, #4]
    32e2:	0006      	movs	r6, r0
    32e4:	000d      	movs	r5, r1
    32e6:	4680      	mov	r8, r0
    32e8:	4689      	mov	r9, r1
    32ea:	46a2      	mov	sl, r4
    32ec:	433b      	orrs	r3, r7
    32ee:	d032      	beq.n	3356 <__ieee754_pow+0x8e>
    32f0:	4b6e      	ldr	r3, [pc, #440]	; (34ac <__ieee754_pow+0x1e4>)
    32f2:	006c      	lsls	r4, r5, #1
    32f4:	0864      	lsrs	r4, r4, #1
    32f6:	429c      	cmp	r4, r3
    32f8:	dc29      	bgt.n	334e <__ieee754_pow+0x86>
    32fa:	d026      	beq.n	334a <__ieee754_pow+0x82>
    32fc:	429f      	cmp	r7, r3
    32fe:	dc26      	bgt.n	334e <__ieee754_pow+0x86>
    3300:	4b6a      	ldr	r3, [pc, #424]	; (34ac <__ieee754_pow+0x1e4>)
    3302:	429f      	cmp	r7, r3
    3304:	d100      	bne.n	3308 <__ieee754_pow+0x40>
    3306:	e089      	b.n	341c <__ieee754_pow+0x154>
    3308:	2300      	movs	r3, #0
    330a:	469b      	mov	fp, r3
    330c:	464b      	mov	r3, r9
    330e:	2b00      	cmp	r3, #0
    3310:	da00      	bge.n	3314 <__ieee754_pow+0x4c>
    3312:	e087      	b.n	3424 <__ieee754_pow+0x15c>
    3314:	2a00      	cmp	r2, #0
    3316:	d12f      	bne.n	3378 <__ieee754_pow+0xb0>
    3318:	4b64      	ldr	r3, [pc, #400]	; (34ac <__ieee754_pow+0x1e4>)
    331a:	429f      	cmp	r7, r3
    331c:	d100      	bne.n	3320 <__ieee754_pow+0x58>
    331e:	e09f      	b.n	3460 <__ieee754_pow+0x198>
    3320:	4b63      	ldr	r3, [pc, #396]	; (34b0 <__ieee754_pow+0x1e8>)
    3322:	429f      	cmp	r7, r3
    3324:	d05d      	beq.n	33e2 <__ieee754_pow+0x11a>
    3326:	2380      	movs	r3, #128	; 0x80
    3328:	05db      	lsls	r3, r3, #23
    332a:	459a      	cmp	sl, r3
    332c:	d101      	bne.n	3332 <__ieee754_pow+0x6a>
    332e:	f000 fbc1 	bl	3ab4 <__ieee754_pow+0x7ec>
    3332:	4b60      	ldr	r3, [pc, #384]	; (34b4 <__ieee754_pow+0x1ec>)
    3334:	459a      	cmp	sl, r3
    3336:	d11f      	bne.n	3378 <__ieee754_pow+0xb0>
    3338:	464b      	mov	r3, r9
    333a:	2b00      	cmp	r3, #0
    333c:	db1c      	blt.n	3378 <__ieee754_pow+0xb0>
    333e:	0030      	movs	r0, r6
    3340:	0029      	movs	r1, r5
    3342:	f000 fcf7 	bl	3d34 <__ieee754_sqrt>
    3346:	0006      	movs	r6, r0
    3348:	e007      	b.n	335a <__ieee754_pow+0x92>
    334a:	2800      	cmp	r0, #0
    334c:	d00d      	beq.n	336a <__ieee754_pow+0xa2>
    334e:	4b5a      	ldr	r3, [pc, #360]	; (34b8 <__ieee754_pow+0x1f0>)
    3350:	18e0      	adds	r0, r4, r3
    3352:	4330      	orrs	r0, r6
    3354:	d10b      	bne.n	336e <__ieee754_pow+0xa6>
    3356:	2600      	movs	r6, #0
    3358:	4955      	ldr	r1, [pc, #340]	; (34b0 <__ieee754_pow+0x1e8>)
    335a:	0030      	movs	r0, r6
    335c:	b011      	add	sp, #68	; 0x44
    335e:	bc3c      	pop	{r2, r3, r4, r5}
    3360:	4690      	mov	r8, r2
    3362:	4699      	mov	r9, r3
    3364:	46a2      	mov	sl, r4
    3366:	46ab      	mov	fp, r5
    3368:	bdf0      	pop	{r4, r5, r6, r7, pc}
    336a:	42a7      	cmp	r7, r4
    336c:	ddc8      	ble.n	3300 <__ieee754_pow+0x38>
    336e:	4853      	ldr	r0, [pc, #332]	; (34bc <__ieee754_pow+0x1f4>)
    3370:	f000 fde6 	bl	3f40 <nan>
    3374:	0006      	movs	r6, r0
    3376:	e7f0      	b.n	335a <__ieee754_pow+0x92>
    3378:	0030      	movs	r0, r6
    337a:	0029      	movs	r1, r5
    337c:	f000 fdd0 	bl	3f20 <fabs>
    3380:	4643      	mov	r3, r8
    3382:	2b00      	cmp	r3, #0
    3384:	d01d      	beq.n	33c2 <__ieee754_pow+0xfa>
    3386:	0feb      	lsrs	r3, r5, #31
    3388:	3b01      	subs	r3, #1
    338a:	4698      	mov	r8, r3
    338c:	465b      	mov	r3, fp
    338e:	4642      	mov	r2, r8
    3390:	4313      	orrs	r3, r2
    3392:	d079      	beq.n	3488 <__ieee754_pow+0x1c0>
    3394:	4b4a      	ldr	r3, [pc, #296]	; (34c0 <__ieee754_pow+0x1f8>)
    3396:	429f      	cmp	r7, r3
    3398:	dc00      	bgt.n	339c <__ieee754_pow+0xd4>
    339a:	e09f      	b.n	34dc <__ieee754_pow+0x214>
    339c:	4b49      	ldr	r3, [pc, #292]	; (34c4 <__ieee754_pow+0x1fc>)
    339e:	429f      	cmp	r7, r3
    33a0:	dc01      	bgt.n	33a6 <__ieee754_pow+0xde>
    33a2:	f000 fbce 	bl	3b42 <__ieee754_pow+0x87a>
    33a6:	4b48      	ldr	r3, [pc, #288]	; (34c8 <__ieee754_pow+0x200>)
    33a8:	429c      	cmp	r4, r3
    33aa:	dd79      	ble.n	34a0 <__ieee754_pow+0x1d8>
    33ac:	4653      	mov	r3, sl
    33ae:	2b00      	cmp	r3, #0
    33b0:	dd79      	ble.n	34a6 <__ieee754_pow+0x1de>
    33b2:	4a46      	ldr	r2, [pc, #280]	; (34cc <__ieee754_pow+0x204>)
    33b4:	4b46      	ldr	r3, [pc, #280]	; (34d0 <__ieee754_pow+0x208>)
    33b6:	0010      	movs	r0, r2
    33b8:	0019      	movs	r1, r3
    33ba:	f002 f87d 	bl	54b8 <__aeabi_dmul>
    33be:	0006      	movs	r6, r0
    33c0:	e7cb      	b.n	335a <__ieee754_pow+0x92>
    33c2:	2c00      	cmp	r4, #0
    33c4:	d004      	beq.n	33d0 <__ieee754_pow+0x108>
    33c6:	4a3a      	ldr	r2, [pc, #232]	; (34b0 <__ieee754_pow+0x1e8>)
    33c8:	00ab      	lsls	r3, r5, #2
    33ca:	089b      	lsrs	r3, r3, #2
    33cc:	4293      	cmp	r3, r2
    33ce:	d1da      	bne.n	3386 <__ieee754_pow+0xbe>
    33d0:	4653      	mov	r3, sl
    33d2:	2b00      	cmp	r3, #0
    33d4:	da00      	bge.n	33d8 <__ieee754_pow+0x110>
    33d6:	e3ad      	b.n	3b34 <__ieee754_pow+0x86c>
    33d8:	464b      	mov	r3, r9
    33da:	2b00      	cmp	r3, #0
    33dc:	db0d      	blt.n	33fa <__ieee754_pow+0x132>
    33de:	0006      	movs	r6, r0
    33e0:	e7bb      	b.n	335a <__ieee754_pow+0x92>
    33e2:	4653      	mov	r3, sl
    33e4:	0029      	movs	r1, r5
    33e6:	2b00      	cmp	r3, #0
    33e8:	dab7      	bge.n	335a <__ieee754_pow+0x92>
    33ea:	0032      	movs	r2, r6
    33ec:	002b      	movs	r3, r5
    33ee:	2000      	movs	r0, #0
    33f0:	492f      	ldr	r1, [pc, #188]	; (34b0 <__ieee754_pow+0x1e8>)
    33f2:	f001 fc3d 	bl	4c70 <__aeabi_ddiv>
    33f6:	0006      	movs	r6, r0
    33f8:	e7af      	b.n	335a <__ieee754_pow+0x92>
    33fa:	4b2f      	ldr	r3, [pc, #188]	; (34b8 <__ieee754_pow+0x1f0>)
    33fc:	469c      	mov	ip, r3
    33fe:	465b      	mov	r3, fp
    3400:	4464      	add	r4, ip
    3402:	431c      	orrs	r4, r3
    3404:	d101      	bne.n	340a <__ieee754_pow+0x142>
    3406:	f000 fc2b 	bl	3c60 <__ieee754_pow+0x998>
    340a:	465b      	mov	r3, fp
    340c:	0006      	movs	r6, r0
    340e:	2b01      	cmp	r3, #1
    3410:	d1a3      	bne.n	335a <__ieee754_pow+0x92>
    3412:	2380      	movs	r3, #128	; 0x80
    3414:	061b      	lsls	r3, r3, #24
    3416:	469c      	mov	ip, r3
    3418:	4461      	add	r1, ip
    341a:	e79e      	b.n	335a <__ieee754_pow+0x92>
    341c:	2a00      	cmp	r2, #0
    341e:	d100      	bne.n	3422 <__ieee754_pow+0x15a>
    3420:	e772      	b.n	3308 <__ieee754_pow+0x40>
    3422:	e794      	b.n	334e <__ieee754_pow+0x86>
    3424:	4b2b      	ldr	r3, [pc, #172]	; (34d4 <__ieee754_pow+0x20c>)
    3426:	429f      	cmp	r7, r3
    3428:	dc2b      	bgt.n	3482 <__ieee754_pow+0x1ba>
    342a:	4b27      	ldr	r3, [pc, #156]	; (34c8 <__ieee754_pow+0x200>)
    342c:	429f      	cmp	r7, r3
    342e:	dc00      	bgt.n	3432 <__ieee754_pow+0x16a>
    3430:	e770      	b.n	3314 <__ieee754_pow+0x4c>
    3432:	4929      	ldr	r1, [pc, #164]	; (34d8 <__ieee754_pow+0x210>)
    3434:	153b      	asrs	r3, r7, #20
    3436:	468c      	mov	ip, r1
    3438:	4463      	add	r3, ip
    343a:	2b14      	cmp	r3, #20
    343c:	dc01      	bgt.n	3442 <__ieee754_pow+0x17a>
    343e:	f000 fbf2 	bl	3c26 <__ieee754_pow+0x95e>
    3442:	2134      	movs	r1, #52	; 0x34
    3444:	1acb      	subs	r3, r1, r3
    3446:	9900      	ldr	r1, [sp, #0]
    3448:	40d9      	lsrs	r1, r3
    344a:	0008      	movs	r0, r1
    344c:	4098      	lsls	r0, r3
    344e:	4282      	cmp	r2, r0
    3450:	d000      	beq.n	3454 <__ieee754_pow+0x18c>
    3452:	e75f      	b.n	3314 <__ieee754_pow+0x4c>
    3454:	2301      	movs	r3, #1
    3456:	4019      	ands	r1, r3
    3458:	3301      	adds	r3, #1
    345a:	1a5b      	subs	r3, r3, r1
    345c:	469b      	mov	fp, r3
    345e:	e759      	b.n	3314 <__ieee754_pow+0x4c>
    3460:	4b15      	ldr	r3, [pc, #84]	; (34b8 <__ieee754_pow+0x1f0>)
    3462:	18e0      	adds	r0, r4, r3
    3464:	4306      	orrs	r6, r0
    3466:	d100      	bne.n	346a <__ieee754_pow+0x1a2>
    3468:	e775      	b.n	3356 <__ieee754_pow+0x8e>
    346a:	4b17      	ldr	r3, [pc, #92]	; (34c8 <__ieee754_pow+0x200>)
    346c:	429c      	cmp	r4, r3
    346e:	dc00      	bgt.n	3472 <__ieee754_pow+0x1aa>
    3470:	e351      	b.n	3b16 <__ieee754_pow+0x84e>
    3472:	4653      	mov	r3, sl
    3474:	2b00      	cmp	r3, #0
    3476:	db16      	blt.n	34a6 <__ieee754_pow+0x1de>
    3478:	9b00      	ldr	r3, [sp, #0]
    347a:	9c01      	ldr	r4, [sp, #4]
    347c:	001e      	movs	r6, r3
    347e:	0021      	movs	r1, r4
    3480:	e76b      	b.n	335a <__ieee754_pow+0x92>
    3482:	2302      	movs	r3, #2
    3484:	469b      	mov	fp, r3
    3486:	e745      	b.n	3314 <__ieee754_pow+0x4c>
    3488:	0032      	movs	r2, r6
    348a:	002b      	movs	r3, r5
    348c:	0030      	movs	r0, r6
    348e:	0029      	movs	r1, r5
    3490:	f002 fa8c 	bl	59ac <__aeabi_dsub>
    3494:	0002      	movs	r2, r0
    3496:	000b      	movs	r3, r1
    3498:	f001 fbea 	bl	4c70 <__aeabi_ddiv>
    349c:	0006      	movs	r6, r0
    349e:	e75c      	b.n	335a <__ieee754_pow+0x92>
    34a0:	4653      	mov	r3, sl
    34a2:	2b00      	cmp	r3, #0
    34a4:	db85      	blt.n	33b2 <__ieee754_pow+0xea>
    34a6:	2600      	movs	r6, #0
    34a8:	2100      	movs	r1, #0
    34aa:	e756      	b.n	335a <__ieee754_pow+0x92>
    34ac:	7ff00000 	.word	0x7ff00000
    34b0:	3ff00000 	.word	0x3ff00000
    34b4:	3fe00000 	.word	0x3fe00000
    34b8:	c0100000 	.word	0xc0100000
    34bc:	0000646c 	.word	0x0000646c
    34c0:	41e00000 	.word	0x41e00000
    34c4:	43f00000 	.word	0x43f00000
    34c8:	3fefffff 	.word	0x3fefffff
    34cc:	8800759c 	.word	0x8800759c
    34d0:	7e37e43c 	.word	0x7e37e43c
    34d4:	433fffff 	.word	0x433fffff
    34d8:	fffffc01 	.word	0xfffffc01
    34dc:	4be8      	ldr	r3, [pc, #928]	; (3880 <__ieee754_pow+0x5b8>)
    34de:	2200      	movs	r2, #0
    34e0:	429c      	cmp	r4, r3
    34e2:	dc06      	bgt.n	34f2 <__ieee754_pow+0x22a>
    34e4:	2200      	movs	r2, #0
    34e6:	4be7      	ldr	r3, [pc, #924]	; (3884 <__ieee754_pow+0x5bc>)
    34e8:	f001 ffe6 	bl	54b8 <__aeabi_dmul>
    34ec:	2235      	movs	r2, #53	; 0x35
    34ee:	000c      	movs	r4, r1
    34f0:	4252      	negs	r2, r2
    34f2:	4de5      	ldr	r5, [pc, #916]	; (3888 <__ieee754_pow+0x5c0>)
    34f4:	1523      	asrs	r3, r4, #20
    34f6:	46ac      	mov	ip, r5
    34f8:	4463      	add	r3, ip
    34fa:	4699      	mov	r9, r3
    34fc:	0324      	lsls	r4, r4, #12
    34fe:	4de3      	ldr	r5, [pc, #908]	; (388c <__ieee754_pow+0x5c4>)
    3500:	4be3      	ldr	r3, [pc, #908]	; (3890 <__ieee754_pow+0x5c8>)
    3502:	0b24      	lsrs	r4, r4, #12
    3504:	4491      	add	r9, r2
    3506:	4325      	orrs	r5, r4
    3508:	429c      	cmp	r4, r3
    350a:	dd09      	ble.n	3520 <__ieee754_pow+0x258>
    350c:	4be1      	ldr	r3, [pc, #900]	; (3894 <__ieee754_pow+0x5cc>)
    350e:	429c      	cmp	r4, r3
    3510:	dc00      	bgt.n	3514 <__ieee754_pow+0x24c>
    3512:	e3a9      	b.n	3c68 <__ieee754_pow+0x9a0>
    3514:	2301      	movs	r3, #1
    3516:	469c      	mov	ip, r3
    3518:	4bdf      	ldr	r3, [pc, #892]	; (3898 <__ieee754_pow+0x5d0>)
    351a:	44e1      	add	r9, ip
    351c:	469c      	mov	ip, r3
    351e:	4465      	add	r5, ip
    3520:	2300      	movs	r3, #0
    3522:	2400      	movs	r4, #0
    3524:	2200      	movs	r2, #0
    3526:	9308      	str	r3, [sp, #32]
    3528:	9409      	str	r4, [sp, #36]	; 0x24
    352a:	930c      	str	r3, [sp, #48]	; 0x30
    352c:	940d      	str	r4, [sp, #52]	; 0x34
    352e:	2400      	movs	r4, #0
    3530:	4bd6      	ldr	r3, [pc, #856]	; (388c <__ieee754_pow+0x5c4>)
    3532:	9206      	str	r2, [sp, #24]
    3534:	9307      	str	r3, [sp, #28]
    3536:	9a06      	ldr	r2, [sp, #24]
    3538:	9b07      	ldr	r3, [sp, #28]
    353a:	0029      	movs	r1, r5
    353c:	900a      	str	r0, [sp, #40]	; 0x28
    353e:	910b      	str	r1, [sp, #44]	; 0x2c
    3540:	f002 fa34 	bl	59ac <__aeabi_dsub>
    3544:	9a06      	ldr	r2, [sp, #24]
    3546:	9b07      	ldr	r3, [sp, #28]
    3548:	0006      	movs	r6, r0
    354a:	000f      	movs	r7, r1
    354c:	980a      	ldr	r0, [sp, #40]	; 0x28
    354e:	990b      	ldr	r1, [sp, #44]	; 0x2c
    3550:	f001 f862 	bl	4618 <__aeabi_dadd>
    3554:	0002      	movs	r2, r0
    3556:	000b      	movs	r3, r1
    3558:	2000      	movs	r0, #0
    355a:	49cc      	ldr	r1, [pc, #816]	; (388c <__ieee754_pow+0x5c4>)
    355c:	f001 fb88 	bl	4c70 <__aeabi_ddiv>
    3560:	000a      	movs	r2, r1
    3562:	0001      	movs	r1, r0
    3564:	0013      	movs	r3, r2
    3566:	910e      	str	r1, [sp, #56]	; 0x38
    3568:	920f      	str	r2, [sp, #60]	; 0x3c
    356a:	0002      	movs	r2, r0
    356c:	0039      	movs	r1, r7
    356e:	0030      	movs	r0, r6
    3570:	f001 ffa2 	bl	54b8 <__aeabi_dmul>
    3574:	000a      	movs	r2, r1
    3576:	0001      	movs	r1, r0
    3578:	2080      	movs	r0, #128	; 0x80
    357a:	9104      	str	r1, [sp, #16]
    357c:	9205      	str	r2, [sp, #20]
    357e:	0013      	movs	r3, r2
    3580:	2200      	movs	r2, #0
    3582:	2180      	movs	r1, #128	; 0x80
    3584:	0300      	lsls	r0, r0, #12
    3586:	4684      	mov	ip, r0
    3588:	9202      	str	r2, [sp, #8]
    358a:	9303      	str	r3, [sp, #12]
    358c:	2200      	movs	r2, #0
    358e:	0589      	lsls	r1, r1, #22
    3590:	106d      	asrs	r5, r5, #1
    3592:	430d      	orrs	r5, r1
    3594:	4465      	add	r5, ip
    3596:	192b      	adds	r3, r5, r4
    3598:	9802      	ldr	r0, [sp, #8]
    359a:	9903      	ldr	r1, [sp, #12]
    359c:	0014      	movs	r4, r2
    359e:	001d      	movs	r5, r3
    35a0:	f001 ff8a 	bl	54b8 <__aeabi_dmul>
    35a4:	0002      	movs	r2, r0
    35a6:	000b      	movs	r3, r1
    35a8:	0030      	movs	r0, r6
    35aa:	0039      	movs	r1, r7
    35ac:	f002 f9fe 	bl	59ac <__aeabi_dsub>
    35b0:	9a06      	ldr	r2, [sp, #24]
    35b2:	9b07      	ldr	r3, [sp, #28]
    35b4:	0006      	movs	r6, r0
    35b6:	000f      	movs	r7, r1
    35b8:	0020      	movs	r0, r4
    35ba:	0029      	movs	r1, r5
    35bc:	f002 f9f6 	bl	59ac <__aeabi_dsub>
    35c0:	0002      	movs	r2, r0
    35c2:	000b      	movs	r3, r1
    35c4:	980a      	ldr	r0, [sp, #40]	; 0x28
    35c6:	990b      	ldr	r1, [sp, #44]	; 0x2c
    35c8:	f002 f9f0 	bl	59ac <__aeabi_dsub>
    35cc:	9a02      	ldr	r2, [sp, #8]
    35ce:	9b03      	ldr	r3, [sp, #12]
    35d0:	f001 ff72 	bl	54b8 <__aeabi_dmul>
    35d4:	0002      	movs	r2, r0
    35d6:	000b      	movs	r3, r1
    35d8:	0030      	movs	r0, r6
    35da:	0039      	movs	r1, r7
    35dc:	f002 f9e6 	bl	59ac <__aeabi_dsub>
    35e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    35e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    35e4:	f001 ff68 	bl	54b8 <__aeabi_dmul>
    35e8:	9d04      	ldr	r5, [sp, #16]
    35ea:	9e05      	ldr	r6, [sp, #20]
    35ec:	9006      	str	r0, [sp, #24]
    35ee:	9107      	str	r1, [sp, #28]
    35f0:	002a      	movs	r2, r5
    35f2:	0033      	movs	r3, r6
    35f4:	0028      	movs	r0, r5
    35f6:	0031      	movs	r1, r6
    35f8:	f001 ff5e 	bl	54b8 <__aeabi_dmul>
    35fc:	0006      	movs	r6, r0
    35fe:	000f      	movs	r7, r1
    3600:	4aa6      	ldr	r2, [pc, #664]	; (389c <__ieee754_pow+0x5d4>)
    3602:	4ba7      	ldr	r3, [pc, #668]	; (38a0 <__ieee754_pow+0x5d8>)
    3604:	f001 ff58 	bl	54b8 <__aeabi_dmul>
    3608:	4aa6      	ldr	r2, [pc, #664]	; (38a4 <__ieee754_pow+0x5dc>)
    360a:	4ba7      	ldr	r3, [pc, #668]	; (38a8 <__ieee754_pow+0x5e0>)
    360c:	f001 f804 	bl	4618 <__aeabi_dadd>
    3610:	0032      	movs	r2, r6
    3612:	003b      	movs	r3, r7
    3614:	f001 ff50 	bl	54b8 <__aeabi_dmul>
    3618:	4aa4      	ldr	r2, [pc, #656]	; (38ac <__ieee754_pow+0x5e4>)
    361a:	4ba5      	ldr	r3, [pc, #660]	; (38b0 <__ieee754_pow+0x5e8>)
    361c:	f000 fffc 	bl	4618 <__aeabi_dadd>
    3620:	0032      	movs	r2, r6
    3622:	003b      	movs	r3, r7
    3624:	f001 ff48 	bl	54b8 <__aeabi_dmul>
    3628:	4aa2      	ldr	r2, [pc, #648]	; (38b4 <__ieee754_pow+0x5ec>)
    362a:	4ba3      	ldr	r3, [pc, #652]	; (38b8 <__ieee754_pow+0x5f0>)
    362c:	f000 fff4 	bl	4618 <__aeabi_dadd>
    3630:	0032      	movs	r2, r6
    3632:	003b      	movs	r3, r7
    3634:	f001 ff40 	bl	54b8 <__aeabi_dmul>
    3638:	4aa0      	ldr	r2, [pc, #640]	; (38bc <__ieee754_pow+0x5f4>)
    363a:	4ba1      	ldr	r3, [pc, #644]	; (38c0 <__ieee754_pow+0x5f8>)
    363c:	f000 ffec 	bl	4618 <__aeabi_dadd>
    3640:	0032      	movs	r2, r6
    3642:	003b      	movs	r3, r7
    3644:	f001 ff38 	bl	54b8 <__aeabi_dmul>
    3648:	4a9e      	ldr	r2, [pc, #632]	; (38c4 <__ieee754_pow+0x5fc>)
    364a:	4b9f      	ldr	r3, [pc, #636]	; (38c8 <__ieee754_pow+0x600>)
    364c:	f000 ffe4 	bl	4618 <__aeabi_dadd>
    3650:	0032      	movs	r2, r6
    3652:	0004      	movs	r4, r0
    3654:	000d      	movs	r5, r1
    3656:	003b      	movs	r3, r7
    3658:	0030      	movs	r0, r6
    365a:	0039      	movs	r1, r7
    365c:	f001 ff2c 	bl	54b8 <__aeabi_dmul>
    3660:	0002      	movs	r2, r0
    3662:	000b      	movs	r3, r1
    3664:	0020      	movs	r0, r4
    3666:	0029      	movs	r1, r5
    3668:	f001 ff26 	bl	54b8 <__aeabi_dmul>
    366c:	9e02      	ldr	r6, [sp, #8]
    366e:	9f03      	ldr	r7, [sp, #12]
    3670:	0004      	movs	r4, r0
    3672:	000d      	movs	r5, r1
    3674:	9804      	ldr	r0, [sp, #16]
    3676:	9905      	ldr	r1, [sp, #20]
    3678:	0032      	movs	r2, r6
    367a:	003b      	movs	r3, r7
    367c:	f000 ffcc 	bl	4618 <__aeabi_dadd>
    3680:	9a06      	ldr	r2, [sp, #24]
    3682:	9b07      	ldr	r3, [sp, #28]
    3684:	f001 ff18 	bl	54b8 <__aeabi_dmul>
    3688:	0022      	movs	r2, r4
    368a:	002b      	movs	r3, r5
    368c:	f000 ffc4 	bl	4618 <__aeabi_dadd>
    3690:	0032      	movs	r2, r6
    3692:	900a      	str	r0, [sp, #40]	; 0x28
    3694:	910b      	str	r1, [sp, #44]	; 0x2c
    3696:	003b      	movs	r3, r7
    3698:	0030      	movs	r0, r6
    369a:	0039      	movs	r1, r7
    369c:	9602      	str	r6, [sp, #8]
    369e:	9703      	str	r7, [sp, #12]
    36a0:	f001 ff0a 	bl	54b8 <__aeabi_dmul>
    36a4:	2200      	movs	r2, #0
    36a6:	4b89      	ldr	r3, [pc, #548]	; (38cc <__ieee754_pow+0x604>)
    36a8:	0004      	movs	r4, r0
    36aa:	000d      	movs	r5, r1
    36ac:	f000 ffb4 	bl	4618 <__aeabi_dadd>
    36b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    36b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    36b4:	f000 ffb0 	bl	4618 <__aeabi_dadd>
    36b8:	2600      	movs	r6, #0
    36ba:	000f      	movs	r7, r1
    36bc:	0032      	movs	r2, r6
    36be:	000b      	movs	r3, r1
    36c0:	9802      	ldr	r0, [sp, #8]
    36c2:	9903      	ldr	r1, [sp, #12]
    36c4:	f001 fef8 	bl	54b8 <__aeabi_dmul>
    36c8:	2200      	movs	r2, #0
    36ca:	9002      	str	r0, [sp, #8]
    36cc:	9103      	str	r1, [sp, #12]
    36ce:	4b7f      	ldr	r3, [pc, #508]	; (38cc <__ieee754_pow+0x604>)
    36d0:	0030      	movs	r0, r6
    36d2:	0039      	movs	r1, r7
    36d4:	f002 f96a 	bl	59ac <__aeabi_dsub>
    36d8:	0022      	movs	r2, r4
    36da:	002b      	movs	r3, r5
    36dc:	f002 f966 	bl	59ac <__aeabi_dsub>
    36e0:	0002      	movs	r2, r0
    36e2:	000b      	movs	r3, r1
    36e4:	980a      	ldr	r0, [sp, #40]	; 0x28
    36e6:	990b      	ldr	r1, [sp, #44]	; 0x2c
    36e8:	f002 f960 	bl	59ac <__aeabi_dsub>
    36ec:	9a04      	ldr	r2, [sp, #16]
    36ee:	9b05      	ldr	r3, [sp, #20]
    36f0:	f001 fee2 	bl	54b8 <__aeabi_dmul>
    36f4:	0032      	movs	r2, r6
    36f6:	0004      	movs	r4, r0
    36f8:	000d      	movs	r5, r1
    36fa:	9806      	ldr	r0, [sp, #24]
    36fc:	9907      	ldr	r1, [sp, #28]
    36fe:	003b      	movs	r3, r7
    3700:	f001 feda 	bl	54b8 <__aeabi_dmul>
    3704:	0002      	movs	r2, r0
    3706:	000b      	movs	r3, r1
    3708:	0020      	movs	r0, r4
    370a:	0029      	movs	r1, r5
    370c:	f000 ff84 	bl	4618 <__aeabi_dadd>
    3710:	0004      	movs	r4, r0
    3712:	000d      	movs	r5, r1
    3714:	0002      	movs	r2, r0
    3716:	000b      	movs	r3, r1
    3718:	9802      	ldr	r0, [sp, #8]
    371a:	9903      	ldr	r1, [sp, #12]
    371c:	f000 ff7c 	bl	4618 <__aeabi_dadd>
    3720:	2600      	movs	r6, #0
    3722:	22e0      	movs	r2, #224	; 0xe0
    3724:	4b6a      	ldr	r3, [pc, #424]	; (38d0 <__ieee754_pow+0x608>)
    3726:	0612      	lsls	r2, r2, #24
    3728:	0030      	movs	r0, r6
    372a:	000f      	movs	r7, r1
    372c:	f001 fec4 	bl	54b8 <__aeabi_dmul>
    3730:	9a02      	ldr	r2, [sp, #8]
    3732:	9b03      	ldr	r3, [sp, #12]
    3734:	9004      	str	r0, [sp, #16]
    3736:	9105      	str	r1, [sp, #20]
    3738:	0030      	movs	r0, r6
    373a:	0039      	movs	r1, r7
    373c:	f002 f936 	bl	59ac <__aeabi_dsub>
    3740:	0002      	movs	r2, r0
    3742:	000b      	movs	r3, r1
    3744:	0020      	movs	r0, r4
    3746:	0029      	movs	r1, r5
    3748:	f002 f930 	bl	59ac <__aeabi_dsub>
    374c:	4a61      	ldr	r2, [pc, #388]	; (38d4 <__ieee754_pow+0x60c>)
    374e:	4b60      	ldr	r3, [pc, #384]	; (38d0 <__ieee754_pow+0x608>)
    3750:	f001 feb2 	bl	54b8 <__aeabi_dmul>
    3754:	4a60      	ldr	r2, [pc, #384]	; (38d8 <__ieee754_pow+0x610>)
    3756:	0004      	movs	r4, r0
    3758:	000d      	movs	r5, r1
    375a:	4b60      	ldr	r3, [pc, #384]	; (38dc <__ieee754_pow+0x614>)
    375c:	0030      	movs	r0, r6
    375e:	0039      	movs	r1, r7
    3760:	f001 feaa 	bl	54b8 <__aeabi_dmul>
    3764:	0002      	movs	r2, r0
    3766:	000b      	movs	r3, r1
    3768:	0020      	movs	r0, r4
    376a:	0029      	movs	r1, r5
    376c:	f000 ff54 	bl	4618 <__aeabi_dadd>
    3770:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    3772:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    3774:	f000 ff50 	bl	4618 <__aeabi_dadd>
    3778:	0006      	movs	r6, r0
    377a:	4648      	mov	r0, r9
    377c:	000f      	movs	r7, r1
    377e:	f002 fcbf 	bl	6100 <__aeabi_i2d>
    3782:	0004      	movs	r4, r0
    3784:	000d      	movs	r5, r1
    3786:	9804      	ldr	r0, [sp, #16]
    3788:	9905      	ldr	r1, [sp, #20]
    378a:	0032      	movs	r2, r6
    378c:	003b      	movs	r3, r7
    378e:	f000 ff43 	bl	4618 <__aeabi_dadd>
    3792:	9a08      	ldr	r2, [sp, #32]
    3794:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3796:	f000 ff3f 	bl	4618 <__aeabi_dadd>
    379a:	0022      	movs	r2, r4
    379c:	002b      	movs	r3, r5
    379e:	f000 ff3b 	bl	4618 <__aeabi_dadd>
    37a2:	2000      	movs	r0, #0
    37a4:	0022      	movs	r2, r4
    37a6:	002b      	movs	r3, r5
    37a8:	9002      	str	r0, [sp, #8]
    37aa:	9103      	str	r1, [sp, #12]
    37ac:	f002 f8fe 	bl	59ac <__aeabi_dsub>
    37b0:	9a08      	ldr	r2, [sp, #32]
    37b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    37b4:	f002 f8fa 	bl	59ac <__aeabi_dsub>
    37b8:	9a04      	ldr	r2, [sp, #16]
    37ba:	9b05      	ldr	r3, [sp, #20]
    37bc:	f002 f8f6 	bl	59ac <__aeabi_dsub>
    37c0:	0002      	movs	r2, r0
    37c2:	000b      	movs	r3, r1
    37c4:	0030      	movs	r0, r6
    37c6:	0039      	movs	r1, r7
    37c8:	f002 f8f0 	bl	59ac <__aeabi_dsub>
    37cc:	9004      	str	r0, [sp, #16]
    37ce:	9105      	str	r1, [sp, #20]
    37d0:	465b      	mov	r3, fp
    37d2:	4642      	mov	r2, r8
    37d4:	3b01      	subs	r3, #1
    37d6:	4313      	orrs	r3, r2
    37d8:	d100      	bne.n	37dc <__ieee754_pow+0x514>
    37da:	e197      	b.n	3b0c <__ieee754_pow+0x844>
    37dc:	2300      	movs	r3, #0
    37de:	4c2b      	ldr	r4, [pc, #172]	; (388c <__ieee754_pow+0x5c4>)
    37e0:	9306      	str	r3, [sp, #24]
    37e2:	9407      	str	r4, [sp, #28]
    37e4:	9800      	ldr	r0, [sp, #0]
    37e6:	9901      	ldr	r1, [sp, #4]
    37e8:	2600      	movs	r6, #0
    37ea:	000b      	movs	r3, r1
    37ec:	0032      	movs	r2, r6
    37ee:	000f      	movs	r7, r1
    37f0:	f002 f8dc 	bl	59ac <__aeabi_dsub>
    37f4:	9a02      	ldr	r2, [sp, #8]
    37f6:	9b03      	ldr	r3, [sp, #12]
    37f8:	f001 fe5e 	bl	54b8 <__aeabi_dmul>
    37fc:	9a00      	ldr	r2, [sp, #0]
    37fe:	9b01      	ldr	r3, [sp, #4]
    3800:	0004      	movs	r4, r0
    3802:	000d      	movs	r5, r1
    3804:	9804      	ldr	r0, [sp, #16]
    3806:	9905      	ldr	r1, [sp, #20]
    3808:	f001 fe56 	bl	54b8 <__aeabi_dmul>
    380c:	0002      	movs	r2, r0
    380e:	000b      	movs	r3, r1
    3810:	0020      	movs	r0, r4
    3812:	0029      	movs	r1, r5
    3814:	f000 ff00 	bl	4618 <__aeabi_dadd>
    3818:	0004      	movs	r4, r0
    381a:	000d      	movs	r5, r1
    381c:	9802      	ldr	r0, [sp, #8]
    381e:	9903      	ldr	r1, [sp, #12]
    3820:	003b      	movs	r3, r7
    3822:	0032      	movs	r2, r6
    3824:	9404      	str	r4, [sp, #16]
    3826:	9505      	str	r5, [sp, #20]
    3828:	f001 fe46 	bl	54b8 <__aeabi_dmul>
    382c:	9000      	str	r0, [sp, #0]
    382e:	9101      	str	r1, [sp, #4]
    3830:	000b      	movs	r3, r1
    3832:	0002      	movs	r2, r0
    3834:	0029      	movs	r1, r5
    3836:	0020      	movs	r0, r4
    3838:	f000 feee 	bl	4618 <__aeabi_dadd>
    383c:	4b28      	ldr	r3, [pc, #160]	; (38e0 <__ieee754_pow+0x618>)
    383e:	4681      	mov	r9, r0
    3840:	1e0f      	subs	r7, r1, #0
    3842:	468a      	mov	sl, r1
    3844:	429f      	cmp	r7, r3
    3846:	dc00      	bgt.n	384a <__ieee754_pow+0x582>
    3848:	e13c      	b.n	3ac4 <__ieee754_pow+0x7fc>
    384a:	4b26      	ldr	r3, [pc, #152]	; (38e4 <__ieee754_pow+0x61c>)
    384c:	18cb      	adds	r3, r1, r3
    384e:	4303      	orrs	r3, r0
    3850:	d000      	beq.n	3854 <__ieee754_pow+0x58c>
    3852:	e1db      	b.n	3c0c <__ieee754_pow+0x944>
    3854:	9804      	ldr	r0, [sp, #16]
    3856:	9905      	ldr	r1, [sp, #20]
    3858:	4a23      	ldr	r2, [pc, #140]	; (38e8 <__ieee754_pow+0x620>)
    385a:	4b24      	ldr	r3, [pc, #144]	; (38ec <__ieee754_pow+0x624>)
    385c:	f000 fedc 	bl	4618 <__aeabi_dadd>
    3860:	9a00      	ldr	r2, [sp, #0]
    3862:	9b01      	ldr	r3, [sp, #4]
    3864:	0004      	movs	r4, r0
    3866:	000d      	movs	r5, r1
    3868:	4648      	mov	r0, r9
    386a:	0039      	movs	r1, r7
    386c:	f002 f89e 	bl	59ac <__aeabi_dsub>
    3870:	0002      	movs	r2, r0
    3872:	000b      	movs	r3, r1
    3874:	0020      	movs	r0, r4
    3876:	0029      	movs	r1, r5
    3878:	f000 fd3a 	bl	42f0 <__aeabi_dcmpgt>
    387c:	003e      	movs	r6, r7
    387e:	e037      	b.n	38f0 <__ieee754_pow+0x628>
    3880:	000fffff 	.word	0x000fffff
    3884:	43400000 	.word	0x43400000
    3888:	fffffc01 	.word	0xfffffc01
    388c:	3ff00000 	.word	0x3ff00000
    3890:	0003988e 	.word	0x0003988e
    3894:	000bb679 	.word	0x000bb679
    3898:	fff00000 	.word	0xfff00000
    389c:	4a454eef 	.word	0x4a454eef
    38a0:	3fca7e28 	.word	0x3fca7e28
    38a4:	93c9db65 	.word	0x93c9db65
    38a8:	3fcd864a 	.word	0x3fcd864a
    38ac:	a91d4101 	.word	0xa91d4101
    38b0:	3fd17460 	.word	0x3fd17460
    38b4:	518f264d 	.word	0x518f264d
    38b8:	3fd55555 	.word	0x3fd55555
    38bc:	db6fabff 	.word	0xdb6fabff
    38c0:	3fdb6db6 	.word	0x3fdb6db6
    38c4:	33333303 	.word	0x33333303
    38c8:	3fe33333 	.word	0x3fe33333
    38cc:	40080000 	.word	0x40080000
    38d0:	3feec709 	.word	0x3feec709
    38d4:	dc3a03fd 	.word	0xdc3a03fd
    38d8:	145b01f5 	.word	0x145b01f5
    38dc:	be3e2fe0 	.word	0xbe3e2fe0
    38e0:	408fffff 	.word	0x408fffff
    38e4:	bf700000 	.word	0xbf700000
    38e8:	652b82fe 	.word	0x652b82fe
    38ec:	3c971547 	.word	0x3c971547
    38f0:	2800      	cmp	r0, #0
    38f2:	d000      	beq.n	38f6 <__ieee754_pow+0x62e>
    38f4:	e18a      	b.n	3c0c <__ieee754_pow+0x944>
    38f6:	2280      	movs	r2, #128	; 0x80
    38f8:	4be7      	ldr	r3, [pc, #924]	; (3c98 <__ieee754_pow+0x9d0>)
    38fa:	0352      	lsls	r2, r2, #13
    38fc:	469c      	mov	ip, r3
    38fe:	0013      	movs	r3, r2
    3900:	1536      	asrs	r6, r6, #20
    3902:	4466      	add	r6, ip
    3904:	4133      	asrs	r3, r6
    3906:	49e5      	ldr	r1, [pc, #916]	; (3c9c <__ieee754_pow+0x9d4>)
    3908:	19db      	adds	r3, r3, r7
    390a:	005e      	lsls	r6, r3, #1
    390c:	001c      	movs	r4, r3
    390e:	031b      	lsls	r3, r3, #12
    3910:	468c      	mov	ip, r1
    3912:	0b1b      	lsrs	r3, r3, #12
    3914:	4313      	orrs	r3, r2
    3916:	2214      	movs	r2, #20
    3918:	0d76      	lsrs	r6, r6, #21
    391a:	4fe1      	ldr	r7, [pc, #900]	; (3ca0 <__ieee754_pow+0x9d8>)
    391c:	4466      	add	r6, ip
    391e:	4137      	asrs	r7, r6
    3920:	1b96      	subs	r6, r2, r6
    3922:	4133      	asrs	r3, r6
    3924:	4698      	mov	r8, r3
    3926:	4653      	mov	r3, sl
    3928:	43bc      	bics	r4, r7
    392a:	2000      	movs	r0, #0
    392c:	0021      	movs	r1, r4
    392e:	2b00      	cmp	r3, #0
    3930:	da00      	bge.n	3934 <__ieee754_pow+0x66c>
    3932:	e1a9      	b.n	3c88 <__ieee754_pow+0x9c0>
    3934:	0002      	movs	r2, r0
    3936:	000b      	movs	r3, r1
    3938:	9800      	ldr	r0, [sp, #0]
    393a:	9901      	ldr	r1, [sp, #4]
    393c:	f002 f836 	bl	59ac <__aeabi_dsub>
    3940:	000b      	movs	r3, r1
    3942:	9000      	str	r0, [sp, #0]
    3944:	9101      	str	r1, [sp, #4]
    3946:	0002      	movs	r2, r0
    3948:	9804      	ldr	r0, [sp, #16]
    394a:	9905      	ldr	r1, [sp, #20]
    394c:	f000 fe64 	bl	4618 <__aeabi_dadd>
    3950:	4643      	mov	r3, r8
    3952:	051b      	lsls	r3, r3, #20
    3954:	4699      	mov	r9, r3
    3956:	2000      	movs	r0, #0
    3958:	2200      	movs	r2, #0
    395a:	4bd2      	ldr	r3, [pc, #840]	; (3ca4 <__ieee754_pow+0x9dc>)
    395c:	0006      	movs	r6, r0
    395e:	000f      	movs	r7, r1
    3960:	f001 fdaa 	bl	54b8 <__aeabi_dmul>
    3964:	9a00      	ldr	r2, [sp, #0]
    3966:	9b01      	ldr	r3, [sp, #4]
    3968:	9002      	str	r0, [sp, #8]
    396a:	9103      	str	r1, [sp, #12]
    396c:	0030      	movs	r0, r6
    396e:	0039      	movs	r1, r7
    3970:	f002 f81c 	bl	59ac <__aeabi_dsub>
    3974:	0002      	movs	r2, r0
    3976:	000b      	movs	r3, r1
    3978:	9804      	ldr	r0, [sp, #16]
    397a:	9905      	ldr	r1, [sp, #20]
    397c:	f002 f816 	bl	59ac <__aeabi_dsub>
    3980:	4ac9      	ldr	r2, [pc, #804]	; (3ca8 <__ieee754_pow+0x9e0>)
    3982:	4bca      	ldr	r3, [pc, #808]	; (3cac <__ieee754_pow+0x9e4>)
    3984:	f001 fd98 	bl	54b8 <__aeabi_dmul>
    3988:	4ac9      	ldr	r2, [pc, #804]	; (3cb0 <__ieee754_pow+0x9e8>)
    398a:	0004      	movs	r4, r0
    398c:	000d      	movs	r5, r1
    398e:	4bc9      	ldr	r3, [pc, #804]	; (3cb4 <__ieee754_pow+0x9ec>)
    3990:	0030      	movs	r0, r6
    3992:	0039      	movs	r1, r7
    3994:	f001 fd90 	bl	54b8 <__aeabi_dmul>
    3998:	0002      	movs	r2, r0
    399a:	000b      	movs	r3, r1
    399c:	0020      	movs	r0, r4
    399e:	0029      	movs	r1, r5
    39a0:	f000 fe3a 	bl	4618 <__aeabi_dadd>
    39a4:	0004      	movs	r4, r0
    39a6:	000d      	movs	r5, r1
    39a8:	0002      	movs	r2, r0
    39aa:	000b      	movs	r3, r1
    39ac:	9802      	ldr	r0, [sp, #8]
    39ae:	9903      	ldr	r1, [sp, #12]
    39b0:	f000 fe32 	bl	4618 <__aeabi_dadd>
    39b4:	9a02      	ldr	r2, [sp, #8]
    39b6:	9b03      	ldr	r3, [sp, #12]
    39b8:	0006      	movs	r6, r0
    39ba:	000f      	movs	r7, r1
    39bc:	f001 fff6 	bl	59ac <__aeabi_dsub>
    39c0:	0002      	movs	r2, r0
    39c2:	000b      	movs	r3, r1
    39c4:	0020      	movs	r0, r4
    39c6:	0029      	movs	r1, r5
    39c8:	f001 fff0 	bl	59ac <__aeabi_dsub>
    39cc:	0032      	movs	r2, r6
    39ce:	9000      	str	r0, [sp, #0]
    39d0:	9101      	str	r1, [sp, #4]
    39d2:	003b      	movs	r3, r7
    39d4:	0030      	movs	r0, r6
    39d6:	0039      	movs	r1, r7
    39d8:	f001 fd6e 	bl	54b8 <__aeabi_dmul>
    39dc:	0004      	movs	r4, r0
    39de:	000d      	movs	r5, r1
    39e0:	4ab5      	ldr	r2, [pc, #724]	; (3cb8 <__ieee754_pow+0x9f0>)
    39e2:	4bb6      	ldr	r3, [pc, #728]	; (3cbc <__ieee754_pow+0x9f4>)
    39e4:	f001 fd68 	bl	54b8 <__aeabi_dmul>
    39e8:	4ab5      	ldr	r2, [pc, #724]	; (3cc0 <__ieee754_pow+0x9f8>)
    39ea:	4bb6      	ldr	r3, [pc, #728]	; (3cc4 <__ieee754_pow+0x9fc>)
    39ec:	f001 ffde 	bl	59ac <__aeabi_dsub>
    39f0:	0022      	movs	r2, r4
    39f2:	002b      	movs	r3, r5
    39f4:	f001 fd60 	bl	54b8 <__aeabi_dmul>
    39f8:	4ab3      	ldr	r2, [pc, #716]	; (3cc8 <__ieee754_pow+0xa00>)
    39fa:	4bb4      	ldr	r3, [pc, #720]	; (3ccc <__ieee754_pow+0xa04>)
    39fc:	f000 fe0c 	bl	4618 <__aeabi_dadd>
    3a00:	0022      	movs	r2, r4
    3a02:	002b      	movs	r3, r5
    3a04:	f001 fd58 	bl	54b8 <__aeabi_dmul>
    3a08:	4ab1      	ldr	r2, [pc, #708]	; (3cd0 <__ieee754_pow+0xa08>)
    3a0a:	4bb2      	ldr	r3, [pc, #712]	; (3cd4 <__ieee754_pow+0xa0c>)
    3a0c:	f001 ffce 	bl	59ac <__aeabi_dsub>
    3a10:	0022      	movs	r2, r4
    3a12:	002b      	movs	r3, r5
    3a14:	f001 fd50 	bl	54b8 <__aeabi_dmul>
    3a18:	4aaf      	ldr	r2, [pc, #700]	; (3cd8 <__ieee754_pow+0xa10>)
    3a1a:	4bb0      	ldr	r3, [pc, #704]	; (3cdc <__ieee754_pow+0xa14>)
    3a1c:	f000 fdfc 	bl	4618 <__aeabi_dadd>
    3a20:	0022      	movs	r2, r4
    3a22:	002b      	movs	r3, r5
    3a24:	f001 fd48 	bl	54b8 <__aeabi_dmul>
    3a28:	0002      	movs	r2, r0
    3a2a:	000b      	movs	r3, r1
    3a2c:	0030      	movs	r0, r6
    3a2e:	0039      	movs	r1, r7
    3a30:	f001 ffbc 	bl	59ac <__aeabi_dsub>
    3a34:	0004      	movs	r4, r0
    3a36:	000d      	movs	r5, r1
    3a38:	0002      	movs	r2, r0
    3a3a:	000b      	movs	r3, r1
    3a3c:	0030      	movs	r0, r6
    3a3e:	0039      	movs	r1, r7
    3a40:	f001 fd3a 	bl	54b8 <__aeabi_dmul>
    3a44:	2380      	movs	r3, #128	; 0x80
    3a46:	9002      	str	r0, [sp, #8]
    3a48:	9103      	str	r1, [sp, #12]
    3a4a:	2200      	movs	r2, #0
    3a4c:	05db      	lsls	r3, r3, #23
    3a4e:	0020      	movs	r0, r4
    3a50:	0029      	movs	r1, r5
    3a52:	f001 ffab 	bl	59ac <__aeabi_dsub>
    3a56:	0002      	movs	r2, r0
    3a58:	000b      	movs	r3, r1
    3a5a:	9802      	ldr	r0, [sp, #8]
    3a5c:	9903      	ldr	r1, [sp, #12]
    3a5e:	f001 f907 	bl	4c70 <__aeabi_ddiv>
    3a62:	9a00      	ldr	r2, [sp, #0]
    3a64:	9b01      	ldr	r3, [sp, #4]
    3a66:	0004      	movs	r4, r0
    3a68:	000d      	movs	r5, r1
    3a6a:	0030      	movs	r0, r6
    3a6c:	0039      	movs	r1, r7
    3a6e:	f001 fd23 	bl	54b8 <__aeabi_dmul>
    3a72:	9a00      	ldr	r2, [sp, #0]
    3a74:	9b01      	ldr	r3, [sp, #4]
    3a76:	f000 fdcf 	bl	4618 <__aeabi_dadd>
    3a7a:	0002      	movs	r2, r0
    3a7c:	000b      	movs	r3, r1
    3a7e:	0020      	movs	r0, r4
    3a80:	0029      	movs	r1, r5
    3a82:	f001 ff93 	bl	59ac <__aeabi_dsub>
    3a86:	0032      	movs	r2, r6
    3a88:	003b      	movs	r3, r7
    3a8a:	f001 ff8f 	bl	59ac <__aeabi_dsub>
    3a8e:	0002      	movs	r2, r0
    3a90:	000b      	movs	r3, r1
    3a92:	2000      	movs	r0, #0
    3a94:	4992      	ldr	r1, [pc, #584]	; (3ce0 <__ieee754_pow+0xa18>)
    3a96:	f001 ff89 	bl	59ac <__aeabi_dsub>
    3a9a:	464b      	mov	r3, r9
    3a9c:	185b      	adds	r3, r3, r1
    3a9e:	151a      	asrs	r2, r3, #20
    3aa0:	2a00      	cmp	r2, #0
    3aa2:	dc00      	bgt.n	3aa6 <__ieee754_pow+0x7de>
    3aa4:	e0f4      	b.n	3c90 <__ieee754_pow+0x9c8>
    3aa6:	0019      	movs	r1, r3
    3aa8:	9a06      	ldr	r2, [sp, #24]
    3aaa:	9b07      	ldr	r3, [sp, #28]
    3aac:	f001 fd04 	bl	54b8 <__aeabi_dmul>
    3ab0:	0006      	movs	r6, r0
    3ab2:	e452      	b.n	335a <__ieee754_pow+0x92>
    3ab4:	0032      	movs	r2, r6
    3ab6:	0030      	movs	r0, r6
    3ab8:	002b      	movs	r3, r5
    3aba:	0029      	movs	r1, r5
    3abc:	f001 fcfc 	bl	54b8 <__aeabi_dmul>
    3ac0:	0006      	movs	r6, r0
    3ac2:	e44a      	b.n	335a <__ieee754_pow+0x92>
    3ac4:	4b87      	ldr	r3, [pc, #540]	; (3ce4 <__ieee754_pow+0xa1c>)
    3ac6:	004e      	lsls	r6, r1, #1
    3ac8:	0876      	lsrs	r6, r6, #1
    3aca:	429e      	cmp	r6, r3
    3acc:	dc00      	bgt.n	3ad0 <__ieee754_pow+0x808>
    3ace:	e0bf      	b.n	3c50 <__ieee754_pow+0x988>
    3ad0:	4b85      	ldr	r3, [pc, #532]	; (3ce8 <__ieee754_pow+0xa20>)
    3ad2:	18cb      	adds	r3, r1, r3
    3ad4:	4303      	orrs	r3, r0
    3ad6:	d10c      	bne.n	3af2 <__ieee754_pow+0x82a>
    3ad8:	9a00      	ldr	r2, [sp, #0]
    3ada:	9b01      	ldr	r3, [sp, #4]
    3adc:	f001 ff66 	bl	59ac <__aeabi_dsub>
    3ae0:	0002      	movs	r2, r0
    3ae2:	000b      	movs	r3, r1
    3ae4:	9804      	ldr	r0, [sp, #16]
    3ae6:	9905      	ldr	r1, [sp, #20]
    3ae8:	f000 fbf8 	bl	42dc <__aeabi_dcmple>
    3aec:	2800      	cmp	r0, #0
    3aee:	d100      	bne.n	3af2 <__ieee754_pow+0x82a>
    3af0:	e701      	b.n	38f6 <__ieee754_pow+0x62e>
    3af2:	9806      	ldr	r0, [sp, #24]
    3af4:	9907      	ldr	r1, [sp, #28]
    3af6:	4a7d      	ldr	r2, [pc, #500]	; (3cec <__ieee754_pow+0xa24>)
    3af8:	4b7d      	ldr	r3, [pc, #500]	; (3cf0 <__ieee754_pow+0xa28>)
    3afa:	f001 fcdd 	bl	54b8 <__aeabi_dmul>
    3afe:	4a7b      	ldr	r2, [pc, #492]	; (3cec <__ieee754_pow+0xa24>)
    3b00:	4b7b      	ldr	r3, [pc, #492]	; (3cf0 <__ieee754_pow+0xa28>)
    3b02:	f001 fcd9 	bl	54b8 <__aeabi_dmul>
    3b06:	0006      	movs	r6, r0
    3b08:	f7ff fc27 	bl	335a <__ieee754_pow+0x92>
    3b0c:	2300      	movs	r3, #0
    3b0e:	4c79      	ldr	r4, [pc, #484]	; (3cf4 <__ieee754_pow+0xa2c>)
    3b10:	9306      	str	r3, [sp, #24]
    3b12:	9407      	str	r4, [sp, #28]
    3b14:	e666      	b.n	37e4 <__ieee754_pow+0x51c>
    3b16:	4653      	mov	r3, sl
    3b18:	2b00      	cmp	r3, #0
    3b1a:	db00      	blt.n	3b1e <__ieee754_pow+0x856>
    3b1c:	e4c3      	b.n	34a6 <__ieee754_pow+0x1de>
    3b1e:	9b00      	ldr	r3, [sp, #0]
    3b20:	9c01      	ldr	r4, [sp, #4]
    3b22:	2280      	movs	r2, #128	; 0x80
    3b24:	0612      	lsls	r2, r2, #24
    3b26:	001e      	movs	r6, r3
    3b28:	4694      	mov	ip, r2
    3b2a:	0023      	movs	r3, r4
    3b2c:	4463      	add	r3, ip
    3b2e:	0019      	movs	r1, r3
    3b30:	f7ff fc13 	bl	335a <__ieee754_pow+0x92>
    3b34:	0002      	movs	r2, r0
    3b36:	000b      	movs	r3, r1
    3b38:	2000      	movs	r0, #0
    3b3a:	4969      	ldr	r1, [pc, #420]	; (3ce0 <__ieee754_pow+0xa18>)
    3b3c:	f001 f898 	bl	4c70 <__aeabi_ddiv>
    3b40:	e44a      	b.n	33d8 <__ieee754_pow+0x110>
    3b42:	4b6d      	ldr	r3, [pc, #436]	; (3cf8 <__ieee754_pow+0xa30>)
    3b44:	429c      	cmp	r4, r3
    3b46:	dc00      	bgt.n	3b4a <__ieee754_pow+0x882>
    3b48:	e4aa      	b.n	34a0 <__ieee754_pow+0x1d8>
    3b4a:	4b65      	ldr	r3, [pc, #404]	; (3ce0 <__ieee754_pow+0xa18>)
    3b4c:	429c      	cmp	r4, r3
    3b4e:	dd01      	ble.n	3b54 <__ieee754_pow+0x88c>
    3b50:	f7ff fc2c 	bl	33ac <__ieee754_pow+0xe4>
    3b54:	2200      	movs	r2, #0
    3b56:	4b62      	ldr	r3, [pc, #392]	; (3ce0 <__ieee754_pow+0xa18>)
    3b58:	f001 ff28 	bl	59ac <__aeabi_dsub>
    3b5c:	22c0      	movs	r2, #192	; 0xc0
    3b5e:	4b67      	ldr	r3, [pc, #412]	; (3cfc <__ieee754_pow+0xa34>)
    3b60:	05d2      	lsls	r2, r2, #23
    3b62:	0004      	movs	r4, r0
    3b64:	000d      	movs	r5, r1
    3b66:	f001 fca7 	bl	54b8 <__aeabi_dmul>
    3b6a:	4a65      	ldr	r2, [pc, #404]	; (3d00 <__ieee754_pow+0xa38>)
    3b6c:	0006      	movs	r6, r0
    3b6e:	000f      	movs	r7, r1
    3b70:	4b64      	ldr	r3, [pc, #400]	; (3d04 <__ieee754_pow+0xa3c>)
    3b72:	0020      	movs	r0, r4
    3b74:	0029      	movs	r1, r5
    3b76:	f001 fc9f 	bl	54b8 <__aeabi_dmul>
    3b7a:	2200      	movs	r2, #0
    3b7c:	9002      	str	r0, [sp, #8]
    3b7e:	9103      	str	r1, [sp, #12]
    3b80:	4b61      	ldr	r3, [pc, #388]	; (3d08 <__ieee754_pow+0xa40>)
    3b82:	0020      	movs	r0, r4
    3b84:	0029      	movs	r1, r5
    3b86:	f001 fc97 	bl	54b8 <__aeabi_dmul>
    3b8a:	0002      	movs	r2, r0
    3b8c:	000b      	movs	r3, r1
    3b8e:	485f      	ldr	r0, [pc, #380]	; (3d0c <__ieee754_pow+0xa44>)
    3b90:	495f      	ldr	r1, [pc, #380]	; (3d10 <__ieee754_pow+0xa48>)
    3b92:	f001 ff0b 	bl	59ac <__aeabi_dsub>
    3b96:	0022      	movs	r2, r4
    3b98:	002b      	movs	r3, r5
    3b9a:	f001 fc8d 	bl	54b8 <__aeabi_dmul>
    3b9e:	0002      	movs	r2, r0
    3ba0:	000b      	movs	r3, r1
    3ba2:	2000      	movs	r0, #0
    3ba4:	495b      	ldr	r1, [pc, #364]	; (3d14 <__ieee754_pow+0xa4c>)
    3ba6:	f001 ff01 	bl	59ac <__aeabi_dsub>
    3baa:	0022      	movs	r2, r4
    3bac:	9004      	str	r0, [sp, #16]
    3bae:	9105      	str	r1, [sp, #20]
    3bb0:	002b      	movs	r3, r5
    3bb2:	0020      	movs	r0, r4
    3bb4:	0029      	movs	r1, r5
    3bb6:	f001 fc7f 	bl	54b8 <__aeabi_dmul>
    3bba:	0002      	movs	r2, r0
    3bbc:	000b      	movs	r3, r1
    3bbe:	9804      	ldr	r0, [sp, #16]
    3bc0:	9905      	ldr	r1, [sp, #20]
    3bc2:	f001 fc79 	bl	54b8 <__aeabi_dmul>
    3bc6:	4a54      	ldr	r2, [pc, #336]	; (3d18 <__ieee754_pow+0xa50>)
    3bc8:	4b4c      	ldr	r3, [pc, #304]	; (3cfc <__ieee754_pow+0xa34>)
    3bca:	f001 fc75 	bl	54b8 <__aeabi_dmul>
    3bce:	0002      	movs	r2, r0
    3bd0:	000b      	movs	r3, r1
    3bd2:	9802      	ldr	r0, [sp, #8]
    3bd4:	9903      	ldr	r1, [sp, #12]
    3bd6:	f001 fee9 	bl	59ac <__aeabi_dsub>
    3bda:	0002      	movs	r2, r0
    3bdc:	000b      	movs	r3, r1
    3bde:	0004      	movs	r4, r0
    3be0:	000d      	movs	r5, r1
    3be2:	0030      	movs	r0, r6
    3be4:	0039      	movs	r1, r7
    3be6:	f000 fd17 	bl	4618 <__aeabi_dadd>
    3bea:	2200      	movs	r2, #0
    3bec:	0010      	movs	r0, r2
    3bee:	003b      	movs	r3, r7
    3bf0:	0032      	movs	r2, r6
    3bf2:	9002      	str	r0, [sp, #8]
    3bf4:	9103      	str	r1, [sp, #12]
    3bf6:	f001 fed9 	bl	59ac <__aeabi_dsub>
    3bfa:	0002      	movs	r2, r0
    3bfc:	000b      	movs	r3, r1
    3bfe:	0020      	movs	r0, r4
    3c00:	0029      	movs	r1, r5
    3c02:	f001 fed3 	bl	59ac <__aeabi_dsub>
    3c06:	9004      	str	r0, [sp, #16]
    3c08:	9105      	str	r1, [sp, #20]
    3c0a:	e5e1      	b.n	37d0 <__ieee754_pow+0x508>
    3c0c:	4a43      	ldr	r2, [pc, #268]	; (3d1c <__ieee754_pow+0xa54>)
    3c0e:	4b44      	ldr	r3, [pc, #272]	; (3d20 <__ieee754_pow+0xa58>)
    3c10:	9806      	ldr	r0, [sp, #24]
    3c12:	9907      	ldr	r1, [sp, #28]
    3c14:	f001 fc50 	bl	54b8 <__aeabi_dmul>
    3c18:	4a40      	ldr	r2, [pc, #256]	; (3d1c <__ieee754_pow+0xa54>)
    3c1a:	4b41      	ldr	r3, [pc, #260]	; (3d20 <__ieee754_pow+0xa58>)
    3c1c:	f001 fc4c 	bl	54b8 <__aeabi_dmul>
    3c20:	0006      	movs	r6, r0
    3c22:	f7ff fb9a 	bl	335a <__ieee754_pow+0x92>
    3c26:	2a00      	cmp	r2, #0
    3c28:	d001      	beq.n	3c2e <__ieee754_pow+0x966>
    3c2a:	f7ff fba5 	bl	3378 <__ieee754_pow+0xb0>
    3c2e:	3214      	adds	r2, #20
    3c30:	1ad3      	subs	r3, r2, r3
    3c32:	003a      	movs	r2, r7
    3c34:	411a      	asrs	r2, r3
    3c36:	0011      	movs	r1, r2
    3c38:	4099      	lsls	r1, r3
    3c3a:	428f      	cmp	r7, r1
    3c3c:	d001      	beq.n	3c42 <__ieee754_pow+0x97a>
    3c3e:	f7ff fb6f 	bl	3320 <__ieee754_pow+0x58>
    3c42:	2301      	movs	r3, #1
    3c44:	4013      	ands	r3, r2
    3c46:	2202      	movs	r2, #2
    3c48:	1ad3      	subs	r3, r2, r3
    3c4a:	469b      	mov	fp, r3
    3c4c:	f7ff fb68 	bl	3320 <__ieee754_pow+0x58>
    3c50:	4b30      	ldr	r3, [pc, #192]	; (3d14 <__ieee754_pow+0xa4c>)
    3c52:	429e      	cmp	r6, r3
    3c54:	dd00      	ble.n	3c58 <__ieee754_pow+0x990>
    3c56:	e64e      	b.n	38f6 <__ieee754_pow+0x62e>
    3c58:	2300      	movs	r3, #0
    3c5a:	4699      	mov	r9, r3
    3c5c:	4698      	mov	r8, r3
    3c5e:	e67a      	b.n	3956 <__ieee754_pow+0x68e>
    3c60:	0002      	movs	r2, r0
    3c62:	000b      	movs	r3, r1
    3c64:	f7ff fc14 	bl	3490 <__ieee754_pow+0x1c8>
    3c68:	2380      	movs	r3, #128	; 0x80
    3c6a:	4c2e      	ldr	r4, [pc, #184]	; (3d24 <__ieee754_pow+0xa5c>)
    3c6c:	05db      	lsls	r3, r3, #23
    3c6e:	9308      	str	r3, [sp, #32]
    3c70:	9409      	str	r4, [sp, #36]	; 0x24
    3c72:	4b2d      	ldr	r3, [pc, #180]	; (3d28 <__ieee754_pow+0xa60>)
    3c74:	4c2d      	ldr	r4, [pc, #180]	; (3d2c <__ieee754_pow+0xa64>)
    3c76:	2200      	movs	r2, #0
    3c78:	930c      	str	r3, [sp, #48]	; 0x30
    3c7a:	940d      	str	r4, [sp, #52]	; 0x34
    3c7c:	2480      	movs	r4, #128	; 0x80
    3c7e:	4b2c      	ldr	r3, [pc, #176]	; (3d30 <__ieee754_pow+0xa68>)
    3c80:	02e4      	lsls	r4, r4, #11
    3c82:	9206      	str	r2, [sp, #24]
    3c84:	9307      	str	r3, [sp, #28]
    3c86:	e456      	b.n	3536 <__ieee754_pow+0x26e>
    3c88:	4643      	mov	r3, r8
    3c8a:	425b      	negs	r3, r3
    3c8c:	4698      	mov	r8, r3
    3c8e:	e651      	b.n	3934 <__ieee754_pow+0x66c>
    3c90:	4642      	mov	r2, r8
    3c92:	f000 f9fd 	bl	4090 <scalbn>
    3c96:	e707      	b.n	3aa8 <__ieee754_pow+0x7e0>
    3c98:	fffffc02 	.word	0xfffffc02
    3c9c:	fffffc01 	.word	0xfffffc01
    3ca0:	000fffff 	.word	0x000fffff
    3ca4:	3fe62e43 	.word	0x3fe62e43
    3ca8:	fefa39ef 	.word	0xfefa39ef
    3cac:	3fe62e42 	.word	0x3fe62e42
    3cb0:	0ca86c39 	.word	0x0ca86c39
    3cb4:	be205c61 	.word	0xbe205c61
    3cb8:	72bea4d0 	.word	0x72bea4d0
    3cbc:	3e663769 	.word	0x3e663769
    3cc0:	c5d26bf1 	.word	0xc5d26bf1
    3cc4:	3ebbbd41 	.word	0x3ebbbd41
    3cc8:	af25de2c 	.word	0xaf25de2c
    3ccc:	3f11566a 	.word	0x3f11566a
    3cd0:	16bebd93 	.word	0x16bebd93
    3cd4:	3f66c16c 	.word	0x3f66c16c
    3cd8:	5555553e 	.word	0x5555553e
    3cdc:	3fc55555 	.word	0x3fc55555
    3ce0:	3ff00000 	.word	0x3ff00000
    3ce4:	4090cbff 	.word	0x4090cbff
    3ce8:	3f6f3400 	.word	0x3f6f3400
    3cec:	c2f8f359 	.word	0xc2f8f359
    3cf0:	01a56e1f 	.word	0x01a56e1f
    3cf4:	bff00000 	.word	0xbff00000
    3cf8:	3feffffe 	.word	0x3feffffe
    3cfc:	3ff71547 	.word	0x3ff71547
    3d00:	f85ddf44 	.word	0xf85ddf44
    3d04:	3e54ae0b 	.word	0x3e54ae0b
    3d08:	3fd00000 	.word	0x3fd00000
    3d0c:	55555555 	.word	0x55555555
    3d10:	3fd55555 	.word	0x3fd55555
    3d14:	3fe00000 	.word	0x3fe00000
    3d18:	652b82fe 	.word	0x652b82fe
    3d1c:	8800759c 	.word	0x8800759c
    3d20:	7e37e43c 	.word	0x7e37e43c
    3d24:	3fe2b803 	.word	0x3fe2b803
    3d28:	43cfd006 	.word	0x43cfd006
    3d2c:	3e4cfdeb 	.word	0x3e4cfdeb
    3d30:	3ff80000 	.word	0x3ff80000

00003d34 <__ieee754_sqrt>:
    3d34:	b5f0      	push	{r4, r5, r6, r7, lr}
    3d36:	4656      	mov	r6, sl
    3d38:	464d      	mov	r5, r9
    3d3a:	4644      	mov	r4, r8
    3d3c:	465f      	mov	r7, fp
    3d3e:	4b75      	ldr	r3, [pc, #468]	; (3f14 <__ieee754_sqrt+0x1e0>)
    3d40:	b4f0      	push	{r4, r5, r6, r7}
    3d42:	000a      	movs	r2, r1
    3d44:	000d      	movs	r5, r1
    3d46:	0019      	movs	r1, r3
    3d48:	b083      	sub	sp, #12
    3d4a:	0006      	movs	r6, r0
    3d4c:	0004      	movs	r4, r0
    3d4e:	4029      	ands	r1, r5
    3d50:	4299      	cmp	r1, r3
    3d52:	d100      	bne.n	3d56 <__ieee754_sqrt+0x22>
    3d54:	e0ba      	b.n	3ecc <__ieee754_sqrt+0x198>
    3d56:	2d00      	cmp	r5, #0
    3d58:	dc00      	bgt.n	3d5c <__ieee754_sqrt+0x28>
    3d5a:	e094      	b.n	3e86 <__ieee754_sqrt+0x152>
    3d5c:	152d      	asrs	r5, r5, #20
    3d5e:	d100      	bne.n	3d62 <__ieee754_sqrt+0x2e>
    3d60:	e0a3      	b.n	3eaa <__ieee754_sqrt+0x176>
    3d62:	4b6d      	ldr	r3, [pc, #436]	; (3f18 <__ieee754_sqrt+0x1e4>)
    3d64:	0312      	lsls	r2, r2, #12
    3d66:	469c      	mov	ip, r3
    3d68:	2380      	movs	r3, #128	; 0x80
    3d6a:	0b12      	lsrs	r2, r2, #12
    3d6c:	035b      	lsls	r3, r3, #13
    3d6e:	4465      	add	r5, ip
    3d70:	431a      	orrs	r2, r3
    3d72:	07eb      	lsls	r3, r5, #31
    3d74:	d500      	bpl.n	3d78 <__ieee754_sqrt+0x44>
    3d76:	e081      	b.n	3e7c <__ieee754_sqrt+0x148>
    3d78:	106b      	asrs	r3, r5, #1
    3d7a:	4698      	mov	r8, r3
    3d7c:	0fe3      	lsrs	r3, r4, #31
    3d7e:	189b      	adds	r3, r3, r2
    3d80:	189b      	adds	r3, r3, r2
    3d82:	2280      	movs	r2, #128	; 0x80
    3d84:	2116      	movs	r1, #22
    3d86:	2600      	movs	r6, #0
    3d88:	2700      	movs	r7, #0
    3d8a:	0064      	lsls	r4, r4, #1
    3d8c:	0392      	lsls	r2, r2, #14
    3d8e:	18b8      	adds	r0, r7, r2
    3d90:	4298      	cmp	r0, r3
    3d92:	dc02      	bgt.n	3d9a <__ieee754_sqrt+0x66>
    3d94:	1887      	adds	r7, r0, r2
    3d96:	1a1b      	subs	r3, r3, r0
    3d98:	18b6      	adds	r6, r6, r2
    3d9a:	0fe0      	lsrs	r0, r4, #31
    3d9c:	005b      	lsls	r3, r3, #1
    3d9e:	3901      	subs	r1, #1
    3da0:	181b      	adds	r3, r3, r0
    3da2:	0064      	lsls	r4, r4, #1
    3da4:	0852      	lsrs	r2, r2, #1
    3da6:	2900      	cmp	r1, #0
    3da8:	d1f1      	bne.n	3d8e <__ieee754_sqrt+0x5a>
    3daa:	2200      	movs	r2, #0
    3dac:	9201      	str	r2, [sp, #4]
    3dae:	4694      	mov	ip, r2
    3db0:	2280      	movs	r2, #128	; 0x80
    3db2:	0612      	lsls	r2, r2, #24
    3db4:	2020      	movs	r0, #32
    3db6:	4691      	mov	r9, r2
    3db8:	e009      	b.n	3dce <__ieee754_sqrt+0x9a>
    3dba:	429f      	cmp	r7, r3
    3dbc:	d041      	beq.n	3e42 <__ieee754_sqrt+0x10e>
    3dbe:	0fe1      	lsrs	r1, r4, #31
    3dc0:	18c9      	adds	r1, r1, r3
    3dc2:	3801      	subs	r0, #1
    3dc4:	18cb      	adds	r3, r1, r3
    3dc6:	0064      	lsls	r4, r4, #1
    3dc8:	0852      	lsrs	r2, r2, #1
    3dca:	2800      	cmp	r0, #0
    3dcc:	d01e      	beq.n	3e0c <__ieee754_sqrt+0xd8>
    3dce:	4661      	mov	r1, ip
    3dd0:	1851      	adds	r1, r2, r1
    3dd2:	429f      	cmp	r7, r3
    3dd4:	daf1      	bge.n	3dba <__ieee754_sqrt+0x86>
    3dd6:	188d      	adds	r5, r1, r2
    3dd8:	46ac      	mov	ip, r5
    3dda:	0fcd      	lsrs	r5, r1, #31
    3ddc:	07ed      	lsls	r5, r5, #31
    3dde:	46ba      	mov	sl, r7
    3de0:	454d      	cmp	r5, r9
    3de2:	d039      	beq.n	3e58 <__ieee754_sqrt+0x124>
    3de4:	1bdb      	subs	r3, r3, r7
    3de6:	428c      	cmp	r4, r1
    3de8:	41bf      	sbcs	r7, r7
    3dea:	427f      	negs	r7, r7
    3dec:	1bdb      	subs	r3, r3, r7
    3dee:	1a64      	subs	r4, r4, r1
    3df0:	9901      	ldr	r1, [sp, #4]
    3df2:	3801      	subs	r0, #1
    3df4:	468b      	mov	fp, r1
    3df6:	4493      	add	fp, r2
    3df8:	4659      	mov	r1, fp
    3dfa:	9101      	str	r1, [sp, #4]
    3dfc:	0fe1      	lsrs	r1, r4, #31
    3dfe:	18c9      	adds	r1, r1, r3
    3e00:	4657      	mov	r7, sl
    3e02:	18cb      	adds	r3, r1, r3
    3e04:	0064      	lsls	r4, r4, #1
    3e06:	0852      	lsrs	r2, r2, #1
    3e08:	2800      	cmp	r0, #0
    3e0a:	d1e0      	bne.n	3dce <__ieee754_sqrt+0x9a>
    3e0c:	4323      	orrs	r3, r4
    3e0e:	d12b      	bne.n	3e68 <__ieee754_sqrt+0x134>
    3e10:	9b01      	ldr	r3, [sp, #4]
    3e12:	085b      	lsrs	r3, r3, #1
    3e14:	4941      	ldr	r1, [pc, #260]	; (3f1c <__ieee754_sqrt+0x1e8>)
    3e16:	1072      	asrs	r2, r6, #1
    3e18:	468c      	mov	ip, r1
    3e1a:	4462      	add	r2, ip
    3e1c:	07f1      	lsls	r1, r6, #31
    3e1e:	d502      	bpl.n	3e26 <__ieee754_sqrt+0xf2>
    3e20:	2180      	movs	r1, #128	; 0x80
    3e22:	0609      	lsls	r1, r1, #24
    3e24:	430b      	orrs	r3, r1
    3e26:	4641      	mov	r1, r8
    3e28:	0509      	lsls	r1, r1, #20
    3e2a:	188d      	adds	r5, r1, r2
    3e2c:	001e      	movs	r6, r3
    3e2e:	002f      	movs	r7, r5
    3e30:	0030      	movs	r0, r6
    3e32:	0039      	movs	r1, r7
    3e34:	b003      	add	sp, #12
    3e36:	bc3c      	pop	{r2, r3, r4, r5}
    3e38:	4690      	mov	r8, r2
    3e3a:	4699      	mov	r9, r3
    3e3c:	46a2      	mov	sl, r4
    3e3e:	46ab      	mov	fp, r5
    3e40:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3e42:	42a1      	cmp	r1, r4
    3e44:	d80e      	bhi.n	3e64 <__ieee754_sqrt+0x130>
    3e46:	188d      	adds	r5, r1, r2
    3e48:	46ac      	mov	ip, r5
    3e4a:	0fcd      	lsrs	r5, r1, #31
    3e4c:	07ed      	lsls	r5, r5, #31
    3e4e:	454d      	cmp	r5, r9
    3e50:	d048      	beq.n	3ee4 <__ieee754_sqrt+0x1b0>
    3e52:	469a      	mov	sl, r3
    3e54:	2300      	movs	r3, #0
    3e56:	e7ca      	b.n	3dee <__ieee754_sqrt+0xba>
    3e58:	4665      	mov	r5, ip
    3e5a:	2d00      	cmp	r5, #0
    3e5c:	dbc2      	blt.n	3de4 <__ieee754_sqrt+0xb0>
    3e5e:	1c7d      	adds	r5, r7, #1
    3e60:	46aa      	mov	sl, r5
    3e62:	e7bf      	b.n	3de4 <__ieee754_sqrt+0xb0>
    3e64:	003b      	movs	r3, r7
    3e66:	e7aa      	b.n	3dbe <__ieee754_sqrt+0x8a>
    3e68:	9b01      	ldr	r3, [sp, #4]
    3e6a:	3301      	adds	r3, #1
    3e6c:	d03e      	beq.n	3eec <__ieee754_sqrt+0x1b8>
    3e6e:	9a01      	ldr	r2, [sp, #4]
    3e70:	2301      	movs	r3, #1
    3e72:	4694      	mov	ip, r2
    3e74:	4013      	ands	r3, r2
    3e76:	4463      	add	r3, ip
    3e78:	085b      	lsrs	r3, r3, #1
    3e7a:	e7cb      	b.n	3e14 <__ieee754_sqrt+0xe0>
    3e7c:	0fe3      	lsrs	r3, r4, #31
    3e7e:	0052      	lsls	r2, r2, #1
    3e80:	189a      	adds	r2, r3, r2
    3e82:	0064      	lsls	r4, r4, #1
    3e84:	e778      	b.n	3d78 <__ieee754_sqrt+0x44>
    3e86:	006b      	lsls	r3, r5, #1
    3e88:	085b      	lsrs	r3, r3, #1
    3e8a:	4303      	orrs	r3, r0
    3e8c:	002f      	movs	r7, r5
    3e8e:	2b00      	cmp	r3, #0
    3e90:	d0ce      	beq.n	3e30 <__ieee754_sqrt+0xfc>
    3e92:	2500      	movs	r5, #0
    3e94:	2a00      	cmp	r2, #0
    3e96:	d131      	bne.n	3efc <__ieee754_sqrt+0x1c8>
    3e98:	0ae2      	lsrs	r2, r4, #11
    3e9a:	3d15      	subs	r5, #21
    3e9c:	0564      	lsls	r4, r4, #21
    3e9e:	2a00      	cmp	r2, #0
    3ea0:	d0fa      	beq.n	3e98 <__ieee754_sqrt+0x164>
    3ea2:	2380      	movs	r3, #128	; 0x80
    3ea4:	035b      	lsls	r3, r3, #13
    3ea6:	421a      	tst	r2, r3
    3ea8:	d123      	bne.n	3ef2 <__ieee754_sqrt+0x1be>
    3eaa:	2080      	movs	r0, #128	; 0x80
    3eac:	2300      	movs	r3, #0
    3eae:	0340      	lsls	r0, r0, #13
    3eb0:	e000      	b.n	3eb4 <__ieee754_sqrt+0x180>
    3eb2:	000b      	movs	r3, r1
    3eb4:	0052      	lsls	r2, r2, #1
    3eb6:	1c59      	adds	r1, r3, #1
    3eb8:	4202      	tst	r2, r0
    3eba:	d0fa      	beq.n	3eb2 <__ieee754_sqrt+0x17e>
    3ebc:	2020      	movs	r0, #32
    3ebe:	1a40      	subs	r0, r0, r1
    3ec0:	1aed      	subs	r5, r5, r3
    3ec2:	0023      	movs	r3, r4
    3ec4:	40c3      	lsrs	r3, r0
    3ec6:	408c      	lsls	r4, r1
    3ec8:	431a      	orrs	r2, r3
    3eca:	e74a      	b.n	3d62 <__ieee754_sqrt+0x2e>
    3ecc:	0002      	movs	r2, r0
    3ece:	002b      	movs	r3, r5
    3ed0:	0029      	movs	r1, r5
    3ed2:	f001 faf1 	bl	54b8 <__aeabi_dmul>
    3ed6:	0032      	movs	r2, r6
    3ed8:	002b      	movs	r3, r5
    3eda:	f000 fb9d 	bl	4618 <__aeabi_dadd>
    3ede:	0006      	movs	r6, r0
    3ee0:	000f      	movs	r7, r1
    3ee2:	e7a5      	b.n	3e30 <__ieee754_sqrt+0xfc>
    3ee4:	4665      	mov	r5, ip
    3ee6:	2d00      	cmp	r5, #0
    3ee8:	dab9      	bge.n	3e5e <__ieee754_sqrt+0x12a>
    3eea:	e7b2      	b.n	3e52 <__ieee754_sqrt+0x11e>
    3eec:	3601      	adds	r6, #1
    3eee:	2300      	movs	r3, #0
    3ef0:	e790      	b.n	3e14 <__ieee754_sqrt+0xe0>
    3ef2:	2301      	movs	r3, #1
    3ef4:	2020      	movs	r0, #32
    3ef6:	425b      	negs	r3, r3
    3ef8:	2100      	movs	r1, #0
    3efa:	e7e1      	b.n	3ec0 <__ieee754_sqrt+0x18c>
    3efc:	003b      	movs	r3, r7
    3efe:	0002      	movs	r2, r0
    3f00:	0039      	movs	r1, r7
    3f02:	f001 fd53 	bl	59ac <__aeabi_dsub>
    3f06:	0002      	movs	r2, r0
    3f08:	000b      	movs	r3, r1
    3f0a:	f000 feb1 	bl	4c70 <__aeabi_ddiv>
    3f0e:	0006      	movs	r6, r0
    3f10:	000f      	movs	r7, r1
    3f12:	e78d      	b.n	3e30 <__ieee754_sqrt+0xfc>
    3f14:	7ff00000 	.word	0x7ff00000
    3f18:	fffffc01 	.word	0xfffffc01
    3f1c:	3fe00000 	.word	0x3fe00000

00003f20 <fabs>:
    3f20:	0049      	lsls	r1, r1, #1
    3f22:	084b      	lsrs	r3, r1, #1
    3f24:	0019      	movs	r1, r3
    3f26:	4770      	bx	lr

00003f28 <finite>:
    3f28:	4b03      	ldr	r3, [pc, #12]	; (3f38 <finite+0x10>)
    3f2a:	0048      	lsls	r0, r1, #1
    3f2c:	469c      	mov	ip, r3
    3f2e:	0840      	lsrs	r0, r0, #1
    3f30:	4460      	add	r0, ip
    3f32:	0fc0      	lsrs	r0, r0, #31
    3f34:	4770      	bx	lr
    3f36:	46c0      	nop			; (mov r8, r8)
    3f38:	80100000 	.word	0x80100000

00003f3c <matherr>:
    3f3c:	2000      	movs	r0, #0
    3f3e:	4770      	bx	lr

00003f40 <nan>:
    3f40:	2000      	movs	r0, #0
    3f42:	4901      	ldr	r1, [pc, #4]	; (3f48 <nan+0x8>)
    3f44:	4770      	bx	lr
    3f46:	46c0      	nop			; (mov r8, r8)
    3f48:	7ff80000 	.word	0x7ff80000

00003f4c <rint>:
    3f4c:	b5f0      	push	{r4, r5, r6, r7, lr}
    3f4e:	4647      	mov	r7, r8
    3f50:	b480      	push	{r7}
    3f52:	0fcb      	lsrs	r3, r1, #31
    3f54:	4698      	mov	r8, r3
    3f56:	4c4a      	ldr	r4, [pc, #296]	; (4080 <rint+0x134>)
    3f58:	004b      	lsls	r3, r1, #1
    3f5a:	0d5b      	lsrs	r3, r3, #21
    3f5c:	191e      	adds	r6, r3, r4
    3f5e:	b082      	sub	sp, #8
    3f60:	0007      	movs	r7, r0
    3f62:	000a      	movs	r2, r1
    3f64:	2e13      	cmp	r6, #19
    3f66:	dc35      	bgt.n	3fd4 <rint+0x88>
    3f68:	2e00      	cmp	r6, #0
    3f6a:	db57      	blt.n	401c <rint+0xd0>
    3f6c:	4b45      	ldr	r3, [pc, #276]	; (4084 <rint+0x138>)
    3f6e:	0004      	movs	r4, r0
    3f70:	4133      	asrs	r3, r6
    3f72:	001f      	movs	r7, r3
    3f74:	400f      	ands	r7, r1
    3f76:	4307      	orrs	r7, r0
    3f78:	000d      	movs	r5, r1
    3f7a:	2f00      	cmp	r7, #0
    3f7c:	d024      	beq.n	3fc8 <rint+0x7c>
    3f7e:	085b      	lsrs	r3, r3, #1
    3f80:	001c      	movs	r4, r3
    3f82:	400c      	ands	r4, r1
    3f84:	4320      	orrs	r0, r4
    3f86:	2700      	movs	r7, #0
    3f88:	2800      	cmp	r0, #0
    3f8a:	d007      	beq.n	3f9c <rint+0x50>
    3f8c:	2e13      	cmp	r6, #19
    3f8e:	d100      	bne.n	3f92 <rint+0x46>
    3f90:	e072      	b.n	4078 <rint+0x12c>
    3f92:	2280      	movs	r2, #128	; 0x80
    3f94:	02d2      	lsls	r2, r2, #11
    3f96:	4132      	asrs	r2, r6
    3f98:	4399      	bics	r1, r3
    3f9a:	430a      	orrs	r2, r1
    3f9c:	4643      	mov	r3, r8
    3f9e:	00de      	lsls	r6, r3, #3
    3fa0:	4b39      	ldr	r3, [pc, #228]	; (4088 <rint+0x13c>)
    3fa2:	0011      	movs	r1, r2
    3fa4:	199e      	adds	r6, r3, r6
    3fa6:	6834      	ldr	r4, [r6, #0]
    3fa8:	6875      	ldr	r5, [r6, #4]
    3faa:	0038      	movs	r0, r7
    3fac:	0022      	movs	r2, r4
    3fae:	002b      	movs	r3, r5
    3fb0:	f000 fb32 	bl	4618 <__aeabi_dadd>
    3fb4:	9000      	str	r0, [sp, #0]
    3fb6:	9101      	str	r1, [sp, #4]
    3fb8:	9800      	ldr	r0, [sp, #0]
    3fba:	9901      	ldr	r1, [sp, #4]
    3fbc:	0022      	movs	r2, r4
    3fbe:	002b      	movs	r3, r5
    3fc0:	f001 fcf4 	bl	59ac <__aeabi_dsub>
    3fc4:	0004      	movs	r4, r0
    3fc6:	000d      	movs	r5, r1
    3fc8:	0020      	movs	r0, r4
    3fca:	0029      	movs	r1, r5
    3fcc:	b002      	add	sp, #8
    3fce:	bc04      	pop	{r2}
    3fd0:	4690      	mov	r8, r2
    3fd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3fd4:	2e33      	cmp	r6, #51	; 0x33
    3fd6:	dd0c      	ble.n	3ff2 <rint+0xa6>
    3fd8:	2380      	movs	r3, #128	; 0x80
    3fda:	0004      	movs	r4, r0
    3fdc:	000d      	movs	r5, r1
    3fde:	00db      	lsls	r3, r3, #3
    3fe0:	429e      	cmp	r6, r3
    3fe2:	d1f1      	bne.n	3fc8 <rint+0x7c>
    3fe4:	0002      	movs	r2, r0
    3fe6:	000b      	movs	r3, r1
    3fe8:	f000 fb16 	bl	4618 <__aeabi_dadd>
    3fec:	0004      	movs	r4, r0
    3fee:	000d      	movs	r5, r1
    3ff0:	e7ea      	b.n	3fc8 <rint+0x7c>
    3ff2:	4c26      	ldr	r4, [pc, #152]	; (408c <rint+0x140>)
    3ff4:	000d      	movs	r5, r1
    3ff6:	46a4      	mov	ip, r4
    3ff8:	2401      	movs	r4, #1
    3ffa:	4463      	add	r3, ip
    3ffc:	4264      	negs	r4, r4
    3ffe:	40dc      	lsrs	r4, r3
    4000:	46a4      	mov	ip, r4
    4002:	4661      	mov	r1, ip
    4004:	0004      	movs	r4, r0
    4006:	4201      	tst	r1, r0
    4008:	d0de      	beq.n	3fc8 <rint+0x7c>
    400a:	0849      	lsrs	r1, r1, #1
    400c:	4201      	tst	r1, r0
    400e:	d0c5      	beq.n	3f9c <rint+0x50>
    4010:	2780      	movs	r7, #128	; 0x80
    4012:	05ff      	lsls	r7, r7, #23
    4014:	411f      	asrs	r7, r3
    4016:	4388      	bics	r0, r1
    4018:	4307      	orrs	r7, r0
    401a:	e7bf      	b.n	3f9c <rint+0x50>
    401c:	004b      	lsls	r3, r1, #1
    401e:	085b      	lsrs	r3, r3, #1
    4020:	4303      	orrs	r3, r0
    4022:	0004      	movs	r4, r0
    4024:	000d      	movs	r5, r1
    4026:	2b00      	cmp	r3, #0
    4028:	d0ce      	beq.n	3fc8 <rint+0x7c>
    402a:	030b      	lsls	r3, r1, #12
    402c:	0b1b      	lsrs	r3, r3, #12
    402e:	4303      	orrs	r3, r0
    4030:	425a      	negs	r2, r3
    4032:	4313      	orrs	r3, r2
    4034:	2280      	movs	r2, #128	; 0x80
    4036:	0b1b      	lsrs	r3, r3, #12
    4038:	0312      	lsls	r2, r2, #12
    403a:	4013      	ands	r3, r2
    403c:	0c4a      	lsrs	r2, r1, #17
    403e:	0452      	lsls	r2, r2, #17
    4040:	4313      	orrs	r3, r2
    4042:	0019      	movs	r1, r3
    4044:	4643      	mov	r3, r8
    4046:	4a10      	ldr	r2, [pc, #64]	; (4088 <rint+0x13c>)
    4048:	00db      	lsls	r3, r3, #3
    404a:	18d3      	adds	r3, r2, r3
    404c:	681c      	ldr	r4, [r3, #0]
    404e:	685d      	ldr	r5, [r3, #4]
    4050:	0022      	movs	r2, r4
    4052:	002b      	movs	r3, r5
    4054:	f000 fae0 	bl	4618 <__aeabi_dadd>
    4058:	9000      	str	r0, [sp, #0]
    405a:	9101      	str	r1, [sp, #4]
    405c:	9800      	ldr	r0, [sp, #0]
    405e:	9901      	ldr	r1, [sp, #4]
    4060:	0022      	movs	r2, r4
    4062:	002b      	movs	r3, r5
    4064:	f001 fca2 	bl	59ac <__aeabi_dsub>
    4068:	4642      	mov	r2, r8
    406a:	004b      	lsls	r3, r1, #1
    406c:	085b      	lsrs	r3, r3, #1
    406e:	07d6      	lsls	r6, r2, #31
    4070:	4333      	orrs	r3, r6
    4072:	0004      	movs	r4, r0
    4074:	001d      	movs	r5, r3
    4076:	e7a7      	b.n	3fc8 <rint+0x7c>
    4078:	2780      	movs	r7, #128	; 0x80
    407a:	063f      	lsls	r7, r7, #24
    407c:	e789      	b.n	3f92 <rint+0x46>
    407e:	46c0      	nop			; (mov r8, r8)
    4080:	fffffc01 	.word	0xfffffc01
    4084:	000fffff 	.word	0x000fffff
    4088:	00006470 	.word	0x00006470
    408c:	fffffbed 	.word	0xfffffbed

00004090 <scalbn>:
    4090:	004b      	lsls	r3, r1, #1
    4092:	b570      	push	{r4, r5, r6, lr}
    4094:	0d5b      	lsrs	r3, r3, #21
    4096:	0014      	movs	r4, r2
    4098:	000a      	movs	r2, r1
    409a:	2b00      	cmp	r3, #0
    409c:	d11a      	bne.n	40d4 <scalbn+0x44>
    409e:	004b      	lsls	r3, r1, #1
    40a0:	085b      	lsrs	r3, r3, #1
    40a2:	4303      	orrs	r3, r0
    40a4:	d015      	beq.n	40d2 <scalbn+0x42>
    40a6:	2200      	movs	r2, #0
    40a8:	4b22      	ldr	r3, [pc, #136]	; (4134 <scalbn+0xa4>)
    40aa:	f001 fa05 	bl	54b8 <__aeabi_dmul>
    40ae:	4b22      	ldr	r3, [pc, #136]	; (4138 <scalbn+0xa8>)
    40b0:	000a      	movs	r2, r1
    40b2:	429c      	cmp	r4, r3
    40b4:	db22      	blt.n	40fc <scalbn+0x6c>
    40b6:	004b      	lsls	r3, r1, #1
    40b8:	0d5b      	lsrs	r3, r3, #21
    40ba:	3b36      	subs	r3, #54	; 0x36
    40bc:	4d1f      	ldr	r5, [pc, #124]	; (413c <scalbn+0xac>)
    40be:	18e3      	adds	r3, r4, r3
    40c0:	42ab      	cmp	r3, r5
    40c2:	dc20      	bgt.n	4106 <scalbn+0x76>
    40c4:	2b00      	cmp	r3, #0
    40c6:	dd0d      	ble.n	40e4 <scalbn+0x54>
    40c8:	4c1d      	ldr	r4, [pc, #116]	; (4140 <scalbn+0xb0>)
    40ca:	051b      	lsls	r3, r3, #20
    40cc:	4022      	ands	r2, r4
    40ce:	431a      	orrs	r2, r3
    40d0:	0011      	movs	r1, r2
    40d2:	bd70      	pop	{r4, r5, r6, pc}
    40d4:	4d1b      	ldr	r5, [pc, #108]	; (4144 <scalbn+0xb4>)
    40d6:	42ab      	cmp	r3, r5
    40d8:	d1f0      	bne.n	40bc <scalbn+0x2c>
    40da:	0002      	movs	r2, r0
    40dc:	000b      	movs	r3, r1
    40de:	f000 fa9b 	bl	4618 <__aeabi_dadd>
    40e2:	e7f6      	b.n	40d2 <scalbn+0x42>
    40e4:	001d      	movs	r5, r3
    40e6:	3535      	adds	r5, #53	; 0x35
    40e8:	da18      	bge.n	411c <scalbn+0x8c>
    40ea:	4b17      	ldr	r3, [pc, #92]	; (4148 <scalbn+0xb8>)
    40ec:	0002      	movs	r2, r0
    40ee:	429c      	cmp	r4, r3
    40f0:	dc0a      	bgt.n	4108 <scalbn+0x78>
    40f2:	000b      	movs	r3, r1
    40f4:	4815      	ldr	r0, [pc, #84]	; (414c <scalbn+0xbc>)
    40f6:	4916      	ldr	r1, [pc, #88]	; (4150 <scalbn+0xc0>)
    40f8:	f000 f832 	bl	4160 <copysign>
    40fc:	4a13      	ldr	r2, [pc, #76]	; (414c <scalbn+0xbc>)
    40fe:	4b14      	ldr	r3, [pc, #80]	; (4150 <scalbn+0xc0>)
    4100:	f001 f9da 	bl	54b8 <__aeabi_dmul>
    4104:	e7e5      	b.n	40d2 <scalbn+0x42>
    4106:	0002      	movs	r2, r0
    4108:	000b      	movs	r3, r1
    410a:	4812      	ldr	r0, [pc, #72]	; (4154 <scalbn+0xc4>)
    410c:	4912      	ldr	r1, [pc, #72]	; (4158 <scalbn+0xc8>)
    410e:	f000 f827 	bl	4160 <copysign>
    4112:	4a10      	ldr	r2, [pc, #64]	; (4154 <scalbn+0xc4>)
    4114:	4b10      	ldr	r3, [pc, #64]	; (4158 <scalbn+0xc8>)
    4116:	f001 f9cf 	bl	54b8 <__aeabi_dmul>
    411a:	e7da      	b.n	40d2 <scalbn+0x42>
    411c:	4c08      	ldr	r4, [pc, #32]	; (4140 <scalbn+0xb0>)
    411e:	3336      	adds	r3, #54	; 0x36
    4120:	4022      	ands	r2, r4
    4122:	051b      	lsls	r3, r3, #20
    4124:	4313      	orrs	r3, r2
    4126:	0019      	movs	r1, r3
    4128:	2200      	movs	r2, #0
    412a:	4b0c      	ldr	r3, [pc, #48]	; (415c <scalbn+0xcc>)
    412c:	f001 f9c4 	bl	54b8 <__aeabi_dmul>
    4130:	e7cf      	b.n	40d2 <scalbn+0x42>
    4132:	46c0      	nop			; (mov r8, r8)
    4134:	43500000 	.word	0x43500000
    4138:	ffff3cb0 	.word	0xffff3cb0
    413c:	000007fe 	.word	0x000007fe
    4140:	800fffff 	.word	0x800fffff
    4144:	000007ff 	.word	0x000007ff
    4148:	0000c350 	.word	0x0000c350
    414c:	c2f8f359 	.word	0xc2f8f359
    4150:	01a56e1f 	.word	0x01a56e1f
    4154:	8800759c 	.word	0x8800759c
    4158:	7e37e43c 	.word	0x7e37e43c
    415c:	3c900000 	.word	0x3c900000

00004160 <copysign>:
    4160:	b530      	push	{r4, r5, lr}
    4162:	004a      	lsls	r2, r1, #1
    4164:	0fdb      	lsrs	r3, r3, #31
    4166:	07db      	lsls	r3, r3, #31
    4168:	0852      	lsrs	r2, r2, #1
    416a:	431a      	orrs	r2, r3
    416c:	0011      	movs	r1, r2
    416e:	bd30      	pop	{r4, r5, pc}

00004170 <__gnu_thumb1_case_uqi>:
    4170:	b402      	push	{r1}
    4172:	4671      	mov	r1, lr
    4174:	0849      	lsrs	r1, r1, #1
    4176:	0049      	lsls	r1, r1, #1
    4178:	5c09      	ldrb	r1, [r1, r0]
    417a:	0049      	lsls	r1, r1, #1
    417c:	448e      	add	lr, r1
    417e:	bc02      	pop	{r1}
    4180:	4770      	bx	lr
    4182:	46c0      	nop			; (mov r8, r8)

00004184 <__aeabi_uidiv>:
    4184:	2200      	movs	r2, #0
    4186:	0843      	lsrs	r3, r0, #1
    4188:	428b      	cmp	r3, r1
    418a:	d374      	bcc.n	4276 <__aeabi_uidiv+0xf2>
    418c:	0903      	lsrs	r3, r0, #4
    418e:	428b      	cmp	r3, r1
    4190:	d35f      	bcc.n	4252 <__aeabi_uidiv+0xce>
    4192:	0a03      	lsrs	r3, r0, #8
    4194:	428b      	cmp	r3, r1
    4196:	d344      	bcc.n	4222 <__aeabi_uidiv+0x9e>
    4198:	0b03      	lsrs	r3, r0, #12
    419a:	428b      	cmp	r3, r1
    419c:	d328      	bcc.n	41f0 <__aeabi_uidiv+0x6c>
    419e:	0c03      	lsrs	r3, r0, #16
    41a0:	428b      	cmp	r3, r1
    41a2:	d30d      	bcc.n	41c0 <__aeabi_uidiv+0x3c>
    41a4:	22ff      	movs	r2, #255	; 0xff
    41a6:	0209      	lsls	r1, r1, #8
    41a8:	ba12      	rev	r2, r2
    41aa:	0c03      	lsrs	r3, r0, #16
    41ac:	428b      	cmp	r3, r1
    41ae:	d302      	bcc.n	41b6 <__aeabi_uidiv+0x32>
    41b0:	1212      	asrs	r2, r2, #8
    41b2:	0209      	lsls	r1, r1, #8
    41b4:	d065      	beq.n	4282 <__aeabi_uidiv+0xfe>
    41b6:	0b03      	lsrs	r3, r0, #12
    41b8:	428b      	cmp	r3, r1
    41ba:	d319      	bcc.n	41f0 <__aeabi_uidiv+0x6c>
    41bc:	e000      	b.n	41c0 <__aeabi_uidiv+0x3c>
    41be:	0a09      	lsrs	r1, r1, #8
    41c0:	0bc3      	lsrs	r3, r0, #15
    41c2:	428b      	cmp	r3, r1
    41c4:	d301      	bcc.n	41ca <__aeabi_uidiv+0x46>
    41c6:	03cb      	lsls	r3, r1, #15
    41c8:	1ac0      	subs	r0, r0, r3
    41ca:	4152      	adcs	r2, r2
    41cc:	0b83      	lsrs	r3, r0, #14
    41ce:	428b      	cmp	r3, r1
    41d0:	d301      	bcc.n	41d6 <__aeabi_uidiv+0x52>
    41d2:	038b      	lsls	r3, r1, #14
    41d4:	1ac0      	subs	r0, r0, r3
    41d6:	4152      	adcs	r2, r2
    41d8:	0b43      	lsrs	r3, r0, #13
    41da:	428b      	cmp	r3, r1
    41dc:	d301      	bcc.n	41e2 <__aeabi_uidiv+0x5e>
    41de:	034b      	lsls	r3, r1, #13
    41e0:	1ac0      	subs	r0, r0, r3
    41e2:	4152      	adcs	r2, r2
    41e4:	0b03      	lsrs	r3, r0, #12
    41e6:	428b      	cmp	r3, r1
    41e8:	d301      	bcc.n	41ee <__aeabi_uidiv+0x6a>
    41ea:	030b      	lsls	r3, r1, #12
    41ec:	1ac0      	subs	r0, r0, r3
    41ee:	4152      	adcs	r2, r2
    41f0:	0ac3      	lsrs	r3, r0, #11
    41f2:	428b      	cmp	r3, r1
    41f4:	d301      	bcc.n	41fa <__aeabi_uidiv+0x76>
    41f6:	02cb      	lsls	r3, r1, #11
    41f8:	1ac0      	subs	r0, r0, r3
    41fa:	4152      	adcs	r2, r2
    41fc:	0a83      	lsrs	r3, r0, #10
    41fe:	428b      	cmp	r3, r1
    4200:	d301      	bcc.n	4206 <__aeabi_uidiv+0x82>
    4202:	028b      	lsls	r3, r1, #10
    4204:	1ac0      	subs	r0, r0, r3
    4206:	4152      	adcs	r2, r2
    4208:	0a43      	lsrs	r3, r0, #9
    420a:	428b      	cmp	r3, r1
    420c:	d301      	bcc.n	4212 <__aeabi_uidiv+0x8e>
    420e:	024b      	lsls	r3, r1, #9
    4210:	1ac0      	subs	r0, r0, r3
    4212:	4152      	adcs	r2, r2
    4214:	0a03      	lsrs	r3, r0, #8
    4216:	428b      	cmp	r3, r1
    4218:	d301      	bcc.n	421e <__aeabi_uidiv+0x9a>
    421a:	020b      	lsls	r3, r1, #8
    421c:	1ac0      	subs	r0, r0, r3
    421e:	4152      	adcs	r2, r2
    4220:	d2cd      	bcs.n	41be <__aeabi_uidiv+0x3a>
    4222:	09c3      	lsrs	r3, r0, #7
    4224:	428b      	cmp	r3, r1
    4226:	d301      	bcc.n	422c <__aeabi_uidiv+0xa8>
    4228:	01cb      	lsls	r3, r1, #7
    422a:	1ac0      	subs	r0, r0, r3
    422c:	4152      	adcs	r2, r2
    422e:	0983      	lsrs	r3, r0, #6
    4230:	428b      	cmp	r3, r1
    4232:	d301      	bcc.n	4238 <__aeabi_uidiv+0xb4>
    4234:	018b      	lsls	r3, r1, #6
    4236:	1ac0      	subs	r0, r0, r3
    4238:	4152      	adcs	r2, r2
    423a:	0943      	lsrs	r3, r0, #5
    423c:	428b      	cmp	r3, r1
    423e:	d301      	bcc.n	4244 <__aeabi_uidiv+0xc0>
    4240:	014b      	lsls	r3, r1, #5
    4242:	1ac0      	subs	r0, r0, r3
    4244:	4152      	adcs	r2, r2
    4246:	0903      	lsrs	r3, r0, #4
    4248:	428b      	cmp	r3, r1
    424a:	d301      	bcc.n	4250 <__aeabi_uidiv+0xcc>
    424c:	010b      	lsls	r3, r1, #4
    424e:	1ac0      	subs	r0, r0, r3
    4250:	4152      	adcs	r2, r2
    4252:	08c3      	lsrs	r3, r0, #3
    4254:	428b      	cmp	r3, r1
    4256:	d301      	bcc.n	425c <__aeabi_uidiv+0xd8>
    4258:	00cb      	lsls	r3, r1, #3
    425a:	1ac0      	subs	r0, r0, r3
    425c:	4152      	adcs	r2, r2
    425e:	0883      	lsrs	r3, r0, #2
    4260:	428b      	cmp	r3, r1
    4262:	d301      	bcc.n	4268 <__aeabi_uidiv+0xe4>
    4264:	008b      	lsls	r3, r1, #2
    4266:	1ac0      	subs	r0, r0, r3
    4268:	4152      	adcs	r2, r2
    426a:	0843      	lsrs	r3, r0, #1
    426c:	428b      	cmp	r3, r1
    426e:	d301      	bcc.n	4274 <__aeabi_uidiv+0xf0>
    4270:	004b      	lsls	r3, r1, #1
    4272:	1ac0      	subs	r0, r0, r3
    4274:	4152      	adcs	r2, r2
    4276:	1a41      	subs	r1, r0, r1
    4278:	d200      	bcs.n	427c <__aeabi_uidiv+0xf8>
    427a:	4601      	mov	r1, r0
    427c:	4152      	adcs	r2, r2
    427e:	4610      	mov	r0, r2
    4280:	4770      	bx	lr
    4282:	e7ff      	b.n	4284 <__aeabi_uidiv+0x100>
    4284:	b501      	push	{r0, lr}
    4286:	2000      	movs	r0, #0
    4288:	f000 f806 	bl	4298 <__aeabi_idiv0>
    428c:	bd02      	pop	{r1, pc}
    428e:	46c0      	nop			; (mov r8, r8)

00004290 <__aeabi_uidivmod>:
    4290:	2900      	cmp	r1, #0
    4292:	d0f7      	beq.n	4284 <__aeabi_uidiv+0x100>
    4294:	e776      	b.n	4184 <__aeabi_uidiv>
    4296:	4770      	bx	lr

00004298 <__aeabi_idiv0>:
    4298:	4770      	bx	lr
    429a:	46c0      	nop			; (mov r8, r8)

0000429c <__aeabi_cdrcmple>:
    429c:	4684      	mov	ip, r0
    429e:	1c10      	adds	r0, r2, #0
    42a0:	4662      	mov	r2, ip
    42a2:	468c      	mov	ip, r1
    42a4:	1c19      	adds	r1, r3, #0
    42a6:	4663      	mov	r3, ip
    42a8:	e000      	b.n	42ac <__aeabi_cdcmpeq>
    42aa:	46c0      	nop			; (mov r8, r8)

000042ac <__aeabi_cdcmpeq>:
    42ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    42ae:	f001 f899 	bl	53e4 <__ledf2>
    42b2:	2800      	cmp	r0, #0
    42b4:	d401      	bmi.n	42ba <__aeabi_cdcmpeq+0xe>
    42b6:	2100      	movs	r1, #0
    42b8:	42c8      	cmn	r0, r1
    42ba:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

000042bc <__aeabi_dcmpeq>:
    42bc:	b510      	push	{r4, lr}
    42be:	f000 ffed 	bl	529c <__eqdf2>
    42c2:	4240      	negs	r0, r0
    42c4:	3001      	adds	r0, #1
    42c6:	bd10      	pop	{r4, pc}

000042c8 <__aeabi_dcmplt>:
    42c8:	b510      	push	{r4, lr}
    42ca:	f001 f88b 	bl	53e4 <__ledf2>
    42ce:	2800      	cmp	r0, #0
    42d0:	db01      	blt.n	42d6 <__aeabi_dcmplt+0xe>
    42d2:	2000      	movs	r0, #0
    42d4:	bd10      	pop	{r4, pc}
    42d6:	2001      	movs	r0, #1
    42d8:	bd10      	pop	{r4, pc}
    42da:	46c0      	nop			; (mov r8, r8)

000042dc <__aeabi_dcmple>:
    42dc:	b510      	push	{r4, lr}
    42de:	f001 f881 	bl	53e4 <__ledf2>
    42e2:	2800      	cmp	r0, #0
    42e4:	dd01      	ble.n	42ea <__aeabi_dcmple+0xe>
    42e6:	2000      	movs	r0, #0
    42e8:	bd10      	pop	{r4, pc}
    42ea:	2001      	movs	r0, #1
    42ec:	bd10      	pop	{r4, pc}
    42ee:	46c0      	nop			; (mov r8, r8)

000042f0 <__aeabi_dcmpgt>:
    42f0:	b510      	push	{r4, lr}
    42f2:	f001 f813 	bl	531c <__gedf2>
    42f6:	2800      	cmp	r0, #0
    42f8:	dc01      	bgt.n	42fe <__aeabi_dcmpgt+0xe>
    42fa:	2000      	movs	r0, #0
    42fc:	bd10      	pop	{r4, pc}
    42fe:	2001      	movs	r0, #1
    4300:	bd10      	pop	{r4, pc}
    4302:	46c0      	nop			; (mov r8, r8)

00004304 <__aeabi_dcmpge>:
    4304:	b510      	push	{r4, lr}
    4306:	f001 f809 	bl	531c <__gedf2>
    430a:	2800      	cmp	r0, #0
    430c:	da01      	bge.n	4312 <__aeabi_dcmpge+0xe>
    430e:	2000      	movs	r0, #0
    4310:	bd10      	pop	{r4, pc}
    4312:	2001      	movs	r0, #1
    4314:	bd10      	pop	{r4, pc}
    4316:	46c0      	nop			; (mov r8, r8)

00004318 <__aeabi_lmul>:
    4318:	b5f0      	push	{r4, r5, r6, r7, lr}
    431a:	464f      	mov	r7, r9
    431c:	4646      	mov	r6, r8
    431e:	b4c0      	push	{r6, r7}
    4320:	0416      	lsls	r6, r2, #16
    4322:	0c36      	lsrs	r6, r6, #16
    4324:	4699      	mov	r9, r3
    4326:	0033      	movs	r3, r6
    4328:	0405      	lsls	r5, r0, #16
    432a:	0c2c      	lsrs	r4, r5, #16
    432c:	0c07      	lsrs	r7, r0, #16
    432e:	0c15      	lsrs	r5, r2, #16
    4330:	4363      	muls	r3, r4
    4332:	437e      	muls	r6, r7
    4334:	436f      	muls	r7, r5
    4336:	4365      	muls	r5, r4
    4338:	0c1c      	lsrs	r4, r3, #16
    433a:	19ad      	adds	r5, r5, r6
    433c:	1964      	adds	r4, r4, r5
    433e:	469c      	mov	ip, r3
    4340:	42a6      	cmp	r6, r4
    4342:	d903      	bls.n	434c <__aeabi_lmul+0x34>
    4344:	2380      	movs	r3, #128	; 0x80
    4346:	025b      	lsls	r3, r3, #9
    4348:	4698      	mov	r8, r3
    434a:	4447      	add	r7, r8
    434c:	4663      	mov	r3, ip
    434e:	0c25      	lsrs	r5, r4, #16
    4350:	19ef      	adds	r7, r5, r7
    4352:	041d      	lsls	r5, r3, #16
    4354:	464b      	mov	r3, r9
    4356:	434a      	muls	r2, r1
    4358:	4343      	muls	r3, r0
    435a:	0c2d      	lsrs	r5, r5, #16
    435c:	0424      	lsls	r4, r4, #16
    435e:	1964      	adds	r4, r4, r5
    4360:	1899      	adds	r1, r3, r2
    4362:	19c9      	adds	r1, r1, r7
    4364:	0020      	movs	r0, r4
    4366:	bc0c      	pop	{r2, r3}
    4368:	4690      	mov	r8, r2
    436a:	4699      	mov	r9, r3
    436c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    436e:	46c0      	nop			; (mov r8, r8)

00004370 <__aeabi_d2uiz>:
    4370:	b570      	push	{r4, r5, r6, lr}
    4372:	2200      	movs	r2, #0
    4374:	4b0c      	ldr	r3, [pc, #48]	; (43a8 <__aeabi_d2uiz+0x38>)
    4376:	0004      	movs	r4, r0
    4378:	000d      	movs	r5, r1
    437a:	f7ff ffc3 	bl	4304 <__aeabi_dcmpge>
    437e:	2800      	cmp	r0, #0
    4380:	d104      	bne.n	438c <__aeabi_d2uiz+0x1c>
    4382:	0020      	movs	r0, r4
    4384:	0029      	movs	r1, r5
    4386:	f001 fe85 	bl	6094 <__aeabi_d2iz>
    438a:	bd70      	pop	{r4, r5, r6, pc}
    438c:	4b06      	ldr	r3, [pc, #24]	; (43a8 <__aeabi_d2uiz+0x38>)
    438e:	2200      	movs	r2, #0
    4390:	0020      	movs	r0, r4
    4392:	0029      	movs	r1, r5
    4394:	f001 fb0a 	bl	59ac <__aeabi_dsub>
    4398:	f001 fe7c 	bl	6094 <__aeabi_d2iz>
    439c:	2380      	movs	r3, #128	; 0x80
    439e:	061b      	lsls	r3, r3, #24
    43a0:	469c      	mov	ip, r3
    43a2:	4460      	add	r0, ip
    43a4:	e7f1      	b.n	438a <__aeabi_d2uiz+0x1a>
    43a6:	46c0      	nop			; (mov r8, r8)
    43a8:	41e00000 	.word	0x41e00000

000043ac <__aeabi_fmul>:
    43ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    43ae:	4657      	mov	r7, sl
    43b0:	464e      	mov	r6, r9
    43b2:	4645      	mov	r5, r8
    43b4:	0043      	lsls	r3, r0, #1
    43b6:	b4e0      	push	{r5, r6, r7}
    43b8:	0246      	lsls	r6, r0, #9
    43ba:	4688      	mov	r8, r1
    43bc:	0a76      	lsrs	r6, r6, #9
    43be:	0e1f      	lsrs	r7, r3, #24
    43c0:	0fc4      	lsrs	r4, r0, #31
    43c2:	2f00      	cmp	r7, #0
    43c4:	d047      	beq.n	4456 <__aeabi_fmul+0xaa>
    43c6:	2fff      	cmp	r7, #255	; 0xff
    43c8:	d025      	beq.n	4416 <__aeabi_fmul+0x6a>
    43ca:	2300      	movs	r3, #0
    43cc:	2580      	movs	r5, #128	; 0x80
    43ce:	469a      	mov	sl, r3
    43d0:	4699      	mov	r9, r3
    43d2:	00f6      	lsls	r6, r6, #3
    43d4:	04ed      	lsls	r5, r5, #19
    43d6:	432e      	orrs	r6, r5
    43d8:	3f7f      	subs	r7, #127	; 0x7f
    43da:	4643      	mov	r3, r8
    43dc:	4642      	mov	r2, r8
    43de:	025d      	lsls	r5, r3, #9
    43e0:	0fd2      	lsrs	r2, r2, #31
    43e2:	005b      	lsls	r3, r3, #1
    43e4:	0a6d      	lsrs	r5, r5, #9
    43e6:	0e1b      	lsrs	r3, r3, #24
    43e8:	4690      	mov	r8, r2
    43ea:	d040      	beq.n	446e <__aeabi_fmul+0xc2>
    43ec:	2bff      	cmp	r3, #255	; 0xff
    43ee:	d039      	beq.n	4464 <__aeabi_fmul+0xb8>
    43f0:	2280      	movs	r2, #128	; 0x80
    43f2:	2000      	movs	r0, #0
    43f4:	00ed      	lsls	r5, r5, #3
    43f6:	04d2      	lsls	r2, r2, #19
    43f8:	4315      	orrs	r5, r2
    43fa:	3b7f      	subs	r3, #127	; 0x7f
    43fc:	18fb      	adds	r3, r7, r3
    43fe:	4642      	mov	r2, r8
    4400:	4657      	mov	r7, sl
    4402:	1c59      	adds	r1, r3, #1
    4404:	4062      	eors	r2, r4
    4406:	468c      	mov	ip, r1
    4408:	4307      	orrs	r7, r0
    440a:	2f0f      	cmp	r7, #15
    440c:	d85c      	bhi.n	44c8 <__aeabi_fmul+0x11c>
    440e:	496f      	ldr	r1, [pc, #444]	; (45cc <__aeabi_fmul+0x220>)
    4410:	00bf      	lsls	r7, r7, #2
    4412:	59c9      	ldr	r1, [r1, r7]
    4414:	468f      	mov	pc, r1
    4416:	2e00      	cmp	r6, #0
    4418:	d145      	bne.n	44a6 <__aeabi_fmul+0xfa>
    441a:	2308      	movs	r3, #8
    441c:	469a      	mov	sl, r3
    441e:	3b06      	subs	r3, #6
    4420:	4699      	mov	r9, r3
    4422:	e7da      	b.n	43da <__aeabi_fmul+0x2e>
    4424:	4642      	mov	r2, r8
    4426:	2802      	cmp	r0, #2
    4428:	d02d      	beq.n	4486 <__aeabi_fmul+0xda>
    442a:	2803      	cmp	r0, #3
    442c:	d100      	bne.n	4430 <__aeabi_fmul+0x84>
    442e:	e0c3      	b.n	45b8 <__aeabi_fmul+0x20c>
    4430:	2801      	cmp	r0, #1
    4432:	d000      	beq.n	4436 <__aeabi_fmul+0x8a>
    4434:	e0a2      	b.n	457c <__aeabi_fmul+0x1d0>
    4436:	2500      	movs	r5, #0
    4438:	2600      	movs	r6, #0
    443a:	4002      	ands	r2, r0
    443c:	b2d4      	uxtb	r4, r2
    443e:	0276      	lsls	r6, r6, #9
    4440:	05ed      	lsls	r5, r5, #23
    4442:	0a76      	lsrs	r6, r6, #9
    4444:	432e      	orrs	r6, r5
    4446:	07e4      	lsls	r4, r4, #31
    4448:	4326      	orrs	r6, r4
    444a:	0030      	movs	r0, r6
    444c:	bc1c      	pop	{r2, r3, r4}
    444e:	4690      	mov	r8, r2
    4450:	4699      	mov	r9, r3
    4452:	46a2      	mov	sl, r4
    4454:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4456:	2e00      	cmp	r6, #0
    4458:	d11a      	bne.n	4490 <__aeabi_fmul+0xe4>
    445a:	2304      	movs	r3, #4
    445c:	469a      	mov	sl, r3
    445e:	3b03      	subs	r3, #3
    4460:	4699      	mov	r9, r3
    4462:	e7ba      	b.n	43da <__aeabi_fmul+0x2e>
    4464:	002a      	movs	r2, r5
    4466:	1e51      	subs	r1, r2, #1
    4468:	418a      	sbcs	r2, r1
    446a:	1c90      	adds	r0, r2, #2
    446c:	e7c6      	b.n	43fc <__aeabi_fmul+0x50>
    446e:	2001      	movs	r0, #1
    4470:	2d00      	cmp	r5, #0
    4472:	d0c3      	beq.n	43fc <__aeabi_fmul+0x50>
    4474:	0028      	movs	r0, r5
    4476:	f001 ff9d 	bl	63b4 <__clzsi2>
    447a:	1f43      	subs	r3, r0, #5
    447c:	3076      	adds	r0, #118	; 0x76
    447e:	409d      	lsls	r5, r3
    4480:	4243      	negs	r3, r0
    4482:	2000      	movs	r0, #0
    4484:	e7ba      	b.n	43fc <__aeabi_fmul+0x50>
    4486:	2401      	movs	r4, #1
    4488:	25ff      	movs	r5, #255	; 0xff
    448a:	4014      	ands	r4, r2
    448c:	2600      	movs	r6, #0
    448e:	e7d6      	b.n	443e <__aeabi_fmul+0x92>
    4490:	0030      	movs	r0, r6
    4492:	f001 ff8f 	bl	63b4 <__clzsi2>
    4496:	1f43      	subs	r3, r0, #5
    4498:	409e      	lsls	r6, r3
    449a:	2300      	movs	r3, #0
    449c:	3076      	adds	r0, #118	; 0x76
    449e:	4247      	negs	r7, r0
    44a0:	469a      	mov	sl, r3
    44a2:	4699      	mov	r9, r3
    44a4:	e799      	b.n	43da <__aeabi_fmul+0x2e>
    44a6:	230c      	movs	r3, #12
    44a8:	469a      	mov	sl, r3
    44aa:	3b09      	subs	r3, #9
    44ac:	4699      	mov	r9, r3
    44ae:	e794      	b.n	43da <__aeabi_fmul+0x2e>
    44b0:	2680      	movs	r6, #128	; 0x80
    44b2:	2400      	movs	r4, #0
    44b4:	03f6      	lsls	r6, r6, #15
    44b6:	25ff      	movs	r5, #255	; 0xff
    44b8:	e7c1      	b.n	443e <__aeabi_fmul+0x92>
    44ba:	0035      	movs	r5, r6
    44bc:	4648      	mov	r0, r9
    44be:	e7b2      	b.n	4426 <__aeabi_fmul+0x7a>
    44c0:	0035      	movs	r5, r6
    44c2:	0022      	movs	r2, r4
    44c4:	4648      	mov	r0, r9
    44c6:	e7ae      	b.n	4426 <__aeabi_fmul+0x7a>
    44c8:	0429      	lsls	r1, r5, #16
    44ca:	0c09      	lsrs	r1, r1, #16
    44cc:	0008      	movs	r0, r1
    44ce:	0c37      	lsrs	r7, r6, #16
    44d0:	0436      	lsls	r6, r6, #16
    44d2:	0c36      	lsrs	r6, r6, #16
    44d4:	0c2c      	lsrs	r4, r5, #16
    44d6:	4379      	muls	r1, r7
    44d8:	4370      	muls	r0, r6
    44da:	4367      	muls	r7, r4
    44dc:	4374      	muls	r4, r6
    44de:	0c06      	lsrs	r6, r0, #16
    44e0:	1864      	adds	r4, r4, r1
    44e2:	1936      	adds	r6, r6, r4
    44e4:	42b1      	cmp	r1, r6
    44e6:	d903      	bls.n	44f0 <__aeabi_fmul+0x144>
    44e8:	2180      	movs	r1, #128	; 0x80
    44ea:	0249      	lsls	r1, r1, #9
    44ec:	4688      	mov	r8, r1
    44ee:	4447      	add	r7, r8
    44f0:	0400      	lsls	r0, r0, #16
    44f2:	0c00      	lsrs	r0, r0, #16
    44f4:	0431      	lsls	r1, r6, #16
    44f6:	1809      	adds	r1, r1, r0
    44f8:	018d      	lsls	r5, r1, #6
    44fa:	1e68      	subs	r0, r5, #1
    44fc:	4185      	sbcs	r5, r0
    44fe:	0e89      	lsrs	r1, r1, #26
    4500:	4329      	orrs	r1, r5
    4502:	0c35      	lsrs	r5, r6, #16
    4504:	19ed      	adds	r5, r5, r7
    4506:	01ad      	lsls	r5, r5, #6
    4508:	430d      	orrs	r5, r1
    450a:	0129      	lsls	r1, r5, #4
    450c:	d504      	bpl.n	4518 <__aeabi_fmul+0x16c>
    450e:	2301      	movs	r3, #1
    4510:	0869      	lsrs	r1, r5, #1
    4512:	401d      	ands	r5, r3
    4514:	4663      	mov	r3, ip
    4516:	430d      	orrs	r5, r1
    4518:	0019      	movs	r1, r3
    451a:	317f      	adds	r1, #127	; 0x7f
    451c:	2900      	cmp	r1, #0
    451e:	dd25      	ble.n	456c <__aeabi_fmul+0x1c0>
    4520:	0768      	lsls	r0, r5, #29
    4522:	d004      	beq.n	452e <__aeabi_fmul+0x182>
    4524:	200f      	movs	r0, #15
    4526:	4028      	ands	r0, r5
    4528:	2804      	cmp	r0, #4
    452a:	d000      	beq.n	452e <__aeabi_fmul+0x182>
    452c:	3504      	adds	r5, #4
    452e:	0128      	lsls	r0, r5, #4
    4530:	d503      	bpl.n	453a <__aeabi_fmul+0x18e>
    4532:	4927      	ldr	r1, [pc, #156]	; (45d0 <__aeabi_fmul+0x224>)
    4534:	3380      	adds	r3, #128	; 0x80
    4536:	400d      	ands	r5, r1
    4538:	0019      	movs	r1, r3
    453a:	29fe      	cmp	r1, #254	; 0xfe
    453c:	dca3      	bgt.n	4486 <__aeabi_fmul+0xda>
    453e:	2401      	movs	r4, #1
    4540:	01ad      	lsls	r5, r5, #6
    4542:	0a6e      	lsrs	r6, r5, #9
    4544:	4014      	ands	r4, r2
    4546:	b2cd      	uxtb	r5, r1
    4548:	e779      	b.n	443e <__aeabi_fmul+0x92>
    454a:	2080      	movs	r0, #128	; 0x80
    454c:	03c0      	lsls	r0, r0, #15
    454e:	4206      	tst	r6, r0
    4550:	d007      	beq.n	4562 <__aeabi_fmul+0x1b6>
    4552:	4205      	tst	r5, r0
    4554:	d105      	bne.n	4562 <__aeabi_fmul+0x1b6>
    4556:	4328      	orrs	r0, r5
    4558:	0246      	lsls	r6, r0, #9
    455a:	0a76      	lsrs	r6, r6, #9
    455c:	4644      	mov	r4, r8
    455e:	25ff      	movs	r5, #255	; 0xff
    4560:	e76d      	b.n	443e <__aeabi_fmul+0x92>
    4562:	4306      	orrs	r6, r0
    4564:	0276      	lsls	r6, r6, #9
    4566:	0a76      	lsrs	r6, r6, #9
    4568:	25ff      	movs	r5, #255	; 0xff
    456a:	e768      	b.n	443e <__aeabi_fmul+0x92>
    456c:	2401      	movs	r4, #1
    456e:	1a61      	subs	r1, r4, r1
    4570:	291b      	cmp	r1, #27
    4572:	dd05      	ble.n	4580 <__aeabi_fmul+0x1d4>
    4574:	4014      	ands	r4, r2
    4576:	2500      	movs	r5, #0
    4578:	2600      	movs	r6, #0
    457a:	e760      	b.n	443e <__aeabi_fmul+0x92>
    457c:	4663      	mov	r3, ip
    457e:	e7cb      	b.n	4518 <__aeabi_fmul+0x16c>
    4580:	002e      	movs	r6, r5
    4582:	2320      	movs	r3, #32
    4584:	40ce      	lsrs	r6, r1
    4586:	1a59      	subs	r1, r3, r1
    4588:	408d      	lsls	r5, r1
    458a:	1e6b      	subs	r3, r5, #1
    458c:	419d      	sbcs	r5, r3
    458e:	432e      	orrs	r6, r5
    4590:	0773      	lsls	r3, r6, #29
    4592:	d004      	beq.n	459e <__aeabi_fmul+0x1f2>
    4594:	230f      	movs	r3, #15
    4596:	4033      	ands	r3, r6
    4598:	2b04      	cmp	r3, #4
    459a:	d000      	beq.n	459e <__aeabi_fmul+0x1f2>
    459c:	3604      	adds	r6, #4
    459e:	0173      	lsls	r3, r6, #5
    45a0:	d504      	bpl.n	45ac <__aeabi_fmul+0x200>
    45a2:	2401      	movs	r4, #1
    45a4:	2501      	movs	r5, #1
    45a6:	4014      	ands	r4, r2
    45a8:	2600      	movs	r6, #0
    45aa:	e748      	b.n	443e <__aeabi_fmul+0x92>
    45ac:	2401      	movs	r4, #1
    45ae:	01b6      	lsls	r6, r6, #6
    45b0:	0a76      	lsrs	r6, r6, #9
    45b2:	4014      	ands	r4, r2
    45b4:	2500      	movs	r5, #0
    45b6:	e742      	b.n	443e <__aeabi_fmul+0x92>
    45b8:	2680      	movs	r6, #128	; 0x80
    45ba:	2401      	movs	r4, #1
    45bc:	03f6      	lsls	r6, r6, #15
    45be:	432e      	orrs	r6, r5
    45c0:	0276      	lsls	r6, r6, #9
    45c2:	0a76      	lsrs	r6, r6, #9
    45c4:	4014      	ands	r4, r2
    45c6:	25ff      	movs	r5, #255	; 0xff
    45c8:	e739      	b.n	443e <__aeabi_fmul+0x92>
    45ca:	46c0      	nop			; (mov r8, r8)
    45cc:	00006480 	.word	0x00006480
    45d0:	f7ffffff 	.word	0xf7ffffff

000045d4 <__aeabi_f2iz>:
    45d4:	0243      	lsls	r3, r0, #9
    45d6:	0a59      	lsrs	r1, r3, #9
    45d8:	0043      	lsls	r3, r0, #1
    45da:	0fc2      	lsrs	r2, r0, #31
    45dc:	0e1b      	lsrs	r3, r3, #24
    45de:	2000      	movs	r0, #0
    45e0:	2b7e      	cmp	r3, #126	; 0x7e
    45e2:	dd0e      	ble.n	4602 <__aeabi_f2iz+0x2e>
    45e4:	2b9d      	cmp	r3, #157	; 0x9d
    45e6:	dc0d      	bgt.n	4604 <__aeabi_f2iz+0x30>
    45e8:	2080      	movs	r0, #128	; 0x80
    45ea:	0400      	lsls	r0, r0, #16
    45ec:	4301      	orrs	r1, r0
    45ee:	2b95      	cmp	r3, #149	; 0x95
    45f0:	dc0b      	bgt.n	460a <__aeabi_f2iz+0x36>
    45f2:	2096      	movs	r0, #150	; 0x96
    45f4:	1ac3      	subs	r3, r0, r3
    45f6:	40d9      	lsrs	r1, r3
    45f8:	000b      	movs	r3, r1
    45fa:	4258      	negs	r0, r3
    45fc:	2a00      	cmp	r2, #0
    45fe:	d100      	bne.n	4602 <__aeabi_f2iz+0x2e>
    4600:	0018      	movs	r0, r3
    4602:	4770      	bx	lr
    4604:	4b03      	ldr	r3, [pc, #12]	; (4614 <__aeabi_f2iz+0x40>)
    4606:	18d0      	adds	r0, r2, r3
    4608:	e7fb      	b.n	4602 <__aeabi_f2iz+0x2e>
    460a:	3b96      	subs	r3, #150	; 0x96
    460c:	4099      	lsls	r1, r3
    460e:	000b      	movs	r3, r1
    4610:	e7f3      	b.n	45fa <__aeabi_f2iz+0x26>
    4612:	46c0      	nop			; (mov r8, r8)
    4614:	7fffffff 	.word	0x7fffffff

00004618 <__aeabi_dadd>:
    4618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    461a:	4656      	mov	r6, sl
    461c:	465f      	mov	r7, fp
    461e:	464d      	mov	r5, r9
    4620:	4644      	mov	r4, r8
    4622:	b4f0      	push	{r4, r5, r6, r7}
    4624:	000f      	movs	r7, r1
    4626:	0ffd      	lsrs	r5, r7, #31
    4628:	46aa      	mov	sl, r5
    462a:	0309      	lsls	r1, r1, #12
    462c:	007c      	lsls	r4, r7, #1
    462e:	002e      	movs	r6, r5
    4630:	005f      	lsls	r7, r3, #1
    4632:	0f45      	lsrs	r5, r0, #29
    4634:	0a49      	lsrs	r1, r1, #9
    4636:	0d7f      	lsrs	r7, r7, #21
    4638:	4329      	orrs	r1, r5
    463a:	00c5      	lsls	r5, r0, #3
    463c:	0318      	lsls	r0, r3, #12
    463e:	46bc      	mov	ip, r7
    4640:	0a40      	lsrs	r0, r0, #9
    4642:	0f57      	lsrs	r7, r2, #29
    4644:	0d64      	lsrs	r4, r4, #21
    4646:	0fdb      	lsrs	r3, r3, #31
    4648:	4338      	orrs	r0, r7
    464a:	00d2      	lsls	r2, r2, #3
    464c:	459a      	cmp	sl, r3
    464e:	d100      	bne.n	4652 <__aeabi_dadd+0x3a>
    4650:	e0aa      	b.n	47a8 <__aeabi_dadd+0x190>
    4652:	4666      	mov	r6, ip
    4654:	1ba6      	subs	r6, r4, r6
    4656:	2e00      	cmp	r6, #0
    4658:	dc00      	bgt.n	465c <__aeabi_dadd+0x44>
    465a:	e0ff      	b.n	485c <__aeabi_dadd+0x244>
    465c:	4663      	mov	r3, ip
    465e:	2b00      	cmp	r3, #0
    4660:	d139      	bne.n	46d6 <__aeabi_dadd+0xbe>
    4662:	0003      	movs	r3, r0
    4664:	4313      	orrs	r3, r2
    4666:	d000      	beq.n	466a <__aeabi_dadd+0x52>
    4668:	e0d9      	b.n	481e <__aeabi_dadd+0x206>
    466a:	076b      	lsls	r3, r5, #29
    466c:	d009      	beq.n	4682 <__aeabi_dadd+0x6a>
    466e:	230f      	movs	r3, #15
    4670:	402b      	ands	r3, r5
    4672:	2b04      	cmp	r3, #4
    4674:	d005      	beq.n	4682 <__aeabi_dadd+0x6a>
    4676:	1d2b      	adds	r3, r5, #4
    4678:	42ab      	cmp	r3, r5
    467a:	41ad      	sbcs	r5, r5
    467c:	426d      	negs	r5, r5
    467e:	1949      	adds	r1, r1, r5
    4680:	001d      	movs	r5, r3
    4682:	020b      	lsls	r3, r1, #8
    4684:	d400      	bmi.n	4688 <__aeabi_dadd+0x70>
    4686:	e082      	b.n	478e <__aeabi_dadd+0x176>
    4688:	4bca      	ldr	r3, [pc, #808]	; (49b4 <__aeabi_dadd+0x39c>)
    468a:	3401      	adds	r4, #1
    468c:	429c      	cmp	r4, r3
    468e:	d100      	bne.n	4692 <__aeabi_dadd+0x7a>
    4690:	e0fe      	b.n	4890 <__aeabi_dadd+0x278>
    4692:	000a      	movs	r2, r1
    4694:	4656      	mov	r6, sl
    4696:	4bc8      	ldr	r3, [pc, #800]	; (49b8 <__aeabi_dadd+0x3a0>)
    4698:	08ed      	lsrs	r5, r5, #3
    469a:	401a      	ands	r2, r3
    469c:	0750      	lsls	r0, r2, #29
    469e:	0564      	lsls	r4, r4, #21
    46a0:	0252      	lsls	r2, r2, #9
    46a2:	4305      	orrs	r5, r0
    46a4:	0b12      	lsrs	r2, r2, #12
    46a6:	0d64      	lsrs	r4, r4, #21
    46a8:	2100      	movs	r1, #0
    46aa:	0312      	lsls	r2, r2, #12
    46ac:	0d0b      	lsrs	r3, r1, #20
    46ae:	051b      	lsls	r3, r3, #20
    46b0:	0564      	lsls	r4, r4, #21
    46b2:	0b12      	lsrs	r2, r2, #12
    46b4:	431a      	orrs	r2, r3
    46b6:	0863      	lsrs	r3, r4, #1
    46b8:	4cc0      	ldr	r4, [pc, #768]	; (49bc <__aeabi_dadd+0x3a4>)
    46ba:	07f6      	lsls	r6, r6, #31
    46bc:	4014      	ands	r4, r2
    46be:	431c      	orrs	r4, r3
    46c0:	0064      	lsls	r4, r4, #1
    46c2:	0864      	lsrs	r4, r4, #1
    46c4:	4334      	orrs	r4, r6
    46c6:	0028      	movs	r0, r5
    46c8:	0021      	movs	r1, r4
    46ca:	bc3c      	pop	{r2, r3, r4, r5}
    46cc:	4690      	mov	r8, r2
    46ce:	4699      	mov	r9, r3
    46d0:	46a2      	mov	sl, r4
    46d2:	46ab      	mov	fp, r5
    46d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    46d6:	4bb7      	ldr	r3, [pc, #732]	; (49b4 <__aeabi_dadd+0x39c>)
    46d8:	429c      	cmp	r4, r3
    46da:	d0c6      	beq.n	466a <__aeabi_dadd+0x52>
    46dc:	2380      	movs	r3, #128	; 0x80
    46de:	041b      	lsls	r3, r3, #16
    46e0:	4318      	orrs	r0, r3
    46e2:	2e38      	cmp	r6, #56	; 0x38
    46e4:	dd00      	ble.n	46e8 <__aeabi_dadd+0xd0>
    46e6:	e0eb      	b.n	48c0 <__aeabi_dadd+0x2a8>
    46e8:	2e1f      	cmp	r6, #31
    46ea:	dd00      	ble.n	46ee <__aeabi_dadd+0xd6>
    46ec:	e11e      	b.n	492c <__aeabi_dadd+0x314>
    46ee:	2320      	movs	r3, #32
    46f0:	1b9b      	subs	r3, r3, r6
    46f2:	469c      	mov	ip, r3
    46f4:	0003      	movs	r3, r0
    46f6:	4667      	mov	r7, ip
    46f8:	40bb      	lsls	r3, r7
    46fa:	4698      	mov	r8, r3
    46fc:	0013      	movs	r3, r2
    46fe:	4647      	mov	r7, r8
    4700:	40f3      	lsrs	r3, r6
    4702:	433b      	orrs	r3, r7
    4704:	4667      	mov	r7, ip
    4706:	40ba      	lsls	r2, r7
    4708:	1e57      	subs	r7, r2, #1
    470a:	41ba      	sbcs	r2, r7
    470c:	4313      	orrs	r3, r2
    470e:	0002      	movs	r2, r0
    4710:	40f2      	lsrs	r2, r6
    4712:	1aeb      	subs	r3, r5, r3
    4714:	429d      	cmp	r5, r3
    4716:	41b6      	sbcs	r6, r6
    4718:	001d      	movs	r5, r3
    471a:	1a8a      	subs	r2, r1, r2
    471c:	4276      	negs	r6, r6
    471e:	1b91      	subs	r1, r2, r6
    4720:	020b      	lsls	r3, r1, #8
    4722:	d531      	bpl.n	4788 <__aeabi_dadd+0x170>
    4724:	024a      	lsls	r2, r1, #9
    4726:	0a56      	lsrs	r6, r2, #9
    4728:	2e00      	cmp	r6, #0
    472a:	d100      	bne.n	472e <__aeabi_dadd+0x116>
    472c:	e0b4      	b.n	4898 <__aeabi_dadd+0x280>
    472e:	0030      	movs	r0, r6
    4730:	f001 fe40 	bl	63b4 <__clzsi2>
    4734:	0003      	movs	r3, r0
    4736:	3b08      	subs	r3, #8
    4738:	2b1f      	cmp	r3, #31
    473a:	dd00      	ble.n	473e <__aeabi_dadd+0x126>
    473c:	e0b5      	b.n	48aa <__aeabi_dadd+0x292>
    473e:	2220      	movs	r2, #32
    4740:	0029      	movs	r1, r5
    4742:	1ad2      	subs	r2, r2, r3
    4744:	40d1      	lsrs	r1, r2
    4746:	409e      	lsls	r6, r3
    4748:	000a      	movs	r2, r1
    474a:	409d      	lsls	r5, r3
    474c:	4332      	orrs	r2, r6
    474e:	429c      	cmp	r4, r3
    4750:	dd00      	ble.n	4754 <__aeabi_dadd+0x13c>
    4752:	e0b1      	b.n	48b8 <__aeabi_dadd+0x2a0>
    4754:	1b1c      	subs	r4, r3, r4
    4756:	1c63      	adds	r3, r4, #1
    4758:	2b1f      	cmp	r3, #31
    475a:	dd00      	ble.n	475e <__aeabi_dadd+0x146>
    475c:	e0d5      	b.n	490a <__aeabi_dadd+0x2f2>
    475e:	2120      	movs	r1, #32
    4760:	0014      	movs	r4, r2
    4762:	0028      	movs	r0, r5
    4764:	1ac9      	subs	r1, r1, r3
    4766:	408c      	lsls	r4, r1
    4768:	40d8      	lsrs	r0, r3
    476a:	408d      	lsls	r5, r1
    476c:	4304      	orrs	r4, r0
    476e:	40da      	lsrs	r2, r3
    4770:	1e68      	subs	r0, r5, #1
    4772:	4185      	sbcs	r5, r0
    4774:	0011      	movs	r1, r2
    4776:	4325      	orrs	r5, r4
    4778:	2400      	movs	r4, #0
    477a:	e776      	b.n	466a <__aeabi_dadd+0x52>
    477c:	4641      	mov	r1, r8
    477e:	4331      	orrs	r1, r6
    4780:	d100      	bne.n	4784 <__aeabi_dadd+0x16c>
    4782:	e234      	b.n	4bee <__aeabi_dadd+0x5d6>
    4784:	0031      	movs	r1, r6
    4786:	4645      	mov	r5, r8
    4788:	076b      	lsls	r3, r5, #29
    478a:	d000      	beq.n	478e <__aeabi_dadd+0x176>
    478c:	e76f      	b.n	466e <__aeabi_dadd+0x56>
    478e:	4656      	mov	r6, sl
    4790:	0748      	lsls	r0, r1, #29
    4792:	08ed      	lsrs	r5, r5, #3
    4794:	08c9      	lsrs	r1, r1, #3
    4796:	4305      	orrs	r5, r0
    4798:	4b86      	ldr	r3, [pc, #536]	; (49b4 <__aeabi_dadd+0x39c>)
    479a:	429c      	cmp	r4, r3
    479c:	d035      	beq.n	480a <__aeabi_dadd+0x1f2>
    479e:	030a      	lsls	r2, r1, #12
    47a0:	0564      	lsls	r4, r4, #21
    47a2:	0b12      	lsrs	r2, r2, #12
    47a4:	0d64      	lsrs	r4, r4, #21
    47a6:	e77f      	b.n	46a8 <__aeabi_dadd+0x90>
    47a8:	4663      	mov	r3, ip
    47aa:	1ae3      	subs	r3, r4, r3
    47ac:	469b      	mov	fp, r3
    47ae:	2b00      	cmp	r3, #0
    47b0:	dc00      	bgt.n	47b4 <__aeabi_dadd+0x19c>
    47b2:	e08b      	b.n	48cc <__aeabi_dadd+0x2b4>
    47b4:	4667      	mov	r7, ip
    47b6:	2f00      	cmp	r7, #0
    47b8:	d03c      	beq.n	4834 <__aeabi_dadd+0x21c>
    47ba:	4f7e      	ldr	r7, [pc, #504]	; (49b4 <__aeabi_dadd+0x39c>)
    47bc:	42bc      	cmp	r4, r7
    47be:	d100      	bne.n	47c2 <__aeabi_dadd+0x1aa>
    47c0:	e753      	b.n	466a <__aeabi_dadd+0x52>
    47c2:	2780      	movs	r7, #128	; 0x80
    47c4:	043f      	lsls	r7, r7, #16
    47c6:	4338      	orrs	r0, r7
    47c8:	465b      	mov	r3, fp
    47ca:	2b38      	cmp	r3, #56	; 0x38
    47cc:	dc00      	bgt.n	47d0 <__aeabi_dadd+0x1b8>
    47ce:	e0f7      	b.n	49c0 <__aeabi_dadd+0x3a8>
    47d0:	4302      	orrs	r2, r0
    47d2:	1e50      	subs	r0, r2, #1
    47d4:	4182      	sbcs	r2, r0
    47d6:	2000      	movs	r0, #0
    47d8:	b2d2      	uxtb	r2, r2
    47da:	1953      	adds	r3, r2, r5
    47dc:	1842      	adds	r2, r0, r1
    47de:	42ab      	cmp	r3, r5
    47e0:	4189      	sbcs	r1, r1
    47e2:	001d      	movs	r5, r3
    47e4:	4249      	negs	r1, r1
    47e6:	1889      	adds	r1, r1, r2
    47e8:	020b      	lsls	r3, r1, #8
    47ea:	d5cd      	bpl.n	4788 <__aeabi_dadd+0x170>
    47ec:	4b71      	ldr	r3, [pc, #452]	; (49b4 <__aeabi_dadd+0x39c>)
    47ee:	3401      	adds	r4, #1
    47f0:	429c      	cmp	r4, r3
    47f2:	d100      	bne.n	47f6 <__aeabi_dadd+0x1de>
    47f4:	e13d      	b.n	4a72 <__aeabi_dadd+0x45a>
    47f6:	2001      	movs	r0, #1
    47f8:	4a6f      	ldr	r2, [pc, #444]	; (49b8 <__aeabi_dadd+0x3a0>)
    47fa:	086b      	lsrs	r3, r5, #1
    47fc:	400a      	ands	r2, r1
    47fe:	4028      	ands	r0, r5
    4800:	4318      	orrs	r0, r3
    4802:	07d5      	lsls	r5, r2, #31
    4804:	4305      	orrs	r5, r0
    4806:	0851      	lsrs	r1, r2, #1
    4808:	e72f      	b.n	466a <__aeabi_dadd+0x52>
    480a:	002b      	movs	r3, r5
    480c:	430b      	orrs	r3, r1
    480e:	d100      	bne.n	4812 <__aeabi_dadd+0x1fa>
    4810:	e1cb      	b.n	4baa <__aeabi_dadd+0x592>
    4812:	2380      	movs	r3, #128	; 0x80
    4814:	031b      	lsls	r3, r3, #12
    4816:	430b      	orrs	r3, r1
    4818:	031a      	lsls	r2, r3, #12
    481a:	0b12      	lsrs	r2, r2, #12
    481c:	e744      	b.n	46a8 <__aeabi_dadd+0x90>
    481e:	3e01      	subs	r6, #1
    4820:	2e00      	cmp	r6, #0
    4822:	d16d      	bne.n	4900 <__aeabi_dadd+0x2e8>
    4824:	1aae      	subs	r6, r5, r2
    4826:	42b5      	cmp	r5, r6
    4828:	419b      	sbcs	r3, r3
    482a:	1a09      	subs	r1, r1, r0
    482c:	425b      	negs	r3, r3
    482e:	1ac9      	subs	r1, r1, r3
    4830:	0035      	movs	r5, r6
    4832:	e775      	b.n	4720 <__aeabi_dadd+0x108>
    4834:	0007      	movs	r7, r0
    4836:	4317      	orrs	r7, r2
    4838:	d100      	bne.n	483c <__aeabi_dadd+0x224>
    483a:	e716      	b.n	466a <__aeabi_dadd+0x52>
    483c:	2301      	movs	r3, #1
    483e:	425b      	negs	r3, r3
    4840:	469c      	mov	ip, r3
    4842:	44e3      	add	fp, ip
    4844:	465b      	mov	r3, fp
    4846:	2b00      	cmp	r3, #0
    4848:	d000      	beq.n	484c <__aeabi_dadd+0x234>
    484a:	e0e0      	b.n	4a0e <__aeabi_dadd+0x3f6>
    484c:	18aa      	adds	r2, r5, r2
    484e:	42aa      	cmp	r2, r5
    4850:	419b      	sbcs	r3, r3
    4852:	1809      	adds	r1, r1, r0
    4854:	425b      	negs	r3, r3
    4856:	1859      	adds	r1, r3, r1
    4858:	0015      	movs	r5, r2
    485a:	e7c5      	b.n	47e8 <__aeabi_dadd+0x1d0>
    485c:	2e00      	cmp	r6, #0
    485e:	d175      	bne.n	494c <__aeabi_dadd+0x334>
    4860:	1c66      	adds	r6, r4, #1
    4862:	0576      	lsls	r6, r6, #21
    4864:	0d76      	lsrs	r6, r6, #21
    4866:	2e01      	cmp	r6, #1
    4868:	dc00      	bgt.n	486c <__aeabi_dadd+0x254>
    486a:	e0f3      	b.n	4a54 <__aeabi_dadd+0x43c>
    486c:	1aae      	subs	r6, r5, r2
    486e:	46b0      	mov	r8, r6
    4870:	4545      	cmp	r5, r8
    4872:	41bf      	sbcs	r7, r7
    4874:	1a0e      	subs	r6, r1, r0
    4876:	427f      	negs	r7, r7
    4878:	1bf6      	subs	r6, r6, r7
    487a:	0237      	lsls	r7, r6, #8
    487c:	d400      	bmi.n	4880 <__aeabi_dadd+0x268>
    487e:	e08f      	b.n	49a0 <__aeabi_dadd+0x388>
    4880:	1b55      	subs	r5, r2, r5
    4882:	42aa      	cmp	r2, r5
    4884:	41b6      	sbcs	r6, r6
    4886:	1a41      	subs	r1, r0, r1
    4888:	4276      	negs	r6, r6
    488a:	1b8e      	subs	r6, r1, r6
    488c:	469a      	mov	sl, r3
    488e:	e74b      	b.n	4728 <__aeabi_dadd+0x110>
    4890:	4656      	mov	r6, sl
    4892:	2200      	movs	r2, #0
    4894:	2500      	movs	r5, #0
    4896:	e707      	b.n	46a8 <__aeabi_dadd+0x90>
    4898:	0028      	movs	r0, r5
    489a:	f001 fd8b 	bl	63b4 <__clzsi2>
    489e:	3020      	adds	r0, #32
    48a0:	0003      	movs	r3, r0
    48a2:	3b08      	subs	r3, #8
    48a4:	2b1f      	cmp	r3, #31
    48a6:	dc00      	bgt.n	48aa <__aeabi_dadd+0x292>
    48a8:	e749      	b.n	473e <__aeabi_dadd+0x126>
    48aa:	002a      	movs	r2, r5
    48ac:	3828      	subs	r0, #40	; 0x28
    48ae:	4082      	lsls	r2, r0
    48b0:	2500      	movs	r5, #0
    48b2:	429c      	cmp	r4, r3
    48b4:	dc00      	bgt.n	48b8 <__aeabi_dadd+0x2a0>
    48b6:	e74d      	b.n	4754 <__aeabi_dadd+0x13c>
    48b8:	493f      	ldr	r1, [pc, #252]	; (49b8 <__aeabi_dadd+0x3a0>)
    48ba:	1ae4      	subs	r4, r4, r3
    48bc:	4011      	ands	r1, r2
    48be:	e6d4      	b.n	466a <__aeabi_dadd+0x52>
    48c0:	4302      	orrs	r2, r0
    48c2:	1e50      	subs	r0, r2, #1
    48c4:	4182      	sbcs	r2, r0
    48c6:	b2d3      	uxtb	r3, r2
    48c8:	2200      	movs	r2, #0
    48ca:	e722      	b.n	4712 <__aeabi_dadd+0xfa>
    48cc:	2b00      	cmp	r3, #0
    48ce:	d000      	beq.n	48d2 <__aeabi_dadd+0x2ba>
    48d0:	e0f3      	b.n	4aba <__aeabi_dadd+0x4a2>
    48d2:	1c63      	adds	r3, r4, #1
    48d4:	469c      	mov	ip, r3
    48d6:	055b      	lsls	r3, r3, #21
    48d8:	0d5b      	lsrs	r3, r3, #21
    48da:	2b01      	cmp	r3, #1
    48dc:	dc00      	bgt.n	48e0 <__aeabi_dadd+0x2c8>
    48de:	e09f      	b.n	4a20 <__aeabi_dadd+0x408>
    48e0:	4b34      	ldr	r3, [pc, #208]	; (49b4 <__aeabi_dadd+0x39c>)
    48e2:	459c      	cmp	ip, r3
    48e4:	d100      	bne.n	48e8 <__aeabi_dadd+0x2d0>
    48e6:	e0c3      	b.n	4a70 <__aeabi_dadd+0x458>
    48e8:	18aa      	adds	r2, r5, r2
    48ea:	1809      	adds	r1, r1, r0
    48ec:	42aa      	cmp	r2, r5
    48ee:	4180      	sbcs	r0, r0
    48f0:	4240      	negs	r0, r0
    48f2:	1841      	adds	r1, r0, r1
    48f4:	07cd      	lsls	r5, r1, #31
    48f6:	0852      	lsrs	r2, r2, #1
    48f8:	4315      	orrs	r5, r2
    48fa:	0849      	lsrs	r1, r1, #1
    48fc:	4664      	mov	r4, ip
    48fe:	e6b4      	b.n	466a <__aeabi_dadd+0x52>
    4900:	4b2c      	ldr	r3, [pc, #176]	; (49b4 <__aeabi_dadd+0x39c>)
    4902:	429c      	cmp	r4, r3
    4904:	d000      	beq.n	4908 <__aeabi_dadd+0x2f0>
    4906:	e6ec      	b.n	46e2 <__aeabi_dadd+0xca>
    4908:	e6af      	b.n	466a <__aeabi_dadd+0x52>
    490a:	0011      	movs	r1, r2
    490c:	3c1f      	subs	r4, #31
    490e:	40e1      	lsrs	r1, r4
    4910:	000c      	movs	r4, r1
    4912:	2b20      	cmp	r3, #32
    4914:	d100      	bne.n	4918 <__aeabi_dadd+0x300>
    4916:	e07f      	b.n	4a18 <__aeabi_dadd+0x400>
    4918:	2140      	movs	r1, #64	; 0x40
    491a:	1acb      	subs	r3, r1, r3
    491c:	409a      	lsls	r2, r3
    491e:	4315      	orrs	r5, r2
    4920:	1e6a      	subs	r2, r5, #1
    4922:	4195      	sbcs	r5, r2
    4924:	2100      	movs	r1, #0
    4926:	4325      	orrs	r5, r4
    4928:	2400      	movs	r4, #0
    492a:	e72d      	b.n	4788 <__aeabi_dadd+0x170>
    492c:	0033      	movs	r3, r6
    492e:	0007      	movs	r7, r0
    4930:	3b20      	subs	r3, #32
    4932:	40df      	lsrs	r7, r3
    4934:	003b      	movs	r3, r7
    4936:	2e20      	cmp	r6, #32
    4938:	d070      	beq.n	4a1c <__aeabi_dadd+0x404>
    493a:	2740      	movs	r7, #64	; 0x40
    493c:	1bbe      	subs	r6, r7, r6
    493e:	40b0      	lsls	r0, r6
    4940:	4302      	orrs	r2, r0
    4942:	1e50      	subs	r0, r2, #1
    4944:	4182      	sbcs	r2, r0
    4946:	4313      	orrs	r3, r2
    4948:	2200      	movs	r2, #0
    494a:	e6e2      	b.n	4712 <__aeabi_dadd+0xfa>
    494c:	2c00      	cmp	r4, #0
    494e:	d04f      	beq.n	49f0 <__aeabi_dadd+0x3d8>
    4950:	4c18      	ldr	r4, [pc, #96]	; (49b4 <__aeabi_dadd+0x39c>)
    4952:	45a4      	cmp	ip, r4
    4954:	d100      	bne.n	4958 <__aeabi_dadd+0x340>
    4956:	e0ab      	b.n	4ab0 <__aeabi_dadd+0x498>
    4958:	2480      	movs	r4, #128	; 0x80
    495a:	0424      	lsls	r4, r4, #16
    495c:	4276      	negs	r6, r6
    495e:	4321      	orrs	r1, r4
    4960:	2e38      	cmp	r6, #56	; 0x38
    4962:	dd00      	ble.n	4966 <__aeabi_dadd+0x34e>
    4964:	e0df      	b.n	4b26 <__aeabi_dadd+0x50e>
    4966:	2e1f      	cmp	r6, #31
    4968:	dd00      	ble.n	496c <__aeabi_dadd+0x354>
    496a:	e143      	b.n	4bf4 <__aeabi_dadd+0x5dc>
    496c:	2720      	movs	r7, #32
    496e:	1bbc      	subs	r4, r7, r6
    4970:	46a1      	mov	r9, r4
    4972:	000c      	movs	r4, r1
    4974:	464f      	mov	r7, r9
    4976:	40bc      	lsls	r4, r7
    4978:	46a0      	mov	r8, r4
    497a:	002c      	movs	r4, r5
    497c:	4647      	mov	r7, r8
    497e:	40f4      	lsrs	r4, r6
    4980:	433c      	orrs	r4, r7
    4982:	464f      	mov	r7, r9
    4984:	40bd      	lsls	r5, r7
    4986:	1e6f      	subs	r7, r5, #1
    4988:	41bd      	sbcs	r5, r7
    498a:	40f1      	lsrs	r1, r6
    498c:	432c      	orrs	r4, r5
    498e:	1b15      	subs	r5, r2, r4
    4990:	42aa      	cmp	r2, r5
    4992:	4192      	sbcs	r2, r2
    4994:	1a41      	subs	r1, r0, r1
    4996:	4252      	negs	r2, r2
    4998:	1a89      	subs	r1, r1, r2
    499a:	4664      	mov	r4, ip
    499c:	469a      	mov	sl, r3
    499e:	e6bf      	b.n	4720 <__aeabi_dadd+0x108>
    49a0:	4641      	mov	r1, r8
    49a2:	4645      	mov	r5, r8
    49a4:	4331      	orrs	r1, r6
    49a6:	d000      	beq.n	49aa <__aeabi_dadd+0x392>
    49a8:	e6be      	b.n	4728 <__aeabi_dadd+0x110>
    49aa:	2600      	movs	r6, #0
    49ac:	2400      	movs	r4, #0
    49ae:	2500      	movs	r5, #0
    49b0:	e6f2      	b.n	4798 <__aeabi_dadd+0x180>
    49b2:	46c0      	nop			; (mov r8, r8)
    49b4:	000007ff 	.word	0x000007ff
    49b8:	ff7fffff 	.word	0xff7fffff
    49bc:	800fffff 	.word	0x800fffff
    49c0:	2b1f      	cmp	r3, #31
    49c2:	dc59      	bgt.n	4a78 <__aeabi_dadd+0x460>
    49c4:	2720      	movs	r7, #32
    49c6:	1aff      	subs	r7, r7, r3
    49c8:	46bc      	mov	ip, r7
    49ca:	0007      	movs	r7, r0
    49cc:	4663      	mov	r3, ip
    49ce:	409f      	lsls	r7, r3
    49d0:	465b      	mov	r3, fp
    49d2:	46b9      	mov	r9, r7
    49d4:	0017      	movs	r7, r2
    49d6:	40df      	lsrs	r7, r3
    49d8:	46b8      	mov	r8, r7
    49da:	464f      	mov	r7, r9
    49dc:	4643      	mov	r3, r8
    49de:	431f      	orrs	r7, r3
    49e0:	4663      	mov	r3, ip
    49e2:	409a      	lsls	r2, r3
    49e4:	1e53      	subs	r3, r2, #1
    49e6:	419a      	sbcs	r2, r3
    49e8:	465b      	mov	r3, fp
    49ea:	433a      	orrs	r2, r7
    49ec:	40d8      	lsrs	r0, r3
    49ee:	e6f4      	b.n	47da <__aeabi_dadd+0x1c2>
    49f0:	000c      	movs	r4, r1
    49f2:	432c      	orrs	r4, r5
    49f4:	d05c      	beq.n	4ab0 <__aeabi_dadd+0x498>
    49f6:	43f6      	mvns	r6, r6
    49f8:	2e00      	cmp	r6, #0
    49fa:	d155      	bne.n	4aa8 <__aeabi_dadd+0x490>
    49fc:	1b55      	subs	r5, r2, r5
    49fe:	42aa      	cmp	r2, r5
    4a00:	41a4      	sbcs	r4, r4
    4a02:	1a41      	subs	r1, r0, r1
    4a04:	4264      	negs	r4, r4
    4a06:	1b09      	subs	r1, r1, r4
    4a08:	469a      	mov	sl, r3
    4a0a:	4664      	mov	r4, ip
    4a0c:	e688      	b.n	4720 <__aeabi_dadd+0x108>
    4a0e:	4f96      	ldr	r7, [pc, #600]	; (4c68 <__aeabi_dadd+0x650>)
    4a10:	42bc      	cmp	r4, r7
    4a12:	d000      	beq.n	4a16 <__aeabi_dadd+0x3fe>
    4a14:	e6d8      	b.n	47c8 <__aeabi_dadd+0x1b0>
    4a16:	e628      	b.n	466a <__aeabi_dadd+0x52>
    4a18:	2200      	movs	r2, #0
    4a1a:	e780      	b.n	491e <__aeabi_dadd+0x306>
    4a1c:	2000      	movs	r0, #0
    4a1e:	e78f      	b.n	4940 <__aeabi_dadd+0x328>
    4a20:	000b      	movs	r3, r1
    4a22:	432b      	orrs	r3, r5
    4a24:	2c00      	cmp	r4, #0
    4a26:	d000      	beq.n	4a2a <__aeabi_dadd+0x412>
    4a28:	e0c2      	b.n	4bb0 <__aeabi_dadd+0x598>
    4a2a:	2b00      	cmp	r3, #0
    4a2c:	d100      	bne.n	4a30 <__aeabi_dadd+0x418>
    4a2e:	e101      	b.n	4c34 <__aeabi_dadd+0x61c>
    4a30:	0003      	movs	r3, r0
    4a32:	4313      	orrs	r3, r2
    4a34:	d100      	bne.n	4a38 <__aeabi_dadd+0x420>
    4a36:	e618      	b.n	466a <__aeabi_dadd+0x52>
    4a38:	18ab      	adds	r3, r5, r2
    4a3a:	42ab      	cmp	r3, r5
    4a3c:	41b6      	sbcs	r6, r6
    4a3e:	1809      	adds	r1, r1, r0
    4a40:	4276      	negs	r6, r6
    4a42:	1871      	adds	r1, r6, r1
    4a44:	020a      	lsls	r2, r1, #8
    4a46:	d400      	bmi.n	4a4a <__aeabi_dadd+0x432>
    4a48:	e109      	b.n	4c5e <__aeabi_dadd+0x646>
    4a4a:	4a88      	ldr	r2, [pc, #544]	; (4c6c <__aeabi_dadd+0x654>)
    4a4c:	001d      	movs	r5, r3
    4a4e:	4011      	ands	r1, r2
    4a50:	4664      	mov	r4, ip
    4a52:	e60a      	b.n	466a <__aeabi_dadd+0x52>
    4a54:	2c00      	cmp	r4, #0
    4a56:	d15b      	bne.n	4b10 <__aeabi_dadd+0x4f8>
    4a58:	000e      	movs	r6, r1
    4a5a:	432e      	orrs	r6, r5
    4a5c:	d000      	beq.n	4a60 <__aeabi_dadd+0x448>
    4a5e:	e08a      	b.n	4b76 <__aeabi_dadd+0x55e>
    4a60:	0001      	movs	r1, r0
    4a62:	4311      	orrs	r1, r2
    4a64:	d100      	bne.n	4a68 <__aeabi_dadd+0x450>
    4a66:	e0c2      	b.n	4bee <__aeabi_dadd+0x5d6>
    4a68:	0001      	movs	r1, r0
    4a6a:	0015      	movs	r5, r2
    4a6c:	469a      	mov	sl, r3
    4a6e:	e5fc      	b.n	466a <__aeabi_dadd+0x52>
    4a70:	4664      	mov	r4, ip
    4a72:	2100      	movs	r1, #0
    4a74:	2500      	movs	r5, #0
    4a76:	e68f      	b.n	4798 <__aeabi_dadd+0x180>
    4a78:	2320      	movs	r3, #32
    4a7a:	425b      	negs	r3, r3
    4a7c:	469c      	mov	ip, r3
    4a7e:	44dc      	add	ip, fp
    4a80:	4663      	mov	r3, ip
    4a82:	0007      	movs	r7, r0
    4a84:	40df      	lsrs	r7, r3
    4a86:	465b      	mov	r3, fp
    4a88:	46bc      	mov	ip, r7
    4a8a:	2b20      	cmp	r3, #32
    4a8c:	d100      	bne.n	4a90 <__aeabi_dadd+0x478>
    4a8e:	e0ac      	b.n	4bea <__aeabi_dadd+0x5d2>
    4a90:	2340      	movs	r3, #64	; 0x40
    4a92:	465f      	mov	r7, fp
    4a94:	1bdb      	subs	r3, r3, r7
    4a96:	4098      	lsls	r0, r3
    4a98:	4302      	orrs	r2, r0
    4a9a:	1e50      	subs	r0, r2, #1
    4a9c:	4182      	sbcs	r2, r0
    4a9e:	4663      	mov	r3, ip
    4aa0:	4313      	orrs	r3, r2
    4aa2:	001a      	movs	r2, r3
    4aa4:	2000      	movs	r0, #0
    4aa6:	e698      	b.n	47da <__aeabi_dadd+0x1c2>
    4aa8:	4c6f      	ldr	r4, [pc, #444]	; (4c68 <__aeabi_dadd+0x650>)
    4aaa:	45a4      	cmp	ip, r4
    4aac:	d000      	beq.n	4ab0 <__aeabi_dadd+0x498>
    4aae:	e757      	b.n	4960 <__aeabi_dadd+0x348>
    4ab0:	0001      	movs	r1, r0
    4ab2:	0015      	movs	r5, r2
    4ab4:	4664      	mov	r4, ip
    4ab6:	469a      	mov	sl, r3
    4ab8:	e5d7      	b.n	466a <__aeabi_dadd+0x52>
    4aba:	2c00      	cmp	r4, #0
    4abc:	d139      	bne.n	4b32 <__aeabi_dadd+0x51a>
    4abe:	000c      	movs	r4, r1
    4ac0:	432c      	orrs	r4, r5
    4ac2:	d06e      	beq.n	4ba2 <__aeabi_dadd+0x58a>
    4ac4:	43db      	mvns	r3, r3
    4ac6:	2b00      	cmp	r3, #0
    4ac8:	d01a      	beq.n	4b00 <__aeabi_dadd+0x4e8>
    4aca:	4c67      	ldr	r4, [pc, #412]	; (4c68 <__aeabi_dadd+0x650>)
    4acc:	45a4      	cmp	ip, r4
    4ace:	d068      	beq.n	4ba2 <__aeabi_dadd+0x58a>
    4ad0:	2b38      	cmp	r3, #56	; 0x38
    4ad2:	dd00      	ble.n	4ad6 <__aeabi_dadd+0x4be>
    4ad4:	e0a4      	b.n	4c20 <__aeabi_dadd+0x608>
    4ad6:	2b1f      	cmp	r3, #31
    4ad8:	dd00      	ble.n	4adc <__aeabi_dadd+0x4c4>
    4ada:	e0ae      	b.n	4c3a <__aeabi_dadd+0x622>
    4adc:	2420      	movs	r4, #32
    4ade:	000f      	movs	r7, r1
    4ae0:	1ae4      	subs	r4, r4, r3
    4ae2:	40a7      	lsls	r7, r4
    4ae4:	46b9      	mov	r9, r7
    4ae6:	002f      	movs	r7, r5
    4ae8:	40df      	lsrs	r7, r3
    4aea:	46b8      	mov	r8, r7
    4aec:	46a3      	mov	fp, r4
    4aee:	464f      	mov	r7, r9
    4af0:	4644      	mov	r4, r8
    4af2:	4327      	orrs	r7, r4
    4af4:	465c      	mov	r4, fp
    4af6:	40a5      	lsls	r5, r4
    4af8:	1e6c      	subs	r4, r5, #1
    4afa:	41a5      	sbcs	r5, r4
    4afc:	40d9      	lsrs	r1, r3
    4afe:	433d      	orrs	r5, r7
    4b00:	18ad      	adds	r5, r5, r2
    4b02:	4295      	cmp	r5, r2
    4b04:	419b      	sbcs	r3, r3
    4b06:	1809      	adds	r1, r1, r0
    4b08:	425b      	negs	r3, r3
    4b0a:	1859      	adds	r1, r3, r1
    4b0c:	4664      	mov	r4, ip
    4b0e:	e66b      	b.n	47e8 <__aeabi_dadd+0x1d0>
    4b10:	000c      	movs	r4, r1
    4b12:	432c      	orrs	r4, r5
    4b14:	d115      	bne.n	4b42 <__aeabi_dadd+0x52a>
    4b16:	0001      	movs	r1, r0
    4b18:	4311      	orrs	r1, r2
    4b1a:	d07b      	beq.n	4c14 <__aeabi_dadd+0x5fc>
    4b1c:	0001      	movs	r1, r0
    4b1e:	0015      	movs	r5, r2
    4b20:	469a      	mov	sl, r3
    4b22:	4c51      	ldr	r4, [pc, #324]	; (4c68 <__aeabi_dadd+0x650>)
    4b24:	e5a1      	b.n	466a <__aeabi_dadd+0x52>
    4b26:	430d      	orrs	r5, r1
    4b28:	1e69      	subs	r1, r5, #1
    4b2a:	418d      	sbcs	r5, r1
    4b2c:	2100      	movs	r1, #0
    4b2e:	b2ec      	uxtb	r4, r5
    4b30:	e72d      	b.n	498e <__aeabi_dadd+0x376>
    4b32:	4c4d      	ldr	r4, [pc, #308]	; (4c68 <__aeabi_dadd+0x650>)
    4b34:	45a4      	cmp	ip, r4
    4b36:	d034      	beq.n	4ba2 <__aeabi_dadd+0x58a>
    4b38:	2480      	movs	r4, #128	; 0x80
    4b3a:	0424      	lsls	r4, r4, #16
    4b3c:	425b      	negs	r3, r3
    4b3e:	4321      	orrs	r1, r4
    4b40:	e7c6      	b.n	4ad0 <__aeabi_dadd+0x4b8>
    4b42:	0004      	movs	r4, r0
    4b44:	4314      	orrs	r4, r2
    4b46:	d04e      	beq.n	4be6 <__aeabi_dadd+0x5ce>
    4b48:	08ed      	lsrs	r5, r5, #3
    4b4a:	074c      	lsls	r4, r1, #29
    4b4c:	432c      	orrs	r4, r5
    4b4e:	2580      	movs	r5, #128	; 0x80
    4b50:	08c9      	lsrs	r1, r1, #3
    4b52:	032d      	lsls	r5, r5, #12
    4b54:	4229      	tst	r1, r5
    4b56:	d008      	beq.n	4b6a <__aeabi_dadd+0x552>
    4b58:	08c6      	lsrs	r6, r0, #3
    4b5a:	422e      	tst	r6, r5
    4b5c:	d105      	bne.n	4b6a <__aeabi_dadd+0x552>
    4b5e:	08d2      	lsrs	r2, r2, #3
    4b60:	0741      	lsls	r1, r0, #29
    4b62:	4311      	orrs	r1, r2
    4b64:	000c      	movs	r4, r1
    4b66:	469a      	mov	sl, r3
    4b68:	0031      	movs	r1, r6
    4b6a:	0f62      	lsrs	r2, r4, #29
    4b6c:	00c9      	lsls	r1, r1, #3
    4b6e:	00e5      	lsls	r5, r4, #3
    4b70:	4311      	orrs	r1, r2
    4b72:	4c3d      	ldr	r4, [pc, #244]	; (4c68 <__aeabi_dadd+0x650>)
    4b74:	e579      	b.n	466a <__aeabi_dadd+0x52>
    4b76:	0006      	movs	r6, r0
    4b78:	4316      	orrs	r6, r2
    4b7a:	d100      	bne.n	4b7e <__aeabi_dadd+0x566>
    4b7c:	e575      	b.n	466a <__aeabi_dadd+0x52>
    4b7e:	1aae      	subs	r6, r5, r2
    4b80:	46b0      	mov	r8, r6
    4b82:	4545      	cmp	r5, r8
    4b84:	41bf      	sbcs	r7, r7
    4b86:	1a0e      	subs	r6, r1, r0
    4b88:	427f      	negs	r7, r7
    4b8a:	1bf6      	subs	r6, r6, r7
    4b8c:	0237      	lsls	r7, r6, #8
    4b8e:	d400      	bmi.n	4b92 <__aeabi_dadd+0x57a>
    4b90:	e5f4      	b.n	477c <__aeabi_dadd+0x164>
    4b92:	1b55      	subs	r5, r2, r5
    4b94:	42aa      	cmp	r2, r5
    4b96:	41b6      	sbcs	r6, r6
    4b98:	1a41      	subs	r1, r0, r1
    4b9a:	4276      	negs	r6, r6
    4b9c:	1b89      	subs	r1, r1, r6
    4b9e:	469a      	mov	sl, r3
    4ba0:	e563      	b.n	466a <__aeabi_dadd+0x52>
    4ba2:	0001      	movs	r1, r0
    4ba4:	0015      	movs	r5, r2
    4ba6:	4664      	mov	r4, ip
    4ba8:	e55f      	b.n	466a <__aeabi_dadd+0x52>
    4baa:	2200      	movs	r2, #0
    4bac:	2500      	movs	r5, #0
    4bae:	e57b      	b.n	46a8 <__aeabi_dadd+0x90>
    4bb0:	2b00      	cmp	r3, #0
    4bb2:	d03b      	beq.n	4c2c <__aeabi_dadd+0x614>
    4bb4:	0003      	movs	r3, r0
    4bb6:	4313      	orrs	r3, r2
    4bb8:	d015      	beq.n	4be6 <__aeabi_dadd+0x5ce>
    4bba:	08ed      	lsrs	r5, r5, #3
    4bbc:	074b      	lsls	r3, r1, #29
    4bbe:	432b      	orrs	r3, r5
    4bc0:	2580      	movs	r5, #128	; 0x80
    4bc2:	08c9      	lsrs	r1, r1, #3
    4bc4:	032d      	lsls	r5, r5, #12
    4bc6:	4229      	tst	r1, r5
    4bc8:	d007      	beq.n	4bda <__aeabi_dadd+0x5c2>
    4bca:	08c4      	lsrs	r4, r0, #3
    4bcc:	422c      	tst	r4, r5
    4bce:	d104      	bne.n	4bda <__aeabi_dadd+0x5c2>
    4bd0:	0741      	lsls	r1, r0, #29
    4bd2:	000b      	movs	r3, r1
    4bd4:	0021      	movs	r1, r4
    4bd6:	08d2      	lsrs	r2, r2, #3
    4bd8:	4313      	orrs	r3, r2
    4bda:	00c9      	lsls	r1, r1, #3
    4bdc:	0f5a      	lsrs	r2, r3, #29
    4bde:	4311      	orrs	r1, r2
    4be0:	00dd      	lsls	r5, r3, #3
    4be2:	4c21      	ldr	r4, [pc, #132]	; (4c68 <__aeabi_dadd+0x650>)
    4be4:	e541      	b.n	466a <__aeabi_dadd+0x52>
    4be6:	4c20      	ldr	r4, [pc, #128]	; (4c68 <__aeabi_dadd+0x650>)
    4be8:	e53f      	b.n	466a <__aeabi_dadd+0x52>
    4bea:	2000      	movs	r0, #0
    4bec:	e754      	b.n	4a98 <__aeabi_dadd+0x480>
    4bee:	2600      	movs	r6, #0
    4bf0:	2500      	movs	r5, #0
    4bf2:	e5d1      	b.n	4798 <__aeabi_dadd+0x180>
    4bf4:	0034      	movs	r4, r6
    4bf6:	000f      	movs	r7, r1
    4bf8:	3c20      	subs	r4, #32
    4bfa:	40e7      	lsrs	r7, r4
    4bfc:	003c      	movs	r4, r7
    4bfe:	2e20      	cmp	r6, #32
    4c00:	d02b      	beq.n	4c5a <__aeabi_dadd+0x642>
    4c02:	2740      	movs	r7, #64	; 0x40
    4c04:	1bbe      	subs	r6, r7, r6
    4c06:	40b1      	lsls	r1, r6
    4c08:	430d      	orrs	r5, r1
    4c0a:	1e69      	subs	r1, r5, #1
    4c0c:	418d      	sbcs	r5, r1
    4c0e:	2100      	movs	r1, #0
    4c10:	432c      	orrs	r4, r5
    4c12:	e6bc      	b.n	498e <__aeabi_dadd+0x376>
    4c14:	2180      	movs	r1, #128	; 0x80
    4c16:	2600      	movs	r6, #0
    4c18:	0309      	lsls	r1, r1, #12
    4c1a:	4c13      	ldr	r4, [pc, #76]	; (4c68 <__aeabi_dadd+0x650>)
    4c1c:	2500      	movs	r5, #0
    4c1e:	e5bb      	b.n	4798 <__aeabi_dadd+0x180>
    4c20:	430d      	orrs	r5, r1
    4c22:	1e69      	subs	r1, r5, #1
    4c24:	418d      	sbcs	r5, r1
    4c26:	2100      	movs	r1, #0
    4c28:	b2ed      	uxtb	r5, r5
    4c2a:	e769      	b.n	4b00 <__aeabi_dadd+0x4e8>
    4c2c:	0001      	movs	r1, r0
    4c2e:	0015      	movs	r5, r2
    4c30:	4c0d      	ldr	r4, [pc, #52]	; (4c68 <__aeabi_dadd+0x650>)
    4c32:	e51a      	b.n	466a <__aeabi_dadd+0x52>
    4c34:	0001      	movs	r1, r0
    4c36:	0015      	movs	r5, r2
    4c38:	e517      	b.n	466a <__aeabi_dadd+0x52>
    4c3a:	001c      	movs	r4, r3
    4c3c:	000f      	movs	r7, r1
    4c3e:	3c20      	subs	r4, #32
    4c40:	40e7      	lsrs	r7, r4
    4c42:	003c      	movs	r4, r7
    4c44:	2b20      	cmp	r3, #32
    4c46:	d00c      	beq.n	4c62 <__aeabi_dadd+0x64a>
    4c48:	2740      	movs	r7, #64	; 0x40
    4c4a:	1afb      	subs	r3, r7, r3
    4c4c:	4099      	lsls	r1, r3
    4c4e:	430d      	orrs	r5, r1
    4c50:	1e69      	subs	r1, r5, #1
    4c52:	418d      	sbcs	r5, r1
    4c54:	2100      	movs	r1, #0
    4c56:	4325      	orrs	r5, r4
    4c58:	e752      	b.n	4b00 <__aeabi_dadd+0x4e8>
    4c5a:	2100      	movs	r1, #0
    4c5c:	e7d4      	b.n	4c08 <__aeabi_dadd+0x5f0>
    4c5e:	001d      	movs	r5, r3
    4c60:	e592      	b.n	4788 <__aeabi_dadd+0x170>
    4c62:	2100      	movs	r1, #0
    4c64:	e7f3      	b.n	4c4e <__aeabi_dadd+0x636>
    4c66:	46c0      	nop			; (mov r8, r8)
    4c68:	000007ff 	.word	0x000007ff
    4c6c:	ff7fffff 	.word	0xff7fffff

00004c70 <__aeabi_ddiv>:
    4c70:	b5f0      	push	{r4, r5, r6, r7, lr}
    4c72:	4656      	mov	r6, sl
    4c74:	464d      	mov	r5, r9
    4c76:	4644      	mov	r4, r8
    4c78:	465f      	mov	r7, fp
    4c7a:	b4f0      	push	{r4, r5, r6, r7}
    4c7c:	001d      	movs	r5, r3
    4c7e:	030e      	lsls	r6, r1, #12
    4c80:	004c      	lsls	r4, r1, #1
    4c82:	0fcb      	lsrs	r3, r1, #31
    4c84:	b087      	sub	sp, #28
    4c86:	0007      	movs	r7, r0
    4c88:	4692      	mov	sl, r2
    4c8a:	4681      	mov	r9, r0
    4c8c:	0b36      	lsrs	r6, r6, #12
    4c8e:	0d64      	lsrs	r4, r4, #21
    4c90:	4698      	mov	r8, r3
    4c92:	d06a      	beq.n	4d6a <__aeabi_ddiv+0xfa>
    4c94:	4b6d      	ldr	r3, [pc, #436]	; (4e4c <__aeabi_ddiv+0x1dc>)
    4c96:	429c      	cmp	r4, r3
    4c98:	d035      	beq.n	4d06 <__aeabi_ddiv+0x96>
    4c9a:	2280      	movs	r2, #128	; 0x80
    4c9c:	0f43      	lsrs	r3, r0, #29
    4c9e:	0412      	lsls	r2, r2, #16
    4ca0:	4313      	orrs	r3, r2
    4ca2:	00f6      	lsls	r6, r6, #3
    4ca4:	431e      	orrs	r6, r3
    4ca6:	00c3      	lsls	r3, r0, #3
    4ca8:	4699      	mov	r9, r3
    4caa:	4b69      	ldr	r3, [pc, #420]	; (4e50 <__aeabi_ddiv+0x1e0>)
    4cac:	2700      	movs	r7, #0
    4cae:	469c      	mov	ip, r3
    4cb0:	2300      	movs	r3, #0
    4cb2:	4464      	add	r4, ip
    4cb4:	9302      	str	r3, [sp, #8]
    4cb6:	032b      	lsls	r3, r5, #12
    4cb8:	0068      	lsls	r0, r5, #1
    4cba:	0b1b      	lsrs	r3, r3, #12
    4cbc:	0fed      	lsrs	r5, r5, #31
    4cbe:	4651      	mov	r1, sl
    4cc0:	469b      	mov	fp, r3
    4cc2:	0d40      	lsrs	r0, r0, #21
    4cc4:	9500      	str	r5, [sp, #0]
    4cc6:	d100      	bne.n	4cca <__aeabi_ddiv+0x5a>
    4cc8:	e078      	b.n	4dbc <__aeabi_ddiv+0x14c>
    4cca:	4b60      	ldr	r3, [pc, #384]	; (4e4c <__aeabi_ddiv+0x1dc>)
    4ccc:	4298      	cmp	r0, r3
    4cce:	d06c      	beq.n	4daa <__aeabi_ddiv+0x13a>
    4cd0:	465b      	mov	r3, fp
    4cd2:	00da      	lsls	r2, r3, #3
    4cd4:	0f4b      	lsrs	r3, r1, #29
    4cd6:	2180      	movs	r1, #128	; 0x80
    4cd8:	0409      	lsls	r1, r1, #16
    4cda:	430b      	orrs	r3, r1
    4cdc:	4313      	orrs	r3, r2
    4cde:	469b      	mov	fp, r3
    4ce0:	4653      	mov	r3, sl
    4ce2:	00d9      	lsls	r1, r3, #3
    4ce4:	4b5a      	ldr	r3, [pc, #360]	; (4e50 <__aeabi_ddiv+0x1e0>)
    4ce6:	469c      	mov	ip, r3
    4ce8:	2300      	movs	r3, #0
    4cea:	4460      	add	r0, ip
    4cec:	4642      	mov	r2, r8
    4cee:	1a20      	subs	r0, r4, r0
    4cf0:	406a      	eors	r2, r5
    4cf2:	4692      	mov	sl, r2
    4cf4:	9001      	str	r0, [sp, #4]
    4cf6:	431f      	orrs	r7, r3
    4cf8:	2f0f      	cmp	r7, #15
    4cfa:	d900      	bls.n	4cfe <__aeabi_ddiv+0x8e>
    4cfc:	e0b0      	b.n	4e60 <__aeabi_ddiv+0x1f0>
    4cfe:	4855      	ldr	r0, [pc, #340]	; (4e54 <__aeabi_ddiv+0x1e4>)
    4d00:	00bf      	lsls	r7, r7, #2
    4d02:	59c0      	ldr	r0, [r0, r7]
    4d04:	4687      	mov	pc, r0
    4d06:	4337      	orrs	r7, r6
    4d08:	d000      	beq.n	4d0c <__aeabi_ddiv+0x9c>
    4d0a:	e088      	b.n	4e1e <__aeabi_ddiv+0x1ae>
    4d0c:	2300      	movs	r3, #0
    4d0e:	4699      	mov	r9, r3
    4d10:	3302      	adds	r3, #2
    4d12:	2708      	movs	r7, #8
    4d14:	2600      	movs	r6, #0
    4d16:	9302      	str	r3, [sp, #8]
    4d18:	e7cd      	b.n	4cb6 <__aeabi_ddiv+0x46>
    4d1a:	4643      	mov	r3, r8
    4d1c:	46b3      	mov	fp, r6
    4d1e:	4649      	mov	r1, r9
    4d20:	9300      	str	r3, [sp, #0]
    4d22:	9b02      	ldr	r3, [sp, #8]
    4d24:	9a00      	ldr	r2, [sp, #0]
    4d26:	4692      	mov	sl, r2
    4d28:	2b02      	cmp	r3, #2
    4d2a:	d000      	beq.n	4d2e <__aeabi_ddiv+0xbe>
    4d2c:	e1bf      	b.n	50ae <__aeabi_ddiv+0x43e>
    4d2e:	2100      	movs	r1, #0
    4d30:	4653      	mov	r3, sl
    4d32:	2201      	movs	r2, #1
    4d34:	2600      	movs	r6, #0
    4d36:	4689      	mov	r9, r1
    4d38:	401a      	ands	r2, r3
    4d3a:	4b44      	ldr	r3, [pc, #272]	; (4e4c <__aeabi_ddiv+0x1dc>)
    4d3c:	2100      	movs	r1, #0
    4d3e:	0336      	lsls	r6, r6, #12
    4d40:	0d0c      	lsrs	r4, r1, #20
    4d42:	0524      	lsls	r4, r4, #20
    4d44:	0b36      	lsrs	r6, r6, #12
    4d46:	4326      	orrs	r6, r4
    4d48:	4c43      	ldr	r4, [pc, #268]	; (4e58 <__aeabi_ddiv+0x1e8>)
    4d4a:	051b      	lsls	r3, r3, #20
    4d4c:	4026      	ands	r6, r4
    4d4e:	431e      	orrs	r6, r3
    4d50:	0076      	lsls	r6, r6, #1
    4d52:	07d2      	lsls	r2, r2, #31
    4d54:	0876      	lsrs	r6, r6, #1
    4d56:	4316      	orrs	r6, r2
    4d58:	4648      	mov	r0, r9
    4d5a:	0031      	movs	r1, r6
    4d5c:	b007      	add	sp, #28
    4d5e:	bc3c      	pop	{r2, r3, r4, r5}
    4d60:	4690      	mov	r8, r2
    4d62:	4699      	mov	r9, r3
    4d64:	46a2      	mov	sl, r4
    4d66:	46ab      	mov	fp, r5
    4d68:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4d6a:	0033      	movs	r3, r6
    4d6c:	4303      	orrs	r3, r0
    4d6e:	d04f      	beq.n	4e10 <__aeabi_ddiv+0x1a0>
    4d70:	2e00      	cmp	r6, #0
    4d72:	d100      	bne.n	4d76 <__aeabi_ddiv+0x106>
    4d74:	e1bc      	b.n	50f0 <__aeabi_ddiv+0x480>
    4d76:	0030      	movs	r0, r6
    4d78:	f001 fb1c 	bl	63b4 <__clzsi2>
    4d7c:	0003      	movs	r3, r0
    4d7e:	3b0b      	subs	r3, #11
    4d80:	2b1c      	cmp	r3, #28
    4d82:	dd00      	ble.n	4d86 <__aeabi_ddiv+0x116>
    4d84:	e1ad      	b.n	50e2 <__aeabi_ddiv+0x472>
    4d86:	221d      	movs	r2, #29
    4d88:	0001      	movs	r1, r0
    4d8a:	1ad3      	subs	r3, r2, r3
    4d8c:	3908      	subs	r1, #8
    4d8e:	003a      	movs	r2, r7
    4d90:	408f      	lsls	r7, r1
    4d92:	408e      	lsls	r6, r1
    4d94:	40da      	lsrs	r2, r3
    4d96:	46b9      	mov	r9, r7
    4d98:	4316      	orrs	r6, r2
    4d9a:	4b30      	ldr	r3, [pc, #192]	; (4e5c <__aeabi_ddiv+0x1ec>)
    4d9c:	2700      	movs	r7, #0
    4d9e:	469c      	mov	ip, r3
    4da0:	2300      	movs	r3, #0
    4da2:	4460      	add	r0, ip
    4da4:	4244      	negs	r4, r0
    4da6:	9302      	str	r3, [sp, #8]
    4da8:	e785      	b.n	4cb6 <__aeabi_ddiv+0x46>
    4daa:	4653      	mov	r3, sl
    4dac:	465a      	mov	r2, fp
    4dae:	4313      	orrs	r3, r2
    4db0:	d12c      	bne.n	4e0c <__aeabi_ddiv+0x19c>
    4db2:	2300      	movs	r3, #0
    4db4:	2100      	movs	r1, #0
    4db6:	469b      	mov	fp, r3
    4db8:	3302      	adds	r3, #2
    4dba:	e797      	b.n	4cec <__aeabi_ddiv+0x7c>
    4dbc:	430b      	orrs	r3, r1
    4dbe:	d020      	beq.n	4e02 <__aeabi_ddiv+0x192>
    4dc0:	465b      	mov	r3, fp
    4dc2:	2b00      	cmp	r3, #0
    4dc4:	d100      	bne.n	4dc8 <__aeabi_ddiv+0x158>
    4dc6:	e19e      	b.n	5106 <__aeabi_ddiv+0x496>
    4dc8:	4658      	mov	r0, fp
    4dca:	f001 faf3 	bl	63b4 <__clzsi2>
    4dce:	0003      	movs	r3, r0
    4dd0:	3b0b      	subs	r3, #11
    4dd2:	2b1c      	cmp	r3, #28
    4dd4:	dd00      	ble.n	4dd8 <__aeabi_ddiv+0x168>
    4dd6:	e18f      	b.n	50f8 <__aeabi_ddiv+0x488>
    4dd8:	0002      	movs	r2, r0
    4dda:	4659      	mov	r1, fp
    4ddc:	3a08      	subs	r2, #8
    4dde:	4091      	lsls	r1, r2
    4de0:	468b      	mov	fp, r1
    4de2:	211d      	movs	r1, #29
    4de4:	1acb      	subs	r3, r1, r3
    4de6:	4651      	mov	r1, sl
    4de8:	40d9      	lsrs	r1, r3
    4dea:	000b      	movs	r3, r1
    4dec:	4659      	mov	r1, fp
    4dee:	430b      	orrs	r3, r1
    4df0:	4651      	mov	r1, sl
    4df2:	469b      	mov	fp, r3
    4df4:	4091      	lsls	r1, r2
    4df6:	4b19      	ldr	r3, [pc, #100]	; (4e5c <__aeabi_ddiv+0x1ec>)
    4df8:	469c      	mov	ip, r3
    4dfa:	4460      	add	r0, ip
    4dfc:	4240      	negs	r0, r0
    4dfe:	2300      	movs	r3, #0
    4e00:	e774      	b.n	4cec <__aeabi_ddiv+0x7c>
    4e02:	2300      	movs	r3, #0
    4e04:	2100      	movs	r1, #0
    4e06:	469b      	mov	fp, r3
    4e08:	3301      	adds	r3, #1
    4e0a:	e76f      	b.n	4cec <__aeabi_ddiv+0x7c>
    4e0c:	2303      	movs	r3, #3
    4e0e:	e76d      	b.n	4cec <__aeabi_ddiv+0x7c>
    4e10:	2300      	movs	r3, #0
    4e12:	4699      	mov	r9, r3
    4e14:	3301      	adds	r3, #1
    4e16:	2704      	movs	r7, #4
    4e18:	2600      	movs	r6, #0
    4e1a:	9302      	str	r3, [sp, #8]
    4e1c:	e74b      	b.n	4cb6 <__aeabi_ddiv+0x46>
    4e1e:	2303      	movs	r3, #3
    4e20:	270c      	movs	r7, #12
    4e22:	9302      	str	r3, [sp, #8]
    4e24:	e747      	b.n	4cb6 <__aeabi_ddiv+0x46>
    4e26:	2201      	movs	r2, #1
    4e28:	1ad5      	subs	r5, r2, r3
    4e2a:	2d38      	cmp	r5, #56	; 0x38
    4e2c:	dc00      	bgt.n	4e30 <__aeabi_ddiv+0x1c0>
    4e2e:	e1b0      	b.n	5192 <__aeabi_ddiv+0x522>
    4e30:	4653      	mov	r3, sl
    4e32:	401a      	ands	r2, r3
    4e34:	2100      	movs	r1, #0
    4e36:	2300      	movs	r3, #0
    4e38:	2600      	movs	r6, #0
    4e3a:	4689      	mov	r9, r1
    4e3c:	e77e      	b.n	4d3c <__aeabi_ddiv+0xcc>
    4e3e:	2300      	movs	r3, #0
    4e40:	2680      	movs	r6, #128	; 0x80
    4e42:	4699      	mov	r9, r3
    4e44:	2200      	movs	r2, #0
    4e46:	0336      	lsls	r6, r6, #12
    4e48:	4b00      	ldr	r3, [pc, #0]	; (4e4c <__aeabi_ddiv+0x1dc>)
    4e4a:	e777      	b.n	4d3c <__aeabi_ddiv+0xcc>
    4e4c:	000007ff 	.word	0x000007ff
    4e50:	fffffc01 	.word	0xfffffc01
    4e54:	000064c0 	.word	0x000064c0
    4e58:	800fffff 	.word	0x800fffff
    4e5c:	000003f3 	.word	0x000003f3
    4e60:	455e      	cmp	r6, fp
    4e62:	d900      	bls.n	4e66 <__aeabi_ddiv+0x1f6>
    4e64:	e172      	b.n	514c <__aeabi_ddiv+0x4dc>
    4e66:	d100      	bne.n	4e6a <__aeabi_ddiv+0x1fa>
    4e68:	e16d      	b.n	5146 <__aeabi_ddiv+0x4d6>
    4e6a:	9b01      	ldr	r3, [sp, #4]
    4e6c:	464d      	mov	r5, r9
    4e6e:	3b01      	subs	r3, #1
    4e70:	9301      	str	r3, [sp, #4]
    4e72:	2300      	movs	r3, #0
    4e74:	0034      	movs	r4, r6
    4e76:	9302      	str	r3, [sp, #8]
    4e78:	465b      	mov	r3, fp
    4e7a:	021e      	lsls	r6, r3, #8
    4e7c:	0e0b      	lsrs	r3, r1, #24
    4e7e:	431e      	orrs	r6, r3
    4e80:	020b      	lsls	r3, r1, #8
    4e82:	9303      	str	r3, [sp, #12]
    4e84:	0c33      	lsrs	r3, r6, #16
    4e86:	4699      	mov	r9, r3
    4e88:	0433      	lsls	r3, r6, #16
    4e8a:	0c1b      	lsrs	r3, r3, #16
    4e8c:	4649      	mov	r1, r9
    4e8e:	0020      	movs	r0, r4
    4e90:	9300      	str	r3, [sp, #0]
    4e92:	f7ff f977 	bl	4184 <__aeabi_uidiv>
    4e96:	9b00      	ldr	r3, [sp, #0]
    4e98:	0037      	movs	r7, r6
    4e9a:	4343      	muls	r3, r0
    4e9c:	0006      	movs	r6, r0
    4e9e:	4649      	mov	r1, r9
    4ea0:	0020      	movs	r0, r4
    4ea2:	4698      	mov	r8, r3
    4ea4:	f7ff f9f4 	bl	4290 <__aeabi_uidivmod>
    4ea8:	0c2c      	lsrs	r4, r5, #16
    4eaa:	0409      	lsls	r1, r1, #16
    4eac:	430c      	orrs	r4, r1
    4eae:	45a0      	cmp	r8, r4
    4eb0:	d909      	bls.n	4ec6 <__aeabi_ddiv+0x256>
    4eb2:	19e4      	adds	r4, r4, r7
    4eb4:	1e73      	subs	r3, r6, #1
    4eb6:	42a7      	cmp	r7, r4
    4eb8:	d900      	bls.n	4ebc <__aeabi_ddiv+0x24c>
    4eba:	e15c      	b.n	5176 <__aeabi_ddiv+0x506>
    4ebc:	45a0      	cmp	r8, r4
    4ebe:	d800      	bhi.n	4ec2 <__aeabi_ddiv+0x252>
    4ec0:	e159      	b.n	5176 <__aeabi_ddiv+0x506>
    4ec2:	3e02      	subs	r6, #2
    4ec4:	19e4      	adds	r4, r4, r7
    4ec6:	4643      	mov	r3, r8
    4ec8:	1ae4      	subs	r4, r4, r3
    4eca:	4649      	mov	r1, r9
    4ecc:	0020      	movs	r0, r4
    4ece:	f7ff f959 	bl	4184 <__aeabi_uidiv>
    4ed2:	0003      	movs	r3, r0
    4ed4:	9a00      	ldr	r2, [sp, #0]
    4ed6:	4680      	mov	r8, r0
    4ed8:	4353      	muls	r3, r2
    4eda:	4649      	mov	r1, r9
    4edc:	0020      	movs	r0, r4
    4ede:	469b      	mov	fp, r3
    4ee0:	f7ff f9d6 	bl	4290 <__aeabi_uidivmod>
    4ee4:	042a      	lsls	r2, r5, #16
    4ee6:	0409      	lsls	r1, r1, #16
    4ee8:	0c12      	lsrs	r2, r2, #16
    4eea:	430a      	orrs	r2, r1
    4eec:	4593      	cmp	fp, r2
    4eee:	d90d      	bls.n	4f0c <__aeabi_ddiv+0x29c>
    4ef0:	4643      	mov	r3, r8
    4ef2:	19d2      	adds	r2, r2, r7
    4ef4:	3b01      	subs	r3, #1
    4ef6:	4297      	cmp	r7, r2
    4ef8:	d900      	bls.n	4efc <__aeabi_ddiv+0x28c>
    4efa:	e13a      	b.n	5172 <__aeabi_ddiv+0x502>
    4efc:	4593      	cmp	fp, r2
    4efe:	d800      	bhi.n	4f02 <__aeabi_ddiv+0x292>
    4f00:	e137      	b.n	5172 <__aeabi_ddiv+0x502>
    4f02:	2302      	movs	r3, #2
    4f04:	425b      	negs	r3, r3
    4f06:	469c      	mov	ip, r3
    4f08:	19d2      	adds	r2, r2, r7
    4f0a:	44e0      	add	r8, ip
    4f0c:	465b      	mov	r3, fp
    4f0e:	1ad2      	subs	r2, r2, r3
    4f10:	4643      	mov	r3, r8
    4f12:	0436      	lsls	r6, r6, #16
    4f14:	4333      	orrs	r3, r6
    4f16:	469b      	mov	fp, r3
    4f18:	9903      	ldr	r1, [sp, #12]
    4f1a:	0c18      	lsrs	r0, r3, #16
    4f1c:	0c0b      	lsrs	r3, r1, #16
    4f1e:	001d      	movs	r5, r3
    4f20:	9305      	str	r3, [sp, #20]
    4f22:	0409      	lsls	r1, r1, #16
    4f24:	465b      	mov	r3, fp
    4f26:	0c09      	lsrs	r1, r1, #16
    4f28:	000c      	movs	r4, r1
    4f2a:	041b      	lsls	r3, r3, #16
    4f2c:	0c1b      	lsrs	r3, r3, #16
    4f2e:	4344      	muls	r4, r0
    4f30:	9104      	str	r1, [sp, #16]
    4f32:	4359      	muls	r1, r3
    4f34:	436b      	muls	r3, r5
    4f36:	4368      	muls	r0, r5
    4f38:	191b      	adds	r3, r3, r4
    4f3a:	0c0d      	lsrs	r5, r1, #16
    4f3c:	18eb      	adds	r3, r5, r3
    4f3e:	429c      	cmp	r4, r3
    4f40:	d903      	bls.n	4f4a <__aeabi_ddiv+0x2da>
    4f42:	2480      	movs	r4, #128	; 0x80
    4f44:	0264      	lsls	r4, r4, #9
    4f46:	46a4      	mov	ip, r4
    4f48:	4460      	add	r0, ip
    4f4a:	0c1c      	lsrs	r4, r3, #16
    4f4c:	0409      	lsls	r1, r1, #16
    4f4e:	041b      	lsls	r3, r3, #16
    4f50:	0c09      	lsrs	r1, r1, #16
    4f52:	1820      	adds	r0, r4, r0
    4f54:	185d      	adds	r5, r3, r1
    4f56:	4282      	cmp	r2, r0
    4f58:	d200      	bcs.n	4f5c <__aeabi_ddiv+0x2ec>
    4f5a:	e0de      	b.n	511a <__aeabi_ddiv+0x4aa>
    4f5c:	d100      	bne.n	4f60 <__aeabi_ddiv+0x2f0>
    4f5e:	e0d7      	b.n	5110 <__aeabi_ddiv+0x4a0>
    4f60:	1a16      	subs	r6, r2, r0
    4f62:	9b02      	ldr	r3, [sp, #8]
    4f64:	469c      	mov	ip, r3
    4f66:	1b5d      	subs	r5, r3, r5
    4f68:	45ac      	cmp	ip, r5
    4f6a:	419b      	sbcs	r3, r3
    4f6c:	425b      	negs	r3, r3
    4f6e:	1af6      	subs	r6, r6, r3
    4f70:	42b7      	cmp	r7, r6
    4f72:	d100      	bne.n	4f76 <__aeabi_ddiv+0x306>
    4f74:	e106      	b.n	5184 <__aeabi_ddiv+0x514>
    4f76:	4649      	mov	r1, r9
    4f78:	0030      	movs	r0, r6
    4f7a:	f7ff f903 	bl	4184 <__aeabi_uidiv>
    4f7e:	9b00      	ldr	r3, [sp, #0]
    4f80:	0004      	movs	r4, r0
    4f82:	4343      	muls	r3, r0
    4f84:	4649      	mov	r1, r9
    4f86:	0030      	movs	r0, r6
    4f88:	4698      	mov	r8, r3
    4f8a:	f7ff f981 	bl	4290 <__aeabi_uidivmod>
    4f8e:	0c2e      	lsrs	r6, r5, #16
    4f90:	0409      	lsls	r1, r1, #16
    4f92:	430e      	orrs	r6, r1
    4f94:	45b0      	cmp	r8, r6
    4f96:	d909      	bls.n	4fac <__aeabi_ddiv+0x33c>
    4f98:	19f6      	adds	r6, r6, r7
    4f9a:	1e63      	subs	r3, r4, #1
    4f9c:	42b7      	cmp	r7, r6
    4f9e:	d900      	bls.n	4fa2 <__aeabi_ddiv+0x332>
    4fa0:	e0f3      	b.n	518a <__aeabi_ddiv+0x51a>
    4fa2:	45b0      	cmp	r8, r6
    4fa4:	d800      	bhi.n	4fa8 <__aeabi_ddiv+0x338>
    4fa6:	e0f0      	b.n	518a <__aeabi_ddiv+0x51a>
    4fa8:	3c02      	subs	r4, #2
    4faa:	19f6      	adds	r6, r6, r7
    4fac:	4643      	mov	r3, r8
    4fae:	1af3      	subs	r3, r6, r3
    4fb0:	4649      	mov	r1, r9
    4fb2:	0018      	movs	r0, r3
    4fb4:	9302      	str	r3, [sp, #8]
    4fb6:	f7ff f8e5 	bl	4184 <__aeabi_uidiv>
    4fba:	9b00      	ldr	r3, [sp, #0]
    4fbc:	0006      	movs	r6, r0
    4fbe:	4343      	muls	r3, r0
    4fc0:	4649      	mov	r1, r9
    4fc2:	9802      	ldr	r0, [sp, #8]
    4fc4:	4698      	mov	r8, r3
    4fc6:	f7ff f963 	bl	4290 <__aeabi_uidivmod>
    4fca:	042d      	lsls	r5, r5, #16
    4fcc:	0409      	lsls	r1, r1, #16
    4fce:	0c2d      	lsrs	r5, r5, #16
    4fd0:	430d      	orrs	r5, r1
    4fd2:	45a8      	cmp	r8, r5
    4fd4:	d909      	bls.n	4fea <__aeabi_ddiv+0x37a>
    4fd6:	19ed      	adds	r5, r5, r7
    4fd8:	1e73      	subs	r3, r6, #1
    4fda:	42af      	cmp	r7, r5
    4fdc:	d900      	bls.n	4fe0 <__aeabi_ddiv+0x370>
    4fde:	e0d6      	b.n	518e <__aeabi_ddiv+0x51e>
    4fe0:	45a8      	cmp	r8, r5
    4fe2:	d800      	bhi.n	4fe6 <__aeabi_ddiv+0x376>
    4fe4:	e0d3      	b.n	518e <__aeabi_ddiv+0x51e>
    4fe6:	3e02      	subs	r6, #2
    4fe8:	19ed      	adds	r5, r5, r7
    4fea:	0424      	lsls	r4, r4, #16
    4fec:	0021      	movs	r1, r4
    4fee:	4643      	mov	r3, r8
    4ff0:	4331      	orrs	r1, r6
    4ff2:	9e04      	ldr	r6, [sp, #16]
    4ff4:	9a05      	ldr	r2, [sp, #20]
    4ff6:	0030      	movs	r0, r6
    4ff8:	1aed      	subs	r5, r5, r3
    4ffa:	040b      	lsls	r3, r1, #16
    4ffc:	0c0c      	lsrs	r4, r1, #16
    4ffe:	0c1b      	lsrs	r3, r3, #16
    5000:	4358      	muls	r0, r3
    5002:	4366      	muls	r6, r4
    5004:	4353      	muls	r3, r2
    5006:	4354      	muls	r4, r2
    5008:	199a      	adds	r2, r3, r6
    500a:	0c03      	lsrs	r3, r0, #16
    500c:	189b      	adds	r3, r3, r2
    500e:	429e      	cmp	r6, r3
    5010:	d903      	bls.n	501a <__aeabi_ddiv+0x3aa>
    5012:	2280      	movs	r2, #128	; 0x80
    5014:	0252      	lsls	r2, r2, #9
    5016:	4694      	mov	ip, r2
    5018:	4464      	add	r4, ip
    501a:	0c1a      	lsrs	r2, r3, #16
    501c:	0400      	lsls	r0, r0, #16
    501e:	041b      	lsls	r3, r3, #16
    5020:	0c00      	lsrs	r0, r0, #16
    5022:	1914      	adds	r4, r2, r4
    5024:	181b      	adds	r3, r3, r0
    5026:	42a5      	cmp	r5, r4
    5028:	d350      	bcc.n	50cc <__aeabi_ddiv+0x45c>
    502a:	d04d      	beq.n	50c8 <__aeabi_ddiv+0x458>
    502c:	2301      	movs	r3, #1
    502e:	4319      	orrs	r1, r3
    5030:	4a96      	ldr	r2, [pc, #600]	; (528c <__aeabi_ddiv+0x61c>)
    5032:	9b01      	ldr	r3, [sp, #4]
    5034:	4694      	mov	ip, r2
    5036:	4463      	add	r3, ip
    5038:	2b00      	cmp	r3, #0
    503a:	dc00      	bgt.n	503e <__aeabi_ddiv+0x3ce>
    503c:	e6f3      	b.n	4e26 <__aeabi_ddiv+0x1b6>
    503e:	074a      	lsls	r2, r1, #29
    5040:	d009      	beq.n	5056 <__aeabi_ddiv+0x3e6>
    5042:	220f      	movs	r2, #15
    5044:	400a      	ands	r2, r1
    5046:	2a04      	cmp	r2, #4
    5048:	d005      	beq.n	5056 <__aeabi_ddiv+0x3e6>
    504a:	1d0a      	adds	r2, r1, #4
    504c:	428a      	cmp	r2, r1
    504e:	4189      	sbcs	r1, r1
    5050:	4249      	negs	r1, r1
    5052:	448b      	add	fp, r1
    5054:	0011      	movs	r1, r2
    5056:	465a      	mov	r2, fp
    5058:	01d2      	lsls	r2, r2, #7
    505a:	d508      	bpl.n	506e <__aeabi_ddiv+0x3fe>
    505c:	465a      	mov	r2, fp
    505e:	4b8c      	ldr	r3, [pc, #560]	; (5290 <__aeabi_ddiv+0x620>)
    5060:	401a      	ands	r2, r3
    5062:	4693      	mov	fp, r2
    5064:	2280      	movs	r2, #128	; 0x80
    5066:	00d2      	lsls	r2, r2, #3
    5068:	4694      	mov	ip, r2
    506a:	9b01      	ldr	r3, [sp, #4]
    506c:	4463      	add	r3, ip
    506e:	4a89      	ldr	r2, [pc, #548]	; (5294 <__aeabi_ddiv+0x624>)
    5070:	4293      	cmp	r3, r2
    5072:	dd00      	ble.n	5076 <__aeabi_ddiv+0x406>
    5074:	e65b      	b.n	4d2e <__aeabi_ddiv+0xbe>
    5076:	465a      	mov	r2, fp
    5078:	08c9      	lsrs	r1, r1, #3
    507a:	0750      	lsls	r0, r2, #29
    507c:	4308      	orrs	r0, r1
    507e:	0256      	lsls	r6, r2, #9
    5080:	4651      	mov	r1, sl
    5082:	2201      	movs	r2, #1
    5084:	055b      	lsls	r3, r3, #21
    5086:	4681      	mov	r9, r0
    5088:	0b36      	lsrs	r6, r6, #12
    508a:	0d5b      	lsrs	r3, r3, #21
    508c:	400a      	ands	r2, r1
    508e:	e655      	b.n	4d3c <__aeabi_ddiv+0xcc>
    5090:	2380      	movs	r3, #128	; 0x80
    5092:	031b      	lsls	r3, r3, #12
    5094:	421e      	tst	r6, r3
    5096:	d011      	beq.n	50bc <__aeabi_ddiv+0x44c>
    5098:	465a      	mov	r2, fp
    509a:	421a      	tst	r2, r3
    509c:	d10e      	bne.n	50bc <__aeabi_ddiv+0x44c>
    509e:	465e      	mov	r6, fp
    50a0:	431e      	orrs	r6, r3
    50a2:	0336      	lsls	r6, r6, #12
    50a4:	0b36      	lsrs	r6, r6, #12
    50a6:	002a      	movs	r2, r5
    50a8:	4689      	mov	r9, r1
    50aa:	4b7b      	ldr	r3, [pc, #492]	; (5298 <__aeabi_ddiv+0x628>)
    50ac:	e646      	b.n	4d3c <__aeabi_ddiv+0xcc>
    50ae:	2b03      	cmp	r3, #3
    50b0:	d100      	bne.n	50b4 <__aeabi_ddiv+0x444>
    50b2:	e0e1      	b.n	5278 <__aeabi_ddiv+0x608>
    50b4:	2b01      	cmp	r3, #1
    50b6:	d1bb      	bne.n	5030 <__aeabi_ddiv+0x3c0>
    50b8:	401a      	ands	r2, r3
    50ba:	e6bb      	b.n	4e34 <__aeabi_ddiv+0x1c4>
    50bc:	431e      	orrs	r6, r3
    50be:	0336      	lsls	r6, r6, #12
    50c0:	0b36      	lsrs	r6, r6, #12
    50c2:	4642      	mov	r2, r8
    50c4:	4b74      	ldr	r3, [pc, #464]	; (5298 <__aeabi_ddiv+0x628>)
    50c6:	e639      	b.n	4d3c <__aeabi_ddiv+0xcc>
    50c8:	2b00      	cmp	r3, #0
    50ca:	d0b1      	beq.n	5030 <__aeabi_ddiv+0x3c0>
    50cc:	197d      	adds	r5, r7, r5
    50ce:	1e4a      	subs	r2, r1, #1
    50d0:	42af      	cmp	r7, r5
    50d2:	d952      	bls.n	517a <__aeabi_ddiv+0x50a>
    50d4:	0011      	movs	r1, r2
    50d6:	42a5      	cmp	r5, r4
    50d8:	d1a8      	bne.n	502c <__aeabi_ddiv+0x3bc>
    50da:	9a03      	ldr	r2, [sp, #12]
    50dc:	429a      	cmp	r2, r3
    50de:	d1a5      	bne.n	502c <__aeabi_ddiv+0x3bc>
    50e0:	e7a6      	b.n	5030 <__aeabi_ddiv+0x3c0>
    50e2:	0003      	movs	r3, r0
    50e4:	003e      	movs	r6, r7
    50e6:	3b28      	subs	r3, #40	; 0x28
    50e8:	409e      	lsls	r6, r3
    50ea:	2300      	movs	r3, #0
    50ec:	4699      	mov	r9, r3
    50ee:	e654      	b.n	4d9a <__aeabi_ddiv+0x12a>
    50f0:	f001 f960 	bl	63b4 <__clzsi2>
    50f4:	3020      	adds	r0, #32
    50f6:	e641      	b.n	4d7c <__aeabi_ddiv+0x10c>
    50f8:	0003      	movs	r3, r0
    50fa:	4652      	mov	r2, sl
    50fc:	3b28      	subs	r3, #40	; 0x28
    50fe:	409a      	lsls	r2, r3
    5100:	2100      	movs	r1, #0
    5102:	4693      	mov	fp, r2
    5104:	e677      	b.n	4df6 <__aeabi_ddiv+0x186>
    5106:	4650      	mov	r0, sl
    5108:	f001 f954 	bl	63b4 <__clzsi2>
    510c:	3020      	adds	r0, #32
    510e:	e65e      	b.n	4dce <__aeabi_ddiv+0x15e>
    5110:	9b02      	ldr	r3, [sp, #8]
    5112:	2600      	movs	r6, #0
    5114:	42ab      	cmp	r3, r5
    5116:	d300      	bcc.n	511a <__aeabi_ddiv+0x4aa>
    5118:	e723      	b.n	4f62 <__aeabi_ddiv+0x2f2>
    511a:	9e03      	ldr	r6, [sp, #12]
    511c:	9902      	ldr	r1, [sp, #8]
    511e:	46b4      	mov	ip, r6
    5120:	4461      	add	r1, ip
    5122:	4688      	mov	r8, r1
    5124:	45b0      	cmp	r8, r6
    5126:	41b6      	sbcs	r6, r6
    5128:	465b      	mov	r3, fp
    512a:	4276      	negs	r6, r6
    512c:	19f6      	adds	r6, r6, r7
    512e:	18b2      	adds	r2, r6, r2
    5130:	3b01      	subs	r3, #1
    5132:	9102      	str	r1, [sp, #8]
    5134:	4297      	cmp	r7, r2
    5136:	d213      	bcs.n	5160 <__aeabi_ddiv+0x4f0>
    5138:	4290      	cmp	r0, r2
    513a:	d84f      	bhi.n	51dc <__aeabi_ddiv+0x56c>
    513c:	d100      	bne.n	5140 <__aeabi_ddiv+0x4d0>
    513e:	e08e      	b.n	525e <__aeabi_ddiv+0x5ee>
    5140:	1a16      	subs	r6, r2, r0
    5142:	469b      	mov	fp, r3
    5144:	e70d      	b.n	4f62 <__aeabi_ddiv+0x2f2>
    5146:	4589      	cmp	r9, r1
    5148:	d200      	bcs.n	514c <__aeabi_ddiv+0x4dc>
    514a:	e68e      	b.n	4e6a <__aeabi_ddiv+0x1fa>
    514c:	0874      	lsrs	r4, r6, #1
    514e:	464b      	mov	r3, r9
    5150:	07f6      	lsls	r6, r6, #31
    5152:	0035      	movs	r5, r6
    5154:	085b      	lsrs	r3, r3, #1
    5156:	431d      	orrs	r5, r3
    5158:	464b      	mov	r3, r9
    515a:	07db      	lsls	r3, r3, #31
    515c:	9302      	str	r3, [sp, #8]
    515e:	e68b      	b.n	4e78 <__aeabi_ddiv+0x208>
    5160:	4297      	cmp	r7, r2
    5162:	d1ed      	bne.n	5140 <__aeabi_ddiv+0x4d0>
    5164:	9903      	ldr	r1, [sp, #12]
    5166:	9c02      	ldr	r4, [sp, #8]
    5168:	42a1      	cmp	r1, r4
    516a:	d9e5      	bls.n	5138 <__aeabi_ddiv+0x4c8>
    516c:	1a3e      	subs	r6, r7, r0
    516e:	469b      	mov	fp, r3
    5170:	e6f7      	b.n	4f62 <__aeabi_ddiv+0x2f2>
    5172:	4698      	mov	r8, r3
    5174:	e6ca      	b.n	4f0c <__aeabi_ddiv+0x29c>
    5176:	001e      	movs	r6, r3
    5178:	e6a5      	b.n	4ec6 <__aeabi_ddiv+0x256>
    517a:	42ac      	cmp	r4, r5
    517c:	d83e      	bhi.n	51fc <__aeabi_ddiv+0x58c>
    517e:	d074      	beq.n	526a <__aeabi_ddiv+0x5fa>
    5180:	0011      	movs	r1, r2
    5182:	e753      	b.n	502c <__aeabi_ddiv+0x3bc>
    5184:	2101      	movs	r1, #1
    5186:	4249      	negs	r1, r1
    5188:	e752      	b.n	5030 <__aeabi_ddiv+0x3c0>
    518a:	001c      	movs	r4, r3
    518c:	e70e      	b.n	4fac <__aeabi_ddiv+0x33c>
    518e:	001e      	movs	r6, r3
    5190:	e72b      	b.n	4fea <__aeabi_ddiv+0x37a>
    5192:	2d1f      	cmp	r5, #31
    5194:	dc3c      	bgt.n	5210 <__aeabi_ddiv+0x5a0>
    5196:	2320      	movs	r3, #32
    5198:	000a      	movs	r2, r1
    519a:	4658      	mov	r0, fp
    519c:	1b5b      	subs	r3, r3, r5
    519e:	4098      	lsls	r0, r3
    51a0:	40ea      	lsrs	r2, r5
    51a2:	4099      	lsls	r1, r3
    51a4:	4302      	orrs	r2, r0
    51a6:	1e48      	subs	r0, r1, #1
    51a8:	4181      	sbcs	r1, r0
    51aa:	465e      	mov	r6, fp
    51ac:	4311      	orrs	r1, r2
    51ae:	40ee      	lsrs	r6, r5
    51b0:	074b      	lsls	r3, r1, #29
    51b2:	d009      	beq.n	51c8 <__aeabi_ddiv+0x558>
    51b4:	230f      	movs	r3, #15
    51b6:	400b      	ands	r3, r1
    51b8:	2b04      	cmp	r3, #4
    51ba:	d005      	beq.n	51c8 <__aeabi_ddiv+0x558>
    51bc:	000b      	movs	r3, r1
    51be:	1d19      	adds	r1, r3, #4
    51c0:	4299      	cmp	r1, r3
    51c2:	419b      	sbcs	r3, r3
    51c4:	425b      	negs	r3, r3
    51c6:	18f6      	adds	r6, r6, r3
    51c8:	0233      	lsls	r3, r6, #8
    51ca:	d53c      	bpl.n	5246 <__aeabi_ddiv+0x5d6>
    51cc:	4653      	mov	r3, sl
    51ce:	2201      	movs	r2, #1
    51d0:	2100      	movs	r1, #0
    51d2:	401a      	ands	r2, r3
    51d4:	2600      	movs	r6, #0
    51d6:	2301      	movs	r3, #1
    51d8:	4689      	mov	r9, r1
    51da:	e5af      	b.n	4d3c <__aeabi_ddiv+0xcc>
    51dc:	2302      	movs	r3, #2
    51de:	425b      	negs	r3, r3
    51e0:	469c      	mov	ip, r3
    51e2:	9c03      	ldr	r4, [sp, #12]
    51e4:	44e3      	add	fp, ip
    51e6:	46a4      	mov	ip, r4
    51e8:	9b02      	ldr	r3, [sp, #8]
    51ea:	4463      	add	r3, ip
    51ec:	4698      	mov	r8, r3
    51ee:	45a0      	cmp	r8, r4
    51f0:	41b6      	sbcs	r6, r6
    51f2:	4276      	negs	r6, r6
    51f4:	19f6      	adds	r6, r6, r7
    51f6:	9302      	str	r3, [sp, #8]
    51f8:	18b2      	adds	r2, r6, r2
    51fa:	e6b1      	b.n	4f60 <__aeabi_ddiv+0x2f0>
    51fc:	9803      	ldr	r0, [sp, #12]
    51fe:	1e8a      	subs	r2, r1, #2
    5200:	0041      	lsls	r1, r0, #1
    5202:	4281      	cmp	r1, r0
    5204:	41b6      	sbcs	r6, r6
    5206:	4276      	negs	r6, r6
    5208:	19f6      	adds	r6, r6, r7
    520a:	19ad      	adds	r5, r5, r6
    520c:	9103      	str	r1, [sp, #12]
    520e:	e761      	b.n	50d4 <__aeabi_ddiv+0x464>
    5210:	221f      	movs	r2, #31
    5212:	4252      	negs	r2, r2
    5214:	1ad3      	subs	r3, r2, r3
    5216:	465a      	mov	r2, fp
    5218:	40da      	lsrs	r2, r3
    521a:	0013      	movs	r3, r2
    521c:	2d20      	cmp	r5, #32
    521e:	d029      	beq.n	5274 <__aeabi_ddiv+0x604>
    5220:	2240      	movs	r2, #64	; 0x40
    5222:	4658      	mov	r0, fp
    5224:	1b55      	subs	r5, r2, r5
    5226:	40a8      	lsls	r0, r5
    5228:	4301      	orrs	r1, r0
    522a:	1e48      	subs	r0, r1, #1
    522c:	4181      	sbcs	r1, r0
    522e:	2007      	movs	r0, #7
    5230:	430b      	orrs	r3, r1
    5232:	4018      	ands	r0, r3
    5234:	2600      	movs	r6, #0
    5236:	2800      	cmp	r0, #0
    5238:	d009      	beq.n	524e <__aeabi_ddiv+0x5de>
    523a:	220f      	movs	r2, #15
    523c:	2600      	movs	r6, #0
    523e:	401a      	ands	r2, r3
    5240:	0019      	movs	r1, r3
    5242:	2a04      	cmp	r2, #4
    5244:	d1bb      	bne.n	51be <__aeabi_ddiv+0x54e>
    5246:	000b      	movs	r3, r1
    5248:	0770      	lsls	r0, r6, #29
    524a:	0276      	lsls	r6, r6, #9
    524c:	0b36      	lsrs	r6, r6, #12
    524e:	08db      	lsrs	r3, r3, #3
    5250:	4303      	orrs	r3, r0
    5252:	4699      	mov	r9, r3
    5254:	2201      	movs	r2, #1
    5256:	4653      	mov	r3, sl
    5258:	401a      	ands	r2, r3
    525a:	2300      	movs	r3, #0
    525c:	e56e      	b.n	4d3c <__aeabi_ddiv+0xcc>
    525e:	9902      	ldr	r1, [sp, #8]
    5260:	428d      	cmp	r5, r1
    5262:	d8bb      	bhi.n	51dc <__aeabi_ddiv+0x56c>
    5264:	469b      	mov	fp, r3
    5266:	2600      	movs	r6, #0
    5268:	e67b      	b.n	4f62 <__aeabi_ddiv+0x2f2>
    526a:	9803      	ldr	r0, [sp, #12]
    526c:	4298      	cmp	r0, r3
    526e:	d3c5      	bcc.n	51fc <__aeabi_ddiv+0x58c>
    5270:	0011      	movs	r1, r2
    5272:	e732      	b.n	50da <__aeabi_ddiv+0x46a>
    5274:	2000      	movs	r0, #0
    5276:	e7d7      	b.n	5228 <__aeabi_ddiv+0x5b8>
    5278:	2680      	movs	r6, #128	; 0x80
    527a:	465b      	mov	r3, fp
    527c:	0336      	lsls	r6, r6, #12
    527e:	431e      	orrs	r6, r3
    5280:	0336      	lsls	r6, r6, #12
    5282:	0b36      	lsrs	r6, r6, #12
    5284:	9a00      	ldr	r2, [sp, #0]
    5286:	4689      	mov	r9, r1
    5288:	4b03      	ldr	r3, [pc, #12]	; (5298 <__aeabi_ddiv+0x628>)
    528a:	e557      	b.n	4d3c <__aeabi_ddiv+0xcc>
    528c:	000003ff 	.word	0x000003ff
    5290:	feffffff 	.word	0xfeffffff
    5294:	000007fe 	.word	0x000007fe
    5298:	000007ff 	.word	0x000007ff

0000529c <__eqdf2>:
    529c:	b5f0      	push	{r4, r5, r6, r7, lr}
    529e:	465f      	mov	r7, fp
    52a0:	4656      	mov	r6, sl
    52a2:	464d      	mov	r5, r9
    52a4:	4644      	mov	r4, r8
    52a6:	b4f0      	push	{r4, r5, r6, r7}
    52a8:	031f      	lsls	r7, r3, #12
    52aa:	005c      	lsls	r4, r3, #1
    52ac:	0fdb      	lsrs	r3, r3, #31
    52ae:	469a      	mov	sl, r3
    52b0:	4b19      	ldr	r3, [pc, #100]	; (5318 <__eqdf2+0x7c>)
    52b2:	030e      	lsls	r6, r1, #12
    52b4:	004d      	lsls	r5, r1, #1
    52b6:	0fc9      	lsrs	r1, r1, #31
    52b8:	4680      	mov	r8, r0
    52ba:	0b36      	lsrs	r6, r6, #12
    52bc:	0d6d      	lsrs	r5, r5, #21
    52be:	468b      	mov	fp, r1
    52c0:	4691      	mov	r9, r2
    52c2:	0b3f      	lsrs	r7, r7, #12
    52c4:	0d64      	lsrs	r4, r4, #21
    52c6:	429d      	cmp	r5, r3
    52c8:	d019      	beq.n	52fe <__eqdf2+0x62>
    52ca:	4b13      	ldr	r3, [pc, #76]	; (5318 <__eqdf2+0x7c>)
    52cc:	429c      	cmp	r4, r3
    52ce:	d01b      	beq.n	5308 <__eqdf2+0x6c>
    52d0:	2301      	movs	r3, #1
    52d2:	42a5      	cmp	r5, r4
    52d4:	d006      	beq.n	52e4 <__eqdf2+0x48>
    52d6:	0018      	movs	r0, r3
    52d8:	bc3c      	pop	{r2, r3, r4, r5}
    52da:	4690      	mov	r8, r2
    52dc:	4699      	mov	r9, r3
    52de:	46a2      	mov	sl, r4
    52e0:	46ab      	mov	fp, r5
    52e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    52e4:	42be      	cmp	r6, r7
    52e6:	d1f6      	bne.n	52d6 <__eqdf2+0x3a>
    52e8:	45c8      	cmp	r8, r9
    52ea:	d1f4      	bne.n	52d6 <__eqdf2+0x3a>
    52ec:	45d3      	cmp	fp, sl
    52ee:	d010      	beq.n	5312 <__eqdf2+0x76>
    52f0:	2d00      	cmp	r5, #0
    52f2:	d1f0      	bne.n	52d6 <__eqdf2+0x3a>
    52f4:	4330      	orrs	r0, r6
    52f6:	0003      	movs	r3, r0
    52f8:	1e5a      	subs	r2, r3, #1
    52fa:	4193      	sbcs	r3, r2
    52fc:	e7eb      	b.n	52d6 <__eqdf2+0x3a>
    52fe:	0031      	movs	r1, r6
    5300:	2301      	movs	r3, #1
    5302:	4301      	orrs	r1, r0
    5304:	d1e7      	bne.n	52d6 <__eqdf2+0x3a>
    5306:	e7e0      	b.n	52ca <__eqdf2+0x2e>
    5308:	433a      	orrs	r2, r7
    530a:	2301      	movs	r3, #1
    530c:	2a00      	cmp	r2, #0
    530e:	d1e2      	bne.n	52d6 <__eqdf2+0x3a>
    5310:	e7de      	b.n	52d0 <__eqdf2+0x34>
    5312:	2300      	movs	r3, #0
    5314:	e7df      	b.n	52d6 <__eqdf2+0x3a>
    5316:	46c0      	nop			; (mov r8, r8)
    5318:	000007ff 	.word	0x000007ff

0000531c <__gedf2>:
    531c:	b5f0      	push	{r4, r5, r6, r7, lr}
    531e:	465f      	mov	r7, fp
    5320:	4644      	mov	r4, r8
    5322:	4656      	mov	r6, sl
    5324:	464d      	mov	r5, r9
    5326:	b4f0      	push	{r4, r5, r6, r7}
    5328:	031f      	lsls	r7, r3, #12
    532a:	0b3c      	lsrs	r4, r7, #12
    532c:	4f2c      	ldr	r7, [pc, #176]	; (53e0 <__gedf2+0xc4>)
    532e:	030e      	lsls	r6, r1, #12
    5330:	004d      	lsls	r5, r1, #1
    5332:	46a3      	mov	fp, r4
    5334:	005c      	lsls	r4, r3, #1
    5336:	4684      	mov	ip, r0
    5338:	0b36      	lsrs	r6, r6, #12
    533a:	0d6d      	lsrs	r5, r5, #21
    533c:	0fc9      	lsrs	r1, r1, #31
    533e:	4690      	mov	r8, r2
    5340:	0d64      	lsrs	r4, r4, #21
    5342:	0fdb      	lsrs	r3, r3, #31
    5344:	42bd      	cmp	r5, r7
    5346:	d02b      	beq.n	53a0 <__gedf2+0x84>
    5348:	4f25      	ldr	r7, [pc, #148]	; (53e0 <__gedf2+0xc4>)
    534a:	42bc      	cmp	r4, r7
    534c:	d02e      	beq.n	53ac <__gedf2+0x90>
    534e:	2d00      	cmp	r5, #0
    5350:	d10e      	bne.n	5370 <__gedf2+0x54>
    5352:	4330      	orrs	r0, r6
    5354:	0007      	movs	r7, r0
    5356:	4681      	mov	r9, r0
    5358:	4278      	negs	r0, r7
    535a:	4178      	adcs	r0, r7
    535c:	2c00      	cmp	r4, #0
    535e:	d117      	bne.n	5390 <__gedf2+0x74>
    5360:	465f      	mov	r7, fp
    5362:	433a      	orrs	r2, r7
    5364:	d114      	bne.n	5390 <__gedf2+0x74>
    5366:	464b      	mov	r3, r9
    5368:	2000      	movs	r0, #0
    536a:	2b00      	cmp	r3, #0
    536c:	d00a      	beq.n	5384 <__gedf2+0x68>
    536e:	e006      	b.n	537e <__gedf2+0x62>
    5370:	2c00      	cmp	r4, #0
    5372:	d102      	bne.n	537a <__gedf2+0x5e>
    5374:	4658      	mov	r0, fp
    5376:	4302      	orrs	r2, r0
    5378:	d001      	beq.n	537e <__gedf2+0x62>
    537a:	4299      	cmp	r1, r3
    537c:	d01a      	beq.n	53b4 <__gedf2+0x98>
    537e:	2301      	movs	r3, #1
    5380:	4248      	negs	r0, r1
    5382:	4318      	orrs	r0, r3
    5384:	bc3c      	pop	{r2, r3, r4, r5}
    5386:	4690      	mov	r8, r2
    5388:	4699      	mov	r9, r3
    538a:	46a2      	mov	sl, r4
    538c:	46ab      	mov	fp, r5
    538e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5390:	2800      	cmp	r0, #0
    5392:	d0f2      	beq.n	537a <__gedf2+0x5e>
    5394:	4258      	negs	r0, r3
    5396:	4158      	adcs	r0, r3
    5398:	2201      	movs	r2, #1
    539a:	4240      	negs	r0, r0
    539c:	4310      	orrs	r0, r2
    539e:	e7f1      	b.n	5384 <__gedf2+0x68>
    53a0:	0037      	movs	r7, r6
    53a2:	4307      	orrs	r7, r0
    53a4:	d0d0      	beq.n	5348 <__gedf2+0x2c>
    53a6:	2002      	movs	r0, #2
    53a8:	4240      	negs	r0, r0
    53aa:	e7eb      	b.n	5384 <__gedf2+0x68>
    53ac:	465f      	mov	r7, fp
    53ae:	4317      	orrs	r7, r2
    53b0:	d0cd      	beq.n	534e <__gedf2+0x32>
    53b2:	e7f8      	b.n	53a6 <__gedf2+0x8a>
    53b4:	42a5      	cmp	r5, r4
    53b6:	dce2      	bgt.n	537e <__gedf2+0x62>
    53b8:	db05      	blt.n	53c6 <__gedf2+0xaa>
    53ba:	455e      	cmp	r6, fp
    53bc:	d8df      	bhi.n	537e <__gedf2+0x62>
    53be:	d008      	beq.n	53d2 <__gedf2+0xb6>
    53c0:	2000      	movs	r0, #0
    53c2:	455e      	cmp	r6, fp
    53c4:	d2de      	bcs.n	5384 <__gedf2+0x68>
    53c6:	4248      	negs	r0, r1
    53c8:	4148      	adcs	r0, r1
    53ca:	2301      	movs	r3, #1
    53cc:	4240      	negs	r0, r0
    53ce:	4318      	orrs	r0, r3
    53d0:	e7d8      	b.n	5384 <__gedf2+0x68>
    53d2:	45c4      	cmp	ip, r8
    53d4:	d8d3      	bhi.n	537e <__gedf2+0x62>
    53d6:	2000      	movs	r0, #0
    53d8:	45c4      	cmp	ip, r8
    53da:	d3f4      	bcc.n	53c6 <__gedf2+0xaa>
    53dc:	e7d2      	b.n	5384 <__gedf2+0x68>
    53de:	46c0      	nop			; (mov r8, r8)
    53e0:	000007ff 	.word	0x000007ff

000053e4 <__ledf2>:
    53e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    53e6:	465f      	mov	r7, fp
    53e8:	464d      	mov	r5, r9
    53ea:	4644      	mov	r4, r8
    53ec:	4656      	mov	r6, sl
    53ee:	b4f0      	push	{r4, r5, r6, r7}
    53f0:	031c      	lsls	r4, r3, #12
    53f2:	0b24      	lsrs	r4, r4, #12
    53f4:	46a4      	mov	ip, r4
    53f6:	4c2f      	ldr	r4, [pc, #188]	; (54b4 <__ledf2+0xd0>)
    53f8:	030f      	lsls	r7, r1, #12
    53fa:	004d      	lsls	r5, r1, #1
    53fc:	005e      	lsls	r6, r3, #1
    53fe:	0fc9      	lsrs	r1, r1, #31
    5400:	4680      	mov	r8, r0
    5402:	0b3f      	lsrs	r7, r7, #12
    5404:	0d6d      	lsrs	r5, r5, #21
    5406:	468b      	mov	fp, r1
    5408:	4691      	mov	r9, r2
    540a:	0d76      	lsrs	r6, r6, #21
    540c:	0fdb      	lsrs	r3, r3, #31
    540e:	42a5      	cmp	r5, r4
    5410:	d020      	beq.n	5454 <__ledf2+0x70>
    5412:	4c28      	ldr	r4, [pc, #160]	; (54b4 <__ledf2+0xd0>)
    5414:	42a6      	cmp	r6, r4
    5416:	d022      	beq.n	545e <__ledf2+0x7a>
    5418:	2d00      	cmp	r5, #0
    541a:	d112      	bne.n	5442 <__ledf2+0x5e>
    541c:	4338      	orrs	r0, r7
    541e:	4244      	negs	r4, r0
    5420:	4144      	adcs	r4, r0
    5422:	2e00      	cmp	r6, #0
    5424:	d020      	beq.n	5468 <__ledf2+0x84>
    5426:	2c00      	cmp	r4, #0
    5428:	d00d      	beq.n	5446 <__ledf2+0x62>
    542a:	425c      	negs	r4, r3
    542c:	4163      	adcs	r3, r4
    542e:	2401      	movs	r4, #1
    5430:	425b      	negs	r3, r3
    5432:	431c      	orrs	r4, r3
    5434:	0020      	movs	r0, r4
    5436:	bc3c      	pop	{r2, r3, r4, r5}
    5438:	4690      	mov	r8, r2
    543a:	4699      	mov	r9, r3
    543c:	46a2      	mov	sl, r4
    543e:	46ab      	mov	fp, r5
    5440:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5442:	2e00      	cmp	r6, #0
    5444:	d017      	beq.n	5476 <__ledf2+0x92>
    5446:	455b      	cmp	r3, fp
    5448:	d019      	beq.n	547e <__ledf2+0x9a>
    544a:	465b      	mov	r3, fp
    544c:	425c      	negs	r4, r3
    544e:	2301      	movs	r3, #1
    5450:	431c      	orrs	r4, r3
    5452:	e7ef      	b.n	5434 <__ledf2+0x50>
    5454:	0039      	movs	r1, r7
    5456:	2402      	movs	r4, #2
    5458:	4301      	orrs	r1, r0
    545a:	d1eb      	bne.n	5434 <__ledf2+0x50>
    545c:	e7d9      	b.n	5412 <__ledf2+0x2e>
    545e:	4661      	mov	r1, ip
    5460:	2402      	movs	r4, #2
    5462:	4311      	orrs	r1, r2
    5464:	d1e6      	bne.n	5434 <__ledf2+0x50>
    5466:	e7d7      	b.n	5418 <__ledf2+0x34>
    5468:	4661      	mov	r1, ip
    546a:	430a      	orrs	r2, r1
    546c:	d1db      	bne.n	5426 <__ledf2+0x42>
    546e:	2400      	movs	r4, #0
    5470:	2800      	cmp	r0, #0
    5472:	d0df      	beq.n	5434 <__ledf2+0x50>
    5474:	e7e9      	b.n	544a <__ledf2+0x66>
    5476:	4661      	mov	r1, ip
    5478:	430a      	orrs	r2, r1
    547a:	d1e4      	bne.n	5446 <__ledf2+0x62>
    547c:	e7e5      	b.n	544a <__ledf2+0x66>
    547e:	42b5      	cmp	r5, r6
    5480:	dd03      	ble.n	548a <__ledf2+0xa6>
    5482:	2201      	movs	r2, #1
    5484:	425c      	negs	r4, r3
    5486:	4314      	orrs	r4, r2
    5488:	e7d4      	b.n	5434 <__ledf2+0x50>
    548a:	42b5      	cmp	r5, r6
    548c:	dbcd      	blt.n	542a <__ledf2+0x46>
    548e:	4567      	cmp	r7, ip
    5490:	d8db      	bhi.n	544a <__ledf2+0x66>
    5492:	d009      	beq.n	54a8 <__ledf2+0xc4>
    5494:	2400      	movs	r4, #0
    5496:	4567      	cmp	r7, ip
    5498:	d2cc      	bcs.n	5434 <__ledf2+0x50>
    549a:	4659      	mov	r1, fp
    549c:	424c      	negs	r4, r1
    549e:	4161      	adcs	r1, r4
    54a0:	2401      	movs	r4, #1
    54a2:	4249      	negs	r1, r1
    54a4:	430c      	orrs	r4, r1
    54a6:	e7c5      	b.n	5434 <__ledf2+0x50>
    54a8:	45c8      	cmp	r8, r9
    54aa:	d8ce      	bhi.n	544a <__ledf2+0x66>
    54ac:	2400      	movs	r4, #0
    54ae:	45c8      	cmp	r8, r9
    54b0:	d3f3      	bcc.n	549a <__ledf2+0xb6>
    54b2:	e7bf      	b.n	5434 <__ledf2+0x50>
    54b4:	000007ff 	.word	0x000007ff

000054b8 <__aeabi_dmul>:
    54b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    54ba:	465f      	mov	r7, fp
    54bc:	4656      	mov	r6, sl
    54be:	464d      	mov	r5, r9
    54c0:	4644      	mov	r4, r8
    54c2:	b4f0      	push	{r4, r5, r6, r7}
    54c4:	030d      	lsls	r5, r1, #12
    54c6:	4699      	mov	r9, r3
    54c8:	004e      	lsls	r6, r1, #1
    54ca:	0b2b      	lsrs	r3, r5, #12
    54cc:	b087      	sub	sp, #28
    54ce:	0007      	movs	r7, r0
    54d0:	4692      	mov	sl, r2
    54d2:	4680      	mov	r8, r0
    54d4:	469b      	mov	fp, r3
    54d6:	0d76      	lsrs	r6, r6, #21
    54d8:	0fcc      	lsrs	r4, r1, #31
    54da:	2e00      	cmp	r6, #0
    54dc:	d069      	beq.n	55b2 <__aeabi_dmul+0xfa>
    54de:	4b6d      	ldr	r3, [pc, #436]	; (5694 <__aeabi_dmul+0x1dc>)
    54e0:	429e      	cmp	r6, r3
    54e2:	d035      	beq.n	5550 <__aeabi_dmul+0x98>
    54e4:	465b      	mov	r3, fp
    54e6:	2280      	movs	r2, #128	; 0x80
    54e8:	00dd      	lsls	r5, r3, #3
    54ea:	0412      	lsls	r2, r2, #16
    54ec:	0f43      	lsrs	r3, r0, #29
    54ee:	4313      	orrs	r3, r2
    54f0:	432b      	orrs	r3, r5
    54f2:	469b      	mov	fp, r3
    54f4:	00c3      	lsls	r3, r0, #3
    54f6:	4698      	mov	r8, r3
    54f8:	4b67      	ldr	r3, [pc, #412]	; (5698 <__aeabi_dmul+0x1e0>)
    54fa:	2700      	movs	r7, #0
    54fc:	469c      	mov	ip, r3
    54fe:	2300      	movs	r3, #0
    5500:	4466      	add	r6, ip
    5502:	9301      	str	r3, [sp, #4]
    5504:	464a      	mov	r2, r9
    5506:	0315      	lsls	r5, r2, #12
    5508:	0050      	lsls	r0, r2, #1
    550a:	0fd2      	lsrs	r2, r2, #31
    550c:	4653      	mov	r3, sl
    550e:	0b2d      	lsrs	r5, r5, #12
    5510:	0d40      	lsrs	r0, r0, #21
    5512:	4691      	mov	r9, r2
    5514:	d100      	bne.n	5518 <__aeabi_dmul+0x60>
    5516:	e076      	b.n	5606 <__aeabi_dmul+0x14e>
    5518:	4a5e      	ldr	r2, [pc, #376]	; (5694 <__aeabi_dmul+0x1dc>)
    551a:	4290      	cmp	r0, r2
    551c:	d06c      	beq.n	55f8 <__aeabi_dmul+0x140>
    551e:	2280      	movs	r2, #128	; 0x80
    5520:	0f5b      	lsrs	r3, r3, #29
    5522:	0412      	lsls	r2, r2, #16
    5524:	4313      	orrs	r3, r2
    5526:	4a5c      	ldr	r2, [pc, #368]	; (5698 <__aeabi_dmul+0x1e0>)
    5528:	00ed      	lsls	r5, r5, #3
    552a:	4694      	mov	ip, r2
    552c:	431d      	orrs	r5, r3
    552e:	4653      	mov	r3, sl
    5530:	2200      	movs	r2, #0
    5532:	00db      	lsls	r3, r3, #3
    5534:	4460      	add	r0, ip
    5536:	4649      	mov	r1, r9
    5538:	1836      	adds	r6, r6, r0
    553a:	1c70      	adds	r0, r6, #1
    553c:	4061      	eors	r1, r4
    553e:	9002      	str	r0, [sp, #8]
    5540:	4317      	orrs	r7, r2
    5542:	2f0f      	cmp	r7, #15
    5544:	d900      	bls.n	5548 <__aeabi_dmul+0x90>
    5546:	e0af      	b.n	56a8 <__aeabi_dmul+0x1f0>
    5548:	4854      	ldr	r0, [pc, #336]	; (569c <__aeabi_dmul+0x1e4>)
    554a:	00bf      	lsls	r7, r7, #2
    554c:	59c7      	ldr	r7, [r0, r7]
    554e:	46bf      	mov	pc, r7
    5550:	465b      	mov	r3, fp
    5552:	431f      	orrs	r7, r3
    5554:	d000      	beq.n	5558 <__aeabi_dmul+0xa0>
    5556:	e088      	b.n	566a <__aeabi_dmul+0x1b2>
    5558:	2300      	movs	r3, #0
    555a:	469b      	mov	fp, r3
    555c:	4698      	mov	r8, r3
    555e:	3302      	adds	r3, #2
    5560:	2708      	movs	r7, #8
    5562:	9301      	str	r3, [sp, #4]
    5564:	e7ce      	b.n	5504 <__aeabi_dmul+0x4c>
    5566:	4649      	mov	r1, r9
    5568:	2a02      	cmp	r2, #2
    556a:	d06a      	beq.n	5642 <__aeabi_dmul+0x18a>
    556c:	2a03      	cmp	r2, #3
    556e:	d100      	bne.n	5572 <__aeabi_dmul+0xba>
    5570:	e209      	b.n	5986 <__aeabi_dmul+0x4ce>
    5572:	2a01      	cmp	r2, #1
    5574:	d000      	beq.n	5578 <__aeabi_dmul+0xc0>
    5576:	e1bb      	b.n	58f0 <__aeabi_dmul+0x438>
    5578:	4011      	ands	r1, r2
    557a:	2200      	movs	r2, #0
    557c:	2300      	movs	r3, #0
    557e:	2500      	movs	r5, #0
    5580:	4690      	mov	r8, r2
    5582:	b2cc      	uxtb	r4, r1
    5584:	2100      	movs	r1, #0
    5586:	032d      	lsls	r5, r5, #12
    5588:	0d0a      	lsrs	r2, r1, #20
    558a:	0512      	lsls	r2, r2, #20
    558c:	0b2d      	lsrs	r5, r5, #12
    558e:	4315      	orrs	r5, r2
    5590:	4a43      	ldr	r2, [pc, #268]	; (56a0 <__aeabi_dmul+0x1e8>)
    5592:	051b      	lsls	r3, r3, #20
    5594:	4015      	ands	r5, r2
    5596:	431d      	orrs	r5, r3
    5598:	006d      	lsls	r5, r5, #1
    559a:	07e4      	lsls	r4, r4, #31
    559c:	086d      	lsrs	r5, r5, #1
    559e:	4325      	orrs	r5, r4
    55a0:	4640      	mov	r0, r8
    55a2:	0029      	movs	r1, r5
    55a4:	b007      	add	sp, #28
    55a6:	bc3c      	pop	{r2, r3, r4, r5}
    55a8:	4690      	mov	r8, r2
    55aa:	4699      	mov	r9, r3
    55ac:	46a2      	mov	sl, r4
    55ae:	46ab      	mov	fp, r5
    55b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    55b2:	4303      	orrs	r3, r0
    55b4:	d052      	beq.n	565c <__aeabi_dmul+0x1a4>
    55b6:	465b      	mov	r3, fp
    55b8:	2b00      	cmp	r3, #0
    55ba:	d100      	bne.n	55be <__aeabi_dmul+0x106>
    55bc:	e18a      	b.n	58d4 <__aeabi_dmul+0x41c>
    55be:	4658      	mov	r0, fp
    55c0:	f000 fef8 	bl	63b4 <__clzsi2>
    55c4:	0003      	movs	r3, r0
    55c6:	3b0b      	subs	r3, #11
    55c8:	2b1c      	cmp	r3, #28
    55ca:	dd00      	ble.n	55ce <__aeabi_dmul+0x116>
    55cc:	e17b      	b.n	58c6 <__aeabi_dmul+0x40e>
    55ce:	221d      	movs	r2, #29
    55d0:	1ad3      	subs	r3, r2, r3
    55d2:	003a      	movs	r2, r7
    55d4:	0001      	movs	r1, r0
    55d6:	465d      	mov	r5, fp
    55d8:	40da      	lsrs	r2, r3
    55da:	3908      	subs	r1, #8
    55dc:	408d      	lsls	r5, r1
    55de:	0013      	movs	r3, r2
    55e0:	408f      	lsls	r7, r1
    55e2:	432b      	orrs	r3, r5
    55e4:	469b      	mov	fp, r3
    55e6:	46b8      	mov	r8, r7
    55e8:	4b2e      	ldr	r3, [pc, #184]	; (56a4 <__aeabi_dmul+0x1ec>)
    55ea:	2700      	movs	r7, #0
    55ec:	469c      	mov	ip, r3
    55ee:	2300      	movs	r3, #0
    55f0:	4460      	add	r0, ip
    55f2:	4246      	negs	r6, r0
    55f4:	9301      	str	r3, [sp, #4]
    55f6:	e785      	b.n	5504 <__aeabi_dmul+0x4c>
    55f8:	4652      	mov	r2, sl
    55fa:	432a      	orrs	r2, r5
    55fc:	d12c      	bne.n	5658 <__aeabi_dmul+0x1a0>
    55fe:	2500      	movs	r5, #0
    5600:	2300      	movs	r3, #0
    5602:	2202      	movs	r2, #2
    5604:	e797      	b.n	5536 <__aeabi_dmul+0x7e>
    5606:	4652      	mov	r2, sl
    5608:	432a      	orrs	r2, r5
    560a:	d021      	beq.n	5650 <__aeabi_dmul+0x198>
    560c:	2d00      	cmp	r5, #0
    560e:	d100      	bne.n	5612 <__aeabi_dmul+0x15a>
    5610:	e154      	b.n	58bc <__aeabi_dmul+0x404>
    5612:	0028      	movs	r0, r5
    5614:	f000 fece 	bl	63b4 <__clzsi2>
    5618:	0003      	movs	r3, r0
    561a:	3b0b      	subs	r3, #11
    561c:	2b1c      	cmp	r3, #28
    561e:	dd00      	ble.n	5622 <__aeabi_dmul+0x16a>
    5620:	e146      	b.n	58b0 <__aeabi_dmul+0x3f8>
    5622:	211d      	movs	r1, #29
    5624:	1acb      	subs	r3, r1, r3
    5626:	4651      	mov	r1, sl
    5628:	0002      	movs	r2, r0
    562a:	40d9      	lsrs	r1, r3
    562c:	4653      	mov	r3, sl
    562e:	3a08      	subs	r2, #8
    5630:	4095      	lsls	r5, r2
    5632:	4093      	lsls	r3, r2
    5634:	430d      	orrs	r5, r1
    5636:	4a1b      	ldr	r2, [pc, #108]	; (56a4 <__aeabi_dmul+0x1ec>)
    5638:	4694      	mov	ip, r2
    563a:	4460      	add	r0, ip
    563c:	4240      	negs	r0, r0
    563e:	2200      	movs	r2, #0
    5640:	e779      	b.n	5536 <__aeabi_dmul+0x7e>
    5642:	2401      	movs	r4, #1
    5644:	2200      	movs	r2, #0
    5646:	400c      	ands	r4, r1
    5648:	4b12      	ldr	r3, [pc, #72]	; (5694 <__aeabi_dmul+0x1dc>)
    564a:	2500      	movs	r5, #0
    564c:	4690      	mov	r8, r2
    564e:	e799      	b.n	5584 <__aeabi_dmul+0xcc>
    5650:	2500      	movs	r5, #0
    5652:	2300      	movs	r3, #0
    5654:	2201      	movs	r2, #1
    5656:	e76e      	b.n	5536 <__aeabi_dmul+0x7e>
    5658:	2203      	movs	r2, #3
    565a:	e76c      	b.n	5536 <__aeabi_dmul+0x7e>
    565c:	2300      	movs	r3, #0
    565e:	469b      	mov	fp, r3
    5660:	4698      	mov	r8, r3
    5662:	3301      	adds	r3, #1
    5664:	2704      	movs	r7, #4
    5666:	9301      	str	r3, [sp, #4]
    5668:	e74c      	b.n	5504 <__aeabi_dmul+0x4c>
    566a:	2303      	movs	r3, #3
    566c:	270c      	movs	r7, #12
    566e:	9301      	str	r3, [sp, #4]
    5670:	e748      	b.n	5504 <__aeabi_dmul+0x4c>
    5672:	2300      	movs	r3, #0
    5674:	2580      	movs	r5, #128	; 0x80
    5676:	4698      	mov	r8, r3
    5678:	2400      	movs	r4, #0
    567a:	032d      	lsls	r5, r5, #12
    567c:	4b05      	ldr	r3, [pc, #20]	; (5694 <__aeabi_dmul+0x1dc>)
    567e:	e781      	b.n	5584 <__aeabi_dmul+0xcc>
    5680:	465d      	mov	r5, fp
    5682:	4643      	mov	r3, r8
    5684:	9a01      	ldr	r2, [sp, #4]
    5686:	e76f      	b.n	5568 <__aeabi_dmul+0xb0>
    5688:	465d      	mov	r5, fp
    568a:	4643      	mov	r3, r8
    568c:	0021      	movs	r1, r4
    568e:	9a01      	ldr	r2, [sp, #4]
    5690:	e76a      	b.n	5568 <__aeabi_dmul+0xb0>
    5692:	46c0      	nop			; (mov r8, r8)
    5694:	000007ff 	.word	0x000007ff
    5698:	fffffc01 	.word	0xfffffc01
    569c:	00006500 	.word	0x00006500
    56a0:	800fffff 	.word	0x800fffff
    56a4:	000003f3 	.word	0x000003f3
    56a8:	4642      	mov	r2, r8
    56aa:	0c12      	lsrs	r2, r2, #16
    56ac:	4691      	mov	r9, r2
    56ae:	0c1a      	lsrs	r2, r3, #16
    56b0:	4694      	mov	ip, r2
    56b2:	4642      	mov	r2, r8
    56b4:	0417      	lsls	r7, r2, #16
    56b6:	464a      	mov	r2, r9
    56b8:	041b      	lsls	r3, r3, #16
    56ba:	0c1b      	lsrs	r3, r3, #16
    56bc:	435a      	muls	r2, r3
    56be:	4660      	mov	r0, ip
    56c0:	4690      	mov	r8, r2
    56c2:	464a      	mov	r2, r9
    56c4:	4342      	muls	r2, r0
    56c6:	0010      	movs	r0, r2
    56c8:	9203      	str	r2, [sp, #12]
    56ca:	4662      	mov	r2, ip
    56cc:	001c      	movs	r4, r3
    56ce:	0c3f      	lsrs	r7, r7, #16
    56d0:	437a      	muls	r2, r7
    56d2:	437c      	muls	r4, r7
    56d4:	4442      	add	r2, r8
    56d6:	9201      	str	r2, [sp, #4]
    56d8:	0c22      	lsrs	r2, r4, #16
    56da:	4692      	mov	sl, r2
    56dc:	9a01      	ldr	r2, [sp, #4]
    56de:	4452      	add	r2, sl
    56e0:	4590      	cmp	r8, r2
    56e2:	d906      	bls.n	56f2 <__aeabi_dmul+0x23a>
    56e4:	4682      	mov	sl, r0
    56e6:	2080      	movs	r0, #128	; 0x80
    56e8:	0240      	lsls	r0, r0, #9
    56ea:	4680      	mov	r8, r0
    56ec:	44c2      	add	sl, r8
    56ee:	4650      	mov	r0, sl
    56f0:	9003      	str	r0, [sp, #12]
    56f2:	0c10      	lsrs	r0, r2, #16
    56f4:	9004      	str	r0, [sp, #16]
    56f6:	4648      	mov	r0, r9
    56f8:	0424      	lsls	r4, r4, #16
    56fa:	0c24      	lsrs	r4, r4, #16
    56fc:	0412      	lsls	r2, r2, #16
    56fe:	1912      	adds	r2, r2, r4
    5700:	9205      	str	r2, [sp, #20]
    5702:	0c2a      	lsrs	r2, r5, #16
    5704:	042d      	lsls	r5, r5, #16
    5706:	0c2d      	lsrs	r5, r5, #16
    5708:	4368      	muls	r0, r5
    570a:	002c      	movs	r4, r5
    570c:	4682      	mov	sl, r0
    570e:	4648      	mov	r0, r9
    5710:	437c      	muls	r4, r7
    5712:	4350      	muls	r0, r2
    5714:	4681      	mov	r9, r0
    5716:	0c20      	lsrs	r0, r4, #16
    5718:	4680      	mov	r8, r0
    571a:	4357      	muls	r7, r2
    571c:	4457      	add	r7, sl
    571e:	4447      	add	r7, r8
    5720:	45ba      	cmp	sl, r7
    5722:	d903      	bls.n	572c <__aeabi_dmul+0x274>
    5724:	2080      	movs	r0, #128	; 0x80
    5726:	0240      	lsls	r0, r0, #9
    5728:	4680      	mov	r8, r0
    572a:	44c1      	add	r9, r8
    572c:	0c38      	lsrs	r0, r7, #16
    572e:	043f      	lsls	r7, r7, #16
    5730:	46b8      	mov	r8, r7
    5732:	4448      	add	r0, r9
    5734:	0424      	lsls	r4, r4, #16
    5736:	0c24      	lsrs	r4, r4, #16
    5738:	9001      	str	r0, [sp, #4]
    573a:	9804      	ldr	r0, [sp, #16]
    573c:	44a0      	add	r8, r4
    573e:	4440      	add	r0, r8
    5740:	9004      	str	r0, [sp, #16]
    5742:	4658      	mov	r0, fp
    5744:	0c00      	lsrs	r0, r0, #16
    5746:	4681      	mov	r9, r0
    5748:	4658      	mov	r0, fp
    574a:	0404      	lsls	r4, r0, #16
    574c:	0c20      	lsrs	r0, r4, #16
    574e:	4682      	mov	sl, r0
    5750:	0007      	movs	r7, r0
    5752:	4648      	mov	r0, r9
    5754:	435f      	muls	r7, r3
    5756:	464c      	mov	r4, r9
    5758:	4343      	muls	r3, r0
    575a:	4660      	mov	r0, ip
    575c:	4360      	muls	r0, r4
    575e:	4664      	mov	r4, ip
    5760:	4683      	mov	fp, r0
    5762:	4650      	mov	r0, sl
    5764:	4344      	muls	r4, r0
    5766:	0c38      	lsrs	r0, r7, #16
    5768:	4684      	mov	ip, r0
    576a:	18e4      	adds	r4, r4, r3
    576c:	4464      	add	r4, ip
    576e:	42a3      	cmp	r3, r4
    5770:	d903      	bls.n	577a <__aeabi_dmul+0x2c2>
    5772:	2380      	movs	r3, #128	; 0x80
    5774:	025b      	lsls	r3, r3, #9
    5776:	469c      	mov	ip, r3
    5778:	44e3      	add	fp, ip
    577a:	4648      	mov	r0, r9
    577c:	043f      	lsls	r7, r7, #16
    577e:	0c23      	lsrs	r3, r4, #16
    5780:	0c3f      	lsrs	r7, r7, #16
    5782:	0424      	lsls	r4, r4, #16
    5784:	19e4      	adds	r4, r4, r7
    5786:	4657      	mov	r7, sl
    5788:	4368      	muls	r0, r5
    578a:	436f      	muls	r7, r5
    578c:	4684      	mov	ip, r0
    578e:	464d      	mov	r5, r9
    5790:	4650      	mov	r0, sl
    5792:	4355      	muls	r5, r2
    5794:	4342      	muls	r2, r0
    5796:	0c38      	lsrs	r0, r7, #16
    5798:	4681      	mov	r9, r0
    579a:	4462      	add	r2, ip
    579c:	444a      	add	r2, r9
    579e:	445b      	add	r3, fp
    57a0:	4594      	cmp	ip, r2
    57a2:	d903      	bls.n	57ac <__aeabi_dmul+0x2f4>
    57a4:	2080      	movs	r0, #128	; 0x80
    57a6:	0240      	lsls	r0, r0, #9
    57a8:	4684      	mov	ip, r0
    57aa:	4465      	add	r5, ip
    57ac:	9803      	ldr	r0, [sp, #12]
    57ae:	043f      	lsls	r7, r7, #16
    57b0:	4683      	mov	fp, r0
    57b2:	9804      	ldr	r0, [sp, #16]
    57b4:	0c3f      	lsrs	r7, r7, #16
    57b6:	4684      	mov	ip, r0
    57b8:	44e3      	add	fp, ip
    57ba:	45c3      	cmp	fp, r8
    57bc:	4180      	sbcs	r0, r0
    57be:	4240      	negs	r0, r0
    57c0:	4682      	mov	sl, r0
    57c2:	0410      	lsls	r0, r2, #16
    57c4:	4684      	mov	ip, r0
    57c6:	9801      	ldr	r0, [sp, #4]
    57c8:	4467      	add	r7, ip
    57ca:	4684      	mov	ip, r0
    57cc:	4467      	add	r7, ip
    57ce:	44a3      	add	fp, r4
    57d0:	46bc      	mov	ip, r7
    57d2:	45a3      	cmp	fp, r4
    57d4:	41a4      	sbcs	r4, r4
    57d6:	4699      	mov	r9, r3
    57d8:	44d4      	add	ip, sl
    57da:	4264      	negs	r4, r4
    57dc:	4287      	cmp	r7, r0
    57de:	41bf      	sbcs	r7, r7
    57e0:	45d4      	cmp	ip, sl
    57e2:	4180      	sbcs	r0, r0
    57e4:	44e1      	add	r9, ip
    57e6:	46a0      	mov	r8, r4
    57e8:	4599      	cmp	r9, r3
    57ea:	419b      	sbcs	r3, r3
    57ec:	427f      	negs	r7, r7
    57ee:	4240      	negs	r0, r0
    57f0:	44c8      	add	r8, r9
    57f2:	4307      	orrs	r7, r0
    57f4:	0c12      	lsrs	r2, r2, #16
    57f6:	18ba      	adds	r2, r7, r2
    57f8:	45a0      	cmp	r8, r4
    57fa:	41a4      	sbcs	r4, r4
    57fc:	425f      	negs	r7, r3
    57fe:	003b      	movs	r3, r7
    5800:	4264      	negs	r4, r4
    5802:	4323      	orrs	r3, r4
    5804:	18d7      	adds	r7, r2, r3
    5806:	4643      	mov	r3, r8
    5808:	197d      	adds	r5, r7, r5
    580a:	0ddb      	lsrs	r3, r3, #23
    580c:	026d      	lsls	r5, r5, #9
    580e:	431d      	orrs	r5, r3
    5810:	465b      	mov	r3, fp
    5812:	025a      	lsls	r2, r3, #9
    5814:	9b05      	ldr	r3, [sp, #20]
    5816:	431a      	orrs	r2, r3
    5818:	1e53      	subs	r3, r2, #1
    581a:	419a      	sbcs	r2, r3
    581c:	465b      	mov	r3, fp
    581e:	0ddb      	lsrs	r3, r3, #23
    5820:	431a      	orrs	r2, r3
    5822:	4643      	mov	r3, r8
    5824:	025b      	lsls	r3, r3, #9
    5826:	4313      	orrs	r3, r2
    5828:	01ea      	lsls	r2, r5, #7
    582a:	d507      	bpl.n	583c <__aeabi_dmul+0x384>
    582c:	2201      	movs	r2, #1
    582e:	085c      	lsrs	r4, r3, #1
    5830:	4013      	ands	r3, r2
    5832:	4323      	orrs	r3, r4
    5834:	07ea      	lsls	r2, r5, #31
    5836:	9e02      	ldr	r6, [sp, #8]
    5838:	4313      	orrs	r3, r2
    583a:	086d      	lsrs	r5, r5, #1
    583c:	4a57      	ldr	r2, [pc, #348]	; (599c <__aeabi_dmul+0x4e4>)
    583e:	18b2      	adds	r2, r6, r2
    5840:	2a00      	cmp	r2, #0
    5842:	dd4b      	ble.n	58dc <__aeabi_dmul+0x424>
    5844:	0758      	lsls	r0, r3, #29
    5846:	d009      	beq.n	585c <__aeabi_dmul+0x3a4>
    5848:	200f      	movs	r0, #15
    584a:	4018      	ands	r0, r3
    584c:	2804      	cmp	r0, #4
    584e:	d005      	beq.n	585c <__aeabi_dmul+0x3a4>
    5850:	1d18      	adds	r0, r3, #4
    5852:	4298      	cmp	r0, r3
    5854:	419b      	sbcs	r3, r3
    5856:	425b      	negs	r3, r3
    5858:	18ed      	adds	r5, r5, r3
    585a:	0003      	movs	r3, r0
    585c:	01e8      	lsls	r0, r5, #7
    585e:	d504      	bpl.n	586a <__aeabi_dmul+0x3b2>
    5860:	4a4f      	ldr	r2, [pc, #316]	; (59a0 <__aeabi_dmul+0x4e8>)
    5862:	4015      	ands	r5, r2
    5864:	2280      	movs	r2, #128	; 0x80
    5866:	00d2      	lsls	r2, r2, #3
    5868:	18b2      	adds	r2, r6, r2
    586a:	484e      	ldr	r0, [pc, #312]	; (59a4 <__aeabi_dmul+0x4ec>)
    586c:	4282      	cmp	r2, r0
    586e:	dd00      	ble.n	5872 <__aeabi_dmul+0x3ba>
    5870:	e6e7      	b.n	5642 <__aeabi_dmul+0x18a>
    5872:	2401      	movs	r4, #1
    5874:	08db      	lsrs	r3, r3, #3
    5876:	0768      	lsls	r0, r5, #29
    5878:	4318      	orrs	r0, r3
    587a:	026d      	lsls	r5, r5, #9
    587c:	0553      	lsls	r3, r2, #21
    587e:	4680      	mov	r8, r0
    5880:	0b2d      	lsrs	r5, r5, #12
    5882:	0d5b      	lsrs	r3, r3, #21
    5884:	400c      	ands	r4, r1
    5886:	e67d      	b.n	5584 <__aeabi_dmul+0xcc>
    5888:	2280      	movs	r2, #128	; 0x80
    588a:	4659      	mov	r1, fp
    588c:	0312      	lsls	r2, r2, #12
    588e:	4211      	tst	r1, r2
    5890:	d008      	beq.n	58a4 <__aeabi_dmul+0x3ec>
    5892:	4215      	tst	r5, r2
    5894:	d106      	bne.n	58a4 <__aeabi_dmul+0x3ec>
    5896:	4315      	orrs	r5, r2
    5898:	032d      	lsls	r5, r5, #12
    589a:	4698      	mov	r8, r3
    589c:	0b2d      	lsrs	r5, r5, #12
    589e:	464c      	mov	r4, r9
    58a0:	4b41      	ldr	r3, [pc, #260]	; (59a8 <__aeabi_dmul+0x4f0>)
    58a2:	e66f      	b.n	5584 <__aeabi_dmul+0xcc>
    58a4:	465d      	mov	r5, fp
    58a6:	4315      	orrs	r5, r2
    58a8:	032d      	lsls	r5, r5, #12
    58aa:	0b2d      	lsrs	r5, r5, #12
    58ac:	4b3e      	ldr	r3, [pc, #248]	; (59a8 <__aeabi_dmul+0x4f0>)
    58ae:	e669      	b.n	5584 <__aeabi_dmul+0xcc>
    58b0:	0003      	movs	r3, r0
    58b2:	4655      	mov	r5, sl
    58b4:	3b28      	subs	r3, #40	; 0x28
    58b6:	409d      	lsls	r5, r3
    58b8:	2300      	movs	r3, #0
    58ba:	e6bc      	b.n	5636 <__aeabi_dmul+0x17e>
    58bc:	4650      	mov	r0, sl
    58be:	f000 fd79 	bl	63b4 <__clzsi2>
    58c2:	3020      	adds	r0, #32
    58c4:	e6a8      	b.n	5618 <__aeabi_dmul+0x160>
    58c6:	0003      	movs	r3, r0
    58c8:	3b28      	subs	r3, #40	; 0x28
    58ca:	409f      	lsls	r7, r3
    58cc:	2300      	movs	r3, #0
    58ce:	46bb      	mov	fp, r7
    58d0:	4698      	mov	r8, r3
    58d2:	e689      	b.n	55e8 <__aeabi_dmul+0x130>
    58d4:	f000 fd6e 	bl	63b4 <__clzsi2>
    58d8:	3020      	adds	r0, #32
    58da:	e673      	b.n	55c4 <__aeabi_dmul+0x10c>
    58dc:	2401      	movs	r4, #1
    58de:	1aa6      	subs	r6, r4, r2
    58e0:	2e38      	cmp	r6, #56	; 0x38
    58e2:	dd07      	ble.n	58f4 <__aeabi_dmul+0x43c>
    58e4:	2200      	movs	r2, #0
    58e6:	400c      	ands	r4, r1
    58e8:	2300      	movs	r3, #0
    58ea:	2500      	movs	r5, #0
    58ec:	4690      	mov	r8, r2
    58ee:	e649      	b.n	5584 <__aeabi_dmul+0xcc>
    58f0:	9e02      	ldr	r6, [sp, #8]
    58f2:	e7a3      	b.n	583c <__aeabi_dmul+0x384>
    58f4:	2e1f      	cmp	r6, #31
    58f6:	dc20      	bgt.n	593a <__aeabi_dmul+0x482>
    58f8:	2220      	movs	r2, #32
    58fa:	002c      	movs	r4, r5
    58fc:	0018      	movs	r0, r3
    58fe:	1b92      	subs	r2, r2, r6
    5900:	40f0      	lsrs	r0, r6
    5902:	4094      	lsls	r4, r2
    5904:	4093      	lsls	r3, r2
    5906:	4304      	orrs	r4, r0
    5908:	1e58      	subs	r0, r3, #1
    590a:	4183      	sbcs	r3, r0
    590c:	431c      	orrs	r4, r3
    590e:	40f5      	lsrs	r5, r6
    5910:	0763      	lsls	r3, r4, #29
    5912:	d009      	beq.n	5928 <__aeabi_dmul+0x470>
    5914:	230f      	movs	r3, #15
    5916:	4023      	ands	r3, r4
    5918:	2b04      	cmp	r3, #4
    591a:	d005      	beq.n	5928 <__aeabi_dmul+0x470>
    591c:	0023      	movs	r3, r4
    591e:	1d1c      	adds	r4, r3, #4
    5920:	429c      	cmp	r4, r3
    5922:	4192      	sbcs	r2, r2
    5924:	4252      	negs	r2, r2
    5926:	18ad      	adds	r5, r5, r2
    5928:	022b      	lsls	r3, r5, #8
    592a:	d51f      	bpl.n	596c <__aeabi_dmul+0x4b4>
    592c:	2401      	movs	r4, #1
    592e:	2200      	movs	r2, #0
    5930:	400c      	ands	r4, r1
    5932:	2301      	movs	r3, #1
    5934:	2500      	movs	r5, #0
    5936:	4690      	mov	r8, r2
    5938:	e624      	b.n	5584 <__aeabi_dmul+0xcc>
    593a:	201f      	movs	r0, #31
    593c:	002c      	movs	r4, r5
    593e:	4240      	negs	r0, r0
    5940:	1a82      	subs	r2, r0, r2
    5942:	40d4      	lsrs	r4, r2
    5944:	2e20      	cmp	r6, #32
    5946:	d01c      	beq.n	5982 <__aeabi_dmul+0x4ca>
    5948:	2240      	movs	r2, #64	; 0x40
    594a:	1b96      	subs	r6, r2, r6
    594c:	40b5      	lsls	r5, r6
    594e:	432b      	orrs	r3, r5
    5950:	1e58      	subs	r0, r3, #1
    5952:	4183      	sbcs	r3, r0
    5954:	2007      	movs	r0, #7
    5956:	4323      	orrs	r3, r4
    5958:	4018      	ands	r0, r3
    595a:	2500      	movs	r5, #0
    595c:	2800      	cmp	r0, #0
    595e:	d009      	beq.n	5974 <__aeabi_dmul+0x4bc>
    5960:	220f      	movs	r2, #15
    5962:	2500      	movs	r5, #0
    5964:	401a      	ands	r2, r3
    5966:	001c      	movs	r4, r3
    5968:	2a04      	cmp	r2, #4
    596a:	d1d8      	bne.n	591e <__aeabi_dmul+0x466>
    596c:	0023      	movs	r3, r4
    596e:	0768      	lsls	r0, r5, #29
    5970:	026d      	lsls	r5, r5, #9
    5972:	0b2d      	lsrs	r5, r5, #12
    5974:	2401      	movs	r4, #1
    5976:	08db      	lsrs	r3, r3, #3
    5978:	4303      	orrs	r3, r0
    597a:	4698      	mov	r8, r3
    597c:	400c      	ands	r4, r1
    597e:	2300      	movs	r3, #0
    5980:	e600      	b.n	5584 <__aeabi_dmul+0xcc>
    5982:	2500      	movs	r5, #0
    5984:	e7e3      	b.n	594e <__aeabi_dmul+0x496>
    5986:	2280      	movs	r2, #128	; 0x80
    5988:	2401      	movs	r4, #1
    598a:	0312      	lsls	r2, r2, #12
    598c:	4315      	orrs	r5, r2
    598e:	032d      	lsls	r5, r5, #12
    5990:	4698      	mov	r8, r3
    5992:	0b2d      	lsrs	r5, r5, #12
    5994:	400c      	ands	r4, r1
    5996:	4b04      	ldr	r3, [pc, #16]	; (59a8 <__aeabi_dmul+0x4f0>)
    5998:	e5f4      	b.n	5584 <__aeabi_dmul+0xcc>
    599a:	46c0      	nop			; (mov r8, r8)
    599c:	000003ff 	.word	0x000003ff
    59a0:	feffffff 	.word	0xfeffffff
    59a4:	000007fe 	.word	0x000007fe
    59a8:	000007ff 	.word	0x000007ff

000059ac <__aeabi_dsub>:
    59ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    59ae:	4657      	mov	r7, sl
    59b0:	464e      	mov	r6, r9
    59b2:	4645      	mov	r5, r8
    59b4:	b4e0      	push	{r5, r6, r7}
    59b6:	000e      	movs	r6, r1
    59b8:	0011      	movs	r1, r2
    59ba:	0ff2      	lsrs	r2, r6, #31
    59bc:	4692      	mov	sl, r2
    59be:	00c5      	lsls	r5, r0, #3
    59c0:	0f42      	lsrs	r2, r0, #29
    59c2:	0318      	lsls	r0, r3, #12
    59c4:	0337      	lsls	r7, r6, #12
    59c6:	0074      	lsls	r4, r6, #1
    59c8:	0a40      	lsrs	r0, r0, #9
    59ca:	0f4e      	lsrs	r6, r1, #29
    59cc:	0a7f      	lsrs	r7, r7, #9
    59ce:	4330      	orrs	r0, r6
    59d0:	4ecf      	ldr	r6, [pc, #828]	; (5d10 <__aeabi_dsub+0x364>)
    59d2:	4317      	orrs	r7, r2
    59d4:	005a      	lsls	r2, r3, #1
    59d6:	0d64      	lsrs	r4, r4, #21
    59d8:	0d52      	lsrs	r2, r2, #21
    59da:	0fdb      	lsrs	r3, r3, #31
    59dc:	00c9      	lsls	r1, r1, #3
    59de:	42b2      	cmp	r2, r6
    59e0:	d100      	bne.n	59e4 <__aeabi_dsub+0x38>
    59e2:	e0e5      	b.n	5bb0 <__aeabi_dsub+0x204>
    59e4:	2601      	movs	r6, #1
    59e6:	4073      	eors	r3, r6
    59e8:	1aa6      	subs	r6, r4, r2
    59ea:	46b4      	mov	ip, r6
    59ec:	4553      	cmp	r3, sl
    59ee:	d100      	bne.n	59f2 <__aeabi_dsub+0x46>
    59f0:	e0af      	b.n	5b52 <__aeabi_dsub+0x1a6>
    59f2:	2e00      	cmp	r6, #0
    59f4:	dc00      	bgt.n	59f8 <__aeabi_dsub+0x4c>
    59f6:	e10d      	b.n	5c14 <__aeabi_dsub+0x268>
    59f8:	2a00      	cmp	r2, #0
    59fa:	d13a      	bne.n	5a72 <__aeabi_dsub+0xc6>
    59fc:	0003      	movs	r3, r0
    59fe:	430b      	orrs	r3, r1
    5a00:	d000      	beq.n	5a04 <__aeabi_dsub+0x58>
    5a02:	e0e4      	b.n	5bce <__aeabi_dsub+0x222>
    5a04:	076b      	lsls	r3, r5, #29
    5a06:	d009      	beq.n	5a1c <__aeabi_dsub+0x70>
    5a08:	230f      	movs	r3, #15
    5a0a:	402b      	ands	r3, r5
    5a0c:	2b04      	cmp	r3, #4
    5a0e:	d005      	beq.n	5a1c <__aeabi_dsub+0x70>
    5a10:	1d2b      	adds	r3, r5, #4
    5a12:	42ab      	cmp	r3, r5
    5a14:	41ad      	sbcs	r5, r5
    5a16:	426d      	negs	r5, r5
    5a18:	197f      	adds	r7, r7, r5
    5a1a:	001d      	movs	r5, r3
    5a1c:	023b      	lsls	r3, r7, #8
    5a1e:	d400      	bmi.n	5a22 <__aeabi_dsub+0x76>
    5a20:	e088      	b.n	5b34 <__aeabi_dsub+0x188>
    5a22:	4bbb      	ldr	r3, [pc, #748]	; (5d10 <__aeabi_dsub+0x364>)
    5a24:	3401      	adds	r4, #1
    5a26:	429c      	cmp	r4, r3
    5a28:	d100      	bne.n	5a2c <__aeabi_dsub+0x80>
    5a2a:	e110      	b.n	5c4e <__aeabi_dsub+0x2a2>
    5a2c:	003a      	movs	r2, r7
    5a2e:	4bb9      	ldr	r3, [pc, #740]	; (5d14 <__aeabi_dsub+0x368>)
    5a30:	4651      	mov	r1, sl
    5a32:	401a      	ands	r2, r3
    5a34:	2301      	movs	r3, #1
    5a36:	0750      	lsls	r0, r2, #29
    5a38:	08ed      	lsrs	r5, r5, #3
    5a3a:	0252      	lsls	r2, r2, #9
    5a3c:	0564      	lsls	r4, r4, #21
    5a3e:	4305      	orrs	r5, r0
    5a40:	0b12      	lsrs	r2, r2, #12
    5a42:	0d64      	lsrs	r4, r4, #21
    5a44:	400b      	ands	r3, r1
    5a46:	2100      	movs	r1, #0
    5a48:	0028      	movs	r0, r5
    5a4a:	0312      	lsls	r2, r2, #12
    5a4c:	0d0d      	lsrs	r5, r1, #20
    5a4e:	0b12      	lsrs	r2, r2, #12
    5a50:	0564      	lsls	r4, r4, #21
    5a52:	052d      	lsls	r5, r5, #20
    5a54:	4315      	orrs	r5, r2
    5a56:	0862      	lsrs	r2, r4, #1
    5a58:	4caf      	ldr	r4, [pc, #700]	; (5d18 <__aeabi_dsub+0x36c>)
    5a5a:	07db      	lsls	r3, r3, #31
    5a5c:	402c      	ands	r4, r5
    5a5e:	4314      	orrs	r4, r2
    5a60:	0064      	lsls	r4, r4, #1
    5a62:	0864      	lsrs	r4, r4, #1
    5a64:	431c      	orrs	r4, r3
    5a66:	0021      	movs	r1, r4
    5a68:	bc1c      	pop	{r2, r3, r4}
    5a6a:	4690      	mov	r8, r2
    5a6c:	4699      	mov	r9, r3
    5a6e:	46a2      	mov	sl, r4
    5a70:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5a72:	4ba7      	ldr	r3, [pc, #668]	; (5d10 <__aeabi_dsub+0x364>)
    5a74:	429c      	cmp	r4, r3
    5a76:	d0c5      	beq.n	5a04 <__aeabi_dsub+0x58>
    5a78:	2380      	movs	r3, #128	; 0x80
    5a7a:	041b      	lsls	r3, r3, #16
    5a7c:	4318      	orrs	r0, r3
    5a7e:	4663      	mov	r3, ip
    5a80:	2b38      	cmp	r3, #56	; 0x38
    5a82:	dd00      	ble.n	5a86 <__aeabi_dsub+0xda>
    5a84:	e0fd      	b.n	5c82 <__aeabi_dsub+0x2d6>
    5a86:	2b1f      	cmp	r3, #31
    5a88:	dd00      	ble.n	5a8c <__aeabi_dsub+0xe0>
    5a8a:	e130      	b.n	5cee <__aeabi_dsub+0x342>
    5a8c:	4662      	mov	r2, ip
    5a8e:	2320      	movs	r3, #32
    5a90:	1a9b      	subs	r3, r3, r2
    5a92:	0002      	movs	r2, r0
    5a94:	409a      	lsls	r2, r3
    5a96:	4666      	mov	r6, ip
    5a98:	4690      	mov	r8, r2
    5a9a:	000a      	movs	r2, r1
    5a9c:	4099      	lsls	r1, r3
    5a9e:	40f2      	lsrs	r2, r6
    5aa0:	4646      	mov	r6, r8
    5aa2:	1e4b      	subs	r3, r1, #1
    5aa4:	4199      	sbcs	r1, r3
    5aa6:	4332      	orrs	r2, r6
    5aa8:	4311      	orrs	r1, r2
    5aaa:	4663      	mov	r3, ip
    5aac:	0002      	movs	r2, r0
    5aae:	40da      	lsrs	r2, r3
    5ab0:	1a69      	subs	r1, r5, r1
    5ab2:	428d      	cmp	r5, r1
    5ab4:	419b      	sbcs	r3, r3
    5ab6:	000d      	movs	r5, r1
    5ab8:	1aba      	subs	r2, r7, r2
    5aba:	425b      	negs	r3, r3
    5abc:	1ad7      	subs	r7, r2, r3
    5abe:	023b      	lsls	r3, r7, #8
    5ac0:	d535      	bpl.n	5b2e <__aeabi_dsub+0x182>
    5ac2:	027a      	lsls	r2, r7, #9
    5ac4:	0a53      	lsrs	r3, r2, #9
    5ac6:	4698      	mov	r8, r3
    5ac8:	4643      	mov	r3, r8
    5aca:	2b00      	cmp	r3, #0
    5acc:	d100      	bne.n	5ad0 <__aeabi_dsub+0x124>
    5ace:	e0c4      	b.n	5c5a <__aeabi_dsub+0x2ae>
    5ad0:	4640      	mov	r0, r8
    5ad2:	f000 fc6f 	bl	63b4 <__clzsi2>
    5ad6:	0003      	movs	r3, r0
    5ad8:	3b08      	subs	r3, #8
    5ada:	2b1f      	cmp	r3, #31
    5adc:	dd00      	ble.n	5ae0 <__aeabi_dsub+0x134>
    5ade:	e0c5      	b.n	5c6c <__aeabi_dsub+0x2c0>
    5ae0:	2220      	movs	r2, #32
    5ae2:	0029      	movs	r1, r5
    5ae4:	1ad2      	subs	r2, r2, r3
    5ae6:	4647      	mov	r7, r8
    5ae8:	40d1      	lsrs	r1, r2
    5aea:	409f      	lsls	r7, r3
    5aec:	000a      	movs	r2, r1
    5aee:	409d      	lsls	r5, r3
    5af0:	433a      	orrs	r2, r7
    5af2:	429c      	cmp	r4, r3
    5af4:	dd00      	ble.n	5af8 <__aeabi_dsub+0x14c>
    5af6:	e0c0      	b.n	5c7a <__aeabi_dsub+0x2ce>
    5af8:	1b1c      	subs	r4, r3, r4
    5afa:	1c63      	adds	r3, r4, #1
    5afc:	2b1f      	cmp	r3, #31
    5afe:	dd00      	ble.n	5b02 <__aeabi_dsub+0x156>
    5b00:	e0e4      	b.n	5ccc <__aeabi_dsub+0x320>
    5b02:	2120      	movs	r1, #32
    5b04:	0014      	movs	r4, r2
    5b06:	0028      	movs	r0, r5
    5b08:	1ac9      	subs	r1, r1, r3
    5b0a:	40d8      	lsrs	r0, r3
    5b0c:	408c      	lsls	r4, r1
    5b0e:	408d      	lsls	r5, r1
    5b10:	4304      	orrs	r4, r0
    5b12:	40da      	lsrs	r2, r3
    5b14:	1e68      	subs	r0, r5, #1
    5b16:	4185      	sbcs	r5, r0
    5b18:	0017      	movs	r7, r2
    5b1a:	4325      	orrs	r5, r4
    5b1c:	2400      	movs	r4, #0
    5b1e:	e771      	b.n	5a04 <__aeabi_dsub+0x58>
    5b20:	4642      	mov	r2, r8
    5b22:	4663      	mov	r3, ip
    5b24:	431a      	orrs	r2, r3
    5b26:	d100      	bne.n	5b2a <__aeabi_dsub+0x17e>
    5b28:	e24c      	b.n	5fc4 <__aeabi_dsub+0x618>
    5b2a:	4667      	mov	r7, ip
    5b2c:	4645      	mov	r5, r8
    5b2e:	076b      	lsls	r3, r5, #29
    5b30:	d000      	beq.n	5b34 <__aeabi_dsub+0x188>
    5b32:	e769      	b.n	5a08 <__aeabi_dsub+0x5c>
    5b34:	2301      	movs	r3, #1
    5b36:	4651      	mov	r1, sl
    5b38:	0778      	lsls	r0, r7, #29
    5b3a:	08ed      	lsrs	r5, r5, #3
    5b3c:	08fa      	lsrs	r2, r7, #3
    5b3e:	400b      	ands	r3, r1
    5b40:	4305      	orrs	r5, r0
    5b42:	4973      	ldr	r1, [pc, #460]	; (5d10 <__aeabi_dsub+0x364>)
    5b44:	428c      	cmp	r4, r1
    5b46:	d038      	beq.n	5bba <__aeabi_dsub+0x20e>
    5b48:	0312      	lsls	r2, r2, #12
    5b4a:	0564      	lsls	r4, r4, #21
    5b4c:	0b12      	lsrs	r2, r2, #12
    5b4e:	0d64      	lsrs	r4, r4, #21
    5b50:	e779      	b.n	5a46 <__aeabi_dsub+0x9a>
    5b52:	2e00      	cmp	r6, #0
    5b54:	dc00      	bgt.n	5b58 <__aeabi_dsub+0x1ac>
    5b56:	e09a      	b.n	5c8e <__aeabi_dsub+0x2e2>
    5b58:	2a00      	cmp	r2, #0
    5b5a:	d047      	beq.n	5bec <__aeabi_dsub+0x240>
    5b5c:	4a6c      	ldr	r2, [pc, #432]	; (5d10 <__aeabi_dsub+0x364>)
    5b5e:	4294      	cmp	r4, r2
    5b60:	d100      	bne.n	5b64 <__aeabi_dsub+0x1b8>
    5b62:	e74f      	b.n	5a04 <__aeabi_dsub+0x58>
    5b64:	2280      	movs	r2, #128	; 0x80
    5b66:	0412      	lsls	r2, r2, #16
    5b68:	4310      	orrs	r0, r2
    5b6a:	4662      	mov	r2, ip
    5b6c:	2a38      	cmp	r2, #56	; 0x38
    5b6e:	dc00      	bgt.n	5b72 <__aeabi_dsub+0x1c6>
    5b70:	e108      	b.n	5d84 <__aeabi_dsub+0x3d8>
    5b72:	4301      	orrs	r1, r0
    5b74:	1e48      	subs	r0, r1, #1
    5b76:	4181      	sbcs	r1, r0
    5b78:	2200      	movs	r2, #0
    5b7a:	b2c9      	uxtb	r1, r1
    5b7c:	1949      	adds	r1, r1, r5
    5b7e:	19d2      	adds	r2, r2, r7
    5b80:	42a9      	cmp	r1, r5
    5b82:	41bf      	sbcs	r7, r7
    5b84:	000d      	movs	r5, r1
    5b86:	427f      	negs	r7, r7
    5b88:	18bf      	adds	r7, r7, r2
    5b8a:	023a      	lsls	r2, r7, #8
    5b8c:	d400      	bmi.n	5b90 <__aeabi_dsub+0x1e4>
    5b8e:	e142      	b.n	5e16 <__aeabi_dsub+0x46a>
    5b90:	4a5f      	ldr	r2, [pc, #380]	; (5d10 <__aeabi_dsub+0x364>)
    5b92:	3401      	adds	r4, #1
    5b94:	4294      	cmp	r4, r2
    5b96:	d100      	bne.n	5b9a <__aeabi_dsub+0x1ee>
    5b98:	e14e      	b.n	5e38 <__aeabi_dsub+0x48c>
    5b9a:	2001      	movs	r0, #1
    5b9c:	4a5d      	ldr	r2, [pc, #372]	; (5d14 <__aeabi_dsub+0x368>)
    5b9e:	0869      	lsrs	r1, r5, #1
    5ba0:	403a      	ands	r2, r7
    5ba2:	4028      	ands	r0, r5
    5ba4:	4308      	orrs	r0, r1
    5ba6:	07d5      	lsls	r5, r2, #31
    5ba8:	4305      	orrs	r5, r0
    5baa:	0857      	lsrs	r7, r2, #1
    5bac:	469a      	mov	sl, r3
    5bae:	e729      	b.n	5a04 <__aeabi_dsub+0x58>
    5bb0:	0006      	movs	r6, r0
    5bb2:	430e      	orrs	r6, r1
    5bb4:	d000      	beq.n	5bb8 <__aeabi_dsub+0x20c>
    5bb6:	e717      	b.n	59e8 <__aeabi_dsub+0x3c>
    5bb8:	e714      	b.n	59e4 <__aeabi_dsub+0x38>
    5bba:	0029      	movs	r1, r5
    5bbc:	4311      	orrs	r1, r2
    5bbe:	d100      	bne.n	5bc2 <__aeabi_dsub+0x216>
    5bc0:	e1f9      	b.n	5fb6 <__aeabi_dsub+0x60a>
    5bc2:	2180      	movs	r1, #128	; 0x80
    5bc4:	0309      	lsls	r1, r1, #12
    5bc6:	430a      	orrs	r2, r1
    5bc8:	0312      	lsls	r2, r2, #12
    5bca:	0b12      	lsrs	r2, r2, #12
    5bcc:	e73b      	b.n	5a46 <__aeabi_dsub+0x9a>
    5bce:	2301      	movs	r3, #1
    5bd0:	425b      	negs	r3, r3
    5bd2:	4698      	mov	r8, r3
    5bd4:	44c4      	add	ip, r8
    5bd6:	4663      	mov	r3, ip
    5bd8:	2b00      	cmp	r3, #0
    5bda:	d172      	bne.n	5cc2 <__aeabi_dsub+0x316>
    5bdc:	1a69      	subs	r1, r5, r1
    5bde:	428d      	cmp	r5, r1
    5be0:	419b      	sbcs	r3, r3
    5be2:	1a3f      	subs	r7, r7, r0
    5be4:	425b      	negs	r3, r3
    5be6:	1aff      	subs	r7, r7, r3
    5be8:	000d      	movs	r5, r1
    5bea:	e768      	b.n	5abe <__aeabi_dsub+0x112>
    5bec:	0002      	movs	r2, r0
    5bee:	430a      	orrs	r2, r1
    5bf0:	d100      	bne.n	5bf4 <__aeabi_dsub+0x248>
    5bf2:	e707      	b.n	5a04 <__aeabi_dsub+0x58>
    5bf4:	2201      	movs	r2, #1
    5bf6:	4252      	negs	r2, r2
    5bf8:	4690      	mov	r8, r2
    5bfa:	44c4      	add	ip, r8
    5bfc:	4662      	mov	r2, ip
    5bfe:	2a00      	cmp	r2, #0
    5c00:	d000      	beq.n	5c04 <__aeabi_dsub+0x258>
    5c02:	e0e6      	b.n	5dd2 <__aeabi_dsub+0x426>
    5c04:	1869      	adds	r1, r5, r1
    5c06:	42a9      	cmp	r1, r5
    5c08:	41b6      	sbcs	r6, r6
    5c0a:	183f      	adds	r7, r7, r0
    5c0c:	4276      	negs	r6, r6
    5c0e:	19f7      	adds	r7, r6, r7
    5c10:	000d      	movs	r5, r1
    5c12:	e7ba      	b.n	5b8a <__aeabi_dsub+0x1de>
    5c14:	2e00      	cmp	r6, #0
    5c16:	d000      	beq.n	5c1a <__aeabi_dsub+0x26e>
    5c18:	e080      	b.n	5d1c <__aeabi_dsub+0x370>
    5c1a:	1c62      	adds	r2, r4, #1
    5c1c:	0552      	lsls	r2, r2, #21
    5c1e:	0d52      	lsrs	r2, r2, #21
    5c20:	2a01      	cmp	r2, #1
    5c22:	dc00      	bgt.n	5c26 <__aeabi_dsub+0x27a>
    5c24:	e0f9      	b.n	5e1a <__aeabi_dsub+0x46e>
    5c26:	1a6a      	subs	r2, r5, r1
    5c28:	4691      	mov	r9, r2
    5c2a:	454d      	cmp	r5, r9
    5c2c:	41b6      	sbcs	r6, r6
    5c2e:	1a3a      	subs	r2, r7, r0
    5c30:	4276      	negs	r6, r6
    5c32:	1b92      	subs	r2, r2, r6
    5c34:	4690      	mov	r8, r2
    5c36:	0212      	lsls	r2, r2, #8
    5c38:	d400      	bmi.n	5c3c <__aeabi_dsub+0x290>
    5c3a:	e099      	b.n	5d70 <__aeabi_dsub+0x3c4>
    5c3c:	1b4d      	subs	r5, r1, r5
    5c3e:	42a9      	cmp	r1, r5
    5c40:	4189      	sbcs	r1, r1
    5c42:	1bc7      	subs	r7, r0, r7
    5c44:	4249      	negs	r1, r1
    5c46:	1a7a      	subs	r2, r7, r1
    5c48:	4690      	mov	r8, r2
    5c4a:	469a      	mov	sl, r3
    5c4c:	e73c      	b.n	5ac8 <__aeabi_dsub+0x11c>
    5c4e:	4652      	mov	r2, sl
    5c50:	2301      	movs	r3, #1
    5c52:	2500      	movs	r5, #0
    5c54:	4013      	ands	r3, r2
    5c56:	2200      	movs	r2, #0
    5c58:	e6f5      	b.n	5a46 <__aeabi_dsub+0x9a>
    5c5a:	0028      	movs	r0, r5
    5c5c:	f000 fbaa 	bl	63b4 <__clzsi2>
    5c60:	3020      	adds	r0, #32
    5c62:	0003      	movs	r3, r0
    5c64:	3b08      	subs	r3, #8
    5c66:	2b1f      	cmp	r3, #31
    5c68:	dc00      	bgt.n	5c6c <__aeabi_dsub+0x2c0>
    5c6a:	e739      	b.n	5ae0 <__aeabi_dsub+0x134>
    5c6c:	002a      	movs	r2, r5
    5c6e:	3828      	subs	r0, #40	; 0x28
    5c70:	4082      	lsls	r2, r0
    5c72:	2500      	movs	r5, #0
    5c74:	429c      	cmp	r4, r3
    5c76:	dc00      	bgt.n	5c7a <__aeabi_dsub+0x2ce>
    5c78:	e73e      	b.n	5af8 <__aeabi_dsub+0x14c>
    5c7a:	4f26      	ldr	r7, [pc, #152]	; (5d14 <__aeabi_dsub+0x368>)
    5c7c:	1ae4      	subs	r4, r4, r3
    5c7e:	4017      	ands	r7, r2
    5c80:	e6c0      	b.n	5a04 <__aeabi_dsub+0x58>
    5c82:	4301      	orrs	r1, r0
    5c84:	1e48      	subs	r0, r1, #1
    5c86:	4181      	sbcs	r1, r0
    5c88:	2200      	movs	r2, #0
    5c8a:	b2c9      	uxtb	r1, r1
    5c8c:	e710      	b.n	5ab0 <__aeabi_dsub+0x104>
    5c8e:	2e00      	cmp	r6, #0
    5c90:	d000      	beq.n	5c94 <__aeabi_dsub+0x2e8>
    5c92:	e0f1      	b.n	5e78 <__aeabi_dsub+0x4cc>
    5c94:	1c62      	adds	r2, r4, #1
    5c96:	4694      	mov	ip, r2
    5c98:	0552      	lsls	r2, r2, #21
    5c9a:	0d52      	lsrs	r2, r2, #21
    5c9c:	2a01      	cmp	r2, #1
    5c9e:	dc00      	bgt.n	5ca2 <__aeabi_dsub+0x2f6>
    5ca0:	e0a0      	b.n	5de4 <__aeabi_dsub+0x438>
    5ca2:	4a1b      	ldr	r2, [pc, #108]	; (5d10 <__aeabi_dsub+0x364>)
    5ca4:	4594      	cmp	ip, r2
    5ca6:	d100      	bne.n	5caa <__aeabi_dsub+0x2fe>
    5ca8:	e0c5      	b.n	5e36 <__aeabi_dsub+0x48a>
    5caa:	1869      	adds	r1, r5, r1
    5cac:	42a9      	cmp	r1, r5
    5cae:	4192      	sbcs	r2, r2
    5cb0:	183f      	adds	r7, r7, r0
    5cb2:	4252      	negs	r2, r2
    5cb4:	19d2      	adds	r2, r2, r7
    5cb6:	0849      	lsrs	r1, r1, #1
    5cb8:	07d5      	lsls	r5, r2, #31
    5cba:	430d      	orrs	r5, r1
    5cbc:	0857      	lsrs	r7, r2, #1
    5cbe:	4664      	mov	r4, ip
    5cc0:	e6a0      	b.n	5a04 <__aeabi_dsub+0x58>
    5cc2:	4b13      	ldr	r3, [pc, #76]	; (5d10 <__aeabi_dsub+0x364>)
    5cc4:	429c      	cmp	r4, r3
    5cc6:	d000      	beq.n	5cca <__aeabi_dsub+0x31e>
    5cc8:	e6d9      	b.n	5a7e <__aeabi_dsub+0xd2>
    5cca:	e69b      	b.n	5a04 <__aeabi_dsub+0x58>
    5ccc:	0011      	movs	r1, r2
    5cce:	3c1f      	subs	r4, #31
    5cd0:	40e1      	lsrs	r1, r4
    5cd2:	000c      	movs	r4, r1
    5cd4:	2b20      	cmp	r3, #32
    5cd6:	d100      	bne.n	5cda <__aeabi_dsub+0x32e>
    5cd8:	e080      	b.n	5ddc <__aeabi_dsub+0x430>
    5cda:	2140      	movs	r1, #64	; 0x40
    5cdc:	1acb      	subs	r3, r1, r3
    5cde:	409a      	lsls	r2, r3
    5ce0:	4315      	orrs	r5, r2
    5ce2:	1e6a      	subs	r2, r5, #1
    5ce4:	4195      	sbcs	r5, r2
    5ce6:	2700      	movs	r7, #0
    5ce8:	4325      	orrs	r5, r4
    5cea:	2400      	movs	r4, #0
    5cec:	e71f      	b.n	5b2e <__aeabi_dsub+0x182>
    5cee:	4663      	mov	r3, ip
    5cf0:	0002      	movs	r2, r0
    5cf2:	3b20      	subs	r3, #32
    5cf4:	40da      	lsrs	r2, r3
    5cf6:	4663      	mov	r3, ip
    5cf8:	2b20      	cmp	r3, #32
    5cfa:	d071      	beq.n	5de0 <__aeabi_dsub+0x434>
    5cfc:	2340      	movs	r3, #64	; 0x40
    5cfe:	4666      	mov	r6, ip
    5d00:	1b9b      	subs	r3, r3, r6
    5d02:	4098      	lsls	r0, r3
    5d04:	4301      	orrs	r1, r0
    5d06:	1e48      	subs	r0, r1, #1
    5d08:	4181      	sbcs	r1, r0
    5d0a:	4311      	orrs	r1, r2
    5d0c:	2200      	movs	r2, #0
    5d0e:	e6cf      	b.n	5ab0 <__aeabi_dsub+0x104>
    5d10:	000007ff 	.word	0x000007ff
    5d14:	ff7fffff 	.word	0xff7fffff
    5d18:	800fffff 	.word	0x800fffff
    5d1c:	2c00      	cmp	r4, #0
    5d1e:	d048      	beq.n	5db2 <__aeabi_dsub+0x406>
    5d20:	4cca      	ldr	r4, [pc, #808]	; (604c <__aeabi_dsub+0x6a0>)
    5d22:	42a2      	cmp	r2, r4
    5d24:	d100      	bne.n	5d28 <__aeabi_dsub+0x37c>
    5d26:	e0a2      	b.n	5e6e <__aeabi_dsub+0x4c2>
    5d28:	4274      	negs	r4, r6
    5d2a:	46a1      	mov	r9, r4
    5d2c:	2480      	movs	r4, #128	; 0x80
    5d2e:	0424      	lsls	r4, r4, #16
    5d30:	4327      	orrs	r7, r4
    5d32:	464c      	mov	r4, r9
    5d34:	2c38      	cmp	r4, #56	; 0x38
    5d36:	dd00      	ble.n	5d3a <__aeabi_dsub+0x38e>
    5d38:	e0db      	b.n	5ef2 <__aeabi_dsub+0x546>
    5d3a:	2c1f      	cmp	r4, #31
    5d3c:	dd00      	ble.n	5d40 <__aeabi_dsub+0x394>
    5d3e:	e144      	b.n	5fca <__aeabi_dsub+0x61e>
    5d40:	464e      	mov	r6, r9
    5d42:	2420      	movs	r4, #32
    5d44:	1ba4      	subs	r4, r4, r6
    5d46:	003e      	movs	r6, r7
    5d48:	40a6      	lsls	r6, r4
    5d4a:	46a2      	mov	sl, r4
    5d4c:	46b0      	mov	r8, r6
    5d4e:	464c      	mov	r4, r9
    5d50:	002e      	movs	r6, r5
    5d52:	40e6      	lsrs	r6, r4
    5d54:	46b4      	mov	ip, r6
    5d56:	4646      	mov	r6, r8
    5d58:	4664      	mov	r4, ip
    5d5a:	4326      	orrs	r6, r4
    5d5c:	4654      	mov	r4, sl
    5d5e:	40a5      	lsls	r5, r4
    5d60:	1e6c      	subs	r4, r5, #1
    5d62:	41a5      	sbcs	r5, r4
    5d64:	0034      	movs	r4, r6
    5d66:	432c      	orrs	r4, r5
    5d68:	464d      	mov	r5, r9
    5d6a:	40ef      	lsrs	r7, r5
    5d6c:	1b0d      	subs	r5, r1, r4
    5d6e:	e028      	b.n	5dc2 <__aeabi_dsub+0x416>
    5d70:	464a      	mov	r2, r9
    5d72:	4643      	mov	r3, r8
    5d74:	464d      	mov	r5, r9
    5d76:	431a      	orrs	r2, r3
    5d78:	d000      	beq.n	5d7c <__aeabi_dsub+0x3d0>
    5d7a:	e6a5      	b.n	5ac8 <__aeabi_dsub+0x11c>
    5d7c:	2300      	movs	r3, #0
    5d7e:	2400      	movs	r4, #0
    5d80:	2500      	movs	r5, #0
    5d82:	e6de      	b.n	5b42 <__aeabi_dsub+0x196>
    5d84:	2a1f      	cmp	r2, #31
    5d86:	dc5a      	bgt.n	5e3e <__aeabi_dsub+0x492>
    5d88:	4666      	mov	r6, ip
    5d8a:	2220      	movs	r2, #32
    5d8c:	1b92      	subs	r2, r2, r6
    5d8e:	0006      	movs	r6, r0
    5d90:	4096      	lsls	r6, r2
    5d92:	4691      	mov	r9, r2
    5d94:	46b0      	mov	r8, r6
    5d96:	4662      	mov	r2, ip
    5d98:	000e      	movs	r6, r1
    5d9a:	40d6      	lsrs	r6, r2
    5d9c:	4642      	mov	r2, r8
    5d9e:	4316      	orrs	r6, r2
    5da0:	464a      	mov	r2, r9
    5da2:	4091      	lsls	r1, r2
    5da4:	1e4a      	subs	r2, r1, #1
    5da6:	4191      	sbcs	r1, r2
    5da8:	0002      	movs	r2, r0
    5daa:	4660      	mov	r0, ip
    5dac:	4331      	orrs	r1, r6
    5dae:	40c2      	lsrs	r2, r0
    5db0:	e6e4      	b.n	5b7c <__aeabi_dsub+0x1d0>
    5db2:	003c      	movs	r4, r7
    5db4:	432c      	orrs	r4, r5
    5db6:	d05a      	beq.n	5e6e <__aeabi_dsub+0x4c2>
    5db8:	43f4      	mvns	r4, r6
    5dba:	46a1      	mov	r9, r4
    5dbc:	2c00      	cmp	r4, #0
    5dbe:	d152      	bne.n	5e66 <__aeabi_dsub+0x4ba>
    5dc0:	1b4d      	subs	r5, r1, r5
    5dc2:	42a9      	cmp	r1, r5
    5dc4:	4189      	sbcs	r1, r1
    5dc6:	1bc7      	subs	r7, r0, r7
    5dc8:	4249      	negs	r1, r1
    5dca:	1a7f      	subs	r7, r7, r1
    5dcc:	0014      	movs	r4, r2
    5dce:	469a      	mov	sl, r3
    5dd0:	e675      	b.n	5abe <__aeabi_dsub+0x112>
    5dd2:	4a9e      	ldr	r2, [pc, #632]	; (604c <__aeabi_dsub+0x6a0>)
    5dd4:	4294      	cmp	r4, r2
    5dd6:	d000      	beq.n	5dda <__aeabi_dsub+0x42e>
    5dd8:	e6c7      	b.n	5b6a <__aeabi_dsub+0x1be>
    5dda:	e613      	b.n	5a04 <__aeabi_dsub+0x58>
    5ddc:	2200      	movs	r2, #0
    5dde:	e77f      	b.n	5ce0 <__aeabi_dsub+0x334>
    5de0:	2000      	movs	r0, #0
    5de2:	e78f      	b.n	5d04 <__aeabi_dsub+0x358>
    5de4:	2c00      	cmp	r4, #0
    5de6:	d000      	beq.n	5dea <__aeabi_dsub+0x43e>
    5de8:	e0c8      	b.n	5f7c <__aeabi_dsub+0x5d0>
    5dea:	003b      	movs	r3, r7
    5dec:	432b      	orrs	r3, r5
    5dee:	d100      	bne.n	5df2 <__aeabi_dsub+0x446>
    5df0:	e10f      	b.n	6012 <__aeabi_dsub+0x666>
    5df2:	0003      	movs	r3, r0
    5df4:	430b      	orrs	r3, r1
    5df6:	d100      	bne.n	5dfa <__aeabi_dsub+0x44e>
    5df8:	e604      	b.n	5a04 <__aeabi_dsub+0x58>
    5dfa:	1869      	adds	r1, r5, r1
    5dfc:	42a9      	cmp	r1, r5
    5dfe:	419b      	sbcs	r3, r3
    5e00:	183f      	adds	r7, r7, r0
    5e02:	425b      	negs	r3, r3
    5e04:	19df      	adds	r7, r3, r7
    5e06:	023b      	lsls	r3, r7, #8
    5e08:	d400      	bmi.n	5e0c <__aeabi_dsub+0x460>
    5e0a:	e11a      	b.n	6042 <__aeabi_dsub+0x696>
    5e0c:	4b90      	ldr	r3, [pc, #576]	; (6050 <__aeabi_dsub+0x6a4>)
    5e0e:	000d      	movs	r5, r1
    5e10:	401f      	ands	r7, r3
    5e12:	4664      	mov	r4, ip
    5e14:	e5f6      	b.n	5a04 <__aeabi_dsub+0x58>
    5e16:	469a      	mov	sl, r3
    5e18:	e689      	b.n	5b2e <__aeabi_dsub+0x182>
    5e1a:	003a      	movs	r2, r7
    5e1c:	432a      	orrs	r2, r5
    5e1e:	2c00      	cmp	r4, #0
    5e20:	d15c      	bne.n	5edc <__aeabi_dsub+0x530>
    5e22:	2a00      	cmp	r2, #0
    5e24:	d175      	bne.n	5f12 <__aeabi_dsub+0x566>
    5e26:	0002      	movs	r2, r0
    5e28:	430a      	orrs	r2, r1
    5e2a:	d100      	bne.n	5e2e <__aeabi_dsub+0x482>
    5e2c:	e0ca      	b.n	5fc4 <__aeabi_dsub+0x618>
    5e2e:	0007      	movs	r7, r0
    5e30:	000d      	movs	r5, r1
    5e32:	469a      	mov	sl, r3
    5e34:	e5e6      	b.n	5a04 <__aeabi_dsub+0x58>
    5e36:	4664      	mov	r4, ip
    5e38:	2200      	movs	r2, #0
    5e3a:	2500      	movs	r5, #0
    5e3c:	e681      	b.n	5b42 <__aeabi_dsub+0x196>
    5e3e:	4662      	mov	r2, ip
    5e40:	0006      	movs	r6, r0
    5e42:	3a20      	subs	r2, #32
    5e44:	40d6      	lsrs	r6, r2
    5e46:	4662      	mov	r2, ip
    5e48:	46b0      	mov	r8, r6
    5e4a:	2a20      	cmp	r2, #32
    5e4c:	d100      	bne.n	5e50 <__aeabi_dsub+0x4a4>
    5e4e:	e0b7      	b.n	5fc0 <__aeabi_dsub+0x614>
    5e50:	2240      	movs	r2, #64	; 0x40
    5e52:	4666      	mov	r6, ip
    5e54:	1b92      	subs	r2, r2, r6
    5e56:	4090      	lsls	r0, r2
    5e58:	4301      	orrs	r1, r0
    5e5a:	4642      	mov	r2, r8
    5e5c:	1e48      	subs	r0, r1, #1
    5e5e:	4181      	sbcs	r1, r0
    5e60:	4311      	orrs	r1, r2
    5e62:	2200      	movs	r2, #0
    5e64:	e68a      	b.n	5b7c <__aeabi_dsub+0x1d0>
    5e66:	4c79      	ldr	r4, [pc, #484]	; (604c <__aeabi_dsub+0x6a0>)
    5e68:	42a2      	cmp	r2, r4
    5e6a:	d000      	beq.n	5e6e <__aeabi_dsub+0x4c2>
    5e6c:	e761      	b.n	5d32 <__aeabi_dsub+0x386>
    5e6e:	0007      	movs	r7, r0
    5e70:	000d      	movs	r5, r1
    5e72:	0014      	movs	r4, r2
    5e74:	469a      	mov	sl, r3
    5e76:	e5c5      	b.n	5a04 <__aeabi_dsub+0x58>
    5e78:	2c00      	cmp	r4, #0
    5e7a:	d141      	bne.n	5f00 <__aeabi_dsub+0x554>
    5e7c:	003c      	movs	r4, r7
    5e7e:	432c      	orrs	r4, r5
    5e80:	d078      	beq.n	5f74 <__aeabi_dsub+0x5c8>
    5e82:	43f4      	mvns	r4, r6
    5e84:	46a1      	mov	r9, r4
    5e86:	2c00      	cmp	r4, #0
    5e88:	d020      	beq.n	5ecc <__aeabi_dsub+0x520>
    5e8a:	4c70      	ldr	r4, [pc, #448]	; (604c <__aeabi_dsub+0x6a0>)
    5e8c:	42a2      	cmp	r2, r4
    5e8e:	d071      	beq.n	5f74 <__aeabi_dsub+0x5c8>
    5e90:	464c      	mov	r4, r9
    5e92:	2c38      	cmp	r4, #56	; 0x38
    5e94:	dd00      	ble.n	5e98 <__aeabi_dsub+0x4ec>
    5e96:	e0b2      	b.n	5ffe <__aeabi_dsub+0x652>
    5e98:	2c1f      	cmp	r4, #31
    5e9a:	dd00      	ble.n	5e9e <__aeabi_dsub+0x4f2>
    5e9c:	e0bc      	b.n	6018 <__aeabi_dsub+0x66c>
    5e9e:	2620      	movs	r6, #32
    5ea0:	1b34      	subs	r4, r6, r4
    5ea2:	46a2      	mov	sl, r4
    5ea4:	003c      	movs	r4, r7
    5ea6:	4656      	mov	r6, sl
    5ea8:	40b4      	lsls	r4, r6
    5eaa:	464e      	mov	r6, r9
    5eac:	46a0      	mov	r8, r4
    5eae:	002c      	movs	r4, r5
    5eb0:	40f4      	lsrs	r4, r6
    5eb2:	46a4      	mov	ip, r4
    5eb4:	4644      	mov	r4, r8
    5eb6:	4666      	mov	r6, ip
    5eb8:	4334      	orrs	r4, r6
    5eba:	46a4      	mov	ip, r4
    5ebc:	4654      	mov	r4, sl
    5ebe:	40a5      	lsls	r5, r4
    5ec0:	4664      	mov	r4, ip
    5ec2:	1e6e      	subs	r6, r5, #1
    5ec4:	41b5      	sbcs	r5, r6
    5ec6:	4325      	orrs	r5, r4
    5ec8:	464c      	mov	r4, r9
    5eca:	40e7      	lsrs	r7, r4
    5ecc:	186d      	adds	r5, r5, r1
    5ece:	428d      	cmp	r5, r1
    5ed0:	4189      	sbcs	r1, r1
    5ed2:	183f      	adds	r7, r7, r0
    5ed4:	4249      	negs	r1, r1
    5ed6:	19cf      	adds	r7, r1, r7
    5ed8:	0014      	movs	r4, r2
    5eda:	e656      	b.n	5b8a <__aeabi_dsub+0x1de>
    5edc:	2a00      	cmp	r2, #0
    5ede:	d12f      	bne.n	5f40 <__aeabi_dsub+0x594>
    5ee0:	0002      	movs	r2, r0
    5ee2:	430a      	orrs	r2, r1
    5ee4:	d100      	bne.n	5ee8 <__aeabi_dsub+0x53c>
    5ee6:	e084      	b.n	5ff2 <__aeabi_dsub+0x646>
    5ee8:	0007      	movs	r7, r0
    5eea:	000d      	movs	r5, r1
    5eec:	469a      	mov	sl, r3
    5eee:	4c57      	ldr	r4, [pc, #348]	; (604c <__aeabi_dsub+0x6a0>)
    5ef0:	e588      	b.n	5a04 <__aeabi_dsub+0x58>
    5ef2:	433d      	orrs	r5, r7
    5ef4:	1e6f      	subs	r7, r5, #1
    5ef6:	41bd      	sbcs	r5, r7
    5ef8:	b2ec      	uxtb	r4, r5
    5efa:	2700      	movs	r7, #0
    5efc:	1b0d      	subs	r5, r1, r4
    5efe:	e760      	b.n	5dc2 <__aeabi_dsub+0x416>
    5f00:	4c52      	ldr	r4, [pc, #328]	; (604c <__aeabi_dsub+0x6a0>)
    5f02:	42a2      	cmp	r2, r4
    5f04:	d036      	beq.n	5f74 <__aeabi_dsub+0x5c8>
    5f06:	4274      	negs	r4, r6
    5f08:	2680      	movs	r6, #128	; 0x80
    5f0a:	0436      	lsls	r6, r6, #16
    5f0c:	46a1      	mov	r9, r4
    5f0e:	4337      	orrs	r7, r6
    5f10:	e7be      	b.n	5e90 <__aeabi_dsub+0x4e4>
    5f12:	0002      	movs	r2, r0
    5f14:	430a      	orrs	r2, r1
    5f16:	d100      	bne.n	5f1a <__aeabi_dsub+0x56e>
    5f18:	e574      	b.n	5a04 <__aeabi_dsub+0x58>
    5f1a:	1a6a      	subs	r2, r5, r1
    5f1c:	4690      	mov	r8, r2
    5f1e:	4545      	cmp	r5, r8
    5f20:	41b6      	sbcs	r6, r6
    5f22:	1a3a      	subs	r2, r7, r0
    5f24:	4276      	negs	r6, r6
    5f26:	1b92      	subs	r2, r2, r6
    5f28:	4694      	mov	ip, r2
    5f2a:	0212      	lsls	r2, r2, #8
    5f2c:	d400      	bmi.n	5f30 <__aeabi_dsub+0x584>
    5f2e:	e5f7      	b.n	5b20 <__aeabi_dsub+0x174>
    5f30:	1b4d      	subs	r5, r1, r5
    5f32:	42a9      	cmp	r1, r5
    5f34:	4189      	sbcs	r1, r1
    5f36:	1bc7      	subs	r7, r0, r7
    5f38:	4249      	negs	r1, r1
    5f3a:	1a7f      	subs	r7, r7, r1
    5f3c:	469a      	mov	sl, r3
    5f3e:	e561      	b.n	5a04 <__aeabi_dsub+0x58>
    5f40:	0002      	movs	r2, r0
    5f42:	430a      	orrs	r2, r1
    5f44:	d03a      	beq.n	5fbc <__aeabi_dsub+0x610>
    5f46:	08ed      	lsrs	r5, r5, #3
    5f48:	077c      	lsls	r4, r7, #29
    5f4a:	432c      	orrs	r4, r5
    5f4c:	2580      	movs	r5, #128	; 0x80
    5f4e:	08fa      	lsrs	r2, r7, #3
    5f50:	032d      	lsls	r5, r5, #12
    5f52:	422a      	tst	r2, r5
    5f54:	d008      	beq.n	5f68 <__aeabi_dsub+0x5bc>
    5f56:	08c7      	lsrs	r7, r0, #3
    5f58:	422f      	tst	r7, r5
    5f5a:	d105      	bne.n	5f68 <__aeabi_dsub+0x5bc>
    5f5c:	0745      	lsls	r5, r0, #29
    5f5e:	002c      	movs	r4, r5
    5f60:	003a      	movs	r2, r7
    5f62:	469a      	mov	sl, r3
    5f64:	08c9      	lsrs	r1, r1, #3
    5f66:	430c      	orrs	r4, r1
    5f68:	0f67      	lsrs	r7, r4, #29
    5f6a:	00d2      	lsls	r2, r2, #3
    5f6c:	00e5      	lsls	r5, r4, #3
    5f6e:	4317      	orrs	r7, r2
    5f70:	4c36      	ldr	r4, [pc, #216]	; (604c <__aeabi_dsub+0x6a0>)
    5f72:	e547      	b.n	5a04 <__aeabi_dsub+0x58>
    5f74:	0007      	movs	r7, r0
    5f76:	000d      	movs	r5, r1
    5f78:	0014      	movs	r4, r2
    5f7a:	e543      	b.n	5a04 <__aeabi_dsub+0x58>
    5f7c:	003a      	movs	r2, r7
    5f7e:	432a      	orrs	r2, r5
    5f80:	d043      	beq.n	600a <__aeabi_dsub+0x65e>
    5f82:	0002      	movs	r2, r0
    5f84:	430a      	orrs	r2, r1
    5f86:	d019      	beq.n	5fbc <__aeabi_dsub+0x610>
    5f88:	08ed      	lsrs	r5, r5, #3
    5f8a:	077c      	lsls	r4, r7, #29
    5f8c:	432c      	orrs	r4, r5
    5f8e:	2580      	movs	r5, #128	; 0x80
    5f90:	08fa      	lsrs	r2, r7, #3
    5f92:	032d      	lsls	r5, r5, #12
    5f94:	422a      	tst	r2, r5
    5f96:	d007      	beq.n	5fa8 <__aeabi_dsub+0x5fc>
    5f98:	08c6      	lsrs	r6, r0, #3
    5f9a:	422e      	tst	r6, r5
    5f9c:	d104      	bne.n	5fa8 <__aeabi_dsub+0x5fc>
    5f9e:	0747      	lsls	r7, r0, #29
    5fa0:	003c      	movs	r4, r7
    5fa2:	0032      	movs	r2, r6
    5fa4:	08c9      	lsrs	r1, r1, #3
    5fa6:	430c      	orrs	r4, r1
    5fa8:	00d7      	lsls	r7, r2, #3
    5faa:	0f62      	lsrs	r2, r4, #29
    5fac:	00e5      	lsls	r5, r4, #3
    5fae:	4317      	orrs	r7, r2
    5fb0:	469a      	mov	sl, r3
    5fb2:	4c26      	ldr	r4, [pc, #152]	; (604c <__aeabi_dsub+0x6a0>)
    5fb4:	e526      	b.n	5a04 <__aeabi_dsub+0x58>
    5fb6:	2200      	movs	r2, #0
    5fb8:	2500      	movs	r5, #0
    5fba:	e544      	b.n	5a46 <__aeabi_dsub+0x9a>
    5fbc:	4c23      	ldr	r4, [pc, #140]	; (604c <__aeabi_dsub+0x6a0>)
    5fbe:	e521      	b.n	5a04 <__aeabi_dsub+0x58>
    5fc0:	2000      	movs	r0, #0
    5fc2:	e749      	b.n	5e58 <__aeabi_dsub+0x4ac>
    5fc4:	2300      	movs	r3, #0
    5fc6:	2500      	movs	r5, #0
    5fc8:	e5bb      	b.n	5b42 <__aeabi_dsub+0x196>
    5fca:	464c      	mov	r4, r9
    5fcc:	003e      	movs	r6, r7
    5fce:	3c20      	subs	r4, #32
    5fd0:	40e6      	lsrs	r6, r4
    5fd2:	464c      	mov	r4, r9
    5fd4:	46b4      	mov	ip, r6
    5fd6:	2c20      	cmp	r4, #32
    5fd8:	d031      	beq.n	603e <__aeabi_dsub+0x692>
    5fda:	2440      	movs	r4, #64	; 0x40
    5fdc:	464e      	mov	r6, r9
    5fde:	1ba6      	subs	r6, r4, r6
    5fe0:	40b7      	lsls	r7, r6
    5fe2:	433d      	orrs	r5, r7
    5fe4:	1e6c      	subs	r4, r5, #1
    5fe6:	41a5      	sbcs	r5, r4
    5fe8:	4664      	mov	r4, ip
    5fea:	432c      	orrs	r4, r5
    5fec:	2700      	movs	r7, #0
    5fee:	1b0d      	subs	r5, r1, r4
    5ff0:	e6e7      	b.n	5dc2 <__aeabi_dsub+0x416>
    5ff2:	2280      	movs	r2, #128	; 0x80
    5ff4:	2300      	movs	r3, #0
    5ff6:	0312      	lsls	r2, r2, #12
    5ff8:	4c14      	ldr	r4, [pc, #80]	; (604c <__aeabi_dsub+0x6a0>)
    5ffa:	2500      	movs	r5, #0
    5ffc:	e5a1      	b.n	5b42 <__aeabi_dsub+0x196>
    5ffe:	433d      	orrs	r5, r7
    6000:	1e6f      	subs	r7, r5, #1
    6002:	41bd      	sbcs	r5, r7
    6004:	2700      	movs	r7, #0
    6006:	b2ed      	uxtb	r5, r5
    6008:	e760      	b.n	5ecc <__aeabi_dsub+0x520>
    600a:	0007      	movs	r7, r0
    600c:	000d      	movs	r5, r1
    600e:	4c0f      	ldr	r4, [pc, #60]	; (604c <__aeabi_dsub+0x6a0>)
    6010:	e4f8      	b.n	5a04 <__aeabi_dsub+0x58>
    6012:	0007      	movs	r7, r0
    6014:	000d      	movs	r5, r1
    6016:	e4f5      	b.n	5a04 <__aeabi_dsub+0x58>
    6018:	464e      	mov	r6, r9
    601a:	003c      	movs	r4, r7
    601c:	3e20      	subs	r6, #32
    601e:	40f4      	lsrs	r4, r6
    6020:	46a0      	mov	r8, r4
    6022:	464c      	mov	r4, r9
    6024:	2c20      	cmp	r4, #32
    6026:	d00e      	beq.n	6046 <__aeabi_dsub+0x69a>
    6028:	2440      	movs	r4, #64	; 0x40
    602a:	464e      	mov	r6, r9
    602c:	1ba4      	subs	r4, r4, r6
    602e:	40a7      	lsls	r7, r4
    6030:	433d      	orrs	r5, r7
    6032:	1e6f      	subs	r7, r5, #1
    6034:	41bd      	sbcs	r5, r7
    6036:	4644      	mov	r4, r8
    6038:	2700      	movs	r7, #0
    603a:	4325      	orrs	r5, r4
    603c:	e746      	b.n	5ecc <__aeabi_dsub+0x520>
    603e:	2700      	movs	r7, #0
    6040:	e7cf      	b.n	5fe2 <__aeabi_dsub+0x636>
    6042:	000d      	movs	r5, r1
    6044:	e573      	b.n	5b2e <__aeabi_dsub+0x182>
    6046:	2700      	movs	r7, #0
    6048:	e7f2      	b.n	6030 <__aeabi_dsub+0x684>
    604a:	46c0      	nop			; (mov r8, r8)
    604c:	000007ff 	.word	0x000007ff
    6050:	ff7fffff 	.word	0xff7fffff

00006054 <__aeabi_dcmpun>:
    6054:	b570      	push	{r4, r5, r6, lr}
    6056:	4e0e      	ldr	r6, [pc, #56]	; (6090 <__aeabi_dcmpun+0x3c>)
    6058:	030c      	lsls	r4, r1, #12
    605a:	031d      	lsls	r5, r3, #12
    605c:	0049      	lsls	r1, r1, #1
    605e:	005b      	lsls	r3, r3, #1
    6060:	0b24      	lsrs	r4, r4, #12
    6062:	0d49      	lsrs	r1, r1, #21
    6064:	0b2d      	lsrs	r5, r5, #12
    6066:	0d5b      	lsrs	r3, r3, #21
    6068:	42b1      	cmp	r1, r6
    606a:	d004      	beq.n	6076 <__aeabi_dcmpun+0x22>
    606c:	4908      	ldr	r1, [pc, #32]	; (6090 <__aeabi_dcmpun+0x3c>)
    606e:	2000      	movs	r0, #0
    6070:	428b      	cmp	r3, r1
    6072:	d008      	beq.n	6086 <__aeabi_dcmpun+0x32>
    6074:	bd70      	pop	{r4, r5, r6, pc}
    6076:	4304      	orrs	r4, r0
    6078:	2001      	movs	r0, #1
    607a:	2c00      	cmp	r4, #0
    607c:	d1fa      	bne.n	6074 <__aeabi_dcmpun+0x20>
    607e:	4904      	ldr	r1, [pc, #16]	; (6090 <__aeabi_dcmpun+0x3c>)
    6080:	2000      	movs	r0, #0
    6082:	428b      	cmp	r3, r1
    6084:	d1f6      	bne.n	6074 <__aeabi_dcmpun+0x20>
    6086:	4315      	orrs	r5, r2
    6088:	0028      	movs	r0, r5
    608a:	1e45      	subs	r5, r0, #1
    608c:	41a8      	sbcs	r0, r5
    608e:	e7f1      	b.n	6074 <__aeabi_dcmpun+0x20>
    6090:	000007ff 	.word	0x000007ff

00006094 <__aeabi_d2iz>:
    6094:	030b      	lsls	r3, r1, #12
    6096:	b530      	push	{r4, r5, lr}
    6098:	4d13      	ldr	r5, [pc, #76]	; (60e8 <__aeabi_d2iz+0x54>)
    609a:	0b1a      	lsrs	r2, r3, #12
    609c:	004b      	lsls	r3, r1, #1
    609e:	0d5b      	lsrs	r3, r3, #21
    60a0:	0fc9      	lsrs	r1, r1, #31
    60a2:	2400      	movs	r4, #0
    60a4:	42ab      	cmp	r3, r5
    60a6:	dd11      	ble.n	60cc <__aeabi_d2iz+0x38>
    60a8:	4c10      	ldr	r4, [pc, #64]	; (60ec <__aeabi_d2iz+0x58>)
    60aa:	42a3      	cmp	r3, r4
    60ac:	dc10      	bgt.n	60d0 <__aeabi_d2iz+0x3c>
    60ae:	2480      	movs	r4, #128	; 0x80
    60b0:	0364      	lsls	r4, r4, #13
    60b2:	4322      	orrs	r2, r4
    60b4:	4c0e      	ldr	r4, [pc, #56]	; (60f0 <__aeabi_d2iz+0x5c>)
    60b6:	1ae4      	subs	r4, r4, r3
    60b8:	2c1f      	cmp	r4, #31
    60ba:	dd0c      	ble.n	60d6 <__aeabi_d2iz+0x42>
    60bc:	480d      	ldr	r0, [pc, #52]	; (60f4 <__aeabi_d2iz+0x60>)
    60be:	1ac3      	subs	r3, r0, r3
    60c0:	40da      	lsrs	r2, r3
    60c2:	0013      	movs	r3, r2
    60c4:	425c      	negs	r4, r3
    60c6:	2900      	cmp	r1, #0
    60c8:	d100      	bne.n	60cc <__aeabi_d2iz+0x38>
    60ca:	001c      	movs	r4, r3
    60cc:	0020      	movs	r0, r4
    60ce:	bd30      	pop	{r4, r5, pc}
    60d0:	4b09      	ldr	r3, [pc, #36]	; (60f8 <__aeabi_d2iz+0x64>)
    60d2:	18cc      	adds	r4, r1, r3
    60d4:	e7fa      	b.n	60cc <__aeabi_d2iz+0x38>
    60d6:	40e0      	lsrs	r0, r4
    60d8:	4c08      	ldr	r4, [pc, #32]	; (60fc <__aeabi_d2iz+0x68>)
    60da:	46a4      	mov	ip, r4
    60dc:	4463      	add	r3, ip
    60de:	409a      	lsls	r2, r3
    60e0:	0013      	movs	r3, r2
    60e2:	4303      	orrs	r3, r0
    60e4:	e7ee      	b.n	60c4 <__aeabi_d2iz+0x30>
    60e6:	46c0      	nop			; (mov r8, r8)
    60e8:	000003fe 	.word	0x000003fe
    60ec:	0000041d 	.word	0x0000041d
    60f0:	00000433 	.word	0x00000433
    60f4:	00000413 	.word	0x00000413
    60f8:	7fffffff 	.word	0x7fffffff
    60fc:	fffffbed 	.word	0xfffffbed

00006100 <__aeabi_i2d>:
    6100:	b570      	push	{r4, r5, r6, lr}
    6102:	2800      	cmp	r0, #0
    6104:	d030      	beq.n	6168 <__aeabi_i2d+0x68>
    6106:	17c3      	asrs	r3, r0, #31
    6108:	18c4      	adds	r4, r0, r3
    610a:	405c      	eors	r4, r3
    610c:	0fc5      	lsrs	r5, r0, #31
    610e:	0020      	movs	r0, r4
    6110:	f000 f950 	bl	63b4 <__clzsi2>
    6114:	4b17      	ldr	r3, [pc, #92]	; (6174 <__aeabi_i2d+0x74>)
    6116:	4a18      	ldr	r2, [pc, #96]	; (6178 <__aeabi_i2d+0x78>)
    6118:	1a1b      	subs	r3, r3, r0
    611a:	1ad2      	subs	r2, r2, r3
    611c:	2a1f      	cmp	r2, #31
    611e:	dd18      	ble.n	6152 <__aeabi_i2d+0x52>
    6120:	4a16      	ldr	r2, [pc, #88]	; (617c <__aeabi_i2d+0x7c>)
    6122:	1ad2      	subs	r2, r2, r3
    6124:	4094      	lsls	r4, r2
    6126:	2200      	movs	r2, #0
    6128:	0324      	lsls	r4, r4, #12
    612a:	055b      	lsls	r3, r3, #21
    612c:	0b24      	lsrs	r4, r4, #12
    612e:	0d5b      	lsrs	r3, r3, #21
    6130:	2100      	movs	r1, #0
    6132:	0010      	movs	r0, r2
    6134:	0324      	lsls	r4, r4, #12
    6136:	0d0a      	lsrs	r2, r1, #20
    6138:	0512      	lsls	r2, r2, #20
    613a:	0b24      	lsrs	r4, r4, #12
    613c:	4314      	orrs	r4, r2
    613e:	4a10      	ldr	r2, [pc, #64]	; (6180 <__aeabi_i2d+0x80>)
    6140:	051b      	lsls	r3, r3, #20
    6142:	4014      	ands	r4, r2
    6144:	431c      	orrs	r4, r3
    6146:	0064      	lsls	r4, r4, #1
    6148:	07ed      	lsls	r5, r5, #31
    614a:	0864      	lsrs	r4, r4, #1
    614c:	432c      	orrs	r4, r5
    614e:	0021      	movs	r1, r4
    6150:	bd70      	pop	{r4, r5, r6, pc}
    6152:	0021      	movs	r1, r4
    6154:	4091      	lsls	r1, r2
    6156:	000a      	movs	r2, r1
    6158:	210b      	movs	r1, #11
    615a:	1a08      	subs	r0, r1, r0
    615c:	40c4      	lsrs	r4, r0
    615e:	055b      	lsls	r3, r3, #21
    6160:	0324      	lsls	r4, r4, #12
    6162:	0b24      	lsrs	r4, r4, #12
    6164:	0d5b      	lsrs	r3, r3, #21
    6166:	e7e3      	b.n	6130 <__aeabi_i2d+0x30>
    6168:	2500      	movs	r5, #0
    616a:	2300      	movs	r3, #0
    616c:	2400      	movs	r4, #0
    616e:	2200      	movs	r2, #0
    6170:	e7de      	b.n	6130 <__aeabi_i2d+0x30>
    6172:	46c0      	nop			; (mov r8, r8)
    6174:	0000041e 	.word	0x0000041e
    6178:	00000433 	.word	0x00000433
    617c:	00000413 	.word	0x00000413
    6180:	800fffff 	.word	0x800fffff

00006184 <__aeabi_ui2d>:
    6184:	b570      	push	{r4, r5, r6, lr}
    6186:	1e05      	subs	r5, r0, #0
    6188:	d028      	beq.n	61dc <__aeabi_ui2d+0x58>
    618a:	f000 f913 	bl	63b4 <__clzsi2>
    618e:	4b15      	ldr	r3, [pc, #84]	; (61e4 <__aeabi_ui2d+0x60>)
    6190:	4a15      	ldr	r2, [pc, #84]	; (61e8 <__aeabi_ui2d+0x64>)
    6192:	1a1b      	subs	r3, r3, r0
    6194:	1ad2      	subs	r2, r2, r3
    6196:	2a1f      	cmp	r2, #31
    6198:	dd16      	ble.n	61c8 <__aeabi_ui2d+0x44>
    619a:	002c      	movs	r4, r5
    619c:	4a13      	ldr	r2, [pc, #76]	; (61ec <__aeabi_ui2d+0x68>)
    619e:	2500      	movs	r5, #0
    61a0:	1ad2      	subs	r2, r2, r3
    61a2:	4094      	lsls	r4, r2
    61a4:	055a      	lsls	r2, r3, #21
    61a6:	0324      	lsls	r4, r4, #12
    61a8:	0b24      	lsrs	r4, r4, #12
    61aa:	0d52      	lsrs	r2, r2, #21
    61ac:	2100      	movs	r1, #0
    61ae:	0324      	lsls	r4, r4, #12
    61b0:	0d0b      	lsrs	r3, r1, #20
    61b2:	0b24      	lsrs	r4, r4, #12
    61b4:	051b      	lsls	r3, r3, #20
    61b6:	4323      	orrs	r3, r4
    61b8:	4c0d      	ldr	r4, [pc, #52]	; (61f0 <__aeabi_ui2d+0x6c>)
    61ba:	0512      	lsls	r2, r2, #20
    61bc:	4023      	ands	r3, r4
    61be:	4313      	orrs	r3, r2
    61c0:	005b      	lsls	r3, r3, #1
    61c2:	0028      	movs	r0, r5
    61c4:	0859      	lsrs	r1, r3, #1
    61c6:	bd70      	pop	{r4, r5, r6, pc}
    61c8:	210b      	movs	r1, #11
    61ca:	002c      	movs	r4, r5
    61cc:	1a08      	subs	r0, r1, r0
    61ce:	40c4      	lsrs	r4, r0
    61d0:	4095      	lsls	r5, r2
    61d2:	0324      	lsls	r4, r4, #12
    61d4:	055a      	lsls	r2, r3, #21
    61d6:	0b24      	lsrs	r4, r4, #12
    61d8:	0d52      	lsrs	r2, r2, #21
    61da:	e7e7      	b.n	61ac <__aeabi_ui2d+0x28>
    61dc:	2200      	movs	r2, #0
    61de:	2400      	movs	r4, #0
    61e0:	e7e4      	b.n	61ac <__aeabi_ui2d+0x28>
    61e2:	46c0      	nop			; (mov r8, r8)
    61e4:	0000041e 	.word	0x0000041e
    61e8:	00000433 	.word	0x00000433
    61ec:	00000413 	.word	0x00000413
    61f0:	800fffff 	.word	0x800fffff

000061f4 <__aeabi_f2d>:
    61f4:	0042      	lsls	r2, r0, #1
    61f6:	0e12      	lsrs	r2, r2, #24
    61f8:	1c51      	adds	r1, r2, #1
    61fa:	0243      	lsls	r3, r0, #9
    61fc:	b2c9      	uxtb	r1, r1
    61fe:	b570      	push	{r4, r5, r6, lr}
    6200:	0a5d      	lsrs	r5, r3, #9
    6202:	0fc4      	lsrs	r4, r0, #31
    6204:	2901      	cmp	r1, #1
    6206:	dd15      	ble.n	6234 <__aeabi_f2d+0x40>
    6208:	21e0      	movs	r1, #224	; 0xe0
    620a:	0089      	lsls	r1, r1, #2
    620c:	468c      	mov	ip, r1
    620e:	076d      	lsls	r5, r5, #29
    6210:	0b1b      	lsrs	r3, r3, #12
    6212:	4462      	add	r2, ip
    6214:	2100      	movs	r1, #0
    6216:	0028      	movs	r0, r5
    6218:	0d0d      	lsrs	r5, r1, #20
    621a:	052d      	lsls	r5, r5, #20
    621c:	432b      	orrs	r3, r5
    621e:	4d1c      	ldr	r5, [pc, #112]	; (6290 <__aeabi_f2d+0x9c>)
    6220:	0552      	lsls	r2, r2, #21
    6222:	402b      	ands	r3, r5
    6224:	0852      	lsrs	r2, r2, #1
    6226:	4313      	orrs	r3, r2
    6228:	005b      	lsls	r3, r3, #1
    622a:	07e4      	lsls	r4, r4, #31
    622c:	085b      	lsrs	r3, r3, #1
    622e:	4323      	orrs	r3, r4
    6230:	0019      	movs	r1, r3
    6232:	bd70      	pop	{r4, r5, r6, pc}
    6234:	2a00      	cmp	r2, #0
    6236:	d115      	bne.n	6264 <__aeabi_f2d+0x70>
    6238:	2d00      	cmp	r5, #0
    623a:	d01f      	beq.n	627c <__aeabi_f2d+0x88>
    623c:	0028      	movs	r0, r5
    623e:	f000 f8b9 	bl	63b4 <__clzsi2>
    6242:	280a      	cmp	r0, #10
    6244:	dc1d      	bgt.n	6282 <__aeabi_f2d+0x8e>
    6246:	230b      	movs	r3, #11
    6248:	002a      	movs	r2, r5
    624a:	1a1b      	subs	r3, r3, r0
    624c:	40da      	lsrs	r2, r3
    624e:	0013      	movs	r3, r2
    6250:	0002      	movs	r2, r0
    6252:	3215      	adds	r2, #21
    6254:	4095      	lsls	r5, r2
    6256:	4a0f      	ldr	r2, [pc, #60]	; (6294 <__aeabi_f2d+0xa0>)
    6258:	031b      	lsls	r3, r3, #12
    625a:	1a12      	subs	r2, r2, r0
    625c:	0552      	lsls	r2, r2, #21
    625e:	0b1b      	lsrs	r3, r3, #12
    6260:	0d52      	lsrs	r2, r2, #21
    6262:	e7d7      	b.n	6214 <__aeabi_f2d+0x20>
    6264:	2d00      	cmp	r5, #0
    6266:	d006      	beq.n	6276 <__aeabi_f2d+0x82>
    6268:	2280      	movs	r2, #128	; 0x80
    626a:	0b1b      	lsrs	r3, r3, #12
    626c:	0312      	lsls	r2, r2, #12
    626e:	4313      	orrs	r3, r2
    6270:	076d      	lsls	r5, r5, #29
    6272:	4a09      	ldr	r2, [pc, #36]	; (6298 <__aeabi_f2d+0xa4>)
    6274:	e7ce      	b.n	6214 <__aeabi_f2d+0x20>
    6276:	4a08      	ldr	r2, [pc, #32]	; (6298 <__aeabi_f2d+0xa4>)
    6278:	2300      	movs	r3, #0
    627a:	e7cb      	b.n	6214 <__aeabi_f2d+0x20>
    627c:	2200      	movs	r2, #0
    627e:	2300      	movs	r3, #0
    6280:	e7c8      	b.n	6214 <__aeabi_f2d+0x20>
    6282:	0003      	movs	r3, r0
    6284:	3b0b      	subs	r3, #11
    6286:	409d      	lsls	r5, r3
    6288:	002b      	movs	r3, r5
    628a:	2500      	movs	r5, #0
    628c:	e7e3      	b.n	6256 <__aeabi_f2d+0x62>
    628e:	46c0      	nop			; (mov r8, r8)
    6290:	800fffff 	.word	0x800fffff
    6294:	00000389 	.word	0x00000389
    6298:	000007ff 	.word	0x000007ff

0000629c <__aeabi_d2f>:
    629c:	004b      	lsls	r3, r1, #1
    629e:	b570      	push	{r4, r5, r6, lr}
    62a0:	0d5e      	lsrs	r6, r3, #21
    62a2:	030c      	lsls	r4, r1, #12
    62a4:	1c75      	adds	r5, r6, #1
    62a6:	0a64      	lsrs	r4, r4, #9
    62a8:	0f42      	lsrs	r2, r0, #29
    62aa:	056d      	lsls	r5, r5, #21
    62ac:	4322      	orrs	r2, r4
    62ae:	0fc9      	lsrs	r1, r1, #31
    62b0:	00c4      	lsls	r4, r0, #3
    62b2:	0d6d      	lsrs	r5, r5, #21
    62b4:	2d01      	cmp	r5, #1
    62b6:	dd2a      	ble.n	630e <__aeabi_d2f+0x72>
    62b8:	4b3b      	ldr	r3, [pc, #236]	; (63a8 <__aeabi_d2f+0x10c>)
    62ba:	18f3      	adds	r3, r6, r3
    62bc:	2bfe      	cmp	r3, #254	; 0xfe
    62be:	dc1a      	bgt.n	62f6 <__aeabi_d2f+0x5a>
    62c0:	2b00      	cmp	r3, #0
    62c2:	dd42      	ble.n	634a <__aeabi_d2f+0xae>
    62c4:	0180      	lsls	r0, r0, #6
    62c6:	1e45      	subs	r5, r0, #1
    62c8:	41a8      	sbcs	r0, r5
    62ca:	00d2      	lsls	r2, r2, #3
    62cc:	4310      	orrs	r0, r2
    62ce:	0f62      	lsrs	r2, r4, #29
    62d0:	4302      	orrs	r2, r0
    62d2:	0750      	lsls	r0, r2, #29
    62d4:	d004      	beq.n	62e0 <__aeabi_d2f+0x44>
    62d6:	200f      	movs	r0, #15
    62d8:	4010      	ands	r0, r2
    62da:	2804      	cmp	r0, #4
    62dc:	d000      	beq.n	62e0 <__aeabi_d2f+0x44>
    62de:	3204      	adds	r2, #4
    62e0:	2080      	movs	r0, #128	; 0x80
    62e2:	04c0      	lsls	r0, r0, #19
    62e4:	4010      	ands	r0, r2
    62e6:	d021      	beq.n	632c <__aeabi_d2f+0x90>
    62e8:	3301      	adds	r3, #1
    62ea:	2bff      	cmp	r3, #255	; 0xff
    62ec:	d003      	beq.n	62f6 <__aeabi_d2f+0x5a>
    62ee:	0192      	lsls	r2, r2, #6
    62f0:	0a52      	lsrs	r2, r2, #9
    62f2:	b2db      	uxtb	r3, r3
    62f4:	e001      	b.n	62fa <__aeabi_d2f+0x5e>
    62f6:	23ff      	movs	r3, #255	; 0xff
    62f8:	2200      	movs	r2, #0
    62fa:	0252      	lsls	r2, r2, #9
    62fc:	0a52      	lsrs	r2, r2, #9
    62fe:	05db      	lsls	r3, r3, #23
    6300:	4313      	orrs	r3, r2
    6302:	005b      	lsls	r3, r3, #1
    6304:	07c9      	lsls	r1, r1, #31
    6306:	085b      	lsrs	r3, r3, #1
    6308:	430b      	orrs	r3, r1
    630a:	0018      	movs	r0, r3
    630c:	bd70      	pop	{r4, r5, r6, pc}
    630e:	2e00      	cmp	r6, #0
    6310:	d007      	beq.n	6322 <__aeabi_d2f+0x86>
    6312:	4314      	orrs	r4, r2
    6314:	d0ef      	beq.n	62f6 <__aeabi_d2f+0x5a>
    6316:	2080      	movs	r0, #128	; 0x80
    6318:	00d2      	lsls	r2, r2, #3
    631a:	0480      	lsls	r0, r0, #18
    631c:	4302      	orrs	r2, r0
    631e:	23ff      	movs	r3, #255	; 0xff
    6320:	e7d7      	b.n	62d2 <__aeabi_d2f+0x36>
    6322:	4322      	orrs	r2, r4
    6324:	2300      	movs	r3, #0
    6326:	2a00      	cmp	r2, #0
    6328:	d003      	beq.n	6332 <__aeabi_d2f+0x96>
    632a:	2205      	movs	r2, #5
    632c:	08d2      	lsrs	r2, r2, #3
    632e:	2bff      	cmp	r3, #255	; 0xff
    6330:	d003      	beq.n	633a <__aeabi_d2f+0x9e>
    6332:	0252      	lsls	r2, r2, #9
    6334:	0a52      	lsrs	r2, r2, #9
    6336:	b2db      	uxtb	r3, r3
    6338:	e7df      	b.n	62fa <__aeabi_d2f+0x5e>
    633a:	2a00      	cmp	r2, #0
    633c:	d032      	beq.n	63a4 <__aeabi_d2f+0x108>
    633e:	2080      	movs	r0, #128	; 0x80
    6340:	03c0      	lsls	r0, r0, #15
    6342:	4302      	orrs	r2, r0
    6344:	0252      	lsls	r2, r2, #9
    6346:	0a52      	lsrs	r2, r2, #9
    6348:	e7d7      	b.n	62fa <__aeabi_d2f+0x5e>
    634a:	0018      	movs	r0, r3
    634c:	3017      	adds	r0, #23
    634e:	db14      	blt.n	637a <__aeabi_d2f+0xde>
    6350:	2080      	movs	r0, #128	; 0x80
    6352:	0400      	lsls	r0, r0, #16
    6354:	4302      	orrs	r2, r0
    6356:	201e      	movs	r0, #30
    6358:	1ac0      	subs	r0, r0, r3
    635a:	281f      	cmp	r0, #31
    635c:	dc0f      	bgt.n	637e <__aeabi_d2f+0xe2>
    635e:	0025      	movs	r5, r4
    6360:	4b12      	ldr	r3, [pc, #72]	; (63ac <__aeabi_d2f+0x110>)
    6362:	18f3      	adds	r3, r6, r3
    6364:	409d      	lsls	r5, r3
    6366:	1e6e      	subs	r6, r5, #1
    6368:	41b5      	sbcs	r5, r6
    636a:	409a      	lsls	r2, r3
    636c:	002b      	movs	r3, r5
    636e:	4313      	orrs	r3, r2
    6370:	0022      	movs	r2, r4
    6372:	40c2      	lsrs	r2, r0
    6374:	431a      	orrs	r2, r3
    6376:	2300      	movs	r3, #0
    6378:	e7ab      	b.n	62d2 <__aeabi_d2f+0x36>
    637a:	2300      	movs	r3, #0
    637c:	e7d5      	b.n	632a <__aeabi_d2f+0x8e>
    637e:	2502      	movs	r5, #2
    6380:	426d      	negs	r5, r5
    6382:	1aeb      	subs	r3, r5, r3
    6384:	0015      	movs	r5, r2
    6386:	40dd      	lsrs	r5, r3
    6388:	2820      	cmp	r0, #32
    638a:	d009      	beq.n	63a0 <__aeabi_d2f+0x104>
    638c:	4b08      	ldr	r3, [pc, #32]	; (63b0 <__aeabi_d2f+0x114>)
    638e:	18f3      	adds	r3, r6, r3
    6390:	409a      	lsls	r2, r3
    6392:	4314      	orrs	r4, r2
    6394:	1e62      	subs	r2, r4, #1
    6396:	4194      	sbcs	r4, r2
    6398:	0022      	movs	r2, r4
    639a:	2300      	movs	r3, #0
    639c:	432a      	orrs	r2, r5
    639e:	e798      	b.n	62d2 <__aeabi_d2f+0x36>
    63a0:	2200      	movs	r2, #0
    63a2:	e7f6      	b.n	6392 <__aeabi_d2f+0xf6>
    63a4:	2200      	movs	r2, #0
    63a6:	e7a8      	b.n	62fa <__aeabi_d2f+0x5e>
    63a8:	fffffc80 	.word	0xfffffc80
    63ac:	fffffc82 	.word	0xfffffc82
    63b0:	fffffca2 	.word	0xfffffca2

000063b4 <__clzsi2>:
    63b4:	211c      	movs	r1, #28
    63b6:	2301      	movs	r3, #1
    63b8:	041b      	lsls	r3, r3, #16
    63ba:	4298      	cmp	r0, r3
    63bc:	d301      	bcc.n	63c2 <__clzsi2+0xe>
    63be:	0c00      	lsrs	r0, r0, #16
    63c0:	3910      	subs	r1, #16
    63c2:	0a1b      	lsrs	r3, r3, #8
    63c4:	4298      	cmp	r0, r3
    63c6:	d301      	bcc.n	63cc <__clzsi2+0x18>
    63c8:	0a00      	lsrs	r0, r0, #8
    63ca:	3908      	subs	r1, #8
    63cc:	091b      	lsrs	r3, r3, #4
    63ce:	4298      	cmp	r0, r3
    63d0:	d301      	bcc.n	63d6 <__clzsi2+0x22>
    63d2:	0900      	lsrs	r0, r0, #4
    63d4:	3904      	subs	r1, #4
    63d6:	a202      	add	r2, pc, #8	; (adr r2, 63e0 <__clzsi2+0x2c>)
    63d8:	5c10      	ldrb	r0, [r2, r0]
    63da:	1840      	adds	r0, r0, r1
    63dc:	4770      	bx	lr
    63de:	46c0      	nop			; (mov r8, r8)
    63e0:	02020304 	.word	0x02020304
    63e4:	01010101 	.word	0x01010101
	...

000063f0 <__errno>:
    63f0:	4b01      	ldr	r3, [pc, #4]	; (63f8 <__errno+0x8>)
    63f2:	6818      	ldr	r0, [r3, #0]
    63f4:	4770      	bx	lr
    63f6:	46c0      	nop			; (mov r8, r8)
    63f8:	200000d4 	.word	0x200000d4

000063fc <__libc_init_array>:
    63fc:	4b0e      	ldr	r3, [pc, #56]	; (6438 <__libc_init_array+0x3c>)
    63fe:	b570      	push	{r4, r5, r6, lr}
    6400:	2500      	movs	r5, #0
    6402:	001e      	movs	r6, r3
    6404:	4c0d      	ldr	r4, [pc, #52]	; (643c <__libc_init_array+0x40>)
    6406:	1ae4      	subs	r4, r4, r3
    6408:	10a4      	asrs	r4, r4, #2
    640a:	42a5      	cmp	r5, r4
    640c:	d004      	beq.n	6418 <__libc_init_array+0x1c>
    640e:	00ab      	lsls	r3, r5, #2
    6410:	58f3      	ldr	r3, [r6, r3]
    6412:	4798      	blx	r3
    6414:	3501      	adds	r5, #1
    6416:	e7f8      	b.n	640a <__libc_init_array+0xe>
    6418:	f000 f894 	bl	6544 <_init>
    641c:	4b08      	ldr	r3, [pc, #32]	; (6440 <__libc_init_array+0x44>)
    641e:	2500      	movs	r5, #0
    6420:	001e      	movs	r6, r3
    6422:	4c08      	ldr	r4, [pc, #32]	; (6444 <__libc_init_array+0x48>)
    6424:	1ae4      	subs	r4, r4, r3
    6426:	10a4      	asrs	r4, r4, #2
    6428:	42a5      	cmp	r5, r4
    642a:	d004      	beq.n	6436 <__libc_init_array+0x3a>
    642c:	00ab      	lsls	r3, r5, #2
    642e:	58f3      	ldr	r3, [r6, r3]
    6430:	4798      	blx	r3
    6432:	3501      	adds	r5, #1
    6434:	e7f8      	b.n	6428 <__libc_init_array+0x2c>
    6436:	bd70      	pop	{r4, r5, r6, pc}
    6438:	00006550 	.word	0x00006550
    643c:	00006550 	.word	0x00006550
    6440:	00006550 	.word	0x00006550
    6444:	00006554 	.word	0x00006554

00006448 <senseBatPin>:
    6448:	06000000 01000106                                .....

0000644d <senseAPin>:
    644d:	03010001 0100010b                                .....

00006452 <senseBPin>:
    6452:	02010001 0000010a                                .....

00006457 <senseCPin>:
    6457:	03000001 00000101                                .....

0000645c <senseDPin>:
    645c:	02000001 00000100                                .....

00006461 <analogAccelPin>:
    6461:	07000001 70000007 0000776f 00000000              .......pow.....

00006470 <TWO52>:
    6470:	00000000 43300000 00000000 c3300000     ......0C......0.
    6480:	000044c8 00004426 00004426 00004424     .D..&D..&D..$D..
    6490:	000044ba 000044ba 000044b0 00004424     .D...D...D..$D..
    64a0:	000044ba 000044b0 000044ba 00004424     .D...D...D..$D..
    64b0:	000044c0 000044c0 000044c0 0000454a     .D...D...D..JE..
    64c0:	00004e60 00004d2e 00004e34 00004d24     `N...M..4N..$M..
    64d0:	00004e34 00004e3e 00004e34 00004d24     4N..>N..4N..$M..
    64e0:	00004d2e 00004d2e 00004e3e 00004d24     .M...M..>N..$M..
    64f0:	00004d1a 00004d1a 00004d1a 00005090     .M...M...M...P..
    6500:	000056a8 00005568 00005568 00005566     .V..hU..hU..fU..
    6510:	00005680 00005680 00005672 00005566     .V...V..rV..fU..
    6520:	00005680 00005672 00005680 00005566     .V..rV...V..fU..
    6530:	00005688 00005688 00005688 00005888     .V...V...V...X..
    6540:	00000043                                C...

00006544 <_init>:
    6544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6546:	46c0      	nop			; (mov r8, r8)
    6548:	bcf8      	pop	{r3, r4, r5, r6, r7}
    654a:	bc08      	pop	{r3}
    654c:	469e      	mov	lr, r3
    654e:	4770      	bx	lr

00006550 <__init_array_start>:
    6550:	000000dd 	.word	0x000000dd

00006554 <_fini>:
    6554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6556:	46c0      	nop			; (mov r8, r8)
    6558:	bcf8      	pop	{r3, r4, r5, r6, r7}
    655a:	bc08      	pop	{r3}
    655c:	469e      	mov	lr, r3
    655e:	4770      	bx	lr

00006560 <__fini_array_start>:
    6560:	000000b5 	.word	0x000000b5
