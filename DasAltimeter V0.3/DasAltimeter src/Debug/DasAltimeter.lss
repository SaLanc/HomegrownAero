
DasAltimeter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000064a0  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000004a0  20000000  000064a0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000398  200004a0  00006940  000204a0  2**3
                  ALLOC
  3 .stack        00002000  20000838  00006cd8  000204a0  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000204a0  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  000204c8  2**0
                  CONTENTS, READONLY
  6 .debug_info   0002e379  00000000  00000000  00020521  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003887  00000000  00000000  0004e89a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00002865  00000000  00000000  00052121  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000490  00000000  00000000  00054986  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000d70  00000000  00000000  00054e16  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00016e30  00000000  00000000  00055b86  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000ab4b  00000000  00000000  0006c9b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00073440  00000000  00000000  00077501  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001118  00000000  00000000  000ea944  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
 *         retrieved from cpu registers.
 */
void SystemCoreClockUpdate(void)
{
	// Not implemented
	SystemCoreClock = __SYSTEM_CLOCK;
       0:	38 28 00 20 19 01 00 00 15 01 00 00 15 01 00 00     8(. ............
	...
      2c:	15 01 00 00 00 00 00 00 00 00 00 00 15 01 00 00     ................
      3c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      4c:	15 0f 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      5c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      6c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      7c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      8c:	b9 0f 00 00 21 10 00 00 00 00 00 00 00 00 00 00     ....!...........
      9c:	15 01 00 00 15 01 00 00 15 01 00 00 15 01 00 00     ................
      ac:	15 01 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	200004a0 	.word	0x200004a0
      d4:	00000000 	.word	0x00000000
      d8:	000064a0 	.word	0x000064a0

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	200004a4 	.word	0x200004a4
     108:	000064a0 	.word	0x000064a0
     10c:	000064a0 	.word	0x000064a0
     110:	00000000 	.word	0x00000000

00000114 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     114:	e7fe      	b.n	114 <Dummy_Handler>
	...

00000118 <Reset_Handler>:
        if (pSrc != pDest) {
     118:	4821      	ldr	r0, [pc, #132]	; (1a0 <Reset_Handler+0x88>)
     11a:	4922      	ldr	r1, [pc, #136]	; (1a4 <Reset_Handler+0x8c>)
{
     11c:	b570      	push	{r4, r5, r6, lr}
        if (pSrc != pDest) {
     11e:	4288      	cmp	r0, r1
     120:	d004      	beq.n	12c <Reset_Handler+0x14>
     122:	2300      	movs	r3, #0
                for (; pDest < &_erelocate;) {
     124:	4c20      	ldr	r4, [pc, #128]	; (1a8 <Reset_Handler+0x90>)
     126:	18ca      	adds	r2, r1, r3
     128:	42a2      	cmp	r2, r4
     12a:	d332      	bcc.n	192 <Reset_Handler+0x7a>
                *pDest++ = 0;
     12c:	2100      	movs	r1, #0
     12e:	4b1f      	ldr	r3, [pc, #124]	; (1ac <Reset_Handler+0x94>)
        for (pDest = &_szero; pDest < &_ezero;) {
     130:	4a1f      	ldr	r2, [pc, #124]	; (1b0 <Reset_Handler+0x98>)
     132:	4293      	cmp	r3, r2
     134:	d331      	bcc.n	19a <Reset_Handler+0x82>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     136:	21ff      	movs	r1, #255	; 0xff
     138:	4b1e      	ldr	r3, [pc, #120]	; (1b4 <Reset_Handler+0x9c>)
     13a:	4a1f      	ldr	r2, [pc, #124]	; (1b8 <Reset_Handler+0xa0>)
     13c:	438b      	bics	r3, r1
     13e:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     140:	2202      	movs	r2, #2
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     142:	250c      	movs	r5, #12
     144:	2408      	movs	r4, #8
        DMAC->QOSCTRL.bit.DQOS = 2;
     146:	2630      	movs	r6, #48	; 0x30
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     148:	4b1c      	ldr	r3, [pc, #112]	; (1bc <Reset_Handler+0xa4>)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     14a:	481d      	ldr	r0, [pc, #116]	; (1c0 <Reset_Handler+0xa8>)
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     14c:	625a      	str	r2, [r3, #36]	; 0x24
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     14e:	78c3      	ldrb	r3, [r0, #3]
     150:	39fc      	subs	r1, #252	; 0xfc
     152:	438b      	bics	r3, r1
     154:	4313      	orrs	r3, r2
     156:	70c3      	strb	r3, [r0, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     158:	78c3      	ldrb	r3, [r0, #3]
     15a:	43ab      	bics	r3, r5
     15c:	4323      	orrs	r3, r4
     15e:	70c3      	strb	r3, [r0, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
     160:	4b18      	ldr	r3, [pc, #96]	; (1c4 <Reset_Handler+0xac>)
     162:	7b98      	ldrb	r0, [r3, #14]
     164:	43b0      	bics	r0, r6
     166:	0006      	movs	r6, r0
     168:	2020      	movs	r0, #32
     16a:	4330      	orrs	r0, r6
     16c:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     16e:	7b98      	ldrb	r0, [r3, #14]
     170:	43a8      	bics	r0, r5
     172:	4304      	orrs	r4, r0
     174:	739c      	strb	r4, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     176:	7b98      	ldrb	r0, [r3, #14]
     178:	4388      	bics	r0, r1
     17a:	4302      	orrs	r2, r0
     17c:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
     17e:	2380      	movs	r3, #128	; 0x80
     180:	4a11      	ldr	r2, [pc, #68]	; (1c8 <Reset_Handler+0xb0>)
     182:	6851      	ldr	r1, [r2, #4]
     184:	430b      	orrs	r3, r1
     186:	6053      	str	r3, [r2, #4]
        __libc_init_array();
     188:	4b10      	ldr	r3, [pc, #64]	; (1cc <Reset_Handler+0xb4>)
     18a:	4798      	blx	r3
        main();
     18c:	4b10      	ldr	r3, [pc, #64]	; (1d0 <Reset_Handler+0xb8>)
     18e:	4798      	blx	r3
     190:	e7fe      	b.n	190 <Reset_Handler+0x78>
                        *pDest++ = *pSrc++;
     192:	58c5      	ldr	r5, [r0, r3]
     194:	3304      	adds	r3, #4
     196:	6015      	str	r5, [r2, #0]
     198:	e7c5      	b.n	126 <Reset_Handler+0xe>
                *pDest++ = 0;
     19a:	c302      	stmia	r3!, {r1}
     19c:	e7c9      	b.n	132 <Reset_Handler+0x1a>
     19e:	46c0      	nop			; (mov r8, r8)
     1a0:	000064a0 	.word	0x000064a0
     1a4:	20000000 	.word	0x20000000
     1a8:	200004a0 	.word	0x200004a0
     1ac:	200004a0 	.word	0x200004a0
     1b0:	20000838 	.word	0x20000838
     1b4:	00000000 	.word	0x00000000
     1b8:	e000ed00 	.word	0xe000ed00
     1bc:	410070fc 	.word	0x410070fc
     1c0:	41005000 	.word	0x41005000
     1c4:	41004800 	.word	0x41004800
     1c8:	41004000 	.word	0x41004000
     1cc:	00006205 	.word	0x00006205
     1d0:	000009d5 	.word	0x000009d5

000001d4 <SystemInit>:
     1d4:	4a01      	ldr	r2, [pc, #4]	; (1dc <SystemInit+0x8>)
     1d6:	4b02      	ldr	r3, [pc, #8]	; (1e0 <SystemInit+0xc>)
     1d8:	601a      	str	r2, [r3, #0]
     1da:	4770      	bx	lr
     1dc:	000f4240 	.word	0x000f4240
     1e0:	20000000 	.word	0x20000000

000001e4 <AT25SFHoldTillReady>:
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
}


inline static void pinLow(Pin p) {
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     1e4:	2380      	movs	r3, #128	; 0x80
    pinLow(cs_mem);
    spiDataOut(MEM_SPI,OPCODE_WRITEENABLE);
    pinHigh(cs_mem);
}

void AT25SFHoldTillReady() {
     1e6:	b570      	push	{r4, r5, r6, lr}
     1e8:	4d08      	ldr	r5, [pc, #32]	; (20c <AT25SFHoldTillReady+0x28>)
     1ea:	02db      	lsls	r3, r3, #11
     1ec:	616b      	str	r3, [r5, #20]
    pinLow(cs_mem);
    spiDataOut(MEM_SPI,OPCODE_READSTATUS);
     1ee:	2105      	movs	r1, #5
     1f0:	2001      	movs	r0, #1
     1f2:	4b07      	ldr	r3, [pc, #28]	; (210 <AT25SFHoldTillReady+0x2c>)
     1f4:	4798      	blx	r3
    while (spiDataIn(MEM_SPI) & 0x01);
     1f6:	2401      	movs	r4, #1
     1f8:	0020      	movs	r0, r4
     1fa:	4b06      	ldr	r3, [pc, #24]	; (214 <AT25SFHoldTillReady+0x30>)
     1fc:	4798      	blx	r3
     1fe:	4220      	tst	r0, r4
     200:	d1fa      	bne.n	1f8 <AT25SFHoldTillReady+0x14>
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     202:	2380      	movs	r3, #128	; 0x80
     204:	02db      	lsls	r3, r3, #11
     206:	61ab      	str	r3, [r5, #24]
    pinHigh(cs_mem);
}
     208:	bd70      	pop	{r4, r5, r6, pc}
     20a:	46c0      	nop			; (mov r8, r8)
     20c:	41004400 	.word	0x41004400
     210:	00002b09 	.word	0x00002b09
     214:	00002b21 	.word	0x00002b21

00000218 <AT25SFChipErase>:
void AT25SFChipErase() {
     218:	b570      	push	{r4, r5, r6, lr}
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     21a:	2580      	movs	r5, #128	; 0x80
     21c:	4c06      	ldr	r4, [pc, #24]	; (238 <AT25SFChipErase+0x20>)
     21e:	02ed      	lsls	r5, r5, #11

    pinLow(cs_mem);
    spiDataOut(MEM_SPI,OPCODE_WRITEENABLE);
     220:	4e06      	ldr	r6, [pc, #24]	; (23c <AT25SFChipErase+0x24>)
     222:	6165      	str	r5, [r4, #20]
     224:	2106      	movs	r1, #6
     226:	2001      	movs	r0, #1
     228:	47b0      	blx	r6
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     22a:	61a5      	str	r5, [r4, #24]
    pinHigh(cs_mem);

    pinLow(cs_mem);
    spiDataOut(MEM_SPI,OPCODE_CHIP_ERASE);
     22c:	2160      	movs	r1, #96	; 0x60
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     22e:	6165      	str	r5, [r4, #20]
     230:	2001      	movs	r0, #1
     232:	47b0      	blx	r6
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     234:	61a5      	str	r5, [r4, #24]
    pinHigh(cs_mem);
}
     236:	bd70      	pop	{r4, r5, r6, pc}
     238:	41004400 	.word	0x41004400
     23c:	00002b09 	.word	0x00002b09

00000240 <AT25SFWriteBytes>:
    pinHigh(cs_mem);

    return _byte;
}

void AT25SFWriteBytes(uint32_t address, u8_t len, uint8_t *bytes) {
     240:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     242:	2780      	movs	r7, #128	; 0x80
     244:	0006      	movs	r6, r0
     246:	4c13      	ldr	r4, [pc, #76]	; (294 <AT25SFWriteBytes+0x54>)
     248:	02ff      	lsls	r7, r7, #11
     24a:	9201      	str	r2, [sp, #4]


    pinLow(cs_mem);
    spiDataOut(MEM_SPI,OPCODE_WRITEENABLE);
     24c:	4d12      	ldr	r5, [pc, #72]	; (298 <AT25SFWriteBytes+0x58>)
void AT25SFWriteBytes(uint32_t address, u8_t len, uint8_t *bytes) {
     24e:	9100      	str	r1, [sp, #0]
    spiDataOut(MEM_SPI,OPCODE_WRITEENABLE);
     250:	2001      	movs	r0, #1
     252:	6167      	str	r7, [r4, #20]
     254:	2106      	movs	r1, #6
     256:	47a8      	blx	r5
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     258:	61a7      	str	r7, [r4, #24]
    pinHigh(cs_mem);

    pinLow(cs_mem);
    spiDataOut(MEM_SPI,OPCODE_PROGRAM);
     25a:	2102      	movs	r1, #2
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     25c:	6167      	str	r7, [r4, #20]
     25e:	2001      	movs	r0, #1
     260:	47a8      	blx	r5
    spiDataOut(MEM_SPI,((address & 0xFF0000) >> 16));
     262:	0c31      	lsrs	r1, r6, #16
     264:	b2c9      	uxtb	r1, r1
     266:	2001      	movs	r0, #1
     268:	47a8      	blx	r5
    spiDataOut(MEM_SPI,((address & 0x00FF00) >>  8));
     26a:	0a31      	lsrs	r1, r6, #8
     26c:	b2c9      	uxtb	r1, r1
     26e:	2001      	movs	r0, #1
     270:	47a8      	blx	r5
    spiDataOut(MEM_SPI,((address & 0x0000FF) >>  0));
     272:	b2f1      	uxtb	r1, r6
     274:	2001      	movs	r0, #1
     276:	47a8      	blx	r5
     278:	9e01      	ldr	r6, [sp, #4]
     27a:	9b00      	ldr	r3, [sp, #0]
     27c:	18f7      	adds	r7, r6, r3

    for (u8_t pos = 0; pos < len; ++pos) {
     27e:	42be      	cmp	r6, r7
     280:	d103      	bne.n	28a <AT25SFWriteBytes+0x4a>
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     282:	2380      	movs	r3, #128	; 0x80
     284:	02db      	lsls	r3, r3, #11
     286:	61a3      	str	r3, [r4, #24]
        spiDataOut(MEM_SPI, bytes[pos]);
    }

    pinHigh(cs_mem);

}
     288:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
        spiDataOut(MEM_SPI, bytes[pos]);
     28a:	7831      	ldrb	r1, [r6, #0]
     28c:	2001      	movs	r0, #1
     28e:	47a8      	blx	r5
     290:	3601      	adds	r6, #1
     292:	e7f4      	b.n	27e <AT25SFWriteBytes+0x3e>
     294:	41004400 	.word	0x41004400
     298:	00002b09 	.word	0x00002b09

0000029c <AT25SEWritePage>:
    delay_ms(70);

}


u8_t AT25SEWritePage(u32_t startingAddress, u8_t *data) {
     29c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     29e:	2780      	movs	r7, #128	; 0x80
     2a0:	0006      	movs	r6, r0
     2a2:	4c13      	ldr	r4, [pc, #76]	; (2f0 <AT25SEWritePage+0x54>)
     2a4:	02ff      	lsls	r7, r7, #11

    u8_t bytesSent = 0;

    pinLow(cs_mem);
    spiDataOut(MEM_SPI,OPCODE_WRITEENABLE);
     2a6:	4d13      	ldr	r5, [pc, #76]	; (2f4 <AT25SEWritePage+0x58>)
u8_t AT25SEWritePage(u32_t startingAddress, u8_t *data) {
     2a8:	9101      	str	r1, [sp, #4]
    spiDataOut(MEM_SPI,OPCODE_WRITEENABLE);
     2aa:	2001      	movs	r0, #1
     2ac:	6167      	str	r7, [r4, #20]
     2ae:	2106      	movs	r1, #6
     2b0:	47a8      	blx	r5
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     2b2:	61a7      	str	r7, [r4, #24]
    pinHigh(cs_mem);

    pinLow(cs_mem);
    spiDataOut(MEM_SPI,OPCODE_PROGRAM);
     2b4:	2102      	movs	r1, #2
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     2b6:	6167      	str	r7, [r4, #20]
     2b8:	2001      	movs	r0, #1
     2ba:	47a8      	blx	r5
    spiDataOut(MEM_SPI,((startingAddress & 0xFF0000) >> 16));
     2bc:	0c31      	lsrs	r1, r6, #16
     2be:	b2c9      	uxtb	r1, r1
     2c0:	2001      	movs	r0, #1
     2c2:	47a8      	blx	r5
    spiDataOut(MEM_SPI,((startingAddress & 0x00FF00) >>  8));
     2c4:	0a31      	lsrs	r1, r6, #8
     2c6:	b2c9      	uxtb	r1, r1
     2c8:	2001      	movs	r0, #1
     2ca:	47a8      	blx	r5
    spiDataOut(MEM_SPI,((startingAddress & 0x0000FF) >>  0));
     2cc:	b2f1      	uxtb	r1, r6
     2ce:	2001      	movs	r0, #1
     2d0:	47a8      	blx	r5
     2d2:	9e01      	ldr	r6, [sp, #4]
     2d4:	1c77      	adds	r7, r6, #1
     2d6:	37ff      	adds	r7, #255	; 0xff


    for (u16_t pos = 0; pos < 256; ++pos) {
        ++bytesSent;
        spiDataOut(SPI1,data[pos]);
     2d8:	7831      	ldrb	r1, [r6, #0]
     2da:	2001      	movs	r0, #1
     2dc:	3601      	adds	r6, #1
     2de:	47a8      	blx	r5
    for (u16_t pos = 0; pos < 256; ++pos) {
     2e0:	42b7      	cmp	r7, r6
     2e2:	d1f9      	bne.n	2d8 <AT25SEWritePage+0x3c>
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     2e4:	2380      	movs	r3, #128	; 0x80
     2e6:	02db      	lsls	r3, r3, #11
    }
    pinHigh(cs_mem);


    return bytesSent;
}
     2e8:	2000      	movs	r0, #0
     2ea:	61a3      	str	r3, [r4, #24]
     2ec:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
     2ee:	46c0      	nop			; (mov r8, r8)
     2f0:	41004400 	.word	0x41004400
     2f4:	00002b09 	.word	0x00002b09

000002f8 <AT25SEreadSample>:
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     2f8:	2380      	movs	r3, #128	; 0x80

void AT25SEreadSample(u32_t startingAddress, u8_t len, u8_t *data) {
     2fa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     2fc:	0005      	movs	r5, r0
     2fe:	000f      	movs	r7, r1
     300:	4e11      	ldr	r6, [pc, #68]	; (348 <AT25SEreadSample+0x50>)
     302:	02db      	lsls	r3, r3, #11
     304:	9201      	str	r2, [sp, #4]

    pinLow(cs_mem);
    spiDataOut(MEM_SPI,OPCODE_FASTREAD_ARRAY);
     306:	4c11      	ldr	r4, [pc, #68]	; (34c <AT25SEreadSample+0x54>)
     308:	6173      	str	r3, [r6, #20]
     30a:	210b      	movs	r1, #11
     30c:	2001      	movs	r0, #1
     30e:	47a0      	blx	r4
    spiDataOut(MEM_SPI,((startingAddress & 0xFF0000) >> 16));
     310:	0c29      	lsrs	r1, r5, #16
     312:	b2c9      	uxtb	r1, r1
     314:	2001      	movs	r0, #1
     316:	47a0      	blx	r4
    spiDataOut(MEM_SPI,((startingAddress & 0x00FF00) >>  8));
     318:	0a29      	lsrs	r1, r5, #8
     31a:	b2c9      	uxtb	r1, r1
     31c:	2001      	movs	r0, #1
     31e:	47a0      	blx	r4
    spiDataOut(MEM_SPI,((startingAddress & 0x0000FF) >>  0));
     320:	b2e9      	uxtb	r1, r5
     322:	2001      	movs	r0, #1
     324:	47a0      	blx	r4
    spiDataOut(MEM_SPI, 0xFF);
     326:	21ff      	movs	r1, #255	; 0xff
     328:	2001      	movs	r0, #1
     32a:	47a0      	blx	r4
     32c:	9c01      	ldr	r4, [sp, #4]
     32e:	19e7      	adds	r7, r4, r7


    for (u8_t pos = 0; pos < len; ++pos) {
     330:	42bc      	cmp	r4, r7
     332:	d103      	bne.n	33c <AT25SEreadSample+0x44>
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     334:	2380      	movs	r3, #128	; 0x80
     336:	02db      	lsls	r3, r3, #11
     338:	61b3      	str	r3, [r6, #24]
        data[pos] = spiDataIn(MEM_SPI);
    }
    pinHigh(cs_mem);

}
     33a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
        data[pos] = spiDataIn(MEM_SPI);
     33c:	2001      	movs	r0, #1
     33e:	4b04      	ldr	r3, [pc, #16]	; (350 <AT25SEreadSample+0x58>)
     340:	4798      	blx	r3
     342:	7020      	strb	r0, [r4, #0]
     344:	3401      	adds	r4, #1
     346:	e7f3      	b.n	330 <AT25SEreadSample+0x38>
     348:	41004400 	.word	0x41004400
     34c:	00002b09 	.word	0x00002b09
     350:	00002b21 	.word	0x00002b21

00000354 <AT25SEreadPage>:

void AT25SEreadPage(u32_t startingAddress, u8_t *data) {
     354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     356:	2380      	movs	r3, #128	; 0x80
     358:	0007      	movs	r7, r0
     35a:	000c      	movs	r4, r1
     35c:	4e10      	ldr	r6, [pc, #64]	; (3a0 <AT25SEreadPage+0x4c>)
     35e:	02db      	lsls	r3, r3, #11

    pinLow(cs_mem);
    spiDataOut(MEM_SPI,OPCODE_FASTREAD_ARRAY);
     360:	4d10      	ldr	r5, [pc, #64]	; (3a4 <AT25SEreadPage+0x50>)
     362:	6173      	str	r3, [r6, #20]
     364:	210b      	movs	r1, #11
     366:	2001      	movs	r0, #1
     368:	47a8      	blx	r5
    spiDataOut(MEM_SPI,((startingAddress & 0xFF0000) >> 16));
     36a:	0c39      	lsrs	r1, r7, #16
     36c:	b2c9      	uxtb	r1, r1
     36e:	2001      	movs	r0, #1
     370:	47a8      	blx	r5
    spiDataOut(MEM_SPI,((startingAddress & 0x00FF00) >>  8));
     372:	0a39      	lsrs	r1, r7, #8
     374:	b2c9      	uxtb	r1, r1
     376:	2001      	movs	r0, #1
     378:	47a8      	blx	r5
    spiDataOut(MEM_SPI,((startingAddress & 0x0000FF) >>  0));
     37a:	b2f9      	uxtb	r1, r7
     37c:	2001      	movs	r0, #1
     37e:	47a8      	blx	r5
    spiDataOut(MEM_SPI, 0xFF);
     380:	21ff      	movs	r1, #255	; 0xff
     382:	2001      	movs	r0, #1
     384:	47a8      	blx	r5
     386:	1c65      	adds	r5, r4, #1
     388:	35ff      	adds	r5, #255	; 0xff

    for (u16_t pos = 0; pos < 256; ++pos) {
        data[pos] = spiDataIn(MEM_SPI);
     38a:	2001      	movs	r0, #1
     38c:	4b06      	ldr	r3, [pc, #24]	; (3a8 <AT25SEreadPage+0x54>)
     38e:	4798      	blx	r3
     390:	7020      	strb	r0, [r4, #0]
     392:	3401      	adds	r4, #1
    for (u16_t pos = 0; pos < 256; ++pos) {
     394:	42ac      	cmp	r4, r5
     396:	d1f8      	bne.n	38a <AT25SEreadPage+0x36>
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     398:	2380      	movs	r3, #128	; 0x80
     39a:	02db      	lsls	r3, r3, #11
     39c:	61b3      	str	r3, [r6, #24]
    }
    pinHigh(cs_mem);

}
     39e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     3a0:	41004400 	.word	0x41004400
     3a4:	00002b09 	.word	0x00002b09
     3a8:	00002b21 	.word	0x00002b21

000003ac <readMS5803AdcResults>:
#include <MS5803.h>
#include <boardDefines.h>
#include <math.h>

u32_t readMS5803AdcResults() {
     3ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     3ae:	2780      	movs	r7, #128	; 0x80
     3b0:	4e0b      	ldr	r6, [pc, #44]	; (3e0 <readMS5803AdcResults+0x34>)
     3b2:	01ff      	lsls	r7, r7, #7

    pinLow(cs_baro);
    spiDataOut(BARO_SPI, cmdAdcRead_);
     3b4:	2100      	movs	r1, #0
     3b6:	4b0b      	ldr	r3, [pc, #44]	; (3e4 <readMS5803AdcResults+0x38>)
     3b8:	6177      	str	r7, [r6, #20]
     3ba:	2002      	movs	r0, #2
     3bc:	4798      	blx	r3
    u8_t _byte1 = spiDataIn(SPI2);
     3be:	4d0a      	ldr	r5, [pc, #40]	; (3e8 <readMS5803AdcResults+0x3c>)
     3c0:	2002      	movs	r0, #2
     3c2:	47a8      	blx	r5
     3c4:	0004      	movs	r4, r0
    u8_t _byte2 = spiDataIn(SPI2);
     3c6:	2002      	movs	r0, #2
     3c8:	47a8      	blx	r5
     3ca:	9001      	str	r0, [sp, #4]
    u8_t _byte3 = spiDataIn(SPI2);
     3cc:	2002      	movs	r0, #2
     3ce:	47a8      	blx	r5
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     3d0:	61b7      	str	r7, [r6, #24]
    pinHigh(cs_baro);

    u32_t _receive = (_byte1 << 16) | (_byte2 << 8) | (_byte3);
     3d2:	9b01      	ldr	r3, [sp, #4]
     3d4:	0424      	lsls	r4, r4, #16
     3d6:	021b      	lsls	r3, r3, #8
     3d8:	431c      	orrs	r4, r3
     3da:	4320      	orrs	r0, r4
    return _receive;
}
     3dc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
     3de:	46c0      	nop			; (mov r8, r8)
     3e0:	41004400 	.word	0x41004400
     3e4:	00002b09 	.word	0x00002b09
     3e8:	00002b21 	.word	0x00002b21

000003ec <ConvertPressureTemperature>:

void ConvertPressureTemperature(u32_t pressureRaw, u32_t tempRaw, u32_t* temperatureCelcus, int32_t* pressureMbar ) {
     3ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    const u16_t C5 = coefficients_[5];
    const u16_t C6 = coefficients_[6];

    // calculate 1st order pressure and temperature (MS5607 1st order algorithm)
    const  int32_t dT = (tempRaw) - ((int32_t)C5 << 8);
    *temperatureCelcus  = 2000 + (((int64_t)dT * C6) >> 23) ;
     3ee:	2600      	movs	r6, #0
void ConvertPressureTemperature(u32_t pressureRaw, u32_t tempRaw, u32_t* temperatureCelcus, int32_t* pressureMbar ) {
     3f0:	b089      	sub	sp, #36	; 0x24
     3f2:	9306      	str	r3, [sp, #24]
    const u16_t C1 = coefficients_[1];
     3f4:	4b25      	ldr	r3, [pc, #148]	; (48c <ConvertPressureTemperature+0xa0>)
void ConvertPressureTemperature(u32_t pressureRaw, u32_t tempRaw, u32_t* temperatureCelcus, int32_t* pressureMbar ) {
     3f6:	9004      	str	r0, [sp, #16]
     3f8:	9205      	str	r2, [sp, #20]
    const u16_t C1 = coefficients_[1];
     3fa:	885a      	ldrh	r2, [r3, #2]
    *temperatureCelcus  = 2000 + (((int64_t)dT * C6) >> 23) ;
     3fc:	4c24      	ldr	r4, [pc, #144]	; (490 <ConvertPressureTemperature+0xa4>)
    const u16_t C1 = coefficients_[1];
     3fe:	9202      	str	r2, [sp, #8]
    const u16_t C2 = coefficients_[2];
     400:	889a      	ldrh	r2, [r3, #4]
     402:	9201      	str	r2, [sp, #4]
    const u16_t C4 = coefficients_[4];
     404:	891a      	ldrh	r2, [r3, #8]
    const u16_t C3 = coefficients_[3];
     406:	88dd      	ldrh	r5, [r3, #6]
    const u16_t C4 = coefficients_[4];
     408:	9203      	str	r2, [sp, #12]
    const  int32_t dT = (tempRaw) - ((int32_t)C5 << 8);
     40a:	895f      	ldrh	r7, [r3, #10]
     40c:	023f      	lsls	r7, r7, #8
     40e:	1bcf      	subs	r7, r1, r7
    *temperatureCelcus  = 2000 + (((int64_t)dT * C6) >> 23) ;
     410:	17fa      	asrs	r2, r7, #31
     412:	9207      	str	r2, [sp, #28]
     414:	8998      	ldrh	r0, [r3, #12]
     416:	003a      	movs	r2, r7
     418:	17fb      	asrs	r3, r7, #31
     41a:	0031      	movs	r1, r6
     41c:	47a0      	blx	r4
     41e:	23fa      	movs	r3, #250	; 0xfa
     420:	0249      	lsls	r1, r1, #9
     422:	0dc0      	lsrs	r0, r0, #23
     424:	4308      	orrs	r0, r1
     426:	00db      	lsls	r3, r3, #3
     428:	18c0      	adds	r0, r0, r3
     42a:	9b05      	ldr	r3, [sp, #20]

    const  int64_t OFF   = ((int64_t)C2 << 17) + ((C4 * (int64_t)dT) >> 6);
    const  int64_t SENS  =  ((int64_t)C1 << 16) + ((C3 * (int64_t)dT) >> 7);
     42c:	003a      	movs	r2, r7
    *temperatureCelcus  = 2000 + (((int64_t)dT * C6) >> 23) ;
     42e:	6018      	str	r0, [r3, #0]
    const  int64_t SENS  =  ((int64_t)C1 << 16) + ((C3 * (int64_t)dT) >> 7);
     430:	0031      	movs	r1, r6
     432:	17fb      	asrs	r3, r7, #31
     434:	0028      	movs	r0, r5
     436:	47a0      	blx	r4
     438:	064c      	lsls	r4, r1, #25
     43a:	11cb      	asrs	r3, r1, #7
     43c:	0031      	movs	r1, r6
     43e:	09c2      	lsrs	r2, r0, #7
     440:	4322      	orrs	r2, r4
     442:	9c02      	ldr	r4, [sp, #8]
     444:	0420      	lsls	r0, r4, #16
     446:	1880      	adds	r0, r0, r2
     448:	4159      	adcs	r1, r3
    *pressureMbar = ((((pressureRaw * SENS) >> 21) - OFF) >> 15);
     44a:	4c11      	ldr	r4, [pc, #68]	; (490 <ConvertPressureTemperature+0xa4>)
     44c:	9a04      	ldr	r2, [sp, #16]
     44e:	0033      	movs	r3, r6
     450:	47a0      	blx	r4
     452:	02cb      	lsls	r3, r1, #11
     454:	0d44      	lsrs	r4, r0, #21
    const  int64_t OFF   = ((int64_t)C2 << 17) + ((C4 * (int64_t)dT) >> 6);
     456:	003a      	movs	r2, r7
    *pressureMbar = ((((pressureRaw * SENS) >> 21) - OFF) >> 15);
     458:	431c      	orrs	r4, r3
    const  int64_t OFF   = ((int64_t)C2 << 17) + ((C4 * (int64_t)dT) >> 6);
     45a:	4f0d      	ldr	r7, [pc, #52]	; (490 <ConvertPressureTemperature+0xa4>)
     45c:	9b07      	ldr	r3, [sp, #28]
    *pressureMbar = ((((pressureRaw * SENS) >> 21) - OFF) >> 15);
     45e:	154d      	asrs	r5, r1, #21
    const  int64_t OFF   = ((int64_t)C2 << 17) + ((C4 * (int64_t)dT) >> 6);
     460:	9803      	ldr	r0, [sp, #12]
     462:	0031      	movs	r1, r6
     464:	47b8      	blx	r7
     466:	9e01      	ldr	r6, [sp, #4]
     468:	068f      	lsls	r7, r1, #26
     46a:	0982      	lsrs	r2, r0, #6
     46c:	433a      	orrs	r2, r7
     46e:	118b      	asrs	r3, r1, #6
     470:	0470      	lsls	r0, r6, #17
     472:	0bf1      	lsrs	r1, r6, #15
     474:	1812      	adds	r2, r2, r0
     476:	414b      	adcs	r3, r1
    *pressureMbar = ((((pressureRaw * SENS) >> 21) - OFF) >> 15);
     478:	1aa4      	subs	r4, r4, r2
     47a:	419d      	sbcs	r5, r3
     47c:	046b      	lsls	r3, r5, #17
     47e:	0be4      	lsrs	r4, r4, #15
     480:	431c      	orrs	r4, r3
     482:	9b06      	ldr	r3, [sp, #24]
     484:	601c      	str	r4, [r3, #0]

}
     486:	b009      	add	sp, #36	; 0x24
     488:	bdf0      	pop	{r4, r5, r6, r7, pc}
     48a:	46c0      	nop			; (mov r8, r8)
     48c:	20000636 	.word	0x20000636
     490:	000041a5 	.word	0x000041a5

00000494 <paToFeetNOAA>:

double paToFeetNOAA(int32_t pressureMbar) {
     494:	b510      	push	{r4, lr}

    double lower =(((double)(pressureMbar)/100)/1013.25);
     496:	4b0c      	ldr	r3, [pc, #48]	; (4c8 <paToFeetNOAA+0x34>)
     498:	4798      	blx	r3
     49a:	4c0c      	ldr	r4, [pc, #48]	; (4cc <paToFeetNOAA+0x38>)
     49c:	2200      	movs	r2, #0
     49e:	4b0c      	ldr	r3, [pc, #48]	; (4d0 <paToFeetNOAA+0x3c>)
     4a0:	47a0      	blx	r4
     4a2:	2200      	movs	r2, #0
     4a4:	4b0b      	ldr	r3, [pc, #44]	; (4d4 <paToFeetNOAA+0x40>)
     4a6:	47a0      	blx	r4
    double exponent = 0.190284;

    double altFeet = (1-pow(lower,exponent))*145366.45;
     4a8:	4a0b      	ldr	r2, [pc, #44]	; (4d8 <paToFeetNOAA+0x44>)
     4aa:	4b0c      	ldr	r3, [pc, #48]	; (4dc <paToFeetNOAA+0x48>)
     4ac:	4c0c      	ldr	r4, [pc, #48]	; (4e0 <paToFeetNOAA+0x4c>)
     4ae:	47a0      	blx	r4
     4b0:	4c0c      	ldr	r4, [pc, #48]	; (4e4 <paToFeetNOAA+0x50>)
     4b2:	0002      	movs	r2, r0
     4b4:	000b      	movs	r3, r1
     4b6:	2000      	movs	r0, #0
     4b8:	490b      	ldr	r1, [pc, #44]	; (4e8 <paToFeetNOAA+0x54>)
     4ba:	47a0      	blx	r4
     4bc:	4a0b      	ldr	r2, [pc, #44]	; (4ec <paToFeetNOAA+0x58>)
     4be:	4b0c      	ldr	r3, [pc, #48]	; (4f0 <paToFeetNOAA+0x5c>)
     4c0:	4c0c      	ldr	r4, [pc, #48]	; (4f4 <paToFeetNOAA+0x60>)
     4c2:	47a0      	blx	r4
    return altFeet;

}
     4c4:	bd10      	pop	{r4, pc}
     4c6:	46c0      	nop			; (mov r8, r8)
     4c8:	00005f11 	.word	0x00005f11
     4cc:	00004ad5 	.word	0x00004ad5
     4d0:	40590000 	.word	0x40590000
     4d4:	408faa00 	.word	0x408faa00
     4d8:	e279dd3c 	.word	0xe279dd3c
     4dc:	3fc85b39 	.word	0x3fc85b39
     4e0:	00002e29 	.word	0x00002e29
     4e4:	0000583d 	.word	0x0000583d
     4e8:	3ff00000 	.word	0x3ff00000
     4ec:	9999999a 	.word	0x9999999a
     4f0:	4101beb3 	.word	0x4101beb3
     4f4:	0000533d 	.word	0x0000533d

000004f8 <readMS5803Coefficients>:



void readMS5803Coefficients() {
     4f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     4fa:	2400      	movs	r4, #0
    for (u8_t coeff_num = 1; coeff_num < 7 ; ++coeff_num ) {
        delay_us(600);
        u8_t _cmd = MS5803_CMD_PROM_READ + ((coeff_num)*2);
        delay_us(600);
        pinLow(cs_baro);
        spiDataOut(SPI2, _cmd);
     4fc:	2502      	movs	r5, #2
        delay_us(600);
     4fe:	2096      	movs	r0, #150	; 0x96
     500:	4e11      	ldr	r6, [pc, #68]	; (548 <readMS5803Coefficients+0x50>)
     502:	0080      	lsls	r0, r0, #2
     504:	47b0      	blx	r6
        delay_us(600);
     506:	2096      	movs	r0, #150	; 0x96
     508:	0080      	lsls	r0, r0, #2
     50a:	47b0      	blx	r6
        spiDataOut(SPI2, _cmd);
     50c:	0021      	movs	r1, r4
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     50e:	2380      	movs	r3, #128	; 0x80
     510:	4e0e      	ldr	r6, [pc, #56]	; (54c <readMS5803Coefficients+0x54>)
     512:	01db      	lsls	r3, r3, #7
     514:	395e      	subs	r1, #94	; 0x5e
     516:	b2c9      	uxtb	r1, r1
     518:	6173      	str	r3, [r6, #20]
     51a:	0028      	movs	r0, r5
     51c:	4b0c      	ldr	r3, [pc, #48]	; (550 <readMS5803Coefficients+0x58>)
     51e:	4798      	blx	r3
        u8_t _byte1 = spiDataIn(SPI2);
     520:	4f0c      	ldr	r7, [pc, #48]	; (554 <readMS5803Coefficients+0x5c>)
     522:	0028      	movs	r0, r5
     524:	47b8      	blx	r7
     526:	9001      	str	r0, [sp, #4]
        u8_t _byte2 = spiDataIn(SPI2);
     528:	0028      	movs	r0, r5
     52a:	47b8      	blx	r7
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     52c:	2380      	movs	r3, #128	; 0x80
     52e:	01db      	lsls	r3, r3, #7
     530:	61b3      	str	r3, [r6, #24]
        pinHigh(cs_baro);
        coefficients_[coeff_num] = (_byte1 << 8) | _byte2;
     532:	9b01      	ldr	r3, [sp, #4]
     534:	4a08      	ldr	r2, [pc, #32]	; (558 <readMS5803Coefficients+0x60>)
     536:	021b      	lsls	r3, r3, #8
     538:	18a2      	adds	r2, r4, r2
     53a:	4318      	orrs	r0, r3
     53c:	3402      	adds	r4, #2
     53e:	8050      	strh	r0, [r2, #2]
    for (u8_t coeff_num = 1; coeff_num < 7 ; ++coeff_num ) {
     540:	2c0c      	cmp	r4, #12
     542:	d1dc      	bne.n	4fe <readMS5803Coefficients+0x6>
    }

}
     544:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
     546:	46c0      	nop			; (mov r8, r8)
     548:	00000ebd 	.word	0x00000ebd
     54c:	41004400 	.word	0x41004400
     550:	00002b09 	.word	0x00002b09
     554:	00002b21 	.word	0x00002b21
     558:	20000636 	.word	0x20000636

0000055c <initMS5803Barometer>:

void initMS5803Barometer() {
     55c:	b570      	push	{r4, r5, r6, lr}
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     55e:	2580      	movs	r5, #128	; 0x80
     560:	4c06      	ldr	r4, [pc, #24]	; (57c <initMS5803Barometer+0x20>)
     562:	01ed      	lsls	r5, r5, #7


    pinLow(cs_baro);
    spiDataOut(BARO_SPI, MS5803_CMD_RES);
     564:	211e      	movs	r1, #30
     566:	6165      	str	r5, [r4, #20]
     568:	2002      	movs	r0, #2
     56a:	4b05      	ldr	r3, [pc, #20]	; (580 <initMS5803Barometer+0x24>)
     56c:	4798      	blx	r3
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     56e:	61a5      	str	r5, [r4, #24]

    pinHigh(cs_baro);
    delay_ms(200);
     570:	20c8      	movs	r0, #200	; 0xc8
     572:	4b04      	ldr	r3, [pc, #16]	; (584 <initMS5803Barometer+0x28>)
     574:	4798      	blx	r3
    readMS5803Coefficients();
     576:	4b04      	ldr	r3, [pc, #16]	; (588 <initMS5803Barometer+0x2c>)
     578:	4798      	blx	r3

}
     57a:	bd70      	pop	{r4, r5, r6, pc}
     57c:	41004400 	.word	0x41004400
     580:	00002b09 	.word	0x00002b09
     584:	00000ee9 	.word	0x00000ee9
     588:	000004f9 	.word	0x000004f9

0000058c <init>:


void init() {

    /* Set 1 Flash Wait State for 48MHz, cf tables 20.9 and 35.27 in SAMD21 Datasheet */
    NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val;
     58c:	211e      	movs	r1, #30
void init() {
     58e:	b5f0      	push	{r4, r5, r6, r7, lr}
    NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val;
     590:	4afe      	ldr	r2, [pc, #1016]	; (98c <init+0x400>)
void init() {
     592:	b085      	sub	sp, #20
    NVMCTRL->CTRLB.bit.RWS = NVMCTRL_CTRLB_RWS_HALF_Val;
     594:	6853      	ldr	r3, [r2, #4]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     596:	2401      	movs	r4, #1
     598:	438b      	bics	r3, r1
     59a:	391c      	subs	r1, #28
     59c:	430b      	orrs	r3, r1
     59e:	6053      	str	r3, [r2, #4]

    /* Turn on the digital interface clock */
    PM->APBAMASK.reg |= PM_APBAMASK_GCLK;
     5a0:	4afb      	ldr	r2, [pc, #1004]	; (990 <init+0x404>)
     5a2:	3106      	adds	r1, #6
     5a4:	6993      	ldr	r3, [r2, #24]
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     5a6:	260f      	movs	r6, #15
     5a8:	430b      	orrs	r3, r1
     5aa:	6193      	str	r3, [r2, #24]

    SystemInit();
     5ac:	4bf9      	ldr	r3, [pc, #996]	; (994 <init+0x408>)
     5ae:	4798      	blx	r3
    GclkInit();
     5b0:	4bf9      	ldr	r3, [pc, #996]	; (998 <init+0x40c>)
     5b2:	4798      	blx	r3
    RtcInit();
     5b4:	4bf9      	ldr	r3, [pc, #996]	; (99c <init+0x410>)
     5b6:	4798      	blx	r3
    delayInit();
     5b8:	4bf9      	ldr	r3, [pc, #996]	; (9a0 <init+0x414>)
     5ba:	4798      	blx	r3
    adcInit();
     5bc:	4bf9      	ldr	r3, [pc, #996]	; (9a4 <init+0x418>)
     5be:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     5c0:	2240      	movs	r2, #64	; 0x40
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     5c2:	21c1      	movs	r1, #193	; 0xc1
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     5c4:	4bf8      	ldr	r3, [pc, #992]	; (9a8 <init+0x41c>)
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     5c6:	0089      	lsls	r1, r1, #2
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     5c8:	601a      	str	r2, [r3, #0]
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     5ca:	585a      	ldr	r2, [r3, r1]
     5cc:	48f7      	ldr	r0, [pc, #988]	; (9ac <init+0x420>)
     5ce:	4002      	ands	r2, r0
     5d0:	505a      	str	r2, [r3, r1]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     5d2:	4bf7      	ldr	r3, [pc, #988]	; (9b0 <init+0x424>)
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     5d4:	2002      	movs	r0, #2
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     5d6:	0019      	movs	r1, r3
     5d8:	3154      	adds	r1, #84	; 0x54
     5da:	780a      	ldrb	r2, [r1, #0]
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     5dc:	001d      	movs	r5, r3
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     5de:	43a2      	bics	r2, r4
     5e0:	700a      	strb	r2, [r1, #0]
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     5e2:	2280      	movs	r2, #128	; 0x80
     5e4:	0352      	lsls	r2, r2, #13
     5e6:	609a      	str	r2, [r3, #8]
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     5e8:	3533      	adds	r5, #51	; 0x33
     5ea:	782a      	ldrb	r2, [r5, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     5ec:	390e      	subs	r1, #14
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     5ee:	43b2      	bics	r2, r6
     5f0:	4322      	orrs	r2, r4
     5f2:	702a      	strb	r2, [r5, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     5f4:	780a      	ldrb	r2, [r1, #0]
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     5f6:	001f      	movs	r7, r3
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     5f8:	4322      	orrs	r2, r4
     5fa:	700a      	strb	r2, [r1, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     5fc:	001a      	movs	r2, r3
     5fe:	3247      	adds	r2, #71	; 0x47
     600:	7811      	ldrb	r1, [r2, #0]
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     602:	3794      	adds	r7, #148	; 0x94
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     604:	43a1      	bics	r1, r4
     606:	7011      	strb	r1, [r2, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     608:	7811      	ldrb	r1, [r2, #0]
     60a:	4301      	orrs	r1, r0
     60c:	7011      	strb	r1, [r2, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     60e:	2180      	movs	r1, #128	; 0x80
     610:	6059      	str	r1, [r3, #4]
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     612:	7828      	ldrb	r0, [r5, #0]
     614:	3970      	subs	r1, #112	; 0x70
     616:	4030      	ands	r0, r6
     618:	4308      	orrs	r0, r1
     61a:	7028      	strb	r0, [r5, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     61c:	2502      	movs	r5, #2
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     61e:	7810      	ldrb	r0, [r2, #0]
     620:	4320      	orrs	r0, r4
     622:	7010      	strb	r0, [r2, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     624:	327c      	adds	r2, #124	; 0x7c
     626:	7810      	ldrb	r0, [r2, #0]
     628:	43a0      	bics	r0, r4
     62a:	7010      	strb	r0, [r2, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     62c:	7810      	ldrb	r0, [r2, #0]
     62e:	4328      	orrs	r0, r5
     630:	7010      	strb	r0, [r2, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     632:	2008      	movs	r0, #8
     634:	4684      	mov	ip, r0
     636:	449c      	add	ip, r3
     638:	4660      	mov	r0, ip
     63a:	3506      	adds	r5, #6
     63c:	67c5      	str	r5, [r0, #124]	; 0x7c
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     63e:	0018      	movs	r0, r3
     640:	30b1      	adds	r0, #177	; 0xb1
     642:	7805      	ldrb	r5, [r0, #0]
     644:	4035      	ands	r5, r6
     646:	430d      	orrs	r5, r1
     648:	7005      	strb	r5, [r0, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     64a:	7815      	ldrb	r5, [r2, #0]
     64c:	4325      	orrs	r5, r4
     64e:	7015      	strb	r5, [r2, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     650:	001d      	movs	r5, r3
     652:	35d7      	adds	r5, #215	; 0xd7
     654:	782a      	ldrb	r2, [r5, #0]
     656:	43a2      	bics	r2, r4
     658:	702a      	strb	r2, [r5, #0]
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     65a:	2580      	movs	r5, #128	; 0x80
     65c:	4ad5      	ldr	r2, [pc, #852]	; (9b4 <init+0x428>)
     65e:	042d      	lsls	r5, r5, #16
     660:	6015      	str	r5, [r2, #0]
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     662:	002a      	movs	r2, r5
     664:	9703      	str	r7, [sp, #12]
     666:	603a      	str	r2, [r7, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     668:	001a      	movs	r2, r3
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     66a:	2702      	movs	r7, #2
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     66c:	32c2      	adds	r2, #194	; 0xc2
     66e:	7815      	ldrb	r5, [r2, #0]
     670:	43a5      	bics	r5, r4
     672:	7015      	strb	r5, [r2, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     674:	7815      	ldrb	r5, [r2, #0]
     676:	433d      	orrs	r5, r7
     678:	7015      	strb	r5, [r2, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     67a:	4665      	mov	r5, ip
     67c:	19ff      	adds	r7, r7, r7
     67e:	67ef      	str	r7, [r5, #124]	; 0x7c
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     680:	7805      	ldrb	r5, [r0, #0]
     682:	43b5      	bics	r5, r6
     684:	4325      	orrs	r5, r4
     686:	7005      	strb	r5, [r0, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     688:	7810      	ldrb	r0, [r2, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     68a:	2502      	movs	r5, #2
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     68c:	4320      	orrs	r0, r4
     68e:	7010      	strb	r0, [r2, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     690:	0018      	movs	r0, r3
     692:	30d6      	adds	r0, #214	; 0xd6
     694:	7802      	ldrb	r2, [r0, #0]
     696:	43a2      	bics	r2, r4
     698:	7002      	strb	r2, [r0, #0]
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     69a:	2080      	movs	r0, #128	; 0x80
     69c:	4ac5      	ldr	r2, [pc, #788]	; (9b4 <init+0x428>)
     69e:	03c0      	lsls	r0, r0, #15
     6a0:	6010      	str	r0, [r2, #0]
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     6a2:	0002      	movs	r2, r0
     6a4:	9803      	ldr	r0, [sp, #12]
     6a6:	6002      	str	r2, [r0, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     6a8:	001a      	movs	r2, r3
     6aa:	3243      	adds	r2, #67	; 0x43
     6ac:	7810      	ldrb	r0, [r2, #0]
     6ae:	43a0      	bics	r0, r4
     6b0:	7010      	strb	r0, [r2, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     6b2:	7810      	ldrb	r0, [r2, #0]
     6b4:	4328      	orrs	r0, r5
     6b6:	7010      	strb	r0, [r2, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     6b8:	2008      	movs	r0, #8
     6ba:	6058      	str	r0, [r3, #4]
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     6bc:	0018      	movs	r0, r3
     6be:	3031      	adds	r0, #49	; 0x31
     6c0:	7805      	ldrb	r5, [r0, #0]
     6c2:	4035      	ands	r5, r6
     6c4:	4329      	orrs	r1, r5
     6c6:	7001      	strb	r1, [r0, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     6c8:	7811      	ldrb	r1, [r2, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     6ca:	2502      	movs	r5, #2
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     6cc:	4321      	orrs	r1, r4
     6ce:	7011      	strb	r1, [r2, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     6d0:	0019      	movs	r1, r3
     6d2:	3159      	adds	r1, #89	; 0x59
     6d4:	780a      	ldrb	r2, [r1, #0]
     6d6:	43a2      	bics	r2, r4
     6d8:	700a      	strb	r2, [r1, #0]
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     6da:	2280      	movs	r2, #128	; 0x80
     6dc:	0492      	lsls	r2, r2, #18
     6de:	609a      	str	r2, [r3, #8]
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     6e0:	615a      	str	r2, [r3, #20]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     6e2:	001a      	movs	r2, r3
     6e4:	3242      	adds	r2, #66	; 0x42
     6e6:	7811      	ldrb	r1, [r2, #0]
     6e8:	43a1      	bics	r1, r4
     6ea:	7011      	strb	r1, [r2, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     6ec:	7811      	ldrb	r1, [r2, #0]
     6ee:	4329      	orrs	r1, r5
     6f0:	7011      	strb	r1, [r2, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     6f2:	605f      	str	r7, [r3, #4]
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     6f4:	7801      	ldrb	r1, [r0, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     6f6:	001f      	movs	r7, r3
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     6f8:	43b1      	bics	r1, r6
     6fa:	4321      	orrs	r1, r4
     6fc:	7001      	strb	r1, [r0, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     6fe:	7811      	ldrb	r1, [r2, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     700:	3749      	adds	r7, #73	; 0x49
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     702:	4321      	orrs	r1, r4
     704:	7011      	strb	r1, [r2, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     706:	0019      	movs	r1, r3
     708:	3158      	adds	r1, #88	; 0x58
     70a:	780a      	ldrb	r2, [r1, #0]
     70c:	43a2      	bics	r2, r4
     70e:	700a      	strb	r2, [r1, #0]
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     710:	2280      	movs	r2, #128	; 0x80
    pinIn(senseDPin);
    pinMux(senseDPin);
    pinOut(fireDPin);
    pinLow(fireDPin);

    charges.igniterAHot = false;
     712:	2100      	movs	r1, #0
     714:	0452      	lsls	r2, r2, #17
     716:	609a      	str	r2, [r3, #8]
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     718:	615a      	str	r2, [r3, #20]
     71a:	4aa7      	ldr	r2, [pc, #668]	; (9b8 <init+0x42c>)
     71c:	7011      	strb	r1, [r2, #0]
    charges.igniterBHot = false;
     71e:	2100      	movs	r1, #0
     720:	7211      	strb	r1, [r2, #8]
    charges.igniterCHot = false;
     722:	2100      	movs	r1, #0
     724:	7411      	strb	r1, [r2, #16]
    charges.igniterDHot = false;
     726:	2100      	movs	r1, #0
     728:	7611      	strb	r1, [r2, #24]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     72a:	7dc2      	ldrb	r2, [r0, #23]
     72c:	43a2      	bics	r2, r4
     72e:	75c2      	strb	r2, [r0, #23]
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     730:	2280      	movs	r2, #128	; 0x80
     732:	0052      	lsls	r2, r2, #1
     734:	609a      	str	r2, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     736:	783a      	ldrb	r2, [r7, #0]
     738:	43a2      	bics	r2, r4
     73a:	703a      	strb	r2, [r7, #0]
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     73c:	2280      	movs	r2, #128	; 0x80
     73e:	0092      	lsls	r2, r2, #2
     740:	609a      	str	r2, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     742:	001a      	movs	r2, r3
     744:	324b      	adds	r2, #75	; 0x4b
     746:	7811      	ldrb	r1, [r2, #0]
     748:	43a1      	bics	r1, r4
     74a:	7011      	strb	r1, [r2, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     74c:	7811      	ldrb	r1, [r2, #0]
     74e:	4329      	orrs	r1, r5
     750:	7011      	strb	r1, [r2, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     752:	2180      	movs	r1, #128	; 0x80
     754:	0109      	lsls	r1, r1, #4
     756:	6059      	str	r1, [r3, #4]
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     758:	2135      	movs	r1, #53	; 0x35
     75a:	468c      	mov	ip, r1
     75c:	449c      	add	ip, r3
     75e:	4661      	mov	r1, ip
     760:	7809      	ldrb	r1, [r1, #0]
     762:	351e      	adds	r5, #30
     764:	4031      	ands	r1, r6
     766:	4329      	orrs	r1, r5
     768:	4665      	mov	r5, ip
     76a:	7029      	strb	r1, [r5, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     76c:	7811      	ldrb	r1, [r2, #0]
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     76e:	2520      	movs	r5, #32
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     770:	4321      	orrs	r1, r4
     772:	7011      	strb	r1, [r2, #0]
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     774:	0019      	movs	r1, r3
     776:	3134      	adds	r1, #52	; 0x34
     778:	780a      	ldrb	r2, [r1, #0]
     77a:	4032      	ands	r2, r6
     77c:	432a      	orrs	r2, r5
     77e:	700a      	strb	r2, [r1, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     780:	783a      	ldrb	r2, [r7, #0]
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     782:	3d1e      	subs	r5, #30
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     784:	4322      	orrs	r2, r4
     786:	703a      	strb	r2, [r7, #0]
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     788:	780a      	ldrb	r2, [r1, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     78a:	3706      	adds	r7, #6
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     78c:	43b2      	bics	r2, r6
     78e:	432a      	orrs	r2, r5
     790:	700a      	strb	r2, [r1, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     792:	7dc2      	ldrb	r2, [r0, #23]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     794:	3196      	adds	r1, #150	; 0x96
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     796:	4322      	orrs	r2, r4
     798:	75c2      	strb	r2, [r0, #23]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     79a:	780a      	ldrb	r2, [r1, #0]
     79c:	43a2      	bics	r2, r4
     79e:	700a      	strb	r2, [r1, #0]
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     7a0:	2280      	movs	r2, #128	; 0x80
     7a2:	4984      	ldr	r1, [pc, #528]	; (9b4 <init+0x428>)
     7a4:	00d2      	lsls	r2, r2, #3
     7a6:	600a      	str	r2, [r1, #0]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     7a8:	0019      	movs	r1, r3
     7aa:	3198      	adds	r1, #152	; 0x98
     7ac:	600a      	str	r2, [r1, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     7ae:	7e41      	ldrb	r1, [r0, #25]
     7b0:	43a1      	bics	r1, r4
     7b2:	7641      	strb	r1, [r0, #25]
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     7b4:	609a      	str	r2, [r3, #8]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     7b6:	619a      	str	r2, [r3, #24]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     7b8:	7fc2      	ldrb	r2, [r0, #31]
     7ba:	43a2      	bics	r2, r4
     7bc:	77c2      	strb	r2, [r0, #31]
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     7be:	2280      	movs	r2, #128	; 0x80
     7c0:	0252      	lsls	r2, r2, #9
     7c2:	609a      	str	r2, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     7c4:	78ba      	ldrb	r2, [r7, #2]
     7c6:	43a2      	bics	r2, r4
     7c8:	70ba      	strb	r2, [r7, #2]
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     7ca:	2280      	movs	r2, #128	; 0x80
     7cc:	0292      	lsls	r2, r2, #10
     7ce:	609a      	str	r2, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     7d0:	001a      	movs	r2, r3
     7d2:	3253      	adds	r2, #83	; 0x53
     7d4:	7811      	ldrb	r1, [r2, #0]
     7d6:	43a1      	bics	r1, r4
     7d8:	7011      	strb	r1, [r2, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     7da:	7811      	ldrb	r1, [r2, #0]
     7dc:	4329      	orrs	r1, r5
     7de:	7011      	strb	r1, [r2, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     7e0:	2180      	movs	r1, #128	; 0x80
     7e2:	0309      	lsls	r1, r1, #12
     7e4:	6059      	str	r1, [r3, #4]
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     7e6:	2139      	movs	r1, #57	; 0x39
     7e8:	468c      	mov	ip, r1
     7ea:	449c      	add	ip, r3
     7ec:	4661      	mov	r1, ip
     7ee:	7809      	ldrb	r1, [r1, #0]
     7f0:	351e      	adds	r5, #30
     7f2:	4031      	ands	r1, r6
     7f4:	4329      	orrs	r1, r5
     7f6:	4665      	mov	r5, ip
     7f8:	7029      	strb	r1, [r5, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     7fa:	7811      	ldrb	r1, [r2, #0]
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     7fc:	2520      	movs	r5, #32
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     7fe:	4321      	orrs	r1, r4
     800:	7011      	strb	r1, [r2, #0]
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     802:	0019      	movs	r1, r3
     804:	3138      	adds	r1, #56	; 0x38
     806:	780a      	ldrb	r2, [r1, #0]
     808:	4032      	ands	r2, r6
     80a:	432a      	orrs	r2, r5
     80c:	700a      	strb	r2, [r1, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     80e:	78ba      	ldrb	r2, [r7, #2]
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     810:	3d1e      	subs	r5, #30
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     812:	4322      	orrs	r2, r4
     814:	70ba      	strb	r2, [r7, #2]
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     816:	780a      	ldrb	r2, [r1, #0]
     818:	43b2      	bics	r2, r6
     81a:	432a      	orrs	r2, r5
     81c:	700a      	strb	r2, [r1, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     81e:	7fc2      	ldrb	r2, [r0, #31]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     820:	3114      	adds	r1, #20
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     822:	4322      	orrs	r2, r4
     824:	77c2      	strb	r2, [r0, #31]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     826:	798a      	ldrb	r2, [r1, #6]
     828:	43a2      	bics	r2, r4
     82a:	718a      	strb	r2, [r1, #6]
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     82c:	2280      	movs	r2, #128	; 0x80
     82e:	02d2      	lsls	r2, r2, #11
     830:	609a      	str	r2, [r3, #8]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     832:	619a      	str	r2, [r3, #24]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     834:	9103      	str	r1, [sp, #12]
     836:	780a      	ldrb	r2, [r1, #0]
     838:	43a2      	bics	r2, r4
     83a:	700a      	strb	r2, [r1, #0]
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     83c:	2280      	movs	r2, #128	; 0x80
     83e:	0152      	lsls	r2, r2, #5
     840:	609a      	str	r2, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     842:	783a      	ldrb	r2, [r7, #0]
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     844:	2120      	movs	r1, #32
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     846:	43a2      	bics	r2, r4
     848:	703a      	strb	r2, [r7, #0]
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     84a:	2280      	movs	r2, #128	; 0x80
     84c:	0212      	lsls	r2, r2, #8
     84e:	609a      	str	r2, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     850:	001a      	movs	r2, r3
     852:	324d      	adds	r2, #77	; 0x4d
     854:	7810      	ldrb	r0, [r2, #0]
     856:	43a0      	bics	r0, r4
     858:	7010      	strb	r0, [r2, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     85a:	7810      	ldrb	r0, [r2, #0]
     85c:	4328      	orrs	r0, r5
     85e:	7010      	strb	r0, [r2, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     860:	2080      	movs	r0, #128	; 0x80
     862:	0180      	lsls	r0, r0, #6
     864:	6058      	str	r0, [r3, #4]
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     866:	0018      	movs	r0, r3
     868:	3036      	adds	r0, #54	; 0x36
     86a:	7805      	ldrb	r5, [r0, #0]
     86c:	4035      	ands	r5, r6
     86e:	430d      	orrs	r5, r1
     870:	7005      	strb	r5, [r0, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     872:	7811      	ldrb	r1, [r2, #0]
     874:	000d      	movs	r5, r1
     876:	4325      	orrs	r5, r4
     878:	7015      	strb	r5, [r2, #0]
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     87a:	2237      	movs	r2, #55	; 0x37
     87c:	4694      	mov	ip, r2
     87e:	449c      	add	ip, r3
     880:	4662      	mov	r2, ip
     882:	2120      	movs	r1, #32
     884:	7812      	ldrb	r2, [r2, #0]
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     886:	2502      	movs	r5, #2
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     888:	4032      	ands	r2, r6
     88a:	430a      	orrs	r2, r1
     88c:	4661      	mov	r1, ip
     88e:	700a      	strb	r2, [r1, #0]
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     890:	2102      	movs	r1, #2
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     892:	783a      	ldrb	r2, [r7, #0]
     894:	4322      	orrs	r2, r4
     896:	703a      	strb	r2, [r7, #0]
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     898:	7802      	ldrb	r2, [r0, #0]
     89a:	43b2      	bics	r2, r6
     89c:	430a      	orrs	r2, r1
     89e:	7002      	strb	r2, [r0, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     8a0:	9a03      	ldr	r2, [sp, #12]
     8a2:	9903      	ldr	r1, [sp, #12]
     8a4:	7812      	ldrb	r2, [r2, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
     8a6:	2040      	movs	r0, #64	; 0x40
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     8a8:	4322      	orrs	r2, r4
     8aa:	700a      	strb	r2, [r1, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     8ac:	0019      	movs	r1, r3
     8ae:	314e      	adds	r1, #78	; 0x4e
     8b0:	780a      	ldrb	r2, [r1, #0]
    pinOut(TxPo);
    pinMux(TxPo);
    pinIn(RxPo);
    pinMux(RxPo);

    sercomClockEnable(SPI2, 3, 4);
     8b2:	4f42      	ldr	r7, [pc, #264]	; (9bc <init+0x430>)
     8b4:	43a2      	bics	r2, r4
     8b6:	700a      	strb	r2, [r1, #0]
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     8b8:	2280      	movs	r2, #128	; 0x80
     8ba:	01d2      	lsls	r2, r2, #7
     8bc:	609a      	str	r2, [r3, #8]
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     8be:	619a      	str	r2, [r3, #24]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     8c0:	001a      	movs	r2, r3
     8c2:	3255      	adds	r2, #85	; 0x55
     8c4:	7811      	ldrb	r1, [r2, #0]
     8c6:	43a1      	bics	r1, r4
     8c8:	7011      	strb	r1, [r2, #0]
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     8ca:	2180      	movs	r1, #128	; 0x80
     8cc:	0389      	lsls	r1, r1, #14
     8ce:	6099      	str	r1, [r3, #8]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     8d0:	7811      	ldrb	r1, [r2, #0]
     8d2:	43a1      	bics	r1, r4
     8d4:	7011      	strb	r1, [r2, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
     8d6:	7811      	ldrb	r1, [r2, #0]
     8d8:	4301      	orrs	r1, r0
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     8da:	0018      	movs	r0, r3
    PORT->Group[p.group].PINCFG[p.pin].bit.DRVSTR = 1;
     8dc:	7011      	strb	r1, [r2, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     8de:	3056      	adds	r0, #86	; 0x56
     8e0:	7802      	ldrb	r2, [r0, #0]
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     8e2:	0019      	movs	r1, r3
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     8e4:	43a2      	bics	r2, r4
     8e6:	7002      	strb	r2, [r0, #0]
    PORT->Group[p.group].DIRSET.reg = (1<<p.pin);
     8e8:	2280      	movs	r2, #128	; 0x80
     8ea:	03d2      	lsls	r2, r2, #15
     8ec:	609a      	str	r2, [r3, #8]
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = p.mux;
     8ee:	313b      	adds	r1, #59	; 0x3b
     8f0:	780a      	ldrb	r2, [r1, #0]
     8f2:	43b2      	bics	r2, r6
     8f4:	432a      	orrs	r2, r5
     8f6:	700a      	strb	r2, [r1, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     8f8:	7802      	ldrb	r2, [r0, #0]
     8fa:	4322      	orrs	r2, r4
     8fc:	7002      	strb	r2, [r0, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 0;
     8fe:	001a      	movs	r2, r3
     900:	3257      	adds	r2, #87	; 0x57
     902:	7810      	ldrb	r0, [r2, #0]
     904:	43a0      	bics	r0, r4
     906:	7010      	strb	r0, [r2, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.INEN = 1;
     908:	7810      	ldrb	r0, [r2, #0]
     90a:	4328      	orrs	r0, r5
     90c:	7010      	strb	r0, [r2, #0]
    PORT->Group[p.group].DIRCLR.reg = (1<<p.pin);
     90e:	2080      	movs	r0, #128	; 0x80
     910:	0400      	lsls	r0, r0, #16
     912:	6058      	str	r0, [r3, #4]
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = p.mux;
     914:	2020      	movs	r0, #32
     916:	780b      	ldrb	r3, [r1, #0]
     918:	4033      	ands	r3, r6
     91a:	4303      	orrs	r3, r0
     91c:	700b      	strb	r3, [r1, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     91e:	7813      	ldrb	r3, [r2, #0]
     920:	0028      	movs	r0, r5
     922:	4323      	orrs	r3, r4
     924:	7013      	strb	r3, [r2, #0]
     926:	2103      	movs	r1, #3
     928:	2204      	movs	r2, #4
     92a:	47b8      	blx	r7
    sercomSpiMasterInit(SPI2, 1, 3, 0, 0, 0x00);
     92c:	2300      	movs	r3, #0
     92e:	4e24      	ldr	r6, [pc, #144]	; (9c0 <init+0x434>)
     930:	9301      	str	r3, [sp, #4]
     932:	9300      	str	r3, [sp, #0]
     934:	0021      	movs	r1, r4
     936:	0028      	movs	r0, r5
     938:	2203      	movs	r2, #3
     93a:	47b0      	blx	r6

    sercomClockEnable(SPI0, 3, 4);
     93c:	2204      	movs	r2, #4
     93e:	2103      	movs	r1, #3
     940:	2000      	movs	r0, #0
     942:	47b8      	blx	r7
    sercomSpiMasterInit(SPI0, 3, 0, 0, 0, 0x00);
     944:	2300      	movs	r3, #0
     946:	2103      	movs	r1, #3
     948:	9301      	str	r3, [sp, #4]
     94a:	9300      	str	r3, [sp, #0]
     94c:	001a      	movs	r2, r3
     94e:	0018      	movs	r0, r3
     950:	47b0      	blx	r6

    sercomClockEnable(SPI1, 3, 4);
     952:	0020      	movs	r0, r4
     954:	2204      	movs	r2, #4
     956:	2103      	movs	r1, #3
     958:	47b8      	blx	r7
    sercomSpiMasterInit(SPI1, 3, 0, 0, 0, 0x00);
     95a:	2300      	movs	r3, #0
     95c:	0020      	movs	r0, r4
     95e:	9301      	str	r3, [sp, #4]
     960:	9300      	str	r3, [sp, #0]
     962:	001a      	movs	r2, r3
     964:	2103      	movs	r1, #3
     966:	47b0      	blx	r6

    sercomClockEnable(USART3, 4, 8);
     968:	2208      	movs	r2, #8
     96a:	2104      	movs	r1, #4
     96c:	2003      	movs	r0, #3
     96e:	47b8      	blx	r7
    sercomUartInit(USART3,1,0,19200);
     970:	2396      	movs	r3, #150	; 0x96
     972:	0021      	movs	r1, r4
     974:	2200      	movs	r2, #0
     976:	2003      	movs	r0, #3
     978:	01db      	lsls	r3, r3, #7
     97a:	4c12      	ldr	r4, [pc, #72]	; (9c4 <init+0x438>)
     97c:	47a0      	blx	r4

    TC4Init();
     97e:	4b12      	ldr	r3, [pc, #72]	; (9c8 <init+0x43c>)
     980:	4798      	blx	r3
    TC5Init();
     982:	4b12      	ldr	r3, [pc, #72]	; (9cc <init+0x440>)
     984:	4798      	blx	r3
}
     986:	b005      	add	sp, #20
     988:	e022      	b.n	9d0 <init+0x444>
     98a:	46c0      	nop			; (mov r8, r8)
     98c:	41004000 	.word	0x41004000
     990:	40000400 	.word	0x40000400
     994:	000001d5 	.word	0x000001d5
     998:	00000d21 	.word	0x00000d21
     99c:	00000da5 	.word	0x00000da5
     9a0:	00000e9d 	.word	0x00000e9d
     9a4:	00000b8d 	.word	0x00000b8d
     9a8:	e000e100 	.word	0xe000e100
     9ac:	ff00ffff 	.word	0xff00ffff
     9b0:	41004400 	.word	0x41004400
     9b4:	41004488 	.word	0x41004488
     9b8:	20000678 	.word	0x20000678
     9bc:	000029fd 	.word	0x000029fd
     9c0:	00002a5d 	.word	0x00002a5d
     9c4:	00002ac1 	.word	0x00002ac1
     9c8:	00000f69 	.word	0x00000f69
     9cc:	00000fd1 	.word	0x00000fd1
     9d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
     9d2:	46c0      	nop			; (mov r8, r8)

000009d4 <main>:


int main(void) {
     9d4:	b510      	push	{r4, lr}

    init();
     9d6:	4b11      	ldr	r3, [pc, #68]	; (a1c <main+0x48>)
     9d8:	4798      	blx	r3

    initMS5803Barometer();
     9da:	4b11      	ldr	r3, [pc, #68]	; (a20 <main+0x4c>)
     9dc:	4798      	blx	r3
    IMUinit();
     9de:	4b11      	ldr	r3, [pc, #68]	; (a24 <main+0x50>)
     9e0:	4798      	blx	r3

    computeKalmanGains();
     9e2:	4b11      	ldr	r3, [pc, #68]	; (a28 <main+0x54>)
     9e4:	4798      	blx	r3

    sampleTick();
     9e6:	4c11      	ldr	r4, [pc, #68]	; (a2c <main+0x58>)
     9e8:	47a0      	blx	r4

    //POST();

    isItPointingUp();
     9ea:	4b11      	ldr	r3, [pc, #68]	; (a30 <main+0x5c>)
     9ec:	4798      	blx	r3

    getSettings();
     9ee:	4b11      	ldr	r3, [pc, #68]	; (a34 <main+0x60>)
     9f0:	4798      	blx	r3

    //beepNumber(12345);


    beep(400);
     9f2:	20c8      	movs	r0, #200	; 0xc8
     9f4:	4b10      	ldr	r3, [pc, #64]	; (a38 <main+0x64>)
     9f6:	0040      	lsls	r0, r0, #1
     9f8:	4798      	blx	r3

    startupTick = millis();
     9fa:	4b10      	ldr	r3, [pc, #64]	; (a3c <main+0x68>)
     9fc:	4798      	blx	r3
     9fe:	4b10      	ldr	r3, [pc, #64]	; (a40 <main+0x6c>)
     a00:	6018      	str	r0, [r3, #0]

    while (1) {
        if (takeSample()) {
     a02:	4b10      	ldr	r3, [pc, #64]	; (a44 <main+0x70>)
     a04:	4798      	blx	r3
     a06:	2800      	cmp	r0, #0
     a08:	d0fb      	beq.n	a02 <main+0x2e>
            sampleTick();
     a0a:	47a0      	blx	r4
            flight();
     a0c:	4b0e      	ldr	r3, [pc, #56]	; (a48 <main+0x74>)
     a0e:	4798      	blx	r3
            igniterTick();
     a10:	4b0e      	ldr	r3, [pc, #56]	; (a4c <main+0x78>)
     a12:	4798      	blx	r3
            computeKalmanStates();
     a14:	4b0e      	ldr	r3, [pc, #56]	; (a50 <main+0x7c>)
     a16:	4798      	blx	r3
     a18:	e7f3      	b.n	a02 <main+0x2e>
     a1a:	46c0      	nop			; (mov r8, r8)
     a1c:	0000058d 	.word	0x0000058d
     a20:	0000055d 	.word	0x0000055d
     a24:	00000a55 	.word	0x00000a55
     a28:	00001645 	.word	0x00001645
     a2c:	000026d5 	.word	0x000026d5
     a30:	00001389 	.word	0x00001389
     a34:	00002c4d 	.word	0x00002c4d
     a38:	00000c6d 	.word	0x00000c6d
     a3c:	00000f31 	.word	0x00000f31
     a40:	20000524 	.word	0x20000524
     a44:	000026bd 	.word	0x000026bd
     a48:	00001039 	.word	0x00001039
     a4c:	0000145d 	.word	0x0000145d
     a50:	000021d5 	.word	0x000021d5

00000a54 <IMUinit>:
#include <util.h>
#include <boardDefines.h>


void IMUinit() {
     a54:	b570      	push	{r4, r5, r6, lr}
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     a56:	4c08      	ldr	r4, [pc, #32]	; (a78 <IMUinit+0x24>)
     a58:	2580      	movs	r5, #128	; 0x80
     a5a:	0023      	movs	r3, r4
     a5c:	00ed      	lsls	r5, r5, #3
     a5e:	3394      	adds	r3, #148	; 0x94
     a60:	601d      	str	r5, [r3, #0]

    pinLow(cs_accel);
    spiDataOut(SPI0, BMI_ACCEL_PMU_RANGE);
     a62:	4e06      	ldr	r6, [pc, #24]	; (a7c <IMUinit+0x28>)
     a64:	210f      	movs	r1, #15
     a66:	2000      	movs	r0, #0
     a68:	47b0      	blx	r6
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
     a6a:	3498      	adds	r4, #152	; 0x98
    spiDataOut(SPI0, BMI_ACCEL_16G_RANGE);
     a6c:	210c      	movs	r1, #12
     a6e:	2000      	movs	r0, #0
     a70:	47b0      	blx	r6
     a72:	6025      	str	r5, [r4, #0]
    pinHigh(cs_accel);

}
     a74:	bd70      	pop	{r4, r5, r6, pc}
     a76:	46c0      	nop			; (mov r8, r8)
     a78:	41004400 	.word	0x41004400
     a7c:	00002b09 	.word	0x00002b09

00000a80 <USARTconnectionAvaliable>:

bool USARTconnectionAvaliable() {
     a80:	b510      	push	{r4, lr}

    if (sercom(USART3)->SPI.INTFLAG.bit.RXC == 1) {
     a82:	4b09      	ldr	r3, [pc, #36]	; (aa8 <USARTconnectionAvaliable+0x28>)
     a84:	7e1c      	ldrb	r4, [r3, #24]
     a86:	0764      	lsls	r4, r4, #29
     a88:	0fe4      	lsrs	r4, r4, #31
     a8a:	2c01      	cmp	r4, #1
     a8c:	d001      	beq.n	a92 <USARTconnectionAvaliable+0x12>
            return true;
        } else {
            return false;
        }
    }
    return false;
     a8e:	2000      	movs	r0, #0
}
     a90:	bd10      	pop	{r4, pc}
        u8_t connectAttempt = usartDataIn(USART3);
     a92:	2003      	movs	r0, #3
     a94:	4b05      	ldr	r3, [pc, #20]	; (aac <USARTconnectionAvaliable+0x2c>)
     a96:	4798      	blx	r3
     a98:	0001      	movs	r1, r0
        if (connectAttempt == 0x48) {
     a9a:	2848      	cmp	r0, #72	; 0x48
     a9c:	d1f7      	bne.n	a8e <USARTconnectionAvaliable+0xe>
            usartDataOut(USART3, 'H');
     a9e:	2003      	movs	r0, #3
     aa0:	4b03      	ldr	r3, [pc, #12]	; (ab0 <USARTconnectionAvaliable+0x30>)
     aa2:	4798      	blx	r3
            return true;
     aa4:	0020      	movs	r0, r4
     aa6:	e7f3      	b.n	a90 <USARTconnectionAvaliable+0x10>
     aa8:	42001400 	.word	0x42001400
     aac:	00002b55 	.word	0x00002b55
     ab0:	00002b3d 	.word	0x00002b3d

00000ab4 <sendTheasePagesToComputer>:

void sendTheasePagesToComputer(u32_t firstPage, u32_t lastPage) {
     ab4:	b5f0      	push	{r4, r5, r6, r7, lr}
    for (u16_t page = 0; page <= pagesToSend; ++page) {

        u8_t data[256];
        AT25SEreadPage(pageToReadAddress , data);

        for (u16_t dataByte = 0; dataByte < 256; ++dataByte) {
     ab6:	2780      	movs	r7, #128	; 0x80
void sendTheasePagesToComputer(u32_t firstPage, u32_t lastPage) {
     ab8:	0005      	movs	r5, r0
    for (u16_t page = 0; page <= pagesToSend; ++page) {
     aba:	2400      	movs	r4, #0
    u16_t pagesToSend = (lastPage - firstPage) >> 8;
     abc:	1a09      	subs	r1, r1, r0
     abe:	0a09      	lsrs	r1, r1, #8
void sendTheasePagesToComputer(u32_t firstPage, u32_t lastPage) {
     ac0:	b0c3      	sub	sp, #268	; 0x10c
    u16_t pagesToSend = (lastPage - firstPage) >> 8;
     ac2:	b28b      	uxth	r3, r1
     ac4:	9301      	str	r3, [sp, #4]
        for (u16_t dataByte = 0; dataByte < 256; ++dataByte) {
     ac6:	007f      	lsls	r7, r7, #1
        AT25SEreadPage(pageToReadAddress , data);
     ac8:	a902      	add	r1, sp, #8
     aca:	0028      	movs	r0, r5
     acc:	4b09      	ldr	r3, [pc, #36]	; (af4 <sendTheasePagesToComputer+0x40>)
     ace:	4798      	blx	r3
     ad0:	2600      	movs	r6, #0
            usartDataOut(USART3, data[dataByte]);
     ad2:	ab02      	add	r3, sp, #8
     ad4:	5d99      	ldrb	r1, [r3, r6]
     ad6:	2003      	movs	r0, #3
     ad8:	4b07      	ldr	r3, [pc, #28]	; (af8 <sendTheasePagesToComputer+0x44>)
     ada:	3601      	adds	r6, #1
     adc:	4798      	blx	r3
        for (u16_t dataByte = 0; dataByte < 256; ++dataByte) {
     ade:	42be      	cmp	r6, r7
     ae0:	d1f7      	bne.n	ad2 <sendTheasePagesToComputer+0x1e>
    for (u16_t page = 0; page <= pagesToSend; ++page) {
     ae2:	3401      	adds	r4, #1
     ae4:	9b01      	ldr	r3, [sp, #4]
        }

        pageToReadAddress = pageToReadAddress + 0x100;
     ae6:	3501      	adds	r5, #1
    for (u16_t page = 0; page <= pagesToSend; ++page) {
     ae8:	b2a4      	uxth	r4, r4
        pageToReadAddress = pageToReadAddress + 0x100;
     aea:	35ff      	adds	r5, #255	; 0xff
    for (u16_t page = 0; page <= pagesToSend; ++page) {
     aec:	42a3      	cmp	r3, r4
     aee:	d2eb      	bcs.n	ac8 <sendTheasePagesToComputer+0x14>
    }
}
     af0:	b043      	add	sp, #268	; 0x10c
     af2:	bdf0      	pop	{r4, r5, r6, r7, pc}
     af4:	00000355 	.word	0x00000355
     af8:	00002b3d 	.word	0x00002b3d

00000afc <altitudeAGL>:

int32_t altitudeAGL() {
    return altitude - offsets.groundOffset;
     afc:	4b07      	ldr	r3, [pc, #28]	; (b1c <altitudeAGL+0x20>)
int32_t altitudeAGL() {
     afe:	b510      	push	{r4, lr}
    return altitude - offsets.groundOffset;
     b00:	6998      	ldr	r0, [r3, #24]
     b02:	4b07      	ldr	r3, [pc, #28]	; (b20 <altitudeAGL+0x24>)
     b04:	4798      	blx	r3
     b06:	000b      	movs	r3, r1
     b08:	4906      	ldr	r1, [pc, #24]	; (b24 <altitudeAGL+0x28>)
     b0a:	0002      	movs	r2, r0
     b0c:	6808      	ldr	r0, [r1, #0]
     b0e:	6849      	ldr	r1, [r1, #4]
     b10:	4c05      	ldr	r4, [pc, #20]	; (b28 <altitudeAGL+0x2c>)
     b12:	47a0      	blx	r4
     b14:	4b05      	ldr	r3, [pc, #20]	; (b2c <altitudeAGL+0x30>)
     b16:	4798      	blx	r3
}
     b18:	bd10      	pop	{r4, pc}
     b1a:	46c0      	nop			; (mov r8, r8)
     b1c:	200004d0 	.word	0x200004d0
     b20:	00005f95 	.word	0x00005f95
     b24:	200006a8 	.word	0x200006a8
     b28:	0000583d 	.word	0x0000583d
     b2c:	00005ea9 	.word	0x00005ea9

00000b30 <unplugged>:


bool unplugged() {
    if (sample.voltage.batFloat < 3.3) {
     b30:	4b07      	ldr	r3, [pc, #28]	; (b50 <unplugged+0x20>)
bool unplugged() {
     b32:	b570      	push	{r4, r5, r6, lr}
    if (sample.voltage.batFloat < 3.3) {
     b34:	68d8      	ldr	r0, [r3, #12]
     b36:	4b07      	ldr	r3, [pc, #28]	; (b54 <unplugged+0x24>)
     b38:	4798      	blx	r3
     b3a:	4a07      	ldr	r2, [pc, #28]	; (b58 <unplugged+0x28>)
     b3c:	4b07      	ldr	r3, [pc, #28]	; (b5c <unplugged+0x2c>)
     b3e:	4d08      	ldr	r5, [pc, #32]	; (b60 <unplugged+0x30>)
     b40:	2401      	movs	r4, #1
     b42:	47a8      	blx	r5
     b44:	2800      	cmp	r0, #0
     b46:	d100      	bne.n	b4a <unplugged+0x1a>
     b48:	1c04      	adds	r4, r0, #0
     b4a:	b2e0      	uxtb	r0, r4
        return true;
    } else {
        return false;
    }
}
     b4c:	bd70      	pop	{r4, r5, r6, pc}
     b4e:	46c0      	nop			; (mov r8, r8)
     b50:	200007d8 	.word	0x200007d8
     b54:	00006005 	.word	0x00006005
     b58:	66666666 	.word	0x66666666
     b5c:	400a6666 	.word	0x400a6666
     b60:	00004155 	.word	0x00004155

00000b64 <finishFlight>:

void finishFlight() {

    flightState = flightIdle;
     b64:	2201      	movs	r2, #1
void finishFlight() {
     b66:	b510      	push	{r4, lr}
    flightState = flightIdle;
     b68:	4b04      	ldr	r3, [pc, #16]	; (b7c <finishFlight+0x18>)
     b6a:	701a      	strb	r2, [r3, #0]
    AT25SFHoldTillReady();
     b6c:	4b04      	ldr	r3, [pc, #16]	; (b80 <finishFlight+0x1c>)
     b6e:	4798      	blx	r3
    writeFlightEndAddress( );
     b70:	4b04      	ldr	r3, [pc, #16]	; (b84 <finishFlight+0x20>)
     b72:	4798      	blx	r3
    unpluggedJingle();
     b74:	4b04      	ldr	r3, [pc, #16]	; (b88 <finishFlight+0x24>)
     b76:	4798      	blx	r3

}
     b78:	bd10      	pop	{r4, pc}
     b7a:	46c0      	nop			; (mov r8, r8)
     b7c:	20000534 	.word	0x20000534
     b80:	000001e5 	.word	0x000001e5
     b84:	000025cd 	.word	0x000025cd
     b88:	00000cdd 	.word	0x00000cdd

00000b8c <adcInit>:
#include <util.h>

void adcInit() {

    // set up clock
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;
     b8c:	2380      	movs	r3, #128	; 0x80
     b8e:	4a10      	ldr	r2, [pc, #64]	; (bd0 <adcInit+0x44>)
     b90:	025b      	lsls	r3, r3, #9
     b92:	6a11      	ldr	r1, [r2, #32]
    // divide prescaler by 512 (93.75KHz), max adc freq is 2.1MHz
    ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |
                     ADC_CTRLB_RESSEL_12BIT;

    // enable clock adc channel
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
     b94:	480f      	ldr	r0, [pc, #60]	; (bd4 <adcInit+0x48>)
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;
     b96:	430b      	orrs	r3, r1
    ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |
     b98:	21e0      	movs	r1, #224	; 0xe0
    PM->APBCMASK.reg |= PM_APBCMASK_ADC;
     b9a:	6213      	str	r3, [r2, #32]
    ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |
     b9c:	4b0e      	ldr	r3, [pc, #56]	; (bd8 <adcInit+0x4c>)
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
     b9e:	4a0f      	ldr	r2, [pc, #60]	; (bdc <adcInit+0x50>)
    ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 |
     ba0:	00c9      	lsls	r1, r1, #3
     ba2:	8099      	strh	r1, [r3, #4]
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
     ba4:	8050      	strh	r0, [r2, #2]
                        GCLK_CLKCTRL_GEN(0) |
                        GCLK_CLKCTRL_ID(ADC_GCLK_ID);

    ADC->CALIB.reg =
        ADC_CALIB_BIAS_CAL(
     ba6:	4a0e      	ldr	r2, [pc, #56]	; (be0 <adcInit+0x54>)
     ba8:	6810      	ldr	r0, [r2, #0]
     baa:	0142      	lsls	r2, r0, #5
            (*(uint32_t *)ADC_FUSES_BIASCAL_ADDR >> ADC_FUSES_BIASCAL_Pos)
        ) |
        ADC_CALIB_LINEARITY_CAL(
     bac:	0010      	movs	r0, r2
        ADC_CALIB_BIAS_CAL(
     bae:	4011      	ands	r1, r2
        ADC_CALIB_LINEARITY_CAL(
     bb0:	4a0c      	ldr	r2, [pc, #48]	; (be4 <adcInit+0x58>)
     bb2:	6812      	ldr	r2, [r2, #0]
     bb4:	0ed2      	lsrs	r2, r2, #27
     bb6:	4302      	orrs	r2, r0
     bb8:	b2d2      	uxtb	r2, r2
        ) |
     bba:	430a      	orrs	r2, r1
    ADC->CALIB.reg =
     bbc:	851a      	strh	r2, [r3, #40]	; 0x28
            (*(uint64_t *)ADC_FUSES_LINEARITY_0_ADDR >> ADC_FUSES_LINEARITY_0_Pos)
        );

    ADC->REFCTRL.reg = ADC_REFCTRL_REFSEL_INTVCC0;
     bbe:	2201      	movs	r2, #1
     bc0:	705a      	strb	r2, [r3, #1]

    ADC->CTRLA.reg = ADC_CTRLA_ENABLE; // enable
     bc2:	1892      	adds	r2, r2, r2
     bc4:	701a      	strb	r2, [r3, #0]
    while(ADC->STATUS.reg & ADC_STATUS_SYNCBUSY);
     bc6:	7e5a      	ldrb	r2, [r3, #25]
     bc8:	b252      	sxtb	r2, r2
     bca:	2a00      	cmp	r2, #0
     bcc:	dbfb      	blt.n	bc6 <adcInit+0x3a>
}
     bce:	4770      	bx	lr
     bd0:	40000400 	.word	0x40000400
     bd4:	0000401e 	.word	0x0000401e
     bd8:	42004000 	.word	0x42004000
     bdc:	40000c00 	.word	0x40000c00
     be0:	00806024 	.word	0x00806024
     be4:	00806020 	.word	0x00806020

00000be8 <adcSample>:



u16_t adcSample() {
    ADC->SWTRIG.reg = ADC_SWTRIG_START;
     be8:	2202      	movs	r2, #2
     bea:	4b04      	ldr	r3, [pc, #16]	; (bfc <adcSample+0x14>)
     bec:	731a      	strb	r2, [r3, #12]
    while(!(ADC->INTFLAG.reg & ADC_INTFLAG_RESRDY)); // wait until result is ready
     bee:	3a01      	subs	r2, #1
     bf0:	7e19      	ldrb	r1, [r3, #24]
     bf2:	4211      	tst	r1, r2
     bf4:	d0fc      	beq.n	bf0 <adcSample+0x8>
    return ADC->RESULT.reg;
     bf6:	8b58      	ldrh	r0, [r3, #26]
     bf8:	b280      	uxth	r0, r0
}
     bfa:	4770      	bx	lr
     bfc:	42004000 	.word	0x42004000

00000c00 <adc_read>:


u16_t adc_read(Pin p) {
     c00:	b537      	push	{r0, r1, r2, r4, r5, lr}
     c02:	9101      	str	r1, [sp, #4]
    if (p.pin & 1) {
     c04:	2101      	movs	r1, #1
     c06:	0c02      	lsrs	r2, r0, #16
     c08:	9000      	str	r0, [sp, #0]
     c0a:	b2d2      	uxtb	r2, r2
     c0c:	0e00      	lsrs	r0, r0, #24
     c0e:	0843      	lsrs	r3, r0, #1
     c10:	01d2      	lsls	r2, r2, #7
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     c12:	189b      	adds	r3, r3, r2
    if (p.pin & 1) {
     c14:	4208      	tst	r0, r1
     c16:	d01a      	beq.n	c4e <adc_read+0x4e>
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXO = 0x1;
     c18:	240f      	movs	r4, #15
     c1a:	4910      	ldr	r1, [pc, #64]	; (c5c <adc_read+0x5c>)
     c1c:	185b      	adds	r3, r3, r1
     c1e:	7819      	ldrb	r1, [r3, #0]
     c20:	400c      	ands	r4, r1
     c22:	2110      	movs	r1, #16
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     c24:	4321      	orrs	r1, r4
     c26:	7019      	strb	r1, [r3, #0]
    PORT->Group[p.group].PINCFG[p.pin].bit.PMUXEN = 1;
     c28:	4b0d      	ldr	r3, [pc, #52]	; (c60 <adc_read+0x60>)
     c2a:	1880      	adds	r0, r0, r2
     c2c:	18c0      	adds	r0, r0, r3
     c2e:	2301      	movs	r3, #1
     c30:	7802      	ldrb	r2, [r0, #0]
     c32:	4313      	orrs	r3, r2
     c34:	7003      	strb	r3, [r0, #0]
    // switch pin mux to analog in
    pinAnalog(p);

    ADC->INPUTCTRL.reg = (ADC_INPUTCTRL_MUXPOS(p.chan) // select from proper pin
     c36:	466b      	mov	r3, sp
     c38:	221f      	movs	r2, #31
     c3a:	791b      	ldrb	r3, [r3, #4]
     c3c:	401a      	ands	r2, r3
                          | ADC_INPUTCTRL_MUXNEG_GND // 0 = gnd
                          | ADC_INPUTCTRL_GAIN_1X);
     c3e:	23c0      	movs	r3, #192	; 0xc0
     c40:	015b      	lsls	r3, r3, #5
     c42:	4313      	orrs	r3, r2
    ADC->INPUTCTRL.reg = (ADC_INPUTCTRL_MUXPOS(p.chan) // select from proper pin
     c44:	4a07      	ldr	r2, [pc, #28]	; (c64 <adc_read+0x64>)
     c46:	6113      	str	r3, [r2, #16]

    return adcSample();
     c48:	4b07      	ldr	r3, [pc, #28]	; (c68 <adc_read+0x68>)
     c4a:	4798      	blx	r3
     c4c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
        PORT->Group[p.group].PMUX[p.pin/2].bit.PMUXE = 0x1;
     c4e:	250f      	movs	r5, #15
     c50:	4c02      	ldr	r4, [pc, #8]	; (c5c <adc_read+0x5c>)
     c52:	191b      	adds	r3, r3, r4
     c54:	781c      	ldrb	r4, [r3, #0]
     c56:	43ac      	bics	r4, r5
     c58:	e7e4      	b.n	c24 <adc_read+0x24>
     c5a:	46c0      	nop			; (mov r8, r8)
     c5c:	41004430 	.word	0x41004430
     c60:	41004440 	.word	0x41004440
     c64:	42004000 	.word	0x42004000
     c68:	00000be9 	.word	0x00000be9

00000c6c <beep>:
#include <util.h>
#include <boardDefines.h>
#include <math.h>


void beep(u16_t toggles) {
     c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
}


inline static void pinToggle(Pin p) {
    PORT->Group[p.group].OUTTGL.reg = (1<<p.pin);
     c6e:	2380      	movs	r3, #128	; 0x80
     c70:	2680      	movs	r6, #128	; 0x80
     c72:	0007      	movs	r7, r0

    pinToggle(LedPin);
    for (u16_t buzz = 0; buzz < toggles; ++buzz) {
     c74:	2500      	movs	r5, #0
     c76:	4c09      	ldr	r4, [pc, #36]	; (c9c <beep+0x30>)
     c78:	035b      	lsls	r3, r3, #13
     c7a:	61e3      	str	r3, [r4, #28]
     c7c:	03b6      	lsls	r6, r6, #14
     c7e:	42bd      	cmp	r5, r7
     c80:	d104      	bne.n	c8c <beep+0x20>
     c82:	2380      	movs	r3, #128	; 0x80
     c84:	035b      	lsls	r3, r3, #13
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     c86:	6166      	str	r6, [r4, #20]
    PORT->Group[p.group].OUTTGL.reg = (1<<p.pin);
     c88:	61e3      	str	r3, [r4, #28]
        pinToggle(buzzerPin);
        delay_us(122);
    }
    pinLow(buzzerPin);
    pinToggle(LedPin);
}
     c8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     c8c:	61e6      	str	r6, [r4, #28]
        delay_us(122);
     c8e:	207a      	movs	r0, #122	; 0x7a
     c90:	4b03      	ldr	r3, [pc, #12]	; (ca0 <beep+0x34>)
    for (u16_t buzz = 0; buzz < toggles; ++buzz) {
     c92:	3501      	adds	r5, #1
        delay_us(122);
     c94:	4798      	blx	r3
    for (u16_t buzz = 0; buzz < toggles; ++buzz) {
     c96:	b2ad      	uxth	r5, r5
     c98:	e7f1      	b.n	c7e <beep+0x12>
     c9a:	46c0      	nop			; (mov r8, r8)
     c9c:	41004400 	.word	0x41004400
     ca0:	00000ebd 	.word	0x00000ebd

00000ca4 <startupJingle>:
    }
    beepDigit(number);

}

void startupJingle() {
     ca4:	b570      	push	{r4, r5, r6, lr}
    beep(300);
     ca6:	2696      	movs	r6, #150	; 0x96
     ca8:	0076      	lsls	r6, r6, #1
     caa:	4d0a      	ldr	r5, [pc, #40]	; (cd4 <startupJingle+0x30>)
     cac:	0030      	movs	r0, r6
     cae:	47a8      	blx	r5
    delay_ms(80);
     cb0:	4c09      	ldr	r4, [pc, #36]	; (cd8 <startupJingle+0x34>)
     cb2:	2050      	movs	r0, #80	; 0x50
     cb4:	47a0      	blx	r4
    beep(300);
     cb6:	0030      	movs	r0, r6
     cb8:	47a8      	blx	r5
    delay_ms(250);
     cba:	20fa      	movs	r0, #250	; 0xfa
     cbc:	47a0      	blx	r4
    beep(300);
     cbe:	0030      	movs	r0, r6
     cc0:	47a8      	blx	r5
    delay_ms(80);
     cc2:	2050      	movs	r0, #80	; 0x50
     cc4:	47a0      	blx	r4
    beep(300);
     cc6:	0030      	movs	r0, r6
     cc8:	47a8      	blx	r5
    delay_ms(500);
     cca:	20fa      	movs	r0, #250	; 0xfa
     ccc:	0040      	lsls	r0, r0, #1
     cce:	47a0      	blx	r4
}
     cd0:	bd70      	pop	{r4, r5, r6, pc}
     cd2:	46c0      	nop			; (mov r8, r8)
     cd4:	00000c6d 	.word	0x00000c6d
     cd8:	00000ee9 	.word	0x00000ee9

00000cdc <unpluggedJingle>:

void unpluggedJingle() {
     cdc:	b570      	push	{r4, r5, r6, lr}
    delay_ms(80);
    beep(300);
     cde:	2696      	movs	r6, #150	; 0x96
    delay_ms(80);
     ce0:	4c0c      	ldr	r4, [pc, #48]	; (d14 <unpluggedJingle+0x38>)
    beep(300);
     ce2:	0076      	lsls	r6, r6, #1
    delay_ms(80);
     ce4:	2050      	movs	r0, #80	; 0x50
     ce6:	47a0      	blx	r4
    beep(300);
     ce8:	4d0b      	ldr	r5, [pc, #44]	; (d18 <unpluggedJingle+0x3c>)
     cea:	0030      	movs	r0, r6
     cec:	47a8      	blx	r5
    delay_ms(80);
     cee:	2050      	movs	r0, #80	; 0x50
     cf0:	47a0      	blx	r4
    beep(300);
     cf2:	0030      	movs	r0, r6
     cf4:	47a8      	blx	r5
    delay_ms(80);
     cf6:	2050      	movs	r0, #80	; 0x50
     cf8:	47a0      	blx	r4
    beep(300);
     cfa:	0030      	movs	r0, r6
     cfc:	47a8      	blx	r5
    delay_ms(80);
     cfe:	2050      	movs	r0, #80	; 0x50
     d00:	47a0      	blx	r4
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
     d02:	2280      	movs	r2, #128	; 0x80
     d04:	4b05      	ldr	r3, [pc, #20]	; (d1c <unpluggedJingle+0x40>)
     d06:	0392      	lsls	r2, r2, #14
     d08:	615a      	str	r2, [r3, #20]
     d0a:	2280      	movs	r2, #128	; 0x80
     d0c:	0352      	lsls	r2, r2, #13
     d0e:	615a      	str	r2, [r3, #20]
    pinLow(buzzerPin);
    pinLow(LedPin);

}
     d10:	bd70      	pop	{r4, r5, r6, pc}
     d12:	46c0      	nop			; (mov r8, r8)
     d14:	00000ee9 	.word	0x00000ee9
     d18:	00000c6d 	.word	0x00000c6d
     d1c:	41004400 	.word	0x41004400

00000d20 <GclkInit>:
static uint32_t cycles_per_us = 48000000UL / 1000000;

void GclkInit() {


    SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     d20:	23c2      	movs	r3, #194	; 0xc2
     d22:	4a16      	ldr	r2, [pc, #88]	; (d7c <GclkInit+0x5c>)
     d24:	00db      	lsls	r3, r3, #3
void GclkInit() {
     d26:	b510      	push	{r4, lr}
    SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     d28:	6093      	str	r3, [r2, #8]
                           SYSCTRL_INTFLAG_DFLLRDY;
    NVMCTRL->CTRLB.reg |= NVMCTRL_CTRLB_RWS_HALF;
     d2a:	2302      	movs	r3, #2
     d2c:	4914      	ldr	r1, [pc, #80]	; (d80 <GclkInit+0x60>)
     d2e:	6848      	ldr	r0, [r1, #4]
     d30:	4303      	orrs	r3, r0
     d32:	604b      	str	r3, [r1, #4]

#define NVM_DFLL_COARSE_POS    58
#define NVM_DFLL_COARSE_SIZE   6
#define NVM_DFLL_FINE_POS      64
#define NVM_DFLL_FINE_SIZE     10
    uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
     d34:	4b13      	ldr	r3, [pc, #76]	; (d84 <GclkInit+0x64>)
     d36:	681b      	ldr	r3, [r3, #0]
     d38:	0e9b      	lsrs	r3, r3, #26
                         + (NVM_DFLL_COARSE_POS / 32))
                       >> (NVM_DFLL_COARSE_POS % 32))
                     & ((1 << NVM_DFLL_COARSE_SIZE) - 1);
    if (coarse == 0x3f) {
     d3a:	2b3f      	cmp	r3, #63	; 0x3f
     d3c:	d100      	bne.n	d40 <GclkInit+0x20>
        coarse = 0x1f;
     d3e:	3b20      	subs	r3, #32
    }
    uint32_t fine =( *((uint32_t *)(NVMCTRL_OTP4)
                       + (NVM_DFLL_FINE_POS / 32))
                     >> (NVM_DFLL_FINE_POS % 32))
     d40:	4911      	ldr	r1, [pc, #68]	; (d88 <GclkInit+0x68>)
                   & ((1 << NVM_DFLL_FINE_SIZE) - 1);
    if (fine == 0x3ff) {
     d42:	4812      	ldr	r0, [pc, #72]	; (d8c <GclkInit+0x6c>)
    uint32_t fine =( *((uint32_t *)(NVMCTRL_OTP4)
     d44:	6809      	ldr	r1, [r1, #0]
     d46:	0589      	lsls	r1, r1, #22
     d48:	0d89      	lsrs	r1, r1, #22
    if (fine == 0x3ff) {
     d4a:	4281      	cmp	r1, r0
     d4c:	d100      	bne.n	d50 <GclkInit+0x30>
        fine = 0x1ff;
     d4e:	4910      	ldr	r1, [pc, #64]	; (d90 <GclkInit+0x70>)
    }


    // Disable ONDEMAND mode while writing configurations (errata 9905)
    SYSCTRL->DFLLCTRL.reg = dfll_ctrl_usb & ~SYSCTRL_DFLLCTRL_ONDEMAND;
     d50:	4810      	ldr	r0, [pc, #64]	; (d94 <GclkInit+0x74>)
     d52:	8490      	strh	r0, [r2, #36]	; 0x24
    while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_DFLLRDY)) == 0);
     d54:	2010      	movs	r0, #16
     d56:	68d4      	ldr	r4, [r2, #12]
     d58:	4204      	tst	r4, r0
     d5a:	d0fc      	beq.n	d56 <GclkInit+0x36>
    SYSCTRL->DFLLVAL.reg = SYSCTRL_DFLLVAL_COARSE(coarse) | SYSCTRL_DFLLVAL_FINE(fine);
     d5c:	029b      	lsls	r3, r3, #10
     d5e:	430b      	orrs	r3, r1
     d60:	6293      	str	r3, [r2, #40]	; 0x28


    //Wait and see if the DFLL output is good . . .
    while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_DFLLRDY)) == 0);
     d62:	2310      	movs	r3, #16
     d64:	68d1      	ldr	r1, [r2, #12]
     d66:	4219      	tst	r1, r3
     d68:	d0fc      	beq.n	d64 <GclkInit+0x44>


    SYSCTRL->DFLLCTRL.reg = dfll_ctrl_usb;
     d6a:	4b0b      	ldr	r3, [pc, #44]	; (d98 <GclkInit+0x78>)
     d6c:	8493      	strh	r3, [r2, #36]	; 0x24


    //For generic clock generator 0, select the DFLL48 Clock as input
    GCLK->GENDIV.reg  = (GCLK_GENDIV_DIV(1)  | GCLK_GENDIV_ID(0));
     d6e:	2280      	movs	r2, #128	; 0x80
     d70:	4b0a      	ldr	r3, [pc, #40]	; (d9c <GclkInit+0x7c>)
     d72:	0052      	lsls	r2, r2, #1
     d74:	609a      	str	r2, [r3, #8]
    GCLK->GENCTRL.reg = (GCLK_GENCTRL_ID(0)  | (GCLK_GENCTRL_SRC_DFLL48M) | (GCLK_GENCTRL_GENEN));
     d76:	4a0a      	ldr	r2, [pc, #40]	; (da0 <GclkInit+0x80>)
     d78:	605a      	str	r2, [r3, #4]
}
     d7a:	bd10      	pop	{r4, pc}
     d7c:	40000800 	.word	0x40000800
     d80:	41004000 	.word	0x41004000
     d84:	00806024 	.word	0x00806024
     d88:	00806028 	.word	0x00806028
     d8c:	000003ff 	.word	0x000003ff
     d90:	000001ff 	.word	0x000001ff
     d94:	00000522 	.word	0x00000522
     d98:	000005a2 	.word	0x000005a2
     d9c:	40000c00 	.word	0x40000c00
     da0:	00010700 	.word	0x00010700

00000da4 <RtcInit>:
        //wait for crystal to warm up
        while((SYSCTRL->PCLKSR.reg & (SYSCTRL_PCLKSR_OSC32KRDY)) == 0);

    */

    SYSCTRL->OSC32K.reg = SYSCTRL_OSC32K_ENABLE |
     da4:	4b25      	ldr	r3, [pc, #148]	; (e3c <RtcInit+0x98>)
     da6:	4a26      	ldr	r2, [pc, #152]	; (e40 <RtcInit+0x9c>)
void RtcInit() {
     da8:	b510      	push	{r4, lr}
    SYSCTRL->OSC32K.reg = SYSCTRL_OSC32K_ENABLE |
     daa:	619a      	str	r2, [r3, #24]
                          SYSCTRL_OSC32K_EN32K |
                          ( 6 << SYSCTRL_OSC32K_STARTUP_Pos);


    SYSCTRL->OSC32K.bit.CALIB =
        ((*(uint32_t *)FUSES_OSC32K_CAL_ADDR >>
     dac:	4a25      	ldr	r2, [pc, #148]	; (e44 <RtcInit+0xa0>)
    SYSCTRL->OSC32K.bit.CALIB =
     dae:	6998      	ldr	r0, [r3, #24]
        ((*(uint32_t *)FUSES_OSC32K_CAL_ADDR >>
     db0:	6812      	ldr	r2, [r2, #0]
    SYSCTRL->OSC32K.bit.CALIB =
     db2:	4c25      	ldr	r4, [pc, #148]	; (e48 <RtcInit+0xa4>)
     db4:	04d2      	lsls	r2, r2, #19
     db6:	0e52      	lsrs	r2, r2, #25
     db8:	0412      	lsls	r2, r2, #16
          FUSES_OSC32K_CAL_Pos) & 0x7Ful);

    SYSCTRL->OSC32K.reg = SYSCTRL_OSC32K_STARTUP( 0x6u ) | // cf table 15.10 of product datasheet in chapter 15.8.6
     dba:	4924      	ldr	r1, [pc, #144]	; (e4c <RtcInit+0xa8>)
    SYSCTRL->OSC32K.bit.CALIB =
     dbc:	4020      	ands	r0, r4
     dbe:	4310      	orrs	r0, r2
     dc0:	6198      	str	r0, [r3, #24]
    SYSCTRL->OSC32K.reg = SYSCTRL_OSC32K_STARTUP( 0x6u ) | // cf table 15.10 of product datasheet in chapter 15.8.6
     dc2:	6199      	str	r1, [r3, #24]
                          SYSCTRL_OSC32K_EN32K;
    SYSCTRL->OSC32K.bit.CALIB =
     dc4:	6999      	ldr	r1, [r3, #24]
     dc6:	4021      	ands	r1, r4
     dc8:	430a      	orrs	r2, r1
     dca:	619a      	str	r2, [r3, #24]
        ((*(uint32_t *)FUSES_OSC32K_CAL_ADDR >>
          FUSES_OSC32K_CAL_Pos) & 0x7Ful);



    SYSCTRL->OSC32K.bit.ENABLE = 1; // separate call, as described in chapter 15.6.3
     dcc:	2202      	movs	r2, #2
     dce:	6999      	ldr	r1, [r3, #24]
     dd0:	430a      	orrs	r2, r1
     dd2:	619a      	str	r2, [r3, #24]

    while (  (SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_OSC32KRDY) == 0 ) {
     dd4:	2204      	movs	r2, #4
     dd6:	68d9      	ldr	r1, [r3, #12]
     dd8:	4211      	tst	r1, r2
     dda:	d0fc      	beq.n	dd6 <RtcInit+0x32>





    GCLK->GENDIV.reg = GCLK_GENDIV_ID(2) | GCLK_GENDIV_DIV(1);
     ddc:	2281      	movs	r2, #129	; 0x81
     dde:	4b1c      	ldr	r3, [pc, #112]	; (e50 <RtcInit+0xac>)
     de0:	0052      	lsls	r2, r2, #1
     de2:	609a      	str	r2, [r3, #8]

    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(2) |
     de4:	4a1b      	ldr	r2, [pc, #108]	; (e54 <RtcInit+0xb0>)
     de6:	605a      	str	r2, [r3, #4]
                        GCLK_GENCTRL_SRC(GCLK_GENCTRL_SRC_OSC32K) |
                        GCLK_GENCTRL_IDC |
                        GCLK_GENCTRL_RUNSTDBY |
                        GCLK_GENCTRL_GENEN;
    while (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY);
     de8:	785a      	ldrb	r2, [r3, #1]
     dea:	b252      	sxtb	r2, r2
     dec:	2a00      	cmp	r2, #0
     dee:	dbfb      	blt.n	de8 <RtcInit+0x44>

// Configure RTC
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(RTC_GCLK_ID) |
     df0:	4a19      	ldr	r2, [pc, #100]	; (e58 <RtcInit+0xb4>)
     df2:	805a      	strh	r2, [r3, #2]
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    RTC->MODE1.CTRL.reg = RTC_MODE1_CTRL_MODE_COUNT16;
     df4:	2204      	movs	r2, #4
     df6:	4b19      	ldr	r3, [pc, #100]	; (e5c <RtcInit+0xb8>)
     df8:	801a      	strh	r2, [r3, #0]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     dfa:	7a9a      	ldrb	r2, [r3, #10]
     dfc:	09d2      	lsrs	r2, r2, #7
     dfe:	d1fc      	bne.n	dfa <RtcInit+0x56>

// Prescaler needs to be enabled separately from the mode for some reason
    RTC->MODE1.CTRL.reg |= RTC_MODE1_CTRL_PRESCALER_DIV32;
     e00:	22a0      	movs	r2, #160	; 0xa0
     e02:	8819      	ldrh	r1, [r3, #0]
     e04:	00d2      	lsls	r2, r2, #3
     e06:	430a      	orrs	r2, r1
     e08:	801a      	strh	r2, [r3, #0]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     e0a:	7a9a      	ldrb	r2, [r3, #10]
     e0c:	09d2      	lsrs	r2, r2, #7
     e0e:	d1fc      	bne.n	e0a <RtcInit+0x66>

    RTC->MODE1.PER.reg = 998;
     e10:	4a13      	ldr	r2, [pc, #76]	; (e60 <RtcInit+0xbc>)
     e12:	829a      	strh	r2, [r3, #20]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     e14:	7a9a      	ldrb	r2, [r3, #10]
     e16:	09d2      	lsrs	r2, r2, #7
     e18:	d1fc      	bne.n	e14 <RtcInit+0x70>

    RTC->MODE1.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_ADDR(0x10);
     e1a:	8859      	ldrh	r1, [r3, #2]
     e1c:	4a11      	ldr	r2, [pc, #68]	; (e64 <RtcInit+0xc0>)
     e1e:	430a      	orrs	r2, r1
     e20:	805a      	strh	r2, [r3, #2]

    RTC->MODE1.INTENSET.reg = RTC_MODE1_INTENSET_OVF;
     e22:	2280      	movs	r2, #128	; 0x80
     e24:	71da      	strb	r2, [r3, #7]

    RTC->MODE1.CTRL.bit.ENABLE = 1;
     e26:	8819      	ldrh	r1, [r3, #0]
     e28:	3a7e      	subs	r2, #126	; 0x7e
     e2a:	430a      	orrs	r2, r1
     e2c:	801a      	strh	r2, [r3, #0]
    while (RTC->MODE1.STATUS.bit.SYNCBUSY);
     e2e:	7a9a      	ldrb	r2, [r3, #10]
     e30:	09d2      	lsrs	r2, r2, #7
     e32:	d1fc      	bne.n	e2e <RtcInit+0x8a>
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     e34:	4b0c      	ldr	r3, [pc, #48]	; (e68 <RtcInit+0xc4>)
     e36:	3208      	adds	r2, #8
     e38:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(RTC_IRQn);
}
     e3a:	bd10      	pop	{r4, pc}
     e3c:	40000800 	.word	0x40000800
     e40:	00000606 	.word	0x00000606
     e44:	00806024 	.word	0x00806024
     e48:	ff80ffff 	.word	0xff80ffff
     e4c:	00000604 	.word	0x00000604
     e50:	40000c00 	.word	0x40000c00
     e54:	00230002 	.word	0x00230002
     e58:	00004204 	.word	0x00004204
     e5c:	40001400 	.word	0x40001400
     e60:	000003e6 	.word	0x000003e6
     e64:	00004010 	.word	0x00004010
     e68:	e000e100 	.word	0xe000e100

00000e6c <gclkEnable>:


void gclkEnable(u32_t id, u32_t src, u32_t div) {
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
     e6c:	230f      	movs	r3, #15
     e6e:	4003      	ands	r3, r0
     e70:	4808      	ldr	r0, [pc, #32]	; (e94 <gclkEnable+0x28>)
     e72:	0212      	lsls	r2, r2, #8
     e74:	4002      	ands	r2, r0
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     e76:	20f8      	movs	r0, #248	; 0xf8
     e78:	0209      	lsls	r1, r1, #8
     e7a:	0140      	lsls	r0, r0, #5
     e7c:	4001      	ands	r1, r0
     e7e:	2080      	movs	r0, #128	; 0x80
void gclkEnable(u32_t id, u32_t src, u32_t div) {
     e80:	b510      	push	{r4, lr}
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     e82:	0240      	lsls	r0, r0, #9
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
     e84:	4c04      	ldr	r4, [pc, #16]	; (e98 <gclkEnable+0x2c>)
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     e86:	4308      	orrs	r0, r1
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
     e88:	431a      	orrs	r2, r3
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     e8a:	4318      	orrs	r0, r3
    GCLK->GENDIV.reg = GCLK_GENDIV_ID(id) | GCLK_GENDIV_DIV(div);
     e8c:	60a2      	str	r2, [r4, #8]
    GCLK->GENCTRL.reg = GCLK_GENCTRL_ID(id) | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_SRC(src);
     e8e:	6060      	str	r0, [r4, #4]
}
     e90:	bd10      	pop	{r4, pc}
     e92:	46c0      	nop			; (mov r8, r8)
     e94:	00ffff00 	.word	0x00ffff00
     e98:	40000c00 	.word	0x40000c00

00000e9c <delayInit>:


void delayInit(void) {
    cycles_per_ms = 48000000UL;
    cycles_per_ms /= 1000;
     e9c:	4b04      	ldr	r3, [pc, #16]	; (eb0 <delayInit+0x14>)
     e9e:	4a05      	ldr	r2, [pc, #20]	; (eb4 <delayInit+0x18>)
     ea0:	601a      	str	r2, [r3, #0]
    cycles_per_us = cycles_per_ms / 1000;
     ea2:	2230      	movs	r2, #48	; 0x30
     ea4:	605a      	str	r2, [r3, #4]

    SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     ea6:	4b04      	ldr	r3, [pc, #16]	; (eb8 <delayInit+0x1c>)
     ea8:	3a2b      	subs	r2, #43	; 0x2b
     eaa:	601a      	str	r2, [r3, #0]
}
     eac:	4770      	bx	lr
     eae:	46c0      	nop			; (mov r8, r8)
     eb0:	20000004 	.word	0x20000004
     eb4:	0000bb80 	.word	0x0000bb80
     eb8:	e000e010 	.word	0xe000e010

00000ebc <delay_us>:
/**
 * \brief Delay loop to delay at least n number of microseconds
 *
 * \param n  Number of microseconds to wait
 */
void delay_us(uint32_t n) {
     ebc:	b530      	push	{r4, r5, lr}
    const uint32_t n) {
    if (n > 0) {
        SysTick->LOAD = n;
        SysTick->VAL = 0;

        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     ebe:	2480      	movs	r4, #128	; 0x80
        SysTick->VAL = 0;
     ec0:	2100      	movs	r1, #0
    while (n--) {
        /* Devide up to blocks of 10u */
        delay_cycles(cycles_per_us);
     ec2:	4b07      	ldr	r3, [pc, #28]	; (ee0 <delay_us+0x24>)
        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     ec4:	0264      	lsls	r4, r4, #9
     ec6:	685a      	ldr	r2, [r3, #4]
        SysTick->LOAD = n;
     ec8:	4b06      	ldr	r3, [pc, #24]	; (ee4 <delay_us+0x28>)
    while (n--) {
     eca:	3801      	subs	r0, #1
     ecc:	d200      	bcs.n	ed0 <delay_us+0x14>
    }
}
     ece:	bd30      	pop	{r4, r5, pc}
    if (n > 0) {
     ed0:	2a00      	cmp	r2, #0
     ed2:	d0fa      	beq.n	eca <delay_us+0xe>
        SysTick->LOAD = n;
     ed4:	605a      	str	r2, [r3, #4]
        SysTick->VAL = 0;
     ed6:	6099      	str	r1, [r3, #8]
        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     ed8:	681d      	ldr	r5, [r3, #0]
     eda:	4225      	tst	r5, r4
     edc:	d0fc      	beq.n	ed8 <delay_us+0x1c>
     ede:	e7f4      	b.n	eca <delay_us+0xe>
     ee0:	20000004 	.word	0x20000004
     ee4:	e000e010 	.word	0xe000e010

00000ee8 <delay_ms>:
/**
 * \brief Delay loop to delay at least n number of milliseconds
 *
 * \param n  Number of milliseconds to wait
 */
void delay_ms(uint32_t n) {
     ee8:	b530      	push	{r4, r5, lr}
     eea:	2480      	movs	r4, #128	; 0x80
        SysTick->VAL = 0;
     eec:	2100      	movs	r1, #0
    while (n--) {
        /* Devide up to blocks of 1ms */
        delay_cycles(cycles_per_ms);
     eee:	4b07      	ldr	r3, [pc, #28]	; (f0c <delay_ms+0x24>)
        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     ef0:	0264      	lsls	r4, r4, #9
     ef2:	681a      	ldr	r2, [r3, #0]
        SysTick->LOAD = n;
     ef4:	4b06      	ldr	r3, [pc, #24]	; (f10 <delay_ms+0x28>)
    while (n--) {
     ef6:	3801      	subs	r0, #1
     ef8:	d200      	bcs.n	efc <delay_ms+0x14>
    }
}
     efa:	bd30      	pop	{r4, r5, pc}
    if (n > 0) {
     efc:	2a00      	cmp	r2, #0
     efe:	d0fa      	beq.n	ef6 <delay_ms+0xe>
        SysTick->LOAD = n;
     f00:	605a      	str	r2, [r3, #4]
        SysTick->VAL = 0;
     f02:	6099      	str	r1, [r3, #8]
        while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     f04:	681d      	ldr	r5, [r3, #0]
     f06:	4225      	tst	r5, r4
     f08:	d0fc      	beq.n	f04 <delay_ms+0x1c>
     f0a:	e7f4      	b.n	ef6 <delay_ms+0xe>
     f0c:	20000004 	.word	0x20000004
     f10:	e000e010 	.word	0xe000e010

00000f14 <RTC_Handler>:


volatile uint32_t time_ms = 0;

void RTC_Handler(void) {
    time_ms += 1000;
     f14:	21fa      	movs	r1, #250	; 0xfa
     f16:	4a04      	ldr	r2, [pc, #16]	; (f28 <RTC_Handler+0x14>)
     f18:	0089      	lsls	r1, r1, #2
     f1a:	6813      	ldr	r3, [r2, #0]
     f1c:	185b      	adds	r3, r3, r1
     f1e:	6013      	str	r3, [r2, #0]
    RTC->MODE1.INTFLAG.reg = 0xFF;
     f20:	22ff      	movs	r2, #255	; 0xff
     f22:	4b02      	ldr	r3, [pc, #8]	; (f2c <RTC_Handler+0x18>)
     f24:	721a      	strb	r2, [r3, #8]
}
     f26:	4770      	bx	lr
     f28:	200004bc 	.word	0x200004bc
     f2c:	40001400 	.word	0x40001400

00000f30 <millis>:

uint32_t millis(void) {
     f30:	b530      	push	{r4, r5, lr}
    uint32_t ms;
    ATOMIC_SECTION_ENTER
     f32:	f3ef 8110 	mrs	r1, PRIMASK
     f36:	b672      	cpsid	i
    ms = time_ms + RTC->MODE1.COUNT.reg;
     f38:	4b09      	ldr	r3, [pc, #36]	; (f60 <millis+0x30>)
     f3a:	4c0a      	ldr	r4, [pc, #40]	; (f64 <millis+0x34>)
     f3c:	8a18      	ldrh	r0, [r3, #16]
     f3e:	6825      	ldr	r5, [r4, #0]
    if (RTC->MODE1.INTFLAG.bit.OVF)
     f40:	7a1a      	ldrb	r2, [r3, #8]
    ms = time_ms + RTC->MODE1.COUNT.reg;
     f42:	b280      	uxth	r0, r0
    if (RTC->MODE1.INTFLAG.bit.OVF)
     f44:	09d2      	lsrs	r2, r2, #7
    ms = time_ms + RTC->MODE1.COUNT.reg;
     f46:	1940      	adds	r0, r0, r5
    if (RTC->MODE1.INTFLAG.bit.OVF)
     f48:	2a00      	cmp	r2, #0
     f4a:	d005      	beq.n	f58 <millis+0x28>
        ms = time_ms + RTC->MODE1.COUNT.reg + 1000;
     f4c:	22fa      	movs	r2, #250	; 0xfa
     f4e:	8a1b      	ldrh	r3, [r3, #16]
     f50:	6820      	ldr	r0, [r4, #0]
     f52:	0092      	lsls	r2, r2, #2
     f54:	1880      	adds	r0, r0, r2
     f56:	18c0      	adds	r0, r0, r3
    ATOMIC_SECTION_LEAVE
     f58:	f381 8810 	msr	PRIMASK, r1
    return ms;
}
     f5c:	bd30      	pop	{r4, r5, pc}
     f5e:	46c0      	nop			; (mov r8, r8)
     f60:	40001400 	.word	0x40001400
     f64:	200004bc 	.word	0x200004bc

00000f68 <TC4Init>:

void TC4Init() {

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC4_GCLK_ID) |
     f68:	4a0d      	ldr	r2, [pc, #52]	; (fa0 <TC4Init+0x38>)
     f6a:	4b0e      	ldr	r3, [pc, #56]	; (fa4 <TC4Init+0x3c>)
     f6c:	805a      	strh	r2, [r3, #2]
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC4;
     f6e:	2380      	movs	r3, #128	; 0x80
     f70:	4a0d      	ldr	r2, [pc, #52]	; (fa8 <TC4Init+0x40>)
     f72:	015b      	lsls	r3, r3, #5
     f74:	6a11      	ldr	r1, [r2, #32]
     f76:	430b      	orrs	r3, r1
     f78:	6213      	str	r3, [r2, #32]

    TC4->COUNT8.CTRLA.reg = TC_CTRLA_MODE_COUNT8 |
     f7a:	4b0c      	ldr	r3, [pc, #48]	; (fac <TC4Init+0x44>)
     f7c:	4a0c      	ldr	r2, [pc, #48]	; (fb0 <TC4Init+0x48>)
     f7e:	801a      	strh	r2, [r3, #0]
                            TC_CTRLA_RUNSTDBY |
                            TC_CTRLA_PRESCALER_DIV2;
    TC4->COUNT8.PER.reg = 0x50;
     f80:	2250      	movs	r2, #80	; 0x50
     f82:	751a      	strb	r2, [r3, #20]

    TC4->COUNT8.INTENSET.reg = TC_INTENSET_OVF;
     f84:	3a4f      	subs	r2, #79	; 0x4f
     f86:	735a      	strb	r2, [r3, #13]

    TC4->COUNT8.EVCTRL.reg = TC_EVCTRL_OVFEO;
     f88:	32ff      	adds	r2, #255	; 0xff
     f8a:	815a      	strh	r2, [r3, #10]

    TC4->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
     f8c:	8819      	ldrh	r1, [r3, #0]
     f8e:	3afe      	subs	r2, #254	; 0xfe
     f90:	430a      	orrs	r2, r1
     f92:	801a      	strh	r2, [r3, #0]
     f94:	2280      	movs	r2, #128	; 0x80
     f96:	4b07      	ldr	r3, [pc, #28]	; (fb4 <TC4Init+0x4c>)
     f98:	0312      	lsls	r2, r2, #12
     f9a:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(TC4_IRQn);
}
     f9c:	4770      	bx	lr
     f9e:	46c0      	nop			; (mov r8, r8)
     fa0:	0000421c 	.word	0x0000421c
     fa4:	40000c00 	.word	0x40000c00
     fa8:	40000400 	.word	0x40000400
     fac:	42003000 	.word	0x42003000
     fb0:	00000904 	.word	0x00000904
     fb4:	e000e100 	.word	0xe000e100

00000fb8 <TC4_Handler>:

void TC4_Handler( void ) {
    TC4->COUNT8.INTFLAG.reg = 0xFF;
     fb8:	22ff      	movs	r2, #255	; 0xff
void TC4_Handler( void ) {
     fba:	b510      	push	{r4, lr}
    TC4->COUNT8.INTFLAG.reg = 0xFF;
     fbc:	4b02      	ldr	r3, [pc, #8]	; (fc8 <TC4_Handler+0x10>)
     fbe:	739a      	strb	r2, [r3, #14]
    //pinToggle(TxPo);
    pullSample();
     fc0:	4b02      	ldr	r3, [pc, #8]	; (fcc <TC4_Handler+0x14>)
     fc2:	4798      	blx	r3
}
     fc4:	bd10      	pop	{r4, pc}
     fc6:	46c0      	nop			; (mov r8, r8)
     fc8:	42003000 	.word	0x42003000
     fcc:	000026c9 	.word	0x000026c9

00000fd0 <TC5Init>:

void TC5Init() {

    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_ID(TC5_GCLK_ID) |
     fd0:	4a0d      	ldr	r2, [pc, #52]	; (1008 <TC5Init+0x38>)
     fd2:	4b0e      	ldr	r3, [pc, #56]	; (100c <TC5Init+0x3c>)
     fd4:	805a      	strh	r2, [r3, #2]
                        GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(2);

    PM->APBCMASK.reg |= PM_APBCMASK_TC5;
     fd6:	2380      	movs	r3, #128	; 0x80
     fd8:	4a0d      	ldr	r2, [pc, #52]	; (1010 <TC5Init+0x40>)
     fda:	019b      	lsls	r3, r3, #6
     fdc:	6a11      	ldr	r1, [r2, #32]
     fde:	430b      	orrs	r3, r1
     fe0:	6213      	str	r3, [r2, #32]

    TC5->COUNT8.CTRLA.reg = TC_CTRLA_MODE_COUNT8 |
     fe2:	4b0c      	ldr	r3, [pc, #48]	; (1014 <TC5Init+0x44>)
     fe4:	4a0c      	ldr	r2, [pc, #48]	; (1018 <TC5Init+0x48>)
     fe6:	801a      	strh	r2, [r3, #0]
                            TC_CTRLA_PRESCALER_DIV16;

    u16_t logSpeed = 20; //Hz
    u8_t PER_Reg = (long)((32768/16) / logSpeed);

    TC5->COUNT8.PER.reg = PER_Reg;
     fe8:	2266      	movs	r2, #102	; 0x66
     fea:	751a      	strb	r2, [r3, #20]

    TC5->COUNT8.INTENSET.reg = TC_INTENSET_OVF;
     fec:	3a65      	subs	r2, #101	; 0x65
     fee:	735a      	strb	r2, [r3, #13]

    TC5->COUNT8.EVCTRL.reg = TC_EVCTRL_OVFEO;
     ff0:	32ff      	adds	r2, #255	; 0xff
     ff2:	815a      	strh	r2, [r3, #10]

    TC5->COUNT8.CTRLA.reg |= TC_CTRLA_ENABLE;
     ff4:	8819      	ldrh	r1, [r3, #0]
     ff6:	3afe      	subs	r2, #254	; 0xfe
     ff8:	430a      	orrs	r2, r1
     ffa:	801a      	strh	r2, [r3, #0]
     ffc:	2280      	movs	r2, #128	; 0x80
     ffe:	4b07      	ldr	r3, [pc, #28]	; (101c <TC5Init+0x4c>)
    1000:	0352      	lsls	r2, r2, #13
    1002:	601a      	str	r2, [r3, #0]

    NVIC_EnableIRQ(TC5_IRQn);
}
    1004:	4770      	bx	lr
    1006:	46c0      	nop			; (mov r8, r8)
    1008:	0000421c 	.word	0x0000421c
    100c:	40000c00 	.word	0x40000c00
    1010:	40000400 	.word	0x40000400
    1014:	42003400 	.word	0x42003400
    1018:	00000c04 	.word	0x00000c04
    101c:	e000e100 	.word	0xe000e100

00001020 <TC5_Handler>:

void TC5_Handler( void ) {
    TC5->COUNT8.INTFLAG.reg = 0xFF;
    1020:	22ff      	movs	r2, #255	; 0xff
    1022:	4b03      	ldr	r3, [pc, #12]	; (1030 <TC5_Handler+0x10>)
    1024:	739a      	strb	r2, [r3, #14]
    writeLog = true;
    1026:	4b03      	ldr	r3, [pc, #12]	; (1034 <TC5_Handler+0x14>)
    1028:	3afe      	subs	r2, #254	; 0xfe
    102a:	701a      	strb	r2, [r3, #0]
}
    102c:	4770      	bx	lr
    102e:	46c0      	nop			; (mov r8, r8)
    1030:	42003400 	.word	0x42003400
    1034:	20000522 	.word	0x20000522

00001038 <flight>:
#include <boardDefines.h>


void flight() {

    switch(flightState) {
    1038:	2000      	movs	r0, #0
void flight() {
    103a:	b570      	push	{r4, r5, r6, lr}
    switch(flightState) {
    103c:	4c77      	ldr	r4, [pc, #476]	; (121c <flight+0x1e4>)
    103e:	5620      	ldrsb	r0, [r4, r0]
    1040:	3001      	adds	r0, #1
    1042:	2809      	cmp	r0, #9
    1044:	d81a      	bhi.n	107c <flight+0x44>
    1046:	f002 ffd9 	bl	3ffc <__gnu_thumb1_case_uqi>
    104a:	05d5      	.short	0x05d5
    104c:	197d5232 	.word	0x197d5232
    1050:	c6b29819 	.word	0xc6b29819
    case flightStatrup:

        updateGround( );
    1054:	4b72      	ldr	r3, [pc, #456]	; (1220 <flight+0x1e8>)
    1056:	4798      	blx	r3

        if ((millis() - startupTick) > 10000) {
    1058:	4e72      	ldr	r6, [pc, #456]	; (1224 <flight+0x1ec>)
    105a:	47b0      	blx	r6
    105c:	4d72      	ldr	r5, [pc, #456]	; (1228 <flight+0x1f0>)
    105e:	682b      	ldr	r3, [r5, #0]
    1060:	1ac0      	subs	r0, r0, r3
    1062:	4b72      	ldr	r3, [pc, #456]	; (122c <flight+0x1f4>)
    1064:	4298      	cmp	r0, r3
    1066:	d917      	bls.n	1098 <flight+0x60>
            findNewFlightStart( );
    1068:	4b71      	ldr	r3, [pc, #452]	; (1230 <flight+0x1f8>)
    106a:	4798      	blx	r3
            logFlight( );
    106c:	4b71      	ldr	r3, [pc, #452]	; (1234 <flight+0x1fc>)
    106e:	4798      	blx	r3
            startupJingle();
    1070:	4b71      	ldr	r3, [pc, #452]	; (1238 <flight+0x200>)
    1072:	4798      	blx	r3
            startupTick = millis();
    1074:	47b0      	blx	r6
            flightState = flightTest;
    1076:	23ff      	movs	r3, #255	; 0xff
            startupTick = millis();
    1078:	6028      	str	r0, [r5, #0]
            flightState = flightTest;
    107a:	7023      	strb	r3, [r4, #0]
        break;
    }



    if ((flightState != flightStatrup) & ((flightState != flightIdle) & unplugged())) {
    107c:	7823      	ldrb	r3, [r4, #0]
    107e:	2401      	movs	r4, #1
    1080:	429c      	cmp	r4, r3
    1082:	41a4      	sbcs	r4, r4
    1084:	4b6d      	ldr	r3, [pc, #436]	; (123c <flight+0x204>)
    1086:	4264      	negs	r4, r4
    1088:	4798      	blx	r3
    108a:	2800      	cmp	r0, #0
    108c:	d003      	beq.n	1096 <flight+0x5e>
    108e:	2c00      	cmp	r4, #0
    1090:	d001      	beq.n	1096 <flight+0x5e>
        finishFlight();
    1092:	4b6b      	ldr	r3, [pc, #428]	; (1240 <flight+0x208>)
    1094:	4798      	blx	r3
    }

    1096:	bd70      	pop	{r4, r5, r6, pc}
        attemptConnection();
    1098:	4b6a      	ldr	r3, [pc, #424]	; (1244 <flight+0x20c>)
    109a:	4798      	blx	r3
        if (unplugged()) {
    109c:	4b67      	ldr	r3, [pc, #412]	; (123c <flight+0x204>)
    109e:	4798      	blx	r3
    10a0:	2800      	cmp	r0, #0
    10a2:	d0eb      	beq.n	107c <flight+0x44>
            flightState = flightIdle;
    10a4:	2301      	movs	r3, #1
    10a6:	7023      	strb	r3, [r4, #0]
            unpluggedJingle();
    10a8:	4b67      	ldr	r3, [pc, #412]	; (1248 <flight+0x210>)
            logSensors( );
    10aa:	4798      	blx	r3
    10ac:	e7e6      	b.n	107c <flight+0x44>
        if (millis() - offsets.groundBeep > 2000) {
    10ae:	4e5d      	ldr	r6, [pc, #372]	; (1224 <flight+0x1ec>)
    10b0:	47b0      	blx	r6
    10b2:	4d66      	ldr	r5, [pc, #408]	; (124c <flight+0x214>)
    10b4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    10b6:	1ac0      	subs	r0, r0, r3
    10b8:	23fa      	movs	r3, #250	; 0xfa
    10ba:	00db      	lsls	r3, r3, #3
    10bc:	4298      	cmp	r0, r3
    10be:	d905      	bls.n	10cc <flight+0x94>
            offsets.groundBeep = millis();
    10c0:	47b0      	blx	r6
    10c2:	6328      	str	r0, [r5, #48]	; 0x30
            beep(400);
    10c4:	20c8      	movs	r0, #200	; 0xc8
    10c6:	4b62      	ldr	r3, [pc, #392]	; (1250 <flight+0x218>)
    10c8:	0040      	lsls	r0, r0, #1
    10ca:	4798      	blx	r3
        if (sercom(USART3)->SPI.INTFLAG.bit.RXC == 1) {
    10cc:	4b61      	ldr	r3, [pc, #388]	; (1254 <flight+0x21c>)
    10ce:	7e1b      	ldrb	r3, [r3, #24]
    10d0:	075b      	lsls	r3, r3, #29
    10d2:	d5d3      	bpl.n	107c <flight+0x44>
            u8_t possibleReset = usartDataIn(USART3);
    10d4:	2003      	movs	r0, #3
    10d6:	4b60      	ldr	r3, [pc, #384]	; (1258 <flight+0x220>)
    10d8:	4798      	blx	r3
            if (possibleReset == 0x52) {
    10da:	2852      	cmp	r0, #82	; 0x52
    10dc:	d1ce      	bne.n	107c <flight+0x44>
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
    10de:	f3bf 8f4f 	dsb	sy
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
    10e2:	4a5e      	ldr	r2, [pc, #376]	; (125c <flight+0x224>)
    10e4:	4b5e      	ldr	r3, [pc, #376]	; (1260 <flight+0x228>)
    10e6:	60da      	str	r2, [r3, #12]
    10e8:	f3bf 8f4f 	dsb	sy
    10ec:	e7fe      	b.n	10ec <flight+0xb4>
        updateGround();
    10ee:	4b4c      	ldr	r3, [pc, #304]	; (1220 <flight+0x1e8>)
    10f0:	4798      	blx	r3
        if (writeLog) {
    10f2:	4b5c      	ldr	r3, [pc, #368]	; (1264 <flight+0x22c>)
    10f4:	781b      	ldrb	r3, [r3, #0]
    10f6:	2b00      	cmp	r3, #0
    10f8:	d003      	beq.n	1102 <flight+0xca>
    PORT->Group[p.group].OUTTGL.reg = (1<<p.pin);
    10fa:	2280      	movs	r2, #128	; 0x80
    10fc:	4b5a      	ldr	r3, [pc, #360]	; (1268 <flight+0x230>)
    10fe:	0352      	lsls	r2, r2, #13
    1100:	61da      	str	r2, [r3, #28]
        if ((( velocity > 15) && (accel > 2)) | (altitudeAGL() > 100)) {
    1102:	495a      	ldr	r1, [pc, #360]	; (126c <flight+0x234>)
    1104:	4e5a      	ldr	r6, [pc, #360]	; (1270 <flight+0x238>)
    1106:	2200      	movs	r2, #0
    1108:	6808      	ldr	r0, [r1, #0]
    110a:	6849      	ldr	r1, [r1, #4]
    110c:	4b59      	ldr	r3, [pc, #356]	; (1274 <flight+0x23c>)
    110e:	47b0      	blx	r6
    1110:	1e05      	subs	r5, r0, #0
    1112:	d00b      	beq.n	112c <flight+0xf4>
    1114:	2380      	movs	r3, #128	; 0x80
    1116:	4958      	ldr	r1, [pc, #352]	; (1278 <flight+0x240>)
    1118:	2200      	movs	r2, #0
    111a:	6808      	ldr	r0, [r1, #0]
    111c:	6849      	ldr	r1, [r1, #4]
    111e:	05db      	lsls	r3, r3, #23
    1120:	2501      	movs	r5, #1
    1122:	47b0      	blx	r6
    1124:	2800      	cmp	r0, #0
    1126:	d100      	bne.n	112a <flight+0xf2>
    1128:	1c05      	adds	r5, r0, #0
    112a:	b2ed      	uxtb	r5, r5
    112c:	4b53      	ldr	r3, [pc, #332]	; (127c <flight+0x244>)
    112e:	4798      	blx	r3
    1130:	2864      	cmp	r0, #100	; 0x64
    1132:	dc01      	bgt.n	1138 <flight+0x100>
    1134:	07eb      	lsls	r3, r5, #31
    1136:	d5a1      	bpl.n	107c <flight+0x44>
            flightState = flightBoost;
    1138:	2303      	movs	r3, #3
            logEvent('L');
    113a:	204c      	movs	r0, #76	; 0x4c
            flightState = flightBoost;
    113c:	7023      	strb	r3, [r4, #0]
            logEvent('M');
    113e:	4b50      	ldr	r3, [pc, #320]	; (1280 <flight+0x248>)
    1140:	4798      	blx	r3
    1142:	e79b      	b.n	107c <flight+0x44>
        if (writeLog) {
    1144:	4b47      	ldr	r3, [pc, #284]	; (1264 <flight+0x22c>)
    1146:	781b      	ldrb	r3, [r3, #0]
    1148:	2b00      	cmp	r3, #0
    114a:	d001      	beq.n	1150 <flight+0x118>
            logSensors( );
    114c:	4b4d      	ldr	r3, [pc, #308]	; (1284 <flight+0x24c>)
    114e:	4798      	blx	r3
        if (velocity < 0) {
    1150:	4946      	ldr	r1, [pc, #280]	; (126c <flight+0x234>)
    1152:	2200      	movs	r2, #0
    1154:	6808      	ldr	r0, [r1, #0]
    1156:	6849      	ldr	r1, [r1, #4]
    1158:	2300      	movs	r3, #0
    115a:	4d4b      	ldr	r5, [pc, #300]	; (1288 <flight+0x250>)
    115c:	47a8      	blx	r5
    115e:	2800      	cmp	r0, #0
    1160:	d100      	bne.n	1164 <flight+0x12c>
    1162:	e78b      	b.n	107c <flight+0x44>
            flightState = flightDrogue;
    1164:	2306      	movs	r3, #6
    1166:	7023      	strb	r3, [r4, #0]
            igniteDrogue();
    1168:	4b48      	ldr	r3, [pc, #288]	; (128c <flight+0x254>)
    116a:	4798      	blx	r3
            logEvent('A');
    116c:	2041      	movs	r0, #65	; 0x41
    116e:	4b44      	ldr	r3, [pc, #272]	; (1280 <flight+0x248>)
    1170:	4798      	blx	r3
            beep(100);
    1172:	2064      	movs	r0, #100	; 0x64
            beep(400);
    1174:	4b36      	ldr	r3, [pc, #216]	; (1250 <flight+0x218>)
    1176:	4798      	blx	r3
    1178:	e780      	b.n	107c <flight+0x44>
        if (writeLog) {
    117a:	4b3a      	ldr	r3, [pc, #232]	; (1264 <flight+0x22c>)
    117c:	781b      	ldrb	r3, [r3, #0]
    117e:	2b00      	cmp	r3, #0
    1180:	d001      	beq.n	1186 <flight+0x14e>
            logSensors( );
    1182:	4b40      	ldr	r3, [pc, #256]	; (1284 <flight+0x24c>)
    1184:	4798      	blx	r3
        if (sample.pressureAltitude < deploymentSettings.MAIN_DEPLOY) {
    1186:	4b42      	ldr	r3, [pc, #264]	; (1290 <flight+0x258>)
    1188:	8b18      	ldrh	r0, [r3, #24]
    118a:	4b42      	ldr	r3, [pc, #264]	; (1294 <flight+0x25c>)
    118c:	4798      	blx	r3
    118e:	000b      	movs	r3, r1
    1190:	4941      	ldr	r1, [pc, #260]	; (1298 <flight+0x260>)
    1192:	0002      	movs	r2, r0
    1194:	6d88      	ldr	r0, [r1, #88]	; 0x58
    1196:	6dc9      	ldr	r1, [r1, #92]	; 0x5c
    1198:	4d3b      	ldr	r5, [pc, #236]	; (1288 <flight+0x250>)
    119a:	47a8      	blx	r5
    119c:	2800      	cmp	r0, #0
    119e:	d100      	bne.n	11a2 <flight+0x16a>
    11a0:	e76c      	b.n	107c <flight+0x44>
            flightState = flightMain;
    11a2:	2307      	movs	r3, #7
    11a4:	7023      	strb	r3, [r4, #0]
            igniteMain();
    11a6:	4b3d      	ldr	r3, [pc, #244]	; (129c <flight+0x264>)
    11a8:	4798      	blx	r3
            logEvent('M');
    11aa:	204d      	movs	r0, #77	; 0x4d
    11ac:	e7c7      	b.n	113e <flight+0x106>
        if (writeLog) {
    11ae:	4b2d      	ldr	r3, [pc, #180]	; (1264 <flight+0x22c>)
    11b0:	781b      	ldrb	r3, [r3, #0]
    11b2:	2b00      	cmp	r3, #0
    11b4:	d001      	beq.n	11ba <flight+0x182>
            logSensors( );
    11b6:	4b33      	ldr	r3, [pc, #204]	; (1284 <flight+0x24c>)
    11b8:	4798      	blx	r3
        if (velocity < 5) {
    11ba:	492c      	ldr	r1, [pc, #176]	; (126c <flight+0x234>)
    11bc:	2200      	movs	r2, #0
    11be:	6808      	ldr	r0, [r1, #0]
    11c0:	6849      	ldr	r1, [r1, #4]
    11c2:	4b37      	ldr	r3, [pc, #220]	; (12a0 <flight+0x268>)
    11c4:	4d30      	ldr	r5, [pc, #192]	; (1288 <flight+0x250>)
    11c6:	47a8      	blx	r5
    11c8:	2800      	cmp	r0, #0
    11ca:	d100      	bne.n	11ce <flight+0x196>
    11cc:	e756      	b.n	107c <flight+0x44>
            flightState = flightLanded;
    11ce:	2308      	movs	r3, #8
    11d0:	7023      	strb	r3, [r4, #0]
            finishFlight();
    11d2:	4b1b      	ldr	r3, [pc, #108]	; (1240 <flight+0x208>)
    11d4:	e769      	b.n	10aa <flight+0x72>
        if (millis() - offsets.groundBeep > 2000) {
    11d6:	4e13      	ldr	r6, [pc, #76]	; (1224 <flight+0x1ec>)
    11d8:	47b0      	blx	r6
    11da:	4d1c      	ldr	r5, [pc, #112]	; (124c <flight+0x214>)
    11dc:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    11de:	1ac0      	subs	r0, r0, r3
    11e0:	23fa      	movs	r3, #250	; 0xfa
    11e2:	00db      	lsls	r3, r3, #3
    11e4:	4298      	cmp	r0, r3
    11e6:	d800      	bhi.n	11ea <flight+0x1b2>
    11e8:	e748      	b.n	107c <flight+0x44>
            offsets.groundBeep = millis();
    11ea:	47b0      	blx	r6
    11ec:	6328      	str	r0, [r5, #48]	; 0x30
            beep(400);
    11ee:	20c8      	movs	r0, #200	; 0xc8
    11f0:	0040      	lsls	r0, r0, #1
    11f2:	e7bf      	b.n	1174 <flight+0x13c>
        if ( (sample.voltage.senseA + sample.voltage.senseB +sample.voltage.senseC +sample.voltage.senseD) > 200) {
    11f4:	4a28      	ldr	r2, [pc, #160]	; (1298 <flight+0x260>)
    11f6:	8a51      	ldrh	r1, [r2, #18]
    11f8:	8a13      	ldrh	r3, [r2, #16]
    11fa:	185b      	adds	r3, r3, r1
    11fc:	8a91      	ldrh	r1, [r2, #20]
    11fe:	8ad2      	ldrh	r2, [r2, #22]
    1200:	185b      	adds	r3, r3, r1
    1202:	189b      	adds	r3, r3, r2
    1204:	2bc8      	cmp	r3, #200	; 0xc8
    1206:	dd01      	ble.n	120c <flight+0x1d4>
            unpluggedJingle();
    1208:	4b0f      	ldr	r3, [pc, #60]	; (1248 <flight+0x210>)
    120a:	4798      	blx	r3
        if (writeLog) {
    120c:	4b15      	ldr	r3, [pc, #84]	; (1264 <flight+0x22c>)
    120e:	781b      	ldrb	r3, [r3, #0]
    1210:	2b00      	cmp	r3, #0
    1212:	d100      	bne.n	1216 <flight+0x1de>
    1214:	e732      	b.n	107c <flight+0x44>
            logSensors( );
    1216:	4b1b      	ldr	r3, [pc, #108]	; (1284 <flight+0x24c>)
    1218:	e747      	b.n	10aa <flight+0x72>
    121a:	46c0      	nop			; (mov r8, r8)
    121c:	20000534 	.word	0x20000534
    1220:	000012a5 	.word	0x000012a5
    1224:	00000f31 	.word	0x00000f31
    1228:	20000524 	.word	0x20000524
    122c:	00002710 	.word	0x00002710
    1230:	00002609 	.word	0x00002609
    1234:	0000231d 	.word	0x0000231d
    1238:	00000ca5 	.word	0x00000ca5
    123c:	00000b31 	.word	0x00000b31
    1240:	00000b65 	.word	0x00000b65
    1244:	00002dad 	.word	0x00002dad
    1248:	00000cdd 	.word	0x00000cdd
    124c:	200004d0 	.word	0x200004d0
    1250:	00000c6d 	.word	0x00000c6d
    1254:	42001400 	.word	0x42001400
    1258:	00002b55 	.word	0x00002b55
    125c:	05fa0004 	.word	0x05fa0004
    1260:	e000ed00 	.word	0xe000ed00
    1264:	20000522 	.word	0x20000522
    1268:	41004400 	.word	0x41004400
    126c:	200006a0 	.word	0x200006a0
    1270:	0000417d 	.word	0x0000417d
    1274:	402e0000 	.word	0x402e0000
    1278:	20000698 	.word	0x20000698
    127c:	00000afd 	.word	0x00000afd
    1280:	00002379 	.word	0x00002379
    1284:	000023cd 	.word	0x000023cd
    1288:	00004155 	.word	0x00004155
    128c:	000015e9 	.word	0x000015e9
    1290:	20000508 	.word	0x20000508
    1294:	00005f11 	.word	0x00005f11
    1298:	200007d8 	.word	0x200007d8
    129c:	0000158d 	.word	0x0000158d
    12a0:	40140000 	.word	0x40140000

000012a4 <updateGround>:
#include <util.h>
#include <altimeter.h>

void updateGround(Altimeter *my_altimeter) {
    12a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}



    offsets.gravityOffsetBuffer = offsets.gravityOffsetBuffer * 0.8 + sample.accelZ * 0.2;
    12a6:	4c2b      	ldr	r4, [pc, #172]	; (1354 <updateGround+0xb0>)
    12a8:	4d2b      	ldr	r5, [pc, #172]	; (1358 <updateGround+0xb4>)
    12aa:	4a2c      	ldr	r2, [pc, #176]	; (135c <updateGround+0xb8>)
    12ac:	6920      	ldr	r0, [r4, #16]
    12ae:	6961      	ldr	r1, [r4, #20]
    12b0:	4b2b      	ldr	r3, [pc, #172]	; (1360 <updateGround+0xbc>)
    12b2:	47a8      	blx	r5
    12b4:	4b2b      	ldr	r3, [pc, #172]	; (1364 <updateGround+0xc0>)
    12b6:	0006      	movs	r6, r0
    12b8:	6b58      	ldr	r0, [r3, #52]	; 0x34
    12ba:	4b2b      	ldr	r3, [pc, #172]	; (1368 <updateGround+0xc4>)
    12bc:	000f      	movs	r7, r1
    12be:	4798      	blx	r3
    12c0:	4a26      	ldr	r2, [pc, #152]	; (135c <updateGround+0xb8>)
    12c2:	4b2a      	ldr	r3, [pc, #168]	; (136c <updateGround+0xc8>)
    12c4:	47a8      	blx	r5
    12c6:	0002      	movs	r2, r0
    12c8:	000b      	movs	r3, r1
    12ca:	0030      	movs	r0, r6
    12cc:	0039      	movs	r1, r7
    12ce:	4e28      	ldr	r6, [pc, #160]	; (1370 <updateGround+0xcc>)
    12d0:	47b0      	blx	r6
    offsets.groundOffsetBuffer = offsets.groundOffsetBuffer * 0.5 + altitude * 0.5;
    12d2:	4e28      	ldr	r6, [pc, #160]	; (1374 <updateGround+0xd0>)
    offsets.gravityOffsetBuffer = offsets.gravityOffsetBuffer * 0.8 + sample.accelZ * 0.2;
    12d4:	6120      	str	r0, [r4, #16]
    12d6:	6161      	str	r1, [r4, #20]
    offsets.groundOffsetBuffer = offsets.groundOffsetBuffer * 0.5 + altitude * 0.5;
    12d8:	69e0      	ldr	r0, [r4, #28]
    12da:	47b0      	blx	r6
    12dc:	2200      	movs	r2, #0
    12de:	4b26      	ldr	r3, [pc, #152]	; (1378 <updateGround+0xd4>)
    12e0:	47a8      	blx	r5
    12e2:	9000      	str	r0, [sp, #0]
    12e4:	9101      	str	r1, [sp, #4]
    12e6:	4925      	ldr	r1, [pc, #148]	; (137c <updateGround+0xd8>)
    12e8:	2200      	movs	r2, #0
    12ea:	6808      	ldr	r0, [r1, #0]
    12ec:	6849      	ldr	r1, [r1, #4]
    12ee:	4b22      	ldr	r3, [pc, #136]	; (1378 <updateGround+0xd4>)
    12f0:	47a8      	blx	r5
    12f2:	4f1f      	ldr	r7, [pc, #124]	; (1370 <updateGround+0xcc>)
    12f4:	0002      	movs	r2, r0
    12f6:	000b      	movs	r3, r1
    12f8:	9800      	ldr	r0, [sp, #0]
    12fa:	9901      	ldr	r1, [sp, #4]
    12fc:	47b8      	blx	r7
    12fe:	4f20      	ldr	r7, [pc, #128]	; (1380 <updateGround+0xdc>)
    1300:	47b8      	blx	r7
    1302:	61e0      	str	r0, [r4, #28]
    offsets.groundTemperatureBuffer = offsets.groundTemperatureBuffer * 0.8 + sample.temperatureCelcus * 0.2;
    1304:	6a60      	ldr	r0, [r4, #36]	; 0x24
    1306:	47b0      	blx	r6
    1308:	4a14      	ldr	r2, [pc, #80]	; (135c <updateGround+0xb8>)
    130a:	4b15      	ldr	r3, [pc, #84]	; (1360 <updateGround+0xbc>)
    130c:	47a8      	blx	r5
    130e:	4b15      	ldr	r3, [pc, #84]	; (1364 <updateGround+0xc0>)
    1310:	9000      	str	r0, [sp, #0]
    1312:	9101      	str	r1, [sp, #4]
    1314:	6d58      	ldr	r0, [r3, #84]	; 0x54
    1316:	47b0      	blx	r6
    1318:	4a10      	ldr	r2, [pc, #64]	; (135c <updateGround+0xb8>)
    131a:	4b14      	ldr	r3, [pc, #80]	; (136c <updateGround+0xc8>)
    131c:	47a8      	blx	r5
    131e:	4d14      	ldr	r5, [pc, #80]	; (1370 <updateGround+0xcc>)
    1320:	000b      	movs	r3, r1
    1322:	0002      	movs	r2, r0
    1324:	9800      	ldr	r0, [sp, #0]
    1326:	9901      	ldr	r1, [sp, #4]
    1328:	47a8      	blx	r5
    132a:	47b8      	blx	r7

    if ((millis() - offsets.offsetBufferTime) > 2000) {
    132c:	4d15      	ldr	r5, [pc, #84]	; (1384 <updateGround+0xe0>)
    offsets.groundTemperatureBuffer = offsets.groundTemperatureBuffer * 0.8 + sample.temperatureCelcus * 0.2;
    132e:	6260      	str	r0, [r4, #36]	; 0x24
    if ((millis() - offsets.offsetBufferTime) > 2000) {
    1330:	47a8      	blx	r5
    1332:	6823      	ldr	r3, [r4, #0]
    1334:	1ac0      	subs	r0, r0, r3
    1336:	23fa      	movs	r3, #250	; 0xfa
    1338:	00db      	lsls	r3, r3, #3
    133a:	4298      	cmp	r0, r3
    133c:	d909      	bls.n	1352 <updateGround+0xae>
        //recursive filter
        offsets.groundOffset = offsets.groundOffsetBuffer;
    133e:	69e3      	ldr	r3, [r4, #28]
    1340:	61a3      	str	r3, [r4, #24]
        offsets.groundTemperature = offsets.groundTemperatureBuffer;
    1342:	6a63      	ldr	r3, [r4, #36]	; 0x24
    1344:	6223      	str	r3, [r4, #32]
        offsets.gravityOffset = offsets.gravityOffsetBuffer;
    1346:	6922      	ldr	r2, [r4, #16]
    1348:	6963      	ldr	r3, [r4, #20]
    134a:	60a2      	str	r2, [r4, #8]
    134c:	60e3      	str	r3, [r4, #12]
        offsets.offsetBufferTime = millis();
    134e:	47a8      	blx	r5
    1350:	6020      	str	r0, [r4, #0]
    }
}
    1352:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    1354:	200004d0 	.word	0x200004d0
    1358:	0000533d 	.word	0x0000533d
    135c:	9999999a 	.word	0x9999999a
    1360:	3fe99999 	.word	0x3fe99999
    1364:	200007d8 	.word	0x200007d8
    1368:	00006005 	.word	0x00006005
    136c:	3fc99999 	.word	0x3fc99999
    1370:	000044b5 	.word	0x000044b5
    1374:	00005f95 	.word	0x00005f95
    1378:	3fe00000 	.word	0x3fe00000
    137c:	200006a8 	.word	0x200006a8
    1380:	000041f9 	.word	0x000041f9
    1384:	00000f31 	.word	0x00000f31

00001388 <isItPointingUp>:

void isItPointingUp() {
    1388:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    u8_t i;

    double pointingUpBuffer;

    pointingUpBuffer = sample.accelZ;
    138a:	4f23      	ldr	r7, [pc, #140]	; (1418 <isItPointingUp+0x90>)
    138c:	4b23      	ldr	r3, [pc, #140]	; (141c <isItPointingUp+0x94>)
    138e:	6b78      	ldr	r0, [r7, #52]	; 0x34
    1390:	4798      	blx	r3
    1392:	260a      	movs	r6, #10
    1394:	0004      	movs	r4, r0
    1396:	000d      	movs	r5, r1

    for ( i = 0; i < 10 ; ++i ) {
        delay_ms(10);
    1398:	200a      	movs	r0, #10
    139a:	4b21      	ldr	r3, [pc, #132]	; (1420 <isItPointingUp+0x98>)
    139c:	4798      	blx	r3
        sampleTick();
    139e:	4b21      	ldr	r3, [pc, #132]	; (1424 <isItPointingUp+0x9c>)
    13a0:	4798      	blx	r3
        pointingUpBuffer = pointingUpBuffer * 0.8 + sample.accelZ * 0.2;
    13a2:	4a21      	ldr	r2, [pc, #132]	; (1428 <isItPointingUp+0xa0>)
    13a4:	4b21      	ldr	r3, [pc, #132]	; (142c <isItPointingUp+0xa4>)
    13a6:	0020      	movs	r0, r4
    13a8:	0029      	movs	r1, r5
    13aa:	4c21      	ldr	r4, [pc, #132]	; (1430 <isItPointingUp+0xa8>)
    13ac:	47a0      	blx	r4
    13ae:	4b1b      	ldr	r3, [pc, #108]	; (141c <isItPointingUp+0x94>)
    13b0:	9000      	str	r0, [sp, #0]
    13b2:	9101      	str	r1, [sp, #4]
    13b4:	6b78      	ldr	r0, [r7, #52]	; 0x34
    13b6:	4798      	blx	r3
    13b8:	4a1b      	ldr	r2, [pc, #108]	; (1428 <isItPointingUp+0xa0>)
    13ba:	4b1e      	ldr	r3, [pc, #120]	; (1434 <isItPointingUp+0xac>)
    13bc:	47a0      	blx	r4
    13be:	9a00      	ldr	r2, [sp, #0]
    13c0:	9b01      	ldr	r3, [sp, #4]
    13c2:	4c1d      	ldr	r4, [pc, #116]	; (1438 <isItPointingUp+0xb0>)
    13c4:	47a0      	blx	r4
    13c6:	3e01      	subs	r6, #1
    13c8:	b2f6      	uxtb	r6, r6
    13ca:	0004      	movs	r4, r0
    13cc:	000d      	movs	r5, r1
    for ( i = 0; i < 10 ; ++i ) {
    13ce:	2e00      	cmp	r6, #0
    13d0:	d1e2      	bne.n	1398 <isItPointingUp+0x10>
    }
    if ((pointingUpBuffer > 0.9) & (pointingUpBuffer <1.1)) {
    13d2:	4e1a      	ldr	r6, [pc, #104]	; (143c <isItPointingUp+0xb4>)
    13d4:	4a1a      	ldr	r2, [pc, #104]	; (1440 <isItPointingUp+0xb8>)
    13d6:	4b1b      	ldr	r3, [pc, #108]	; (1444 <isItPointingUp+0xbc>)
    13d8:	47b0      	blx	r6
    13da:	4f1b      	ldr	r7, [pc, #108]	; (1448 <isItPointingUp+0xc0>)
    13dc:	2800      	cmp	r0, #0
    13de:	d007      	beq.n	13f0 <isItPointingUp+0x68>
    13e0:	4a11      	ldr	r2, [pc, #68]	; (1428 <isItPointingUp+0xa0>)
    13e2:	4b1a      	ldr	r3, [pc, #104]	; (144c <isItPointingUp+0xc4>)
    13e4:	0020      	movs	r0, r4
    13e6:	0029      	movs	r1, r5
    13e8:	47b8      	blx	r7
        altimeter.pointingUp = true;
    13ea:	2201      	movs	r2, #1
    if ((pointingUpBuffer > 0.9) & (pointingUpBuffer <1.1)) {
    13ec:	2800      	cmp	r0, #0
    13ee:	d10e      	bne.n	140e <isItPointingUp+0x86>
    } else if ((pointingUpBuffer < -0.9) & (pointingUpBuffer > -1.1)) {
    13f0:	4a13      	ldr	r2, [pc, #76]	; (1440 <isItPointingUp+0xb8>)
    13f2:	4b17      	ldr	r3, [pc, #92]	; (1450 <isItPointingUp+0xc8>)
    13f4:	0020      	movs	r0, r4
    13f6:	0029      	movs	r1, r5
    13f8:	47b8      	blx	r7
    13fa:	2800      	cmp	r0, #0
    13fc:	d00a      	beq.n	1414 <isItPointingUp+0x8c>
    13fe:	4a0a      	ldr	r2, [pc, #40]	; (1428 <isItPointingUp+0xa0>)
    1400:	4b14      	ldr	r3, [pc, #80]	; (1454 <isItPointingUp+0xcc>)
    1402:	0020      	movs	r0, r4
    1404:	0029      	movs	r1, r5
    1406:	47b0      	blx	r6
    1408:	2800      	cmp	r0, #0
    140a:	d003      	beq.n	1414 <isItPointingUp+0x8c>
        altimeter.pointingUp = false;
    140c:	2200      	movs	r2, #0
    140e:	4b12      	ldr	r3, [pc, #72]	; (1458 <isItPointingUp+0xd0>)
    1410:	715a      	strb	r2, [r3, #5]

        }

    }

    1412:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    1414:	e7fe      	b.n	1414 <isItPointingUp+0x8c>
    1416:	46c0      	nop			; (mov r8, r8)
    1418:	200007d8 	.word	0x200007d8
    141c:	00006005 	.word	0x00006005
    1420:	00000ee9 	.word	0x00000ee9
    1424:	000026d5 	.word	0x000026d5
    1428:	9999999a 	.word	0x9999999a
    142c:	3fe99999 	.word	0x3fe99999
    1430:	0000533d 	.word	0x0000533d
    1434:	3fc99999 	.word	0x3fc99999
    1438:	000044b5 	.word	0x000044b5
    143c:	0000417d 	.word	0x0000417d
    1440:	cccccccd 	.word	0xcccccccd
    1444:	3feccccc 	.word	0x3feccccc
    1448:	00004155 	.word	0x00004155
    144c:	3ff19999 	.word	0x3ff19999
    1450:	bfeccccc 	.word	0xbfeccccc
    1454:	bff19999 	.word	0xbff19999
    1458:	20000528 	.word	0x20000528

0000145c <igniterTick>:
#include <util.h>
#include <boardDefines.h>


void igniterTick() {
    145c:	b510      	push	{r4, lr}

    if (charges.igniterAHot) {
    145e:	4c23      	ldr	r4, [pc, #140]	; (14ec <igniterTick+0x90>)
    1460:	7823      	ldrb	r3, [r4, #0]
    1462:	2b00      	cmp	r3, #0
    1464:	d00d      	beq.n	1482 <igniterTick+0x26>
        if ((millis() - charges.igniterATick) > 2000) {
    1466:	4b22      	ldr	r3, [pc, #136]	; (14f0 <igniterTick+0x94>)
    1468:	4798      	blx	r3
    146a:	6863      	ldr	r3, [r4, #4]
    146c:	1ac0      	subs	r0, r0, r3
    146e:	23fa      	movs	r3, #250	; 0xfa
    1470:	00db      	lsls	r3, r3, #3
    1472:	4298      	cmp	r0, r3
    1474:	d905      	bls.n	1482 <igniterTick+0x26>
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    1476:	2280      	movs	r2, #128	; 0x80
    1478:	4b1e      	ldr	r3, [pc, #120]	; (14f4 <igniterTick+0x98>)
    147a:	0412      	lsls	r2, r2, #16
    147c:	601a      	str	r2, [r3, #0]
            pinLow(fireAPin);
            charges.igniterAHot = false;
    147e:	2300      	movs	r3, #0
    1480:	7023      	strb	r3, [r4, #0]
        }
    }

    if (charges.igniterBHot) {
    1482:	7a23      	ldrb	r3, [r4, #8]
    1484:	2b00      	cmp	r3, #0
    1486:	d00d      	beq.n	14a4 <igniterTick+0x48>
        if ((millis() - charges.igniterBTick) > 2000) {
    1488:	4b19      	ldr	r3, [pc, #100]	; (14f0 <igniterTick+0x94>)
    148a:	4798      	blx	r3
    148c:	68e3      	ldr	r3, [r4, #12]
    148e:	1ac0      	subs	r0, r0, r3
    1490:	23fa      	movs	r3, #250	; 0xfa
    1492:	00db      	lsls	r3, r3, #3
    1494:	4298      	cmp	r0, r3
    1496:	d905      	bls.n	14a4 <igniterTick+0x48>
    1498:	2280      	movs	r2, #128	; 0x80
    149a:	4b16      	ldr	r3, [pc, #88]	; (14f4 <igniterTick+0x98>)
    149c:	03d2      	lsls	r2, r2, #15
    149e:	601a      	str	r2, [r3, #0]
            pinLow(fireBPin);
            charges.igniterBHot = false;
    14a0:	2300      	movs	r3, #0
    14a2:	7223      	strb	r3, [r4, #8]
        }
    }

    if (charges.igniterCHot) {
    14a4:	7c23      	ldrb	r3, [r4, #16]
    14a6:	2b00      	cmp	r3, #0
    14a8:	d00d      	beq.n	14c6 <igniterTick+0x6a>
        if ((millis() - charges.igniterCTick) > 2000) {
    14aa:	4b11      	ldr	r3, [pc, #68]	; (14f0 <igniterTick+0x94>)
    14ac:	4798      	blx	r3
    14ae:	6963      	ldr	r3, [r4, #20]
    14b0:	1ac0      	subs	r0, r0, r3
    14b2:	23fa      	movs	r3, #250	; 0xfa
    14b4:	00db      	lsls	r3, r3, #3
    14b6:	4298      	cmp	r0, r3
    14b8:	d905      	bls.n	14c6 <igniterTick+0x6a>
    14ba:	2280      	movs	r2, #128	; 0x80
    14bc:	4b0e      	ldr	r3, [pc, #56]	; (14f8 <igniterTick+0x9c>)
    14be:	0492      	lsls	r2, r2, #18
    14c0:	615a      	str	r2, [r3, #20]
            pinLow(fireCPin);
            charges.igniterCHot = false;
    14c2:	2300      	movs	r3, #0
    14c4:	7423      	strb	r3, [r4, #16]
        }
    }

    if (charges.igniterDHot) {
    14c6:	7e23      	ldrb	r3, [r4, #24]
    14c8:	2b00      	cmp	r3, #0
    14ca:	d00d      	beq.n	14e8 <igniterTick+0x8c>
        if ((millis() - charges.igniterDTick) > 2000) {
    14cc:	4b08      	ldr	r3, [pc, #32]	; (14f0 <igniterTick+0x94>)
    14ce:	4798      	blx	r3
    14d0:	69e3      	ldr	r3, [r4, #28]
    14d2:	1ac0      	subs	r0, r0, r3
    14d4:	23fa      	movs	r3, #250	; 0xfa
    14d6:	00db      	lsls	r3, r3, #3
    14d8:	4298      	cmp	r0, r3
    14da:	d905      	bls.n	14e8 <igniterTick+0x8c>
    14dc:	2280      	movs	r2, #128	; 0x80
    14de:	4b06      	ldr	r3, [pc, #24]	; (14f8 <igniterTick+0x9c>)
    14e0:	0452      	lsls	r2, r2, #17
    14e2:	615a      	str	r2, [r3, #20]
            pinLow(fireDPin);
            charges.igniterDHot = false;
    14e4:	2300      	movs	r3, #0
    14e6:	7623      	strb	r3, [r4, #24]
        }
    }
}
    14e8:	bd10      	pop	{r4, pc}
    14ea:	46c0      	nop			; (mov r8, r8)
    14ec:	20000678 	.word	0x20000678
    14f0:	00000f31 	.word	0x00000f31
    14f4:	41004494 	.word	0x41004494
    14f8:	41004400 	.word	0x41004400

000014fc <lightIgniterA>:
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    14fc:	2280      	movs	r2, #128	; 0x80
    14fe:	4b05      	ldr	r3, [pc, #20]	; (1514 <lightIgniterA+0x18>)
    1500:	0412      	lsls	r2, r2, #16
    if (deploymentSettings.channelDSettings.ENABLED & (deploymentSettings.channelDSettings.TYPE == DROGUE_t)) {
        lightIgniterD();
    }
}

void lightIgniterA() {
    1502:	b510      	push	{r4, lr}
    1504:	601a      	str	r2, [r3, #0]
    pinHigh(fireAPin);
    charges.igniterAHot = true;
    1506:	2301      	movs	r3, #1
    1508:	4c03      	ldr	r4, [pc, #12]	; (1518 <lightIgniterA+0x1c>)
    150a:	7023      	strb	r3, [r4, #0]
    charges.igniterATick = millis();
    150c:	4b03      	ldr	r3, [pc, #12]	; (151c <lightIgniterA+0x20>)
    150e:	4798      	blx	r3
    1510:	6060      	str	r0, [r4, #4]
}
    1512:	bd10      	pop	{r4, pc}
    1514:	41004498 	.word	0x41004498
    1518:	20000678 	.word	0x20000678
    151c:	00000f31 	.word	0x00000f31

00001520 <lightIgniterB>:
    1520:	2280      	movs	r2, #128	; 0x80
    1522:	4b05      	ldr	r3, [pc, #20]	; (1538 <lightIgniterB+0x18>)
    1524:	03d2      	lsls	r2, r2, #15

void lightIgniterB() {
    1526:	b510      	push	{r4, lr}
    1528:	601a      	str	r2, [r3, #0]
    pinHigh(fireBPin);
    charges.igniterBHot = true;
    152a:	2301      	movs	r3, #1
    152c:	4c03      	ldr	r4, [pc, #12]	; (153c <lightIgniterB+0x1c>)
    152e:	7223      	strb	r3, [r4, #8]
    charges.igniterBTick = millis();
    1530:	4b03      	ldr	r3, [pc, #12]	; (1540 <lightIgniterB+0x20>)
    1532:	4798      	blx	r3
    1534:	60e0      	str	r0, [r4, #12]
}
    1536:	bd10      	pop	{r4, pc}
    1538:	41004498 	.word	0x41004498
    153c:	20000678 	.word	0x20000678
    1540:	00000f31 	.word	0x00000f31

00001544 <lightIgniterC>:
    1544:	2280      	movs	r2, #128	; 0x80
    1546:	4b05      	ldr	r3, [pc, #20]	; (155c <lightIgniterC+0x18>)
    1548:	0492      	lsls	r2, r2, #18

void lightIgniterC() {
    154a:	b510      	push	{r4, lr}
    154c:	619a      	str	r2, [r3, #24]
    pinHigh(fireCPin);
    charges.igniterCHot = true;
    154e:	2301      	movs	r3, #1
    1550:	4c03      	ldr	r4, [pc, #12]	; (1560 <lightIgniterC+0x1c>)
    1552:	7423      	strb	r3, [r4, #16]
    charges.igniterCTick = millis();
    1554:	4b03      	ldr	r3, [pc, #12]	; (1564 <lightIgniterC+0x20>)
    1556:	4798      	blx	r3
    1558:	6160      	str	r0, [r4, #20]
}
    155a:	bd10      	pop	{r4, pc}
    155c:	41004400 	.word	0x41004400
    1560:	20000678 	.word	0x20000678
    1564:	00000f31 	.word	0x00000f31

00001568 <lightIgniterD>:
    1568:	2280      	movs	r2, #128	; 0x80
    156a:	4b05      	ldr	r3, [pc, #20]	; (1580 <lightIgniterD+0x18>)
    156c:	0452      	lsls	r2, r2, #17

void lightIgniterD() {
    156e:	b510      	push	{r4, lr}
    1570:	619a      	str	r2, [r3, #24]
    pinHigh(fireDPin);
    charges.igniterDHot = true;
    1572:	2301      	movs	r3, #1
    1574:	4c03      	ldr	r4, [pc, #12]	; (1584 <lightIgniterD+0x1c>)
    1576:	7623      	strb	r3, [r4, #24]
    charges.igniterDTick = millis();
    1578:	4b03      	ldr	r3, [pc, #12]	; (1588 <lightIgniterD+0x20>)
    157a:	4798      	blx	r3
    157c:	61e0      	str	r0, [r4, #28]
    157e:	bd10      	pop	{r4, pc}
    1580:	41004400 	.word	0x41004400
    1584:	20000678 	.word	0x20000678
    1588:	00000f31 	.word	0x00000f31

0000158c <igniteMain>:
void igniteMain() {
    158c:	b510      	push	{r4, lr}
    if (deploymentSettings.channelASettings.ENABLED & (deploymentSettings.channelASettings.TYPE == MAIN_t)) {
    158e:	4c11      	ldr	r4, [pc, #68]	; (15d4 <igniteMain+0x48>)
    1590:	7863      	ldrb	r3, [r4, #1]
    1592:	2b00      	cmp	r3, #0
    1594:	d104      	bne.n	15a0 <igniteMain+0x14>
    1596:	7823      	ldrb	r3, [r4, #0]
    1598:	2b00      	cmp	r3, #0
    159a:	d001      	beq.n	15a0 <igniteMain+0x14>
        lightIgniterA();
    159c:	4b0e      	ldr	r3, [pc, #56]	; (15d8 <igniteMain+0x4c>)
    159e:	4798      	blx	r3
    if(deploymentSettings.channelBSettings.ENABLED & (deploymentSettings.channelBSettings.TYPE == MAIN_t)) {
    15a0:	79e3      	ldrb	r3, [r4, #7]
    15a2:	2b00      	cmp	r3, #0
    15a4:	d104      	bne.n	15b0 <igniteMain+0x24>
    15a6:	79a3      	ldrb	r3, [r4, #6]
    15a8:	2b00      	cmp	r3, #0
    15aa:	d001      	beq.n	15b0 <igniteMain+0x24>
        lightIgniterB();
    15ac:	4b0b      	ldr	r3, [pc, #44]	; (15dc <igniteMain+0x50>)
    15ae:	4798      	blx	r3
    if (deploymentSettings.channelCSettings.ENABLED & (deploymentSettings.channelCSettings.TYPE == MAIN_t)) {
    15b0:	7b63      	ldrb	r3, [r4, #13]
    15b2:	2b00      	cmp	r3, #0
    15b4:	d104      	bne.n	15c0 <igniteMain+0x34>
    15b6:	7b23      	ldrb	r3, [r4, #12]
    15b8:	2b00      	cmp	r3, #0
    15ba:	d001      	beq.n	15c0 <igniteMain+0x34>
        lightIgniterC();
    15bc:	4b08      	ldr	r3, [pc, #32]	; (15e0 <igniteMain+0x54>)
    15be:	4798      	blx	r3
    if (deploymentSettings.channelDSettings.ENABLED & (deploymentSettings.channelDSettings.TYPE == MAIN_t)) {
    15c0:	7ce3      	ldrb	r3, [r4, #19]
    15c2:	2b00      	cmp	r3, #0
    15c4:	d104      	bne.n	15d0 <igniteMain+0x44>
    15c6:	7ca3      	ldrb	r3, [r4, #18]
    15c8:	2b00      	cmp	r3, #0
    15ca:	d001      	beq.n	15d0 <igniteMain+0x44>
        lightIgniterD();
    15cc:	4b05      	ldr	r3, [pc, #20]	; (15e4 <igniteMain+0x58>)
    15ce:	4798      	blx	r3
}
    15d0:	bd10      	pop	{r4, pc}
    15d2:	46c0      	nop			; (mov r8, r8)
    15d4:	20000508 	.word	0x20000508
    15d8:	000014fd 	.word	0x000014fd
    15dc:	00001521 	.word	0x00001521
    15e0:	00001545 	.word	0x00001545
    15e4:	00001569 	.word	0x00001569

000015e8 <igniteDrogue>:
void igniteDrogue() {
    15e8:	b510      	push	{r4, lr}
    if (deploymentSettings.channelASettings.ENABLED & (deploymentSettings.channelASettings.TYPE == DROGUE_t)) {
    15ea:	4c11      	ldr	r4, [pc, #68]	; (1630 <igniteDrogue+0x48>)
    15ec:	7863      	ldrb	r3, [r4, #1]
    15ee:	2b01      	cmp	r3, #1
    15f0:	d104      	bne.n	15fc <igniteDrogue+0x14>
    15f2:	7823      	ldrb	r3, [r4, #0]
    15f4:	2b00      	cmp	r3, #0
    15f6:	d001      	beq.n	15fc <igniteDrogue+0x14>
        lightIgniterA();
    15f8:	4b0e      	ldr	r3, [pc, #56]	; (1634 <igniteDrogue+0x4c>)
    15fa:	4798      	blx	r3
    if (deploymentSettings.channelBSettings.ENABLED & (deploymentSettings.channelBSettings.TYPE == DROGUE_t)) {
    15fc:	79e3      	ldrb	r3, [r4, #7]
    15fe:	2b01      	cmp	r3, #1
    1600:	d104      	bne.n	160c <igniteDrogue+0x24>
    1602:	79a3      	ldrb	r3, [r4, #6]
    1604:	2b00      	cmp	r3, #0
    1606:	d001      	beq.n	160c <igniteDrogue+0x24>
        lightIgniterB();
    1608:	4b0b      	ldr	r3, [pc, #44]	; (1638 <igniteDrogue+0x50>)
    160a:	4798      	blx	r3
    if (deploymentSettings.channelCSettings.ENABLED & (deploymentSettings.channelCSettings.TYPE == DROGUE_t)) {
    160c:	7b63      	ldrb	r3, [r4, #13]
    160e:	2b01      	cmp	r3, #1
    1610:	d104      	bne.n	161c <igniteDrogue+0x34>
    1612:	7b23      	ldrb	r3, [r4, #12]
    1614:	2b00      	cmp	r3, #0
    1616:	d001      	beq.n	161c <igniteDrogue+0x34>
        lightIgniterC();
    1618:	4b08      	ldr	r3, [pc, #32]	; (163c <igniteDrogue+0x54>)
    161a:	4798      	blx	r3
    if (deploymentSettings.channelDSettings.ENABLED & (deploymentSettings.channelDSettings.TYPE == DROGUE_t)) {
    161c:	7ce3      	ldrb	r3, [r4, #19]
    161e:	2b01      	cmp	r3, #1
    1620:	d104      	bne.n	162c <igniteDrogue+0x44>
    1622:	7ca3      	ldrb	r3, [r4, #18]
    1624:	2b00      	cmp	r3, #0
    1626:	d001      	beq.n	162c <igniteDrogue+0x44>
        lightIgniterD();
    1628:	4b05      	ldr	r3, [pc, #20]	; (1640 <igniteDrogue+0x58>)
    162a:	4798      	blx	r3
}
    162c:	bd10      	pop	{r4, pc}
    162e:	46c0      	nop			; (mov r8, r8)
    1630:	20000508 	.word	0x20000508
    1634:	000014fd 	.word	0x000014fd
    1638:	00001521 	.word	0x00001521
    163c:	00001545 	.word	0x00001545
    1640:	00001569 	.word	0x00001569

00001644 <computeKalmanGains>:
    /*
     Fill in state transition matrix and its transpose
    */
    phi[0][1]    = dt;
    phi[1][2]    = dt;
    phi[0][2]    = dt*dt/2.0;
    1644:	2208      	movs	r2, #8
    phi[0][1]    = dt;
    1646:	4bdd      	ldr	r3, [pc, #884]	; (19bc <computeKalmanGains+0x378>)
    1648:	48dd      	ldr	r0, [pc, #884]	; (19c0 <computeKalmanGains+0x37c>)
    164a:	49de      	ldr	r1, [pc, #888]	; (19c4 <computeKalmanGains+0x380>)
void computeKalmanGains() {
    164c:	b5f0      	push	{r4, r5, r6, r7, lr}
    phi[0][1]    = dt;
    164e:	6098      	str	r0, [r3, #8]
    1650:	60d9      	str	r1, [r3, #12]
    phi[1][2]    = dt;
    1652:	6298      	str	r0, [r3, #40]	; 0x28
    1654:	62d9      	str	r1, [r3, #44]	; 0x2c
    phi[0][2]    = dt*dt/2.0;
    1656:	48dc      	ldr	r0, [pc, #880]	; (19c8 <computeKalmanGains+0x384>)
    1658:	49dc      	ldr	r1, [pc, #880]	; (19cc <computeKalmanGains+0x388>)
void computeKalmanGains() {
    165a:	b0cd      	sub	sp, #308	; 0x134
    phi[0][2]    = dt*dt/2.0;
    165c:	6118      	str	r0, [r3, #16]
    165e:	6159      	str	r1, [r3, #20]
    1660:	a940      	add	r1, sp, #256	; 0x100
    1662:	1857      	adds	r7, r2, r1
    phit[2][1]    = dt;
    phit[2][0]    = dt*dt/2.0;

    for( i = 0; i <= 2; i++)
        for( j = 0; j <=1; j++) {
            lastkgain[i][j] = .001;
    1664:	003e      	movs	r6, r7
    1666:	48da      	ldr	r0, [pc, #872]	; (19d0 <computeKalmanGains+0x38c>)
    1668:	49da      	ldr	r1, [pc, #872]	; (19d4 <computeKalmanGains+0x390>)
    166a:	3e08      	subs	r6, #8
    166c:	6030      	str	r0, [r6, #0]
    166e:	6071      	str	r1, [r6, #4]
            kgain[i][j] = 1.0;
    1670:	2108      	movs	r1, #8
    1672:	4249      	negs	r1, r1
    1674:	468c      	mov	ip, r1
    1676:	4ed8      	ldr	r6, [pc, #864]	; (19d8 <computeKalmanGains+0x394>)
    1678:	2400      	movs	r4, #0
    167a:	1996      	adds	r6, r2, r6
    167c:	44b4      	add	ip, r6
    167e:	4661      	mov	r1, ip
    1680:	4dd6      	ldr	r5, [pc, #856]	; (19dc <computeKalmanGains+0x398>)
            lastkgain[i][j] = .001;
    1682:	48d3      	ldr	r0, [pc, #844]	; (19d0 <computeKalmanGains+0x38c>)
            kgain[i][j] = 1.0;
    1684:	600c      	str	r4, [r1, #0]
    1686:	604d      	str	r5, [r1, #4]
            lastkgain[i][j] = .001;
    1688:	49d2      	ldr	r1, [pc, #840]	; (19d4 <computeKalmanGains+0x390>)
    168a:	3210      	adds	r2, #16
    168c:	6038      	str	r0, [r7, #0]
    168e:	6079      	str	r1, [r7, #4]
            kgain[i][j] = 1.0;
    1690:	0020      	movs	r0, r4
    1692:	0029      	movs	r1, r5
    1694:	6030      	str	r0, [r6, #0]
    1696:	6071      	str	r1, [r6, #4]
    for( i = 0; i <= 2; i++)
    1698:	2a38      	cmp	r2, #56	; 0x38
    169a:	d1e1      	bne.n	1660 <computeKalmanGains+0x1c>

    /* Compute the Kalman gain matrix. */
    while(1) {
        /* Propagate state covariance */

        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
    169c:	6819      	ldr	r1, [r3, #0]
    169e:	685a      	ldr	r2, [r3, #4]
    16a0:	911a      	str	r1, [sp, #104]	; 0x68
    16a2:	921b      	str	r2, [sp, #108]	; 0x6c
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
    16a4:	6999      	ldr	r1, [r3, #24]
    16a6:	69da      	ldr	r2, [r3, #28]
    16a8:	911c      	str	r1, [sp, #112]	; 0x70
    16aa:	921d      	str	r2, [sp, #116]	; 0x74
    16ac:	6a19      	ldr	r1, [r3, #32]
    16ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    16b0:	911e      	str	r1, [sp, #120]	; 0x78
    16b2:	921f      	str	r2, [sp, #124]	; 0x7c
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
    16b4:	6b19      	ldr	r1, [r3, #48]	; 0x30
    16b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    16b8:	9120      	str	r1, [sp, #128]	; 0x80
    16ba:	9221      	str	r2, [sp, #132]	; 0x84
    16bc:	6b99      	ldr	r1, [r3, #56]	; 0x38
    16be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    16c0:	9122      	str	r1, [sp, #136]	; 0x88
    16c2:	9223      	str	r2, [sp, #140]	; 0x8c
    16c4:	6c19      	ldr	r1, [r3, #64]	; 0x40
    16c6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    16c8:	9124      	str	r1, [sp, #144]	; 0x90
    16ca:	9225      	str	r2, [sp, #148]	; 0x94
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
        pestp[2][1] = term[2][0] * phit[0][1] + term[2][1] * phit[1][1] + term[2][2] * phit[2][1];
        pestp[2][2] = term[2][0] * phit[0][2] + term[2][1] * phit[1][2] + term[2][2] * phit[2][2];

        pestp[2][2] = pestp[2][2] + model_variance;
    16cc:	6c99      	ldr	r1, [r3, #72]	; 0x48
    16ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    16d0:	913a      	str	r1, [sp, #232]	; 0xe8
    16d2:	923b      	str	r2, [sp, #236]	; 0xec
        /*
          Calculate Kalman Gain
        */
        det = (pestp[0][0]+altitude_variance)*(pestp[2][2] + acceleration_variance) - pestp[2][0] * pestp[0][2];
    16d4:	6d19      	ldr	r1, [r3, #80]	; 0x50
    16d6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    16d8:	6ddc      	ldr	r4, [r3, #92]	; 0x5c
    16da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    16dc:	933e      	str	r3, [sp, #248]	; 0xf8
    16de:	943f      	str	r4, [sp, #252]	; 0xfc
    16e0:	2300      	movs	r3, #0
    16e2:	4cbf      	ldr	r4, [pc, #764]	; (19e0 <computeKalmanGains+0x39c>)
    16e4:	913c      	str	r1, [sp, #240]	; 0xf0
    16e6:	923d      	str	r2, [sp, #244]	; 0xf4
    16e8:	9302      	str	r3, [sp, #8]
    16ea:	9403      	str	r4, [sp, #12]
    16ec:	2300      	movs	r3, #0
    16ee:	2400      	movs	r4, #0
    16f0:	9310      	str	r3, [sp, #64]	; 0x40
    16f2:	9411      	str	r4, [sp, #68]	; 0x44
    16f4:	9300      	str	r3, [sp, #0]
    16f6:	9401      	str	r4, [sp, #4]
    16f8:	9304      	str	r3, [sp, #16]
    16fa:	9405      	str	r4, [sp, #20]
    16fc:	2300      	movs	r3, #0
    16fe:	4cb8      	ldr	r4, [pc, #736]	; (19e0 <computeKalmanGains+0x39c>)
    1700:	930e      	str	r3, [sp, #56]	; 0x38
    1702:	940f      	str	r4, [sp, #60]	; 0x3c
    1704:	2300      	movs	r3, #0
    1706:	2400      	movs	r4, #0
    1708:	9308      	str	r3, [sp, #32]
    170a:	9409      	str	r4, [sp, #36]	; 0x24
    170c:	930c      	str	r3, [sp, #48]	; 0x30
    170e:	940d      	str	r4, [sp, #52]	; 0x34
    1710:	930a      	str	r3, [sp, #40]	; 0x28
    1712:	940b      	str	r4, [sp, #44]	; 0x2c
    1714:	2480      	movs	r4, #128	; 0x80
    1716:	2300      	movs	r3, #0
    1718:	05e4      	lsls	r4, r4, #23
    171a:	9306      	str	r3, [sp, #24]
    171c:	9407      	str	r4, [sp, #28]
    171e:	2300      	movs	r3, #0
    1720:	9338      	str	r3, [sp, #224]	; 0xe0
        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
    1722:	4db0      	ldr	r5, [pc, #704]	; (19e4 <computeKalmanGains+0x3a0>)
    1724:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    1726:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    1728:	9806      	ldr	r0, [sp, #24]
    172a:	9907      	ldr	r1, [sp, #28]
    172c:	47a8      	blx	r5
    172e:	4aa4      	ldr	r2, [pc, #656]	; (19c0 <computeKalmanGains+0x37c>)
    1730:	0006      	movs	r6, r0
    1732:	000f      	movs	r7, r1
    1734:	9808      	ldr	r0, [sp, #32]
    1736:	9909      	ldr	r1, [sp, #36]	; 0x24
    1738:	4ba2      	ldr	r3, [pc, #648]	; (19c4 <computeKalmanGains+0x380>)
    173a:	47a8      	blx	r5
    173c:	4caa      	ldr	r4, [pc, #680]	; (19e8 <computeKalmanGains+0x3a4>)
    173e:	0002      	movs	r2, r0
    1740:	000b      	movs	r3, r1
    1742:	0030      	movs	r0, r6
    1744:	0039      	movs	r1, r7
    1746:	47a0      	blx	r4
    1748:	4a9f      	ldr	r2, [pc, #636]	; (19c8 <computeKalmanGains+0x384>)
    174a:	0006      	movs	r6, r0
    174c:	000f      	movs	r7, r1
    174e:	9800      	ldr	r0, [sp, #0]
    1750:	9901      	ldr	r1, [sp, #4]
    1752:	4b9e      	ldr	r3, [pc, #632]	; (19cc <computeKalmanGains+0x388>)
    1754:	47a8      	blx	r5
    1756:	0002      	movs	r2, r0
    1758:	000b      	movs	r3, r1
    175a:	0030      	movs	r0, r6
    175c:	0039      	movs	r1, r7
    175e:	47a0      	blx	r4
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
    1760:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    1762:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
        term[0][0] = phi[0][0] * pest[0][0] + phi[0][1] * pest[1][0] + phi[0][2] * pest[2][0];
    1764:	9016      	str	r0, [sp, #88]	; 0x58
    1766:	9117      	str	r1, [sp, #92]	; 0x5c
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
    1768:	980a      	ldr	r0, [sp, #40]	; 0x28
    176a:	990b      	ldr	r1, [sp, #44]	; 0x2c
    176c:	47a8      	blx	r5
    176e:	4a94      	ldr	r2, [pc, #592]	; (19c0 <computeKalmanGains+0x37c>)
    1770:	0006      	movs	r6, r0
    1772:	000f      	movs	r7, r1
    1774:	980e      	ldr	r0, [sp, #56]	; 0x38
    1776:	990f      	ldr	r1, [sp, #60]	; 0x3c
    1778:	4b92      	ldr	r3, [pc, #584]	; (19c4 <computeKalmanGains+0x380>)
    177a:	47a8      	blx	r5
    177c:	0002      	movs	r2, r0
    177e:	000b      	movs	r3, r1
    1780:	0030      	movs	r0, r6
    1782:	0039      	movs	r1, r7
    1784:	47a0      	blx	r4
    1786:	4a90      	ldr	r2, [pc, #576]	; (19c8 <computeKalmanGains+0x384>)
    1788:	0006      	movs	r6, r0
    178a:	000f      	movs	r7, r1
    178c:	9810      	ldr	r0, [sp, #64]	; 0x40
    178e:	9911      	ldr	r1, [sp, #68]	; 0x44
    1790:	4b8e      	ldr	r3, [pc, #568]	; (19cc <computeKalmanGains+0x388>)
    1792:	47a8      	blx	r5
    1794:	0002      	movs	r2, r0
    1796:	000b      	movs	r3, r1
    1798:	0030      	movs	r0, r6
    179a:	0039      	movs	r1, r7
    179c:	47a0      	blx	r4
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
    179e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    17a0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
        term[0][1] = phi[0][0] * pest[0][1] + phi[0][1] * pest[1][1] + phi[0][2] * pest[2][1];
    17a2:	9012      	str	r0, [sp, #72]	; 0x48
    17a4:	9113      	str	r1, [sp, #76]	; 0x4c
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
    17a6:	980c      	ldr	r0, [sp, #48]	; 0x30
    17a8:	990d      	ldr	r1, [sp, #52]	; 0x34
    17aa:	47a8      	blx	r5
    17ac:	4a84      	ldr	r2, [pc, #528]	; (19c0 <computeKalmanGains+0x37c>)
    17ae:	0006      	movs	r6, r0
    17b0:	000f      	movs	r7, r1
    17b2:	9804      	ldr	r0, [sp, #16]
    17b4:	9905      	ldr	r1, [sp, #20]
    17b6:	4b83      	ldr	r3, [pc, #524]	; (19c4 <computeKalmanGains+0x380>)
    17b8:	47a8      	blx	r5
    17ba:	0002      	movs	r2, r0
    17bc:	000b      	movs	r3, r1
    17be:	0030      	movs	r0, r6
    17c0:	0039      	movs	r1, r7
    17c2:	47a0      	blx	r4
    17c4:	4a80      	ldr	r2, [pc, #512]	; (19c8 <computeKalmanGains+0x384>)
    17c6:	0006      	movs	r6, r0
    17c8:	000f      	movs	r7, r1
    17ca:	9802      	ldr	r0, [sp, #8]
    17cc:	9903      	ldr	r1, [sp, #12]
    17ce:	4b7f      	ldr	r3, [pc, #508]	; (19cc <computeKalmanGains+0x388>)
    17d0:	47a8      	blx	r5
    17d2:	0002      	movs	r2, r0
    17d4:	000b      	movs	r3, r1
    17d6:	0030      	movs	r0, r6
    17d8:	0039      	movs	r1, r7
    17da:	47a0      	blx	r4
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
    17dc:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    17de:	9b1d      	ldr	r3, [sp, #116]	; 0x74
        term[0][2] = phi[0][0] * pest[0][2] + phi[0][1] * pest[1][2] + phi[0][2] * pest[2][2];
    17e0:	9014      	str	r0, [sp, #80]	; 0x50
    17e2:	9115      	str	r1, [sp, #84]	; 0x54
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
    17e4:	9806      	ldr	r0, [sp, #24]
    17e6:	9907      	ldr	r1, [sp, #28]
    17e8:	47a8      	blx	r5
    17ea:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    17ec:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    17ee:	0006      	movs	r6, r0
    17f0:	000f      	movs	r7, r1
    17f2:	9808      	ldr	r0, [sp, #32]
    17f4:	9909      	ldr	r1, [sp, #36]	; 0x24
    17f6:	47a8      	blx	r5
    17f8:	0002      	movs	r2, r0
    17fa:	000b      	movs	r3, r1
    17fc:	0030      	movs	r0, r6
    17fe:	0039      	movs	r1, r7
    1800:	47a0      	blx	r4
    1802:	4a6f      	ldr	r2, [pc, #444]	; (19c0 <computeKalmanGains+0x37c>)
    1804:	0006      	movs	r6, r0
    1806:	000f      	movs	r7, r1
    1808:	9800      	ldr	r0, [sp, #0]
    180a:	9901      	ldr	r1, [sp, #4]
    180c:	4b6d      	ldr	r3, [pc, #436]	; (19c4 <computeKalmanGains+0x380>)
    180e:	47a8      	blx	r5
    1810:	0002      	movs	r2, r0
    1812:	000b      	movs	r3, r1
    1814:	0030      	movs	r0, r6
    1816:	0039      	movs	r1, r7
    1818:	47a0      	blx	r4
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
    181a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    181c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
        term[1][0] = phi[1][0] * pest[0][0] + phi[1][1] * pest[1][0] + phi[1][2] * pest[2][0];
    181e:	9018      	str	r0, [sp, #96]	; 0x60
    1820:	9119      	str	r1, [sp, #100]	; 0x64
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
    1822:	980a      	ldr	r0, [sp, #40]	; 0x28
    1824:	990b      	ldr	r1, [sp, #44]	; 0x2c
    1826:	47a8      	blx	r5
    1828:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    182a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    182c:	0006      	movs	r6, r0
    182e:	000f      	movs	r7, r1
    1830:	980e      	ldr	r0, [sp, #56]	; 0x38
    1832:	990f      	ldr	r1, [sp, #60]	; 0x3c
    1834:	47a8      	blx	r5
    1836:	0002      	movs	r2, r0
    1838:	000b      	movs	r3, r1
    183a:	0030      	movs	r0, r6
    183c:	0039      	movs	r1, r7
    183e:	47a0      	blx	r4
    1840:	4a5f      	ldr	r2, [pc, #380]	; (19c0 <computeKalmanGains+0x37c>)
    1842:	0006      	movs	r6, r0
    1844:	000f      	movs	r7, r1
    1846:	9810      	ldr	r0, [sp, #64]	; 0x40
    1848:	9911      	ldr	r1, [sp, #68]	; 0x44
    184a:	4b5e      	ldr	r3, [pc, #376]	; (19c4 <computeKalmanGains+0x380>)
    184c:	47a8      	blx	r5
    184e:	0002      	movs	r2, r0
    1850:	000b      	movs	r3, r1
    1852:	0030      	movs	r0, r6
    1854:	0039      	movs	r1, r7
    1856:	47a0      	blx	r4
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
    1858:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    185a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
        term[1][1] = phi[1][0] * pest[0][1] + phi[1][1] * pest[1][1] + phi[1][2] * pest[2][1];
    185c:	9026      	str	r0, [sp, #152]	; 0x98
    185e:	9127      	str	r1, [sp, #156]	; 0x9c
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
    1860:	980c      	ldr	r0, [sp, #48]	; 0x30
    1862:	990d      	ldr	r1, [sp, #52]	; 0x34
    1864:	47a8      	blx	r5
    1866:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    1868:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    186a:	0006      	movs	r6, r0
    186c:	000f      	movs	r7, r1
    186e:	9804      	ldr	r0, [sp, #16]
    1870:	9905      	ldr	r1, [sp, #20]
    1872:	47a8      	blx	r5
    1874:	0002      	movs	r2, r0
    1876:	000b      	movs	r3, r1
    1878:	0030      	movs	r0, r6
    187a:	0039      	movs	r1, r7
    187c:	47a0      	blx	r4
    187e:	4a50      	ldr	r2, [pc, #320]	; (19c0 <computeKalmanGains+0x37c>)
    1880:	0006      	movs	r6, r0
    1882:	000f      	movs	r7, r1
    1884:	9802      	ldr	r0, [sp, #8]
    1886:	9903      	ldr	r1, [sp, #12]
    1888:	4b4e      	ldr	r3, [pc, #312]	; (19c4 <computeKalmanGains+0x380>)
    188a:	47a8      	blx	r5
    188c:	0002      	movs	r2, r0
    188e:	000b      	movs	r3, r1
    1890:	0030      	movs	r0, r6
    1892:	0039      	movs	r1, r7
    1894:	47a0      	blx	r4
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
    1896:	9a20      	ldr	r2, [sp, #128]	; 0x80
    1898:	9b21      	ldr	r3, [sp, #132]	; 0x84
        term[1][2] = phi[1][0] * pest[0][2] + phi[1][1] * pest[1][2] + phi[1][2] * pest[2][2];
    189a:	9028      	str	r0, [sp, #160]	; 0xa0
    189c:	9129      	str	r1, [sp, #164]	; 0xa4
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
    189e:	9806      	ldr	r0, [sp, #24]
    18a0:	9907      	ldr	r1, [sp, #28]
    18a2:	47a8      	blx	r5
    18a4:	9a22      	ldr	r2, [sp, #136]	; 0x88
    18a6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    18a8:	0006      	movs	r6, r0
    18aa:	000f      	movs	r7, r1
    18ac:	9808      	ldr	r0, [sp, #32]
    18ae:	9909      	ldr	r1, [sp, #36]	; 0x24
    18b0:	47a8      	blx	r5
    18b2:	0002      	movs	r2, r0
    18b4:	000b      	movs	r3, r1
    18b6:	0030      	movs	r0, r6
    18b8:	0039      	movs	r1, r7
    18ba:	47a0      	blx	r4
    18bc:	9a24      	ldr	r2, [sp, #144]	; 0x90
    18be:	9b25      	ldr	r3, [sp, #148]	; 0x94
    18c0:	0006      	movs	r6, r0
    18c2:	000f      	movs	r7, r1
    18c4:	9800      	ldr	r0, [sp, #0]
    18c6:	9901      	ldr	r1, [sp, #4]
    18c8:	47a8      	blx	r5
    18ca:	0002      	movs	r2, r0
    18cc:	000b      	movs	r3, r1
    18ce:	0030      	movs	r0, r6
    18d0:	0039      	movs	r1, r7
    18d2:	47a0      	blx	r4
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
    18d4:	9a20      	ldr	r2, [sp, #128]	; 0x80
    18d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
        term[2][0] = phi[2][0] * pest[0][0] + phi[2][1] * pest[1][0] + phi[2][2] * pest[2][0];
    18d8:	902e      	str	r0, [sp, #184]	; 0xb8
    18da:	912f      	str	r1, [sp, #188]	; 0xbc
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
    18dc:	980a      	ldr	r0, [sp, #40]	; 0x28
    18de:	990b      	ldr	r1, [sp, #44]	; 0x2c
    18e0:	47a8      	blx	r5
    18e2:	9a22      	ldr	r2, [sp, #136]	; 0x88
    18e4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    18e6:	0006      	movs	r6, r0
    18e8:	000f      	movs	r7, r1
    18ea:	980e      	ldr	r0, [sp, #56]	; 0x38
    18ec:	990f      	ldr	r1, [sp, #60]	; 0x3c
    18ee:	47a8      	blx	r5
    18f0:	0002      	movs	r2, r0
    18f2:	000b      	movs	r3, r1
    18f4:	0030      	movs	r0, r6
    18f6:	0039      	movs	r1, r7
    18f8:	47a0      	blx	r4
    18fa:	9a24      	ldr	r2, [sp, #144]	; 0x90
    18fc:	9b25      	ldr	r3, [sp, #148]	; 0x94
    18fe:	0006      	movs	r6, r0
    1900:	000f      	movs	r7, r1
    1902:	9810      	ldr	r0, [sp, #64]	; 0x40
    1904:	9911      	ldr	r1, [sp, #68]	; 0x44
    1906:	47a8      	blx	r5
    1908:	0002      	movs	r2, r0
    190a:	000b      	movs	r3, r1
    190c:	0030      	movs	r0, r6
    190e:	0039      	movs	r1, r7
    1910:	47a0      	blx	r4
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];
    1912:	9a20      	ldr	r2, [sp, #128]	; 0x80
    1914:	9b21      	ldr	r3, [sp, #132]	; 0x84
        term[2][1] = phi[2][0] * pest[0][1] + phi[2][1] * pest[1][1] + phi[2][2] * pest[2][1];
    1916:	9006      	str	r0, [sp, #24]
    1918:	9107      	str	r1, [sp, #28]
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];
    191a:	980c      	ldr	r0, [sp, #48]	; 0x30
    191c:	990d      	ldr	r1, [sp, #52]	; 0x34
    191e:	47a8      	blx	r5
    1920:	9a22      	ldr	r2, [sp, #136]	; 0x88
    1922:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    1924:	0006      	movs	r6, r0
    1926:	000f      	movs	r7, r1
    1928:	9804      	ldr	r0, [sp, #16]
    192a:	9905      	ldr	r1, [sp, #20]
    192c:	47a8      	blx	r5
    192e:	0002      	movs	r2, r0
    1930:	000b      	movs	r3, r1
    1932:	0030      	movs	r0, r6
    1934:	0039      	movs	r1, r7
    1936:	47a0      	blx	r4
    1938:	9a24      	ldr	r2, [sp, #144]	; 0x90
    193a:	9b25      	ldr	r3, [sp, #148]	; 0x94
    193c:	0006      	movs	r6, r0
    193e:	000f      	movs	r7, r1
    1940:	9802      	ldr	r0, [sp, #8]
    1942:	9903      	ldr	r1, [sp, #12]
    1944:	47a8      	blx	r5
    1946:	0002      	movs	r2, r0
    1948:	000b      	movs	r3, r1
    194a:	0030      	movs	r0, r6
    194c:	0039      	movs	r1, r7
    194e:	47a0      	blx	r4
        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
    1950:	4a1b      	ldr	r2, [pc, #108]	; (19c0 <computeKalmanGains+0x37c>)
        term[2][2] = phi[2][0] * pest[0][2] + phi[2][1] * pest[1][2] + phi[2][2] * pest[2][2];
    1952:	9002      	str	r0, [sp, #8]
    1954:	9103      	str	r1, [sp, #12]
        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
    1956:	9812      	ldr	r0, [sp, #72]	; 0x48
    1958:	9913      	ldr	r1, [sp, #76]	; 0x4c
    195a:	4b1a      	ldr	r3, [pc, #104]	; (19c4 <computeKalmanGains+0x380>)
    195c:	47a8      	blx	r5
    195e:	9a16      	ldr	r2, [sp, #88]	; 0x58
    1960:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    1962:	47a0      	blx	r4
    1964:	4a18      	ldr	r2, [pc, #96]	; (19c8 <computeKalmanGains+0x384>)
    1966:	0006      	movs	r6, r0
    1968:	000f      	movs	r7, r1
    196a:	9814      	ldr	r0, [sp, #80]	; 0x50
    196c:	9915      	ldr	r1, [sp, #84]	; 0x54
    196e:	4b17      	ldr	r3, [pc, #92]	; (19cc <computeKalmanGains+0x388>)
    1970:	47a8      	blx	r5
    1972:	0002      	movs	r2, r0
    1974:	000b      	movs	r3, r1
    1976:	0030      	movs	r0, r6
    1978:	0039      	movs	r1, r7
    197a:	47a0      	blx	r4
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
    197c:	2200      	movs	r2, #0
        pestp[0][0] = term[0][0] * phit[0][0] + term[0][1] * phit[1][0] + term[0][2] * phit[2][0];
    197e:	9008      	str	r0, [sp, #32]
    1980:	9109      	str	r1, [sp, #36]	; 0x24
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
    1982:	9816      	ldr	r0, [sp, #88]	; 0x58
    1984:	9917      	ldr	r1, [sp, #92]	; 0x5c
    1986:	2300      	movs	r3, #0
    1988:	47a8      	blx	r5
    198a:	0006      	movs	r6, r0
    198c:	000f      	movs	r7, r1
    198e:	0002      	movs	r2, r0
    1990:	000b      	movs	r3, r1
    1992:	9812      	ldr	r0, [sp, #72]	; 0x48
    1994:	9913      	ldr	r1, [sp, #76]	; 0x4c
    1996:	47a0      	blx	r4
    1998:	4a09      	ldr	r2, [pc, #36]	; (19c0 <computeKalmanGains+0x37c>)
    199a:	9000      	str	r0, [sp, #0]
    199c:	9101      	str	r1, [sp, #4]
    199e:	9814      	ldr	r0, [sp, #80]	; 0x50
    19a0:	9915      	ldr	r1, [sp, #84]	; 0x54
    19a2:	4b08      	ldr	r3, [pc, #32]	; (19c4 <computeKalmanGains+0x380>)
    19a4:	47a8      	blx	r5
    19a6:	0002      	movs	r2, r0
    19a8:	000b      	movs	r3, r1
    19aa:	9800      	ldr	r0, [sp, #0]
    19ac:	9901      	ldr	r1, [sp, #4]
    19ae:	47a0      	blx	r4
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
    19b0:	2200      	movs	r2, #0
        pestp[0][1] = term[0][0] * phit[0][1] + term[0][1] * phit[1][1] + term[0][2] * phit[2][1];
    19b2:	9030      	str	r0, [sp, #192]	; 0xc0
    19b4:	9131      	str	r1, [sp, #196]	; 0xc4
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
    19b6:	9812      	ldr	r0, [sp, #72]	; 0x48
    19b8:	9913      	ldr	r1, [sp, #76]	; 0x4c
    19ba:	e017      	b.n	19ec <computeKalmanGains+0x3a8>
    19bc:	20000010 	.word	0x20000010
    19c0:	47ae147b 	.word	0x47ae147b
    19c4:	3f747ae1 	.word	0x3f747ae1
    19c8:	eb1c432d 	.word	0xeb1c432d
    19cc:	3eea36e2 	.word	0x3eea36e2
    19d0:	d2f1a9fc 	.word	0xd2f1a9fc
    19d4:	3f50624d 	.word	0x3f50624d
    19d8:	20000648 	.word	0x20000648
    19dc:	3ff00000 	.word	0x3ff00000
    19e0:	40220000 	.word	0x40220000
    19e4:	0000533d 	.word	0x0000533d
    19e8:	000044b5 	.word	0x000044b5
    19ec:	2300      	movs	r3, #0
    19ee:	47a8      	blx	r5
    19f0:	0032      	movs	r2, r6
    19f2:	003b      	movs	r3, r7
    19f4:	47a0      	blx	r4
    19f6:	9a14      	ldr	r2, [sp, #80]	; 0x50
    19f8:	9b15      	ldr	r3, [sp, #84]	; 0x54
    19fa:	47a0      	blx	r4
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
    19fc:	4ad9      	ldr	r2, [pc, #868]	; (1d64 <computeKalmanGains+0x720>)
        pestp[0][2] = term[0][0] * phit[0][2] + term[0][1] * phit[1][2] + term[0][2] * phit[2][2];
    19fe:	9112      	str	r1, [sp, #72]	; 0x48
    1a00:	9004      	str	r0, [sp, #16]
    1a02:	9116      	str	r1, [sp, #88]	; 0x58
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
    1a04:	4bd8      	ldr	r3, [pc, #864]	; (1d68 <computeKalmanGains+0x724>)
    1a06:	9826      	ldr	r0, [sp, #152]	; 0x98
    1a08:	9927      	ldr	r1, [sp, #156]	; 0x9c
    1a0a:	47a8      	blx	r5
    1a0c:	9a18      	ldr	r2, [sp, #96]	; 0x60
    1a0e:	9b19      	ldr	r3, [sp, #100]	; 0x64
    1a10:	47a0      	blx	r4
    1a12:	4ad6      	ldr	r2, [pc, #856]	; (1d6c <computeKalmanGains+0x728>)
    1a14:	0006      	movs	r6, r0
    1a16:	000f      	movs	r7, r1
    1a18:	9828      	ldr	r0, [sp, #160]	; 0xa0
    1a1a:	9929      	ldr	r1, [sp, #164]	; 0xa4
    1a1c:	4bd4      	ldr	r3, [pc, #848]	; (1d70 <computeKalmanGains+0x72c>)
    1a1e:	47a8      	blx	r5
    1a20:	0002      	movs	r2, r0
    1a22:	000b      	movs	r3, r1
    1a24:	0030      	movs	r0, r6
    1a26:	0039      	movs	r1, r7
    1a28:	47a0      	blx	r4
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
    1a2a:	2200      	movs	r2, #0
        pestp[1][0] = term[1][0] * phit[0][0] + term[1][1] * phit[1][0] + term[1][2] * phit[2][0];
    1a2c:	902a      	str	r0, [sp, #168]	; 0xa8
    1a2e:	912b      	str	r1, [sp, #172]	; 0xac
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
    1a30:	9818      	ldr	r0, [sp, #96]	; 0x60
    1a32:	9919      	ldr	r1, [sp, #100]	; 0x64
    1a34:	2300      	movs	r3, #0
    1a36:	47a8      	blx	r5
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
    1a38:	2200      	movs	r2, #0
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
    1a3a:	9032      	str	r0, [sp, #200]	; 0xc8
    1a3c:	9133      	str	r1, [sp, #204]	; 0xcc
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
    1a3e:	9826      	ldr	r0, [sp, #152]	; 0x98
    1a40:	9927      	ldr	r1, [sp, #156]	; 0x9c
    1a42:	2300      	movs	r3, #0
    1a44:	47a8      	blx	r5
    1a46:	9a32      	ldr	r2, [sp, #200]	; 0xc8
    1a48:	9b33      	ldr	r3, [sp, #204]	; 0xcc
    1a4a:	47a0      	blx	r4
    1a4c:	9a28      	ldr	r2, [sp, #160]	; 0xa0
    1a4e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
    1a50:	47a0      	blx	r4
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
    1a52:	4ac4      	ldr	r2, [pc, #784]	; (1d64 <computeKalmanGains+0x720>)
        pestp[1][2] = term[1][0] * phit[0][2] + term[1][1] * phit[1][2] + term[1][2] * phit[2][2];
    1a54:	902c      	str	r0, [sp, #176]	; 0xb0
    1a56:	912d      	str	r1, [sp, #180]	; 0xb4
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
    1a58:	9806      	ldr	r0, [sp, #24]
    1a5a:	9907      	ldr	r1, [sp, #28]
    1a5c:	4bc2      	ldr	r3, [pc, #776]	; (1d68 <computeKalmanGains+0x724>)
    1a5e:	47a8      	blx	r5
    1a60:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
    1a62:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
    1a64:	47a0      	blx	r4
    1a66:	4ac1      	ldr	r2, [pc, #772]	; (1d6c <computeKalmanGains+0x728>)
    1a68:	0006      	movs	r6, r0
    1a6a:	000f      	movs	r7, r1
    1a6c:	9802      	ldr	r0, [sp, #8]
    1a6e:	9903      	ldr	r1, [sp, #12]
    1a70:	4bbf      	ldr	r3, [pc, #764]	; (1d70 <computeKalmanGains+0x72c>)
    1a72:	47a8      	blx	r5
    1a74:	0002      	movs	r2, r0
    1a76:	000b      	movs	r3, r1
    1a78:	0030      	movs	r0, r6
    1a7a:	0039      	movs	r1, r7
    1a7c:	47a0      	blx	r4
        pestp[2][1] = term[2][0] * phit[0][1] + term[2][1] * phit[1][1] + term[2][2] * phit[2][1];
    1a7e:	2200      	movs	r2, #0
        pestp[2][0] = term[2][0] * phit[0][0] + term[2][1] * phit[1][0] + term[2][2] * phit[2][0];
    1a80:	9000      	str	r0, [sp, #0]
    1a82:	9101      	str	r1, [sp, #4]
        pestp[2][1] = term[2][0] * phit[0][1] + term[2][1] * phit[1][1] + term[2][2] * phit[2][1];
    1a84:	982e      	ldr	r0, [sp, #184]	; 0xb8
    1a86:	992f      	ldr	r1, [sp, #188]	; 0xbc
    1a88:	2300      	movs	r3, #0
    1a8a:	47a8      	blx	r5
    1a8c:	0006      	movs	r6, r0
    1a8e:	000f      	movs	r7, r1
    1a90:	0002      	movs	r2, r0
    1a92:	000b      	movs	r3, r1
    1a94:	9806      	ldr	r0, [sp, #24]
    1a96:	9907      	ldr	r1, [sp, #28]
    1a98:	47a0      	blx	r4
    1a9a:	4ab2      	ldr	r2, [pc, #712]	; (1d64 <computeKalmanGains+0x720>)
    1a9c:	900a      	str	r0, [sp, #40]	; 0x28
    1a9e:	910b      	str	r1, [sp, #44]	; 0x2c
    1aa0:	9802      	ldr	r0, [sp, #8]
    1aa2:	9903      	ldr	r1, [sp, #12]
    1aa4:	4bb0      	ldr	r3, [pc, #704]	; (1d68 <computeKalmanGains+0x724>)
    1aa6:	47a8      	blx	r5
    1aa8:	0002      	movs	r2, r0
    1aaa:	000b      	movs	r3, r1
    1aac:	980a      	ldr	r0, [sp, #40]	; 0x28
    1aae:	990b      	ldr	r1, [sp, #44]	; 0x2c
    1ab0:	47a0      	blx	r4
        pestp[2][2] = term[2][0] * phit[0][2] + term[2][1] * phit[1][2] + term[2][2] * phit[2][2];
    1ab2:	2200      	movs	r2, #0
        pestp[2][1] = term[2][0] * phit[0][1] + term[2][1] * phit[1][1] + term[2][2] * phit[2][1];
    1ab4:	9010      	str	r0, [sp, #64]	; 0x40
    1ab6:	9111      	str	r1, [sp, #68]	; 0x44
        pestp[2][2] = term[2][0] * phit[0][2] + term[2][1] * phit[1][2] + term[2][2] * phit[2][2];
    1ab8:	9806      	ldr	r0, [sp, #24]
    1aba:	9907      	ldr	r1, [sp, #28]
    1abc:	2300      	movs	r3, #0
    1abe:	47a8      	blx	r5
    1ac0:	0032      	movs	r2, r6
    1ac2:	003b      	movs	r3, r7
    1ac4:	47a0      	blx	r4
    1ac6:	9a02      	ldr	r2, [sp, #8]
    1ac8:	9b03      	ldr	r3, [sp, #12]
    1aca:	47a0      	blx	r4
        pestp[2][2] = pestp[2][2] + model_variance;
    1acc:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
    1ace:	9b3b      	ldr	r3, [sp, #236]	; 0xec
    1ad0:	47a0      	blx	r4
        det = (pestp[0][0]+altitude_variance)*(pestp[2][2] + acceleration_variance) - pestp[2][0] * pestp[0][2];
    1ad2:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
    1ad4:	9b3d      	ldr	r3, [sp, #244]	; 0xf4
        pestp[2][2] = pestp[2][2] + model_variance;
    1ad6:	9002      	str	r0, [sp, #8]
    1ad8:	9103      	str	r1, [sp, #12]
        det = (pestp[0][0]+altitude_variance)*(pestp[2][2] + acceleration_variance) - pestp[2][0] * pestp[0][2];
    1ada:	9808      	ldr	r0, [sp, #32]
    1adc:	9909      	ldr	r1, [sp, #36]	; 0x24
    1ade:	47a0      	blx	r4
    1ae0:	9a3e      	ldr	r2, [sp, #248]	; 0xf8
    1ae2:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
    1ae4:	900a      	str	r0, [sp, #40]	; 0x28
    1ae6:	910b      	str	r1, [sp, #44]	; 0x2c
    1ae8:	9802      	ldr	r0, [sp, #8]
    1aea:	9903      	ldr	r1, [sp, #12]
    1aec:	47a0      	blx	r4
    1aee:	9a00      	ldr	r2, [sp, #0]
    1af0:	9b01      	ldr	r3, [sp, #4]
    1af2:	900c      	str	r0, [sp, #48]	; 0x30
    1af4:	910d      	str	r1, [sp, #52]	; 0x34
    1af6:	9804      	ldr	r0, [sp, #16]
    1af8:	9916      	ldr	r1, [sp, #88]	; 0x58
    1afa:	47a8      	blx	r5
    1afc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1afe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1b00:	900e      	str	r0, [sp, #56]	; 0x38
    1b02:	910f      	str	r1, [sp, #60]	; 0x3c
    1b04:	980a      	ldr	r0, [sp, #40]	; 0x28
    1b06:	990b      	ldr	r1, [sp, #44]	; 0x2c
    1b08:	47a8      	blx	r5
    1b0a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    1b0c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1b0e:	4e99      	ldr	r6, [pc, #612]	; (1d74 <computeKalmanGains+0x730>)
    1b10:	47b0      	blx	r6

        kgain[0][0] = (pestp[0][0] * (pestp[2][2] + acceleration_variance) - pestp[0][2] * pestp[2][0])/det;
    1b12:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1b14:	9b0d      	ldr	r3, [sp, #52]	; 0x34
        det = (pestp[0][0]+altitude_variance)*(pestp[2][2] + acceleration_variance) - pestp[2][0] * pestp[0][2];
    1b16:	9006      	str	r0, [sp, #24]
    1b18:	9107      	str	r1, [sp, #28]
        kgain[0][0] = (pestp[0][0] * (pestp[2][2] + acceleration_variance) - pestp[0][2] * pestp[2][0])/det;
    1b1a:	9808      	ldr	r0, [sp, #32]
    1b1c:	9909      	ldr	r1, [sp, #36]	; 0x24
    1b1e:	47a8      	blx	r5
    1b20:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    1b22:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1b24:	47b0      	blx	r6
    1b26:	9a06      	ldr	r2, [sp, #24]
    1b28:	9b07      	ldr	r3, [sp, #28]
    1b2a:	4e93      	ldr	r6, [pc, #588]	; (1d78 <computeKalmanGains+0x734>)
    1b2c:	47b0      	blx	r6
    1b2e:	9034      	str	r0, [sp, #208]	; 0xd0
    1b30:	9135      	str	r1, [sp, #212]	; 0xd4
    1b32:	9a34      	ldr	r2, [sp, #208]	; 0xd0
    1b34:	9b35      	ldr	r3, [sp, #212]	; 0xd4
    1b36:	4991      	ldr	r1, [pc, #580]	; (1d7c <computeKalmanGains+0x738>)
    1b38:	600a      	str	r2, [r1, #0]
    1b3a:	604b      	str	r3, [r1, #4]
        kgain[0][1] = (pestp[0][0] * (-pestp[0][2]) + pestp[0][2] * (pestp[0][0] + altitude_variance))/det;
    1b3c:	9808      	ldr	r0, [sp, #32]
    1b3e:	9909      	ldr	r1, [sp, #36]	; 0x24
    1b40:	2280      	movs	r2, #128	; 0x80
    1b42:	0612      	lsls	r2, r2, #24
    1b44:	4694      	mov	ip, r2
    1b46:	9b12      	ldr	r3, [sp, #72]	; 0x48
    1b48:	9a04      	ldr	r2, [sp, #16]
    1b4a:	4463      	add	r3, ip
    1b4c:	932e      	str	r3, [sp, #184]	; 0xb8
    1b4e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    1b50:	47a8      	blx	r5
    1b52:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    1b54:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1b56:	0006      	movs	r6, r0
    1b58:	000f      	movs	r7, r1
    1b5a:	9804      	ldr	r0, [sp, #16]
    1b5c:	9916      	ldr	r1, [sp, #88]	; 0x58
    1b5e:	47a8      	blx	r5
    1b60:	0002      	movs	r2, r0
    1b62:	000b      	movs	r3, r1
    1b64:	0030      	movs	r0, r6
    1b66:	0039      	movs	r1, r7
    1b68:	47a0      	blx	r4
    1b6a:	9a06      	ldr	r2, [sp, #24]
    1b6c:	9b07      	ldr	r3, [sp, #28]
    1b6e:	4e82      	ldr	r6, [pc, #520]	; (1d78 <computeKalmanGains+0x734>)
    1b70:	47b0      	blx	r6
    1b72:	900e      	str	r0, [sp, #56]	; 0x38
    1b74:	910f      	str	r1, [sp, #60]	; 0x3c
    1b76:	4981      	ldr	r1, [pc, #516]	; (1d7c <computeKalmanGains+0x738>)
    1b78:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    1b7a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1b7c:	608a      	str	r2, [r1, #8]
    1b7e:	60cb      	str	r3, [r1, #12]
        kgain[1][0] = (pestp[1][0] * (pestp[2][2] + acceleration_variance) - pestp[1][2] * pestp[2][0])/det;
    1b80:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1b82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1b84:	982a      	ldr	r0, [sp, #168]	; 0xa8
    1b86:	992b      	ldr	r1, [sp, #172]	; 0xac
    1b88:	47a8      	blx	r5
    1b8a:	9a00      	ldr	r2, [sp, #0]
    1b8c:	9b01      	ldr	r3, [sp, #4]
    1b8e:	0006      	movs	r6, r0
    1b90:	000f      	movs	r7, r1
    1b92:	982c      	ldr	r0, [sp, #176]	; 0xb0
    1b94:	992d      	ldr	r1, [sp, #180]	; 0xb4
    1b96:	47a8      	blx	r5
    1b98:	0002      	movs	r2, r0
    1b9a:	000b      	movs	r3, r1
    1b9c:	0030      	movs	r0, r6
    1b9e:	0039      	movs	r1, r7
    1ba0:	4e74      	ldr	r6, [pc, #464]	; (1d74 <computeKalmanGains+0x730>)
    1ba2:	47b0      	blx	r6
    1ba4:	9a06      	ldr	r2, [sp, #24]
    1ba6:	9b07      	ldr	r3, [sp, #28]
    1ba8:	4e73      	ldr	r6, [pc, #460]	; (1d78 <computeKalmanGains+0x734>)
    1baa:	47b0      	blx	r6
    1bac:	0002      	movs	r2, r0
    1bae:	000b      	movs	r3, r1
    1bb0:	9139      	str	r1, [sp, #228]	; 0xe4
    1bb2:	4972      	ldr	r1, [pc, #456]	; (1d7c <computeKalmanGains+0x738>)
    1bb4:	9018      	str	r0, [sp, #96]	; 0x60
    1bb6:	610a      	str	r2, [r1, #16]
    1bb8:	614b      	str	r3, [r1, #20]
        kgain[1][1] = (pestp[1][0] * (-pestp[0][2]) + pestp[1][2] * (pestp[0][0] + altitude_variance))/det;
    1bba:	982a      	ldr	r0, [sp, #168]	; 0xa8
    1bbc:	992b      	ldr	r1, [sp, #172]	; 0xac
    1bbe:	9a04      	ldr	r2, [sp, #16]
    1bc0:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    1bc2:	47a8      	blx	r5
    1bc4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    1bc6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1bc8:	0006      	movs	r6, r0
    1bca:	000f      	movs	r7, r1
    1bcc:	982c      	ldr	r0, [sp, #176]	; 0xb0
    1bce:	992d      	ldr	r1, [sp, #180]	; 0xb4
    1bd0:	47a8      	blx	r5
    1bd2:	0002      	movs	r2, r0
    1bd4:	000b      	movs	r3, r1
    1bd6:	0030      	movs	r0, r6
    1bd8:	0039      	movs	r1, r7
    1bda:	47a0      	blx	r4
    1bdc:	9a06      	ldr	r2, [sp, #24]
    1bde:	9b07      	ldr	r3, [sp, #28]
    1be0:	4e65      	ldr	r6, [pc, #404]	; (1d78 <computeKalmanGains+0x734>)
    1be2:	47b0      	blx	r6
    1be4:	9012      	str	r0, [sp, #72]	; 0x48
    1be6:	9113      	str	r1, [sp, #76]	; 0x4c
    1be8:	9a12      	ldr	r2, [sp, #72]	; 0x48
    1bea:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    1bec:	4963      	ldr	r1, [pc, #396]	; (1d7c <computeKalmanGains+0x738>)
    1bee:	618a      	str	r2, [r1, #24]
    1bf0:	61cb      	str	r3, [r1, #28]
        kgain[2][0] = (pestp[2][0] * (pestp[2][2] + acceleration_variance) - pestp[2][2] * pestp[2][0])/det;
    1bf2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1bf4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1bf6:	9800      	ldr	r0, [sp, #0]
    1bf8:	9901      	ldr	r1, [sp, #4]
    1bfa:	47a8      	blx	r5
    1bfc:	9a02      	ldr	r2, [sp, #8]
    1bfe:	9b03      	ldr	r3, [sp, #12]
    1c00:	0006      	movs	r6, r0
    1c02:	000f      	movs	r7, r1
    1c04:	9800      	ldr	r0, [sp, #0]
    1c06:	9901      	ldr	r1, [sp, #4]
    1c08:	47a8      	blx	r5
    1c0a:	0002      	movs	r2, r0
    1c0c:	000b      	movs	r3, r1
    1c0e:	0030      	movs	r0, r6
    1c10:	0039      	movs	r1, r7
    1c12:	4e58      	ldr	r6, [pc, #352]	; (1d74 <computeKalmanGains+0x730>)
    1c14:	47b0      	blx	r6
    1c16:	9a06      	ldr	r2, [sp, #24]
    1c18:	9b07      	ldr	r3, [sp, #28]
    1c1a:	4e57      	ldr	r6, [pc, #348]	; (1d78 <computeKalmanGains+0x734>)
    1c1c:	47b0      	blx	r6
    1c1e:	9014      	str	r0, [sp, #80]	; 0x50
    1c20:	9115      	str	r1, [sp, #84]	; 0x54
    1c22:	9a14      	ldr	r2, [sp, #80]	; 0x50
    1c24:	9b15      	ldr	r3, [sp, #84]	; 0x54
    1c26:	4955      	ldr	r1, [pc, #340]	; (1d7c <computeKalmanGains+0x738>)
    1c28:	620a      	str	r2, [r1, #32]
    1c2a:	624b      	str	r3, [r1, #36]	; 0x24
        kgain[2][1] = (pestp[2][0] * (-pestp[0][2]) + pestp[2][2] * (pestp[0][0] + altitude_variance))/det;
    1c2c:	9800      	ldr	r0, [sp, #0]
    1c2e:	9901      	ldr	r1, [sp, #4]
    1c30:	9a04      	ldr	r2, [sp, #16]
    1c32:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    1c34:	47a8      	blx	r5
    1c36:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    1c38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1c3a:	0006      	movs	r6, r0
    1c3c:	000f      	movs	r7, r1
    1c3e:	9802      	ldr	r0, [sp, #8]
    1c40:	9903      	ldr	r1, [sp, #12]
    1c42:	47a8      	blx	r5
    1c44:	0002      	movs	r2, r0
    1c46:	000b      	movs	r3, r1
    1c48:	0030      	movs	r0, r6
    1c4a:	0039      	movs	r1, r7
    1c4c:	47a0      	blx	r4
    1c4e:	9a06      	ldr	r2, [sp, #24]
    1c50:	9b07      	ldr	r3, [sp, #28]
    1c52:	4e49      	ldr	r6, [pc, #292]	; (1d78 <computeKalmanGains+0x734>)
    1c54:	47b0      	blx	r6
    1c56:	9036      	str	r0, [sp, #216]	; 0xd8
    1c58:	9137      	str	r1, [sp, #220]	; 0xdc
    1c5a:	9a36      	ldr	r2, [sp, #216]	; 0xd8
    1c5c:	9b37      	ldr	r3, [sp, #220]	; 0xdc
    1c5e:	4947      	ldr	r1, [pc, #284]	; (1d7c <computeKalmanGains+0x738>)

        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
    1c60:	4e44      	ldr	r6, [pc, #272]	; (1d74 <computeKalmanGains+0x730>)
        kgain[2][1] = (pestp[2][0] * (-pestp[0][2]) + pestp[2][2] * (pestp[0][0] + altitude_variance))/det;
    1c62:	628a      	str	r2, [r1, #40]	; 0x28
    1c64:	62cb      	str	r3, [r1, #44]	; 0x2c
        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
    1c66:	9a34      	ldr	r2, [sp, #208]	; 0xd0
    1c68:	9b35      	ldr	r3, [sp, #212]	; 0xd4
    1c6a:	2000      	movs	r0, #0
    1c6c:	4944      	ldr	r1, [pc, #272]	; (1d80 <computeKalmanGains+0x73c>)
    1c6e:	47b0      	blx	r6
    1c70:	0002      	movs	r2, r0
    1c72:	000b      	movs	r3, r1
    1c74:	900c      	str	r0, [sp, #48]	; 0x30
    1c76:	910d      	str	r1, [sp, #52]	; 0x34
    1c78:	9808      	ldr	r0, [sp, #32]
    1c7a:	9909      	ldr	r1, [sp, #36]	; 0x24
    1c7c:	47a8      	blx	r5
    1c7e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    1c80:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1c82:	0006      	movs	r6, r0
    1c84:	000f      	movs	r7, r1
    1c86:	9800      	ldr	r0, [sp, #0]
    1c88:	9901      	ldr	r1, [sp, #4]
    1c8a:	47a8      	blx	r5
    1c8c:	0002      	movs	r2, r0
    1c8e:	000b      	movs	r3, r1
    1c90:	0030      	movs	r0, r6
    1c92:	0039      	movs	r1, r7
    1c94:	4e37      	ldr	r6, [pc, #220]	; (1d74 <computeKalmanGains+0x730>)
    1c96:	47b0      	blx	r6
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
    1c98:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1c9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
        pest[0][0] = pestp[0][0] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][0];
    1c9c:	9006      	str	r0, [sp, #24]
    1c9e:	9107      	str	r1, [sp, #28]
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
    1ca0:	9830      	ldr	r0, [sp, #192]	; 0xc0
    1ca2:	9931      	ldr	r1, [sp, #196]	; 0xc4
    1ca4:	47a8      	blx	r5
    1ca6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    1ca8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1caa:	0006      	movs	r6, r0
    1cac:	000f      	movs	r7, r1
    1cae:	9810      	ldr	r0, [sp, #64]	; 0x40
    1cb0:	9911      	ldr	r1, [sp, #68]	; 0x44
    1cb2:	47a8      	blx	r5
    1cb4:	0002      	movs	r2, r0
    1cb6:	000b      	movs	r3, r1
    1cb8:	0030      	movs	r0, r6
    1cba:	0039      	movs	r1, r7
    1cbc:	4e2d      	ldr	r6, [pc, #180]	; (1d74 <computeKalmanGains+0x730>)
    1cbe:	47b0      	blx	r6
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
    1cc0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    1cc2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
        pest[0][1] = pestp[0][1] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][1];
    1cc4:	900a      	str	r0, [sp, #40]	; 0x28
    1cc6:	910b      	str	r1, [sp, #44]	; 0x2c
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
    1cc8:	9804      	ldr	r0, [sp, #16]
    1cca:	9916      	ldr	r1, [sp, #88]	; 0x58
    1ccc:	47a8      	blx	r5
    1cce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    1cd0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1cd2:	0006      	movs	r6, r0
    1cd4:	000f      	movs	r7, r1
    1cd6:	9802      	ldr	r0, [sp, #8]
    1cd8:	9903      	ldr	r1, [sp, #12]
    1cda:	47a8      	blx	r5
    1cdc:	0002      	movs	r2, r0
    1cde:	000b      	movs	r3, r1
    1ce0:	0030      	movs	r0, r6
    1ce2:	0039      	movs	r1, r7
    1ce4:	4e23      	ldr	r6, [pc, #140]	; (1d74 <computeKalmanGains+0x730>)
    1ce6:	47b0      	blx	r6
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
    1ce8:	2280      	movs	r2, #128	; 0x80
    1cea:	0612      	lsls	r2, r2, #24
    1cec:	4694      	mov	ip, r2
    1cee:	9b39      	ldr	r3, [sp, #228]	; 0xe4
    1cf0:	9a18      	ldr	r2, [sp, #96]	; 0x60
    1cf2:	4463      	add	r3, ip
    1cf4:	932e      	str	r3, [sp, #184]	; 0xb8
    1cf6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
        pest[0][2] = pestp[0][2] * (1.0 - kgain[0][0]) - kgain[0][1]*pestp[2][2];
    1cf8:	900c      	str	r0, [sp, #48]	; 0x30
    1cfa:	910d      	str	r1, [sp, #52]	; 0x34
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
    1cfc:	9808      	ldr	r0, [sp, #32]
    1cfe:	9909      	ldr	r1, [sp, #36]	; 0x24
    1d00:	47a8      	blx	r5
    1d02:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
    1d04:	9b2b      	ldr	r3, [sp, #172]	; 0xac
    1d06:	47a0      	blx	r4
    1d08:	9a12      	ldr	r2, [sp, #72]	; 0x48
    1d0a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    1d0c:	0006      	movs	r6, r0
    1d0e:	000f      	movs	r7, r1
    1d10:	9800      	ldr	r0, [sp, #0]
    1d12:	9901      	ldr	r1, [sp, #4]
    1d14:	47a8      	blx	r5
    1d16:	0002      	movs	r2, r0
    1d18:	000b      	movs	r3, r1
    1d1a:	0030      	movs	r0, r6
    1d1c:	0039      	movs	r1, r7
    1d1e:	4e15      	ldr	r6, [pc, #84]	; (1d74 <computeKalmanGains+0x730>)
    1d20:	47b0      	blx	r6
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
    1d22:	9a32      	ldr	r2, [sp, #200]	; 0xc8
    1d24:	9b33      	ldr	r3, [sp, #204]	; 0xcc
        pest[1][0] = pestp[0][0] * (-kgain[1][0]) + pestp[1][0] - kgain[1][1]*pestp[2][0];
    1d26:	9008      	str	r0, [sp, #32]
    1d28:	9109      	str	r1, [sp, #36]	; 0x24
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
    1d2a:	9826      	ldr	r0, [sp, #152]	; 0x98
    1d2c:	9927      	ldr	r1, [sp, #156]	; 0x9c
    1d2e:	47a0      	blx	r4
    1d30:	4a0c      	ldr	r2, [pc, #48]	; (1d64 <computeKalmanGains+0x720>)
    1d32:	0006      	movs	r6, r0
    1d34:	000f      	movs	r7, r1
    1d36:	9828      	ldr	r0, [sp, #160]	; 0xa0
    1d38:	9929      	ldr	r1, [sp, #164]	; 0xa4
    1d3a:	4b0b      	ldr	r3, [pc, #44]	; (1d68 <computeKalmanGains+0x724>)
    1d3c:	47a8      	blx	r5
    1d3e:	0002      	movs	r2, r0
    1d40:	000b      	movs	r3, r1
    1d42:	0030      	movs	r0, r6
    1d44:	0039      	movs	r1, r7
    1d46:	47a0      	blx	r4
        pest[1][1] = pestp[0][1] * (-kgain[1][0]) + pestp[1][1] - kgain[1][1]*pestp[2][1];
    1d48:	9a18      	ldr	r2, [sp, #96]	; 0x60
        pestp[1][1] = term[1][0] * phit[0][1] + term[1][1] * phit[1][1] + term[1][2] * phit[2][1];
    1d4a:	0006      	movs	r6, r0
    1d4c:	000f      	movs	r7, r1
        pest[1][1] = pestp[0][1] * (-kgain[1][0]) + pestp[1][1] - kgain[1][1]*pestp[2][1];
    1d4e:	9830      	ldr	r0, [sp, #192]	; 0xc0
    1d50:	9931      	ldr	r1, [sp, #196]	; 0xc4
    1d52:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    1d54:	47a8      	blx	r5
    1d56:	0002      	movs	r2, r0
    1d58:	000b      	movs	r3, r1
    1d5a:	0030      	movs	r0, r6
    1d5c:	0039      	movs	r1, r7
    1d5e:	47a0      	blx	r4
    1d60:	e010      	b.n	1d84 <computeKalmanGains+0x740>
    1d62:	46c0      	nop			; (mov r8, r8)
    1d64:	47ae147b 	.word	0x47ae147b
    1d68:	3f747ae1 	.word	0x3f747ae1
    1d6c:	eb1c432d 	.word	0xeb1c432d
    1d70:	3eea36e2 	.word	0x3eea36e2
    1d74:	0000583d 	.word	0x0000583d
    1d78:	00004ad5 	.word	0x00004ad5
    1d7c:	20000648 	.word	0x20000648
    1d80:	3ff00000 	.word	0x3ff00000
    1d84:	9a12      	ldr	r2, [sp, #72]	; 0x48
    1d86:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    1d88:	0006      	movs	r6, r0
    1d8a:	000f      	movs	r7, r1
    1d8c:	9810      	ldr	r0, [sp, #64]	; 0x40
    1d8e:	9911      	ldr	r1, [sp, #68]	; 0x44
    1d90:	47a8      	blx	r5
    1d92:	0002      	movs	r2, r0
    1d94:	000b      	movs	r3, r1
    1d96:	0030      	movs	r0, r6
    1d98:	0039      	movs	r1, r7
    1d9a:	4e4c      	ldr	r6, [pc, #304]	; (1ecc <computeKalmanGains+0x888>)
    1d9c:	47b0      	blx	r6
        pest[1][2] = pestp[0][2] * (-kgain[1][0]) + pestp[1][2] - kgain[1][1]*pestp[2][2];
    1d9e:	9a18      	ldr	r2, [sp, #96]	; 0x60
        pest[1][1] = pestp[0][1] * (-kgain[1][0]) + pestp[1][1] - kgain[1][1]*pestp[2][1];
    1da0:	900e      	str	r0, [sp, #56]	; 0x38
    1da2:	910f      	str	r1, [sp, #60]	; 0x3c
        pest[1][2] = pestp[0][2] * (-kgain[1][0]) + pestp[1][2] - kgain[1][1]*pestp[2][2];
    1da4:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    1da6:	9804      	ldr	r0, [sp, #16]
    1da8:	9916      	ldr	r1, [sp, #88]	; 0x58
    1daa:	47a8      	blx	r5
    1dac:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
    1dae:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    1db0:	47a0      	blx	r4
    1db2:	9a12      	ldr	r2, [sp, #72]	; 0x48
    1db4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    1db6:	0006      	movs	r6, r0
    1db8:	000f      	movs	r7, r1
    1dba:	9802      	ldr	r0, [sp, #8]
    1dbc:	9903      	ldr	r1, [sp, #12]
    1dbe:	47a8      	blx	r5
    1dc0:	4c42      	ldr	r4, [pc, #264]	; (1ecc <computeKalmanGains+0x888>)
    1dc2:	0002      	movs	r2, r0
    1dc4:	000b      	movs	r3, r1
    1dc6:	0030      	movs	r0, r6
    1dc8:	0039      	movs	r1, r7
    1dca:	47a0      	blx	r4
        pest[2][0] = (1.0 - kgain[2][1]) * pestp[2][0] - kgain[2][0] * pestp[2][0];
    1dcc:	9a36      	ldr	r2, [sp, #216]	; 0xd8
    1dce:	9b37      	ldr	r3, [sp, #220]	; 0xdc
        pest[1][2] = pestp[0][2] * (-kgain[1][0]) + pestp[1][2] - kgain[1][1]*pestp[2][2];
    1dd0:	9004      	str	r0, [sp, #16]
    1dd2:	9105      	str	r1, [sp, #20]
        pest[2][0] = (1.0 - kgain[2][1]) * pestp[2][0] - kgain[2][0] * pestp[2][0];
    1dd4:	2000      	movs	r0, #0
    1dd6:	493e      	ldr	r1, [pc, #248]	; (1ed0 <computeKalmanGains+0x88c>)
    1dd8:	47a0      	blx	r4
    1dda:	0002      	movs	r2, r0
    1ddc:	000b      	movs	r3, r1
    1dde:	9012      	str	r0, [sp, #72]	; 0x48
    1de0:	9113      	str	r1, [sp, #76]	; 0x4c
    1de2:	9800      	ldr	r0, [sp, #0]
    1de4:	9901      	ldr	r1, [sp, #4]
    1de6:	47a8      	blx	r5
    1de8:	9a14      	ldr	r2, [sp, #80]	; 0x50
    1dea:	9b15      	ldr	r3, [sp, #84]	; 0x54
    1dec:	0006      	movs	r6, r0
    1dee:	000f      	movs	r7, r1
    1df0:	9800      	ldr	r0, [sp, #0]
    1df2:	9901      	ldr	r1, [sp, #4]
    1df4:	47a8      	blx	r5
    1df6:	0002      	movs	r2, r0
    1df8:	000b      	movs	r3, r1
    1dfa:	0030      	movs	r0, r6
    1dfc:	0039      	movs	r1, r7
    1dfe:	47a0      	blx	r4
    1e00:	9000      	str	r0, [sp, #0]
    1e02:	9101      	str	r1, [sp, #4]
        pest[2][1] = (1.0 - kgain[2][1]) * pestp[2][1] - kgain[2][0] * pestp[2][1];
    1e04:	9a12      	ldr	r2, [sp, #72]	; 0x48
    1e06:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    1e08:	9810      	ldr	r0, [sp, #64]	; 0x40
    1e0a:	9911      	ldr	r1, [sp, #68]	; 0x44
    1e0c:	47a8      	blx	r5
    1e0e:	9a14      	ldr	r2, [sp, #80]	; 0x50
    1e10:	9b15      	ldr	r3, [sp, #84]	; 0x54
    1e12:	0006      	movs	r6, r0
    1e14:	000f      	movs	r7, r1
    1e16:	9810      	ldr	r0, [sp, #64]	; 0x40
    1e18:	9911      	ldr	r1, [sp, #68]	; 0x44
    1e1a:	47a8      	blx	r5
    1e1c:	0002      	movs	r2, r0
    1e1e:	000b      	movs	r3, r1
    1e20:	0030      	movs	r0, r6
    1e22:	0039      	movs	r1, r7
    1e24:	47a0      	blx	r4
        pest[2][2] = (1.0 - kgain[2][1]) * pestp[2][2] - kgain[2][0] * pestp[2][2];
    1e26:	9a12      	ldr	r2, [sp, #72]	; 0x48
    1e28:	9b13      	ldr	r3, [sp, #76]	; 0x4c
        pest[2][1] = (1.0 - kgain[2][1]) * pestp[2][1] - kgain[2][0] * pestp[2][1];
    1e2a:	9010      	str	r0, [sp, #64]	; 0x40
    1e2c:	9111      	str	r1, [sp, #68]	; 0x44
        pest[2][2] = (1.0 - kgain[2][1]) * pestp[2][2] - kgain[2][0] * pestp[2][2];
    1e2e:	9802      	ldr	r0, [sp, #8]
    1e30:	9903      	ldr	r1, [sp, #12]
    1e32:	47a8      	blx	r5
    1e34:	9a14      	ldr	r2, [sp, #80]	; 0x50
    1e36:	9b15      	ldr	r3, [sp, #84]	; 0x54
    1e38:	000f      	movs	r7, r1
    1e3a:	0006      	movs	r6, r0
    1e3c:	9802      	ldr	r0, [sp, #8]
    1e3e:	9903      	ldr	r1, [sp, #12]
    1e40:	47a8      	blx	r5
    1e42:	000b      	movs	r3, r1
    1e44:	0002      	movs	r2, r0
    1e46:	0039      	movs	r1, r7
    1e48:	0030      	movs	r0, r6
    1e4a:	47a0      	blx	r4
         * time through the mill. Because I have noticed very early convergance
         * in a few cases (< 20 iterations) I am delaying this for at least
         * 100 iterations.
         */
        notdone = 0;
        k++;
    1e4c:	9b38      	ldr	r3, [sp, #224]	; 0xe0
    1e4e:	2510      	movs	r5, #16
    1e50:	3301      	adds	r3, #1
    1e52:	9338      	str	r3, [sp, #224]	; 0xe0
        notdone = 0;
    1e54:	2300      	movs	r3, #0
        pest[2][2] = (1.0 - kgain[2][1]) * pestp[2][2] - kgain[2][0] * pestp[2][2];
    1e56:	9002      	str	r0, [sp, #8]
    1e58:	9103      	str	r1, [sp, #12]
        notdone = 0;
    1e5a:	001f      	movs	r7, r3
        for( i = 0; i <= 2; i++)
            for( j = 0; j <= 1; j++) {
                if( (kgain[i][j] - lastkgain[i][j])/lastkgain[i][j] > 0.00001)
    1e5c:	4b1d      	ldr	r3, [pc, #116]	; (1ed4 <computeKalmanGains+0x890>)
    1e5e:	9426      	str	r4, [sp, #152]	; 0x98
    1e60:	9318      	str	r3, [sp, #96]	; 0x60
    1e62:	002c      	movs	r4, r5
    1e64:	3c10      	subs	r4, #16
    1e66:	9b18      	ldr	r3, [sp, #96]	; 0x60
    1e68:	9e26      	ldr	r6, [sp, #152]	; 0x98
    1e6a:	18e3      	adds	r3, r4, r3
    1e6c:	681a      	ldr	r2, [r3, #0]
    1e6e:	685b      	ldr	r3, [r3, #4]
    1e70:	9212      	str	r2, [sp, #72]	; 0x48
    1e72:	9313      	str	r3, [sp, #76]	; 0x4c
    1e74:	9812      	ldr	r0, [sp, #72]	; 0x48
    1e76:	9913      	ldr	r1, [sp, #76]	; 0x4c
    1e78:	aa40      	add	r2, sp, #256	; 0x100
    1e7a:	18a3      	adds	r3, r4, r2
    1e7c:	9316      	str	r3, [sp, #88]	; 0x58
    1e7e:	681a      	ldr	r2, [r3, #0]
    1e80:	685b      	ldr	r3, [r3, #4]
    1e82:	9214      	str	r2, [sp, #80]	; 0x50
    1e84:	9315      	str	r3, [sp, #84]	; 0x54
    1e86:	47b0      	blx	r6
    1e88:	9a14      	ldr	r2, [sp, #80]	; 0x50
    1e8a:	9b15      	ldr	r3, [sp, #84]	; 0x54
    1e8c:	4e12      	ldr	r6, [pc, #72]	; (1ed8 <computeKalmanGains+0x894>)
    1e8e:	47b0      	blx	r6
    1e90:	4b12      	ldr	r3, [pc, #72]	; (1edc <computeKalmanGains+0x898>)
    1e92:	4a13      	ldr	r2, [pc, #76]	; (1ee0 <computeKalmanGains+0x89c>)
    1e94:	4e13      	ldr	r6, [pc, #76]	; (1ee4 <computeKalmanGains+0x8a0>)
    1e96:	47b0      	blx	r6
                    notdone++;
    1e98:	1e43      	subs	r3, r0, #1
    1e9a:	4198      	sbcs	r0, r3
                lastkgain[i][j] = kgain[i][j];
    1e9c:	9916      	ldr	r1, [sp, #88]	; 0x58
                    notdone++;
    1e9e:	183b      	adds	r3, r7, r0
    1ea0:	3408      	adds	r4, #8
    1ea2:	001f      	movs	r7, r3
                lastkgain[i][j] = kgain[i][j];
    1ea4:	9a12      	ldr	r2, [sp, #72]	; 0x48
    1ea6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    1ea8:	600a      	str	r2, [r1, #0]
    1eaa:	604b      	str	r3, [r1, #4]
            for( j = 0; j <= 1; j++) {
    1eac:	42a5      	cmp	r5, r4
    1eae:	d1da      	bne.n	1e66 <computeKalmanGains+0x822>
    1eb0:	3510      	adds	r5, #16
        for( i = 0; i <= 2; i++)
    1eb2:	2d40      	cmp	r5, #64	; 0x40
    1eb4:	d1d5      	bne.n	1e62 <computeKalmanGains+0x81e>
            }
        if( notdone || k < 100)
    1eb6:	2f00      	cmp	r7, #0
    1eb8:	d001      	beq.n	1ebe <computeKalmanGains+0x87a>
    1eba:	f7ff fc32 	bl	1722 <computeKalmanGains+0xde>
    1ebe:	9b38      	ldr	r3, [sp, #224]	; 0xe0
    1ec0:	2b63      	cmp	r3, #99	; 0x63
    1ec2:	dc01      	bgt.n	1ec8 <computeKalmanGains+0x884>
    1ec4:	f7ff fc2d 	bl	1722 <computeKalmanGains+0xde>
            continue;
        else
            break;
    }
}
    1ec8:	b04d      	add	sp, #308	; 0x134
    1eca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1ecc:	0000583d 	.word	0x0000583d
    1ed0:	3ff00000 	.word	0x3ff00000
    1ed4:	20000648 	.word	0x20000648
    1ed8:	00004ad5 	.word	0x00004ad5
    1edc:	3ee4f8b5 	.word	0x3ee4f8b5
    1ee0:	88e368f1 	.word	0x88e368f1
    1ee4:	0000417d 	.word	0x0000417d

00001ee8 <KalmanBaroUpdate>:

void KalmanBaroUpdate(double alt_inovation) {
    1ee8:	b5f0      	push	{r4, r5, r6, r7, lr}

    /* Propagate state */
    estp[0] = phi[0][0] * altitude + phi[0][1] * velocity;
    1eea:	4b3f      	ldr	r3, [pc, #252]	; (1fe8 <KalmanBaroUpdate+0x100>)
void KalmanBaroUpdate(double alt_inovation) {
    1eec:	b08b      	sub	sp, #44	; 0x2c
    estp[0] = phi[0][0] * altitude + phi[0][1] * velocity;
    1eee:	685c      	ldr	r4, [r3, #4]
    1ef0:	681b      	ldr	r3, [r3, #0]
    1ef2:	9300      	str	r3, [sp, #0]
    1ef4:	9401      	str	r4, [sp, #4]
    1ef6:	4b3d      	ldr	r3, [pc, #244]	; (1fec <KalmanBaroUpdate+0x104>)
    1ef8:	4d3d      	ldr	r5, [pc, #244]	; (1ff0 <KalmanBaroUpdate+0x108>)
    1efa:	685c      	ldr	r4, [r3, #4]
    1efc:	681b      	ldr	r3, [r3, #0]
    1efe:	9302      	str	r3, [sp, #8]
    1f00:	9403      	str	r4, [sp, #12]
    1f02:	4c3c      	ldr	r4, [pc, #240]	; (1ff4 <KalmanBaroUpdate+0x10c>)
void KalmanBaroUpdate(double alt_inovation) {
    1f04:	9004      	str	r0, [sp, #16]
    1f06:	9105      	str	r1, [sp, #20]
    estp[0] = phi[0][0] * altitude + phi[0][1] * velocity;
    1f08:	6822      	ldr	r2, [r4, #0]
    1f0a:	6863      	ldr	r3, [r4, #4]
    1f0c:	9800      	ldr	r0, [sp, #0]
    1f0e:	9901      	ldr	r1, [sp, #4]
    1f10:	47a8      	blx	r5
    1f12:	68a2      	ldr	r2, [r4, #8]
    1f14:	68e3      	ldr	r3, [r4, #12]
    1f16:	0006      	movs	r6, r0
    1f18:	000f      	movs	r7, r1
    1f1a:	9802      	ldr	r0, [sp, #8]
    1f1c:	9903      	ldr	r1, [sp, #12]
    1f1e:	47a8      	blx	r5
    1f20:	0002      	movs	r2, r0
    1f22:	000b      	movs	r3, r1
    1f24:	0030      	movs	r0, r6
    1f26:	0039      	movs	r1, r7
    1f28:	4e33      	ldr	r6, [pc, #204]	; (1ff8 <KalmanBaroUpdate+0x110>)
    1f2a:	47b0      	blx	r6
    1f2c:	9006      	str	r0, [sp, #24]
    1f2e:	9107      	str	r1, [sp, #28]
    1f30:	9a06      	ldr	r2, [sp, #24]
    1f32:	9b07      	ldr	r3, [sp, #28]
    1f34:	4931      	ldr	r1, [pc, #196]	; (1ffc <KalmanBaroUpdate+0x114>)
    1f36:	600a      	str	r2, [r1, #0]
    1f38:	604b      	str	r3, [r1, #4]
    estp[1] = phi[1][0] * altitude + phi[1][1] * velocity;
    1f3a:	69a2      	ldr	r2, [r4, #24]
    1f3c:	69e3      	ldr	r3, [r4, #28]
    1f3e:	9800      	ldr	r0, [sp, #0]
    1f40:	9901      	ldr	r1, [sp, #4]
    1f42:	47a8      	blx	r5
    1f44:	6a22      	ldr	r2, [r4, #32]
    1f46:	6a63      	ldr	r3, [r4, #36]	; 0x24
    1f48:	0006      	movs	r6, r0
    1f4a:	000f      	movs	r7, r1
    1f4c:	9802      	ldr	r0, [sp, #8]
    1f4e:	9903      	ldr	r1, [sp, #12]
    1f50:	47a8      	blx	r5
    1f52:	0002      	movs	r2, r0
    1f54:	000b      	movs	r3, r1
    1f56:	0030      	movs	r0, r6
    1f58:	0039      	movs	r1, r7
    1f5a:	4e27      	ldr	r6, [pc, #156]	; (1ff8 <KalmanBaroUpdate+0x110>)
    1f5c:	47b0      	blx	r6
    1f5e:	9008      	str	r0, [sp, #32]
    1f60:	9109      	str	r1, [sp, #36]	; 0x24
    1f62:	9a08      	ldr	r2, [sp, #32]
    1f64:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1f66:	4925      	ldr	r1, [pc, #148]	; (1ffc <KalmanBaroUpdate+0x114>)
    1f68:	608a      	str	r2, [r1, #8]
    1f6a:	60cb      	str	r3, [r1, #12]
    estp[2] = phi[2][0] * altitude + phi[2][1] * velocity;
    1f6c:	6b22      	ldr	r2, [r4, #48]	; 0x30
    1f6e:	6b63      	ldr	r3, [r4, #52]	; 0x34
    1f70:	9800      	ldr	r0, [sp, #0]
    1f72:	9901      	ldr	r1, [sp, #4]
    1f74:	47a8      	blx	r5
    1f76:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    1f78:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    1f7a:	0006      	movs	r6, r0
    1f7c:	000f      	movs	r7, r1
    1f7e:	9802      	ldr	r0, [sp, #8]
    1f80:	9903      	ldr	r1, [sp, #12]
    1f82:	47a8      	blx	r5
    1f84:	4c1c      	ldr	r4, [pc, #112]	; (1ff8 <KalmanBaroUpdate+0x110>)
    1f86:	0002      	movs	r2, r0
    1f88:	000b      	movs	r3, r1
    1f8a:	0030      	movs	r0, r6
    1f8c:	0039      	movs	r1, r7
    1f8e:	47a0      	blx	r4
    1f90:	0006      	movs	r6, r0
    1f92:	000f      	movs	r7, r1

    /* Update state */
    altitude = estp[0] + kgain[0][0] * alt_inovation;
    1f94:	9804      	ldr	r0, [sp, #16]
    1f96:	9905      	ldr	r1, [sp, #20]
    estp[2] = phi[2][0] * altitude + phi[2][1] * velocity;
    1f98:	4b18      	ldr	r3, [pc, #96]	; (1ffc <KalmanBaroUpdate+0x114>)
    1f9a:	611e      	str	r6, [r3, #16]
    1f9c:	615f      	str	r7, [r3, #20]
    altitude = estp[0] + kgain[0][0] * alt_inovation;
    1f9e:	4b18      	ldr	r3, [pc, #96]	; (2000 <STACK_SIZE>)
    1fa0:	681a      	ldr	r2, [r3, #0]
    1fa2:	685b      	ldr	r3, [r3, #4]
    1fa4:	47a8      	blx	r5
    1fa6:	9a06      	ldr	r2, [sp, #24]
    1fa8:	9b07      	ldr	r3, [sp, #28]
    1faa:	47a0      	blx	r4
    1fac:	4b0e      	ldr	r3, [pc, #56]	; (1fe8 <KalmanBaroUpdate+0x100>)
    1fae:	6018      	str	r0, [r3, #0]
    1fb0:	6059      	str	r1, [r3, #4]
    velocity = estp[1] + kgain[1][0] * alt_inovation;
    1fb2:	9804      	ldr	r0, [sp, #16]
    1fb4:	9905      	ldr	r1, [sp, #20]
    1fb6:	4b12      	ldr	r3, [pc, #72]	; (2000 <STACK_SIZE>)
    1fb8:	691a      	ldr	r2, [r3, #16]
    1fba:	695b      	ldr	r3, [r3, #20]
    1fbc:	47a8      	blx	r5
    1fbe:	9a08      	ldr	r2, [sp, #32]
    1fc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1fc2:	47a0      	blx	r4
    1fc4:	4b09      	ldr	r3, [pc, #36]	; (1fec <KalmanBaroUpdate+0x104>)
    1fc6:	6018      	str	r0, [r3, #0]
    1fc8:	6059      	str	r1, [r3, #4]
    accel =    estp[2] + kgain[2][0] * alt_inovation;
    1fca:	9804      	ldr	r0, [sp, #16]
    1fcc:	9905      	ldr	r1, [sp, #20]
    1fce:	4b0c      	ldr	r3, [pc, #48]	; (2000 <STACK_SIZE>)
    1fd0:	6a1a      	ldr	r2, [r3, #32]
    1fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1fd4:	47a8      	blx	r5
    1fd6:	003b      	movs	r3, r7
    1fd8:	0032      	movs	r2, r6
    1fda:	47a0      	blx	r4
    1fdc:	4b09      	ldr	r3, [pc, #36]	; (2004 <STACK_SIZE+0x4>)
    1fde:	6018      	str	r0, [r3, #0]
    1fe0:	6059      	str	r1, [r3, #4]

}
    1fe2:	b00b      	add	sp, #44	; 0x2c
    1fe4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1fe6:	46c0      	nop			; (mov r8, r8)
    1fe8:	200006a8 	.word	0x200006a8
    1fec:	200006a0 	.word	0x200006a0
    1ff0:	0000533d 	.word	0x0000533d
    1ff4:	20000010 	.word	0x20000010
    1ff8:	000044b5 	.word	0x000044b5
    1ffc:	200006b0 	.word	0x200006b0
    2000:	20000648 	.word	0x20000648
    2004:	20000698 	.word	0x20000698

00002008 <KalmanBothUpdate>:

void KalmanBothUpdate( double alt_inovation, double accel_inovation) {
    2008:	b5f0      	push	{r4, r5, r6, r7, lr}
    200a:	b08f      	sub	sp, #60	; 0x3c
    200c:	9208      	str	r2, [sp, #32]
    200e:	9309      	str	r3, [sp, #36]	; 0x24

    /* Propagate state */
    estp[0] = phi[0][0] * altitude + phi[0][1] * velocity + phi[0][2] * accel;
    2010:	4b68      	ldr	r3, [pc, #416]	; (21b4 <KalmanBothUpdate+0x1ac>)
    2012:	4d69      	ldr	r5, [pc, #420]	; (21b8 <KalmanBothUpdate+0x1b0>)
    2014:	685c      	ldr	r4, [r3, #4]
    2016:	681b      	ldr	r3, [r3, #0]
    2018:	9300      	str	r3, [sp, #0]
    201a:	9401      	str	r4, [sp, #4]
    201c:	4b67      	ldr	r3, [pc, #412]	; (21bc <KalmanBothUpdate+0x1b4>)
void KalmanBothUpdate( double alt_inovation, double accel_inovation) {
    201e:	9006      	str	r0, [sp, #24]
    2020:	9107      	str	r1, [sp, #28]
    estp[0] = phi[0][0] * altitude + phi[0][1] * velocity + phi[0][2] * accel;
    2022:	685c      	ldr	r4, [r3, #4]
    2024:	681b      	ldr	r3, [r3, #0]
    2026:	9800      	ldr	r0, [sp, #0]
    2028:	9901      	ldr	r1, [sp, #4]
    202a:	9302      	str	r3, [sp, #8]
    202c:	9403      	str	r4, [sp, #12]
    202e:	4b64      	ldr	r3, [pc, #400]	; (21c0 <KalmanBothUpdate+0x1b8>)
    2030:	685c      	ldr	r4, [r3, #4]
    2032:	681b      	ldr	r3, [r3, #0]
    2034:	9304      	str	r3, [sp, #16]
    2036:	9405      	str	r4, [sp, #20]
    2038:	4c62      	ldr	r4, [pc, #392]	; (21c4 <KalmanBothUpdate+0x1bc>)
    203a:	6822      	ldr	r2, [r4, #0]
    203c:	6863      	ldr	r3, [r4, #4]
    203e:	47a8      	blx	r5
    2040:	68a2      	ldr	r2, [r4, #8]
    2042:	68e3      	ldr	r3, [r4, #12]
    2044:	0006      	movs	r6, r0
    2046:	000f      	movs	r7, r1
    2048:	9802      	ldr	r0, [sp, #8]
    204a:	9903      	ldr	r1, [sp, #12]
    204c:	47a8      	blx	r5
    204e:	0002      	movs	r2, r0
    2050:	000b      	movs	r3, r1
    2052:	0030      	movs	r0, r6
    2054:	0039      	movs	r1, r7
    2056:	4e5c      	ldr	r6, [pc, #368]	; (21c8 <KalmanBothUpdate+0x1c0>)
    2058:	47b0      	blx	r6
    205a:	6922      	ldr	r2, [r4, #16]
    205c:	6963      	ldr	r3, [r4, #20]
    205e:	0006      	movs	r6, r0
    2060:	000f      	movs	r7, r1
    2062:	9804      	ldr	r0, [sp, #16]
    2064:	9905      	ldr	r1, [sp, #20]
    2066:	47a8      	blx	r5
    2068:	0002      	movs	r2, r0
    206a:	000b      	movs	r3, r1
    206c:	0030      	movs	r0, r6
    206e:	0039      	movs	r1, r7
    2070:	4e55      	ldr	r6, [pc, #340]	; (21c8 <KalmanBothUpdate+0x1c0>)
    2072:	47b0      	blx	r6
    2074:	900a      	str	r0, [sp, #40]	; 0x28
    2076:	910b      	str	r1, [sp, #44]	; 0x2c
    2078:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    207a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    207c:	4953      	ldr	r1, [pc, #332]	; (21cc <KalmanBothUpdate+0x1c4>)
    207e:	600a      	str	r2, [r1, #0]
    2080:	604b      	str	r3, [r1, #4]
    estp[1] = phi[1][0] * altitude + phi[1][1] * velocity + phi[1][2] * accel;
    2082:	69a2      	ldr	r2, [r4, #24]
    2084:	69e3      	ldr	r3, [r4, #28]
    2086:	9800      	ldr	r0, [sp, #0]
    2088:	9901      	ldr	r1, [sp, #4]
    208a:	47a8      	blx	r5
    208c:	6a22      	ldr	r2, [r4, #32]
    208e:	6a63      	ldr	r3, [r4, #36]	; 0x24
    2090:	0006      	movs	r6, r0
    2092:	000f      	movs	r7, r1
    2094:	9802      	ldr	r0, [sp, #8]
    2096:	9903      	ldr	r1, [sp, #12]
    2098:	47a8      	blx	r5
    209a:	0002      	movs	r2, r0
    209c:	000b      	movs	r3, r1
    209e:	0030      	movs	r0, r6
    20a0:	0039      	movs	r1, r7
    20a2:	4e49      	ldr	r6, [pc, #292]	; (21c8 <KalmanBothUpdate+0x1c0>)
    20a4:	47b0      	blx	r6
    20a6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    20a8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    20aa:	0006      	movs	r6, r0
    20ac:	000f      	movs	r7, r1
    20ae:	9804      	ldr	r0, [sp, #16]
    20b0:	9905      	ldr	r1, [sp, #20]
    20b2:	47a8      	blx	r5
    20b4:	0002      	movs	r2, r0
    20b6:	000b      	movs	r3, r1
    20b8:	0030      	movs	r0, r6
    20ba:	0039      	movs	r1, r7
    20bc:	4e42      	ldr	r6, [pc, #264]	; (21c8 <KalmanBothUpdate+0x1c0>)
    20be:	47b0      	blx	r6
    20c0:	900c      	str	r0, [sp, #48]	; 0x30
    20c2:	910d      	str	r1, [sp, #52]	; 0x34
    20c4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    20c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    20c8:	4940      	ldr	r1, [pc, #256]	; (21cc <KalmanBothUpdate+0x1c4>)
    20ca:	608a      	str	r2, [r1, #8]
    20cc:	60cb      	str	r3, [r1, #12]
    estp[2] = phi[2][0] * altitude + phi[2][1] * velocity + phi[2][2] * accel;
    20ce:	6b22      	ldr	r2, [r4, #48]	; 0x30
    20d0:	6b63      	ldr	r3, [r4, #52]	; 0x34
    20d2:	9800      	ldr	r0, [sp, #0]
    20d4:	9901      	ldr	r1, [sp, #4]
    20d6:	47a8      	blx	r5
    20d8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    20da:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    20dc:	0006      	movs	r6, r0
    20de:	000f      	movs	r7, r1
    20e0:	9802      	ldr	r0, [sp, #8]
    20e2:	9903      	ldr	r1, [sp, #12]
    20e4:	47a8      	blx	r5
    20e6:	0002      	movs	r2, r0
    20e8:	000b      	movs	r3, r1
    20ea:	0030      	movs	r0, r6
    20ec:	0039      	movs	r1, r7
    20ee:	4e36      	ldr	r6, [pc, #216]	; (21c8 <KalmanBothUpdate+0x1c0>)
    20f0:	47b0      	blx	r6
    20f2:	6c22      	ldr	r2, [r4, #64]	; 0x40
    20f4:	6c63      	ldr	r3, [r4, #68]	; 0x44
    20f6:	0006      	movs	r6, r0
    20f8:	000f      	movs	r7, r1
    20fa:	9804      	ldr	r0, [sp, #16]
    20fc:	9905      	ldr	r1, [sp, #20]
    20fe:	47a8      	blx	r5
    2100:	4c31      	ldr	r4, [pc, #196]	; (21c8 <KalmanBothUpdate+0x1c0>)
    2102:	0002      	movs	r2, r0
    2104:	000b      	movs	r3, r1
    2106:	0030      	movs	r0, r6
    2108:	0039      	movs	r1, r7
    210a:	47a0      	blx	r4
    210c:	0003      	movs	r3, r0
    210e:	000c      	movs	r4, r1
    2110:	4a2e      	ldr	r2, [pc, #184]	; (21cc <KalmanBothUpdate+0x1c4>)
    2112:	9000      	str	r0, [sp, #0]
    2114:	9101      	str	r1, [sp, #4]

    /* Update state */
    altitude = estp[0] + kgain[0][0] * alt_inovation + kgain[0][1] * accel_inovation;
    2116:	9806      	ldr	r0, [sp, #24]
    2118:	9907      	ldr	r1, [sp, #28]
    estp[2] = phi[2][0] * altitude + phi[2][1] * velocity + phi[2][2] * accel;
    211a:	6113      	str	r3, [r2, #16]
    211c:	6154      	str	r4, [r2, #20]
    altitude = estp[0] + kgain[0][0] * alt_inovation + kgain[0][1] * accel_inovation;
    211e:	4c2c      	ldr	r4, [pc, #176]	; (21d0 <KalmanBothUpdate+0x1c8>)
    2120:	6822      	ldr	r2, [r4, #0]
    2122:	6863      	ldr	r3, [r4, #4]
    2124:	47a8      	blx	r5
    2126:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    2128:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    212a:	4e27      	ldr	r6, [pc, #156]	; (21c8 <KalmanBothUpdate+0x1c0>)
    212c:	47b0      	blx	r6
    212e:	68a2      	ldr	r2, [r4, #8]
    2130:	68e3      	ldr	r3, [r4, #12]
    2132:	0006      	movs	r6, r0
    2134:	000f      	movs	r7, r1
    2136:	9808      	ldr	r0, [sp, #32]
    2138:	9909      	ldr	r1, [sp, #36]	; 0x24
    213a:	47a8      	blx	r5
    213c:	0002      	movs	r2, r0
    213e:	000b      	movs	r3, r1
    2140:	0030      	movs	r0, r6
    2142:	0039      	movs	r1, r7
    2144:	4e20      	ldr	r6, [pc, #128]	; (21c8 <KalmanBothUpdate+0x1c0>)
    2146:	47b0      	blx	r6
    2148:	4b1a      	ldr	r3, [pc, #104]	; (21b4 <KalmanBothUpdate+0x1ac>)
    214a:	6018      	str	r0, [r3, #0]
    214c:	6059      	str	r1, [r3, #4]
    velocity = estp[1] + kgain[1][0] * alt_inovation + kgain[1][1] * accel_inovation;
    214e:	6922      	ldr	r2, [r4, #16]
    2150:	6963      	ldr	r3, [r4, #20]
    2152:	9806      	ldr	r0, [sp, #24]
    2154:	9907      	ldr	r1, [sp, #28]
    2156:	47a8      	blx	r5
    2158:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    215a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    215c:	47b0      	blx	r6
    215e:	69a2      	ldr	r2, [r4, #24]
    2160:	69e3      	ldr	r3, [r4, #28]
    2162:	0006      	movs	r6, r0
    2164:	000f      	movs	r7, r1
    2166:	9808      	ldr	r0, [sp, #32]
    2168:	9909      	ldr	r1, [sp, #36]	; 0x24
    216a:	47a8      	blx	r5
    216c:	0002      	movs	r2, r0
    216e:	000b      	movs	r3, r1
    2170:	0030      	movs	r0, r6
    2172:	0039      	movs	r1, r7
    2174:	4e14      	ldr	r6, [pc, #80]	; (21c8 <KalmanBothUpdate+0x1c0>)
    2176:	47b0      	blx	r6
    2178:	4b10      	ldr	r3, [pc, #64]	; (21bc <KalmanBothUpdate+0x1b4>)
    217a:	6018      	str	r0, [r3, #0]
    217c:	6059      	str	r1, [r3, #4]
    accel =    estp[2] + kgain[2][0] * alt_inovation + kgain[2][1] * accel_inovation;
    217e:	6a22      	ldr	r2, [r4, #32]
    2180:	6a63      	ldr	r3, [r4, #36]	; 0x24
    2182:	9806      	ldr	r0, [sp, #24]
    2184:	9907      	ldr	r1, [sp, #28]
    2186:	47a8      	blx	r5
    2188:	9a00      	ldr	r2, [sp, #0]
    218a:	9b01      	ldr	r3, [sp, #4]
    218c:	47b0      	blx	r6
    218e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    2190:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    2192:	0006      	movs	r6, r0
    2194:	000f      	movs	r7, r1
    2196:	9808      	ldr	r0, [sp, #32]
    2198:	9909      	ldr	r1, [sp, #36]	; 0x24
    219a:	47a8      	blx	r5
    219c:	4c0a      	ldr	r4, [pc, #40]	; (21c8 <KalmanBothUpdate+0x1c0>)
    219e:	0002      	movs	r2, r0
    21a0:	000b      	movs	r3, r1
    21a2:	0030      	movs	r0, r6
    21a4:	0039      	movs	r1, r7
    21a6:	47a0      	blx	r4
    21a8:	4b05      	ldr	r3, [pc, #20]	; (21c0 <KalmanBothUpdate+0x1b8>)
    21aa:	6018      	str	r0, [r3, #0]
    21ac:	6059      	str	r1, [r3, #4]
}
    21ae:	b00f      	add	sp, #60	; 0x3c
    21b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    21b2:	46c0      	nop			; (mov r8, r8)
    21b4:	200006a8 	.word	0x200006a8
    21b8:	0000533d 	.word	0x0000533d
    21bc:	200006a0 	.word	0x200006a0
    21c0:	20000698 	.word	0x20000698
    21c4:	20000010 	.word	0x20000010
    21c8:	000044b5 	.word	0x000044b5
    21cc:	200006b0 	.word	0x200006b0
    21d0:	20000648 	.word	0x20000648

000021d4 <computeKalmanStates>:

void computeKalmanStates() {
    21d4:	b5f0      	push	{r4, r5, r6, r7, lr}

    double alt_inovation, accel_inovation, acceleration, pressure;

    acceleration = (sample.accelZ - offsets.gravityOffset) * 32.17417;
    21d6:	4b20      	ldr	r3, [pc, #128]	; (2258 <computeKalmanStates+0x84>)
void computeKalmanStates() {
    21d8:	b085      	sub	sp, #20
    acceleration = (sample.accelZ - offsets.gravityOffset) * 32.17417;
    21da:	6b5f      	ldr	r7, [r3, #52]	; 0x34
    21dc:	4a1f      	ldr	r2, [pc, #124]	; (225c <computeKalmanStates+0x88>)

    pressure = sample.pressureAltitude;
    21de:	6ddc      	ldr	r4, [r3, #92]	; 0x5c
    21e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    21e2:	9300      	str	r3, [sp, #0]
    21e4:	9401      	str	r4, [sp, #4]
    acceleration = (sample.accelZ - offsets.gravityOffset) * 32.17417;
    21e6:	6891      	ldr	r1, [r2, #8]
    21e8:	68d2      	ldr	r2, [r2, #12]

    if (altitude == 0) {
    21ea:	4c1d      	ldr	r4, [pc, #116]	; (2260 <computeKalmanStates+0x8c>)
    acceleration = (sample.accelZ - offsets.gravityOffset) * 32.17417;
    21ec:	9102      	str	r1, [sp, #8]
    21ee:	9203      	str	r2, [sp, #12]
    if (altitude == 0) {
    21f0:	6820      	ldr	r0, [r4, #0]
    21f2:	6861      	ldr	r1, [r4, #4]
    21f4:	2200      	movs	r2, #0
    21f6:	2300      	movs	r3, #0
    21f8:	4d1a      	ldr	r5, [pc, #104]	; (2264 <computeKalmanStates+0x90>)
    21fa:	47a8      	blx	r5
    21fc:	2800      	cmp	r0, #0
    21fe:	d003      	beq.n	2208 <computeKalmanStates+0x34>
        altitude = pressure;
    2200:	9a00      	ldr	r2, [sp, #0]
    2202:	9b01      	ldr	r3, [sp, #4]
    2204:	6022      	str	r2, [r4, #0]
    2206:	6063      	str	r3, [r4, #4]
    }

    /* Compute the innovations */
    alt_inovation = pressure - estp[0];
    2208:	9800      	ldr	r0, [sp, #0]
    220a:	9901      	ldr	r1, [sp, #4]
    220c:	4e16      	ldr	r6, [pc, #88]	; (2268 <computeKalmanStates+0x94>)
    220e:	4c17      	ldr	r4, [pc, #92]	; (226c <computeKalmanStates+0x98>)
    2210:	6832      	ldr	r2, [r6, #0]
    2212:	6873      	ldr	r3, [r6, #4]
    2214:	47a0      	blx	r4
    accel_inovation = acceleration - estp[2];


    if (flightState < flightDrogue) {
    2216:	4b16      	ldr	r3, [pc, #88]	; (2270 <computeKalmanStates+0x9c>)
    alt_inovation = pressure - estp[0];
    2218:	0004      	movs	r4, r0
    if (flightState < flightDrogue) {
    221a:	781b      	ldrb	r3, [r3, #0]
    alt_inovation = pressure - estp[0];
    221c:	000d      	movs	r5, r1
    if (flightState < flightDrogue) {
    221e:	b25b      	sxtb	r3, r3
    2220:	2b05      	cmp	r3, #5
    2222:	dc16      	bgt.n	2252 <computeKalmanStates+0x7e>
    acceleration = (sample.accelZ - offsets.gravityOffset) * 32.17417;
    2224:	1c38      	adds	r0, r7, #0
    2226:	4b13      	ldr	r3, [pc, #76]	; (2274 <computeKalmanStates+0xa0>)
    2228:	4798      	blx	r3
    222a:	9a02      	ldr	r2, [sp, #8]
    222c:	9b03      	ldr	r3, [sp, #12]
    222e:	4f0f      	ldr	r7, [pc, #60]	; (226c <computeKalmanStates+0x98>)
    2230:	47b8      	blx	r7
    2232:	4a11      	ldr	r2, [pc, #68]	; (2278 <computeKalmanStates+0xa4>)
    2234:	4b11      	ldr	r3, [pc, #68]	; (227c <computeKalmanStates+0xa8>)
    2236:	4f12      	ldr	r7, [pc, #72]	; (2280 <computeKalmanStates+0xac>)
    2238:	47b8      	blx	r7
    accel_inovation = acceleration - estp[2];
    223a:	6932      	ldr	r2, [r6, #16]
    223c:	6973      	ldr	r3, [r6, #20]
    223e:	4e0b      	ldr	r6, [pc, #44]	; (226c <computeKalmanStates+0x98>)
    2240:	47b0      	blx	r6
    2242:	0002      	movs	r2, r0
    2244:	000b      	movs	r3, r1
        KalmanBothUpdate(alt_inovation,accel_inovation);
    2246:	0020      	movs	r0, r4
    2248:	0029      	movs	r1, r5
    224a:	4c0e      	ldr	r4, [pc, #56]	; (2284 <computeKalmanStates+0xb0>)
    224c:	47a0      	blx	r4
    } else {
        KalmanBaroUpdate(alt_inovation);
    }
}
    224e:	b005      	add	sp, #20
    2250:	bdf0      	pop	{r4, r5, r6, r7, pc}
        KalmanBaroUpdate(alt_inovation);
    2252:	4b0d      	ldr	r3, [pc, #52]	; (2288 <computeKalmanStates+0xb4>)
    2254:	4798      	blx	r3
}
    2256:	e7fa      	b.n	224e <computeKalmanStates+0x7a>
    2258:	200007d8 	.word	0x200007d8
    225c:	200004d0 	.word	0x200004d0
    2260:	200006a8 	.word	0x200006a8
    2264:	00004149 	.word	0x00004149
    2268:	200006b0 	.word	0x200006b0
    226c:	0000583d 	.word	0x0000583d
    2270:	20000534 	.word	0x20000534
    2274:	00006005 	.word	0x00006005
    2278:	33daf8df 	.word	0x33daf8df
    227c:	4040164b 	.word	0x4040164b
    2280:	0000533d 	.word	0x0000533d
    2284:	00002009 	.word	0x00002009
    2288:	00001ee9 	.word	0x00001ee9

0000228c <makePage>:
u8_t pageLocation;

bool pageReady;


void makePage(u8_t bytesToWrite, u8_t* data) {
    228c:	b5f0      	push	{r4, r5, r6, r7, lr}


    u8_t location = pageLocation;
    228e:	4a1f      	ldr	r2, [pc, #124]	; (230c <makePage+0x80>)
    2290:	7814      	ldrb	r4, [r2, #0]
    u8_t bytesWritten = 0;

    if ((location + bytesToWrite) > 0xFF) {
    2292:	1903      	adds	r3, r0, r4
    2294:	2bff      	cmp	r3, #255	; 0xff
    2296:	dc0c      	bgt.n	22b2 <makePage+0x26>
    2298:	2300      	movs	r3, #0
        }
        pageReady = true;

    } else {
        for (u16_t dataByte = 0; dataByte <= bytesToWrite; ++dataByte) {
            pageBuffer[(dataByte + location)] = data[dataByte];
    229a:	4d1d      	ldr	r5, [pc, #116]	; (2310 <makePage+0x84>)
        for (u16_t dataByte = 0; dataByte <= bytesToWrite; ++dataByte) {
    229c:	b280      	uxth	r0, r0
            pageBuffer[(dataByte + location)] = data[dataByte];
    229e:	1965      	adds	r5, r4, r5
        for (u16_t dataByte = 0; dataByte <= bytesToWrite; ++dataByte) {
    22a0:	b29e      	uxth	r6, r3
    22a2:	42b0      	cmp	r0, r6
    22a4:	d322      	bcc.n	22ec <makePage+0x60>
            pageBuffer[(dataByte + location)] = data[dataByte];
    22a6:	5cce      	ldrb	r6, [r1, r3]
    22a8:	54ee      	strb	r6, [r5, r3]
            bytesWritten++;
            pageLocation = location + dataByte;
    22aa:	18e6      	adds	r6, r4, r3
    22ac:	7016      	strb	r6, [r2, #0]
    22ae:	3301      	adds	r3, #1
    22b0:	e7f6      	b.n	22a0 <makePage+0x14>
    22b2:	2300      	movs	r3, #0
    22b4:	4d16      	ldr	r5, [pc, #88]	; (2310 <makePage+0x84>)
    22b6:	b2de      	uxtb	r6, r3
    22b8:	46b4      	mov	ip, r6
        for (u16_t dataByte = 0; (dataByte + location) <= 0xFF; ++dataByte) {
    22ba:	191e      	adds	r6, r3, r4
    22bc:	2eff      	cmp	r6, #255	; 0xff
    22be:	dd16      	ble.n	22ee <makePage+0x62>
        pageLocation = 0x00;
    22c0:	2300      	movs	r3, #0
            pageToWrite[i] = pageBuffer[i];
    22c2:	4f14      	ldr	r7, [pc, #80]	; (2314 <makePage+0x88>)
        pageLocation = 0x00;
    22c4:	7013      	strb	r3, [r2, #0]
            pageToWrite[i] = pageBuffer[i];
    22c6:	18ec      	adds	r4, r5, r3
    22c8:	7826      	ldrb	r6, [r4, #0]
    22ca:	54fe      	strb	r6, [r7, r3]
            pageBuffer[i] = 0;
    22cc:	2600      	movs	r6, #0
    22ce:	7026      	strb	r6, [r4, #0]
        for(u16_t i = 0; i <= 0xFF; ++i) {
    22d0:	2480      	movs	r4, #128	; 0x80
    22d2:	3301      	adds	r3, #1
    22d4:	0064      	lsls	r4, r4, #1
    22d6:	42a3      	cmp	r3, r4
    22d8:	d1f5      	bne.n	22c6 <makePage+0x3a>
    22da:	4663      	mov	r3, ip
    22dc:	2500      	movs	r5, #0
            pageBuffer[dataByte] = data[bytesWritten];
    22de:	4f0c      	ldr	r7, [pc, #48]	; (2310 <makePage+0x84>)
    22e0:	1c6c      	adds	r4, r5, #1
        for (u16_t dataByte = 0; bytesWritten < bytesToWrite; ++dataByte) {
    22e2:	4283      	cmp	r3, r0
    22e4:	d308      	bcc.n	22f8 <makePage+0x6c>
        pageReady = true;
    22e6:	2201      	movs	r2, #1
    22e8:	4b0b      	ldr	r3, [pc, #44]	; (2318 <makePage+0x8c>)
    22ea:	701a      	strb	r2, [r3, #0]
        }
    }
}
    22ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
            pageBuffer[(dataByte + location)] = data[dataByte];
    22ee:	5ccf      	ldrb	r7, [r1, r3]
        for (u16_t dataByte = 0; (dataByte + location) <= 0xFF; ++dataByte) {
    22f0:	3301      	adds	r3, #1
            pageBuffer[(dataByte + location)] = data[dataByte];
    22f2:	55af      	strb	r7, [r5, r6]
        for (u16_t dataByte = 0; (dataByte + location) <= 0xFF; ++dataByte) {
    22f4:	b29b      	uxth	r3, r3
    22f6:	e7de      	b.n	22b6 <makePage+0x2a>
            pageBuffer[dataByte] = data[bytesWritten];
    22f8:	4666      	mov	r6, ip
    22fa:	1936      	adds	r6, r6, r4
    22fc:	3e01      	subs	r6, #1
    22fe:	5d8e      	ldrb	r6, [r1, r6]
            bytesWritten++;
    2300:	3301      	adds	r3, #1
            pageBuffer[dataByte] = data[bytesWritten];
    2302:	557e      	strb	r6, [r7, r5]
            bytesWritten++;
    2304:	b2db      	uxtb	r3, r3
            pageLocation = dataByte + 1;
    2306:	7014      	strb	r4, [r2, #0]
    2308:	0025      	movs	r5, r4
    230a:	e7e9      	b.n	22e0 <makePage+0x54>
    230c:	200007d4 	.word	0x200007d4
    2310:	20000536 	.word	0x20000536
    2314:	200006c8 	.word	0x200006c8
    2318:	200007c8 	.word	0x200007c8

0000231c <logFlight>:


void logFlight() {
    231c:	b51f      	push	{r0, r1, r2, r3, r4, lr}

    u8_t bytesToSend = 16;
    u8_t dataToSend[16];

    dataToSend[0] = FLIGHT_LOG;
    231e:	2346      	movs	r3, #70	; 0x46
    2320:	466a      	mov	r2, sp
    2322:	7013      	strb	r3, [r2, #0]
    dataToSend[1] = 0;
    2324:	2300      	movs	r3, #0

    dataToSend[2] = offsets.offsetBufferTime >> 0;
    2326:	4669      	mov	r1, sp
    dataToSend[3] = offsets.offsetBufferTime >> 8;
    2328:	4668      	mov	r0, sp
    dataToSend[1] = 0;
    232a:	7053      	strb	r3, [r2, #1]
    dataToSend[2] = offsets.offsetBufferTime >> 0;
    232c:	4a10      	ldr	r2, [pc, #64]	; (2370 <logFlight+0x54>)
    232e:	6813      	ldr	r3, [r2, #0]
    2330:	708b      	strb	r3, [r1, #2]
    dataToSend[3] = offsets.offsetBufferTime >> 8;
    2332:	0a19      	lsrs	r1, r3, #8
    2334:	70c1      	strb	r1, [r0, #3]
    dataToSend[4] = offsets.offsetBufferTime >> 16;
    2336:	0c19      	lsrs	r1, r3, #16
    dataToSend[5] = offsets.offsetBufferTime >> 24;
    2338:	0e1b      	lsrs	r3, r3, #24
    233a:	7143      	strb	r3, [r0, #5]

    dataToSend[6] = offsets.groundOffset >> 0;
    233c:	6993      	ldr	r3, [r2, #24]
    dataToSend[4] = offsets.offsetBufferTime >> 16;
    233e:	7101      	strb	r1, [r0, #4]
    dataToSend[7] = offsets.groundOffset >> 8;
    2340:	0a19      	lsrs	r1, r3, #8
    dataToSend[6] = offsets.groundOffset >> 0;
    2342:	7183      	strb	r3, [r0, #6]
    dataToSend[7] = offsets.groundOffset >> 8;
    2344:	71c1      	strb	r1, [r0, #7]
    dataToSend[8] = offsets.groundOffset >> 16;
    2346:	0c19      	lsrs	r1, r3, #16
    dataToSend[9] = offsets.groundOffset >> 24;
    2348:	0e1b      	lsrs	r3, r3, #24
    234a:	7243      	strb	r3, [r0, #9]

    dataToSend[10] = offsets.groundTemperature >> 0;
    234c:	6a13      	ldr	r3, [r2, #32]
    dataToSend[8] = offsets.groundOffset >> 16;
    234e:	7201      	strb	r1, [r0, #8]
    dataToSend[11] = offsets.groundTemperature >> 8;
    2350:	0a1a      	lsrs	r2, r3, #8
    dataToSend[10] = offsets.groundTemperature >> 0;
    2352:	7283      	strb	r3, [r0, #10]
    dataToSend[11] = offsets.groundTemperature >> 8;
    2354:	72c2      	strb	r2, [r0, #11]
    dataToSend[12] = offsets.groundTemperature >> 16;
    2356:	0c1a      	lsrs	r2, r3, #16
    dataToSend[13] = offsets.groundTemperature >> 24;
    2358:	0e1b      	lsrs	r3, r3, #24
    235a:	7343      	strb	r3, [r0, #13]

    //dataToSend[14] = accel >> 0;
    dataToSend[15] = 0xfe;
    235c:	23fe      	movs	r3, #254	; 0xfe
    dataToSend[12] = offsets.groundTemperature >> 16;
    235e:	7302      	strb	r2, [r0, #12]
    dataToSend[15] = 0xfe;
    2360:	73c3      	strb	r3, [r0, #15]
    dataToSend[9] = offsets.groundOffset >> 24;
    2362:	4669      	mov	r1, sp

    makePage(bytesToSend, dataToSend);
    2364:	2010      	movs	r0, #16
    2366:	4b03      	ldr	r3, [pc, #12]	; (2374 <logFlight+0x58>)
    2368:	4798      	blx	r3
}
    236a:	b005      	add	sp, #20
    236c:	bd00      	pop	{pc}
    236e:	46c0      	nop			; (mov r8, r8)
    2370:	200004d0 	.word	0x200004d0
    2374:	0000228d 	.word	0x0000228d

00002378 <logEvent>:

void logEvent(u8_t eventType) {
    2378:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

    u8_t bytesToSend = 12;
    u8_t dataToSend[12];

    dataToSend[0] = EVENT_LOG;
    237a:	2345      	movs	r3, #69	; 0x45
    dataToSend[1] = eventType;
    dataToSend[2] = sample.sampleTick >> 0;
    237c:	4d10      	ldr	r5, [pc, #64]	; (23c0 <logEvent+0x48>)
    dataToSend[0] = EVENT_LOG;
    237e:	ac01      	add	r4, sp, #4
    2380:	7023      	strb	r3, [r4, #0]
    dataToSend[2] = sample.sampleTick >> 0;
    2382:	686b      	ldr	r3, [r5, #4]
    dataToSend[3] = sample.sampleTick >> 8;
    dataToSend[4] = sample.sampleTick >> 16;
    dataToSend[5] = sample.sampleTick >> 24;

    dataToSend[6] = altitudeAGL() >> 0;
    2384:	4e0f      	ldr	r6, [pc, #60]	; (23c4 <logEvent+0x4c>)
    dataToSend[3] = sample.sampleTick >> 8;
    2386:	0a1a      	lsrs	r2, r3, #8
    dataToSend[2] = sample.sampleTick >> 0;
    2388:	70a3      	strb	r3, [r4, #2]
    dataToSend[3] = sample.sampleTick >> 8;
    238a:	70e2      	strb	r2, [r4, #3]
    dataToSend[4] = sample.sampleTick >> 16;
    238c:	0c1a      	lsrs	r2, r3, #16
    dataToSend[5] = sample.sampleTick >> 24;
    238e:	0e1b      	lsrs	r3, r3, #24
    dataToSend[4] = sample.sampleTick >> 16;
    2390:	7122      	strb	r2, [r4, #4]
    dataToSend[5] = sample.sampleTick >> 24;
    2392:	7163      	strb	r3, [r4, #5]
    dataToSend[1] = eventType;
    2394:	7060      	strb	r0, [r4, #1]
    dataToSend[6] = altitudeAGL() >> 0;
    2396:	47b0      	blx	r6
    2398:	71a0      	strb	r0, [r4, #6]
    dataToSend[7] = altitudeAGL() >> 8;
    239a:	47b0      	blx	r6
    239c:	1200      	asrs	r0, r0, #8
    239e:	71e0      	strb	r0, [r4, #7]
    dataToSend[8] = altitudeAGL() >> 16;
    23a0:	47b0      	blx	r6
    23a2:	1400      	asrs	r0, r0, #16
    23a4:	7220      	strb	r0, [r4, #8]
    dataToSend[9] = altitudeAGL() >> 24;
    23a6:	47b0      	blx	r6
    23a8:	1600      	asrs	r0, r0, #24
    23aa:	7260      	strb	r0, [r4, #9]

    dataToSend[10] = sample.voltage.batV >> 0;
    23ac:	892b      	ldrh	r3, [r5, #8]
    dataToSend[11] = sample.voltage.batV >> 8;

    makePage(bytesToSend, dataToSend);
    23ae:	0021      	movs	r1, r4
    dataToSend[10] = sample.voltage.batV >> 0;
    23b0:	72a3      	strb	r3, [r4, #10]
    dataToSend[11] = sample.voltage.batV >> 8;
    23b2:	0a1b      	lsrs	r3, r3, #8
    23b4:	72e3      	strb	r3, [r4, #11]
    makePage(bytesToSend, dataToSend);
    23b6:	200c      	movs	r0, #12
    23b8:	4b03      	ldr	r3, [pc, #12]	; (23c8 <logEvent+0x50>)
    23ba:	4798      	blx	r3

}
    23bc:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
    23be:	46c0      	nop			; (mov r8, r8)
    23c0:	200007d8 	.word	0x200007d8
    23c4:	00000afd 	.word	0x00000afd
    23c8:	0000228d 	.word	0x0000228d

000023cc <logSensors>:

void logSensors() {

    writeLog = false;
    23cc:	2200      	movs	r2, #0
    23ce:	4b50      	ldr	r3, [pc, #320]	; (2510 <logSensors+0x144>)
void logSensors() {
    23d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    writeLog = false;
    23d2:	701a      	strb	r2, [r3, #0]

    u8_t bytesToSend = 29;
    u8_t dataToSend[29];

    dataToSend[0] = SENSOR_LOG;
    23d4:	2353      	movs	r3, #83	; 0x53
void logSensors() {
    23d6:	b08d      	sub	sp, #52	; 0x34

    dataToSend[1] = sample.sampleTick >> 0;
    23d8:	4d4e      	ldr	r5, [pc, #312]	; (2514 <logSensors+0x148>)
    dataToSend[0] = SENSOR_LOG;
    23da:	ac04      	add	r4, sp, #16
    23dc:	7023      	strb	r3, [r4, #0]
    dataToSend[1] = sample.sampleTick >> 0;
    23de:	686b      	ldr	r3, [r5, #4]
    dataToSend[2] = sample.sampleTick >> 8;
    dataToSend[3] = sample.sampleTick >> 16;
    dataToSend[4] = sample.sampleTick >> 24;

    dataToSend[5] = altitudeAGL() >> 0;
    23e0:	4e4d      	ldr	r6, [pc, #308]	; (2518 <logSensors+0x14c>)
    dataToSend[2] = sample.sampleTick >> 8;
    23e2:	0a1a      	lsrs	r2, r3, #8
    dataToSend[1] = sample.sampleTick >> 0;
    23e4:	7063      	strb	r3, [r4, #1]
    dataToSend[2] = sample.sampleTick >> 8;
    23e6:	70a2      	strb	r2, [r4, #2]
    dataToSend[3] = sample.sampleTick >> 16;
    23e8:	0c1a      	lsrs	r2, r3, #16
    dataToSend[4] = sample.sampleTick >> 24;
    23ea:	0e1b      	lsrs	r3, r3, #24
    dataToSend[3] = sample.sampleTick >> 16;
    23ec:	70e2      	strb	r2, [r4, #3]
    dataToSend[4] = sample.sampleTick >> 24;
    23ee:	7123      	strb	r3, [r4, #4]
    dataToSend[5] = altitudeAGL() >> 0;
    23f0:	47b0      	blx	r6
    23f2:	7160      	strb	r0, [r4, #5]
    dataToSend[6] = altitudeAGL() >> 8;
    23f4:	47b0      	blx	r6
    23f6:	1200      	asrs	r0, r0, #8
    23f8:	71a0      	strb	r0, [r4, #6]
    dataToSend[7] = altitudeAGL() >> 16;
    23fa:	47b0      	blx	r6
    23fc:	1400      	asrs	r0, r0, #16
    23fe:	71e0      	strb	r0, [r4, #7]
    dataToSend[8] = altitudeAGL() >> 24;
    2400:	47b0      	blx	r6

    volatile float fractionalAccel = accel - (int16_t)(accel);
    2402:	4b46      	ldr	r3, [pc, #280]	; (251c <logSensors+0x150>)
    dataToSend[8] = altitudeAGL() >> 24;
    2404:	1600      	asrs	r0, r0, #24
    volatile float fractionalAccel = accel - (int16_t)(accel);
    2406:	681e      	ldr	r6, [r3, #0]
    2408:	685f      	ldr	r7, [r3, #4]
    dataToSend[8] = altitudeAGL() >> 24;
    240a:	7220      	strb	r0, [r4, #8]
    volatile float fractionalAccel = accel - (int16_t)(accel);
    240c:	0039      	movs	r1, r7
    240e:	4b44      	ldr	r3, [pc, #272]	; (2520 <logSensors+0x154>)
    2410:	0030      	movs	r0, r6
    2412:	4798      	blx	r3
    2414:	b203      	sxth	r3, r0
    2416:	9300      	str	r3, [sp, #0]
    2418:	0018      	movs	r0, r3
    241a:	4b42      	ldr	r3, [pc, #264]	; (2524 <logSensors+0x158>)
    241c:	4798      	blx	r3
    241e:	0002      	movs	r2, r0
    2420:	000b      	movs	r3, r1
    2422:	0030      	movs	r0, r6
    2424:	0039      	movs	r1, r7
    2426:	4e40      	ldr	r6, [pc, #256]	; (2528 <logSensors+0x15c>)
    2428:	47b0      	blx	r6
    242a:	4b40      	ldr	r3, [pc, #256]	; (252c <logSensors+0x160>)
    242c:	4798      	blx	r3
    242e:	9003      	str	r0, [sp, #12]
    volatile int16_t fractAccelPart = fractionalAccel * 1000;
    2430:	9803      	ldr	r0, [sp, #12]
    2432:	493f      	ldr	r1, [pc, #252]	; (2530 <logSensors+0x164>)
    2434:	4b3f      	ldr	r3, [pc, #252]	; (2534 <logSensors+0x168>)
    2436:	4798      	blx	r3
    2438:	4b3f      	ldr	r3, [pc, #252]	; (2538 <logSensors+0x16c>)
    243a:	4798      	blx	r3

    dataToSend[9] = (int16_t)(accel) >> 0;
    243c:	466a      	mov	r2, sp
    243e:	7812      	ldrb	r2, [r2, #0]
    volatile int16_t fractAccelPart = fractionalAccel * 1000;
    2440:	ab02      	add	r3, sp, #8
    2442:	b200      	sxth	r0, r0
    dataToSend[9] = (int16_t)(accel) >> 0;
    2444:	7262      	strb	r2, [r4, #9]
    dataToSend[10] = (int16_t)(accel) >> 8;
    2446:	9a00      	ldr	r2, [sp, #0]
    volatile int16_t fractAccelPart = fractionalAccel * 1000;
    2448:	8058      	strh	r0, [r3, #2]
    dataToSend[10] = (int16_t)(accel) >> 8;
    244a:	1210      	asrs	r0, r2, #8
    volatile int16_t fractAccelPart = fractionalAccel * 1000;
    244c:	3302      	adds	r3, #2
    dataToSend[11] = fractAccelPart >> 0;
    244e:	881a      	ldrh	r2, [r3, #0]
    dataToSend[12] = fractAccelPart >> 8;
    2450:	881b      	ldrh	r3, [r3, #0]
    dataToSend[10] = (int16_t)(accel) >> 8;
    2452:	72a0      	strb	r0, [r4, #10]
    dataToSend[12] = fractAccelPart >> 8;
    2454:	0a1b      	lsrs	r3, r3, #8
    2456:	7323      	strb	r3, [r4, #12]

    float fractionalVelocity = velocity - (int16_t)(velocity);
    2458:	4b38      	ldr	r3, [pc, #224]	; (253c <logSensors+0x170>)
    dataToSend[11] = fractAccelPart >> 0;
    245a:	72e2      	strb	r2, [r4, #11]
    float fractionalVelocity = velocity - (int16_t)(velocity);
    245c:	681a      	ldr	r2, [r3, #0]
    245e:	685b      	ldr	r3, [r3, #4]
    2460:	9200      	str	r2, [sp, #0]
    2462:	9301      	str	r3, [sp, #4]
    2464:	0010      	movs	r0, r2
    2466:	0019      	movs	r1, r3
    2468:	4b2d      	ldr	r3, [pc, #180]	; (2520 <logSensors+0x154>)
    246a:	4798      	blx	r3
    246c:	b206      	sxth	r6, r0
    246e:	4b2d      	ldr	r3, [pc, #180]	; (2524 <logSensors+0x158>)
    2470:	0030      	movs	r0, r6
    2472:	4798      	blx	r3
    2474:	4f2c      	ldr	r7, [pc, #176]	; (2528 <logSensors+0x15c>)
    2476:	0002      	movs	r2, r0
    2478:	000b      	movs	r3, r1
    247a:	9800      	ldr	r0, [sp, #0]
    247c:	9901      	ldr	r1, [sp, #4]
    247e:	47b8      	blx	r7
    2480:	4b2a      	ldr	r3, [pc, #168]	; (252c <logSensors+0x160>)
    2482:	4798      	blx	r3
    int16_t fractVelocityPart = fractionalVelocity * 1000;
    2484:	492a      	ldr	r1, [pc, #168]	; (2530 <logSensors+0x164>)
    2486:	4b2b      	ldr	r3, [pc, #172]	; (2534 <logSensors+0x168>)
    2488:	4798      	blx	r3
    248a:	4b2b      	ldr	r3, [pc, #172]	; (2538 <logSensors+0x16c>)
    248c:	4798      	blx	r3
    248e:	b203      	sxth	r3, r0

    dataToSend[13] = (int16_t)(velocity) >> 0;
    2490:	7366      	strb	r6, [r4, #13]
    dataToSend[14] = (int16_t)(velocity) >> 8;
    dataToSend[15] = fractVelocityPart >> 0;
    2492:	73e3      	strb	r3, [r4, #15]
    dataToSend[14] = (int16_t)(velocity) >> 8;
    2494:	1236      	asrs	r6, r6, #8
    dataToSend[16] = fractVelocityPart >> 8;
    2496:	121b      	asrs	r3, r3, #8
    dataToSend[14] = (int16_t)(velocity) >> 8;
    2498:	73a6      	strb	r6, [r4, #14]
    dataToSend[16] = fractVelocityPart >> 8;
    249a:	7423      	strb	r3, [r4, #16]

    dataToSend[17] = sample.accelXint >> 0;
    249c:	2220      	movs	r2, #32
    249e:	5eab      	ldrsh	r3, [r5, r2]
    //dataToSend[21] = my_altimeter->myAnalogAccelerometer.analogRaw >> 0;
    //dataToSend[22] = my_altimeter->myAnalogAccelerometer.analogRaw >> 8;



    makePage(bytesToSend, dataToSend);
    24a0:	0021      	movs	r1, r4
    dataToSend[17] = sample.accelXint >> 0;
    24a2:	7463      	strb	r3, [r4, #17]
    dataToSend[18] = sample.accelXint >> 8;
    24a4:	121b      	asrs	r3, r3, #8
    24a6:	74a3      	strb	r3, [r4, #18]
    dataToSend[19] = sample.accelYint >> 0;
    24a8:	2228      	movs	r2, #40	; 0x28
    24aa:	5eab      	ldrsh	r3, [r5, r2]
    makePage(bytesToSend, dataToSend);
    24ac:	201d      	movs	r0, #29
    dataToSend[19] = sample.accelYint >> 0;
    24ae:	74e3      	strb	r3, [r4, #19]
    dataToSend[20] = sample.accelYint >> 8;
    24b0:	121b      	asrs	r3, r3, #8
    24b2:	7523      	strb	r3, [r4, #20]
    dataToSend[21] = sample.gyroXint >> 0;
    24b4:	2238      	movs	r2, #56	; 0x38
    24b6:	5eab      	ldrsh	r3, [r5, r2]
    24b8:	7563      	strb	r3, [r4, #21]
    dataToSend[22] = sample.gyroXint >> 8;
    24ba:	121b      	asrs	r3, r3, #8
    24bc:	75a3      	strb	r3, [r4, #22]
    dataToSend[23] = sample.gyroYint >> 0;
    24be:	1cab      	adds	r3, r5, #2
    24c0:	223e      	movs	r2, #62	; 0x3e
    24c2:	5e9b      	ldrsh	r3, [r3, r2]
    24c4:	75e3      	strb	r3, [r4, #23]
    dataToSend[24] = sample.gyroYint >> 8;
    24c6:	121b      	asrs	r3, r3, #8
    24c8:	7623      	strb	r3, [r4, #24]
    dataToSend[25] = sample.gyroZint >> 0;
    24ca:	002b      	movs	r3, r5
    24cc:	3348      	adds	r3, #72	; 0x48
    24ce:	2200      	movs	r2, #0
    24d0:	5e9b      	ldrsh	r3, [r3, r2]
    24d2:	7663      	strb	r3, [r4, #25]
    dataToSend[26] = sample.gyroZint >> 8;
    24d4:	121b      	asrs	r3, r3, #8
    24d6:	76a3      	strb	r3, [r4, #26]
    dataToSend[27] = sample.analogRaw >> 0;
    24d8:	8b2b      	ldrh	r3, [r5, #24]
    24da:	76e3      	strb	r3, [r4, #27]
    dataToSend[28] = sample.analogRaw >> 8;
    24dc:	0a1b      	lsrs	r3, r3, #8
    24de:	7723      	strb	r3, [r4, #28]
    makePage(bytesToSend, dataToSend);
    24e0:	4b17      	ldr	r3, [pc, #92]	; (2540 <logSensors+0x174>)
    24e2:	4798      	blx	r3

    if (pageReady) {
    24e4:	4b17      	ldr	r3, [pc, #92]	; (2544 <logSensors+0x178>)
    24e6:	781a      	ldrb	r2, [r3, #0]
    24e8:	2a00      	cmp	r2, #0
    24ea:	d00e      	beq.n	250a <logSensors+0x13e>
        pageReady = false;
    24ec:	2200      	movs	r2, #0
    24ee:	701a      	strb	r2, [r3, #0]
    PORT->Group[p.group].OUTTGL.reg = (1<<p.pin);
    24f0:	2280      	movs	r2, #128	; 0x80
    24f2:	4b15      	ldr	r3, [pc, #84]	; (2548 <logSensors+0x17c>)
        pinToggle(LedPin);
        u8_t bytesWritten = AT25SEWritePage(currentAddress,pageToWrite);
    24f4:	4c15      	ldr	r4, [pc, #84]	; (254c <logSensors+0x180>)
    24f6:	0352      	lsls	r2, r2, #13
    24f8:	61da      	str	r2, [r3, #28]
    24fa:	4915      	ldr	r1, [pc, #84]	; (2550 <logSensors+0x184>)
    24fc:	4b15      	ldr	r3, [pc, #84]	; (2554 <logSensors+0x188>)
    24fe:	6820      	ldr	r0, [r4, #0]
    2500:	4798      	blx	r3
        currentAddress = (currentAddress + 0x100);
    2502:	6823      	ldr	r3, [r4, #0]
    2504:	3301      	adds	r3, #1
    2506:	33ff      	adds	r3, #255	; 0xff
    2508:	6023      	str	r3, [r4, #0]
    }
}
    250a:	b00d      	add	sp, #52	; 0x34
    250c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    250e:	46c0      	nop			; (mov r8, r8)
    2510:	20000522 	.word	0x20000522
    2514:	200007d8 	.word	0x200007d8
    2518:	00000afd 	.word	0x00000afd
    251c:	20000698 	.word	0x20000698
    2520:	00005ea9 	.word	0x00005ea9
    2524:	00005f11 	.word	0x00005f11
    2528:	0000583d 	.word	0x0000583d
    252c:	000060a9 	.word	0x000060a9
    2530:	447a0000 	.word	0x447a0000
    2534:	00004235 	.word	0x00004235
    2538:	00004475 	.word	0x00004475
    253c:	200006a0 	.word	0x200006a0
    2540:	0000228d 	.word	0x0000228d
    2544:	200007c8 	.word	0x200007c8
    2548:	41004400 	.word	0x41004400
    254c:	200007cc 	.word	0x200007cc
    2550:	200006c8 	.word	0x200006c8
    2554:	0000029d 	.word	0x0000029d

00002558 <getFlightStartAddress>:



u32_t getFlightStartAddress(u8_t flightToFind) {
    2558:	b513      	push	{r0, r1, r4, lr}
    255a:	0003      	movs	r3, r0

    u8_t addressToCheck[3];

    u16_t flightAddressLoc = FLIGHTZEROSTART + (flightToFind * 0x06);
    255c:	2006      	movs	r0, #6
    255e:	4358      	muls	r0, r3

    AT25SEreadSample(flightAddressLoc, 0x03, addressToCheck);
    2560:	ac01      	add	r4, sp, #4
    2562:	3001      	adds	r0, #1
    2564:	30ff      	adds	r0, #255	; 0xff
    2566:	0022      	movs	r2, r4
    2568:	2103      	movs	r1, #3
    256a:	4b05      	ldr	r3, [pc, #20]	; (2580 <getFlightStartAddress+0x28>)
    256c:	4798      	blx	r3

    u32_t flightStartAddress = addressToCheck[0] << 0 | addressToCheck[1] << 8 | addressToCheck[2] << 16;
    256e:	7860      	ldrb	r0, [r4, #1]
    2570:	78a3      	ldrb	r3, [r4, #2]
    2572:	0200      	lsls	r0, r0, #8
    2574:	041b      	lsls	r3, r3, #16
    2576:	4318      	orrs	r0, r3
    2578:	7823      	ldrb	r3, [r4, #0]
    257a:	4318      	orrs	r0, r3

    return flightStartAddress;
}
    257c:	bd16      	pop	{r1, r2, r4, pc}
    257e:	46c0      	nop			; (mov r8, r8)
    2580:	000002f9 	.word	0x000002f9

00002584 <FindFlightEndingAddress>:

u32_t FindFlightEndingAddress(u8_t findThisFlightsEnd) {
    2584:	b513      	push	{r0, r1, r4, lr}
    2586:	0003      	movs	r3, r0

    u8_t addressToCheck[3];

    u16_t flightAddressLoc = FLIGHTZEROEND + (findThisFlightsEnd * 0x06);
    2588:	2006      	movs	r0, #6
    258a:	4358      	muls	r0, r3

    AT25SEreadSample(flightAddressLoc, 0x03, addressToCheck);
    258c:	ac01      	add	r4, sp, #4
    258e:	3004      	adds	r0, #4
    2590:	30ff      	adds	r0, #255	; 0xff
    2592:	0022      	movs	r2, r4
    2594:	2103      	movs	r1, #3
    2596:	4b05      	ldr	r3, [pc, #20]	; (25ac <FindFlightEndingAddress+0x28>)
    2598:	4798      	blx	r3

    u32_t flightEndAddress = addressToCheck[0] << 0 | addressToCheck[1] << 8 | addressToCheck[2] << 16;
    259a:	7860      	ldrb	r0, [r4, #1]
    259c:	78a3      	ldrb	r3, [r4, #2]
    259e:	0200      	lsls	r0, r0, #8
    25a0:	041b      	lsls	r3, r3, #16
    25a2:	4318      	orrs	r0, r3
    25a4:	7823      	ldrb	r3, [r4, #0]
    25a6:	4318      	orrs	r0, r3

    return flightEndAddress;
}
    25a8:	bd16      	pop	{r1, r2, r4, pc}
    25aa:	46c0      	nop			; (mov r8, r8)
    25ac:	000002f9 	.word	0x000002f9

000025b0 <isFlightLogged>:

bool isFlightLogged(u8_t flightNumbToCheck) {
    25b0:	b510      	push	{r4, lr}

    u32_t possibleStart = getFlightStartAddress(flightNumbToCheck);
    25b2:	4b04      	ldr	r3, [pc, #16]	; (25c4 <isFlightLogged+0x14>)
    25b4:	4798      	blx	r3

    if (possibleStart == 0xFFFFFF) {
    25b6:	4b04      	ldr	r3, [pc, #16]	; (25c8 <isFlightLogged+0x18>)
    25b8:	18c0      	adds	r0, r0, r3
    25ba:	1e43      	subs	r3, r0, #1
    25bc:	4198      	sbcs	r0, r3
    25be:	b2c0      	uxtb	r0, r0
        return false;
    } else {
        return true;
    }
}
    25c0:	bd10      	pop	{r4, pc}
    25c2:	46c0      	nop			; (mov r8, r8)
    25c4:	00002559 	.word	0x00002559
    25c8:	ff000001 	.word	0xff000001

000025cc <writeFlightEndAddress>:


void writeFlightEndAddress() {
    25cc:	b507      	push	{r0, r1, r2, lr}

    u32_t endingAddress = currentAddress;
    25ce:	4b0a      	ldr	r3, [pc, #40]	; (25f8 <writeFlightEndAddress+0x2c>)

    u8_t address[3] = {endingAddress >> 0, endingAddress >> 8, endingAddress >> 16};
    25d0:	aa01      	add	r2, sp, #4
    u32_t endingAddress = currentAddress;
    25d2:	681b      	ldr	r3, [r3, #0]
    u8_t address[3] = {endingAddress >> 0, endingAddress >> 8, endingAddress >> 16};
    25d4:	7013      	strb	r3, [r2, #0]
    25d6:	0a19      	lsrs	r1, r3, #8
    25d8:	0c1b      	lsrs	r3, r3, #16
    25da:	7093      	strb	r3, [r2, #2]

    u16_t flightAddressLoc = FLIGHTZEROEND + (flightNumb * 0x06);
    25dc:	4b07      	ldr	r3, [pc, #28]	; (25fc <writeFlightEndAddress+0x30>)
    u8_t address[3] = {endingAddress >> 0, endingAddress >> 8, endingAddress >> 16};
    25de:	7051      	strb	r1, [r2, #1]
    u16_t flightAddressLoc = FLIGHTZEROEND + (flightNumb * 0x06);
    25e0:	7818      	ldrb	r0, [r3, #0]
    25e2:	2306      	movs	r3, #6
    25e4:	4358      	muls	r0, r3
    AT25SFWriteBytes(flightAddressLoc, 3, address);
    25e6:	3004      	adds	r0, #4
    25e8:	30ff      	adds	r0, #255	; 0xff
    25ea:	2103      	movs	r1, #3
    25ec:	4b04      	ldr	r3, [pc, #16]	; (2600 <writeFlightEndAddress+0x34>)
    25ee:	4798      	blx	r3
    delay_ms(10);
    25f0:	200a      	movs	r0, #10
    25f2:	4b04      	ldr	r3, [pc, #16]	; (2604 <writeFlightEndAddress+0x38>)
    25f4:	4798      	blx	r3

}
    25f6:	bd07      	pop	{r0, r1, r2, pc}
    25f8:	200007cc 	.word	0x200007cc
    25fc:	20000523 	.word	0x20000523
    2600:	00000241 	.word	0x00000241
    2604:	00000ee9 	.word	0x00000ee9

00002608 <findNewFlightStart>:




void findNewFlightStart() {
    2608:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

    for (u8_t flightNumbToCheck = 0; flightNumbToCheck < 20; ++flightNumbToCheck) {
    260a:	2400      	movs	r4, #0

        if (!isFlightLogged(flightNumbToCheck)) {
    260c:	0020      	movs	r0, r4
    260e:	4b24      	ldr	r3, [pc, #144]	; (26a0 <findNewFlightStart+0x98>)
    2610:	4798      	blx	r3
    2612:	2800      	cmp	r0, #0
    2614:	d13f      	bne.n	2696 <findNewFlightStart+0x8e>
    2616:	4f23      	ldr	r7, [pc, #140]	; (26a4 <findNewFlightStart+0x9c>)
    2618:	ad01      	add	r5, sp, #4

            if (flightNumbToCheck > 0) {
    261a:	2c00      	cmp	r4, #0
    261c:	d020      	beq.n	2660 <findNewFlightStart+0x58>

                u32_t startAddress = FindFlightEndingAddress(flightNumbToCheck - 1);
    261e:	1e60      	subs	r0, r4, #1
    2620:	4b21      	ldr	r3, [pc, #132]	; (26a8 <findNewFlightStart+0xa0>)
    2622:	b2c0      	uxtb	r0, r0
    2624:	4798      	blx	r3
                delay_ms(5);
    2626:	4b21      	ldr	r3, [pc, #132]	; (26ac <findNewFlightStart+0xa4>)
                u32_t startAddress = FindFlightEndingAddress(flightNumbToCheck - 1);
    2628:	0006      	movs	r6, r0
                delay_ms(5);
    262a:	2005      	movs	r0, #5
    262c:	4798      	blx	r3

                currentAddress = startAddress;

                u8_t address[3] = {startAddress >> 0, startAddress >> 8, startAddress >> 16};

                u16_t flightAddressLoc = FLIGHTZEROSTART + (flightNumbToCheck * 0x06);
    262e:	2006      	movs	r0, #6
    2630:	4360      	muls	r0, r4
                u8_t address[3] = {startAddress >> 0, startAddress >> 8, startAddress >> 16};
    2632:	0a33      	lsrs	r3, r6, #8
                AT25SFWriteBytes(flightAddressLoc, 3, address);
    2634:	3001      	adds	r0, #1
                currentAddress = startAddress;
    2636:	603e      	str	r6, [r7, #0]
                u8_t address[3] = {startAddress >> 0, startAddress >> 8, startAddress >> 16};
    2638:	702e      	strb	r6, [r5, #0]
    263a:	706b      	strb	r3, [r5, #1]
    263c:	0c36      	lsrs	r6, r6, #16
                AT25SFWriteBytes(flightAddressLoc, 3, address);
    263e:	30ff      	adds	r0, #255	; 0xff
    2640:	002a      	movs	r2, r5
    2642:	2103      	movs	r1, #3
    2644:	4b1a      	ldr	r3, [pc, #104]	; (26b0 <findNewFlightStart+0xa8>)
                u8_t address[3] = {startAddress >> 0, startAddress >> 8, startAddress >> 16};
    2646:	70ae      	strb	r6, [r5, #2]
                AT25SFWriteBytes(flightAddressLoc, 3, address);
    2648:	4798      	blx	r3
                beep(1000);
            }
            flightNumb = flightNumbToCheck;

            while (flightNumbToCheck > 0) {
                beep(500);
    264a:	25fa      	movs	r5, #250	; 0xfa
            flightNumb = flightNumbToCheck;
    264c:	4b19      	ldr	r3, [pc, #100]	; (26b4 <findNewFlightStart+0xac>)
                beep(500);
    264e:	006d      	lsls	r5, r5, #1
            flightNumb = flightNumbToCheck;
    2650:	701c      	strb	r4, [r3, #0]
            while (flightNumbToCheck > 0) {
    2652:	2c00      	cmp	r4, #0
    2654:	d116      	bne.n	2684 <findNewFlightStart+0x7c>
                delay_ms(500);
                --flightNumbToCheck;
            }
            delay_ms(500);
    2656:	20fa      	movs	r0, #250	; 0xfa
    2658:	4b14      	ldr	r3, [pc, #80]	; (26ac <findNewFlightStart+0xa4>)
    265a:	0040      	lsls	r0, r0, #1
    265c:	4798      	blx	r3
            break;
        }
    }
}
    265e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
                u8_t address[3] = {0x00,0x10,0x00};
    2660:	2310      	movs	r3, #16
                AT25SFWriteBytes(FLIGHTZEROSTART, 3, address);
    2662:	2080      	movs	r0, #128	; 0x80
                u8_t address[3] = {0x00,0x10,0x00};
    2664:	706b      	strb	r3, [r5, #1]
                AT25SFWriteBytes(FLIGHTZEROSTART, 3, address);
    2666:	002a      	movs	r2, r5
    2668:	2103      	movs	r1, #3
    266a:	0040      	lsls	r0, r0, #1
    266c:	4b10      	ldr	r3, [pc, #64]	; (26b0 <findNewFlightStart+0xa8>)
                u8_t address[3] = {0x00,0x10,0x00};
    266e:	702c      	strb	r4, [r5, #0]
    2670:	70ac      	strb	r4, [r5, #2]
                AT25SFWriteBytes(FLIGHTZEROSTART, 3, address);
    2672:	4798      	blx	r3
                currentAddress = 0x001000;
    2674:	2380      	movs	r3, #128	; 0x80
                beep(1000);
    2676:	20fa      	movs	r0, #250	; 0xfa
                currentAddress = 0x001000;
    2678:	015b      	lsls	r3, r3, #5
    267a:	603b      	str	r3, [r7, #0]
                beep(1000);
    267c:	0080      	lsls	r0, r0, #2
    267e:	4b0e      	ldr	r3, [pc, #56]	; (26b8 <findNewFlightStart+0xb0>)
    2680:	4798      	blx	r3
    2682:	e7e2      	b.n	264a <findNewFlightStart+0x42>
                beep(500);
    2684:	0028      	movs	r0, r5
    2686:	4b0c      	ldr	r3, [pc, #48]	; (26b8 <findNewFlightStart+0xb0>)
    2688:	4798      	blx	r3
                --flightNumbToCheck;
    268a:	3c01      	subs	r4, #1
                delay_ms(500);
    268c:	0028      	movs	r0, r5
    268e:	4b07      	ldr	r3, [pc, #28]	; (26ac <findNewFlightStart+0xa4>)
    2690:	4798      	blx	r3
                --flightNumbToCheck;
    2692:	b2e4      	uxtb	r4, r4
    2694:	e7dd      	b.n	2652 <findNewFlightStart+0x4a>
    for (u8_t flightNumbToCheck = 0; flightNumbToCheck < 20; ++flightNumbToCheck) {
    2696:	3401      	adds	r4, #1
    2698:	b2e4      	uxtb	r4, r4
    269a:	2c14      	cmp	r4, #20
    269c:	d1b6      	bne.n	260c <findNewFlightStart+0x4>
    269e:	e7de      	b.n	265e <findNewFlightStart+0x56>
    26a0:	000025b1 	.word	0x000025b1
    26a4:	200007cc 	.word	0x200007cc
    26a8:	00002585 	.word	0x00002585
    26ac:	00000ee9 	.word	0x00000ee9
    26b0:	00000241 	.word	0x00000241
    26b4:	20000523 	.word	0x20000523
    26b8:	00000c6d 	.word	0x00000c6d

000026bc <takeSample>:
#include <util.h>
#include <boardDefines.h>
#include <MS5803.h>

bool takeSample() {
    return SampleBool;
    26bc:	4b01      	ldr	r3, [pc, #4]	; (26c4 <takeSample+0x8>)
    26be:	7818      	ldrb	r0, [r3, #0]
}
    26c0:	4770      	bx	lr
    26c2:	46c0      	nop			; (mov r8, r8)
    26c4:	20000535 	.word	0x20000535

000026c8 <pullSample>:

void pullSample() {
    SampleBool = true;
    26c8:	2201      	movs	r2, #1
    26ca:	4b01      	ldr	r3, [pc, #4]	; (26d0 <pullSample+0x8>)
    26cc:	701a      	strb	r2, [r3, #0]
}
    26ce:	4770      	bx	lr
    26d0:	20000535 	.word	0x20000535

000026d4 <sampleTick>:
    SampleBool = false;
}

sample_t sample;

void sampleTick() {
    26d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    SampleBool = false;
    26d6:	2600      	movs	r6, #0
    26d8:	4bad      	ldr	r3, [pc, #692]	; (2990 <sampleTick+0x2bc>)

    // take last samples time to discover Dt before setting new time
    u32_t lastTick = sample.sampleTick;
    26da:	4cae      	ldr	r4, [pc, #696]	; (2994 <sampleTick+0x2c0>)
void sampleTick() {
    26dc:	b085      	sub	sp, #20
    SampleBool = false;
    26de:	701e      	strb	r6, [r3, #0]
    sample.sampleTick = millis() - startupTick;
    26e0:	4bad      	ldr	r3, [pc, #692]	; (2998 <sampleTick+0x2c4>)
    u32_t lastTick = sample.sampleTick;
    26e2:	6865      	ldr	r5, [r4, #4]
    sample.sampleTick = millis() - startupTick;
    26e4:	4798      	blx	r3
    26e6:	4bad      	ldr	r3, [pc, #692]	; (299c <sampleTick+0x2c8>)
    26e8:	681b      	ldr	r3, [r3, #0]
    26ea:	1ac0      	subs	r0, r0, r3
    26ec:	6060      	str	r0, [r4, #4]
    sample.tickDelta = sample.sampleTick - lastTick;
    26ee:	1b40      	subs	r0, r0, r5

    // altimeter.flightTime = sample.sampleTick - offsets.StartupTick;



    sample.voltage.batV = adc_read(senseBatPin);
    26f0:	4dab      	ldr	r5, [pc, #684]	; (29a0 <sampleTick+0x2cc>)
    sample.tickDelta = sample.sampleTick - lastTick;
    26f2:	8020      	strh	r0, [r4, #0]
    sample.voltage.batV = adc_read(senseBatPin);
    26f4:	786b      	ldrb	r3, [r5, #1]
    26f6:	7828      	ldrb	r0, [r5, #0]
    26f8:	021b      	lsls	r3, r3, #8
    26fa:	4303      	orrs	r3, r0
    26fc:	78a8      	ldrb	r0, [r5, #2]
    26fe:	7929      	ldrb	r1, [r5, #4]
    2700:	0400      	lsls	r0, r0, #16
    2702:	4303      	orrs	r3, r0
    2704:	78e8      	ldrb	r0, [r5, #3]
    2706:	0600      	lsls	r0, r0, #24
    2708:	4318      	orrs	r0, r3
    270a:	4ba6      	ldr	r3, [pc, #664]	; (29a4 <sampleTick+0x2d0>)
    270c:	4798      	blx	r3

    sample.voltage.batFloat = sample.voltage.batV * 0.00259;
    270e:	4ba6      	ldr	r3, [pc, #664]	; (29a8 <sampleTick+0x2d4>)
    sample.voltage.batV = adc_read(senseBatPin);
    2710:	8120      	strh	r0, [r4, #8]
    sample.voltage.batFloat = sample.voltage.batV * 0.00259;
    2712:	4798      	blx	r3
    2714:	4aa5      	ldr	r2, [pc, #660]	; (29ac <sampleTick+0x2d8>)
    2716:	4fa6      	ldr	r7, [pc, #664]	; (29b0 <sampleTick+0x2dc>)
    2718:	4ba6      	ldr	r3, [pc, #664]	; (29b4 <sampleTick+0x2e0>)
    271a:	47b8      	blx	r7
    271c:	4ba6      	ldr	r3, [pc, #664]	; (29b8 <sampleTick+0x2e4>)
    271e:	4798      	blx	r3

    sample.voltage.senseA = adc_read(senseAPin);
    2720:	79ab      	ldrb	r3, [r5, #6]
    sample.voltage.batFloat = sample.voltage.batV * 0.00259;
    2722:	60e0      	str	r0, [r4, #12]
    sample.voltage.senseA = adc_read(senseAPin);
    2724:	7968      	ldrb	r0, [r5, #5]
    2726:	021b      	lsls	r3, r3, #8
    2728:	4303      	orrs	r3, r0
    272a:	79e8      	ldrb	r0, [r5, #7]
    272c:	7a69      	ldrb	r1, [r5, #9]
    272e:	0400      	lsls	r0, r0, #16
    2730:	4303      	orrs	r3, r0
    2732:	7a28      	ldrb	r0, [r5, #8]
    sample.voltage.senseB = adc_read(senseBPin);
    sample.voltage.senseC = adc_read(senseCPin);
    sample.voltage.senseD = adc_read(senseDPin);


    ADC->CTRLB.reg |= ADC_CTRLB_RESSEL_16BIT;
    2734:	4fa1      	ldr	r7, [pc, #644]	; (29bc <sampleTick+0x2e8>)
    sample.voltage.senseA = adc_read(senseAPin);
    2736:	0600      	lsls	r0, r0, #24
    2738:	4318      	orrs	r0, r3
    273a:	4b9a      	ldr	r3, [pc, #616]	; (29a4 <sampleTick+0x2d0>)
    273c:	4798      	blx	r3
    sample.voltage.senseB = adc_read(senseBPin);
    273e:	7aeb      	ldrb	r3, [r5, #11]
    sample.voltage.senseA = adc_read(senseAPin);
    2740:	8220      	strh	r0, [r4, #16]
    sample.voltage.senseB = adc_read(senseBPin);
    2742:	7aa8      	ldrb	r0, [r5, #10]
    2744:	021b      	lsls	r3, r3, #8
    2746:	4303      	orrs	r3, r0
    2748:	7b28      	ldrb	r0, [r5, #12]
    274a:	7ba9      	ldrb	r1, [r5, #14]
    274c:	0400      	lsls	r0, r0, #16
    274e:	4303      	orrs	r3, r0
    2750:	7b68      	ldrb	r0, [r5, #13]
    2752:	0600      	lsls	r0, r0, #24
    2754:	4318      	orrs	r0, r3
    2756:	4b93      	ldr	r3, [pc, #588]	; (29a4 <sampleTick+0x2d0>)
    2758:	4798      	blx	r3
    sample.voltage.senseC = adc_read(senseCPin);
    275a:	7c2b      	ldrb	r3, [r5, #16]
    sample.voltage.senseB = adc_read(senseBPin);
    275c:	8260      	strh	r0, [r4, #18]
    sample.voltage.senseC = adc_read(senseCPin);
    275e:	7be8      	ldrb	r0, [r5, #15]
    2760:	021b      	lsls	r3, r3, #8
    2762:	4303      	orrs	r3, r0
    2764:	7c68      	ldrb	r0, [r5, #17]
    2766:	7ce9      	ldrb	r1, [r5, #19]
    2768:	0400      	lsls	r0, r0, #16
    276a:	4303      	orrs	r3, r0
    276c:	7ca8      	ldrb	r0, [r5, #18]
    276e:	0600      	lsls	r0, r0, #24
    2770:	4318      	orrs	r0, r3
    2772:	4b8c      	ldr	r3, [pc, #560]	; (29a4 <sampleTick+0x2d0>)
    2774:	4798      	blx	r3
    sample.voltage.senseD = adc_read(senseDPin);
    2776:	7d6b      	ldrb	r3, [r5, #21]
    sample.voltage.senseC = adc_read(senseCPin);
    2778:	82a0      	strh	r0, [r4, #20]
    sample.voltage.senseD = adc_read(senseDPin);
    277a:	7d28      	ldrb	r0, [r5, #20]
    277c:	021b      	lsls	r3, r3, #8
    277e:	4303      	orrs	r3, r0
    2780:	7da8      	ldrb	r0, [r5, #22]
    2782:	7e29      	ldrb	r1, [r5, #24]
    2784:	0400      	lsls	r0, r0, #16
    2786:	4303      	orrs	r3, r0
    2788:	7de8      	ldrb	r0, [r5, #23]
    278a:	0600      	lsls	r0, r0, #24
    278c:	4318      	orrs	r0, r3
    278e:	4b85      	ldr	r3, [pc, #532]	; (29a4 <sampleTick+0x2d0>)
    2790:	4798      	blx	r3
    ADC->CTRLB.reg |= ADC_CTRLB_RESSEL_16BIT;
    2792:	2310      	movs	r3, #16
    sample.voltage.senseD = adc_read(senseDPin);
    2794:	82e0      	strh	r0, [r4, #22]
    ADC->CTRLB.reg |= ADC_CTRLB_RESSEL_16BIT;
    2796:	88ba      	ldrh	r2, [r7, #4]
    ADC->AVGCTRL.reg = ADC_AVGCTRL_SAMPLENUM_16;

    sample.analogRaw = adc_read(analogAccelPin);
    2798:	7e68      	ldrb	r0, [r5, #25]
    ADC->CTRLB.reg |= ADC_CTRLB_RESSEL_16BIT;
    279a:	4313      	orrs	r3, r2
    279c:	80bb      	strh	r3, [r7, #4]
    ADC->AVGCTRL.reg = ADC_AVGCTRL_SAMPLENUM_16;
    279e:	2304      	movs	r3, #4
    27a0:	70bb      	strb	r3, [r7, #2]
    sample.analogRaw = adc_read(analogAccelPin);
    27a2:	7eab      	ldrb	r3, [r5, #26]
    27a4:	7f69      	ldrb	r1, [r5, #29]
    27a6:	021b      	lsls	r3, r3, #8
    27a8:	4303      	orrs	r3, r0
    27aa:	7ee8      	ldrb	r0, [r5, #27]
    27ac:	0400      	lsls	r0, r0, #16
    27ae:	4303      	orrs	r3, r0
    27b0:	7f28      	ldrb	r0, [r5, #28]
    27b2:	0600      	lsls	r0, r0, #24
    27b4:	4318      	orrs	r0, r3
    27b6:	4b7b      	ldr	r3, [pc, #492]	; (29a4 <sampleTick+0x2d0>)
    27b8:	4798      	blx	r3
    sample.analogAccel = (sample.analogRaw - 48695) * 0.00487;
    27ba:	4b81      	ldr	r3, [pc, #516]	; (29c0 <sampleTick+0x2ec>)
    sample.analogRaw = adc_read(analogAccelPin);
    27bc:	8320      	strh	r0, [r4, #24]
    sample.analogAccel = (sample.analogRaw - 48695) * 0.00487;
    27be:	18c0      	adds	r0, r0, r3
    27c0:	4b79      	ldr	r3, [pc, #484]	; (29a8 <sampleTick+0x2d4>)
    27c2:	4798      	blx	r3
    27c4:	4a7f      	ldr	r2, [pc, #508]	; (29c4 <sampleTick+0x2f0>)
    27c6:	4d7a      	ldr	r5, [pc, #488]	; (29b0 <sampleTick+0x2dc>)
    27c8:	4b7f      	ldr	r3, [pc, #508]	; (29c8 <sampleTick+0x2f4>)
    27ca:	47a8      	blx	r5
    27cc:	4b7a      	ldr	r3, [pc, #488]	; (29b8 <sampleTick+0x2e4>)
    27ce:	4798      	blx	r3
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    27d0:	2580      	movs	r5, #128	; 0x80
    27d2:	61e0      	str	r0, [r4, #28]

    ADC->AVGCTRL.reg = ADC_AVGCTRL_SAMPLENUM_1;
    27d4:	70be      	strb	r6, [r7, #2]
    ADC->CTRLB.reg |= ADC_CTRLB_RESSEL_12BIT;
    27d6:	88bb      	ldrh	r3, [r7, #4]
    27d8:	01ed      	lsls	r5, r5, #7
    27da:	b29b      	uxth	r3, r3
    27dc:	80bb      	strh	r3, [r7, #4]
    27de:	4b7b      	ldr	r3, [pc, #492]	; (29cc <sampleTick+0x2f8>)

    pinLow(cs_baro);
    spiDataOut(BARO_SPI, 0x50);
    27e0:	2150      	movs	r1, #80	; 0x50
    27e2:	4f7b      	ldr	r7, [pc, #492]	; (29d0 <sampleTick+0x2fc>)
    27e4:	615d      	str	r5, [r3, #20]
    27e6:	2002      	movs	r0, #2
    27e8:	47b8      	blx	r7
    pinHigh(cs_baro);
    delay_us(600);
    27ea:	2096      	movs	r0, #150	; 0x96
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    27ec:	4b77      	ldr	r3, [pc, #476]	; (29cc <sampleTick+0x2f8>)
    27ee:	0080      	lsls	r0, r0, #2
    27f0:	619d      	str	r5, [r3, #24]
    27f2:	4b78      	ldr	r3, [pc, #480]	; (29d4 <sampleTick+0x300>)
    27f4:	4798      	blx	r3
    uint32_t tempRaw = readMS5803AdcResults();
    27f6:	4b78      	ldr	r3, [pc, #480]	; (29d8 <sampleTick+0x304>)
    27f8:	4798      	blx	r3
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    27fa:	4b74      	ldr	r3, [pc, #464]	; (29cc <sampleTick+0x2f8>)
    27fc:	9003      	str	r0, [sp, #12]

    pinLow(cs_baro);
    spiDataOut(BARO_SPI, 0x40);
    27fe:	2140      	movs	r1, #64	; 0x40
    2800:	615d      	str	r5, [r3, #20]
    2802:	2002      	movs	r0, #2
    2804:	47b8      	blx	r7
    2806:	2280      	movs	r2, #128	; 0x80
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    2808:	4b70      	ldr	r3, [pc, #448]	; (29cc <sampleTick+0x2f8>)
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    280a:	00d2      	lsls	r2, r2, #3
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    280c:	619d      	str	r5, [r3, #24]
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    280e:	4b73      	ldr	r3, [pc, #460]	; (29dc <sampleTick+0x308>)

    u8_t byteOne;
    u8_t byteTwo;
// Accel data
    pinLow(cs_accel);
    spiDataOut(ACCEL_SPI, BMI055_X_ACC_LSB | BMI055_READ_REG);
    2810:	2182      	movs	r1, #130	; 0x82
    2812:	601a      	str	r2, [r3, #0]
    2814:	0030      	movs	r0, r6
    2816:	47b8      	blx	r7
    byteOne = spiDataIn(ACCEL_SPI);
    2818:	4f71      	ldr	r7, [pc, #452]	; (29e0 <sampleTick+0x30c>)
    281a:	0030      	movs	r0, r6
    281c:	47b8      	blx	r7
    281e:	0005      	movs	r5, r0
    byteTwo = spiDataIn(ACCEL_SPI);
    2820:	0030      	movs	r0, r6
    2822:	47b8      	blx	r7
    sample.pressureAltitude = paToFeetNOAA(sample.pressureMbar);
}

int16_t twosComp(u8_t byteOne, u8_t byteTwo) {

    u16_t comp = byteOne | (byteTwo << 8);
    2824:	0200      	lsls	r0, r0, #8
    2826:	4305      	orrs	r5, r0
    byteOne = spiDataIn(ACCEL_SPI);
    2828:	0030      	movs	r0, r6
    sample.accelXint = twosComp(byteOne,byteTwo);
    282a:	8425      	strh	r5, [r4, #32]
    byteOne = spiDataIn(ACCEL_SPI);
    282c:	47b8      	blx	r7
    282e:	0005      	movs	r5, r0
    byteTwo = spiDataIn(ACCEL_SPI);
    2830:	0030      	movs	r0, r6
    2832:	47b8      	blx	r7
    u16_t comp = byteOne | (byteTwo << 8);
    2834:	0200      	lsls	r0, r0, #8
    2836:	4305      	orrs	r5, r0
    byteOne = spiDataIn(ACCEL_SPI);
    2838:	0030      	movs	r0, r6
    sample.accelYint = twosComp(byteOne,byteTwo);
    283a:	8525      	strh	r5, [r4, #40]	; 0x28
    byteOne = spiDataIn(ACCEL_SPI);
    283c:	47b8      	blx	r7
    283e:	0005      	movs	r5, r0
    byteTwo = spiDataIn(ACCEL_SPI);
    2840:	0030      	movs	r0, r6
    2842:	47b8      	blx	r7
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    2844:	2180      	movs	r1, #128	; 0x80
    2846:	0003      	movs	r3, r0
    2848:	4a66      	ldr	r2, [pc, #408]	; (29e4 <sampleTick+0x310>)
    284a:	00c9      	lsls	r1, r1, #3
    284c:	6011      	str	r1, [r2, #0]
    u16_t comp = byteOne | (byteTwo << 8);
    284e:	021b      	lsls	r3, r3, #8
    sample.accelXint =  sample.accelXint >> 4;
    2850:	2220      	movs	r2, #32
    2852:	5ea0      	ldrsh	r0, [r4, r2]
    sample.accelYint =  sample.accelYint >> 4;
    2854:	2228      	movs	r2, #40	; 0x28
    2856:	5ea6      	ldrsh	r6, [r4, r2]
    u16_t comp = byteOne | (byteTwo << 8);
    2858:	431d      	orrs	r5, r3
    sample.accelZint =  sample.accelZint >> 4;
    285a:	b22d      	sxth	r5, r5
    sample.accelYint =  sample.accelYint >> 4;
    285c:	1136      	asrs	r6, r6, #4
    sample.accelXint =  sample.accelXint >> 4;
    285e:	1100      	asrs	r0, r0, #4
    sample.accelZint =  sample.accelZint >> 4;
    2860:	112d      	asrs	r5, r5, #4
    sample.accelYint =  sample.accelYint >> 4;
    2862:	8526      	strh	r6, [r4, #40]	; 0x28
    sample.accelX = sample.accelXint * BMI055_ACCEL_16G_DIV;
    2864:	4b50      	ldr	r3, [pc, #320]	; (29a8 <sampleTick+0x2d4>)
    sample.accelXint =  sample.accelXint >> 4;
    2866:	8420      	strh	r0, [r4, #32]
    sample.accelZint =  sample.accelZint >> 4;
    2868:	8625      	strh	r5, [r4, #48]	; 0x30
    sample.accelX = sample.accelXint * BMI055_ACCEL_16G_DIV;
    286a:	4798      	blx	r3
    286c:	23fe      	movs	r3, #254	; 0xfe
    286e:	2200      	movs	r2, #0
    2870:	4f4f      	ldr	r7, [pc, #316]	; (29b0 <sampleTick+0x2dc>)
    2872:	059b      	lsls	r3, r3, #22
    2874:	47b8      	blx	r7
    2876:	4b50      	ldr	r3, [pc, #320]	; (29b8 <sampleTick+0x2e4>)
    2878:	4798      	blx	r3
    sample.accelY = sample.accelYint * BMI055_ACCEL_16G_DIV;
    287a:	4b4b      	ldr	r3, [pc, #300]	; (29a8 <sampleTick+0x2d4>)
    sample.accelX = sample.accelXint * BMI055_ACCEL_16G_DIV;
    287c:	6260      	str	r0, [r4, #36]	; 0x24
    sample.accelY = sample.accelYint * BMI055_ACCEL_16G_DIV;
    287e:	0030      	movs	r0, r6
    2880:	4798      	blx	r3
    2882:	23fe      	movs	r3, #254	; 0xfe
    2884:	2200      	movs	r2, #0
    2886:	059b      	lsls	r3, r3, #22
    2888:	47b8      	blx	r7
    288a:	4b4b      	ldr	r3, [pc, #300]	; (29b8 <sampleTick+0x2e4>)
    288c:	4798      	blx	r3
    if (altimeter.pointingUp) {
    288e:	4b56      	ldr	r3, [pc, #344]	; (29e8 <sampleTick+0x314>)
    sample.accelY = sample.accelYint * BMI055_ACCEL_16G_DIV;
    2890:	62e0      	str	r0, [r4, #44]	; 0x2c
    if (altimeter.pointingUp) {
    2892:	795b      	ldrb	r3, [r3, #5]
    sample.accelY = sample.accelYint * BMI055_ACCEL_16G_DIV;
    2894:	003e      	movs	r6, r7
    2896:	4f4d      	ldr	r7, [pc, #308]	; (29cc <sampleTick+0x2f8>)
    if (altimeter.pointingUp) {
    2898:	2b00      	cmp	r3, #0
    289a:	d100      	bne.n	289e <sampleTick+0x1ca>
    289c:	e06f      	b.n	297e <sampleTick+0x2aa>
        sample.accelZ = -sample.accelZint * BMI055_ACCEL_16G_DIV;
    289e:	4268      	negs	r0, r5
    28a0:	4b41      	ldr	r3, [pc, #260]	; (29a8 <sampleTick+0x2d4>)
    28a2:	4798      	blx	r3
    28a4:	23fe      	movs	r3, #254	; 0xfe
    28a6:	2200      	movs	r2, #0
    28a8:	0035      	movs	r5, r6
    28aa:	059b      	lsls	r3, r3, #22
        sample.accelZ = sample.accelZint * BMI055_ACCEL_16G_DIV;
    28ac:	47a8      	blx	r5
    28ae:	4b42      	ldr	r3, [pc, #264]	; (29b8 <sampleTick+0x2e4>)
    28b0:	4798      	blx	r3
    PORT->Group[p.group].OUTCLR.reg = (1<<p.pin);
    28b2:	2380      	movs	r3, #128	; 0x80
    28b4:	00db      	lsls	r3, r3, #3
    spiDataOut(GYRO_SPI, BMI055_X_GYRO_LSB | BMI055_READ_REG);
    28b6:	2182      	movs	r1, #130	; 0x82
        sample.accelZ = sample.accelZint * BMI055_ACCEL_16G_DIV;
    28b8:	6360      	str	r0, [r4, #52]	; 0x34
    28ba:	617b      	str	r3, [r7, #20]
    spiDataOut(GYRO_SPI, BMI055_X_GYRO_LSB | BMI055_READ_REG);
    28bc:	2000      	movs	r0, #0
    28be:	4b44      	ldr	r3, [pc, #272]	; (29d0 <sampleTick+0x2fc>)
    28c0:	4798      	blx	r3
    byteOne = spiDataIn(GYRO_SPI);
    28c2:	4c47      	ldr	r4, [pc, #284]	; (29e0 <sampleTick+0x30c>)
    28c4:	2000      	movs	r0, #0
    28c6:	47a0      	blx	r4
    28c8:	0005      	movs	r5, r0
    byteTwo = spiDataIn(GYRO_SPI);
    28ca:	2000      	movs	r0, #0
    28cc:	47a0      	blx	r4
    sample.gyroXint = twosComp(byteOne,byteTwo);
    28ce:	4e31      	ldr	r6, [pc, #196]	; (2994 <sampleTick+0x2c0>)
    u16_t comp = byteOne | (byteTwo << 8);
    28d0:	0200      	lsls	r0, r0, #8
    28d2:	4305      	orrs	r5, r0
    byteOne = spiDataIn(GYRO_SPI);
    28d4:	2000      	movs	r0, #0
    sample.gyroXint = twosComp(byteOne,byteTwo);
    28d6:	8735      	strh	r5, [r6, #56]	; 0x38
    byteOne = spiDataIn(GYRO_SPI);
    28d8:	47a0      	blx	r4
    28da:	0005      	movs	r5, r0
    byteTwo = spiDataIn(GYRO_SPI);
    28dc:	2000      	movs	r0, #0
    28de:	47a0      	blx	r4
    u16_t comp = byteOne | (byteTwo << 8);
    28e0:	0200      	lsls	r0, r0, #8
    28e2:	4328      	orrs	r0, r5
    sample.gyroYint = twosComp(byteOne,byteTwo);
    28e4:	1cb5      	adds	r5, r6, #2
    28e6:	87e8      	strh	r0, [r5, #62]	; 0x3e
    byteOne = spiDataIn(GYRO_SPI);
    28e8:	2000      	movs	r0, #0
    28ea:	47a0      	blx	r4
    28ec:	9002      	str	r0, [sp, #8]
    byteTwo = spiDataIn(GYRO_SPI);
    28ee:	2000      	movs	r0, #0
    28f0:	47a0      	blx	r4
    PORT->Group[p.group].OUTSET.reg = (1<<p.pin);
    28f2:	2280      	movs	r2, #128	; 0x80
    28f4:	00d2      	lsls	r2, r2, #3
    28f6:	61ba      	str	r2, [r7, #24]
    28f8:	0003      	movs	r3, r0
    sample.gyroXint = sample.gyroXint >> 4;
    28fa:	2238      	movs	r2, #56	; 0x38
    28fc:	5eb0      	ldrsh	r0, [r6, r2]
    u16_t comp = byteOne | (byteTwo << 8);
    28fe:	9f02      	ldr	r7, [sp, #8]
    sample.gyroXint = sample.gyroXint >> 4;
    2900:	1100      	asrs	r0, r0, #4
    2902:	8730      	strh	r0, [r6, #56]	; 0x38
    sample.gyroYint = sample.gyroYint >> 4;
    2904:	223e      	movs	r2, #62	; 0x3e
    2906:	5eac      	ldrsh	r4, [r5, r2]
    u16_t comp = byteOne | (byteTwo << 8);
    2908:	021b      	lsls	r3, r3, #8
    sample.gyroYint = sample.gyroYint >> 4;
    290a:	1122      	asrs	r2, r4, #4
    290c:	9201      	str	r2, [sp, #4]
    290e:	466a      	mov	r2, sp
    u16_t comp = byteOne | (byteTwo << 8);
    2910:	431f      	orrs	r7, r3
    sample.gyroYint = sample.gyroYint >> 4;
    2912:	8892      	ldrh	r2, [r2, #4]
    sample.gyroZint = sample.gyroZint >> 4;
    2914:	b23f      	sxth	r7, r7
    sample.gyroYint = sample.gyroYint >> 4;
    2916:	87ea      	strh	r2, [r5, #62]	; 0x3e
    sample.gyroZint = sample.gyroZint >> 4;
    2918:	113b      	asrs	r3, r7, #4
    291a:	466a      	mov	r2, sp
    291c:	9302      	str	r3, [sp, #8]
    291e:	0033      	movs	r3, r6
    2920:	8912      	ldrh	r2, [r2, #8]
    2922:	3348      	adds	r3, #72	; 0x48
    sample.gyroX =  sample.gyroXint * BMI055_GYRO_2000DS_DIV;
    2924:	4f20      	ldr	r7, [pc, #128]	; (29a8 <sampleTick+0x2d4>)
    sample.gyroZint = sample.gyroZint >> 4;
    2926:	801a      	strh	r2, [r3, #0]
    sample.gyroX =  sample.gyroXint * BMI055_GYRO_2000DS_DIV;
    2928:	47b8      	blx	r7
    292a:	23fe      	movs	r3, #254	; 0xfe
    292c:	4c20      	ldr	r4, [pc, #128]	; (29b0 <sampleTick+0x2dc>)
    292e:	2200      	movs	r2, #0
    2930:	059b      	lsls	r3, r3, #22
    2932:	47a0      	blx	r4
    2934:	4d20      	ldr	r5, [pc, #128]	; (29b8 <sampleTick+0x2e4>)
    2936:	47a8      	blx	r5
    2938:	63f0      	str	r0, [r6, #60]	; 0x3c
    sample.gyroY =  sample.gyroYint * BMI055_GYRO_2000DS_DIV;
    293a:	9801      	ldr	r0, [sp, #4]
    293c:	47b8      	blx	r7
    293e:	23fe      	movs	r3, #254	; 0xfe
    2940:	2200      	movs	r2, #0
    2942:	059b      	lsls	r3, r3, #22
    2944:	47a0      	blx	r4
    2946:	47a8      	blx	r5
    2948:	6470      	str	r0, [r6, #68]	; 0x44
    sample.gyroZ =  sample.gyroZint * BMI055_GYRO_2000DS_DIV;
    294a:	9802      	ldr	r0, [sp, #8]
    294c:	47b8      	blx	r7
    294e:	23fe      	movs	r3, #254	; 0xfe
    2950:	2200      	movs	r2, #0
    2952:	059b      	lsls	r3, r3, #22
    2954:	47a0      	blx	r4
    2956:	47a8      	blx	r5
    2958:	64f0      	str	r0, [r6, #76]	; 0x4c
    delay_us(400);
    295a:	20c8      	movs	r0, #200	; 0xc8
    295c:	4b1d      	ldr	r3, [pc, #116]	; (29d4 <sampleTick+0x300>)
    295e:	0040      	lsls	r0, r0, #1
    2960:	4798      	blx	r3
    u32_t PressureRaw = readMS5803AdcResults();
    2962:	4b1d      	ldr	r3, [pc, #116]	; (29d8 <sampleTick+0x304>)
    2964:	4798      	blx	r3
    ConvertPressureTemperature(PressureRaw, tempRaw, &sample.temperatureCelcus, &sample.pressureMbar);
    2966:	4a21      	ldr	r2, [pc, #132]	; (29ec <sampleTick+0x318>)
    2968:	9903      	ldr	r1, [sp, #12]
    296a:	4b21      	ldr	r3, [pc, #132]	; (29f0 <sampleTick+0x31c>)
    296c:	4c21      	ldr	r4, [pc, #132]	; (29f4 <sampleTick+0x320>)
    296e:	47a0      	blx	r4
    sample.pressureAltitude = paToFeetNOAA(sample.pressureMbar);
    2970:	6d30      	ldr	r0, [r6, #80]	; 0x50
    2972:	4b21      	ldr	r3, [pc, #132]	; (29f8 <sampleTick+0x324>)
    2974:	4798      	blx	r3
    2976:	65b0      	str	r0, [r6, #88]	; 0x58
    2978:	65f1      	str	r1, [r6, #92]	; 0x5c
}
    297a:	b005      	add	sp, #20
    297c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        sample.accelZ = sample.accelZint * BMI055_ACCEL_16G_DIV;
    297e:	0028      	movs	r0, r5
    2980:	4b09      	ldr	r3, [pc, #36]	; (29a8 <sampleTick+0x2d4>)
    2982:	4798      	blx	r3
    2984:	23fe      	movs	r3, #254	; 0xfe
    2986:	2200      	movs	r2, #0
    2988:	059b      	lsls	r3, r3, #22
    298a:	4d09      	ldr	r5, [pc, #36]	; (29b0 <sampleTick+0x2dc>)
    298c:	e78e      	b.n	28ac <sampleTick+0x1d8>
    298e:	46c0      	nop			; (mov r8, r8)
    2990:	20000535 	.word	0x20000535
    2994:	200007d8 	.word	0x200007d8
    2998:	00000f31 	.word	0x00000f31
    299c:	20000524 	.word	0x20000524
    29a0:	0000637c 	.word	0x0000637c
    29a4:	00000c01 	.word	0x00000c01
    29a8:	00005f11 	.word	0x00005f11
    29ac:	a97e132b 	.word	0xa97e132b
    29b0:	0000533d 	.word	0x0000533d
    29b4:	3f65379f 	.word	0x3f65379f
    29b8:	000060a9 	.word	0x000060a9
    29bc:	42004000 	.word	0x42004000
    29c0:	ffff41c9 	.word	0xffff41c9
    29c4:	abb44e51 	.word	0xabb44e51
    29c8:	3f73f290 	.word	0x3f73f290
    29cc:	41004400 	.word	0x41004400
    29d0:	00002b09 	.word	0x00002b09
    29d4:	00000ebd 	.word	0x00000ebd
    29d8:	000003ad 	.word	0x000003ad
    29dc:	41004494 	.word	0x41004494
    29e0:	00002b21 	.word	0x00002b21
    29e4:	41004498 	.word	0x41004498
    29e8:	20000528 	.word	0x20000528
    29ec:	2000082c 	.word	0x2000082c
    29f0:	20000828 	.word	0x20000828
    29f4:	000003ed 	.word	0x000003ed
    29f8:	00000495 	.word	0x00000495

000029fc <sercomClockEnable>:
#include <util.h>

void sercomClockEnable(SercomId id, uint32_t clock_channel, u8_t divider) {
    29fc:	b570      	push	{r4, r5, r6, lr}
    29fe:	0005      	movs	r5, r0
    // prevent this clock write from changing any other clocks
    PM->APBCMASK.reg |= 1 << (PM_APBCMASK_SERCOM0_Pos + id);
    2a00:	2301      	movs	r3, #1
    2a02:	1cae      	adds	r6, r5, #2
    2a04:	40b3      	lsls	r3, r6
void sercomClockEnable(SercomId id, uint32_t clock_channel, u8_t divider) {
    2a06:	000c      	movs	r4, r1
    PM->APBCMASK.reg |= 1 << (PM_APBCMASK_SERCOM0_Pos + id);
    2a08:	490b      	ldr	r1, [pc, #44]	; (2a38 <sercomClockEnable+0x3c>)
    2a0a:	6a08      	ldr	r0, [r1, #32]
    2a0c:	4303      	orrs	r3, r0
    2a0e:	620b      	str	r3, [r1, #32]


    if (clock_channel != 0) {
    2a10:	2c00      	cmp	r4, #0
    2a12:	d003      	beq.n	2a1c <sercomClockEnable+0x20>
        // clock generators 3-8 have 8 division factor bits - DIV[7:0]
        gclkEnable(clock_channel, GCLK_SOURCE_DFLL48M, divider);
    2a14:	2107      	movs	r1, #7
    2a16:	0020      	movs	r0, r4
    2a18:	4b08      	ldr	r3, [pc, #32]	; (2a3c <sercomClockEnable+0x40>)
    2a1a:	4798      	blx	r3
    }


    // attach clock
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
                        GCLK_CLKCTRL_GEN(clock_channel) |
    2a1c:	23f0      	movs	r3, #240	; 0xf0
    2a1e:	0224      	lsls	r4, r4, #8
    2a20:	011b      	lsls	r3, r3, #4
    2a22:	401c      	ands	r4, r3
    2a24:	2380      	movs	r3, #128	; 0x80
    2a26:	01db      	lsls	r3, r3, #7
    2a28:	431c      	orrs	r4, r3
                        GCLK_CLKCTRL_ID(SERCOM0_GCLK_ID_CORE + id);
    2a2a:	233f      	movs	r3, #63	; 0x3f
    2a2c:	3514      	adds	r5, #20
    2a2e:	401d      	ands	r5, r3
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
    2a30:	4b03      	ldr	r3, [pc, #12]	; (2a40 <sercomClockEnable+0x44>)
                        GCLK_CLKCTRL_GEN(clock_channel) |
    2a32:	4325      	orrs	r5, r4
    GCLK->CLKCTRL.reg = GCLK_CLKCTRL_CLKEN |
    2a34:	805d      	strh	r5, [r3, #2]
}
    2a36:	bd70      	pop	{r4, r5, r6, pc}
    2a38:	40000400 	.word	0x40000400
    2a3c:	00000e6d 	.word	0x00000e6d
    2a40:	40000c00 	.word	0x40000c00

00002a44 <sercomReset>:
    return (Sercom*) (0x42000800U + id * 1024);
    2a44:	4b04      	ldr	r3, [pc, #16]	; (2a58 <sercomReset+0x14>)
    2a46:	0280      	lsls	r0, r0, #10
    2a48:	18c0      	adds	r0, r0, r3


void sercomReset(SercomId id) {
    sercom(id)->SPI.CTRLA.reg = SERCOM_SPI_CTRLA_SWRST;
    2a4a:	2301      	movs	r3, #1
    2a4c:	6003      	str	r3, [r0, #0]
    while(sercom(id)->SPI.CTRLA.reg & SERCOM_SPI_CTRLA_SWRST);
    2a4e:	6802      	ldr	r2, [r0, #0]
    2a50:	421a      	tst	r2, r3
    2a52:	d1fc      	bne.n	2a4e <sercomReset+0xa>
}
    2a54:	4770      	bx	lr
    2a56:	46c0      	nop			; (mov r8, r8)
    2a58:	42000800 	.word	0x42000800

00002a5c <sercomSpiMasterInit>:
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
}


void sercomSpiMasterInit(SercomId id, u32_t dipo, u32_t dopo, bool cpol, bool cpha, u8_t baud) {
    2a5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2a5e:	0004      	movs	r4, r0
    2a60:	9300      	str	r3, [sp, #0]
    2a62:	ab08      	add	r3, sp, #32
    2a64:	781b      	ldrb	r3, [r3, #0]
    2a66:	0016      	movs	r6, r2
    2a68:	9301      	str	r3, [sp, #4]
    2a6a:	ab09      	add	r3, sp, #36	; 0x24
    2a6c:	781f      	ldrb	r7, [r3, #0]

    sercomReset(id);
    2a6e:	4b12      	ldr	r3, [pc, #72]	; (2ab8 <sercomSpiMasterInit+0x5c>)
void sercomSpiMasterInit(SercomId id, u32_t dipo, u32_t dopo, bool cpol, bool cpha, u8_t baud) {
    2a70:	000d      	movs	r5, r1
    sercomReset(id);
    2a72:	4798      	blx	r3
    2a74:	4b11      	ldr	r3, [pc, #68]	; (2abc <sercomSpiMasterInit+0x60>)
    2a76:	02a4      	lsls	r4, r4, #10
    2a78:	18e4      	adds	r4, r4, r3

    sercom(id)->SPI.CTRLB.reg
        = SERCOM_SPI_CTRLB_RXEN;
    2a7a:	2380      	movs	r3, #128	; 0x80
    2a7c:	029b      	lsls	r3, r3, #10
    2a7e:	6063      	str	r3, [r4, #4]
    sercom(id)->SPI.BAUD.reg = baud;

    sercom(id)->SPI.CTRLA.reg
        = SERCOM_SPI_CTRLA_ENABLE
          | SERCOM_SPI_CTRLA_MODE_SPI_MASTER
          | SERCOM_SPI_CTRLA_DIPO(dipo)
    2a80:	23c0      	movs	r3, #192	; 0xc0
    2a82:	052d      	lsls	r5, r5, #20
    2a84:	039b      	lsls	r3, r3, #14
    2a86:	401d      	ands	r5, r3
          | SERCOM_SPI_CTRLA_DOPO(dopo)
    2a88:	23c0      	movs	r3, #192	; 0xc0
    2a8a:	0436      	lsls	r6, r6, #16
    2a8c:	029b      	lsls	r3, r3, #10
    2a8e:	401e      	ands	r6, r3
    2a90:	230e      	movs	r3, #14
    2a92:	431e      	orrs	r6, r3
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
    2a94:	9b00      	ldr	r3, [sp, #0]
    2a96:	4335      	orrs	r5, r6
    2a98:	1e5a      	subs	r2, r3, #1
    2a9a:	4193      	sbcs	r3, r2
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
    2a9c:	9a01      	ldr	r2, [sp, #4]
          | (cpol ? SERCOM_SPI_CTRLA_CPOL : 0)
    2a9e:	075b      	lsls	r3, r3, #29
          | (cpha ? SERCOM_SPI_CTRLA_CPHA : 0);
    2aa0:	1e51      	subs	r1, r2, #1
    2aa2:	418a      	sbcs	r2, r1
    2aa4:	431d      	orrs	r5, r3
    2aa6:	0712      	lsls	r2, r2, #28
    2aa8:	4315      	orrs	r5, r2
    sercom(id)->SPI.BAUD.reg = baud;
    2aaa:	7327      	strb	r7, [r4, #12]
        = SERCOM_SPI_CTRLA_ENABLE
    2aac:	6025      	str	r5, [r4, #0]
        };
    }
}

static inline void SPI_sync(SercomId id) {
    while  (sercom(id)->SPI.SYNCBUSY.bit.CTRLB);
    2aae:	69e3      	ldr	r3, [r4, #28]
    2ab0:	075b      	lsls	r3, r3, #29
    2ab2:	d4fc      	bmi.n	2aae <sercomSpiMasterInit+0x52>

    SPI_sync(id);
}
    2ab4:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    2ab6:	46c0      	nop			; (mov r8, r8)
    2ab8:	00002a45 	.word	0x00002a45
    2abc:	42000800 	.word	0x42000800

00002ac0 <sercomUartInit>:




void sercomUartInit(SercomId id, u32_t rxpo, u32_t txpo, int32_t fBAUD) {
    2ac0:	b570      	push	{r4, r5, r6, lr}
    2ac2:	0006      	movs	r6, r0

    //float BAUD = 65536*(1-(16*(115200/(48000000/8))));


    sercomReset(id);
    2ac4:	4b0c      	ldr	r3, [pc, #48]	; (2af8 <sercomUartInit+0x38>)
void sercomUartInit(SercomId id, u32_t rxpo, u32_t txpo, int32_t fBAUD) {
    2ac6:	000d      	movs	r5, r1
    2ac8:	0014      	movs	r4, r2
    sercomReset(id);
    2aca:	4798      	blx	r3
    return (Sercom*) (0x42000800U + id * 1024);
    2acc:	4b0b      	ldr	r3, [pc, #44]	; (2afc <sercomUartInit+0x3c>)
    2ace:	02b0      	lsls	r0, r6, #10
    2ad0:	18c0      	adds	r0, r0, r3
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    2ad2:	2304      	movs	r3, #4
    sercom(id)->USART.CTRLA.reg
        = SERCOM_USART_CTRLA_ENABLE
          | SERCOM_USART_CTRLA_MODE_USART_INT_CLK
          | SERCOM_SPI_CTRLA_DORD
          | SERCOM_USART_CTRLA_TXPO(txpo)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    2ad4:	22c0      	movs	r2, #192	; 0xc0
    sercom(id)->USART.CTRLA.reg = SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
    2ad6:	6003      	str	r3, [r0, #0]
    sercom(id)->USART.BAUD.reg = 45403;
    2ad8:	4b09      	ldr	r3, [pc, #36]	; (2b00 <sercomUartInit+0x40>)
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    2ada:	0392      	lsls	r2, r2, #14
    sercom(id)->USART.BAUD.reg = 45403;
    2adc:	8183      	strh	r3, [r0, #12]
        = SERCOM_USART_CTRLB_RXEN
    2ade:	23c0      	movs	r3, #192	; 0xc0
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    2ae0:	052d      	lsls	r5, r5, #20
    2ae2:	4015      	ands	r5, r2
    2ae4:	4a07      	ldr	r2, [pc, #28]	; (2b04 <sercomUartInit+0x44>)
        = SERCOM_USART_CTRLB_RXEN
    2ae6:	029b      	lsls	r3, r3, #10
          | SERCOM_USART_CTRLA_TXPO(txpo)
    2ae8:	0424      	lsls	r4, r4, #16
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    2aea:	432a      	orrs	r2, r5
          | SERCOM_USART_CTRLA_TXPO(txpo)
    2aec:	401c      	ands	r4, r3
          | SERCOM_USART_CTRLA_RXPO(rxpo);
    2aee:	4322      	orrs	r2, r4
        = SERCOM_USART_CTRLB_RXEN
    2af0:	6043      	str	r3, [r0, #4]
        = SERCOM_USART_CTRLA_ENABLE
    2af2:	6002      	str	r2, [r0, #0]
}
    2af4:	bd70      	pop	{r4, r5, r6, pc}
    2af6:	46c0      	nop			; (mov r8, r8)
    2af8:	00002a45 	.word	0x00002a45
    2afc:	42000800 	.word	0x42000800
    2b00:	ffffb15b 	.word	0xffffb15b
    2b04:	40000006 	.word	0x40000006

00002b08 <spiDataOut>:
    2b08:	4b04      	ldr	r3, [pc, #16]	; (2b1c <spiDataOut+0x14>)
    2b0a:	0280      	lsls	r0, r0, #10
    2b0c:	18c0      	adds	r0, r0, r3
    while(sercom(id)->SPI.INTFLAG.bit.RXC == 0);
    return sercom(id)->SPI.DATA.reg;
}

void spiDataOut(SercomId id, u8_t data) {
    sercom(id)->SPI.DATA.reg = data;
    2b0e:	6281      	str	r1, [r0, #40]	; 0x28
    while(sercom(id)->SPI.INTFLAG.bit.RXC == 0);
    2b10:	7e03      	ldrb	r3, [r0, #24]
    2b12:	075b      	lsls	r3, r3, #29
    2b14:	d5fc      	bpl.n	2b10 <spiDataOut+0x8>
    u8_t dummy = sercom(id)->SPI.DATA.reg;
    2b16:	6a83      	ldr	r3, [r0, #40]	; 0x28
}
    2b18:	4770      	bx	lr
    2b1a:	46c0      	nop			; (mov r8, r8)
    2b1c:	42000800 	.word	0x42000800

00002b20 <spiDataIn>:
    2b20:	4b05      	ldr	r3, [pc, #20]	; (2b38 <spiDataIn+0x18>)
    2b22:	0280      	lsls	r0, r0, #10
    2b24:	18c0      	adds	r0, r0, r3

u8_t spiDataIn(SercomId id) {
    sercom(id)->SPI.DATA.reg = 0xFF;
    2b26:	23ff      	movs	r3, #255	; 0xff
    2b28:	6283      	str	r3, [r0, #40]	; 0x28
    while(sercom(id)->SPI.INTFLAG.bit.RXC == 0);
    2b2a:	7e03      	ldrb	r3, [r0, #24]
    2b2c:	075b      	lsls	r3, r3, #29
    2b2e:	d5fc      	bpl.n	2b2a <spiDataIn+0xa>
    return sercom(id)->SPI.DATA.reg;
    2b30:	6a80      	ldr	r0, [r0, #40]	; 0x28
    2b32:	b2c0      	uxtb	r0, r0
}
    2b34:	4770      	bx	lr
    2b36:	46c0      	nop			; (mov r8, r8)
    2b38:	42000800 	.word	0x42000800

00002b3c <usartDataOut>:
    2b3c:	4b04      	ldr	r3, [pc, #16]	; (2b50 <usartDataOut+0x14>)
    2b3e:	0280      	lsls	r0, r0, #10
    2b40:	18c0      	adds	r0, r0, r3

void usartDataOut(SercomId id, u8_t data) {
    sercom(id)->USART.DATA.reg = data;
    2b42:	b289      	uxth	r1, r1
    2b44:	8501      	strh	r1, [r0, #40]	; 0x28
    while(sercom(id)->USART.INTFLAG.bit.DRE == 0);
    2b46:	7e03      	ldrb	r3, [r0, #24]
    2b48:	07db      	lsls	r3, r3, #31
    2b4a:	d5fc      	bpl.n	2b46 <usartDataOut+0xa>
}
    2b4c:	4770      	bx	lr
    2b4e:	46c0      	nop			; (mov r8, r8)
    2b50:	42000800 	.word	0x42000800

00002b54 <usartDataIn>:
    2b54:	4b02      	ldr	r3, [pc, #8]	; (2b60 <usartDataIn+0xc>)
    2b56:	0280      	lsls	r0, r0, #10
    2b58:	18c0      	adds	r0, r0, r3

u8_t usartDataIn(SercomId id) {
    return sercom(id)->USART.DATA.reg;
    2b5a:	8d00      	ldrh	r0, [r0, #40]	; 0x28
    2b5c:	b2c0      	uxtb	r0, r0
}
    2b5e:	4770      	bx	lr
    2b60:	42000800 	.word	0x42000800

00002b64 <findMainAltitude>:
#include <boardDefines.h>


void findMainAltitude() {

    if (deploymentSettings.channelASettings.ENABLED & deploymentSettings.channelASettings.TYPE == MAIN_t) {
    2b64:	4b10      	ldr	r3, [pc, #64]	; (2ba8 <findMainAltitude+0x44>)
    2b66:	785a      	ldrb	r2, [r3, #1]
    2b68:	2a00      	cmp	r2, #0
    2b6a:	d105      	bne.n	2b78 <findMainAltitude+0x14>
    2b6c:	781a      	ldrb	r2, [r3, #0]
    2b6e:	2a00      	cmp	r2, #0
    2b70:	d002      	beq.n	2b78 <findMainAltitude+0x14>
        deploymentSettings.MAIN_DEPLOY = deploymentSettings.channelASettings.MAIN_DEPLOY;
    2b72:	885a      	ldrh	r2, [r3, #2]
    if ((deploymentSettings.channelCSettings.ENABLED & deploymentSettings.channelCSettings.TYPE == MAIN_t)) {
        deploymentSettings.MAIN_DEPLOY = deploymentSettings.channelCSettings.MAIN_DEPLOY;
        return;
    }
    if ((deploymentSettings.channelDSettings.ENABLED & deploymentSettings.channelDSettings.TYPE == MAIN_t)) {
        deploymentSettings.MAIN_DEPLOY = deploymentSettings.channelDSettings.MAIN_DEPLOY;
    2b74:	831a      	strh	r2, [r3, #24]
        return;
    }


}
    2b76:	4770      	bx	lr
    if ((deploymentSettings.channelBSettings.ENABLED & deploymentSettings.channelBSettings.TYPE == MAIN_t)) {
    2b78:	79da      	ldrb	r2, [r3, #7]
    2b7a:	2a00      	cmp	r2, #0
    2b7c:	d104      	bne.n	2b88 <findMainAltitude+0x24>
    2b7e:	799a      	ldrb	r2, [r3, #6]
    2b80:	2a00      	cmp	r2, #0
    2b82:	d001      	beq.n	2b88 <findMainAltitude+0x24>
        deploymentSettings.MAIN_DEPLOY = deploymentSettings.channelBSettings.MAIN_DEPLOY;
    2b84:	891a      	ldrh	r2, [r3, #8]
    2b86:	e7f5      	b.n	2b74 <findMainAltitude+0x10>
    if ((deploymentSettings.channelCSettings.ENABLED & deploymentSettings.channelCSettings.TYPE == MAIN_t)) {
    2b88:	7b5a      	ldrb	r2, [r3, #13]
    2b8a:	2a00      	cmp	r2, #0
    2b8c:	d104      	bne.n	2b98 <findMainAltitude+0x34>
    2b8e:	7b1a      	ldrb	r2, [r3, #12]
    2b90:	2a00      	cmp	r2, #0
    2b92:	d001      	beq.n	2b98 <findMainAltitude+0x34>
        deploymentSettings.MAIN_DEPLOY = deploymentSettings.channelCSettings.MAIN_DEPLOY;
    2b94:	89da      	ldrh	r2, [r3, #14]
    2b96:	e7ed      	b.n	2b74 <findMainAltitude+0x10>
    if ((deploymentSettings.channelDSettings.ENABLED & deploymentSettings.channelDSettings.TYPE == MAIN_t)) {
    2b98:	7cda      	ldrb	r2, [r3, #19]
    2b9a:	2a00      	cmp	r2, #0
    2b9c:	d1eb      	bne.n	2b76 <findMainAltitude+0x12>
    2b9e:	7c9a      	ldrb	r2, [r3, #18]
    2ba0:	2a00      	cmp	r2, #0
    2ba2:	d0e8      	beq.n	2b76 <findMainAltitude+0x12>
        deploymentSettings.MAIN_DEPLOY = deploymentSettings.channelDSettings.MAIN_DEPLOY;
    2ba4:	8a9a      	ldrh	r2, [r3, #20]
    2ba6:	e7e5      	b.n	2b74 <findMainAltitude+0x10>
    2ba8:	20000508 	.word	0x20000508

00002bac <applyDefaultSettings>:
    deploymentSettings.channelASettings.MAIN_DEPLOY = 0;
    deploymentSettings.channelASettings.APPOGE_DELAY = 0;

    deploymentSettings.channelBSettings.ENABLED = true;
    deploymentSettings.channelBSettings.TYPE = MAIN_t;
    deploymentSettings.channelBSettings.MAIN_DEPLOY = 300;
    2bac:	2096      	movs	r0, #150	; 0x96
    deploymentSettings.channelASettings.MAIN_DEPLOY = 0;
    2bae:	2200      	movs	r2, #0
    deploymentSettings.channelASettings.ENABLED = true;
    2bb0:	2101      	movs	r1, #1
    2bb2:	4b09      	ldr	r3, [pc, #36]	; (2bd8 <applyDefaultSettings+0x2c>)
    deploymentSettings.channelBSettings.MAIN_DEPLOY = 300;
    2bb4:	0040      	lsls	r0, r0, #1
    deploymentSettings.channelASettings.ENABLED = true;
    2bb6:	7019      	strb	r1, [r3, #0]
    deploymentSettings.channelASettings.TYPE = DROGUE_t;
    2bb8:	7059      	strb	r1, [r3, #1]
    deploymentSettings.channelASettings.MAIN_DEPLOY = 0;
    2bba:	805a      	strh	r2, [r3, #2]
    deploymentSettings.channelASettings.APPOGE_DELAY = 0;
    2bbc:	711a      	strb	r2, [r3, #4]
    deploymentSettings.channelBSettings.ENABLED = true;
    2bbe:	7199      	strb	r1, [r3, #6]
    deploymentSettings.channelBSettings.TYPE = MAIN_t;
    2bc0:	71da      	strb	r2, [r3, #7]
    deploymentSettings.channelBSettings.MAIN_DEPLOY = 300;
    2bc2:	8118      	strh	r0, [r3, #8]
    deploymentSettings.channelBSettings.APPOGE_DELAY = 0;
    2bc4:	729a      	strb	r2, [r3, #10]

    deploymentSettings.channelCSettings.ENABLED = false;
    2bc6:	731a      	strb	r2, [r3, #12]
    deploymentSettings.channelCSettings.TYPE = DROGUE_t;
    2bc8:	7359      	strb	r1, [r3, #13]
    deploymentSettings.channelCSettings.MAIN_DEPLOY = 0;
    2bca:	81da      	strh	r2, [r3, #14]
    deploymentSettings.channelCSettings.APPOGE_DELAY = 0;
    2bcc:	741a      	strb	r2, [r3, #16]

    deploymentSettings.channelDSettings.ENABLED = false;
    2bce:	749a      	strb	r2, [r3, #18]
    deploymentSettings.channelDSettings.TYPE = MAIN_t;
    2bd0:	74da      	strb	r2, [r3, #19]
    deploymentSettings.channelDSettings.MAIN_DEPLOY = 300;
    2bd2:	8298      	strh	r0, [r3, #20]
    deploymentSettings.channelDSettings.APPOGE_DELAY = 0;
    2bd4:	759a      	strb	r2, [r3, #22]
}
    2bd6:	4770      	bx	lr
    2bd8:	20000508 	.word	0x20000508

00002bdc <putSettings>:

void putSettings() {
    2bdc:	b500      	push	{lr}
    2bde:	b0c1      	sub	sp, #260	; 0x104

    u8_t settings[256];

    settings[0] = deploymentSettings.channelASettings.ENABLED;
    2be0:	4669      	mov	r1, sp
    settings[1] = deploymentSettings.channelASettings.TYPE;
    settings[2] = deploymentSettings.channelASettings.MAIN_DEPLOY >> 8;
    2be2:	4668      	mov	r0, sp
    settings[0] = deploymentSettings.channelASettings.ENABLED;
    2be4:	4b17      	ldr	r3, [pc, #92]	; (2c44 <putSettings+0x68>)
    2be6:	781a      	ldrb	r2, [r3, #0]
    2be8:	700a      	strb	r2, [r1, #0]
    settings[1] = deploymentSettings.channelASettings.TYPE;
    2bea:	785a      	ldrb	r2, [r3, #1]
    2bec:	704a      	strb	r2, [r1, #1]
    settings[2] = deploymentSettings.channelASettings.MAIN_DEPLOY >> 8;
    2bee:	885a      	ldrh	r2, [r3, #2]
    2bf0:	0a11      	lsrs	r1, r2, #8
    2bf2:	7081      	strb	r1, [r0, #2]
    settings[3] = deploymentSettings.channelASettings.MAIN_DEPLOY >> 0;
    2bf4:	70c2      	strb	r2, [r0, #3]
    settings[4] = deploymentSettings.channelASettings.APPOGE_DELAY;
    2bf6:	791a      	ldrb	r2, [r3, #4]
    2bf8:	7102      	strb	r2, [r0, #4]

    settings[5] = deploymentSettings.channelBSettings.ENABLED;
    2bfa:	799a      	ldrb	r2, [r3, #6]
    2bfc:	7142      	strb	r2, [r0, #5]
    settings[6] = deploymentSettings.channelBSettings.TYPE;
    2bfe:	79da      	ldrb	r2, [r3, #7]
    2c00:	7182      	strb	r2, [r0, #6]
    settings[7] = deploymentSettings.channelBSettings.MAIN_DEPLOY >> 8;
    2c02:	891a      	ldrh	r2, [r3, #8]
    2c04:	0a11      	lsrs	r1, r2, #8
    2c06:	71c1      	strb	r1, [r0, #7]
    settings[8] = deploymentSettings.channelBSettings.MAIN_DEPLOY >> 0;
    2c08:	7202      	strb	r2, [r0, #8]
    settings[9] = deploymentSettings.channelBSettings.APPOGE_DELAY;
    2c0a:	7a9a      	ldrb	r2, [r3, #10]
    2c0c:	7242      	strb	r2, [r0, #9]

    settings[10] = deploymentSettings.channelCSettings.ENABLED;
    2c0e:	7b1a      	ldrb	r2, [r3, #12]
    2c10:	7282      	strb	r2, [r0, #10]
    settings[11] = deploymentSettings.channelCSettings.TYPE;
    2c12:	7b5a      	ldrb	r2, [r3, #13]
    2c14:	72c2      	strb	r2, [r0, #11]
    settings[12] = deploymentSettings.channelCSettings.MAIN_DEPLOY >> 8;
    2c16:	89da      	ldrh	r2, [r3, #14]
    2c18:	0a11      	lsrs	r1, r2, #8
    2c1a:	7301      	strb	r1, [r0, #12]
    settings[13] = deploymentSettings.channelCSettings.MAIN_DEPLOY >> 0;
    2c1c:	7342      	strb	r2, [r0, #13]
    settings[14] = deploymentSettings.channelCSettings.APPOGE_DELAY;
    2c1e:	7c1a      	ldrb	r2, [r3, #16]
    2c20:	7382      	strb	r2, [r0, #14]

    settings[15] = deploymentSettings.channelDSettings.ENABLED;
    2c22:	7c9a      	ldrb	r2, [r3, #18]
    2c24:	73c2      	strb	r2, [r0, #15]
    settings[16] = deploymentSettings.channelDSettings.TYPE;
    2c26:	7cda      	ldrb	r2, [r3, #19]
    2c28:	7402      	strb	r2, [r0, #16]
    settings[17] = deploymentSettings.channelDSettings.MAIN_DEPLOY >> 8;
    2c2a:	8a9a      	ldrh	r2, [r3, #20]
    2c2c:	0a11      	lsrs	r1, r2, #8
    2c2e:	7441      	strb	r1, [r0, #17]
    settings[18] = deploymentSettings.channelDSettings.MAIN_DEPLOY >> 0;
    2c30:	7482      	strb	r2, [r0, #18]
    settings[19] = deploymentSettings.channelDSettings.APPOGE_DELAY;
    2c32:	7d9b      	ldrb	r3, [r3, #22]
    settings[18] = deploymentSettings.channelDSettings.MAIN_DEPLOY >> 0;
    2c34:	4669      	mov	r1, sp
    settings[19] = deploymentSettings.channelDSettings.APPOGE_DELAY;
    2c36:	74c3      	strb	r3, [r0, #19]

    settings[20] = 0x00;
    2c38:	2000      	movs	r0, #0

    AT25SEWritePage(0x00,settings);
    2c3a:	4b03      	ldr	r3, [pc, #12]	; (2c48 <putSettings+0x6c>)
    settings[20] = 0x00;
    2c3c:	7508      	strb	r0, [r1, #20]
    AT25SEWritePage(0x00,settings);
    2c3e:	4798      	blx	r3
}
    2c40:	b041      	add	sp, #260	; 0x104
    2c42:	bd00      	pop	{pc}
    2c44:	20000508 	.word	0x20000508
    2c48:	0000029d 	.word	0x0000029d

00002c4c <getSettings>:




void getSettings() {
    2c4c:	b500      	push	{lr}
    2c4e:	b0c1      	sub	sp, #260	; 0x104

    u8_t settings[256];

    AT25SEreadPage(0x00 , settings);
    2c50:	4669      	mov	r1, sp
    2c52:	4b2a      	ldr	r3, [pc, #168]	; (2cfc <getSettings+0xb0>)
    2c54:	2000      	movs	r0, #0
    2c56:	4798      	blx	r3

    deploymentSettings.channelASettings.ENABLED = settings[0];
    2c58:	466a      	mov	r2, sp
    2c5a:	7812      	ldrb	r2, [r2, #0]
    2c5c:	4b28      	ldr	r3, [pc, #160]	; (2d00 <getSettings+0xb4>)
    2c5e:	1e51      	subs	r1, r2, #1
    2c60:	418a      	sbcs	r2, r1
    2c62:	701a      	strb	r2, [r3, #0]
    deploymentSettings.channelASettings.TYPE = settings[1];
    2c64:	466a      	mov	r2, sp
    2c66:	7852      	ldrb	r2, [r2, #1]
    2c68:	705a      	strb	r2, [r3, #1]
    deploymentSettings.channelASettings.MAIN_DEPLOY = settings[2] << 8 | (settings[3]);
    2c6a:	466a      	mov	r2, sp
    2c6c:	7891      	ldrb	r1, [r2, #2]
    2c6e:	78d2      	ldrb	r2, [r2, #3]
    2c70:	0209      	lsls	r1, r1, #8
    2c72:	430a      	orrs	r2, r1
    2c74:	805a      	strh	r2, [r3, #2]
    deploymentSettings.channelASettings.APPOGE_DELAY = settings[4];
    2c76:	466a      	mov	r2, sp
    2c78:	7912      	ldrb	r2, [r2, #4]
    2c7a:	711a      	strb	r2, [r3, #4]

    deploymentSettings.channelBSettings.ENABLED = settings[5];
    2c7c:	466a      	mov	r2, sp
    2c7e:	7952      	ldrb	r2, [r2, #5]
    2c80:	1e51      	subs	r1, r2, #1
    2c82:	418a      	sbcs	r2, r1
    2c84:	719a      	strb	r2, [r3, #6]
    deploymentSettings.channelBSettings.TYPE = settings[6];
    2c86:	466a      	mov	r2, sp
    2c88:	7992      	ldrb	r2, [r2, #6]
    2c8a:	71da      	strb	r2, [r3, #7]
    deploymentSettings.channelBSettings.MAIN_DEPLOY = settings[7] << 8 | (settings[8]);
    2c8c:	466a      	mov	r2, sp
    2c8e:	79d1      	ldrb	r1, [r2, #7]
    2c90:	7a12      	ldrb	r2, [r2, #8]
    2c92:	0209      	lsls	r1, r1, #8
    2c94:	430a      	orrs	r2, r1
    2c96:	811a      	strh	r2, [r3, #8]
    deploymentSettings.channelBSettings.APPOGE_DELAY = settings[9];
    2c98:	466a      	mov	r2, sp
    2c9a:	7a52      	ldrb	r2, [r2, #9]
    2c9c:	729a      	strb	r2, [r3, #10]

    deploymentSettings.channelCSettings.ENABLED = settings[10];
    2c9e:	466a      	mov	r2, sp
    2ca0:	7a92      	ldrb	r2, [r2, #10]
    2ca2:	1e51      	subs	r1, r2, #1
    2ca4:	418a      	sbcs	r2, r1
    2ca6:	731a      	strb	r2, [r3, #12]
    deploymentSettings.channelCSettings.TYPE = settings[11];
    2ca8:	466a      	mov	r2, sp
    2caa:	7ad2      	ldrb	r2, [r2, #11]
    2cac:	735a      	strb	r2, [r3, #13]
    deploymentSettings.channelCSettings.MAIN_DEPLOY = settings[12] << 8 | (settings[13]);
    2cae:	466a      	mov	r2, sp
    2cb0:	7b11      	ldrb	r1, [r2, #12]
    2cb2:	7b52      	ldrb	r2, [r2, #13]
    2cb4:	0209      	lsls	r1, r1, #8
    2cb6:	430a      	orrs	r2, r1
    2cb8:	81da      	strh	r2, [r3, #14]
    deploymentSettings.channelCSettings.APPOGE_DELAY = settings[14];
    2cba:	466a      	mov	r2, sp
    2cbc:	7b92      	ldrb	r2, [r2, #14]
    2cbe:	741a      	strb	r2, [r3, #16]

    deploymentSettings.channelDSettings.ENABLED = settings[15];
    2cc0:	466a      	mov	r2, sp
    2cc2:	7bd2      	ldrb	r2, [r2, #15]
    2cc4:	1e51      	subs	r1, r2, #1
    2cc6:	418a      	sbcs	r2, r1
    2cc8:	749a      	strb	r2, [r3, #18]
    deploymentSettings.channelDSettings.TYPE = settings[16];
    2cca:	466a      	mov	r2, sp
    2ccc:	7c12      	ldrb	r2, [r2, #16]
    2cce:	74da      	strb	r2, [r3, #19]
    deploymentSettings.channelDSettings.MAIN_DEPLOY = settings[17] << 8 | (settings[18]);
    2cd0:	466a      	mov	r2, sp
    2cd2:	7c51      	ldrb	r1, [r2, #17]
    2cd4:	7c92      	ldrb	r2, [r2, #18]
    2cd6:	0209      	lsls	r1, r1, #8
    2cd8:	430a      	orrs	r2, r1
    2cda:	829a      	strh	r2, [r3, #20]
    deploymentSettings.channelDSettings.APPOGE_DELAY = settings[19];
    2cdc:	466a      	mov	r2, sp
    2cde:	7cd2      	ldrb	r2, [r2, #19]
    2ce0:	759a      	strb	r2, [r3, #22]


    if (settings[20] == 0xFF) {
    2ce2:	466b      	mov	r3, sp
    2ce4:	7d1b      	ldrb	r3, [r3, #20]
    2ce6:	2bff      	cmp	r3, #255	; 0xff
    2ce8:	d103      	bne.n	2cf2 <getSettings+0xa6>
        applyDefaultSettings();
    2cea:	4b06      	ldr	r3, [pc, #24]	; (2d04 <getSettings+0xb8>)
    2cec:	4798      	blx	r3
        putSettings();
    2cee:	4b06      	ldr	r3, [pc, #24]	; (2d08 <getSettings+0xbc>)
    2cf0:	4798      	blx	r3
    }

    findMainAltitude();
    2cf2:	4b06      	ldr	r3, [pc, #24]	; (2d0c <getSettings+0xc0>)
    2cf4:	4798      	blx	r3

}
    2cf6:	b041      	add	sp, #260	; 0x104
    2cf8:	bd00      	pop	{pc}
    2cfa:	46c0      	nop			; (mov r8, r8)
    2cfc:	00000355 	.word	0x00000355
    2d00:	20000508 	.word	0x20000508
    2d04:	00002bad 	.word	0x00002bad
    2d08:	00002bdd 	.word	0x00002bdd
    2d0c:	00002b65 	.word	0x00002b65

00002d10 <sendFlightLogs>:
#include <util.h>
#include <boardDefines.h>

void sendFlightLogs() {
    2d10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

    //send list of available flight logs
    for (u8_t flightLog = 0; flightLog < 20; ++flightLog) {
    2d12:	2400      	movs	r4, #0

        if (isFlightLogged(flightLog)) {
    2d14:	0020      	movs	r0, r4
    2d16:	4b1e      	ldr	r3, [pc, #120]	; (2d90 <sendFlightLogs+0x80>)
    2d18:	4798      	blx	r3
    2d1a:	2800      	cmp	r0, #0
    2d1c:	d003      	beq.n	2d26 <sendFlightLogs+0x16>

            usartDataOut(USART3, flightLog);
    2d1e:	0021      	movs	r1, r4
    2d20:	2003      	movs	r0, #3
    2d22:	4b1c      	ldr	r3, [pc, #112]	; (2d94 <sendFlightLogs+0x84>)
    2d24:	4798      	blx	r3
    for (u8_t flightLog = 0; flightLog < 20; ++flightLog) {
    2d26:	3401      	adds	r4, #1
    2d28:	b2e4      	uxtb	r4, r4
    2d2a:	2c14      	cmp	r4, #20
    2d2c:	d1f2      	bne.n	2d14 <sendFlightLogs+0x4>
        }
    }
    //done sending flight numbers
    usartDataOut(USART3, 0xFF);
    2d2e:	21ff      	movs	r1, #255	; 0xff
    2d30:	2003      	movs	r0, #3
    2d32:	4d18      	ldr	r5, [pc, #96]	; (2d94 <sendFlightLogs+0x84>)
    2d34:	47a8      	blx	r5

    //wait for user to pick which flight to read
    while(sercom(USART3)->SPI.INTFLAG.bit.RXC == 0);
    2d36:	4a18      	ldr	r2, [pc, #96]	; (2d98 <sendFlightLogs+0x88>)
    2d38:	7e13      	ldrb	r3, [r2, #24]
    2d3a:	075b      	lsls	r3, r3, #29
    2d3c:	d5fc      	bpl.n	2d38 <sendFlightLogs+0x28>
    volatile u8_t flightToRead = usartDataIn(USART3);
    2d3e:	4b17      	ldr	r3, [pc, #92]	; (2d9c <sendFlightLogs+0x8c>)
    2d40:	2003      	movs	r0, #3
    2d42:	4798      	blx	r3
    2d44:	466b      	mov	r3, sp
    2d46:	71d8      	strb	r0, [r3, #7]


    u32_t flightStartAddress = getFlightStartAddress(flightToRead);
    2d48:	79d8      	ldrb	r0, [r3, #7]
    volatile u8_t flightToRead = usartDataIn(USART3);
    2d4a:	1ddc      	adds	r4, r3, #7
    u32_t flightStartAddress = getFlightStartAddress(flightToRead);
    2d4c:	b2c0      	uxtb	r0, r0
    2d4e:	4b14      	ldr	r3, [pc, #80]	; (2da0 <sendFlightLogs+0x90>)
    2d50:	4798      	blx	r3
    2d52:	0007      	movs	r7, r0
    u32_t flightEndAddress = FindFlightEndingAddress(flightToRead);
    2d54:	7820      	ldrb	r0, [r4, #0]
    2d56:	4b13      	ldr	r3, [pc, #76]	; (2da4 <sendFlightLogs+0x94>)
    2d58:	b2c0      	uxtb	r0, r0
    2d5a:	4798      	blx	r3
    2d5c:	0006      	movs	r6, r0

    //inform of page numbers
    u16_t pagesToSend = (flightEndAddress  - flightStartAddress) >> 8;
    2d5e:	1bc4      	subs	r4, r0, r7
    2d60:	0a24      	lsrs	r4, r4, #8
    usartDataOut(USART3, pagesToSend >> 0);
    2d62:	b2e1      	uxtb	r1, r4
    2d64:	2003      	movs	r0, #3
    2d66:	47a8      	blx	r5
    usartDataOut(USART3, pagesToSend >> 8);
    2d68:	b2a1      	uxth	r1, r4
    2d6a:	0a09      	lsrs	r1, r1, #8
    2d6c:	2003      	movs	r0, #3
    2d6e:	47a8      	blx	r5

    //send flight end address for % full
    usartDataOut(USART3, flightEndAddress >> 0);
    2d70:	b2f1      	uxtb	r1, r6
    2d72:	2003      	movs	r0, #3
    2d74:	47a8      	blx	r5
    usartDataOut(USART3, flightEndAddress >> 8);
    2d76:	0a31      	lsrs	r1, r6, #8
    2d78:	b2c9      	uxtb	r1, r1
    2d7a:	2003      	movs	r0, #3
    2d7c:	47a8      	blx	r5
    usartDataOut(USART3, flightEndAddress >> 16);
    2d7e:	0c31      	lsrs	r1, r6, #16
    2d80:	b2c9      	uxtb	r1, r1
    2d82:	2003      	movs	r0, #3
    2d84:	47a8      	blx	r5

    //USART out the flights pages
    sendTheasePagesToComputer(flightStartAddress, flightEndAddress);
    2d86:	0031      	movs	r1, r6
    2d88:	0038      	movs	r0, r7
    2d8a:	4b07      	ldr	r3, [pc, #28]	; (2da8 <sendFlightLogs+0x98>)
    2d8c:	4798      	blx	r3

}
    2d8e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    2d90:	000025b1 	.word	0x000025b1
    2d94:	00002b3d 	.word	0x00002b3d
    2d98:	42001400 	.word	0x42001400
    2d9c:	00002b55 	.word	0x00002b55
    2da0:	00002559 	.word	0x00002559
    2da4:	00002585 	.word	0x00002585
    2da8:	00000ab5 	.word	0x00000ab5

00002dac <attemptConnection>:

void attemptConnection() {
    2dac:	b570      	push	{r4, r5, r6, lr}

    if (USARTconnectionAvaliable()) {
    2dae:	4b14      	ldr	r3, [pc, #80]	; (2e00 <attemptConnection+0x54>)
    2db0:	4798      	blx	r3
    2db2:	2800      	cmp	r0, #0
    2db4:	d00e      	beq.n	2dd4 <attemptConnection+0x28>

        flightState = flightIdle;
    2db6:	2201      	movs	r2, #1
    2db8:	4b12      	ldr	r3, [pc, #72]	; (2e04 <attemptConnection+0x58>)
    2dba:	701a      	strb	r2, [r3, #0]

        //wait for user to tell us what they want
        while(sercom(USART3)->SPI.INTFLAG.bit.RXC == 0);
    2dbc:	4a12      	ldr	r2, [pc, #72]	; (2e08 <attemptConnection+0x5c>)
    2dbe:	7e13      	ldrb	r3, [r2, #24]
    2dc0:	075b      	lsls	r3, r3, #29
    2dc2:	d5fc      	bpl.n	2dbe <attemptConnection+0x12>
        u8_t option = usartDataIn(USART3);
    2dc4:	2003      	movs	r0, #3
    2dc6:	4b11      	ldr	r3, [pc, #68]	; (2e0c <attemptConnection+0x60>)
    2dc8:	4798      	blx	r3
    2dca:	0004      	movs	r4, r0

        //user wants to read flight logs
        if (option == 0x4C) {
    2dcc:	284c      	cmp	r0, #76	; 0x4c
    2dce:	d102      	bne.n	2dd6 <attemptConnection+0x2a>

            sendFlightLogs();
    2dd0:	4b0f      	ldr	r3, [pc, #60]	; (2e10 <attemptConnection+0x64>)
    2dd2:	4798      	blx	r3


        }
    }

}
    2dd4:	bd70      	pop	{r4, r5, r6, pc}
        if (option == 0x45) { // 'E'
    2dd6:	2845      	cmp	r0, #69	; 0x45
    2dd8:	d1fc      	bne.n	2dd4 <attemptConnection+0x28>
            AT25SFChipErase();
    2dda:	4e0e      	ldr	r6, [pc, #56]	; (2e14 <attemptConnection+0x68>)
    2ddc:	47b0      	blx	r6
            AT25SFHoldTillReady();
    2dde:	4d0e      	ldr	r5, [pc, #56]	; (2e18 <attemptConnection+0x6c>)
    2de0:	47a8      	blx	r5
            delay_ms(100);
    2de2:	2064      	movs	r0, #100	; 0x64
    2de4:	4b0d      	ldr	r3, [pc, #52]	; (2e1c <attemptConnection+0x70>)
    2de6:	4798      	blx	r3
            AT25SFChipErase();
    2de8:	47b0      	blx	r6
            AT25SFHoldTillReady();
    2dea:	47a8      	blx	r5
            usartDataOut(USART3, 'E');
    2dec:	0021      	movs	r1, r4
    2dee:	2003      	movs	r0, #3
    2df0:	4b0b      	ldr	r3, [pc, #44]	; (2e20 <attemptConnection+0x74>)
    2df2:	4798      	blx	r3
            beep(400);
    2df4:	20c8      	movs	r0, #200	; 0xc8
    2df6:	4b0b      	ldr	r3, [pc, #44]	; (2e24 <attemptConnection+0x78>)
    2df8:	0040      	lsls	r0, r0, #1
    2dfa:	4798      	blx	r3
}
    2dfc:	e7ea      	b.n	2dd4 <attemptConnection+0x28>
    2dfe:	46c0      	nop			; (mov r8, r8)
    2e00:	00000a81 	.word	0x00000a81
    2e04:	20000534 	.word	0x20000534
    2e08:	42001400 	.word	0x42001400
    2e0c:	00002b55 	.word	0x00002b55
    2e10:	00002d11 	.word	0x00002d11
    2e14:	00000219 	.word	0x00000219
    2e18:	000001e5 	.word	0x000001e5
    2e1c:	00000ee9 	.word	0x00000ee9
    2e20:	00002b3d 	.word	0x00002b3d
    2e24:	00000c6d 	.word	0x00000c6d

00002e28 <pow>:
    2e28:	b5f0      	push	{r4, r5, r6, r7, lr}
    2e2a:	4657      	mov	r7, sl
    2e2c:	464e      	mov	r6, r9
    2e2e:	46de      	mov	lr, fp
    2e30:	4645      	mov	r5, r8
    2e32:	b5e0      	push	{r5, r6, r7, lr}
    2e34:	b08f      	sub	sp, #60	; 0x3c
    2e36:	001d      	movs	r5, r3
    2e38:	0006      	movs	r6, r0
    2e3a:	000f      	movs	r7, r1
    2e3c:	0014      	movs	r4, r2
    2e3e:	f000 f99f 	bl	3180 <__ieee754_pow>
    2e42:	4bc7      	ldr	r3, [pc, #796]	; (3160 <pow+0x338>)
    2e44:	9000      	str	r0, [sp, #0]
    2e46:	9101      	str	r1, [sp, #4]
    2e48:	469a      	mov	sl, r3
    2e4a:	781b      	ldrb	r3, [r3, #0]
    2e4c:	b25b      	sxtb	r3, r3
    2e4e:	4699      	mov	r9, r3
    2e50:	3301      	adds	r3, #1
    2e52:	d03e      	beq.n	2ed2 <pow+0xaa>
    2e54:	0022      	movs	r2, r4
    2e56:	002b      	movs	r3, r5
    2e58:	0020      	movs	r0, r4
    2e5a:	0029      	movs	r1, r5
    2e5c:	f003 f804 	bl	5e68 <__aeabi_dcmpun>
    2e60:	4683      	mov	fp, r0
    2e62:	2800      	cmp	r0, #0
    2e64:	d135      	bne.n	2ed2 <pow+0xaa>
    2e66:	0032      	movs	r2, r6
    2e68:	003b      	movs	r3, r7
    2e6a:	0030      	movs	r0, r6
    2e6c:	0039      	movs	r1, r7
    2e6e:	f002 fffb 	bl	5e68 <__aeabi_dcmpun>
    2e72:	2200      	movs	r2, #0
    2e74:	9003      	str	r0, [sp, #12]
    2e76:	2800      	cmp	r0, #0
    2e78:	d000      	beq.n	2e7c <pow+0x54>
    2e7a:	e0b6      	b.n	2fea <pow+0x1c2>
    2e7c:	2300      	movs	r3, #0
    2e7e:	0030      	movs	r0, r6
    2e80:	0039      	movs	r1, r7
    2e82:	f001 f961 	bl	4148 <__aeabi_dcmpeq>
    2e86:	2800      	cmp	r0, #0
    2e88:	d02c      	beq.n	2ee4 <pow+0xbc>
    2e8a:	2200      	movs	r2, #0
    2e8c:	2300      	movs	r3, #0
    2e8e:	0020      	movs	r0, r4
    2e90:	0029      	movs	r1, r5
    2e92:	f001 f959 	bl	4148 <__aeabi_dcmpeq>
    2e96:	4683      	mov	fp, r0
    2e98:	2800      	cmp	r0, #0
    2e9a:	d100      	bne.n	2e9e <pow+0x76>
    2e9c:	e077      	b.n	2f8e <pow+0x166>
    2e9e:	ab04      	add	r3, sp, #16
    2ea0:	4698      	mov	r8, r3
    2ea2:	2301      	movs	r3, #1
    2ea4:	4642      	mov	r2, r8
    2ea6:	9304      	str	r3, [sp, #16]
    2ea8:	4bae      	ldr	r3, [pc, #696]	; (3164 <pow+0x33c>)
    2eaa:	6053      	str	r3, [r2, #4]
    2eac:	4643      	mov	r3, r8
    2eae:	9a03      	ldr	r2, [sp, #12]
    2eb0:	611c      	str	r4, [r3, #16]
    2eb2:	615d      	str	r5, [r3, #20]
    2eb4:	621a      	str	r2, [r3, #32]
    2eb6:	609e      	str	r6, [r3, #8]
    2eb8:	60df      	str	r7, [r3, #12]
    2eba:	4642      	mov	r2, r8
    2ebc:	2300      	movs	r3, #0
    2ebe:	2400      	movs	r4, #0
    2ec0:	6193      	str	r3, [r2, #24]
    2ec2:	61d4      	str	r4, [r2, #28]
    2ec4:	464b      	mov	r3, r9
    2ec6:	2b00      	cmp	r3, #0
    2ec8:	d04d      	beq.n	2f66 <pow+0x13e>
    2eca:	2300      	movs	r3, #0
    2ecc:	4ca6      	ldr	r4, [pc, #664]	; (3168 <pow+0x340>)
    2ece:	9300      	str	r3, [sp, #0]
    2ed0:	9401      	str	r4, [sp, #4]
    2ed2:	9800      	ldr	r0, [sp, #0]
    2ed4:	9901      	ldr	r1, [sp, #4]
    2ed6:	b00f      	add	sp, #60	; 0x3c
    2ed8:	bc3c      	pop	{r2, r3, r4, r5}
    2eda:	4690      	mov	r8, r2
    2edc:	4699      	mov	r9, r3
    2ede:	46a2      	mov	sl, r4
    2ee0:	46ab      	mov	fp, r5
    2ee2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2ee4:	9800      	ldr	r0, [sp, #0]
    2ee6:	9901      	ldr	r1, [sp, #4]
    2ee8:	f000 ff64 	bl	3db4 <finite>
    2eec:	4681      	mov	r9, r0
    2eee:	2800      	cmp	r0, #0
    2ef0:	d100      	bne.n	2ef4 <pow+0xcc>
    2ef2:	e09b      	b.n	302c <pow+0x204>
    2ef4:	9800      	ldr	r0, [sp, #0]
    2ef6:	9901      	ldr	r1, [sp, #4]
    2ef8:	2200      	movs	r2, #0
    2efa:	2300      	movs	r3, #0
    2efc:	f001 f924 	bl	4148 <__aeabi_dcmpeq>
    2f00:	2800      	cmp	r0, #0
    2f02:	d0e6      	beq.n	2ed2 <pow+0xaa>
    2f04:	0030      	movs	r0, r6
    2f06:	0039      	movs	r1, r7
    2f08:	f000 ff54 	bl	3db4 <finite>
    2f0c:	2800      	cmp	r0, #0
    2f0e:	d0e0      	beq.n	2ed2 <pow+0xaa>
    2f10:	0020      	movs	r0, r4
    2f12:	0029      	movs	r1, r5
    2f14:	f000 ff4e 	bl	3db4 <finite>
    2f18:	2800      	cmp	r0, #0
    2f1a:	d0da      	beq.n	2ed2 <pow+0xaa>
    2f1c:	ab04      	add	r3, sp, #16
    2f1e:	4698      	mov	r8, r3
    2f20:	2304      	movs	r3, #4
    2f22:	4642      	mov	r2, r8
    2f24:	9304      	str	r3, [sp, #16]
    2f26:	4b8f      	ldr	r3, [pc, #572]	; (3164 <pow+0x33c>)
    2f28:	6114      	str	r4, [r2, #16]
    2f2a:	6155      	str	r5, [r2, #20]
    2f2c:	6053      	str	r3, [r2, #4]
    2f2e:	2300      	movs	r3, #0
    2f30:	2400      	movs	r4, #0
    2f32:	6213      	str	r3, [r2, #32]
    2f34:	2300      	movs	r3, #0
    2f36:	6193      	str	r3, [r2, #24]
    2f38:	61d4      	str	r4, [r2, #28]
    2f3a:	4653      	mov	r3, sl
    2f3c:	781b      	ldrb	r3, [r3, #0]
    2f3e:	6096      	str	r6, [r2, #8]
    2f40:	60d7      	str	r7, [r2, #12]
    2f42:	b25b      	sxtb	r3, r3
    2f44:	2b02      	cmp	r3, #2
    2f46:	d004      	beq.n	2f52 <pow+0x12a>
    2f48:	4640      	mov	r0, r8
    2f4a:	f000 ff3d 	bl	3dc8 <matherr>
    2f4e:	2800      	cmp	r0, #0
    2f50:	d10e      	bne.n	2f70 <pow+0x148>
    2f52:	f003 f951 	bl	61f8 <__errno>
    2f56:	2322      	movs	r3, #34	; 0x22
    2f58:	6003      	str	r3, [r0, #0]
    2f5a:	e009      	b.n	2f70 <pow+0x148>
    2f5c:	4642      	mov	r2, r8
    2f5e:	2300      	movs	r3, #0
    2f60:	2400      	movs	r4, #0
    2f62:	6193      	str	r3, [r2, #24]
    2f64:	61d4      	str	r4, [r2, #28]
    2f66:	4640      	mov	r0, r8
    2f68:	f000 ff2e 	bl	3dc8 <matherr>
    2f6c:	2800      	cmp	r0, #0
    2f6e:	d037      	beq.n	2fe0 <pow+0x1b8>
    2f70:	4643      	mov	r3, r8
    2f72:	6a1b      	ldr	r3, [r3, #32]
    2f74:	2b00      	cmp	r3, #0
    2f76:	d004      	beq.n	2f82 <pow+0x15a>
    2f78:	f003 f93e 	bl	61f8 <__errno>
    2f7c:	4643      	mov	r3, r8
    2f7e:	6a1b      	ldr	r3, [r3, #32]
    2f80:	6003      	str	r3, [r0, #0]
    2f82:	4643      	mov	r3, r8
    2f84:	69dc      	ldr	r4, [r3, #28]
    2f86:	699b      	ldr	r3, [r3, #24]
    2f88:	9300      	str	r3, [sp, #0]
    2f8a:	9401      	str	r4, [sp, #4]
    2f8c:	e7a1      	b.n	2ed2 <pow+0xaa>
    2f8e:	0020      	movs	r0, r4
    2f90:	0029      	movs	r1, r5
    2f92:	f000 ff0f 	bl	3db4 <finite>
    2f96:	2800      	cmp	r0, #0
    2f98:	d09b      	beq.n	2ed2 <pow+0xaa>
    2f9a:	2200      	movs	r2, #0
    2f9c:	2300      	movs	r3, #0
    2f9e:	0020      	movs	r0, r4
    2fa0:	0029      	movs	r1, r5
    2fa2:	f001 f8d7 	bl	4154 <__aeabi_dcmplt>
    2fa6:	2800      	cmp	r0, #0
    2fa8:	d100      	bne.n	2fac <pow+0x184>
    2faa:	e792      	b.n	2ed2 <pow+0xaa>
    2fac:	ab04      	add	r3, sp, #16
    2fae:	4698      	mov	r8, r3
    2fb0:	2301      	movs	r3, #1
    2fb2:	4642      	mov	r2, r8
    2fb4:	9304      	str	r3, [sp, #16]
    2fb6:	4b6b      	ldr	r3, [pc, #428]	; (3164 <pow+0x33c>)
    2fb8:	6053      	str	r3, [r2, #4]
    2fba:	4643      	mov	r3, r8
    2fbc:	465a      	mov	r2, fp
    2fbe:	609e      	str	r6, [r3, #8]
    2fc0:	60df      	str	r7, [r3, #12]
    2fc2:	621a      	str	r2, [r3, #32]
    2fc4:	611c      	str	r4, [r3, #16]
    2fc6:	615d      	str	r5, [r3, #20]
    2fc8:	4653      	mov	r3, sl
    2fca:	781b      	ldrb	r3, [r3, #0]
    2fcc:	b25b      	sxtb	r3, r3
    2fce:	2b00      	cmp	r3, #0
    2fd0:	d0c4      	beq.n	2f5c <pow+0x134>
    2fd2:	2000      	movs	r0, #0
    2fd4:	4642      	mov	r2, r8
    2fd6:	4965      	ldr	r1, [pc, #404]	; (316c <pow+0x344>)
    2fd8:	6190      	str	r0, [r2, #24]
    2fda:	61d1      	str	r1, [r2, #28]
    2fdc:	2b02      	cmp	r3, #2
    2fde:	d1c2      	bne.n	2f66 <pow+0x13e>
    2fe0:	f003 f90a 	bl	61f8 <__errno>
    2fe4:	2321      	movs	r3, #33	; 0x21
    2fe6:	6003      	str	r3, [r0, #0]
    2fe8:	e7c2      	b.n	2f70 <pow+0x148>
    2fea:	2300      	movs	r3, #0
    2fec:	0020      	movs	r0, r4
    2fee:	0029      	movs	r1, r5
    2ff0:	f001 f8aa 	bl	4148 <__aeabi_dcmpeq>
    2ff4:	2800      	cmp	r0, #0
    2ff6:	d100      	bne.n	2ffa <pow+0x1d2>
    2ff8:	e76b      	b.n	2ed2 <pow+0xaa>
    2ffa:	ab04      	add	r3, sp, #16
    2ffc:	4698      	mov	r8, r3
    2ffe:	2301      	movs	r3, #1
    3000:	4642      	mov	r2, r8
    3002:	9304      	str	r3, [sp, #16]
    3004:	4b57      	ldr	r3, [pc, #348]	; (3164 <pow+0x33c>)
    3006:	4641      	mov	r1, r8
    3008:	6053      	str	r3, [r2, #4]
    300a:	4643      	mov	r3, r8
    300c:	465a      	mov	r2, fp
    300e:	621a      	str	r2, [r3, #32]
    3010:	2200      	movs	r2, #0
    3012:	609e      	str	r6, [r3, #8]
    3014:	60df      	str	r7, [r3, #12]
    3016:	611c      	str	r4, [r3, #16]
    3018:	615d      	str	r5, [r3, #20]
    301a:	4b53      	ldr	r3, [pc, #332]	; (3168 <pow+0x340>)
    301c:	618a      	str	r2, [r1, #24]
    301e:	61cb      	str	r3, [r1, #28]
    3020:	9200      	str	r2, [sp, #0]
    3022:	9301      	str	r3, [sp, #4]
    3024:	464b      	mov	r3, r9
    3026:	2b02      	cmp	r3, #2
    3028:	d19d      	bne.n	2f66 <pow+0x13e>
    302a:	e752      	b.n	2ed2 <pow+0xaa>
    302c:	0030      	movs	r0, r6
    302e:	0039      	movs	r1, r7
    3030:	f000 fec0 	bl	3db4 <finite>
    3034:	2800      	cmp	r0, #0
    3036:	d100      	bne.n	303a <pow+0x212>
    3038:	e75c      	b.n	2ef4 <pow+0xcc>
    303a:	0020      	movs	r0, r4
    303c:	0029      	movs	r1, r5
    303e:	f000 feb9 	bl	3db4 <finite>
    3042:	2800      	cmp	r0, #0
    3044:	d100      	bne.n	3048 <pow+0x220>
    3046:	e755      	b.n	2ef4 <pow+0xcc>
    3048:	9800      	ldr	r0, [sp, #0]
    304a:	9901      	ldr	r1, [sp, #4]
    304c:	000b      	movs	r3, r1
    304e:	0002      	movs	r2, r0
    3050:	f002 ff0a 	bl	5e68 <__aeabi_dcmpun>
    3054:	ab04      	add	r3, sp, #16
    3056:	4698      	mov	r8, r3
    3058:	2800      	cmp	r0, #0
    305a:	d161      	bne.n	3120 <pow+0x2f8>
    305c:	2303      	movs	r3, #3
    305e:	4642      	mov	r2, r8
    3060:	9304      	str	r3, [sp, #16]
    3062:	4b40      	ldr	r3, [pc, #256]	; (3164 <pow+0x33c>)
    3064:	6210      	str	r0, [r2, #32]
    3066:	6053      	str	r3, [r2, #4]
    3068:	4653      	mov	r3, sl
    306a:	781b      	ldrb	r3, [r3, #0]
    306c:	6096      	str	r6, [r2, #8]
    306e:	60d7      	str	r7, [r2, #12]
    3070:	b25b      	sxtb	r3, r3
    3072:	6114      	str	r4, [r2, #16]
    3074:	6155      	str	r5, [r2, #20]
    3076:	4699      	mov	r9, r3
    3078:	2b00      	cmp	r3, #0
    307a:	d12f      	bne.n	30dc <pow+0x2b4>
    307c:	22e0      	movs	r2, #224	; 0xe0
    307e:	4641      	mov	r1, r8
    3080:	4b3b      	ldr	r3, [pc, #236]	; (3170 <pow+0x348>)
    3082:	0612      	lsls	r2, r2, #24
    3084:	618a      	str	r2, [r1, #24]
    3086:	61cb      	str	r3, [r1, #28]
    3088:	0030      	movs	r0, r6
    308a:	2200      	movs	r2, #0
    308c:	2300      	movs	r3, #0
    308e:	0039      	movs	r1, r7
    3090:	f001 f860 	bl	4154 <__aeabi_dcmplt>
    3094:	2800      	cmp	r0, #0
    3096:	d100      	bne.n	309a <pow+0x272>
    3098:	e756      	b.n	2f48 <pow+0x120>
    309a:	2200      	movs	r2, #0
    309c:	4b35      	ldr	r3, [pc, #212]	; (3174 <pow+0x34c>)
    309e:	0020      	movs	r0, r4
    30a0:	0029      	movs	r1, r5
    30a2:	f002 f94b 	bl	533c <__aeabi_dmul>
    30a6:	0004      	movs	r4, r0
    30a8:	000d      	movs	r5, r1
    30aa:	f000 fe95 	bl	3dd8 <rint>
    30ae:	0002      	movs	r2, r0
    30b0:	000b      	movs	r3, r1
    30b2:	0020      	movs	r0, r4
    30b4:	0029      	movs	r1, r5
    30b6:	f001 f847 	bl	4148 <__aeabi_dcmpeq>
    30ba:	2800      	cmp	r0, #0
    30bc:	d105      	bne.n	30ca <pow+0x2a2>
    30be:	22e0      	movs	r2, #224	; 0xe0
    30c0:	4b2d      	ldr	r3, [pc, #180]	; (3178 <pow+0x350>)
    30c2:	0612      	lsls	r2, r2, #24
    30c4:	4641      	mov	r1, r8
    30c6:	618a      	str	r2, [r1, #24]
    30c8:	61cb      	str	r3, [r1, #28]
    30ca:	4653      	mov	r3, sl
    30cc:	781b      	ldrb	r3, [r3, #0]
    30ce:	b25b      	sxtb	r3, r3
    30d0:	4699      	mov	r9, r3
    30d2:	464b      	mov	r3, r9
    30d4:	2b02      	cmp	r3, #2
    30d6:	d000      	beq.n	30da <pow+0x2b2>
    30d8:	e736      	b.n	2f48 <pow+0x120>
    30da:	e73a      	b.n	2f52 <pow+0x12a>
    30dc:	2200      	movs	r2, #0
    30de:	4641      	mov	r1, r8
    30e0:	4b26      	ldr	r3, [pc, #152]	; (317c <pow+0x354>)
    30e2:	0030      	movs	r0, r6
    30e4:	618a      	str	r2, [r1, #24]
    30e6:	61cb      	str	r3, [r1, #28]
    30e8:	2200      	movs	r2, #0
    30ea:	2300      	movs	r3, #0
    30ec:	0039      	movs	r1, r7
    30ee:	f001 f831 	bl	4154 <__aeabi_dcmplt>
    30f2:	2800      	cmp	r0, #0
    30f4:	d0ed      	beq.n	30d2 <pow+0x2aa>
    30f6:	2200      	movs	r2, #0
    30f8:	4b1e      	ldr	r3, [pc, #120]	; (3174 <pow+0x34c>)
    30fa:	0020      	movs	r0, r4
    30fc:	0029      	movs	r1, r5
    30fe:	f002 f91d 	bl	533c <__aeabi_dmul>
    3102:	0004      	movs	r4, r0
    3104:	000d      	movs	r5, r1
    3106:	f000 fe67 	bl	3dd8 <rint>
    310a:	0002      	movs	r2, r0
    310c:	000b      	movs	r3, r1
    310e:	0020      	movs	r0, r4
    3110:	0029      	movs	r1, r5
    3112:	f001 f819 	bl	4148 <__aeabi_dcmpeq>
    3116:	2800      	cmp	r0, #0
    3118:	d1d7      	bne.n	30ca <pow+0x2a2>
    311a:	2200      	movs	r2, #0
    311c:	4b13      	ldr	r3, [pc, #76]	; (316c <pow+0x344>)
    311e:	e7d1      	b.n	30c4 <pow+0x29c>
    3120:	2301      	movs	r3, #1
    3122:	4642      	mov	r2, r8
    3124:	9304      	str	r3, [sp, #16]
    3126:	4b0f      	ldr	r3, [pc, #60]	; (3164 <pow+0x33c>)
    3128:	6053      	str	r3, [r2, #4]
    312a:	4643      	mov	r3, r8
    312c:	464a      	mov	r2, r9
    312e:	611c      	str	r4, [r3, #16]
    3130:	615d      	str	r5, [r3, #20]
    3132:	621a      	str	r2, [r3, #32]
    3134:	609e      	str	r6, [r3, #8]
    3136:	60df      	str	r7, [r3, #12]
    3138:	2400      	movs	r4, #0
    313a:	4653      	mov	r3, sl
    313c:	571c      	ldrsb	r4, [r3, r4]
    313e:	2c00      	cmp	r4, #0
    3140:	d100      	bne.n	3144 <pow+0x31c>
    3142:	e70b      	b.n	2f5c <pow+0x134>
    3144:	2300      	movs	r3, #0
    3146:	2200      	movs	r2, #0
    3148:	0019      	movs	r1, r3
    314a:	0010      	movs	r0, r2
    314c:	f001 fcc2 	bl	4ad4 <__aeabi_ddiv>
    3150:	4643      	mov	r3, r8
    3152:	6198      	str	r0, [r3, #24]
    3154:	61d9      	str	r1, [r3, #28]
    3156:	2c02      	cmp	r4, #2
    3158:	d100      	bne.n	315c <pow+0x334>
    315a:	e741      	b.n	2fe0 <pow+0x1b8>
    315c:	e703      	b.n	2f66 <pow+0x13e>
    315e:	46c0      	nop			; (mov r8, r8)
    3160:	20000070 	.word	0x20000070
    3164:	0000639c 	.word	0x0000639c
    3168:	3ff00000 	.word	0x3ff00000
    316c:	fff00000 	.word	0xfff00000
    3170:	47efffff 	.word	0x47efffff
    3174:	3fe00000 	.word	0x3fe00000
    3178:	c7efffff 	.word	0xc7efffff
    317c:	7ff00000 	.word	0x7ff00000

00003180 <__ieee754_pow>:
    3180:	b5f0      	push	{r4, r5, r6, r7, lr}
    3182:	4657      	mov	r7, sl
    3184:	464e      	mov	r6, r9
    3186:	4645      	mov	r5, r8
    3188:	46de      	mov	lr, fp
    318a:	001c      	movs	r4, r3
    318c:	0013      	movs	r3, r2
    318e:	b5e0      	push	{r5, r6, r7, lr}
    3190:	0065      	lsls	r5, r4, #1
    3192:	b091      	sub	sp, #68	; 0x44
    3194:	086d      	lsrs	r5, r5, #1
    3196:	9300      	str	r3, [sp, #0]
    3198:	9401      	str	r4, [sp, #4]
    319a:	0007      	movs	r7, r0
    319c:	000e      	movs	r6, r1
    319e:	4680      	mov	r8, r0
    31a0:	4689      	mov	r9, r1
    31a2:	46a2      	mov	sl, r4
    31a4:	432b      	orrs	r3, r5
    31a6:	d031      	beq.n	320c <__ieee754_pow+0x8c>
    31a8:	4b67      	ldr	r3, [pc, #412]	; (3348 <__ieee754_pow+0x1c8>)
    31aa:	0074      	lsls	r4, r6, #1
    31ac:	0864      	lsrs	r4, r4, #1
    31ae:	429c      	cmp	r4, r3
    31b0:	dc27      	bgt.n	3202 <__ieee754_pow+0x82>
    31b2:	d024      	beq.n	31fe <__ieee754_pow+0x7e>
    31b4:	429d      	cmp	r5, r3
    31b6:	dc24      	bgt.n	3202 <__ieee754_pow+0x82>
    31b8:	4b63      	ldr	r3, [pc, #396]	; (3348 <__ieee754_pow+0x1c8>)
    31ba:	429d      	cmp	r5, r3
    31bc:	d100      	bne.n	31c0 <__ieee754_pow+0x40>
    31be:	e081      	b.n	32c4 <__ieee754_pow+0x144>
    31c0:	2300      	movs	r3, #0
    31c2:	469b      	mov	fp, r3
    31c4:	464b      	mov	r3, r9
    31c6:	2b00      	cmp	r3, #0
    31c8:	da00      	bge.n	31cc <__ieee754_pow+0x4c>
    31ca:	e07f      	b.n	32cc <__ieee754_pow+0x14c>
    31cc:	2a00      	cmp	r2, #0
    31ce:	d12c      	bne.n	322a <__ieee754_pow+0xaa>
    31d0:	4b5d      	ldr	r3, [pc, #372]	; (3348 <__ieee754_pow+0x1c8>)
    31d2:	429d      	cmp	r5, r3
    31d4:	d100      	bne.n	31d8 <__ieee754_pow+0x58>
    31d6:	e097      	b.n	3308 <__ieee754_pow+0x188>
    31d8:	4b5c      	ldr	r3, [pc, #368]	; (334c <__ieee754_pow+0x1cc>)
    31da:	429d      	cmp	r5, r3
    31dc:	d066      	beq.n	32ac <__ieee754_pow+0x12c>
    31de:	2380      	movs	r3, #128	; 0x80
    31e0:	05db      	lsls	r3, r3, #23
    31e2:	459a      	cmp	sl, r3
    31e4:	d100      	bne.n	31e8 <__ieee754_pow+0x68>
    31e6:	e3b9      	b.n	395c <__ieee754_pow+0x7dc>
    31e8:	4b59      	ldr	r3, [pc, #356]	; (3350 <__ieee754_pow+0x1d0>)
    31ea:	459a      	cmp	sl, r3
    31ec:	d11d      	bne.n	322a <__ieee754_pow+0xaa>
    31ee:	464b      	mov	r3, r9
    31f0:	2b00      	cmp	r3, #0
    31f2:	db1a      	blt.n	322a <__ieee754_pow+0xaa>
    31f4:	0038      	movs	r0, r7
    31f6:	0031      	movs	r1, r6
    31f8:	f000 fcf8 	bl	3bec <__ieee754_sqrt>
    31fc:	e008      	b.n	3210 <__ieee754_pow+0x90>
    31fe:	2800      	cmp	r0, #0
    3200:	d00d      	beq.n	321e <__ieee754_pow+0x9e>
    3202:	4b54      	ldr	r3, [pc, #336]	; (3354 <__ieee754_pow+0x1d4>)
    3204:	469c      	mov	ip, r3
    3206:	4464      	add	r4, ip
    3208:	4327      	orrs	r7, r4
    320a:	d10a      	bne.n	3222 <__ieee754_pow+0xa2>
    320c:	2000      	movs	r0, #0
    320e:	494f      	ldr	r1, [pc, #316]	; (334c <__ieee754_pow+0x1cc>)
    3210:	b011      	add	sp, #68	; 0x44
    3212:	bc3c      	pop	{r2, r3, r4, r5}
    3214:	4690      	mov	r8, r2
    3216:	4699      	mov	r9, r3
    3218:	46a2      	mov	sl, r4
    321a:	46ab      	mov	fp, r5
    321c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    321e:	42a5      	cmp	r5, r4
    3220:	ddca      	ble.n	31b8 <__ieee754_pow+0x38>
    3222:	484d      	ldr	r0, [pc, #308]	; (3358 <__ieee754_pow+0x1d8>)
    3224:	f000 fdd2 	bl	3dcc <nan>
    3228:	e7f2      	b.n	3210 <__ieee754_pow+0x90>
    322a:	0038      	movs	r0, r7
    322c:	0031      	movs	r1, r6
    322e:	f000 fdbd 	bl	3dac <fabs>
    3232:	4643      	mov	r3, r8
    3234:	2b00      	cmp	r3, #0
    3236:	d11d      	bne.n	3274 <__ieee754_pow+0xf4>
    3238:	2c00      	cmp	r4, #0
    323a:	d004      	beq.n	3246 <__ieee754_pow+0xc6>
    323c:	4a43      	ldr	r2, [pc, #268]	; (334c <__ieee754_pow+0x1cc>)
    323e:	00b3      	lsls	r3, r6, #2
    3240:	089b      	lsrs	r3, r3, #2
    3242:	4293      	cmp	r3, r2
    3244:	d116      	bne.n	3274 <__ieee754_pow+0xf4>
    3246:	4653      	mov	r3, sl
    3248:	2b00      	cmp	r3, #0
    324a:	da00      	bge.n	324e <__ieee754_pow+0xce>
    324c:	e3c5      	b.n	39da <__ieee754_pow+0x85a>
    324e:	464b      	mov	r3, r9
    3250:	2b00      	cmp	r3, #0
    3252:	dadd      	bge.n	3210 <__ieee754_pow+0x90>
    3254:	4b3f      	ldr	r3, [pc, #252]	; (3354 <__ieee754_pow+0x1d4>)
    3256:	469c      	mov	ip, r3
    3258:	465b      	mov	r3, fp
    325a:	4464      	add	r4, ip
    325c:	431c      	orrs	r4, r3
    325e:	d101      	bne.n	3264 <__ieee754_pow+0xe4>
    3260:	f000 fc53 	bl	3b0a <__ieee754_pow+0x98a>
    3264:	465b      	mov	r3, fp
    3266:	2b01      	cmp	r3, #1
    3268:	d1d2      	bne.n	3210 <__ieee754_pow+0x90>
    326a:	2480      	movs	r4, #128	; 0x80
    326c:	0624      	lsls	r4, r4, #24
    326e:	190b      	adds	r3, r1, r4
    3270:	0019      	movs	r1, r3
    3272:	e7cd      	b.n	3210 <__ieee754_pow+0x90>
    3274:	0ff3      	lsrs	r3, r6, #31
    3276:	3b01      	subs	r3, #1
    3278:	4698      	mov	r8, r3
    327a:	465b      	mov	r3, fp
    327c:	4642      	mov	r2, r8
    327e:	4313      	orrs	r3, r2
    3280:	d057      	beq.n	3332 <__ieee754_pow+0x1b2>
    3282:	4b36      	ldr	r3, [pc, #216]	; (335c <__ieee754_pow+0x1dc>)
    3284:	429d      	cmp	r5, r3
    3286:	dd77      	ble.n	3378 <__ieee754_pow+0x1f8>
    3288:	4b35      	ldr	r3, [pc, #212]	; (3360 <__ieee754_pow+0x1e0>)
    328a:	429d      	cmp	r5, r3
    328c:	dc00      	bgt.n	3290 <__ieee754_pow+0x110>
    328e:	e3b1      	b.n	39f4 <__ieee754_pow+0x874>
    3290:	4b34      	ldr	r3, [pc, #208]	; (3364 <__ieee754_pow+0x1e4>)
    3292:	429c      	cmp	r4, r3
    3294:	dc00      	bgt.n	3298 <__ieee754_pow+0x118>
    3296:	e3a8      	b.n	39ea <__ieee754_pow+0x86a>
    3298:	4653      	mov	r3, sl
    329a:	2b00      	cmp	r3, #0
    329c:	dd43      	ble.n	3326 <__ieee754_pow+0x1a6>
    329e:	4a32      	ldr	r2, [pc, #200]	; (3368 <__ieee754_pow+0x1e8>)
    32a0:	4b32      	ldr	r3, [pc, #200]	; (336c <__ieee754_pow+0x1ec>)
    32a2:	0010      	movs	r0, r2
    32a4:	0019      	movs	r1, r3
    32a6:	f002 f849 	bl	533c <__aeabi_dmul>
    32aa:	e7b1      	b.n	3210 <__ieee754_pow+0x90>
    32ac:	4653      	mov	r3, sl
    32ae:	0038      	movs	r0, r7
    32b0:	0031      	movs	r1, r6
    32b2:	2b00      	cmp	r3, #0
    32b4:	daac      	bge.n	3210 <__ieee754_pow+0x90>
    32b6:	003a      	movs	r2, r7
    32b8:	0033      	movs	r3, r6
    32ba:	2000      	movs	r0, #0
    32bc:	4923      	ldr	r1, [pc, #140]	; (334c <__ieee754_pow+0x1cc>)
    32be:	f001 fc09 	bl	4ad4 <__aeabi_ddiv>
    32c2:	e7a5      	b.n	3210 <__ieee754_pow+0x90>
    32c4:	2a00      	cmp	r2, #0
    32c6:	d100      	bne.n	32ca <__ieee754_pow+0x14a>
    32c8:	e77a      	b.n	31c0 <__ieee754_pow+0x40>
    32ca:	e79a      	b.n	3202 <__ieee754_pow+0x82>
    32cc:	4b28      	ldr	r3, [pc, #160]	; (3370 <__ieee754_pow+0x1f0>)
    32ce:	429d      	cmp	r5, r3
    32d0:	dc2c      	bgt.n	332c <__ieee754_pow+0x1ac>
    32d2:	4b24      	ldr	r3, [pc, #144]	; (3364 <__ieee754_pow+0x1e4>)
    32d4:	429d      	cmp	r5, r3
    32d6:	dc00      	bgt.n	32da <__ieee754_pow+0x15a>
    32d8:	e778      	b.n	31cc <__ieee754_pow+0x4c>
    32da:	4926      	ldr	r1, [pc, #152]	; (3374 <__ieee754_pow+0x1f4>)
    32dc:	152b      	asrs	r3, r5, #20
    32de:	468c      	mov	ip, r1
    32e0:	4463      	add	r3, ip
    32e2:	2b14      	cmp	r3, #20
    32e4:	dc01      	bgt.n	32ea <__ieee754_pow+0x16a>
    32e6:	f000 fbf3 	bl	3ad0 <__ieee754_pow+0x950>
    32ea:	2134      	movs	r1, #52	; 0x34
    32ec:	1acb      	subs	r3, r1, r3
    32ee:	9900      	ldr	r1, [sp, #0]
    32f0:	40d9      	lsrs	r1, r3
    32f2:	0008      	movs	r0, r1
    32f4:	4098      	lsls	r0, r3
    32f6:	4282      	cmp	r2, r0
    32f8:	d000      	beq.n	32fc <__ieee754_pow+0x17c>
    32fa:	e767      	b.n	31cc <__ieee754_pow+0x4c>
    32fc:	2301      	movs	r3, #1
    32fe:	4019      	ands	r1, r3
    3300:	3301      	adds	r3, #1
    3302:	1a5b      	subs	r3, r3, r1
    3304:	469b      	mov	fp, r3
    3306:	e761      	b.n	31cc <__ieee754_pow+0x4c>
    3308:	4b12      	ldr	r3, [pc, #72]	; (3354 <__ieee754_pow+0x1d4>)
    330a:	18e3      	adds	r3, r4, r3
    330c:	431f      	orrs	r7, r3
    330e:	d100      	bne.n	3312 <__ieee754_pow+0x192>
    3310:	e77c      	b.n	320c <__ieee754_pow+0x8c>
    3312:	4b14      	ldr	r3, [pc, #80]	; (3364 <__ieee754_pow+0x1e4>)
    3314:	429c      	cmp	r4, r3
    3316:	dc00      	bgt.n	331a <__ieee754_pow+0x19a>
    3318:	e327      	b.n	396a <__ieee754_pow+0x7ea>
    331a:	9800      	ldr	r0, [sp, #0]
    331c:	9901      	ldr	r1, [sp, #4]
    331e:	4653      	mov	r3, sl
    3320:	2b00      	cmp	r3, #0
    3322:	db00      	blt.n	3326 <__ieee754_pow+0x1a6>
    3324:	e774      	b.n	3210 <__ieee754_pow+0x90>
    3326:	2000      	movs	r0, #0
    3328:	2100      	movs	r1, #0
    332a:	e771      	b.n	3210 <__ieee754_pow+0x90>
    332c:	2302      	movs	r3, #2
    332e:	469b      	mov	fp, r3
    3330:	e74c      	b.n	31cc <__ieee754_pow+0x4c>
    3332:	003a      	movs	r2, r7
    3334:	0033      	movs	r3, r6
    3336:	0038      	movs	r0, r7
    3338:	0031      	movs	r1, r6
    333a:	f002 fa7f 	bl	583c <__aeabi_dsub>
    333e:	0002      	movs	r2, r0
    3340:	000b      	movs	r3, r1
    3342:	f001 fbc7 	bl	4ad4 <__aeabi_ddiv>
    3346:	e763      	b.n	3210 <__ieee754_pow+0x90>
    3348:	7ff00000 	.word	0x7ff00000
    334c:	3ff00000 	.word	0x3ff00000
    3350:	3fe00000 	.word	0x3fe00000
    3354:	c0100000 	.word	0xc0100000
    3358:	000063a0 	.word	0x000063a0
    335c:	41e00000 	.word	0x41e00000
    3360:	43f00000 	.word	0x43f00000
    3364:	3fefffff 	.word	0x3fefffff
    3368:	8800759c 	.word	0x8800759c
    336c:	7e37e43c 	.word	0x7e37e43c
    3370:	433fffff 	.word	0x433fffff
    3374:	fffffc01 	.word	0xfffffc01
    3378:	4be9      	ldr	r3, [pc, #932]	; (3720 <__ieee754_pow+0x5a0>)
    337a:	2200      	movs	r2, #0
    337c:	429c      	cmp	r4, r3
    337e:	dc06      	bgt.n	338e <__ieee754_pow+0x20e>
    3380:	2200      	movs	r2, #0
    3382:	4be8      	ldr	r3, [pc, #928]	; (3724 <__ieee754_pow+0x5a4>)
    3384:	f001 ffda 	bl	533c <__aeabi_dmul>
    3388:	2235      	movs	r2, #53	; 0x35
    338a:	000c      	movs	r4, r1
    338c:	4252      	negs	r2, r2
    338e:	4de6      	ldr	r5, [pc, #920]	; (3728 <__ieee754_pow+0x5a8>)
    3390:	1523      	asrs	r3, r4, #20
    3392:	46ac      	mov	ip, r5
    3394:	4463      	add	r3, ip
    3396:	4699      	mov	r9, r3
    3398:	0324      	lsls	r4, r4, #12
    339a:	4de4      	ldr	r5, [pc, #912]	; (372c <__ieee754_pow+0x5ac>)
    339c:	4be4      	ldr	r3, [pc, #912]	; (3730 <__ieee754_pow+0x5b0>)
    339e:	0b24      	lsrs	r4, r4, #12
    33a0:	4491      	add	r9, r2
    33a2:	4325      	orrs	r5, r4
    33a4:	429c      	cmp	r4, r3
    33a6:	dd09      	ble.n	33bc <__ieee754_pow+0x23c>
    33a8:	4be2      	ldr	r3, [pc, #904]	; (3734 <__ieee754_pow+0x5b4>)
    33aa:	429c      	cmp	r4, r3
    33ac:	dc00      	bgt.n	33b0 <__ieee754_pow+0x230>
    33ae:	e3b6      	b.n	3b1e <__ieee754_pow+0x99e>
    33b0:	2301      	movs	r3, #1
    33b2:	469c      	mov	ip, r3
    33b4:	4be0      	ldr	r3, [pc, #896]	; (3738 <__ieee754_pow+0x5b8>)
    33b6:	44e1      	add	r9, ip
    33b8:	469c      	mov	ip, r3
    33ba:	4465      	add	r5, ip
    33bc:	2300      	movs	r3, #0
    33be:	2400      	movs	r4, #0
    33c0:	2200      	movs	r2, #0
    33c2:	9308      	str	r3, [sp, #32]
    33c4:	9409      	str	r4, [sp, #36]	; 0x24
    33c6:	930c      	str	r3, [sp, #48]	; 0x30
    33c8:	940d      	str	r4, [sp, #52]	; 0x34
    33ca:	2400      	movs	r4, #0
    33cc:	4bd7      	ldr	r3, [pc, #860]	; (372c <__ieee754_pow+0x5ac>)
    33ce:	9206      	str	r2, [sp, #24]
    33d0:	9307      	str	r3, [sp, #28]
    33d2:	9a06      	ldr	r2, [sp, #24]
    33d4:	9b07      	ldr	r3, [sp, #28]
    33d6:	0029      	movs	r1, r5
    33d8:	900a      	str	r0, [sp, #40]	; 0x28
    33da:	910b      	str	r1, [sp, #44]	; 0x2c
    33dc:	f002 fa2e 	bl	583c <__aeabi_dsub>
    33e0:	9a06      	ldr	r2, [sp, #24]
    33e2:	9b07      	ldr	r3, [sp, #28]
    33e4:	0006      	movs	r6, r0
    33e6:	000f      	movs	r7, r1
    33e8:	980a      	ldr	r0, [sp, #40]	; 0x28
    33ea:	990b      	ldr	r1, [sp, #44]	; 0x2c
    33ec:	f001 f862 	bl	44b4 <__aeabi_dadd>
    33f0:	0002      	movs	r2, r0
    33f2:	000b      	movs	r3, r1
    33f4:	2000      	movs	r0, #0
    33f6:	49cd      	ldr	r1, [pc, #820]	; (372c <__ieee754_pow+0x5ac>)
    33f8:	f001 fb6c 	bl	4ad4 <__aeabi_ddiv>
    33fc:	000a      	movs	r2, r1
    33fe:	0001      	movs	r1, r0
    3400:	0013      	movs	r3, r2
    3402:	910e      	str	r1, [sp, #56]	; 0x38
    3404:	920f      	str	r2, [sp, #60]	; 0x3c
    3406:	0002      	movs	r2, r0
    3408:	0039      	movs	r1, r7
    340a:	0030      	movs	r0, r6
    340c:	f001 ff96 	bl	533c <__aeabi_dmul>
    3410:	000a      	movs	r2, r1
    3412:	0001      	movs	r1, r0
    3414:	2080      	movs	r0, #128	; 0x80
    3416:	9104      	str	r1, [sp, #16]
    3418:	9205      	str	r2, [sp, #20]
    341a:	0013      	movs	r3, r2
    341c:	2200      	movs	r2, #0
    341e:	1069      	asrs	r1, r5, #1
    3420:	2580      	movs	r5, #128	; 0x80
    3422:	0300      	lsls	r0, r0, #12
    3424:	4684      	mov	ip, r0
    3426:	9202      	str	r2, [sp, #8]
    3428:	9303      	str	r3, [sp, #12]
    342a:	2200      	movs	r2, #0
    342c:	05ad      	lsls	r5, r5, #22
    342e:	430d      	orrs	r5, r1
    3430:	4465      	add	r5, ip
    3432:	192b      	adds	r3, r5, r4
    3434:	9802      	ldr	r0, [sp, #8]
    3436:	9903      	ldr	r1, [sp, #12]
    3438:	0014      	movs	r4, r2
    343a:	001d      	movs	r5, r3
    343c:	f001 ff7e 	bl	533c <__aeabi_dmul>
    3440:	0002      	movs	r2, r0
    3442:	000b      	movs	r3, r1
    3444:	0030      	movs	r0, r6
    3446:	0039      	movs	r1, r7
    3448:	f002 f9f8 	bl	583c <__aeabi_dsub>
    344c:	9a06      	ldr	r2, [sp, #24]
    344e:	9b07      	ldr	r3, [sp, #28]
    3450:	0006      	movs	r6, r0
    3452:	000f      	movs	r7, r1
    3454:	0020      	movs	r0, r4
    3456:	0029      	movs	r1, r5
    3458:	f002 f9f0 	bl	583c <__aeabi_dsub>
    345c:	0002      	movs	r2, r0
    345e:	000b      	movs	r3, r1
    3460:	980a      	ldr	r0, [sp, #40]	; 0x28
    3462:	990b      	ldr	r1, [sp, #44]	; 0x2c
    3464:	f002 f9ea 	bl	583c <__aeabi_dsub>
    3468:	9a02      	ldr	r2, [sp, #8]
    346a:	9b03      	ldr	r3, [sp, #12]
    346c:	f001 ff66 	bl	533c <__aeabi_dmul>
    3470:	0002      	movs	r2, r0
    3472:	000b      	movs	r3, r1
    3474:	0030      	movs	r0, r6
    3476:	0039      	movs	r1, r7
    3478:	f002 f9e0 	bl	583c <__aeabi_dsub>
    347c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    347e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    3480:	f001 ff5c 	bl	533c <__aeabi_dmul>
    3484:	9d04      	ldr	r5, [sp, #16]
    3486:	9e05      	ldr	r6, [sp, #20]
    3488:	9006      	str	r0, [sp, #24]
    348a:	9107      	str	r1, [sp, #28]
    348c:	002a      	movs	r2, r5
    348e:	0033      	movs	r3, r6
    3490:	0028      	movs	r0, r5
    3492:	0031      	movs	r1, r6
    3494:	f001 ff52 	bl	533c <__aeabi_dmul>
    3498:	0006      	movs	r6, r0
    349a:	000f      	movs	r7, r1
    349c:	4aa7      	ldr	r2, [pc, #668]	; (373c <__ieee754_pow+0x5bc>)
    349e:	4ba8      	ldr	r3, [pc, #672]	; (3740 <__ieee754_pow+0x5c0>)
    34a0:	f001 ff4c 	bl	533c <__aeabi_dmul>
    34a4:	4aa7      	ldr	r2, [pc, #668]	; (3744 <__ieee754_pow+0x5c4>)
    34a6:	4ba8      	ldr	r3, [pc, #672]	; (3748 <__ieee754_pow+0x5c8>)
    34a8:	f001 f804 	bl	44b4 <__aeabi_dadd>
    34ac:	0032      	movs	r2, r6
    34ae:	003b      	movs	r3, r7
    34b0:	f001 ff44 	bl	533c <__aeabi_dmul>
    34b4:	4aa5      	ldr	r2, [pc, #660]	; (374c <__ieee754_pow+0x5cc>)
    34b6:	4ba6      	ldr	r3, [pc, #664]	; (3750 <__ieee754_pow+0x5d0>)
    34b8:	f000 fffc 	bl	44b4 <__aeabi_dadd>
    34bc:	0032      	movs	r2, r6
    34be:	003b      	movs	r3, r7
    34c0:	f001 ff3c 	bl	533c <__aeabi_dmul>
    34c4:	4aa3      	ldr	r2, [pc, #652]	; (3754 <__ieee754_pow+0x5d4>)
    34c6:	4ba4      	ldr	r3, [pc, #656]	; (3758 <__ieee754_pow+0x5d8>)
    34c8:	f000 fff4 	bl	44b4 <__aeabi_dadd>
    34cc:	0032      	movs	r2, r6
    34ce:	003b      	movs	r3, r7
    34d0:	f001 ff34 	bl	533c <__aeabi_dmul>
    34d4:	4aa1      	ldr	r2, [pc, #644]	; (375c <__ieee754_pow+0x5dc>)
    34d6:	4ba2      	ldr	r3, [pc, #648]	; (3760 <__ieee754_pow+0x5e0>)
    34d8:	f000 ffec 	bl	44b4 <__aeabi_dadd>
    34dc:	0032      	movs	r2, r6
    34de:	003b      	movs	r3, r7
    34e0:	f001 ff2c 	bl	533c <__aeabi_dmul>
    34e4:	4a9f      	ldr	r2, [pc, #636]	; (3764 <__ieee754_pow+0x5e4>)
    34e6:	4ba0      	ldr	r3, [pc, #640]	; (3768 <__ieee754_pow+0x5e8>)
    34e8:	f000 ffe4 	bl	44b4 <__aeabi_dadd>
    34ec:	0032      	movs	r2, r6
    34ee:	0004      	movs	r4, r0
    34f0:	000d      	movs	r5, r1
    34f2:	003b      	movs	r3, r7
    34f4:	0030      	movs	r0, r6
    34f6:	0039      	movs	r1, r7
    34f8:	f001 ff20 	bl	533c <__aeabi_dmul>
    34fc:	0002      	movs	r2, r0
    34fe:	000b      	movs	r3, r1
    3500:	0020      	movs	r0, r4
    3502:	0029      	movs	r1, r5
    3504:	f001 ff1a 	bl	533c <__aeabi_dmul>
    3508:	9e02      	ldr	r6, [sp, #8]
    350a:	9f03      	ldr	r7, [sp, #12]
    350c:	0004      	movs	r4, r0
    350e:	000d      	movs	r5, r1
    3510:	9804      	ldr	r0, [sp, #16]
    3512:	9905      	ldr	r1, [sp, #20]
    3514:	0032      	movs	r2, r6
    3516:	003b      	movs	r3, r7
    3518:	f000 ffcc 	bl	44b4 <__aeabi_dadd>
    351c:	9a06      	ldr	r2, [sp, #24]
    351e:	9b07      	ldr	r3, [sp, #28]
    3520:	f001 ff0c 	bl	533c <__aeabi_dmul>
    3524:	0022      	movs	r2, r4
    3526:	002b      	movs	r3, r5
    3528:	f000 ffc4 	bl	44b4 <__aeabi_dadd>
    352c:	0032      	movs	r2, r6
    352e:	900a      	str	r0, [sp, #40]	; 0x28
    3530:	910b      	str	r1, [sp, #44]	; 0x2c
    3532:	003b      	movs	r3, r7
    3534:	0030      	movs	r0, r6
    3536:	0039      	movs	r1, r7
    3538:	9602      	str	r6, [sp, #8]
    353a:	9703      	str	r7, [sp, #12]
    353c:	f001 fefe 	bl	533c <__aeabi_dmul>
    3540:	2200      	movs	r2, #0
    3542:	4b8a      	ldr	r3, [pc, #552]	; (376c <__ieee754_pow+0x5ec>)
    3544:	0004      	movs	r4, r0
    3546:	000d      	movs	r5, r1
    3548:	f000 ffb4 	bl	44b4 <__aeabi_dadd>
    354c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    354e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    3550:	f000 ffb0 	bl	44b4 <__aeabi_dadd>
    3554:	2600      	movs	r6, #0
    3556:	000f      	movs	r7, r1
    3558:	0032      	movs	r2, r6
    355a:	000b      	movs	r3, r1
    355c:	9802      	ldr	r0, [sp, #8]
    355e:	9903      	ldr	r1, [sp, #12]
    3560:	f001 feec 	bl	533c <__aeabi_dmul>
    3564:	2200      	movs	r2, #0
    3566:	9002      	str	r0, [sp, #8]
    3568:	9103      	str	r1, [sp, #12]
    356a:	4b80      	ldr	r3, [pc, #512]	; (376c <__ieee754_pow+0x5ec>)
    356c:	0030      	movs	r0, r6
    356e:	0039      	movs	r1, r7
    3570:	f002 f964 	bl	583c <__aeabi_dsub>
    3574:	0022      	movs	r2, r4
    3576:	002b      	movs	r3, r5
    3578:	f002 f960 	bl	583c <__aeabi_dsub>
    357c:	0002      	movs	r2, r0
    357e:	000b      	movs	r3, r1
    3580:	980a      	ldr	r0, [sp, #40]	; 0x28
    3582:	990b      	ldr	r1, [sp, #44]	; 0x2c
    3584:	f002 f95a 	bl	583c <__aeabi_dsub>
    3588:	9a04      	ldr	r2, [sp, #16]
    358a:	9b05      	ldr	r3, [sp, #20]
    358c:	f001 fed6 	bl	533c <__aeabi_dmul>
    3590:	0032      	movs	r2, r6
    3592:	0004      	movs	r4, r0
    3594:	000d      	movs	r5, r1
    3596:	9806      	ldr	r0, [sp, #24]
    3598:	9907      	ldr	r1, [sp, #28]
    359a:	003b      	movs	r3, r7
    359c:	f001 fece 	bl	533c <__aeabi_dmul>
    35a0:	0002      	movs	r2, r0
    35a2:	000b      	movs	r3, r1
    35a4:	0020      	movs	r0, r4
    35a6:	0029      	movs	r1, r5
    35a8:	f000 ff84 	bl	44b4 <__aeabi_dadd>
    35ac:	0004      	movs	r4, r0
    35ae:	000d      	movs	r5, r1
    35b0:	0002      	movs	r2, r0
    35b2:	000b      	movs	r3, r1
    35b4:	9802      	ldr	r0, [sp, #8]
    35b6:	9903      	ldr	r1, [sp, #12]
    35b8:	f000 ff7c 	bl	44b4 <__aeabi_dadd>
    35bc:	2600      	movs	r6, #0
    35be:	22e0      	movs	r2, #224	; 0xe0
    35c0:	4b6b      	ldr	r3, [pc, #428]	; (3770 <__ieee754_pow+0x5f0>)
    35c2:	0612      	lsls	r2, r2, #24
    35c4:	0030      	movs	r0, r6
    35c6:	000f      	movs	r7, r1
    35c8:	f001 feb8 	bl	533c <__aeabi_dmul>
    35cc:	9a02      	ldr	r2, [sp, #8]
    35ce:	9b03      	ldr	r3, [sp, #12]
    35d0:	9004      	str	r0, [sp, #16]
    35d2:	9105      	str	r1, [sp, #20]
    35d4:	0030      	movs	r0, r6
    35d6:	0039      	movs	r1, r7
    35d8:	f002 f930 	bl	583c <__aeabi_dsub>
    35dc:	0002      	movs	r2, r0
    35de:	000b      	movs	r3, r1
    35e0:	0020      	movs	r0, r4
    35e2:	0029      	movs	r1, r5
    35e4:	f002 f92a 	bl	583c <__aeabi_dsub>
    35e8:	4a62      	ldr	r2, [pc, #392]	; (3774 <__ieee754_pow+0x5f4>)
    35ea:	4b61      	ldr	r3, [pc, #388]	; (3770 <__ieee754_pow+0x5f0>)
    35ec:	f001 fea6 	bl	533c <__aeabi_dmul>
    35f0:	4a61      	ldr	r2, [pc, #388]	; (3778 <__ieee754_pow+0x5f8>)
    35f2:	0004      	movs	r4, r0
    35f4:	000d      	movs	r5, r1
    35f6:	4b61      	ldr	r3, [pc, #388]	; (377c <__ieee754_pow+0x5fc>)
    35f8:	0030      	movs	r0, r6
    35fa:	0039      	movs	r1, r7
    35fc:	f001 fe9e 	bl	533c <__aeabi_dmul>
    3600:	0002      	movs	r2, r0
    3602:	000b      	movs	r3, r1
    3604:	0020      	movs	r0, r4
    3606:	0029      	movs	r1, r5
    3608:	f000 ff54 	bl	44b4 <__aeabi_dadd>
    360c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    360e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    3610:	f000 ff50 	bl	44b4 <__aeabi_dadd>
    3614:	0006      	movs	r6, r0
    3616:	4648      	mov	r0, r9
    3618:	000f      	movs	r7, r1
    361a:	f002 fc79 	bl	5f10 <__aeabi_i2d>
    361e:	0004      	movs	r4, r0
    3620:	000d      	movs	r5, r1
    3622:	9804      	ldr	r0, [sp, #16]
    3624:	9905      	ldr	r1, [sp, #20]
    3626:	0032      	movs	r2, r6
    3628:	003b      	movs	r3, r7
    362a:	f000 ff43 	bl	44b4 <__aeabi_dadd>
    362e:	9a08      	ldr	r2, [sp, #32]
    3630:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3632:	f000 ff3f 	bl	44b4 <__aeabi_dadd>
    3636:	0022      	movs	r2, r4
    3638:	002b      	movs	r3, r5
    363a:	f000 ff3b 	bl	44b4 <__aeabi_dadd>
    363e:	2000      	movs	r0, #0
    3640:	0022      	movs	r2, r4
    3642:	002b      	movs	r3, r5
    3644:	9002      	str	r0, [sp, #8]
    3646:	9103      	str	r1, [sp, #12]
    3648:	f002 f8f8 	bl	583c <__aeabi_dsub>
    364c:	9a08      	ldr	r2, [sp, #32]
    364e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3650:	f002 f8f4 	bl	583c <__aeabi_dsub>
    3654:	9a04      	ldr	r2, [sp, #16]
    3656:	9b05      	ldr	r3, [sp, #20]
    3658:	f002 f8f0 	bl	583c <__aeabi_dsub>
    365c:	0002      	movs	r2, r0
    365e:	000b      	movs	r3, r1
    3660:	0030      	movs	r0, r6
    3662:	0039      	movs	r1, r7
    3664:	f002 f8ea 	bl	583c <__aeabi_dsub>
    3668:	9004      	str	r0, [sp, #16]
    366a:	9105      	str	r1, [sp, #20]
    366c:	465b      	mov	r3, fp
    366e:	4642      	mov	r2, r8
    3670:	3b01      	subs	r3, #1
    3672:	4313      	orrs	r3, r2
    3674:	d100      	bne.n	3678 <__ieee754_pow+0x4f8>
    3676:	e1ab      	b.n	39d0 <__ieee754_pow+0x850>
    3678:	2300      	movs	r3, #0
    367a:	4c2c      	ldr	r4, [pc, #176]	; (372c <__ieee754_pow+0x5ac>)
    367c:	9306      	str	r3, [sp, #24]
    367e:	9407      	str	r4, [sp, #28]
    3680:	9800      	ldr	r0, [sp, #0]
    3682:	9901      	ldr	r1, [sp, #4]
    3684:	2600      	movs	r6, #0
    3686:	000b      	movs	r3, r1
    3688:	0032      	movs	r2, r6
    368a:	000f      	movs	r7, r1
    368c:	f002 f8d6 	bl	583c <__aeabi_dsub>
    3690:	9a02      	ldr	r2, [sp, #8]
    3692:	9b03      	ldr	r3, [sp, #12]
    3694:	f001 fe52 	bl	533c <__aeabi_dmul>
    3698:	9a00      	ldr	r2, [sp, #0]
    369a:	9b01      	ldr	r3, [sp, #4]
    369c:	0004      	movs	r4, r0
    369e:	000d      	movs	r5, r1
    36a0:	9804      	ldr	r0, [sp, #16]
    36a2:	9905      	ldr	r1, [sp, #20]
    36a4:	f001 fe4a 	bl	533c <__aeabi_dmul>
    36a8:	0002      	movs	r2, r0
    36aa:	000b      	movs	r3, r1
    36ac:	0020      	movs	r0, r4
    36ae:	0029      	movs	r1, r5
    36b0:	f000 ff00 	bl	44b4 <__aeabi_dadd>
    36b4:	0004      	movs	r4, r0
    36b6:	000d      	movs	r5, r1
    36b8:	9802      	ldr	r0, [sp, #8]
    36ba:	9903      	ldr	r1, [sp, #12]
    36bc:	0032      	movs	r2, r6
    36be:	003b      	movs	r3, r7
    36c0:	9400      	str	r4, [sp, #0]
    36c2:	9501      	str	r5, [sp, #4]
    36c4:	f001 fe3a 	bl	533c <__aeabi_dmul>
    36c8:	0002      	movs	r2, r0
    36ca:	000b      	movs	r3, r1
    36cc:	0006      	movs	r6, r0
    36ce:	000f      	movs	r7, r1
    36d0:	0020      	movs	r0, r4
    36d2:	0029      	movs	r1, r5
    36d4:	f000 feee 	bl	44b4 <__aeabi_dadd>
    36d8:	4b29      	ldr	r3, [pc, #164]	; (3780 <__ieee754_pow+0x600>)
    36da:	0004      	movs	r4, r0
    36dc:	000d      	movs	r5, r1
    36de:	0002      	movs	r2, r0
    36e0:	468b      	mov	fp, r1
    36e2:	4299      	cmp	r1, r3
    36e4:	dc00      	bgt.n	36e8 <__ieee754_pow+0x568>
    36e6:	e14f      	b.n	3988 <__ieee754_pow+0x808>
    36e8:	4b26      	ldr	r3, [pc, #152]	; (3784 <__ieee754_pow+0x604>)
    36ea:	18cb      	adds	r3, r1, r3
    36ec:	4303      	orrs	r3, r0
    36ee:	d000      	beq.n	36f2 <__ieee754_pow+0x572>
    36f0:	e1e2      	b.n	3ab8 <__ieee754_pow+0x938>
    36f2:	9800      	ldr	r0, [sp, #0]
    36f4:	9901      	ldr	r1, [sp, #4]
    36f6:	4a24      	ldr	r2, [pc, #144]	; (3788 <__ieee754_pow+0x608>)
    36f8:	4b24      	ldr	r3, [pc, #144]	; (378c <__ieee754_pow+0x60c>)
    36fa:	f000 fedb 	bl	44b4 <__aeabi_dadd>
    36fe:	0032      	movs	r2, r6
    3700:	9002      	str	r0, [sp, #8]
    3702:	9103      	str	r1, [sp, #12]
    3704:	003b      	movs	r3, r7
    3706:	0020      	movs	r0, r4
    3708:	0029      	movs	r1, r5
    370a:	f002 f897 	bl	583c <__aeabi_dsub>
    370e:	0002      	movs	r2, r0
    3710:	000b      	movs	r3, r1
    3712:	9802      	ldr	r0, [sp, #8]
    3714:	9903      	ldr	r1, [sp, #12]
    3716:	f000 fd31 	bl	417c <__aeabi_dcmpgt>
    371a:	46aa      	mov	sl, r5
    371c:	e038      	b.n	3790 <__ieee754_pow+0x610>
    371e:	46c0      	nop			; (mov r8, r8)
    3720:	000fffff 	.word	0x000fffff
    3724:	43400000 	.word	0x43400000
    3728:	fffffc01 	.word	0xfffffc01
    372c:	3ff00000 	.word	0x3ff00000
    3730:	0003988e 	.word	0x0003988e
    3734:	000bb679 	.word	0x000bb679
    3738:	fff00000 	.word	0xfff00000
    373c:	4a454eef 	.word	0x4a454eef
    3740:	3fca7e28 	.word	0x3fca7e28
    3744:	93c9db65 	.word	0x93c9db65
    3748:	3fcd864a 	.word	0x3fcd864a
    374c:	a91d4101 	.word	0xa91d4101
    3750:	3fd17460 	.word	0x3fd17460
    3754:	518f264d 	.word	0x518f264d
    3758:	3fd55555 	.word	0x3fd55555
    375c:	db6fabff 	.word	0xdb6fabff
    3760:	3fdb6db6 	.word	0x3fdb6db6
    3764:	33333303 	.word	0x33333303
    3768:	3fe33333 	.word	0x3fe33333
    376c:	40080000 	.word	0x40080000
    3770:	3feec709 	.word	0x3feec709
    3774:	dc3a03fd 	.word	0xdc3a03fd
    3778:	145b01f5 	.word	0x145b01f5
    377c:	be3e2fe0 	.word	0xbe3e2fe0
    3780:	408fffff 	.word	0x408fffff
    3784:	bf700000 	.word	0xbf700000
    3788:	652b82fe 	.word	0x652b82fe
    378c:	3c971547 	.word	0x3c971547
    3790:	2800      	cmp	r0, #0
    3792:	d000      	beq.n	3796 <__ieee754_pow+0x616>
    3794:	e190      	b.n	3ab8 <__ieee754_pow+0x938>
    3796:	4aec      	ldr	r2, [pc, #944]	; (3b48 <__ieee754_pow+0x9c8>)
    3798:	4653      	mov	r3, sl
    379a:	4694      	mov	ip, r2
    379c:	2280      	movs	r2, #128	; 0x80
    379e:	0352      	lsls	r2, r2, #13
    37a0:	0011      	movs	r1, r2
    37a2:	151b      	asrs	r3, r3, #20
    37a4:	4463      	add	r3, ip
    37a6:	4119      	asrs	r1, r3
    37a8:	000b      	movs	r3, r1
    37aa:	4690      	mov	r8, r2
    37ac:	4ae7      	ldr	r2, [pc, #924]	; (3b4c <__ieee754_pow+0x9cc>)
    37ae:	445b      	add	r3, fp
    37b0:	4694      	mov	ip, r2
    37b2:	005c      	lsls	r4, r3, #1
    37b4:	0d64      	lsrs	r4, r4, #21
    37b6:	4de6      	ldr	r5, [pc, #920]	; (3b50 <__ieee754_pow+0x9d0>)
    37b8:	4464      	add	r4, ip
    37ba:	4125      	asrs	r5, r4
    37bc:	001a      	movs	r2, r3
    37be:	43aa      	bics	r2, r5
    37c0:	0011      	movs	r1, r2
    37c2:	4642      	mov	r2, r8
    37c4:	031b      	lsls	r3, r3, #12
    37c6:	0b1b      	lsrs	r3, r3, #12
    37c8:	4313      	orrs	r3, r2
    37ca:	2214      	movs	r2, #20
    37cc:	1b14      	subs	r4, r2, r4
    37ce:	4123      	asrs	r3, r4
    37d0:	4699      	mov	r9, r3
    37d2:	465b      	mov	r3, fp
    37d4:	2000      	movs	r0, #0
    37d6:	2b00      	cmp	r3, #0
    37d8:	da00      	bge.n	37dc <__ieee754_pow+0x65c>
    37da:	e1b0      	b.n	3b3e <__ieee754_pow+0x9be>
    37dc:	0002      	movs	r2, r0
    37de:	000b      	movs	r3, r1
    37e0:	0030      	movs	r0, r6
    37e2:	0039      	movs	r1, r7
    37e4:	f002 f82a 	bl	583c <__aeabi_dsub>
    37e8:	000b      	movs	r3, r1
    37ea:	0002      	movs	r2, r0
    37ec:	0006      	movs	r6, r0
    37ee:	000f      	movs	r7, r1
    37f0:	9800      	ldr	r0, [sp, #0]
    37f2:	9901      	ldr	r1, [sp, #4]
    37f4:	f000 fe5e 	bl	44b4 <__aeabi_dadd>
    37f8:	464b      	mov	r3, r9
    37fa:	051b      	lsls	r3, r3, #20
    37fc:	000d      	movs	r5, r1
    37fe:	4698      	mov	r8, r3
    3800:	2400      	movs	r4, #0
    3802:	2200      	movs	r2, #0
    3804:	4bd3      	ldr	r3, [pc, #844]	; (3b54 <__ieee754_pow+0x9d4>)
    3806:	0020      	movs	r0, r4
    3808:	0029      	movs	r1, r5
    380a:	f001 fd97 	bl	533c <__aeabi_dmul>
    380e:	0032      	movs	r2, r6
    3810:	9002      	str	r0, [sp, #8]
    3812:	9103      	str	r1, [sp, #12]
    3814:	003b      	movs	r3, r7
    3816:	0020      	movs	r0, r4
    3818:	0029      	movs	r1, r5
    381a:	f002 f80f 	bl	583c <__aeabi_dsub>
    381e:	0002      	movs	r2, r0
    3820:	000b      	movs	r3, r1
    3822:	9800      	ldr	r0, [sp, #0]
    3824:	9901      	ldr	r1, [sp, #4]
    3826:	f002 f809 	bl	583c <__aeabi_dsub>
    382a:	4acb      	ldr	r2, [pc, #812]	; (3b58 <__ieee754_pow+0x9d8>)
    382c:	4bcb      	ldr	r3, [pc, #812]	; (3b5c <__ieee754_pow+0x9dc>)
    382e:	f001 fd85 	bl	533c <__aeabi_dmul>
    3832:	4acb      	ldr	r2, [pc, #812]	; (3b60 <__ieee754_pow+0x9e0>)
    3834:	0006      	movs	r6, r0
    3836:	000f      	movs	r7, r1
    3838:	4bca      	ldr	r3, [pc, #808]	; (3b64 <__ieee754_pow+0x9e4>)
    383a:	0020      	movs	r0, r4
    383c:	0029      	movs	r1, r5
    383e:	f001 fd7d 	bl	533c <__aeabi_dmul>
    3842:	0002      	movs	r2, r0
    3844:	000b      	movs	r3, r1
    3846:	0030      	movs	r0, r6
    3848:	0039      	movs	r1, r7
    384a:	f000 fe33 	bl	44b4 <__aeabi_dadd>
    384e:	0004      	movs	r4, r0
    3850:	000d      	movs	r5, r1
    3852:	0002      	movs	r2, r0
    3854:	000b      	movs	r3, r1
    3856:	9802      	ldr	r0, [sp, #8]
    3858:	9903      	ldr	r1, [sp, #12]
    385a:	f000 fe2b 	bl	44b4 <__aeabi_dadd>
    385e:	9a02      	ldr	r2, [sp, #8]
    3860:	9b03      	ldr	r3, [sp, #12]
    3862:	0006      	movs	r6, r0
    3864:	000f      	movs	r7, r1
    3866:	f001 ffe9 	bl	583c <__aeabi_dsub>
    386a:	0002      	movs	r2, r0
    386c:	000b      	movs	r3, r1
    386e:	0020      	movs	r0, r4
    3870:	0029      	movs	r1, r5
    3872:	f001 ffe3 	bl	583c <__aeabi_dsub>
    3876:	0032      	movs	r2, r6
    3878:	9000      	str	r0, [sp, #0]
    387a:	9101      	str	r1, [sp, #4]
    387c:	003b      	movs	r3, r7
    387e:	0030      	movs	r0, r6
    3880:	0039      	movs	r1, r7
    3882:	f001 fd5b 	bl	533c <__aeabi_dmul>
    3886:	0004      	movs	r4, r0
    3888:	000d      	movs	r5, r1
    388a:	4ab7      	ldr	r2, [pc, #732]	; (3b68 <__ieee754_pow+0x9e8>)
    388c:	4bb7      	ldr	r3, [pc, #732]	; (3b6c <__ieee754_pow+0x9ec>)
    388e:	f001 fd55 	bl	533c <__aeabi_dmul>
    3892:	4ab7      	ldr	r2, [pc, #732]	; (3b70 <__ieee754_pow+0x9f0>)
    3894:	4bb7      	ldr	r3, [pc, #732]	; (3b74 <__ieee754_pow+0x9f4>)
    3896:	f001 ffd1 	bl	583c <__aeabi_dsub>
    389a:	0022      	movs	r2, r4
    389c:	002b      	movs	r3, r5
    389e:	f001 fd4d 	bl	533c <__aeabi_dmul>
    38a2:	4ab5      	ldr	r2, [pc, #724]	; (3b78 <__ieee754_pow+0x9f8>)
    38a4:	4bb5      	ldr	r3, [pc, #724]	; (3b7c <__ieee754_pow+0x9fc>)
    38a6:	f000 fe05 	bl	44b4 <__aeabi_dadd>
    38aa:	0022      	movs	r2, r4
    38ac:	002b      	movs	r3, r5
    38ae:	f001 fd45 	bl	533c <__aeabi_dmul>
    38b2:	4ab3      	ldr	r2, [pc, #716]	; (3b80 <__ieee754_pow+0xa00>)
    38b4:	4bb3      	ldr	r3, [pc, #716]	; (3b84 <__ieee754_pow+0xa04>)
    38b6:	f001 ffc1 	bl	583c <__aeabi_dsub>
    38ba:	0022      	movs	r2, r4
    38bc:	002b      	movs	r3, r5
    38be:	f001 fd3d 	bl	533c <__aeabi_dmul>
    38c2:	4ab1      	ldr	r2, [pc, #708]	; (3b88 <__ieee754_pow+0xa08>)
    38c4:	4bb1      	ldr	r3, [pc, #708]	; (3b8c <__ieee754_pow+0xa0c>)
    38c6:	f000 fdf5 	bl	44b4 <__aeabi_dadd>
    38ca:	0022      	movs	r2, r4
    38cc:	002b      	movs	r3, r5
    38ce:	f001 fd35 	bl	533c <__aeabi_dmul>
    38d2:	0002      	movs	r2, r0
    38d4:	000b      	movs	r3, r1
    38d6:	0030      	movs	r0, r6
    38d8:	0039      	movs	r1, r7
    38da:	f001 ffaf 	bl	583c <__aeabi_dsub>
    38de:	0004      	movs	r4, r0
    38e0:	000d      	movs	r5, r1
    38e2:	0002      	movs	r2, r0
    38e4:	000b      	movs	r3, r1
    38e6:	0030      	movs	r0, r6
    38e8:	0039      	movs	r1, r7
    38ea:	f001 fd27 	bl	533c <__aeabi_dmul>
    38ee:	2380      	movs	r3, #128	; 0x80
    38f0:	9002      	str	r0, [sp, #8]
    38f2:	9103      	str	r1, [sp, #12]
    38f4:	2200      	movs	r2, #0
    38f6:	05db      	lsls	r3, r3, #23
    38f8:	0020      	movs	r0, r4
    38fa:	0029      	movs	r1, r5
    38fc:	f001 ff9e 	bl	583c <__aeabi_dsub>
    3900:	0002      	movs	r2, r0
    3902:	000b      	movs	r3, r1
    3904:	9802      	ldr	r0, [sp, #8]
    3906:	9903      	ldr	r1, [sp, #12]
    3908:	f001 f8e4 	bl	4ad4 <__aeabi_ddiv>
    390c:	9a00      	ldr	r2, [sp, #0]
    390e:	9b01      	ldr	r3, [sp, #4]
    3910:	0004      	movs	r4, r0
    3912:	000d      	movs	r5, r1
    3914:	0030      	movs	r0, r6
    3916:	0039      	movs	r1, r7
    3918:	f001 fd10 	bl	533c <__aeabi_dmul>
    391c:	9a00      	ldr	r2, [sp, #0]
    391e:	9b01      	ldr	r3, [sp, #4]
    3920:	f000 fdc8 	bl	44b4 <__aeabi_dadd>
    3924:	0002      	movs	r2, r0
    3926:	000b      	movs	r3, r1
    3928:	0020      	movs	r0, r4
    392a:	0029      	movs	r1, r5
    392c:	f001 ff86 	bl	583c <__aeabi_dsub>
    3930:	0032      	movs	r2, r6
    3932:	003b      	movs	r3, r7
    3934:	f001 ff82 	bl	583c <__aeabi_dsub>
    3938:	0002      	movs	r2, r0
    393a:	000b      	movs	r3, r1
    393c:	2000      	movs	r0, #0
    393e:	4994      	ldr	r1, [pc, #592]	; (3b90 <__ieee754_pow+0xa10>)
    3940:	f001 ff7c 	bl	583c <__aeabi_dsub>
    3944:	4643      	mov	r3, r8
    3946:	185b      	adds	r3, r3, r1
    3948:	151a      	asrs	r2, r3, #20
    394a:	2a00      	cmp	r2, #0
    394c:	dc00      	bgt.n	3950 <__ieee754_pow+0x7d0>
    394e:	e149      	b.n	3be4 <__ieee754_pow+0xa64>
    3950:	0019      	movs	r1, r3
    3952:	9a06      	ldr	r2, [sp, #24]
    3954:	9b07      	ldr	r3, [sp, #28]
    3956:	f001 fcf1 	bl	533c <__aeabi_dmul>
    395a:	e459      	b.n	3210 <__ieee754_pow+0x90>
    395c:	003a      	movs	r2, r7
    395e:	0033      	movs	r3, r6
    3960:	0038      	movs	r0, r7
    3962:	0031      	movs	r1, r6
    3964:	f001 fcea 	bl	533c <__aeabi_dmul>
    3968:	e452      	b.n	3210 <__ieee754_pow+0x90>
    396a:	4653      	mov	r3, sl
    396c:	2b00      	cmp	r3, #0
    396e:	db00      	blt.n	3972 <__ieee754_pow+0x7f2>
    3970:	e4d9      	b.n	3326 <__ieee754_pow+0x1a6>
    3972:	9c00      	ldr	r4, [sp, #0]
    3974:	9d01      	ldr	r5, [sp, #4]
    3976:	2280      	movs	r2, #128	; 0x80
    3978:	0612      	lsls	r2, r2, #24
    397a:	002b      	movs	r3, r5
    397c:	4694      	mov	ip, r2
    397e:	4463      	add	r3, ip
    3980:	0020      	movs	r0, r4
    3982:	0019      	movs	r1, r3
    3984:	f7ff fc44 	bl	3210 <__ieee754_pow+0x90>
    3988:	004b      	lsls	r3, r1, #1
    398a:	085b      	lsrs	r3, r3, #1
    398c:	469a      	mov	sl, r3
    398e:	4b81      	ldr	r3, [pc, #516]	; (3b94 <__ieee754_pow+0xa14>)
    3990:	459a      	cmp	sl, r3
    3992:	dc00      	bgt.n	3996 <__ieee754_pow+0x816>
    3994:	e0b1      	b.n	3afa <__ieee754_pow+0x97a>
    3996:	4b80      	ldr	r3, [pc, #512]	; (3b98 <__ieee754_pow+0xa18>)
    3998:	445b      	add	r3, fp
    399a:	431a      	orrs	r2, r3
    399c:	d10c      	bne.n	39b8 <__ieee754_pow+0x838>
    399e:	0032      	movs	r2, r6
    39a0:	003b      	movs	r3, r7
    39a2:	f001 ff4b 	bl	583c <__aeabi_dsub>
    39a6:	0002      	movs	r2, r0
    39a8:	000b      	movs	r3, r1
    39aa:	9800      	ldr	r0, [sp, #0]
    39ac:	9901      	ldr	r1, [sp, #4]
    39ae:	f000 fbdb 	bl	4168 <__aeabi_dcmple>
    39b2:	2800      	cmp	r0, #0
    39b4:	d100      	bne.n	39b8 <__ieee754_pow+0x838>
    39b6:	e6ee      	b.n	3796 <__ieee754_pow+0x616>
    39b8:	9806      	ldr	r0, [sp, #24]
    39ba:	9907      	ldr	r1, [sp, #28]
    39bc:	4a77      	ldr	r2, [pc, #476]	; (3b9c <__ieee754_pow+0xa1c>)
    39be:	4b78      	ldr	r3, [pc, #480]	; (3ba0 <__ieee754_pow+0xa20>)
    39c0:	f001 fcbc 	bl	533c <__aeabi_dmul>
    39c4:	4a75      	ldr	r2, [pc, #468]	; (3b9c <__ieee754_pow+0xa1c>)
    39c6:	4b76      	ldr	r3, [pc, #472]	; (3ba0 <__ieee754_pow+0xa20>)
    39c8:	f001 fcb8 	bl	533c <__aeabi_dmul>
    39cc:	f7ff fc20 	bl	3210 <__ieee754_pow+0x90>
    39d0:	2300      	movs	r3, #0
    39d2:	4c74      	ldr	r4, [pc, #464]	; (3ba4 <__ieee754_pow+0xa24>)
    39d4:	9306      	str	r3, [sp, #24]
    39d6:	9407      	str	r4, [sp, #28]
    39d8:	e652      	b.n	3680 <__ieee754_pow+0x500>
    39da:	0002      	movs	r2, r0
    39dc:	000b      	movs	r3, r1
    39de:	2000      	movs	r0, #0
    39e0:	496b      	ldr	r1, [pc, #428]	; (3b90 <__ieee754_pow+0xa10>)
    39e2:	f001 f877 	bl	4ad4 <__aeabi_ddiv>
    39e6:	f7ff fc32 	bl	324e <__ieee754_pow+0xce>
    39ea:	4653      	mov	r3, sl
    39ec:	2b00      	cmp	r3, #0
    39ee:	db00      	blt.n	39f2 <__ieee754_pow+0x872>
    39f0:	e499      	b.n	3326 <__ieee754_pow+0x1a6>
    39f2:	e454      	b.n	329e <__ieee754_pow+0x11e>
    39f4:	4b6c      	ldr	r3, [pc, #432]	; (3ba8 <__ieee754_pow+0xa28>)
    39f6:	429c      	cmp	r4, r3
    39f8:	ddf7      	ble.n	39ea <__ieee754_pow+0x86a>
    39fa:	4b65      	ldr	r3, [pc, #404]	; (3b90 <__ieee754_pow+0xa10>)
    39fc:	429c      	cmp	r4, r3
    39fe:	dd00      	ble.n	3a02 <__ieee754_pow+0x882>
    3a00:	e44a      	b.n	3298 <__ieee754_pow+0x118>
    3a02:	2200      	movs	r2, #0
    3a04:	4b62      	ldr	r3, [pc, #392]	; (3b90 <__ieee754_pow+0xa10>)
    3a06:	f001 ff19 	bl	583c <__aeabi_dsub>
    3a0a:	22c0      	movs	r2, #192	; 0xc0
    3a0c:	4b67      	ldr	r3, [pc, #412]	; (3bac <__ieee754_pow+0xa2c>)
    3a0e:	05d2      	lsls	r2, r2, #23
    3a10:	0004      	movs	r4, r0
    3a12:	000d      	movs	r5, r1
    3a14:	f001 fc92 	bl	533c <__aeabi_dmul>
    3a18:	4a65      	ldr	r2, [pc, #404]	; (3bb0 <__ieee754_pow+0xa30>)
    3a1a:	0006      	movs	r6, r0
    3a1c:	000f      	movs	r7, r1
    3a1e:	4b65      	ldr	r3, [pc, #404]	; (3bb4 <__ieee754_pow+0xa34>)
    3a20:	0020      	movs	r0, r4
    3a22:	0029      	movs	r1, r5
    3a24:	f001 fc8a 	bl	533c <__aeabi_dmul>
    3a28:	2200      	movs	r2, #0
    3a2a:	9002      	str	r0, [sp, #8]
    3a2c:	9103      	str	r1, [sp, #12]
    3a2e:	4b62      	ldr	r3, [pc, #392]	; (3bb8 <__ieee754_pow+0xa38>)
    3a30:	0020      	movs	r0, r4
    3a32:	0029      	movs	r1, r5
    3a34:	f001 fc82 	bl	533c <__aeabi_dmul>
    3a38:	0002      	movs	r2, r0
    3a3a:	000b      	movs	r3, r1
    3a3c:	485f      	ldr	r0, [pc, #380]	; (3bbc <__ieee754_pow+0xa3c>)
    3a3e:	4960      	ldr	r1, [pc, #384]	; (3bc0 <__ieee754_pow+0xa40>)
    3a40:	f001 fefc 	bl	583c <__aeabi_dsub>
    3a44:	0022      	movs	r2, r4
    3a46:	002b      	movs	r3, r5
    3a48:	f001 fc78 	bl	533c <__aeabi_dmul>
    3a4c:	0002      	movs	r2, r0
    3a4e:	000b      	movs	r3, r1
    3a50:	2000      	movs	r0, #0
    3a52:	495c      	ldr	r1, [pc, #368]	; (3bc4 <__ieee754_pow+0xa44>)
    3a54:	f001 fef2 	bl	583c <__aeabi_dsub>
    3a58:	0022      	movs	r2, r4
    3a5a:	9004      	str	r0, [sp, #16]
    3a5c:	9105      	str	r1, [sp, #20]
    3a5e:	002b      	movs	r3, r5
    3a60:	0020      	movs	r0, r4
    3a62:	0029      	movs	r1, r5
    3a64:	f001 fc6a 	bl	533c <__aeabi_dmul>
    3a68:	0002      	movs	r2, r0
    3a6a:	000b      	movs	r3, r1
    3a6c:	9804      	ldr	r0, [sp, #16]
    3a6e:	9905      	ldr	r1, [sp, #20]
    3a70:	f001 fc64 	bl	533c <__aeabi_dmul>
    3a74:	4a54      	ldr	r2, [pc, #336]	; (3bc8 <__ieee754_pow+0xa48>)
    3a76:	4b4d      	ldr	r3, [pc, #308]	; (3bac <__ieee754_pow+0xa2c>)
    3a78:	f001 fc60 	bl	533c <__aeabi_dmul>
    3a7c:	0002      	movs	r2, r0
    3a7e:	000b      	movs	r3, r1
    3a80:	9802      	ldr	r0, [sp, #8]
    3a82:	9903      	ldr	r1, [sp, #12]
    3a84:	f001 feda 	bl	583c <__aeabi_dsub>
    3a88:	0002      	movs	r2, r0
    3a8a:	000b      	movs	r3, r1
    3a8c:	0004      	movs	r4, r0
    3a8e:	000d      	movs	r5, r1
    3a90:	0030      	movs	r0, r6
    3a92:	0039      	movs	r1, r7
    3a94:	f000 fd0e 	bl	44b4 <__aeabi_dadd>
    3a98:	2000      	movs	r0, #0
    3a9a:	0032      	movs	r2, r6
    3a9c:	003b      	movs	r3, r7
    3a9e:	9002      	str	r0, [sp, #8]
    3aa0:	9103      	str	r1, [sp, #12]
    3aa2:	f001 fecb 	bl	583c <__aeabi_dsub>
    3aa6:	0002      	movs	r2, r0
    3aa8:	000b      	movs	r3, r1
    3aaa:	0020      	movs	r0, r4
    3aac:	0029      	movs	r1, r5
    3aae:	f001 fec5 	bl	583c <__aeabi_dsub>
    3ab2:	9004      	str	r0, [sp, #16]
    3ab4:	9105      	str	r1, [sp, #20]
    3ab6:	e5d9      	b.n	366c <__ieee754_pow+0x4ec>
    3ab8:	4a44      	ldr	r2, [pc, #272]	; (3bcc <__ieee754_pow+0xa4c>)
    3aba:	4b45      	ldr	r3, [pc, #276]	; (3bd0 <__ieee754_pow+0xa50>)
    3abc:	9806      	ldr	r0, [sp, #24]
    3abe:	9907      	ldr	r1, [sp, #28]
    3ac0:	f001 fc3c 	bl	533c <__aeabi_dmul>
    3ac4:	4a41      	ldr	r2, [pc, #260]	; (3bcc <__ieee754_pow+0xa4c>)
    3ac6:	4b42      	ldr	r3, [pc, #264]	; (3bd0 <__ieee754_pow+0xa50>)
    3ac8:	f001 fc38 	bl	533c <__aeabi_dmul>
    3acc:	f7ff fba0 	bl	3210 <__ieee754_pow+0x90>
    3ad0:	2a00      	cmp	r2, #0
    3ad2:	d001      	beq.n	3ad8 <__ieee754_pow+0x958>
    3ad4:	f7ff fba9 	bl	322a <__ieee754_pow+0xaa>
    3ad8:	3214      	adds	r2, #20
    3ada:	1ad3      	subs	r3, r2, r3
    3adc:	002a      	movs	r2, r5
    3ade:	411a      	asrs	r2, r3
    3ae0:	0011      	movs	r1, r2
    3ae2:	4099      	lsls	r1, r3
    3ae4:	428d      	cmp	r5, r1
    3ae6:	d001      	beq.n	3aec <__ieee754_pow+0x96c>
    3ae8:	f7ff fb76 	bl	31d8 <__ieee754_pow+0x58>
    3aec:	2301      	movs	r3, #1
    3aee:	401a      	ands	r2, r3
    3af0:	18db      	adds	r3, r3, r3
    3af2:	1a9b      	subs	r3, r3, r2
    3af4:	469b      	mov	fp, r3
    3af6:	f7ff fb6f 	bl	31d8 <__ieee754_pow+0x58>
    3afa:	2200      	movs	r2, #0
    3afc:	4b31      	ldr	r3, [pc, #196]	; (3bc4 <__ieee754_pow+0xa44>)
    3afe:	4690      	mov	r8, r2
    3b00:	4691      	mov	r9, r2
    3b02:	459a      	cmp	sl, r3
    3b04:	dc00      	bgt.n	3b08 <__ieee754_pow+0x988>
    3b06:	e67b      	b.n	3800 <__ieee754_pow+0x680>
    3b08:	e645      	b.n	3796 <__ieee754_pow+0x616>
    3b0a:	0002      	movs	r2, r0
    3b0c:	000b      	movs	r3, r1
    3b0e:	f001 fe95 	bl	583c <__aeabi_dsub>
    3b12:	0002      	movs	r2, r0
    3b14:	000b      	movs	r3, r1
    3b16:	f000 ffdd 	bl	4ad4 <__aeabi_ddiv>
    3b1a:	f7ff fb79 	bl	3210 <__ieee754_pow+0x90>
    3b1e:	2380      	movs	r3, #128	; 0x80
    3b20:	4c2c      	ldr	r4, [pc, #176]	; (3bd4 <__ieee754_pow+0xa54>)
    3b22:	05db      	lsls	r3, r3, #23
    3b24:	9308      	str	r3, [sp, #32]
    3b26:	9409      	str	r4, [sp, #36]	; 0x24
    3b28:	4b2b      	ldr	r3, [pc, #172]	; (3bd8 <__ieee754_pow+0xa58>)
    3b2a:	4c2c      	ldr	r4, [pc, #176]	; (3bdc <__ieee754_pow+0xa5c>)
    3b2c:	2200      	movs	r2, #0
    3b2e:	930c      	str	r3, [sp, #48]	; 0x30
    3b30:	940d      	str	r4, [sp, #52]	; 0x34
    3b32:	2480      	movs	r4, #128	; 0x80
    3b34:	4b2a      	ldr	r3, [pc, #168]	; (3be0 <__ieee754_pow+0xa60>)
    3b36:	02e4      	lsls	r4, r4, #11
    3b38:	9206      	str	r2, [sp, #24]
    3b3a:	9307      	str	r3, [sp, #28]
    3b3c:	e449      	b.n	33d2 <__ieee754_pow+0x252>
    3b3e:	464b      	mov	r3, r9
    3b40:	425b      	negs	r3, r3
    3b42:	4699      	mov	r9, r3
    3b44:	e64a      	b.n	37dc <__ieee754_pow+0x65c>
    3b46:	46c0      	nop			; (mov r8, r8)
    3b48:	fffffc02 	.word	0xfffffc02
    3b4c:	fffffc01 	.word	0xfffffc01
    3b50:	000fffff 	.word	0x000fffff
    3b54:	3fe62e43 	.word	0x3fe62e43
    3b58:	fefa39ef 	.word	0xfefa39ef
    3b5c:	3fe62e42 	.word	0x3fe62e42
    3b60:	0ca86c39 	.word	0x0ca86c39
    3b64:	be205c61 	.word	0xbe205c61
    3b68:	72bea4d0 	.word	0x72bea4d0
    3b6c:	3e663769 	.word	0x3e663769
    3b70:	c5d26bf1 	.word	0xc5d26bf1
    3b74:	3ebbbd41 	.word	0x3ebbbd41
    3b78:	af25de2c 	.word	0xaf25de2c
    3b7c:	3f11566a 	.word	0x3f11566a
    3b80:	16bebd93 	.word	0x16bebd93
    3b84:	3f66c16c 	.word	0x3f66c16c
    3b88:	5555553e 	.word	0x5555553e
    3b8c:	3fc55555 	.word	0x3fc55555
    3b90:	3ff00000 	.word	0x3ff00000
    3b94:	4090cbff 	.word	0x4090cbff
    3b98:	3f6f3400 	.word	0x3f6f3400
    3b9c:	c2f8f359 	.word	0xc2f8f359
    3ba0:	01a56e1f 	.word	0x01a56e1f
    3ba4:	bff00000 	.word	0xbff00000
    3ba8:	3feffffe 	.word	0x3feffffe
    3bac:	3ff71547 	.word	0x3ff71547
    3bb0:	f85ddf44 	.word	0xf85ddf44
    3bb4:	3e54ae0b 	.word	0x3e54ae0b
    3bb8:	3fd00000 	.word	0x3fd00000
    3bbc:	55555555 	.word	0x55555555
    3bc0:	3fd55555 	.word	0x3fd55555
    3bc4:	3fe00000 	.word	0x3fe00000
    3bc8:	652b82fe 	.word	0x652b82fe
    3bcc:	8800759c 	.word	0x8800759c
    3bd0:	7e37e43c 	.word	0x7e37e43c
    3bd4:	3fe2b803 	.word	0x3fe2b803
    3bd8:	43cfd006 	.word	0x43cfd006
    3bdc:	3e4cfdeb 	.word	0x3e4cfdeb
    3be0:	3ff80000 	.word	0x3ff80000
    3be4:	464a      	mov	r2, r9
    3be6:	f000 f999 	bl	3f1c <scalbn>
    3bea:	e6b2      	b.n	3952 <__ieee754_pow+0x7d2>

00003bec <__ieee754_sqrt>:
    3bec:	4b6c      	ldr	r3, [pc, #432]	; (3da0 <__ieee754_sqrt+0x1b4>)
    3bee:	b5f0      	push	{r4, r5, r6, r7, lr}
    3bf0:	000a      	movs	r2, r1
    3bf2:	4646      	mov	r6, r8
    3bf4:	000d      	movs	r5, r1
    3bf6:	46d6      	mov	lr, sl
    3bf8:	464f      	mov	r7, r9
    3bfa:	0019      	movs	r1, r3
    3bfc:	b5c0      	push	{r6, r7, lr}
    3bfe:	0004      	movs	r4, r0
    3c00:	0006      	movs	r6, r0
    3c02:	4029      	ands	r1, r5
    3c04:	4299      	cmp	r1, r3
    3c06:	d100      	bne.n	3c0a <__ieee754_sqrt+0x1e>
    3c08:	e0a7      	b.n	3d5a <__ieee754_sqrt+0x16e>
    3c0a:	2d00      	cmp	r5, #0
    3c0c:	dc00      	bgt.n	3c10 <__ieee754_sqrt+0x24>
    3c0e:	e081      	b.n	3d14 <__ieee754_sqrt+0x128>
    3c10:	152f      	asrs	r7, r5, #20
    3c12:	d100      	bne.n	3c16 <__ieee754_sqrt+0x2a>
    3c14:	e08e      	b.n	3d34 <__ieee754_sqrt+0x148>
    3c16:	4b63      	ldr	r3, [pc, #396]	; (3da4 <__ieee754_sqrt+0x1b8>)
    3c18:	0312      	lsls	r2, r2, #12
    3c1a:	469c      	mov	ip, r3
    3c1c:	2380      	movs	r3, #128	; 0x80
    3c1e:	0b12      	lsrs	r2, r2, #12
    3c20:	035b      	lsls	r3, r3, #13
    3c22:	4467      	add	r7, ip
    3c24:	431a      	orrs	r2, r3
    3c26:	07fb      	lsls	r3, r7, #31
    3c28:	d468      	bmi.n	3cfc <__ieee754_sqrt+0x110>
    3c2a:	107b      	asrs	r3, r7, #1
    3c2c:	469c      	mov	ip, r3
    3c2e:	0fe3      	lsrs	r3, r4, #31
    3c30:	189b      	adds	r3, r3, r2
    3c32:	189b      	adds	r3, r3, r2
    3c34:	2280      	movs	r2, #128	; 0x80
    3c36:	2116      	movs	r1, #22
    3c38:	2600      	movs	r6, #0
    3c3a:	2500      	movs	r5, #0
    3c3c:	0064      	lsls	r4, r4, #1
    3c3e:	0392      	lsls	r2, r2, #14
    3c40:	18a8      	adds	r0, r5, r2
    3c42:	4298      	cmp	r0, r3
    3c44:	dc02      	bgt.n	3c4c <__ieee754_sqrt+0x60>
    3c46:	1885      	adds	r5, r0, r2
    3c48:	1a1b      	subs	r3, r3, r0
    3c4a:	18b6      	adds	r6, r6, r2
    3c4c:	0fe0      	lsrs	r0, r4, #31
    3c4e:	005b      	lsls	r3, r3, #1
    3c50:	3901      	subs	r1, #1
    3c52:	181b      	adds	r3, r3, r0
    3c54:	0064      	lsls	r4, r4, #1
    3c56:	0852      	lsrs	r2, r2, #1
    3c58:	2900      	cmp	r1, #0
    3c5a:	d1f1      	bne.n	3c40 <__ieee754_sqrt+0x54>
    3c5c:	2200      	movs	r2, #0
    3c5e:	4692      	mov	sl, r2
    3c60:	4690      	mov	r8, r2
    3c62:	2280      	movs	r2, #128	; 0x80
    3c64:	2020      	movs	r0, #32
    3c66:	0612      	lsls	r2, r2, #24
    3c68:	e009      	b.n	3c7e <__ieee754_sqrt+0x92>
    3c6a:	42ab      	cmp	r3, r5
    3c6c:	d038      	beq.n	3ce0 <__ieee754_sqrt+0xf4>
    3c6e:	0fe1      	lsrs	r1, r4, #31
    3c70:	18c9      	adds	r1, r1, r3
    3c72:	3801      	subs	r0, #1
    3c74:	18cb      	adds	r3, r1, r3
    3c76:	0064      	lsls	r4, r4, #1
    3c78:	0852      	lsrs	r2, r2, #1
    3c7a:	2800      	cmp	r0, #0
    3c7c:	d018      	beq.n	3cb0 <__ieee754_sqrt+0xc4>
    3c7e:	4641      	mov	r1, r8
    3c80:	1851      	adds	r1, r2, r1
    3c82:	42ab      	cmp	r3, r5
    3c84:	ddf1      	ble.n	3c6a <__ieee754_sqrt+0x7e>
    3c86:	188f      	adds	r7, r1, r2
    3c88:	46b8      	mov	r8, r7
    3c8a:	46a9      	mov	r9, r5
    3c8c:	2900      	cmp	r1, #0
    3c8e:	db30      	blt.n	3cf2 <__ieee754_sqrt+0x106>
    3c90:	1b5b      	subs	r3, r3, r5
    3c92:	428c      	cmp	r4, r1
    3c94:	41ad      	sbcs	r5, r5
    3c96:	426d      	negs	r5, r5
    3c98:	1b5b      	subs	r3, r3, r5
    3c9a:	1a64      	subs	r4, r4, r1
    3c9c:	0fe1      	lsrs	r1, r4, #31
    3c9e:	18c9      	adds	r1, r1, r3
    3ca0:	3801      	subs	r0, #1
    3ca2:	4492      	add	sl, r2
    3ca4:	464d      	mov	r5, r9
    3ca6:	18cb      	adds	r3, r1, r3
    3ca8:	0064      	lsls	r4, r4, #1
    3caa:	0852      	lsrs	r2, r2, #1
    3cac:	2800      	cmp	r0, #0
    3cae:	d1e6      	bne.n	3c7e <__ieee754_sqrt+0x92>
    3cb0:	4323      	orrs	r3, r4
    3cb2:	d128      	bne.n	3d06 <__ieee754_sqrt+0x11a>
    3cb4:	4653      	mov	r3, sl
    3cb6:	085b      	lsrs	r3, r3, #1
    3cb8:	493b      	ldr	r1, [pc, #236]	; (3da8 <__ieee754_sqrt+0x1bc>)
    3cba:	1072      	asrs	r2, r6, #1
    3cbc:	4688      	mov	r8, r1
    3cbe:	4442      	add	r2, r8
    3cc0:	07f1      	lsls	r1, r6, #31
    3cc2:	d502      	bpl.n	3cca <__ieee754_sqrt+0xde>
    3cc4:	2180      	movs	r1, #128	; 0x80
    3cc6:	0609      	lsls	r1, r1, #24
    3cc8:	430b      	orrs	r3, r1
    3cca:	4661      	mov	r1, ip
    3ccc:	001e      	movs	r6, r3
    3cce:	050f      	lsls	r7, r1, #20
    3cd0:	18bd      	adds	r5, r7, r2
    3cd2:	0030      	movs	r0, r6
    3cd4:	0029      	movs	r1, r5
    3cd6:	bc1c      	pop	{r2, r3, r4}
    3cd8:	4690      	mov	r8, r2
    3cda:	4699      	mov	r9, r3
    3cdc:	46a2      	mov	sl, r4
    3cde:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3ce0:	42a1      	cmp	r1, r4
    3ce2:	d8c4      	bhi.n	3c6e <__ieee754_sqrt+0x82>
    3ce4:	188f      	adds	r7, r1, r2
    3ce6:	46b8      	mov	r8, r7
    3ce8:	2900      	cmp	r1, #0
    3cea:	db42      	blt.n	3d72 <__ieee754_sqrt+0x186>
    3cec:	4699      	mov	r9, r3
    3cee:	2300      	movs	r3, #0
    3cf0:	e7d3      	b.n	3c9a <__ieee754_sqrt+0xae>
    3cf2:	2f00      	cmp	r7, #0
    3cf4:	db2f      	blt.n	3d56 <__ieee754_sqrt+0x16a>
    3cf6:	1c6f      	adds	r7, r5, #1
    3cf8:	46b9      	mov	r9, r7
    3cfa:	e7c9      	b.n	3c90 <__ieee754_sqrt+0xa4>
    3cfc:	0fe1      	lsrs	r1, r4, #31
    3cfe:	0052      	lsls	r2, r2, #1
    3d00:	188a      	adds	r2, r1, r2
    3d02:	0064      	lsls	r4, r4, #1
    3d04:	e791      	b.n	3c2a <__ieee754_sqrt+0x3e>
    3d06:	4653      	mov	r3, sl
    3d08:	3301      	adds	r3, #1
    3d0a:	d035      	beq.n	3d78 <__ieee754_sqrt+0x18c>
    3d0c:	4653      	mov	r3, sl
    3d0e:	3301      	adds	r3, #1
    3d10:	085b      	lsrs	r3, r3, #1
    3d12:	e7d1      	b.n	3cb8 <__ieee754_sqrt+0xcc>
    3d14:	006b      	lsls	r3, r5, #1
    3d16:	085b      	lsrs	r3, r3, #1
    3d18:	4303      	orrs	r3, r0
    3d1a:	d0da      	beq.n	3cd2 <__ieee754_sqrt+0xe6>
    3d1c:	2700      	movs	r7, #0
    3d1e:	2d00      	cmp	r5, #0
    3d20:	d132      	bne.n	3d88 <__ieee754_sqrt+0x19c>
    3d22:	0ae2      	lsrs	r2, r4, #11
    3d24:	3f15      	subs	r7, #21
    3d26:	0564      	lsls	r4, r4, #21
    3d28:	2a00      	cmp	r2, #0
    3d2a:	d0fa      	beq.n	3d22 <__ieee754_sqrt+0x136>
    3d2c:	2380      	movs	r3, #128	; 0x80
    3d2e:	035b      	lsls	r3, r3, #13
    3d30:	421a      	tst	r2, r3
    3d32:	d124      	bne.n	3d7e <__ieee754_sqrt+0x192>
    3d34:	2080      	movs	r0, #128	; 0x80
    3d36:	2300      	movs	r3, #0
    3d38:	0340      	lsls	r0, r0, #13
    3d3a:	e000      	b.n	3d3e <__ieee754_sqrt+0x152>
    3d3c:	000b      	movs	r3, r1
    3d3e:	0052      	lsls	r2, r2, #1
    3d40:	1c59      	adds	r1, r3, #1
    3d42:	4202      	tst	r2, r0
    3d44:	d0fa      	beq.n	3d3c <__ieee754_sqrt+0x150>
    3d46:	2020      	movs	r0, #32
    3d48:	1a40      	subs	r0, r0, r1
    3d4a:	1aff      	subs	r7, r7, r3
    3d4c:	0023      	movs	r3, r4
    3d4e:	40c3      	lsrs	r3, r0
    3d50:	408c      	lsls	r4, r1
    3d52:	431a      	orrs	r2, r3
    3d54:	e75f      	b.n	3c16 <__ieee754_sqrt+0x2a>
    3d56:	46a9      	mov	r9, r5
    3d58:	e79a      	b.n	3c90 <__ieee754_sqrt+0xa4>
    3d5a:	002b      	movs	r3, r5
    3d5c:	0002      	movs	r2, r0
    3d5e:	0029      	movs	r1, r5
    3d60:	f001 faec 	bl	533c <__aeabi_dmul>
    3d64:	0032      	movs	r2, r6
    3d66:	002b      	movs	r3, r5
    3d68:	f000 fba4 	bl	44b4 <__aeabi_dadd>
    3d6c:	0006      	movs	r6, r0
    3d6e:	000d      	movs	r5, r1
    3d70:	e7af      	b.n	3cd2 <__ieee754_sqrt+0xe6>
    3d72:	2f00      	cmp	r7, #0
    3d74:	dabf      	bge.n	3cf6 <__ieee754_sqrt+0x10a>
    3d76:	e7b9      	b.n	3cec <__ieee754_sqrt+0x100>
    3d78:	3601      	adds	r6, #1
    3d7a:	2300      	movs	r3, #0
    3d7c:	e79c      	b.n	3cb8 <__ieee754_sqrt+0xcc>
    3d7e:	2301      	movs	r3, #1
    3d80:	2100      	movs	r1, #0
    3d82:	2020      	movs	r0, #32
    3d84:	425b      	negs	r3, r3
    3d86:	e7e0      	b.n	3d4a <__ieee754_sqrt+0x15e>
    3d88:	002b      	movs	r3, r5
    3d8a:	0002      	movs	r2, r0
    3d8c:	0029      	movs	r1, r5
    3d8e:	f001 fd55 	bl	583c <__aeabi_dsub>
    3d92:	0002      	movs	r2, r0
    3d94:	000b      	movs	r3, r1
    3d96:	f000 fe9d 	bl	4ad4 <__aeabi_ddiv>
    3d9a:	0006      	movs	r6, r0
    3d9c:	000d      	movs	r5, r1
    3d9e:	e798      	b.n	3cd2 <__ieee754_sqrt+0xe6>
    3da0:	7ff00000 	.word	0x7ff00000
    3da4:	fffffc01 	.word	0xfffffc01
    3da8:	3fe00000 	.word	0x3fe00000

00003dac <fabs>:
    3dac:	0049      	lsls	r1, r1, #1
    3dae:	084b      	lsrs	r3, r1, #1
    3db0:	0019      	movs	r1, r3
    3db2:	4770      	bx	lr

00003db4 <finite>:
    3db4:	4b03      	ldr	r3, [pc, #12]	; (3dc4 <finite+0x10>)
    3db6:	0048      	lsls	r0, r1, #1
    3db8:	469c      	mov	ip, r3
    3dba:	0840      	lsrs	r0, r0, #1
    3dbc:	4460      	add	r0, ip
    3dbe:	0fc0      	lsrs	r0, r0, #31
    3dc0:	4770      	bx	lr
    3dc2:	46c0      	nop			; (mov r8, r8)
    3dc4:	80100000 	.word	0x80100000

00003dc8 <matherr>:
    3dc8:	2000      	movs	r0, #0
    3dca:	4770      	bx	lr

00003dcc <nan>:
    3dcc:	2000      	movs	r0, #0
    3dce:	4901      	ldr	r1, [pc, #4]	; (3dd4 <nan+0x8>)
    3dd0:	4770      	bx	lr
    3dd2:	46c0      	nop			; (mov r8, r8)
    3dd4:	7ff80000 	.word	0x7ff80000

00003dd8 <rint>:
    3dd8:	b5f0      	push	{r4, r5, r6, r7, lr}
    3dda:	46c6      	mov	lr, r8
    3ddc:	b500      	push	{lr}
    3dde:	0fcb      	lsrs	r3, r1, #31
    3de0:	4698      	mov	r8, r3
    3de2:	4c4a      	ldr	r4, [pc, #296]	; (3f0c <rint+0x134>)
    3de4:	004b      	lsls	r3, r1, #1
    3de6:	0d5b      	lsrs	r3, r3, #21
    3de8:	191e      	adds	r6, r3, r4
    3dea:	b082      	sub	sp, #8
    3dec:	0007      	movs	r7, r0
    3dee:	000a      	movs	r2, r1
    3df0:	2e13      	cmp	r6, #19
    3df2:	dc35      	bgt.n	3e60 <rint+0x88>
    3df4:	2e00      	cmp	r6, #0
    3df6:	db57      	blt.n	3ea8 <rint+0xd0>
    3df8:	4b45      	ldr	r3, [pc, #276]	; (3f10 <rint+0x138>)
    3dfa:	0004      	movs	r4, r0
    3dfc:	4133      	asrs	r3, r6
    3dfe:	001f      	movs	r7, r3
    3e00:	400f      	ands	r7, r1
    3e02:	4307      	orrs	r7, r0
    3e04:	000d      	movs	r5, r1
    3e06:	2f00      	cmp	r7, #0
    3e08:	d024      	beq.n	3e54 <rint+0x7c>
    3e0a:	085b      	lsrs	r3, r3, #1
    3e0c:	001c      	movs	r4, r3
    3e0e:	400c      	ands	r4, r1
    3e10:	4320      	orrs	r0, r4
    3e12:	2700      	movs	r7, #0
    3e14:	2800      	cmp	r0, #0
    3e16:	d007      	beq.n	3e28 <rint+0x50>
    3e18:	2e13      	cmp	r6, #19
    3e1a:	d100      	bne.n	3e1e <rint+0x46>
    3e1c:	e073      	b.n	3f06 <rint+0x12e>
    3e1e:	2280      	movs	r2, #128	; 0x80
    3e20:	02d2      	lsls	r2, r2, #11
    3e22:	4132      	asrs	r2, r6
    3e24:	4399      	bics	r1, r3
    3e26:	430a      	orrs	r2, r1
    3e28:	4643      	mov	r3, r8
    3e2a:	00de      	lsls	r6, r3, #3
    3e2c:	4b39      	ldr	r3, [pc, #228]	; (3f14 <rint+0x13c>)
    3e2e:	0011      	movs	r1, r2
    3e30:	199e      	adds	r6, r3, r6
    3e32:	6834      	ldr	r4, [r6, #0]
    3e34:	6875      	ldr	r5, [r6, #4]
    3e36:	0038      	movs	r0, r7
    3e38:	0022      	movs	r2, r4
    3e3a:	002b      	movs	r3, r5
    3e3c:	f000 fb3a 	bl	44b4 <__aeabi_dadd>
    3e40:	9000      	str	r0, [sp, #0]
    3e42:	9101      	str	r1, [sp, #4]
    3e44:	9800      	ldr	r0, [sp, #0]
    3e46:	9901      	ldr	r1, [sp, #4]
    3e48:	0022      	movs	r2, r4
    3e4a:	002b      	movs	r3, r5
    3e4c:	f001 fcf6 	bl	583c <__aeabi_dsub>
    3e50:	0004      	movs	r4, r0
    3e52:	000d      	movs	r5, r1
    3e54:	0020      	movs	r0, r4
    3e56:	0029      	movs	r1, r5
    3e58:	b002      	add	sp, #8
    3e5a:	bc04      	pop	{r2}
    3e5c:	4690      	mov	r8, r2
    3e5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3e60:	2e33      	cmp	r6, #51	; 0x33
    3e62:	dd0c      	ble.n	3e7e <rint+0xa6>
    3e64:	2380      	movs	r3, #128	; 0x80
    3e66:	0004      	movs	r4, r0
    3e68:	00db      	lsls	r3, r3, #3
    3e6a:	000d      	movs	r5, r1
    3e6c:	429e      	cmp	r6, r3
    3e6e:	d1f1      	bne.n	3e54 <rint+0x7c>
    3e70:	0002      	movs	r2, r0
    3e72:	000b      	movs	r3, r1
    3e74:	f000 fb1e 	bl	44b4 <__aeabi_dadd>
    3e78:	0004      	movs	r4, r0
    3e7a:	000d      	movs	r5, r1
    3e7c:	e7ea      	b.n	3e54 <rint+0x7c>
    3e7e:	4c26      	ldr	r4, [pc, #152]	; (3f18 <rint+0x140>)
    3e80:	000d      	movs	r5, r1
    3e82:	46a4      	mov	ip, r4
    3e84:	2401      	movs	r4, #1
    3e86:	4463      	add	r3, ip
    3e88:	4264      	negs	r4, r4
    3e8a:	40dc      	lsrs	r4, r3
    3e8c:	46a4      	mov	ip, r4
    3e8e:	4661      	mov	r1, ip
    3e90:	0004      	movs	r4, r0
    3e92:	4201      	tst	r1, r0
    3e94:	d0de      	beq.n	3e54 <rint+0x7c>
    3e96:	0849      	lsrs	r1, r1, #1
    3e98:	4201      	tst	r1, r0
    3e9a:	d0c5      	beq.n	3e28 <rint+0x50>
    3e9c:	2780      	movs	r7, #128	; 0x80
    3e9e:	05ff      	lsls	r7, r7, #23
    3ea0:	411f      	asrs	r7, r3
    3ea2:	4388      	bics	r0, r1
    3ea4:	4307      	orrs	r7, r0
    3ea6:	e7bf      	b.n	3e28 <rint+0x50>
    3ea8:	004b      	lsls	r3, r1, #1
    3eaa:	085b      	lsrs	r3, r3, #1
    3eac:	4303      	orrs	r3, r0
    3eae:	0004      	movs	r4, r0
    3eb0:	000d      	movs	r5, r1
    3eb2:	2b00      	cmp	r3, #0
    3eb4:	d0ce      	beq.n	3e54 <rint+0x7c>
    3eb6:	030b      	lsls	r3, r1, #12
    3eb8:	0b1b      	lsrs	r3, r3, #12
    3eba:	4303      	orrs	r3, r0
    3ebc:	001a      	movs	r2, r3
    3ebe:	425b      	negs	r3, r3
    3ec0:	4313      	orrs	r3, r2
    3ec2:	2280      	movs	r2, #128	; 0x80
    3ec4:	0b1b      	lsrs	r3, r3, #12
    3ec6:	0312      	lsls	r2, r2, #12
    3ec8:	4013      	ands	r3, r2
    3eca:	0c4a      	lsrs	r2, r1, #17
    3ecc:	0452      	lsls	r2, r2, #17
    3ece:	4313      	orrs	r3, r2
    3ed0:	0019      	movs	r1, r3
    3ed2:	4643      	mov	r3, r8
    3ed4:	00da      	lsls	r2, r3, #3
    3ed6:	4b0f      	ldr	r3, [pc, #60]	; (3f14 <rint+0x13c>)
    3ed8:	189b      	adds	r3, r3, r2
    3eda:	681c      	ldr	r4, [r3, #0]
    3edc:	685d      	ldr	r5, [r3, #4]
    3ede:	0022      	movs	r2, r4
    3ee0:	002b      	movs	r3, r5
    3ee2:	f000 fae7 	bl	44b4 <__aeabi_dadd>
    3ee6:	9000      	str	r0, [sp, #0]
    3ee8:	9101      	str	r1, [sp, #4]
    3eea:	9800      	ldr	r0, [sp, #0]
    3eec:	9901      	ldr	r1, [sp, #4]
    3eee:	0022      	movs	r2, r4
    3ef0:	002b      	movs	r3, r5
    3ef2:	f001 fca3 	bl	583c <__aeabi_dsub>
    3ef6:	4642      	mov	r2, r8
    3ef8:	004b      	lsls	r3, r1, #1
    3efa:	085b      	lsrs	r3, r3, #1
    3efc:	07d6      	lsls	r6, r2, #31
    3efe:	4333      	orrs	r3, r6
    3f00:	0004      	movs	r4, r0
    3f02:	001d      	movs	r5, r3
    3f04:	e7a6      	b.n	3e54 <rint+0x7c>
    3f06:	2780      	movs	r7, #128	; 0x80
    3f08:	063f      	lsls	r7, r7, #24
    3f0a:	e788      	b.n	3e1e <rint+0x46>
    3f0c:	fffffc01 	.word	0xfffffc01
    3f10:	000fffff 	.word	0x000fffff
    3f14:	000063a8 	.word	0x000063a8
    3f18:	fffffbed 	.word	0xfffffbed

00003f1c <scalbn>:
    3f1c:	004b      	lsls	r3, r1, #1
    3f1e:	b570      	push	{r4, r5, r6, lr}
    3f20:	0d5b      	lsrs	r3, r3, #21
    3f22:	0014      	movs	r4, r2
    3f24:	000a      	movs	r2, r1
    3f26:	2b00      	cmp	r3, #0
    3f28:	d11a      	bne.n	3f60 <scalbn+0x44>
    3f2a:	004b      	lsls	r3, r1, #1
    3f2c:	085b      	lsrs	r3, r3, #1
    3f2e:	4303      	orrs	r3, r0
    3f30:	d015      	beq.n	3f5e <scalbn+0x42>
    3f32:	2200      	movs	r2, #0
    3f34:	4b22      	ldr	r3, [pc, #136]	; (3fc0 <scalbn+0xa4>)
    3f36:	f001 fa01 	bl	533c <__aeabi_dmul>
    3f3a:	4b22      	ldr	r3, [pc, #136]	; (3fc4 <scalbn+0xa8>)
    3f3c:	000a      	movs	r2, r1
    3f3e:	429c      	cmp	r4, r3
    3f40:	db22      	blt.n	3f88 <scalbn+0x6c>
    3f42:	004b      	lsls	r3, r1, #1
    3f44:	0d5b      	lsrs	r3, r3, #21
    3f46:	3b36      	subs	r3, #54	; 0x36
    3f48:	4d1f      	ldr	r5, [pc, #124]	; (3fc8 <scalbn+0xac>)
    3f4a:	18e3      	adds	r3, r4, r3
    3f4c:	42ab      	cmp	r3, r5
    3f4e:	dc20      	bgt.n	3f92 <scalbn+0x76>
    3f50:	2b00      	cmp	r3, #0
    3f52:	dd0d      	ble.n	3f70 <scalbn+0x54>
    3f54:	4c1d      	ldr	r4, [pc, #116]	; (3fcc <scalbn+0xb0>)
    3f56:	051b      	lsls	r3, r3, #20
    3f58:	4022      	ands	r2, r4
    3f5a:	431a      	orrs	r2, r3
    3f5c:	0011      	movs	r1, r2
    3f5e:	bd70      	pop	{r4, r5, r6, pc}
    3f60:	4d1b      	ldr	r5, [pc, #108]	; (3fd0 <scalbn+0xb4>)
    3f62:	42ab      	cmp	r3, r5
    3f64:	d1f0      	bne.n	3f48 <scalbn+0x2c>
    3f66:	0002      	movs	r2, r0
    3f68:	000b      	movs	r3, r1
    3f6a:	f000 faa3 	bl	44b4 <__aeabi_dadd>
    3f6e:	e7f6      	b.n	3f5e <scalbn+0x42>
    3f70:	001d      	movs	r5, r3
    3f72:	3535      	adds	r5, #53	; 0x35
    3f74:	da18      	bge.n	3fa8 <scalbn+0x8c>
    3f76:	4b17      	ldr	r3, [pc, #92]	; (3fd4 <scalbn+0xb8>)
    3f78:	0002      	movs	r2, r0
    3f7a:	429c      	cmp	r4, r3
    3f7c:	dc0a      	bgt.n	3f94 <scalbn+0x78>
    3f7e:	000b      	movs	r3, r1
    3f80:	4815      	ldr	r0, [pc, #84]	; (3fd8 <scalbn+0xbc>)
    3f82:	4916      	ldr	r1, [pc, #88]	; (3fdc <scalbn+0xc0>)
    3f84:	f000 f832 	bl	3fec <copysign>
    3f88:	4a13      	ldr	r2, [pc, #76]	; (3fd8 <scalbn+0xbc>)
    3f8a:	4b14      	ldr	r3, [pc, #80]	; (3fdc <scalbn+0xc0>)
    3f8c:	f001 f9d6 	bl	533c <__aeabi_dmul>
    3f90:	e7e5      	b.n	3f5e <scalbn+0x42>
    3f92:	0002      	movs	r2, r0
    3f94:	000b      	movs	r3, r1
    3f96:	4812      	ldr	r0, [pc, #72]	; (3fe0 <scalbn+0xc4>)
    3f98:	4912      	ldr	r1, [pc, #72]	; (3fe4 <scalbn+0xc8>)
    3f9a:	f000 f827 	bl	3fec <copysign>
    3f9e:	4a10      	ldr	r2, [pc, #64]	; (3fe0 <scalbn+0xc4>)
    3fa0:	4b10      	ldr	r3, [pc, #64]	; (3fe4 <scalbn+0xc8>)
    3fa2:	f001 f9cb 	bl	533c <__aeabi_dmul>
    3fa6:	e7da      	b.n	3f5e <scalbn+0x42>
    3fa8:	4c08      	ldr	r4, [pc, #32]	; (3fcc <scalbn+0xb0>)
    3faa:	3336      	adds	r3, #54	; 0x36
    3fac:	4022      	ands	r2, r4
    3fae:	051b      	lsls	r3, r3, #20
    3fb0:	4313      	orrs	r3, r2
    3fb2:	0019      	movs	r1, r3
    3fb4:	2200      	movs	r2, #0
    3fb6:	4b0c      	ldr	r3, [pc, #48]	; (3fe8 <scalbn+0xcc>)
    3fb8:	f001 f9c0 	bl	533c <__aeabi_dmul>
    3fbc:	e7cf      	b.n	3f5e <scalbn+0x42>
    3fbe:	46c0      	nop			; (mov r8, r8)
    3fc0:	43500000 	.word	0x43500000
    3fc4:	ffff3cb0 	.word	0xffff3cb0
    3fc8:	000007fe 	.word	0x000007fe
    3fcc:	800fffff 	.word	0x800fffff
    3fd0:	000007ff 	.word	0x000007ff
    3fd4:	0000c350 	.word	0x0000c350
    3fd8:	c2f8f359 	.word	0xc2f8f359
    3fdc:	01a56e1f 	.word	0x01a56e1f
    3fe0:	8800759c 	.word	0x8800759c
    3fe4:	7e37e43c 	.word	0x7e37e43c
    3fe8:	3c900000 	.word	0x3c900000

00003fec <copysign>:
    3fec:	b530      	push	{r4, r5, lr}
    3fee:	004a      	lsls	r2, r1, #1
    3ff0:	0fdb      	lsrs	r3, r3, #31
    3ff2:	07db      	lsls	r3, r3, #31
    3ff4:	0852      	lsrs	r2, r2, #1
    3ff6:	431a      	orrs	r2, r3
    3ff8:	0011      	movs	r1, r2
    3ffa:	bd30      	pop	{r4, r5, pc}

00003ffc <__gnu_thumb1_case_uqi>:
    3ffc:	b402      	push	{r1}
    3ffe:	4671      	mov	r1, lr
    4000:	0849      	lsrs	r1, r1, #1
    4002:	0049      	lsls	r1, r1, #1
    4004:	5c09      	ldrb	r1, [r1, r0]
    4006:	0049      	lsls	r1, r1, #1
    4008:	448e      	add	lr, r1
    400a:	bc02      	pop	{r1}
    400c:	4770      	bx	lr
    400e:	46c0      	nop			; (mov r8, r8)

00004010 <__udivsi3>:
    4010:	2200      	movs	r2, #0
    4012:	0843      	lsrs	r3, r0, #1
    4014:	428b      	cmp	r3, r1
    4016:	d374      	bcc.n	4102 <__udivsi3+0xf2>
    4018:	0903      	lsrs	r3, r0, #4
    401a:	428b      	cmp	r3, r1
    401c:	d35f      	bcc.n	40de <__udivsi3+0xce>
    401e:	0a03      	lsrs	r3, r0, #8
    4020:	428b      	cmp	r3, r1
    4022:	d344      	bcc.n	40ae <__udivsi3+0x9e>
    4024:	0b03      	lsrs	r3, r0, #12
    4026:	428b      	cmp	r3, r1
    4028:	d328      	bcc.n	407c <__udivsi3+0x6c>
    402a:	0c03      	lsrs	r3, r0, #16
    402c:	428b      	cmp	r3, r1
    402e:	d30d      	bcc.n	404c <__udivsi3+0x3c>
    4030:	22ff      	movs	r2, #255	; 0xff
    4032:	0209      	lsls	r1, r1, #8
    4034:	ba12      	rev	r2, r2
    4036:	0c03      	lsrs	r3, r0, #16
    4038:	428b      	cmp	r3, r1
    403a:	d302      	bcc.n	4042 <__udivsi3+0x32>
    403c:	1212      	asrs	r2, r2, #8
    403e:	0209      	lsls	r1, r1, #8
    4040:	d065      	beq.n	410e <__udivsi3+0xfe>
    4042:	0b03      	lsrs	r3, r0, #12
    4044:	428b      	cmp	r3, r1
    4046:	d319      	bcc.n	407c <__udivsi3+0x6c>
    4048:	e000      	b.n	404c <__udivsi3+0x3c>
    404a:	0a09      	lsrs	r1, r1, #8
    404c:	0bc3      	lsrs	r3, r0, #15
    404e:	428b      	cmp	r3, r1
    4050:	d301      	bcc.n	4056 <__udivsi3+0x46>
    4052:	03cb      	lsls	r3, r1, #15
    4054:	1ac0      	subs	r0, r0, r3
    4056:	4152      	adcs	r2, r2
    4058:	0b83      	lsrs	r3, r0, #14
    405a:	428b      	cmp	r3, r1
    405c:	d301      	bcc.n	4062 <__udivsi3+0x52>
    405e:	038b      	lsls	r3, r1, #14
    4060:	1ac0      	subs	r0, r0, r3
    4062:	4152      	adcs	r2, r2
    4064:	0b43      	lsrs	r3, r0, #13
    4066:	428b      	cmp	r3, r1
    4068:	d301      	bcc.n	406e <__udivsi3+0x5e>
    406a:	034b      	lsls	r3, r1, #13
    406c:	1ac0      	subs	r0, r0, r3
    406e:	4152      	adcs	r2, r2
    4070:	0b03      	lsrs	r3, r0, #12
    4072:	428b      	cmp	r3, r1
    4074:	d301      	bcc.n	407a <__udivsi3+0x6a>
    4076:	030b      	lsls	r3, r1, #12
    4078:	1ac0      	subs	r0, r0, r3
    407a:	4152      	adcs	r2, r2
    407c:	0ac3      	lsrs	r3, r0, #11
    407e:	428b      	cmp	r3, r1
    4080:	d301      	bcc.n	4086 <__udivsi3+0x76>
    4082:	02cb      	lsls	r3, r1, #11
    4084:	1ac0      	subs	r0, r0, r3
    4086:	4152      	adcs	r2, r2
    4088:	0a83      	lsrs	r3, r0, #10
    408a:	428b      	cmp	r3, r1
    408c:	d301      	bcc.n	4092 <__udivsi3+0x82>
    408e:	028b      	lsls	r3, r1, #10
    4090:	1ac0      	subs	r0, r0, r3
    4092:	4152      	adcs	r2, r2
    4094:	0a43      	lsrs	r3, r0, #9
    4096:	428b      	cmp	r3, r1
    4098:	d301      	bcc.n	409e <__udivsi3+0x8e>
    409a:	024b      	lsls	r3, r1, #9
    409c:	1ac0      	subs	r0, r0, r3
    409e:	4152      	adcs	r2, r2
    40a0:	0a03      	lsrs	r3, r0, #8
    40a2:	428b      	cmp	r3, r1
    40a4:	d301      	bcc.n	40aa <__udivsi3+0x9a>
    40a6:	020b      	lsls	r3, r1, #8
    40a8:	1ac0      	subs	r0, r0, r3
    40aa:	4152      	adcs	r2, r2
    40ac:	d2cd      	bcs.n	404a <__udivsi3+0x3a>
    40ae:	09c3      	lsrs	r3, r0, #7
    40b0:	428b      	cmp	r3, r1
    40b2:	d301      	bcc.n	40b8 <__udivsi3+0xa8>
    40b4:	01cb      	lsls	r3, r1, #7
    40b6:	1ac0      	subs	r0, r0, r3
    40b8:	4152      	adcs	r2, r2
    40ba:	0983      	lsrs	r3, r0, #6
    40bc:	428b      	cmp	r3, r1
    40be:	d301      	bcc.n	40c4 <__udivsi3+0xb4>
    40c0:	018b      	lsls	r3, r1, #6
    40c2:	1ac0      	subs	r0, r0, r3
    40c4:	4152      	adcs	r2, r2
    40c6:	0943      	lsrs	r3, r0, #5
    40c8:	428b      	cmp	r3, r1
    40ca:	d301      	bcc.n	40d0 <__udivsi3+0xc0>
    40cc:	014b      	lsls	r3, r1, #5
    40ce:	1ac0      	subs	r0, r0, r3
    40d0:	4152      	adcs	r2, r2
    40d2:	0903      	lsrs	r3, r0, #4
    40d4:	428b      	cmp	r3, r1
    40d6:	d301      	bcc.n	40dc <__udivsi3+0xcc>
    40d8:	010b      	lsls	r3, r1, #4
    40da:	1ac0      	subs	r0, r0, r3
    40dc:	4152      	adcs	r2, r2
    40de:	08c3      	lsrs	r3, r0, #3
    40e0:	428b      	cmp	r3, r1
    40e2:	d301      	bcc.n	40e8 <__udivsi3+0xd8>
    40e4:	00cb      	lsls	r3, r1, #3
    40e6:	1ac0      	subs	r0, r0, r3
    40e8:	4152      	adcs	r2, r2
    40ea:	0883      	lsrs	r3, r0, #2
    40ec:	428b      	cmp	r3, r1
    40ee:	d301      	bcc.n	40f4 <__udivsi3+0xe4>
    40f0:	008b      	lsls	r3, r1, #2
    40f2:	1ac0      	subs	r0, r0, r3
    40f4:	4152      	adcs	r2, r2
    40f6:	0843      	lsrs	r3, r0, #1
    40f8:	428b      	cmp	r3, r1
    40fa:	d301      	bcc.n	4100 <__udivsi3+0xf0>
    40fc:	004b      	lsls	r3, r1, #1
    40fe:	1ac0      	subs	r0, r0, r3
    4100:	4152      	adcs	r2, r2
    4102:	1a41      	subs	r1, r0, r1
    4104:	d200      	bcs.n	4108 <__udivsi3+0xf8>
    4106:	4601      	mov	r1, r0
    4108:	4152      	adcs	r2, r2
    410a:	4610      	mov	r0, r2
    410c:	4770      	bx	lr
    410e:	e7ff      	b.n	4110 <__udivsi3+0x100>
    4110:	b501      	push	{r0, lr}
    4112:	2000      	movs	r0, #0
    4114:	f000 f806 	bl	4124 <__aeabi_idiv0>
    4118:	bd02      	pop	{r1, pc}
    411a:	46c0      	nop			; (mov r8, r8)

0000411c <__aeabi_uidivmod>:
    411c:	2900      	cmp	r1, #0
    411e:	d0f7      	beq.n	4110 <__udivsi3+0x100>
    4120:	e776      	b.n	4010 <__udivsi3>
    4122:	4770      	bx	lr

00004124 <__aeabi_idiv0>:
    4124:	4770      	bx	lr
    4126:	46c0      	nop			; (mov r8, r8)

00004128 <__aeabi_cdrcmple>:
    4128:	4684      	mov	ip, r0
    412a:	1c10      	adds	r0, r2, #0
    412c:	4662      	mov	r2, ip
    412e:	468c      	mov	ip, r1
    4130:	1c19      	adds	r1, r3, #0
    4132:	4663      	mov	r3, ip
    4134:	e000      	b.n	4138 <__aeabi_cdcmpeq>
    4136:	46c0      	nop			; (mov r8, r8)

00004138 <__aeabi_cdcmpeq>:
    4138:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    413a:	f001 f89d 	bl	5278 <__ledf2>
    413e:	2800      	cmp	r0, #0
    4140:	d401      	bmi.n	4146 <__aeabi_cdcmpeq+0xe>
    4142:	2100      	movs	r1, #0
    4144:	42c8      	cmn	r0, r1
    4146:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00004148 <__aeabi_dcmpeq>:
    4148:	b510      	push	{r4, lr}
    414a:	f000 fff7 	bl	513c <__eqdf2>
    414e:	4240      	negs	r0, r0
    4150:	3001      	adds	r0, #1
    4152:	bd10      	pop	{r4, pc}

00004154 <__aeabi_dcmplt>:
    4154:	b510      	push	{r4, lr}
    4156:	f001 f88f 	bl	5278 <__ledf2>
    415a:	2800      	cmp	r0, #0
    415c:	db01      	blt.n	4162 <__aeabi_dcmplt+0xe>
    415e:	2000      	movs	r0, #0
    4160:	bd10      	pop	{r4, pc}
    4162:	2001      	movs	r0, #1
    4164:	bd10      	pop	{r4, pc}
    4166:	46c0      	nop			; (mov r8, r8)

00004168 <__aeabi_dcmple>:
    4168:	b510      	push	{r4, lr}
    416a:	f001 f885 	bl	5278 <__ledf2>
    416e:	2800      	cmp	r0, #0
    4170:	dd01      	ble.n	4176 <__aeabi_dcmple+0xe>
    4172:	2000      	movs	r0, #0
    4174:	bd10      	pop	{r4, pc}
    4176:	2001      	movs	r0, #1
    4178:	bd10      	pop	{r4, pc}
    417a:	46c0      	nop			; (mov r8, r8)

0000417c <__aeabi_dcmpgt>:
    417c:	b510      	push	{r4, lr}
    417e:	f001 f817 	bl	51b0 <__gedf2>
    4182:	2800      	cmp	r0, #0
    4184:	dc01      	bgt.n	418a <__aeabi_dcmpgt+0xe>
    4186:	2000      	movs	r0, #0
    4188:	bd10      	pop	{r4, pc}
    418a:	2001      	movs	r0, #1
    418c:	bd10      	pop	{r4, pc}
    418e:	46c0      	nop			; (mov r8, r8)

00004190 <__aeabi_dcmpge>:
    4190:	b510      	push	{r4, lr}
    4192:	f001 f80d 	bl	51b0 <__gedf2>
    4196:	2800      	cmp	r0, #0
    4198:	da01      	bge.n	419e <__aeabi_dcmpge+0xe>
    419a:	2000      	movs	r0, #0
    419c:	bd10      	pop	{r4, pc}
    419e:	2001      	movs	r0, #1
    41a0:	bd10      	pop	{r4, pc}
    41a2:	46c0      	nop			; (mov r8, r8)

000041a4 <__aeabi_lmul>:
    41a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    41a6:	46ce      	mov	lr, r9
    41a8:	4647      	mov	r7, r8
    41aa:	0415      	lsls	r5, r2, #16
    41ac:	0c2d      	lsrs	r5, r5, #16
    41ae:	002e      	movs	r6, r5
    41b0:	b580      	push	{r7, lr}
    41b2:	0407      	lsls	r7, r0, #16
    41b4:	0c14      	lsrs	r4, r2, #16
    41b6:	0c3f      	lsrs	r7, r7, #16
    41b8:	4699      	mov	r9, r3
    41ba:	0c03      	lsrs	r3, r0, #16
    41bc:	437e      	muls	r6, r7
    41be:	435d      	muls	r5, r3
    41c0:	4367      	muls	r7, r4
    41c2:	4363      	muls	r3, r4
    41c4:	197f      	adds	r7, r7, r5
    41c6:	0c34      	lsrs	r4, r6, #16
    41c8:	19e4      	adds	r4, r4, r7
    41ca:	469c      	mov	ip, r3
    41cc:	42a5      	cmp	r5, r4
    41ce:	d903      	bls.n	41d8 <__aeabi_lmul+0x34>
    41d0:	2380      	movs	r3, #128	; 0x80
    41d2:	025b      	lsls	r3, r3, #9
    41d4:	4698      	mov	r8, r3
    41d6:	44c4      	add	ip, r8
    41d8:	464b      	mov	r3, r9
    41da:	4351      	muls	r1, r2
    41dc:	4343      	muls	r3, r0
    41de:	0436      	lsls	r6, r6, #16
    41e0:	0c36      	lsrs	r6, r6, #16
    41e2:	0c25      	lsrs	r5, r4, #16
    41e4:	0424      	lsls	r4, r4, #16
    41e6:	4465      	add	r5, ip
    41e8:	19a4      	adds	r4, r4, r6
    41ea:	1859      	adds	r1, r3, r1
    41ec:	1949      	adds	r1, r1, r5
    41ee:	0020      	movs	r0, r4
    41f0:	bc0c      	pop	{r2, r3}
    41f2:	4690      	mov	r8, r2
    41f4:	4699      	mov	r9, r3
    41f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000041f8 <__aeabi_d2uiz>:
    41f8:	b570      	push	{r4, r5, r6, lr}
    41fa:	2200      	movs	r2, #0
    41fc:	4b0c      	ldr	r3, [pc, #48]	; (4230 <__aeabi_d2uiz+0x38>)
    41fe:	0004      	movs	r4, r0
    4200:	000d      	movs	r5, r1
    4202:	f7ff ffc5 	bl	4190 <__aeabi_dcmpge>
    4206:	2800      	cmp	r0, #0
    4208:	d104      	bne.n	4214 <__aeabi_d2uiz+0x1c>
    420a:	0020      	movs	r0, r4
    420c:	0029      	movs	r1, r5
    420e:	f001 fe4b 	bl	5ea8 <__aeabi_d2iz>
    4212:	bd70      	pop	{r4, r5, r6, pc}
    4214:	4b06      	ldr	r3, [pc, #24]	; (4230 <__aeabi_d2uiz+0x38>)
    4216:	2200      	movs	r2, #0
    4218:	0020      	movs	r0, r4
    421a:	0029      	movs	r1, r5
    421c:	f001 fb0e 	bl	583c <__aeabi_dsub>
    4220:	f001 fe42 	bl	5ea8 <__aeabi_d2iz>
    4224:	2380      	movs	r3, #128	; 0x80
    4226:	061b      	lsls	r3, r3, #24
    4228:	469c      	mov	ip, r3
    422a:	4460      	add	r0, ip
    422c:	e7f1      	b.n	4212 <__aeabi_d2uiz+0x1a>
    422e:	46c0      	nop			; (mov r8, r8)
    4230:	41e00000 	.word	0x41e00000

00004234 <__aeabi_fmul>:
    4234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4236:	4657      	mov	r7, sl
    4238:	464e      	mov	r6, r9
    423a:	4645      	mov	r5, r8
    423c:	46de      	mov	lr, fp
    423e:	b5e0      	push	{r5, r6, r7, lr}
    4240:	0247      	lsls	r7, r0, #9
    4242:	0046      	lsls	r6, r0, #1
    4244:	4688      	mov	r8, r1
    4246:	0a7f      	lsrs	r7, r7, #9
    4248:	0e36      	lsrs	r6, r6, #24
    424a:	0fc4      	lsrs	r4, r0, #31
    424c:	2e00      	cmp	r6, #0
    424e:	d047      	beq.n	42e0 <__aeabi_fmul+0xac>
    4250:	2eff      	cmp	r6, #255	; 0xff
    4252:	d024      	beq.n	429e <__aeabi_fmul+0x6a>
    4254:	00fb      	lsls	r3, r7, #3
    4256:	2780      	movs	r7, #128	; 0x80
    4258:	04ff      	lsls	r7, r7, #19
    425a:	431f      	orrs	r7, r3
    425c:	2300      	movs	r3, #0
    425e:	4699      	mov	r9, r3
    4260:	469a      	mov	sl, r3
    4262:	3e7f      	subs	r6, #127	; 0x7f
    4264:	4643      	mov	r3, r8
    4266:	025d      	lsls	r5, r3, #9
    4268:	0058      	lsls	r0, r3, #1
    426a:	0fdb      	lsrs	r3, r3, #31
    426c:	0a6d      	lsrs	r5, r5, #9
    426e:	0e00      	lsrs	r0, r0, #24
    4270:	4698      	mov	r8, r3
    4272:	d043      	beq.n	42fc <__aeabi_fmul+0xc8>
    4274:	28ff      	cmp	r0, #255	; 0xff
    4276:	d03b      	beq.n	42f0 <__aeabi_fmul+0xbc>
    4278:	00eb      	lsls	r3, r5, #3
    427a:	2580      	movs	r5, #128	; 0x80
    427c:	2200      	movs	r2, #0
    427e:	04ed      	lsls	r5, r5, #19
    4280:	431d      	orrs	r5, r3
    4282:	387f      	subs	r0, #127	; 0x7f
    4284:	1836      	adds	r6, r6, r0
    4286:	1c73      	adds	r3, r6, #1
    4288:	4641      	mov	r1, r8
    428a:	469b      	mov	fp, r3
    428c:	464b      	mov	r3, r9
    428e:	4061      	eors	r1, r4
    4290:	4313      	orrs	r3, r2
    4292:	2b0f      	cmp	r3, #15
    4294:	d864      	bhi.n	4360 <__aeabi_fmul+0x12c>
    4296:	4875      	ldr	r0, [pc, #468]	; (446c <__aeabi_fmul+0x238>)
    4298:	009b      	lsls	r3, r3, #2
    429a:	58c3      	ldr	r3, [r0, r3]
    429c:	469f      	mov	pc, r3
    429e:	2f00      	cmp	r7, #0
    42a0:	d142      	bne.n	4328 <__aeabi_fmul+0xf4>
    42a2:	2308      	movs	r3, #8
    42a4:	4699      	mov	r9, r3
    42a6:	3b06      	subs	r3, #6
    42a8:	26ff      	movs	r6, #255	; 0xff
    42aa:	469a      	mov	sl, r3
    42ac:	e7da      	b.n	4264 <__aeabi_fmul+0x30>
    42ae:	4641      	mov	r1, r8
    42b0:	2a02      	cmp	r2, #2
    42b2:	d028      	beq.n	4306 <__aeabi_fmul+0xd2>
    42b4:	2a03      	cmp	r2, #3
    42b6:	d100      	bne.n	42ba <__aeabi_fmul+0x86>
    42b8:	e0ce      	b.n	4458 <__aeabi_fmul+0x224>
    42ba:	2a01      	cmp	r2, #1
    42bc:	d000      	beq.n	42c0 <__aeabi_fmul+0x8c>
    42be:	e0ac      	b.n	441a <__aeabi_fmul+0x1e6>
    42c0:	4011      	ands	r1, r2
    42c2:	2000      	movs	r0, #0
    42c4:	2200      	movs	r2, #0
    42c6:	b2cc      	uxtb	r4, r1
    42c8:	0240      	lsls	r0, r0, #9
    42ca:	05d2      	lsls	r2, r2, #23
    42cc:	0a40      	lsrs	r0, r0, #9
    42ce:	07e4      	lsls	r4, r4, #31
    42d0:	4310      	orrs	r0, r2
    42d2:	4320      	orrs	r0, r4
    42d4:	bc3c      	pop	{r2, r3, r4, r5}
    42d6:	4690      	mov	r8, r2
    42d8:	4699      	mov	r9, r3
    42da:	46a2      	mov	sl, r4
    42dc:	46ab      	mov	fp, r5
    42de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    42e0:	2f00      	cmp	r7, #0
    42e2:	d115      	bne.n	4310 <__aeabi_fmul+0xdc>
    42e4:	2304      	movs	r3, #4
    42e6:	4699      	mov	r9, r3
    42e8:	3b03      	subs	r3, #3
    42ea:	2600      	movs	r6, #0
    42ec:	469a      	mov	sl, r3
    42ee:	e7b9      	b.n	4264 <__aeabi_fmul+0x30>
    42f0:	20ff      	movs	r0, #255	; 0xff
    42f2:	2202      	movs	r2, #2
    42f4:	2d00      	cmp	r5, #0
    42f6:	d0c5      	beq.n	4284 <__aeabi_fmul+0x50>
    42f8:	2203      	movs	r2, #3
    42fa:	e7c3      	b.n	4284 <__aeabi_fmul+0x50>
    42fc:	2d00      	cmp	r5, #0
    42fe:	d119      	bne.n	4334 <__aeabi_fmul+0x100>
    4300:	2000      	movs	r0, #0
    4302:	2201      	movs	r2, #1
    4304:	e7be      	b.n	4284 <__aeabi_fmul+0x50>
    4306:	2401      	movs	r4, #1
    4308:	22ff      	movs	r2, #255	; 0xff
    430a:	400c      	ands	r4, r1
    430c:	2000      	movs	r0, #0
    430e:	e7db      	b.n	42c8 <__aeabi_fmul+0x94>
    4310:	0038      	movs	r0, r7
    4312:	f001 ff53 	bl	61bc <__clzsi2>
    4316:	2676      	movs	r6, #118	; 0x76
    4318:	1f43      	subs	r3, r0, #5
    431a:	409f      	lsls	r7, r3
    431c:	2300      	movs	r3, #0
    431e:	4276      	negs	r6, r6
    4320:	1a36      	subs	r6, r6, r0
    4322:	4699      	mov	r9, r3
    4324:	469a      	mov	sl, r3
    4326:	e79d      	b.n	4264 <__aeabi_fmul+0x30>
    4328:	230c      	movs	r3, #12
    432a:	4699      	mov	r9, r3
    432c:	3b09      	subs	r3, #9
    432e:	26ff      	movs	r6, #255	; 0xff
    4330:	469a      	mov	sl, r3
    4332:	e797      	b.n	4264 <__aeabi_fmul+0x30>
    4334:	0028      	movs	r0, r5
    4336:	f001 ff41 	bl	61bc <__clzsi2>
    433a:	1f43      	subs	r3, r0, #5
    433c:	409d      	lsls	r5, r3
    433e:	2376      	movs	r3, #118	; 0x76
    4340:	425b      	negs	r3, r3
    4342:	1a18      	subs	r0, r3, r0
    4344:	2200      	movs	r2, #0
    4346:	e79d      	b.n	4284 <__aeabi_fmul+0x50>
    4348:	2080      	movs	r0, #128	; 0x80
    434a:	2400      	movs	r4, #0
    434c:	03c0      	lsls	r0, r0, #15
    434e:	22ff      	movs	r2, #255	; 0xff
    4350:	e7ba      	b.n	42c8 <__aeabi_fmul+0x94>
    4352:	003d      	movs	r5, r7
    4354:	4652      	mov	r2, sl
    4356:	e7ab      	b.n	42b0 <__aeabi_fmul+0x7c>
    4358:	003d      	movs	r5, r7
    435a:	0021      	movs	r1, r4
    435c:	4652      	mov	r2, sl
    435e:	e7a7      	b.n	42b0 <__aeabi_fmul+0x7c>
    4360:	0c3b      	lsrs	r3, r7, #16
    4362:	469c      	mov	ip, r3
    4364:	042a      	lsls	r2, r5, #16
    4366:	0c12      	lsrs	r2, r2, #16
    4368:	0c2b      	lsrs	r3, r5, #16
    436a:	0014      	movs	r4, r2
    436c:	4660      	mov	r0, ip
    436e:	4665      	mov	r5, ip
    4370:	043f      	lsls	r7, r7, #16
    4372:	0c3f      	lsrs	r7, r7, #16
    4374:	437c      	muls	r4, r7
    4376:	4342      	muls	r2, r0
    4378:	435d      	muls	r5, r3
    437a:	437b      	muls	r3, r7
    437c:	0c27      	lsrs	r7, r4, #16
    437e:	189b      	adds	r3, r3, r2
    4380:	18ff      	adds	r7, r7, r3
    4382:	42ba      	cmp	r2, r7
    4384:	d903      	bls.n	438e <__aeabi_fmul+0x15a>
    4386:	2380      	movs	r3, #128	; 0x80
    4388:	025b      	lsls	r3, r3, #9
    438a:	469c      	mov	ip, r3
    438c:	4465      	add	r5, ip
    438e:	0424      	lsls	r4, r4, #16
    4390:	043a      	lsls	r2, r7, #16
    4392:	0c24      	lsrs	r4, r4, #16
    4394:	1912      	adds	r2, r2, r4
    4396:	0193      	lsls	r3, r2, #6
    4398:	1e5c      	subs	r4, r3, #1
    439a:	41a3      	sbcs	r3, r4
    439c:	0c3f      	lsrs	r7, r7, #16
    439e:	0e92      	lsrs	r2, r2, #26
    43a0:	197d      	adds	r5, r7, r5
    43a2:	431a      	orrs	r2, r3
    43a4:	01ad      	lsls	r5, r5, #6
    43a6:	4315      	orrs	r5, r2
    43a8:	012b      	lsls	r3, r5, #4
    43aa:	d504      	bpl.n	43b6 <__aeabi_fmul+0x182>
    43ac:	2301      	movs	r3, #1
    43ae:	465e      	mov	r6, fp
    43b0:	086a      	lsrs	r2, r5, #1
    43b2:	401d      	ands	r5, r3
    43b4:	4315      	orrs	r5, r2
    43b6:	0032      	movs	r2, r6
    43b8:	327f      	adds	r2, #127	; 0x7f
    43ba:	2a00      	cmp	r2, #0
    43bc:	dd25      	ble.n	440a <__aeabi_fmul+0x1d6>
    43be:	076b      	lsls	r3, r5, #29
    43c0:	d004      	beq.n	43cc <__aeabi_fmul+0x198>
    43c2:	230f      	movs	r3, #15
    43c4:	402b      	ands	r3, r5
    43c6:	2b04      	cmp	r3, #4
    43c8:	d000      	beq.n	43cc <__aeabi_fmul+0x198>
    43ca:	3504      	adds	r5, #4
    43cc:	012b      	lsls	r3, r5, #4
    43ce:	d503      	bpl.n	43d8 <__aeabi_fmul+0x1a4>
    43d0:	0032      	movs	r2, r6
    43d2:	4b27      	ldr	r3, [pc, #156]	; (4470 <__aeabi_fmul+0x23c>)
    43d4:	3280      	adds	r2, #128	; 0x80
    43d6:	401d      	ands	r5, r3
    43d8:	2afe      	cmp	r2, #254	; 0xfe
    43da:	dc94      	bgt.n	4306 <__aeabi_fmul+0xd2>
    43dc:	2401      	movs	r4, #1
    43de:	01a8      	lsls	r0, r5, #6
    43e0:	0a40      	lsrs	r0, r0, #9
    43e2:	b2d2      	uxtb	r2, r2
    43e4:	400c      	ands	r4, r1
    43e6:	e76f      	b.n	42c8 <__aeabi_fmul+0x94>
    43e8:	2080      	movs	r0, #128	; 0x80
    43ea:	03c0      	lsls	r0, r0, #15
    43ec:	4207      	tst	r7, r0
    43ee:	d007      	beq.n	4400 <__aeabi_fmul+0x1cc>
    43f0:	4205      	tst	r5, r0
    43f2:	d105      	bne.n	4400 <__aeabi_fmul+0x1cc>
    43f4:	4328      	orrs	r0, r5
    43f6:	0240      	lsls	r0, r0, #9
    43f8:	0a40      	lsrs	r0, r0, #9
    43fa:	4644      	mov	r4, r8
    43fc:	22ff      	movs	r2, #255	; 0xff
    43fe:	e763      	b.n	42c8 <__aeabi_fmul+0x94>
    4400:	4338      	orrs	r0, r7
    4402:	0240      	lsls	r0, r0, #9
    4404:	0a40      	lsrs	r0, r0, #9
    4406:	22ff      	movs	r2, #255	; 0xff
    4408:	e75e      	b.n	42c8 <__aeabi_fmul+0x94>
    440a:	2401      	movs	r4, #1
    440c:	1aa3      	subs	r3, r4, r2
    440e:	2b1b      	cmp	r3, #27
    4410:	dd05      	ble.n	441e <__aeabi_fmul+0x1ea>
    4412:	400c      	ands	r4, r1
    4414:	2200      	movs	r2, #0
    4416:	2000      	movs	r0, #0
    4418:	e756      	b.n	42c8 <__aeabi_fmul+0x94>
    441a:	465e      	mov	r6, fp
    441c:	e7cb      	b.n	43b6 <__aeabi_fmul+0x182>
    441e:	002a      	movs	r2, r5
    4420:	2020      	movs	r0, #32
    4422:	40da      	lsrs	r2, r3
    4424:	1ac3      	subs	r3, r0, r3
    4426:	409d      	lsls	r5, r3
    4428:	002b      	movs	r3, r5
    442a:	1e5d      	subs	r5, r3, #1
    442c:	41ab      	sbcs	r3, r5
    442e:	4313      	orrs	r3, r2
    4430:	075a      	lsls	r2, r3, #29
    4432:	d004      	beq.n	443e <__aeabi_fmul+0x20a>
    4434:	220f      	movs	r2, #15
    4436:	401a      	ands	r2, r3
    4438:	2a04      	cmp	r2, #4
    443a:	d000      	beq.n	443e <__aeabi_fmul+0x20a>
    443c:	3304      	adds	r3, #4
    443e:	015a      	lsls	r2, r3, #5
    4440:	d504      	bpl.n	444c <__aeabi_fmul+0x218>
    4442:	2401      	movs	r4, #1
    4444:	2201      	movs	r2, #1
    4446:	400c      	ands	r4, r1
    4448:	2000      	movs	r0, #0
    444a:	e73d      	b.n	42c8 <__aeabi_fmul+0x94>
    444c:	2401      	movs	r4, #1
    444e:	019b      	lsls	r3, r3, #6
    4450:	0a58      	lsrs	r0, r3, #9
    4452:	400c      	ands	r4, r1
    4454:	2200      	movs	r2, #0
    4456:	e737      	b.n	42c8 <__aeabi_fmul+0x94>
    4458:	2080      	movs	r0, #128	; 0x80
    445a:	2401      	movs	r4, #1
    445c:	03c0      	lsls	r0, r0, #15
    445e:	4328      	orrs	r0, r5
    4460:	0240      	lsls	r0, r0, #9
    4462:	0a40      	lsrs	r0, r0, #9
    4464:	400c      	ands	r4, r1
    4466:	22ff      	movs	r2, #255	; 0xff
    4468:	e72e      	b.n	42c8 <__aeabi_fmul+0x94>
    446a:	46c0      	nop			; (mov r8, r8)
    446c:	000063b8 	.word	0x000063b8
    4470:	f7ffffff 	.word	0xf7ffffff

00004474 <__aeabi_f2iz>:
    4474:	0241      	lsls	r1, r0, #9
    4476:	0043      	lsls	r3, r0, #1
    4478:	0fc2      	lsrs	r2, r0, #31
    447a:	0a49      	lsrs	r1, r1, #9
    447c:	0e1b      	lsrs	r3, r3, #24
    447e:	2000      	movs	r0, #0
    4480:	2b7e      	cmp	r3, #126	; 0x7e
    4482:	dd0d      	ble.n	44a0 <__aeabi_f2iz+0x2c>
    4484:	2b9d      	cmp	r3, #157	; 0x9d
    4486:	dc0c      	bgt.n	44a2 <__aeabi_f2iz+0x2e>
    4488:	2080      	movs	r0, #128	; 0x80
    448a:	0400      	lsls	r0, r0, #16
    448c:	4301      	orrs	r1, r0
    448e:	2b95      	cmp	r3, #149	; 0x95
    4490:	dc0a      	bgt.n	44a8 <__aeabi_f2iz+0x34>
    4492:	2096      	movs	r0, #150	; 0x96
    4494:	1ac3      	subs	r3, r0, r3
    4496:	40d9      	lsrs	r1, r3
    4498:	4248      	negs	r0, r1
    449a:	2a00      	cmp	r2, #0
    449c:	d100      	bne.n	44a0 <__aeabi_f2iz+0x2c>
    449e:	0008      	movs	r0, r1
    44a0:	4770      	bx	lr
    44a2:	4b03      	ldr	r3, [pc, #12]	; (44b0 <__aeabi_f2iz+0x3c>)
    44a4:	18d0      	adds	r0, r2, r3
    44a6:	e7fb      	b.n	44a0 <__aeabi_f2iz+0x2c>
    44a8:	3b96      	subs	r3, #150	; 0x96
    44aa:	4099      	lsls	r1, r3
    44ac:	e7f4      	b.n	4498 <__aeabi_f2iz+0x24>
    44ae:	46c0      	nop			; (mov r8, r8)
    44b0:	7fffffff 	.word	0x7fffffff

000044b4 <__aeabi_dadd>:
    44b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    44b6:	4645      	mov	r5, r8
    44b8:	46de      	mov	lr, fp
    44ba:	4657      	mov	r7, sl
    44bc:	464e      	mov	r6, r9
    44be:	030c      	lsls	r4, r1, #12
    44c0:	b5e0      	push	{r5, r6, r7, lr}
    44c2:	004e      	lsls	r6, r1, #1
    44c4:	0fc9      	lsrs	r1, r1, #31
    44c6:	4688      	mov	r8, r1
    44c8:	000d      	movs	r5, r1
    44ca:	0a61      	lsrs	r1, r4, #9
    44cc:	0f44      	lsrs	r4, r0, #29
    44ce:	430c      	orrs	r4, r1
    44d0:	00c7      	lsls	r7, r0, #3
    44d2:	0319      	lsls	r1, r3, #12
    44d4:	0058      	lsls	r0, r3, #1
    44d6:	0fdb      	lsrs	r3, r3, #31
    44d8:	469b      	mov	fp, r3
    44da:	0a4b      	lsrs	r3, r1, #9
    44dc:	0f51      	lsrs	r1, r2, #29
    44de:	430b      	orrs	r3, r1
    44e0:	0d76      	lsrs	r6, r6, #21
    44e2:	0d40      	lsrs	r0, r0, #21
    44e4:	0019      	movs	r1, r3
    44e6:	00d2      	lsls	r2, r2, #3
    44e8:	45d8      	cmp	r8, fp
    44ea:	d100      	bne.n	44ee <__aeabi_dadd+0x3a>
    44ec:	e0ae      	b.n	464c <__aeabi_dadd+0x198>
    44ee:	1a35      	subs	r5, r6, r0
    44f0:	2d00      	cmp	r5, #0
    44f2:	dc00      	bgt.n	44f6 <__aeabi_dadd+0x42>
    44f4:	e0f6      	b.n	46e4 <__aeabi_dadd+0x230>
    44f6:	2800      	cmp	r0, #0
    44f8:	d10f      	bne.n	451a <__aeabi_dadd+0x66>
    44fa:	4313      	orrs	r3, r2
    44fc:	d100      	bne.n	4500 <__aeabi_dadd+0x4c>
    44fe:	e0db      	b.n	46b8 <__aeabi_dadd+0x204>
    4500:	1e6b      	subs	r3, r5, #1
    4502:	2b00      	cmp	r3, #0
    4504:	d000      	beq.n	4508 <__aeabi_dadd+0x54>
    4506:	e137      	b.n	4778 <__aeabi_dadd+0x2c4>
    4508:	1aba      	subs	r2, r7, r2
    450a:	4297      	cmp	r7, r2
    450c:	41bf      	sbcs	r7, r7
    450e:	1a64      	subs	r4, r4, r1
    4510:	427f      	negs	r7, r7
    4512:	1be4      	subs	r4, r4, r7
    4514:	2601      	movs	r6, #1
    4516:	0017      	movs	r7, r2
    4518:	e024      	b.n	4564 <__aeabi_dadd+0xb0>
    451a:	4bc6      	ldr	r3, [pc, #792]	; (4834 <__aeabi_dadd+0x380>)
    451c:	429e      	cmp	r6, r3
    451e:	d04d      	beq.n	45bc <__aeabi_dadd+0x108>
    4520:	2380      	movs	r3, #128	; 0x80
    4522:	041b      	lsls	r3, r3, #16
    4524:	4319      	orrs	r1, r3
    4526:	2d38      	cmp	r5, #56	; 0x38
    4528:	dd00      	ble.n	452c <__aeabi_dadd+0x78>
    452a:	e107      	b.n	473c <__aeabi_dadd+0x288>
    452c:	2d1f      	cmp	r5, #31
    452e:	dd00      	ble.n	4532 <__aeabi_dadd+0x7e>
    4530:	e138      	b.n	47a4 <__aeabi_dadd+0x2f0>
    4532:	2020      	movs	r0, #32
    4534:	1b43      	subs	r3, r0, r5
    4536:	469a      	mov	sl, r3
    4538:	000b      	movs	r3, r1
    453a:	4650      	mov	r0, sl
    453c:	4083      	lsls	r3, r0
    453e:	4699      	mov	r9, r3
    4540:	0013      	movs	r3, r2
    4542:	4648      	mov	r0, r9
    4544:	40eb      	lsrs	r3, r5
    4546:	4318      	orrs	r0, r3
    4548:	0003      	movs	r3, r0
    454a:	4650      	mov	r0, sl
    454c:	4082      	lsls	r2, r0
    454e:	1e50      	subs	r0, r2, #1
    4550:	4182      	sbcs	r2, r0
    4552:	40e9      	lsrs	r1, r5
    4554:	431a      	orrs	r2, r3
    4556:	1aba      	subs	r2, r7, r2
    4558:	1a61      	subs	r1, r4, r1
    455a:	4297      	cmp	r7, r2
    455c:	41a4      	sbcs	r4, r4
    455e:	0017      	movs	r7, r2
    4560:	4264      	negs	r4, r4
    4562:	1b0c      	subs	r4, r1, r4
    4564:	0223      	lsls	r3, r4, #8
    4566:	d562      	bpl.n	462e <__aeabi_dadd+0x17a>
    4568:	0264      	lsls	r4, r4, #9
    456a:	0a65      	lsrs	r5, r4, #9
    456c:	2d00      	cmp	r5, #0
    456e:	d100      	bne.n	4572 <__aeabi_dadd+0xbe>
    4570:	e0df      	b.n	4732 <__aeabi_dadd+0x27e>
    4572:	0028      	movs	r0, r5
    4574:	f001 fe22 	bl	61bc <__clzsi2>
    4578:	0003      	movs	r3, r0
    457a:	3b08      	subs	r3, #8
    457c:	2b1f      	cmp	r3, #31
    457e:	dd00      	ble.n	4582 <__aeabi_dadd+0xce>
    4580:	e0d2      	b.n	4728 <__aeabi_dadd+0x274>
    4582:	2220      	movs	r2, #32
    4584:	003c      	movs	r4, r7
    4586:	1ad2      	subs	r2, r2, r3
    4588:	409d      	lsls	r5, r3
    458a:	40d4      	lsrs	r4, r2
    458c:	409f      	lsls	r7, r3
    458e:	4325      	orrs	r5, r4
    4590:	429e      	cmp	r6, r3
    4592:	dd00      	ble.n	4596 <__aeabi_dadd+0xe2>
    4594:	e0c4      	b.n	4720 <__aeabi_dadd+0x26c>
    4596:	1b9e      	subs	r6, r3, r6
    4598:	1c73      	adds	r3, r6, #1
    459a:	2b1f      	cmp	r3, #31
    459c:	dd00      	ble.n	45a0 <__aeabi_dadd+0xec>
    459e:	e0f1      	b.n	4784 <__aeabi_dadd+0x2d0>
    45a0:	2220      	movs	r2, #32
    45a2:	0038      	movs	r0, r7
    45a4:	0029      	movs	r1, r5
    45a6:	1ad2      	subs	r2, r2, r3
    45a8:	40d8      	lsrs	r0, r3
    45aa:	4091      	lsls	r1, r2
    45ac:	4097      	lsls	r7, r2
    45ae:	002c      	movs	r4, r5
    45b0:	4301      	orrs	r1, r0
    45b2:	1e78      	subs	r0, r7, #1
    45b4:	4187      	sbcs	r7, r0
    45b6:	40dc      	lsrs	r4, r3
    45b8:	2600      	movs	r6, #0
    45ba:	430f      	orrs	r7, r1
    45bc:	077b      	lsls	r3, r7, #29
    45be:	d009      	beq.n	45d4 <__aeabi_dadd+0x120>
    45c0:	230f      	movs	r3, #15
    45c2:	403b      	ands	r3, r7
    45c4:	2b04      	cmp	r3, #4
    45c6:	d005      	beq.n	45d4 <__aeabi_dadd+0x120>
    45c8:	1d3b      	adds	r3, r7, #4
    45ca:	42bb      	cmp	r3, r7
    45cc:	41bf      	sbcs	r7, r7
    45ce:	427f      	negs	r7, r7
    45d0:	19e4      	adds	r4, r4, r7
    45d2:	001f      	movs	r7, r3
    45d4:	0223      	lsls	r3, r4, #8
    45d6:	d52c      	bpl.n	4632 <__aeabi_dadd+0x17e>
    45d8:	4b96      	ldr	r3, [pc, #600]	; (4834 <__aeabi_dadd+0x380>)
    45da:	3601      	adds	r6, #1
    45dc:	429e      	cmp	r6, r3
    45de:	d100      	bne.n	45e2 <__aeabi_dadd+0x12e>
    45e0:	e09a      	b.n	4718 <__aeabi_dadd+0x264>
    45e2:	4645      	mov	r5, r8
    45e4:	4b94      	ldr	r3, [pc, #592]	; (4838 <__aeabi_dadd+0x384>)
    45e6:	08ff      	lsrs	r7, r7, #3
    45e8:	401c      	ands	r4, r3
    45ea:	0760      	lsls	r0, r4, #29
    45ec:	0576      	lsls	r6, r6, #21
    45ee:	0264      	lsls	r4, r4, #9
    45f0:	4307      	orrs	r7, r0
    45f2:	0b24      	lsrs	r4, r4, #12
    45f4:	0d76      	lsrs	r6, r6, #21
    45f6:	2100      	movs	r1, #0
    45f8:	0324      	lsls	r4, r4, #12
    45fa:	0b23      	lsrs	r3, r4, #12
    45fc:	0d0c      	lsrs	r4, r1, #20
    45fe:	4a8f      	ldr	r2, [pc, #572]	; (483c <__aeabi_dadd+0x388>)
    4600:	0524      	lsls	r4, r4, #20
    4602:	431c      	orrs	r4, r3
    4604:	4014      	ands	r4, r2
    4606:	0533      	lsls	r3, r6, #20
    4608:	4323      	orrs	r3, r4
    460a:	005b      	lsls	r3, r3, #1
    460c:	07ed      	lsls	r5, r5, #31
    460e:	085b      	lsrs	r3, r3, #1
    4610:	432b      	orrs	r3, r5
    4612:	0038      	movs	r0, r7
    4614:	0019      	movs	r1, r3
    4616:	bc3c      	pop	{r2, r3, r4, r5}
    4618:	4690      	mov	r8, r2
    461a:	4699      	mov	r9, r3
    461c:	46a2      	mov	sl, r4
    461e:	46ab      	mov	fp, r5
    4620:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4622:	4664      	mov	r4, ip
    4624:	4304      	orrs	r4, r0
    4626:	d100      	bne.n	462a <__aeabi_dadd+0x176>
    4628:	e211      	b.n	4a4e <__aeabi_dadd+0x59a>
    462a:	0004      	movs	r4, r0
    462c:	4667      	mov	r7, ip
    462e:	077b      	lsls	r3, r7, #29
    4630:	d1c6      	bne.n	45c0 <__aeabi_dadd+0x10c>
    4632:	4645      	mov	r5, r8
    4634:	0760      	lsls	r0, r4, #29
    4636:	08ff      	lsrs	r7, r7, #3
    4638:	4307      	orrs	r7, r0
    463a:	08e4      	lsrs	r4, r4, #3
    463c:	4b7d      	ldr	r3, [pc, #500]	; (4834 <__aeabi_dadd+0x380>)
    463e:	429e      	cmp	r6, r3
    4640:	d030      	beq.n	46a4 <__aeabi_dadd+0x1f0>
    4642:	0324      	lsls	r4, r4, #12
    4644:	0576      	lsls	r6, r6, #21
    4646:	0b24      	lsrs	r4, r4, #12
    4648:	0d76      	lsrs	r6, r6, #21
    464a:	e7d4      	b.n	45f6 <__aeabi_dadd+0x142>
    464c:	1a33      	subs	r3, r6, r0
    464e:	469a      	mov	sl, r3
    4650:	2b00      	cmp	r3, #0
    4652:	dd78      	ble.n	4746 <__aeabi_dadd+0x292>
    4654:	2800      	cmp	r0, #0
    4656:	d031      	beq.n	46bc <__aeabi_dadd+0x208>
    4658:	4876      	ldr	r0, [pc, #472]	; (4834 <__aeabi_dadd+0x380>)
    465a:	4286      	cmp	r6, r0
    465c:	d0ae      	beq.n	45bc <__aeabi_dadd+0x108>
    465e:	2080      	movs	r0, #128	; 0x80
    4660:	0400      	lsls	r0, r0, #16
    4662:	4301      	orrs	r1, r0
    4664:	4653      	mov	r3, sl
    4666:	2b38      	cmp	r3, #56	; 0x38
    4668:	dc00      	bgt.n	466c <__aeabi_dadd+0x1b8>
    466a:	e0e9      	b.n	4840 <__aeabi_dadd+0x38c>
    466c:	430a      	orrs	r2, r1
    466e:	1e51      	subs	r1, r2, #1
    4670:	418a      	sbcs	r2, r1
    4672:	2100      	movs	r1, #0
    4674:	19d2      	adds	r2, r2, r7
    4676:	42ba      	cmp	r2, r7
    4678:	41bf      	sbcs	r7, r7
    467a:	1909      	adds	r1, r1, r4
    467c:	427c      	negs	r4, r7
    467e:	0017      	movs	r7, r2
    4680:	190c      	adds	r4, r1, r4
    4682:	0223      	lsls	r3, r4, #8
    4684:	d5d3      	bpl.n	462e <__aeabi_dadd+0x17a>
    4686:	4b6b      	ldr	r3, [pc, #428]	; (4834 <__aeabi_dadd+0x380>)
    4688:	3601      	adds	r6, #1
    468a:	429e      	cmp	r6, r3
    468c:	d100      	bne.n	4690 <__aeabi_dadd+0x1dc>
    468e:	e13a      	b.n	4906 <__aeabi_dadd+0x452>
    4690:	2001      	movs	r0, #1
    4692:	4b69      	ldr	r3, [pc, #420]	; (4838 <__aeabi_dadd+0x384>)
    4694:	401c      	ands	r4, r3
    4696:	087b      	lsrs	r3, r7, #1
    4698:	4007      	ands	r7, r0
    469a:	431f      	orrs	r7, r3
    469c:	07e0      	lsls	r0, r4, #31
    469e:	4307      	orrs	r7, r0
    46a0:	0864      	lsrs	r4, r4, #1
    46a2:	e78b      	b.n	45bc <__aeabi_dadd+0x108>
    46a4:	0023      	movs	r3, r4
    46a6:	433b      	orrs	r3, r7
    46a8:	d100      	bne.n	46ac <__aeabi_dadd+0x1f8>
    46aa:	e1cb      	b.n	4a44 <__aeabi_dadd+0x590>
    46ac:	2280      	movs	r2, #128	; 0x80
    46ae:	0312      	lsls	r2, r2, #12
    46b0:	4314      	orrs	r4, r2
    46b2:	0324      	lsls	r4, r4, #12
    46b4:	0b24      	lsrs	r4, r4, #12
    46b6:	e79e      	b.n	45f6 <__aeabi_dadd+0x142>
    46b8:	002e      	movs	r6, r5
    46ba:	e77f      	b.n	45bc <__aeabi_dadd+0x108>
    46bc:	0008      	movs	r0, r1
    46be:	4310      	orrs	r0, r2
    46c0:	d100      	bne.n	46c4 <__aeabi_dadd+0x210>
    46c2:	e0b4      	b.n	482e <__aeabi_dadd+0x37a>
    46c4:	1e58      	subs	r0, r3, #1
    46c6:	2800      	cmp	r0, #0
    46c8:	d000      	beq.n	46cc <__aeabi_dadd+0x218>
    46ca:	e0de      	b.n	488a <__aeabi_dadd+0x3d6>
    46cc:	18ba      	adds	r2, r7, r2
    46ce:	42ba      	cmp	r2, r7
    46d0:	419b      	sbcs	r3, r3
    46d2:	1864      	adds	r4, r4, r1
    46d4:	425b      	negs	r3, r3
    46d6:	18e4      	adds	r4, r4, r3
    46d8:	0017      	movs	r7, r2
    46da:	2601      	movs	r6, #1
    46dc:	0223      	lsls	r3, r4, #8
    46de:	d5a6      	bpl.n	462e <__aeabi_dadd+0x17a>
    46e0:	2602      	movs	r6, #2
    46e2:	e7d5      	b.n	4690 <__aeabi_dadd+0x1dc>
    46e4:	2d00      	cmp	r5, #0
    46e6:	d16e      	bne.n	47c6 <__aeabi_dadd+0x312>
    46e8:	1c70      	adds	r0, r6, #1
    46ea:	0540      	lsls	r0, r0, #21
    46ec:	0d40      	lsrs	r0, r0, #21
    46ee:	2801      	cmp	r0, #1
    46f0:	dc00      	bgt.n	46f4 <__aeabi_dadd+0x240>
    46f2:	e0f9      	b.n	48e8 <__aeabi_dadd+0x434>
    46f4:	1ab8      	subs	r0, r7, r2
    46f6:	4684      	mov	ip, r0
    46f8:	4287      	cmp	r7, r0
    46fa:	4180      	sbcs	r0, r0
    46fc:	1ae5      	subs	r5, r4, r3
    46fe:	4240      	negs	r0, r0
    4700:	1a2d      	subs	r5, r5, r0
    4702:	0228      	lsls	r0, r5, #8
    4704:	d400      	bmi.n	4708 <__aeabi_dadd+0x254>
    4706:	e089      	b.n	481c <__aeabi_dadd+0x368>
    4708:	1bd7      	subs	r7, r2, r7
    470a:	42ba      	cmp	r2, r7
    470c:	4192      	sbcs	r2, r2
    470e:	1b1c      	subs	r4, r3, r4
    4710:	4252      	negs	r2, r2
    4712:	1aa5      	subs	r5, r4, r2
    4714:	46d8      	mov	r8, fp
    4716:	e729      	b.n	456c <__aeabi_dadd+0xb8>
    4718:	4645      	mov	r5, r8
    471a:	2400      	movs	r4, #0
    471c:	2700      	movs	r7, #0
    471e:	e76a      	b.n	45f6 <__aeabi_dadd+0x142>
    4720:	4c45      	ldr	r4, [pc, #276]	; (4838 <__aeabi_dadd+0x384>)
    4722:	1af6      	subs	r6, r6, r3
    4724:	402c      	ands	r4, r5
    4726:	e749      	b.n	45bc <__aeabi_dadd+0x108>
    4728:	003d      	movs	r5, r7
    472a:	3828      	subs	r0, #40	; 0x28
    472c:	4085      	lsls	r5, r0
    472e:	2700      	movs	r7, #0
    4730:	e72e      	b.n	4590 <__aeabi_dadd+0xdc>
    4732:	0038      	movs	r0, r7
    4734:	f001 fd42 	bl	61bc <__clzsi2>
    4738:	3020      	adds	r0, #32
    473a:	e71d      	b.n	4578 <__aeabi_dadd+0xc4>
    473c:	430a      	orrs	r2, r1
    473e:	1e51      	subs	r1, r2, #1
    4740:	418a      	sbcs	r2, r1
    4742:	2100      	movs	r1, #0
    4744:	e707      	b.n	4556 <__aeabi_dadd+0xa2>
    4746:	2b00      	cmp	r3, #0
    4748:	d000      	beq.n	474c <__aeabi_dadd+0x298>
    474a:	e0f3      	b.n	4934 <__aeabi_dadd+0x480>
    474c:	1c70      	adds	r0, r6, #1
    474e:	0543      	lsls	r3, r0, #21
    4750:	0d5b      	lsrs	r3, r3, #21
    4752:	2b01      	cmp	r3, #1
    4754:	dc00      	bgt.n	4758 <__aeabi_dadd+0x2a4>
    4756:	e0ad      	b.n	48b4 <__aeabi_dadd+0x400>
    4758:	4b36      	ldr	r3, [pc, #216]	; (4834 <__aeabi_dadd+0x380>)
    475a:	4298      	cmp	r0, r3
    475c:	d100      	bne.n	4760 <__aeabi_dadd+0x2ac>
    475e:	e0d1      	b.n	4904 <__aeabi_dadd+0x450>
    4760:	18ba      	adds	r2, r7, r2
    4762:	42ba      	cmp	r2, r7
    4764:	41bf      	sbcs	r7, r7
    4766:	1864      	adds	r4, r4, r1
    4768:	427f      	negs	r7, r7
    476a:	19e4      	adds	r4, r4, r7
    476c:	07e7      	lsls	r7, r4, #31
    476e:	0852      	lsrs	r2, r2, #1
    4770:	4317      	orrs	r7, r2
    4772:	0864      	lsrs	r4, r4, #1
    4774:	0006      	movs	r6, r0
    4776:	e721      	b.n	45bc <__aeabi_dadd+0x108>
    4778:	482e      	ldr	r0, [pc, #184]	; (4834 <__aeabi_dadd+0x380>)
    477a:	4285      	cmp	r5, r0
    477c:	d100      	bne.n	4780 <__aeabi_dadd+0x2cc>
    477e:	e093      	b.n	48a8 <__aeabi_dadd+0x3f4>
    4780:	001d      	movs	r5, r3
    4782:	e6d0      	b.n	4526 <__aeabi_dadd+0x72>
    4784:	0029      	movs	r1, r5
    4786:	3e1f      	subs	r6, #31
    4788:	40f1      	lsrs	r1, r6
    478a:	2b20      	cmp	r3, #32
    478c:	d100      	bne.n	4790 <__aeabi_dadd+0x2dc>
    478e:	e08d      	b.n	48ac <__aeabi_dadd+0x3f8>
    4790:	2240      	movs	r2, #64	; 0x40
    4792:	1ad3      	subs	r3, r2, r3
    4794:	409d      	lsls	r5, r3
    4796:	432f      	orrs	r7, r5
    4798:	1e7d      	subs	r5, r7, #1
    479a:	41af      	sbcs	r7, r5
    479c:	2400      	movs	r4, #0
    479e:	430f      	orrs	r7, r1
    47a0:	2600      	movs	r6, #0
    47a2:	e744      	b.n	462e <__aeabi_dadd+0x17a>
    47a4:	002b      	movs	r3, r5
    47a6:	0008      	movs	r0, r1
    47a8:	3b20      	subs	r3, #32
    47aa:	40d8      	lsrs	r0, r3
    47ac:	0003      	movs	r3, r0
    47ae:	2d20      	cmp	r5, #32
    47b0:	d100      	bne.n	47b4 <__aeabi_dadd+0x300>
    47b2:	e07d      	b.n	48b0 <__aeabi_dadd+0x3fc>
    47b4:	2040      	movs	r0, #64	; 0x40
    47b6:	1b45      	subs	r5, r0, r5
    47b8:	40a9      	lsls	r1, r5
    47ba:	430a      	orrs	r2, r1
    47bc:	1e51      	subs	r1, r2, #1
    47be:	418a      	sbcs	r2, r1
    47c0:	2100      	movs	r1, #0
    47c2:	431a      	orrs	r2, r3
    47c4:	e6c7      	b.n	4556 <__aeabi_dadd+0xa2>
    47c6:	2e00      	cmp	r6, #0
    47c8:	d050      	beq.n	486c <__aeabi_dadd+0x3b8>
    47ca:	4e1a      	ldr	r6, [pc, #104]	; (4834 <__aeabi_dadd+0x380>)
    47cc:	42b0      	cmp	r0, r6
    47ce:	d057      	beq.n	4880 <__aeabi_dadd+0x3cc>
    47d0:	2680      	movs	r6, #128	; 0x80
    47d2:	426b      	negs	r3, r5
    47d4:	4699      	mov	r9, r3
    47d6:	0436      	lsls	r6, r6, #16
    47d8:	4334      	orrs	r4, r6
    47da:	464b      	mov	r3, r9
    47dc:	2b38      	cmp	r3, #56	; 0x38
    47de:	dd00      	ble.n	47e2 <__aeabi_dadd+0x32e>
    47e0:	e0d6      	b.n	4990 <__aeabi_dadd+0x4dc>
    47e2:	2b1f      	cmp	r3, #31
    47e4:	dd00      	ble.n	47e8 <__aeabi_dadd+0x334>
    47e6:	e135      	b.n	4a54 <__aeabi_dadd+0x5a0>
    47e8:	2620      	movs	r6, #32
    47ea:	1af5      	subs	r5, r6, r3
    47ec:	0026      	movs	r6, r4
    47ee:	40ae      	lsls	r6, r5
    47f0:	46b2      	mov	sl, r6
    47f2:	003e      	movs	r6, r7
    47f4:	40de      	lsrs	r6, r3
    47f6:	46ac      	mov	ip, r5
    47f8:	0035      	movs	r5, r6
    47fa:	4656      	mov	r6, sl
    47fc:	432e      	orrs	r6, r5
    47fe:	4665      	mov	r5, ip
    4800:	40af      	lsls	r7, r5
    4802:	1e7d      	subs	r5, r7, #1
    4804:	41af      	sbcs	r7, r5
    4806:	40dc      	lsrs	r4, r3
    4808:	4337      	orrs	r7, r6
    480a:	1bd7      	subs	r7, r2, r7
    480c:	42ba      	cmp	r2, r7
    480e:	4192      	sbcs	r2, r2
    4810:	1b0c      	subs	r4, r1, r4
    4812:	4252      	negs	r2, r2
    4814:	1aa4      	subs	r4, r4, r2
    4816:	0006      	movs	r6, r0
    4818:	46d8      	mov	r8, fp
    481a:	e6a3      	b.n	4564 <__aeabi_dadd+0xb0>
    481c:	4664      	mov	r4, ip
    481e:	4667      	mov	r7, ip
    4820:	432c      	orrs	r4, r5
    4822:	d000      	beq.n	4826 <__aeabi_dadd+0x372>
    4824:	e6a2      	b.n	456c <__aeabi_dadd+0xb8>
    4826:	2500      	movs	r5, #0
    4828:	2600      	movs	r6, #0
    482a:	2700      	movs	r7, #0
    482c:	e706      	b.n	463c <__aeabi_dadd+0x188>
    482e:	001e      	movs	r6, r3
    4830:	e6c4      	b.n	45bc <__aeabi_dadd+0x108>
    4832:	46c0      	nop			; (mov r8, r8)
    4834:	000007ff 	.word	0x000007ff
    4838:	ff7fffff 	.word	0xff7fffff
    483c:	800fffff 	.word	0x800fffff
    4840:	2b1f      	cmp	r3, #31
    4842:	dc63      	bgt.n	490c <__aeabi_dadd+0x458>
    4844:	2020      	movs	r0, #32
    4846:	1ac3      	subs	r3, r0, r3
    4848:	0008      	movs	r0, r1
    484a:	4098      	lsls	r0, r3
    484c:	469c      	mov	ip, r3
    484e:	4683      	mov	fp, r0
    4850:	4653      	mov	r3, sl
    4852:	0010      	movs	r0, r2
    4854:	40d8      	lsrs	r0, r3
    4856:	0003      	movs	r3, r0
    4858:	4658      	mov	r0, fp
    485a:	4318      	orrs	r0, r3
    485c:	4663      	mov	r3, ip
    485e:	409a      	lsls	r2, r3
    4860:	1e53      	subs	r3, r2, #1
    4862:	419a      	sbcs	r2, r3
    4864:	4653      	mov	r3, sl
    4866:	4302      	orrs	r2, r0
    4868:	40d9      	lsrs	r1, r3
    486a:	e703      	b.n	4674 <__aeabi_dadd+0x1c0>
    486c:	0026      	movs	r6, r4
    486e:	433e      	orrs	r6, r7
    4870:	d006      	beq.n	4880 <__aeabi_dadd+0x3cc>
    4872:	43eb      	mvns	r3, r5
    4874:	4699      	mov	r9, r3
    4876:	2b00      	cmp	r3, #0
    4878:	d0c7      	beq.n	480a <__aeabi_dadd+0x356>
    487a:	4e94      	ldr	r6, [pc, #592]	; (4acc <__aeabi_dadd+0x618>)
    487c:	42b0      	cmp	r0, r6
    487e:	d1ac      	bne.n	47da <__aeabi_dadd+0x326>
    4880:	000c      	movs	r4, r1
    4882:	0017      	movs	r7, r2
    4884:	0006      	movs	r6, r0
    4886:	46d8      	mov	r8, fp
    4888:	e698      	b.n	45bc <__aeabi_dadd+0x108>
    488a:	4b90      	ldr	r3, [pc, #576]	; (4acc <__aeabi_dadd+0x618>)
    488c:	459a      	cmp	sl, r3
    488e:	d00b      	beq.n	48a8 <__aeabi_dadd+0x3f4>
    4890:	4682      	mov	sl, r0
    4892:	e6e7      	b.n	4664 <__aeabi_dadd+0x1b0>
    4894:	2800      	cmp	r0, #0
    4896:	d000      	beq.n	489a <__aeabi_dadd+0x3e6>
    4898:	e09e      	b.n	49d8 <__aeabi_dadd+0x524>
    489a:	0018      	movs	r0, r3
    489c:	4310      	orrs	r0, r2
    489e:	d100      	bne.n	48a2 <__aeabi_dadd+0x3ee>
    48a0:	e0e9      	b.n	4a76 <__aeabi_dadd+0x5c2>
    48a2:	001c      	movs	r4, r3
    48a4:	0017      	movs	r7, r2
    48a6:	46d8      	mov	r8, fp
    48a8:	4e88      	ldr	r6, [pc, #544]	; (4acc <__aeabi_dadd+0x618>)
    48aa:	e687      	b.n	45bc <__aeabi_dadd+0x108>
    48ac:	2500      	movs	r5, #0
    48ae:	e772      	b.n	4796 <__aeabi_dadd+0x2e2>
    48b0:	2100      	movs	r1, #0
    48b2:	e782      	b.n	47ba <__aeabi_dadd+0x306>
    48b4:	0023      	movs	r3, r4
    48b6:	433b      	orrs	r3, r7
    48b8:	2e00      	cmp	r6, #0
    48ba:	d000      	beq.n	48be <__aeabi_dadd+0x40a>
    48bc:	e0ab      	b.n	4a16 <__aeabi_dadd+0x562>
    48be:	2b00      	cmp	r3, #0
    48c0:	d100      	bne.n	48c4 <__aeabi_dadd+0x410>
    48c2:	e0e7      	b.n	4a94 <__aeabi_dadd+0x5e0>
    48c4:	000b      	movs	r3, r1
    48c6:	4313      	orrs	r3, r2
    48c8:	d100      	bne.n	48cc <__aeabi_dadd+0x418>
    48ca:	e677      	b.n	45bc <__aeabi_dadd+0x108>
    48cc:	18ba      	adds	r2, r7, r2
    48ce:	42ba      	cmp	r2, r7
    48d0:	41bf      	sbcs	r7, r7
    48d2:	1864      	adds	r4, r4, r1
    48d4:	427f      	negs	r7, r7
    48d6:	19e4      	adds	r4, r4, r7
    48d8:	0223      	lsls	r3, r4, #8
    48da:	d400      	bmi.n	48de <__aeabi_dadd+0x42a>
    48dc:	e0f2      	b.n	4ac4 <__aeabi_dadd+0x610>
    48de:	4b7c      	ldr	r3, [pc, #496]	; (4ad0 <__aeabi_dadd+0x61c>)
    48e0:	0017      	movs	r7, r2
    48e2:	401c      	ands	r4, r3
    48e4:	0006      	movs	r6, r0
    48e6:	e669      	b.n	45bc <__aeabi_dadd+0x108>
    48e8:	0020      	movs	r0, r4
    48ea:	4338      	orrs	r0, r7
    48ec:	2e00      	cmp	r6, #0
    48ee:	d1d1      	bne.n	4894 <__aeabi_dadd+0x3e0>
    48f0:	2800      	cmp	r0, #0
    48f2:	d15b      	bne.n	49ac <__aeabi_dadd+0x4f8>
    48f4:	001c      	movs	r4, r3
    48f6:	4314      	orrs	r4, r2
    48f8:	d100      	bne.n	48fc <__aeabi_dadd+0x448>
    48fa:	e0a8      	b.n	4a4e <__aeabi_dadd+0x59a>
    48fc:	001c      	movs	r4, r3
    48fe:	0017      	movs	r7, r2
    4900:	46d8      	mov	r8, fp
    4902:	e65b      	b.n	45bc <__aeabi_dadd+0x108>
    4904:	0006      	movs	r6, r0
    4906:	2400      	movs	r4, #0
    4908:	2700      	movs	r7, #0
    490a:	e697      	b.n	463c <__aeabi_dadd+0x188>
    490c:	4650      	mov	r0, sl
    490e:	000b      	movs	r3, r1
    4910:	3820      	subs	r0, #32
    4912:	40c3      	lsrs	r3, r0
    4914:	4699      	mov	r9, r3
    4916:	4653      	mov	r3, sl
    4918:	2b20      	cmp	r3, #32
    491a:	d100      	bne.n	491e <__aeabi_dadd+0x46a>
    491c:	e095      	b.n	4a4a <__aeabi_dadd+0x596>
    491e:	2340      	movs	r3, #64	; 0x40
    4920:	4650      	mov	r0, sl
    4922:	1a1b      	subs	r3, r3, r0
    4924:	4099      	lsls	r1, r3
    4926:	430a      	orrs	r2, r1
    4928:	1e51      	subs	r1, r2, #1
    492a:	418a      	sbcs	r2, r1
    492c:	464b      	mov	r3, r9
    492e:	2100      	movs	r1, #0
    4930:	431a      	orrs	r2, r3
    4932:	e69f      	b.n	4674 <__aeabi_dadd+0x1c0>
    4934:	2e00      	cmp	r6, #0
    4936:	d130      	bne.n	499a <__aeabi_dadd+0x4e6>
    4938:	0026      	movs	r6, r4
    493a:	433e      	orrs	r6, r7
    493c:	d067      	beq.n	4a0e <__aeabi_dadd+0x55a>
    493e:	43db      	mvns	r3, r3
    4940:	469a      	mov	sl, r3
    4942:	2b00      	cmp	r3, #0
    4944:	d01c      	beq.n	4980 <__aeabi_dadd+0x4cc>
    4946:	4e61      	ldr	r6, [pc, #388]	; (4acc <__aeabi_dadd+0x618>)
    4948:	42b0      	cmp	r0, r6
    494a:	d060      	beq.n	4a0e <__aeabi_dadd+0x55a>
    494c:	4653      	mov	r3, sl
    494e:	2b38      	cmp	r3, #56	; 0x38
    4950:	dd00      	ble.n	4954 <__aeabi_dadd+0x4a0>
    4952:	e096      	b.n	4a82 <__aeabi_dadd+0x5ce>
    4954:	2b1f      	cmp	r3, #31
    4956:	dd00      	ble.n	495a <__aeabi_dadd+0x4a6>
    4958:	e09f      	b.n	4a9a <__aeabi_dadd+0x5e6>
    495a:	2620      	movs	r6, #32
    495c:	1af3      	subs	r3, r6, r3
    495e:	0026      	movs	r6, r4
    4960:	409e      	lsls	r6, r3
    4962:	469c      	mov	ip, r3
    4964:	46b3      	mov	fp, r6
    4966:	4653      	mov	r3, sl
    4968:	003e      	movs	r6, r7
    496a:	40de      	lsrs	r6, r3
    496c:	0033      	movs	r3, r6
    496e:	465e      	mov	r6, fp
    4970:	431e      	orrs	r6, r3
    4972:	4663      	mov	r3, ip
    4974:	409f      	lsls	r7, r3
    4976:	1e7b      	subs	r3, r7, #1
    4978:	419f      	sbcs	r7, r3
    497a:	4653      	mov	r3, sl
    497c:	40dc      	lsrs	r4, r3
    497e:	4337      	orrs	r7, r6
    4980:	18bf      	adds	r7, r7, r2
    4982:	4297      	cmp	r7, r2
    4984:	4192      	sbcs	r2, r2
    4986:	1864      	adds	r4, r4, r1
    4988:	4252      	negs	r2, r2
    498a:	18a4      	adds	r4, r4, r2
    498c:	0006      	movs	r6, r0
    498e:	e678      	b.n	4682 <__aeabi_dadd+0x1ce>
    4990:	4327      	orrs	r7, r4
    4992:	1e7c      	subs	r4, r7, #1
    4994:	41a7      	sbcs	r7, r4
    4996:	2400      	movs	r4, #0
    4998:	e737      	b.n	480a <__aeabi_dadd+0x356>
    499a:	4e4c      	ldr	r6, [pc, #304]	; (4acc <__aeabi_dadd+0x618>)
    499c:	42b0      	cmp	r0, r6
    499e:	d036      	beq.n	4a0e <__aeabi_dadd+0x55a>
    49a0:	2680      	movs	r6, #128	; 0x80
    49a2:	425b      	negs	r3, r3
    49a4:	0436      	lsls	r6, r6, #16
    49a6:	469a      	mov	sl, r3
    49a8:	4334      	orrs	r4, r6
    49aa:	e7cf      	b.n	494c <__aeabi_dadd+0x498>
    49ac:	0018      	movs	r0, r3
    49ae:	4310      	orrs	r0, r2
    49b0:	d100      	bne.n	49b4 <__aeabi_dadd+0x500>
    49b2:	e603      	b.n	45bc <__aeabi_dadd+0x108>
    49b4:	1ab8      	subs	r0, r7, r2
    49b6:	4684      	mov	ip, r0
    49b8:	4567      	cmp	r7, ip
    49ba:	41ad      	sbcs	r5, r5
    49bc:	1ae0      	subs	r0, r4, r3
    49be:	426d      	negs	r5, r5
    49c0:	1b40      	subs	r0, r0, r5
    49c2:	0205      	lsls	r5, r0, #8
    49c4:	d400      	bmi.n	49c8 <__aeabi_dadd+0x514>
    49c6:	e62c      	b.n	4622 <__aeabi_dadd+0x16e>
    49c8:	1bd7      	subs	r7, r2, r7
    49ca:	42ba      	cmp	r2, r7
    49cc:	4192      	sbcs	r2, r2
    49ce:	1b1c      	subs	r4, r3, r4
    49d0:	4252      	negs	r2, r2
    49d2:	1aa4      	subs	r4, r4, r2
    49d4:	46d8      	mov	r8, fp
    49d6:	e5f1      	b.n	45bc <__aeabi_dadd+0x108>
    49d8:	0018      	movs	r0, r3
    49da:	4310      	orrs	r0, r2
    49dc:	d100      	bne.n	49e0 <__aeabi_dadd+0x52c>
    49de:	e763      	b.n	48a8 <__aeabi_dadd+0x3f4>
    49e0:	08f8      	lsrs	r0, r7, #3
    49e2:	0767      	lsls	r7, r4, #29
    49e4:	4307      	orrs	r7, r0
    49e6:	2080      	movs	r0, #128	; 0x80
    49e8:	08e4      	lsrs	r4, r4, #3
    49ea:	0300      	lsls	r0, r0, #12
    49ec:	4204      	tst	r4, r0
    49ee:	d008      	beq.n	4a02 <__aeabi_dadd+0x54e>
    49f0:	08dd      	lsrs	r5, r3, #3
    49f2:	4205      	tst	r5, r0
    49f4:	d105      	bne.n	4a02 <__aeabi_dadd+0x54e>
    49f6:	08d2      	lsrs	r2, r2, #3
    49f8:	0759      	lsls	r1, r3, #29
    49fa:	4311      	orrs	r1, r2
    49fc:	000f      	movs	r7, r1
    49fe:	002c      	movs	r4, r5
    4a00:	46d8      	mov	r8, fp
    4a02:	0f7b      	lsrs	r3, r7, #29
    4a04:	00e4      	lsls	r4, r4, #3
    4a06:	431c      	orrs	r4, r3
    4a08:	00ff      	lsls	r7, r7, #3
    4a0a:	4e30      	ldr	r6, [pc, #192]	; (4acc <__aeabi_dadd+0x618>)
    4a0c:	e5d6      	b.n	45bc <__aeabi_dadd+0x108>
    4a0e:	000c      	movs	r4, r1
    4a10:	0017      	movs	r7, r2
    4a12:	0006      	movs	r6, r0
    4a14:	e5d2      	b.n	45bc <__aeabi_dadd+0x108>
    4a16:	2b00      	cmp	r3, #0
    4a18:	d038      	beq.n	4a8c <__aeabi_dadd+0x5d8>
    4a1a:	000b      	movs	r3, r1
    4a1c:	4313      	orrs	r3, r2
    4a1e:	d100      	bne.n	4a22 <__aeabi_dadd+0x56e>
    4a20:	e742      	b.n	48a8 <__aeabi_dadd+0x3f4>
    4a22:	08f8      	lsrs	r0, r7, #3
    4a24:	0767      	lsls	r7, r4, #29
    4a26:	4307      	orrs	r7, r0
    4a28:	2080      	movs	r0, #128	; 0x80
    4a2a:	08e4      	lsrs	r4, r4, #3
    4a2c:	0300      	lsls	r0, r0, #12
    4a2e:	4204      	tst	r4, r0
    4a30:	d0e7      	beq.n	4a02 <__aeabi_dadd+0x54e>
    4a32:	08cb      	lsrs	r3, r1, #3
    4a34:	4203      	tst	r3, r0
    4a36:	d1e4      	bne.n	4a02 <__aeabi_dadd+0x54e>
    4a38:	08d2      	lsrs	r2, r2, #3
    4a3a:	0749      	lsls	r1, r1, #29
    4a3c:	4311      	orrs	r1, r2
    4a3e:	000f      	movs	r7, r1
    4a40:	001c      	movs	r4, r3
    4a42:	e7de      	b.n	4a02 <__aeabi_dadd+0x54e>
    4a44:	2700      	movs	r7, #0
    4a46:	2400      	movs	r4, #0
    4a48:	e5d5      	b.n	45f6 <__aeabi_dadd+0x142>
    4a4a:	2100      	movs	r1, #0
    4a4c:	e76b      	b.n	4926 <__aeabi_dadd+0x472>
    4a4e:	2500      	movs	r5, #0
    4a50:	2700      	movs	r7, #0
    4a52:	e5f3      	b.n	463c <__aeabi_dadd+0x188>
    4a54:	464e      	mov	r6, r9
    4a56:	0025      	movs	r5, r4
    4a58:	3e20      	subs	r6, #32
    4a5a:	40f5      	lsrs	r5, r6
    4a5c:	464b      	mov	r3, r9
    4a5e:	002e      	movs	r6, r5
    4a60:	2b20      	cmp	r3, #32
    4a62:	d02d      	beq.n	4ac0 <__aeabi_dadd+0x60c>
    4a64:	2540      	movs	r5, #64	; 0x40
    4a66:	1aed      	subs	r5, r5, r3
    4a68:	40ac      	lsls	r4, r5
    4a6a:	4327      	orrs	r7, r4
    4a6c:	1e7c      	subs	r4, r7, #1
    4a6e:	41a7      	sbcs	r7, r4
    4a70:	2400      	movs	r4, #0
    4a72:	4337      	orrs	r7, r6
    4a74:	e6c9      	b.n	480a <__aeabi_dadd+0x356>
    4a76:	2480      	movs	r4, #128	; 0x80
    4a78:	2500      	movs	r5, #0
    4a7a:	0324      	lsls	r4, r4, #12
    4a7c:	4e13      	ldr	r6, [pc, #76]	; (4acc <__aeabi_dadd+0x618>)
    4a7e:	2700      	movs	r7, #0
    4a80:	e5dc      	b.n	463c <__aeabi_dadd+0x188>
    4a82:	4327      	orrs	r7, r4
    4a84:	1e7c      	subs	r4, r7, #1
    4a86:	41a7      	sbcs	r7, r4
    4a88:	2400      	movs	r4, #0
    4a8a:	e779      	b.n	4980 <__aeabi_dadd+0x4cc>
    4a8c:	000c      	movs	r4, r1
    4a8e:	0017      	movs	r7, r2
    4a90:	4e0e      	ldr	r6, [pc, #56]	; (4acc <__aeabi_dadd+0x618>)
    4a92:	e593      	b.n	45bc <__aeabi_dadd+0x108>
    4a94:	000c      	movs	r4, r1
    4a96:	0017      	movs	r7, r2
    4a98:	e590      	b.n	45bc <__aeabi_dadd+0x108>
    4a9a:	4656      	mov	r6, sl
    4a9c:	0023      	movs	r3, r4
    4a9e:	3e20      	subs	r6, #32
    4aa0:	40f3      	lsrs	r3, r6
    4aa2:	4699      	mov	r9, r3
    4aa4:	4653      	mov	r3, sl
    4aa6:	2b20      	cmp	r3, #32
    4aa8:	d00e      	beq.n	4ac8 <__aeabi_dadd+0x614>
    4aaa:	2340      	movs	r3, #64	; 0x40
    4aac:	4656      	mov	r6, sl
    4aae:	1b9b      	subs	r3, r3, r6
    4ab0:	409c      	lsls	r4, r3
    4ab2:	4327      	orrs	r7, r4
    4ab4:	1e7c      	subs	r4, r7, #1
    4ab6:	41a7      	sbcs	r7, r4
    4ab8:	464b      	mov	r3, r9
    4aba:	2400      	movs	r4, #0
    4abc:	431f      	orrs	r7, r3
    4abe:	e75f      	b.n	4980 <__aeabi_dadd+0x4cc>
    4ac0:	2400      	movs	r4, #0
    4ac2:	e7d2      	b.n	4a6a <__aeabi_dadd+0x5b6>
    4ac4:	0017      	movs	r7, r2
    4ac6:	e5b2      	b.n	462e <__aeabi_dadd+0x17a>
    4ac8:	2400      	movs	r4, #0
    4aca:	e7f2      	b.n	4ab2 <__aeabi_dadd+0x5fe>
    4acc:	000007ff 	.word	0x000007ff
    4ad0:	ff7fffff 	.word	0xff7fffff

00004ad4 <__aeabi_ddiv>:
    4ad4:	b5f0      	push	{r4, r5, r6, r7, lr}
    4ad6:	4657      	mov	r7, sl
    4ad8:	4645      	mov	r5, r8
    4ada:	46de      	mov	lr, fp
    4adc:	464e      	mov	r6, r9
    4ade:	b5e0      	push	{r5, r6, r7, lr}
    4ae0:	004c      	lsls	r4, r1, #1
    4ae2:	030e      	lsls	r6, r1, #12
    4ae4:	b087      	sub	sp, #28
    4ae6:	4683      	mov	fp, r0
    4ae8:	4692      	mov	sl, r2
    4aea:	001d      	movs	r5, r3
    4aec:	4680      	mov	r8, r0
    4aee:	0b36      	lsrs	r6, r6, #12
    4af0:	0d64      	lsrs	r4, r4, #21
    4af2:	0fcf      	lsrs	r7, r1, #31
    4af4:	2c00      	cmp	r4, #0
    4af6:	d04f      	beq.n	4b98 <__aeabi_ddiv+0xc4>
    4af8:	4b6f      	ldr	r3, [pc, #444]	; (4cb8 <__aeabi_ddiv+0x1e4>)
    4afa:	429c      	cmp	r4, r3
    4afc:	d035      	beq.n	4b6a <__aeabi_ddiv+0x96>
    4afe:	2380      	movs	r3, #128	; 0x80
    4b00:	0f42      	lsrs	r2, r0, #29
    4b02:	041b      	lsls	r3, r3, #16
    4b04:	00f6      	lsls	r6, r6, #3
    4b06:	4313      	orrs	r3, r2
    4b08:	4333      	orrs	r3, r6
    4b0a:	4699      	mov	r9, r3
    4b0c:	00c3      	lsls	r3, r0, #3
    4b0e:	4698      	mov	r8, r3
    4b10:	4b6a      	ldr	r3, [pc, #424]	; (4cbc <__aeabi_ddiv+0x1e8>)
    4b12:	2600      	movs	r6, #0
    4b14:	469c      	mov	ip, r3
    4b16:	2300      	movs	r3, #0
    4b18:	4464      	add	r4, ip
    4b1a:	9303      	str	r3, [sp, #12]
    4b1c:	032b      	lsls	r3, r5, #12
    4b1e:	0b1b      	lsrs	r3, r3, #12
    4b20:	469b      	mov	fp, r3
    4b22:	006b      	lsls	r3, r5, #1
    4b24:	0fed      	lsrs	r5, r5, #31
    4b26:	4650      	mov	r0, sl
    4b28:	0d5b      	lsrs	r3, r3, #21
    4b2a:	9501      	str	r5, [sp, #4]
    4b2c:	d05e      	beq.n	4bec <__aeabi_ddiv+0x118>
    4b2e:	4a62      	ldr	r2, [pc, #392]	; (4cb8 <__aeabi_ddiv+0x1e4>)
    4b30:	4293      	cmp	r3, r2
    4b32:	d053      	beq.n	4bdc <__aeabi_ddiv+0x108>
    4b34:	465a      	mov	r2, fp
    4b36:	00d1      	lsls	r1, r2, #3
    4b38:	2280      	movs	r2, #128	; 0x80
    4b3a:	0f40      	lsrs	r0, r0, #29
    4b3c:	0412      	lsls	r2, r2, #16
    4b3e:	4302      	orrs	r2, r0
    4b40:	430a      	orrs	r2, r1
    4b42:	4693      	mov	fp, r2
    4b44:	4652      	mov	r2, sl
    4b46:	00d1      	lsls	r1, r2, #3
    4b48:	4a5c      	ldr	r2, [pc, #368]	; (4cbc <__aeabi_ddiv+0x1e8>)
    4b4a:	4694      	mov	ip, r2
    4b4c:	2200      	movs	r2, #0
    4b4e:	4463      	add	r3, ip
    4b50:	0038      	movs	r0, r7
    4b52:	4068      	eors	r0, r5
    4b54:	4684      	mov	ip, r0
    4b56:	9002      	str	r0, [sp, #8]
    4b58:	1ae4      	subs	r4, r4, r3
    4b5a:	4316      	orrs	r6, r2
    4b5c:	2e0f      	cmp	r6, #15
    4b5e:	d900      	bls.n	4b62 <__aeabi_ddiv+0x8e>
    4b60:	e0b4      	b.n	4ccc <__aeabi_ddiv+0x1f8>
    4b62:	4b57      	ldr	r3, [pc, #348]	; (4cc0 <__aeabi_ddiv+0x1ec>)
    4b64:	00b6      	lsls	r6, r6, #2
    4b66:	599b      	ldr	r3, [r3, r6]
    4b68:	469f      	mov	pc, r3
    4b6a:	0003      	movs	r3, r0
    4b6c:	4333      	orrs	r3, r6
    4b6e:	4699      	mov	r9, r3
    4b70:	d16c      	bne.n	4c4c <__aeabi_ddiv+0x178>
    4b72:	2300      	movs	r3, #0
    4b74:	4698      	mov	r8, r3
    4b76:	3302      	adds	r3, #2
    4b78:	2608      	movs	r6, #8
    4b7a:	9303      	str	r3, [sp, #12]
    4b7c:	e7ce      	b.n	4b1c <__aeabi_ddiv+0x48>
    4b7e:	46cb      	mov	fp, r9
    4b80:	4641      	mov	r1, r8
    4b82:	9a03      	ldr	r2, [sp, #12]
    4b84:	9701      	str	r7, [sp, #4]
    4b86:	2a02      	cmp	r2, #2
    4b88:	d165      	bne.n	4c56 <__aeabi_ddiv+0x182>
    4b8a:	9b01      	ldr	r3, [sp, #4]
    4b8c:	4c4a      	ldr	r4, [pc, #296]	; (4cb8 <__aeabi_ddiv+0x1e4>)
    4b8e:	469c      	mov	ip, r3
    4b90:	2300      	movs	r3, #0
    4b92:	2200      	movs	r2, #0
    4b94:	4698      	mov	r8, r3
    4b96:	e06b      	b.n	4c70 <__aeabi_ddiv+0x19c>
    4b98:	0003      	movs	r3, r0
    4b9a:	4333      	orrs	r3, r6
    4b9c:	4699      	mov	r9, r3
    4b9e:	d04e      	beq.n	4c3e <__aeabi_ddiv+0x16a>
    4ba0:	2e00      	cmp	r6, #0
    4ba2:	d100      	bne.n	4ba6 <__aeabi_ddiv+0xd2>
    4ba4:	e1bc      	b.n	4f20 <__aeabi_ddiv+0x44c>
    4ba6:	0030      	movs	r0, r6
    4ba8:	f001 fb08 	bl	61bc <__clzsi2>
    4bac:	0003      	movs	r3, r0
    4bae:	3b0b      	subs	r3, #11
    4bb0:	2b1c      	cmp	r3, #28
    4bb2:	dd00      	ble.n	4bb6 <__aeabi_ddiv+0xe2>
    4bb4:	e1ac      	b.n	4f10 <__aeabi_ddiv+0x43c>
    4bb6:	221d      	movs	r2, #29
    4bb8:	1ad3      	subs	r3, r2, r3
    4bba:	465a      	mov	r2, fp
    4bbc:	0001      	movs	r1, r0
    4bbe:	40da      	lsrs	r2, r3
    4bc0:	3908      	subs	r1, #8
    4bc2:	408e      	lsls	r6, r1
    4bc4:	0013      	movs	r3, r2
    4bc6:	4333      	orrs	r3, r6
    4bc8:	4699      	mov	r9, r3
    4bca:	465b      	mov	r3, fp
    4bcc:	408b      	lsls	r3, r1
    4bce:	4698      	mov	r8, r3
    4bd0:	2300      	movs	r3, #0
    4bd2:	4c3c      	ldr	r4, [pc, #240]	; (4cc4 <__aeabi_ddiv+0x1f0>)
    4bd4:	2600      	movs	r6, #0
    4bd6:	1a24      	subs	r4, r4, r0
    4bd8:	9303      	str	r3, [sp, #12]
    4bda:	e79f      	b.n	4b1c <__aeabi_ddiv+0x48>
    4bdc:	4651      	mov	r1, sl
    4bde:	465a      	mov	r2, fp
    4be0:	4311      	orrs	r1, r2
    4be2:	d129      	bne.n	4c38 <__aeabi_ddiv+0x164>
    4be4:	2200      	movs	r2, #0
    4be6:	4693      	mov	fp, r2
    4be8:	3202      	adds	r2, #2
    4bea:	e7b1      	b.n	4b50 <__aeabi_ddiv+0x7c>
    4bec:	4659      	mov	r1, fp
    4bee:	4301      	orrs	r1, r0
    4bf0:	d01e      	beq.n	4c30 <__aeabi_ddiv+0x15c>
    4bf2:	465b      	mov	r3, fp
    4bf4:	2b00      	cmp	r3, #0
    4bf6:	d100      	bne.n	4bfa <__aeabi_ddiv+0x126>
    4bf8:	e19e      	b.n	4f38 <__aeabi_ddiv+0x464>
    4bfa:	4658      	mov	r0, fp
    4bfc:	f001 fade 	bl	61bc <__clzsi2>
    4c00:	0003      	movs	r3, r0
    4c02:	3b0b      	subs	r3, #11
    4c04:	2b1c      	cmp	r3, #28
    4c06:	dd00      	ble.n	4c0a <__aeabi_ddiv+0x136>
    4c08:	e18f      	b.n	4f2a <__aeabi_ddiv+0x456>
    4c0a:	0002      	movs	r2, r0
    4c0c:	4659      	mov	r1, fp
    4c0e:	3a08      	subs	r2, #8
    4c10:	4091      	lsls	r1, r2
    4c12:	468b      	mov	fp, r1
    4c14:	211d      	movs	r1, #29
    4c16:	1acb      	subs	r3, r1, r3
    4c18:	4651      	mov	r1, sl
    4c1a:	40d9      	lsrs	r1, r3
    4c1c:	000b      	movs	r3, r1
    4c1e:	4659      	mov	r1, fp
    4c20:	430b      	orrs	r3, r1
    4c22:	4651      	mov	r1, sl
    4c24:	469b      	mov	fp, r3
    4c26:	4091      	lsls	r1, r2
    4c28:	4b26      	ldr	r3, [pc, #152]	; (4cc4 <__aeabi_ddiv+0x1f0>)
    4c2a:	2200      	movs	r2, #0
    4c2c:	1a1b      	subs	r3, r3, r0
    4c2e:	e78f      	b.n	4b50 <__aeabi_ddiv+0x7c>
    4c30:	2300      	movs	r3, #0
    4c32:	2201      	movs	r2, #1
    4c34:	469b      	mov	fp, r3
    4c36:	e78b      	b.n	4b50 <__aeabi_ddiv+0x7c>
    4c38:	4651      	mov	r1, sl
    4c3a:	2203      	movs	r2, #3
    4c3c:	e788      	b.n	4b50 <__aeabi_ddiv+0x7c>
    4c3e:	2300      	movs	r3, #0
    4c40:	4698      	mov	r8, r3
    4c42:	3301      	adds	r3, #1
    4c44:	2604      	movs	r6, #4
    4c46:	2400      	movs	r4, #0
    4c48:	9303      	str	r3, [sp, #12]
    4c4a:	e767      	b.n	4b1c <__aeabi_ddiv+0x48>
    4c4c:	2303      	movs	r3, #3
    4c4e:	46b1      	mov	r9, r6
    4c50:	9303      	str	r3, [sp, #12]
    4c52:	260c      	movs	r6, #12
    4c54:	e762      	b.n	4b1c <__aeabi_ddiv+0x48>
    4c56:	2a03      	cmp	r2, #3
    4c58:	d100      	bne.n	4c5c <__aeabi_ddiv+0x188>
    4c5a:	e25c      	b.n	5116 <__aeabi_ddiv+0x642>
    4c5c:	9b01      	ldr	r3, [sp, #4]
    4c5e:	2a01      	cmp	r2, #1
    4c60:	d000      	beq.n	4c64 <__aeabi_ddiv+0x190>
    4c62:	e1e4      	b.n	502e <__aeabi_ddiv+0x55a>
    4c64:	4013      	ands	r3, r2
    4c66:	469c      	mov	ip, r3
    4c68:	2300      	movs	r3, #0
    4c6a:	2400      	movs	r4, #0
    4c6c:	2200      	movs	r2, #0
    4c6e:	4698      	mov	r8, r3
    4c70:	2100      	movs	r1, #0
    4c72:	0312      	lsls	r2, r2, #12
    4c74:	0b13      	lsrs	r3, r2, #12
    4c76:	0d0a      	lsrs	r2, r1, #20
    4c78:	0512      	lsls	r2, r2, #20
    4c7a:	431a      	orrs	r2, r3
    4c7c:	0523      	lsls	r3, r4, #20
    4c7e:	4c12      	ldr	r4, [pc, #72]	; (4cc8 <__aeabi_ddiv+0x1f4>)
    4c80:	4640      	mov	r0, r8
    4c82:	4022      	ands	r2, r4
    4c84:	4313      	orrs	r3, r2
    4c86:	4662      	mov	r2, ip
    4c88:	005b      	lsls	r3, r3, #1
    4c8a:	07d2      	lsls	r2, r2, #31
    4c8c:	085b      	lsrs	r3, r3, #1
    4c8e:	4313      	orrs	r3, r2
    4c90:	0019      	movs	r1, r3
    4c92:	b007      	add	sp, #28
    4c94:	bc3c      	pop	{r2, r3, r4, r5}
    4c96:	4690      	mov	r8, r2
    4c98:	4699      	mov	r9, r3
    4c9a:	46a2      	mov	sl, r4
    4c9c:	46ab      	mov	fp, r5
    4c9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4ca0:	2300      	movs	r3, #0
    4ca2:	2280      	movs	r2, #128	; 0x80
    4ca4:	469c      	mov	ip, r3
    4ca6:	0312      	lsls	r2, r2, #12
    4ca8:	4698      	mov	r8, r3
    4caa:	4c03      	ldr	r4, [pc, #12]	; (4cb8 <__aeabi_ddiv+0x1e4>)
    4cac:	e7e0      	b.n	4c70 <__aeabi_ddiv+0x19c>
    4cae:	2300      	movs	r3, #0
    4cb0:	4c01      	ldr	r4, [pc, #4]	; (4cb8 <__aeabi_ddiv+0x1e4>)
    4cb2:	2200      	movs	r2, #0
    4cb4:	4698      	mov	r8, r3
    4cb6:	e7db      	b.n	4c70 <__aeabi_ddiv+0x19c>
    4cb8:	000007ff 	.word	0x000007ff
    4cbc:	fffffc01 	.word	0xfffffc01
    4cc0:	000063f8 	.word	0x000063f8
    4cc4:	fffffc0d 	.word	0xfffffc0d
    4cc8:	800fffff 	.word	0x800fffff
    4ccc:	45d9      	cmp	r9, fp
    4cce:	d900      	bls.n	4cd2 <__aeabi_ddiv+0x1fe>
    4cd0:	e139      	b.n	4f46 <__aeabi_ddiv+0x472>
    4cd2:	d100      	bne.n	4cd6 <__aeabi_ddiv+0x202>
    4cd4:	e134      	b.n	4f40 <__aeabi_ddiv+0x46c>
    4cd6:	2300      	movs	r3, #0
    4cd8:	4646      	mov	r6, r8
    4cda:	464d      	mov	r5, r9
    4cdc:	469a      	mov	sl, r3
    4cde:	3c01      	subs	r4, #1
    4ce0:	465b      	mov	r3, fp
    4ce2:	0e0a      	lsrs	r2, r1, #24
    4ce4:	021b      	lsls	r3, r3, #8
    4ce6:	431a      	orrs	r2, r3
    4ce8:	020b      	lsls	r3, r1, #8
    4cea:	0c17      	lsrs	r7, r2, #16
    4cec:	9303      	str	r3, [sp, #12]
    4cee:	0413      	lsls	r3, r2, #16
    4cf0:	0c1b      	lsrs	r3, r3, #16
    4cf2:	0039      	movs	r1, r7
    4cf4:	0028      	movs	r0, r5
    4cf6:	4690      	mov	r8, r2
    4cf8:	9301      	str	r3, [sp, #4]
    4cfa:	f7ff f989 	bl	4010 <__udivsi3>
    4cfe:	0002      	movs	r2, r0
    4d00:	9b01      	ldr	r3, [sp, #4]
    4d02:	4683      	mov	fp, r0
    4d04:	435a      	muls	r2, r3
    4d06:	0028      	movs	r0, r5
    4d08:	0039      	movs	r1, r7
    4d0a:	4691      	mov	r9, r2
    4d0c:	f7ff fa06 	bl	411c <__aeabi_uidivmod>
    4d10:	0c35      	lsrs	r5, r6, #16
    4d12:	0409      	lsls	r1, r1, #16
    4d14:	430d      	orrs	r5, r1
    4d16:	45a9      	cmp	r9, r5
    4d18:	d90d      	bls.n	4d36 <__aeabi_ddiv+0x262>
    4d1a:	465b      	mov	r3, fp
    4d1c:	4445      	add	r5, r8
    4d1e:	3b01      	subs	r3, #1
    4d20:	45a8      	cmp	r8, r5
    4d22:	d900      	bls.n	4d26 <__aeabi_ddiv+0x252>
    4d24:	e13a      	b.n	4f9c <__aeabi_ddiv+0x4c8>
    4d26:	45a9      	cmp	r9, r5
    4d28:	d800      	bhi.n	4d2c <__aeabi_ddiv+0x258>
    4d2a:	e137      	b.n	4f9c <__aeabi_ddiv+0x4c8>
    4d2c:	2302      	movs	r3, #2
    4d2e:	425b      	negs	r3, r3
    4d30:	469c      	mov	ip, r3
    4d32:	4445      	add	r5, r8
    4d34:	44e3      	add	fp, ip
    4d36:	464b      	mov	r3, r9
    4d38:	1aeb      	subs	r3, r5, r3
    4d3a:	0039      	movs	r1, r7
    4d3c:	0018      	movs	r0, r3
    4d3e:	9304      	str	r3, [sp, #16]
    4d40:	f7ff f966 	bl	4010 <__udivsi3>
    4d44:	9b01      	ldr	r3, [sp, #4]
    4d46:	0005      	movs	r5, r0
    4d48:	4343      	muls	r3, r0
    4d4a:	0039      	movs	r1, r7
    4d4c:	9804      	ldr	r0, [sp, #16]
    4d4e:	4699      	mov	r9, r3
    4d50:	f7ff f9e4 	bl	411c <__aeabi_uidivmod>
    4d54:	0433      	lsls	r3, r6, #16
    4d56:	0409      	lsls	r1, r1, #16
    4d58:	0c1b      	lsrs	r3, r3, #16
    4d5a:	430b      	orrs	r3, r1
    4d5c:	4599      	cmp	r9, r3
    4d5e:	d909      	bls.n	4d74 <__aeabi_ddiv+0x2a0>
    4d60:	4443      	add	r3, r8
    4d62:	1e6a      	subs	r2, r5, #1
    4d64:	4598      	cmp	r8, r3
    4d66:	d900      	bls.n	4d6a <__aeabi_ddiv+0x296>
    4d68:	e11a      	b.n	4fa0 <__aeabi_ddiv+0x4cc>
    4d6a:	4599      	cmp	r9, r3
    4d6c:	d800      	bhi.n	4d70 <__aeabi_ddiv+0x29c>
    4d6e:	e117      	b.n	4fa0 <__aeabi_ddiv+0x4cc>
    4d70:	3d02      	subs	r5, #2
    4d72:	4443      	add	r3, r8
    4d74:	464a      	mov	r2, r9
    4d76:	1a9b      	subs	r3, r3, r2
    4d78:	465a      	mov	r2, fp
    4d7a:	0412      	lsls	r2, r2, #16
    4d7c:	432a      	orrs	r2, r5
    4d7e:	9903      	ldr	r1, [sp, #12]
    4d80:	4693      	mov	fp, r2
    4d82:	0c10      	lsrs	r0, r2, #16
    4d84:	0c0a      	lsrs	r2, r1, #16
    4d86:	4691      	mov	r9, r2
    4d88:	0409      	lsls	r1, r1, #16
    4d8a:	465a      	mov	r2, fp
    4d8c:	0c09      	lsrs	r1, r1, #16
    4d8e:	464e      	mov	r6, r9
    4d90:	000d      	movs	r5, r1
    4d92:	0412      	lsls	r2, r2, #16
    4d94:	0c12      	lsrs	r2, r2, #16
    4d96:	4345      	muls	r5, r0
    4d98:	9105      	str	r1, [sp, #20]
    4d9a:	4351      	muls	r1, r2
    4d9c:	4372      	muls	r2, r6
    4d9e:	4370      	muls	r0, r6
    4da0:	1952      	adds	r2, r2, r5
    4da2:	0c0e      	lsrs	r6, r1, #16
    4da4:	18b2      	adds	r2, r6, r2
    4da6:	4295      	cmp	r5, r2
    4da8:	d903      	bls.n	4db2 <__aeabi_ddiv+0x2de>
    4daa:	2580      	movs	r5, #128	; 0x80
    4dac:	026d      	lsls	r5, r5, #9
    4dae:	46ac      	mov	ip, r5
    4db0:	4460      	add	r0, ip
    4db2:	0c15      	lsrs	r5, r2, #16
    4db4:	0409      	lsls	r1, r1, #16
    4db6:	0412      	lsls	r2, r2, #16
    4db8:	0c09      	lsrs	r1, r1, #16
    4dba:	1828      	adds	r0, r5, r0
    4dbc:	1852      	adds	r2, r2, r1
    4dbe:	4283      	cmp	r3, r0
    4dc0:	d200      	bcs.n	4dc4 <__aeabi_ddiv+0x2f0>
    4dc2:	e0ce      	b.n	4f62 <__aeabi_ddiv+0x48e>
    4dc4:	d100      	bne.n	4dc8 <__aeabi_ddiv+0x2f4>
    4dc6:	e0c8      	b.n	4f5a <__aeabi_ddiv+0x486>
    4dc8:	1a1d      	subs	r5, r3, r0
    4dca:	4653      	mov	r3, sl
    4dcc:	1a9e      	subs	r6, r3, r2
    4dce:	45b2      	cmp	sl, r6
    4dd0:	4192      	sbcs	r2, r2
    4dd2:	4252      	negs	r2, r2
    4dd4:	1aab      	subs	r3, r5, r2
    4dd6:	469a      	mov	sl, r3
    4dd8:	4598      	cmp	r8, r3
    4dda:	d100      	bne.n	4dde <__aeabi_ddiv+0x30a>
    4ddc:	e117      	b.n	500e <__aeabi_ddiv+0x53a>
    4dde:	0039      	movs	r1, r7
    4de0:	0018      	movs	r0, r3
    4de2:	f7ff f915 	bl	4010 <__udivsi3>
    4de6:	9b01      	ldr	r3, [sp, #4]
    4de8:	0005      	movs	r5, r0
    4dea:	4343      	muls	r3, r0
    4dec:	0039      	movs	r1, r7
    4dee:	4650      	mov	r0, sl
    4df0:	9304      	str	r3, [sp, #16]
    4df2:	f7ff f993 	bl	411c <__aeabi_uidivmod>
    4df6:	9804      	ldr	r0, [sp, #16]
    4df8:	040b      	lsls	r3, r1, #16
    4dfa:	0c31      	lsrs	r1, r6, #16
    4dfc:	4319      	orrs	r1, r3
    4dfe:	4288      	cmp	r0, r1
    4e00:	d909      	bls.n	4e16 <__aeabi_ddiv+0x342>
    4e02:	4441      	add	r1, r8
    4e04:	1e6b      	subs	r3, r5, #1
    4e06:	4588      	cmp	r8, r1
    4e08:	d900      	bls.n	4e0c <__aeabi_ddiv+0x338>
    4e0a:	e107      	b.n	501c <__aeabi_ddiv+0x548>
    4e0c:	4288      	cmp	r0, r1
    4e0e:	d800      	bhi.n	4e12 <__aeabi_ddiv+0x33e>
    4e10:	e104      	b.n	501c <__aeabi_ddiv+0x548>
    4e12:	3d02      	subs	r5, #2
    4e14:	4441      	add	r1, r8
    4e16:	9b04      	ldr	r3, [sp, #16]
    4e18:	1acb      	subs	r3, r1, r3
    4e1a:	0018      	movs	r0, r3
    4e1c:	0039      	movs	r1, r7
    4e1e:	9304      	str	r3, [sp, #16]
    4e20:	f7ff f8f6 	bl	4010 <__udivsi3>
    4e24:	9b01      	ldr	r3, [sp, #4]
    4e26:	4682      	mov	sl, r0
    4e28:	4343      	muls	r3, r0
    4e2a:	0039      	movs	r1, r7
    4e2c:	9804      	ldr	r0, [sp, #16]
    4e2e:	9301      	str	r3, [sp, #4]
    4e30:	f7ff f974 	bl	411c <__aeabi_uidivmod>
    4e34:	9801      	ldr	r0, [sp, #4]
    4e36:	040b      	lsls	r3, r1, #16
    4e38:	0431      	lsls	r1, r6, #16
    4e3a:	0c09      	lsrs	r1, r1, #16
    4e3c:	4319      	orrs	r1, r3
    4e3e:	4288      	cmp	r0, r1
    4e40:	d90d      	bls.n	4e5e <__aeabi_ddiv+0x38a>
    4e42:	4653      	mov	r3, sl
    4e44:	4441      	add	r1, r8
    4e46:	3b01      	subs	r3, #1
    4e48:	4588      	cmp	r8, r1
    4e4a:	d900      	bls.n	4e4e <__aeabi_ddiv+0x37a>
    4e4c:	e0e8      	b.n	5020 <__aeabi_ddiv+0x54c>
    4e4e:	4288      	cmp	r0, r1
    4e50:	d800      	bhi.n	4e54 <__aeabi_ddiv+0x380>
    4e52:	e0e5      	b.n	5020 <__aeabi_ddiv+0x54c>
    4e54:	2302      	movs	r3, #2
    4e56:	425b      	negs	r3, r3
    4e58:	469c      	mov	ip, r3
    4e5a:	4441      	add	r1, r8
    4e5c:	44e2      	add	sl, ip
    4e5e:	9b01      	ldr	r3, [sp, #4]
    4e60:	042d      	lsls	r5, r5, #16
    4e62:	1ace      	subs	r6, r1, r3
    4e64:	4651      	mov	r1, sl
    4e66:	4329      	orrs	r1, r5
    4e68:	9d05      	ldr	r5, [sp, #20]
    4e6a:	464f      	mov	r7, r9
    4e6c:	002a      	movs	r2, r5
    4e6e:	040b      	lsls	r3, r1, #16
    4e70:	0c08      	lsrs	r0, r1, #16
    4e72:	0c1b      	lsrs	r3, r3, #16
    4e74:	435a      	muls	r2, r3
    4e76:	4345      	muls	r5, r0
    4e78:	437b      	muls	r3, r7
    4e7a:	4378      	muls	r0, r7
    4e7c:	195b      	adds	r3, r3, r5
    4e7e:	0c17      	lsrs	r7, r2, #16
    4e80:	18fb      	adds	r3, r7, r3
    4e82:	429d      	cmp	r5, r3
    4e84:	d903      	bls.n	4e8e <__aeabi_ddiv+0x3ba>
    4e86:	2580      	movs	r5, #128	; 0x80
    4e88:	026d      	lsls	r5, r5, #9
    4e8a:	46ac      	mov	ip, r5
    4e8c:	4460      	add	r0, ip
    4e8e:	0c1d      	lsrs	r5, r3, #16
    4e90:	0412      	lsls	r2, r2, #16
    4e92:	041b      	lsls	r3, r3, #16
    4e94:	0c12      	lsrs	r2, r2, #16
    4e96:	1828      	adds	r0, r5, r0
    4e98:	189b      	adds	r3, r3, r2
    4e9a:	4286      	cmp	r6, r0
    4e9c:	d200      	bcs.n	4ea0 <__aeabi_ddiv+0x3cc>
    4e9e:	e093      	b.n	4fc8 <__aeabi_ddiv+0x4f4>
    4ea0:	d100      	bne.n	4ea4 <__aeabi_ddiv+0x3d0>
    4ea2:	e08e      	b.n	4fc2 <__aeabi_ddiv+0x4ee>
    4ea4:	2301      	movs	r3, #1
    4ea6:	4319      	orrs	r1, r3
    4ea8:	4ba0      	ldr	r3, [pc, #640]	; (512c <__aeabi_ddiv+0x658>)
    4eaa:	18e3      	adds	r3, r4, r3
    4eac:	2b00      	cmp	r3, #0
    4eae:	dc00      	bgt.n	4eb2 <__aeabi_ddiv+0x3de>
    4eb0:	e099      	b.n	4fe6 <__aeabi_ddiv+0x512>
    4eb2:	074a      	lsls	r2, r1, #29
    4eb4:	d000      	beq.n	4eb8 <__aeabi_ddiv+0x3e4>
    4eb6:	e09e      	b.n	4ff6 <__aeabi_ddiv+0x522>
    4eb8:	465a      	mov	r2, fp
    4eba:	01d2      	lsls	r2, r2, #7
    4ebc:	d506      	bpl.n	4ecc <__aeabi_ddiv+0x3f8>
    4ebe:	465a      	mov	r2, fp
    4ec0:	4b9b      	ldr	r3, [pc, #620]	; (5130 <__aeabi_ddiv+0x65c>)
    4ec2:	401a      	ands	r2, r3
    4ec4:	2380      	movs	r3, #128	; 0x80
    4ec6:	4693      	mov	fp, r2
    4ec8:	00db      	lsls	r3, r3, #3
    4eca:	18e3      	adds	r3, r4, r3
    4ecc:	4a99      	ldr	r2, [pc, #612]	; (5134 <__aeabi_ddiv+0x660>)
    4ece:	4293      	cmp	r3, r2
    4ed0:	dd68      	ble.n	4fa4 <__aeabi_ddiv+0x4d0>
    4ed2:	2301      	movs	r3, #1
    4ed4:	9a02      	ldr	r2, [sp, #8]
    4ed6:	4c98      	ldr	r4, [pc, #608]	; (5138 <__aeabi_ddiv+0x664>)
    4ed8:	401a      	ands	r2, r3
    4eda:	2300      	movs	r3, #0
    4edc:	4694      	mov	ip, r2
    4ede:	4698      	mov	r8, r3
    4ee0:	2200      	movs	r2, #0
    4ee2:	e6c5      	b.n	4c70 <__aeabi_ddiv+0x19c>
    4ee4:	2280      	movs	r2, #128	; 0x80
    4ee6:	464b      	mov	r3, r9
    4ee8:	0312      	lsls	r2, r2, #12
    4eea:	4213      	tst	r3, r2
    4eec:	d00a      	beq.n	4f04 <__aeabi_ddiv+0x430>
    4eee:	465b      	mov	r3, fp
    4ef0:	4213      	tst	r3, r2
    4ef2:	d106      	bne.n	4f02 <__aeabi_ddiv+0x42e>
    4ef4:	431a      	orrs	r2, r3
    4ef6:	0312      	lsls	r2, r2, #12
    4ef8:	0b12      	lsrs	r2, r2, #12
    4efa:	46ac      	mov	ip, r5
    4efc:	4688      	mov	r8, r1
    4efe:	4c8e      	ldr	r4, [pc, #568]	; (5138 <__aeabi_ddiv+0x664>)
    4f00:	e6b6      	b.n	4c70 <__aeabi_ddiv+0x19c>
    4f02:	464b      	mov	r3, r9
    4f04:	431a      	orrs	r2, r3
    4f06:	0312      	lsls	r2, r2, #12
    4f08:	0b12      	lsrs	r2, r2, #12
    4f0a:	46bc      	mov	ip, r7
    4f0c:	4c8a      	ldr	r4, [pc, #552]	; (5138 <__aeabi_ddiv+0x664>)
    4f0e:	e6af      	b.n	4c70 <__aeabi_ddiv+0x19c>
    4f10:	0003      	movs	r3, r0
    4f12:	465a      	mov	r2, fp
    4f14:	3b28      	subs	r3, #40	; 0x28
    4f16:	409a      	lsls	r2, r3
    4f18:	2300      	movs	r3, #0
    4f1a:	4691      	mov	r9, r2
    4f1c:	4698      	mov	r8, r3
    4f1e:	e657      	b.n	4bd0 <__aeabi_ddiv+0xfc>
    4f20:	4658      	mov	r0, fp
    4f22:	f001 f94b 	bl	61bc <__clzsi2>
    4f26:	3020      	adds	r0, #32
    4f28:	e640      	b.n	4bac <__aeabi_ddiv+0xd8>
    4f2a:	0003      	movs	r3, r0
    4f2c:	4652      	mov	r2, sl
    4f2e:	3b28      	subs	r3, #40	; 0x28
    4f30:	409a      	lsls	r2, r3
    4f32:	2100      	movs	r1, #0
    4f34:	4693      	mov	fp, r2
    4f36:	e677      	b.n	4c28 <__aeabi_ddiv+0x154>
    4f38:	f001 f940 	bl	61bc <__clzsi2>
    4f3c:	3020      	adds	r0, #32
    4f3e:	e65f      	b.n	4c00 <__aeabi_ddiv+0x12c>
    4f40:	4588      	cmp	r8, r1
    4f42:	d200      	bcs.n	4f46 <__aeabi_ddiv+0x472>
    4f44:	e6c7      	b.n	4cd6 <__aeabi_ddiv+0x202>
    4f46:	464b      	mov	r3, r9
    4f48:	07de      	lsls	r6, r3, #31
    4f4a:	085d      	lsrs	r5, r3, #1
    4f4c:	4643      	mov	r3, r8
    4f4e:	085b      	lsrs	r3, r3, #1
    4f50:	431e      	orrs	r6, r3
    4f52:	4643      	mov	r3, r8
    4f54:	07db      	lsls	r3, r3, #31
    4f56:	469a      	mov	sl, r3
    4f58:	e6c2      	b.n	4ce0 <__aeabi_ddiv+0x20c>
    4f5a:	2500      	movs	r5, #0
    4f5c:	4592      	cmp	sl, r2
    4f5e:	d300      	bcc.n	4f62 <__aeabi_ddiv+0x48e>
    4f60:	e733      	b.n	4dca <__aeabi_ddiv+0x2f6>
    4f62:	9e03      	ldr	r6, [sp, #12]
    4f64:	4659      	mov	r1, fp
    4f66:	46b4      	mov	ip, r6
    4f68:	44e2      	add	sl, ip
    4f6a:	45b2      	cmp	sl, r6
    4f6c:	41ad      	sbcs	r5, r5
    4f6e:	426d      	negs	r5, r5
    4f70:	4445      	add	r5, r8
    4f72:	18eb      	adds	r3, r5, r3
    4f74:	3901      	subs	r1, #1
    4f76:	4598      	cmp	r8, r3
    4f78:	d207      	bcs.n	4f8a <__aeabi_ddiv+0x4b6>
    4f7a:	4298      	cmp	r0, r3
    4f7c:	d900      	bls.n	4f80 <__aeabi_ddiv+0x4ac>
    4f7e:	e07f      	b.n	5080 <__aeabi_ddiv+0x5ac>
    4f80:	d100      	bne.n	4f84 <__aeabi_ddiv+0x4b0>
    4f82:	e0bc      	b.n	50fe <__aeabi_ddiv+0x62a>
    4f84:	1a1d      	subs	r5, r3, r0
    4f86:	468b      	mov	fp, r1
    4f88:	e71f      	b.n	4dca <__aeabi_ddiv+0x2f6>
    4f8a:	4598      	cmp	r8, r3
    4f8c:	d1fa      	bne.n	4f84 <__aeabi_ddiv+0x4b0>
    4f8e:	9d03      	ldr	r5, [sp, #12]
    4f90:	4555      	cmp	r5, sl
    4f92:	d9f2      	bls.n	4f7a <__aeabi_ddiv+0x4a6>
    4f94:	4643      	mov	r3, r8
    4f96:	468b      	mov	fp, r1
    4f98:	1a1d      	subs	r5, r3, r0
    4f9a:	e716      	b.n	4dca <__aeabi_ddiv+0x2f6>
    4f9c:	469b      	mov	fp, r3
    4f9e:	e6ca      	b.n	4d36 <__aeabi_ddiv+0x262>
    4fa0:	0015      	movs	r5, r2
    4fa2:	e6e7      	b.n	4d74 <__aeabi_ddiv+0x2a0>
    4fa4:	465a      	mov	r2, fp
    4fa6:	08c9      	lsrs	r1, r1, #3
    4fa8:	0752      	lsls	r2, r2, #29
    4faa:	430a      	orrs	r2, r1
    4fac:	055b      	lsls	r3, r3, #21
    4fae:	4690      	mov	r8, r2
    4fb0:	0d5c      	lsrs	r4, r3, #21
    4fb2:	465a      	mov	r2, fp
    4fb4:	2301      	movs	r3, #1
    4fb6:	9902      	ldr	r1, [sp, #8]
    4fb8:	0252      	lsls	r2, r2, #9
    4fba:	4019      	ands	r1, r3
    4fbc:	0b12      	lsrs	r2, r2, #12
    4fbe:	468c      	mov	ip, r1
    4fc0:	e656      	b.n	4c70 <__aeabi_ddiv+0x19c>
    4fc2:	2b00      	cmp	r3, #0
    4fc4:	d100      	bne.n	4fc8 <__aeabi_ddiv+0x4f4>
    4fc6:	e76f      	b.n	4ea8 <__aeabi_ddiv+0x3d4>
    4fc8:	4446      	add	r6, r8
    4fca:	1e4a      	subs	r2, r1, #1
    4fcc:	45b0      	cmp	r8, r6
    4fce:	d929      	bls.n	5024 <__aeabi_ddiv+0x550>
    4fd0:	0011      	movs	r1, r2
    4fd2:	4286      	cmp	r6, r0
    4fd4:	d000      	beq.n	4fd8 <__aeabi_ddiv+0x504>
    4fd6:	e765      	b.n	4ea4 <__aeabi_ddiv+0x3d0>
    4fd8:	9a03      	ldr	r2, [sp, #12]
    4fda:	4293      	cmp	r3, r2
    4fdc:	d000      	beq.n	4fe0 <__aeabi_ddiv+0x50c>
    4fde:	e761      	b.n	4ea4 <__aeabi_ddiv+0x3d0>
    4fe0:	e762      	b.n	4ea8 <__aeabi_ddiv+0x3d4>
    4fe2:	2101      	movs	r1, #1
    4fe4:	4249      	negs	r1, r1
    4fe6:	2001      	movs	r0, #1
    4fe8:	1ac2      	subs	r2, r0, r3
    4fea:	2a38      	cmp	r2, #56	; 0x38
    4fec:	dd21      	ble.n	5032 <__aeabi_ddiv+0x55e>
    4fee:	9b02      	ldr	r3, [sp, #8]
    4ff0:	4003      	ands	r3, r0
    4ff2:	469c      	mov	ip, r3
    4ff4:	e638      	b.n	4c68 <__aeabi_ddiv+0x194>
    4ff6:	220f      	movs	r2, #15
    4ff8:	400a      	ands	r2, r1
    4ffa:	2a04      	cmp	r2, #4
    4ffc:	d100      	bne.n	5000 <__aeabi_ddiv+0x52c>
    4ffe:	e75b      	b.n	4eb8 <__aeabi_ddiv+0x3e4>
    5000:	000a      	movs	r2, r1
    5002:	1d11      	adds	r1, r2, #4
    5004:	4291      	cmp	r1, r2
    5006:	4192      	sbcs	r2, r2
    5008:	4252      	negs	r2, r2
    500a:	4493      	add	fp, r2
    500c:	e754      	b.n	4eb8 <__aeabi_ddiv+0x3e4>
    500e:	4b47      	ldr	r3, [pc, #284]	; (512c <__aeabi_ddiv+0x658>)
    5010:	18e3      	adds	r3, r4, r3
    5012:	2b00      	cmp	r3, #0
    5014:	dde5      	ble.n	4fe2 <__aeabi_ddiv+0x50e>
    5016:	2201      	movs	r2, #1
    5018:	4252      	negs	r2, r2
    501a:	e7f2      	b.n	5002 <__aeabi_ddiv+0x52e>
    501c:	001d      	movs	r5, r3
    501e:	e6fa      	b.n	4e16 <__aeabi_ddiv+0x342>
    5020:	469a      	mov	sl, r3
    5022:	e71c      	b.n	4e5e <__aeabi_ddiv+0x38a>
    5024:	42b0      	cmp	r0, r6
    5026:	d839      	bhi.n	509c <__aeabi_ddiv+0x5c8>
    5028:	d06e      	beq.n	5108 <__aeabi_ddiv+0x634>
    502a:	0011      	movs	r1, r2
    502c:	e73a      	b.n	4ea4 <__aeabi_ddiv+0x3d0>
    502e:	9302      	str	r3, [sp, #8]
    5030:	e73a      	b.n	4ea8 <__aeabi_ddiv+0x3d4>
    5032:	2a1f      	cmp	r2, #31
    5034:	dc3c      	bgt.n	50b0 <__aeabi_ddiv+0x5dc>
    5036:	2320      	movs	r3, #32
    5038:	1a9b      	subs	r3, r3, r2
    503a:	000c      	movs	r4, r1
    503c:	4658      	mov	r0, fp
    503e:	4099      	lsls	r1, r3
    5040:	4098      	lsls	r0, r3
    5042:	1e4b      	subs	r3, r1, #1
    5044:	4199      	sbcs	r1, r3
    5046:	465b      	mov	r3, fp
    5048:	40d4      	lsrs	r4, r2
    504a:	40d3      	lsrs	r3, r2
    504c:	4320      	orrs	r0, r4
    504e:	4308      	orrs	r0, r1
    5050:	001a      	movs	r2, r3
    5052:	0743      	lsls	r3, r0, #29
    5054:	d009      	beq.n	506a <__aeabi_ddiv+0x596>
    5056:	230f      	movs	r3, #15
    5058:	4003      	ands	r3, r0
    505a:	2b04      	cmp	r3, #4
    505c:	d005      	beq.n	506a <__aeabi_ddiv+0x596>
    505e:	0001      	movs	r1, r0
    5060:	1d08      	adds	r0, r1, #4
    5062:	4288      	cmp	r0, r1
    5064:	419b      	sbcs	r3, r3
    5066:	425b      	negs	r3, r3
    5068:	18d2      	adds	r2, r2, r3
    506a:	0213      	lsls	r3, r2, #8
    506c:	d53a      	bpl.n	50e4 <__aeabi_ddiv+0x610>
    506e:	2301      	movs	r3, #1
    5070:	9a02      	ldr	r2, [sp, #8]
    5072:	2401      	movs	r4, #1
    5074:	401a      	ands	r2, r3
    5076:	2300      	movs	r3, #0
    5078:	4694      	mov	ip, r2
    507a:	4698      	mov	r8, r3
    507c:	2200      	movs	r2, #0
    507e:	e5f7      	b.n	4c70 <__aeabi_ddiv+0x19c>
    5080:	2102      	movs	r1, #2
    5082:	4249      	negs	r1, r1
    5084:	468c      	mov	ip, r1
    5086:	9d03      	ldr	r5, [sp, #12]
    5088:	44e3      	add	fp, ip
    508a:	46ac      	mov	ip, r5
    508c:	44e2      	add	sl, ip
    508e:	45aa      	cmp	sl, r5
    5090:	41ad      	sbcs	r5, r5
    5092:	426d      	negs	r5, r5
    5094:	4445      	add	r5, r8
    5096:	18ed      	adds	r5, r5, r3
    5098:	1a2d      	subs	r5, r5, r0
    509a:	e696      	b.n	4dca <__aeabi_ddiv+0x2f6>
    509c:	1e8a      	subs	r2, r1, #2
    509e:	9903      	ldr	r1, [sp, #12]
    50a0:	004d      	lsls	r5, r1, #1
    50a2:	428d      	cmp	r5, r1
    50a4:	4189      	sbcs	r1, r1
    50a6:	4249      	negs	r1, r1
    50a8:	4441      	add	r1, r8
    50aa:	1876      	adds	r6, r6, r1
    50ac:	9503      	str	r5, [sp, #12]
    50ae:	e78f      	b.n	4fd0 <__aeabi_ddiv+0x4fc>
    50b0:	201f      	movs	r0, #31
    50b2:	4240      	negs	r0, r0
    50b4:	1ac3      	subs	r3, r0, r3
    50b6:	4658      	mov	r0, fp
    50b8:	40d8      	lsrs	r0, r3
    50ba:	0003      	movs	r3, r0
    50bc:	2a20      	cmp	r2, #32
    50be:	d028      	beq.n	5112 <__aeabi_ddiv+0x63e>
    50c0:	2040      	movs	r0, #64	; 0x40
    50c2:	465d      	mov	r5, fp
    50c4:	1a82      	subs	r2, r0, r2
    50c6:	4095      	lsls	r5, r2
    50c8:	4329      	orrs	r1, r5
    50ca:	1e4a      	subs	r2, r1, #1
    50cc:	4191      	sbcs	r1, r2
    50ce:	4319      	orrs	r1, r3
    50d0:	2307      	movs	r3, #7
    50d2:	2200      	movs	r2, #0
    50d4:	400b      	ands	r3, r1
    50d6:	d009      	beq.n	50ec <__aeabi_ddiv+0x618>
    50d8:	230f      	movs	r3, #15
    50da:	2200      	movs	r2, #0
    50dc:	400b      	ands	r3, r1
    50de:	0008      	movs	r0, r1
    50e0:	2b04      	cmp	r3, #4
    50e2:	d1bd      	bne.n	5060 <__aeabi_ddiv+0x58c>
    50e4:	0001      	movs	r1, r0
    50e6:	0753      	lsls	r3, r2, #29
    50e8:	0252      	lsls	r2, r2, #9
    50ea:	0b12      	lsrs	r2, r2, #12
    50ec:	08c9      	lsrs	r1, r1, #3
    50ee:	4319      	orrs	r1, r3
    50f0:	2301      	movs	r3, #1
    50f2:	4688      	mov	r8, r1
    50f4:	9902      	ldr	r1, [sp, #8]
    50f6:	2400      	movs	r4, #0
    50f8:	4019      	ands	r1, r3
    50fa:	468c      	mov	ip, r1
    50fc:	e5b8      	b.n	4c70 <__aeabi_ddiv+0x19c>
    50fe:	4552      	cmp	r2, sl
    5100:	d8be      	bhi.n	5080 <__aeabi_ddiv+0x5ac>
    5102:	468b      	mov	fp, r1
    5104:	2500      	movs	r5, #0
    5106:	e660      	b.n	4dca <__aeabi_ddiv+0x2f6>
    5108:	9d03      	ldr	r5, [sp, #12]
    510a:	429d      	cmp	r5, r3
    510c:	d3c6      	bcc.n	509c <__aeabi_ddiv+0x5c8>
    510e:	0011      	movs	r1, r2
    5110:	e762      	b.n	4fd8 <__aeabi_ddiv+0x504>
    5112:	2500      	movs	r5, #0
    5114:	e7d8      	b.n	50c8 <__aeabi_ddiv+0x5f4>
    5116:	2280      	movs	r2, #128	; 0x80
    5118:	465b      	mov	r3, fp
    511a:	0312      	lsls	r2, r2, #12
    511c:	431a      	orrs	r2, r3
    511e:	9b01      	ldr	r3, [sp, #4]
    5120:	0312      	lsls	r2, r2, #12
    5122:	0b12      	lsrs	r2, r2, #12
    5124:	469c      	mov	ip, r3
    5126:	4688      	mov	r8, r1
    5128:	4c03      	ldr	r4, [pc, #12]	; (5138 <__aeabi_ddiv+0x664>)
    512a:	e5a1      	b.n	4c70 <__aeabi_ddiv+0x19c>
    512c:	000003ff 	.word	0x000003ff
    5130:	feffffff 	.word	0xfeffffff
    5134:	000007fe 	.word	0x000007fe
    5138:	000007ff 	.word	0x000007ff

0000513c <__eqdf2>:
    513c:	b5f0      	push	{r4, r5, r6, r7, lr}
    513e:	464f      	mov	r7, r9
    5140:	4646      	mov	r6, r8
    5142:	46d6      	mov	lr, sl
    5144:	005c      	lsls	r4, r3, #1
    5146:	b5c0      	push	{r6, r7, lr}
    5148:	031f      	lsls	r7, r3, #12
    514a:	0fdb      	lsrs	r3, r3, #31
    514c:	469a      	mov	sl, r3
    514e:	4b17      	ldr	r3, [pc, #92]	; (51ac <__eqdf2+0x70>)
    5150:	030e      	lsls	r6, r1, #12
    5152:	004d      	lsls	r5, r1, #1
    5154:	4684      	mov	ip, r0
    5156:	4680      	mov	r8, r0
    5158:	0b36      	lsrs	r6, r6, #12
    515a:	0d6d      	lsrs	r5, r5, #21
    515c:	0fc9      	lsrs	r1, r1, #31
    515e:	4691      	mov	r9, r2
    5160:	0b3f      	lsrs	r7, r7, #12
    5162:	0d64      	lsrs	r4, r4, #21
    5164:	2001      	movs	r0, #1
    5166:	429d      	cmp	r5, r3
    5168:	d008      	beq.n	517c <__eqdf2+0x40>
    516a:	429c      	cmp	r4, r3
    516c:	d001      	beq.n	5172 <__eqdf2+0x36>
    516e:	42a5      	cmp	r5, r4
    5170:	d00b      	beq.n	518a <__eqdf2+0x4e>
    5172:	bc1c      	pop	{r2, r3, r4}
    5174:	4690      	mov	r8, r2
    5176:	4699      	mov	r9, r3
    5178:	46a2      	mov	sl, r4
    517a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    517c:	4663      	mov	r3, ip
    517e:	4333      	orrs	r3, r6
    5180:	d1f7      	bne.n	5172 <__eqdf2+0x36>
    5182:	42ac      	cmp	r4, r5
    5184:	d1f5      	bne.n	5172 <__eqdf2+0x36>
    5186:	433a      	orrs	r2, r7
    5188:	d1f3      	bne.n	5172 <__eqdf2+0x36>
    518a:	2001      	movs	r0, #1
    518c:	42be      	cmp	r6, r7
    518e:	d1f0      	bne.n	5172 <__eqdf2+0x36>
    5190:	45c8      	cmp	r8, r9
    5192:	d1ee      	bne.n	5172 <__eqdf2+0x36>
    5194:	4551      	cmp	r1, sl
    5196:	d007      	beq.n	51a8 <__eqdf2+0x6c>
    5198:	2d00      	cmp	r5, #0
    519a:	d1ea      	bne.n	5172 <__eqdf2+0x36>
    519c:	4663      	mov	r3, ip
    519e:	431e      	orrs	r6, r3
    51a0:	0030      	movs	r0, r6
    51a2:	1e46      	subs	r6, r0, #1
    51a4:	41b0      	sbcs	r0, r6
    51a6:	e7e4      	b.n	5172 <__eqdf2+0x36>
    51a8:	2000      	movs	r0, #0
    51aa:	e7e2      	b.n	5172 <__eqdf2+0x36>
    51ac:	000007ff 	.word	0x000007ff

000051b0 <__gedf2>:
    51b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    51b2:	4645      	mov	r5, r8
    51b4:	46de      	mov	lr, fp
    51b6:	4657      	mov	r7, sl
    51b8:	464e      	mov	r6, r9
    51ba:	b5e0      	push	{r5, r6, r7, lr}
    51bc:	031f      	lsls	r7, r3, #12
    51be:	0b3d      	lsrs	r5, r7, #12
    51c0:	4f2c      	ldr	r7, [pc, #176]	; (5274 <__gedf2+0xc4>)
    51c2:	030e      	lsls	r6, r1, #12
    51c4:	004c      	lsls	r4, r1, #1
    51c6:	46ab      	mov	fp, r5
    51c8:	005d      	lsls	r5, r3, #1
    51ca:	4684      	mov	ip, r0
    51cc:	0b36      	lsrs	r6, r6, #12
    51ce:	0d64      	lsrs	r4, r4, #21
    51d0:	0fc9      	lsrs	r1, r1, #31
    51d2:	4690      	mov	r8, r2
    51d4:	0d6d      	lsrs	r5, r5, #21
    51d6:	0fdb      	lsrs	r3, r3, #31
    51d8:	42bc      	cmp	r4, r7
    51da:	d02a      	beq.n	5232 <__gedf2+0x82>
    51dc:	4f25      	ldr	r7, [pc, #148]	; (5274 <__gedf2+0xc4>)
    51de:	42bd      	cmp	r5, r7
    51e0:	d02d      	beq.n	523e <__gedf2+0x8e>
    51e2:	2c00      	cmp	r4, #0
    51e4:	d10f      	bne.n	5206 <__gedf2+0x56>
    51e6:	4330      	orrs	r0, r6
    51e8:	0007      	movs	r7, r0
    51ea:	4681      	mov	r9, r0
    51ec:	4278      	negs	r0, r7
    51ee:	4178      	adcs	r0, r7
    51f0:	b2c0      	uxtb	r0, r0
    51f2:	2d00      	cmp	r5, #0
    51f4:	d117      	bne.n	5226 <__gedf2+0x76>
    51f6:	465f      	mov	r7, fp
    51f8:	433a      	orrs	r2, r7
    51fa:	d114      	bne.n	5226 <__gedf2+0x76>
    51fc:	464b      	mov	r3, r9
    51fe:	2000      	movs	r0, #0
    5200:	2b00      	cmp	r3, #0
    5202:	d00a      	beq.n	521a <__gedf2+0x6a>
    5204:	e006      	b.n	5214 <__gedf2+0x64>
    5206:	2d00      	cmp	r5, #0
    5208:	d102      	bne.n	5210 <__gedf2+0x60>
    520a:	4658      	mov	r0, fp
    520c:	4302      	orrs	r2, r0
    520e:	d001      	beq.n	5214 <__gedf2+0x64>
    5210:	4299      	cmp	r1, r3
    5212:	d018      	beq.n	5246 <__gedf2+0x96>
    5214:	4248      	negs	r0, r1
    5216:	2101      	movs	r1, #1
    5218:	4308      	orrs	r0, r1
    521a:	bc3c      	pop	{r2, r3, r4, r5}
    521c:	4690      	mov	r8, r2
    521e:	4699      	mov	r9, r3
    5220:	46a2      	mov	sl, r4
    5222:	46ab      	mov	fp, r5
    5224:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5226:	2800      	cmp	r0, #0
    5228:	d0f2      	beq.n	5210 <__gedf2+0x60>
    522a:	2001      	movs	r0, #1
    522c:	3b01      	subs	r3, #1
    522e:	4318      	orrs	r0, r3
    5230:	e7f3      	b.n	521a <__gedf2+0x6a>
    5232:	0037      	movs	r7, r6
    5234:	4307      	orrs	r7, r0
    5236:	d0d1      	beq.n	51dc <__gedf2+0x2c>
    5238:	2002      	movs	r0, #2
    523a:	4240      	negs	r0, r0
    523c:	e7ed      	b.n	521a <__gedf2+0x6a>
    523e:	465f      	mov	r7, fp
    5240:	4317      	orrs	r7, r2
    5242:	d0ce      	beq.n	51e2 <__gedf2+0x32>
    5244:	e7f8      	b.n	5238 <__gedf2+0x88>
    5246:	42ac      	cmp	r4, r5
    5248:	dce4      	bgt.n	5214 <__gedf2+0x64>
    524a:	da03      	bge.n	5254 <__gedf2+0xa4>
    524c:	1e48      	subs	r0, r1, #1
    524e:	2101      	movs	r1, #1
    5250:	4308      	orrs	r0, r1
    5252:	e7e2      	b.n	521a <__gedf2+0x6a>
    5254:	455e      	cmp	r6, fp
    5256:	d8dd      	bhi.n	5214 <__gedf2+0x64>
    5258:	d006      	beq.n	5268 <__gedf2+0xb8>
    525a:	2000      	movs	r0, #0
    525c:	455e      	cmp	r6, fp
    525e:	d2dc      	bcs.n	521a <__gedf2+0x6a>
    5260:	2301      	movs	r3, #1
    5262:	1e48      	subs	r0, r1, #1
    5264:	4318      	orrs	r0, r3
    5266:	e7d8      	b.n	521a <__gedf2+0x6a>
    5268:	45c4      	cmp	ip, r8
    526a:	d8d3      	bhi.n	5214 <__gedf2+0x64>
    526c:	2000      	movs	r0, #0
    526e:	45c4      	cmp	ip, r8
    5270:	d3f6      	bcc.n	5260 <__gedf2+0xb0>
    5272:	e7d2      	b.n	521a <__gedf2+0x6a>
    5274:	000007ff 	.word	0x000007ff

00005278 <__ledf2>:
    5278:	b5f0      	push	{r4, r5, r6, r7, lr}
    527a:	464e      	mov	r6, r9
    527c:	4645      	mov	r5, r8
    527e:	46de      	mov	lr, fp
    5280:	4657      	mov	r7, sl
    5282:	005c      	lsls	r4, r3, #1
    5284:	b5e0      	push	{r5, r6, r7, lr}
    5286:	031f      	lsls	r7, r3, #12
    5288:	0fdb      	lsrs	r3, r3, #31
    528a:	4699      	mov	r9, r3
    528c:	4b2a      	ldr	r3, [pc, #168]	; (5338 <__ledf2+0xc0>)
    528e:	030e      	lsls	r6, r1, #12
    5290:	004d      	lsls	r5, r1, #1
    5292:	0fc9      	lsrs	r1, r1, #31
    5294:	4684      	mov	ip, r0
    5296:	0b36      	lsrs	r6, r6, #12
    5298:	0d6d      	lsrs	r5, r5, #21
    529a:	468b      	mov	fp, r1
    529c:	4690      	mov	r8, r2
    529e:	0b3f      	lsrs	r7, r7, #12
    52a0:	0d64      	lsrs	r4, r4, #21
    52a2:	429d      	cmp	r5, r3
    52a4:	d020      	beq.n	52e8 <__ledf2+0x70>
    52a6:	4b24      	ldr	r3, [pc, #144]	; (5338 <__ledf2+0xc0>)
    52a8:	429c      	cmp	r4, r3
    52aa:	d022      	beq.n	52f2 <__ledf2+0x7a>
    52ac:	2d00      	cmp	r5, #0
    52ae:	d112      	bne.n	52d6 <__ledf2+0x5e>
    52b0:	4330      	orrs	r0, r6
    52b2:	4243      	negs	r3, r0
    52b4:	4143      	adcs	r3, r0
    52b6:	b2db      	uxtb	r3, r3
    52b8:	2c00      	cmp	r4, #0
    52ba:	d01f      	beq.n	52fc <__ledf2+0x84>
    52bc:	2b00      	cmp	r3, #0
    52be:	d00c      	beq.n	52da <__ledf2+0x62>
    52c0:	464b      	mov	r3, r9
    52c2:	2001      	movs	r0, #1
    52c4:	3b01      	subs	r3, #1
    52c6:	4303      	orrs	r3, r0
    52c8:	0018      	movs	r0, r3
    52ca:	bc3c      	pop	{r2, r3, r4, r5}
    52cc:	4690      	mov	r8, r2
    52ce:	4699      	mov	r9, r3
    52d0:	46a2      	mov	sl, r4
    52d2:	46ab      	mov	fp, r5
    52d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    52d6:	2c00      	cmp	r4, #0
    52d8:	d016      	beq.n	5308 <__ledf2+0x90>
    52da:	45cb      	cmp	fp, r9
    52dc:	d017      	beq.n	530e <__ledf2+0x96>
    52de:	465b      	mov	r3, fp
    52e0:	4259      	negs	r1, r3
    52e2:	2301      	movs	r3, #1
    52e4:	430b      	orrs	r3, r1
    52e6:	e7ef      	b.n	52c8 <__ledf2+0x50>
    52e8:	0031      	movs	r1, r6
    52ea:	2302      	movs	r3, #2
    52ec:	4301      	orrs	r1, r0
    52ee:	d1eb      	bne.n	52c8 <__ledf2+0x50>
    52f0:	e7d9      	b.n	52a6 <__ledf2+0x2e>
    52f2:	0039      	movs	r1, r7
    52f4:	2302      	movs	r3, #2
    52f6:	4311      	orrs	r1, r2
    52f8:	d1e6      	bne.n	52c8 <__ledf2+0x50>
    52fa:	e7d7      	b.n	52ac <__ledf2+0x34>
    52fc:	433a      	orrs	r2, r7
    52fe:	d1dd      	bne.n	52bc <__ledf2+0x44>
    5300:	2300      	movs	r3, #0
    5302:	2800      	cmp	r0, #0
    5304:	d0e0      	beq.n	52c8 <__ledf2+0x50>
    5306:	e7ea      	b.n	52de <__ledf2+0x66>
    5308:	433a      	orrs	r2, r7
    530a:	d1e6      	bne.n	52da <__ledf2+0x62>
    530c:	e7e7      	b.n	52de <__ledf2+0x66>
    530e:	42a5      	cmp	r5, r4
    5310:	dce5      	bgt.n	52de <__ledf2+0x66>
    5312:	db05      	blt.n	5320 <__ledf2+0xa8>
    5314:	42be      	cmp	r6, r7
    5316:	d8e2      	bhi.n	52de <__ledf2+0x66>
    5318:	d007      	beq.n	532a <__ledf2+0xb2>
    531a:	2300      	movs	r3, #0
    531c:	42be      	cmp	r6, r7
    531e:	d2d3      	bcs.n	52c8 <__ledf2+0x50>
    5320:	4659      	mov	r1, fp
    5322:	2301      	movs	r3, #1
    5324:	3901      	subs	r1, #1
    5326:	430b      	orrs	r3, r1
    5328:	e7ce      	b.n	52c8 <__ledf2+0x50>
    532a:	45c4      	cmp	ip, r8
    532c:	d8d7      	bhi.n	52de <__ledf2+0x66>
    532e:	2300      	movs	r3, #0
    5330:	45c4      	cmp	ip, r8
    5332:	d3f5      	bcc.n	5320 <__ledf2+0xa8>
    5334:	e7c8      	b.n	52c8 <__ledf2+0x50>
    5336:	46c0      	nop			; (mov r8, r8)
    5338:	000007ff 	.word	0x000007ff

0000533c <__aeabi_dmul>:
    533c:	b5f0      	push	{r4, r5, r6, r7, lr}
    533e:	4657      	mov	r7, sl
    5340:	4645      	mov	r5, r8
    5342:	46de      	mov	lr, fp
    5344:	464e      	mov	r6, r9
    5346:	b5e0      	push	{r5, r6, r7, lr}
    5348:	030c      	lsls	r4, r1, #12
    534a:	4698      	mov	r8, r3
    534c:	004e      	lsls	r6, r1, #1
    534e:	0b23      	lsrs	r3, r4, #12
    5350:	b087      	sub	sp, #28
    5352:	0007      	movs	r7, r0
    5354:	4692      	mov	sl, r2
    5356:	469b      	mov	fp, r3
    5358:	0d76      	lsrs	r6, r6, #21
    535a:	0fcd      	lsrs	r5, r1, #31
    535c:	2e00      	cmp	r6, #0
    535e:	d06b      	beq.n	5438 <__aeabi_dmul+0xfc>
    5360:	4b6d      	ldr	r3, [pc, #436]	; (5518 <__aeabi_dmul+0x1dc>)
    5362:	429e      	cmp	r6, r3
    5364:	d035      	beq.n	53d2 <__aeabi_dmul+0x96>
    5366:	2480      	movs	r4, #128	; 0x80
    5368:	465b      	mov	r3, fp
    536a:	0f42      	lsrs	r2, r0, #29
    536c:	0424      	lsls	r4, r4, #16
    536e:	00db      	lsls	r3, r3, #3
    5370:	4314      	orrs	r4, r2
    5372:	431c      	orrs	r4, r3
    5374:	00c3      	lsls	r3, r0, #3
    5376:	4699      	mov	r9, r3
    5378:	4b68      	ldr	r3, [pc, #416]	; (551c <__aeabi_dmul+0x1e0>)
    537a:	46a3      	mov	fp, r4
    537c:	469c      	mov	ip, r3
    537e:	2300      	movs	r3, #0
    5380:	2700      	movs	r7, #0
    5382:	4466      	add	r6, ip
    5384:	9302      	str	r3, [sp, #8]
    5386:	4643      	mov	r3, r8
    5388:	031c      	lsls	r4, r3, #12
    538a:	005a      	lsls	r2, r3, #1
    538c:	0fdb      	lsrs	r3, r3, #31
    538e:	4650      	mov	r0, sl
    5390:	0b24      	lsrs	r4, r4, #12
    5392:	0d52      	lsrs	r2, r2, #21
    5394:	4698      	mov	r8, r3
    5396:	d100      	bne.n	539a <__aeabi_dmul+0x5e>
    5398:	e076      	b.n	5488 <__aeabi_dmul+0x14c>
    539a:	4b5f      	ldr	r3, [pc, #380]	; (5518 <__aeabi_dmul+0x1dc>)
    539c:	429a      	cmp	r2, r3
    539e:	d06d      	beq.n	547c <__aeabi_dmul+0x140>
    53a0:	2380      	movs	r3, #128	; 0x80
    53a2:	0f41      	lsrs	r1, r0, #29
    53a4:	041b      	lsls	r3, r3, #16
    53a6:	430b      	orrs	r3, r1
    53a8:	495c      	ldr	r1, [pc, #368]	; (551c <__aeabi_dmul+0x1e0>)
    53aa:	00e4      	lsls	r4, r4, #3
    53ac:	468c      	mov	ip, r1
    53ae:	431c      	orrs	r4, r3
    53b0:	00c3      	lsls	r3, r0, #3
    53b2:	2000      	movs	r0, #0
    53b4:	4462      	add	r2, ip
    53b6:	4641      	mov	r1, r8
    53b8:	18b6      	adds	r6, r6, r2
    53ba:	4069      	eors	r1, r5
    53bc:	1c72      	adds	r2, r6, #1
    53be:	9101      	str	r1, [sp, #4]
    53c0:	4694      	mov	ip, r2
    53c2:	4307      	orrs	r7, r0
    53c4:	2f0f      	cmp	r7, #15
    53c6:	d900      	bls.n	53ca <__aeabi_dmul+0x8e>
    53c8:	e0b0      	b.n	552c <__aeabi_dmul+0x1f0>
    53ca:	4a55      	ldr	r2, [pc, #340]	; (5520 <__aeabi_dmul+0x1e4>)
    53cc:	00bf      	lsls	r7, r7, #2
    53ce:	59d2      	ldr	r2, [r2, r7]
    53d0:	4697      	mov	pc, r2
    53d2:	465b      	mov	r3, fp
    53d4:	4303      	orrs	r3, r0
    53d6:	4699      	mov	r9, r3
    53d8:	d000      	beq.n	53dc <__aeabi_dmul+0xa0>
    53da:	e087      	b.n	54ec <__aeabi_dmul+0x1b0>
    53dc:	2300      	movs	r3, #0
    53de:	469b      	mov	fp, r3
    53e0:	3302      	adds	r3, #2
    53e2:	2708      	movs	r7, #8
    53e4:	9302      	str	r3, [sp, #8]
    53e6:	e7ce      	b.n	5386 <__aeabi_dmul+0x4a>
    53e8:	4642      	mov	r2, r8
    53ea:	9201      	str	r2, [sp, #4]
    53ec:	2802      	cmp	r0, #2
    53ee:	d067      	beq.n	54c0 <__aeabi_dmul+0x184>
    53f0:	2803      	cmp	r0, #3
    53f2:	d100      	bne.n	53f6 <__aeabi_dmul+0xba>
    53f4:	e20e      	b.n	5814 <__aeabi_dmul+0x4d8>
    53f6:	2801      	cmp	r0, #1
    53f8:	d000      	beq.n	53fc <__aeabi_dmul+0xc0>
    53fa:	e162      	b.n	56c2 <__aeabi_dmul+0x386>
    53fc:	2300      	movs	r3, #0
    53fe:	2400      	movs	r4, #0
    5400:	2200      	movs	r2, #0
    5402:	4699      	mov	r9, r3
    5404:	9901      	ldr	r1, [sp, #4]
    5406:	4001      	ands	r1, r0
    5408:	b2cd      	uxtb	r5, r1
    540a:	2100      	movs	r1, #0
    540c:	0312      	lsls	r2, r2, #12
    540e:	0d0b      	lsrs	r3, r1, #20
    5410:	0b12      	lsrs	r2, r2, #12
    5412:	051b      	lsls	r3, r3, #20
    5414:	4313      	orrs	r3, r2
    5416:	4a43      	ldr	r2, [pc, #268]	; (5524 <__aeabi_dmul+0x1e8>)
    5418:	0524      	lsls	r4, r4, #20
    541a:	4013      	ands	r3, r2
    541c:	431c      	orrs	r4, r3
    541e:	0064      	lsls	r4, r4, #1
    5420:	07ed      	lsls	r5, r5, #31
    5422:	0864      	lsrs	r4, r4, #1
    5424:	432c      	orrs	r4, r5
    5426:	4648      	mov	r0, r9
    5428:	0021      	movs	r1, r4
    542a:	b007      	add	sp, #28
    542c:	bc3c      	pop	{r2, r3, r4, r5}
    542e:	4690      	mov	r8, r2
    5430:	4699      	mov	r9, r3
    5432:	46a2      	mov	sl, r4
    5434:	46ab      	mov	fp, r5
    5436:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5438:	4303      	orrs	r3, r0
    543a:	4699      	mov	r9, r3
    543c:	d04f      	beq.n	54de <__aeabi_dmul+0x1a2>
    543e:	465b      	mov	r3, fp
    5440:	2b00      	cmp	r3, #0
    5442:	d100      	bne.n	5446 <__aeabi_dmul+0x10a>
    5444:	e189      	b.n	575a <__aeabi_dmul+0x41e>
    5446:	4658      	mov	r0, fp
    5448:	f000 feb8 	bl	61bc <__clzsi2>
    544c:	0003      	movs	r3, r0
    544e:	3b0b      	subs	r3, #11
    5450:	2b1c      	cmp	r3, #28
    5452:	dd00      	ble.n	5456 <__aeabi_dmul+0x11a>
    5454:	e17a      	b.n	574c <__aeabi_dmul+0x410>
    5456:	221d      	movs	r2, #29
    5458:	1ad3      	subs	r3, r2, r3
    545a:	003a      	movs	r2, r7
    545c:	0001      	movs	r1, r0
    545e:	465c      	mov	r4, fp
    5460:	40da      	lsrs	r2, r3
    5462:	3908      	subs	r1, #8
    5464:	408c      	lsls	r4, r1
    5466:	0013      	movs	r3, r2
    5468:	408f      	lsls	r7, r1
    546a:	4323      	orrs	r3, r4
    546c:	469b      	mov	fp, r3
    546e:	46b9      	mov	r9, r7
    5470:	2300      	movs	r3, #0
    5472:	4e2d      	ldr	r6, [pc, #180]	; (5528 <__aeabi_dmul+0x1ec>)
    5474:	2700      	movs	r7, #0
    5476:	1a36      	subs	r6, r6, r0
    5478:	9302      	str	r3, [sp, #8]
    547a:	e784      	b.n	5386 <__aeabi_dmul+0x4a>
    547c:	4653      	mov	r3, sl
    547e:	4323      	orrs	r3, r4
    5480:	d12a      	bne.n	54d8 <__aeabi_dmul+0x19c>
    5482:	2400      	movs	r4, #0
    5484:	2002      	movs	r0, #2
    5486:	e796      	b.n	53b6 <__aeabi_dmul+0x7a>
    5488:	4653      	mov	r3, sl
    548a:	4323      	orrs	r3, r4
    548c:	d020      	beq.n	54d0 <__aeabi_dmul+0x194>
    548e:	2c00      	cmp	r4, #0
    5490:	d100      	bne.n	5494 <__aeabi_dmul+0x158>
    5492:	e157      	b.n	5744 <__aeabi_dmul+0x408>
    5494:	0020      	movs	r0, r4
    5496:	f000 fe91 	bl	61bc <__clzsi2>
    549a:	0003      	movs	r3, r0
    549c:	3b0b      	subs	r3, #11
    549e:	2b1c      	cmp	r3, #28
    54a0:	dd00      	ble.n	54a4 <__aeabi_dmul+0x168>
    54a2:	e149      	b.n	5738 <__aeabi_dmul+0x3fc>
    54a4:	211d      	movs	r1, #29
    54a6:	1acb      	subs	r3, r1, r3
    54a8:	4651      	mov	r1, sl
    54aa:	0002      	movs	r2, r0
    54ac:	40d9      	lsrs	r1, r3
    54ae:	4653      	mov	r3, sl
    54b0:	3a08      	subs	r2, #8
    54b2:	4094      	lsls	r4, r2
    54b4:	4093      	lsls	r3, r2
    54b6:	430c      	orrs	r4, r1
    54b8:	4a1b      	ldr	r2, [pc, #108]	; (5528 <__aeabi_dmul+0x1ec>)
    54ba:	1a12      	subs	r2, r2, r0
    54bc:	2000      	movs	r0, #0
    54be:	e77a      	b.n	53b6 <__aeabi_dmul+0x7a>
    54c0:	2501      	movs	r5, #1
    54c2:	9b01      	ldr	r3, [sp, #4]
    54c4:	4c14      	ldr	r4, [pc, #80]	; (5518 <__aeabi_dmul+0x1dc>)
    54c6:	401d      	ands	r5, r3
    54c8:	2300      	movs	r3, #0
    54ca:	2200      	movs	r2, #0
    54cc:	4699      	mov	r9, r3
    54ce:	e79c      	b.n	540a <__aeabi_dmul+0xce>
    54d0:	2400      	movs	r4, #0
    54d2:	2200      	movs	r2, #0
    54d4:	2001      	movs	r0, #1
    54d6:	e76e      	b.n	53b6 <__aeabi_dmul+0x7a>
    54d8:	4653      	mov	r3, sl
    54da:	2003      	movs	r0, #3
    54dc:	e76b      	b.n	53b6 <__aeabi_dmul+0x7a>
    54de:	2300      	movs	r3, #0
    54e0:	469b      	mov	fp, r3
    54e2:	3301      	adds	r3, #1
    54e4:	2704      	movs	r7, #4
    54e6:	2600      	movs	r6, #0
    54e8:	9302      	str	r3, [sp, #8]
    54ea:	e74c      	b.n	5386 <__aeabi_dmul+0x4a>
    54ec:	2303      	movs	r3, #3
    54ee:	4681      	mov	r9, r0
    54f0:	270c      	movs	r7, #12
    54f2:	9302      	str	r3, [sp, #8]
    54f4:	e747      	b.n	5386 <__aeabi_dmul+0x4a>
    54f6:	2280      	movs	r2, #128	; 0x80
    54f8:	2300      	movs	r3, #0
    54fa:	2500      	movs	r5, #0
    54fc:	0312      	lsls	r2, r2, #12
    54fe:	4699      	mov	r9, r3
    5500:	4c05      	ldr	r4, [pc, #20]	; (5518 <__aeabi_dmul+0x1dc>)
    5502:	e782      	b.n	540a <__aeabi_dmul+0xce>
    5504:	465c      	mov	r4, fp
    5506:	464b      	mov	r3, r9
    5508:	9802      	ldr	r0, [sp, #8]
    550a:	e76f      	b.n	53ec <__aeabi_dmul+0xb0>
    550c:	465c      	mov	r4, fp
    550e:	464b      	mov	r3, r9
    5510:	9501      	str	r5, [sp, #4]
    5512:	9802      	ldr	r0, [sp, #8]
    5514:	e76a      	b.n	53ec <__aeabi_dmul+0xb0>
    5516:	46c0      	nop			; (mov r8, r8)
    5518:	000007ff 	.word	0x000007ff
    551c:	fffffc01 	.word	0xfffffc01
    5520:	00006438 	.word	0x00006438
    5524:	800fffff 	.word	0x800fffff
    5528:	fffffc0d 	.word	0xfffffc0d
    552c:	464a      	mov	r2, r9
    552e:	4649      	mov	r1, r9
    5530:	0c17      	lsrs	r7, r2, #16
    5532:	0c1a      	lsrs	r2, r3, #16
    5534:	041b      	lsls	r3, r3, #16
    5536:	0c1b      	lsrs	r3, r3, #16
    5538:	0408      	lsls	r0, r1, #16
    553a:	0019      	movs	r1, r3
    553c:	0c00      	lsrs	r0, r0, #16
    553e:	4341      	muls	r1, r0
    5540:	0015      	movs	r5, r2
    5542:	4688      	mov	r8, r1
    5544:	0019      	movs	r1, r3
    5546:	437d      	muls	r5, r7
    5548:	4379      	muls	r1, r7
    554a:	9503      	str	r5, [sp, #12]
    554c:	4689      	mov	r9, r1
    554e:	0029      	movs	r1, r5
    5550:	0015      	movs	r5, r2
    5552:	4345      	muls	r5, r0
    5554:	444d      	add	r5, r9
    5556:	9502      	str	r5, [sp, #8]
    5558:	4645      	mov	r5, r8
    555a:	0c2d      	lsrs	r5, r5, #16
    555c:	46aa      	mov	sl, r5
    555e:	9d02      	ldr	r5, [sp, #8]
    5560:	4455      	add	r5, sl
    5562:	45a9      	cmp	r9, r5
    5564:	d906      	bls.n	5574 <__aeabi_dmul+0x238>
    5566:	468a      	mov	sl, r1
    5568:	2180      	movs	r1, #128	; 0x80
    556a:	0249      	lsls	r1, r1, #9
    556c:	4689      	mov	r9, r1
    556e:	44ca      	add	sl, r9
    5570:	4651      	mov	r1, sl
    5572:	9103      	str	r1, [sp, #12]
    5574:	0c29      	lsrs	r1, r5, #16
    5576:	9104      	str	r1, [sp, #16]
    5578:	4641      	mov	r1, r8
    557a:	0409      	lsls	r1, r1, #16
    557c:	042d      	lsls	r5, r5, #16
    557e:	0c09      	lsrs	r1, r1, #16
    5580:	4688      	mov	r8, r1
    5582:	0029      	movs	r1, r5
    5584:	0c25      	lsrs	r5, r4, #16
    5586:	0424      	lsls	r4, r4, #16
    5588:	4441      	add	r1, r8
    558a:	0c24      	lsrs	r4, r4, #16
    558c:	9105      	str	r1, [sp, #20]
    558e:	0021      	movs	r1, r4
    5590:	4341      	muls	r1, r0
    5592:	4688      	mov	r8, r1
    5594:	0021      	movs	r1, r4
    5596:	4379      	muls	r1, r7
    5598:	468a      	mov	sl, r1
    559a:	4368      	muls	r0, r5
    559c:	4641      	mov	r1, r8
    559e:	4450      	add	r0, sl
    55a0:	4681      	mov	r9, r0
    55a2:	0c08      	lsrs	r0, r1, #16
    55a4:	4448      	add	r0, r9
    55a6:	436f      	muls	r7, r5
    55a8:	4582      	cmp	sl, r0
    55aa:	d903      	bls.n	55b4 <__aeabi_dmul+0x278>
    55ac:	2180      	movs	r1, #128	; 0x80
    55ae:	0249      	lsls	r1, r1, #9
    55b0:	4689      	mov	r9, r1
    55b2:	444f      	add	r7, r9
    55b4:	0c01      	lsrs	r1, r0, #16
    55b6:	4689      	mov	r9, r1
    55b8:	0039      	movs	r1, r7
    55ba:	4449      	add	r1, r9
    55bc:	9102      	str	r1, [sp, #8]
    55be:	4641      	mov	r1, r8
    55c0:	040f      	lsls	r7, r1, #16
    55c2:	9904      	ldr	r1, [sp, #16]
    55c4:	0c3f      	lsrs	r7, r7, #16
    55c6:	4688      	mov	r8, r1
    55c8:	0400      	lsls	r0, r0, #16
    55ca:	19c0      	adds	r0, r0, r7
    55cc:	4480      	add	r8, r0
    55ce:	4641      	mov	r1, r8
    55d0:	9104      	str	r1, [sp, #16]
    55d2:	4659      	mov	r1, fp
    55d4:	0c0f      	lsrs	r7, r1, #16
    55d6:	0409      	lsls	r1, r1, #16
    55d8:	0c09      	lsrs	r1, r1, #16
    55da:	4688      	mov	r8, r1
    55dc:	4359      	muls	r1, r3
    55de:	468a      	mov	sl, r1
    55e0:	0039      	movs	r1, r7
    55e2:	4351      	muls	r1, r2
    55e4:	4689      	mov	r9, r1
    55e6:	4641      	mov	r1, r8
    55e8:	434a      	muls	r2, r1
    55ea:	4651      	mov	r1, sl
    55ec:	0c09      	lsrs	r1, r1, #16
    55ee:	468b      	mov	fp, r1
    55f0:	437b      	muls	r3, r7
    55f2:	18d2      	adds	r2, r2, r3
    55f4:	445a      	add	r2, fp
    55f6:	4293      	cmp	r3, r2
    55f8:	d903      	bls.n	5602 <__aeabi_dmul+0x2c6>
    55fa:	2380      	movs	r3, #128	; 0x80
    55fc:	025b      	lsls	r3, r3, #9
    55fe:	469b      	mov	fp, r3
    5600:	44d9      	add	r9, fp
    5602:	4651      	mov	r1, sl
    5604:	0409      	lsls	r1, r1, #16
    5606:	0c09      	lsrs	r1, r1, #16
    5608:	468a      	mov	sl, r1
    560a:	4641      	mov	r1, r8
    560c:	4361      	muls	r1, r4
    560e:	437c      	muls	r4, r7
    5610:	0c13      	lsrs	r3, r2, #16
    5612:	0412      	lsls	r2, r2, #16
    5614:	444b      	add	r3, r9
    5616:	4452      	add	r2, sl
    5618:	46a1      	mov	r9, r4
    561a:	468a      	mov	sl, r1
    561c:	003c      	movs	r4, r7
    561e:	4641      	mov	r1, r8
    5620:	436c      	muls	r4, r5
    5622:	434d      	muls	r5, r1
    5624:	4651      	mov	r1, sl
    5626:	444d      	add	r5, r9
    5628:	0c0f      	lsrs	r7, r1, #16
    562a:	197d      	adds	r5, r7, r5
    562c:	45a9      	cmp	r9, r5
    562e:	d903      	bls.n	5638 <__aeabi_dmul+0x2fc>
    5630:	2180      	movs	r1, #128	; 0x80
    5632:	0249      	lsls	r1, r1, #9
    5634:	4688      	mov	r8, r1
    5636:	4444      	add	r4, r8
    5638:	9f04      	ldr	r7, [sp, #16]
    563a:	9903      	ldr	r1, [sp, #12]
    563c:	46b8      	mov	r8, r7
    563e:	4441      	add	r1, r8
    5640:	468b      	mov	fp, r1
    5642:	4583      	cmp	fp, r0
    5644:	4180      	sbcs	r0, r0
    5646:	4241      	negs	r1, r0
    5648:	4688      	mov	r8, r1
    564a:	4651      	mov	r1, sl
    564c:	0408      	lsls	r0, r1, #16
    564e:	042f      	lsls	r7, r5, #16
    5650:	0c00      	lsrs	r0, r0, #16
    5652:	183f      	adds	r7, r7, r0
    5654:	4658      	mov	r0, fp
    5656:	9902      	ldr	r1, [sp, #8]
    5658:	1810      	adds	r0, r2, r0
    565a:	4689      	mov	r9, r1
    565c:	4290      	cmp	r0, r2
    565e:	4192      	sbcs	r2, r2
    5660:	444f      	add	r7, r9
    5662:	46ba      	mov	sl, r7
    5664:	4252      	negs	r2, r2
    5666:	4699      	mov	r9, r3
    5668:	4693      	mov	fp, r2
    566a:	44c2      	add	sl, r8
    566c:	44d1      	add	r9, sl
    566e:	44cb      	add	fp, r9
    5670:	428f      	cmp	r7, r1
    5672:	41bf      	sbcs	r7, r7
    5674:	45c2      	cmp	sl, r8
    5676:	4189      	sbcs	r1, r1
    5678:	4599      	cmp	r9, r3
    567a:	419b      	sbcs	r3, r3
    567c:	4593      	cmp	fp, r2
    567e:	4192      	sbcs	r2, r2
    5680:	427f      	negs	r7, r7
    5682:	4249      	negs	r1, r1
    5684:	0c2d      	lsrs	r5, r5, #16
    5686:	4252      	negs	r2, r2
    5688:	430f      	orrs	r7, r1
    568a:	425b      	negs	r3, r3
    568c:	4313      	orrs	r3, r2
    568e:	197f      	adds	r7, r7, r5
    5690:	18ff      	adds	r7, r7, r3
    5692:	465b      	mov	r3, fp
    5694:	193c      	adds	r4, r7, r4
    5696:	0ddb      	lsrs	r3, r3, #23
    5698:	9a05      	ldr	r2, [sp, #20]
    569a:	0264      	lsls	r4, r4, #9
    569c:	431c      	orrs	r4, r3
    569e:	0243      	lsls	r3, r0, #9
    56a0:	4313      	orrs	r3, r2
    56a2:	1e5d      	subs	r5, r3, #1
    56a4:	41ab      	sbcs	r3, r5
    56a6:	465a      	mov	r2, fp
    56a8:	0dc0      	lsrs	r0, r0, #23
    56aa:	4303      	orrs	r3, r0
    56ac:	0252      	lsls	r2, r2, #9
    56ae:	4313      	orrs	r3, r2
    56b0:	01e2      	lsls	r2, r4, #7
    56b2:	d556      	bpl.n	5762 <__aeabi_dmul+0x426>
    56b4:	2001      	movs	r0, #1
    56b6:	085a      	lsrs	r2, r3, #1
    56b8:	4003      	ands	r3, r0
    56ba:	4313      	orrs	r3, r2
    56bc:	07e2      	lsls	r2, r4, #31
    56be:	4313      	orrs	r3, r2
    56c0:	0864      	lsrs	r4, r4, #1
    56c2:	485a      	ldr	r0, [pc, #360]	; (582c <__aeabi_dmul+0x4f0>)
    56c4:	4460      	add	r0, ip
    56c6:	2800      	cmp	r0, #0
    56c8:	dd4d      	ble.n	5766 <__aeabi_dmul+0x42a>
    56ca:	075a      	lsls	r2, r3, #29
    56cc:	d009      	beq.n	56e2 <__aeabi_dmul+0x3a6>
    56ce:	220f      	movs	r2, #15
    56d0:	401a      	ands	r2, r3
    56d2:	2a04      	cmp	r2, #4
    56d4:	d005      	beq.n	56e2 <__aeabi_dmul+0x3a6>
    56d6:	1d1a      	adds	r2, r3, #4
    56d8:	429a      	cmp	r2, r3
    56da:	419b      	sbcs	r3, r3
    56dc:	425b      	negs	r3, r3
    56de:	18e4      	adds	r4, r4, r3
    56e0:	0013      	movs	r3, r2
    56e2:	01e2      	lsls	r2, r4, #7
    56e4:	d504      	bpl.n	56f0 <__aeabi_dmul+0x3b4>
    56e6:	2080      	movs	r0, #128	; 0x80
    56e8:	4a51      	ldr	r2, [pc, #324]	; (5830 <__aeabi_dmul+0x4f4>)
    56ea:	00c0      	lsls	r0, r0, #3
    56ec:	4014      	ands	r4, r2
    56ee:	4460      	add	r0, ip
    56f0:	4a50      	ldr	r2, [pc, #320]	; (5834 <__aeabi_dmul+0x4f8>)
    56f2:	4290      	cmp	r0, r2
    56f4:	dd00      	ble.n	56f8 <__aeabi_dmul+0x3bc>
    56f6:	e6e3      	b.n	54c0 <__aeabi_dmul+0x184>
    56f8:	2501      	movs	r5, #1
    56fa:	08db      	lsrs	r3, r3, #3
    56fc:	0762      	lsls	r2, r4, #29
    56fe:	431a      	orrs	r2, r3
    5700:	0264      	lsls	r4, r4, #9
    5702:	9b01      	ldr	r3, [sp, #4]
    5704:	4691      	mov	r9, r2
    5706:	0b22      	lsrs	r2, r4, #12
    5708:	0544      	lsls	r4, r0, #21
    570a:	0d64      	lsrs	r4, r4, #21
    570c:	401d      	ands	r5, r3
    570e:	e67c      	b.n	540a <__aeabi_dmul+0xce>
    5710:	2280      	movs	r2, #128	; 0x80
    5712:	4659      	mov	r1, fp
    5714:	0312      	lsls	r2, r2, #12
    5716:	4211      	tst	r1, r2
    5718:	d008      	beq.n	572c <__aeabi_dmul+0x3f0>
    571a:	4214      	tst	r4, r2
    571c:	d106      	bne.n	572c <__aeabi_dmul+0x3f0>
    571e:	4322      	orrs	r2, r4
    5720:	0312      	lsls	r2, r2, #12
    5722:	0b12      	lsrs	r2, r2, #12
    5724:	4645      	mov	r5, r8
    5726:	4699      	mov	r9, r3
    5728:	4c43      	ldr	r4, [pc, #268]	; (5838 <__aeabi_dmul+0x4fc>)
    572a:	e66e      	b.n	540a <__aeabi_dmul+0xce>
    572c:	465b      	mov	r3, fp
    572e:	431a      	orrs	r2, r3
    5730:	0312      	lsls	r2, r2, #12
    5732:	0b12      	lsrs	r2, r2, #12
    5734:	4c40      	ldr	r4, [pc, #256]	; (5838 <__aeabi_dmul+0x4fc>)
    5736:	e668      	b.n	540a <__aeabi_dmul+0xce>
    5738:	0003      	movs	r3, r0
    573a:	4654      	mov	r4, sl
    573c:	3b28      	subs	r3, #40	; 0x28
    573e:	409c      	lsls	r4, r3
    5740:	2300      	movs	r3, #0
    5742:	e6b9      	b.n	54b8 <__aeabi_dmul+0x17c>
    5744:	f000 fd3a 	bl	61bc <__clzsi2>
    5748:	3020      	adds	r0, #32
    574a:	e6a6      	b.n	549a <__aeabi_dmul+0x15e>
    574c:	0003      	movs	r3, r0
    574e:	3b28      	subs	r3, #40	; 0x28
    5750:	409f      	lsls	r7, r3
    5752:	2300      	movs	r3, #0
    5754:	46bb      	mov	fp, r7
    5756:	4699      	mov	r9, r3
    5758:	e68a      	b.n	5470 <__aeabi_dmul+0x134>
    575a:	f000 fd2f 	bl	61bc <__clzsi2>
    575e:	3020      	adds	r0, #32
    5760:	e674      	b.n	544c <__aeabi_dmul+0x110>
    5762:	46b4      	mov	ip, r6
    5764:	e7ad      	b.n	56c2 <__aeabi_dmul+0x386>
    5766:	2501      	movs	r5, #1
    5768:	1a2a      	subs	r2, r5, r0
    576a:	2a38      	cmp	r2, #56	; 0x38
    576c:	dd06      	ble.n	577c <__aeabi_dmul+0x440>
    576e:	9b01      	ldr	r3, [sp, #4]
    5770:	2400      	movs	r4, #0
    5772:	401d      	ands	r5, r3
    5774:	2300      	movs	r3, #0
    5776:	2200      	movs	r2, #0
    5778:	4699      	mov	r9, r3
    577a:	e646      	b.n	540a <__aeabi_dmul+0xce>
    577c:	2a1f      	cmp	r2, #31
    577e:	dc21      	bgt.n	57c4 <__aeabi_dmul+0x488>
    5780:	2520      	movs	r5, #32
    5782:	0020      	movs	r0, r4
    5784:	1aad      	subs	r5, r5, r2
    5786:	001e      	movs	r6, r3
    5788:	40ab      	lsls	r3, r5
    578a:	40a8      	lsls	r0, r5
    578c:	40d6      	lsrs	r6, r2
    578e:	1e5d      	subs	r5, r3, #1
    5790:	41ab      	sbcs	r3, r5
    5792:	4330      	orrs	r0, r6
    5794:	4318      	orrs	r0, r3
    5796:	40d4      	lsrs	r4, r2
    5798:	0743      	lsls	r3, r0, #29
    579a:	d009      	beq.n	57b0 <__aeabi_dmul+0x474>
    579c:	230f      	movs	r3, #15
    579e:	4003      	ands	r3, r0
    57a0:	2b04      	cmp	r3, #4
    57a2:	d005      	beq.n	57b0 <__aeabi_dmul+0x474>
    57a4:	0003      	movs	r3, r0
    57a6:	1d18      	adds	r0, r3, #4
    57a8:	4298      	cmp	r0, r3
    57aa:	419b      	sbcs	r3, r3
    57ac:	425b      	negs	r3, r3
    57ae:	18e4      	adds	r4, r4, r3
    57b0:	0223      	lsls	r3, r4, #8
    57b2:	d521      	bpl.n	57f8 <__aeabi_dmul+0x4bc>
    57b4:	2501      	movs	r5, #1
    57b6:	9b01      	ldr	r3, [sp, #4]
    57b8:	2401      	movs	r4, #1
    57ba:	401d      	ands	r5, r3
    57bc:	2300      	movs	r3, #0
    57be:	2200      	movs	r2, #0
    57c0:	4699      	mov	r9, r3
    57c2:	e622      	b.n	540a <__aeabi_dmul+0xce>
    57c4:	251f      	movs	r5, #31
    57c6:	0021      	movs	r1, r4
    57c8:	426d      	negs	r5, r5
    57ca:	1a28      	subs	r0, r5, r0
    57cc:	40c1      	lsrs	r1, r0
    57ce:	0008      	movs	r0, r1
    57d0:	2a20      	cmp	r2, #32
    57d2:	d01d      	beq.n	5810 <__aeabi_dmul+0x4d4>
    57d4:	355f      	adds	r5, #95	; 0x5f
    57d6:	1aaa      	subs	r2, r5, r2
    57d8:	4094      	lsls	r4, r2
    57da:	4323      	orrs	r3, r4
    57dc:	1e5c      	subs	r4, r3, #1
    57de:	41a3      	sbcs	r3, r4
    57e0:	2507      	movs	r5, #7
    57e2:	4303      	orrs	r3, r0
    57e4:	401d      	ands	r5, r3
    57e6:	2200      	movs	r2, #0
    57e8:	2d00      	cmp	r5, #0
    57ea:	d009      	beq.n	5800 <__aeabi_dmul+0x4c4>
    57ec:	220f      	movs	r2, #15
    57ee:	2400      	movs	r4, #0
    57f0:	401a      	ands	r2, r3
    57f2:	0018      	movs	r0, r3
    57f4:	2a04      	cmp	r2, #4
    57f6:	d1d6      	bne.n	57a6 <__aeabi_dmul+0x46a>
    57f8:	0003      	movs	r3, r0
    57fa:	0765      	lsls	r5, r4, #29
    57fc:	0264      	lsls	r4, r4, #9
    57fe:	0b22      	lsrs	r2, r4, #12
    5800:	08db      	lsrs	r3, r3, #3
    5802:	432b      	orrs	r3, r5
    5804:	2501      	movs	r5, #1
    5806:	4699      	mov	r9, r3
    5808:	9b01      	ldr	r3, [sp, #4]
    580a:	2400      	movs	r4, #0
    580c:	401d      	ands	r5, r3
    580e:	e5fc      	b.n	540a <__aeabi_dmul+0xce>
    5810:	2400      	movs	r4, #0
    5812:	e7e2      	b.n	57da <__aeabi_dmul+0x49e>
    5814:	2280      	movs	r2, #128	; 0x80
    5816:	2501      	movs	r5, #1
    5818:	0312      	lsls	r2, r2, #12
    581a:	4322      	orrs	r2, r4
    581c:	9901      	ldr	r1, [sp, #4]
    581e:	0312      	lsls	r2, r2, #12
    5820:	0b12      	lsrs	r2, r2, #12
    5822:	400d      	ands	r5, r1
    5824:	4699      	mov	r9, r3
    5826:	4c04      	ldr	r4, [pc, #16]	; (5838 <__aeabi_dmul+0x4fc>)
    5828:	e5ef      	b.n	540a <__aeabi_dmul+0xce>
    582a:	46c0      	nop			; (mov r8, r8)
    582c:	000003ff 	.word	0x000003ff
    5830:	feffffff 	.word	0xfeffffff
    5834:	000007fe 	.word	0x000007fe
    5838:	000007ff 	.word	0x000007ff

0000583c <__aeabi_dsub>:
    583c:	b5f0      	push	{r4, r5, r6, r7, lr}
    583e:	4646      	mov	r6, r8
    5840:	46d6      	mov	lr, sl
    5842:	464f      	mov	r7, r9
    5844:	030c      	lsls	r4, r1, #12
    5846:	b5c0      	push	{r6, r7, lr}
    5848:	0fcd      	lsrs	r5, r1, #31
    584a:	004e      	lsls	r6, r1, #1
    584c:	0a61      	lsrs	r1, r4, #9
    584e:	0f44      	lsrs	r4, r0, #29
    5850:	430c      	orrs	r4, r1
    5852:	00c1      	lsls	r1, r0, #3
    5854:	0058      	lsls	r0, r3, #1
    5856:	0d40      	lsrs	r0, r0, #21
    5858:	4684      	mov	ip, r0
    585a:	468a      	mov	sl, r1
    585c:	000f      	movs	r7, r1
    585e:	0319      	lsls	r1, r3, #12
    5860:	0f50      	lsrs	r0, r2, #29
    5862:	0a49      	lsrs	r1, r1, #9
    5864:	4301      	orrs	r1, r0
    5866:	48c6      	ldr	r0, [pc, #792]	; (5b80 <__aeabi_dsub+0x344>)
    5868:	0d76      	lsrs	r6, r6, #21
    586a:	46a8      	mov	r8, r5
    586c:	0fdb      	lsrs	r3, r3, #31
    586e:	00d2      	lsls	r2, r2, #3
    5870:	4584      	cmp	ip, r0
    5872:	d100      	bne.n	5876 <__aeabi_dsub+0x3a>
    5874:	e0d8      	b.n	5a28 <__aeabi_dsub+0x1ec>
    5876:	2001      	movs	r0, #1
    5878:	4043      	eors	r3, r0
    587a:	42ab      	cmp	r3, r5
    587c:	d100      	bne.n	5880 <__aeabi_dsub+0x44>
    587e:	e0a6      	b.n	59ce <__aeabi_dsub+0x192>
    5880:	4660      	mov	r0, ip
    5882:	1a35      	subs	r5, r6, r0
    5884:	2d00      	cmp	r5, #0
    5886:	dc00      	bgt.n	588a <__aeabi_dsub+0x4e>
    5888:	e105      	b.n	5a96 <__aeabi_dsub+0x25a>
    588a:	2800      	cmp	r0, #0
    588c:	d110      	bne.n	58b0 <__aeabi_dsub+0x74>
    588e:	000b      	movs	r3, r1
    5890:	4313      	orrs	r3, r2
    5892:	d100      	bne.n	5896 <__aeabi_dsub+0x5a>
    5894:	e0d7      	b.n	5a46 <__aeabi_dsub+0x20a>
    5896:	1e6b      	subs	r3, r5, #1
    5898:	2b00      	cmp	r3, #0
    589a:	d000      	beq.n	589e <__aeabi_dsub+0x62>
    589c:	e14b      	b.n	5b36 <__aeabi_dsub+0x2fa>
    589e:	4653      	mov	r3, sl
    58a0:	1a9f      	subs	r7, r3, r2
    58a2:	45ba      	cmp	sl, r7
    58a4:	4180      	sbcs	r0, r0
    58a6:	1a64      	subs	r4, r4, r1
    58a8:	4240      	negs	r0, r0
    58aa:	1a24      	subs	r4, r4, r0
    58ac:	2601      	movs	r6, #1
    58ae:	e01e      	b.n	58ee <__aeabi_dsub+0xb2>
    58b0:	4bb3      	ldr	r3, [pc, #716]	; (5b80 <__aeabi_dsub+0x344>)
    58b2:	429e      	cmp	r6, r3
    58b4:	d048      	beq.n	5948 <__aeabi_dsub+0x10c>
    58b6:	2380      	movs	r3, #128	; 0x80
    58b8:	041b      	lsls	r3, r3, #16
    58ba:	4319      	orrs	r1, r3
    58bc:	2d38      	cmp	r5, #56	; 0x38
    58be:	dd00      	ble.n	58c2 <__aeabi_dsub+0x86>
    58c0:	e119      	b.n	5af6 <__aeabi_dsub+0x2ba>
    58c2:	2d1f      	cmp	r5, #31
    58c4:	dd00      	ble.n	58c8 <__aeabi_dsub+0x8c>
    58c6:	e14c      	b.n	5b62 <__aeabi_dsub+0x326>
    58c8:	2320      	movs	r3, #32
    58ca:	000f      	movs	r7, r1
    58cc:	1b5b      	subs	r3, r3, r5
    58ce:	0010      	movs	r0, r2
    58d0:	409a      	lsls	r2, r3
    58d2:	409f      	lsls	r7, r3
    58d4:	40e8      	lsrs	r0, r5
    58d6:	1e53      	subs	r3, r2, #1
    58d8:	419a      	sbcs	r2, r3
    58da:	40e9      	lsrs	r1, r5
    58dc:	4307      	orrs	r7, r0
    58de:	4317      	orrs	r7, r2
    58e0:	4653      	mov	r3, sl
    58e2:	1bdf      	subs	r7, r3, r7
    58e4:	1a61      	subs	r1, r4, r1
    58e6:	45ba      	cmp	sl, r7
    58e8:	41a4      	sbcs	r4, r4
    58ea:	4264      	negs	r4, r4
    58ec:	1b0c      	subs	r4, r1, r4
    58ee:	0223      	lsls	r3, r4, #8
    58f0:	d400      	bmi.n	58f4 <__aeabi_dsub+0xb8>
    58f2:	e0c5      	b.n	5a80 <__aeabi_dsub+0x244>
    58f4:	0264      	lsls	r4, r4, #9
    58f6:	0a65      	lsrs	r5, r4, #9
    58f8:	2d00      	cmp	r5, #0
    58fa:	d100      	bne.n	58fe <__aeabi_dsub+0xc2>
    58fc:	e0f6      	b.n	5aec <__aeabi_dsub+0x2b0>
    58fe:	0028      	movs	r0, r5
    5900:	f000 fc5c 	bl	61bc <__clzsi2>
    5904:	0003      	movs	r3, r0
    5906:	3b08      	subs	r3, #8
    5908:	2b1f      	cmp	r3, #31
    590a:	dd00      	ble.n	590e <__aeabi_dsub+0xd2>
    590c:	e0e9      	b.n	5ae2 <__aeabi_dsub+0x2a6>
    590e:	2220      	movs	r2, #32
    5910:	003c      	movs	r4, r7
    5912:	1ad2      	subs	r2, r2, r3
    5914:	409d      	lsls	r5, r3
    5916:	40d4      	lsrs	r4, r2
    5918:	409f      	lsls	r7, r3
    591a:	4325      	orrs	r5, r4
    591c:	429e      	cmp	r6, r3
    591e:	dd00      	ble.n	5922 <__aeabi_dsub+0xe6>
    5920:	e0db      	b.n	5ada <__aeabi_dsub+0x29e>
    5922:	1b9e      	subs	r6, r3, r6
    5924:	1c73      	adds	r3, r6, #1
    5926:	2b1f      	cmp	r3, #31
    5928:	dd00      	ble.n	592c <__aeabi_dsub+0xf0>
    592a:	e10a      	b.n	5b42 <__aeabi_dsub+0x306>
    592c:	2220      	movs	r2, #32
    592e:	0038      	movs	r0, r7
    5930:	1ad2      	subs	r2, r2, r3
    5932:	0029      	movs	r1, r5
    5934:	4097      	lsls	r7, r2
    5936:	002c      	movs	r4, r5
    5938:	4091      	lsls	r1, r2
    593a:	40d8      	lsrs	r0, r3
    593c:	1e7a      	subs	r2, r7, #1
    593e:	4197      	sbcs	r7, r2
    5940:	40dc      	lsrs	r4, r3
    5942:	2600      	movs	r6, #0
    5944:	4301      	orrs	r1, r0
    5946:	430f      	orrs	r7, r1
    5948:	077b      	lsls	r3, r7, #29
    594a:	d009      	beq.n	5960 <__aeabi_dsub+0x124>
    594c:	230f      	movs	r3, #15
    594e:	403b      	ands	r3, r7
    5950:	2b04      	cmp	r3, #4
    5952:	d005      	beq.n	5960 <__aeabi_dsub+0x124>
    5954:	1d3b      	adds	r3, r7, #4
    5956:	42bb      	cmp	r3, r7
    5958:	41bf      	sbcs	r7, r7
    595a:	427f      	negs	r7, r7
    595c:	19e4      	adds	r4, r4, r7
    595e:	001f      	movs	r7, r3
    5960:	0223      	lsls	r3, r4, #8
    5962:	d525      	bpl.n	59b0 <__aeabi_dsub+0x174>
    5964:	4b86      	ldr	r3, [pc, #536]	; (5b80 <__aeabi_dsub+0x344>)
    5966:	3601      	adds	r6, #1
    5968:	429e      	cmp	r6, r3
    596a:	d100      	bne.n	596e <__aeabi_dsub+0x132>
    596c:	e0af      	b.n	5ace <__aeabi_dsub+0x292>
    596e:	4b85      	ldr	r3, [pc, #532]	; (5b84 <__aeabi_dsub+0x348>)
    5970:	2501      	movs	r5, #1
    5972:	401c      	ands	r4, r3
    5974:	4643      	mov	r3, r8
    5976:	0762      	lsls	r2, r4, #29
    5978:	08ff      	lsrs	r7, r7, #3
    597a:	0264      	lsls	r4, r4, #9
    597c:	0576      	lsls	r6, r6, #21
    597e:	4317      	orrs	r7, r2
    5980:	0b24      	lsrs	r4, r4, #12
    5982:	0d76      	lsrs	r6, r6, #21
    5984:	401d      	ands	r5, r3
    5986:	2100      	movs	r1, #0
    5988:	0324      	lsls	r4, r4, #12
    598a:	0b23      	lsrs	r3, r4, #12
    598c:	0d0c      	lsrs	r4, r1, #20
    598e:	4a7e      	ldr	r2, [pc, #504]	; (5b88 <__aeabi_dsub+0x34c>)
    5990:	0524      	lsls	r4, r4, #20
    5992:	431c      	orrs	r4, r3
    5994:	4014      	ands	r4, r2
    5996:	0533      	lsls	r3, r6, #20
    5998:	4323      	orrs	r3, r4
    599a:	005b      	lsls	r3, r3, #1
    599c:	07ed      	lsls	r5, r5, #31
    599e:	085b      	lsrs	r3, r3, #1
    59a0:	432b      	orrs	r3, r5
    59a2:	0038      	movs	r0, r7
    59a4:	0019      	movs	r1, r3
    59a6:	bc1c      	pop	{r2, r3, r4}
    59a8:	4690      	mov	r8, r2
    59aa:	4699      	mov	r9, r3
    59ac:	46a2      	mov	sl, r4
    59ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    59b0:	2501      	movs	r5, #1
    59b2:	4643      	mov	r3, r8
    59b4:	0762      	lsls	r2, r4, #29
    59b6:	08ff      	lsrs	r7, r7, #3
    59b8:	4317      	orrs	r7, r2
    59ba:	08e4      	lsrs	r4, r4, #3
    59bc:	401d      	ands	r5, r3
    59be:	4b70      	ldr	r3, [pc, #448]	; (5b80 <__aeabi_dsub+0x344>)
    59c0:	429e      	cmp	r6, r3
    59c2:	d036      	beq.n	5a32 <__aeabi_dsub+0x1f6>
    59c4:	0324      	lsls	r4, r4, #12
    59c6:	0576      	lsls	r6, r6, #21
    59c8:	0b24      	lsrs	r4, r4, #12
    59ca:	0d76      	lsrs	r6, r6, #21
    59cc:	e7db      	b.n	5986 <__aeabi_dsub+0x14a>
    59ce:	4663      	mov	r3, ip
    59d0:	1af3      	subs	r3, r6, r3
    59d2:	2b00      	cmp	r3, #0
    59d4:	dc00      	bgt.n	59d8 <__aeabi_dsub+0x19c>
    59d6:	e094      	b.n	5b02 <__aeabi_dsub+0x2c6>
    59d8:	4660      	mov	r0, ip
    59da:	2800      	cmp	r0, #0
    59dc:	d035      	beq.n	5a4a <__aeabi_dsub+0x20e>
    59de:	4868      	ldr	r0, [pc, #416]	; (5b80 <__aeabi_dsub+0x344>)
    59e0:	4286      	cmp	r6, r0
    59e2:	d0b1      	beq.n	5948 <__aeabi_dsub+0x10c>
    59e4:	2780      	movs	r7, #128	; 0x80
    59e6:	043f      	lsls	r7, r7, #16
    59e8:	4339      	orrs	r1, r7
    59ea:	2b38      	cmp	r3, #56	; 0x38
    59ec:	dc00      	bgt.n	59f0 <__aeabi_dsub+0x1b4>
    59ee:	e0fd      	b.n	5bec <__aeabi_dsub+0x3b0>
    59f0:	430a      	orrs	r2, r1
    59f2:	0017      	movs	r7, r2
    59f4:	2100      	movs	r1, #0
    59f6:	1e7a      	subs	r2, r7, #1
    59f8:	4197      	sbcs	r7, r2
    59fa:	4457      	add	r7, sl
    59fc:	4557      	cmp	r7, sl
    59fe:	4180      	sbcs	r0, r0
    5a00:	1909      	adds	r1, r1, r4
    5a02:	4244      	negs	r4, r0
    5a04:	190c      	adds	r4, r1, r4
    5a06:	0223      	lsls	r3, r4, #8
    5a08:	d53a      	bpl.n	5a80 <__aeabi_dsub+0x244>
    5a0a:	4b5d      	ldr	r3, [pc, #372]	; (5b80 <__aeabi_dsub+0x344>)
    5a0c:	3601      	adds	r6, #1
    5a0e:	429e      	cmp	r6, r3
    5a10:	d100      	bne.n	5a14 <__aeabi_dsub+0x1d8>
    5a12:	e14b      	b.n	5cac <__aeabi_dsub+0x470>
    5a14:	2201      	movs	r2, #1
    5a16:	4b5b      	ldr	r3, [pc, #364]	; (5b84 <__aeabi_dsub+0x348>)
    5a18:	401c      	ands	r4, r3
    5a1a:	087b      	lsrs	r3, r7, #1
    5a1c:	4017      	ands	r7, r2
    5a1e:	431f      	orrs	r7, r3
    5a20:	07e2      	lsls	r2, r4, #31
    5a22:	4317      	orrs	r7, r2
    5a24:	0864      	lsrs	r4, r4, #1
    5a26:	e78f      	b.n	5948 <__aeabi_dsub+0x10c>
    5a28:	0008      	movs	r0, r1
    5a2a:	4310      	orrs	r0, r2
    5a2c:	d000      	beq.n	5a30 <__aeabi_dsub+0x1f4>
    5a2e:	e724      	b.n	587a <__aeabi_dsub+0x3e>
    5a30:	e721      	b.n	5876 <__aeabi_dsub+0x3a>
    5a32:	0023      	movs	r3, r4
    5a34:	433b      	orrs	r3, r7
    5a36:	d100      	bne.n	5a3a <__aeabi_dsub+0x1fe>
    5a38:	e1b9      	b.n	5dae <__aeabi_dsub+0x572>
    5a3a:	2280      	movs	r2, #128	; 0x80
    5a3c:	0312      	lsls	r2, r2, #12
    5a3e:	4314      	orrs	r4, r2
    5a40:	0324      	lsls	r4, r4, #12
    5a42:	0b24      	lsrs	r4, r4, #12
    5a44:	e79f      	b.n	5986 <__aeabi_dsub+0x14a>
    5a46:	002e      	movs	r6, r5
    5a48:	e77e      	b.n	5948 <__aeabi_dsub+0x10c>
    5a4a:	0008      	movs	r0, r1
    5a4c:	4310      	orrs	r0, r2
    5a4e:	d100      	bne.n	5a52 <__aeabi_dsub+0x216>
    5a50:	e0ca      	b.n	5be8 <__aeabi_dsub+0x3ac>
    5a52:	1e58      	subs	r0, r3, #1
    5a54:	4684      	mov	ip, r0
    5a56:	2800      	cmp	r0, #0
    5a58:	d000      	beq.n	5a5c <__aeabi_dsub+0x220>
    5a5a:	e0e7      	b.n	5c2c <__aeabi_dsub+0x3f0>
    5a5c:	4452      	add	r2, sl
    5a5e:	4552      	cmp	r2, sl
    5a60:	4180      	sbcs	r0, r0
    5a62:	1864      	adds	r4, r4, r1
    5a64:	4240      	negs	r0, r0
    5a66:	1824      	adds	r4, r4, r0
    5a68:	0017      	movs	r7, r2
    5a6a:	2601      	movs	r6, #1
    5a6c:	0223      	lsls	r3, r4, #8
    5a6e:	d507      	bpl.n	5a80 <__aeabi_dsub+0x244>
    5a70:	2602      	movs	r6, #2
    5a72:	e7cf      	b.n	5a14 <__aeabi_dsub+0x1d8>
    5a74:	4664      	mov	r4, ip
    5a76:	432c      	orrs	r4, r5
    5a78:	d100      	bne.n	5a7c <__aeabi_dsub+0x240>
    5a7a:	e1b3      	b.n	5de4 <__aeabi_dsub+0x5a8>
    5a7c:	002c      	movs	r4, r5
    5a7e:	4667      	mov	r7, ip
    5a80:	077b      	lsls	r3, r7, #29
    5a82:	d000      	beq.n	5a86 <__aeabi_dsub+0x24a>
    5a84:	e762      	b.n	594c <__aeabi_dsub+0x110>
    5a86:	0763      	lsls	r3, r4, #29
    5a88:	08ff      	lsrs	r7, r7, #3
    5a8a:	431f      	orrs	r7, r3
    5a8c:	2501      	movs	r5, #1
    5a8e:	4643      	mov	r3, r8
    5a90:	08e4      	lsrs	r4, r4, #3
    5a92:	401d      	ands	r5, r3
    5a94:	e793      	b.n	59be <__aeabi_dsub+0x182>
    5a96:	2d00      	cmp	r5, #0
    5a98:	d178      	bne.n	5b8c <__aeabi_dsub+0x350>
    5a9a:	1c75      	adds	r5, r6, #1
    5a9c:	056d      	lsls	r5, r5, #21
    5a9e:	0d6d      	lsrs	r5, r5, #21
    5aa0:	2d01      	cmp	r5, #1
    5aa2:	dc00      	bgt.n	5aa6 <__aeabi_dsub+0x26a>
    5aa4:	e0f2      	b.n	5c8c <__aeabi_dsub+0x450>
    5aa6:	4650      	mov	r0, sl
    5aa8:	1a80      	subs	r0, r0, r2
    5aaa:	4582      	cmp	sl, r0
    5aac:	41bf      	sbcs	r7, r7
    5aae:	1a65      	subs	r5, r4, r1
    5ab0:	427f      	negs	r7, r7
    5ab2:	1bed      	subs	r5, r5, r7
    5ab4:	4684      	mov	ip, r0
    5ab6:	0228      	lsls	r0, r5, #8
    5ab8:	d400      	bmi.n	5abc <__aeabi_dsub+0x280>
    5aba:	e08c      	b.n	5bd6 <__aeabi_dsub+0x39a>
    5abc:	4650      	mov	r0, sl
    5abe:	1a17      	subs	r7, r2, r0
    5ac0:	42ba      	cmp	r2, r7
    5ac2:	4192      	sbcs	r2, r2
    5ac4:	1b0c      	subs	r4, r1, r4
    5ac6:	4255      	negs	r5, r2
    5ac8:	1b65      	subs	r5, r4, r5
    5aca:	4698      	mov	r8, r3
    5acc:	e714      	b.n	58f8 <__aeabi_dsub+0xbc>
    5ace:	2501      	movs	r5, #1
    5ad0:	4643      	mov	r3, r8
    5ad2:	2400      	movs	r4, #0
    5ad4:	401d      	ands	r5, r3
    5ad6:	2700      	movs	r7, #0
    5ad8:	e755      	b.n	5986 <__aeabi_dsub+0x14a>
    5ada:	4c2a      	ldr	r4, [pc, #168]	; (5b84 <__aeabi_dsub+0x348>)
    5adc:	1af6      	subs	r6, r6, r3
    5ade:	402c      	ands	r4, r5
    5ae0:	e732      	b.n	5948 <__aeabi_dsub+0x10c>
    5ae2:	003d      	movs	r5, r7
    5ae4:	3828      	subs	r0, #40	; 0x28
    5ae6:	4085      	lsls	r5, r0
    5ae8:	2700      	movs	r7, #0
    5aea:	e717      	b.n	591c <__aeabi_dsub+0xe0>
    5aec:	0038      	movs	r0, r7
    5aee:	f000 fb65 	bl	61bc <__clzsi2>
    5af2:	3020      	adds	r0, #32
    5af4:	e706      	b.n	5904 <__aeabi_dsub+0xc8>
    5af6:	430a      	orrs	r2, r1
    5af8:	0017      	movs	r7, r2
    5afa:	2100      	movs	r1, #0
    5afc:	1e7a      	subs	r2, r7, #1
    5afe:	4197      	sbcs	r7, r2
    5b00:	e6ee      	b.n	58e0 <__aeabi_dsub+0xa4>
    5b02:	2b00      	cmp	r3, #0
    5b04:	d000      	beq.n	5b08 <__aeabi_dsub+0x2cc>
    5b06:	e0e5      	b.n	5cd4 <__aeabi_dsub+0x498>
    5b08:	1c73      	adds	r3, r6, #1
    5b0a:	469c      	mov	ip, r3
    5b0c:	055b      	lsls	r3, r3, #21
    5b0e:	0d5b      	lsrs	r3, r3, #21
    5b10:	2b01      	cmp	r3, #1
    5b12:	dc00      	bgt.n	5b16 <__aeabi_dsub+0x2da>
    5b14:	e09f      	b.n	5c56 <__aeabi_dsub+0x41a>
    5b16:	4b1a      	ldr	r3, [pc, #104]	; (5b80 <__aeabi_dsub+0x344>)
    5b18:	459c      	cmp	ip, r3
    5b1a:	d100      	bne.n	5b1e <__aeabi_dsub+0x2e2>
    5b1c:	e0c5      	b.n	5caa <__aeabi_dsub+0x46e>
    5b1e:	4452      	add	r2, sl
    5b20:	4552      	cmp	r2, sl
    5b22:	4180      	sbcs	r0, r0
    5b24:	1864      	adds	r4, r4, r1
    5b26:	4240      	negs	r0, r0
    5b28:	1824      	adds	r4, r4, r0
    5b2a:	07e7      	lsls	r7, r4, #31
    5b2c:	0852      	lsrs	r2, r2, #1
    5b2e:	4317      	orrs	r7, r2
    5b30:	0864      	lsrs	r4, r4, #1
    5b32:	4666      	mov	r6, ip
    5b34:	e708      	b.n	5948 <__aeabi_dsub+0x10c>
    5b36:	4812      	ldr	r0, [pc, #72]	; (5b80 <__aeabi_dsub+0x344>)
    5b38:	4285      	cmp	r5, r0
    5b3a:	d100      	bne.n	5b3e <__aeabi_dsub+0x302>
    5b3c:	e085      	b.n	5c4a <__aeabi_dsub+0x40e>
    5b3e:	001d      	movs	r5, r3
    5b40:	e6bc      	b.n	58bc <__aeabi_dsub+0x80>
    5b42:	0029      	movs	r1, r5
    5b44:	3e1f      	subs	r6, #31
    5b46:	40f1      	lsrs	r1, r6
    5b48:	2b20      	cmp	r3, #32
    5b4a:	d100      	bne.n	5b4e <__aeabi_dsub+0x312>
    5b4c:	e07f      	b.n	5c4e <__aeabi_dsub+0x412>
    5b4e:	2240      	movs	r2, #64	; 0x40
    5b50:	1ad3      	subs	r3, r2, r3
    5b52:	409d      	lsls	r5, r3
    5b54:	432f      	orrs	r7, r5
    5b56:	1e7d      	subs	r5, r7, #1
    5b58:	41af      	sbcs	r7, r5
    5b5a:	2400      	movs	r4, #0
    5b5c:	430f      	orrs	r7, r1
    5b5e:	2600      	movs	r6, #0
    5b60:	e78e      	b.n	5a80 <__aeabi_dsub+0x244>
    5b62:	002b      	movs	r3, r5
    5b64:	000f      	movs	r7, r1
    5b66:	3b20      	subs	r3, #32
    5b68:	40df      	lsrs	r7, r3
    5b6a:	2d20      	cmp	r5, #32
    5b6c:	d071      	beq.n	5c52 <__aeabi_dsub+0x416>
    5b6e:	2340      	movs	r3, #64	; 0x40
    5b70:	1b5d      	subs	r5, r3, r5
    5b72:	40a9      	lsls	r1, r5
    5b74:	430a      	orrs	r2, r1
    5b76:	1e51      	subs	r1, r2, #1
    5b78:	418a      	sbcs	r2, r1
    5b7a:	2100      	movs	r1, #0
    5b7c:	4317      	orrs	r7, r2
    5b7e:	e6af      	b.n	58e0 <__aeabi_dsub+0xa4>
    5b80:	000007ff 	.word	0x000007ff
    5b84:	ff7fffff 	.word	0xff7fffff
    5b88:	800fffff 	.word	0x800fffff
    5b8c:	2e00      	cmp	r6, #0
    5b8e:	d03e      	beq.n	5c0e <__aeabi_dsub+0x3d2>
    5b90:	4eb3      	ldr	r6, [pc, #716]	; (5e60 <__aeabi_dsub+0x624>)
    5b92:	45b4      	cmp	ip, r6
    5b94:	d045      	beq.n	5c22 <__aeabi_dsub+0x3e6>
    5b96:	2680      	movs	r6, #128	; 0x80
    5b98:	0436      	lsls	r6, r6, #16
    5b9a:	426d      	negs	r5, r5
    5b9c:	4334      	orrs	r4, r6
    5b9e:	2d38      	cmp	r5, #56	; 0x38
    5ba0:	dd00      	ble.n	5ba4 <__aeabi_dsub+0x368>
    5ba2:	e0a8      	b.n	5cf6 <__aeabi_dsub+0x4ba>
    5ba4:	2d1f      	cmp	r5, #31
    5ba6:	dd00      	ble.n	5baa <__aeabi_dsub+0x36e>
    5ba8:	e11f      	b.n	5dea <__aeabi_dsub+0x5ae>
    5baa:	2620      	movs	r6, #32
    5bac:	0027      	movs	r7, r4
    5bae:	4650      	mov	r0, sl
    5bb0:	1b76      	subs	r6, r6, r5
    5bb2:	40b7      	lsls	r7, r6
    5bb4:	40e8      	lsrs	r0, r5
    5bb6:	4307      	orrs	r7, r0
    5bb8:	4650      	mov	r0, sl
    5bba:	40b0      	lsls	r0, r6
    5bbc:	1e46      	subs	r6, r0, #1
    5bbe:	41b0      	sbcs	r0, r6
    5bc0:	40ec      	lsrs	r4, r5
    5bc2:	4338      	orrs	r0, r7
    5bc4:	1a17      	subs	r7, r2, r0
    5bc6:	42ba      	cmp	r2, r7
    5bc8:	4192      	sbcs	r2, r2
    5bca:	1b0c      	subs	r4, r1, r4
    5bcc:	4252      	negs	r2, r2
    5bce:	1aa4      	subs	r4, r4, r2
    5bd0:	4666      	mov	r6, ip
    5bd2:	4698      	mov	r8, r3
    5bd4:	e68b      	b.n	58ee <__aeabi_dsub+0xb2>
    5bd6:	4664      	mov	r4, ip
    5bd8:	4667      	mov	r7, ip
    5bda:	432c      	orrs	r4, r5
    5bdc:	d000      	beq.n	5be0 <__aeabi_dsub+0x3a4>
    5bde:	e68b      	b.n	58f8 <__aeabi_dsub+0xbc>
    5be0:	2500      	movs	r5, #0
    5be2:	2600      	movs	r6, #0
    5be4:	2700      	movs	r7, #0
    5be6:	e6ea      	b.n	59be <__aeabi_dsub+0x182>
    5be8:	001e      	movs	r6, r3
    5bea:	e6ad      	b.n	5948 <__aeabi_dsub+0x10c>
    5bec:	2b1f      	cmp	r3, #31
    5bee:	dc60      	bgt.n	5cb2 <__aeabi_dsub+0x476>
    5bf0:	2720      	movs	r7, #32
    5bf2:	1af8      	subs	r0, r7, r3
    5bf4:	000f      	movs	r7, r1
    5bf6:	4684      	mov	ip, r0
    5bf8:	4087      	lsls	r7, r0
    5bfa:	0010      	movs	r0, r2
    5bfc:	40d8      	lsrs	r0, r3
    5bfe:	4307      	orrs	r7, r0
    5c00:	4660      	mov	r0, ip
    5c02:	4082      	lsls	r2, r0
    5c04:	1e50      	subs	r0, r2, #1
    5c06:	4182      	sbcs	r2, r0
    5c08:	40d9      	lsrs	r1, r3
    5c0a:	4317      	orrs	r7, r2
    5c0c:	e6f5      	b.n	59fa <__aeabi_dsub+0x1be>
    5c0e:	0026      	movs	r6, r4
    5c10:	4650      	mov	r0, sl
    5c12:	4306      	orrs	r6, r0
    5c14:	d005      	beq.n	5c22 <__aeabi_dsub+0x3e6>
    5c16:	43ed      	mvns	r5, r5
    5c18:	2d00      	cmp	r5, #0
    5c1a:	d0d3      	beq.n	5bc4 <__aeabi_dsub+0x388>
    5c1c:	4e90      	ldr	r6, [pc, #576]	; (5e60 <__aeabi_dsub+0x624>)
    5c1e:	45b4      	cmp	ip, r6
    5c20:	d1bd      	bne.n	5b9e <__aeabi_dsub+0x362>
    5c22:	000c      	movs	r4, r1
    5c24:	0017      	movs	r7, r2
    5c26:	4666      	mov	r6, ip
    5c28:	4698      	mov	r8, r3
    5c2a:	e68d      	b.n	5948 <__aeabi_dsub+0x10c>
    5c2c:	488c      	ldr	r0, [pc, #560]	; (5e60 <__aeabi_dsub+0x624>)
    5c2e:	4283      	cmp	r3, r0
    5c30:	d00b      	beq.n	5c4a <__aeabi_dsub+0x40e>
    5c32:	4663      	mov	r3, ip
    5c34:	e6d9      	b.n	59ea <__aeabi_dsub+0x1ae>
    5c36:	2d00      	cmp	r5, #0
    5c38:	d000      	beq.n	5c3c <__aeabi_dsub+0x400>
    5c3a:	e096      	b.n	5d6a <__aeabi_dsub+0x52e>
    5c3c:	0008      	movs	r0, r1
    5c3e:	4310      	orrs	r0, r2
    5c40:	d100      	bne.n	5c44 <__aeabi_dsub+0x408>
    5c42:	e0e2      	b.n	5e0a <__aeabi_dsub+0x5ce>
    5c44:	000c      	movs	r4, r1
    5c46:	0017      	movs	r7, r2
    5c48:	4698      	mov	r8, r3
    5c4a:	4e85      	ldr	r6, [pc, #532]	; (5e60 <__aeabi_dsub+0x624>)
    5c4c:	e67c      	b.n	5948 <__aeabi_dsub+0x10c>
    5c4e:	2500      	movs	r5, #0
    5c50:	e780      	b.n	5b54 <__aeabi_dsub+0x318>
    5c52:	2100      	movs	r1, #0
    5c54:	e78e      	b.n	5b74 <__aeabi_dsub+0x338>
    5c56:	0023      	movs	r3, r4
    5c58:	4650      	mov	r0, sl
    5c5a:	4303      	orrs	r3, r0
    5c5c:	2e00      	cmp	r6, #0
    5c5e:	d000      	beq.n	5c62 <__aeabi_dsub+0x426>
    5c60:	e0a8      	b.n	5db4 <__aeabi_dsub+0x578>
    5c62:	2b00      	cmp	r3, #0
    5c64:	d100      	bne.n	5c68 <__aeabi_dsub+0x42c>
    5c66:	e0de      	b.n	5e26 <__aeabi_dsub+0x5ea>
    5c68:	000b      	movs	r3, r1
    5c6a:	4313      	orrs	r3, r2
    5c6c:	d100      	bne.n	5c70 <__aeabi_dsub+0x434>
    5c6e:	e66b      	b.n	5948 <__aeabi_dsub+0x10c>
    5c70:	4452      	add	r2, sl
    5c72:	4552      	cmp	r2, sl
    5c74:	4180      	sbcs	r0, r0
    5c76:	1864      	adds	r4, r4, r1
    5c78:	4240      	negs	r0, r0
    5c7a:	1824      	adds	r4, r4, r0
    5c7c:	0017      	movs	r7, r2
    5c7e:	0223      	lsls	r3, r4, #8
    5c80:	d400      	bmi.n	5c84 <__aeabi_dsub+0x448>
    5c82:	e6fd      	b.n	5a80 <__aeabi_dsub+0x244>
    5c84:	4b77      	ldr	r3, [pc, #476]	; (5e64 <__aeabi_dsub+0x628>)
    5c86:	4666      	mov	r6, ip
    5c88:	401c      	ands	r4, r3
    5c8a:	e65d      	b.n	5948 <__aeabi_dsub+0x10c>
    5c8c:	0025      	movs	r5, r4
    5c8e:	4650      	mov	r0, sl
    5c90:	4305      	orrs	r5, r0
    5c92:	2e00      	cmp	r6, #0
    5c94:	d1cf      	bne.n	5c36 <__aeabi_dsub+0x3fa>
    5c96:	2d00      	cmp	r5, #0
    5c98:	d14f      	bne.n	5d3a <__aeabi_dsub+0x4fe>
    5c9a:	000c      	movs	r4, r1
    5c9c:	4314      	orrs	r4, r2
    5c9e:	d100      	bne.n	5ca2 <__aeabi_dsub+0x466>
    5ca0:	e0a0      	b.n	5de4 <__aeabi_dsub+0x5a8>
    5ca2:	000c      	movs	r4, r1
    5ca4:	0017      	movs	r7, r2
    5ca6:	4698      	mov	r8, r3
    5ca8:	e64e      	b.n	5948 <__aeabi_dsub+0x10c>
    5caa:	4666      	mov	r6, ip
    5cac:	2400      	movs	r4, #0
    5cae:	2700      	movs	r7, #0
    5cb0:	e685      	b.n	59be <__aeabi_dsub+0x182>
    5cb2:	001f      	movs	r7, r3
    5cb4:	0008      	movs	r0, r1
    5cb6:	3f20      	subs	r7, #32
    5cb8:	40f8      	lsrs	r0, r7
    5cba:	0007      	movs	r7, r0
    5cbc:	2b20      	cmp	r3, #32
    5cbe:	d100      	bne.n	5cc2 <__aeabi_dsub+0x486>
    5cc0:	e08e      	b.n	5de0 <__aeabi_dsub+0x5a4>
    5cc2:	2040      	movs	r0, #64	; 0x40
    5cc4:	1ac3      	subs	r3, r0, r3
    5cc6:	4099      	lsls	r1, r3
    5cc8:	430a      	orrs	r2, r1
    5cca:	1e51      	subs	r1, r2, #1
    5ccc:	418a      	sbcs	r2, r1
    5cce:	2100      	movs	r1, #0
    5cd0:	4317      	orrs	r7, r2
    5cd2:	e692      	b.n	59fa <__aeabi_dsub+0x1be>
    5cd4:	2e00      	cmp	r6, #0
    5cd6:	d114      	bne.n	5d02 <__aeabi_dsub+0x4c6>
    5cd8:	0026      	movs	r6, r4
    5cda:	4650      	mov	r0, sl
    5cdc:	4306      	orrs	r6, r0
    5cde:	d062      	beq.n	5da6 <__aeabi_dsub+0x56a>
    5ce0:	43db      	mvns	r3, r3
    5ce2:	2b00      	cmp	r3, #0
    5ce4:	d15c      	bne.n	5da0 <__aeabi_dsub+0x564>
    5ce6:	1887      	adds	r7, r0, r2
    5ce8:	4297      	cmp	r7, r2
    5cea:	4192      	sbcs	r2, r2
    5cec:	1864      	adds	r4, r4, r1
    5cee:	4252      	negs	r2, r2
    5cf0:	18a4      	adds	r4, r4, r2
    5cf2:	4666      	mov	r6, ip
    5cf4:	e687      	b.n	5a06 <__aeabi_dsub+0x1ca>
    5cf6:	4650      	mov	r0, sl
    5cf8:	4320      	orrs	r0, r4
    5cfa:	1e44      	subs	r4, r0, #1
    5cfc:	41a0      	sbcs	r0, r4
    5cfe:	2400      	movs	r4, #0
    5d00:	e760      	b.n	5bc4 <__aeabi_dsub+0x388>
    5d02:	4e57      	ldr	r6, [pc, #348]	; (5e60 <__aeabi_dsub+0x624>)
    5d04:	45b4      	cmp	ip, r6
    5d06:	d04e      	beq.n	5da6 <__aeabi_dsub+0x56a>
    5d08:	2680      	movs	r6, #128	; 0x80
    5d0a:	0436      	lsls	r6, r6, #16
    5d0c:	425b      	negs	r3, r3
    5d0e:	4334      	orrs	r4, r6
    5d10:	2b38      	cmp	r3, #56	; 0x38
    5d12:	dd00      	ble.n	5d16 <__aeabi_dsub+0x4da>
    5d14:	e07f      	b.n	5e16 <__aeabi_dsub+0x5da>
    5d16:	2b1f      	cmp	r3, #31
    5d18:	dd00      	ble.n	5d1c <__aeabi_dsub+0x4e0>
    5d1a:	e08b      	b.n	5e34 <__aeabi_dsub+0x5f8>
    5d1c:	2620      	movs	r6, #32
    5d1e:	0027      	movs	r7, r4
    5d20:	4650      	mov	r0, sl
    5d22:	1af6      	subs	r6, r6, r3
    5d24:	40b7      	lsls	r7, r6
    5d26:	40d8      	lsrs	r0, r3
    5d28:	4307      	orrs	r7, r0
    5d2a:	4650      	mov	r0, sl
    5d2c:	40b0      	lsls	r0, r6
    5d2e:	1e46      	subs	r6, r0, #1
    5d30:	41b0      	sbcs	r0, r6
    5d32:	4307      	orrs	r7, r0
    5d34:	40dc      	lsrs	r4, r3
    5d36:	18bf      	adds	r7, r7, r2
    5d38:	e7d6      	b.n	5ce8 <__aeabi_dsub+0x4ac>
    5d3a:	000d      	movs	r5, r1
    5d3c:	4315      	orrs	r5, r2
    5d3e:	d100      	bne.n	5d42 <__aeabi_dsub+0x506>
    5d40:	e602      	b.n	5948 <__aeabi_dsub+0x10c>
    5d42:	4650      	mov	r0, sl
    5d44:	1a80      	subs	r0, r0, r2
    5d46:	4582      	cmp	sl, r0
    5d48:	41bf      	sbcs	r7, r7
    5d4a:	1a65      	subs	r5, r4, r1
    5d4c:	427f      	negs	r7, r7
    5d4e:	1bed      	subs	r5, r5, r7
    5d50:	4684      	mov	ip, r0
    5d52:	0228      	lsls	r0, r5, #8
    5d54:	d400      	bmi.n	5d58 <__aeabi_dsub+0x51c>
    5d56:	e68d      	b.n	5a74 <__aeabi_dsub+0x238>
    5d58:	4650      	mov	r0, sl
    5d5a:	1a17      	subs	r7, r2, r0
    5d5c:	42ba      	cmp	r2, r7
    5d5e:	4192      	sbcs	r2, r2
    5d60:	1b0c      	subs	r4, r1, r4
    5d62:	4252      	negs	r2, r2
    5d64:	1aa4      	subs	r4, r4, r2
    5d66:	4698      	mov	r8, r3
    5d68:	e5ee      	b.n	5948 <__aeabi_dsub+0x10c>
    5d6a:	000d      	movs	r5, r1
    5d6c:	4315      	orrs	r5, r2
    5d6e:	d100      	bne.n	5d72 <__aeabi_dsub+0x536>
    5d70:	e76b      	b.n	5c4a <__aeabi_dsub+0x40e>
    5d72:	4650      	mov	r0, sl
    5d74:	0767      	lsls	r7, r4, #29
    5d76:	08c0      	lsrs	r0, r0, #3
    5d78:	4307      	orrs	r7, r0
    5d7a:	2080      	movs	r0, #128	; 0x80
    5d7c:	08e4      	lsrs	r4, r4, #3
    5d7e:	0300      	lsls	r0, r0, #12
    5d80:	4204      	tst	r4, r0
    5d82:	d007      	beq.n	5d94 <__aeabi_dsub+0x558>
    5d84:	08cd      	lsrs	r5, r1, #3
    5d86:	4205      	tst	r5, r0
    5d88:	d104      	bne.n	5d94 <__aeabi_dsub+0x558>
    5d8a:	002c      	movs	r4, r5
    5d8c:	4698      	mov	r8, r3
    5d8e:	08d7      	lsrs	r7, r2, #3
    5d90:	0749      	lsls	r1, r1, #29
    5d92:	430f      	orrs	r7, r1
    5d94:	0f7b      	lsrs	r3, r7, #29
    5d96:	00e4      	lsls	r4, r4, #3
    5d98:	431c      	orrs	r4, r3
    5d9a:	00ff      	lsls	r7, r7, #3
    5d9c:	4e30      	ldr	r6, [pc, #192]	; (5e60 <__aeabi_dsub+0x624>)
    5d9e:	e5d3      	b.n	5948 <__aeabi_dsub+0x10c>
    5da0:	4e2f      	ldr	r6, [pc, #188]	; (5e60 <__aeabi_dsub+0x624>)
    5da2:	45b4      	cmp	ip, r6
    5da4:	d1b4      	bne.n	5d10 <__aeabi_dsub+0x4d4>
    5da6:	000c      	movs	r4, r1
    5da8:	0017      	movs	r7, r2
    5daa:	4666      	mov	r6, ip
    5dac:	e5cc      	b.n	5948 <__aeabi_dsub+0x10c>
    5dae:	2700      	movs	r7, #0
    5db0:	2400      	movs	r4, #0
    5db2:	e5e8      	b.n	5986 <__aeabi_dsub+0x14a>
    5db4:	2b00      	cmp	r3, #0
    5db6:	d039      	beq.n	5e2c <__aeabi_dsub+0x5f0>
    5db8:	000b      	movs	r3, r1
    5dba:	4313      	orrs	r3, r2
    5dbc:	d100      	bne.n	5dc0 <__aeabi_dsub+0x584>
    5dbe:	e744      	b.n	5c4a <__aeabi_dsub+0x40e>
    5dc0:	08c0      	lsrs	r0, r0, #3
    5dc2:	0767      	lsls	r7, r4, #29
    5dc4:	4307      	orrs	r7, r0
    5dc6:	2080      	movs	r0, #128	; 0x80
    5dc8:	08e4      	lsrs	r4, r4, #3
    5dca:	0300      	lsls	r0, r0, #12
    5dcc:	4204      	tst	r4, r0
    5dce:	d0e1      	beq.n	5d94 <__aeabi_dsub+0x558>
    5dd0:	08cb      	lsrs	r3, r1, #3
    5dd2:	4203      	tst	r3, r0
    5dd4:	d1de      	bne.n	5d94 <__aeabi_dsub+0x558>
    5dd6:	08d7      	lsrs	r7, r2, #3
    5dd8:	0749      	lsls	r1, r1, #29
    5dda:	430f      	orrs	r7, r1
    5ddc:	001c      	movs	r4, r3
    5dde:	e7d9      	b.n	5d94 <__aeabi_dsub+0x558>
    5de0:	2100      	movs	r1, #0
    5de2:	e771      	b.n	5cc8 <__aeabi_dsub+0x48c>
    5de4:	2500      	movs	r5, #0
    5de6:	2700      	movs	r7, #0
    5de8:	e5e9      	b.n	59be <__aeabi_dsub+0x182>
    5dea:	002e      	movs	r6, r5
    5dec:	0027      	movs	r7, r4
    5dee:	3e20      	subs	r6, #32
    5df0:	40f7      	lsrs	r7, r6
    5df2:	2d20      	cmp	r5, #32
    5df4:	d02f      	beq.n	5e56 <__aeabi_dsub+0x61a>
    5df6:	2640      	movs	r6, #64	; 0x40
    5df8:	1b75      	subs	r5, r6, r5
    5dfa:	40ac      	lsls	r4, r5
    5dfc:	4650      	mov	r0, sl
    5dfe:	4320      	orrs	r0, r4
    5e00:	1e44      	subs	r4, r0, #1
    5e02:	41a0      	sbcs	r0, r4
    5e04:	2400      	movs	r4, #0
    5e06:	4338      	orrs	r0, r7
    5e08:	e6dc      	b.n	5bc4 <__aeabi_dsub+0x388>
    5e0a:	2480      	movs	r4, #128	; 0x80
    5e0c:	2500      	movs	r5, #0
    5e0e:	0324      	lsls	r4, r4, #12
    5e10:	4e13      	ldr	r6, [pc, #76]	; (5e60 <__aeabi_dsub+0x624>)
    5e12:	2700      	movs	r7, #0
    5e14:	e5d3      	b.n	59be <__aeabi_dsub+0x182>
    5e16:	4650      	mov	r0, sl
    5e18:	4320      	orrs	r0, r4
    5e1a:	0007      	movs	r7, r0
    5e1c:	1e78      	subs	r0, r7, #1
    5e1e:	4187      	sbcs	r7, r0
    5e20:	2400      	movs	r4, #0
    5e22:	18bf      	adds	r7, r7, r2
    5e24:	e760      	b.n	5ce8 <__aeabi_dsub+0x4ac>
    5e26:	000c      	movs	r4, r1
    5e28:	0017      	movs	r7, r2
    5e2a:	e58d      	b.n	5948 <__aeabi_dsub+0x10c>
    5e2c:	000c      	movs	r4, r1
    5e2e:	0017      	movs	r7, r2
    5e30:	4e0b      	ldr	r6, [pc, #44]	; (5e60 <__aeabi_dsub+0x624>)
    5e32:	e589      	b.n	5948 <__aeabi_dsub+0x10c>
    5e34:	001e      	movs	r6, r3
    5e36:	0027      	movs	r7, r4
    5e38:	3e20      	subs	r6, #32
    5e3a:	40f7      	lsrs	r7, r6
    5e3c:	2b20      	cmp	r3, #32
    5e3e:	d00c      	beq.n	5e5a <__aeabi_dsub+0x61e>
    5e40:	2640      	movs	r6, #64	; 0x40
    5e42:	1af3      	subs	r3, r6, r3
    5e44:	409c      	lsls	r4, r3
    5e46:	4650      	mov	r0, sl
    5e48:	4320      	orrs	r0, r4
    5e4a:	1e44      	subs	r4, r0, #1
    5e4c:	41a0      	sbcs	r0, r4
    5e4e:	4307      	orrs	r7, r0
    5e50:	2400      	movs	r4, #0
    5e52:	18bf      	adds	r7, r7, r2
    5e54:	e748      	b.n	5ce8 <__aeabi_dsub+0x4ac>
    5e56:	2400      	movs	r4, #0
    5e58:	e7d0      	b.n	5dfc <__aeabi_dsub+0x5c0>
    5e5a:	2400      	movs	r4, #0
    5e5c:	e7f3      	b.n	5e46 <__aeabi_dsub+0x60a>
    5e5e:	46c0      	nop			; (mov r8, r8)
    5e60:	000007ff 	.word	0x000007ff
    5e64:	ff7fffff 	.word	0xff7fffff

00005e68 <__aeabi_dcmpun>:
    5e68:	b570      	push	{r4, r5, r6, lr}
    5e6a:	4e0e      	ldr	r6, [pc, #56]	; (5ea4 <__aeabi_dcmpun+0x3c>)
    5e6c:	030d      	lsls	r5, r1, #12
    5e6e:	031c      	lsls	r4, r3, #12
    5e70:	0049      	lsls	r1, r1, #1
    5e72:	005b      	lsls	r3, r3, #1
    5e74:	0b2d      	lsrs	r5, r5, #12
    5e76:	0d49      	lsrs	r1, r1, #21
    5e78:	0b24      	lsrs	r4, r4, #12
    5e7a:	0d5b      	lsrs	r3, r3, #21
    5e7c:	42b1      	cmp	r1, r6
    5e7e:	d004      	beq.n	5e8a <__aeabi_dcmpun+0x22>
    5e80:	4908      	ldr	r1, [pc, #32]	; (5ea4 <__aeabi_dcmpun+0x3c>)
    5e82:	2000      	movs	r0, #0
    5e84:	428b      	cmp	r3, r1
    5e86:	d008      	beq.n	5e9a <__aeabi_dcmpun+0x32>
    5e88:	bd70      	pop	{r4, r5, r6, pc}
    5e8a:	4305      	orrs	r5, r0
    5e8c:	2001      	movs	r0, #1
    5e8e:	2d00      	cmp	r5, #0
    5e90:	d1fa      	bne.n	5e88 <__aeabi_dcmpun+0x20>
    5e92:	4904      	ldr	r1, [pc, #16]	; (5ea4 <__aeabi_dcmpun+0x3c>)
    5e94:	2000      	movs	r0, #0
    5e96:	428b      	cmp	r3, r1
    5e98:	d1f6      	bne.n	5e88 <__aeabi_dcmpun+0x20>
    5e9a:	4314      	orrs	r4, r2
    5e9c:	0020      	movs	r0, r4
    5e9e:	1e44      	subs	r4, r0, #1
    5ea0:	41a0      	sbcs	r0, r4
    5ea2:	e7f1      	b.n	5e88 <__aeabi_dcmpun+0x20>
    5ea4:	000007ff 	.word	0x000007ff

00005ea8 <__aeabi_d2iz>:
    5ea8:	b530      	push	{r4, r5, lr}
    5eaa:	4d13      	ldr	r5, [pc, #76]	; (5ef8 <__aeabi_d2iz+0x50>)
    5eac:	030a      	lsls	r2, r1, #12
    5eae:	004b      	lsls	r3, r1, #1
    5eb0:	0b12      	lsrs	r2, r2, #12
    5eb2:	0d5b      	lsrs	r3, r3, #21
    5eb4:	0fc9      	lsrs	r1, r1, #31
    5eb6:	2400      	movs	r4, #0
    5eb8:	42ab      	cmp	r3, r5
    5eba:	dd10      	ble.n	5ede <__aeabi_d2iz+0x36>
    5ebc:	4c0f      	ldr	r4, [pc, #60]	; (5efc <__aeabi_d2iz+0x54>)
    5ebe:	42a3      	cmp	r3, r4
    5ec0:	dc0f      	bgt.n	5ee2 <__aeabi_d2iz+0x3a>
    5ec2:	2480      	movs	r4, #128	; 0x80
    5ec4:	4d0e      	ldr	r5, [pc, #56]	; (5f00 <__aeabi_d2iz+0x58>)
    5ec6:	0364      	lsls	r4, r4, #13
    5ec8:	4322      	orrs	r2, r4
    5eca:	1aed      	subs	r5, r5, r3
    5ecc:	2d1f      	cmp	r5, #31
    5ece:	dd0b      	ble.n	5ee8 <__aeabi_d2iz+0x40>
    5ed0:	480c      	ldr	r0, [pc, #48]	; (5f04 <__aeabi_d2iz+0x5c>)
    5ed2:	1ac3      	subs	r3, r0, r3
    5ed4:	40da      	lsrs	r2, r3
    5ed6:	4254      	negs	r4, r2
    5ed8:	2900      	cmp	r1, #0
    5eda:	d100      	bne.n	5ede <__aeabi_d2iz+0x36>
    5edc:	0014      	movs	r4, r2
    5ede:	0020      	movs	r0, r4
    5ee0:	bd30      	pop	{r4, r5, pc}
    5ee2:	4b09      	ldr	r3, [pc, #36]	; (5f08 <__aeabi_d2iz+0x60>)
    5ee4:	18cc      	adds	r4, r1, r3
    5ee6:	e7fa      	b.n	5ede <__aeabi_d2iz+0x36>
    5ee8:	4c08      	ldr	r4, [pc, #32]	; (5f0c <__aeabi_d2iz+0x64>)
    5eea:	40e8      	lsrs	r0, r5
    5eec:	46a4      	mov	ip, r4
    5eee:	4463      	add	r3, ip
    5ef0:	409a      	lsls	r2, r3
    5ef2:	4302      	orrs	r2, r0
    5ef4:	e7ef      	b.n	5ed6 <__aeabi_d2iz+0x2e>
    5ef6:	46c0      	nop			; (mov r8, r8)
    5ef8:	000003fe 	.word	0x000003fe
    5efc:	0000041d 	.word	0x0000041d
    5f00:	00000433 	.word	0x00000433
    5f04:	00000413 	.word	0x00000413
    5f08:	7fffffff 	.word	0x7fffffff
    5f0c:	fffffbed 	.word	0xfffffbed

00005f10 <__aeabi_i2d>:
    5f10:	b570      	push	{r4, r5, r6, lr}
    5f12:	2800      	cmp	r0, #0
    5f14:	d030      	beq.n	5f78 <__aeabi_i2d+0x68>
    5f16:	17c3      	asrs	r3, r0, #31
    5f18:	18c4      	adds	r4, r0, r3
    5f1a:	405c      	eors	r4, r3
    5f1c:	0fc5      	lsrs	r5, r0, #31
    5f1e:	0020      	movs	r0, r4
    5f20:	f000 f94c 	bl	61bc <__clzsi2>
    5f24:	4b17      	ldr	r3, [pc, #92]	; (5f84 <__aeabi_i2d+0x74>)
    5f26:	4a18      	ldr	r2, [pc, #96]	; (5f88 <__aeabi_i2d+0x78>)
    5f28:	1a1b      	subs	r3, r3, r0
    5f2a:	1ad2      	subs	r2, r2, r3
    5f2c:	2a1f      	cmp	r2, #31
    5f2e:	dd18      	ble.n	5f62 <__aeabi_i2d+0x52>
    5f30:	4a16      	ldr	r2, [pc, #88]	; (5f8c <__aeabi_i2d+0x7c>)
    5f32:	1ad2      	subs	r2, r2, r3
    5f34:	4094      	lsls	r4, r2
    5f36:	2200      	movs	r2, #0
    5f38:	0324      	lsls	r4, r4, #12
    5f3a:	055b      	lsls	r3, r3, #21
    5f3c:	0b24      	lsrs	r4, r4, #12
    5f3e:	0d5b      	lsrs	r3, r3, #21
    5f40:	2100      	movs	r1, #0
    5f42:	0010      	movs	r0, r2
    5f44:	0324      	lsls	r4, r4, #12
    5f46:	0d0a      	lsrs	r2, r1, #20
    5f48:	0b24      	lsrs	r4, r4, #12
    5f4a:	0512      	lsls	r2, r2, #20
    5f4c:	4322      	orrs	r2, r4
    5f4e:	4c10      	ldr	r4, [pc, #64]	; (5f90 <__aeabi_i2d+0x80>)
    5f50:	051b      	lsls	r3, r3, #20
    5f52:	4022      	ands	r2, r4
    5f54:	4313      	orrs	r3, r2
    5f56:	005b      	lsls	r3, r3, #1
    5f58:	07ed      	lsls	r5, r5, #31
    5f5a:	085b      	lsrs	r3, r3, #1
    5f5c:	432b      	orrs	r3, r5
    5f5e:	0019      	movs	r1, r3
    5f60:	bd70      	pop	{r4, r5, r6, pc}
    5f62:	0021      	movs	r1, r4
    5f64:	4091      	lsls	r1, r2
    5f66:	000a      	movs	r2, r1
    5f68:	210b      	movs	r1, #11
    5f6a:	1a08      	subs	r0, r1, r0
    5f6c:	40c4      	lsrs	r4, r0
    5f6e:	055b      	lsls	r3, r3, #21
    5f70:	0324      	lsls	r4, r4, #12
    5f72:	0b24      	lsrs	r4, r4, #12
    5f74:	0d5b      	lsrs	r3, r3, #21
    5f76:	e7e3      	b.n	5f40 <__aeabi_i2d+0x30>
    5f78:	2500      	movs	r5, #0
    5f7a:	2300      	movs	r3, #0
    5f7c:	2400      	movs	r4, #0
    5f7e:	2200      	movs	r2, #0
    5f80:	e7de      	b.n	5f40 <__aeabi_i2d+0x30>
    5f82:	46c0      	nop			; (mov r8, r8)
    5f84:	0000041e 	.word	0x0000041e
    5f88:	00000433 	.word	0x00000433
    5f8c:	00000413 	.word	0x00000413
    5f90:	800fffff 	.word	0x800fffff

00005f94 <__aeabi_ui2d>:
    5f94:	b510      	push	{r4, lr}
    5f96:	1e04      	subs	r4, r0, #0
    5f98:	d028      	beq.n	5fec <__aeabi_ui2d+0x58>
    5f9a:	f000 f90f 	bl	61bc <__clzsi2>
    5f9e:	4b15      	ldr	r3, [pc, #84]	; (5ff4 <__aeabi_ui2d+0x60>)
    5fa0:	4a15      	ldr	r2, [pc, #84]	; (5ff8 <__aeabi_ui2d+0x64>)
    5fa2:	1a1b      	subs	r3, r3, r0
    5fa4:	1ad2      	subs	r2, r2, r3
    5fa6:	2a1f      	cmp	r2, #31
    5fa8:	dd15      	ble.n	5fd6 <__aeabi_ui2d+0x42>
    5faa:	4a14      	ldr	r2, [pc, #80]	; (5ffc <__aeabi_ui2d+0x68>)
    5fac:	1ad2      	subs	r2, r2, r3
    5fae:	4094      	lsls	r4, r2
    5fb0:	2200      	movs	r2, #0
    5fb2:	0324      	lsls	r4, r4, #12
    5fb4:	055b      	lsls	r3, r3, #21
    5fb6:	0b24      	lsrs	r4, r4, #12
    5fb8:	0d5b      	lsrs	r3, r3, #21
    5fba:	2100      	movs	r1, #0
    5fbc:	0010      	movs	r0, r2
    5fbe:	0324      	lsls	r4, r4, #12
    5fc0:	0d0a      	lsrs	r2, r1, #20
    5fc2:	0b24      	lsrs	r4, r4, #12
    5fc4:	0512      	lsls	r2, r2, #20
    5fc6:	4322      	orrs	r2, r4
    5fc8:	4c0d      	ldr	r4, [pc, #52]	; (6000 <__aeabi_ui2d+0x6c>)
    5fca:	051b      	lsls	r3, r3, #20
    5fcc:	4022      	ands	r2, r4
    5fce:	4313      	orrs	r3, r2
    5fd0:	005b      	lsls	r3, r3, #1
    5fd2:	0859      	lsrs	r1, r3, #1
    5fd4:	bd10      	pop	{r4, pc}
    5fd6:	0021      	movs	r1, r4
    5fd8:	4091      	lsls	r1, r2
    5fda:	000a      	movs	r2, r1
    5fdc:	210b      	movs	r1, #11
    5fde:	1a08      	subs	r0, r1, r0
    5fe0:	40c4      	lsrs	r4, r0
    5fe2:	055b      	lsls	r3, r3, #21
    5fe4:	0324      	lsls	r4, r4, #12
    5fe6:	0b24      	lsrs	r4, r4, #12
    5fe8:	0d5b      	lsrs	r3, r3, #21
    5fea:	e7e6      	b.n	5fba <__aeabi_ui2d+0x26>
    5fec:	2300      	movs	r3, #0
    5fee:	2400      	movs	r4, #0
    5ff0:	2200      	movs	r2, #0
    5ff2:	e7e2      	b.n	5fba <__aeabi_ui2d+0x26>
    5ff4:	0000041e 	.word	0x0000041e
    5ff8:	00000433 	.word	0x00000433
    5ffc:	00000413 	.word	0x00000413
    6000:	800fffff 	.word	0x800fffff

00006004 <__aeabi_f2d>:
    6004:	0041      	lsls	r1, r0, #1
    6006:	0e09      	lsrs	r1, r1, #24
    6008:	1c4b      	adds	r3, r1, #1
    600a:	b570      	push	{r4, r5, r6, lr}
    600c:	b2db      	uxtb	r3, r3
    600e:	0246      	lsls	r6, r0, #9
    6010:	0a75      	lsrs	r5, r6, #9
    6012:	0fc4      	lsrs	r4, r0, #31
    6014:	2b01      	cmp	r3, #1
    6016:	dd14      	ble.n	6042 <__aeabi_f2d+0x3e>
    6018:	23e0      	movs	r3, #224	; 0xe0
    601a:	009b      	lsls	r3, r3, #2
    601c:	076d      	lsls	r5, r5, #29
    601e:	0b36      	lsrs	r6, r6, #12
    6020:	18cb      	adds	r3, r1, r3
    6022:	2100      	movs	r1, #0
    6024:	0d0a      	lsrs	r2, r1, #20
    6026:	0028      	movs	r0, r5
    6028:	0512      	lsls	r2, r2, #20
    602a:	4d1c      	ldr	r5, [pc, #112]	; (609c <__aeabi_f2d+0x98>)
    602c:	4332      	orrs	r2, r6
    602e:	055b      	lsls	r3, r3, #21
    6030:	402a      	ands	r2, r5
    6032:	085b      	lsrs	r3, r3, #1
    6034:	4313      	orrs	r3, r2
    6036:	005b      	lsls	r3, r3, #1
    6038:	07e4      	lsls	r4, r4, #31
    603a:	085b      	lsrs	r3, r3, #1
    603c:	4323      	orrs	r3, r4
    603e:	0019      	movs	r1, r3
    6040:	bd70      	pop	{r4, r5, r6, pc}
    6042:	2900      	cmp	r1, #0
    6044:	d114      	bne.n	6070 <__aeabi_f2d+0x6c>
    6046:	2d00      	cmp	r5, #0
    6048:	d01e      	beq.n	6088 <__aeabi_f2d+0x84>
    604a:	0028      	movs	r0, r5
    604c:	f000 f8b6 	bl	61bc <__clzsi2>
    6050:	280a      	cmp	r0, #10
    6052:	dc1c      	bgt.n	608e <__aeabi_f2d+0x8a>
    6054:	230b      	movs	r3, #11
    6056:	002a      	movs	r2, r5
    6058:	1a1b      	subs	r3, r3, r0
    605a:	40da      	lsrs	r2, r3
    605c:	0003      	movs	r3, r0
    605e:	3315      	adds	r3, #21
    6060:	409d      	lsls	r5, r3
    6062:	4b0f      	ldr	r3, [pc, #60]	; (60a0 <__aeabi_f2d+0x9c>)
    6064:	0312      	lsls	r2, r2, #12
    6066:	1a1b      	subs	r3, r3, r0
    6068:	055b      	lsls	r3, r3, #21
    606a:	0b16      	lsrs	r6, r2, #12
    606c:	0d5b      	lsrs	r3, r3, #21
    606e:	e7d8      	b.n	6022 <__aeabi_f2d+0x1e>
    6070:	2d00      	cmp	r5, #0
    6072:	d006      	beq.n	6082 <__aeabi_f2d+0x7e>
    6074:	0b32      	lsrs	r2, r6, #12
    6076:	2680      	movs	r6, #128	; 0x80
    6078:	0336      	lsls	r6, r6, #12
    607a:	076d      	lsls	r5, r5, #29
    607c:	4316      	orrs	r6, r2
    607e:	4b09      	ldr	r3, [pc, #36]	; (60a4 <__aeabi_f2d+0xa0>)
    6080:	e7cf      	b.n	6022 <__aeabi_f2d+0x1e>
    6082:	4b08      	ldr	r3, [pc, #32]	; (60a4 <__aeabi_f2d+0xa0>)
    6084:	2600      	movs	r6, #0
    6086:	e7cc      	b.n	6022 <__aeabi_f2d+0x1e>
    6088:	2300      	movs	r3, #0
    608a:	2600      	movs	r6, #0
    608c:	e7c9      	b.n	6022 <__aeabi_f2d+0x1e>
    608e:	0003      	movs	r3, r0
    6090:	002a      	movs	r2, r5
    6092:	3b0b      	subs	r3, #11
    6094:	409a      	lsls	r2, r3
    6096:	2500      	movs	r5, #0
    6098:	e7e3      	b.n	6062 <__aeabi_f2d+0x5e>
    609a:	46c0      	nop			; (mov r8, r8)
    609c:	800fffff 	.word	0x800fffff
    60a0:	00000389 	.word	0x00000389
    60a4:	000007ff 	.word	0x000007ff

000060a8 <__aeabi_d2f>:
    60a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    60aa:	004c      	lsls	r4, r1, #1
    60ac:	0d64      	lsrs	r4, r4, #21
    60ae:	030b      	lsls	r3, r1, #12
    60b0:	1c62      	adds	r2, r4, #1
    60b2:	0f45      	lsrs	r5, r0, #29
    60b4:	0a5b      	lsrs	r3, r3, #9
    60b6:	0552      	lsls	r2, r2, #21
    60b8:	432b      	orrs	r3, r5
    60ba:	0fc9      	lsrs	r1, r1, #31
    60bc:	00c5      	lsls	r5, r0, #3
    60be:	0d52      	lsrs	r2, r2, #21
    60c0:	2a01      	cmp	r2, #1
    60c2:	dd28      	ble.n	6116 <__aeabi_d2f+0x6e>
    60c4:	4a3a      	ldr	r2, [pc, #232]	; (61b0 <__aeabi_d2f+0x108>)
    60c6:	18a6      	adds	r6, r4, r2
    60c8:	2efe      	cmp	r6, #254	; 0xfe
    60ca:	dc1b      	bgt.n	6104 <__aeabi_d2f+0x5c>
    60cc:	2e00      	cmp	r6, #0
    60ce:	dd3e      	ble.n	614e <__aeabi_d2f+0xa6>
    60d0:	0180      	lsls	r0, r0, #6
    60d2:	0002      	movs	r2, r0
    60d4:	1e50      	subs	r0, r2, #1
    60d6:	4182      	sbcs	r2, r0
    60d8:	0f6d      	lsrs	r5, r5, #29
    60da:	432a      	orrs	r2, r5
    60dc:	00db      	lsls	r3, r3, #3
    60de:	4313      	orrs	r3, r2
    60e0:	075a      	lsls	r2, r3, #29
    60e2:	d004      	beq.n	60ee <__aeabi_d2f+0x46>
    60e4:	220f      	movs	r2, #15
    60e6:	401a      	ands	r2, r3
    60e8:	2a04      	cmp	r2, #4
    60ea:	d000      	beq.n	60ee <__aeabi_d2f+0x46>
    60ec:	3304      	adds	r3, #4
    60ee:	2280      	movs	r2, #128	; 0x80
    60f0:	04d2      	lsls	r2, r2, #19
    60f2:	401a      	ands	r2, r3
    60f4:	d05a      	beq.n	61ac <__aeabi_d2f+0x104>
    60f6:	3601      	adds	r6, #1
    60f8:	2eff      	cmp	r6, #255	; 0xff
    60fa:	d003      	beq.n	6104 <__aeabi_d2f+0x5c>
    60fc:	019b      	lsls	r3, r3, #6
    60fe:	0a5b      	lsrs	r3, r3, #9
    6100:	b2f4      	uxtb	r4, r6
    6102:	e001      	b.n	6108 <__aeabi_d2f+0x60>
    6104:	24ff      	movs	r4, #255	; 0xff
    6106:	2300      	movs	r3, #0
    6108:	0258      	lsls	r0, r3, #9
    610a:	05e4      	lsls	r4, r4, #23
    610c:	0a40      	lsrs	r0, r0, #9
    610e:	07c9      	lsls	r1, r1, #31
    6110:	4320      	orrs	r0, r4
    6112:	4308      	orrs	r0, r1
    6114:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6116:	2c00      	cmp	r4, #0
    6118:	d007      	beq.n	612a <__aeabi_d2f+0x82>
    611a:	431d      	orrs	r5, r3
    611c:	d0f2      	beq.n	6104 <__aeabi_d2f+0x5c>
    611e:	2080      	movs	r0, #128	; 0x80
    6120:	00db      	lsls	r3, r3, #3
    6122:	0480      	lsls	r0, r0, #18
    6124:	4303      	orrs	r3, r0
    6126:	26ff      	movs	r6, #255	; 0xff
    6128:	e7da      	b.n	60e0 <__aeabi_d2f+0x38>
    612a:	432b      	orrs	r3, r5
    612c:	d003      	beq.n	6136 <__aeabi_d2f+0x8e>
    612e:	2305      	movs	r3, #5
    6130:	08db      	lsrs	r3, r3, #3
    6132:	2cff      	cmp	r4, #255	; 0xff
    6134:	d003      	beq.n	613e <__aeabi_d2f+0x96>
    6136:	025b      	lsls	r3, r3, #9
    6138:	0a5b      	lsrs	r3, r3, #9
    613a:	b2e4      	uxtb	r4, r4
    613c:	e7e4      	b.n	6108 <__aeabi_d2f+0x60>
    613e:	2b00      	cmp	r3, #0
    6140:	d032      	beq.n	61a8 <__aeabi_d2f+0x100>
    6142:	2080      	movs	r0, #128	; 0x80
    6144:	03c0      	lsls	r0, r0, #15
    6146:	4303      	orrs	r3, r0
    6148:	025b      	lsls	r3, r3, #9
    614a:	0a5b      	lsrs	r3, r3, #9
    614c:	e7dc      	b.n	6108 <__aeabi_d2f+0x60>
    614e:	0032      	movs	r2, r6
    6150:	3217      	adds	r2, #23
    6152:	db14      	blt.n	617e <__aeabi_d2f+0xd6>
    6154:	2280      	movs	r2, #128	; 0x80
    6156:	271e      	movs	r7, #30
    6158:	0412      	lsls	r2, r2, #16
    615a:	4313      	orrs	r3, r2
    615c:	1bbf      	subs	r7, r7, r6
    615e:	2f1f      	cmp	r7, #31
    6160:	dc0f      	bgt.n	6182 <__aeabi_d2f+0xda>
    6162:	4a14      	ldr	r2, [pc, #80]	; (61b4 <__aeabi_d2f+0x10c>)
    6164:	4694      	mov	ip, r2
    6166:	4464      	add	r4, ip
    6168:	002a      	movs	r2, r5
    616a:	40a5      	lsls	r5, r4
    616c:	002e      	movs	r6, r5
    616e:	40a3      	lsls	r3, r4
    6170:	1e75      	subs	r5, r6, #1
    6172:	41ae      	sbcs	r6, r5
    6174:	40fa      	lsrs	r2, r7
    6176:	4333      	orrs	r3, r6
    6178:	4313      	orrs	r3, r2
    617a:	2600      	movs	r6, #0
    617c:	e7b0      	b.n	60e0 <__aeabi_d2f+0x38>
    617e:	2400      	movs	r4, #0
    6180:	e7d5      	b.n	612e <__aeabi_d2f+0x86>
    6182:	2202      	movs	r2, #2
    6184:	4252      	negs	r2, r2
    6186:	1b96      	subs	r6, r2, r6
    6188:	001a      	movs	r2, r3
    618a:	40f2      	lsrs	r2, r6
    618c:	2f20      	cmp	r7, #32
    618e:	d009      	beq.n	61a4 <__aeabi_d2f+0xfc>
    6190:	4809      	ldr	r0, [pc, #36]	; (61b8 <__aeabi_d2f+0x110>)
    6192:	4684      	mov	ip, r0
    6194:	4464      	add	r4, ip
    6196:	40a3      	lsls	r3, r4
    6198:	432b      	orrs	r3, r5
    619a:	1e5d      	subs	r5, r3, #1
    619c:	41ab      	sbcs	r3, r5
    619e:	2600      	movs	r6, #0
    61a0:	4313      	orrs	r3, r2
    61a2:	e79d      	b.n	60e0 <__aeabi_d2f+0x38>
    61a4:	2300      	movs	r3, #0
    61a6:	e7f7      	b.n	6198 <__aeabi_d2f+0xf0>
    61a8:	2300      	movs	r3, #0
    61aa:	e7ad      	b.n	6108 <__aeabi_d2f+0x60>
    61ac:	0034      	movs	r4, r6
    61ae:	e7bf      	b.n	6130 <__aeabi_d2f+0x88>
    61b0:	fffffc80 	.word	0xfffffc80
    61b4:	fffffc82 	.word	0xfffffc82
    61b8:	fffffca2 	.word	0xfffffca2

000061bc <__clzsi2>:
    61bc:	211c      	movs	r1, #28
    61be:	2301      	movs	r3, #1
    61c0:	041b      	lsls	r3, r3, #16
    61c2:	4298      	cmp	r0, r3
    61c4:	d301      	bcc.n	61ca <__clzsi2+0xe>
    61c6:	0c00      	lsrs	r0, r0, #16
    61c8:	3910      	subs	r1, #16
    61ca:	0a1b      	lsrs	r3, r3, #8
    61cc:	4298      	cmp	r0, r3
    61ce:	d301      	bcc.n	61d4 <__clzsi2+0x18>
    61d0:	0a00      	lsrs	r0, r0, #8
    61d2:	3908      	subs	r1, #8
    61d4:	091b      	lsrs	r3, r3, #4
    61d6:	4298      	cmp	r0, r3
    61d8:	d301      	bcc.n	61de <__clzsi2+0x22>
    61da:	0900      	lsrs	r0, r0, #4
    61dc:	3904      	subs	r1, #4
    61de:	a202      	add	r2, pc, #8	; (adr r2, 61e8 <__clzsi2+0x2c>)
    61e0:	5c10      	ldrb	r0, [r2, r0]
    61e2:	1840      	adds	r0, r0, r1
    61e4:	4770      	bx	lr
    61e6:	46c0      	nop			; (mov r8, r8)
    61e8:	02020304 	.word	0x02020304
    61ec:	01010101 	.word	0x01010101
	...

000061f8 <__errno>:
    61f8:	4b01      	ldr	r3, [pc, #4]	; (6200 <__errno+0x8>)
    61fa:	6818      	ldr	r0, [r3, #0]
    61fc:	4770      	bx	lr
    61fe:	46c0      	nop			; (mov r8, r8)
    6200:	20000074 	.word	0x20000074

00006204 <__libc_init_array>:
    6204:	b570      	push	{r4, r5, r6, lr}
    6206:	4e0d      	ldr	r6, [pc, #52]	; (623c <__libc_init_array+0x38>)
    6208:	4d0d      	ldr	r5, [pc, #52]	; (6240 <__libc_init_array+0x3c>)
    620a:	2400      	movs	r4, #0
    620c:	1bad      	subs	r5, r5, r6
    620e:	10ad      	asrs	r5, r5, #2
    6210:	d005      	beq.n	621e <__libc_init_array+0x1a>
    6212:	00a3      	lsls	r3, r4, #2
    6214:	58f3      	ldr	r3, [r6, r3]
    6216:	3401      	adds	r4, #1
    6218:	4798      	blx	r3
    621a:	42a5      	cmp	r5, r4
    621c:	d1f9      	bne.n	6212 <__libc_init_array+0xe>
    621e:	f000 f92d 	bl	647c <_init>
    6222:	4e08      	ldr	r6, [pc, #32]	; (6244 <__libc_init_array+0x40>)
    6224:	4d08      	ldr	r5, [pc, #32]	; (6248 <__libc_init_array+0x44>)
    6226:	2400      	movs	r4, #0
    6228:	1bad      	subs	r5, r5, r6
    622a:	10ad      	asrs	r5, r5, #2
    622c:	d005      	beq.n	623a <__libc_init_array+0x36>
    622e:	00a3      	lsls	r3, r4, #2
    6230:	58f3      	ldr	r3, [r6, r3]
    6232:	3401      	adds	r4, #1
    6234:	4798      	blx	r3
    6236:	42a5      	cmp	r5, r4
    6238:	d1f9      	bne.n	622e <__libc_init_array+0x2a>
    623a:	bd70      	pop	{r4, r5, r6, pc}
    623c:	00006488 	.word	0x00006488
    6240:	00006488 	.word	0x00006488
    6244:	00006488 	.word	0x00006488
    6248:	00006490 	.word	0x00006490

0000624c <register_fini>:
    624c:	4b03      	ldr	r3, [pc, #12]	; (625c <register_fini+0x10>)
    624e:	b510      	push	{r4, lr}
    6250:	2b00      	cmp	r3, #0
    6252:	d002      	beq.n	625a <register_fini+0xe>
    6254:	4802      	ldr	r0, [pc, #8]	; (6260 <register_fini+0x14>)
    6256:	f000 f805 	bl	6264 <atexit>
    625a:	bd10      	pop	{r4, pc}
    625c:	00000000 	.word	0x00000000
    6260:	00006275 	.word	0x00006275

00006264 <atexit>:
    6264:	b510      	push	{r4, lr}
    6266:	0001      	movs	r1, r0
    6268:	2300      	movs	r3, #0
    626a:	2200      	movs	r2, #0
    626c:	2000      	movs	r0, #0
    626e:	f000 f81b 	bl	62a8 <__register_exitproc>
    6272:	bd10      	pop	{r4, pc}

00006274 <__libc_fini_array>:
    6274:	b570      	push	{r4, r5, r6, lr}
    6276:	4b09      	ldr	r3, [pc, #36]	; (629c <__libc_fini_array+0x28>)
    6278:	4c09      	ldr	r4, [pc, #36]	; (62a0 <__libc_fini_array+0x2c>)
    627a:	1ae4      	subs	r4, r4, r3
    627c:	10a4      	asrs	r4, r4, #2
    627e:	d009      	beq.n	6294 <__libc_fini_array+0x20>
    6280:	4a08      	ldr	r2, [pc, #32]	; (62a4 <__libc_fini_array+0x30>)
    6282:	18a5      	adds	r5, r4, r2
    6284:	00ad      	lsls	r5, r5, #2
    6286:	18ed      	adds	r5, r5, r3
    6288:	682b      	ldr	r3, [r5, #0]
    628a:	3c01      	subs	r4, #1
    628c:	4798      	blx	r3
    628e:	3d04      	subs	r5, #4
    6290:	2c00      	cmp	r4, #0
    6292:	d1f9      	bne.n	6288 <__libc_fini_array+0x14>
    6294:	f000 f8fc 	bl	6490 <_fini>
    6298:	bd70      	pop	{r4, r5, r6, pc}
    629a:	46c0      	nop			; (mov r8, r8)
    629c:	0000649c 	.word	0x0000649c
    62a0:	000064a0 	.word	0x000064a0
    62a4:	3fffffff 	.word	0x3fffffff

000062a8 <__register_exitproc>:
    62a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    62aa:	46de      	mov	lr, fp
    62ac:	469b      	mov	fp, r3
    62ae:	4b31      	ldr	r3, [pc, #196]	; (6374 <__register_exitproc+0xcc>)
    62b0:	4645      	mov	r5, r8
    62b2:	681c      	ldr	r4, [r3, #0]
    62b4:	23a4      	movs	r3, #164	; 0xa4
    62b6:	464e      	mov	r6, r9
    62b8:	4657      	mov	r7, sl
    62ba:	005b      	lsls	r3, r3, #1
    62bc:	b5e0      	push	{r5, r6, r7, lr}
    62be:	0005      	movs	r5, r0
    62c0:	58e0      	ldr	r0, [r4, r3]
    62c2:	000e      	movs	r6, r1
    62c4:	4690      	mov	r8, r2
    62c6:	2800      	cmp	r0, #0
    62c8:	d04b      	beq.n	6362 <__register_exitproc+0xba>
    62ca:	6843      	ldr	r3, [r0, #4]
    62cc:	2b1f      	cmp	r3, #31
    62ce:	dc0d      	bgt.n	62ec <__register_exitproc+0x44>
    62d0:	1c5c      	adds	r4, r3, #1
    62d2:	2d00      	cmp	r5, #0
    62d4:	d121      	bne.n	631a <__register_exitproc+0x72>
    62d6:	3302      	adds	r3, #2
    62d8:	009b      	lsls	r3, r3, #2
    62da:	6044      	str	r4, [r0, #4]
    62dc:	501e      	str	r6, [r3, r0]
    62de:	2000      	movs	r0, #0
    62e0:	bc3c      	pop	{r2, r3, r4, r5}
    62e2:	4690      	mov	r8, r2
    62e4:	4699      	mov	r9, r3
    62e6:	46a2      	mov	sl, r4
    62e8:	46ab      	mov	fp, r5
    62ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    62ec:	4b22      	ldr	r3, [pc, #136]	; (6378 <__register_exitproc+0xd0>)
    62ee:	2b00      	cmp	r3, #0
    62f0:	d03c      	beq.n	636c <__register_exitproc+0xc4>
    62f2:	20c8      	movs	r0, #200	; 0xc8
    62f4:	0040      	lsls	r0, r0, #1
    62f6:	e000      	b.n	62fa <__register_exitproc+0x52>
    62f8:	bf00      	nop
    62fa:	2800      	cmp	r0, #0
    62fc:	d036      	beq.n	636c <__register_exitproc+0xc4>
    62fe:	22a4      	movs	r2, #164	; 0xa4
    6300:	2300      	movs	r3, #0
    6302:	0052      	lsls	r2, r2, #1
    6304:	58a1      	ldr	r1, [r4, r2]
    6306:	6043      	str	r3, [r0, #4]
    6308:	6001      	str	r1, [r0, #0]
    630a:	50a0      	str	r0, [r4, r2]
    630c:	3240      	adds	r2, #64	; 0x40
    630e:	5083      	str	r3, [r0, r2]
    6310:	3204      	adds	r2, #4
    6312:	5083      	str	r3, [r0, r2]
    6314:	2401      	movs	r4, #1
    6316:	2d00      	cmp	r5, #0
    6318:	d0dd      	beq.n	62d6 <__register_exitproc+0x2e>
    631a:	009a      	lsls	r2, r3, #2
    631c:	4691      	mov	r9, r2
    631e:	4481      	add	r9, r0
    6320:	4642      	mov	r2, r8
    6322:	2188      	movs	r1, #136	; 0x88
    6324:	464f      	mov	r7, r9
    6326:	507a      	str	r2, [r7, r1]
    6328:	22c4      	movs	r2, #196	; 0xc4
    632a:	0052      	lsls	r2, r2, #1
    632c:	4690      	mov	r8, r2
    632e:	4480      	add	r8, r0
    6330:	4642      	mov	r2, r8
    6332:	3987      	subs	r1, #135	; 0x87
    6334:	4099      	lsls	r1, r3
    6336:	6812      	ldr	r2, [r2, #0]
    6338:	468a      	mov	sl, r1
    633a:	430a      	orrs	r2, r1
    633c:	4694      	mov	ip, r2
    633e:	4642      	mov	r2, r8
    6340:	4661      	mov	r1, ip
    6342:	6011      	str	r1, [r2, #0]
    6344:	2284      	movs	r2, #132	; 0x84
    6346:	4649      	mov	r1, r9
    6348:	465f      	mov	r7, fp
    634a:	0052      	lsls	r2, r2, #1
    634c:	508f      	str	r7, [r1, r2]
    634e:	2d02      	cmp	r5, #2
    6350:	d1c1      	bne.n	62d6 <__register_exitproc+0x2e>
    6352:	0002      	movs	r2, r0
    6354:	4655      	mov	r5, sl
    6356:	328d      	adds	r2, #141	; 0x8d
    6358:	32ff      	adds	r2, #255	; 0xff
    635a:	6811      	ldr	r1, [r2, #0]
    635c:	430d      	orrs	r5, r1
    635e:	6015      	str	r5, [r2, #0]
    6360:	e7b9      	b.n	62d6 <__register_exitproc+0x2e>
    6362:	0020      	movs	r0, r4
    6364:	304d      	adds	r0, #77	; 0x4d
    6366:	30ff      	adds	r0, #255	; 0xff
    6368:	50e0      	str	r0, [r4, r3]
    636a:	e7ae      	b.n	62ca <__register_exitproc+0x22>
    636c:	2001      	movs	r0, #1
    636e:	4240      	negs	r0, r0
    6370:	e7b6      	b.n	62e0 <__register_exitproc+0x38>
    6372:	46c0      	nop			; (mov r8, r8)
    6374:	00006478 	.word	0x00006478
    6378:	00000000 	.word	0x00000000

0000637c <senseBatPin>:
    637c:	06000000 01000106                                .....

00006381 <senseAPin>:
    6381:	03010001 0100010b                                .....

00006386 <senseBPin>:
    6386:	02010001 0000010a                                .....

0000638b <senseCPin>:
    638b:	03000001 00000101                                .....

00006390 <senseDPin>:
    6390:	02000001 00000100                                .....

00006395 <analogAccelPin>:
    6395:	07000001 70000007 0000776f 00000000     .......pow......
    63a5:	00000000                                         ...

000063a8 <TWO52>:
    63a8:	00000000 43300000 00000000 c3300000     ......0C......0.
    63b8:	00004360 000042b0 000042b0 000042ae     `C...B...B...B..
    63c8:	00004352 00004352 00004348 000042ae     RC..RC..HC...B..
    63d8:	00004352 00004348 00004352 000042ae     RC..HC..RC...B..
    63e8:	00004358 00004358 00004358 000043e8     XC..XC..XC...C..
    63f8:	00004ccc 00004cae 00004c68 00004b86     .L...L..hL...K..
    6408:	00004c68 00004ca0 00004c68 00004b86     hL...L..hL...K..
    6418:	00004cae 00004cae 00004ca0 00004b86     .L...L...L...K..
    6428:	00004b7e 00004b7e 00004b7e 00004ee4     ~K..~K..~K...N..
    6438:	0000552c 000053ec 000053ec 000053e8     ,U...S...S...S..
    6448:	00005504 00005504 000054f6 000053e8     .U...U...T...S..
    6458:	00005504 000054f6 00005504 000053e8     .U...T...U...S..
    6468:	0000550c 0000550c 0000550c 00005710     .U...U...U...W..

00006478 <_global_impure_ptr>:
    6478:	20000078                                x.. 

0000647c <_init>:
    647c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    647e:	46c0      	nop			; (mov r8, r8)
    6480:	bcf8      	pop	{r3, r4, r5, r6, r7}
    6482:	bc08      	pop	{r3}
    6484:	469e      	mov	lr, r3
    6486:	4770      	bx	lr

00006488 <__init_array_start>:
    6488:	0000624d 	.word	0x0000624d

0000648c <__frame_dummy_init_array_entry>:
    648c:	000000dd                                ....

00006490 <_fini>:
    6490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6492:	46c0      	nop			; (mov r8, r8)
    6494:	bcf8      	pop	{r3, r4, r5, r6, r7}
    6496:	bc08      	pop	{r3}
    6498:	469e      	mov	lr, r3
    649a:	4770      	bx	lr

0000649c <__fini_array_start>:
    649c:	000000b5 	.word	0x000000b5
